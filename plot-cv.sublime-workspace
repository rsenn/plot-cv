{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Extra",
				"ExtractRotation"
			],
			[
				"tra",
				"transformation"
			],
			[
				"define",
				"defineProperties"
			],
			[
				"getters",
				"gettersSetters"
			],
			[
				"circui",
				"circuitFilePath"
			],
			[
				"Conn",
				"ConnectionPoint"
			],
			[
				"parseCom",
				"parseCommentOrEmpty"
			],
			[
				"circ",
				"circuitFilePath"
			],
			[
				"built",
				"builtin_attr"
			],
			[
				"dep",
				"depthOrPred"
			],
			[
				"exte",
				"extendAsyncGenerator"
			],
			[
				"extend",
				"extendArray"
			],
			[
				"allo",
				"allowedDirs"
			],
			[
				"getOwnPr",
				"getOwnPropertyNames(...)"
			],
			[
				"Prom",
				"PromiseWorker"
			],
			[
				"trans",
				"transformation"
			],
			[
				"allow",
				"allowedDirs"
			],
			[
				"Get",
				"GetElementsBySignal"
			],
			[
				"GetEle",
				"GetElementsBySignal"
			],
			[
				"getOwn",
				"getOwnPropertyNames(...)"
			],
			[
				"ColorSi",
				"ColorSignals"
			],
			[
				"HTML",
				"HTMLTableRow"
			],
			[
				"HTMLTable",
				"HTMLTableColumn"
			],
			[
				"rend",
				"renderToString"
			],
			[
				"Pack",
				"Package2Circuit"
			],
			[
				"lazyP",
				"lazyProperties"
			],
			[
				"JS_Get",
				"JS_GetProperty"
			],
			[
				"Ret",
				"ReturnValuePathFunction"
			],
			[
				"cFunc",
				"cFuncListObjects"
			],
			[
				"isC",
				"isCFuncCall"
			],
			[
				"En",
				"EntityNames"
			],
			[
				"parseFrom",
				"parseFromString"
			],
			[
				"pseu",
				"pseudoClassArg"
			],
			[
				"pseudoC",
				"pseudoClassName"
			],
			[
				"Key",
				"KeyboardEvent"
			],
			[
				"getOp",
				"getOptionEntries"
			],
			[
				"setProp",
				"setPropertyValue"
			],
			[
				"parse",
				"parseSelectors"
			],
			[
				"JS_SetPr",
				"JS_SetPropertyStr"
			],
			[
				"jsm_buil",
				"jsm_builtin_init"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"JS_Set",
				"JS_SetProperty"
			],
			[
				"JS_New",
				"JS_NewObject"
			],
			[
				"ide",
				"importIdentifiers"
			],
			[
				"iden",
				"importIdentifiers"
			],
			[
				"import",
				"importIdentifiers"
			],
			[
				"ident",
				"identifierSets"
			],
			[
				"path_is",
				"path_is_absolute"
			],
			[
				"js_is_",
				"js_is_null_or_undefined"
			],
			[
				"path_skip_se",
				"path_skip_separator_s"
			],
			[
				"WRITABLE_METHO",
				"WRITABLE_METHOD_CLOSE"
			],
			[
				"list_fo",
				"list_for_each_prev"
			],
			[
				"JS_Th",
				"JS_ThrowOutOfMemory"
			],
			[
				"JS_",
				"JS_ThrowOutOfMemory"
			],
			[
				"underly",
				"underlying_source"
			],
			[
				"Tok",
				"TokenSequence"
			],
			[
				"JS_GetPr",
				"JS_GetPropertyStr"
			],
			[
				"JS_Thro",
				"JS_ThrowOutOfMemory"
			],
			[
				"getAt",
				"getAttributeNames"
			],
			[
				"self",
				"self_closing_tags"
			],
			[
				"self_",
				"self_closing_tags"
			],
			[
				"JS_PROP",
				"JS_PROP_ENUMERABLE"
			],
			[
				"depe",
				"dependencyMap"
			],
			[
				"de",
				"dependencyMap"
			],
			[
				"js_is_null",
				"js_is_null_or_undefined"
			],
			[
				"JS_P",
				"JS_PROP_ENUMERABLE"
			],
			[
				"JS_SetP",
				"JS_SetPropertyUint32"
			],
			[
				"spec",
				"specifiers"
			],
			[
				"Num",
				"NumericRange"
			],
			[
				"token_r",
				"token_release_rt"
			],
			[
				"JS_Thr",
				"JS_ThrowTypeError"
			],
			[
				"js_",
				"js_location_data"
			],
			[
				"debug_js_mall",
				"debug_js_malloc_usable_size"
			],
			[
				"repl",
				"replaceRange"
			],
			[
				"js_malloc_u",
				"js_malloc_usable_size_rt"
			],
			[
				"malloc",
				"malloc_usable_size"
			],
			[
				"all",
				"alloc_block_list"
			],
			[
				"alloc",
				"alloc_block_list"
			],
			[
				"path_skip",
				"path_skip_component"
			],
			[
				"jsm_mo",
				"jsm_module_loader"
			],
			[
				"JS_Throw",
				"JS_ThrowInternalError"
			],
			[
				"JS_AtomTo",
				"JS_AtomToValue"
			],
			[
				"inspect",
				"inspectSymbol"
			],
			[
				"at",
				"attributes"
			],
			[
				"parent",
				"parentElement"
			],
			[
				"owner",
				"ownerElement"
			],
			[
				"get",
				"getPrototypeOf"
			],
			[
				"child",
				"childElementCount"
			],
			[
				"getO",
				"getOwnPropertyNames"
			],
			[
				"js_misc_im",
				"js_misc_immutable_constructor"
			],
			[
				"obj",
				"object_tostring"
			],
			[
				"js_misc_immu",
				"js_misc_immutable_free"
			],
			[
				"js_misc_imm",
				"js_misc_immutable_constructor"
			],
			[
				"CMAKE_IMPORT",
				"CMAKE_IMPORT_LIBRARY_SUFFIX"
			],
			[
				"CMAKE_CUR",
				"CMAKE_CURRENT_BINARY_DIR"
			],
			[
				"js_is",
				"js_is_null_or_undefined"
			],
			[
				"js_asy",
				"js_async_socket_class_id"
			],
			[
				"JS_NewObj",
				"JS_NewObjectProtoClass"
			],
			[
				"async_",
				"async_socket_proto"
			],
			[
				"js_socket_class",
				"js_socket_class_id"
			],
			[
				"g",
				"getOwnPropertyNames(...)"
			],
			[
				"js_sockaddr_cl",
				"js_sockaddr_class_id"
			],
			[
				"js_so",
				"js_sockaddr_constructor"
			],
			[
				"js_sys",
				"js_syscallerror_class_id"
			],
			[
				"js_string",
				"js_stringdecoder_class_id"
			],
			[
				"js_pred",
				"js_predicate_class_id"
			],
			[
				"js_syn",
				"js_syntaxerror_class"
			],
			[
				"js_child",
				"js_child_process_class_id"
			],
			[
				"js_b",
				"js_blob_class_id"
			],
			[
				"js_loca",
				"js_location_class_id"
			],
			[
				"js_token_in",
				"js_token_inspect_funcs"
			],
			[
				"set",
				"setReadHandler"
			],
			[
				"js_get_",
				"js_get_propertystr_bool"
			],
			[
				"js_misc_ate",
				"js_misc_atexit_functions"
			],
			[
				"isF",
				"isFunction"
			],
			[
				"tab",
				"tab_atom_len"
			],
			[
				"isARr",
				"isArrayBuffer"
			],
			[
				"BIT",
				"BITFIELD_FROMARRAY"
			],
			[
				"to",
				"toStringTag"
			],
			[
				"inotify",
				"inotify_add_watch"
			],
			[
				"JS_SetProp",
				"JS_SetPropertyUint32"
			],
			[
				"JS_GEt",
				"JS_GetGlobalObject"
			],
			[
				"dbuf_put",
				"dbuf_put_colorstr"
			],
			[
				"REPEATER_",
				"REPEATER_REJECTED"
			],
			[
				"REP",
				"REPEATER_DONE"
			],
			[
				"resol",
				"resolving_funcs"
			],
			[
				"JS_NEwCFun",
				"JS_NewCFunctionData"
			],
			[
				"js_function",
				"js_function_bind_this"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "Text = ({ x, y, text, color, alignment, rot, visible, className, opts = {}, style, ...props }) =>\n  t =>",
			"settings":
			{
				"buffer_size": 104,
				"line_ending": "Unix",
				"name": "𝌆 Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					3111,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABoAAAAVGV4dCA9ICh7IHgsIHksIHRleHQsIGNvbG9yLCBhbGlnbm1lbnQsIHJvdCwgdmlzaWJsZSwgY2xhc3NOYW1lLCBvcHRzID0ge30sIHN0eWxlLCAuLi5wcm9wcyB9KSA9PgogIHQgPT4AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					3112,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/components/text.js",
						"symkeys":
						[
							[
								412,
								509
							],
							[
								1569,
								1573
							]
						],
						"symlist":
						[
							"Text = ({ x, y, text, color, alignment, rot, visible, className, opts = {}, style, ...props }) =>",
							"t =>"
						]
					},
					"AwAAAAAAAAAAAAAAaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGgAAABUZXh0ID0gKHsgeCwgeSwgdGV4dCwgY29sb3IsIGFsaWdubWVudCwgcm90LCB2aXNpYmxlLCBjbGFzc05hbWUsIG9wdHMgPSB7fSwgc3R5bGUsIC4uLnByb3BzIH0pID0+CiAgdCA9PgAAAAAAAAAAaAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					3113,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/components/text.js",
						"symkeys":
						[
							[
								412,
								509
							],
							[
								1569,
								1573
							]
						],
						"symlist":
						[
							"Text = ({ x, y, text, color, alignment, rot, visible, className, opts = {}, style, ...props }) =>",
							"t =>"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAABoAAAAVGV4dCA9ICh7IHgsIHksIHRleHQsIGNvbG9yLCBhbGlnbm1lbnQsIHJvdCwgdmlzaWJsZSwgY2xhc3NOYW1lLCBvcHRzID0ge30sIHN0eWxlLCAuLi5wcm9wcyB9KSA9PgogIHQgPT4AAAAAAAAAAGgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABoAAAAVGV4dCA9ICh7IHgsIHksIHRleHQsIGNvbG9yLCBhbGlnbm1lbnQsIHJvdCwgdmlzaWJsZSwgY2xhc3NOYW1lLCBvcHRzID0ge30sIHN0eWxlLCAuLi5wcm9wcyB9KSA9PgogIHQgPT4AAAAAAAAAAGgAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					3114,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/components/text.js",
						"symkeys":
						[
							[
								412,
								509
							],
							[
								1576,
								1580
							]
						],
						"symlist":
						[
							"Text = ({ x, y, text, color, alignment, rot, visible, className, opts = {}, style, ...props }) =>",
							"t =>"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAABoAAAAVGV4dCA9ICh7IHgsIHksIHRleHQsIGNvbG9yLCBhbGlnbm1lbnQsIHJvdCwgdmlzaWJsZSwgY2xhc3NOYW1lLCBvcHRzID0ge30sIHN0eWxlLCAuLi5wcm9wcyB9KSA9PgogIHQgPT4AAAAAAAAAAGgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABoAAAAVGV4dCA9ICh7IHgsIHksIHRleHQsIGNvbG9yLCBhbGlnbm1lbnQsIHJvdCwgdmlzaWJsZSwgY2xhc3NOYW1lLCBvcHRzID0ge30sIHN0eWxlLCAuLi5wcm9wcyB9KSA9PgogIHQgPT4AAAAAAAAAAGgAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					3115,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/components/text.js",
						"symkeys":
						[
							[
								412,
								509
							],
							[
								1576,
								1580
							]
						],
						"symlist":
						[
							"Text = ({ x, y, text, color, alignment, rot, visible, className, opts = {}, style, ...props }) =>",
							"t =>"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAABoAAAAVGV4dCA9ICh7IHgsIHksIHRleHQsIGNvbG9yLCBhbGlnbm1lbnQsIHJvdCwgdmlzaWJsZSwgY2xhc3NOYW1lLCBvcHRzID0ge30sIHN0eWxlLCAuLi5wcm9wcyB9KSA9PgogIHQgPT4AAAAAAAAAAGgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABoAAAAVGV4dCA9ICh7IHgsIHksIHRleHQsIGNvbG9yLCBhbGlnbm1lbnQsIHJvdCwgdmlzaWJsZSwgY2xhc3NOYW1lLCBvcHRzID0ge30sIHN0eWxlLCAuLi5wcm9wcyB9KSA9PgogIHQgPT4AAAAAAAAAAGgAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					3116,
					3,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAABoAAAAVGV4dCA9ICh7IHgsIHksIHRleHQsIGNvbG9yLCBhbGlnbm1lbnQsIHJvdCwgdmlzaWJsZSwgY2xhc3NOYW1lLCBvcHRzID0ge30sIHN0eWxlLCAuLi5wcm9wcyB9KSA9PgogIHQgPT4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					3117,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/components/text.js",
						"symkeys":
						[
							[
								412,
								509
							],
							[
								1576,
								1580
							]
						],
						"symlist":
						[
							"Text = ({ x, y, text, color, alignment, rot, visible, className, opts = {}, style, ...props }) =>",
							"t =>"
						]
					},
					"AQAAAAAAAAAAAAAAaAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					3118,
					3,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/components/text.js",
						"symkeys":
						[
							[
								412,
								509
							],
							[
								1583,
								1587
							]
						],
						"symlist":
						[
							"Text = ({ x, y, text, color, alignment, rot, visible, className, opts = {}, style, ...props }) =>",
							"t =>"
						]
					},
					"BgAAAAAAAAAAAAAAAAAAAAAAAABoAAAAVGV4dCA9ICh7IHgsIHksIHRleHQsIGNvbG9yLCBhbGlnbm1lbnQsIHJvdCwgdmlzaWJsZSwgY2xhc3NOYW1lLCBvcHRzID0ge30sIHN0eWxlLCAuLi5wcm9wcyB9KSA9PgogIHQgPT4AAAAAAAAAAGgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABoAAAAVGV4dCA9ICh7IHgsIHksIHRleHQsIGNvbG9yLCBhbGlnbm1lbnQsIHJvdCwgdmlzaWJsZSwgY2xhc3NOYW1lLCBvcHRzID0ge30sIHN0eWxlLCAuLi5wcm9wcyB9KSA9PgogIHQgPT4AAAAAAAAAAGgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABoAAAAVGV4dCA9ICh7IHgsIHksIHRleHQsIGNvbG9yLCBhbGlnbm1lbnQsIHJvdCwgdmlzaWJsZSwgY2xhc3NOYW1lLCBvcHRzID0ge30sIHN0eWxlLCAuLi5wcm9wcyB9KSA9PgogIHQgPT4AAAAAAAAAAGgAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					3119,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/components/text.js",
						"symkeys":
						[
							[
								412,
								509
							],
							[
								1583,
								1587
							]
						],
						"symlist":
						[
							"Text = ({ x, y, text, color, alignment, rot, visible, className, opts = {}, style, ...props }) =>",
							"t =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABoAAAAVGV4dCA9ICh7IHgsIHksIHRleHQsIGNvbG9yLCBhbGlnbm1lbnQsIHJvdCwgdmlzaWJsZSwgY2xhc3NOYW1lLCBvcHRzID0ge30sIHN0eWxlLCAuLi5wcm9wcyB9KSA9PgogIHQgPT4AAAAAAAAAAGgAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					3120,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/components/text.js",
						"symkeys":
						[
							[
								412,
								509
							],
							[
								1585,
								1589
							]
						],
						"symlist":
						[
							"Text = ({ x, y, text, color, alignment, rot, visible, className, opts = {}, style, ...props }) =>",
							"t =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABoAAAAVGV4dCA9ICh7IHgsIHksIHRleHQsIGNvbG9yLCBhbGlnbm1lbnQsIHJvdCwgdmlzaWJsZSwgY2xhc3NOYW1lLCBvcHRzID0ge30sIHN0eWxlLCAuLi5wcm9wcyB9KSA9PgogIHQgPT4AAAAAAAAAAGgAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					3121,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/555-PWM-Motor-Speed-Controller-alt-board.svg",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABoAAAAVGV4dCA9ICh7IHgsIHksIHRleHQsIGNvbG9yLCBhbGlnbm1lbnQsIHJvdCwgdmlzaWJsZSwgY2xhc3NOYW1lLCBvcHRzID0ge30sIHN0eWxlLCAuLi5wcm9wcyB9KSA9PgogIHQgPT4AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					3122,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/components/text.js",
						"symkeys":
						[
							[
								412,
								509
							],
							[
								1585,
								1589
							]
						],
						"symlist":
						[
							"Text = ({ x, y, text, color, alignment, rot, visible, className, opts = {}, style, ...props }) =>",
							"t =>"
						]
					},
					"AQAAAAAAAAAAAAAAaAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					3123,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/555-PWM-Motor-Speed-Controller-alt-board.svg",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABoAAAAVGV4dCA9ICh7IHgsIHksIHRleHQsIGNvbG9yLCBhbGlnbm1lbnQsIHJvdCwgdmlzaWJsZSwgY2xhc3NOYW1lLCBvcHRzID0ge30sIHN0eWxlLCAuLi5wcm9wcyB9KSA9PgogIHQgPT4AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					3124,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/util.js",
						"symkeys":
						[
							[
								771,
								788
							],
							[
								1023,
								1072
							],
							[
								1967,
								1971
							],
							[
								2797,
								2804
							],
							[
								3326,
								3340
							],
							[
								3612,
								3618
							],
							[
								3733,
								3760
							],
							[
								3808,
								3839
							],
							[
								3995,
								4005
							],
							[
								4044,
								4068
							],
							[
								4135,
								4151
							],
							[
								4196,
								4213
							],
							[
								4261,
								4281
							],
							[
								4332,
								4355
							],
							[
								4403,
								4429
							],
							[
								4848,
								4853
							],
							[
								4912,
								4936
							],
							[
								4959,
								4975
							],
							[
								4990,
								5001
							],
							[
								5041,
								5057
							],
							[
								5072,
								5084
							],
							[
								5125,
								5141
							],
							[
								5156,
								5171
							],
							[
								5215,
								5231
							],
							[
								5246,
								5264
							],
							[
								5311,
								5327
							],
							[
								5342,
								5363
							],
							[
								5413,
								5429
							],
							[
								5444,
								5468
							],
							[
								5594,
								5617
							],
							[
								5700,
								5720
							],
							[
								5975,
								5987
							],
							[
								6037,
								6049
							],
							[
								6169,
								6192
							],
							[
								6265,
								6291
							],
							[
								6526,
								6547
							],
							[
								6602,
								6623
							],
							[
								6752,
								6776
							],
							[
								6872,
								6879
							],
							[
								6906,
								6913
							],
							[
								6945,
								6967
							],
							[
								7060,
								7067
							],
							[
								7091,
								7098
							],
							[
								7125,
								7147
							],
							[
								7197,
								7204
							],
							[
								7258,
								7265
							],
							[
								7297,
								7326
							],
							[
								7672,
								7697
							],
							[
								7824,
								7843
							],
							[
								7925,
								7944
							],
							[
								8131,
								8150
							],
							[
								8228,
								8247
							],
							[
								8320,
								8339
							],
							[
								8435,
								8475
							],
							[
								8617,
								8630
							],
							[
								8656,
								8689
							],
							[
								8938,
								8952
							],
							[
								9113,
								9120
							],
							[
								9353,
								9359
							],
							[
								9773,
								9797
							],
							[
								10176,
								10212
							],
							[
								10254,
								10272
							],
							[
								10455,
								10492
							],
							[
								10573,
								10591
							],
							[
								10609,
								10620
							],
							[
								10686,
								10720
							],
							[
								10747,
								10765
							],
							[
								11040,
								11085
							],
							[
								11285,
								11303
							],
							[
								11554,
								11580
							],
							[
								11839,
								11858
							],
							[
								11937,
								11956
							],
							[
								12106,
								12154
							],
							[
								12335,
								12350
							],
							[
								12376,
								12386
							],
							[
								12473,
								12478
							],
							[
								13245,
								13251
							],
							[
								13327,
								13332
							],
							[
								13341,
								13346
							],
							[
								13375,
								13384
							],
							[
								13408,
								13418
							],
							[
								13440,
								13453
							],
							[
								13481,
								13495
							],
							[
								13521,
								13538
							],
							[
								13566,
								13584
							],
							[
								13685,
								13690
							],
							[
								13898,
								13921
							],
							[
								14372,
								14376
							],
							[
								14418,
								14422
							],
							[
								14529,
								14541
							],
							[
								15130,
								15140
							],
							[
								15228,
								15256
							],
							[
								15290,
								15296
							],
							[
								15358,
								15382
							],
							[
								15412,
								15453
							],
							[
								15729,
								15741
							],
							[
								15774,
								15806
							],
							[
								15848,
								15888
							],
							[
								16042,
								16062
							],
							[
								17349,
								17379
							],
							[
								17439,
								17476
							],
							[
								17661,
								17667
							],
							[
								17882,
								17912
							],
							[
								17992,
								18024
							],
							[
								18252,
								18282
							],
							[
								18419,
								18422
							],
							[
								18559,
								18593
							],
							[
								18750,
								18782
							],
							[
								19072,
								19100
							],
							[
								19178,
								19207
							],
							[
								19282,
								19319
							],
							[
								19369,
								19404
							],
							[
								19585,
								19620
							],
							[
								19920,
								19943
							],
							[
								19974,
								19998
							],
							[
								20062,
								20089
							],
							[
								20122,
								20162
							],
							[
								20280,
								20323
							],
							[
								20626,
								20655
							],
							[
								20712,
								20726
							],
							[
								20775,
								20804
							],
							[
								20846,
								20873
							],
							[
								20983,
								20990
							],
							[
								21010,
								21038
							],
							[
								21128,
								21155
							],
							[
								21194,
								21221
							],
							[
								21271,
								21295
							],
							[
								21370,
								21405
							],
							[
								21507,
								21539
							],
							[
								21624,
								21658
							],
							[
								21743,
								21773
							],
							[
								21993,
								22003
							],
							[
								22056,
								22060
							],
							[
								22128,
								22165
							],
							[
								22202,
								22219
							],
							[
								22242,
								22259
							],
							[
								22319,
								22336
							],
							[
								22422,
								22431
							],
							[
								22503,
								22517
							],
							[
								22585,
								22590
							],
							[
								23342,
								23380
							],
							[
								23531,
								23566
							],
							[
								23650,
								23668
							],
							[
								23726,
								23770
							],
							[
								23784,
								23793
							],
							[
								23825,
								23853
							],
							[
								23867,
								23876
							],
							[
								23945,
								23988
							],
							[
								24108,
								24141
							],
							[
								24168,
								24175
							],
							[
								24304,
								24309
							],
							[
								24325,
								24359
							],
							[
								24436,
								24462
							],
							[
								24560,
								24594
							],
							[
								24617,
								24631
							],
							[
								24666,
								24716
							],
							[
								24854,
								24900
							],
							[
								24961,
								25023
							],
							[
								25034,
								25050
							],
							[
								25185,
								25222
							],
							[
								25261,
								25318
							],
							[
								25690,
								25724
							],
							[
								25864,
								25903
							],
							[
								25983,
								26020
							],
							[
								26137,
								26168
							],
							[
								26923,
								26966
							],
							[
								27097,
								27102
							],
							[
								27258,
								27292
							],
							[
								27500,
								27536
							],
							[
								27598,
								27624
							],
							[
								28432,
								28457
							],
							[
								28525,
								28553
							],
							[
								29146,
								29165
							],
							[
								29261,
								29282
							],
							[
								29423,
								29448
							],
							[
								29748,
								29805
							],
							[
								29928,
								29993
							],
							[
								30103,
								30155
							],
							[
								30276,
								30326
							],
							[
								30442,
								30457
							],
							[
								30528,
								30539
							],
							[
								30627,
								30638
							],
							[
								30664,
								30679
							],
							[
								30757,
								30771
							],
							[
								30811,
								30830
							],
							[
								31053,
								31149
							],
							[
								31152,
								31254
							],
							[
								31310,
								31322
							],
							[
								31387,
								31401
							],
							[
								31433,
								31439
							],
							[
								31482,
								31490
							],
							[
								31536,
								31544
							],
							[
								31600,
								31615
							],
							[
								31668,
								31675
							],
							[
								31786,
								31796
							],
							[
								31938,
								31948
							],
							[
								32011,
								32018
							],
							[
								32103,
								32130
							],
							[
								32154,
								32163
							],
							[
								32189,
								32197
							],
							[
								32214,
								32223
							],
							[
								32262,
								32270
							],
							[
								32281,
								32294
							],
							[
								32305,
								32320
							],
							[
								32349,
								32367
							],
							[
								32447,
								32471
							],
							[
								32892,
								32926
							],
							[
								32957,
								32968
							],
							[
								32973,
								32983
							],
							[
								32997,
								33008
							],
							[
								33029,
								33065
							],
							[
								33569,
								33599
							],
							[
								33643,
								33674
							],
							[
								33949,
								33971
							],
							[
								34031,
								34057
							],
							[
								34173,
								34184
							],
							[
								34296,
								34327
							],
							[
								34532,
								34557
							],
							[
								34624,
								34676
							],
							[
								34788,
								34810
							],
							[
								34816,
								34837
							],
							[
								34854,
								34886
							],
							[
								35006,
								35041
							],
							[
								35106,
								35139
							],
							[
								35186,
								35198
							],
							[
								35268,
								35280
							],
							[
								35337,
								35368
							],
							[
								35412,
								35454
							],
							[
								35630,
								35658
							],
							[
								35769,
								35799
							],
							[
								35811,
								35828
							],
							[
								35952,
								35988
							],
							[
								36065,
								36104
							],
							[
								36216,
								36220
							],
							[
								36247,
								36251
							],
							[
								36290,
								36294
							],
							[
								36322,
								36326
							],
							[
								36349,
								36375
							],
							[
								36417,
								36453
							],
							[
								36491,
								36523
							],
							[
								36862,
								36899
							],
							[
								37143,
								37184
							],
							[
								37277,
								37294
							],
							[
								37306,
								37317
							],
							[
								37332,
								37349
							],
							[
								37435,
								37459
							],
							[
								37482,
								37508
							],
							[
								37964,
								37996
							],
							[
								38250,
								38259
							],
							[
								38290,
								38299
							],
							[
								38330,
								38339
							],
							[
								38370,
								38379
							],
							[
								38410,
								38419
							],
							[
								38449,
								38458
							],
							[
								38489,
								38498
							],
							[
								38507,
								38527
							],
							[
								38571,
								38576
							],
							[
								38619,
								38628
							],
							[
								38796,
								38829
							],
							[
								39203,
								39229
							],
							[
								39455,
								39498
							],
							[
								39540,
								39552
							],
							[
								39630,
								39675
							],
							[
								39796,
								39816
							],
							[
								39937,
								39944
							],
							[
								39963,
								39970
							],
							[
								40150,
								40179
							],
							[
								40308,
								40353
							],
							[
								40481,
								40513
							],
							[
								40592,
								40613
							],
							[
								40883,
								40901
							],
							[
								41089,
								41108
							],
							[
								41241,
								41289
							],
							[
								41302,
								41311
							],
							[
								41349,
								41359
							],
							[
								41406,
								41440
							],
							[
								41717,
								41759
							],
							[
								41813,
								41851
							],
							[
								42013,
								42032
							],
							[
								42233,
								42272
							],
							[
								42406,
								42423
							],
							[
								42963,
								42983
							],
							[
								43081,
								43100
							],
							[
								43147,
								43166
							],
							[
								45019,
								45026
							],
							[
								45041,
								45048
							],
							[
								46685,
								46718
							],
							[
								46866,
								46875
							],
							[
								46895,
								46903
							],
							[
								46907,
								46916
							],
							[
								47057,
								47085
							],
							[
								47199,
								47227
							],
							[
								47341,
								47359
							],
							[
								47738,
								47773
							],
							[
								47813,
								47840
							],
							[
								47921,
								47969
							],
							[
								48180,
								48267
							],
							[
								48278,
								48294
							],
							[
								48403,
								48443
							],
							[
								48471,
								48475
							],
							[
								48492,
								48497
							],
							[
								48516,
								48521
							],
							[
								48539,
								48576
							],
							[
								48604,
								48608
							],
							[
								48614,
								48620
							],
							[
								48635,
								48641
							],
							[
								48649,
								48655
							],
							[
								48671,
								48708
							],
							[
								48736,
								48740
							],
							[
								48754,
								48760
							],
							[
								48768,
								48774
							],
							[
								48781,
								48787
							],
							[
								48804,
								48857
							],
							[
								48858,
								48875
							],
							[
								48980,
								48999
							],
							[
								49046,
								49084
							],
							[
								49109,
								49122
							],
							[
								49752,
								49796
							],
							[
								49868,
								49886
							],
							[
								50140,
								50158
							],
							[
								50485,
								50512
							],
							[
								50521,
								50536
							],
							[
								50612,
								50639
							],
							[
								50766,
								50770
							],
							[
								50848,
								50861
							],
							[
								51058,
								51087
							],
							[
								51195,
								51221
							],
							[
								51289,
								51316
							],
							[
								51588,
								51609
							],
							[
								51679,
								51704
							],
							[
								51724,
								51746
							],
							[
								51810,
								51835
							],
							[
								51968,
								51992
							],
							[
								52216,
								52232
							],
							[
								52233,
								52252
							],
							[
								52285,
								52305
							],
							[
								52394,
								52422
							],
							[
								52522,
								52547
							],
							[
								52597,
								52624
							],
							[
								52627,
								52646
							],
							[
								52951,
								52981
							],
							[
								53024,
								53039
							],
							[
								53107,
								53130
							],
							[
								53169,
								53173
							],
							[
								53213,
								53217
							],
							[
								53255,
								53279
							],
							[
								53346,
								53382
							],
							[
								53447,
								53454
							],
							[
								53492,
								53531
							],
							[
								53689,
								53722
							],
							[
								53926,
								53937
							],
							[
								54045,
								54076
							],
							[
								54135,
								54191
							],
							[
								54555,
								54596
							],
							[
								54962,
								55002
							],
							[
								55230,
								55278
							],
							[
								55310,
								55319
							],
							[
								55602,
								55641
							],
							[
								55652,
								55661
							],
							[
								55700,
								55711
							],
							[
								56116,
								56157
							],
							[
								56203,
								56236
							],
							[
								56313,
								56348
							],
							[
								56448,
								56491
							],
							[
								56671,
								56707
							],
							[
								57024,
								57063
							],
							[
								57199,
								57247
							],
							[
								57415,
								57429
							],
							[
								57601,
								57608
							],
							[
								57724,
								57731
							],
							[
								58066,
								58090
							],
							[
								58120,
								58137
							],
							[
								58194,
								58216
							],
							[
								58245,
								58262
							],
							[
								58368,
								58399
							],
							[
								58473,
								58493
							],
							[
								58627,
								58661
							],
							[
								58691,
								58700
							],
							[
								58720,
								58728
							],
							[
								58732,
								58741
							],
							[
								58834,
								58868
							],
							[
								59169,
								59202
							],
							[
								59564,
								59598
							],
							[
								59968,
								60002
							],
							[
								60285,
								60329
							],
							[
								60954,
								60993
							],
							[
								61121,
								61203
							],
							[
								62329,
								62342
							],
							[
								62360,
								62369
							],
							[
								62387,
								62396
							],
							[
								62447,
								62458
							],
							[
								62482,
								62494
							],
							[
								62501,
								62512
							],
							[
								62549,
								62554
							],
							[
								62667,
								62672
							],
							[
								62848,
								62853
							],
							[
								62896,
								62901
							],
							[
								62946,
								62951
							],
							[
								63156,
								63161
							],
							[
								63365,
								63398
							],
							[
								63411,
								63412
							],
							[
								63821,
								63854
							],
							[
								64018,
								64055
							],
							[
								64063,
								64064
							],
							[
								64540,
								64547
							],
							[
								64686,
								64697
							],
							[
								64783,
								64794
							],
							[
								65081,
								65095
							],
							[
								65688,
								65720
							],
							[
								66230,
								66268
							],
							[
								66567,
								66590
							],
							[
								66603,
								66623
							],
							[
								66686,
								66700
							],
							[
								66704,
								66718
							],
							[
								66795,
								66810
							],
							[
								66884,
								66898
							],
							[
								66941,
								66964
							],
							[
								67156,
								67174
							],
							[
								67380,
								67394
							],
							[
								67398,
								67412
							],
							[
								67584,
								67606
							],
							[
								68150,
								68155
							],
							[
								68197,
								68203
							],
							[
								68246,
								68253
							],
							[
								68282,
								68321
							],
							[
								68350,
								68360
							],
							[
								68366,
								68375
							],
							[
								68393,
								68420
							],
							[
								68460,
								68469
							],
							[
								68478,
								68486
							],
							[
								68534,
								68543
							],
							[
								68569,
								68578
							],
							[
								68589,
								68597
							],
							[
								68669,
								68678
							],
							[
								68769,
								68813
							],
							[
								68875,
								68936
							],
							[
								69244,
								69270
							],
							[
								69298,
								69303
							],
							[
								69327,
								69340
							],
							[
								69448,
								69513
							],
							[
								69620,
								69646
							],
							[
								69680,
								69706
							],
							[
								69727,
								69760
							],
							[
								69793,
								69809
							],
							[
								69824,
								69831
							],
							[
								69857,
								69873
							],
							[
								69897,
								69924
							],
							[
								69981,
								69996
							],
							[
								70018,
								70030
							],
							[
								70047,
								70062
							],
							[
								70072,
								70081
							],
							[
								70121,
								70130
							],
							[
								70137,
								70143
							],
							[
								70155,
								70184
							],
							[
								70270,
								70280
							],
							[
								70321,
								70336
							],
							[
								70355,
								70368
							],
							[
								70793,
								70803
							],
							[
								70942,
								70954
							],
							[
								71235,
								71256
							],
							[
								71442,
								71453
							],
							[
								71490,
								71499
							],
							[
								71579,
								71612
							],
							[
								71918,
								71947
							],
							[
								71991,
								72013
							],
							[
								72047,
								72086
							],
							[
								72120,
								72126
							],
							[
								72199,
								72224
							],
							[
								72235,
								72247
							],
							[
								72440,
								72450
							],
							[
								72502,
								72552
							],
							[
								72960,
								72990
							],
							[
								73076,
								73106
							],
							[
								73179,
								73210
							],
							[
								73378,
								73402
							],
							[
								73457,
								73481
							],
							[
								73609,
								73615
							],
							[
								73696,
								73721
							],
							[
								73809,
								73832
							],
							[
								73864,
								73870
							],
							[
								74013,
								74014
							],
							[
								74105,
								74109
							],
							[
								74243,
								74274
							],
							[
								74526,
								74538
							],
							[
								74655,
								74669
							],
							[
								74815,
								74847
							],
							[
								75051,
								75077
							],
							[
								75078,
								75095
							],
							[
								75144,
								75167
							],
							[
								75200,
								75210
							],
							[
								75259,
								75271
							],
							[
								75586,
								75596
							],
							[
								75788,
								75800
							],
							[
								76475,
								76508
							],
							[
								76536,
								76550
							],
							[
								76644,
								76669
							],
							[
								76832,
								76860
							],
							[
								76994,
								77023
							],
							[
								77323,
								77371
							],
							[
								77560,
								77597
							],
							[
								77646,
								77694
							],
							[
								77808,
								77842
							],
							[
								77850,
								77874
							],
							[
								78388,
								78418
							],
							[
								78544,
								78571
							],
							[
								79048,
								79099
							],
							[
								79141,
								79168
							],
							[
								79338,
								79386
							],
							[
								79598,
								79633
							],
							[
								79840,
								79873
							],
							[
								80145,
								80176
							],
							[
								80489,
								80533
							],
							[
								80669,
								80685
							],
							[
								80846,
								80896
							],
							[
								81292,
								81297
							],
							[
								81378,
								81391
							],
							[
								81440,
								81450
							],
							[
								81454,
								81467
							],
							[
								81542,
								81557
							],
							[
								81606,
								81616
							],
							[
								81620,
								81635
							],
							[
								81702,
								81735
							],
							[
								81845,
								81852
							],
							[
								82137,
								82152
							],
							[
								82482,
								82503
							],
							[
								82564,
								82592
							],
							[
								82683,
								82692
							],
							[
								83659,
								83690
							],
							[
								83862,
								83876
							],
							[
								84499,
								84533
							],
							[
								84718,
								84740
							],
							[
								84776,
								84800
							],
							[
								84803,
								84823
							],
							[
								85067,
								85093
							],
							[
								85188,
								85226
							],
							[
								85628,
								85671
							],
							[
								85753,
								85781
							],
							[
								85812,
								85848
							],
							[
								86016,
								86124
							],
							[
								86362,
								86413
							],
							[
								86491,
								86525
							],
							[
								86613,
								86641
							],
							[
								86675,
								86710
							],
							[
								86784,
								86809
							],
							[
								86831,
								86848
							],
							[
								86890,
								86939
							],
							[
								87012,
								87025
							],
							[
								87097,
								87110
							],
							[
								87286,
								87324
							],
							[
								87335,
								87354
							],
							[
								87408,
								87449
							],
							[
								87460,
								87479
							],
							[
								87537,
								87562
							],
							[
								87609,
								87648
							],
							[
								87743,
								87756
							],
							[
								87807,
								87817
							],
							[
								87883,
								87890
							],
							[
								87921,
								87927
							],
							[
								87969,
								87982
							],
							[
								88002,
								88038
							],
							[
								88133,
								88146
							],
							[
								88197,
								88207
							],
							[
								88246,
								88253
							],
							[
								88359,
								88392
							],
							[
								88472,
								88507
							],
							[
								88547,
								88557
							],
							[
								88672,
								88700
							],
							[
								88863,
								88875
							],
							[
								88980,
								89005
							],
							[
								89120,
								89133
							],
							[
								89232,
								89259
							],
							[
								89378,
								89391
							],
							[
								89494,
								89527
							],
							[
								89750,
								89769
							],
							[
								89848,
								89876
							],
							[
								89895,
								89914
							],
							[
								89932,
								89967
							],
							[
								90310,
								90341
							],
							[
								90400,
								90413
							],
							[
								90497,
								90529
							],
							[
								90710,
								90760
							],
							[
								90803,
								90830
							],
							[
								91032,
								91065
							],
							[
								91116,
								91151
							],
							[
								91166,
								91180
							],
							[
								91247,
								91309
							],
							[
								91508,
								91524
							],
							[
								91757,
								91767
							],
							[
								91818,
								91828
							],
							[
								91854,
								91864
							],
							[
								91892,
								91917
							],
							[
								92043,
								92068
							],
							[
								92343,
								92370
							],
							[
								92603,
								92615
							],
							[
								94268,
								94303
							],
							[
								94322,
								94330
							],
							[
								94378,
								94393
							],
							[
								94541,
								94554
							],
							[
								94747,
								94763
							],
							[
								94970,
								94995
							],
							[
								95010,
								95032
							],
							[
								95248,
								95252
							],
							[
								95466,
								95488
							],
							[
								95510,
								95520
							],
							[
								95538,
								95551
							],
							[
								95710,
								95732
							],
							[
								95754,
								95764
							],
							[
								95782,
								95795
							],
							[
								95924,
								95946
							],
							[
								95972,
								95982
							],
							[
								96000,
								96013
							],
							[
								96049,
								96071
							],
							[
								96092,
								96102
							],
							[
								96120,
								96133
							],
							[
								96153,
								96194
							],
							[
								96501,
								96524
							],
							[
								96605,
								96627
							],
							[
								96701,
								96721
							],
							[
								96848,
								96859
							],
							[
								96892,
								96909
							],
							[
								97086,
								97105
							],
							[
								97140,
								97162
							],
							[
								97294,
								97315
							],
							[
								97453,
								97473
							],
							[
								97540,
								97563
							],
							[
								97639,
								97661
							],
							[
								97779,
								97803
							],
							[
								97865,
								97877
							],
							[
								98048,
								98066
							],
							[
								98128,
								98140
							],
							[
								98292,
								98315
							],
							[
								98456,
								98472
							],
							[
								98528,
								98541
							],
							[
								98573,
								98641
							],
							[
								98682,
								98704
							],
							[
								98733,
								98743
							],
							[
								98759,
								98772
							],
							[
								98832,
								98845
							],
							[
								98921,
								98944
							],
							[
								99072,
								99094
							],
							[
								99191,
								99204
							],
							[
								99266,
								99282
							],
							[
								99320,
								99324
							],
							[
								99583,
								99626
							],
							[
								99641,
								99666
							],
							[
								99809,
								99817
							],
							[
								99831,
								99838
							],
							[
								99847,
								99852
							],
							[
								99870,
								99911
							],
							[
								99924,
								99931
							],
							[
								100008,
								100047
							],
							[
								100204,
								100215
							],
							[
								100250,
								100271
							],
							[
								100349,
								100356
							],
							[
								100388,
								100413
							],
							[
								100471,
								100480
							],
							[
								100497,
								100504
							],
							[
								100522,
								100548
							],
							[
								100606,
								100615
							],
							[
								100633,
								100640
							],
							[
								100659,
								100754
							],
							[
								101386,
								101406
							],
							[
								101407,
								101421
							],
							[
								101443,
								101450
							],
							[
								101477,
								101497
							],
							[
								101498,
								101512
							],
							[
								101533,
								101540
							],
							[
								101584,
								101598
							],
							[
								101670,
								101719
							],
							[
								101732,
								101748
							],
							[
								101782,
								101798
							],
							[
								101890,
								101922
							],
							[
								101953,
								101992
							],
							[
								102373,
								102414
							],
							[
								102453,
								102460
							],
							[
								102516,
								102536
							],
							[
								102574,
								102593
							],
							[
								102667,
								102684
							],
							[
								102703,
								102723
							],
							[
								102727,
								102744
							],
							[
								102794,
								102817
							],
							[
								102918,
								102941
							],
							[
								102985,
								103004
							],
							[
								103047,
								103075
							],
							[
								103171,
								103192
							],
							[
								103268,
								103294
							],
							[
								103412,
								103430
							],
							[
								103484,
								103489
							],
							[
								103492,
								103498
							],
							[
								103514,
								103560
							],
							[
								103649,
								103662
							],
							[
								104041,
								104054
							],
							[
								104117,
								104166
							],
							[
								104179,
								104195
							],
							[
								104217,
								104230
							],
							[
								104258,
								104270
							],
							[
								104274,
								104287
							],
							[
								104349,
								104401
							],
							[
								104590,
								104603
							],
							[
								104666,
								104705
							],
							[
								104849,
								104884
							],
							[
								104956,
								104960
							],
							[
								104987,
								104996
							],
							[
								105247,
								105282
							],
							[
								105358,
								105379
							],
							[
								105394,
								105402
							],
							[
								105415,
								105424
							],
							[
								105446,
								105450
							],
							[
								105489,
								105493
							],
							[
								105640,
								105682
							],
							[
								106015,
								106043
							],
							[
								106103,
								106154
							],
							[
								106405,
								106448
							],
							[
								106501,
								106544
							],
							[
								106580,
								106585
							],
							[
								106662,
								106676
							],
							[
								106711,
								106721
							],
							[
								106734,
								106769
							],
							[
								106813,
								106821
							],
							[
								107368,
								107412
							],
							[
								107947,
								107970
							],
							[
								108378,
								108420
							],
							[
								109226,
								109249
							],
							[
								109621,
								109626
							],
							[
								110180,
								110193
							],
							[
								110229,
								110244
							],
							[
								110282,
								110299
							],
							[
								110341,
								110385
							],
							[
								110584,
								110591
							],
							[
								111302,
								111315
							],
							[
								111357,
								111366
							],
							[
								111430,
								111449
							],
							[
								111555,
								111568
							],
							[
								111743,
								111758
							],
							[
								111802,
								111819
							],
							[
								111865,
								111878
							],
							[
								111920,
								111933
							],
							[
								111975,
								111990
							],
							[
								112034,
								112051
							],
							[
								112179,
								112184
							],
							[
								112333,
								112359
							],
							[
								112536,
								112550
							],
							[
								112573,
								112578
							],
							[
								113220,
								113224
							],
							[
								113282,
								113286
							],
							[
								113529,
								113538
							],
							[
								113663,
								113676
							],
							[
								113750,
								113764
							],
							[
								114015,
								114038
							],
							[
								114056,
								114065
							],
							[
								114082,
								114093
							],
							[
								114103,
								114112
							],
							[
								114132,
								114160
							],
							[
								114268,
								114301
							],
							[
								114468,
								114490
							],
							[
								114508,
								114517
							],
							[
								114537,
								114550
							],
							[
								114608,
								114617
							],
							[
								114637,
								114679
							],
							[
								115152,
								115160
							],
							[
								115195,
								115206
							],
							[
								115283,
								115321
							],
							[
								115672,
								115693
							],
							[
								115778,
								115812
							],
							[
								115965,
								116004
							],
							[
								116060,
								116072
							],
							[
								116531,
								116539
							],
							[
								116671,
								116678
							],
							[
								116737,
								116745
							],
							[
								116868,
								116885
							],
							[
								116964,
								116968
							],
							[
								117022,
								117039
							],
							[
								117169,
								117217
							],
							[
								117503,
								117598
							],
							[
								117733,
								117745
							],
							[
								117755,
								117767
							],
							[
								117772,
								117785
							],
							[
								117891,
								117903
							],
							[
								117913,
								117925
							],
							[
								117930,
								117943
							],
							[
								118051,
								118059
							],
							[
								118270,
								118278
							],
							[
								118653,
								118663
							],
							[
								118743,
								118753
							],
							[
								118834,
								118842
							],
							[
								118973,
								118992
							],
							[
								119541,
								119545
							],
							[
								119614,
								119631
							],
							[
								119671,
								119686
							],
							[
								119724,
								119737
							],
							[
								119773,
								119788
							],
							[
								119898,
								119903
							],
							[
								119974,
								119991
							],
							[
								120022,
								120032
							],
							[
								120154,
								120219
							],
							[
								120582,
								120616
							],
							[
								120700,
								120743
							],
							[
								120959,
								121006
							],
							[
								121197,
								121248
							],
							[
								121468,
								121520
							],
							[
								121868,
								121911
							],
							[
								122283,
								122287
							],
							[
								122402,
								122477
							],
							[
								122851,
								122855
							],
							[
								123088,
								123130
							],
							[
								123194,
								123202
							],
							[
								123363,
								123404
							],
							[
								123451,
								123483
							],
							[
								123564,
								123597
							],
							[
								123656,
								123720
							],
							[
								123960,
								124001
							],
							[
								124039,
								124057
							],
							[
								124106,
								124113
							],
							[
								124311,
								124375
							],
							[
								124555,
								124620
							],
							[
								124633,
								124645
							],
							[
								124662,
								124673
							],
							[
								124697,
								124712
							],
							[
								125095,
								125125
							],
							[
								125302,
								125322
							],
							[
								125342,
								125396
							],
							[
								125619,
								125625
							],
							[
								125677,
								125682
							],
							[
								125738,
								125744
							],
							[
								125821,
								125826
							],
							[
								125869,
								125928
							],
							[
								127977,
								127990
							],
							[
								128138,
								128152
							],
							[
								128312,
								128325
							],
							[
								128407,
								128426
							],
							[
								128669,
								128706
							],
							[
								129054,
								129124
							],
							[
								129480,
								129522
							],
							[
								129573,
								129582
							],
							[
								129748,
								129783
							],
							[
								129910,
								129914
							],
							[
								129936,
								129947
							],
							[
								130057,
								130080
							],
							[
								130224,
								130248
							],
							[
								130349,
								130353
							],
							[
								130376,
								130380
							],
							[
								130392,
								130424
							],
							[
								130472,
								130512
							],
							[
								130741,
								130760
							],
							[
								130792,
								130856
							],
							[
								130910,
								130915
							],
							[
								130948,
								130978
							],
							[
								131065,
								131100
							],
							[
								131124,
								131150
							],
							[
								131264,
								131297
							],
							[
								131436,
								131494
							],
							[
								131519,
								131545
							],
							[
								131588,
								131623
							],
							[
								131666,
								131687
							],
							[
								131836,
								131862
							],
							[
								132020,
								132039
							],
							[
								132361,
								132410
							],
							[
								132435,
								132456
							],
							[
								132498,
								132514
							],
							[
								132568,
								132591
							],
							[
								132654,
								132682
							],
							[
								132744,
								132765
							],
							[
								132789,
								132794
							],
							[
								133367,
								133398
							],
							[
								133401,
								133419
							],
							[
								133471,
								133472
							],
							[
								133485,
								133496
							],
							[
								134051,
								134096
							],
							[
								134198,
								134222
							],
							[
								134501,
								134511
							],
							[
								134559,
								134580
							],
							[
								134628,
								134649
							],
							[
								134736,
								134777
							],
							[
								134925,
								134929
							],
							[
								134975,
								134983
							],
							[
								135012,
								135016
							],
							[
								135391,
								135404
							],
							[
								135457,
								135477
							],
							[
								135803,
								135860
							],
							[
								135967,
								135978
							],
							[
								136318,
								136338
							],
							[
								136378,
								136414
							],
							[
								136443,
								136456
							],
							[
								136499,
								136509
							],
							[
								136554,
								136569
							],
							[
								137543,
								137556
							],
							[
								138127,
								138147
							],
							[
								138222,
								138237
							],
							[
								138615,
								138628
							],
							[
								138699,
								138719
							],
							[
								138801,
								138816
							],
							[
								138882,
								138911
							],
							[
								138985,
								139018
							],
							[
								139130,
								139144
							],
							[
								139184,
								139199
							],
							[
								139221,
								139249
							],
							[
								139778,
								139801
							],
							[
								140008,
								140036
							],
							[
								140143,
								140185
							],
							[
								140512,
								140568
							],
							[
								140802,
								140843
							],
							[
								140929,
								140940
							],
							[
								141089,
								141102
							],
							[
								141423,
								141439
							],
							[
								141468,
								141520
							],
							[
								141589,
								141596
							],
							[
								141685,
								141699
							],
							[
								141785,
								141795
							],
							[
								141901,
								141905
							],
							[
								141937,
								141957
							],
							[
								142018,
								142031
							],
							[
								142091,
								142103
							],
							[
								142397,
								142412
							],
							[
								142733,
								142743
							],
							[
								142798,
								142808
							],
							[
								142892,
								142903
							],
							[
								142960,
								142967
							],
							[
								143571,
								143581
							],
							[
								143647,
								143658
							],
							[
								143726,
								143738
							],
							[
								143773,
								143786
							],
							[
								143831,
								143846
							],
							[
								143865,
								143892
							],
							[
								144078,
								144121
							],
							[
								144282,
								144342
							],
							[
								144428,
								144453
							],
							[
								144502,
								144545
							],
							[
								144556,
								144566
							],
							[
								144575,
								144604
							],
							[
								144860,
								144876
							],
							[
								144898,
								144909
							],
							[
								144959,
								144989
							],
							[
								145058,
								145063
							],
							[
								145092,
								145097
							],
							[
								145392,
								145405
							],
							[
								145456,
								145487
							],
							[
								145508,
								145521
							],
							[
								145522,
								145542
							],
							[
								145632,
								145668
							],
							[
								145741,
								145756
							],
							[
								145837,
								145849
							],
							[
								146324,
								146329
							],
							[
								147052,
								147079
							],
							[
								147104,
								147109
							],
							[
								147160,
								147189
							],
							[
								147277,
								147282
							],
							[
								147363,
								147376
							],
							[
								147429,
								147440
							],
							[
								147480,
								147501
							],
							[
								147625,
								147642
							],
							[
								147772,
								147792
							],
							[
								147988,
								148014
							],
							[
								148119,
								148125
							],
							[
								148163,
								148168
							],
							[
								148256,
								148289
							],
							[
								148447,
								148452
							],
							[
								148503,
								148516
							],
							[
								148540,
								148546
							],
							[
								148629,
								148653
							],
							[
								148747,
								148758
							],
							[
								148814,
								148827
							],
							[
								148889,
								148900
							],
							[
								148999,
								149009
							],
							[
								149107,
								149120
							],
							[
								149233,
								149242
							],
							[
								149300,
								149312
							],
							[
								149395,
								149403
							],
							[
								149503,
								149510
							],
							[
								149612,
								149632
							],
							[
								149820,
								149841
							],
							[
								150100,
								150117
							],
							[
								150270,
								150282
							],
							[
								150411,
								150425
							],
							[
								150596,
								150609
							],
							[
								150626,
								150646
							],
							[
								150905,
								150935
							],
							[
								150941,
								150967
							],
							[
								150986,
								151012
							],
							[
								151041,
								151059
							],
							[
								151125,
								151159
							],
							[
								151273,
								151327
							],
							[
								151354,
								151374
							],
							[
								151464,
								151481
							],
							[
								151577,
								151599
							],
							[
								151706,
								151730
							],
							[
								151838,
								151868
							],
							[
								151899,
								151908
							],
							[
								151951,
								151970
							],
							[
								152119,
								152139
							],
							[
								152256,
								152275
							],
							[
								152389,
								152405
							],
							[
								152513,
								152523
							],
							[
								152601,
								152608
							],
							[
								152674,
								152683
							],
							[
								153028,
								153049
							],
							[
								153058,
								153086
							],
							[
								153096,
								153141
							],
							[
								153196,
								153207
							],
							[
								153229,
								153239
							],
							[
								153252,
								153263
							],
							[
								153291,
								153324
							],
							[
								153485,
								153517
							],
							[
								153585,
								153607
							],
							[
								153779,
								153815
							],
							[
								153977,
								153993
							],
							[
								154054,
								154090
							],
							[
								154166,
								154177
							],
							[
								154242,
								154246
							],
							[
								154285,
								154298
							],
							[
								154412,
								154448
							],
							[
								154625,
								154630
							],
							[
								154671,
								154724
							],
							[
								155670,
								155699
							],
							[
								155853,
								155890
							],
							[
								155901,
								155914
							],
							[
								155927,
								155936
							],
							[
								155983,
								156003
							],
							[
								156037,
								156053
							],
							[
								156276,
								156297
							],
							[
								156425,
								156457
							],
							[
								156484,
								156493
							],
							[
								156505,
								156518
							],
							[
								156596,
								156620
							],
							[
								156687,
								156696
							],
							[
								156712,
								156722
							],
							[
								156739,
								156756
							],
							[
								156784,
								156793
							],
							[
								156794,
								156817
							],
							[
								156863,
								156887
							],
							[
								157035,
								157040
							],
							[
								157058,
								157067
							],
							[
								157168,
								157176
							],
							[
								157180,
								157189
							],
							[
								157211,
								157224
							],
							[
								157241,
								157254
							],
							[
								157261,
								157274
							],
							[
								157300,
								157317
							],
							[
								157330,
								157346
							],
							[
								157416,
								157421
							],
							[
								157439,
								157448
							],
							[
								157549,
								157557
							],
							[
								157570,
								157579
							],
							[
								157594,
								157599
							],
							[
								157687,
								157724
							],
							[
								157881,
								157897
							],
							[
								157915,
								157937
							],
							[
								158050,
								158056
							],
							[
								159104,
								159119
							],
							[
								159169,
								159183
							],
							[
								159197,
								159212
							],
							[
								159742,
								159759
							],
							[
								159809,
								159825
							],
							[
								160109,
								160139
							],
							[
								160157,
								160166
							],
							[
								160184,
								160194
							],
							[
								160207,
								160216
							],
							[
								160365,
								160394
							],
							[
								160412,
								160421
							],
							[
								160439,
								160449
							],
							[
								160453,
								160462
							],
							[
								161743,
								161795
							],
							[
								161861,
								161884
							],
							[
								161956,
								161974
							],
							[
								162323,
								162333
							],
							[
								162337,
								162351
							],
							[
								162553,
								162585
							],
							[
								162612,
								162647
							],
							[
								162687,
								162710
							],
							[
								162871,
								162887
							],
							[
								163072,
								163081
							],
							[
								163107,
								163127
							],
							[
								163154,
								163163
							],
							[
								163178,
								163202
							],
							[
								163342,
								163387
							],
							[
								163419,
								163437
							],
							[
								163583,
								163595
							],
							[
								163740,
								163745
							],
							[
								164059,
								164066
							],
							[
								164203,
								164222
							],
							[
								164240,
								164262
							],
							[
								164618,
								164660
							],
							[
								164677,
								164714
							],
							[
								164962,
								164981
							],
							[
								165351,
								165391
							],
							[
								165434,
								165448
							],
							[
								165518,
								165548
							],
							[
								165597,
								165627
							],
							[
								165694,
								165772
							],
							[
								166222,
								166250
							],
							[
								166302,
								166366
							],
							[
								166384,
								166408
							],
							[
								166679,
								166698
							],
							[
								166813,
								166849
							],
							[
								167574,
								167612
							],
							[
								167629,
								167667
							],
							[
								168957,
								168964
							],
							[
								169020,
								169038
							],
							[
								169250,
								169257
							],
							[
								169305,
								169309
							],
							[
								169441,
								169449
							],
							[
								169516,
								169528
							],
							[
								170571,
								170637
							],
							[
								170638,
								170655
							],
							[
								170893,
								170904
							],
							[
								170921,
								170940
							],
							[
								171054,
								171118
							],
							[
								171134,
								171143
							],
							[
								171155,
								171163
							],
							[
								171216,
								171231
							],
							[
								171247,
								171253
							],
							[
								171277,
								171290
							],
							[
								171485,
								171502
							],
							[
								171547,
								171572
							],
							[
								171671,
								171677
							],
							[
								171797,
								171829
							],
							[
								171906,
								171910
							],
							[
								172051,
								172072
							],
							[
								172116,
								172137
							],
							[
								172232,
								172257
							],
							[
								172428,
								172461
							],
							[
								172694,
								172721
							],
							[
								172813,
								172817
							],
							[
								172924,
								172929
							],
							[
								173193,
								173239
							],
							[
								173829,
								173838
							],
							[
								174074,
								174127
							],
							[
								174138,
								174164
							],
							[
								174467,
								174483
							],
							[
								174567,
								174578
							],
							[
								174824,
								174828
							],
							[
								175112,
								175165
							],
							[
								175393,
								175406
							],
							[
								175417,
								175433
							],
							[
								175608,
								175617
							],
							[
								175659,
								175668
							],
							[
								175708,
								175713
							],
							[
								175749,
								175767
							],
							[
								175788,
								175819
							],
							[
								175926,
								175945
							],
							[
								176238,
								176251
							],
							[
								176340,
								176358
							],
							[
								176453,
								176470
							],
							[
								176603,
								176610
							],
							[
								176729,
								176735
							],
							[
								176885,
								176893
							],
							[
								177012,
								177022
							],
							[
								177251,
								177260
							],
							[
								177753,
								177793
							],
							[
								178102,
								178137
							],
							[
								178468,
								178474
							],
							[
								178510,
								178528
							],
							[
								178572,
								178582
							],
							[
								178665,
								178675
							],
							[
								178724,
								178756
							],
							[
								179003,
								179022
							],
							[
								179646,
								179668
							],
							[
								179967,
								180027
							],
							[
								180737,
								180762
							],
							[
								180791,
								180807
							],
							[
								180816,
								180827
							],
							[
								180919,
								180925
							],
							[
								180934,
								180945
							],
							[
								181005,
								181029
							],
							[
								181047,
								181056
							],
							[
								181080,
								181089
							],
							[
								181117,
								181128
							],
							[
								181155,
								181166
							],
							[
								181199,
								181212
							],
							[
								181231,
								181244
							],
							[
								181256,
								181269
							],
							[
								181420,
								181431
							],
							[
								181533,
								181558
							],
							[
								181579,
								181609
							],
							[
								181707,
								181741
							],
							[
								182013,
								182034
							],
							[
								182099,
								182117
							],
							[
								182285,
								182321
							],
							[
								182775,
								182795
							],
							[
								182998,
								183013
							],
							[
								183289,
								183312
							],
							[
								183521,
								183539
							],
							[
								183757,
								183769
							],
							[
								183799,
								183814
							],
							[
								183859,
								183865
							],
							[
								183925,
								183939
							],
							[
								184087,
								184105
							],
							[
								184301,
								184333
							],
							[
								184399,
								184415
							],
							[
								184751,
								184767
							],
							[
								185214,
								185217
							],
							[
								185230,
								185231
							],
							[
								185261,
								185297
							],
							[
								185738,
								185777
							],
							[
								185866,
								185892
							],
							[
								185940,
								186001
							],
							[
								186436,
								186464
							],
							[
								186571,
								186589
							],
							[
								186884,
								186922
							],
							[
								186977,
								186982
							]
						],
						"symlist":
						[
							" function Util(g)",
							"Util.formatAnnotatedObject = function(subject, o)",
							"i =>",
							"item =>",
							"padding = x =>",
							"arr =>",
							"Util.curry = (fn, arity) =>",
							"ret = function curried(...args)",
							" (v, i) =>",
							"Curried = function(...a)",
							" function()",
							" function(a)",
							" function(a, b)",
							" function(a, b, c)",
							" function(a, b, c, d)",
							"get()",
							"Util.arityN = (fn, n) =>",
							" function(fn)",
							" function()",
							" function(fn)",
							" function(a)",
							" function(fn)",
							" function(a, b)",
							" function(fn)",
							" function(a, b, c)",
							" function(fn)",
							" function(a, b, c, d)",
							" function(fn)",
							" function(a, b, c, d, e)",
							"Util.getter = target =>",
							"self = function(key)",
							".fn = key =>",
							".fn = key =>",
							"Util.setter = target =>",
							"set = function(key, value)",
							".fn = (key, value) =>",
							".fn = (key, value) =>",
							"Util.remover = target =>",
							" key =>",
							" key =>",
							"Util.hasFn = target =>",
							" key =>",
							" key =>",
							"Util.adder = target =>",
							" arg =>",
							" arg =>",
							"self = function(obj, arg = 1)",
							" function ChooseFn(a, o)",
							".fn = (obj, arg) =>",
							".fn = (obj, arg) =>",
							".fn = (obj, arg) =>",
							".fn = (num, arg) =>",
							".fn = (obj, arg) =>",
							"Util.updater = (target, get, set, fn) =>",
							" (k, f, i) =>",
							" function doUpdate(key, func, i)",
							"create = () =>",
							" key =>",
							" () =>",
							"self = function(...args)",
							"Util.once = (fn, thisArg, memoFn) =>",
							" function(...args)",
							"Util.delay = (func, wait, thisObj) =>",
							" function(...args)",
							"function ()",
							"Util.throttle = (f, t, thisObj) =>",
							" function(...args)",
							"Util.debounce = (func, wait, options = {}) =>",
							" function later()",
							" function debounced(...a)",
							".clear = function()",
							".flush = function()",
							"Util.debounceAsync = (fn, wait, options = {}) =>",
							" function(...a)",
							"resolve =>",
							"() =>",
							"arg =>",
							" g =>",
							" g =>",
							" () =>",
							" err =>",
							" () =>",
							" err =>",
							" () =>",
							" err =>",
							"() =>",
							"Util.log = (...args) =>",
							"f =>",
							"f =>",
							"(a, p, i) =>",
							"get: () =>",
							".setFilters = function(args)",
							"arg =>",
							".getFilters = function()",
							"Util.msg = (strings, ...substitutions) =>",
							"(base, n) =>",
							"Util.generalLog = function(n, x)",
							"Util.toSource = function(arg, opts = {})",
							"print = (...args) =>",
							"Util.debug = function(message)",
							"removeCircular = function(key, value)",
							"arg =>",
							"Util.type = function({ type })",
							"Util.functionName = function(fn)",
							"Util.className = function(obj)",
							"obj",
							"Util.unwrapComponent = function(c)",
							"Util.componentName = function(c)",
							"Util.count = function(s, ch)",
							"Util.parseNum = function(str)",
							"Util.minmax = function(num, min, max)",
							"Util.getExponential = function(num)",
							"Util.getNumberParts = function(num)",
							"Util.pow2 = function(n)",
							"Util.pow10 = function(n)",
							"Util.bitValue = function(n)",
							"Util.bitMask = function(bits, start = 0)",
							"Util.bitGroups = function(num, bpp, minLen)",
							"Util.bitStuff = (arr, bpp) =>",
							"([b, f], n) =>",
							"Util.toBinary = function(num)",
							"Util.toBits = function(num)",
							" bit =>",
							"Util.getBit = function(v, n)",
							"Util.isSet = function(v, n)",
							"Util.bitCount = function(n)",
							"Util.bitNo = function(n)",
							"Util.toggleBit = function(num, bit)",
							"Util.setBit = function(num, bit)",
							"Util.clearBit = function(num, bit)",
							"Util.range = function(...args)",
							" (v, k) =>",
							"n =>",
							"Util.set = function(obj, prop, value)",
							" (prop, value) =>",
							" (prop, value) =>",
							" (prop, value) =>",
							" value =>",
							"(obj, prop) =>",
							"() =>",
							"Util.bitArrayToNumbers = function(arr)",
							"Util.bitsToNumbers = function(bits)",
							"(val, key, arr) =>",
							"Util.shuffle = function(arr, rnd = Util.rng)",
							"(a, b) =>",
							"Util.sortNum = function(arr)",
							"(a, b) =>",
							"Util.draw = (arr, n = 1, rnd = Util.rng) =>",
							"Util.is = function(what, ...pred)",
							"type =>",
							"fn =>",
							"Util.instanceOf = (value, ctor) =>",
							"Util.onoff = function(val)",
							"Util.numbersToBits = function(arr)",
							"(bits, num) =>",
							"Util.randomNumbers = function([start, end], draws)",
							"Util.randomBits = function(r = [1, 50], n = 5)",
							"Util.padFn = function(len, char = ' ', fn = (str, pad) => pad)",
							" (s, n = len) =>",
							"Util.pad = function(s, n, char = ' ')",
							"Util.abbreviate = function(str, max = 40, suffix = '...')",
							"Util.trim = function(str, charset)",
							"Util.trimRight = function(str, charset)",
							"Util.indent = (text, space = ' ') =>",
							"Util.define = (obj, ...args) =>",
							"Util.memoizedProperties = (obj, methods) =>",
							"get()",
							"Util.copyWhole = (dst, ...args) =>",
							"Util.copyEntries = (obj, entries) =>",
							"Util.extend = (...args) =>",
							"Util.isCloneable = obj =>",
							"Util.isUnextendable = val =>",
							"pred = (k, v, f) =>",
							" (key, depth) =>",
							"value = function(...args)",
							"Util.defineGetter = (obj, key, fn, enumerable = false) =>",
							"Util.defineGetterSetter = (obj, key, g, s, enumerable = false) =>",
							"Util.defineGettersSetters = (obj, gettersSetters) =>",
							"Util.extendArray = function(arr = Array.prototype)",
							" function(pred)",
							" function()",
							" function()",
							"(item, i, a) =>",
							" function()",
							" function(value)",
							"Util.adapter = function( obj, getLength = obj => obj.length, getKey = (obj, index) => obj.",
							"(index), getItem = (obj, key) => obj[key], setItem = (obj, index, value) => (obj[index] = value) )",
							"get length()",
							"get instance()",
							"key(i)",
							"get(key)",
							"has(key)",
							"set(key, value)",
							"*keys()",
							"*entries()",
							"toObject()",
							"toMap()",
							".localStorage = function(s)",
							" () =>",
							" w =>",
							" () =>",
							" l =>",
							" (l, i) =>",
							" (l, key) =>",
							" (l, key, v) =>",
							"Util.array = function(a)",
							"Util.arrayFromEntries = entries =>",
							"([k, v]) =>",
							" key =>",
							"([k, v]) =>",
							"Util.toMap = function(hash = {}, fn)",
							"Util.extendMap = function(map)",
							".entries = function* iterator()",
							".toObject = function()",
							".match = function(...args)",
							" entries =>",
							"Util.objectFrom = function(any)",
							"Util.tail = function(arr)",
							"Util.splice = function(str, index, delcount, insert)",
							"Util.identity = arg =>",
							"Util.reverse = arr =>",
							"Util.keyOf = function(obj, prop)",
							"Util.rotateRight = function(arr, n)",
							"Util.repeater = function(n, what)",
							"function* ()",
							"function* ()",
							"Util.repeat = function(n, what)",
							"Util.arrayDim = function(dimensions, init)",
							"Util.flatten = function(arr)",
							"Util.chunkArray = (a, size) =>",
							"(acc, item, i) =>",
							"Util.partition = function* (a, size)",
							"Util.difference = (a, b, incicludes) =>",
							"x =>",
							"x =>",
							"x =>",
							"x =>",
							"Util.intersect = (a, b) =>",
							"Util.symmetricDifference = (a, b) =>",
							"Util.union = (a, b, equality) =>",
							"Util.partition = (array, callback) =>",
							"Util.chances = function(numbers, matches)",
							"Util.sum = arr =>",
							"(acc, n) =>",
							"Util.expr = fn =>",
							" function expr(...args)",
							" function addArgs(args)",
							"ret = function returnFn(...args)",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"Util.mod = (a, b) =>",
							" n =>",
							"(a, b) =>",
							"Util.fnName = function(f, parent)",
							"Util.objName = function(o)",
							"Util.findKey = function(obj, pred, thisVal)",
							"value : v =>",
							"Util.find = function(arr, value, prop = 'id')",
							"pred = function(obj)",
							" obj =>",
							" obj =>",
							"pred = ([key, value], arr) =>",
							"Util.findIndex = function(obj, pred, thisArg)",
							"Util.match = function(arg, pred)",
							"match = (val, key) =>",
							"(acc, val, key) =>",
							" (acc, key) =>",
							"Util.toHash = function(map, keyTransform = k => ",
							"('' + k))",
							" (v, k) =>",
							"Util.indexOf = function(obj, prop)",
							"Util.greatestCommonDenominator = (a, b) =>",
							"Util.leastCommonMultiple = (n1, n2) =>",
							"function* (re, str)",
							"Util.inspect = function(obj, opts = {})",
							"stringFn = str =>",
							"print = (...args) =>",
							" (space = false) =>",
							" (space = false) =>",
							" key =>",
							" key =>",
							"Util.dump = function(name, props)",
							" () =>",
							" w =>",
							" () =>",
							"Util.ucfirst = function(str)",
							"Util.lcfirst = function(str)",
							"Util.typeOf = v =>",
							"Util.camelize = (text, sep = '') =>",
							" (match, p1, p2, offset) =>",
							"Util.decamelize = function(str, separator = '-')",
							"Util.ifThenElse = function(pred = value => !!value, _then = () => {}, _else = () => {})",
							" function(value)",
							"Util.if = (value, _then, _else, pred) =>",
							"v =>",
							"() =>",
							"() =>",
							"Util.ifElse = (value, _else, pred) =>",
							"v =>",
							" () =>",
							" () =>",
							" () =>",
							"Util.ifThen = (value, _then, pred) =>",
							"v =>",
							" () =>",
							" () =>",
							" () =>",
							"Util.switch = ({ default: defaultCase, ...cases }) =>",
							" function(value)",
							"function* (fn, arr)",
							"Util.colorDump = (iterable, textFn) =>",
							"(color, n) =>",
							"Util.bucketInserter = (map, ...extraArgs) =>",
							" function(...args)",
							" function(...args)",
							"Util.fifo = function fifo()",
							"resolve = () =>",
							"async function* generator()",
							"r =>",
							"push(...args)",
							"process: async function run()",
							"Util.isEmail = function(v)",
							"Util.isString = function(v)",
							"Util.isNumeric = v =>",
							"Util.isUndefined = arg =>",
							"Util.isObject = obj =>",
							"Util.isPrimitive = obj =>",
							"Util.isFunction = arg =>",
							"Util.not = fn =>",
							" function(...args)",
							"Util.isAsync = fn =>",
							"Util.isArrowFunction = fn =>",
							"Util.isEmptyString = v =>",
							"Util.isEmpty = (...args) =>",
							" function empty(v)",
							"Util.isNonEmpty = (...args) =>",
							"nonEmpty = v =>",
							"Util.isIpAddress = v =>",
							"i =>",
							"i =>",
							"Util.isPortNumber = v =>",
							"Util.hasProps = function(obj, props)",
							"prop =>",
							"Util.validatePassword = function(value)",
							"Util.clone = function(obj, proto)",
							"constructor",
							"Util.deepClone = function(data)",
							"Util.findVal = function(object, propName, maxDepth = 10)",
							"Util.deepCloneObservable = function(data)",
							"Util.toArray = function(observableArray)",
							"Util.arryToTree = function(data, id, pId, appId)",
							"(e, i) =>",
							"Util.to3wei = function(a, old, id, pId)",
							"(e, i) =>",
							"(se, si) =>",
							"Util.arrExchangePos = function(arr, i, j)",
							"Util.arrRemove = function(arr, i)",
							"Util.move = function(src, dst = [])",
							"Util.moveIf = function(src, pred, dst = [])",
							"Util.logOutClearStorage = function()",
							"Util.getCookie = function(cookie, name)",
							"Util.parseCookie = function(c = document.cookie)",
							"pred = char =>",
							"char =>",
							"char =>",
							"Util.encodeCookie = c =>",
							"([key, value]) =>",
							"Util.setCookies = c =>",
							"([key, value]) =>",
							"Util.clearCookies = function(c)",
							" (acc, name) =>",
							"Util.deleteCookie = function(name)",
							" () =>",
							" w =>",
							" () =>",
							"Util.accAdd = function(arg1, arg2)",
							"Util.Subtr = function(arg1, arg2)",
							"Util.accDiv = function(arg1, arg2)",
							"Util.accMul = function(arg1, arg2)",
							"Util.dateFormatter = function(date, formate)",
							"Util.numberFormatter = function(numStr)",
							"Util.searchObject = function(object, matchCallback, currentPath, result, searched)",
							"(req = {}) =>",
							" () =>",
							" () =>",
							" () =>",
							" url =>",
							" () =>",
							"() =>",
							"() =>",
							"() =>",
							"() =>",
							"() =>",
							"() =>",
							"Util.parseQuery = function(url = ",
							")",
							"Util.encodeQuery = function(data)",
							"Util.parseURL = function(href = this.",
							")",
							"part =>",
							"([k, v]) =>",
							"(acc, m) =>",
							"href(override)",
							"Util.makeURL = function(...args)",
							"Util.numberFromURL = function(url, fn)",
							"Util.tryPromise = fn =>",
							"(resolve, reject) =>",
							"resolve = a =>",
							"reject = () =>",
							"resolve = () =>",
							"reject = () =>",
							"async function(...args)",
							" function(...args)",
							"resolve = a =>",
							"reject = () =>",
							"Util.putError = err =>",
							"() =>",
							" fn =>",
							" ret =>",
							"Util.tryPredicate = (fn, defaultRet) =>",
							" ret =>",
							" () =>",
							"Util.isBrowser = function()",
							" () =>",
							" w =>",
							" () =>",
							" () =>",
							" d =>",
							" () =>",
							"Util.waitFor = async function waitFor(msecs)",
							"({ setTimeout, clearTimeout, setInterval, clearInterval }) =>",
							"async (resolve, reject) =>",
							"() =>",
							"clear = () =>",
							"Util.timeout = async (msecs, promises, promiseClass = Promise) =>",
							"Util.isServer = function()",
							"Util.isMobile = function()",
							"Util.uniquePred = (cmp = null) =>",
							" (el, i, arr) =>",
							"item =>",
							" (el, i, arr) =>",
							"Util.unique = (arr, cmp) =>",
							"cmp = (a, b) =>",
							"(e, i, a) =>",
							"Util.zip = a =>",
							"(a, b) =>",
							"(_, i) =>",
							"arr =>",
							"Util.histogram = (...args) =>",
							" (k, v) =>",
							"initVal = () =>",
							"setVal = v =>",
							"(it, i) =>",
							"(item, i) =>",
							" (entry, idx, key) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"Util.concat = function* (...args)",
							"Util.distinct = function(arr)",
							" (value, index, me) =>",
							"Util.rangeMinMax = function(arr, field)",
							"obj =>",
							"Util.remap = (...args) =>",
							"getR = () =>",
							"r = val =>",
							"Util.mergeLists = function(arr1, arr2, key = 'id')",
							"Util.foreach = function(o, fn)",
							"Util.all = function(obj, pred)",
							"Util.isGenerator = function(fn)",
							"Util.isIterator = obj =>",
							"Util.isIterable = obj =>",
							" x =>",
							"Util.isConstructor = x =>",
							"construct(target, args)",
							"target",
							"x",
							"m =>",
							"Util.filter = function(a, pred)",
							"function* ()",
							"fn = (k, v) =>",
							"Util.reduce = (obj, fn, accu) =>",
							"Util.mapFunctional = fn =>",
							" function* (arg)",
							"Util.map = (...args) =>",
							"ret = a =>",
							"function* ()",
							"ret = a =>",
							"function* ()",
							"Util.entriesToObj = function(arr)",
							"(acc, item) =>",
							"Util.isDate = function(d)",
							"Util.parseDate = function(d)",
							"Util.isoDate = function(date)",
							"Util.toUnixTime = function(dateObj, utc = false)",
							"Util.unixTime = function(utc = false)",
							"Util.fromUnixTime = function(epoch, utc = false)",
							"Util.formatTime = function(date = ",
							"(), format = 'HH:MM:SS')",
							"Util.leapYear = function(year)",
							"Util.timeSpan = function(s)",
							"Util.randFloat = function(min, max, rnd = Util.rng)",
							"Util.randInt = (...args) =>",
							"Util.randStr = (len, charset, rnd = Util.rng) =>",
							"Util.hex = function(num, numDigits)",
							"Util.numberParts = (num, base) =>",
							"Util.roundDigits = precision =>",
							"Util.roundFunction = (prec, digits, type) =>",
							" function(value)",
							"Util.roundTo = function(value, prec, digits, type)",
							"() =>",
							" utf8 =>",
							" v =>",
							" utf8 =>",
							" base64 =>",
							" v =>",
							" string =>",
							"Util.formatRecord = function(obj)",
							"item =>",
							" function(obj)",
							".isArrayLike = obj =>",
							"Util.equals = function(a, b)",
							"(e, i) =>",
							"Util.versionCompare = (a, b) =>",
							"isdigit = c =>",
							"Util.isGetter = (obj, propName) =>",
							"Util.isBool = value =>",
							"Util.size = (...args) =>",
							" function size(obj)",
							"Util.isMap = function(obj)",
							"Util.effectiveDeviceWidth = function()",
							"Util.getFormFields = function(initialState)",
							" (acc, { elements }) =>",
							" (acc2, { name, value }) =>",
							"Util.mergeObjects = function(objArr, predicate = (dst, src, key) => (src[key] == '' ? undefined : src[key]))",
							"Util.getUserAgent = function(headers = req.headers)",
							"Util.factor = function(start, end)",
							"Util.factorial = function(n)",
							"Util.increment = function(obj, key)",
							"Util.counter = function()",
							"self = function()",
							"Util.filterKeys = function(obj, pred = k => true)",
							"pred = str =>",
							"pred = str =>",
							"Util.filterMembers = function(obj, fn)",
							"pred = (k, v, o) =>",
							"Util.filterOutMembers = function(obj, fn)",
							"pred = (v, k, o) =>",
							"Util.dumpMembers = obj =>",
							"Util.filterOutKeys = function(obj, arr)",
							" (v, k, o) =>",
							" (k, v) =>",
							" key =>",
							" () =>",
							" (v, k, o) =>",
							"Util.removeKeys = function(obj, arr)",
							" (v, k, o) =>",
							" (k, v) =>",
							" key =>",
							"Util.getKeys = function(obj, arr)",
							"Util.numbersConvert = function(str)",
							"(ch, i) =>",
							"Util.entries = function(arg)",
							"function* ()",
							"Util.keys = function(arg)",
							" function* ()",
							"Util.values = function(arg)",
							" function* ()",
							"Util.removeEqual = function(a, b)",
							"Util.clear = obj =>",
							"Util.remove = (arr, item) =>",
							" (other, i, arr) =>",
							"Util.removeIf = function(arr, pred)",
							"Util.traverse = function(o, fn)",
							" (v, k, a) =>",
							" function* walker(o, depth = 0)",
							"Util.traverseWithPath = function(o, rootPath = [])",
							" function* walker(o, path)",
							"Util.indexByPath = function(o, p)",
							"Util.pushUnique = (arr, ...args) =>",
							"(acc, item) =>",
							"Util.insertSorted = function(arr, item, cmp = (a, b) => b - a)",
							"next = (k, v) =>",
							" (k, v) =>",
							" (k, v) =>",
							" (k, v) =>",
							"fn = function(key, value)",
							"Util.keyIterator = obj =>",
							"Util.entryIterator = obj =>",
							"function* ()",
							"Util.mapAdapter = getSetFunction =>",
							"get(key)",
							"set(key, value)",
							".keys = () =>",
							".entries = () =>",
							"Util.mapFunction = map =>",
							"fn = function(...args)",
							"m =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".update = function(key, fn = (k, v) => v)",
							".entries = function* ()",
							".values = function* ()",
							".keys = function* ()",
							" function()",
							"([key, value]) =>",
							".keys = async () =>",
							".entries = async () =>",
							".values = async () =>",
							".keys = function* ()",
							".entries = function* ()",
							".values = function* ()",
							".filter = function(pred)",
							"function* ()",
							".map = function(t)",
							"function* ()",
							".forEach = function(fn)",
							".delete = key =>",
							".has = key =>",
							"Util.mapWrapper = (map, toKey = key => key, fromKey = key => key) =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".keys = () =>",
							".entries = function* ()",
							".values = function* ()",
							".has = key =>",
							".delete = key =>",
							"m =>",
							"Util.mapCombinator = (forward, backward) =>",
							"fn = function(key, value)",
							"(a,m) =>",
							" key =>",
							" a =>",
							" function makeGetter(map, next = a => a)",
							" key =>",
							"Util.predicate = (fn_or_regex, pred) =>",
							"fn = arg =>",
							".valueOf = function()",
							" arg =>",
							"Util.some = predicates =>",
							" value =>",
							"pred =>",
							"Util.every = predicates =>",
							" value =>",
							"pred =>",
							"Util.iterateMembers = function* (obj, predicate = (name, depth, obj, proto) => true, depth = 0)",
							" (...predicates) =>",
							" (...args) =>",
							"pred =>",
							" (...predicates) =>",
							" (...args) =>",
							"pred =>",
							"(pred, obj) =>",
							"Util.memberNameFilter = (depth = 1, start = 0) =>",
							" (m, l, o) =>",
							" (m, l, o) =>",
							" (name, depth, obj, proto) =>",
							"Util.getMemberNames = (obj, ...args) =>",
							"Util.getMemberEntries = (obj, ...args) =>",
							"name =>",
							"accFn = (a, m, o) =>",
							" (obj, ...args) =>",
							" (a, m) =>",
							" (r, a, m) =>",
							" (r, a) =>",
							"incFn = (c, n, self) =>",
							"incFn = (c, n, self) =>",
							"inc = (i, n = 1) =>",
							"self = function Count(n = 1)",
							".valueOf = function()",
							"filterFn = (key, value) =>",
							"(acc, mem, idx) =>",
							" r =>",
							" () =>",
							"fn = function ReduceIntoMap(arg, acc = mapObj)",
							"(acc, arg) =>",
							" (a, m, o) =>",
							"Util.methodNameFilter = (depth = 1, start = 0) =>",
							" (m, l, o) =>",
							" () =>",
							" b =>",
							" () =>",
							"Util.getMethodNames = (obj, depth = 1, start = 0) =>",
							" (a, m, o) =>",
							"Util.inherit = (dst, src, depth = 1) =>",
							" function inherits(ctor, superCtor)",
							"ctor",
							"superCtor",
							" function inherits(ctor, superCtor)",
							"TempCtor = function()",
							"TempCtor",
							"superCtor",
							"ctor",
							"ctor",
							"Util.bindMethods = (obj, methods, dest) =>",
							"Util.getConstructor = obj =>",
							"Util.getPrototypeChain = function(obj, fn = p => p)",
							"Util.getObjectChain = (obj, fn = p => p) =>",
							"Util.getPropertyDescriptors = function(obj)",
							" p =>",
							"fn = (c, p) =>",
							" (p, o) =>",
							"Util.weakAssign = function(...args)",
							"other =>",
							"Util.exception = function Exception(...args)",
							"toString(color = false)",
							"Util.location = function Location(...args)",
							"toString(color = false)",
							" t =>",
							"getFileName()",
							"getLineNumber()",
							"getColumnNumber()",
							"Util.stackFrame = function StackFrame(frame)",
							"prop =>",
							"propertyMap()",
							"method =>",
							"([method, func]) =>",
							"getFunction()",
							"getMethodName()",
							"getFunctionName()",
							"getTypeName()",
							"getFileName()",
							"getLineNumber()",
							"getColumnNumber()",
							"get()",
							"toString(color, opts = {})",
							" (t, color) =>",
							" t =>",
							"p =>",
							"p =>",
							"(f, i) =>",
							"getLocation()",
							"get location()",
							"Util.scriptName = () =>",
							" () =>",
							" args =>",
							" () =>",
							"Util.getFunctionName = () =>",
							"Util.getFunctionArguments = fn =>",
							"Util.scriptDir = () =>",
							" () =>",
							" script =>",
							" () =>",
							"Util.stack = function Stack(stack, offset)",
							"frame =>",
							"([m, p]) =>",
							" (acc, [method, property]) =>",
							" function getStack()",
							".prepareStackTrace = (_, stack) =>",
							" function stackToString(st, start = 0)",
							"function* ()",
							"frame =>",
							"part =>",
							"frame =>",
							"([func, file]) =>",
							"n =>",
							"([func, file]) =>",
							"([func, [columnNumber, lineNumber, ...file]]) =>",
							"({ methodName, functionName: func, fileName: file, columnNumber: column, lineNumber: line }) =>",
							" s =>",
							" s =>",
							" () =>",
							" s =>",
							" s =>",
							" () =>",
							"frame =>",
							"frame =>",
							"get: () =>",
							"get: () =>",
							"*value()",
							"toString(opts = {})",
							"f =>",
							"getFunctionName()",
							"getMethodName()",
							"getFileName()",
							"getLineNumber()",
							"get()",
							" (a, f) =>",
							"(fn, i) =>",
							"Util.getCallerStack = function(position = 2, limit = 1000, stack)",
							".prepareStackTrace = (_, stack) =>",
							"Util.getCallerFile = function(position = 2)",
							"Util.getCallerFunction = function(position = 2)",
							"Util.getCallerFunctionName = function(position = 2)",
							"Util.getCallerFunctionNames = function(position = 2)",
							"Util.getCaller = function(index = 1, stack)",
							"f =>",
							"Util.getCallers = function(index = 1, num = Number.MAX_SAFE_INTEGER, stack)",
							"f =>",
							"Util.getStackFrames = function(offset = 2)",
							"frame =>",
							"Util.getStackFrame = function(offset = 2)",
							"Util.rotateLeft = function(x, n)",
							"Util.rotateRight = function(x, n)",
							"Util.hashString = function(string, bits = 32, mask = 0xffffffff)",
							"Util.flatTree = function(tree, addOutput)",
							"addOutput = arg =>",
							" key =>",
							"Util.traverseTree = function(tree, fn, depth = 0, parent = null)",
							"Util.walkTree = function(node, pred, t, depth = 0, parent = null)",
							"function* ()",
							"pred = i =>",
							"t = function(i)",
							"Util.isPromise = function(obj)",
							"setImmediate = fn =>",
							"Util.next = function(iter, observer, prev = undefined)",
							"val =>",
							"() =>",
							"err =>",
							"() =>",
							"Util.getImageAverageColor = function(imageElement, options)",
							"toStringRgb()",
							"toStringRgba()",
							"toStringHex()",
							"toHex = function(d)",
							"Util.jsonToObject = function(jsonStr)",
							"Util.splitLines = function(str, max_linelen = Number.MAX_SAFE_INTEGER)",
							"Util.splitAt = function* (str, ...indexes)",
							"(a, b) =>",
							"Util.decodeEscapes = function(text)",
							"m =>",
							"([s, t]) =>",
							"Util.stripXML = text =>",
							"Util.stripHTML = html =>",
							"p =>",
							"p =>",
							"Util.stripNonPrintable = text =>",
							"Util.decodeHTMLEntities = function(text)",
							" (match, entity) =>",
							"Util.encodeHTMLEntities = (str, charset = '\\u00A0-\\u9999<>&') =>",
							" i =>",
							"Util.stripAnsi = function(str)",
							"Util.proxy = (obj = {}, handler) =>",
							"get(target, key, receiver)",
							"set(target, key, value, receiver)",
							"Util.propertyLookup = (obj = {}, handler = key => null) =>",
							"get(target, key, receiver)",
							"Util.traceProxy = (obj, handler) =>",
							" function(name, args)",
							"get(target, key, receiver)",
							"member = function()",
							"Util.proxyTree = function proxyTree(...callbacks)",
							"applyCallback = () =>",
							"get(target, key)",
							"set(target, key, value)",
							"apply(target, thisArg, args)",
							" function node(path)",
							"() =>",
							"Util.construct = constructor =>",
							" function F(args)",
							"F",
							"constructor",
							"Util.constructApply = (constructor, array) =>",
							"Util.immutable = args =>",
							"set: () =>",
							"deleteProperty: () =>",
							"defineProperty: () =>",
							"Util.immutableClass = (orig, ...proto) =>",
							"p =>",
							" ctor =>",
							"ctor",
							"imm = base =>",
							"constructor(...args)",
							"Util.partial = function partial(fn /*, arg1, arg2 etc */)",
							" function()",
							"(min, max, value) =>",
							"Util.coloring = (useColor = true) =>",
							"code(...args)",
							"text(text)",
							"concat(...args)",
							"code(...args)",
							"text(text, ...color)",
							"concat(...args)",
							"code(...args)",
							"text(text, ...color)",
							"concat(...args)",
							"Util.colorText = (...args) =>",
							"Util.decodeAnsi = (str, index) =>",
							"isDigit = c =>",
							"notDigit = c =>",
							"findIndex = (pred, start) =>",
							"Util.stripAnsi = str =>",
							"Util.ansiCode = (...args) =>",
							"Util.wordWrap = (str, width, delimiter) =>",
							"Util.multiParagraphWordWrap = (str, width, delimiter) =>",
							"Util.defineInspect = (proto, ...props) =>",
							" function()",
							"(acc, key) =>",
							"(a, b, value) =>",
							"Util.bindProperties = (proxy, target, props, gen) =>",
							"name =>",
							"(acc, name) =>",
							" p => v =>",
							"k =>",
							" (a, [k, v]) =>",
							" (...args) =>",
							"(...args) =>",
							" (a, k) =>",
							"get: () =>",
							"get: () =>",
							"function ()",
							" obj =>",
							"on: val =>",
							"off: val =>",
							"true: val =>",
							"false: val =>",
							"AssertionFailed",
							"constructor(message, stack)",
							"Util.assert = function assert(val, message)",
							"Util.assertEqual = function assertEqual(val1, val2, message)",
							"Util.assignGlobal = () =>",
							"Util.weakMapper = function(createFn, map = ",
							"(), hitFn)",
							"self = function(obj, ...args)",
							".set = (k, v) =>",
							".get = k =>",
							"Util.merge = function(...args)",
							" a =>",
							" a =>",
							"(acc, arg) =>",
							"Util.transformer = (a, ...l) =>",
							" (c, f) =>",
							" function(...v)",
							"Util.copyTextToClipboard = (i, t) =>",
							"async module =>",
							"(a, b, c) =>",
							"() =>",
							"Util.toPlainObject = obj =>",
							" v =>",
							"Util.toBuiltinObject = obj =>",
							" v =>",
							"t = (v, n) =>",
							"(acc, k) =>",
							"Util.timer = msecs =>",
							"remaining = () =>",
							"finish = callback =>",
							"log = (method, ...args) =>",
							"obj =>",
							" v =>",
							"timeout = (msecs, tmr = timer) =>",
							"() =>",
							" (...args) =>",
							" () =>",
							"add = (arr, ...items) =>",
							"get delay()",
							"get created()",
							"get start()",
							"get stop()",
							"get elapsed()",
							"get end()",
							"get remain()",
							"cancel()",
							"pause()",
							".resume = function()",
							".restart = function()",
							"callback(...args)",
							"subscribe(f)",
							"unsubscribe(f)",
							"start = () =>",
							"(resolve, reject) =>",
							"Util.thenableReject = error =>",
							"then: (resolve, reject) =>",
							"Util.wrapGenerator = fn =>",
							" function(...args)",
							"Util.wrapGeneratorMethods = obj =>",
							"Util.decorateIterable = (proto, generators = false) =>",
							"forEach(fn, thisArg)",
							"*map(fn, thisArg)",
							"*filter(pred, thisArg)",
							"findIndex(pred, thisArg)",
							"indexOf(item, startIndex = -1)",
							"(e, i) =>",
							"find(pred, thisArg)",
							"every(pred, thisArg)",
							"some(pred, thisArg)",
							"reduce(fn, accu)",
							"*entries()",
							"*keys()",
							"*values()",
							"Util.swap = (a, b) =>",
							"Util.swapArray = ([a, b]) =>",
							"Util.cacheAdapter = (st, defaultOpts = {}) =>",
							" () =>",
							"async c =>",
							" () =>",
							"async getItem(request, opts = {})",
							"async setItem(request, response)",
							"async addItem(request)",
							"async removeItem(request, opts = {})",
							"async key(index)",
							"async keys(urls = false, t = a => a)",
							"response =>",
							"r =>",
							"async clear()",
							"Util.cachedFetch = (allOpts = {}) =>",
							"() =>",
							"self = async function CachedFetch(request, opts = {})",
							"(returnValue, fn, ...args) =>",
							"Util.proxyObject = (root, handler) =>",
							"ptr = path =>",
							"(a, i) =>",
							" (value, path) =>",
							"get(target, key)",
							" function node(path)",
							"Util.parseXML = function(xmlStr)",
							" () =>",
							" parser =>",
							"fn = (value, ...args) =>",
							" () =>",
							" map =>",
							"(obj, ...args) =>",
							" () =>",
							" (obj, ...args) =>",
							"self = (obj, ...args) =>",
							"() =>",
							" () =>",
							" a =>",
							" () =>",
							" () =>",
							" fn =>",
							" () =>",
							" () =>",
							" a =>",
							"() =>",
							" () =>",
							" a =>",
							" () =>",
							"() =>",
							"Util.getOpt = (options = {}, args) =>",
							"findOpt = arg =>",
							"([optname, option]) =>",
							"opt =>",
							" () =>",
							" v =>",
							" () =>",
							" () =>",
							" v =>",
							"Util.getEnv = async varName =>",
							" () =>",
							"async e =>",
							" () =>",
							"Util.getEnvVars = async () =>",
							" () =>",
							"async e =>",
							" () =>",
							"Util.safeFunction = (fn, trapExceptions, thisObj) =>",
							"async function(...args)",
							" function(...args)",
							" a =>",
							" error =>",
							"Util.safeCall = (fn, ...args) =>",
							"Util.safeApply = (fn, args = []) =>",
							"Util.exit = exitCode =>",
							"stdExit = std =>",
							" () =>",
							" ([obj, exit]) =>",
							" () =>",
							"Util.atexit = handler =>",
							"Util.callMain = async (fn, trapExceptions) =>",
							"async (...args) =>",
							"async ret =>",
							"() =>",
							" err =>",
							" () =>",
							" argv1 =>",
							"Util.printReturnValue = (fn, opts = {}) =>",
							"print = (returnValue, fn, ...args) =>",
							"self = (...args) =>",
							"Util.replaceAll = (needles, haystack) =>",
							"([re, str]) =>",
							"(acc, [match, replacement]) =>",
							"Util.quote = (str, q = '\"') =>",
							"Util.escape = (str, pred = codePoint => codePoint < 32 || codePoint > 0xff) =>",
							"Util.escapeRegex = string =>",
							"Util.consolePrinter = function ConsolePrinter(log = console.log)",
							"self = function(...args)",
							".log = (...args) =>",
							"Util.consoleJoin = function(...args)",
							"Util.consoleConcat = function(...args)",
							"self = function ConsoleConcat(...args)",
							"clear()",
							"log = (...args) =>",
							"print()",
							"i =>",
							"output()",
							"add(...args)",
							"Util.booleanAdapter = (getSetFn, trueValue = 1, falseValue = 0) =>",
							" function(value)",
							"set = () =>",
							" function(...args)",
							"Util.deriveGetSet = (fn, get = v => v, set = v => v, thisObj) =>",
							" () =>",
							" v =>",
							"handler = () =>",
							"ExFunc",
							"constructor()",
							"__call__(...args)",
							"Util.isatty = async fd =>",
							"mod =>",
							"Util.ttyGetWinSize = (fd = 1) =>",
							"m =>",
							" (resolve, reject) =>",
							" (resolve, reject) =>",
							" (fd = 0, mode = true) =>",
							"Util.stdio = (fd, mode = true) =>",
							"Util.signal = (num, act) =>",
							"m =>",
							"() =>",
							"Util.timeit = (fn, args = [], options = {}) =>",
							"(p, c) =>",
							"Util.lazyProperty = (obj, name, getter, opts = {}) =>",
							"replaceProperty = value =>",
							"async function()",
							" function()",
							"v =>",
							"Util.lazyProperties = (obj, gettersObj, opts = {}) =>",
							"f = (a, b) =>",
							" function(a, b)",
							"(a, b) =>",
							"(a, b) =>",
							"() =>",
							"HighResolutionTime",
							"constructor(secs = 0, nano = 0)",
							"static create(s, n)",
							"get seconds()",
							"get milliseconds()",
							"get nanoseconds()",
							"diff(o)",
							"sum(o)",
							"since(o)",
							"toString()",
							"inspect()",
							"async function hrtime(previousTimestamp)",
							" function hrtime(previousTimestamp)",
							" () =>",
							" (minDelay = 0) =>",
							"resolve =>",
							"resolve =>",
							" function animationFrame(t)",
							"Util.getNow = () =>",
							"performanceNow = () =>",
							"performanceNow = async function(clock = CLOCK_MONOTONIC_RAW)",
							"Util.formatColumns = a =>",
							"(acc, row, i) =>",
							"(col, j) =>",
							"row =>",
							"(col, j) =>",
							"Util.getPlatform = () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							"async () =>",
							"Util.colIndexes = line =>",
							" ([prev, cols], char, i) =>",
							"Util.colSplit = (line, indexes) =>",
							"map = (name, flag) =>",
							" function* (value)",
							"log = (duration, name, args, ret) =>",
							"async (args, ret) =>",
							" (args, ret) =>",
							"async function(...args)",
							" function(...args)",
							"both = () =>",
							"(name, args) =>",
							"arg =>",
							"(name, ret) =>",
							" function(...args)",
							"Util.bind = function(f, ...args)",
							"ret = function()",
							"ret = function()",
							"ret",
							"f",
							"Util.bytesToUTF8 = function* (bytes)",
							"Util.codePointsToString = codePoints =>",
							"Util.bufferToString = b =>",
							"Util.levenshteinDistance = function levenshteinDistance(a, b)",
							"Util.padTrunc = (...args) =>",
							" (s, pad = ' ') =>",
							"Util.setReadHandler = (fd, handler) =>",
							"os =>"
						]
					},
					"AQAAAAAAAAAAAAAAaWkAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					3125,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/geom/transformation.js",
						"symkeys":
						[
							[
								204,
								218
							],
							[
								245,
								272
							],
							[
								738,
								748
							],
							[
								1077,
								1095
							],
							[
								1190,
								1200
							],
							[
								1277,
								1284
							],
							[
								1306,
								1317
							],
							[
								1373,
								1379
							],
							[
								1402,
								1411
							],
							[
								1505,
								1515
							],
							[
								1551,
								1560
							],
							[
								1589,
								1596
							],
							[
								1625,
								1633
							],
							[
								1690,
								1702
							],
							[
								1814,
								1822
							],
							[
								1842,
								1850
							],
							[
								1871,
								1886
							],
							[
								2158,
								2165
							],
							[
								2257,
								2271
							],
							[
								2380,
								2402
							],
							[
								2636,
								2642
							],
							[
								2685,
								2691
							],
							[
								4013,
								4034
							],
							[
								4064,
								4088
							],
							[
								4121,
								4141
							],
							[
								4170,
								4189
							],
							[
								4360,
								4371
							],
							[
								4482,
								4495
							],
							[
								4527,
								4531
							],
							[
								4648,
								4656
							],
							[
								4720,
								4744
							],
							[
								5022,
								5030
							],
							[
								5089,
								5101
							],
							[
								5158,
								5168
							],
							[
								5207,
								5215
							],
							[
								5253,
								5268
							],
							[
								5548,
								5556
							],
							[
								5601,
								5611
							],
							[
								5921,
								5929
							],
							[
								6066,
								6083
							],
							[
								6287,
								6319
							],
							[
								6551,
								6559
							],
							[
								6713,
								6724
							],
							[
								6790,
								6810
							],
							[
								7087,
								7091
							],
							[
								7330,
								7342
							],
							[
								7431,
								7439
							],
							[
								7793,
								7801
							],
							[
								7983,
								8000
							],
							[
								8290,
								8301
							],
							[
								8464,
								8471
							],
							[
								8537,
								8557
							],
							[
								8950,
								8962
							],
							[
								9159,
								9167
							],
							[
								9279,
								9289
							],
							[
								9599,
								9607
							],
							[
								9738,
								9755
							],
							[
								10037,
								10044
							],
							[
								10195,
								10215
							],
							[
								10272,
								10289
							],
							[
								10481,
								10493
							],
							[
								10627,
								10637
							],
							[
								10684,
								10692
							],
							[
								10761,
								10769
							],
							[
								10816,
								10833
							],
							[
								11036,
								11056
							],
							[
								11250,
								11268
							],
							[
								11287,
								11318
							],
							[
								12096,
								12112
							],
							[
								12232,
								12250
							],
							[
								12325,
								12343
							],
							[
								12727,
								12742
							],
							[
								13011,
								13025
							],
							[
								13327,
								13348
							],
							[
								13442,
								13468
							],
							[
								13578,
								13596
							],
							[
								13684,
								13707
							],
							[
								13810,
								13832
							],
							[
								13895,
								13916
							],
							[
								13978,
								14003
							],
							[
								14184,
								14193
							],
							[
								14296,
								14305
							],
							[
								14573,
								14586
							],
							[
								14828,
								14835
							],
							[
								14858,
								14862
							],
							[
								14899,
								14906
							],
							[
								14967,
								14981
							],
							[
								15049,
								15064
							],
							[
								15133,
								15148
							],
							[
								15217,
								15229
							],
							[
								15295,
								15328
							],
							[
								15341,
								15354
							],
							[
								15527,
								15543
							],
							[
								15731,
								15746
							],
							[
								15885,
								15900
							],
							[
								15931,
								15935
							],
							[
								16356,
								16370
							],
							[
								16505,
								16520
							],
							[
								16707,
								16729
							],
							[
								16869,
								16881
							],
							[
								17048,
								17055
							],
							[
								17170,
								17180
							],
							[
								17321,
								17325
							],
							[
								17403,
								17415
							],
							[
								17464,
								17469
							],
							[
								17638,
								17644
							],
							[
								17808,
								17822
							],
							[
								17934,
								17952
							],
							[
								18016,
								18068
							],
							[
								18502,
								18531
							],
							[
								18602,
								18626
							],
							[
								18765,
								18784
							],
							[
								18865,
								18879
							],
							[
								18907,
								18914
							],
							[
								18974,
								18993
							],
							[
								19031,
								19038
							],
							[
								19203,
								19216
							],
							[
								19244,
								19251
							],
							[
								19310,
								19328
							],
							[
								19366,
								19373
							],
							[
								19535,
								19552
							],
							[
								19580,
								19587
							],
							[
								19683,
								19705
							],
							[
								19743,
								19750
							],
							[
								20032,
								20042
							],
							[
								20075,
								20086
							],
							[
								20119,
								20126
							],
							[
								20194,
								20204
							],
							[
								20568,
								20581
							],
							[
								20650,
								20661
							],
							[
								20820,
								20828
							],
							[
								20946,
								20957
							],
							[
								20993,
								21008
							],
							[
								21067,
								21074
							],
							[
								21156,
								21180
							],
							[
								21343,
								21361
							],
							[
								21703,
								21721
							],
							[
								22303,
								22367
							],
							[
								22430,
								22497
							],
							[
								22563,
								22626
							],
							[
								22750,
								22756
							]
						],
						"symlist":
						[
							"Transformation",
							"constructor(transformation)",
							"get type()",
							"TransformationList",
							"get axes()",
							"axis =>",
							"get props()",
							"key =>",
							"has(axis)",
							"get is3D()",
							"entries()",
							"prop =>",
							"toJSON()",
							"vector(unit)",
							" axis =>",
							" axis =>",
							"toString(tUnit)",
							"clone()",
							"(acc, prop) =>",
							"static fromString(arg)",
							"arg =>",
							"arg =>",
							"static get rotation()",
							"static get translation()",
							"static get scaling()",
							"static get matrix()",
							"value(inst)",
							" ctor =>",
							"ctor",
							"Rotation",
							"constructor(angle, x, y)",
							"invert()",
							"get values()",
							"get is3D()",
							"isZero()",
							"toString(rUnit)",
							"coord =>",
							"toSource()",
							"coord =>",
							"accumulate(other)",
							"static convertAngle(angle, unit)",
							"Rotation",
							"Translation",
							"constructor(...args)",
							"a =>",
							"get values()",
							"isZero()",
							"invert()",
							"accumulate(other)",
							"Translation",
							"Scaling",
							"constructor(...args)",
							"get values()",
							"isZero()",
							"toString()",
							"invert()",
							"accumulate(other)",
							"Scaling",
							"MatrixTransformation",
							"constructor(init)",
							"get values()",
							"toString()",
							"invert()",
							"isZero()",
							"accumulate(other)",
							"MatrixTransformation",
							"TransformationList",
							"constructor(init, tUnit, rUnit)",
							"initialize(init)",
							"TransformationList",
							"TransformationList",
							"fromString(str)",
							"fromArray(arr)",
							"get translationUnit()",
							"set translationUnit(value)",
							"get rotationUnit()",
							"set rotationUnit(value)",
							"static fromString(str)",
							"static fromArray(arr)",
							"static fromMatrix(matrix)",
							"toArray()",
							"toArray()",
							"push(...args)",
							"clone()",
							"t =>",
							"map(fn)",
							"slice(...args)",
							"splice(...args)",
							"concat(...args)",
							"filter(pred)",
							"baseCall(c = Array.prototype.map)",
							" (...args) =>",
							"unshift(...args)",
							"rotate(...args)",
							"translate(x, y)",
							"t =>",
							"scale(...args)",
							"matrix(...args)",
							"toString(tUnit, rUnit)",
							" t =>",
							"toDOM()",
							"toSource()",
							"t =>",
							"toMatrices()",
							" t =>",
							"undo()",
							"merge(...args)",
							"TransformationList",
							"decompose(degrees = true, transformationList = true)",
							".toArray = function toArray()",
							"findLastIndex(predicate)",
							"findLast(predicate)",
							"get rotation()",
							"item =>",
							"set rotation(value)",
							"item =>",
							"get scaling()",
							"item =>",
							"set scaling(value)",
							"item =>",
							"get translation()",
							"item =>",
							"set translation(value)",
							"item =>",
							"get last()",
							"get first()",
							"at(pos)",
							"collapse()",
							"collapseAll()",
							"get angle()",
							"invert()",
							"(acc, t) =>",
							"join(sep = ' ')",
							"clear()",
							"apply(obj, round = true)",
							"TransformationList",
							"TransformationList",
							"ImmutableTransformationList.prototype.rotate = function(...args)",
							"ImmutableTransformationList.prototype.translate = function(...args)",
							"ImmutableTransformationList.prototype.scale = function(...args)",
							" () =>"
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				],
				[
					3126,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACKCQAAVHJhbnNmb3JtYXRpb24KICBjb25zdHJ1Y3Rvcih0cmFuc2Zvcm1hdGlvbikKICBnZXQgdHlwZSgpClRyYW5zZm9ybWF0aW9uTGlzdAogIGdldCBheGVzKCkKICBheGlzID0+CiAgZ2V0IHByb3BzKCkKICBrZXkgPT4KICBoYXMoYXhpcykKICBnZXQgaXMzRCgpCiAgZW50cmllcygpCiAgcHJvcCA9PgogIHRvSlNPTigpCiAgdmVjdG9yKHVuaXQpCiAgIGF4aXMgPT4KICAgYXhpcyA9PgogIHRvU3RyaW5nKHRVbml0KQogIGNsb25lKCkKKGFjYywgcHJvcCkgPT4KICBzdGF0aWMgZnJvbVN0cmluZyhhcmcpCiAgYXJnID0+CiAgYXJnID0+CiAgc3RhdGljIGdldCByb3RhdGlvbigpCiAgc3RhdGljIGdldCB0cmFuc2xhdGlvbigpCiAgc3RhdGljIGdldCBzY2FsaW5nKCkKICBzdGF0aWMgZ2V0IG1hdHJpeCgpCiAgdmFsdWUoaW5zdCkKICAgY3RvciA9PgogIGN0b3IKUm90YXRpb24KICBjb25zdHJ1Y3RvcihhbmdsZSwgeCwgeSkKICBpbnZlcnQoKQogIGdldCB2YWx1ZXMoKQogIGdldCBpczNEKCkKICBpc1plcm8oKQogIHRvU3RyaW5nKHJVbml0KQogIGNvb3JkID0+CiAgdG9Tb3VyY2UoKQogIGNvb3JkID0+CiAgYWNjdW11bGF0ZShvdGhlcikKICBzdGF0aWMgY29udmVydEFuZ2xlKGFuZ2xlLCB1bml0KQpSb3RhdGlvbgpUcmFuc2xhdGlvbgogIGNvbnN0cnVjdG9yKC4uLmFyZ3MpCiAgYSA9PgogIGdldCB2YWx1ZXMoKQogIGlzWmVybygpCiAgaW52ZXJ0KCkKICBhY2N1bXVsYXRlKG90aGVyKQpUcmFuc2xhdGlvbgpTY2FsaW5nCiAgY29uc3RydWN0b3IoLi4uYXJncykKICBnZXQgdmFsdWVzKCkKICBpc1plcm8oKQogIHRvU3RyaW5nKCkKICBpbnZlcnQoKQogIGFjY3VtdWxhdGUob3RoZXIpClNjYWxpbmcKTWF0cml4VHJhbnNmb3JtYXRpb24KICBjb25zdHJ1Y3Rvcihpbml0KQogIGdldCB2YWx1ZXMoKQogIHRvU3RyaW5nKCkKICBpbnZlcnQoKQogIGlzWmVybygpCiAgYWNjdW11bGF0ZShvdGhlcikKTWF0cml4VHJhbnNmb3JtYXRpb24KVHJhbnNmb3JtYXRpb25MaXN0CiAgY29uc3RydWN0b3IoaW5pdCwgdFVuaXQsIHJVbml0KQogIGluaXRpYWxpemUoaW5pdCkKVHJhbnNmb3JtYXRpb25MaXN0ClRyYW5zZm9ybWF0aW9uTGlzdAogIGZyb21TdHJpbmcoc3RyKQogIGZyb21BcnJheShhcnIpCiAgZ2V0IHRyYW5zbGF0aW9uVW5pdCgpCiAgc2V0IHRyYW5zbGF0aW9uVW5pdCh2YWx1ZSkKICBnZXQgcm90YXRpb25Vbml0KCkKICBzZXQgcm90YXRpb25Vbml0KHZhbHVlKQogIHN0YXRpYyBmcm9tU3RyaW5nKHN0cikKICBzdGF0aWMgZnJvbUFycmF5KGFycikKICBzdGF0aWMgZnJvbU1hdHJpeChtYXRyaXgpCiAgdG9BcnJheSgpCiAgdG9BcnJheSgpCiAgcHVzaCguLi5hcmdzKQogIGNsb25lKCkKICB0ID0+CiAgbWFwKGZuKQogIHNsaWNlKC4uLmFyZ3MpCiAgc3BsaWNlKC4uLmFyZ3MpCiAgY29uY2F0KC4uLmFyZ3MpCiAgZmlsdGVyKHByZWQpCiAgYmFzZUNhbGwoYyA9IEFycmF5LnByb3RvdHlwZS5tYXApCiAgICguLi5hcmdzKSA9PgogIHVuc2hpZnQoLi4uYXJncykKICByb3RhdGUoLi4uYXJncykKICB0cmFuc2xhdGUoeCwgeSkKICB0ID0+CiAgc2NhbGUoLi4uYXJncykKICBtYXRyaXgoLi4uYXJncykKICB0b1N0cmluZyh0VW5pdCwgclVuaXQpCiAgIHQgPT4KICB0b0RPTSgpCiAgdG9Tb3VyY2UoKQogIHQgPT4KICB0b01hdHJpY2VzKCkKICAgdCA9PgogIHVuZG8oKQogIG1lcmdlKC4uLmFyZ3MpClRyYW5zZm9ybWF0aW9uTGlzdAogIGRlY29tcG9zZShkZWdyZWVzID0gdHJ1ZSwgdHJhbnNmb3JtYXRpb25MaXN0ID0gdHJ1ZSkKICAudG9BcnJheSA9IGZ1bmN0aW9uIHRvQXJyYXkoKQogIGZpbmRMYXN0SW5kZXgocHJlZGljYXRlKQogIGZpbmRMYXN0KHByZWRpY2F0ZSkKICBnZXQgcm90YXRpb24oKQogIGl0ZW0gPT4KICBzZXQgcm90YXRpb24odmFsdWUpCiAgaXRlbSA9PgogIGdldCBzY2FsaW5nKCkKICBpdGVtID0+CiAgc2V0IHNjYWxpbmcodmFsdWUpCiAgaXRlbSA9PgogIGdldCB0cmFuc2xhdGlvbigpCiAgaXRlbSA9PgogIHNldCB0cmFuc2xhdGlvbih2YWx1ZSkKICBpdGVtID0+CiAgZ2V0IGxhc3QoKQogIGdldCBmaXJzdCgpCiAgYXQocG9zKQogIGNvbGxhcHNlKCkKICBjb2xsYXBzZUFsbCgpCiAgZ2V0IGFuZ2xlKCkKICBpbnZlcnQoKQooYWNjLCB0KSA9PgogIGpvaW4oc2VwID0gJyAnKQogIGNsZWFyKCkKICBhcHBseShvYmosIHJvdW5kID0gdHJ1ZSkKVHJhbnNmb3JtYXRpb25MaXN0ClRyYW5zZm9ybWF0aW9uTGlzdApJbW11dGFibGVUcmFuc2Zvcm1hdGlvbkxpc3QucHJvdG90eXBlLnJvdGF0ZSA9IGZ1bmN0aW9uKC4uLmFyZ3MpCkltbXV0YWJsZVRyYW5zZm9ybWF0aW9uTGlzdC5wcm90b3R5cGUudHJhbnNsYXRlID0gZnVuY3Rpb24oLi4uYXJncykKSW1tdXRhYmxlVHJhbnNmb3JtYXRpb25MaXN0LnByb3RvdHlwZS5zY2FsZSA9IGZ1bmN0aW9uKC4uLmFyZ3MpCiAgICgpID0+AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					3127,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/555-PWM-Motor-Speed-Controller-alt-schematic.svg",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					3128,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					3129,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/555-PWM-Motor-Speed-Controller-alt-schematic.svg",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					3130,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/an-tronics/eagle/555-PWM-Motor-Speed-Controller-alt.brd",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					3131,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/an-tronics/eagle/555-PWM-Motor-Speed-Controller-alt.sch",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					3132,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/geom/matrix.js",
						"symkeys":
						[
							[
								32,
								61
							],
							[
								352,
								377
							],
							[
								1258,
								1264
							],
							[
								1549,
								1553
							],
							[
								2148,
								2154
							],
							[
								2217,
								2223
							],
							[
								2307,
								2312
							],
							[
								2361,
								2367
							],
							[
								2398,
								2409
							],
							[
								2432,
								2438
							],
							[
								2512,
								2518
							],
							[
								2588,
								2594
							],
							[
								2696,
								2702
							],
							[
								2758,
								2764
							],
							[
								3051,
								3095
							],
							[
								3131,
								3169
							],
							[
								3311,
								3338
							],
							[
								3376,
								3396
							],
							[
								3435,
								3440
							],
							[
								3488,
								3494
							],
							[
								3610,
								3616
							],
							[
								4558,
								4599
							],
							[
								5060,
								5104
							],
							[
								5258,
								5301
							],
							[
								5385,
								5391
							],
							[
								5408,
								5455
							],
							[
								5572,
								5610
							],
							[
								5696,
								5733
							],
							[
								5760,
								5766
							],
							[
								5802,
								5837
							],
							[
								5896,
								5956
							],
							[
								6021,
								6025
							],
							[
								6074,
								6138
							],
							[
								6143,
								6149
							],
							[
								6205,
								6209
							],
							[
								6262,
								6298
							],
							[
								6376,
								6415
							],
							[
								6454,
								6460
							],
							[
								6531,
								6568
							],
							[
								6625,
								6631
							],
							[
								6682,
								6716
							],
							[
								6836,
								6873
							],
							[
								6906,
								6946
							],
							[
								6992,
								7033
							],
							[
								7222,
								7258
							],
							[
								8028,
								8073
							],
							[
								8233,
								8306
							],
							[
								8360,
								8366
							],
							[
								8420,
								8426
							],
							[
								8548,
								8601
							],
							[
								8617,
								8623
							],
							[
								8785,
								8789
							],
							[
								8849,
								8855
							],
							[
								8989,
								8995
							],
							[
								9019,
								9030
							],
							[
								9049,
								9055
							],
							[
								9126,
								9132
							],
							[
								9203,
								9212
							],
							[
								9224,
								9228
							],
							[
								9320,
								9329
							],
							[
								9353,
								9357
							],
							[
								9780,
								9815
							],
							[
								9874,
								9878
							],
							[
								9921,
								9972
							],
							[
								9990,
								9996
							],
							[
								10124,
								10160
							],
							[
								10178,
								10184
							],
							[
								10304,
								10328
							],
							[
								10346,
								10372
							],
							[
								10456,
								10479
							],
							[
								10568,
								10572
							],
							[
								10641,
								10682
							],
							[
								10757,
								10767
							],
							[
								10788,
								10837
							],
							[
								11098,
								11144
							],
							[
								11237,
								11283
							],
							[
								11579,
								11641
							],
							[
								11698,
								11715
							],
							[
								11743,
								11749
							],
							[
								11823,
								11829
							],
							[
								11994,
								12046
							],
							[
								12094,
								12100
							],
							[
								12159,
								12214
							],
							[
								12334,
								12379
							],
							[
								12545,
								12608
							],
							[
								12629,
								12635
							],
							[
								12684,
								12690
							],
							[
								12749,
								12797
							],
							[
								12846,
								12852
							],
							[
								12909,
								12915
							],
							[
								13048,
								13053
							],
							[
								13108,
								13113
							],
							[
								13192,
								13239
							],
							[
								13273,
								13282
							],
							[
								13318,
								13359
							],
							[
								13400,
								13415
							],
							[
								13451,
								13464
							],
							[
								13496,
								13506
							],
							[
								13537,
								13550
							],
							[
								13582,
								13595
							],
							[
								13629,
								13644
							],
							[
								13680,
								13694
							],
							[
								13733,
								13773
							],
							[
								13845,
								13895
							],
							[
								15788,
								15825
							],
							[
								15911,
								15979
							],
							[
								16179,
								16215
							],
							[
								16454,
								16460
							],
							[
								17830,
								17873
							],
							[
								17885,
								17891
							],
							[
								17958,
								17999
							],
							[
								18011,
								18017
							],
							[
								18128,
								18178
							],
							[
								18190,
								18196
							],
							[
								18248,
								18294
							],
							[
								18338,
								18344
							],
							[
								18420,
								18426
							],
							[
								18457,
								18462
							],
							[
								18792,
								18797
							],
							[
								18992,
								18997
							],
							[
								19119,
								19178
							],
							[
								19290,
								19296
							],
							[
								19681,
								19737
							],
							[
								19841,
								19847
							],
							[
								19898,
								19904
							],
							[
								19933,
								19946
							],
							[
								20045,
								20068
							],
							[
								20482,
								20503
							],
							[
								20504,
								20510
							],
							[
								20651,
								20664
							],
							[
								20665,
								20671
							],
							[
								20792,
								20798
							],
							[
								20816,
								20834
							],
							[
								20848,
								20854
							],
							[
								20932,
								20938
							],
							[
								20966,
								20972
							],
							[
								21000,
								21018
							],
							[
								21032,
								21038
							],
							[
								21325,
								21331
							],
							[
								21407,
								21419
							],
							[
								21420,
								21426
							],
							[
								21540,
								21549
							],
							[
								21550,
								21556
							],
							[
								21651,
								21662
							],
							[
								21698,
								21713
							],
							[
								21837,
								21842
							],
							[
								21980,
								21986
							]
						],
						"symlist":
						[
							"function matrixMultiply(a, b)",
							" function Matrix(...args)",
							"Matrix",
							"m =>",
							"Matrix",
							"Matrix",
							"get()",
							"Matrix",
							" function()",
							"Matrix",
							"Matrix",
							"Matrix",
							"Matrix",
							"Matrix",
							"Matrix.prototype.at = function(col, row = 0)",
							"Matrix.prototype.get = function(field)",
							"MatrixProps = (obj = {}) =>",
							" (acc, [k, i]) =>",
							"get()",
							"set(v)",
							"Matrix",
							"Matrix.prototype.init = function(...args)",
							"Matrix.prototype.set_row = function(...args)",
							"Matrix.prototype.multiply = function(other)",
							"Matrix",
							"Matrix.prototype.multiplySelf = function(other)",
							"Matrix.prototype.toObject = function()",
							"Matrix.prototype.entries = function()",
							"Matrix",
							"Matrix.prototype.clone = function()",
							"Matrix.prototype.round = function(prec = 1e-12, digits = 12)",
							"n =>",
							"Matrix.prototype.roundSelf = function(prec = 1e-12, digits = 12)",
							"Matrix",
							"n =>",
							"Matrix.prototype.row = function(row)",
							"Matrix.prototype.column = function(col)",
							"Matrix",
							"Matrix.prototype.columns = function()",
							"Matrix",
							"Matrix.prototype.rows = function()",
							"Matrix.prototype.toArray = function()",
							"Matrix.prototype.isIdentity = function()",
							"Matrix.prototype.determinant = function()",
							"Matrix.prototype.invert = function()",
							"Matrix.prototype.scalar_product = function(f)",
							"Matrix.prototype.toSource = function(construct = false, multiline = true)",
							"Matrix",
							"row =>",
							"Matrix.prototype.toString = function(separator = ' ')",
							"Matrix",
							"k =>",
							"row =>",
							"Matrix",
							" function()",
							"Matrix",
							"col =>",
							"column =>",
							"n =>",
							"column =>",
							"n =>",
							"Matrix.prototype.toSVG = function()",
							"k =>",
							"Matrix.prototype.toDOM = function(ctor = DOMMatrix)",
							"Matrix",
							"Matrix.prototype.toJSON = function()",
							"Matrix",
							"Matrix.fromJSON = obj =>",
							"Matrix.fromDOM = matrix =>",
							"Matrix.fromCSS = str =>",
							"m =>",
							"Matrix.prototype.equals = function(other)",
							" (n, i) =>",
							"Matrix.prototype.transform_distance = function(d)",
							"Matrix.prototype.transform_xy = function(x, y)",
							"Matrix.prototype.transform_point = function(p)",
							"Matrix.prototype.transformGenerator = function(what = 'point')",
							" function* (list)",
							"Matrix",
							"Matrix",
							"Matrix.prototype.transform_points = function* (list)",
							"Matrix",
							"Matrix.prototype.transform_wh = function(width, height)",
							"Matrix.prototype.transform_size = function(s)",
							"Matrix.prototype.transform_xywh = function(x, y, width, height)",
							"Matrix",
							"Matrix",
							"Matrix.prototype.transform_rect = function(rect)",
							"Matrix",
							"Matrix",
							"fn =>",
							"fn =>",
							"Matrix.prototype.point_transformer = function()",
							" point =>",
							"Matrix.prototype.transformer = function()",
							"point: point =>",
							"xy: (x, y) =>",
							"size: s =>",
							"wh: (w, h) =>",
							"rect: rect =>",
							"points: list =>",
							"distance: d =>",
							"Matrix.prototype.scale_sign = function()",
							"Matrix.prototype.affine_transform = function(a, b)",
							"Matrix.getAffineTransform = (a, b) =>",
							"Matrix.prototype.decompose = function(degrees = false, useLU = true)",
							"calcFromValues = (r1, m1, r2, m2) =>",
							"Matrix",
							"Matrix.prototype.init_identity = function()",
							"Matrix",
							"Matrix.prototype.is_identity = function()",
							"Matrix",
							"Matrix.prototype.init_translate = function(tx, ty)",
							"Matrix",
							"Matrix.prototype.init_scale = function(sx, sy)",
							"Matrix",
							"Matrix",
							"get()",
							"get()",
							"get()",
							"Matrix.prototype.init_rotate = function(angle, deg = false)",
							"Matrix",
							"Matrix.prototype.init_skew = function(x, y, deg = false)",
							"Matrix",
							"Matrix",
							" function* ()",
							"Matrix.identity = () =>",
							" (matrix, ...args) =>",
							"Matrix",
							" (...args) =>",
							"Matrix",
							"Matrix",
							" function(...args)",
							"Matrix",
							"Matrix",
							"Matrix",
							" function(...args)",
							"Matrix",
							"Matrix",
							"(m, a, b) =>",
							"Matrix",
							"(m, a) =>",
							"Matrix",
							" function()",
							"isMatrix = m =>",
							"el =>",
							" () =>"
						]
					},
					"AQAAAAAAAAAAAAAAyAwAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					3133,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/renderUtils.js",
						"symkeys":
						[
							[
								886,
								892
							],
							[
								911,
								930
							],
							[
								1072,
								1078
							],
							[
								1177,
								1202
							],
							[
								1326,
								1353
							],
							[
								1436,
								1459
							],
							[
								1859,
								1899
							],
							[
								2433,
								2463
							],
							[
								2551,
								2572
							],
							[
								2638,
								2668
							],
							[
								3053,
								3088
							],
							[
								3223,
								3227
							],
							[
								3462,
								3495
							],
							[
								3630,
								3634
							],
							[
								4124,
								4192
							],
							[
								4640,
								4702
							],
							[
								5100,
								5138
							],
							[
								5216,
								5242
							],
							[
								5367,
								5384
							],
							[
								5586,
								5650
							],
							[
								5799,
								5856
							],
							[
								5996,
								6047
							],
							[
								9843,
								9896
							],
							[
								10351,
								10399
							],
							[
								10871,
								10905
							],
							[
								11060,
								11096
							],
							[
								11249,
								11266
							],
							[
								11275,
								11301
							],
							[
								12133,
								12154
							],
							[
								13087,
								13125
							],
							[
								13258,
								13265
							],
							[
								13388,
								13395
							],
							[
								13952,
								13963
							],
							[
								14043,
								14054
							],
							[
								14245,
								14289
							],
							[
								14491,
								14528
							],
							[
								14626,
								14685
							],
							[
								14899,
								14931
							],
							[
								15091,
								15123
							],
							[
								15504,
								15508
							],
							[
								15534,
								15538
							],
							[
								15563,
								15572
							],
							[
								15708,
								15712
							],
							[
								15786,
								15790
							],
							[
								15815,
								15824
							]
						],
						"symlist":
						[
							" () =>",
							"setDebug = state =>",
							" () =>",
							"EscapeClassName = name =>",
							"UnescapeClassName = name =>",
							"LayerToClass = layer =>",
							"ElementToClass = (element, layerName) =>",
							"ClampAngle = (a, mod = 360) =>",
							"AlignmentAngle = a =>",
							"MakeRotation = (rot, f = 1) =>",
							"ExtractRotation = transformation =>",
							"t =>",
							"InferRotation = transformation =>",
							"t =>",
							"Alignment = (align, rot = 0, scaling = null, def = 'bottom-left') =>",
							"AlignmentAttrs = (align, hv = HORIZONTAL_VERTICAL, rot = 0) =>",
							"RotateTransformation = (rot, f = 1) =>",
							"LayerAttributes = layer =>",
							"InvertY = item =>",
							"PolarToCartesian = ([radius, angle], origin = { x: 0, y: 0 }) =>",
							"CartesianToPolar = ({ x, y }, origin = { x: 0, y: 0 }) =>",
							"RenderArc = (x, y, radius, startAngle, endAngle) =>",
							"RenderArcTo = (distance, radius, theta, sweep, to) =>",
							"RenderArcFromTo = (start, radius, theta, end) =>",
							"CalculateArcRadius = (d, angle) =>",
							" function LinesToPath(lines, lineFn)",
							"(point, curve) =>",
							"lineFn = (point, curve) =>",
							"lineTo = (...args) =>",
							" function MakeCoordTransformer(matrix)",
							" obj =>",
							" obj =>",
							"(acc, k) =>",
							"(acc, k) =>",
							"useAttributes = (element, attributeNames) =>",
							"useTransformation = transformation =>",
							"useTransform = ({ transform, transformation, ...props }) =>",
							" function accumulate(opts = {})",
							"RenderShape = (shape, ro, ri) =>",
							"p =>",
							"p =>",
							"(p, i) =>",
							"i =>",
							"p =>",
							"(p, i) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADIDAAAICBtYXRyaXhNdWx0aXBseShhLCBiKQpNYXRyaXgoLi4uYXJncykKTWF0cml4CiAgbSA9PgpNYXRyaXgKTWF0cml4CiAgZ2V0KCkKTWF0cml4CiAgIGZ1bmN0aW9uKCkKTWF0cml4Ck1hdHJpeApNYXRyaXgKTWF0cml4Ck1hdHJpeApNYXRyaXgucHJvdG90eXBlLmF0ID0gZnVuY3Rpb24oY29sLCByb3cgPSAwKQpNYXRyaXgucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKGZpZWxkKQpNYXRyaXhQcm9wcyA9IChvYmogPSB7fSkgPT4KICAgKGFjYywgW2ssIGldKSA9PgogIGdldCgpCiAgc2V0KHYpCk1hdHJpeApNYXRyaXgucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiguLi5hcmdzKQpNYXRyaXgucHJvdG90eXBlLnNldF9yb3cgPSBmdW5jdGlvbiguLi5hcmdzKQpNYXRyaXgucHJvdG90eXBlLm11bHRpcGx5ID0gZnVuY3Rpb24ob3RoZXIpCk1hdHJpeApNYXRyaXgucHJvdG90eXBlLm11bHRpcGx5U2VsZiA9IGZ1bmN0aW9uKG90aGVyKQpNYXRyaXgucHJvdG90eXBlLnRvT2JqZWN0ID0gZnVuY3Rpb24oKQpNYXRyaXgucHJvdG90eXBlLmVudHJpZXMgPSBmdW5jdGlvbigpCk1hdHJpeApNYXRyaXgucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKQpNYXRyaXgucHJvdG90eXBlLnJvdW5kID0gZnVuY3Rpb24ocHJlYyA9IDFlLTEyLCBkaWdpdHMgPSAxMikKICBuID0+Ck1hdHJpeC5wcm90b3R5cGUucm91bmRTZWxmID0gZnVuY3Rpb24ocHJlYyA9IDFlLTEyLCBkaWdpdHMgPSAxMikKTWF0cml4CiAgbiA9PgpNYXRyaXgucHJvdG90eXBlLnJvdyA9IGZ1bmN0aW9uKHJvdykKTWF0cml4LnByb3RvdHlwZS5jb2x1bW4gPSBmdW5jdGlvbihjb2wpCk1hdHJpeApNYXRyaXgucHJvdG90eXBlLmNvbHVtbnMgPSBmdW5jdGlvbigpCk1hdHJpeApNYXRyaXgucHJvdG90eXBlLnJvd3MgPSBmdW5jdGlvbigpCk1hdHJpeC5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uKCkKTWF0cml4LnByb3RvdHlwZS5pc0lkZW50aXR5ID0gZnVuY3Rpb24oKQpNYXRyaXgucHJvdG90eXBlLmRldGVybWluYW50ID0gZnVuY3Rpb24oKQpNYXRyaXgucHJvdG90eXBlLmludmVydCA9IGZ1bmN0aW9uKCkKTWF0cml4LnByb3RvdHlwZS5zY2FsYXJfcHJvZHVjdCA9IGZ1bmN0aW9uKGYpCk1hdHJpeC5wcm90b3R5cGUudG9Tb3VyY2UgPSBmdW5jdGlvbihjb25zdHJ1Y3QgPSBmYWxzZSwgbXVsdGlsaW5lID0gdHJ1ZSkKTWF0cml4CiAgcm93ID0+Ck1hdHJpeC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbihzZXBhcmF0b3IgPSAnICcpCk1hdHJpeAogIGsgPT4KICByb3cgPT4KTWF0cml4CiAgIGZ1bmN0aW9uKCkKTWF0cml4CiAgY29sID0+CiAgY29sdW1uID0+CiAgbiA9PgogIGNvbHVtbiA9PgogIG4gPT4KTWF0cml4LnByb3RvdHlwZS50b1NWRyA9IGZ1bmN0aW9uKCkKICBrID0+Ck1hdHJpeC5wcm90b3R5cGUudG9ET00gPSBmdW5jdGlvbihjdG9yID0gRE9NTWF0cml4KQpNYXRyaXgKTWF0cml4LnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbigpCk1hdHJpeApNYXRyaXguZnJvbUpTT04gPSBvYmogPT4KTWF0cml4LmZyb21ET00gPSBtYXRyaXggPT4KTWF0cml4LmZyb21DU1MgPSBzdHIgPT4KICBtID0+Ck1hdHJpeC5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24ob3RoZXIpCiAgIChuLCBpKSA9PgpNYXRyaXgucHJvdG90eXBlLnRyYW5zZm9ybV9kaXN0YW5jZSA9IGZ1bmN0aW9uKGQpCk1hdHJpeC5wcm90b3R5cGUudHJhbnNmb3JtX3h5ID0gZnVuY3Rpb24oeCwgeSkKTWF0cml4LnByb3RvdHlwZS50cmFuc2Zvcm1fcG9pbnQgPSBmdW5jdGlvbihwKQpNYXRyaXgucHJvdG90eXBlLnRyYW5zZm9ybUdlbmVyYXRvciA9IGZ1bmN0aW9uKHdoYXQgPSAncG9pbnQnKQoobGlzdCkKTWF0cml4Ck1hdHJpeApNYXRyaXgucHJvdG90eXBlLnRyYW5zZm9ybV9wb2ludHMgPSBmdW5jdGlvbioobGlzdCkKTWF0cml4Ck1hdHJpeC5wcm90b3R5cGUudHJhbnNmb3JtX3doID0gZnVuY3Rpb24od2lkdGgsIGhlaWdodCkKTWF0cml4LnByb3RvdHlwZS50cmFuc2Zvcm1fc2l6ZSA9IGZ1bmN0aW9uKHMpCk1hdHJpeC5wcm90b3R5cGUudHJhbnNmb3JtX3h5d2ggPSBmdW5jdGlvbih4LCB5LCB3aWR0aCwgaGVpZ2h0KQpNYXRyaXgKTWF0cml4Ck1hdHJpeC5wcm90b3R5cGUudHJhbnNmb3JtX3JlY3QgPSBmdW5jdGlvbihyZWN0KQpNYXRyaXgKTWF0cml4CiAgZm4gPT4KICBmbiA9PgpNYXRyaXgucHJvdG90eXBlLnBvaW50X3RyYW5zZm9ybWVyID0gZnVuY3Rpb24oKQogICBwb2ludCA9PgpNYXRyaXgucHJvdG90eXBlLnRyYW5zZm9ybWVyID0gZnVuY3Rpb24oKQogIHBvaW50OiBwb2ludCA9PgogIHh5OiAoeCwgeSkgPT4KICBzaXplOiBzID0+CiAgd2g6ICh3LCBoKSA9PgogIHJlY3Q6IHJlY3QgPT4KICBwb2ludHM6IGxpc3QgPT4KICBkaXN0YW5jZTogZCA9PgpNYXRyaXgucHJvdG90eXBlLnNjYWxlX3NpZ24gPSBmdW5jdGlvbigpCk1hdHJpeC5wcm90b3R5cGUuYWZmaW5lX3RyYW5zZm9ybSA9IGZ1bmN0aW9uKGEsIGIpCk1hdHJpeC5nZXRBZmZpbmVUcmFuc2Zvcm0gPSAoYSwgYikgPT4KTWF0cml4LnByb3RvdHlwZS5kZWNvbXBvc2UgPSBmdW5jdGlvbihkZWdyZWVzID0gZmFsc2UsIHVzZUxVID0gdHJ1ZSkKICBjYWxjRnJvbVZhbHVlcyA9IChyMSwgbTEsIHIyLCBtMikgPT4KTWF0cml4Ck1hdHJpeC5wcm90b3R5cGUuaW5pdF9pZGVudGl0eSA9IGZ1bmN0aW9uKCkKTWF0cml4Ck1hdHJpeC5wcm90b3R5cGUuaXNfaWRlbnRpdHkgPSBmdW5jdGlvbigpCk1hdHJpeApNYXRyaXgucHJvdG90eXBlLmluaXRfdHJhbnNsYXRlID0gZnVuY3Rpb24odHgsIHR5KQpNYXRyaXgKTWF0cml4LnByb3RvdHlwZS5pbml0X3NjYWxlID0gZnVuY3Rpb24oc3gsIHN5KQpNYXRyaXgKTWF0cml4CiAgZ2V0KCkKICBnZXQoKQogIGdldCgpCk1hdHJpeC5wcm90b3R5cGUuaW5pdF9yb3RhdGUgPSBmdW5jdGlvbihhbmdsZSwgZGVnID0gZmFsc2UpCk1hdHJpeApNYXRyaXgucHJvdG90eXBlLmluaXRfc2tldyA9IGZ1bmN0aW9uKHgsIHksIGRlZyA9IGZhbHNlKQpNYXRyaXgKTWF0cml4CigpCk1hdHJpeC5pZGVudGl0eSA9ICgpID0+CiAgIChtYXRyaXgsIC4uLmFyZ3MpID0+Ck1hdHJpeAogICAoLi4uYXJncykgPT4KTWF0cml4Ck1hdHJpeAogICBmdW5jdGlvbiguLi5hcmdzKQpNYXRyaXgKTWF0cml4Ck1hdHJpeAogICBmdW5jdGlvbiguLi5hcmdzKQpNYXRyaXgKTWF0cml4CihtLCBhLCBiKSA9PgpNYXRyaXgKKG0sIGEpID0+Ck1hdHJpeAogICBmdW5jdGlvbigpCiAgaXNNYXRyaXggPSBtID0+CiAgZWwgPT4KICAgKCkgPT4AAAAAAAAAAAAFAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					3134,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/geom/transformation.js",
						"symkeys":
						[
							[
								204,
								218
							],
							[
								245,
								272
							],
							[
								738,
								748
							],
							[
								1077,
								1095
							],
							[
								1190,
								1200
							],
							[
								1277,
								1284
							],
							[
								1306,
								1317
							],
							[
								1373,
								1379
							],
							[
								1402,
								1411
							],
							[
								1505,
								1515
							],
							[
								1551,
								1560
							],
							[
								1589,
								1596
							],
							[
								1625,
								1633
							],
							[
								1690,
								1702
							],
							[
								1814,
								1822
							],
							[
								1842,
								1850
							],
							[
								1871,
								1886
							],
							[
								2158,
								2165
							],
							[
								2257,
								2271
							],
							[
								2380,
								2402
							],
							[
								2636,
								2642
							],
							[
								2685,
								2691
							],
							[
								4013,
								4034
							],
							[
								4064,
								4088
							],
							[
								4121,
								4141
							],
							[
								4170,
								4189
							],
							[
								4360,
								4371
							],
							[
								4482,
								4495
							],
							[
								4527,
								4531
							],
							[
								4648,
								4656
							],
							[
								4720,
								4744
							],
							[
								5022,
								5030
							],
							[
								5089,
								5101
							],
							[
								5158,
								5168
							],
							[
								5207,
								5215
							],
							[
								5253,
								5268
							],
							[
								5548,
								5556
							],
							[
								5601,
								5611
							],
							[
								5921,
								5929
							],
							[
								6066,
								6083
							],
							[
								6287,
								6319
							],
							[
								6551,
								6559
							],
							[
								6713,
								6724
							],
							[
								6790,
								6810
							],
							[
								7087,
								7091
							],
							[
								7330,
								7342
							],
							[
								7431,
								7439
							],
							[
								7793,
								7801
							],
							[
								7983,
								8000
							],
							[
								8290,
								8301
							],
							[
								8464,
								8471
							],
							[
								8537,
								8557
							],
							[
								8950,
								8962
							],
							[
								9159,
								9167
							],
							[
								9279,
								9289
							],
							[
								9599,
								9607
							],
							[
								9738,
								9755
							],
							[
								10037,
								10044
							],
							[
								10195,
								10215
							],
							[
								10272,
								10289
							],
							[
								10481,
								10493
							],
							[
								10627,
								10637
							],
							[
								10684,
								10692
							],
							[
								10761,
								10769
							],
							[
								10816,
								10833
							],
							[
								11036,
								11056
							],
							[
								11250,
								11268
							],
							[
								11287,
								11318
							],
							[
								12096,
								12112
							],
							[
								12232,
								12250
							],
							[
								12325,
								12343
							],
							[
								12727,
								12742
							],
							[
								13011,
								13025
							],
							[
								13327,
								13348
							],
							[
								13442,
								13468
							],
							[
								13578,
								13596
							],
							[
								13684,
								13707
							],
							[
								13810,
								13832
							],
							[
								13895,
								13916
							],
							[
								13978,
								14003
							],
							[
								14184,
								14193
							],
							[
								14296,
								14305
							],
							[
								14573,
								14586
							],
							[
								14828,
								14835
							],
							[
								14858,
								14862
							],
							[
								14899,
								14906
							],
							[
								14967,
								14981
							],
							[
								15049,
								15064
							],
							[
								15133,
								15148
							],
							[
								15217,
								15229
							],
							[
								15295,
								15328
							],
							[
								15341,
								15354
							],
							[
								15527,
								15543
							],
							[
								15731,
								15746
							],
							[
								15885,
								15900
							],
							[
								15931,
								15935
							],
							[
								16356,
								16370
							],
							[
								16505,
								16520
							],
							[
								16707,
								16729
							],
							[
								16869,
								16881
							],
							[
								17048,
								17055
							],
							[
								17170,
								17180
							],
							[
								17321,
								17325
							],
							[
								17403,
								17415
							],
							[
								17464,
								17469
							],
							[
								17638,
								17644
							],
							[
								17808,
								17822
							],
							[
								17934,
								17952
							],
							[
								18016,
								18068
							],
							[
								18502,
								18531
							],
							[
								18602,
								18626
							],
							[
								18765,
								18784
							],
							[
								18865,
								18879
							],
							[
								18907,
								18914
							],
							[
								18974,
								18993
							],
							[
								19031,
								19038
							],
							[
								19203,
								19216
							],
							[
								19244,
								19251
							],
							[
								19310,
								19328
							],
							[
								19366,
								19373
							],
							[
								19535,
								19552
							],
							[
								19580,
								19587
							],
							[
								19683,
								19705
							],
							[
								19743,
								19750
							],
							[
								20032,
								20042
							],
							[
								20075,
								20086
							],
							[
								20119,
								20126
							],
							[
								20194,
								20204
							],
							[
								20568,
								20581
							],
							[
								20650,
								20661
							],
							[
								20820,
								20828
							],
							[
								20946,
								20957
							],
							[
								20993,
								21008
							],
							[
								21067,
								21074
							],
							[
								21156,
								21180
							],
							[
								21343,
								21361
							],
							[
								21703,
								21721
							],
							[
								22303,
								22367
							],
							[
								22430,
								22497
							],
							[
								22563,
								22626
							],
							[
								22750,
								22756
							]
						],
						"symlist":
						[
							"Transformation",
							"constructor(transformation)",
							"get type()",
							"TransformationList",
							"get axes()",
							"axis =>",
							"get props()",
							"key =>",
							"has(axis)",
							"get is3D()",
							"entries()",
							"prop =>",
							"toJSON()",
							"vector(unit)",
							" axis =>",
							" axis =>",
							"toString(tUnit)",
							"clone()",
							"(acc, prop) =>",
							"static fromString(arg)",
							"arg =>",
							"arg =>",
							"static get rotation()",
							"static get translation()",
							"static get scaling()",
							"static get matrix()",
							"value(inst)",
							" ctor =>",
							"ctor",
							"Rotation",
							"constructor(angle, x, y)",
							"invert()",
							"get values()",
							"get is3D()",
							"isZero()",
							"toString(rUnit)",
							"coord =>",
							"toSource()",
							"coord =>",
							"accumulate(other)",
							"static convertAngle(angle, unit)",
							"Rotation",
							"Translation",
							"constructor(...args)",
							"a =>",
							"get values()",
							"isZero()",
							"invert()",
							"accumulate(other)",
							"Translation",
							"Scaling",
							"constructor(...args)",
							"get values()",
							"isZero()",
							"toString()",
							"invert()",
							"accumulate(other)",
							"Scaling",
							"MatrixTransformation",
							"constructor(init)",
							"get values()",
							"toString()",
							"invert()",
							"isZero()",
							"accumulate(other)",
							"MatrixTransformation",
							"TransformationList",
							"constructor(init, tUnit, rUnit)",
							"initialize(init)",
							"TransformationList",
							"TransformationList",
							"fromString(str)",
							"fromArray(arr)",
							"get translationUnit()",
							"set translationUnit(value)",
							"get rotationUnit()",
							"set rotationUnit(value)",
							"static fromString(str)",
							"static fromArray(arr)",
							"static fromMatrix(matrix)",
							"toArray()",
							"toArray()",
							"push(...args)",
							"clone()",
							"t =>",
							"map(fn)",
							"slice(...args)",
							"splice(...args)",
							"concat(...args)",
							"filter(pred)",
							"baseCall(c = Array.prototype.map)",
							" (...args) =>",
							"unshift(...args)",
							"rotate(...args)",
							"translate(x, y)",
							"t =>",
							"scale(...args)",
							"matrix(...args)",
							"toString(tUnit, rUnit)",
							" t =>",
							"toDOM()",
							"toSource()",
							"t =>",
							"toMatrices()",
							" t =>",
							"undo()",
							"merge(...args)",
							"TransformationList",
							"decompose(degrees = true, transformationList = true)",
							".toArray = function toArray()",
							"findLastIndex(predicate)",
							"findLast(predicate)",
							"get rotation()",
							"item =>",
							"set rotation(value)",
							"item =>",
							"get scaling()",
							"item =>",
							"set scaling(value)",
							"item =>",
							"get translation()",
							"item =>",
							"set translation(value)",
							"item =>",
							"get last()",
							"get first()",
							"at(pos)",
							"collapse()",
							"collapseAll()",
							"get angle()",
							"invert()",
							"(acc, t) =>",
							"join(sep = ' ')",
							"clear()",
							"apply(obj, round = true)",
							"TransformationList",
							"TransformationList",
							"ImmutableTransformationList.prototype.rotate = function(...args)",
							"ImmutableTransformationList.prototype.translate = function(...args)",
							"ImmutableTransformationList.prototype.scale = function(...args)",
							" () =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAABQAAICAgKCkgPT4KICBzZXREZWJ1ZyA9IHN0YXRlID0+CiAgICgpID0+CkVzY2FwZUNsYXNzTmFtZSA9IG5hbWUgPT4KVW5lc2NhcGVDbGFzc05hbWUgPSBuYW1lID0+CkxheWVyVG9DbGFzcyA9IGxheWVyID0+CkVsZW1lbnRUb0NsYXNzID0gKGVsZW1lbnQsIGxheWVyTmFtZSkgPT4KQ2xhbXBBbmdsZSA9IChhLCBtb2QgPSAzNjApID0+CkFsaWdubWVudEFuZ2xlID0gYSA9PgpNYWtlUm90YXRpb24gPSAocm90LCBmID0gMSkgPT4KRXh0cmFjdFJvdGF0aW9uID0gdHJhbnNmb3JtYXRpb24gPT4KICB0ID0+CkluZmVyUm90YXRpb24gPSB0cmFuc2Zvcm1hdGlvbiA9PgogIHQgPT4KQWxpZ25tZW50ID0gKGFsaWduLCByb3QgPSAwLCBzY2FsaW5nID0gbnVsbCwgZGVmID0gJ2JvdHRvbS1sZWZ0JykgPT4KQWxpZ25tZW50QXR0cnMgPSAoYWxpZ24sIGh2ID0gSE9SSVpPTlRBTF9WRVJUSUNBTCwgcm90ID0gMCkgPT4KUm90YXRlVHJhbnNmb3JtYXRpb24gPSAocm90LCBmID0gMSkgPT4KTGF5ZXJBdHRyaWJ1dGVzID0gbGF5ZXIgPT4KSW52ZXJ0WSA9IGl0ZW0gPT4KUG9sYXJUb0NhcnRlc2lhbiA9IChbcmFkaXVzLCBhbmdsZV0sIG9yaWdpbiA9IHsgeDogMCwgeTogMCB9KSA9PgpDYXJ0ZXNpYW5Ub1BvbGFyID0gKHsgeCwgeSB9LCBvcmlnaW4gPSB7IHg6IDAsIHk6IDAgfSkgPT4KUmVuZGVyQXJjID0gKHgsIHksIHJhZGl1cywgc3RhcnRBbmdsZSwgZW5kQW5nbGUpID0+ClJlbmRlckFyY1RvID0gKGRpc3RhbmNlLCByYWRpdXMsIHRoZXRhLCBzd2VlcCwgdG8pID0+ClJlbmRlckFyY0Zyb21UbyA9IChzdGFydCwgcmFkaXVzLCB0aGV0YSwgZW5kKSA9PgpDYWxjdWxhdGVBcmNSYWRpdXMgPSAoZCwgYW5nbGUpID0+CkxpbmVzVG9QYXRoKGxpbmVzLCBsaW5lRm4pCihwb2ludCwgY3VydmUpID0+CiAgbGluZUZuID0gKHBvaW50LCBjdXJ2ZSkgPT4KICBsaW5lVG8gPSAoLi4uYXJncykgPT4KTWFrZUNvb3JkVHJhbnNmb3JtZXIobWF0cml4KQogICBvYmogPT4KICAgb2JqID0+CihhY2MsIGspID0+CihhY2MsIGspID0+CiAgdXNlQXR0cmlidXRlcyA9IChlbGVtZW50LCBhdHRyaWJ1dGVOYW1lcykgPT4KICB1c2VUcmFuc2Zvcm1hdGlvbiA9IHRyYW5zZm9ybWF0aW9uID0+CiAgdXNlVHJhbnNmb3JtID0gKHsgdHJhbnNmb3JtLCB0cmFuc2Zvcm1hdGlvbiwgLi4ucHJvcHMgfSkgPT4KICBhY2N1bXVsYXRlKG9wdHMgPSB7fSkKUmVuZGVyU2hhcGUgPSAoc2hhcGUsIHJvLCByaSkgPT4KICBwID0+CiAgcCA9PgoocCwgaSkgPT4KICBpID0+CiAgcCA9PgoocCwgaSkgPT4AAAAAAAAAAIoJAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					3135,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/components/text.js",
						"symkeys":
						[
							[
								412,
								509
							],
							[
								1585,
								1589
							]
						],
						"symlist":
						[
							"Text = ({ x, y, text, color, alignment, rot, visible, className, opts = {}, style, ...props }) =>",
							"t =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACKCQAAVHJhbnNmb3JtYXRpb24KICBjb25zdHJ1Y3Rvcih0cmFuc2Zvcm1hdGlvbikKICBnZXQgdHlwZSgpClRyYW5zZm9ybWF0aW9uTGlzdAogIGdldCBheGVzKCkKICBheGlzID0+CiAgZ2V0IHByb3BzKCkKICBrZXkgPT4KICBoYXMoYXhpcykKICBnZXQgaXMzRCgpCiAgZW50cmllcygpCiAgcHJvcCA9PgogIHRvSlNPTigpCiAgdmVjdG9yKHVuaXQpCiAgIGF4aXMgPT4KICAgYXhpcyA9PgogIHRvU3RyaW5nKHRVbml0KQogIGNsb25lKCkKKGFjYywgcHJvcCkgPT4KICBzdGF0aWMgZnJvbVN0cmluZyhhcmcpCiAgYXJnID0+CiAgYXJnID0+CiAgc3RhdGljIGdldCByb3RhdGlvbigpCiAgc3RhdGljIGdldCB0cmFuc2xhdGlvbigpCiAgc3RhdGljIGdldCBzY2FsaW5nKCkKICBzdGF0aWMgZ2V0IG1hdHJpeCgpCiAgdmFsdWUoaW5zdCkKICAgY3RvciA9PgogIGN0b3IKUm90YXRpb24KICBjb25zdHJ1Y3RvcihhbmdsZSwgeCwgeSkKICBpbnZlcnQoKQogIGdldCB2YWx1ZXMoKQogIGdldCBpczNEKCkKICBpc1plcm8oKQogIHRvU3RyaW5nKHJVbml0KQogIGNvb3JkID0+CiAgdG9Tb3VyY2UoKQogIGNvb3JkID0+CiAgYWNjdW11bGF0ZShvdGhlcikKICBzdGF0aWMgY29udmVydEFuZ2xlKGFuZ2xlLCB1bml0KQpSb3RhdGlvbgpUcmFuc2xhdGlvbgogIGNvbnN0cnVjdG9yKC4uLmFyZ3MpCiAgYSA9PgogIGdldCB2YWx1ZXMoKQogIGlzWmVybygpCiAgaW52ZXJ0KCkKICBhY2N1bXVsYXRlKG90aGVyKQpUcmFuc2xhdGlvbgpTY2FsaW5nCiAgY29uc3RydWN0b3IoLi4uYXJncykKICBnZXQgdmFsdWVzKCkKICBpc1plcm8oKQogIHRvU3RyaW5nKCkKICBpbnZlcnQoKQogIGFjY3VtdWxhdGUob3RoZXIpClNjYWxpbmcKTWF0cml4VHJhbnNmb3JtYXRpb24KICBjb25zdHJ1Y3Rvcihpbml0KQogIGdldCB2YWx1ZXMoKQogIHRvU3RyaW5nKCkKICBpbnZlcnQoKQogIGlzWmVybygpCiAgYWNjdW11bGF0ZShvdGhlcikKTWF0cml4VHJhbnNmb3JtYXRpb24KVHJhbnNmb3JtYXRpb25MaXN0CiAgY29uc3RydWN0b3IoaW5pdCwgdFVuaXQsIHJVbml0KQogIGluaXRpYWxpemUoaW5pdCkKVHJhbnNmb3JtYXRpb25MaXN0ClRyYW5zZm9ybWF0aW9uTGlzdAogIGZyb21TdHJpbmcoc3RyKQogIGZyb21BcnJheShhcnIpCiAgZ2V0IHRyYW5zbGF0aW9uVW5pdCgpCiAgc2V0IHRyYW5zbGF0aW9uVW5pdCh2YWx1ZSkKICBnZXQgcm90YXRpb25Vbml0KCkKICBzZXQgcm90YXRpb25Vbml0KHZhbHVlKQogIHN0YXRpYyBmcm9tU3RyaW5nKHN0cikKICBzdGF0aWMgZnJvbUFycmF5KGFycikKICBzdGF0aWMgZnJvbU1hdHJpeChtYXRyaXgpCiAgdG9BcnJheSgpCiAgdG9BcnJheSgpCiAgcHVzaCguLi5hcmdzKQogIGNsb25lKCkKICB0ID0+CiAgbWFwKGZuKQogIHNsaWNlKC4uLmFyZ3MpCiAgc3BsaWNlKC4uLmFyZ3MpCiAgY29uY2F0KC4uLmFyZ3MpCiAgZmlsdGVyKHByZWQpCiAgYmFzZUNhbGwoYyA9IEFycmF5LnByb3RvdHlwZS5tYXApCiAgICguLi5hcmdzKSA9PgogIHVuc2hpZnQoLi4uYXJncykKICByb3RhdGUoLi4uYXJncykKICB0cmFuc2xhdGUoeCwgeSkKICB0ID0+CiAgc2NhbGUoLi4uYXJncykKICBtYXRyaXgoLi4uYXJncykKICB0b1N0cmluZyh0VW5pdCwgclVuaXQpCiAgIHQgPT4KICB0b0RPTSgpCiAgdG9Tb3VyY2UoKQogIHQgPT4KICB0b01hdHJpY2VzKCkKICAgdCA9PgogIHVuZG8oKQogIG1lcmdlKC4uLmFyZ3MpClRyYW5zZm9ybWF0aW9uTGlzdAogIGRlY29tcG9zZShkZWdyZWVzID0gdHJ1ZSwgdHJhbnNmb3JtYXRpb25MaXN0ID0gdHJ1ZSkKICAudG9BcnJheSA9IGZ1bmN0aW9uIHRvQXJyYXkoKQogIGZpbmRMYXN0SW5kZXgocHJlZGljYXRlKQogIGZpbmRMYXN0KHByZWRpY2F0ZSkKICBnZXQgcm90YXRpb24oKQogIGl0ZW0gPT4KICBzZXQgcm90YXRpb24odmFsdWUpCiAgaXRlbSA9PgogIGdldCBzY2FsaW5nKCkKICBpdGVtID0+CiAgc2V0IHNjYWxpbmcodmFsdWUpCiAgaXRlbSA9PgogIGdldCB0cmFuc2xhdGlvbigpCiAgaXRlbSA9PgogIHNldCB0cmFuc2xhdGlvbih2YWx1ZSkKICBpdGVtID0+CiAgZ2V0IGxhc3QoKQogIGdldCBmaXJzdCgpCiAgYXQocG9zKQogIGNvbGxhcHNlKCkKICBjb2xsYXBzZUFsbCgpCiAgZ2V0IGFuZ2xlKCkKICBpbnZlcnQoKQooYWNjLCB0KSA9PgogIGpvaW4oc2VwID0gJyAnKQogIGNsZWFyKCkKICBhcHBseShvYmosIHJvdW5kID0gdHJ1ZSkKVHJhbnNmb3JtYXRpb25MaXN0ClRyYW5zZm9ybWF0aW9uTGlzdApJbW11dGFibGVUcmFuc2Zvcm1hdGlvbkxpc3QucHJvdG90eXBlLnJvdGF0ZSA9IGZ1bmN0aW9uKC4uLmFyZ3MpCkltbXV0YWJsZVRyYW5zZm9ybWF0aW9uTGlzdC5wcm90b3R5cGUudHJhbnNsYXRlID0gZnVuY3Rpb24oLi4uYXJncykKSW1tdXRhYmxlVHJhbnNmb3JtYXRpb25MaXN0LnByb3RvdHlwZS5zY2FsZSA9IGZ1bmN0aW9uKC4uLmFyZ3MpCiAgICgpID0+AAAAAAAAAABoAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					3136,
					5,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/components/text.js",
						"symkeys":
						[
							[
								412,
								509
							],
							[
								1585,
								1589
							]
						],
						"symlist":
						[
							"Text = ({ x, y, text, color, alignment, rot, visible, className, opts = {}, style, ...props }) =>",
							"t =>"
						]
					},
					"CgAAAAAAAAAAAAAAAAAAAAAAAABoAAAAVGV4dCA9ICh7IHgsIHksIHRleHQsIGNvbG9yLCBhbGlnbm1lbnQsIHJvdCwgdmlzaWJsZSwgY2xhc3NOYW1lLCBvcHRzID0ge30sIHN0eWxlLCAuLi5wcm9wcyB9KSA9PgogIHQgPT4AAAAAAAAAAGgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABoAAAAVGV4dCA9ICh7IHgsIHksIHRleHQsIGNvbG9yLCBhbGlnbm1lbnQsIHJvdCwgdmlzaWJsZSwgY2xhc3NOYW1lLCBvcHRzID0ge30sIHN0eWxlLCAuLi5wcm9wcyB9KSA9PgogIHQgPT4AAAAAAAAAAGgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABoAAAAVGV4dCA9ICh7IHgsIHksIHRleHQsIGNvbG9yLCBhbGlnbm1lbnQsIHJvdCwgdmlzaWJsZSwgY2xhc3NOYW1lLCBvcHRzID0ge30sIHN0eWxlLCAuLi5wcm9wcyB9KSA9PgogIHQgPT4AAAAAAAAAAGgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABoAAAAVGV4dCA9ICh7IHgsIHksIHRleHQsIGNvbG9yLCBhbGlnbm1lbnQsIHJvdCwgdmlzaWJsZSwgY2xhc3NOYW1lLCBvcHRzID0ge30sIHN0eWxlLCAuLi5wcm9wcyB9KSA9PgogIHQgPT4AAAAAAAAAAGgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABoAAAAVGV4dCA9ICh7IHgsIHksIHRleHQsIGNvbG9yLCBhbGlnbm1lbnQsIHJvdCwgdmlzaWJsZSwgY2xhc3NOYW1lLCBvcHRzID0ge30sIHN0eWxlLCAuLi5wcm9wcyB9KSA9PgogIHQgPT4AAAAAAAAAAGgAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					3137,
					3,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/components/text.js",
						"symkeys":
						[
							[
								412,
								509
							],
							[
								1585,
								1589
							]
						],
						"symlist":
						[
							"Text = ({ x, y, text, color, alignment, rot, visible, className, opts = {}, style, ...props }) =>",
							"t =>"
						]
					},
					"BgAAAAAAAAAAAAAAAAAAAAAAAABoAAAAVGV4dCA9ICh7IHgsIHksIHRleHQsIGNvbG9yLCBhbGlnbm1lbnQsIHJvdCwgdmlzaWJsZSwgY2xhc3NOYW1lLCBvcHRzID0ge30sIHN0eWxlLCAuLi5wcm9wcyB9KSA9PgogIHQgPT4AAAAAAAAAAGgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABoAAAAVGV4dCA9ICh7IHgsIHksIHRleHQsIGNvbG9yLCBhbGlnbm1lbnQsIHJvdCwgdmlzaWJsZSwgY2xhc3NOYW1lLCBvcHRzID0ge30sIHN0eWxlLCAuLi5wcm9wcyB9KSA9PgogIHQgPT4AAAAAAAAAAGgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABoAAAAVGV4dCA9ICh7IHgsIHksIHRleHQsIGNvbG9yLCBhbGlnbm1lbnQsIHJvdCwgdmlzaWJsZSwgY2xhc3NOYW1lLCBvcHRzID0ge30sIHN0eWxlLCAuLi5wcm9wcyB9KSA9PgogIHQgPT4AAAAAAAAAAGgAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					3138,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/components/text.js",
						"symkeys":
						[
							[
								412,
								509
							],
							[
								1585,
								1589
							]
						],
						"symlist":
						[
							"Text = ({ x, y, text, color, alignment, rot, visible, className, opts = {}, style, ...props }) =>",
							"t =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABoAAAAVGV4dCA9ICh7IHgsIHksIHRleHQsIGNvbG9yLCBhbGlnbm1lbnQsIHJvdCwgdmlzaWJsZSwgY2xhc3NOYW1lLCBvcHRzID0ge30sIHN0eWxlLCAuLi5wcm9wcyB9KSA9PgogIHQgPT4AAAAAAAAAAGgAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					3139,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/components/text.js",
						"symkeys":
						[
							[
								412,
								509
							],
							[
								1585,
								1589
							]
						],
						"symlist":
						[
							"Text = ({ x, y, text, color, alignment, rot, visible, className, opts = {}, style, ...props }) =>",
							"t =>"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAABoAAAAVGV4dCA9ICh7IHgsIHksIHRleHQsIGNvbG9yLCBhbGlnbm1lbnQsIHJvdCwgdmlzaWJsZSwgY2xhc3NOYW1lLCBvcHRzID0ge30sIHN0eWxlLCAuLi5wcm9wcyB9KSA9PgogIHQgPT4AAAAAAAAAAGgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABoAAAAVGV4dCA9ICh7IHgsIHksIHRleHQsIGNvbG9yLCBhbGlnbm1lbnQsIHJvdCwgdmlzaWJsZSwgY2xhc3NOYW1lLCBvcHRzID0ge30sIHN0eWxlLCAuLi5wcm9wcyB9KSA9PgogIHQgPT4AAAAAAAAAAGgAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					3140,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/components/text.js",
						"symkeys":
						[
							[
								412,
								509
							],
							[
								1585,
								1589
							]
						],
						"symlist":
						[
							"Text = ({ x, y, text, color, alignment, rot, visible, className, opts = {}, style, ...props }) =>",
							"t =>"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAABoAAAAVGV4dCA9ICh7IHgsIHksIHRleHQsIGNvbG9yLCBhbGlnbm1lbnQsIHJvdCwgdmlzaWJsZSwgY2xhc3NOYW1lLCBvcHRzID0ge30sIHN0eWxlLCAuLi5wcm9wcyB9KSA9PgogIHQgPT4AAAAAAAAAAGgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABoAAAAVGV4dCA9ICh7IHgsIHksIHRleHQsIGNvbG9yLCBhbGlnbm1lbnQsIHJvdCwgdmlzaWJsZSwgY2xhc3NOYW1lLCBvcHRzID0ge30sIHN0eWxlLCAuLi5wcm9wcyB9KSA9PgogIHQgPT4AAAAAAAAAAGgAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					3141,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/components/text.js",
						"symkeys":
						[
							[
								412,
								509
							],
							[
								1533,
								1537
							]
						],
						"symlist":
						[
							"Text = ({ x, y, text, color, alignment, rot, visible, className, opts = {}, style, ...props }) =>",
							"t =>"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAABoAAAAVGV4dCA9ICh7IHgsIHksIHRleHQsIGNvbG9yLCBhbGlnbm1lbnQsIHJvdCwgdmlzaWJsZSwgY2xhc3NOYW1lLCBvcHRzID0ge30sIHN0eWxlLCAuLi5wcm9wcyB9KSA9PgogIHQgPT4AAAAAAAAAAGgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABoAAAAVGV4dCA9ICh7IHgsIHksIHRleHQsIGNvbG9yLCBhbGlnbm1lbnQsIHJvdCwgdmlzaWJsZSwgY2xhc3NOYW1lLCBvcHRzID0ge30sIHN0eWxlLCAuLi5wcm9wcyB9KSA9PgogIHQgPT4AAAAAAAAAAGgAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					3142,
					3,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/components/text.js",
						"symkeys":
						[
							[
								412,
								509
							],
							[
								1533,
								1537
							]
						],
						"symlist":
						[
							"Text = ({ x, y, text, color, alignment, rot, visible, className, opts = {}, style, ...props }) =>",
							"t =>"
						]
					},
					"BgAAAAAAAAAAAAAAAAAAAAAAAABoAAAAVGV4dCA9ICh7IHgsIHksIHRleHQsIGNvbG9yLCBhbGlnbm1lbnQsIHJvdCwgdmlzaWJsZSwgY2xhc3NOYW1lLCBvcHRzID0ge30sIHN0eWxlLCAuLi5wcm9wcyB9KSA9PgogIHQgPT4AAAAAAAAAAGgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABoAAAAVGV4dCA9ICh7IHgsIHksIHRleHQsIGNvbG9yLCBhbGlnbm1lbnQsIHJvdCwgdmlzaWJsZSwgY2xhc3NOYW1lLCBvcHRzID0ge30sIHN0eWxlLCAuLi5wcm9wcyB9KSA9PgogIHQgPT4AAAAAAAAAAGgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABoAAAAVGV4dCA9ICh7IHgsIHksIHRleHQsIGNvbG9yLCBhbGlnbm1lbnQsIHJvdCwgdmlzaWJsZSwgY2xhc3NOYW1lLCBvcHRzID0ge30sIHN0eWxlLCAuLi5wcm9wcyB9KSA9PgogIHQgPT4AAAAAAAAAAGgAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					3143,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/components/text.js",
						"symkeys":
						[
							[
								412,
								509
							],
							[
								1533,
								1537
							]
						],
						"symlist":
						[
							"Text = ({ x, y, text, color, alignment, rot, visible, className, opts = {}, style, ...props }) =>",
							"t =>"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAABoAAAAVGV4dCA9ICh7IHgsIHksIHRleHQsIGNvbG9yLCBhbGlnbm1lbnQsIHJvdCwgdmlzaWJsZSwgY2xhc3NOYW1lLCBvcHRzID0ge30sIHN0eWxlLCAuLi5wcm9wcyB9KSA9PgogIHQgPT4AAAAAAAAAAGgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABoAAAAVGV4dCA9ICh7IHgsIHksIHRleHQsIGNvbG9yLCBhbGlnbm1lbnQsIHJvdCwgdmlzaWJsZSwgY2xhc3NOYW1lLCBvcHRzID0ge30sIHN0eWxlLCAuLi5wcm9wcyB9KSA9PgogIHQgPT4AAAAAAAAAAGgAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "lib/eagle/components/text.js",
			"settings":
			{
				"buffer_size": 2593,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					2,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABJCgAAaW1wb3J0IHttb2R9IGZyb20gJy4uL21pc2MuanMnOwppbXBvcnQgeyBoLCBGcmFnbWVudCwgQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vZG9tL3ByZWFjdENvbXBvbmVudC5qcyc7CmltcG9ydCB7IE1ha2VSb3RhdGlvbiwgQWxpZ25tZW50LCBBbGlnbm1lbnRBdHRycywgVkVSVElDQUwsIEhPUklaT05UQUwsIGxvZywgUkFEMkRFRywgREVHMlJBRCwgdXNlVHJhbnNmb3JtYXRpb24gfSBmcm9tICcuLi9yZW5kZXJVdGlscy5qcyc7CmltcG9ydCB7IFRyYW5zZm9ybWF0aW9uTGlzdCwgUm90YXRpb24sIFRyYW5zbGF0aW9uIH0gZnJvbSAnLi4vLi4vZ2VvbS5qcyc7CmltcG9ydCB7IENyb3NzIH0gZnJvbSAnLi9jcm9zcy5qcyc7CgpleHBvcnQgY29uc3QgVGV4dCA9ICh7IHgsIHksIHRleHQsIGNvbG9yLCBhbGlnbm1lbnQsIHJvdCwgdmlzaWJsZSwgY2xhc3NOYW1lLCBvcHRzID0ge30sIHN0eWxlLCAuLi5wcm9wcyB9KSA9PiB7CiAgbGV0IHRyYW5zZm9ybWF0aW9uMiA9IHVzZVRyYW5zZm9ybWF0aW9uKHByb3BzLnRyYW5zZm9ybWF0aW9uKTsKCiAgbGV0IHsgdHJhbnNmb3JtYXRpb24gPSBuZXcgVHJhbnNmb3JtYXRpb25MaXN0KCkgfSA9IG9wdHM7CiAgbGV0IGVsZW1lbnRUcmFuc2Zvcm0gPSB0cmFuc2Zvcm1hdGlvbi5zbGljZSh0cmFuc2Zvcm1hdGlvbi5maW5kSW5kZXgoaXRlbSA9PiBpdGVtLnR5cGUuc3RhcnRzV2l0aCgnc2NhbCcpKSArIDEpOwogIGxldCBwYXJlbnRBbmdsZSA9IE1hdGgucm91bmQoZWxlbWVudFRyYW5zZm9ybS5hbmdsZSAqIFJBRDJERUcpOwogIGxvZyhgVGV4dC5yZW5kZXJgLCB7CiAgICB0ZXh0LAogICAgcGFyZW50QW5nbGUsCiAgICB0cmFuc2Zvcm1hdGlvbjIsCiAgICB4LAogICAgeSwKICAgIGFsaWdubWVudCwKICAgIHJvdAogIH0pOwoKICBsZXQgcm90YXRpb24gPSBNYWtlUm90YXRpb24ocm90KTsKICBsZXQgcm90YXRpb25BbmdsZSA9IE1hdGgucm91bmQocm90YXRpb24uYW5nbGUgKiBSQUQyREVHKTsKICBsZXQgdG90YWxBbmdsZSA9IG1vZChwYXJlbnRBbmdsZSArIHJvdGF0aW9uQW5nbGUsIDE4MCk7CiAgbGV0IHJlYWxBbmdsZSA9IG1vZCh0b3RhbEFuZ2xlIC0gcGFyZW50QW5nbGUsIDM2MCk7CiAgbGV0IGRpZmZBbmdsZSA9IG1vZCgtcm90YXRpb25BbmdsZSArIHJlYWxBbmdsZSwgMzYwKTsKCiAgbGV0IHRyYW5zZm9ybSA9IG5ldyBUcmFuc2Zvcm1hdGlvbkxpc3QoKQogICAgLnRyYW5zbGF0ZSh4LCB5KQogICAgLmNvbmNhdCh0cmFuc2Zvcm1hdGlvbi5zY2FsaW5nID8gW3RyYW5zZm9ybWF0aW9uLmZpbmQodCA9PiB0LnR5cGUgPT0gJ3NjYWxlJyldIDogW10pCiAgICAvLyAgLmNvbmNhdCh0cmFuc2Zvcm1hdGlvbi5yb3RhdGlvbiA/IFt0cmFuc2Zvcm1hdGlvbi5yb3RhdGlvbi5pbnZlcnQoKV0gOiBbXSkKICAgIC5yb3RhdGUoLXJlYWxBbmdsZSAlIDE4MCk7CgogIGxldCB7IHNjYWxpbmcgfSA9IGVsZW1lbnRUcmFuc2Zvcm07CiAgbGV0IGFsaWduID0gQWxpZ25tZW50KGFsaWdubWVudCwgZGlmZkFuZ2xlLCBzY2FsaW5nKTsKICAvL2xvZyhgVGV4dC5yZW5kZXJgLCB7IHRleHQsIHBhcmVudEFuZ2xlLCByb3RhdGlvbkFuZ2xlLCB0b3RhbEFuZ2xlLCByZWFsQW5nbGUsIGRpZmZBbmdsZSwgdHJhbnNmb3JtLCBhbGlnbiB9KTsKICBsb2coYFRleHQucmVuZGVyYCwgeyBhbGlnbm1lbnQsIGFsaWduLCBzY2FsaW5nLCBlbGVtZW50VHJhbnNmb3JtIH0pOwoKICAvL2FsaWduID0gYWxpZ24ucm90YXRlKGRpZmZBbmdsZSAqIERFRzJSQUQpOwogIGFsaWduID0gYWxpZ24ucm91bmQoKTsKCiAgLy9sb2coJ1RleHQucmVuZGVyJywgdGV4dCk7CgogIGlmKGFsaWduLnkgPT0gMCkgdHJhbnNmb3JtID0gdHJhbnNmb3JtLmNvbmNhdChuZXcgVHJhbnNsYXRpb24oMCwgKzAuMTEpKTsKCiAgdGV4dCA9ICh0ZXh0ICsgJycpLnJlcGxhY2UoL86pL2csICcmI3gyMTI2OycpLnJlcGxhY2UoL868L2csICcmI3hiNTsnKTsKICBsb2coYFRleHQucmVuZGVyYCwgY29uc29sZS5jb25maWcoeyBjb21wYWN0OiAyIH0pLCB7IHRyYW5zZm9ybWF0aW9uLCB0cmFuc2Zvcm0sIHRleHQsIGFsaWduIH0pOwoKICB2aXNpYmxlID0gdHJ1ZTsKCiAgcmV0dXJuIGgoRnJhZ21lbnQsIHt9LCBbCiAgICBoKAogICAgICAndGV4dCcsCiAgICAgIHsKICAgICAgICBjbGFzc05hbWUsCiAgICAgICAgZmlsbDogY29sb3IsCiAgICAgICAgc3Ryb2tlOiAnbm9uZScsCiAgICAgICAgJ3N0cm9rZS13aWR0aCc6IDAuMDUsCiAgICAgICAgc3R5bGU6IHZpc2libGUgPyB7IC4uLnN0eWxlIH0gOiB7IC4uLnN0eWxlLCBkaXNwbGF5OiAnbm9uZScgfSwKICAgICAgICAuLi5BbGlnbm1lbnRBdHRycyhhbGlnbiwgVkVSVElDQUwpLAogICAgICAgIC4uLnByb3BzLAogICAgICAgIHRyYW5zZm9ybQogICAgICB9LAogICAgICBoKAogICAgICAgICd0c3BhbicsCiAgICAgICAgewogICAgICAgICAgLi4uQWxpZ25tZW50QXR0cnMoYWxpZ24sIEhPUklaT05UQUwpLAogICAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6IHsgX19odG1sOiB0ZXh0IH0KICAgICAgICB9IC8qLCBoKEZyYWdtZW50LCB7fSwgW3RleHRdKSovCiAgICAgICkKICAgICkKICAgIC8vICAgIGgoQ3Jvc3MsIHsgeCwgeSwgcmFkaXVzOiAxLjI3IC8gNCB9KQogIF0pOwp9OwoAAAAAAAAAAEwKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9AAAAAAAAAD0AAAAAAAAAAAAAAAAAAAA"
				],
				[
					44,
					1,
					"paste",
					null,
					"AQAAAFoCAAAAAAAAzAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWgIAAAAAAABaAgAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": "co"
					},
					"AwAAAFwCAAAAAAAAXQIAAAAAAAAAAAAAXQIAAAAAAABdAgAAAAAAAAIAAAAvL10CAAAAAAAAXgIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXgIAAAAAAABcAgAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": " n"
					},
					"AgAAAF4CAAAAAAAAXwIAAAAAAAAAAAAAXwIAAAAAAABgAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXgIAAAAAAABeAgAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					2,
					"left_delete",
					null,
					"AgAAAF8CAAAAAAAAXwIAAAAAAAABAAAAbl4CAAAAAAAAXgIAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAYAIAAAAAAABgAgAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": "ns0ol"
					},
					"BQAAAF4CAAAAAAAAXwIAAAAAAAAAAAAAXwIAAAAAAABgAgAAAAAAAAAAAABgAgAAAAAAAGECAAAAAAAAAAAAAGECAAAAAAAAYgIAAAAAAAAAAAAAYgIAAAAAAABjAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXgIAAAAAAABeAgAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					3,
					"left_delete",
					null,
					"AwAAAGICAAAAAAAAYgIAAAAAAAABAAAAbGECAAAAAAAAYQIAAAAAAAABAAAAb2ACAAAAAAAAYAIAAAAAAAABAAAAMA",
					"AQAAAAAAAAABAAAAYwIAAAAAAABjAgAAAAAAAAAAAAAAAPC/"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": "ole."
					},
					"BAAAAGACAAAAAAAAYQIAAAAAAAAAAAAAYQIAAAAAAABiAgAAAAAAAAAAAABiAgAAAAAAAGMCAAAAAAAAAAAAAGMCAAAAAAAAZAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYAIAAAAAAABgAgAAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": "tramn"
					},
					"BgAAAHkCAAAAAAAAegIAAAAAAAAAAAAAegIAAAAAAAB6AgAAAAAAAFQAAAB0ZXh0LCBwYXJlbnRBbmdsZSwgcm90YXRpb25BbmdsZSwgdG90YWxBbmdsZSwgcmVhbEFuZ2xlLCBkaWZmQW5nbGUsIHRyYW5zZm9ybSwgYWxpZ256AgAAAAAAAHsCAAAAAAAAAAAAAHsCAAAAAAAAfAIAAAAAAAAAAAAAfAIAAAAAAAB9AgAAAAAAAAAAAAB9AgAAAAAAAH4CAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeQIAAAAAAADNAgAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					2,
					"left_delete",
					null,
					"AgAAAH0CAAAAAAAAfQIAAAAAAAABAAAAbnwCAAAAAAAAfAIAAAAAAAABAAAAbQ",
					"AQAAAAAAAAABAAAAfgIAAAAAAAB+AgAAAAAAAAAAAAAAAPC/"
				],
				[
					59,
					1,
					"insert",
					{
						"characters": "nsformation"
					},
					"CwAAAHwCAAAAAAAAfQIAAAAAAAAAAAAAfQIAAAAAAAB+AgAAAAAAAAAAAAB+AgAAAAAAAH8CAAAAAAAAAAAAAH8CAAAAAAAAgAIAAAAAAAAAAAAAgAIAAAAAAACBAgAAAAAAAAAAAACBAgAAAAAAAIICAAAAAAAAAAAAAIICAAAAAAAAgwIAAAAAAAAAAAAAgwIAAAAAAACEAgAAAAAAAAAAAACEAgAAAAAAAIUCAAAAAAAAAAAAAIUCAAAAAAAAhgIAAAAAAAAAAAAAhgIAAAAAAACHAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfAIAAAAAAAB8AgAAAAAAAAAAAAAAAPC/"
				],
				[
					65,
					1,
					"cut",
					null,
					"AQAAAFwCAAAAAAAAXAIAAAAAAAAwAAAAY29uc29sZS5sb2coYFRleHQucmVuZGVyYCwgeyB0cmFuc2Zvcm1hdGlvbiB9KTsK",
					"AQAAAAAAAAABAAAAXAIAAAAAAACMAgAAAAAAAAAAAAAAAPC/"
				],
				[
					66,
					1,
					"paste",
					null,
					"AQAAAFwCAAAAAAAAjAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXAIAAAAAAABcAgAAAAAAAAAAAAAAAPC/"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAMYFAAAAAAAAxwUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxgUAAAAAAADGBQAAAAAAAAAAAAAAAAAA"
				],
				[
					69,
					1,
					"paste",
					null,
					"AQAAAMcFAAAAAAAA9wUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxwUAAAAAAADHBQAAAAAAAAAAAAAAAPC/"
				],
				[
					82,
					1,
					"paste",
					null,
					"AgAAAOQFAAAAAAAA7QUAAAAAAAAAAAAA7QUAAAAAAADtBQAAAAAAAA4AAAB0cmFuc2Zvcm1hdGlvbg",
					"AQAAAAAAAAABAAAA8gUAAAAAAADkBQAAAAAAAAAAAAAAAPC/"
				],
				[
					87,
					1,
					"insert",
					{
						"characters": "rotation,"
					},
					"CQAAAOQFAAAAAAAA5QUAAAAAAAAAAAAA5QUAAAAAAADmBQAAAAAAAAAAAADmBQAAAAAAAOcFAAAAAAAAAAAAAOcFAAAAAAAA6AUAAAAAAAAAAAAA6AUAAAAAAADpBQAAAAAAAAAAAADpBQAAAAAAAOoFAAAAAAAAAAAAAOoFAAAAAAAA6wUAAAAAAAAAAAAA6wUAAAAAAADsBQAAAAAAAAAAAADsBQAAAAAAAO0FAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5AUAAAAAAADkBQAAAAAAAAAAAAAAAPC/"
				],
				[
					95,
					1,
					"cut",
					null,
					"AQAAAMcFAAAAAAAAxwUAAAAAAAA0AAAAY29uc29sZS5sb2coYFRleHQucmVuZGVyYCwgeyByb3RhdGlvbix0cmFuc2Zvcm0gfSk7Cg",
					"AQAAAAAAAAABAAAAxwUAAAAAAAD7BQAAAAAAAAAAAAAAAAAA"
				],
				[
					96,
					1,
					"paste",
					null,
					"AQAAAMcFAAAAAAAA+wUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxwUAAAAAAADHBQAAAAAAAAAAAAAAAPC/"
				],
				[
					99,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAMwGAAAAAAAAzQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzAYAAAAAAADMBgAAAAAAAAAAAAAAAAAA"
				],
				[
					100,
					1,
					"paste",
					null,
					"AQAAAM0GAAAAAAAAAQcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzQYAAAAAAADNBgAAAAAAAAAAAAAAAPC/"
				],
				[
					109,
					1,
					"paste",
					null,
					"AgAAAOkGAAAAAAAA7gYAAAAAAAAAAAAA7gYAAAAAAADuBgAAAAAAABMAAAAgcm90YXRpb24sdHJhbnNmb3Jt",
					"AQAAAAAAAAABAAAA6QYAAAAAAAD8BgAAAAAAAAAAAAAAAPC/"
				],
				[
					110,
					1,
					"insert",
					{
						"characters": ",m"
					},
					"AgAAAO4GAAAAAAAA7wYAAAAAAAAAAAAA7wYAAAAAAADwBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7gYAAAAAAADuBgAAAAAAAAAAAAAAAPC/"
				],
				[
					111,
					1,
					"left_delete",
					null,
					"AQAAAO8GAAAAAAAA7wYAAAAAAAABAAAAbQ",
					"AQAAAAAAAAABAAAA8AYAAAAAAADwBgAAAAAAAAAAAAAAAPC/"
				],
				[
					112,
					1,
					"insert",
					{
						"characters": "alöig"
					},
					"BQAAAO8GAAAAAAAA8AYAAAAAAAAAAAAA8AYAAAAAAADxBgAAAAAAAAAAAADxBgAAAAAAAPIGAAAAAAAAAAAAAPIGAAAAAAAA8wYAAAAAAAAAAAAA8wYAAAAAAAD0BgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7wYAAAAAAADvBgAAAAAAAAAAAAAAAPC/"
				],
				[
					113,
					3,
					"left_delete",
					null,
					"AwAAAPMGAAAAAAAA8wYAAAAAAAABAAAAZ/IGAAAAAAAA8gYAAAAAAAABAAAAafEGAAAAAAAA8QYAAAAAAAACAAAAw7Y",
					"AQAAAAAAAAABAAAA9AYAAAAAAAD0BgAAAAAAAAAAAAAAAPC/"
				],
				[
					114,
					1,
					"insert",
					{
						"characters": "ignment"
					},
					"BwAAAPEGAAAAAAAA8gYAAAAAAAAAAAAA8gYAAAAAAADzBgAAAAAAAAAAAADzBgAAAAAAAPQGAAAAAAAAAAAAAPQGAAAAAAAA9QYAAAAAAAAAAAAA9QYAAAAAAAD2BgAAAAAAAAAAAAD2BgAAAAAAAPcGAAAAAAAAAAAAAPcGAAAAAAAA+AYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8QYAAAAAAADxBgAAAAAAAAAAAAAAAPC/"
				],
				[
					139,
					1,
					"insert",
					{
						"characters": " m"
					},
					"AgAAAIcCAAAAAAAAiAIAAAAAAAAAAAAAiAIAAAAAAACJAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhwIAAAAAAACHAgAAAAAAAAAAAAAAAPC/"
				],
				[
					140,
					2,
					"left_delete",
					null,
					"AgAAAIgCAAAAAAAAiAIAAAAAAAABAAAAbYcCAAAAAAAAhwIAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAiQIAAAAAAACJAgAAAAAAAAAAAAAAAPC/"
				],
				[
					141,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAIcCAAAAAAAAiAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhwIAAAAAAACHAgAAAAAAAAAAAAAAAPC/"
				],
				[
					142,
					1,
					"paste",
					null,
					"AQAAAIgCAAAAAAAAkQIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiAIAAAAAAACIAgAAAAAAAAAAAAAAAPC/"
				],
				[
					153,
					1,
					"left_delete",
					null,
					"AQAAAPkGAAAAAAAA+QYAAAAAAAAJAAAAYWxpZ25tZW50",
					"AQAAAAAAAAABAAAA+QYAAAAAAAACBwAAAAAAAAAAAAAAAPC/"
				],
				[
					154,
					1,
					"insert",
					{
						"characters": "eleme"
					},
					"BQAAAPkGAAAAAAAA+gYAAAAAAAAAAAAA+gYAAAAAAAD7BgAAAAAAAAAAAAD7BgAAAAAAAPwGAAAAAAAAAAAAAPwGAAAAAAAA/QYAAAAAAAAAAAAA/QYAAAAAAAD+BgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+QYAAAAAAAD5BgAAAAAAAAAAAAAAAPC/"
				],
				[
					155,
					1,
					"insert_completion",
					{
						"completion": "elementTransform",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "elementTransform"
					},
					"AgAAAPkGAAAAAAAA+QYAAAAAAAAFAAAAZWxlbWX5BgAAAAAAAAkHAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/gYAAAAAAAD+BgAAAAAAAAAAAAAAAPC/"
				],
				[
					166,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAHQCAAAAAAAAdQIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdAIAAAAAAAB0AgAAAAAAAAAAAAAAAPC/"
				],
				[
					167,
					1,
					"left_delete",
					null,
					"AQAAAHQCAAAAAAAAdAIAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAdQIAAAAAAAB1AgAAAAAAAAAAAAAAAPC/"
				],
				[
					168,
					1,
					"insert",
					{
						"characters": "(1)"
					},
					"AwAAAHQCAAAAAAAAdQIAAAAAAAAAAAAAdQIAAAAAAAB2AgAAAAAAAAAAAAB2AgAAAAAAAHcCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdAIAAAAAAAB0AgAAAAAAAAAAAAAAAPC/"
				],
				[
					174,
					1,
					"paste",
					null,
					"AQAAAOwFAAAAAAAA7wUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7AUAAAAAAADsBQAAAAAAAAAAAAAAAPC/"
				],
				[
					179,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AgAAAO0FAAAAAAAA7gUAAAAAAAAAAAAA7gUAAAAAAADuBQAAAAAAAAEAAAAx",
					"AQAAAAAAAAABAAAA7QUAAAAAAADuBQAAAAAAAAAAAAAAAPC/"
				],
				[
					182,
					1,
					"paste",
					null,
					"AQAAAPUGAAAAAAAA+AYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9QYAAAAAAAD1BgAAAAAAAAAAAAAAAPC/"
				],
				[
					187,
					1,
					"insert",
					{
						"characters": "3"
					},
					"AgAAAPYGAAAAAAAA9wYAAAAAAAAAAAAA9wYAAAAAAAD3BgAAAAAAAAEAAAAx",
					"AQAAAAAAAAABAAAA9gYAAAAAAAD3BgAAAAAAAAAAAAAAAPC/"
				],
				[
					192,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAACwAAaW1wb3J0IHsgbW9kIH0gZnJvbSAnLi4vLi4vbWlzYy5qcyc7CmltcG9ydCB7IGgsIEZyYWdtZW50LCBDb21wb25lbnQgfSBmcm9tICcuLi8uLi9kb20vcHJlYWN0Q29tcG9uZW50LmpzJzsKaW1wb3J0IHsgTWFrZVJvdGF0aW9uLCBBbGlnbm1lbnQsIEFsaWdubWVudEF0dHJzLCBWRVJUSUNBTCwgSE9SSVpPTlRBTCwgbG9nLCBSQUQyREVHLCBERUcyUkFELCB1c2VUcmFuc2Zvcm1hdGlvbiB9IGZyb20gJy4uL3JlbmRlclV0aWxzLmpzJzsKaW1wb3J0IHsgVHJhbnNmb3JtYXRpb25MaXN0LCBSb3RhdGlvbiwgVHJhbnNsYXRpb24gfSBmcm9tICcuLi8uLi9nZW9tLmpzJzsKaW1wb3J0IHsgQ3Jvc3MgfSBmcm9tICcuL2Nyb3NzLmpzJzsKCmV4cG9ydCBjb25zdCBUZXh0ID0gKHsgeCwgeSwgdGV4dCwgY29sb3IsIGFsaWdubWVudCwgcm90LCB2aXNpYmxlLCBjbGFzc05hbWUsIG9wdHMgPSB7fSwgc3R5bGUsIC4uLnByb3BzIH0pID0+IHsKICBsZXQgdHJhbnNmb3JtYXRpb24yID0gdXNlVHJhbnNmb3JtYXRpb24ocHJvcHMudHJhbnNmb3JtYXRpb24pOwoKICBsZXQgeyB0cmFuc2Zvcm1hdGlvbiA9IG5ldyBUcmFuc2Zvcm1hdGlvbkxpc3QoKSB9ID0gb3B0czsKICAgIGNvbnNvbGUubG9nKGBUZXh0LnJlbmRlcigxKWAsIHsgdHJhbnNmb3JtYXRpb24sYWxpZ25tZW50IH0pOwpsZXQgZWxlbWVudFRyYW5zZm9ybSA9IHRyYW5zZm9ybWF0aW9uLnNsaWNlKHRyYW5zZm9ybWF0aW9uLmZpbmRJbmRleChpdGVtID0+IGl0ZW0udHlwZS5zdGFydHNXaXRoKCdzY2FsJykpICsgMSk7CiAgbGV0IHBhcmVudEFuZ2xlID0gTWF0aC5yb3VuZChlbGVtZW50VHJhbnNmb3JtLmFuZ2xlICogUkFEMkRFRyk7CiAgbG9nKGBUZXh0LnJlbmRlcmAsIHsKICAgIHRleHQsCiAgICBwYXJlbnRBbmdsZSwKICAgIHRyYW5zZm9ybWF0aW9uMiwKICAgIHgsCiAgICB5LAogICAgYWxpZ25tZW50LAogICAgcm90CiAgfSk7CgogIGxldCByb3RhdGlvbiA9IE1ha2VSb3RhdGlvbihyb3QpOwogIGxldCByb3RhdGlvbkFuZ2xlID0gTWF0aC5yb3VuZChyb3RhdGlvbi5hbmdsZSAqIFJBRDJERUcpOwogIGxldCB0b3RhbEFuZ2xlID0gbW9kKHBhcmVudEFuZ2xlICsgcm90YXRpb25BbmdsZSwgMTgwKTsKICBsZXQgcmVhbEFuZ2xlID0gbW9kKHRvdGFsQW5nbGUgLSBwYXJlbnRBbmdsZSwgMzYwKTsKICBsZXQgZGlmZkFuZ2xlID0gbW9kKC1yb3RhdGlvbkFuZ2xlICsgcmVhbEFuZ2xlLCAzNjApOwoKICBsZXQgdHJhbnNmb3JtID0gbmV3IFRyYW5zZm9ybWF0aW9uTGlzdCgpCiAgICAudHJhbnNsYXRlKHgsIHkpCiAgICAuY29uY2F0KHRyYW5zZm9ybWF0aW9uLnNjYWxpbmcgPyBbdHJhbnNmb3JtYXRpb24uZmluZCh0ID0+IHQudHlwZSA9PSAnc2NhbGUnKV0gOiBbXSkKICAgIC8vICAuY29uY2F0KHRyYW5zZm9ybWF0aW9uLnJvdGF0aW9uID8gW3RyYW5zZm9ybWF0aW9uLnJvdGF0aW9uLmludmVydCgpXSA6IFtdKQogICAgLnJvdGF0ZSgtcmVhbEFuZ2xlICUgMTgwKTsKCmNvbnNvbGUubG9nKGBUZXh0LnJlbmRlcigyKWAsIHsgcm90YXRpb24sdHJhbnNmb3JtIH0pOwoKICBsZXQgeyBzY2FsaW5nIH0gPSBlbGVtZW50VHJhbnNmb3JtOwogIGxldCBhbGlnbiA9IEFsaWdubWVudChhbGlnbm1lbnQsIGRpZmZBbmdsZSwgc2NhbGluZyk7CiAgLy9sb2coYFRleHQucmVuZGVyYCwgeyB0ZXh0LCBwYXJlbnRBbmdsZSwgcm90YXRpb25BbmdsZSwgdG90YWxBbmdsZSwgcmVhbEFuZ2xlLCBkaWZmQW5nbGUsIHRyYW5zZm9ybSwgYWxpZ24gfSk7Cgpjb25zb2xlLmxvZyhgVGV4dC5yZW5kZXIoMylgLCB7YWxpZ24sZWxlbWVudFRyYW5zZm9ybSB9KTsKICBsb2coYFRleHQucmVuZGVyYCwgeyBhbGlnbm1lbnQsIGFsaWduLCBzY2FsaW5nLCBlbGVtZW50VHJhbnNmb3JtIH0pOwoKICAvL2FsaWduID0gYWxpZ24ucm90YXRlKGRpZmZBbmdsZSAqIERFRzJSQUQpOwogIGFsaWduID0gYWxpZ24ucm91bmQoKTsKCiAgLy9sb2coJ1RleHQucmVuZGVyJywgdGV4dCk7CgogIGlmKGFsaWduLnkgPT0gMCkgdHJhbnNmb3JtID0gdHJhbnNmb3JtLmNvbmNhdChuZXcgVHJhbnNsYXRpb24oMCwgKzAuMTEpKTsKCiAgdGV4dCA9ICh0ZXh0ICsgJycpLnJlcGxhY2UoL86pL2csICcmI3gyMTI2OycpLnJlcGxhY2UoL868L2csICcmI3hiNTsnKTsKICBsb2coYFRleHQucmVuZGVyYCwgY29uc29sZS5jb25maWcoeyBjb21wYWN0OiAyIH0pLCB7IHRyYW5zZm9ybWF0aW9uLCB0cmFuc2Zvcm0sIHRleHQsIGFsaWduIH0pOwoKICB2aXNpYmxlID0gdHJ1ZTsKCiAgcmV0dXJuIGgoRnJhZ21lbnQsIHt9LCBbCiAgICBoKAogICAgICAndGV4dCcsCiAgICAgIHsKICAgICAgICBjbGFzc05hbWUsCiAgICAgICAgZmlsbDogY29sb3IsCiAgICAgICAgc3Ryb2tlOiAnbm9uZScsCiAgICAgICAgJ3N0cm9rZS13aWR0aCc6IDAuMDUsCiAgICAgICAgc3R5bGU6IHZpc2libGUgPyB7IC4uLnN0eWxlIH0gOiB7IC4uLnN0eWxlLCBkaXNwbGF5OiAnbm9uZScgfSwKICAgICAgICAuLi5BbGlnbm1lbnRBdHRycyhhbGlnbiwgVkVSVElDQUwpLAogICAgICAgIC4uLnByb3BzLAogICAgICAgIHRyYW5zZm9ybQogICAgICB9LAogICAgICBoKAogICAgICAgICd0c3BhbicsCiAgICAgICAgewogICAgICAgICAgLi4uQWxpZ25tZW50QXR0cnMoYWxpZ24sIEhPUklaT05UQUwpLAogICAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6IHsgX19odG1sOiB0ZXh0IH0KICAgICAgICB9IC8qLCBoKEZyYWdtZW50LCB7fSwgW3RleHRdKSovCiAgICAgICkKICAgICkKICAgIC8vICAgIGgoQ3Jvc3MsIHsgeCwgeSwgcmFkaXVzOiAxLjI3IC8gNCB9KQogIF0pOwp9OwoAAAAAAAAAAAYLAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9wYAAAAAAAD3BgAAAAAAAAAAAAAAAPC/"
				],
				[
					195,
					1,
					"insert",
					{
						"characters": "texct"
					},
					"BQAAAHoCAAAAAAAAewIAAAAAAAAAAAAAewIAAAAAAAB8AgAAAAAAAAAAAAB8AgAAAAAAAH0CAAAAAAAAAAAAAH0CAAAAAAAAfgIAAAAAAAAAAAAAfgIAAAAAAAB/AgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAegIAAAAAAAB6AgAAAAAAAAAAAAAAAPC/"
				],
				[
					196,
					2,
					"left_delete",
					null,
					"AgAAAH4CAAAAAAAAfgIAAAAAAAABAAAAdH0CAAAAAAAAfQIAAAAAAAABAAAAYw",
					"AQAAAAAAAAABAAAAfwIAAAAAAAB/AgAAAAAAAAAAAAAAAPC/"
				],
				[
					197,
					1,
					"insert",
					{
						"characters": "t,"
					},
					"AgAAAH0CAAAAAAAAfgIAAAAAAAAAAAAAfgIAAAAAAAB/AgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfQIAAAAAAAB9AgAAAAAAAAAAAAAAAPC/"
				],
				[
					268,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAANCwAAaW1wb3J0IHsgbW9kIH0gZnJvbSAnLi4vLi4vbWlzYy5qcyc7CmltcG9ydCB7IGgsIEZyYWdtZW50LCBDb21wb25lbnQgfSBmcm9tICcuLi8uLi9kb20vcHJlYWN0Q29tcG9uZW50LmpzJzsKaW1wb3J0IHsgTWFrZVJvdGF0aW9uLCBBbGlnbm1lbnQsIEFsaWdubWVudEF0dHJzLCBWRVJUSUNBTCwgSE9SSVpPTlRBTCwgbG9nLCBSQUQyREVHLCBERUcyUkFELCB1c2VUcmFuc2Zvcm1hdGlvbiB9IGZyb20gJy4uL3JlbmRlclV0aWxzLmpzJzsKaW1wb3J0IHsgVHJhbnNmb3JtYXRpb25MaXN0LCBSb3RhdGlvbiwgVHJhbnNsYXRpb24gfSBmcm9tICcuLi8uLi9nZW9tLmpzJzsKaW1wb3J0IHsgQ3Jvc3MgfSBmcm9tICcuL2Nyb3NzLmpzJzsKCmV4cG9ydCBjb25zdCBUZXh0ID0gKHsgeCwgeSwgdGV4dCwgY29sb3IsIGFsaWdubWVudCwgcm90LCB2aXNpYmxlLCBjbGFzc05hbWUsIG9wdHMgPSB7fSwgc3R5bGUsIC4uLnByb3BzIH0pID0+IHsKICBsZXQgdHJhbnNmb3JtYXRpb24yID0gdXNlVHJhbnNmb3JtYXRpb24ocHJvcHMudHJhbnNmb3JtYXRpb24pOwoKICBsZXQgeyB0cmFuc2Zvcm1hdGlvbiA9IG5ldyBUcmFuc2Zvcm1hdGlvbkxpc3QoKSB9ID0gb3B0czsKICBjb25zb2xlLmxvZyhgVGV4dC5yZW5kZXIoMSlgLCB7IHRleHQsdHJhbnNmb3JtYXRpb24sIGFsaWdubWVudCB9KTsKICBsZXQgZWxlbWVudFRyYW5zZm9ybSA9IHRyYW5zZm9ybWF0aW9uLnNsaWNlKHRyYW5zZm9ybWF0aW9uLmZpbmRJbmRleChpdGVtID0+IGl0ZW0udHlwZS5zdGFydHNXaXRoKCdzY2FsJykpICsgMSk7CiAgbGV0IHBhcmVudEFuZ2xlID0gTWF0aC5yb3VuZChlbGVtZW50VHJhbnNmb3JtLmFuZ2xlICogUkFEMkRFRyk7CiAgbG9nKGBUZXh0LnJlbmRlcmAsIHsKICAgIHRleHQsCiAgICBwYXJlbnRBbmdsZSwKICAgIHRyYW5zZm9ybWF0aW9uMiwKICAgIHgsCiAgICB5LAogICAgYWxpZ25tZW50LAogICAgcm90CiAgfSk7CgogIGxldCByb3RhdGlvbiA9IE1ha2VSb3RhdGlvbihyb3QpOwogIGxldCByb3RhdGlvbkFuZ2xlID0gTWF0aC5yb3VuZChyb3RhdGlvbi5hbmdsZSAqIFJBRDJERUcpOwogIGxldCB0b3RhbEFuZ2xlID0gbW9kKHBhcmVudEFuZ2xlICsgcm90YXRpb25BbmdsZSwgMTgwKTsKICBsZXQgcmVhbEFuZ2xlID0gbW9kKHRvdGFsQW5nbGUgLSBwYXJlbnRBbmdsZSwgMzYwKTsKICBsZXQgZGlmZkFuZ2xlID0gbW9kKC1yb3RhdGlvbkFuZ2xlICsgcmVhbEFuZ2xlLCAzNjApOwoKICBsZXQgdHJhbnNmb3JtID0gbmV3IFRyYW5zZm9ybWF0aW9uTGlzdCgpCiAgICAudHJhbnNsYXRlKHgsIHkpCiAgICAuY29uY2F0KHRyYW5zZm9ybWF0aW9uLnNjYWxpbmcgPyBbdHJhbnNmb3JtYXRpb24uZmluZCh0ID0+IHQudHlwZSA9PSAnc2NhbGUnKV0gOiBbXSkKICAgIC8vICAuY29uY2F0KHRyYW5zZm9ybWF0aW9uLnJvdGF0aW9uID8gW3RyYW5zZm9ybWF0aW9uLnJvdGF0aW9uLmludmVydCgpXSA6IFtdKQogICAgLnJvdGF0ZSgtcmVhbEFuZ2xlICUgMTgwKTsKCiAgY29uc29sZS5sb2coYFRleHQucmVuZGVyKDIpYCwgeyByb3RhdGlvbiwgdHJhbnNmb3JtIH0pOwoKICBsZXQgeyBzY2FsaW5nIH0gPSBlbGVtZW50VHJhbnNmb3JtOwogIGxldCBhbGlnbiA9IEFsaWdubWVudChhbGlnbm1lbnQsIGRpZmZBbmdsZSwgc2NhbGluZyk7CiAgLy9sb2coYFRleHQucmVuZGVyYCwgeyB0ZXh0LCBwYXJlbnRBbmdsZSwgcm90YXRpb25BbmdsZSwgdG90YWxBbmdsZSwgcmVhbEFuZ2xlLCBkaWZmQW5nbGUsIHRyYW5zZm9ybSwgYWxpZ24gfSk7CgogIGNvbnNvbGUubG9nKGBUZXh0LnJlbmRlcigzKWAsIHsgYWxpZ24sIGVsZW1lbnRUcmFuc2Zvcm0gfSk7CiAgbG9nKGBUZXh0LnJlbmRlcmAsIHsgYWxpZ25tZW50LCBhbGlnbiwgc2NhbGluZywgZWxlbWVudFRyYW5zZm9ybSB9KTsKCiAgLy9hbGlnbiA9IGFsaWduLnJvdGF0ZShkaWZmQW5nbGUgKiBERUcyUkFEKTsKICBhbGlnbiA9IGFsaWduLnJvdW5kKCk7CgogIC8vbG9nKCdUZXh0LnJlbmRlcicsIHRleHQpOwoKICBpZihhbGlnbi55ID09IDApIHRyYW5zZm9ybSA9IHRyYW5zZm9ybS5jb25jYXQobmV3IFRyYW5zbGF0aW9uKDAsICswLjExKSk7CgogIHRleHQgPSAodGV4dCArICcnKS5yZXBsYWNlKC/OqS9nLCAnJiN4MjEyNjsnKS5yZXBsYWNlKC/OvC9nLCAnJiN4YjU7Jyk7CiAgbG9nKGBUZXh0LnJlbmRlcmAsIGNvbnNvbGUuY29uZmlnKHsgY29tcGFjdDogMiB9KSwgeyB0cmFuc2Zvcm1hdGlvbiwgdHJhbnNmb3JtLCB0ZXh0LCBhbGlnbiB9KTsKCiAgdmlzaWJsZSA9IHRydWU7CgogIHJldHVybiBoKEZyYWdtZW50LCB7fSwgWwogICAgaCgKICAgICAgJ3RleHQnLAogICAgICB7CiAgICAgICAgY2xhc3NOYW1lLAogICAgICAgIGZpbGw6IGNvbG9yLAogICAgICAgIHN0cm9rZTogJ25vbmUnLAogICAgICAgICdzdHJva2Utd2lkdGgnOiAwLjA1LAogICAgICAgIHN0eWxlOiB2aXNpYmxlID8geyAuLi5zdHlsZSB9IDogeyAuLi5zdHlsZSwgZGlzcGxheTogJ25vbmUnIH0sCiAgICAgICAgLi4uQWxpZ25tZW50QXR0cnMoYWxpZ24sIFZFUlRJQ0FMKSwKICAgICAgICAuLi5wcm9wcywKICAgICAgICB0cmFuc2Zvcm0KICAgICAgfSwKICAgICAgaCgKICAgICAgICAndHNwYW4nLAogICAgICAgIHsKICAgICAgICAgIC4uLkFsaWdubWVudEF0dHJzKGFsaWduLCBIT1JJWk9OVEFMKSwKICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiB7IF9faHRtbDogdGV4dCB9CiAgICAgICAgfSAvKiwgaChGcmFnbWVudCwge30sIFt0ZXh0XSkqLwogICAgICApCiAgICApCiAgICAvLyAgICBoKENyb3NzLCB7IHgsIHksIHJhZGl1czogMS4yNyAvIDQgfSkKICBdKTsKfTsKAAAAAAAAAAAMCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4ggAAAAAAADSCgAAAAAAAAAAAAAAAPC/"
				],
				[
					307,
					1,
					"",
					null,
					"BAAAAH8IAAAAAAAAfwgAAAAAAAAIAAAAY29uc29sZS7pBgAAAAAAAOkGAAAAAAAACAAAAGNvbnNvbGUu3QUAAAAAAADdBQAAAAAAAAgAAABjb25zb2xlLloCAAAAAAAAWgIAAAAAAAAIAAAAY29uc29sZS4",
					"AQAAAAAAAAABAAAAWgIAAAAAAABiAgAAAAAAAAAAAAAAAPC/"
				],
				[
					320,
					2,
					"right_delete",
					null,
					"AgAAAGcIAAAAAAAAZwgAAAAAAAAXAAAAY29uZmlnKHsgY29tcGFjdDogMiB9KSxnCAAAAAAAAGcIAAAAAAAAAQAAACA",
					"AQAAAAAAAAABAAAAZwgAAAAAAAB+CAAAAAAAAAAAAAAAAPC/"
				],
				[
					435,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAPYEAAAAAAAA9wQAAAAAAAAAAAAA9wQAAAAAAAD7BAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9gQAAAAAAAD2BAAAAAAAAAAAAAAAADxA"
				],
				[
					437,
					1,
					"insert",
					{
						"characters": ".rotate"
					},
					"BwAAAPYEAAAAAAAA9wQAAAAAAAAAAAAA9wQAAAAAAAD4BAAAAAAAAAAAAAD4BAAAAAAAAPkEAAAAAAAAAAAAAPkEAAAAAAAA+gQAAAAAAAAAAAAA+gQAAAAAAAD7BAAAAAAAAAAAAAD7BAAAAAAAAPwEAAAAAAAAAAAAAPwEAAAAAAAA/QQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9gQAAAAAAAD2BAAAAAAAAAAAAAAAADxA"
				],
				[
					438,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAP0EAAAAAAAA/wQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/QQAAAAAAAD9BAAAAAAAAAAAAAAAAPC/"
				],
				[
					439,
					1,
					"insert",
					{
						"characters": "rotation."
					},
					"CQAAAP4EAAAAAAAA/wQAAAAAAAAAAAAA/wQAAAAAAAAABQAAAAAAAAAAAAAABQAAAAAAAAEFAAAAAAAAAAAAAAEFAAAAAAAAAgUAAAAAAAAAAAAAAgUAAAAAAAADBQAAAAAAAAAAAAADBQAAAAAAAAQFAAAAAAAAAAAAAAQFAAAAAAAABQUAAAAAAAAAAAAABQUAAAAAAAAGBQAAAAAAAAAAAAAGBQAAAAAAAAcFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/gQAAAAAAAD+BAAAAAAAAAAAAAAAAPC/"
				],
				[
					440,
					9,
					"left_delete",
					null,
					"CQAAAAYFAAAAAAAABgUAAAAAAAABAAAALgUFAAAAAAAABQUAAAAAAAABAAAAbgQFAAAAAAAABAUAAAAAAAABAAAAbwMFAAAAAAAAAwUAAAAAAAABAAAAaQIFAAAAAAAAAgUAAAAAAAABAAAAdAEFAAAAAAAAAQUAAAAAAAABAAAAYQAFAAAAAAAAAAUAAAAAAAABAAAAdP8EAAAAAAAA/wQAAAAAAAABAAAAb/4EAAAAAAAA/gQAAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAABwUAAAAAAAAHBQAAAAAAAAAAAAAAAPC/"
				],
				[
					441,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAP0EAAAAAAAA/QQAAAAAAAABAAAAKP0EAAAAAAAA/QQAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAA/gQAAAAAAAD+BAAAAAAAAAAAAAAAAPC/"
				],
				[
					442,
					6,
					"left_delete",
					null,
					"BgAAAPwEAAAAAAAA/AQAAAAAAAABAAAAZfsEAAAAAAAA+wQAAAAAAAABAAAAdPoEAAAAAAAA+gQAAAAAAAABAAAAYfkEAAAAAAAA+QQAAAAAAAABAAAAdPgEAAAAAAAA+AQAAAAAAAABAAAAb/cEAAAAAAAA9wQAAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAA/QQAAAAAAAD9BAAAAAAAAAAAAAAAAPC/"
				],
				[
					443,
					1,
					"insert",
					{
						"characters": "concat"
					},
					"BgAAAPcEAAAAAAAA+AQAAAAAAAAAAAAA+AQAAAAAAAD5BAAAAAAAAAAAAAD5BAAAAAAAAPoEAAAAAAAAAAAAAPoEAAAAAAAA+wQAAAAAAAAAAAAA+wQAAAAAAAD8BAAAAAAAAAAAAAD8BAAAAAAAAP0EAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9wQAAAAAAAD3BAAAAAAAAAAAAAAAAPC/"
				],
				[
					444,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAP0EAAAAAAAA/wQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/QQAAAAAAAD9BAAAAAAAAAAAAAAAAPC/"
				],
				[
					445,
					1,
					"insert",
					{
						"characters": "rotation.invert"
					},
					"DwAAAP4EAAAAAAAA/wQAAAAAAAAAAAAA/wQAAAAAAAAABQAAAAAAAAAAAAAABQAAAAAAAAEFAAAAAAAAAAAAAAEFAAAAAAAAAgUAAAAAAAAAAAAAAgUAAAAAAAADBQAAAAAAAAAAAAADBQAAAAAAAAQFAAAAAAAAAAAAAAQFAAAAAAAABQUAAAAAAAAAAAAABQUAAAAAAAAGBQAAAAAAAAAAAAAGBQAAAAAAAAcFAAAAAAAAAAAAAAcFAAAAAAAACAUAAAAAAAAAAAAACAUAAAAAAAAJBQAAAAAAAAAAAAAJBQAAAAAAAAoFAAAAAAAAAAAAAAoFAAAAAAAACwUAAAAAAAAAAAAACwUAAAAAAAAMBQAAAAAAAAAAAAAMBQAAAAAAAA0FAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/gQAAAAAAAD+BAAAAAAAAAAAAAAAAPC/"
				],
				[
					446,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAA0FAAAAAAAADwUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADQUAAAAAAAANBQAAAAAAAAAAAAAAAPC/"
				],
				[
					454,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAO8FAAAAAAAA8AUAAAAAAAAAAAAA8AUAAAAAAAD0BQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7wUAAAAAAADvBQAAAAAAAAAAAAAAAPC/"
				],
				[
					456,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAANYFAAAAAAAA1wUAAAAAAAAAAAAA1wUAAAAAAADYBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1gUAAAAAAADWBQAAAAAAAAAAAAAAADxA"
				],
				[
					469,
					1,
					"insert",
					{
						"characters": "\nlet"
					},
					"BAAAAMYEAAAAAAAAxwQAAAAAAAAAAAAAxwQAAAAAAADIBAAAAAAAAAAAAADIBAAAAAAAAMkEAAAAAAAAAAAAAMkEAAAAAAAAygQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxgQAAAAAAADGBAAAAAAAAAAAAAAAAEVA"
				],
				[
					470,
					1,
					"insert",
					{
						"characters": " vec=new"
					},
					"CAAAAMoEAAAAAAAAywQAAAAAAAAAAAAAywQAAAAAAADMBAAAAAAAAAAAAADMBAAAAAAAAM0EAAAAAAAAAAAAAM0EAAAAAAAAzgQAAAAAAAAAAAAAzgQAAAAAAADPBAAAAAAAAAAAAADPBAAAAAAAANAEAAAAAAAAAAAAANAEAAAAAAAA0QQAAAAAAAAAAAAA0QQAAAAAAADSBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAygQAAAAAAADKBAAAAAAAAAAAAAAAAPC/"
				],
				[
					471,
					1,
					"insert",
					{
						"characters": " Popint"
					},
					"BwAAANIEAAAAAAAA0wQAAAAAAAAAAAAA0wQAAAAAAADUBAAAAAAAAAAAAADUBAAAAAAAANUEAAAAAAAAAAAAANUEAAAAAAAA1gQAAAAAAAAAAAAA1gQAAAAAAADXBAAAAAAAAAAAAADXBAAAAAAAANgEAAAAAAAAAAAAANgEAAAAAAAA2QQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0gQAAAAAAADSBAAAAAAAAAAAAAAAAPC/"
				],
				[
					472,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAANkEAAAAAAAA2wQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2QQAAAAAAADZBAAAAAAAAAAAAAAAAPC/"
				],
				[
					473,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAANkEAAAAAAAA2QQAAAAAAAABAAAAKNkEAAAAAAAA2QQAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAA2gQAAAAAAADaBAAAAAAAAAAAAAAAAPC/"
				],
				[
					474,
					4,
					"left_delete",
					null,
					"BAAAANgEAAAAAAAA2AQAAAAAAAABAAAAdNcEAAAAAAAA1wQAAAAAAAABAAAAbtYEAAAAAAAA1gQAAAAAAAABAAAAadUEAAAAAAAA1QQAAAAAAAABAAAAcA",
					"AQAAAAAAAAABAAAA2QQAAAAAAADZBAAAAAAAAAAAAAAAAPC/"
				],
				[
					475,
					1,
					"insert",
					{
						"characters": "int"
					},
					"AwAAANUEAAAAAAAA1gQAAAAAAAAAAAAA1gQAAAAAAADXBAAAAAAAAAAAAADXBAAAAAAAANgEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1QQAAAAAAADVBAAAAAAAAAAAAAAAAPC/"
				],
				[
					476,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAANgEAAAAAAAA2gQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2AQAAAAAAADYBAAAAAAAAAAAAAAAAPC/"
				],
				[
					477,
					1,
					"insert",
					{
						"characters": "x,y"
					},
					"AwAAANkEAAAAAAAA2gQAAAAAAAAAAAAA2gQAAAAAAADbBAAAAAAAAAAAAADbBAAAAAAAANwEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2QQAAAAAAADZBAAAAAAAAAAAAAAAAPC/"
				],
				[
					479,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAN0EAAAAAAAA3gQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3QQAAAAAAADdBAAAAAAAAAAAAAAAAPC/"
				],
				[
					492,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAACsBAAAAAAAALAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKwEAAAAAAAArAQAAAAAAAAAAAAAAAPC/"
				],
				[
					493,
					1,
					"paste",
					null,
					"AQAAACwBAAAAAAAAMQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALAEAAAAAAAAsAQAAAAAAAAAAAAAAAPC/"
				],
				[
					534,
					1,
					"insert",
					{
						"characters": ".rotate"
					},
					"BwAAAOMEAAAAAAAA5AQAAAAAAAAAAAAA5AQAAAAAAADlBAAAAAAAAAAAAADlBAAAAAAAAOYEAAAAAAAAAAAAAOYEAAAAAAAA5wQAAAAAAAAAAAAA5wQAAAAAAADoBAAAAAAAAAAAAADoBAAAAAAAAOkEAAAAAAAAAAAAAOkEAAAAAAAA6gQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4wQAAAAAAADjBAAAAAAAAAAAAAAAAPC/"
				],
				[
					535,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAOoEAAAAAAAA7AQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6gQAAAAAAADqBAAAAAAAAAAAAAAAAPC/"
				],
				[
					536,
					1,
					"insert",
					{
						"characters": "rotation.angle"
					},
					"DgAAAOsEAAAAAAAA7AQAAAAAAAAAAAAA7AQAAAAAAADtBAAAAAAAAAAAAADtBAAAAAAAAO4EAAAAAAAAAAAAAO4EAAAAAAAA7wQAAAAAAAAAAAAA7wQAAAAAAADwBAAAAAAAAAAAAADwBAAAAAAAAPEEAAAAAAAAAAAAAPEEAAAAAAAA8gQAAAAAAAAAAAAA8gQAAAAAAADzBAAAAAAAAAAAAADzBAAAAAAAAPQEAAAAAAAAAAAAAPQEAAAAAAAA9QQAAAAAAAAAAAAA9QQAAAAAAAD2BAAAAAAAAAAAAAD2BAAAAAAAAPcEAAAAAAAAAAAAAPcEAAAAAAAA+AQAAAAAAAAAAAAA+AQAAAAAAAD5BAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6wQAAAAAAADrBAAAAAAAAAAAAAAAAPC/"
				],
				[
					541,
					1,
					"insert",
					{
						"characters": "*Mat.,"
					},
					"BgAAAPkEAAAAAAAA+gQAAAAAAAAAAAAA+gQAAAAAAAD7BAAAAAAAAAAAAAD7BAAAAAAAAPwEAAAAAAAAAAAAAPwEAAAAAAAA/QQAAAAAAAAAAAAA/QQAAAAAAAD+BAAAAAAAAAAAAAD+BAAAAAAAAP8EAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+QQAAAAAAAD5BAAAAAAAAAAAAAAAAPC/"
				],
				[
					542,
					2,
					"left_delete",
					null,
					"AgAAAP4EAAAAAAAA/gQAAAAAAAABAAAALP0EAAAAAAAA/QQAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAA/wQAAAAAAAD/BAAAAAAAAAAAAAAAAPC/"
				],
				[
					543,
					1,
					"insert",
					{
						"characters": "h.OPUI"
					},
					"BgAAAP0EAAAAAAAA/gQAAAAAAAAAAAAA/gQAAAAAAAD/BAAAAAAAAAAAAAD/BAAAAAAAAAAFAAAAAAAAAAAAAAAFAAAAAAAAAQUAAAAAAAAAAAAAAQUAAAAAAAACBQAAAAAAAAAAAAACBQAAAAAAAAMFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/QQAAAAAAAD9BAAAAAAAAAAAAAAAAPC/"
				],
				[
					544,
					4,
					"left_delete",
					null,
					"BAAAAAIFAAAAAAAAAgUAAAAAAAABAAAASQEFAAAAAAAAAQUAAAAAAAABAAAAVQAFAAAAAAAAAAUAAAAAAAABAAAAUP8EAAAAAAAA/wQAAAAAAAABAAAATw",
					"AQAAAAAAAAABAAAAAwUAAAAAAAADBQAAAAAAAAAAAAAAAPC/"
				],
				[
					545,
					1,
					"insert",
					{
						"characters": "PI/1§"
					},
					"BQAAAP8EAAAAAAAAAAUAAAAAAAAAAAAAAAUAAAAAAAABBQAAAAAAAAAAAAABBQAAAAAAAAIFAAAAAAAAAAAAAAIFAAAAAAAAAwUAAAAAAAAAAAAAAwUAAAAAAAAEBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/wQAAAAAAAD/BAAAAAAAAAAAAAAAAPC/"
				],
				[
					546,
					1,
					"left_delete",
					null,
					"AQAAAAMFAAAAAAAAAwUAAAAAAAACAAAAwqc",
					"AQAAAAAAAAABAAAABAUAAAAAAAAEBQAAAAAAAAAAAAAAAPC/"
				],
				[
					547,
					1,
					"insert",
					{
						"characters": "80"
					},
					"AgAAAAMFAAAAAAAABAUAAAAAAAAAAAAABAUAAAAAAAAFBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAwUAAAAAAAADBQAAAAAAAAAAAAAAAPC/"
				],
				[
					553,
					1,
					"insert",
					{
						"characters": "??0)"
					},
					"BAAAAPkEAAAAAAAA+gQAAAAAAAAAAAAA+gQAAAAAAAD7BAAAAAAAAAAAAAD7BAAAAAAAAPwEAAAAAAAAAAAAAPwEAAAAAAAA/QQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+QQAAAAAAAD5BAAAAAAAAAAAAAAAAPC/"
				],
				[
					555,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAAOsEAAAAAAAA7AQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6wQAAAAAAADrBAAAAAAAAAAAAAAAAPC/"
				],
				[
					562,
					1,
					"insert",
					{
						"characters": "vec."
					},
					"BAAAAGYFAAAAAAAAZwUAAAAAAAAAAAAAZwUAAAAAAABoBQAAAAAAAAAAAABoBQAAAAAAAGkFAAAAAAAAAAAAAGkFAAAAAAAAagUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZgUAAAAAAABmBQAAAAAAAAAAAAAAAPC/"
				],
				[
					565,
					1,
					"insert",
					{
						"characters": "vec."
					},
					"BAAAAG0FAAAAAAAAbgUAAAAAAAAAAAAAbgUAAAAAAABvBQAAAAAAAAAAAABvBQAAAAAAAHAFAAAAAAAAAAAAAHAFAAAAAAAAcQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbQUAAAAAAABtBQAAAAAAAAAAAAAAAPC/"
				],
				[
					577,
					1,
					"insert",
					{
						"characters": "console."
					},
					"CAAAAEgGAAAAAAAASQYAAAAAAAAAAAAASQYAAAAAAABKBgAAAAAAAAAAAABKBgAAAAAAAEsGAAAAAAAAAAAAAEsGAAAAAAAATAYAAAAAAAAAAAAATAYAAAAAAABNBgAAAAAAAAAAAABNBgAAAAAAAE4GAAAAAAAAAAAAAE4GAAAAAAAATwYAAAAAAAAAAAAATwYAAAAAAABQBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASAYAAAAAAABIBgAAAAAAAAAAAAAAAPC/"
				],
				[
					580,
					1,
					"right_delete",
					null,
					"AQAAAFAGAAAAAAAAUAYAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAUAYAAAAAAABQBgAAAAAAAAAAAAAAAPC/"
				],
				[
					587,
					1,
					"insert",
					{
						"characters": "rotate"
					},
					"BwAAAD0FAAAAAAAAPgUAAAAAAAAAAAAAPgUAAAAAAAA+BQAAAAAAABkAAABjb25jYXQocm90YXRpb24uaW52ZXJ0KCkpPgUAAAAAAAA/BQAAAAAAAAAAAAA/BQAAAAAAAEAFAAAAAAAAAAAAAEAFAAAAAAAAQQUAAAAAAAAAAAAAQQUAAAAAAABCBQAAAAAAAAAAAABCBQAAAAAAAEMFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPQUAAAAAAABWBQAAAAAAAP///////+9/"
				],
				[
					588,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAEMFAAAAAAAARQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQwUAAAAAAABDBQAAAAAAAAAAAAAAAPC/"
				],
				[
					589,
					1,
					"insert",
					{
						"characters": "rotation.angle"
					},
					"DgAAAEQFAAAAAAAARQUAAAAAAAAAAAAARQUAAAAAAABGBQAAAAAAAAAAAABGBQAAAAAAAEcFAAAAAAAAAAAAAEcFAAAAAAAASAUAAAAAAAAAAAAASAUAAAAAAABJBQAAAAAAAAAAAABJBQAAAAAAAEoFAAAAAAAAAAAAAEoFAAAAAAAASwUAAAAAAAAAAAAASwUAAAAAAABMBQAAAAAAAAAAAABMBQAAAAAAAE0FAAAAAAAAAAAAAE0FAAAAAAAATgUAAAAAAAAAAAAATgUAAAAAAABPBQAAAAAAAAAAAABPBQAAAAAAAFAFAAAAAAAAAAAAAFAFAAAAAAAAUQUAAAAAAAAAAAAAUQUAAAAAAABSBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARAUAAAAAAABEBQAAAAAAAAAAAAAAAPC/"
				],
				[
					600,
					1,
					"insert",
					{
						"characters": "-"
					},
					"AQAAAEQFAAAAAAAARQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARAUAAAAAAABEBQAAAAAAAAAAAAAAAPC/"
				],
				[
					609,
					1,
					"insert",
					{
						"characters": "_"
					},
					"AQAAAOwEAAAAAAAA7QQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7AQAAAAAAADsBAAAAAAAAAAAAAAAAPC/"
				],
				[
					610,
					1,
					"left_delete",
					null,
					"AQAAAOwEAAAAAAAA7AQAAAAAAAABAAAAXw",
					"AQAAAAAAAAABAAAA7QQAAAAAAADtBAAAAAAAAAAAAAAAAPC/"
				],
				[
					612,
					1,
					"insert",
					{
						"characters": "-"
					},
					"AQAAAOsEAAAAAAAA7AQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6wQAAAAAAADrBAAAAAAAAAAAAAAAAPC/"
				],
				[
					620,
					1,
					"reindent",
					null,
					"AQAAAMwEAAAAAAAAzgQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzAQAAAAAAADMBAAAAAAAAAAAAAAAIGtA"
				],
				[
					625,
					1,
					"insert",
					{
						"characters": "["
					},
					"AgAAAMoDAAAAAAAAywMAAAAAAAAAAAAAzQQAAAAAAADNBAAAAAAAAAIAAAAgIA",
					"AQAAAAAAAAABAAAAygMAAAAAAADKAwAAAAAAAAAAAAAAAPC/"
				],
				[
					627,
					1,
					"insert",
					{
						"characters": "]"
					},
					"AQAAANMDAAAAAAAA1AMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0wMAAAAAAADTAwAAAAAAAAAAAAAAAPC/"
				],
				[
					636,
					1,
					"insert",
					{
						"characters": "?"
					},
					"AQAAABMEAAAAAAAAFAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEwQAAAAAAAATBAAAAAAAAAAAAAAAAPC/"
				],
				[
					638,
					1,
					"insert",
					{
						"characters": " ??"
					},
					"AwAAABoEAAAAAAAAGwQAAAAAAAAAAAAAGwQAAAAAAAAcBAAAAAAAAAAAAAAcBAAAAAAAAB0EAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGgQAAAAAAAAaBAAAAAAAAAAAAAAAAPC/"
				],
				[
					639,
					1,
					"insert",
					{
						"characters": " 0)"
					},
					"AwAAAB0EAAAAAAAAHgQAAAAAAAAAAAAAHgQAAAAAAAAfBAAAAAAAAAAAAAAfBAAAAAAAACAEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHQQAAAAAAAAdBAAAAAAAAAAAAAAAAPC/"
				],
				[
					644,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAAsEAAAAAAAADAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACwQAAAAAAAALBAAAAAAAAAAAAAAAAPC/"
				],
				[
					645,
					1,
					"left_delete",
					null,
					"AQAAAAsEAAAAAAAACwQAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAADAQAAAAAAAAMBAAAAAAAAAAAAAAAAPC/"
				],
				[
					646,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAAAsEAAAAAAAADAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACwQAAAAAAAALBAAAAAAAAAAAAAAAAPC/"
				],
				[
					653,
					1,
					"left_delete",
					null,
					"AQAAAAsEAAAAAAAACwQAAAAAAAABAAAAKA",
					"AQAAAAAAAAABAAAADAQAAAAAAAAMBAAAAAAAAAAAAAAAwG1A"
				],
				[
					659,
					1,
					"insert",
					{
						"characters": " rotation."
					},
					"CgAAABQEAAAAAAAAFQQAAAAAAAAAAAAAFQQAAAAAAAAWBAAAAAAAAAAAAAAWBAAAAAAAABcEAAAAAAAAAAAAABcEAAAAAAAAGAQAAAAAAAAAAAAAGAQAAAAAAAAZBAAAAAAAAAAAAAAZBAAAAAAAABoEAAAAAAAAAAAAABoEAAAAAAAAGwQAAAAAAAAAAAAAGwQAAAAAAAAcBAAAAAAAAAAAAAAcBAAAAAAAAB0EAAAAAAAAAAAAAB0EAAAAAAAAHgQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFAQAAAAAAAAUBAAAAAAAAAAAAAAAAPC/"
				],
				[
					660,
					1,
					"left_delete",
					null,
					"AQAAAB0EAAAAAAAAHQQAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAAHgQAAAAAAAAeBAAAAAAAAAAAAAAAAPC/"
				],
				[
					662,
					2,
					"right_delete",
					null,
					"AgAAACQEAAAAAAAAJAQAAAAAAAABAAAAPyQEAAAAAAAAJAQAAAAAAAABAAAAPw",
					"AQAAAAAAAAABAAAAJAQAAAAAAAAkBAAAAAAAAAAAAAAAAPC/"
				],
				[
					663,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAACQEAAAAAAAAJQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJAQAAAAAAAAkBAAAAAAAAAAAAAAAAPC/"
				],
				[
					668,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAAAsEAAAAAAAADAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACwQAAAAAAAALBAAAAAAAAAAAAAAAAPC/"
				],
				[
					675,
					1,
					"left_delete",
					null,
					"AQAAAAsEAAAAAAAACwQAAAAAAAABAAAAKA",
					"AQAAAAAAAAABAAAADAQAAAAAAAAMBAAAAAAAAAAAAAAAAPC/"
				],
				[
					677,
					1,
					"cut",
					null,
					"AQAAAAsEAAAAAAAACwQAAAAAAAAKAAAAcm90YXRpb24/IA",
					"AQAAAAAAAAABAAAACwQAAAAAAAAVBAAAAAAAAAAAAAAAAPC/"
				],
				[
					679,
					1,
					"paste",
					null,
					"AQAAAAAEAAAAAAAACgQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAQAAAAAAAAABAAAAAAAAAAAAAAAAPC/"
				],
				[
					684,
					5,
					"right_delete",
					null,
					"BQAAACMEAAAAAAAAIwQAAAAAAAABAAAAICMEAAAAAAAAIwQAAAAAAAABAAAAOiMEAAAAAAAAIwQAAAAAAAABAAAAICMEAAAAAAAAIwQAAAAAAAABAAAAMCMEAAAAAAAAIwQAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAIwQAAAAAAAAjBAAAAAAAAAAAAAAAAPC/"
				],
				[
					687,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAAC4EAAAAAAAALwQAAAAAAAAAAAAALwQAAAAAAAAwBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALgQAAAAAAAAuBAAAAAAAAAAAAAAAAPC/"
				],
				[
					688,
					1,
					"insert",
					{
						"characters": " 0"
					},
					"AgAAADAEAAAAAAAAMQQAAAAAAAAAAAAAMQQAAAAAAAAyBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMAQAAAAAAAAwBAAAAAAAAAAAAAAAAPC/"
				],
				[
					719,
					1,
					"right_delete",
					null,
					"AQAAAAoEAAAAAAAACgQAAAAAAAALAAAATWF0aC5yb3VuZCg",
					"AQAAAAAAAAABAAAACgQAAAAAAAAVBAAAAAAAAAAAAAAAAPC/"
				],
				[
					721,
					11,
					"right_delete",
					null,
					"CwAAABkEAAAAAAAAGQQAAAAAAAABAAAAKhkEAAAAAAAAGQQAAAAAAAABAAAAIBkEAAAAAAAAGQQAAAAAAAABAAAAUhkEAAAAAAAAGQQAAAAAAAABAAAAQRkEAAAAAAAAGQQAAAAAAAABAAAARBkEAAAAAAAAGQQAAAAAAAABAAAAMhkEAAAAAAAAGQQAAAAAAAABAAAARBkEAAAAAAAAGQQAAAAAAAABAAAARRkEAAAAAAAAGQQAAAAAAAABAAAARxkEAAAAAAAAGQQAAAAAAAABAAAAKRkEAAAAAAAAGQQAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAGQQAAAAAAAAZBAAAAAAAAAAAAAAAAPC/"
				],
				[
					728,
					9,
					"right_delete",
					null,
					"CQAAAPAEAAAAAAAA8AQAAAAAAAABAAAAYfAEAAAAAAAA8AQAAAAAAAABAAAAbvAEAAAAAAAA8AQAAAAAAAABAAAAZ/AEAAAAAAAA8AQAAAAAAAABAAAAbPAEAAAAAAAA8AQAAAAAAAABAAAAZfAEAAAAAAAA8AQAAAAAAAABAAAAP/AEAAAAAAAA8AQAAAAAAAABAAAAP/AEAAAAAAAA8AQAAAAAAAABAAAAMPAEAAAAAAAA8AQAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAA8AQAAAAAAADwBAAAAAAAAAAAAAAAAPC/"
				],
				[
					729,
					1,
					"left_delete",
					null,
					"AQAAAO8EAAAAAAAA7wQAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAA8AQAAAAAAADwBAAAAAAAAAAAAAAAAPC/"
				],
				[
					730,
					1,
					"insert",
					{
						"characters": "Angle"
					},
					"BQAAAO8EAAAAAAAA8AQAAAAAAAAAAAAA8AQAAAAAAADxBAAAAAAAAAAAAADxBAAAAAAAAPIEAAAAAAAAAAAAAPIEAAAAAAAA8wQAAAAAAAAAAAAA8wQAAAAAAAD0BAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7wQAAAAAAADvBAAAAAAAAAAAAAAAAPC/"
				],
				[
					732,
					1,
					"left_delete",
					null,
					"AQAAAOYEAAAAAAAA5gQAAAAAAAABAAAAKA",
					"AQAAAAAAAAABAAAA5wQAAAAAAADnBAAAAAAAAAAAAAAAAPC/"
				],
				[
					747,
					6,
					"left_delete",
					null,
					"BgAAAEcFAAAAAAAARwUAAAAAAAABAAAAZUYFAAAAAAAARgUAAAAAAAABAAAAbEUFAAAAAAAARQUAAAAAAAABAAAAZ0QFAAAAAAAARAUAAAAAAAABAAAAbkMFAAAAAAAAQwUAAAAAAAABAAAAYUIFAAAAAAAAQgUAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAASAUAAAAAAABIBQAAAAAAAAAAAAAAAPC/"
				],
				[
					748,
					1,
					"insert",
					{
						"characters": "Angle"
					},
					"BQAAAEIFAAAAAAAAQwUAAAAAAAAAAAAAQwUAAAAAAABEBQAAAAAAAAAAAABEBQAAAAAAAEUFAAAAAAAAAAAAAEUFAAAAAAAARgUAAAAAAAAAAAAARgUAAAAAAABHBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQgUAAAAAAABCBQAAAAAAAAAAAAAAAPC/"
				],
				[
					827,
					1,
					"paste",
					null,
					"AQAAAFoGAAAAAAAAaAYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWgYAAAAAAABaBgAAAAAAAAAAAAAAAPC/"
				],
				[
					828,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGgGAAAAAAAAaQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaAYAAAAAAABoBgAAAAAAAAAAAAAAAPC/"
				],
				[
					831,
					1,
					"left_delete",
					null,
					"AQAAAGgGAAAAAAAAaAYAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAaQYAAAAAAABpBgAAAAAAAAAAAAAAAPC/"
				],
				[
					832,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAGgGAAAAAAAAaQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaAYAAAAAAABoBgAAAAAAAAAAAAAAAPC/"
				],
				[
					840,
					1,
					"insert",
					{
						"characters": "trayn"
					},
					"BgAAADkFAAAAAAAAOgUAAAAAAAAAAAAAOgUAAAAAAAA6BQAAAAAAAA4AAAAtcm90YXRpb25BbmdsZToFAAAAAAAAOwUAAAAAAAAAAAAAOwUAAAAAAAA8BQAAAAAAAAAAAAA8BQAAAAAAAD0FAAAAAAAAAAAAAD0FAAAAAAAAPgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARwUAAAAAAAA5BQAAAAAAAAAAAAAAAPC/"
				],
				[
					841,
					2,
					"left_delete",
					null,
					"AgAAAD0FAAAAAAAAPQUAAAAAAAABAAAAbjwFAAAAAAAAPAUAAAAAAAABAAAAeQ",
					"AQAAAAAAAAABAAAAPgUAAAAAAAA+BQAAAAAAAAAAAAAAAPC/"
				],
				[
					842,
					1,
					"insert",
					{
						"characters": "nsformation.rotati"
					},
					"EgAAADwFAAAAAAAAPQUAAAAAAAAAAAAAPQUAAAAAAAA+BQAAAAAAAAAAAAA+BQAAAAAAAD8FAAAAAAAAAAAAAD8FAAAAAAAAQAUAAAAAAAAAAAAAQAUAAAAAAABBBQAAAAAAAAAAAABBBQAAAAAAAEIFAAAAAAAAAAAAAEIFAAAAAAAAQwUAAAAAAAAAAAAAQwUAAAAAAABEBQAAAAAAAAAAAABEBQAAAAAAAEUFAAAAAAAAAAAAAEUFAAAAAAAARgUAAAAAAAAAAAAARgUAAAAAAABHBQAAAAAAAAAAAABHBQAAAAAAAEgFAAAAAAAAAAAAAEgFAAAAAAAASQUAAAAAAAAAAAAASQUAAAAAAABKBQAAAAAAAAAAAABKBQAAAAAAAEsFAAAAAAAAAAAAAEsFAAAAAAAATAUAAAAAAAAAAAAATAUAAAAAAABNBQAAAAAAAAAAAABNBQAAAAAAAE4FAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPAUAAAAAAAA8BQAAAAAAAAAAAAAAAPC/"
				],
				[
					843,
					1,
					"insert",
					{
						"characters": "on.angle"
					},
					"CAAAAE4FAAAAAAAATwUAAAAAAAAAAAAATwUAAAAAAABQBQAAAAAAAAAAAABQBQAAAAAAAFEFAAAAAAAAAAAAAFEFAAAAAAAAUgUAAAAAAAAAAAAAUgUAAAAAAABTBQAAAAAAAAAAAABTBQAAAAAAAFQFAAAAAAAAAAAAAFQFAAAAAAAAVQUAAAAAAAAAAAAAVQUAAAAAAABWBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATgUAAAAAAABOBQAAAAAAAAAAAAAAAPC/"
				],
				[
					853,
					1,
					"insert",
					{
						"characters": "?"
					},
					"AQAAAEcFAAAAAAAASAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARwUAAAAAAABHBQAAAAAAAAAAAAAAAPC/"
				],
				[
					855,
					1,
					"insert",
					{
						"characters": "?"
					},
					"AQAAAFEFAAAAAAAAUgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUQUAAAAAAABRBQAAAAAAAAAAAAAAAPC/"
				],
				[
					857,
					1,
					"insert",
					{
						"characters": " ??"
					},
					"AwAAAFgFAAAAAAAAWQUAAAAAAAAAAAAAWQUAAAAAAABaBQAAAAAAAAAAAABaBQAAAAAAAFsFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWAUAAAAAAABYBQAAAAAAAAAAAAAAAPC/"
				],
				[
					858,
					1,
					"insert",
					{
						"characters": " 0"
					},
					"AgAAAFsFAAAAAAAAXAUAAAAAAAAAAAAAXAUAAAAAAABdBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWwUAAAAAAABbBQAAAAAAAAAAAAAAAPC/"
				],
				[
					869,
					1,
					"insert",
					{
						"characters": "-"
					},
					"AQAAADkFAAAAAAAAOgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOQUAAAAAAAA5BQAAAAAAAAAAAAAAAPC/"
				],
				[
					877,
					1,
					"cut",
					null,
					"AQAAADkFAAAAAAAAOQUAAAAAAAAlAAAALXRyYW5zZm9ybWF0aW9uPy5yb3RhdGlvbj8uYW5nbGUgPz8gMA",
					"AQAAAAAAAAABAAAAOQUAAAAAAABeBQAAAAAAAAAAAAAAAPC/"
				],
				[
					878,
					1,
					"paste",
					null,
					"AQAAADkFAAAAAAAAXgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOQUAAAAAAAA5BQAAAAAAAAAAAAAAAPC/"
				],
				[
					881,
					1,
					"insert_snippet",
					{
						"contents": "(${0:$SELECTION})"
					},
					"AgAAAOUEAAAAAAAA5QQAAAAAAAAOAAAALXJvdGF0aW9uQW5nbGXlBAAAAAAAAPUEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5QQAAAAAAADzBAAAAAAAAAAAAAAAAPC/"
				],
				[
					882,
					1,
					"paste",
					null,
					"AgAAAOYEAAAAAAAACwUAAAAAAAAAAAAACwUAAAAAAAALBQAAAAAAAA4AAAAtcm90YXRpb25BbmdsZQ",
					"AQAAAAAAAAABAAAA5gQAAAAAAAD0BAAAAAAAAAAAAAAAAPC/"
				],
				[
					899,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAN0EAAAAAAAA3gQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3QQAAAAAAADdBAAAAAAAAAAAAAAAAPC/"
				],
				[
					902,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAABoFAAAAAAAAGwUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGgUAAAAAAAAaBQAAAAAAAAAAAAAAAPC/"
				],
				[
					904,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAN4EAAAAAAAA3wQAAAAAAAAAAAAA3wQAAAAAAADgBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3gQAAAAAAADeBAAAAAAAAAAAAAAAAAAA"
				],
				[
					919,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAE0FAAAAAAAATgUAAAAAAAAAAAAATgUAAAAAAABPBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATQUAAAAAAABNBQAAAAAAAAAAAAAAADVA"
				],
				[
					929,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAB4FAAAAAAAAHwUAAAAAAAAAAAAAHwUAAAAAAAAgBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHgUAAAAAAAAeBQAAAAAAAAAAAAAAgEFA"
				],
				[
					948,
					1,
					"insert",
					{
						"characters": "\nletan"
					},
					"BgAAAMYEAAAAAAAAxwQAAAAAAAAAAAAAxwQAAAAAAADIBAAAAAAAAAAAAADIBAAAAAAAAMkEAAAAAAAAAAAAAMkEAAAAAAAAygQAAAAAAAAAAAAAygQAAAAAAADLBAAAAAAAAAAAAADLBAAAAAAAAMwEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxgQAAAAAAADGBAAAAAAAAAAAAAAAgFFA"
				],
				[
					949,
					1,
					"insert",
					{
						"characters": " g"
					},
					"AgAAAMwEAAAAAAAAzQQAAAAAAAAAAAAAzQQAAAAAAADOBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzAQAAAAAAADMBAAAAAAAAAAAAAAAAPC/"
				],
				[
					950,
					4,
					"left_delete",
					null,
					"BAAAAM0EAAAAAAAAzQQAAAAAAAABAAAAZ8wEAAAAAAAAzAQAAAAAAAABAAAAIMsEAAAAAAAAywQAAAAAAAABAAAAbsoEAAAAAAAAygQAAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAAzgQAAAAAAADOBAAAAAAAAAAAAAAAAPC/"
				],
				[
					951,
					1,
					"insert",
					{
						"characters": " ang="
					},
					"BQAAAMoEAAAAAAAAywQAAAAAAAAAAAAAywQAAAAAAADMBAAAAAAAAAAAAADMBAAAAAAAAM0EAAAAAAAAAAAAAM0EAAAAAAAAzgQAAAAAAAAAAAAAzgQAAAAAAADPBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAygQAAAAAAADKBAAAAAAAAAAAAAAAAPC/"
				],
				[
					952,
					1,
					"paste",
					null,
					"AQAAAM8EAAAAAAAA9gQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzwQAAAAAAADPBAAAAAAAAAAAAAAAAPC/"
				],
				[
					953,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAPYEAAAAAAAA9wQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9gQAAAAAAAD2BAAAAAAAAAAAAAAAAPC/"
				],
				[
					961,
					2,
					"left_delete",
					null,
					"AgAAABoFAAAAAAAAGgUAAAAAAAAmAAAALXRyYW5zZm9ybWF0aW9uPy5yb3RhdGlvbj8uYW5nbGUgPz8gMCkZBQAAAAAAABkFAAAAAAAAAQAAACg",
					"AQAAAAAAAAABAAAAGgUAAAAAAABABQAAAAAAAAAAAAAAAPC/"
				],
				[
					962,
					1,
					"insert",
					{
						"characters": "ang"
					},
					"AwAAABkFAAAAAAAAGgUAAAAAAAAAAAAAGgUAAAAAAAAbBQAAAAAAAAAAAAAbBQAAAAAAABwFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGQUAAAAAAAAZBQAAAAAAAAAAAAAAAPC/"
				],
				[
					973,
					1,
					"insert",
					{
						"characters": "an"
					},
					"AwAAAGcFAAAAAAAAaAUAAAAAAAAAAAAAaAUAAAAAAABoBQAAAAAAACUAAAAtdHJhbnNmb3JtYXRpb24/LnJvdGF0aW9uPy5hbmdsZSA/PyAwaAUAAAAAAABpBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZwUAAAAAAACMBQAAAAAAAAAAAAAAAPC/"
				],
				[
					974,
					1,
					"insert",
					{
						"characters": " g"
					},
					"AgAAAGkFAAAAAAAAagUAAAAAAAAAAAAAagUAAAAAAABrBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaQUAAAAAAABpBQAAAAAAAAAAAAAAAPC/"
				],
				[
					975,
					2,
					"left_delete",
					null,
					"AgAAAGoFAAAAAAAAagUAAAAAAAABAAAAZ2kFAAAAAAAAaQUAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAawUAAAAAAABrBQAAAAAAAAAAAAAAAPC/"
				],
				[
					976,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AQAAAGkFAAAAAAAAagUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaQUAAAAAAABpBQAAAAAAAAAAAAAAAPC/"
				],
				[
					983,
					1,
					"right_delete",
					null,
					"AQAAANAEAAAAAAAA0AQAAAAAAAABAAAALQ",
					"AQAAAAAAAAABAAAA0AQAAAAAAADQBAAAAAAAAAAAAAAAAPC/"
				],
				[
					985,
					1,
					"insert",
					{
						"characters": "-"
					},
					"AQAAAM8EAAAAAAAA0AQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzwQAAAAAAADPBAAAAAAAAAAAAAAAAPC/"
				],
				[
					987,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAM8EAAAAAAAA0AQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzwQAAAAAAADPBAAAAAAAAAAAAAAAAPC/"
				],
				[
					991,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAM4EAAAAAAAAzwQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzgQAAAAAAADOBAAAAAAAAAAAAAAAAPC/"
				],
				[
					994,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAEFAAAAAAAAAgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAQUAAAAAAAABBQAAAAAAAAAAAAAAAPC/"
				],
				[
					996,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAMFAAAAAAAABAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAwUAAAAAAAADBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1008,
					2,
					"right_delete",
					null,
					"AgAAABMFAAAAAAAAEwUAAAAAAAABAAAALxMFAAAAAAAAEwUAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAAEwUAAAAAAAATBQAAAAAAAAAAAAAAAAAA"
				],
				[
					1014,
					2,
					"right_delete",
					null,
					"AgAAAF4FAAAAAAAAXgUAAAAAAAABAAAAL14FAAAAAAAAXgUAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAAXgUAAAAAAABeBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1053,
					1,
					"paste",
					null,
					"AgAAAIwGAAAAAAAAjwYAAAAAAAAAAAAAjwYAAAAAAACPBgAAAAAAAAgAAAByb3RhdGlvbg",
					"AQAAAAAAAAABAAAAjAYAAAAAAACUBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1115,
					1,
					"insert",
					{
						"characters": "+ang"
					},
					"BAAAAPIGAAAAAAAA8wYAAAAAAAAAAAAA8wYAAAAAAAD0BgAAAAAAAAAAAAD0BgAAAAAAAPUGAAAAAAAAAAAAAPUGAAAAAAAA9gYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8gYAAAAAAADyBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1124,
					4,
					"left_delete",
					null,
					"BAAAAPUGAAAAAAAA9QYAAAAAAAABAAAAZ/QGAAAAAAAA9AYAAAAAAAABAAAAbvMGAAAAAAAA8wYAAAAAAAABAAAAYfIGAAAAAAAA8gYAAAAAAAABAAAAKw",
					"AQAAAAAAAAABAAAA9gYAAAAAAAD2BgAAAAAAAAAAAAAAAPC/"
				],
				[
					1125,
					1,
					"insert",
					{
						"characters": "-ang"
					},
					"BAAAAPIGAAAAAAAA8wYAAAAAAAAAAAAA8wYAAAAAAAD0BgAAAAAAAAAAAAD0BgAAAAAAAPUGAAAAAAAAAAAAAPUGAAAAAAAA9gYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8gYAAAAAAADyBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1149,
					1,
					"insert",
					{
						"characters": "text.,"
					},
					"BgAAAH0GAAAAAAAAfgYAAAAAAAAAAAAAfgYAAAAAAAB/BgAAAAAAAAAAAAB/BgAAAAAAAIAGAAAAAAAAAAAAAIAGAAAAAAAAgQYAAAAAAAAAAAAAgQYAAAAAAACCBgAAAAAAAAAAAACCBgAAAAAAAIMGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfQYAAAAAAAB9BgAAAAAAAAAAAAAAAPC/"
				],
				[
					1150,
					2,
					"left_delete",
					null,
					"AgAAAIIGAAAAAAAAggYAAAAAAAABAAAALIEGAAAAAAAAgQYAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAAgwYAAAAAAACDBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1151,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAIEGAAAAAAAAggYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgQYAAAAAAACBBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1156,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB5CwAAaW1wb3J0IHsgbW9kIH0gZnJvbSAnLi4vLi4vbWlzYy5qcyc7CmltcG9ydCB7IGgsIEZyYWdtZW50LCBDb21wb25lbnQgfSBmcm9tICcuLi8uLi9kb20vcHJlYWN0Q29tcG9uZW50LmpzJzsKaW1wb3J0IHsgTWFrZVJvdGF0aW9uLCBBbGlnbm1lbnQsIEFsaWdubWVudEF0dHJzLCBWRVJUSUNBTCwgSE9SSVpPTlRBTCwgbG9nLCBSQUQyREVHLCBERUcyUkFELCB1c2VUcmFuc2Zvcm1hdGlvbiB9IGZyb20gJy4uL3JlbmRlclV0aWxzLmpzJzsKaW1wb3J0IHsgVHJhbnNmb3JtYXRpb25MaXN0LCBSb3RhdGlvbiwgVHJhbnNsYXRpb24sUG9pbnQgfSBmcm9tICcuLi8uLi9nZW9tLmpzJzsKaW1wb3J0IHsgQ3Jvc3MgfSBmcm9tICcuL2Nyb3NzLmpzJzsKCmV4cG9ydCBjb25zdCBUZXh0ID0gKHsgeCwgeSwgdGV4dCwgY29sb3IsIGFsaWdubWVudCwgcm90LCB2aXNpYmxlLCBjbGFzc05hbWUsIG9wdHMgPSB7fSwgc3R5bGUsIC4uLnByb3BzIH0pID0+IHsKICBsZXQgdHJhbnNmb3JtYXRpb24yID0gdXNlVHJhbnNmb3JtYXRpb24ocHJvcHMudHJhbnNmb3JtYXRpb24pOwoKICBsZXQgeyB0cmFuc2Zvcm1hdGlvbiA9IG5ldyBUcmFuc2Zvcm1hdGlvbkxpc3QoKSB9ID0gb3B0czsKICBsb2coYFRleHQucmVuZGVyKDEpYCwgeyB0ZXh0LCB0cmFuc2Zvcm1hdGlvbiwgYWxpZ25tZW50IH0pOwogIGxldCBlbGVtZW50VHJhbnNmb3JtID0gdHJhbnNmb3JtYXRpb24uc2xpY2UodHJhbnNmb3JtYXRpb24uZmluZEluZGV4KGl0ZW0gPT4gaXRlbS50eXBlLnN0YXJ0c1dpdGgoJ3NjYWwnKSkgKyAxKTsKICBsZXQgcGFyZW50QW5nbGUgPSBNYXRoLnJvdW5kKGVsZW1lbnRUcmFuc2Zvcm0uYW5nbGUgKiBSQUQyREVHKTsKICBsb2coYFRleHQucmVuZGVyYCwgewogICAgdGV4dCwKICAgIHBhcmVudEFuZ2xlLAogICAgdHJhbnNmb3JtYXRpb24yLAogICAgeCwKICAgIHksCiAgICBhbGlnbm1lbnQsCiAgICByb3QKICB9KTsKCiAgbGV0IFtyb3RhdGlvbl0gPSBNYWtlUm90YXRpb24ocm90KTsKICBsZXQgcm90YXRpb25BbmdsZSA9IHJvdGF0aW9uPyByb3RhdGlvbi5hbmdsZSA6IDA7CiAgbGV0IHRvdGFsQW5nbGUgPSBtb2QocGFyZW50QW5nbGUgKyByb3RhdGlvbkFuZ2xlLCAxODApOwogIGxldCByZWFsQW5nbGUgPSBtb2QodG90YWxBbmdsZSAtIHBhcmVudEFuZ2xlLCAzNjApOwogIGxldCBkaWZmQW5nbGUgPSBtb2QoLXJvdGF0aW9uQW5nbGUgKyByZWFsQW5nbGUsIDM2MCk7CgpsZXQgYW5nID0gLSh0cmFuc2Zvcm1hdGlvbj8ucm90YXRpb24/LmFuZ2xlID8/IDApOwpsZXQgdmVjID0gbmV3IFBvaW50KHgseSkKLnJvdGF0ZShhbmcqTWF0aC5QSS8xODApCjsKCgogIGxldCB0cmFuc2Zvcm0gPSBuZXcgVHJhbnNmb3JtYXRpb25MaXN0KCkKICAgIC5yb3RhdGUoYW5nKQogICAgLnRyYW5zbGF0ZSh2ZWMueCwgdmVjLnkpCiAgICAuY29uY2F0KHRyYW5zZm9ybWF0aW9uLnNjYWxpbmcgPyBbdHJhbnNmb3JtYXRpb24uZmluZCh0ID0+IHQudHlwZSA9PSAnc2NhbGUnKV0gOiBbXSkKICAgIC8vICAuY29uY2F0KHRyYW5zZm9ybWF0aW9uLnJvdGF0aW9uID8gW3RyYW5zZm9ybWF0aW9uLnJvdGF0aW9uLmludmVydCgpXSA6IFtdKQogICAgLy8ucm90YXRlKC1yZWFsQW5nbGUgJSAxODApCiAgICA7CgogY29uc29sZS5sb2coYFRleHQucmVuZGVyKDIpYCwgeyB0ZXh0LHRyYW5zZm9ybWF0aW9uLGFuZywgdHJhbnNmb3JtIH0pOwoKICBsZXQgeyBzY2FsaW5nIH0gPSBlbGVtZW50VHJhbnNmb3JtOwogIGxldCBhbGlnbiA9IEFsaWdubWVudChhbGlnbm1lbnQsIGRpZmZBbmdsZS1hbmcsIHNjYWxpbmcpOwogIC8vbG9nKGBUZXh0LnJlbmRlcmAsIHsgdGV4dCwgcGFyZW50QW5nbGUsIHJvdGF0aW9uQW5nbGUsIHRvdGFsQW5nbGUsIHJlYWxBbmdsZSwgZGlmZkFuZ2xlLCB0cmFuc2Zvcm0sIGFsaWduIH0pOwoKICBsb2coYFRleHQucmVuZGVyKDMpYCwgeyBhbGlnbiwgZWxlbWVudFRyYW5zZm9ybSB9KTsKICBsb2coYFRleHQucmVuZGVyYCwgeyBhbGlnbm1lbnQsIGFsaWduLCBzY2FsaW5nLCBlbGVtZW50VHJhbnNmb3JtIH0pOwoKICAvL2FsaWduID0gYWxpZ24ucm90YXRlKGRpZmZBbmdsZSAqIERFRzJSQUQpOwogIGFsaWduID0gYWxpZ24ucm91bmQoKTsKCiAgLy9sb2coJ1RleHQucmVuZGVyJywgdGV4dCk7CgogIGlmKGFsaWduLnkgPT0gMCkgdHJhbnNmb3JtID0gdHJhbnNmb3JtLmNvbmNhdChuZXcgVHJhbnNsYXRpb24oMCwgKzAuMTEpKTsKCiAgdGV4dCA9ICh0ZXh0ICsgJycpLnJlcGxhY2UoL86pL2csICcmI3gyMTI2OycpLnJlcGxhY2UoL868L2csICcmI3hiNTsnKTsKICBsb2coYFRleHQucmVuZGVyYCwgeyB0cmFuc2Zvcm1hdGlvbiwgdHJhbnNmb3JtLCB0ZXh0LCBhbGlnbiB9KTsKCiAgdmlzaWJsZSA9IHRydWU7CgogIHJldHVybiBoKEZyYWdtZW50LCB7fSwgWwogICAgaCgKICAgICAgJ3RleHQnLAogICAgICB7CiAgICAgICAgY2xhc3NOYW1lLAogICAgICAgIGZpbGw6IGNvbG9yLAogICAgICAgIHN0cm9rZTogJ25vbmUnLAogICAgICAgICdzdHJva2Utd2lkdGgnOiAwLjA1LAogICAgICAgIHN0eWxlOiB2aXNpYmxlID8geyAuLi5zdHlsZSB9IDogeyAuLi5zdHlsZSwgZGlzcGxheTogJ25vbmUnIH0sCiAgICAgICAgLi4uQWxpZ25tZW50QXR0cnMoYWxpZ24sIFZFUlRJQ0FMKSwKICAgICAgICAuLi5wcm9wcywKICAgICAgICB0cmFuc2Zvcm0KICAgICAgfSwKICAgICAgaCgKICAgICAgICAndHNwYW4nLAogICAgICAgIHsKICAgICAgICAgIC4uLkFsaWdubWVudEF0dHJzKGFsaWduLCBIT1JJWk9OVEFMKSwKICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiB7IF9faHRtbDogdGV4dCB9CiAgICAgICAgfSAvKiwgaChGcmFnbWVudCwge30sIFt0ZXh0XSkqLwogICAgICApCiAgICApCiAgICAvLyAgICBoKENyb3NzLCB7IHgsIHksIHJhZGl1czogMS4yNyAvIDQgfSkKICBdKTsKfTsKAAAAAAAAAAB7CwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAggYAAAAAAACCBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1197,
					1,
					"insert",
					{
						"characters": "\n\n.concat"
					},
					"DAAAAJEFAAAAAAAAkgUAAAAAAAAAAAAAkgUAAAAAAACWBQAAAAAAAAAAAACWBQAAAAAAAJcFAAAAAAAAAAAAAJcFAAAAAAAAmwUAAAAAAAAAAAAAkgUAAAAAAACSBQAAAAAAAAQAAAAgICAglwUAAAAAAACYBQAAAAAAAAAAAACYBQAAAAAAAJkFAAAAAAAAAAAAAJkFAAAAAAAAmgUAAAAAAAAAAAAAmgUAAAAAAACbBQAAAAAAAAAAAACbBQAAAAAAAJwFAAAAAAAAAAAAAJwFAAAAAAAAnQUAAAAAAAAAAAAAnQUAAAAAAACeBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkQUAAAAAAACRBQAAAAAAAAAAAAAAwHZA"
				],
				[
					1198,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJ4FAAAAAAAAoAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAngUAAAAAAACeBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1199,
					1,
					"insert",
					{
						"characters": "transformation.slice"
					},
					"FAAAAJ8FAAAAAAAAoAUAAAAAAAAAAAAAoAUAAAAAAAChBQAAAAAAAAAAAAChBQAAAAAAAKIFAAAAAAAAAAAAAKIFAAAAAAAAowUAAAAAAAAAAAAAowUAAAAAAACkBQAAAAAAAAAAAACkBQAAAAAAAKUFAAAAAAAAAAAAAKUFAAAAAAAApgUAAAAAAAAAAAAApgUAAAAAAACnBQAAAAAAAAAAAACnBQAAAAAAAKgFAAAAAAAAAAAAAKgFAAAAAAAAqQUAAAAAAAAAAAAAqQUAAAAAAACqBQAAAAAAAAAAAACqBQAAAAAAAKsFAAAAAAAAAAAAAKsFAAAAAAAArAUAAAAAAAAAAAAArAUAAAAAAACtBQAAAAAAAAAAAACtBQAAAAAAAK4FAAAAAAAAAAAAAK4FAAAAAAAArwUAAAAAAAAAAAAArwUAAAAAAACwBQAAAAAAAAAAAACwBQAAAAAAALEFAAAAAAAAAAAAALEFAAAAAAAAsgUAAAAAAAAAAAAAsgUAAAAAAACzBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnwUAAAAAAACfBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1200,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAALMFAAAAAAAAtQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAswUAAAAAAACzBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1201,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAALQFAAAAAAAAtQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtAUAAAAAAAC0BQAAAAAAAAAAAAAAAPC/"
				],
				[
					1206,
					1,
					"left_delete",
					null,
					"AQAAAJEFAAAAAAAAkQUAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAkgUAAAAAAACSBQAAAAAAAAAAAAAAgG9A"
				],
				[
					1228,
					1,
					"insert",
					{
						"characters": ".i"
					},
					"AgAAALUFAAAAAAAAtgUAAAAAAAAAAAAAtgUAAAAAAAC3BQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtQUAAAAAAAC1BQAAAAAAAAAAAAAAAPC/"
				],
				[
					1229,
					1,
					"insert",
					{
						"characters": " nver"
					},
					"BQAAALcFAAAAAAAAuAUAAAAAAAAAAAAAuAUAAAAAAAC5BQAAAAAAAAAAAAC5BQAAAAAAALoFAAAAAAAAAAAAALoFAAAAAAAAuwUAAAAAAAAAAAAAuwUAAAAAAAC8BQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtwUAAAAAAAC3BQAAAAAAAAAAAAAAAPC/"
				],
				[
					1230,
					5,
					"left_delete",
					null,
					"BQAAALsFAAAAAAAAuwUAAAAAAAABAAAAcroFAAAAAAAAugUAAAAAAAABAAAAZbkFAAAAAAAAuQUAAAAAAAABAAAAdrgFAAAAAAAAuAUAAAAAAAABAAAAbrcFAAAAAAAAtwUAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAvAUAAAAAAAC8BQAAAAAAAAAAAAAAAPC/"
				],
				[
					1231,
					1,
					"insert",
					{
						"characters": "nvert"
					},
					"BQAAALcFAAAAAAAAuAUAAAAAAAAAAAAAuAUAAAAAAAC5BQAAAAAAAAAAAAC5BQAAAAAAALoFAAAAAAAAAAAAALoFAAAAAAAAuwUAAAAAAAAAAAAAuwUAAAAAAAC8BQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtwUAAAAAAAC3BQAAAAAAAAAAAAAAAPC/"
				],
				[
					1232,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAALwFAAAAAAAAvgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvAUAAAAAAAC8BQAAAAAAAAAAAAAAAPC/"
				],
				[
					1237,
					1,
					"cut",
					null,
					"AQAAAJIFAAAAAAAAkgUAAAAAAAAuAAAAICAgIC5jb25jYXQodHJhbnNmb3JtYXRpb24uc2xpY2UoMSkuaW52ZXJ0KCkpCg",
					"AQAAAAAAAAABAAAAkgUAAAAAAADABQAAAAAAAAAAAAAAAAAA"
				],
				[
					1239,
					1,
					"paste",
					null,
					"AQAAAGQFAAAAAAAAkgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZAUAAAAAAABkBQAAAAAAAAAAAAAAAAAA"
				],
				[
					1240,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAJIFAAAAAAAAkwUAAAAAAAAAAAAAkwUAAAAAAACUBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkgUAAAAAAACSBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1309,
					1,
					"insert",
					{
						"characters": "-"
					},
					"AQAAACEFAAAAAAAAIgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIQUAAAAAAAAhBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1310,
					1,
					"left_delete",
					null,
					"AQAAACEFAAAAAAAAIQUAAAAAAAABAAAALQ",
					"AQAAAAAAAAABAAAAIgUAAAAAAAAiBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1326,
					1,
					"insert",
					{
						"characters": "-"
					},
					"AQAAACEFAAAAAAAAIgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIQUAAAAAAAAhBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1331,
					1,
					"left_delete",
					null,
					"AQAAACEFAAAAAAAAIQUAAAAAAAABAAAALQ",
					"AQAAAAAAAAABAAAAIgUAAAAAAAAiBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1340,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACtCwAAaW1wb3J0IHsgbW9kIH0gZnJvbSAnLi4vLi4vbWlzYy5qcyc7CmltcG9ydCB7IGgsIEZyYWdtZW50LCBDb21wb25lbnQgfSBmcm9tICcuLi8uLi9kb20vcHJlYWN0Q29tcG9uZW50LmpzJzsKaW1wb3J0IHsgTWFrZVJvdGF0aW9uLCBBbGlnbm1lbnQsIEFsaWdubWVudEF0dHJzLCBWRVJUSUNBTCwgSE9SSVpPTlRBTCwgbG9nLCBSQUQyREVHLCBERUcyUkFELCB1c2VUcmFuc2Zvcm1hdGlvbiB9IGZyb20gJy4uL3JlbmRlclV0aWxzLmpzJzsKaW1wb3J0IHsgVHJhbnNmb3JtYXRpb25MaXN0LCBSb3RhdGlvbiwgVHJhbnNsYXRpb24sIFBvaW50IH0gZnJvbSAnLi4vLi4vZ2VvbS5qcyc7CmltcG9ydCB7IENyb3NzIH0gZnJvbSAnLi9jcm9zcy5qcyc7CgpleHBvcnQgY29uc3QgVGV4dCA9ICh7IHgsIHksIHRleHQsIGNvbG9yLCBhbGlnbm1lbnQsIHJvdCwgdmlzaWJsZSwgY2xhc3NOYW1lLCBvcHRzID0ge30sIHN0eWxlLCAuLi5wcm9wcyB9KSA9PiB7CiAgbGV0IHRyYW5zZm9ybWF0aW9uMiA9IHVzZVRyYW5zZm9ybWF0aW9uKHByb3BzLnRyYW5zZm9ybWF0aW9uKTsKCiAgbGV0IHsgdHJhbnNmb3JtYXRpb24gPSBuZXcgVHJhbnNmb3JtYXRpb25MaXN0KCkgfSA9IG9wdHM7CiAgbG9nKGBUZXh0LnJlbmRlcigxKWAsIHsgdGV4dCwgdHJhbnNmb3JtYXRpb24sIGFsaWdubWVudCB9KTsKICBsZXQgZWxlbWVudFRyYW5zZm9ybSA9IHRyYW5zZm9ybWF0aW9uLnNsaWNlKHRyYW5zZm9ybWF0aW9uLmZpbmRJbmRleChpdGVtID0+IGl0ZW0udHlwZS5zdGFydHNXaXRoKCdzY2FsJykpICsgMSk7CiAgbGV0IHBhcmVudEFuZ2xlID0gTWF0aC5yb3VuZChlbGVtZW50VHJhbnNmb3JtLmFuZ2xlICogUkFEMkRFRyk7CiAgbG9nKGBUZXh0LnJlbmRlcmAsIHsKICAgIHRleHQsCiAgICBwYXJlbnRBbmdsZSwKICAgIHRyYW5zZm9ybWF0aW9uMiwKICAgIHgsCiAgICB5LAogICAgYWxpZ25tZW50LAogICAgcm90CiAgfSk7CgogIGxldCBbcm90YXRpb25dID0gTWFrZVJvdGF0aW9uKHJvdCk7CiAgbGV0IHJvdGF0aW9uQW5nbGUgPSByb3RhdGlvbiA/IHJvdGF0aW9uLmFuZ2xlIDogMDsKICBsZXQgdG90YWxBbmdsZSA9IG1vZChwYXJlbnRBbmdsZSArIHJvdGF0aW9uQW5nbGUsIDE4MCk7CiAgbGV0IHJlYWxBbmdsZSA9IG1vZCh0b3RhbEFuZ2xlIC0gcGFyZW50QW5nbGUsIDM2MCk7CiAgbGV0IGRpZmZBbmdsZSA9IG1vZCgtcm90YXRpb25BbmdsZSArIHJlYWxBbmdsZSwgMzYwKTsKCiAgbGV0IGFuZyA9IC0odHJhbnNmb3JtYXRpb24/LnJvdGF0aW9uPy5hbmdsZSA/PyAwKTsKICBsZXQgdmVjID0gbmV3IFBvaW50KHgsIHkpLnJvdGF0ZSgoYW5nICogTWF0aC5QSSkgLyAxODApOwogIGxldCB0cmFuc2Zvcm0gPSBuZXcgVHJhbnNmb3JtYXRpb25MaXN0KCkKICAgIC5jb25jYXQodHJhbnNmb3JtYXRpb24uc2xpY2UoMSkuaW52ZXJ0KCkpCi8vICAgIC5yb3RhdGUoYW5nKQogICAgLnRyYW5zbGF0ZSh2ZWMueCwgdmVjLnkpCiAgICAuY29uY2F0KHRyYW5zZm9ybWF0aW9uLnNjYWxpbmcgPyBbdHJhbnNmb3JtYXRpb24uZmluZCh0ID0+IHQudHlwZSA9PSAnc2NhbGUnKV0gOiBbXSk7CiAgLy8gIC5jb25jYXQodHJhbnNmb3JtYXRpb24ucm90YXRpb24gPyBbdHJhbnNmb3JtYXRpb24ucm90YXRpb24uaW52ZXJ0KCldIDogW10pCiAgLy8ucm90YXRlKC1yZWFsQW5nbGUgJSAxODApCiAgY29uc29sZS5sb2coYFRleHQucmVuZGVyKDIpYCwgeyB0ZXh0LCB0cmFuc2Zvcm1hdGlvbiwgYW5nLCB0cmFuc2Zvcm0gfSk7CgogIGxldCB7IHNjYWxpbmcgfSA9IGVsZW1lbnRUcmFuc2Zvcm07CiAgbGV0IGFsaWduID0gQWxpZ25tZW50KGFsaWdubWVudCwgZGlmZkFuZ2xlIC0gYW5nLCBzY2FsaW5nKTsKICAvL2xvZyhgVGV4dC5yZW5kZXJgLCB7IHRleHQsIHBhcmVudEFuZ2xlLCByb3RhdGlvbkFuZ2xlLCB0b3RhbEFuZ2xlLCByZWFsQW5nbGUsIGRpZmZBbmdsZSwgdHJhbnNmb3JtLCBhbGlnbiB9KTsKCiAgbG9nKGBUZXh0LnJlbmRlcigzKWAsIHsgYWxpZ24sIGVsZW1lbnRUcmFuc2Zvcm0gfSk7CiAgbG9nKGBUZXh0LnJlbmRlcmAsIHsgYWxpZ25tZW50LCBhbGlnbiwgc2NhbGluZywgZWxlbWVudFRyYW5zZm9ybSB9KTsKCiAgLy9hbGlnbiA9IGFsaWduLnJvdGF0ZShkaWZmQW5nbGUgKiBERUcyUkFEKTsKICBhbGlnbiA9IGFsaWduLnJvdW5kKCk7CgogIC8vbG9nKCdUZXh0LnJlbmRlcicsIHRleHQpOwoKICBpZihhbGlnbi55ID09IDApIHRyYW5zZm9ybSA9IHRyYW5zZm9ybS5jb25jYXQobmV3IFRyYW5zbGF0aW9uKDAsICswLjExKSk7CgogIHRleHQgPSAodGV4dCArICcnKS5yZXBsYWNlKC/OqS9nLCAnJiN4MjEyNjsnKS5yZXBsYWNlKC/OvC9nLCAnJiN4YjU7Jyk7CiAgbG9nKGBUZXh0LnJlbmRlcmAsIHsgdHJhbnNmb3JtYXRpb24sIHRyYW5zZm9ybSwgdGV4dCwgYWxpZ24gfSk7CgogIHZpc2libGUgPSB0cnVlOwoKICByZXR1cm4gaChGcmFnbWVudCwge30sIFsKICAgIGgoCiAgICAgICd0ZXh0JywKICAgICAgewogICAgICAgIGNsYXNzTmFtZSwKICAgICAgICBmaWxsOiBjb2xvciwKICAgICAgICBzdHJva2U6ICdub25lJywKICAgICAgICAnc3Ryb2tlLXdpZHRoJzogMC4wNSwKICAgICAgICBzdHlsZTogdmlzaWJsZSA/IHsgLi4uc3R5bGUgfSA6IHsgLi4uc3R5bGUsIGRpc3BsYXk6ICdub25lJyB9LAogICAgICAgIC4uLkFsaWdubWVudEF0dHJzKGFsaWduLCBWRVJUSUNBTCksCiAgICAgICAgLi4ucHJvcHMsCiAgICAgICAgdHJhbnNmb3JtCiAgICAgIH0sCiAgICAgIGgoCiAgICAgICAgJ3RzcGFuJywKICAgICAgICB7CiAgICAgICAgICAuLi5BbGlnbm1lbnRBdHRycyhhbGlnbiwgSE9SSVpPTlRBTCksCiAgICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTDogeyBfX2h0bWw6IHRleHQgfQogICAgICAgIH0gLyosIGgoRnJhZ21lbnQsIHt9LCBbdGV4dF0pKi8KICAgICAgKQogICAgKQogICAgLy8gICAgaChDcm9zcywgeyB4LCB5LCByYWRpdXM6IDEuMjcgLyA0IH0pCiAgXSk7Cn07CgAAAAAAAAAArwsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIQUAAAAAAAAhBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1362,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAANwAAAAAAAAA3QAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3AAAAAAAAADcAAAAAAAAAAAAAAAAAPC/"
				],
				[
					1363,
					1,
					"paste",
					null,
					"AQAAAN0AAAAAAAAA6gAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3QAAAAAAAADdAAAAAAAAAAAAAAAAAPC/"
				],
				[
					1387,
					1,
					"insert",
					{
						"characters": "·"
					},
					"AQAAAOoAAAAAAAAA6wAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6gAAAAAAAADqAAAAAAAAAAAAAAAAAPC/"
				],
				[
					1388,
					1,
					"left_delete",
					null,
					"AQAAAOoAAAAAAAAA6gAAAAAAAAACAAAAwrc",
					"AQAAAAAAAAABAAAA6wAAAAAAAADrAAAAAAAAAAAAAAAAAPC/"
				],
				[
					1389,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAOoAAAAAAAAA6wAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6gAAAAAAAADqAAAAAAAAAAAAAAAAAPC/"
				],
				[
					1390,
					1,
					"paste",
					null,
					"AQAAAOsAAAAAAAAA+gAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6wAAAAAAAADrAAAAAAAAAAAAAAAAAPC/"
				],
				[
					1399,
					1,
					"paste",
					null,
					"AQAAAI4FAAAAAAAAnQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjgUAAAAAAACOBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1400,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAAJ0FAAAAAAAAngUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnQUAAAAAAACdBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1402,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAKwFAAAAAAAArQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArAUAAAAAAACsBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1404,
					1,
					"cut",
					null,
					"AQAAAK0FAAAAAAAArQUAAAAAAAAJAAAALnNsaWNlKDEp",
					"AQAAAAAAAAABAAAArQUAAAAAAAC2BQAAAAAAAAAAAAAAAPC/"
				],
				[
					1406,
					1,
					"left_delete",
					null,
					"AQAAALYFAAAAAAAAtgUAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAtwUAAAAAAAC3BQAAAAAAAP///////+9/"
				],
				[
					1407,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAALYFAAAAAAAAtwUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtgUAAAAAAAC2BQAAAAAAAAAAAAAAAPC/"
				],
				[
					1438,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AgAAAOsAAAAAAAAA7AAAAAAAAAAAAAAA7AAAAAAAAADsAAAAAAAAAA8AAABFeHRyYWN0Um90YXRpb24",
					"AQAAAAAAAAABAAAA6wAAAAAAAAD6AAAAAAAAAAAAAAAAAPC/"
				],
				[
					1451,
					1,
					"cut",
					null,
					"AQAAAIAFAAAAAAAAgAUAAAAAAAAfAAAARXh0cmFjdFJvdGF0aW9uKHRyYW5zZm9ybWF0aW9uKQ",
					"AQAAAAAAAAABAAAAnwUAAAAAAACABQAAAAAAAAAAAAAAAPC/"
				],
				[
					1452,
					1,
					"insert",
					{
						"characters": "pr"
					},
					"AgAAAIAFAAAAAAAAgQUAAAAAAAAAAAAAgQUAAAAAAACCBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgAUAAAAAAACABQAAAAAAAAAAAAAAAPC/"
				],
				[
					1453,
					1,
					"left_delete",
					null,
					"AQAAAIEFAAAAAAAAgQUAAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAAggUAAAAAAACCBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1454,
					1,
					"insert",
					{
						"characters": "arentRot"
					},
					"CAAAAIEFAAAAAAAAggUAAAAAAAAAAAAAggUAAAAAAACDBQAAAAAAAAAAAACDBQAAAAAAAIQFAAAAAAAAAAAAAIQFAAAAAAAAhQUAAAAAAAAAAAAAhQUAAAAAAACGBQAAAAAAAAAAAACGBQAAAAAAAIcFAAAAAAAAAAAAAIcFAAAAAAAAiAUAAAAAAAAAAAAAiAUAAAAAAACJBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgQUAAAAAAACBBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1458,
					1,
					"insert",
					{
						"characters": "\n$"
					},
					"AwAAAEsFAAAAAAAATAUAAAAAAAAAAAAATAUAAAAAAABOBQAAAAAAAAAAAABOBQAAAAAAAE8FAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASwUAAAAAAABLBQAAAAAAAAAAAAAAACxA"
				],
				[
					1461,
					1,
					"right_delete",
					null,
					"AQAAAE8FAAAAAAAATwUAAAAAAAABAAAAbA",
					"AQAAAAAAAAABAAAATwUAAAAAAABPBQAAAAAAAAAAAAAAADVA"
				],
				[
					1462,
					1,
					"left_delete",
					null,
					"AQAAAE4FAAAAAAAATgUAAAAAAAABAAAAJA",
					"AQAAAAAAAAABAAAATwUAAAAAAABPBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1463,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AQAAAE4FAAAAAAAATwUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATgUAAAAAAABOBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1465,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAAEsFAAAAAAAATAUAAAAAAAAAAAAATAUAAAAAAABNBQAAAAAAAAAAAABNBQAAAAAAAE4FAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASwUAAAAAAABLBQAAAAAAAAAAAAAAADVA"
				],
				[
					1466,
					1,
					"insert",
					{
						"characters": " parent"
					},
					"BwAAAE4FAAAAAAAATwUAAAAAAAAAAAAATwUAAAAAAABQBQAAAAAAAAAAAABQBQAAAAAAAFEFAAAAAAAAAAAAAFEFAAAAAAAAUgUAAAAAAAAAAAAAUgUAAAAAAABTBQAAAAAAAAAAAABTBQAAAAAAAFQFAAAAAAAAAAAAAFQFAAAAAAAAVQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATgUAAAAAAABOBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1467,
					1,
					"insert",
					{
						"characters": "Rot="
					},
					"BAAAAFUFAAAAAAAAVgUAAAAAAAAAAAAAVgUAAAAAAABXBQAAAAAAAAAAAABXBQAAAAAAAFgFAAAAAAAAAAAAAFgFAAAAAAAAWQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVQUAAAAAAABVBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1468,
					1,
					"paste",
					null,
					"AQAAAFkFAAAAAAAAeAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWQUAAAAAAABZBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1469,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAHgFAAAAAAAAeQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeAUAAAAAAAB4BQAAAAAAAAAAAAAAAPC/"
				],
				[
					1485,
					1,
					"cut",
					null,
					"AQAAAEsFAAAAAAAASwUAAAAAAAAxAAAAbGV0IHBhcmVudFJvdD1FeHRyYWN0Um90YXRpb24odHJhbnNmb3JtYXRpb24pOwogIA",
					"AQAAAAAAAAABAAAASwUAAAAAAAB8BQAAAAAAAAAAAAAAACxA"
				],
				[
					1487,
					1,
					"paste",
					null,
					"AQAAABAFAAAAAAAAQQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEAUAAAAAAAAQBQAAAAAAAAAAAAAAACxA"
				],
				[
					1489,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAFoFAAAAAAAAWwUAAAAAAAAAAAAAWwUAAAAAAABdBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWgUAAAAAAABaBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1496,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAHsFAAAAAAAAfAUAAAAAAAAAAAAAfAUAAAAAAAB+BQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAewUAAAAAAAB7BQAAAAAAAAAAAAAAAPC/"
				],
				[
					1498,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAF0FAAAAAAAAXgUAAAAAAAAAAAAAXgUAAAAAAABfBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXQUAAAAAAABdBQAAAAAAAAAAAAAAACxA"
				],
				[
					1500,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAFwFAAAAAAAAXQUAAAAAAAAAAAAAXQUAAAAAAABeBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXAUAAAAAAABcBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1502,
					1,
					"insert",
					{
						"characters": ".transform"
					},
					"CgAAAFwFAAAAAAAAXQUAAAAAAAAAAAAAXQUAAAAAAABeBQAAAAAAAAAAAABeBQAAAAAAAF8FAAAAAAAAAAAAAF8FAAAAAAAAYAUAAAAAAAAAAAAAYAUAAAAAAABhBQAAAAAAAAAAAABhBQAAAAAAAGIFAAAAAAAAAAAAAGIFAAAAAAAAYwUAAAAAAAAAAAAAYwUAAAAAAABkBQAAAAAAAAAAAABkBQAAAAAAAGUFAAAAAAAAAAAAAGUFAAAAAAAAZgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXAUAAAAAAABcBQAAAAAAAAAAAAAAABxA"
				],
				[
					1503,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAGYFAAAAAAAAaAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZgUAAAAAAABmBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1508,
					1,
					"insert",
					{
						"characters": "pra"
					},
					"AwAAAGcFAAAAAAAAaAUAAAAAAAAAAAAAaAUAAAAAAABpBQAAAAAAAAAAAABpBQAAAAAAAGoFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZwUAAAAAAABnBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1509,
					2,
					"left_delete",
					null,
					"AgAAAGkFAAAAAAAAaQUAAAAAAAABAAAAYWgFAAAAAAAAaAUAAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAAagUAAAAAAABqBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1510,
					1,
					"insert",
					{
						"characters": "arentRot.invert"
					},
					"DwAAAGgFAAAAAAAAaQUAAAAAAAAAAAAAaQUAAAAAAABqBQAAAAAAAAAAAABqBQAAAAAAAGsFAAAAAAAAAAAAAGsFAAAAAAAAbAUAAAAAAAAAAAAAbAUAAAAAAABtBQAAAAAAAAAAAABtBQAAAAAAAG4FAAAAAAAAAAAAAG4FAAAAAAAAbwUAAAAAAAAAAAAAbwUAAAAAAABwBQAAAAAAAAAAAABwBQAAAAAAAHEFAAAAAAAAAAAAAHEFAAAAAAAAcgUAAAAAAAAAAAAAcgUAAAAAAABzBQAAAAAAAAAAAABzBQAAAAAAAHQFAAAAAAAAAAAAAHQFAAAAAAAAdQUAAAAAAAAAAAAAdQUAAAAAAAB2BQAAAAAAAAAAAAB2BQAAAAAAAHcFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaAUAAAAAAABoBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1511,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAHcFAAAAAAAAeQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdwUAAAAAAAB3BQAAAAAAAAAAAAAAAPC/"
				],
				[
					1513,
					1,
					"insert",
					{
						"characters": ".toMatrix8"
					},
					"CgAAAHkFAAAAAAAAegUAAAAAAAAAAAAAegUAAAAAAAB7BQAAAAAAAAAAAAB7BQAAAAAAAHwFAAAAAAAAAAAAAHwFAAAAAAAAfQUAAAAAAAAAAAAAfQUAAAAAAAB+BQAAAAAAAAAAAAB+BQAAAAAAAH8FAAAAAAAAAAAAAH8FAAAAAAAAgAUAAAAAAAAAAAAAgAUAAAAAAACBBQAAAAAAAAAAAACBBQAAAAAAAIIFAAAAAAAAAAAAAIIFAAAAAAAAgwUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeQUAAAAAAAB5BQAAAAAAAAAAAAAAAPC/"
				],
				[
					1515,
					2,
					"left_delete",
					null,
					"AgAAAIMFAAAAAAAAgwUAAAAAAAABAAAAKYIFAAAAAAAAggUAAAAAAAABAAAAOA",
					"AQAAAAAAAAABAAAAhAUAAAAAAACEBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1516,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAIIFAAAAAAAAhAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAggUAAAAAAACCBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1518,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAIQFAAAAAAAAhQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhAUAAAAAAACEBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1528,
					1,
					"left_delete",
					null,
					"AQAAAOwAAAAAAAAA7AAAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAA7AAAAAAAAADtAAAAAAAAAAAAAAAAAPC/"
				],
				[
					1529,
					1,
					"insert",
					{
						"characters": "Extra"
					},
					"BQAAAOwAAAAAAAAA7QAAAAAAAAAAAAAA7QAAAAAAAADuAAAAAAAAAAAAAADuAAAAAAAAAO8AAAAAAAAAAAAAAO8AAAAAAAAA8AAAAAAAAAAAAAAA8AAAAAAAAADxAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7AAAAAAAAADsAAAAAAAAAAAAAAAAAPC/"
				],
				[
					1532,
					1,
					"insert_completion",
					{
						"completion": "ExtractRotation",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "ExtractRotation"
					},
					"AgAAAOwAAAAAAAAA7AAAAAAAAAAFAAAARXh0cmHsAAAAAAAAAPsAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8QAAAAAAAADxAAAAAAAAAAAAAAAAAPC/"
				],
				[
					1561,
					1,
					"insert",
					{
						"characters": "\nlet"
					},
					"BQAAAEwFAAAAAAAATQUAAAAAAAAAAAAATQUAAAAAAABPBQAAAAAAAAAAAABPBQAAAAAAAFAFAAAAAAAAAAAAAFAFAAAAAAAAUQUAAAAAAAAAAAAAUQUAAAAAAABSBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATAUAAAAAAABMBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1562,
					1,
					"insert",
					{
						"characters": " parentMatrix"
					},
					"DQAAAFIFAAAAAAAAUwUAAAAAAAAAAAAAUwUAAAAAAABUBQAAAAAAAAAAAABUBQAAAAAAAFUFAAAAAAAAAAAAAFUFAAAAAAAAVgUAAAAAAAAAAAAAVgUAAAAAAABXBQAAAAAAAAAAAABXBQAAAAAAAFgFAAAAAAAAAAAAAFgFAAAAAAAAWQUAAAAAAAAAAAAAWQUAAAAAAABaBQAAAAAAAAAAAABaBQAAAAAAAFsFAAAAAAAAAAAAAFsFAAAAAAAAXAUAAAAAAAAAAAAAXAUAAAAAAABdBQAAAAAAAAAAAABdBQAAAAAAAF4FAAAAAAAAAAAAAF4FAAAAAAAAXwUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUgUAAAAAAABSBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1563,
					1,
					"insert",
					{
						"characters": " =parentRot."
					},
					"DAAAAF8FAAAAAAAAYAUAAAAAAAAAAAAAYAUAAAAAAABhBQAAAAAAAAAAAABhBQAAAAAAAGIFAAAAAAAAAAAAAGIFAAAAAAAAYwUAAAAAAAAAAAAAYwUAAAAAAABkBQAAAAAAAAAAAABkBQAAAAAAAGUFAAAAAAAAAAAAAGUFAAAAAAAAZgUAAAAAAAAAAAAAZgUAAAAAAABnBQAAAAAAAAAAAABnBQAAAAAAAGgFAAAAAAAAAAAAAGgFAAAAAAAAaQUAAAAAAAAAAAAAaQUAAAAAAABqBQAAAAAAAAAAAABqBQAAAAAAAGsFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXwUAAAAAAABfBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1564,
					1,
					"insert",
					{
						"characters": "toMatrix"
					},
					"CAAAAGsFAAAAAAAAbAUAAAAAAAAAAAAAbAUAAAAAAABtBQAAAAAAAAAAAABtBQAAAAAAAG4FAAAAAAAAAAAAAG4FAAAAAAAAbwUAAAAAAAAAAAAAbwUAAAAAAABwBQAAAAAAAAAAAABwBQAAAAAAAHEFAAAAAAAAAAAAAHEFAAAAAAAAcgUAAAAAAAAAAAAAcgUAAAAAAABzBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAawUAAAAAAABrBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1565,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAHMFAAAAAAAAdQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcwUAAAAAAABzBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1567,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAHUFAAAAAAAAdgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdQUAAAAAAAB1BQAAAAAAAAAAAAAAAPC/"
				],
				[
					1580,
					1,
					"insert",
					{
						"characters": "Ma<"
					},
					"AwAAAKUFAAAAAAAApgUAAAAAAAAAAAAApgUAAAAAAACnBQAAAAAAAAAAAACnBQAAAAAAAKgFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApQUAAAAAAAClBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1581,
					1,
					"left_delete",
					null,
					"AQAAAKcFAAAAAAAApwUAAAAAAAABAAAAPA",
					"AQAAAAAAAAABAAAAqAUAAAAAAACoBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1582,
					1,
					"insert",
					{
						"characters": "trix"
					},
					"BAAAAKcFAAAAAAAAqAUAAAAAAAAAAAAAqAUAAAAAAACpBQAAAAAAAAAAAACpBQAAAAAAAKoFAAAAAAAAAAAAAKoFAAAAAAAAqwUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApwUAAAAAAACnBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1583,
					3,
					"right_delete",
					null,
					"AwAAAKsFAAAAAAAAqwUAAAAAAAABAAAAUqsFAAAAAAAAqwUAAAAAAAABAAAAb6sFAAAAAAAAqwUAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAAqwUAAAAAAACrBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1587,
					1,
					"right_delete",
					null,
					"AQAAALQFAAAAAAAAtAUAAAAAAAALAAAALnRvTWF0cml4KCk",
					"AQAAAAAAAAABAAAAtAUAAAAAAAC/BQAAAAAAAAAAAAAAAPC/"
				],
				[
					1595,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABHDAAAaW1wb3J0IHsgbW9kIH0gZnJvbSAnLi4vLi4vbWlzYy5qcyc7CmltcG9ydCB7IGgsIEZyYWdtZW50LCBDb21wb25lbnQgfSBmcm9tICcuLi8uLi9kb20vcHJlYWN0Q29tcG9uZW50LmpzJzsKaW1wb3J0IHsgTWFrZVJvdGF0aW9uLCBBbGlnbm1lbnQsIEFsaWdubWVudEF0dHJzLCBWRVJUSUNBTCwgSE9SSVpPTlRBTCwgbG9nLCBSQUQyREVHLCBERUcyUkFELCB1c2VUcmFuc2Zvcm1hdGlvbixJbmZlclJvdGF0aW9uLCBFeHRyYWN0Um90YXRpb259IGZyb20gJy4uL3JlbmRlclV0aWxzLmpzJzsKaW1wb3J0IHsgVHJhbnNmb3JtYXRpb25MaXN0LCBSb3RhdGlvbiwgVHJhbnNsYXRpb24sIFBvaW50IH0gZnJvbSAnLi4vLi4vZ2VvbS5qcyc7CmltcG9ydCB7IENyb3NzIH0gZnJvbSAnLi9jcm9zcy5qcyc7CgpleHBvcnQgY29uc3QgVGV4dCA9ICh7IHgsIHksIHRleHQsIGNvbG9yLCBhbGlnbm1lbnQsIHJvdCwgdmlzaWJsZSwgY2xhc3NOYW1lLCBvcHRzID0ge30sIHN0eWxlLCAuLi5wcm9wcyB9KSA9PiB7CiAgbGV0IHRyYW5zZm9ybWF0aW9uMiA9IHVzZVRyYW5zZm9ybWF0aW9uKHByb3BzLnRyYW5zZm9ybWF0aW9uKTsKCiAgbGV0IHsgdHJhbnNmb3JtYXRpb24gPSBuZXcgVHJhbnNmb3JtYXRpb25MaXN0KCkgfSA9IG9wdHM7CiAgbG9nKGBUZXh0LnJlbmRlcigxKWAsIHsgdGV4dCwgdHJhbnNmb3JtYXRpb24sIGFsaWdubWVudCB9KTsKICBsZXQgZWxlbWVudFRyYW5zZm9ybSA9IHRyYW5zZm9ybWF0aW9uLnNsaWNlKHRyYW5zZm9ybWF0aW9uLmZpbmRJbmRleChpdGVtID0+IGl0ZW0udHlwZS5zdGFydHNXaXRoKCdzY2FsJykpICsgMSk7CiAgbGV0IHBhcmVudEFuZ2xlID0gTWF0aC5yb3VuZChlbGVtZW50VHJhbnNmb3JtLmFuZ2xlICogUkFEMkRFRyk7CiAgbG9nKGBUZXh0LnJlbmRlcmAsIHsKICAgIHRleHQsCiAgICBwYXJlbnRBbmdsZSwKICAgIHRyYW5zZm9ybWF0aW9uMiwKICAgIHgsCiAgICB5LAogICAgYWxpZ25tZW50LAogICAgcm90CiAgfSk7CgogIGxldCBbcm90YXRpb25dID0gTWFrZVJvdGF0aW9uKHJvdCk7CiAgbGV0IHJvdGF0aW9uQW5nbGUgPSByb3RhdGlvbiA/IHJvdGF0aW9uLmFuZ2xlIDogMDsKICBsZXQgdG90YWxBbmdsZSA9IG1vZChwYXJlbnRBbmdsZSArIHJvdGF0aW9uQW5nbGUsIDE4MCk7CiAgbGV0IHJlYWxBbmdsZSA9IG1vZCh0b3RhbEFuZ2xlIC0gcGFyZW50QW5nbGUsIDM2MCk7CiAgbGV0IGRpZmZBbmdsZSA9IG1vZCgtcm90YXRpb25BbmdsZSArIHJlYWxBbmdsZSwgMzYwKTsKCiAgbGV0IGFuZyA9IC0odHJhbnNmb3JtYXRpb24/LnJvdGF0aW9uPy5hbmdsZSA/PyAwKTsKICBsZXQgcGFyZW50Um90PUV4dHJhY3RSb3RhdGlvbih0cmFuc2Zvcm1hdGlvbik7CiAgbGV0IHBhcmVudE1hdHJpeCA9cGFyZW50Um90LnRvTWF0cml4KCk7CiAgbGV0IHZlYyA9IG5ldyBQb2ludCh4LCB5KQogLnRyYW5zZm9ybShwYXJlbnRNYXRyaXguaW52ZXJ0KCkpCiAgLy8ucm90YXRlKChhbmcgKiBNYXRoLlBJKSAvIDE4MCkKICA7CiAgbGV0IHRyYW5zZm9ybSA9IG5ldyBUcmFuc2Zvcm1hdGlvbkxpc3QoKQogICAgLmNvbmNhdChwYXJlbnRSb3QuaW52ZXJ0KCkpCiAgICAvLyAgICAucm90YXRlKGFuZykKICAgIC50cmFuc2xhdGUodmVjLngsIHZlYy55KQogICAgLmNvbmNhdCh0cmFuc2Zvcm1hdGlvbi5zY2FsaW5nID8gW3RyYW5zZm9ybWF0aW9uLmZpbmQodCA9PiB0LnR5cGUgPT0gJ3NjYWxlJyldIDogW10pOwogIC8vICAuY29uY2F0KHRyYW5zZm9ybWF0aW9uLnJvdGF0aW9uID8gW3RyYW5zZm9ybWF0aW9uLnJvdGF0aW9uLmludmVydCgpXSA6IFtdKQogIC8vLnJvdGF0ZSgtcmVhbEFuZ2xlICUgMTgwKQogIGNvbnNvbGUubG9nKGBUZXh0LnJlbmRlcigyKWAsIHsgdGV4dCwgdHJhbnNmb3JtYXRpb24sIGFuZywgdHJhbnNmb3JtIH0pOwoKICBsZXQgeyBzY2FsaW5nIH0gPSBlbGVtZW50VHJhbnNmb3JtOwogIGxldCBhbGlnbiA9IEFsaWdubWVudChhbGlnbm1lbnQsIGRpZmZBbmdsZSAtIGFuZywgc2NhbGluZyk7CiAgLy9sb2coYFRleHQucmVuZGVyYCwgeyB0ZXh0LCBwYXJlbnRBbmdsZSwgcm90YXRpb25BbmdsZSwgdG90YWxBbmdsZSwgcmVhbEFuZ2xlLCBkaWZmQW5nbGUsIHRyYW5zZm9ybSwgYWxpZ24gfSk7CgogIGxvZyhgVGV4dC5yZW5kZXIoMylgLCB7IGFsaWduLCBlbGVtZW50VHJhbnNmb3JtIH0pOwogIGxvZyhgVGV4dC5yZW5kZXJgLCB7IGFsaWdubWVudCwgYWxpZ24sIHNjYWxpbmcsIGVsZW1lbnRUcmFuc2Zvcm0gfSk7CgogIC8vYWxpZ24gPSBhbGlnbi5yb3RhdGUoZGlmZkFuZ2xlICogREVHMlJBRCk7CiAgYWxpZ24gPSBhbGlnbi5yb3VuZCgpOwoKICAvL2xvZygnVGV4dC5yZW5kZXInLCB0ZXh0KTsKCiAgaWYoYWxpZ24ueSA9PSAwKSB0cmFuc2Zvcm0gPSB0cmFuc2Zvcm0uY29uY2F0KG5ldyBUcmFuc2xhdGlvbigwLCArMC4xMSkpOwoKICB0ZXh0ID0gKHRleHQgKyAnJykucmVwbGFjZSgvzqkvZywgJyYjeDIxMjY7JykucmVwbGFjZSgvzrwvZywgJyYjeGI1OycpOwogIGxvZyhgVGV4dC5yZW5kZXJgLCB7IHRyYW5zZm9ybWF0aW9uLCB0cmFuc2Zvcm0sIHRleHQsIGFsaWduIH0pOwoKICB2aXNpYmxlID0gdHJ1ZTsKCiAgcmV0dXJuIGgoRnJhZ21lbnQsIHt9LCBbCiAgICBoKAogICAgICAndGV4dCcsCiAgICAgIHsKICAgICAgICBjbGFzc05hbWUsCiAgICAgICAgZmlsbDogY29sb3IsCiAgICAgICAgc3Ryb2tlOiAnbm9uZScsCiAgICAgICAgJ3N0cm9rZS13aWR0aCc6IDAuMDUsCiAgICAgICAgc3R5bGU6IHZpc2libGUgPyB7IC4uLnN0eWxlIH0gOiB7IC4uLnN0eWxlLCBkaXNwbGF5OiAnbm9uZScgfSwKICAgICAgICAuLi5BbGlnbm1lbnRBdHRycyhhbGlnbiwgVkVSVElDQUwpLAogICAgICAgIC4uLnByb3BzLAogICAgICAgIHRyYW5zZm9ybQogICAgICB9LAogICAgICBoKAogICAgICAgICd0c3BhbicsCiAgICAgICAgewogICAgICAgICAgLi4uQWxpZ25tZW50QXR0cnMoYWxpZ24sIEhPUklaT05UQUwpLAogICAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6IHsgX19odG1sOiB0ZXh0IH0KICAgICAgICB9IC8qLCBoKEZyYWdtZW50LCB7fSwgW3RleHRdKSovCiAgICAgICkKICAgICkKICAgIC8vICAgIGgoQ3Jvc3MsIHsgeCwgeSwgcmFkaXVzOiAxLjI3IC8gNCB9KQogIF0pOwp9OwoAAAAAAAAAAEUMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3AUAAAAAAADcBQAAAAAAAAAAAAAA4GxA"
				],
				[
					1599,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABHDAAAaW1wb3J0IHsgbW9kIH0gZnJvbSAnLi4vLi4vbWlzYy5qcyc7CmltcG9ydCB7IGgsIEZyYWdtZW50LCBDb21wb25lbnQgfSBmcm9tICcuLi8uLi9kb20vcHJlYWN0Q29tcG9uZW50LmpzJzsKaW1wb3J0IHsgTWFrZVJvdGF0aW9uLCBBbGlnbm1lbnQsIEFsaWdubWVudEF0dHJzLCBWRVJUSUNBTCwgSE9SSVpPTlRBTCwgbG9nLCBSQUQyREVHLCBERUcyUkFELCB1c2VUcmFuc2Zvcm1hdGlvbiwgSW5mZXJSb3RhdGlvbiwgRXh0cmFjdFJvdGF0aW9uIH0gZnJvbSAnLi4vcmVuZGVyVXRpbHMuanMnOwppbXBvcnQgeyBUcmFuc2Zvcm1hdGlvbkxpc3QsIFJvdGF0aW9uLCBUcmFuc2xhdGlvbiwgUG9pbnQgfSBmcm9tICcuLi8uLi9nZW9tLmpzJzsKaW1wb3J0IHsgQ3Jvc3MgfSBmcm9tICcuL2Nyb3NzLmpzJzsKCmV4cG9ydCBjb25zdCBUZXh0ID0gKHsgeCwgeSwgdGV4dCwgY29sb3IsIGFsaWdubWVudCwgcm90LCB2aXNpYmxlLCBjbGFzc05hbWUsIG9wdHMgPSB7fSwgc3R5bGUsIC4uLnByb3BzIH0pID0+IHsKICBsZXQgdHJhbnNmb3JtYXRpb24yID0gdXNlVHJhbnNmb3JtYXRpb24ocHJvcHMudHJhbnNmb3JtYXRpb24pOwoKICBsZXQgeyB0cmFuc2Zvcm1hdGlvbiA9IG5ldyBUcmFuc2Zvcm1hdGlvbkxpc3QoKSB9ID0gb3B0czsKICBsb2coYFRleHQucmVuZGVyKDEpYCwgeyB0ZXh0LCB0cmFuc2Zvcm1hdGlvbiwgYWxpZ25tZW50IH0pOwogIGxldCBlbGVtZW50VHJhbnNmb3JtID0gdHJhbnNmb3JtYXRpb24uc2xpY2UodHJhbnNmb3JtYXRpb24uZmluZEluZGV4KGl0ZW0gPT4gaXRlbS50eXBlLnN0YXJ0c1dpdGgoJ3NjYWwnKSkgKyAxKTsKICBsZXQgcGFyZW50QW5nbGUgPSBNYXRoLnJvdW5kKGVsZW1lbnRUcmFuc2Zvcm0uYW5nbGUgKiBSQUQyREVHKTsKICBsb2coYFRleHQucmVuZGVyYCwgewogICAgdGV4dCwKICAgIHBhcmVudEFuZ2xlLAogICAgdHJhbnNmb3JtYXRpb24yLAogICAgeCwKICAgIHksCiAgICBhbGlnbm1lbnQsCiAgICByb3QKICB9KTsKCiAgbGV0IFtyb3RhdGlvbl0gPSBNYWtlUm90YXRpb24ocm90KTsKICBsZXQgcm90YXRpb25BbmdsZSA9IHJvdGF0aW9uID8gcm90YXRpb24uYW5nbGUgOiAwOwogIGxldCB0b3RhbEFuZ2xlID0gbW9kKHBhcmVudEFuZ2xlICsgcm90YXRpb25BbmdsZSwgMTgwKTsKICBsZXQgcmVhbEFuZ2xlID0gbW9kKHRvdGFsQW5nbGUgLSBwYXJlbnRBbmdsZSwgMzYwKTsKICBsZXQgZGlmZkFuZ2xlID0gbW9kKC1yb3RhdGlvbkFuZ2xlICsgcmVhbEFuZ2xlLCAzNjApOwoKICBsZXQgYW5nID0gLSh0cmFuc2Zvcm1hdGlvbj8ucm90YXRpb24/LmFuZ2xlID8/IDApOwogIGxldCBwYXJlbnRSb3QgPSBFeHRyYWN0Um90YXRpb24odHJhbnNmb3JtYXRpb24pOwogIGxldCBwYXJlbnRNYXRyaXggPSBwYXJlbnRSb3QudG9NYXRyaXgoKTsKICBsZXQgdmVjID0gbmV3IFBvaW50KHgsIHkpLnRyYW5zZm9ybShwYXJlbnRNYXRyaXguaW52ZXJ0KCkpOwogIC8vLnJvdGF0ZSgoYW5nICogTWF0aC5QSSkgLyAxODApCiAgbGV0IHRyYW5zZm9ybSA9IG5ldyBUcmFuc2Zvcm1hdGlvbkxpc3QoKQogICAgLmNvbmNhdChwYXJlbnRSb3QuaW52ZXJ0KCkpCiAgICAvLyAgICAucm90YXRlKGFuZykKICAgIC50cmFuc2xhdGUodmVjLngsIHZlYy55KQogICAgLmNvbmNhdCh0cmFuc2Zvcm1hdGlvbi5zY2FsaW5nID8gW3RyYW5zZm9ybWF0aW9uLmZpbmQodCA9PiB0LnR5cGUgPT0gJ3NjYWxlJyldIDogW10pOwogIC8vICAuY29uY2F0KHRyYW5zZm9ybWF0aW9uLnJvdGF0aW9uID8gW3RyYW5zZm9ybWF0aW9uLnJvdGF0aW9uLmludmVydCgpXSA6IFtdKQogIC8vLnJvdGF0ZSgtcmVhbEFuZ2xlICUgMTgwKQogIGNvbnNvbGUubG9nKGBUZXh0LnJlbmRlcigyKWAsIHsgdGV4dCwgdHJhbnNmb3JtYXRpb24sIGFuZywgdHJhbnNmb3JtIH0pOwoKICBsZXQgeyBzY2FsaW5nIH0gPSBlbGVtZW50VHJhbnNmb3JtOwogIGxldCBhbGlnbiA9IEFsaWdubWVudChhbGlnbm1lbnQsIGRpZmZBbmdsZSAtIGFuZywgc2NhbGluZyk7CiAgLy9sb2coYFRleHQucmVuZGVyYCwgeyB0ZXh0LCBwYXJlbnRBbmdsZSwgcm90YXRpb25BbmdsZSwgdG90YWxBbmdsZSwgcmVhbEFuZ2xlLCBkaWZmQW5nbGUsIHRyYW5zZm9ybSwgYWxpZ24gfSk7CgogIGxvZyhgVGV4dC5yZW5kZXIoMylgLCB7IGFsaWduLCBlbGVtZW50VHJhbnNmb3JtIH0pOwogIGxvZyhgVGV4dC5yZW5kZXJgLCB7IGFsaWdubWVudCwgYWxpZ24sIHNjYWxpbmcsIGVsZW1lbnRUcmFuc2Zvcm0gfSk7CgogIC8vYWxpZ24gPSBhbGlnbi5yb3RhdGUoZGlmZkFuZ2xlICogREVHMlJBRCk7CiAgYWxpZ24gPSBhbGlnbi5yb3VuZCgpOwoKICAvL2xvZygnVGV4dC5yZW5kZXInLCB0ZXh0KTsKCiAgaWYoYWxpZ24ueSA9PSAwKSB0cmFuc2Zvcm0gPSB0cmFuc2Zvcm0uY29uY2F0KG5ldyBUcmFuc2xhdGlvbigwLCArMC4xMSkpOwoKICB0ZXh0ID0gKHRleHQgKyAnJykucmVwbGFjZSgvzqkvZywgJyYjeDIxMjY7JykucmVwbGFjZSgvzrwvZywgJyYjeGI1OycpOwogIGxvZyhgVGV4dC5yZW5kZXJgLCB7IHRyYW5zZm9ybWF0aW9uLCB0cmFuc2Zvcm0sIHRleHQsIGFsaWduIH0pOwoKICB2aXNpYmxlID0gdHJ1ZTsKCiAgcmV0dXJuIGgoRnJhZ21lbnQsIHt9LCBbCiAgICBoKAogICAgICAndGV4dCcsCiAgICAgIHsKICAgICAgICBjbGFzc05hbWUsCiAgICAgICAgZmlsbDogY29sb3IsCiAgICAgICAgc3Ryb2tlOiAnbm9uZScsCiAgICAgICAgJ3N0cm9rZS13aWR0aCc6IDAuMDUsCiAgICAgICAgc3R5bGU6IHZpc2libGUgPyB7IC4uLnN0eWxlIH0gOiB7IC4uLnN0eWxlLCBkaXNwbGF5OiAnbm9uZScgfSwKICAgICAgICAuLi5BbGlnbm1lbnRBdHRycyhhbGlnbiwgVkVSVElDQUwpLAogICAgICAgIC4uLnByb3BzLAogICAgICAgIHRyYW5zZm9ybQogICAgICB9LAogICAgICBoKAogICAgICAgICd0c3BhbicsCiAgICAgICAgewogICAgICAgICAgLi4uQWxpZ25tZW50QXR0cnMoYWxpZ24sIEhPUklaT05UQUwpLAogICAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6IHsgX19odG1sOiB0ZXh0IH0KICAgICAgICB9IC8qLCBoKEZyYWdtZW50LCB7fSwgW3RleHRdKSovCiAgICAgICkKICAgICkKICAgIC8vICAgIGgoQ3Jvc3MsIHsgeCwgeSwgcmFkaXVzOiAxLjI3IC8gNCB9KQogIF0pOwp9OwoAAAAAAAAAAIcKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARQwAAAAAAABFDAAAAAAAAAAAAAAAACxA"
				],
				[
					1601,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACJCgAAaW1wb3J0IHsgbW9kIH0gZnJvbSAnLi4vLi4vbWlzYy5qcyc7CmltcG9ydCB7IGgsIEZyYWdtZW50LCBDb21wb25lbnQgfSBmcm9tICcuLi8uLi9kb20vcHJlYWN0Q29tcG9uZW50LmpzJzsKaW1wb3J0IHsgTWFrZVJvdGF0aW9uLCBBbGlnbm1lbnQsIEFsaWdubWVudEF0dHJzLCBWRVJUSUNBTCwgSE9SSVpPTlRBTCwgbG9nLCBSQUQyREVHLCBERUcyUkFELCB1c2VUcmFuc2Zvcm1hdGlvbiwgSW5mZXJSb3RhdGlvbiwgRXh0cmFjdFJvdGF0aW9uIH0gZnJvbSAnLi4vcmVuZGVyVXRpbHMuanMnOwppbXBvcnQgeyBUcmFuc2Zvcm1hdGlvbkxpc3QsIFJvdGF0aW9uLCBUcmFuc2xhdGlvbiwgUG9pbnQgfSBmcm9tICcuLi8uLi9nZW9tLmpzJzsKaW1wb3J0IHsgQ3Jvc3MgfSBmcm9tICcuL2Nyb3NzLmpzJzsKZXhwb3J0IGNvbnN0IFRleHQgPSAoeyB4LCB5LCB0ZXh0LCBjb2xvciwgYWxpZ25tZW50LCByb3QsIHZpc2libGUsIGNsYXNzTmFtZSwgb3B0cyA9IHt9LCBzdHlsZSwgLi4ucHJvcHMgfSkgPT4gewogIGxldCB0cmFuc2Zvcm1hdGlvbjIgPSB1c2VUcmFuc2Zvcm1hdGlvbihwcm9wcy50cmFuc2Zvcm1hdGlvbik7CiAgbGV0IHsgdHJhbnNmb3JtYXRpb24gPSBuZXcgVHJhbnNmb3JtYXRpb25MaXN0KCkgfSA9IG9wdHM7CiAgbG9nKGBUZXh0LnJlbmRlcigxKWAsIHsgdGV4dCwgdHJhbnNmb3JtYXRpb24sIGFsaWdubWVudCB9KTsKICBsZXQgZWxlbWVudFRyYW5zZm9ybSA9IHRyYW5zZm9ybWF0aW9uLnNsaWNlKHRyYW5zZm9ybWF0aW9uLmZpbmRJbmRleChpdGVtID0+IGl0ZW0udHlwZS5zdGFydHNXaXRoKCdzY2FsJykpICsgMSk7CiAgbGV0IHBhcmVudEFuZ2xlID0gTWF0aC5yb3VuZChlbGVtZW50VHJhbnNmb3JtLmFuZ2xlICogUkFEMkRFRyk7CiAgbG9nKGBUZXh0LnJlbmRlcmAsIHsKICAgIHRleHQsCiAgICBwYXJlbnRBbmdsZSwKICAgIHRyYW5zZm9ybWF0aW9uMiwKICAgIHgsCiAgICB5LAogICAgYWxpZ25tZW50LAogICAgcm90CiAgfSk7CiAgbGV0IFtyb3RhdGlvbl0gPSBNYWtlUm90YXRpb24ocm90KTsKICBsZXQgcm90YXRpb25BbmdsZSA9IHJvdGF0aW9uID8gcm90YXRpb24uYW5nbGUgOiAwOwogIGxldCB0b3RhbEFuZ2xlID0gbW9kKHBhcmVudEFuZ2xlICsgcm90YXRpb25BbmdsZSwgMTgwKTsKICBsZXQgcmVhbEFuZ2xlID0gbW9kKHRvdGFsQW5nbGUgLSBwYXJlbnRBbmdsZSwgMzYwKTsKICBsZXQgZGlmZkFuZ2xlID0gbW9kKC1yb3RhdGlvbkFuZ2xlICsgcmVhbEFuZ2xlLCAzNjApOwogIGxldCBhbmcgPSAtKHRyYW5zZm9ybWF0aW9uPy5yb3RhdGlvbj8uYW5nbGUgPz8gMCk7CiAgbGV0IHBhcmVudFJvdCA9IEV4dHJhY3RSb3RhdGlvbih0cmFuc2Zvcm1hdGlvbik7CiAgbGV0IHBhcmVudE1hdHJpeCA9IHBhcmVudFJvdC50b01hdHJpeCgpOwogIGxldCB2ZWMgPSBuZXcgUG9pbnQoeCwgeSkudHJhbnNmb3JtKHBhcmVudE1hdHJpeC5pbnZlcnQoKSk7CiAgbGV0IHRyYW5zZm9ybSA9IG5ldyBUcmFuc2Zvcm1hdGlvbkxpc3QoKQogICAgLmNvbmNhdChwYXJlbnRSb3QuaW52ZXJ0KCkpCiAgICAudHJhbnNsYXRlKHZlYy54LCB2ZWMueSkKICAgIC5jb25jYXQodHJhbnNmb3JtYXRpb24uc2NhbGluZyA/IFt0cmFuc2Zvcm1hdGlvbi5maW5kKHQgPT4gdC50eXBlID09ICdzY2FsZScpXSA6IFtdKTsKICBjb25zb2xlLmxvZyhgVGV4dC5yZW5kZXIoMilgLCB7IHRleHQsIHRyYW5zZm9ybWF0aW9uLCBhbmcsIHRyYW5zZm9ybSB9KTsKCiAgbGV0IHsgc2NhbGluZyB9ID0gZWxlbWVudFRyYW5zZm9ybTsKICBsZXQgYWxpZ24gPSBBbGlnbm1lbnQoYWxpZ25tZW50LCBkaWZmQW5nbGUgLSBhbmcsIHNjYWxpbmcpOwogIGxvZyhgVGV4dC5yZW5kZXIoMylgLCB7IGFsaWduLCBlbGVtZW50VHJhbnNmb3JtIH0pOwogIGxvZyhgVGV4dC5yZW5kZXJgLCB7IGFsaWdubWVudCwgYWxpZ24sIHNjYWxpbmcsIGVsZW1lbnRUcmFuc2Zvcm0gfSk7CiAgYWxpZ24gPSBhbGlnbi5yb3VuZCgpOwoKICBpZihhbGlnbi55ID09IDApIHRyYW5zZm9ybSA9IHRyYW5zZm9ybS5jb25jYXQobmV3IFRyYW5zbGF0aW9uKDAsICswLjExKSk7CiAgdGV4dCA9ICh0ZXh0ICsgJycpLnJlcGxhY2UoL86pL2csICcmI3gyMTI2OycpLnJlcGxhY2UoL868L2csICcmI3hiNTsnKTsKICBsb2coYFRleHQucmVuZGVyYCwgeyB0cmFuc2Zvcm1hdGlvbiwgdHJhbnNmb3JtLCB0ZXh0LCBhbGlnbiB9KTsKICB2aXNpYmxlID0gdHJ1ZTsKCiAgcmV0dXJuIGgoRnJhZ21lbnQsIHt9LCBbCiAgICBoKAogICAgICAndGV4dCcsCiAgICAgIHsKICAgICAgICBjbGFzc05hbWUsCiAgICAgICAgZmlsbDogY29sb3IsCiAgICAgICAgc3Ryb2tlOiAnbm9uZScsCiAgICAgICAgJ3N0cm9rZS13aWR0aCc6IDAuMDUsCiAgICAgICAgc3R5bGU6IHZpc2libGUgPyB7IC4uLnN0eWxlIH0gOiB7IC4uLnN0eWxlLCBkaXNwbGF5OiAnbm9uZScgfSwKICAgICAgICAuLi5BbGlnbm1lbnRBdHRycyhhbGlnbiwgVkVSVElDQUwpLAogICAgICAgIC4uLnByb3BzLAogICAgICAgIHRyYW5zZm9ybQogICAgICB9LAogICAgICBoKAogICAgICAgICd0c3BhbicsCiAgICAgICAgewogICAgICAgICAgLi4uQWxpZ25tZW50QXR0cnMoYWxpZ24sIEhPUklaT05UQUwpLAogICAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6IHsgX19odG1sOiB0ZXh0IH0KICAgICAgICB9CiAgICAgICkKICAgICkKICBdKTsKfTsKAAAAAAAAAABpCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfQIAAAAAAAB9AgAAAAAAAAAAAAAAAAAA"
				],
				[
					1686,
					1,
					"paste",
					null,
					"AQAAAB4HAAAAAAAAJwcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHgcAAAAAAAAeBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1687,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAACcHAAAAAAAAKAcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJwcAAAAAAAAnBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1720,
					1,
					"insert",
					{
						"characters": "xc"
					},
					"AgAAADQHAAAAAAAANQcAAAAAAAAAAAAANQcAAAAAAAA2BwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANAcAAAAAAAA0BwAAAAAAAAAAAAAAACxA"
				],
				[
					1721,
					2,
					"left_delete",
					null,
					"AgAAADUHAAAAAAAANQcAAAAAAAABAAAAYzQHAAAAAAAANAcAAAAAAAABAAAAeA",
					"AQAAAAAAAAABAAAANgcAAAAAAAA2BwAAAAAAAAAAAAAAAPC/"
				],
				[
					1722,
					1,
					"insert",
					{
						"characters": "console"
					},
					"BwAAADQHAAAAAAAANQcAAAAAAAAAAAAANQcAAAAAAAA2BwAAAAAAAAAAAAA2BwAAAAAAADcHAAAAAAAAAAAAADcHAAAAAAAAOAcAAAAAAAAAAAAAOAcAAAAAAAA5BwAAAAAAAAAAAAA5BwAAAAAAADoHAAAAAAAAAAAAADoHAAAAAAAAOwcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANAcAAAAAAAA0BwAAAAAAAAAAAAAAAPC/"
				],
				[
					1723,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAADsHAAAAAAAAPAcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOwcAAAAAAAA7BwAAAAAAAAAAAAAAAPC/"
				],
				[
					1726,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAADwHAAAAAAAAPQcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPAcAAAAAAAA8BwAAAAAAAAAAAAAAAPC/"
				],
				[
					1727,
					1,
					"left_delete",
					null,
					"AQAAADwHAAAAAAAAPAcAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAAPQcAAAAAAAA9BwAAAAAAAAAAAAAAAPC/"
				],
				[
					1800,
					1,
					"paste",
					null,
					"AgAAANQCAAAAAAAA9AIAAAAAAAAAAAAA9AIAAAAAAAD0AgAAAAAAAFkAAAB0cmFuc2Zvcm1hdGlvbi5zbGljZSh0cmFuc2Zvcm1hdGlvbi5maW5kSW5kZXgoaXRlbSA9PiBpdGVtLnR5cGUuc3RhcnRzV2l0aCgnc2NhbCcpKSArIDEpOw",
					"AQAAAAAAAAABAAAA1AIAAAAAAAAtAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1817,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAOMEAAAAAAAA5AQAAAAAAAAAAAAA5AQAAAAAAADlBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4wQAAAAAAADjBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1848,
					1,
					"insert",
					{
						"characters": "el"
					},
					"AwAAACsFAAAAAAAALAUAAAAAAAAAAAAALAUAAAAAAAAsBQAAAAAAAAkAAABwYXJlbnRSb3QsBQAAAAAAAC0FAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKwUAAAAAAAA0BQAAAAAAAAAAAAAAAPC/"
				],
				[
					1849,
					1,
					"left_delete",
					null,
					"AQAAACwFAAAAAAAALAUAAAAAAAABAAAAbA",
					"AQAAAAAAAAABAAAALQUAAAAAAAAtBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1850,
					1,
					"insert",
					{
						"characters": "leme"
					},
					"BAAAACwFAAAAAAAALQUAAAAAAAAAAAAALQUAAAAAAAAuBQAAAAAAAAAAAAAuBQAAAAAAAC8FAAAAAAAAAAAAAC8FAAAAAAAAMAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALAUAAAAAAAAsBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1851,
					1,
					"insert_completion",
					{
						"completion": "elementTransform",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "elementTransform"
					},
					"AgAAACsFAAAAAAAAKwUAAAAAAAAFAAAAZWxlbWUrBQAAAAAAADsFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMAUAAAAAAAAwBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1865,
					1,
					"paste",
					null,
					"AgAAAO4GAAAAAAAA/gYAAAAAAAAAAAAA/gYAAAAAAAD+BgAAAAAAAAkAAABwYXJlbnRSb3Q",
					"AQAAAAAAAAABAAAA7gYAAAAAAAD3BgAAAAAAAAAAAAAAAPC/"
				],
				[
					1903,
					1,
					"paste",
					null,
					"AgAAAL0FAAAAAAAAzQUAAAAAAAAAAAAAzQUAAAAAAADNBQAAAAAAAAkAAABwYXJlbnRSb3Q",
					"AQAAAAAAAAABAAAAvQUAAAAAAADGBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1913,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAPQFAAAAAAAA9gUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9AUAAAAAAAD0BQAAAAAAAAAAAAAAgGhA"
				],
				[
					1931,
					1,
					"insert",
					{
						"characters": ",alignment"
					},
					"CgAAAJcGAAAAAAAAmAYAAAAAAAAAAAAAmAYAAAAAAACZBgAAAAAAAAAAAACZBgAAAAAAAJoGAAAAAAAAAAAAAJoGAAAAAAAAmwYAAAAAAAAAAAAAmwYAAAAAAACcBgAAAAAAAAAAAACcBgAAAAAAAJ0GAAAAAAAAAAAAAJ0GAAAAAAAAngYAAAAAAAAAAAAAngYAAAAAAACfBgAAAAAAAAAAAACfBgAAAAAAAKAGAAAAAAAAAAAAAKAGAAAAAAAAoQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlwYAAAAAAACXBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1955,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAPkGAAAAAAAA+wYAAAAAAAAAAAAA8AYAAAAAAADyBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8AYAAAAAAAD5BgAAAAAAAAAAAAAAAPC/"
				],
				[
					1977,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAOEEAAAAAAAA4gQAAAAAAAAAAAAA4gQAAAAAAADiBAAAAAAAADUAAAAgIC8vbGV0IHBhcmVudFJvdCA9IEV4dHJhY3RSb3RhdGlvbih0cmFuc2Zvcm1hdGlvbik7Cg",
					"AQAAAAAAAAABAAAA4QQAAAAAAAAWBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1984,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAALwGAAAAAAAAvQYAAAAAAAAAAAAAvQYAAAAAAAC9BgAAAAAAAA0AAAAvKmRpZmZBbmdsZSov",
					"AQAAAAAAAAABAAAAvAYAAAAAAADJBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1997,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AgAAAOIGAAAAAAAA4wYAAAAAAAAAAAAA4wYAAAAAAADjBgAAAAAAAAkAAABjb25zb2xlLmw",
					"AQAAAAAAAAABAAAA4gYAAAAAAADrBgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/util.js",
			"settings":
			{
				"buffer_size": 187065,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "import { Matrix, isMatrix } from '../geom/matrix.js';\nimport { Point } from '../geom/point.js';\nimport Util from '../util.js';\n\nconst RAD2DEG = 180 / Math.PI;\nconst DEG2RAD = Math.PI / 180;\n\nexport class Transformation {\n  //typeName = null;\n\n  constructor(transformation) {\n    if(transformation instanceof Transformation) return transformation;\n    if(transformation instanceof TransformationList) return transformation;\n\n    if(typeof transformation == 'string') return Transformation.fromString(transformation);\n    //Util.define(this, { typeName });\n    //this.type = type;\n    //\n    throw new TypeError('Transformation');\n\n    return this;\n  }\n\n  get [Symbol.toStringTag]() {\n    return Util.functionName(this.constructor);\n  }\n\n  get type() {\n    let type =\n      this.typeName ||\n      Util.className(this)\n        .toLowerCase()\n        .replace(/transform(ation)?/, '')\n        .replace(/(ion|ing)$/, 'e');\n    return type;\n  }\n\n  get [Symbol.isConcatSpreadable]() {\n    return (\n      this.constructor === TransformationList ||\n      Object.getPrototypeOf(this) == TransformationList.prototype ||\n      Object.getPrototypeOf(this).constructor == TransformationList\n    );\n  }\n  get axes() {\n    return this.axis !== undefined ? [this.axis] : ['x', 'y', 'z'].filter(axis => axis in this);\n  }\n  get props() {\n    return this.axes.concat(['axis', 'angle'].filter(key => key in this));\n  }\n\n  has(axis) {\n    if(this.axis !== undefined) return axis === this.axis;\n    return axis in this;\n  }\n\n  get is3D() {\n    return this.has('z');\n  }\n\n  entries() {\n    return this.props.map(prop => [prop, this[prop]]);\n  }\n\n  toJSON() {\n    return Object.fromEntries(this.entries());\n  }\n\n  vector(unit) {\n    if(unit === undefined) unit = this.unit;\n    return (this.is3D ? ['x', 'y', 'z'] : ['x', 'y']).map(unit ? axis => this[axis] + unit : axis => this[axis]);\n  }\n\n  toString(tUnit) {\n    return `${this.type}${this.is3D ? '3d' : ''}(${this.vector(tUnit).join(', ')})`;\n  }\n\n  /*  toSource(unit) {\n    return Util.colorText('new ',1,31)+Util.colorText(Util.className(this), 1,33) +Util.colorText('(' +this.vector(unit).join(', ') + ')', 1 ,36);\n  }*/\n\n  clone() {\n    let desc = Object.getOwnPropertyDescriptors(this);\n    let props = this.props.reduce((acc, prop) => ({ ...acc, [prop]: desc[prop] }), {});\n    return Object.create(Object.getPrototypeOf(this), props);\n  }\n\n  static fromString(arg) {\n    let cmdLen = arg.indexOf('(');\n    let argStr = arg.slice(cmdLen + 1, arg.indexOf(')'));\n    let args = argStr.split(/[,\\s\\ ]+/g);\n    let cmd = arg.substring(0, cmdLen);\n    let t;\n    let unit;\n\n    args = args\n      .filter(arg => /^[-+0-9.]+[a-z]*$/.test(arg))\n      .map(arg => {\n        if(/[a-z]$/.test(arg)) {\n          unit = arg.replace(/[-+0-9.]*/g, '');\n          arg = arg.replace(/[a-z]*$/g, '');\n        }\n\n        return +arg;\n      });\n    //console.log('fromString', { cmd, args });\n\n    const is3D = cmd.toLowerCase().endsWith('3d');\n    if(is3D) cmd = cmd.slice(0, -2);\n\n    if(cmd.startsWith('rotat')) {\n      const axis = is3D ? '' : cmd.slice(6);\n      args = axis != '' ? [args[0], axis] : args;\n      t = new Rotation(...args);\n    } else if(cmd.startsWith('translat')) {\n      const axis = is3D ? '' : cmd.slice(9);\n      args = axis != '' ? [args[0], axis] : args;\n      t = new Translation(...args);\n    } else if(cmd.startsWith('scal')) {\n      const axis = is3D ? '' : cmd.slice(5);\n      args = axis != '' ? [args[0], axis] : args;\n      t = new Scaling(...args);\n    } else if(cmd.startsWith('matrix')) {\n      const [a, b, c, d, e, f] = args;\n      t = new MatrixTransformation(a, c, e, b, d, f);\n    }\n    if(unit) t.unit = unit;\n    return t;\n  }\n\n  /*[Symbol.toStringTag]() {\n    return this.toString();\n  }*/\n\n  [Symbol.toPrimitive](hint) {\n    // console.log(\"hint:\",hint);\n    if(hint == 'string' || hint == 'default') return this.toString();\n\n    return this.toString() != '';\n  }\n\n  /* [Symbol.for('nodejs.util.inspect.custom')]() {\n      return this;\n    }*/\n\n  static get rotation() {\n    return Rotation;\n  }\n  static get translation() {\n    return Translation;\n  }\n  static get scaling() {\n    return Scaling;\n  }\n  static get matrix() {\n    return MatrixTransformation;\n  }\n}\n\n//Transformation.prototype[Symbol.toStringTag]='Transformation';\n\nObject.defineProperty(Transformation, Symbol.hasInstance, {\n  value(inst) {\n    return [Transformation, MatrixTransformation, Rotation, Translation, Scaling, TransformationList].some(\n      ctor => Object.getPrototypeOf(inst) == ctor.prototype\n    );\n  }\n});\n\nexport const ImmutableTransformation = Util.immutableClass(Transformation);\n\nexport class Rotation extends Transformation {\n  angle = 0;\n  //axis = undefined;\n\n  constructor(angle, x, y) {\n    super('rotate');\n\n    if(typeof x == 'string' && ['x', 'y', 'z'].indexOf(x.toLowerCase()) != -1) {\n      this.axis = x.toLowerCase();\n    } else if(!isNaN(+x) && !isNaN(+y)) {\n      this.center = [+x, +y];\n    }\n    //else this.axis = 'z';\n    this.angle = angle;\n  }\n\n  invert() {\n    return new Rotation(-this.angle, this.axis);\n  }\n\n  get values() {\n    return { [this.axis || 'z']: this.angle };\n  }\n\n  get is3D() {\n    return this.axis == 'z';\n  }\n\n  isZero() {\n    return this.angle == 0;\n  }\n\n  toString(rUnit) {\n    rUnit = rUnit || this.unit || '';\n    const axis = this.axis !== undefined ? this.axis.toUpperCase() : '';\n    const angle = this.constructor.convertAngle(this.angle, rUnit);\n    return `rotate${this.is3D ? axis : ''}(${angle}${rUnit}${\n      this.center ? this.center.map(coord => `, ${coord}`).join('') : ''\n    })`;\n  }\n\n  toSource() {\n    let o =\n      Util.colorText('new ', 1, 31) +\n      Util.colorText(Util.className(this), 1, 33) +\n      Util.colorText('(' + this.angle + ')', 1, 36);\n\n    return o;\n  }\n\n  toMatrix(matrix = Matrix.identity()) {\n    const { center, angle } = this;\n    if(center) matrix.translateSelf(...[...center].map(coord => -coord));\n    matrix.rotateSelf(DEG2RAD * angle);\n    if(center) matrix.translateSelf(...center);\n    return matrix.roundSelf();\n  }\n\n  accumulate(other) {\n    if(this.type !== other.type && this.axis !== other.axis)\n      throw new Error(Util.className(this) + ': accumulate mismatch');\n    return new Rotation(this.angle + other.angle, this.axis);\n  }\n\n  static convertAngle(angle, unit) {\n    switch (unit) {\n      case 'deg':\n        return angle;\n      case 'rad':\n        return DEG2RAD * angle;\n      case 'turn':\n        return angle / 360;\n      default:\n        return angle;\n    }\n  }\n}\n\nObject.defineProperty(Rotation.prototype, Symbol.toStringTag, { value: 'Rotation', enumerable: false });\n\nexport const ImmutableRotation = Util.immutableClass(Rotation);\n\nexport class Translation extends Transformation {\n  x = 0;\n  y = 0;\n  //z = undefined;\n\n  constructor(...args) {\n    super('translate');\n\n    if(typeof args[1] == 'string' && ['x', 'y', 'z'].indexOf(args[1].toLowerCase()) != -1) {\n      const n = args.shift();\n      const axis = args.shift().toLowerCase();\n      this[axis] = n;\n    } else {\n      let numDim = [...args, '.'].findIndex(a => isNaN(+a));\n      const [x = 0, y = 0, z] = args.splice(0, numDim);\n      this.x = +x;\n      this.y = +y;\n      if(z !== undefined) this.z = +z;\n    }\n    if(args.length > 0 && typeof args[0] == 'string') this.unit = args.shift();\n  }\n\n  get values() {\n    const { x, y, z } = this;\n    return 'z' in this ? { x, y, z } : { x, y };\n  }\n\n  isZero() {\n    const { x, y, z } = this;\n    return 'z' in this ? x == 0 && y == 0 && z == 0 : x == 0 && y == 0;\n  }\n\n  toMatrix(matrix = Matrix.identity()) {\n    const { x, y } = this;\n    return matrix.translateSelf(x, y);\n  }\n\n  /*clone() {\n    const { x, y, z } = this;\n    return z !== undefined ? new Translation(x, y, z) : new Translation(x, y);\n  }*/\n\n  invert() {\n    const { x, y, z } = this;\n    return z !== undefined\n      ? new Translation(-x, -y, -z)\n      : new Translation(Math.abs(x) == 0 ? 0 : -x, Math.abs(y) == 0 ? 0 : -y);\n  }\n\n  accumulate(other) {\n    if(this.type !== other.type) throw new Error(Util.className(this) + ': accumulate mismatch');\n\n    if(this.is3D) return new Translation(this.x + other.x, this.y + other.y, this.z + other.z);\n    return new Translation(this.x + other.x, this.y + other.y);\n  }\n}\nObject.defineProperty(Translation.prototype, Symbol.toStringTag, { value: 'Translation', enumerable: false });\n\nexport const ImmutableTranslation = Util.immutableClass(Translation);\n\nexport class Scaling extends Transformation {\n  x = 1;\n  y = 1;\n  //z = undefined;\n\n  constructor(...args) {\n    super('scale');\n\n    if(typeof args[1] == 'string' && ['x', 'y', 'z'].indexOf(args[1].toLowerCase()) != -1) {\n      const n = args.shift();\n      const axis = args.shift().toLowerCase();\n      this[axis] = n;\n    } else {\n      const [x = 1, y, z] = args.splice(0, 3);\n      this.x = +x;\n      this.y = y === undefined ? this.x : +y;\n      if(z !== undefined) this.z = +z;\n    }\n  }\n\n  get values() {\n    const { x, y, z } = this;\n    return 'z' in this ? { x, y, z } : { x, y };\n  }\n\n  toMatrix(matrix = Matrix.identity()) {\n    const { x, y } = this;\n    return matrix.scaleSelf(x, y);\n  }\n\n  isZero() {\n    const { x, y, z } = this;\n    return 'z' in this ? x == 1 && y == 1 && z == 1 : x == 1 && y == 1;\n  }\n\n  toString() {\n    const vector = this.vector('');\n    const coords = /*Util.allEqual(vector) ? vector[0] : */ vector.join(', ');\n\n    return `${this.type}${this.is3D ? '3d' : ''}(${coords})`;\n  }\n\n  /*clone() {\n    const { x, y, z } = this;\n    return z !== undefined ? new Scaling(x, y, z) : new Scaling(x, y);\n  }*/\n\n  invert() {\n    const { x, y, z } = this;\n    return z !== undefined ? new Scaling(1 / x, 1 / y, 1 / z) : new Scaling(1 / x, 1 / y);\n  }\n\n  accumulate(other) {\n    if(this.type !== other.type) throw new Error(Util.className(this) + ': accumulate mismatch');\n\n    if(this.is3D) return new Scaling(this.x * other.x, this.y * other.y, this.z * other.z);\n    return new Scaling(this.x * other.x, this.y * other.y);\n  }\n}\nObject.defineProperty(Scaling.prototype, Symbol.toStringTag, { value: 'Scaling', enumerable: false });\n\nexport const ImmutableScaling = Util.immutableClass(Scaling);\n\nexport class MatrixTransformation extends Transformation {\n  matrix = Matrix.IDENTITY;\n\n  constructor(init) {\n    super('matrix');\n\n    if(init instanceof Matrix) this.matrix = init;\n    else if(isMatrix(init)) this.matrix = new Matrix(init);\n    else this.matrix = new Matrix(...arguments);\n  }\n\n  get values() {\n    return this.matrix.values();\n  }\n\n  toMatrix(matrix = Matrix.identity()) {\n    return matrix.multiplySelf(this.matrix);\n  }\n\n  toString() {\n    return this.matrix.toString('');\n  }\n\n  invert() {\n    return new MatrixTransformation(this.matrix.invert());\n  }\n\n  isZero() {\n    return this.matrix.isIdentity();\n  }\n\n  accumulate(other) {\n    if(this.type !== other.type) throw new Error(Util.className(this) + ': accumulate mismatch');\n\n    return new MatrixTransformation(this.matrix.multiply(other.matrix));\n  }\n}\nObject.defineProperty(MatrixTransformation.prototype, Symbol.toStringTag, {\n  value: 'MatrixTransformation',\n  enumerable: false\n});\n\nexport const ImmutableMatrixTransformation = Util.immutableClass(MatrixTransformation);\n\nexport class TransformationList extends Array {\n  constructor(init, tUnit, rUnit) {\n    super();\n    if(Util.isObject(init)) {\n      if(tUnit === undefined) tUnit = init.translationUnit || init.tUnit;\n      if(rUnit == undefined) rUnit = init.rotationUnit || init.rUnit;\n    }\n    //   if(typeof init != 'number' && typeof init != 'undefined' && !(Array.isArray(init) && init.length == 0)) console.debug(`TransformationList.constructor(`, typeof init == 'string' ? Util.abbreviate(init) : init, tUnit, rUnit, `)`);\n    if(init) {\n      this.initialize(init);\n      // if(!(typeof init == 'number' || (Array.isArray(init) && init.length == 0))) console.debug(`TransformationList   initialized to:`, this);\n    }\n    if(typeof tUnit == 'string') this.translationUnit = tUnit;\n    if(typeof rUnit == 'string') this.rotationUnit = rUnit;\n\n    return this;\n  }\n\n  initialize(init) {\n    if(typeof init == 'number') while(this.length < init) this.push(undefined);\n    else if(typeof init == 'string') TransformationList.prototype.fromString.call(this, init);\n    else if(init instanceof Array) TransformationList.prototype.fromArray.call(this, init);\n    else throw new Error('No such initialization: ' + init);\n    return this;\n  }\n\n  get [Symbol.isConcatSpreadable]() {\n    return true;\n  }\n\n  /*\n  [Symbol.toStringTag]() {\n    return this.toSource();\n  }*/\n\n  static get [Symbol.species]() {\n    return TransformationList;\n  }\n\n  get [Symbol.species]() {\n    return TransformationList;\n  }\n\n  fromString(str) {\n    let n,\n      a = [];\n\n    for(let i = 0; i < str.length; i += n) {\n      let s = str.slice(i);\n      n = s.indexOf(')') + 1;\n      if(n == 0) n = str.length;\n      s = s.slice(0, n).trim();\n      if(s != '') a.push(s);\n    }\n    return this.fromArray(a);\n  }\n\n  fromArray(arr) {\n    for(let i = 0; i < arr.length; i++) {\n      const arg = arr[i];\n\n      if(arg instanceof Transformation) this.push(arg);\n      else if(typeof arg == 'string') this.push(Transformation.fromString(arg));\n      else throw new Error('No such transformation: ' + arg);\n    }\n\n    return this;\n  }\n\n  get translationUnit() {\n    return (Util.isObject(this.translation) && this.translation.unit) || this.tUnit;\n  }\n  set translationUnit(value) {\n    if(Util.isObject(this.translation)) this.translation.unit = value;\n    else this.tUnit = value;\n  }\n\n  get rotationUnit() {\n    return (Util.isObject(this.rotation) && this.rotation.unit) || this.rUnit;\n  }\n  set rotationUnit(value) {\n    if(Util.isObject(this.rotation)) this.rotation.unit = value;\n    else this.rUnit = value;\n  }\n  static fromString(str) {\n    return new TransformationList().fromString(str);\n  }\n\n  static fromArray(arr) {\n    return new TransformationList().fromArray(arr);\n  }\n\n  static fromMatrix(matrix) {\n    matrix = matrix instanceof Matrix ? matrix : new Matrix(matrix);\n\n    const transformations = Matrix.decompose(matrix, true);\n\n    Util.extend(transformations.scale, {\n      toArray() {\n        return [this.x, this.y];\n      }\n    });\n    Util.extend(transformations.translate, {\n      toArray() {\n        return [this.x, this.y];\n      }\n    });\n\n    let ret = new TransformationList();\n\n    ret.translate(...transformations.translate.toArray());\n    ret.rotate(transformations.rotate);\n    ret.scale(...transformations.scale.toArray());\n\n    return ret;\n  }\n\n  push(...args) {\n    for(let arg of args) {\n      if(typeof arg == 'string') arg = Transformation.fromString(arg);\n      else if(isMatrix(arg)) arg = new MatrixTransformation(arg);\n\n      Array.prototype.push.call(this, arg);\n    }\n    return this;\n  }\n\n  clone() {\n    return this.map(t => t.clone()); // this.slice();\n  }\n\n  map(fn) {\n    return this.baseCall(Array.prototype.map)(fn);\n  }\n\n  slice(...args) {\n    return this.baseCall(Array.prototype.slice)(...args);\n  }\n\n  splice(...args) {\n    return this.baseCall(Array.prototype.splice)(...args);\n  }\n\n  concat(...args) {\n    return this.baseCall(Array.prototype.concat)(...args);\n  }\n\n  filter(pred) {\n    return this.baseCall(Array.prototype.filter)(pred);\n  }\n\n  baseCall(c = Array.prototype.map) {\n    return (...args) => {\n      const { tUnit, rUnit } = this;\n      let r = c.call(this, ...args);\n      if(tUnit) r.tUnit = tUnit;\n      if(rUnit) r.rUnit = rUnit;\n      return r;\n    };\n  }\n\n  unshift(...args) {\n    for(let arg of args.reverse()) {\n      if(typeof arg == 'string') arg = Transformation.fromString(arg);\n      Array.prototype.unshift.call(this, arg);\n    }\n    return this;\n  }\n\n  rotate(...args) {\n    let rotation = new Rotation(...args);\n    if(!rotation.isZero()) Array.prototype.push.call(this, rotation);\n    return this;\n  }\n\n  translate(x, y) {\n    let trans = this.filter(t => !t.type.startsWith('translat'));\n    let vec = new Point(x, y);\n\n    //trans.toMatrix().transform_point(vec);\n\n    vec = vec.round(0.00001, 5);\n    //console.log(\"from:\", new Point(x,y), \" to:\", vec);\n    let translation = new Translation(vec.x, vec.y);\n\n    if(!translation.isZero())\n      /*    if(Math.abs(vec.x) != 0 || Math.abs(vec.y) != 0) */ Array.prototype.push.call(this, translation);\n\n    return this;\n  }\n\n  scale(...args) {\n    let scaling = new Scaling(...args);\n    if(!scaling.isZero()) Array.prototype.push.call(this, scaling);\n    return this;\n  }\n\n  matrix(...args) {\n    let matrixTransformation = new MatrixTransformation(...args);\n    if(!matrixTransformation.isZero()) Array.prototype.push.call(this, matrixTransformation);\n    return this;\n  }\n\n  toString(tUnit, rUnit) {\n    if(this.length > 0) {\n      tUnit = tUnit || this.translationUnit;\n      rUnit = rUnit || this.rotationUnit;\n      let r = this.map(\n        t => t && t.type && t.toString(t.type.startsWith('scal') ? '' : t.type.startsWith('rotat') ? rUnit : tUnit)\n      ).join(' ');\n      return r;\n    }\n    return '';\n  }\n\n  toDOM() {\n    return this.toString('px', 'deg');\n  }\n\n  /*  [Symbol.toStringTag]() {\n    return this.toString();\n  }*/\n\n  toSource() {\n    let s = Util.colorText('new ', 1, 31) + Util.colorText(Util.className(this), 1, 33) + Util.colorText('([', 1, 36);\n\n    s += this.map(t => t.toSource()).join(', ');\n    return s + Util.colorText('])', 1, 36);\n  }\n\n  toMatrices() {\n    return Array.prototype.map.call([...this], t => t.toMatrix());\n  }\n\n  toMatrix(matrix = Matrix.identity()) {\n    for(let other of this.toMatrices()) matrix.multiplySelf(other);\n\n    return matrix.roundSelf();\n  }\n\n  undo() {\n    let ret = new TransformationList();\n\n    for(let i = this.length - 1; i >= 0; i--) Array.prototype.push.call(ret, this[i].invert());\n\n    return ret;\n  }\n\n  merge(...args) {\n    for(let arg of args) {\n      if(typeof arg == 'string') arg = TransformationList.fromString(arg);\n\n      TransformationList.prototype.push.apply(this, arg);\n    }\n    return this;\n  }\n\n  decompose(degrees = true, transformationList = true) {\n    let matrix = this.toMatrix();\n    const { translate, rotate, scale } = matrix.decompose(degrees);\n    let decomposed = { translate, rotate, scale };\n\n    if(transformationList) {\n      let ret = new TransformationList();\n      ret.translate(translate.x, translate.y, translate.z);\n      ret.rotate(rotate);\n      ret.scale(scale.x, scale.y, scale.z);\n      return ret;\n    }\n\n    decomposed.scale.toArray = decomposed.translate.toArray = function toArray() {\n      return [this.x, this.y];\n    };\n    return decomposed;\n  }\n\n  findLastIndex(predicate) {\n    for(let i = this.length - 1; i >= 0; --i) {\n      const x = this[i];\n      if(predicate(x)) return i;\n    }\n    return null;\n  }\n\n  findLast(predicate) {\n    let index = this.findLastIndex(predicate);\n    return this[index];\n  }\n\n  get rotation() {\n    return this.findLast(item => item && item.type && item.type.startsWith('rotat'));\n  }\n  set rotation(value) {\n    let index = this.findLastIndex(item => item.type.startsWith('rotat'));\n    value = value instanceof Rotation ? value : new Rotation(value);\n    Array.prototype.splice.call(this, index, 1, value);\n  }\n\n  get scaling() {\n    return this.findLast(item => item && item.type && item.type.startsWith('scal'));\n  }\n  set scaling(value) {\n    let index = this.findLastIndex(item => item.type.startsWith('scal'));\n    value = value instanceof Scaling ? value : new Scaling(value);\n    Array.prototype.splice.call(this, index, 1, value);\n  }\n\n  get translation() {\n    return this.findLast(item => item && item.type && typeof item.type == 'string' && item.type.startsWith('translat'));\n  }\n\n  set translation(value) {\n    let index = this.findLastIndex(item => item && item.type && item.type.startsWith('transl'));\n    value = value instanceof Translation ? value : new Translation(value);\n    Array.prototype.splice.call(this, index, 1, value);\n  }\n  /*  map(...args) {\n    return Array.prototype.map.apply(Array.from(this), args);\n  }*/\n\n  get last() {\n    return this.at(-1);\n  }\n  get first() {\n    return this.at(0);\n  }\n\n  at(pos) {\n    if(pos < 0) pos += this.length;\n    return this[pos];\n  }\n\n  collapse() {\n    let ret = new TransformationList();\n\n    for(let i = 0; i < this.length; i++) {\n      let item = this[i];\n      if(i + 1 < this.length && this[i + 1].type == this[i].type) {\n        item = item.accumulate(this[i + 1]);\n        i++;\n      } else {\n        item = item.clone();\n      }\n      Array.prototype.push.call(ret, item);\n    }\n    return ret;\n  }\n\n  collapseAll() {\n    return TransformationList.fromMatrix(this.toMatrix());\n  }\n\n  get angle() {\n    let matrix = this.toMatrix();\n    let t = matrix.decompose();\n    let { rotate } = t;\n    //console.log('ROTATION:', rotate);\n    return rotate;\n  }\n\n  invert() {\n    //return this.reduce((acc, t) => [t.invert(), ...acc], []);\n    return new TransformationList(this.reduceRight((acc, t) => [...acc, t.invert()], []));\n  }\n\n  join(sep = ' ') {\n    return Array.prototype.join.call(this, sep);\n  }\n\n  clear() {\n    Array.prototype.splice.call(this, 0, this.length);\n    return this;\n  }\n\n  apply(obj, round = true) {\n    if(typeof obj.transform == 'function') {\n      const matrix = this.toMatrix();\n      return obj.transform(matrix, round);\n    }\n  }\n}\nObject.defineProperty(TransformationList.prototype, Symbol.toStringTag, {\n  value: 'TransformationList',\n  enumerable: false\n});\n\nconst {\n  concat,\n  copyWithin,\n  find,\n  findIndex,\n  lastIndexOf,\n  pop,\n  push,\n  shift,\n  unshift,\n  slice,\n  splice,\n  includes,\n  indexOf,\n  entries,\n  filter,\n  map,\n  every,\n  some,\n  reduce,\n  reduceRight\n} = Array.prototype;\n\nUtil.inherit(\n  TransformationList.prototype,\n  {\n    // concat,\n    copyWithin,\n    find,\n    findIndex,\n    lastIndexOf,\n    pop,\n    shift,\n    //   slice,\n    //splice,\n    includes,\n    indexOf,\n    entries,\n    //  filter,\n    //  map,\n    every,\n    some,\n    reduce,\n    reduceRight\n  },\n  {\n    [Symbol.iterator]() {\n      return Array.prototype[Symbol.iterator];\n    },\n    [Symbol.isConcatSpreadable]() {\n      return true;\n    }\n  }\n);\n\n//Object.setPrototypeOf(TransformationList.prototype, Transformation.prototype);\n\nexport const ImmutableTransformationList = Util.immutableClass(TransformationList);\n\nImmutableTransformationList.prototype.rotate = function(...args) {\n  return this.concat([new ImmutableRotation(...args)]);\n};\n\nImmutableTransformationList.prototype.translate = function(...args) {\n  return this.concat([new ImmutableTranslation(...args)]);\n};\n\nImmutableTransformationList.prototype.scale = function(...args) {\n  return this.concat([new ImmutableScaling(...args)]);\n};\n\nUtil.defineGetter(ImmutableTransformationList, Symbol.species, () => ImmutableTransformationList);\n",
			"file": "lib/geom/transformation.js",
			"file_size": 22787,
			"file_write_time": 133227062755872265,
			"settings":
			{
				"buffer_size": 22787,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					2,
					1,
					"left_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAAQAAAAAAAAABAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/eagle/renderUtils.js",
			"settings":
			{
				"buffer_size": 16037,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					42,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAAEUNAAAAAAAARg0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARQ0AAAAAAABFDQAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"left_delete",
					null,
					"AQAAAEUNAAAAAAAARQ0AAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAARg0AAAAAAABGDQAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": "typeof"
					},
					"BgAAAEUNAAAAAAAARg0AAAAAAAAAAAAARg0AAAAAAABHDQAAAAAAAAAAAABHDQAAAAAAAEgNAAAAAAAAAAAAAEgNAAAAAAAASQ0AAAAAAAAAAAAASQ0AAAAAAABKDQAAAAAAAAAAAABKDQAAAAAAAEsNAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARQ0AAAAAAABFDQAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": " align"
					},
					"BgAAAEsNAAAAAAAATA0AAAAAAAAAAAAATA0AAAAAAABNDQAAAAAAAAAAAABNDQAAAAAAAE4NAAAAAAAAAAAAAE4NAAAAAAAATw0AAAAAAAAAAAAATw0AAAAAAABQDQAAAAAAAAAAAABQDQAAAAAAAFENAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASw0AAAAAAABLDQAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": " =="
					},
					"AwAAAFENAAAAAAAAUg0AAAAAAAAAAAAAUg0AAAAAAABTDQAAAAAAAAAAAABTDQAAAAAAAFQNAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUQ0AAAAAAABRDQAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": " 'string'"
					},
					"CQAAAFQNAAAAAAAAVQ0AAAAAAAAAAAAAVQ0AAAAAAABWDQAAAAAAAAAAAABWDQAAAAAAAFcNAAAAAAAAAAAAAFcNAAAAAAAAWA0AAAAAAAAAAAAAWA0AAAAAAABZDQAAAAAAAAAAAABZDQAAAAAAAFoNAAAAAAAAAAAAAFoNAAAAAAAAWw0AAAAAAAAAAAAAWw0AAAAAAABcDQAAAAAAAAAAAABcDQAAAAAAAF0NAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVA0AAAAAAABUDQAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": " c"
					},
					"AgAAAF0NAAAAAAAAXg0AAAAAAAAAAAAAXg0AAAAAAABfDQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXQ0AAAAAAABdDQAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					1,
					"left_delete",
					null,
					"AQAAAF4NAAAAAAAAXg0AAAAAAAABAAAAYw",
					"AQAAAAAAAAABAAAAXw0AAAAAAABfDQAAAAAAAAAAAAAAAPC/"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": " ?"
					},
					"AgAAAF4NAAAAAAAAXw0AAAAAAAAAAAAAXw0AAAAAAABgDQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXg0AAAAAAABeDQAAAAAAAAAAAAAAAPC/"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGANAAAAAAAAYQ0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYA0AAAAAAABgDQAAAAAAAAAAAAAAAPC/"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAHgNAAAAAAAAeQ0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeA0AAAAAAAB4DQAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHkNAAAAAAAAeg0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeQ0AAAAAAAB5DQAAAAAAAAAAAAAAAPC/"
				],
				[
					59,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHoNAAAAAAAAew0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeg0AAAAAAAB6DQAAAAAAAAAAAAAAAPC/"
				],
				[
					61,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAHoNAAAAAAAAfA0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeg0AAAAAAAB6DQAAAAAAAAAAAAAAAPC/"
				],
				[
					62,
					1,
					"insert",
					{
						"characters": "...align"
					},
					"CAAAAHsNAAAAAAAAfA0AAAAAAAAAAAAAfA0AAAAAAAB9DQAAAAAAAAAAAAB9DQAAAAAAAH4NAAAAAAAAAAAAAH4NAAAAAAAAfw0AAAAAAAAAAAAAfw0AAAAAAACADQAAAAAAAAAAAACADQAAAAAAAIENAAAAAAAAAAAAAIENAAAAAAAAgg0AAAAAAAAAAAAAgg0AAAAAAACDDQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAew0AAAAAAAB7DQAAAAAAAAAAAAAAAPC/"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAIQNAAAAAAAAhQ0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhA0AAAAAAACEDQAAAAAAAAAAAAAAAPC/"
				],
				[
					71,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAAEUNAAAAAAAARg0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARQ0AAAAAAABFDQAAAAAAAAAAAAAAAPC/"
				],
				[
					109,
					1,
					"insert",
					{
						"characters": ".round"
					},
					"BgAAAF8OAAAAAAAAYA4AAAAAAAAAAAAAYA4AAAAAAABhDgAAAAAAAAAAAABhDgAAAAAAAGIOAAAAAAAAAAAAAGIOAAAAAAAAYw4AAAAAAAAAAAAAYw4AAAAAAABkDgAAAAAAAAAAAABkDgAAAAAAAGUOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXw4AAAAAAABfDgAAAAAAAAAAAAAAAPC/"
				],
				[
					110,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAGUOAAAAAAAAZw4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZQ4AAAAAAABlDgAAAAAAAAAAAAAAAPC/"
				],
				[
					111,
					1,
					"insert",
					{
						"characters": "0.5"
					},
					"AwAAAGYOAAAAAAAAZw4AAAAAAAAAAAAAZw4AAAAAAABoDgAAAAAAAAAAAABoDgAAAAAAAGkOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZg4AAAAAAABmDgAAAAAAAAAAAAAAAPC/"
				],
				[
					117,
					3,
					"left_delete",
					null,
					"AwAAAGkOAAAAAAAAaQ4AAAAAAAABAAAAKWgOAAAAAAAAaA4AAAAAAAABAAAANWcOAAAAAAAAZw4AAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAAag4AAAAAAABqDgAAAAAAAAAAAAAAAPC/"
				],
				[
					118,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAAGcOAAAAAAAAaA4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZw4AAAAAAABnDgAAAAAAAAAAAAAAAPC/"
				],
				[
					119,
					2,
					"left_delete",
					null,
					"AgAAAGcOAAAAAAAAZw4AAAAAAAABAAAAMWYOAAAAAAAAZg4AAAAAAAABAAAAMA",
					"AQAAAAAAAAABAAAAaA4AAAAAAABoDgAAAAAAAAAAAAAAAPC/"
				],
				[
					120,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAGYOAAAAAAAAZw4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZg4AAAAAAABmDgAAAAAAAAAAAAAAAPC/"
				],
				[
					121,
					1,
					"left_delete",
					null,
					"AQAAAGYOAAAAAAAAZg4AAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAZw4AAAAAAABnDgAAAAAAAAAAAAAAAPC/"
				],
				[
					122,
					1,
					"insert",
					{
						"characters": "1)"
					},
					"AgAAAGYOAAAAAAAAZw4AAAAAAAAAAAAAZw4AAAAAAABoDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZg4AAAAAAABmDgAAAAAAAAAAAAAAAPC/"
				],
				[
					127,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAaA4AAAAAAABoDgAAAAAAAAAAAAAAAPC/"
				],
				[
					138,
					1,
					"cut",
					null,
					"AQAAAEAKAAAAAAAAQAoAAAAAAACfAQAACmV4cG9ydCBjb25zdCBNYWtlUm90YXRpb24gPSAocm90LCBmID0gMSkgPT4gewogIGxldCBtaXJyb3IsIGFuZ2xlOwogIGlmKCFyb3QpIHsKICAgIG1pcnJvciA9IDA7CiAgICBhbmdsZSA9IDA7CiAgfSBlbHNlIHsKICAgIG1pcnJvciA9IC9NLy50ZXN0KHJvdCkgPyAxIDogMDsKICAgIGFuZ2xlID0gKygocm90ICYmIHJvdCArICcnKSB8fCAnJykucmVwbGFjZSgvTT9SLywgJycpIHx8IDA7CiAgfQogIGxldCB0cmFuc2Zvcm1hdGlvbnMgPSBuZXcgVHJhbnNmb3JtYXRpb25MaXN0KFtdLCAnJywgJycpOwogIGlmKGFuZ2xlICE9PSAwKSB0cmFuc2Zvcm1hdGlvbnMucm90YXRlKGFuZ2xlKTsKICBpZihtaXJyb3IgIT09IDApIHRyYW5zZm9ybWF0aW9ucy5zY2FsZSgtMSwgMSk7CgogIHJldHVybiB0cmFuc2Zvcm1hdGlvbnM7Cn07Cg",
					"AQAAAAAAAAABAAAAQAoAAAAAAADfCwAAAAAAAAAAAAAAAPC/"
				],
				[
					139,
					2,
					"paste",
					null,
					"AgAAAEAKAAAAAAAA3wsAAAAAAAAAAAAA3wsAAAAAAAB+DQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQAoAAAAAAABACgAAAAAAAAAAAAAAAPC/"
				],
				[
					142,
					1,
					"insert",
					{
						"characters": "Infgre"
					},
					"BwAAAO0LAAAAAAAA7gsAAAAAAAAAAAAA7gsAAAAAAADuCwAAAAAAAAQAAABNYWtl7gsAAAAAAADvCwAAAAAAAAAAAADvCwAAAAAAAPALAAAAAAAAAAAAAPALAAAAAAAA8QsAAAAAAAAAAAAA8QsAAAAAAADyCwAAAAAAAAAAAADyCwAAAAAAAPMLAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7QsAAAAAAADxCwAAAAAAAAAAAAAAAPC/"
				],
				[
					143,
					3,
					"left_delete",
					null,
					"AwAAAPILAAAAAAAA8gsAAAAAAAABAAAAZfELAAAAAAAA8QsAAAAAAAABAAAAcvALAAAAAAAA8AsAAAAAAAABAAAAZw",
					"AQAAAAAAAAABAAAA8wsAAAAAAADzCwAAAAAAAAAAAAAAAPC/"
				],
				[
					144,
					1,
					"insert",
					{
						"characters": "er"
					},
					"AgAAAPALAAAAAAAA8QsAAAAAAAAAAAAA8QsAAAAAAADyCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8AsAAAAAAADwCwAAAAAAAAAAAAAAAPC/"
				],
				[
					152,
					1,
					"insert",
					{
						"characters": "trtan"
					},
					"BgAAAP4LAAAAAAAA/wsAAAAAAAAAAAAA/wsAAAAAAAD/CwAAAAAAAAoAAAByb3QsIGYgPSAx/wsAAAAAAAAADAAAAAAAAAAAAAAADAAAAAAAAAEMAAAAAAAAAAAAAAEMAAAAAAAAAgwAAAAAAAAAAAAAAgwAAAAAAAADDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/gsAAAAAAAAIDAAAAAAAAAAAAAAAAPC/"
				],
				[
					153,
					3,
					"left_delete",
					null,
					"AwAAAAIMAAAAAAAAAgwAAAAAAAABAAAAbgEMAAAAAAAAAQwAAAAAAAABAAAAYQAMAAAAAAAAAAwAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAAAwwAAAAAAAADDAAAAAAAAAAAAAAAAPC/"
				],
				[
					154,
					1,
					"insert",
					{
						"characters": "ansformation"
					},
					"DAAAAAAMAAAAAAAAAQwAAAAAAAAAAAAAAQwAAAAAAAACDAAAAAAAAAAAAAACDAAAAAAAAAMMAAAAAAAAAAAAAAMMAAAAAAAABAwAAAAAAAAAAAAABAwAAAAAAAAFDAAAAAAAAAAAAAAFDAAAAAAAAAYMAAAAAAAAAAAAAAYMAAAAAAAABwwAAAAAAAAAAAAABwwAAAAAAAAIDAAAAAAAAAAAAAAIDAAAAAAAAAkMAAAAAAAAAAAAAAkMAAAAAAAACgwAAAAAAAAAAAAACgwAAAAAAAALDAAAAAAAAAAAAAALDAAAAAAAAAwMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAwAAAAAAAAADAAAAAAAAAAAAAAAAPC/"
				],
				[
					166,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAABMMAAAAAAAAFAwAAAAAAAAAAAAAFAwAAAAAAAAVDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEwwAAAAAAAATDAAAAAAAAAAAAAAAAAAA"
				],
				[
					175,
					1,
					"insert",
					{
						"characters": "\nif"
					},
					"AwAAABMMAAAAAAAAFAwAAAAAAAAAAAAAFAwAAAAAAAAVDAAAAAAAAAAAAAAVDAAAAAAAABYMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEwwAAAAAAAATDAAAAAAAAAAAAAAAAAAA"
				],
				[
					176,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAABYMAAAAAAAAGAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFgwAAAAAAAAWDAAAAAAAAAAAAAAAAPC/"
				],
				[
					177,
					1,
					"insert",
					{
						"characters": "transformations"
					},
					"DwAAABcMAAAAAAAAGAwAAAAAAAAAAAAAGAwAAAAAAAAZDAAAAAAAAAAAAAAZDAAAAAAAABoMAAAAAAAAAAAAABoMAAAAAAAAGwwAAAAAAAAAAAAAGwwAAAAAAAAcDAAAAAAAAAAAAAAcDAAAAAAAAB0MAAAAAAAAAAAAAB0MAAAAAAAAHgwAAAAAAAAAAAAAHgwAAAAAAAAfDAAAAAAAAAAAAAAfDAAAAAAAACAMAAAAAAAAAAAAACAMAAAAAAAAIQwAAAAAAAAAAAAAIQwAAAAAAAAiDAAAAAAAAAAAAAAiDAAAAAAAACMMAAAAAAAAAAAAACMMAAAAAAAAJAwAAAAAAAAAAAAAJAwAAAAAAAAlDAAAAAAAAAAAAAAlDAAAAAAAACYMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFwwAAAAAAAAXDAAAAAAAAAAAAAAAAPC/"
				],
				[
					180,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAABMMAAAAAAAAFAwAAAAAAAAAAAAAFAwAAAAAAAAVDAAAAAAAAAAAAAAVDAAAAAAAABYMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEwwAAAAAAAATDAAAAAAAAAAAAAAAoGBA"
				],
				[
					181,
					1,
					"insert",
					{
						"characters": " t"
					},
					"AgAAABYMAAAAAAAAFwwAAAAAAAAAAAAAFwwAAAAAAAAYDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFgwAAAAAAAAWDAAAAAAAAAAAAAAAAPC/"
				],
				[
					182,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAABgMAAAAAAAAGQwAAAAAAAAAAAAAGQwAAAAAAAAaDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGAwAAAAAAAAYDAAAAAAAAAAAAAAAAPC/"
				],
				[
					183,
					1,
					"insert",
					{
						"characters": " transformations.s"
					},
					"EgAAABoMAAAAAAAAGwwAAAAAAAAAAAAAGwwAAAAAAAAcDAAAAAAAAAAAAAAcDAAAAAAAAB0MAAAAAAAAAAAAAB0MAAAAAAAAHgwAAAAAAAAAAAAAHgwAAAAAAAAfDAAAAAAAAAAAAAAfDAAAAAAAACAMAAAAAAAAAAAAACAMAAAAAAAAIQwAAAAAAAAAAAAAIQwAAAAAAAAiDAAAAAAAAAAAAAAiDAAAAAAAACMMAAAAAAAAAAAAACMMAAAAAAAAJAwAAAAAAAAAAAAAJAwAAAAAAAAlDAAAAAAAAAAAAAAlDAAAAAAAACYMAAAAAAAAAAAAACYMAAAAAAAAJwwAAAAAAAAAAAAAJwwAAAAAAAAoDAAAAAAAAAAAAAAoDAAAAAAAACkMAAAAAAAAAAAAACkMAAAAAAAAKgwAAAAAAAAAAAAAKgwAAAAAAAArDAAAAAAAAAAAAAArDAAAAAAAACwMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGgwAAAAAAAAaDAAAAAAAAAAAAAAAAPC/"
				],
				[
					184,
					1,
					"insert",
					{
						"characters": "lice"
					},
					"BAAAACwMAAAAAAAALQwAAAAAAAAAAAAALQwAAAAAAAAuDAAAAAAAAAAAAAAuDAAAAAAAAC8MAAAAAAAAAAAAAC8MAAAAAAAAMAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALAwAAAAAAAAsDAAAAAAAAAAAAAAAAPC/"
				],
				[
					185,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADAMAAAAAAAAMgwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMAwAAAAAAAAwDAAAAAAAAAAAAAAAAPC/"
				],
				[
					188,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADEMAAAAAAAAMgwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMQwAAAAAAAAxDAAAAAAAAAAAAAAAAPC/"
				],
				[
					192,
					1,
					"insert",
					{
						"characters": "\n\ntzran"
					},
					"BwAAADEMAAAAAAAAMgwAAAAAAAAAAAAAMgwAAAAAAAAzDAAAAAAAAAAAAAAzDAAAAAAAADQMAAAAAAAAAAAAADQMAAAAAAAANQwAAAAAAAAAAAAANQwAAAAAAAA2DAAAAAAAAAAAAAA2DAAAAAAAADcMAAAAAAAAAAAAADcMAAAAAAAAOAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMQwAAAAAAAAxDAAAAAAAAAAAAAAAAPC/"
				],
				[
					193,
					4,
					"left_delete",
					null,
					"BAAAADcMAAAAAAAANwwAAAAAAAABAAAAbjYMAAAAAAAANgwAAAAAAAABAAAAYTUMAAAAAAAANQwAAAAAAAABAAAAcjQMAAAAAAAANAwAAAAAAAABAAAAeg",
					"AQAAAAAAAAABAAAAOAwAAAAAAAA4DAAAAAAAAAAAAAAAAPC/"
				],
				[
					194,
					1,
					"insert",
					{
						"characters": "ransformations.l"
					},
					"EAAAADQMAAAAAAAANQwAAAAAAAAAAAAANQwAAAAAAAA2DAAAAAAAAAAAAAA2DAAAAAAAADcMAAAAAAAAAAAAADcMAAAAAAAAOAwAAAAAAAAAAAAAOAwAAAAAAAA5DAAAAAAAAAAAAAA5DAAAAAAAADoMAAAAAAAAAAAAADoMAAAAAAAAOwwAAAAAAAAAAAAAOwwAAAAAAAA8DAAAAAAAAAAAAAA8DAAAAAAAAD0MAAAAAAAAAAAAAD0MAAAAAAAAPgwAAAAAAAAAAAAAPgwAAAAAAAA/DAAAAAAAAAAAAAA/DAAAAAAAAEAMAAAAAAAAAAAAAEAMAAAAAAAAQQwAAAAAAAAAAAAAQQwAAAAAAABCDAAAAAAAAAAAAABCDAAAAAAAAEMMAAAAAAAAAAAAAEMMAAAAAAAARAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANAwAAAAAAAA0DAAAAAAAAAAAAAAAAPC/"
				],
				[
					195,
					1,
					"left_delete",
					null,
					"AQAAAEMMAAAAAAAAQwwAAAAAAAABAAAAbA",
					"AQAAAAAAAAABAAAARAwAAAAAAABEDAAAAAAAAAAAAAAAAPC/"
				],
				[
					196,
					1,
					"insert",
					{
						"characters": "scaling"
					},
					"BwAAAEMMAAAAAAAARAwAAAAAAAAAAAAARAwAAAAAAABFDAAAAAAAAAAAAABFDAAAAAAAAEYMAAAAAAAAAAAAAEYMAAAAAAAARwwAAAAAAAAAAAAARwwAAAAAAABIDAAAAAAAAAAAAABIDAAAAAAAAEkMAAAAAAAAAAAAAEkMAAAAAAAASgwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQwwAAAAAAABDDAAAAAAAAAAAAAAAAPC/"
				],
				[
					201,
					1,
					"cut",
					null,
					"AQAAADMMAAAAAAAAMwwAAAAAAAAXAAAAdHJhbnNmb3JtYXRpb25zLnNjYWxpbmc",
					"AQAAAAAAAAABAAAASgwAAAAAAAAzDAAAAAAAAAAAAAAAAAAA"
				],
				[
					203,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAABMMAAAAAAAAFAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEwwAAAAAAAATDAAAAAAAAAAAAAAAAAAA"
				],
				[
					205,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAABMMAAAAAAAAFAwAAAAAAAAAAAAAFAwAAAAAAAAVDAAAAAAAAAAAAAAVDAAAAAAAABYMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEwwAAAAAAAATDAAAAAAAAAAAAAAAAAAA"
				],
				[
					206,
					1,
					"insert",
					{
						"characters": " sc="
					},
					"BAAAABYMAAAAAAAAFwwAAAAAAAAAAAAAFwwAAAAAAAAYDAAAAAAAAAAAAAAYDAAAAAAAABkMAAAAAAAAAAAAABkMAAAAAAAAGgwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFgwAAAAAAAAWDAAAAAAAAAAAAAAAAPC/"
				],
				[
					207,
					1,
					"paste",
					null,
					"AQAAABoMAAAAAAAAMQwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGgwAAAAAAAAaDAAAAAAAAAAAAAAAAPC/"
				],
				[
					208,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAADEMAAAAAAAAMgwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMQwAAAAAAAAxDAAAAAAAAAAAAAAAAPC/"
				],
				[
					210,
					1,
					"insert",
					{
						"characters": "sc."
					},
					"AwAAAFIMAAAAAAAAUwwAAAAAAAAAAAAAUwwAAAAAAABUDAAAAAAAAAAAAABUDAAAAAAAAFUMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUgwAAAAAAABSDAAAAAAAAAAAAAAAIGtA"
				],
				[
					211,
					1,
					"left_delete",
					null,
					"AQAAAFQMAAAAAAAAVAwAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAAVQwAAAAAAABVDAAAAAAAAAAAAAAAAPC/"
				],
				[
					215,
					8,
					"left_delete",
					null,
					"CAAAADAMAAAAAAAAMAwAAAAAAAABAAAAZy8MAAAAAAAALwwAAAAAAAABAAAAbi4MAAAAAAAALgwAAAAAAAABAAAAaS0MAAAAAAAALQwAAAAAAAABAAAAbCwMAAAAAAAALAwAAAAAAAABAAAAYSsMAAAAAAAAKwwAAAAAAAABAAAAYyoMAAAAAAAAKgwAAAAAAAABAAAAcykMAAAAAAAAKQwAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAAMQwAAAAAAAAxDAAAAAAAAAAAAAAAAPC/"
				],
				[
					218,
					1,
					"insert",
					{
						"characters": "["
					},
					"AQAAABcMAAAAAAAAGAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFwwAAAAAAAAXDAAAAAAAAAAAAAAAAPC/"
				],
				[
					220,
					1,
					"insert",
					{
						"characters": "]"
					},
					"AQAAABoMAAAAAAAAGwwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGgwAAAAAAAAaDAAAAAAAAAAAAAAAAPC/"
				],
				[
					222,
					2,
					"left_delete",
					null,
					"AgAAAE0MAAAAAAAATQwAAAAAAAABAAAAY0wMAAAAAAAATAwAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAATgwAAAAAAABODAAAAAAAAAAAAAAAAExA"
				],
				[
					223,
					1,
					"insert",
					{
						"characters": "sc.x0"
					},
					"BQAAAEwMAAAAAAAATQwAAAAAAAAAAAAATQwAAAAAAABODAAAAAAAAAAAAABODAAAAAAAAE8MAAAAAAAAAAAAAE8MAAAAAAAAUAwAAAAAAAAAAAAAUAwAAAAAAABRDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATAwAAAAAAABMDAAAAAAAAAAAAAAAAPC/"
				],
				[
					224,
					1,
					"left_delete",
					null,
					"AQAAAFAMAAAAAAAAUAwAAAAAAAABAAAAMA",
					"AQAAAAAAAAABAAAAUQwAAAAAAABRDAAAAAAAAAAAAAAAAPC/"
				],
				[
					225,
					1,
					"insert",
					{
						"characters": "==1"
					},
					"AwAAAFAMAAAAAAAAUQwAAAAAAAAAAAAAUQwAAAAAAABSDAAAAAAAAAAAAABSDAAAAAAAAFMMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUAwAAAAAAABQDAAAAAAAAAAAAAAAAPC/"
				],
				[
					226,
					1,
					"insert",
					{
						"characters": " /"
					},
					"AgAAAFMMAAAAAAAAVAwAAAAAAAAAAAAAVAwAAAAAAABVDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUwwAAAAAAABTDAAAAAAAAAAAAAAAAPC/"
				],
				[
					227,
					1,
					"left_delete",
					null,
					"AQAAAFQMAAAAAAAAVAwAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAAVQwAAAAAAABVDAAAAAAAAAAAAAAAAPC/"
				],
				[
					228,
					1,
					"insert",
					{
						"characters": "&&"
					},
					"AgAAAFQMAAAAAAAAVQwAAAAAAAAAAAAAVQwAAAAAAABWDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVAwAAAAAAABUDAAAAAAAAAAAAAAAAPC/"
				],
				[
					229,
					1,
					"insert",
					{
						"characters": " sc.<"
					},
					"BQAAAFYMAAAAAAAAVwwAAAAAAAAAAAAAVwwAAAAAAABYDAAAAAAAAAAAAABYDAAAAAAAAFkMAAAAAAAAAAAAAFkMAAAAAAAAWgwAAAAAAAAAAAAAWgwAAAAAAABbDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVgwAAAAAAABWDAAAAAAAAAAAAAAAAPC/"
				],
				[
					230,
					1,
					"left_delete",
					null,
					"AQAAAFoMAAAAAAAAWgwAAAAAAAABAAAAPA",
					"AQAAAAAAAAABAAAAWwwAAAAAAABbDAAAAAAAAAAAAAAAAPC/"
				],
				[
					231,
					1,
					"insert",
					{
						"characters": "y==-1"
					},
					"BQAAAFoMAAAAAAAAWwwAAAAAAAAAAAAAWwwAAAAAAABcDAAAAAAAAAAAAABcDAAAAAAAAF0MAAAAAAAAAAAAAF0MAAAAAAAAXgwAAAAAAAAAAAAAXgwAAAAAAABfDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWgwAAAAAAABaDAAAAAAAAAAAAAAAAPC/"
				],
				[
					232,
					1,
					"insert",
					{
						"characters": " ?"
					},
					"AgAAAF8MAAAAAAAAYAwAAAAAAAAAAAAAYAwAAAAAAABhDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXwwAAAAAAABfDAAAAAAAAAAAAAAAAPC/"
				],
				[
					233,
					1,
					"insert",
					{
						"characters": " 1"
					},
					"AgAAAGEMAAAAAAAAYgwAAAAAAAAAAAAAYgwAAAAAAABjDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYQwAAAAAAABhDAAAAAAAAAAAAAAAAPC/"
				],
				[
					234,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAAGMMAAAAAAAAZAwAAAAAAAAAAAAAZAwAAAAAAABlDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYwwAAAAAAABjDAAAAAAAAAAAAAAAAPC/"
				],
				[
					235,
					1,
					"insert",
					{
						"characters": " 0"
					},
					"AgAAAGUMAAAAAAAAZgwAAAAAAAAAAAAAZgwAAAAAAABnDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZQwAAAAAAABlDAAAAAAAAAAAAAAAAPC/"
				],
				[
					243,
					1,
					"insert",
					{
						"characters": "sc.type=='scale'"
					},
					"EAAAAEwMAAAAAAAATQwAAAAAAAAAAAAATQwAAAAAAABODAAAAAAAAAAAAABODAAAAAAAAE8MAAAAAAAAAAAAAE8MAAAAAAAAUAwAAAAAAAAAAAAAUAwAAAAAAABRDAAAAAAAAAAAAABRDAAAAAAAAFIMAAAAAAAAAAAAAFIMAAAAAAAAUwwAAAAAAAAAAAAAUwwAAAAAAABUDAAAAAAAAAAAAABUDAAAAAAAAFUMAAAAAAAAAAAAAFUMAAAAAAAAVgwAAAAAAAAAAAAAVgwAAAAAAABXDAAAAAAAAAAAAABXDAAAAAAAAFgMAAAAAAAAAAAAAFgMAAAAAAAAWQwAAAAAAAAAAAAAWQwAAAAAAABaDAAAAAAAAAAAAABaDAAAAAAAAFsMAAAAAAAAAAAAAFsMAAAAAAAAXAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATAwAAAAAAABMDAAAAAAAAAAAAAAAAAAA"
				],
				[
					244,
					1,
					"insert",
					{
						"characters": " &&"
					},
					"AwAAAFwMAAAAAAAAXQwAAAAAAAAAAAAAXQwAAAAAAABeDAAAAAAAAAAAAABeDAAAAAAAAF8MAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXAwAAAAAAABcDAAAAAAAAAAAAAAAAPC/"
				],
				[
					245,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAF8MAAAAAAAAYAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXwwAAAAAAABfDAAAAAAAAAAAAAAAAPC/"
				],
				[
					255,
					1,
					"left_delete",
					null,
					"AQAAAEsMAAAAAAAASwwAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAATAwAAAAAAABMDAAAAAAAAAAAAAAAAAAA"
				],
				[
					258,
					2,
					"left_delete",
					null,
					"AgAAAHsMAAAAAAAAewwAAAAAAAABAAAAIHoMAAAAAAAAegwAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAfAwAAAAAAAB8DAAAAAAAAAAAAAAAAPC/"
				],
				[
					261,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAHsMAAAAAAAAfAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAewwAAAAAAAB7DAAAAAAAAAAAAAAAAPC/"
				],
				[
					264,
					1,
					"left_delete",
					null,
					"AQAAAH0MAAAAAAAAfQwAAAAAAABnAQAAaWYodHJhbnNmb3JtYXRpb25zKQoKICBsZXQgbWlycm9yLCBhbmdsZTsKICBpZighcm90KSB7CiAgICBtaXJyb3IgPSAwOwogICAgYW5nbGUgPSAwOwogIH0gZWxzZSB7CiAgICBtaXJyb3IgPSAvTS8udGVzdChyb3QpID8gMSA6IDA7CiAgICBhbmdsZSA9ICsoKHJvdCAmJiByb3QgKyAnJykgfHwgJycpLnJlcGxhY2UoL00/Ui8sICcnKSB8fCAwOwogIH0KICBsZXQgdHJhbnNmb3JtYXRpb25zID0gbmV3IFRyYW5zZm9ybWF0aW9uTGlzdChbXSwgJycsICcnKTsKICBpZihhbmdsZSAhPT0gMCkgdHJhbnNmb3JtYXRpb25zLnJvdGF0ZShhbmdsZSk7CiAgaWYobWlycm9yICE9PSAwKSB0cmFuc2Zvcm1hdGlvbnMuc2NhbGUoLTEsIDEpOwo",
					"AQAAAAAAAAABAAAAfQwAAAAAAADkDQAAAAAAAAAAAAAAAAAA"
				],
				[
					272,
					1,
					"right_delete",
					null,
					"AQAAAIgMAAAAAAAAiAwAAAAAAAAOAAAAcmFuc2Zvcm1hdGlvbnM",
					"AQAAAAAAAAABAAAAiAwAAAAAAACWDAAAAAAAAAAAAAAAAPC/"
				],
				[
					298,
					1,
					"paste",
					null,
					"AgAAABwMAAAAAAAAKgwAAAAAAAAAAAAAKgwAAAAAAAAqDAAAAAAAAA8AAAB0cmFuc2Zvcm1hdGlvbnM",
					"AQAAAAAAAAABAAAAHAwAAAAAAAArDAAAAAAAAAAAAAAAAPC/"
				],
				[
					303,
					1,
					"paste",
					null,
					"AgAAADQMAAAAAAAAQgwAAAAAAAAAAAAAQgwAAAAAAABCDAAAAAAAAA8AAAB0cmFuc2Zvcm1hdGlvbnM",
					"AQAAAAAAAAABAAAANAwAAAAAAABDDAAAAAAAAAAAAAAAAPC/"
				],
				[
					328,
					1,
					"",
					null,
					"AQAAAHkMAAAAAAAAmAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeQwAAAAAAAB5DAAAAAAAAAAAAAAAAPC/"
				],
				[
					333,
					1,
					"left_delete",
					null,
					"AQAAAJcMAAAAAAAAlwwAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAmAwAAAAAAACYDAAAAAAAAAAAAAAAAPC/"
				],
				[
					364,
					1,
					"insert",
					{
						"characters": "tramn"
					},
					"BgAAAJAMAAAAAAAAkQwAAAAAAAAAAAAAkQwAAAAAAACRDAAAAAAAAAUAAABzY2FsZZEMAAAAAAAAkgwAAAAAAAAAAAAAkgwAAAAAAACTDAAAAAAAAAAAAACTDAAAAAAAAJQMAAAAAAAAAAAAAJQMAAAAAAAAlQwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkAwAAAAAAACVDAAAAAAAAAAAAAAAAPC/"
				],
				[
					365,
					2,
					"left_delete",
					null,
					"AgAAAJQMAAAAAAAAlAwAAAAAAAABAAAAbpMMAAAAAAAAkwwAAAAAAAABAAAAbQ",
					"AQAAAAAAAAABAAAAlQwAAAAAAACVDAAAAAAAAAAAAAAAAPC/"
				],
				[
					366,
					1,
					"insert",
					{
						"characters": "nslatge"
					},
					"BwAAAJMMAAAAAAAAlAwAAAAAAAAAAAAAlAwAAAAAAACVDAAAAAAAAAAAAACVDAAAAAAAAJYMAAAAAAAAAAAAAJYMAAAAAAAAlwwAAAAAAAAAAAAAlwwAAAAAAACYDAAAAAAAAAAAAACYDAAAAAAAAJkMAAAAAAAAAAAAAJkMAAAAAAAAmgwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkwwAAAAAAACTDAAAAAAAAAAAAAAAAPC/"
				],
				[
					367,
					2,
					"left_delete",
					null,
					"AgAAAJkMAAAAAAAAmQwAAAAAAAABAAAAZZgMAAAAAAAAmAwAAAAAAAABAAAAZw",
					"AQAAAAAAAAABAAAAmgwAAAAAAACaDAAAAAAAAAAAAAAAAPC/"
				],
				[
					368,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAJgMAAAAAAAAmQwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmAwAAAAAAACYDAAAAAAAAAAAAAAAAPC/"
				],
				[
					387,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAABMMAAAAAAAAFQwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEwwAAAAAAAATDAAAAAAAAAAAAAAAAAAA"
				],
				[
					390,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAC4MAAAAAAAAMAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALgwAAAAAAAAuDAAAAAAAAAAAAAAAAPC/"
				],
				[
					397,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAKEMAAAAAAAAogwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoQwAAAAAAAChDAAAAAAAAAAAAAAAACxA"
				],
				[
					400,
					1,
					"insert",
					{
						"characters": "t.rotation.a"
					},
					"DAAAAKIMAAAAAAAAowwAAAAAAAAAAAAAowwAAAAAAACkDAAAAAAAAAAAAACkDAAAAAAAAKUMAAAAAAAAAAAAAKUMAAAAAAAApgwAAAAAAAAAAAAApgwAAAAAAACnDAAAAAAAAAAAAACnDAAAAAAAAKgMAAAAAAAAAAAAAKgMAAAAAAAAqQwAAAAAAAAAAAAAqQwAAAAAAACqDAAAAAAAAAAAAACqDAAAAAAAAKsMAAAAAAAAAAAAAKsMAAAAAAAArAwAAAAAAAAAAAAArAwAAAAAAACtDAAAAAAAAAAAAACtDAAAAAAAAK4MAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAogwAAAAAAACiDAAAAAAAAAAAAAAAAPC/"
				],
				[
					401,
					1,
					"insert",
					{
						"characters": "ngle;"
					},
					"BQAAAK4MAAAAAAAArwwAAAAAAAAAAAAArwwAAAAAAACwDAAAAAAAAAAAAACwDAAAAAAAALEMAAAAAAAAAAAAALEMAAAAAAAAsgwAAAAAAAAAAAAAsgwAAAAAAACzDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArgwAAAAAAACuDAAAAAAAAAAAAAAAAPC/"
				],
				[
					405,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAAKIMAAAAAAAAowwAAAAAAAAAAAAAowwAAAAAAACkDAAAAAAAAAAAAACkDAAAAAAAAKUMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAogwAAAAAAACiDAAAAAAAAAAAAAAAAAAA"
				],
				[
					406,
					1,
					"insert",
					{
						"characters": " angle"
					},
					"BgAAAKUMAAAAAAAApgwAAAAAAAAAAAAApgwAAAAAAACnDAAAAAAAAAAAAACnDAAAAAAAAKgMAAAAAAAAAAAAAKgMAAAAAAAAqQwAAAAAAAAAAAAAqQwAAAAAAACqDAAAAAAAAAAAAACqDAAAAAAAAKsMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApQwAAAAAAAClDAAAAAAAAAAAAAAAAPC/"
				],
				[
					407,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAKsMAAAAAAAArAwAAAAAAAAAAAAArAwAAAAAAACtDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqwwAAAAAAACrDAAAAAAAAAAAAAAAAPC/"
				],
				[
					408,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAK0MAAAAAAAArgwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArQwAAAAAAACtDAAAAAAAAAAAAAAAAPC/"
				],
				[
					410,
					1,
					"insert",
					{
						"characters": " ?"
					},
					"AgAAALgMAAAAAAAAuQwAAAAAAAAAAAAAuQwAAAAAAAC6DAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuAwAAAAAAAC4DAAAAAAAAAAAAAAAAPC/"
				],
				[
					411,
					1,
					"insert",
					{
						"characters": " t.or"
					},
					"BQAAALoMAAAAAAAAuwwAAAAAAAAAAAAAuwwAAAAAAAC8DAAAAAAAAAAAAAC8DAAAAAAAAL0MAAAAAAAAAAAAAL0MAAAAAAAAvgwAAAAAAAAAAAAAvgwAAAAAAAC/DAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAugwAAAAAAAC6DAAAAAAAAAAAAAAAAPC/"
				],
				[
					412,
					2,
					"left_delete",
					null,
					"AgAAAL4MAAAAAAAAvgwAAAAAAAABAAAAcr0MAAAAAAAAvQwAAAAAAAABAAAAbw",
					"AQAAAAAAAAABAAAAvwwAAAAAAAC/DAAAAAAAAAAAAAAAAPC/"
				],
				[
					413,
					1,
					"insert",
					{
						"characters": "rotation"
					},
					"CAAAAL0MAAAAAAAAvgwAAAAAAAAAAAAAvgwAAAAAAAC/DAAAAAAAAAAAAAC/DAAAAAAAAMAMAAAAAAAAAAAAAMAMAAAAAAAAwQwAAAAAAAAAAAAAwQwAAAAAAADCDAAAAAAAAAAAAADCDAAAAAAAAMMMAAAAAAAAAAAAAMMMAAAAAAAAxAwAAAAAAAAAAAAAxAwAAAAAAADFDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvQwAAAAAAAC9DAAAAAAAAAAAAAAAAPC/"
				],
				[
					416,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAAMsMAAAAAAAAzAwAAAAAAAAAAAAAzAwAAAAAAADNDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAywwAAAAAAADLDAAAAAAAAAAAAAAAAPC/"
				],
				[
					417,
					1,
					"insert",
					{
						"characters": " 0"
					},
					"AgAAAM0MAAAAAAAAzgwAAAAAAAAAAAAAzgwAAAAAAADPDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzQwAAAAAAADNDAAAAAAAAAAAAAAAAPC/"
				],
				[
					422,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAANAMAAAAAAAA0QwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0AwAAAAAAADQDAAAAAAAAAAAAAAAAPC/"
				],
				[
					429,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAANEMAAAAAAAA0gwAAAAAAAAAAAAA0gwAAAAAAADTDAAAAAAAAAAAAADTDAAAAAAAANQMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0QwAAAAAAADRDAAAAAAAAAAAAAAAAPC/"
				],
				[
					430,
					1,
					"insert",
					{
						"characters": " mirror"
					},
					"BwAAANQMAAAAAAAA1QwAAAAAAAAAAAAA1QwAAAAAAADWDAAAAAAAAAAAAADWDAAAAAAAANcMAAAAAAAAAAAAANcMAAAAAAAA2AwAAAAAAAAAAAAA2AwAAAAAAADZDAAAAAAAAAAAAADZDAAAAAAAANoMAAAAAAAAAAAAANoMAAAAAAAA2wwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1AwAAAAAAADUDAAAAAAAAAAAAAAAAPC/"
				],
				[
					431,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAANsMAAAAAAAA3AwAAAAAAAAAAAAA3AwAAAAAAADdDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2wwAAAAAAADbDAAAAAAAAAAAAAAAAPC/"
				],
				[
					432,
					1,
					"insert",
					{
						"characters": " t."
					},
					"AwAAAN0MAAAAAAAA3gwAAAAAAAAAAAAA3gwAAAAAAADfDAAAAAAAAAAAAADfDAAAAAAAAOAMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3QwAAAAAAADdDAAAAAAAAAAAAAAAAPC/"
				],
				[
					433,
					1,
					"insert",
					{
						"characters": "scaling"
					},
					"BwAAAOAMAAAAAAAA4QwAAAAAAAAAAAAA4QwAAAAAAADiDAAAAAAAAAAAAADiDAAAAAAAAOMMAAAAAAAAAAAAAOMMAAAAAAAA5AwAAAAAAAAAAAAA5AwAAAAAAADlDAAAAAAAAAAAAADlDAAAAAAAAOYMAAAAAAAAAAAAAOYMAAAAAAAA5wwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4AwAAAAAAADgDAAAAAAAAAAAAAAAAPC/"
				],
				[
					434,
					1,
					"insert",
					{
						"characters": " ?"
					},
					"AgAAAOcMAAAAAAAA6AwAAAAAAAAAAAAA6AwAAAAAAADpDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5wwAAAAAAADnDAAAAAAAAAAAAAAAAPC/"
				],
				[
					435,
					1,
					"insert",
					{
						"characters": " t.scaling.x"
					},
					"DAAAAOkMAAAAAAAA6gwAAAAAAAAAAAAA6gwAAAAAAADrDAAAAAAAAAAAAADrDAAAAAAAAOwMAAAAAAAAAAAAAOwMAAAAAAAA7QwAAAAAAAAAAAAA7QwAAAAAAADuDAAAAAAAAAAAAADuDAAAAAAAAO8MAAAAAAAAAAAAAO8MAAAAAAAA8AwAAAAAAAAAAAAA8AwAAAAAAADxDAAAAAAAAAAAAADxDAAAAAAAAPIMAAAAAAAAAAAAAPIMAAAAAAAA8wwAAAAAAAAAAAAA8wwAAAAAAAD0DAAAAAAAAAAAAAD0DAAAAAAAAPUMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6QwAAAAAAADpDAAAAAAAAAAAAAAAAPC/"
				],
				[
					436,
					1,
					"insert",
					{
						"characters": " =="
					},
					"AwAAAPUMAAAAAAAA9gwAAAAAAAAAAAAA9gwAAAAAAAD3DAAAAAAAAAAAAAD3DAAAAAAAAPgMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9QwAAAAAAAD1DAAAAAAAAAAAAAAAAPC/"
				],
				[
					437,
					1,
					"insert",
					{
						"characters": " -1"
					},
					"AwAAAPgMAAAAAAAA+QwAAAAAAAAAAAAA+QwAAAAAAAD6DAAAAAAAAAAAAAD6DAAAAAAAAPsMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+AwAAAAAAAD4DAAAAAAAAAAAAAAAAPC/"
				],
				[
					440,
					1,
					"insert",
					{
						"characters": " &"
					},
					"AgAAAPsMAAAAAAAA/AwAAAAAAAAAAAAA/AwAAAAAAAD9DAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+wwAAAAAAAD7DAAAAAAAAAAAAAAAAPC/"
				],
				[
					441,
					1,
					"left_delete",
					null,
					"AQAAAPwMAAAAAAAA/AwAAAAAAAABAAAAJg",
					"AQAAAAAAAAABAAAA/QwAAAAAAAD9DAAAAAAAAAAAAAAAAPC/"
				],
				[
					443,
					1,
					"left_delete",
					null,
					"AQAAAOgMAAAAAAAA6AwAAAAAAAABAAAAPw",
					"AQAAAAAAAAABAAAA6QwAAAAAAADpDAAAAAAAAAAAAAAAAPC/"
				],
				[
					444,
					1,
					"insert",
					{
						"characters": "&&"
					},
					"AgAAAOgMAAAAAAAA6QwAAAAAAAAAAAAA6QwAAAAAAADqDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6AwAAAAAAADoDAAAAAAAAAAAAAAAAPC/"
				],
				[
					446,
					1,
					"insert",
					{
						"characters": " &&"
					},
					"AwAAAP0MAAAAAAAA/gwAAAAAAAAAAAAA/gwAAAAAAAD/DAAAAAAAAAAAAAD/DAAAAAAAAAANAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/QwAAAAAAAD9DAAAAAAAAP///////+9/"
				],
				[
					447,
					1,
					"insert",
					{
						"characters": " t.scaling.y"
					},
					"DAAAAAANAAAAAAAAAQ0AAAAAAAAAAAAAAQ0AAAAAAAACDQAAAAAAAAAAAAACDQAAAAAAAAMNAAAAAAAAAAAAAAMNAAAAAAAABA0AAAAAAAAAAAAABA0AAAAAAAAFDQAAAAAAAAAAAAAFDQAAAAAAAAYNAAAAAAAAAAAAAAYNAAAAAAAABw0AAAAAAAAAAAAABw0AAAAAAAAIDQAAAAAAAAAAAAAIDQAAAAAAAAkNAAAAAAAAAAAAAAkNAAAAAAAACg0AAAAAAAAAAAAACg0AAAAAAAALDQAAAAAAAAAAAAALDQAAAAAAAAwNAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAA0AAAAAAAAADQAAAAAAAAAAAAAAAPC/"
				],
				[
					448,
					1,
					"insert",
					{
						"characters": " =)="
					},
					"BAAAAAwNAAAAAAAADQ0AAAAAAAAAAAAADQ0AAAAAAAAODQAAAAAAAAAAAAAODQAAAAAAAA8NAAAAAAAAAAAAAA8NAAAAAAAAEA0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADA0AAAAAAAAMDQAAAAAAAAAAAAAAAPC/"
				],
				[
					449,
					2,
					"left_delete",
					null,
					"AgAAAA8NAAAAAAAADw0AAAAAAAABAAAAPQ4NAAAAAAAADg0AAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAEA0AAAAAAAAQDQAAAAAAAAAAAAAAAPC/"
				],
				[
					450,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAA4NAAAAAAAADw0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADg0AAAAAAAAODQAAAAAAAAAAAAAAAPC/"
				],
				[
					451,
					1,
					"insert",
					{
						"characters": " 1;"
					},
					"AwAAAA8NAAAAAAAAEA0AAAAAAAAAAAAAEA0AAAAAAAARDQAAAAAAAAAAAAARDQAAAAAAABINAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADw0AAAAAAAAPDQAAAAAAAAAAAAAAAPC/"
				],
				[
					454,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAABINAAAAAAAAEw0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEg0AAAAAAAASDQAAAAAAAAAAAAAAAPC/"
				],
				[
					459,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAABMNAAAAAAAAFA0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEw0AAAAAAAATDQAAAAAAAAAAAAAAAPC/"
				],
				[
					460,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAABQNAAAAAAAAFQ0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFA0AAAAAAAAUDQAAAAAAAAAAAAAAAPC/"
				],
				[
					466,
					1,
					"left_delete",
					null,
					"AQAAAB8NAAAAAAAAHw0AAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAAIA0AAAAAAAAgDQAAAAAAAAAAAAAAAPC/"
				],
				[
					467,
					1,
					"insert",
					{
						"characters": "`${angle}"
					},
					"CQAAAB8NAAAAAAAAIA0AAAAAAAAAAAAAIA0AAAAAAAAhDQAAAAAAAAAAAAAhDQAAAAAAACINAAAAAAAAAAAAACINAAAAAAAAIw0AAAAAAAAAAAAAIw0AAAAAAAAkDQAAAAAAAAAAAAAkDQAAAAAAACUNAAAAAAAAAAAAACUNAAAAAAAAJg0AAAAAAAAAAAAAJg0AAAAAAAAnDQAAAAAAAAAAAAAnDQAAAAAAACgNAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHw0AAAAAAAAfDQAAAAAAAAAAAAAAAPC/"
				],
				[
					480,
					1,
					"insert",
					{
						"characters": " !="
					},
					"AwAAACcNAAAAAAAAKA0AAAAAAAAAAAAAKA0AAAAAAAApDQAAAAAAAAAAAAApDQAAAAAAACoNAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJw0AAAAAAAAnDQAAAAAAAAAAAAAAAPC/"
				],
				[
					481,
					1,
					"insert",
					{
						"characters": " 0"
					},
					"AgAAACoNAAAAAAAAKw0AAAAAAAAAAAAAKw0AAAAAAAAsDQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKg0AAAAAAAAqDQAAAAAAAAAAAAAAAPC/"
				],
				[
					482,
					1,
					"insert",
					{
						"characters": " ?"
					},
					"AgAAACwNAAAAAAAALQ0AAAAAAAAAAAAALQ0AAAAAAAAuDQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALA0AAAAAAAAsDQAAAAAAAAAAAAAAAPC/"
				],
				[
					483,
					1,
					"insert",
					{
						"characters": " m"
					},
					"AgAAAC4NAAAAAAAALw0AAAAAAAAAAAAALw0AAAAAAAAwDQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALg0AAAAAAAAuDQAAAAAAAAAAAAAAAPC/"
				],
				[
					484,
					1,
					"left_delete",
					null,
					"AQAAAC8NAAAAAAAALw0AAAAAAAABAAAAbQ",
					"AQAAAAAAAAABAAAAMA0AAAAAAAAwDQAAAAAAAAAAAAAAAPC/"
				],
				[
					485,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAC8NAAAAAAAAMQ0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALw0AAAAAAAAvDQAAAAAAAAAAAAAAAPC/"
				],
				[
					486,
					1,
					"insert",
					{
						"characters": "R"
					},
					"AQAAADANAAAAAAAAMQ0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMA0AAAAAAAAwDQAAAAAAAAAAAAAAAPC/"
				],
				[
					488,
					1,
					"left_delete",
					null,
					"AQAAADENAAAAAAAAMQ0AAAAAAAABAAAAJw",
					"AQAAAAAAAAABAAAAMg0AAAAAAAAyDQAAAAAAAAAAAAAAAPC/"
				],
				[
					489,
					1,
					"insert",
					{
						"characters": "'+angle"
					},
					"BwAAADENAAAAAAAAMg0AAAAAAAAAAAAAMg0AAAAAAAAzDQAAAAAAAAAAAAAzDQAAAAAAADQNAAAAAAAAAAAAADQNAAAAAAAANQ0AAAAAAAAAAAAANQ0AAAAAAAA2DQAAAAAAAAAAAAA2DQAAAAAAADcNAAAAAAAAAAAAADcNAAAAAAAAOA0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMQ0AAAAAAAAxDQAAAAAAAAAAAAAAAPC/"
				],
				[
					490,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAADgNAAAAAAAAOQ0AAAAAAAAAAAAAOQ0AAAAAAAA6DQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOA0AAAAAAAA4DQAAAAAAAAAAAAAAAPC/"
				],
				[
					491,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADoNAAAAAAAAOw0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOg0AAAAAAAA6DQAAAAAAAAAAAAAAAPC/"
				],
				[
					492,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAADsNAAAAAAAAPQ0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOw0AAAAAAAA7DQAAAAAAAAAAAAAAAPC/"
				],
				[
					502,
					1,
					"insert",
					{
						"characters": "||"
					},
					"AgAAAC0NAAAAAAAALg0AAAAAAAAAAAAALg0AAAAAAAAvDQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALQ0AAAAAAAAtDQAAAAAAAAAAAAAAAPC/"
				],
				[
					503,
					1,
					"insert",
					{
						"characters": " mirror"
					},
					"BwAAAC8NAAAAAAAAMA0AAAAAAAAAAAAAMA0AAAAAAAAxDQAAAAAAAAAAAAAxDQAAAAAAADINAAAAAAAAAAAAADINAAAAAAAAMw0AAAAAAAAAAAAAMw0AAAAAAAA0DQAAAAAAAAAAAAA0DQAAAAAAADUNAAAAAAAAAAAAADUNAAAAAAAANg0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALw0AAAAAAAAvDQAAAAAAAAAAAAAAAPC/"
				],
				[
					504,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADYNAAAAAAAANw0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANg0AAAAAAAA2DQAAAAAAAAAAAAAAAPC/"
				],
				[
					513,
					1,
					"insert",
					{
						"characters": "(mirror"
					},
					"BwAAADkNAAAAAAAAOg0AAAAAAAAAAAAAOg0AAAAAAAA7DQAAAAAAAAAAAAA7DQAAAAAAADwNAAAAAAAAAAAAADwNAAAAAAAAPQ0AAAAAAAAAAAAAPQ0AAAAAAAA+DQAAAAAAAAAAAAA+DQAAAAAAAD8NAAAAAAAAAAAAAD8NAAAAAAAAQA0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOQ0AAAAAAAA5DQAAAAAAAAAAAAAAAPC/"
				],
				[
					514,
					1,
					"insert",
					{
						"characters": " ?"
					},
					"AgAAAEANAAAAAAAAQQ0AAAAAAAAAAAAAQQ0AAAAAAABCDQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQA0AAAAAAABADQAAAAAAAAAAAAAAAPC/"
				],
				[
					515,
					1,
					"insert",
					{
						"characters": " 'M?"
					},
					"BAAAAEINAAAAAAAAQw0AAAAAAAAAAAAAQw0AAAAAAABEDQAAAAAAAAAAAABEDQAAAAAAAEUNAAAAAAAAAAAAAEUNAAAAAAAARg0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQg0AAAAAAABCDQAAAAAAAAAAAAAAAPC/"
				],
				[
					516,
					1,
					"left_delete",
					null,
					"AQAAAEUNAAAAAAAARQ0AAAAAAAABAAAAPw",
					"AQAAAAAAAAABAAAARg0AAAAAAABGDQAAAAAAAAAAAAAAAPC/"
				],
				[
					517,
					1,
					"insert",
					{
						"characters": "'"
					},
					"AQAAAEUNAAAAAAAARg0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARQ0AAAAAAABFDQAAAAAAAAAAAAAAAPC/"
				],
				[
					518,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAAEYNAAAAAAAARw0AAAAAAAAAAAAARw0AAAAAAABIDQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARg0AAAAAAABGDQAAAAAAAAAAAAAAAPC/"
				],
				[
					519,
					1,
					"insert",
					{
						"characters": " 'R"
					},
					"AwAAAEgNAAAAAAAASQ0AAAAAAAAAAAAASQ0AAAAAAABKDQAAAAAAAAAAAABKDQAAAAAAAEsNAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASA0AAAAAAABIDQAAAAAAAAAAAAAAAPC/"
				],
				[
					520,
					1,
					"left_delete",
					null,
					"AQAAAEoNAAAAAAAASg0AAAAAAAABAAAAUg",
					"AQAAAAAAAAABAAAASw0AAAAAAABLDQAAAAAAAAAAAAAAAPC/"
				],
				[
					521,
					1,
					"insert",
					{
						"characters": "'()("
					},
					"BAAAAEoNAAAAAAAASw0AAAAAAAAAAAAASw0AAAAAAABMDQAAAAAAAAAAAABMDQAAAAAAAE0NAAAAAAAAAAAAAE0NAAAAAAAATg0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASg0AAAAAAABKDQAAAAAAAAAAAAAAAPC/"
				],
				[
					522,
					3,
					"left_delete",
					null,
					"AwAAAE0NAAAAAAAATQ0AAAAAAAABAAAAKEwNAAAAAAAATA0AAAAAAAABAAAAKUsNAAAAAAAASw0AAAAAAAABAAAAKA",
					"AQAAAAAAAAABAAAATg0AAAAAAABODQAAAAAAAAAAAAAAAPC/"
				],
				[
					523,
					1,
					"insert",
					{
						"characters": ")+"
					},
					"AgAAAEsNAAAAAAAATA0AAAAAAAAAAAAATA0AAAAAAABNDQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASw0AAAAAAABLDQAAAAAAAAAAAAAAAPC/"
				],
				[
					528,
					1,
					"left_delete",
					null,
					"AQAAAFsNAAAAAAAAWw0AAAAAAAABAAAAfQ",
					"AQAAAAAAAAABAAAAXA0AAAAAAABcDQAAAAAAAAAAAAAAAPC/"
				],
				[
					531,
					2,
					"right_delete",
					null,
					"AgAAACANAAAAAAAAIA0AAAAAAAABAAAAJCANAAAAAAAAIA0AAAAAAAABAAAAew",
					"AQAAAAAAAAABAAAAIA0AAAAAAAAgDQAAAAAAAAAAAAAAAPC/"
				],
				[
					532,
					1,
					"left_delete",
					null,
					"AQAAAB8NAAAAAAAAHw0AAAAAAAABAAAAYA",
					"AQAAAAAAAAABAAAAIA0AAAAAAAAgDQAAAAAAAAAAAAAAAPC/"
				],
				[
					539,
					1,
					"left_delete",
					null,
					"AQAAABQNAAAAAAAAFA0AAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAFQ0AAAAAAAAVDQAAAAAAAAAAAAAAAAAA"
				],
				[
					550,
					1,
					"left_delete",
					null,
					"AQAAABMNAAAAAAAAEw0AAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAFA0AAAAAAAAUDQAAAAAAAAAAAAAAACxA"
				],
				[
					591,
					1,
					"cut",
					null,
					"AQAAAN4LAAAAAAAA3gsAAAAAAAB8AQAACgpleHBvcnQgY29uc3QgSW5mZXJSb3RhdGlvbiA9ICh0cmFuc2Zvcm1hdGlvbikgPT4gewogIGxldCBbc2NdPXRyYW5zZm9ybWF0aW9uOwogIGxldCB0ID0gdHJhbnNmb3JtYXRpb24uc2xpY2Uoc2MudHlwZT09J3NjYWxlJyAmJiBzYy54PT0xICYmIHNjLnk9PS0xID8gMSA6IDApLmZpbHRlcih0ID0+IHQudHlwZSAhPSd0cmFuc2xhdGUnKTsKCmxldCBhbmdsZSA9IHQucm90YXRpb24gPyB0LnJvdGF0aW9uLmFuZ2xlIDogMDsKbGV0IG1pcnJvciA9IHQuc2NhbGluZyAmJiB0LnNjYWxpbmcueCA9PSAtMSAgJiYgdC5zY2FsaW5nLnkgPT0gMTsKCiAgcmV0dXJuIGFuZ2xlICE9IDAgfHwgbWlycm9yID8gKG1pcnJvciA/ICdNJyA6ICcnKSsnUicrYW5nbGUgOiAnJzsKfTs",
					"AQAAAAAAAAABAAAA3gsAAAAAAABaDQAAAAAAAAAAAAAAAPC/"
				],
				[
					592,
					2,
					"paste",
					null,
					"AgAAAN4LAAAAAAAAWg0AAAAAAAAAAAAAWg0AAAAAAADWDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3gsAAAAAAADeCwAAAAAAAAAAAAAAAPC/"
				],
				[
					595,
					1,
					"insert",
					{
						"characters": "Extract"
					},
					"CAAAAO0LAAAAAAAA7gsAAAAAAAAAAAAA7gsAAAAAAADuCwAAAAAAAAUAAABJbmZlcu4LAAAAAAAA7wsAAAAAAAAAAAAA7wsAAAAAAADwCwAAAAAAAAAAAADwCwAAAAAAAPELAAAAAAAAAAAAAPELAAAAAAAA8gsAAAAAAAAAAAAA8gsAAAAAAADzCwAAAAAAAAAAAADzCwAAAAAAAPQLAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7QsAAAAAAADyCwAAAAAAAAAAAAAAAPC/"
				],
				[
					635,
					1,
					"insert",
					{
						"characters": "new"
					},
					"BAAAAB8NAAAAAAAAIA0AAAAAAAAAAAAAIA0AAAAAAAAgDQAAAAAAADkAAABhbmdsZSAhPSAwIHx8IG1pcnJvciA/IChtaXJyb3IgPyAnTScgOiAnJykrJ1InK2FuZ2xlIDogJycgDQAAAAAAACENAAAAAAAAAAAAACENAAAAAAAAIg0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHw0AAAAAAABYDQAAAAAAAAAAAAAAAPC/"
				],
				[
					636,
					1,
					"insert",
					{
						"characters": " Trtans"
					},
					"BwAAACINAAAAAAAAIw0AAAAAAAAAAAAAIw0AAAAAAAAkDQAAAAAAAAAAAAAkDQAAAAAAACUNAAAAAAAAAAAAACUNAAAAAAAAJg0AAAAAAAAAAAAAJg0AAAAAAAAnDQAAAAAAAAAAAAAnDQAAAAAAACgNAAAAAAAAAAAAACgNAAAAAAAAKQ0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIg0AAAAAAAAiDQAAAAAAAAAAAAAAAPC/"
				],
				[
					637,
					4,
					"left_delete",
					null,
					"BAAAACgNAAAAAAAAKA0AAAAAAAABAAAAcycNAAAAAAAAJw0AAAAAAAABAAAAbiYNAAAAAAAAJg0AAAAAAAABAAAAYSUNAAAAAAAAJQ0AAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAAKQ0AAAAAAAApDQAAAAAAAAAAAAAAAPC/"
				],
				[
					638,
					1,
					"insert",
					{
						"characters": "ansfopr"
					},
					"BwAAACUNAAAAAAAAJg0AAAAAAAAAAAAAJg0AAAAAAAAnDQAAAAAAAAAAAAAnDQAAAAAAACgNAAAAAAAAAAAAACgNAAAAAAAAKQ0AAAAAAAAAAAAAKQ0AAAAAAAAqDQAAAAAAAAAAAAAqDQAAAAAAACsNAAAAAAAAAAAAACsNAAAAAAAALA0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJQ0AAAAAAAAlDQAAAAAAAAAAAAAAAPC/"
				],
				[
					639,
					2,
					"left_delete",
					null,
					"AgAAACsNAAAAAAAAKw0AAAAAAAABAAAAcioNAAAAAAAAKg0AAAAAAAABAAAAcA",
					"AQAAAAAAAAABAAAALA0AAAAAAAAsDQAAAAAAAAAAAAAAAPC/"
				],
				[
					640,
					1,
					"insert",
					{
						"characters": "rmationList8"
					},
					"DAAAACoNAAAAAAAAKw0AAAAAAAAAAAAAKw0AAAAAAAAsDQAAAAAAAAAAAAAsDQAAAAAAAC0NAAAAAAAAAAAAAC0NAAAAAAAALg0AAAAAAAAAAAAALg0AAAAAAAAvDQAAAAAAAAAAAAAvDQAAAAAAADANAAAAAAAAAAAAADANAAAAAAAAMQ0AAAAAAAAAAAAAMQ0AAAAAAAAyDQAAAAAAAAAAAAAyDQAAAAAAADMNAAAAAAAAAAAAADMNAAAAAAAANA0AAAAAAAAAAAAANA0AAAAAAAA1DQAAAAAAAAAAAAA1DQAAAAAAADYNAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKg0AAAAAAAAqDQAAAAAAAAAAAAAAAPC/"
				],
				[
					641,
					1,
					"left_delete",
					null,
					"AQAAADUNAAAAAAAANQ0AAAAAAAABAAAAOA",
					"AQAAAAAAAAABAAAANg0AAAAAAAA2DQAAAAAAAAAAAAAAAPC/"
				],
				[
					642,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADUNAAAAAAAANw0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANQ0AAAAAAAA1DQAAAAAAAAAAAAAAAPC/"
				],
				[
					644,
					1,
					"insert",
					{
						"characters": ".rotate"
					},
					"BwAAADcNAAAAAAAAOA0AAAAAAAAAAAAAOA0AAAAAAAA5DQAAAAAAAAAAAAA5DQAAAAAAADoNAAAAAAAAAAAAADoNAAAAAAAAOw0AAAAAAAAAAAAAOw0AAAAAAAA8DQAAAAAAAAAAAAA8DQAAAAAAAD0NAAAAAAAAAAAAAD0NAAAAAAAAPg0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANw0AAAAAAAA3DQAAAAAAAAAAAAAAAPC/"
				],
				[
					645,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAD4NAAAAAAAAQA0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPg0AAAAAAAA+DQAAAAAAAAAAAAAAAPC/"
				],
				[
					646,
					1,
					"insert",
					{
						"characters": "angle"
					},
					"BQAAAD8NAAAAAAAAQA0AAAAAAAAAAAAAQA0AAAAAAABBDQAAAAAAAAAAAABBDQAAAAAAAEINAAAAAAAAAAAAAEINAAAAAAAAQw0AAAAAAAAAAAAAQw0AAAAAAABEDQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPw0AAAAAAAA/DQAAAAAAAAAAAAAAAPC/"
				],
				[
					648,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAEUNAAAAAAAARg0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARQ0AAAAAAABFDQAAAAAAAAAAAAAAAPC/"
				],
				[
					649,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEYNAAAAAAAARw0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARg0AAAAAAABGDQAAAAAAAAAAAAAAAPC/"
				],
				[
					650,
					2,
					"left_delete",
					null,
					"AgAAAEYNAAAAAAAARg0AAAAAAAABAAAAIEUNAAAAAAAARQ0AAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAARw0AAAAAAABHDQAAAAAAAAAAAAAAAPC/"
				],
				[
					651,
					1,
					"insert",
					{
						"characters": ".scale"
					},
					"BgAAAEUNAAAAAAAARg0AAAAAAAAAAAAARg0AAAAAAABHDQAAAAAAAAAAAABHDQAAAAAAAEgNAAAAAAAAAAAAAEgNAAAAAAAASQ0AAAAAAAAAAAAASQ0AAAAAAABKDQAAAAAAAAAAAABKDQAAAAAAAEsNAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARQ0AAAAAAABFDQAAAAAAAAAAAAAAAPC/"
				],
				[
					652,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAEsNAAAAAAAATQ0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASw0AAAAAAABLDQAAAAAAAAAAAAAAAPC/"
				],
				[
					653,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAAEwNAAAAAAAATQ0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATA0AAAAAAABMDQAAAAAAAAAAAAAAAPC/"
				],
				[
					654,
					1,
					"left_delete",
					null,
					"AQAAAEwNAAAAAAAATA0AAAAAAAABAAAAMQ",
					"AQAAAAAAAAABAAAATQ0AAAAAAABNDQAAAAAAAAAAAAAAAPC/"
				],
				[
					655,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAEsNAAAAAAAASw0AAAAAAAABAAAAKEsNAAAAAAAASw0AAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAATA0AAAAAAABMDQAAAAAAAAAAAAAAAPC/"
				],
				[
					656,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAEsNAAAAAAAATQ0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASw0AAAAAAABLDQAAAAAAAAAAAAAAAPC/"
				],
				[
					657,
					1,
					"insert",
					{
						"characters": "mriro"
					},
					"BQAAAEwNAAAAAAAATQ0AAAAAAAAAAAAATQ0AAAAAAABODQAAAAAAAAAAAABODQAAAAAAAE8NAAAAAAAAAAAAAE8NAAAAAAAAUA0AAAAAAAAAAAAAUA0AAAAAAABRDQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATA0AAAAAAABMDQAAAAAAAAAAAAAAAPC/"
				],
				[
					658,
					4,
					"left_delete",
					null,
					"BAAAAFANAAAAAAAAUA0AAAAAAAABAAAAb08NAAAAAAAATw0AAAAAAAABAAAAck4NAAAAAAAATg0AAAAAAAABAAAAaU0NAAAAAAAATQ0AAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAAUQ0AAAAAAABRDQAAAAAAAAAAAAAAAPC/"
				],
				[
					659,
					1,
					"insert",
					{
						"characters": "irror"
					},
					"BQAAAE0NAAAAAAAATg0AAAAAAAAAAAAATg0AAAAAAABPDQAAAAAAAAAAAABPDQAAAAAAAFANAAAAAAAAAAAAAFANAAAAAAAAUQ0AAAAAAAAAAAAAUQ0AAAAAAABSDQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATQ0AAAAAAABNDQAAAAAAAAAAAAAAAPC/"
				],
				[
					660,
					1,
					"insert",
					{
						"characters": " ?"
					},
					"AgAAAFINAAAAAAAAUw0AAAAAAAAAAAAAUw0AAAAAAABUDQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUg0AAAAAAABSDQAAAAAAAAAAAAAAAPC/"
				],
				[
					661,
					1,
					"insert",
					{
						"characters": " -1"
					},
					"AwAAAFQNAAAAAAAAVQ0AAAAAAAAAAAAAVQ0AAAAAAABWDQAAAAAAAAAAAABWDQAAAAAAAFcNAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVA0AAAAAAABUDQAAAAAAAAAAAAAAAPC/"
				],
				[
					662,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAAFcNAAAAAAAAWA0AAAAAAAAAAAAAWA0AAAAAAABZDQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVw0AAAAAAABXDQAAAAAAAAAAAAAAAPC/"
				],
				[
					663,
					1,
					"insert",
					{
						"characters": " 1,"
					},
					"AwAAAFkNAAAAAAAAWg0AAAAAAAAAAAAAWg0AAAAAAABbDQAAAAAAAAAAAABbDQAAAAAAAFwNAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWQ0AAAAAAABZDQAAAAAAAAAAAAAAAPC/"
				],
				[
					664,
					1,
					"insert",
					{
						"characters": " 1"
					},
					"AgAAAFwNAAAAAAAAXQ0AAAAAAAAAAAAAXQ0AAAAAAABeDQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXA0AAAAAAABcDQAAAAAAAAAAAAAAAPC/"
				],
				[
					748,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA7AsAAAAAAABjDQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/geom/matrix.js",
			"settings":
			{
				"buffer_size": 22005,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					12,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAAJNIAAAAAAAAlEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAk0gAAAAAAACTSAAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": " ||"
					},
					"AwAAAKVIAAAAAAAApkgAAAAAAAAAAAAApkgAAAAAAACnSAAAAAAAAAAAAACnSAAAAAAAAKhIAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApUgAAAAAAAClSAAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": " §"
					},
					"AgAAAKhIAAAAAAAAqUgAAAAAAAAAAAAAqUgAAAAAAACqSAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqEgAAAAAAACoSAAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"left_delete",
					null,
					"AQAAAKlIAAAAAAAAqUgAAAAAAAACAAAAwqc",
					"AQAAAAAAAAABAAAAqkgAAAAAAACqSAAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "§1"
					},
					"AgAAAKlIAAAAAAAAqkgAAAAAAAAAAAAAqkgAAAAAAACrSAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqUgAAAAAAACpSAAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					2,
					"left_delete",
					null,
					"AgAAAKpIAAAAAAAAqkgAAAAAAAABAAAAMalIAAAAAAAAqUgAAAAAAAACAAAAwqc",
					"AQAAAAAAAAABAAAAq0gAAAAAAACrSAAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "19"
					},
					"AgAAAKlIAAAAAAAAqkgAAAAAAAAAAAAAqkgAAAAAAACrSAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqUgAAAAAAACpSAAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"left_delete",
					null,
					"AQAAAKpIAAAAAAAAqkgAAAAAAAABAAAAOQ",
					"AQAAAAAAAAABAAAAq0gAAAAAAACrSAAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAKpIAAAAAAAAq0gAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqkgAAAAAAACqSAAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "||"
					},
					"AgAAAENIAAAAAAAAREgAAAAAAAAAAAAAREgAAAAAAABFSAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQ0gAAAAAAABDSAAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": " 1)"
					},
					"AwAAAEVIAAAAAAAARkgAAAAAAAAAAAAARkgAAAAAAABHSAAAAAAAAAAAAABHSAAAAAAAAEhIAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARUgAAAAAAABFSAAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEhIAAAAAAAASUgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASEgAAAAAAABISAAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAADFIAAAAAAAAMkgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMUgAAAAAAAAxSAAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAAAlJAAAAAAAACkkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACUkAAAAAAAAJSQAAAAAAAP///////+9/"
				],
				[
					51,
					1,
					"left_delete",
					null,
					"AQAAAAlJAAAAAAAACUkAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAACkkAAAAAAAAKSQAAAAAAAAAAAAAAAPC/"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": "88"
					},
					"AgAAAAlJAAAAAAAACkkAAAAAAAAAAAAACkkAAAAAAAALSQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACUkAAAAAAAAJSQAAAAAAAAAAAAAAAPC/"
				],
				[
					53,
					2,
					"left_delete",
					null,
					"AgAAAApJAAAAAAAACkkAAAAAAAABAAAAOAlJAAAAAAAACUkAAAAAAAABAAAAOA",
					"AQAAAAAAAAABAAAAC0kAAAAAAAALSQAAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAAlJAAAAAAAAC0kAAAAAAAAAAAAAJ0gAAAAAAAApSAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACUkAAAAAAAAnSAAAAAAAAAAAAAAAAEVA"
				],
				[
					62,
					1,
					"insert",
					{
						"characters": "21"
					},
					"AgAAAPtIAAAAAAAA/EgAAAAAAAAAAAAA/EgAAAAAAAD9SAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+0gAAAAAAAD7SAAAAAAAAAAAAAAAAEVA"
				],
				[
					63,
					2,
					"left_delete",
					null,
					"AgAAAPxIAAAAAAAA/EgAAAAAAAABAAAAMftIAAAAAAAA+0gAAAAAAAABAAAAMg",
					"AQAAAAAAAAABAAAA/UgAAAAAAAD9SAAAAAAAAAAAAAAAAPC/"
				],
				[
					64,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAAPtIAAAAAAAA/EgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+0gAAAAAAAD7SAAAAAAAAAAAAAAAAPC/"
				],
				[
					65,
					1,
					"left_delete",
					null,
					"AQAAAPtIAAAAAAAA+0gAAAAAAAABAAAAMQ",
					"AQAAAAAAAAABAAAA/EgAAAAAAAD8SAAAAAAAAAAAAAAAAPC/"
				],
				[
					67,
					1,
					"insert",
					{
						"characters": "\nrte"
					},
					"BQAAAA1JAAAAAAAADkkAAAAAAAAAAAAADkkAAAAAAAAUSQAAAAAAAAAAAAAUSQAAAAAAABVJAAAAAAAAAAAAABVJAAAAAAAAFkkAAAAAAAAAAAAAFkkAAAAAAAAXSQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADUkAAAAAAAANSQAAAAAAAP///////+9/"
				],
				[
					68,
					3,
					"left_delete",
					null,
					"AwAAABZJAAAAAAAAFkkAAAAAAAABAAAAZRVJAAAAAAAAFUkAAAAAAAABAAAAdBRJAAAAAAAAFEkAAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAAF0kAAAAAAAAXSQAAAAAAAAAAAAAAAPC/"
				],
				[
					69,
					1,
					"insert",
					{
						"characters": "return"
					},
					"BgAAABRJAAAAAAAAFUkAAAAAAAAAAAAAFUkAAAAAAAAWSQAAAAAAAAAAAAAWSQAAAAAAABdJAAAAAAAAAAAAABdJAAAAAAAAGEkAAAAAAAAAAAAAGEkAAAAAAAAZSQAAAAAAAAAAAAAZSQAAAAAAABpJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFEkAAAAAAAAUSQAAAAAAAAAAAAAAAPC/"
				],
				[
					70,
					1,
					"insert",
					{
						"characters": " this.decompose89"
					},
					"EQAAABpJAAAAAAAAG0kAAAAAAAAAAAAAG0kAAAAAAAAcSQAAAAAAAAAAAAAcSQAAAAAAAB1JAAAAAAAAAAAAAB1JAAAAAAAAHkkAAAAAAAAAAAAAHkkAAAAAAAAfSQAAAAAAAAAAAAAfSQAAAAAAACBJAAAAAAAAAAAAACBJAAAAAAAAIUkAAAAAAAAAAAAAIUkAAAAAAAAiSQAAAAAAAAAAAAAiSQAAAAAAACNJAAAAAAAAAAAAACNJAAAAAAAAJEkAAAAAAAAAAAAAJEkAAAAAAAAlSQAAAAAAAAAAAAAlSQAAAAAAACZJAAAAAAAAAAAAACZJAAAAAAAAJ0kAAAAAAAAAAAAAJ0kAAAAAAAAoSQAAAAAAAAAAAAAoSQAAAAAAAClJAAAAAAAAAAAAAClJAAAAAAAAKkkAAAAAAAAAAAAAKkkAAAAAAAArSQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGkkAAAAAAAAaSQAAAAAAAAAAAAAAAPC/"
				],
				[
					71,
					2,
					"left_delete",
					null,
					"AgAAACpJAAAAAAAAKkkAAAAAAAABAAAAOSlJAAAAAAAAKUkAAAAAAAABAAAAOA",
					"AQAAAAAAAAABAAAAK0kAAAAAAAArSQAAAAAAAAAAAAAAAPC/"
				],
				[
					72,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAClJAAAAAAAAK0kAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKUkAAAAAAAApSQAAAAAAAAAAAAAAAPC/"
				],
				[
					74,
					1,
					"insert",
					{
						"characters": ".scaling,"
					},
					"CQAAACtJAAAAAAAALEkAAAAAAAAAAAAALEkAAAAAAAAtSQAAAAAAAAAAAAAtSQAAAAAAAC5JAAAAAAAAAAAAAC5JAAAAAAAAL0kAAAAAAAAAAAAAL0kAAAAAAAAwSQAAAAAAAAAAAAAwSQAAAAAAADFJAAAAAAAAAAAAADFJAAAAAAAAMkkAAAAAAAAAAAAAMkkAAAAAAAAzSQAAAAAAAAAAAAAzSQAAAAAAADRJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAK0kAAAAAAAArSQAAAAAAAAAAAAAAAPC/"
				],
				[
					75,
					1,
					"left_delete",
					null,
					"AQAAADNJAAAAAAAAM0kAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAANEkAAAAAAAA0SQAAAAAAAAAAAAAAAPC/"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAADNJAAAAAAAANEkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAM0kAAAAAAAAzSQAAAAAAAAAAAAAAAPC/"
				],
				[
					80,
					1,
					"cut",
					null,
					"AQAAAA5JAAAAAAAADkkAAAAAAAAnAAAAICAgICAgcmV0dXJuIHRoaXMuZGVjb21wb3NlKCkuc2NhbGluZzsK",
					"AQAAAAAAAAABAAAADkkAAAAAAAA1SQAAAAAAAAAAAAAAAAAA"
				],
				[
					81,
					1,
					"paste",
					null,
					"AQAAAA5JAAAAAAAANUkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADkkAAAAAAAAOSQAAAAAAAAAAAAAAAPC/"
				],
				[
					83,
					1,
					"paste",
					null,
					"AQAAAJhJAAAAAAAAv0kAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmEkAAAAAAACYSQAAAAAAAAAAAAAAAAAA"
				],
				[
					87,
					1,
					"cut",
					null,
					"AQAAAJhJAAAAAAAAmEkAAAAAAAAnAAAAICAgICAgcmV0dXJuIHRoaXMuZGVjb21wb3NlKCkuc2NhbGluZzsK",
					"AQAAAAAAAAABAAAAmEkAAAAAAAC/SQAAAAAAAAAAAAAAAAAA"
				],
				[
					89,
					1,
					"paste",
					null,
					"AQAAANBJAAAAAAAA90kAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0EkAAAAAAADQSQAAAAAAAAAAAAAAAAAA"
				],
				[
					96,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAM9JAAAAAAAA0UkAAAAAAAAAAAAAeEkAAAAAAAB6SQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeEkAAAAAAADPSQAAAAAAAP///////+9/"
				],
				[
					101,
					4,
					"left_delete",
					null,
					"BAAAAPhJAAAAAAAA+EkAAAAAAAABAAAAZ/dJAAAAAAAA90kAAAAAAAABAAAAbvZJAAAAAAAA9kkAAAAAAAABAAAAafVJAAAAAAAA9UkAAAAAAAABAAAAbA",
					"AQAAAAAAAAABAAAA+UkAAAAAAAD5SQAAAAAAAAAAAAAAAPC/"
				],
				[
					102,
					3,
					"left_delete",
					null,
					"AwAAAPRJAAAAAAAA9EkAAAAAAAABAAAAYfNJAAAAAAAA80kAAAAAAAABAAAAY/JJAAAAAAAA8kkAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAA9UkAAAAAAAD1SQAAAAAAAAAAAAAAAPC/"
				],
				[
					103,
					1,
					"insert",
					{
						"characters": "rotate"
					},
					"BgAAAPJJAAAAAAAA80kAAAAAAAAAAAAA80kAAAAAAAD0SQAAAAAAAAAAAAD0SQAAAAAAAPVJAAAAAAAAAAAAAPVJAAAAAAAA9kkAAAAAAAAAAAAA9kkAAAAAAAD3SQAAAAAAAAAAAAD3SQAAAAAAAPhJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8kkAAAAAAADySQAAAAAAAAAAAAAAAPC/"
				],
				[
					106,
					2,
					"left_delete",
					null,
					"AgAAADFJAAAAAAAAMUkAAAAAAAABAAAAbjBJAAAAAAAAMEkAAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAAMkkAAAAAAAAySQAAAAAAAAAAAAAAgG9A"
				],
				[
					107,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAADBJAAAAAAAAMUkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMEkAAAAAAAAwSQAAAAAAAAAAAAAAAPC/"
				],
				[
					108,
					2,
					"right_delete",
					null,
					"AgAAADFJAAAAAAAAMUkAAAAAAAABAAAAZzFJAAAAAAAAMUkAAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAAMUkAAAAAAAAxSQAAAAAAAAAAAAAAAPC/"
				],
				[
					109,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAADFJAAAAAAAAMkkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMUkAAAAAAAAxSQAAAAAAAAAAAAAAAPC/"
				],
				[
					120,
					1,
					"cut",
					null,
					"AQAAANJJAAAAAAAA0kkAAAAAAAAmAAAAICAgICAgcmV0dXJuIHRoaXMuZGVjb21wb3NlKCkucm90YXRlOwo",
					"AQAAAAAAAAABAAAA0kkAAAAAAAD4SQAAAAAAAAAAAAAAAAAA"
				],
				[
					121,
					1,
					"paste",
					null,
					"AQAAANJJAAAAAAAA+EkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0kkAAAAAAADSSQAAAAAAAAAAAAAAAPC/"
				],
				[
					124,
					1,
					"paste",
					null,
					"AQAAADhKAAAAAAAAXkoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOEoAAAAAAAA4SgAAAAAAAAAAAAAAAAAA"
				],
				[
					126,
					6,
					"left_delete",
					null,
					"BgAAAFtKAAAAAAAAW0oAAAAAAAABAAAAZVpKAAAAAAAAWkoAAAAAAAABAAAAdFlKAAAAAAAAWUoAAAAAAAABAAAAYVhKAAAAAAAAWEoAAAAAAAABAAAAdFdKAAAAAAAAV0oAAAAAAAABAAAAb1ZKAAAAAAAAVkoAAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAAXEoAAAAAAABcSgAAAAAAAAAAAAAAAPC/"
				],
				[
					127,
					1,
					"insert",
					{
						"characters": "translate"
					},
					"CQAAAFZKAAAAAAAAV0oAAAAAAAAAAAAAV0oAAAAAAABYSgAAAAAAAAAAAABYSgAAAAAAAFlKAAAAAAAAAAAAAFlKAAAAAAAAWkoAAAAAAAAAAAAAWkoAAAAAAABbSgAAAAAAAAAAAABbSgAAAAAAAFxKAAAAAAAAAAAAAFxKAAAAAAAAXUoAAAAAAAAAAAAAXUoAAAAAAABeSgAAAAAAAAAAAABeSgAAAAAAAF9KAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVkoAAAAAAABWSgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "/home/roman/Projects/an-tronics/eagle/555-PWM-Motor-Speed-Controller-alt.sch",
			"settings":
			{
				"buffer_size": 258556,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "/home/roman/Projects/an-tronics/eagle/555-PWM-Motor-Speed-Controller-alt.brd",
			"settings":
			{
				"buffer_size": 41617,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "555-PWM-Motor-Speed-Controller-alt-board.svg",
			"settings":
			{
				"buffer_size": 150855,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "555-PWM-Motor-Speed-Controller-alt-schematic.svg",
			"settings":
			{
				"buffer_size": 151186,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "lib/eagle/components/pin.js",
			"settings":
			{
				"buffer_size": 3941,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"insert",
					{
						"characters": "\nstyle:"
					},
					"CAAAABkLAAAAAAAAGgsAAAAAAAAAAAAAGgsAAAAAAAAkCwAAAAAAAAAAAAAkCwAAAAAAACULAAAAAAAAAAAAACULAAAAAAAAJgsAAAAAAAAAAAAAJgsAAAAAAAAnCwAAAAAAAAAAAAAnCwAAAAAAACgLAAAAAAAAAAAAACgLAAAAAAAAKQsAAAAAAAAAAAAAKQsAAAAAAAAqCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGQsAAAAAAAAZCwAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACoLAAAAAAAAKwsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKgsAAAAAAAAqCwAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAACsLAAAAAAAALQsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKwsAAAAAAAArCwAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"paste",
					null,
					"AQAAACwLAAAAAAAAPwsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALAsAAAAAAAAsCwAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAEALAAAAAAAAQQsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQAsAAAAAAABACwAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "'"
					},
					"AQAAAD4LAAAAAAAAPwsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPgsAAAAAAAA+CwAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "'"
					},
					"AQAAADcLAAAAAAAAOAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANwsAAAAAAAA3CwAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "'"
					},
					"AQAAADULAAAAAAAANgsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANQsAAAAAAAA1CwAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": "'"
					},
					"AQAAACwLAAAAAAAALQsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALAsAAAAAAAAsCwAAAAAAAAAAAAAAgF9A"
				],
				[
					32,
					1,
					"left_delete",
					null,
					"AQAAAEILAAAAAAAAQgsAAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAAQwsAAAAAAABDCwAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADjDgAAaW1wb3J0IHsgaCwgRnJhZ21lbnQsIENvbXBvbmVudCB9IGZyb20gJy4uLy4uL2RvbS9wcmVhY3RDb21wb25lbnQuanMnOwppbXBvcnQgeyBNYWtlQ29vcmRUcmFuc2Zvcm1lciwgRWxlbWVudFRvQ2xhc3MsIGxvZywgUGluU2l6ZXMsIEFsaWdubWVudCAsIEFsaWdubWVudEF0dHJzLCBWRVJUSUNBTCwgSE9SSVpPTlRBTCAsTWFrZVJvdGF0aW9uLFJBRDJERUd9IGZyb20gJy4uL3JlbmRlclV0aWxzLmpzJzsKaW1wb3J0IHsgVHJhbnNmb3JtYXRpb25MaXN0LCBQb2ludCwgTGluZSB9IGZyb20gJy4uLy4uL2dlb20uanMnOwppbXBvcnQgeyBSR0JBIH0gZnJvbSAnLi4vLi4vY29sb3IuanMnOwppbXBvcnQgeyBQYWxldHRlIH0gZnJvbSAnLi4vY29tbW9uLmpzJzsKaW1wb3J0IHsgVGV4dCB9IGZyb20gJy4vdGV4dC5qcyc7CgpleHBvcnQgY29uc3QgUGluID0gKHsgZGF0YSwgb3B0cyA9IHt9LCAuLi5wcm9wcyB9KSA9PiB7CiAgZGF0YSA9IGRhdGEgfHwgcHJvcHMuaXRlbTsKCiAgbG9nKCdQaW4ucmVuZGVyKDApJywgeyBkYXRhLCBvcHRzIH0pOwoKICBsZXQgeyB0cmFuc2Zvcm0gPSBuZXcgVHJhbnNmb3JtYXRpb25MaXN0KCkgfSA9IG9wdHM7CiAgbGV0IHsgdHJhbnNmb3JtYXRpb24gfSA9IG9wdHM7CgogIGxldCBjb29yZEZuID0gdHJhbnNmb3JtID8gTWFrZUNvb3JkVHJhbnNmb3JtZXIodHJhbnNmb3JtKSA6IGkgPT4gaTsKCiAgY29uc3QgeyBsZW5ndGgsIHJvdCwgbmFtZSwgdmlzaWJsZSB9ID0gZGF0YTsKICBjb25zdCB7IHgsIHkgfSA9IGNvb3JkRm4oZGF0YSk7CiAgY29uc3QgZnVuYyA9IGRhdGEuZnVuY3Rpb247CgogICBsZXQgW3JvdGF0aW9uXSA9IE1ha2VSb3RhdGlvbihyb3QpOwogICAgICAgY29uc29sZS5sb2coYFBpbi5yZW5kZXIoJHtuYW1lfSlgLCB7ICByb3RhdGlvbiB9KTsKIGxldCBhbmdsZSA9IHJvdGF0aW9uID8gTWF0aC5yb3VuZChyb3RhdGlvbi5hbmdsZSkgOiAwOwoKIC8vICBjb25zdCBhbmdsZSA9ICsocm90IHx8ICcwJykucmVwbGFjZSgvUi8sICcnKTsKICBsZXQgdmVjbGVuID0gUGluU2l6ZXNbbGVuZ3RoXSAqIDIuNTQ7CiAgaWYoZnVuYyA9PSAnZG90JykgdmVjbGVuIC09IDEuNTsKICBjb25zdCBkaXIgPSBQb2ludC5mcm9tQW5nbGUoKGFuZ2xlICogTWF0aC5QSSkgLyAxODApOwogIGNvbnN0IHZlYyA9IGRpci5wcm9kKHZlY2xlbik7CiAgY29uc3QgcGl2b3QgPSBuZXcgUG9pbnQoK3gsICt5KTsKICBjb25zdCBwcCA9IGRpci5wcm9kKHZlY2xlbiArIDAuNzUpLmFkZChwaXZvdCk7CiAgY29uc3QgbCA9IG5ldyBMaW5lKHBpdm90LCB2ZWMuYWRkKHBpdm90KSk7CiAgbGV0IGNoaWxkcmVuID0gW107CiAgY29uc3QgdHAgPSBwaXZvdC5kaWZmKGRpci5wcm9kKC0yLjU0ICogMikpOwoKICBpZihmdW5jID09ICdkb3QnICYmIGxlbmd0aCAhPSAncG9pbnQnKSB7CiAgICBjaGlsZHJlbi5wdXNoKAogICAgICBoKCdjaXJjbGUnLCB7CiAgICAgICAgY2xhc3M6ICdwaW4nLAogICAgICAgIHN0cm9rZTogJyNhNTRiNGInLAogICAgICAgIGZpbGw6ICdub25lJywKICAgICAgICBjeDogcHAueCwKICAgICAgICBjeTogcHAueSwKICAgICAgICByOiAwLjc1LAogICAgICAgICdzdHJva2Utd2lkdGgnOiAwLjMKICAgICAgfSkKICAgICk7CiAgICBjb25zb2xlLmxvZygnUGluLnJlbmRlcigyKScsIHsgcHAgfSk7CiAgfQoKICBpZihsLmdldExlbmd0aCgpKSB7CiAgICBjaGlsZHJlbi5wdXNoKAogICAgICBoKCdsaW5lJywgewogICAgICAgIGNsYXNzOiAncGluJywKICAgICAgICBzdHJva2U6ICcjYTU0YjRiJywKICAgICAgICAuLi5sLnRvT2JqZWN0KCksCiAgICAgICAgJ3N0cm9rZS13aWR0aCc6IDAuMTUKICAgICAgfSkKICAgICk7CiAgICBjb25zb2xlLmxvZygnUGluLnJlbmRlcigzKScsIHsgbCB9KTsKICB9CiAgaWYobmFtZSAhPSAnJyAmJiB2aXNpYmxlICE9ICdvZmYnKSB7CiAgICBjb25zdCBhbGlnbiA9IEFsaWdubWVudChhbmdsZSA+PSAxODAgPyAgJ2NlbnRlci1yaWdodCcgOiAnY2VudGVyLWxlZnQnLCAwKTsKICAvLyAgY29uc3Qgcm90YXRpb249TWFrZVJvdGF0aW9uKHJvdCk7CiAgICAgIGNvbnNvbGUubG9nKGBQaW4ucmVuZGVyKCR7bmFtZX0pYCwgeyBhbGlnbixhbmdsZSxyb3RhdGlvbiB9KTsKICAvKiBjaGlsZHJlbi5wdXNoKAogICAgICBoKFRleHQsIHsKICAgICAgICBjbGFzczogRWxlbWVudFRvQ2xhc3MoZGF0YSksCiAgICAgICAgY29sb3I6IFBhbGV0dGUuc2NoZW1hdGljKChyLCBnLCBiKSA9PiBuZXcgUkdCQShyLCBnLCBiKSlbMTZdLAogICAgICAgIHg6IHRwLngsCiAgICAgICAgeTogdHAueSwKCiAgICAgICAgdGV4dDogbmFtZSwKICAgICAgICBhbGlnbm1lbnQ6IG5ldyBQb2ludCgtMSwgMCksCiAgICAgICAgb3B0czogeyB0cmFuc2Zvcm1hdGlvbiB9LAogICAgICAgIHJvdCwKICAgICAgICAnZGF0YS1yb3QnOiByb3QsCiAgICAgICAgJ2ZvbnQtc2l6ZSc6ICcxLjkwNXB4JwogICAgICB9KQogICAgKTsqLwoKICAgIGNoaWxkcmVuLnB1c2goCiAgICAgIGgoCiAgICAgICAgJ3RleHQnLAogICAgICAgIHsKICAgICAgICAgIGNsYXNzOiBFbGVtZW50VG9DbGFzcyhkYXRhKSwKICAgICAgICAgIGZpbGw6IFBhbGV0dGUuc2NoZW1hdGljKChyLCBnLCBiKSA9PiBuZXcgUkdCQShyLCBnLCBiKSlbMTZdLAogICAgICAgICAgc3Ryb2tlOiAnbm9uZScsCiAgICAgICAgICB4OiAwLAogICAgICAgICAgeTogMCwKCiAgICAgICAgICAvL3N0eWxlOiB2aXNpYmxlID8geyAuLi5zdHlsZSB9IDogeyAuLi5zdHlsZSwgZGlzcGxheTogJ25vbmUnIH0sCiAgICAgICAgICAuLi5BbGlnbm1lbnRBdHRycyhhbGlnbiwgVkVSVElDQUwpLAogICAgICAgICAgLi4ucHJvcHMsCiAgICAgICAgICBzdHlsZTogeydmb250LXNpemUnOiAnMC45MTRweCd9LAogICAgICAgICAgdHJhbnNmb3JtOiAgdHJhbnNmb3JtYXRpb24uaW52ZXJ0KCkudHJhbnNsYXRlKHRwLngsdHAueSkucm90YXRlKGFuZ2xlJTE4MCkKICAgICAgICB9LAogICAgICAgIGgoCiAgICAgICAgICAndHNwYW4nLAogICAgICAgICAgewogICAgICAgICAgICAuLi5BbGlnbm1lbnRBdHRycyhhbGlnbiwgSE9SSVpPTlRBTCksCiAgICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiB7IF9faHRtbDogbmFtZSB9CiAgICAgICAgICB9IC8qLCBoKEZyYWdtZW50LCB7fSwgW3RleHRdKSovCiAgICAgICAgKQogICAgICApCiAgICApOwogICAgY2hpbGRyZW4ucHVzaCgKICAgICAgaCgnY2lyY2xlJywgewogICAgICAgIGNsYXNzOiAncGluLXgnLAogICAgICAgIHN0cm9rZTogJyNmZjAwZmYnLAogICAgICAgIGZpbGw6ICdub25lJywKICAgICAgICBjeDogdHAueCwKICAgICAgICBjeTogdHAueSwKICAgICAgICByOiAwLjUsCiAgICAgICAgJ3N0cm9rZS13aWR0aCc6IDAuMQogICAgICB9KQogICAgKTsKICAgIGNoaWxkcmVuLnB1c2goCiAgICAgIGgoJ2NpcmNsZScsIHsKICAgICAgICBjbGFzczogJ3Bpbi15JywKICAgICAgICBzdHJva2U6ICcjNDIxOWZmJywKICAgICAgICBvcGFjaXR5OiAwLjgsCiAgICAgICAgZmlsbDogJ25vbmUnLAogICAgICAgIGN4OiB4LAogICAgICAgIGN5OiB5LAogICAgICAgIHI6IDAuNzUsCiAgICAgICAgJ3N0cm9rZS13aWR0aCc6IDAuMQogICAgICB9KQogICAgKTsKCiAgICBjb25zb2xlLmxvZygnUGluLnJlbmRlcig1KScsIHsgbmFtZSwgdHAsIHRyYW5zZm9ybWF0aW9uLCByb3QgfSk7CiAgfQoKICByZXR1cm4gaCgnZycsIHsgJ2RhdGEtdHlwZSc6ICdwaW4nLCAnZGF0YS1uYW1lJzogbmFtZSB9LCBjaGlsZHJlbik7CiAgcmV0dXJuIGgoRnJhZ21lbnQsIHt9LCBjaGlsZHJlbik7Cn07CgAAAAAAAAAADQ8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQgsAAAAAAABCCwAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAFQOAAAAAAAAVg4AAAAAAAAAAAAAqAwAAAAAAACqDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVA4AAAAAAACoDAAAAAAAAAAAAAAAAPC/"
				],
				[
					84,
					1,
					"paste",
					null,
					"AQAAAJoBAAAAAAAA5QEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmgEAAAAAAACaAQAAAAAAAAAAAAAAAPC/"
				],
				[
					92,
					1,
					"insert",
					{
						"characters": "new"
					},
					"AwAAAKYLAAAAAAAApwsAAAAAAAAAAAAApwsAAAAAAACoCwAAAAAAAAAAAACoCwAAAAAAAKkLAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApgsAAAAAAACmCwAAAAAAAAAAAAAAAPC/"
				],
				[
					93,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKkLAAAAAAAAqgsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqQsAAAAAAACpCwAAAAAAAAAAAAAAAPC/"
				],
				[
					94,
					1,
					"paste",
					null,
					"AQAAAKoLAAAAAAAAvAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqgsAAAAAAACqCwAAAAAAAAAAAAAAAPC/"
				],
				[
					95,
					1,
					"insert",
					{
						"characters": "()"
					},
					"AgAAALwLAAAAAAAAvQsAAAAAAAAAAAAAvQsAAAAAAAC+CwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvAsAAAAAAAC8CwAAAAAAAAAAAAAAAPC/"
				],
				[
					96,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAL4LAAAAAAAAvwsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvgsAAAAAAAC+CwAAAAAAAAAAAAAAAPC/"
				],
				[
					98,
					13,
					"right_delete",
					null,
					"DQAAAM0LAAAAAAAAzQsAAAAAAAABAAAACs0LAAAAAAAAzQsAAAAAAAABAAAAIM0LAAAAAAAAzQsAAAAAAAABAAAAIM0LAAAAAAAAzQsAAAAAAAABAAAAIM0LAAAAAAAAzQsAAAAAAAABAAAAIM0LAAAAAAAAzQsAAAAAAAABAAAAIM0LAAAAAAAAzQsAAAAAAAABAAAAIM0LAAAAAAAAzQsAAAAAAAABAAAAIM0LAAAAAAAAzQsAAAAAAAABAAAAIM0LAAAAAAAAzQsAAAAAAAABAAAAIM0LAAAAAAAAzQsAAAAAAAABAAAAIM0LAAAAAAAAzQsAAAAAAAABAAAAIM0LAAAAAAAAzQsAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAzQsAAAAAAADNCwAAAAAAAP///////+9/"
				],
				[
					101,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAANYLAAAAAAAA2AsAAAAAAAAAAAAAvwsAAAAAAADBCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvwsAAAAAAADWCwAAAAAAAP///////+9/"
				],
				[
					125,
					1,
					"paste",
					null,
					"AQAAAAMBAAAAAAAAGgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAwEAAAAAAAADAQAAAAAAAAAAAAAAAPC/"
				],
				[
					132,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAALEBAAAAAAAAsgEAAAAAAAAAAAAAsgEAAAAAAACyAQAAAAAAAEsAAABpbXBvcnQgeyBUcmFuc2Zvcm1hdGlvbkxpc3QsIFJvdGF0aW9uLCBUcmFuc2xhdGlvbiB9IGZyb20gJy4uLy4uL2dlb20uanMnOwo",
					"AQAAAAAAAAABAAAAsQEAAAAAAAD8AQAAAAAAAAAAAAAAAPC/"
				],
				[
					162,
					1,
					"insert",
					{
						"characters": "\n.concat"
					},
					"CQAAAOsLAAAAAAAA7AsAAAAAAAAAAAAA7AsAAAAAAAD4CwAAAAAAAAAAAAD4CwAAAAAAAPkLAAAAAAAAAAAAAPkLAAAAAAAA+gsAAAAAAAAAAAAA+gsAAAAAAAD7CwAAAAAAAAAAAAD7CwAAAAAAAPwLAAAAAAAAAAAAAPwLAAAAAAAA/QsAAAAAAAAAAAAA/QsAAAAAAAD+CwAAAAAAAAAAAAD+CwAAAAAAAP8LAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6wsAAAAAAADrCwAAAAAAAAAAAAAAAPC/"
				],
				[
					163,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAP8LAAAAAAAAAQwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/wsAAAAAAAD/CwAAAAAAAAAAAAAAAPC/"
				],
				[
					164,
					1,
					"insert",
					{
						"characters": "trans"
					},
					"BQAAAAAMAAAAAAAAAQwAAAAAAAAAAAAAAQwAAAAAAAACDAAAAAAAAAAAAAACDAAAAAAAAAMMAAAAAAAAAAAAAAMMAAAAAAAABAwAAAAAAAAAAAAABAwAAAAAAAAFDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAwAAAAAAAAADAAAAAAAAAAAAAAAAPC/"
				],
				[
					165,
					1,
					"insert_completion",
					{
						"completion": "transformation",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "transformation"
					},
					"AgAAAAAMAAAAAAAAAAwAAAAAAAAFAAAAdHJhbnMADAAAAAAAAA4MAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABQwAAAAAAAAFDAAAAAAAAAAAAAAAAPC/"
				],
				[
					166,
					1,
					"insert",
					{
						"characters": ".invert"
					},
					"BwAAAA4MAAAAAAAADwwAAAAAAAAAAAAADwwAAAAAAAAQDAAAAAAAAAAAAAAQDAAAAAAAABEMAAAAAAAAAAAAABEMAAAAAAAAEgwAAAAAAAAAAAAAEgwAAAAAAAATDAAAAAAAAAAAAAATDAAAAAAAABQMAAAAAAAAAAAAABQMAAAAAAAAFQwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADgwAAAAAAAAODAAAAAAAAAAAAAAAAPC/"
				],
				[
					167,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAABUMAAAAAAAAFwwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFQwAAAAAAAAVDAAAAAAAAAAAAAAAAPC/"
				],
				[
					207,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AgAAAFILAAAAAAAAUwsAAAAAAAAAAAAAUwsAAAAAAABTCwAAAAAAAAUAAAAwLjkxNA",
					"AQAAAAAAAAABAAAAUgsAAAAAAABXCwAAAAAAAAAAAAAAAPC/"
				],
				[
					221,
					1,
					"insert",
					{
						"characters": "1.,"
					},
					"BAAAAFILAAAAAAAAUwsAAAAAAAAAAAAAUwsAAAAAAABTCwAAAAAAAAMAAAAycHhTCwAAAAAAAFQLAAAAAAAAAAAAAFQLAAAAAAAAVQsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUgsAAAAAAABVCwAAAAAAAAAAAAAAAPC/"
				],
				[
					222,
					1,
					"left_delete",
					null,
					"AQAAAFQLAAAAAAAAVAsAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAVQsAAAAAAABVCwAAAAAAAAAAAAAAAPC/"
				],
				[
					223,
					1,
					"insert",
					{
						"characters": "5px"
					},
					"AwAAAFQLAAAAAAAAVQsAAAAAAAAAAAAAVQsAAAAAAABWCwAAAAAAAAAAAABWCwAAAAAAAFcLAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVAsAAAAAAABUCwAAAAAAAAAAAAAAAPC/"
				],
				[
					234,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AgAAAFILAAAAAAAAUwsAAAAAAAAAAAAAUwsAAAAAAABTCwAAAAAAAAEAAAAx",
					"AQAAAAAAAAABAAAAUgsAAAAAAABTCwAAAAAAAAAAAAAAAPC/"
				],
				[
					245,
					3,
					"left_delete",
					null,
					"AwAAAFQLAAAAAAAAVAsAAAAAAAABAAAANVMLAAAAAAAAUwsAAAAAAAABAAAALlILAAAAAAAAUgsAAAAAAAABAAAAMg",
					"AQAAAAAAAAABAAAAVQsAAAAAAABVCwAAAAAAAAAAAAAAAPC/"
				],
				[
					246,
					1,
					"insert",
					{
						"characters": "1.8"
					},
					"AwAAAFILAAAAAAAAUwsAAAAAAAAAAAAAUwsAAAAAAABUCwAAAAAAAAAAAABUCwAAAAAAAFULAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUgsAAAAAAABSCwAAAAAAAAAAAAAAAPC/"
				],
				[
					253,
					1,
					"paste",
					null,
					"AgAAAFILAAAAAAAAWQsAAAAAAAAAAAAAWQsAAAAAAABZCwAAAAAAAAUAAAAxLjhweA",
					"AQAAAAAAAAABAAAAUgsAAAAAAABXCwAAAAAAAAAAAAAAAPC/"
				],
				[
					270,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABmDwAAaW1wb3J0IHsgaCwgRnJhZ21lbnQsIENvbXBvbmVudCB9IGZyb20gJy4uLy4uL2RvbS9wcmVhY3RDb21wb25lbnQuanMnOwppbXBvcnQgeyBNYWtlQ29vcmRUcmFuc2Zvcm1lciwgRWxlbWVudFRvQ2xhc3MsIGxvZywgUGluU2l6ZXMsIEFsaWdubWVudCwgQWxpZ25tZW50QXR0cnMsIFZFUlRJQ0FMLCBIT1JJWk9OVEFMLCBNYWtlUm90YXRpb24sIFJBRDJERUcgfSBmcm9tICcuLi9yZW5kZXJVdGlscy5qcyc7CmltcG9ydCB7IFRyYW5zZm9ybWF0aW9uTGlzdCwgUm90YXRpb24sIFRyYW5zbGF0aW9uLCBQb2ludCwgTGluZSB9IGZyb20gJy4uLy4uL2dlb20uanMnOwppbXBvcnQgeyBSR0JBIH0gZnJvbSAnLi4vLi4vY29sb3IuanMnOwppbXBvcnQgeyBQYWxldHRlIH0gZnJvbSAnLi4vY29tbW9uLmpzJzsKaW1wb3J0IHsgVGV4dCB9IGZyb20gJy4vdGV4dC5qcyc7CiAKZXhwb3J0IGNvbnN0IFBpbiA9ICh7IGRhdGEsIG9wdHMgPSB7fSwgLi4ucHJvcHMgfSkgPT4gewogIGRhdGEgPSBkYXRhIHx8IHByb3BzLml0ZW07CgogIGxvZygnUGluLnJlbmRlcigwKScsIHsgZGF0YSwgb3B0cyB9KTsKCiAgbGV0IHsgdHJhbnNmb3JtID0gbmV3IFRyYW5zZm9ybWF0aW9uTGlzdCgpIH0gPSBvcHRzOwogIGxldCB7IHRyYW5zZm9ybWF0aW9uIH0gPSBvcHRzOwoKICBsZXQgY29vcmRGbiA9IHRyYW5zZm9ybSA/IE1ha2VDb29yZFRyYW5zZm9ybWVyKHRyYW5zZm9ybSkgOiBpID0+IGk7CgogIGNvbnN0IHsgbGVuZ3RoLCByb3QsIG5hbWUsIHZpc2libGUgfSA9IGRhdGE7CiAgY29uc3QgeyB4LCB5IH0gPSBjb29yZEZuKGRhdGEpOwogIGNvbnN0IGZ1bmMgPSBkYXRhLmZ1bmN0aW9uOwoKICBsZXQgW3JvdGF0aW9uXSA9IE1ha2VSb3RhdGlvbihyb3QpOwogIGNvbnNvbGUubG9nKGBQaW4ucmVuZGVyKCR7bmFtZX0pYCwgeyByb3RhdGlvbiB9KTsKICBsZXQgYW5nbGUgPSByb3RhdGlvbiA/IE1hdGgucm91bmQocm90YXRpb24uYW5nbGUpIDogMDsKCiAgLy8gIGNvbnN0IGFuZ2xlID0gKyhyb3QgfHwgJzAnKS5yZXBsYWNlKC9SLywgJycpOwogIGxldCB2ZWNsZW4gPSBQaW5TaXplc1tsZW5ndGhdICogMi41NDsKICBpZihmdW5jID09ICdkb3QnKSB2ZWNsZW4gLT0gMS41OwogIGNvbnN0IGRpciA9IFBvaW50LmZyb21BbmdsZSgoYW5nbGUgKiBNYXRoLlBJKSAvIDE4MCk7CiAgY29uc3QgdmVjID0gZGlyLnByb2QodmVjbGVuKTsKICBjb25zdCBwaXZvdCA9IG5ldyBQb2ludCgreCwgK3kpOwogIGNvbnN0IHBwID0gZGlyLnByb2QodmVjbGVuICsgMC43NSkuYWRkKHBpdm90KTsKICBjb25zdCBsID0gbmV3IExpbmUocGl2b3QsIHZlYy5hZGQocGl2b3QpKTsKICBsZXQgY2hpbGRyZW4gPSBbXTsKICBjb25zdCB0cCA9IHBpdm90LmRpZmYoZGlyLnByb2QoLTIuNTQgKiAyKSk7CgogIGlmKGZ1bmMgPT0gJ2RvdCcgJiYgbGVuZ3RoICE9ICdwb2ludCcpIHsKICAgIGNoaWxkcmVuLnB1c2goCiAgICAgIGgoJ2NpcmNsZScsIHsKICAgICAgICBjbGFzczogJ3BpbicsCiAgICAgICAgc3Ryb2tlOiAnI2E1NGI0YicsCiAgICAgICAgZmlsbDogJ25vbmUnLAogICAgICAgIGN4OiBwcC54LAogICAgICAgIGN5OiBwcC55LAogICAgICAgIHI6IDAuNzUsCiAgICAgICAgJ3N0cm9rZS13aWR0aCc6IDAuMwogICAgICB9KQogICAgKTsKICAgIGNvbnNvbGUubG9nKCdQaW4ucmVuZGVyKDIpJywgeyBwcCB9KTsKICB9CgogIGlmKGwuZ2V0TGVuZ3RoKCkpIHsKICAgIGNoaWxkcmVuLnB1c2goCiAgICAgIGgoJ2xpbmUnLCB7CiAgICAgICAgY2xhc3M6ICdwaW4nLAogICAgICAgIHN0cm9rZTogJyNhNTRiNGInLAogICAgICAgIC4uLmwudG9PYmplY3QoKSwKICAgICAgICAnc3Ryb2tlLXdpZHRoJzogMC4xNQogICAgICB9KQogICAgKTsKICAgIGNvbnNvbGUubG9nKCdQaW4ucmVuZGVyKDMpJywgeyBsIH0pOwogIH0KICBpZihuYW1lICE9ICcnICYmIHZpc2libGUgIT0gJ29mZicpIHsKICAgIGNvbnN0IGFsaWduID0gQWxpZ25tZW50KGFuZ2xlID49IDE4MCA/ICdjZW50ZXItcmlnaHQnIDogJ2NlbnRlci1sZWZ0JywgMCk7CiAgICAvLyAgY29uc3Qgcm90YXRpb249TWFrZVJvdGF0aW9uKHJvdCk7CiAgICBjb25zb2xlLmxvZyhgUGluLnJlbmRlcigke25hbWV9KWAsIHsgYWxpZ24sIGFuZ2xlLCByb3RhdGlvbiB9KTsKICAgIC8qIGNoaWxkcmVuLnB1c2goCiAgICAgIGgoVGV4dCwgewogICAgICAgIGNsYXNzOiBFbGVtZW50VG9DbGFzcyhkYXRhKSwKICAgICAgICBjb2xvcjogUGFsZXR0ZS5zY2hlbWF0aWMoKHIsIGcsIGIpID0+IG5ldyBSR0JBKHIsIGcsIGIpKVsxNl0sCiAgICAgICAgeDogdHAueCwKICAgICAgICB5OiB0cC55LAoKICAgICAgICB0ZXh0OiBuYW1lLAogICAgICAgIGFsaWdubWVudDogbmV3IFBvaW50KC0xLCAwKSwKICAgICAgICBvcHRzOiB7IHRyYW5zZm9ybWF0aW9uIH0sCiAgICAgICAgcm90LAogICAgICAgICdkYXRhLXJvdCc6IHJvdCwKICAgICAgICAnZm9udC1zaXplJzogJzEuOTA1cHgnCiAgICAgIH0pCiAgICApOyovCgogICAgY2hpbGRyZW4ucHVzaCgKICAgICAgaCgKICAgICAgICAndGV4dCcsCiAgICAgICAgewogICAgICAgICAgY2xhc3M6IEVsZW1lbnRUb0NsYXNzKGRhdGEpLAogICAgICAgICAgZmlsbDogUGFsZXR0ZS5zY2hlbWF0aWMoKHIsIGcsIGIpID0+IG5ldyBSR0JBKHIsIGcsIGIpKVsxNl0sCiAgICAgICAgICBzdHJva2U6ICdub25lJywKICAgICAgICAgIHg6IDAsCiAgICAgICAgICB5OiAwLAoKICAgICAgICAgIC8vc3R5bGU6IHZpc2libGUgPyB7IC4uLnN0eWxlIH0gOiB7IC4uLnN0eWxlLCBkaXNwbGF5OiAnbm9uZScgfSwKICAgICAgICAgIC4uLkFsaWdubWVudEF0dHJzKGFsaWduLCBWRVJUSUNBTCksCiAgICAgICAgICAuLi5wcm9wcywKICAgICAgICAgIHN0eWxlOiB7ICdmb250LXNpemUnOiAnMS45MDVweCcgfSwKICAgICAgICAgIHRyYW5zZm9ybTogbmV3IFRyYW5zZm9ybWF0aW9uTGlzdCgpIC8qdHJhbnNmb3JtYXRpb24uaW52ZXJ0KCkqLwogICAgICAgICAgICAudHJhbnNsYXRlKHRwLngsIHRwLnkpCiAgICAgICAgICAgIC5yb3RhdGUoYW5nbGUgJSAxODApCiAgICAgICAgICAgIC5jb25jYXQodHJhbnNmb3JtYXRpb24uaW52ZXJ0KCkpCiAgICAgICAgfSwKICAgICAgICBoKAogICAgICAgICAgJ3RzcGFuJywKICAgICAgICAgIHsKICAgICAgICAgICAgLi4uQWxpZ25tZW50QXR0cnMoYWxpZ24sIEhPUklaT05UQUwpLAogICAgICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTDogeyBfX2h0bWw6IG5hbWUgfQogICAgICAgICAgfSAvKiwgaChGcmFnbWVudCwge30sIFt0ZXh0XSkqLwogICAgICAgICkKICAgICAgKQogICAgKTsKICAgIC8qY2hpbGRyZW4ucHVzaCgKICAgICAgaCgnY2lyY2xlJywgewogICAgICAgIGNsYXNzOiAncGluLXgnLAogICAgICAgIHN0cm9rZTogJyNmZjAwZmYnLAogICAgICAgIGZpbGw6ICdub25lJywKICAgICAgICBjeDogdHAueCwKICAgICAgICBjeTogdHAueSwKICAgICAgICByOiAwLjUsCiAgICAgICAgJ3N0cm9rZS13aWR0aCc6IDAuMQogICAgICB9KQogICAgKTsKICAgIGNoaWxkcmVuLnB1c2goCiAgICAgIGgoJ2NpcmNsZScsIHsKICAgICAgICBjbGFzczogJ3Bpbi15JywKICAgICAgICBzdHJva2U6ICcjNDIxOWZmJywKICAgICAgICBvcGFjaXR5OiAwLjgsCiAgICAgICAgZmlsbDogJ25vbmUnLAogICAgICAgIGN4OiB4LAogICAgICAgIGN5OiB5LAogICAgICAgIHI6IDAuNzUsCiAgICAgICAgJ3N0cm9rZS13aWR0aCc6IDAuMQogICAgICB9KQogICAgKTsqLwoKICAgIGNvbnNvbGUubG9nKCdQaW4ucmVuZGVyKDUpJywgeyBuYW1lLCB0cCwgdHJhbnNmb3JtYXRpb24sIHJvdCB9KTsKICB9CgogIHJldHVybiBoKCdnJywgeyAnZGF0YS10eXBlJzogJ3BpbicsICdkYXRhLW5hbWUnOiBuYW1lIH0sIGNoaWxkcmVuKTsKICByZXR1cm4gaChGcmFnbWVudCwge30sIGNoaWxkcmVuKTsKfTsKAAAAAAAAAABlDwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAugkAAAAAAAC6CQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/eagle/components/symbol.js",
			"settings":
			{
				"buffer_size": 910,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "lib/eagle/components/textElement.js",
			"settings":
			{
				"buffer_size": 2018,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"contents": "",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"prettier",
				"JsPrettier: Format Code"
			],
			[
				"pre",
				"Project: Edit Project"
			],
			[
				"prett",
				"JsPrettier: Format Code"
			],
			[
				"",
				"Auto indent"
			],
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"list pack",
				"Package Control: List Packages"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"edit ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"edit",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"outli",
				"Browse Mode: Outline (Right)"
			],
			[
				"debugger",
				"Preferences: Debugger Settings"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"scheme",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"INSTALL",
				"Package Control: Install Package"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"adap",
				"Debugger: Install Adapters"
			],
			[
				"install ada",
				"Debugger: Install Adapters"
			],
			[
				"adapter",
				"Debugger: Install Adapters"
			],
			[
				"debug",
				"Debugger: Install Adapters"
			],
			[
				"Package Control: remove",
				"Package Control: Remove Package"
			],
			[
				"debu",
				"Debugger: Install Adapters"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 289.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv",
		"/home/roman/Projects/plot-cv/lib",
		"/home/roman/Projects/plot-cv/lib/eagle",
		"/home/roman/Projects/plot-cv/lib/eagle/components"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/lib/eagle/components/pin.js",
		"/home/roman/Projects/plot-cv/lib/util.js",
		"/home/roman/Projects/an-tronics/eagle/555-PWM-Motor-Speed-Controller-alt.sch",
		"/home/roman/Projects/an-tronics/eagle/555-PWM-Motor-Speed-Controller-alt.brd",
		"/home/roman/Projects/plot-cv/lib/eagle/schematicRenderer.js",
		"/home/roman/Projects/plot-cv/555-PWM-Motor-Speed-Controller-alt-schematic.svg",
		"/home/roman/Projects/plot-cv/lib/eagle/components/symbol.js",
		"/home/roman/Projects/plot-cv/555-PWM-Motor-Speed-Controller-alt-board.svg",
		"/home/roman/Projects/plot-cv/lib/eagle/svgRenderer.js",
		"/home/roman/Projects/plot-cv/lib/geom/size.js",
		"/home/roman/Projects/plot-cv/lib/eagle/document.js",
		"/home/roman/Projects/plot-cv/lib/geom/point.js",
		"/home/roman/Projects/plot-cv/lib/geom/line.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/line.js",
		"/home/roman/Projects/plot-cv/lib/geom/rect.js",
		"/home/roman/Projects/plot-cv/lib/eagle/boardRenderer.js",
		"/home/roman/Projects/plot-cv/lib/eagle/renderUtils.js",
		"/home/roman/Projects/plot-cv/eagle2svg.js",
		"/home/roman/Projects/plot-cv/lib/eagle/project.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/lib/eagle/nodeList.js",
		"/home/roman/Projects/plot-cv/lib/eagle/element.js",
		"/home/roman/Projects/plot-cv/lib/eagle/common.js",
		"/home/roman/Projects/plot-cv/eagle-shell.js",
		"/home/roman/Projects/plot-cv/lib/dom/preactComponent.js",
		"/home/roman/Projects/plot-cv/lib/eagle/node.js",
		"/home/roman/Projects/plot-cv/lib/misc.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/text.js",
		"/home/roman/Projects/plot-cv/lib/eagle/ref.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/grid.js",
		"/home/roman/Projects/plot-cv/lib/eagle/elementProxy.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/smd.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/wirePath.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/wire.js",
		"/home/roman/Projects/plot-cv/lib/eagle/nodeMap.js",
		"/home/roman/Projects/plot-cv/lib/eagle/renderer.js",
		"/home/roman/Projects/plot-cv/resolve-imports.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/textElement.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/circle.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/pad.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/via.js",
		"/home/roman/Projects/plot-cv/lib/eagle/libraryRenderer.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components.js",
		"/home/roman/Projects/plot-cv/quickjs/cmake/functions.cmake",
		"/home/roman/Projects/plot-cv/qjs-opencv/cmake/functions.cmake",
		"/home/roman/Projects/plot-cv/cmake/functions.cmake",
		"/home/roman/Projects/plot-cv/lib/container/spatial-hash.js",
		"/home/roman/Projects/plot-cv/lib/container/Hash-Multimap.js",
		"/home/roman/Projects/plot-cv/lib/container/componentMap.js",
		"/home/roman/Projects/plot-cv/lib/container/multikeymap.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/drawing.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/util-w-2.diff",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/new.diff",
		"/home/roman/Projects/plot-cv/lib/eda/colorCoding.js",
		"/home/roman/Projects/plot-cv/eagle-commands.js",
		"/home/roman/Projects/plot-cv/upload.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/xml-shell.js",
		"/home/roman/Projects/plot-cv/upload-server.js",
		"/home/roman/Projects/plot-cv/lib/color/rgba.js",
		"/home/roman/Projects/plot-cv/lib/delegate.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/package.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/element.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/origin.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/board.js",
		"/home/roman/Projects/plot-cv/lib/json/pathMapper.js",
		"/home/roman/Projects/plot-cv/eagle-query.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/xpath.js",
		"/home/roman/Dokumente/Electronics/example.circuit",
		"/home/roman/Projects/plot-cv/circuit.js",
		"/home/roman/Projects/pictest/eagle/OpenProg-18F2550.brd",
		"/home/roman/Projects/plot-cv/OpenProg-18F2550.circuit",
		"/home/roman/Projects/plot-cv/read.hex",
		"/home/roman/Projects/plot-cv/test-bitset.js",
		"/home/roman/Projects/plot-cv/example.circuit",
		"/home/roman/Projects/plot-cv/test-circuit.js",
		"/home/roman/Projects/plot-cv/OProg-18F2550.hex",
		"/home/roman/Projects/plot-cv/lib/async/events.js",
		"/home/roman/Projects/plot-cv/lib/async/websocket.js",
		"/home/roman/Projects/plot-cv/lib/repeater/repeater.js",
		"/home/roman/Projects/plot-cv/eagle2gerber.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_treewalker.js",
		"/home/roman/Projects/plot-cv/lib/geom/bbox.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fs.js",
		"/home/roman/Projects/plot-cv/svg-crop-pad.js",
		"/home/roman/Projects/plot-cv/fire.js",
		"/home/roman/Projects/plot-cv/lib/geom/matrix.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/src/plugins/mirror.c",
		"/home/roman/Projects/plot-cv/fire.html",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/list-exports.js",
		"/home/roman/Projects/plot-cv/lib/stream/utils.js",
		"/home/roman/Projects/plot-cv/string-helpers.js",
		"/home/roman/Projects/plot-cv/test-bjson.js",
		"/home/roman/Projects/plot-cv/bjson.js",
		"/home/roman/Projects/plot-cv/clang-ast.js",
		"/home/roman/Projects/plot-cv/ast-shell.js",
		"/home/roman/Projects/plot-cv/openlayers/examples/wms-tiled-wrap-180.html",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-pointer.c",
		"/home/roman/Projects/plot-cv/plot-cv.sublime-project",
		"/home/roman/Projects/plot-cv/test-debuggerprotocol.js",
		"/home/roman/Projects/plot-cv/lib/iterator/helpers.js",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/lib/stream.js",
		"/home/roman/Projects/plot-cv/filelist.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-server-ws.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-server-http.c",
		"/home/roman/Projects/plot-cv/lib/hooks/useAsyncIterator.js",
		"/home/roman/Projects/plot-cv/lib/hooks/useAsyncGenerator.js",
		"/home/roman/Projects/plot-cv/filelist.html",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/extendGenerator.js",
		"/home/roman/Projects/plot-cv/main.js",
		"/home/roman/Projects/plot-cv/index.html",
		"/home/roman/Projects/plot-cv/test-gpio.js",
		"/home/roman/Projects/plot-cv/upload.html",
		"/home/roman/Projects/pic-programmer/a-p-prog/fw/pp/pp.ino",
		"/home/roman/Projects/plot-cv/fontsample.js",
		"/home/roman/Projects/plot-cv/test-opencv.js",
		"/home/roman/Projects/pictest/7seg-2.54-new-boards.svg",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.c",
		"/home/roman/Projects/plot-cv/eagle-server.js",
		"/home/roman/Projects/plot-cv/debugger-server.js",
		"/home/roman/Projects/plot-cv/cv-shell.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/qjsm.c",
		"/home/roman/Projects/plot-cv/adsb-server.js",
		"/home/roman/Projects/plot-cv/test-rpc.js",
		"/home/roman/Projects/plot-cv/test-repl.js",
		"/home/roman/Projects/plot-cv/repl.js"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 142.0,
		"where_history":
		[
			"/home/roman/Projects/plot-cv/lib/eagle,*.js,-*/build/*,-*/inst/*",
			"<open files>,/home/roman/Projects/plot-cv,*.js,-*/build/*,-*/inst/*",
			"/home/roman/Projects/plot-cv,*.js,-*/build/*,-*/inst/*",
			"/home/roman/Projects/plot-cv,*.js,-*/build/*",
			"/home/roman/Projects/plot-cv,*.js",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"R",
			"R2",
			"parentRot",
			"log",
			"const",
			"TransformationList",
			"rot=\"M",
			"transformation",
			"vec",
			"transform",
			"R2<",
			"R2",
			"children.push(\n      h('circle', {\n        class: 'pin-x',\n        stroke: '#ff00ff',\n        fill: 'none',\n        cx: tp.x,\n        cy: tp.y,\n        r: 0.5,\n        'stroke-width': 0.1\n      })\n    );\n    children.push(\n      h('circle', {\n        class: 'pin-y',\n        stroke: '#4219ff',\n        opacity: 0.8,\n        fill: 'none',\n        cx: x,\n        cy: y,\n        r: 0.75,\n        'stroke-width': 0.1\n      })\n    );",
			"IC1<",
			"font-size:",
			"console\\.",
			");\n",
			"<pin",
			"transform",
			"tp =",
			"IC1\"",
			"IC1",
			"name",
			"555_ALT",
			"IC1\"",
			"IC1",
			"Fragment",
			")]));",
			"'SVGRenderer",
			"Renderer\\.render",
			"\\.render",
			"svg\\(",
			"elem",
			"555_ALT3",
			"IC1\"",
			"isNumeric.*parseFloat",
			"indexOf",
			"'value'",
			"'element'",
			"'element'w",
			"'element'",
			"'value'",
			"get value",
			"D1\"",
			"renderItem",
			"renderItem'",
			"round =",
			"roundTo =",
			"round =",
			"inspect",
			"toStringTag",
			"getBounds",
			"getOther",
			"getOther =",
			"getOther",
			"getOther =",
			"getOther",
			"quot =",
			"console\\.log",
			"console.log",
			"renderItem",
			"^(\\s*)console\\.",
			"lazyOpen",
			"replaceProperty",
			"addLib",
			"Util",
			"Util\\.",
			"})();\n",
			"ifThenElse",
			"Util\\.",
			"isIterable",
			"Util\\.",
			"^import Util",
			"decorateIterable",
			"Util",
			"Util\\.",
			"typeof ([^()& ]*) ===* 'function'",
			"mapFunction",
			"mapWrapper =",
			"Util\\.",
			"isIterable",
			"isGenerator",
			"Util\\.",
			"isIterator",
			"randInt",
			"reduce =",
			"reduce",
			"Util\\.",
			"isNumeric",
			"Util.isNumerixc",
			"Util\\.",
			"Util.define",
			"Util\\.",
			"defineGetter",
			"Util\\.",
			"coloring",
			"path\\.",
			"fs\\.",
			"Util\\.",
			"determineEaglePath",
			"Util\\.",
			"defineGett",
			"Util\\.",
			"inspect",
			"Util\\.",
			"Util.inserter =",
			"inserter =",
			"inserter",
			"Util\\.",
			"length, seq",
			"recursive",
			"getOpt",
			"Util\\.",
			"Util\\.(className|define|defineGettersSetters|fnName|getPrototypeChain|isBrowser|isObject|memoize|tryCatch)",
			"Util\\.",
			"Util.is",
			"isArray",
			"isArray\\(",
			"isArray",
			"function isArray",
			"isArray",
			"isObject",
			"Util\\.",
			"Util\\.define\\(",
			"$",
			"Util\\.define\\(",
			"Util\\.define",
			"Util\\.define\\("
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"",
			"'EagleSVGRenderer",
			"this.debug",
			"\\1//console.",
			"isFunction(\\1)",
			"",
			"\\1",
			"is",
			"define",
			"!isString(\\1)",
			"!isFunction(\\1)",
			"isObject(\\1)",
			"isFunction(\\1)",
			"diff --git a/lib/util.js b/lib/util.js\nindex ab76720..001e53e 100644\n--- a/lib/util.js\n+++ b/lib/util.js\n@@",
			"function \\1(\\2) {",
			"function \\1(\\2)",
			"!isString(\\1)",
			"types.isBigInt(\\1)",
			"!isObject(\\1)",
			"isSymbol(\\1)",
			"isString(\\1)",
			"isObject(\\1)",
			"isNumber(\\1)",
			"!isFunction(\\1)",
			"!isString(\\1)",
			"isNumber(\\1)",
			"isString(\\1)",
			"isObject(\\1)",
			"isFunction(\\1)",
			"",
			"^\\1//this.debug",
			"'./components",
			"}\\n\\n\\1",
			"this.circuit",
			"",
			"\\1//console",
			"packageToPosMap",
			"(this.parse",
			"line",
			"maxDepthOrPred",
			"define",
			"isObject",
			"\\1//\\2",
			""
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 104,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": "/home/roman/Projects/plot-cv/lib/eagle/components/text.js",
							"function_name_status_row": 14,
							"outline_rename_mode": false,
							"symkeys":
							[
								[
									412,
									509
								],
								[
									1533,
									1537
								]
							],
							"symlist":
							[
								"Text = ({ x, y, text, color, alignment, rot, visible, className, opts = {}, style, ...props }) =>",
								"  t =>"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tabs_extra_last_activated": 1678253417.66,
							"tabs_extra_last_activated_sheet_index": 0
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "lib/eagle/components/text.js",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2593,
						"regions":
						{
						},
						"selection":
						[
							[
								1763,
								1763
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 36,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1678253847.63,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "lib/util.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 187065,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1678253637.09,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "lib/geom/transformation.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 22787,
						"regions":
						{
						},
						"selection":
						[
							[
								20986,
								20990
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 783,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1678253706.57,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 10577.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "lib/eagle/renderUtils.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16037,
						"regions":
						{
						},
						"selection":
						[
							[
								4195,
								4300
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 139,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1678253705.04,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1505.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "lib/geom/matrix.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 22005,
						"regions":
						{
						},
						"selection":
						[
							[
								11423,
								11478
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 381,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1678253704.84,
							"tabs_extra_last_activated_sheet_index": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4837.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/home/roman/Projects/an-tronics/eagle/555-PWM-Motor-Speed-Controller-alt.sch",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 258556,
						"regions":
						{
						},
						"selection":
						[
							[
								251426,
								251432
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 4464,
							"syntax": "Packages/XML/XML.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1678253704.51,
							"tabs_extra_last_activated_sheet_index": 5,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 62069.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "/home/roman/Projects/an-tronics/eagle/555-PWM-Motor-Speed-Controller-alt.brd",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 41617,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/XML/XML.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1678253703.7,
							"tabs_extra_last_activated_sheet_index": 6,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "555-PWM-Motor-Speed-Controller-alt-board.svg",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 150855,
						"regions":
						{
							"col_0000AAFF":
							{
								"flags": 16,
								"regions":
								[
									[
										98994,
										99001
									]
								],
								"scope": "col_0000AAFF"
							},
							"col_0000AAFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_0000AAFF_circle.png",
								"regions":
								[
									[
										98936,
										98936
									]
								],
								"scope": "col_gutter"
							},
							"col_008000FF":
							{
								"flags": 16,
								"regions":
								[
									[
										106578,
										106585
									],
									[
										107112,
										107119
									],
									[
										110337,
										110344
									],
									[
										110872,
										110879
									],
									[
										113436,
										113443
									],
									[
										113970,
										113977
									],
									[
										117084,
										117091
									],
									[
										117619,
										117626
									],
									[
										120729,
										120736
									],
									[
										121288,
										121295
									],
									[
										123984,
										123991
									],
									[
										124562,
										124569
									],
									[
										125139,
										125146
									],
									[
										125716,
										125723
									],
									[
										126295,
										126302
									],
									[
										126874,
										126881
									],
									[
										127452,
										127459
									],
									[
										128030,
										128037
									],
									[
										129912,
										129919
									],
									[
										130446,
										130453
									],
									[
										132389,
										132396
									],
									[
										132923,
										132930
									],
									[
										134870,
										134877
									],
									[
										135426,
										135433
									],
									[
										135997,
										136004
									],
									[
										138120,
										138127
									],
									[
										138654,
										138661
									],
									[
										141231,
										141238
									],
									[
										141766,
										141773
									],
									[
										144512,
										144519
									],
									[
										145047,
										145054
									],
									[
										145605,
										145612
									],
									[
										148752,
										148759
									],
									[
										150073,
										150080
									]
								],
								"scope": "col_008000FF"
							},
							"col_008000FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_008000FF_circle.png",
								"regions":
								[
									[
										106410,
										106410
									],
									[
										106944,
										106944
									],
									[
										110169,
										110169
									],
									[
										110704,
										110704
									],
									[
										113268,
										113268
									],
									[
										113802,
										113802
									],
									[
										116916,
										116916
									],
									[
										117451,
										117451
									],
									[
										120561,
										120561
									],
									[
										121120,
										121120
									],
									[
										123793,
										123793
									],
									[
										124371,
										124371
									],
									[
										124948,
										124948
									],
									[
										125525,
										125525
									],
									[
										126104,
										126104
									],
									[
										126683,
										126683
									],
									[
										127261,
										127261
									],
									[
										127839,
										127839
									],
									[
										129752,
										129752
									],
									[
										130278,
										130278
									],
									[
										132229,
										132229
									],
									[
										132755,
										132755
									],
									[
										134702,
										134702
									],
									[
										135258,
										135258
									],
									[
										135837,
										135837
									],
									[
										137952,
										137952
									],
									[
										138486,
										138486
									],
									[
										141063,
										141063
									],
									[
										141598,
										141598
									],
									[
										144344,
										144344
									],
									[
										144879,
										144879
									],
									[
										145437,
										145437
									],
									[
										148584,
										148584
									],
									[
										149905,
										149905
									]
								],
								"scope": "col_gutter"
							},
							"col_4B4BA5FF":
							{
								"flags": 16,
								"regions":
								[
									[
										99837,
										99844
									],
									[
										100046,
										100053
									],
									[
										100255,
										100262
									],
									[
										100464,
										100471
									],
									[
										100671,
										100678
									],
									[
										100877,
										100884
									],
									[
										101083,
										101090
									],
									[
										101290,
										101297
									],
									[
										101497,
										101504
									],
									[
										101704,
										101711
									],
									[
										101911,
										101918
									],
									[
										102118,
										102125
									],
									[
										102324,
										102331
									],
									[
										102529,
										102536
									],
									[
										102736,
										102743
									],
									[
										102942,
										102949
									],
									[
										103148,
										103155
									],
									[
										103356,
										103363
									],
									[
										103565,
										103572
									],
									[
										103770,
										103777
									],
									[
										103976,
										103983
									],
									[
										104183,
										104190
									],
									[
										104389,
										104396
									],
									[
										104595,
										104602
									],
									[
										104802,
										104809
									],
									[
										105009,
										105016
									],
									[
										105216,
										105223
									],
									[
										130734,
										130741
									],
									[
										133211,
										133218
									]
								],
								"scope": "col_4B4BA5FF"
							},
							"col_4B4BA5FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_4B4BA5FF_circle.png",
								"regions":
								[
									[
										99757,
										99757
									],
									[
										99966,
										99966
									],
									[
										100175,
										100175
									],
									[
										100384,
										100384
									],
									[
										100593,
										100593
									],
									[
										100800,
										100800
									],
									[
										101006,
										101006
									],
									[
										101212,
										101212
									],
									[
										101419,
										101419
									],
									[
										101626,
										101626
									],
									[
										101833,
										101833
									],
									[
										102040,
										102040
									],
									[
										102247,
										102247
									],
									[
										102453,
										102453
									],
									[
										102658,
										102658
									],
									[
										102865,
										102865
									],
									[
										103071,
										103071
									],
									[
										103277,
										103277
									],
									[
										103485,
										103485
									],
									[
										103694,
										103694
									],
									[
										103899,
										103899
									],
									[
										104105,
										104105
									],
									[
										104312,
										104312
									],
									[
										104518,
										104518
									],
									[
										104724,
										104724
									],
									[
										104931,
										104931
									],
									[
										105138,
										105138
									],
									[
										130684,
										130684
									],
									[
										133161,
										133161
									]
								],
								"scope": "col_gutter"
							},
							"col_A54B4BFF":
							{
								"flags": 16,
								"regions":
								[
									[
										105420,
										105427
									],
									[
										105621,
										105628
									],
									[
										105823,
										105830
									]
								],
								"scope": "col_A54B4BFF"
							},
							"col_A54B4BFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_A54B4BFF_circle.png",
								"regions":
								[
									[
										105346,
										105346
									],
									[
										105545,
										105545
									],
									[
										105746,
										105746
									]
								],
								"scope": "col_gutter"
							},
							"col_A5A5A5FF":
							{
								"flags": 16,
								"regions":
								[
									[
										99440,
										99447
									],
									[
										109652,
										109659
									],
									[
										112756,
										112763
									],
									[
										116403,
										116410
									],
									[
										120019,
										120026
									],
									[
										123262,
										123269
									],
									[
										129210,
										129217
									],
									[
										131692,
										131699
									],
									[
										134167,
										134174
									],
									[
										136275,
										136282
									],
									[
										137442,
										137449
									],
									[
										140552,
										140559
									],
									[
										143832,
										143839
									],
									[
										148059,
										148066
									],
									[
										149379,
										149386
									],
									[
										150700,
										150707
									]
								],
								"scope": "col_A5A5A5FF"
							},
							"col_A5A5A5FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_A5A5A5FF_circle.png",
								"regions":
								[
									[
										99378,
										99378
									],
									[
										109619,
										109619
									],
									[
										112723,
										112723
									],
									[
										116370,
										116370
									],
									[
										119986,
										119986
									],
									[
										123229,
										123229
									],
									[
										129177,
										129177
									],
									[
										131659,
										131659
									],
									[
										134134,
										134134
									],
									[
										136235,
										136235
									],
									[
										137409,
										137409
									],
									[
										140519,
										140519
									],
									[
										143799,
										143799
									],
									[
										148026,
										148026
									],
									[
										149346,
										149346
									],
									[
										150667,
										150667
									]
								],
								"scope": "col_gutter"
							},
							"col_AFAFAFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										107388,
										107395
									],
									[
										107702,
										107709
									],
									[
										108035,
										108042
									],
									[
										108234,
										108241
									],
									[
										108444,
										108451
									],
									[
										108664,
										108671
									],
									[
										109055,
										109062
									],
									[
										109265,
										109272
									],
									[
										109473,
										109480
									],
									[
										111148,
										111155
									],
									[
										111475,
										111482
									],
									[
										111831,
										111838
									],
									[
										112030,
										112037
									],
									[
										112367,
										112374
									],
									[
										112577,
										112584
									],
									[
										114246,
										114253
									],
									[
										114560,
										114567
									],
									[
										114913,
										114920
									],
									[
										115109,
										115116
									],
									[
										115328,
										115335
									],
									[
										115551,
										115558
									],
									[
										115909,
										115916
									],
									[
										116224,
										116231
									],
									[
										117895,
										117902
									],
									[
										118209,
										118216
									],
									[
										118558,
										118565
									],
									[
										118764,
										118771
									],
									[
										118983,
										118990
									],
									[
										119206,
										119213
									],
									[
										119564,
										119571
									],
									[
										119840,
										119847
									],
									[
										121571,
										121578
									],
									[
										121720,
										121727
									],
									[
										122034,
										122041
									],
									[
										122387,
										122394
									],
									[
										122704,
										122711
									],
									[
										122893,
										122900
									],
									[
										123083,
										123090
									],
									[
										128306,
										128313
									],
									[
										128624,
										128631
									],
									[
										129031,
										129038
									],
									[
										130870,
										130877
									],
									[
										131251,
										131258
									],
									[
										131513,
										131520
									],
									[
										133347,
										133354
									],
									[
										133726,
										133733
									],
									[
										133988,
										133995
									],
									[
										136597,
										136604
									],
									[
										136914,
										136921
									],
									[
										137263,
										137270
									],
									[
										138931,
										138938
									],
									[
										139249,
										139256
									],
									[
										139386,
										139393
									],
									[
										139719,
										139726
									],
									[
										139906,
										139913
									],
									[
										140051,
										140058
									],
									[
										140190,
										140197
									],
									[
										140373,
										140380
									],
									[
										142042,
										142049
									],
									[
										142359,
										142366
									],
									[
										142694,
										142701
									],
									[
										142899,
										142906
									],
									[
										143445,
										143452
									],
									[
										143653,
										143660
									],
									[
										145881,
										145888
									],
									[
										146199,
										146206
									],
									[
										146515,
										146522
									],
									[
										146860,
										146867
									],
									[
										147205,
										147212
									],
									[
										147880,
										147887
									],
									[
										149029,
										149036
									],
									[
										150350,
										150357
									]
								],
								"scope": "col_AFAFAFFF"
							},
							"col_AFAFAFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_AFAFAFFF_circle.png",
								"regions":
								[
									[
										107350,
										107350
									],
									[
										107663,
										107663
									],
									[
										107977,
										107977
									],
									[
										108176,
										108176
									],
									[
										108386,
										108386
									],
									[
										108606,
										108606
									],
									[
										108835,
										108835
									],
									[
										109201,
										109201
									],
									[
										109411,
										109411
									],
									[
										111110,
										111110
									],
									[
										111436,
										111436
									],
									[
										111773,
										111773
									],
									[
										111972,
										111972
									],
									[
										112182,
										112182
									],
									[
										112513,
										112513
									],
									[
										114208,
										114208
									],
									[
										114521,
										114521
									],
									[
										114855,
										114855
									],
									[
										115051,
										115051
									],
									[
										115270,
										115270
									],
									[
										115489,
										115489
									],
									[
										115697,
										115697
									],
									[
										116055,
										116055
									],
									[
										117857,
										117857
									],
									[
										118170,
										118170
									],
									[
										118500,
										118500
									],
									[
										118706,
										118706
									],
									[
										118925,
										118925
									],
									[
										119144,
										119144
									],
									[
										119352,
										119352
									],
									[
										119710,
										119710
									],
									[
										121526,
										121526
									],
									[
										121682,
										121682
									],
									[
										121995,
										121995
									],
									[
										122329,
										122329
									],
									[
										122545,
										122545
									],
									[
										122850,
										122850
									],
									[
										123039,
										123039
									],
									[
										128268,
										128268
									],
									[
										128585,
										128585
									],
									[
										128906,
										128906
									],
									[
										130832,
										130832
									],
									[
										131175,
										131175
									],
									[
										131397,
										131397
									],
									[
										133309,
										133309
									],
									[
										133650,
										133650
									],
									[
										133872,
										133872
									],
									[
										136559,
										136559
									],
									[
										136875,
										136875
									],
									[
										137187,
										137187
									],
									[
										138892,
										138892
									],
									[
										139204,
										139204
									],
									[
										139348,
										139348
									],
									[
										139661,
										139661
									],
									[
										139861,
										139861
									],
									[
										140006,
										140006
									],
									[
										140150,
										140150
									],
									[
										140336,
										140336
									],
									[
										142004,
										142004
									],
									[
										142320,
										142320
									],
									[
										142636,
										142636
									],
									[
										142841,
										142841
									],
									[
										143047,
										143047
									],
									[
										143591,
										143591
									],
									[
										145843,
										145843
									],
									[
										146160,
										146160
									],
									[
										146477,
										146477
									],
									[
										146822,
										146822
									],
									[
										147167,
										147167
									],
									[
										147516,
										147516
									],
									[
										148990,
										148990
									],
									[
										150311,
										150311
									]
								],
								"scope": "col_gutter"
							},
							"col_FF00FFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										106647,
										106651
									],
									[
										107181,
										107185
									],
									[
										110406,
										110410
									],
									[
										110941,
										110945
									],
									[
										113505,
										113509
									],
									[
										114039,
										114043
									],
									[
										117153,
										117157
									],
									[
										117688,
										117692
									],
									[
										120798,
										120802
									],
									[
										121357,
										121361
									],
									[
										124053,
										124057
									],
									[
										124631,
										124635
									],
									[
										125208,
										125212
									],
									[
										125785,
										125789
									],
									[
										126364,
										126368
									],
									[
										126943,
										126947
									],
									[
										127521,
										127525
									],
									[
										128099,
										128103
									],
									[
										129981,
										129985
									],
									[
										130515,
										130519
									],
									[
										132458,
										132462
									],
									[
										132992,
										132996
									],
									[
										134939,
										134943
									],
									[
										135495,
										135499
									],
									[
										136066,
										136070
									],
									[
										138189,
										138193
									],
									[
										138723,
										138727
									],
									[
										141300,
										141304
									],
									[
										141835,
										141839
									],
									[
										144581,
										144585
									],
									[
										145116,
										145120
									],
									[
										145674,
										145678
									],
									[
										148821,
										148825
									],
									[
										150142,
										150146
									]
								],
								"scope": "col_FF00FFFF"
							},
							"col_FF00FFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FF00FFFF_circle.png",
								"regions":
								[
									[
										106611,
										106611
									],
									[
										107145,
										107145
									],
									[
										110370,
										110370
									],
									[
										110905,
										110905
									],
									[
										113469,
										113469
									],
									[
										114003,
										114003
									],
									[
										117117,
										117117
									],
									[
										117652,
										117652
									],
									[
										120762,
										120762
									],
									[
										121321,
										121321
									],
									[
										124017,
										124017
									],
									[
										124595,
										124595
									],
									[
										125172,
										125172
									],
									[
										125749,
										125749
									],
									[
										126328,
										126328
									],
									[
										126907,
										126907
									],
									[
										127485,
										127485
									],
									[
										128063,
										128063
									],
									[
										129945,
										129945
									],
									[
										130479,
										130479
									],
									[
										132422,
										132422
									],
									[
										132956,
										132956
									],
									[
										134903,
										134903
									],
									[
										135459,
										135459
									],
									[
										136030,
										136030
									],
									[
										138153,
										138153
									],
									[
										138687,
										138687
									],
									[
										141264,
										141264
									],
									[
										141799,
										141799
									],
									[
										144545,
										144545
									],
									[
										145080,
										145080
									],
									[
										145638,
										145638
									],
									[
										148785,
										148785
									],
									[
										150106,
										150106
									]
								],
								"scope": "col_gutter"
							},
							"col_FFFFFFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										99184,
										99191
									]
								],
								"scope": "col_FFFFFFFF"
							},
							"col_FFFFFFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FFFFFFFF_circle.png",
								"regions":
								[
									[
										99129,
										99129
									]
								],
								"scope": "col_gutter"
							}
						},
						"selection":
						[
							[
								128391,
								128410
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 590,
							"syntax": "Packages/XML/XML.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1678253636.89,
							"tabs_extra_last_activated_sheet_index": 7,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 15323.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "555-PWM-Motor-Speed-Controller-alt-schematic.svg",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 151186,
						"regions":
						{
							"col_0000AAFF":
							{
								"flags": 16,
								"regions":
								[
									[
										98998,
										99005
									]
								],
								"scope": "col_0000AAFF"
							},
							"col_0000AAFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_0000AAFF_circle.png",
								"regions":
								[
									[
										98940,
										98940
									]
								],
								"scope": "col_gutter"
							},
							"col_4BA54BFF":
							{
								"flags": 16,
								"regions":
								[
									[
										99511,
										99518
									],
									[
										99699,
										99706
									],
									[
										99887,
										99894
									],
									[
										100075,
										100082
									],
									[
										100339,
										100346
									],
									[
										100472,
										100479
									],
									[
										100659,
										100666
									],
									[
										100847,
										100854
									],
									[
										101035,
										101042
									],
									[
										101222,
										101229
									],
									[
										101410,
										101417
									],
									[
										101674,
										101681
									],
									[
										101836,
										101843
									],
									[
										102022,
										102029
									],
									[
										102210,
										102217
									],
									[
										102396,
										102403
									],
									[
										102582,
										102589
									],
									[
										102768,
										102775
									],
									[
										102954,
										102961
									],
									[
										103170,
										103177
									],
									[
										103387,
										103394
									],
									[
										103575,
										103582
									],
									[
										103763,
										103770
									],
									[
										103951,
										103958
									],
									[
										104168,
										104175
									],
									[
										104355,
										104362
									],
									[
										104571,
										104578
									],
									[
										104757,
										104764
									],
									[
										104971,
										104978
									],
									[
										105156,
										105163
									],
									[
										105343,
										105350
									],
									[
										105529,
										105536
									],
									[
										105716,
										105723
									],
									[
										105904,
										105911
									],
									[
										106089,
										106096
									],
									[
										106353,
										106360
									],
									[
										106563,
										106570
									],
									[
										106697,
										106704
									],
									[
										106962,
										106969
									],
									[
										107123,
										107130
									],
									[
										107308,
										107315
									],
									[
										107493,
										107500
									],
									[
										107757,
										107764
									],
									[
										107916,
										107923
									],
									[
										108133,
										108140
									],
									[
										108321,
										108328
									],
									[
										108509,
										108516
									],
									[
										108773,
										108780
									],
									[
										108938,
										108945
									]
								],
								"scope": "col_4BA54BFF"
							},
							"col_4BA54BFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_4BA54BFF_circle.png",
								"regions":
								[
									[
										99434,
										99434
									],
									[
										99620,
										99620
									],
									[
										99808,
										99808
									],
									[
										99996,
										99996
									],
									[
										100184,
										100184
									],
									[
										100395,
										100395
									],
									[
										100581,
										100581
									],
									[
										100768,
										100768
									],
									[
										100956,
										100956
									],
									[
										101144,
										101144
									],
									[
										101331,
										101331
									],
									[
										101519,
										101519
									],
									[
										101759,
										101759
									],
									[
										101945,
										101945
									],
									[
										102131,
										102131
									],
									[
										102319,
										102319
									],
									[
										102505,
										102505
									],
									[
										102691,
										102691
									],
									[
										102877,
										102877
									],
									[
										103092,
										103092
									],
									[
										103308,
										103308
									],
									[
										103496,
										103496
									],
									[
										103684,
										103684
									],
									[
										103872,
										103872
									],
									[
										104089,
										104089
									],
									[
										104277,
										104277
									],
									[
										104493,
										104493
									],
									[
										104680,
										104680
									],
									[
										104895,
										104895
									],
									[
										105080,
										105080
									],
									[
										105265,
										105265
									],
									[
										105452,
										105452
									],
									[
										105638,
										105638
									],
									[
										105825,
										105825
									],
									[
										106013,
										106013
									],
									[
										106198,
										106198
									],
									[
										106407,
										106407
									],
									[
										106618,
										106618
									],
									[
										106806,
										106806
									],
									[
										107047,
										107047
									],
									[
										107232,
										107232
									],
									[
										107417,
										107417
									],
									[
										107602,
										107602
									],
									[
										107840,
										107840
									],
									[
										108054,
										108054
									],
									[
										108242,
										108242
									],
									[
										108430,
										108430
									],
									[
										108618,
										108618
									],
									[
										108859,
										108859
									]
								],
								"scope": "col_gutter"
							},
							"col_A54B4BFF":
							{
								"flags": 16,
								"regions": "jAAAADGrAQAAAAAAOKsBAAAAAAAAAAAAAADwv+6rAQAAAAAA9asBAAAAAAAAAAAAAADwv6asAQAAAAAArawBAAAAAAAAAAAAAADwv3mvAQAAAAAAgK8BAAAAAAAAAAAAAADwvzKwAQAAAAAAObABAAAAAAAAAAAAAADwv9mwAQAAAAAA4LABAAAAAAAAAAAAAADwv5uxAQAAAAAAorEBAAAAAAAAAAAAAADwv2S1AQAAAAAAa7UBAAAAAAAAAAAAAADwv0y2AQAAAAAAU7YBAAAAAAAAAAAAAADwvxG3AQAAAAAAGLcBAAAAAAAAAAAAAADwv9a3AQAAAAAA3bcBAAAAAAAAAAAAAADwv4y4AQAAAAAAk7gBAAAAAAAAAAAAAADwv++5AQAAAAAA9rkBAAAAAAAAAAAAAADwv7K6AQAAAAAAuboBAAAAAAAAAAAAAADwv227AQAAAAAAdLsBAAAAAAAAAAAAAADwvzC8AQAAAAAAN7wBAAAAAAAAAAAAAADwv/G8AQAAAAAA+LwBAAAAAAAAAAAAAADwv7C9AQAAAAAAt70BAAAAAAAAAAAAAADwv3G+AQAAAAAAeL4BAAAAAAAAAAAAAADwvzK/AQAAAAAAOb8BAAAAAAAAAAAAAADwv+i/AQAAAAAA778BAAAAAAAAAAAAAADwv43AAQAAAAAAlMABAAAAAAAAAAAAAADwv1TBAQAAAAAAW8EBAAAAAAAAAAAAAADwvxzCAQAAAAAAI8IBAAAAAAAAAAAAAADwv+TCAQAAAAAA68IBAAAAAAAAAAAAAADwv6zDAQAAAAAAs8MBAAAAAAAAAAAAAADwv13KAQAAAAAAZMoBAAAAAAAAAAAAAADwvwHLAQAAAAAACMsBAAAAAAAAAAAAAADwv6vLAQAAAAAAsssBAAAAAAAAAAAAAADwv2jMAQAAAAAAb8wBAAAAAAAAAAAAAADwvyTNAQAAAAAAK80BAAAAAAAAAAAAAADwv+XNAQAAAAAA7M0BAAAAAAAAAAAAAADwv6DOAQAAAAAAp84BAAAAAAAAAAAAAADwv1jSAQAAAAAAX9IBAAAAAAAAAAAAAADwv/zSAQAAAAAAA9MBAAAAAAAAAAAAAADwv6bTAQAAAAAArdMBAAAAAAAAAAAAAADwv2PUAQAAAAAAatQBAAAAAAAAAAAAAADwvx/VAQAAAAAAJtUBAAAAAAAAAAAAAADwv+DVAQAAAAAA59UBAAAAAAAAAAAAAADwv5vWAQAAAAAAotYBAAAAAAAAAAAAAADwv2/aAQAAAAAAdtoBAAAAAAAAAAAAAADwvzLbAQAAAAAAOdsBAAAAAAAAAAAAAADwv/XbAQAAAAAA/NsBAAAAAAAAAAAAAADwv7rcAQAAAAAAwdwBAAAAAAAAAAAAAADwv3HdAQAAAAAAeN0BAAAAAAAAAAAAAADwv/beAQAAAAAA/d4BAAAAAAAAAAAAAADwv3jgAQAAAAAAf+ABAAAAAAAAAAAAAADwv+/gAQAAAAAA9uABAAAAAAAAAAAAAADwv3biAQAAAAAAfeIBAAAAAAAAAAAAAADwvwXkAQAAAAAADOQBAAAAAAAAAAAAAADwv4LlAQAAAAAAieUBAAAAAAAAAAAAAADwvw7nAQAAAAAAFecBAAAAAAAAAAAAAADwv6voAQAAAAAAsugBAAAAAAAAAAAAAADwvzrtAQAAAAAAQe0BAAAAAAAAAAAAAADwv+HtAQAAAAAA6O0BAAAAAAAAAAAAAADwv5TuAQAAAAAAm+4BAAAAAAAAAAAAAADwv1fvAQAAAAAAXu8BAAAAAAAAAAAAAADwvxjwAQAAAAAAH/ABAAAAAAAAAAAAAADwv9vwAQAAAAAA4vABAAAAAAAAAAAAAADwv4n0AQAAAAAAkPQBAAAAAAAAAAAAAADwv0b1AQAAAAAATfUBAAAAAAAAAAAAAADwv/71AQAAAAAABfYBAAAAAAAAAAAAAADwv234AQAAAAAAdPgBAAAAAAAAAAAAAADwvzf5AQAAAAAAPvkBAAAAAAAAAAAAAADwvwH6AQAAAAAACPoBAAAAAAAAAAAAAADwv8v6AQAAAAAA0voBAAAAAAAAAAAAAADwv5D7AQAAAAAAl/sBAAAAAAAAAAAAAADwv1f8AQAAAAAAXvwBAAAAAAAAAAAAAADwvyD9AQAAAAAAJ/0BAAAAAAAAAAAAAADwv+n9AQAAAAAA8P0BAAAAAAAAAAAAAADwv7P+AQAAAAAAuv4BAAAAAAAAAAAAAADwv33/AQAAAAAAhP8BAAAAAAAAAAAAAADwv0cAAgAAAAAATgACAAAAAAAAAAAAAADwv+4AAgAAAAAA9QACAAAAAAAAAAAAAADwv70BAgAAAAAAxAECAAAAAAAAAAAAAADwv0wCAgAAAAAAUwICAAAAAAAAAAAAAADwv+UCAgAAAAAA7AICAAAAAAAAAAAAAADwv24DAgAAAAAAdQMCAAAAAAAAAAAAAADwv10GAgAAAAAAZAYCAAAAAAAAAAAAAADwv6AHAgAAAAAApwcCAAAAAAAAAAAAAADwv+IIAgAAAAAA6QgCAAAAAAAAAAAAAADwv9EKAgAAAAAA2AoCAAAAAAAAAAAAAADwv3YLAgAAAAAAfQsCAAAAAAAAAAAAAADwvxYMAgAAAAAAHQwCAAAAAAAAAAAAAADwv9cMAgAAAAAA3gwCAAAAAAAAAAAAAADwv5gNAgAAAAAAnw0CAAAAAAAAAAAAAADwv1sOAgAAAAAAYg4CAAAAAAAAAAAAAADwv2ISAgAAAAAAaRICAAAAAAAAAAAAAADwvxsTAgAAAAAAIhMCAAAAAAAAAAAAAADwv8ITAgAAAAAAyRMCAAAAAAAAAAAAAADwv4QUAgAAAAAAixQCAAAAAAAAAAAAAADwv08YAgAAAAAAVhgCAAAAAAAAAAAAAADwvzcZAgAAAAAAPhkCAAAAAAAAAAAAAADwv/wZAgAAAAAAAxoCAAAAAAAAAAAAAADwv8EaAgAAAAAAyBoCAAAAAAAAAAAAAADwv3cbAgAAAAAAfhsCAAAAAAAAAAAAAADwv8IcAgAAAAAAyRwCAAAAAAAAAAAAAADwv6odAgAAAAAAsR0CAAAAAAAAAAAAAADwv28eAgAAAAAAdh4CAAAAAAAAAAAAAADwvzQfAgAAAAAAOx8CAAAAAAAAAAAAAADwv+ofAgAAAAAA8R8CAAAAAAAAAAAAAADwv2MhAgAAAAAAaiECAAAAAAAAAAAAAADwv/0hAgAAAAAABCICAAAAAAAAAAAAAADwv7gkAgAAAAAAvyQCAAAAAAAAAAAAAADwv1IlAgAAAAAAWSUCAAAAAAAAAAAAAADwv9snAgAAAAAA4icCAAAAAAAAAAAAAADwv5goAgAAAAAAnygCAAAAAAAAAAAAAADwv1ApAgAAAAAAVykCAAAAAAAAAAAAAADwv7QrAgAAAAAAuysCAAAAAAAAAAAAAADwv1gsAgAAAAAAXywCAAAAAAAAAAAAAADwvwItAgAAAAAACS0CAAAAAAAAAAAAAADwv78tAgAAAAAAxi0CAAAAAAAAAAAAAADwv3suAgAAAAAAgi4CAAAAAAAAAAAAAADwvzwvAgAAAAAAQy8CAAAAAAAAAAAAAADwv/cvAgAAAAAA/i8CAAAAAAAAAAAAAADwv68zAgAAAAAAtjMCAAAAAAAAAAAAAADwv5c0AgAAAAAAnjQCAAAAAAAAAAAAAADwv1w1AgAAAAAAYzUCAAAAAAAAAAAAAADwvyE2AgAAAAAAKDYCAAAAAAAAAAAAAADwv9c2AgAAAAAA3jYCAAAAAAAAAAAAAADwvyE4AgAAAAAAKDgCAAAAAAAAAAAAAADwvwk5AgAAAAAAEDkCAAAAAAAAAAAAAADwv845AgAAAAAA1TkCAAAAAAAAAAAAAADwv5M6AgAAAAAAmjoCAAAAAAAAAAAAAADwv0k7AgAAAAAAUDsCAAAAAAAAAAAAAADwv5E8AgAAAAAAmDwCAAAAAAAAAAAAAADwv3k9AgAAAAAAgD0CAAAAAAAAAAAAAADwvz4+AgAAAAAART4CAAAAAAAAAAAAAADwvwM/AgAAAAAACj8CAAAAAAAAAAAAAADwv7k/AgAAAAAAwD8CAAAAAAAAAAAAAADwvyRBAgAAAAAAK0ECAAAAAAAAAAAAAADwv75BAgAAAAAAxUECAAAAAAAAAAAAAADwv1pEAgAAAAAAYUQCAAAAAAAAAAAAAADwv/REAgAAAAAA+0QCAAAAAAAAAAAAAADwv3hHAgAAAAAAf0cCAAAAAAAAAAAAAADwvzVIAgAAAAAAPEgCAAAAAAAAAAAAAADwv+1IAgAAAAAA9EgCAAAAAAAAAAAAAADwv3ZLAgAAAAAAfUsCAAAAAAAAAAAAAADwvzNMAgAAAAAAOkwCAAAAAAAAAAAAAADwv+tMAgAAAAAA8kwCAAAAAAAAAAAAAADwvw",
								"scope": "col_A54B4BFF"
							},
							"col_A54B4BFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_A54B4BFF_circle.png",
								"regions": "jAAAAOWqAQAAAAAA5aoBAAAAAAAAAAAAAADwv6GrAQAAAAAAoasBAAAAAAAAAAAAAADwv4asAQAAAAAAhqwBAAAAAAAAAAAAAADwvy6vAQAAAAAALq8BAAAAAAAAAAAAAADwv+mvAQAAAAAA6a8BAAAAAAAAAAAAAADwv6KwAQAAAAAAorABAAAAAAAAAAAAAADwv2SxAQAAAAAAZLEBAAAAAAAAAAAAAADwvxW1AQAAAAAAFbUBAAAAAAAAAAAAAADwv/61AQAAAAAA/rUBAAAAAAAAAAAAAADwv7y2AQAAAAAAvLYBAAAAAAAAAAAAAADwv4G3AQAAAAAAgbcBAAAAAAAAAAAAAADwv0a4AQAAAAAARrgBAAAAAAAAAAAAAADwv565AQAAAAAAnrkBAAAAAAAAAAAAAADwv1+6AQAAAAAAX7oBAAAAAAAAAAAAAADwvyK7AQAAAAAAIrsBAAAAAAAAAAAAAADwv927AQAAAAAA3bsBAAAAAAAAAAAAAADwv6C8AQAAAAAAoLwBAAAAAAAAAAAAAADwv2G9AQAAAAAAYb0BAAAAAAAAAAAAAADwvyC+AQAAAAAAIL4BAAAAAAAAAAAAAADwv+G+AQAAAAAA4b4BAAAAAAAAAAAAAADwv8i/AQAAAAAAyL8BAAAAAAAAAAAAAADwv23AAQAAAAAAbcABAAAAAAAAAAAAAADwvwLBAQAAAAAAAsEBAAAAAAAAAAAAAADwv8TBAQAAAAAAxMEBAAAAAAAAAAAAAADwv4zCAQAAAAAAjMIBAAAAAAAAAAAAAADwv1TDAQAAAAAAVMMBAAAAAAAAAAAAAADwvz3KAQAAAAAAPcoBAAAAAAAAAAAAAADwv+HKAQAAAAAA4coBAAAAAAAAAAAAAADwv1/LAQAAAAAAX8sBAAAAAAAAAAAAAADwvxvMAQAAAAAAG8wBAAAAAAAAAAAAAADwv9jMAQAAAAAA2MwBAAAAAAAAAAAAAADwv5TNAQAAAAAAlM0BAAAAAAAAAAAAAADwv1XOAQAAAAAAVc4BAAAAAAAAAAAAAADwvzjSAQAAAAAAONIBAAAAAAAAAAAAAADwv9zSAQAAAAAA3NIBAAAAAAAAAAAAAADwv1rTAQAAAAAAWtMBAAAAAAAAAAAAAADwvxbUAQAAAAAAFtQBAAAAAAAAAAAAAADwv9PUAQAAAAAA09QBAAAAAAAAAAAAAADwv4/VAQAAAAAAj9UBAAAAAAAAAAAAAADwv1DWAQAAAAAAUNYBAAAAAAAAAAAAAADwvxraAQAAAAAAGtoBAAAAAAAAAAAAAADwv9/aAQAAAAAA39oBAAAAAAAAAAAAAADwv6LbAQAAAAAAotsBAAAAAAAAAAAAAADwv2XcAQAAAAAAZdwBAAAAAAAAAAAAAADwv1HdAQAAAAAAUd0BAAAAAAAAAAAAAADwv9beAQAAAAAA1t4BAAAAAAAAAAAAAADwv1bgAQAAAAAAVuABAAAAAAAAAAAAAADwv8/gAQAAAAAAz+ABAAAAAAAAAAAAAADwv1biAQAAAAAAVuIBAAAAAAAAAAAAAADwv+XjAQAAAAAA5eMBAAAAAAAAAAAAAADwv2LlAQAAAAAAYuUBAAAAAAAAAAAAAADwv+7mAQAAAAAA7uYBAAAAAAAAAAAAAADwv4voAQAAAAAAi+gBAAAAAAAAAAAAAADwvxrtAQAAAAAAGu0BAAAAAAAAAAAAAADwv8HtAQAAAAAAwe0BAAAAAAAAAAAAAADwv0PuAQAAAAAAQ+4BAAAAAAAAAAAAAADwvwTvAQAAAAAABO8BAAAAAAAAAAAAAADwv8fvAQAAAAAAx+8BAAAAAAAAAAAAAADwv4jwAQAAAAAAiPABAAAAAAAAAAAAAADwvz30AQAAAAAAPfQBAAAAAAAAAAAAAADwv/n0AQAAAAAA+fQBAAAAAAAAAAAAAADwv971AQAAAAAA3vUBAAAAAAAAAAAAAADwvxr4AQAAAAAAGvgBAAAAAAAAAAAAAADwv934AQAAAAAA3fgBAAAAAAAAAAAAAADwv6f5AQAAAAAAp/kBAAAAAAAAAAAAAADwv3H6AQAAAAAAcfoBAAAAAAAAAAAAAADwvzv7AQAAAAAAO/sBAAAAAAAAAAAAAADwvwD8AQAAAAAAAPwBAAAAAAAAAAAAAADwv8f8AQAAAAAAx/wBAAAAAAAAAAAAAADwv5D9AQAAAAAAkP0BAAAAAAAAAAAAAADwv1n+AQAAAAAAWf4BAAAAAAAAAAAAAADwvyP/AQAAAAAAI/8BAAAAAAAAAAAAAADwv+3/AQAAAAAA7f8BAAAAAAAAAAAAAADwv7cAAgAAAAAAtwACAAAAAAAAAAAAAADwv50BAgAAAAAAnQECAAAAAAAAAAAAAADwvywCAgAAAAAALAICAAAAAAAAAAAAAADwv8UCAgAAAAAAxQICAAAAAAAAAAAAAADwv0QDAgAAAAAARAMCAAAAAAAAAAAAAADwvzkGAgAAAAAAOQYCAAAAAAAAAAAAAADwv3wHAgAAAAAAfAcCAAAAAAAAAAAAAADwv74IAgAAAAAAvggCAAAAAAAAAAAAAADwv7EKAgAAAAAAsQoCAAAAAAAAAAAAAADwv1YLAgAAAAAAVgsCAAAAAAAAAAAAAADwv8MLAgAAAAAAwwsCAAAAAAAAAAAAAADwv4YMAgAAAAAAhgwCAAAAAAAAAAAAAADwv0cNAgAAAAAARw0CAAAAAAAAAAAAAADwvwgOAgAAAAAACA4CAAAAAAAAAAAAAADwvxcSAgAAAAAAFxICAAAAAAAAAAAAAADwv9ISAgAAAAAA0hICAAAAAAAAAAAAAADwv4sTAgAAAAAAixMCAAAAAAAAAAAAAADwv00UAgAAAAAATRQCAAAAAAAAAAAAAADwvwAYAgAAAAAAABgCAAAAAAAAAAAAAADwv+kYAgAAAAAA6RgCAAAAAAAAAAAAAADwv6cZAgAAAAAApxkCAAAAAAAAAAAAAADwv2waAgAAAAAAbBoCAAAAAAAAAAAAAADwvzEbAgAAAAAAMRsCAAAAAAAAAAAAAADwv3McAgAAAAAAcxwCAAAAAAAAAAAAAADwv1wdAgAAAAAAXB0CAAAAAAAAAAAAAADwvxoeAgAAAAAAGh4CAAAAAAAAAAAAAADwv98eAgAAAAAA3x4CAAAAAAAAAAAAAADwv6QfAgAAAAAApB8CAAAAAAAAAAAAAADwvx0hAgAAAAAAHSECAAAAAAAAAAAAAADwv9MhAgAAAAAA0yECAAAAAAAAAAAAAADwv3IkAgAAAAAAciQCAAAAAAAAAAAAAADwvyglAgAAAAAAKCUCAAAAAAAAAAAAAADwv48nAgAAAAAAjycCAAAAAAAAAAAAAADwv0soAgAAAAAASygCAAAAAAAAAAAAAADwvzApAgAAAAAAMCkCAAAAAAAAAAAAAADwv5QrAgAAAAAAlCsCAAAAAAAAAAAAAADwvzgsAgAAAAAAOCwCAAAAAAAAAAAAAADwv7YsAgAAAAAAtiwCAAAAAAAAAAAAAADwv3ItAgAAAAAAci0CAAAAAAAAAAAAAADwvy8uAgAAAAAALy4CAAAAAAAAAAAAAADwv+suAgAAAAAA6y4CAAAAAAAAAAAAAADwv6wvAgAAAAAArC8CAAAAAAAAAAAAAADwv2AzAgAAAAAAYDMCAAAAAAAAAAAAAADwv0k0AgAAAAAASTQCAAAAAAAAAAAAAADwvwc1AgAAAAAABzUCAAAAAAAAAAAAAADwv8w1AgAAAAAAzDUCAAAAAAAAAAAAAADwv5E2AgAAAAAAkTYCAAAAAAAAAAAAAADwv9I3AgAAAAAA0jcCAAAAAAAAAAAAAADwv7s4AgAAAAAAuzgCAAAAAAAAAAAAAADwv3k5AgAAAAAAeTkCAAAAAAAAAAAAAADwvz46AgAAAAAAPjoCAAAAAAAAAAAAAADwvwM7AgAAAAAAAzsCAAAAAAAAAAAAAADwv0I8AgAAAAAAQjwCAAAAAAAAAAAAAADwvys9AgAAAAAAKz0CAAAAAAAAAAAAAADwv+k9AgAAAAAA6T0CAAAAAAAAAAAAAADwv64+AgAAAAAArj4CAAAAAAAAAAAAAADwv3M/AgAAAAAAcz8CAAAAAAAAAAAAAADwv95AAgAAAAAA3kACAAAAAAAAAAAAAADwv5RBAgAAAAAAlEECAAAAAAAAAAAAAADwvxREAgAAAAAAFEQCAAAAAAAAAAAAAADwv8pEAgAAAAAAykQCAAAAAAAAAAAAAADwvyxHAgAAAAAALEcCAAAAAAAAAAAAAADwv+hHAgAAAAAA6EcCAAAAAAAAAAAAAADwv81IAgAAAAAAzUgCAAAAAAAAAAAAAADwvypLAgAAAAAAKksCAAAAAAAAAAAAAADwv+ZLAgAAAAAA5ksCAAAAAAAAAAAAAADwv8tMAgAAAAAAy0wCAAAAAAAAAAAAAADwvw",
								"scope": "col_gutter"
							},
							"col_AFAFAFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										109861,
										109868
									],
									[
										111175,
										111182
									],
									[
										111483,
										111490
									],
									[
										115774,
										115781
									],
									[
										116110,
										116117
									],
									[
										116447,
										116454
									],
									[
										116807,
										116814
									],
									[
										118578,
										118585
									],
									[
										118889,
										118896
									],
									[
										120621,
										120628
									],
									[
										120944,
										120951
									],
									[
										122335,
										122342
									],
									[
										122721,
										122728
									],
									[
										123224,
										123231
									],
									[
										123618,
										123625
									],
									[
										124012,
										124019
									],
									[
										124411,
										124418
									],
									[
										124809,
										124816
									],
									[
										125210,
										125217
									],
									[
										125465,
										125472
									],
									[
										125779,
										125786
									],
									[
										127341,
										127348
									],
									[
										127651,
										127658
									],
									[
										128638,
										128645
									],
									[
										132082,
										132089
									],
									[
										132391,
										132398
									],
									[
										134893,
										134900
									],
									[
										135203,
										135210
									],
									[
										136496,
										136503
									],
									[
										136804,
										136811
									],
									[
										139904,
										139911
									],
									[
										140757,
										140764
									],
									[
										141776,
										141783
									],
									[
										143497,
										143504
									],
									[
										143808,
										143815
									],
									[
										148033,
										148040
									],
									[
										148855,
										148862
									],
									[
										149869,
										149876
									],
									[
										150891,
										150898
									]
								],
								"scope": "col_AFAFAFFF"
							},
							"col_AFAFAFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_AFAFAFFF_circle.png",
								"regions":
								[
									[
										109827,
										109827
									],
									[
										111141,
										111141
									],
									[
										111448,
										111448
									],
									[
										115740,
										115740
									],
									[
										116075,
										116075
									],
									[
										116413,
										116413
									],
									[
										116773,
										116773
									],
									[
										118544,
										118544
									],
									[
										118854,
										118854
									],
									[
										120587,
										120587
									],
									[
										120909,
										120909
									],
									[
										122302,
										122302
									],
									[
										122689,
										122689
									],
									[
										123192,
										123192
									],
									[
										123585,
										123585
									],
									[
										123978,
										123978
									],
									[
										124377,
										124377
									],
									[
										124775,
										124775
									],
									[
										125176,
										125176
									],
									[
										125431,
										125431
									],
									[
										125744,
										125744
									],
									[
										127307,
										127307
									],
									[
										127616,
										127616
									],
									[
										128603,
										128603
									],
									[
										132048,
										132048
									],
									[
										132356,
										132356
									],
									[
										134859,
										134859
									],
									[
										135168,
										135168
									],
									[
										136462,
										136462
									],
									[
										136769,
										136769
									],
									[
										139870,
										139870
									],
									[
										140723,
										140723
									],
									[
										141741,
										141741
									],
									[
										143463,
										143463
									],
									[
										143773,
										143773
									],
									[
										147999,
										147999
									],
									[
										148821,
										148821
									],
									[
										149834,
										149834
									],
									[
										150856,
										150856
									]
								],
								"scope": "col_gutter"
							},
							"col_FFFFFFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										99214,
										99221
									]
								],
								"scope": "col_FFFFFFFF"
							},
							"col_FFFFFFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FFFFFFFF_circle.png",
								"regions":
								[
									[
										99153,
										99153
									]
								],
								"scope": "col_gutter"
							}
						},
						"selection":
						[
							[
								115795,
								115801
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 498,
							"syntax": "Packages/XML/XML.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1678253697.06,
							"tabs_extra_last_activated_sheet_index": 8,
							"tabs_extra_moving":
							[
								2,
								1
							],
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 13531.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "lib/eagle/components/pin.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3941,
						"regions":
						{
						},
						"selection":
						[
							[
								2490,
								2490
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 80,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1678252246.81,
							"tabs_extra_last_activated_sheet_index": 6,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 672.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "lib/eagle/components/symbol.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 910,
						"regions":
						{
						},
						"selection":
						[
							[
								910,
								33
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1678252246.42,
							"tabs_extra_last_activated_sheet_index": 7,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "lib/eagle/components/textElement.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2018,
						"regions":
						{
						},
						"selection":
						[
							[
								1869,
								1876
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 50,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1678252245.7,
							"tabs_extra_last_activated_sheet_index": 8,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 42.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 13,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tabs_extra_last_activated": 1678253639.17,
							"tabs_extra_last_activated_sheet_index": 12
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.8,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 0.0
	},
	"output.Debugger Console":
	{
		"height": 0.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "plot-cv.sublime-project",
	"replace":
	{
		"height": 68.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"matrix.js",
				"lib/geom/matrix.js"
			],
			[
				"transform",
				"lib/geom/transformation.js"
			],
			[
				"pin.js",
				"lib/eagle/components/pin.js"
			],
			[
				"",
				"~/Projects/an-tronics/eagle/555-PWM-Motor-Speed-Controller-alt.sch"
			],
			[
				"preactCom",
				"lib/dom/preactComponent.js"
			],
			[
				"symb",
				"lib/eagle/components/symbol.js"
			],
			[
				"schematicren",
				"lib/eagle/schematicRenderer.js"
			],
			[
				"svgre",
				"lib/eagle/svgRenderer.js"
			],
			[
				"boardren",
				"lib/eagle/boardRenderer.js"
			],
			[
				"element",
				"lib/eagle/element.js"
			],
			[
				"svgRend",
				"lib/eagle/svgRenderer.js"
			],
			[
				"boardRen",
				"lib/eagle/boardRenderer.js"
			],
			[
				"rect.js",
				"lib/geom/rect.js"
			],
			[
				"line.js",
				"lib/geom/line.js"
			],
			[
				"util.js",
				"lib/util.js"
			],
			[
				"point.js",
				"lib/geom/point.js"
			],
			[
				"document",
				"lib/eagle/document.js"
			],
			[
				"boardRe",
				"lib/eagle/boardRenderer.js"
			],
			[
				"renderUtil",
				"lib/eagle/renderUtils.js"
			],
			[
				"eagle2sv",
				"eagle2svg.js"
			],
			[
				"project.js",
				"lib/eagle/project.js"
			],
			[
				"text.js",
				"lib/eagle/components/text.js"
			],
			[
				"project",
				"lib/eagle/project.js"
			],
			[
				"nodeList",
				"lib/eagle/nodeList.js"
			],
			[
				"lib/util.js",
				"lib/util.js"
			],
			[
				"elemen",
				"lib/eagle/element.js"
			],
			[
				"svgRe",
				"lib/eagle/svgRenderer.js"
			],
			[
				"common",
				"lib/eagle/common.js"
			],
			[
				"ref.js",
				"lib/eagle/ref.js"
			],
			[
				"node.js",
				"lib/eagle/node.js"
			],
			[
				"element.js",
				"lib/eagle/element.js"
			],
			[
				"common.j",
				"lib/eagle/common.js"
			],
			[
				"misc.js",
				"lib/misc.js"
			],
			[
				"nodeLi",
				"lib/eagle/nodeList.js"
			],
			[
				"common.js",
				"lib/eagle/common.js"
			],
			[
				"eagle-she",
				"eagle-shell.js"
			],
			[
				"elementP",
				"lib/eagle/elementProxy.js"
			],
			[
				"smd.js",
				"lib/eagle/components/smd.js"
			],
			[
				"wirePa",
				"lib/eagle/components/wirePath.js"
			],
			[
				"wire.js",
				"lib/eagle/components/wire.js"
			],
			[
				"nodeMap",
				"lib/eagle/nodeMap.js"
			],
			[
				"renderer.js",
				"lib/eagle/renderer.js"
			],
			[
				"functions.cmake",
				"qjs-opencv/cmake/functions.cmake"
			],
			[
				"resolve-im",
				"resolve-imports.js"
			],
			[
				"textEle",
				"lib/eagle/components/textElement.js"
			],
			[
				"quickjs-misc",
				"quickjs/qjs-modules/quickjs-misc.c"
			],
			[
				"drawing",
				"lib/eagle/components/drawing.js"
			],
			[
				"pathMapper",
				"lib/json/pathMapper.js"
			],
			[
				"xml-shell",
				"quickjs/qjs-modules/xml-shell.js"
			],
			[
				"upload.js",
				"upload.js"
			],
			[
				"server.js",
				"upload-server.js"
			],
			[
				"delega",
				"lib/delegate.js"
			],
			[
				"rgba",
				"lib/color/rgba.js"
			],
			[
				"eagle-com",
				"eagle-commands.js"
			],
			[
				"colorCod",
				"lib/eda/colorCoding.js"
			],
			[
				"eagle-qu",
				"eagle-query.js"
			],
			[
				"eagle-q",
				"eagle-query.js"
			],
			[
				"read.hex",
				"read.hex"
			],
			[
				"exam",
				"example.circuit"
			],
			[
				"xpath.js",
				"quickjs/qjs-modules/lib/xpath.js"
			],
			[
				"Document",
				"lib/eagle/document.js"
			],
			[
				"test-",
				"test-bitset.js"
			],
			[
				"circuit",
				"circuit.js"
			],
			[
				"fs.js",
				"quickjs/qjs-modules/lib/fs.js"
			],
			[
				"eagle2ger",
				"eagle2gerber.js"
			],
			[
				"repeater.js",
				"lib/repeater/repeater.js"
			],
			[
				"websock",
				"lib/async/websocket.js"
			],
			[
				"fire.js",
				"fire.js"
			],
			[
				"websocket.js",
				"lib/async/websocket.js"
			],
			[
				"upload-server",
				"upload-server.js"
			],
			[
				"test-bj",
				"test-bjson.js"
			],
			[
				"bjson",
				"bjson.js"
			],
			[
				"string-he",
				"string-helpers.js"
			],
			[
				"quickjs-po",
				"quickjs/qjs-modules/quickjs-pointer.c"
			],
			[
				"list-exp",
				"quickjs/qjs-modules/list-exports.js"
			],
			[
				"clang-ast",
				"clang-ast.js"
			],
			[
				"clang-as",
				"clang-ast.js"
			],
			[
				"ast-she",
				"ast-shell.js"
			],
			[
				"utils.js",
				"lib/stream/utils.js"
			],
			[
				"upload-ser",
				"upload-server.js"
			],
			[
				"mirror",
				"quickjs/qjs-net/src/plugins/mirror.c"
			],
			[
				"list-ex",
				"quickjs/qjs-modules/list-exports.js"
			],
			[
				"fire.html",
				"fire.html"
			],
			[
				"server-htt",
				"quickjs/qjs-net/minnet-server-http.c"
			],
			[
				"-ws.c",
				"quickjs/qjs-net/minnet-server-ws.c"
			],
			[
				"filelist",
				"filelist.js"
			],
			[
				"filelist.js",
				"filelist.js"
			],
			[
				"extendGe",
				"quickjs/qjs-modules/lib/extendGenerator.js"
			],
			[
				"test-debugger",
				"test-debuggerprotocol.js"
			],
			[
				"fire.htm",
				"fire.html"
			],
			[
				"fire",
				"fire.js"
			],
			[
				"test-opencv",
				"test-opencv.js"
			],
			[
				"fontsample",
				"fontsample.js"
			],
			[
				"upload.htm",
				"upload.html"
			],
			[
				"main.js",
				"main.js"
			],
			[
				"test-gpio",
				"test-gpio.js"
			],
			[
				"index.html",
				"index.html"
			],
			[
				"quickjs.h",
				"quickjs/quickjs.h"
			],
			[
				"quickjs.c",
				"quickjs/quickjs.c"
			],
			[
				"qjsm.c",
				"quickjs/qjs-modules/src/qjsm.c"
			],
			[
				"repl.js",
				"quickjs/qjs-modules/lib/repl.js"
			],
			[
				"eagle-shell",
				"eagle-shell.js"
			],
			[
				"repl",
				"repl.js"
			],
			[
				"test-minnet",
				"test-minnet.js"
			],
			[
				"list-dir",
				"list-directory.js"
			],
			[
				"list.ht",
				"list.html"
			],
			[
				"draw.js",
				"draw.js"
			],
			[
				"transformation",
				"lib/geom/transformation.js"
			],
			[
				"element.",
				"lib/dom/element.js"
			],
			[
				"crosskit",
				"lib/crosskit.js"
			],
			[
				"fire-es",
				"fire-es.html"
			],
			[
				"resolve",
				"resolve-imports.js"
			],
			[
				"fire-es.h",
				"fire-es.html"
			],
			[
				"fire-es.js",
				"fire-es.js"
			],
			[
				"fire.es",
				"fire.es"
			],
			[
				"quickjs",
				"qjs-opencv/cmake/QuickJSModule.cmake"
			],
			[
				"test-strea",
				"test-stream.js"
			],
			[
				"worker.js",
				"worker.js"
			],
			[
				"vector.h",
				"quickjs/qjs-modules/include/vector.h"
			],
			[
				"console.js",
				"quickjs/qjs-modules/lib/console.js"
			],
			[
				"test-work",
				"test-worker.js"
			],
			[
				"worker",
				"worker.js"
			],
			[
				"workerSc",
				"workerScript.js"
			],
			[
				"wworker",
				"ws-worker.js"
			],
			[
				"matrix",
				"src/matrix.cpp"
			],
			[
				"test_chil",
				"quickjs/qjs-modules/tests/test_childprocess.js"
			],
			[
				"test-child",
				"test-childprocess.js"
			],
			[
				"os-help",
				"os-helpers.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/plot-cv.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 309.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"WS"
			]
		],
		"width": 784.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 248.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
