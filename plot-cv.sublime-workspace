{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"comp",
				"compound_literal_expr"
			],
			[
				"compo",
				"compound_literal_expr"
			],
			[
				"compound_",
				"compound_literal_expr"
			],
			[
				"Property",
				"PropertyEnumeration"
			],
			[
				"PaStream",
				"PaStreamParameters"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"PaE",
				"PaHostErrorInfo"
			],
			[
				"hostApi",
				"hostApiSpecificStreamInfo"
			],
			[
				"host",
				"hostApiType"
			],
			[
				"defaultHi",
				"defaultHighOutputLatency"
			],
			[
				"Draw",
				"DrawCircle"
			],
			[
				"exi",
				"existsSync"
			],
			[
				"text",
				"text-decoration"
			],
			[
				"crea",
				"createTextNode"
			],
			[
				"Transform",
				"TransformationList"
			],
			[
				"trans",
				"transformation"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "  d =>\n  d =>\n  traceProxy = (obj, handler) =>\nfunction(name, args)\n  get(target, key, receiver)\n  member = function()\nConcatIterator = iterator =>\ngen =>\n(...args) =>\n  toString()\nImportModule(modulePath, ...args)\n  module =>\n(acc, item) =>\nCommandLine()\n(...args) =>\n(...args) =>\n(module, ...args) =>\n  m =>\n  .show = value =>\n  .printNode = arg =>\n  .debug = (...args) =>\n() =>\n(item, i, a) =>\n  entry =>\n  entry =>\nIncludeAll(dir, maxDepth = Infinity, pred = entry => /\\.[ch]$/.\n(entry))\nSelectLocations(node)\nn =>\n  prop =>\nLocationString(loc)\n  node =>\nStructs(nodes)\n  node =>\n  field =>\n  node =>\n(field, i) =>\nTable(list, pred = (n, l) => true)\n(n, i) =>\n  e =>\n  k =>\n([i, l, n]) =>\n  returnType(n)\n  numArgs(n)\nParams(n)\n  p =>\n  k =>\n([i, l, n]) =>\n(k, j) =>\n(acc, name) =>\n  padTrunc(len, pad = ' ')\ns =>\n(name, i) =>\n  pad = (cols, pad, sep) =>\n(key, i) =>\n(s, col) =>\n(acc, n) =>\n(acc, row) =>\nPrintRange(range, file)\nOverlapRange(r1, r2)\nGetRange = r =>\nInRange = (i, r) =>\nParentNode(node, ast = $.data)\nNextSibling(node, ast = $.data)\nPreviousSibling(node, ast = $.data)\nFirstChild(node, ast = $.data)\nLastChild(node, ast = $.data)\nTerminate(exitCode)\nParseStructs(text)\n(decl, includes)\n  name =>\nInspectStruct(decl, includes, compiler = 'clang')\n  line =>\n  line =>\n(col, i) =>\n([field, offset, size]) =>\n(acc, line) =>\n  toString(sep = ' ')\n  line =>\nRoundTo(value, align)\nMakeStructClass(decl, filename)\nGenerateStructClass(decl, ffiPrefix = '')\n  line =>\n([field, member]) =>\nGenerateGetSet(name, offset, type, ffiPrefix)\n  toHex = v =>\n  toHex = v =>\nByteLength2TypedArray(byteLength, signed, floating)\nByteLength2Value(byteLength, signed, floating)\nFFI_Function\n  constructor(node, prefix = '')\n([name, type], idx) =>\n  generateDefine(fp, lib)\n(name, lib) =>\n  colorText = x =>\n  generateDoc()\n  push = (...args) =>\n  field =>\n(field, col) =>\n  js = type =>\n  generateCall()\n([name, type]) =>\n  generate(fp, lib, exp)\n  generateFunction(fp, lib)\n([name, type]) =>\n  p =>\n  p =>\n  compileFunction(fp, lib)\nFdReader(fd, bufferSize = 1024)\n(push, stop) =>\nCommandRead(args)\n  reader =>\nReadOutput(fd)\nLibraryExports(file)\n  line =>\n  line =>\n  column =>\n(a, b) =>\n  entry =>\nSaveLibraries()\n(acc, [n, e]) =>\nProcessFile(file, debug = true)\nParseECMAScript(file, params = {})\n(fr, i) =>\nPrintECMAScript(ast, comments, printer = \n({ indent: 4 }, comments))\nPrintCArray(strings)\nNamespaces(nodePath, ast = $.data)\n  p =>\n  n =>\nConstants(node, t = (name, value) => [name, !isNaN(+value) ? +value : value])\nGetImports(ast = $.data)\nn =>\nGetIdentifiers(nodes, key = null)\n(n, k) =>\nMemberNames(members, flags = 0)\nn =>\n  path =>\n  p =>\n  p =>\n  name =>\nn =>\n([node, ptr]) =>\n  path =>\n  p =>\n  name =>\n  name =>\nUnsetLoc(node, pred = (v, p) => true)\n(v, k) =>\nMakeFFI(node, lib, exp, fp)\n()\nASTShell(...args)\n(a, p) =>\n(a, p) =>\n(a, p) =>\n  get flags()\n  v =>\n  v =>\n  d =>\n  l =>\nCompile(file, ...args)\n  nameOrIdPred(name_or_id, pred = n => true)\nnode =>\nnode =>\nnode =>\nnode =>\n  select(name_or_id, pred = n => true)\n  getByIdOrName(name_or_id, pred = n => true)\n  getType(name_or_id)\nn =>\n  getFunction(name_or_id)\nn =>\n  getVariable(name_or_id)\nn =>\n  getLoc(node)\n() =>\n  pathOf(needle, maxDepth = 10)\nn =>\nPointer.prototype.chain = function(step, limit = Infinity)\n  .F = arg =>\n  .T = arg =>\n() =>\nnode =>\n  s =>\nfr =>",
			"settings":
			{
				"buffer_size": 3343,
				"line_ending": "Unix",
				"name": "ùåÜ Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					5,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					6,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/clang-ast.js",
						"symkeys":
						[
							[
								690,
								717
							],
							[
								797,
								827
							],
							[
								894,
								902
							],
							[
								941,
								968
							],
							[
								1017,
								1044
							],
							[
								1121,
								1125
							],
							[
								1148,
								1181
							],
							[
								1368,
								1372
							],
							[
								1391,
								1411
							],
							[
								1567,
								1599
							],
							[
								1763,
								1781
							],
							[
								2033,
								2050
							],
							[
								2358,
								2369
							],
							[
								2393,
								2400
							],
							[
								2429,
								2438
							],
							[
								2568,
								2574
							],
							[
								2696,
								2704
							],
							[
								2829,
								2838
							],
							[
								2864,
								2873
							],
							[
								2904,
								2908
							],
							[
								2969,
								2973
							],
							[
								3049,
								3065
							],
							[
								3325,
								3340
							],
							[
								3407,
								3416
							],
							[
								3484,
								3492
							],
							[
								3547,
								3556
							],
							[
								3630,
								3640
							],
							[
								3694,
								3703
							],
							[
								3733,
								3742
							],
							[
								3852,
								3863
							],
							[
								4065,
								4069
							],
							[
								4719,
								4730
							],
							[
								4975,
								4989
							],
							[
								5039,
								5075
							],
							[
								5151,
								5206
							],
							[
								5211,
								5231
							],
							[
								5406,
								5410
							],
							[
								5491,
								5506
							],
							[
								5592,
								5634
							],
							[
								5706,
								5716
							],
							[
								5937,
								5942
							],
							[
								6008,
								6015
							],
							[
								6132,
								6136
							],
							[
								6234,
								6256
							],
							[
								6747,
								6752
							],
							[
								8564,
								8568
							],
							[
								9344,
								9354
							],
							[
								9572,
								9584
							],
							[
								9725,
								9733
							],
							[
								9816,
								9827
							],
							[
								9948,
								9960
							],
							[
								10052,
								10061
							],
							[
								10132,
								10141
							],
							[
								10259,
								10275
							],
							[
								10345,
								10361
							],
							[
								10450,
								10463
							],
							[
								10992,
								11007
							],
							[
								11092,
								11097
							],
							[
								11349,
								11363
							],
							[
								11469,
								11481
							],
							[
								11550,
								11562
							],
							[
								11621,
								11638
							],
							[
								11724,
								11735
							],
							[
								11829,
								11842
							],
							[
								11982,
								11990
							],
							[
								12097,
								12107
							],
							[
								12309,
								12318
							],
							[
								13804,
								13814
							],
							[
								16692,
								16698
							],
							[
								16982,
								16993
							],
							[
								17093,
								17129
							],
							[
								17313,
								17321
							],
							[
								17381,
								17389
							],
							[
								19193,
								19223
							],
							[
								19302,
								19312
							],
							[
								19330,
								19352
							],
							[
								19532,
								19540
							],
							[
								19621,
								19629
							],
							[
								19808,
								19815
							],
							[
								19866,
								19880
							],
							[
								20374,
								20378
							],
							[
								20452,
								20457
							],
							[
								20952,
								20956
							],
							[
								21528,
								21538
							],
							[
								21613,
								21633
							],
							[
								21836,
								21844
							],
							[
								21966,
								21985
							],
							[
								22082,
								22090
							],
							[
								22108,
								22130
							],
							[
								22246,
								22254
							],
							[
								22359,
								22385
							],
							[
								22636,
								22644
							],
							[
								22759,
								22770
							],
							[
								22788,
								22810
							],
							[
								22878,
								22882
							],
							[
								22988,
								22998
							],
							[
								23058,
								23062
							],
							[
								23125,
								23129
							],
							[
								23179,
								23183
							],
							[
								23646,
								23656
							],
							[
								23694,
								23702
							],
							[
								23799,
								23808
							],
							[
								23826,
								23848
							],
							[
								23954,
								23958
							],
							[
								24358,
								24370
							],
							[
								24388,
								24410
							],
							[
								24600,
								24608
							],
							[
								24671,
								24679
							],
							[
								24835,
								24840
							],
							[
								25168,
								25187
							],
							[
								25247,
								25255
							],
							[
								25364,
								25371
							],
							[
								25389,
								25411
							],
							[
								25756,
								25764
							],
							[
								25861,
								25870
							],
							[
								25907,
								25918
							],
							[
								25936,
								25958
							],
							[
								26008,
								26019
							],
							[
								26037,
								26059
							],
							[
								26220,
								26228
							],
							[
								26331,
								26348
							],
							[
								26366,
								26388
							],
							[
								26644,
								26652
							],
							[
								26763,
								26768
							],
							[
								26816,
								26839
							],
							[
								26961,
								26972
							],
							[
								27021,
								27033
							],
							[
								27095,
								27104
							],
							[
								27151,
								27161
							],
							[
								27199,
								27235
							],
							[
								27887,
								27899
							],
							[
								27945,
								27954
							],
							[
								28001,
								28011
							],
							[
								28191,
								28196
							],
							[
								28252,
								28260
							],
							[
								28353,
								28376
							],
							[
								28634,
								28650
							],
							[
								28869,
								28885
							],
							[
								29126,
								29139
							],
							[
								29285,
								29295
							],
							[
								29343,
								29354
							],
							[
								29446,
								29458
							],
							[
								29508,
								29521
							],
							[
								29569,
								29581
							],
							[
								29631,
								29644
							],
							[
								29892,
								29905
							],
							[
								29940,
								29955
							],
							[
								30035,
								30090
							],
							[
								30623,
								30633
							],
							[
								30876,
								30896
							],
							[
								30979,
								31025
							],
							[
								32474,
								32539
							],
							[
								32824,
								32828
							],
							[
								33089,
								33093
							],
							[
								33814,
								33821
							],
							[
								33875,
								33882
							],
							[
								33966,
								33973
							],
							[
								34150,
								34185
							],
							[
								34224,
								34244
							],
							[
								34274,
								34280
							],
							[
								34301,
								34309
							],
							[
								34415,
								34448
							],
							[
								34713,
								34738
							],
							[
								35079,
								35121
							],
							[
								35653,
								35706
							],
							[
								37092,
								37098
							],
							[
								37148,
								37154
							],
							[
								37371,
								37377
							],
							[
								37519,
								37535
							],
							[
								37968,
								37975
							],
							[
								38018,
								38022
							],
							[
								38042,
								38049
							],
							[
								38169,
								38196
							],
							[
								38255,
								38270
							],
							[
								38573,
								38580
							],
							[
								38640,
								38654
							],
							[
								38699,
								38714
							],
							[
								38739,
								38743
							],
							[
								38774,
								38785
							],
							[
								38818,
								38830
							],
							[
								38864,
								38877
							],
							[
								38949,
								38954
							],
							[
								39052,
								39056
							],
							[
								39080,
								39092
							],
							[
								39161,
								39166
							],
							[
								39226,
								39230
							],
							[
								39261,
								39270
							],
							[
								39283,
								39299
							],
							[
								39660,
								39664
							],
							[
								39688,
								39699
							],
							[
								39758,
								39762
							],
							[
								39800,
								39804
							],
							[
								39835,
								39851
							],
							[
								39890,
								39894
							],
							[
								39912,
								39916
							],
							[
								39959,
								39999
							],
							[
								40058,
								40074
							],
							[
								40436,
								40457
							],
							[
								40483,
								40487
							],
							[
								40930,
								40935
							],
							[
								40976,
								41003
							],
							[
								41197,
								41225
							],
							[
								41406,
								41431
							],
							[
								41506,
								41538
							],
							[
								41669,
								41673
							],
							[
								41810,
								41839
							],
							[
								41949,
								41953
							],
							[
								42247,
								42269
							],
							[
								43308,
								43349
							],
							[
								43429,
								43436
							],
							[
								43502,
								43509
							],
							[
								43546,
								43572
							],
							[
								43666,
								43674
							],
							[
								43740,
								43748
							],
							[
								43810,
								43821
							],
							[
								43975,
								43984
							],
							[
								44003,
								44029
							],
							[
								44082,
								44091
							],
							[
								44144,
								44170
							],
							[
								44222,
								44241
							],
							[
								44317,
								44334
							],
							[
								44369,
								44393
							],
							[
								44652,
								44657
							],
							[
								44714,
								44721
							],
							[
								44802,
								44813
							],
							[
								45521,
								45531
							],
							[
								45579,
								45583
							],
							[
								45772,
								45783
							],
							[
								45794,
								45818
							],
							[
								45886,
								45918
							],
							[
								46074,
								46099
							],
							[
								46163,
								46199
							],
							[
								46269,
								46309
							],
							[
								46561,
								46589
							],
							[
								46636,
								46667
							],
							[
								46896,
								46938
							],
							[
								47141,
								47166
							],
							[
								47324,
								47345
							],
							[
								47390,
								47409
							],
							[
								47743,
								47770
							],
							[
								47838,
								47857
							],
							[
								48061,
								48096
							],
							[
								48214,
								48262
							],
							[
								48508,
								48535
							],
							[
								49153,
								49194
							],
							[
								49432,
								49459
							],
							[
								49602,
								49623
							],
							[
								49684,
								49711
							],
							[
								49756,
								49788
							],
							[
								50038,
								50064
							],
							[
								50258,
								50277
							],
							[
								50939,
								50964
							],
							[
								51012,
								51043
							],
							[
								51110,
								51125
							],
							[
								51320,
								51341
							],
							[
								51458,
								51494
							],
							[
								51714,
								51733
							],
							[
								52137,
								52158
							],
							[
								52375,
								52408
							],
							[
								52468,
								52491
							],
							[
								52554,
								52571
							],
							[
								52691,
								52695
							],
							[
								53522,
								53547
							],
							[
								53754,
								53781
							],
							[
								54246,
								54250
							],
							[
								54460,
								54464
							],
							[
								54663,
								54682
							],
							[
								54804,
								54809
							],
							[
								55150,
								55189
							],
							[
								55288,
								55331
							],
							[
								55541,
								55556
							],
							[
								55822,
								55858
							],
							[
								55954,
								55982
							],
							[
								56252,
								56296
							],
							[
								56358,
								56389
							],
							[
								56448,
								56469
							],
							[
								56528,
								56551
							],
							[
								56974,
								57000
							],
							[
								57068,
								57094
							],
							[
								57158,
								57177
							],
							[
								57219,
								57254
							],
							[
								57428,
								57470
							],
							[
								57655,
								57676
							],
							[
								57852,
								57882
							],
							[
								58102,
								58128
							],
							[
								58556,
								58575
							],
							[
								58636,
								58659
							],
							[
								59194,
								59221
							],
							[
								59271,
								59294
							],
							[
								59451,
								59487
							],
							[
								59557,
								59586
							],
							[
								59644,
								59667
							],
							[
								59845,
								59870
							],
							[
								59954,
								59996
							],
							[
								60095,
								60120
							],
							[
								60424,
								60479
							],
							[
								60721,
								60750
							],
							[
								61001,
								61045
							],
							[
								61177,
								61221
							],
							[
								61308,
								61336
							],
							[
								61480,
								61504
							],
							[
								61752,
								61796
							],
							[
								62118,
								62171
							],
							[
								62270,
								62315
							],
							[
								62390,
								62409
							],
							[
								62470,
								62491
							],
							[
								62668,
								62695
							],
							[
								62744,
								62774
							],
							[
								62786,
								62807
							],
							[
								62819,
								62851
							],
							[
								62993,
								63023
							],
							[
								63035,
								63076
							],
							[
								63088,
								63127
							],
							[
								63139,
								63162
							],
							[
								63174,
								63197
							],
							[
								63209,
								63228
							],
							[
								63240,
								63282
							],
							[
								63294,
								63319
							],
							[
								63331,
								63358
							],
							[
								63370,
								63408
							],
							[
								63420,
								63502
							],
							[
								63514,
								63581
							],
							[
								63593,
								63618
							],
							[
								63630,
								63672
							],
							[
								63857,
								63895
							],
							[
								63907,
								63964
							],
							[
								63976,
								64014
							],
							[
								64026,
								64051
							],
							[
								64063,
								64090
							],
							[
								64102,
								64140
							],
							[
								64152,
								64208
							],
							[
								64302,
								64353
							],
							[
								64365,
								64440
							],
							[
								64452,
								64483
							],
							[
								64495,
								64514
							],
							[
								64526,
								64562
							],
							[
								64658,
								64679
							],
							[
								64691,
								64721
							],
							[
								64733,
								64756
							],
							[
								64768,
								64811
							],
							[
								64823,
								64861
							],
							[
								64873,
								64917
							],
							[
								64929,
								64953
							],
							[
								65070,
								65100
							],
							[
								65112,
								65138
							],
							[
								65182,
								65229
							],
							[
								65241,
								65283
							],
							[
								65295,
								65333
							],
							[
								65345,
								65381
							],
							[
								65393,
								65440
							],
							[
								65452,
								65475
							],
							[
								65487,
								65521
							],
							[
								65729,
								65772
							],
							[
								65784,
								65836
							],
							[
								65940,
								65987
							],
							[
								65999,
								66027
							],
							[
								66039,
								66077
							],
							[
								66089,
								66130
							],
							[
								66142,
								66161
							],
							[
								66173,
								66202
							],
							[
								66214,
								66240
							],
							[
								66252,
								66280
							],
							[
								66292,
								66344
							],
							[
								66356,
								66384
							],
							[
								66396,
								66430
							],
							[
								66562,
								66583
							],
							[
								66595,
								66618
							],
							[
								66630,
								66668
							],
							[
								66680,
								66718
							],
							[
								66730,
								66751
							],
							[
								66763,
								66788
							],
							[
								66800,
								66825
							],
							[
								66837,
								66868
							],
							[
								66955,
								66974
							],
							[
								66986,
								67009
							],
							[
								67021,
								67062
							],
							[
								67074,
								67117
							],
							[
								67129,
								67156
							],
							[
								67168,
								67206
							],
							[
								67218,
								67251
							],
							[
								67263,
								67299
							],
							[
								67311,
								67330
							],
							[
								67396,
								67459
							],
							[
								67471,
								67527
							],
							[
								67539,
								67562
							],
							[
								67574,
								67609
							],
							[
								67621,
								67677
							],
							[
								67689,
								67742
							],
							[
								67754,
								67799
							],
							[
								67811,
								67856
							],
							[
								67868,
								67913
							],
							[
								67925,
								67955
							],
							[
								67967,
								68014
							],
							[
								68026,
								68051
							],
							[
								68063,
								68096
							],
							[
								68108,
								68138
							],
							[
								68150,
								68190
							],
							[
								68202,
								68255
							],
							[
								68267,
								68290
							],
							[
								68302,
								68323
							],
							[
								68335,
								68375
							],
							[
								68387,
								68421
							],
							[
								68433,
								68455
							],
							[
								68467,
								68501
							],
							[
								68513,
								68536
							],
							[
								68548,
								68590
							],
							[
								68602,
								68633
							],
							[
								68645,
								68671
							],
							[
								68684,
								68714
							],
							[
								69288,
								69328
							],
							[
								69538,
								69542
							],
							[
								70683,
								70723
							],
							[
								71105,
								71165
							],
							[
								71601,
								71627
							],
							[
								71735,
								71773
							],
							[
								71969,
								71973
							],
							[
								72260,
								72290
							],
							[
								72748,
								72752
							],
							[
								73404,
								73443
							],
							[
								74106,
								74163
							],
							[
								74484,
								74508
							],
							[
								74980,
								75010
							],
							[
								75273,
								75314
							],
							[
								75449,
								75488
							],
							[
								75500,
								75545
							],
							[
								75557,
								75585
							],
							[
								75597,
								75633
							],
							[
								75777,
								75815
							],
							[
								75827,
								75866
							],
							[
								75878,
								75919
							],
							[
								75931,
								75966
							],
							[
								75978,
								76025
							],
							[
								76037,
								76076
							],
							[
								76089,
								76123
							],
							[
								76135,
								76183
							],
							[
								76195,
								76238
							],
							[
								76250,
								76299
							],
							[
								76311,
								76361
							],
							[
								76373,
								76422
							],
							[
								76676,
								76700
							],
							[
								76755,
								76780
							],
							[
								77159,
								77188
							],
							[
								77367,
								77372
							],
							[
								77644,
								77665
							],
							[
								77732,
								77775
							],
							[
								77962,
								77966
							],
							[
								78548,
								78556
							],
							[
								78608,
								78616
							],
							[
								78728,
								78732
							],
							[
								78984,
								79009
							],
							[
								79044,
								79054
							],
							[
								79118,
								79129
							],
							[
								79203,
								79218
							],
							[
								79257,
								79261
							],
							[
								79341,
								79366
							],
							[
								79405,
								79413
							],
							[
								79455,
								79484
							],
							[
								79514,
								79518
							]
						],
						"symlist":
						[
							"function FileTime(filename)",
							"function Newer(file, ...other)",
							"other =>",
							"function Older(file, other)",
							"function GetSubscripts(str)",
							"m =>",
							"function TrimSubscripts(str, sub)",
							"List",
							"constructor(...args)",
							"filter(callback, thisArg = null)",
							"callback = elem =>",
							"slice(start, end)",
							"get first()",
							"elem =>",
							"entries()",
							"keys()",
							"values()",
							"toArray()",
							"(a, n) =>",
							"List",
							"Node",
							"constructor(ast)",
							"static get(ast)",
							"get ast()",
							"get id()",
							"get loc()",
							"get file()",
							" (v,k) =>",
							" (v,k) =>",
							"get range()",
							"r =>",
							"toJSON(obj)",
							"(node, ast) =>",
							" function PathOf(node, ast = $.data)",
							" function* Hier(node_or_path, t = (p, ast, abort) => p.",
							"(ast), ast = $.data)",
							"p =>",
							"abortFn = () =>",
							" function FindType(typeName, ast = $.data)",
							"([tok]) =>",
							" n =>",
							"node =>",
							"Type",
							"constructor(node, ast)",
							" n =>",
							"n =>",
							" (n, p) =>",
							"get regExp()",
							"isEnum()",
							"isPointer()",
							"isFunction()",
							"isArray()",
							"arrayOf()",
							"get subscripts()",
							"trimSubscripts()",
							"get pointer()",
							"getPointer(ast)",
							" n =>",
							"get unsigned()",
							"get signed()",
							"isCompound()",
							"isFloatingPoint()",
							"get alias()",
							"get aliases()",
							"isEnum()",
							"isString()",
							"get ffi()",
							"get size()",
							"toJS()",
							"toJSON(obj)",
							"static get(name_or_id, ast = $.data)",
							" node =>",
							" node =>",
							"function RoundTo(value, align)",
							"RecordDecl",
							"constructor(node, ast)",
							"child =>",
							"child =>",
							"node =>",
							"(acc, node) =>",
							"i =>",
							" n =>",
							"n =>",
							"get size()",
							"(acc,[name,type]) =>",
							"toJSON()",
							"([name, member]) =>",
							"EnumDecl",
							"constructor(node, ast)",
							"child =>",
							"({ name, type, inner }) =>",
							"toJSON()",
							"TypedefDecl",
							"constructor(node, ast)",
							"n =>",
							" (v, k) =>",
							"n =>",
							"n =>",
							"n =>",
							"get size()",
							"toJSON()",
							"FieldDecl",
							"constructor(node, ast)",
							"n =>",
							"FunctionDecl",
							"constructor(node, ast)",
							"child =>",
							"child =>",
							" n =>",
							"({ name, type }) =>",
							"toJSON()",
							"VarDecl",
							"constructor(node, ast)",
							"toJSON()",
							"ClassDecl",
							"BuiltinType",
							"constructor(node, ast)",
							"PointerType",
							"constructor(node, ast)",
							"toJSON()",
							"ConstantArrayType",
							"constructor(node, ast)",
							"toJSON()",
							"Range",
							"constructor(begin, end)",
							"get begin()",
							"set begin(v)",
							"get end()",
							"set end(v)",
							"toString(opts = { printFile: true })",
							"get length()",
							"toArray()",
							"toObject()",
							"Range",
							"Location",
							"static at(file, offset)",
							"static from(loc)",
							"constructor(loc)",
							"update(other)",
							"get line()",
							"set line(v)",
							"get column()",
							"set column(v)",
							"get offset()",
							"set offset(v)",
							" (t, ...c) =>",
							"'\\x1b[m' : t =>",
							"toString(opts = { printFile: true, onlyOffset: false })",
							"toObject()",
							"localeCompare(other)",
							" function TypeFactory(node, ast, cache = true)",
							"async function SpawnCompiler(compiler, input, outfile, args = [])",
							"p =>",
							"p =>",
							"line =>",
							"line =>",
							"line =>",
							" function PipeReader(fd, callback)",
							"(resolve, reject) =>",
							" () =>",
							" data =>",
							" function ReadPipe(fd, callback)",
							" function ReadOutput(fd)",
							"async function SourceDependencies(...args)",
							"async function AstDump(compiler, source, args, force)",
							"size()",
							"json()",
							"data()",
							"SetFile = loc =>",
							"files()",
							"n =>",
							"file =>",
							"pred2 = (used, implicit) =>",
							" node =>",
							"types()",
							" n =>",
							" () =>",
							"List",
							"functions()",
							" n =>",
							" () =>",
							" n =>",
							"List",
							"namespaces()",
							" n =>",
							"List",
							"classes()",
							"predicate = n =>",
							"List",
							"variables()",
							"n =>",
							"List",
							"names(depth = 1)",
							"n =>",
							"n =>",
							" function NameFor(decl, ast = this.data)",
							" (value, key) =>",
							" function NodeType(n)",
							"t =>",
							" n =>",
							" function NodeName(n, name)",
							" function* RawLocation(path)",
							" function* RawRange(path)",
							" function CompleteLocation(path)",
							"l =>",
							" function CompleteRange(path)",
							"l =>",
							" function GetLoc(node)",
							" function GetTypeNode(node, ast = $.data)",
							"node =>",
							"node =>",
							" function GetTypeStr(node)",
							"inner =>",
							"inner =>",
							"([n, t]) =>",
							"NodeError",
							"constructor(message, node)",
							"NodeError",
							" function NodePrinter(ast)",
							" function put(str)",
							" function trim()",
							"printer = function(node)",
							"get()",
							"value()",
							"value(node)",
							"toString()",
							"i =>",
							"NodePrinter",
							"AbiTagAttr(abi_tag_attr)",
							"AccessSpecDecl(access_spec_decl)",
							"AlignedAttr(aligned_attr)",
							"AlwaysInlineAttr(always_inline_attr)",
							"ArraySubscriptExpr(array_subscript_expr)",
							"AsmLabelAttr(asm_label_attr)",
							"BinaryOperator(binary_operator)",
							"BlockCommandComment(block_command_comment)",
							"BuiltinAttr(builtin_attr)",
							"BreakStmt(break_stmt)",
							"CallExpr(call_expr)",
							"RecoveryExpr(recovery_expr)",
							"CaseStmt(case_stmt)",
							"CharacterLiteral(character_literal)",
							"CompoundAssignOperator(compound_assign_operator)",
							"CompoundStmt(compound_stmt)",
							"ConditionalOperator(conditional_operator)",
							"ConstantExpr(constant_expr)",
							"ConstAttr(const_attr)",
							"ContinueStmt(continue_stmt)",
							"CStyleCastExpr(cstyle_cast_expr)",
							"DeclRefExpr(decl_ref_expr)",
							"DeclStmt(decl_stmt)",
							"DefaultStmt(default_stmt)",
							"DeprecatedAttr(deprecated_attr)",
							"DoStmt(do_stmt)",
							"EmptyDecl(empty_decl)",
							"EnumConstantDecl(enum_constant_decl)",
							"EnumDecl(enum_decl)",
							"FieldDecl(field_decl)",
							"FloatingLiteral(floating_literal)",
							"FormatAttr(format_attr)",
							"ForStmt(for_stmt)",
							"n =>",
							"FullComment(full_comment)",
							"FunctionDecl(function_decl)",
							"n =>",
							"n =>",
							"GotoStmt(goto_stmt)",
							" n =>",
							"HTMLEndTagComment(html_end_tag_comment)",
							"HTMLStartTagComment(html_start_tag_comment)",
							"IfStmt(if_stmt)",
							"ImplicitCastExpr(implicit_cast_expr)",
							"InitListExpr(init_list_expr)",
							"InlineCommandComment(inline_command_comment)",
							"IntegerLiteral(integer_literal)",
							"LabelStmt(label_stmt)",
							"MemberExpr(member_expr)",
							"NonNullAttr(non_null_attr)",
							"NoThrowAttr(no_throw_attr)",
							"NullStmt(null_stmt)",
							"ParagraphComment(paragraph_comment)",
							"ParamCommandComment(param_command_comment)",
							"ParenExpr(paren_expr)",
							"ParenListExpr(paren_list_expr)",
							"ParmVarDecl(parm_var_decl)",
							"PureAttr(pure_attr)",
							"RecordDecl(record_decl)",
							"RestrictAttr(restrict_attr)",
							"ReturnStmt(return_stmt)",
							"ReturnsTwiceAttr(returns_twice_attr)",
							"StringLiteral(string_literal)",
							"SwitchStmt(switch_stmt)",
							"TextComment(text_comment)",
							"TranslationUnitDecl(translation_unit_decl)",
							"TypedefDecl(typedef_decl)",
							"UnaryExprOrTypeTraitExpr(unary_expr_or_type_trait_expr)",
							"UnaryOperator(unary_operator)",
							"UnresolvedLookupExpr(unresolved_lookup_expr)",
							"UnresolvedMemberExpr(unresolved_member_expr)",
							"VarDecl(var_decl, base_type)",
							"([offset, subscript]) =>",
							"VerbatimBlockComment(verbatim_block_comment)",
							"VerbatimBlockLineComment(verbatim_block_line_comment)",
							"WarnUnusedResultAttr(warn_unused_result_attr)",
							"WeakAttr(weak_attr)",
							"WhileStmt(while_stmt)",
							"OverrideAttr(override_attr)",
							"AddrLabelExpr(addr_label_expr)",
							"AliasAttr(alias_attr)",
							"AlignValueAttr(align_value_attr)",
							"AllocSizeAttr(alloc_size_attr)",
							"ArrayInitIndexExpr(array_init_index_expr)",
							"ArrayInitLoopExpr(array_init_loop_expr)",
							"AtomicExpr(atomic_expr)",
							"AtomicType(atomic_type)",
							"AutoType(auto_type)",
							"BuiltinTemplateDecl(builtin_template_decl)",
							"BuiltinType(builtin_type)",
							"CallbackAttr(callback_attr)",
							"ClassTemplateDecl(class_template_decl)",
							"ClassTemplatePartialSpecializationDecl(class_template_partial_specialization_decl)",
							"ClassTemplateSpecializationDecl(class_template_specialization_decl)",
							"ComplexType(complex_type)",
							"CompoundLiteralExpr(compound_literal_expr)",
							"ConstantArrayType(constant_array_type)",
							"ConstructorUsingShadowDecl(constructor_using_shadow_decl)",
							"ConvertVectorExpr(convert_vector_expr)",
							"DecayedType(decayed_type)",
							"DecltypeType(decltype_type)",
							"DependentNameType(dependent_name_type)",
							"DependentScopeDeclRefExpr(dependent_scope_decl_ref_expr)",
							"DependentSizedArrayType(dependent_sized_array_type)",
							"DependentTemplateSpecializationType(dependent_template_specialization_type)",
							"ElaboratedType(elaborated_type)",
							"EnumType(enum_type)",
							"ExprWithCleanups(expr_with_cleanups)",
							"FinalAttr(final_attr)",
							"FormatArgAttr(format_arg_attr)",
							"FriendDecl(friend_decl)",
							"FunctionNoProtoType(function_no_proto_type)",
							"FunctionProtoType(function_proto_type)",
							"FunctionTemplateDecl(function_template_decl)",
							"GCCAsmStmt(gcc_asm_stmt)",
							"GNUInlineAttr(gnu_inline_attr)",
							"GNUNullExpr(gnu_null_expr)",
							"ImplicitValueInitExpr(implicit_value_init_expr)",
							"IncompleteArrayType(incomplete_array_type)",
							"IndirectFieldDecl(indirect_field_decl)",
							"IndirectGotoStmt(indirect_goto_stmt)",
							"InjectedClassNameType(injected_class_name_type)",
							"LambdaExpr(lambda_expr)",
							"LinkageSpecDecl(linkage_spec_decl)",
							"LValueReferenceType(l_value_reference_type)",
							"MaterializeTemporaryExpr(materialize_temporary_expr)",
							"MaxFieldAlignmentAttr(max_field_alignment_attr)",
							"MayAliasAttr(may_alias_attr)",
							"MemberPointerType(member_pointer_type)",
							"MinVectorWidthAttr(min_vector_width_attr)",
							"ModeAttr(mode_attr)",
							"NamespaceDecl(namespace_decl)",
							"NoDebugAttr(no_debug_attr)",
							"NoInlineAttr(no_inline_attr)",
							"NonTypeTemplateParmDecl(non_type_template_parm_decl)",
							"OffsetOfExpr(offset_of_expr)",
							"OpaqueValueExpr(opaque_value_expr)",
							"OwnerAttr(owner_attr)",
							"PackedAttr(packed_attr)",
							"PackExpansionExpr(pack_expansion_expr)",
							"PackExpansionType(pack_expansion_type)",
							"ParenType(paren_type)",
							"PointerAttr(pointer_attr)",
							"PointerType(pointer_type)",
							"PredefinedExpr(predefined_expr)",
							"QualType(qual_type)",
							"RecordType(record_type)",
							"ReturnsNonNullAttr(returns_non_null_attr)",
							"RValueReferenceType(r_value_reference_type)",
							"SentinelAttr(sentinel_attr)",
							"ShuffleVectorExpr(shuffle_vector_expr)",
							"SizeOfPackExpr(size_of_pack_expr)",
							"StaticAssertDecl(static_assert_decl)",
							"StmtExpr(stmt_expr)",
							"SubstNonTypeTemplateParmExpr(subst_non_type_template_parm_expr)",
							"SubstTemplateTypeParmType(subst_template_type_parm_type)",
							"TargetAttr(target_attr)",
							"TemplateArgument(template_argument)",
							"TemplateSpecializationType(template_specialization_type)",
							"TemplateTemplateParmDecl(template_template_parm_decl)",
							"TemplateTypeParmDecl(template_type_parm_decl)",
							"TemplateTypeParmType(template_type_parm_type)",
							"TParamCommandComment(t_param_command_comment)",
							"TypeAliasDecl(type_alias_decl)",
							"TypeAliasTemplateDecl(type_alias_template_decl)",
							"TypedefType(typedef_type)",
							"TypeOfExprType(type_of_expr_type)",
							"TypeTraitExpr(type_trait_expr)",
							"UnaryTransformType(unary_transform_type)",
							"UnresolvedUsingValueDecl(unresolved_using_value_decl)",
							"UnusedAttr(unused_attr)",
							"UsingDecl(using_decl)",
							"UsingDirectiveDecl(using_directive_decl)",
							"UsingShadowDecl(using_shadow_decl)",
							"VAArgExpr(va_arg_expr)",
							"VarTemplateDecl(var_template_decl)",
							"VectorType(vector_type)",
							"VerbatimLineComment(verbatim_line_comment)",
							"VisibilityAttr(visibility_attr)",
							"WeakRefAttr(weak_ref_attr)",
							"CXXRecordDecl(cxx_record_decl)",
							"CXXConstructorDecl(cxx_constructor_decl)",
							"n =>",
							"CXXCtorInitializer(cxx_ctor_initializer)",
							"CXXDependentScopeMemberExpr(cxx_dependent_scope_member_expr)",
							"CXXThisExpr(cxx_this_expr)",
							"CXXDestructorDecl(cxx_destructor_decl)",
							"n =>",
							"CXXMethodDecl(cxx_method_decl)",
							"n =>",
							"CXXStaticCastExpr(cxx_static_cast_expr)",
							"CXXUnresolvedConstructExpr(cxx_unresolved_construct_expr)",
							"CXXNewExpr(cxx_new_expr)",
							"CXXDeleteExpr(cxx_delete_expr)",
							"CXXBoolLiteralExpr(cxx_bool_literal_expr)",
							"CXX11NoReturnAttr(cxx11_no_return_attr)",
							"CXXBindTemporaryExpr(cxx_bind_temporary_expr)",
							"CXXCatchStmt(cxx_catch_stmt)",
							"CXXConstructExpr(cxx_construct_expr)",
							"CXXConversionDecl(cxx_conversion_decl)",
							"CXXDefaultArgExpr(cxx_default_arg_expr)",
							"CXXDefaultInitExpr(cxx_default_init_expr)",
							"CXXForRangeStmt(cxx_for_range_stmt)",
							"CXXFunctionalCastExpr(cxx_functional_cast_expr)",
							"CXXMemberCallExpr(cxx_member_call_expr)",
							"CXXNoexceptExpr(cxx_noexcept_expr)",
							"CXXNullPtrLiteralExpr(cxx_null_ptr_literal_expr)",
							"CXXOperatorCallExpr(cxx_operator_call_expr)",
							"CXXReinterpretCastExpr(cxx_reinterpret_cast_expr)",
							"CXXScalarValueInitExpr(cxx_scalar_value_init_expr)",
							"CXXTemporaryObjectExpr(cxx_temporary_object_expr)",
							"CXXTryStmt(cxx_try_stmt)",
							" function PrintNode(node)",
							" function PrintAst(node, ast)",
							"get()",
							" function isNode(obj)",
							" function GetType(name_or_id, ast = $.data)",
							"n =>",
							" node =>",
							" node =>",
							"r =>",
							" function GetFields(node)",
							" (v, k) =>",
							"([v, p]) =>",
							"([loc, ptr]) =>",
							"i =>",
							" function GetParams(node)",
							"child =>",
							" function PathRemoveLoc(path)",
							"p =>"
						]
					},
					"AQAAAAAAAAAAAAAA2ikAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					7,
					3,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/clang-ast.js",
						"symkeys":
						[
							[
								690,
								717
							],
							[
								797,
								827
							],
							[
								894,
								902
							],
							[
								941,
								968
							],
							[
								1017,
								1044
							],
							[
								1121,
								1125
							],
							[
								1148,
								1181
							],
							[
								1368,
								1372
							],
							[
								1391,
								1411
							],
							[
								1567,
								1599
							],
							[
								1763,
								1781
							],
							[
								2033,
								2050
							],
							[
								2358,
								2369
							],
							[
								2393,
								2400
							],
							[
								2429,
								2438
							],
							[
								2568,
								2574
							],
							[
								2696,
								2704
							],
							[
								2829,
								2838
							],
							[
								2864,
								2873
							],
							[
								2904,
								2908
							],
							[
								2969,
								2973
							],
							[
								3049,
								3065
							],
							[
								3325,
								3340
							],
							[
								3407,
								3416
							],
							[
								3484,
								3492
							],
							[
								3547,
								3556
							],
							[
								3630,
								3640
							],
							[
								3694,
								3703
							],
							[
								3733,
								3742
							],
							[
								3852,
								3863
							],
							[
								4065,
								4069
							],
							[
								4719,
								4730
							],
							[
								4975,
								4989
							],
							[
								5039,
								5075
							],
							[
								5151,
								5206
							],
							[
								5211,
								5231
							],
							[
								5406,
								5410
							],
							[
								5491,
								5506
							],
							[
								5592,
								5634
							],
							[
								5706,
								5716
							],
							[
								5937,
								5942
							],
							[
								6008,
								6015
							],
							[
								6132,
								6136
							],
							[
								6234,
								6256
							],
							[
								6747,
								6752
							],
							[
								8564,
								8568
							],
							[
								9344,
								9354
							],
							[
								9572,
								9584
							],
							[
								9725,
								9733
							],
							[
								9816,
								9827
							],
							[
								9948,
								9960
							],
							[
								10052,
								10061
							],
							[
								10132,
								10143
							],
							[
								10230,
								10239
							],
							[
								10357,
								10373
							],
							[
								10443,
								10459
							],
							[
								10548,
								10561
							],
							[
								11090,
								11105
							],
							[
								11190,
								11195
							],
							[
								11447,
								11461
							],
							[
								11567,
								11579
							],
							[
								11648,
								11660
							],
							[
								11719,
								11736
							],
							[
								11822,
								11833
							],
							[
								11927,
								11940
							],
							[
								12080,
								12088
							],
							[
								12195,
								12205
							],
							[
								12407,
								12416
							],
							[
								13902,
								13912
							],
							[
								16790,
								16796
							],
							[
								17080,
								17091
							],
							[
								17191,
								17227
							],
							[
								17411,
								17419
							],
							[
								17479,
								17487
							],
							[
								19291,
								19321
							],
							[
								19400,
								19410
							],
							[
								19428,
								19450
							],
							[
								19630,
								19638
							],
							[
								19719,
								19727
							],
							[
								19906,
								19913
							],
							[
								19964,
								19978
							],
							[
								20472,
								20476
							],
							[
								20550,
								20555
							],
							[
								21050,
								21054
							],
							[
								21626,
								21636
							],
							[
								21711,
								21731
							],
							[
								21934,
								21942
							],
							[
								22064,
								22083
							],
							[
								22180,
								22188
							],
							[
								22206,
								22228
							],
							[
								22344,
								22352
							],
							[
								22457,
								22483
							],
							[
								22734,
								22742
							],
							[
								22857,
								22868
							],
							[
								22886,
								22908
							],
							[
								22976,
								22980
							],
							[
								23086,
								23096
							],
							[
								23156,
								23160
							],
							[
								23223,
								23227
							],
							[
								23277,
								23281
							],
							[
								23744,
								23754
							],
							[
								23792,
								23800
							],
							[
								23897,
								23906
							],
							[
								23924,
								23946
							],
							[
								24052,
								24056
							],
							[
								24456,
								24468
							],
							[
								24486,
								24508
							],
							[
								24698,
								24706
							],
							[
								24769,
								24777
							],
							[
								24933,
								24938
							],
							[
								25266,
								25285
							],
							[
								25345,
								25353
							],
							[
								25462,
								25469
							],
							[
								25487,
								25509
							],
							[
								25854,
								25862
							],
							[
								25959,
								25968
							],
							[
								26005,
								26016
							],
							[
								26034,
								26056
							],
							[
								26106,
								26117
							],
							[
								26135,
								26157
							],
							[
								26318,
								26326
							],
							[
								26429,
								26446
							],
							[
								26464,
								26486
							],
							[
								26742,
								26750
							],
							[
								26861,
								26866
							],
							[
								26914,
								26937
							],
							[
								27059,
								27070
							],
							[
								27119,
								27131
							],
							[
								27193,
								27202
							],
							[
								27249,
								27259
							],
							[
								27297,
								27333
							],
							[
								27985,
								27997
							],
							[
								28043,
								28052
							],
							[
								28099,
								28109
							],
							[
								28289,
								28294
							],
							[
								28350,
								28358
							],
							[
								28451,
								28474
							],
							[
								28732,
								28748
							],
							[
								28967,
								28983
							],
							[
								29224,
								29237
							],
							[
								29383,
								29393
							],
							[
								29441,
								29452
							],
							[
								29544,
								29556
							],
							[
								29606,
								29619
							],
							[
								29667,
								29679
							],
							[
								29729,
								29742
							],
							[
								29990,
								30003
							],
							[
								30038,
								30053
							],
							[
								30133,
								30188
							],
							[
								30721,
								30731
							],
							[
								30974,
								30994
							],
							[
								31077,
								31123
							],
							[
								32572,
								32637
							],
							[
								32922,
								32926
							],
							[
								33187,
								33191
							],
							[
								33912,
								33919
							],
							[
								33973,
								33980
							],
							[
								34064,
								34071
							],
							[
								34248,
								34283
							],
							[
								34322,
								34342
							],
							[
								34372,
								34378
							],
							[
								34399,
								34407
							],
							[
								34513,
								34546
							],
							[
								34811,
								34836
							],
							[
								35177,
								35219
							],
							[
								35751,
								35804
							],
							[
								37190,
								37196
							],
							[
								37246,
								37252
							],
							[
								37469,
								37475
							],
							[
								37617,
								37633
							],
							[
								38066,
								38073
							],
							[
								38116,
								38120
							],
							[
								38140,
								38147
							],
							[
								38267,
								38294
							],
							[
								38353,
								38368
							],
							[
								38671,
								38678
							],
							[
								38738,
								38752
							],
							[
								38797,
								38812
							],
							[
								38837,
								38841
							],
							[
								38872,
								38883
							],
							[
								38916,
								38928
							],
							[
								38962,
								38975
							],
							[
								39047,
								39052
							],
							[
								39150,
								39154
							],
							[
								39178,
								39190
							],
							[
								39259,
								39264
							],
							[
								39324,
								39328
							],
							[
								39359,
								39368
							],
							[
								39381,
								39397
							],
							[
								39758,
								39762
							],
							[
								39786,
								39797
							],
							[
								39856,
								39860
							],
							[
								39898,
								39902
							],
							[
								39933,
								39949
							],
							[
								39988,
								39992
							],
							[
								40010,
								40014
							],
							[
								40057,
								40097
							],
							[
								40156,
								40172
							],
							[
								40534,
								40555
							],
							[
								40581,
								40585
							],
							[
								41028,
								41033
							],
							[
								41074,
								41101
							],
							[
								41295,
								41323
							],
							[
								41504,
								41529
							],
							[
								41604,
								41636
							],
							[
								41767,
								41771
							],
							[
								41908,
								41937
							],
							[
								42047,
								42051
							],
							[
								42345,
								42367
							],
							[
								43406,
								43447
							],
							[
								43527,
								43534
							],
							[
								43600,
								43607
							],
							[
								43644,
								43670
							],
							[
								43764,
								43772
							],
							[
								43838,
								43846
							],
							[
								43908,
								43919
							],
							[
								44073,
								44082
							],
							[
								44101,
								44127
							],
							[
								44180,
								44189
							],
							[
								44242,
								44268
							],
							[
								44320,
								44339
							],
							[
								44415,
								44432
							],
							[
								44467,
								44491
							],
							[
								44750,
								44755
							],
							[
								44812,
								44819
							],
							[
								44900,
								44911
							],
							[
								45619,
								45629
							],
							[
								45677,
								45681
							],
							[
								45870,
								45881
							],
							[
								45892,
								45916
							],
							[
								45984,
								46016
							],
							[
								46172,
								46197
							],
							[
								46261,
								46297
							],
							[
								46367,
								46407
							],
							[
								46659,
								46687
							],
							[
								46734,
								46765
							],
							[
								46994,
								47036
							],
							[
								47239,
								47264
							],
							[
								47422,
								47443
							],
							[
								47488,
								47507
							],
							[
								47841,
								47868
							],
							[
								47936,
								47955
							],
							[
								48159,
								48194
							],
							[
								48312,
								48360
							],
							[
								48606,
								48633
							],
							[
								49251,
								49292
							],
							[
								49530,
								49557
							],
							[
								49700,
								49721
							],
							[
								49782,
								49809
							],
							[
								49854,
								49886
							],
							[
								50136,
								50162
							],
							[
								50356,
								50375
							],
							[
								51037,
								51062
							],
							[
								51110,
								51141
							],
							[
								51208,
								51223
							],
							[
								51418,
								51439
							],
							[
								51556,
								51592
							],
							[
								51812,
								51831
							],
							[
								52235,
								52256
							],
							[
								52473,
								52506
							],
							[
								52566,
								52589
							],
							[
								52652,
								52669
							],
							[
								52789,
								52793
							],
							[
								53620,
								53645
							],
							[
								53852,
								53879
							],
							[
								54344,
								54348
							],
							[
								54558,
								54562
							],
							[
								54761,
								54780
							],
							[
								54902,
								54907
							],
							[
								55248,
								55287
							],
							[
								55386,
								55429
							],
							[
								55639,
								55654
							],
							[
								55920,
								55956
							],
							[
								56052,
								56080
							],
							[
								56350,
								56394
							],
							[
								56456,
								56487
							],
							[
								56546,
								56567
							],
							[
								56626,
								56649
							],
							[
								57072,
								57098
							],
							[
								57166,
								57192
							],
							[
								57256,
								57275
							],
							[
								57317,
								57352
							],
							[
								57526,
								57568
							],
							[
								57753,
								57774
							],
							[
								57950,
								57980
							],
							[
								58200,
								58226
							],
							[
								58654,
								58673
							],
							[
								58734,
								58757
							],
							[
								59292,
								59319
							],
							[
								59369,
								59392
							],
							[
								59549,
								59585
							],
							[
								59655,
								59684
							],
							[
								59742,
								59765
							],
							[
								59943,
								59968
							],
							[
								60052,
								60094
							],
							[
								60193,
								60218
							],
							[
								60522,
								60577
							],
							[
								60819,
								60848
							],
							[
								61099,
								61143
							],
							[
								61275,
								61319
							],
							[
								61406,
								61434
							],
							[
								61578,
								61602
							],
							[
								61850,
								61894
							],
							[
								62216,
								62269
							],
							[
								62368,
								62413
							],
							[
								62488,
								62507
							],
							[
								62568,
								62589
							],
							[
								62766,
								62793
							],
							[
								62842,
								62872
							],
							[
								62884,
								62905
							],
							[
								62917,
								62949
							],
							[
								63091,
								63121
							],
							[
								63133,
								63174
							],
							[
								63186,
								63225
							],
							[
								63237,
								63260
							],
							[
								63272,
								63295
							],
							[
								63307,
								63326
							],
							[
								63338,
								63380
							],
							[
								63392,
								63417
							],
							[
								63429,
								63456
							],
							[
								63468,
								63506
							],
							[
								63518,
								63600
							],
							[
								63612,
								63679
							],
							[
								63691,
								63716
							],
							[
								63728,
								63770
							],
							[
								63955,
								63993
							],
							[
								64005,
								64062
							],
							[
								64074,
								64112
							],
							[
								64124,
								64149
							],
							[
								64161,
								64188
							],
							[
								64200,
								64238
							],
							[
								64250,
								64306
							],
							[
								64400,
								64451
							],
							[
								64463,
								64538
							],
							[
								64550,
								64581
							],
							[
								64593,
								64612
							],
							[
								64624,
								64660
							],
							[
								64756,
								64777
							],
							[
								64789,
								64819
							],
							[
								64831,
								64854
							],
							[
								64866,
								64909
							],
							[
								64921,
								64959
							],
							[
								64971,
								65015
							],
							[
								65027,
								65051
							],
							[
								65168,
								65198
							],
							[
								65210,
								65236
							],
							[
								65280,
								65327
							],
							[
								65339,
								65381
							],
							[
								65393,
								65431
							],
							[
								65443,
								65479
							],
							[
								65491,
								65538
							],
							[
								65550,
								65573
							],
							[
								65585,
								65619
							],
							[
								65827,
								65870
							],
							[
								65882,
								65934
							],
							[
								66038,
								66085
							],
							[
								66097,
								66125
							],
							[
								66137,
								66175
							],
							[
								66187,
								66228
							],
							[
								66240,
								66259
							],
							[
								66271,
								66300
							],
							[
								66312,
								66338
							],
							[
								66350,
								66378
							],
							[
								66390,
								66442
							],
							[
								66454,
								66482
							],
							[
								66494,
								66528
							],
							[
								66660,
								66681
							],
							[
								66693,
								66716
							],
							[
								66728,
								66766
							],
							[
								66778,
								66816
							],
							[
								66828,
								66849
							],
							[
								66861,
								66886
							],
							[
								66898,
								66923
							],
							[
								66935,
								66966
							],
							[
								67053,
								67072
							],
							[
								67084,
								67107
							],
							[
								67119,
								67160
							],
							[
								67172,
								67215
							],
							[
								67227,
								67254
							],
							[
								67266,
								67304
							],
							[
								67316,
								67349
							],
							[
								67361,
								67397
							],
							[
								67409,
								67428
							],
							[
								67494,
								67557
							],
							[
								67569,
								67625
							],
							[
								67637,
								67660
							],
							[
								67672,
								67707
							],
							[
								67719,
								67775
							],
							[
								67787,
								67840
							],
							[
								67852,
								67897
							],
							[
								67909,
								67954
							],
							[
								67966,
								68011
							],
							[
								68023,
								68053
							],
							[
								68065,
								68112
							],
							[
								68124,
								68149
							],
							[
								68161,
								68194
							],
							[
								68206,
								68236
							],
							[
								68248,
								68288
							],
							[
								68300,
								68353
							],
							[
								68365,
								68388
							],
							[
								68400,
								68421
							],
							[
								68433,
								68473
							],
							[
								68485,
								68519
							],
							[
								68531,
								68553
							],
							[
								68565,
								68599
							],
							[
								68611,
								68634
							],
							[
								68646,
								68688
							],
							[
								68700,
								68731
							],
							[
								68743,
								68769
							],
							[
								68782,
								68812
							],
							[
								69386,
								69426
							],
							[
								69636,
								69640
							],
							[
								70781,
								70821
							],
							[
								71203,
								71263
							],
							[
								71699,
								71725
							],
							[
								71833,
								71871
							],
							[
								72067,
								72071
							],
							[
								72358,
								72388
							],
							[
								72846,
								72850
							],
							[
								73502,
								73541
							],
							[
								74204,
								74261
							],
							[
								74582,
								74606
							],
							[
								75078,
								75108
							],
							[
								75371,
								75412
							],
							[
								75547,
								75586
							],
							[
								75598,
								75643
							],
							[
								75655,
								75683
							],
							[
								75695,
								75731
							],
							[
								75875,
								75913
							],
							[
								75925,
								75964
							],
							[
								75976,
								76017
							],
							[
								76029,
								76064
							],
							[
								76076,
								76123
							],
							[
								76135,
								76174
							],
							[
								76187,
								76221
							],
							[
								76233,
								76281
							],
							[
								76293,
								76336
							],
							[
								76348,
								76397
							],
							[
								76409,
								76459
							],
							[
								76471,
								76520
							],
							[
								76774,
								76798
							],
							[
								76853,
								76878
							],
							[
								77257,
								77286
							],
							[
								77465,
								77470
							],
							[
								77742,
								77763
							],
							[
								77830,
								77873
							],
							[
								78060,
								78064
							],
							[
								78646,
								78654
							],
							[
								78706,
								78714
							],
							[
								78826,
								78830
							],
							[
								79082,
								79107
							],
							[
								79142,
								79152
							],
							[
								79216,
								79227
							],
							[
								79301,
								79316
							],
							[
								79355,
								79359
							],
							[
								79439,
								79464
							],
							[
								79503,
								79511
							],
							[
								79553,
								79582
							],
							[
								79612,
								79616
							]
						],
						"symlist":
						[
							"function FileTime(filename)",
							"function Newer(file, ...other)",
							"other =>",
							"function Older(file, other)",
							"function GetSubscripts(str)",
							"m =>",
							"function TrimSubscripts(str, sub)",
							"List",
							"constructor(...args)",
							"filter(callback, thisArg = null)",
							"callback = elem =>",
							"slice(start, end)",
							"get first()",
							"elem =>",
							"entries()",
							"keys()",
							"values()",
							"toArray()",
							"(a, n) =>",
							"List",
							"Node",
							"constructor(ast)",
							"static get(ast)",
							"get ast()",
							"get id()",
							"get loc()",
							"get file()",
							" (v,k) =>",
							" (v,k) =>",
							"get range()",
							"r =>",
							"toJSON(obj)",
							"(node, ast) =>",
							" function PathOf(node, ast = $.data)",
							" function* Hier(node_or_path, t = (p, ast, abort) => p.",
							"(ast), ast = $.data)",
							"p =>",
							"abortFn = () =>",
							" function FindType(typeName, ast = $.data)",
							"([tok]) =>",
							" n =>",
							"node =>",
							"Type",
							"constructor(node, ast)",
							" n =>",
							"n =>",
							" (n, p) =>",
							"get regExp()",
							"isEnum()",
							"isPointer()",
							"isFunction()",
							"isArray()",
							"isInteger()",
							"arrayOf()",
							"get subscripts()",
							"trimSubscripts()",
							"get pointer()",
							"getPointer(ast)",
							" n =>",
							"get unsigned()",
							"get signed()",
							"isCompound()",
							"isFloatingPoint()",
							"get alias()",
							"get aliases()",
							"isEnum()",
							"isString()",
							"get ffi()",
							"get size()",
							"toJS()",
							"toJSON(obj)",
							"static get(name_or_id, ast = $.data)",
							" node =>",
							" node =>",
							"function RoundTo(value, align)",
							"RecordDecl",
							"constructor(node, ast)",
							"child =>",
							"child =>",
							"node =>",
							"(acc, node) =>",
							"i =>",
							" n =>",
							"n =>",
							"get size()",
							"(acc,[name,type]) =>",
							"toJSON()",
							"([name, member]) =>",
							"EnumDecl",
							"constructor(node, ast)",
							"child =>",
							"({ name, type, inner }) =>",
							"toJSON()",
							"TypedefDecl",
							"constructor(node, ast)",
							"n =>",
							" (v, k) =>",
							"n =>",
							"n =>",
							"n =>",
							"get size()",
							"toJSON()",
							"FieldDecl",
							"constructor(node, ast)",
							"n =>",
							"FunctionDecl",
							"constructor(node, ast)",
							"child =>",
							"child =>",
							" n =>",
							"({ name, type }) =>",
							"toJSON()",
							"VarDecl",
							"constructor(node, ast)",
							"toJSON()",
							"ClassDecl",
							"BuiltinType",
							"constructor(node, ast)",
							"PointerType",
							"constructor(node, ast)",
							"toJSON()",
							"ConstantArrayType",
							"constructor(node, ast)",
							"toJSON()",
							"Range",
							"constructor(begin, end)",
							"get begin()",
							"set begin(v)",
							"get end()",
							"set end(v)",
							"toString(opts = { printFile: true })",
							"get length()",
							"toArray()",
							"toObject()",
							"Range",
							"Location",
							"static at(file, offset)",
							"static from(loc)",
							"constructor(loc)",
							"update(other)",
							"get line()",
							"set line(v)",
							"get column()",
							"set column(v)",
							"get offset()",
							"set offset(v)",
							" (t, ...c) =>",
							"'\\x1b[m' : t =>",
							"toString(opts = { printFile: true, onlyOffset: false })",
							"toObject()",
							"localeCompare(other)",
							" function TypeFactory(node, ast, cache = true)",
							"async function SpawnCompiler(compiler, input, outfile, args = [])",
							"p =>",
							"p =>",
							"line =>",
							"line =>",
							"line =>",
							" function PipeReader(fd, callback)",
							"(resolve, reject) =>",
							" () =>",
							" data =>",
							" function ReadPipe(fd, callback)",
							" function ReadOutput(fd)",
							"async function SourceDependencies(...args)",
							"async function AstDump(compiler, source, args, force)",
							"size()",
							"json()",
							"data()",
							"SetFile = loc =>",
							"files()",
							"n =>",
							"file =>",
							"pred2 = (used, implicit) =>",
							" node =>",
							"types()",
							" n =>",
							" () =>",
							"List",
							"functions()",
							" n =>",
							" () =>",
							" n =>",
							"List",
							"namespaces()",
							" n =>",
							"List",
							"classes()",
							"predicate = n =>",
							"List",
							"variables()",
							"n =>",
							"List",
							"names(depth = 1)",
							"n =>",
							"n =>",
							" function NameFor(decl, ast = this.data)",
							" (value, key) =>",
							" function NodeType(n)",
							"t =>",
							" n =>",
							" function NodeName(n, name)",
							" function* RawLocation(path)",
							" function* RawRange(path)",
							" function CompleteLocation(path)",
							"l =>",
							" function CompleteRange(path)",
							"l =>",
							" function GetLoc(node)",
							" function GetTypeNode(node, ast = $.data)",
							"node =>",
							"node =>",
							" function GetTypeStr(node)",
							"inner =>",
							"inner =>",
							"([n, t]) =>",
							"NodeError",
							"constructor(message, node)",
							"NodeError",
							" function NodePrinter(ast)",
							" function put(str)",
							" function trim()",
							"printer = function(node)",
							"get()",
							"value()",
							"value(node)",
							"toString()",
							"i =>",
							"NodePrinter",
							"AbiTagAttr(abi_tag_attr)",
							"AccessSpecDecl(access_spec_decl)",
							"AlignedAttr(aligned_attr)",
							"AlwaysInlineAttr(always_inline_attr)",
							"ArraySubscriptExpr(array_subscript_expr)",
							"AsmLabelAttr(asm_label_attr)",
							"BinaryOperator(binary_operator)",
							"BlockCommandComment(block_command_comment)",
							"BuiltinAttr(builtin_attr)",
							"BreakStmt(break_stmt)",
							"CallExpr(call_expr)",
							"RecoveryExpr(recovery_expr)",
							"CaseStmt(case_stmt)",
							"CharacterLiteral(character_literal)",
							"CompoundAssignOperator(compound_assign_operator)",
							"CompoundStmt(compound_stmt)",
							"ConditionalOperator(conditional_operator)",
							"ConstantExpr(constant_expr)",
							"ConstAttr(const_attr)",
							"ContinueStmt(continue_stmt)",
							"CStyleCastExpr(cstyle_cast_expr)",
							"DeclRefExpr(decl_ref_expr)",
							"DeclStmt(decl_stmt)",
							"DefaultStmt(default_stmt)",
							"DeprecatedAttr(deprecated_attr)",
							"DoStmt(do_stmt)",
							"EmptyDecl(empty_decl)",
							"EnumConstantDecl(enum_constant_decl)",
							"EnumDecl(enum_decl)",
							"FieldDecl(field_decl)",
							"FloatingLiteral(floating_literal)",
							"FormatAttr(format_attr)",
							"ForStmt(for_stmt)",
							"n =>",
							"FullComment(full_comment)",
							"FunctionDecl(function_decl)",
							"n =>",
							"n =>",
							"GotoStmt(goto_stmt)",
							" n =>",
							"HTMLEndTagComment(html_end_tag_comment)",
							"HTMLStartTagComment(html_start_tag_comment)",
							"IfStmt(if_stmt)",
							"ImplicitCastExpr(implicit_cast_expr)",
							"InitListExpr(init_list_expr)",
							"InlineCommandComment(inline_command_comment)",
							"IntegerLiteral(integer_literal)",
							"LabelStmt(label_stmt)",
							"MemberExpr(member_expr)",
							"NonNullAttr(non_null_attr)",
							"NoThrowAttr(no_throw_attr)",
							"NullStmt(null_stmt)",
							"ParagraphComment(paragraph_comment)",
							"ParamCommandComment(param_command_comment)",
							"ParenExpr(paren_expr)",
							"ParenListExpr(paren_list_expr)",
							"ParmVarDecl(parm_var_decl)",
							"PureAttr(pure_attr)",
							"RecordDecl(record_decl)",
							"RestrictAttr(restrict_attr)",
							"ReturnStmt(return_stmt)",
							"ReturnsTwiceAttr(returns_twice_attr)",
							"StringLiteral(string_literal)",
							"SwitchStmt(switch_stmt)",
							"TextComment(text_comment)",
							"TranslationUnitDecl(translation_unit_decl)",
							"TypedefDecl(typedef_decl)",
							"UnaryExprOrTypeTraitExpr(unary_expr_or_type_trait_expr)",
							"UnaryOperator(unary_operator)",
							"UnresolvedLookupExpr(unresolved_lookup_expr)",
							"UnresolvedMemberExpr(unresolved_member_expr)",
							"VarDecl(var_decl, base_type)",
							"([offset, subscript]) =>",
							"VerbatimBlockComment(verbatim_block_comment)",
							"VerbatimBlockLineComment(verbatim_block_line_comment)",
							"WarnUnusedResultAttr(warn_unused_result_attr)",
							"WeakAttr(weak_attr)",
							"WhileStmt(while_stmt)",
							"OverrideAttr(override_attr)",
							"AddrLabelExpr(addr_label_expr)",
							"AliasAttr(alias_attr)",
							"AlignValueAttr(align_value_attr)",
							"AllocSizeAttr(alloc_size_attr)",
							"ArrayInitIndexExpr(array_init_index_expr)",
							"ArrayInitLoopExpr(array_init_loop_expr)",
							"AtomicExpr(atomic_expr)",
							"AtomicType(atomic_type)",
							"AutoType(auto_type)",
							"BuiltinTemplateDecl(builtin_template_decl)",
							"BuiltinType(builtin_type)",
							"CallbackAttr(callback_attr)",
							"ClassTemplateDecl(class_template_decl)",
							"ClassTemplatePartialSpecializationDecl(class_template_partial_specialization_decl)",
							"ClassTemplateSpecializationDecl(class_template_specialization_decl)",
							"ComplexType(complex_type)",
							"CompoundLiteralExpr(compound_literal_expr)",
							"ConstantArrayType(constant_array_type)",
							"ConstructorUsingShadowDecl(constructor_using_shadow_decl)",
							"ConvertVectorExpr(convert_vector_expr)",
							"DecayedType(decayed_type)",
							"DecltypeType(decltype_type)",
							"DependentNameType(dependent_name_type)",
							"DependentScopeDeclRefExpr(dependent_scope_decl_ref_expr)",
							"DependentSizedArrayType(dependent_sized_array_type)",
							"DependentTemplateSpecializationType(dependent_template_specialization_type)",
							"ElaboratedType(elaborated_type)",
							"EnumType(enum_type)",
							"ExprWithCleanups(expr_with_cleanups)",
							"FinalAttr(final_attr)",
							"FormatArgAttr(format_arg_attr)",
							"FriendDecl(friend_decl)",
							"FunctionNoProtoType(function_no_proto_type)",
							"FunctionProtoType(function_proto_type)",
							"FunctionTemplateDecl(function_template_decl)",
							"GCCAsmStmt(gcc_asm_stmt)",
							"GNUInlineAttr(gnu_inline_attr)",
							"GNUNullExpr(gnu_null_expr)",
							"ImplicitValueInitExpr(implicit_value_init_expr)",
							"IncompleteArrayType(incomplete_array_type)",
							"IndirectFieldDecl(indirect_field_decl)",
							"IndirectGotoStmt(indirect_goto_stmt)",
							"InjectedClassNameType(injected_class_name_type)",
							"LambdaExpr(lambda_expr)",
							"LinkageSpecDecl(linkage_spec_decl)",
							"LValueReferenceType(l_value_reference_type)",
							"MaterializeTemporaryExpr(materialize_temporary_expr)",
							"MaxFieldAlignmentAttr(max_field_alignment_attr)",
							"MayAliasAttr(may_alias_attr)",
							"MemberPointerType(member_pointer_type)",
							"MinVectorWidthAttr(min_vector_width_attr)",
							"ModeAttr(mode_attr)",
							"NamespaceDecl(namespace_decl)",
							"NoDebugAttr(no_debug_attr)",
							"NoInlineAttr(no_inline_attr)",
							"NonTypeTemplateParmDecl(non_type_template_parm_decl)",
							"OffsetOfExpr(offset_of_expr)",
							"OpaqueValueExpr(opaque_value_expr)",
							"OwnerAttr(owner_attr)",
							"PackedAttr(packed_attr)",
							"PackExpansionExpr(pack_expansion_expr)",
							"PackExpansionType(pack_expansion_type)",
							"ParenType(paren_type)",
							"PointerAttr(pointer_attr)",
							"PointerType(pointer_type)",
							"PredefinedExpr(predefined_expr)",
							"QualType(qual_type)",
							"RecordType(record_type)",
							"ReturnsNonNullAttr(returns_non_null_attr)",
							"RValueReferenceType(r_value_reference_type)",
							"SentinelAttr(sentinel_attr)",
							"ShuffleVectorExpr(shuffle_vector_expr)",
							"SizeOfPackExpr(size_of_pack_expr)",
							"StaticAssertDecl(static_assert_decl)",
							"StmtExpr(stmt_expr)",
							"SubstNonTypeTemplateParmExpr(subst_non_type_template_parm_expr)",
							"SubstTemplateTypeParmType(subst_template_type_parm_type)",
							"TargetAttr(target_attr)",
							"TemplateArgument(template_argument)",
							"TemplateSpecializationType(template_specialization_type)",
							"TemplateTemplateParmDecl(template_template_parm_decl)",
							"TemplateTypeParmDecl(template_type_parm_decl)",
							"TemplateTypeParmType(template_type_parm_type)",
							"TParamCommandComment(t_param_command_comment)",
							"TypeAliasDecl(type_alias_decl)",
							"TypeAliasTemplateDecl(type_alias_template_decl)",
							"TypedefType(typedef_type)",
							"TypeOfExprType(type_of_expr_type)",
							"TypeTraitExpr(type_trait_expr)",
							"UnaryTransformType(unary_transform_type)",
							"UnresolvedUsingValueDecl(unresolved_using_value_decl)",
							"UnusedAttr(unused_attr)",
							"UsingDecl(using_decl)",
							"UsingDirectiveDecl(using_directive_decl)",
							"UsingShadowDecl(using_shadow_decl)",
							"VAArgExpr(va_arg_expr)",
							"VarTemplateDecl(var_template_decl)",
							"VectorType(vector_type)",
							"VerbatimLineComment(verbatim_line_comment)",
							"VisibilityAttr(visibility_attr)",
							"WeakRefAttr(weak_ref_attr)",
							"CXXRecordDecl(cxx_record_decl)",
							"CXXConstructorDecl(cxx_constructor_decl)",
							"n =>",
							"CXXCtorInitializer(cxx_ctor_initializer)",
							"CXXDependentScopeMemberExpr(cxx_dependent_scope_member_expr)",
							"CXXThisExpr(cxx_this_expr)",
							"CXXDestructorDecl(cxx_destructor_decl)",
							"n =>",
							"CXXMethodDecl(cxx_method_decl)",
							"n =>",
							"CXXStaticCastExpr(cxx_static_cast_expr)",
							"CXXUnresolvedConstructExpr(cxx_unresolved_construct_expr)",
							"CXXNewExpr(cxx_new_expr)",
							"CXXDeleteExpr(cxx_delete_expr)",
							"CXXBoolLiteralExpr(cxx_bool_literal_expr)",
							"CXX11NoReturnAttr(cxx11_no_return_attr)",
							"CXXBindTemporaryExpr(cxx_bind_temporary_expr)",
							"CXXCatchStmt(cxx_catch_stmt)",
							"CXXConstructExpr(cxx_construct_expr)",
							"CXXConversionDecl(cxx_conversion_decl)",
							"CXXDefaultArgExpr(cxx_default_arg_expr)",
							"CXXDefaultInitExpr(cxx_default_init_expr)",
							"CXXForRangeStmt(cxx_for_range_stmt)",
							"CXXFunctionalCastExpr(cxx_functional_cast_expr)",
							"CXXMemberCallExpr(cxx_member_call_expr)",
							"CXXNoexceptExpr(cxx_noexcept_expr)",
							"CXXNullPtrLiteralExpr(cxx_null_ptr_literal_expr)",
							"CXXOperatorCallExpr(cxx_operator_call_expr)",
							"CXXReinterpretCastExpr(cxx_reinterpret_cast_expr)",
							"CXXScalarValueInitExpr(cxx_scalar_value_init_expr)",
							"CXXTemporaryObjectExpr(cxx_temporary_object_expr)",
							"CXXTryStmt(cxx_try_stmt)",
							" function PrintNode(node)",
							" function PrintAst(node, ast)",
							"get()",
							" function isNode(obj)",
							" function GetType(name_or_id, ast = $.data)",
							"n =>",
							" node =>",
							" node =>",
							"r =>",
							" function GetFields(node)",
							" (v, k) =>",
							"([v, p]) =>",
							"([loc, ptr]) =>",
							"i =>",
							" function GetParams(node)",
							"child =>",
							" function PathRemoveLoc(path)",
							"p =>"
						]
					},
					"BgAAAAAAAAAAAAAAAAAAAAAAAADaKQAARmlsZVRpbWUoZmlsZW5hbWUpCk5ld2VyKGZpbGUsIC4uLm90aGVyKQogIG90aGVyID0+Ck9sZGVyKGZpbGUsIG90aGVyKQpHZXRTdWJzY3JpcHRzKHN0cikKICBtID0+ClRyaW1TdWJzY3JpcHRzKHN0ciwgc3ViKQpMaXN0CiAgY29uc3RydWN0b3IoLi4uYXJncykKICBmaWx0ZXIoY2FsbGJhY2ssIHRoaXNBcmcgPSBudWxsKQogIGNhbGxiYWNrID0gZWxlbSA9PgogIHNsaWNlKHN0YXJ0LCBlbmQpCiAgZ2V0IGZpcnN0KCkKICBlbGVtID0+CiAgZW50cmllcygpCiAga2V5cygpCiAgdmFsdWVzKCkKICB0b0FycmF5KCkKKGEsIG4pID0+Ckxpc3QKTm9kZQogIGNvbnN0cnVjdG9yKGFzdCkKICBzdGF0aWMgZ2V0KGFzdCkKICBnZXQgYXN0KCkKICBnZXQgaWQoKQogIGdldCBsb2MoKQogIGdldCBmaWxlKCkKKHYsaykgPT4KKHYsaykgPT4KICBnZXQgcmFuZ2UoKQogIHIgPT4KICB0b0pTT04ob2JqKQoobm9kZSwgYXN0KSA9PgpQYXRoT2Yobm9kZSwgYXN0ID0gJC5kYXRhKQpIaWVyKG5vZGVfb3JfcGF0aCwgdCA9IChwLCBhc3QsIGFib3J0KSA9PiBwLgooYXN0KSwgYXN0ID0gJC5kYXRhKQogIHAgPT4KICBhYm9ydEZuID0gKCkgPT4KRmluZFR5cGUodHlwZU5hbWUsIGFzdCA9ICQuZGF0YSkKKFt0b2tdKSA9PgpuID0+CiAgbm9kZSA9PgpUeXBlCiAgY29uc3RydWN0b3Iobm9kZSwgYXN0KQpuID0+CiAgbiA9PgoobiwgcCkgPT4KICBnZXQgcmVnRXhwKCkKICBpc0VudW0oKQogIGlzUG9pbnRlcigpCiAgaXNGdW5jdGlvbigpCiAgaXNBcnJheSgpCiAgYXJyYXlPZigpCiAgZ2V0IHN1YnNjcmlwdHMoKQogIHRyaW1TdWJzY3JpcHRzKCkKICBnZXQgcG9pbnRlcigpCiAgZ2V0UG9pbnRlcihhc3QpCm4gPT4KICBnZXQgdW5zaWduZWQoKQogIGdldCBzaWduZWQoKQogIGlzQ29tcG91bmQoKQogIGlzRmxvYXRpbmdQb2ludCgpCiAgZ2V0IGFsaWFzKCkKICBnZXQgYWxpYXNlcygpCiAgaXNFbnVtKCkKICBpc1N0cmluZygpCiAgZ2V0IGZmaSgpCiAgZ2V0IHNpemUoKQogIHRvSlMoKQogIHRvSlNPTihvYmopCiAgc3RhdGljIGdldChuYW1lX29yX2lkLCBhc3QgPSAkLmRhdGEpCm5vZGUgPT4Kbm9kZSA9PgpSb3VuZFRvKHZhbHVlLCBhbGlnbikKUmVjb3JkRGVjbAogIGNvbnN0cnVjdG9yKG5vZGUsIGFzdCkKICBjaGlsZCA9PgogIGNoaWxkID0+CiAgbm9kZSA9PgooYWNjLCBub2RlKSA9PgogIGkgPT4KbiA9PgogIG4gPT4KICBnZXQgc2l6ZSgpCihhY2MsW25hbWUsdHlwZV0pID0+CiAgdG9KU09OKCkKKFtuYW1lLCBtZW1iZXJdKSA9PgpFbnVtRGVjbAogIGNvbnN0cnVjdG9yKG5vZGUsIGFzdCkKICBjaGlsZCA9PgooeyBuYW1lLCB0eXBlLCBpbm5lciB9KSA9PgogIHRvSlNPTigpClR5cGVkZWZEZWNsCiAgY29uc3RydWN0b3Iobm9kZSwgYXN0KQogIG4gPT4KKHYsIGspID0+CiAgbiA9PgogIG4gPT4KICBuID0+CiAgZ2V0IHNpemUoKQogIHRvSlNPTigpCkZpZWxkRGVjbAogIGNvbnN0cnVjdG9yKG5vZGUsIGFzdCkKICBuID0+CkZ1bmN0aW9uRGVjbAogIGNvbnN0cnVjdG9yKG5vZGUsIGFzdCkKICBjaGlsZCA9PgogIGNoaWxkID0+Cm4gPT4KKHsgbmFtZSwgdHlwZSB9KSA9PgogIHRvSlNPTigpClZhckRlY2wKICBjb25zdHJ1Y3Rvcihub2RlLCBhc3QpCiAgdG9KU09OKCkKQ2xhc3NEZWNsCkJ1aWx0aW5UeXBlCiAgY29uc3RydWN0b3Iobm9kZSwgYXN0KQpQb2ludGVyVHlwZQogIGNvbnN0cnVjdG9yKG5vZGUsIGFzdCkKICB0b0pTT04oKQpDb25zdGFudEFycmF5VHlwZQogIGNvbnN0cnVjdG9yKG5vZGUsIGFzdCkKICB0b0pTT04oKQpSYW5nZQogIGNvbnN0cnVjdG9yKGJlZ2luLCBlbmQpCiAgZ2V0IGJlZ2luKCkKICBzZXQgYmVnaW4odikKICBnZXQgZW5kKCkKICBzZXQgZW5kKHYpCiAgdG9TdHJpbmcob3B0cyA9IHsgcHJpbnRGaWxlOiB0cnVlIH0pCiAgZ2V0IGxlbmd0aCgpCiAgdG9BcnJheSgpCiAgdG9PYmplY3QoKQpSYW5nZQpMb2NhdGlvbgogIHN0YXRpYyBhdChmaWxlLCBvZmZzZXQpCiAgc3RhdGljIGZyb20obG9jKQogIGNvbnN0cnVjdG9yKGxvYykKICB1cGRhdGUob3RoZXIpCiAgZ2V0IGxpbmUoKQogIHNldCBsaW5lKHYpCiAgZ2V0IGNvbHVtbigpCiAgc2V0IGNvbHVtbih2KQogIGdldCBvZmZzZXQoKQogIHNldCBvZmZzZXQodikKKHQsIC4uLmMpID0+CidceDFiW20nIDogdCA9PgogIHRvU3RyaW5nKG9wdHMgPSB7IHByaW50RmlsZTogdHJ1ZSwgb25seU9mZnNldDogZmFsc2UgfSkKICB0b09iamVjdCgpCiAgbG9jYWxlQ29tcGFyZShvdGhlcikKVHlwZUZhY3Rvcnkobm9kZSwgYXN0LCBjYWNoZSA9IHRydWUpClNwYXduQ29tcGlsZXIoY29tcGlsZXIsIGlucHV0LCBvdXRmaWxlLCBhcmdzID0gW10pCiAgcCA9PgogIHAgPT4KICBsaW5lID0+CiAgbGluZSA9PgogIGxpbmUgPT4KUGlwZVJlYWRlcihmZCwgY2FsbGJhY2spCihyZXNvbHZlLCByZWplY3QpID0+CigpID0+CmRhdGEgPT4KUmVhZFBpcGUoZmQsIGNhbGxiYWNrKQpSZWFkT3V0cHV0KGZkKQpTb3VyY2VEZXBlbmRlbmNpZXMoLi4uYXJncykKQXN0RHVtcChjb21waWxlciwgc291cmNlLCBhcmdzLCBmb3JjZSkKICBzaXplKCkKICBqc29uKCkKICBkYXRhKCkKU2V0RmlsZSA9IGxvYyA9PgogIGZpbGVzKCkKICBuID0+CiAgZmlsZSA9PgogIHByZWQyID0gKHVzZWQsIGltcGxpY2l0KSA9Pgpub2RlID0+CiAgdHlwZXMoKQpuID0+CigpID0+Ckxpc3QKICBmdW5jdGlvbnMoKQpuID0+CigpID0+Cm4gPT4KTGlzdAogIG5hbWVzcGFjZXMoKQpuID0+Ckxpc3QKICBjbGFzc2VzKCkKICBwcmVkaWNhdGUgPSBuID0+Ckxpc3QKICB2YXJpYWJsZXMoKQogIG4gPT4KTGlzdAogIG5hbWVzKGRlcHRoID0gMSkKICBuID0+CiAgbiA9PgpOYW1lRm9yKGRlY2wsIGFzdCA9IHRoaXMuZGF0YSkKKHZhbHVlLCBrZXkpID0+Ck5vZGVUeXBlKG4pCiAgdCA9PgpuID0+Ck5vZGVOYW1lKG4sIG5hbWUpClJhd0xvY2F0aW9uKHBhdGgpClJhd1JhbmdlKHBhdGgpCkNvbXBsZXRlTG9jYXRpb24ocGF0aCkKICBsID0+CkNvbXBsZXRlUmFuZ2UocGF0aCkKICBsID0+CkdldExvYyhub2RlKQpHZXRUeXBlTm9kZShub2RlLCBhc3QgPSAkLmRhdGEpCiAgbm9kZSA9PgogIG5vZGUgPT4KR2V0VHlwZVN0cihub2RlKQogIGlubmVyID0+CiAgaW5uZXIgPT4KKFtuLCB0XSkgPT4KTm9kZUVycm9yCiAgY29uc3RydWN0b3IobWVzc2FnZSwgbm9kZSkKTm9kZUVycm9yCk5vZGVQcmludGVyKGFzdCkKICBwdXQoc3RyKQogIHRyaW0oKQogIHByaW50ZXIgPSBmdW5jdGlvbihub2RlKQogIGdldCgpCiAgdmFsdWUoKQogIHZhbHVlKG5vZGUpCiAgdG9TdHJpbmcoKQogIGkgPT4KTm9kZVByaW50ZXIKQWJpVGFnQXR0cihhYmlfdGFnX2F0dHIpCkFjY2Vzc1NwZWNEZWNsKGFjY2Vzc19zcGVjX2RlY2wpCkFsaWduZWRBdHRyKGFsaWduZWRfYXR0cikKQWx3YXlzSW5saW5lQXR0cihhbHdheXNfaW5saW5lX2F0dHIpCkFycmF5U3Vic2NyaXB0RXhwcihhcnJheV9zdWJzY3JpcHRfZXhwcikKQXNtTGFiZWxBdHRyKGFzbV9sYWJlbF9hdHRyKQpCaW5hcnlPcGVyYXRvcihiaW5hcnlfb3BlcmF0b3IpCkJsb2NrQ29tbWFuZENvbW1lbnQoYmxvY2tfY29tbWFuZF9jb21tZW50KQpCdWlsdGluQXR0cihidWlsdGluX2F0dHIpCkJyZWFrU3RtdChicmVha19zdG10KQpDYWxsRXhwcihjYWxsX2V4cHIpClJlY292ZXJ5RXhwcihyZWNvdmVyeV9leHByKQpDYXNlU3RtdChjYXNlX3N0bXQpCkNoYXJhY3RlckxpdGVyYWwoY2hhcmFjdGVyX2xpdGVyYWwpCkNvbXBvdW5kQXNzaWduT3BlcmF0b3IoY29tcG91bmRfYXNzaWduX29wZXJhdG9yKQpDb21wb3VuZFN0bXQoY29tcG91bmRfc3RtdCkKQ29uZGl0aW9uYWxPcGVyYXRvcihjb25kaXRpb25hbF9vcGVyYXRvcikKQ29uc3RhbnRFeHByKGNvbnN0YW50X2V4cHIpCkNvbnN0QXR0cihjb25zdF9hdHRyKQpDb250aW51ZVN0bXQoY29udGludWVfc3RtdCkKQ1N0eWxlQ2FzdEV4cHIoY3N0eWxlX2Nhc3RfZXhwcikKRGVjbFJlZkV4cHIoZGVjbF9yZWZfZXhwcikKRGVjbFN0bXQoZGVjbF9zdG10KQpEZWZhdWx0U3RtdChkZWZhdWx0X3N0bXQpCkRlcHJlY2F0ZWRBdHRyKGRlcHJlY2F0ZWRfYXR0cikKRG9TdG10KGRvX3N0bXQpCkVtcHR5RGVjbChlbXB0eV9kZWNsKQpFbnVtQ29uc3RhbnREZWNsKGVudW1fY29uc3RhbnRfZGVjbCkKRW51bURlY2woZW51bV9kZWNsKQpGaWVsZERlY2woZmllbGRfZGVjbCkKRmxvYXRpbmdMaXRlcmFsKGZsb2F0aW5nX2xpdGVyYWwpCkZvcm1hdEF0dHIoZm9ybWF0X2F0dHIpCkZvclN0bXQoZm9yX3N0bXQpCiAgbiA9PgpGdWxsQ29tbWVudChmdWxsX2NvbW1lbnQpCkZ1bmN0aW9uRGVjbChmdW5jdGlvbl9kZWNsKQogIG4gPT4KICBuID0+CkdvdG9TdG10KGdvdG9fc3RtdCkKbiA9PgpIVE1MRW5kVGFnQ29tbWVudChodG1sX2VuZF90YWdfY29tbWVudCkKSFRNTFN0YXJ0VGFnQ29tbWVudChodG1sX3N0YXJ0X3RhZ19jb21tZW50KQpJZlN0bXQoaWZfc3RtdCkKSW1wbGljaXRDYXN0RXhwcihpbXBsaWNpdF9jYXN0X2V4cHIpCkluaXRMaXN0RXhwcihpbml0X2xpc3RfZXhwcikKSW5saW5lQ29tbWFuZENvbW1lbnQoaW5saW5lX2NvbW1hbmRfY29tbWVudCkKSW50ZWdlckxpdGVyYWwoaW50ZWdlcl9saXRlcmFsKQpMYWJlbFN0bXQobGFiZWxfc3RtdCkKTWVtYmVyRXhwcihtZW1iZXJfZXhwcikKTm9uTnVsbEF0dHIobm9uX251bGxfYXR0cikKTm9UaHJvd0F0dHIobm9fdGhyb3dfYXR0cikKTnVsbFN0bXQobnVsbF9zdG10KQpQYXJhZ3JhcGhDb21tZW50KHBhcmFncmFwaF9jb21tZW50KQpQYXJhbUNvbW1hbmRDb21tZW50KHBhcmFtX2NvbW1hbmRfY29tbWVudCkKUGFyZW5FeHByKHBhcmVuX2V4cHIpClBhcmVuTGlzdEV4cHIocGFyZW5fbGlzdF9leHByKQpQYXJtVmFyRGVjbChwYXJtX3Zhcl9kZWNsKQpQdXJlQXR0cihwdXJlX2F0dHIpClJlY29yZERlY2wocmVjb3JkX2RlY2wpClJlc3RyaWN0QXR0cihyZXN0cmljdF9hdHRyKQpSZXR1cm5TdG10KHJldHVybl9zdG10KQpSZXR1cm5zVHdpY2VBdHRyKHJldHVybnNfdHdpY2VfYXR0cikKU3RyaW5nTGl0ZXJhbChzdHJpbmdfbGl0ZXJhbCkKU3dpdGNoU3RtdChzd2l0Y2hfc3RtdCkKVGV4dENvbW1lbnQodGV4dF9jb21tZW50KQpUcmFuc2xhdGlvblVuaXREZWNsKHRyYW5zbGF0aW9uX3VuaXRfZGVjbCkKVHlwZWRlZkRlY2wodHlwZWRlZl9kZWNsKQpVbmFyeUV4cHJPclR5cGVUcmFpdEV4cHIodW5hcnlfZXhwcl9vcl90eXBlX3RyYWl0X2V4cHIpClVuYXJ5T3BlcmF0b3IodW5hcnlfb3BlcmF0b3IpClVucmVzb2x2ZWRMb29rdXBFeHByKHVucmVzb2x2ZWRfbG9va3VwX2V4cHIpClVucmVzb2x2ZWRNZW1iZXJFeHByKHVucmVzb2x2ZWRfbWVtYmVyX2V4cHIpClZhckRlY2wodmFyX2RlY2wsIGJhc2VfdHlwZSkKKFtvZmZzZXQsIHN1YnNjcmlwdF0pID0+ClZlcmJhdGltQmxvY2tDb21tZW50KHZlcmJhdGltX2Jsb2NrX2NvbW1lbnQpClZlcmJhdGltQmxvY2tMaW5lQ29tbWVudCh2ZXJiYXRpbV9ibG9ja19saW5lX2NvbW1lbnQpCldhcm5VbnVzZWRSZXN1bHRBdHRyKHdhcm5fdW51c2VkX3Jlc3VsdF9hdHRyKQpXZWFrQXR0cih3ZWFrX2F0dHIpCldoaWxlU3RtdCh3aGlsZV9zdG10KQpPdmVycmlkZUF0dHIob3ZlcnJpZGVfYXR0cikKQWRkckxhYmVsRXhwcihhZGRyX2xhYmVsX2V4cHIpCkFsaWFzQXR0cihhbGlhc19hdHRyKQpBbGlnblZhbHVlQXR0cihhbGlnbl92YWx1ZV9hdHRyKQpBbGxvY1NpemVBdHRyKGFsbG9jX3NpemVfYXR0cikKQXJyYXlJbml0SW5kZXhFeHByKGFycmF5X2luaXRfaW5kZXhfZXhwcikKQXJyYXlJbml0TG9vcEV4cHIoYXJyYXlfaW5pdF9sb29wX2V4cHIpCkF0b21pY0V4cHIoYXRvbWljX2V4cHIpCkF0b21pY1R5cGUoYXRvbWljX3R5cGUpCkF1dG9UeXBlKGF1dG9fdHlwZSkKQnVpbHRpblRlbXBsYXRlRGVjbChidWlsdGluX3RlbXBsYXRlX2RlY2wpCkJ1aWx0aW5UeXBlKGJ1aWx0aW5fdHlwZSkKQ2FsbGJhY2tBdHRyKGNhbGxiYWNrX2F0dHIpCkNsYXNzVGVtcGxhdGVEZWNsKGNsYXNzX3RlbXBsYXRlX2RlY2wpCkNsYXNzVGVtcGxhdGVQYXJ0aWFsU3BlY2lhbGl6YXRpb25EZWNsKGNsYXNzX3RlbXBsYXRlX3BhcnRpYWxfc3BlY2lhbGl6YXRpb25fZGVjbCkKQ2xhc3NUZW1wbGF0ZVNwZWNpYWxpemF0aW9uRGVjbChjbGFzc190ZW1wbGF0ZV9zcGVjaWFsaXphdGlvbl9kZWNsKQpDb21wbGV4VHlwZShjb21wbGV4X3R5cGUpCkNvbXBvdW5kTGl0ZXJhbEV4cHIoY29tcG91bmRfbGl0ZXJhbF9leHByKQpDb25zdGFudEFycmF5VHlwZShjb25zdGFudF9hcnJheV90eXBlKQpDb25zdHJ1Y3RvclVzaW5nU2hhZG93RGVjbChjb25zdHJ1Y3Rvcl91c2luZ19zaGFkb3dfZGVjbCkKQ29udmVydFZlY3RvckV4cHIoY29udmVydF92ZWN0b3JfZXhwcikKRGVjYXllZFR5cGUoZGVjYXllZF90eXBlKQpEZWNsdHlwZVR5cGUoZGVjbHR5cGVfdHlwZSkKRGVwZW5kZW50TmFtZVR5cGUoZGVwZW5kZW50X25hbWVfdHlwZSkKRGVwZW5kZW50U2NvcGVEZWNsUmVmRXhwcihkZXBlbmRlbnRfc2NvcGVfZGVjbF9yZWZfZXhwcikKRGVwZW5kZW50U2l6ZWRBcnJheVR5cGUoZGVwZW5kZW50X3NpemVkX2FycmF5X3R5cGUpCkRlcGVuZGVudFRlbXBsYXRlU3BlY2lhbGl6YXRpb25UeXBlKGRlcGVuZGVudF90ZW1wbGF0ZV9zcGVjaWFsaXphdGlvbl90eXBlKQpFbGFib3JhdGVkVHlwZShlbGFib3JhdGVkX3R5cGUpCkVudW1UeXBlKGVudW1fdHlwZSkKRXhwcldpdGhDbGVhbnVwcyhleHByX3dpdGhfY2xlYW51cHMpCkZpbmFsQXR0cihmaW5hbF9hdHRyKQpGb3JtYXRBcmdBdHRyKGZvcm1hdF9hcmdfYXR0cikKRnJpZW5kRGVjbChmcmllbmRfZGVjbCkKRnVuY3Rpb25Ob1Byb3RvVHlwZShmdW5jdGlvbl9ub19wcm90b190eXBlKQpGdW5jdGlvblByb3RvVHlwZShmdW5jdGlvbl9wcm90b190eXBlKQpGdW5jdGlvblRlbXBsYXRlRGVjbChmdW5jdGlvbl90ZW1wbGF0ZV9kZWNsKQpHQ0NBc21TdG10KGdjY19hc21fc3RtdCkKR05VSW5saW5lQXR0cihnbnVfaW5saW5lX2F0dHIpCkdOVU51bGxFeHByKGdudV9udWxsX2V4cHIpCkltcGxpY2l0VmFsdWVJbml0RXhwcihpbXBsaWNpdF92YWx1ZV9pbml0X2V4cHIpCkluY29tcGxldGVBcnJheVR5cGUoaW5jb21wbGV0ZV9hcnJheV90eXBlKQpJbmRpcmVjdEZpZWxkRGVjbChpbmRpcmVjdF9maWVsZF9kZWNsKQpJbmRpcmVjdEdvdG9TdG10KGluZGlyZWN0X2dvdG9fc3RtdCkKSW5qZWN0ZWRDbGFzc05hbWVUeXBlKGluamVjdGVkX2NsYXNzX25hbWVfdHlwZSkKTGFtYmRhRXhwcihsYW1iZGFfZXhwcikKTGlua2FnZVNwZWNEZWNsKGxpbmthZ2Vfc3BlY19kZWNsKQpMVmFsdWVSZWZlcmVuY2VUeXBlKGxfdmFsdWVfcmVmZXJlbmNlX3R5cGUpCk1hdGVyaWFsaXplVGVtcG9yYXJ5RXhwcihtYXRlcmlhbGl6ZV90ZW1wb3JhcnlfZXhwcikKTWF4RmllbGRBbGlnbm1lbnRBdHRyKG1heF9maWVsZF9hbGlnbm1lbnRfYXR0cikKTWF5QWxpYXNBdHRyKG1heV9hbGlhc19hdHRyKQpNZW1iZXJQb2ludGVyVHlwZShtZW1iZXJfcG9pbnRlcl90eXBlKQpNaW5WZWN0b3JXaWR0aEF0dHIobWluX3ZlY3Rvcl93aWR0aF9hdHRyKQpNb2RlQXR0cihtb2RlX2F0dHIpCk5hbWVzcGFjZURlY2wobmFtZXNwYWNlX2RlY2wpCk5vRGVidWdBdHRyKG5vX2RlYnVnX2F0dHIpCk5vSW5saW5lQXR0cihub19pbmxpbmVfYXR0cikKTm9uVHlwZVRlbXBsYXRlUGFybURlY2wobm9uX3R5cGVfdGVtcGxhdGVfcGFybV9kZWNsKQpPZmZzZXRPZkV4cHIob2Zmc2V0X29mX2V4cHIpCk9wYXF1ZVZhbHVlRXhwcihvcGFxdWVfdmFsdWVfZXhwcikKT3duZXJBdHRyKG93bmVyX2F0dHIpClBhY2tlZEF0dHIocGFja2VkX2F0dHIpClBhY2tFeHBhbnNpb25FeHByKHBhY2tfZXhwYW5zaW9uX2V4cHIpClBhY2tFeHBhbnNpb25UeXBlKHBhY2tfZXhwYW5zaW9uX3R5cGUpClBhcmVuVHlwZShwYXJlbl90eXBlKQpQb2ludGVyQXR0cihwb2ludGVyX2F0dHIpClBvaW50ZXJUeXBlKHBvaW50ZXJfdHlwZSkKUHJlZGVmaW5lZEV4cHIocHJlZGVmaW5lZF9leHByKQpRdWFsVHlwZShxdWFsX3R5cGUpClJlY29yZFR5cGUocmVjb3JkX3R5cGUpClJldHVybnNOb25OdWxsQXR0cihyZXR1cm5zX25vbl9udWxsX2F0dHIpClJWYWx1ZVJlZmVyZW5jZVR5cGUocl92YWx1ZV9yZWZlcmVuY2VfdHlwZSkKU2VudGluZWxBdHRyKHNlbnRpbmVsX2F0dHIpClNodWZmbGVWZWN0b3JFeHByKHNodWZmbGVfdmVjdG9yX2V4cHIpClNpemVPZlBhY2tFeHByKHNpemVfb2ZfcGFja19leHByKQpTdGF0aWNBc3NlcnREZWNsKHN0YXRpY19hc3NlcnRfZGVjbCkKU3RtdEV4cHIoc3RtdF9leHByKQpTdWJzdE5vblR5cGVUZW1wbGF0ZVBhcm1FeHByKHN1YnN0X25vbl90eXBlX3RlbXBsYXRlX3Bhcm1fZXhwcikKU3Vic3RUZW1wbGF0ZVR5cGVQYXJtVHlwZShzdWJzdF90ZW1wbGF0ZV90eXBlX3Bhcm1fdHlwZSkKVGFyZ2V0QXR0cih0YXJnZXRfYXR0cikKVGVtcGxhdGVBcmd1bWVudCh0ZW1wbGF0ZV9hcmd1bWVudCkKVGVtcGxhdGVTcGVjaWFsaXphdGlvblR5cGUodGVtcGxhdGVfc3BlY2lhbGl6YXRpb25fdHlwZSkKVGVtcGxhdGVUZW1wbGF0ZVBhcm1EZWNsKHRlbXBsYXRlX3RlbXBsYXRlX3Bhcm1fZGVjbCkKVGVtcGxhdGVUeXBlUGFybURlY2wodGVtcGxhdGVfdHlwZV9wYXJtX2RlY2wpClRlbXBsYXRlVHlwZVBhcm1UeXBlKHRlbXBsYXRlX3R5cGVfcGFybV90eXBlKQpUUGFyYW1Db21tYW5kQ29tbWVudCh0X3BhcmFtX2NvbW1hbmRfY29tbWVudCkKVHlwZUFsaWFzRGVjbCh0eXBlX2FsaWFzX2RlY2wpClR5cGVBbGlhc1RlbXBsYXRlRGVjbCh0eXBlX2FsaWFzX3RlbXBsYXRlX2RlY2wpClR5cGVkZWZUeXBlKHR5cGVkZWZfdHlwZSkKVHlwZU9mRXhwclR5cGUodHlwZV9vZl9leHByX3R5cGUpClR5cGVUcmFpdEV4cHIodHlwZV90cmFpdF9leHByKQpVbmFyeVRyYW5zZm9ybVR5cGUodW5hcnlfdHJhbnNmb3JtX3R5cGUpClVucmVzb2x2ZWRVc2luZ1ZhbHVlRGVjbCh1bnJlc29sdmVkX3VzaW5nX3ZhbHVlX2RlY2wpClVudXNlZEF0dHIodW51c2VkX2F0dHIpClVzaW5nRGVjbCh1c2luZ19kZWNsKQpVc2luZ0RpcmVjdGl2ZURlY2wodXNpbmdfZGlyZWN0aXZlX2RlY2wpClVzaW5nU2hhZG93RGVjbCh1c2luZ19zaGFkb3dfZGVjbCkKVkFBcmdFeHByKHZhX2FyZ19leHByKQpWYXJUZW1wbGF0ZURlY2wodmFyX3RlbXBsYXRlX2RlY2wpClZlY3RvclR5cGUodmVjdG9yX3R5cGUpClZlcmJhdGltTGluZUNvbW1lbnQodmVyYmF0aW1fbGluZV9jb21tZW50KQpWaXNpYmlsaXR5QXR0cih2aXNpYmlsaXR5X2F0dHIpCldlYWtSZWZBdHRyKHdlYWtfcmVmX2F0dHIpCkNYWFJlY29yZERlY2woY3h4X3JlY29yZF9kZWNsKQpDWFhDb25zdHJ1Y3RvckRlY2woY3h4X2NvbnN0cnVjdG9yX2RlY2wpCiAgbiA9PgpDWFhDdG9ySW5pdGlhbGl6ZXIoY3h4X2N0b3JfaW5pdGlhbGl6ZXIpCkNYWERlcGVuZGVudFNjb3BlTWVtYmVyRXhwcihjeHhfZGVwZW5kZW50X3Njb3BlX21lbWJlcl9leHByKQpDWFhUaGlzRXhwcihjeHhfdGhpc19leHByKQpDWFhEZXN0cnVjdG9yRGVjbChjeHhfZGVzdHJ1Y3Rvcl9kZWNsKQogIG4gPT4KQ1hYTWV0aG9kRGVjbChjeHhfbWV0aG9kX2RlY2wpCiAgbiA9PgpDWFhTdGF0aWNDYXN0RXhwcihjeHhfc3RhdGljX2Nhc3RfZXhwcikKQ1hYVW5yZXNvbHZlZENvbnN0cnVjdEV4cHIoY3h4X3VucmVzb2x2ZWRfY29uc3RydWN0X2V4cHIpCkNYWE5ld0V4cHIoY3h4X25ld19leHByKQpDWFhEZWxldGVFeHByKGN4eF9kZWxldGVfZXhwcikKQ1hYQm9vbExpdGVyYWxFeHByKGN4eF9ib29sX2xpdGVyYWxfZXhwcikKQ1hYMTFOb1JldHVybkF0dHIoY3h4MTFfbm9fcmV0dXJuX2F0dHIpCkNYWEJpbmRUZW1wb3JhcnlFeHByKGN4eF9iaW5kX3RlbXBvcmFyeV9leHByKQpDWFhDYXRjaFN0bXQoY3h4X2NhdGNoX3N0bXQpCkNYWENvbnN0cnVjdEV4cHIoY3h4X2NvbnN0cnVjdF9leHByKQpDWFhDb252ZXJzaW9uRGVjbChjeHhfY29udmVyc2lvbl9kZWNsKQpDWFhEZWZhdWx0QXJnRXhwcihjeHhfZGVmYXVsdF9hcmdfZXhwcikKQ1hYRGVmYXVsdEluaXRFeHByKGN4eF9kZWZhdWx0X2luaXRfZXhwcikKQ1hYRm9yUmFuZ2VTdG10KGN4eF9mb3JfcmFuZ2Vfc3RtdCkKQ1hYRnVuY3Rpb25hbENhc3RFeHByKGN4eF9mdW5jdGlvbmFsX2Nhc3RfZXhwcikKQ1hYTWVtYmVyQ2FsbEV4cHIoY3h4X21lbWJlcl9jYWxsX2V4cHIpCkNYWE5vZXhjZXB0RXhwcihjeHhfbm9leGNlcHRfZXhwcikKQ1hYTnVsbFB0ckxpdGVyYWxFeHByKGN4eF9udWxsX3B0cl9saXRlcmFsX2V4cHIpCkNYWE9wZXJhdG9yQ2FsbEV4cHIoY3h4X29wZXJhdG9yX2NhbGxfZXhwcikKQ1hYUmVpbnRlcnByZXRDYXN0RXhwcihjeHhfcmVpbnRlcnByZXRfY2FzdF9leHByKQpDWFhTY2FsYXJWYWx1ZUluaXRFeHByKGN4eF9zY2FsYXJfdmFsdWVfaW5pdF9leHByKQpDWFhUZW1wb3JhcnlPYmplY3RFeHByKGN4eF90ZW1wb3Jhcnlfb2JqZWN0X2V4cHIpCkNYWFRyeVN0bXQoY3h4X3RyeV9zdG10KQpQcmludE5vZGUobm9kZSkKUHJpbnRBc3Qobm9kZSwgYXN0KQogIGdldCgpCiAgaXNOb2RlKG9iaikKR2V0VHlwZShuYW1lX29yX2lkLCBhc3QgPSAkLmRhdGEpCiAgbiA9Pgpub2RlID0+Cm5vZGUgPT4KICByID0+CkdldEZpZWxkcyhub2RlKQoodiwgaykgPT4KKFt2LCBwXSkgPT4KKFtsb2MsIHB0cl0pID0+CiAgaSA9PgpHZXRQYXJhbXMobm9kZSkKICBjaGlsZCA9PgpQYXRoUmVtb3ZlTG9jKHBhdGgpCiAgcCA9PgAAAAAAAAAA6CkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOgpAABGaWxlVGltZShmaWxlbmFtZSkKTmV3ZXIoZmlsZSwgLi4ub3RoZXIpCiAgb3RoZXIgPT4KT2xkZXIoZmlsZSwgb3RoZXIpCkdldFN1YnNjcmlwdHMoc3RyKQogIG0gPT4KVHJpbVN1YnNjcmlwdHMoc3RyLCBzdWIpCkxpc3QKICBjb25zdHJ1Y3RvciguLi5hcmdzKQogIGZpbHRlcihjYWxsYmFjaywgdGhpc0FyZyA9IG51bGwpCiAgY2FsbGJhY2sgPSBlbGVtID0+CiAgc2xpY2Uoc3RhcnQsIGVuZCkKICBnZXQgZmlyc3QoKQogIGVsZW0gPT4KICBlbnRyaWVzKCkKICBrZXlzKCkKICB2YWx1ZXMoKQogIHRvQXJyYXkoKQooYSwgbikgPT4KTGlzdApOb2RlCiAgY29uc3RydWN0b3IoYXN0KQogIHN0YXRpYyBnZXQoYXN0KQogIGdldCBhc3QoKQogIGdldCBpZCgpCiAgZ2V0IGxvYygpCiAgZ2V0IGZpbGUoKQoodixrKSA9PgoodixrKSA9PgogIGdldCByYW5nZSgpCiAgciA9PgogIHRvSlNPTihvYmopCihub2RlLCBhc3QpID0+ClBhdGhPZihub2RlLCBhc3QgPSAkLmRhdGEpCkhpZXIobm9kZV9vcl9wYXRoLCB0ID0gKHAsIGFzdCwgYWJvcnQpID0+IHAuCihhc3QpLCBhc3QgPSAkLmRhdGEpCiAgcCA9PgogIGFib3J0Rm4gPSAoKSA9PgpGaW5kVHlwZSh0eXBlTmFtZSwgYXN0ID0gJC5kYXRhKQooW3Rva10pID0+Cm4gPT4KICBub2RlID0+ClR5cGUKICBjb25zdHJ1Y3Rvcihub2RlLCBhc3QpCm4gPT4KICBuID0+CihuLCBwKSA9PgogIGdldCByZWdFeHAoKQogIGlzRW51bSgpCiAgaXNQb2ludGVyKCkKICBpc0Z1bmN0aW9uKCkKICBpc0FycmF5KCkKICBpc0ludGVnZXIoKQogIGFycmF5T2YoKQogIGdldCBzdWJzY3JpcHRzKCkKICB0cmltU3Vic2NyaXB0cygpCiAgZ2V0IHBvaW50ZXIoKQogIGdldFBvaW50ZXIoYXN0KQpuID0+CiAgZ2V0IHVuc2lnbmVkKCkKICBnZXQgc2lnbmVkKCkKICBpc0NvbXBvdW5kKCkKICBpc0Zsb2F0aW5nUG9pbnQoKQogIGdldCBhbGlhcygpCiAgZ2V0IGFsaWFzZXMoKQogIGlzRW51bSgpCiAgaXNTdHJpbmcoKQogIGdldCBmZmkoKQogIGdldCBzaXplKCkKICB0b0pTKCkKICB0b0pTT04ob2JqKQogIHN0YXRpYyBnZXQobmFtZV9vcl9pZCwgYXN0ID0gJC5kYXRhKQpub2RlID0+Cm5vZGUgPT4KUm91bmRUbyh2YWx1ZSwgYWxpZ24pClJlY29yZERlY2wKICBjb25zdHJ1Y3Rvcihub2RlLCBhc3QpCiAgY2hpbGQgPT4KICBjaGlsZCA9PgogIG5vZGUgPT4KKGFjYywgbm9kZSkgPT4KICBpID0+Cm4gPT4KICBuID0+CiAgZ2V0IHNpemUoKQooYWNjLFtuYW1lLHR5cGVdKSA9PgogIHRvSlNPTigpCihbbmFtZSwgbWVtYmVyXSkgPT4KRW51bURlY2wKICBjb25zdHJ1Y3Rvcihub2RlLCBhc3QpCiAgY2hpbGQgPT4KKHsgbmFtZSwgdHlwZSwgaW5uZXIgfSkgPT4KICB0b0pTT04oKQpUeXBlZGVmRGVjbAogIGNvbnN0cnVjdG9yKG5vZGUsIGFzdCkKICBuID0+Cih2LCBrKSA9PgogIG4gPT4KICBuID0+CiAgbiA9PgogIGdldCBzaXplKCkKICB0b0pTT04oKQpGaWVsZERlY2wKICBjb25zdHJ1Y3Rvcihub2RlLCBhc3QpCiAgbiA9PgpGdW5jdGlvbkRlY2wKICBjb25zdHJ1Y3Rvcihub2RlLCBhc3QpCiAgY2hpbGQgPT4KICBjaGlsZCA9PgpuID0+Cih7IG5hbWUsIHR5cGUgfSkgPT4KICB0b0pTT04oKQpWYXJEZWNsCiAgY29uc3RydWN0b3Iobm9kZSwgYXN0KQogIHRvSlNPTigpCkNsYXNzRGVjbApCdWlsdGluVHlwZQogIGNvbnN0cnVjdG9yKG5vZGUsIGFzdCkKUG9pbnRlclR5cGUKICBjb25zdHJ1Y3Rvcihub2RlLCBhc3QpCiAgdG9KU09OKCkKQ29uc3RhbnRBcnJheVR5cGUKICBjb25zdHJ1Y3Rvcihub2RlLCBhc3QpCiAgdG9KU09OKCkKUmFuZ2UKICBjb25zdHJ1Y3RvcihiZWdpbiwgZW5kKQogIGdldCBiZWdpbigpCiAgc2V0IGJlZ2luKHYpCiAgZ2V0IGVuZCgpCiAgc2V0IGVuZCh2KQogIHRvU3RyaW5nKG9wdHMgPSB7IHByaW50RmlsZTogdHJ1ZSB9KQogIGdldCBsZW5ndGgoKQogIHRvQXJyYXkoKQogIHRvT2JqZWN0KCkKUmFuZ2UKTG9jYXRpb24KICBzdGF0aWMgYXQoZmlsZSwgb2Zmc2V0KQogIHN0YXRpYyBmcm9tKGxvYykKICBjb25zdHJ1Y3Rvcihsb2MpCiAgdXBkYXRlKG90aGVyKQogIGdldCBsaW5lKCkKICBzZXQgbGluZSh2KQogIGdldCBjb2x1bW4oKQogIHNldCBjb2x1bW4odikKICBnZXQgb2Zmc2V0KCkKICBzZXQgb2Zmc2V0KHYpCih0LCAuLi5jKSA9PgonXHgxYlttJyA6IHQgPT4KICB0b1N0cmluZyhvcHRzID0geyBwcmludEZpbGU6IHRydWUsIG9ubHlPZmZzZXQ6IGZhbHNlIH0pCiAgdG9PYmplY3QoKQogIGxvY2FsZUNvbXBhcmUob3RoZXIpClR5cGVGYWN0b3J5KG5vZGUsIGFzdCwgY2FjaGUgPSB0cnVlKQpTcGF3bkNvbXBpbGVyKGNvbXBpbGVyLCBpbnB1dCwgb3V0ZmlsZSwgYXJncyA9IFtdKQogIHAgPT4KICBwID0+CiAgbGluZSA9PgogIGxpbmUgPT4KICBsaW5lID0+ClBpcGVSZWFkZXIoZmQsIGNhbGxiYWNrKQoocmVzb2x2ZSwgcmVqZWN0KSA9PgooKSA9PgpkYXRhID0+ClJlYWRQaXBlKGZkLCBjYWxsYmFjaykKUmVhZE91dHB1dChmZCkKU291cmNlRGVwZW5kZW5jaWVzKC4uLmFyZ3MpCkFzdER1bXAoY29tcGlsZXIsIHNvdXJjZSwgYXJncywgZm9yY2UpCiAgc2l6ZSgpCiAganNvbigpCiAgZGF0YSgpClNldEZpbGUgPSBsb2MgPT4KICBmaWxlcygpCiAgbiA9PgogIGZpbGUgPT4KICBwcmVkMiA9ICh1c2VkLCBpbXBsaWNpdCkgPT4Kbm9kZSA9PgogIHR5cGVzKCkKbiA9PgooKSA9PgpMaXN0CiAgZnVuY3Rpb25zKCkKbiA9PgooKSA9PgpuID0+Ckxpc3QKICBuYW1lc3BhY2VzKCkKbiA9PgpMaXN0CiAgY2xhc3NlcygpCiAgcHJlZGljYXRlID0gbiA9PgpMaXN0CiAgdmFyaWFibGVzKCkKICBuID0+Ckxpc3QKICBuYW1lcyhkZXB0aCA9IDEpCiAgbiA9PgogIG4gPT4KTmFtZUZvcihkZWNsLCBhc3QgPSB0aGlzLmRhdGEpCih2YWx1ZSwga2V5KSA9PgpOb2RlVHlwZShuKQogIHQgPT4KbiA9PgpOb2RlTmFtZShuLCBuYW1lKQpSYXdMb2NhdGlvbihwYXRoKQpSYXdSYW5nZShwYXRoKQpDb21wbGV0ZUxvY2F0aW9uKHBhdGgpCiAgbCA9PgpDb21wbGV0ZVJhbmdlKHBhdGgpCiAgbCA9PgpHZXRMb2Mobm9kZSkKR2V0VHlwZU5vZGUobm9kZSwgYXN0ID0gJC5kYXRhKQogIG5vZGUgPT4KICBub2RlID0+CkdldFR5cGVTdHIobm9kZSkKICBpbm5lciA9PgogIGlubmVyID0+CihbbiwgdF0pID0+Ck5vZGVFcnJvcgogIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIG5vZGUpCk5vZGVFcnJvcgpOb2RlUHJpbnRlcihhc3QpCiAgcHV0KHN0cikKICB0cmltKCkKICBwcmludGVyID0gZnVuY3Rpb24obm9kZSkKICBnZXQoKQogIHZhbHVlKCkKICB2YWx1ZShub2RlKQogIHRvU3RyaW5nKCkKICBpID0+Ck5vZGVQcmludGVyCkFiaVRhZ0F0dHIoYWJpX3RhZ19hdHRyKQpBY2Nlc3NTcGVjRGVjbChhY2Nlc3Nfc3BlY19kZWNsKQpBbGlnbmVkQXR0cihhbGlnbmVkX2F0dHIpCkFsd2F5c0lubGluZUF0dHIoYWx3YXlzX2lubGluZV9hdHRyKQpBcnJheVN1YnNjcmlwdEV4cHIoYXJyYXlfc3Vic2NyaXB0X2V4cHIpCkFzbUxhYmVsQXR0cihhc21fbGFiZWxfYXR0cikKQmluYXJ5T3BlcmF0b3IoYmluYXJ5X29wZXJhdG9yKQpCbG9ja0NvbW1hbmRDb21tZW50KGJsb2NrX2NvbW1hbmRfY29tbWVudCkKQnVpbHRpbkF0dHIoYnVpbHRpbl9hdHRyKQpCcmVha1N0bXQoYnJlYWtfc3RtdCkKQ2FsbEV4cHIoY2FsbF9leHByKQpSZWNvdmVyeUV4cHIocmVjb3ZlcnlfZXhwcikKQ2FzZVN0bXQoY2FzZV9zdG10KQpDaGFyYWN0ZXJMaXRlcmFsKGNoYXJhY3Rlcl9saXRlcmFsKQpDb21wb3VuZEFzc2lnbk9wZXJhdG9yKGNvbXBvdW5kX2Fzc2lnbl9vcGVyYXRvcikKQ29tcG91bmRTdG10KGNvbXBvdW5kX3N0bXQpCkNvbmRpdGlvbmFsT3BlcmF0b3IoY29uZGl0aW9uYWxfb3BlcmF0b3IpCkNvbnN0YW50RXhwcihjb25zdGFudF9leHByKQpDb25zdEF0dHIoY29uc3RfYXR0cikKQ29udGludWVTdG10KGNvbnRpbnVlX3N0bXQpCkNTdHlsZUNhc3RFeHByKGNzdHlsZV9jYXN0X2V4cHIpCkRlY2xSZWZFeHByKGRlY2xfcmVmX2V4cHIpCkRlY2xTdG10KGRlY2xfc3RtdCkKRGVmYXVsdFN0bXQoZGVmYXVsdF9zdG10KQpEZXByZWNhdGVkQXR0cihkZXByZWNhdGVkX2F0dHIpCkRvU3RtdChkb19zdG10KQpFbXB0eURlY2woZW1wdHlfZGVjbCkKRW51bUNvbnN0YW50RGVjbChlbnVtX2NvbnN0YW50X2RlY2wpCkVudW1EZWNsKGVudW1fZGVjbCkKRmllbGREZWNsKGZpZWxkX2RlY2wpCkZsb2F0aW5nTGl0ZXJhbChmbG9hdGluZ19saXRlcmFsKQpGb3JtYXRBdHRyKGZvcm1hdF9hdHRyKQpGb3JTdG10KGZvcl9zdG10KQogIG4gPT4KRnVsbENvbW1lbnQoZnVsbF9jb21tZW50KQpGdW5jdGlvbkRlY2woZnVuY3Rpb25fZGVjbCkKICBuID0+CiAgbiA9PgpHb3RvU3RtdChnb3RvX3N0bXQpCm4gPT4KSFRNTEVuZFRhZ0NvbW1lbnQoaHRtbF9lbmRfdGFnX2NvbW1lbnQpCkhUTUxTdGFydFRhZ0NvbW1lbnQoaHRtbF9zdGFydF90YWdfY29tbWVudCkKSWZTdG10KGlmX3N0bXQpCkltcGxpY2l0Q2FzdEV4cHIoaW1wbGljaXRfY2FzdF9leHByKQpJbml0TGlzdEV4cHIoaW5pdF9saXN0X2V4cHIpCklubGluZUNvbW1hbmRDb21tZW50KGlubGluZV9jb21tYW5kX2NvbW1lbnQpCkludGVnZXJMaXRlcmFsKGludGVnZXJfbGl0ZXJhbCkKTGFiZWxTdG10KGxhYmVsX3N0bXQpCk1lbWJlckV4cHIobWVtYmVyX2V4cHIpCk5vbk51bGxBdHRyKG5vbl9udWxsX2F0dHIpCk5vVGhyb3dBdHRyKG5vX3Rocm93X2F0dHIpCk51bGxTdG10KG51bGxfc3RtdCkKUGFyYWdyYXBoQ29tbWVudChwYXJhZ3JhcGhfY29tbWVudCkKUGFyYW1Db21tYW5kQ29tbWVudChwYXJhbV9jb21tYW5kX2NvbW1lbnQpClBhcmVuRXhwcihwYXJlbl9leHByKQpQYXJlbkxpc3RFeHByKHBhcmVuX2xpc3RfZXhwcikKUGFybVZhckRlY2wocGFybV92YXJfZGVjbCkKUHVyZUF0dHIocHVyZV9hdHRyKQpSZWNvcmREZWNsKHJlY29yZF9kZWNsKQpSZXN0cmljdEF0dHIocmVzdHJpY3RfYXR0cikKUmV0dXJuU3RtdChyZXR1cm5fc3RtdCkKUmV0dXJuc1R3aWNlQXR0cihyZXR1cm5zX3R3aWNlX2F0dHIpClN0cmluZ0xpdGVyYWwoc3RyaW5nX2xpdGVyYWwpClN3aXRjaFN0bXQoc3dpdGNoX3N0bXQpClRleHRDb21tZW50KHRleHRfY29tbWVudCkKVHJhbnNsYXRpb25Vbml0RGVjbCh0cmFuc2xhdGlvbl91bml0X2RlY2wpClR5cGVkZWZEZWNsKHR5cGVkZWZfZGVjbCkKVW5hcnlFeHByT3JUeXBlVHJhaXRFeHByKHVuYXJ5X2V4cHJfb3JfdHlwZV90cmFpdF9leHByKQpVbmFyeU9wZXJhdG9yKHVuYXJ5X29wZXJhdG9yKQpVbnJlc29sdmVkTG9va3VwRXhwcih1bnJlc29sdmVkX2xvb2t1cF9leHByKQpVbnJlc29sdmVkTWVtYmVyRXhwcih1bnJlc29sdmVkX21lbWJlcl9leHByKQpWYXJEZWNsKHZhcl9kZWNsLCBiYXNlX3R5cGUpCihbb2Zmc2V0LCBzdWJzY3JpcHRdKSA9PgpWZXJiYXRpbUJsb2NrQ29tbWVudCh2ZXJiYXRpbV9ibG9ja19jb21tZW50KQpWZXJiYXRpbUJsb2NrTGluZUNvbW1lbnQodmVyYmF0aW1fYmxvY2tfbGluZV9jb21tZW50KQpXYXJuVW51c2VkUmVzdWx0QXR0cih3YXJuX3VudXNlZF9yZXN1bHRfYXR0cikKV2Vha0F0dHIod2Vha19hdHRyKQpXaGlsZVN0bXQod2hpbGVfc3RtdCkKT3ZlcnJpZGVBdHRyKG92ZXJyaWRlX2F0dHIpCkFkZHJMYWJlbEV4cHIoYWRkcl9sYWJlbF9leHByKQpBbGlhc0F0dHIoYWxpYXNfYXR0cikKQWxpZ25WYWx1ZUF0dHIoYWxpZ25fdmFsdWVfYXR0cikKQWxsb2NTaXplQXR0cihhbGxvY19zaXplX2F0dHIpCkFycmF5SW5pdEluZGV4RXhwcihhcnJheV9pbml0X2luZGV4X2V4cHIpCkFycmF5SW5pdExvb3BFeHByKGFycmF5X2luaXRfbG9vcF9leHByKQpBdG9taWNFeHByKGF0b21pY19leHByKQpBdG9taWNUeXBlKGF0b21pY190eXBlKQpBdXRvVHlwZShhdXRvX3R5cGUpCkJ1aWx0aW5UZW1wbGF0ZURlY2woYnVpbHRpbl90ZW1wbGF0ZV9kZWNsKQpCdWlsdGluVHlwZShidWlsdGluX3R5cGUpCkNhbGxiYWNrQXR0cihjYWxsYmFja19hdHRyKQpDbGFzc1RlbXBsYXRlRGVjbChjbGFzc190ZW1wbGF0ZV9kZWNsKQpDbGFzc1RlbXBsYXRlUGFydGlhbFNwZWNpYWxpemF0aW9uRGVjbChjbGFzc190ZW1wbGF0ZV9wYXJ0aWFsX3NwZWNpYWxpemF0aW9uX2RlY2wpCkNsYXNzVGVtcGxhdGVTcGVjaWFsaXphdGlvbkRlY2woY2xhc3NfdGVtcGxhdGVfc3BlY2lhbGl6YXRpb25fZGVjbCkKQ29tcGxleFR5cGUoY29tcGxleF90eXBlKQpDb21wb3VuZExpdGVyYWxFeHByKGNvbXBvdW5kX2xpdGVyYWxfZXhwcikKQ29uc3RhbnRBcnJheVR5cGUoY29uc3RhbnRfYXJyYXlfdHlwZSkKQ29uc3RydWN0b3JVc2luZ1NoYWRvd0RlY2woY29uc3RydWN0b3JfdXNpbmdfc2hhZG93X2RlY2wpCkNvbnZlcnRWZWN0b3JFeHByKGNvbnZlcnRfdmVjdG9yX2V4cHIpCkRlY2F5ZWRUeXBlKGRlY2F5ZWRfdHlwZSkKRGVjbHR5cGVUeXBlKGRlY2x0eXBlX3R5cGUpCkRlcGVuZGVudE5hbWVUeXBlKGRlcGVuZGVudF9uYW1lX3R5cGUpCkRlcGVuZGVudFNjb3BlRGVjbFJlZkV4cHIoZGVwZW5kZW50X3Njb3BlX2RlY2xfcmVmX2V4cHIpCkRlcGVuZGVudFNpemVkQXJyYXlUeXBlKGRlcGVuZGVudF9zaXplZF9hcnJheV90eXBlKQpEZXBlbmRlbnRUZW1wbGF0ZVNwZWNpYWxpemF0aW9uVHlwZShkZXBlbmRlbnRfdGVtcGxhdGVfc3BlY2lhbGl6YXRpb25fdHlwZSkKRWxhYm9yYXRlZFR5cGUoZWxhYm9yYXRlZF90eXBlKQpFbnVtVHlwZShlbnVtX3R5cGUpCkV4cHJXaXRoQ2xlYW51cHMoZXhwcl93aXRoX2NsZWFudXBzKQpGaW5hbEF0dHIoZmluYWxfYXR0cikKRm9ybWF0QXJnQXR0cihmb3JtYXRfYXJnX2F0dHIpCkZyaWVuZERlY2woZnJpZW5kX2RlY2wpCkZ1bmN0aW9uTm9Qcm90b1R5cGUoZnVuY3Rpb25fbm9fcHJvdG9fdHlwZSkKRnVuY3Rpb25Qcm90b1R5cGUoZnVuY3Rpb25fcHJvdG9fdHlwZSkKRnVuY3Rpb25UZW1wbGF0ZURlY2woZnVuY3Rpb25fdGVtcGxhdGVfZGVjbCkKR0NDQXNtU3RtdChnY2NfYXNtX3N0bXQpCkdOVUlubGluZUF0dHIoZ251X2lubGluZV9hdHRyKQpHTlVOdWxsRXhwcihnbnVfbnVsbF9leHByKQpJbXBsaWNpdFZhbHVlSW5pdEV4cHIoaW1wbGljaXRfdmFsdWVfaW5pdF9leHByKQpJbmNvbXBsZXRlQXJyYXlUeXBlKGluY29tcGxldGVfYXJyYXlfdHlwZSkKSW5kaXJlY3RGaWVsZERlY2woaW5kaXJlY3RfZmllbGRfZGVjbCkKSW5kaXJlY3RHb3RvU3RtdChpbmRpcmVjdF9nb3RvX3N0bXQpCkluamVjdGVkQ2xhc3NOYW1lVHlwZShpbmplY3RlZF9jbGFzc19uYW1lX3R5cGUpCkxhbWJkYUV4cHIobGFtYmRhX2V4cHIpCkxpbmthZ2VTcGVjRGVjbChsaW5rYWdlX3NwZWNfZGVjbCkKTFZhbHVlUmVmZXJlbmNlVHlwZShsX3ZhbHVlX3JlZmVyZW5jZV90eXBlKQpNYXRlcmlhbGl6ZVRlbXBvcmFyeUV4cHIobWF0ZXJpYWxpemVfdGVtcG9yYXJ5X2V4cHIpCk1heEZpZWxkQWxpZ25tZW50QXR0cihtYXhfZmllbGRfYWxpZ25tZW50X2F0dHIpCk1heUFsaWFzQXR0cihtYXlfYWxpYXNfYXR0cikKTWVtYmVyUG9pbnRlclR5cGUobWVtYmVyX3BvaW50ZXJfdHlwZSkKTWluVmVjdG9yV2lkdGhBdHRyKG1pbl92ZWN0b3Jfd2lkdGhfYXR0cikKTW9kZUF0dHIobW9kZV9hdHRyKQpOYW1lc3BhY2VEZWNsKG5hbWVzcGFjZV9kZWNsKQpOb0RlYnVnQXR0cihub19kZWJ1Z19hdHRyKQpOb0lubGluZUF0dHIobm9faW5saW5lX2F0dHIpCk5vblR5cGVUZW1wbGF0ZVBhcm1EZWNsKG5vbl90eXBlX3RlbXBsYXRlX3Bhcm1fZGVjbCkKT2Zmc2V0T2ZFeHByKG9mZnNldF9vZl9leHByKQpPcGFxdWVWYWx1ZUV4cHIob3BhcXVlX3ZhbHVlX2V4cHIpCk93bmVyQXR0cihvd25lcl9hdHRyKQpQYWNrZWRBdHRyKHBhY2tlZF9hdHRyKQpQYWNrRXhwYW5zaW9uRXhwcihwYWNrX2V4cGFuc2lvbl9leHByKQpQYWNrRXhwYW5zaW9uVHlwZShwYWNrX2V4cGFuc2lvbl90eXBlKQpQYXJlblR5cGUocGFyZW5fdHlwZSkKUG9pbnRlckF0dHIocG9pbnRlcl9hdHRyKQpQb2ludGVyVHlwZShwb2ludGVyX3R5cGUpClByZWRlZmluZWRFeHByKHByZWRlZmluZWRfZXhwcikKUXVhbFR5cGUocXVhbF90eXBlKQpSZWNvcmRUeXBlKHJlY29yZF90eXBlKQpSZXR1cm5zTm9uTnVsbEF0dHIocmV0dXJuc19ub25fbnVsbF9hdHRyKQpSVmFsdWVSZWZlcmVuY2VUeXBlKHJfdmFsdWVfcmVmZXJlbmNlX3R5cGUpClNlbnRpbmVsQXR0cihzZW50aW5lbF9hdHRyKQpTaHVmZmxlVmVjdG9yRXhwcihzaHVmZmxlX3ZlY3Rvcl9leHByKQpTaXplT2ZQYWNrRXhwcihzaXplX29mX3BhY2tfZXhwcikKU3RhdGljQXNzZXJ0RGVjbChzdGF0aWNfYXNzZXJ0X2RlY2wpClN0bXRFeHByKHN0bXRfZXhwcikKU3Vic3ROb25UeXBlVGVtcGxhdGVQYXJtRXhwcihzdWJzdF9ub25fdHlwZV90ZW1wbGF0ZV9wYXJtX2V4cHIpClN1YnN0VGVtcGxhdGVUeXBlUGFybVR5cGUoc3Vic3RfdGVtcGxhdGVfdHlwZV9wYXJtX3R5cGUpClRhcmdldEF0dHIodGFyZ2V0X2F0dHIpClRlbXBsYXRlQXJndW1lbnQodGVtcGxhdGVfYXJndW1lbnQpClRlbXBsYXRlU3BlY2lhbGl6YXRpb25UeXBlKHRlbXBsYXRlX3NwZWNpYWxpemF0aW9uX3R5cGUpClRlbXBsYXRlVGVtcGxhdGVQYXJtRGVjbCh0ZW1wbGF0ZV90ZW1wbGF0ZV9wYXJtX2RlY2wpClRlbXBsYXRlVHlwZVBhcm1EZWNsKHRlbXBsYXRlX3R5cGVfcGFybV9kZWNsKQpUZW1wbGF0ZVR5cGVQYXJtVHlwZSh0ZW1wbGF0ZV90eXBlX3Bhcm1fdHlwZSkKVFBhcmFtQ29tbWFuZENvbW1lbnQodF9wYXJhbV9jb21tYW5kX2NvbW1lbnQpClR5cGVBbGlhc0RlY2wodHlwZV9hbGlhc19kZWNsKQpUeXBlQWxpYXNUZW1wbGF0ZURlY2wodHlwZV9hbGlhc190ZW1wbGF0ZV9kZWNsKQpUeXBlZGVmVHlwZSh0eXBlZGVmX3R5cGUpClR5cGVPZkV4cHJUeXBlKHR5cGVfb2ZfZXhwcl90eXBlKQpUeXBlVHJhaXRFeHByKHR5cGVfdHJhaXRfZXhwcikKVW5hcnlUcmFuc2Zvcm1UeXBlKHVuYXJ5X3RyYW5zZm9ybV90eXBlKQpVbnJlc29sdmVkVXNpbmdWYWx1ZURlY2wodW5yZXNvbHZlZF91c2luZ192YWx1ZV9kZWNsKQpVbnVzZWRBdHRyKHVudXNlZF9hdHRyKQpVc2luZ0RlY2wodXNpbmdfZGVjbCkKVXNpbmdEaXJlY3RpdmVEZWNsKHVzaW5nX2RpcmVjdGl2ZV9kZWNsKQpVc2luZ1NoYWRvd0RlY2wodXNpbmdfc2hhZG93X2RlY2wpClZBQXJnRXhwcih2YV9hcmdfZXhwcikKVmFyVGVtcGxhdGVEZWNsKHZhcl90ZW1wbGF0ZV9kZWNsKQpWZWN0b3JUeXBlKHZlY3Rvcl90eXBlKQpWZXJiYXRpbUxpbmVDb21tZW50KHZlcmJhdGltX2xpbmVfY29tbWVudCkKVmlzaWJpbGl0eUF0dHIodmlzaWJpbGl0eV9hdHRyKQpXZWFrUmVmQXR0cih3ZWFrX3JlZl9hdHRyKQpDWFhSZWNvcmREZWNsKGN4eF9yZWNvcmRfZGVjbCkKQ1hYQ29uc3RydWN0b3JEZWNsKGN4eF9jb25zdHJ1Y3Rvcl9kZWNsKQogIG4gPT4KQ1hYQ3RvckluaXRpYWxpemVyKGN4eF9jdG9yX2luaXRpYWxpemVyKQpDWFhEZXBlbmRlbnRTY29wZU1lbWJlckV4cHIoY3h4X2RlcGVuZGVudF9zY29wZV9tZW1iZXJfZXhwcikKQ1hYVGhpc0V4cHIoY3h4X3RoaXNfZXhwcikKQ1hYRGVzdHJ1Y3RvckRlY2woY3h4X2Rlc3RydWN0b3JfZGVjbCkKICBuID0+CkNYWE1ldGhvZERlY2woY3h4X21ldGhvZF9kZWNsKQogIG4gPT4KQ1hYU3RhdGljQ2FzdEV4cHIoY3h4X3N0YXRpY19jYXN0X2V4cHIpCkNYWFVucmVzb2x2ZWRDb25zdHJ1Y3RFeHByKGN4eF91bnJlc29sdmVkX2NvbnN0cnVjdF9leHByKQpDWFhOZXdFeHByKGN4eF9uZXdfZXhwcikKQ1hYRGVsZXRlRXhwcihjeHhfZGVsZXRlX2V4cHIpCkNYWEJvb2xMaXRlcmFsRXhwcihjeHhfYm9vbF9saXRlcmFsX2V4cHIpCkNYWDExTm9SZXR1cm5BdHRyKGN4eDExX25vX3JldHVybl9hdHRyKQpDWFhCaW5kVGVtcG9yYXJ5RXhwcihjeHhfYmluZF90ZW1wb3JhcnlfZXhwcikKQ1hYQ2F0Y2hTdG10KGN4eF9jYXRjaF9zdG10KQpDWFhDb25zdHJ1Y3RFeHByKGN4eF9jb25zdHJ1Y3RfZXhwcikKQ1hYQ29udmVyc2lvbkRlY2woY3h4X2NvbnZlcnNpb25fZGVjbCkKQ1hYRGVmYXVsdEFyZ0V4cHIoY3h4X2RlZmF1bHRfYXJnX2V4cHIpCkNYWERlZmF1bHRJbml0RXhwcihjeHhfZGVmYXVsdF9pbml0X2V4cHIpCkNYWEZvclJhbmdlU3RtdChjeHhfZm9yX3JhbmdlX3N0bXQpCkNYWEZ1bmN0aW9uYWxDYXN0RXhwcihjeHhfZnVuY3Rpb25hbF9jYXN0X2V4cHIpCkNYWE1lbWJlckNhbGxFeHByKGN4eF9tZW1iZXJfY2FsbF9leHByKQpDWFhOb2V4Y2VwdEV4cHIoY3h4X25vZXhjZXB0X2V4cHIpCkNYWE51bGxQdHJMaXRlcmFsRXhwcihjeHhfbnVsbF9wdHJfbGl0ZXJhbF9leHByKQpDWFhPcGVyYXRvckNhbGxFeHByKGN4eF9vcGVyYXRvcl9jYWxsX2V4cHIpCkNYWFJlaW50ZXJwcmV0Q2FzdEV4cHIoY3h4X3JlaW50ZXJwcmV0X2Nhc3RfZXhwcikKQ1hYU2NhbGFyVmFsdWVJbml0RXhwcihjeHhfc2NhbGFyX3ZhbHVlX2luaXRfZXhwcikKQ1hYVGVtcG9yYXJ5T2JqZWN0RXhwcihjeHhfdGVtcG9yYXJ5X29iamVjdF9leHByKQpDWFhUcnlTdG10KGN4eF90cnlfc3RtdCkKUHJpbnROb2RlKG5vZGUpClByaW50QXN0KG5vZGUsIGFzdCkKICBnZXQoKQogIGlzTm9kZShvYmopCkdldFR5cGUobmFtZV9vcl9pZCwgYXN0ID0gJC5kYXRhKQogIG4gPT4Kbm9kZSA9Pgpub2RlID0+CiAgciA9PgpHZXRGaWVsZHMobm9kZSkKKHYsIGspID0+CihbdiwgcF0pID0+CihbbG9jLCBwdHJdKSA9PgogIGkgPT4KR2V0UGFyYW1zKG5vZGUpCiAgY2hpbGQgPT4KUGF0aFJlbW92ZUxvYyhwYXRoKQogIHAgPT4AAAAAAAAAAOgpAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADoKQAARmlsZVRpbWUoZmlsZW5hbWUpCk5ld2VyKGZpbGUsIC4uLm90aGVyKQogIG90aGVyID0+Ck9sZGVyKGZpbGUsIG90aGVyKQpHZXRTdWJzY3JpcHRzKHN0cikKICBtID0+ClRyaW1TdWJzY3JpcHRzKHN0ciwgc3ViKQpMaXN0CiAgY29uc3RydWN0b3IoLi4uYXJncykKICBmaWx0ZXIoY2FsbGJhY2ssIHRoaXNBcmcgPSBudWxsKQogIGNhbGxiYWNrID0gZWxlbSA9PgogIHNsaWNlKHN0YXJ0LCBlbmQpCiAgZ2V0IGZpcnN0KCkKICBlbGVtID0+CiAgZW50cmllcygpCiAga2V5cygpCiAgdmFsdWVzKCkKICB0b0FycmF5KCkKKGEsIG4pID0+Ckxpc3QKTm9kZQogIGNvbnN0cnVjdG9yKGFzdCkKICBzdGF0aWMgZ2V0KGFzdCkKICBnZXQgYXN0KCkKICBnZXQgaWQoKQogIGdldCBsb2MoKQogIGdldCBmaWxlKCkKKHYsaykgPT4KKHYsaykgPT4KICBnZXQgcmFuZ2UoKQogIHIgPT4KICB0b0pTT04ob2JqKQoobm9kZSwgYXN0KSA9PgpQYXRoT2Yobm9kZSwgYXN0ID0gJC5kYXRhKQpIaWVyKG5vZGVfb3JfcGF0aCwgdCA9IChwLCBhc3QsIGFib3J0KSA9PiBwLgooYXN0KSwgYXN0ID0gJC5kYXRhKQogIHAgPT4KICBhYm9ydEZuID0gKCkgPT4KRmluZFR5cGUodHlwZU5hbWUsIGFzdCA9ICQuZGF0YSkKKFt0b2tdKSA9PgpuID0+CiAgbm9kZSA9PgpUeXBlCiAgY29uc3RydWN0b3Iobm9kZSwgYXN0KQpuID0+CiAgbiA9PgoobiwgcCkgPT4KICBnZXQgcmVnRXhwKCkKICBpc0VudW0oKQogIGlzUG9pbnRlcigpCiAgaXNGdW5jdGlvbigpCiAgaXNBcnJheSgpCiAgaXNJbnRlZ2VyKCkKICBhcnJheU9mKCkKICBnZXQgc3Vic2NyaXB0cygpCiAgdHJpbVN1YnNjcmlwdHMoKQogIGdldCBwb2ludGVyKCkKICBnZXRQb2ludGVyKGFzdCkKbiA9PgogIGdldCB1bnNpZ25lZCgpCiAgZ2V0IHNpZ25lZCgpCiAgaXNDb21wb3VuZCgpCiAgaXNGbG9hdGluZ1BvaW50KCkKICBnZXQgYWxpYXMoKQogIGdldCBhbGlhc2VzKCkKICBpc0VudW0oKQogIGlzU3RyaW5nKCkKICBnZXQgZmZpKCkKICBnZXQgc2l6ZSgpCiAgdG9KUygpCiAgdG9KU09OKG9iaikKICBzdGF0aWMgZ2V0KG5hbWVfb3JfaWQsIGFzdCA9ICQuZGF0YSkKbm9kZSA9Pgpub2RlID0+ClJvdW5kVG8odmFsdWUsIGFsaWduKQpSZWNvcmREZWNsCiAgY29uc3RydWN0b3Iobm9kZSwgYXN0KQogIGNoaWxkID0+CiAgY2hpbGQgPT4KICBub2RlID0+CihhY2MsIG5vZGUpID0+CiAgaSA9PgpuID0+CiAgbiA9PgogIGdldCBzaXplKCkKKGFjYyxbbmFtZSx0eXBlXSkgPT4KICB0b0pTT04oKQooW25hbWUsIG1lbWJlcl0pID0+CkVudW1EZWNsCiAgY29uc3RydWN0b3Iobm9kZSwgYXN0KQogIGNoaWxkID0+Cih7IG5hbWUsIHR5cGUsIGlubmVyIH0pID0+CiAgdG9KU09OKCkKVHlwZWRlZkRlY2wKICBjb25zdHJ1Y3Rvcihub2RlLCBhc3QpCiAgbiA9PgoodiwgaykgPT4KICBuID0+CiAgbiA9PgogIG4gPT4KICBnZXQgc2l6ZSgpCiAgdG9KU09OKCkKRmllbGREZWNsCiAgY29uc3RydWN0b3Iobm9kZSwgYXN0KQogIG4gPT4KRnVuY3Rpb25EZWNsCiAgY29uc3RydWN0b3Iobm9kZSwgYXN0KQogIGNoaWxkID0+CiAgY2hpbGQgPT4KbiA9PgooeyBuYW1lLCB0eXBlIH0pID0+CiAgdG9KU09OKCkKVmFyRGVjbAogIGNvbnN0cnVjdG9yKG5vZGUsIGFzdCkKICB0b0pTT04oKQpDbGFzc0RlY2wKQnVpbHRpblR5cGUKICBjb25zdHJ1Y3Rvcihub2RlLCBhc3QpClBvaW50ZXJUeXBlCiAgY29uc3RydWN0b3Iobm9kZSwgYXN0KQogIHRvSlNPTigpCkNvbnN0YW50QXJyYXlUeXBlCiAgY29uc3RydWN0b3Iobm9kZSwgYXN0KQogIHRvSlNPTigpClJhbmdlCiAgY29uc3RydWN0b3IoYmVnaW4sIGVuZCkKICBnZXQgYmVnaW4oKQogIHNldCBiZWdpbih2KQogIGdldCBlbmQoKQogIHNldCBlbmQodikKICB0b1N0cmluZyhvcHRzID0geyBwcmludEZpbGU6IHRydWUgfSkKICBnZXQgbGVuZ3RoKCkKICB0b0FycmF5KCkKICB0b09iamVjdCgpClJhbmdlCkxvY2F0aW9uCiAgc3RhdGljIGF0KGZpbGUsIG9mZnNldCkKICBzdGF0aWMgZnJvbShsb2MpCiAgY29uc3RydWN0b3IobG9jKQogIHVwZGF0ZShvdGhlcikKICBnZXQgbGluZSgpCiAgc2V0IGxpbmUodikKICBnZXQgY29sdW1uKCkKICBzZXQgY29sdW1uKHYpCiAgZ2V0IG9mZnNldCgpCiAgc2V0IG9mZnNldCh2KQoodCwgLi4uYykgPT4KJ1x4MWJbbScgOiB0ID0+CiAgdG9TdHJpbmcob3B0cyA9IHsgcHJpbnRGaWxlOiB0cnVlLCBvbmx5T2Zmc2V0OiBmYWxzZSB9KQogIHRvT2JqZWN0KCkKICBsb2NhbGVDb21wYXJlKG90aGVyKQpUeXBlRmFjdG9yeShub2RlLCBhc3QsIGNhY2hlID0gdHJ1ZSkKU3Bhd25Db21waWxlcihjb21waWxlciwgaW5wdXQsIG91dGZpbGUsIGFyZ3MgPSBbXSkKICBwID0+CiAgcCA9PgogIGxpbmUgPT4KICBsaW5lID0+CiAgbGluZSA9PgpQaXBlUmVhZGVyKGZkLCBjYWxsYmFjaykKKHJlc29sdmUsIHJlamVjdCkgPT4KKCkgPT4KZGF0YSA9PgpSZWFkUGlwZShmZCwgY2FsbGJhY2spClJlYWRPdXRwdXQoZmQpClNvdXJjZURlcGVuZGVuY2llcyguLi5hcmdzKQpBc3REdW1wKGNvbXBpbGVyLCBzb3VyY2UsIGFyZ3MsIGZvcmNlKQogIHNpemUoKQogIGpzb24oKQogIGRhdGEoKQpTZXRGaWxlID0gbG9jID0+CiAgZmlsZXMoKQogIG4gPT4KICBmaWxlID0+CiAgcHJlZDIgPSAodXNlZCwgaW1wbGljaXQpID0+Cm5vZGUgPT4KICB0eXBlcygpCm4gPT4KKCkgPT4KTGlzdAogIGZ1bmN0aW9ucygpCm4gPT4KKCkgPT4KbiA9PgpMaXN0CiAgbmFtZXNwYWNlcygpCm4gPT4KTGlzdAogIGNsYXNzZXMoKQogIHByZWRpY2F0ZSA9IG4gPT4KTGlzdAogIHZhcmlhYmxlcygpCiAgbiA9PgpMaXN0CiAgbmFtZXMoZGVwdGggPSAxKQogIG4gPT4KICBuID0+Ck5hbWVGb3IoZGVjbCwgYXN0ID0gdGhpcy5kYXRhKQoodmFsdWUsIGtleSkgPT4KTm9kZVR5cGUobikKICB0ID0+Cm4gPT4KTm9kZU5hbWUobiwgbmFtZSkKUmF3TG9jYXRpb24ocGF0aCkKUmF3UmFuZ2UocGF0aCkKQ29tcGxldGVMb2NhdGlvbihwYXRoKQogIGwgPT4KQ29tcGxldGVSYW5nZShwYXRoKQogIGwgPT4KR2V0TG9jKG5vZGUpCkdldFR5cGVOb2RlKG5vZGUsIGFzdCA9ICQuZGF0YSkKICBub2RlID0+CiAgbm9kZSA9PgpHZXRUeXBlU3RyKG5vZGUpCiAgaW5uZXIgPT4KICBpbm5lciA9PgooW24sIHRdKSA9PgpOb2RlRXJyb3IKICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBub2RlKQpOb2RlRXJyb3IKTm9kZVByaW50ZXIoYXN0KQogIHB1dChzdHIpCiAgdHJpbSgpCiAgcHJpbnRlciA9IGZ1bmN0aW9uKG5vZGUpCiAgZ2V0KCkKICB2YWx1ZSgpCiAgdmFsdWUobm9kZSkKICB0b1N0cmluZygpCiAgaSA9PgpOb2RlUHJpbnRlcgpBYmlUYWdBdHRyKGFiaV90YWdfYXR0cikKQWNjZXNzU3BlY0RlY2woYWNjZXNzX3NwZWNfZGVjbCkKQWxpZ25lZEF0dHIoYWxpZ25lZF9hdHRyKQpBbHdheXNJbmxpbmVBdHRyKGFsd2F5c19pbmxpbmVfYXR0cikKQXJyYXlTdWJzY3JpcHRFeHByKGFycmF5X3N1YnNjcmlwdF9leHByKQpBc21MYWJlbEF0dHIoYXNtX2xhYmVsX2F0dHIpCkJpbmFyeU9wZXJhdG9yKGJpbmFyeV9vcGVyYXRvcikKQmxvY2tDb21tYW5kQ29tbWVudChibG9ja19jb21tYW5kX2NvbW1lbnQpCkJ1aWx0aW5BdHRyKGJ1aWx0aW5fYXR0cikKQnJlYWtTdG10KGJyZWFrX3N0bXQpCkNhbGxFeHByKGNhbGxfZXhwcikKUmVjb3ZlcnlFeHByKHJlY292ZXJ5X2V4cHIpCkNhc2VTdG10KGNhc2Vfc3RtdCkKQ2hhcmFjdGVyTGl0ZXJhbChjaGFyYWN0ZXJfbGl0ZXJhbCkKQ29tcG91bmRBc3NpZ25PcGVyYXRvcihjb21wb3VuZF9hc3NpZ25fb3BlcmF0b3IpCkNvbXBvdW5kU3RtdChjb21wb3VuZF9zdG10KQpDb25kaXRpb25hbE9wZXJhdG9yKGNvbmRpdGlvbmFsX29wZXJhdG9yKQpDb25zdGFudEV4cHIoY29uc3RhbnRfZXhwcikKQ29uc3RBdHRyKGNvbnN0X2F0dHIpCkNvbnRpbnVlU3RtdChjb250aW51ZV9zdG10KQpDU3R5bGVDYXN0RXhwcihjc3R5bGVfY2FzdF9leHByKQpEZWNsUmVmRXhwcihkZWNsX3JlZl9leHByKQpEZWNsU3RtdChkZWNsX3N0bXQpCkRlZmF1bHRTdG10KGRlZmF1bHRfc3RtdCkKRGVwcmVjYXRlZEF0dHIoZGVwcmVjYXRlZF9hdHRyKQpEb1N0bXQoZG9fc3RtdCkKRW1wdHlEZWNsKGVtcHR5X2RlY2wpCkVudW1Db25zdGFudERlY2woZW51bV9jb25zdGFudF9kZWNsKQpFbnVtRGVjbChlbnVtX2RlY2wpCkZpZWxkRGVjbChmaWVsZF9kZWNsKQpGbG9hdGluZ0xpdGVyYWwoZmxvYXRpbmdfbGl0ZXJhbCkKRm9ybWF0QXR0cihmb3JtYXRfYXR0cikKRm9yU3RtdChmb3Jfc3RtdCkKICBuID0+CkZ1bGxDb21tZW50KGZ1bGxfY29tbWVudCkKRnVuY3Rpb25EZWNsKGZ1bmN0aW9uX2RlY2wpCiAgbiA9PgogIG4gPT4KR290b1N0bXQoZ290b19zdG10KQpuID0+CkhUTUxFbmRUYWdDb21tZW50KGh0bWxfZW5kX3RhZ19jb21tZW50KQpIVE1MU3RhcnRUYWdDb21tZW50KGh0bWxfc3RhcnRfdGFnX2NvbW1lbnQpCklmU3RtdChpZl9zdG10KQpJbXBsaWNpdENhc3RFeHByKGltcGxpY2l0X2Nhc3RfZXhwcikKSW5pdExpc3RFeHByKGluaXRfbGlzdF9leHByKQpJbmxpbmVDb21tYW5kQ29tbWVudChpbmxpbmVfY29tbWFuZF9jb21tZW50KQpJbnRlZ2VyTGl0ZXJhbChpbnRlZ2VyX2xpdGVyYWwpCkxhYmVsU3RtdChsYWJlbF9zdG10KQpNZW1iZXJFeHByKG1lbWJlcl9leHByKQpOb25OdWxsQXR0cihub25fbnVsbF9hdHRyKQpOb1Rocm93QXR0cihub190aHJvd19hdHRyKQpOdWxsU3RtdChudWxsX3N0bXQpClBhcmFncmFwaENvbW1lbnQocGFyYWdyYXBoX2NvbW1lbnQpClBhcmFtQ29tbWFuZENvbW1lbnQocGFyYW1fY29tbWFuZF9jb21tZW50KQpQYXJlbkV4cHIocGFyZW5fZXhwcikKUGFyZW5MaXN0RXhwcihwYXJlbl9saXN0X2V4cHIpClBhcm1WYXJEZWNsKHBhcm1fdmFyX2RlY2wpClB1cmVBdHRyKHB1cmVfYXR0cikKUmVjb3JkRGVjbChyZWNvcmRfZGVjbCkKUmVzdHJpY3RBdHRyKHJlc3RyaWN0X2F0dHIpClJldHVyblN0bXQocmV0dXJuX3N0bXQpClJldHVybnNUd2ljZUF0dHIocmV0dXJuc190d2ljZV9hdHRyKQpTdHJpbmdMaXRlcmFsKHN0cmluZ19saXRlcmFsKQpTd2l0Y2hTdG10KHN3aXRjaF9zdG10KQpUZXh0Q29tbWVudCh0ZXh0X2NvbW1lbnQpClRyYW5zbGF0aW9uVW5pdERlY2wodHJhbnNsYXRpb25fdW5pdF9kZWNsKQpUeXBlZGVmRGVjbCh0eXBlZGVmX2RlY2wpClVuYXJ5RXhwck9yVHlwZVRyYWl0RXhwcih1bmFyeV9leHByX29yX3R5cGVfdHJhaXRfZXhwcikKVW5hcnlPcGVyYXRvcih1bmFyeV9vcGVyYXRvcikKVW5yZXNvbHZlZExvb2t1cEV4cHIodW5yZXNvbHZlZF9sb29rdXBfZXhwcikKVW5yZXNvbHZlZE1lbWJlckV4cHIodW5yZXNvbHZlZF9tZW1iZXJfZXhwcikKVmFyRGVjbCh2YXJfZGVjbCwgYmFzZV90eXBlKQooW29mZnNldCwgc3Vic2NyaXB0XSkgPT4KVmVyYmF0aW1CbG9ja0NvbW1lbnQodmVyYmF0aW1fYmxvY2tfY29tbWVudCkKVmVyYmF0aW1CbG9ja0xpbmVDb21tZW50KHZlcmJhdGltX2Jsb2NrX2xpbmVfY29tbWVudCkKV2FyblVudXNlZFJlc3VsdEF0dHIod2Fybl91bnVzZWRfcmVzdWx0X2F0dHIpCldlYWtBdHRyKHdlYWtfYXR0cikKV2hpbGVTdG10KHdoaWxlX3N0bXQpCk92ZXJyaWRlQXR0cihvdmVycmlkZV9hdHRyKQpBZGRyTGFiZWxFeHByKGFkZHJfbGFiZWxfZXhwcikKQWxpYXNBdHRyKGFsaWFzX2F0dHIpCkFsaWduVmFsdWVBdHRyKGFsaWduX3ZhbHVlX2F0dHIpCkFsbG9jU2l6ZUF0dHIoYWxsb2Nfc2l6ZV9hdHRyKQpBcnJheUluaXRJbmRleEV4cHIoYXJyYXlfaW5pdF9pbmRleF9leHByKQpBcnJheUluaXRMb29wRXhwcihhcnJheV9pbml0X2xvb3BfZXhwcikKQXRvbWljRXhwcihhdG9taWNfZXhwcikKQXRvbWljVHlwZShhdG9taWNfdHlwZSkKQXV0b1R5cGUoYXV0b190eXBlKQpCdWlsdGluVGVtcGxhdGVEZWNsKGJ1aWx0aW5fdGVtcGxhdGVfZGVjbCkKQnVpbHRpblR5cGUoYnVpbHRpbl90eXBlKQpDYWxsYmFja0F0dHIoY2FsbGJhY2tfYXR0cikKQ2xhc3NUZW1wbGF0ZURlY2woY2xhc3NfdGVtcGxhdGVfZGVjbCkKQ2xhc3NUZW1wbGF0ZVBhcnRpYWxTcGVjaWFsaXphdGlvbkRlY2woY2xhc3NfdGVtcGxhdGVfcGFydGlhbF9zcGVjaWFsaXphdGlvbl9kZWNsKQpDbGFzc1RlbXBsYXRlU3BlY2lhbGl6YXRpb25EZWNsKGNsYXNzX3RlbXBsYXRlX3NwZWNpYWxpemF0aW9uX2RlY2wpCkNvbXBsZXhUeXBlKGNvbXBsZXhfdHlwZSkKQ29tcG91bmRMaXRlcmFsRXhwcihjb21wb3VuZF9saXRlcmFsX2V4cHIpCkNvbnN0YW50QXJyYXlUeXBlKGNvbnN0YW50X2FycmF5X3R5cGUpCkNvbnN0cnVjdG9yVXNpbmdTaGFkb3dEZWNsKGNvbnN0cnVjdG9yX3VzaW5nX3NoYWRvd19kZWNsKQpDb252ZXJ0VmVjdG9yRXhwcihjb252ZXJ0X3ZlY3Rvcl9leHByKQpEZWNheWVkVHlwZShkZWNheWVkX3R5cGUpCkRlY2x0eXBlVHlwZShkZWNsdHlwZV90eXBlKQpEZXBlbmRlbnROYW1lVHlwZShkZXBlbmRlbnRfbmFtZV90eXBlKQpEZXBlbmRlbnRTY29wZURlY2xSZWZFeHByKGRlcGVuZGVudF9zY29wZV9kZWNsX3JlZl9leHByKQpEZXBlbmRlbnRTaXplZEFycmF5VHlwZShkZXBlbmRlbnRfc2l6ZWRfYXJyYXlfdHlwZSkKRGVwZW5kZW50VGVtcGxhdGVTcGVjaWFsaXphdGlvblR5cGUoZGVwZW5kZW50X3RlbXBsYXRlX3NwZWNpYWxpemF0aW9uX3R5cGUpCkVsYWJvcmF0ZWRUeXBlKGVsYWJvcmF0ZWRfdHlwZSkKRW51bVR5cGUoZW51bV90eXBlKQpFeHByV2l0aENsZWFudXBzKGV4cHJfd2l0aF9jbGVhbnVwcykKRmluYWxBdHRyKGZpbmFsX2F0dHIpCkZvcm1hdEFyZ0F0dHIoZm9ybWF0X2FyZ19hdHRyKQpGcmllbmREZWNsKGZyaWVuZF9kZWNsKQpGdW5jdGlvbk5vUHJvdG9UeXBlKGZ1bmN0aW9uX25vX3Byb3RvX3R5cGUpCkZ1bmN0aW9uUHJvdG9UeXBlKGZ1bmN0aW9uX3Byb3RvX3R5cGUpCkZ1bmN0aW9uVGVtcGxhdGVEZWNsKGZ1bmN0aW9uX3RlbXBsYXRlX2RlY2wpCkdDQ0FzbVN0bXQoZ2NjX2FzbV9zdG10KQpHTlVJbmxpbmVBdHRyKGdudV9pbmxpbmVfYXR0cikKR05VTnVsbEV4cHIoZ251X251bGxfZXhwcikKSW1wbGljaXRWYWx1ZUluaXRFeHByKGltcGxpY2l0X3ZhbHVlX2luaXRfZXhwcikKSW5jb21wbGV0ZUFycmF5VHlwZShpbmNvbXBsZXRlX2FycmF5X3R5cGUpCkluZGlyZWN0RmllbGREZWNsKGluZGlyZWN0X2ZpZWxkX2RlY2wpCkluZGlyZWN0R290b1N0bXQoaW5kaXJlY3RfZ290b19zdG10KQpJbmplY3RlZENsYXNzTmFtZVR5cGUoaW5qZWN0ZWRfY2xhc3NfbmFtZV90eXBlKQpMYW1iZGFFeHByKGxhbWJkYV9leHByKQpMaW5rYWdlU3BlY0RlY2wobGlua2FnZV9zcGVjX2RlY2wpCkxWYWx1ZVJlZmVyZW5jZVR5cGUobF92YWx1ZV9yZWZlcmVuY2VfdHlwZSkKTWF0ZXJpYWxpemVUZW1wb3JhcnlFeHByKG1hdGVyaWFsaXplX3RlbXBvcmFyeV9leHByKQpNYXhGaWVsZEFsaWdubWVudEF0dHIobWF4X2ZpZWxkX2FsaWdubWVudF9hdHRyKQpNYXlBbGlhc0F0dHIobWF5X2FsaWFzX2F0dHIpCk1lbWJlclBvaW50ZXJUeXBlKG1lbWJlcl9wb2ludGVyX3R5cGUpCk1pblZlY3RvcldpZHRoQXR0cihtaW5fdmVjdG9yX3dpZHRoX2F0dHIpCk1vZGVBdHRyKG1vZGVfYXR0cikKTmFtZXNwYWNlRGVjbChuYW1lc3BhY2VfZGVjbCkKTm9EZWJ1Z0F0dHIobm9fZGVidWdfYXR0cikKTm9JbmxpbmVBdHRyKG5vX2lubGluZV9hdHRyKQpOb25UeXBlVGVtcGxhdGVQYXJtRGVjbChub25fdHlwZV90ZW1wbGF0ZV9wYXJtX2RlY2wpCk9mZnNldE9mRXhwcihvZmZzZXRfb2ZfZXhwcikKT3BhcXVlVmFsdWVFeHByKG9wYXF1ZV92YWx1ZV9leHByKQpPd25lckF0dHIob3duZXJfYXR0cikKUGFja2VkQXR0cihwYWNrZWRfYXR0cikKUGFja0V4cGFuc2lvbkV4cHIocGFja19leHBhbnNpb25fZXhwcikKUGFja0V4cGFuc2lvblR5cGUocGFja19leHBhbnNpb25fdHlwZSkKUGFyZW5UeXBlKHBhcmVuX3R5cGUpClBvaW50ZXJBdHRyKHBvaW50ZXJfYXR0cikKUG9pbnRlclR5cGUocG9pbnRlcl90eXBlKQpQcmVkZWZpbmVkRXhwcihwcmVkZWZpbmVkX2V4cHIpClF1YWxUeXBlKHF1YWxfdHlwZSkKUmVjb3JkVHlwZShyZWNvcmRfdHlwZSkKUmV0dXJuc05vbk51bGxBdHRyKHJldHVybnNfbm9uX251bGxfYXR0cikKUlZhbHVlUmVmZXJlbmNlVHlwZShyX3ZhbHVlX3JlZmVyZW5jZV90eXBlKQpTZW50aW5lbEF0dHIoc2VudGluZWxfYXR0cikKU2h1ZmZsZVZlY3RvckV4cHIoc2h1ZmZsZV92ZWN0b3JfZXhwcikKU2l6ZU9mUGFja0V4cHIoc2l6ZV9vZl9wYWNrX2V4cHIpClN0YXRpY0Fzc2VydERlY2woc3RhdGljX2Fzc2VydF9kZWNsKQpTdG10RXhwcihzdG10X2V4cHIpClN1YnN0Tm9uVHlwZVRlbXBsYXRlUGFybUV4cHIoc3Vic3Rfbm9uX3R5cGVfdGVtcGxhdGVfcGFybV9leHByKQpTdWJzdFRlbXBsYXRlVHlwZVBhcm1UeXBlKHN1YnN0X3RlbXBsYXRlX3R5cGVfcGFybV90eXBlKQpUYXJnZXRBdHRyKHRhcmdldF9hdHRyKQpUZW1wbGF0ZUFyZ3VtZW50KHRlbXBsYXRlX2FyZ3VtZW50KQpUZW1wbGF0ZVNwZWNpYWxpemF0aW9uVHlwZSh0ZW1wbGF0ZV9zcGVjaWFsaXphdGlvbl90eXBlKQpUZW1wbGF0ZVRlbXBsYXRlUGFybURlY2wodGVtcGxhdGVfdGVtcGxhdGVfcGFybV9kZWNsKQpUZW1wbGF0ZVR5cGVQYXJtRGVjbCh0ZW1wbGF0ZV90eXBlX3Bhcm1fZGVjbCkKVGVtcGxhdGVUeXBlUGFybVR5cGUodGVtcGxhdGVfdHlwZV9wYXJtX3R5cGUpClRQYXJhbUNvbW1hbmRDb21tZW50KHRfcGFyYW1fY29tbWFuZF9jb21tZW50KQpUeXBlQWxpYXNEZWNsKHR5cGVfYWxpYXNfZGVjbCkKVHlwZUFsaWFzVGVtcGxhdGVEZWNsKHR5cGVfYWxpYXNfdGVtcGxhdGVfZGVjbCkKVHlwZWRlZlR5cGUodHlwZWRlZl90eXBlKQpUeXBlT2ZFeHByVHlwZSh0eXBlX29mX2V4cHJfdHlwZSkKVHlwZVRyYWl0RXhwcih0eXBlX3RyYWl0X2V4cHIpClVuYXJ5VHJhbnNmb3JtVHlwZSh1bmFyeV90cmFuc2Zvcm1fdHlwZSkKVW5yZXNvbHZlZFVzaW5nVmFsdWVEZWNsKHVucmVzb2x2ZWRfdXNpbmdfdmFsdWVfZGVjbCkKVW51c2VkQXR0cih1bnVzZWRfYXR0cikKVXNpbmdEZWNsKHVzaW5nX2RlY2wpClVzaW5nRGlyZWN0aXZlRGVjbCh1c2luZ19kaXJlY3RpdmVfZGVjbCkKVXNpbmdTaGFkb3dEZWNsKHVzaW5nX3NoYWRvd19kZWNsKQpWQUFyZ0V4cHIodmFfYXJnX2V4cHIpClZhclRlbXBsYXRlRGVjbCh2YXJfdGVtcGxhdGVfZGVjbCkKVmVjdG9yVHlwZSh2ZWN0b3JfdHlwZSkKVmVyYmF0aW1MaW5lQ29tbWVudCh2ZXJiYXRpbV9saW5lX2NvbW1lbnQpClZpc2liaWxpdHlBdHRyKHZpc2liaWxpdHlfYXR0cikKV2Vha1JlZkF0dHIod2Vha19yZWZfYXR0cikKQ1hYUmVjb3JkRGVjbChjeHhfcmVjb3JkX2RlY2wpCkNYWENvbnN0cnVjdG9yRGVjbChjeHhfY29uc3RydWN0b3JfZGVjbCkKICBuID0+CkNYWEN0b3JJbml0aWFsaXplcihjeHhfY3Rvcl9pbml0aWFsaXplcikKQ1hYRGVwZW5kZW50U2NvcGVNZW1iZXJFeHByKGN4eF9kZXBlbmRlbnRfc2NvcGVfbWVtYmVyX2V4cHIpCkNYWFRoaXNFeHByKGN4eF90aGlzX2V4cHIpCkNYWERlc3RydWN0b3JEZWNsKGN4eF9kZXN0cnVjdG9yX2RlY2wpCiAgbiA9PgpDWFhNZXRob2REZWNsKGN4eF9tZXRob2RfZGVjbCkKICBuID0+CkNYWFN0YXRpY0Nhc3RFeHByKGN4eF9zdGF0aWNfY2FzdF9leHByKQpDWFhVbnJlc29sdmVkQ29uc3RydWN0RXhwcihjeHhfdW5yZXNvbHZlZF9jb25zdHJ1Y3RfZXhwcikKQ1hYTmV3RXhwcihjeHhfbmV3X2V4cHIpCkNYWERlbGV0ZUV4cHIoY3h4X2RlbGV0ZV9leHByKQpDWFhCb29sTGl0ZXJhbEV4cHIoY3h4X2Jvb2xfbGl0ZXJhbF9leHByKQpDWFgxMU5vUmV0dXJuQXR0cihjeHgxMV9ub19yZXR1cm5fYXR0cikKQ1hYQmluZFRlbXBvcmFyeUV4cHIoY3h4X2JpbmRfdGVtcG9yYXJ5X2V4cHIpCkNYWENhdGNoU3RtdChjeHhfY2F0Y2hfc3RtdCkKQ1hYQ29uc3RydWN0RXhwcihjeHhfY29uc3RydWN0X2V4cHIpCkNYWENvbnZlcnNpb25EZWNsKGN4eF9jb252ZXJzaW9uX2RlY2wpCkNYWERlZmF1bHRBcmdFeHByKGN4eF9kZWZhdWx0X2FyZ19leHByKQpDWFhEZWZhdWx0SW5pdEV4cHIoY3h4X2RlZmF1bHRfaW5pdF9leHByKQpDWFhGb3JSYW5nZVN0bXQoY3h4X2Zvcl9yYW5nZV9zdG10KQpDWFhGdW5jdGlvbmFsQ2FzdEV4cHIoY3h4X2Z1bmN0aW9uYWxfY2FzdF9leHByKQpDWFhNZW1iZXJDYWxsRXhwcihjeHhfbWVtYmVyX2NhbGxfZXhwcikKQ1hYTm9leGNlcHRFeHByKGN4eF9ub2V4Y2VwdF9leHByKQpDWFhOdWxsUHRyTGl0ZXJhbEV4cHIoY3h4X251bGxfcHRyX2xpdGVyYWxfZXhwcikKQ1hYT3BlcmF0b3JDYWxsRXhwcihjeHhfb3BlcmF0b3JfY2FsbF9leHByKQpDWFhSZWludGVycHJldENhc3RFeHByKGN4eF9yZWludGVycHJldF9jYXN0X2V4cHIpCkNYWFNjYWxhclZhbHVlSW5pdEV4cHIoY3h4X3NjYWxhcl92YWx1ZV9pbml0X2V4cHIpCkNYWFRlbXBvcmFyeU9iamVjdEV4cHIoY3h4X3RlbXBvcmFyeV9vYmplY3RfZXhwcikKQ1hYVHJ5U3RtdChjeHhfdHJ5X3N0bXQpClByaW50Tm9kZShub2RlKQpQcmludEFzdChub2RlLCBhc3QpCiAgZ2V0KCkKICBpc05vZGUob2JqKQpHZXRUeXBlKG5hbWVfb3JfaWQsIGFzdCA9ICQuZGF0YSkKICBuID0+Cm5vZGUgPT4Kbm9kZSA9PgogIHIgPT4KR2V0RmllbGRzKG5vZGUpCih2LCBrKSA9PgooW3YsIHBdKSA9PgooW2xvYywgcHRyXSkgPT4KICBpID0+CkdldFBhcmFtcyhub2RlKQogIGNoaWxkID0+ClBhdGhSZW1vdmVMb2MocGF0aCkKICBwID0+AAAAAAAAAADoKQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					1,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					2,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/ast-shell.js",
						"symkeys":
						[
							[
								1862,
								1866
							],
							[
								1925,
								1929
							],
							[
								1965,
								1995
							],
							[
								2038,
								2059
							],
							[
								2208,
								2234
							],
							[
								2392,
								2411
							],
							[
								2739,
								2767
							],
							[
								3057,
								3065
							],
							[
								3066,
								3080
							],
							[
								3162,
								3172
							],
							[
								3234,
								3282
							],
							[
								3396,
								3405
							],
							[
								3515,
								3537
							],
							[
								3996,
								4018
							],
							[
								4440,
								4458
							],
							[
								4557,
								4575
							],
							[
								4680,
								4706
							],
							[
								4842,
								4846
							],
							[
								4923,
								4939
							],
							[
								5501,
								5520
							],
							[
								5584,
								5605
							],
							[
								5939,
								5944
							],
							[
								6019,
								6034
							],
							[
								6119,
								6127
							],
							[
								6168,
								6176
							],
							[
								6547,
								6620
							],
							[
								6624,
								6632
							],
							[
								6729,
								6759
							],
							[
								6788,
								6793
							],
							[
								6826,
								6833
							],
							[
								6862,
								6890
							],
							[
								7227,
								7234
							],
							[
								7253,
								7276
							],
							[
								7306,
								7313
							],
							[
								7344,
								7352
							],
							[
								7390,
								7397
							],
							[
								7597,
								7610
							],
							[
								7790,
								7833
							],
							[
								7866,
								7875
							],
							[
								7936,
								7940
							],
							[
								8042,
								8046
							],
							[
								8082,
								8096
							],
							[
								8208,
								8236
							],
							[
								8441,
								8466
							],
							[
								8564,
								8588
							],
							[
								8661,
								8665
							],
							[
								8783,
								8787
							],
							[
								8851,
								8865
							],
							[
								8921,
								8930
							],
							[
								9228,
								9242
							],
							[
								9365,
								9400
							],
							[
								9489,
								9494
							],
							[
								9617,
								9629
							],
							[
								9682,
								9707
							],
							[
								9756,
								9767
							],
							[
								9807,
								9818
							],
							[
								9956,
								9967
							],
							[
								10054,
								10067
							],
							[
								10148,
								10180
							],
							[
								10418,
								10447
							],
							[
								10458,
								10473
							],
							[
								10535,
								10554
							],
							[
								10762,
								10801
							],
							[
								10866,
								10906
							],
							[
								10989,
								11033
							],
							[
								11115,
								11154
							],
							[
								11216,
								11254
							],
							[
								11340,
								11368
							],
							[
								11431,
								11458
							],
							[
								12009,
								12035
							],
							[
								12302,
								12309
							],
							[
								14225,
								14283
							],
							[
								15319,
								15326
							],
							[
								15390,
								15397
							],
							[
								15407,
								15418
							],
							[
								15459,
								15485
							],
							[
								15601,
								15615
							],
							[
								15912,
								15931
							],
							[
								15958,
								15965
							],
							[
								16053,
								16083
							],
							[
								16149,
								16189
							],
							[
								16365,
								16416
							],
							[
								17405,
								17412
							],
							[
								17819,
								17839
							],
							[
								18015,
								18069
							],
							[
								18258,
								18270
							],
							[
								18298,
								18310
							],
							[
								18925,
								18985
							],
							[
								19596,
								19651
							],
							[
								19747,
								19759
							],
							[
								19764,
								19794
							],
							[
								20075,
								20097
							],
							[
								20143,
								20166
							],
							[
								20238,
								20253
							],
							[
								20388,
								20404
							],
							[
								20808,
								20821
							],
							[
								20946,
								20965
							],
							[
								21017,
								21025
							],
							[
								21082,
								21097
							],
							[
								21256,
								21268
							],
							[
								21613,
								21627
							],
							[
								21727,
								21744
							],
							[
								21971,
								21993
							],
							[
								22110,
								22135
							],
							[
								22235,
								22252
							],
							[
								22307,
								22311
							],
							[
								22399,
								22403
							],
							[
								22455,
								22479
							],
							[
								22595,
								22635
							],
							[
								22696,
								22717
							],
							[
								23001,
								23033
							],
							[
								23517,
								23532
							],
							[
								23643,
								23668
							],
							[
								23837,
								23872
							],
							[
								24092,
								24099
							],
							[
								24188,
								24195
							],
							[
								24224,
								24233
							],
							[
								24270,
								24279
							],
							[
								24329,
								24337
							],
							[
								24379,
								24403
							],
							[
								24499,
								24515
							],
							[
								24551,
								24591
							],
							[
								24889,
								24932
							],
							[
								25875,
								25886
							],
							[
								26631,
								26681
							],
							[
								26703,
								26729
							],
							[
								26764,
								26793
							],
							[
								27137,
								27180
							],
							[
								27293,
								27297
							],
							[
								27313,
								27317
							],
							[
								27362,
								27449
							],
							[
								27616,
								27649
							],
							[
								27708,
								27713
							],
							[
								27783,
								27825
							],
							[
								27901,
								27911
							],
							[
								28030,
								28070
							],
							[
								28211,
								28216
							],
							[
								28274,
								28281
							],
							[
								28398,
								28402
							],
							[
								28481,
								28485
							],
							[
								28639,
								28646
							],
							[
								28733,
								28738
							],
							[
								28846,
								28862
							],
							[
								28973,
								28980
							],
							[
								29059,
								29063
							],
							[
								29124,
								29131
							],
							[
								29207,
								29214
							],
							[
								29271,
								29317
							],
							[
								29357,
								29367
							],
							[
								29520,
								29556
							],
							[
								29597,
								29609
							],
							[
								31252,
								31284
							],
							[
								31771,
								31781
							],
							[
								31831,
								31841
							],
							[
								31889,
								31899
							],
							[
								32475,
								32486
							],
							[
								32580,
								32584
							],
							[
								32611,
								32615
							],
							[
								32639,
								32643
							],
							[
								32667,
								32671
							],
							[
								32699,
								32736
							],
							[
								33106,
								33161
							],
							[
								33368,
								33376
							],
							[
								33565,
								33573
							],
							[
								33662,
								33670
							],
							[
								33716,
								33724
							],
							[
								33793,
								33829
							],
							[
								33918,
								33961
							],
							[
								34240,
								34259
							],
							[
								34313,
								34318
							],
							[
								34568,
								34591
							],
							[
								34679,
								34684
							],
							[
								34796,
								34819
							],
							[
								34907,
								34912
							],
							[
								35014,
								35026
							],
							[
								35140,
								35145
							],
							[
								35200,
								35229
							],
							[
								35334,
								35339
							],
							[
								36286,
								36344
							],
							[
								37279,
								37290
							],
							[
								37323,
								37334
							],
							[
								37383,
								37389
							],
							[
								37442,
								37450
							],
							[
								37746,
								37750
							],
							[
								38442,
								38448
							]
						],
						"symlist":
						[
							"d =>",
							"d =>",
							"traceProxy = (obj, handler) =>",
							" function(name, args)",
							"get(target, key, receiver)",
							"member = function()",
							"ConcatIterator = iterator =>",
							" gen =>",
							" (...args) =>",
							"toString()",
							"async function ImportModule(modulePath, ...args)",
							"module =>",
							" (acc, item) =>",
							"function CommandLine()",
							" (...args) =>",
							" (...args) =>",
							" (module, ...args) =>",
							"m =>",
							".show = value =>",
							".printNode = arg =>",
							".debug = (...args) =>",
							"() =>",
							"(item, i, a) =>",
							"entry =>",
							"entry =>",
							"function* IncludeAll(dir, maxDepth = Infinity, pred = entry => /\\.[ch]$/.",
							"(entry))",
							"function SelectLocations(node)",
							" n =>",
							"prop =>",
							"function LocationString(loc)",
							"node =>",
							"function Structs(nodes)",
							"node =>",
							"field =>",
							"node =>",
							"(field, i) =>",
							"function Table(list, pred = (n, l) => true)",
							"(n, i) =>",
							"e =>",
							"k =>",
							"([i, l, n]) =>",
							" function returnType(n)",
							" function numArgs(n)",
							" function Params(n)",
							"p =>",
							"k =>",
							"([i, l, n]) =>",
							"(k, j) =>",
							"(acc, name) =>",
							" function padTrunc(len, pad = ' ')",
							" s =>",
							"(name, i) =>",
							"pad = (cols, pad, sep) =>",
							"(key, i) =>",
							"(s, col) =>",
							"(acc, n) =>",
							"(acc, row) =>",
							"function PrintRange(range, file)",
							"function OverlapRange(r1, r2)",
							"GetRange = r =>",
							"InRange = (i, r) =>",
							"function ParentNode(node, ast = $.data)",
							"function NextSibling(node, ast = $.data)",
							"function PreviousSibling(node, ast = $.data)",
							"function FirstChild(node, ast = $.data)",
							"function LastChild(node, ast = $.data)",
							"function Terminate(exitCode)",
							"function ParseStructs(text)",
							"function* (decl, includes)",
							"name =>",
							"function InspectStruct(decl, includes, compiler = 'clang')",
							"line =>",
							"line =>",
							"(col, i) =>",
							"([field, offset, size]) =>",
							"(acc, line) =>",
							"toString(sep = ' ')",
							"line =>",
							"function RoundTo(value, align)",
							"function MakeStructClass(decl, filename)",
							"function* GenerateStructClass(decl, ffiPrefix = '')",
							"line =>",
							"([field, member]) =>",
							"function GenerateGetSet(name, offset, type, ffiPrefix)",
							"toHex = v =>",
							"toHex = v =>",
							"function ByteLength2TypedArray(byteLength, signed, floating)",
							"function ByteLength2Value(byteLength, signed, floating)",
							"FFI_Function",
							"constructor(node, prefix = '')",
							"([name, type], idx) =>",
							"generateDefine(fp, lib)",
							" (name, lib) =>",
							"colorText = x =>",
							"generateDoc()",
							"push = (...args) =>",
							"field =>",
							"(field, col) =>",
							"js = type =>",
							"generateCall()",
							"([name, type]) =>",
							"generate(fp, lib, exp)",
							"generateFunction(fp, lib)",
							"([name, type]) =>",
							"p =>",
							"p =>",
							"compileFunction(fp, lib)",
							"function FdReader(fd, bufferSize = 1024)",
							"async (push, stop) =>",
							"async function CommandRead(args)",
							"async reader =>",
							" function ReadOutput(fd)",
							"async function LibraryExports(file)",
							"line =>",
							"line =>",
							"column =>",
							"(a, b) =>",
							"entry =>",
							"function SaveLibraries()",
							"(acc, [n, e]) =>",
							"function ProcessFile(file, debug = true)",
							"function ParseECMAScript(file, params = {})",
							" (fr, i) =>",
							"function PrintECMAScript(ast, comments, printer = ",
							"({ indent: 4 }, comments))",
							"function PrintCArray(strings)",
							"function Namespaces(nodePath, ast = $.data)",
							"p =>",
							"n =>",
							"function* Constants(node, t = (name, value) => [name, !isNaN(+value) ? +value : value])",
							"function GetImports(ast = $.data)",
							" n =>",
							"function GetIdentifiers(nodes, key = null)",
							" (n, k) =>",
							"function MemberNames(members, flags = 0)",
							" n =>",
							"path =>",
							"p =>",
							"p =>",
							"name =>",
							" n =>",
							"([node, ptr]) =>",
							"path =>",
							"p =>",
							"name =>",
							"name =>",
							"function UnsetLoc(node, pred = (v, p) => true)",
							" (v, k) =>",
							"function MakeFFI(node, lib, exp, fp)",
							"function* ()",
							"async function ASTShell(...args)",
							" (a, p) =>",
							" (a, p) =>",
							" (a, p) =>",
							"get flags()",
							"v =>",
							"v =>",
							"d =>",
							"l =>",
							"async function Compile(file, ...args)",
							" function nameOrIdPred(name_or_id, pred = n => true)",
							" node =>",
							" node =>",
							" node =>",
							" node =>",
							"select(name_or_id, pred = n => true)",
							"getByIdOrName(name_or_id, pred = n => true)",
							"getType(name_or_id)",
							" n =>",
							"getFunction(name_or_id)",
							" n =>",
							"getVariable(name_or_id)",
							" n =>",
							"getLoc(node)",
							"() =>",
							"pathOf(needle, maxDepth = 10)",
							" n =>",
							"Pointer.prototype.chain = function(step, limit = Infinity)",
							".F = arg =>",
							".T = arg =>",
							" () =>",
							" node =>",
							"s =>",
							" fr =>"
						]
					},
					"AQAAAAAAAAAAAAAADw0AAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					3,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAPDQAAICBkID0+CiAgZCA9PgogIHRyYWNlUHJveHkgPSAob2JqLCBoYW5kbGVyKSA9PgpmdW5jdGlvbihuYW1lLCBhcmdzKQogIGdldCh0YXJnZXQsIGtleSwgcmVjZWl2ZXIpCiAgbWVtYmVyID0gZnVuY3Rpb24oKQpDb25jYXRJdGVyYXRvciA9IGl0ZXJhdG9yID0+CmdlbiA9PgooLi4uYXJncykgPT4KICB0b1N0cmluZygpCkltcG9ydE1vZHVsZShtb2R1bGVQYXRoLCAuLi5hcmdzKQogIG1vZHVsZSA9PgooYWNjLCBpdGVtKSA9PgpDb21tYW5kTGluZSgpCiguLi5hcmdzKSA9PgooLi4uYXJncykgPT4KKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSB2YWx1ZSA9PgogIC5wcmludE5vZGUgPSBhcmcgPT4KICAuZGVidWcgPSAoLi4uYXJncykgPT4KKCkgPT4KKGl0ZW0sIGksIGEpID0+CiAgZW50cnkgPT4KICBlbnRyeSA9PgpJbmNsdWRlQWxsKGRpciwgbWF4RGVwdGggPSBJbmZpbml0eSwgcHJlZCA9IGVudHJ5ID0+IC9cLltjaF0kLy4KKGVudHJ5KSkKU2VsZWN0TG9jYXRpb25zKG5vZGUpCm4gPT4KICBwcm9wID0+CkxvY2F0aW9uU3RyaW5nKGxvYykKICBub2RlID0+ClN0cnVjdHMobm9kZXMpCiAgbm9kZSA9PgogIGZpZWxkID0+CiAgbm9kZSA9PgooZmllbGQsIGkpID0+ClRhYmxlKGxpc3QsIHByZWQgPSAobiwgbCkgPT4gdHJ1ZSkKKG4sIGkpID0+CiAgZSA9PgogIGsgPT4KKFtpLCBsLCBuXSkgPT4KICByZXR1cm5UeXBlKG4pCiAgbnVtQXJncyhuKQpQYXJhbXMobikKICBwID0+CiAgayA9PgooW2ksIGwsIG5dKSA9PgooaywgaikgPT4KKGFjYywgbmFtZSkgPT4KICBwYWRUcnVuYyhsZW4sIHBhZCA9ICcgJykKcyA9PgoobmFtZSwgaSkgPT4KICBwYWQgPSAoY29scywgcGFkLCBzZXApID0+CihrZXksIGkpID0+CihzLCBjb2wpID0+CihhY2MsIG4pID0+CihhY2MsIHJvdykgPT4KUHJpbnRSYW5nZShyYW5nZSwgZmlsZSkKT3ZlcmxhcFJhbmdlKHIxLCByMikKR2V0UmFuZ2UgPSByID0+CkluUmFuZ2UgPSAoaSwgcikgPT4KUGFyZW50Tm9kZShub2RlLCBhc3QgPSAkLmRhdGEpCk5leHRTaWJsaW5nKG5vZGUsIGFzdCA9ICQuZGF0YSkKUHJldmlvdXNTaWJsaW5nKG5vZGUsIGFzdCA9ICQuZGF0YSkKRmlyc3RDaGlsZChub2RlLCBhc3QgPSAkLmRhdGEpCkxhc3RDaGlsZChub2RlLCBhc3QgPSAkLmRhdGEpClRlcm1pbmF0ZShleGl0Q29kZSkKUGFyc2VTdHJ1Y3RzKHRleHQpCihkZWNsLCBpbmNsdWRlcykKICBuYW1lID0+Ckluc3BlY3RTdHJ1Y3QoZGVjbCwgaW5jbHVkZXMsIGNvbXBpbGVyID0gJ2NsYW5nJykKICBsaW5lID0+CiAgbGluZSA9PgooY29sLCBpKSA9PgooW2ZpZWxkLCBvZmZzZXQsIHNpemVdKSA9PgooYWNjLCBsaW5lKSA9PgogIHRvU3RyaW5nKHNlcCA9ICcgJykKICBsaW5lID0+ClJvdW5kVG8odmFsdWUsIGFsaWduKQpNYWtlU3RydWN0Q2xhc3MoZGVjbCwgZmlsZW5hbWUpCkdlbmVyYXRlU3RydWN0Q2xhc3MoZGVjbCwgZmZpUHJlZml4ID0gJycpCiAgbGluZSA9PgooW2ZpZWxkLCBtZW1iZXJdKSA9PgpHZW5lcmF0ZUdldFNldChuYW1lLCBvZmZzZXQsIHR5cGUsIGZmaVByZWZpeCkKICB0b0hleCA9IHYgPT4KICB0b0hleCA9IHYgPT4KQnl0ZUxlbmd0aDJUeXBlZEFycmF5KGJ5dGVMZW5ndGgsIHNpZ25lZCwgZmxvYXRpbmcpCkJ5dGVMZW5ndGgyVmFsdWUoYnl0ZUxlbmd0aCwgc2lnbmVkLCBmbG9hdGluZykKRkZJX0Z1bmN0aW9uCiAgY29uc3RydWN0b3Iobm9kZSwgcHJlZml4ID0gJycpCihbbmFtZSwgdHlwZV0sIGlkeCkgPT4KICBnZW5lcmF0ZURlZmluZShmcCwgbGliKQoobmFtZSwgbGliKSA9PgogIGNvbG9yVGV4dCA9IHggPT4KICBnZW5lcmF0ZURvYygpCiAgcHVzaCA9ICguLi5hcmdzKSA9PgogIGZpZWxkID0+CihmaWVsZCwgY29sKSA9PgogIGpzID0gdHlwZSA9PgogIGdlbmVyYXRlQ2FsbCgpCihbbmFtZSwgdHlwZV0pID0+CiAgZ2VuZXJhdGUoZnAsIGxpYiwgZXhwKQogIGdlbmVyYXRlRnVuY3Rpb24oZnAsIGxpYikKKFtuYW1lLCB0eXBlXSkgPT4KICBwID0+CiAgcCA9PgogIGNvbXBpbGVGdW5jdGlvbihmcCwgbGliKQpGZFJlYWRlcihmZCwgYnVmZmVyU2l6ZSA9IDEwMjQpCihwdXNoLCBzdG9wKSA9PgpDb21tYW5kUmVhZChhcmdzKQogIHJlYWRlciA9PgpSZWFkT3V0cHV0KGZkKQpMaWJyYXJ5RXhwb3J0cyhmaWxlKQogIGxpbmUgPT4KICBsaW5lID0+CiAgY29sdW1uID0+CihhLCBiKSA9PgogIGVudHJ5ID0+ClNhdmVMaWJyYXJpZXMoKQooYWNjLCBbbiwgZV0pID0+ClByb2Nlc3NGaWxlKGZpbGUsIGRlYnVnID0gdHJ1ZSkKUGFyc2VFQ01BU2NyaXB0KGZpbGUsIHBhcmFtcyA9IHt9KQooZnIsIGkpID0+ClByaW50RUNNQVNjcmlwdChhc3QsIGNvbW1lbnRzLCBwcmludGVyID0gCih7IGluZGVudDogNCB9LCBjb21tZW50cykpClByaW50Q0FycmF5KHN0cmluZ3MpCk5hbWVzcGFjZXMobm9kZVBhdGgsIGFzdCA9ICQuZGF0YSkKICBwID0+CiAgbiA9PgpDb25zdGFudHMobm9kZSwgdCA9IChuYW1lLCB2YWx1ZSkgPT4gW25hbWUsICFpc05hTigrdmFsdWUpID8gK3ZhbHVlIDogdmFsdWVdKQpHZXRJbXBvcnRzKGFzdCA9ICQuZGF0YSkKbiA9PgpHZXRJZGVudGlmaWVycyhub2Rlcywga2V5ID0gbnVsbCkKKG4sIGspID0+Ck1lbWJlck5hbWVzKG1lbWJlcnMsIGZsYWdzID0gMCkKbiA9PgogIHBhdGggPT4KICBwID0+CiAgcCA9PgogIG5hbWUgPT4KbiA9PgooW25vZGUsIHB0cl0pID0+CiAgcGF0aCA9PgogIHAgPT4KICBuYW1lID0+CiAgbmFtZSA9PgpVbnNldExvYyhub2RlLCBwcmVkID0gKHYsIHApID0+IHRydWUpCih2LCBrKSA9PgpNYWtlRkZJKG5vZGUsIGxpYiwgZXhwLCBmcCkKKCkKQVNUU2hlbGwoLi4uYXJncykKKGEsIHApID0+CihhLCBwKSA9PgooYSwgcCkgPT4KICBnZXQgZmxhZ3MoKQogIHYgPT4KICB2ID0+CiAgZCA9PgogIGwgPT4KQ29tcGlsZShmaWxlLCAuLi5hcmdzKQogIG5hbWVPcklkUHJlZChuYW1lX29yX2lkLCBwcmVkID0gbiA9PiB0cnVlKQpub2RlID0+Cm5vZGUgPT4Kbm9kZSA9Pgpub2RlID0+CiAgc2VsZWN0KG5hbWVfb3JfaWQsIHByZWQgPSBuID0+IHRydWUpCiAgZ2V0QnlJZE9yTmFtZShuYW1lX29yX2lkLCBwcmVkID0gbiA9PiB0cnVlKQogIGdldFR5cGUobmFtZV9vcl9pZCkKbiA9PgogIGdldEZ1bmN0aW9uKG5hbWVfb3JfaWQpCm4gPT4KICBnZXRWYXJpYWJsZShuYW1lX29yX2lkKQpuID0+CiAgZ2V0TG9jKG5vZGUpCigpID0+CiAgcGF0aE9mKG5lZWRsZSwgbWF4RGVwdGggPSAxMCkKbiA9PgpQb2ludGVyLnByb3RvdHlwZS5jaGFpbiA9IGZ1bmN0aW9uKHN0ZXAsIGxpbWl0ID0gSW5maW5pdHkpCiAgLkYgPSBhcmcgPT4KICAuVCA9IGFyZyA9PgooKSA9Pgpub2RlID0+CiAgcyA9PgpmciA9PgAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					4,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					5,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					6,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					7,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/ast-shell.js",
						"symkeys":
						[
							[
								1862,
								1866
							],
							[
								1925,
								1929
							],
							[
								1965,
								1995
							],
							[
								2038,
								2059
							],
							[
								2208,
								2234
							],
							[
								2392,
								2411
							],
							[
								2739,
								2767
							],
							[
								3057,
								3065
							],
							[
								3066,
								3080
							],
							[
								3162,
								3172
							],
							[
								3234,
								3282
							],
							[
								3396,
								3405
							],
							[
								3515,
								3537
							],
							[
								3996,
								4018
							],
							[
								4440,
								4458
							],
							[
								4557,
								4575
							],
							[
								4680,
								4706
							],
							[
								4842,
								4846
							],
							[
								4923,
								4939
							],
							[
								5501,
								5520
							],
							[
								5584,
								5605
							],
							[
								5939,
								5944
							],
							[
								6019,
								6034
							],
							[
								6119,
								6127
							],
							[
								6168,
								6176
							],
							[
								6547,
								6620
							],
							[
								6624,
								6632
							],
							[
								6729,
								6759
							],
							[
								6788,
								6793
							],
							[
								6826,
								6833
							],
							[
								6862,
								6890
							],
							[
								7227,
								7234
							],
							[
								7253,
								7276
							],
							[
								7306,
								7313
							],
							[
								7344,
								7352
							],
							[
								7390,
								7397
							],
							[
								7597,
								7610
							],
							[
								7790,
								7833
							],
							[
								7866,
								7875
							],
							[
								7936,
								7940
							],
							[
								8042,
								8046
							],
							[
								8082,
								8096
							],
							[
								8208,
								8236
							],
							[
								8441,
								8466
							],
							[
								8564,
								8588
							],
							[
								8661,
								8665
							],
							[
								8783,
								8787
							],
							[
								8851,
								8865
							],
							[
								8921,
								8930
							],
							[
								9228,
								9242
							],
							[
								9365,
								9400
							],
							[
								9489,
								9494
							],
							[
								9617,
								9629
							],
							[
								9682,
								9707
							],
							[
								9756,
								9767
							],
							[
								9807,
								9818
							],
							[
								9956,
								9967
							],
							[
								10054,
								10067
							],
							[
								10148,
								10180
							],
							[
								10418,
								10447
							],
							[
								10458,
								10473
							],
							[
								10535,
								10554
							],
							[
								10762,
								10801
							],
							[
								10866,
								10906
							],
							[
								10989,
								11033
							],
							[
								11115,
								11154
							],
							[
								11216,
								11254
							],
							[
								11340,
								11368
							],
							[
								11431,
								11458
							],
							[
								12009,
								12035
							],
							[
								12302,
								12309
							],
							[
								14225,
								14283
							],
							[
								15319,
								15326
							],
							[
								15390,
								15397
							],
							[
								15407,
								15418
							],
							[
								15459,
								15485
							],
							[
								15601,
								15615
							],
							[
								15912,
								15931
							],
							[
								15958,
								15965
							],
							[
								16053,
								16083
							],
							[
								16149,
								16189
							],
							[
								16365,
								16416
							],
							[
								17405,
								17412
							],
							[
								17819,
								17839
							],
							[
								18015,
								18069
							],
							[
								18258,
								18270
							],
							[
								18298,
								18310
							],
							[
								18925,
								18985
							],
							[
								19596,
								19651
							],
							[
								19747,
								19759
							],
							[
								19764,
								19794
							],
							[
								20075,
								20097
							],
							[
								20143,
								20166
							],
							[
								20238,
								20253
							],
							[
								20388,
								20404
							],
							[
								20808,
								20821
							],
							[
								20946,
								20965
							],
							[
								21017,
								21025
							],
							[
								21082,
								21097
							],
							[
								21256,
								21268
							],
							[
								21613,
								21627
							],
							[
								21727,
								21744
							],
							[
								21971,
								21993
							],
							[
								22110,
								22135
							],
							[
								22235,
								22252
							],
							[
								22307,
								22311
							],
							[
								22399,
								22403
							],
							[
								22455,
								22479
							],
							[
								22595,
								22635
							],
							[
								22696,
								22717
							],
							[
								23001,
								23033
							],
							[
								23517,
								23532
							],
							[
								23643,
								23668
							],
							[
								23837,
								23872
							],
							[
								24092,
								24099
							],
							[
								24188,
								24195
							],
							[
								24224,
								24233
							],
							[
								24270,
								24279
							],
							[
								24329,
								24337
							],
							[
								24379,
								24403
							],
							[
								24499,
								24515
							],
							[
								24551,
								24591
							],
							[
								24889,
								24932
							],
							[
								25875,
								25886
							],
							[
								26631,
								26681
							],
							[
								26703,
								26729
							],
							[
								26764,
								26793
							],
							[
								27137,
								27180
							],
							[
								27293,
								27297
							],
							[
								27313,
								27317
							],
							[
								27362,
								27449
							],
							[
								27616,
								27649
							],
							[
								27708,
								27713
							],
							[
								27783,
								27825
							],
							[
								27901,
								27911
							],
							[
								28030,
								28070
							],
							[
								28211,
								28216
							],
							[
								28274,
								28281
							],
							[
								28398,
								28402
							],
							[
								28481,
								28485
							],
							[
								28639,
								28646
							],
							[
								28733,
								28738
							],
							[
								28846,
								28862
							],
							[
								28973,
								28980
							],
							[
								29059,
								29063
							],
							[
								29124,
								29131
							],
							[
								29207,
								29214
							],
							[
								29271,
								29317
							],
							[
								29357,
								29367
							],
							[
								29520,
								29556
							],
							[
								29597,
								29609
							],
							[
								31252,
								31284
							],
							[
								31771,
								31781
							],
							[
								31831,
								31841
							],
							[
								31889,
								31899
							],
							[
								32475,
								32486
							],
							[
								32580,
								32584
							],
							[
								32611,
								32615
							],
							[
								32639,
								32643
							],
							[
								32667,
								32671
							],
							[
								32699,
								32736
							],
							[
								33106,
								33161
							],
							[
								33368,
								33376
							],
							[
								33565,
								33573
							],
							[
								33662,
								33670
							],
							[
								33716,
								33724
							],
							[
								33793,
								33829
							],
							[
								33918,
								33961
							],
							[
								34240,
								34259
							],
							[
								34313,
								34318
							],
							[
								34568,
								34591
							],
							[
								34679,
								34684
							],
							[
								34796,
								34819
							],
							[
								34907,
								34912
							],
							[
								35014,
								35026
							],
							[
								35140,
								35145
							],
							[
								35200,
								35229
							],
							[
								35334,
								35339
							],
							[
								36286,
								36344
							],
							[
								37279,
								37290
							],
							[
								37323,
								37334
							],
							[
								37383,
								37389
							],
							[
								37442,
								37450
							],
							[
								37746,
								37750
							],
							[
								38442,
								38448
							]
						],
						"symlist":
						[
							"d =>",
							"d =>",
							"traceProxy = (obj, handler) =>",
							" function(name, args)",
							"get(target, key, receiver)",
							"member = function()",
							"ConcatIterator = iterator =>",
							" gen =>",
							" (...args) =>",
							"toString()",
							"async function ImportModule(modulePath, ...args)",
							"module =>",
							" (acc, item) =>",
							"function CommandLine()",
							" (...args) =>",
							" (...args) =>",
							" (module, ...args) =>",
							"m =>",
							".show = value =>",
							".printNode = arg =>",
							".debug = (...args) =>",
							"() =>",
							"(item, i, a) =>",
							"entry =>",
							"entry =>",
							"function* IncludeAll(dir, maxDepth = Infinity, pred = entry => /\\.[ch]$/.",
							"(entry))",
							"function SelectLocations(node)",
							" n =>",
							"prop =>",
							"function LocationString(loc)",
							"node =>",
							"function Structs(nodes)",
							"node =>",
							"field =>",
							"node =>",
							"(field, i) =>",
							"function Table(list, pred = (n, l) => true)",
							"(n, i) =>",
							"e =>",
							"k =>",
							"([i, l, n]) =>",
							" function returnType(n)",
							" function numArgs(n)",
							" function Params(n)",
							"p =>",
							"k =>",
							"([i, l, n]) =>",
							"(k, j) =>",
							"(acc, name) =>",
							" function padTrunc(len, pad = ' ')",
							" s =>",
							"(name, i) =>",
							"pad = (cols, pad, sep) =>",
							"(key, i) =>",
							"(s, col) =>",
							"(acc, n) =>",
							"(acc, row) =>",
							"function PrintRange(range, file)",
							"function OverlapRange(r1, r2)",
							"GetRange = r =>",
							"InRange = (i, r) =>",
							"function ParentNode(node, ast = $.data)",
							"function NextSibling(node, ast = $.data)",
							"function PreviousSibling(node, ast = $.data)",
							"function FirstChild(node, ast = $.data)",
							"function LastChild(node, ast = $.data)",
							"function Terminate(exitCode)",
							"function ParseStructs(text)",
							"function* (decl, includes)",
							"name =>",
							"function InspectStruct(decl, includes, compiler = 'clang')",
							"line =>",
							"line =>",
							"(col, i) =>",
							"([field, offset, size]) =>",
							"(acc, line) =>",
							"toString(sep = ' ')",
							"line =>",
							"function RoundTo(value, align)",
							"function MakeStructClass(decl, filename)",
							"function* GenerateStructClass(decl, ffiPrefix = '')",
							"line =>",
							"([field, member]) =>",
							"function GenerateGetSet(name, offset, type, ffiPrefix)",
							"toHex = v =>",
							"toHex = v =>",
							"function ByteLength2TypedArray(byteLength, signed, floating)",
							"function ByteLength2Value(byteLength, signed, floating)",
							"FFI_Function",
							"constructor(node, prefix = '')",
							"([name, type], idx) =>",
							"generateDefine(fp, lib)",
							" (name, lib) =>",
							"colorText = x =>",
							"generateDoc()",
							"push = (...args) =>",
							"field =>",
							"(field, col) =>",
							"js = type =>",
							"generateCall()",
							"([name, type]) =>",
							"generate(fp, lib, exp)",
							"generateFunction(fp, lib)",
							"([name, type]) =>",
							"p =>",
							"p =>",
							"compileFunction(fp, lib)",
							"function FdReader(fd, bufferSize = 1024)",
							"async (push, stop) =>",
							"async function CommandRead(args)",
							"async reader =>",
							" function ReadOutput(fd)",
							"async function LibraryExports(file)",
							"line =>",
							"line =>",
							"column =>",
							"(a, b) =>",
							"entry =>",
							"function SaveLibraries()",
							"(acc, [n, e]) =>",
							"function ProcessFile(file, debug = true)",
							"function ParseECMAScript(file, params = {})",
							" (fr, i) =>",
							"function PrintECMAScript(ast, comments, printer = ",
							"({ indent: 4 }, comments))",
							"function PrintCArray(strings)",
							"function Namespaces(nodePath, ast = $.data)",
							"p =>",
							"n =>",
							"function* Constants(node, t = (name, value) => [name, !isNaN(+value) ? +value : value])",
							"function GetImports(ast = $.data)",
							" n =>",
							"function GetIdentifiers(nodes, key = null)",
							" (n, k) =>",
							"function MemberNames(members, flags = 0)",
							" n =>",
							"path =>",
							"p =>",
							"p =>",
							"name =>",
							" n =>",
							"([node, ptr]) =>",
							"path =>",
							"p =>",
							"name =>",
							"name =>",
							"function UnsetLoc(node, pred = (v, p) => true)",
							" (v, k) =>",
							"function MakeFFI(node, lib, exp, fp)",
							"function* ()",
							"async function ASTShell(...args)",
							" (a, p) =>",
							" (a, p) =>",
							" (a, p) =>",
							"get flags()",
							"v =>",
							"v =>",
							"d =>",
							"l =>",
							"async function Compile(file, ...args)",
							" function nameOrIdPred(name_or_id, pred = n => true)",
							" node =>",
							" node =>",
							" node =>",
							" node =>",
							"select(name_or_id, pred = n => true)",
							"getByIdOrName(name_or_id, pred = n => true)",
							"getType(name_or_id)",
							" n =>",
							"getFunction(name_or_id)",
							" n =>",
							"getVariable(name_or_id)",
							" n =>",
							"getLoc(node)",
							"() =>",
							"pathOf(needle, maxDepth = 10)",
							" n =>",
							"Pointer.prototype.chain = function(step, limit = Infinity)",
							".F = arg =>",
							".T = arg =>",
							" () =>",
							" node =>",
							"s =>",
							" fr =>"
						]
					},
					"AQAAAAAAAAAAAAAADw0AAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "quickjs/quickjs-debugger.c",
			"settings":
			{
				"buffer_size": 26782,
				"line_ending": "Unix"
			}
		},
		{
			"file": "quickjs/README.md",
			"settings":
			{
				"buffer_size": 405,
				"line_ending": "Unix"
			}
		},
		{
			"file": "clang-ast.js",
			"settings":
			{
				"buffer_size": 79733,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					759,
					1,
					"paste",
					null,
					"AgAAALjZAAAAAAAAu9kAAAAAAAAAAAAAu9kAAAAAAAC72QAAAAAAAAQAAABlbHNl",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALjZAAAAAAAAvNkAAAAAAAAAAAAAAADwvw"
				],
				[
					767,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAJTZAAAAAAAAldkAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJTZAAAAAAAAlNkAAAAAAAAAAAAAAGBnQA"
				],
				[
					774,
					1,
					"left_delete",
					null,
					"AQAAAJTZAAAAAAAAlNkAAAAAAAABAAAAOw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJXZAAAAAAAAldkAAAAAAAAAAAAAAADwvw"
				],
				[
					891,
					1,
					"insert",
					{
						"characters": "\nconst"
					},
					"CAAAAIj4AAAAAAAAifgAAAAAAAAAAAAAifgAAAAAAACR+AAAAAAAAAAAAACR+AAAAAAAAJP4AAAAAAAAAAAAAJP4AAAAAAAAlPgAAAAAAAAAAAAAlPgAAAAAAACV+AAAAAAAAAAAAACV+AAAAAAAAJb4AAAAAAAAAAAAAJb4AAAAAAAAl/gAAAAAAAAAAAAAl/gAAAAAAACY+AAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIj4AAAAAAAAiPgAAAAAAAD////////vfw"
				],
				[
					892,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAJj4AAAAAAAAmvgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJj4AAAAAAAAmPgAAAAAAAAAAAAAAADwvw"
				],
				[
					893,
					1,
					"insert",
					{
						"characters": "type"
					},
					"BAAAAJn4AAAAAAAAmvgAAAAAAAAAAAAAmvgAAAAAAACb+AAAAAAAAAAAAACb+AAAAAAAAJz4AAAAAAAAAAAAAJz4AAAAAAAAnfgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJn4AAAAAAAAmfgAAAAAAAAAAAAAAADwvw"
				],
				[
					895,
					1,
					"insert",
					{
						"characters": "=comp"
					},
					"BQAAAJ74AAAAAAAAn/gAAAAAAAAAAAAAn/gAAAAAAACg+AAAAAAAAAAAAACg+AAAAAAAAKH4AAAAAAAAAAAAAKH4AAAAAAAAovgAAAAAAAAAAAAAovgAAAAAAACj+AAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ74AAAAAAAAnvgAAAAAAAAAAAAAAADwvw"
				],
				[
					902,
					1,
					"insert_completion",
					{
						"completion": "compound_literal_expr",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "compound_literal_expr"
					},
					"AgAAAJ/4AAAAAAAAn/gAAAAAAAAEAAAAY29tcJ/4AAAAAAAAtPgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKP4AAAAAAAAo/gAAAAAAAAAAAAAAADwvw"
				],
				[
					903,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAALT4AAAAAAAAtfgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALT4AAAAAAAAtPgAAAAAAAAAAAAAAADwvw"
				],
				[
					904,
					1,
					"insert",
					{
						"characters": "\n\nif"
					},
					"BwAAALX4AAAAAAAAtvgAAAAAAAAAAAAAtvgAAAAAAADA+AAAAAAAAAAAAADA+AAAAAAAAMH4AAAAAAAAAAAAAMH4AAAAAAAAy/gAAAAAAAAAAAAAtvgAAAAAAAC2+AAAAAAAAAoAAAAgICAgICAgICAgwfgAAAAAAADC+AAAAAAAAAAAAADC+AAAAAAAAMP4AAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALX4AAAAAAAAtfgAAAAAAAAAAAAAAADwvw"
				],
				[
					905,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAMP4AAAAAAAAxfgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMP4AAAAAAAAw/gAAAAAAAAAAAAAAADwvw"
				],
				[
					906,
					1,
					"insert",
					{
						"characters": "type.qualType"
					},
					"DQAAAMT4AAAAAAAAxfgAAAAAAAAAAAAAxfgAAAAAAADG+AAAAAAAAAAAAADG+AAAAAAAAMf4AAAAAAAAAAAAAMf4AAAAAAAAyPgAAAAAAAAAAAAAyPgAAAAAAADJ+AAAAAAAAAAAAADJ+AAAAAAAAMr4AAAAAAAAAAAAAMr4AAAAAAAAy/gAAAAAAAAAAAAAy/gAAAAAAADM+AAAAAAAAAAAAADM+AAAAAAAAM34AAAAAAAAAAAAAM34AAAAAAAAzvgAAAAAAAAAAAAAzvgAAAAAAADP+AAAAAAAAAAAAADP+AAAAAAAAND4AAAAAAAAAAAAAND4AAAAAAAA0fgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMT4AAAAAAAAxPgAAAAAAAAAAAAAAADwvw"
				],
				[
					908,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANL4AAAAAAAA0/gAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANL4AAAAAAAA0vgAAAAAAAAAAAAAAADwvw"
				],
				[
					910,
					1,
					"insert",
					{
						"characters": "\nput"
					},
					"BwAAANP4AAAAAAAA1PgAAAAAAAAAAAAA1PgAAAAAAADe+AAAAAAAAAAAAADU+AAAAAAAANT4AAAAAAAACgAAACAgICAgICAgICDU+AAAAAAAAOD4AAAAAAAAAAAAAOD4AAAAAAAA4fgAAAAAAAAAAAAA4fgAAAAAAADi+AAAAAAAAAAAAADi+AAAAAAAAOP4AAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANP4AAAAAAAA0/gAAAAAAAAAAAAAAADwvw"
				],
				[
					911,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAOP4AAAAAAAA5fgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOP4AAAAAAAA4/gAAAAAAAAAAAAAAADwvw"
				],
				[
					912,
					1,
					"insert_snippet",
					{
						"contents": "`$0`"
					},
					"AQAAAOT4AAAAAAAA5vgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOT4AAAAAAAA5PgAAAAAAAAAAAAAAADwvw"
				],
				[
					913,
					1,
					"insert",
					{
						"characters": "(${type.qualTyp"
					},
					"DwAAAOX4AAAAAAAA5vgAAAAAAAAAAAAA5vgAAAAAAADn+AAAAAAAAAAAAADn+AAAAAAAAOj4AAAAAAAAAAAAAOj4AAAAAAAA6fgAAAAAAAAAAAAA6fgAAAAAAADq+AAAAAAAAAAAAADq+AAAAAAAAOv4AAAAAAAAAAAAAOv4AAAAAAAA7PgAAAAAAAAAAAAA7PgAAAAAAADt+AAAAAAAAAAAAADt+AAAAAAAAO74AAAAAAAAAAAAAO74AAAAAAAA7/gAAAAAAAAAAAAA7/gAAAAAAADw+AAAAAAAAAAAAADw+AAAAAAAAPH4AAAAAAAAAAAAAPH4AAAAAAAA8vgAAAAAAAAAAAAA8vgAAAAAAADz+AAAAAAAAAAAAADz+AAAAAAAAPT4AAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOX4AAAAAAAA5fgAAAAAAAAAAAAAAADwvw"
				],
				[
					914,
					1,
					"insert",
					{
						"characters": "e})"
					},
					"AwAAAPT4AAAAAAAA9fgAAAAAAAAAAAAA9fgAAAAAAAD2+AAAAAAAAAAAAAD2+AAAAAAAAPf4AAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPT4AAAAAAAA9PgAAAAAAAAAAAAAAADwvw"
				],
				[
					916,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAPn4AAAAAAAA+vgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPn4AAAAAAAA+fgAAAAAAAAAAAAAAADwvw"
				],
				[
					921,
					1,
					"right_delete",
					null,
					"AQAAAPv4AAAAAAAA+/gAAAAAAAAqAAAAcHV0KGNvbXBvdW5kX2xpdGVyYWxfZXhwci50eXBlLnF1YWxUeXBlKTsK",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPv4AAAAAAAAJfkAAAAAAAAAAAAAAAAAAA"
				],
				[
					994,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAADuyAAAAAAAAPLIAAAAAAAAAAAAAPLIAAAAAAABAsgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADuyAAAAAAAAO7IAAAAAAAAAAAAAAABGQA"
				],
				[
					996,
					1,
					"insert",
					{
						"characters": "globalThis."
					},
					"CwAAADuyAAAAAAAAPLIAAAAAAAAAAAAAPLIAAAAAAAA9sgAAAAAAAAAAAAA9sgAAAAAAAD6yAAAAAAAAAAAAAD6yAAAAAAAAP7IAAAAAAAAAAAAAP7IAAAAAAABAsgAAAAAAAAAAAABAsgAAAAAAAEGyAAAAAAAAAAAAAEGyAAAAAAAAQrIAAAAAAAAAAAAAQrIAAAAAAABDsgAAAAAAAAAAAABDsgAAAAAAAESyAAAAAAAAAAAAAESyAAAAAAAARbIAAAAAAAAAAAAARbIAAAAAAABGsgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADuyAAAAAAAAO7IAAAAAAAAAAAAAAABGQA"
				],
				[
					1003,
					1,
					"paste",
					null,
					"AgAAADqyAAAAAAAASrIAAAAAAAAAAAAASrIAAAAAAABKsgAAAAAAAAwAAAAgZ2xvYmFsVGhpcy4",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADqyAAAAAAAARrIAAAAAAAAAAAAAAADwvw"
				],
				[
					1004,
					1,
					"insert",
					{
						"characters": "-."
					},
					"AgAAAEqyAAAAAAAAS7IAAAAAAAAAAAAAS7IAAAAAAABMsgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEqyAAAAAAAASrIAAAAAAAAAAAAAAADwvw"
				],
				[
					1005,
					2,
					"left_delete",
					null,
					"AgAAAEuyAAAAAAAAS7IAAAAAAAABAAAALkqyAAAAAAAASrIAAAAAAAABAAAALQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEyyAAAAAAAATLIAAAAAAAAAAAAAAADwvw"
				],
				[
					1006,
					1,
					"insert",
					{
						"characters": ".errorNode=node;"
					},
					"EAAAAEqyAAAAAAAAS7IAAAAAAAAAAAAAS7IAAAAAAABMsgAAAAAAAAAAAABMsgAAAAAAAE2yAAAAAAAAAAAAAE2yAAAAAAAATrIAAAAAAAAAAAAATrIAAAAAAABPsgAAAAAAAAAAAABPsgAAAAAAAFCyAAAAAAAAAAAAAFCyAAAAAAAAUbIAAAAAAAAAAAAAUbIAAAAAAABSsgAAAAAAAAAAAABSsgAAAAAAAFOyAAAAAAAAAAAAAFOyAAAAAAAAVLIAAAAAAAAAAAAAVLIAAAAAAABVsgAAAAAAAAAAAABVsgAAAAAAAFayAAAAAAAAAAAAAFayAAAAAAAAV7IAAAAAAAAAAAAAV7IAAAAAAABYsgAAAAAAAAAAAABYsgAAAAAAAFmyAAAAAAAAAAAAAFmyAAAAAAAAWrIAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEqyAAAAAAAASrIAAAAAAAAAAAAAAADwvw"
				],
				[
					1023,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAADAFAQAAAAAAMQUBAAAAAAAAAAAAMQUBAAAAAAA5BQEAAAAAAAAAAAA5BQEAAAAAADoFAQAAAAAAAAAAADoFAQAAAAAAQgUBAAAAAAAAAAAAMQUBAAAAAAAxBQEAAAAAAAgAAAAgICAgICAgIDEFAQAAAAAAOwUBAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADAFAQAAAAAAMAUBAAAAAAAAAAAAAADwvw"
				],
				[
					1024,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAADsFAQAAAAAAPAUBAAAAAAAAAAAAPAUBAAAAAABGBQEAAAAAAAAAAAAxBQEAAAAAADEFAQAAAAAACgAAACAgICAgICAgICA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADsFAQAAAAAAOwUBAAAAAAAAAAAAAADwvw"
				],
				[
					1027,
					1,
					"insert",
					{
						"characters": "const"
					},
					"BgAAADEFAQAAAAAAMgUBAAAAAAAAAAAAMwUBAAAAAAAzBQEAAAAAAAoAAAAgICAgICAgICAgMgUBAAAAAAAzBQEAAAAAAAAAAAAzBQEAAAAAADQFAQAAAAAAAAAAADQFAQAAAAAANQUBAAAAAAAAAAAANQUBAAAAAAA2BQEAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADEFAQAAAAAAMQUBAAAAAAAAAAAAAIBbQA"
				],
				[
					1028,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADYFAQAAAAAANwUBAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADYFAQAAAAAANgUBAAAAAAAAAAAAAADwvw"
				],
				[
					1029,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAADcFAQAAAAAAOQUBAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADcFAQAAAAAANwUBAAAAAAAAAAAAAADwvw"
				],
				[
					1030,
					1,
					"insert",
					{
						"characters": "name"
					},
					"BAAAADgFAQAAAAAAOQUBAAAAAAAAAAAAOQUBAAAAAAA6BQEAAAAAAAAAAAA6BQEAAAAAADsFAQAAAAAAAAAAADsFAQAAAAAAPAUBAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADgFAQAAAAAAOAUBAAAAAAAAAAAAAADwvw"
				],
				[
					1032,
					1,
					"insert",
					{
						"characters": "=predefine"
					},
					"CgAAAD0FAQAAAAAAPgUBAAAAAAAAAAAAPgUBAAAAAAA/BQEAAAAAAAAAAAA/BQEAAAAAAEAFAQAAAAAAAAAAAEAFAQAAAAAAQQUBAAAAAAAAAAAAQQUBAAAAAABCBQEAAAAAAAAAAABCBQEAAAAAAEMFAQAAAAAAAAAAAEMFAQAAAAAARAUBAAAAAAAAAAAARAUBAAAAAABFBQEAAAAAAAAAAABFBQEAAAAAAEYFAQAAAAAAAAAAAEYFAQAAAAAARwUBAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD0FAQAAAAAAPQUBAAAAAAAAAAAAAADwvw"
				],
				[
					1033,
					1,
					"insert_completion",
					{
						"completion": "predefined_expr",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "predefined_expr"
					},
					"AgAAAD4FAQAAAAAAPgUBAAAAAAAJAAAAcHJlZGVmaW5lPgUBAAAAAABNBQEAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEcFAQAAAAAARwUBAAAAAAAAAAAAAADwvw"
				],
				[
					1034,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAE0FAQAAAAAATgUBAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAE0FAQAAAAAATQUBAAAAAAAAAAAAAADwvw"
				],
				[
					1035,
					1,
					"insert",
					{
						"characters": "\n\nput"
					},
					"BQAAAE4FAQAAAAAATwUBAAAAAAAAAAAATwUBAAAAAABQBQEAAAAAAAAAAABQBQEAAAAAAFEFAQAAAAAAAAAAAFEFAQAAAAAAUgUBAAAAAAAAAAAAUgUBAAAAAABTBQEAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAE4FAQAAAAAATgUBAAAAAAAAAAAAAADwvw"
				],
				[
					1036,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAFMFAQAAAAAAVQUBAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFMFAQAAAAAAUwUBAAAAAAAAAAAAAADwvw"
				],
				[
					1037,
					1,
					"insert",
					{
						"characters": "name"
					},
					"BAAAAFQFAQAAAAAAVQUBAAAAAAAAAAAAVQUBAAAAAABWBQEAAAAAAAAAAABWBQEAAAAAAFcFAQAAAAAAAAAAAFcFAQAAAAAAWAUBAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFQFAQAAAAAAVAUBAAAAAAAAAAAAAADwvw"
				],
				[
					1039,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAFkFAQAAAAAAWgUBAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFkFAQAAAAAAWQUBAAAAAAAAAAAAAADwvw"
				],
				[
					1041,
					1,
					"left_delete",
					null,
					"AQAAAFoFAQAAAAAAWgUBAAAAAAABAAAACg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFsFAQAAAAAAWwUBAAAAAAAAAAAAAIBbQA"
				],
				[
					1061,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAOYGAQAAAAAA5wYBAAAAAAAAAAAA5wYBAAAAAADvBgEAAAAAAAAAAADvBgEAAAAAAPAGAQAAAAAAAAAAAPAGAQAAAAAA+AYBAAAAAAAAAAAA5wYBAAAAAADnBgEAAAAAAAgAAAAgICAgICAgIOcGAQAAAAAA8QYBAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOYGAQAAAAAA5gYBAAAAAAAAAAAAAADwvw"
				],
				[
					1062,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAPEGAQAAAAAA8gYBAAAAAAAAAAAA8gYBAAAAAAD8BgEAAAAAAAAAAADnBgEAAAAAAOcGAQAAAAAACgAAACAgICAgICAgICA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPEGAQAAAAAA8QYBAAAAAAAAAAAAAADwvw"
				],
				[
					1077,
					1,
					"paste",
					null,
					"AQAAAOcGAQAAAAAA8gYBAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOcGAQAAAAAA5wYBAAAAAAAAAAAAAADwvw"
				],
				[
					1082,
					1,
					"insert",
					{
						"characters": "stmt_expr"
					},
					"CwAAAOsGAQAAAAAA7AYBAAAAAAAAAAAA7AYBAAAAAADsBgEAAAAAAAQAAABuYW1l8AYBAAAAAADwBgEAAAAAAAoAAAAgICAgICAgICAg7AYBAAAAAADtBgEAAAAAAAAAAADtBgEAAAAAAO4GAQAAAAAAAAAAAO4GAQAAAAAA7wYBAAAAAAAAAAAA7wYBAAAAAADwBgEAAAAAAAAAAADwBgEAAAAAAPEGAQAAAAAAAAAAAPEGAQAAAAAA8gYBAAAAAAAAAAAA8gYBAAAAAADzBgEAAAAAAAAAAADzBgEAAAAAAPQGAQAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOsGAQAAAAAA7wYBAAAAAAAAAAAAAADwvw"
				],
				[
					1083,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAPQGAQAAAAAA9gYBAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPQGAQAAAAAA9AYBAAAAAAAAAAAAAADwvw"
				],
				[
					1084,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAPQGAQAAAAAA9AYBAAAAAAABAAAAKPQGAQAAAAAA9AYBAAAAAAABAAAAKQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPUGAQAAAAAA9QYBAAAAAAAAAAAAAADwvw"
				],
				[
					1085,
					1,
					"insert",
					{
						"characters": ".inner"
					},
					"BgAAAPQGAQAAAAAA9QYBAAAAAAAAAAAA9QYBAAAAAAD2BgEAAAAAAAAAAAD2BgEAAAAAAPcGAQAAAAAAAAAAAPcGAQAAAAAA+AYBAAAAAAAAAAAA+AYBAAAAAAD5BgEAAAAAAAAAAAD5BgEAAAAAAPoGAQAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPQGAQAAAAAA9AYBAAAAAAAAAAAAAADwvw"
				],
				[
					1086,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAPoGAQAAAAAA/AYBAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPoGAQAAAAAA+gYBAAAAAAAAAAAAAADwvw"
				],
				[
					1087,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAPsGAQAAAAAA/AYBAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPsGAQAAAAAA+wYBAAAAAAAAAAAAAADwvw"
				],
				[
					1090,
					3,
					"right_delete",
					null,
					"AwAAAOcGAQAAAAAA5wYBAAAAAAABAAAAcOcGAQAAAAAA5wYBAAAAAAABAAAAdecGAQAAAAAA5wYBAAAAAAABAAAAdA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOcGAQAAAAAA5wYBAAAAAAAAAAAAAAAAAA"
				],
				[
					1091,
					1,
					"insert",
					{
						"characters": "printer.print"
					},
					"DQAAAOcGAQAAAAAA6AYBAAAAAAAAAAAA6AYBAAAAAADpBgEAAAAAAAAAAADpBgEAAAAAAOoGAQAAAAAAAAAAAOoGAQAAAAAA6wYBAAAAAAAAAAAA6wYBAAAAAADsBgEAAAAAAAAAAADsBgEAAAAAAO0GAQAAAAAAAAAAAO0GAQAAAAAA7gYBAAAAAAAAAAAA7gYBAAAAAADvBgEAAAAAAAAAAADvBgEAAAAAAPAGAQAAAAAAAAAAAPAGAQAAAAAA8QYBAAAAAAAAAAAA8QYBAAAAAADyBgEAAAAAAAAAAADyBgEAAAAAAPMGAQAAAAAAAAAAAPMGAQAAAAAA9AYBAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOcGAQAAAAAA5wYBAAAAAAAAAAAAAADwvw"
				],
				[
					1095,
					2,
					"left_delete",
					null,
					"AgAAAAoHAQAAAAAACgcBAAAAAAABAAAACgkHAQAAAAAACQcBAAAAAAABAAAACg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAsHAQAAAAAACwcBAAAAAAAAAAAAAOBhQA"
				],
				[
					1132,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAADmwAAAAAAAAOrAAAAAAAAAAAAAAOrAAAAAAAAA6sAAAAAAAAC8AAAAgICAgICAgIC8vICBsZXQgbG9jYXRpb24gPSBuZXcgTG9jYXRpb24obm9kZSk7Cg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADmwAAAAAAAAaLAAAAAAAAAAAAAAAADwvw"
				],
				[
					1135,
					1,
					"cut",
					null,
					"AQAAABywAAAAAAAAHLAAAAAAAAAlAQAACiAgICAgICAgbGV0IHsgbG9jIH0gPSBub2RlOwogCiAgICAgICAgaWYobG9jPy5saW5lICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgIGNvbnN0IHsgbGluZSwgY29sdW1uIH0gPSBsb2M7CiAgICAgICAgICB0aGlzLmxvYyA9IHsKICAgICAgICAgICAgbGluZSwKICAgICAgICAgICAgY29sdW1uLAogICAgICAgICAgICB0b1N0cmluZygpIHsKICAgICAgICAgICAgICByZXR1cm4gW2xpbmUsIGNvbHVtbl0uZmlsdGVyKGkgPT4gaSkuam9pbignOicpOwogICAgICAgICAgICB9CiAgICAgICAgICB9OwogICAgICAgIH0",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABywAAAAAAAAQbEAAAAAAAAAAAAAAADwvw"
				],
				[
					1138,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAAexAAAAAAAACLEAAAAAAAAAAAAACLEAAAAAAAALsQAAAAAAAAAAAAALsQAAAAAAAAyxAAAAAAAAAAAAAAyxAAAAAAAAD7EAAAAAAAAAAAAACLEAAAAAAAAIsQAAAAAAAAMAAAAgICA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAexAAAAAAAAB7EAAAAAAAAAAAAAAADwvw"
				],
				[
					1139,
					1,
					"paste",
					null,
					"AQAAAAyxAAAAAAAAMbIAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAyxAAAAAAAADLEAAAAAAAAAAAAAAADwvw"
				],
				[
					1156,
					1,
					"revert",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGexAAAAAAAAZ7EAAAAAAAAAAAAAAADwvw"
				],
				[
					1184,
					1,
					"insert",
					{
						"characters": "exists"
					},
					"BwAAAPeMAAAAAAAA+IwAAAAAAAAAAAAA+IwAAAAAAAD4jAAAAAAAAAYAAABpc0ZpbGX4jAAAAAAAAPmMAAAAAAAAAAAAAPmMAAAAAAAA+owAAAAAAAAAAAAA+owAAAAAAAD7jAAAAAAAAAAAAAD7jAAAAAAAAPyMAAAAAAAAAAAAAPyMAAAAAAAA/YwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPeMAAAAAAAA/YwAAAAAAAAAAAAAAADwvw"
				],
				[
					1209,
					2,
					"right_delete",
					null,
					"AgAAACmNAAAAAAAAKY0AAAAAAAAQAAAAcGF0aC5pc0ZpbGUocCkgJimNAAAAAAAAKY0AAAAAAAABAAAAJg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADmNAAAAAAAAKY0AAAAAAAAAAAAAAADwvw"
				],
				[
					1226,
					1,
					"insert",
					{
						"characters": "fs"
					},
					"AwAAAPKMAAAAAAAA84wAAAAAAAAAAAAA84wAAAAAAADzjAAAAAAAAAQAAABwYXRo84wAAAAAAAD0jAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPKMAAAAAAAA9owAAAAAAAAAAAAAAADwvw"
				],
				[
					1229,
					1,
					"insert",
					{
						"characters": "Sync"
					},
					"BAAAAPuMAAAAAAAA/IwAAAAAAAAAAAAA/IwAAAAAAAD9jAAAAAAAAAAAAAD9jAAAAAAAAP6MAAAAAAAAAAAAAP6MAAAAAAAA/4wAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPuMAAAAAAAA+4wAAAAAAAAAAAAAAADwvw"
				],
				[
					34,
					1,
					"cut",
					null,
					"AQAAAEEnAAAAAAAAQScAAAAAAABQAAAACiAgaXNBcnJheSgpIHsKICAgIGxldCBzdHIgPSB0aGlzICsgJyc7CiAgICByZXR1cm4gL1xbWzAtOV0qXF0kLy50ZXN0KHN0cik7CiAgfQo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABBJwAAAAAAAJEnAAAAAAAAAAAAAAAA8L8"
				],
				[
					35,
					2,
					"paste",
					null,
					"AgAAAEEnAAAAAAAAkScAAAAAAAAAAAAAkScAAAAAAADhJwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABBJwAAAAAAAEEnAAAAAAAAAAAAAAAA8L8"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": "Inter"
					},
					"BgAAAJYnAAAAAAAAlycAAAAAAAAAAAAAlycAAAAAAACXJwAAAAAAAAUAAABBcnJheZcnAAAAAAAAmCcAAAAAAAAAAAAAmCcAAAAAAACZJwAAAAAAAAAAAACZJwAAAAAAAJonAAAAAAAAAAAAAJonAAAAAAAAmycAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACWJwAAAAAAAJsnAAAAAAAAAAAAAAAA8L8"
				],
				[
					39,
					2,
					"left_delete",
					null,
					"AgAAAJonAAAAAAAAmicAAAAAAAABAAAAcpknAAAAAAAAmScAAAAAAAABAAAAZQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACbJwAAAAAAAJsnAAAAAAAAAAAAAAAA8L8"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": "eger"
					},
					"BAAAAJknAAAAAAAAmicAAAAAAAAAAAAAmicAAAAAAACbJwAAAAAAAAAAAACbJwAAAAAAAJwnAAAAAAAAAAAAAJwnAAAAAAAAnScAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACZJwAAAAAAAJknAAAAAAAAAAAAAAAA8L8"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": "\nreturn"
					},
					"CQAAAKEnAAAAAAAAoicAAAAAAAAAAAAAoicAAAAAAACkJwAAAAAAAAAAAACkJwAAAAAAAKYnAAAAAAAAAAAAAKYnAAAAAAAApycAAAAAAAAAAAAApycAAAAAAACoJwAAAAAAAAAAAACoJwAAAAAAAKknAAAAAAAAAAAAAKknAAAAAAAAqicAAAAAAAAAAAAAqicAAAAAAACrJwAAAAAAAAAAAACrJwAAAAAAAKwnAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAChJwAAAAAAAKEnAAAAAAAA////////738"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": " this."
					},
					"BgAAAKwnAAAAAAAArScAAAAAAAAAAAAArScAAAAAAACuJwAAAAAAAAAAAACuJwAAAAAAAK8nAAAAAAAAAAAAAK8nAAAAAAAAsCcAAAAAAAAAAAAAsCcAAAAAAACxJwAAAAAAAAAAAACxJwAAAAAAALInAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACsJwAAAAAAAKwnAAAAAAAAAAAAAAAA8L8"
				],
				[
					45,
					5,
					"left_delete",
					null,
					"BQAAALEnAAAAAAAAsScAAAAAAAABAAAALrAnAAAAAAAAsCcAAAAAAAABAAAAc68nAAAAAAAArycAAAAAAAABAAAAaa4nAAAAAAAAricAAAAAAAABAAAAaK0nAAAAAAAArScAAAAAAAABAAAAdA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACyJwAAAAAAALInAAAAAAAAAAAAAAAA8L8"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": "!this.isPouinter"
					},
					"EAAAAK0nAAAAAAAAricAAAAAAAAAAAAAricAAAAAAACvJwAAAAAAAAAAAACvJwAAAAAAALAnAAAAAAAAAAAAALAnAAAAAAAAsScAAAAAAAAAAAAAsScAAAAAAACyJwAAAAAAAAAAAACyJwAAAAAAALMnAAAAAAAAAAAAALMnAAAAAAAAtCcAAAAAAAAAAAAAtCcAAAAAAAC1JwAAAAAAAAAAAAC1JwAAAAAAALYnAAAAAAAAAAAAALYnAAAAAAAAtycAAAAAAAAAAAAAtycAAAAAAAC4JwAAAAAAAAAAAAC4JwAAAAAAALknAAAAAAAAAAAAALknAAAAAAAAuicAAAAAAAAAAAAAuicAAAAAAAC7JwAAAAAAAAAAAAC7JwAAAAAAALwnAAAAAAAAAAAAALwnAAAAAAAAvScAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACtJwAAAAAAAK0nAAAAAAAAAAAAAAAA8L8"
				],
				[
					47,
					6,
					"left_delete",
					null,
					"BgAAALwnAAAAAAAAvCcAAAAAAAABAAAAcrsnAAAAAAAAuycAAAAAAAABAAAAZbonAAAAAAAAuicAAAAAAAABAAAAdLknAAAAAAAAuScAAAAAAAABAAAAbrgnAAAAAAAAuCcAAAAAAAABAAAAabcnAAAAAAAAtycAAAAAAAABAAAAdQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC9JwAAAAAAAL0nAAAAAAAAAAAAAAAA8L8"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": "inter"
					},
					"BQAAALcnAAAAAAAAuCcAAAAAAAAAAAAAuCcAAAAAAAC5JwAAAAAAAAAAAAC5JwAAAAAAALonAAAAAAAAAAAAALonAAAAAAAAuycAAAAAAAAAAAAAuycAAAAAAAC8JwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC3JwAAAAAAALcnAAAAAAAAAAAAAAAA8L8"
				],
				[
					49,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAALwnAAAAAAAAvicAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC8JwAAAAAAALwnAAAAAAAAAAAAAAAA8L8"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": " &&"
					},
					"AwAAAL4nAAAAAAAAvycAAAAAAAAAAAAAvycAAAAAAADAJwAAAAAAAAAAAADAJwAAAAAAAMEnAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC+JwAAAAAAAL4nAAAAAAAAAAAAAAAA8L8"
				],
				[
					53,
					1,
					"cut",
					null,
					"AQAAAK0nAAAAAAAArScAAAAAAAAUAAAAIXRoaXMuaXNQb2ludGVyKCkgJiY",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADBJwAAAAAAAK0nAAAAAAAAAAAAAAAA8L8"
				],
				[
					54,
					2,
					"paste",
					null,
					"AgAAAK0nAAAAAAAAwScAAAAAAAAAAAAAwScAAAAAAADVJwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACtJwAAAAAAAK0nAAAAAAAAAAAAAAAA8L8"
				],
				[
					59,
					1,
					"insert",
					{
						"characters": "C"
					},
					"AgAAAMcnAAAAAAAAyCcAAAAAAAAAAAAAyCcAAAAAAADIJwAAAAAAAAkAAABpc1BvaW50ZXI",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADHJwAAAAAAANAnAAAAAAAAAAAAAAAA8L8"
				],
				[
					60,
					1,
					"left_delete",
					null,
					"AQAAAMcnAAAAAAAAxycAAAAAAAABAAAAQw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADIJwAAAAAAAMgnAAAAAAAAAAAAAAAA8L8"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": "isCom"
					},
					"BQAAAMcnAAAAAAAAyCcAAAAAAAAAAAAAyCcAAAAAAADJJwAAAAAAAAAAAADJJwAAAAAAAMonAAAAAAAAAAAAAMonAAAAAAAAyycAAAAAAAAAAAAAyycAAAAAAADMJwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADHJwAAAAAAAMcnAAAAAAAAAAAAAAAA8L8"
				],
				[
					62,
					1,
					"insert_completion",
					{
						"completion": "isCompound",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "isCompound"
					},
					"AgAAAMcnAAAAAAAAxycAAAAAAAAFAAAAaXNDb23HJwAAAAAAANEnAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADMJwAAAAAAAMwnAAAAAAAAAAAAAAAA8L8"
				],
				[
					68,
					1,
					"paste",
					null,
					"AQAAANYnAAAAAAAA6icAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADWJwAAAAAAANYnAAAAAAAAAAAAAAAA8L8"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": "isFl"
					},
					"BQAAANwnAAAAAAAA3ScAAAAAAAAAAAAA3ScAAAAAAADdJwAAAAAAAAkAAABpc1BvaW50ZXLdJwAAAAAAAN4nAAAAAAAAAAAAAN4nAAAAAAAA3ycAAAAAAAAAAAAA3ycAAAAAAADgJwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADcJwAAAAAAAOUnAAAAAAAAAAAAAAAA8L8"
				],
				[
					74,
					1,
					"insert_completion",
					{
						"completion": "isFloatingPoint",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "isFloatingPoint"
					},
					"AgAAANwnAAAAAAAA3CcAAAAAAAAEAAAAaXNGbNwnAAAAAAAA6ycAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADgJwAAAAAAAOAnAAAAAAAAAAAAAAAA8L8"
				],
				[
					77,
					3,
					"right_delete",
					null,
					"AwAAAO0nAAAAAAAA7ScAAAAAAAABAAAAIO0nAAAAAAAA7ScAAAAAAAABAAAAJu0nAAAAAAAA7ScAAAAAAAABAAAAJg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADtJwAAAAAAAO0nAAAAAAAAAAAAAAAA8L8"
				],
				[
					78,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAO0nAAAAAAAA7icAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADtJwAAAAAAAO0nAAAAAAAAAAAAAAAA8L8"
				],
				[
					80,
					1,
					"right_delete",
					null,
					"AQAAAO4nAAAAAAAA7icAAAAAAAA9AAAACiAgICBsZXQgc3RyID0gdGhpcyArICcnOwogICAgcmV0dXJuIC9cW1swLTldKlxdJC8udGVzdChzdHIpOw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADuJwAAAAAAACsoAAAAAAAAAAAAAADAh0A"
				]
			]
		},
		{
			"file": "ast-shell.js",
			"settings":
			{
				"buffer_size": 38565,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "os-helpers.js",
			"settings":
			{
				"buffer_size": 2642,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					33,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAJEGAAAAAAAAkgYAAAAAAAAAAAAAkgYAAAAAAACSBgAAAAAAAAMAAAAgLy8",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJQGAAAAAAAAkQYAAAAAAAAAAAAAAADwvw"
				],
				[
					38,
					2,
					"left_delete",
					null,
					"AgAAAKUGAAAAAAAApQYAAAAAAAAFAAAAc3RkaW+kBgAAAAAAAKQGAAAAAAAAAQAAAC4",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKUGAAAAAAAAqgYAAAAAAAAAAAAAAADwvw"
				],
				[
					43,
					2,
					"left_delete",
					null,
					"AgAAAK0GAAAAAAAArQYAAAAAAAAFAAAAc3RkaW+sBgAAAAAAAKwGAAAAAAAAAQAAAC4",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK0GAAAAAAAAsgYAAAAAAAAAAAAAAADwvw"
				],
				[
					62,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AgAAAKQAAAAAAAAApQAAAAAAAAAAAAAApQAAAAAAAAClAAAAAAAAAA0AAAAuL2xpYi9taXNjLmpz",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKQAAAAAAAAAsQAAAAAAAAAAAAAAAADwvw"
				],
				[
					63,
					1,
					"left_delete",
					null,
					"AQAAAKQAAAAAAAAApAAAAAAAAAABAAAAdA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKUAAAAAAAAApQAAAAAAAAAAAAAAAADwvw"
				],
				[
					64,
					1,
					"insert",
					{
						"characters": "util"
					},
					"BAAAAKQAAAAAAAAApQAAAAAAAAAAAAAApQAAAAAAAACmAAAAAAAAAAAAAACmAAAAAAAAAKcAAAAAAAAAAAAAAKcAAAAAAAAAqAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKQAAAAAAAAApAAAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "lib/path.js",
			"settings":
			{
				"buffer_size": 15842,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"right",
				"Browse Mode: Outline (Right)"
			],
			[
				"prettier",
				"JsPrettier: Format Code"
			],
			[
				"prett",
				"JsPrettier: Format Code"
			],
			[
				":q",
				"Coffee: Quick Run Bar"
			],
			[
				"clang",
				"Clang Format: Format Selection"
			],
			[
				"mode",
				"HTML: Encode Special Characters"
			],
			[
				"insert",
				"Snippet: Insert livereload.js script"
			],
			[
				":w",
				":w - Save"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"OUTLIN",
				"Browse Mode: Outline (Right)"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 142.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv",
		"/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64",
		"/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/data",
		"/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/include",
		"/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/include/AL",
		"/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/include/GLES2",
		"/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/lib",
		"/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/src",
		"/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/src/cimgui",
		"/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/src/sample",
		"/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/src/test",
		"/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/src/util",
		"/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/tool",
		"/home/roman/Projects/plot-cv/ol-layerswitcher",
		"/home/roman/Projects/plot-cv/qjs-opencv"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/include/libtcc.h",
		"/home/roman/Projects/plot-cv/quickjs.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/property-enumeration.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-deep.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/vector.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/io.js",
		"/home/roman/Projects/plot-cv/io-helpers.js",
		"/home/roman/Projects/plot-cv/ast-shell.js",
		"/home/roman/Projects/plot-cv/debugger-server.js",
		"/home/roman/Projects/plot-cv/test-video.js",
		"/home/roman/Projects/plot-cv/debugger-client.js",
		"/home/roman/Projects/plot-cv/lib/container/multiMap.js",
		"/home/roman/Projects/plot-cv/lib/bpg/bpgdec.js",
		"/home/roman/Projects/plot-cv/lib/bpg/bpgdec8.js",
		"/home/roman/Projects/plot-cv/lib/dom/css.js",
		"/home/roman/Projects/plot-cv/clang-list.js",
		"/home/roman/Projects/plot-cv/os-helpers.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-child-process.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/clang-ast.js",
		"/home/roman/Projects/plot-cv/lib/eagle/document.js",
		"/home/roman/Projects/plot-cv/lib/eagle/element.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/path.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-path.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fs.js",
		"/home/roman/Projects/plot-cv/upload-server.js",
		"/home/roman/Projects/plot-cv/lib/cpp.js",
		"/home/roman/Projects/plot-cv/lib/util.js",
		"/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/tool/build_native/3rdparty/glfw/examples/gears.c",
		"/home/roman/Projects/plot-cv/lib/bpg/bpgdec8.html",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/js/rpc.js",
		"/home/roman/Projects/plot-cv/debugger.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.c",
		"/home/roman/Projects/plot-cv/test-alea.js",
		"/home/roman/Projects/plot-cv/draw.js",
		"/home/roman/Projects/plot-cv/lib/async/debounce.js",
		"/home/roman/Projects/plot-cv/lib/compileCommand.js",
		"/home/roman/Projects/plot-cv/compile_commands.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
		"/home/roman/Projects/plot-cv/lib/bpg/bpgdec.wat",
		"/home/roman/Projects/plot-cv/lib/bpg/bpgdec.mjs",
		"/home/roman/Projects/plot-cv/fire.js",
		"/home/roman/Projects/plot-cv/lib/bpg/bpgdec.html.symbols",
		"/home/roman/Projects/plot-cv/lib/bpg/bpgdec8.wat",
		"/home/roman/Projects/plot-cv/lib/async/websocket.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/property-enumeration.h",
		"/home/roman/Projects/plot-cv/lib/build/compileCommand.js",
		"/home/roman/Projects/plot-cv/webSocket.js",
		"/home/roman/Projects/plot-cv/debugger.html",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.h",
		"/home/roman/Projects/plot-cv/debuggerprotocol.js",
		"/home/roman/Projects/plot-cv/lib/repeater/repeater.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/qjsm.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-imgui/cmake/BuildGLFW.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/cmake/BuildBrotli.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/cmake/BuildLibwebsockets.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-glfw/cmake/BuildGLFW.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/cmake/BuildMbedTLS.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/cmake/BuildCURL.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-glfw/cmake/BuildGL3W.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-sound/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/plugin-standalone/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/brotli/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/cmake/FindLibreSSL.cmake",
		"/home/roman/Projects/plot-cv/test-nanovg.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/js/debugger-client.js",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.c",
		"/home/roman/Projects/plot-cv/test-repeater.js",
		"/home/roman/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/bin/wscli.js",
		"/home/roman/Projects/plot-cv/repredator/pre8.png",
		"/home/roman/Projects/plot-cv/repredator/pre7.png",
		"/home/roman/Projects/plot-cv/repredator/pre2.png",
		"/home/roman/Projects/plot-cv/repredator/pre1.png",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/test-rpc.js",
		"/home/roman/Projects/plot-cv/portaudio2.js",
		"/usr/include/portaudio.h",
		"/home/roman/Projects/plot-cv/portaudio.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
		"/usr/include/portmidi.h",
		"/home/roman/Projects/plot-cv/portmidi.js",
		"/home/roman/Projects/plot-cv/list.html",
		"/home/roman/Projects/plot-cv/eagle-shell.js",
		"/home/roman/Projects/plot-cv/out.tmp",
		"/home/roman/Projects/plot-cv/webakeit.js",
		"/home/roman/Projects/plot-cv/webakeit-telegram.js",
		"/home/roman/Downloads/Telegram Desktop/ChatExport_2024-04-09/messages.html",
		"/home/roman/Projects/plot-cv/static/css/webakeit.css",
		"/home/roman/Projects/plot-cv/webakeit.tmp",
		"/home/roman/Projects/plot-cv/webakeit.html",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/xml-shell.js",
		"/home/roman/Projects/plot-cv/plot-cv.sublime-project",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/xml-shell.es",
		"/home/roman/Projects/plot-cv/lib/geom/splines.js",
		"/home/roman/Projects/plot-cv/fire.html",
		"/home/roman/Projects/plot-cv/numbers2.c",
		"/home/roman/Projects/plot-cv/main.js",
		"/home/roman/Projects/plot-cv/lib/geom/pointList.js",
		"/home/roman/Projects/plot-cv/lib/autoStore.js",
		"/home/roman/Projects/plot-cv/lib/async/events.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
		"/home/roman/Projects/plot-cv/lib/geom/point.js",
		"/home/roman/Projects/plot-cv/lib/misc.js",
		"/home/roman/Projects/plot-cv/components.js",
		"/home/roman/Projects/plot-cv/draw.html",
		"/home/roman/Projects/plot-cv/static/css/draw.css",
		"/home/roman/Projects/plot-cv/qjs-opencv/point.js",
		"/home/roman/Projects/plot-cv/draw-utils.js",
		"/home/roman/Projects/plot-cv/lib/fd-graph.js",
		"/home/roman/Projects/plot-cv/svg-box.js",
		"/home/roman/Projects/plot-cv/numbers.c",
		"/home/roman/Projects/plot-cv/hex.c",
		"/home/roman/Projects/plot-cv/upload-worker.js",
		"/home/roman/Projects/plot-cv/mailcow-db.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/examples/ssl-client.js",
		"/home/roman/Projects/plot-cv/promise-worker.js",
		"/home/roman/Projects/plot-cv/upload.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-mysql.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/wscli.js",
		"/home/roman/Projects/plot-cv/lib/geom/graph.js",
		"/home/roman/Projects/plot-cv/lib/eagle/node.js",
		"/home/roman/Projects/plot-cv/workertest.js",
		"/home/roman/Projects/plot-cv/test-worker.js",
		"/home/roman/Projects/plot-cv/static/css/upload.css"
	],
	"find":
	{
		"height": 41.0
	},
	"find_in_files":
	{
		"height": 113.0,
		"where_history":
		[
			"/home/roman/Projects/plot-cv,*.js,*.c,*.h,*.cmake,CMakeLists.txt,-*/doc/*,-*/inst/*,-*/build/*",
			"/home/roman/Projects/plot-cv,*.js,*.c,*.h,*.cmake,CMakeLists.txt,-*/inst/*,-*/build/*",
			"/home/roman/Projects/plot-cv,*.js,*.c,*.h,*.cmake,CMakeLists.txt",
			"/home/roman/Projects/plot-cv,*.jsx,*.c,*.h,*.cmake,CMakeLists.txt",
			"/home/roman/Projects/plot-cv,*.js,*.c,*.h,*.cmake,CMakeLists.txt",
			"/home/roman/Projects/plot-cv,*.js,*.cmake,CMakeLists.txt",
			"/home/roman/Projects/plot-cv,*.jsx,*.cmake,CMakeLists.txt",
			"/home/roman/Projects/plot-cv,*.js,*.cmake,CMakeLists.txt",
			"/home/roman/Projects/plot-cv,*.js",
			"/home/roman/Projects/plot-cv/lib/eagle,*.js",
			"/home/roman/Projects/plot-cv/lib,*.js",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"FFI_Fun",
			"FFI",
			"isPointer",
			"class Type",
			"CommandLine",
			" run\\(",
			"LoadHistory",
			"cmdhist",
			"cmdhistory",
			"JSON.parse",
			"ReadJSON",
			"loc",
			"_check",
			"\\bparse\\b",
			"\\bconsole\\b",
			"new REPL",
			"startInter",
			"exists",
			"spawn",
			"path",
			"argv",
			"scriptArgs",
			"Path must be a string",
			"process\\b",
			"terminal",
			"StmtExpr",
			"js_deep_getflags",
			"js_deep_thisflags",
			"js_deep_parseflags",
			"RETURN_VALUE",
			"name == returnType",
			"deep_parseflags",
			"deep_parseflagsa",
			"js_deep_getflags",
			"js_deep_thisflags",
			"property_enumeration_predicate",
			"property_enumeration_predicate$",
			"property_enumeration_predicate",
			"js_deep_thisflags",
			"js_deep_getflags",
			"js_deep_thisflags",
			"Compound",
			"CompoundLiter",
			"'{",
			"'{'",
			"IfStmt",
			"CompoundLiteral",
			"NodePrinter",
			"InitListExpr",
			"CompoundLiteralExpr",
			"class Location",
			"Location",
			"try ",
			"\\bast\\b",
			"NodePrinter",
			"vector_push\\b",
			"property_recursion_push",
			"NodePrinter",
			"FunctionDecl",
			"ProcessFile\\(",
			"Compile\\b",
			"_config",
			"SpawnCompiler",
			"AstDump",
			"SpawnCompiler",
			"SourceDependencies",
			"[Ss]tack",
			"SpawnCompiler",
			"Compiling.*file.*args",
			"Compiling",
			"Loading cac",
			"Spawn\\b",
			"SpawnCompiler",
			"WriteBJSON",
			"path_isfile1",
			"\"isFile\"",
			"isFile",
			"REPL",
			"Console",
			"options",
			"newer",
			"cached",
			"'util'",
			"'misc'",
			"cached",
			"cache",
			"cached",
			"completion_func",
			"\\bdf\\b",
			"\\bCompile\\b",
			"AstDump",
			"Compile",
			"AstDump",
			"\\bCompile\\b",
			"Compile",
			"traceProxy",
			"Util\\.split ",
			"\\.split ",
			"splitAt",
			"\\bUtil\\.",
			"\\bUtil\\b",
			"Util",
			"util.js",
			"\\bwindow\\b",
			"\\bvar\\b",
			"process_block",
			"\\bvar\\b",
			": function\\b",
			"settings",
			"console.log",
			"settings.complet",
			"lines",
			"new_state",
			"completion_func",
			"completion_func\\(",
			"settings",
			"include_func",
			"_handl",
			"_handler",
			"run",
			"\\bsettings\\b",
			"settings\\.",
			"defer\\b",
			"defer",
			"getWait",
			"currentWait",
			"\\bwait\\b",
			"getWait"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"let",
			"",
			"'file'",
			"this.argv",
			"this.argv.",
			"this.argv[",
			"this.argv.",
			"this.argv[",
			"sendMessage",
			"responses",
			"import",
			"",
			"{ArrayBuffer}   buffer",
			"{ArrayBuffer}      buffer",
			"{Object|null}   outputDriverInfo",
			"{ArrayBuffer}   stream",
			", ",
			"m",
			"{ ",
			"export const ",
			"nameKey",
			", GetStream(stream)",
			"GetStream",
			"DereferenceStream",
			"export ",
			"export class ",
			"export class",
			"}\\n\n  get ",
			"); /**",
			"",
			"export const \\1 = ",
			"export function ",
			"&auml;",
			"&uuml;",
			"&ouml;",
			"\\1",
			"let",
			"this",
			"ret",
			"factor",
			"GetCirclePosition",
			"index",
			"dist",
			"}\\n\\n\\1",
			"}\\n\\1",
			"Log",
			"format_base",
			"\\1u",
			"format",
			"GREEN",
			"c",
			"output",
			"TYPE_MASK",
			" + (obj?.cacheBucket ?? '') + ",
			"\\1//\\2",
			"opts",
			"}\\n\\n",
			"}\\n\\n\\1",
			"",
			"\n      t = 'l';"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3343,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": "/home/roman/Projects/plot-cv/ast-shell.js",
							"function_name_status_row": 0,
							"outline_rename_mode": false,
							"symkeys":
							[
								[
									1862,
									1866
								],
								[
									1925,
									1929
								],
								[
									1965,
									1995
								],
								[
									2038,
									2059
								],
								[
									2208,
									2234
								],
								[
									2392,
									2411
								],
								[
									2739,
									2767
								],
								[
									3057,
									3065
								],
								[
									3066,
									3080
								],
								[
									3162,
									3172
								],
								[
									3234,
									3282
								],
								[
									3396,
									3405
								],
								[
									3515,
									3537
								],
								[
									3996,
									4018
								],
								[
									4440,
									4458
								],
								[
									4557,
									4575
								],
								[
									4680,
									4706
								],
								[
									4842,
									4846
								],
								[
									4923,
									4939
								],
								[
									5501,
									5520
								],
								[
									5584,
									5605
								],
								[
									5939,
									5944
								],
								[
									6019,
									6034
								],
								[
									6119,
									6127
								],
								[
									6168,
									6176
								],
								[
									6547,
									6620
								],
								[
									6624,
									6632
								],
								[
									6729,
									6759
								],
								[
									6788,
									6793
								],
								[
									6826,
									6833
								],
								[
									6862,
									6890
								],
								[
									7227,
									7234
								],
								[
									7253,
									7276
								],
								[
									7306,
									7313
								],
								[
									7344,
									7352
								],
								[
									7390,
									7397
								],
								[
									7597,
									7610
								],
								[
									7790,
									7833
								],
								[
									7866,
									7875
								],
								[
									7936,
									7940
								],
								[
									8042,
									8046
								],
								[
									8082,
									8096
								],
								[
									8208,
									8236
								],
								[
									8441,
									8466
								],
								[
									8564,
									8588
								],
								[
									8661,
									8665
								],
								[
									8783,
									8787
								],
								[
									8851,
									8865
								],
								[
									8921,
									8930
								],
								[
									9228,
									9242
								],
								[
									9365,
									9400
								],
								[
									9489,
									9494
								],
								[
									9617,
									9629
								],
								[
									9682,
									9707
								],
								[
									9756,
									9767
								],
								[
									9807,
									9818
								],
								[
									9956,
									9967
								],
								[
									10054,
									10067
								],
								[
									10148,
									10180
								],
								[
									10418,
									10447
								],
								[
									10458,
									10473
								],
								[
									10535,
									10554
								],
								[
									10762,
									10801
								],
								[
									10866,
									10906
								],
								[
									10989,
									11033
								],
								[
									11115,
									11154
								],
								[
									11216,
									11254
								],
								[
									11340,
									11368
								],
								[
									11431,
									11458
								],
								[
									12009,
									12035
								],
								[
									12302,
									12309
								],
								[
									14225,
									14283
								],
								[
									15319,
									15326
								],
								[
									15390,
									15397
								],
								[
									15407,
									15418
								],
								[
									15459,
									15485
								],
								[
									15601,
									15615
								],
								[
									15912,
									15931
								],
								[
									15958,
									15965
								],
								[
									16053,
									16083
								],
								[
									16149,
									16189
								],
								[
									16365,
									16416
								],
								[
									17405,
									17412
								],
								[
									17819,
									17839
								],
								[
									18015,
									18069
								],
								[
									18258,
									18270
								],
								[
									18298,
									18310
								],
								[
									18925,
									18985
								],
								[
									19596,
									19651
								],
								[
									19747,
									19759
								],
								[
									19764,
									19794
								],
								[
									20075,
									20097
								],
								[
									20143,
									20166
								],
								[
									20238,
									20253
								],
								[
									20388,
									20404
								],
								[
									20808,
									20821
								],
								[
									20946,
									20965
								],
								[
									21017,
									21025
								],
								[
									21082,
									21097
								],
								[
									21256,
									21268
								],
								[
									21613,
									21627
								],
								[
									21727,
									21744
								],
								[
									21971,
									21993
								],
								[
									22110,
									22135
								],
								[
									22235,
									22252
								],
								[
									22307,
									22311
								],
								[
									22399,
									22403
								],
								[
									22455,
									22479
								],
								[
									22595,
									22635
								],
								[
									22696,
									22717
								],
								[
									23001,
									23033
								],
								[
									23517,
									23532
								],
								[
									23643,
									23668
								],
								[
									23837,
									23872
								],
								[
									24092,
									24099
								],
								[
									24188,
									24195
								],
								[
									24224,
									24233
								],
								[
									24270,
									24279
								],
								[
									24329,
									24337
								],
								[
									24379,
									24403
								],
								[
									24499,
									24515
								],
								[
									24551,
									24591
								],
								[
									24889,
									24932
								],
								[
									25875,
									25886
								],
								[
									26631,
									26681
								],
								[
									26703,
									26729
								],
								[
									26764,
									26793
								],
								[
									27137,
									27180
								],
								[
									27293,
									27297
								],
								[
									27313,
									27317
								],
								[
									27362,
									27449
								],
								[
									27616,
									27649
								],
								[
									27708,
									27713
								],
								[
									27783,
									27825
								],
								[
									27901,
									27911
								],
								[
									28030,
									28070
								],
								[
									28211,
									28216
								],
								[
									28274,
									28281
								],
								[
									28398,
									28402
								],
								[
									28481,
									28485
								],
								[
									28639,
									28646
								],
								[
									28733,
									28738
								],
								[
									28846,
									28862
								],
								[
									28973,
									28980
								],
								[
									29059,
									29063
								],
								[
									29124,
									29131
								],
								[
									29207,
									29214
								],
								[
									29271,
									29317
								],
								[
									29357,
									29367
								],
								[
									29520,
									29556
								],
								[
									29597,
									29609
								],
								[
									31252,
									31284
								],
								[
									31771,
									31781
								],
								[
									31831,
									31841
								],
								[
									31889,
									31899
								],
								[
									32475,
									32486
								],
								[
									32580,
									32584
								],
								[
									32611,
									32615
								],
								[
									32639,
									32643
								],
								[
									32667,
									32671
								],
								[
									32699,
									32736
								],
								[
									33106,
									33161
								],
								[
									33368,
									33376
								],
								[
									33565,
									33573
								],
								[
									33662,
									33670
								],
								[
									33716,
									33724
								],
								[
									33793,
									33829
								],
								[
									33918,
									33961
								],
								[
									34240,
									34259
								],
								[
									34313,
									34318
								],
								[
									34568,
									34591
								],
								[
									34679,
									34684
								],
								[
									34796,
									34819
								],
								[
									34907,
									34912
								],
								[
									35014,
									35026
								],
								[
									35140,
									35145
								],
								[
									35200,
									35229
								],
								[
									35334,
									35339
								],
								[
									36286,
									36344
								],
								[
									37279,
									37290
								],
								[
									37323,
									37334
								],
								[
									37383,
									37389
								],
								[
									37442,
									37450
								],
								[
									37746,
									37750
								],
								[
									38442,
									38448
								]
							],
							"symlist":
							[
								"  d =>",
								"  d =>",
								"  traceProxy = (obj, handler) =>",
								"function(name, args)",
								"  get(target, key, receiver)",
								"  member = function()",
								"ConcatIterator = iterator =>",
								"gen =>",
								"(...args) =>",
								"  toString()",
								"ImportModule(modulePath, ...args)",
								"  module =>",
								"(acc, item) =>",
								"CommandLine()",
								"(...args) =>",
								"(...args) =>",
								"(module, ...args) =>",
								"  m =>",
								"  .show = value =>",
								"  .printNode = arg =>",
								"  .debug = (...args) =>",
								"() =>",
								"(item, i, a) =>",
								"  entry =>",
								"  entry =>",
								"IncludeAll(dir, maxDepth = Infinity, pred = entry => /\\.[ch]$/.",
								"(entry))",
								"SelectLocations(node)",
								"n =>",
								"  prop =>",
								"LocationString(loc)",
								"  node =>",
								"Structs(nodes)",
								"  node =>",
								"  field =>",
								"  node =>",
								"(field, i) =>",
								"Table(list, pred = (n, l) => true)",
								"(n, i) =>",
								"  e =>",
								"  k =>",
								"([i, l, n]) =>",
								"  returnType(n)",
								"  numArgs(n)",
								"Params(n)",
								"  p =>",
								"  k =>",
								"([i, l, n]) =>",
								"(k, j) =>",
								"(acc, name) =>",
								"  padTrunc(len, pad = ' ')",
								"s =>",
								"(name, i) =>",
								"  pad = (cols, pad, sep) =>",
								"(key, i) =>",
								"(s, col) =>",
								"(acc, n) =>",
								"(acc, row) =>",
								"PrintRange(range, file)",
								"OverlapRange(r1, r2)",
								"GetRange = r =>",
								"InRange = (i, r) =>",
								"ParentNode(node, ast = $.data)",
								"NextSibling(node, ast = $.data)",
								"PreviousSibling(node, ast = $.data)",
								"FirstChild(node, ast = $.data)",
								"LastChild(node, ast = $.data)",
								"Terminate(exitCode)",
								"ParseStructs(text)",
								"(decl, includes)",
								"  name =>",
								"InspectStruct(decl, includes, compiler = 'clang')",
								"  line =>",
								"  line =>",
								"(col, i) =>",
								"([field, offset, size]) =>",
								"(acc, line) =>",
								"  toString(sep = ' ')",
								"  line =>",
								"RoundTo(value, align)",
								"MakeStructClass(decl, filename)",
								"GenerateStructClass(decl, ffiPrefix = '')",
								"  line =>",
								"([field, member]) =>",
								"GenerateGetSet(name, offset, type, ffiPrefix)",
								"  toHex = v =>",
								"  toHex = v =>",
								"ByteLength2TypedArray(byteLength, signed, floating)",
								"ByteLength2Value(byteLength, signed, floating)",
								"FFI_Function",
								"  constructor(node, prefix = '')",
								"([name, type], idx) =>",
								"  generateDefine(fp, lib)",
								"(name, lib) =>",
								"  colorText = x =>",
								"  generateDoc()",
								"  push = (...args) =>",
								"  field =>",
								"(field, col) =>",
								"  js = type =>",
								"  generateCall()",
								"([name, type]) =>",
								"  generate(fp, lib, exp)",
								"  generateFunction(fp, lib)",
								"([name, type]) =>",
								"  p =>",
								"  p =>",
								"  compileFunction(fp, lib)",
								"FdReader(fd, bufferSize = 1024)",
								"(push, stop) =>",
								"CommandRead(args)",
								"  reader =>",
								"ReadOutput(fd)",
								"LibraryExports(file)",
								"  line =>",
								"  line =>",
								"  column =>",
								"(a, b) =>",
								"  entry =>",
								"SaveLibraries()",
								"(acc, [n, e]) =>",
								"ProcessFile(file, debug = true)",
								"ParseECMAScript(file, params = {})",
								"(fr, i) =>",
								"PrintECMAScript(ast, comments, printer = ",
								"({ indent: 4 }, comments))",
								"PrintCArray(strings)",
								"Namespaces(nodePath, ast = $.data)",
								"  p =>",
								"  n =>",
								"Constants(node, t = (name, value) => [name, !isNaN(+value) ? +value : value])",
								"GetImports(ast = $.data)",
								"n =>",
								"GetIdentifiers(nodes, key = null)",
								"(n, k) =>",
								"MemberNames(members, flags = 0)",
								"n =>",
								"  path =>",
								"  p =>",
								"  p =>",
								"  name =>",
								"n =>",
								"([node, ptr]) =>",
								"  path =>",
								"  p =>",
								"  name =>",
								"  name =>",
								"UnsetLoc(node, pred = (v, p) => true)",
								"(v, k) =>",
								"MakeFFI(node, lib, exp, fp)",
								"()",
								"ASTShell(...args)",
								"(a, p) =>",
								"(a, p) =>",
								"(a, p) =>",
								"  get flags()",
								"  v =>",
								"  v =>",
								"  d =>",
								"  l =>",
								"Compile(file, ...args)",
								"  nameOrIdPred(name_or_id, pred = n => true)",
								"node =>",
								"node =>",
								"node =>",
								"node =>",
								"  select(name_or_id, pred = n => true)",
								"  getByIdOrName(name_or_id, pred = n => true)",
								"  getType(name_or_id)",
								"n =>",
								"  getFunction(name_or_id)",
								"n =>",
								"  getVariable(name_or_id)",
								"n =>",
								"  getLoc(node)",
								"() =>",
								"  pathOf(needle, maxDepth = 10)",
								"n =>",
								"Pointer.prototype.chain = function(step, limit = Infinity)",
								"  .F = arg =>",
								"  .T = arg =>",
								"() =>",
								"node =>",
								"  s =>",
								"fr =>"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1743528227.94,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "quickjs/quickjs-debugger.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 26782,
						"regions":
						{
						},
						"selection":
						[
							[
								23979,
								23979
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1743927166.26,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 15521.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "quickjs/README.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 405,
						"regions":
						{
						},
						"selection":
						[
							[
								405,
								405
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 5,
							"syntax": "Packages/Markdown/Markdown.sublime-syntax",
							"tabs_extra_last_activated": 1743609972.42,
							"tabs_extra_last_activated_sheet_index": 1
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "clang-ast.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 79733,
						"regions":
						{
						},
						"selection":
						[
							[
								10222,
								10222
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1743929537.58,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6619.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "ast-shell.js",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 38565,
						"regions":
						{
						},
						"selection":
						[
							[
								30379,
								30380
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": -1,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1743933167.68,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 18311.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "os-helpers.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2642,
						"regions":
						{
						},
						"selection":
						[
							[
								38,
								38
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1743525372.85,
							"tabs_extra_last_activated_sheet_index": 4,
							"tabs_extra_moving":
							[
								3,
								1
							],
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "lib/path.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15842,
						"regions":
						{
						},
						"selection":
						[
							[
								2067,
								2069
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 45,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1743525373.35,
							"tabs_extra_last_activated_sheet_index": 5,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 606.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 31.0
	},
	"input":
	{
		"height": 41.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.832090044919,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 300.0
	},
	"output.Debugger Console":
	{
		"height": 300.0
	},
	"output.coffeecompile_output":
	{
		"height": 150.0
	},
	"output.exec":
	{
		"height": 138.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "plot-cv.sublime-project",
	"replace":
	{
		"height": 74.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"ast-shell",
				"ast-shell.js"
			],
			[
				"clang-ast",
				"clang-ast.js"
			],
			[
				"io-help",
				"io-helpers.js"
			],
			[
				"quickjs-debug",
				"quickjs/quickjs-debugger.c"
			],
			[
				"repl.js",
				"quickjs/qjs-modules/lib/repl.js"
			],
			[
				"io.js",
				"quickjs/qjs-modules/lib/io.js"
			],
			[
				"path.js",
				"lib/path.js"
			],
			[
				"clang-as",
				"clang-ast.js"
			],
			[
				"os-he",
				"os-helpers.js"
			],
			[
				"ast-she",
				"ast-shell.js"
			],
			[
				"vector.h",
				"quickjs/qjs-modules/include/vector.h"
			],
			[
				"property-e",
				"quickjs/qjs-modules/src/property-enumeration.c"
			],
			[
				"quickjs-deep.c",
				"quickjs/qjs-modules/quickjs-deep.c"
			],
			[
				"quickjs.c",
				"quickjs.c"
			],
			[
				"js/util.js",
				"quickjs/qjs-modules/lib/util.js"
			],
			[
				"quickjs-chil",
				"quickjs/qjs-modules/quickjs-child-process.c"
			],
			[
				"os-help",
				"os-helpers.js"
			],
			[
				"path.c",
				"quickjs/qjs-modules/src/path.c"
			],
			[
				"quickjs-path",
				"quickjs/qjs-modules/quickjs-path.c"
			],
			[
				"fs.js",
				"quickjs/qjs-modules/lib/fs.js"
			],
			[
				"clang-lis",
				"clang-list.js"
			],
			[
				"clang-",
				"clang-ast.js"
			],
			[
				"upload-ser",
				"upload-server.js"
			],
			[
				"document",
				"lib/eagle/document.js"
			],
			[
				"element.js",
				"lib/eagle/element.js"
			],
			[
				"clang- js",
				"clang-list.js"
			],
			[
				"",
				"clang-ast.js"
			],
			[
				"lib/util",
				"lib/util.js"
			],
			[
				"cpp.js",
				"lib/cpp.js"
			],
			[
				"util.js",
				"lib/util.js"
			],
			[
				"async/deb",
				"lib/async/debounce.js"
			],
			[
				"inspect.c",
				"quickjs/qjs-modules/quickjs-inspect.c"
			],
			[
				"propery",
				"quickjs/qjs-modules/include/property-enumeration.h"
			],
			[
				"roperty",
				"quickjs/qjs-modules/src/property-enumeration.c"
			],
			[
				"property-",
				"quickjs/qjs-modules/include/property-enumeration.h"
			],
			[
				"compile_comm",
				"compile_commands.js"
			],
			[
				"lib/compileCom",
				"lib/compileCommand.js"
			],
			[
				"fire.js",
				"fire.js"
			],
			[
				"rpc.js",
				"quickjs/qjs-net/js/rpc.js"
			],
			[
				"draw",
				"draw.js"
			],
			[
				"draw.js",
				"draw.js"
			],
			[
				"async/web",
				"lib/async/websocket.js"
			],
			[
				"websocket",
				"webSocket.js"
			],
			[
				"test-vide",
				"test-video.js"
			],
			[
				"test-alea",
				"test-alea.js"
			],
			[
				"test-vid",
				"test-video.js"
			],
			[
				"debugger.ht",
				"debugger.html"
			],
			[
				"debugger.js",
				"debugger.js"
			],
			[
				"utils.h",
				"quickjs/qjs-modules/include/utils.h"
			],
			[
				"quickjs-socket",
				"quickjs/qjs-modules/quickjs-sockets.c"
			],
			[
				"debugger-clie",
				"debugger-client.js"
			],
			[
				"debugger-ser",
				"debugger-server.js"
			],
			[
				"test-nanovg",
				"test-nanovg.js"
			],
			[
				"repeater",
				"lib/repeater/repeater.js"
			],
			[
				"repeater.js",
				"lib/repeater/repeater.js"
			],
			[
				"qjsm.c",
				"quickjs/qjs-modules/src/qjsm.c"
			],
			[
				"test-repea",
				"test-repeater.js"
			],
			[
				"debugger.htm",
				"debugger.html"
			],
			[
				"debugger",
				"debuggerprotocol.js"
			],
			[
				"portmidi",
				"/usr/include/portmidi.h"
			],
			[
				"portmidi.js",
				"portmidi.js"
			],
			[
				"portmidi.h",
				"/usr/include/portmidi.h"
			],
			[
				"-helpers",
				"os-helpers.js"
			],
			[
				"io-helper",
				"io-helpers.js"
			],
			[
				"portaudio.h",
				"/usr/include/portaudio.h"
			],
			[
				"portaudio",
				"portaudio.js"
			],
			[
				"quickjs.h",
				"quickjs/quickjs.h"
			],
			[
				"quickjs-misc",
				"quickjs/qjs-modules/quickjs-misc.c"
			],
			[
				"portaudio.js",
				"portaudio.js"
			],
			[
				"portaudio2.js",
				"portaudio2.js"
			],
			[
				"list.ht",
				"list.html"
			],
			[
				"eagle-she",
				"eagle-shell.js"
			],
			[
				"webka",
				"webakeit-telegram.js"
			],
			[
				"xml-she",
				"quickjs/qjs-modules/xml-shell.js"
			],
			[
				".html",
				"fire.html"
			],
			[
				"numbers2",
				"numbers2.c"
			],
			[
				"main.js",
				"main.js"
			],
			[
				"main",
				"main.js"
			],
			[
				"splines",
				"lib/geom/splines.js"
			],
			[
				"pointList",
				"lib/geom/pointList.js"
			],
			[
				"compon",
				"components.js"
			],
			[
				"ointlist",
				"lib/geom/pointList.js"
			],
			[
				"events.js",
				"lib/async/events.js"
			],
			[
				"point.js",
				"lib/geom/point.js"
			],
			[
				"misc.js",
				"lib/misc.js"
			],
			[
				"draw.css",
				"static/css/draw.css"
			],
			[
				"upload-server",
				"upload-server.js"
			],
			[
				"draw.html",
				"draw.html"
			],
			[
				"autoStore",
				"lib/autoStore.js"
			],
			[
				"resolve-im",
				"quickjs/qjs-modules/resolve-imports.js"
			],
			[
				"svg-box",
				"svg-box.js"
			],
			[
				"fd-graph",
				"lib/fd-graph.js"
			],
			[
				"draw-u",
				"draw-utils.js"
			],
			[
				"draw-util",
				"draw-utils.js"
			],
			[
				"test-nano",
				"test-nanovg.js"
			],
			[
				"fd-gra",
				"lib/fd-graph.js"
			],
			[
				"graph.js",
				"lib/geom/graph.js"
			],
			[
				"eagle-shell",
				"eagle-shell.js"
			],
			[
				"node.js",
				"lib/eagle/node.js"
			],
			[
				"eleme",
				"lib/eagle/element.js"
			],
			[
				"quickjs-mysql.c",
				"quickjs/qjs-modules/quickjs-mysql.c"
			],
			[
				"mailcow-db",
				"mailcow-db.js"
			],
			[
				"wscli.js",
				"quickjs/qjs-net/wscli.js"
			],
			[
				"upload.js",
				"upload.js"
			],
			[
				"workertest",
				"workertest.js"
			],
			[
				"promise-wor",
				"promise-worker.js"
			],
			[
				"test-work",
				"test-worker.js"
			],
			[
				"upload.css",
				"static/css/upload.css"
			],
			[
				"upload.html",
				"upload.html"
			],
			[
				"draw-ut",
				"draw-utils.js"
			],
			[
				"test-nan",
				"test-nanovg.js"
			],
			[
				"cv-shell",
				"cv-shell.js"
			],
			[
				"test-open",
				"test-opencv.js"
			],
			[
				"test-opencv",
				"test-opencv.js"
			],
			[
				"noise.js",
				"noise.js"
			],
			[
				"noise",
				"noise.html"
			],
			[
				"dire",
				"directory.html"
			],
			[
				"upload",
				"upload.html"
			],
			[
				"map.ht",
				"map.html"
			],
			[
				"landing",
				"landing.html"
			],
			[
				"fire",
				"fire.html"
			],
			[
				"filelist",
				"filelist.html"
			],
			[
				"coil",
				"coil.html"
			],
			[
				"inde",
				"index.html"
			],
			[
				"404.ht",
				"404.html"
			],
			[
				"lscac",
				"lib/lscache.js"
			],
			[
				"style.css",
				"style.css"
			],
			[
				"direcot",
				"directory.html"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 298.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
