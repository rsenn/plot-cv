{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"js_is_",
				"js_is_null_or_undefined"
			],
			[
				"path_skip_se",
				"path_skip_separator_s"
			],
			[
				"WRITABLE_METHO",
				"WRITABLE_METHOD_CLOSE"
			],
			[
				"list_fo",
				"list_for_each_prev"
			],
			[
				"JS_Th",
				"JS_ThrowOutOfMemory"
			],
			[
				"JS_",
				"JS_ThrowOutOfMemory"
			],
			[
				"underly",
				"underlying_source"
			],
			[
				"Tok",
				"TokenSequence"
			],
			[
				"JS_GetPr",
				"JS_GetPropertyStr"
			],
			[
				"JS_Thro",
				"JS_ThrowOutOfMemory"
			],
			[
				"getAt",
				"getAttributeNames"
			],
			[
				"self",
				"self_closing_tags"
			],
			[
				"self_",
				"self_closing_tags"
			],
			[
				"JS_PROP",
				"JS_PROP_ENUMERABLE"
			],
			[
				"depe",
				"dependencyMap"
			],
			[
				"de",
				"dependencyMap"
			],
			[
				"dep",
				"dependencyMap"
			],
			[
				"js_is_null",
				"js_is_null_or_undefined"
			],
			[
				"JS_P",
				"JS_PROP_ENUMERABLE"
			],
			[
				"JS_SetP",
				"JS_SetPropertyUint32"
			],
			[
				"spec",
				"specifiers"
			],
			[
				"Num",
				"NumericRange"
			],
			[
				"token_r",
				"token_release_rt"
			],
			[
				"JS_Thr",
				"JS_ThrowTypeError"
			],
			[
				"js_",
				"js_location_data"
			],
			[
				"debug_js_mall",
				"debug_js_malloc_usable_size"
			],
			[
				"repl",
				"replaceRange"
			],
			[
				"js_malloc_u",
				"js_malloc_usable_size_rt"
			],
			[
				"malloc",
				"malloc_usable_size"
			],
			[
				"all",
				"alloc_block_list"
			],
			[
				"alloc",
				"alloc_block_list"
			],
			[
				"path_skip",
				"path_skip_component"
			],
			[
				"JS_Set",
				"JS_SetPropertyUint32"
			],
			[
				"jsm_mo",
				"jsm_module_loader"
			],
			[
				"JS_Throw",
				"JS_ThrowInternalError"
			],
			[
				"JS_AtomTo",
				"JS_AtomToValue"
			],
			[
				"inspect",
				"inspectSymbol"
			],
			[
				"at",
				"attributes"
			],
			[
				"parent",
				"parentElement"
			],
			[
				"owner",
				"ownerElement"
			],
			[
				"get",
				"getPrototypeOf"
			],
			[
				"child",
				"childElementCount"
			],
			[
				"getO",
				"getOwnPropertyNames"
			],
			[
				"getOwn",
				"getOwnPropertySymbols(...)"
			],
			[
				"js_misc_im",
				"js_misc_immutable_constructor"
			],
			[
				"obj",
				"object_tostring"
			],
			[
				"js_misc_immu",
				"js_misc_immutable_free"
			],
			[
				"js_misc_imm",
				"js_misc_immutable_constructor"
			],
			[
				"CMAKE_IMPORT",
				"CMAKE_IMPORT_LIBRARY_SUFFIX"
			],
			[
				"CMAKE_CUR",
				"CMAKE_CURRENT_BINARY_DIR"
			],
			[
				"js_is",
				"js_is_null_or_undefined"
			],
			[
				"js_asy",
				"js_async_socket_class_id"
			],
			[
				"JS_NewObj",
				"JS_NewObjectProtoClass"
			],
			[
				"async_",
				"async_socket_proto"
			],
			[
				"JS_Get",
				"JS_GetOpaque"
			],
			[
				"js_socket_class",
				"js_socket_class_id"
			],
			[
				"g",
				"getOwnPropertyNames(...)"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"js_sockaddr_cl",
				"js_sockaddr_class_id"
			],
			[
				"js_so",
				"js_sockaddr_constructor"
			],
			[
				"js_sys",
				"js_syscallerror_class_id"
			],
			[
				"js_string",
				"js_stringdecoder_class_id"
			],
			[
				"js_pred",
				"js_predicate_class_id"
			],
			[
				"js_syn",
				"js_syntaxerror_class"
			],
			[
				"js_child",
				"js_child_process_class_id"
			],
			[
				"js_b",
				"js_blob_class_id"
			],
			[
				"js_loca",
				"js_location_class_id"
			],
			[
				"js_token_in",
				"js_token_inspect_funcs"
			],
			[
				"JS_SetPr",
				"JS_SetPropertyFunctionList"
			],
			[
				"set",
				"setReadHandler"
			],
			[
				"js_get_",
				"js_get_propertystr_bool"
			],
			[
				"js_misc_ate",
				"js_misc_atexit_functions"
			],
			[
				"isF",
				"isFunction"
			],
			[
				"tab",
				"tab_atom_len"
			],
			[
				"isARr",
				"isArrayBuffer"
			],
			[
				"BIT",
				"BITFIELD_FROMARRAY"
			],
			[
				"to",
				"toStringTag"
			],
			[
				"inotify",
				"inotify_add_watch"
			],
			[
				"JS_SetProp",
				"JS_SetPropertyUint32"
			],
			[
				"JS_GEt",
				"JS_GetGlobalObject"
			],
			[
				"dbuf_put",
				"dbuf_put_colorstr"
			],
			[
				"REPEATER_",
				"REPEATER_REJECTED"
			],
			[
				"REP",
				"REPEATER_DONE"
			],
			[
				"resol",
				"resolving_funcs"
			],
			[
				"JS_NEwCFun",
				"JS_NewCFunctionData"
			],
			[
				"js_function",
				"js_function_bind_this"
			],
			[
				"js_repeater_iter",
				"js_repeater_iteration"
			],
			[
				"REPEA",
				"REPEATER_REJECTED"
			],
			[
				"JS_New",
				"JS_NewCFunctionData"
			],
			[
				"exe",
				"execution"
			],
			[
				"REPEAT",
				"REPEATER_STOPPED"
			],
			[
				"JS_THro",
				"JS_ThrowOutOfMemory"
			],
			[
				"repeater",
				"repeater_finalizer"
			],
			[
				"BACK",
				"BACKGROUND_RED"
			],
			[
				"js_inspec",
				"js_inspect_tostring"
			],
			[
				"JS_Atom",
				"JS_AtomToValue"
			],
			[
				"JS_GetP",
				"JS_GetPropertyStr"
			],
			[
				"js_misc_glob_err",
				"js_misc_glob_errfunc_ctx"
			],
			[
				"js_misc",
				"js_misc_glob"
			],
			[
				"js_mi",
				"js_misc_glob_errfunc"
			],
			[
				"js_misc_glob_",
				"js_misc_glob_errfunc_ctx"
			],
			[
				"JS_VALUE_",
				"JS_VALUE_GET_OBJ"
			],
			[
				"js_io_Read",
				"js_io_readhandler_fn"
			],
			[
				"JS_NewS",
				"JS_NewStringLen"
			],
			[
				"target_link",
				"target_link_directories"
			],
			[
				"brea",
				"breakLength"
			],
			[
				"WIF",
				"WIFSIGNALED"
			],
			[
				"JS_VALUE",
				"JS_VALUE_GET_PTR"
			],
			[
				"module_",
				"module_func"
			],
			[
				"initiali",
				"initialization"
			],
			[
				"qjsm_sock",
				"qjsm_socklen_t_size"
			],
			[
				"getCas",
				"getClassConstructor"
			],
			[
				"js_syscall",
				"js_syscallerror_proto_funcs"
			],
			[
				"syscal",
				"syscallerror_proto"
			],
			[
				"JS_SetProper",
				"JS_SetPropertyStr"
			],
			[
				"JS_CGET",
				"JS_CGETSET_ENUMERABLE_DEF"
			],
			[
				"sys",
				"syscallerror_ctor"
			],
			[
				"Sys",
				"SyscallError"
			],
			[
				"JS_CGETSET",
				"JS_CGETSET_MAGIC_DEF"
			],
			[
				"JS_T",
				"JS_ThrowTypeError"
			],
			[
				"STRING",
				"STRINGDECODER_ENCODING"
			],
			[
				"STRINGDECODER_EN",
				"STRINGDECODER_ENCODING"
			],
			[
				"STRINGDE",
				"STRINGDECODER_END"
			],
			[
				"ringbuffer_",
				"ringbuffer_continuous_length"
			],
			[
				"string",
				"stringdecoder_proto"
			],
			[
				"ringbuffer_res",
				"ringbuffer_resize"
			],
			[
				"ringb",
				"ringbuffer_normalize"
			],
			[
				"ringbuffer",
				"ringbuffer_length"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "Util(g)\nUtil.formatAnnotatedObject = function(subject, o)\n  i =>\n  item =>\n  padding = x =>\n  arr =>\nUtil.curry = (fn, arity) =>\n  ret = function curried(...args)\n  (v, i) =>\nCurried = function(...a)\n  function()\n  function(a)\n  function(a, b)\n  function(a, b, c)\n  function(a, b, c, d)\n  get()\nUtil.arityN = (fn, n) =>\n  function(fn)\n  function()\n  function(fn)\n  function(a)\n  function(fn)\n  function(a, b)\n  function(fn)\n  function(a, b, c)\n  function(fn)\n  function(a, b, c, d)\n  function(fn)\n  function(a, b, c, d, e)\nUtil.getter = target =>\n  self = function(key)\n  .fn = key =>\n  .fn = key =>\nUtil.setter = target =>\n  set = function(key, value)\n  .fn = (key, value) =>\n  .fn = (key, value) =>\nUtil.remover = target =>\n  key =>\n  key =>\nUtil.hasFn = target =>\n  key =>\n  key =>\nUtil.adder = target =>\n  arg =>\n  arg =>\n  self = function(obj, arg = 1)\nChooseFn(a, o)\n  .fn = (obj, arg) =>\n  .fn = (obj, arg) =>\n  .fn = (obj, arg) =>\n  .fn = (num, arg) =>\n  .fn = (obj, arg) =>\nUtil.updater = (target, get, set, fn) =>\n  (k, f, i) =>\n  doUpdate(key, func, i)\n  create = () =>\n  key =>\n  () =>\n  self = function(...args)\nUtil.once = (fn, thisArg, memoFn) =>\n  function(...args)\nUtil.delay = (func, wait, thisObj) =>\n  function(...args)\n()\nUtil.throttle = (f, t, thisObj) =>\n  function(...args)\nUtil.debounce = (func, wait, options = {}) =>\n  later()\n  debounced(...a)\n  .clear = function()\n  .flush = function()\nUtil.debounceAsync = (fn, wait, options = {}) =>\n  function(...a)\n  resolve =>\n() =>\n  arg =>\n  g =>\n  g =>\n  () =>\n  err =>\n  () =>\n  err =>\n  () =>\n  err =>\n() =>\nUtil.log = (...args) =>\n  f =>\n  f =>\n(a, p, i) =>\n  get: () =>\n  .setFilters = function(args)\n  arg =>\n  .getFilters = function()\nUtil.msg = (strings, ...substitutions) =>\n(base, n) =>\nUtil.generalLog = function(n, x)\nUtil.toSource = function(arg, opts = {})\n  print = (...args) =>\nUtil.debug = function(message)\n  removeCircular = function(key, value)\n  arg =>\nUtil.type = function({ type })\nUtil.functionName = function(fn)\nUtil.className = function(obj)\n  obj\nUtil.unwrapComponent = function(c)\nUtil.componentName = function(c)\nUtil.count = function(s, ch)\nUtil.parseNum = function(str)\nUtil.minmax = function(num, min, max)\nUtil.getExponential = function(num)\nUtil.getNumberParts = function(num)\nUtil.pow2 = function(n)\nUtil.pow10 = function(n)\nUtil.bitValue = function(n)\nUtil.bitMask = function(bits, start = 0)\nUtil.bitGroups = function(num, bpp, minLen)\nUtil.bitStuff = (arr, bpp) =>\n([b, f], n) =>\nUtil.toBinary = function(num)\nUtil.toBits = function(num)\n  bit =>\nUtil.getBit = function(v, n)\nUtil.isSet = function(v, n)\nUtil.bitCount = function(n)\nUtil.bitNo = function(n)\nUtil.toggleBit = function(num, bit)\nUtil.setBit = function(num, bit)\nUtil.clearBit = function(num, bit)\nUtil.range = function(...args)\n  (v, k) =>\n  n =>\nUtil.set = function(obj, prop, value)\n  (prop, value) =>\n  (prop, value) =>\n  (prop, value) =>\n  value =>\n(obj, prop) =>\n() =>\nUtil.bitArrayToNumbers = function(arr)\nUtil.bitsToNumbers = function(bits)\n(val, key, arr) =>\nUtil.shuffle = function(arr, rnd = Util.rng)\n(a, b) =>\nUtil.sortNum = function(arr)\n(a, b) =>\nUtil.draw = (arr, n = 1, rnd = Util.rng) =>\nUtil.is = function(what, ...pred)\n  type =>\n  fn =>\nUtil.instanceOf = (value, ctor) =>\nUtil.onoff = function(val)\nUtil.numbersToBits = function(arr)\n(bits, num) =>\nUtil.randomNumbers = function([start, end], draws)\nUtil.randomBits = function(r = [1, 50], n = 5)\nUtil.padFn = function(len, char = ' ', fn = (str, pad) => pad)\n  (s, n = len) =>\nUtil.pad = function(s, n, char = ' ')\nUtil.abbreviate = function(str, max = 40, suffix = '...')\nUtil.trim = function(str, charset)\nUtil.trimRight = function(str, charset)\nUtil.indent = (text, space = ' ') =>\nUtil.define = (obj, ...args) =>\nUtil.memoizedProperties = (obj, methods) =>\n  get()\nUtil.copyWhole = (dst, ...args) =>\nUtil.copyEntries = (obj, entries) =>\nUtil.extend = (...args) =>\nUtil.isCloneable = obj =>\nUtil.isUnextendable = val =>\n  pred = (k, v, f) =>\n(key, depth) =>\n  value = function(...args)\nUtil.defineGetter = (obj, key, fn, enumerable = false) =>\nUtil.defineGetterSetter = (obj, key, g, s, enumerable = false) =>\nUtil.defineGettersSetters = (obj, gettersSetters) =>\nUtil.extendArray = function(arr = Array.prototype)\n  function(pred)\n  function()\n  function()\n(item, i, a) =>\n  function()\n  function(value)\nUtil.adapter = function(obj, getLength = obj => obj.length, getKey = (obj, index) => obj.\n(index), getItem = (obj, key) => obj[key], setItem = (obj, index, value) => (obj[index] = value))\n  get length()\n  get instance()\n  key(i)\n  get(key)\n  has(key)\n  set(key, value)\n*keys()\n*entries()\n  toObject()\n  toMap()\n  .localStorage = function(s)\n  () =>\n  w =>\n  () =>\n  l =>\n  (l, i) =>\n  (l, key) =>\n  (l, key, v) =>\nUtil.array = function(a)\nUtil.arrayFromEntries = entries =>\n([k, v]) =>\n  key =>\n([k, v]) =>\nUtil.toMap = function(hash = {}, fn)\nUtil.extendMap = function(map)\n  .entries = function*iterator()\n  .toObject = function()\n  .match = function(...args)\n  entries =>\nUtil.objectFrom = function(any)\nUtil.tail = function(arr)\nUtil.splice = function(str, index, delcount, insert)\nUtil.identity = arg =>\nUtil.reverse = arr =>\nUtil.keyOf = function(obj, prop)\nUtil.rotateRight = function(arr, n)\nUtil.repeater = function(n, what)\n()\n()\nUtil.repeat = function(n, what)\nUtil.arrayDim = function(dimensions, init)\nUtil.flatten = function(arr)\nUtil.chunkArray = (a, size) =>\n(acc, item, i) =>\nUtil.partition = function*(a, size)\nUtil.intersect = (a, b) =>\nUtil.difference = (a, b, incicludes) =>\n  x =>\n  x =>\n  x =>\n  x =>\nUtil.symmetricDifference = (a, b) =>\nUtil.union = (a, b, equality) =>\nUtil.chances = function(numbers, matches)\nUtil.sum = function(arr)\n(acc, n) =>\nUtil.expr = fn =>\n  expr(...args)\n  addArgs(args)\n  ret = function returnFn(...args)\n(a, b) =>\n(a, b) =>\n(a, b) =>\n(a, b) =>\n(a, b) =>\n(a, b) =>\n(a, b) =>\nUtil.mod = (a, b) =>\n  n =>\n(a, b) =>\nUtil.fnName = function(f, parent)\nUtil.objName = function(o)\nUtil.findKey = function(obj, pred, thisVal)\n  value : v =>\nUtil.find = function(arr, value, prop = 'id')\n  pred = function(obj)\n  obj =>\n  obj =>\n  pred = ([key, value], arr) =>\nUtil.findIndex = function(obj, pred, thisArg)\nUtil.match = function(arg, pred)\n  match = (val, key) =>\n(acc, val, key) =>\n(acc, key) =>\nUtil.toHash = function(map, keyTransform = k => \n('' + k))\n  (v, k) =>\nUtil.indexOf = function(obj, prop)\nUtil.greatestCommonDenominator = (a, b) =>\nUtil.leastCommonMultiple = (n1, n2) =>\n(re, str)\nUtil.inspect = function(obj, opts = {})\n  stringFn = str =>\n  print = (...args) =>\n  (space = false) =>\n  (space = false) =>\n  key =>\n  key =>\nUtil.dump = function(name, props)\n  () =>\n  w =>\n  () =>\nUtil.ucfirst = function(str)\nUtil.lcfirst = function(str)\nUtil.typeOf = v =>\nUtil.camelize = (text, sep = '') =>\n  (match, p1, p2, offset) =>\nUtil.decamelize = function(str, separator = '-')\nUtil.ifThenElse = function(pred = value => !!value, _then = () => {}, _else = () => {})\n  function(value)\nUtil.if = (value, _then, _else, pred) =>\n  v =>\n() =>\n() =>\nUtil.ifElse = (value, _else, pred) =>\n  v =>\n  () =>\n  () =>\n  () =>\nUtil.ifThen = (value, _then, pred) =>\n  v =>\n  () =>\n  () =>\n  () =>\nUtil.switch = ({ default: defaultCase, ...cases }) =>\n  function(value)\n(fn, arr)\nUtil.colorDump = (iterable, textFn) =>\n(color, n) =>\nUtil.bucketInserter = (map, ...extraArgs) =>\n  function(...args)\n  function(...args)\nUtil.fifo = function fifo()\n  resolve = () =>\n  generator()\n  r =>\n  push(...args)\n  process: function run()\nUtil.isEmail = function(v)\nUtil.isString = function(v)\nUtil.isNumeric = v =>\nUtil.isUndefined = arg =>\nUtil.isObject = obj =>\nUtil.isPrimitive = obj =>\nUtil.isFunction = arg =>\nUtil.not = fn =>\n  function(...args)\nUtil.isAsync = fn =>\nUtil.isArrowFunction = fn =>\nUtil.isEmptyString = v =>\nUtil.isEmpty = (...args) =>\n  empty(v)\nUtil.isNonEmpty = (...args) =>\n  nonEmpty = v =>\nUtil.isIpAddress = v =>\n  i =>\n  i =>\nUtil.isPortNumber = v =>\nUtil.hasProps = function(obj, props)\n  prop =>\nUtil.validatePassword = function(value)\nUtil.clone = function(obj, proto)\n  constructor\nUtil.deepClone = function(data)\nUtil.findVal = function(object, propName, maxDepth = 10)\nUtil.deepCloneObservable = function(data)\nUtil.toArray = function(observableArray)\nUtil.arryToTree = function(data, id, pId, appId)\n(e, i) =>\nUtil.to3wei = function(a, old, id, pId)\n(e, i) =>\n(se, si) =>\nUtil.arrExchangePos = function(arr, i, j)\nUtil.arrRemove = function(arr, i)\nUtil.move = function(src, dst = [])\nUtil.moveIf = function(src, pred, dst = [])\nUtil.logOutClearStorage = function()\nUtil.getCookie = function(cookie, name)\nUtil.parseCookie = function(c = document.cookie)\n  pred = char =>\n  char =>\n  char =>\nUtil.encodeCookie = c =>\n([key, value]) =>\nUtil.setCookies = c =>\n([key, value]) =>\nUtil.clearCookies = function(c)\n  (acc, name) =>\nUtil.deleteCookie = function(name)\n  () =>\n  w =>\n  () =>\nUtil.accAdd = function(arg1, arg2)\nUtil.Subtr = function(arg1, arg2)\nUtil.accDiv = function(arg1, arg2)\nUtil.accMul = function(arg1, arg2)\nUtil.dateFormatter = function(date, formate)\nUtil.numberFormatter = function(numStr)\nUtil.searchObject = function(object, matchCallback, currentPath, result, searched)\n(req = {}) =>\n  () =>\n  () =>\n  () =>\n  url =>\n  () =>\n() =>\n() =>\n() =>\n() =>\n() =>\n() =>\nUtil.parseQuery = function(url = \n)\nUtil.encodeQuery = function(data)\nUtil.parseURL = function(href = this.\n)\n  part =>\n([k, v]) =>\n(acc, m) =>\n  href(override)\nUtil.makeURL = function(...args)\nUtil.numberFromURL = function(url, fn)\nUtil.tryPromise = fn =>\n(resolve, reject) =>\n  resolve = a =>\n  reject = () =>\n  resolve = () =>\n  reject = () =>\n  function(...args)\n  function(...args)\n  resolve = a =>\n  reject = () =>\nUtil.putError = err =>\n() =>\n  fn =>\n  ret =>\nUtil.tryPredicate = (fn, defaultRet) =>\n  ret =>\n  () =>\nUtil.isBrowser = function()\n  () =>\n  w =>\n  () =>\n  () =>\n  d =>\n  () =>\nUtil.waitFor = function waitFor(msecs)\n({ setTimeout, clearTimeout, setInterval, clearInterval }) =>\n(resolve, reject) =>\n() =>\n  clear = () =>\nUtil.timeout = (msecs, promises, promiseClass = Promise) =>\nUtil.isServer = function()\nUtil.isMobile = function()\nUtil.uniquePred = (cmp = null) =>\n  (el, i, arr) =>\n  item =>\n  (el, i, arr) =>\nUtil.unique = (arr, cmp) =>\n  cmp = (a, b) =>\n(e, i, a) =>\nUtil.zip = a =>\n(a, b) =>\n(_, i) =>\n  arr =>\nUtil.histogram = (...args) =>\n  (k, v) =>\n  initVal = () =>\n  setVal = v =>\n(it, i) =>\n(item, i) =>\n  (entry, idx, key) =>\n([k, v]) =>\n(a, b) =>\nUtil.concat = function*(...args)\nUtil.distinct = function(arr)\n  (value, index, me) =>\nUtil.rangeMinMax = function(arr, field)\n  obj =>\nUtil.remap = (...args) =>\n  getR = () =>\n  r = val =>\nUtil.mergeLists = function(arr1, arr2, key = 'id')\nUtil.foreach = function(o, fn)\nUtil.all = function(obj, pred)\nUtil.isGenerator = function(fn)\nUtil.isIterator = obj =>\nUtil.isIterable = obj =>\n  x =>\nUtil.isConstructor = x =>\n  construct(target, args)\n  target\n  x\n  m =>\nUtil.filter = function(a, pred)\n()\n  fn = (k, v) =>\nUtil.reduce = (obj, fn, accu) =>\nUtil.mapFunctional = fn =>\n(arg)\nUtil.map = (...args) =>\n  ret = a =>\n()\n  ret = a =>\n()\nUtil.entriesToObj = function(arr)\n(acc, item) =>\nUtil.isDate = function(d)\nUtil.parseDate = function(d)\nUtil.isoDate = function(date)\nUtil.toUnixTime = function(dateObj, utc = false)\nUtil.unixTime = function(utc = false)\nUtil.fromUnixTime = function(epoch, utc = false)\nUtil.formatTime = function(date = \n(), format = 'HH:MM:SS')\nUtil.leapYear = function(year)\nUtil.timeSpan = function(s)\nUtil.randFloat = function(min, max, rnd = Util.rng)\nUtil.randInt = (...args) =>\nUtil.randStr = (len, charset, rnd = Util.rng) =>\nUtil.hex = function(num, numDigits)\nUtil.numberParts = (num, base) =>\nUtil.roundDigits = precision =>\nUtil.roundFunction = (prec, digits, type) =>\n  function(value)\nUtil.roundTo = function(value, prec, digits, type)\n() =>\n  utf8 =>\n  v =>\n  utf8 =>\n  base64 =>\n  v =>\n  string =>\nUtil.formatRecord = function(obj)\n  item =>\n  function(obj)\nUtil.isArrayLike = obj =>\nUtil.equals = function(a, b)\n(e, i) =>\nUtil.versionCompare = (a, b) =>\n  isdigit = c =>\nUtil.isGetter = (obj, propName) =>\nUtil.isBool = value =>\nUtil.size = (...args) =>\n  size(obj)\nUtil.isMap = function(obj)\nUtil.effectiveDeviceWidth = function()\nUtil.getFormFields = function(initialState)\n(acc, { elements }) =>\n(acc2, { name, value }) =>\nUtil.mergeObjects = function(objArr, predicate = (dst, src, key) => (src[key] == '' ? undefined : src[key]))\nUtil.getUserAgent = function(headers = req.headers)\nUtil.factor = function(start, end)\nUtil.factorial = function(n)\nUtil.increment = function(obj, key)\nUtil.counter = function()\n  self = function()\nUtil.filterKeys = function(obj, pred = k => true)\n  pred = str =>\n  pred = str =>\nUtil.filterMembers = function(obj, fn)\n  pred = (k, v, o) =>\nUtil.filterOutMembers = function(obj, fn)\n  pred = (v, k, o) =>\nUtil.dumpMembers = obj =>\nUtil.filterOutKeys = function(obj, arr)\n  (v, k, o) =>\n  (k, v) =>\n  key =>\n  () =>\n  (v, k, o) =>\nUtil.removeKeys = function(obj, arr)\n  (v, k, o) =>\n  (k, v) =>\n  key =>\nUtil.getKeys = function(obj, arr)\nUtil.numbersConvert = function(str)\n(ch, i) =>\nUtil.entries = function(arg)\n()\nUtil.keys = function(arg)\n()\nUtil.values = function(arg)\n()\nUtil.removeEqual = function(a, b)\nUtil.clear = obj =>\nUtil.remove = (arr, item) =>\n  (other, i, arr) =>\nUtil.removeIf = function(arr, pred)\nUtil.traverse = function(o, fn)\n  (v, k, a) =>\n  walker(o, depth = 0)\nUtil.traverseWithPath = function(o, rootPath = [])\n  walker(o, path)\nUtil.indexByPath = function(o, p)\nUtil.pushUnique = (arr, ...args) =>\n(acc, item) =>\nUtil.insertSorted = function(arr, item, cmp = (a, b) => b - a)\n  next = (k, v) =>\n  (k, v) =>\n  (k, v) =>\n  (k, v) =>\n  fn = function(key, value)\nUtil.keyIterator = obj =>\nUtil.entryIterator = obj =>\n()\nUtil.mapAdapter = getSetFunction =>\n  get(key)\n  set(key, value)\n  .keys = () =>\n  .entries = () =>\nUtil.mapFunction = map =>\n  fn = function(...args)\n  m =>\n  .set = (key, value) =>\n  (k, v) =>\n  .get = key =>\n  .set = (key, value) =>\n  (k, v) =>\n  .get = key =>\n  .set = (key, value) =>\n  (k, v) =>\n  .get = key =>\n  .set = (key, value) =>\n  (k, v) =>\n  .get = key =>\n  .update = function(key, fn = (k, v) => v)\n  .entries = function*()\n  .values = function*()\n  .keys = function*()\n  function()\n([key, value]) =>\n  .keys = () =>\n  .entries = () =>\n  .values = () =>\n  .keys = function*()\n  .entries = function*()\n  .values = function*()\n  .filter = function(pred)\n()\n  .map = function(t)\n()\n  .forEach = function(fn)\n  .delete = key =>\n  .has = key =>\nUtil.mapWrapper = (map, toKey = key => key, fromKey = key => key) =>\n  .set = (key, value) =>\n  (k, v) =>\n  .get = key =>\n  .keys = () =>\n  .entries = function*()\n  .values = function*()\n  .has = key =>\n  .delete = key =>\n  m =>\nUtil.mapCombinator = (forward, backward) =>\n  fn = function(key, value)\n(a,m) =>\n  key =>\n  a =>\n  makeGetter(map, next = a => a)\n  key =>\nUtil.predicate = (fn_or_regex, pred) =>\n  fn = arg =>\n  .valueOf = function()\n  arg =>\nUtil.some = predicates =>\n  value =>\n  pred =>\nUtil.every = predicates =>\n  value =>\n  pred =>\nUtil.iterateMembers = function*(obj, predicate = (name, depth, obj, proto) => true, depth = 0)\n  (...predicates) =>\n  (...args) =>\n  pred =>\n  (...predicates) =>\n  (...args) =>\n  pred =>\n(pred, obj) =>\nUtil.memberNameFilter = (depth = 1, start = 0) =>\n  (m, l, o) =>\n  (m, l, o) =>\n  (name, depth, obj, proto) =>\nUtil.getMemberNames = (obj, ...args) =>\nUtil.getMemberEntries = (obj, ...args) =>\n  name =>\n  accFn = (a, m, o) =>\n  (obj, ...args) =>\n  (a, m) =>\n  (r, a, m) =>\n  (r, a) =>\n  incFn = (c, n, self) =>\n  incFn = (c, n, self) =>\n  inc = (i, n = 1) =>\n  self = function Count(n = 1)\n  .valueOf = function()\n  filterFn = (key, value) =>\n(acc, mem, idx) =>\n  r =>\n  () =>\n  fn = function ReduceIntoMap(arg, acc = mapObj)\n(acc, arg) =>\n  (a, m, o) =>\nUtil.methodNameFilter = (depth = 1, start = 0) =>\n  (m, l, o) =>\n  () =>\n  b =>\n  () =>\nUtil.getMethodNames = (obj, depth = 1, start = 0) =>\n  (a, m, o) =>\nUtil.inherit = (dst, src, depth = 1) =>\n  inherits(ctor, superCtor)\n  ctor\n  superCtor\n  inherits(ctor, superCtor)\nTempCtor = function()\nTempCtor\n  superCtor\n  ctor\n  ctor\nUtil.bindMethods = (obj, methods, dest) =>\nUtil.getConstructor = obj =>\nUtil.getPrototypeChain = function(obj, fn = p => p)\nUtil.getObjectChain = (obj, fn = p => p) =>\nUtil.getPropertyDescriptors = function(obj)\n  p =>\n  fn = (c, p) =>\n  (p, o) =>\nUtil.weakAssign = function(...args)\n  other =>\nUtil.exception = function Exception(...args)\n  toString(color = false)\nUtil.location = function Location(...args)\n  toString(color = false)\n  t =>\n  getFileName()\n  getLineNumber()\n  getColumnNumber()\nUtil.stackFrame = function StackFrame(frame)\n  prop =>\n  propertyMap()\n  method =>\n([method, func]) =>\n  getFunction()\n  getMethodName()\n  getFunctionName()\n  getTypeName()\n  getFileName()\n  getLineNumber()\n  getColumnNumber()\n  get()\n  toString(color, opts = {})\n  (t, color) =>\n  t =>\n  p =>\n  p =>\n(f, i) =>\n  getLocation()\n  get location()\nUtil.scriptName = () =>\n  () =>\n  args =>\n  () =>\nUtil.getFunctionName = () =>\nUtil.getFunctionArguments = fn =>\nUtil.scriptDir = () =>\n  () =>\n  script =>\n  () =>\nUtil.stack = function Stack(stack, offset)\n  frame =>\n([m, p]) =>\n  (acc, [method, property]) =>\n  getStack()\n  .prepareStackTrace = (_, stack) =>\n  stackToString(st, start = 0)\n()\n  frame =>\n  part =>\n  frame =>\n([func, file]) =>\n  n =>\n([func, file]) =>\n([func, [columnNumber, lineNumber, ...file]]) =>\n({ methodName, functionName: func, fileName: file, columnNumber: column, lineNumber: line }) =>\n  s =>\n  s =>\n  () =>\n  s =>\n  s =>\n  () =>\n  frame =>\n  frame =>\n  get: () =>\n  get: () =>\n*value()\n  toString(opts = {})\n  f =>\n  getFunctionName()\n  getMethodName()\n  getFileName()\n  getLineNumber()\n  get()\n(a, f) =>\n(fn, i) =>\nUtil.getCallerStack = function(position = 2, limit = 1000, stack)\n  .prepareStackTrace = (_, stack) =>\nUtil.getCallerFile = function(position = 2)\nUtil.getCallerFunction = function(position = 2)\nUtil.getCallerFunctionName = function(position = 2)\nUtil.getCallerFunctionNames = function(position = 2)\nUtil.getCaller = function(index = 1, stack)\n  f =>\nUtil.getCallers = function(index = 1, num = Number.MAX_SAFE_INTEGER, stack)\n  f =>\nUtil.getStackFrames = function(offset = 2)\n  frame =>\nUtil.getStackFrame = function(offset = 2)\nUtil.rotateLeft = function(x, n)\nUtil.rotateRight = function(x, n)\nUtil.hashString = function(string, bits = 32, mask = 0xffffffff)\nUtil.flatTree = function(tree, addOutput)\n  addOutput = arg =>\n  key =>\nUtil.traverseTree = function(tree, fn, depth = 0, parent = null)\nUtil.walkTree = function(node, pred, t, depth = 0, parent = null)\n()\n  pred = i =>\n  t = function(i)\nUtil.isPromise = function(obj)\n  setImmediate = fn =>\nUtil.next = function(iter, observer, prev = undefined)\n  val =>\n() =>\n  err =>\n() =>\nUtil.getImageAverageColor = function(imageElement, options)\n  toStringRgb()\n  toStringRgba()\n  toStringHex()\n  toHex = function(d)\nUtil.jsonToObject = function(jsonStr)\nUtil.splitLines = function(str, max_linelen = Number.MAX_SAFE_INTEGER)\nUtil.splitAt = function*(str, ...indexes)\n(a, b) =>\nUtil.decodeEscapes = function(text)\n  m =>\n([s, t]) =>\nUtil.stripXML = text =>\nUtil.stripHTML = html =>\n  p =>\n  p =>\nUtil.stripNonPrintable = text =>\nUtil.decodeHTMLEntities = function(text)\n  (match, entity) =>\nUtil.encodeHTMLEntities = (str, charset = '\\u00A0-\\u9999<>&') =>\n  i =>\nUtil.stripAnsi = function(str)\nUtil.proxy = (obj = {}, handler) =>\n  get(target, key, receiver)\n  set(target, key, value, receiver)\nUtil.propertyLookup = (obj = {}, handler = key => null) =>\n  get(target, key, receiver)\nUtil.traceProxy = (obj, handler) =>\n  function(name, args)\n  get(target, key, receiver)\n  member = function()\nUtil.proxyTree = function proxyTree(...callbacks)\n  applyCallback = () =>\n  get(target, key)\n  set(target, key, value)\n  apply(target, thisArg, args)\n  node(path)\n() =>\nUtil.construct = constructor =>\nF(args)\nF\n  constructor\nUtil.constructApply = (constructor, array) =>\nUtil.immutable = args =>\n  set: () =>\n  deleteProperty: () =>\n  defineProperty: () =>\nUtil.immutableClass = (orig, ...proto) =>\n  p =>\n  ctor =>\n  ctor\n  imm = base =>\n  constructor(...args)\nUtil.partial = function partial(fn /*, arg1, arg2 etc */)\n  function()\n(min, max, value) =>\nUtil.coloring = (useColor = true) =>\n  code(...args)\n  text(text)\n  concat(...args)\n  code(...args)\n  text(text, ...color)\n  concat(...args)\n  code(...args)\n  text(text, ...color)\n  concat(...args)\nUtil.colorText = (...args) =>\nUtil.decodeAnsi = (str, index) =>\n  isDigit = c =>\n  notDigit = c =>\n  findIndex = (pred, start) =>\nUtil.stripAnsi = str =>\nUtil.ansiCode = (...args) =>\nUtil.wordWrap = (str, width, delimiter) =>\nUtil.multiParagraphWordWrap = (str, width, delimiter) =>\nUtil.defineInspect = (proto, ...props) =>\n  function()\n(acc, key) =>\n(a, b, value) =>\nUtil.bindProperties = (proxy, target, props, gen) =>\n  name =>\n(acc, name) =>\n  gen = p => v =>\n  k =>\n  (a, [k, v]) =>\n  (...args) =>\n(...args) =>\n  (a, k) =>\n  get: () =>\n  get: () =>\n()\n  obj =>\n  on: val =>\n  off: val =>\n  true: val =>\n  false: val =>\nAssertionFailed\n  constructor(message, stack)\nUtil.assert = function assert(val, message)\nUtil.assertEqual = function assertEqual(val1, val2, message)\nUtil.assignGlobal = () =>\nUtil.weakMapper = function(createFn, map = \n(), hitFn)\n  self = function(obj, ...args)\n  .set = (k, v) =>\n  .get = k =>\nUtil.merge = function(...args)\n  a =>\n  a =>\n(acc, arg) =>\nUtil.transformer = (a, ...l) =>\n  (c, f) =>\n  function(...v)\nUtil.copyTextToClipboard = (i, t) =>\n  module =>\n(a, b, c) =>\n() =>\nUtil.toPlainObject = obj =>\n  v =>\nUtil.toBuiltinObject = obj =>\n  v =>\n  t = (v, n) =>\n(acc, k) =>\nUtil.timer = msecs =>\n  remaining = () =>\n  finish = callback =>\n  log = (method, ...args) =>\n  obj =>\n  v =>\n  timeout = (msecs, tmr = timer) =>\n() =>\n  (...args) =>\n  () =>\n  add = (arr, ...items) =>\n  get delay()\n  get created()\n  get start()\n  get stop()\n  get elapsed()\n  get end()\n  get remain()\n  cancel()\n  pause()\n  .resume = function()\n  .restart = function()\n  callback(...args)\n  subscribe(f)\n  unsubscribe(f)\n  start = () =>\n(resolve, reject) =>\nUtil.thenableReject = error =>\n  then: (resolve, reject) =>\nUtil.wrapGenerator = fn =>\n  function(...args)\nUtil.wrapGeneratorMethods = obj =>\nUtil.decorateIterable = (proto, generators = false) =>\n  forEach(fn, thisArg)\n*map(fn, thisArg)\n*filter(pred, thisArg)\n  findIndex(pred, thisArg)\n  indexOf(item, startIndex = -1)\n(e, i) =>\n  find(pred, thisArg)\n  every(pred, thisArg)\n  some(pred, thisArg)\n  reduce(fn, accu)\n*entries()\n*keys()\n*values()\nUtil.swap = (a, b) =>\nUtil.swapArray = ([a, b]) =>\nUtil.cacheAdapter = (st, defaultOpts = {}) =>\n  () =>\n  c =>\n  () =>\n  getItem(request, opts = {})\n  setItem(request, response)\n  addItem(request)\n  removeItem(request, opts = {})\n  key(index)\n  keys(urls = false, t = a => a)\n  response =>\n  r =>\n  clear()\nUtil.cachedFetch = (allOpts = {}) =>\n() =>\n  self = function CachedFetch(request, opts = {})\n(returnValue, fn, ...args) =>\nUtil.proxyObject = (root, handler) =>\n  ptr = path =>\n(a, i) =>\n  (value, path) =>\n  get(target, key)\n  node(path)\nUtil.parseXML = function(xmlStr)\n  () =>\n  parser =>\n  fn = (value, ...args) =>\n  () =>\n  map =>\n(obj, ...args) =>\n  () =>\n  (obj, ...args) =>\n  self = (obj, ...args) =>\n() =>\n  () =>\n  a =>\n  () =>\n  () =>\n  fn =>\n  () =>\n  () =>\n  a =>\n() =>\n  () =>\n  a =>\n  () =>\n() =>\nUtil.getOpt = (options = {}, args) =>\n  findOpt = arg =>\n([optname, option]) =>\n  opt =>\n  () =>\n  v =>\n  () =>\n  () =>\n  v =>\nUtil.getEnv = varName =>\n  () =>\n  e =>\n  () =>\nUtil.getEnvVars = () =>\n  () =>\n  e =>\n  () =>\nUtil.safeFunction = (fn, trapExceptions, thisObj) =>\n  function(...args)\n  function(...args)\n  a =>\n  error =>\nUtil.safeCall = (fn, ...args) =>\nUtil.safeApply = (fn, args = []) =>\nUtil.exit = exitCode =>\n  stdExit = std =>\n  () =>\n  ([obj, exit]) =>\n  () =>\nUtil.atexit = handler =>\nUtil.callMain = (fn, trapExceptions) =>\n(...args) =>\n  ret =>\n() =>\n  err =>\n  () =>\n  argv1 =>\nUtil.printReturnValue = (fn, opts = {}) =>\n  print = (returnValue, fn, ...args) =>\n  self = (...args) =>\nUtil.replaceAll = (needles, haystack) =>\n([re, str]) =>\n(acc, [match, replacement]) =>\nUtil.quote = (str, q = '\"') =>\nUtil.escape = (str, pred = codePoint => codePoint < 32 || codePoint > 0xff) =>\nUtil.escapeRegex = string =>\nUtil.consolePrinter = function ConsolePrinter(log = console.log)\n  self = function(...args)\n  .log = (...args) =>\nUtil.consoleJoin = function(...args)\nUtil.consoleConcat = function(...args)\n  self = function ConsoleConcat(...args)\n  clear()\n  log = (...args) =>\n  print()\n  i =>\n  output()\n  add(...args)\nUtil.booleanAdapter = (getSetFn, trueValue = 1, falseValue = 0) =>\n  function(value)\n  set = () =>\n  function(...args)\nUtil.deriveGetSet = (fn, get = v => v, set = v => v, thisObj) =>\n  () =>\n  v =>\n  handler = () =>\nExFunc\n  constructor()\n  __call__(...args)\nUtil.isatty = fd =>\n  mod =>\nUtil.ttyGetWinSize = (fd = 1) =>\n  m =>\n  (resolve, reject) =>\n  (resolve, reject) =>\n  (fd = 0, mode = true) =>\nUtil.stdio = (fd, mode = true) =>\nUtil.signal = (num, act) =>\n  m =>\n() =>\nUtil.timeit = (fn, args = [], options = {}) =>\n(p, c) =>\nUtil.lazyProperty = (obj, name, getter, opts = {}) =>\n  replaceProperty = value =>\n  function()\n  function()\n  v =>\nUtil.lazyProperties = (obj, gettersObj, opts = {}) =>\n  f = (a, b) =>\n  function(a, b)\n(a, b) =>\n(a, b) =>\n() =>\nHighResolutionTime\n  constructor(secs = 0, nano = 0)\n  static create(s, n)\n  get seconds()\n  get milliseconds()\n  get nanoseconds()\n  diff(o)\n  sum(o)\n  since(o)\n  toString()\n  inspect()\n  hrtime(previousTimestamp)\n  hrtime(previousTimestamp)\n  () =>\n  (minDelay = 0) =>\n  resolve =>\n  resolve =>\n  animationFrame(t)\nUtil.getNow = () =>\n  performanceNow = () =>\n  performanceNow = function(clock = CLOCK_MONOTONIC_RAW)\nUtil.formatColumns = a =>\n(acc, row, i) =>\n(col, j) =>\n  row =>\n(col, j) =>\nUtil.getPlatform = () =>\n  () =>\n  () =>\n  () =>\n  () =>\n  () =>\n  () =>\n  () =>\n() =>\nUtil.colIndexes = line =>\n([prev, cols], char, i) =>\nUtil.colSplit = (line, indexes) =>\n  map = (name, flag) =>\n(value)\n  log = (duration, name, args, ret) =>\n(args, ret) =>\n  (args, ret) =>\n  function(...args)\n  function(...args)\n  both = () =>\n(name, args) =>\n  arg =>\n(name, ret) =>\n  function(...args)\nUtil.bind = function(f, ...args)\n  ret = function()\n  ret = function()\n  ret\n  f\nUtil.bytesToUTF8 = function*(bytes)\nUtil.codePointsToString = codePoints =>\nUtil.bufferToString = b =>\nUtil.levenshteinDistance = function levenshteinDistance(a, b)\nUtil.padTrunc = (...args) =>\n  (s, pad = ' ') =>\nUtil.setReadHandler = (fd, handler) =>\n  os =>",
			"settings":
			{
				"buffer_size": 26681,
				"line_ending": "Unix",
				"name": "𝌆 Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					4,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					5,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/util.js",
						"symkeys":
						[
							[
								771,
								788
							],
							[
								1023,
								1072
							],
							[
								1959,
								1963
							],
							[
								2779,
								2786
							],
							[
								3308,
								3322
							],
							[
								3582,
								3588
							],
							[
								3691,
								3718
							],
							[
								3766,
								3797
							],
							[
								3953,
								3963
							],
							[
								4002,
								4026
							],
							[
								4093,
								4109
							],
							[
								4154,
								4171
							],
							[
								4219,
								4239
							],
							[
								4290,
								4313
							],
							[
								4361,
								4387
							],
							[
								4788,
								4793
							],
							[
								4852,
								4876
							],
							[
								4899,
								4915
							],
							[
								4930,
								4941
							],
							[
								4981,
								4997
							],
							[
								5012,
								5024
							],
							[
								5065,
								5081
							],
							[
								5096,
								5111
							],
							[
								5155,
								5171
							],
							[
								5186,
								5204
							],
							[
								5251,
								5267
							],
							[
								5282,
								5303
							],
							[
								5353,
								5369
							],
							[
								5384,
								5408
							],
							[
								5534,
								5557
							],
							[
								5640,
								5660
							],
							[
								5915,
								5927
							],
							[
								5977,
								5989
							],
							[
								6109,
								6132
							],
							[
								6205,
								6231
							],
							[
								6466,
								6487
							],
							[
								6542,
								6563
							],
							[
								6692,
								6716
							],
							[
								6802,
								6809
							],
							[
								6830,
								6837
							],
							[
								6867,
								6889
							],
							[
								6972,
								6979
							],
							[
								6997,
								7004
							],
							[
								7029,
								7051
							],
							[
								7101,
								7108
							],
							[
								7162,
								7169
							],
							[
								7201,
								7230
							],
							[
								7576,
								7601
							],
							[
								7728,
								7747
							],
							[
								7829,
								7848
							],
							[
								8035,
								8054
							],
							[
								8132,
								8151
							],
							[
								8216,
								8235
							],
							[
								8331,
								8371
							],
							[
								8513,
								8526
							],
							[
								8552,
								8585
							],
							[
								8834,
								8848
							],
							[
								9009,
								9016
							],
							[
								9233,
								9239
							],
							[
								9645,
								9669
							],
							[
								10048,
								10084
							],
							[
								10126,
								10144
							],
							[
								10327,
								10364
							],
							[
								10445,
								10463
							],
							[
								10481,
								10492
							],
							[
								10558,
								10592
							],
							[
								10619,
								10637
							],
							[
								10912,
								10957
							],
							[
								11157,
								11175
							],
							[
								11426,
								11452
							],
							[
								11711,
								11730
							],
							[
								11809,
								11828
							],
							[
								11978,
								12026
							],
							[
								12207,
								12222
							],
							[
								12248,
								12258
							],
							[
								12345,
								12350
							],
							[
								13117,
								13123
							],
							[
								13199,
								13204
							],
							[
								13213,
								13218
							],
							[
								13247,
								13256
							],
							[
								13280,
								13290
							],
							[
								13312,
								13325
							],
							[
								13353,
								13367
							],
							[
								13393,
								13410
							],
							[
								13438,
								13456
							],
							[
								13557,
								13562
							],
							[
								13770,
								13793
							],
							[
								14244,
								14248
							],
							[
								14290,
								14294
							],
							[
								14401,
								14413
							],
							[
								15002,
								15012
							],
							[
								15100,
								15128
							],
							[
								15162,
								15168
							],
							[
								15230,
								15254
							],
							[
								15284,
								15325
							],
							[
								15601,
								15613
							],
							[
								15646,
								15678
							],
							[
								15720,
								15760
							],
							[
								15914,
								15934
							],
							[
								17220,
								17250
							],
							[
								17310,
								17347
							],
							[
								17532,
								17538
							],
							[
								17753,
								17783
							],
							[
								17863,
								17895
							],
							[
								18123,
								18153
							],
							[
								18290,
								18293
							],
							[
								18430,
								18464
							],
							[
								18621,
								18653
							],
							[
								18943,
								18971
							],
							[
								19049,
								19078
							],
							[
								19153,
								19190
							],
							[
								19240,
								19275
							],
							[
								19456,
								19491
							],
							[
								19791,
								19814
							],
							[
								19845,
								19869
							],
							[
								19933,
								19960
							],
							[
								19993,
								20033
							],
							[
								20151,
								20194
							],
							[
								20497,
								20526
							],
							[
								20583,
								20597
							],
							[
								20646,
								20675
							],
							[
								20717,
								20744
							],
							[
								20854,
								20861
							],
							[
								20881,
								20909
							],
							[
								20999,
								21026
							],
							[
								21065,
								21092
							],
							[
								21142,
								21166
							],
							[
								21241,
								21276
							],
							[
								21378,
								21410
							],
							[
								21495,
								21529
							],
							[
								21614,
								21644
							],
							[
								21864,
								21874
							],
							[
								21927,
								21931
							],
							[
								21999,
								22036
							],
							[
								22073,
								22090
							],
							[
								22113,
								22130
							],
							[
								22190,
								22207
							],
							[
								22293,
								22302
							],
							[
								22374,
								22388
							],
							[
								22456,
								22461
							],
							[
								23159,
								23197
							],
							[
								23348,
								23383
							],
							[
								23467,
								23485
							],
							[
								23543,
								23587
							],
							[
								23601,
								23610
							],
							[
								23642,
								23670
							],
							[
								23684,
								23693
							],
							[
								23762,
								23805
							],
							[
								23925,
								23958
							],
							[
								23985,
								23992
							],
							[
								24121,
								24126
							],
							[
								24142,
								24176
							],
							[
								24253,
								24279
							],
							[
								24377,
								24411
							],
							[
								24434,
								24448
							],
							[
								24483,
								24533
							],
							[
								24671,
								24717
							],
							[
								24778,
								24840
							],
							[
								24851,
								24867
							],
							[
								25002,
								25039
							],
							[
								25078,
								25135
							],
							[
								25506,
								25540
							],
							[
								25680,
								25719
							],
							[
								25799,
								25836
							],
							[
								25953,
								25984
							],
							[
								26739,
								26782
							],
							[
								26913,
								26918
							],
							[
								27074,
								27108
							],
							[
								27316,
								27352
							],
							[
								27414,
								27440
							],
							[
								28200,
								28225
							],
							[
								28293,
								28321
							],
							[
								28914,
								28933
							],
							[
								29028,
								29043
							],
							[
								29171,
								29196
							],
							[
								29496,
								29553
							],
							[
								29676,
								29741
							],
							[
								29851,
								29903
							],
							[
								30024,
								30074
							],
							[
								30190,
								30205
							],
							[
								30276,
								30287
							],
							[
								30375,
								30386
							],
							[
								30412,
								30427
							],
							[
								30505,
								30519
							],
							[
								30559,
								30578
							],
							[
								30801,
								30890
							],
							[
								30893,
								30990
							],
							[
								31046,
								31058
							],
							[
								31123,
								31137
							],
							[
								31169,
								31175
							],
							[
								31218,
								31226
							],
							[
								31272,
								31280
							],
							[
								31336,
								31351
							],
							[
								31404,
								31411
							],
							[
								31522,
								31532
							],
							[
								31674,
								31684
							],
							[
								31747,
								31754
							],
							[
								31839,
								31866
							],
							[
								31890,
								31899
							],
							[
								31925,
								31933
							],
							[
								31950,
								31959
							],
							[
								31998,
								32006
							],
							[
								32017,
								32030
							],
							[
								32041,
								32056
							],
							[
								32085,
								32103
							],
							[
								32183,
								32207
							],
							[
								32628,
								32662
							],
							[
								32693,
								32704
							],
							[
								32709,
								32719
							],
							[
								32733,
								32744
							],
							[
								32765,
								32801
							],
							[
								33305,
								33335
							],
							[
								33379,
								33410
							],
							[
								33645,
								33667
							],
							[
								33727,
								33753
							],
							[
								33869,
								33880
							],
							[
								33992,
								34023
							],
							[
								34227,
								34252
							],
							[
								34319,
								34371
							],
							[
								34483,
								34505
							],
							[
								34511,
								34532
							],
							[
								34549,
								34581
							],
							[
								34701,
								34736
							],
							[
								34801,
								34834
							],
							[
								34881,
								34893
							],
							[
								34963,
								34975
							],
							[
								35032,
								35063
							],
							[
								35107,
								35149
							],
							[
								35325,
								35353
							],
							[
								35464,
								35494
							],
							[
								35506,
								35523
							],
							[
								35647,
								35683
							],
							[
								35760,
								35786
							],
							[
								35828,
								35867
							],
							[
								35979,
								35983
							],
							[
								36010,
								36014
							],
							[
								36053,
								36057
							],
							[
								36085,
								36089
							],
							[
								36112,
								36148
							],
							[
								36186,
								36218
							],
							[
								36336,
								36377
							],
							[
								36470,
								36494
							],
							[
								36517,
								36528
							],
							[
								36546,
								36563
							],
							[
								36649,
								36673
							],
							[
								36696,
								36722
							],
							[
								37178,
								37210
							],
							[
								37464,
								37473
							],
							[
								37504,
								37513
							],
							[
								37544,
								37553
							],
							[
								37584,
								37593
							],
							[
								37624,
								37633
							],
							[
								37663,
								37672
							],
							[
								37703,
								37712
							],
							[
								37721,
								37741
							],
							[
								37785,
								37790
							],
							[
								37833,
								37842
							],
							[
								38010,
								38043
							],
							[
								38417,
								38443
							],
							[
								38669,
								38712
							],
							[
								38754,
								38766
							],
							[
								38844,
								38889
							],
							[
								39010,
								39030
							],
							[
								39151,
								39158
							],
							[
								39177,
								39184
							],
							[
								39364,
								39393
							],
							[
								39522,
								39567
							],
							[
								39695,
								39727
							],
							[
								39806,
								39827
							],
							[
								40078,
								40096
							],
							[
								40283,
								40296
							],
							[
								40418,
								40466
							],
							[
								40479,
								40488
							],
							[
								40526,
								40536
							],
							[
								40583,
								40617
							],
							[
								40894,
								40936
							],
							[
								40990,
								41028
							],
							[
								41190,
								41209
							],
							[
								41409,
								41448
							],
							[
								41582,
								41599
							],
							[
								42139,
								42159
							],
							[
								42247,
								42266
							],
							[
								42307,
								42326
							],
							[
								44179,
								44186
							],
							[
								44201,
								44208
							],
							[
								45825,
								45858
							],
							[
								46006,
								46015
							],
							[
								46035,
								46043
							],
							[
								46047,
								46056
							],
							[
								46197,
								46225
							],
							[
								46339,
								46367
							],
							[
								46481,
								46499
							],
							[
								46878,
								46913
							],
							[
								46953,
								46980
							],
							[
								47061,
								47109
							],
							[
								47320,
								47407
							],
							[
								47418,
								47434
							],
							[
								47543,
								47583
							],
							[
								47609,
								47613
							],
							[
								47630,
								47635
							],
							[
								47654,
								47659
							],
							[
								47677,
								47714
							],
							[
								47740,
								47744
							],
							[
								47750,
								47756
							],
							[
								47771,
								47777
							],
							[
								47785,
								47791
							],
							[
								47807,
								47844
							],
							[
								47870,
								47874
							],
							[
								47888,
								47894
							],
							[
								47902,
								47908
							],
							[
								47915,
								47921
							],
							[
								47938,
								47991
							],
							[
								47992,
								48009
							],
							[
								48114,
								48133
							],
							[
								48180,
								48218
							],
							[
								48243,
								48256
							],
							[
								48851,
								48895
							],
							[
								48967,
								48985
							],
							[
								49239,
								49257
							],
							[
								49584,
								49611
							],
							[
								49620,
								49635
							],
							[
								49711,
								49738
							],
							[
								49865,
								49869
							],
							[
								49947,
								49960
							],
							[
								50157,
								50186
							],
							[
								50294,
								50320
							],
							[
								50388,
								50415
							],
							[
								50687,
								50708
							],
							[
								50778,
								50803
							],
							[
								50823,
								50845
							],
							[
								50909,
								50934
							],
							[
								51059,
								51083
							],
							[
								51307,
								51323
							],
							[
								51324,
								51343
							],
							[
								51376,
								51396
							],
							[
								51485,
								51513
							],
							[
								51611,
								51636
							],
							[
								51686,
								51713
							],
							[
								51716,
								51735
							],
							[
								52040,
								52070
							],
							[
								52113,
								52128
							],
							[
								52196,
								52219
							],
							[
								52258,
								52262
							],
							[
								52302,
								52306
							],
							[
								52344,
								52368
							],
							[
								52435,
								52471
							],
							[
								52536,
								52543
							],
							[
								52581,
								52620
							],
							[
								52760,
								52793
							],
							[
								52985,
								52996
							],
							[
								53093,
								53124
							],
							[
								53183,
								53239
							],
							[
								53603,
								53644
							],
							[
								54010,
								54050
							],
							[
								54278,
								54326
							],
							[
								54358,
								54367
							],
							[
								54650,
								54689
							],
							[
								54700,
								54709
							],
							[
								54748,
								54759
							],
							[
								55164,
								55205
							],
							[
								55251,
								55284
							],
							[
								55361,
								55396
							],
							[
								55496,
								55539
							],
							[
								55719,
								55755
							],
							[
								56072,
								56111
							],
							[
								56247,
								56295
							],
							[
								56463,
								56477
							],
							[
								56649,
								56656
							],
							[
								56772,
								56779
							],
							[
								57114,
								57138
							],
							[
								57168,
								57185
							],
							[
								57242,
								57264
							],
							[
								57293,
								57310
							],
							[
								57416,
								57447
							],
							[
								57521,
								57541
							],
							[
								57675,
								57709
							],
							[
								57739,
								57748
							],
							[
								57768,
								57776
							],
							[
								57780,
								57789
							],
							[
								57882,
								57916
							],
							[
								58217,
								58250
							],
							[
								58612,
								58646
							],
							[
								59016,
								59050
							],
							[
								59333,
								59377
							],
							[
								60002,
								60041
							],
							[
								60169,
								60251
							],
							[
								61377,
								61390
							],
							[
								61408,
								61417
							],
							[
								61435,
								61444
							],
							[
								61495,
								61506
							],
							[
								61530,
								61542
							],
							[
								61549,
								61560
							],
							[
								61597,
								61602
							],
							[
								61705,
								61710
							],
							[
								61855,
								61860
							],
							[
								61893,
								61898
							],
							[
								61933,
								61938
							],
							[
								62133,
								62138
							],
							[
								62342,
								62375
							],
							[
								62388,
								62389
							],
							[
								62798,
								62831
							],
							[
								62995,
								63032
							],
							[
								63040,
								63041
							],
							[
								63517,
								63524
							],
							[
								63663,
								63674
							],
							[
								63760,
								63771
							],
							[
								64058,
								64072
							],
							[
								64615,
								64647
							],
							[
								65157,
								65195
							],
							[
								65494,
								65517
							],
							[
								65530,
								65550
							],
							[
								65613,
								65627
							],
							[
								65631,
								65645
							],
							[
								65722,
								65737
							],
							[
								65811,
								65825
							],
							[
								65868,
								65891
							],
							[
								66083,
								66101
							],
							[
								66307,
								66321
							],
							[
								66325,
								66339
							],
							[
								66510,
								66532
							],
							[
								67076,
								67081
							],
							[
								67123,
								67129
							],
							[
								67172,
								67179
							],
							[
								67208,
								67247
							],
							[
								67276,
								67286
							],
							[
								67292,
								67301
							],
							[
								67319,
								67346
							],
							[
								67386,
								67395
							],
							[
								67404,
								67412
							],
							[
								67460,
								67469
							],
							[
								67495,
								67504
							],
							[
								67515,
								67523
							],
							[
								67595,
								67604
							],
							[
								67695,
								67739
							],
							[
								67801,
								67862
							],
							[
								68170,
								68196
							],
							[
								68224,
								68229
							],
							[
								68253,
								68266
							],
							[
								68374,
								68439
							],
							[
								68543,
								68569
							],
							[
								68603,
								68629
							],
							[
								68650,
								68683
							],
							[
								68711,
								68727
							],
							[
								68742,
								68749
							],
							[
								68771,
								68787
							],
							[
								68812,
								68839
							],
							[
								68896,
								68911
							],
							[
								68933,
								68945
							],
							[
								68962,
								68977
							],
							[
								68987,
								68996
							],
							[
								69036,
								69045
							],
							[
								69052,
								69058
							],
							[
								69070,
								69099
							],
							[
								69185,
								69195
							],
							[
								69236,
								69251
							],
							[
								69270,
								69283
							],
							[
								69708,
								69718
							],
							[
								69857,
								69869
							],
							[
								70149,
								70170
							],
							[
								70356,
								70367
							],
							[
								70404,
								70413
							],
							[
								70493,
								70526
							],
							[
								70831,
								70860
							],
							[
								70904,
								70926
							],
							[
								70960,
								70999
							],
							[
								71033,
								71039
							],
							[
								71112,
								71137
							],
							[
								71148,
								71160
							],
							[
								71352,
								71362
							],
							[
								71414,
								71464
							],
							[
								71872,
								71902
							],
							[
								71988,
								72018
							],
							[
								72091,
								72122
							],
							[
								72276,
								72300
							],
							[
								72355,
								72379
							],
							[
								72506,
								72510
							],
							[
								72590,
								72615
							],
							[
								72703,
								72726
							],
							[
								72758,
								72764
							],
							[
								72907,
								72908
							],
							[
								72999,
								73003
							],
							[
								73137,
								73168
							],
							[
								73419,
								73431
							],
							[
								73547,
								73561
							],
							[
								73707,
								73739
							],
							[
								73943,
								73969
							],
							[
								73970,
								73987
							],
							[
								74036,
								74059
							],
							[
								74092,
								74102
							],
							[
								74151,
								74163
							],
							[
								74478,
								74488
							],
							[
								74680,
								74692
							],
							[
								75367,
								75400
							],
							[
								75428,
								75442
							],
							[
								75536,
								75561
							],
							[
								75710,
								75738
							],
							[
								75872,
								75901
							],
							[
								76201,
								76249
							],
							[
								76438,
								76475
							],
							[
								76524,
								76572
							],
							[
								76686,
								76720
							],
							[
								76728,
								76752
							],
							[
								77266,
								77296
							],
							[
								77422,
								77449
							],
							[
								77926,
								77977
							],
							[
								78019,
								78046
							],
							[
								78216,
								78264
							],
							[
								78476,
								78511
							],
							[
								78718,
								78751
							],
							[
								79023,
								79054
							],
							[
								79300,
								79344
							],
							[
								79480,
								79496
							],
							[
								79656,
								79706
							],
							[
								80100,
								80105
							],
							[
								80186,
								80199
							],
							[
								80248,
								80258
							],
							[
								80262,
								80275
							],
							[
								80350,
								80365
							],
							[
								80414,
								80424
							],
							[
								80428,
								80443
							],
							[
								80510,
								80543
							],
							[
								80653,
								80660
							],
							[
								80944,
								80959
							],
							[
								81216,
								81241
							],
							[
								81302,
								81330
							],
							[
								81419,
								81428
							],
							[
								82395,
								82426
							],
							[
								82598,
								82612
							],
							[
								83235,
								83269
							],
							[
								83454,
								83476
							],
							[
								83512,
								83536
							],
							[
								83539,
								83559
							],
							[
								83803,
								83829
							],
							[
								83924,
								83962
							],
							[
								84364,
								84407
							],
							[
								84479,
								84501
							],
							[
								84523,
								84549
							],
							[
								84674,
								84782
							],
							[
								85020,
								85071
							],
							[
								85149,
								85183
							],
							[
								85271,
								85299
							],
							[
								85333,
								85368
							],
							[
								85442,
								85467
							],
							[
								85489,
								85506
							],
							[
								85548,
								85597
							],
							[
								85670,
								85683
							],
							[
								85754,
								85767
							],
							[
								85943,
								85981
							],
							[
								85992,
								86011
							],
							[
								86065,
								86106
							],
							[
								86117,
								86136
							],
							[
								86194,
								86219
							],
							[
								86266,
								86305
							],
							[
								86390,
								86403
							],
							[
								86442,
								86452
							],
							[
								86506,
								86513
							],
							[
								86538,
								86544
							],
							[
								86586,
								86599
							],
							[
								86619,
								86655
							],
							[
								86740,
								86753
							],
							[
								86792,
								86802
							],
							[
								86835,
								86842
							],
							[
								86948,
								86981
							],
							[
								87061,
								87096
							],
							[
								87136,
								87146
							],
							[
								87261,
								87289
							],
							[
								87451,
								87463
							],
							[
								87568,
								87593
							],
							[
								87708,
								87721
							],
							[
								87820,
								87847
							],
							[
								87966,
								87979
							],
							[
								88082,
								88115
							],
							[
								88338,
								88357
							],
							[
								88436,
								88464
							],
							[
								88483,
								88502
							],
							[
								88520,
								88555
							],
							[
								88898,
								88929
							],
							[
								88988,
								89001
							],
							[
								89085,
								89117
							],
							[
								89298,
								89348
							],
							[
								89391,
								89418
							],
							[
								89620,
								89653
							],
							[
								89704,
								89739
							],
							[
								89752,
								89766
							],
							[
								89833,
								89895
							],
							[
								90094,
								90110
							],
							[
								90337,
								90347
							],
							[
								90385,
								90395
							],
							[
								90415,
								90425
							],
							[
								90453,
								90478
							],
							[
								90604,
								90629
							],
							[
								90903,
								90930
							],
							[
								91162,
								91174
							],
							[
								92827,
								92862
							],
							[
								92881,
								92889
							],
							[
								92937,
								92952
							],
							[
								93100,
								93113
							],
							[
								93306,
								93322
							],
							[
								93529,
								93554
							],
							[
								93569,
								93591
							],
							[
								93807,
								93811
							],
							[
								94025,
								94047
							],
							[
								94069,
								94079
							],
							[
								94097,
								94110
							],
							[
								94257,
								94279
							],
							[
								94301,
								94311
							],
							[
								94329,
								94342
							],
							[
								94471,
								94493
							],
							[
								94519,
								94529
							],
							[
								94547,
								94560
							],
							[
								94596,
								94618
							],
							[
								94639,
								94649
							],
							[
								94667,
								94680
							],
							[
								94700,
								94741
							],
							[
								95048,
								95071
							],
							[
								95152,
								95174
							],
							[
								95248,
								95268
							],
							[
								95395,
								95406
							],
							[
								95439,
								95456
							],
							[
								95632,
								95651
							],
							[
								95686,
								95708
							],
							[
								95840,
								95861
							],
							[
								95999,
								96019
							],
							[
								96086,
								96109
							],
							[
								96185,
								96207
							],
							[
								96325,
								96349
							],
							[
								96411,
								96423
							],
							[
								96594,
								96612
							],
							[
								96674,
								96686
							],
							[
								96838,
								96861
							],
							[
								97002,
								97018
							],
							[
								97074,
								97087
							],
							[
								97119,
								97187
							],
							[
								97228,
								97250
							],
							[
								97279,
								97289
							],
							[
								97305,
								97318
							],
							[
								97378,
								97391
							],
							[
								97467,
								97490
							],
							[
								97618,
								97640
							],
							[
								97737,
								97750
							],
							[
								97812,
								97828
							],
							[
								97866,
								97870
							],
							[
								98129,
								98172
							],
							[
								98187,
								98212
							],
							[
								98355,
								98363
							],
							[
								98377,
								98384
							],
							[
								98393,
								98398
							],
							[
								98416,
								98457
							],
							[
								98470,
								98477
							],
							[
								98554,
								98593
							],
							[
								98750,
								98761
							],
							[
								98796,
								98817
							],
							[
								98895,
								98902
							],
							[
								98934,
								98959
							],
							[
								99017,
								99026
							],
							[
								99043,
								99050
							],
							[
								99068,
								99094
							],
							[
								99152,
								99161
							],
							[
								99179,
								99186
							],
							[
								99205,
								99300
							],
							[
								99932,
								99952
							],
							[
								99953,
								99967
							],
							[
								99989,
								99996
							],
							[
								100023,
								100043
							],
							[
								100044,
								100058
							],
							[
								100079,
								100086
							],
							[
								100130,
								100144
							],
							[
								100216,
								100265
							],
							[
								100278,
								100294
							],
							[
								100328,
								100344
							],
							[
								100436,
								100468
							],
							[
								100499,
								100538
							],
							[
								100919,
								100960
							],
							[
								100999,
								101006
							],
							[
								101062,
								101082
							],
							[
								101120,
								101139
							],
							[
								101213,
								101230
							],
							[
								101249,
								101269
							],
							[
								101273,
								101290
							],
							[
								101340,
								101363
							],
							[
								101464,
								101487
							],
							[
								101531,
								101550
							],
							[
								101593,
								101621
							],
							[
								101717,
								101738
							],
							[
								101814,
								101840
							],
							[
								101953,
								101971
							],
							[
								102025,
								102030
							],
							[
								102033,
								102039
							],
							[
								102052,
								102098
							],
							[
								102181,
								102194
							],
							[
								102572,
								102585
							],
							[
								102648,
								102697
							],
							[
								102710,
								102726
							],
							[
								102748,
								102761
							],
							[
								102789,
								102801
							],
							[
								102805,
								102818
							],
							[
								102880,
								102932
							],
							[
								103121,
								103134
							],
							[
								103197,
								103236
							],
							[
								103380,
								103415
							],
							[
								103487,
								103491
							],
							[
								103518,
								103527
							],
							[
								103778,
								103813
							],
							[
								103889,
								103910
							],
							[
								103925,
								103933
							],
							[
								103946,
								103955
							],
							[
								103977,
								103981
							],
							[
								104020,
								104024
							],
							[
								104171,
								104213
							],
							[
								104545,
								104573
							],
							[
								104633,
								104684
							],
							[
								104935,
								104978
							],
							[
								105031,
								105074
							],
							[
								105110,
								105115
							],
							[
								105192,
								105206
							],
							[
								105241,
								105251
							],
							[
								105264,
								105299
							],
							[
								105343,
								105351
							],
							[
								105898,
								105942
							],
							[
								106477,
								106500
							],
							[
								106908,
								106950
							],
							[
								107756,
								107779
							],
							[
								108151,
								108156
							],
							[
								108710,
								108723
							],
							[
								108759,
								108774
							],
							[
								108812,
								108829
							],
							[
								108871,
								108915
							],
							[
								109114,
								109121
							],
							[
								109764,
								109777
							],
							[
								109812,
								109821
							],
							[
								109878,
								109897
							],
							[
								110003,
								110016
							],
							[
								110191,
								110206
							],
							[
								110250,
								110267
							],
							[
								110313,
								110326
							],
							[
								110368,
								110381
							],
							[
								110423,
								110438
							],
							[
								110482,
								110499
							],
							[
								110627,
								110632
							],
							[
								110781,
								110807
							],
							[
								110984,
								110998
							],
							[
								111021,
								111026
							],
							[
								111660,
								111664
							],
							[
								111722,
								111726
							],
							[
								111969,
								111978
							],
							[
								112103,
								112116
							],
							[
								112190,
								112204
							],
							[
								112455,
								112478
							],
							[
								112496,
								112505
							],
							[
								112522,
								112533
							],
							[
								112543,
								112552
							],
							[
								112572,
								112600
							],
							[
								112708,
								112741
							],
							[
								112908,
								112930
							],
							[
								112948,
								112957
							],
							[
								112977,
								112990
							],
							[
								113048,
								113057
							],
							[
								113077,
								113119
							],
							[
								113592,
								113600
							],
							[
								113635,
								113646
							],
							[
								113723,
								113761
							],
							[
								114112,
								114133
							],
							[
								114218,
								114252
							],
							[
								114405,
								114444
							],
							[
								114499,
								114511
							],
							[
								114970,
								114978
							],
							[
								115110,
								115117
							],
							[
								115176,
								115184
							],
							[
								115297,
								115314
							],
							[
								115393,
								115397
							],
							[
								115451,
								115468
							],
							[
								115580,
								115628
							],
							[
								115914,
								116009
							],
							[
								116144,
								116156
							],
							[
								116166,
								116178
							],
							[
								116183,
								116196
							],
							[
								116302,
								116314
							],
							[
								116324,
								116336
							],
							[
								116341,
								116354
							],
							[
								116462,
								116470
							],
							[
								116681,
								116689
							],
							[
								117064,
								117074
							],
							[
								117154,
								117164
							],
							[
								117245,
								117253
							],
							[
								117384,
								117403
							],
							[
								117952,
								117956
							],
							[
								118025,
								118042
							],
							[
								118082,
								118097
							],
							[
								118135,
								118148
							],
							[
								118184,
								118199
							],
							[
								118309,
								118314
							],
							[
								118384,
								118393
							],
							[
								118414,
								118424
							],
							[
								118531,
								118596
							],
							[
								118947,
								118981
							],
							[
								119065,
								119108
							],
							[
								119324,
								119371
							],
							[
								119562,
								119613
							],
							[
								119833,
								119885
							],
							[
								120233,
								120276
							],
							[
								120592,
								120596
							],
							[
								120711,
								120786
							],
							[
								121104,
								121108
							],
							[
								121341,
								121383
							],
							[
								121447,
								121455
							],
							[
								121616,
								121657
							],
							[
								121704,
								121736
							],
							[
								121817,
								121850
							],
							[
								121909,
								121973
							],
							[
								122213,
								122254
							],
							[
								122292,
								122310
							],
							[
								122359,
								122366
							],
							[
								122560,
								122624
							],
							[
								122800,
								122865
							],
							[
								122878,
								122890
							],
							[
								122907,
								122918
							],
							[
								122942,
								122957
							],
							[
								123340,
								123370
							],
							[
								123547,
								123567
							],
							[
								123587,
								123641
							],
							[
								123864,
								123870
							],
							[
								123922,
								123927
							],
							[
								123983,
								123989
							],
							[
								124066,
								124071
							],
							[
								124114,
								124173
							],
							[
								126222,
								126235
							],
							[
								126383,
								126397
							],
							[
								126557,
								126570
							],
							[
								126652,
								126671
							],
							[
								126914,
								126951
							],
							[
								127299,
								127369
							],
							[
								127725,
								127767
							],
							[
								127818,
								127827
							],
							[
								127993,
								128028
							],
							[
								128155,
								128159
							],
							[
								128181,
								128192
							],
							[
								128302,
								128325
							],
							[
								128469,
								128493
							],
							[
								128594,
								128598
							],
							[
								128621,
								128625
							],
							[
								128637,
								128669
							],
							[
								128717,
								128757
							],
							[
								128986,
								129005
							],
							[
								129037,
								129101
							],
							[
								129153,
								129158
							],
							[
								129191,
								129221
							],
							[
								129308,
								129343
							],
							[
								129367,
								129393
							],
							[
								129507,
								129540
							],
							[
								129679,
								129737
							],
							[
								129762,
								129788
							],
							[
								129831,
								129866
							],
							[
								129909,
								129930
							],
							[
								130079,
								130105
							],
							[
								130263,
								130282
							],
							[
								130604,
								130653
							],
							[
								130678,
								130699
							],
							[
								130741,
								130757
							],
							[
								130811,
								130834
							],
							[
								130897,
								130925
							],
							[
								130987,
								131008
							],
							[
								131032,
								131037
							],
							[
								131610,
								131641
							],
							[
								131644,
								131662
							],
							[
								131714,
								131715
							],
							[
								131728,
								131739
							],
							[
								132294,
								132339
							],
							[
								132441,
								132465
							],
							[
								132727,
								132737
							],
							[
								132785,
								132806
							],
							[
								132854,
								132875
							],
							[
								132962,
								133003
							],
							[
								133151,
								133155
							],
							[
								133201,
								133209
							],
							[
								133238,
								133242
							],
							[
								133617,
								133630
							],
							[
								133683,
								133703
							],
							[
								134029,
								134086
							],
							[
								134193,
								134204
							],
							[
								134544,
								134564
							],
							[
								134604,
								134640
							],
							[
								134669,
								134682
							],
							[
								134725,
								134735
							],
							[
								134780,
								134795
							],
							[
								135598,
								135611
							],
							[
								136182,
								136202
							],
							[
								136277,
								136292
							],
							[
								136669,
								136682
							],
							[
								136753,
								136773
							],
							[
								136855,
								136870
							],
							[
								136936,
								136965
							],
							[
								137039,
								137072
							],
							[
								137184,
								137198
							],
							[
								137238,
								137253
							],
							[
								137275,
								137303
							],
							[
								137832,
								137855
							],
							[
								138062,
								138090
							],
							[
								138197,
								138239
							],
							[
								138566,
								138622
							],
							[
								138856,
								138897
							],
							[
								138983,
								138994
							],
							[
								139143,
								139156
							],
							[
								139477,
								139493
							],
							[
								139522,
								139574
							],
							[
								139643,
								139650
							],
							[
								139734,
								139748
							],
							[
								139832,
								139847
							],
							[
								139953,
								139957
							],
							[
								139989,
								140009
							],
							[
								140060,
								140073
							],
							[
								140123,
								140135
							],
							[
								140429,
								140444
							],
							[
								140765,
								140775
							],
							[
								140830,
								140840
							],
							[
								140924,
								140935
							],
							[
								140992,
								140999
							],
							[
								141602,
								141612
							],
							[
								141678,
								141689
							],
							[
								141757,
								141769
							],
							[
								141804,
								141817
							],
							[
								141862,
								141877
							],
							[
								141896,
								141923
							],
							[
								142109,
								142152
							],
							[
								142313,
								142373
							],
							[
								142459,
								142484
							],
							[
								142533,
								142576
							],
							[
								142587,
								142597
							],
							[
								142606,
								142635
							],
							[
								142891,
								142907
							],
							[
								142929,
								142940
							],
							[
								142990,
								143020
							],
							[
								143089,
								143094
							],
							[
								143123,
								143128
							],
							[
								143423,
								143436
							],
							[
								143487,
								143518
							],
							[
								143539,
								143552
							],
							[
								143553,
								143573
							],
							[
								143663,
								143699
							],
							[
								143772,
								143787
							],
							[
								143868,
								143880
							],
							[
								144355,
								144360
							],
							[
								145083,
								145110
							],
							[
								145135,
								145140
							],
							[
								145191,
								145220
							],
							[
								145299,
								145304
							],
							[
								145386,
								145399
							],
							[
								145450,
								145461
							],
							[
								145501,
								145522
							],
							[
								145646,
								145663
							],
							[
								145793,
								145813
							],
							[
								146009,
								146035
							],
							[
								146123,
								146129
							],
							[
								146159,
								146164
							],
							[
								146240,
								146273
							],
							[
								146431,
								146436
							],
							[
								146487,
								146500
							],
							[
								146524,
								146530
							],
							[
								146613,
								146637
							],
							[
								146731,
								146742
							],
							[
								146798,
								146811
							],
							[
								146873,
								146884
							],
							[
								146983,
								146993
							],
							[
								147091,
								147104
							],
							[
								147217,
								147226
							],
							[
								147284,
								147296
							],
							[
								147379,
								147387
							],
							[
								147487,
								147494
							],
							[
								147596,
								147616
							],
							[
								147804,
								147825
							],
							[
								148084,
								148101
							],
							[
								148254,
								148266
							],
							[
								148395,
								148409
							],
							[
								148580,
								148593
							],
							[
								148610,
								148630
							],
							[
								148889,
								148919
							],
							[
								148925,
								148951
							],
							[
								148970,
								148996
							],
							[
								149025,
								149043
							],
							[
								149109,
								149143
							],
							[
								149257,
								149311
							],
							[
								149338,
								149358
							],
							[
								149448,
								149465
							],
							[
								149561,
								149583
							],
							[
								149690,
								149714
							],
							[
								149822,
								149852
							],
							[
								149883,
								149892
							],
							[
								149935,
								149954
							],
							[
								150103,
								150123
							],
							[
								150240,
								150259
							],
							[
								150373,
								150389
							],
							[
								150497,
								150507
							],
							[
								150585,
								150592
							],
							[
								150658,
								150667
							],
							[
								151012,
								151033
							],
							[
								151042,
								151070
							],
							[
								151080,
								151125
							],
							[
								151180,
								151191
							],
							[
								151213,
								151223
							],
							[
								151236,
								151247
							],
							[
								151275,
								151308
							],
							[
								151469,
								151501
							],
							[
								151569,
								151591
							],
							[
								151763,
								151799
							],
							[
								151961,
								151977
							],
							[
								152038,
								152074
							],
							[
								152150,
								152161
							],
							[
								152226,
								152230
							],
							[
								152269,
								152282
							],
							[
								152396,
								152432
							],
							[
								152609,
								152614
							],
							[
								152655,
								152708
							],
							[
								153646,
								153675
							],
							[
								153829,
								153866
							],
							[
								153877,
								153890
							],
							[
								153903,
								153912
							],
							[
								153959,
								153979
							],
							[
								154013,
								154029
							],
							[
								154251,
								154272
							],
							[
								154400,
								154432
							],
							[
								154459,
								154468
							],
							[
								154480,
								154493
							],
							[
								154571,
								154595
							],
							[
								154662,
								154671
							],
							[
								154687,
								154697
							],
							[
								154714,
								154731
							],
							[
								154759,
								154768
							],
							[
								154769,
								154792
							],
							[
								154838,
								154862
							],
							[
								155010,
								155015
							],
							[
								155033,
								155042
							],
							[
								155142,
								155150
							],
							[
								155154,
								155163
							],
							[
								155185,
								155198
							],
							[
								155215,
								155228
							],
							[
								155235,
								155248
							],
							[
								155274,
								155291
							],
							[
								155304,
								155320
							],
							[
								155390,
								155395
							],
							[
								155413,
								155422
							],
							[
								155522,
								155530
							],
							[
								155543,
								155552
							],
							[
								155567,
								155572
							],
							[
								155660,
								155697
							],
							[
								155854,
								155870
							],
							[
								155884,
								155906
							],
							[
								156019,
								156025
							],
							[
								157073,
								157088
							],
							[
								157138,
								157152
							],
							[
								157166,
								157181
							],
							[
								157711,
								157728
							],
							[
								157778,
								157794
							],
							[
								158078,
								158108
							],
							[
								158126,
								158135
							],
							[
								158153,
								158163
							],
							[
								158176,
								158185
							],
							[
								158328,
								158357
							],
							[
								158375,
								158384
							],
							[
								158402,
								158412
							],
							[
								158416,
								158425
							],
							[
								159706,
								159758
							],
							[
								159824,
								159847
							],
							[
								159919,
								159937
							],
							[
								160286,
								160296
							],
							[
								160300,
								160314
							],
							[
								160516,
								160548
							],
							[
								160575,
								160610
							],
							[
								160650,
								160673
							],
							[
								160834,
								160850
							],
							[
								161035,
								161044
							],
							[
								161070,
								161090
							],
							[
								161117,
								161126
							],
							[
								161141,
								161165
							],
							[
								161305,
								161350
							],
							[
								161382,
								161400
							],
							[
								161546,
								161558
							],
							[
								161703,
								161708
							],
							[
								162022,
								162029
							],
							[
								162166,
								162185
							],
							[
								162203,
								162225
							],
							[
								162509,
								162551
							],
							[
								162568,
								162605
							],
							[
								162853,
								162872
							],
							[
								163242,
								163282
							],
							[
								163325,
								163339
							],
							[
								163409,
								163439
							],
							[
								163488,
								163518
							],
							[
								163585,
								163663
							],
							[
								164113,
								164141
							],
							[
								164193,
								164257
							],
							[
								164275,
								164299
							],
							[
								164558,
								164577
							],
							[
								164692,
								164728
							],
							[
								165453,
								165491
							],
							[
								165508,
								165546
							],
							[
								166835,
								166842
							],
							[
								166898,
								166916
							],
							[
								167128,
								167135
							],
							[
								167183,
								167187
							],
							[
								167319,
								167327
							],
							[
								167394,
								167406
							],
							[
								168382,
								168448
							],
							[
								168449,
								168466
							],
							[
								168704,
								168715
							],
							[
								168732,
								168751
							],
							[
								168865,
								168929
							],
							[
								168945,
								168954
							],
							[
								168966,
								168974
							],
							[
								169027,
								169042
							],
							[
								169058,
								169064
							],
							[
								169088,
								169101
							],
							[
								169296,
								169313
							],
							[
								169358,
								169383
							],
							[
								169482,
								169488
							],
							[
								169608,
								169640
							],
							[
								169717,
								169721
							],
							[
								169851,
								169872
							],
							[
								169910,
								169931
							],
							[
								170023,
								170048
							],
							[
								170219,
								170252
							],
							[
								170485,
								170512
							],
							[
								170604,
								170608
							],
							[
								170715,
								170720
							],
							[
								170984,
								171030
							],
							[
								171620,
								171629
							],
							[
								171865,
								171918
							],
							[
								171929,
								171955
							],
							[
								172258,
								172274
							],
							[
								172358,
								172369
							],
							[
								172615,
								172619
							],
							[
								172903,
								172956
							],
							[
								173184,
								173197
							],
							[
								173208,
								173224
							],
							[
								173399,
								173408
							],
							[
								173450,
								173459
							],
							[
								173499,
								173504
							],
							[
								173540,
								173558
							],
							[
								173579,
								173610
							],
							[
								173717,
								173736
							],
							[
								174029,
								174042
							],
							[
								174131,
								174149
							],
							[
								174244,
								174261
							],
							[
								174394,
								174401
							],
							[
								174520,
								174526
							],
							[
								174676,
								174684
							],
							[
								174803,
								174813
							],
							[
								175042,
								175051
							],
							[
								175544,
								175584
							],
							[
								175893,
								175928
							],
							[
								176259,
								176265
							],
							[
								176301,
								176319
							],
							[
								176363,
								176373
							],
							[
								176456,
								176466
							],
							[
								176515,
								176547
							],
							[
								176794,
								176813
							],
							[
								177431,
								177453
							],
							[
								177752,
								177812
							],
							[
								178522,
								178547
							],
							[
								178576,
								178592
							],
							[
								178601,
								178612
							],
							[
								178704,
								178710
							],
							[
								178719,
								178730
							],
							[
								178790,
								178814
							],
							[
								178832,
								178841
							],
							[
								178865,
								178874
							],
							[
								178902,
								178913
							],
							[
								178940,
								178951
							],
							[
								178984,
								178997
							],
							[
								179016,
								179029
							],
							[
								179041,
								179054
							],
							[
								179205,
								179216
							],
							[
								179318,
								179343
							],
							[
								179361,
								179387
							],
							[
								179478,
								179512
							],
							[
								179784,
								179805
							],
							[
								179870,
								179888
							],
							[
								180056,
								180092
							],
							[
								180514,
								180534
							],
							[
								180737,
								180752
							],
							[
								181028,
								181051
							],
							[
								181260,
								181278
							],
							[
								181496,
								181508
							],
							[
								181538,
								181553
							],
							[
								181598,
								181604
							],
							[
								181656,
								181670
							],
							[
								181812,
								181830
							],
							[
								182026,
								182058
							],
							[
								182124,
								182140
							],
							[
								182476,
								182492
							],
							[
								182939,
								182942
							],
							[
								182955,
								182956
							],
							[
								182986,
								183022
							],
							[
								183463,
								183502
							],
							[
								183591,
								183617
							],
							[
								183665,
								183726
							],
							[
								184133,
								184161
							],
							[
								184268,
								184286
							],
							[
								184581,
								184619
							],
							[
								184673,
								184678
							]
						],
						"symlist":
						[
							" function Util(g)",
							"Util.formatAnnotatedObject = function(subject, o)",
							"i =>",
							"item =>",
							"padding = x =>",
							"arr =>",
							"Util.curry = (fn, arity) =>",
							"ret = function curried(...args)",
							" (v, i) =>",
							"Curried = function(...a)",
							" function()",
							" function(a)",
							" function(a, b)",
							" function(a, b, c)",
							" function(a, b, c, d)",
							"get()",
							"Util.arityN = (fn, n) =>",
							" function(fn)",
							" function()",
							" function(fn)",
							" function(a)",
							" function(fn)",
							" function(a, b)",
							" function(fn)",
							" function(a, b, c)",
							" function(fn)",
							" function(a, b, c, d)",
							" function(fn)",
							" function(a, b, c, d, e)",
							"Util.getter = target =>",
							"self = function(key)",
							".fn = key =>",
							".fn = key =>",
							"Util.setter = target =>",
							"set = function(key, value)",
							".fn = (key, value) =>",
							".fn = (key, value) =>",
							"Util.remover = target =>",
							" key =>",
							" key =>",
							"Util.hasFn = target =>",
							" key =>",
							" key =>",
							"Util.adder = target =>",
							" arg =>",
							" arg =>",
							"self = function(obj, arg = 1)",
							" function ChooseFn(a, o)",
							".fn = (obj, arg) =>",
							".fn = (obj, arg) =>",
							".fn = (obj, arg) =>",
							".fn = (num, arg) =>",
							".fn = (obj, arg) =>",
							"Util.updater = (target, get, set, fn) =>",
							" (k, f, i) =>",
							" function doUpdate(key, func, i)",
							"create = () =>",
							" key =>",
							" () =>",
							"self = function(...args)",
							"Util.once = (fn, thisArg, memoFn) =>",
							" function(...args)",
							"Util.delay = (func, wait, thisObj) =>",
							" function(...args)",
							"function ()",
							"Util.throttle = (f, t, thisObj) =>",
							" function(...args)",
							"Util.debounce = (func, wait, options = {}) =>",
							" function later()",
							" function debounced(...a)",
							".clear = function()",
							".flush = function()",
							"Util.debounceAsync = (fn, wait, options = {}) =>",
							" function(...a)",
							"resolve =>",
							"() =>",
							"arg =>",
							" g =>",
							" g =>",
							" () =>",
							" err =>",
							" () =>",
							" err =>",
							" () =>",
							" err =>",
							"() =>",
							"Util.log = (...args) =>",
							"f =>",
							"f =>",
							"(a, p, i) =>",
							"get: () =>",
							".setFilters = function(args)",
							"arg =>",
							".getFilters = function()",
							"Util.msg = (strings, ...substitutions) =>",
							"(base, n) =>",
							"Util.generalLog = function(n, x)",
							"Util.toSource = function(arg, opts = {})",
							"print = (...args) =>",
							"Util.debug = function(message)",
							"removeCircular = function(key, value)",
							"arg =>",
							"Util.type = function({ type })",
							"Util.functionName = function(fn)",
							"Util.className = function(obj)",
							"obj",
							"Util.unwrapComponent = function(c)",
							"Util.componentName = function(c)",
							"Util.count = function(s, ch)",
							"Util.parseNum = function(str)",
							"Util.minmax = function(num, min, max)",
							"Util.getExponential = function(num)",
							"Util.getNumberParts = function(num)",
							"Util.pow2 = function(n)",
							"Util.pow10 = function(n)",
							"Util.bitValue = function(n)",
							"Util.bitMask = function(bits, start = 0)",
							"Util.bitGroups = function(num, bpp, minLen)",
							"Util.bitStuff = (arr, bpp) =>",
							"([b, f], n) =>",
							"Util.toBinary = function(num)",
							"Util.toBits = function(num)",
							" bit =>",
							"Util.getBit = function(v, n)",
							"Util.isSet = function(v, n)",
							"Util.bitCount = function(n)",
							"Util.bitNo = function(n)",
							"Util.toggleBit = function(num, bit)",
							"Util.setBit = function(num, bit)",
							"Util.clearBit = function(num, bit)",
							"Util.range = function(...args)",
							" (v, k) =>",
							"n =>",
							"Util.set = function(obj, prop, value)",
							" (prop, value) =>",
							" (prop, value) =>",
							" (prop, value) =>",
							" value =>",
							"(obj, prop) =>",
							"() =>",
							"Util.bitArrayToNumbers = function(arr)",
							"Util.bitsToNumbers = function(bits)",
							"(val, key, arr) =>",
							"Util.shuffle = function(arr, rnd = Util.rng)",
							"(a, b) =>",
							"Util.sortNum = function(arr)",
							"(a, b) =>",
							"Util.draw = (arr, n = 1, rnd = Util.rng) =>",
							"Util.is = function(what, ...pred)",
							"type =>",
							"fn =>",
							"Util.instanceOf = (value, ctor) =>",
							"Util.onoff = function(val)",
							"Util.numbersToBits = function(arr)",
							"(bits, num) =>",
							"Util.randomNumbers = function([start, end], draws)",
							"Util.randomBits = function(r = [1, 50], n = 5)",
							"Util.padFn = function(len, char = ' ', fn = (str, pad) => pad)",
							" (s, n = len) =>",
							"Util.pad = function(s, n, char = ' ')",
							"Util.abbreviate = function(str, max = 40, suffix = '...')",
							"Util.trim = function(str, charset)",
							"Util.trimRight = function(str, charset)",
							"Util.indent = (text, space = ' ') =>",
							"Util.define = (obj, ...args) =>",
							"Util.memoizedProperties = (obj, methods) =>",
							"get()",
							"Util.copyWhole = (dst, ...args) =>",
							"Util.copyEntries = (obj, entries) =>",
							"Util.extend = (...args) =>",
							"Util.isCloneable = obj =>",
							"Util.isUnextendable = val =>",
							"pred = (k, v, f) =>",
							"(key, depth) =>",
							"value = function(...args)",
							"Util.defineGetter = (obj, key, fn, enumerable = false) =>",
							"Util.defineGetterSetter = (obj, key, g, s, enumerable = false) =>",
							"Util.defineGettersSetters = (obj, gettersSetters) =>",
							"Util.extendArray = function(arr = Array.prototype)",
							" function(pred)",
							" function()",
							" function()",
							"(item, i, a) =>",
							" function()",
							" function(value)",
							"Util.adapter = function(obj, getLength = obj => obj.length, getKey = (obj, index) => obj.",
							"(index), getItem = (obj, key) => obj[key], setItem = (obj, index, value) => (obj[index] = value))",
							"get length()",
							"get instance()",
							"key(i)",
							"get(key)",
							"has(key)",
							"set(key, value)",
							"*keys()",
							"*entries()",
							"toObject()",
							"toMap()",
							".localStorage = function(s)",
							" () =>",
							" w =>",
							" () =>",
							" l =>",
							" (l, i) =>",
							" (l, key) =>",
							" (l, key, v) =>",
							"Util.array = function(a)",
							"Util.arrayFromEntries = entries =>",
							"([k, v]) =>",
							" key =>",
							"([k, v]) =>",
							"Util.toMap = function(hash = {}, fn)",
							"Util.extendMap = function(map)",
							".entries = function* iterator()",
							".toObject = function()",
							".match = function(...args)",
							" entries =>",
							"Util.objectFrom = function(any)",
							"Util.tail = function(arr)",
							"Util.splice = function(str, index, delcount, insert)",
							"Util.identity = arg =>",
							"Util.reverse = arr =>",
							"Util.keyOf = function(obj, prop)",
							"Util.rotateRight = function(arr, n)",
							"Util.repeater = function(n, what)",
							"function* ()",
							"function* ()",
							"Util.repeat = function(n, what)",
							"Util.arrayDim = function(dimensions, init)",
							"Util.flatten = function(arr)",
							"Util.chunkArray = (a, size) =>",
							"(acc, item, i) =>",
							"Util.partition = function* (a, size)",
							"Util.intersect = (a, b) =>",
							"Util.difference = (a, b, incicludes) =>",
							"x =>",
							"x =>",
							"x =>",
							"x =>",
							"Util.symmetricDifference = (a, b) =>",
							"Util.union = (a, b, equality) =>",
							"Util.chances = function(numbers, matches)",
							"Util.sum = function(arr)",
							"(acc, n) =>",
							"Util.expr = fn =>",
							" function expr(...args)",
							" function addArgs(args)",
							"ret = function returnFn(...args)",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"Util.mod = (a, b) =>",
							" n =>",
							"(a, b) =>",
							"Util.fnName = function(f, parent)",
							"Util.objName = function(o)",
							"Util.findKey = function(obj, pred, thisVal)",
							"value : v =>",
							"Util.find = function(arr, value, prop = 'id')",
							"pred = function(obj)",
							" obj =>",
							" obj =>",
							"pred = ([key, value], arr) =>",
							"Util.findIndex = function(obj, pred, thisArg)",
							"Util.match = function(arg, pred)",
							"match = (val, key) =>",
							"(acc, val, key) =>",
							"(acc, key) =>",
							"Util.toHash = function(map, keyTransform = k => ",
							"('' + k))",
							" (v, k) =>",
							"Util.indexOf = function(obj, prop)",
							"Util.greatestCommonDenominator = (a, b) =>",
							"Util.leastCommonMultiple = (n1, n2) =>",
							"function* (re, str)",
							"Util.inspect = function(obj, opts = {})",
							"stringFn = str =>",
							"print = (...args) =>",
							" (space = false) =>",
							" (space = false) =>",
							" key =>",
							" key =>",
							"Util.dump = function(name, props)",
							" () =>",
							" w =>",
							" () =>",
							"Util.ucfirst = function(str)",
							"Util.lcfirst = function(str)",
							"Util.typeOf = v =>",
							"Util.camelize = (text, sep = '') =>",
							" (match, p1, p2, offset) =>",
							"Util.decamelize = function(str, separator = '-')",
							"Util.ifThenElse = function(pred = value => !!value, _then = () => {}, _else = () => {})",
							" function(value)",
							"Util.if = (value, _then, _else, pred) =>",
							"v =>",
							"() =>",
							"() =>",
							"Util.ifElse = (value, _else, pred) =>",
							"v =>",
							" () =>",
							" () =>",
							" () =>",
							"Util.ifThen = (value, _then, pred) =>",
							"v =>",
							" () =>",
							" () =>",
							" () =>",
							"Util.switch = ({ default: defaultCase, ...cases }) =>",
							" function(value)",
							"function* (fn, arr)",
							"Util.colorDump = (iterable, textFn) =>",
							"(color, n) =>",
							"Util.bucketInserter = (map, ...extraArgs) =>",
							" function(...args)",
							" function(...args)",
							"Util.fifo = function fifo()",
							"resolve = () =>",
							"async function* generator()",
							"r =>",
							"push(...args)",
							"process: async function run()",
							"Util.isEmail = function(v)",
							"Util.isString = function(v)",
							"Util.isNumeric = v =>",
							"Util.isUndefined = arg =>",
							"Util.isObject = obj =>",
							"Util.isPrimitive = obj =>",
							"Util.isFunction = arg =>",
							"Util.not = fn =>",
							" function(...args)",
							"Util.isAsync = fn =>",
							"Util.isArrowFunction = fn =>",
							"Util.isEmptyString = v =>",
							"Util.isEmpty = (...args) =>",
							" function empty(v)",
							"Util.isNonEmpty = (...args) =>",
							"nonEmpty = v =>",
							"Util.isIpAddress = v =>",
							"i =>",
							"i =>",
							"Util.isPortNumber = v =>",
							"Util.hasProps = function(obj, props)",
							"prop =>",
							"Util.validatePassword = function(value)",
							"Util.clone = function(obj, proto)",
							"constructor",
							"Util.deepClone = function(data)",
							"Util.findVal = function(object, propName, maxDepth = 10)",
							"Util.deepCloneObservable = function(data)",
							"Util.toArray = function(observableArray)",
							"Util.arryToTree = function(data, id, pId, appId)",
							"(e, i) =>",
							"Util.to3wei = function(a, old, id, pId)",
							"(e, i) =>",
							"(se, si) =>",
							"Util.arrExchangePos = function(arr, i, j)",
							"Util.arrRemove = function(arr, i)",
							"Util.move = function(src, dst = [])",
							"Util.moveIf = function(src, pred, dst = [])",
							"Util.logOutClearStorage = function()",
							"Util.getCookie = function(cookie, name)",
							"Util.parseCookie = function(c = document.cookie)",
							"pred = char =>",
							"char =>",
							"char =>",
							"Util.encodeCookie = c =>",
							"([key, value]) =>",
							"Util.setCookies = c =>",
							"([key, value]) =>",
							"Util.clearCookies = function(c)",
							" (acc, name) =>",
							"Util.deleteCookie = function(name)",
							" () =>",
							" w =>",
							" () =>",
							"Util.accAdd = function(arg1, arg2)",
							"Util.Subtr = function(arg1, arg2)",
							"Util.accDiv = function(arg1, arg2)",
							"Util.accMul = function(arg1, arg2)",
							"Util.dateFormatter = function(date, formate)",
							"Util.numberFormatter = function(numStr)",
							"Util.searchObject = function(object, matchCallback, currentPath, result, searched)",
							"(req = {}) =>",
							" () =>",
							" () =>",
							" () =>",
							" url =>",
							" () =>",
							"() =>",
							"() =>",
							"() =>",
							"() =>",
							"() =>",
							"() =>",
							"Util.parseQuery = function(url = ",
							")",
							"Util.encodeQuery = function(data)",
							"Util.parseURL = function(href = this.",
							")",
							"part =>",
							"([k, v]) =>",
							"(acc, m) =>",
							"href(override)",
							"Util.makeURL = function(...args)",
							"Util.numberFromURL = function(url, fn)",
							"Util.tryPromise = fn =>",
							"(resolve, reject) =>",
							"resolve = a =>",
							"reject = () =>",
							"resolve = () =>",
							"reject = () =>",
							"async function(...args)",
							" function(...args)",
							"resolve = a =>",
							"reject = () =>",
							"Util.putError = err =>",
							"() =>",
							" fn =>",
							" ret =>",
							"Util.tryPredicate = (fn, defaultRet) =>",
							" ret =>",
							" () =>",
							"Util.isBrowser = function()",
							" () =>",
							" w =>",
							" () =>",
							" () =>",
							" d =>",
							" () =>",
							"Util.waitFor = async function waitFor(msecs)",
							"({ setTimeout, clearTimeout, setInterval, clearInterval }) =>",
							"async (resolve, reject) =>",
							"() =>",
							"clear = () =>",
							"Util.timeout = async (msecs, promises, promiseClass = Promise) =>",
							"Util.isServer = function()",
							"Util.isMobile = function()",
							"Util.uniquePred = (cmp = null) =>",
							" (el, i, arr) =>",
							"item =>",
							" (el, i, arr) =>",
							"Util.unique = (arr, cmp) =>",
							"cmp = (a, b) =>",
							"(e, i, a) =>",
							"Util.zip = a =>",
							"(a, b) =>",
							"(_, i) =>",
							"arr =>",
							"Util.histogram = (...args) =>",
							" (k, v) =>",
							"initVal = () =>",
							"setVal = v =>",
							"(it, i) =>",
							"(item, i) =>",
							" (entry, idx, key) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"Util.concat = function* (...args)",
							"Util.distinct = function(arr)",
							" (value, index, me) =>",
							"Util.rangeMinMax = function(arr, field)",
							"obj =>",
							"Util.remap = (...args) =>",
							"getR = () =>",
							"r = val =>",
							"Util.mergeLists = function(arr1, arr2, key = 'id')",
							"Util.foreach = function(o, fn)",
							"Util.all = function(obj, pred)",
							"Util.isGenerator = function(fn)",
							"Util.isIterator = obj =>",
							"Util.isIterable = obj =>",
							"x =>",
							"Util.isConstructor = x =>",
							"construct(target, args)",
							"target",
							"x",
							"m =>",
							"Util.filter = function(a, pred)",
							"function* ()",
							"fn = (k, v) =>",
							"Util.reduce = (obj, fn, accu) =>",
							"Util.mapFunctional = fn =>",
							" function* (arg)",
							"Util.map = (...args) =>",
							"ret = a =>",
							"function* ()",
							"ret = a =>",
							"function* ()",
							"Util.entriesToObj = function(arr)",
							"(acc, item) =>",
							"Util.isDate = function(d)",
							"Util.parseDate = function(d)",
							"Util.isoDate = function(date)",
							"Util.toUnixTime = function(dateObj, utc = false)",
							"Util.unixTime = function(utc = false)",
							"Util.fromUnixTime = function(epoch, utc = false)",
							"Util.formatTime = function(date = ",
							"(), format = 'HH:MM:SS')",
							"Util.leapYear = function(year)",
							"Util.timeSpan = function(s)",
							"Util.randFloat = function(min, max, rnd = Util.rng)",
							"Util.randInt = (...args) =>",
							"Util.randStr = (len, charset, rnd = Util.rng) =>",
							"Util.hex = function(num, numDigits)",
							"Util.numberParts = (num, base) =>",
							"Util.roundDigits = precision =>",
							"Util.roundFunction = (prec, digits, type) =>",
							" function(value)",
							"Util.roundTo = function(value, prec, digits, type)",
							"() =>",
							" utf8 =>",
							" v =>",
							" utf8 =>",
							" base64 =>",
							" v =>",
							" string =>",
							"Util.formatRecord = function(obj)",
							"item =>",
							" function(obj)",
							"Util.isArrayLike = obj =>",
							"Util.equals = function(a, b)",
							"(e, i) =>",
							"Util.versionCompare = (a, b) =>",
							"isdigit = c =>",
							"Util.isGetter = (obj, propName) =>",
							"Util.isBool = value =>",
							"Util.size = (...args) =>",
							" function size(obj)",
							"Util.isMap = function(obj)",
							"Util.effectiveDeviceWidth = function()",
							"Util.getFormFields = function(initialState)",
							"(acc, { elements }) =>",
							"(acc2, { name, value }) =>",
							"Util.mergeObjects = function(objArr, predicate = (dst, src, key) => (src[key] == '' ? undefined : src[key]))",
							"Util.getUserAgent = function(headers = req.headers)",
							"Util.factor = function(start, end)",
							"Util.factorial = function(n)",
							"Util.increment = function(obj, key)",
							"Util.counter = function()",
							"self = function()",
							"Util.filterKeys = function(obj, pred = k => true)",
							"pred = str =>",
							"pred = str =>",
							"Util.filterMembers = function(obj, fn)",
							"pred = (k, v, o) =>",
							"Util.filterOutMembers = function(obj, fn)",
							"pred = (v, k, o) =>",
							"Util.dumpMembers = obj =>",
							"Util.filterOutKeys = function(obj, arr)",
							" (v, k, o) =>",
							" (k, v) =>",
							" key =>",
							" () =>",
							" (v, k, o) =>",
							"Util.removeKeys = function(obj, arr)",
							" (v, k, o) =>",
							" (k, v) =>",
							" key =>",
							"Util.getKeys = function(obj, arr)",
							"Util.numbersConvert = function(str)",
							"(ch, i) =>",
							"Util.entries = function(arg)",
							"function* ()",
							"Util.keys = function(arg)",
							" function* ()",
							"Util.values = function(arg)",
							" function* ()",
							"Util.removeEqual = function(a, b)",
							"Util.clear = obj =>",
							"Util.remove = (arr, item) =>",
							" (other, i, arr) =>",
							"Util.removeIf = function(arr, pred)",
							"Util.traverse = function(o, fn)",
							" (v, k, a) =>",
							" function* walker(o, depth = 0)",
							"Util.traverseWithPath = function(o, rootPath = [])",
							" function* walker(o, path)",
							"Util.indexByPath = function(o, p)",
							"Util.pushUnique = (arr, ...args) =>",
							"(acc, item) =>",
							"Util.insertSorted = function(arr, item, cmp = (a, b) => b - a)",
							"next = (k, v) =>",
							" (k, v) =>",
							" (k, v) =>",
							" (k, v) =>",
							"fn = function(key, value)",
							"Util.keyIterator = obj =>",
							"Util.entryIterator = obj =>",
							"function* ()",
							"Util.mapAdapter = getSetFunction =>",
							"get(key)",
							"set(key, value)",
							".keys = () =>",
							".entries = () =>",
							"Util.mapFunction = map =>",
							"fn = function(...args)",
							"m =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".update = function(key, fn = (k, v) => v)",
							".entries = function* ()",
							".values = function* ()",
							".keys = function* ()",
							" function()",
							"([key, value]) =>",
							".keys = async () =>",
							".entries = async () =>",
							".values = async () =>",
							".keys = function* ()",
							".entries = function* ()",
							".values = function* ()",
							".filter = function(pred)",
							"function* ()",
							".map = function(t)",
							"function* ()",
							".forEach = function(fn)",
							".delete = key =>",
							".has = key =>",
							"Util.mapWrapper = (map, toKey = key => key, fromKey = key => key) =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".keys = () =>",
							".entries = function* ()",
							".values = function* ()",
							".has = key =>",
							".delete = key =>",
							"m =>",
							"Util.mapCombinator = (forward, backward) =>",
							"fn = function(key, value)",
							"(a,m) =>",
							" key =>",
							" a =>",
							" function makeGetter(map, next = a => a)",
							" key =>",
							"Util.predicate = (fn_or_regex, pred) =>",
							"fn = arg =>",
							".valueOf = function()",
							" arg =>",
							"Util.some = predicates =>",
							" value =>",
							"pred =>",
							"Util.every = predicates =>",
							" value =>",
							"pred =>",
							"Util.iterateMembers = function* (obj, predicate = (name, depth, obj, proto) => true, depth = 0)",
							" (...predicates) =>",
							" (...args) =>",
							"pred =>",
							" (...predicates) =>",
							" (...args) =>",
							"pred =>",
							"(pred, obj) =>",
							"Util.memberNameFilter = (depth = 1, start = 0) =>",
							" (m, l, o) =>",
							" (m, l, o) =>",
							" (name, depth, obj, proto) =>",
							"Util.getMemberNames = (obj, ...args) =>",
							"Util.getMemberEntries = (obj, ...args) =>",
							"name =>",
							"accFn = (a, m, o) =>",
							" (obj, ...args) =>",
							" (a, m) =>",
							" (r, a, m) =>",
							" (r, a) =>",
							"incFn = (c, n, self) =>",
							"incFn = (c, n, self) =>",
							"inc = (i, n = 1) =>",
							"self = function Count(n = 1)",
							".valueOf = function()",
							"filterFn = (key, value) =>",
							"(acc, mem, idx) =>",
							" r =>",
							" () =>",
							"fn = function ReduceIntoMap(arg, acc = mapObj)",
							"(acc, arg) =>",
							" (a, m, o) =>",
							"Util.methodNameFilter = (depth = 1, start = 0) =>",
							" (m, l, o) =>",
							" () =>",
							" b =>",
							" () =>",
							"Util.getMethodNames = (obj, depth = 1, start = 0) =>",
							" (a, m, o) =>",
							"Util.inherit = (dst, src, depth = 1) =>",
							" function inherits(ctor, superCtor)",
							"ctor",
							"superCtor",
							" function inherits(ctor, superCtor)",
							"TempCtor = function()",
							"TempCtor",
							"superCtor",
							"ctor",
							"ctor",
							"Util.bindMethods = (obj, methods, dest) =>",
							"Util.getConstructor = obj =>",
							"Util.getPrototypeChain = function(obj, fn = p => p)",
							"Util.getObjectChain = (obj, fn = p => p) =>",
							"Util.getPropertyDescriptors = function(obj)",
							" p =>",
							"fn = (c, p) =>",
							" (p, o) =>",
							"Util.weakAssign = function(...args)",
							"other =>",
							"Util.exception = function Exception(...args)",
							"toString(color = false)",
							"Util.location = function Location(...args)",
							"toString(color = false)",
							" t =>",
							"getFileName()",
							"getLineNumber()",
							"getColumnNumber()",
							"Util.stackFrame = function StackFrame(frame)",
							"prop =>",
							"propertyMap()",
							"method =>",
							"([method, func]) =>",
							"getFunction()",
							"getMethodName()",
							"getFunctionName()",
							"getTypeName()",
							"getFileName()",
							"getLineNumber()",
							"getColumnNumber()",
							"get()",
							"toString(color, opts = {})",
							" (t, color) =>",
							" t =>",
							"p =>",
							"p =>",
							"(f, i) =>",
							"getLocation()",
							"get location()",
							"Util.scriptName = () =>",
							" () =>",
							" args =>",
							" () =>",
							"Util.getFunctionName = () =>",
							"Util.getFunctionArguments = fn =>",
							"Util.scriptDir = () =>",
							" () =>",
							" script =>",
							" () =>",
							"Util.stack = function Stack(stack, offset)",
							"frame =>",
							"([m, p]) =>",
							" (acc, [method, property]) =>",
							" function getStack()",
							".prepareStackTrace = (_, stack) =>",
							" function stackToString(st, start = 0)",
							"function* ()",
							"frame =>",
							"part =>",
							"frame =>",
							"([func, file]) =>",
							"n =>",
							"([func, file]) =>",
							"([func, [columnNumber, lineNumber, ...file]]) =>",
							"({ methodName, functionName: func, fileName: file, columnNumber: column, lineNumber: line }) =>",
							" s =>",
							" s =>",
							" () =>",
							" s =>",
							" s =>",
							" () =>",
							"frame =>",
							"frame =>",
							"get: () =>",
							"get: () =>",
							"*value()",
							"toString(opts = {})",
							"f =>",
							"getFunctionName()",
							"getMethodName()",
							"getFileName()",
							"getLineNumber()",
							"get()",
							"(a, f) =>",
							"(fn, i) =>",
							"Util.getCallerStack = function(position = 2, limit = 1000, stack)",
							".prepareStackTrace = (_, stack) =>",
							"Util.getCallerFile = function(position = 2)",
							"Util.getCallerFunction = function(position = 2)",
							"Util.getCallerFunctionName = function(position = 2)",
							"Util.getCallerFunctionNames = function(position = 2)",
							"Util.getCaller = function(index = 1, stack)",
							"f =>",
							"Util.getCallers = function(index = 1, num = Number.MAX_SAFE_INTEGER, stack)",
							"f =>",
							"Util.getStackFrames = function(offset = 2)",
							"frame =>",
							"Util.getStackFrame = function(offset = 2)",
							"Util.rotateLeft = function(x, n)",
							"Util.rotateRight = function(x, n)",
							"Util.hashString = function(string, bits = 32, mask = 0xffffffff)",
							"Util.flatTree = function(tree, addOutput)",
							"addOutput = arg =>",
							" key =>",
							"Util.traverseTree = function(tree, fn, depth = 0, parent = null)",
							"Util.walkTree = function(node, pred, t, depth = 0, parent = null)",
							"function* ()",
							"pred = i =>",
							"t = function(i)",
							"Util.isPromise = function(obj)",
							"setImmediate = fn =>",
							"Util.next = function(iter, observer, prev = undefined)",
							"val =>",
							"() =>",
							"err =>",
							"() =>",
							"Util.getImageAverageColor = function(imageElement, options)",
							"toStringRgb()",
							"toStringRgba()",
							"toStringHex()",
							"toHex = function(d)",
							"Util.jsonToObject = function(jsonStr)",
							"Util.splitLines = function(str, max_linelen = Number.MAX_SAFE_INTEGER)",
							"Util.splitAt = function* (str, ...indexes)",
							"(a, b) =>",
							"Util.decodeEscapes = function(text)",
							"m =>",
							"([s, t]) =>",
							"Util.stripXML = text =>",
							"Util.stripHTML = html =>",
							"p =>",
							"p =>",
							"Util.stripNonPrintable = text =>",
							"Util.decodeHTMLEntities = function(text)",
							" (match, entity) =>",
							"Util.encodeHTMLEntities = (str, charset = '\\u00A0-\\u9999<>&') =>",
							" i =>",
							"Util.stripAnsi = function(str)",
							"Util.proxy = (obj = {}, handler) =>",
							"get(target, key, receiver)",
							"set(target, key, value, receiver)",
							"Util.propertyLookup = (obj = {}, handler = key => null) =>",
							"get(target, key, receiver)",
							"Util.traceProxy = (obj, handler) =>",
							" function(name, args)",
							"get(target, key, receiver)",
							"member = function()",
							"Util.proxyTree = function proxyTree(...callbacks)",
							"applyCallback = () =>",
							"get(target, key)",
							"set(target, key, value)",
							"apply(target, thisArg, args)",
							" function node(path)",
							"() =>",
							"Util.construct = constructor =>",
							" function F(args)",
							"F",
							"constructor",
							"Util.constructApply = (constructor, array) =>",
							"Util.immutable = args =>",
							"set: () =>",
							"deleteProperty: () =>",
							"defineProperty: () =>",
							"Util.immutableClass = (orig, ...proto) =>",
							"p =>",
							" ctor =>",
							"ctor",
							"imm = base =>",
							"constructor(...args)",
							"Util.partial = function partial(fn /*, arg1, arg2 etc */)",
							" function()",
							"(min, max, value) =>",
							"Util.coloring = (useColor = true) =>",
							"code(...args)",
							"text(text)",
							"concat(...args)",
							"code(...args)",
							"text(text, ...color)",
							"concat(...args)",
							"code(...args)",
							"text(text, ...color)",
							"concat(...args)",
							"Util.colorText = (...args) =>",
							"Util.decodeAnsi = (str, index) =>",
							"isDigit = c =>",
							"notDigit = c =>",
							"findIndex = (pred, start) =>",
							"Util.stripAnsi = str =>",
							"Util.ansiCode = (...args) =>",
							"Util.wordWrap = (str, width, delimiter) =>",
							"Util.multiParagraphWordWrap = (str, width, delimiter) =>",
							"Util.defineInspect = (proto, ...props) =>",
							" function()",
							"(acc, key) =>",
							"(a, b, value) =>",
							"Util.bindProperties = (proxy, target, props, gen) =>",
							"name =>",
							"(acc, name) =>",
							"gen = p => v =>",
							"k =>",
							" (a, [k, v]) =>",
							" (...args) =>",
							"(...args) =>",
							" (a, k) =>",
							"get: () =>",
							"get: () =>",
							"function ()",
							" obj =>",
							"on: val =>",
							"off: val =>",
							"true: val =>",
							"false: val =>",
							"AssertionFailed",
							"constructor(message, stack)",
							"Util.assert = function assert(val, message)",
							"Util.assertEqual = function assertEqual(val1, val2, message)",
							"Util.assignGlobal = () =>",
							"Util.weakMapper = function(createFn, map = ",
							"(), hitFn)",
							"self = function(obj, ...args)",
							".set = (k, v) =>",
							".get = k =>",
							"Util.merge = function(...args)",
							" a =>",
							" a =>",
							"(acc, arg) =>",
							"Util.transformer = (a, ...l) =>",
							" (c, f) =>",
							" function(...v)",
							"Util.copyTextToClipboard = (i, t) =>",
							"async module =>",
							"(a, b, c) =>",
							"() =>",
							"Util.toPlainObject = obj =>",
							" v =>",
							"Util.toBuiltinObject = obj =>",
							" v =>",
							"t = (v, n) =>",
							"(acc, k) =>",
							"Util.timer = msecs =>",
							"remaining = () =>",
							"finish = callback =>",
							"log = (method, ...args) =>",
							"obj =>",
							" v =>",
							"timeout = (msecs, tmr = timer) =>",
							"() =>",
							" (...args) =>",
							" () =>",
							"add = (arr, ...items) =>",
							"get delay()",
							"get created()",
							"get start()",
							"get stop()",
							"get elapsed()",
							"get end()",
							"get remain()",
							"cancel()",
							"pause()",
							".resume = function()",
							".restart = function()",
							"callback(...args)",
							"subscribe(f)",
							"unsubscribe(f)",
							"start = () =>",
							"(resolve, reject) =>",
							"Util.thenableReject = error =>",
							"then: (resolve, reject) =>",
							"Util.wrapGenerator = fn =>",
							" function(...args)",
							"Util.wrapGeneratorMethods = obj =>",
							"Util.decorateIterable = (proto, generators = false) =>",
							"forEach(fn, thisArg)",
							"*map(fn, thisArg)",
							"*filter(pred, thisArg)",
							"findIndex(pred, thisArg)",
							"indexOf(item, startIndex = -1)",
							"(e, i) =>",
							"find(pred, thisArg)",
							"every(pred, thisArg)",
							"some(pred, thisArg)",
							"reduce(fn, accu)",
							"*entries()",
							"*keys()",
							"*values()",
							"Util.swap = (a, b) =>",
							"Util.swapArray = ([a, b]) =>",
							"Util.cacheAdapter = (st, defaultOpts = {}) =>",
							" () =>",
							"async c =>",
							" () =>",
							"async getItem(request, opts = {})",
							"async setItem(request, response)",
							"async addItem(request)",
							"async removeItem(request, opts = {})",
							"async key(index)",
							"async keys(urls = false, t = a => a)",
							"response =>",
							"r =>",
							"async clear()",
							"Util.cachedFetch = (allOpts = {}) =>",
							"() =>",
							"self = async function CachedFetch(request, opts = {})",
							"(returnValue, fn, ...args) =>",
							"Util.proxyObject = (root, handler) =>",
							"ptr = path =>",
							"(a, i) =>",
							" (value, path) =>",
							"get(target, key)",
							" function node(path)",
							"Util.parseXML = function(xmlStr)",
							" () =>",
							" parser =>",
							"fn = (value, ...args) =>",
							" () =>",
							" map =>",
							"(obj, ...args) =>",
							" () =>",
							" (obj, ...args) =>",
							"self = (obj, ...args) =>",
							"() =>",
							" () =>",
							" a =>",
							" () =>",
							" () =>",
							" fn =>",
							" () =>",
							" () =>",
							" a =>",
							"() =>",
							" () =>",
							" a =>",
							" () =>",
							"() =>",
							"Util.getOpt = (options = {}, args) =>",
							"findOpt = arg =>",
							"([optname, option]) =>",
							"opt =>",
							" () =>",
							" v =>",
							" () =>",
							" () =>",
							" v =>",
							"Util.getEnv = async varName =>",
							" () =>",
							"async e =>",
							" () =>",
							"Util.getEnvVars = async () =>",
							" () =>",
							"async e =>",
							" () =>",
							"Util.safeFunction = (fn, trapExceptions, thisObj) =>",
							"async function(...args)",
							" function(...args)",
							" a =>",
							" error =>",
							"Util.safeCall = (fn, ...args) =>",
							"Util.safeApply = (fn, args = []) =>",
							"Util.exit = exitCode =>",
							"stdExit = std =>",
							" () =>",
							" ([obj, exit]) =>",
							" () =>",
							"Util.atexit = handler =>",
							"Util.callMain = async (fn, trapExceptions) =>",
							"async (...args) =>",
							"async ret =>",
							"() =>",
							" err =>",
							" () =>",
							" argv1 =>",
							"Util.printReturnValue = (fn, opts = {}) =>",
							"print = (returnValue, fn, ...args) =>",
							"self = (...args) =>",
							"Util.replaceAll = (needles, haystack) =>",
							"([re, str]) =>",
							"(acc, [match, replacement]) =>",
							"Util.quote = (str, q = '\"') =>",
							"Util.escape = (str, pred = codePoint => codePoint < 32 || codePoint > 0xff) =>",
							"Util.escapeRegex = string =>",
							"Util.consolePrinter = function ConsolePrinter(log = console.log)",
							"self = function(...args)",
							".log = (...args) =>",
							"Util.consoleJoin = function(...args)",
							"Util.consoleConcat = function(...args)",
							"self = function ConsoleConcat(...args)",
							"clear()",
							"log = (...args) =>",
							"print()",
							"i =>",
							"output()",
							"add(...args)",
							"Util.booleanAdapter = (getSetFn, trueValue = 1, falseValue = 0) =>",
							" function(value)",
							"set = () =>",
							" function(...args)",
							"Util.deriveGetSet = (fn, get = v => v, set = v => v, thisObj) =>",
							" () =>",
							" v =>",
							"handler = () =>",
							"ExFunc",
							"constructor()",
							"__call__(...args)",
							"Util.isatty = async fd =>",
							"mod =>",
							"Util.ttyGetWinSize = (fd = 1) =>",
							"m =>",
							" (resolve, reject) =>",
							" (resolve, reject) =>",
							" (fd = 0, mode = true) =>",
							"Util.stdio = (fd, mode = true) =>",
							"Util.signal = (num, act) =>",
							"m =>",
							"() =>",
							"Util.timeit = (fn, args = [], options = {}) =>",
							"(p, c) =>",
							"Util.lazyProperty = (obj, name, getter, opts = {}) =>",
							"replaceProperty = value =>",
							"async function()",
							" function()",
							"v =>",
							"Util.lazyProperties = (obj, gettersObj, opts = {}) =>",
							"f = (a, b) =>",
							" function(a, b)",
							"(a, b) =>",
							"(a, b) =>",
							"() =>",
							"HighResolutionTime",
							"constructor(secs = 0, nano = 0)",
							"static create(s, n)",
							"get seconds()",
							"get milliseconds()",
							"get nanoseconds()",
							"diff(o)",
							"sum(o)",
							"since(o)",
							"toString()",
							"inspect()",
							"async function hrtime(previousTimestamp)",
							" function hrtime(previousTimestamp)",
							" () =>",
							" (minDelay = 0) =>",
							"resolve =>",
							"resolve =>",
							" function animationFrame(t)",
							"Util.getNow = () =>",
							"performanceNow = () =>",
							"performanceNow = async function(clock = CLOCK_MONOTONIC_RAW)",
							"Util.formatColumns = a =>",
							"(acc, row, i) =>",
							"(col, j) =>",
							"row =>",
							"(col, j) =>",
							"Util.getPlatform = () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							"async () =>",
							"Util.colIndexes = line =>",
							"([prev, cols], char, i) =>",
							"Util.colSplit = (line, indexes) =>",
							"map = (name, flag) =>",
							" function* (value)",
							"log = (duration, name, args, ret) =>",
							"async (args, ret) =>",
							" (args, ret) =>",
							"async function(...args)",
							" function(...args)",
							"both = () =>",
							"(name, args) =>",
							"arg =>",
							"(name, ret) =>",
							" function(...args)",
							"Util.bind = function(f, ...args)",
							"ret = function()",
							"ret = function()",
							"ret",
							"f",
							"Util.bytesToUTF8 = function* (bytes)",
							"Util.codePointsToString = codePoints =>",
							"Util.bufferToString = b =>",
							"Util.levenshteinDistance = function levenshteinDistance(a, b)",
							"Util.padTrunc = (...args) =>",
							" (s, pad = ' ') =>",
							"Util.setReadHandler = (fd, handler) =>",
							"os =>"
						]
					},
					"AQAAAAAAAAAAAAAAOWgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				]
			]
		},
		{
			"file": "test-opencv.js",
			"settings":
			{
				"buffer_size": 20673,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					18,
					1,
					"cut",
					null,
					"AQAAAD8DAAAAAAAAPwMAAAAAAAAbAAAAICBjb25zdCB7IFdpbmRvdyB9ID0gZ2xmdzsK",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPwMAAAAAAABaAwAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"paste",
					null,
					"AQAAAPICAAAAAAAADQMAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA8gIAAAAAAADyAgAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "m"
					},
					"AQAAAAIDAAAAAAAAAwMAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAgMAAAAAAAACAwAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": " Sui"
					},
					"BAAAAAMDAAAAAAAABAMAAAAAAAAAAAAABAMAAAAAAAAFAwAAAAAAAAAAAAAFAwAAAAAAAAYDAAAAAAAAAAAAAAYDAAAAAAAABwMAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAwMAAAAAAAADAwAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"paste",
					null,
					"AgAAAPsCAAAAAAAAPAMAAAAAAAAAAAAAPAMAAAAAAAA8AwAAAAAAAA0AAAAgV2luZG93bSBTdWkg",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+wIAAAAAAAAIAwAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"revert",
					null,
					"",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPAMAAAAAAAA8AwAAAAAAAAAAAAAAAPC/"
				],
				[
					67,
					1,
					"cut",
					null,
					"AQAAAF8DAAAAAAAAXwMAAAAAAAAQAAAALCBzaXplLCBwb3NpdGlvbg",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXwMAAAAAAABvAwAAAAAAAAAAAAAAAPC/"
				],
				[
					74,
					1,
					"insert",
					{
						"characters": "const"
					},
					"BQAAADsFAAAAAAAAPAUAAAAAAAAAAAAAPAUAAAAAAAA9BQAAAAAAAAAAAAA9BQAAAAAAAD4FAAAAAAAAAAAAAD4FAAAAAAAAPwUAAAAAAAAAAAAAPwUAAAAAAABABQAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOwUAAAAAAAA7BQAAAAAAAAAAAAAAAPC/"
				],
				[
					75,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEAFAAAAAAAAQQUAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQAUAAAAAAABABQAAAAAAAAAAAAAAAPC/"
				],
				[
					76,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAEEFAAAAAAAAQwUAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQQUAAAAAAABBBQAAAAAAAAAAAAAAAPC/"
				],
				[
					77,
					1,
					"insert",
					{
						"characters": " size,"
					},
					"BgAAAEIFAAAAAAAAQwUAAAAAAAAAAAAAQwUAAAAAAABEBQAAAAAAAAAAAABEBQAAAAAAAEUFAAAAAAAAAAAAAEUFAAAAAAAARgUAAAAAAAAAAAAARgUAAAAAAABHBQAAAAAAAAAAAABHBQAAAAAAAEgFAAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQgUAAAAAAABCBQAAAAAAAAAAAAAAAPC/"
				],
				[
					78,
					1,
					"insert",
					{
						"characters": " positoin"
					},
					"CQAAAEgFAAAAAAAASQUAAAAAAAAAAAAASQUAAAAAAABKBQAAAAAAAAAAAABKBQAAAAAAAEsFAAAAAAAAAAAAAEsFAAAAAAAATAUAAAAAAAAAAAAATAUAAAAAAABNBQAAAAAAAAAAAABNBQAAAAAAAE4FAAAAAAAAAAAAAE4FAAAAAAAATwUAAAAAAAAAAAAATwUAAAAAAABQBQAAAAAAAAAAAABQBQAAAAAAAFEFAAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASAUAAAAAAABIBQAAAAAAAAAAAAAAAPC/"
				],
				[
					79,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFEFAAAAAAAAUgUAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUQUAAAAAAABRBQAAAAAAAAAAAAAAAPC/"
				],
				[
					81,
					5,
					"left_delete",
					null,
					"BQAAAFIFAAAAAAAAUgUAAAAAAAABAAAAfVEFAAAAAAAAUQUAAAAAAAABAAAAIFAFAAAAAAAAUAUAAAAAAAABAAAAbk8FAAAAAAAATwUAAAAAAAABAAAAaU4FAAAAAAAATgUAAAAAAAABAAAAbw",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUwUAAAAAAABTBQAAAAAAAAAAAAAAAPC/"
				],
				[
					82,
					1,
					"insert",
					{
						"characters": "ion}"
					},
					"BAAAAE4FAAAAAAAATwUAAAAAAAAAAAAATwUAAAAAAABQBQAAAAAAAAAAAABQBQAAAAAAAFEFAAAAAAAAAAAAAFEFAAAAAAAAUgUAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATgUAAAAAAABOBQAAAAAAAAAAAAAAAPC/"
				],
				[
					83,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAFIFAAAAAAAAUwUAAAAAAAAAAAAAUwUAAAAAAABUBQAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUgUAAAAAAABSBQAAAAAAAAAAAAAAAPC/"
				],
				[
					84,
					1,
					"insert",
					{
						"characters": " window;"
					},
					"CAAAAFQFAAAAAAAAVQUAAAAAAAAAAAAAVQUAAAAAAABWBQAAAAAAAAAAAABWBQAAAAAAAFcFAAAAAAAAAAAAAFcFAAAAAAAAWAUAAAAAAAAAAAAAWAUAAAAAAABZBQAAAAAAAAAAAABZBQAAAAAAAFoFAAAAAAAAAAAAAFoFAAAAAAAAWwUAAAAAAAAAAAAAWwUAAAAAAABcBQAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVAUAAAAAAABUBQAAAAAAAAAAAAAAAPC/"
				],
				[
					85,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAFwFAAAAAAAAXQUAAAAAAAAAAAAAXQUAAAAAAABeBQAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXAUAAAAAAABcBQAAAAAAAAAAAAAAAPC/"
				],
				[
					90,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAKUFAAAAAAAApwUAAAAAAAAAAAAAXgUAAAAAAABgBQAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXgUAAAAAAAClBQAAAAAAAP///////+9/"
				],
				[
					98,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAPUFAAAAAAAA9wUAAAAAAAAAAAAAqwUAAAAAAACtBQAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAqwUAAAAAAAD1BQAAAAAAAP///////+9/"
				],
				[
					107,
					1,
					"paste",
					null,
					"AgAAAPwCAAAAAAAAQwMAAAAAAAAAAAAAQwMAAAAAAABDAwAAAAAAAEAAAABHYW1tYVJhbXAsIE1vbml0b3IsIFBvc2l0aW9uLCBTY2FsZSwgVmlkZW9Nb2RlLCBXaW5kb3csIFdvcmtBcmVh",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/AIAAAAAAAA8AwAAAAAAAAAAAAAAAPC/"
				],
				[
					148,
					1,
					"revert",
					null,
					"",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4gUAAAAAAAABBgAAAAAAAAAAAAAAAPC/"
				],
				[
					162,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAGUFAAAAAAAAZgUAAAAAAAAAAAAAZgUAAAAAAABmBQAAAAAAAJ4AAAAgIC8qIHNpemUgPSBuZXcgU2l6ZSh3aW5kb3cuc2l6ZSk7CiAgcG9zaXRpb24gPSBuZXcgUG9pbnQod2luZG93LnBvc2l0aW9uKTsqLwogIC8qIGNvbnN0IHJlY3QgPSBuZXcgUmVjdCguLi5wb3NpdGlvbiwgLi4uc2l6ZSk7CiAgY29uc29sZS5sb2coYEdMRldgLCByZWN0KTsqLw",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZQUAAAAAAAADBgAAAAAAAAAAAAAAAPC/"
				],
				[
					177,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAOoSAAAAAAAA7BIAAAAAAAAAAAAAqxIAAAAAAACtEgAAAAAAAAAAAAA",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAqxIAAAAAAADqEgAAAAAAAAAAAAAAAPC/"
				],
				[
					191,
					1,
					"revert",
					null,
					"",
					"DQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA8gIAAAAAAABNAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1,
					1,
					"revert",
					null,
					"BQAAAAAAAAAAAAAAAAAAAAAAAADiTwAAaW1wb3J0IHsgUG9pbnQsIFNpemUsIFJlY3QsIE1hdCwgVU1hdCwgTGluZSwgQ0xBSEUsIFRpY2tNZXRlciwgRHJhdywgQ29udG91ciB9IGZyb20gJ29wZW5jdic7CmltcG9ydCAqIGFzIGN2IGZyb20gJ29wZW5jdic7CmltcG9ydCBmcyBmcm9tICdmcyc7CmltcG9ydCBDb25zb2xlIGZyb20gJ2NvbnNvbGUnOwppbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnOwppbXBvcnQgeyBSR0JBLCBIU0xBIH0gZnJvbSAnLi9saWIvY29sb3IuanMnOwppbXBvcnQgVXRpbCBmcm9tICcuL2xpYi91dGlsLmpzJzsKaW1wb3J0IHsgTnVtZXJpY1BhcmFtLCBFbnVtUGFyYW0sIFBhcmFtTmF2aWdhdG9yIH0gZnJvbSAnLi9wYXJhbS5qcyc7CmltcG9ydCB7IG1lbW9pemUsIHJhbmdlIH0gZnJvbSAnLi9saWIvbWlzYy5qcyc7CmltcG9ydCB7IFBpcGVsaW5lLCBQcm9jZXNzb3IgfSBmcm9tICcuL3Fqcy1vcGVuY3YvanMvY3ZQaXBlbGluZS5qcyc7CmltcG9ydCB7IFdpbmRvdywgTW91c2VGbGFncywgTW91c2VFdmVudHMsIE1vdXNlLCBUZXh0U3R5bGUsIERyYXdUZXh0IH0gZnJvbSAnLi9xanMtb3BlbmN2L2pzL2N2SGlnaEdVSS5qcyc7CmltcG9ydCAqIGFzIG52ZyBmcm9tICduYW5vdmcnOwppbXBvcnQgKiBhcyBnbGZ3IGZyb20gJ2dsZncnOwoKbGV0IGJhc2VuYW1lID0gVXRpbC5nZXRBcmd2KClbMV0ucmVwbGFjZSgvXC5qcyQvLCAnJyk7CmNvbnN0IFJBRDJERUcgPSAxODAgLyBNYXRoLlBJOwoKZnVuY3Rpb24gR0xGVyguLi5hcmdzKSB7CiAgY29uc3QgeyBHYW1tYVJhbXAsIE1vbml0b3IsIFBvc2l0aW9uLCBTY2FsZSwgU2l6ZSwgVmlkZW9Nb2RlLCBXaW5kb3csIFdvcmtBcmVhIH0gPSBnbGZ3OwogIGxldCByZXNvbHV0aW9uLCB3aW5kb3c7CgogIHJlc29sdXRpb24gPSBuZXcgU2l6ZSguLi5hcmdzKTsKICBjb25zdCBoaW50cyA9IFsKICAgIFtnbGZ3LkNPTlRFWFRfVkVSU0lPTl9NQUpPUiwgM10sCiAgICBbZ2xmdy5DT05URVhUX1ZFUlNJT05fTUlOT1IsIDJdLAogICAgW2dsZncuT1BFTkdMX1BST0ZJTEUsIGdsZncuT1BFTkdMX0NPUkVfUFJPRklMRV0sCiAgICBbZ2xmdy5PUEVOR0xfRk9SV0FSRF9DT01QQVQsIHRydWVdLAogICAgW2dsZncuUkVTSVpBQkxFLCBmYWxzZV0sCiAgICBbZ2xmdy5TQU1QTEVTLCA0XQogIF07CgogIGZvcihsZXQgW3Byb3AsIHZhbHVlXSBvZiBoaW50cykgV2luZG93LmhpbnQocHJvcCwgdmFsdWUpOwoKICB3aW5kb3cgPSBuZXcgV2luZG93KHJlc29sdXRpb24ud2lkdGgsIHJlc29sdXRpb24uaGVpZ2h0LCAnT3BlbkdMJyk7CiAgZ2xmdy5jb250ZXh0LmN1cnJlbnQgPSB3aW5kb3c7CiAgdGhpcy5jb250ZXh0ID0gZ2xmdy5jb250ZXh0OwoKICBjb25zdCB7IHNpemUsIHBvc2l0aW9uIH0gPSB3aW5kb3c7CgogIG52Zy5DcmVhdGVHTDMobnZnLlNURU5DSUxfU1RST0tFUyB8IG52Zy5BTlRJQUxJQVMgfCBudmcuREVCVUcpOwogIHJldHVybiBPYmplY3QuYXNzaWduKHRoaXMsIHsgcmVzb2x1dGlvbiwgd2luZG93LCBzaXplLCBwb3NpdGlvbiB9KTsKfQoKZnVuY3Rpb24gV3JpdGVJbWFnZShuYW1lLCBtYXQpIHsKICBjdi5pbXdyaXRlKG5hbWUsIG1hdCk7CiAgY29uc29sZS5sb2coIldyb3RlICciICsgbmFtZSArICInICgiICsgbWF0LnNpemUgKyAnKS4nKTsKfQoKZnVuY3Rpb24gU2F2ZUNvbmZpZyhjb25maWdPYmopIHsKICBjb25maWdPYmogPSBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXMoY29uZmlnT2JqKS5tYXAoKFtrLCB2XSkgPT4gW2ssICt2XSkpOwogIGxldCBmaWxlID0gc3RkLm9wZW4oYmFzZW5hbWUgKyAnLmNvbmZpZy5qc29uJywgJ3crYicpOwogIGZpbGUucHV0cyhKU09OLnN0cmluZ2lmeShjb25maWdPYmosIG51bGwsIDIpICsgJ1xuJyk7CiAgZmlsZS5jbG9zZSgpOwogIGNvbnNvbGUubG9nKCJTYXZlZCBjb25maWcgdG8gJyIgKyBiYXNlbmFtZSArICcuY29uZmlnLmpzb24nICsgIiciLCBpbnNwZWN0KGNvbmZpZ09iaiwgeyBjb21wYWN0OiBmYWxzZSB9KSk7Cn0KCmZ1bmN0aW9uIExvYWRDb25maWcoKSB7CiAgbGV0IHN0ciA9IHN0ZC5sb2FkRmlsZShiYXNlbmFtZSArICcuY29uZmlnLmpzb24nKTsKICBsZXQgY29uZmlnT2JqID0gSlNPTi5wYXJzZShzdHIgfHwgJ3t9Jyk7CiAgY29uZmlnT2JqID0gT2JqZWN0LmZyb21FbnRyaWVzKAogICAgT2JqZWN0LmVudHJpZXMoY29uZmlnT2JqKQogICAgICAubWFwKChbaywgdl0pID0+IFtrLCArdl0pCiAgICAgIC5maWx0ZXIoKFtrLCB2XSkgPT4gIWlzTmFOKHYpKQogICk7CiAgY29uc29sZS5sb2coJ0xvYWRDb25maWc6JywgaW5zcGVjdChjb25maWdPYmosIHsgY29tcGFjdDogZmFsc2UgfSkpOwogIHJldHVybiBjb25maWdPYmo7Cn0KCmZ1bmN0aW9uIEluc3BlY3RNYXQobWF0KSB7CiAgY29uc3QgeyBjaGFubmVscywgZGVwdGgsIHR5cGUsIGNvbHMsIHJvd3MgfSA9IG1hdDsKICByZXR1cm4gaW5zcGVjdCh7IGNoYW5uZWxzLCBkZXB0aCwgdHlwZSwgY29scywgcm93cyB9KTsKfQoKZnVuY3Rpb24gVG9IZXgobnVtYmVyKSB7CiAgaWYobnVtYmVyIDwgMCkgbnVtYmVyID0gMHhmZmZmZmZmZiArIG51bWJlciArIDE7CiAgcmV0dXJuICcweCcgKyBudW1iZXIudG9TdHJpbmcoMTYpOwp9CgpmdW5jdGlvbiBBY2N1bXVsYXRvcihjYWxsYmFjaykgewogIGxldCBzZWxmOwogIGxldCBhY2N1ID0ge307CiAgc2VsZiA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7CiAgICBpZihuYW1lIGluIGFjY3UpIHJldHVybjsKICAgIGFjY3VbbmFtZV0gPSB2YWx1ZTsKICAgIGlmKHR5cGVvZiBjYWxsYmFjayA9PSAnZnVuY3Rpb24nKSBjYWxsYmFjayhuYW1lLCB2YWx1ZSk7CiAgfTsKICBPYmplY3QuYXNzaWduKHNlbGYsIHsKICAgIGFjY3UsCiAgICBlbnRyaWVzKCkgewogICAgICByZXR1cm4gT2JqZWN0LmVudHJpZXMoYWNjdSk7CiAgICB9LAogICAgdmFsdWVzKCkgewogICAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhhY2N1KTsKICAgIH0sCiAgICBrZXlzKCkgewogICAgICByZXR1cm4gT2JqZWN0LmtleXMoYWNjdSk7CiAgICB9LAogICAgKltTeW1ib2wuaXRlcmF0b3JdKCkgewogICAgICBmb3IobGV0IGtleSBpbiBhY2N1KSB5aWVsZCBba2V5LCBhY2N1W2tleV1dOwogICAgfSwKICAgIGNsZWFyKCkgewogICAgICBmb3IobGV0IGtleSBpbiBhY2N1KSBkZWxldGUgYWNjdVtrZXldOwogICAgfQogIH0pOwogIHJldHVybiBzZWxmOwp9CgpmdW5jdGlvbiBtYWluKC4uLmFyZ3MpIHsKICBnbG9iYWxUaGlzLmNvbnNvbGUgPSBuZXcgQ29uc29sZSh7CiAgICBpbnNwZWN0T3B0aW9uczogewogICAgICBtYXhTdHJpbmdMZW5ndGg6IDIwMCwKCiAgICAgIGJyZWFrTGVuZ3RoOiAxMDAsCiAgICAgIGNvbXBhY3Q6IDAsCiAgICAgIGRlcHRoOiBJbmZpbml0eQogICAgfQogIH0pOwogIGxldCBydW5uaW5nID0gdHJ1ZTsKCiAgY29uc29sZS5sb2coJ1V0aWwuZ2V0TWV0aG9kTmFtZXMoY3YpJywgVXRpbC5nZXRNZXRob2ROYW1lcyhjdiwgSW5maW5pdHksIDApKTsKICBjb25zb2xlLmxvZygnY3YuSG91Z2hMaW5lcycsIGN2LkhvdWdoTGluZXMpOwoKICBsZXQgbGluZSA9IG5ldyBMaW5lKDAsIDAsIDUwLCA1MCk7CiAgY29uc29sZS5sb2coJ2xpbmUnLCBsaW5lKTsKICBsZXQgY2xhaGUgPSBuZXcgQ0xBSEUoKTsKICBjb25zb2xlLmxvZygnY2xhaGUnLCBjbGFoZSk7CiAgY3YubmFtZWRXaW5kb3coJ291dHB1dCcsIGN2LldJTkRPV19OT1JNQUwgfCBjdi5XSU5ET1dfS0VFUFJBVElPKTsKICBsZXQgdHJhY2tiYXIgPSAnJzsKICBsZXQgZmlsZSA9IGFyZ3NbMF0gfHwgJy4uL2FuLXRyb25pY3MvaW1hZ2VzL2ZtLzR0ci5qcGcnOwogIGxldCBpbWFnZSA9IGN2LmltcmVhZChmaWxlKTsKICBsZXQgcmVzb2x1dGlvbiA9IGltYWdlLnNpemU7CiAgbGV0IHNjYWxlZDsKICBjb25zb2xlLmxvZygnU3ltYm9sLmluc3BlY3QnLCBTeW1ib2wuaW5zcGVjdCk7CiAgY29uc29sZS5sb2coJ3Jlc29sdXRpb24nLCByZXNvbHV0aW9uKTsKICBpZihyZXNvbHV0aW9uLndpZHRoID4gMTIwMCkgewogICAgbGV0IGYgPSAxMDI0IC8gcmVzb2x1dGlvbi53aWR0aDsKICAgIHNjYWxlZCA9IG5ldyBTaXplKHJlc29sdXRpb24ud2lkdGggKiBmLCByZXNvbHV0aW9uLmhlaWdodCAqIGYpOwogIH0gZWxzZSB7CiAgICBzY2FsZWQgPSBuZXcgU2l6ZShyZXNvbHV0aW9uKTsKICB9CgogIGxldCBvdXRwdXRSZWN0ID0gbmV3IFJlY3QoMCwgMCwgcmVzb2x1dGlvbi53aWR0aCwgcmVzb2x1dGlvbi5oZWlnaHQpOwogIGxldCBvdXRwdXRNYXQgPSBuZXcgTWF0KG91dHB1dFJlY3Quc2l6ZSwgY3YuQ1ZfOFVDMyk7CiAgbGV0IHN0YXR1c1JlY3QgPSBuZXcgUmVjdCgwLCByZXNvbHV0aW9uLmhlaWdodCwgcmVzb2x1dGlvbi53aWR0aCwgMjAwKTsKICBsZXQgc3RhdHVzTWF0ID0gbmV3IE1hdChzdGF0dXNSZWN0LnNpemUsIGN2LkNWXzhVQzMpOwogIGNvbnNvbGUubG9nKCdzdGF0dXNSZWN0OicsIHN0YXR1c1JlY3QpOwogIGxldCBbdGV4dFJlY3QsIGhlbHBSZWN0XSA9IG5ldyBSZWN0KHN0YXR1c1JlY3Quc2l6ZSkuaW5zZXQoNSkudnNwbGl0KC0yMCk7CiAgbGV0IHNjcmVlblNpemUgPSBuZXcgU2l6ZShyZXNvbHV0aW9uLndpZHRoLCByZXNvbHV0aW9uLmhlaWdodCArIDIwMCk7CiAgY29uc29sZS5sb2coJ3N0YXR1c1JlY3QnLCBzdGF0dXNSZWN0KTsKICBjb25zb2xlLmxvZygndGV4dFJlY3QnLCB0ZXh0UmVjdCk7CiAgY29uc29sZS5sb2coJ2hlbHBSZWN0OicsIGhlbHBSZWN0KTsKICBsZXQgc2NyZWVuID0gbmV3IE1hdChzY3JlZW5TaXplLCBjdi5DVl84VUMzKTsKCiAgLyogbGV0IGdmeCA9IG5ldyBHTEZXKC4uLnNjcmVlblNpemUpOwogIGNvbnNvbGUubG9nKCdnZng6JywgZ2Z4KTsqLwoKICBjdi5pbXNob3coJ291dHB1dCcsIHNjcmVlbik7CiAgY3YubW92ZVdpbmRvdygnb3V0cHV0JywgMCwgMCk7CiAgY3YucmVzaXplV2luZG93KCdvdXRwdXQnLCBzY3JlZW5TaXplLndpZHRoKTsKCiAgY3Yuc2V0TW91c2VDYWxsYmFjaygnb3V0cHV0JywgKGV2ZW50LCB4LCB5LCBmbGFncykgPT4gewogICAgaWYoZmxhZ3MgPT0gY3YuRVZFTlRfRkxBR19MQlVUVE9OIHx8IGV2ZW50ID09IGN2LkVWRU5UX0xCVVRUT05ET1dOKSBjb25zb2xlLmxvZyhgY2xpY2sgJHt4fSwke3l9YCk7CiAgICBlbHNlIGlmKGV2ZW50KSBjb25zb2xlLmxvZygnTW91c2VDYWxsYmFjaycsIHsgZXZlbnQsIHgsIHksIGZsYWdzIH0pOwogIH0pOwoKICBsZXQgYmFja2dyb3VuZENvbG9yID0gMHhkMGQwZDA7CiAgbGV0IHNoYWRvd0NvbG9yID0gMHg0MDQwNDA7CiAgbGV0IHRleHRDb2xvciA9IDB4ZDNkN2NmOwogIGxldCBmb250cyA9IFsnL2hvbWUvcm9tYW4vLmZvbnRzL2dvdGhpYy50dGYnLCAnL2hvbWUvcm9tYW4vLmZvbnRzL2dvdGhpY2IudHRmJywgJy91c3Ivc2hhcmUvZm9udHMvdHJ1ZXR5cGUvdWJ1bnR1L1VidW50dU1vbm8tUi50dGYnXTsKICBsZXQgZm9udEZhY2UgPSBmb250c1syXTsKICBsZXQgZm9udFNpemUgPSAxNDsKICBmb250cy5mb3JFYWNoKGZpbGUgPT4gRHJhdy5sb2FkRm9udChmaWxlKSk7CiAgbGV0IGNvbmZpZyA9IExvYWRDb25maWcoKTsKICBsZXQgeyBmcmFtZVNob3cgPSAxLCBwYXJhbUluZGV4ID0gMCB9ID0gY29uZmlnOwogIGxldCBwYXJhbXMgPSB7CiAgICB0aHJlczogbmV3IE51bWVyaWNQYXJhbShjb25maWcudGhyZXMgfHwgMjI5LCAwLCAyNTUpLAogICAgdHlwZTogbmV3IE51bWVyaWNQYXJhbShjb25maWcudHlwZSB8fCBjdi5USFJFU0hfQklOQVJZX0lOViwgMCwgNCksCiAgICBibHVyOiBuZXcgTnVtZXJpY1BhcmFtKGNvbmZpZy5ibHVyIHx8IDEsIDEsIDEwLCAyKSwKICAgIGtlcm5lbF9zaXplOiBuZXcgTnVtZXJpY1BhcmFtKGNvbmZpZy5rZXJuZWxfc2l6ZSB8fCAwLCAwLCA5KSwKICAgIHJobzogbmV3IE51bWVyaWNQYXJhbShjb25maWcucmhvIHx8IDEsIDEsIDMwLCAwLjI1KSwKICAgIHRoZXRhOiBuZXcgTnVtZXJpY1BhcmFtKGNvbmZpZy50aGV0YSB8fCAxLCAwLCA5MCksCiAgICB0aHJlc2hvbGQ6IG5ldyBOdW1lcmljUGFyYW0oY29uZmlnLnRocmVzaG9sZCB8fCAyNSwgMCwgNTApLAogICAgbWluTGluZUxlbmd0aDogbmV3IE51bWVyaWNQYXJhbShjb25maWcubWluTGluZUxlbmd0aCB8fCAzLCAwLCAzMCksCiAgICBtYXhMaW5lR2FwOiBuZXcgTnVtZXJpY1BhcmFtKGNvbmZpZy5tYXhMaW5lR2FwIHx8IDQsIDAsIDIwKSwKICAgIGRwOiBuZXcgTnVtZXJpY1BhcmFtKGNvbmZpZy5kcCB8fCAyLCAwLCAxMCwgMC4xKSwKICAgIG1pbkRpc3Q6IG5ldyBOdW1lcmljUGFyYW0oY29uZmlnLm1pbkRpc3QgfHwgMTAsIDEsIDEwMDApLAogICAgcGFyYW0xOiBuZXcgTnVtZXJpY1BhcmFtKGNvbmZpZy5wYXJhbTEgfHwgMjAwLCAxLCAxMDAwKSwKICAgIHBhcmFtMjogbmV3IE51bWVyaWNQYXJhbShjb25maWcucGFyYW0yIHx8IDEwMCwgMSwgMTAwKSwKICAgIG1pblJhZGl1czogbmV3IE51bWVyaWNQYXJhbShjb25maWcubWluUmFkaXVzIHx8IDAsIDEsIDI1MCksCiAgICBtYXhSYWRpdXM6IG5ldyBOdW1lcmljUGFyYW0oY29uZmlnLm1heFJhZGl1cyB8fCAyMDAsIDEsIDEwMDApCiAgfTsKICBsZXQgY29udG91cnMgPSBbXTsKICBsZXQgbGluZVdpZHRoID0gMTsKICBsZXQgbGluZXMgPSBbXTsKICBsZXQgY2lyY2xlcyA9IFtdOwogIGxldCBwYXJhbU5hdiA9IG5ldyBQYXJhbU5hdmlnYXRvcihwYXJhbXMsIHBhcmFtSW5kZXgpOwogIGxldCBwYXJhbUluZGV4ZXMgPSBbLTEsIC0xXTsKICBsZXQgcGFsZXR0ZSA9IG5ldyBBcnJheSgpOwogIGNvbnN0IGJsYWNrID0gWzB4MDAsIDB4MDAsIDB4MDAsIDB4ZmZdOwogIGZvcihsZXQgaSA9IDA7IGkgPCA4OyBpKyspIHBhbGV0dGVbaV0gPSBbaSAmIDB4MDQgPyAweGZmIDogMHgwMCwgaSAmIDB4MDIgPyAweGZmIDogMHgwMCwgaSAmIDB4MDEgPyAweGZmIDogMHgwMCwgMHhmZl07CiAgcGFsZXR0ZVsyXSA9IFsweDYwLCAweDYwLCAweDYwLCAweGZmXTsKICBwYWxldHRlWzNdID0gWzB4ZmYsIDB4ZmYsIDB4MCwgMHhmZl07CiAgZm9yKGxldCBpID0gODsgaSA8IDE2OyBpKyspIHBhbGV0dGVbaV0gPSBibGFjazsKICBsZXQgcGlwZWxpbmUgPSBuZXcgUGlwZWxpbmUoCiAgICBbCiAgICAgIGZ1bmN0aW9uIEFjcXVpcmVGcmFtZShzcmMsIGRzdCkgewogICAgICAgIGltYWdlID0gY3YuaW1yZWFkKGZpbGUpOwogICAgICAgIGltYWdlLmNvcHlUbyhkc3QpOwogICAgICB9LAogICAgICBmdW5jdGlvbiBHcmF5c2NhbGUoc3JjLCBkc3QpIHsKICAgICAgICBsZXQgY2hhbm5lbHMgPSBbXTsKICAgICAgICBjdi5jdnRDb2xvcihzcmMsIGRzdCwgY3YuQ09MT1JfQkdSMkxhYik7CiAgICAgICAgY3Yuc3BsaXQoZHN0LCBjaGFubmVscyk7CiAgICAgICAgY2hhbm5lbHNbMF0uY29weVRvKGRzdCk7CiAgICAgIH0sCiAgICAgIGZ1bmN0aW9uIEJsdXIoc3JjLCBkc3QpIHsKICAgICAgICBjdi5HYXVzc2lhbkJsdXIoc3JjLCBkc3QsIFsrcGFyYW1zLmJsdXIsICtwYXJhbXMuYmx1cl0sIDAsIDAsIGN2LkJPUkRFUl9SRVBMSUNBVEUpOwogICAgICB9LAogICAgICBmdW5jdGlvbiBUaHJlc2hvbGQoc3JjLCBkc3QpIHsKICAgICAgICBjdi50aHJlc2hvbGQoc3JjLCBkc3QsICtwYXJhbXMudGhyZXMsIDI1NSwgK3BhcmFtcy50eXBlKTsKICAgICAgfSwKICAgICAgZnVuY3Rpb24gTW9ycGhvbG9neShzcmMsIGRzdCkgewogICAgICAgIGxldCBzdHJ1Y3R1cmluZ0VsZW1lbnQgPSBjdi5nZXRTdHJ1Y3R1cmluZ0VsZW1lbnQoY3YuTU9SUEhfQ1JPU1MsIG5ldyBTaXplKCtwYXJhbXMua2VybmVsX3NpemUgKiAyICsgMSwgK3BhcmFtcy5rZXJuZWxfc2l6ZSAqIDIgKyAxKSk7CiAgICAgICAgc3JjLmNvcHlUbyhkc3QpOwogICAgICAgIGN2Lm1vcnBob2xvZ3lFeChkc3QsIGRzdCwgY3YuTU9SUEhfRVJPREUsIHN0cnVjdHVyaW5nRWxlbWVudCk7CiAgICAgICAgZHN0LnhvcihbMjU1LCAyNTUsIDI1NSwgMF0sIGRzdCk7CiAgICAgIH0sCiAgICAgIGZ1bmN0aW9uIFNrZWxldG9uaXphdGlvbihzcmMsIGRzdCkgewogICAgICAgIGN2LnNrZWxldG9uaXphdGlvbihzcmMsIGRzdCk7CgogICAgICAgIC8vY3YudHJhY2VTa2VsZXRvbihkc3QsIGNvbnRvdXJzKTsKICAgICAgICBjb250b3VycyA9IGN2LnRyYWNlU2tlbGV0b24oZHN0KTsKCiAgICAgICAgLy8gY29udG91cnMuc29ydCgoYSwgYikgPT4gYi5sZW5ndGggLSBhLmxlbmd0aCk7CiAgICAgICAgLy8vKiBwcmV0dGllci1pZ25vcmUgKi8gY29uc29sZS5sb2coJ1NrZWxldG9uaXphdGlvbicsIGNvbnNvbGUuY29uZmlnKHsgY29tcGFjdDogMSwgbWF4QXJyYXlMZW5ndGg6IEluZmluaXR5IH0pLCBjb250b3Vycy5tYXAoYyA9PiBjLnRvU3RyaW5nKCkpKTsKICAgICAgfSwKICAgICAgZnVuY3Rpb24gU2hvd1RyYWNlKHNyYywgZHN0KSB7CiAgICAgICAgY3YuY3Z0Q29sb3Ioc3JjLCBkc3QsIGN2LkNPTE9SX0dSQVkyQkdSKTsKICAgICAgICBkc3QuY2xlYXIoKTsKCiAgICAgICAgLy9sZXQgcGFsZXR0ZT0gcmFuZ2UoMCwzNTksIDM2MC9jb250b3Vycy5sZW5ndGgpLm1hcChodWUgPT4gbmV3IEhTTEEoaHVlLCAxMDAsNTAsMS4wKSk7CiAgICAgICAgbGV0IHBhbGV0dGUgPSByYW5nZSgwLCBjb250b3Vycy5sZW5ndGggLSAxKQogICAgICAgICAgLm1hcChuID0+IFtNYXRoLmZsb29yKG4gLyAzKSwgKChuICUgMykgLSAxKSAqIDI1ICsgNTBdKQogICAgICAgICAgLm1hcCgoW24sIG1dKSA9PiBbKE1hdGguZmxvb3IobiAvIDMpICogMzU5ICogOSkgLyAoY29udG91cnMubGVuZ3RoIC0gMSksICgobiAlIDMpIC0gMSkgKiAyNSArIDUwLCBtXSkKICAgICAgICAgIC5tYXAoKFtoLCBzLCBsXSkgPT4gbmV3IEhTTEEoaCwgcywgbCwgMS4wKSk7CgogICAgICAgIHBhbGV0dGUgPSBwYWxldHRlLm1hcChjID0+IGMudG9CR1JBKCkpOwoKICAgICAgICAvLyBjb25zb2xlLmxvZygnU2hvd1RyYWNlJywgY29uc29sZS5jb25maWcoeyBtYXhBcnJheUxlbmd0aDogSW5maW5pdHksIGRlcHRoOiA0IH0pLCB7IHBhbGV0dGUgfSk7CiAgICAgICAgLy8gY29uc29sZS5sb2coJ0RyYXcuY29udG91cnMnLCBEcmF3LmNvbnRvdXJzKTsKCiAgICAgICAgLy8gIGNvbnRvdXJzID0gY29udG91cnMuZmlsdGVyKGMgPT4gYy5sZW5ndGg8PSAyKTsKCiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGNvbnRvdXJzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICBjb25zdCBjb2xvciA9IHBhbGV0dGVbaV07CiAgICAgICAgICAvL0RyYXcuY29udG91cnMoZHN0LCBjb250b3VycywgaSwgY29sb3IsIDEpOwogICAgICAgICAgRHJhdy5wb2x5bGluZXMoZHN0LCBbY29udG91cnNbaV1dLCBmYWxzZSwgY29sb3IsIDEpOwogICAgICAgIH0KCiAgICAgICAgY29uc29sZS5sb2coJ1Nob3dUcmFjZScsIGNvbnNvbGUuY29uZmlnKHsgbWF4QXJyYXlMZW5ndGg6IEluZmluaXR5IH0pLCB7IHNyYywgZHN0IH0pOwogICAgICB9LAogICAgICBmdW5jdGlvbiBMaW5lU2VnbWVudERldGVjdG9yKHNyYywgZHN0KSB7CiAgICAgICAgbGV0IGxpbmVzID0gW107CiAgICAgICAgbGV0IHdpZHRoID0gW10sCiAgICAgICAgICBwcmVjID0gW10sCiAgICAgICAgICBuZmEgPSBbXTsKICAgICAgICBjdi5saW5lU2VnbWVudERldGVjdG9yKHRoaXMub3V0cHV0T2YoJ1NrZWxldG9uaXphdGlvbicpLCBsaW5lcywgd2lkdGgsIHByZWMsIG5mYSk7CiAgICAgICAgLyogbGV0IGludGVyc2VjdGlvbk1hdHJpeCA9IFtdOwogICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgaW50ZXJzZWN0aW9uTWF0cml4W2ldID0gW107CiAgICAgICAgICBmb3IobGV0IGogPSAwOyBqIDwgbGluZXMubGVuZ3RoOyBqKyspIHsKICAgICAgICAgICAgbGV0IHB0ID0gW107CiAgICAgICAgICAgIGxldCBiID0gaSA9PSBqID8gbnVsbCA6IGxpbmVzW2ldLmludGVyc2VjdChsaW5lc1tqXSwgcHQpOwogICAgICAgICAgICBpbnRlcnNlY3Rpb25NYXRyaXhbaV1bal0gPSBiICYmIHB0OwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBjb25zb2xlLmxvZygnTGluZVNlZ21lbnREZXRlY3RvcicsIHsgaW50ZXJzZWN0aW9uTWF0cml4IH0pOwogICAgICAgIGxldCBsaW5lTWFwID0gbmV3IE1hcCgpOwogICAgICAgIGxldCBsaW5lTWFwcGVyID0gbWVtb2l6ZSgoKSA9PiBbXSwgbGluZU1hcCk7CiAgICAgICAgZm9yKGxldCBsaW5lIG9mIGxpbmVzKSB7CiAgICAgICAgICBsZXQgeyBhLCBiIH0gPSBsaW5lOwogICAgICAgICAgbGluZU1hcHBlcihhICsgJycpLnB1c2gobGluZSk7CiAgICAgICAgICBsaW5lTWFwcGVyKGIgKyAnJykucHVzaChsaW5lKTsKICAgICAgICB9CiAgICAgICAgY29uc29sZS5sb2coJ0xpbmVTZWdtZW50RGV0ZWN0b3InLCBjb25zb2xlLmNvbmZpZyh7IGNvbXBhY3Q6IDMgfSksIFsuLi5saW5lTWFwXS5tYXAoKFtuYW1lLCBhcnJdKSA9PiBbbmFtZSwgYXJyLmxlbmd0aCwgYXJyLm1hcChsaW5lID0+IFtsaW5lICsgJycsIGxpbmUubGVuZ3RoXSldKS5zb3J0KChhLCBiKSA9PiBiWzFdIC0gYVsxXSkgKTsKICAgICAgICAqLwogICAgICAgIHNyYy5jb3B5VG8oZHN0KTsKICAgICAgfSwKICAgICAgZnVuY3Rpb24gUGl4ZWxOZWlnaGJvcmhvb2Qoc3JjLCBkc3QpIHsKICAgICAgICBsZXQgbmVpZ2hib3Job29kID0gbmV3IE1hdChzcmMuc2l6ZSwgY3YuQ1ZfOFVDMSk7CiAgICAgICAgY3YucGl4ZWxOZWlnaGJvcmhvb2Qoc3JjLCBuZWlnaGJvcmhvb2QpOwogICAgICAgIGxldCBlbmRwb2ludHMgPSBjdi5waXhlbEZpbmRWYWx1ZShzcmMsIDEpOwogICAgICAgIGNvbnNvbGUubG9nKCdlbmRwb2ludHMnLCBlbmRwb2ludHMpOwogICAgICAgIGxldCBsaW5lcG9pbnRzID0gY3YucGl4ZWxGaW5kVmFsdWUoc3JjLCAyKTsKICAgICAgICBjb25zb2xlLmxvZygnbGluZXBvaW50cycsIGxpbmVwb2ludHMpOwogICAgICAgIGN2Lmltd3JpdGUoJ25laWdoYm9yaG9vZC5wbmcnLCBuZWlnaGJvcmhvb2QsIHBhbGV0dGUpOwogICAgICAgIGxldCBpbSA9IGN2LmltcmVhZCgnbmVpZ2hib3Job29kLnBuZycpOwogICAgICAgIGltLmNvcHlUbyhkc3QpOwogICAgICB9LAogICAgICBmdW5jdGlvbiBIb3VnaExpbmVzUChzcmMsIGRzdCkgewogICAgICAgIGNvbnN0IHNrZWwgPSB0aGlzLm91dHB1dE9mKCdTa2VsZXRvbml6YXRpb24nKTsKICAgICAgICBjb25zdCBtb3JwaG8gPSB0aGlzLm91dHB1dE9mKCdNb3JwaG9sb2d5Jyk7CiAgICAgICAgbGV0IG91dHB1dCA9IG5ldyBNYXQoKTsKICAgICAgICBpZihza2VsLmNoYW5uZWxzID4gMSkgY3YuY3Z0Q29sb3Ioc2tlbCwgc2tlbCwgY3YuQ09MT1JfQkdSMkdSQVkpOwogICAgICAgIGlmKG1vcnBoby5jaGFubmVscyA+IDEpIGN2LmN2dENvbG9yKG1vcnBobywgbW9ycGhvLCBjdi5DT0xPUl9CR1IyR1JBWSk7CiAgICAgICAgY3YuSG91Z2hMaW5lc1Aoc2tlbCwgb3V0cHV0LCArcGFyYW1zLnJobywgKE1hdGguUEkgKiAoK3BhcmFtcy50aGV0YSB8fCAxKSkgLyAxODAsICtwYXJhbXMudGhyZXNob2xkLCArcGFyYW1zLm1pbkxpbmVMZW5ndGgsICtwYXJhbXMubWF4TGluZUdhcCk7CiAgICAgICAgY3YuY3Z0Q29sb3Ioc2tlbCwgZHN0LCBjdi5DT0xPUl9HUkFZMkJHUik7CiAgICAgICAgbGV0IGkgPSAwOwogICAgICAgIGxpbmVzLnNwbGljZSgwLCBsaW5lcy5sZW5ndGgpOwogICAgICAgIGZvcihsZXQgZWxlbSBvZiBvdXRwdXQudmFsdWVzKCkpIHsKICAgICAgICAgIGNvbnN0IGxpbmUgPSBuZXcgTGluZShlbGVtKTsKICAgICAgICAgIGxpbmVzLnB1c2gobGluZSk7CiAgICAgICAgICBEcmF3LmxpbmUoZHN0LCAuLi5saW5lLnRvUG9pbnRzKCksIFsyNTUsIDEyOCwgMF0sIGxpbmVXaWR0aCwgY3YuTElORV9BQSk7CiAgICAgICAgICBEcmF3LmxpbmUobW9ycGhvLCAuLi5saW5lLnRvUG9pbnRzKCksIFswLCAwLCAwXSwgMiwgY3YuTElORV84KTsKICAgICAgICAgIERyYXcubGluZShza2VsLCAuLi5saW5lLnRvUG9pbnRzKCksIFswLCAwLCAwXSwgbGluZVdpZHRoLCBjdi5MSU5FXzgpOwogICAgICAgICAgKytpOwogICAgICAgIH0KICAgICAgICBsaW5lcyA9IGxpbmVzLm1hcChsID0+IChsLnNsb3BlLnkgPCAwID8gbC5zd2FwKCkgOiBsKSk7CgogICAgICAgIGNvbnN0IEdldEFuZ2xlID0gbCA9PiBNYXRoLnJvdW5kKChsLmFuZ2xlICogUkFEMkRFRykgLyAxNSkgKiAxNTsKCiAgICAgICAgbGluZXMgPSBsaW5lcy5maWx0ZXIobCA9PiBsLmxlbmd0aCA+PSA0MCAmJiBNYXRoLmFicyhHZXRBbmdsZShsKSkgIT0gNDUpOwoKICAgICAgICBsaW5lcy5zb3J0KChhLCBiKSA9PiBiLmxlbmd0aCAtIGEubGVuZ3RoKTsKICAgICAgICAvLyAgICBsaW5lcyA9IGxpbmVzLnNsaWNlKDAsIDUwKTsKICAgICAgICAvL2NvbnNvbGUubG9nKGBsaW5lc2AsIGxpbmVzLm1hcChsID0+IFtsLCBsLnNsb3BlLCBHZXRBbmdsZShsKV0pKTsKCiAgICAgICAgbGV0IGlzSG9yaXpvbnRhbCA9IGwgPT4gTWF0aC5hYnMobC54MiAtIGwueDEpID4gTWF0aC5hYnMobC55MiAtIGwueTEpOwoKICAgICAgICBsZXQgZmlyc3RMYXN0ID0gYSA9PiBbYVswXSwgYVthLmxlbmd0aCAtIDFdXTsKCiAgICAgICAgbGV0IHYgPSBsaW5lcwogICAgICAgICAgLmZpbHRlcihsID0+ICFpc0hvcml6b250YWwobCkpCiAgICAgICAgICAubWFwKGwgPT4gW2wsIGwuYXQoMC41KV0pCiAgICAgICAgICAuc29ydCgoYSwgYikgPT4gYVsxXS54IC0gYlsxXS54KQogICAgICAgICAgLm1hcCgoW2xdKSA9PiBsKTsKCiAgICAgICAgbGV0IGggPSBsaW5lcwogICAgICAgICAgLmZpbHRlcihsID0+IGlzSG9yaXpvbnRhbChsKSkKICAgICAgICAgIC5tYXAobCA9PiBbbCwgbC5hdCgwLjUpXSkKICAgICAgICAgIC5zb3J0KChhLCBiKSA9PiBhWzFdLnkgLSBiWzFdLnkpCiAgICAgICAgICAubWFwKChbbF0pID0+IGwpOwoKICAgICAgICAvKiAgIHYgPSBmaXJzdExhc3Qodik7CiAgICAgICAgaCA9IGZpcnN0TGFzdChoKTsqLwogICAgICAgIC8vY29uc29sZS5sb2coJ2xpbmVzOicsIHsgdiwgaCB9KTsKCiAgICAgICAgY29uc3QgYW5nbGUyQ29sb3IgPSBhID0+IHsKICAgICAgICAgIGxldCBjb2xvciA9IG5ldyBIU0xBKE1hdGgucm91bmQoYSksIDEwMCwgNTApLnRvUkdCQSgpOwogICAgICAgICAgcmV0dXJuIFtjb2xvci5iLCBjb2xvci5nLCBjb2xvci5yXTsKICAgICAgICB9OwoKICAgICAgICBjb25zb2xlLmxvZygnYW5nbGUyQ29sb3IoMTAwKTonLCBhbmdsZTJDb2xvcigxMDApKTsKICAgICAgICBjb25zb2xlLmxvZygnYW5nbGUyQ29sb3IoMzYwKTonLCBhbmdsZTJDb2xvcigwKSk7CiAgICAgICAgLyoKICAgICAgICBjb25zb2xlLmxvZygndicsCiAgICAgICAgICBbLi4udi5zbGljZSgwLCA0KSwgLi4uaC5zbGljZSgwLCA0KV0ubWFwKGwgPT4gWwogICAgICAgICAgICAuLi5sLnRvUG9pbnRzKCksCiAgICAgICAgICAgIGB5SW50ZXJjZXB0KCkgPSAke2wueUludGVyY2VwdCgpfWAsCiAgICAgICAgICAgIGB4SW50ZXJjZXB0KCkgPSAke2wueEludGVyY2VwdCgpfWAKICAgICAgICAgIF0pCiAgICAgICAgKTsqLwogICAgICAgIGZvcihsZXQgbGluZSBvZiB2KSB7CiAgICAgICAgICBsZXQgY29sb3IgPSBhbmdsZTJDb2xvcigobGluZS5hbmdsZSAqICgxODAgLyBNYXRoLlBJKSkgJSAxODApOwoKICAgICAgICAgIERyYXcubGluZShkc3QsIC4uLmxpbmUudG9Qb2ludHMoKSwgY29sb3IsIDEsIGN2LkxJTkVfQUEpOwogICAgICAgIH0KICAgICAgICBmb3IobGV0IGxpbmUgb2YgaCkgewogICAgICAgICAgbGV0IGNvbG9yID0gYW5nbGUyQ29sb3IoKGxpbmUuYW5nbGUgKiAoMTgwIC8gTWF0aC5QSSkpICUgMTgwKTsKCiAgICAgICAgICBEcmF3LmxpbmUoZHN0LCAuLi5saW5lLnRvUG9pbnRzKCksIGNvbG9yLCAxLCBjdi5MSU5FX0FBKTsKICAgICAgICB9CgogICAgICAgIGxldCBrZXJuID0gY3YuZ2V0U3RydWN0dXJpbmdFbGVtZW50KGN2Lk1PUlBIX0NST1NTLCBuZXcgU2l6ZSgzLCAzKSk7CiAgICAgICAgY3YuZGlsYXRlKHNrZWwsIHNrZWwsIGtlcm4pOwogICAgICAgIGN2LmVyb2RlKHNrZWwsIHNrZWwsIGtlcm4pOwogICAgICAgIGN2LmRpbGF0ZShtb3JwaG8sIG1vcnBobywga2Vybik7CiAgICAgIH0sCiAgICAgIGZ1bmN0aW9uIEhvdWdoQ2lyY2xlcyhzcmMsIGRzdCkgewogICAgICAgIGNvbnN0IG1vcnBobyA9IHRoaXMub3V0cHV0T2YoJ01vcnBob2xvZ3knKTsKICAgICAgICBjb25zdCBza2VsID0gdGhpcy5vdXRwdXRPZignU2tlbGV0b25pemF0aW9uJyk7CiAgICAgICAgY29uc3QgcGFyYW1BcnJheSA9IFsrcGFyYW1zLmRwIHx8IDEsICtwYXJhbXMubWluRGlzdCwgK3BhcmFtcy5wYXJhbTEsICtwYXJhbXMucGFyYW0yLCArcGFyYW1zLm1pblJhZGl1cywgK3BhcmFtcy5tYXhSYWRpTWF0aHVzXTsKICAgICAgICBsZXQgY2lyY2xlczEgPSBbXSB8fCBuZXcgTWF0KCk7CiAgICAgICAgbGV0IGNpcmNsZXMyID0gW10gfHwgbmV3IE1hdCgpOwogICAgICAgIGN2LkhvdWdoQ2lyY2xlcyhtb3JwaG8sIGNpcmNsZXMxLCBjdi5IT1VHSF9HUkFESUVOVCwgLi4ucGFyYW1BcnJheSk7CiAgICAgICAgY3YuSG91Z2hDaXJjbGVzKHNrZWwsIGNpcmNsZXMyLCBjdi5IT1VHSF9HUkFESUVOVCwgLi4ucGFyYW1BcnJheSk7CiAgICAgICAgdGhpcy5vdXRwdXRPZignSG91Z2hMaW5lc1AnKS5jb3B5VG8oZHN0KTsKICAgICAgICBsZXQgaSA9IDA7CiAgICAgICAgZm9yKGxldCBbeCwgeSwgcl0gb2YgY2lyY2xlczEpIHsKICAgICAgICAgIGxldCBwID0gbmV3IFBvaW50KHgsIHkpOwogICAgICAgICAgRHJhdy5jaXJjbGUoZHN0LCBwLCByLCBbMCwgMjU1LCAwXSwgbGluZVdpZHRoLCBjdi5MSU5FX0FBKTsKICAgICAgICAgIGNpcmNsZXMucHVzaChbeCwgeSwgcl0pOwogICAgICAgIH0KICAgICAgICBmb3IobGV0IFt4LCB5LCByXSBvZiBjaXJjbGVzMikgewogICAgICAgICAgbGV0IHAgPSBuZXcgUG9pbnQoeCwgeSk7CiAgICAgICAgICBEcmF3LmNpcmNsZShkc3QsIHAsIHIgKyAyLCBbMjU1LCAwLCAwXSwgbGluZVdpZHRoLCBjdi5MSU5FX0FBKTsKICAgICAgICAgIGNpcmNsZXMucHVzaChbeCwgeSwgcl0pOwogICAgICAgIH0KICAgICAgfQogICAgXSwKICAgIGkgPT4gewogICAgICBpZihmcmFtZVNob3cgPT0gaSkgewogICAgICAgIGxldCBwcm9jZXNzb3IgPSBwaXBlbGluZS5nZXRQcm9jZXNzb3IoaSk7CiAgICAgICAgbGV0IHBhcmFtcyA9IHByb2Nlc3NvclBhcmFtcy5nZXQocHJvY2Vzc29yKTsKICAgICAgICBwYXJhbUluZGV4ZXNbMF0gPSBwYXJhbU5hdi5pbmRleE9mKHBhcmFtc1swXSk7CiAgICAgICAgcGFyYW1JbmRleGVzWzFdID0gcGFyYW1OYXYuaW5kZXhPZihwYXJhbXNbcGFyYW1zLmxlbmd0aCAtIDFdKTsKICAgICAgICBpZihwYXJhbU5hdi5pbmRleCA8IHBhcmFtSW5kZXhlc1swXSB8fCBwYXJhbU5hdi5pbmRleCA+IHBhcmFtSW5kZXhlc1sxXSkgcGFyYW1OYXYuY3VycmVudCA9IHBhcmFtc1swXTsKICAgICAgICBsZXQgbWF0ID0gcGlwZWxpbmUuZ2V0SW1hZ2UoaSk7CiAgICAgICAgaWYobWF0LmNoYW5uZWxzID09IDEpIGN2LmN2dENvbG9yKG1hdCwgb3V0cHV0TWF0LCBjdi5DT0xPUl9HUkFZMkJHUik7CiAgICAgICAgZWxzZSBpZihtYXQuY2hhbm5lbHMgPT0gNCkgY3YuY3Z0Q29sb3IobWF0LCBvdXRwdXRNYXQsIGN2LkNPTE9SX0JHUkEyQkdSKTsKICAgICAgICBlbHNlIG1hdC5jb3B5VG8ob3V0cHV0TWF0KTsKICAgICAgICBSZWRyYXdTdGF0dXMoKTsKICAgICAgICBSZWRyYXdXaW5kb3coKTsKICAgICAgfQogICAgfQogICk7CiAgZnVuY3Rpb24gUmVkcmF3U3RhdHVzKCkgewogICAgLy9jb25zb2xlLmxvZyhgcGlwZWxpbmUuaW1hZ2VzID1gLCBuZXcgTWFwKHBpcGVsaW5lLmltYWdlRW50cmllcygpKSk7CiAgICBsZXQgaSA9IHBpcGVsaW5lLmN1cnJlbnRQcm9jZXNzb3I7CiAgICBsZXQgcHJvY2Vzc29yID0gcGlwZWxpbmUuZ2V0UHJvY2Vzc29yKGkpOwogICAgbGV0IHBhcmFtcyA9IHByb2Nlc3NvclBhcmFtcy5nZXQocHJvY2Vzc29yKTsKICAgIGxldCBzcmVjdCA9IG5ldyBSZWN0KHN0YXR1c1JlY3Quc2l6ZSk7CgogICAgRHJhdy5yZWN0YW5nbGUoc3RhdHVzTWF0LCBzcmVjdCwgYmFja2dyb3VuZENvbG9yLCBjdi5GSUxMRUQsIHRydWUpOwogICAgRHJhdy5yZWN0YW5nbGUoc3RhdHVzTWF0LCBzcmVjdC5pbnNldCgzLCAwKSwgMCwgY3YuRklMTEVELCB0cnVlKTsKICAgIGNvbnN0IGluc3BlY3RPcHRpb25zID0gewogICAgICBjb2xvcnM6IHRydWUsCiAgICAgIGhpZGVLZXlzOiBbJ2NhbGxiYWNrJ10KICAgIH07CiAgICBsZXQgdGV4dCA9CiAgICAgIGAjJHtpfTogYCArCiAgICAgIHBpcGVsaW5lLm5hbWVzW2ldICsKICAgICAgYFxuXG5gICsKICAgICAgYHBhcmFtczpcbmAgKwogICAgICBwYXJhbXMKICAgICAgICAubWFwKChuYW1lLCBpZHgpID0+IHsKICAgICAgICAgIHJldHVybiBgICAke2lkeCArIHBhcmFtSW5kZXhlc1swXSA9PSBwYXJhbU5hdi5pbmRleCA/ICdceDFiWzE7MzFtJyA6ICcnfSR7bmFtZS5wYWRFbmQoMTMpfVx4MWJbMG0gICBceDFiWzE7MzZtJHsrcGFyYW1OYXYuZ2V0KG5hbWUpfVx4MWJbMG1cbmA7CiAgICAgICAgfSkKICAgICAgICAuam9pbignJyk7CiAgICBEcmF3VGV4dChzdGF0dXNNYXQodGV4dFJlY3QpLCB0ZXh0LCB0ZXh0Q29sb3IsIGZvbnRGYWNlLCBmb250U2l6ZSk7CiAgICBEcmF3VGV4dChzdGF0dXNNYXQoaGVscFJlY3QpLCAnPCBwcmV2LCA+IG5leHQsICsgaW5jcmVtZW50LCAtIGRlY3JlbWVudCwgREVMIHJlc2V0JywgdGV4dENvbG9yLCBmb250RmFjZSwgZm9udFNpemUpOwogIH0KICBmdW5jdGlvbiBSZWRyYXdXaW5kb3coKSB7CiAgICBsZXQgaSA9IHBpcGVsaW5lLmN1cnJlbnRQcm9jZXNzb3I7CiAgICBjdi52Y29uY2F0KFtvdXRwdXRNYXQsIHN0YXR1c01hdF0sIHNjcmVlbik7CiAgICBjdi5pbXNob3coJ291dHB1dCcsIHNjcmVlbik7CiAgICBjdi5yZXNpemVXaW5kb3coJ291dHB1dCcsIHNjcmVlblNpemUud2lkdGgsIHNjcmVlblNpemUuaGVpZ2h0KTsKICAgIGN2LnNldFdpbmRvd1RpdGxlKCdvdXRwdXQnLCBgIyR7aX06IGAgKyBwaXBlbGluZS5uYW1lc1tpXSk7CiAgfQogIGxldCBrZXk7CiAgbGV0IHBhcmFtQWNjdW11bGF0b3IgPSBwYXJhbU5hdi5zZXRDYWxsYmFjaygKICAgIG5ldyBBY2N1bXVsYXRvcigobmFtZSwgcGFyYW0pID0+IHsKICAgICAgLy8gY29uc29sZS5sb2coYHBhcmFtICcke25hbWV9JyBjYWxsYmFja2AsIHBhcmFtKTsKICAgIH0pCiAgKTsKICBsZXQgcHJvY2Vzc29yUGFyYW1zID0gVXRpbC53ZWFrTWFwcGVyKHByb2Nlc3NvciA9PiBbXSk7CiAgcGlwZWxpbmUuYmVmb3JlID0gKCkgPT4gcGFyYW1BY2N1bXVsYXRvci5jbGVhcigpOwogIHBpcGVsaW5lLmFmdGVyID0gKCkgPT4gcHJvY2Vzc29yUGFyYW1zLnNldChwaXBlbGluZS5nZXRQcm9jZXNzb3IoKSwgcGFyYW1BY2N1bXVsYXRvci5rZXlzKCkpOwogIHBpcGVsaW5lKCk7CiAgZGVsZXRlIHBpcGVsaW5lLmJlZm9yZTsKICBkZWxldGUgcGlwZWxpbmUuYWZ0ZXI7CiAgY29uc29sZS5sb2coYHBpcGVsaW5lLnJlY2FsYygke2ZyYW1lU2hvd30pYCwgcGlwZWxpbmUucmVjYWxjKGZyYW1lU2hvdykpOwogIHdoaWxlKHRydWUpIHsKICAgIGtleSA9IGN2LndhaXRLZXlFeCgtMSk7CiAgICBpZihrZXkgPT09ICdxJyB8fCBrZXkgPT09IDExMyB8fCBrZXkgPT09ICdceDFiJyB8fCBrZXkgPT09IDB4MTAwMDcxIHx8IGtleSA9PT0gLTEpIGJyZWFrOwogICAgc3dpdGNoIChrZXkgJiAweGZmZikgewogICAgICBjYXNlIDB4ZjA4IC8qIGJhY2tzcGFjZSAqLzoKICAgICAgY2FzZSAweDA4IC8qIGJhY2tzcGFjZSAqLzoKICAgICAgICBpZihmcmFtZVNob3cgPiAwKSB7CiAgICAgICAgICBmcmFtZVNob3ctLTsKICAgICAgICAgIHBpcGVsaW5lLnN0ZXAoLTEpOwogICAgICAgIH0KICAgICAgICBicmVhazsKICAgICAgY2FzZSAweGY1MiAvKiB1cCAqLzoKICAgICAgY2FzZSAweDNjIC8qIDwgKi86CiAgICAgICAgcGFyYW1OYXYucHJldigpOwogICAgICAgIGlmKHBhcmFtSW5kZXhlc1swXSAhPSAtMSAmJiBwYXJhbU5hdi5pbmRleCA8IHBhcmFtSW5kZXhlc1swXSkgcGFyYW1OYXYuaW5kZXggPSBwYXJhbUluZGV4ZXNbMV07CiAgICAgICAgY29uc29sZS5sb2coYFBhcmFtICMke3BhcmFtTmF2LmluZGV4fSAnJHtwYXJhbU5hdi5uYW1lfScgc2VsZWN0ZWQgKCR7K3BhcmFtTmF2LnBhcmFtfSlgKTsKICAgICAgICBSZWRyYXdTdGF0dXMoKTsKICAgICAgICBSZWRyYXdXaW5kb3coKTsKICAgICAgICBicmVhazsKICAgICAgY2FzZSAweGY1NCAvKmRvd24gICovOgogICAgICBjYXNlIDB4M2UgLyogPiAqLzoKICAgICAgICBwYXJhbU5hdi5uZXh0KCk7CiAgICAgICAgaWYocGFyYW1JbmRleGVzWzFdICE9IC0xICYmIHBhcmFtTmF2LmluZGV4ID4gcGFyYW1JbmRleGVzWzFdKSBwYXJhbU5hdi5pbmRleCA9IHBhcmFtSW5kZXhlc1swXTsKICAgICAgICBjb25zb2xlLmxvZyhgUGFyYW0gIyR7cGFyYW1OYXYuaW5kZXh9ICcke3BhcmFtTmF2Lm5hbWV9JyBzZWxlY3RlZCAoJHsrcGFyYW1OYXYucGFyYW19KWApOwogICAgICAgIFJlZHJhd1N0YXR1cygpOwogICAgICAgIFJlZHJhd1dpbmRvdygpOwogICAgICAgIGJyZWFrOwogICAgICBjYXNlIDB4ZjUzIC8qIHJpZ2h0ICovOgogICAgICBjYXNlIDB4MmIgLyogKyAqLzoKICAgICAgICBwYXJhbU5hdi5wYXJhbS5pbmNyZW1lbnQoKTsKICAgICAgICBjb25zb2xlLmxvZyhgUGFyYW0gJHtwYXJhbU5hdi5uYW1lfTogJHsrcGFyYW1OYXYucGFyYW19YCk7CiAgICAgICAgcGlwZWxpbmUucmVjYWxjKGZyYW1lU2hvdyk7CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgMHhmZmYgLyogREVMRVRFICovOgogICAgICBjYXNlIDB4OWYgLyogbnVtcGFkIERFTCAqLzoKICAgICAgY2FzZSAweGY5ZiAvKiBudW1wYWQgREVMICovOgogICAgICAgIHBhcmFtTmF2LnBhcmFtLnJlc2V0KCk7CiAgICAgICAgY29uc29sZS5sb2coYFBhcmFtICR7cGFyYW1OYXYubmFtZX06ICR7aW5zcGVjdChwYXJhbU5hdi5wYXJhbSl9YCk7CiAgICAgICAgcGlwZWxpbmUucmVjYWxjKGZyYW1lU2hvdyk7CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgMHhmNTEgLyogbGVmdCAqLzoKICAgICAgY2FzZSAweDJkIC8qIC0gKi86CiAgICAgIGNhc2UgMHhhZCAvKiBudW1wYWQgLSAqLzoKICAgICAgY2FzZSAweGZhZCAvKiBudW1wYWQgLSAqLzoKICAgICAgY2FzZSAweDJmYWQgLyogbnVtcGFkIC0gKi86CiAgICAgICAgcGFyYW1OYXYucGFyYW0uZGVjcmVtZW50KCk7CiAgICAgICAgY29uc29sZS5sb2coYFBhcmFtICR7cGFyYW1OYXYubmFtZX06ICR7K3BhcmFtTmF2LnBhcmFtfWApOwogICAgICAgIHBpcGVsaW5lLnJlY2FsYyhmcmFtZVNob3cpOwogICAgICAgIGJyZWFrOwogICAgICBjYXNlIDB4MzE6IC8qIDEgKi8KICAgICAgY2FzZSAweDMyOiAvKiAyICovCiAgICAgIGNhc2UgMHgzMzogLyogMyAqLwogICAgICBjYXNlIDB4MzQ6IC8qIDQgKi8KICAgICAgY2FzZSAweDM1OiAvKiA1ICovCiAgICAgIGNhc2UgMHgzNjogLyogNiAqLwogICAgICBjYXNlIDB4Mzc6IC8qIDcgKi8KICAgICAgY2FzZSAweDM4OiAvKiA4ICovCiAgICAgIGNhc2UgMHgzOTogLyogOSAqLwogICAgICBjYXNlIDB4MzAgLyogMCAqLzoKICAgICAgICBsZXQgdiA9IGtleSAmIDB4ZiB8fCAxMDsKICAgICAgICBwYXJhbU5hdi5wYXJhbS5hbHBoYSA9IHYgLyAxMDsKICAgICAgICBjb25zb2xlLmxvZyhgUGFyYW0gJHtwYXJhbU5hdi5uYW1lfTogJHsrcGFyYW1OYXYucGFyYW19YCk7CiAgICAgICAgcGlwZWxpbmUucmVjYWxjKGZyYW1lU2hvdyk7CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgMHhhNyAvKiDCpyAqLzoKICAgICAgICBwYXJhbU5hdi5wYXJhbS5hbHBoYSA9IDA7CiAgICAgICAgY29uc29sZS5sb2coYFBhcmFtICR7cGFyYW1OYXYubmFtZX06ICR7K3BhcmFtTmF2LnBhcmFtfWApOwogICAgICAgIHBpcGVsaW5lLnJlY2FsYyhmcmFtZVNob3cpOwogICAgICAgIGJyZWFrOwogICAgICBjYXNlIDB4MjA6CiAgICAgICAgZnJhbWVTaG93ID0gVXRpbC5tb2QoZnJhbWVTaG93ICsgMSwgcGlwZWxpbmUuc2l6ZSk7CiAgICAgICAgcGlwZWxpbmUuc3RlcCgpOwogICAgICAgIGJyZWFrOwogICAgICBkZWZhdWx0OiB7CiAgICAgICAgaWYoa2V5ICE9PSAtMSkgY29uc29sZS5sb2coJ2tleTonLCBUb0hleChrZXkpKTsKICAgICAgICBicmVhazsKICAgICAgfQogICAgfQogIH0KICBTYXZlQ29uZmlnKHsgZnJhbWVTaG93LCBwYXJhbUluZGV4OiBwYXJhbU5hdi5pbmRleCwgLi4ucGFyYW1zIH0pOwogIGNvbnNvbGUubG9nKCdFWElUJyk7Cn0KdHJ5IHsKICBtYWluKC4uLnNjcmlwdEFyZ3Muc2xpY2UoMSkpOwp9IGNhdGNoKGVycm9yKSB7CiAgY29uc29sZS5sb2coYEZBSUw6ICR7ZXJyb3IubWVzc2FnZX1cbiR7ZXJyb3Iuc3RhY2t9YCk7CiAgc3RkLmV4aXQoMSk7Cn0gZmluYWxseSB7CiAgY29uc29sZS5sb2coJ1NVQ0NFU1MnKTsKfQoAAAAAAAAAAMFQAAAAAAAAAAAAAAAAAAAAAAAAwVAAAAAAAAAAAAAAAAAAAAAAAADBUAAAAAAAAAAAAAAAAAAAAAAAAMFQAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAzwkAAAAAAADRCQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "make-bitmap.js",
			"settings":
			{
				"buffer_size": 2275,
				"line_ending": "Unix"
			}
		},
		{
			"file": "qjs-opencv/tests/test_freetype.js",
			"settings":
			{
				"buffer_size": 5281,
				"line_ending": "Unix"
			}
		},
		{
			"file": "qjs-opencv/tests/test_gif.js",
			"settings":
			{
				"buffer_size": 2916,
				"line_ending": "Unix"
			}
		},
		{
			"file": "test-bitset.js",
			"settings":
			{
				"buffer_size": 1680,
				"line_ending": "Unix"
			}
		},
		{
			"file": "test-umat.js",
			"settings":
			{
				"buffer_size": 6518,
				"line_ending": "Unix"
			}
		},
		{
			"file": "test-imread.js",
			"settings":
			{
				"buffer_size": 4007,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					346,
					1,
					"insert",
					{
						"characters": " of"
					},
					"AwAAAK0DAAAAAAAArgMAAAAAAAAAAAAArgMAAAAAAACvAwAAAAAAAAAAAACvAwAAAAAAALADAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAArQMAAAAAAACtAwAAAAAAAAAAAAAAAPC/"
				],
				[
					347,
					1,
					"insert",
					{
						"characters": " cols"
					},
					"BQAAALADAAAAAAAAsQMAAAAAAAAAAAAAsQMAAAAAAACyAwAAAAAAAAAAAACyAwAAAAAAALMDAAAAAAAAAAAAALMDAAAAAAAAtAMAAAAAAAAAAAAAtAMAAAAAAAC1AwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsAMAAAAAAACwAwAAAAAAAAAAAAAAAPC/"
				],
				[
					349,
					1,
					"insert",
					{
						"characters": "\nyield"
					},
					"CQAAALYDAAAAAAAAtwMAAAAAAAAAAAAAtwMAAAAAAAC7AwAAAAAAAAAAAAC3AwAAAAAAALcDAAAAAAAABAAAACAgICC3AwAAAAAAAL0DAAAAAAAAAAAAAL0DAAAAAAAAvgMAAAAAAAAAAAAAvgMAAAAAAAC/AwAAAAAAAAAAAAC/AwAAAAAAAMADAAAAAAAAAAAAAMADAAAAAAAAwQMAAAAAAAAAAAAAwQMAAAAAAADCAwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtgMAAAAAAAC2AwAAAAAAAAAAAAAAAPC/"
				],
				[
					350,
					1,
					"insert",
					{
						"characters": " col;"
					},
					"BQAAAMIDAAAAAAAAwwMAAAAAAAAAAAAAwwMAAAAAAADEAwAAAAAAAAAAAADEAwAAAAAAAMUDAAAAAAAAAAAAAMUDAAAAAAAAxgMAAAAAAAAAAAAAxgMAAAAAAADHAwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwgMAAAAAAADCAwAAAAAAAAAAAAAAAPC/"
				],
				[
					353,
					1,
					"left_delete",
					null,
					"AQAAAMsDAAAAAAAAywMAAAAAAAABAAAACg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAzAMAAAAAAADMAwAAAAAAAAAAAAAAAAAA"
				],
				[
					369,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAANoHAAAAAAAA2wcAAAAAAAAAAAAA2wcAAAAAAADcBwAAAAAAAAAAAADcBwAAAAAAAN0HAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2gcAAAAAAADaBwAAAAAAAAAAAAAAAPC/"
				],
				[
					370,
					1,
					"insert",
					{
						"characters": " segments"
					},
					"CQAAAN0HAAAAAAAA3gcAAAAAAAAAAAAA3gcAAAAAAADfBwAAAAAAAAAAAADfBwAAAAAAAOAHAAAAAAAAAAAAAOAHAAAAAAAA4QcAAAAAAAAAAAAA4QcAAAAAAADiBwAAAAAAAAAAAADiBwAAAAAAAOMHAAAAAAAAAAAAAOMHAAAAAAAA5AcAAAAAAAAAAAAA5AcAAAAAAADlBwAAAAAAAAAAAADlBwAAAAAAAOYHAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3QcAAAAAAADdBwAAAAAAAAAAAAAAAPC/"
				],
				[
					371,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAOYHAAAAAAAA5wcAAAAAAAAAAAAA5wcAAAAAAADoBwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5gcAAAAAAADmBwAAAAAAAAAAAAAAAPC/"
				],
				[
					372,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOgHAAAAAAAA6QcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6AcAAAAAAADoBwAAAAAAAAAAAAAAAPC/"
				],
				[
					373,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAOkHAAAAAAAA6wcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6QcAAAAAAADpBwAAAAAAAAAAAAAAAPC/"
				],
				[
					374,
					1,
					"insert",
					{
						"characters": "--"
					},
					"AgAAAOoHAAAAAAAA6wcAAAAAAAAAAAAA6wcAAAAAAADsBwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6gcAAAAAAADqBwAAAAAAAAAAAAAAAPC/"
				],
				[
					375,
					2,
					"left_delete",
					null,
					"AgAAAOsHAAAAAAAA6wcAAAAAAAABAAAALeoHAAAAAAAA6gcAAAAAAAABAAAALQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA7AcAAAAAAADsBwAAAAAAAAAAAAAAAPC/"
				],
				[
					376,
					1,
					"insert",
					{
						"characters": "-.-"
					},
					"AwAAAOoHAAAAAAAA6wcAAAAAAAAAAAAA6wcAAAAAAADsBwAAAAAAAAAAAADsBwAAAAAAAO0HAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6gcAAAAAAADqBwAAAAAAAAAAAAAAAPC/"
				],
				[
					377,
					3,
					"left_delete",
					null,
					"AwAAAOwHAAAAAAAA7AcAAAAAAAABAAAALesHAAAAAAAA6wcAAAAAAAABAAAALuoHAAAAAAAA6gcAAAAAAAABAAAALQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA7QcAAAAAAADtBwAAAAAAAAAAAAAAAPC/"
				],
				[
					378,
					1,
					"insert",
					{
						"characters": "..."
					},
					"AwAAAOoHAAAAAAAA6wcAAAAAAAAAAAAA6wcAAAAAAADsBwAAAAAAAAAAAADsBwAAAAAAAO0HAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6gcAAAAAAADqBwAAAAAAAAAAAAAAAPC/"
				],
				[
					379,
					1,
					"paste",
					null,
					"AQAAAO0HAAAAAAAA+AcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA7QcAAAAAAADtBwAAAAAAAAAAAAAAAPC/"
				],
				[
					380,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAPgHAAAAAAAA+gcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+AcAAAAAAAD4BwAAAAAAAAAAAAAAAPC/"
				],
				[
					382,
					1,
					"left_delete",
					null,
					"AQAAAPkHAAAAAAAA+QcAAAAAAAABAAAAKQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+gcAAAAAAAD6BwAAAAAAAAAAAAAAAPC/"
				],
				[
					383,
					1,
					"insert",
					{
						"characters": "db"
					},
					"AgAAAPkHAAAAAAAA+gcAAAAAAAAAAAAA+gcAAAAAAAD7BwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+QcAAAAAAAD5BwAAAAAAAAAAAAAAAPC/"
				],
				[
					384,
					2,
					"left_delete",
					null,
					"AgAAAPoHAAAAAAAA+gcAAAAAAAABAAAAYvkHAAAAAAAA+QcAAAAAAAABAAAAZA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+wcAAAAAAAD7BwAAAAAAAAAAAAAAAPC/"
				],
				[
					385,
					1,
					"insert",
					{
						"characters": "img.size)"
					},
					"CQAAAPkHAAAAAAAA+gcAAAAAAAAAAAAA+gcAAAAAAAD7BwAAAAAAAAAAAAD7BwAAAAAAAPwHAAAAAAAAAAAAAPwHAAAAAAAA/QcAAAAAAAAAAAAA/QcAAAAAAAD+BwAAAAAAAAAAAAD+BwAAAAAAAP8HAAAAAAAAAAAAAP8HAAAAAAAAAAgAAAAAAAAAAAAAAAgAAAAAAAABCAAAAAAAAAAAAAABCAAAAAAAAAIIAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+QcAAAAAAAD5BwAAAAAAAAAAAAAAAPC/"
				],
				[
					387,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAAMIAAAAAAAABAgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAwgAAAAAAAADCAAAAAAAAAAAAAAAAPC/"
				],
				[
					388,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAAQIAAAAAAAABQgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABAgAAAAAAAAECAAAAAAAAAAAAAAAAPC/"
				],
				[
					393,
					1,
					"insert",
					{
						"characters": "console.log"
					},
					"CwAAAAUIAAAAAAAABggAAAAAAAAAAAAABggAAAAAAAAHCAAAAAAAAAAAAAAHCAAAAAAAAAgIAAAAAAAAAAAAAAgIAAAAAAAACQgAAAAAAAAAAAAACQgAAAAAAAAKCAAAAAAAAAAAAAAKCAAAAAAAAAsIAAAAAAAAAAAAAAsIAAAAAAAADAgAAAAAAAAAAAAADAgAAAAAAAANCAAAAAAAAAAAAAANCAAAAAAAAA4IAAAAAAAAAAAAAA4IAAAAAAAADwgAAAAAAAAAAAAADwgAAAAAAAAQCAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABQgAAAAAAAAFCAAAAAAAAAAAAAAAAPC/"
				],
				[
					394,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAABAIAAAAAAAAEggAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEAgAAAAAAAAQCAAAAAAAAAAAAAAAAPC/"
				],
				[
					395,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAABEIAAAAAAAAEwgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEQgAAAAAAAARCAAAAAAAAAAAAAAAAPC/"
				],
				[
					396,
					1,
					"insert",
					{
						"characters": "segments"
					},
					"CAAAABIIAAAAAAAAEwgAAAAAAAAAAAAAEwgAAAAAAAAUCAAAAAAAAAAAAAAUCAAAAAAAABUIAAAAAAAAAAAAABUIAAAAAAAAFggAAAAAAAAAAAAAFggAAAAAAAAXCAAAAAAAAAAAAAAXCAAAAAAAABgIAAAAAAAAAAAAABgIAAAAAAAAGQgAAAAAAAAAAAAAGQgAAAAAAAAaCAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEggAAAAAAAASCAAAAAAAAAAAAAAAAPC/"
				],
				[
					398,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAABsIAAAAAAAAHAgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGwgAAAAAAAAbCAAAAAAAAAAAAAAAAPC/"
				],
				[
					399,
					1,
					"insert",
					{
						"characters": " segments"
					},
					"CQAAABwIAAAAAAAAHQgAAAAAAAAAAAAAHQgAAAAAAAAeCAAAAAAAAAAAAAAeCAAAAAAAAB8IAAAAAAAAAAAAAB8IAAAAAAAAIAgAAAAAAAAAAAAAIAgAAAAAAAAhCAAAAAAAAAAAAAAhCAAAAAAAACIIAAAAAAAAAAAAACIIAAAAAAAAIwgAAAAAAAAAAAAAIwgAAAAAAAAkCAAAAAAAAAAAAAAkCAAAAAAAACUIAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHAgAAAAAAAAcCAAAAAAAAAAAAAAAAPC/"
				],
				[
					401,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAACYIAAAAAAAAJwgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJggAAAAAAAAmCAAAAAAAAAAAAAAAAPC/"
				],
				[
					411,
					1,
					"insert",
					{
						"characters": "cv."
					},
					"AwAAAPACAAAAAAAA8QIAAAAAAAAAAAAA8QIAAAAAAADyAgAAAAAAAAAAAADyAgAAAAAAAPMCAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA8AIAAAAAAADwAgAAAAAAAAAAAAAAAPC/"
				],
				[
					423,
					1,
					"insert",
					{
						"characters": "consool"
					},
					"BwAAAAgDAAAAAAAACQMAAAAAAAAAAAAACQMAAAAAAAAKAwAAAAAAAAAAAAAKAwAAAAAAAAsDAAAAAAAAAAAAAAsDAAAAAAAADAMAAAAAAAAAAAAADAMAAAAAAAANAwAAAAAAAAAAAAANAwAAAAAAAA4DAAAAAAAAAAAAAA4DAAAAAAAADwMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAACAMAAAAAAAAIAwAAAAAAAAAAAAAAAPC/"
				],
				[
					424,
					2,
					"left_delete",
					null,
					"AgAAAA4DAAAAAAAADgMAAAAAAAABAAAAbA0DAAAAAAAADQMAAAAAAAABAAAAbw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADwMAAAAAAAAPAwAAAAAAAAAAAAAAAPC/"
				],
				[
					425,
					1,
					"insert",
					{
						"characters": "le.log"
					},
					"BgAAAA0DAAAAAAAADgMAAAAAAAAAAAAADgMAAAAAAAAPAwAAAAAAAAAAAAAPAwAAAAAAABADAAAAAAAAAAAAABADAAAAAAAAEQMAAAAAAAAAAAAAEQMAAAAAAAASAwAAAAAAAAAAAAASAwAAAAAAABMDAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADQMAAAAAAAANAwAAAAAAAAAAAAAAAPC/"
				],
				[
					426,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAABMDAAAAAAAAFQMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEwMAAAAAAAATAwAAAAAAAAAAAAAAAPC/"
				],
				[
					427,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAABQDAAAAAAAAFgMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFAMAAAAAAAAUAwAAAAAAAAAAAAAAAPC/"
				],
				[
					428,
					1,
					"insert",
					{
						"characters": "rect.hsplit"
					},
					"CwAAABUDAAAAAAAAFgMAAAAAAAAAAAAAFgMAAAAAAAAXAwAAAAAAAAAAAAAXAwAAAAAAABgDAAAAAAAAAAAAABgDAAAAAAAAGQMAAAAAAAAAAAAAGQMAAAAAAAAaAwAAAAAAAAAAAAAaAwAAAAAAABsDAAAAAAAAAAAAABsDAAAAAAAAHAMAAAAAAAAAAAAAHAMAAAAAAAAdAwAAAAAAAAAAAAAdAwAAAAAAAB4DAAAAAAAAAAAAAB4DAAAAAAAAHwMAAAAAAAAAAAAAHwMAAAAAAAAgAwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFQMAAAAAAAAVAwAAAAAAAAAAAAAAAPC/"
				],
				[
					430,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAACEDAAAAAAAAIgMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIQMAAAAAAAAhAwAAAAAAAAAAAAAAAPC/"
				],
				[
					431,
					1,
					"insert",
					{
						"characters": " rect.hsplit"
					},
					"DAAAACIDAAAAAAAAIwMAAAAAAAAAAAAAIwMAAAAAAAAkAwAAAAAAAAAAAAAkAwAAAAAAACUDAAAAAAAAAAAAACUDAAAAAAAAJgMAAAAAAAAAAAAAJgMAAAAAAAAnAwAAAAAAAAAAAAAnAwAAAAAAACgDAAAAAAAAAAAAACgDAAAAAAAAKQMAAAAAAAAAAAAAKQMAAAAAAAAqAwAAAAAAAAAAAAAqAwAAAAAAACsDAAAAAAAAAAAAACsDAAAAAAAALAMAAAAAAAAAAAAALAMAAAAAAAAtAwAAAAAAAAAAAAAtAwAAAAAAAC4DAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIgMAAAAAAAAiAwAAAAAAAAAAAAAAAPC/"
				],
				[
					433,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAC8DAAAAAAAAMAMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALwMAAAAAAAAvAwAAAAAAAAAAAAAAAPC/"
				],
				[
					434,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAADADAAAAAAAAMQMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMAMAAAAAAAAwAwAAAAAAAAAAAAAAAPC/"
				],
				[
					436,
					1,
					"cut",
					null,
					"AQAAAAgDAAAAAAAACAMAAAAAAAApAAAAY29uc29sZS5sb2coJ3JlY3QuaHNwbGl0JywgcmVjdC5oc3BsaXQpOwo",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMQMAAAAAAAAIAwAAAAAAAAAAAAAAAAAA"
				],
				[
					437,
					2,
					"paste",
					null,
					"AgAAAAgDAAAAAAAAMQMAAAAAAAAAAAAAMQMAAAAAAABaAwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAACAMAAAAAAAAIAwAAAAAAAAAAAAAAAPC/"
				],
				[
					440,
					1,
					"insert",
					{
						"characters": "v"
					},
					"AgAAAEMDAAAAAAAARAMAAAAAAAAAAAAARAMAAAAAAABEAwAAAAAAAAEAAABo",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQwMAAAAAAABEAwAAAAAAAAAAAAAAAPC/"
				],
				[
					443,
					1,
					"insert",
					{
						"characters": "v"
					},
					"AQAAAFIDAAAAAAAAUwMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUgMAAAAAAABSAwAAAAAAAAAAAAAAAPC/"
				],
				[
					444,
					2,
					"left_delete",
					null,
					"AgAAAFIDAAAAAAAAUgMAAAAAAAABAAAAdlEDAAAAAAAAUQMAAAAAAAABAAAAaA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUwMAAAAAAABTAwAAAAAAAAAAAAAAAPC/"
				],
				[
					445,
					1,
					"insert",
					{
						"characters": "v"
					},
					"AQAAAFEDAAAAAAAAUgMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUQMAAAAAAABRAwAAAAAAAAAAAAAAAPC/"
				],
				[
					459,
					1,
					"insert",
					{
						"characters": "u"
					},
					"AgAAAHIAAAAAAAAAcwAAAAAAAAAAAAAAcwAAAAAAAABzAAAAAAAAAAQAAABtaXNj",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAcgAAAAAAAAB2AAAAAAAAAAAAAAAAAPC/"
				],
				[
					460,
					1,
					"left_delete",
					null,
					"AQAAAHIAAAAAAAAAcgAAAAAAAAABAAAAdQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAcwAAAAAAAABzAAAAAAAAAAAAAAAAAPC/"
				],
				[
					461,
					1,
					"insert",
					{
						"characters": "util"
					},
					"BAAAAHIAAAAAAAAAcwAAAAAAAAAAAAAAcwAAAAAAAAB0AAAAAAAAAAAAAAB0AAAAAAAAAHUAAAAAAAAAAAAAAHUAAAAAAAAAdgAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAcgAAAAAAAAByAAAAAAAAAAAAAAAAAPC/"
				],
				[
					464,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAHYAAAAAAAAAdwAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAdgAAAAAAAAB2AAAAAAAAAAAAAAAAAPC/"
				],
				[
					466,
					1,
					"right_delete",
					null,
					"AQAAAHYAAAAAAAAAdgAAAAAAAAABAAAAcw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAdgAAAAAAAAB2AAAAAAAAAAAAAAAAAPC/"
				],
				[
					468,
					3,
					"left_delete",
					null,
					"AwAAAGkAAAAAAAAAaQAAAAAAAAABAAAAc2gAAAAAAAAAaAAAAAAAAAABAAAAaWcAAAAAAAAAZwAAAAAAAAABAAAAbQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAagAAAAAAAABqAAAAAAAAAAAAAAAAAPC/"
				],
				[
					469,
					1,
					"right_delete",
					null,
					"AQAAAGcAAAAAAAAAZwAAAAAAAAABAAAAYw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZwAAAAAAAABnAAAAAAAAAAAAAAAAAPC/"
				],
				[
					470,
					1,
					"insert",
					{
						"characters": "util"
					},
					"BAAAAGcAAAAAAAAAaAAAAAAAAAAAAAAAaAAAAAAAAABpAAAAAAAAAAAAAABpAAAAAAAAAGoAAAAAAAAAAAAAAGoAAAAAAAAAawAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZwAAAAAAAABnAAAAAAAAAAAAAAAAAPC/"
				],
				[
					481,
					1,
					"",
					null,
					"AQAAAHcDAAAAAAAAfAMAAAAAAAAFAAAAbWlzYy4",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAdwMAAAAAAAB8AwAAAAAAAAAAAAAAAPC/"
				],
				[
					482,
					1,
					"",
					null,
					"AQAAANADAAAAAAAA1QMAAAAAAAAFAAAAbWlzYy4",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0AMAAAAAAADVAwAAAAAAAAAAAAAAAPC/"
				],
				[
					491,
					1,
					"insert",
					{
						"characters": "{range{}"
					},
					"CAAAAGIAAAAAAAAAYwAAAAAAAAAAAAAAYwAAAAAAAABkAAAAAAAAAAAAAABkAAAAAAAAAGUAAAAAAAAAAAAAAGUAAAAAAAAAZgAAAAAAAAAAAAAAZgAAAAAAAABnAAAAAAAAAAAAAABnAAAAAAAAAGgAAAAAAAAAAAAAAGgAAAAAAAAAaQAAAAAAAAAAAAAAaQAAAAAAAABqAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAYgAAAAAAAABiAAAAAAAAAAAAAAAAAPC/"
				],
				[
					492,
					2,
					"left_delete",
					null,
					"AgAAAGkAAAAAAAAAaQAAAAAAAAABAAAAfWgAAAAAAAAAaAAAAAAAAAABAAAAew",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAagAAAAAAAABqAAAAAAAAAAAAAAAAAPC/"
				],
				[
					493,
					1,
					"insert",
					{
						"characters": "}"
					},
					"AQAAAGgAAAAAAAAAaQAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAaAAAAAAAAABoAAAAAAAAAAAAAAAAAPC/"
				],
				[
					494,
					9,
					"right_delete",
					null,
					"CQAAAGkAAAAAAAAAaQAAAAAAAAABAAAAKmkAAAAAAAAAaQAAAAAAAAABAAAAIGkAAAAAAAAAaQAAAAAAAAABAAAAYWkAAAAAAAAAaQAAAAAAAAABAAAAc2kAAAAAAAAAaQAAAAAAAAABAAAAIGkAAAAAAAAAaQAAAAAAAAABAAAAdWkAAAAAAAAAaQAAAAAAAAABAAAAdGkAAAAAAAAAaQAAAAAAAAABAAAAaWkAAAAAAAAAaQAAAAAAAAABAAAAbA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAaQAAAAAAAABpAAAAAAAAAAAAAAAAAPC/"
				],
				[
					505,
					2,
					"right_delete",
					null,
					"AgAAAHUDAAAAAAAAdQMAAAAAAAAEAAAAdXRpbHUDAAAAAAAAdQMAAAAAAAABAAAALg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAdQMAAAAAAAB5AwAAAAAAAAAAAAAAAPC/"
				],
				[
					508,
					5,
					"right_delete",
					null,
					"BQAAAMkDAAAAAAAAyQMAAAAAAAABAAAAdckDAAAAAAAAyQMAAAAAAAABAAAAdMkDAAAAAAAAyQMAAAAAAAABAAAAackDAAAAAAAAyQMAAAAAAAABAAAAbMkDAAAAAAAAyQMAAAAAAAABAAAALg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAyQMAAAAAAADJAwAAAAAAAAAAAAAAAPC/"
				],
				[
					518,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AgAAANkEAAAAAAAA2gQAAAAAAAAAAAAA2gQAAAAAAADaBAAAAAAAAAEAAAAz",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2QQAAAAAAADaBAAAAAAAAAAAAAAAAPC/"
				],
				[
					526,
					1,
					"right_delete",
					null,
					"AQAAALgEAAAAAAAAuAQAAAAAAAAYAAAAYnJlYWtMZW5ndGg6IDEwMCwKICAgICAg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAuAQAAAAAAADQBAAAAAAAAAAAAAAAAE5A"
				],
				[
					531,
					1,
					"left_delete",
					null,
					"AQAAAMEEAAAAAAAAwQQAAAAAAAABAAAAMA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwgQAAAAAAADCBAAAAAAAAAAAAAAAAPC/"
				],
				[
					532,
					1,
					"insert",
					{
						"characters": "false"
					},
					"BQAAAMEEAAAAAAAAwgQAAAAAAAAAAAAAwgQAAAAAAADDBAAAAAAAAAAAAADDBAAAAAAAAMQEAAAAAAAAAAAAAMQEAAAAAAAAxQQAAAAAAAAAAAAAxQQAAAAAAADGBAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwQQAAAAAAADBBAAAAAAAAAAAAAAAAPC/"
				],
				[
					549,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AgAAAMEEAAAAAAAAwgQAAAAAAAAAAAAAwgQAAAAAAADCBAAAAAAAAAUAAABmYWxzZQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwQQAAAAAAADGBAAAAAAAAAAAAAAAAPC/"
				],
				[
					563,
					1,
					"insert",
					{
						"characters": "console.config"
					},
					"DgAAAE0IAAAAAAAATggAAAAAAAAAAAAATggAAAAAAABPCAAAAAAAAAAAAABPCAAAAAAAAFAIAAAAAAAAAAAAAFAIAAAAAAAAUQgAAAAAAAAAAAAAUQgAAAAAAABSCAAAAAAAAAAAAABSCAAAAAAAAFMIAAAAAAAAAAAAAFMIAAAAAAAAVAgAAAAAAAAAAAAAVAgAAAAAAABVCAAAAAAAAAAAAABVCAAAAAAAAFYIAAAAAAAAAAAAAFYIAAAAAAAAVwgAAAAAAAAAAAAAVwgAAAAAAABYCAAAAAAAAAAAAABYCAAAAAAAAFkIAAAAAAAAAAAAAFkIAAAAAAAAWggAAAAAAAAAAAAAWggAAAAAAABbCAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATQgAAAAAAABNCAAAAAAAAAAAAAAAwGxA"
				],
				[
					564,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAFsIAAAAAAAAXQgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWwgAAAAAAABbCAAAAAAAAAAAAAAAAPC/"
				],
				[
					565,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAFwIAAAAAAAAXggAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXAgAAAAAAABcCAAAAAAAAAAAAAAAAPC/"
				],
				[
					566,
					1,
					"insert",
					{
						"characters": " compact:"
					},
					"CQAAAF0IAAAAAAAAXggAAAAAAAAAAAAAXggAAAAAAABfCAAAAAAAAAAAAABfCAAAAAAAAGAIAAAAAAAAAAAAAGAIAAAAAAAAYQgAAAAAAAAAAAAAYQgAAAAAAABiCAAAAAAAAAAAAABiCAAAAAAAAGMIAAAAAAAAAAAAAGMIAAAAAAAAZAgAAAAAAAAAAAAAZAgAAAAAAABlCAAAAAAAAAAAAABlCAAAAAAAAGYIAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXQgAAAAAAABdCAAAAAAAAAAAAAAAAPC/"
				],
				[
					567,
					1,
					"insert",
					{
						"characters": " 0"
					},
					"AgAAAGYIAAAAAAAAZwgAAAAAAAAAAAAAZwgAAAAAAABoCAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZggAAAAAAABmCAAAAAAAAAAAAAAAAPC/"
				],
				[
					568,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGgIAAAAAAAAaQgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAaAgAAAAAAABoCAAAAAAAAAAAAAAAAPC/"
				],
				[
					570,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAGsIAAAAAAAAbAgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAawgAAAAAAABrCAAAAAAAAAAAAAAAAPC/"
				],
				[
					573,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAGwIAAAAAAAAbggAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbAgAAAAAAABsCAAAAAAAAAAAAAAAAPC/"
				],
				[
					649,
					1,
					"insert",
					{
						"characters": "size.height"
					},
					"DAAAAH0DAAAAAAAAfgMAAAAAAAAAAAAAfgMAAAAAAAB+AwAAAAAAAAIAAAA0OH4DAAAAAAAAfwMAAAAAAAAAAAAAfwMAAAAAAACAAwAAAAAAAAAAAACAAwAAAAAAAIEDAAAAAAAAAAAAAIEDAAAAAAAAggMAAAAAAAAAAAAAggMAAAAAAACDAwAAAAAAAAAAAACDAwAAAAAAAIQDAAAAAAAAAAAAAIQDAAAAAAAAhQMAAAAAAAAAAAAAhQMAAAAAAACGAwAAAAAAAAAAAACGAwAAAAAAAIcDAAAAAAAAAAAAAIcDAAAAAAAAiAMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAfQMAAAAAAAB/AwAAAAAAAAAAAAAAAPC/"
				],
				[
					653,
					2,
					"right_delete",
					null,
					"AgAAANoDAAAAAAAA2gMAAAAAAAABAAAAONoDAAAAAAAA2gMAAAAAAAABAAAANA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2gMAAAAAAADaAwAAAAAAAAAAAAAAAPC/"
				],
				[
					654,
					1,
					"insert",
					{
						"characters": "sitze"
					},
					"BQAAANoDAAAAAAAA2wMAAAAAAAAAAAAA2wMAAAAAAADcAwAAAAAAAAAAAADcAwAAAAAAAN0DAAAAAAAAAAAAAN0DAAAAAAAA3gMAAAAAAAAAAAAA3gMAAAAAAADfAwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2gMAAAAAAADaAwAAAAAAAAAAAAAAAPC/"
				],
				[
					655,
					3,
					"left_delete",
					null,
					"AwAAAN4DAAAAAAAA3gMAAAAAAAABAAAAZd0DAAAAAAAA3QMAAAAAAAABAAAAetwDAAAAAAAA3AMAAAAAAAABAAAAdA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3wMAAAAAAADfAwAAAAAAAAAAAAAAAPC/"
				],
				[
					656,
					1,
					"insert",
					{
						"characters": "ze.width"
					},
					"CAAAANwDAAAAAAAA3QMAAAAAAAAAAAAA3QMAAAAAAADeAwAAAAAAAAAAAADeAwAAAAAAAN8DAAAAAAAAAAAAAN8DAAAAAAAA4AMAAAAAAAAAAAAA4AMAAAAAAADhAwAAAAAAAAAAAADhAwAAAAAAAOIDAAAAAAAAAAAAAOIDAAAAAAAA4wMAAAAAAAAAAAAA4wMAAAAAAADkAwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3AMAAAAAAADcAwAAAAAAAAAAAAAAAPC/"
				],
				[
					664,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAABsIAAAAAAAAHAgAAAAAAAAAAAAAHAgAAAAAAAAdCAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGwgAAAAAAAAbCAAAAAAAAAAAAAAAYH1A"
				],
				[
					666,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAABwIAAAAAAAAHQgAAAAAAAAAAAAAHQgAAAAAAAAeCAAAAAAAAAAAAAAeCAAAAAAAAB8IAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHAgAAAAAAAAcCAAAAAAAAAAAAAAAAAAA"
				],
				[
					667,
					1,
					"insert",
					{
						"characters": " middle"
					},
					"BwAAAB8IAAAAAAAAIAgAAAAAAAAAAAAAIAgAAAAAAAAhCAAAAAAAAAAAAAAhCAAAAAAAACIIAAAAAAAAAAAAACIIAAAAAAAAIwgAAAAAAAAAAAAAIwgAAAAAAAAkCAAAAAAAAAAAAAAkCAAAAAAAACUIAAAAAAAAAAAAACUIAAAAAAAAJggAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHwgAAAAAAAAfCAAAAAAAAAAAAAAAAPC/"
				],
				[
					668,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAACYIAAAAAAAAJwgAAAAAAAAAAAAAJwgAAAAAAAAoCAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJggAAAAAAAAmCAAAAAAAAAAAAAAAAPC/"
				],
				[
					669,
					1,
					"insert",
					{
						"characters": "  "
					},
					"AgAAACgIAAAAAAAAKQgAAAAAAAAAAAAAKQgAAAAAAAAqCAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKAgAAAAAAAAoCAAAAAAAAAAAAAAAAPC/"
				],
				[
					670,
					1,
					"left_delete",
					null,
					"AQAAACkIAAAAAAAAKQgAAAAAAAABAAAAIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKggAAAAAAAAqCAAAAAAAAAAAAAAAAPC/"
				],
				[
					672,
					1,
					"insert",
					{
						"characters": "\nlet"
					},
					"BAAAABsIAAAAAAAAHAgAAAAAAAAAAAAAHAgAAAAAAAAdCAAAAAAAAAAAAAAdCAAAAAAAAB4IAAAAAAAAAAAAAB4IAAAAAAAAHwgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGwgAAAAAAAAbCAAAAAAAAAAAAAAAQGBA"
				],
				[
					673,
					1,
					"insert",
					{
						"characters": " mrec"
					},
					"BQAAAB8IAAAAAAAAIAgAAAAAAAAAAAAAIAgAAAAAAAAhCAAAAAAAAAAAAAAhCAAAAAAAACIIAAAAAAAAAAAAACIIAAAAAAAAIwgAAAAAAAAAAAAAIwgAAAAAAAAkCAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHwgAAAAAAAAfCAAAAAAAAAAAAAAAAPC/"
				],
				[
					674,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAACQIAAAAAAAAJQgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJAgAAAAAAAAkCAAAAAAAAAAAAAAAAPC/"
				],
				[
					675,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAACUIAAAAAAAAJggAAAAAAAAAAAAAJggAAAAAAAAnCAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJQgAAAAAAAAlCAAAAAAAAAAAAAAAAPC/"
				],
				[
					676,
					1,
					"insert",
					{
						"characters": " new"
					},
					"BAAAACcIAAAAAAAAKAgAAAAAAAAAAAAAKAgAAAAAAAApCAAAAAAAAAAAAAApCAAAAAAAACoIAAAAAAAAAAAAACoIAAAAAAAAKwgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJwgAAAAAAAAnCAAAAAAAAAAAAAAAAPC/"
				],
				[
					677,
					1,
					"insert",
					{
						"characters": " c."
					},
					"AwAAACsIAAAAAAAALAgAAAAAAAAAAAAALAgAAAAAAAAtCAAAAAAAAAAAAAAtCAAAAAAAAC4IAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKwgAAAAAAAArCAAAAAAAAAAAAAAAAPC/"
				],
				[
					678,
					1,
					"left_delete",
					null,
					"AQAAAC0IAAAAAAAALQgAAAAAAAABAAAALg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALggAAAAAAAAuCAAAAAAAAAAAAAAAAPC/"
				],
				[
					679,
					1,
					"insert",
					{
						"characters": "v.Rect"
					},
					"BgAAAC0IAAAAAAAALggAAAAAAAAAAAAALggAAAAAAAAvCAAAAAAAAAAAAAAvCAAAAAAAADAIAAAAAAAAAAAAADAIAAAAAAAAMQgAAAAAAAAAAAAAMQgAAAAAAAAyCAAAAAAAAAAAAAAyCAAAAAAAADMIAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALQgAAAAAAAAtCAAAAAAAAAAAAAAAAPC/"
				],
				[
					680,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADMIAAAAAAAANQgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMwgAAAAAAAAzCAAAAAAAAAAAAAAAAPC/"
				],
				[
					681,
					1,
					"insert",
					{
						"characters": "0,12,"
					},
					"BQAAADQIAAAAAAAANQgAAAAAAAAAAAAANQgAAAAAAAA2CAAAAAAAAAAAAAA2CAAAAAAAADcIAAAAAAAAAAAAADcIAAAAAAAAOAgAAAAAAAAAAAAAOAgAAAAAAAA5CAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANAgAAAAAAAA0CAAAAAAAAAAAAAAAAPC/"
				],
				[
					682,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADkIAAAAAAAAOggAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOQgAAAAAAAA5CAAAAAAAAAAAAAAAAPC/"
				],
				[
					683,
					1,
					"left_delete",
					null,
					"AQAAADkIAAAAAAAAOQgAAAAAAAABAAAAIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOggAAAAAAAA6CAAAAAAAAAAAAAAAAPC/"
				],
				[
					684,
					1,
					"insert",
					{
						"characters": "84,1"
					},
					"BAAAADkIAAAAAAAAOggAAAAAAAAAAAAAOggAAAAAAAA7CAAAAAAAAAAAAAA7CAAAAAAAADwIAAAAAAAAAAAAADwIAAAAAAAAPQgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOQgAAAAAAAA5CAAAAAAAAAAAAAAAAPC/"
				],
				[
					685,
					1,
					"left_delete",
					null,
					"AQAAADwIAAAAAAAAPAgAAAAAAAABAAAAMQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPQgAAAAAAAA9CAAAAAAAAAAAAAAAAPC/"
				],
				[
					686,
					1,
					"insert",
					{
						"characters": "24"
					},
					"AgAAADwIAAAAAAAAPQgAAAAAAAAAAAAAPQgAAAAAAAA+CAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPAgAAAAAAAA8CAAAAAAAAAAAAAAAAPC/"
				],
				[
					688,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAD8IAAAAAAAAQAgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPwgAAAAAAAA/CAAAAAAAAAAAAAAAAPC/"
				],
				[
					692,
					1,
					"insert",
					{
						"characters": "img"
					},
					"AwAAAE4IAAAAAAAATwgAAAAAAAAAAAAATwgAAAAAAABQCAAAAAAAAAAAAABQCAAAAAAAAFEIAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATggAAAAAAABOCAAAAAAAAAAAAAAAgHZA"
				],
				[
					693,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAFEIAAAAAAAAUwgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUQgAAAAAAABRCAAAAAAAAAAAAAAAAPC/"
				],
				[
					694,
					1,
					"insert",
					{
						"characters": "mrect"
					},
					"BQAAAFIIAAAAAAAAUwgAAAAAAAAAAAAAUwgAAAAAAABUCAAAAAAAAAAAAABUCAAAAAAAAFUIAAAAAAAAAAAAAFUIAAAAAAAAVggAAAAAAAAAAAAAVggAAAAAAABXCAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUggAAAAAAABSCAAAAAAAAAAAAAAAAPC/"
				],
				[
					696,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAFgIAAAAAAAAWQgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWAgAAAAAAABYCAAAAAAAAAAAAAAAAPC/"
				],
				[
					710,
					1,
					"paste",
					null,
					"AgAAAHoIAAAAAAAAgAgAAAAAAAAAAAAAgAgAAAAAAACACAAAAAAAAAMAAABpbWc",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAeggAAAAAAAB9CAAAAAAAAAAAAAAAAPC/"
				],
				[
					734,
					1,
					"insert",
					{
						"characters": "yield"
					},
					"BQAAAPcDAAAAAAAA+AMAAAAAAAAAAAAA+AMAAAAAAAD5AwAAAAAAAAAAAAD5AwAAAAAAAPoDAAAAAAAAAAAAAPoDAAAAAAAA+wMAAAAAAAAAAAAA+wMAAAAAAAD8AwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9wMAAAAAAAD3AwAAAAAAAAAAAAAAAPC/"
				],
				[
					735,
					1,
					"insert",
					{
						"characters": " cols;"
					},
					"BgAAAPwDAAAAAAAA/QMAAAAAAAAAAAAA/QMAAAAAAAD+AwAAAAAAAAAAAAD+AwAAAAAAAP8DAAAAAAAAAAAAAP8DAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAABBAAAAAAAAAAAAAABBAAAAAAAAAIEAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/AMAAAAAAAD8AwAAAAAAAAAAAAAAAPC/"
				],
				[
					737,
					1,
					"join_lines",
					null,
					"AwAAABsEAAAAAAAAGwQAAAAAAAABAAAAChsEAAAAAAAAGwQAAAAAAAAGAAAAICAgICAgGwQAAAAAAAAcBAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAwQAAAAAAAADBAAAAAAAAAAAAAAAAPC/"
				],
				[
					739,
					1,
					"insert",
					{
						"characters": "/7"
					},
					"AgAAAAcEAAAAAAAACAQAAAAAAAAAAAAACAQAAAAAAAAJBAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABwQAAAAAAAAHBAAAAAAAAAAAAAAAAERA"
				],
				[
					742,
					1,
					"left_delete",
					null,
					"AQAAAAgEAAAAAAAACAQAAAAAAAABAAAANw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAACQQAAAAAAAAJBAAAAAAAAAAAAAAAAPC/"
				],
				[
					743,
					1,
					"insert",
					{
						"characters": "/("
					},
					"AgAAAAgEAAAAAAAACQQAAAAAAAAAAAAACQQAAAAAAAAKBAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAACAQAAAAAAAAIBAAAAAAAAAAAAAAAAPC/"
				],
				[
					744,
					1,
					"left_delete",
					null,
					"AQAAAAkEAAAAAAAACQQAAAAAAAABAAAAKA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAACgQAAAAAAAAKBAAAAAAAAAAAAAAAAPC/"
				],
				[
					794,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAAJsDAAAAAAAAnAMAAAAAAAAAAAAAnAMAAAAAAACdAwAAAAAAAAAAAACdAwAAAAAAAJ4DAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmwMAAAAAAACbAwAAAAAAAAAAAAAAAPC/"
				],
				[
					795,
					1,
					"insert",
					{
						"characters": " y=0,"
					},
					"BQAAAJ4DAAAAAAAAnwMAAAAAAAAAAAAAnwMAAAAAAACgAwAAAAAAAAAAAACgAwAAAAAAAKEDAAAAAAAAAAAAAKEDAAAAAAAAogMAAAAAAAAAAAAAogMAAAAAAACjAwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAngMAAAAAAACeAwAAAAAAAAAAAAAAAPC/"
				],
				[
					796,
					1,
					"left_delete",
					null,
					"AQAAAKIDAAAAAAAAogMAAAAAAAABAAAALA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAowMAAAAAAACjAwAAAAAAAAAAAAAAAPC/"
				],
				[
					797,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAKIDAAAAAAAAowMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAogMAAAAAAACiAwAAAAAAAAAAAAAAAPC/"
				],
				[
					801,
					1,
					"insert_snippet",
					{
						"contents": "\n${TM_CURRENT_LINE/^\\s*((?:#|\\/\\/[\\/!]?)\\s*).*/$1/}"
					},
					"AQAAADAEAAAAAAAANwQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMAQAAAAAAAAwBAAAAAAAAP///////+9/"
				],
				[
					802,
					1,
					"insert",
					{
						"characters": "y"
					},
					"AQAAADcEAAAAAAAAOAQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANwQAAAAAAAA3BAAAAAAAAAAAAAAAAPC/"
				],
				[
					803,
					3,
					"left_delete",
					null,
					"AwAAADcEAAAAAAAANwQAAAAAAAABAAAAeTYEAAAAAAAANgQAAAAAAAABAAAALzUEAAAAAAAANQQAAAAAAAABAAAALw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOAQAAAAAAAA4BAAAAAAAAAAAAAAAAPC/"
				],
				[
					804,
					1,
					"insert",
					{
						"characters": "y++;"
					},
					"BAAAADUEAAAAAAAANgQAAAAAAAAAAAAANgQAAAAAAAA3BAAAAAAAAAAAAAA3BAAAAAAAADgEAAAAAAAAAAAAADgEAAAAAAAAOQQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANQQAAAAAAAA1BAAAAAAAAAAAAAAAAPC/"
				],
				[
					807,
					1,
					"insert",
					{
						"characters": "\nlet"
					},
					"BgAAALwDAAAAAAAAvQMAAAAAAAAAAAAAvQMAAAAAAAC/AwAAAAAAAAAAAAC/AwAAAAAAAMEDAAAAAAAAAAAAAMEDAAAAAAAAwgMAAAAAAAAAAAAAwgMAAAAAAADDAwAAAAAAAAAAAADDAwAAAAAAAMQDAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvAMAAAAAAAC8AwAAAAAAAP///////+9/"
				],
				[
					808,
					1,
					"insert",
					{
						"characters": " x=0;"
					},
					"BQAAAMQDAAAAAAAAxQMAAAAAAAAAAAAAxQMAAAAAAADGAwAAAAAAAAAAAADGAwAAAAAAAMcDAAAAAAAAAAAAAMcDAAAAAAAAyAMAAAAAAAAAAAAAyAMAAAAAAADJAwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxAMAAAAAAADEAwAAAAAAAAAAAAAAAPC/"
				],
				[
					814,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAAsEAAAAAAAADAQAAAAAAAAAAAAADAQAAAAAAAAQBAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAACwQAAAAAAAALBAAAAAAAAP///////+9/"
				],
				[
					824,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AwAAABEEAAAAAAAAEgQAAAAAAAAAAAAADAQAAAAAAAAMBAAAAAAAAAQAAAAgICAgDgQAAAAAAAAPBAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEQQAAAAAAAARBAAAAAAAAAAAAAAAAPC/"
				],
				[
					827,
					2,
					"right_delete",
					null,
					"AgAAAB8EAAAAAAAAHwQAAAAAAAABAAAALx8EAAAAAAAAHwQAAAAAAAABAAAALw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHwQAAAAAAAAfBAAAAAAAAAAAAAAAAPC/"
				],
				[
					830,
					1,
					"insert",
					{
						"characters": "[y"
					},
					"AgAAADoEAAAAAAAAOwQAAAAAAAAAAAAAOwQAAAAAAAA8BAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOgQAAAAAAAA6BAAAAAAAAAAAAAAAAPC/"
				],
				[
					831,
					1,
					"insert",
					{
						"characters": "x"
					},
					"AQAAADwEAAAAAAAAPQQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPAQAAAAAAAA8BAAAAAAAAAAAAAAAAPC/"
				],
				[
					832,
					1,
					"left_delete",
					null,
					"AQAAADwEAAAAAAAAPAQAAAAAAAABAAAAeA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPQQAAAAAAAA9BAAAAAAAAAAAAAAAAPC/"
				],
				[
					833,
					1,
					"insert",
					{
						"characters": ",x,"
					},
					"AwAAADwEAAAAAAAAPQQAAAAAAAAAAAAAPQQAAAAAAAA+BAAAAAAAAAAAAAA+BAAAAAAAAD8EAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPAQAAAAAAAA8BAAAAAAAAAAAAAAAAPC/"
				],
				[
					835,
					1,
					"insert",
					{
						"characters": "]"
					},
					"AQAAAEIEAAAAAAAAQwQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQgQAAAAAAABCBAAAAAAAAAAAAAAAAPC/"
				],
				[
					841,
					1,
					"insert",
					{
						"characters": "{"
					},
					"AQAAADQEAAAAAAAANQQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANAQAAAAAAAA0BAAAAAAAAAAAAAAAAPC/"
				],
				[
					842,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADUEAAAAAAAANgQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANQQAAAAAAAA1BAAAAAAAAAAAAAAAAPC/"
				],
				[
					844,
					1,
					"insert",
					{
						"characters": " y"
					},
					"AgAAAEYEAAAAAAAARwQAAAAAAAAAAAAARwQAAAAAAABIBAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARgQAAAAAAABGBAAAAAAAAP///////+9/"
				],
				[
					845,
					1,
					"left_delete",
					null,
					"AQAAAEcEAAAAAAAARwQAAAAAAAABAAAAeQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASAQAAAAAAABIBAAAAAAAAAAAAAAAAPC/"
				],
				[
					846,
					1,
					"insert",
					{
						"characters": "x::"
					},
					"AwAAAEcEAAAAAAAASAQAAAAAAAAAAAAASAQAAAAAAABJBAAAAAAAAAAAAABJBAAAAAAAAEoEAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARwQAAAAAAABHBAAAAAAAAAAAAAAAAPC/"
				],
				[
					847,
					2,
					"left_delete",
					null,
					"AgAAAEkEAAAAAAAASQQAAAAAAAABAAAAOkgEAAAAAAAASAQAAAAAAAABAAAAOg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASgQAAAAAAABKBAAAAAAAAAAAAAAAAPC/"
				],
				[
					848,
					1,
					"insert",
					{
						"characters": "++;"
					},
					"AwAAAEgEAAAAAAAASQQAAAAAAAAAAAAASQQAAAAAAABKBAAAAAAAAAAAAABKBAAAAAAAAEsEAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASAQAAAAAAABIBAAAAAAAAAAAAAAAAPC/"
				],
				[
					849,
					1,
					"insert",
					{
						"characters": " }"
					},
					"AgAAAEsEAAAAAAAATAQAAAAAAAAAAAAATAQAAAAAAABNBAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASwQAAAAAAABLBAAAAAAAAAAAAAAAAPC/"
				],
				[
					853,
					1,
					"insert",
					{
						"characters": "["
					},
					"AQAAAD0EAAAAAAAAPgQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPQQAAAAAAAA9BAAAAAAAAAAAAAAAAPC/"
				],
				[
					855,
					1,
					"insert",
					{
						"characters": "]"
					},
					"AQAAAEEEAAAAAAAAQgQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQQQAAAAAAABBBAAAAAAAAAAAAAAAAPC/"
				],
				[
					867,
					1,
					"insert",
					{
						"characters": "new"
					},
					"AwAAAKEIAAAAAAAAoggAAAAAAAAAAAAAoggAAAAAAACjCAAAAAAAAAAAAACjCAAAAAAAAKQIAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAoQgAAAAAAAChCAAAAAAAAAAAAAAAAPC/"
				],
				[
					868,
					1,
					"insert",
					{
						"characters": " Map("
					},
					"BQAAAKQIAAAAAAAApQgAAAAAAAAAAAAApQgAAAAAAACmCAAAAAAAAAAAAACmCAAAAAAAAKcIAAAAAAAAAAAAAKcIAAAAAAAAqAgAAAAAAAAAAAAAqAgAAAAAAACpCAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApAgAAAAAAACkCAAAAAAAAAAAAAAAAPC/"
				],
				[
					869,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAKkIAAAAAAAAqggAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAqQgAAAAAAACpCAAAAAAAAAAAAAAAAPC/"
				],
				[
					870,
					1,
					"left_delete",
					null,
					"AQAAAKkIAAAAAAAAqQgAAAAAAAABAAAALg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAqggAAAAAAACqCAAAAAAAAAAAAAAAAPC/"
				],
				[
					872,
					1,
					"left_delete",
					null,
					"AQAAAMYIAAAAAAAAxggAAAAAAAABAAAAOw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxwgAAAAAAADHCAAAAAAAAP///////+9/"
				],
				[
					873,
					1,
					"insert",
					{
						"characters": ");"
					},
					"AgAAAMYIAAAAAAAAxwgAAAAAAAAAAAAAxwgAAAAAAADICAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxggAAAAAAADGCAAAAAAAAAAAAAAAAPC/"
				],
				[
					879,
					1,
					"insert",
					{
						"characters": ".map"
					},
					"BAAAAMYIAAAAAAAAxwgAAAAAAAAAAAAAxwgAAAAAAADICAAAAAAAAAAAAADICAAAAAAAAMkIAAAAAAAAAAAAAMkIAAAAAAAAyggAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxggAAAAAAADGCAAAAAAAAAAAAAAAAPC/"
				],
				[
					880,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAMoIAAAAAAAAzAgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAyggAAAAAAADKCAAAAAAAAAAAAAAAAPC/"
				],
				[
					881,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAAMsIAAAAAAAAzAgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAywgAAAAAAADLCAAAAAAAAAAAAAAAAPC/"
				],
				[
					882,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAMwIAAAAAAAAzggAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAzAgAAAAAAADMCAAAAAAAAAAAAAAAAPC/"
				],
				[
					883,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAMwIAAAAAAAAzAgAAAAAAAABAAAAKMwIAAAAAAAAzAgAAAAAAAABAAAAKQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAzQgAAAAAAADNCAAAAAAAAAAAAAAAAPC/"
				],
				[
					884,
					1,
					"left_delete",
					null,
					"AQAAAMsIAAAAAAAAywgAAAAAAAABAAAALw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAzAgAAAAAAADMCAAAAAAAAAAAAAAAAPC/"
				],
				[
					885,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAMsIAAAAAAAAzQgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAywgAAAAAAADLCAAAAAAAAAAAAAAAAPC/"
				],
				[
					886,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAMwIAAAAAAAAzggAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAzAgAAAAAAADMCAAAAAAAAAAAAAAAAPC/"
				],
				[
					887,
					1,
					"insert",
					{
						"characters": "k,v"
					},
					"AwAAAM0IAAAAAAAAzggAAAAAAAAAAAAAzggAAAAAAADPCAAAAAAAAAAAAADPCAAAAAAAANAIAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAzQgAAAAAAADNCAAAAAAAAAAAAAAAAPC/"
				],
				[
					889,
					1,
					"insert",
					{
						"characters": " =>"
					},
					"AwAAANIIAAAAAAAA0wgAAAAAAAAAAAAA0wgAAAAAAADUCAAAAAAAAAAAAADUCAAAAAAAANUIAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0ggAAAAAAADSCAAAAAAAAAAAAAAAAPC/"
				],
				[
					890,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANUIAAAAAAAA1ggAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1QgAAAAAAADVCAAAAAAAAAAAAAAAAPC/"
				],
				[
					891,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAANYIAAAAAAAA2AgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1ggAAAAAAADWCAAAAAAAAAAAAAAAAPC/"
				],
				[
					892,
					1,
					"insert",
					{
						"characters": "k+"
					},
					"AgAAANcIAAAAAAAA2AgAAAAAAAAAAAAA2AgAAAAAAADZCAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1wgAAAAAAADXCAAAAAAAAAAAAAAAAPC/"
				],
				[
					893,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAANkIAAAAAAAA2wgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2QgAAAAAAADZCAAAAAAAAAAAAAAAAPC/"
				],
				[
					895,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAANsIAAAAAAAA3AgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2wgAAAAAAADbCAAAAAAAAAAAAAAAAPC/"
				],
				[
					896,
					1,
					"insert",
					{
						"characters": " v"
					},
					"AgAAANwIAAAAAAAA3QgAAAAAAAAAAAAA3QgAAAAAAADeCAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3AgAAAAAAADcCAAAAAAAAAAAAAAAAPC/"
				],
				[
					912,
					1,
					"insert",
					{
						"characters": " ?"
					},
					"AgAAANkCAAAAAAAA2gIAAAAAAAAAAAAA2gIAAAAAAADbAgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2QIAAAAAAADZAgAAAAAAAAAAAAAAAPC/"
				],
				[
					913,
					1,
					"insert",
					{
						"characters": " new"
					},
					"BAAAANsCAAAAAAAA3AIAAAAAAAAAAAAA3AIAAAAAAADdAgAAAAAAAAAAAADdAgAAAAAAAN4CAAAAAAAAAAAAAN4CAAAAAAAA3wIAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2wIAAAAAAADbAgAAAAAAAAAAAAAAAPC/"
				],
				[
					914,
					5,
					"left_delete",
					null,
					"BQAAAN4CAAAAAAAA3gIAAAAAAAABAAAAd90CAAAAAAAA3QIAAAAAAAABAAAAZdwCAAAAAAAA3AIAAAAAAAABAAAAbtsCAAAAAAAA2wIAAAAAAAABAAAAINoCAAAAAAAA2gIAAAAAAAABAAAAPw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3wIAAAAAAADfAgAAAAAAAAAAAAAAAPC/"
				],
				[
					915,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAANoCAAAAAAAA2wIAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2gIAAAAAAADaAgAAAAAAAAAAAAAAAPC/"
				],
				[
					916,
					1,
					"insert",
					{
						"characters": " ew"
					},
					"AwAAANsCAAAAAAAA3AIAAAAAAAAAAAAA3AIAAAAAAADdAgAAAAAAAAAAAADdAgAAAAAAAN4CAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2wIAAAAAAADbAgAAAAAAAAAAAAAAAPC/"
				],
				[
					917,
					2,
					"left_delete",
					null,
					"AgAAAN0CAAAAAAAA3QIAAAAAAAABAAAAd9wCAAAAAAAA3AIAAAAAAAABAAAAZQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3gIAAAAAAADeAgAAAAAAAAAAAAAAAPC/"
				],
				[
					918,
					1,
					"insert",
					{
						"characters": "cv.Size"
					},
					"BwAAANwCAAAAAAAA3QIAAAAAAAAAAAAA3QIAAAAAAADeAgAAAAAAAAAAAADeAgAAAAAAAN8CAAAAAAAAAAAAAN8CAAAAAAAA4AIAAAAAAAAAAAAA4AIAAAAAAADhAgAAAAAAAAAAAADhAgAAAAAAAOICAAAAAAAAAAAAAOICAAAAAAAA4wIAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3AIAAAAAAADcAgAAAAAAAAAAAAAAAPC/"
				],
				[
					919,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAOMCAAAAAAAA5QIAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4wIAAAAAAADjAgAAAAAAAAAAAAAAAPC/"
				],
				[
					920,
					1,
					"insert",
					{
						"characters": "14,12"
					},
					"BQAAAOQCAAAAAAAA5QIAAAAAAAAAAAAA5QIAAAAAAADmAgAAAAAAAAAAAADmAgAAAAAAAOcCAAAAAAAAAAAAAOcCAAAAAAAA6AIAAAAAAAAAAAAA6AIAAAAAAADpAgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5AIAAAAAAADkAgAAAAAAAAAAAAAAAPC/"
				],
				[
					923,
					1,
					"insert",
					{
						"characters": "seg.height"
					},
					"CgAAAJoDAAAAAAAAmwMAAAAAAAAAAAAAmwMAAAAAAACcAwAAAAAAAAAAAACcAwAAAAAAAJ0DAAAAAAAAAAAAAJ0DAAAAAAAAngMAAAAAAAAAAAAAngMAAAAAAACfAwAAAAAAAAAAAACfAwAAAAAAAKADAAAAAAAAAAAAAKADAAAAAAAAoQMAAAAAAAAAAAAAoQMAAAAAAACiAwAAAAAAAAAAAACiAwAAAAAAAKMDAAAAAAAAAAAAAKMDAAAAAAAApAMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmgMAAAAAAACaAwAAAAAAAAAAAAAAAH5A"
				],
				[
					924,
					2,
					"right_delete",
					null,
					"AgAAAKQDAAAAAAAApAMAAAAAAAABAAAAMaQDAAAAAAAApAMAAAAAAAABAAAAMg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApAMAAAAAAACkAwAAAAAAAAAAAAAAAPC/"
				],
				[
					935,
					1,
					"insert",
					{
						"characters": "seg.width"
					},
					"CgAAABMEAAAAAAAAFAQAAAAAAAAAAAAAFAQAAAAAAAAUBAAAAAAAAAIAAAAxNBQEAAAAAAAAFQQAAAAAAAAAAAAAFQQAAAAAAAAWBAAAAAAAAAAAAAAWBAAAAAAAABcEAAAAAAAAAAAAABcEAAAAAAAAGAQAAAAAAAAAAAAAGAQAAAAAAAAZBAAAAAAAAAAAAAAZBAAAAAAAABoEAAAAAAAAAAAAABoEAAAAAAAAGwQAAAAAAAAAAAAAGwQAAAAAAAAcBAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEwQAAAAAAAAVBAAAAAAAAAAAAAAAAPC/"
				],
				[
					942,
					8,
					"right_delete",
					null,
					"CAAAAFwEAAAAAAAAXAQAAAAAAAABAAAAW1wEAAAAAAAAXAQAAAAAAAABAAAAW1wEAAAAAAAAXAQAAAAAAAABAAAAeVwEAAAAAAAAXAQAAAAAAAABAAAALFwEAAAAAAAAXAQAAAAAAAABAAAAeFwEAAAAAAAAXAQAAAAAAAABAAAAXVwEAAAAAAAAXAQAAAAAAAABAAAALFwEAAAAAAAAXAQAAAAAAAABAAAAYw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXAQAAAAAAABcBAAAAAAAAAAAAAAAAPC/"
				],
				[
					943,
					1,
					"insert",
					{
						"characters": "c"
					},
					"AQAAAFwEAAAAAAAAXQQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXAQAAAAAAABcBAAAAAAAAAAAAAAAAPC/"
				],
				[
					945,
					1,
					"right_delete",
					null,
					"AQAAAF8EAAAAAAAAXwQAAAAAAAABAAAAXQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXwQAAAAAAABfBAAAAAAAAAAAAAAAAPC/"
				],
				[
					952,
					1,
					"insert",
					{
						"characters": "new"
					},
					"AwAAANwCAAAAAAAA3QIAAAAAAAAAAAAA3QIAAAAAAADeAgAAAAAAAAAAAADeAgAAAAAAAN8CAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3AIAAAAAAADcAgAAAAAAAAAAAAAAAPC/"
				],
				[
					953,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAN8CAAAAAAAA4AIAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3wIAAAAAAADfAgAAAAAAAAAAAAAAAPC/"
				],
				[
					962,
					1,
					"left_delete",
					null,
					"AQAAAOIIAAAAAAAA4ggAAAAAAAAaAAAALm1hcCgoW2ssdl0pID0+IFtrKycnLCB2XSk",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4ggAAAAAAAD8CAAAAAAAAAAAAAAAAPC/"
				],
				[
					967,
					9,
					"right_delete",
					null,
					"CQAAAL0IAAAAAAAAvQgAAAAAAAABAAAAbr0IAAAAAAAAvQgAAAAAAAABAAAAZb0IAAAAAAAAvQgAAAAAAAABAAAAd70IAAAAAAAAvQgAAAAAAAABAAAAIL0IAAAAAAAAvQgAAAAAAAABAAAATb0IAAAAAAAAvQgAAAAAAAABAAAAYb0IAAAAAAAAvQgAAAAAAAABAAAAcL0IAAAAAAAAvQgAAAAAAAABAAAAKL0IAAAAAAAAvQgAAAAAAAABAAAAWw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvQgAAAAAAAC9CAAAAAAAAAAAAAAAAPC/"
				],
				[
					970,
					1,
					"left_delete",
					null,
					"AQAAANkIAAAAAAAA2QgAAAAAAAABAAAAKQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2ggAAAAAAADaCAAAAAAAAAAAAAAAAPC/"
				],
				[
					973,
					1,
					"insert",
					{
						"characters": "["
					},
					"AQAAAL0IAAAAAAAAvggAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvQgAAAAAAAC9CAAAAAAAAAAAAAAAAPC/"
				],
				[
					978,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAANgIAAAAAAAA2QgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2AgAAAAAAADYCAAAAAAAAAAAAAAAAPC/"
				],
				[
					979,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANkIAAAAAAAA2ggAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2QgAAAAAAADZCAAAAAAAAAAAAAAAAPC/"
				],
				[
					980,
					1,
					"insert",
					{
						"characters": "new"
					},
					"AwAAANoIAAAAAAAA2wgAAAAAAAAAAAAA2wgAAAAAAADcCAAAAAAAAAAAAADcCAAAAAAAAN0IAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2ggAAAAAAADaCAAAAAAAAAAAAAAAAPC/"
				],
				[
					981,
					1,
					"insert",
					{
						"characters": " cv.Size"
					},
					"CAAAAN0IAAAAAAAA3ggAAAAAAAAAAAAA3ggAAAAAAADfCAAAAAAAAAAAAADfCAAAAAAAAOAIAAAAAAAAAAAAAOAIAAAAAAAA4QgAAAAAAAAAAAAA4QgAAAAAAADiCAAAAAAAAAAAAADiCAAAAAAAAOMIAAAAAAAAAAAAAOMIAAAAAAAA5AgAAAAAAAAAAAAA5AgAAAAAAADlCAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3QgAAAAAAADdCAAAAAAAAAAAAAAAAPC/"
				],
				[
					982,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAOUIAAAAAAAA5wgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5QgAAAAAAADlCAAAAAAAAAAAAAAAAPC/"
				],
				[
					983,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOYIAAAAAAAA5wgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5ggAAAAAAADmCAAAAAAAAAAAAAAAAPC/"
				],
				[
					997,
					1,
					"insert",
					{
						"characters": "14,12s"
					},
					"BgAAAOYIAAAAAAAA5wgAAAAAAAAAAAAA5wgAAAAAAADoCAAAAAAAAAAAAADoCAAAAAAAAOkIAAAAAAAAAAAAAOkIAAAAAAAA6ggAAAAAAAAAAAAA6ggAAAAAAADrCAAAAAAAAAAAAADrCAAAAAAAAOwIAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5ggAAAAAAADmCAAAAAAAAAAAAAAAAPC/"
				],
				[
					998,
					1,
					"left_delete",
					null,
					"AQAAAOsIAAAAAAAA6wgAAAAAAAABAAAAcw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA7AgAAAAAAADsCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1001,
					2,
					"left_delete",
					null,
					"AgAAAOoIAAAAAAAA6ggAAAAAAAABAAAAMukIAAAAAAAA6QgAAAAAAAABAAAAMQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6wgAAAAAAADrCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1002,
					1,
					"insert",
					{
						"characters": "24"
					},
					"AgAAAOkIAAAAAAAA6ggAAAAAAAAAAAAA6ggAAAAAAADrCAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6QgAAAAAAADpCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1013,
					1,
					"insert",
					{
						"characters": "\n\nfor"
					},
					"BQAAADQJAAAAAAAANQkAAAAAAAAAAAAANQkAAAAAAAA2CQAAAAAAAAAAAAA2CQAAAAAAADcJAAAAAAAAAAAAADcJAAAAAAAAOAkAAAAAAAAAAAAAOAkAAAAAAAA5CQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANAkAAAAAAAA0CQAAAAAAAP///////+9/"
				],
				[
					1014,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADkJAAAAAAAAOwkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOQkAAAAAAAA5CQAAAAAAAAAAAAAAAPC/"
				],
				[
					1015,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAADoJAAAAAAAAOwkAAAAAAAAAAAAAOwkAAAAAAAA8CQAAAAAAAAAAAAA8CQAAAAAAAD0JAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOgkAAAAAAAA6CQAAAAAAAAAAAAAAAPC/"
				],
				[
					1016,
					1,
					"insert",
					{
						"characters": " segment"
					},
					"CAAAAD0JAAAAAAAAPgkAAAAAAAAAAAAAPgkAAAAAAAA/CQAAAAAAAAAAAAA/CQAAAAAAAEAJAAAAAAAAAAAAAEAJAAAAAAAAQQkAAAAAAAAAAAAAQQkAAAAAAABCCQAAAAAAAAAAAABCCQAAAAAAAEMJAAAAAAAAAAAAAEMJAAAAAAAARAkAAAAAAAAAAAAARAkAAAAAAABFCQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPQkAAAAAAAA9CQAAAAAAAAAAAAAAAPC/"
				],
				[
					1017,
					1,
					"insert",
					{
						"characters": " of"
					},
					"AwAAAEUJAAAAAAAARgkAAAAAAAAAAAAARgkAAAAAAABHCQAAAAAAAAAAAABHCQAAAAAAAEgJAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARQkAAAAAAABFCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1018,
					1,
					"insert",
					{
						"characters": " segemen"
					},
					"CAAAAEgJAAAAAAAASQkAAAAAAAAAAAAASQkAAAAAAABKCQAAAAAAAAAAAABKCQAAAAAAAEsJAAAAAAAAAAAAAEsJAAAAAAAATAkAAAAAAAAAAAAATAkAAAAAAABNCQAAAAAAAAAAAABNCQAAAAAAAE4JAAAAAAAAAAAAAE4JAAAAAAAATwkAAAAAAAAAAAAATwkAAAAAAABQCQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASAkAAAAAAABICQAAAAAAAAAAAAAAAPC/"
				],
				[
					1019,
					4,
					"left_delete",
					null,
					"BAAAAE8JAAAAAAAATwkAAAAAAAABAAAAbk4JAAAAAAAATgkAAAAAAAABAAAAZU0JAAAAAAAATQkAAAAAAAABAAAAbUwJAAAAAAAATAkAAAAAAAABAAAAZQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUAkAAAAAAABQCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1020,
					1,
					"insert",
					{
						"characters": "ments"
					},
					"BQAAAEwJAAAAAAAATQkAAAAAAAAAAAAATQkAAAAAAABOCQAAAAAAAAAAAABOCQAAAAAAAE8JAAAAAAAAAAAAAE8JAAAAAAAAUAkAAAAAAAAAAAAAUAkAAAAAAABRCQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATAkAAAAAAABMCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1022,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFIJAAAAAAAAUwkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUgkAAAAAAABSCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1023,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAFMJAAAAAAAAVQkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUwkAAAAAAABTCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1024,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAAFQJAAAAAAAAVQkAAAAAAAAAAAAAVQkAAAAAAABWCQAAAAAAAAAAAABVCQAAAAAAAFcJAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVAkAAAAAAABUCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1025,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAAFcJAAAAAAAAWAkAAAAAAAAAAAAAWAkAAAAAAABZCQAAAAAAAAAAAABZCQAAAAAAAFoJAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVwkAAAAAAABXCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1026,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFoJAAAAAAAAWwkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWgkAAAAAAABaCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1031,
					1,
					"insert",
					{
						"characters": "subsug"
					},
					"BgAAAFsJAAAAAAAAXAkAAAAAAAAAAAAAXAkAAAAAAABdCQAAAAAAAAAAAABdCQAAAAAAAF4JAAAAAAAAAAAAAF4JAAAAAAAAXwkAAAAAAAAAAAAAXwkAAAAAAABgCQAAAAAAAAAAAABgCQAAAAAAAGEJAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWwkAAAAAAABbCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1032,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGEJAAAAAAAAYgkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAYQkAAAAAAABhCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1033,
					3,
					"left_delete",
					null,
					"AwAAAGEJAAAAAAAAYQkAAAAAAAABAAAAIGAJAAAAAAAAYAkAAAAAAAABAAAAZ18JAAAAAAAAXwkAAAAAAAABAAAAdQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAYgkAAAAAAABiCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1034,
					1,
					"insert",
					{
						"characters": "eg"
					},
					"AgAAAF8JAAAAAAAAYAkAAAAAAAAAAAAAYAkAAAAAAABhCQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXwkAAAAAAABfCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1035,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAGEJAAAAAAAAYgkAAAAAAAAAAAAAYgkAAAAAAABjCQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAYQkAAAAAAABhCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1036,
					1,
					"insert",
					{
						"characters": "  "
					},
					"AgAAAGMJAAAAAAAAZAkAAAAAAAAAAAAAZAkAAAAAAABlCQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAYwkAAAAAAABjCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1042,
					1,
					"paste",
					null,
					"AQAAAGUJAAAAAAAAmAkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZQkAAAAAAABlCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1076,
					1,
					"insert",
					{
						"characters": " size"
					},
					"BQAAAP4CAAAAAAAA/wIAAAAAAAAAAAAA/wIAAAAAAAAAAwAAAAAAAAAAAAAAAwAAAAAAAAEDAAAAAAAAAAAAAAEDAAAAAAAAAgMAAAAAAAAAAAAAAgMAAAAAAAADAwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/gIAAAAAAAD+AgAAAAAAAAAAAAAAAPC/"
				],
				[
					1077,
					1,
					"insert",
					{
						"characters": " instanceof"
					},
					"CwAAAAMDAAAAAAAABAMAAAAAAAAAAAAABAMAAAAAAAAFAwAAAAAAAAAAAAAFAwAAAAAAAAYDAAAAAAAAAAAAAAYDAAAAAAAABwMAAAAAAAAAAAAABwMAAAAAAAAIAwAAAAAAAAAAAAAIAwAAAAAAAAkDAAAAAAAAAAAAAAkDAAAAAAAACgMAAAAAAAAAAAAACgMAAAAAAAALAwAAAAAAAAAAAAALAwAAAAAAAAwDAAAAAAAAAAAAAAwDAAAAAAAADQMAAAAAAAAAAAAADQMAAAAAAAAOAwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAwMAAAAAAAADAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1078,
					1,
					"insert",
					{
						"characters": " cv.Size"
					},
					"CAAAAA4DAAAAAAAADwMAAAAAAAAAAAAADwMAAAAAAAAQAwAAAAAAAAAAAAAQAwAAAAAAABEDAAAAAAAAAAAAABEDAAAAAAAAEgMAAAAAAAAAAAAAEgMAAAAAAAATAwAAAAAAAAAAAAATAwAAAAAAABQDAAAAAAAAAAAAABQDAAAAAAAAFQMAAAAAAAAAAAAAFQMAAAAAAAAWAwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADgMAAAAAAAAOAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1079,
					1,
					"insert",
					{
						"characters": " ?"
					},
					"AgAAABYDAAAAAAAAFwMAAAAAAAAAAAAAFwMAAAAAAAAYAwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFgMAAAAAAAAWAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1080,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABgDAAAAAAAAGQMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGAMAAAAAAAAYAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1083,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAADQDAAAAAAAANQMAAAAAAAAAAAAANQMAAAAAAAA2AwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANAMAAAAAAAA0AwAAAAAAAAAAAAAAAPC/"
				],
				[
					1084,
					1,
					"insert",
					{
						"characters": " ne"
					},
					"AwAAADYDAAAAAAAANwMAAAAAAAAAAAAANwMAAAAAAAA4AwAAAAAAAAAAAAA4AwAAAAAAADkDAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANgMAAAAAAAA2AwAAAAAAAAAAAAAAAPC/"
				],
				[
					1085,
					1,
					"insert",
					{
						"characters": "w"
					},
					"AQAAADkDAAAAAAAAOgMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOQMAAAAAAAA5AwAAAAAAAAAAAAAAAPC/"
				],
				[
					1086,
					1,
					"insert",
					{
						"characters": " Re"
					},
					"AwAAADoDAAAAAAAAOwMAAAAAAAAAAAAAOwMAAAAAAAA8AwAAAAAAAAAAAAA8AwAAAAAAAD0DAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOgMAAAAAAAA6AwAAAAAAAAAAAAAAAPC/"
				],
				[
					1087,
					2,
					"left_delete",
					null,
					"AgAAADwDAAAAAAAAPAMAAAAAAAABAAAAZTsDAAAAAAAAOwMAAAAAAAABAAAAUg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPQMAAAAAAAA9AwAAAAAAAAAAAAAAAPC/"
				],
				[
					1088,
					1,
					"insert",
					{
						"characters": "cv.Rect"
					},
					"BwAAADsDAAAAAAAAPAMAAAAAAAAAAAAAPAMAAAAAAAA9AwAAAAAAAAAAAAA9AwAAAAAAAD4DAAAAAAAAAAAAAD4DAAAAAAAAPwMAAAAAAAAAAAAAPwMAAAAAAABAAwAAAAAAAAAAAABAAwAAAAAAAEEDAAAAAAAAAAAAAEEDAAAAAAAAQgMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOwMAAAAAAAA7AwAAAAAAAAAAAAAAAPC/"
				],
				[
					1089,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAEIDAAAAAAAARAMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQgMAAAAAAABCAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1090,
					1,
					"insert",
					{
						"characters": "size"
					},
					"BAAAAEMDAAAAAAAARAMAAAAAAAAAAAAARAMAAAAAAABFAwAAAAAAAAAAAABFAwAAAAAAAEYDAAAAAAAAAAAAAEYDAAAAAAAARwMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQwMAAAAAAABDAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1098,
					2,
					"right_delete",
					null,
					"AgAAAEoDAAAAAAAASgMAAAAAAABRAAAAY29uc29sZS5sb2coJ3JlY3QuaHNwbGl0JywgcmVjdC5oc3BsaXQpOwpjb25zb2xlLmxvZygncmVjdC52c3BsaXQnLCByZWN0LnZzcGxpdCk7SgMAAAAAAABKAwAAAAAAAAEAAAAK",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmwMAAAAAAABKAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1115,
					1,
					"insert",
					{
						"characters": "12"
					},
					"AwAAAG4JAAAAAAAAbwkAAAAAAAAAAAAAbwkAAAAAAABvCQAAAAAAAAIAAAAyNG8JAAAAAAAAcAkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbgkAAAAAAABwCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1139,
					1,
					"insert",
					{
						"characters": "8"
					},
					"AgAAAG4JAAAAAAAAbwkAAAAAAAAAAAAAbwkAAAAAAABvCQAAAAAAAAIAAAAxMg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbgkAAAAAAABwCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1150,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAHQJAAAAAAAAdQkAAAAAAAAAAAAAdQkAAAAAAAB3CQAAAAAAAAAAAAB3CQAAAAAAAHgJAAAAAAAAAAAAAHgJAAAAAAAAegkAAAAAAAAAAAAAdQkAAAAAAAB1CQAAAAAAAAIAAAAgIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAdAkAAAAAAAB0CQAAAAAAAAAAAAAAAPC/"
				],
				[
					1160,
					1,
					"paste",
					null,
					"AQAAAHgJAAAAAAAAvAkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAeAkAAAAAAAB4CQAAAAAAAAAAAAAAAPC/"
				],
				[
					1170,
					1,
					"paste",
					null,
					"AgAAAIUJAAAAAAAAiwkAAAAAAAAAAAAAiwkAAAAAAACLCQAAAAAAAAgAAABzZWdtZW50cw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAhQkAAAAAAACNCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1175,
					1,
					"paste",
					null,
					"AgAAAK8JAAAAAAAAtQkAAAAAAAAAAAAAtQkAAAAAAAC1CQAAAAAAAAgAAABzZWdtZW50cw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAArwkAAAAAAAC3CQAAAAAAAAAAAAAAAPC/"
				],
				[
					1202,
					1,
					"paste",
					null,
					"AgAAAFIJAAAAAAAAWQkAAAAAAAAAAAAAWQkAAAAAAABZCQAAAAAAAAYAAABtaWRkbGU",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUgkAAAAAAABYCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1209,
					2,
					"left_delete",
					null,
					"AgAAAFoJAAAAAAAAWgkAAAAAAAAEAAAAc2l6ZVkJAAAAAAAAWQkAAAAAAAABAAAALg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWgkAAAAAAABeCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1253,
					1,
					"insert",
					{
						"characters": "img"
					},
					"BAAAAKoIAAAAAAAAqwgAAAAAAAAAAAAAqwgAAAAAAACrCAAAAAAAAAYAAABtaWRkbGWrCAAAAAAAAKwIAAAAAAAAAAAAAKwIAAAAAAAArQgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAqggAAAAAAACwCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1260,
					1,
					"insert",
					{
						"characters": "\n\nlet"
					},
					"BQAAAIkIAAAAAAAAiggAAAAAAAAAAAAAiggAAAAAAACLCAAAAAAAAAAAAACLCAAAAAAAAIwIAAAAAAAAAAAAAIwIAAAAAAAAjQgAAAAAAAAAAAAAjQgAAAAAAACOCAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAiQgAAAAAAACJCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1261,
					1,
					"insert",
					{
						"characters": " chara"
					},
					"BgAAAI4IAAAAAAAAjwgAAAAAAAAAAAAAjwgAAAAAAACQCAAAAAAAAAAAAACQCAAAAAAAAJEIAAAAAAAAAAAAAJEIAAAAAAAAkggAAAAAAAAAAAAAkggAAAAAAACTCAAAAAAAAAAAAACTCAAAAAAAAJQIAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjggAAAAAAACOCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1262,
					1,
					"left_delete",
					null,
					"AQAAAJMIAAAAAAAAkwgAAAAAAAABAAAAYQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAlAgAAAAAAACUCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1263,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAJMIAAAAAAAAlAgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAkwgAAAAAAACTCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1264,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAJQIAAAAAAAAlQgAAAAAAAAAAAAAlQgAAAAAAACWCAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAlAgAAAAAAACUCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1265,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJYIAAAAAAAAlwgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAlggAAAAAAACWCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1266,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAJcIAAAAAAAAmQgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAlwgAAAAAAACXCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1267,
					1,
					"insert",
					{
						"characters": "124"
					},
					"AwAAAJgIAAAAAAAAmQgAAAAAAAAAAAAAmQgAAAAAAACaCAAAAAAAAAAAAACaCAAAAAAAAJsIAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmAgAAAAAAACYCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1268,
					1,
					"left_delete",
					null,
					"AQAAAJoIAAAAAAAAmggAAAAAAAABAAAANA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmwgAAAAAAACbCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1269,
					1,
					"insert",
					{
						"characters": "345V"
					},
					"BAAAAJoIAAAAAAAAmwgAAAAAAAAAAAAAmwgAAAAAAACcCAAAAAAAAAAAAACcCAAAAAAAAJ0IAAAAAAAAAAAAAJ0IAAAAAAAAnggAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmggAAAAAAACaCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1270,
					1,
					"insert",
					{
						"characters": "67890"
					},
					"BQAAAJ4IAAAAAAAAnwgAAAAAAAAAAAAAnwgAAAAAAACgCAAAAAAAAAAAAACgCAAAAAAAAKEIAAAAAAAAAAAAAKEIAAAAAAAAoggAAAAAAAAAAAAAoggAAAAAAACjCAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnggAAAAAAACeCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1271,
					1,
					"insert",
					{
						"characters": "V"
					},
					"AQAAAKMIAAAAAAAApAgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAowgAAAAAAACjCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1273,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAKUIAAAAAAAApggAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApQgAAAAAAAClCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1280,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAACwJAAAAAAAALQkAAAAAAAAAAAAALQkAAAAAAAAuCQAAAAAAAAAAAAAuCQAAAAAAAC8JAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALAkAAAAAAAAsCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1281,
					1,
					"insert",
					{
						"characters": " i"
					},
					"AgAAAC8JAAAAAAAAMAkAAAAAAAAAAAAAMAkAAAAAAAAxCQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALwkAAAAAAAAvCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1282,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAADEJAAAAAAAAMgkAAAAAAAAAAAAAMgkAAAAAAAAzCQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMQkAAAAAAAAxCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1283,
					1,
					"insert",
					{
						"characters": " 0;"
					},
					"AwAAADMJAAAAAAAANAkAAAAAAAAAAAAANAkAAAAAAAA1CQAAAAAAAAAAAAA1CQAAAAAAADYJAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMwkAAAAAAAAzCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1285,
					1,
					"insert",
					{
						"characters": "i++;"
					},
					"BAAAANgJAAAAAAAA2QkAAAAAAAAAAAAA2QkAAAAAAADaCQAAAAAAAAAAAADaCQAAAAAAANsJAAAAAAAAAAAAANsJAAAAAAAA3AkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2AkAAAAAAADYCQAAAAAAAAAAAAAAAFlA"
				],
				[
					1288,
					1,
					"insert",
					{
						"characters": "chars[i],"
					},
					"CQAAAK0JAAAAAAAArgkAAAAAAAAAAAAArgkAAAAAAACvCQAAAAAAAAAAAACvCQAAAAAAALAJAAAAAAAAAAAAALAJAAAAAAAAsQkAAAAAAAAAAAAAsQkAAAAAAACyCQAAAAAAAAAAAACyCQAAAAAAALMJAAAAAAAAAAAAALMJAAAAAAAAtAkAAAAAAAAAAAAAtAkAAAAAAAC1CQAAAAAAAAAAAAC1CQAAAAAAALYJAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAArQkAAAAAAACtCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1289,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALYJAAAAAAAAtwkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtgkAAAAAAAC2CQAAAAAAAAAAAAAAAPC/"
				],
				[
					1298,
					1,
					"insert",
					{
						"characters": "\n\nfuin"
					},
					"BgAAAFcEAAAAAAAAWAQAAAAAAAAAAAAAWAQAAAAAAABZBAAAAAAAAAAAAABZBAAAAAAAAFoEAAAAAAAAAAAAAFoEAAAAAAAAWwQAAAAAAAAAAAAAWwQAAAAAAABcBAAAAAAAAAAAAABcBAAAAAAAAF0EAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVwQAAAAAAABXBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1299,
					2,
					"left_delete",
					null,
					"AgAAAFwEAAAAAAAAXAQAAAAAAAABAAAAblsEAAAAAAAAWwQAAAAAAAABAAAAaQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXQQAAAAAAABdBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1300,
					1,
					"insert",
					{
						"characters": "nction"
					},
					"BgAAAFsEAAAAAAAAXAQAAAAAAAAAAAAAXAQAAAAAAABdBAAAAAAAAAAAAABdBAAAAAAAAF4EAAAAAAAAAAAAAF4EAAAAAAAAXwQAAAAAAAAAAAAAXwQAAAAAAABgBAAAAAAAAAAAAABgBAAAAAAAAGEEAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWwQAAAAAAABbBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1301,
					1,
					"insert",
					{
						"characters": " Image2AS"
					},
					"CQAAAGEEAAAAAAAAYgQAAAAAAAAAAAAAYgQAAAAAAABjBAAAAAAAAAAAAABjBAAAAAAAAGQEAAAAAAAAAAAAAGQEAAAAAAAAZQQAAAAAAAAAAAAAZQQAAAAAAABmBAAAAAAAAAAAAABmBAAAAAAAAGcEAAAAAAAAAAAAAGcEAAAAAAAAaAQAAAAAAAAAAAAAaAQAAAAAAABpBAAAAAAAAAAAAABpBAAAAAAAAGoEAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAYQQAAAAAAABhBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1302,
					1,
					"insert",
					{
						"characters": "CII"
					},
					"AwAAAGoEAAAAAAAAawQAAAAAAAAAAAAAawQAAAAAAABsBAAAAAAAAAAAAABsBAAAAAAAAG0EAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAagQAAAAAAABqBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1303,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAG0EAAAAAAAAbwQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbQQAAAAAAABtBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1304,
					1,
					"insert",
					{
						"characters": "img"
					},
					"AwAAAG4EAAAAAAAAbwQAAAAAAAAAAAAAbwQAAAAAAABwBAAAAAAAAAAAAABwBAAAAAAAAHEEAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbgQAAAAAAABuBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1306,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHIEAAAAAAAAcwQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAcgQAAAAAAAByBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1307,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAHMEAAAAAAAAdQQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAcwQAAAAAAABzBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1308,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAAHQEAAAAAAAAdQQAAAAAAAAAAAAAdQQAAAAAAAB2BAAAAAAAAAAAAAB1BAAAAAAAAHcEAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAdAQAAAAAAAB0BAAAAAAAAAAAAAAAAPC/"
				],
				[
					1311,
					1,
					"insert",
					{
						"characters": "for"
					},
					"AwAAAHcEAAAAAAAAeAQAAAAAAAAAAAAAeAQAAAAAAAB5BAAAAAAAAAAAAAB5BAAAAAAAAHoEAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAdwQAAAAAAAB3BAAAAAAAAAAAAAAAAPC/"
				],
				[
					1312,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAHoEAAAAAAAAfAQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAegQAAAAAAAB6BAAAAAAAAAAAAAAAAPC/"
				],
				[
					1313,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAAHsEAAAAAAAAfAQAAAAAAAAAAAAAfAQAAAAAAAB9BAAAAAAAAAAAAAB9BAAAAAAAAH4EAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAewQAAAAAAAB7BAAAAAAAAAAAAAAAAPC/"
				],
				[
					1314,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAH4EAAAAAAAAfwQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAfgQAAAAAAAB+BAAAAAAAAAAAAAAAAPC/"
				],
				[
					1315,
					1,
					"insert",
					{
						"characters": "pixel"
					},
					"BQAAAH8EAAAAAAAAgAQAAAAAAAAAAAAAgAQAAAAAAACBBAAAAAAAAAAAAACBBAAAAAAAAIIEAAAAAAAAAAAAAIIEAAAAAAAAgwQAAAAAAAAAAAAAgwQAAAAAAACEBAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAfwQAAAAAAAB/BAAAAAAAAAAAAAAAAPC/"
				],
				[
					1316,
					1,
					"insert",
					{
						"characters": " of"
					},
					"AwAAAIQEAAAAAAAAhQQAAAAAAAAAAAAAhQQAAAAAAACGBAAAAAAAAAAAAACGBAAAAAAAAIcEAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAhAQAAAAAAACEBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1317,
					1,
					"insert",
					{
						"characters": " img"
					},
					"BAAAAIcEAAAAAAAAiAQAAAAAAAAAAAAAiAQAAAAAAACJBAAAAAAAAAAAAACJBAAAAAAAAIoEAAAAAAAAAAAAAIoEAAAAAAAAiwQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAhwQAAAAAAACHBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1319,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIwEAAAAAAAAjQQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjAQAAAAAAACMBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1320,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAI0EAAAAAAAAjwQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjQQAAAAAAACNBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1321,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAI4EAAAAAAAAjwQAAAAAAAAAAAAAjwQAAAAAAACRBAAAAAAAAAAAAACRBAAAAAAAAJIEAAAAAAAAAAAAAJIEAAAAAAAAlAQAAAAAAAAAAAAAjwQAAAAAAACPBAAAAAAAAAIAAAAgII8EAAAAAAAAkwQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjgQAAAAAAACOBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1337,
					1,
					"insert",
					{
						"characters": "\n\n\n"
					},
					"CQAAACMKAAAAAAAAJAoAAAAAAAAAAAAAJAoAAAAAAAAmCgAAAAAAAAAAAACPBAAAAAAAAI8EAAAAAAAABAAAACAgICAiCgAAAAAAACMKAAAAAAAAAAAAACMKAAAAAAAAJQoAAAAAAAAAAAAAIAoAAAAAAAAgCgAAAAAAAAIAAAAgICMKAAAAAAAAJAoAAAAAAAAAAAAAJAoAAAAAAAAmCgAAAAAAAAAAAAAhCgAAAAAAACEKAAAAAAAAAgAAACAg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIwoAAAAAAAAjCgAAAAAAAP///////+9/"
				],
				[
					1339,
					1,
					"insert",
					{
						"characters": "let"
					},
					"BAAAACEKAAAAAAAAIgoAAAAAAAAAAAAAIwoAAAAAAAAjCgAAAAAAAAIAAAAgICIKAAAAAAAAIwoAAAAAAAAAAAAAIwoAAAAAAAAkCgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIQoAAAAAAAAhCgAAAAAAAAAAAAAAADRA"
				],
				[
					1340,
					1,
					"insert",
					{
						"characters": " segimtg"
					},
					"CAAAACQKAAAAAAAAJQoAAAAAAAAAAAAAJQoAAAAAAAAmCgAAAAAAAAAAAAAmCgAAAAAAACcKAAAAAAAAAAAAACcKAAAAAAAAKAoAAAAAAAAAAAAAKAoAAAAAAAApCgAAAAAAAAAAAAApCgAAAAAAACoKAAAAAAAAAAAAACoKAAAAAAAAKwoAAAAAAAAAAAAAKwoAAAAAAAAsCgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJAoAAAAAAAAkCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1341,
					2,
					"left_delete",
					null,
					"AgAAACsKAAAAAAAAKwoAAAAAAAABAAAAZyoKAAAAAAAAKgoAAAAAAAABAAAAdA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALAoAAAAAAAAsCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1342,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AQAAACoKAAAAAAAAKwoAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKgoAAAAAAAAqCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1343,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAACsKAAAAAAAALAoAAAAAAAAAAAAALAoAAAAAAAAtCgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKwoAAAAAAAArCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1344,
					1,
					"insert",
					{
						"characters": "  "
					},
					"AgAAAC0KAAAAAAAALgoAAAAAAAAAAAAALgoAAAAAAAAvCgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALQoAAAAAAAAtCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1345,
					1,
					"left_delete",
					null,
					"AQAAAC4KAAAAAAAALgoAAAAAAAABAAAAIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALwoAAAAAAAAvCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1346,
					1,
					"insert",
					{
						"characters": "img"
					},
					"AwAAAC4KAAAAAAAALwoAAAAAAAAAAAAALwoAAAAAAAAwCgAAAAAAAAAAAAAwCgAAAAAAADEKAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALgoAAAAAAAAuCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1347,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADEKAAAAAAAAMwoAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMQoAAAAAAAAxCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1348,
					1,
					"insert",
					{
						"characters": "usb"
					},
					"AwAAADIKAAAAAAAAMwoAAAAAAAAAAAAAMwoAAAAAAAA0CgAAAAAAAAAAAAA0CgAAAAAAADUKAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMgoAAAAAAAAyCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1349,
					2,
					"left_delete",
					null,
					"AgAAADQKAAAAAAAANAoAAAAAAAABAAAAYjMKAAAAAAAAMwoAAAAAAAABAAAAcw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANQoAAAAAAAA1CgAAAAAAAAAAAAAAAPC/"
				],
				[
					1350,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAADMKAAAAAAAANAoAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMwoAAAAAAAAzCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1351,
					2,
					"left_delete",
					null,
					"AgAAADMKAAAAAAAAMwoAAAAAAAABAAAAczIKAAAAAAAAMgoAAAAAAAABAAAAdQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANAoAAAAAAAA0CgAAAAAAAAAAAAAAAPC/"
				],
				[
					1352,
					1,
					"insert",
					{
						"characters": "subset"
					},
					"BgAAADIKAAAAAAAAMwoAAAAAAAAAAAAAMwoAAAAAAAA0CgAAAAAAAAAAAAA0CgAAAAAAADUKAAAAAAAAAAAAADUKAAAAAAAANgoAAAAAAAAAAAAANgoAAAAAAAA3CgAAAAAAAAAAAAA3CgAAAAAAADgKAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMgoAAAAAAAAyCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1353,
					1,
					"left_delete",
					null,
					"AQAAADcKAAAAAAAANwoAAAAAAAABAAAAdA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOAoAAAAAAAA4CgAAAAAAAAAAAAAAAPC/"
				],
				[
					1354,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AQAAADcKAAAAAAAAOAoAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANwoAAAAAAAA3CgAAAAAAAAAAAAAAAPC/"
				],
				[
					1356,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAADkKAAAAAAAAOgoAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOQoAAAAAAAA5CgAAAAAAAAAAAAAAAPC/"
				],
				[
					1357,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAADoKAAAAAAAAOwoAAAAAAAAAAAAAOwoAAAAAAAA8CgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOgoAAAAAAAA6CgAAAAAAAAAAAAAAAPC/"
				],
				[
					1358,
					1,
					"paste",
					null,
					"AQAAADwKAAAAAAAARwoAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPAoAAAAAAAA8CgAAAAAAAAAAAAAAAPC/"
				],
				[
					1359,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAEcKAAAAAAAASQoAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARwoAAAAAAABHCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1360,
					1,
					"insert",
					{
						"characters": "segimg"
					},
					"BgAAAEgKAAAAAAAASQoAAAAAAAAAAAAASQoAAAAAAABKCgAAAAAAAAAAAABKCgAAAAAAAEsKAAAAAAAAAAAAAEsKAAAAAAAATAoAAAAAAAAAAAAATAoAAAAAAABNCgAAAAAAAAAAAABNCgAAAAAAAE4KAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASAoAAAAAAABICgAAAAAAAAAAAAAAAPC/"
				],
				[
					1362,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAE8KAAAAAAAAUAoAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATwoAAAAAAABPCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1370,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AQAAACAKAAAAAAAAIQoAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIAoAAAAAAAAgCgAAAAAAAAAAAAAAQGVA"
				],
				[
					1371,
					1,
					"left_delete",
					null,
					"AQAAACAKAAAAAAAAIAoAAAAAAAABAAAAZg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIQoAAAAAAAAhCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1372,
					1,
					"insert",
					{
						"characters": "\nfor"
					},
					"BAAAACAKAAAAAAAAIQoAAAAAAAAAAAAAIQoAAAAAAAAiCgAAAAAAAAAAAAAiCgAAAAAAACMKAAAAAAAAAAAAACMKAAAAAAAAJAoAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIAoAAAAAAAAgCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1373,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAACQKAAAAAAAAJgoAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJAoAAAAAAAAkCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1374,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAACUKAAAAAAAAJgoAAAAAAAAAAAAAJgoAAAAAAAAnCgAAAAAAAAAAAAAnCgAAAAAAACgKAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJQoAAAAAAAAlCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1375,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACgKAAAAAAAAKQoAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKAoAAAAAAAAoCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1378,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAKAJAAAAAAAAoQkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAoAkAAAAAAACgCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1381,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAOoJAAAAAAAA6wkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6gkAAAAAAADqCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1384,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAB8KAAAAAAAAIAoAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHwoAAAAAAAAfCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1387,
					1,
					"left_delete",
					null,
					"AQAAACwKAAAAAAAALAoAAAAAAAABAAAAKQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALQoAAAAAAAAtCgAAAAAAAAAAAAAAcIdA"
				],
				[
					1388,
					1,
					"insert",
					{
						"characters": "subseg"
					},
					"BgAAACwKAAAAAAAALQoAAAAAAAAAAAAALQoAAAAAAAAuCgAAAAAAAAAAAAAuCgAAAAAAAC8KAAAAAAAAAAAAAC8KAAAAAAAAMAoAAAAAAAAAAAAAMAoAAAAAAAAxCgAAAAAAAAAAAAAxCgAAAAAAADIKAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALAoAAAAAAAAsCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1389,
					1,
					"insert",
					{
						"characters": " of"
					},
					"AwAAADIKAAAAAAAAMwoAAAAAAAAAAAAAMwoAAAAAAAA0CgAAAAAAAAAAAAA0CgAAAAAAADUKAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMgoAAAAAAAAyCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1390,
					1,
					"insert",
					{
						"characters": " subsegs)"
					},
					"CQAAADUKAAAAAAAANgoAAAAAAAAAAAAANgoAAAAAAAA3CgAAAAAAAAAAAAA3CgAAAAAAADgKAAAAAAAAAAAAADgKAAAAAAAAOQoAAAAAAAAAAAAAOQoAAAAAAAA6CgAAAAAAAAAAAAA6CgAAAAAAADsKAAAAAAAAAAAAADsKAAAAAAAAPAoAAAAAAAAAAAAAPAoAAAAAAAA9CgAAAAAAAAAAAAA9CgAAAAAAAD4KAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANQoAAAAAAAA1CgAAAAAAAAAAAAAAAPC/"
				],
				[
					1391,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAD4KAAAAAAAAPwoAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPgoAAAAAAAA+CgAAAAAAAAAAAAAAAPC/"
				],
				[
					1392,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAD8KAAAAAAAAQQoAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPwoAAAAAAAA/CgAAAAAAAAAAAAAAAPC/"
				],
				[
					1393,
					1,
					"right_delete",
					null,
					"AQAAAEAKAAAAAAAAQAoAAAAAAAABAAAAfQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQAoAAAAAAABACgAAAAAAAAAAAAAAAPC/"
				],
				[
					1395,
					1,
					"insert",
					{
						"characters": "\n}"
					},
					"AgAAAHAKAAAAAAAAcQoAAAAAAAAAAAAAcQoAAAAAAAByCgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAcAoAAAAAAABwCgAAAAAAAAAAAAAAgHFA"
				],
				[
					1402,
					1,
					"insert",
					{
						"characters": "co"
					},
					"AgAAAJEEAAAAAAAAkgQAAAAAAAAAAAAAkgQAAAAAAACTBAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAkQQAAAAAAACRBAAAAAAAAAAAAAAAACRA"
				],
				[
					1403,
					2,
					"left_delete",
					null,
					"AgAAAJIEAAAAAAAAkgQAAAAAAAABAAAAb5EEAAAAAAAAkQQAAAAAAAABAAAAYw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAkwQAAAAAAACTBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1405,
					1,
					"insert",
					{
						"characters": "console.log"
					},
					"CwAAAI8EAAAAAAAAkAQAAAAAAAAAAAAAkAQAAAAAAACRBAAAAAAAAAAAAACRBAAAAAAAAJIEAAAAAAAAAAAAAJIEAAAAAAAAkwQAAAAAAAAAAAAAkwQAAAAAAACUBAAAAAAAAAAAAACUBAAAAAAAAJUEAAAAAAAAAAAAAJUEAAAAAAAAlgQAAAAAAAAAAAAAlgQAAAAAAACXBAAAAAAAAAAAAACXBAAAAAAAAJgEAAAAAAAAAAAAAJgEAAAAAAAAmQQAAAAAAAAAAAAAmQQAAAAAAACaBAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjwQAAAAAAACPBAAAAAAAAAAAAAAAACRA"
				],
				[
					1406,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJoEAAAAAAAAnAQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmgQAAAAAAACaBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1407,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAJsEAAAAAAAAnQQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmwQAAAAAAACbBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1408,
					1,
					"insert",
					{
						"characters": "pouix"
					},
					"BQAAAJwEAAAAAAAAnQQAAAAAAAAAAAAAnQQAAAAAAACeBAAAAAAAAAAAAACeBAAAAAAAAJ8EAAAAAAAAAAAAAJ8EAAAAAAAAoAQAAAAAAAAAAAAAoAQAAAAAAAChBAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnAQAAAAAAACcBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1409,
					4,
					"left_delete",
					null,
					"BAAAAKAEAAAAAAAAoAQAAAAAAAABAAAAeJ8EAAAAAAAAnwQAAAAAAAABAAAAaZ4EAAAAAAAAngQAAAAAAAABAAAAdZ0EAAAAAAAAnQQAAAAAAAABAAAAbw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAoQQAAAAAAAChBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1410,
					1,
					"insert",
					{
						"characters": "ixel"
					},
					"BAAAAJ0EAAAAAAAAngQAAAAAAAAAAAAAngQAAAAAAACfBAAAAAAAAAAAAACfBAAAAAAAAKAEAAAAAAAAAAAAAKAEAAAAAAAAoQQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnQQAAAAAAACdBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1412,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAKIEAAAAAAAAowQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAogQAAAAAAACiBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1413,
					1,
					"insert",
					{
						"characters": " pixel"
					},
					"BgAAAKMEAAAAAAAApAQAAAAAAAAAAAAApAQAAAAAAAClBAAAAAAAAAAAAAClBAAAAAAAAKYEAAAAAAAAAAAAAKYEAAAAAAAApwQAAAAAAAAAAAAApwQAAAAAAACoBAAAAAAAAAAAAACoBAAAAAAAAKkEAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAowQAAAAAAACjBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1415,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAKoEAAAAAAAAqwQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAqgQAAAAAAACqBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1435,
					1,
					"cut",
					null,
					"AQAAAHUEAAAAAAAAdQQAAAAAAAAaAAAAICBmb3IobGV0IHBpeGVsIG9mIGltZykgewo",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAdQQAAAAAAACPBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1436,
					2,
					"paste",
					null,
					"AgAAAHUEAAAAAAAAjwQAAAAAAAAAAAAAjwQAAAAAAACpBAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAdQQAAAAAAAB1BAAAAAAAAAAAAAAAAPC/"
				],
				[
					1439,
					1,
					"insert",
					{
						"characters": ",.r"
					},
					"AwAAAIsEAAAAAAAAjAQAAAAAAAAAAAAAjAQAAAAAAACNBAAAAAAAAAAAAACNBAAAAAAAAI4EAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAiwQAAAAAAACLBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1440,
					3,
					"left_delete",
					null,
					"AwAAAI0EAAAAAAAAjQQAAAAAAAABAAAAcowEAAAAAAAAjAQAAAAAAAABAAAALosEAAAAAAAAiwQAAAAAAAABAAAALA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjgQAAAAAAACOBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1441,
					1,
					"insert",
					{
						"characters": ".rows"
					},
					"BQAAAIsEAAAAAAAAjAQAAAAAAAAAAAAAjAQAAAAAAACNBAAAAAAAAAAAAACNBAAAAAAAAI4EAAAAAAAAAAAAAI4EAAAAAAAAjwQAAAAAAAAAAAAAjwQAAAAAAACQBAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAiwQAAAAAAACLBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1444,
					4,
					"right_delete",
					null,
					"BAAAAIAEAAAAAAAAgAQAAAAAAAABAAAAaYAEAAAAAAAAgAQAAAAAAAABAAAAeIAEAAAAAAAAgAQAAAAAAAABAAAAZYAEAAAAAAAAgAQAAAAAAAABAAAAbA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgAQAAAAAAACABAAAAAAAAAAAAAAAAPC/"
				],
				[
					1445,
					1,
					"left_delete",
					null,
					"AQAAAH8EAAAAAAAAfwQAAAAAAAABAAAAcA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgAQAAAAAAACABAAAAAAAAAAAAAAAAPC/"
				],
				[
					1446,
					1,
					"insert",
					{
						"characters": "col"
					},
					"AwAAAH8EAAAAAAAAgAQAAAAAAAAAAAAAgAQAAAAAAACBBAAAAAAAAAAAAACBBAAAAAAAAIIEAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAfwQAAAAAAAB/BAAAAAAAAAAAAAAAAPC/"
				],
				[
					1458,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAHUEAAAAAAAAdgQAAAAAAAAAAAAAdgQAAAAAAAB2BAAAAAAAAB0AAAAgIGZvcihsZXQgY29sIG9mIGltZy5yb3dzKSB7Cg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAdQQAAAAAAACSBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1461,
					1,
					"insert",
					{
						"characters": ".entries"
					},
					"CAAAAIwEAAAAAAAAjQQAAAAAAAAAAAAAjQQAAAAAAACOBAAAAAAAAAAAAACOBAAAAAAAAI8EAAAAAAAAAAAAAI8EAAAAAAAAkAQAAAAAAAAAAAAAkAQAAAAAAACRBAAAAAAAAAAAAACRBAAAAAAAAJIEAAAAAAAAAAAAAJIEAAAAAAAAkwQAAAAAAAAAAAAAkwQAAAAAAACUBAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjAQAAAAAAACMBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1462,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJQEAAAAAAAAlgQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAlAQAAAAAAACUBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1468,
					1,
					"insert",
					{
						"characters": "\nle"
					},
					"BAAAAHQEAAAAAAAAdQQAAAAAAAAAAAAAdQQAAAAAAAB3BAAAAAAAAAAAAAB3BAAAAAAAAHgEAAAAAAAAAAAAAHgEAAAAAAAAeQQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAdAQAAAAAAAB0BAAAAAAAAAAAAAAAAPC/"
				],
				[
					1469,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHkEAAAAAAAAegQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAeQQAAAAAAAB5BAAAAAAAAAAAAAAAAPC/"
				],
				[
					1470,
					1,
					"left_delete",
					null,
					"AQAAAHkEAAAAAAAAeQQAAAAAAAABAAAAIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAegQAAAAAAAB6BAAAAAAAAAAAAAAAAPC/"
				],
				[
					1471,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAHkEAAAAAAAAegQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAeQQAAAAAAAB5BAAAAAAAAAAAAAAAAPC/"
				],
				[
					1472,
					1,
					"insert",
					{
						"characters": " rows=þ"
					},
					"BwAAAHoEAAAAAAAAewQAAAAAAAAAAAAAewQAAAAAAAB8BAAAAAAAAAAAAAB8BAAAAAAAAH0EAAAAAAAAAAAAAH0EAAAAAAAAfgQAAAAAAAAAAAAAfgQAAAAAAAB/BAAAAAAAAAAAAAB/BAAAAAAAAIAEAAAAAAAAAAAAAIAEAAAAAAAAgQQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAegQAAAAAAAB6BAAAAAAAAAAAAAAAAPC/"
				],
				[
					1473,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAIEEAAAAAAAAgwQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgQQAAAAAAACBBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1475,
					3,
					"left_delete",
					null,
					"AwAAAIIEAAAAAAAAggQAAAAAAAABAAAAXYEEAAAAAAAAgQQAAAAAAAABAAAAW4AEAAAAAAAAgAQAAAAAAAACAAAAw74",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgwQAAAAAAACDBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1476,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAIAEAAAAAAAAggQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgAQAAAAAAACABAAAAAAAAAAAAAAAAPC/"
				],
				[
					1478,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAIIEAAAAAAAAgwQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAggQAAAAAAACCBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1481,
					1,
					"insert",
					{
						"characters": "[["
					},
					"AgAAAI8EAAAAAAAAkAQAAAAAAAAAAAAAkAQAAAAAAACRBAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjwQAAAAAAACPBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1482,
					1,
					"insert",
					{
						"characters": "row,col],"
					},
					"CQAAAJEEAAAAAAAAkgQAAAAAAAAAAAAAkgQAAAAAAACTBAAAAAAAAAAAAACTBAAAAAAAAJQEAAAAAAAAAAAAAJQEAAAAAAAAlQQAAAAAAAAAAAAAlQQAAAAAAACWBAAAAAAAAAAAAACWBAAAAAAAAJcEAAAAAAAAAAAAAJcEAAAAAAAAmAQAAAAAAAAAAAAAmAQAAAAAAACZBAAAAAAAAAAAAACZBAAAAAAAAJoEAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAkQQAAAAAAACRBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1483,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJoEAAAAAAAAmwQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmgQAAAAAAACaBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1485,
					1,
					"insert",
					{
						"characters": "]"
					},
					"AQAAAKAEAAAAAAAAoQQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAoAQAAAAAAACgBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1494,
					1,
					"insert",
					{
						"characters": "\nrows"
					},
					"BwAAALUEAAAAAAAAtgQAAAAAAAAAAAAAtgQAAAAAAAC5BAAAAAAAAAAAAAC5BAAAAAAAALoEAAAAAAAAAAAAALoEAAAAAAAAuwQAAAAAAAAAAAAAuwQAAAAAAAC8BAAAAAAAAAAAAAC8BAAAAAAAAL0EAAAAAAAAAAAAAL0EAAAAAAAAvgQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtQQAAAAAAAC1BAAAAAAAAAAAAAAAAPC/"
				],
				[
					1495,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAL4EAAAAAAAAwAQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvgQAAAAAAAC+BAAAAAAAAAAAAAAAAPC/"
				],
				[
					1496,
					1,
					"insert",
					{
						"characters": "row"
					},
					"AwAAAL8EAAAAAAAAwAQAAAAAAAAAAAAAwAQAAAAAAADBBAAAAAAAAAAAAADBBAAAAAAAAMIEAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvwQAAAAAAAC/BAAAAAAAAAAAAAAAAPC/"
				],
				[
					1498,
					1,
					"insert",
					{
						"characters": " ?"
					},
					"AgAAAMMEAAAAAAAAxAQAAAAAAAAAAAAAxAQAAAAAAADFBAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwwQAAAAAAADDBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1499,
					1,
					"insert",
					{
						"characters": "?"
					},
					"AQAAAMUEAAAAAAAAxgQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxQQAAAAAAADFBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1500,
					1,
					"left_delete",
					null,
					"AQAAAMUEAAAAAAAAxQQAAAAAAAABAAAAPw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxgQAAAAAAADGBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1501,
					1,
					"insert",
					{
						"characters": "?="
					},
					"AgAAAMUEAAAAAAAAxgQAAAAAAAAAAAAAxgQAAAAAAADHBAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxQQAAAAAAADFBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1502,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMcEAAAAAAAAyAQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxwQAAAAAAADHBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1503,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAMgEAAAAAAAAygQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAyAQAAAAAAADIBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1505,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAMoEAAAAAAAAywQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAygQAAAAAAADKBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1506,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAMsEAAAAAAAAzAQAAAAAAAAAAAAAzAQAAAAAAADQBAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAywQAAAAAAADLBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1508,
					1,
					"cut",
					null,
					"AQAAALoEAAAAAAAAugQAAAAAAAAWAAAAcm93c1tyb3ddID8/PSAnJzsKICAgIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0AQAAAAAAAC6BAAAAAAAAAAAAAAAAERA"
				],
				[
					1509,
					2,
					"paste",
					null,
					"AgAAALoEAAAAAAAA0AQAAAAAAAAAAAAA0AQAAAAAAADmBAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAugQAAAAAAAC6BAAAAAAAAAAAAAAAAPC/"
				],
				[
					1512,
					1,
					"insert",
					{
						"characters": "+"
					},
					"AwAAANoEAAAAAAAA2wQAAAAAAAAAAAAA2wQAAAAAAADbBAAAAAAAAAIAAAA/P+EEAAAAAAAA4QQAAAAAAAAEAAAAICAgIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2gQAAAAAAADcBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1516,
					2,
					"left_delete",
					null,
					"AgAAAN4EAAAAAAAA3gQAAAAAAAABAAAAJ90EAAAAAAAA3QQAAAAAAAABAAAAJw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3wQAAAAAAADfBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1517,
					1,
					"insert",
					{
						"characters": "pixel"
					},
					"BQAAAN0EAAAAAAAA3gQAAAAAAAAAAAAA3gQAAAAAAADfBAAAAAAAAAAAAADfBAAAAAAAAOAEAAAAAAAAAAAAAOAEAAAAAAAA4QQAAAAAAAAAAAAA4QQAAAAAAADiBAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3QQAAAAAAADdBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1518,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAOIEAAAAAAAA5AQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4gQAAAAAAADiBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1519,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAOMEAAAAAAAA5AQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4wQAAAAAAADjBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1521,
					1,
					"insert",
					{
						"characters": " >"
					},
					"AgAAAOUEAAAAAAAA5gQAAAAAAAAAAAAA5gQAAAAAAADnBAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5QQAAAAAAADlBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1522,
					1,
					"insert",
					{
						"characters": " 127"
					},
					"BAAAAOcEAAAAAAAA6AQAAAAAAAAAAAAA6AQAAAAAAADpBAAAAAAAAAAAAADpBAAAAAAAAOoEAAAAAAAAAAAAAOoEAAAAAAAA6wQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5wQAAAAAAADnBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1523,
					1,
					"insert",
					{
						"characters": " ?"
					},
					"AgAAAOsEAAAAAAAA7AQAAAAAAAAAAAAA7AQAAAAAAADtBAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6wQAAAAAAADrBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1524,
					1,
					"insert",
					{
						"characters": " '1'"
					},
					"BAAAAO0EAAAAAAAA7gQAAAAAAAAAAAAA7gQAAAAAAADvBAAAAAAAAAAAAADvBAAAAAAAAPAEAAAAAAAAAAAAAPAEAAAAAAAA8QQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA7QQAAAAAAADtBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1525,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAAPEEAAAAAAAA8gQAAAAAAAAAAAAA8gQAAAAAAADzBAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA8QQAAAAAAADxBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1526,
					1,
					"insert",
					{
						"characters": " '0'"
					},
					"BAAAAPMEAAAAAAAA9AQAAAAAAAAAAAAA9AQAAAAAAAD1BAAAAAAAAAAAAAD1BAAAAAAAAPYEAAAAAAAAAAAAAPYEAAAAAAAA9wQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA8wQAAAAAAADzBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1533,
					1,
					"cut",
					null,
					"AQAAAPoEAAAAAAAA+gQAAAAAAAAdAAAAY29uc29sZS5sb2coJ3BpeGVsJywgcGl4ZWwpOwo",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+gQAAAAAAAAXBQAAAAAAAAAAAAAAAAAA"
				],
				[
					1535,
					1,
					"paste",
					null,
					"AQAAAP4EAAAAAAAAGwUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/gQAAAAAAAD+BAAAAAAAAAAAAAAAAAAA"
				],
				[
					1537,
					5,
					"left_delete",
					null,
					"BQAAAA8FAAAAAAAADwUAAAAAAAABAAAAbA4FAAAAAAAADgUAAAAAAAABAAAAZQ0FAAAAAAAADQUAAAAAAAABAAAAeAwFAAAAAAAADAUAAAAAAAABAAAAaQsFAAAAAAAACwUAAAAAAAABAAAAcA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEAUAAAAAAAAQBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1538,
					1,
					"insert",
					{
						"characters": "rows"
					},
					"BAAAAAsFAAAAAAAADAUAAAAAAAAAAAAADAUAAAAAAAANBQAAAAAAAAAAAAANBQAAAAAAAA4FAAAAAAAAAAAAAA4FAAAAAAAADwUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAACwUAAAAAAAALBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1540,
					5,
					"right_delete",
					null,
					"BQAAABIFAAAAAAAAEgUAAAAAAAABAAAAcBIFAAAAAAAAEgUAAAAAAAABAAAAaRIFAAAAAAAAEgUAAAAAAAABAAAAeBIFAAAAAAAAEgUAAAAAAAABAAAAZRIFAAAAAAAAEgUAAAAAAAABAAAAbA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEgUAAAAAAAASBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1541,
					1,
					"insert",
					{
						"characters": "rows"
					},
					"BAAAABIFAAAAAAAAEwUAAAAAAAAAAAAAEwUAAAAAAAAUBQAAAAAAAAAAAAAUBQAAAAAAABUFAAAAAAAAAAAAABUFAAAAAAAAFgUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEgUAAAAAAAASBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1545,
					1,
					"insert",
					{
						"characters": "re"
					},
					"AgAAABgFAAAAAAAAGQUAAAAAAAAAAAAAGQUAAAAAAAAaBQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGAUAAAAAAAAYBQAAAAAAAP///////+9/"
				],
				[
					1546,
					2,
					"left_delete",
					null,
					"AgAAABkFAAAAAAAAGQUAAAAAAAABAAAAZRgFAAAAAAAAGAUAAAAAAAABAAAAcg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGgUAAAAAAAAaBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1547,
					1,
					"insert",
					{
						"characters": "\nreturn"
					},
					"BwAAABgFAAAAAAAAGQUAAAAAAAAAAAAAGQUAAAAAAAAaBQAAAAAAAAAAAAAaBQAAAAAAABsFAAAAAAAAAAAAABsFAAAAAAAAHAUAAAAAAAAAAAAAHAUAAAAAAAAdBQAAAAAAAAAAAAAdBQAAAAAAAB4FAAAAAAAAAAAAAB4FAAAAAAAAHwUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGAUAAAAAAAAYBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1548,
					1,
					"insert",
					{
						"characters": " rows.join"
					},
					"CgAAAB8FAAAAAAAAIAUAAAAAAAAAAAAAIAUAAAAAAAAhBQAAAAAAAAAAAAAhBQAAAAAAACIFAAAAAAAAAAAAACIFAAAAAAAAIwUAAAAAAAAAAAAAIwUAAAAAAAAkBQAAAAAAAAAAAAAkBQAAAAAAACUFAAAAAAAAAAAAACUFAAAAAAAAJgUAAAAAAAAAAAAAJgUAAAAAAAAnBQAAAAAAAAAAAAAnBQAAAAAAACgFAAAAAAAAAAAAACgFAAAAAAAAKQUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHwUAAAAAAAAfBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1549,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAACkFAAAAAAAAKwUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKQUAAAAAAAApBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1550,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAACoFAAAAAAAALAUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKgUAAAAAAAAqBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1551,
					1,
					"insert",
					{
						"characters": "\\n"
					},
					"AgAAACsFAAAAAAAALAUAAAAAAAAAAAAALAUAAAAAAAAtBQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKwUAAAAAAAArBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1553,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAC8FAAAAAAAAMAUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALwUAAAAAAAAvBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1569,
					1,
					"paste",
					null,
					"AQAAABYFAAAAAAAAIQUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFgUAAAAAAAAWBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1606,
					1,
					"insert",
					{
						"characters": "<128"
					},
					"BQAAAOYEAAAAAAAA5wQAAAAAAAAAAAAA5wQAAAAAAADnBAAAAAAAAAIAAAA+IOcEAAAAAAAA6AQAAAAAAAAAAAAA6AQAAAAAAADpBAAAAAAAAAAAAADpBAAAAAAAAOoEAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5gQAAAAAAADoBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1607,
					3,
					"right_delete",
					null,
					"AwAAAOoEAAAAAAAA6gQAAAAAAAABAAAAMeoEAAAAAAAA6gQAAAAAAAABAAAAMuoEAAAAAAAA6gQAAAAAAAABAAAANw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6gQAAAAAAADqBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1613,
					8,
					"left_delete",
					null,
					"CAAAABAFAAAAAAAAEAUAAAAAAAABAAAAIA8FAAAAAAAADwUAAAAAAAABAAAALA4FAAAAAAAADgUAAAAAAAABAAAAJw0FAAAAAAAADQUAAAAAAAABAAAAcwwFAAAAAAAADAUAAAAAAAABAAAAdwsFAAAAAAAACwUAAAAAAAABAAAAbwoFAAAAAAAACgUAAAAAAAABAAAAcgkFAAAAAAAACQUAAAAAAAABAAAAJw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEQUAAAAAAAARBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1622,
					1,
					"cut",
					null,
					"AQAAAP0EAAAAAAAA/QQAAAAAAAAeAAAAY29uc29sZS5sb2cocm93cy5qb2luKCdcbicpKTsK",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/QQAAAAAAAAbBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1628,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAAN0KAAAAAAAA3goAAAAAAAAAAAAA3goAAAAAAADfCgAAAAAAAAAAAADfCgAAAAAAAOAKAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3QoAAAAAAADdCgAAAAAAAAAAAAAAAAAA"
				],
				[
					1629,
					1,
					"insert",
					{
						"characters": " asc="
					},
					"BQAAAOAKAAAAAAAA4QoAAAAAAAAAAAAA4QoAAAAAAADiCgAAAAAAAAAAAADiCgAAAAAAAOMKAAAAAAAAAAAAAOMKAAAAAAAA5AoAAAAAAAAAAAAA5AoAAAAAAADlCgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4AoAAAAAAADgCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1631,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAPkKAAAAAAAA+goAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+QoAAAAAAAD5CgAAAAAAAP///////+9/"
				],
				[
					1632,
					1,
					"paste",
					null,
					"AQAAAPoKAAAAAAAAGAsAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+goAAAAAAAD6CgAAAAAAAAAAAAAAAPC/"
				],
				[
					1654,
					1,
					"insert",
					{
						"characters": "ascs"
					},
					"BQAAAAYLAAAAAAAABwsAAAAAAAAAAAAABwsAAAAAAAAHCwAAAAAAAA8AAAByb3dzLmpvaW4oJ1xuJykHCwAAAAAAAAgLAAAAAAAAAAAAAAgLAAAAAAAACQsAAAAAAAAAAAAACQsAAAAAAAAKCwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABgsAAAAAAAAVCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1655,
					1,
					"left_delete",
					null,
					"AQAAAAkLAAAAAAAACQsAAAAAAAABAAAAcw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAACgsAAAAAAAAKCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1666,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAAKQKAAAAAAAApQoAAAAAAAAAAAAApQoAAAAAAACmCgAAAAAAAAAAAACmCgAAAAAAAKcKAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApAoAAAAAAACkCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1667,
					1,
					"insert",
					{
						"characters": " j=0;"
					},
					"BQAAAKcKAAAAAAAAqAoAAAAAAAAAAAAAqAoAAAAAAACpCgAAAAAAAAAAAACpCgAAAAAAAKoKAAAAAAAAAAAAAKoKAAAAAAAAqwoAAAAAAAAAAAAAqwoAAAAAAACsCgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApwoAAAAAAACnCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1669,
					1,
					"insert",
					{
						"characters": "j++;"
					},
					"BAAAABQLAAAAAAAAFQsAAAAAAAAAAAAAFQsAAAAAAAAWCwAAAAAAAAAAAAAWCwAAAAAAABcLAAAAAAAAAAAAABcLAAAAAAAAGAsAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFAsAAAAAAAAUCwAAAAAAAAAAAAAAAFRA"
				],
				[
					1674,
					1,
					"insert",
					{
						"characters": "'"
					},
					"AQAAAA4LAAAAAAAADwsAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADgsAAAAAAAAOCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1675,
					1,
					"left_delete",
					null,
					"AQAAAA4LAAAAAAAADgsAAAAAAAABAAAAJw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADwsAAAAAAAAPCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1676,
					1,
					"insert",
					{
						"characters": "$"
					},
					"AQAAAA4LAAAAAAAADwsAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADgsAAAAAAAAOCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1677,
					1,
					"left_delete",
					null,
					"AQAAAA4LAAAAAAAADgsAAAAAAAABAAAAJA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADwsAAAAAAAAPCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1678,
					1,
					"insert",
					{
						"characters": "j+'\\"
					},
					"BAAAAA4LAAAAAAAADwsAAAAAAAAAAAAADwsAAAAAAAAQCwAAAAAAAAAAAAAQCwAAAAAAABELAAAAAAAAAAAAABELAAAAAAAAEgsAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADgsAAAAAAAAOCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1679,
					1,
					"insert",
					{
						"characters": "n'+"
					},
					"AwAAABILAAAAAAAAEwsAAAAAAAAAAAAAEwsAAAAAAAAUCwAAAAAAAAAAAAAUCwAAAAAAABULAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEgsAAAAAAAASCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1682,
					1,
					"revert",
					null,
					"BQAAAAAAAAAAAAAAAAAAAAAAAAAvDwAAaW1wb3J0ICogYXMgY3YgZnJvbSAnb3BlbmN2JzsKaW1wb3J0IENvbnNvbGUgZnJvbSAnY29uc29sZSc7CmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7CmltcG9ydCB7cmFuZ2V9IGZyb20gJ3V0aWwnOwppbXBvcnQgVXRpbCBmcm9tICcuL2xpYi91dGlsLmpzJzsKaW1wb3J0IHsgUkdCQSwgSFNMQSB9IGZyb20gJy4vbGliL2NvbG9yLmpzJzsKCmZ1bmN0aW9uIEdyYXlzY2FsZShzcmMsIGRzdCkgewogIGxldCBjaGFubmVscyA9IFtdOwogIGN2LmN2dENvbG9yKHNyYywgZHN0LCBjdi5DT0xPUl9CR1IyTGFiKTsKICBjdi5zcGxpdChkc3QsIGNoYW5uZWxzKTsKICBjaGFubmVsc1swXS5jb3B5VG8oZHN0KTsKfQoKZnVuY3Rpb24qIFRyYXZlcnNlSGllcmFyY2h5KGgsIHMgPSAtMSwgZGVwdGggPSAwKSB7CiAgbGV0IGEgPSBBcnJheS5pc0FycmF5KGgpID8gaCA6IFsuLi5oXTsKICBsZXQgaSA9IGFbc10gPyBzIDogYS5maW5kSW5kZXgoKFtuLCBwLCBjLCB1XSkgPT4gdSA9PSAtMSk7CiAgd2hpbGUoYVtpXSkgewogICAgbGV0IGVudHJ5ID0gYVtpXTsKICAgIGxldCBbLCBwcmV2LCBjaGlsZF0gPSBlbnRyeTsKICAgIHlpZWxkIFtpLCBkZXB0aF07CiAgICBpZihhW2NoaWxkXSkgeWllbGQqIFRyYXZlcnNlSGllcmFyY2h5KGgsIGNoaWxkLCBkZXB0aCArIDEpOwogICAgaSA9IGVudHJ5W2N2LkhJRVJfTkVYVF07CiAgfQp9CgpmdW5jdGlvbiogU2VnbWVudFJlY3Qoc2l6ZSwgc2VnID0gbmV3IGN2LlNpemUoMTQsMTIpKSB7CiAgbGV0IHJlY3QgPSBzaXplIGluc3RhbmNlb2YgY3YuU2l6ZSA/ICBuZXcgY3YuUmVjdCgwLCAwLCAuLi5zaXplKSA6IG5ldyBjdi5SZWN0KHNpemUpOwoKICBsZXQgcm93cyA9IHJlY3QudnNwbGl0KC4uLnJhbmdlKDAsc2l6ZS5oZWlnaHQsc2VnLmhlaWdodCkuc2xpY2UoMSwtMSkpOwpsZXQgeT0wOwogIGZvcihsZXQgcm93IG9mIHJvd3MpIHsKICAgIGxldCB4PTA7CiAgICBsZXQgY29scyA9IHJvdy5oc3BsaXQoLi4ucmFuZ2UoMCxzaXplLndpZHRoLHNlZy53aWR0aCkuc2xpY2UoMSwtMSkpOwoKLy95aWVsZCBjb2xzOwogICAgZm9yKGxldCBjb2wgb2YgY29scykgeyB5aWVsZCBjb2w7IHgrKzsgfQogICAgeSsrOwogIH0KfQoKZnVuY3Rpb24gSW1hZ2UyQVNDSUkoaW1nKSB7CiAgbGV0IHJvd3M9W107CiAgIGZvcihsZXQgW1tyb3csY29sXSwgcGl4ZWxdIG9mIGltZy5lbnRyaWVzKCkpIHsKICAgIHJvd3Nbcm93XSA/Pz0gJyc7CiAgICByb3dzW3Jvd10gKz0gcGl4ZWxbMF0gPDEyOCA/ICcxJyA6ICcwJzsKCiAgfQpyZXR1cm4gcm93cy5qb2luKCdcbicpOwp9CgpmdW5jdGlvbiBtYWluKC4uLmFyZ3MpIHsKICBnbG9iYWxUaGlzLmNvbnNvbGUgPSBuZXcgQ29uc29sZShwcm9jZXNzLnN0ZG91dCwgewogICAgaW5zcGVjdE9wdGlvbnM6IHsKICAgICAgbWF4U3RyaW5nTGVuZ3RoOiAyMDAsCiAgICAgIG1heEFycmF5TGVuZ3RoOiAxMCwKICAgICAgY29tcGFjdDogMCwKICAgICAgZGVwdGg6IDEwCiAgICB9CiAgfSk7CiAgbGV0IGN0b3JfbmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhjdikuZmlsdGVyKG5hbWUgPT4gdHlwZW9mIGN2W25hbWVdID09ICdmdW5jdGlvbicpOwoKICBsZXQgZmVhdHVyZXMyZF9uYW1lcyA9IGN0b3JfbmFtZXMuZmlsdGVyKAogICAgbmFtZSA9PiBjdltuYW1lXS5wcm90b3R5cGUgJiYgY3ZbbmFtZV0ucHJvdG90eXBlW1N5bWJvbC50b1N0cmluZ1RhZ10gPT0gJ0ZlYXR1cmUyRCcKICApOwoKICBjb25zb2xlLmxvZygnY3YnLCBmZWF0dXJlczJkX25hbWVzKTsKCiAgbGV0IGltZyA9IGN2LmltcmVhZChhcmdzWzBdID8/ICcvaG9tZS9yb21hbi9Eb2t1bWVudGUvbm9raWE1NTEwLnBuZycpOwogIGxldCBmbG9hdCA9IG5ldyBjdi5NYXQoKSwKICAgIGNhbm55ID0gbmV3IGN2Lk1hdCgpOwogIGxldCBncmF5ID0gbmV3IGN2Lk1hdCgpOwoKICBsZXQgY2hhbm5lbHMgPSBbXTsKICBjdi5zcGxpdChpbWcsIGNoYW5uZWxzKTsKCiAgR3JheXNjYWxlKGltZywgZ3JheSk7CiAgZ3JheS5jb252ZXJ0VG8oZmxvYXQsIGN2LkNWXzMyRiwgMS4wIC8gMjU1LjApOwogIGNvbnNvbGUubG9nKCdmbG9hdCcsIGZsb2F0KTsKICBsZXQgbmEgPSBuZXcgRmxvYXQzMkFycmF5KGZsb2F0LmJ1ZmZlcik7CiAgY29uc29sZS5sb2coJ25hJywgbmEpOwoKbGV0IGRibCA9IG5ldyBjdi5NYXQoKTsKCgpjdi5yZXNpemUoaW1nLCBkYmwsIG5ldyBjdi5TaXplKGltZy5jb2xzKjIsaW1nLnJvd3MqMiksIDAsMCwgY3YuSU5URVJfTElORUFSKTsKY3YudGhyZXNob2xkKGRibCwgZGJsLCAxMjcsIDI1NSwgY3YuVEhSRVNIX0JJTkFSWSk7CgpsZXQgbXJlY3QgPSBuZXcgY3YuUmVjdCgwLDEyLDg0LDI0KTsKbGV0IG1pZGRsZSA9IGltZyhtcmVjdCk7CgpsZXQgY2hhcnMgPSAnMTIzNDVWNjc4OTBWJzsKCmxldCBzZWdtZW50cyA9IFsuLi5TZWdtZW50UmVjdChpbWcuc2l6ZSwgbmV3IGN2LlNpemUoMTQsMjQgKSldOwpjb25zb2xlLmxvZygnc2VnbWVudHMnLGNvbnNvbGUuY29uZmlnKHsgY29tcGFjdDogMCB9KSwgICBzZWdtZW50cyk7CmxldCBpID0gMDsKZm9yKGxldCBzZWdtZW50IG9mIHNlZ21lbnRzKSB7CiAgbGV0IHN1YnNlZ3MgPSAgWy4uLlNlZ21lbnRSZWN0KHNlZ21lbnQsIG5ldyBjdi5TaXplKDE0LDggKSldOwoKICBjb25zb2xlLmxvZygnc3Vic2VncycsY2hhcnNbaV0sIGNvbnNvbGUuY29uZmlnKHsgY29tcGFjdDogMCB9KSwgICBzdWJzZWdzKTsKbGV0IGo9MDsKZm9yKGxldCBzdWJzZWcgb2Ygc3Vic2VncykgewpsZXQgc2VnaW1nID0gaW1nKHN1YnNlZyk7CgpsZXQgYXNjPUltYWdlMkFTQ0lJKHNlZ2ltZyk7CmNvbnNvbGUubG9nKGorJ1xuJythc2MpOwpqKys7Cn0KCmkrKzsKfQoKLyogIGxldCBjb250b3VycywKICAgIGhpZXIsCiAgICBsaW5lcyA9IG5ldyBjdi5NYXQoKTsKICBjdi5DYW5ueShncmF5LCBjYW5ueSwgMCwgOTAsIDMpOwogIGN2LmZpbmRDb250b3VycyhjYW5ueSwgKGNvbnRvdXJzID0gW10pLCAoaGllciA9IG5ldyBjdi5NYXQoKSksIGN2LlJFVFJfRVhURVJOQUwsIGN2LkNIQUlOX0FQUFJPWF9TSU1QTEUpOwoKCiAgY29uc29sZS5sb2coJ2NvbnRvdXJzLmxlbmd0aCcsIGNvbnRvdXJzLmxlbmd0aCk7CgogIGN2LmN2dENvbG9yKGdyYXksIGltZywgY3YuQ09MT1JfR1JBWTJCR1IpOwogIGN2LmRyYXdDb250b3VycyhpbWcsIGNvbnRvdXJzLCAtMSwgeyByOiAwLCBnOiAyNTUsIGI6IDAsIGE6IDI1NSB9LCAxLCBjdi5MSU5FX0FBKTsKICBsZXQgcmVjdHMgPSBuZXcgQXJyYXkoY29udG91cnMubGVuZ3RoKTsKICBmb3IobGV0IFtpZCwgZGVwdGhdIG9mIFRyYXZlcnNlSGllcmFyY2h5KGhpZXIsIDApKSB7CgogICAgY29uc3QgYyA9IGNvbnRvdXJzW2lkXTsKICAgIGxldCBjb250b3VyID0gYzsKCiAgICBjb25zdCByID0gY29udG91ci5ib3VuZGluZ1JlY3QoKTsKICAgIGNbNF0gPSByZWN0c1tpZF0gPSByOwogICAgY29uc3QgeyB0bCwgYnIgfSA9IHI7CgoKICAgIGN2LnJlY3RhbmdsZShpbWcsIHRsLCBiciwgWzI1NSwgMCwgMjU1LCAyNTVdLCAxLCBjdi5MSU5FX0FBKTsKICB9Ki8KCiAgY3YubmFtZWRXaW5kb3coJ2ltZycpOwogLy8gY3YucmVzaXplV2luZG93KCdpbWcnLCAxMjgwLCA4MDApOwogIGN2Lmltc2hvdygnaW1nJywgZGJsKTsKCiAgY3YubW92ZVdpbmRvdygnaW1nJywgMCwgMCk7CgogIGN2LndhaXRLZXkoLTEpOwoKICBjb25zb2xlLmxvZygnRVhJVCcpOwp9CnRyeSB7CiAgbWFpbiguLi5zY3JpcHRBcmdzLnNsaWNlKDEpKTsKfSBjYXRjaChlcnJvcikgewogIGNvbnNvbGUubG9nKGBGQUlMOiAke2Vycm9yPy5tZXNzYWdlfVxuJHtlcnJvcj8uc3RhY2t9YCk7CiAgc3RkLmV4aXQoMSk7Cn0gZmluYWxseSB7CiAgY29uc29sZS5sb2coJ1NVQ0NFU1MnKTsKfQoAAAAAAAAAAKcPAAAAAAAAAAAAAAAAAAAAAAAApw8AAAAAAAAAAAAAAAAAAAAAAACnDwAAAAAAAAAAAAAAAAAAAAAAAKcPAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFQsAAAAAAAAVCwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/grammars/css3.g4",
			"settings":
			{
				"buffer_size": 16907,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/tXml.js",
			"settings":
			{
				"buffer_size": 13413,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/xml/util.js",
			"settings":
			{
				"buffer_size": 3713,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/json/util.js",
			"settings":
			{
				"buffer_size": 2519,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/util.js",
			"settings":
			{
				"buffer_size": 184762,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/deep.js",
			"settings":
			{
				"buffer_size": 7615,
				"line_ending": "Unix"
			}
		},
		{
			"file": "qjs-opencv/js_rect.cpp",
			"settings":
			{
				"buffer_size": 19913,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"prettier",
				"Formatter: Beautify With Prettier"
			],
			[
				"json",
				"Pretty JSON: Format JSON"
			],
			[
				"list pack",
				"Package Control: List Packages"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"edit ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"edit",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"outli",
				"Browse Mode: Outline (Right)"
			],
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"debugger",
				"Preferences: Debugger Settings"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"scheme",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"INSTALL",
				"Package Control: Install Package"
			],
			[
				"",
				"Arithmetic"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"adap",
				"Debugger: Install Adapters"
			],
			[
				"install ada",
				"Debugger: Install Adapters"
			],
			[
				"adapter",
				"Debugger: Install Adapters"
			],
			[
				"debug",
				"Debugger: Install Adapters"
			],
			[
				"Package Control: remove",
				"Package Control: Remove Package"
			],
			[
				"debu",
				"Debugger: Install Adapters"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 289.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv",
		"/home/roman/Projects/plot-cv/qjs-opencv"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/127.0.0.1.har",
		"/home/roman/Projects/plot-cv/libs.js",
		"/home/roman/Projects/plot-cv/lib/color/rgba.js",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-libc.c",
		"/home/roman/Projects/plot-cv/lib/devtools.js",
		"/home/roman/Projects/plot-cv/check-discogs.js",
		"/home/roman/Projects/plot-cv/lib/geom/point.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/point.js",
		"/home/roman/Projects/plot-cv/draw-utils.js",
		"/home/roman/Projects/plot-cv/test-nanovg.js",
		"/home/roman/Projects/plot-cv/test-glfw.js",
		"/home/roman/Projects/plot-cv/lib/util.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/js/cvHighGUI.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake/functions.cmake",
		"/home/roman/Projects/plot-cv/plot-cv.sublime-project",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/location.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-textcode.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/tty.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/path.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/path.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/qjsm.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tutf8e/README.md",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tutf8e/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tutf8e/src/tutf8e.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tutf8e/include/tutf8e/iso_8859_15.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tutf8e/include/tutf8e.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/buffer-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/buffer-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_textcode.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-textcode.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-path.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/queue.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/jslexer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/clexer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/lexer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fs.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_lexer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/list-exports.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/lexer/ecmascript.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/js-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/streams.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_streams.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/lexer/csv.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/js-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/libutf/include/libutf.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/char-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/char-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/libutf/src/libutf.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/ringbuffer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/defines.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/debug.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_stream.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/queue.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/ringbuffer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-location.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-xml.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-location.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-mmap.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/extract-structs.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-internal.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lexer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/token.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/token.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/buffer-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/buffer-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/char-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/location.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/location.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/queue.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/queue.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/js-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/js-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stringdecoder.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/qjsm.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/err",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/doc/latex/unionVector.tex",
		"/home/roman/.config/sublime-text/Packages/User/Themes/[ Argonaut ].tmTheme",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/vector.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/vector.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-blob.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-blob.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-internal.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/path.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/path.h",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-archive.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/predicate.c",
		"/usr/include/archive.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/debug.h",
		"/home/roman/Projects/plot-cv/quickjs/cutils.c",
		"/home/roman/Projects/plot-cv/quickjs/cutils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_repeater.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-deep.c.orig",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-tree-walker.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_dom.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake/FindQuickJS.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/dom.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/property-enumeration.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/property-enumeration.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-syscallerror.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_treewalker.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/char-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/xpath.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-child-process.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/child-process.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-repeater.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/predicate.h",
		"/home/roman/Projects/plot-cv/quickjs/list.h"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 130.0,
		"where_history":
		[
			"/home/roman/Projects/plot-cv,*.cpp,*.c,*.hpp,*.h,*.js,-*/libwebsockets/*,-*/glfw/*,-*/nanovg/*,-*/imgui/*,-*/disabled/*,-*/qjs-opencv/opencv*/*",
			"/home/roman/Projects/plot-cv,*.cpp,*.c,*.hpp,*.h,-*/libwebsockets/*,-*/glfw/*,-*/nanovg/*,-*/imgui/*,-*/disabled/*,-*/qjs-opencv/opencv*/*",
			"/home/roman/Projects/plot-cv,*.cpp,*.c,*.hpp,*.h,-*/libwebsockets/*,-*/glfw/*,-*/nanovg/*,-*/imgui/*,-*/disabled/*,-*/opencv_contrib/*",
			"/home/roman/Projects/plot-cv,*.cpp,*.c,*.hpp,*.h,-*/libwebsockets/*,-*/glfw/*,-*/nanovg/*,-*/imgui/*,-*/disabled/*",
			"/home/roman/Projects/plot-cv,*.cpp,*.c,*.hpp,*.h,-*/libwebsockets/*,-*/glfw/*,-*/nanovg/*,-*/imgui/*",
			"/home/roman/Projects/plot-cv,*.cpp,*.c,*.hpp,*.h,-*/libwebsockets/*,-*/glfw/*,-*/nanovg/*",
			"/home/roman/Projects/plot-cv,*.cpp,*.c,*.hpp,*.h,-*/(libwebsockets|glfw|nanovg)/*",
			"/home/roman/Projects/plot-cv,*.cpp,*.c,*.hpp,*.h,-*/libwebsockets/*",
			"/home/roman/Projects/plot-cv,*.cpp,*.c,*.hpp,*.h",
			"/home/roman/Projects/plot-cv,*.[ch]pp,*.[ch]",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"Util.isObject =",
			"symme",
			"elector",
			"compact",
			"misc\\.",
			"Rect",
			"VSPLIT:",
			"hsplit",
			"function ws",
			"dl\\(",
			"rotate =",
			"rotate",
			"begin",
			"context",
			"new GL$",
			"GLFW",
			"context =",
			"interpolate",
			"1\\.0 -",
			"alpha, ",
			"1 -",
			"1\\.0 -",
			"WINDOW_",
			"GLFW",
			"Window"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"util."
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 26681,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": "/home/roman/Projects/plot-cv/lib/util.js",
							"function_name_status_row": 28,
							"outline_rename_mode": false,
							"symkeys":
							[
								[
									771,
									788
								],
								[
									1023,
									1072
								],
								[
									1959,
									1963
								],
								[
									2779,
									2786
								],
								[
									3308,
									3322
								],
								[
									3582,
									3588
								],
								[
									3691,
									3718
								],
								[
									3766,
									3797
								],
								[
									3953,
									3963
								],
								[
									4002,
									4026
								],
								[
									4093,
									4109
								],
								[
									4154,
									4171
								],
								[
									4219,
									4239
								],
								[
									4290,
									4313
								],
								[
									4361,
									4387
								],
								[
									4788,
									4793
								],
								[
									4852,
									4876
								],
								[
									4899,
									4915
								],
								[
									4930,
									4941
								],
								[
									4981,
									4997
								],
								[
									5012,
									5024
								],
								[
									5065,
									5081
								],
								[
									5096,
									5111
								],
								[
									5155,
									5171
								],
								[
									5186,
									5204
								],
								[
									5251,
									5267
								],
								[
									5282,
									5303
								],
								[
									5353,
									5369
								],
								[
									5384,
									5408
								],
								[
									5534,
									5557
								],
								[
									5640,
									5660
								],
								[
									5915,
									5927
								],
								[
									5977,
									5989
								],
								[
									6109,
									6132
								],
								[
									6205,
									6231
								],
								[
									6466,
									6487
								],
								[
									6542,
									6563
								],
								[
									6692,
									6716
								],
								[
									6802,
									6809
								],
								[
									6830,
									6837
								],
								[
									6867,
									6889
								],
								[
									6972,
									6979
								],
								[
									6997,
									7004
								],
								[
									7029,
									7051
								],
								[
									7101,
									7108
								],
								[
									7162,
									7169
								],
								[
									7201,
									7230
								],
								[
									7576,
									7601
								],
								[
									7728,
									7747
								],
								[
									7829,
									7848
								],
								[
									8035,
									8054
								],
								[
									8132,
									8151
								],
								[
									8216,
									8235
								],
								[
									8331,
									8371
								],
								[
									8513,
									8526
								],
								[
									8552,
									8585
								],
								[
									8834,
									8848
								],
								[
									9009,
									9016
								],
								[
									9233,
									9239
								],
								[
									9645,
									9669
								],
								[
									10048,
									10084
								],
								[
									10126,
									10144
								],
								[
									10327,
									10364
								],
								[
									10445,
									10463
								],
								[
									10481,
									10492
								],
								[
									10558,
									10592
								],
								[
									10619,
									10637
								],
								[
									10912,
									10957
								],
								[
									11157,
									11175
								],
								[
									11426,
									11452
								],
								[
									11711,
									11730
								],
								[
									11809,
									11828
								],
								[
									11978,
									12026
								],
								[
									12207,
									12222
								],
								[
									12248,
									12258
								],
								[
									12345,
									12350
								],
								[
									13117,
									13123
								],
								[
									13199,
									13204
								],
								[
									13213,
									13218
								],
								[
									13247,
									13256
								],
								[
									13280,
									13290
								],
								[
									13312,
									13325
								],
								[
									13353,
									13367
								],
								[
									13393,
									13410
								],
								[
									13438,
									13456
								],
								[
									13557,
									13562
								],
								[
									13770,
									13793
								],
								[
									14244,
									14248
								],
								[
									14290,
									14294
								],
								[
									14401,
									14413
								],
								[
									15002,
									15012
								],
								[
									15100,
									15128
								],
								[
									15162,
									15168
								],
								[
									15230,
									15254
								],
								[
									15284,
									15325
								],
								[
									15601,
									15613
								],
								[
									15646,
									15678
								],
								[
									15720,
									15760
								],
								[
									15914,
									15934
								],
								[
									17220,
									17250
								],
								[
									17310,
									17347
								],
								[
									17532,
									17538
								],
								[
									17753,
									17783
								],
								[
									17863,
									17895
								],
								[
									18123,
									18153
								],
								[
									18290,
									18293
								],
								[
									18430,
									18464
								],
								[
									18621,
									18653
								],
								[
									18943,
									18971
								],
								[
									19049,
									19078
								],
								[
									19153,
									19190
								],
								[
									19240,
									19275
								],
								[
									19456,
									19491
								],
								[
									19791,
									19814
								],
								[
									19845,
									19869
								],
								[
									19933,
									19960
								],
								[
									19993,
									20033
								],
								[
									20151,
									20194
								],
								[
									20497,
									20526
								],
								[
									20583,
									20597
								],
								[
									20646,
									20675
								],
								[
									20717,
									20744
								],
								[
									20854,
									20861
								],
								[
									20881,
									20909
								],
								[
									20999,
									21026
								],
								[
									21065,
									21092
								],
								[
									21142,
									21166
								],
								[
									21241,
									21276
								],
								[
									21378,
									21410
								],
								[
									21495,
									21529
								],
								[
									21614,
									21644
								],
								[
									21864,
									21874
								],
								[
									21927,
									21931
								],
								[
									21999,
									22036
								],
								[
									22073,
									22090
								],
								[
									22113,
									22130
								],
								[
									22190,
									22207
								],
								[
									22293,
									22302
								],
								[
									22374,
									22388
								],
								[
									22456,
									22461
								],
								[
									23159,
									23197
								],
								[
									23348,
									23383
								],
								[
									23467,
									23485
								],
								[
									23543,
									23587
								],
								[
									23601,
									23610
								],
								[
									23642,
									23670
								],
								[
									23684,
									23693
								],
								[
									23762,
									23805
								],
								[
									23925,
									23958
								],
								[
									23985,
									23992
								],
								[
									24121,
									24126
								],
								[
									24142,
									24176
								],
								[
									24253,
									24279
								],
								[
									24377,
									24411
								],
								[
									24434,
									24448
								],
								[
									24483,
									24533
								],
								[
									24671,
									24717
								],
								[
									24778,
									24840
								],
								[
									24851,
									24867
								],
								[
									25002,
									25039
								],
								[
									25078,
									25135
								],
								[
									25506,
									25540
								],
								[
									25680,
									25719
								],
								[
									25799,
									25836
								],
								[
									25953,
									25984
								],
								[
									26739,
									26782
								],
								[
									26913,
									26918
								],
								[
									27074,
									27108
								],
								[
									27316,
									27352
								],
								[
									27414,
									27440
								],
								[
									28200,
									28225
								],
								[
									28293,
									28321
								],
								[
									28914,
									28933
								],
								[
									29028,
									29043
								],
								[
									29171,
									29196
								],
								[
									29496,
									29553
								],
								[
									29676,
									29741
								],
								[
									29851,
									29903
								],
								[
									30024,
									30074
								],
								[
									30190,
									30205
								],
								[
									30276,
									30287
								],
								[
									30375,
									30386
								],
								[
									30412,
									30427
								],
								[
									30505,
									30519
								],
								[
									30559,
									30578
								],
								[
									30801,
									30890
								],
								[
									30893,
									30990
								],
								[
									31046,
									31058
								],
								[
									31123,
									31137
								],
								[
									31169,
									31175
								],
								[
									31218,
									31226
								],
								[
									31272,
									31280
								],
								[
									31336,
									31351
								],
								[
									31404,
									31411
								],
								[
									31522,
									31532
								],
								[
									31674,
									31684
								],
								[
									31747,
									31754
								],
								[
									31839,
									31866
								],
								[
									31890,
									31899
								],
								[
									31925,
									31933
								],
								[
									31950,
									31959
								],
								[
									31998,
									32006
								],
								[
									32017,
									32030
								],
								[
									32041,
									32056
								],
								[
									32085,
									32103
								],
								[
									32183,
									32207
								],
								[
									32628,
									32662
								],
								[
									32693,
									32704
								],
								[
									32709,
									32719
								],
								[
									32733,
									32744
								],
								[
									32765,
									32801
								],
								[
									33305,
									33335
								],
								[
									33379,
									33410
								],
								[
									33645,
									33667
								],
								[
									33727,
									33753
								],
								[
									33869,
									33880
								],
								[
									33992,
									34023
								],
								[
									34227,
									34252
								],
								[
									34319,
									34371
								],
								[
									34483,
									34505
								],
								[
									34511,
									34532
								],
								[
									34549,
									34581
								],
								[
									34701,
									34736
								],
								[
									34801,
									34834
								],
								[
									34881,
									34893
								],
								[
									34963,
									34975
								],
								[
									35032,
									35063
								],
								[
									35107,
									35149
								],
								[
									35325,
									35353
								],
								[
									35464,
									35494
								],
								[
									35506,
									35523
								],
								[
									35647,
									35683
								],
								[
									35760,
									35786
								],
								[
									35828,
									35867
								],
								[
									35979,
									35983
								],
								[
									36010,
									36014
								],
								[
									36053,
									36057
								],
								[
									36085,
									36089
								],
								[
									36112,
									36148
								],
								[
									36186,
									36218
								],
								[
									36336,
									36377
								],
								[
									36470,
									36494
								],
								[
									36517,
									36528
								],
								[
									36546,
									36563
								],
								[
									36649,
									36673
								],
								[
									36696,
									36722
								],
								[
									37178,
									37210
								],
								[
									37464,
									37473
								],
								[
									37504,
									37513
								],
								[
									37544,
									37553
								],
								[
									37584,
									37593
								],
								[
									37624,
									37633
								],
								[
									37663,
									37672
								],
								[
									37703,
									37712
								],
								[
									37721,
									37741
								],
								[
									37785,
									37790
								],
								[
									37833,
									37842
								],
								[
									38010,
									38043
								],
								[
									38417,
									38443
								],
								[
									38669,
									38712
								],
								[
									38754,
									38766
								],
								[
									38844,
									38889
								],
								[
									39010,
									39030
								],
								[
									39151,
									39158
								],
								[
									39177,
									39184
								],
								[
									39364,
									39393
								],
								[
									39522,
									39567
								],
								[
									39695,
									39727
								],
								[
									39806,
									39827
								],
								[
									40078,
									40096
								],
								[
									40283,
									40296
								],
								[
									40418,
									40466
								],
								[
									40479,
									40488
								],
								[
									40526,
									40536
								],
								[
									40583,
									40617
								],
								[
									40894,
									40936
								],
								[
									40990,
									41028
								],
								[
									41190,
									41209
								],
								[
									41409,
									41448
								],
								[
									41582,
									41599
								],
								[
									42139,
									42159
								],
								[
									42247,
									42266
								],
								[
									42307,
									42326
								],
								[
									44179,
									44186
								],
								[
									44201,
									44208
								],
								[
									45825,
									45858
								],
								[
									46006,
									46015
								],
								[
									46035,
									46043
								],
								[
									46047,
									46056
								],
								[
									46197,
									46225
								],
								[
									46339,
									46367
								],
								[
									46481,
									46499
								],
								[
									46878,
									46913
								],
								[
									46953,
									46980
								],
								[
									47061,
									47109
								],
								[
									47320,
									47407
								],
								[
									47418,
									47434
								],
								[
									47543,
									47583
								],
								[
									47609,
									47613
								],
								[
									47630,
									47635
								],
								[
									47654,
									47659
								],
								[
									47677,
									47714
								],
								[
									47740,
									47744
								],
								[
									47750,
									47756
								],
								[
									47771,
									47777
								],
								[
									47785,
									47791
								],
								[
									47807,
									47844
								],
								[
									47870,
									47874
								],
								[
									47888,
									47894
								],
								[
									47902,
									47908
								],
								[
									47915,
									47921
								],
								[
									47938,
									47991
								],
								[
									47992,
									48009
								],
								[
									48114,
									48133
								],
								[
									48180,
									48218
								],
								[
									48243,
									48256
								],
								[
									48851,
									48895
								],
								[
									48967,
									48985
								],
								[
									49239,
									49257
								],
								[
									49584,
									49611
								],
								[
									49620,
									49635
								],
								[
									49711,
									49738
								],
								[
									49865,
									49869
								],
								[
									49947,
									49960
								],
								[
									50157,
									50186
								],
								[
									50294,
									50320
								],
								[
									50388,
									50415
								],
								[
									50687,
									50708
								],
								[
									50778,
									50803
								],
								[
									50823,
									50845
								],
								[
									50909,
									50934
								],
								[
									51059,
									51083
								],
								[
									51307,
									51323
								],
								[
									51324,
									51343
								],
								[
									51376,
									51396
								],
								[
									51485,
									51513
								],
								[
									51611,
									51636
								],
								[
									51686,
									51713
								],
								[
									51716,
									51735
								],
								[
									52040,
									52070
								],
								[
									52113,
									52128
								],
								[
									52196,
									52219
								],
								[
									52258,
									52262
								],
								[
									52302,
									52306
								],
								[
									52344,
									52368
								],
								[
									52435,
									52471
								],
								[
									52536,
									52543
								],
								[
									52581,
									52620
								],
								[
									52760,
									52793
								],
								[
									52985,
									52996
								],
								[
									53093,
									53124
								],
								[
									53183,
									53239
								],
								[
									53603,
									53644
								],
								[
									54010,
									54050
								],
								[
									54278,
									54326
								],
								[
									54358,
									54367
								],
								[
									54650,
									54689
								],
								[
									54700,
									54709
								],
								[
									54748,
									54759
								],
								[
									55164,
									55205
								],
								[
									55251,
									55284
								],
								[
									55361,
									55396
								],
								[
									55496,
									55539
								],
								[
									55719,
									55755
								],
								[
									56072,
									56111
								],
								[
									56247,
									56295
								],
								[
									56463,
									56477
								],
								[
									56649,
									56656
								],
								[
									56772,
									56779
								],
								[
									57114,
									57138
								],
								[
									57168,
									57185
								],
								[
									57242,
									57264
								],
								[
									57293,
									57310
								],
								[
									57416,
									57447
								],
								[
									57521,
									57541
								],
								[
									57675,
									57709
								],
								[
									57739,
									57748
								],
								[
									57768,
									57776
								],
								[
									57780,
									57789
								],
								[
									57882,
									57916
								],
								[
									58217,
									58250
								],
								[
									58612,
									58646
								],
								[
									59016,
									59050
								],
								[
									59333,
									59377
								],
								[
									60002,
									60041
								],
								[
									60169,
									60251
								],
								[
									61377,
									61390
								],
								[
									61408,
									61417
								],
								[
									61435,
									61444
								],
								[
									61495,
									61506
								],
								[
									61530,
									61542
								],
								[
									61549,
									61560
								],
								[
									61597,
									61602
								],
								[
									61705,
									61710
								],
								[
									61855,
									61860
								],
								[
									61893,
									61898
								],
								[
									61933,
									61938
								],
								[
									62133,
									62138
								],
								[
									62342,
									62375
								],
								[
									62388,
									62389
								],
								[
									62798,
									62831
								],
								[
									62995,
									63032
								],
								[
									63040,
									63041
								],
								[
									63517,
									63524
								],
								[
									63663,
									63674
								],
								[
									63760,
									63771
								],
								[
									64058,
									64072
								],
								[
									64615,
									64647
								],
								[
									65157,
									65195
								],
								[
									65494,
									65517
								],
								[
									65530,
									65550
								],
								[
									65613,
									65627
								],
								[
									65631,
									65645
								],
								[
									65722,
									65737
								],
								[
									65811,
									65825
								],
								[
									65868,
									65891
								],
								[
									66083,
									66101
								],
								[
									66307,
									66321
								],
								[
									66325,
									66339
								],
								[
									66510,
									66532
								],
								[
									67076,
									67081
								],
								[
									67123,
									67129
								],
								[
									67172,
									67179
								],
								[
									67208,
									67247
								],
								[
									67276,
									67286
								],
								[
									67292,
									67301
								],
								[
									67319,
									67346
								],
								[
									67386,
									67395
								],
								[
									67404,
									67412
								],
								[
									67460,
									67469
								],
								[
									67495,
									67504
								],
								[
									67515,
									67523
								],
								[
									67595,
									67604
								],
								[
									67695,
									67739
								],
								[
									67801,
									67862
								],
								[
									68170,
									68196
								],
								[
									68224,
									68229
								],
								[
									68253,
									68266
								],
								[
									68374,
									68439
								],
								[
									68543,
									68569
								],
								[
									68603,
									68629
								],
								[
									68650,
									68683
								],
								[
									68711,
									68727
								],
								[
									68742,
									68749
								],
								[
									68771,
									68787
								],
								[
									68812,
									68839
								],
								[
									68896,
									68911
								],
								[
									68933,
									68945
								],
								[
									68962,
									68977
								],
								[
									68987,
									68996
								],
								[
									69036,
									69045
								],
								[
									69052,
									69058
								],
								[
									69070,
									69099
								],
								[
									69185,
									69195
								],
								[
									69236,
									69251
								],
								[
									69270,
									69283
								],
								[
									69708,
									69718
								],
								[
									69857,
									69869
								],
								[
									70149,
									70170
								],
								[
									70356,
									70367
								],
								[
									70404,
									70413
								],
								[
									70493,
									70526
								],
								[
									70831,
									70860
								],
								[
									70904,
									70926
								],
								[
									70960,
									70999
								],
								[
									71033,
									71039
								],
								[
									71112,
									71137
								],
								[
									71148,
									71160
								],
								[
									71352,
									71362
								],
								[
									71414,
									71464
								],
								[
									71872,
									71902
								],
								[
									71988,
									72018
								],
								[
									72091,
									72122
								],
								[
									72276,
									72300
								],
								[
									72355,
									72379
								],
								[
									72506,
									72510
								],
								[
									72590,
									72615
								],
								[
									72703,
									72726
								],
								[
									72758,
									72764
								],
								[
									72907,
									72908
								],
								[
									72999,
									73003
								],
								[
									73137,
									73168
								],
								[
									73419,
									73431
								],
								[
									73547,
									73561
								],
								[
									73707,
									73739
								],
								[
									73943,
									73969
								],
								[
									73970,
									73987
								],
								[
									74036,
									74059
								],
								[
									74092,
									74102
								],
								[
									74151,
									74163
								],
								[
									74478,
									74488
								],
								[
									74680,
									74692
								],
								[
									75367,
									75400
								],
								[
									75428,
									75442
								],
								[
									75536,
									75561
								],
								[
									75710,
									75738
								],
								[
									75872,
									75901
								],
								[
									76201,
									76249
								],
								[
									76438,
									76475
								],
								[
									76524,
									76572
								],
								[
									76686,
									76720
								],
								[
									76728,
									76752
								],
								[
									77266,
									77296
								],
								[
									77422,
									77449
								],
								[
									77926,
									77977
								],
								[
									78019,
									78046
								],
								[
									78216,
									78264
								],
								[
									78476,
									78511
								],
								[
									78718,
									78751
								],
								[
									79023,
									79054
								],
								[
									79300,
									79344
								],
								[
									79480,
									79496
								],
								[
									79656,
									79706
								],
								[
									80100,
									80105
								],
								[
									80186,
									80199
								],
								[
									80248,
									80258
								],
								[
									80262,
									80275
								],
								[
									80350,
									80365
								],
								[
									80414,
									80424
								],
								[
									80428,
									80443
								],
								[
									80510,
									80543
								],
								[
									80653,
									80660
								],
								[
									80944,
									80959
								],
								[
									81216,
									81241
								],
								[
									81302,
									81330
								],
								[
									81419,
									81428
								],
								[
									82395,
									82426
								],
								[
									82598,
									82612
								],
								[
									83235,
									83269
								],
								[
									83454,
									83476
								],
								[
									83512,
									83536
								],
								[
									83539,
									83559
								],
								[
									83803,
									83829
								],
								[
									83924,
									83962
								],
								[
									84364,
									84407
								],
								[
									84479,
									84501
								],
								[
									84523,
									84549
								],
								[
									84674,
									84782
								],
								[
									85020,
									85071
								],
								[
									85149,
									85183
								],
								[
									85271,
									85299
								],
								[
									85333,
									85368
								],
								[
									85442,
									85467
								],
								[
									85489,
									85506
								],
								[
									85548,
									85597
								],
								[
									85670,
									85683
								],
								[
									85754,
									85767
								],
								[
									85943,
									85981
								],
								[
									85992,
									86011
								],
								[
									86065,
									86106
								],
								[
									86117,
									86136
								],
								[
									86194,
									86219
								],
								[
									86266,
									86305
								],
								[
									86390,
									86403
								],
								[
									86442,
									86452
								],
								[
									86506,
									86513
								],
								[
									86538,
									86544
								],
								[
									86586,
									86599
								],
								[
									86619,
									86655
								],
								[
									86740,
									86753
								],
								[
									86792,
									86802
								],
								[
									86835,
									86842
								],
								[
									86948,
									86981
								],
								[
									87061,
									87096
								],
								[
									87136,
									87146
								],
								[
									87261,
									87289
								],
								[
									87451,
									87463
								],
								[
									87568,
									87593
								],
								[
									87708,
									87721
								],
								[
									87820,
									87847
								],
								[
									87966,
									87979
								],
								[
									88082,
									88115
								],
								[
									88338,
									88357
								],
								[
									88436,
									88464
								],
								[
									88483,
									88502
								],
								[
									88520,
									88555
								],
								[
									88898,
									88929
								],
								[
									88988,
									89001
								],
								[
									89085,
									89117
								],
								[
									89298,
									89348
								],
								[
									89391,
									89418
								],
								[
									89620,
									89653
								],
								[
									89704,
									89739
								],
								[
									89752,
									89766
								],
								[
									89833,
									89895
								],
								[
									90094,
									90110
								],
								[
									90337,
									90347
								],
								[
									90385,
									90395
								],
								[
									90415,
									90425
								],
								[
									90453,
									90478
								],
								[
									90604,
									90629
								],
								[
									90903,
									90930
								],
								[
									91162,
									91174
								],
								[
									92827,
									92862
								],
								[
									92881,
									92889
								],
								[
									92937,
									92952
								],
								[
									93100,
									93113
								],
								[
									93306,
									93322
								],
								[
									93529,
									93554
								],
								[
									93569,
									93591
								],
								[
									93807,
									93811
								],
								[
									94025,
									94047
								],
								[
									94069,
									94079
								],
								[
									94097,
									94110
								],
								[
									94257,
									94279
								],
								[
									94301,
									94311
								],
								[
									94329,
									94342
								],
								[
									94471,
									94493
								],
								[
									94519,
									94529
								],
								[
									94547,
									94560
								],
								[
									94596,
									94618
								],
								[
									94639,
									94649
								],
								[
									94667,
									94680
								],
								[
									94700,
									94741
								],
								[
									95048,
									95071
								],
								[
									95152,
									95174
								],
								[
									95248,
									95268
								],
								[
									95395,
									95406
								],
								[
									95439,
									95456
								],
								[
									95632,
									95651
								],
								[
									95686,
									95708
								],
								[
									95840,
									95861
								],
								[
									95999,
									96019
								],
								[
									96086,
									96109
								],
								[
									96185,
									96207
								],
								[
									96325,
									96349
								],
								[
									96411,
									96423
								],
								[
									96594,
									96612
								],
								[
									96674,
									96686
								],
								[
									96838,
									96861
								],
								[
									97002,
									97018
								],
								[
									97074,
									97087
								],
								[
									97119,
									97187
								],
								[
									97228,
									97250
								],
								[
									97279,
									97289
								],
								[
									97305,
									97318
								],
								[
									97378,
									97391
								],
								[
									97467,
									97490
								],
								[
									97618,
									97640
								],
								[
									97737,
									97750
								],
								[
									97812,
									97828
								],
								[
									97866,
									97870
								],
								[
									98129,
									98172
								],
								[
									98187,
									98212
								],
								[
									98355,
									98363
								],
								[
									98377,
									98384
								],
								[
									98393,
									98398
								],
								[
									98416,
									98457
								],
								[
									98470,
									98477
								],
								[
									98554,
									98593
								],
								[
									98750,
									98761
								],
								[
									98796,
									98817
								],
								[
									98895,
									98902
								],
								[
									98934,
									98959
								],
								[
									99017,
									99026
								],
								[
									99043,
									99050
								],
								[
									99068,
									99094
								],
								[
									99152,
									99161
								],
								[
									99179,
									99186
								],
								[
									99205,
									99300
								],
								[
									99932,
									99952
								],
								[
									99953,
									99967
								],
								[
									99989,
									99996
								],
								[
									100023,
									100043
								],
								[
									100044,
									100058
								],
								[
									100079,
									100086
								],
								[
									100130,
									100144
								],
								[
									100216,
									100265
								],
								[
									100278,
									100294
								],
								[
									100328,
									100344
								],
								[
									100436,
									100468
								],
								[
									100499,
									100538
								],
								[
									100919,
									100960
								],
								[
									100999,
									101006
								],
								[
									101062,
									101082
								],
								[
									101120,
									101139
								],
								[
									101213,
									101230
								],
								[
									101249,
									101269
								],
								[
									101273,
									101290
								],
								[
									101340,
									101363
								],
								[
									101464,
									101487
								],
								[
									101531,
									101550
								],
								[
									101593,
									101621
								],
								[
									101717,
									101738
								],
								[
									101814,
									101840
								],
								[
									101953,
									101971
								],
								[
									102025,
									102030
								],
								[
									102033,
									102039
								],
								[
									102052,
									102098
								],
								[
									102181,
									102194
								],
								[
									102572,
									102585
								],
								[
									102648,
									102697
								],
								[
									102710,
									102726
								],
								[
									102748,
									102761
								],
								[
									102789,
									102801
								],
								[
									102805,
									102818
								],
								[
									102880,
									102932
								],
								[
									103121,
									103134
								],
								[
									103197,
									103236
								],
								[
									103380,
									103415
								],
								[
									103487,
									103491
								],
								[
									103518,
									103527
								],
								[
									103778,
									103813
								],
								[
									103889,
									103910
								],
								[
									103925,
									103933
								],
								[
									103946,
									103955
								],
								[
									103977,
									103981
								],
								[
									104020,
									104024
								],
								[
									104171,
									104213
								],
								[
									104545,
									104573
								],
								[
									104633,
									104684
								],
								[
									104935,
									104978
								],
								[
									105031,
									105074
								],
								[
									105110,
									105115
								],
								[
									105192,
									105206
								],
								[
									105241,
									105251
								],
								[
									105264,
									105299
								],
								[
									105343,
									105351
								],
								[
									105898,
									105942
								],
								[
									106477,
									106500
								],
								[
									106908,
									106950
								],
								[
									107756,
									107779
								],
								[
									108151,
									108156
								],
								[
									108710,
									108723
								],
								[
									108759,
									108774
								],
								[
									108812,
									108829
								],
								[
									108871,
									108915
								],
								[
									109114,
									109121
								],
								[
									109764,
									109777
								],
								[
									109812,
									109821
								],
								[
									109878,
									109897
								],
								[
									110003,
									110016
								],
								[
									110191,
									110206
								],
								[
									110250,
									110267
								],
								[
									110313,
									110326
								],
								[
									110368,
									110381
								],
								[
									110423,
									110438
								],
								[
									110482,
									110499
								],
								[
									110627,
									110632
								],
								[
									110781,
									110807
								],
								[
									110984,
									110998
								],
								[
									111021,
									111026
								],
								[
									111660,
									111664
								],
								[
									111722,
									111726
								],
								[
									111969,
									111978
								],
								[
									112103,
									112116
								],
								[
									112190,
									112204
								],
								[
									112455,
									112478
								],
								[
									112496,
									112505
								],
								[
									112522,
									112533
								],
								[
									112543,
									112552
								],
								[
									112572,
									112600
								],
								[
									112708,
									112741
								],
								[
									112908,
									112930
								],
								[
									112948,
									112957
								],
								[
									112977,
									112990
								],
								[
									113048,
									113057
								],
								[
									113077,
									113119
								],
								[
									113592,
									113600
								],
								[
									113635,
									113646
								],
								[
									113723,
									113761
								],
								[
									114112,
									114133
								],
								[
									114218,
									114252
								],
								[
									114405,
									114444
								],
								[
									114499,
									114511
								],
								[
									114970,
									114978
								],
								[
									115110,
									115117
								],
								[
									115176,
									115184
								],
								[
									115297,
									115314
								],
								[
									115393,
									115397
								],
								[
									115451,
									115468
								],
								[
									115580,
									115628
								],
								[
									115914,
									116009
								],
								[
									116144,
									116156
								],
								[
									116166,
									116178
								],
								[
									116183,
									116196
								],
								[
									116302,
									116314
								],
								[
									116324,
									116336
								],
								[
									116341,
									116354
								],
								[
									116462,
									116470
								],
								[
									116681,
									116689
								],
								[
									117064,
									117074
								],
								[
									117154,
									117164
								],
								[
									117245,
									117253
								],
								[
									117384,
									117403
								],
								[
									117952,
									117956
								],
								[
									118025,
									118042
								],
								[
									118082,
									118097
								],
								[
									118135,
									118148
								],
								[
									118184,
									118199
								],
								[
									118309,
									118314
								],
								[
									118384,
									118393
								],
								[
									118414,
									118424
								],
								[
									118531,
									118596
								],
								[
									118947,
									118981
								],
								[
									119065,
									119108
								],
								[
									119324,
									119371
								],
								[
									119562,
									119613
								],
								[
									119833,
									119885
								],
								[
									120233,
									120276
								],
								[
									120592,
									120596
								],
								[
									120711,
									120786
								],
								[
									121104,
									121108
								],
								[
									121341,
									121383
								],
								[
									121447,
									121455
								],
								[
									121616,
									121657
								],
								[
									121704,
									121736
								],
								[
									121817,
									121850
								],
								[
									121909,
									121973
								],
								[
									122213,
									122254
								],
								[
									122292,
									122310
								],
								[
									122359,
									122366
								],
								[
									122560,
									122624
								],
								[
									122800,
									122865
								],
								[
									122878,
									122890
								],
								[
									122907,
									122918
								],
								[
									122942,
									122957
								],
								[
									123340,
									123370
								],
								[
									123547,
									123567
								],
								[
									123587,
									123641
								],
								[
									123864,
									123870
								],
								[
									123922,
									123927
								],
								[
									123983,
									123989
								],
								[
									124066,
									124071
								],
								[
									124114,
									124173
								],
								[
									126222,
									126235
								],
								[
									126383,
									126397
								],
								[
									126557,
									126570
								],
								[
									126652,
									126671
								],
								[
									126914,
									126951
								],
								[
									127299,
									127369
								],
								[
									127725,
									127767
								],
								[
									127818,
									127827
								],
								[
									127993,
									128028
								],
								[
									128155,
									128159
								],
								[
									128181,
									128192
								],
								[
									128302,
									128325
								],
								[
									128469,
									128493
								],
								[
									128594,
									128598
								],
								[
									128621,
									128625
								],
								[
									128637,
									128669
								],
								[
									128717,
									128757
								],
								[
									128986,
									129005
								],
								[
									129037,
									129101
								],
								[
									129153,
									129158
								],
								[
									129191,
									129221
								],
								[
									129308,
									129343
								],
								[
									129367,
									129393
								],
								[
									129507,
									129540
								],
								[
									129679,
									129737
								],
								[
									129762,
									129788
								],
								[
									129831,
									129866
								],
								[
									129909,
									129930
								],
								[
									130079,
									130105
								],
								[
									130263,
									130282
								],
								[
									130604,
									130653
								],
								[
									130678,
									130699
								],
								[
									130741,
									130757
								],
								[
									130811,
									130834
								],
								[
									130897,
									130925
								],
								[
									130987,
									131008
								],
								[
									131032,
									131037
								],
								[
									131610,
									131641
								],
								[
									131644,
									131662
								],
								[
									131714,
									131715
								],
								[
									131728,
									131739
								],
								[
									132294,
									132339
								],
								[
									132441,
									132465
								],
								[
									132727,
									132737
								],
								[
									132785,
									132806
								],
								[
									132854,
									132875
								],
								[
									132962,
									133003
								],
								[
									133151,
									133155
								],
								[
									133201,
									133209
								],
								[
									133238,
									133242
								],
								[
									133617,
									133630
								],
								[
									133683,
									133703
								],
								[
									134029,
									134086
								],
								[
									134193,
									134204
								],
								[
									134544,
									134564
								],
								[
									134604,
									134640
								],
								[
									134669,
									134682
								],
								[
									134725,
									134735
								],
								[
									134780,
									134795
								],
								[
									135598,
									135611
								],
								[
									136182,
									136202
								],
								[
									136277,
									136292
								],
								[
									136669,
									136682
								],
								[
									136753,
									136773
								],
								[
									136855,
									136870
								],
								[
									136936,
									136965
								],
								[
									137039,
									137072
								],
								[
									137184,
									137198
								],
								[
									137238,
									137253
								],
								[
									137275,
									137303
								],
								[
									137832,
									137855
								],
								[
									138062,
									138090
								],
								[
									138197,
									138239
								],
								[
									138566,
									138622
								],
								[
									138856,
									138897
								],
								[
									138983,
									138994
								],
								[
									139143,
									139156
								],
								[
									139477,
									139493
								],
								[
									139522,
									139574
								],
								[
									139643,
									139650
								],
								[
									139734,
									139748
								],
								[
									139832,
									139847
								],
								[
									139953,
									139957
								],
								[
									139989,
									140009
								],
								[
									140060,
									140073
								],
								[
									140123,
									140135
								],
								[
									140429,
									140444
								],
								[
									140765,
									140775
								],
								[
									140830,
									140840
								],
								[
									140924,
									140935
								],
								[
									140992,
									140999
								],
								[
									141602,
									141612
								],
								[
									141678,
									141689
								],
								[
									141757,
									141769
								],
								[
									141804,
									141817
								],
								[
									141862,
									141877
								],
								[
									141896,
									141923
								],
								[
									142109,
									142152
								],
								[
									142313,
									142373
								],
								[
									142459,
									142484
								],
								[
									142533,
									142576
								],
								[
									142587,
									142597
								],
								[
									142606,
									142635
								],
								[
									142891,
									142907
								],
								[
									142929,
									142940
								],
								[
									142990,
									143020
								],
								[
									143089,
									143094
								],
								[
									143123,
									143128
								],
								[
									143423,
									143436
								],
								[
									143487,
									143518
								],
								[
									143539,
									143552
								],
								[
									143553,
									143573
								],
								[
									143663,
									143699
								],
								[
									143772,
									143787
								],
								[
									143868,
									143880
								],
								[
									144355,
									144360
								],
								[
									145083,
									145110
								],
								[
									145135,
									145140
								],
								[
									145191,
									145220
								],
								[
									145299,
									145304
								],
								[
									145386,
									145399
								],
								[
									145450,
									145461
								],
								[
									145501,
									145522
								],
								[
									145646,
									145663
								],
								[
									145793,
									145813
								],
								[
									146009,
									146035
								],
								[
									146123,
									146129
								],
								[
									146159,
									146164
								],
								[
									146240,
									146273
								],
								[
									146431,
									146436
								],
								[
									146487,
									146500
								],
								[
									146524,
									146530
								],
								[
									146613,
									146637
								],
								[
									146731,
									146742
								],
								[
									146798,
									146811
								],
								[
									146873,
									146884
								],
								[
									146983,
									146993
								],
								[
									147091,
									147104
								],
								[
									147217,
									147226
								],
								[
									147284,
									147296
								],
								[
									147379,
									147387
								],
								[
									147487,
									147494
								],
								[
									147596,
									147616
								],
								[
									147804,
									147825
								],
								[
									148084,
									148101
								],
								[
									148254,
									148266
								],
								[
									148395,
									148409
								],
								[
									148580,
									148593
								],
								[
									148610,
									148630
								],
								[
									148889,
									148919
								],
								[
									148925,
									148951
								],
								[
									148970,
									148996
								],
								[
									149025,
									149043
								],
								[
									149109,
									149143
								],
								[
									149257,
									149311
								],
								[
									149338,
									149358
								],
								[
									149448,
									149465
								],
								[
									149561,
									149583
								],
								[
									149690,
									149714
								],
								[
									149822,
									149852
								],
								[
									149883,
									149892
								],
								[
									149935,
									149954
								],
								[
									150103,
									150123
								],
								[
									150240,
									150259
								],
								[
									150373,
									150389
								],
								[
									150497,
									150507
								],
								[
									150585,
									150592
								],
								[
									150658,
									150667
								],
								[
									151012,
									151033
								],
								[
									151042,
									151070
								],
								[
									151080,
									151125
								],
								[
									151180,
									151191
								],
								[
									151213,
									151223
								],
								[
									151236,
									151247
								],
								[
									151275,
									151308
								],
								[
									151469,
									151501
								],
								[
									151569,
									151591
								],
								[
									151763,
									151799
								],
								[
									151961,
									151977
								],
								[
									152038,
									152074
								],
								[
									152150,
									152161
								],
								[
									152226,
									152230
								],
								[
									152269,
									152282
								],
								[
									152396,
									152432
								],
								[
									152609,
									152614
								],
								[
									152655,
									152708
								],
								[
									153646,
									153675
								],
								[
									153829,
									153866
								],
								[
									153877,
									153890
								],
								[
									153903,
									153912
								],
								[
									153959,
									153979
								],
								[
									154013,
									154029
								],
								[
									154251,
									154272
								],
								[
									154400,
									154432
								],
								[
									154459,
									154468
								],
								[
									154480,
									154493
								],
								[
									154571,
									154595
								],
								[
									154662,
									154671
								],
								[
									154687,
									154697
								],
								[
									154714,
									154731
								],
								[
									154759,
									154768
								],
								[
									154769,
									154792
								],
								[
									154838,
									154862
								],
								[
									155010,
									155015
								],
								[
									155033,
									155042
								],
								[
									155142,
									155150
								],
								[
									155154,
									155163
								],
								[
									155185,
									155198
								],
								[
									155215,
									155228
								],
								[
									155235,
									155248
								],
								[
									155274,
									155291
								],
								[
									155304,
									155320
								],
								[
									155390,
									155395
								],
								[
									155413,
									155422
								],
								[
									155522,
									155530
								],
								[
									155543,
									155552
								],
								[
									155567,
									155572
								],
								[
									155660,
									155697
								],
								[
									155854,
									155870
								],
								[
									155884,
									155906
								],
								[
									156019,
									156025
								],
								[
									157073,
									157088
								],
								[
									157138,
									157152
								],
								[
									157166,
									157181
								],
								[
									157711,
									157728
								],
								[
									157778,
									157794
								],
								[
									158078,
									158108
								],
								[
									158126,
									158135
								],
								[
									158153,
									158163
								],
								[
									158176,
									158185
								],
								[
									158328,
									158357
								],
								[
									158375,
									158384
								],
								[
									158402,
									158412
								],
								[
									158416,
									158425
								],
								[
									159706,
									159758
								],
								[
									159824,
									159847
								],
								[
									159919,
									159937
								],
								[
									160286,
									160296
								],
								[
									160300,
									160314
								],
								[
									160516,
									160548
								],
								[
									160575,
									160610
								],
								[
									160650,
									160673
								],
								[
									160834,
									160850
								],
								[
									161035,
									161044
								],
								[
									161070,
									161090
								],
								[
									161117,
									161126
								],
								[
									161141,
									161165
								],
								[
									161305,
									161350
								],
								[
									161382,
									161400
								],
								[
									161546,
									161558
								],
								[
									161703,
									161708
								],
								[
									162022,
									162029
								],
								[
									162166,
									162185
								],
								[
									162203,
									162225
								],
								[
									162509,
									162551
								],
								[
									162568,
									162605
								],
								[
									162853,
									162872
								],
								[
									163242,
									163282
								],
								[
									163325,
									163339
								],
								[
									163409,
									163439
								],
								[
									163488,
									163518
								],
								[
									163585,
									163663
								],
								[
									164113,
									164141
								],
								[
									164193,
									164257
								],
								[
									164275,
									164299
								],
								[
									164558,
									164577
								],
								[
									164692,
									164728
								],
								[
									165453,
									165491
								],
								[
									165508,
									165546
								],
								[
									166835,
									166842
								],
								[
									166898,
									166916
								],
								[
									167128,
									167135
								],
								[
									167183,
									167187
								],
								[
									167319,
									167327
								],
								[
									167394,
									167406
								],
								[
									168382,
									168448
								],
								[
									168449,
									168466
								],
								[
									168704,
									168715
								],
								[
									168732,
									168751
								],
								[
									168865,
									168929
								],
								[
									168945,
									168954
								],
								[
									168966,
									168974
								],
								[
									169027,
									169042
								],
								[
									169058,
									169064
								],
								[
									169088,
									169101
								],
								[
									169296,
									169313
								],
								[
									169358,
									169383
								],
								[
									169482,
									169488
								],
								[
									169608,
									169640
								],
								[
									169717,
									169721
								],
								[
									169851,
									169872
								],
								[
									169910,
									169931
								],
								[
									170023,
									170048
								],
								[
									170219,
									170252
								],
								[
									170485,
									170512
								],
								[
									170604,
									170608
								],
								[
									170715,
									170720
								],
								[
									170984,
									171030
								],
								[
									171620,
									171629
								],
								[
									171865,
									171918
								],
								[
									171929,
									171955
								],
								[
									172258,
									172274
								],
								[
									172358,
									172369
								],
								[
									172615,
									172619
								],
								[
									172903,
									172956
								],
								[
									173184,
									173197
								],
								[
									173208,
									173224
								],
								[
									173399,
									173408
								],
								[
									173450,
									173459
								],
								[
									173499,
									173504
								],
								[
									173540,
									173558
								],
								[
									173579,
									173610
								],
								[
									173717,
									173736
								],
								[
									174029,
									174042
								],
								[
									174131,
									174149
								],
								[
									174244,
									174261
								],
								[
									174394,
									174401
								],
								[
									174520,
									174526
								],
								[
									174676,
									174684
								],
								[
									174803,
									174813
								],
								[
									175042,
									175051
								],
								[
									175544,
									175584
								],
								[
									175893,
									175928
								],
								[
									176259,
									176265
								],
								[
									176301,
									176319
								],
								[
									176363,
									176373
								],
								[
									176456,
									176466
								],
								[
									176515,
									176547
								],
								[
									176794,
									176813
								],
								[
									177431,
									177453
								],
								[
									177752,
									177812
								],
								[
									178522,
									178547
								],
								[
									178576,
									178592
								],
								[
									178601,
									178612
								],
								[
									178704,
									178710
								],
								[
									178719,
									178730
								],
								[
									178790,
									178814
								],
								[
									178832,
									178841
								],
								[
									178865,
									178874
								],
								[
									178902,
									178913
								],
								[
									178940,
									178951
								],
								[
									178984,
									178997
								],
								[
									179016,
									179029
								],
								[
									179041,
									179054
								],
								[
									179205,
									179216
								],
								[
									179318,
									179343
								],
								[
									179361,
									179387
								],
								[
									179478,
									179512
								],
								[
									179784,
									179805
								],
								[
									179870,
									179888
								],
								[
									180056,
									180092
								],
								[
									180514,
									180534
								],
								[
									180737,
									180752
								],
								[
									181028,
									181051
								],
								[
									181260,
									181278
								],
								[
									181496,
									181508
								],
								[
									181538,
									181553
								],
								[
									181598,
									181604
								],
								[
									181656,
									181670
								],
								[
									181812,
									181830
								],
								[
									182026,
									182058
								],
								[
									182124,
									182140
								],
								[
									182476,
									182492
								],
								[
									182939,
									182942
								],
								[
									182955,
									182956
								],
								[
									182986,
									183022
								],
								[
									183463,
									183502
								],
								[
									183591,
									183617
								],
								[
									183665,
									183726
								],
								[
									184133,
									184161
								],
								[
									184268,
									184286
								],
								[
									184581,
									184619
								],
								[
									184673,
									184678
								]
							],
							"symlist":
							[
								"Util(g)",
								"Util.formatAnnotatedObject = function(subject, o)",
								"  i =>",
								"  item =>",
								"  padding = x =>",
								"  arr =>",
								"Util.curry = (fn, arity) =>",
								"  ret = function curried(...args)",
								"\t(v, i) =>",
								"Curried = function(...a)",
								"\tfunction()",
								"\tfunction(a)",
								"\tfunction(a, b)",
								"\tfunction(a, b, c)",
								"\tfunction(a, b, c, d)",
								"  get()",
								"Util.arityN = (fn, n) =>",
								"\tfunction(fn)",
								"\tfunction()",
								"\tfunction(fn)",
								"\tfunction(a)",
								"\tfunction(fn)",
								"\tfunction(a, b)",
								"\tfunction(fn)",
								"\tfunction(a, b, c)",
								"\tfunction(fn)",
								"\tfunction(a, b, c, d)",
								"\tfunction(fn)",
								"\tfunction(a, b, c, d, e)",
								"Util.getter = target =>",
								"  self = function(key)",
								"  .fn = key =>",
								"  .fn = key =>",
								"Util.setter = target =>",
								"  set = function(key, value)",
								"  .fn = (key, value) =>",
								"  .fn = (key, value) =>",
								"Util.remover = target =>",
								"\tkey =>",
								"\tkey =>",
								"Util.hasFn = target =>",
								"\tkey =>",
								"\tkey =>",
								"Util.adder = target =>",
								"\targ =>",
								"\targ =>",
								"  self = function(obj, arg = 1)",
								"ChooseFn(a, o)",
								"  .fn = (obj, arg) =>",
								"  .fn = (obj, arg) =>",
								"  .fn = (obj, arg) =>",
								"  .fn = (num, arg) =>",
								"  .fn = (obj, arg) =>",
								"Util.updater = (target, get, set, fn) =>",
								"\t(k, f, i) =>",
								"  doUpdate(key, func, i)",
								"  create = () =>",
								"\tkey =>",
								"\t() =>",
								"  self = function(...args)",
								"Util.once = (fn, thisArg, memoFn) =>",
								"\tfunction(...args)",
								"Util.delay = (func, wait, thisObj) =>",
								"\tfunction(...args)",
								"()",
								"Util.throttle = (f, t, thisObj) =>",
								"\tfunction(...args)",
								"Util.debounce = (func, wait, options = {}) =>",
								"  later()",
								"  debounced(...a)",
								"  .clear = function()",
								"  .flush = function()",
								"Util.debounceAsync = (fn, wait, options = {}) =>",
								"\tfunction(...a)",
								"  resolve =>",
								"() =>",
								"  arg =>",
								"\tg =>",
								"\tg =>",
								"\t() =>",
								"\terr =>",
								"\t() =>",
								"\terr =>",
								"\t() =>",
								"\terr =>",
								"() =>",
								"Util.log = (...args) =>",
								"  f =>",
								"  f =>",
								"(a, p, i) =>",
								"  get: () =>",
								"  .setFilters = function(args)",
								"  arg =>",
								"  .getFilters = function()",
								"Util.msg = (strings, ...substitutions) =>",
								"(base, n) =>",
								"Util.generalLog = function(n, x)",
								"Util.toSource = function(arg, opts = {})",
								"  print = (...args) =>",
								"Util.debug = function(message)",
								"  removeCircular = function(key, value)",
								"  arg =>",
								"Util.type = function({ type })",
								"Util.functionName = function(fn)",
								"Util.className = function(obj)",
								"  obj",
								"Util.unwrapComponent = function(c)",
								"Util.componentName = function(c)",
								"Util.count = function(s, ch)",
								"Util.parseNum = function(str)",
								"Util.minmax = function(num, min, max)",
								"Util.getExponential = function(num)",
								"Util.getNumberParts = function(num)",
								"Util.pow2 = function(n)",
								"Util.pow10 = function(n)",
								"Util.bitValue = function(n)",
								"Util.bitMask = function(bits, start = 0)",
								"Util.bitGroups = function(num, bpp, minLen)",
								"Util.bitStuff = (arr, bpp) =>",
								"([b, f], n) =>",
								"Util.toBinary = function(num)",
								"Util.toBits = function(num)",
								"\tbit =>",
								"Util.getBit = function(v, n)",
								"Util.isSet = function(v, n)",
								"Util.bitCount = function(n)",
								"Util.bitNo = function(n)",
								"Util.toggleBit = function(num, bit)",
								"Util.setBit = function(num, bit)",
								"Util.clearBit = function(num, bit)",
								"Util.range = function(...args)",
								"\t(v, k) =>",
								"  n =>",
								"Util.set = function(obj, prop, value)",
								"\t(prop, value) =>",
								"\t(prop, value) =>",
								"\t(prop, value) =>",
								"\tvalue =>",
								"(obj, prop) =>",
								"() =>",
								"Util.bitArrayToNumbers = function(arr)",
								"Util.bitsToNumbers = function(bits)",
								"(val, key, arr) =>",
								"Util.shuffle = function(arr, rnd = Util.rng)",
								"(a, b) =>",
								"Util.sortNum = function(arr)",
								"(a, b) =>",
								"Util.draw = (arr, n = 1, rnd = Util.rng) =>",
								"Util.is = function(what, ...pred)",
								"  type =>",
								"  fn =>",
								"Util.instanceOf = (value, ctor) =>",
								"Util.onoff = function(val)",
								"Util.numbersToBits = function(arr)",
								"(bits, num) =>",
								"Util.randomNumbers = function([start, end], draws)",
								"Util.randomBits = function(r = [1, 50], n = 5)",
								"Util.padFn = function(len, char = ' ', fn = (str, pad) => pad)",
								"\t(s, n = len) =>",
								"Util.pad = function(s, n, char = ' ')",
								"Util.abbreviate = function(str, max = 40, suffix = '...')",
								"Util.trim = function(str, charset)",
								"Util.trimRight = function(str, charset)",
								"Util.indent = (text, space = ' ') =>",
								"Util.define = (obj, ...args) =>",
								"Util.memoizedProperties = (obj, methods) =>",
								"  get()",
								"Util.copyWhole = (dst, ...args) =>",
								"Util.copyEntries = (obj, entries) =>",
								"Util.extend = (...args) =>",
								"Util.isCloneable = obj =>",
								"Util.isUnextendable = val =>",
								"  pred = (k, v, f) =>",
								"(key, depth) =>",
								"  value = function(...args)",
								"Util.defineGetter = (obj, key, fn, enumerable = false) =>",
								"Util.defineGetterSetter = (obj, key, g, s, enumerable = false) =>",
								"Util.defineGettersSetters = (obj, gettersSetters) =>",
								"Util.extendArray = function(arr = Array.prototype)",
								"\tfunction(pred)",
								"\tfunction()",
								"\tfunction()",
								"(item, i, a) =>",
								"\tfunction()",
								"\tfunction(value)",
								"Util.adapter = function(obj, getLength = obj => obj.length, getKey = (obj, index) => obj.",
								"(index), getItem = (obj, key) => obj[key], setItem = (obj, index, value) => (obj[index] = value))",
								"  get length()",
								"  get instance()",
								"  key(i)",
								"  get(key)",
								"  has(key)",
								"  set(key, value)",
								"*keys()",
								"*entries()",
								"  toObject()",
								"  toMap()",
								"  .localStorage = function(s)",
								"\t() =>",
								"\tw =>",
								"\t() =>",
								"\tl =>",
								"\t(l, i) =>",
								"\t(l, key) =>",
								"\t(l, key, v) =>",
								"Util.array = function(a)",
								"Util.arrayFromEntries = entries =>",
								"([k, v]) =>",
								"\tkey =>",
								"([k, v]) =>",
								"Util.toMap = function(hash = {}, fn)",
								"Util.extendMap = function(map)",
								"  .entries = function*iterator()",
								"  .toObject = function()",
								"  .match = function(...args)",
								"\tentries =>",
								"Util.objectFrom = function(any)",
								"Util.tail = function(arr)",
								"Util.splice = function(str, index, delcount, insert)",
								"Util.identity = arg =>",
								"Util.reverse = arr =>",
								"Util.keyOf = function(obj, prop)",
								"Util.rotateRight = function(arr, n)",
								"Util.repeater = function(n, what)",
								"()",
								"()",
								"Util.repeat = function(n, what)",
								"Util.arrayDim = function(dimensions, init)",
								"Util.flatten = function(arr)",
								"Util.chunkArray = (a, size) =>",
								"(acc, item, i) =>",
								"Util.partition = function*(a, size)",
								"Util.intersect = (a, b) =>",
								"Util.difference = (a, b, incicludes) =>",
								"  x =>",
								"  x =>",
								"  x =>",
								"  x =>",
								"Util.symmetricDifference = (a, b) =>",
								"Util.union = (a, b, equality) =>",
								"Util.chances = function(numbers, matches)",
								"Util.sum = function(arr)",
								"(acc, n) =>",
								"Util.expr = fn =>",
								"  expr(...args)",
								"  addArgs(args)",
								"  ret = function returnFn(...args)",
								"(a, b) =>",
								"(a, b) =>",
								"(a, b) =>",
								"(a, b) =>",
								"(a, b) =>",
								"(a, b) =>",
								"(a, b) =>",
								"Util.mod = (a, b) =>",
								"\tn =>",
								"(a, b) =>",
								"Util.fnName = function(f, parent)",
								"Util.objName = function(o)",
								"Util.findKey = function(obj, pred, thisVal)",
								"  value : v =>",
								"Util.find = function(arr, value, prop = 'id')",
								"  pred = function(obj)",
								"\tobj =>",
								"\tobj =>",
								"  pred = ([key, value], arr) =>",
								"Util.findIndex = function(obj, pred, thisArg)",
								"Util.match = function(arg, pred)",
								"  match = (val, key) =>",
								"(acc, val, key) =>",
								"(acc, key) =>",
								"Util.toHash = function(map, keyTransform = k => ",
								"('' + k))",
								"\t(v, k) =>",
								"Util.indexOf = function(obj, prop)",
								"Util.greatestCommonDenominator = (a, b) =>",
								"Util.leastCommonMultiple = (n1, n2) =>",
								"(re, str)",
								"Util.inspect = function(obj, opts = {})",
								"  stringFn = str =>",
								"  print = (...args) =>",
								"\t(space = false) =>",
								"\t(space = false) =>",
								"\tkey =>",
								"\tkey =>",
								"Util.dump = function(name, props)",
								"\t() =>",
								"\tw =>",
								"\t() =>",
								"Util.ucfirst = function(str)",
								"Util.lcfirst = function(str)",
								"Util.typeOf = v =>",
								"Util.camelize = (text, sep = '') =>",
								"\t(match, p1, p2, offset) =>",
								"Util.decamelize = function(str, separator = '-')",
								"Util.ifThenElse = function(pred = value => !!value, _then = () => {}, _else = () => {})",
								"\tfunction(value)",
								"Util.if = (value, _then, _else, pred) =>",
								"  v =>",
								"() =>",
								"() =>",
								"Util.ifElse = (value, _else, pred) =>",
								"  v =>",
								"\t() =>",
								"\t() =>",
								"\t() =>",
								"Util.ifThen = (value, _then, pred) =>",
								"  v =>",
								"\t() =>",
								"\t() =>",
								"\t() =>",
								"Util.switch = ({ default: defaultCase, ...cases }) =>",
								"\tfunction(value)",
								"(fn, arr)",
								"Util.colorDump = (iterable, textFn) =>",
								"(color, n) =>",
								"Util.bucketInserter = (map, ...extraArgs) =>",
								"\tfunction(...args)",
								"\tfunction(...args)",
								"Util.fifo = function fifo()",
								"  resolve = () =>",
								"  generator()",
								"  r =>",
								"  push(...args)",
								"  process: function run()",
								"Util.isEmail = function(v)",
								"Util.isString = function(v)",
								"Util.isNumeric = v =>",
								"Util.isUndefined = arg =>",
								"Util.isObject = obj =>",
								"Util.isPrimitive = obj =>",
								"Util.isFunction = arg =>",
								"Util.not = fn =>",
								"\tfunction(...args)",
								"Util.isAsync = fn =>",
								"Util.isArrowFunction = fn =>",
								"Util.isEmptyString = v =>",
								"Util.isEmpty = (...args) =>",
								"  empty(v)",
								"Util.isNonEmpty = (...args) =>",
								"  nonEmpty = v =>",
								"Util.isIpAddress = v =>",
								"  i =>",
								"  i =>",
								"Util.isPortNumber = v =>",
								"Util.hasProps = function(obj, props)",
								"  prop =>",
								"Util.validatePassword = function(value)",
								"Util.clone = function(obj, proto)",
								"  constructor",
								"Util.deepClone = function(data)",
								"Util.findVal = function(object, propName, maxDepth = 10)",
								"Util.deepCloneObservable = function(data)",
								"Util.toArray = function(observableArray)",
								"Util.arryToTree = function(data, id, pId, appId)",
								"(e, i) =>",
								"Util.to3wei = function(a, old, id, pId)",
								"(e, i) =>",
								"(se, si) =>",
								"Util.arrExchangePos = function(arr, i, j)",
								"Util.arrRemove = function(arr, i)",
								"Util.move = function(src, dst = [])",
								"Util.moveIf = function(src, pred, dst = [])",
								"Util.logOutClearStorage = function()",
								"Util.getCookie = function(cookie, name)",
								"Util.parseCookie = function(c = document.cookie)",
								"  pred = char =>",
								"  char =>",
								"  char =>",
								"Util.encodeCookie = c =>",
								"([key, value]) =>",
								"Util.setCookies = c =>",
								"([key, value]) =>",
								"Util.clearCookies = function(c)",
								"\t(acc, name) =>",
								"Util.deleteCookie = function(name)",
								"\t() =>",
								"\tw =>",
								"\t() =>",
								"Util.accAdd = function(arg1, arg2)",
								"Util.Subtr = function(arg1, arg2)",
								"Util.accDiv = function(arg1, arg2)",
								"Util.accMul = function(arg1, arg2)",
								"Util.dateFormatter = function(date, formate)",
								"Util.numberFormatter = function(numStr)",
								"Util.searchObject = function(object, matchCallback, currentPath, result, searched)",
								"(req = {}) =>",
								"\t() =>",
								"\t() =>",
								"\t() =>",
								"\turl =>",
								"\t() =>",
								"() =>",
								"() =>",
								"() =>",
								"() =>",
								"() =>",
								"() =>",
								"Util.parseQuery = function(url = ",
								")",
								"Util.encodeQuery = function(data)",
								"Util.parseURL = function(href = this.",
								")",
								"  part =>",
								"([k, v]) =>",
								"(acc, m) =>",
								"  href(override)",
								"Util.makeURL = function(...args)",
								"Util.numberFromURL = function(url, fn)",
								"Util.tryPromise = fn =>",
								"(resolve, reject) =>",
								"  resolve = a =>",
								"  reject = () =>",
								"  resolve = () =>",
								"  reject = () =>",
								"  function(...args)",
								"\tfunction(...args)",
								"  resolve = a =>",
								"  reject = () =>",
								"Util.putError = err =>",
								"() =>",
								"\tfn =>",
								"\tret =>",
								"Util.tryPredicate = (fn, defaultRet) =>",
								"\tret =>",
								"\t() =>",
								"Util.isBrowser = function()",
								"\t() =>",
								"\tw =>",
								"\t() =>",
								"\t() =>",
								"\td =>",
								"\t() =>",
								"Util.waitFor = function waitFor(msecs)",
								"({ setTimeout, clearTimeout, setInterval, clearInterval }) =>",
								"(resolve, reject) =>",
								"() =>",
								"  clear = () =>",
								"Util.timeout = (msecs, promises, promiseClass = Promise) =>",
								"Util.isServer = function()",
								"Util.isMobile = function()",
								"Util.uniquePred = (cmp = null) =>",
								"\t(el, i, arr) =>",
								"  item =>",
								"\t(el, i, arr) =>",
								"Util.unique = (arr, cmp) =>",
								"  cmp = (a, b) =>",
								"(e, i, a) =>",
								"Util.zip = a =>",
								"(a, b) =>",
								"(_, i) =>",
								"  arr =>",
								"Util.histogram = (...args) =>",
								"\t(k, v) =>",
								"  initVal = () =>",
								"  setVal = v =>",
								"(it, i) =>",
								"(item, i) =>",
								"\t(entry, idx, key) =>",
								"([k, v]) =>",
								"(a, b) =>",
								"Util.concat = function*(...args)",
								"Util.distinct = function(arr)",
								"\t(value, index, me) =>",
								"Util.rangeMinMax = function(arr, field)",
								"  obj =>",
								"Util.remap = (...args) =>",
								"  getR = () =>",
								"  r = val =>",
								"Util.mergeLists = function(arr1, arr2, key = 'id')",
								"Util.foreach = function(o, fn)",
								"Util.all = function(obj, pred)",
								"Util.isGenerator = function(fn)",
								"Util.isIterator = obj =>",
								"Util.isIterable = obj =>",
								"  x =>",
								"Util.isConstructor = x =>",
								"  construct(target, args)",
								"  target",
								"  x",
								"  m =>",
								"Util.filter = function(a, pred)",
								"()",
								"  fn = (k, v) =>",
								"Util.reduce = (obj, fn, accu) =>",
								"Util.mapFunctional = fn =>",
								"(arg)",
								"Util.map = (...args) =>",
								"  ret = a =>",
								"()",
								"  ret = a =>",
								"()",
								"Util.entriesToObj = function(arr)",
								"(acc, item) =>",
								"Util.isDate = function(d)",
								"Util.parseDate = function(d)",
								"Util.isoDate = function(date)",
								"Util.toUnixTime = function(dateObj, utc = false)",
								"Util.unixTime = function(utc = false)",
								"Util.fromUnixTime = function(epoch, utc = false)",
								"Util.formatTime = function(date = ",
								"(), format = 'HH:MM:SS')",
								"Util.leapYear = function(year)",
								"Util.timeSpan = function(s)",
								"Util.randFloat = function(min, max, rnd = Util.rng)",
								"Util.randInt = (...args) =>",
								"Util.randStr = (len, charset, rnd = Util.rng) =>",
								"Util.hex = function(num, numDigits)",
								"Util.numberParts = (num, base) =>",
								"Util.roundDigits = precision =>",
								"Util.roundFunction = (prec, digits, type) =>",
								"\tfunction(value)",
								"Util.roundTo = function(value, prec, digits, type)",
								"() =>",
								"\tutf8 =>",
								"\tv =>",
								"\tutf8 =>",
								"\tbase64 =>",
								"\tv =>",
								"\tstring =>",
								"Util.formatRecord = function(obj)",
								"  item =>",
								"\tfunction(obj)",
								"Util.isArrayLike = obj =>",
								"Util.equals = function(a, b)",
								"(e, i) =>",
								"Util.versionCompare = (a, b) =>",
								"  isdigit = c =>",
								"Util.isGetter = (obj, propName) =>",
								"Util.isBool = value =>",
								"Util.size = (...args) =>",
								"  size(obj)",
								"Util.isMap = function(obj)",
								"Util.effectiveDeviceWidth = function()",
								"Util.getFormFields = function(initialState)",
								"(acc, { elements }) =>",
								"(acc2, { name, value }) =>",
								"Util.mergeObjects = function(objArr, predicate = (dst, src, key) => (src[key] == '' ? undefined : src[key]))",
								"Util.getUserAgent = function(headers = req.headers)",
								"Util.factor = function(start, end)",
								"Util.factorial = function(n)",
								"Util.increment = function(obj, key)",
								"Util.counter = function()",
								"  self = function()",
								"Util.filterKeys = function(obj, pred = k => true)",
								"  pred = str =>",
								"  pred = str =>",
								"Util.filterMembers = function(obj, fn)",
								"  pred = (k, v, o) =>",
								"Util.filterOutMembers = function(obj, fn)",
								"  pred = (v, k, o) =>",
								"Util.dumpMembers = obj =>",
								"Util.filterOutKeys = function(obj, arr)",
								"\t(v, k, o) =>",
								"\t(k, v) =>",
								"\tkey =>",
								"\t() =>",
								"\t(v, k, o) =>",
								"Util.removeKeys = function(obj, arr)",
								"\t(v, k, o) =>",
								"\t(k, v) =>",
								"\tkey =>",
								"Util.getKeys = function(obj, arr)",
								"Util.numbersConvert = function(str)",
								"(ch, i) =>",
								"Util.entries = function(arg)",
								"()",
								"Util.keys = function(arg)",
								"()",
								"Util.values = function(arg)",
								"()",
								"Util.removeEqual = function(a, b)",
								"Util.clear = obj =>",
								"Util.remove = (arr, item) =>",
								"\t(other, i, arr) =>",
								"Util.removeIf = function(arr, pred)",
								"Util.traverse = function(o, fn)",
								"\t(v, k, a) =>",
								"  walker(o, depth = 0)",
								"Util.traverseWithPath = function(o, rootPath = [])",
								"  walker(o, path)",
								"Util.indexByPath = function(o, p)",
								"Util.pushUnique = (arr, ...args) =>",
								"(acc, item) =>",
								"Util.insertSorted = function(arr, item, cmp = (a, b) => b - a)",
								"  next = (k, v) =>",
								"\t(k, v) =>",
								"\t(k, v) =>",
								"\t(k, v) =>",
								"  fn = function(key, value)",
								"Util.keyIterator = obj =>",
								"Util.entryIterator = obj =>",
								"()",
								"Util.mapAdapter = getSetFunction =>",
								"  get(key)",
								"  set(key, value)",
								"  .keys = () =>",
								"  .entries = () =>",
								"Util.mapFunction = map =>",
								"  fn = function(...args)",
								"  m =>",
								"  .set = (key, value) =>",
								"\t(k, v) =>",
								"  .get = key =>",
								"  .set = (key, value) =>",
								"\t(k, v) =>",
								"  .get = key =>",
								"  .set = (key, value) =>",
								"\t(k, v) =>",
								"  .get = key =>",
								"  .set = (key, value) =>",
								"\t(k, v) =>",
								"  .get = key =>",
								"  .update = function(key, fn = (k, v) => v)",
								"  .entries = function*()",
								"  .values = function*()",
								"  .keys = function*()",
								"\tfunction()",
								"([key, value]) =>",
								"  .keys = () =>",
								"  .entries = () =>",
								"  .values = () =>",
								"  .keys = function*()",
								"  .entries = function*()",
								"  .values = function*()",
								"  .filter = function(pred)",
								"()",
								"  .map = function(t)",
								"()",
								"  .forEach = function(fn)",
								"  .delete = key =>",
								"  .has = key =>",
								"Util.mapWrapper = (map, toKey = key => key, fromKey = key => key) =>",
								"  .set = (key, value) =>",
								"\t(k, v) =>",
								"  .get = key =>",
								"  .keys = () =>",
								"  .entries = function*()",
								"  .values = function*()",
								"  .has = key =>",
								"  .delete = key =>",
								"  m =>",
								"Util.mapCombinator = (forward, backward) =>",
								"  fn = function(key, value)",
								"(a,m) =>",
								"\tkey =>",
								"\ta =>",
								"  makeGetter(map, next = a => a)",
								"\tkey =>",
								"Util.predicate = (fn_or_regex, pred) =>",
								"  fn = arg =>",
								"  .valueOf = function()",
								"\targ =>",
								"Util.some = predicates =>",
								"\tvalue =>",
								"  pred =>",
								"Util.every = predicates =>",
								"\tvalue =>",
								"  pred =>",
								"Util.iterateMembers = function*(obj, predicate = (name, depth, obj, proto) => true, depth = 0)",
								"\t(...predicates) =>",
								"\t(...args) =>",
								"  pred =>",
								"\t(...predicates) =>",
								"\t(...args) =>",
								"  pred =>",
								"(pred, obj) =>",
								"Util.memberNameFilter = (depth = 1, start = 0) =>",
								"\t(m, l, o) =>",
								"\t(m, l, o) =>",
								"\t(name, depth, obj, proto) =>",
								"Util.getMemberNames = (obj, ...args) =>",
								"Util.getMemberEntries = (obj, ...args) =>",
								"  name =>",
								"  accFn = (a, m, o) =>",
								"\t(obj, ...args) =>",
								"\t(a, m) =>",
								"\t(r, a, m) =>",
								"\t(r, a) =>",
								"  incFn = (c, n, self) =>",
								"  incFn = (c, n, self) =>",
								"  inc = (i, n = 1) =>",
								"  self = function Count(n = 1)",
								"  .valueOf = function()",
								"  filterFn = (key, value) =>",
								"(acc, mem, idx) =>",
								"\tr =>",
								"\t() =>",
								"  fn = function ReduceIntoMap(arg, acc = mapObj)",
								"(acc, arg) =>",
								"\t(a, m, o) =>",
								"Util.methodNameFilter = (depth = 1, start = 0) =>",
								"\t(m, l, o) =>",
								"\t() =>",
								"\tb =>",
								"\t() =>",
								"Util.getMethodNames = (obj, depth = 1, start = 0) =>",
								"\t(a, m, o) =>",
								"Util.inherit = (dst, src, depth = 1) =>",
								"  inherits(ctor, superCtor)",
								"  ctor",
								"  superCtor",
								"  inherits(ctor, superCtor)",
								"TempCtor = function()",
								"TempCtor",
								"  superCtor",
								"  ctor",
								"  ctor",
								"Util.bindMethods = (obj, methods, dest) =>",
								"Util.getConstructor = obj =>",
								"Util.getPrototypeChain = function(obj, fn = p => p)",
								"Util.getObjectChain = (obj, fn = p => p) =>",
								"Util.getPropertyDescriptors = function(obj)",
								"\tp =>",
								"  fn = (c, p) =>",
								"\t(p, o) =>",
								"Util.weakAssign = function(...args)",
								"  other =>",
								"Util.exception = function Exception(...args)",
								"  toString(color = false)",
								"Util.location = function Location(...args)",
								"  toString(color = false)",
								"\tt =>",
								"  getFileName()",
								"  getLineNumber()",
								"  getColumnNumber()",
								"Util.stackFrame = function StackFrame(frame)",
								"  prop =>",
								"  propertyMap()",
								"  method =>",
								"([method, func]) =>",
								"  getFunction()",
								"  getMethodName()",
								"  getFunctionName()",
								"  getTypeName()",
								"  getFileName()",
								"  getLineNumber()",
								"  getColumnNumber()",
								"  get()",
								"  toString(color, opts = {})",
								"\t(t, color) =>",
								"\tt =>",
								"  p =>",
								"  p =>",
								"(f, i) =>",
								"  getLocation()",
								"  get location()",
								"Util.scriptName = () =>",
								"\t() =>",
								"\targs =>",
								"\t() =>",
								"Util.getFunctionName = () =>",
								"Util.getFunctionArguments = fn =>",
								"Util.scriptDir = () =>",
								"\t() =>",
								"\tscript =>",
								"\t() =>",
								"Util.stack = function Stack(stack, offset)",
								"  frame =>",
								"([m, p]) =>",
								"\t(acc, [method, property]) =>",
								"  getStack()",
								"  .prepareStackTrace = (_, stack) =>",
								"  stackToString(st, start = 0)",
								"()",
								"  frame =>",
								"  part =>",
								"  frame =>",
								"([func, file]) =>",
								"  n =>",
								"([func, file]) =>",
								"([func, [columnNumber, lineNumber, ...file]]) =>",
								"({ methodName, functionName: func, fileName: file, columnNumber: column, lineNumber: line }) =>",
								"\ts =>",
								"\ts =>",
								"\t() =>",
								"\ts =>",
								"\ts =>",
								"\t() =>",
								"  frame =>",
								"  frame =>",
								"  get: () =>",
								"  get: () =>",
								"*value()",
								"  toString(opts = {})",
								"  f =>",
								"  getFunctionName()",
								"  getMethodName()",
								"  getFileName()",
								"  getLineNumber()",
								"  get()",
								"(a, f) =>",
								"(fn, i) =>",
								"Util.getCallerStack = function(position = 2, limit = 1000, stack)",
								"  .prepareStackTrace = (_, stack) =>",
								"Util.getCallerFile = function(position = 2)",
								"Util.getCallerFunction = function(position = 2)",
								"Util.getCallerFunctionName = function(position = 2)",
								"Util.getCallerFunctionNames = function(position = 2)",
								"Util.getCaller = function(index = 1, stack)",
								"  f =>",
								"Util.getCallers = function(index = 1, num = Number.MAX_SAFE_INTEGER, stack)",
								"  f =>",
								"Util.getStackFrames = function(offset = 2)",
								"  frame =>",
								"Util.getStackFrame = function(offset = 2)",
								"Util.rotateLeft = function(x, n)",
								"Util.rotateRight = function(x, n)",
								"Util.hashString = function(string, bits = 32, mask = 0xffffffff)",
								"Util.flatTree = function(tree, addOutput)",
								"  addOutput = arg =>",
								"\tkey =>",
								"Util.traverseTree = function(tree, fn, depth = 0, parent = null)",
								"Util.walkTree = function(node, pred, t, depth = 0, parent = null)",
								"()",
								"  pred = i =>",
								"  t = function(i)",
								"Util.isPromise = function(obj)",
								"  setImmediate = fn =>",
								"Util.next = function(iter, observer, prev = undefined)",
								"  val =>",
								"() =>",
								"  err =>",
								"() =>",
								"Util.getImageAverageColor = function(imageElement, options)",
								"  toStringRgb()",
								"  toStringRgba()",
								"  toStringHex()",
								"  toHex = function(d)",
								"Util.jsonToObject = function(jsonStr)",
								"Util.splitLines = function(str, max_linelen = Number.MAX_SAFE_INTEGER)",
								"Util.splitAt = function*(str, ...indexes)",
								"(a, b) =>",
								"Util.decodeEscapes = function(text)",
								"  m =>",
								"([s, t]) =>",
								"Util.stripXML = text =>",
								"Util.stripHTML = html =>",
								"  p =>",
								"  p =>",
								"Util.stripNonPrintable = text =>",
								"Util.decodeHTMLEntities = function(text)",
								"\t(match, entity) =>",
								"Util.encodeHTMLEntities = (str, charset = '\\u00A0-\\u9999<>&') =>",
								"\ti =>",
								"Util.stripAnsi = function(str)",
								"Util.proxy = (obj = {}, handler) =>",
								"  get(target, key, receiver)",
								"  set(target, key, value, receiver)",
								"Util.propertyLookup = (obj = {}, handler = key => null) =>",
								"  get(target, key, receiver)",
								"Util.traceProxy = (obj, handler) =>",
								"\tfunction(name, args)",
								"  get(target, key, receiver)",
								"  member = function()",
								"Util.proxyTree = function proxyTree(...callbacks)",
								"  applyCallback = () =>",
								"  get(target, key)",
								"  set(target, key, value)",
								"  apply(target, thisArg, args)",
								"  node(path)",
								"() =>",
								"Util.construct = constructor =>",
								"F(args)",
								"F",
								"  constructor",
								"Util.constructApply = (constructor, array) =>",
								"Util.immutable = args =>",
								"  set: () =>",
								"  deleteProperty: () =>",
								"  defineProperty: () =>",
								"Util.immutableClass = (orig, ...proto) =>",
								"  p =>",
								"\tctor =>",
								"  ctor",
								"  imm = base =>",
								"  constructor(...args)",
								"Util.partial = function partial(fn /*, arg1, arg2 etc */)",
								"\tfunction()",
								"(min, max, value) =>",
								"Util.coloring = (useColor = true) =>",
								"  code(...args)",
								"  text(text)",
								"  concat(...args)",
								"  code(...args)",
								"  text(text, ...color)",
								"  concat(...args)",
								"  code(...args)",
								"  text(text, ...color)",
								"  concat(...args)",
								"Util.colorText = (...args) =>",
								"Util.decodeAnsi = (str, index) =>",
								"  isDigit = c =>",
								"  notDigit = c =>",
								"  findIndex = (pred, start) =>",
								"Util.stripAnsi = str =>",
								"Util.ansiCode = (...args) =>",
								"Util.wordWrap = (str, width, delimiter) =>",
								"Util.multiParagraphWordWrap = (str, width, delimiter) =>",
								"Util.defineInspect = (proto, ...props) =>",
								"\tfunction()",
								"(acc, key) =>",
								"(a, b, value) =>",
								"Util.bindProperties = (proxy, target, props, gen) =>",
								"  name =>",
								"(acc, name) =>",
								"  gen = p => v =>",
								"  k =>",
								"\t(a, [k, v]) =>",
								"\t(...args) =>",
								"(...args) =>",
								"\t(a, k) =>",
								"  get: () =>",
								"  get: () =>",
								"()",
								"\tobj =>",
								"  on: val =>",
								"  off: val =>",
								"  true: val =>",
								"  false: val =>",
								"AssertionFailed",
								"  constructor(message, stack)",
								"Util.assert = function assert(val, message)",
								"Util.assertEqual = function assertEqual(val1, val2, message)",
								"Util.assignGlobal = () =>",
								"Util.weakMapper = function(createFn, map = ",
								"(), hitFn)",
								"  self = function(obj, ...args)",
								"  .set = (k, v) =>",
								"  .get = k =>",
								"Util.merge = function(...args)",
								"\ta =>",
								"\ta =>",
								"(acc, arg) =>",
								"Util.transformer = (a, ...l) =>",
								"\t(c, f) =>",
								"\tfunction(...v)",
								"Util.copyTextToClipboard = (i, t) =>",
								"  module =>",
								"(a, b, c) =>",
								"() =>",
								"Util.toPlainObject = obj =>",
								"\tv =>",
								"Util.toBuiltinObject = obj =>",
								"\tv =>",
								"  t = (v, n) =>",
								"(acc, k) =>",
								"Util.timer = msecs =>",
								"  remaining = () =>",
								"  finish = callback =>",
								"  log = (method, ...args) =>",
								"  obj =>",
								"\tv =>",
								"  timeout = (msecs, tmr = timer) =>",
								"() =>",
								"\t(...args) =>",
								"\t() =>",
								"  add = (arr, ...items) =>",
								"  get delay()",
								"  get created()",
								"  get start()",
								"  get stop()",
								"  get elapsed()",
								"  get end()",
								"  get remain()",
								"  cancel()",
								"  pause()",
								"  .resume = function()",
								"  .restart = function()",
								"  callback(...args)",
								"  subscribe(f)",
								"  unsubscribe(f)",
								"  start = () =>",
								"(resolve, reject) =>",
								"Util.thenableReject = error =>",
								"  then: (resolve, reject) =>",
								"Util.wrapGenerator = fn =>",
								"\tfunction(...args)",
								"Util.wrapGeneratorMethods = obj =>",
								"Util.decorateIterable = (proto, generators = false) =>",
								"  forEach(fn, thisArg)",
								"*map(fn, thisArg)",
								"*filter(pred, thisArg)",
								"  findIndex(pred, thisArg)",
								"  indexOf(item, startIndex = -1)",
								"(e, i) =>",
								"  find(pred, thisArg)",
								"  every(pred, thisArg)",
								"  some(pred, thisArg)",
								"  reduce(fn, accu)",
								"*entries()",
								"*keys()",
								"*values()",
								"Util.swap = (a, b) =>",
								"Util.swapArray = ([a, b]) =>",
								"Util.cacheAdapter = (st, defaultOpts = {}) =>",
								"\t() =>",
								"  c =>",
								"\t() =>",
								"  getItem(request, opts = {})",
								"  setItem(request, response)",
								"  addItem(request)",
								"  removeItem(request, opts = {})",
								"  key(index)",
								"  keys(urls = false, t = a => a)",
								"  response =>",
								"  r =>",
								"  clear()",
								"Util.cachedFetch = (allOpts = {}) =>",
								"() =>",
								"  self = function CachedFetch(request, opts = {})",
								"(returnValue, fn, ...args) =>",
								"Util.proxyObject = (root, handler) =>",
								"  ptr = path =>",
								"(a, i) =>",
								"\t(value, path) =>",
								"  get(target, key)",
								"  node(path)",
								"Util.parseXML = function(xmlStr)",
								"\t() =>",
								"\tparser =>",
								"  fn = (value, ...args) =>",
								"\t() =>",
								"\tmap =>",
								"(obj, ...args) =>",
								"\t() =>",
								"\t(obj, ...args) =>",
								"  self = (obj, ...args) =>",
								"() =>",
								"\t() =>",
								"\ta =>",
								"\t() =>",
								"\t() =>",
								"\tfn =>",
								"\t() =>",
								"\t() =>",
								"\ta =>",
								"() =>",
								"\t() =>",
								"\ta =>",
								"\t() =>",
								"() =>",
								"Util.getOpt = (options = {}, args) =>",
								"  findOpt = arg =>",
								"([optname, option]) =>",
								"  opt =>",
								"\t() =>",
								"\tv =>",
								"\t() =>",
								"\t() =>",
								"\tv =>",
								"Util.getEnv = varName =>",
								"\t() =>",
								"  e =>",
								"\t() =>",
								"Util.getEnvVars = () =>",
								"\t() =>",
								"  e =>",
								"\t() =>",
								"Util.safeFunction = (fn, trapExceptions, thisObj) =>",
								"  function(...args)",
								"\tfunction(...args)",
								"\ta =>",
								"\terror =>",
								"Util.safeCall = (fn, ...args) =>",
								"Util.safeApply = (fn, args = []) =>",
								"Util.exit = exitCode =>",
								"  stdExit = std =>",
								"\t() =>",
								"\t([obj, exit]) =>",
								"\t() =>",
								"Util.atexit = handler =>",
								"Util.callMain = (fn, trapExceptions) =>",
								"(...args) =>",
								"  ret =>",
								"() =>",
								"\terr =>",
								"\t() =>",
								"\targv1 =>",
								"Util.printReturnValue = (fn, opts = {}) =>",
								"  print = (returnValue, fn, ...args) =>",
								"  self = (...args) =>",
								"Util.replaceAll = (needles, haystack) =>",
								"([re, str]) =>",
								"(acc, [match, replacement]) =>",
								"Util.quote = (str, q = '\"') =>",
								"Util.escape = (str, pred = codePoint => codePoint < 32 || codePoint > 0xff) =>",
								"Util.escapeRegex = string =>",
								"Util.consolePrinter = function ConsolePrinter(log = console.log)",
								"  self = function(...args)",
								"  .log = (...args) =>",
								"Util.consoleJoin = function(...args)",
								"Util.consoleConcat = function(...args)",
								"  self = function ConsoleConcat(...args)",
								"  clear()",
								"  log = (...args) =>",
								"  print()",
								"  i =>",
								"  output()",
								"  add(...args)",
								"Util.booleanAdapter = (getSetFn, trueValue = 1, falseValue = 0) =>",
								"\tfunction(value)",
								"  set = () =>",
								"\tfunction(...args)",
								"Util.deriveGetSet = (fn, get = v => v, set = v => v, thisObj) =>",
								"\t() =>",
								"\tv =>",
								"  handler = () =>",
								"ExFunc",
								"  constructor()",
								"  __call__(...args)",
								"Util.isatty = fd =>",
								"  mod =>",
								"Util.ttyGetWinSize = (fd = 1) =>",
								"  m =>",
								"\t(resolve, reject) =>",
								"\t(resolve, reject) =>",
								"\t(fd = 0, mode = true) =>",
								"Util.stdio = (fd, mode = true) =>",
								"Util.signal = (num, act) =>",
								"  m =>",
								"() =>",
								"Util.timeit = (fn, args = [], options = {}) =>",
								"(p, c) =>",
								"Util.lazyProperty = (obj, name, getter, opts = {}) =>",
								"  replaceProperty = value =>",
								"  function()",
								"\tfunction()",
								"  v =>",
								"Util.lazyProperties = (obj, gettersObj, opts = {}) =>",
								"  f = (a, b) =>",
								"\tfunction(a, b)",
								"(a, b) =>",
								"(a, b) =>",
								"() =>",
								"HighResolutionTime",
								"  constructor(secs = 0, nano = 0)",
								"  static create(s, n)",
								"  get seconds()",
								"  get milliseconds()",
								"  get nanoseconds()",
								"  diff(o)",
								"  sum(o)",
								"  since(o)",
								"  toString()",
								"  inspect()",
								"  hrtime(previousTimestamp)",
								"  hrtime(previousTimestamp)",
								"\t() =>",
								"\t(minDelay = 0) =>",
								"  resolve =>",
								"  resolve =>",
								"  animationFrame(t)",
								"Util.getNow = () =>",
								"  performanceNow = () =>",
								"  performanceNow = function(clock = CLOCK_MONOTONIC_RAW)",
								"Util.formatColumns = a =>",
								"(acc, row, i) =>",
								"(col, j) =>",
								"  row =>",
								"(col, j) =>",
								"Util.getPlatform = () =>",
								"\t() =>",
								"\t() =>",
								"\t() =>",
								"\t() =>",
								"\t() =>",
								"\t() =>",
								"\t() =>",
								"() =>",
								"Util.colIndexes = line =>",
								"([prev, cols], char, i) =>",
								"Util.colSplit = (line, indexes) =>",
								"  map = (name, flag) =>",
								"(value)",
								"  log = (duration, name, args, ret) =>",
								"(args, ret) =>",
								"\t(args, ret) =>",
								"  function(...args)",
								"\tfunction(...args)",
								"  both = () =>",
								"(name, args) =>",
								"  arg =>",
								"(name, ret) =>",
								"\tfunction(...args)",
								"Util.bind = function(f, ...args)",
								"  ret = function()",
								"  ret = function()",
								"  ret",
								"  f",
								"Util.bytesToUTF8 = function*(bytes)",
								"Util.codePointsToString = codePoints =>",
								"Util.bufferToString = b =>",
								"Util.levenshteinDistance = function levenshteinDistance(a, b)",
								"Util.padTrunc = (...args) =>",
								"\t(s, pad = ' ') =>",
								"Util.setReadHandler = (fd, handler) =>",
								"  os =>"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1647430555.87,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "test-opencv.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20673,
						"regions":
						{
						},
						"selection":
						[
							[
								2511,
								2513
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 73,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1647714106.44,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 972.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "make-bitmap.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2275,
						"regions":
						{
						},
						"selection":
						[
							[
								2275,
								2275
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 89,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1647714178.24,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 898.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "qjs-opencv/tests/test_freetype.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5281,
						"regions":
						{
						},
						"selection":
						[
							[
								2639,
								2639
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 88,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1647714194.01,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 893.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "qjs-opencv/tests/test_gif.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2916,
						"regions":
						{
						},
						"selection":
						[
							[
								142,
								142
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 8,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1647714282.93,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "test-bitset.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1680,
						"regions":
						{
						},
						"selection":
						[
							[
								1680,
								1680
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 59,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1647714337.58,
							"tabs_extra_last_activated_sheet_index": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 313.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "test-umat.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6518,
						"regions":
						{
						},
						"selection":
						[
							[
								4642,
								4642
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 132,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1647714352.42,
							"tabs_extra_last_activated_sheet_index": 5,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2640.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "test-imread.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4007,
						"regions":
						{
						},
						"selection":
						[
							[
								2837,
								2837
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1647986731.47,
							"tabs_extra_last_activated_sheet_index": 6,
							"tabs_extra_moving":
							[
								7,
								1
							],
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1500.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "lib/grammars/css3.g4",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16907,
						"regions":
						{
						},
						"selection":
						[
							[
								1606,
								1606
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 51,
							"syntax": "Packages/Lark Grammar Syntax/lark.tmLanguage",
							"tab_size": 4,
							"tabs_extra_last_activated": 1647995630.35,
							"tabs_extra_last_activated_sheet_index": 7,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 986.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "lib/tXml.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13413,
						"regions":
						{
						},
						"selection":
						[
							[
								7670,
								7678
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 287,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1647995631.94,
							"tabs_extra_last_activated_sheet_index": 8,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6046.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "lib/xml/util.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3713,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1647995643.69,
							"tabs_extra_last_activated_sheet_index": 9,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 780.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "lib/json/util.js",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 2519,
						"regions":
						{
						},
						"selection":
						[
							[
								1999,
								562
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 14,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1647999002.06,
							"tabs_extra_last_activated_sheet_index": 10,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 120.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "lib/util.js",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 184762,
						"regions":
						{
						},
						"selection":
						[
							[
								50290,
								50290
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 1693,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1648037700.54,
							"tabs_extra_last_activated_sheet_index": 11,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 450.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "lib/deep.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7615,
						"regions":
						{
						},
						"selection":
						[
							[
								665,
								665
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 25,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1648011660.32,
							"tabs_extra_last_activated_sheet_index": 12,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "qjs-opencv/js_rect.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19913,
						"regions":
						{
						},
						"selection":
						[
							[
								13502,
								13538
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 509,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1647717271.89,
							"tabs_extra_last_activated_sheet_index": 7,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 12081.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 34.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.8,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 0.0
	},
	"output.Protocol":
	{
		"height": 0.0
	},
	"output.Protocol(139621681009616)":
	{
		"height": 0.0
	},
	"output.Protocol(139717987054208)":
	{
		"height": 0.0
	},
	"output.Protocol(139737090363696)":
	{
		"height": 0.0
	},
	"output.Protocol(139869175772064)":
	{
		"height": 0.0
	},
	"output.Protocol(140057995355088)":
	{
		"height": 0.0
	},
	"output.Protocol(140274144933008)":
	{
		"height": 0.0
	},
	"output.Protocol(140481508860304)":
	{
		"height": 0.0
	},
	"output.Protocol(140517145502288)":
	{
		"height": 0.0
	},
	"output.Protocol(140585354219824)":
	{
		"height": 0.0
	},
	"output.Protocol(140603239275824)":
	{
		"height": 0.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "plot-cv.sublime-project",
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"deep.js",
				"lib/deep.js"
			],
			[
				"util.js",
				"lib/util.js"
			],
			[
				"txml",
				"lib/tXml.js"
			],
			[
				"css.g4",
				"lib/grammars/css3.g4"
			],
			[
				"test-imread",
				"test-imread.js"
			],
			[
				"test-uma",
				"test-umat.js"
			],
			[
				"test-bitset",
				"test-bitset.js"
			],
			[
				"test_gif",
				"qjs-opencv/tests/test_gif.js"
			],
			[
				"test_free",
				"qjs-opencv/tests/test_freetype.js"
			],
			[
				"make-bit",
				"make-bitmap.js"
			],
			[
				"quickjs-libc",
				"quickjs/quickjs-libc.c"
			],
			[
				"devtoo",
				"lib/devtools.js"
			],
			[
				"check-disc",
				"check-discogs.js"
			],
			[
				"point.js",
				"lib/geom/point.js"
			],
			[
				"draw-ut",
				"draw-utils.js"
			],
			[
				"draw-utils",
				"draw-utils.js"
			],
			[
				"test-nan",
				"test-nanovg.js"
			],
			[
				"rgba.js",
				"lib/color/rgba.js"
			],
			[
				"cvHigh",
				"qjs-opencv/js/cvHighGUI.js"
			],
			[
				"test-glfw",
				"test-glfw.js"
			],
			[
				"test-opencv",
				"test-opencv.js"
			],
			[
				"path.h",
				"include/path.h"
			],
			[
				"location.h",
				"include/location.h"
			],
			[
				"utils.h",
				"include/utils.h"
			],
			[
				"utils.c",
				"src/utils.c"
			],
			[
				"qjsm.c",
				"src/qjsm.c"
			],
			[
				"resolve",
				"resolve-imports.js"
			],
			[
				"resolve-im",
				"resolve-imports.js"
			],
			[
				"l",
				"quickjs-lexer.c"
			],
			[
				"resolve-impo",
				"resolve-imports.js"
			],
			[
				"path.c",
				"src/path.c"
			],
			[
				"qjsm",
				"src/qjsm.c"
			],
			[
				"quickjs-mi",
				"quickjs-misc.c"
			],
			[
				"cmakelist",
				"CMakeLists.txt"
			],
			[
				"list-ex",
				"list-exports.js"
			],
			[
				"repl.j",
				"lib/repl.js"
			],
			[
				"js-u",
				"src/js-utils.c"
			],
			[
				"js-ut",
				"include/js-utils.h"
			],
			[
				"streams.js",
				"tests/test_streams.js"
			],
			[
				"buffer",
				"src/buffer-utils.c"
			],
			[
				"test_te",
				"tests/test_textcode.js"
			],
			[
				"quickjs-lexe",
				"quickjs-lexer.c"
			],
			[
				"extract-str",
				"extract-structs.js"
			],
			[
				"sockets",
				"quickjs-sockets.c"
			],
			[
				"repl.js",
				"lib/repl.js"
			],
			[
				"list-exp",
				"list-exports.js"
			],
			[
				"token.c",
				"token.c"
			],
			[
				"quickjs-le",
				"quickjs-lexer.c"
			],
			[
				"jsutil",
				"js-utils.c"
			],
			[
				"quickjs-sock",
				"quickjs-sockets.h"
			],
			[
				"quickjs-location",
				"quickjs-location.h"
			],
			[
				"quickjs-loca",
				"quickjs-location.c"
			],
			[
				"CMake",
				"CMakeLists.txt"
			],
			[
				"char-ut",
				"char-utils.h"
			],
			[
				"buff",
				"buffer-utils.h"
			],
			[
				"test_dom",
				"tests/test_dom.js"
			],
			[
				"quickjs-xml",
				"quickjs-xml.c"
			],
			[
				"dom.js",
				"lib/dom.js"
			],
			[
				"location",
				"location.c"
			],
			[
				"quickjs-child",
				"quickjs-child-process.c"
			],
			[
				"cmakeli",
				"CMakeLists.txt"
			],
			[
				"CMakeLi",
				"CMakeLists.txt"
			],
			[
				"xpath",
				"lib/xpath.js"
			],
			[
				"defines.h",
				"defines.h"
			],
			[
				"queue.c",
				"queue.c"
			],
			[
				"extend",
				"lib/extendArray.js"
			],
			[
				"quickjs-sockets",
				"quickjs-sockets.c"
			],
			[
				"lexer",
				"quickjs-lexer.c"
			],
			[
				"buffer-ut",
				"buffer-utils.h"
			],
			[
				"ringbuf",
				"ringbuffer.h"
			],
			[
				"debug.h",
				"debug.h"
			],
			[
				"debug.c",
				"debug.c"
			],
			[
				"quickjs-lexer.c",
				"quickjs-lexer.c"
			],
			[
				"quickjs-loc",
				"quickjs-location.c"
			],
			[
				"xml.c",
				"quickjs-xml.c"
			],
			[
				"test-dia",
				"build/android64/CMakeFiles/qjs-predicate-static.dir/quickjs-predicate.c.o.d"
			],
			[
				"util.",
				"lib/util.js"
			],
			[
				"resol",
				"resolve-imports.js"
			],
			[
				"quickjs-pa",
				"quickjs-path.c"
			],
			[
				"util",
				"lib/util.js"
			],
			[
				"quickjs-mis",
				"quickjs-misc.c"
			],
			[
				"location.c",
				"quickjs-location.c"
			],
			[
				"quickjs-in",
				"quickjs-inspect.c"
			],
			[
				"extra",
				"extract-structs.js"
			],
			[
				"-inspe",
				"quickjs-inspect.c"
			],
			[
				"proper",
				"property-enumeration.h"
			],
			[
				"vector",
				"vector.h"
			],
			[
				"dom.j",
				"lib/dom.js"
			],
			[
				"res",
				"resolve-imports.js"
			],
			[
				"lexre",
				"lexer.c"
			],
			[
				"lexer.c",
				"quickjs-lexer.c"
			],
			[
				"pointer",
				"pointer.c"
			],
			[
				"vector.h",
				"vector.h"
			],
			[
				"lexer.h",
				"lexer.h"
			],
			[
				"quickjs.h",
				"~/Projects/plot-cv/quickjs/quickjs.h"
			],
			[
				"archive",
				"quickjs-archive.c"
			],
			[
				"pointer.c",
				"quickjs-pointer.c"
			],
			[
				"spect.c",
				"quickjs-inspect.c"
			],
			[
				"blob.c",
				"quickjs-blob.c"
			],
			[
				"repea",
				"quickjs-repeater.c"
			],
			[
				"loca",
				"quickjs-location.c"
			],
			[
				"bjson.c",
				"quickjs-bjson.c"
			],
			[
				"pred",
				"predicate.c"
			],
			[
				"char-u",
				"char-utils.h"
			],
			[
				"predi",
				"predicate.h"
			],
			[
				"virtua",
				"virtual-properties.c"
			],
			[
				"pointre",
				"pointer.c"
			],
			[
				"deep.c",
				"quickjs-deep.c"
			],
			[
				"child-",
				"child-process.c"
			],
			[
				"child-pro",
				"quickjs-child-process.c"
			],
			[
				"gpio.c",
				"quickjs-gpio.c"
			],
			[
				"buffer-u",
				"buffer-utils.c"
			],
			[
				"ointer.h",
				"pointer.h"
			],
			[
				"defin",
				"defines.h"
			],
			[
				"defines",
				"defines.h"
			],
			[
				"cutils.h",
				"char-utils.h"
			],
			[
				"debu",
				"debug.h"
			],
			[
				"repl",
				"lib/repl.js"
			],
			[
				"test_le",
				"tests/test_lexer.js"
			],
			[
				"test_lexer",
				"tests/test_lexer.js"
			],
			[
				"quickjs-pat",
				"quickjs-path.c"
			],
			[
				"test",
				"tests/test_stack.js"
			],
			[
				"jsutils",
				"CMakeFiles/qjs-syscallerror-static.dir/utils.c.o.d"
			],
			[
				"jslexe",
				"lib/jslexer.js"
			],
			[
				"inspect.c",
				"quickjs-inspect.c"
			],
			[
				"fs.js",
				"lib/fs.js"
			],
			[
				"quickjs-pre",
				"quickjs-predicate.c"
			],
			[
				"xpath.j",
				"lib/xpath.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/plot-cv.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 370.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"WS"
			]
		],
		"width": 970.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 294.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
