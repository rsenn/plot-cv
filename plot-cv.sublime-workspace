{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"COLOR",
				"COLOR_BGR2Lab"
			],
			[
				"JS_SetP",
				"JS_SetPropertyFunctionList"
			],
			[
				"inspe",
				"inspectOptions"
			],
			[
				"Sin",
				"SingleLineComment"
			],
			[
				"use",
				"useAsyncIterator_1"
			],
			[
				"high",
				"highlight"
			],
			[
				"hig",
				"highlight"
			],
			[
				"useDe",
				"useDebouncedCallback"
			],
			[
				"preac",
				"preactComponent"
			],
			[
				"modul",
				"module_loader_func"
			],
			[
				"mod",
				"module_loader_func"
			],
			[
				"jsm_mo",
				"jsm_module_record"
			],
			[
				"jsm_mod",
				"jsm_module_record"
			],
			[
				"jsm_com",
				"jsm_compiled_modules"
			],
			[
				"QUICKJS_IN",
				"QUICKJS_INCLUDE_DIR"
			],
			[
				"QUICKJS_SOU",
				"QUICKJS_SOURCES_ROOT"
			],
			[
				"getMem",
				"getMemberNames"
			],
			[
				"Po",
				"PortableFileSystem"
			],
			[
				"JS_EVAL",
				"JS_EVAL_TYPE_MODULE"
			],
			[
				"CPACK",
				"CPACK_PACKAGE_VERSION_MAJOR"
			],
			[
				"CPACK_PACK",
				"CPACK_PACKAGE_VERSION"
			],
			[
				"align_",
				"align_value_attr"
			],
			[
				"histo",
				"historySearch"
			],
			[
				"mouse",
				"mousetrackingDisable"
			],
			[
				"library",
				"libraryNames"
			],
			[
				"setMax",
				"setMaxListeners"
			],
			[
				"cons",
				"constructor"
			],
			[
				"Portable",
				"PortableFileSystem"
			],
			[
				"Get",
				"GetRange"
			],
			[
				"Minn",
				"MinnetHttpRequest"
			],
			[
				"Des",
				"DeserializeEntries"
			],
			[
				"define",
				"defineProperties(...)"
			],
			[
				"Deseria",
				"DeserializeEntries"
			],
			[
				"De",
				"DeserializeEntries"
			],
			[
				"Eve",
				"EventEmitter"
			],
			[
				"PATH_",
				"PATH_FNM_NOMATCH"
			],
			[
				"PATH_FNM_NO",
				"PATH_FNM_NOESCAPE"
			],
			[
				"asyn",
				"asyncIterator"
			],
			[
				"RPC",
				"RPCClientConnection"
			],
			[
				"Const",
				"Constants"
			],
			[
				"Impo",
				"ImportSpecifier"
			],
			[
				"Export",
				"ExportNamedDeclaration"
			],
			[
				"Imm",
				"ImmutableTranslation"
			],
			[
				"elem",
				"elementTransform"
			],
			[
				"getOwn",
				"getOwnPropertyDescriptors(...)"
			],
			[
				"minn",
				"minnet_ws_class_id"
			],
			[
				"JS_Get",
				"JS_GetOpaque"
			],
			[
				"getOw",
				"getOwnPropertySymbols(...)"
			],
			[
				"Minnet",
				"MinnetWebsocket"
			],
			[
				"Message",
				"MessageTransceiver"
			],
			[
				"corr",
				"CorrelateSchematicAndBoard"
			],
			[
				"Sys",
				"SyscallError"
			],
			[
				"getProp",
				"getPropertyDescriptors"
			],
			[
				"getO",
				"getOwnPropertyDescriptors(...)"
			],
			[
				"get",
				"getOwnPropertyDescriptors(...)"
			],
			[
				"toArra",
				"toArrayBuffer"
			],
			[
				"codePo",
				"codePointAt"
			],
			[
				"print",
				"print_status"
			],
			[
				"tty",
				"ttySetRaw"
			],
			[
				"variable",
				"variablesReference"
			],
			[
				"variables",
				"variablesReference"
			],
			[
				"JSIn",
				"JSInputArray"
			],
			[
				"keypoin",
				"keypoint_proto"
			],
			[
				"lws_call",
				"lws_callback_http_dummy"
			],
			[
				"utf",
				"utf8_first_code_mask"
			],
			[
				"from",
				"fromCodePoint"
			],
			[
				"length",
				"history_length"
			],
			[
				"Array",
				"ArrayBufferToString"
			],
			[
				"JSMo",
				"JSModuleLoaderFunc"
			],
			[
				"JS",
				"JSVideoWriterData"
			],
			[
				"D",
				"DebuggerProtocol"
			],
			[
				"Debu",
				"DebuggerProtocol"
			],
			[
				"descripto",
				"descriptor_channels"
			],
			[
				"descript",
				"descriptorExtractor"
			],
			[
				"pattern",
				"patternScale"
			],
			[
				"n",
				"nOctaves"
			],
			[
				"nO",
				"nOctaves"
			],
			[
				"quali",
				"quality_level"
			],
			[
				"JS_P",
				"JS_PROP_ENUMERABLE"
			],
			[
				"Feat",
				"Feature2D"
			],
			[
				"PROP_DESCRIPTOR_",
				"PROP_DESCRIPTOR_TYPE"
			],
			[
				"js_feat",
				"js_feature2d_data"
			],
			[
				"js_key",
				"js_keypoint_export"
			],
			[
				"x",
				"xfeatures2d"
			],
			[
				"JSInput",
				"JSInputOutputArray"
			],
			[
				"JS_NewArray",
				"JS_NewArrayBufferCopy"
			],
			[
				"Rota",
				"RotatedRect"
			],
			[
				"js_rotated",
				"js_rotated_rect_new"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"getOwnP",
				"getOwnPropertyNames"
			],
			[
				"PROP_Y",
				"PROP_YINTERCEPT"
			],
			[
				"PROP_X",
				"PROP_XINTERCEPT"
			],
			[
				"RE",
				"RETURN_PATH"
			],
			[
				"insp",
				"inspectSymbol"
			],
			[
				"getOwnProp",
				"getOwnPropertyNames"
			],
			[
				"contour",
				"contour_proto"
			],
			[
				"dst",
				"dst_pts"
			],
			[
				"CXX_",
				"CXX_STANDARD_VALUE"
			],
			[
				"process",
				"processor_or_index"
			],
			[
				"proces",
				"processor_or_index"
			],
			[
				"w",
				"width"
			],
			[
				"FUNC_TO",
				"FUNC_TOARRAY"
			],
			[
				"JSInpu",
				"JSInputOutputArray"
			],
			[
				"JS_Throw",
				"JS_ThrowInternalError"
			],
			[
				"typed",
				"typedarray_ctor"
			],
			[
				"JS_GetP",
				"JS_GetPropertyStr"
			],
			[
				"depe",
				"dependent_scope_decl_ref_expr"
			],
			[
				"com",
				"compound_stmt"
			],
			[
				"CXXConstruc",
				"CXXConstructorDecl"
			],
			[
				"refere",
				"referencedDecl"
			],
			[
				"Acc",
				"AccessSpecDecl"
			],
			[
				"value",
				"valueCategory"
			],
			[
				"ini",
				"initializers"
			],
			[
				"res",
				"RestElement"
			],
			[
				"arg",
				"argc"
			],
			[
				"instru",
				"instrument"
			],
			[
				"defaul",
				"defaultExport"
			],
			[
				"getBy",
				"getByIdOrName"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "() =>\n  res =>\n() =>\n  r =>\n  r =>\n  entries()\nGetProject = arg =>\n  p =>\n  add = (arr, ...items) =>\n  useSlot = (arr, i) =>\n() =>\n  v =>\n  trklGetSet = (get, set) => value =>\nMouseEvents = h =>\n() =>\n(parent, delegate) =>\n  append_to(elem, p)\nDrawSVG(...args)\n  append_to(elem, p)\n  adjustViewBox(e)\n  calcViewBox(box)\n  setViewBox(svgOwner, box)\nElementToXML = (e, predicate) =>\n  (v, k) =>\n  (v, k) =>\n  (v, k) =>\n  readFile(filename)\n  writeFile(filename, data, overwrite = true)\n  exists(filename)\n  realpath(filename)\nLoadFile(file)\nSaveFile(filename, data, contentType)\n  s =>\n() =>\nSaveSVG(filename, layers = [1, 16, 20, 21, 22, 23, 25, 27, 47, 48, 51])\n  predicate = element =>\nLoadSVG(filename)\nLoadImage(filename)\n() =>\nRenderComponent(component)\nModifyColors = fn => e =>\nFindLayer = name_or_id =>\n  n =>\n  l =>\n(id = '#geom') =>\n(props = {}) =>\n  maxZIndex = () =>\n  e =>\n  z =>\n  z =>\n() =>\n  randomColor = () =>\nDrawArc(start, end, angle)\n  props =>\n  p =>\n  a =>\n  m =>\n  hex =>\n  p =>\n  p =>\n  p =>\n({ x, y }) =>\n  a =>\n({ x, y }, i) =>\n  e =>\n(l, i) =>\n(p, i) =>\n(p, i) =>\n  add = (level, item) =>\nRecurseBinaryNode(node, parent = null, depth = 0)\n(nodes, i, level) =>\n  fx = j =>\n(node, j) =>\n  item =>\nDrawNode(x, y, node)\nDrawEdge(item, parent)\nGetPaths(query, parent = project.svgElement)\n  (a, e) =>\nPathToPolylines(path, step = 0.01)\n  p =>\n  poly =>\n  poly =>\n  (p, d, set, stop) =>\nPathToPolyline(path, step = 0.01)\n  (p, d, set, stop) =>\nPathsToPolylines(paths, step = 0.01)\nOutsetPath(path, offset, miterLimit = 2, arcTolerance = 0.01)\n  .toPolylines = function()\n  p =>\n({ X, Y }) =>\nOutsetPaths(paths, offset, miterLimit = 2, arcTolerance = 0.25)\n(a, p) =>\nClipPath(path, clip, mode = ClipperLib.ClipType.ctUnion)\n  add = (p, clip = false) =>\n  .toPolylines = function()\n  p =>\n({ X, Y }) =>\n  saveItemStates(itemList, get = item => Util.is.\n(item.\n))\n  item =>\n  restoreItemStates( itemStates, /*prettier-ignore */ set = (item, value) => item.\n(value ? 'yes' : 'no') )\nEagleMaps(project)\n  transformPath = p =>\n  e =>\n  dom2eagle = node =>\n  eagle2dom = elem =>\n  path2dom = p =>\n(key, value) =>\n(key, value) =>\nPackageNames(doc = project.doc)\n  e =>\n([e, b]) =>\n([e, w, h, m, v]) =>\n({ index, ...match }) =>\n  ({ s, v, indexes }, match, i) =>\n([token, index]) =>\n([token, index]) =>\nNextDocument(n = 1)\n  (idx, i) =>\n  (idx, i) =>\nLoadDocument(project, parentElem)\n  err =>\n() =>\n  ent =>\n() =>\n  ent =>\n  renamePackages()\n  a =>\n  value =>\n  layer =>\n() =>\n  layer =>\n() =>\n  fn = function(v)\n() =>\n  .makeGroup = function({ transform, ...props } = {})\n  id =>\n() =>\n  xx()\n  () =>\n(transform)\n  (tag, attr, children = []) =>\n  value =>\n() =>\nRect\nChooseDocument(project, i)\nGenerateVoronoi = () =>\nRect\n  p =>\n  e =>\n({ lSite, rSite, ...edge }) =>\n  e =>\n({ lSite, rSite, ...edge }) =>\n  e =>\n({ va, vb, ...edge }) =>\n  v =>\n  add = (arr, ...items) =>\n  l =>\n  t =>\n  l =>\n  t =>\n  p =>\n  (acc, { site, halfedges }) =>\n({ site }) =>\nPackageChildren(element, layer)\n(c, i) =>\n([i, p]) =>\n([i, e]) =>\nElementChildren(layer = 'tPlace', rfn = ent => \n(ent))\n([name, element]) =>\nElementGeometries(layer = 'tPlace', rfn = ent => \n(ent))\n  ent =>\n([name, children]) =>\n([i, e]) =>\n([name, lines]) =>\n  pts =>\n([name, lines, polygons]) =>\nNewPath(path)\nMakeFitAction = index =>\n  event =>\nZoomFactor(val = config.\n)\nZoomLog(factor)\nAdjustZoom(l = config.\n)\nCreateGrblSocket = (port = 'tnt1') =>\nHandleMessage(msg)\n  pointStr =>\n  socketFn = () =>\n  .send = (...args) =>\nAuthorizationDialog = ({ onAuth, ...props }) =>\n  onSubmit: () =>\n  onInput: e =>\n  onInput: e =>\n  onClick: e =>\n  arg =>\n  .onload = () =>\n  response =>\n  e =>\n  v =>\nTestArc: () =>\n() =>\n(push, stop) =>\n() =>\n(push, stop) =>\n  target =>\n  (key, modifiers = 0) =>\n  .focusSearch = state =>\n  children: () =>\n  geometries: () =>\n  value =>\n() =>\n  testComponent = props =>\nFile(obj, i)\nFile\nFile.prototype.toString = function()\n(a, b) =>\n(obj, i) =>\n(acc, file) =>\n  i =>\n  value =>\n  value =>\n  value =>\n  value =>\n  value =>\n  value =>\n  updateIfChanged = (trkl, newValue, callback) =>\n  (elem, i) =>\n  changeInput = e =>\n  p =>\n  arg =>\nConsumer = props =>\n()\n  log(type, time, msg)\nLogger = props =>\n()\n([type, d, t, m], i) =>\nDumper = props =>\n  value =>\n([k, v], i) =>\nCommander = ({ onCommand, ...props }) =>\n  handler = e =>\n  toggle = trkl =>\nLayer = ({ title, name, label, i, color, element, className, ...props }) =>\n  setVisible = value =>\n  e =>\n  e =>\n  l =>\n  l =>\n  (item, value) =>\n  item =>\n  l =>\n([l, state]) =>\n  e =>\n  onMouseMove: e =>\n  onMouseUp: e =>\nDocumentList\n  constructor()\n(push, stop) =>\n  add(name, component)\n  addEntry([name, component])\n  remove(name)\n  update()\n  fn: e =>\n  fn: () =>\n  open =>\n  props =>\n  props =>\n  e =>\n  i =>\n  i =>\n({ coord }) =>\n  side =>\n  create: (project, props = {}) =>\n  a =>\n  e =>\n  e =>\n  name =>\n  e =>\n  makeLayerName(name, side)\n  fn: () =>\n(e, p, i) =>\n  makeSortCompare: key =>\n  function(a, b)\n  function(a, b)\n  onCommand: cmdStr =>\n  handleChange: e =>\n  event =>\n  e =>\nMoveEvent(event, prevEvent)\nWalkUp(e)\n  e =>\n  z =>\n  p =>\n  e =>\n  e =>\n  e =>\n  v =>\n  l =>\n  e =>\n  () =>\n  (e, depth) =>\n  classes =>\n  e =>\n  e =>\n  (a, b) =>\n  (a, b) =>\nNode\n  e =>\n  (p, d, set, stop) =>\n  e =>\n  e =>\nTouchEvent(event)\n  e =>\n(p, i) =>\n(a, b) =>\n  size =>\n  border =>\n  r =>\n  mod(n, m)\n() =>\n  (pos, last, first) =>\n  cancel()\n  .oncontextmenu = function(e)\n  .processEvents = function eventLoop()\n  event =>\n  e =>\n  onRuntimeInitialized: () =>\n  print: txt =>",
			"settings":
			{
				"buffer_size": 5534,
				"line_ending": "Unix",
				"name": "𝌆 Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					126,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/geom/align.js",
						"symkeys":
						[
							[
								6,
								26
							],
							[
								135,
								166
							],
							[
								207,
								236
							],
							[
								284,
								314
							]
						],
						"symlist":
						[
							" function Align(arg)",
							"Align.horizontal = alignment =>",
							"Align.vertical = alignment =>",
							" function AlignToString(value)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABtCQAAUmVjdChhcmcpCiAgZmllbGQgPT4KICBhcmcgPT4KICBhcmcgPT4KUmVjdApTaXplClBvaW50ClJlY3QKUmVjdC5mcm9tU3RyaW5nID0gc3RyID0+CiAgbSA9PgpSZWN0ClJlY3QucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oZm4pClJlY3QucHJvdG90eXBlLmNvcm5lcnMgPSBmdW5jdGlvbigpClJlY3QKUmVjdC5wcm90b3R5cGUuaXNTcXVhcmUgPSBmdW5jdGlvbigpClJlY3QKUmVjdC5wcm90b3R5cGUuZ2V0QXJlYSA9IGZ1bmN0aW9uKCkKUmVjdC5wcm90b3R5cGUudG9Tb3VyY2UgPSBmdW5jdGlvbihvcHRzID0ge30pClJlY3QKICBnZXQoKQogIHNldCh2YWx1ZSkKUmVjdAogIGdldCgpCiAgc2V0KHZhbHVlKQpSZWN0CiAgZ2V0KCkKICBzZXQodmFsdWUpClJlY3QKICBnZXQoKQogIHNldCh2YWx1ZSkKUmVjdAogIGdldCgpClJlY3QKICByZWN0ID0+CiAgayA9PgogIHYgPT4KICByZWN0ID0+CiAgayA9PiB2ID0+ClJlY3QKICBnZXQoKQpSZWN0ClJlY3QKICBnZXQoKQpSZWN0CiAgZ2V0KCkKUmVjdC5wcm90b3R5cGUucG9pbnRzID0gZnVuY3Rpb24oY3RvciA9IGl0ZW1zID0+IEFycmF5LgooaXRlbXMpKQpSZWN0ClJlY3QucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uKC4uLmFyZ3MpClBvaW50ClNpemUKUmVjdC5wcm90b3R5cGUuc2NhbGUgPSBmdW5jdGlvbihmYWN0b3IpClJlY3QucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uKC4uLmFyZ3MpClBvaW50ClNpemUKUmVjdC5wcm90b3R5cGUuZGl2ID0gZnVuY3Rpb24oLi4uYXJncykKUG9pbnQKU2l6ZQpSZWN0LnByb3RvdHlwZS5vdXRzZXQgPSBmdW5jdGlvbih0cmJsKQpSZWN0LnByb3RvdHlwZS5pbnNldCA9IGZ1bmN0aW9uKHRyYmwpClJlY3QucHJvdG90eXBlLmluc2lkZSA9IGZ1bmN0aW9uKHBvaW50KQpSZWN0LnByb3RvdHlwZS5maXQgPSBmdW5jdGlvbihvdGhlciwgYWxpZ24gPSBBbGlnbi5DRU5URVIgfCBBbGlnbi5NSURETEUgfCBSZWN0LkNPTlRBSU4pClNpemUKKGEsIGIpID0+CihhY2MsIGZhY3RvcikgPT4KUmVjdC5wcm90b3R5cGUucG9pbnRGcm9tQ2VudGVyID0gZnVuY3Rpb24ocG9pbnQpClBvaW50ClJlY3QucHJvdG90eXBlLnRvQ1NTID0gZnVuY3Rpb24oKQpQb2ludApTaXplClJlY3QucHJvdG90eXBlLnRvU1ZHID0gZnVuY3Rpb24oZmFjdG9yeSwgYXR0cnMgPSB7IHN0cm9rZTogJyMwMDAnLCBmaWxsOiAnbm9uZScgfSwgcGFyZW50ID0gbnVsbCwgcHJlYykKUmVjdC5wcm90b3R5cGUudG9UUkJMID0gZnVuY3Rpb24oKQpSZWN0LnByb3RvdHlwZS50b0FycmF5ID0gZnVuY3Rpb24oKQpSZWN0LnByb3RvdHlwZS50b1BvaW50cyA9IGZ1bmN0aW9uKC4uLmFyZ3MpCigpID0+CiAgcG9pbnRzID0+CiAgcG9pbnRzID0+ClJlY3QucHJvdG90eXBlLnRvTGluZXMgPSBmdW5jdGlvbihjdG9yID0gbGluZXMgPT4gQXJyYXkuCihsaW5lcywgcG9pbnRzID0+IAooLi4ucG9pbnRzKSkpClJlY3QKUmVjdC5wcm90b3R5cGUuYWxpZ24gPSBmdW5jdGlvbihhbGlnbl90bywgYSA9IDApClJlY3QucHJvdG90eXBlLnJvdW5kID0gZnVuY3Rpb24ocHJlY2lzaW9uID0gMC4wMDEsIGRpZ2l0cywgdHlwZSkKUmVjdC5wcm90b3R5cGUudG9PYmplY3QgPSBmdW5jdGlvbihiYiA9IGZhbHNlKQpSZWN0LnByb3RvdHlwZS5iYm94ID0gZnVuY3Rpb24oKQpSZWN0LnByb3RvdHlwZS50cmFuc2Zvcm0gPSBmdW5jdGlvbihtKQpNYXRyaXgKUmVjdAooKQpSZWN0CiAgZnVuY3Rpb24oZGVwdGgsIG9wdGlvbnMpClJlY3QuaXNCQm94ID0gcmVjdCA9PgogIHByb3AgPT4KUmVjdC5hc3NpZ24gPSAodG8sIHJlY3QpID0+ClJlY3QuYWxpZ24gPSAocmVjdCwgYWxpZ25fdG8sIGEgPSAwKSA9PgpSZWN0ClJlY3QudG9DU1MgPSByZWN0ID0+ClJlY3QKUmVjdC5yb3VuZCA9IChyZWN0LCAuLi5hcmdzKSA9PgpSZWN0Lmluc2V0ID0gKHJlY3QsIHRyYmwpID0+ClJlY3Qub3V0c2V0ID0gKHJlY3QsIHRyYmwpID0+ClJlY3QuY2VudGVyID0gcmVjdCA9PgpSZWN0LmJpbmQgPSByZWN0ID0+ClJlY3QuaW5zaWRlID0gKHJlY3QsIHBvaW50KSA9PgpSZWN0LmZyb20gPSBmdW5jdGlvbihvYmopCiAgZm4gPSAodjEsIHYyKSA9PgpSZWN0LmZyb21DaXJjbGUgPSBmdW5jdGlvbiguLi5hcmdzKQogIChyZWN0LCAuLi5hcmdzKSA9PgpSZWN0ClJlY3QudG9Tb3VyY2UgPSAocmVjdCwgb3B0cyA9IHt9KSA9PgpSZWN0LmJpbmQgPSAoLi4uYXJncykgPT4KICBnZW4gPSBrID0+IHYgPT4KKHJlY3QsIHN4LCBzeSkgPT4KKHJlY3QsIHdpZHRoLCBoZWlnaHQpID0+CihyZWN0LCB4LCB5KSA9PgpSZWN0CiAgZnVuY3Rpb24oLi4uYXJncykKICB0ZXN0Rm4gPSAocHJvcCwgbmFtZSwgb2JqKSA9PgogIG4gPT4KICBmdW5jdGlvbigpCiAgKCkgPT4KUmVjdC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbihvcHRzID0ge30pCiAgcCA9PgAAAAAAAAAAXQAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					127,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/test-cv.js",
						"symkeys":
						[
							[
								1003,
								1033
							],
							[
								1113,
								1143
							],
							[
								1209,
								1220
							],
							[
								1362,
								1383
							],
							[
								1599,
								1610
							],
							[
								1634,
								1645
							],
							[
								1726,
								1748
							],
							[
								2416,
								2421
							],
							[
								2510,
								2517
							],
							[
								2759,
								2785
							],
							[
								3840,
								3844
							],
							[
								3938,
								3942
							],
							[
								7366,
								7370
							]
						],
						"symlist":
						[
							"function WriteImage(name, mat)",
							"function SaveConfig(configObj)",
							"([k, v]) =>",
							"function LoadConfig()",
							"([k, v]) =>",
							"([k, v]) =>",
							"function main(...args)",
							"() =>",
							"name =>",
							" function toHex(n, b = 2)",
							"k =>",
							"k =>",
							"p =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABdAAAAQWxpZ24oYXJnKQpBbGlnbi5ob3Jpem9udGFsID0gYWxpZ25tZW50ID0+CkFsaWduLnZlcnRpY2FsID0gYWxpZ25tZW50ID0+CkFsaWduVG9TdHJpbmcodmFsdWUpAAAAAAAAAACjAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					128,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACjAAAAV3JpdGVJbWFnZShuYW1lLCBtYXQpClNhdmVDb25maWcoY29uZmlnT2JqKQooW2ssIHZdKSA9PgpMb2FkQ29uZmlnKCkKKFtrLCB2XSkgPT4KKFtrLCB2XSkgPT4KICBtYWluKC4uLmFyZ3MpCigpID0+CiAgbmFtZSA9PgogIHRvSGV4KG4sIGIgPSAyKQogIGsgPT4KICBrID0+CiAgcCA9PgAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					129,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/qjs-opencv/js/cvHighGUI.js",
						"symkeys":
						[
							[
								429,
								443
							],
							[
								662,
								676
							],
							[
								753,
								758
							],
							[
								771,
								780
							],
							[
								846,
								851
							],
							[
								894,
								902
							],
							[
								948,
								957
							],
							[
								1000,
								1006
							],
							[
								1010,
								1023
							],
							[
								1081,
								1087
							],
							[
								1092,
								1135
							],
							[
								1235,
								1248
							],
							[
								1336,
								1351
							],
							[
								1498,
								1509
							],
							[
								1699,
								1714
							],
							[
								1769,
								1780
							],
							[
								1841,
								1859
							],
							[
								1921,
								1936
							],
							[
								2011,
								2031
							],
							[
								2116,
								2140
							],
							[
								2256,
								2265
							],
							[
								2306,
								2315
							],
							[
								2353,
								2438
							],
							[
								2517,
								2526
							],
							[
								2542,
								2566
							],
							[
								2715,
								2720
							],
							[
								2798,
								2850
							],
							[
								3433,
								3494
							],
							[
								3750,
								3754
							],
							[
								3803,
								3808
							],
							[
								4171,
								4175
							]
						],
						"symlist":
						[
							"(acc, name) =>",
							"(acc, name) =>",
							"() =>",
							" event =>",
							"() =>",
							" name =>",
							" flags =>",
							"Screen",
							"static size()",
							"Window",
							"constructor(name, flags = cv.WINDOW_NORMAL)",
							"move(...args)",
							"resize(...args)",
							"align(n= 0)",
							"get imageRect()",
							"get(propId)",
							"set(propId, value)",
							"setTitle(title)",
							"setMouseCallback(fn)",
							" (event, x, y, flags) =>",
							"show(mat)",
							"valueOf()",
							" function TextStyle(fontFace = cv.FONT_HERSHEY_PLAIN, fontScale = 1.0, thickness = 1)",
							"TextStyle",
							"size(text, fn = y => {})",
							" y =>",
							"draw(mat, text, pos, color, lineThickness, lineType)",
							" function DrawText(dst, text, color, fontFace, fontSize = 13)",
							"m =>",
							" y =>",
							"m =>"
						]
					},
					"AQAAAAAAAAAAAAAATQIAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					130,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/test-video.js",
						"symkeys":
						[
							[
								1259,
								1274
							],
							[
								1300,
								1321
							],
							[
								1354,
								1382
							],
							[
								1422,
								1442
							],
							[
								1472,
								1484
							],
							[
								1507,
								1517
							],
							[
								1538,
								1559
							],
							[
								1591,
								1616
							],
							[
								1661,
								1682
							],
							[
								1758,
								1779
							],
							[
								1879,
								1888
							],
							[
								1906,
								1916
							],
							[
								1978,
								1987
							],
							[
								2048,
								2056
							],
							[
								2116,
								2124
							],
							[
								2186,
								2214
							],
							[
								2255,
								2262
							],
							[
								2306,
								2356
							],
							[
								2360,
								2364
							],
							[
								2387,
								2397
							],
							[
								2428,
								2452
							],
							[
								2483,
								2488
							],
							[
								2527,
								2552
							],
							[
								2800,
								2812
							],
							[
								2833,
								2853
							],
							[
								2927,
								2956
							],
							[
								3046,
								3067
							],
							[
								3108,
								3187
							],
							[
								3259,
								3289
							],
							[
								3359,
								3393
							],
							[
								3441,
								3464
							],
							[
								3491,
								3495
							],
							[
								3549,
								3576
							],
							[
								3654,
								3686
							],
							[
								3882,
								3904
							],
							[
								4395,
								4408
							],
							[
								4565,
								4584
							],
							[
								4649,
								4692
							],
							[
								5426,
								5448
							],
							[
								5511,
								5517
							],
							[
								5553,
								5557
							],
							[
								5737,
								5758
							],
							[
								5812,
								5841
							],
							[
								9108,
								9139
							],
							[
								9741,
								9769
							],
							[
								9940,
								9963
							],
							[
								10023,
								10046
							],
							[
								10169,
								10198
							],
							[
								10412,
								10436
							],
							[
								10637,
								10664
							],
							[
								10712,
								10717
							],
							[
								10995,
								11024
							],
							[
								11561,
								11574
							],
							[
								11804,
								11812
							],
							[
								12292,
								12329
							],
							[
								12456,
								12461
							],
							[
								12615,
								12636
							],
							[
								12677,
								12696
							],
							[
								12706,
								12718
							],
							[
								12836,
								12841
							],
							[
								13578,
								13616
							],
							[
								16854,
								16877
							],
							[
								17676,
								17688
							],
							[
								17904,
								17943
							],
							[
								20470,
								20509
							],
							[
								20545,
								20565
							],
							[
								21186,
								21190
							],
							[
								21565,
								21598
							],
							[
								21682,
								21691
							],
							[
								21724,
								21745
							],
							[
								22467,
								22481
							],
							[
								22598,
								22614
							],
							[
								22753,
								22761
							]
						],
						"symlist":
						[
							"NTH_POINT: c =>",
							"RADIAL_DISTANCE: c =>",
							"PERPENDICULAR_DISTANCE: c =>",
							"REUMANN_WITKAM: c =>",
							"OPHEIM: c =>",
							"LANG: c =>",
							"DOUGLAS_PEUCKER: c =>",
							"function Hierarchy(array)",
							".index = function(id)",
							".index = function(id)",
							"Hierarchy",
							"parent(id)",
							"child(id)",
							"next(id)",
							"prev(id)",
							"function getConstants(names)",
							"name =>",
							"function findConstant(value, keyCond = k => /^CV/.",
							"(k))",
							" (v, k) =>",
							"function findType(value)",
							" k =>",
							"function getBitDepth(mat)",
							"(...args) =>",
							"function minMax(mat)",
							"function modifierMap(keyCode)",
							"([modifier, flag]) =>",
							"function drawContour(mat, contour, color, thickness = 1, lineType = cv.LINE_AA)",
							"function* getParents(hier, id)",
							"function getContourDepth(hier, id)",
							"function findRoot(hier)",
							"h =>",
							"function* getToplevel(hier)",
							"function* walkContours(hier, id)",
							"function main(...args)",
							" () =>",
							" (file, current) =>",
							" (arg, current, options, results) =>",
							"makeRainbow = steps =>",
							"hue =>",
							"h =>",
							"printFlags = flags =>",
							"function (event, x, y, flags)",
							"function AcquireFrame(src, dst)",
							"function Grayscale(src, dst)",
							"function Norm(src, dst)",
							"function Blur(src, dst)",
							"function EdgeDetect(src, dst)",
							"function Morph(src, dst)",
							"function Contours(src, dst)",
							" h =>",
							"function HoughLines(src, dst)",
							" (i, n) =>",
							"image =>",
							" function(value, count, name, window)",
							"() =>",
							"ClearSurface = mat =>",
							"MakeSurface = () =>",
							"(...args) =>",
							"() =>",
							" (acc, [modifier, active]) =>",
							" function showOutput()",
							"([i, id]) =>",
							" function drawParam(param, y, color)",
							" function saveContours(contours, size)",
							"(acc, contour, i) =>",
							"d =>",
							" function saveLines(lines, size)",
							"coords =>",
							"([x1, y1, x2, y2]) =>",
							"(a, [k, v]) =>",
							" frame =>",
							"frame =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABNAgAAKGFjYywgbmFtZSkgPT4KKGFjYywgbmFtZSkgPT4KKCkgPT4KICBldmVudCA9PgooKSA9PgogIG5hbWUgPT4KICBmbGFncyA9PgpTY3JlZW4KICBzdGF0aWMgc2l6ZSgpCldpbmRvdwogIGNvbnN0cnVjdG9yKG5hbWUsIGZsYWdzID0gY3YuV0lORE9XX05PUk1BTCkKICBtb3ZlKC4uLmFyZ3MpCiAgcmVzaXplKC4uLmFyZ3MpCiAgYWxpZ24obj0gMCkKICBnZXQgaW1hZ2VSZWN0KCkKICBnZXQocHJvcElkKQogIHNldChwcm9wSWQsIHZhbHVlKQogIHNldFRpdGxlKHRpdGxlKQogIHNldE1vdXNlQ2FsbGJhY2soZm4pCiAgKGV2ZW50LCB4LCB5LCBmbGFncykgPT4KICBzaG93KG1hdCkKICB2YWx1ZU9mKCkKVGV4dFN0eWxlKGZvbnRGYWNlID0gY3YuRk9OVF9IRVJTSEVZX1BMQUlOLCBmb250U2NhbGUgPSAxLjAsIHRoaWNrbmVzcyA9IDEpClRleHRTdHlsZQogIHNpemUodGV4dCwgZm4gPSB5ID0+IHt9KQogIHkgPT4KICBkcmF3KG1hdCwgdGV4dCwgcG9zLCBjb2xvciwgbGluZVRoaWNrbmVzcywgbGluZVR5cGUpCkRyYXdUZXh0KGRzdCwgdGV4dCwgY29sb3IsIGZvbnRGYWNlLCBmb250U2l6ZSA9IDEzKQogIG0gPT4KICB5ID0+CiAgbSA9PgAAAAAAAAAASwUAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					131,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/util.js",
						"symkeys":
						[
							[
								132,
								149
							],
							[
								384,
								433
							],
							[
								1328,
								1332
							],
							[
								2158,
								2165
							],
							[
								2687,
								2701
							],
							[
								2973,
								2979
							],
							[
								3094,
								3121
							],
							[
								3169,
								3200
							],
							[
								3356,
								3366
							],
							[
								3405,
								3429
							],
							[
								3496,
								3512
							],
							[
								3557,
								3574
							],
							[
								3622,
								3642
							],
							[
								3693,
								3716
							],
							[
								3764,
								3790
							],
							[
								4209,
								4214
							],
							[
								4273,
								4297
							],
							[
								4320,
								4336
							],
							[
								4351,
								4362
							],
							[
								4402,
								4418
							],
							[
								4433,
								4445
							],
							[
								4486,
								4502
							],
							[
								4517,
								4532
							],
							[
								4576,
								4592
							],
							[
								4607,
								4625
							],
							[
								4672,
								4688
							],
							[
								4703,
								4724
							],
							[
								4774,
								4790
							],
							[
								4805,
								4829
							],
							[
								4955,
								4978
							],
							[
								5061,
								5081
							],
							[
								5336,
								5348
							],
							[
								5398,
								5410
							],
							[
								5530,
								5553
							],
							[
								5636,
								5663
							],
							[
								5918,
								5939
							],
							[
								6002,
								6023
							],
							[
								6159,
								6183
							],
							[
								6279,
								6286
							],
							[
								6313,
								6320
							],
							[
								6352,
								6374
							],
							[
								6467,
								6474
							],
							[
								6498,
								6505
							],
							[
								6532,
								6554
							],
							[
								6604,
								6611
							],
							[
								6665,
								6672
							],
							[
								6704,
								6733
							],
							[
								7079,
								7104
							],
							[
								7231,
								7250
							],
							[
								7332,
								7351
							],
							[
								7538,
								7557
							],
							[
								7635,
								7654
							],
							[
								7727,
								7746
							],
							[
								7842,
								7882
							],
							[
								8024,
								8037
							],
							[
								8063,
								8096
							],
							[
								8345,
								8359
							],
							[
								8520,
								8527
							],
							[
								8760,
								8766
							],
							[
								9180,
								9204
							],
							[
								9583,
								9619
							],
							[
								9661,
								9679
							],
							[
								9862,
								9899
							],
							[
								9980,
								9998
							],
							[
								10016,
								10027
							],
							[
								10093,
								10127
							],
							[
								10154,
								10172
							],
							[
								10447,
								10492
							],
							[
								10692,
								10710
							],
							[
								10961,
								10987
							],
							[
								11246,
								11265
							],
							[
								11344,
								11363
							],
							[
								11513,
								11561
							],
							[
								11742,
								11757
							],
							[
								11783,
								11793
							],
							[
								11880,
								11885
							],
							[
								12652,
								12658
							],
							[
								12734,
								12739
							],
							[
								12748,
								12753
							],
							[
								12782,
								12791
							],
							[
								12815,
								12825
							],
							[
								12847,
								12860
							],
							[
								12888,
								12902
							],
							[
								12928,
								12945
							],
							[
								12973,
								12991
							],
							[
								13092,
								13097
							],
							[
								13305,
								13328
							],
							[
								13779,
								13783
							],
							[
								13825,
								13829
							],
							[
								13936,
								13948
							],
							[
								14537,
								14547
							],
							[
								14635,
								14663
							],
							[
								14697,
								14703
							],
							[
								14765,
								14789
							],
							[
								14819,
								14860
							],
							[
								15136,
								15148
							],
							[
								15181,
								15213
							],
							[
								15255,
								15295
							],
							[
								15449,
								15469
							],
							[
								16755,
								16785
							],
							[
								16845,
								16882
							],
							[
								17067,
								17073
							],
							[
								17288,
								17318
							],
							[
								17398,
								17430
							],
							[
								17658,
								17688
							],
							[
								17825,
								17828
							],
							[
								17965,
								17999
							],
							[
								18156,
								18188
							],
							[
								18478,
								18506
							],
							[
								18584,
								18613
							],
							[
								18688,
								18725
							],
							[
								18775,
								18810
							],
							[
								18991,
								19026
							],
							[
								19326,
								19349
							],
							[
								19380,
								19404
							],
							[
								19468,
								19495
							],
							[
								19528,
								19568
							],
							[
								19686,
								19729
							],
							[
								20032,
								20061
							],
							[
								20118,
								20132
							],
							[
								20181,
								20210
							],
							[
								20252,
								20279
							],
							[
								20389,
								20396
							],
							[
								20416,
								20444
							],
							[
								20534,
								20561
							],
							[
								20600,
								20627
							],
							[
								20677,
								20701
							],
							[
								20776,
								20811
							],
							[
								20913,
								20945
							],
							[
								21030,
								21064
							],
							[
								21149,
								21179
							],
							[
								21399,
								21409
							],
							[
								21462,
								21466
							],
							[
								21534,
								21571
							],
							[
								21608,
								21625
							],
							[
								21648,
								21665
							],
							[
								21725,
								21742
							],
							[
								21828,
								21837
							],
							[
								21909,
								21923
							],
							[
								21991,
								21996
							],
							[
								22748,
								22786
							],
							[
								22937,
								22972
							],
							[
								23056,
								23074
							],
							[
								23132,
								23176
							],
							[
								23190,
								23199
							],
							[
								23231,
								23259
							],
							[
								23273,
								23282
							],
							[
								23351,
								23394
							],
							[
								23514,
								23547
							],
							[
								23574,
								23581
							],
							[
								23710,
								23715
							],
							[
								23731,
								23765
							],
							[
								23842,
								23868
							],
							[
								23966,
								24000
							],
							[
								24023,
								24037
							],
							[
								24072,
								24122
							],
							[
								24260,
								24306
							],
							[
								24367,
								24429
							],
							[
								24440,
								24456
							],
							[
								24591,
								24628
							],
							[
								24667,
								24724
							],
							[
								25095,
								25129
							],
							[
								25259,
								25298
							],
							[
								25373,
								25410
							],
							[
								25527,
								25558
							],
							[
								26313,
								26356
							],
							[
								26487,
								26492
							],
							[
								26648,
								26682
							],
							[
								26890,
								26926
							],
							[
								26988,
								27014
							],
							[
								27822,
								27847
							],
							[
								27915,
								27943
							],
							[
								28536,
								28555
							],
							[
								28651,
								28672
							],
							[
								28813,
								28838
							],
							[
								29138,
								29195
							],
							[
								29318,
								29383
							],
							[
								29493,
								29545
							],
							[
								29666,
								29716
							],
							[
								29832,
								29847
							],
							[
								29918,
								29929
							],
							[
								30017,
								30028
							],
							[
								30054,
								30069
							],
							[
								30147,
								30161
							],
							[
								30201,
								30220
							],
							[
								30443,
								30539
							],
							[
								30542,
								30644
							],
							[
								30700,
								30712
							],
							[
								30777,
								30791
							],
							[
								30823,
								30829
							],
							[
								30872,
								30880
							],
							[
								30926,
								30934
							],
							[
								30990,
								31005
							],
							[
								31058,
								31065
							],
							[
								31176,
								31186
							],
							[
								31328,
								31338
							],
							[
								31401,
								31408
							],
							[
								31493,
								31520
							],
							[
								31544,
								31553
							],
							[
								31579,
								31587
							],
							[
								31604,
								31613
							],
							[
								31652,
								31660
							],
							[
								31671,
								31684
							],
							[
								31695,
								31710
							],
							[
								31739,
								31757
							],
							[
								31837,
								31861
							],
							[
								32282,
								32316
							],
							[
								32347,
								32358
							],
							[
								32363,
								32373
							],
							[
								32387,
								32398
							],
							[
								32419,
								32455
							],
							[
								32959,
								32989
							],
							[
								33033,
								33064
							],
							[
								33339,
								33361
							],
							[
								33421,
								33447
							],
							[
								33563,
								33574
							],
							[
								33686,
								33717
							],
							[
								33921,
								33946
							],
							[
								34013,
								34065
							],
							[
								34177,
								34199
							],
							[
								34205,
								34226
							],
							[
								34243,
								34275
							],
							[
								34395,
								34430
							],
							[
								34495,
								34528
							],
							[
								34575,
								34587
							],
							[
								34657,
								34669
							],
							[
								34726,
								34757
							],
							[
								34801,
								34843
							],
							[
								35019,
								35047
							],
							[
								35158,
								35188
							],
							[
								35200,
								35217
							],
							[
								35341,
								35377
							],
							[
								35454,
								35480
							],
							[
								35522,
								35561
							],
							[
								35673,
								35677
							],
							[
								35704,
								35708
							],
							[
								35747,
								35751
							],
							[
								35779,
								35783
							],
							[
								35806,
								35842
							],
							[
								35880,
								35912
							],
							[
								36030,
								36071
							],
							[
								36164,
								36188
							],
							[
								36211,
								36222
							],
							[
								36240,
								36257
							],
							[
								36343,
								36367
							],
							[
								36390,
								36416
							],
							[
								36872,
								36904
							],
							[
								37158,
								37167
							],
							[
								37198,
								37207
							],
							[
								37238,
								37247
							],
							[
								37278,
								37287
							],
							[
								37318,
								37327
							],
							[
								37357,
								37366
							],
							[
								37397,
								37406
							],
							[
								37415,
								37435
							],
							[
								37479,
								37484
							],
							[
								37527,
								37536
							],
							[
								37704,
								37737
							],
							[
								38111,
								38137
							],
							[
								38363,
								38406
							],
							[
								38448,
								38460
							],
							[
								38538,
								38583
							],
							[
								38704,
								38724
							],
							[
								38845,
								38852
							],
							[
								38871,
								38878
							],
							[
								39058,
								39087
							],
							[
								39216,
								39261
							],
							[
								39389,
								39421
							],
							[
								39500,
								39521
							],
							[
								39790,
								39808
							],
							[
								39996,
								40015
							],
							[
								40148,
								40196
							],
							[
								40209,
								40218
							],
							[
								40256,
								40266
							],
							[
								40313,
								40347
							],
							[
								40624,
								40666
							],
							[
								40720,
								40758
							],
							[
								40920,
								40939
							],
							[
								41139,
								41178
							],
							[
								41312,
								41329
							],
							[
								41869,
								41889
							],
							[
								41987,
								42006
							],
							[
								42053,
								42072
							],
							[
								43925,
								43932
							],
							[
								43947,
								43954
							],
							[
								45591,
								45624
							],
							[
								45772,
								45781
							],
							[
								45801,
								45809
							],
							[
								45813,
								45822
							],
							[
								45963,
								45991
							],
							[
								46105,
								46133
							],
							[
								46247,
								46265
							],
							[
								46644,
								46679
							],
							[
								46719,
								46746
							],
							[
								46827,
								46875
							],
							[
								47076,
								47163
							],
							[
								47174,
								47190
							],
							[
								47299,
								47339
							],
							[
								47367,
								47371
							],
							[
								47388,
								47393
							],
							[
								47412,
								47417
							],
							[
								47435,
								47472
							],
							[
								47500,
								47504
							],
							[
								47510,
								47516
							],
							[
								47531,
								47537
							],
							[
								47545,
								47551
							],
							[
								47567,
								47604
							],
							[
								47632,
								47636
							],
							[
								47650,
								47656
							],
							[
								47664,
								47670
							],
							[
								47677,
								47683
							],
							[
								47700,
								47753
							],
							[
								47754,
								47771
							],
							[
								47876,
								47895
							],
							[
								47942,
								47980
							],
							[
								48005,
								48018
							],
							[
								48647,
								48691
							],
							[
								48763,
								48781
							],
							[
								49035,
								49053
							],
							[
								49380,
								49407
							],
							[
								49416,
								49431
							],
							[
								49507,
								49534
							],
							[
								49661,
								49665
							],
							[
								49743,
								49756
							],
							[
								49953,
								49982
							],
							[
								50090,
								50116
							],
							[
								50184,
								50211
							],
							[
								50483,
								50504
							],
							[
								50574,
								50599
							],
							[
								50619,
								50641
							],
							[
								50705,
								50730
							],
							[
								50863,
								50887
							],
							[
								51111,
								51127
							],
							[
								51128,
								51147
							],
							[
								51180,
								51200
							],
							[
								51289,
								51317
							],
							[
								51417,
								51442
							],
							[
								51492,
								51519
							],
							[
								51522,
								51541
							],
							[
								51846,
								51876
							],
							[
								51919,
								51934
							],
							[
								52002,
								52025
							],
							[
								52064,
								52068
							],
							[
								52108,
								52112
							],
							[
								52150,
								52174
							],
							[
								52241,
								52277
							],
							[
								52342,
								52349
							],
							[
								52387,
								52426
							],
							[
								52584,
								52617
							],
							[
								52820,
								52831
							],
							[
								52939,
								52970
							],
							[
								53029,
								53085
							],
							[
								53449,
								53490
							],
							[
								53856,
								53896
							],
							[
								54124,
								54172
							],
							[
								54204,
								54213
							],
							[
								54496,
								54535
							],
							[
								54546,
								54555
							],
							[
								54594,
								54605
							],
							[
								55010,
								55051
							],
							[
								55097,
								55130
							],
							[
								55207,
								55242
							],
							[
								55342,
								55385
							],
							[
								55565,
								55601
							],
							[
								55918,
								55957
							],
							[
								56088,
								56136
							],
							[
								56304,
								56318
							],
							[
								56490,
								56497
							],
							[
								56613,
								56620
							],
							[
								56955,
								56979
							],
							[
								57009,
								57026
							],
							[
								57083,
								57105
							],
							[
								57134,
								57151
							],
							[
								57257,
								57288
							],
							[
								57362,
								57382
							],
							[
								57516,
								57550
							],
							[
								57580,
								57589
							],
							[
								57609,
								57617
							],
							[
								57621,
								57630
							],
							[
								57723,
								57757
							],
							[
								58058,
								58091
							],
							[
								58453,
								58487
							],
							[
								58857,
								58891
							],
							[
								59174,
								59218
							],
							[
								59843,
								59882
							],
							[
								60010,
								60092
							],
							[
								61218,
								61231
							],
							[
								61249,
								61258
							],
							[
								61276,
								61285
							],
							[
								61336,
								61347
							],
							[
								61371,
								61383
							],
							[
								61390,
								61401
							],
							[
								61438,
								61443
							],
							[
								61556,
								61561
							],
							[
								61737,
								61742
							],
							[
								61785,
								61790
							],
							[
								61835,
								61840
							],
							[
								62045,
								62050
							],
							[
								62254,
								62287
							],
							[
								62300,
								62301
							],
							[
								62710,
								62743
							],
							[
								62907,
								62944
							],
							[
								62952,
								62953
							],
							[
								63429,
								63436
							],
							[
								63575,
								63586
							],
							[
								63672,
								63683
							],
							[
								63970,
								63984
							],
							[
								64577,
								64609
							],
							[
								65119,
								65157
							],
							[
								65456,
								65479
							],
							[
								65492,
								65512
							],
							[
								65575,
								65589
							],
							[
								65593,
								65607
							],
							[
								65684,
								65699
							],
							[
								65773,
								65787
							],
							[
								65830,
								65853
							],
							[
								66045,
								66063
							],
							[
								66269,
								66283
							],
							[
								66287,
								66301
							],
							[
								66472,
								66494
							],
							[
								67038,
								67043
							],
							[
								67085,
								67091
							],
							[
								67134,
								67141
							],
							[
								67170,
								67209
							],
							[
								67238,
								67248
							],
							[
								67254,
								67263
							],
							[
								67281,
								67308
							],
							[
								67348,
								67357
							],
							[
								67366,
								67374
							],
							[
								67422,
								67431
							],
							[
								67457,
								67466
							],
							[
								67477,
								67485
							],
							[
								67557,
								67566
							],
							[
								67657,
								67701
							],
							[
								67763,
								67824
							],
							[
								68132,
								68158
							],
							[
								68186,
								68191
							],
							[
								68215,
								68228
							],
							[
								68336,
								68401
							],
							[
								68507,
								68533
							],
							[
								68567,
								68593
							],
							[
								68614,
								68647
							],
							[
								68680,
								68696
							],
							[
								68711,
								68718
							],
							[
								68744,
								68760
							],
							[
								68784,
								68811
							],
							[
								68868,
								68883
							],
							[
								68905,
								68917
							],
							[
								68934,
								68949
							],
							[
								68959,
								68968
							],
							[
								69008,
								69017
							],
							[
								69024,
								69030
							],
							[
								69042,
								69071
							],
							[
								69157,
								69167
							],
							[
								69208,
								69223
							],
							[
								69242,
								69255
							],
							[
								69680,
								69690
							],
							[
								69829,
								69841
							],
							[
								70121,
								70142
							],
							[
								70328,
								70339
							],
							[
								70376,
								70385
							],
							[
								70465,
								70498
							],
							[
								70803,
								70832
							],
							[
								70876,
								70898
							],
							[
								70932,
								70971
							],
							[
								71005,
								71011
							],
							[
								71084,
								71109
							],
							[
								71120,
								71132
							],
							[
								71324,
								71334
							],
							[
								71386,
								71436
							],
							[
								71844,
								71874
							],
							[
								71960,
								71990
							],
							[
								72063,
								72094
							],
							[
								72262,
								72286
							],
							[
								72341,
								72365
							],
							[
								72493,
								72499
							],
							[
								72580,
								72605
							],
							[
								72693,
								72716
							],
							[
								72748,
								72754
							],
							[
								72897,
								72898
							],
							[
								72989,
								72993
							],
							[
								73127,
								73158
							],
							[
								73409,
								73421
							],
							[
								73537,
								73551
							],
							[
								73697,
								73729
							],
							[
								73933,
								73959
							],
							[
								73960,
								73977
							],
							[
								74026,
								74049
							],
							[
								74082,
								74092
							],
							[
								74141,
								74153
							],
							[
								74468,
								74478
							],
							[
								74670,
								74682
							],
							[
								75357,
								75390
							],
							[
								75418,
								75432
							],
							[
								75526,
								75551
							],
							[
								75714,
								75742
							],
							[
								75876,
								75905
							],
							[
								76205,
								76253
							],
							[
								76442,
								76479
							],
							[
								76528,
								76576
							],
							[
								76690,
								76724
							],
							[
								76732,
								76756
							],
							[
								77270,
								77300
							],
							[
								77426,
								77453
							],
							[
								77930,
								77981
							],
							[
								78023,
								78050
							],
							[
								78220,
								78268
							],
							[
								78480,
								78515
							],
							[
								78722,
								78755
							],
							[
								79027,
								79058
							],
							[
								79304,
								79348
							],
							[
								79484,
								79500
							],
							[
								79660,
								79710
							],
							[
								80104,
								80109
							],
							[
								80190,
								80203
							],
							[
								80252,
								80262
							],
							[
								80266,
								80279
							],
							[
								80354,
								80369
							],
							[
								80418,
								80428
							],
							[
								80432,
								80447
							],
							[
								80514,
								80547
							],
							[
								80657,
								80664
							],
							[
								80948,
								80963
							],
							[
								81288,
								81313
							],
							[
								81374,
								81402
							],
							[
								81491,
								81500
							],
							[
								82467,
								82498
							],
							[
								82670,
								82684
							],
							[
								83307,
								83341
							],
							[
								83526,
								83548
							],
							[
								83584,
								83608
							],
							[
								83611,
								83631
							],
							[
								83875,
								83901
							],
							[
								83996,
								84034
							],
							[
								84436,
								84479
							],
							[
								84561,
								84589
							],
							[
								84620,
								84656
							],
							[
								84824,
								84932
							],
							[
								85170,
								85221
							],
							[
								85299,
								85333
							],
							[
								85421,
								85449
							],
							[
								85483,
								85518
							],
							[
								85592,
								85617
							],
							[
								85639,
								85656
							],
							[
								85698,
								85747
							],
							[
								85820,
								85833
							],
							[
								85904,
								85917
							],
							[
								86093,
								86131
							],
							[
								86142,
								86161
							],
							[
								86215,
								86256
							],
							[
								86267,
								86286
							],
							[
								86344,
								86369
							],
							[
								86416,
								86455
							],
							[
								86550,
								86563
							],
							[
								86614,
								86624
							],
							[
								86690,
								86697
							],
							[
								86728,
								86734
							],
							[
								86776,
								86789
							],
							[
								86809,
								86845
							],
							[
								86940,
								86953
							],
							[
								87004,
								87014
							],
							[
								87053,
								87060
							],
							[
								87166,
								87199
							],
							[
								87279,
								87314
							],
							[
								87354,
								87364
							],
							[
								87479,
								87507
							],
							[
								87669,
								87681
							],
							[
								87786,
								87811
							],
							[
								87926,
								87939
							],
							[
								88038,
								88065
							],
							[
								88184,
								88197
							],
							[
								88300,
								88333
							],
							[
								88556,
								88575
							],
							[
								88654,
								88682
							],
							[
								88701,
								88720
							],
							[
								88738,
								88773
							],
							[
								89116,
								89147
							],
							[
								89206,
								89219
							],
							[
								89303,
								89335
							],
							[
								89516,
								89566
							],
							[
								89609,
								89636
							],
							[
								89838,
								89871
							],
							[
								89922,
								89957
							],
							[
								89972,
								89986
							],
							[
								90053,
								90115
							],
							[
								90314,
								90330
							],
							[
								90563,
								90573
							],
							[
								90623,
								90633
							],
							[
								90659,
								90669
							],
							[
								90697,
								90722
							],
							[
								90848,
								90873
							],
							[
								91147,
								91174
							],
							[
								91406,
								91418
							],
							[
								93071,
								93106
							],
							[
								93125,
								93133
							],
							[
								93181,
								93196
							],
							[
								93344,
								93357
							],
							[
								93550,
								93566
							],
							[
								93773,
								93798
							],
							[
								93813,
								93835
							],
							[
								94051,
								94055
							],
							[
								94269,
								94291
							],
							[
								94313,
								94323
							],
							[
								94341,
								94354
							],
							[
								94513,
								94535
							],
							[
								94557,
								94567
							],
							[
								94585,
								94598
							],
							[
								94727,
								94749
							],
							[
								94775,
								94785
							],
							[
								94803,
								94816
							],
							[
								94852,
								94874
							],
							[
								94895,
								94905
							],
							[
								94923,
								94936
							],
							[
								94956,
								94997
							],
							[
								95304,
								95327
							],
							[
								95408,
								95430
							],
							[
								95504,
								95524
							],
							[
								95651,
								95662
							],
							[
								95695,
								95712
							],
							[
								95888,
								95907
							],
							[
								95942,
								95964
							],
							[
								96096,
								96117
							],
							[
								96255,
								96275
							],
							[
								96342,
								96365
							],
							[
								96441,
								96463
							],
							[
								96581,
								96605
							],
							[
								96667,
								96679
							],
							[
								96850,
								96868
							],
							[
								96930,
								96942
							],
							[
								97094,
								97117
							],
							[
								97258,
								97274
							],
							[
								97330,
								97343
							],
							[
								97375,
								97443
							],
							[
								97484,
								97506
							],
							[
								97535,
								97545
							],
							[
								97561,
								97574
							],
							[
								97634,
								97647
							],
							[
								97723,
								97746
							],
							[
								97874,
								97896
							],
							[
								97993,
								98006
							],
							[
								98068,
								98084
							],
							[
								98122,
								98126
							],
							[
								98385,
								98428
							],
							[
								98443,
								98468
							],
							[
								98611,
								98619
							],
							[
								98633,
								98640
							],
							[
								98649,
								98654
							],
							[
								98672,
								98713
							],
							[
								98726,
								98733
							],
							[
								98810,
								98849
							],
							[
								99001,
								99012
							],
							[
								99047,
								99068
							],
							[
								99146,
								99153
							],
							[
								99185,
								99210
							],
							[
								99268,
								99277
							],
							[
								99294,
								99301
							],
							[
								99319,
								99345
							],
							[
								99403,
								99412
							],
							[
								99430,
								99437
							],
							[
								99456,
								99551
							],
							[
								100183,
								100203
							],
							[
								100204,
								100218
							],
							[
								100240,
								100247
							],
							[
								100274,
								100294
							],
							[
								100295,
								100309
							],
							[
								100330,
								100337
							],
							[
								100381,
								100395
							],
							[
								100467,
								100516
							],
							[
								100529,
								100545
							],
							[
								100579,
								100595
							],
							[
								100687,
								100719
							],
							[
								100750,
								100789
							],
							[
								101170,
								101211
							],
							[
								101250,
								101257
							],
							[
								101313,
								101333
							],
							[
								101371,
								101390
							],
							[
								101464,
								101481
							],
							[
								101500,
								101520
							],
							[
								101524,
								101541
							],
							[
								101591,
								101614
							],
							[
								101715,
								101738
							],
							[
								101782,
								101801
							],
							[
								101844,
								101872
							],
							[
								101968,
								101989
							],
							[
								102065,
								102091
							],
							[
								102209,
								102227
							],
							[
								102281,
								102286
							],
							[
								102289,
								102295
							],
							[
								102311,
								102357
							],
							[
								102446,
								102459
							],
							[
								102837,
								102850
							],
							[
								102913,
								102962
							],
							[
								102975,
								102991
							],
							[
								103013,
								103026
							],
							[
								103054,
								103066
							],
							[
								103070,
								103083
							],
							[
								103145,
								103197
							],
							[
								103386,
								103399
							],
							[
								103462,
								103501
							],
							[
								103645,
								103680
							],
							[
								103752,
								103756
							],
							[
								103783,
								103792
							],
							[
								104043,
								104078
							],
							[
								104154,
								104175
							],
							[
								104190,
								104198
							],
							[
								104211,
								104220
							],
							[
								104242,
								104246
							],
							[
								104285,
								104289
							],
							[
								104339,
								104375
							],
							[
								104421,
								104470
							],
							[
								104786,
								104814
							],
							[
								104874,
								104925
							],
							[
								105176,
								105219
							],
							[
								105272,
								105315
							],
							[
								105351,
								105356
							],
							[
								105433,
								105447
							],
							[
								105482,
								105492
							],
							[
								105505,
								105540
							],
							[
								105584,
								105592
							],
							[
								106139,
								106183
							],
							[
								106718,
								106741
							],
							[
								107149,
								107191
							],
							[
								107997,
								108020
							],
							[
								108392,
								108397
							],
							[
								108951,
								108964
							],
							[
								109000,
								109015
							],
							[
								109053,
								109070
							],
							[
								109112,
								109156
							],
							[
								109355,
								109362
							],
							[
								110073,
								110086
							],
							[
								110128,
								110137
							],
							[
								110201,
								110220
							],
							[
								110326,
								110339
							],
							[
								110514,
								110529
							],
							[
								110573,
								110590
							],
							[
								110636,
								110649
							],
							[
								110691,
								110704
							],
							[
								110746,
								110761
							],
							[
								110805,
								110822
							],
							[
								110950,
								110955
							],
							[
								111104,
								111130
							],
							[
								111307,
								111321
							],
							[
								111344,
								111349
							],
							[
								111991,
								111995
							],
							[
								112053,
								112057
							],
							[
								112300,
								112309
							],
							[
								112434,
								112447
							],
							[
								112521,
								112535
							],
							[
								112786,
								112809
							],
							[
								112827,
								112836
							],
							[
								112853,
								112864
							],
							[
								112874,
								112883
							],
							[
								112903,
								112931
							],
							[
								113039,
								113072
							],
							[
								113239,
								113261
							],
							[
								113279,
								113288
							],
							[
								113308,
								113321
							],
							[
								113379,
								113388
							],
							[
								113408,
								113450
							],
							[
								113923,
								113931
							],
							[
								113966,
								113977
							],
							[
								114054,
								114092
							],
							[
								114443,
								114464
							],
							[
								114549,
								114583
							],
							[
								114736,
								114775
							],
							[
								114830,
								114842
							],
							[
								115301,
								115309
							],
							[
								115441,
								115448
							],
							[
								115507,
								115515
							],
							[
								115628,
								115645
							],
							[
								115724,
								115728
							],
							[
								115782,
								115799
							],
							[
								115929,
								115977
							],
							[
								116263,
								116358
							],
							[
								116493,
								116505
							],
							[
								116515,
								116527
							],
							[
								116532,
								116545
							],
							[
								116651,
								116663
							],
							[
								116673,
								116685
							],
							[
								116690,
								116703
							],
							[
								116811,
								116819
							],
							[
								117030,
								117038
							],
							[
								117413,
								117423
							],
							[
								117503,
								117513
							],
							[
								117594,
								117602
							],
							[
								117733,
								117752
							],
							[
								118386,
								118390
							],
							[
								118459,
								118476
							],
							[
								118516,
								118531
							],
							[
								118569,
								118582
							],
							[
								118618,
								118633
							],
							[
								118743,
								118748
							],
							[
								118819,
								118836
							],
							[
								118867,
								118877
							],
							[
								118999,
								119064
							],
							[
								119427,
								119461
							],
							[
								119545,
								119588
							],
							[
								119804,
								119851
							],
							[
								120042,
								120093
							],
							[
								120313,
								120365
							],
							[
								120713,
								120756
							],
							[
								121128,
								121132
							],
							[
								121247,
								121322
							],
							[
								121696,
								121700
							],
							[
								121933,
								121975
							],
							[
								122039,
								122047
							],
							[
								122208,
								122249
							],
							[
								122296,
								122328
							],
							[
								122409,
								122442
							],
							[
								122501,
								122565
							],
							[
								122805,
								122846
							],
							[
								122884,
								122902
							],
							[
								122951,
								122958
							],
							[
								123156,
								123220
							],
							[
								123400,
								123465
							],
							[
								123478,
								123490
							],
							[
								123507,
								123518
							],
							[
								123542,
								123557
							],
							[
								123940,
								123970
							],
							[
								124147,
								124167
							],
							[
								124187,
								124241
							],
							[
								124464,
								124470
							],
							[
								124522,
								124527
							],
							[
								124583,
								124589
							],
							[
								124666,
								124671
							],
							[
								124714,
								124773
							],
							[
								126822,
								126835
							],
							[
								126983,
								126997
							],
							[
								127157,
								127170
							],
							[
								127252,
								127271
							],
							[
								127514,
								127551
							],
							[
								127899,
								127969
							],
							[
								128325,
								128367
							],
							[
								128418,
								128427
							],
							[
								128593,
								128628
							],
							[
								128755,
								128759
							],
							[
								128781,
								128792
							],
							[
								128902,
								128925
							],
							[
								129069,
								129093
							],
							[
								129194,
								129198
							],
							[
								129221,
								129225
							],
							[
								129237,
								129269
							],
							[
								129317,
								129357
							],
							[
								129586,
								129605
							],
							[
								129637,
								129701
							],
							[
								129755,
								129760
							],
							[
								129793,
								129823
							],
							[
								129910,
								129945
							],
							[
								129969,
								129995
							],
							[
								130109,
								130142
							],
							[
								130281,
								130339
							],
							[
								130364,
								130390
							],
							[
								130433,
								130468
							],
							[
								130511,
								130532
							],
							[
								130681,
								130707
							],
							[
								130865,
								130884
							],
							[
								131206,
								131255
							],
							[
								131280,
								131301
							],
							[
								131343,
								131359
							],
							[
								131413,
								131436
							],
							[
								131499,
								131527
							],
							[
								131589,
								131610
							],
							[
								131634,
								131639
							],
							[
								132212,
								132243
							],
							[
								132246,
								132264
							],
							[
								132316,
								132317
							],
							[
								132330,
								132341
							],
							[
								132896,
								132941
							],
							[
								133043,
								133067
							],
							[
								133345,
								133355
							],
							[
								133403,
								133424
							],
							[
								133472,
								133493
							],
							[
								133579,
								133620
							],
							[
								133768,
								133772
							],
							[
								133818,
								133826
							],
							[
								133855,
								133859
							],
							[
								134234,
								134247
							],
							[
								134300,
								134320
							],
							[
								134646,
								134703
							],
							[
								134810,
								134821
							],
							[
								135161,
								135181
							],
							[
								135221,
								135257
							],
							[
								135286,
								135299
							],
							[
								135342,
								135352
							],
							[
								135397,
								135412
							],
							[
								136385,
								136398
							],
							[
								136969,
								136989
							],
							[
								137064,
								137079
							],
							[
								137456,
								137469
							],
							[
								137540,
								137560
							],
							[
								137642,
								137657
							],
							[
								137723,
								137752
							],
							[
								137826,
								137859
							],
							[
								137971,
								137985
							],
							[
								138025,
								138040
							],
							[
								138062,
								138090
							],
							[
								138619,
								138642
							],
							[
								138849,
								138877
							],
							[
								138984,
								139026
							],
							[
								139353,
								139409
							],
							[
								139643,
								139684
							],
							[
								139770,
								139781
							],
							[
								139930,
								139943
							],
							[
								140264,
								140280
							],
							[
								140309,
								140361
							],
							[
								140430,
								140437
							],
							[
								140525,
								140539
							],
							[
								140627,
								140642
							],
							[
								140748,
								140752
							],
							[
								140784,
								140804
							],
							[
								140865,
								140878
							],
							[
								140938,
								140950
							],
							[
								141244,
								141259
							],
							[
								141580,
								141590
							],
							[
								141645,
								141655
							],
							[
								141739,
								141750
							],
							[
								141807,
								141814
							],
							[
								142417,
								142427
							],
							[
								142493,
								142504
							],
							[
								142572,
								142584
							],
							[
								142619,
								142632
							],
							[
								142677,
								142692
							],
							[
								142711,
								142738
							],
							[
								142924,
								142967
							],
							[
								143128,
								143188
							],
							[
								143274,
								143299
							],
							[
								143348,
								143391
							],
							[
								143402,
								143412
							],
							[
								143421,
								143450
							],
							[
								143706,
								143722
							],
							[
								143744,
								143755
							],
							[
								143805,
								143835
							],
							[
								143904,
								143909
							],
							[
								143938,
								143943
							],
							[
								144238,
								144251
							],
							[
								144302,
								144333
							],
							[
								144354,
								144367
							],
							[
								144368,
								144388
							],
							[
								145892,
								145919
							],
							[
								145944,
								145949
							],
							[
								146000,
								146029
							],
							[
								146117,
								146122
							],
							[
								146203,
								146216
							],
							[
								146269,
								146280
							],
							[
								146320,
								146341
							],
							[
								146465,
								146482
							],
							[
								146612,
								146632
							],
							[
								146828,
								146854
							],
							[
								146959,
								146965
							],
							[
								147003,
								147008
							],
							[
								147096,
								147129
							],
							[
								147287,
								147292
							],
							[
								147343,
								147356
							],
							[
								147380,
								147386
							],
							[
								147469,
								147493
							],
							[
								147587,
								147598
							],
							[
								147654,
								147667
							],
							[
								147729,
								147740
							],
							[
								147839,
								147849
							],
							[
								147947,
								147960
							],
							[
								148073,
								148082
							],
							[
								148140,
								148152
							],
							[
								148235,
								148243
							],
							[
								148343,
								148350
							],
							[
								148452,
								148472
							],
							[
								148660,
								148681
							],
							[
								148940,
								148957
							],
							[
								149110,
								149122
							],
							[
								149251,
								149265
							],
							[
								149436,
								149449
							],
							[
								149466,
								149486
							],
							[
								149745,
								149775
							],
							[
								149781,
								149807
							],
							[
								149826,
								149852
							],
							[
								149881,
								149899
							],
							[
								149965,
								149999
							],
							[
								150113,
								150167
							],
							[
								150194,
								150214
							],
							[
								150304,
								150321
							],
							[
								150417,
								150439
							],
							[
								150546,
								150570
							],
							[
								150678,
								150708
							],
							[
								150739,
								150748
							],
							[
								150791,
								150810
							],
							[
								150959,
								150979
							],
							[
								151096,
								151115
							],
							[
								151229,
								151245
							],
							[
								151353,
								151363
							],
							[
								151441,
								151448
							],
							[
								151514,
								151523
							],
							[
								151868,
								151889
							],
							[
								151898,
								151926
							],
							[
								151936,
								151981
							],
							[
								152036,
								152047
							],
							[
								152069,
								152079
							],
							[
								152092,
								152103
							],
							[
								152131,
								152164
							],
							[
								152325,
								152357
							],
							[
								152425,
								152447
							],
							[
								152619,
								152655
							],
							[
								152817,
								152833
							],
							[
								152894,
								152930
							],
							[
								153006,
								153017
							],
							[
								153082,
								153086
							],
							[
								153125,
								153138
							],
							[
								153252,
								153288
							],
							[
								153465,
								153470
							],
							[
								153511,
								153564
							],
							[
								154510,
								154539
							],
							[
								154693,
								154730
							],
							[
								154741,
								154754
							],
							[
								154767,
								154776
							],
							[
								154823,
								154843
							],
							[
								154877,
								154893
							],
							[
								155115,
								155136
							],
							[
								155264,
								155296
							],
							[
								155323,
								155332
							],
							[
								155344,
								155357
							],
							[
								155435,
								155459
							],
							[
								155526,
								155535
							],
							[
								155551,
								155561
							],
							[
								155578,
								155595
							],
							[
								155623,
								155632
							],
							[
								155633,
								155656
							],
							[
								155702,
								155726
							],
							[
								155874,
								155879
							],
							[
								155897,
								155906
							],
							[
								156006,
								156014
							],
							[
								156018,
								156027
							],
							[
								156049,
								156062
							],
							[
								156079,
								156092
							],
							[
								156099,
								156112
							],
							[
								156138,
								156155
							],
							[
								156168,
								156184
							],
							[
								156254,
								156259
							],
							[
								156277,
								156286
							],
							[
								156386,
								156394
							],
							[
								156407,
								156416
							],
							[
								156431,
								156436
							],
							[
								156524,
								156561
							],
							[
								156718,
								156734
							],
							[
								156752,
								156774
							],
							[
								156887,
								156893
							],
							[
								157941,
								157956
							],
							[
								158006,
								158020
							],
							[
								158034,
								158049
							],
							[
								158579,
								158596
							],
							[
								158646,
								158662
							],
							[
								158946,
								158976
							],
							[
								158994,
								159003
							],
							[
								159021,
								159031
							],
							[
								159044,
								159053
							],
							[
								159202,
								159231
							],
							[
								159249,
								159258
							],
							[
								159276,
								159286
							],
							[
								159290,
								159299
							],
							[
								160580,
								160632
							],
							[
								160698,
								160721
							],
							[
								160793,
								160811
							],
							[
								161160,
								161170
							],
							[
								161174,
								161188
							],
							[
								161390,
								161422
							],
							[
								161449,
								161484
							],
							[
								161524,
								161547
							],
							[
								161708,
								161724
							],
							[
								161909,
								161918
							],
							[
								161944,
								161964
							],
							[
								161991,
								162000
							],
							[
								162015,
								162039
							],
							[
								162179,
								162224
							],
							[
								162256,
								162274
							],
							[
								162420,
								162432
							],
							[
								162577,
								162582
							],
							[
								162896,
								162903
							],
							[
								163040,
								163059
							],
							[
								163077,
								163099
							],
							[
								163455,
								163497
							],
							[
								163514,
								163551
							],
							[
								163799,
								163818
							],
							[
								164188,
								164228
							],
							[
								164271,
								164285
							],
							[
								164355,
								164385
							],
							[
								164434,
								164464
							],
							[
								164531,
								164609
							],
							[
								165059,
								165087
							],
							[
								165139,
								165203
							],
							[
								165221,
								165245
							],
							[
								165516,
								165535
							],
							[
								165650,
								165686
							],
							[
								166411,
								166449
							],
							[
								166466,
								166504
							],
							[
								167793,
								167800
							],
							[
								167856,
								167874
							],
							[
								168086,
								168093
							],
							[
								168141,
								168145
							],
							[
								168277,
								168285
							],
							[
								168352,
								168364
							],
							[
								169406,
								169472
							],
							[
								169473,
								169490
							],
							[
								169728,
								169739
							],
							[
								169756,
								169775
							],
							[
								169889,
								169953
							],
							[
								169969,
								169978
							],
							[
								169990,
								169998
							],
							[
								170051,
								170066
							],
							[
								170082,
								170088
							],
							[
								170112,
								170125
							],
							[
								170320,
								170337
							],
							[
								170382,
								170407
							],
							[
								170506,
								170512
							],
							[
								170632,
								170664
							],
							[
								170741,
								170745
							],
							[
								170886,
								170907
							],
							[
								170951,
								170972
							],
							[
								171067,
								171092
							],
							[
								171263,
								171296
							],
							[
								171529,
								171556
							],
							[
								171648,
								171652
							],
							[
								171759,
								171764
							],
							[
								172028,
								172074
							],
							[
								172664,
								172673
							],
							[
								172909,
								172962
							],
							[
								172973,
								172999
							],
							[
								173331,
								173347
							],
							[
								173431,
								173442
							],
							[
								173688,
								173692
							],
							[
								173976,
								174029
							],
							[
								174257,
								174270
							],
							[
								174281,
								174297
							],
							[
								174472,
								174481
							],
							[
								174523,
								174532
							],
							[
								174572,
								174577
							],
							[
								174613,
								174631
							],
							[
								174652,
								174683
							],
							[
								174790,
								174809
							],
							[
								175102,
								175115
							],
							[
								175204,
								175222
							],
							[
								175317,
								175334
							],
							[
								175467,
								175474
							],
							[
								175593,
								175599
							],
							[
								175749,
								175757
							],
							[
								175876,
								175886
							],
							[
								176115,
								176124
							],
							[
								176617,
								176657
							],
							[
								176966,
								177001
							],
							[
								177332,
								177338
							],
							[
								177374,
								177392
							],
							[
								177436,
								177446
							],
							[
								177529,
								177539
							],
							[
								177588,
								177620
							],
							[
								177867,
								177886
							],
							[
								178510,
								178532
							],
							[
								178831,
								178891
							],
							[
								179601,
								179626
							],
							[
								179655,
								179671
							],
							[
								179680,
								179691
							],
							[
								179783,
								179789
							],
							[
								179798,
								179809
							],
							[
								179869,
								179893
							],
							[
								179911,
								179920
							],
							[
								179944,
								179953
							],
							[
								179981,
								179992
							],
							[
								180019,
								180030
							],
							[
								180063,
								180076
							],
							[
								180095,
								180108
							],
							[
								180120,
								180133
							],
							[
								180284,
								180295
							],
							[
								180397,
								180422
							],
							[
								180443,
								180473
							],
							[
								180571,
								180605
							],
							[
								180877,
								180898
							],
							[
								180963,
								180981
							],
							[
								181149,
								181185
							],
							[
								181639,
								181659
							],
							[
								181862,
								181877
							],
							[
								182153,
								182176
							],
							[
								182385,
								182403
							],
							[
								182621,
								182633
							],
							[
								182663,
								182678
							],
							[
								182723,
								182729
							],
							[
								182789,
								182803
							],
							[
								182951,
								182969
							],
							[
								183165,
								183197
							],
							[
								183263,
								183279
							],
							[
								183615,
								183631
							],
							[
								184078,
								184081
							],
							[
								184094,
								184095
							],
							[
								184125,
								184161
							],
							[
								184602,
								184641
							],
							[
								184730,
								184756
							],
							[
								184804,
								184865
							],
							[
								185300,
								185328
							],
							[
								185435,
								185453
							],
							[
								185748,
								185786
							]
						],
						"symlist":
						[
							" function Util(g)",
							"Util.formatAnnotatedObject = function(subject, o)",
							"i =>",
							"item =>",
							"padding = x =>",
							"arr =>",
							"Util.curry = (fn, arity) =>",
							"ret = function curried(...args)",
							" (v, i) =>",
							"Curried = function(...a)",
							" function()",
							" function(a)",
							" function(a, b)",
							" function(a, b, c)",
							" function(a, b, c, d)",
							"get()",
							"Util.arityN = (fn, n) =>",
							" function(fn)",
							" function()",
							" function(fn)",
							" function(a)",
							" function(fn)",
							" function(a, b)",
							" function(fn)",
							" function(a, b, c)",
							" function(fn)",
							" function(a, b, c, d)",
							" function(fn)",
							" function(a, b, c, d, e)",
							"Util.getter = target =>",
							"self = function(key)",
							".fn = key =>",
							".fn = key =>",
							"Util.setter = target =>",
							"self = function(key, value)",
							".fn = (key, value) =>",
							".fn = (key, value) =>",
							"Util.remover = target =>",
							" key =>",
							" key =>",
							"Util.hasFn = target =>",
							" key =>",
							" key =>",
							"Util.adder = target =>",
							" arg =>",
							" arg =>",
							"self = function(obj, arg = 1)",
							" function ChooseFn(a, o)",
							".fn = (obj, arg) =>",
							".fn = (obj, arg) =>",
							".fn = (obj, arg) =>",
							".fn = (num, arg) =>",
							".fn = (obj, arg) =>",
							"Util.updater = (target, get, set, fn) =>",
							" (k, f, i) =>",
							" function doUpdate(key, func, i)",
							"create = () =>",
							" key =>",
							" () =>",
							"self = function(...args)",
							"Util.once = (fn, thisArg, memoFn) =>",
							" function(...args)",
							"Util.delay = (func, wait, thisObj) =>",
							" function(...args)",
							"function ()",
							"Util.throttle = (f, t, thisObj) =>",
							" function(...args)",
							"Util.debounce = (func, wait, options = {}) =>",
							" function later()",
							" function debounced(...a)",
							".clear = function()",
							".flush = function()",
							"Util.debounceAsync = (fn, wait, options = {}) =>",
							" function(...a)",
							"resolve =>",
							"() =>",
							"arg =>",
							" g =>",
							" g =>",
							" () =>",
							" err =>",
							" () =>",
							" err =>",
							" () =>",
							" err =>",
							"() =>",
							"Util.log = (...args) =>",
							"f =>",
							"f =>",
							"(a, p, i) =>",
							"get: () =>",
							".setFilters = function(args)",
							"arg =>",
							".getFilters = function()",
							"Util.msg = (strings, ...substitutions) =>",
							"(base, n) =>",
							"Util.generalLog = function(n, x)",
							"Util.toSource = function(arg, opts = {})",
							"print = (...args) =>",
							"Util.debug = function(message)",
							"removeCircular = function(key, value)",
							"arg =>",
							"Util.type = function({ type })",
							"Util.functionName = function(fn)",
							"Util.className = function(obj)",
							"obj",
							"Util.unwrapComponent = function(c)",
							"Util.componentName = function(c)",
							"Util.count = function(s, ch)",
							"Util.parseNum = function(str)",
							"Util.minmax = function(num, min, max)",
							"Util.getExponential = function(num)",
							"Util.getNumberParts = function(num)",
							"Util.pow2 = function(n)",
							"Util.pow10 = function(n)",
							"Util.bitValue = function(n)",
							"Util.bitMask = function(bits, start = 0)",
							"Util.bitGroups = function(num, bpp, minLen)",
							"Util.bitStuff = (arr, bpp) =>",
							"([b, f], n) =>",
							"Util.toBinary = function(num)",
							"Util.toBits = function(num)",
							" bit =>",
							"Util.getBit = function(v, n)",
							"Util.isSet = function(v, n)",
							"Util.bitCount = function(n)",
							"Util.bitNo = function(n)",
							"Util.toggleBit = function(num, bit)",
							"Util.setBit = function(num, bit)",
							"Util.clearBit = function(num, bit)",
							"Util.range = function(...args)",
							" (v, k) =>",
							"n =>",
							"Util.set = function(obj, prop, value)",
							" (prop, value) =>",
							" (prop, value) =>",
							" (prop, value) =>",
							" value =>",
							"(obj, prop) =>",
							"() =>",
							"Util.bitArrayToNumbers = function(arr)",
							"Util.bitsToNumbers = function(bits)",
							"(val, key, arr) =>",
							"Util.shuffle = function(arr, rnd = Util.rng)",
							"(a, b) =>",
							"Util.sortNum = function(arr)",
							"(a, b) =>",
							"Util.draw = (arr, n = 1, rnd = Util.rng) =>",
							"Util.is = function(what, ...pred)",
							"type =>",
							"fn =>",
							"Util.instanceOf = (value, ctor) =>",
							"Util.onoff = function(val)",
							"Util.numbersToBits = function(arr)",
							"(bits, num) =>",
							"Util.randomNumbers = function([start, end], draws)",
							"Util.randomBits = function(r = [1, 50], n = 5)",
							"Util.padFn = function(len, char = ' ', fn = (str, pad) => pad)",
							" (s, n = len) =>",
							"Util.pad = function(s, n, char = ' ')",
							"Util.abbreviate = function(str, max = 40, suffix = '...')",
							"Util.trim = function(str, charset)",
							"Util.trimRight = function(str, charset)",
							"Util.indent = (text, space = ' ') =>",
							"Util.define = (obj, ...args) =>",
							"Util.memoizedProperties = (obj, methods) =>",
							"get()",
							"Util.copyWhole = (dst, ...args) =>",
							"Util.copyEntries = (obj, entries) =>",
							"Util.extend = (...args) =>",
							"Util.isCloneable = obj =>",
							"Util.isUnextendable = val =>",
							"pred = (k, v, f) =>",
							" (key, depth) =>",
							"value = function(...args)",
							"Util.defineGetter = (obj, key, fn, enumerable = false) =>",
							"Util.defineGetterSetter = (obj, key, g, s, enumerable = false) =>",
							"Util.defineGettersSetters = (obj, gettersSetters) =>",
							"Util.extendArray = function(arr = Array.prototype)",
							" function(pred)",
							" function()",
							" function()",
							"(item, i, a) =>",
							" function()",
							" function(value)",
							"Util.adapter = function( obj, getLength = obj => obj.length, getKey = (obj, index) => obj.",
							"(index), getItem = (obj, key) => obj[key], setItem = (obj, index, value) => (obj[index] = value) )",
							"get length()",
							"get instance()",
							"key(i)",
							"get(key)",
							"has(key)",
							"set(key, value)",
							"*keys()",
							"*entries()",
							"toObject()",
							"toMap()",
							".localStorage = function(s)",
							" () =>",
							" w =>",
							" () =>",
							" l =>",
							" (l, i) =>",
							" (l, key) =>",
							" (l, key, v) =>",
							"Util.array = function(a)",
							"Util.arrayFromEntries = entries =>",
							"([k, v]) =>",
							" key =>",
							"([k, v]) =>",
							"Util.toMap = function(hash = {}, fn)",
							"Util.extendMap = function(map)",
							".entries = function* iterator()",
							".toObject = function()",
							".match = function(...args)",
							" entries =>",
							"Util.objectFrom = function(any)",
							"Util.tail = function(arr)",
							"Util.splice = function(str, index, delcount, insert)",
							"Util.identity = arg =>",
							"Util.reverse = arr =>",
							"Util.keyOf = function(obj, prop)",
							"Util.rotateRight = function(arr, n)",
							"Util.repeater = function(n, what)",
							"function* ()",
							"function* ()",
							"Util.repeat = function(n, what)",
							"Util.arrayDim = function(dimensions, init)",
							"Util.flatten = function(arr)",
							"Util.chunkArray = (a, size) =>",
							"(acc, item, i) =>",
							"Util.partition = function* (a, size)",
							"Util.intersect = (a, b) =>",
							"Util.difference = (a, b, incicludes) =>",
							"x =>",
							"x =>",
							"x =>",
							"x =>",
							"Util.symmetricDifference = (a, b) =>",
							"Util.union = (a, b, equality) =>",
							"Util.chances = function(numbers, matches)",
							"Util.sum = function(arr)",
							"(acc, n) =>",
							"Util.expr = fn =>",
							" function expr(...args)",
							" function addArgs(args)",
							"ret = function returnFn(...args)",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"Util.mod = (a, b) =>",
							" n =>",
							"(a, b) =>",
							"Util.fnName = function(f, parent)",
							"Util.objName = function(o)",
							"Util.findKey = function(obj, pred, thisVal)",
							"value : v =>",
							"Util.find = function(arr, value, prop = 'id')",
							"pred = function(obj)",
							" obj =>",
							" obj =>",
							"pred = ([key, value], arr) =>",
							"Util.findIndex = function(obj, pred, thisArg)",
							"Util.match = function(arg, pred)",
							"match = (val, key) =>",
							"(acc, val, key) =>",
							" (acc, key) =>",
							"Util.toHash = function(map, keyTransform = k => ",
							"('' + k))",
							" (v, k) =>",
							"Util.indexOf = function(obj, prop)",
							"Util.greatestCommonDenominator = (a, b) =>",
							"Util.leastCommonMultiple = (n1, n2) =>",
							"function* (re, str)",
							"Util.inspect = function(obj, opts = {})",
							"stringFn = str =>",
							"print = (...args) =>",
							" (space = false) =>",
							" (space = false) =>",
							" key =>",
							" key =>",
							"Util.dump = function(name, props)",
							" () =>",
							" w =>",
							" () =>",
							"Util.ucfirst = function(str)",
							"Util.lcfirst = function(str)",
							"Util.typeOf = v =>",
							"Util.camelize = (text, sep = '') =>",
							" (match, p1, p2, offset) =>",
							"Util.decamelize = function(str, separator = '-')",
							"Util.ifThenElse = function(pred = value => !!value, _then = () => {}, _else = () => {})",
							" function(value)",
							"Util.if = (value, _then, _else, pred) =>",
							"v =>",
							"() =>",
							"() =>",
							"Util.ifElse = (value, _else, pred) =>",
							"v =>",
							" () =>",
							" () =>",
							" () =>",
							"Util.ifThen = (value, _then, pred) =>",
							"v =>",
							" () =>",
							" () =>",
							" () =>",
							"Util.switch = ({ default: defaultCase, ...cases }) =>",
							" function(value)",
							"function* (fn, arr)",
							"Util.colorDump = (iterable, textFn) =>",
							"(color, n) =>",
							"Util.bucketInserter = (map, ...extraArgs) =>",
							" function(...args)",
							" function(...args)",
							"Util.fifo = function fifo()",
							"resolve = () =>",
							"async function* generator()",
							"r =>",
							"push(...args)",
							"process: async function run()",
							"Util.isEmail = function(v)",
							"Util.isString = function(v)",
							"Util.isNumeric = v =>",
							"Util.isUndefined = arg =>",
							"Util.isObject = obj =>",
							"Util.isPrimitive = obj =>",
							"Util.isFunction = arg =>",
							"Util.not = fn =>",
							" function(...args)",
							"Util.isAsync = fn =>",
							"Util.isArrowFunction = fn =>",
							"Util.isEmptyString = v =>",
							"Util.isEmpty = (...args) =>",
							" function empty(v)",
							"Util.isNonEmpty = (...args) =>",
							"nonEmpty = v =>",
							"Util.isIpAddress = v =>",
							"i =>",
							"i =>",
							"Util.isPortNumber = v =>",
							"Util.hasProps = function(obj, props)",
							"prop =>",
							"Util.validatePassword = function(value)",
							"Util.clone = function(obj, proto)",
							"constructor",
							"Util.deepClone = function(data)",
							"Util.findVal = function(object, propName, maxDepth = 10)",
							"Util.deepCloneObservable = function(data)",
							"Util.toArray = function(observableArray)",
							"Util.arryToTree = function(data, id, pId, appId)",
							"(e, i) =>",
							"Util.to3wei = function(a, old, id, pId)",
							"(e, i) =>",
							"(se, si) =>",
							"Util.arrExchangePos = function(arr, i, j)",
							"Util.arrRemove = function(arr, i)",
							"Util.move = function(src, dst = [])",
							"Util.moveIf = function(src, pred, dst = [])",
							"Util.logOutClearStorage = function()",
							"Util.getCookie = function(cookie, name)",
							"Util.parseCookie = function(c = document.cookie)",
							"pred = char =>",
							"char =>",
							"char =>",
							"Util.encodeCookie = c =>",
							"([key, value]) =>",
							"Util.setCookies = c =>",
							"([key, value]) =>",
							"Util.clearCookies = function(c)",
							" (acc, name) =>",
							"Util.deleteCookie = function(name)",
							" () =>",
							" w =>",
							" () =>",
							"Util.accAdd = function(arg1, arg2)",
							"Util.Subtr = function(arg1, arg2)",
							"Util.accDiv = function(arg1, arg2)",
							"Util.accMul = function(arg1, arg2)",
							"Util.dateFormatter = function(date, formate)",
							"Util.numberFormatter = function(numStr)",
							"Util.searchObject = function(object, matchCallback, currentPath, result, searched)",
							"(req = {}) =>",
							" () =>",
							" () =>",
							" () =>",
							" url =>",
							" () =>",
							"() =>",
							"() =>",
							"() =>",
							"() =>",
							"() =>",
							"() =>",
							"Util.parseQuery = function(url = ",
							")",
							"Util.encodeQuery = function(data)",
							"Util.parseURL = function(href = this.",
							")",
							"part =>",
							"([k, v]) =>",
							"(acc, m) =>",
							"href(override)",
							"Util.makeURL = function(...args)",
							"Util.numberFromURL = function(url, fn)",
							"Util.tryPromise = fn =>",
							"(resolve, reject) =>",
							"resolve = a =>",
							"reject = () =>",
							"resolve = () =>",
							"reject = () =>",
							"async function(...args)",
							" function(...args)",
							"resolve = a =>",
							"reject = () =>",
							"Util.putError = err =>",
							"() =>",
							" fn =>",
							" ret =>",
							"Util.tryPredicate = (fn, defaultRet) =>",
							" ret =>",
							" () =>",
							"Util.isBrowser = function()",
							" () =>",
							" w =>",
							" () =>",
							" () =>",
							" d =>",
							" () =>",
							"Util.waitFor = async function waitFor(msecs)",
							"({ setTimeout, clearTimeout, setInterval, clearInterval }) =>",
							"async (resolve, reject) =>",
							"() =>",
							"clear = () =>",
							"Util.timeout = async (msecs, promises, promiseClass = Promise) =>",
							"Util.isServer = function()",
							"Util.isMobile = function()",
							"Util.uniquePred = (cmp = null) =>",
							" (el, i, arr) =>",
							"item =>",
							" (el, i, arr) =>",
							"Util.unique = (arr, cmp) =>",
							"cmp = (a, b) =>",
							"(e, i, a) =>",
							"Util.zip = a =>",
							"(a, b) =>",
							"(_, i) =>",
							"arr =>",
							"Util.histogram = (...args) =>",
							" (k, v) =>",
							"initVal = () =>",
							"setVal = v =>",
							"(it, i) =>",
							"(item, i) =>",
							" (entry, idx, key) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"Util.concat = function* (...args)",
							"Util.distinct = function(arr)",
							" (value, index, me) =>",
							"Util.rangeMinMax = function(arr, field)",
							"obj =>",
							"Util.remap = (...args) =>",
							"getR = () =>",
							"r = val =>",
							"Util.mergeLists = function(arr1, arr2, key = 'id')",
							"Util.foreach = function(o, fn)",
							"Util.all = function(obj, pred)",
							"Util.isGenerator = function(fn)",
							"Util.isIterator = obj =>",
							"Util.isIterable = obj =>",
							" x =>",
							"Util.isConstructor = x =>",
							"construct(target, args)",
							"target",
							"x",
							"m =>",
							"Util.filter = function(a, pred)",
							"function* ()",
							"fn = (k, v) =>",
							"Util.reduce = (obj, fn, accu) =>",
							"Util.mapFunctional = fn =>",
							" function* (arg)",
							"Util.map = (...args) =>",
							"ret = a =>",
							"function* ()",
							"ret = a =>",
							"function* ()",
							"Util.entriesToObj = function(arr)",
							"(acc, item) =>",
							"Util.isDate = function(d)",
							"Util.parseDate = function(d)",
							"Util.isoDate = function(date)",
							"Util.toUnixTime = function(dateObj, utc = false)",
							"Util.unixTime = function(utc = false)",
							"Util.fromUnixTime = function(epoch, utc = false)",
							"Util.formatTime = function(date = ",
							"(), format = 'HH:MM:SS')",
							"Util.leapYear = function(year)",
							"Util.timeSpan = function(s)",
							"Util.randFloat = function(min, max, rnd = Util.rng)",
							"Util.randInt = (...args) =>",
							"Util.randStr = (len, charset, rnd = Util.rng) =>",
							"Util.hex = function(num, numDigits)",
							"Util.numberParts = (num, base) =>",
							"Util.roundDigits = precision =>",
							"Util.roundFunction = (prec, digits, type) =>",
							" function(value)",
							"Util.roundTo = function(value, prec, digits, type)",
							"() =>",
							" utf8 =>",
							" v =>",
							" utf8 =>",
							" base64 =>",
							" v =>",
							" string =>",
							"Util.formatRecord = function(obj)",
							"item =>",
							" function(obj)",
							"Util.isArrayLike = obj =>",
							"Util.equals = function(a, b)",
							"(e, i) =>",
							"Util.versionCompare = (a, b) =>",
							"isdigit = c =>",
							"Util.isGetter = (obj, propName) =>",
							"Util.isBool = value =>",
							"Util.size = (...args) =>",
							" function size(obj)",
							"Util.isMap = function(obj)",
							"Util.effectiveDeviceWidth = function()",
							"Util.getFormFields = function(initialState)",
							" (acc, { elements }) =>",
							" (acc2, { name, value }) =>",
							"Util.mergeObjects = function(objArr, predicate = (dst, src, key) => (src[key] == '' ? undefined : src[key]))",
							"Util.getUserAgent = function(headers = req.headers)",
							"Util.factor = function(start, end)",
							"Util.factorial = function(n)",
							"Util.increment = function(obj, key)",
							"Util.counter = function()",
							"self = function()",
							"Util.filterKeys = function(obj, pred = k => true)",
							"pred = str =>",
							"pred = str =>",
							"Util.filterMembers = function(obj, fn)",
							"pred = (k, v, o) =>",
							"Util.filterOutMembers = function(obj, fn)",
							"pred = (v, k, o) =>",
							"Util.dumpMembers = obj =>",
							"Util.filterOutKeys = function(obj, arr)",
							" (v, k, o) =>",
							" (k, v) =>",
							" key =>",
							" () =>",
							" (v, k, o) =>",
							"Util.removeKeys = function(obj, arr)",
							" (v, k, o) =>",
							" (k, v) =>",
							" key =>",
							"Util.getKeys = function(obj, arr)",
							"Util.numbersConvert = function(str)",
							"(ch, i) =>",
							"Util.entries = function(arg)",
							"function* ()",
							"Util.keys = function(arg)",
							" function* ()",
							"Util.values = function(arg)",
							" function* ()",
							"Util.removeEqual = function(a, b)",
							"Util.clear = obj =>",
							"Util.remove = (arr, item) =>",
							" (other, i, arr) =>",
							"Util.removeIf = function(arr, pred)",
							"Util.traverse = function(o, fn)",
							" (v, k, a) =>",
							" function* walker(o, depth = 0)",
							"Util.traverseWithPath = function(o, rootPath = [])",
							" function* walker(o, path)",
							"Util.indexByPath = function(o, p)",
							"Util.pushUnique = (arr, ...args) =>",
							"(acc, item) =>",
							"Util.insertSorted = function(arr, item, cmp = (a, b) => b - a)",
							"next = (k, v) =>",
							" (k, v) =>",
							" (k, v) =>",
							" (k, v) =>",
							"fn = function(key, value)",
							"Util.keyIterator = obj =>",
							"Util.entryIterator = obj =>",
							"function* ()",
							"Util.mapAdapter = getSetFunction =>",
							"get(key)",
							"set(key, value)",
							".keys = () =>",
							".entries = () =>",
							"Util.mapFunction = map =>",
							"fn = function(...args)",
							"m =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".update = function(key, fn = (k, v) => v)",
							".entries = function* ()",
							".values = function* ()",
							".keys = function* ()",
							" function()",
							"([key, value]) =>",
							".keys = async () =>",
							".entries = async () =>",
							".values = async () =>",
							".keys = function* ()",
							".entries = function* ()",
							".values = function* ()",
							".filter = function(pred)",
							"function* ()",
							".map = function(t)",
							"function* ()",
							".forEach = function(fn)",
							".delete = key =>",
							".has = key =>",
							"Util.mapWrapper = (map, toKey = key => key, fromKey = key => key) =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".keys = () =>",
							".entries = function* ()",
							".values = function* ()",
							".has = key =>",
							".delete = key =>",
							"m =>",
							"Util.mapCombinator = (forward, backward) =>",
							"fn = function(key, value)",
							"(a,m) =>",
							" key =>",
							" a =>",
							" function makeGetter(map, next = a => a)",
							" key =>",
							"Util.predicate = (fn_or_regex, pred) =>",
							"fn = arg =>",
							".valueOf = function()",
							" arg =>",
							"Util.some = predicates =>",
							" value =>",
							"pred =>",
							"Util.every = predicates =>",
							" value =>",
							"pred =>",
							"Util.iterateMembers = function* (obj, predicate = (name, depth, obj, proto) => true, depth = 0)",
							" (...predicates) =>",
							" (...args) =>",
							"pred =>",
							" (...predicates) =>",
							" (...args) =>",
							"pred =>",
							"(pred, obj) =>",
							"Util.memberNameFilter = (depth = 1, start = 0) =>",
							" (m, l, o) =>",
							" (m, l, o) =>",
							" (name, depth, obj, proto) =>",
							"Util.getMemberNames = (obj, ...args) =>",
							"Util.getMemberEntries = (obj, ...args) =>",
							"name =>",
							"accFn = (a, m, o) =>",
							" (obj, ...args) =>",
							" (a, m) =>",
							" (r, a, m) =>",
							" (r, a) =>",
							"incFn = (c, n, self) =>",
							"incFn = (c, n, self) =>",
							"inc = (i, n = 1) =>",
							"self = function Count(n = 1)",
							".valueOf = function()",
							"filterFn = (key, value) =>",
							"(acc, mem, idx) =>",
							" r =>",
							" () =>",
							"fn = function ReduceIntoMap(arg, acc = mapObj)",
							"(acc, arg) =>",
							" (a, m, o) =>",
							"Util.methodNameFilter = (depth = 1, start = 0) =>",
							" (m, l, o) =>",
							" () =>",
							" b =>",
							" () =>",
							"Util.getMethodNames = (obj, depth = 1, start = 0) =>",
							" (a, m, o) =>",
							"Util.inherit = (dst, src, depth = 1) =>",
							" function inherits(ctor, superCtor)",
							"ctor",
							"superCtor",
							" function inherits(ctor, superCtor)",
							"TempCtor = function()",
							"TempCtor",
							"superCtor",
							"ctor",
							"ctor",
							"Util.bindMethods = (obj, methods) =>",
							"Util.bindMethodsTo = function(dest, obj, methods)",
							"Util.getConstructor = obj =>",
							"Util.getPrototypeChain = function(obj, fn = p => p)",
							"Util.getObjectChain = (obj, fn = p => p) =>",
							"Util.getPropertyDescriptors = function(obj)",
							" p =>",
							"fn = (c, p) =>",
							" (p, o) =>",
							"Util.weakAssign = function(...args)",
							"other =>",
							"Util.exception = function Exception(...args)",
							"toString(color = false)",
							"Util.location = function Location(...args)",
							"toString(color = false)",
							" t =>",
							"getFileName()",
							"getLineNumber()",
							"getColumnNumber()",
							"Util.stackFrame = function StackFrame(frame)",
							"prop =>",
							"propertyMap()",
							"method =>",
							"([method, func]) =>",
							"getFunction()",
							"getMethodName()",
							"getFunctionName()",
							"getTypeName()",
							"getFileName()",
							"getLineNumber()",
							"getColumnNumber()",
							"get()",
							"toString(color, opts = {})",
							" (t, color) =>",
							" t =>",
							"p =>",
							"p =>",
							"(f, i) =>",
							"getLocation()",
							"get location()",
							"Util.scriptName = () =>",
							" () =>",
							" args =>",
							" () =>",
							"Util.getFunctionName = () =>",
							"Util.getFunctionArguments = fn =>",
							"Util.scriptDir = () =>",
							" () =>",
							" script =>",
							" () =>",
							"Util.stack = function Stack(stack, offset)",
							"frame =>",
							"([m, p]) =>",
							" (acc, [method, property]) =>",
							" function getStack()",
							".prepareStackTrace = (_, stack) =>",
							" function stackToString(st, start = 0)",
							"function* ()",
							"frame =>",
							"part =>",
							"frame =>",
							"([func, file]) =>",
							"n =>",
							"([func, file]) =>",
							"([func, [columnNumber, lineNumber, ...file]]) =>",
							"({ methodName, functionName: func, fileName: file, columnNumber: column, lineNumber: line }) =>",
							" s =>",
							" s =>",
							" () =>",
							" s =>",
							" s =>",
							" () =>",
							"frame =>",
							"frame =>",
							"get: () =>",
							"get: () =>",
							"*value()",
							"toString(opts = {})",
							"f =>",
							"getFunctionName()",
							"getMethodName()",
							"getFileName()",
							"getLineNumber()",
							"get()",
							" (a, f) =>",
							"(fn, i) =>",
							"Util.getCallerStack = function(position = 2, limit = 1000, stack)",
							".prepareStackTrace = (_, stack) =>",
							"Util.getCallerFile = function(position = 2)",
							"Util.getCallerFunction = function(position = 2)",
							"Util.getCallerFunctionName = function(position = 2)",
							"Util.getCallerFunctionNames = function(position = 2)",
							"Util.getCaller = function(index = 1, stack)",
							"f =>",
							"Util.getCallers = function(index = 1, num = Number.MAX_SAFE_INTEGER, stack)",
							"f =>",
							"Util.getStackFrames = function(offset = 2)",
							"frame =>",
							"Util.getStackFrame = function(offset = 2)",
							"Util.rotateLeft = function(x, n)",
							"Util.rotateRight = function(x, n)",
							"Util.hashString = function(string, bits = 32, mask = 0xffffffff)",
							"Util.flatTree = function(tree, addOutput)",
							"addOutput = arg =>",
							" key =>",
							"Util.traverseTree = function(tree, fn, depth = 0, parent = null)",
							"Util.walkTree = function(node, pred, t, depth = 0, parent = null)",
							"function* ()",
							"pred = i =>",
							"t = function(i)",
							"Util.isPromise = function(obj)",
							"setImmediate = fn =>",
							"Util.next = function(iter, observer, prev = undefined)",
							"val =>",
							"() =>",
							"err =>",
							"() =>",
							"Util.getImageAverageColor = function(imageElement, options)",
							"toStringRgb()",
							"toStringRgba()",
							"toStringHex()",
							"toHex = function(d)",
							"Util.jsonToObject = function(jsonStr)",
							"Util.splitLines = function(str, max_linelen = Number.MAX_SAFE_INTEGER)",
							"Util.splitAt = function* (str, ...indexes)",
							"(a, b) =>",
							"Util.decodeEscapes = function(text)",
							"m =>",
							"([s, t]) =>",
							"Util.stripXML = text =>",
							"Util.stripHTML = html =>",
							"p =>",
							"p =>",
							"Util.stripNonPrintable = text =>",
							"Util.decodeHTMLEntities = function(text)",
							" (match, entity) =>",
							"Util.encodeHTMLEntities = (str, charset = '\\u00A0-\\u9999<>&') =>",
							" i =>",
							"Util.stripAnsi = function(str)",
							"Util.proxy = (obj = {}, handler) =>",
							"get(target, key, receiver)",
							"set(target, key, value, receiver)",
							"Util.propertyLookup = (obj = {}, handler = key => null) =>",
							"get(target, key, receiver)",
							"Util.traceProxy = (obj, handler) =>",
							" function(name, args)",
							"get(target, key, receiver)",
							"member = function()",
							"Util.proxyTree = function proxyTree(...callbacks)",
							"applyCallback = () =>",
							"get(target, key)",
							"set(target, key, value)",
							"apply(target, thisArg, args)",
							" function node(path)",
							"() =>",
							"Util.construct = constructor =>",
							" function F(args)",
							"F",
							"constructor",
							"Util.constructApply = (constructor, array) =>",
							"Util.immutable = args =>",
							"set: () =>",
							"deleteProperty: () =>",
							"defineProperty: () =>",
							"Util.immutableClass = (orig, ...proto) =>",
							"p =>",
							" ctor =>",
							"ctor",
							"imm = base =>",
							"constructor(...args)",
							"Util.partial = function partial(fn /*, arg1, arg2 etc */)",
							" function()",
							"(min, max, value) =>",
							"Util.coloring = (useColor = true) =>",
							"code(...args)",
							"text(text)",
							"concat(...args)",
							"code(...args)",
							"text(text, ...color)",
							"concat(...args)",
							"code(...args)",
							"text(text, ...color)",
							"concat(...args)",
							"Util.colorText = (...args) =>",
							"Util.decodeAnsi = (str, index) =>",
							"isDigit = c =>",
							"notDigit = c =>",
							"findIndex = (pred, start) =>",
							"Util.stripAnsi = str =>",
							"Util.ansiCode = (...args) =>",
							"Util.wordWrap = (str, width, delimiter) =>",
							"Util.multiParagraphWordWrap = (str, width, delimiter) =>",
							"Util.defineInspect = (proto, ...props) =>",
							" function()",
							"(acc, key) =>",
							"(a, b, value) =>",
							"Util.bindProperties = (proxy, target, props, gen) =>",
							"name =>",
							"(acc, name) =>",
							"gen = p => v =>",
							"k =>",
							" (a, [k, v]) =>",
							" (...args) =>",
							"(...args) =>",
							" (a, k) =>",
							"get: () =>",
							"get: () =>",
							"function ()",
							" obj =>",
							"on: val =>",
							"off: val =>",
							"true: val =>",
							"false: val =>",
							"AssertionFailed",
							"constructor(message, stack)",
							"Util.assert = function assert(val, message)",
							"Util.assertEqual = function assertEqual(val1, val2, message)",
							"Util.assignGlobal = () =>",
							"Util.weakMapper = function(createFn, map = ",
							"(), hitFn)",
							"self = function(obj, ...args)",
							".set = (k, v) =>",
							".get = k =>",
							"Util.merge = function(...args)",
							" a =>",
							" a =>",
							"(acc, arg) =>",
							"Util.transformer = (a, ...l) =>",
							" (c, f) =>",
							" function(...v)",
							"Util.toPlainObject = obj =>",
							" v =>",
							"Util.toBuiltinObject = obj =>",
							" v =>",
							"t = (v, n) =>",
							"(acc, k) =>",
							"Util.timer = msecs =>",
							"remaining = () =>",
							"finish = callback =>",
							"log = (method, ...args) =>",
							"obj =>",
							" v =>",
							"timeout = (msecs, tmr = timer) =>",
							"() =>",
							" (...args) =>",
							" () =>",
							"add = (arr, ...items) =>",
							"get delay()",
							"get created()",
							"get start()",
							"get stop()",
							"get elapsed()",
							"get end()",
							"get remain()",
							"cancel()",
							"pause()",
							".resume = function()",
							".restart = function()",
							"callback(...args)",
							"subscribe(f)",
							"unsubscribe(f)",
							"start = () =>",
							"(resolve, reject) =>",
							"Util.thenableReject = error =>",
							"then: (resolve, reject) =>",
							"Util.wrapGenerator = fn =>",
							" function(...args)",
							"Util.wrapGeneratorMethods = obj =>",
							"Util.decorateIterable = (proto, generators = false) =>",
							"forEach(fn, thisArg)",
							"*map(fn, thisArg)",
							"*filter(pred, thisArg)",
							"findIndex(pred, thisArg)",
							"indexOf(item, startIndex = -1)",
							"(e, i) =>",
							"find(pred, thisArg)",
							"every(pred, thisArg)",
							"some(pred, thisArg)",
							"reduce(fn, accu)",
							"*entries()",
							"*keys()",
							"*values()",
							"Util.swap = (a, b) =>",
							"Util.swapArray = ([a, b]) =>",
							"Util.cacheAdapter = (st, defaultOpts = {}) =>",
							" () =>",
							"async c =>",
							" () =>",
							"async getItem(request, opts = {})",
							"async setItem(request, response)",
							"async addItem(request)",
							"async removeItem(request, opts = {})",
							"async key(index)",
							"async keys(urls = false, t = a => a)",
							"response =>",
							"r =>",
							"async clear()",
							"Util.cachedFetch = (allOpts = {}) =>",
							"() =>",
							"self = async function CachedFetch(request, opts = {})",
							"(returnValue, fn, ...args) =>",
							"Util.proxyObject = (root, handler) =>",
							"ptr = path =>",
							"(a, i) =>",
							" (value, path) =>",
							"get(target, key)",
							" function node(path)",
							"Util.parseXML = function(xmlStr)",
							" () =>",
							" parser =>",
							"fn = (value, ...args) =>",
							" () =>",
							" map =>",
							"(obj, ...args) =>",
							" () =>",
							" (obj, ...args) =>",
							"self = (obj, ...args) =>",
							"() =>",
							" () =>",
							" a =>",
							" () =>",
							" () =>",
							" fn =>",
							" () =>",
							" () =>",
							" a =>",
							"() =>",
							" () =>",
							" a =>",
							" () =>",
							"() =>",
							"Util.getOpt = (options = {}, args) =>",
							"findOpt = arg =>",
							"([optname, option]) =>",
							"opt =>",
							" () =>",
							" v =>",
							" () =>",
							" () =>",
							" v =>",
							"Util.getEnv = async varName =>",
							" () =>",
							"async e =>",
							" () =>",
							"Util.getEnvVars = async () =>",
							" () =>",
							"async e =>",
							" () =>",
							"Util.safeFunction = (fn, trapExceptions, thisObj) =>",
							"async function(...args)",
							" function(...args)",
							" a =>",
							" error =>",
							"Util.safeCall = (fn, ...args) =>",
							"Util.safeApply = (fn, args = []) =>",
							"Util.exit = exitCode =>",
							"stdExit = std =>",
							" () =>",
							" ([obj, exit]) =>",
							" () =>",
							"Util.atexit = handler =>",
							"Util.callMain = async (fn, trapExceptions) =>",
							"async (...args) =>",
							"async ret =>",
							"() =>",
							" err =>",
							" () =>",
							" argv1 =>",
							"Util.printReturnValue = (fn, opts = {}) =>",
							"print = (returnValue, fn, ...args) =>",
							"self = (...args) =>",
							"Util.replaceAll = (needles, haystack) =>",
							"([re, str]) =>",
							"(acc, [match, replacement]) =>",
							"Util.quote = (str, q = '\"') =>",
							"Util.escape = (str, pred = codePoint => codePoint < 32 || codePoint > 0xff) =>",
							"Util.escapeRegex = string =>",
							"Util.consolePrinter = function ConsolePrinter(log = console.log)",
							"self = function(...args)",
							".log = (...args) =>",
							"Util.consoleJoin = function(...args)",
							"Util.consoleConcat = function(...args)",
							"self = function ConsoleConcat(...args)",
							"clear()",
							"log = (...args) =>",
							"print()",
							"i =>",
							"output()",
							"add(...args)",
							"Util.booleanAdapter = (getSetFn, trueValue = 1, falseValue = 0) =>",
							" function(value)",
							"set = () =>",
							" function(...args)",
							"Util.deriveGetSet = (fn, get = v => v, set = v => v, thisObj) =>",
							" () =>",
							" v =>",
							"handler = () =>",
							"ExFunc",
							"constructor()",
							"__call__(...args)",
							"Util.isatty = async fd =>",
							"mod =>",
							"Util.ttyGetWinSize = (fd = 1) =>",
							"m =>",
							" (resolve, reject) =>",
							" (resolve, reject) =>",
							" (fd = 0, mode = true) =>",
							"Util.stdio = (fd, mode = true) =>",
							"Util.signal = (num, act) =>",
							"m =>",
							"() =>",
							"Util.timeit = (fn, args = [], options = {}) =>",
							"(p, c) =>",
							"Util.lazyProperty = (obj, name, getter, opts = {}) =>",
							"replaceProperty = value =>",
							"async function()",
							" function()",
							"v =>",
							"Util.lazyProperties = (obj, gettersObj, opts = {}) =>",
							"f = (a, b) =>",
							" function(a, b)",
							"(a, b) =>",
							"(a, b) =>",
							"() =>",
							"HighResolutionTime",
							"constructor(secs = 0, nano = 0)",
							"static create(s, n)",
							"get seconds()",
							"get milliseconds()",
							"get nanoseconds()",
							"diff(o)",
							"sum(o)",
							"since(o)",
							"toString()",
							"inspect()",
							"async function hrtime(previousTimestamp)",
							" function hrtime(previousTimestamp)",
							" () =>",
							" (minDelay = 0) =>",
							"resolve =>",
							"resolve =>",
							" function animationFrame(t)",
							"Util.getNow = () =>",
							"performanceNow = () =>",
							"performanceNow = async function(clock = CLOCK_MONOTONIC_RAW)",
							"Util.formatColumns = a =>",
							"(acc, row, i) =>",
							"(col, j) =>",
							"row =>",
							"(col, j) =>",
							"Util.getPlatform = () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							"async () =>",
							"Util.colIndexes = line =>",
							" ([prev, cols], char, i) =>",
							"Util.colSplit = (line, indexes) =>",
							"map = (name, flag) =>",
							" function* (value)",
							"log = (duration, name, args, ret) =>",
							"async (args, ret) =>",
							" (args, ret) =>",
							"async function(...args)",
							" function(...args)",
							"both = () =>",
							"(name, args) =>",
							"arg =>",
							"(name, ret) =>",
							" function(...args)",
							"Util.bind = function(f, ...args)",
							"ret = function()",
							"ret = function()",
							"ret",
							"f",
							"Util.bytesToUTF8 = function* (bytes)",
							"Util.codePointsToString = codePoints =>",
							"Util.bufferToString = b =>",
							"Util.levenshteinDistance = function levenshteinDistance(a, b)",
							"Util.padTrunc = (...args) =>",
							" (s, pad = ' ') =>",
							"Util.setReadHandler = (fd, handler) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABLBQAATlRIX1BPSU5UOiBjID0+ClJBRElBTF9ESVNUQU5DRTogYyA9PgpQRVJQRU5ESUNVTEFSX0RJU1RBTkNFOiBjID0+ClJFVU1BTk5fV0lUS0FNOiBjID0+Ck9QSEVJTTogYyA9PgpMQU5HOiBjID0+CkRPVUdMQVNfUEVVQ0tFUjogYyA9PgpIaWVyYXJjaHkoYXJyYXkpCiAgLmluZGV4ID0gZnVuY3Rpb24oaWQpCiAgLmluZGV4ID0gZnVuY3Rpb24oaWQpCkhpZXJhcmNoeQogIHBhcmVudChpZCkKICBjaGlsZChpZCkKICBuZXh0KGlkKQogIHByZXYoaWQpCiAgZ2V0Q29uc3RhbnRzKG5hbWVzKQogIG5hbWUgPT4KICBmaW5kQ29uc3RhbnQodmFsdWUsIGtleUNvbmQgPSBrID0+IC9eQ1YvLgooaykpCiAgKHYsIGspID0+CiAgZmluZFR5cGUodmFsdWUpCiAgayA9PgogIGdldEJpdERlcHRoKG1hdCkKKC4uLmFyZ3MpID0+CiAgbWluTWF4KG1hdCkKICBtb2RpZmllck1hcChrZXlDb2RlKQooW21vZGlmaWVyLCBmbGFnXSkgPT4KICBkcmF3Q29udG91cihtYXQsIGNvbnRvdXIsIGNvbG9yLCB0aGlja25lc3MgPSAxLCBsaW5lVHlwZSA9IGN2LkxJTkVfQUEpCiAgZ2V0UGFyZW50cyhoaWVyLCBpZCkKICBnZXRDb250b3VyRGVwdGgoaGllciwgaWQpCiAgZmluZFJvb3QoaGllcikKICBoID0+CiAgZ2V0VG9wbGV2ZWwoaGllcikKICB3YWxrQ29udG91cnMoaGllciwgaWQpCiAgbWFpbiguLi5hcmdzKQogICgpID0+CiAgKGZpbGUsIGN1cnJlbnQpID0+CiAgKGFyZywgY3VycmVudCwgb3B0aW9ucywgcmVzdWx0cykgPT4KICBtYWtlUmFpbmJvdyA9IHN0ZXBzID0+CiAgaHVlID0+CiAgaCA9PgogIHByaW50RmxhZ3MgPSBmbGFncyA9PgooZXZlbnQsIHgsIHksIGZsYWdzKQpBY3F1aXJlRnJhbWUoc3JjLCBkc3QpCkdyYXlzY2FsZShzcmMsIGRzdCkKTm9ybShzcmMsIGRzdCkKQmx1cihzcmMsIGRzdCkKRWRnZURldGVjdChzcmMsIGRzdCkKTW9ycGgoc3JjLCBkc3QpCkNvbnRvdXJzKHNyYywgZHN0KQogIGggPT4KSG91Z2hMaW5lcyhzcmMsIGRzdCkKICAoaSwgbikgPT4KICBpbWFnZSA9PgogIGZ1bmN0aW9uKHZhbHVlLCBjb3VudCwgbmFtZSwgd2luZG93KQooKSA9PgpDbGVhclN1cmZhY2UgPSBtYXQgPT4KTWFrZVN1cmZhY2UgPSAoKSA9PgooLi4uYXJncykgPT4KKCkgPT4KICAoYWNjLCBbbW9kaWZpZXIsIGFjdGl2ZV0pID0+CiAgc2hvd091dHB1dCgpCihbaSwgaWRdKSA9PgogIGRyYXdQYXJhbShwYXJhbSwgeSwgY29sb3IpCiAgc2F2ZUNvbnRvdXJzKGNvbnRvdXJzLCBzaXplKQooYWNjLCBjb250b3VyLCBpKSA9PgogIGQgPT4KICBzYXZlTGluZXMobGluZXMsIHNpemUpCiAgY29vcmRzID0+CihbeDEsIHkxLCB4MiwgeTJdKSA9PgooYSwgW2ssIHZdKSA9PgogIGZyYW1lID0+CiAgZnJhbWUgPT4AAAAAAAAAAChoAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					132,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/qjs-opencv/js/cvVideo.js",
						"symkeys":
						[
							[
								353,
								358
							],
							[
								389,
								394
							],
							[
								415,
								440
							],
							[
								529,
								604
							],
							[
								609,
								640
							],
							[
								1618,
								1622
							],
							[
								1749,
								1758
							],
							[
								2294,
								2307
							],
							[
								2312,
								2348
							],
							[
								2626,
								2630
							],
							[
								2741,
								2758
							],
							[
								2850,
								2866
							],
							[
								2911,
								2932
							],
							[
								3001,
								3015
							],
							[
								3699,
								3715
							],
							[
								3745,
								3755
							],
							[
								3781,
								3790
							],
							[
								3842,
								3858
							],
							[
								4094,
								4104
							],
							[
								4186,
								4192
							],
							[
								4558,
								4571
							],
							[
								4904,
								4926
							],
							[
								5204,
								5213
							],
							[
								5364,
								5384
							],
							[
								5480,
								5491
							],
							[
								6102,
								6109
							],
							[
								6145,
								6165
							],
							[
								6240,
								6253
							],
							[
								7127,
								7152
							],
							[
								7296,
								7313
							],
							[
								7524,
								7545
							],
							[
								8143,
								8168
							],
							[
								8321,
								8333
							],
							[
								8354,
								8373
							],
							[
								8447,
								8464
							],
							[
								8747,
								8760
							],
							[
								8823,
								8844
							],
							[
								8863,
								8876
							],
							[
								8951,
								8962
							],
							[
								9067,
								9077
							],
							[
								9177,
								9186
							],
							[
								9306,
								9322
							],
							[
								9449,
								9462
							],
							[
								9715,
								9724
							],
							[
								9986,
								9997
							],
							[
								10037,
								10048
							],
							[
								10075,
								10095
							],
							[
								10224,
								10243
							],
							[
								10378,
								10397
							],
							[
								10518,
								10543
							],
							[
								10829,
								10839
							],
							[
								10994,
								11008
							],
							[
								11159,
								11169
							],
							[
								11428,
								11449
							]
						],
						"symlist":
						[
							"() =>",
							"() =>",
							" function Crop(mat, rect)",
							"function ImageSize(src, dst, dsize, action = (name, arg1, arg2) => console.",
							"(`${name} ${arg1} -> ${arg2}`))",
							"s =>",
							"(a, b) =>",
							"ImageSequence",
							"constructor(images = [], dimensions)",
							"e =>",
							"get frame_count()",
							"get pos_frames()",
							"set pos_frames(value)",
							"get pos_msec()",
							"getBackendName()",
							"isOpened()",
							"get(prop)",
							"set(prop, value)",
							"get size()",
							"grab()",
							"retrieve(mat)",
							" (name, arg1, arg2) =>",
							"read(mat)",
							"isVideoPath = arg =>",
							"VideoSource",
							"name =>",
							"constructor(...args)",
							"(acc, arg) =>",
							"capture(device, driverId)",
							".propId = prop =>",
							".read = function(mat)",
							".retrieve = function(mat)",
							"VideoCapture",
							"fromImages(...args)",
							".propId = prop =>",
							"ImageSequence",
							".read = function(mat)",
							"ImageSequence",
							"set size(s)",
							"get size()",
							"get(prop)",
							"set(prop, value)",
							"get backend()",
							"get fps()",
							"propName =>",
							"([k, v]) =>",
							"seekFrames(relative)",
							"seekMsecs(relative)",
							"get durationMsecs()",
							"position(type = 'frames')",
							"get size()",
							"set size(size)",
							"get time()",
							"pad = (i, n, frac) =>"
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				],
				[
					133,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/qjsm.c",
						"symkeys":
						[
							[
								560,
								574
							],
							[
								1168,
								1197
							],
							[
								1314,
								1332
							],
							[
								1359,
								1372
							],
							[
								1433,
								1450
							],
							[
								1616,
								1642
							],
							[
								1744,
								1768
							],
							[
								1851,
								1877
							],
							[
								1973,
								1997
							],
							[
								2078,
								2102
							],
							[
								2109,
								2133
							],
							[
								2139,
								2163
							],
							[
								2180,
								2204
							],
							[
								2212,
								2236
							],
							[
								2247,
								2271
							],
							[
								2280,
								2304
							],
							[
								2312,
								2336
							],
							[
								2344,
								2368
							],
							[
								2376,
								2400
							],
							[
								2411,
								2435
							],
							[
								2448,
								2472
							],
							[
								2484,
								2508
							],
							[
								2523,
								2547
							],
							[
								2555,
								2581
							],
							[
								2592,
								2618
							],
							[
								2628,
								2654
							],
							[
								2660,
								2686
							],
							[
								2700,
								2726
							],
							[
								2737,
								2763
							],
							[
								2771,
								2797
							],
							[
								2808,
								2834
							],
							[
								2841,
								2867
							],
							[
								3028,
								3054
							],
							[
								3105,
								3139
							],
							[
								3189,
								3203
							],
							[
								4010,
								4022
							],
							[
								4690,
								4706
							],
							[
								4769,
								4787
							],
							[
								5345,
								5365
							],
							[
								5736,
								5752
							],
							[
								6130,
								6145
							],
							[
								6336,
								6351
							],
							[
								6846,
								6861
							],
							[
								7305,
								7322
							],
							[
								9663,
								9676
							],
							[
								10223,
								10238
							],
							[
								10407,
								10421
							],
							[
								11218,
								11233
							],
							[
								11338,
								11352
							],
							[
								11515,
								11530
							],
							[
								12274,
								12289
							],
							[
								12577,
								12594
							],
							[
								13161,
								13176
							],
							[
								13193,
								13208
							],
							[
								13226,
								13243
							],
							[
								13279,
								13290
							],
							[
								13633,
								13660
							],
							[
								13821,
								13849
							],
							[
								14445,
								14468
							],
							[
								15150,
								15171
							],
							[
								15248,
								15264
							],
							[
								15694,
								15708
							],
							[
								15932,
								15949
							],
							[
								17181,
								17190
							],
							[
								17204,
								17212
							],
							[
								18337,
								18352
							],
							[
								19541,
								19556
							],
							[
								23641,
								23657
							],
							[
								24312,
								24316
							]
						],
						"symlist":
						[
							"—Ⓕ– atomic_add_int ( ) { … } — function",
							" ⒡  js_std_set_module_loader_func ( ) ; — function declaration",
							" ⒡  malloc_usable_size ( ) ; — function declaration",
							"—Ⓜ– trim_dotslash ( ) … — macro function",
							"—Ⓒ– jsm_module_record { … } ; — type",
							"—Ⓜ– jsm_module_extern_compiled ( ) … — macro function",
							"—Ⓜ– jsm_module_extern_native ( ) … — macro function",
							"—Ⓜ– jsm_module_record_compiled ( ) … — macro function",
							"—Ⓜ– jsm_module_record_native ( ) … — macro function",
							" ⒡  jsm_module_extern_native ( ) ; — function declaration",
							" ⒡  jsm_module_extern_native ( ) ; — function declaration",
							" ⒡  jsm_module_extern_native ( ) ; — function declaration",
							" ⒡  jsm_module_extern_native ( ) ; — function declaration",
							" ⒡  jsm_module_extern_native ( ) ; — function declaration",
							" ⒡  jsm_module_extern_native ( ) ; — function declaration",
							" ⒡  jsm_module_extern_native ( ) ; — function declaration",
							" ⒡  jsm_module_extern_native ( ) ; — function declaration",
							" ⒡  jsm_module_extern_native ( ) ; — function declaration",
							" ⒡  jsm_module_extern_native ( ) ; — function declaration",
							" ⒡  jsm_module_extern_native ( ) ; — function declaration",
							" ⒡  jsm_module_extern_native ( ) ; — function declaration",
							" ⒡  jsm_module_extern_native ( ) ; — function declaration",
							" ⒡  jsm_module_extern_native ( ) ; — function declaration",
							" ⒡  jsm_module_extern_compiled ( ) ; — function declaration",
							" ⒡  jsm_module_extern_compiled ( ) ; — function declaration",
							" ⒡  jsm_module_extern_compiled ( ) ; — function declaration",
							" ⒡  jsm_module_extern_compiled ( ) ; — function declaration",
							" ⒡  jsm_module_extern_compiled ( ) ; — function declaration",
							" ⒡  jsm_module_extern_compiled ( ) ; — function declaration",
							" ⒡  jsm_module_extern_compiled ( ) ; — function declaration",
							" ⒡  jsm_module_extern_compiled ( ) ; — function declaration",
							" ⒡  jsm_module_extern_compiled ( ) ; — function declaration",
							" ⒡  jsm_module_extern_compiled ( ) ; — function declaration",
							" ⒡  js_std_set_worker_new_context_func ( ) ; — function declaration",
							"—Ⓕ– jsm_dump_error ( ) { … } — function",
							"—Ⓕ– jsm_eval_buf ( ) { … } — function",
							"—Ⓕ– jsm_init_modules ( ) { … } — function",
							"—Ⓜ– jsm_builtin_native ( ) … — macro function",
							"—Ⓜ– jsm_builtin_compiled ( ) … — macro function",
							"—Ⓕ– jsm_load_package ( ) { … } — function",
							"—Ⓕ– jsm_module_find ( ) { … } — function",
							"—Ⓕ– jsm_module_init ( ) { … } — function",
							"—Ⓕ– jsm_module_load ( ) { … } — function",
							"—Ⓕ– jsm_module_loader ( ) { … } — function",
							"—Ⓕ– jsm_eval_file ( ) { … } — function",
							"—Ⓕ– jsm_script_file ( ) { … } — function",
							"—Ⓕ– jsm_script_get ( ) { … } — function",
							"—Ⓕ– jsm_script_push ( ) { … } — function",
							"—Ⓕ– jsm_script_pop ( ) { … } — function",
							"—Ⓕ– jsm_script_load ( ) { … } — function",
							"—Ⓕ– jsm_context_new ( ) { … } — function",
							"—Ⓜ– jsm_module_native ( ) … — macro function",
							" Ⓜ  MALLOC_OVERHEAD … — macro object",
							" Ⓜ  MALLOC_OVERHEAD … — macro object",
							"—Ⓒ– trace_malloc_data { … } ; — type",
							"—Ⓕ– dump_vector ( ) { … } — function",
							"—Ⓕ– jsm_trace_malloc_ptr_offset ( ) { … } — function",
							"—Ⓕ– jsm_trace_malloc_usable_size ( ) { … } — function",
							"—Ⓕ– jsm_trace_malloc_printf ( ) { … } — function",
							"—Ⓕ– jsm_trace_malloc_init ( ) { … } — function",
							"—Ⓕ– jsm_trace_malloc ( ) { … } — function",
							"—Ⓕ– jsm_trace_free ( ) { … } — function",
							"—Ⓕ– jsm_trace_realloc ( ) { … } — function",
							" Ⓜ  PROG_NAME … — macro object",
							"—Ⓕ– jsm_help ( ) { … } — function",
							"—Ⓕ– jsm_eval_script ( ) { … } — function",
							"—Ⓕ– jsm_module_func ( ) { … } — function",
							"—Ⓕ– jsm_import_parse ( ) { … } — function",
							"—Ⓕ– main ( ) { … } — function"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADXAwAAKCkgPT4KKCkgPT4KQ3JvcChtYXQsIHJlY3QpCkltYWdlU2l6ZShzcmMsIGRzdCwgZHNpemUsIGFjdGlvbiA9IChuYW1lLCBhcmcxLCBhcmcyKSA9PiBjb25zb2xlLgooYCR7bmFtZX0gJHthcmcxfSAtPiAke2FyZzJ9YCkpCiAgcyA9PgooYSwgYikgPT4KSW1hZ2VTZXF1ZW5jZQogIGNvbnN0cnVjdG9yKGltYWdlcyA9IFtdLCBkaW1lbnNpb25zKQogIGUgPT4KICBnZXQgZnJhbWVfY291bnQoKQogIGdldCBwb3NfZnJhbWVzKCkKICBzZXQgcG9zX2ZyYW1lcyh2YWx1ZSkKICBnZXQgcG9zX21zZWMoKQogIGdldEJhY2tlbmROYW1lKCkKICBpc09wZW5lZCgpCiAgZ2V0KHByb3ApCiAgc2V0KHByb3AsIHZhbHVlKQogIGdldCBzaXplKCkKICBncmFiKCkKICByZXRyaWV2ZShtYXQpCiAgKG5hbWUsIGFyZzEsIGFyZzIpID0+CiAgcmVhZChtYXQpCiAgaXNWaWRlb1BhdGggPSBhcmcgPT4KVmlkZW9Tb3VyY2UKICBuYW1lID0+CiAgY29uc3RydWN0b3IoLi4uYXJncykKKGFjYywgYXJnKSA9PgogIGNhcHR1cmUoZGV2aWNlLCBkcml2ZXJJZCkKICAucHJvcElkID0gcHJvcCA9PgogIC5yZWFkID0gZnVuY3Rpb24obWF0KQogIC5yZXRyaWV2ZSA9IGZ1bmN0aW9uKG1hdCkKVmlkZW9DYXB0dXJlCiAgZnJvbUltYWdlcyguLi5hcmdzKQogIC5wcm9wSWQgPSBwcm9wID0+CkltYWdlU2VxdWVuY2UKICAucmVhZCA9IGZ1bmN0aW9uKG1hdCkKSW1hZ2VTZXF1ZW5jZQogIHNldCBzaXplKHMpCiAgZ2V0IHNpemUoKQogIGdldChwcm9wKQogIHNldChwcm9wLCB2YWx1ZSkKICBnZXQgYmFja2VuZCgpCiAgZ2V0IGZwcygpCiAgcHJvcE5hbWUgPT4KKFtrLCB2XSkgPT4KICBzZWVrRnJhbWVzKHJlbGF0aXZlKQogIHNlZWtNc2VjcyhyZWxhdGl2ZSkKICBnZXQgZHVyYXRpb25Nc2VjcygpCiAgcG9zaXRpb24odHlwZSA9ICdmcmFtZXMnKQogIGdldCBzaXplKCkKICBzZXQgc2l6ZShzaXplKQogIGdldCB0aW1lKCkKICBwYWQgPSAoaSwgbiwgZnJhYykgPT4AAAAAAAAAAEcNAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					134,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/imagePipeline.js",
						"symkeys":
						[
							[
								938,
								976
							],
							[
								3624,
								3652
							],
							[
								3823,
								3846
							],
							[
								3906,
								3929
							],
							[
								4052,
								4081
							],
							[
								4298,
								4322
							],
							[
								4523,
								4550
							],
							[
								4598,
								4603
							],
							[
								4881,
								4910
							],
							[
								5385,
								5403
							]
						],
						"symlist":
						[
							" function ImagePipeline(input, config)",
							"function Grayscale(src, dst)",
							"function Norm(src, dst)",
							"function Blur(src, dst)",
							"function EdgeDetect(src, dst)",
							"function Morph(src, dst)",
							"function Contours(src, dst)",
							" h =>",
							"function HoughLines(src, dst)",
							" function(i, n)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABLDwAA4oCU4pK74oCTIGF0b21pY19hZGRfaW50ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgogIOKSoSAganNfc3RkX3NldF9tb2R1bGVfbG9hZGVyX2Z1bmMgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCiAg4pKhICBtYWxsb2NfdXNhYmxlX3NpemUgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKAlOKTguKAkyB0cmltX2RvdHNsYXNoICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKSuOKAkyBqc21fbW9kdWxlX3JlY29yZCB7IOKApiB9IDsg4oCUIHR5cGUK4oCU4pOC4oCTIGpzbV9tb2R1bGVfZXh0ZXJuX2NvbXBpbGVkICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBqc21fbW9kdWxlX2V4dGVybl9uYXRpdmUgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIGpzbV9tb2R1bGVfcmVjb3JkX2NvbXBpbGVkICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBqc21fbW9kdWxlX3JlY29yZF9uYXRpdmUgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24KICDikqEgIGpzbV9tb2R1bGVfZXh0ZXJuX25hdGl2ZSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICDikqEgIGpzbV9tb2R1bGVfZXh0ZXJuX25hdGl2ZSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICDikqEgIGpzbV9tb2R1bGVfZXh0ZXJuX25hdGl2ZSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICDikqEgIGpzbV9tb2R1bGVfZXh0ZXJuX25hdGl2ZSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICDikqEgIGpzbV9tb2R1bGVfZXh0ZXJuX25hdGl2ZSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICDikqEgIGpzbV9tb2R1bGVfZXh0ZXJuX25hdGl2ZSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICDikqEgIGpzbV9tb2R1bGVfZXh0ZXJuX25hdGl2ZSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICDikqEgIGpzbV9tb2R1bGVfZXh0ZXJuX25hdGl2ZSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICDikqEgIGpzbV9tb2R1bGVfZXh0ZXJuX25hdGl2ZSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICDikqEgIGpzbV9tb2R1bGVfZXh0ZXJuX25hdGl2ZSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICDikqEgIGpzbV9tb2R1bGVfZXh0ZXJuX25hdGl2ZSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICDikqEgIGpzbV9tb2R1bGVfZXh0ZXJuX25hdGl2ZSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICDikqEgIGpzbV9tb2R1bGVfZXh0ZXJuX25hdGl2ZSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICDikqEgIGpzbV9tb2R1bGVfZXh0ZXJuX25hdGl2ZSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICDikqEgIGpzbV9tb2R1bGVfZXh0ZXJuX2NvbXBpbGVkICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgogIOKSoSAganNtX21vZHVsZV9leHRlcm5fY29tcGlsZWQgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCiAg4pKhICBqc21fbW9kdWxlX2V4dGVybl9jb21waWxlZCAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICDikqEgIGpzbV9tb2R1bGVfZXh0ZXJuX2NvbXBpbGVkICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgogIOKSoSAganNtX21vZHVsZV9leHRlcm5fY29tcGlsZWQgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCiAg4pKhICBqc21fbW9kdWxlX2V4dGVybl9jb21waWxlZCAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICDikqEgIGpzbV9tb2R1bGVfZXh0ZXJuX2NvbXBpbGVkICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgogIOKSoSAganNtX21vZHVsZV9leHRlcm5fY29tcGlsZWQgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCiAg4pKhICBqc21fbW9kdWxlX2V4dGVybl9jb21waWxlZCAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICDikqEgIGpzbV9tb2R1bGVfZXh0ZXJuX2NvbXBpbGVkICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgogIOKSoSAganNfc3RkX3NldF93b3JrZXJfbmV3X2NvbnRleHRfZnVuYyAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24K4oCU4pK74oCTIGpzbV9kdW1wX2Vycm9yICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNtX2V2YWxfYnVmICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNtX2luaXRfbW9kdWxlcyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pOC4oCTIGpzbV9idWlsdGluX25hdGl2ZSAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTik4LigJMganNtX2J1aWx0aW5fY29tcGlsZWQgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pK74oCTIGpzbV9sb2FkX3BhY2thZ2UgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc21fbW9kdWxlX2ZpbmQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc21fbW9kdWxlX2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc21fbW9kdWxlX2xvYWQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc21fbW9kdWxlX2xvYWRlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzbV9ldmFsX2ZpbGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc21fc2NyaXB0X2ZpbGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc21fc2NyaXB0X2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzbV9zY3JpcHRfcHVzaCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzbV9zY3JpcHRfcG9wICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNtX3NjcmlwdF9sb2FkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNtX2NvbnRleHRfbmV3ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTik4LigJMganNtX21vZHVsZV9uYXRpdmUgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24KICDik4IgIE1BTExPQ19PVkVSSEVBRCDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgTUFMTE9DX09WRVJIRUFEIOKApiDigJQgbWFjcm8gb2JqZWN0CuKAlOKSuOKAkyB0cmFjZV9tYWxsb2NfZGF0YSB7IOKApiB9IDsg4oCUIHR5cGUK4oCU4pK74oCTIGR1bXBfdmVjdG9yICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNtX3RyYWNlX21hbGxvY19wdHJfb2Zmc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNtX3RyYWNlX21hbGxvY191c2FibGVfc2l6ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzbV90cmFjZV9tYWxsb2NfcHJpbnRmICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNtX3RyYWNlX21hbGxvY19pbml0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNtX3RyYWNlX21hbGxvYyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzbV90cmFjZV9mcmVlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNtX3RyYWNlX3JlYWxsb2MgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCiAg4pOCICBQUk9HX05BTUUg4oCmIOKAlCBtYWNybyBvYmplY3QK4oCU4pK74oCTIGpzbV9oZWxwICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNtX2V2YWxfc2NyaXB0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNtX21vZHVsZV9mdW5jICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNtX2ltcG9ydF9wYXJzZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIG1haW4gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uAAAAAAAAAACzAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					135,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/qjs-opencv/js/cvPipeline.js",
						"symkeys":
						[
							[
								128,
								136
							],
							[
								158,
								196
							],
							[
								217,
								242
							],
							[
								1203,
								1215
							],
							[
								1511,
								1519
							],
							[
								1539,
								1558
							],
							[
								1672,
								1685
							],
							[
								1898,
								1908
							],
							[
								1952,
								1963
							],
							[
								1997,
								2001
							],
							[
								2048,
								2063
							],
							[
								2124,
								2137
							],
							[
								2273,
								2288
							],
							[
								2403,
								2422
							],
							[
								2545,
								2556
							],
							[
								2653,
								2669
							],
							[
								2771,
								2783
							],
							[
								2881,
								2899
							],
							[
								3110,
								3128
							],
							[
								3249,
								3268
							],
							[
								3580,
								3591
							],
							[
								3632,
								3661
							],
							[
								3763,
								3795
							],
							[
								3836,
								3852
							],
							[
								3951,
								3979
							],
							[
								4428,
								4437
							],
							[
								4489,
								4498
							],
							[
								4545,
								4554
							],
							[
								4570,
								4592
							],
							[
								4626,
								4644
							]
						],
						"symlist":
						[
							"Pipeline",
							"constructor(processors = [], callback)",
							"self = function(mat, end)",
							"processor =>",
							"Pipeline",
							"step(direction = 1)",
							"recalc(up_to)",
							"get size()",
							"get names()",
							"p =>",
							"get processor()",
							"get current()",
							"*imageEntries()",
							"*processorEntries()",
							"getName(id)",
							"getProcessor(id)",
							"getImage(id)",
							"processorIndex(id)",
							"inputOf(processor)",
							"outputOf(processor)",
							"get cache()",
							"invokeCallback(name, ...args)",
							" function Processor(fn, ...args)",
							"(fn, ...args) =>",
							"self = function(src, dst, i)",
							"Processor",
							"Processor",
							"Processor",
							"set functionName(name)",
							"get functionName()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACzAAAASW1hZ2VQaXBlbGluZShpbnB1dCwgY29uZmlnKQpHcmF5c2NhbGUoc3JjLCBkc3QpCk5vcm0oc3JjLCBkc3QpCkJsdXIoc3JjLCBkc3QpCkVkZ2VEZXRlY3Qoc3JjLCBkc3QpCk1vcnBoKHNyYywgZHN0KQpDb250b3VycyhzcmMsIGRzdCkKICBoID0+CkhvdWdoTGluZXMoc3JjLCBkc3QpCiAgZnVuY3Rpb24oaSwgbikAAAAAAAAAACQCAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					136,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/commands.js",
						"symkeys":
						[
							[
								890,
								933
							],
							[
								1192,
								1200
							],
							[
								1225,
								1263
							],
							[
								1542,
								1550
							],
							[
								1849,
								1861
							],
							[
								2085,
								2132
							],
							[
								2186,
								2190
							],
							[
								2226,
								2273
							],
							[
								2348,
								2395
							],
							[
								2512,
								2516
							],
							[
								2730,
								2738
							],
							[
								3002,
								3060
							],
							[
								3421,
								3429
							],
							[
								4069,
								4120
							],
							[
								4815,
								4823
							],
							[
								5507,
								5518
							],
							[
								5671,
								5710
							],
							[
								5859,
								5864
							],
							[
								6008,
								6027
							],
							[
								6577,
								6594
							],
							[
								6672,
								6689
							],
							[
								7187,
								7192
							],
							[
								7293,
								7298
							],
							[
								7408,
								7413
							],
							[
								7441,
								7446
							],
							[
								7544,
								7549
							],
							[
								7620,
								7637
							],
							[
								7667,
								7683
							],
							[
								7796,
								7812
							],
							[
								7853,
								7870
							],
							[
								7933,
								7955
							],
							[
								8028,
								8041
							],
							[
								8146,
								8162
							],
							[
								8195,
								8209
							],
							[
								8232,
								8246
							],
							[
								8548,
								8553
							],
							[
								8747,
								8752
							],
							[
								8798,
								8803
							],
							[
								8857,
								8867
							],
							[
								8878,
								8882
							],
							[
								8931,
								8935
							],
							[
								8955,
								8967
							],
							[
								9063,
								9074
							],
							[
								9194,
								9203
							],
							[
								9433,
								9440
							],
							[
								9516,
								9552
							],
							[
								9688,
								9699
							],
							[
								9799,
								9808
							],
							[
								9949,
								9960
							],
							[
								10163,
								10202
							],
							[
								10461,
								10499
							],
							[
								10864,
								10902
							],
							[
								10992,
								11044
							],
							[
								11404,
								11409
							]
						],
						"symlist":
						[
							"async function AsyncFetch(url, params = {})",
							"error =>",
							"async function ListProjects(opts = {})",
							"error =>",
							"(file, i) =>",
							"FindLayer = (name, project = window.project) =>",
							"l =>",
							"GetLayer = (layer, project = window.project) =>",
							"AddLayer = (layer, project = window.project) =>",
							"l =>",
							"value =>",
							"async function BoardToGerber(proj, opts = { fetch: true })",
							"error =>",
							"async function GerberToGcode(project, allOpts = {})",
							"error =>",
							"async () =>",
							"GcodeToPolylines = (data, opts = {}) =>",
							" g =>",
							"NewPolyline = () =>",
							" (polyline, i) =>",
							" (polyline, i) =>",
							"pl =>",
							"pl =>",
							"pl =>",
							"pt =>",
							"pl =>",
							"(polyline2, i) =>",
							"(polyline, j) =>",
							"(polyline, i) =>",
							"(polyline2, j) =>",
							"([n, j, polyline2]) =>",
							"([a], [b]) =>",
							"(polyline, i) =>",
							"([i, list]) =>",
							"([i, list]) =>",
							"ip =>",
							"pl =>",
							"id =>",
							"(pl, i) =>",
							"i =>",
							"i =>",
							"(...args) =>",
							"([i, d]) =>",
							"(p, i) =>",
							"args =>",
							" function GeneratePalette(numColors)",
							"(acc, i) =>",
							"(a, b) =>",
							"function ()",
							"async function ClearCache(match = /.*/)",
							"async function ListCache(match = /.*/)",
							"async function ShowCache(match = /.*/)",
							"async function GetCache(match = /.*/, key = 'fetch')",
							" k =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAkAgAAUGlwZWxpbmUKICBjb25zdHJ1Y3Rvcihwcm9jZXNzb3JzID0gW10sIGNhbGxiYWNrKQogIHNlbGYgPSBmdW5jdGlvbihtYXQsIGVuZCkKICBwcm9jZXNzb3IgPT4KUGlwZWxpbmUKICBzdGVwKGRpcmVjdGlvbiA9IDEpCiAgcmVjYWxjKHVwX3RvKQogIGdldCBzaXplKCkKICBnZXQgbmFtZXMoKQogIHAgPT4KICBnZXQgcHJvY2Vzc29yKCkKICBnZXQgY3VycmVudCgpCippbWFnZUVudHJpZXMoKQoqcHJvY2Vzc29yRW50cmllcygpCiAgZ2V0TmFtZShpZCkKICBnZXRQcm9jZXNzb3IoaWQpCiAgZ2V0SW1hZ2UoaWQpCiAgcHJvY2Vzc29ySW5kZXgoaWQpCiAgaW5wdXRPZihwcm9jZXNzb3IpCiAgb3V0cHV0T2YocHJvY2Vzc29yKQogIGdldCBjYWNoZSgpCiAgaW52b2tlQ2FsbGJhY2sobmFtZSwgLi4uYXJncykKUHJvY2Vzc29yKGZuLCAuLi5hcmdzKQooZm4sIC4uLmFyZ3MpID0+CiAgc2VsZiA9IGZ1bmN0aW9uKHNyYywgZHN0LCBpKQpQcm9jZXNzb3IKUHJvY2Vzc29yClByb2Nlc3NvcgogIHNldCBmdW5jdGlvbk5hbWUobmFtZSkKICBnZXQgZnVuY3Rpb25OYW1lKCkAAAAAAAAAAKADAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					137,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACgAwAAQXN5bmNGZXRjaCh1cmwsIHBhcmFtcyA9IHt9KQogIGVycm9yID0+Ckxpc3RQcm9qZWN0cyhvcHRzID0ge30pCiAgZXJyb3IgPT4KKGZpbGUsIGkpID0+CkZpbmRMYXllciA9IChuYW1lLCBwcm9qZWN0ID0gd2luZG93LnByb2plY3QpID0+CiAgbCA9PgpHZXRMYXllciA9IChsYXllciwgcHJvamVjdCA9IHdpbmRvdy5wcm9qZWN0KSA9PgpBZGRMYXllciA9IChsYXllciwgcHJvamVjdCA9IHdpbmRvdy5wcm9qZWN0KSA9PgogIGwgPT4KICB2YWx1ZSA9PgpCb2FyZFRvR2VyYmVyKHByb2osIG9wdHMgPSB7IGZldGNoOiB0cnVlIH0pCiAgZXJyb3IgPT4KR2VyYmVyVG9HY29kZShwcm9qZWN0LCBhbGxPcHRzID0ge30pCiAgZXJyb3IgPT4KKCkgPT4KR2NvZGVUb1BvbHlsaW5lcyA9IChkYXRhLCBvcHRzID0ge30pID0+CiAgZyA9PgpOZXdQb2x5bGluZSA9ICgpID0+CiAgKHBvbHlsaW5lLCBpKSA9PgogIChwb2x5bGluZSwgaSkgPT4KICBwbCA9PgogIHBsID0+CiAgcGwgPT4KICBwdCA9PgogIHBsID0+Cihwb2x5bGluZTIsIGkpID0+Cihwb2x5bGluZSwgaikgPT4KKHBvbHlsaW5lLCBpKSA9PgoocG9seWxpbmUyLCBqKSA9PgooW24sIGosIHBvbHlsaW5lMl0pID0+CihbYV0sIFtiXSkgPT4KKHBvbHlsaW5lLCBpKSA9PgooW2ksIGxpc3RdKSA9PgooW2ksIGxpc3RdKSA9PgogIGlwID0+CiAgcGwgPT4KICBpZCA9PgoocGwsIGkpID0+CiAgaSA9PgogIGkgPT4KKC4uLmFyZ3MpID0+CihbaSwgZF0pID0+CihwLCBpKSA9PgogIGFyZ3MgPT4KR2VuZXJhdGVQYWxldHRlKG51bUNvbG9ycykKKGFjYywgaSkgPT4KKGEsIGIpID0+CigpCkNsZWFyQ2FjaGUobWF0Y2ggPSAvLiovKQpMaXN0Q2FjaGUobWF0Y2ggPSAvLiovKQpTaG93Q2FjaGUobWF0Y2ggPSAvLiovKQpHZXRDYWNoZShtYXRjaCA9IC8uKi8sIGtleSA9ICdmZXRjaCcpCiAgayA9PgAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					138,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/main.js",
						"symkeys":
						[
							[
								8582,
								8587
							],
							[
								8769,
								8775
							],
							[
								8833,
								8838
							],
							[
								8891,
								8895
							],
							[
								8969,
								8973
							],
							[
								8995,
								9004
							],
							[
								9663,
								9682
							],
							[
								9785,
								9789
							],
							[
								10163,
								10187
							],
							[
								10228,
								10249
							],
							[
								10251,
								10256
							],
							[
								10264,
								10269
							],
							[
								10291,
								10326
							],
							[
								10440,
								10458
							],
							[
								10540,
								10545
							],
							[
								10737,
								10758
							],
							[
								10891,
								10909
							],
							[
								11588,
								11613
							],
							[
								11659,
								11677
							],
							[
								12653,
								12680
							],
							[
								13035,
								13060
							],
							[
								13399,
								13433
							],
							[
								13949,
								13981
							],
							[
								14156,
								14166
							],
							[
								14299,
								14309
							],
							[
								14432,
								14442
							],
							[
								14609,
								14633
							],
							[
								14692,
								14741
							],
							[
								14982,
								15004
							],
							[
								15011,
								15035
							],
							[
								15043,
								15072
							],
							[
								15653,
								15705
							],
							[
								16158,
								16162
							],
							[
								16189,
								16194
							],
							[
								16629,
								16715
							],
							[
								16913,
								16935
							],
							[
								17448,
								17480
							],
							[
								17808,
								17842
							],
							[
								17957,
								17962
							],
							[
								17987,
								18023
							],
							[
								18212,
								18237
							],
							[
								18428,
								18453
							],
							[
								18508,
								18512
							],
							[
								18567,
								18571
							],
							[
								19018,
								19035
							],
							[
								19229,
								19244
							],
							[
								19367,
								19384
							],
							[
								19436,
								19440
							],
							[
								19485,
								19489
							],
							[
								19520,
								19524
							],
							[
								19567,
								19572
							],
							[
								19659,
								19678
							],
							[
								19893,
								19928
							],
							[
								19966,
								19974
							],
							[
								20043,
								20047
							],
							[
								20610,
								20614
							],
							[
								20673,
								20677
							],
							[
								21263,
								21269
							],
							[
								21444,
								21448
							],
							[
								21469,
								21473
							],
							[
								21508,
								21512
							],
							[
								21777,
								21790
							],
							[
								21918,
								21922
							],
							[
								22116,
								22132
							],
							[
								22398,
								22403
							],
							[
								22516,
								22525
							],
							[
								22597,
								22606
							],
							[
								22683,
								22692
							],
							[
								23332,
								23354
							],
							[
								23531,
								23591
							],
							[
								23840,
								23860
							],
							[
								23871,
								23880
							],
							[
								23935,
								23947
							],
							[
								23992,
								23999
							],
							[
								24085,
								24116
							],
							[
								24438,
								24471
							],
							[
								25526,
								25579
							],
							[
								25630,
								25643
							],
							[
								25725,
								25768
							],
							[
								25847,
								25851
							],
							[
								25980,
								25987
							],
							[
								26014,
								26021
							],
							[
								26099,
								26120
							],
							[
								26392,
								26434
							],
							[
								26557,
								26578
							],
							[
								26822,
								26867
							],
							[
								27060,
								27130
							],
							[
								27567,
								27592
							],
							[
								27615,
								27619
							],
							[
								27639,
								27652
							],
							[
								27768,
								27840
							],
							[
								28149,
								28158
							],
							[
								28590,
								28655
							],
							[
								28742,
								28768
							],
							[
								29014,
								29039
							],
							[
								29062,
								29066
							],
							[
								29086,
								29099
							],
							[
								29153,
								29209
							],
							[
								29211,
								29217
							],
							[
								29226,
								29228
							],
							[
								29253,
								29260
							],
							[
								29284,
								29378
							],
							[
								29385,
								29409
							],
							[
								29472,
								29499
							],
							[
								29508,
								29528
							],
							[
								29663,
								29667
							],
							[
								29854,
								29873
							],
							[
								29957,
								29976
							],
							[
								30069,
								30084
							],
							[
								30974,
								30989
							],
							[
								31080,
								31095
							],
							[
								31767,
								31808
							],
							[
								32013,
								32017
							],
							[
								32047,
								32058
							],
							[
								32141,
								32161
							],
							[
								32424,
								32448
							],
							[
								32506,
								32546
							],
							[
								32918,
								32937
							],
							[
								32988,
								33007
							],
							[
								33869,
								33897
							],
							[
								34102,
								34114
							],
							[
								34145,
								34157
							],
							[
								34668,
								34716
							],
							[
								34941,
								34947
							],
							[
								35097,
								35102
							],
							[
								35128,
								35135
							],
							[
								35198,
								35203
							],
							[
								35231,
								35238
							],
							[
								35871,
								35887
							],
							[
								36010,
								36014
							],
							[
								36522,
								36530
							],
							[
								36973,
								36981
							],
							[
								37034,
								37039
							],
							[
								37080,
								37088
							],
							[
								37228,
								37233
							],
							[
								37320,
								37336
							],
							[
								39012,
								39017
							],
							[
								39650,
								39701
							],
							[
								40109,
								40114
							],
							[
								40133,
								40138
							],
							[
								40446,
								40463
							],
							[
								40639,
								40645
							],
							[
								40793,
								40813
							],
							[
								40890,
								40920
							],
							[
								41096,
								41104
							],
							[
								41208,
								41219
							],
							[
								41335,
								41339
							],
							[
								42076,
								42117
							],
							[
								42740,
								42763
							],
							[
								43352,
								43356
							],
							[
								43500,
								43504
							],
							[
								44016,
								44020
							],
							[
								44035,
								44065
							],
							[
								44113,
								44117
							],
							[
								44131,
								44161
							],
							[
								44215,
								44219
							],
							[
								44238,
								44262
							],
							[
								44327,
								44331
							],
							[
								44371,
								44395
							],
							[
								44512,
								44516
							],
							[
								44542,
								44546
							],
							[
								44616,
								44620
							],
							[
								44646,
								44650
							],
							[
								44743,
								44747
							],
							[
								45105,
								45140
							],
							[
								45251,
								45264
							],
							[
								45705,
								45745
							],
							[
								45796,
								45805
							],
							[
								45826,
								45837
							],
							[
								45929,
								45940
							],
							[
								45986,
								46042
							],
							[
								46049,
								46055
							],
							[
								46137,
								46157
							],
							[
								46204,
								46262
							],
							[
								46269,
								46275
							],
							[
								46318,
								46325
							],
							[
								46342,
								46363
							],
							[
								46425,
								46436
							],
							[
								46666,
								46684
							],
							[
								46724,
								46730
							],
							[
								46763,
								46791
							],
							[
								46829,
								46851
							],
							[
								46936,
								46960
							],
							[
								46961,
								46975
							],
							[
								48097,
								48130
							],
							[
								48139,
								48140
							],
							[
								48192,
								48216
							],
							[
								48257,
								48288
							],
							[
								48297,
								48298
							],
							[
								48542,
								48585
							],
							[
								48904,
								48931
							],
							[
								49225,
								49244
							],
							[
								49457,
								49473
							],
							[
								49797,
								49817
							],
							[
								50712,
								50759
							],
							[
								51142,
								51157
							],
							[
								51374,
								51387
							],
							[
								51664,
								51677
							],
							[
								51883,
								51896
							],
							[
								52120,
								52126
							],
							[
								52176,
								52197
							],
							[
								55932,
								55943
							],
							[
								56779,
								56783
							],
							[
								57232,
								57237
							],
							[
								57391,
								57405
							],
							[
								57428,
								57433
							],
							[
								57546,
								57567
							],
							[
								57625,
								57630
							],
							[
								57738,
								57759
							],
							[
								57984,
								57997
							],
							[
								57998,
								58025
							],
							[
								58142,
								58165
							],
							[
								58447,
								58462
							],
							[
								58487,
								58504
							],
							[
								58571,
								58579
							],
							[
								58652,
								58657
							],
							[
								58763,
								58787
							],
							[
								59426,
								59453
							],
							[
								59549,
								59553
							],
							[
								59952,
								59988
							],
							[
								60082,
								60091
							],
							[
								60126,
								60137
							],
							[
								60189,
								60203
							],
							[
								60788,
								60792
							],
							[
								61477,
								61485
							],
							[
								61601,
								61609
							],
							[
								61729,
								61737
							],
							[
								61852,
								61860
							],
							[
								61917,
								61925
							],
							[
								62397,
								62405
							],
							[
								62590,
								62637
							],
							[
								62783,
								62796
							],
							[
								62959,
								62977
							],
							[
								63145,
								63149
							],
							[
								63221,
								63228
							],
							[
								63476,
								63495
							],
							[
								63527,
								63545
							],
							[
								64071,
								64091
							],
							[
								64416,
								64433
							],
							[
								64641,
								64659
							],
							[
								64936,
								64959
							],
							[
								65410,
								65427
							],
							[
								65519,
								65527
							],
							[
								65746,
								65760
							],
							[
								65943,
								65983
							],
							[
								66048,
								66062
							],
							[
								66637,
								66653
							],
							[
								66691,
								66766
							],
							[
								67011,
								67032
							],
							[
								67141,
								67145
							],
							[
								67624,
								67638
							],
							[
								67928,
								67932
							],
							[
								68004,
								68008
							],
							[
								68290,
								68307
							],
							[
								68475,
								68483
							],
							[
								68681,
								68685
							],
							[
								68781,
								68796
							],
							[
								69042,
								69046
							],
							[
								69253,
								69270
							],
							[
								69362,
								69377
							],
							[
								70175,
								70187
							],
							[
								70194,
								70207
							],
							[
								70245,
								70260
							],
							[
								70364,
								70384
							],
							[
								70564,
								70591
							],
							[
								70645,
								70657
							],
							[
								70775,
								70783
							],
							[
								71232,
								71240
							],
							[
								72062,
								72071
							],
							[
								72306,
								72313
							],
							[
								72412,
								72432
							],
							[
								72619,
								72639
							],
							[
								73005,
								73015
							],
							[
								73818,
								73822
							],
							[
								73897,
								73901
							],
							[
								73915,
								73929
							],
							[
								74186,
								74193
							],
							[
								76583,
								76615
							],
							[
								77012,
								77016
							],
							[
								77222,
								77226
							],
							[
								77294,
								77298
							],
							[
								77382,
								77389
							],
							[
								77468,
								77472
							],
							[
								78546,
								78592
							],
							[
								79027,
								79036
							],
							[
								80922,
								80940
							],
							[
								81138,
								81161
							],
							[
								81203,
								81218
							],
							[
								81574,
								81589
							],
							[
								82002,
								82022
							],
							[
								82480,
								82498
							],
							[
								83214,
								83223
							],
							[
								83266,
								83270
							],
							[
								83482,
								83520
							],
							[
								83695,
								83718
							],
							[
								83862,
								83867
							],
							[
								83906,
								83916
							],
							[
								84080,
								84084
							],
							[
								84231,
								84235
							],
							[
								84274,
								84279
							],
							[
								84684,
								84688
							],
							[
								84727,
								84741
							],
							[
								84745,
								84759
							],
							[
								84766,
								84770
							],
							[
								84791,
								84806
							],
							[
								84837,
								84851
							],
							[
								84963,
								84974
							],
							[
								85024,
								85029
							],
							[
								85089,
								85094
							],
							[
								85549,
								85559
							],
							[
								85673,
								85690
							],
							[
								85703,
								85707
							],
							[
								85888,
								85892
							],
							[
								86053,
								86074
							],
							[
								87172,
								87176
							],
							[
								87282,
								87286
							],
							[
								87580,
								87608
							],
							[
								88059,
								88063
							],
							[
								88519,
								88528
							],
							[
								88612,
								88621
							],
							[
								88725,
								88733
							],
							[
								89239,
								89248
							],
							[
								89397,
								89401
							],
							[
								89466,
								89492
							],
							[
								90137,
								90142
							],
							[
								90449,
								90480
							],
							[
								91517,
								91538
							],
							[
								91743,
								91771
							],
							[
								92138,
								92181
							],
							[
								93511,
								93520
							],
							[
								94400,
								94404
							],
							[
								95144,
								95171
							],
							[
								95294,
								95307
							]
						],
						"symlist":
						[
							"() =>",
							"res =>",
							"() =>",
							"r =>",
							"r =>",
							"entries()",
							"GetProject = arg =>",
							"p =>",
							"add = (arr, ...items) =>",
							"useSlot = (arr, i) =>",
							"() =>",
							" v =>",
							"trklGetSet = (get, set) => value =>",
							"MouseEvents = h =>",
							"() =>",
							"(parent, delegate) =>",
							"append_to(elem, p)",
							"function DrawSVG(...args)",
							"append_to(elem, p)",
							" function adjustViewBox(e)",
							"function calcViewBox(box)",
							"function setViewBox(svgOwner, box)",
							"ElementToXML = (e, predicate) =>",
							" (v, k) =>",
							" (v, k) =>",
							" (v, k) =>",
							"async readFile(filename)",
							"async writeFile(filename, data, overwrite = true)",
							"async exists(filename)",
							"async realpath(filename)",
							"async function LoadFile(file)",
							"async function SaveFile(filename, data, contentType)",
							"s =>",
							"() =>",
							"async function SaveSVG(filename, layers = [1, 16, 20, 21, 22, 23, 25, 27, 47, 48, 51])",
							"predicate = element =>",
							"async function LoadSVG(filename)",
							"async function LoadImage(filename)",
							"() =>",
							" function RenderComponent(component)",
							"ModifyColors = fn => e =>",
							"FindLayer = name_or_id =>",
							"n =>",
							"l =>",
							"(id = '#geom') =>",
							"(props = {}) =>",
							"maxZIndex = () =>",
							"e =>",
							"z =>",
							"z =>",
							"() =>",
							"randomColor = () =>",
							"function DrawArc(start, end, angle)",
							"props =>",
							"p =>",
							"a =>",
							"m =>",
							"hex =>",
							"p =>",
							"p =>",
							"p =>",
							"({ x, y }) =>",
							"a =>",
							"({ x, y }, i) =>",
							" e =>",
							"(l, i) =>",
							"(p, i) =>",
							"(p, i) =>",
							"add = (level, item) =>",
							" function RecurseBinaryNode(node, parent = null, depth = 0)",
							"(nodes, i, level) =>",
							"fx = j =>",
							"(node, j) =>",
							"item =>",
							" function DrawNode(x, y, node)",
							" function DrawEdge(item, parent)",
							"function GetPaths(query, parent = project.svgElement)",
							" (a, e) =>",
							"function PathToPolylines(path, step = 0.01)",
							"p =>",
							"poly =>",
							"poly =>",
							" (p, d, set, stop) =>",
							"function PathToPolyline(path, step = 0.01)",
							" (p, d, set, stop) =>",
							"function PathsToPolylines(paths, step = 0.01)",
							"function OutsetPath(path, offset, miterLimit = 2, arcTolerance = 0.01)",
							".toPolylines = function()",
							"p =>",
							"({ X, Y }) =>",
							"function OutsetPaths(paths, offset, miterLimit = 2, arcTolerance = 0.25)",
							"(a, p) =>",
							"function ClipPath(path, clip, mode = ClipperLib.ClipType.ctUnion)",
							"add = (p, clip = false) =>",
							".toPolylines = function()",
							"p =>",
							"({ X, Y }) =>",
							"function saveItemStates(itemList, get = item => Util.is.",
							"(item.",
							"))",
							"item =>",
							"function restoreItemStates( itemStates, /* prettier-ignore */ set = (item, value) => item.",
							"(value ? 'yes' : 'no') )",
							"function EagleMaps(project)",
							"transformPath = p =>",
							"e =>",
							"dom2eagle = node =>",
							"eagle2dom = elem =>",
							"path2dom = p =>",
							"(key, value) =>",
							"(key, value) =>",
							"function* PackageNames(doc = project.doc)",
							"e =>",
							"([e, b]) =>",
							"([e, w, h, m, v]) =>",
							"({ index, ...match }) =>",
							" ({ s, v, indexes }, match, i) =>",
							"([token, index]) =>",
							"([token, index]) =>",
							"function NextDocument(n = 1)",
							" (idx, i) =>",
							" (idx, i) =>",
							"async function LoadDocument(project, parentElem)",
							"err =>",
							"() =>",
							" ent =>",
							"() =>",
							" ent =>",
							"renamePackages()",
							"a =>",
							"value =>",
							"layer =>",
							"() =>",
							"layer =>",
							"() =>",
							"fn = function(v)",
							"() =>",
							".makeGroup = function({ transform, ...props } = {})",
							"id =>",
							"() =>",
							" function xx()",
							" () =>",
							"function (transform)",
							" (tag, attr, children = []) =>",
							"value =>",
							"async () =>",
							"Rect",
							"async function ChooseDocument(project, i)",
							"GenerateVoronoi = () =>",
							"Rect",
							"p =>",
							"e =>",
							"({ lSite, rSite, ...edge }) =>",
							"e =>",
							"({ lSite, rSite, ...edge }) =>",
							"e =>",
							"({ va, vb, ...edge }) =>",
							"v =>",
							"add = (arr, ...items) =>",
							"l =>",
							"t =>",
							"l =>",
							"t =>",
							"p =>",
							" (acc, { site, halfedges }) =>",
							"({ site }) =>",
							"function PackageChildren(element, layer)",
							"(c, i) =>",
							"([i, p]) =>",
							"([i, e]) =>",
							"function ElementChildren(layer = 'tPlace', rfn = ent => ",
							"(ent))",
							"([name, element]) =>",
							"function ElementGeometries(layer = 'tPlace', rfn = ent => ",
							"(ent))",
							" ent =>",
							"([name, children]) =>",
							"([i, e]) =>",
							"([name, lines]) =>",
							"pts =>",
							"([name, lines, polygons]) =>",
							"function NewPath(path)",
							"MakeFitAction = index =>",
							"async event =>",
							"function ZoomFactor(val = config.",
							")",
							"function ZoomLog(factor)",
							"function AdjustZoom(l = config.",
							")",
							"CreateGrblSocket = async (port = 'tnt1') =>",
							"function HandleMessage(msg)",
							" pointStr =>",
							"socketFn = () =>",
							".send = (...args) =>",
							"AuthorizationDialog = ({ onAuth, ...props }) =>",
							"onSubmit: () =>",
							"onInput: e =>",
							"onInput: e =>",
							"onClick: e =>",
							"arg =>",
							".onload = async () =>",
							"response =>",
							"e =>",
							" v =>",
							"TestArc: () =>",
							"() =>",
							"async (push, stop) =>",
							"() =>",
							"async (push, stop) =>",
							" target =>",
							" (key, modifiers = 0) =>",
							".focusSearch = state =>",
							"children: () =>",
							"geometries: () =>",
							"value =>",
							"() =>",
							"testComponent = props =>",
							" function File(obj, i)",
							"File",
							"File.prototype.toString = function()",
							"(a, b) =>",
							"(obj, i) =>",
							"(acc, file) =>",
							"i =>",
							"value =>",
							"value =>",
							"value =>",
							"value =>",
							"value =>",
							"value =>",
							"updateIfChanged = (trkl, newValue, callback) =>",
							" (elem, i) =>",
							"changeInput = e =>",
							"p =>",
							" arg =>",
							"Consumer = props =>",
							"async function* ()",
							"log(type, time, msg)",
							"Logger = props =>",
							"async function* ()",
							"([type, d, t, m], i) =>",
							"Dumper = props =>",
							"value =>",
							"([k, v], i) =>",
							"Commander = ({ onCommand, ...props }) =>",
							"handler = e =>",
							"toggle = trkl =>",
							"Layer = ({ title, name, label, i, color, element, className, ...props }) =>",
							"setVisible = value =>",
							"e =>",
							" e =>",
							"l =>",
							"l =>",
							" (item, value) =>",
							" item =>",
							"l =>",
							"([l, state]) =>",
							"e =>",
							"onMouseMove: e =>",
							"onMouseUp: e =>",
							"DocumentList",
							"constructor()",
							"(push, stop) =>",
							"add(name, component)",
							"addEntry([name, component])",
							"remove(name)",
							"update()",
							"fn: e =>",
							"fn: () =>",
							"open =>",
							" props =>",
							" props =>",
							"async e =>",
							"i =>",
							"i =>",
							"({ coord }) =>",
							"side =>",
							"create: (project, props = {}) =>",
							"a =>",
							"e =>",
							"e =>",
							"name =>",
							"e =>",
							" function makeLayerName(name, side)",
							"fn: () =>",
							"async (e, p, i) =>",
							"makeSortCompare: key =>",
							" function(a, b)",
							" function(a, b)",
							"onCommand: cmdStr =>",
							"handleChange: e =>",
							" event =>",
							"e =>",
							" function MoveEvent(event, prevEvent)",
							" function* WalkUp(e)",
							" e =>",
							" z =>",
							"p =>",
							"e =>",
							" e =>",
							"e =>",
							" v =>",
							" l =>",
							"e =>",
							" () =>",
							" (e, depth) =>",
							" classes =>",
							" e =>",
							" e =>",
							" (a, b) =>",
							" (a, b) =>",
							"Node",
							"e =>",
							" (p, d, set, stop) =>",
							"e =>",
							"e =>",
							" function TouchEvent(event)",
							"e =>",
							"(p, i) =>",
							"(a, b) =>",
							" size =>",
							"border =>",
							"r =>",
							" function mod(n, m)",
							"() =>",
							" (pos, last, first) =>",
							" function cancel()",
							".oncontextmenu = function(e)",
							".processEvents = async function eventLoop()",
							" event =>",
							"e =>",
							"onRuntimeInitialized: () =>",
							"print: txt =>"
						]
					},
					"AQAAAAAAAAAAAAAAnhUAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "commands.js",
			"settings":
			{
				"buffer_size": 12032,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "main.js",
			"settings":
			{
				"buffer_size": 95344,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"fo",
				"Format CSS: Expanded"
			],
			[
				"forma",
				"Format CSS: Expanded"
			],
			[
				"css",
				"Format CSS: Expanded"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"tidy",
				"Tidy CSS"
			],
			[
				"edut ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"build",
				"Build With: prettier ${file_path}"
			],
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"",
				"Bookmarks: Select Previous"
			],
			[
				"schem",
				"Schemr: Random scheme"
			],
			[
				"extra",
				"Extract Sublime Package: Extract all packages"
			],
			[
				"Package Control: ",
				"Package Control: List Packages"
			],
			[
				"extrac",
				"Extract Sublime Package: Extract all packages"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"packa",
				"Install Package Control"
			],
			[
				"prett",
				"Build With: prettier"
			],
			[
				"edit",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"schemeed",
				"SchemeEditor: Edit Scheme (file picker)"
			],
			[
				"scheme",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"repo",
				"Package Control: Remove Repository"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"upgra",
				"Package Control: Upgrade Package"
			],
			[
				"install ",
				"Package Control: Install Package"
			],
			[
				"adv",
				"Package Control: Advanced Install Package"
			],
			[
				"ad",
				"Package Control: Advanced Install Package"
			],
			[
				"adva",
				"Package Control: Advanced Install Package"
			],
			[
				"edi",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"edit ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"remove pac",
				"Package Control: Remove Package"
			],
			[
				"outl",
				"Browse Mode: Outline (Right)"
			],
			[
				"debugger",
				"Debugger: Add or Select Configuration"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 442.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv",
		"/home/roman/Projects/plot-cv/qjs-opencv"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/qjs-opencv/js/cvPipeline.js",
		"/home/roman/Projects/plot-cv/imagePipeline.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/qjsm.c",
		"/home/roman/Projects/plot-cv/qjs-opencv/js/cvVideo.js",
		"/home/roman/Projects/plot-cv/lib/util.js",
		"/home/roman/Projects/plot-cv/test-video.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/js/cvHighGUI.js",
		"/home/roman/Projects/plot-cv/test-cv.js",
		"/home/roman/Projects/plot-cv/lib/geom/align.js",
		"/home/roman/Projects/plot-cv/lib/geom/rect.js",
		"/home/roman/Projects/plot-cv/components.js",
		"/home/roman/Projects/plot-cv/test-image.js",
		"/home/roman/Projects/plot-cv/main.js",
		"/home/roman/Projects/plot-cv/ast-shell.js",
		"/home/roman/Projects/plot-cv/inotify_event.js",
		"/home/roman/Projects/plot-cv/clang-ast.js",
		"/home/roman/Projects/plot-cv/plot-cv.sublime-project",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_point.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/palette.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/geometry.hpp",
		"/home/roman/Projects/plot-cv/lib/repeater/repeater.js",
		"/home/roman/Projects/plot-cv/plot-cv/test-voronoi.js",
		"/home/roman/Projects/plot-cv/quickjs/README.md",
		"/home/roman/Projects/plot-cv/quickjs/readme.txt",
		"/home/roman/Projects/plot-cv/lib/hooks/useTrkl.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_point.hpp",
		"/home/roman/Projects/plot-cv/io-helpers.js",
		"/home/roman/Projects/plot-cv/lib/geom/point.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/skeletonization.hpp",
		"/home/roman/Projects/plot-cv/commands.js",
		"/home/roman/Projects/plot-cv/server.js",
		"/home/roman/Projects/plot-cv/package.json",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_cv.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/gif_write.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/tests/test_gif.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/png_write.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/dominant-colors/DomColors.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/dominant_colors_grabber.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_imgproc.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/dominant_colors_grabber.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/qjs-opencv/gifenc/example.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/console.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/util.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/dominant-colors/DomColors.h",
		"/home/roman/Projects/plot-cv/qjs-opencv/dominant-colors/.git",
		"/home/roman/Projects/plot-cv/image-helpers.js",
		"/home/roman/Projects/plot-cv/test-eagle.js",
		"/home/roman/Projects/plot-cv/test-ecmascript2.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_mat.cpp",
		"/home/roman/Projects/plot-cv/test-video.config.json",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_contour.hpp",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/utils.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/qjs-opencv/jsbindings.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_array.hpp",
		"/home/roman/Projects/plot-cv/test-repeater.js",
		"/home/roman/Projects/qjs-opencv/js_umat.hpp",
		"/home/roman/Projects/plot-cv/test-opencv.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_typed_array.hpp",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-mmap.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.c",
		"/home/roman/Projects/plot-cv/cv-shell.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-internal.h",
		"/home/roman/Projects/plot-cv/quickjs/list.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-xml.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
		"/home/roman/Projects/plot-cv/qjs-opencv/cmake/FindOpenCV.cmake",
		"/home/roman/Projects/plot-cv/test-xml.js",
		"/home/roman/Projects/plot-cv/webSocket.js",
		"/home/roman/Projects/plot-cv/lib/repeater/timers.js",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-libc.c",
		"/home/roman/Projects/plot-cv/qjs-modules/lib/terminal.js",
		"/home/roman/Projects/plot-cv/convert-imports.js",
		"/home/roman/Projects/plot-cv/clang-list.js",
		"/home/roman/Projects/plot-cv/lib/ecmascript/estree.js",
		"/home/roman/Projects/plot-cv/resolve-imports.js",
		"/home/roman/Projects/plot-cv/test-readdir.js",
		"/home/roman/Projects/plot-cv/RecursiveIterator.js",
		"/home/roman/Projects/plot-cv/lib/png.js",
		"/home/roman/Projects/plot-cv/lib/jpegSize.js",
		"/home/roman/Projects/plot-cv/lib/jpeg.js",
		"/home/roman/Projects/plot-cv/lib/image-info.js",
		"/home/roman/Projects/plot-cv/lib/image-size.js",
		"/home/roman/Projects/plot-cv/lib/repeater/limiters.js",
		"/home/roman/Projects/plot-cv/lib/repeater/pubsub.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/repl.js",
		"/home/roman/Projects/plot-cv/debugger.js",
		"/home/roman/Projects/plot-cv/lib/repeater/repeater.ts",
		"/home/roman/Projects/plot-cv/plot-cv/cv-shell.js",
		"/home/roman/Projects/plot-cv/eagle-shell.js",
		"/home/roman/Projects/plot-cv/userscript-build.js",
		"/home/roman/Projects/plot-cv/debugger-server.js",
		"/home/roman/Projects/plot-cv/test-svgpath.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_misc.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/test-lexer.js",
		"/home/roman/Projects/plot-cv/test-bpg.html",
		"/home/roman/Projects/plot-cv/test-call.js",
		"/home/roman/Projects/plot-cv/output-267.svg",
		"/home/roman/Projects/plot-cv/noise.js",
		"/home/roman/Projects/plot-cv/dump-structs.js",
		"/home/roman/Projects/plot-cv/debuggerprotocol.js",
		"/home/roman/Projects/plot-cv/list-proxies.js",
		"/home/roman/Projects/plot-cv/lib.js",
		"/home/roman/Projects/plot-cv/jsobjstruct.c",
		"/home/roman/Projects/plot-cv/example_gl2.c",
		"/home/roman/Projects/plot-cv/debugger.html",
		"/home/roman/Projects/plot-cv/lib/svg/path.js",
		"/home/roman/Projects/plot-cv/undefinedundefined63undefined",
		"/home/roman/Projects/plot-cv/qjs-opencv/jsbindings.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_contour.cpp",
		"/home/roman/Projects/plot-cv/opencv/disabled/code10-3.cpp",
		"/home/roman/Projects/plot-cv/lib/dom/svg.js",
		"/home/roman/Projects/plot-cv/lib/svg/path-parser.js",
		"/home/roman/Projects/plot-cv/test.js",
		"/home/roman/Projects/plot-cv/test-clipper.js",
		"/home/roman/Projects/plot-cv/debugger-client.js",
		"/home/roman/Projects/plot-cv/src/simple_svg_writer.hpp",
		"/home/roman/Projects/plot-cv/lib/eagle/svgRenderer.js",
		"/home/roman/Projects/plot-cv/static/svg/player-symbols.svg",
		"/home/roman/Projects/plot-cv/restart.svg",
		"/home/roman/Projects/plot-cv/stop.svg",
		"/home/roman/Projects/plot-cv/static/debugger.css",
		"/home/roman/Projects/plot-cv/lib/misc.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.c"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 118.0,
		"where_history":
		[
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,,-*/libwebsockets/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/build-*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,,-*/libwebsockets/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/build-*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/build-*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,-*/indexex*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/indexex*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/indexex/*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnoed*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/qjs-cache*/*,-*/txiki*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,*/quickjs-2*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs/*,-*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,*.cmake,-*/node_modules/*,-*/quickjs/*,-*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs/*,-*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp",
			"/home/roman/Projects/plot-cv,*.js,*.cpp,*.hpp,-*/node_modules/*,-*/quickjs/*,-*/acorn/*",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs/*,-*/acorn/*",
			"/home/roman/Projects/plot-cv,/home/roman/Projects/plot-cv/lib,*.js,-*/node_modules/*,-*/quickjs/*,-*/acorn/*",
			"/home/roman/Projects/plot-cv,/home/roman/Projects/plot-cv/lib,*.js,-*/node_modules/*,-*/quickjs/*",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs/*",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*",
			"/home/roman/Projects/plot-cv,*.js",
			"/home/roman/Projects/plot-cv/quickjs,*.c,*.h",
			"/home/roman/Projects/plot-cv/src,*.cpp,*.hpp",
			"/home/roman/Projects/plot-cv/quickjs,*.c,*.h"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"align",
			"CCimage",
			"resize",
			"fromImages",
			"input",
			"'ImageSize",
			"seq\\.size",
			"FAIL:",
			"ImageSize",
			"dst",
			"firstSize",
			"dst0Size",
			"videoSize",
			"video\\.",
			"videos",
			"ImageSequence",
			"fetch",
			"'/save'",
			"save'",
			"Compile\\(",
			"args",
			"SpawnCom",
			"SpawnCm",
			"-I",
			"'I'",
			"'-I'",
			"'-I?",
			"'-I'",
			"-I",
			"document",
			"global\\.",
			"outputName",
			"ResponseData",
			"dirs\\[",
			"dirs =",
			"'Request",
			"data'",
			"LoadFile",
			"LoadDoc",
			"file,",
			"file:",
			"POST files",
			"main",
			"fs\\.",
			"fsPromises",
			"\\.read",
			"post",
			"readdir",
			"safeStat",
			"filesystem",
			"fsProm",
			"\\.read",
			"fsProm",
			"readFile",
			"fsProm",
			"getDescription",
			"fsPromises",
			"open",
			"fs\\.promises",
			"fs.promises",
			"'req'",
			"'req",
			"dirs =",
			"names",
			"app.use",
			"util",
			"runMount",
			"getIterators",
			"GetFilesList",
			"files",
			"'data'",
			"POINT_METHOD_NORM",
			"fromAngle",
			"\\n\\n\\n",
			"^}$",
			"std::vector",
			"C<",
			"gif_write",
			"join",
			"paletteApply",
			"js_error_print",
			"Failed loading",
			"fs.open",
			"console.log",
			"'unhandled'",
			"'dst'",
			"invert",
			"JS_EValFunction",
			"js_color_read",
			"'s'",
			"over",
			"'s'",
			"Timers",
			"js_import_load",
			"import.*repl",
			"rec->MOdule_Func",
			"resolved",
			"jsm_module_loader",
			"xml",
			"jsm_module_load\\(",
			"xml",
			"jsm_module_extern_native",
			"xml",
			"ctx =",
			"jsm_init_modules",
			"js_xml_Init",
			"jsm_module_load\\(",
			"jsm_module_load",
			"LOAD_MODULE:",
			"JS_SYNTAX_ERROR",
			"Syntax.?error",
			"Syntax.*error",
			"SyntaxError",
			"native_error_name",
			"\"SyntaxError",
			"js_mat_tostring_",
			"js_mat_tostring_tag",
			"js_mat_inspect",
			"ReadDirRecursive",
			"waitFor",
			"waitFOr",
			"Util\\.waitFor",
			"import.*util.js",
			"repeater",
			"enerator",
			"__generator",
			"step",
			" resolve\\("
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"input.",
			"'save'",
			"globalThis.",
			"fsPromises",
			"\\n\\n",
			"}\\n",
			"vector",
			"std::vector<",
			"log.info",
			"waitFor",
			"'",
			"'\\\\x\\1'",
			"'\\x\\1'",
			"200",
			"120",
			"out += ",
			"",
			"mask",
			"mas",
			"",
			"['.",
			"currentFile",
			"/* prettier-ignore */ import",
			"ShowSource",
			"/* prettier-ignore */ Object.assign(globalThis",
			"component",
			"",
			"token.id",
			"loc",
			"lexeme",
			"body",
			"toArrayBuffer",
			"toString",
			"waitRead",
			"dbg",
			"toString",
			"this.#events",
			"%2i",
			"-9s",
			"proc",
			"fs.",
			"jsm_module_record",
			"stepMode",
			"this.",
			"= require('\\1')",
			"const ",
			"fs",
			"ReadImport",
			"1000",
			"1000l",
			"SockAddr",
			"writeFileSync(",
			"...args",
			"iconProps",
			"js_module_get",
			"js_module_find",
			"jsm_load_module",
			"js_\\1",
			"js_load_\\1",
			"js_eval_binary",
			"ifndef NDEBUG",
			"lex->start",
			"lex->byte_length",
			"lex->pos",
			"lex->token_id",
			"lex->byte_length",
			"lex->pos",
			"tokens",
			"this.columns",
			"terminal.flush()",
			"f.flush()",
			"f.puts(",
			"500",
			"\\1this.\\2",
			"debug",
			"ucsLength",
			"this.",
			"this.out.flush",
			"history",
			"\\1//console.log",
			"puts",
			"export function",
			"type",
			"header.",
			"#000000",
			"a",
			"MakeListCommand",
			"si",
			"pi",
			"plen",
			"slen",
			"pattern[0]",
			"string[0]",
			"string.length",
			"pattern.length",
			"string.length",
			"export const",
			"this",
			"item",
			"js_deep_defaultflags",
			"sheet",
			"makeListMembersCmd",
			"get_websocket_obj",
			"0",
			"searchPath",
			"makeValueDescriptor",
			"socket",
			"",
			", func",
			"func,",
			"func",
			"function ",
			"readline",
			"",
			"(",
			"Pointer",
			"deref",
			"export \\1",
			"log",
			"\\1//console",
			"`${name}",
			"js_keypoint_data2(ctx, ",
			"String.fromCharCode",
			"UTF8MinCode",
			"UTF8FirstCodeMask",
			"a.push(\\1);",
			"fd",
			"log"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5534,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": "/home/roman/Projects/plot-cv/main.js",
							"function_name_status_row": 17,
							"outline_rename_mode": false,
							"symkeys":
							[
								[
									8582,
									8587
								],
								[
									8769,
									8775
								],
								[
									8833,
									8838
								],
								[
									8891,
									8895
								],
								[
									8969,
									8973
								],
								[
									8995,
									9004
								],
								[
									9663,
									9682
								],
								[
									9785,
									9789
								],
								[
									10163,
									10187
								],
								[
									10228,
									10249
								],
								[
									10251,
									10256
								],
								[
									10264,
									10269
								],
								[
									10291,
									10326
								],
								[
									10440,
									10458
								],
								[
									10540,
									10545
								],
								[
									10737,
									10758
								],
								[
									10891,
									10909
								],
								[
									11588,
									11613
								],
								[
									11659,
									11677
								],
								[
									12653,
									12680
								],
								[
									13035,
									13060
								],
								[
									13399,
									13433
								],
								[
									13949,
									13981
								],
								[
									14156,
									14166
								],
								[
									14299,
									14309
								],
								[
									14432,
									14442
								],
								[
									14609,
									14633
								],
								[
									14692,
									14741
								],
								[
									14982,
									15004
								],
								[
									15011,
									15035
								],
								[
									15043,
									15072
								],
								[
									15653,
									15705
								],
								[
									16158,
									16162
								],
								[
									16189,
									16194
								],
								[
									16629,
									16715
								],
								[
									16913,
									16935
								],
								[
									17448,
									17480
								],
								[
									17808,
									17842
								],
								[
									17957,
									17962
								],
								[
									17987,
									18023
								],
								[
									18212,
									18237
								],
								[
									18428,
									18453
								],
								[
									18508,
									18512
								],
								[
									18567,
									18571
								],
								[
									19018,
									19035
								],
								[
									19229,
									19244
								],
								[
									19367,
									19384
								],
								[
									19436,
									19440
								],
								[
									19485,
									19489
								],
								[
									19520,
									19524
								],
								[
									19567,
									19572
								],
								[
									19659,
									19678
								],
								[
									19893,
									19928
								],
								[
									19966,
									19974
								],
								[
									20043,
									20047
								],
								[
									20610,
									20614
								],
								[
									20673,
									20677
								],
								[
									21263,
									21269
								],
								[
									21444,
									21448
								],
								[
									21469,
									21473
								],
								[
									21508,
									21512
								],
								[
									21777,
									21790
								],
								[
									21918,
									21922
								],
								[
									22116,
									22132
								],
								[
									22398,
									22403
								],
								[
									22516,
									22525
								],
								[
									22597,
									22606
								],
								[
									22683,
									22692
								],
								[
									23332,
									23354
								],
								[
									23531,
									23591
								],
								[
									23840,
									23860
								],
								[
									23871,
									23880
								],
								[
									23935,
									23947
								],
								[
									23992,
									23999
								],
								[
									24085,
									24116
								],
								[
									24438,
									24471
								],
								[
									25526,
									25579
								],
								[
									25630,
									25643
								],
								[
									25725,
									25768
								],
								[
									25847,
									25851
								],
								[
									25980,
									25987
								],
								[
									26014,
									26021
								],
								[
									26099,
									26120
								],
								[
									26392,
									26434
								],
								[
									26557,
									26578
								],
								[
									26822,
									26867
								],
								[
									27060,
									27130
								],
								[
									27567,
									27592
								],
								[
									27615,
									27619
								],
								[
									27639,
									27652
								],
								[
									27768,
									27840
								],
								[
									28149,
									28158
								],
								[
									28590,
									28655
								],
								[
									28742,
									28768
								],
								[
									29014,
									29039
								],
								[
									29062,
									29066
								],
								[
									29086,
									29099
								],
								[
									29153,
									29209
								],
								[
									29211,
									29217
								],
								[
									29226,
									29228
								],
								[
									29253,
									29260
								],
								[
									29284,
									29378
								],
								[
									29385,
									29409
								],
								[
									29472,
									29499
								],
								[
									29508,
									29528
								],
								[
									29663,
									29667
								],
								[
									29854,
									29873
								],
								[
									29957,
									29976
								],
								[
									30069,
									30084
								],
								[
									30974,
									30989
								],
								[
									31080,
									31095
								],
								[
									31767,
									31808
								],
								[
									32013,
									32017
								],
								[
									32047,
									32058
								],
								[
									32141,
									32161
								],
								[
									32424,
									32448
								],
								[
									32506,
									32546
								],
								[
									32918,
									32937
								],
								[
									32988,
									33007
								],
								[
									33869,
									33897
								],
								[
									34102,
									34114
								],
								[
									34145,
									34157
								],
								[
									34668,
									34716
								],
								[
									34941,
									34947
								],
								[
									35097,
									35102
								],
								[
									35128,
									35135
								],
								[
									35198,
									35203
								],
								[
									35231,
									35238
								],
								[
									35871,
									35887
								],
								[
									36010,
									36014
								],
								[
									36522,
									36530
								],
								[
									36973,
									36981
								],
								[
									37034,
									37039
								],
								[
									37080,
									37088
								],
								[
									37228,
									37233
								],
								[
									37320,
									37336
								],
								[
									39012,
									39017
								],
								[
									39650,
									39701
								],
								[
									40109,
									40114
								],
								[
									40133,
									40138
								],
								[
									40446,
									40463
								],
								[
									40639,
									40645
								],
								[
									40793,
									40813
								],
								[
									40890,
									40920
								],
								[
									41096,
									41104
								],
								[
									41208,
									41219
								],
								[
									41335,
									41339
								],
								[
									42076,
									42117
								],
								[
									42740,
									42763
								],
								[
									43352,
									43356
								],
								[
									43500,
									43504
								],
								[
									44016,
									44020
								],
								[
									44035,
									44065
								],
								[
									44113,
									44117
								],
								[
									44131,
									44161
								],
								[
									44215,
									44219
								],
								[
									44238,
									44262
								],
								[
									44327,
									44331
								],
								[
									44371,
									44395
								],
								[
									44512,
									44516
								],
								[
									44542,
									44546
								],
								[
									44616,
									44620
								],
								[
									44646,
									44650
								],
								[
									44743,
									44747
								],
								[
									45105,
									45140
								],
								[
									45251,
									45264
								],
								[
									45705,
									45745
								],
								[
									45796,
									45805
								],
								[
									45826,
									45837
								],
								[
									45929,
									45940
								],
								[
									45986,
									46042
								],
								[
									46049,
									46055
								],
								[
									46137,
									46157
								],
								[
									46204,
									46262
								],
								[
									46269,
									46275
								],
								[
									46318,
									46325
								],
								[
									46342,
									46363
								],
								[
									46425,
									46436
								],
								[
									46666,
									46684
								],
								[
									46724,
									46730
								],
								[
									46763,
									46791
								],
								[
									46829,
									46851
								],
								[
									46936,
									46960
								],
								[
									46961,
									46975
								],
								[
									48097,
									48130
								],
								[
									48139,
									48140
								],
								[
									48192,
									48216
								],
								[
									48257,
									48288
								],
								[
									48297,
									48298
								],
								[
									48542,
									48585
								],
								[
									48904,
									48931
								],
								[
									49225,
									49244
								],
								[
									49457,
									49473
								],
								[
									49797,
									49817
								],
								[
									50712,
									50759
								],
								[
									51142,
									51157
								],
								[
									51374,
									51387
								],
								[
									51664,
									51677
								],
								[
									51883,
									51896
								],
								[
									52120,
									52126
								],
								[
									52176,
									52197
								],
								[
									55932,
									55943
								],
								[
									56779,
									56783
								],
								[
									57232,
									57237
								],
								[
									57391,
									57405
								],
								[
									57428,
									57433
								],
								[
									57546,
									57567
								],
								[
									57625,
									57630
								],
								[
									57738,
									57759
								],
								[
									57984,
									57997
								],
								[
									57998,
									58025
								],
								[
									58142,
									58165
								],
								[
									58447,
									58462
								],
								[
									58487,
									58504
								],
								[
									58571,
									58579
								],
								[
									58652,
									58657
								],
								[
									58763,
									58787
								],
								[
									59426,
									59453
								],
								[
									59549,
									59553
								],
								[
									59952,
									59988
								],
								[
									60082,
									60091
								],
								[
									60126,
									60137
								],
								[
									60189,
									60203
								],
								[
									60788,
									60792
								],
								[
									61477,
									61485
								],
								[
									61601,
									61609
								],
								[
									61729,
									61737
								],
								[
									61852,
									61860
								],
								[
									61917,
									61925
								],
								[
									62397,
									62405
								],
								[
									62590,
									62637
								],
								[
									62783,
									62796
								],
								[
									62959,
									62977
								],
								[
									63145,
									63149
								],
								[
									63221,
									63228
								],
								[
									63476,
									63495
								],
								[
									63527,
									63545
								],
								[
									64071,
									64091
								],
								[
									64416,
									64433
								],
								[
									64641,
									64659
								],
								[
									64936,
									64959
								],
								[
									65410,
									65427
								],
								[
									65519,
									65527
								],
								[
									65746,
									65760
								],
								[
									65943,
									65983
								],
								[
									66048,
									66062
								],
								[
									66637,
									66653
								],
								[
									66691,
									66766
								],
								[
									67011,
									67032
								],
								[
									67141,
									67145
								],
								[
									67624,
									67638
								],
								[
									67928,
									67932
								],
								[
									68004,
									68008
								],
								[
									68290,
									68307
								],
								[
									68475,
									68483
								],
								[
									68681,
									68685
								],
								[
									68781,
									68796
								],
								[
									69042,
									69046
								],
								[
									69253,
									69270
								],
								[
									69362,
									69377
								],
								[
									70175,
									70187
								],
								[
									70194,
									70207
								],
								[
									70245,
									70260
								],
								[
									70364,
									70384
								],
								[
									70564,
									70591
								],
								[
									70645,
									70657
								],
								[
									70775,
									70783
								],
								[
									71232,
									71240
								],
								[
									72062,
									72071
								],
								[
									72306,
									72313
								],
								[
									72412,
									72432
								],
								[
									72619,
									72639
								],
								[
									73005,
									73015
								],
								[
									73818,
									73822
								],
								[
									73897,
									73901
								],
								[
									73915,
									73929
								],
								[
									74186,
									74193
								],
								[
									76583,
									76615
								],
								[
									77012,
									77016
								],
								[
									77222,
									77226
								],
								[
									77294,
									77298
								],
								[
									77382,
									77389
								],
								[
									77468,
									77472
								],
								[
									78546,
									78592
								],
								[
									79027,
									79036
								],
								[
									80922,
									80940
								],
								[
									81138,
									81161
								],
								[
									81203,
									81218
								],
								[
									81574,
									81589
								],
								[
									82002,
									82022
								],
								[
									82480,
									82498
								],
								[
									83214,
									83223
								],
								[
									83266,
									83270
								],
								[
									83482,
									83520
								],
								[
									83695,
									83718
								],
								[
									83862,
									83867
								],
								[
									83906,
									83916
								],
								[
									84080,
									84084
								],
								[
									84231,
									84235
								],
								[
									84274,
									84279
								],
								[
									84684,
									84688
								],
								[
									84727,
									84741
								],
								[
									84745,
									84759
								],
								[
									84766,
									84770
								],
								[
									84791,
									84806
								],
								[
									84837,
									84851
								],
								[
									84963,
									84974
								],
								[
									85024,
									85029
								],
								[
									85089,
									85094
								],
								[
									85549,
									85559
								],
								[
									85673,
									85690
								],
								[
									85703,
									85707
								],
								[
									85888,
									85892
								],
								[
									86053,
									86074
								],
								[
									87172,
									87176
								],
								[
									87282,
									87286
								],
								[
									87580,
									87608
								],
								[
									88059,
									88063
								],
								[
									88519,
									88528
								],
								[
									88612,
									88621
								],
								[
									88725,
									88733
								],
								[
									89239,
									89248
								],
								[
									89397,
									89401
								],
								[
									89466,
									89492
								],
								[
									90137,
									90142
								],
								[
									90449,
									90480
								],
								[
									91517,
									91538
								],
								[
									91743,
									91771
								],
								[
									92138,
									92181
								],
								[
									93511,
									93520
								],
								[
									94400,
									94404
								],
								[
									95144,
									95171
								],
								[
									95294,
									95307
								]
							],
							"symlist":
							[
								"() =>",
								"  res =>",
								"() =>",
								"  r =>",
								"  r =>",
								"  entries()",
								"GetProject = arg =>",
								"  p =>",
								"  add = (arr, ...items) =>",
								"  useSlot = (arr, i) =>",
								"() =>",
								"\tv =>",
								"  trklGetSet = (get, set) => value =>",
								"MouseEvents = h =>",
								"() =>",
								"(parent, delegate) =>",
								"  append_to(elem, p)",
								"DrawSVG(...args)",
								"  append_to(elem, p)",
								"  adjustViewBox(e)",
								"  calcViewBox(box)",
								"  setViewBox(svgOwner, box)",
								"ElementToXML = (e, predicate) =>",
								"\t(v, k) =>",
								"\t(v, k) =>",
								"\t(v, k) =>",
								"  readFile(filename)",
								"  writeFile(filename, data, overwrite = true)",
								"  exists(filename)",
								"  realpath(filename)",
								"LoadFile(file)",
								"SaveFile(filename, data, contentType)",
								"  s =>",
								"() =>",
								"SaveSVG(filename, layers = [1, 16, 20, 21, 22, 23, 25, 27, 47, 48, 51])",
								"  predicate = element =>",
								"LoadSVG(filename)",
								"LoadImage(filename)",
								"() =>",
								"RenderComponent(component)",
								"ModifyColors = fn => e =>",
								"FindLayer = name_or_id =>",
								"  n =>",
								"  l =>",
								"(id = '#geom') =>",
								"(props = {}) =>",
								"  maxZIndex = () =>",
								"  e =>",
								"  z =>",
								"  z =>",
								"() =>",
								"  randomColor = () =>",
								"DrawArc(start, end, angle)",
								"  props =>",
								"  p =>",
								"  a =>",
								"  m =>",
								"  hex =>",
								"  p =>",
								"  p =>",
								"  p =>",
								"({ x, y }) =>",
								"  a =>",
								"({ x, y }, i) =>",
								"\te =>",
								"(l, i) =>",
								"(p, i) =>",
								"(p, i) =>",
								"  add = (level, item) =>",
								"RecurseBinaryNode(node, parent = null, depth = 0)",
								"(nodes, i, level) =>",
								"  fx = j =>",
								"(node, j) =>",
								"  item =>",
								"DrawNode(x, y, node)",
								"DrawEdge(item, parent)",
								"GetPaths(query, parent = project.svgElement)",
								"\t(a, e) =>",
								"PathToPolylines(path, step = 0.01)",
								"  p =>",
								"  poly =>",
								"  poly =>",
								"\t(p, d, set, stop) =>",
								"PathToPolyline(path, step = 0.01)",
								"\t(p, d, set, stop) =>",
								"PathsToPolylines(paths, step = 0.01)",
								"OutsetPath(path, offset, miterLimit = 2, arcTolerance = 0.01)",
								"  .toPolylines = function()",
								"  p =>",
								"({ X, Y }) =>",
								"OutsetPaths(paths, offset, miterLimit = 2, arcTolerance = 0.25)",
								"(a, p) =>",
								"ClipPath(path, clip, mode = ClipperLib.ClipType.ctUnion)",
								"  add = (p, clip = false) =>",
								"  .toPolylines = function()",
								"  p =>",
								"({ X, Y }) =>",
								"  saveItemStates(itemList, get = item => Util.is.",
								"(item.",
								"))",
								"  item =>",
								"  restoreItemStates( itemStates, /*prettier-ignore */ set = (item, value) => item.",
								"(value ? 'yes' : 'no') )",
								"EagleMaps(project)",
								"  transformPath = p =>",
								"  e =>",
								"  dom2eagle = node =>",
								"  eagle2dom = elem =>",
								"  path2dom = p =>",
								"(key, value) =>",
								"(key, value) =>",
								"PackageNames(doc = project.doc)",
								"  e =>",
								"([e, b]) =>",
								"([e, w, h, m, v]) =>",
								"({ index, ...match }) =>",
								"\t({ s, v, indexes }, match, i) =>",
								"([token, index]) =>",
								"([token, index]) =>",
								"NextDocument(n = 1)",
								"\t(idx, i) =>",
								"\t(idx, i) =>",
								"LoadDocument(project, parentElem)",
								"  err =>",
								"() =>",
								"\tent =>",
								"() =>",
								"\tent =>",
								"  renamePackages()",
								"  a =>",
								"  value =>",
								"  layer =>",
								"() =>",
								"  layer =>",
								"() =>",
								"  fn = function(v)",
								"() =>",
								"  .makeGroup = function({ transform, ...props } = {})",
								"  id =>",
								"() =>",
								"  xx()",
								"\t() =>",
								"(transform)",
								"\t(tag, attr, children = []) =>",
								"  value =>",
								"() =>",
								"Rect",
								"ChooseDocument(project, i)",
								"GenerateVoronoi = () =>",
								"Rect",
								"  p =>",
								"  e =>",
								"({ lSite, rSite, ...edge }) =>",
								"  e =>",
								"({ lSite, rSite, ...edge }) =>",
								"  e =>",
								"({ va, vb, ...edge }) =>",
								"  v =>",
								"  add = (arr, ...items) =>",
								"  l =>",
								"  t =>",
								"  l =>",
								"  t =>",
								"  p =>",
								"\t(acc, { site, halfedges }) =>",
								"({ site }) =>",
								"PackageChildren(element, layer)",
								"(c, i) =>",
								"([i, p]) =>",
								"([i, e]) =>",
								"ElementChildren(layer = 'tPlace', rfn = ent => ",
								"(ent))",
								"([name, element]) =>",
								"ElementGeometries(layer = 'tPlace', rfn = ent => ",
								"(ent))",
								"\tent =>",
								"([name, children]) =>",
								"([i, e]) =>",
								"([name, lines]) =>",
								"  pts =>",
								"([name, lines, polygons]) =>",
								"NewPath(path)",
								"MakeFitAction = index =>",
								"  event =>",
								"ZoomFactor(val = config.",
								")",
								"ZoomLog(factor)",
								"AdjustZoom(l = config.",
								")",
								"CreateGrblSocket = (port = 'tnt1') =>",
								"HandleMessage(msg)",
								"\tpointStr =>",
								"  socketFn = () =>",
								"  .send = (...args) =>",
								"AuthorizationDialog = ({ onAuth, ...props }) =>",
								"  onSubmit: () =>",
								"  onInput: e =>",
								"  onInput: e =>",
								"  onClick: e =>",
								"  arg =>",
								"  .onload = () =>",
								"  response =>",
								"  e =>",
								"\tv =>",
								"TestArc: () =>",
								"() =>",
								"(push, stop) =>",
								"() =>",
								"(push, stop) =>",
								"\ttarget =>",
								"\t(key, modifiers = 0) =>",
								"  .focusSearch = state =>",
								"  children: () =>",
								"  geometries: () =>",
								"  value =>",
								"() =>",
								"  testComponent = props =>",
								"File(obj, i)",
								"File",
								"File.prototype.toString = function()",
								"(a, b) =>",
								"(obj, i) =>",
								"(acc, file) =>",
								"  i =>",
								"  value =>",
								"  value =>",
								"  value =>",
								"  value =>",
								"  value =>",
								"  value =>",
								"  updateIfChanged = (trkl, newValue, callback) =>",
								"\t(elem, i) =>",
								"  changeInput = e =>",
								"  p =>",
								"\targ =>",
								"Consumer = props =>",
								"()",
								"  log(type, time, msg)",
								"Logger = props =>",
								"()",
								"([type, d, t, m], i) =>",
								"Dumper = props =>",
								"  value =>",
								"([k, v], i) =>",
								"Commander = ({ onCommand, ...props }) =>",
								"  handler = e =>",
								"  toggle = trkl =>",
								"Layer = ({ title, name, label, i, color, element, className, ...props }) =>",
								"  setVisible = value =>",
								"  e =>",
								"\te =>",
								"  l =>",
								"  l =>",
								"\t(item, value) =>",
								"\titem =>",
								"  l =>",
								"([l, state]) =>",
								"  e =>",
								"  onMouseMove: e =>",
								"  onMouseUp: e =>",
								"DocumentList",
								"  constructor()",
								"(push, stop) =>",
								"  add(name, component)",
								"  addEntry([name, component])",
								"  remove(name)",
								"  update()",
								"  fn: e =>",
								"  fn: () =>",
								"  open =>",
								"\tprops =>",
								"\tprops =>",
								"  e =>",
								"  i =>",
								"  i =>",
								"({ coord }) =>",
								"  side =>",
								"  create: (project, props = {}) =>",
								"  a =>",
								"  e =>",
								"  e =>",
								"  name =>",
								"  e =>",
								"  makeLayerName(name, side)",
								"  fn: () =>",
								"(e, p, i) =>",
								"  makeSortCompare: key =>",
								"\tfunction(a, b)",
								"\tfunction(a, b)",
								"  onCommand: cmdStr =>",
								"  handleChange: e =>",
								"\tevent =>",
								"  e =>",
								"MoveEvent(event, prevEvent)",
								"WalkUp(e)",
								"\te =>",
								"\tz =>",
								"  p =>",
								"  e =>",
								"\te =>",
								"  e =>",
								"\tv =>",
								"\tl =>",
								"  e =>",
								"\t() =>",
								"\t(e, depth) =>",
								"\tclasses =>",
								"\te =>",
								"\te =>",
								"\t(a, b) =>",
								"\t(a, b) =>",
								"Node",
								"  e =>",
								"\t(p, d, set, stop) =>",
								"  e =>",
								"  e =>",
								"TouchEvent(event)",
								"  e =>",
								"(p, i) =>",
								"(a, b) =>",
								"\tsize =>",
								"  border =>",
								"  r =>",
								"  mod(n, m)",
								"() =>",
								"\t(pos, last, first) =>",
								"  cancel()",
								"  .oncontextmenu = function(e)",
								"  .processEvents = function eventLoop()",
								"\tevent =>",
								"  e =>",
								"  onRuntimeInitialized: () =>",
								"  print: txt =>"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1637419777.24,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "commands.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12032,
						"regions":
						{
						},
						"selection":
						[
							[
								8023,
								8027
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 222,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1637420699.55,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2931.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "main.js",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 95344,
						"regions":
						{
							"col_00000001":
							{
								"flags": 16,
								"regions":
								[
									[
										87104,
										87113
									]
								],
								"scope": "col_00000001"
							},
							"col_00000001_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_00000001_circle.png",
								"regions":
								[
									[
										87008,
										87008
									]
								],
								"scope": "col_gutter"
							},
							"col_0000FFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										44865,
										44869
									]
								],
								"scope": "col_0000FFFF"
							},
							"col_0000FFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_0000FFFF_circle.png",
								"regions":
								[
									[
										44848,
										44848
									]
								],
								"scope": "col_gutter"
							},
							"col_0078F0FF":
							{
								"flags": 16,
								"regions":
								[
									[
										21096,
										21103
									]
								],
								"scope": "col_0078F0FF"
							},
							"col_0078F0FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_0078F0FF_circle.png",
								"regions":
								[
									[
										21046,
										21046
									]
								],
								"scope": "col_gutter"
							},
							"col_00DD0080":
							{
								"flags": 16,
								"regions":
								[
									[
										23180,
										23189
									]
								],
								"scope": "col_00DD0080"
							},
							"col_00DD0080_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_00DD0080_circle.png",
								"regions":
								[
									[
										23167,
										23167
									]
								],
								"scope": "col_gutter"
							},
							"col_00FF00FF":
							{
								"flags": 16,
								"regions":
								[
									[
										23244,
										23248
									]
								],
								"scope": "col_00FF00FF"
							},
							"col_00FF00FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_00FF00FF_circle.png",
								"regions":
								[
									[
										23198,
										23198
									]
								],
								"scope": "col_gutter"
							},
							"col_00FFFFBF":
							{
								"flags": 16,
								"regions":
								[
									[
										45007,
										45027
									]
								],
								"scope": "col_00FFFFBF"
							},
							"col_00FFFFBF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_00FFFFBF_circle.png",
								"regions":
								[
									[
										44908,
										44908
									]
								],
								"scope": "col_gutter"
							},
							"col_00FFFFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										22655,
										22659
									]
								],
								"scope": "col_00FFFFFF"
							},
							"col_00FFFFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_00FFFFFF_circle.png",
								"regions":
								[
									[
										22581,
										22581
									]
								],
								"scope": "col_gutter"
							},
							"col_010101FF":
							{
								"flags": 16,
								"regions":
								[
									[
										11202,
										11206
									],
									[
										22254,
										22259
									],
									[
										22788,
										22792
									],
									[
										22959,
										22963
									],
									[
										24193,
										24197
									],
									[
										24763,
										24767
									],
									[
										28396,
										28401
									],
									[
										28472,
										28477
									],
									[
										44565,
										44569
									],
									[
										77577,
										77589
									],
									[
										84616,
										84620
									],
									[
										86541,
										86545
									],
									[
										86670,
										86674
									]
								],
								"scope": "col_010101FF"
							},
							"col_010101FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_010101FF_circle.png",
								"regions":
								[
									[
										11123,
										11123
									],
									[
										22239,
										22239
									],
									[
										22773,
										22773
									],
									[
										22946,
										22946
									],
									[
										24178,
										24178
									],
									[
										24748,
										24748
									],
									[
										28341,
										28341
									],
									[
										28421,
										28421
									],
									[
										44494,
										44494
									],
									[
										77534,
										77534
									],
									[
										84556,
										84556
									],
									[
										86488,
										86488
									],
									[
										86585,
										86585
									]
								],
								"scope": "col_gutter"
							},
							"col_1EE67BFF":
							{
								"flags": 16,
								"regions":
								[
									[
										21333,
										21340
									]
								],
								"scope": "col_1EE67BFF"
							},
							"col_1EE67BFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_1EE67BFF_circle.png",
								"regions":
								[
									[
										21282,
										21282
									]
								],
								"scope": "col_gutter"
							},
							"col_2E17B3FF":
							{
								"flags": 16,
								"regions":
								[
									[
										21137,
										21144
									]
								],
								"scope": "col_2E17B3FF"
							},
							"col_2E17B3FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_2E17B3FF_circle.png",
								"regions":
								[
									[
										21118,
										21118
									]
								],
								"scope": "col_gutter"
							},
							"col_3394E8FF":
							{
								"flags": 16,
								"regions":
								[
									[
										21344,
										21351
									]
								],
								"scope": "col_3394E8FF"
							},
							"col_3394E8FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_3394E8FF_circle.png",
								"regions":
								[
									[
										21282,
										21282
									]
								],
								"scope": "col_gutter"
							},
							"col_34DB05FF":
							{
								"flags": 16,
								"regions":
								[
									[
										21085,
										21092
									]
								],
								"scope": "col_34DB05FF"
							},
							"col_34DB05FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_34DB05FF_circle.png",
								"regions":
								[
									[
										21046,
										21046
									]
								],
								"scope": "col_gutter"
							},
							"col_3578E6FF":
							{
								"flags": 16,
								"regions":
								[
									[
										21159,
										21166
									]
								],
								"scope": "col_3578E6FF"
							},
							"col_3578E6FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_3578E6FF_circle.png",
								"regions":
								[
									[
										21118,
										21118
									]
								],
								"scope": "col_gutter"
							},
							"col_554D85FF":
							{
								"flags": 16,
								"regions":
								[
									[
										21148,
										21155
									]
								],
								"scope": "col_554D85FF"
							},
							"col_554D85FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_554D85FF_circle.png",
								"regions":
								[
									[
										21118,
										21118
									]
								],
								"scope": "col_gutter"
							},
							"col_657FFFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										79131,
										79148
									]
								],
								"scope": "col_657FFFFF"
							},
							"col_657FFFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_657FFFFF_circle.png",
								"regions":
								[
									[
										79110,
										79110
									]
								],
								"scope": "col_gutter"
							},
							"col_7F7F7F54":
							{
								"flags": 16,
								"regions":
								[
									[
										11419,
										11440
									]
								],
								"scope": "col_7F7F7F54"
							},
							"col_7F7F7F54_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_7F7F7F54_circle.png",
								"regions":
								[
									[
										11372,
										11372
									]
								],
								"scope": "col_gutter"
							},
							"col_808080FF":
							{
								"flags": 16,
								"regions":
								[
									[
										67459,
										67463
									],
									[
										69838,
										69842
									]
								],
								"scope": "col_808080FF"
							},
							"col_808080FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_808080FF_circle.png",
								"regions":
								[
									[
										67403,
										67403
									],
									[
										69770,
										69770
									]
								],
								"scope": "col_gutter"
							},
							"col_8D1AE6FF":
							{
								"flags": 16,
								"regions":
								[
									[
										21107,
										21114
									]
								],
								"scope": "col_8D1AE6FF"
							},
							"col_8D1AE6FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_8D1AE6FF_circle.png",
								"regions":
								[
									[
										21046,
										21046
									]
								],
								"scope": "col_gutter"
							},
							"col_B35917FF":
							{
								"flags": 16,
								"regions":
								[
									[
										21181,
										21188
									]
								],
								"scope": "col_B35917FF"
							},
							"col_B35917FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_B35917FF_circle.png",
								"regions":
								[
									[
										21118,
										21118
									]
								],
								"scope": "col_gutter"
							},
							"col_D0E634FF":
							{
								"flags": 16,
								"regions":
								[
									[
										21322,
										21329
									]
								],
								"scope": "col_D0E634FF"
							},
							"col_D0E634FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_D0E634FF_circle.png",
								"regions":
								[
									[
										21282,
										21282
									]
								],
								"scope": "col_gutter"
							},
							"col_E64535FF":
							{
								"flags": 16,
								"regions":
								[
									[
										21300,
										21307
									]
								],
								"scope": "col_E64535FF"
							},
							"col_E64535FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_E64535FF_circle.png",
								"regions":
								[
									[
										21282,
										21282
									]
								],
								"scope": "col_gutter"
							},
							"col_E6AA4CFF":
							{
								"flags": 16,
								"regions":
								[
									[
										21311,
										21318
									]
								],
								"scope": "col_E6AA4CFF"
							},
							"col_E6AA4CFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_E6AA4CFF_circle.png",
								"regions":
								[
									[
										21282,
										21282
									]
								],
								"scope": "col_gutter"
							},
							"col_E9B470FF":
							{
								"flags": 16,
								"regions":
								[
									[
										21170,
										21177
									]
								],
								"scope": "col_E9B470FF"
							},
							"col_E9B470FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_E9B470FF_circle.png",
								"regions":
								[
									[
										21118,
										21118
									]
								],
								"scope": "col_gutter"
							},
							"col_EB1F00FF":
							{
								"flags": 16,
								"regions":
								[
									[
										21063,
										21070
									]
								],
								"scope": "col_EB1F00FF"
							},
							"col_EB1F00FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_EB1F00FF_circle.png",
								"regions":
								[
									[
										21046,
										21046
									]
								],
								"scope": "col_gutter"
							},
							"col_F0CC11FF":
							{
								"flags": 16,
								"regions":
								[
									[
										21074,
										21081
									]
								],
								"scope": "col_F0CC11FF"
							},
							"col_F0CC11FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_F0CC11FF_circle.png",
								"regions":
								[
									[
										21046,
										21046
									]
								],
								"scope": "col_gutter"
							},
							"col_FF0000FF":
							{
								"flags": 16,
								"regions":
								[
									[
										7105,
										7108
									],
									[
										19291,
										19295
									],
									[
										28564,
										28567
									],
									[
										44669,
										44673
									]
								],
								"scope": "col_FF0000FF"
							},
							"col_FF0000FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FF0000FF_circle.png",
								"regions":
								[
									[
										7094,
										7094
									],
									[
										19278,
										19278
									],
									[
										28500,
										28500
									],
									[
										44598,
										44598
									]
								],
								"scope": "col_gutter"
							},
							"col_FF00FFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										45305,
										45309
									]
								],
								"scope": "col_FF00FFFF"
							},
							"col_FF00FFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FF00FFFF_circle.png",
								"regions":
								[
									[
										45284,
										45284
									]
								],
								"scope": "col_gutter"
							},
							"col_FF65FEFF":
							{
								"flags": 16,
								"regions":
								[
									[
										79090,
										79107
									]
								],
								"scope": "col_FF65FEFF"
							},
							"col_FF65FEFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FF65FEFF_circle.png",
								"regions":
								[
									[
										79068,
										79068
									]
								],
								"scope": "col_gutter"
							},
							"col_FF6F00FF":
							{
								"flags": 16,
								"regions":
								[
									[
										85270,
										85277
									]
								],
								"scope": "col_FF6F00FF"
							},
							"col_FF6F00FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FF6F00FF_circle.png",
								"regions":
								[
									[
										85253,
										85253
									]
								],
								"scope": "col_gutter"
							},
							"col_FFFF00FF":
							{
								"flags": 16,
								"regions":
								[
									[
										22766,
										22770
									],
									[
										86881,
										86885
									]
								],
								"scope": "col_FFFF00FF"
							},
							"col_FFFF00FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FFFF00FF_circle.png",
								"regions":
								[
									[
										22753,
										22753
									],
									[
										86858,
										86858
									]
								],
								"scope": "col_gutter"
							},
							"col_FFFFFFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										24213,
										24217
									],
									[
										63813,
										63818
									]
								],
								"scope": "col_FFFFFFFF"
							},
							"col_FFFFFFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FFFFFFFF_circle.png",
								"regions":
								[
									[
										24200,
										24200
									],
									[
										63795,
										63795
									]
								],
								"scope": "col_gutter"
							}
						},
						"selection":
						[
							[
								81287,
								81333
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 2484,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1637421179.21,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 36688.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 24.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.754262567352,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 139.0
	},
	"output.Debugger: Console":
	{
		"height": 0.0
	},
	"output.Debugger: Protocol":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 259.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "make",
	"project": "plot-cv.sublime-project",
	"replace":
	{
		"height": 68.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"main",
				"main.js"
			],
			[
				"commands",
				"commands.js"
			],
			[
				"components",
				"components.js"
			],
			[
				"cvHi",
				"qjs-opencv/js/cvHighGUI.js"
			],
			[
				"test-cv",
				"test-cv.js"
			],
			[
				"align.js",
				"lib/geom/align.js"
			],
			[
				"rect.js",
				"lib/geom/rect.js"
			],
			[
				"test-vid",
				"test-video.js"
			],
			[
				"util.js",
				"lib/util.js"
			],
			[
				"qjsm",
				"quickjs/qjs-modules/qjsm.c"
			],
			[
				"cvVid",
				"qjs-opencv/js/cvVideo.js"
			],
			[
				"cvpip",
				"qjs-opencv/js/cvPipeline.js"
			],
			[
				"imagepip",
				"imagePipeline.js"
			],
			[
				"clang-as",
				"clang-ast.js"
			],
			[
				"ast-shell",
				"ast-shell.js"
			],
			[
				"imagePip",
				"imagePipeline.js"
			],
			[
				"test-im",
				"test-image.js"
			],
			[
				"usetrkl",
				"lib/hooks/useTrkl.js"
			],
			[
				"fetch.j",
				"lib/fetch.js"
			],
			[
				"comm",
				"commands.js"
			],
			[
				"package",
				"package.json"
			],
			[
				"io-help",
				"io-helpers.js"
			],
			[
				"repeater.js",
				"lib/repeater/repeater.js"
			],
			[
				"server.js",
				"server.js"
			],
			[
				"point.js",
				"lib/geom/point.js"
			],
			[
				"js_Cv",
				"qjs-opencv/js_cv.cpp"
			],
			[
				"gif_wr",
				"qjs-opencv/gif_write.hpp"
			],
			[
				"qjsm.c",
				"quickjs/qjs-modules/qjsm.c"
			],
			[
				"console.js",
				"quickjs/qjs-modules/lib/console.js"
			],
			[
				"test-opencv",
				"test-opencv.js"
			],
			[
				"quickjs.h",
				"quickjs/quickjs.h"
			],
			[
				"utils.c",
				"quickjs/qjs-modules/utils.c"
			],
			[
				"js_mat",
				"qjs-opencv/js_mat.cpp"
			],
			[
				"image-he",
				"image-helpers.js"
			],
			[
				"main.j",
				"main.js"
			],
			[
				"test-ec",
				"test-ecmascript2.js"
			],
			[
				"test-eagle",
				"test-eagle.js"
			],
			[
				"test-xml",
				"test-xml.js"
			],
			[
				"quickjs-misc",
				"quickjs/qjs-modules/quickjs-misc.c"
			],
			[
				"quickjs-misc.c",
				"quickjs/qjs-modules/quickjs-misc.c"
			],
			[
				"quickjs-mmap",
				"quickjs/qjs-modules/quickjs-mmap.c"
			],
			[
				"quickjs-libc.c",
				"quickjs/quickjs-libc.c"
			],
			[
				"quickjs.c",
				"quickjs/quickjs.c"
			],
			[
				"quickjs-ins",
				"quickjs/qjs-modules/quickjs-inspect.c"
			],
			[
				"quickjs-xml",
				"quickjs/qjs-modules/quickjs-xml.c"
			],
			[
				"quickjs-in",
				"quickjs/qjs-modules/quickjs-internal.h"
			],
			[
				"list.h",
				"quickjs/list.h"
			],
			[
				"webSOc",
				"webSocket.js"
			],
			[
				"timers.",
				"lib/repeater/timers.js"
			],
			[
				"cv-shell",
				"cv-shell.js"
			],
			[
				"cvGUI",
				"qjs-opencv/js/cvHighGUI.js"
			],
			[
				"js_Mat",
				"qjs-opencv/js_mat.cpp"
			],
			[
				"-helper",
				"io-helpers.js"
			],
			[
				"cvVide",
				"qjs-opencv/js/cvVideo.js"
			],
			[
				"test-image",
				"test-image.js"
			],
			[
				"quickjs-lib",
				"quickjs/quickjs-libc.c"
			],
			[
				"test-repe",
				"test-repeater.js"
			],
			[
				"repea",
				"lib/repeater/repeater.js"
			],
			[
				"repl.js",
				"quickjs/qjs-modules/lib/repl.js"
			],
			[
				"io-helper",
				"io-helpers.js"
			],
			[
				"jpeg.js",
				"lib/jpeg.js"
			],
			[
				"image-h",
				"image-helpers.js"
			],
			[
				"estree.js",
				"lib/ecmascript/estree.js"
			],
			[
				"clang-list",
				"clang-list.js"
			],
			[
				"ast-shel",
				"ast-shell.js"
			],
			[
				"terminal",
				"qjs-modules/lib/terminal.js"
			],
			[
				"packa",
				"package.json"
			],
			[
				"Svgpath",
				"lib/svg/path.js"
			],
			[
				"cvVIde",
				"qjs-opencv/js/cvVideo.js"
			],
			[
				"js_poin",
				"qjs-opencv/js_point.hpp"
			],
			[
				"js_cont",
				"qjs-opencv/js_contour.hpp"
			],
			[
				"test.js",
				"test.js"
			],
			[
				"test-open",
				"test-opencv.js"
			],
			[
				"path",
				"lib/svg/path.js"
			],
			[
				"path.js",
				"lib/svg/path.js"
			],
			[
				"svgpa",
				"lib/svg/path-parser.js"
			],
			[
				"svg.js",
				"lib/dom/svg.js"
			],
			[
				"test-clip",
				"test-clipper.js"
			],
			[
				"13",
				"opencv/disabled/code10-3.cpp"
			],
			[
				"test-svg",
				"test-svgpath.js"
			],
			[
				"test-svgp",
				"test-svgpath.js"
			],
			[
				"svg",
				"src/simple_svg_writer.hpp"
			],
			[
				"player-sy",
				"static/svg/player-symbols.svg"
			],
			[
				".svg",
				"restart.svg"
			],
			[
				"server",
				"debugger-server.js"
			],
			[
				"misc.js",
				"lib/misc.js"
			],
			[
				"useTrkl",
				"lib/hooks/useTrkl.js"
			],
			[
				"sockets.c",
				"quickjs/qjs-modules/quickjs-sockets.c"
			],
			[
				"debuggerprot",
				"debuggerprotocol.js"
			],
			[
				"debugger-ser",
				"debugger-server.js"
			],
			[
				"quickjs-debugg",
				"quickjs/quickjs-debugger.c"
			],
			[
				"debugger.cs",
				"static/debugger.css"
			],
			[
				"quickjs-debu",
				"quickjs/quickjs-debugger.c"
			],
			[
				"debugger.js",
				"debugger.js"
			],
			[
				"repl",
				"repl.js"
			],
			[
				"wscli",
				"quickjs/qjs-net/wscli.js"
			],
			[
				"test-rp",
				"test-rpc.js"
			],
			[
				"test-net",
				"test-net.js"
			],
			[
				"extend",
				"quickjs/qjs-modules/lib/extendArray.js"
			],
			[
				"useFe",
				"lib/hooks/useFetch.js"
			],
			[
				"debugger.css",
				"static/debugger.css"
			],
			[
				"lexer",
				"lib/lexer.js"
			],
			[
				"debugger-cli",
				"debugger-client.js"
			],
			[
				"process",
				"quickjs/qjs-modules/lib/process.js"
			],
			[
				"compon",
				"components.js"
			],
			[
				"useClick",
				"lib/hooks/useClick.js"
			],
			[
				"style",
				"style.css"
			],
			[
				"css.j",
				"lib/dom/css.js"
			],
			[
				"debugger.ht",
				"debugger.html"
			],
			[
				"style.cs",
				"style.css"
			],
			[
				"arrow",
				"static/svg/arrow-right.svg"
			],
			[
				"jsle",
				"lib/jslexer.js"
			],
			[
				"debugger-c",
				"debugger-client.js"
			],
			[
				"test-jsl",
				"test-jslexer.js"
			],
			[
				"hooks",
				"lib/hooks.js"
			],
			[
				"test-jsle",
				"test-jslexer.js"
			],
			[
				"misc.j",
				"lib/misc.js"
			],
			[
				"token",
				"lib/ecmascript/token.js"
			],
			[
				"misc.",
				"lib/misc.js"
			],
			[
				"jslexer",
				"lib/jslexer.js"
			],
			[
				"",
				"debugger-server.js"
			],
			[
				"react-sim",
				"react-simple-code-editor.js"
			],
			[
				"prism-co",
				"prism-core.js"
			],
			[
				"prism-core",
				"prism-core.js"
			],
			[
				"debugger",
				"debugger-server.js"
			],
			[
				"hooks.j",
				"lib/hooks.js"
			],
			[
				"preactCom",
				"lib/dom/preactComponent.js"
			],
			[
				"hook",
				"lib/hooks.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/quickjs/modules/modules.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 309.0,
		"last_filter": "N",
		"selected_items":
		[
			[
				"N",
				"nb"
			],
			[
				"",
				"$"
			]
		],
		"width": 592.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 344.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
