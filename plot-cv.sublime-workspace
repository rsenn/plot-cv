{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Draw",
				"DrawCircle"
			],
			[
				"exi",
				"existsSync"
			],
			[
				"text",
				"text-decoration"
			],
			[
				"crea",
				"createTextNode"
			],
			[
				"Transform",
				"TransformationList"
			],
			[
				"trans",
				"transformation"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "  px = n =>\n  pt = (n, to = 'mm') =>\n  strokeStyle = (width = '0.5px', unit = '') =>\n  markerStyle = () =>\n  toChildArray(a)\n  xml(tagName, attributes = {}, c = undefined)\n  text(str, attrs = {}, spanAttrs = {})\n  line(...args)\n  measure(...args)\n  rect(...args)\n  main(...args)\n() =>\n() =>\n() =>\n  a =>\n  pushrect = (r, mx = -1, my = -1) =>\n  pushlines = (...l) =>\n  o =>\n  pushtext = (t, p) =>\n  frontBack(x, y)\n  leftRight(x, y)",
			"settings":
			{
				"buffer_size": 431,
				"line_ending": "Unix",
				"name": "ùåÜ Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					4,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-shell.js",
						"symkeys":
						[
							[
								3224,
								3267
							],
							[
								4053,
								4060
							],
							[
								4160,
								4165
							],
							[
								4261,
								4294
							],
							[
								4401,
								4406
							],
							[
								4469,
								4475
							],
							[
								4577,
								4596
							],
							[
								4618,
								4623
							],
							[
								4726,
								4757
							],
							[
								4808,
								4851
							],
							[
								4896,
								4903
							],
							[
								5004,
								5089
							],
							[
								5241,
								5246
							],
							[
								5291,
								5309
							],
							[
								5348,
								5355
							],
							[
								5404,
								5411
							],
							[
								5450,
								5467
							],
							[
								5514,
								5521
							],
							[
								5558,
								5576
							],
							[
								5599,
								5608
							],
							[
								5631,
								5649
							],
							[
								5660,
								5721
							],
							[
								5841,
								5850
							],
							[
								5887,
								5898
							],
							[
								5909,
								5933
							],
							[
								6014,
								6022
							],
							[
								6205,
								6259
							],
							[
								6478,
								6508
							],
							[
								7160,
								7206
							],
							[
								7246,
								7250
							],
							[
								7277,
								7284
							],
							[
								7370,
								7409
							],
							[
								7494,
								7539
							],
							[
								7577,
								7581
							],
							[
								7605,
								7648
							],
							[
								7727,
								7772
							],
							[
								7817,
								7821
							],
							[
								7871,
								7875
							],
							[
								7882,
								7886
							],
							[
								7918,
								7951
							],
							[
								7983,
								8026
							],
							[
								8101,
								8105
							],
							[
								8144,
								8183
							],
							[
								8229,
								8272
							],
							[
								8317,
								8356
							],
							[
								8452,
								8485
							],
							[
								8517,
								8537
							],
							[
								8784,
								8806
							],
							[
								11098,
								11109
							],
							[
								12299,
								12312
							],
							[
								12692,
								12726
							],
							[
								13230,
								13274
							],
							[
								13393,
								13413
							],
							[
								13728,
								13738
							],
							[
								13766,
								13776
							],
							[
								13812,
								13825
							],
							[
								14075,
								14089
							],
							[
								14981,
								14990
							],
							[
								15231,
								15250
							],
							[
								15792,
								15805
							],
							[
								15823,
								15828
							],
							[
								15879,
								15892
							],
							[
								15943,
								15964
							],
							[
								16361,
								16377
							],
							[
								16765,
								16770
							],
							[
								16808,
								16823
							],
							[
								16970,
								16978
							],
							[
								17019,
								17027
							],
							[
								17304,
								17332
							],
							[
								17399,
								17433
							],
							[
								17467,
								17472
							],
							[
								17494,
								17524
							],
							[
								17766,
								17774
							],
							[
								17841,
								17845
							],
							[
								17935,
								17942
							],
							[
								18282,
								18306
							],
							[
								18551,
								18556
							],
							[
								20286,
								20330
							],
							[
								20777,
								20803
							],
							[
								21505,
								21528
							],
							[
								21648,
								21670
							],
							[
								21921,
								21925
							],
							[
								22413,
								22417
							],
							[
								23034,
								23063
							],
							[
								23088,
								23092
							],
							[
								23168,
								23191
							],
							[
								23235,
								23241
							],
							[
								23269,
								23273
							],
							[
								23289,
								23326
							],
							[
								23348,
								23364
							],
							[
								23384,
								23391
							],
							[
								23448,
								23476
							],
							[
								23530,
								23541
							],
							[
								23624,
								23632
							],
							[
								23728,
								23732
							],
							[
								23882,
								23886
							],
							[
								23984,
								23989
							],
							[
								24049,
								24060
							],
							[
								24132,
								24143
							],
							[
								24230,
								24235
							],
							[
								24285,
								24291
							],
							[
								24388,
								24396
							],
							[
								24571,
								24600
							],
							[
								24693,
								24746
							],
							[
								24899,
								24903
							],
							[
								24957,
								24961
							],
							[
								25237,
								25244
							],
							[
								25266,
								25272
							],
							[
								25301,
								25332
							],
							[
								25466,
								25490
							],
							[
								25616,
								25627
							],
							[
								25645,
								25661
							],
							[
								25820,
								25825
							],
							[
								25849,
								25853
							],
							[
								25901,
								25910
							],
							[
								25978,
								25983
							],
							[
								26121,
								26126
							],
							[
								26248,
								26259
							],
							[
								26348,
								26355
							],
							[
								27001,
								27017
							],
							[
								29071,
								29110
							],
							[
								29152,
								29166
							],
							[
								29415,
								29449
							],
							[
								29788,
								29802
							],
							[
								29897,
								29901
							],
							[
								29923,
								29937
							],
							[
								29968,
								29972
							],
							[
								31272,
								31288
							],
							[
								31338,
								31353
							],
							[
								31412,
								31431
							],
							[
								31454,
								31466
							],
							[
								31555,
								31559
							],
							[
								31658,
								31662
							],
							[
								31881,
								31887
							],
							[
								31977,
								31991
							],
							[
								32020,
								32038
							],
							[
								32175,
								32187
							],
							[
								32217,
								32282
							],
							[
								32311,
								32316
							],
							[
								32455,
								32493
							],
							[
								32518,
								32538
							],
							[
								32567,
								32616
							],
							[
								32663,
								32673
							],
							[
								32846,
								32856
							],
							[
								32929,
								32939
							],
							[
								33010,
								33020
							],
							[
								33547,
								33628
							],
							[
								33639,
								33662
							],
							[
								33880,
								33885
							],
							[
								33968,
								33977
							],
							[
								34007,
								34013
							],
							[
								34029,
								34058
							],
							[
								34094,
								34107
							],
							[
								34338,
								34344
							],
							[
								34353,
								34364
							],
							[
								34432,
								34454
							],
							[
								34671,
								34694
							],
							[
								35106,
								35135
							],
							[
								35457,
								35484
							],
							[
								35518,
								35531
							],
							[
								35558,
								35563
							],
							[
								35587,
								35592
							],
							[
								35637,
								35647
							],
							[
								35677,
								35687
							],
							[
								35773,
								35778
							],
							[
								35898,
								35903
							],
							[
								35917,
								35925
							],
							[
								36147,
								36151
							],
							[
								36204,
								36208
							],
							[
								36296,
								36309
							],
							[
								36410,
								36423
							],
							[
								36684,
								36717
							],
							[
								36771,
								36775
							],
							[
								36889,
								36915
							],
							[
								37258,
								37291
							],
							[
								37638,
								37683
							],
							[
								37724,
								37728
							],
							[
								37745,
								37774
							],
							[
								37810,
								37816
							],
							[
								38200,
								38270
							],
							[
								38870,
								38942
							],
							[
								39175,
								39180
							],
							[
								39902,
								39906
							],
							[
								40127,
								40200
							],
							[
								41170,
								41194
							]
						],
						"symlist":
						[
							"function Window(width = 1280, height = 900)",
							"begin()",
							"end()",
							".handleCharMods = (char, mods) =>",
							"() =>",
							" () =>",
							"function toXML(obj)",
							" a =>",
							"function renderToXML(component)",
							"function GetFiletime(file, field = 'mtime')",
							"file =>",
							"function FindProjects(dirPtn = '../*/eagle', sortDirection = -1, sortField = 'mtime')",
							"fn =>",
							"minIndex = name =>",
							"file =>",
							"file =>",
							"hasBoth = name =>",
							"name =>",
							"([name, index]) =>",
							"(a, b) =>",
							"([name, index]) =>",
							"function SortFiles(files, direction = 1, statField = 'mtime')",
							"(a, b) =>",
							"([file]) =>",
							"function pick(it, n = 1)",
							"n = i =>",
							"function append(tag, attrs, children, parent, element)",
							"function render(doc, filename)",
							"function CollectParts(doc = project.schematic)",
							"e =>",
							"attr =>",
							"({ name, deviceset, device, value }) =>",
							"function CollectElements(doc = project.board)",
							"e =>",
							"({ name, library, package: pkg, value }) =>",
							"function CollectPartsElements(proj = project)",
							"e =>",
							"a =>",
							"e =>",
							"([{ x, y, ...element }, part]) =>",
							"function ListParts(doc = project.schematic)",
							"p =>",
							"({ name, deviceset, device, value }) =>",
							"function ShowParts(doc = project.schematic)",
							"({ name, deviceset, device, value }) =>",
							"function EaglePrint(file, output)",
							" (dir, base, ext) =>",
							"function main(...args)",
							"toNumber(n)",
							"wire(...args)",
							"coil({ rect, n, diameter, width })",
							"load(filename, project = globalThis.project)",
							"newProject(filename)",
							"sch: () =>",
							"brd: () =>",
							"nextProject()",
							"projectNames()",
							"quit(arg)",
							"renderToString(arg)",
							" (...args) =>",
							"() =>",
							".exit = () =>",
							".debug = (...args) =>",
							".show = value =>",
							"() =>",
							"(item, i, a) =>",
							"entry =>",
							"entry =>",
							"function Terminate(exitCode)",
							"function xml(strings, expressions)",
							" e =>",
							"function UpdateMeasures(board)",
							"lines =>",
							"e =>",
							"line =>",
							"function AlignItem(item)",
							"tr =>",
							"function AlignAll(doc = globalThis.document)",
							"function fixValue(element)",
							"function fixValues(doc)",
							"function coordMap(doc)",
							"p =>",
							"t =>",
							"function GetPolygons(d = doc)",
							"e =>",
							"function FindPolygons()",
							"doc =>",
							"e =>",
							"function RemovePolygons(p = polygons)",
							"([doc, list]) =>",
							"path =>",
							"function GetNames(doc, pred)",
							"pred = e =>",
							"sheet =>",
							"e =>",
							"e =>",
							" e =>",
							"([v, p]) =>",
							"([v, p]) =>",
							"() =>",
							"doc =>",
							"sheet =>",
							"function GetByName(doc, name)",
							"function CorrelateSchematicAndBoard(schematic, board)",
							"d =>",
							"n =>",
							"name =>",
							"doc =>",
							"function GetSheets(doc_or_proj)",
							"function SaveLibraries()",
							"([n, e]) =>",
							"(acc, [n, e]) =>",
							" e =>",
							"e =>",
							"(a, b) =>",
							"id =>",
							"id =>",
							"([n, e]) =>",
							"name =>",
							"(acc, [n, e]) =>",
							"function InitBoard(doc = project.board)",
							"([name, e]) =>",
							"async function testEagle(filename)",
							"([name, e]) =>",
							"e =>",
							"([name, i]) =>",
							"p =>",
							"(child, i, a) =>",
							"(child2, i2) =>",
							"([index, equal]) =>",
							"([index]) =>",
							"i =>",
							"i =>",
							"doc =>",
							"([file, e]) =>",
							"([file, xpath]) =>",
							" ([k, v]) =>",
							"function ModifyPath(p, fn = (dir, base, ext) => [dir, base, ext])",
							"() =>",
							"function AppendToFilename(p, str = '')",
							" (dir, base, ext) =>",
							"function SetSVGBackground(xml, color = '#ffffff')",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							"FileFunction = (fn, rfn = ReadFile, wfn = WriteFile, namefn = n => n, ...args) =>",
							" (filename, ...args) =>",
							" n =>",
							" data =>",
							" n =>",
							"function PutRowsColumns(rows)",
							"(acc, row) =>",
							"row =>",
							"(col, i) =>",
							"function GetLibrary(e)",
							"function ElementName(e)",
							"function GetRotation(element)",
							"function Package2Circuit(p)",
							"({ x, y }) =>",
							"pt =>",
							"pt =>",
							"({ x }) =>",
							"({ y }) =>",
							"pt =>",
							"pt =>",
							"coord =>",
							"x =>",
							"y =>",
							"({ x, y }) =>",
							"({ x, y }) =>",
							"function Contactref2Circuit(cref)",
							"e =>",
							"function Signal2Circuit(s)",
							"function Element2Circuit(element)",
							"function GetUsedPackages(doc = project.board)",
							"e =>",
							"function GetPackagePitch(pkg)",
							"pad =>",
							"function Eagle2Circuit(doc = project.board, width = 100, height = 100)",
							"function Eagle2CircuitJS(doc = project.schematic, scale = 50, sheet = 0)",
							" n =>",
							"e =>",
							"function MakeGraph(board = project.board, ignore = /^(GND|[-+][0-9]+V)$/)",
							"function DrawGraph(g, w)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADxAwAAR3JhcGgKICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pCiAgb25VcGRhdGVOb2RlID0gbm9kZSA9PgogIG9uVXBkYXRlRWRnZSA9IGVkZ2UgPT4KICBvblJlbmRlckdyYXBoID0gZ3JhcGggPT4KICB1cGRhdGUgPSAoKSA9PgooKSA9PgogIGFkZE5vZGUobiwgY2hhcmdlID0gdGhpcy5jb25maWcuY2hhcmdlLCBtYXNzID0gdGhpcy5jb25maWcubWFzcykKKCkgPT4KICBmaW5kTm9kZSh2YWx1ZSwga2V5ID0gJ2xhYmVsJykKICBub2RlID0+CiAgcmFuZG9taXplKCkKICBhZGRFZGdlKGUpCiAgYWRkKG8pCiAgcHVzaCgpCiAgcmVzZXROb2RlcygpCipnZXRDb25uZWN0aW9ucyhub2RlLCBleGNsdWRlID0gbnVsbCkKICBpc0xlYWZOb2RlKG5vZGUpCipicmFuY2hOb2RlcygpCiAgZ2V0IGJib3goKQogIGNoZWNrUmVkcmF3KCkKICBmaW5kQmlnZ2VzdEdhcChhbmdsZXMpCiAgZGlzdHJpYnV0ZUxlYWZOb2RlcyA9ICgpID0+CiAgYyA9PgogIGMgPT4KICBjID0+CiAgbCA9PgogIHVwZGF0ZUFsbCgpCiAgcm91bmRBbGwocHJlYykKICBzZXJpYWxpemUoKQogIG5vZGUgPT4KTm9kZQogIGVkZ2UgPT4KRWRnZQogIGRlc2VyaWFsaXplKG5vZGVzLCBlZGdlcywgY29uZmlnKQogIGdldCByZWN0KCkKICBnZXQgY2VudGVyKCkKICB0cmFuc2xhdGUoeCwgeSkKTm9kZQogIHN0YXRpYyBjbG9uZShvdGhlcikKKCkgPT4KICBjb25zdHJ1Y3RvcihsYWJlbCwgY2hhcmdlID0gNjAsIG1hc3MgPSAxMDAsIHBybmcpCiAgcmVzZXQoKQogIGFwcGx5QXR0cmFjdGl2ZUZvcmNlKG4sIHNjYWxlID0gMC4xKQogIGFwcGx5UmVwdWxzaXZlRm9yY2Uobiwgc2NhbGUgPSAxKQogIHRvSlMoKQprZXkgPT4KRWRnZQogIGNvbnN0cnVjdG9yKG5vZGVfYSwgbm9kZV9iKQogIGdldCB4MSgpCiAgZ2V0IHkxKCkKICBnZXQgeDIoKQogIGdldCB5MigpCiAgc2V0IHgxKHYpCiAgc2V0IHkxKHYpCiAgc2V0IHgyKHYpCiAgc2V0IHkyKHYpCiAgdG9KUygpCk5vZGUKTm9kZQogIHRvSWR4KGdyYXBoKQogIGRyYXcoY3R4KQAAAAAAAAAA3gwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					5,
					3,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAADeDAAAV2luZG93KHdpZHRoID0gMTI4MCwgaGVpZ2h0ID0gOTAwKQogIGJlZ2luKCkKICBlbmQoKQogIC5oYW5kbGVDaGFyTW9kcyA9IChjaGFyLCBtb2RzKSA9PgooKSA9PgooKSA9PgogIHRvWE1MKG9iaikKYSA9PgogIHJlbmRlclRvWE1MKGNvbXBvbmVudCkKR2V0RmlsZXRpbWUoZmlsZSwgZmllbGQgPSAnbXRpbWUnKQogIGZpbGUgPT4KRmluZFByb2plY3RzKGRpclB0biA9ICcuLi8qL2VhZ2xlJywgc29ydERpcmVjdGlvbiA9IC0xLCBzb3J0RmllbGQgPSAnbXRpbWUnKQogIGZuID0+CiAgbWluSW5kZXggPSBuYW1lID0+CiAgZmlsZSA9PgogIGZpbGUgPT4KICBoYXNCb3RoID0gbmFtZSA9PgogIG5hbWUgPT4KKFtuYW1lLCBpbmRleF0pID0+CihhLCBiKSA9PgooW25hbWUsIGluZGV4XSkgPT4KU29ydEZpbGVzKGZpbGVzLCBkaXJlY3Rpb24gPSAxLCBzdGF0RmllbGQgPSAnbXRpbWUnKQooYSwgYikgPT4KKFtmaWxlXSkgPT4KICBwaWNrKGl0LCBuID0gMSkKICBuID0gaSA9PgogIGFwcGVuZCh0YWcsIGF0dHJzLCBjaGlsZHJlbiwgcGFyZW50LCBlbGVtZW50KQogIHJlbmRlcihkb2MsIGZpbGVuYW1lKQpDb2xsZWN0UGFydHMoZG9jID0gcHJvamVjdC5zY2hlbWF0aWMpCiAgZSA9PgogIGF0dHIgPT4KKHsgbmFtZSwgZGV2aWNlc2V0LCBkZXZpY2UsIHZhbHVlIH0pID0+CkNvbGxlY3RFbGVtZW50cyhkb2MgPSBwcm9qZWN0LmJvYXJkKQogIGUgPT4KKHsgbmFtZSwgbGlicmFyeSwgcGFja2FnZTogcGtnLCB2YWx1ZSB9KSA9PgpDb2xsZWN0UGFydHNFbGVtZW50cyhwcm9qID0gcHJvamVjdCkKICBlID0+CiAgYSA9PgogIGUgPT4KKFt7IHgsIHksIC4uLmVsZW1lbnQgfSwgcGFydF0pID0+Ckxpc3RQYXJ0cyhkb2MgPSBwcm9qZWN0LnNjaGVtYXRpYykKICBwID0+Cih7IG5hbWUsIGRldmljZXNldCwgZGV2aWNlLCB2YWx1ZSB9KSA9PgpTaG93UGFydHMoZG9jID0gcHJvamVjdC5zY2hlbWF0aWMpCih7IG5hbWUsIGRldmljZXNldCwgZGV2aWNlLCB2YWx1ZSB9KSA9PgpFYWdsZVByaW50KGZpbGUsIG91dHB1dCkKKGRpciwgYmFzZSwgZXh0KSA9PgogIG1haW4oLi4uYXJncykKICB0b051bWJlcihuKQogIHdpcmUoLi4uYXJncykKICBjb2lsKHsgcmVjdCwgbiwgZGlhbWV0ZXIsIHdpZHRoIH0pCiAgbG9hZChmaWxlbmFtZSwgcHJvamVjdCA9IGdsb2JhbFRoaXMucHJvamVjdCkKICBuZXdQcm9qZWN0KGZpbGVuYW1lKQogIHNjaDogKCkgPT4KICBicmQ6ICgpID0+CiAgbmV4dFByb2plY3QoKQogIHByb2plY3ROYW1lcygpCiAgcXVpdChhcmcpCiAgcmVuZGVyVG9TdHJpbmcoYXJnKQooLi4uYXJncykgPT4KKCkgPT4KICAuZXhpdCA9ICgpID0+CiAgLmRlYnVnID0gKC4uLmFyZ3MpID0+CiAgLnNob3cgPSB2YWx1ZSA9PgooKSA9PgooaXRlbSwgaSwgYSkgPT4KICBlbnRyeSA9PgogIGVudHJ5ID0+ClRlcm1pbmF0ZShleGl0Q29kZSkKICB4bWwoc3RyaW5ncywgZXhwcmVzc2lvbnMpCmUgPT4KVXBkYXRlTWVhc3VyZXMoYm9hcmQpCiAgbGluZXMgPT4KICBlID0+CiAgbGluZSA9PgpBbGlnbkl0ZW0oaXRlbSkKICB0ciA9PgpBbGlnbkFsbChkb2MgPSBnbG9iYWxUaGlzLmRvY3VtZW50KQogIGZpeFZhbHVlKGVsZW1lbnQpCiAgZml4VmFsdWVzKGRvYykKICBjb29yZE1hcChkb2MpCiAgcCA9PgogIHQgPT4KR2V0UG9seWdvbnMoZCA9IGRvYykKICBlID0+CkZpbmRQb2x5Z29ucygpCiAgZG9jID0+CiAgZSA9PgpSZW1vdmVQb2x5Z29ucyhwID0gcG9seWdvbnMpCihbZG9jLCBsaXN0XSkgPT4KICBwYXRoID0+CkdldE5hbWVzKGRvYywgcHJlZCkKICBwcmVkID0gZSA9PgogIHNoZWV0ID0+CiAgZSA9PgogIGUgPT4KZSA9PgooW3YsIHBdKSA9PgooW3YsIHBdKSA9PgooKSA9PgogIGRvYyA9PgogIHNoZWV0ID0+CkdldEJ5TmFtZShkb2MsIG5hbWUpCkNvcnJlbGF0ZVNjaGVtYXRpY0FuZEJvYXJkKHNjaGVtYXRpYywgYm9hcmQpCiAgZCA9PgogIG4gPT4KICBuYW1lID0+CiAgZG9jID0+CkdldFNoZWV0cyhkb2Nfb3JfcHJvaikKU2F2ZUxpYnJhcmllcygpCihbbiwgZV0pID0+CihhY2MsIFtuLCBlXSkgPT4KZSA9PgogIGUgPT4KKGEsIGIpID0+CiAgaWQgPT4KICBpZCA9PgooW24sIGVdKSA9PgogIG5hbWUgPT4KKGFjYywgW24sIGVdKSA9PgpJbml0Qm9hcmQoZG9jID0gcHJvamVjdC5ib2FyZCkKKFtuYW1lLCBlXSkgPT4KICB0ZXN0RWFnbGUoZmlsZW5hbWUpCihbbmFtZSwgZV0pID0+CiAgZSA9PgooW25hbWUsIGldKSA9PgogIHAgPT4KKGNoaWxkLCBpLCBhKSA9PgooY2hpbGQyLCBpMikgPT4KKFtpbmRleCwgZXF1YWxdKSA9PgooW2luZGV4XSkgPT4KICBpID0+CiAgaSA9PgogIGRvYyA9PgooW2ZpbGUsIGVdKSA9PgooW2ZpbGUsIHhwYXRoXSkgPT4KKFtrLCB2XSkgPT4KTW9kaWZ5UGF0aChwLCBmbiA9IChkaXIsIGJhc2UsIGV4dCkgPT4gW2RpciwgYmFzZSwgZXh0XSkKKCkgPT4KQXBwZW5kVG9GaWxlbmFtZShwLCBzdHIgPSAnJykKKGRpciwgYmFzZSwgZXh0KSA9PgpTZXRTVkdCYWNrZ3JvdW5kKHhtbCwgY29sb3IgPSAnI2ZmZmZmZicpCihlLCBuKSA9PgooZSwgbikgPT4KKGUsIG4pID0+CihlLCBuKSA9PgpGaWxlRnVuY3Rpb24gPSAoZm4sIHJmbiA9IFJlYWRGaWxlLCB3Zm4gPSBXcml0ZUZpbGUsIG5hbWVmbiA9IG4gPT4gbiwgLi4uYXJncykgPT4KKGZpbGVuYW1lLCAuLi5hcmdzKSA9PgpuID0+CmRhdGEgPT4KbiA9PgpQdXRSb3dzQ29sdW1ucyhyb3dzKQooYWNjLCByb3cpID0+CiAgcm93ID0+Cihjb2wsIGkpID0+CkdldExpYnJhcnkoZSkKRWxlbWVudE5hbWUoZSkKR2V0Um90YXRpb24oZWxlbWVudCkKUGFja2FnZTJDaXJjdWl0KHApCih7IHgsIHkgfSkgPT4KICBwdCA9PgogIHB0ID0+Cih7IHggfSkgPT4KKHsgeSB9KSA9PgogIHB0ID0+CiAgcHQgPT4KICBjb29yZCA9PgogIHggPT4KICB5ID0+Cih7IHgsIHkgfSkgPT4KKHsgeCwgeSB9KSA9PgpDb250YWN0cmVmMkNpcmN1aXQoY3JlZikKICBlID0+ClNpZ25hbDJDaXJjdWl0KHMpCkVsZW1lbnQyQ2lyY3VpdChlbGVtZW50KQpHZXRVc2VkUGFja2FnZXMoZG9jID0gcHJvamVjdC5ib2FyZCkKICBlID0+CkdldFBhY2thZ2VQaXRjaChwa2cpCiAgcGFkID0+CkVhZ2xlMkNpcmN1aXQoZG9jID0gcHJvamVjdC5ib2FyZCwgd2lkdGggPSAxMDAsIGhlaWdodCA9IDEwMCkKRWFnbGUyQ2lyY3VpdEpTKGRvYyA9IHByb2plY3Quc2NoZW1hdGljLCBzY2FsZSA9IDUwLCBzaGVldCA9IDApCm4gPT4KICBlID0+Ck1ha2VHcmFwaChib2FyZCA9IHByb2plY3QuYm9hcmQsIGlnbm9yZSA9IC9eKEdORHxbLStdWzAtOV0rVikkLykKRHJhd0dyYXBoKGcsIHcpAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					6,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-shell.js",
						"symkeys":
						[
							[
								3224,
								3267
							],
							[
								4053,
								4060
							],
							[
								4160,
								4165
							],
							[
								4261,
								4294
							],
							[
								4401,
								4406
							],
							[
								4469,
								4475
							],
							[
								4577,
								4596
							],
							[
								4618,
								4623
							],
							[
								4726,
								4757
							],
							[
								4808,
								4851
							],
							[
								4896,
								4903
							],
							[
								5004,
								5089
							],
							[
								5241,
								5246
							],
							[
								5291,
								5309
							],
							[
								5348,
								5355
							],
							[
								5404,
								5411
							],
							[
								5450,
								5467
							],
							[
								5514,
								5521
							],
							[
								5558,
								5576
							],
							[
								5599,
								5608
							],
							[
								5631,
								5649
							],
							[
								5660,
								5721
							],
							[
								5841,
								5850
							],
							[
								5887,
								5898
							],
							[
								5909,
								5933
							],
							[
								6014,
								6022
							],
							[
								6205,
								6259
							],
							[
								6478,
								6508
							],
							[
								7160,
								7206
							],
							[
								7246,
								7250
							],
							[
								7277,
								7284
							],
							[
								7370,
								7409
							],
							[
								7494,
								7539
							],
							[
								7577,
								7581
							],
							[
								7605,
								7648
							],
							[
								7727,
								7772
							],
							[
								7817,
								7821
							],
							[
								7871,
								7875
							],
							[
								7882,
								7886
							],
							[
								7918,
								7951
							],
							[
								7983,
								8026
							],
							[
								8101,
								8105
							],
							[
								8144,
								8183
							],
							[
								8229,
								8272
							],
							[
								8317,
								8356
							],
							[
								8452,
								8485
							],
							[
								8517,
								8537
							],
							[
								8784,
								8806
							],
							[
								11098,
								11109
							],
							[
								12299,
								12312
							],
							[
								12692,
								12726
							],
							[
								13230,
								13274
							],
							[
								13393,
								13413
							],
							[
								13728,
								13738
							],
							[
								13766,
								13776
							],
							[
								13812,
								13825
							],
							[
								14075,
								14089
							],
							[
								14981,
								14990
							],
							[
								15231,
								15250
							],
							[
								15792,
								15805
							],
							[
								15823,
								15828
							],
							[
								15879,
								15892
							],
							[
								15943,
								15964
							],
							[
								16361,
								16377
							],
							[
								16765,
								16770
							],
							[
								16808,
								16823
							],
							[
								16970,
								16978
							],
							[
								17019,
								17027
							],
							[
								17304,
								17332
							],
							[
								17399,
								17433
							],
							[
								17467,
								17472
							],
							[
								17494,
								17524
							],
							[
								17766,
								17774
							],
							[
								17841,
								17845
							],
							[
								17935,
								17942
							],
							[
								18282,
								18306
							],
							[
								18551,
								18556
							],
							[
								20286,
								20330
							],
							[
								20777,
								20803
							],
							[
								21505,
								21528
							],
							[
								21648,
								21670
							],
							[
								21921,
								21925
							],
							[
								22413,
								22417
							],
							[
								23034,
								23063
							],
							[
								23088,
								23092
							],
							[
								23168,
								23191
							],
							[
								23235,
								23241
							],
							[
								23269,
								23273
							],
							[
								23289,
								23326
							],
							[
								23348,
								23364
							],
							[
								23384,
								23391
							],
							[
								23448,
								23476
							],
							[
								23530,
								23541
							],
							[
								23624,
								23632
							],
							[
								23728,
								23732
							],
							[
								23882,
								23886
							],
							[
								23984,
								23989
							],
							[
								24049,
								24060
							],
							[
								24132,
								24143
							],
							[
								24230,
								24235
							],
							[
								24285,
								24291
							],
							[
								24388,
								24396
							],
							[
								24571,
								24600
							],
							[
								24693,
								24746
							],
							[
								24899,
								24903
							],
							[
								24957,
								24961
							],
							[
								25237,
								25244
							],
							[
								25266,
								25272
							],
							[
								25301,
								25332
							],
							[
								25466,
								25490
							],
							[
								25616,
								25627
							],
							[
								25645,
								25661
							],
							[
								25820,
								25825
							],
							[
								25849,
								25853
							],
							[
								25901,
								25910
							],
							[
								25978,
								25983
							],
							[
								26121,
								26126
							],
							[
								26248,
								26259
							],
							[
								26348,
								26355
							],
							[
								27001,
								27017
							],
							[
								29071,
								29110
							],
							[
								29152,
								29166
							],
							[
								29415,
								29449
							],
							[
								29788,
								29802
							],
							[
								29897,
								29901
							],
							[
								29923,
								29937
							],
							[
								29968,
								29972
							],
							[
								31272,
								31288
							],
							[
								31338,
								31353
							],
							[
								31412,
								31431
							],
							[
								31454,
								31466
							],
							[
								31555,
								31559
							],
							[
								31658,
								31662
							],
							[
								31881,
								31887
							],
							[
								31977,
								31991
							],
							[
								32020,
								32038
							],
							[
								32175,
								32187
							],
							[
								32217,
								32282
							],
							[
								32311,
								32316
							],
							[
								32455,
								32493
							],
							[
								32518,
								32538
							],
							[
								32567,
								32616
							],
							[
								32663,
								32673
							],
							[
								32846,
								32856
							],
							[
								32929,
								32939
							],
							[
								33010,
								33020
							],
							[
								33547,
								33628
							],
							[
								33639,
								33662
							],
							[
								33880,
								33885
							],
							[
								33968,
								33977
							],
							[
								34007,
								34013
							],
							[
								34029,
								34058
							],
							[
								34094,
								34107
							],
							[
								34338,
								34344
							],
							[
								34353,
								34364
							],
							[
								34432,
								34454
							],
							[
								34671,
								34694
							],
							[
								35106,
								35135
							],
							[
								35457,
								35484
							],
							[
								35518,
								35531
							],
							[
								35558,
								35563
							],
							[
								35587,
								35592
							],
							[
								35637,
								35647
							],
							[
								35677,
								35687
							],
							[
								35773,
								35778
							],
							[
								35898,
								35903
							],
							[
								35917,
								35925
							],
							[
								36147,
								36151
							],
							[
								36204,
								36208
							],
							[
								36296,
								36309
							],
							[
								36410,
								36423
							],
							[
								36684,
								36717
							],
							[
								36771,
								36775
							],
							[
								36889,
								36915
							],
							[
								37258,
								37291
							],
							[
								37638,
								37683
							],
							[
								37724,
								37728
							],
							[
								37745,
								37774
							],
							[
								37810,
								37816
							],
							[
								38200,
								38270
							],
							[
								38870,
								38942
							],
							[
								39175,
								39180
							],
							[
								39902,
								39906
							],
							[
								40127,
								40200
							],
							[
								41170,
								41194
							]
						],
						"symlist":
						[
							"function Window(width = 1280, height = 900)",
							"begin()",
							"end()",
							".handleCharMods = (char, mods) =>",
							"() =>",
							" () =>",
							"function toXML(obj)",
							" a =>",
							"function renderToXML(component)",
							"function GetFiletime(file, field = 'mtime')",
							"file =>",
							"function FindProjects(dirPtn = '../*/eagle', sortDirection = -1, sortField = 'mtime')",
							"fn =>",
							"minIndex = name =>",
							"file =>",
							"file =>",
							"hasBoth = name =>",
							"name =>",
							"([name, index]) =>",
							"(a, b) =>",
							"([name, index]) =>",
							"function SortFiles(files, direction = 1, statField = 'mtime')",
							"(a, b) =>",
							"([file]) =>",
							"function pick(it, n = 1)",
							"n = i =>",
							"function append(tag, attrs, children, parent, element)",
							"function render(doc, filename)",
							"function CollectParts(doc = project.schematic)",
							"e =>",
							"attr =>",
							"({ name, deviceset, device, value }) =>",
							"function CollectElements(doc = project.board)",
							"e =>",
							"({ name, library, package: pkg, value }) =>",
							"function CollectPartsElements(proj = project)",
							"e =>",
							"a =>",
							"e =>",
							"([{ x, y, ...element }, part]) =>",
							"function ListParts(doc = project.schematic)",
							"p =>",
							"({ name, deviceset, device, value }) =>",
							"function ShowParts(doc = project.schematic)",
							"({ name, deviceset, device, value }) =>",
							"function EaglePrint(file, output)",
							" (dir, base, ext) =>",
							"function main(...args)",
							"toNumber(n)",
							"wire(...args)",
							"coil({ rect, n, diameter, width })",
							"load(filename, project = globalThis.project)",
							"newProject(filename)",
							"sch: () =>",
							"brd: () =>",
							"nextProject()",
							"projectNames()",
							"quit(arg)",
							"renderToString(arg)",
							" (...args) =>",
							"() =>",
							".exit = () =>",
							".debug = (...args) =>",
							".show = value =>",
							"() =>",
							"(item, i, a) =>",
							"entry =>",
							"entry =>",
							"function Terminate(exitCode)",
							"function xml(strings, expressions)",
							" e =>",
							"function UpdateMeasures(board)",
							"lines =>",
							"e =>",
							"line =>",
							"function AlignItem(item)",
							"tr =>",
							"function AlignAll(doc = globalThis.document)",
							"function fixValue(element)",
							"function fixValues(doc)",
							"function coordMap(doc)",
							"p =>",
							"t =>",
							"function GetPolygons(d = doc)",
							"e =>",
							"function FindPolygons()",
							"doc =>",
							"e =>",
							"function RemovePolygons(p = polygons)",
							"([doc, list]) =>",
							"path =>",
							"function GetNames(doc, pred)",
							"pred = e =>",
							"sheet =>",
							"e =>",
							"e =>",
							" e =>",
							"([v, p]) =>",
							"([v, p]) =>",
							"() =>",
							"doc =>",
							"sheet =>",
							"function GetByName(doc, name)",
							"function CorrelateSchematicAndBoard(schematic, board)",
							"d =>",
							"n =>",
							"name =>",
							"doc =>",
							"function GetSheets(doc_or_proj)",
							"function SaveLibraries()",
							"([n, e]) =>",
							"(acc, [n, e]) =>",
							" e =>",
							"e =>",
							"(a, b) =>",
							"id =>",
							"id =>",
							"([n, e]) =>",
							"name =>",
							"(acc, [n, e]) =>",
							"function InitBoard(doc = project.board)",
							"([name, e]) =>",
							"async function testEagle(filename)",
							"([name, e]) =>",
							"e =>",
							"([name, i]) =>",
							"p =>",
							"(child, i, a) =>",
							"(child2, i2) =>",
							"([index, equal]) =>",
							"([index]) =>",
							"i =>",
							"i =>",
							"doc =>",
							"([file, e]) =>",
							"([file, xpath]) =>",
							" ([k, v]) =>",
							"function ModifyPath(p, fn = (dir, base, ext) => [dir, base, ext])",
							"() =>",
							"function AppendToFilename(p, str = '')",
							" (dir, base, ext) =>",
							"function SetSVGBackground(xml, color = '#ffffff')",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							"FileFunction = (fn, rfn = ReadFile, wfn = WriteFile, namefn = n => n, ...args) =>",
							" (filename, ...args) =>",
							" n =>",
							" data =>",
							" n =>",
							"function PutRowsColumns(rows)",
							"(acc, row) =>",
							"row =>",
							"(col, i) =>",
							"function GetLibrary(e)",
							"function ElementName(e)",
							"function GetRotation(element)",
							"function Package2Circuit(p)",
							"({ x, y }) =>",
							"pt =>",
							"pt =>",
							"({ x }) =>",
							"({ y }) =>",
							"pt =>",
							"pt =>",
							"coord =>",
							"x =>",
							"y =>",
							"({ x, y }) =>",
							"({ x, y }) =>",
							"function Contactref2Circuit(cref)",
							"e =>",
							"function Signal2Circuit(s)",
							"function Element2Circuit(element)",
							"function GetUsedPackages(doc = project.board)",
							"e =>",
							"function GetPackagePitch(pkg)",
							"pad =>",
							"function Eagle2Circuit(doc = project.board, width = 100, height = 100)",
							"function Eagle2CircuitJS(doc = project.schematic, scale = 50, sheet = 0)",
							" n =>",
							"e =>",
							"function MakeGraph(board = project.board, ignore = /^(GND|[-+][0-9]+V)$/)",
							"function DrawGraph(g, w)"
						]
					},
					"AQAAAAAAAAAAAAAA3gwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					7,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/draw-utils.js",
						"symkeys":
						[
							[
								533,
								576
							],
							[
								1450,
								1465
							],
							[
								1515,
								1540
							],
							[
								1600,
								1626
							],
							[
								1680,
								1708
							],
							[
								1766,
								1786
							],
							[
								1841,
								1865
							],
							[
								1924,
								1960
							],
							[
								2033,
								2072
							],
							[
								2146,
								2167
							],
							[
								2223,
								2245
							],
							[
								2302,
								2332
							],
							[
								2397,
								2435
							],
							[
								2508,
								2521
							],
							[
								2569,
								2592
							],
							[
								2650,
								2672
							],
							[
								2754,
								2758
							],
							[
								2786,
								2791
							],
							[
								2854,
								2859
							],
							[
								2927,
								2932
							],
							[
								3007,
								3011
							],
							[
								3035,
								3048
							],
							[
								3132,
								3147
							],
							[
								3223,
								3238
							],
							[
								3647,
								3652
							],
							[
								3729,
								3738
							],
							[
								3928,
								3952
							],
							[
								4363,
								4394
							],
							[
								4630,
								4733
							],
							[
								4929,
								4998
							]
						],
						"symlist":
						[
							" function GLFW(width, height, options = {})",
							"handlePos(x, y)",
							"handleSize(width, height)",
							"handleClose(window = this)",
							"handleRefresh(window = this)",
							"handleFocus(focused)",
							"handleIconify(iconified)",
							"handleFramebufferSize(width, height)",
							"handleMouseButton(button, action, mods)",
							"handleCursorPos(x, y)",
							"handleCursorEnter(cur)",
							"handleScroll(xoffset, yoffset)",
							"handleKey(key, scancode, action, mods)",
							"handleChar(c)",
							"handleCharMods(c, mods)",
							"handleDrop(argc, argv)",
							"GLFW",
							"get()",
							"get()",
							"get()",
							"GLFW",
							"move(...args)",
							"resize(...args)",
							"setTitle(title)",
							"end()",
							"show(mat)",
							" function Mat2Image(mat)",
							" function DrawImage(image, pos)",
							" function DrawCircle([x, y], radius, strokeWidth = 5, stroke = [255, 255, 255], fill = [255, 0, 0, 96])",
							" function DrawLine(p1, p2, strokeWidth = 5, stroke = [255, 255, 255])"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADeDAAAV2luZG93KHdpZHRoID0gMTI4MCwgaGVpZ2h0ID0gOTAwKQogIGJlZ2luKCkKICBlbmQoKQogIC5oYW5kbGVDaGFyTW9kcyA9IChjaGFyLCBtb2RzKSA9PgooKSA9PgooKSA9PgogIHRvWE1MKG9iaikKYSA9PgogIHJlbmRlclRvWE1MKGNvbXBvbmVudCkKR2V0RmlsZXRpbWUoZmlsZSwgZmllbGQgPSAnbXRpbWUnKQogIGZpbGUgPT4KRmluZFByb2plY3RzKGRpclB0biA9ICcuLi8qL2VhZ2xlJywgc29ydERpcmVjdGlvbiA9IC0xLCBzb3J0RmllbGQgPSAnbXRpbWUnKQogIGZuID0+CiAgbWluSW5kZXggPSBuYW1lID0+CiAgZmlsZSA9PgogIGZpbGUgPT4KICBoYXNCb3RoID0gbmFtZSA9PgogIG5hbWUgPT4KKFtuYW1lLCBpbmRleF0pID0+CihhLCBiKSA9PgooW25hbWUsIGluZGV4XSkgPT4KU29ydEZpbGVzKGZpbGVzLCBkaXJlY3Rpb24gPSAxLCBzdGF0RmllbGQgPSAnbXRpbWUnKQooYSwgYikgPT4KKFtmaWxlXSkgPT4KICBwaWNrKGl0LCBuID0gMSkKICBuID0gaSA9PgogIGFwcGVuZCh0YWcsIGF0dHJzLCBjaGlsZHJlbiwgcGFyZW50LCBlbGVtZW50KQogIHJlbmRlcihkb2MsIGZpbGVuYW1lKQpDb2xsZWN0UGFydHMoZG9jID0gcHJvamVjdC5zY2hlbWF0aWMpCiAgZSA9PgogIGF0dHIgPT4KKHsgbmFtZSwgZGV2aWNlc2V0LCBkZXZpY2UsIHZhbHVlIH0pID0+CkNvbGxlY3RFbGVtZW50cyhkb2MgPSBwcm9qZWN0LmJvYXJkKQogIGUgPT4KKHsgbmFtZSwgbGlicmFyeSwgcGFja2FnZTogcGtnLCB2YWx1ZSB9KSA9PgpDb2xsZWN0UGFydHNFbGVtZW50cyhwcm9qID0gcHJvamVjdCkKICBlID0+CiAgYSA9PgogIGUgPT4KKFt7IHgsIHksIC4uLmVsZW1lbnQgfSwgcGFydF0pID0+Ckxpc3RQYXJ0cyhkb2MgPSBwcm9qZWN0LnNjaGVtYXRpYykKICBwID0+Cih7IG5hbWUsIGRldmljZXNldCwgZGV2aWNlLCB2YWx1ZSB9KSA9PgpTaG93UGFydHMoZG9jID0gcHJvamVjdC5zY2hlbWF0aWMpCih7IG5hbWUsIGRldmljZXNldCwgZGV2aWNlLCB2YWx1ZSB9KSA9PgpFYWdsZVByaW50KGZpbGUsIG91dHB1dCkKKGRpciwgYmFzZSwgZXh0KSA9PgogIG1haW4oLi4uYXJncykKICB0b051bWJlcihuKQogIHdpcmUoLi4uYXJncykKICBjb2lsKHsgcmVjdCwgbiwgZGlhbWV0ZXIsIHdpZHRoIH0pCiAgbG9hZChmaWxlbmFtZSwgcHJvamVjdCA9IGdsb2JhbFRoaXMucHJvamVjdCkKICBuZXdQcm9qZWN0KGZpbGVuYW1lKQogIHNjaDogKCkgPT4KICBicmQ6ICgpID0+CiAgbmV4dFByb2plY3QoKQogIHByb2plY3ROYW1lcygpCiAgcXVpdChhcmcpCiAgcmVuZGVyVG9TdHJpbmcoYXJnKQooLi4uYXJncykgPT4KKCkgPT4KICAuZXhpdCA9ICgpID0+CiAgLmRlYnVnID0gKC4uLmFyZ3MpID0+CiAgLnNob3cgPSB2YWx1ZSA9PgooKSA9PgooaXRlbSwgaSwgYSkgPT4KICBlbnRyeSA9PgogIGVudHJ5ID0+ClRlcm1pbmF0ZShleGl0Q29kZSkKICB4bWwoc3RyaW5ncywgZXhwcmVzc2lvbnMpCmUgPT4KVXBkYXRlTWVhc3VyZXMoYm9hcmQpCiAgbGluZXMgPT4KICBlID0+CiAgbGluZSA9PgpBbGlnbkl0ZW0oaXRlbSkKICB0ciA9PgpBbGlnbkFsbChkb2MgPSBnbG9iYWxUaGlzLmRvY3VtZW50KQogIGZpeFZhbHVlKGVsZW1lbnQpCiAgZml4VmFsdWVzKGRvYykKICBjb29yZE1hcChkb2MpCiAgcCA9PgogIHQgPT4KR2V0UG9seWdvbnMoZCA9IGRvYykKICBlID0+CkZpbmRQb2x5Z29ucygpCiAgZG9jID0+CiAgZSA9PgpSZW1vdmVQb2x5Z29ucyhwID0gcG9seWdvbnMpCihbZG9jLCBsaXN0XSkgPT4KICBwYXRoID0+CkdldE5hbWVzKGRvYywgcHJlZCkKICBwcmVkID0gZSA9PgogIHNoZWV0ID0+CiAgZSA9PgogIGUgPT4KZSA9PgooW3YsIHBdKSA9PgooW3YsIHBdKSA9PgooKSA9PgogIGRvYyA9PgogIHNoZWV0ID0+CkdldEJ5TmFtZShkb2MsIG5hbWUpCkNvcnJlbGF0ZVNjaGVtYXRpY0FuZEJvYXJkKHNjaGVtYXRpYywgYm9hcmQpCiAgZCA9PgogIG4gPT4KICBuYW1lID0+CiAgZG9jID0+CkdldFNoZWV0cyhkb2Nfb3JfcHJvaikKU2F2ZUxpYnJhcmllcygpCihbbiwgZV0pID0+CihhY2MsIFtuLCBlXSkgPT4KZSA9PgogIGUgPT4KKGEsIGIpID0+CiAgaWQgPT4KICBpZCA9PgooW24sIGVdKSA9PgogIG5hbWUgPT4KKGFjYywgW24sIGVdKSA9PgpJbml0Qm9hcmQoZG9jID0gcHJvamVjdC5ib2FyZCkKKFtuYW1lLCBlXSkgPT4KICB0ZXN0RWFnbGUoZmlsZW5hbWUpCihbbmFtZSwgZV0pID0+CiAgZSA9PgooW25hbWUsIGldKSA9PgogIHAgPT4KKGNoaWxkLCBpLCBhKSA9PgooY2hpbGQyLCBpMikgPT4KKFtpbmRleCwgZXF1YWxdKSA9PgooW2luZGV4XSkgPT4KICBpID0+CiAgaSA9PgogIGRvYyA9PgooW2ZpbGUsIGVdKSA9PgooW2ZpbGUsIHhwYXRoXSkgPT4KKFtrLCB2XSkgPT4KTW9kaWZ5UGF0aChwLCBmbiA9IChkaXIsIGJhc2UsIGV4dCkgPT4gW2RpciwgYmFzZSwgZXh0XSkKKCkgPT4KQXBwZW5kVG9GaWxlbmFtZShwLCBzdHIgPSAnJykKKGRpciwgYmFzZSwgZXh0KSA9PgpTZXRTVkdCYWNrZ3JvdW5kKHhtbCwgY29sb3IgPSAnI2ZmZmZmZicpCihlLCBuKSA9PgooZSwgbikgPT4KKGUsIG4pID0+CihlLCBuKSA9PgpGaWxlRnVuY3Rpb24gPSAoZm4sIHJmbiA9IFJlYWRGaWxlLCB3Zm4gPSBXcml0ZUZpbGUsIG5hbWVmbiA9IG4gPT4gbiwgLi4uYXJncykgPT4KKGZpbGVuYW1lLCAuLi5hcmdzKSA9PgpuID0+CmRhdGEgPT4KbiA9PgpQdXRSb3dzQ29sdW1ucyhyb3dzKQooYWNjLCByb3cpID0+CiAgcm93ID0+Cihjb2wsIGkpID0+CkdldExpYnJhcnkoZSkKRWxlbWVudE5hbWUoZSkKR2V0Um90YXRpb24oZWxlbWVudCkKUGFja2FnZTJDaXJjdWl0KHApCih7IHgsIHkgfSkgPT4KICBwdCA9PgogIHB0ID0+Cih7IHggfSkgPT4KKHsgeSB9KSA9PgogIHB0ID0+CiAgcHQgPT4KICBjb29yZCA9PgogIHggPT4KICB5ID0+Cih7IHgsIHkgfSkgPT4KKHsgeCwgeSB9KSA9PgpDb250YWN0cmVmMkNpcmN1aXQoY3JlZikKICBlID0+ClNpZ25hbDJDaXJjdWl0KHMpCkVsZW1lbnQyQ2lyY3VpdChlbGVtZW50KQpHZXRVc2VkUGFja2FnZXMoZG9jID0gcHJvamVjdC5ib2FyZCkKICBlID0+CkdldFBhY2thZ2VQaXRjaChwa2cpCiAgcGFkID0+CkVhZ2xlMkNpcmN1aXQoZG9jID0gcHJvamVjdC5ib2FyZCwgd2lkdGggPSAxMDAsIGhlaWdodCA9IDEwMCkKRWFnbGUyQ2lyY3VpdEpTKGRvYyA9IHByb2plY3Quc2NoZW1hdGljLCBzY2FsZSA9IDUwLCBzaGVldCA9IDApCm4gPT4KICBlID0+Ck1ha2VHcmFwaChib2FyZCA9IHByb2plY3QuYm9hcmQsIGlnbm9yZSA9IC9eKEdORHxbLStdWzAtOV0rVikkLykKRHJhd0dyYXBoKGcsIHcpAAAAAAAAAAD1AgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					8,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-shell.js",
						"symkeys":
						[
							[
								3224,
								3267
							],
							[
								4053,
								4060
							],
							[
								4160,
								4165
							],
							[
								4261,
								4294
							],
							[
								4401,
								4406
							],
							[
								4469,
								4475
							],
							[
								4577,
								4596
							],
							[
								4618,
								4623
							],
							[
								4726,
								4757
							],
							[
								4808,
								4851
							],
							[
								4896,
								4903
							],
							[
								5004,
								5089
							],
							[
								5241,
								5246
							],
							[
								5291,
								5309
							],
							[
								5348,
								5355
							],
							[
								5404,
								5411
							],
							[
								5450,
								5467
							],
							[
								5514,
								5521
							],
							[
								5558,
								5576
							],
							[
								5599,
								5608
							],
							[
								5631,
								5649
							],
							[
								5660,
								5721
							],
							[
								5841,
								5850
							],
							[
								5887,
								5898
							],
							[
								5909,
								5933
							],
							[
								6014,
								6022
							],
							[
								6205,
								6259
							],
							[
								6478,
								6508
							],
							[
								7160,
								7206
							],
							[
								7246,
								7250
							],
							[
								7277,
								7284
							],
							[
								7370,
								7409
							],
							[
								7494,
								7539
							],
							[
								7577,
								7581
							],
							[
								7605,
								7648
							],
							[
								7727,
								7772
							],
							[
								7817,
								7821
							],
							[
								7871,
								7875
							],
							[
								7882,
								7886
							],
							[
								7918,
								7951
							],
							[
								7983,
								8026
							],
							[
								8101,
								8105
							],
							[
								8144,
								8183
							],
							[
								8229,
								8272
							],
							[
								8317,
								8356
							],
							[
								8452,
								8485
							],
							[
								8517,
								8537
							],
							[
								8784,
								8806
							],
							[
								11098,
								11109
							],
							[
								12299,
								12312
							],
							[
								12692,
								12726
							],
							[
								13230,
								13274
							],
							[
								13393,
								13413
							],
							[
								13728,
								13738
							],
							[
								13766,
								13776
							],
							[
								13812,
								13825
							],
							[
								14075,
								14089
							],
							[
								14981,
								14990
							],
							[
								15231,
								15250
							],
							[
								15792,
								15805
							],
							[
								15823,
								15828
							],
							[
								15879,
								15892
							],
							[
								15943,
								15964
							],
							[
								16361,
								16377
							],
							[
								16765,
								16770
							],
							[
								16808,
								16823
							],
							[
								16970,
								16978
							],
							[
								17019,
								17027
							],
							[
								17304,
								17332
							],
							[
								17399,
								17433
							],
							[
								17467,
								17472
							],
							[
								17494,
								17524
							],
							[
								17766,
								17774
							],
							[
								17841,
								17845
							],
							[
								17935,
								17942
							],
							[
								18282,
								18306
							],
							[
								18551,
								18556
							],
							[
								20286,
								20330
							],
							[
								20777,
								20803
							],
							[
								21505,
								21528
							],
							[
								21648,
								21670
							],
							[
								21921,
								21925
							],
							[
								22413,
								22417
							],
							[
								23034,
								23063
							],
							[
								23088,
								23092
							],
							[
								23168,
								23191
							],
							[
								23235,
								23241
							],
							[
								23269,
								23273
							],
							[
								23289,
								23326
							],
							[
								23348,
								23364
							],
							[
								23384,
								23391
							],
							[
								23448,
								23476
							],
							[
								23530,
								23541
							],
							[
								23624,
								23632
							],
							[
								23728,
								23732
							],
							[
								23882,
								23886
							],
							[
								23984,
								23989
							],
							[
								24049,
								24060
							],
							[
								24132,
								24143
							],
							[
								24230,
								24235
							],
							[
								24285,
								24291
							],
							[
								24388,
								24396
							],
							[
								24571,
								24600
							],
							[
								24693,
								24746
							],
							[
								24899,
								24903
							],
							[
								24957,
								24961
							],
							[
								25237,
								25244
							],
							[
								25266,
								25272
							],
							[
								25301,
								25332
							],
							[
								25466,
								25490
							],
							[
								25616,
								25627
							],
							[
								25645,
								25661
							],
							[
								25820,
								25825
							],
							[
								25849,
								25853
							],
							[
								25901,
								25910
							],
							[
								25978,
								25983
							],
							[
								26121,
								26126
							],
							[
								26248,
								26259
							],
							[
								26348,
								26355
							],
							[
								27001,
								27017
							],
							[
								29071,
								29110
							],
							[
								29152,
								29166
							],
							[
								29415,
								29449
							],
							[
								29788,
								29802
							],
							[
								29897,
								29901
							],
							[
								29923,
								29937
							],
							[
								29968,
								29972
							],
							[
								31272,
								31288
							],
							[
								31338,
								31353
							],
							[
								31412,
								31431
							],
							[
								31454,
								31466
							],
							[
								31555,
								31559
							],
							[
								31658,
								31662
							],
							[
								31881,
								31887
							],
							[
								31977,
								31991
							],
							[
								32020,
								32038
							],
							[
								32175,
								32187
							],
							[
								32217,
								32282
							],
							[
								32311,
								32316
							],
							[
								32455,
								32493
							],
							[
								32518,
								32538
							],
							[
								32567,
								32616
							],
							[
								32663,
								32673
							],
							[
								32846,
								32856
							],
							[
								32929,
								32939
							],
							[
								33010,
								33020
							],
							[
								33547,
								33628
							],
							[
								33639,
								33662
							],
							[
								33880,
								33885
							],
							[
								33968,
								33977
							],
							[
								34007,
								34013
							],
							[
								34029,
								34058
							],
							[
								34094,
								34107
							],
							[
								34338,
								34344
							],
							[
								34353,
								34364
							],
							[
								34432,
								34454
							],
							[
								34671,
								34694
							],
							[
								35106,
								35135
							],
							[
								35457,
								35484
							],
							[
								35518,
								35531
							],
							[
								35558,
								35563
							],
							[
								35587,
								35592
							],
							[
								35637,
								35647
							],
							[
								35677,
								35687
							],
							[
								35773,
								35778
							],
							[
								35898,
								35903
							],
							[
								35917,
								35925
							],
							[
								36147,
								36151
							],
							[
								36204,
								36208
							],
							[
								36296,
								36309
							],
							[
								36410,
								36423
							],
							[
								36684,
								36717
							],
							[
								36771,
								36775
							],
							[
								36889,
								36915
							],
							[
								37258,
								37291
							],
							[
								37638,
								37683
							],
							[
								37724,
								37728
							],
							[
								37745,
								37774
							],
							[
								37810,
								37816
							],
							[
								38200,
								38270
							],
							[
								38870,
								38942
							],
							[
								39175,
								39180
							],
							[
								39902,
								39906
							],
							[
								40127,
								40200
							],
							[
								41170,
								41194
							]
						],
						"symlist":
						[
							"function Window(width = 1280, height = 900)",
							"begin()",
							"end()",
							".handleCharMods = (char, mods) =>",
							"() =>",
							" () =>",
							"function toXML(obj)",
							" a =>",
							"function renderToXML(component)",
							"function GetFiletime(file, field = 'mtime')",
							"file =>",
							"function FindProjects(dirPtn = '../*/eagle', sortDirection = -1, sortField = 'mtime')",
							"fn =>",
							"minIndex = name =>",
							"file =>",
							"file =>",
							"hasBoth = name =>",
							"name =>",
							"([name, index]) =>",
							"(a, b) =>",
							"([name, index]) =>",
							"function SortFiles(files, direction = 1, statField = 'mtime')",
							"(a, b) =>",
							"([file]) =>",
							"function pick(it, n = 1)",
							"n = i =>",
							"function append(tag, attrs, children, parent, element)",
							"function render(doc, filename)",
							"function CollectParts(doc = project.schematic)",
							"e =>",
							"attr =>",
							"({ name, deviceset, device, value }) =>",
							"function CollectElements(doc = project.board)",
							"e =>",
							"({ name, library, package: pkg, value }) =>",
							"function CollectPartsElements(proj = project)",
							"e =>",
							"a =>",
							"e =>",
							"([{ x, y, ...element }, part]) =>",
							"function ListParts(doc = project.schematic)",
							"p =>",
							"({ name, deviceset, device, value }) =>",
							"function ShowParts(doc = project.schematic)",
							"({ name, deviceset, device, value }) =>",
							"function EaglePrint(file, output)",
							" (dir, base, ext) =>",
							"function main(...args)",
							"toNumber(n)",
							"wire(...args)",
							"coil({ rect, n, diameter, width })",
							"load(filename, project = globalThis.project)",
							"newProject(filename)",
							"sch: () =>",
							"brd: () =>",
							"nextProject()",
							"projectNames()",
							"quit(arg)",
							"renderToString(arg)",
							" (...args) =>",
							"() =>",
							".exit = () =>",
							".debug = (...args) =>",
							".show = value =>",
							"() =>",
							"(item, i, a) =>",
							"entry =>",
							"entry =>",
							"function Terminate(exitCode)",
							"function xml(strings, expressions)",
							" e =>",
							"function UpdateMeasures(board)",
							"lines =>",
							"e =>",
							"line =>",
							"function AlignItem(item)",
							"tr =>",
							"function AlignAll(doc = globalThis.document)",
							"function fixValue(element)",
							"function fixValues(doc)",
							"function coordMap(doc)",
							"p =>",
							"t =>",
							"function GetPolygons(d = doc)",
							"e =>",
							"function FindPolygons()",
							"doc =>",
							"e =>",
							"function RemovePolygons(p = polygons)",
							"([doc, list]) =>",
							"path =>",
							"function GetNames(doc, pred)",
							"pred = e =>",
							"sheet =>",
							"e =>",
							"e =>",
							" e =>",
							"([v, p]) =>",
							"([v, p]) =>",
							"() =>",
							"doc =>",
							"sheet =>",
							"function GetByName(doc, name)",
							"function CorrelateSchematicAndBoard(schematic, board)",
							"d =>",
							"n =>",
							"name =>",
							"doc =>",
							"function GetSheets(doc_or_proj)",
							"function SaveLibraries()",
							"([n, e]) =>",
							"(acc, [n, e]) =>",
							" e =>",
							"e =>",
							"(a, b) =>",
							"id =>",
							"id =>",
							"([n, e]) =>",
							"name =>",
							"(acc, [n, e]) =>",
							"function InitBoard(doc = project.board)",
							"([name, e]) =>",
							"async function testEagle(filename)",
							"([name, e]) =>",
							"e =>",
							"([name, i]) =>",
							"p =>",
							"(child, i, a) =>",
							"(child2, i2) =>",
							"([index, equal]) =>",
							"([index]) =>",
							"i =>",
							"i =>",
							"doc =>",
							"([file, e]) =>",
							"([file, xpath]) =>",
							" ([k, v]) =>",
							"function ModifyPath(p, fn = (dir, base, ext) => [dir, base, ext])",
							"() =>",
							"function AppendToFilename(p, str = '')",
							" (dir, base, ext) =>",
							"function SetSVGBackground(xml, color = '#ffffff')",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							"FileFunction = (fn, rfn = ReadFile, wfn = WriteFile, namefn = n => n, ...args) =>",
							" (filename, ...args) =>",
							" n =>",
							" data =>",
							" n =>",
							"function PutRowsColumns(rows)",
							"(acc, row) =>",
							"row =>",
							"(col, i) =>",
							"function GetLibrary(e)",
							"function ElementName(e)",
							"function GetRotation(element)",
							"function Package2Circuit(p)",
							"({ x, y }) =>",
							"pt =>",
							"pt =>",
							"({ x }) =>",
							"({ y }) =>",
							"pt =>",
							"pt =>",
							"coord =>",
							"x =>",
							"y =>",
							"({ x, y }) =>",
							"({ x, y }) =>",
							"function Contactref2Circuit(cref)",
							"e =>",
							"function Signal2Circuit(s)",
							"function Element2Circuit(element)",
							"function GetUsedPackages(doc = project.board)",
							"e =>",
							"function GetPackagePitch(pkg)",
							"pad =>",
							"function Eagle2Circuit(doc = project.board, width = 100, height = 100)",
							"function Eagle2CircuitJS(doc = project.schematic, scale = 50, sheet = 0)",
							" n =>",
							"e =>",
							"function MakeGraph(board = project.board, ignore = /^(GND|[-+][0-9]+V)$/)",
							"function DrawGraph(g, w)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD1AgAAR0xGVyh3aWR0aCwgaGVpZ2h0LCBvcHRpb25zID0ge30pCiAgaGFuZGxlUG9zKHgsIHkpCiAgaGFuZGxlU2l6ZSh3aWR0aCwgaGVpZ2h0KQogIGhhbmRsZUNsb3NlKHdpbmRvdyA9IHRoaXMpCiAgaGFuZGxlUmVmcmVzaCh3aW5kb3cgPSB0aGlzKQogIGhhbmRsZUZvY3VzKGZvY3VzZWQpCiAgaGFuZGxlSWNvbmlmeShpY29uaWZpZWQpCiAgaGFuZGxlRnJhbWVidWZmZXJTaXplKHdpZHRoLCBoZWlnaHQpCiAgaGFuZGxlTW91c2VCdXR0b24oYnV0dG9uLCBhY3Rpb24sIG1vZHMpCiAgaGFuZGxlQ3Vyc29yUG9zKHgsIHkpCiAgaGFuZGxlQ3Vyc29yRW50ZXIoY3VyKQogIGhhbmRsZVNjcm9sbCh4b2Zmc2V0LCB5b2Zmc2V0KQogIGhhbmRsZUtleShrZXksIHNjYW5jb2RlLCBhY3Rpb24sIG1vZHMpCiAgaGFuZGxlQ2hhcihjKQogIGhhbmRsZUNoYXJNb2RzKGMsIG1vZHMpCiAgaGFuZGxlRHJvcChhcmdjLCBhcmd2KQpHTEZXCiAgZ2V0KCkKICBnZXQoKQogIGdldCgpCkdMRlcKICBtb3ZlKC4uLmFyZ3MpCiAgcmVzaXplKC4uLmFyZ3MpCiAgc2V0VGl0bGUodGl0bGUpCiAgZW5kKCkKICBzaG93KG1hdCkKTWF0MkltYWdlKG1hdCkKRHJhd0ltYWdlKGltYWdlLCBwb3MpCkRyYXdDaXJjbGUoW3gsIHldLCByYWRpdXMsIHN0cm9rZVdpZHRoID0gNSwgc3Ryb2tlID0gWzI1NSwgMjU1LCAyNTVdLCBmaWxsID0gWzI1NSwgMCwgMCwgOTZdKQpEcmF3TGluZShwMSwgcDIsIHN0cm9rZVdpZHRoID0gNSwgc3Ryb2tlID0gWzI1NSwgMjU1LCAyNTVdKQAAAAAAAAAA3gwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					9,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/draw-utils.js",
						"symkeys":
						[
							[
								533,
								576
							],
							[
								1450,
								1465
							],
							[
								1515,
								1540
							],
							[
								1600,
								1626
							],
							[
								1680,
								1708
							],
							[
								1766,
								1786
							],
							[
								1841,
								1865
							],
							[
								1924,
								1960
							],
							[
								2033,
								2072
							],
							[
								2146,
								2167
							],
							[
								2223,
								2245
							],
							[
								2302,
								2332
							],
							[
								2397,
								2435
							],
							[
								2508,
								2521
							],
							[
								2569,
								2592
							],
							[
								2650,
								2672
							],
							[
								2754,
								2758
							],
							[
								2786,
								2791
							],
							[
								2854,
								2859
							],
							[
								2927,
								2932
							],
							[
								3007,
								3011
							],
							[
								3035,
								3048
							],
							[
								3132,
								3147
							],
							[
								3223,
								3238
							],
							[
								3647,
								3652
							],
							[
								3729,
								3738
							],
							[
								3928,
								3952
							],
							[
								4363,
								4394
							],
							[
								4630,
								4733
							],
							[
								4929,
								4998
							]
						],
						"symlist":
						[
							" function GLFW(width, height, options = {})",
							"handlePos(x, y)",
							"handleSize(width, height)",
							"handleClose(window = this)",
							"handleRefresh(window = this)",
							"handleFocus(focused)",
							"handleIconify(iconified)",
							"handleFramebufferSize(width, height)",
							"handleMouseButton(button, action, mods)",
							"handleCursorPos(x, y)",
							"handleCursorEnter(cur)",
							"handleScroll(xoffset, yoffset)",
							"handleKey(key, scancode, action, mods)",
							"handleChar(c)",
							"handleCharMods(c, mods)",
							"handleDrop(argc, argv)",
							"GLFW",
							"get()",
							"get()",
							"get()",
							"GLFW",
							"move(...args)",
							"resize(...args)",
							"setTitle(title)",
							"end()",
							"show(mat)",
							" function Mat2Image(mat)",
							" function DrawImage(image, pos)",
							" function DrawCircle([x, y], radius, strokeWidth = 5, stroke = [255, 255, 255], fill = [255, 0, 0, 96])",
							" function DrawLine(p1, p2, strokeWidth = 5, stroke = [255, 255, 255])"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADeDAAAV2luZG93KHdpZHRoID0gMTI4MCwgaGVpZ2h0ID0gOTAwKQogIGJlZ2luKCkKICBlbmQoKQogIC5oYW5kbGVDaGFyTW9kcyA9IChjaGFyLCBtb2RzKSA9PgooKSA9PgooKSA9PgogIHRvWE1MKG9iaikKYSA9PgogIHJlbmRlclRvWE1MKGNvbXBvbmVudCkKR2V0RmlsZXRpbWUoZmlsZSwgZmllbGQgPSAnbXRpbWUnKQogIGZpbGUgPT4KRmluZFByb2plY3RzKGRpclB0biA9ICcuLi8qL2VhZ2xlJywgc29ydERpcmVjdGlvbiA9IC0xLCBzb3J0RmllbGQgPSAnbXRpbWUnKQogIGZuID0+CiAgbWluSW5kZXggPSBuYW1lID0+CiAgZmlsZSA9PgogIGZpbGUgPT4KICBoYXNCb3RoID0gbmFtZSA9PgogIG5hbWUgPT4KKFtuYW1lLCBpbmRleF0pID0+CihhLCBiKSA9PgooW25hbWUsIGluZGV4XSkgPT4KU29ydEZpbGVzKGZpbGVzLCBkaXJlY3Rpb24gPSAxLCBzdGF0RmllbGQgPSAnbXRpbWUnKQooYSwgYikgPT4KKFtmaWxlXSkgPT4KICBwaWNrKGl0LCBuID0gMSkKICBuID0gaSA9PgogIGFwcGVuZCh0YWcsIGF0dHJzLCBjaGlsZHJlbiwgcGFyZW50LCBlbGVtZW50KQogIHJlbmRlcihkb2MsIGZpbGVuYW1lKQpDb2xsZWN0UGFydHMoZG9jID0gcHJvamVjdC5zY2hlbWF0aWMpCiAgZSA9PgogIGF0dHIgPT4KKHsgbmFtZSwgZGV2aWNlc2V0LCBkZXZpY2UsIHZhbHVlIH0pID0+CkNvbGxlY3RFbGVtZW50cyhkb2MgPSBwcm9qZWN0LmJvYXJkKQogIGUgPT4KKHsgbmFtZSwgbGlicmFyeSwgcGFja2FnZTogcGtnLCB2YWx1ZSB9KSA9PgpDb2xsZWN0UGFydHNFbGVtZW50cyhwcm9qID0gcHJvamVjdCkKICBlID0+CiAgYSA9PgogIGUgPT4KKFt7IHgsIHksIC4uLmVsZW1lbnQgfSwgcGFydF0pID0+Ckxpc3RQYXJ0cyhkb2MgPSBwcm9qZWN0LnNjaGVtYXRpYykKICBwID0+Cih7IG5hbWUsIGRldmljZXNldCwgZGV2aWNlLCB2YWx1ZSB9KSA9PgpTaG93UGFydHMoZG9jID0gcHJvamVjdC5zY2hlbWF0aWMpCih7IG5hbWUsIGRldmljZXNldCwgZGV2aWNlLCB2YWx1ZSB9KSA9PgpFYWdsZVByaW50KGZpbGUsIG91dHB1dCkKKGRpciwgYmFzZSwgZXh0KSA9PgogIG1haW4oLi4uYXJncykKICB0b051bWJlcihuKQogIHdpcmUoLi4uYXJncykKICBjb2lsKHsgcmVjdCwgbiwgZGlhbWV0ZXIsIHdpZHRoIH0pCiAgbG9hZChmaWxlbmFtZSwgcHJvamVjdCA9IGdsb2JhbFRoaXMucHJvamVjdCkKICBuZXdQcm9qZWN0KGZpbGVuYW1lKQogIHNjaDogKCkgPT4KICBicmQ6ICgpID0+CiAgbmV4dFByb2plY3QoKQogIHByb2plY3ROYW1lcygpCiAgcXVpdChhcmcpCiAgcmVuZGVyVG9TdHJpbmcoYXJnKQooLi4uYXJncykgPT4KKCkgPT4KICAuZXhpdCA9ICgpID0+CiAgLmRlYnVnID0gKC4uLmFyZ3MpID0+CiAgLnNob3cgPSB2YWx1ZSA9PgooKSA9PgooaXRlbSwgaSwgYSkgPT4KICBlbnRyeSA9PgogIGVudHJ5ID0+ClRlcm1pbmF0ZShleGl0Q29kZSkKICB4bWwoc3RyaW5ncywgZXhwcmVzc2lvbnMpCmUgPT4KVXBkYXRlTWVhc3VyZXMoYm9hcmQpCiAgbGluZXMgPT4KICBlID0+CiAgbGluZSA9PgpBbGlnbkl0ZW0oaXRlbSkKICB0ciA9PgpBbGlnbkFsbChkb2MgPSBnbG9iYWxUaGlzLmRvY3VtZW50KQogIGZpeFZhbHVlKGVsZW1lbnQpCiAgZml4VmFsdWVzKGRvYykKICBjb29yZE1hcChkb2MpCiAgcCA9PgogIHQgPT4KR2V0UG9seWdvbnMoZCA9IGRvYykKICBlID0+CkZpbmRQb2x5Z29ucygpCiAgZG9jID0+CiAgZSA9PgpSZW1vdmVQb2x5Z29ucyhwID0gcG9seWdvbnMpCihbZG9jLCBsaXN0XSkgPT4KICBwYXRoID0+CkdldE5hbWVzKGRvYywgcHJlZCkKICBwcmVkID0gZSA9PgogIHNoZWV0ID0+CiAgZSA9PgogIGUgPT4KZSA9PgooW3YsIHBdKSA9PgooW3YsIHBdKSA9PgooKSA9PgogIGRvYyA9PgogIHNoZWV0ID0+CkdldEJ5TmFtZShkb2MsIG5hbWUpCkNvcnJlbGF0ZVNjaGVtYXRpY0FuZEJvYXJkKHNjaGVtYXRpYywgYm9hcmQpCiAgZCA9PgogIG4gPT4KICBuYW1lID0+CiAgZG9jID0+CkdldFNoZWV0cyhkb2Nfb3JfcHJvaikKU2F2ZUxpYnJhcmllcygpCihbbiwgZV0pID0+CihhY2MsIFtuLCBlXSkgPT4KZSA9PgogIGUgPT4KKGEsIGIpID0+CiAgaWQgPT4KICBpZCA9PgooW24sIGVdKSA9PgogIG5hbWUgPT4KKGFjYywgW24sIGVdKSA9PgpJbml0Qm9hcmQoZG9jID0gcHJvamVjdC5ib2FyZCkKKFtuYW1lLCBlXSkgPT4KICB0ZXN0RWFnbGUoZmlsZW5hbWUpCihbbmFtZSwgZV0pID0+CiAgZSA9PgooW25hbWUsIGldKSA9PgogIHAgPT4KKGNoaWxkLCBpLCBhKSA9PgooY2hpbGQyLCBpMikgPT4KKFtpbmRleCwgZXF1YWxdKSA9PgooW2luZGV4XSkgPT4KICBpID0+CiAgaSA9PgogIGRvYyA9PgooW2ZpbGUsIGVdKSA9PgooW2ZpbGUsIHhwYXRoXSkgPT4KKFtrLCB2XSkgPT4KTW9kaWZ5UGF0aChwLCBmbiA9IChkaXIsIGJhc2UsIGV4dCkgPT4gW2RpciwgYmFzZSwgZXh0XSkKKCkgPT4KQXBwZW5kVG9GaWxlbmFtZShwLCBzdHIgPSAnJykKKGRpciwgYmFzZSwgZXh0KSA9PgpTZXRTVkdCYWNrZ3JvdW5kKHhtbCwgY29sb3IgPSAnI2ZmZmZmZicpCihlLCBuKSA9PgooZSwgbikgPT4KKGUsIG4pID0+CihlLCBuKSA9PgpGaWxlRnVuY3Rpb24gPSAoZm4sIHJmbiA9IFJlYWRGaWxlLCB3Zm4gPSBXcml0ZUZpbGUsIG5hbWVmbiA9IG4gPT4gbiwgLi4uYXJncykgPT4KKGZpbGVuYW1lLCAuLi5hcmdzKSA9PgpuID0+CmRhdGEgPT4KbiA9PgpQdXRSb3dzQ29sdW1ucyhyb3dzKQooYWNjLCByb3cpID0+CiAgcm93ID0+Cihjb2wsIGkpID0+CkdldExpYnJhcnkoZSkKRWxlbWVudE5hbWUoZSkKR2V0Um90YXRpb24oZWxlbWVudCkKUGFja2FnZTJDaXJjdWl0KHApCih7IHgsIHkgfSkgPT4KICBwdCA9PgogIHB0ID0+Cih7IHggfSkgPT4KKHsgeSB9KSA9PgogIHB0ID0+CiAgcHQgPT4KICBjb29yZCA9PgogIHggPT4KICB5ID0+Cih7IHgsIHkgfSkgPT4KKHsgeCwgeSB9KSA9PgpDb250YWN0cmVmMkNpcmN1aXQoY3JlZikKICBlID0+ClNpZ25hbDJDaXJjdWl0KHMpCkVsZW1lbnQyQ2lyY3VpdChlbGVtZW50KQpHZXRVc2VkUGFja2FnZXMoZG9jID0gcHJvamVjdC5ib2FyZCkKICBlID0+CkdldFBhY2thZ2VQaXRjaChwa2cpCiAgcGFkID0+CkVhZ2xlMkNpcmN1aXQoZG9jID0gcHJvamVjdC5ib2FyZCwgd2lkdGggPSAxMDAsIGhlaWdodCA9IDEwMCkKRWFnbGUyQ2lyY3VpdEpTKGRvYyA9IHByb2plY3Quc2NoZW1hdGljLCBzY2FsZSA9IDUwLCBzaGVldCA9IDApCm4gPT4KICBlID0+Ck1ha2VHcmFwaChib2FyZCA9IHByb2plY3QuYm9hcmQsIGlnbm9yZSA9IC9eKEdORHxbLStdWzAtOV0rVikkLykKRHJhd0dyYXBoKGcsIHcpAAAAAAAAAAD1AgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					10,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-shell.js",
						"symkeys":
						[
							[
								3224,
								3267
							],
							[
								4053,
								4060
							],
							[
								4160,
								4165
							],
							[
								4261,
								4294
							],
							[
								4401,
								4406
							],
							[
								4469,
								4475
							],
							[
								4577,
								4596
							],
							[
								4618,
								4623
							],
							[
								4726,
								4757
							],
							[
								4808,
								4851
							],
							[
								4896,
								4903
							],
							[
								5004,
								5089
							],
							[
								5241,
								5246
							],
							[
								5291,
								5309
							],
							[
								5348,
								5355
							],
							[
								5404,
								5411
							],
							[
								5450,
								5467
							],
							[
								5514,
								5521
							],
							[
								5558,
								5576
							],
							[
								5599,
								5608
							],
							[
								5631,
								5649
							],
							[
								5660,
								5721
							],
							[
								5841,
								5850
							],
							[
								5887,
								5898
							],
							[
								5909,
								5933
							],
							[
								6014,
								6022
							],
							[
								6205,
								6259
							],
							[
								6478,
								6508
							],
							[
								7160,
								7206
							],
							[
								7246,
								7250
							],
							[
								7277,
								7284
							],
							[
								7370,
								7409
							],
							[
								7494,
								7539
							],
							[
								7577,
								7581
							],
							[
								7605,
								7648
							],
							[
								7727,
								7772
							],
							[
								7817,
								7821
							],
							[
								7871,
								7875
							],
							[
								7882,
								7886
							],
							[
								7918,
								7951
							],
							[
								7983,
								8026
							],
							[
								8101,
								8105
							],
							[
								8144,
								8183
							],
							[
								8229,
								8272
							],
							[
								8317,
								8356
							],
							[
								8452,
								8485
							],
							[
								8517,
								8537
							],
							[
								8784,
								8806
							],
							[
								11098,
								11109
							],
							[
								12299,
								12312
							],
							[
								12692,
								12726
							],
							[
								13230,
								13274
							],
							[
								13393,
								13413
							],
							[
								13728,
								13738
							],
							[
								13766,
								13776
							],
							[
								13812,
								13825
							],
							[
								14075,
								14089
							],
							[
								14981,
								14990
							],
							[
								15231,
								15250
							],
							[
								15792,
								15805
							],
							[
								15823,
								15828
							],
							[
								15879,
								15892
							],
							[
								15943,
								15964
							],
							[
								16361,
								16377
							],
							[
								16765,
								16770
							],
							[
								16808,
								16823
							],
							[
								16970,
								16978
							],
							[
								17019,
								17027
							],
							[
								17304,
								17332
							],
							[
								17399,
								17433
							],
							[
								17467,
								17472
							],
							[
								17494,
								17524
							],
							[
								17766,
								17774
							],
							[
								17841,
								17845
							],
							[
								17935,
								17942
							],
							[
								18282,
								18306
							],
							[
								18551,
								18556
							],
							[
								20286,
								20330
							],
							[
								20777,
								20803
							],
							[
								21505,
								21528
							],
							[
								21648,
								21670
							],
							[
								21921,
								21925
							],
							[
								22413,
								22417
							],
							[
								23034,
								23063
							],
							[
								23088,
								23092
							],
							[
								23168,
								23191
							],
							[
								23235,
								23241
							],
							[
								23269,
								23273
							],
							[
								23289,
								23326
							],
							[
								23348,
								23364
							],
							[
								23384,
								23391
							],
							[
								23448,
								23476
							],
							[
								23530,
								23541
							],
							[
								23624,
								23632
							],
							[
								23728,
								23732
							],
							[
								23882,
								23886
							],
							[
								23984,
								23989
							],
							[
								24049,
								24060
							],
							[
								24132,
								24143
							],
							[
								24230,
								24235
							],
							[
								24285,
								24291
							],
							[
								24388,
								24396
							],
							[
								24571,
								24600
							],
							[
								24693,
								24746
							],
							[
								24899,
								24903
							],
							[
								24957,
								24961
							],
							[
								25237,
								25244
							],
							[
								25266,
								25272
							],
							[
								25301,
								25332
							],
							[
								25466,
								25490
							],
							[
								25616,
								25627
							],
							[
								25645,
								25661
							],
							[
								25820,
								25825
							],
							[
								25849,
								25853
							],
							[
								25901,
								25910
							],
							[
								25978,
								25983
							],
							[
								26121,
								26126
							],
							[
								26248,
								26259
							],
							[
								26348,
								26355
							],
							[
								27001,
								27017
							],
							[
								29071,
								29110
							],
							[
								29152,
								29166
							],
							[
								29415,
								29449
							],
							[
								29788,
								29802
							],
							[
								29897,
								29901
							],
							[
								29923,
								29937
							],
							[
								29968,
								29972
							],
							[
								31272,
								31288
							],
							[
								31338,
								31353
							],
							[
								31412,
								31431
							],
							[
								31454,
								31466
							],
							[
								31555,
								31559
							],
							[
								31658,
								31662
							],
							[
								31881,
								31887
							],
							[
								31977,
								31991
							],
							[
								32020,
								32038
							],
							[
								32175,
								32187
							],
							[
								32217,
								32282
							],
							[
								32311,
								32316
							],
							[
								32455,
								32493
							],
							[
								32518,
								32538
							],
							[
								32567,
								32616
							],
							[
								32663,
								32673
							],
							[
								32846,
								32856
							],
							[
								32929,
								32939
							],
							[
								33010,
								33020
							],
							[
								33547,
								33628
							],
							[
								33639,
								33662
							],
							[
								33880,
								33885
							],
							[
								33968,
								33977
							],
							[
								34007,
								34013
							],
							[
								34029,
								34058
							],
							[
								34094,
								34107
							],
							[
								34338,
								34344
							],
							[
								34353,
								34364
							],
							[
								34432,
								34454
							],
							[
								34671,
								34694
							],
							[
								35106,
								35135
							],
							[
								35457,
								35484
							],
							[
								35518,
								35531
							],
							[
								35558,
								35563
							],
							[
								35587,
								35592
							],
							[
								35637,
								35647
							],
							[
								35677,
								35687
							],
							[
								35773,
								35778
							],
							[
								35898,
								35903
							],
							[
								35917,
								35925
							],
							[
								36147,
								36151
							],
							[
								36204,
								36208
							],
							[
								36296,
								36309
							],
							[
								36410,
								36423
							],
							[
								36684,
								36717
							],
							[
								36771,
								36775
							],
							[
								36889,
								36915
							],
							[
								37258,
								37291
							],
							[
								37638,
								37683
							],
							[
								37724,
								37728
							],
							[
								37745,
								37774
							],
							[
								37810,
								37816
							],
							[
								38200,
								38270
							],
							[
								38870,
								38942
							],
							[
								39175,
								39180
							],
							[
								39902,
								39906
							],
							[
								40127,
								40200
							],
							[
								41170,
								41194
							]
						],
						"symlist":
						[
							"function Window(width = 1280, height = 900)",
							"begin()",
							"end()",
							".handleCharMods = (char, mods) =>",
							"() =>",
							" () =>",
							"function toXML(obj)",
							" a =>",
							"function renderToXML(component)",
							"function GetFiletime(file, field = 'mtime')",
							"file =>",
							"function FindProjects(dirPtn = '../*/eagle', sortDirection = -1, sortField = 'mtime')",
							"fn =>",
							"minIndex = name =>",
							"file =>",
							"file =>",
							"hasBoth = name =>",
							"name =>",
							"([name, index]) =>",
							"(a, b) =>",
							"([name, index]) =>",
							"function SortFiles(files, direction = 1, statField = 'mtime')",
							"(a, b) =>",
							"([file]) =>",
							"function pick(it, n = 1)",
							"n = i =>",
							"function append(tag, attrs, children, parent, element)",
							"function render(doc, filename)",
							"function CollectParts(doc = project.schematic)",
							"e =>",
							"attr =>",
							"({ name, deviceset, device, value }) =>",
							"function CollectElements(doc = project.board)",
							"e =>",
							"({ name, library, package: pkg, value }) =>",
							"function CollectPartsElements(proj = project)",
							"e =>",
							"a =>",
							"e =>",
							"([{ x, y, ...element }, part]) =>",
							"function ListParts(doc = project.schematic)",
							"p =>",
							"({ name, deviceset, device, value }) =>",
							"function ShowParts(doc = project.schematic)",
							"({ name, deviceset, device, value }) =>",
							"function EaglePrint(file, output)",
							" (dir, base, ext) =>",
							"function main(...args)",
							"toNumber(n)",
							"wire(...args)",
							"coil({ rect, n, diameter, width })",
							"load(filename, project = globalThis.project)",
							"newProject(filename)",
							"sch: () =>",
							"brd: () =>",
							"nextProject()",
							"projectNames()",
							"quit(arg)",
							"renderToString(arg)",
							" (...args) =>",
							"() =>",
							".exit = () =>",
							".debug = (...args) =>",
							".show = value =>",
							"() =>",
							"(item, i, a) =>",
							"entry =>",
							"entry =>",
							"function Terminate(exitCode)",
							"function xml(strings, expressions)",
							" e =>",
							"function UpdateMeasures(board)",
							"lines =>",
							"e =>",
							"line =>",
							"function AlignItem(item)",
							"tr =>",
							"function AlignAll(doc = globalThis.document)",
							"function fixValue(element)",
							"function fixValues(doc)",
							"function coordMap(doc)",
							"p =>",
							"t =>",
							"function GetPolygons(d = doc)",
							"e =>",
							"function FindPolygons()",
							"doc =>",
							"e =>",
							"function RemovePolygons(p = polygons)",
							"([doc, list]) =>",
							"path =>",
							"function GetNames(doc, pred)",
							"pred = e =>",
							"sheet =>",
							"e =>",
							"e =>",
							" e =>",
							"([v, p]) =>",
							"([v, p]) =>",
							"() =>",
							"doc =>",
							"sheet =>",
							"function GetByName(doc, name)",
							"function CorrelateSchematicAndBoard(schematic, board)",
							"d =>",
							"n =>",
							"name =>",
							"doc =>",
							"function GetSheets(doc_or_proj)",
							"function SaveLibraries()",
							"([n, e]) =>",
							"(acc, [n, e]) =>",
							" e =>",
							"e =>",
							"(a, b) =>",
							"id =>",
							"id =>",
							"([n, e]) =>",
							"name =>",
							"(acc, [n, e]) =>",
							"function InitBoard(doc = project.board)",
							"([name, e]) =>",
							"async function testEagle(filename)",
							"([name, e]) =>",
							"e =>",
							"([name, i]) =>",
							"p =>",
							"(child, i, a) =>",
							"(child2, i2) =>",
							"([index, equal]) =>",
							"([index]) =>",
							"i =>",
							"i =>",
							"doc =>",
							"([file, e]) =>",
							"([file, xpath]) =>",
							" ([k, v]) =>",
							"function ModifyPath(p, fn = (dir, base, ext) => [dir, base, ext])",
							"() =>",
							"function AppendToFilename(p, str = '')",
							" (dir, base, ext) =>",
							"function SetSVGBackground(xml, color = '#ffffff')",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							"FileFunction = (fn, rfn = ReadFile, wfn = WriteFile, namefn = n => n, ...args) =>",
							" (filename, ...args) =>",
							" n =>",
							" data =>",
							" n =>",
							"function PutRowsColumns(rows)",
							"(acc, row) =>",
							"row =>",
							"(col, i) =>",
							"function GetLibrary(e)",
							"function ElementName(e)",
							"function GetRotation(element)",
							"function Package2Circuit(p)",
							"({ x, y }) =>",
							"pt =>",
							"pt =>",
							"({ x }) =>",
							"({ y }) =>",
							"pt =>",
							"pt =>",
							"coord =>",
							"x =>",
							"y =>",
							"({ x, y }) =>",
							"({ x, y }) =>",
							"function Contactref2Circuit(cref)",
							"e =>",
							"function Signal2Circuit(s)",
							"function Element2Circuit(element)",
							"function GetUsedPackages(doc = project.board)",
							"e =>",
							"function GetPackagePitch(pkg)",
							"pad =>",
							"function Eagle2Circuit(doc = project.board, width = 100, height = 100)",
							"function Eagle2CircuitJS(doc = project.schematic, scale = 50, sheet = 0)",
							" n =>",
							"e =>",
							"function MakeGraph(board = project.board, ignore = /^(GND|[-+][0-9]+V)$/)",
							"function DrawGraph(g, w)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD1AgAAR0xGVyh3aWR0aCwgaGVpZ2h0LCBvcHRpb25zID0ge30pCiAgaGFuZGxlUG9zKHgsIHkpCiAgaGFuZGxlU2l6ZSh3aWR0aCwgaGVpZ2h0KQogIGhhbmRsZUNsb3NlKHdpbmRvdyA9IHRoaXMpCiAgaGFuZGxlUmVmcmVzaCh3aW5kb3cgPSB0aGlzKQogIGhhbmRsZUZvY3VzKGZvY3VzZWQpCiAgaGFuZGxlSWNvbmlmeShpY29uaWZpZWQpCiAgaGFuZGxlRnJhbWVidWZmZXJTaXplKHdpZHRoLCBoZWlnaHQpCiAgaGFuZGxlTW91c2VCdXR0b24oYnV0dG9uLCBhY3Rpb24sIG1vZHMpCiAgaGFuZGxlQ3Vyc29yUG9zKHgsIHkpCiAgaGFuZGxlQ3Vyc29yRW50ZXIoY3VyKQogIGhhbmRsZVNjcm9sbCh4b2Zmc2V0LCB5b2Zmc2V0KQogIGhhbmRsZUtleShrZXksIHNjYW5jb2RlLCBhY3Rpb24sIG1vZHMpCiAgaGFuZGxlQ2hhcihjKQogIGhhbmRsZUNoYXJNb2RzKGMsIG1vZHMpCiAgaGFuZGxlRHJvcChhcmdjLCBhcmd2KQpHTEZXCiAgZ2V0KCkKICBnZXQoKQogIGdldCgpCkdMRlcKICBtb3ZlKC4uLmFyZ3MpCiAgcmVzaXplKC4uLmFyZ3MpCiAgc2V0VGl0bGUodGl0bGUpCiAgZW5kKCkKICBzaG93KG1hdCkKTWF0MkltYWdlKG1hdCkKRHJhd0ltYWdlKGltYWdlLCBwb3MpCkRyYXdDaXJjbGUoW3gsIHldLCByYWRpdXMsIHN0cm9rZVdpZHRoID0gNSwgc3Ryb2tlID0gWzI1NSwgMjU1LCAyNTVdLCBmaWxsID0gWzI1NSwgMCwgMCwgOTZdKQpEcmF3TGluZShwMSwgcDIsIHN0cm9rZVdpZHRoID0gNSwgc3Ryb2tlID0gWzI1NSwgMjU1LCAyNTVdKQAAAAAAAAAA3gwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					11,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-shell.js",
						"symkeys":
						[
							[
								3224,
								3267
							],
							[
								4053,
								4060
							],
							[
								4160,
								4165
							],
							[
								4249,
								4288
							],
							[
								4362,
								4383
							],
							[
								4439,
								4461
							],
							[
								4530,
								4563
							],
							[
								4670,
								4675
							],
							[
								4738,
								4744
							],
							[
								4846,
								4865
							],
							[
								4887,
								4892
							],
							[
								4995,
								5026
							],
							[
								5077,
								5120
							],
							[
								5165,
								5172
							],
							[
								5273,
								5358
							],
							[
								5510,
								5515
							],
							[
								5560,
								5578
							],
							[
								5617,
								5624
							],
							[
								5673,
								5680
							],
							[
								5719,
								5736
							],
							[
								5783,
								5790
							],
							[
								5827,
								5845
							],
							[
								5868,
								5877
							],
							[
								5900,
								5918
							],
							[
								5929,
								5990
							],
							[
								6110,
								6119
							],
							[
								6156,
								6167
							],
							[
								6178,
								6202
							],
							[
								6283,
								6291
							],
							[
								6474,
								6528
							],
							[
								6747,
								6777
							],
							[
								7429,
								7475
							],
							[
								7515,
								7519
							],
							[
								7546,
								7553
							],
							[
								7639,
								7678
							],
							[
								7763,
								7808
							],
							[
								7846,
								7850
							],
							[
								7874,
								7917
							],
							[
								7996,
								8041
							],
							[
								8086,
								8090
							],
							[
								8140,
								8144
							],
							[
								8151,
								8155
							],
							[
								8187,
								8220
							],
							[
								8252,
								8295
							],
							[
								8370,
								8374
							],
							[
								8413,
								8452
							],
							[
								8498,
								8541
							],
							[
								8586,
								8625
							],
							[
								8721,
								8754
							],
							[
								8786,
								8806
							],
							[
								9053,
								9075
							],
							[
								11367,
								11378
							],
							[
								12568,
								12581
							],
							[
								12961,
								12995
							],
							[
								13499,
								13543
							],
							[
								13662,
								13682
							],
							[
								13997,
								14007
							],
							[
								14035,
								14045
							],
							[
								14081,
								14094
							],
							[
								14344,
								14358
							],
							[
								15250,
								15259
							],
							[
								15500,
								15519
							],
							[
								16061,
								16074
							],
							[
								16092,
								16097
							],
							[
								16148,
								16161
							],
							[
								16212,
								16233
							],
							[
								16630,
								16646
							],
							[
								17034,
								17039
							],
							[
								17077,
								17092
							],
							[
								17239,
								17247
							],
							[
								17288,
								17296
							],
							[
								17573,
								17601
							],
							[
								17668,
								17702
							],
							[
								17736,
								17741
							],
							[
								17763,
								17793
							],
							[
								18035,
								18043
							],
							[
								18110,
								18114
							],
							[
								18204,
								18211
							],
							[
								18551,
								18575
							],
							[
								18820,
								18825
							],
							[
								20555,
								20599
							],
							[
								21046,
								21072
							],
							[
								21774,
								21797
							],
							[
								21917,
								21939
							],
							[
								22190,
								22194
							],
							[
								22682,
								22686
							],
							[
								23303,
								23332
							],
							[
								23357,
								23361
							],
							[
								23437,
								23460
							],
							[
								23504,
								23510
							],
							[
								23538,
								23542
							],
							[
								23558,
								23595
							],
							[
								23617,
								23633
							],
							[
								23653,
								23660
							],
							[
								23717,
								23745
							],
							[
								23799,
								23810
							],
							[
								23893,
								23901
							],
							[
								23997,
								24001
							],
							[
								24151,
								24155
							],
							[
								24253,
								24258
							],
							[
								24318,
								24329
							],
							[
								24401,
								24412
							],
							[
								24499,
								24504
							],
							[
								24554,
								24560
							],
							[
								24657,
								24665
							],
							[
								24840,
								24869
							],
							[
								24962,
								25015
							],
							[
								25168,
								25172
							],
							[
								25226,
								25230
							],
							[
								25506,
								25513
							],
							[
								25535,
								25541
							],
							[
								25570,
								25601
							],
							[
								25735,
								25759
							],
							[
								25885,
								25896
							],
							[
								25914,
								25930
							],
							[
								26089,
								26094
							],
							[
								26118,
								26122
							],
							[
								26170,
								26179
							],
							[
								26247,
								26252
							],
							[
								26390,
								26395
							],
							[
								26517,
								26528
							],
							[
								26617,
								26624
							],
							[
								27270,
								27286
							],
							[
								29340,
								29379
							],
							[
								29421,
								29435
							],
							[
								29684,
								29718
							],
							[
								30057,
								30071
							],
							[
								30166,
								30170
							],
							[
								30192,
								30206
							],
							[
								30237,
								30241
							],
							[
								31541,
								31557
							],
							[
								31607,
								31622
							],
							[
								31681,
								31700
							],
							[
								31723,
								31735
							],
							[
								31824,
								31828
							],
							[
								31927,
								31931
							],
							[
								32150,
								32156
							],
							[
								32246,
								32260
							],
							[
								32289,
								32307
							],
							[
								32444,
								32456
							],
							[
								32486,
								32551
							],
							[
								32580,
								32585
							],
							[
								32724,
								32762
							],
							[
								32787,
								32807
							],
							[
								32836,
								32885
							],
							[
								32932,
								32942
							],
							[
								33115,
								33125
							],
							[
								33198,
								33208
							],
							[
								33279,
								33289
							],
							[
								33816,
								33897
							],
							[
								33908,
								33931
							],
							[
								34149,
								34154
							],
							[
								34237,
								34246
							],
							[
								34276,
								34282
							],
							[
								34298,
								34327
							],
							[
								34363,
								34376
							],
							[
								34607,
								34613
							],
							[
								34622,
								34633
							],
							[
								34701,
								34723
							],
							[
								34940,
								34963
							],
							[
								35375,
								35404
							],
							[
								35726,
								35753
							],
							[
								35787,
								35800
							],
							[
								35827,
								35832
							],
							[
								35856,
								35861
							],
							[
								35906,
								35916
							],
							[
								35946,
								35956
							],
							[
								36042,
								36047
							],
							[
								36167,
								36172
							],
							[
								36186,
								36194
							],
							[
								36416,
								36420
							],
							[
								36473,
								36477
							],
							[
								36565,
								36578
							],
							[
								36679,
								36692
							],
							[
								36953,
								36986
							],
							[
								37040,
								37044
							],
							[
								37158,
								37184
							],
							[
								37527,
								37560
							],
							[
								37907,
								37952
							],
							[
								37993,
								37997
							],
							[
								38014,
								38043
							],
							[
								38079,
								38085
							],
							[
								38469,
								38539
							],
							[
								39139,
								39211
							],
							[
								39444,
								39449
							],
							[
								40171,
								40175
							],
							[
								40396,
								40469
							],
							[
								41439,
								41463
							]
						],
						"symlist":
						[
							"function Window(width = 1280, height = 900)",
							"begin()",
							"end()",
							"handleMouseButton(button, action, mods)",
							"handleCursorPos(x, y)",
							"handleCursorEnter(cur)",
							".handleCharMods = (char, mods) =>",
							"() =>",
							" () =>",
							"function toXML(obj)",
							" a =>",
							"function renderToXML(component)",
							"function GetFiletime(file, field = 'mtime')",
							"file =>",
							"function FindProjects(dirPtn = '../*/eagle', sortDirection = -1, sortField = 'mtime')",
							"fn =>",
							"minIndex = name =>",
							"file =>",
							"file =>",
							"hasBoth = name =>",
							"name =>",
							"([name, index]) =>",
							"(a, b) =>",
							"([name, index]) =>",
							"function SortFiles(files, direction = 1, statField = 'mtime')",
							"(a, b) =>",
							"([file]) =>",
							"function pick(it, n = 1)",
							"n = i =>",
							"function append(tag, attrs, children, parent, element)",
							"function render(doc, filename)",
							"function CollectParts(doc = project.schematic)",
							"e =>",
							"attr =>",
							"({ name, deviceset, device, value }) =>",
							"function CollectElements(doc = project.board)",
							"e =>",
							"({ name, library, package: pkg, value }) =>",
							"function CollectPartsElements(proj = project)",
							"e =>",
							"a =>",
							"e =>",
							"([{ x, y, ...element }, part]) =>",
							"function ListParts(doc = project.schematic)",
							"p =>",
							"({ name, deviceset, device, value }) =>",
							"function ShowParts(doc = project.schematic)",
							"({ name, deviceset, device, value }) =>",
							"function EaglePrint(file, output)",
							" (dir, base, ext) =>",
							"function main(...args)",
							"toNumber(n)",
							"wire(...args)",
							"coil({ rect, n, diameter, width })",
							"load(filename, project = globalThis.project)",
							"newProject(filename)",
							"sch: () =>",
							"brd: () =>",
							"nextProject()",
							"projectNames()",
							"quit(arg)",
							"renderToString(arg)",
							" (...args) =>",
							"() =>",
							".exit = () =>",
							".debug = (...args) =>",
							".show = value =>",
							"() =>",
							"(item, i, a) =>",
							"entry =>",
							"entry =>",
							"function Terminate(exitCode)",
							"function xml(strings, expressions)",
							" e =>",
							"function UpdateMeasures(board)",
							"lines =>",
							"e =>",
							"line =>",
							"function AlignItem(item)",
							"tr =>",
							"function AlignAll(doc = globalThis.document)",
							"function fixValue(element)",
							"function fixValues(doc)",
							"function coordMap(doc)",
							"p =>",
							"t =>",
							"function GetPolygons(d = doc)",
							"e =>",
							"function FindPolygons()",
							"doc =>",
							"e =>",
							"function RemovePolygons(p = polygons)",
							"([doc, list]) =>",
							"path =>",
							"function GetNames(doc, pred)",
							"pred = e =>",
							"sheet =>",
							"e =>",
							"e =>",
							" e =>",
							"([v, p]) =>",
							"([v, p]) =>",
							"() =>",
							"doc =>",
							"sheet =>",
							"function GetByName(doc, name)",
							"function CorrelateSchematicAndBoard(schematic, board)",
							"d =>",
							"n =>",
							"name =>",
							"doc =>",
							"function GetSheets(doc_or_proj)",
							"function SaveLibraries()",
							"([n, e]) =>",
							"(acc, [n, e]) =>",
							" e =>",
							"e =>",
							"(a, b) =>",
							"id =>",
							"id =>",
							"([n, e]) =>",
							"name =>",
							"(acc, [n, e]) =>",
							"function InitBoard(doc = project.board)",
							"([name, e]) =>",
							"async function testEagle(filename)",
							"([name, e]) =>",
							"e =>",
							"([name, i]) =>",
							"p =>",
							"(child, i, a) =>",
							"(child2, i2) =>",
							"([index, equal]) =>",
							"([index]) =>",
							"i =>",
							"i =>",
							"doc =>",
							"([file, e]) =>",
							"([file, xpath]) =>",
							" ([k, v]) =>",
							"function ModifyPath(p, fn = (dir, base, ext) => [dir, base, ext])",
							"() =>",
							"function AppendToFilename(p, str = '')",
							" (dir, base, ext) =>",
							"function SetSVGBackground(xml, color = '#ffffff')",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							"FileFunction = (fn, rfn = ReadFile, wfn = WriteFile, namefn = n => n, ...args) =>",
							" (filename, ...args) =>",
							" n =>",
							" data =>",
							" n =>",
							"function PutRowsColumns(rows)",
							"(acc, row) =>",
							"row =>",
							"(col, i) =>",
							"function GetLibrary(e)",
							"function ElementName(e)",
							"function GetRotation(element)",
							"function Package2Circuit(p)",
							"({ x, y }) =>",
							"pt =>",
							"pt =>",
							"({ x }) =>",
							"({ y }) =>",
							"pt =>",
							"pt =>",
							"coord =>",
							"x =>",
							"y =>",
							"({ x, y }) =>",
							"({ x, y }) =>",
							"function Contactref2Circuit(cref)",
							"e =>",
							"function Signal2Circuit(s)",
							"function Element2Circuit(element)",
							"function GetUsedPackages(doc = project.board)",
							"e =>",
							"function GetPackagePitch(pkg)",
							"pad =>",
							"function Eagle2Circuit(doc = project.board, width = 100, height = 100)",
							"function Eagle2CircuitJS(doc = project.schematic, scale = 50, sheet = 0)",
							" n =>",
							"e =>",
							"function MakeGraph(board = project.board, ignore = /^(GND|[-+][0-9]+V)$/)",
							"function DrawGraph(g, w)"
						]
					},
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					12,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-shell.js",
						"symkeys":
						[
							[
								3224,
								3267
							],
							[
								4053,
								4060
							],
							[
								4160,
								4165
							],
							[
								4249,
								4288
							],
							[
								4362,
								4383
							],
							[
								4439,
								4461
							],
							[
								4530,
								4563
							],
							[
								4670,
								4675
							],
							[
								4738,
								4744
							],
							[
								4846,
								4865
							],
							[
								4887,
								4892
							],
							[
								4995,
								5026
							],
							[
								5077,
								5120
							],
							[
								5165,
								5172
							],
							[
								5273,
								5358
							],
							[
								5510,
								5515
							],
							[
								5560,
								5578
							],
							[
								5617,
								5624
							],
							[
								5673,
								5680
							],
							[
								5719,
								5736
							],
							[
								5783,
								5790
							],
							[
								5827,
								5845
							],
							[
								5868,
								5877
							],
							[
								5900,
								5918
							],
							[
								5929,
								5990
							],
							[
								6110,
								6119
							],
							[
								6156,
								6167
							],
							[
								6178,
								6202
							],
							[
								6283,
								6291
							],
							[
								6474,
								6528
							],
							[
								6747,
								6777
							],
							[
								7429,
								7475
							],
							[
								7515,
								7519
							],
							[
								7546,
								7553
							],
							[
								7639,
								7678
							],
							[
								7763,
								7808
							],
							[
								7846,
								7850
							],
							[
								7874,
								7917
							],
							[
								7996,
								8041
							],
							[
								8086,
								8090
							],
							[
								8140,
								8144
							],
							[
								8151,
								8155
							],
							[
								8187,
								8220
							],
							[
								8252,
								8295
							],
							[
								8370,
								8374
							],
							[
								8413,
								8452
							],
							[
								8498,
								8541
							],
							[
								8586,
								8625
							],
							[
								8721,
								8754
							],
							[
								8786,
								8806
							],
							[
								9053,
								9075
							],
							[
								11367,
								11378
							],
							[
								12568,
								12581
							],
							[
								12961,
								12995
							],
							[
								13499,
								13543
							],
							[
								13662,
								13682
							],
							[
								13997,
								14007
							],
							[
								14035,
								14045
							],
							[
								14081,
								14094
							],
							[
								14344,
								14358
							],
							[
								15250,
								15259
							],
							[
								15500,
								15519
							],
							[
								16061,
								16074
							],
							[
								16092,
								16097
							],
							[
								16148,
								16161
							],
							[
								16212,
								16233
							],
							[
								16630,
								16646
							],
							[
								17034,
								17039
							],
							[
								17077,
								17092
							],
							[
								17239,
								17247
							],
							[
								17288,
								17296
							],
							[
								17573,
								17601
							],
							[
								17668,
								17702
							],
							[
								17736,
								17741
							],
							[
								17763,
								17793
							],
							[
								18035,
								18043
							],
							[
								18110,
								18114
							],
							[
								18204,
								18211
							],
							[
								18551,
								18575
							],
							[
								18820,
								18825
							],
							[
								20555,
								20599
							],
							[
								21046,
								21072
							],
							[
								21774,
								21797
							],
							[
								21917,
								21939
							],
							[
								22190,
								22194
							],
							[
								22682,
								22686
							],
							[
								23303,
								23332
							],
							[
								23357,
								23361
							],
							[
								23437,
								23460
							],
							[
								23504,
								23510
							],
							[
								23538,
								23542
							],
							[
								23558,
								23595
							],
							[
								23617,
								23633
							],
							[
								23653,
								23660
							],
							[
								23717,
								23745
							],
							[
								23799,
								23810
							],
							[
								23893,
								23901
							],
							[
								23997,
								24001
							],
							[
								24151,
								24155
							],
							[
								24253,
								24258
							],
							[
								24318,
								24329
							],
							[
								24401,
								24412
							],
							[
								24499,
								24504
							],
							[
								24554,
								24560
							],
							[
								24657,
								24665
							],
							[
								24840,
								24869
							],
							[
								24962,
								25015
							],
							[
								25168,
								25172
							],
							[
								25226,
								25230
							],
							[
								25506,
								25513
							],
							[
								25535,
								25541
							],
							[
								25570,
								25601
							],
							[
								25735,
								25759
							],
							[
								25885,
								25896
							],
							[
								25914,
								25930
							],
							[
								26089,
								26094
							],
							[
								26118,
								26122
							],
							[
								26170,
								26179
							],
							[
								26247,
								26252
							],
							[
								26390,
								26395
							],
							[
								26517,
								26528
							],
							[
								26617,
								26624
							],
							[
								27270,
								27286
							],
							[
								29340,
								29379
							],
							[
								29421,
								29435
							],
							[
								29684,
								29718
							],
							[
								30057,
								30071
							],
							[
								30166,
								30170
							],
							[
								30192,
								30206
							],
							[
								30237,
								30241
							],
							[
								31541,
								31557
							],
							[
								31607,
								31622
							],
							[
								31681,
								31700
							],
							[
								31723,
								31735
							],
							[
								31824,
								31828
							],
							[
								31927,
								31931
							],
							[
								32150,
								32156
							],
							[
								32246,
								32260
							],
							[
								32289,
								32307
							],
							[
								32444,
								32456
							],
							[
								32486,
								32551
							],
							[
								32580,
								32585
							],
							[
								32724,
								32762
							],
							[
								32787,
								32807
							],
							[
								32836,
								32885
							],
							[
								32932,
								32942
							],
							[
								33115,
								33125
							],
							[
								33198,
								33208
							],
							[
								33279,
								33289
							],
							[
								33816,
								33897
							],
							[
								33908,
								33931
							],
							[
								34149,
								34154
							],
							[
								34237,
								34246
							],
							[
								34276,
								34282
							],
							[
								34298,
								34327
							],
							[
								34363,
								34376
							],
							[
								34607,
								34613
							],
							[
								34622,
								34633
							],
							[
								34701,
								34723
							],
							[
								34940,
								34963
							],
							[
								35375,
								35404
							],
							[
								35726,
								35753
							],
							[
								35787,
								35800
							],
							[
								35827,
								35832
							],
							[
								35856,
								35861
							],
							[
								35906,
								35916
							],
							[
								35946,
								35956
							],
							[
								36042,
								36047
							],
							[
								36167,
								36172
							],
							[
								36186,
								36194
							],
							[
								36416,
								36420
							],
							[
								36473,
								36477
							],
							[
								36565,
								36578
							],
							[
								36679,
								36692
							],
							[
								36953,
								36986
							],
							[
								37040,
								37044
							],
							[
								37158,
								37184
							],
							[
								37527,
								37560
							],
							[
								37907,
								37952
							],
							[
								37993,
								37997
							],
							[
								38014,
								38043
							],
							[
								38079,
								38085
							],
							[
								38469,
								38539
							],
							[
								39139,
								39211
							],
							[
								39444,
								39449
							],
							[
								40171,
								40175
							],
							[
								40396,
								40469
							],
							[
								41439,
								41463
							]
						],
						"symlist":
						[
							"function Window(width = 1280, height = 900)",
							"begin()",
							"end()",
							"handleMouseButton(button, action, mods)",
							"handleCursorPos(x, y)",
							"handleCursorEnter(cur)",
							".handleCharMods = (char, mods) =>",
							"() =>",
							" () =>",
							"function toXML(obj)",
							" a =>",
							"function renderToXML(component)",
							"function GetFiletime(file, field = 'mtime')",
							"file =>",
							"function FindProjects(dirPtn = '../*/eagle', sortDirection = -1, sortField = 'mtime')",
							"fn =>",
							"minIndex = name =>",
							"file =>",
							"file =>",
							"hasBoth = name =>",
							"name =>",
							"([name, index]) =>",
							"(a, b) =>",
							"([name, index]) =>",
							"function SortFiles(files, direction = 1, statField = 'mtime')",
							"(a, b) =>",
							"([file]) =>",
							"function pick(it, n = 1)",
							"n = i =>",
							"function append(tag, attrs, children, parent, element)",
							"function render(doc, filename)",
							"function CollectParts(doc = project.schematic)",
							"e =>",
							"attr =>",
							"({ name, deviceset, device, value }) =>",
							"function CollectElements(doc = project.board)",
							"e =>",
							"({ name, library, package: pkg, value }) =>",
							"function CollectPartsElements(proj = project)",
							"e =>",
							"a =>",
							"e =>",
							"([{ x, y, ...element }, part]) =>",
							"function ListParts(doc = project.schematic)",
							"p =>",
							"({ name, deviceset, device, value }) =>",
							"function ShowParts(doc = project.schematic)",
							"({ name, deviceset, device, value }) =>",
							"function EaglePrint(file, output)",
							" (dir, base, ext) =>",
							"function main(...args)",
							"toNumber(n)",
							"wire(...args)",
							"coil({ rect, n, diameter, width })",
							"load(filename, project = globalThis.project)",
							"newProject(filename)",
							"sch: () =>",
							"brd: () =>",
							"nextProject()",
							"projectNames()",
							"quit(arg)",
							"renderToString(arg)",
							" (...args) =>",
							"() =>",
							".exit = () =>",
							".debug = (...args) =>",
							".show = value =>",
							"() =>",
							"(item, i, a) =>",
							"entry =>",
							"entry =>",
							"function Terminate(exitCode)",
							"function xml(strings, expressions)",
							" e =>",
							"function UpdateMeasures(board)",
							"lines =>",
							"e =>",
							"line =>",
							"function AlignItem(item)",
							"tr =>",
							"function AlignAll(doc = globalThis.document)",
							"function fixValue(element)",
							"function fixValues(doc)",
							"function coordMap(doc)",
							"p =>",
							"t =>",
							"function GetPolygons(d = doc)",
							"e =>",
							"function FindPolygons()",
							"doc =>",
							"e =>",
							"function RemovePolygons(p = polygons)",
							"([doc, list]) =>",
							"path =>",
							"function GetNames(doc, pred)",
							"pred = e =>",
							"sheet =>",
							"e =>",
							"e =>",
							" e =>",
							"([v, p]) =>",
							"([v, p]) =>",
							"() =>",
							"doc =>",
							"sheet =>",
							"function GetByName(doc, name)",
							"function CorrelateSchematicAndBoard(schematic, board)",
							"d =>",
							"n =>",
							"name =>",
							"doc =>",
							"function GetSheets(doc_or_proj)",
							"function SaveLibraries()",
							"([n, e]) =>",
							"(acc, [n, e]) =>",
							" e =>",
							"e =>",
							"(a, b) =>",
							"id =>",
							"id =>",
							"([n, e]) =>",
							"name =>",
							"(acc, [n, e]) =>",
							"function InitBoard(doc = project.board)",
							"([name, e]) =>",
							"async function testEagle(filename)",
							"([name, e]) =>",
							"e =>",
							"([name, i]) =>",
							"p =>",
							"(child, i, a) =>",
							"(child2, i2) =>",
							"([index, equal]) =>",
							"([index]) =>",
							"i =>",
							"i =>",
							"doc =>",
							"([file, e]) =>",
							"([file, xpath]) =>",
							" ([k, v]) =>",
							"function ModifyPath(p, fn = (dir, base, ext) => [dir, base, ext])",
							"() =>",
							"function AppendToFilename(p, str = '')",
							" (dir, base, ext) =>",
							"function SetSVGBackground(xml, color = '#ffffff')",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							"FileFunction = (fn, rfn = ReadFile, wfn = WriteFile, namefn = n => n, ...args) =>",
							" (filename, ...args) =>",
							" n =>",
							" data =>",
							" n =>",
							"function PutRowsColumns(rows)",
							"(acc, row) =>",
							"row =>",
							"(col, i) =>",
							"function GetLibrary(e)",
							"function ElementName(e)",
							"function GetRotation(element)",
							"function Package2Circuit(p)",
							"({ x, y }) =>",
							"pt =>",
							"pt =>",
							"({ x }) =>",
							"({ y }) =>",
							"pt =>",
							"pt =>",
							"coord =>",
							"x =>",
							"y =>",
							"({ x, y }) =>",
							"({ x, y }) =>",
							"function Contactref2Circuit(cref)",
							"e =>",
							"function Signal2Circuit(s)",
							"function Element2Circuit(element)",
							"function GetUsedPackages(doc = project.board)",
							"e =>",
							"function GetPackagePitch(pkg)",
							"pad =>",
							"function Eagle2Circuit(doc = project.board, width = 100, height = 100)",
							"function Eagle2CircuitJS(doc = project.schematic, scale = 50, sheet = 0)",
							" n =>",
							"e =>",
							"function MakeGraph(board = project.board, ignore = /^(GND|[-+][0-9]+V)$/)",
							"function DrawGraph(g, w)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA5DQAAV2luZG93KHdpZHRoID0gMTI4MCwgaGVpZ2h0ID0gOTAwKQogIGJlZ2luKCkKICBlbmQoKQogIGhhbmRsZU1vdXNlQnV0dG9uKGJ1dHRvbiwgYWN0aW9uLCBtb2RzKQogIGhhbmRsZUN1cnNvclBvcyh4LCB5KQogIGhhbmRsZUN1cnNvckVudGVyKGN1cikKICAuaGFuZGxlQ2hhck1vZHMgPSAoY2hhciwgbW9kcykgPT4KKCkgPT4KKCkgPT4KICB0b1hNTChvYmopCmEgPT4KICByZW5kZXJUb1hNTChjb21wb25lbnQpCkdldEZpbGV0aW1lKGZpbGUsIGZpZWxkID0gJ210aW1lJykKICBmaWxlID0+CkZpbmRQcm9qZWN0cyhkaXJQdG4gPSAnLi4vKi9lYWdsZScsIHNvcnREaXJlY3Rpb24gPSAtMSwgc29ydEZpZWxkID0gJ210aW1lJykKICBmbiA9PgogIG1pbkluZGV4ID0gbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CiAgaGFzQm90aCA9IG5hbWUgPT4KICBuYW1lID0+CihbbmFtZSwgaW5kZXhdKSA9PgooYSwgYikgPT4KKFtuYW1lLCBpbmRleF0pID0+ClNvcnRGaWxlcyhmaWxlcywgZGlyZWN0aW9uID0gMSwgc3RhdEZpZWxkID0gJ210aW1lJykKKGEsIGIpID0+CihbZmlsZV0pID0+CiAgcGljayhpdCwgbiA9IDEpCiAgbiA9IGkgPT4KICBhcHBlbmQodGFnLCBhdHRycywgY2hpbGRyZW4sIHBhcmVudCwgZWxlbWVudCkKICByZW5kZXIoZG9jLCBmaWxlbmFtZSkKQ29sbGVjdFBhcnRzKGRvYyA9IHByb2plY3Quc2NoZW1hdGljKQogIGUgPT4KICBhdHRyID0+Cih7IG5hbWUsIGRldmljZXNldCwgZGV2aWNlLCB2YWx1ZSB9KSA9PgpDb2xsZWN0RWxlbWVudHMoZG9jID0gcHJvamVjdC5ib2FyZCkKICBlID0+Cih7IG5hbWUsIGxpYnJhcnksIHBhY2thZ2U6IHBrZywgdmFsdWUgfSkgPT4KQ29sbGVjdFBhcnRzRWxlbWVudHMocHJvaiA9IHByb2plY3QpCiAgZSA9PgogIGEgPT4KICBlID0+CihbeyB4LCB5LCAuLi5lbGVtZW50IH0sIHBhcnRdKSA9PgpMaXN0UGFydHMoZG9jID0gcHJvamVjdC5zY2hlbWF0aWMpCiAgcCA9PgooeyBuYW1lLCBkZXZpY2VzZXQsIGRldmljZSwgdmFsdWUgfSkgPT4KU2hvd1BhcnRzKGRvYyA9IHByb2plY3Quc2NoZW1hdGljKQooeyBuYW1lLCBkZXZpY2VzZXQsIGRldmljZSwgdmFsdWUgfSkgPT4KRWFnbGVQcmludChmaWxlLCBvdXRwdXQpCihkaXIsIGJhc2UsIGV4dCkgPT4KICBtYWluKC4uLmFyZ3MpCiAgdG9OdW1iZXIobikKICB3aXJlKC4uLmFyZ3MpCiAgY29pbCh7IHJlY3QsIG4sIGRpYW1ldGVyLCB3aWR0aCB9KQogIGxvYWQoZmlsZW5hbWUsIHByb2plY3QgPSBnbG9iYWxUaGlzLnByb2plY3QpCiAgbmV3UHJvamVjdChmaWxlbmFtZSkKICBzY2g6ICgpID0+CiAgYnJkOiAoKSA9PgogIG5leHRQcm9qZWN0KCkKICBwcm9qZWN0TmFtZXMoKQogIHF1aXQoYXJnKQogIHJlbmRlclRvU3RyaW5nKGFyZykKKC4uLmFyZ3MpID0+CigpID0+CiAgLmV4aXQgPSAoKSA9PgogIC5kZWJ1ZyA9ICguLi5hcmdzKSA9PgogIC5zaG93ID0gdmFsdWUgPT4KKCkgPT4KKGl0ZW0sIGksIGEpID0+CiAgZW50cnkgPT4KICBlbnRyeSA9PgpUZXJtaW5hdGUoZXhpdENvZGUpCiAgeG1sKHN0cmluZ3MsIGV4cHJlc3Npb25zKQplID0+ClVwZGF0ZU1lYXN1cmVzKGJvYXJkKQogIGxpbmVzID0+CiAgZSA9PgogIGxpbmUgPT4KQWxpZ25JdGVtKGl0ZW0pCiAgdHIgPT4KQWxpZ25BbGwoZG9jID0gZ2xvYmFsVGhpcy5kb2N1bWVudCkKICBmaXhWYWx1ZShlbGVtZW50KQogIGZpeFZhbHVlcyhkb2MpCiAgY29vcmRNYXAoZG9jKQogIHAgPT4KICB0ID0+CkdldFBvbHlnb25zKGQgPSBkb2MpCiAgZSA9PgpGaW5kUG9seWdvbnMoKQogIGRvYyA9PgogIGUgPT4KUmVtb3ZlUG9seWdvbnMocCA9IHBvbHlnb25zKQooW2RvYywgbGlzdF0pID0+CiAgcGF0aCA9PgpHZXROYW1lcyhkb2MsIHByZWQpCiAgcHJlZCA9IGUgPT4KICBzaGVldCA9PgogIGUgPT4KICBlID0+CmUgPT4KKFt2LCBwXSkgPT4KKFt2LCBwXSkgPT4KKCkgPT4KICBkb2MgPT4KICBzaGVldCA9PgpHZXRCeU5hbWUoZG9jLCBuYW1lKQpDb3JyZWxhdGVTY2hlbWF0aWNBbmRCb2FyZChzY2hlbWF0aWMsIGJvYXJkKQogIGQgPT4KICBuID0+CiAgbmFtZSA9PgogIGRvYyA9PgpHZXRTaGVldHMoZG9jX29yX3Byb2opClNhdmVMaWJyYXJpZXMoKQooW24sIGVdKSA9PgooYWNjLCBbbiwgZV0pID0+CmUgPT4KICBlID0+CihhLCBiKSA9PgogIGlkID0+CiAgaWQgPT4KKFtuLCBlXSkgPT4KICBuYW1lID0+CihhY2MsIFtuLCBlXSkgPT4KSW5pdEJvYXJkKGRvYyA9IHByb2plY3QuYm9hcmQpCihbbmFtZSwgZV0pID0+CiAgdGVzdEVhZ2xlKGZpbGVuYW1lKQooW25hbWUsIGVdKSA9PgogIGUgPT4KKFtuYW1lLCBpXSkgPT4KICBwID0+CihjaGlsZCwgaSwgYSkgPT4KKGNoaWxkMiwgaTIpID0+CihbaW5kZXgsIGVxdWFsXSkgPT4KKFtpbmRleF0pID0+CiAgaSA9PgogIGkgPT4KICBkb2MgPT4KKFtmaWxlLCBlXSkgPT4KKFtmaWxlLCB4cGF0aF0pID0+Cihbaywgdl0pID0+Ck1vZGlmeVBhdGgocCwgZm4gPSAoZGlyLCBiYXNlLCBleHQpID0+IFtkaXIsIGJhc2UsIGV4dF0pCigpID0+CkFwcGVuZFRvRmlsZW5hbWUocCwgc3RyID0gJycpCihkaXIsIGJhc2UsIGV4dCkgPT4KU2V0U1ZHQmFja2dyb3VuZCh4bWwsIGNvbG9yID0gJyNmZmZmZmYnKQooZSwgbikgPT4KKGUsIG4pID0+CihlLCBuKSA9PgooZSwgbikgPT4KRmlsZUZ1bmN0aW9uID0gKGZuLCByZm4gPSBSZWFkRmlsZSwgd2ZuID0gV3JpdGVGaWxlLCBuYW1lZm4gPSBuID0+IG4sIC4uLmFyZ3MpID0+CihmaWxlbmFtZSwgLi4uYXJncykgPT4KbiA9PgpkYXRhID0+Cm4gPT4KUHV0Um93c0NvbHVtbnMocm93cykKKGFjYywgcm93KSA9PgogIHJvdyA9PgooY29sLCBpKSA9PgpHZXRMaWJyYXJ5KGUpCkVsZW1lbnROYW1lKGUpCkdldFJvdGF0aW9uKGVsZW1lbnQpClBhY2thZ2UyQ2lyY3VpdChwKQooeyB4LCB5IH0pID0+CiAgcHQgPT4KICBwdCA9PgooeyB4IH0pID0+Cih7IHkgfSkgPT4KICBwdCA9PgogIHB0ID0+CiAgY29vcmQgPT4KICB4ID0+CiAgeSA9PgooeyB4LCB5IH0pID0+Cih7IHgsIHkgfSkgPT4KQ29udGFjdHJlZjJDaXJjdWl0KGNyZWYpCiAgZSA9PgpTaWduYWwyQ2lyY3VpdChzKQpFbGVtZW50MkNpcmN1aXQoZWxlbWVudCkKR2V0VXNlZFBhY2thZ2VzKGRvYyA9IHByb2plY3QuYm9hcmQpCiAgZSA9PgpHZXRQYWNrYWdlUGl0Y2gocGtnKQogIHBhZCA9PgpFYWdsZTJDaXJjdWl0KGRvYyA9IHByb2plY3QuYm9hcmQsIHdpZHRoID0gMTAwLCBoZWlnaHQgPSAxMDApCkVhZ2xlMkNpcmN1aXRKUyhkb2MgPSBwcm9qZWN0LnNjaGVtYXRpYywgc2NhbGUgPSA1MCwgc2hlZXQgPSAwKQpuID0+CiAgZSA9PgpNYWtlR3JhcGgoYm9hcmQgPSBwcm9qZWN0LmJvYXJkLCBpZ25vcmUgPSAvXihHTkR8Wy0rXVswLTldK1YpJC8pCkRyYXdHcmFwaChnLCB3KQAAAAAAAAAAOQ0AAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					13,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-shell.js",
						"symkeys":
						[
							[
								3224,
								3267
							],
							[
								4053,
								4060
							],
							[
								4160,
								4165
							],
							[
								4249,
								4288
							],
							[
								4367,
								4388
							],
							[
								4449,
								4471
							],
							[
								4545,
								4578
							],
							[
								4685,
								4690
							],
							[
								4753,
								4759
							],
							[
								4861,
								4880
							],
							[
								4902,
								4907
							],
							[
								5010,
								5041
							],
							[
								5092,
								5135
							],
							[
								5180,
								5187
							],
							[
								5288,
								5373
							],
							[
								5525,
								5530
							],
							[
								5575,
								5593
							],
							[
								5632,
								5639
							],
							[
								5688,
								5695
							],
							[
								5734,
								5751
							],
							[
								5798,
								5805
							],
							[
								5842,
								5860
							],
							[
								5883,
								5892
							],
							[
								5915,
								5933
							],
							[
								5944,
								6005
							],
							[
								6125,
								6134
							],
							[
								6171,
								6182
							],
							[
								6193,
								6217
							],
							[
								6298,
								6306
							],
							[
								6489,
								6543
							],
							[
								6762,
								6792
							],
							[
								7444,
								7490
							],
							[
								7530,
								7534
							],
							[
								7561,
								7568
							],
							[
								7654,
								7693
							],
							[
								7778,
								7823
							],
							[
								7861,
								7865
							],
							[
								7889,
								7932
							],
							[
								8011,
								8056
							],
							[
								8101,
								8105
							],
							[
								8155,
								8159
							],
							[
								8166,
								8170
							],
							[
								8202,
								8235
							],
							[
								8267,
								8310
							],
							[
								8385,
								8389
							],
							[
								8428,
								8467
							],
							[
								8513,
								8556
							],
							[
								8601,
								8640
							],
							[
								8736,
								8769
							],
							[
								8801,
								8821
							],
							[
								9068,
								9090
							],
							[
								11382,
								11393
							],
							[
								12583,
								12596
							],
							[
								12976,
								13010
							],
							[
								13514,
								13558
							],
							[
								13677,
								13697
							],
							[
								14012,
								14022
							],
							[
								14050,
								14060
							],
							[
								14096,
								14109
							],
							[
								14359,
								14373
							],
							[
								15265,
								15274
							],
							[
								15515,
								15534
							],
							[
								16076,
								16089
							],
							[
								16107,
								16112
							],
							[
								16163,
								16176
							],
							[
								16227,
								16248
							],
							[
								16645,
								16661
							],
							[
								17049,
								17054
							],
							[
								17092,
								17107
							],
							[
								17254,
								17262
							],
							[
								17303,
								17311
							],
							[
								17588,
								17616
							],
							[
								17683,
								17717
							],
							[
								17751,
								17756
							],
							[
								17778,
								17808
							],
							[
								18050,
								18058
							],
							[
								18125,
								18129
							],
							[
								18219,
								18226
							],
							[
								18566,
								18590
							],
							[
								18835,
								18840
							],
							[
								20570,
								20614
							],
							[
								21061,
								21087
							],
							[
								21789,
								21812
							],
							[
								21932,
								21954
							],
							[
								22205,
								22209
							],
							[
								22697,
								22701
							],
							[
								23318,
								23347
							],
							[
								23372,
								23376
							],
							[
								23452,
								23475
							],
							[
								23519,
								23525
							],
							[
								23553,
								23557
							],
							[
								23573,
								23610
							],
							[
								23632,
								23648
							],
							[
								23668,
								23675
							],
							[
								23732,
								23760
							],
							[
								23814,
								23825
							],
							[
								23908,
								23916
							],
							[
								24012,
								24016
							],
							[
								24166,
								24170
							],
							[
								24268,
								24273
							],
							[
								24333,
								24344
							],
							[
								24416,
								24427
							],
							[
								24514,
								24519
							],
							[
								24569,
								24575
							],
							[
								24672,
								24680
							],
							[
								24855,
								24884
							],
							[
								24977,
								25030
							],
							[
								25183,
								25187
							],
							[
								25241,
								25245
							],
							[
								25521,
								25528
							],
							[
								25550,
								25556
							],
							[
								25585,
								25616
							],
							[
								25750,
								25774
							],
							[
								25900,
								25911
							],
							[
								25929,
								25945
							],
							[
								26104,
								26109
							],
							[
								26133,
								26137
							],
							[
								26185,
								26194
							],
							[
								26262,
								26267
							],
							[
								26405,
								26410
							],
							[
								26532,
								26543
							],
							[
								26632,
								26639
							],
							[
								27285,
								27301
							],
							[
								29355,
								29394
							],
							[
								29436,
								29450
							],
							[
								29699,
								29733
							],
							[
								30072,
								30086
							],
							[
								30181,
								30185
							],
							[
								30207,
								30221
							],
							[
								30252,
								30256
							],
							[
								31556,
								31572
							],
							[
								31622,
								31637
							],
							[
								31696,
								31715
							],
							[
								31738,
								31750
							],
							[
								31839,
								31843
							],
							[
								31942,
								31946
							],
							[
								32165,
								32171
							],
							[
								32261,
								32275
							],
							[
								32304,
								32322
							],
							[
								32459,
								32471
							],
							[
								32501,
								32566
							],
							[
								32595,
								32600
							],
							[
								32739,
								32777
							],
							[
								32802,
								32822
							],
							[
								32851,
								32900
							],
							[
								32947,
								32957
							],
							[
								33130,
								33140
							],
							[
								33213,
								33223
							],
							[
								33294,
								33304
							],
							[
								33831,
								33912
							],
							[
								33923,
								33946
							],
							[
								34164,
								34169
							],
							[
								34252,
								34261
							],
							[
								34291,
								34297
							],
							[
								34313,
								34342
							],
							[
								34378,
								34391
							],
							[
								34622,
								34628
							],
							[
								34637,
								34648
							],
							[
								34716,
								34738
							],
							[
								34955,
								34978
							],
							[
								35390,
								35419
							],
							[
								35741,
								35768
							],
							[
								35802,
								35815
							],
							[
								35842,
								35847
							],
							[
								35871,
								35876
							],
							[
								35921,
								35931
							],
							[
								35961,
								35971
							],
							[
								36057,
								36062
							],
							[
								36182,
								36187
							],
							[
								36201,
								36209
							],
							[
								36431,
								36435
							],
							[
								36488,
								36492
							],
							[
								36580,
								36593
							],
							[
								36694,
								36707
							],
							[
								36968,
								37001
							],
							[
								37055,
								37059
							],
							[
								37173,
								37199
							],
							[
								37542,
								37575
							],
							[
								37922,
								37967
							],
							[
								38008,
								38012
							],
							[
								38029,
								38058
							],
							[
								38094,
								38100
							],
							[
								38484,
								38554
							],
							[
								39154,
								39226
							],
							[
								39459,
								39464
							],
							[
								40186,
								40190
							],
							[
								40411,
								40484
							],
							[
								41454,
								41478
							]
						],
						"symlist":
						[
							"function Window(width = 1280, height = 900)",
							"begin()",
							"end()",
							"handleMouseButton(button, action, mods)",
							"handleCursorPos(x, y)",
							"handleCursorEnter(cur)",
							".handleCharMods = (char, mods) =>",
							"() =>",
							" () =>",
							"function toXML(obj)",
							" a =>",
							"function renderToXML(component)",
							"function GetFiletime(file, field = 'mtime')",
							"file =>",
							"function FindProjects(dirPtn = '../*/eagle', sortDirection = -1, sortField = 'mtime')",
							"fn =>",
							"minIndex = name =>",
							"file =>",
							"file =>",
							"hasBoth = name =>",
							"name =>",
							"([name, index]) =>",
							"(a, b) =>",
							"([name, index]) =>",
							"function SortFiles(files, direction = 1, statField = 'mtime')",
							"(a, b) =>",
							"([file]) =>",
							"function pick(it, n = 1)",
							"n = i =>",
							"function append(tag, attrs, children, parent, element)",
							"function render(doc, filename)",
							"function CollectParts(doc = project.schematic)",
							"e =>",
							"attr =>",
							"({ name, deviceset, device, value }) =>",
							"function CollectElements(doc = project.board)",
							"e =>",
							"({ name, library, package: pkg, value }) =>",
							"function CollectPartsElements(proj = project)",
							"e =>",
							"a =>",
							"e =>",
							"([{ x, y, ...element }, part]) =>",
							"function ListParts(doc = project.schematic)",
							"p =>",
							"({ name, deviceset, device, value }) =>",
							"function ShowParts(doc = project.schematic)",
							"({ name, deviceset, device, value }) =>",
							"function EaglePrint(file, output)",
							" (dir, base, ext) =>",
							"function main(...args)",
							"toNumber(n)",
							"wire(...args)",
							"coil({ rect, n, diameter, width })",
							"load(filename, project = globalThis.project)",
							"newProject(filename)",
							"sch: () =>",
							"brd: () =>",
							"nextProject()",
							"projectNames()",
							"quit(arg)",
							"renderToString(arg)",
							" (...args) =>",
							"() =>",
							".exit = () =>",
							".debug = (...args) =>",
							".show = value =>",
							"() =>",
							"(item, i, a) =>",
							"entry =>",
							"entry =>",
							"function Terminate(exitCode)",
							"function xml(strings, expressions)",
							" e =>",
							"function UpdateMeasures(board)",
							"lines =>",
							"e =>",
							"line =>",
							"function AlignItem(item)",
							"tr =>",
							"function AlignAll(doc = globalThis.document)",
							"function fixValue(element)",
							"function fixValues(doc)",
							"function coordMap(doc)",
							"p =>",
							"t =>",
							"function GetPolygons(d = doc)",
							"e =>",
							"function FindPolygons()",
							"doc =>",
							"e =>",
							"function RemovePolygons(p = polygons)",
							"([doc, list]) =>",
							"path =>",
							"function GetNames(doc, pred)",
							"pred = e =>",
							"sheet =>",
							"e =>",
							"e =>",
							" e =>",
							"([v, p]) =>",
							"([v, p]) =>",
							"() =>",
							"doc =>",
							"sheet =>",
							"function GetByName(doc, name)",
							"function CorrelateSchematicAndBoard(schematic, board)",
							"d =>",
							"n =>",
							"name =>",
							"doc =>",
							"function GetSheets(doc_or_proj)",
							"function SaveLibraries()",
							"([n, e]) =>",
							"(acc, [n, e]) =>",
							" e =>",
							"e =>",
							"(a, b) =>",
							"id =>",
							"id =>",
							"([n, e]) =>",
							"name =>",
							"(acc, [n, e]) =>",
							"function InitBoard(doc = project.board)",
							"([name, e]) =>",
							"async function testEagle(filename)",
							"([name, e]) =>",
							"e =>",
							"([name, i]) =>",
							"p =>",
							"(child, i, a) =>",
							"(child2, i2) =>",
							"([index, equal]) =>",
							"([index]) =>",
							"i =>",
							"i =>",
							"doc =>",
							"([file, e]) =>",
							"([file, xpath]) =>",
							" ([k, v]) =>",
							"function ModifyPath(p, fn = (dir, base, ext) => [dir, base, ext])",
							"() =>",
							"function AppendToFilename(p, str = '')",
							" (dir, base, ext) =>",
							"function SetSVGBackground(xml, color = '#ffffff')",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							"FileFunction = (fn, rfn = ReadFile, wfn = WriteFile, namefn = n => n, ...args) =>",
							" (filename, ...args) =>",
							" n =>",
							" data =>",
							" n =>",
							"function PutRowsColumns(rows)",
							"(acc, row) =>",
							"row =>",
							"(col, i) =>",
							"function GetLibrary(e)",
							"function ElementName(e)",
							"function GetRotation(element)",
							"function Package2Circuit(p)",
							"({ x, y }) =>",
							"pt =>",
							"pt =>",
							"({ x }) =>",
							"({ y }) =>",
							"pt =>",
							"pt =>",
							"coord =>",
							"x =>",
							"y =>",
							"({ x, y }) =>",
							"({ x, y }) =>",
							"function Contactref2Circuit(cref)",
							"e =>",
							"function Signal2Circuit(s)",
							"function Element2Circuit(element)",
							"function GetUsedPackages(doc = project.board)",
							"e =>",
							"function GetPackagePitch(pkg)",
							"pad =>",
							"function Eagle2Circuit(doc = project.board, width = 100, height = 100)",
							"function Eagle2CircuitJS(doc = project.schematic, scale = 50, sheet = 0)",
							" n =>",
							"e =>",
							"function MakeGraph(board = project.board, ignore = /^(GND|[-+][0-9]+V)$/)",
							"function DrawGraph(g, w)"
						]
					},
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					14,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-shell.js",
						"symkeys":
						[
							[
								3224,
								3267
							],
							[
								4053,
								4060
							],
							[
								4160,
								4165
							],
							[
								4249,
								4288
							],
							[
								4367,
								4388
							],
							[
								4449,
								4471
							],
							[
								4545,
								4578
							],
							[
								4685,
								4690
							],
							[
								4753,
								4759
							],
							[
								4861,
								4880
							],
							[
								4902,
								4907
							],
							[
								5010,
								5041
							],
							[
								5092,
								5135
							],
							[
								5180,
								5187
							],
							[
								5288,
								5373
							],
							[
								5525,
								5530
							],
							[
								5575,
								5593
							],
							[
								5632,
								5639
							],
							[
								5688,
								5695
							],
							[
								5734,
								5751
							],
							[
								5798,
								5805
							],
							[
								5842,
								5860
							],
							[
								5883,
								5892
							],
							[
								5915,
								5933
							],
							[
								5944,
								6005
							],
							[
								6125,
								6134
							],
							[
								6171,
								6182
							],
							[
								6193,
								6217
							],
							[
								6298,
								6306
							],
							[
								6489,
								6543
							],
							[
								6762,
								6792
							],
							[
								7444,
								7490
							],
							[
								7530,
								7534
							],
							[
								7561,
								7568
							],
							[
								7654,
								7693
							],
							[
								7778,
								7823
							],
							[
								7861,
								7865
							],
							[
								7889,
								7932
							],
							[
								8011,
								8056
							],
							[
								8101,
								8105
							],
							[
								8155,
								8159
							],
							[
								8166,
								8170
							],
							[
								8202,
								8235
							],
							[
								8267,
								8310
							],
							[
								8385,
								8389
							],
							[
								8428,
								8467
							],
							[
								8513,
								8556
							],
							[
								8601,
								8640
							],
							[
								8736,
								8769
							],
							[
								8801,
								8821
							],
							[
								9068,
								9090
							],
							[
								11382,
								11393
							],
							[
								12583,
								12596
							],
							[
								12976,
								13010
							],
							[
								13514,
								13558
							],
							[
								13677,
								13697
							],
							[
								14012,
								14022
							],
							[
								14050,
								14060
							],
							[
								14096,
								14109
							],
							[
								14359,
								14373
							],
							[
								15265,
								15274
							],
							[
								15515,
								15534
							],
							[
								16076,
								16089
							],
							[
								16107,
								16112
							],
							[
								16163,
								16176
							],
							[
								16227,
								16248
							],
							[
								16645,
								16661
							],
							[
								17049,
								17054
							],
							[
								17092,
								17107
							],
							[
								17254,
								17262
							],
							[
								17303,
								17311
							],
							[
								17588,
								17616
							],
							[
								17683,
								17717
							],
							[
								17751,
								17756
							],
							[
								17778,
								17808
							],
							[
								18050,
								18058
							],
							[
								18125,
								18129
							],
							[
								18219,
								18226
							],
							[
								18566,
								18590
							],
							[
								18835,
								18840
							],
							[
								20570,
								20614
							],
							[
								21061,
								21087
							],
							[
								21789,
								21812
							],
							[
								21932,
								21954
							],
							[
								22205,
								22209
							],
							[
								22697,
								22701
							],
							[
								23318,
								23347
							],
							[
								23372,
								23376
							],
							[
								23452,
								23475
							],
							[
								23519,
								23525
							],
							[
								23553,
								23557
							],
							[
								23573,
								23610
							],
							[
								23632,
								23648
							],
							[
								23668,
								23675
							],
							[
								23732,
								23760
							],
							[
								23814,
								23825
							],
							[
								23908,
								23916
							],
							[
								24012,
								24016
							],
							[
								24166,
								24170
							],
							[
								24268,
								24273
							],
							[
								24333,
								24344
							],
							[
								24416,
								24427
							],
							[
								24514,
								24519
							],
							[
								24569,
								24575
							],
							[
								24672,
								24680
							],
							[
								24855,
								24884
							],
							[
								24977,
								25030
							],
							[
								25183,
								25187
							],
							[
								25241,
								25245
							],
							[
								25521,
								25528
							],
							[
								25550,
								25556
							],
							[
								25585,
								25616
							],
							[
								25750,
								25774
							],
							[
								25900,
								25911
							],
							[
								25929,
								25945
							],
							[
								26104,
								26109
							],
							[
								26133,
								26137
							],
							[
								26185,
								26194
							],
							[
								26262,
								26267
							],
							[
								26405,
								26410
							],
							[
								26532,
								26543
							],
							[
								26632,
								26639
							],
							[
								27285,
								27301
							],
							[
								29355,
								29394
							],
							[
								29436,
								29450
							],
							[
								29699,
								29733
							],
							[
								30072,
								30086
							],
							[
								30181,
								30185
							],
							[
								30207,
								30221
							],
							[
								30252,
								30256
							],
							[
								31556,
								31572
							],
							[
								31622,
								31637
							],
							[
								31696,
								31715
							],
							[
								31738,
								31750
							],
							[
								31839,
								31843
							],
							[
								31942,
								31946
							],
							[
								32165,
								32171
							],
							[
								32261,
								32275
							],
							[
								32304,
								32322
							],
							[
								32459,
								32471
							],
							[
								32501,
								32566
							],
							[
								32595,
								32600
							],
							[
								32739,
								32777
							],
							[
								32802,
								32822
							],
							[
								32851,
								32900
							],
							[
								32947,
								32957
							],
							[
								33130,
								33140
							],
							[
								33213,
								33223
							],
							[
								33294,
								33304
							],
							[
								33831,
								33912
							],
							[
								33923,
								33946
							],
							[
								34164,
								34169
							],
							[
								34252,
								34261
							],
							[
								34291,
								34297
							],
							[
								34313,
								34342
							],
							[
								34378,
								34391
							],
							[
								34622,
								34628
							],
							[
								34637,
								34648
							],
							[
								34716,
								34738
							],
							[
								34955,
								34978
							],
							[
								35390,
								35419
							],
							[
								35741,
								35768
							],
							[
								35802,
								35815
							],
							[
								35842,
								35847
							],
							[
								35871,
								35876
							],
							[
								35921,
								35931
							],
							[
								35961,
								35971
							],
							[
								36057,
								36062
							],
							[
								36182,
								36187
							],
							[
								36201,
								36209
							],
							[
								36431,
								36435
							],
							[
								36488,
								36492
							],
							[
								36580,
								36593
							],
							[
								36694,
								36707
							],
							[
								36968,
								37001
							],
							[
								37055,
								37059
							],
							[
								37173,
								37199
							],
							[
								37542,
								37575
							],
							[
								37922,
								37967
							],
							[
								38008,
								38012
							],
							[
								38029,
								38058
							],
							[
								38094,
								38100
							],
							[
								38484,
								38554
							],
							[
								39154,
								39226
							],
							[
								39459,
								39464
							],
							[
								40186,
								40190
							],
							[
								40411,
								40484
							],
							[
								41454,
								41478
							]
						],
						"symlist":
						[
							"function Window(width = 1280, height = 900)",
							"begin()",
							"end()",
							"handleMouseButton(button, action, mods)",
							"handleCursorPos(x, y)",
							"handleCursorEnter(cur)",
							".handleCharMods = (char, mods) =>",
							"() =>",
							" () =>",
							"function toXML(obj)",
							" a =>",
							"function renderToXML(component)",
							"function GetFiletime(file, field = 'mtime')",
							"file =>",
							"function FindProjects(dirPtn = '../*/eagle', sortDirection = -1, sortField = 'mtime')",
							"fn =>",
							"minIndex = name =>",
							"file =>",
							"file =>",
							"hasBoth = name =>",
							"name =>",
							"([name, index]) =>",
							"(a, b) =>",
							"([name, index]) =>",
							"function SortFiles(files, direction = 1, statField = 'mtime')",
							"(a, b) =>",
							"([file]) =>",
							"function pick(it, n = 1)",
							"n = i =>",
							"function append(tag, attrs, children, parent, element)",
							"function render(doc, filename)",
							"function CollectParts(doc = project.schematic)",
							"e =>",
							"attr =>",
							"({ name, deviceset, device, value }) =>",
							"function CollectElements(doc = project.board)",
							"e =>",
							"({ name, library, package: pkg, value }) =>",
							"function CollectPartsElements(proj = project)",
							"e =>",
							"a =>",
							"e =>",
							"([{ x, y, ...element }, part]) =>",
							"function ListParts(doc = project.schematic)",
							"p =>",
							"({ name, deviceset, device, value }) =>",
							"function ShowParts(doc = project.schematic)",
							"({ name, deviceset, device, value }) =>",
							"function EaglePrint(file, output)",
							" (dir, base, ext) =>",
							"function main(...args)",
							"toNumber(n)",
							"wire(...args)",
							"coil({ rect, n, diameter, width })",
							"load(filename, project = globalThis.project)",
							"newProject(filename)",
							"sch: () =>",
							"brd: () =>",
							"nextProject()",
							"projectNames()",
							"quit(arg)",
							"renderToString(arg)",
							" (...args) =>",
							"() =>",
							".exit = () =>",
							".debug = (...args) =>",
							".show = value =>",
							"() =>",
							"(item, i, a) =>",
							"entry =>",
							"entry =>",
							"function Terminate(exitCode)",
							"function xml(strings, expressions)",
							" e =>",
							"function UpdateMeasures(board)",
							"lines =>",
							"e =>",
							"line =>",
							"function AlignItem(item)",
							"tr =>",
							"function AlignAll(doc = globalThis.document)",
							"function fixValue(element)",
							"function fixValues(doc)",
							"function coordMap(doc)",
							"p =>",
							"t =>",
							"function GetPolygons(d = doc)",
							"e =>",
							"function FindPolygons()",
							"doc =>",
							"e =>",
							"function RemovePolygons(p = polygons)",
							"([doc, list]) =>",
							"path =>",
							"function GetNames(doc, pred)",
							"pred = e =>",
							"sheet =>",
							"e =>",
							"e =>",
							" e =>",
							"([v, p]) =>",
							"([v, p]) =>",
							"() =>",
							"doc =>",
							"sheet =>",
							"function GetByName(doc, name)",
							"function CorrelateSchematicAndBoard(schematic, board)",
							"d =>",
							"n =>",
							"name =>",
							"doc =>",
							"function GetSheets(doc_or_proj)",
							"function SaveLibraries()",
							"([n, e]) =>",
							"(acc, [n, e]) =>",
							" e =>",
							"e =>",
							"(a, b) =>",
							"id =>",
							"id =>",
							"([n, e]) =>",
							"name =>",
							"(acc, [n, e]) =>",
							"function InitBoard(doc = project.board)",
							"([name, e]) =>",
							"async function testEagle(filename)",
							"([name, e]) =>",
							"e =>",
							"([name, i]) =>",
							"p =>",
							"(child, i, a) =>",
							"(child2, i2) =>",
							"([index, equal]) =>",
							"([index]) =>",
							"i =>",
							"i =>",
							"doc =>",
							"([file, e]) =>",
							"([file, xpath]) =>",
							" ([k, v]) =>",
							"function ModifyPath(p, fn = (dir, base, ext) => [dir, base, ext])",
							"() =>",
							"function AppendToFilename(p, str = '')",
							" (dir, base, ext) =>",
							"function SetSVGBackground(xml, color = '#ffffff')",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							"FileFunction = (fn, rfn = ReadFile, wfn = WriteFile, namefn = n => n, ...args) =>",
							" (filename, ...args) =>",
							" n =>",
							" data =>",
							" n =>",
							"function PutRowsColumns(rows)",
							"(acc, row) =>",
							"row =>",
							"(col, i) =>",
							"function GetLibrary(e)",
							"function ElementName(e)",
							"function GetRotation(element)",
							"function Package2Circuit(p)",
							"({ x, y }) =>",
							"pt =>",
							"pt =>",
							"({ x }) =>",
							"({ y }) =>",
							"pt =>",
							"pt =>",
							"coord =>",
							"x =>",
							"y =>",
							"({ x, y }) =>",
							"({ x, y }) =>",
							"function Contactref2Circuit(cref)",
							"e =>",
							"function Signal2Circuit(s)",
							"function Element2Circuit(element)",
							"function GetUsedPackages(doc = project.board)",
							"e =>",
							"function GetPackagePitch(pkg)",
							"pad =>",
							"function Eagle2Circuit(doc = project.board, width = 100, height = 100)",
							"function Eagle2CircuitJS(doc = project.schematic, scale = 50, sheet = 0)",
							" n =>",
							"e =>",
							"function MakeGraph(board = project.board, ignore = /^(GND|[-+][0-9]+V)$/)",
							"function DrawGraph(g, w)"
						]
					},
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					15,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-shell.js",
						"symkeys":
						[
							[
								3224,
								3267
							],
							[
								4053,
								4060
							],
							[
								4160,
								4165
							],
							[
								4249,
								4288
							],
							[
								4367,
								4388
							],
							[
								4449,
								4471
							],
							[
								4545,
								4578
							],
							[
								4685,
								4690
							],
							[
								4753,
								4759
							],
							[
								4861,
								4880
							],
							[
								4902,
								4907
							],
							[
								5010,
								5041
							],
							[
								5092,
								5135
							],
							[
								5180,
								5187
							],
							[
								5288,
								5373
							],
							[
								5525,
								5530
							],
							[
								5575,
								5593
							],
							[
								5632,
								5639
							],
							[
								5688,
								5695
							],
							[
								5734,
								5751
							],
							[
								5798,
								5805
							],
							[
								5842,
								5860
							],
							[
								5883,
								5892
							],
							[
								5915,
								5933
							],
							[
								5944,
								6005
							],
							[
								6125,
								6134
							],
							[
								6171,
								6182
							],
							[
								6193,
								6217
							],
							[
								6298,
								6306
							],
							[
								6489,
								6543
							],
							[
								6762,
								6792
							],
							[
								7444,
								7490
							],
							[
								7530,
								7534
							],
							[
								7561,
								7568
							],
							[
								7654,
								7693
							],
							[
								7778,
								7823
							],
							[
								7861,
								7865
							],
							[
								7889,
								7932
							],
							[
								8011,
								8056
							],
							[
								8101,
								8105
							],
							[
								8155,
								8159
							],
							[
								8166,
								8170
							],
							[
								8202,
								8235
							],
							[
								8267,
								8310
							],
							[
								8385,
								8389
							],
							[
								8428,
								8467
							],
							[
								8513,
								8556
							],
							[
								8601,
								8640
							],
							[
								8736,
								8769
							],
							[
								8801,
								8821
							],
							[
								9068,
								9090
							],
							[
								11382,
								11393
							],
							[
								12583,
								12596
							],
							[
								12976,
								13010
							],
							[
								13514,
								13558
							],
							[
								13677,
								13697
							],
							[
								14012,
								14022
							],
							[
								14050,
								14060
							],
							[
								14096,
								14109
							],
							[
								14359,
								14373
							],
							[
								15265,
								15274
							],
							[
								15515,
								15534
							],
							[
								16076,
								16089
							],
							[
								16107,
								16112
							],
							[
								16163,
								16176
							],
							[
								16227,
								16248
							],
							[
								16645,
								16661
							],
							[
								17049,
								17054
							],
							[
								17092,
								17107
							],
							[
								17254,
								17262
							],
							[
								17303,
								17311
							],
							[
								17588,
								17616
							],
							[
								17683,
								17717
							],
							[
								17751,
								17756
							],
							[
								17778,
								17808
							],
							[
								18050,
								18058
							],
							[
								18125,
								18129
							],
							[
								18219,
								18226
							],
							[
								18566,
								18590
							],
							[
								18835,
								18840
							],
							[
								20570,
								20614
							],
							[
								21061,
								21087
							],
							[
								21789,
								21812
							],
							[
								21932,
								21954
							],
							[
								22205,
								22209
							],
							[
								22697,
								22701
							],
							[
								23318,
								23347
							],
							[
								23372,
								23376
							],
							[
								23452,
								23475
							],
							[
								23519,
								23525
							],
							[
								23553,
								23557
							],
							[
								23573,
								23610
							],
							[
								23632,
								23648
							],
							[
								23668,
								23675
							],
							[
								23732,
								23760
							],
							[
								23814,
								23825
							],
							[
								23908,
								23916
							],
							[
								24012,
								24016
							],
							[
								24166,
								24170
							],
							[
								24268,
								24273
							],
							[
								24333,
								24344
							],
							[
								24416,
								24427
							],
							[
								24514,
								24519
							],
							[
								24569,
								24575
							],
							[
								24672,
								24680
							],
							[
								24855,
								24884
							],
							[
								24977,
								25030
							],
							[
								25183,
								25187
							],
							[
								25241,
								25245
							],
							[
								25521,
								25528
							],
							[
								25550,
								25556
							],
							[
								25585,
								25616
							],
							[
								25750,
								25774
							],
							[
								25900,
								25911
							],
							[
								25929,
								25945
							],
							[
								26104,
								26109
							],
							[
								26133,
								26137
							],
							[
								26185,
								26194
							],
							[
								26262,
								26267
							],
							[
								26405,
								26410
							],
							[
								26532,
								26543
							],
							[
								26632,
								26639
							],
							[
								27285,
								27301
							],
							[
								29355,
								29394
							],
							[
								29436,
								29450
							],
							[
								29699,
								29733
							],
							[
								30072,
								30086
							],
							[
								30181,
								30185
							],
							[
								30207,
								30221
							],
							[
								30252,
								30256
							],
							[
								31556,
								31572
							],
							[
								31622,
								31637
							],
							[
								31696,
								31715
							],
							[
								31738,
								31750
							],
							[
								31839,
								31843
							],
							[
								31942,
								31946
							],
							[
								32165,
								32171
							],
							[
								32261,
								32275
							],
							[
								32304,
								32322
							],
							[
								32459,
								32471
							],
							[
								32501,
								32566
							],
							[
								32595,
								32600
							],
							[
								32739,
								32777
							],
							[
								32802,
								32822
							],
							[
								32851,
								32900
							],
							[
								32947,
								32957
							],
							[
								33130,
								33140
							],
							[
								33213,
								33223
							],
							[
								33294,
								33304
							],
							[
								33831,
								33912
							],
							[
								33923,
								33946
							],
							[
								34164,
								34169
							],
							[
								34252,
								34261
							],
							[
								34291,
								34297
							],
							[
								34313,
								34342
							],
							[
								34378,
								34391
							],
							[
								34622,
								34628
							],
							[
								34637,
								34648
							],
							[
								34716,
								34738
							],
							[
								34955,
								34978
							],
							[
								35390,
								35419
							],
							[
								35741,
								35768
							],
							[
								35802,
								35815
							],
							[
								35842,
								35847
							],
							[
								35871,
								35876
							],
							[
								35921,
								35931
							],
							[
								35961,
								35971
							],
							[
								36057,
								36062
							],
							[
								36182,
								36187
							],
							[
								36201,
								36209
							],
							[
								36431,
								36435
							],
							[
								36488,
								36492
							],
							[
								36580,
								36593
							],
							[
								36694,
								36707
							],
							[
								36968,
								37001
							],
							[
								37055,
								37059
							],
							[
								37173,
								37199
							],
							[
								37542,
								37575
							],
							[
								37922,
								37967
							],
							[
								38008,
								38012
							],
							[
								38029,
								38058
							],
							[
								38094,
								38100
							],
							[
								38484,
								38554
							],
							[
								39154,
								39226
							],
							[
								39459,
								39464
							],
							[
								40186,
								40190
							],
							[
								40411,
								40484
							],
							[
								41454,
								41478
							]
						],
						"symlist":
						[
							"function Window(width = 1280, height = 900)",
							"begin()",
							"end()",
							"handleMouseButton(button, action, mods)",
							"handleCursorPos(x, y)",
							"handleCursorEnter(cur)",
							".handleCharMods = (char, mods) =>",
							"() =>",
							" () =>",
							"function toXML(obj)",
							" a =>",
							"function renderToXML(component)",
							"function GetFiletime(file, field = 'mtime')",
							"file =>",
							"function FindProjects(dirPtn = '../*/eagle', sortDirection = -1, sortField = 'mtime')",
							"fn =>",
							"minIndex = name =>",
							"file =>",
							"file =>",
							"hasBoth = name =>",
							"name =>",
							"([name, index]) =>",
							"(a, b) =>",
							"([name, index]) =>",
							"function SortFiles(files, direction = 1, statField = 'mtime')",
							"(a, b) =>",
							"([file]) =>",
							"function pick(it, n = 1)",
							"n = i =>",
							"function append(tag, attrs, children, parent, element)",
							"function render(doc, filename)",
							"function CollectParts(doc = project.schematic)",
							"e =>",
							"attr =>",
							"({ name, deviceset, device, value }) =>",
							"function CollectElements(doc = project.board)",
							"e =>",
							"({ name, library, package: pkg, value }) =>",
							"function CollectPartsElements(proj = project)",
							"e =>",
							"a =>",
							"e =>",
							"([{ x, y, ...element }, part]) =>",
							"function ListParts(doc = project.schematic)",
							"p =>",
							"({ name, deviceset, device, value }) =>",
							"function ShowParts(doc = project.schematic)",
							"({ name, deviceset, device, value }) =>",
							"function EaglePrint(file, output)",
							" (dir, base, ext) =>",
							"function main(...args)",
							"toNumber(n)",
							"wire(...args)",
							"coil({ rect, n, diameter, width })",
							"load(filename, project = globalThis.project)",
							"newProject(filename)",
							"sch: () =>",
							"brd: () =>",
							"nextProject()",
							"projectNames()",
							"quit(arg)",
							"renderToString(arg)",
							" (...args) =>",
							"() =>",
							".exit = () =>",
							".debug = (...args) =>",
							".show = value =>",
							"() =>",
							"(item, i, a) =>",
							"entry =>",
							"entry =>",
							"function Terminate(exitCode)",
							"function xml(strings, expressions)",
							" e =>",
							"function UpdateMeasures(board)",
							"lines =>",
							"e =>",
							"line =>",
							"function AlignItem(item)",
							"tr =>",
							"function AlignAll(doc = globalThis.document)",
							"function fixValue(element)",
							"function fixValues(doc)",
							"function coordMap(doc)",
							"p =>",
							"t =>",
							"function GetPolygons(d = doc)",
							"e =>",
							"function FindPolygons()",
							"doc =>",
							"e =>",
							"function RemovePolygons(p = polygons)",
							"([doc, list]) =>",
							"path =>",
							"function GetNames(doc, pred)",
							"pred = e =>",
							"sheet =>",
							"e =>",
							"e =>",
							" e =>",
							"([v, p]) =>",
							"([v, p]) =>",
							"() =>",
							"doc =>",
							"sheet =>",
							"function GetByName(doc, name)",
							"function CorrelateSchematicAndBoard(schematic, board)",
							"d =>",
							"n =>",
							"name =>",
							"doc =>",
							"function GetSheets(doc_or_proj)",
							"function SaveLibraries()",
							"([n, e]) =>",
							"(acc, [n, e]) =>",
							" e =>",
							"e =>",
							"(a, b) =>",
							"id =>",
							"id =>",
							"([n, e]) =>",
							"name =>",
							"(acc, [n, e]) =>",
							"function InitBoard(doc = project.board)",
							"([name, e]) =>",
							"async function testEagle(filename)",
							"([name, e]) =>",
							"e =>",
							"([name, i]) =>",
							"p =>",
							"(child, i, a) =>",
							"(child2, i2) =>",
							"([index, equal]) =>",
							"([index]) =>",
							"i =>",
							"i =>",
							"doc =>",
							"([file, e]) =>",
							"([file, xpath]) =>",
							" ([k, v]) =>",
							"function ModifyPath(p, fn = (dir, base, ext) => [dir, base, ext])",
							"() =>",
							"function AppendToFilename(p, str = '')",
							" (dir, base, ext) =>",
							"function SetSVGBackground(xml, color = '#ffffff')",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							"FileFunction = (fn, rfn = ReadFile, wfn = WriteFile, namefn = n => n, ...args) =>",
							" (filename, ...args) =>",
							" n =>",
							" data =>",
							" n =>",
							"function PutRowsColumns(rows)",
							"(acc, row) =>",
							"row =>",
							"(col, i) =>",
							"function GetLibrary(e)",
							"function ElementName(e)",
							"function GetRotation(element)",
							"function Package2Circuit(p)",
							"({ x, y }) =>",
							"pt =>",
							"pt =>",
							"({ x }) =>",
							"({ y }) =>",
							"pt =>",
							"pt =>",
							"coord =>",
							"x =>",
							"y =>",
							"({ x, y }) =>",
							"({ x, y }) =>",
							"function Contactref2Circuit(cref)",
							"e =>",
							"function Signal2Circuit(s)",
							"function Element2Circuit(element)",
							"function GetUsedPackages(doc = project.board)",
							"e =>",
							"function GetPackagePitch(pkg)",
							"pad =>",
							"function Eagle2Circuit(doc = project.board, width = 100, height = 100)",
							"function Eagle2CircuitJS(doc = project.schematic, scale = 50, sheet = 0)",
							" n =>",
							"e =>",
							"function MakeGraph(board = project.board, ignore = /^(GND|[-+][0-9]+V)$/)",
							"function DrawGraph(g, w)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA5DQAAV2luZG93KHdpZHRoID0gMTI4MCwgaGVpZ2h0ID0gOTAwKQogIGJlZ2luKCkKICBlbmQoKQogIGhhbmRsZU1vdXNlQnV0dG9uKGJ1dHRvbiwgYWN0aW9uLCBtb2RzKQogIGhhbmRsZUN1cnNvclBvcyh4LCB5KQogIGhhbmRsZUN1cnNvckVudGVyKGN1cikKICAuaGFuZGxlQ2hhck1vZHMgPSAoY2hhciwgbW9kcykgPT4KKCkgPT4KKCkgPT4KICB0b1hNTChvYmopCmEgPT4KICByZW5kZXJUb1hNTChjb21wb25lbnQpCkdldEZpbGV0aW1lKGZpbGUsIGZpZWxkID0gJ210aW1lJykKICBmaWxlID0+CkZpbmRQcm9qZWN0cyhkaXJQdG4gPSAnLi4vKi9lYWdsZScsIHNvcnREaXJlY3Rpb24gPSAtMSwgc29ydEZpZWxkID0gJ210aW1lJykKICBmbiA9PgogIG1pbkluZGV4ID0gbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CiAgaGFzQm90aCA9IG5hbWUgPT4KICBuYW1lID0+CihbbmFtZSwgaW5kZXhdKSA9PgooYSwgYikgPT4KKFtuYW1lLCBpbmRleF0pID0+ClNvcnRGaWxlcyhmaWxlcywgZGlyZWN0aW9uID0gMSwgc3RhdEZpZWxkID0gJ210aW1lJykKKGEsIGIpID0+CihbZmlsZV0pID0+CiAgcGljayhpdCwgbiA9IDEpCiAgbiA9IGkgPT4KICBhcHBlbmQodGFnLCBhdHRycywgY2hpbGRyZW4sIHBhcmVudCwgZWxlbWVudCkKICByZW5kZXIoZG9jLCBmaWxlbmFtZSkKQ29sbGVjdFBhcnRzKGRvYyA9IHByb2plY3Quc2NoZW1hdGljKQogIGUgPT4KICBhdHRyID0+Cih7IG5hbWUsIGRldmljZXNldCwgZGV2aWNlLCB2YWx1ZSB9KSA9PgpDb2xsZWN0RWxlbWVudHMoZG9jID0gcHJvamVjdC5ib2FyZCkKICBlID0+Cih7IG5hbWUsIGxpYnJhcnksIHBhY2thZ2U6IHBrZywgdmFsdWUgfSkgPT4KQ29sbGVjdFBhcnRzRWxlbWVudHMocHJvaiA9IHByb2plY3QpCiAgZSA9PgogIGEgPT4KICBlID0+CihbeyB4LCB5LCAuLi5lbGVtZW50IH0sIHBhcnRdKSA9PgpMaXN0UGFydHMoZG9jID0gcHJvamVjdC5zY2hlbWF0aWMpCiAgcCA9PgooeyBuYW1lLCBkZXZpY2VzZXQsIGRldmljZSwgdmFsdWUgfSkgPT4KU2hvd1BhcnRzKGRvYyA9IHByb2plY3Quc2NoZW1hdGljKQooeyBuYW1lLCBkZXZpY2VzZXQsIGRldmljZSwgdmFsdWUgfSkgPT4KRWFnbGVQcmludChmaWxlLCBvdXRwdXQpCihkaXIsIGJhc2UsIGV4dCkgPT4KICBtYWluKC4uLmFyZ3MpCiAgdG9OdW1iZXIobikKICB3aXJlKC4uLmFyZ3MpCiAgY29pbCh7IHJlY3QsIG4sIGRpYW1ldGVyLCB3aWR0aCB9KQogIGxvYWQoZmlsZW5hbWUsIHByb2plY3QgPSBnbG9iYWxUaGlzLnByb2plY3QpCiAgbmV3UHJvamVjdChmaWxlbmFtZSkKICBzY2g6ICgpID0+CiAgYnJkOiAoKSA9PgogIG5leHRQcm9qZWN0KCkKICBwcm9qZWN0TmFtZXMoKQogIHF1aXQoYXJnKQogIHJlbmRlclRvU3RyaW5nKGFyZykKKC4uLmFyZ3MpID0+CigpID0+CiAgLmV4aXQgPSAoKSA9PgogIC5kZWJ1ZyA9ICguLi5hcmdzKSA9PgogIC5zaG93ID0gdmFsdWUgPT4KKCkgPT4KKGl0ZW0sIGksIGEpID0+CiAgZW50cnkgPT4KICBlbnRyeSA9PgpUZXJtaW5hdGUoZXhpdENvZGUpCiAgeG1sKHN0cmluZ3MsIGV4cHJlc3Npb25zKQplID0+ClVwZGF0ZU1lYXN1cmVzKGJvYXJkKQogIGxpbmVzID0+CiAgZSA9PgogIGxpbmUgPT4KQWxpZ25JdGVtKGl0ZW0pCiAgdHIgPT4KQWxpZ25BbGwoZG9jID0gZ2xvYmFsVGhpcy5kb2N1bWVudCkKICBmaXhWYWx1ZShlbGVtZW50KQogIGZpeFZhbHVlcyhkb2MpCiAgY29vcmRNYXAoZG9jKQogIHAgPT4KICB0ID0+CkdldFBvbHlnb25zKGQgPSBkb2MpCiAgZSA9PgpGaW5kUG9seWdvbnMoKQogIGRvYyA9PgogIGUgPT4KUmVtb3ZlUG9seWdvbnMocCA9IHBvbHlnb25zKQooW2RvYywgbGlzdF0pID0+CiAgcGF0aCA9PgpHZXROYW1lcyhkb2MsIHByZWQpCiAgcHJlZCA9IGUgPT4KICBzaGVldCA9PgogIGUgPT4KICBlID0+CmUgPT4KKFt2LCBwXSkgPT4KKFt2LCBwXSkgPT4KKCkgPT4KICBkb2MgPT4KICBzaGVldCA9PgpHZXRCeU5hbWUoZG9jLCBuYW1lKQpDb3JyZWxhdGVTY2hlbWF0aWNBbmRCb2FyZChzY2hlbWF0aWMsIGJvYXJkKQogIGQgPT4KICBuID0+CiAgbmFtZSA9PgogIGRvYyA9PgpHZXRTaGVldHMoZG9jX29yX3Byb2opClNhdmVMaWJyYXJpZXMoKQooW24sIGVdKSA9PgooYWNjLCBbbiwgZV0pID0+CmUgPT4KICBlID0+CihhLCBiKSA9PgogIGlkID0+CiAgaWQgPT4KKFtuLCBlXSkgPT4KICBuYW1lID0+CihhY2MsIFtuLCBlXSkgPT4KSW5pdEJvYXJkKGRvYyA9IHByb2plY3QuYm9hcmQpCihbbmFtZSwgZV0pID0+CiAgdGVzdEVhZ2xlKGZpbGVuYW1lKQooW25hbWUsIGVdKSA9PgogIGUgPT4KKFtuYW1lLCBpXSkgPT4KICBwID0+CihjaGlsZCwgaSwgYSkgPT4KKGNoaWxkMiwgaTIpID0+CihbaW5kZXgsIGVxdWFsXSkgPT4KKFtpbmRleF0pID0+CiAgaSA9PgogIGkgPT4KICBkb2MgPT4KKFtmaWxlLCBlXSkgPT4KKFtmaWxlLCB4cGF0aF0pID0+Cihbaywgdl0pID0+Ck1vZGlmeVBhdGgocCwgZm4gPSAoZGlyLCBiYXNlLCBleHQpID0+IFtkaXIsIGJhc2UsIGV4dF0pCigpID0+CkFwcGVuZFRvRmlsZW5hbWUocCwgc3RyID0gJycpCihkaXIsIGJhc2UsIGV4dCkgPT4KU2V0U1ZHQmFja2dyb3VuZCh4bWwsIGNvbG9yID0gJyNmZmZmZmYnKQooZSwgbikgPT4KKGUsIG4pID0+CihlLCBuKSA9PgooZSwgbikgPT4KRmlsZUZ1bmN0aW9uID0gKGZuLCByZm4gPSBSZWFkRmlsZSwgd2ZuID0gV3JpdGVGaWxlLCBuYW1lZm4gPSBuID0+IG4sIC4uLmFyZ3MpID0+CihmaWxlbmFtZSwgLi4uYXJncykgPT4KbiA9PgpkYXRhID0+Cm4gPT4KUHV0Um93c0NvbHVtbnMocm93cykKKGFjYywgcm93KSA9PgogIHJvdyA9PgooY29sLCBpKSA9PgpHZXRMaWJyYXJ5KGUpCkVsZW1lbnROYW1lKGUpCkdldFJvdGF0aW9uKGVsZW1lbnQpClBhY2thZ2UyQ2lyY3VpdChwKQooeyB4LCB5IH0pID0+CiAgcHQgPT4KICBwdCA9PgooeyB4IH0pID0+Cih7IHkgfSkgPT4KICBwdCA9PgogIHB0ID0+CiAgY29vcmQgPT4KICB4ID0+CiAgeSA9PgooeyB4LCB5IH0pID0+Cih7IHgsIHkgfSkgPT4KQ29udGFjdHJlZjJDaXJjdWl0KGNyZWYpCiAgZSA9PgpTaWduYWwyQ2lyY3VpdChzKQpFbGVtZW50MkNpcmN1aXQoZWxlbWVudCkKR2V0VXNlZFBhY2thZ2VzKGRvYyA9IHByb2plY3QuYm9hcmQpCiAgZSA9PgpHZXRQYWNrYWdlUGl0Y2gocGtnKQogIHBhZCA9PgpFYWdsZTJDaXJjdWl0KGRvYyA9IHByb2plY3QuYm9hcmQsIHdpZHRoID0gMTAwLCBoZWlnaHQgPSAxMDApCkVhZ2xlMkNpcmN1aXRKUyhkb2MgPSBwcm9qZWN0LnNjaGVtYXRpYywgc2NhbGUgPSA1MCwgc2hlZXQgPSAwKQpuID0+CiAgZSA9PgpNYWtlR3JhcGgoYm9hcmQgPSBwcm9qZWN0LmJvYXJkLCBpZ25vcmUgPSAvXihHTkR8Wy0rXVswLTldK1YpJC8pCkRyYXdHcmFwaChnLCB3KQAAAAAAAAAAOQ0AAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					16,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA5DQAAV2luZG93KHdpZHRoID0gMTI4MCwgaGVpZ2h0ID0gOTAwKQogIGJlZ2luKCkKICBlbmQoKQogIGhhbmRsZU1vdXNlQnV0dG9uKGJ1dHRvbiwgYWN0aW9uLCBtb2RzKQogIGhhbmRsZUN1cnNvclBvcyh4LCB5KQogIGhhbmRsZUN1cnNvckVudGVyKGN1cikKICAuaGFuZGxlQ2hhck1vZHMgPSAoY2hhciwgbW9kcykgPT4KKCkgPT4KKCkgPT4KICB0b1hNTChvYmopCmEgPT4KICByZW5kZXJUb1hNTChjb21wb25lbnQpCkdldEZpbGV0aW1lKGZpbGUsIGZpZWxkID0gJ210aW1lJykKICBmaWxlID0+CkZpbmRQcm9qZWN0cyhkaXJQdG4gPSAnLi4vKi9lYWdsZScsIHNvcnREaXJlY3Rpb24gPSAtMSwgc29ydEZpZWxkID0gJ210aW1lJykKICBmbiA9PgogIG1pbkluZGV4ID0gbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CiAgaGFzQm90aCA9IG5hbWUgPT4KICBuYW1lID0+CihbbmFtZSwgaW5kZXhdKSA9PgooYSwgYikgPT4KKFtuYW1lLCBpbmRleF0pID0+ClNvcnRGaWxlcyhmaWxlcywgZGlyZWN0aW9uID0gMSwgc3RhdEZpZWxkID0gJ210aW1lJykKKGEsIGIpID0+CihbZmlsZV0pID0+CiAgcGljayhpdCwgbiA9IDEpCiAgbiA9IGkgPT4KICBhcHBlbmQodGFnLCBhdHRycywgY2hpbGRyZW4sIHBhcmVudCwgZWxlbWVudCkKICByZW5kZXIoZG9jLCBmaWxlbmFtZSkKQ29sbGVjdFBhcnRzKGRvYyA9IHByb2plY3Quc2NoZW1hdGljKQogIGUgPT4KICBhdHRyID0+Cih7IG5hbWUsIGRldmljZXNldCwgZGV2aWNlLCB2YWx1ZSB9KSA9PgpDb2xsZWN0RWxlbWVudHMoZG9jID0gcHJvamVjdC5ib2FyZCkKICBlID0+Cih7IG5hbWUsIGxpYnJhcnksIHBhY2thZ2U6IHBrZywgdmFsdWUgfSkgPT4KQ29sbGVjdFBhcnRzRWxlbWVudHMocHJvaiA9IHByb2plY3QpCiAgZSA9PgogIGEgPT4KICBlID0+CihbeyB4LCB5LCAuLi5lbGVtZW50IH0sIHBhcnRdKSA9PgpMaXN0UGFydHMoZG9jID0gcHJvamVjdC5zY2hlbWF0aWMpCiAgcCA9PgooeyBuYW1lLCBkZXZpY2VzZXQsIGRldmljZSwgdmFsdWUgfSkgPT4KU2hvd1BhcnRzKGRvYyA9IHByb2plY3Quc2NoZW1hdGljKQooeyBuYW1lLCBkZXZpY2VzZXQsIGRldmljZSwgdmFsdWUgfSkgPT4KRWFnbGVQcmludChmaWxlLCBvdXRwdXQpCihkaXIsIGJhc2UsIGV4dCkgPT4KICBtYWluKC4uLmFyZ3MpCiAgdG9OdW1iZXIobikKICB3aXJlKC4uLmFyZ3MpCiAgY29pbCh7IHJlY3QsIG4sIGRpYW1ldGVyLCB3aWR0aCB9KQogIGxvYWQoZmlsZW5hbWUsIHByb2plY3QgPSBnbG9iYWxUaGlzLnByb2plY3QpCiAgbmV3UHJvamVjdChmaWxlbmFtZSkKICBzY2g6ICgpID0+CiAgYnJkOiAoKSA9PgogIG5leHRQcm9qZWN0KCkKICBwcm9qZWN0TmFtZXMoKQogIHF1aXQoYXJnKQogIHJlbmRlclRvU3RyaW5nKGFyZykKKC4uLmFyZ3MpID0+CigpID0+CiAgLmV4aXQgPSAoKSA9PgogIC5kZWJ1ZyA9ICguLi5hcmdzKSA9PgogIC5zaG93ID0gdmFsdWUgPT4KKCkgPT4KKGl0ZW0sIGksIGEpID0+CiAgZW50cnkgPT4KICBlbnRyeSA9PgpUZXJtaW5hdGUoZXhpdENvZGUpCiAgeG1sKHN0cmluZ3MsIGV4cHJlc3Npb25zKQplID0+ClVwZGF0ZU1lYXN1cmVzKGJvYXJkKQogIGxpbmVzID0+CiAgZSA9PgogIGxpbmUgPT4KQWxpZ25JdGVtKGl0ZW0pCiAgdHIgPT4KQWxpZ25BbGwoZG9jID0gZ2xvYmFsVGhpcy5kb2N1bWVudCkKICBmaXhWYWx1ZShlbGVtZW50KQogIGZpeFZhbHVlcyhkb2MpCiAgY29vcmRNYXAoZG9jKQogIHAgPT4KICB0ID0+CkdldFBvbHlnb25zKGQgPSBkb2MpCiAgZSA9PgpGaW5kUG9seWdvbnMoKQogIGRvYyA9PgogIGUgPT4KUmVtb3ZlUG9seWdvbnMocCA9IHBvbHlnb25zKQooW2RvYywgbGlzdF0pID0+CiAgcGF0aCA9PgpHZXROYW1lcyhkb2MsIHByZWQpCiAgcHJlZCA9IGUgPT4KICBzaGVldCA9PgogIGUgPT4KICBlID0+CmUgPT4KKFt2LCBwXSkgPT4KKFt2LCBwXSkgPT4KKCkgPT4KICBkb2MgPT4KICBzaGVldCA9PgpHZXRCeU5hbWUoZG9jLCBuYW1lKQpDb3JyZWxhdGVTY2hlbWF0aWNBbmRCb2FyZChzY2hlbWF0aWMsIGJvYXJkKQogIGQgPT4KICBuID0+CiAgbmFtZSA9PgogIGRvYyA9PgpHZXRTaGVldHMoZG9jX29yX3Byb2opClNhdmVMaWJyYXJpZXMoKQooW24sIGVdKSA9PgooYWNjLCBbbiwgZV0pID0+CmUgPT4KICBlID0+CihhLCBiKSA9PgogIGlkID0+CiAgaWQgPT4KKFtuLCBlXSkgPT4KICBuYW1lID0+CihhY2MsIFtuLCBlXSkgPT4KSW5pdEJvYXJkKGRvYyA9IHByb2plY3QuYm9hcmQpCihbbmFtZSwgZV0pID0+CiAgdGVzdEVhZ2xlKGZpbGVuYW1lKQooW25hbWUsIGVdKSA9PgogIGUgPT4KKFtuYW1lLCBpXSkgPT4KICBwID0+CihjaGlsZCwgaSwgYSkgPT4KKGNoaWxkMiwgaTIpID0+CihbaW5kZXgsIGVxdWFsXSkgPT4KKFtpbmRleF0pID0+CiAgaSA9PgogIGkgPT4KICBkb2MgPT4KKFtmaWxlLCBlXSkgPT4KKFtmaWxlLCB4cGF0aF0pID0+Cihbaywgdl0pID0+Ck1vZGlmeVBhdGgocCwgZm4gPSAoZGlyLCBiYXNlLCBleHQpID0+IFtkaXIsIGJhc2UsIGV4dF0pCigpID0+CkFwcGVuZFRvRmlsZW5hbWUocCwgc3RyID0gJycpCihkaXIsIGJhc2UsIGV4dCkgPT4KU2V0U1ZHQmFja2dyb3VuZCh4bWwsIGNvbG9yID0gJyNmZmZmZmYnKQooZSwgbikgPT4KKGUsIG4pID0+CihlLCBuKSA9PgooZSwgbikgPT4KRmlsZUZ1bmN0aW9uID0gKGZuLCByZm4gPSBSZWFkRmlsZSwgd2ZuID0gV3JpdGVGaWxlLCBuYW1lZm4gPSBuID0+IG4sIC4uLmFyZ3MpID0+CihmaWxlbmFtZSwgLi4uYXJncykgPT4KbiA9PgpkYXRhID0+Cm4gPT4KUHV0Um93c0NvbHVtbnMocm93cykKKGFjYywgcm93KSA9PgogIHJvdyA9PgooY29sLCBpKSA9PgpHZXRMaWJyYXJ5KGUpCkVsZW1lbnROYW1lKGUpCkdldFJvdGF0aW9uKGVsZW1lbnQpClBhY2thZ2UyQ2lyY3VpdChwKQooeyB4LCB5IH0pID0+CiAgcHQgPT4KICBwdCA9PgooeyB4IH0pID0+Cih7IHkgfSkgPT4KICBwdCA9PgogIHB0ID0+CiAgY29vcmQgPT4KICB4ID0+CiAgeSA9PgooeyB4LCB5IH0pID0+Cih7IHgsIHkgfSkgPT4KQ29udGFjdHJlZjJDaXJjdWl0KGNyZWYpCiAgZSA9PgpTaWduYWwyQ2lyY3VpdChzKQpFbGVtZW50MkNpcmN1aXQoZWxlbWVudCkKR2V0VXNlZFBhY2thZ2VzKGRvYyA9IHByb2plY3QuYm9hcmQpCiAgZSA9PgpHZXRQYWNrYWdlUGl0Y2gocGtnKQogIHBhZCA9PgpFYWdsZTJDaXJjdWl0KGRvYyA9IHByb2plY3QuYm9hcmQsIHdpZHRoID0gMTAwLCBoZWlnaHQgPSAxMDApCkVhZ2xlMkNpcmN1aXRKUyhkb2MgPSBwcm9qZWN0LnNjaGVtYXRpYywgc2NhbGUgPSA1MCwgc2hlZXQgPSAwKQpuID0+CiAgZSA9PgpNYWtlR3JhcGgoYm9hcmQgPSBwcm9qZWN0LmJvYXJkLCBpZ25vcmUgPSAvXihHTkR8Wy0rXVswLTldK1YpJC8pCkRyYXdHcmFwaChnLCB3KQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					17,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/svg-box.js",
						"symkeys":
						[
							[
								282,
								291
							],
							[
								339,
								361
							],
							[
								410,
								455
							],
							[
								560,
								579
							],
							[
								704,
								728
							],
							[
								801,
								854
							],
							[
								921,
								967
							],
							[
								1322,
								1344
							],
							[
								1583,
								1608
							],
							[
								2286,
								2308
							],
							[
								2568,
								2590
							],
							[
								2700,
								2706
							],
							[
								2765,
								2771
							],
							[
								2865,
								2871
							],
							[
								3209,
								3213
							],
							[
								3753,
								3788
							],
							[
								4098,
								4119
							],
							[
								4143,
								4147
							],
							[
								4168,
								4188
							],
							[
								4986,
								5012
							],
							[
								5681,
								5707
							]
						],
						"symlist":
						[
							"px = n =>",
							"pt = (n, to = 'mm') =>",
							"strokeStyle = (width = '0.5px', unit = '') =>",
							"markerStyle = () =>",
							"function toChildArray(a)",
							"function xml(tagName, attributes = {}, c = undefined)",
							"function text(str, attrs = {}, spanAttrs = {})",
							"function line(...args)",
							"function measure(...args)",
							"function rect(...args)",
							"function main(...args)",
							" () =>",
							" () =>",
							" () =>",
							"a =>",
							"pushrect = (r, mx = -1, my = -1) =>",
							"pushlines = (...l) =>",
							"o =>",
							"pushtext = (t, p) =>",
							" function frontBack(x, y)",
							" function leftRight(x, y)"
						]
					},
					"AQAAAAAAAAAAAAAArwEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					18,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACvAQAAICBweCA9IG4gPT4KICBwdCA9IChuLCB0byA9ICdtbScpID0+CiAgc3Ryb2tlU3R5bGUgPSAod2lkdGggPSAnMC41cHgnLCB1bml0ID0gJycpID0+CiAgbWFya2VyU3R5bGUgPSAoKSA9PgogIHRvQ2hpbGRBcnJheShhKQogIHhtbCh0YWdOYW1lLCBhdHRyaWJ1dGVzID0ge30sIGMgPSB1bmRlZmluZWQpCiAgdGV4dChzdHIsIGF0dHJzID0ge30sIHNwYW5BdHRycyA9IHt9KQogIGxpbmUoLi4uYXJncykKICBtZWFzdXJlKC4uLmFyZ3MpCiAgcmVjdCguLi5hcmdzKQogIG1haW4oLi4uYXJncykKKCkgPT4KKCkgPT4KKCkgPT4KICBhID0+CiAgcHVzaHJlY3QgPSAociwgbXggPSAtMSwgbXkgPSAtMSkgPT4KICBwdXNobGluZXMgPSAoLi4ubCkgPT4KICBvID0+CiAgcHVzaHRleHQgPSAodCwgcCkgPT4KICBmcm9udEJhY2soeCwgeSkKICBsZWZ0UmlnaHQoeCwgeSkAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					19,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					20,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					21,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					1,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/svg-box.js",
						"symkeys":
						[
							[
								282,
								291
							],
							[
								339,
								361
							],
							[
								410,
								455
							],
							[
								560,
								579
							],
							[
								704,
								728
							],
							[
								801,
								854
							],
							[
								921,
								967
							],
							[
								1322,
								1344
							],
							[
								1583,
								1608
							],
							[
								2286,
								2308
							],
							[
								2568,
								2590
							],
							[
								2700,
								2706
							],
							[
								2765,
								2771
							],
							[
								2865,
								2871
							],
							[
								3209,
								3213
							],
							[
								3753,
								3788
							],
							[
								4098,
								4119
							],
							[
								4143,
								4147
							],
							[
								4168,
								4188
							],
							[
								4986,
								5012
							],
							[
								5681,
								5707
							]
						],
						"symlist":
						[
							"px = n =>",
							"pt = (n, to = 'mm') =>",
							"strokeStyle = (width = '0.5px', unit = '') =>",
							"markerStyle = () =>",
							"function toChildArray(a)",
							"function xml(tagName, attributes = {}, c = undefined)",
							"function text(str, attrs = {}, spanAttrs = {})",
							"function line(...args)",
							"function measure(...args)",
							"function rect(...args)",
							"function main(...args)",
							" () =>",
							" () =>",
							" () =>",
							"a =>",
							"pushrect = (r, mx = -1, my = -1) =>",
							"pushlines = (...l) =>",
							"o =>",
							"pushtext = (t, p) =>",
							" function frontBack(x, y)",
							" function leftRight(x, y)"
						]
					},
					"AQAAAAAAAAAAAAAArwEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "eagle-shell.js",
			"settings":
			{
				"buffer_size": 42142,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					703,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAAoQAAAAAAAACxAAAAAAAAAAAAAACxAAAAAAAAALEAAAAAAAAC8AAAAgICAgICBjb25zb2xlLmxvZygnYmVnaW4nLCB7IHdpZHRoLCBoZWlnaHQgfSk7Cg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAChAAAAAAAAA5EAAAAAAAAAAAAAAAAPC/"
				],
				[
					710,
					1,
					"right_delete",
					null,
					"AQAAAAsQAAAAAAAACxAAAAAAAAABAAAAIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAACxAAAAAAAAALEAAAAAAAAAAAAAAAAPC/"
				],
				[
					775,
					1,
					"insert",
					{
						"characters": "\n\n\n"
					},
					"CQAAAP+dAAAAAAAAAJ4AAAAAAAAAAAAAAJ4AAAAAAAACngAAAAAAAAAAAAACngAAAAAAAASeAAAAAAAAAAAAAASeAAAAAAAABZ4AAAAAAAAAAAAABZ4AAAAAAAAJngAAAAAAAAAAAAAAngAAAAAAAACeAAAAAAAABAAAACAgICAFngAAAAAAAAaeAAAAAAAAAAAAAAaeAAAAAAAACp4AAAAAAAAAAAAAAZ4AAAAAAAABngAAAAAAAAQAAAAgICAg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/50AAAAAAAD/nQAAAAAAAAAAAAAAAPC/"
				],
				[
					777,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AwAAAAGeAAAAAAAAAp4AAAAAAAAAAAAAA54AAAAAAAADngAAAAAAAAQAAAAgICAgAp4AAAAAAAADngAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAZ4AAAAAAAABngAAAAAAAAAAAAAAAEZA"
				],
				[
					778,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAAOeAAAAAAAABZ4AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAA54AAAAAAAADngAAAAAAAAAAAAAAAPC/"
				],
				[
					779,
					1,
					"insert",
					{
						"characters": "&"
					},
					"AQAAAASeAAAAAAAABZ4AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABJ4AAAAAAAAEngAAAAAAAAAAAAAAAPC/"
				],
				[
					780,
					1,
					"left_delete",
					null,
					"AQAAAASeAAAAAAAABJ4AAAAAAAABAAAAJg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABZ4AAAAAAAAFngAAAAAAAAAAAAAAAPC/"
				],
				[
					781,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAAASeAAAAAAAABZ4AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABJ4AAAAAAAAEngAAAAAAAAAAAAAAAPC/"
				],
				[
					782,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAAWeAAAAAAAAB54AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABZ4AAAAAAAAFngAAAAAAAAAAAAAAAPC/"
				],
				[
					783,
					1,
					"insert",
					{
						"characters": "GND|&/"
					},
					"BgAAAAaeAAAAAAAAB54AAAAAAAAAAAAAB54AAAAAAAAIngAAAAAAAAAAAAAIngAAAAAAAAmeAAAAAAAAAAAAAAmeAAAAAAAACp4AAAAAAAAAAAAACp4AAAAAAAALngAAAAAAAAAAAAALngAAAAAAAAyeAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABp4AAAAAAAAGngAAAAAAAAAAAAAAAPC/"
				],
				[
					784,
					2,
					"left_delete",
					null,
					"AgAAAAueAAAAAAAAC54AAAAAAAABAAAALwqeAAAAAAAACp4AAAAAAAABAAAAJg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADJ4AAAAAAAAMngAAAAAAAAAAAAAAAPC/"
				],
				[
					785,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAAqeAAAAAAAADJ4AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAACp4AAAAAAAAKngAAAAAAAAAAAAAAAPC/"
				],
				[
					786,
					1,
					"insert",
					{
						"characters": "-|"
					},
					"AgAAAAueAAAAAAAADJ4AAAAAAAAAAAAADJ4AAAAAAAANngAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAC54AAAAAAAALngAAAAAAAAAAAAAAAPC/"
				],
				[
					787,
					1,
					"left_delete",
					null,
					"AQAAAAyeAAAAAAAADJ4AAAAAAAABAAAAfA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADZ4AAAAAAAANngAAAAAAAAAAAAAAAPC/"
				],
				[
					788,
					1,
					"insert",
					{
						"characters": "+"
					},
					"AQAAAAyeAAAAAAAADZ4AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADJ4AAAAAAAAMngAAAAAAAAAAAAAAAPC/"
				],
				[
					790,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAA6eAAAAAAAAEJ4AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADp4AAAAAAAAOngAAAAAAAAAAAAAAAPC/"
				],
				[
					791,
					1,
					"insert",
					{
						"characters": "0-9"
					},
					"AwAAAA+eAAAAAAAAEJ4AAAAAAAAAAAAAEJ4AAAAAAAARngAAAAAAAAAAAAARngAAAAAAABKeAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAD54AAAAAAAAPngAAAAAAAAAAAAAAAPC/"
				],
				[
					793,
					1,
					"insert",
					{
						"characters": "+V"
					},
					"AgAAABOeAAAAAAAAFJ4AAAAAAAAAAAAAFJ4AAAAAAAAVngAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAE54AAAAAAAATngAAAAAAAAAAAAAAAPC/"
				],
				[
					795,
					1,
					"insert",
					{
						"characters": "$/.tet"
					},
					"BgAAABaeAAAAAAAAF54AAAAAAAAAAAAAF54AAAAAAAAYngAAAAAAAAAAAAAYngAAAAAAABmeAAAAAAAAAAAAABmeAAAAAAAAGp4AAAAAAAAAAAAAGp4AAAAAAAAbngAAAAAAAAAAAAAbngAAAAAAAByeAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFp4AAAAAAAAWngAAAAAAAAAAAAAAAPC/"
				],
				[
					796,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAByeAAAAAAAAHp4AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHJ4AAAAAAAAcngAAAAAAAAAAAAAAAPC/"
				],
				[
					797,
					1,
					"insert",
					{
						"characters": "name"
					},
					"BAAAAB2eAAAAAAAAHp4AAAAAAAAAAAAAHp4AAAAAAAAfngAAAAAAAAAAAAAfngAAAAAAACCeAAAAAAAAAAAAACCeAAAAAAAAIZ4AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHZ4AAAAAAAAdngAAAAAAAAAAAAAAAPC/"
				],
				[
					798,
					4,
					"left_delete",
					null,
					"BAAAACCeAAAAAAAAIJ4AAAAAAAABAAAAZR+eAAAAAAAAH54AAAAAAAABAAAAbR6eAAAAAAAAHp4AAAAAAAABAAAAYR2eAAAAAAAAHZ4AAAAAAAABAAAAbg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIZ4AAAAAAAAhngAAAAAAAAAAAAAAAPC/"
				],
				[
					799,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAByeAAAAAAAAHJ4AAAAAAAABAAAAKByeAAAAAAAAHJ4AAAAAAAABAAAAKQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHZ4AAAAAAAAdngAAAAAAAAAAAAAAAPC/"
				],
				[
					800,
					1,
					"left_delete",
					null,
					"AQAAABueAAAAAAAAG54AAAAAAAABAAAAdA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHJ4AAAAAAAAcngAAAAAAAAAAAAAAAPC/"
				],
				[
					801,
					1,
					"insert",
					{
						"characters": "st"
					},
					"AgAAABueAAAAAAAAHJ4AAAAAAAAAAAAAHJ4AAAAAAAAdngAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAG54AAAAAAAAbngAAAAAAAAAAAAAAAPC/"
				],
				[
					803,
					1,
					"left_delete",
					null,
					"AQAAAB2eAAAAAAAAHZ4AAAAAAAABAAAAKQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHp4AAAAAAAAengAAAAAAAAAAAAAAAPC/"
				],
				[
					804,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAB2eAAAAAAAAH54AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHZ4AAAAAAAAdngAAAAAAAAAAAAAAAPC/"
				],
				[
					805,
					1,
					"insert",
					{
						"characters": "name"
					},
					"BAAAAB6eAAAAAAAAH54AAAAAAAAAAAAAH54AAAAAAAAgngAAAAAAAAAAAAAgngAAAAAAACGeAAAAAAAAAAAAACGeAAAAAAAAIp4AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHp4AAAAAAAAengAAAAAAAAAAAAAAAPC/"
				],
				[
					807,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAACOeAAAAAAAAJJ4AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAI54AAAAAAAAjngAAAAAAAAAAAAAAAPC/"
				],
				[
					808,
					1,
					"insert",
					{
						"characters": "\ncontinue;"
					},
					"CwAAACSeAAAAAAAAJZ4AAAAAAAAAAAAAJZ4AAAAAAAAnngAAAAAAAAAAAAAnngAAAAAAACieAAAAAAAAAAAAACieAAAAAAAAKZ4AAAAAAAAAAAAAKZ4AAAAAAAAqngAAAAAAAAAAAAAqngAAAAAAACueAAAAAAAAAAAAACueAAAAAAAALJ4AAAAAAAAAAAAALJ4AAAAAAAAtngAAAAAAAAAAAAAtngAAAAAAAC6eAAAAAAAAAAAAAC6eAAAAAAAAL54AAAAAAAAAAAAAL54AAAAAAAAwngAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJJ4AAAAAAAAkngAAAAAAAAAAAAAAAPC/"
				],
				[
					811,
					1,
					"insert",
					{
						"characters": "^"
					},
					"AQAAAAWeAAAAAAAABp4AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABZ4AAAAAAAAFngAAAAAAAAAAAAAAAPC/"
				],
				[
					822,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAP+cAAAAAAAAAZ0AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/5wAAAAAAAD/nAAAAAAAAAAAAAAAAPC/"
				],
				[
					823,
					1,
					"insert",
					{
						"characters": " spacing:"
					},
					"CQAAAACdAAAAAAAAAZ0AAAAAAAAAAAAAAZ0AAAAAAAACnQAAAAAAAAAAAAACnQAAAAAAAAOdAAAAAAAAAAAAAAOdAAAAAAAABJ0AAAAAAAAAAAAABJ0AAAAAAAAFnQAAAAAAAAAAAAAFnQAAAAAAAAadAAAAAAAAAAAAAAadAAAAAAAAB50AAAAAAAAAAAAAB50AAAAAAAAInQAAAAAAAAAAAAAInQAAAAAAAAmdAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAJ0AAAAAAAAAnQAAAAAAAAAAAAAAAPC/"
				],
				[
					824,
					1,
					"insert",
					{
						"characters": " 30,"
					},
					"BAAAAAmdAAAAAAAACp0AAAAAAAAAAAAACp0AAAAAAAALnQAAAAAAAAAAAAALnQAAAAAAAAydAAAAAAAAAAAAAAydAAAAAAAADZ0AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAACZ0AAAAAAAAJnQAAAAAAAAAAAAAAAPC/"
				],
				[
					825,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAA2dAAAAAAAADp0AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADZ0AAAAAAAANnQAAAAAAAAAAAAAAAPC/"
				],
				[
					826,
					1,
					"insert",
					{
						"characters": "timestep:"
					},
					"CQAAAA6dAAAAAAAAD50AAAAAAAAAAAAAD50AAAAAAAAQnQAAAAAAAAAAAAAQnQAAAAAAABGdAAAAAAAAAAAAABGdAAAAAAAAEp0AAAAAAAAAAAAAEp0AAAAAAAATnQAAAAAAAAAAAAATnQAAAAAAABSdAAAAAAAAAAAAABSdAAAAAAAAFZ0AAAAAAAAAAAAAFZ0AAAAAAAAWnQAAAAAAAAAAAAAWnQAAAAAAABedAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADp0AAAAAAAAOnQAAAAAAAAAAAAAAAPC/"
				],
				[
					827,
					1,
					"insert",
					{
						"characters": " 560"
					},
					"BAAAABedAAAAAAAAGJ0AAAAAAAAAAAAAGJ0AAAAAAAAZnQAAAAAAAAAAAAAZnQAAAAAAABqdAAAAAAAAAAAAABqdAAAAAAAAG50AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAF50AAAAAAAAXnQAAAAAAAAAAAAAAAPC/"
				],
				[
					828,
					2,
					"left_delete",
					null,
					"AgAAABqdAAAAAAAAGp0AAAAAAAABAAAAMBmdAAAAAAAAGZ0AAAAAAAABAAAANg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAG50AAAAAAAAbnQAAAAAAAAAAAAAAAPC/"
				],
				[
					829,
					1,
					"insert",
					{
						"characters": "0,"
					},
					"AgAAABmdAAAAAAAAGp0AAAAAAAAAAAAAGp0AAAAAAAAbnQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGZ0AAAAAAAAZnQAAAAAAAAAAAAAAAPC/"
				],
				[
					830,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABudAAAAAAAAHJ0AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAG50AAAAAAAAbnQAAAAAAAAAAAAAAAPC/"
				],
				[
					831,
					1,
					"insert",
					{
						"characters": "charg:"
					},
					"BgAAABydAAAAAAAAHZ0AAAAAAAAAAAAAHZ0AAAAAAAAenQAAAAAAAAAAAAAenQAAAAAAAB+dAAAAAAAAAAAAAB+dAAAAAAAAIJ0AAAAAAAAAAAAAIJ0AAAAAAAAhnQAAAAAAAAAAAAAhnQAAAAAAACKdAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHJ0AAAAAAAAcnQAAAAAAAAAAAAAAAPC/"
				],
				[
					832,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACKdAAAAAAAAI50AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIp0AAAAAAAAinQAAAAAAAAAAAAAAAPC/"
				],
				[
					833,
					2,
					"left_delete",
					null,
					"AgAAACKdAAAAAAAAIp0AAAAAAAABAAAAICGdAAAAAAAAIZ0AAAAAAAABAAAAOg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAI50AAAAAAAAjnQAAAAAAAAAAAAAAAPC/"
				],
				[
					834,
					1,
					"insert",
					{
						"characters": "e:"
					},
					"AgAAACGdAAAAAAAAIp0AAAAAAAAAAAAAIp0AAAAAAAAjnQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIZ0AAAAAAAAhnQAAAAAAAAAAAAAAAPC/"
				],
				[
					835,
					1,
					"insert",
					{
						"characters": " 100,"
					},
					"BQAAACOdAAAAAAAAJJ0AAAAAAAAAAAAAJJ0AAAAAAAAlnQAAAAAAAAAAAAAlnQAAAAAAACadAAAAAAAAAAAAACadAAAAAAAAJ50AAAAAAAAAAAAAJ50AAAAAAAAonQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAI50AAAAAAAAjnQAAAAAAAAAAAAAAAPC/"
				],
				[
					836,
					1,
					"insert",
					{
						"characters": " ms"
					},
					"AwAAACidAAAAAAAAKZ0AAAAAAAAAAAAAKZ0AAAAAAAAqnQAAAAAAAAAAAAAqnQAAAAAAACudAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKJ0AAAAAAAAonQAAAAAAAAAAAAAAAPC/"
				],
				[
					837,
					1,
					"left_delete",
					null,
					"AQAAACqdAAAAAAAAKp0AAAAAAAABAAAAcw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAK50AAAAAAAArnQAAAAAAAAAAAAAAAPC/"
				],
				[
					838,
					1,
					"insert",
					{
						"characters": "ass"
					},
					"AwAAACqdAAAAAAAAK50AAAAAAAAAAAAAK50AAAAAAAAsnQAAAAAAAAAAAAAsnQAAAAAAAC2dAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKp0AAAAAAAAqnQAAAAAAAAAAAAAAAPC/"
				],
				[
					841,
					1,
					"left_delete",
					null,
					"AQAAAC2dAAAAAAAALZ0AAAAAAAABAAAAfQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALZ0AAAAAAAAunQAAAAAAAAAAAAAAAPC/"
				],
				[
					842,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAC2dAAAAAAAALp0AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALZ0AAAAAAAAtnQAAAAAAAAAAAAAAAPC/"
				],
				[
					843,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAC6dAAAAAAAAL50AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALp0AAAAAAAAunQAAAAAAAAAAAAAAAPC/"
				],
				[
					844,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAC+dAAAAAAAAMJ0AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAL50AAAAAAAAvnQAAAAAAAAAAAAAAAPC/"
				],
				[
					845,
					1,
					"left_delete",
					null,
					"AQAAAC+dAAAAAAAAL50AAAAAAAABAAAAMA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMJ0AAAAAAAAwnQAAAAAAAAAAAAAAAPC/"
				],
				[
					846,
					1,
					"insert",
					{
						"characters": "200,"
					},
					"BAAAAC+dAAAAAAAAMJ0AAAAAAAAAAAAAMJ0AAAAAAAAxnQAAAAAAAAAAAAAxnQAAAAAAADKdAAAAAAAAAAAAADKdAAAAAAAAM50AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAL50AAAAAAAAvnQAAAAAAAAAAAAAAAPC/"
				],
				[
					847,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADOdAAAAAAAANJ0AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAM50AAAAAAAAznQAAAAAAAAAAAAAAAPC/"
				],
				[
					848,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAADSdAAAAAAAANZ0AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANJ0AAAAAAAA0nQAAAAAAAAAAAAAAAPC/"
				],
				[
					849,
					1,
					"left_delete",
					null,
					"AQAAADSdAAAAAAAANJ0AAAAAAAABAAAAYQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANZ0AAAAAAAA1nQAAAAAAAAAAAAAAAPC/"
				],
				[
					850,
					1,
					"insert",
					{
						"characters": "damping:"
					},
					"CAAAADSdAAAAAAAANZ0AAAAAAAAAAAAANZ0AAAAAAAA2nQAAAAAAAAAAAAA2nQAAAAAAADedAAAAAAAAAAAAADedAAAAAAAAOJ0AAAAAAAAAAAAAOJ0AAAAAAAA5nQAAAAAAAAAAAAA5nQAAAAAAADqdAAAAAAAAAAAAADqdAAAAAAAAO50AAAAAAAAAAAAAO50AAAAAAAA8nQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANJ0AAAAAAAA0nQAAAAAAAAAAAAAAAPC/"
				],
				[
					851,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADydAAAAAAAAPZ0AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPJ0AAAAAAAA8nQAAAAAAAAAAAAAAAPC/"
				],
				[
					852,
					1,
					"paste",
					null,
					"AQAAAD2dAAAAAAAARZ0AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPZ0AAAAAAAA9nQAAAAAAAAAAAAAAAPC/"
				],
				[
					853,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAEWdAAAAAAAARp0AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARZ0AAAAAAABFnQAAAAAAAAAAAAAAAPC/"
				],
				[
					854,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEadAAAAAAAAR50AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARp0AAAAAAABGnQAAAAAAAAAAAAAAAPC/"
				],
				[
					855,
					1,
					"paste",
					null,
					"AQAAAEedAAAAAAAAWp0AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAR50AAAAAAABHnQAAAAAAAAAAAAAAAPC/"
				],
				[
					856,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAFqdAAAAAAAAW50AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWp0AAAAAAABanQAAAAAAAAAAAAAAAPC/"
				],
				[
					857,
					1,
					"insert",
					{
						"characters": " fales"
					},
					"BgAAAFudAAAAAAAAXJ0AAAAAAAAAAAAAXJ0AAAAAAABdnQAAAAAAAAAAAABdnQAAAAAAAF6dAAAAAAAAAAAAAF6dAAAAAAAAX50AAAAAAAAAAAAAX50AAAAAAABgnQAAAAAAAAAAAABgnQAAAAAAAGGdAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAW50AAAAAAABbnQAAAAAAAAAAAAAAAPC/"
				],
				[
					858,
					1,
					"insert",
					{
						"characters": " }"
					},
					"AgAAAGGdAAAAAAAAYp0AAAAAAAAAAAAAYp0AAAAAAABjnQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAYZ0AAAAAAABhnQAAAAAAAAAAAAAAAPC/"
				],
				[
					863,
					1,
					"left_delete",
					null,
					"AQAAAGKdAAAAAAAAYp0AAAAAAAABAAAAfQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAY50AAAAAAABjnQAAAAAAAAAAAAAAAPC/"
				],
				[
					864,
					3,
					"left_delete",
					null,
					"AwAAAGGdAAAAAAAAYZ0AAAAAAAABAAAAIGCdAAAAAAAAYJ0AAAAAAAABAAAAc1+dAAAAAAAAX50AAAAAAAABAAAAZQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAYp0AAAAAAABinQAAAAAAAAAAAAAAAPC/"
				],
				[
					865,
					1,
					"insert",
					{
						"characters": "se"
					},
					"AgAAAF+dAAAAAAAAYJ0AAAAAAAAAAAAAYJ0AAAAAAABhnQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAX50AAAAAAABfnQAAAAAAAAAAAAAAAPC/"
				],
				[
					866,
					1,
					"insert",
					{
						"characters": " }"
					},
					"AgAAAGGdAAAAAAAAYp0AAAAAAAAAAAAAYp0AAAAAAABjnQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAYZ0AAAAAAABhnQAAAAAAAAAAAAAAAPC/"
				],
				[
					873,
					1,
					"insert",
					{
						"characters": "size:"
					},
					"BQAAAAGdAAAAAAAAAp0AAAAAAAAAAAAAAp0AAAAAAAADnQAAAAAAAAAAAAADnQAAAAAAAASdAAAAAAAAAAAAAASdAAAAAAAABZ0AAAAAAAAAAAAABZ0AAAAAAAAGnQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAZ0AAAAAAAABnQAAAAAAAAAAAAAAAPC/"
				],
				[
					874,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAadAAAAAAAAB50AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABp0AAAAAAAAGnQAAAAAAAAAAAAAAAPC/"
				],
				[
					875,
					1,
					"paste",
					null,
					"AQAAAAedAAAAAAAAG50AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAB50AAAAAAAAHnQAAAAAAAAAAAAAAAPC/"
				],
				[
					876,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAABudAAAAAAAAHJ0AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAG50AAAAAAAAbnQAAAAAAAAAAAAAAAPC/"
				],
				[
					877,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABydAAAAAAAAHZ0AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHJ0AAAAAAAAcnQAAAAAAAAAAAAAAAPC/"
				],
				[
					879,
					2,
					"left_delete",
					null,
					"AgAAABedAAAAAAAAF50AAAAAAAABAAAAMBadAAAAAAAAFp0AAAAAAAABAAAAMQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGJ0AAAAAAAAYnQAAAAAAAAAAAAAAAPC/"
				],
				[
					880,
					1,
					"insert",
					{
						"characters": "9"
					},
					"AQAAABadAAAAAAAAF50AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFp0AAAAAAAAWnQAAAAAAAAAAAAAAAPC/"
				],
				[
					882,
					2,
					"left_delete",
					null,
					"AgAAABGdAAAAAAAAEZ0AAAAAAAABAAAAMBCdAAAAAAAAEJ0AAAAAAAABAAAAMQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEp0AAAAAAAASnQAAAAAAAAAAAAAAAPC/"
				],
				[
					883,
					1,
					"insert",
					{
						"characters": "9"
					},
					"AQAAABCdAAAAAAAAEZ0AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEJ0AAAAAAAAQnQAAAAAAAAAAAAAAAPC/"
				],
				[
					892,
					1,
					"revert",
					null,
					"",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvpwAAAAAAAC+nAAAAAAAAAAAAAAAAPC/"
				],
				[
					895,
					1,
					"cut",
					null,
					"AQAAAIWeAAAAAAAAhZ4AAAAAAAAVAAAAL14oR05EfFstK11bMC05XStWKSQv",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAhZ4AAAAAAACangAAAAAAAAAAAAAAAPC/"
				],
				[
					896,
					1,
					"insert",
					{
						"characters": "re"
					},
					"AgAAAIWeAAAAAAAAhp4AAAAAAAAAAAAAhp4AAAAAAACHngAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAhZ4AAAAAAACFngAAAAAAAAAAAAAAAPC/"
				],
				[
					897,
					2,
					"left_delete",
					null,
					"AgAAAIaeAAAAAAAAhp4AAAAAAAABAAAAZYWeAAAAAAAAhZ4AAAAAAAABAAAAcg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAh54AAAAAAACHngAAAAAAAAAAAAAAAPC/"
				],
				[
					898,
					1,
					"insert",
					{
						"characters": "ignore"
					},
					"BgAAAIWeAAAAAAAAhp4AAAAAAAAAAAAAhp4AAAAAAACHngAAAAAAAAAAAACHngAAAAAAAIieAAAAAAAAAAAAAIieAAAAAAAAiZ4AAAAAAAAAAAAAiZ4AAAAAAACKngAAAAAAAAAAAACKngAAAAAAAIueAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAhZ4AAAAAAACFngAAAAAAAAAAAAAAAPC/"
				],
				[
					901,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAOecAAAAAAAA6JwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA55wAAAAAAADnnAAAAAAAAAAAAAAAAPC/"
				],
				[
					902,
					1,
					"insert",
					{
						"characters": " ignore"
					},
					"BwAAAOicAAAAAAAA6ZwAAAAAAAAAAAAA6ZwAAAAAAADqnAAAAAAAAAAAAADqnAAAAAAAAOucAAAAAAAAAAAAAOucAAAAAAAA7JwAAAAAAAAAAAAA7JwAAAAAAADtnAAAAAAAAAAAAADtnAAAAAAAAO6cAAAAAAAAAAAAAO6cAAAAAAAA75wAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6JwAAAAAAADonAAAAAAAAAAAAAAAAPC/"
				],
				[
					903,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAO+cAAAAAAAA8JwAAAAAAAAAAAAA8JwAAAAAAADxnAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA75wAAAAAAADvnAAAAAAAAAAAAAAAAPC/"
				],
				[
					904,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPGcAAAAAAAA8pwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA8ZwAAAAAAADxnAAAAAAAAAAAAAAAAPC/"
				],
				[
					905,
					1,
					"paste",
					null,
					"AQAAAPKcAAAAAAAAB50AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA8pwAAAAAAADynAAAAAAAAAAAAAAAAPC/"
				],
				[
					930,
					1,
					"insert",
					{
						"characters": "ignore"
					},
					"BgAAAKWeAAAAAAAApp4AAAAAAAAAAAAApp4AAAAAAACnngAAAAAAAAAAAACnngAAAAAAAKieAAAAAAAAAAAAAKieAAAAAAAAqZ4AAAAAAAAAAAAAqZ4AAAAAAACqngAAAAAAAAAAAACqngAAAAAAAKueAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApZ4AAAAAAAClngAAAAAAAAAAAAAAAPC/"
				],
				[
					931,
					1,
					"insert",
					{
						"characters": " &&"
					},
					"AwAAAKueAAAAAAAArJ4AAAAAAAAAAAAArJ4AAAAAAACtngAAAAAAAAAAAACtngAAAAAAAK6eAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAq54AAAAAAACrngAAAAAAAAAAAAAAAPC/"
				],
				[
					932,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAK6eAAAAAAAAr54AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAArp4AAAAAAACungAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"paste",
					null,
					"AQAAAJUQAAAAAAAAohEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJUQAAAAAAAAlRAAAAAAAAAAAAAAAADwvw"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "repl.prin"
					},
					"CgAAAHQRAAAAAAAAdREAAAAAAAAAAAAAdREAAAAAAAB1EQAAAAAAAAsAAABjb25zb2xlLmxvZ3URAAAAAAAAdhEAAAAAAAAAAAAAdhEAAAAAAAB3EQAAAAAAAAAAAAB3EQAAAAAAAHgRAAAAAAAAAAAAAHgRAAAAAAAAeREAAAAAAAAAAAAAeREAAAAAAAB6EQAAAAAAAAAAAAB6EQAAAAAAAHsRAAAAAAAAAAAAAHsRAAAAAAAAfBEAAAAAAAAAAAAAfBEAAAAAAAB9EQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHQRAAAAAAAAfxEAAAAAAAAAAAAAAADwvw"
				],
				[
					19,
					1,
					"insert_completion",
					{
						"completion": "printStatus",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "printStatus"
					},
					"AgAAAHkRAAAAAAAAeREAAAAAAAAEAAAAcHJpbnkRAAAAAAAAhBEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH0RAAAAAAAAfREAAAAAAAAAAAAAAADwvw"
				],
				[
					21,
					1,
					"cut",
					null,
					"AQAAAHQRAAAAAAAAdBEAAAAAAAAQAAAAcmVwbC5wcmludFN0YXR1cw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIQRAAAAAAAAdBEAAAAAAAAAAAAAAABGQA"
				],
				[
					22,
					1,
					"paste",
					null,
					"AQAAAHQRAAAAAAAAhBEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHQRAAAAAAAAdBEAAAAAAAAAAAAAAADwvw"
				],
				[
					26,
					1,
					"paste",
					null,
					"AgAAACYRAAAAAAAANhEAAAAAAAAAAAAANhEAAAAAAAA2EQAAAAAAAAsAAABjb25zb2xlLmxvZw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADERAAAAAAAAJhEAAAAAAAAAAAAAAABGQA"
				],
				[
					31,
					1,
					"paste",
					null,
					"AgAAAMcQAAAAAAAA1xAAAAAAAAAAAAAA1xAAAAAAAADXEAAAAAAAAAsAAABjb25zb2xlLmxvZw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANIQAAAAAAAAxxAAAAAAAAAAAAAAAABGQA"
				]
			]
		},
		{
			"file": "svg-box.js",
			"settings":
			{
				"buffer_size": 7528,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/fd-graph.js",
			"settings":
			{
				"buffer_size": 12374,
				"line_ending": "Unix"
			}
		},
		{
			"file": "draw-utils.js",
			"settings":
			{
				"buffer_size": 5161,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"mode",
				"HTML: Encode Special Characters"
			],
			[
				"insert",
				"Snippet: Insert livereload.js script"
			],
			[
				":w",
				":w - Save"
			],
			[
				"prettier",
				"Build With: prettier"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"prett",
				"Pretty Shell: Minify"
			],
			[
				"OUTLIN",
				"Browse Mode: Outline (Right)"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 142.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/upload-worker.js",
		"/home/roman/Projects/plot-cv/mailcow-db.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/examples/ssl-client.js",
		"/home/roman/Projects/plot-cv/promise-worker.js",
		"/home/roman/Projects/plot-cv/upload.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-mysql.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/wscli.js",
		"/home/roman/Projects/plot-cv/lib/fd-graph.js",
		"/home/roman/Projects/plot-cv/lib/geom/graph.js",
		"/home/roman/Projects/plot-cv/draw-utils.js",
		"/home/roman/Projects/plot-cv/test-nanovg.js",
		"/home/roman/Projects/plot-cv/lib/eagle/node.js",
		"/home/roman/Projects/plot-cv/lib/eagle/element.js",
		"/home/roman/Projects/plot-cv/workertest.js",
		"/home/roman/Projects/plot-cv/test-worker.js",
		"/home/roman/Projects/plot-cv/upload-server.js",
		"/home/roman/Projects/plot-cv/components.js",
		"/home/roman/Projects/plot-cv/static/css/upload.css",
		"/home/roman/Projects/plot-cv/draw.html",
		"/home/roman/Projects/plot-cv/upload.html",
		"/home/roman/Projects/plot-cv/debugger-server.js",
		"/home/roman/Projects/plot-cv/test-opencv.js",
		"/home/roman/Projects/plot-cv/map.html",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/tests/server.js",
		"/home/roman/Projects/plot-cv/lib/misc.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/directory.js",
		"/home/roman/Projects/plot-cv/test-video.js",
		"/home/roman/Projects/plot-cv/cv-shell.js",
		"/home/roman/Projects/plot-cv/directory.html",
		"/home/roman/Projects/plot-cv/coil.html",
		"/home/roman/Projects/plot-cv/filelist.html",
		"/home/roman/Projects/plot-cv/noise.js",
		"/home/roman/Projects/plot-cv/pinkNoise.js",
		"/home/roman/Projects/plot-cv/noise.html",
		"/home/roman/Projects/plot-cv/landing.html",
		"/home/roman/Projects/plot-cv/404.html",
		"/home/roman/Projects/plot-cv/fire.html",
		"/home/roman/Projects/plot-cv/index.html",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/js/rpc.js",
		"/home/roman/Projects/plot-cv/style.css",
		"/home/roman/Projects/plot-cv/main.js",
		"/home/roman/Projects/plot-cv/lib/lscache.js",
		"/home/roman/Projects/plot-cv/example.html",
		"/home/roman/Projects/plot-cv/clock.html",
		"/home/roman/Projects/plot-cv/eagle-shell.js",
		"/home/roman/Projects/plot-cv/eagle2svg.js",
		"/home/roman/Projects/plot-cv/Pink-Noise-Generator-Thomas-Henry.brd",
		"/home/roman/Projects/plot-cv/lib/eagle/schematicRenderer.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/grid.js",
		"/home/roman/Projects/plot-cv/lib/eagle/renderUtils.js",
		"/home/roman/Projects/plot-cv/lib/geom/transformation.js",
		"/home/roman/Projects/plot-cv/lib/eagle/nodeList.js",
		"/home/roman/Projects/plot-cv/lib/eagle/ref.js",
		"/home/roman/Projects/plot-cv/lib/eagle/project.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/polygon.js",
		"/home/roman/Projects/plot-cv/lib/geom/polygon.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/symbol.js",
		"/home/roman/Projects/plot-cv/lib/eagle/boardRenderer.js",
		"/home/roman/Projects/plot-cv/lib/eagle/svgRenderer.js",
		"/home/roman/Projects/plot-cv/lib/eagle/document.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/pad.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/hole.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/smd.js",
		"/home/roman/Projects/plot-cv/lib/ecmascript/parser.js",
		"/home/roman/Projects/plot-cv/github-userscript.js",
		"/home/roman/Projects/an-tronics/eagle/RX-FM-Radio-1.5V-dip.brd",
		"/home/roman/Projects/plot-cv/lib/eagle/components/pin.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/wire.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/3rdparty/denodrivers-postgres/docs/.nojekyll",
		"/home/roman/Projects/plot-cv/lib/eagle/components/via.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/repl.js",
		"/home/roman/Projects/plot-cv/lib/geom/line.js",
		"/home/roman/Projects/plot-cv/lib/geom/rect.js",
		"/home/roman/Projects/an-tronics/eagle/lbr/l.lbr",
		"/home/roman/Projects/an-tronics/eagle/github-userscript.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-internal.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/src/minnet-client.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/lib/core-net/close.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/callback.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/qjsm.c",
		"/home/janos/Projects/plot-cv/test-sourcemap.js",
		"/home/janos/Projects/plot-cv/ws-worker.js",
		"/home/janos/Projects/plot-cv/tokmap.c",
		"/home/janos/Projects/plot-cv/count-neighbours.js",
		"/home/janos/Projects/plot-cv/findsig.c",
		"/home/janos/Projects/plot-cv/getModuleProps.js",
		"/home/janos/Projects/plot-cv/midi-tcp.js",
		"/home/janos/Projects/plot-cv/portal.js",
		"/home/janos/Projects/plot-cv/resolve-imports.js",
		"/home/janos/Projects/plot-cv/palette.css",
		"/home/janos/Projects/plot-cv/get-res.c",
		"/home/janos/Projects/plot-cv/get-msys-packages.js",
		"/home/janos/Projects/plot-cv/gerber2gcode.js",
		"/home/janos/Projects/plot-cv/ftrace.js",
		"/home/janos/Projects/plot-cv/filelist.js",
		"/home/janos/Projects/plot-cv/coil.js",
		"/home/janos/Projects/plot-cv/eagle-server.js",
		"/home/janos/Projects/plot-cv/eagle-query.js",
		"/home/janos/Projects/plot-cv/dump-structs.js",
		"/home/janos/Projects/plot-cv/doc-scanner.js",
		"/home/janos/Projects/plot-cv/config.js",
		"/home/janos/Projects/plot-cv/deconflict.js",
		"/home/janos/Projects/plot-cv/debuggerprotocol.js",
		"/home/janos/Projects/plot-cv/debugger.js",
		"/home/janos/Projects/plot-cv/convert-imports.js",
		"/home/janos/Projects/plot-cv/esparse.js",
		"/home/janos/Projects/plot-cv/extract-structs.js",
		"/home/janos/Projects/plot-cv/fetch-post-prices.js",
		"/home/janos/Projects/plot-cv/ffi.js",
		"/home/janos/Projects/plot-cv/fontsample.js",
		"/home/janos/Projects/plot-cv/grammar-arith.js",
		"/home/janos/Projects/plot-cv/grammar-C.js",
		"/home/janos/Projects/plot-cv/grammar-c.js",
		"/home/janos/Projects/plot-cv/grammar-css3.js",
		"/home/janos/Projects/plot-cv/grammar-geda-netlist.js",
		"/home/janos/Projects/plot-cv/grammar-INI.js",
		"/home/janos/Projects/plot-cv/httpd.js",
		"/home/janos/Projects/plot-cv/ini-grammar.js",
		"/home/janos/Projects/plot-cv/io-helpers.js",
		"/home/janos/Projects/plot-cv/list-directory.js",
		"/home/janos/Projects/plot-cv/list-exports.js",
		"/home/janos/Projects/plot-cv/list-exports2.js",
		"/home/janos/Projects/plot-cv/load-ast.js",
		"/home/janos/Projects/plot-cv/meriyah.js",
		"/home/janos/Projects/plot-cv/workertest.js",
		"/home/janos/Projects/plot-cv/worker.js"
	],
	"find":
	{
		"height": 29.0
	},
	"find_in_files":
	{
		"height": 107.0,
		"where_history":
		[
			"/home/roman/Projects/plot-cv,*.js",
			"/home/roman/Projects/plot-cv/lib/eagle,*.js",
			"/home/roman/Projects/plot-cv/lib,*.js",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"spacing",
			"$",
			"MakeGraph",
			"Timer",
			"updateAll",
			"MakeGraph",
			"CreateGraph",
			"DrawGraph",
			"MakeGraph",
			"DrawLine",
			"nanovg\\.",
			"DrawCircle",
			"Clear\\(",
			"poll",
			"glfw",
			"addNode",
			"addConnec",
			"addConn",
			"g.addEdge",
			"Edge",
			"Graph",
			"getRa",
			"getRaw",
			"rawNode",
			"getRaw",
			"extendArray",
			"connectparams_new",
			"mysql_connect",
			"\"connect",
			"\\bCLI\\b",
			"MakeUUID",
			"'uuid'",
			"by_uuid",
			"DEBUG",
			"'UPLOAD'",
			"Exiftool",
			"fs",
			"'fs'",
			"ReadExiftool",
			"\\bs\\b",
			"started",
			"address",
			"ReadExiftool",
			"ReadExiv2",
			"PromiseWorker",
			"URLWorker",
			"Worker",
			"LineReader",
			"fnmatch",
			"\\bfile\\(",
			"'file'",
			"uploads\\(",
			"json'",
			"onRequest",
			"WriteJSON",
			"UploadFile",
			"\\.method",
			"'POST'",
			"onRequest",
			"HeifConvert",
			"spawn\\(",
			"spawn",
			"MagickResize",
			"UploadDone",
			"upload\\(",
			"FileItem",
			"FileList",
			"render\\(",
			"UploadDone",
			"'UPLOAD'",
			"'upload'",
			"onRequest",
			"'POST'",
			"\\bupload\\b",
			"debug",
			"file\\(",
			"json",
			"yield .*new",
			"'net'",
			"'list'",
			"isin",
			"TYPE_ALL",
			"'list'",
			"'file'",
			"'list'",
			"setLog",
			"'list'",
			"Direc",
			"renderToString",
			"src",
			"file",
			"file\\/",
			"file\\(",
			"file",
			"file<",
			"file",
			"file/",
			"Progress",
			"fontWeight",
			"Progress ",
			"useTrkl",
			"'\n",
			"Progress",
			"trkl",
			"FileList",
			"render\\(",
			"\\bh\\(",
			"Progress",
			"file/",
			"'progress'",
			"\\bws\\b",
			"Parser",
			"DrawImage",
			"pattern",
			"img2Id",
			"Object.ass",
			"globalThis",
			"Skele",
			"\\b(Point|Line|Rect)\\b",
			"\\bRect\\b",
			"Rect\\b\\b$",
			"cv.HoughLines",
			"CreateWS",
			"globalThis\\.",
			"CreateWS",
			"nowBuff",
			"document.body",
			"1px"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"output",
			"TYPE_MASK",
			" + (obj?.cacheBucket ?? '') + ",
			"\\1//\\2",
			"opts",
			"}\\n\\n",
			"}\\n\\n\\1",
			"",
			"\n      t = 'l';"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 431,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": "/home/roman/Projects/plot-cv/svg-box.js",
							"function_name_status_row": -1,
							"outline_rename_mode": false,
							"show_line_column": "disabled",
							"symkeys":
							[
								[
									282,
									291
								],
								[
									339,
									361
								],
								[
									410,
									455
								],
								[
									560,
									579
								],
								[
									704,
									728
								],
								[
									801,
									854
								],
								[
									921,
									967
								],
								[
									1322,
									1344
								],
								[
									1583,
									1608
								],
								[
									2286,
									2308
								],
								[
									2568,
									2590
								],
								[
									2700,
									2706
								],
								[
									2765,
									2771
								],
								[
									2865,
									2871
								],
								[
									3209,
									3213
								],
								[
									3753,
									3788
								],
								[
									4098,
									4119
								],
								[
									4143,
									4147
								],
								[
									4168,
									4188
								],
								[
									4986,
									5012
								],
								[
									5681,
									5707
								]
							],
							"symlist":
							[
								"  px = n =>",
								"  pt = (n, to = 'mm') =>",
								"  strokeStyle = (width = '0.5px', unit = '') =>",
								"  markerStyle = () =>",
								"  toChildArray(a)",
								"  xml(tagName, attributes = {}, c = undefined)",
								"  text(str, attrs = {}, spanAttrs = {})",
								"  line(...args)",
								"  measure(...args)",
								"  rect(...args)",
								"  main(...args)",
								"() =>",
								"() =>",
								"() =>",
								"  a =>",
								"  pushrect = (r, mx = -1, my = -1) =>",
								"  pushlines = (...l) =>",
								"  o =>",
								"  pushtext = (t, p) =>",
								"  frontBack(x, y)",
								"  leftRight(x, y)"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1709151356.99,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "eagle-shell.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 42142,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 75,
							"show_line_column": "disabled",
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1710084414.92,
							"tabs_extra_last_activated_sheet_index": 0,
							"tabs_extra_moving":
							[
								3,
								1
							],
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1260.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "svg-box.js",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7528,
						"regions":
						{
							"col_010101FF":
							{
								"flags": 16,
								"regions":
								[
									[
										470,
										475
									],
									[
										594,
										599
									],
									[
										1247,
										1252
									]
								],
								"scope": "col_010101FF"
							},
							"col_010101FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_010101FF_circle.png",
								"regions":
								[
									[
										459,
										459
									],
									[
										583,
										583
									],
									[
										1234,
										1234
									]
								],
								"scope": "col_gutter"
							}
						},
						"selection":
						[
							[
								5094,
								5094
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 196,
							"show_line_column": "disabled",
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1710430705.27,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5018.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "lib/fd-graph.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12374,
						"regions":
						{
						},
						"selection":
						[
							[
								1050,
								1070
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 24,
							"show_line_column": "disabled",
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1709840508.29,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 138.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "draw-utils.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5161,
						"regions":
						{
						},
						"selection":
						[
							[
								2029,
								2298
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 51,
							"show_line_column": "disabled",
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1709840522.42,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 29.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.8,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 0.0
	},
	"output.Debugger Console":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 138.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "plot-cv.sublime-project",
	"replace":
	{
		"height": 54.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"svg-box",
				"svg-box.js"
			],
			[
				"fd-graph",
				"lib/fd-graph.js"
			],
			[
				"draw-u",
				"draw-utils.js"
			],
			[
				"draw-util",
				"draw-utils.js"
			],
			[
				"test-nano",
				"test-nanovg.js"
			],
			[
				"fd-gra",
				"lib/fd-graph.js"
			],
			[
				"graph.js",
				"lib/geom/graph.js"
			],
			[
				"eagle-shell",
				"eagle-shell.js"
			],
			[
				"node.js",
				"lib/eagle/node.js"
			],
			[
				"eleme",
				"lib/eagle/element.js"
			],
			[
				"upload-ser",
				"~/Projects/plot-cv/upload-server.js"
			],
			[
				"quickjs-mysql.c",
				"quickjs/qjs-modules/quickjs-mysql.c"
			],
			[
				"mailcow-db",
				"mailcow-db.js"
			],
			[
				"wscli.js",
				"quickjs/qjs-net/wscli.js"
			],
			[
				"upload.js",
				"upload.js"
			],
			[
				"workertest",
				"workertest.js"
			],
			[
				"upload-server",
				"upload-server.js"
			],
			[
				"promise-wor",
				"promise-worker.js"
			],
			[
				"test-work",
				"test-worker.js"
			],
			[
				"debugger-ser",
				"debugger-server.js"
			],
			[
				".html",
				"draw.html"
			],
			[
				"upload.css",
				"static/css/upload.css"
			],
			[
				"upload.html",
				"upload.html"
			],
			[
				"compon",
				"components.js"
			],
			[
				"draw-ut",
				"draw-utils.js"
			],
			[
				"test-nan",
				"test-nanovg.js"
			],
			[
				"cv-shell",
				"cv-shell.js"
			],
			[
				"test-open",
				"test-opencv.js"
			],
			[
				"test-vid",
				"test-video.js"
			],
			[
				"test-opencv",
				"test-opencv.js"
			],
			[
				"noise.js",
				"noise.js"
			],
			[
				"noise",
				"noise.html"
			],
			[
				"dire",
				"directory.html"
			],
			[
				"upload",
				"upload.html"
			],
			[
				"map.ht",
				"map.html"
			],
			[
				"landing",
				"landing.html"
			],
			[
				"fire",
				"fire.html"
			],
			[
				"filelist",
				"filelist.html"
			],
			[
				"coil",
				"coil.html"
			],
			[
				"util.js",
				"quickjs/qjs-modules/lib/util.js"
			],
			[
				"misc.js",
				"lib/misc.js"
			],
			[
				"inde",
				"index.html"
			],
			[
				"404.ht",
				"404.html"
			],
			[
				"lscac",
				"lib/lscache.js"
			],
			[
				"style.css",
				"style.css"
			],
			[
				"direcot",
				"directory.html"
			],
			[
				"rpc.js",
				"quickjs/qjs-net/js/rpc.js"
			],
			[
				"direc",
				"directory.html"
			],
			[
				"smd.js",
				"lib/eagle/components/smd.js"
			],
			[
				"smd.jy",
				"quickjs/qjs-modules/3rdparty/denodrivers-postgres/docs/.nojekyll"
			],
			[
				"via.js",
				"lib/eagle/components/via.js"
			],
			[
				"hole.js",
				"lib/eagle/components/hole.js"
			],
			[
				"eagle2sv",
				"eagle2svg.js"
			],
			[
				"svgRe",
				"lib/eagle/svgRenderer.js"
			],
			[
				"boardre",
				"lib/eagle/boardRenderer.js"
			],
			[
				"polygon",
				"lib/eagle/components/polygon.js"
			],
			[
				"polygon.js",
				"lib/geom/polygon.js"
			],
			[
				"symbol",
				"lib/eagle/components/symbol.js"
			],
			[
				"wire.js",
				"lib/eagle/components/wire.js"
			],
			[
				"components/sym",
				"lib/eagle/components/symbol.js"
			],
			[
				"eagle/ele",
				"lib/eagle/element.js"
			],
			[
				"github-user",
				"github-userscript.js"
			],
			[
				"line.js",
				"lib/geom/line.js"
			],
			[
				"rect.",
				"lib/geom/rect.js"
			],
			[
				"repl.js",
				"quickjs/qjs-modules/lib/repl.js"
			],
			[
				"eagle-she",
				"eagle-shell.js"
			],
			[
				"minnet-clie",
				"quickjs/qjs-net/src/minnet-client.c"
			],
			[
				"callbaCK.C",
				"quickjs/qjs-net/lib/callback.c"
			],
			[
				"internal",
				"quickjs/qjs-modules/quickjs-internal.h"
			],
			[
				"utils.c",
				"quickjs/qjs-modules/src/utils.c"
			],
			[
				"qjsm.c",
				"quickjs/qjs-modules/src/qjsm.c"
			],
			[
				"eagle2",
				"eagle2gerber.js"
			],
			[
				"pcb-con",
				"pcb-conversion.js"
			],
			[
				"test_free",
				"qjs-opencv/tests/test_freetype.js"
			],
			[
				"param.js",
				"param.js"
			],
			[
				"make",
				"make-bitmap.js"
			],
			[
				"test_png",
				"qjs-opencv/tests/test_png.js"
			],
			[
				"stream/utils",
				"lib/stream/utils.js"
			],
			[
				"svg-cr",
				"svg-crop-pad.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 330.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
