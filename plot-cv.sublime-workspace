{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"define",
				"defineProperty"
			],
			[
				"exists",
				"existsAndNotEmpty"
			],
			[
				"RETURN_",
				"RETURN_VALUE_PATH"
			],
			[
				"constr",
				"constructor"
			],
			[
				"RE",
				"deep.RETURN_VALUE_PATH"
			],
			[
				"CXXRec",
				"CXXRecordDecl"
			],
			[
				"CXXReco",
				"CXXRecordDecl"
			],
			[
				"des",
				"desugared"
			],
			[
				"con",
				"constructor"
			],
			[
				"jsm_start_",
				"jsm_start_interactive3"
			],
			[
				"by",
				"byobRequest"
			],
			[
				"Read",
				"ReadableStreamBYOBRequest"
			],
			[
				"js_by",
				"js_readable_byob_request"
			],
			[
				"BY",
				"BYOB_REQUEST_METHOD_RESPONDWITHNEWVIEW"
			],
			[
				"JS_",
				"JS_NewObjectProtoClass"
			],
			[
				"JS_Get",
				"JS_GetPropertyUint32"
			],
			[
				"is_",
				"is_exception"
			],
			[
				"JS_T",
				"JS_ThrowInternalError"
			],
			[
				"Repe",
				"RepeaterItem"
			],
			[
				"WRITER_PROP",
				"WRITER_PROP_READY"
			],
			[
				"JS_Throw",
				"JS_ThrowInternalError"
			],
			[
				"to",
				"toStringTag"
			],
			[
				"Der",
				"DereferenceError"
			],
			[
				"Dere",
				"DereferenceError"
			],
			[
				"Is",
				"IsPunctuator"
			],
			[
				"js_magic_fun",
				"js_magic_function"
			],
			[
				"js_queue_iter",
				"js_queue_iterator_class_id"
			],
			[
				"js_queue_itreat",
				"js_queue_iterator_class_id"
			],
			[
				"js_",
				"js_archive_mode"
			],
			[
				"JS_GetP",
				"JS_GetPropertyStr"
			],
			[
				"JS_Set",
				"JS_SetPropertyUint32"
			],
			[
				"ENTRY_IS",
				"ENTRY_ISDATAENCRYPTED"
			],
			[
				"js_archivema",
				"js_archivematch_class_id"
			],
			[
				"JS_NewObjec",
				"JS_NewObjectProtoClass"
			],
			[
				"Module",
				"ModuleLoaderContext"
			],
			[
				"JS_Th",
				"JS_ThrowTypeError"
			],
			[
				"ModuleLo",
				"ModuleLoaderContext"
			],
			[
				"escape",
				"escape_noquote_tab"
			],
			[
				"max",
				"max_array_length"
			],
			[
				"tty",
				"tty_set_raw"
			],
			[
				"getOwnPrope",
				"getOwnPropertyDescriptor"
			],
			[
				"PATH_SKIP",
				"PATH_SKIP_SEPARATOR"
			],
			[
				"ListIterat",
				"ListIteratorKind"
			],
			[
				"_f",
				"_wfindnext64"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"JS_PROP_",
				"JS_PROP_CONFIGURABLE"
			],
			[
				"JS_GetPr",
				"JS_GetPropertyStr"
			],
			[
				"js_sock",
				"js_sockaddr_data"
			],
			[
				"SET_",
				"SET_CONSOLE_MODE"
			],
			[
				"ERA",
				"ERASE_IN_LINE"
			],
			[
				"js_misc_set",
				"js_misc_settextattr"
			],
			[
				"dw",
				"dwCursorPosition"
			],
			[
				"prop",
				"property_recursion_top"
			],
			[
				"property_enumer",
				"property_enumeration_index"
			],
			[
				"INT",
				"INSPECT_INT32T_INRANGE"
			],
			[
				"js_inspect_print_arra",
				"js_inspect_print_arraybuffer2"
			],
			[
				"is_a",
				"is_arraybuffer"
			],
			[
				"fmt",
				"fmt_ulong"
			],
			[
				"inspec",
				"inspect_newline2"
			],
			[
				"property_",
				"property_recursion_top"
			],
			[
				"js_inspec",
				"js_inspect_print_value"
			],
			[
				"JS_Atom",
				"JS_AtomToValue"
			],
			[
				"mysql_op",
				"mysql_optionsv"
			],
			[
				"MY",
				"MYSQLConnectParameters"
			],
			[
				"js_connect",
				"js_connectparams_class_id"
			],
			[
				"js_conn",
				"js_connectparams_from"
			],
			[
				"MYSQL",
				"MYSQLConnectParameters"
			],
			[
				"mysql_get",
				"mysql_get_socket"
			],
			[
				"async",
				"asyncclosure_resolve"
			],
			[
				"res",
				"resolving_funcs"
			],
			[
				"HAVE_LIB",
				"HAVE_LIBMARIADBCLIENT"
			],
			[
				"js_is_null",
				"js_is_null_or_undefined"
			],
			[
				"FileDesc",
				"FileDescriptorHandlers"
			],
			[
				"js_generat",
				"js_generator_prototype"
			],
			[
				"tab_",
				"tab_atom_len"
			],
			[
				"proper",
				"property_recursion_pop"
			],
			[
				"property_rec",
				"property_recursion_top"
			],
			[
				"property",
				"property_recursion_top"
			],
			[
				"RETURN",
				"deep.RETURN_VALUE_PATH"
			],
			[
				"LIBS",
				"LIBSERIALPORT_LIBRARY_DIR"
			],
			[
				"js_misc_atexit_",
				"js_misc_atexit_called"
			],
			[
				"getO",
				"getOwnPropertyNames(...)"
			],
			[
				"Res",
				"ResolveAlias"
			],
			[
				"relati",
				"relativePath"
			],
			[
				"js_syscla",
				"js_syscallerror_defines"
			],
			[
				"get",
				"getOwnPropertyDescriptor(...)"
			],
			[
				"resol",
				"resolving_funcs"
			],
			[
				"set",
				"set_handler"
			],
			[
				"Async",
				"AsyncSocketClosure"
			],
			[
				"Asy",
				"AsyncSocketClosure"
			],
			[
				"js_socket_async_",
				"js_socket_async_resolver"
			],
			[
				"js_socket_asyc",
				"js_socket_async_closure_free"
			],
			[
				"JS_EV",
				"JS_EVAL_FLAG_COMPILE_ONLY"
			],
			[
				"check_",
				"check_function_and_include"
			],
			[
				"PGCon",
				"PGConnectParameters"
			],
			[
				"PGC",
				"PGConnectParameters"
			],
			[
				"connect",
				"connectparams_parse"
			],
			[
				"Nam",
				"FieldNameFunc"
			],
			[
				"PG",
				"PGSQLResult"
			],
			[
				"js",
				"js_pgresult_class_id"
			],
			[
				"PGSQ",
				"PGSQResultIterator"
			],
			[
				"js_misc_getopa",
				"js_misc_getopaque"
			],
			[
				"js_pgrequ",
				"js_pgresult_opaque"
			],
			[
				"PGRES_PO",
				"PGRES_POLLING_READING"
			],
			[
				"PROP_PRO",
				"PROP_PROTOCOL_VERSION"
			],
			[
				"B",
				"BOOL"
			],
			[
				"Asyn",
				"AsyncIterator"
			],
			[
				"ret",
				"return_flag"
			],
			[
				"ImportID",
				"ImportIdMap"
			],
			[
				"Num",
				"NumericRange"
			],
			[
				"dbuf_",
				"dbuf_init2"
			],
			[
				"getOwn",
				"getOwnPropertyNames(...)"
			],
			[
				"has_",
				"has_dot_or_slash"
			],
			[
				"My",
				"MySQLResult"
			],
			[
				"JS_ToCS",
				"JS_ToCStringLen"
			],
			[
				"CF",
				"CFunctionClosureRecord"
			],
			[
				"extendA",
				"extendAsyncGenerator"
			],
			[
				"JS_SetPr",
				"JS_SetPropertyStr"
			],
			[
				"MYSQL_TYPE_NEW",
				"MYSQL_TYPE_NEWDECIMAL"
			],
			[
				"JS_CF",
				"JS_CFUNC_MAGIC_DEF"
			],
			[
				"js_mysqlresult_fun",
				"js_mysqlresult_functions"
			],
			[
				"JS_ToCSt",
				"JS_ToCStringLen"
			],
			[
				"js_mysql_f",
				"js_mysql_functions"
			],
			[
				"MARIA",
				"MARIADBCLIENT_LIBRARY"
			],
			[
				"depe",
				"dependencyMap"
			],
			[
				"depden",
				"dependencyTree"
			],
			[
				"add_",
				"add_dependencies"
			],
			[
				"ch",
				"chunks_written"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "IfDebug(token)\nLogIfDebug(token, loggerFn)\n() =>\n(...args) =>\nReadFd(fd, binary)\nIsStdio(obj)\nReadClose(file, binary)\n()\nReadFile(name, binary)\nReadAny(obj, binary)\nLoadHistory(filename)\n  parse = () =>\n  entry =>\nReadJSON(filename)\nReadXML(filename, ...args)\nWriteXML(name, data, ...args)\nWriteFile(file, data)\nWriteFd(fd, data, offset, length)\nWriteClose(file, data, offset, length)\nWriteAny(obj, ...args)\nWriteJSON(name, data, ...args)\nReadBJSON(filename)\nWriteBJSON(name, value)\nFilter(gen, regEx = /.*/)\nFilterImages(gen)\nSortFiles(arr, field = 'ctime')\n(a, b) =>\nStatFiles(gen)\n  toString()\n() =>\n  toString()\n  get landscape()\n  get portrait()\nFdReader(fd, bufferSize = 1024)\nCopyToClipboard(text)\nLogCall(fn, thisObj)\nfunction(...args)\n  arg =>",
			"settings":
			{
				"buffer_size": 752,
				"line_ending": "Unix",
				"name": "ùåÜ Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					24,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/clang-ast.js",
						"symkeys":
						[
							[
								848,
								861
							],
							[
								940,
								996
							],
							[
								1451,
								1510
							],
							[
								1998,
								2037
							],
							[
								2043,
								2049
							],
							[
								2219,
								2251
							],
							[
								2353,
								2390
							],
							[
								2544,
								2571
							],
							[
								2653,
								2683
							],
							[
								2750,
								2758
							],
							[
								2797,
								2824
							],
							[
								2873,
								2900
							],
							[
								2977,
								2981
							],
							[
								3004,
								3037
							],
							[
								3217,
								3260
							],
							[
								3545,
								3553
							],
							[
								3945,
								3949
							],
							[
								3968,
								3988
							],
							[
								4139,
								4171
							],
							[
								4333,
								4351
							],
							[
								4612,
								4629
							],
							[
								4936,
								4947
							],
							[
								4967,
								4974
							],
							[
								5001,
								5010
							],
							[
								5130,
								5136
							],
							[
								5248,
								5256
							],
							[
								5371,
								5380
							],
							[
								5406,
								5415
							],
							[
								5446,
								5450
							],
							[
								5511,
								5515
							],
							[
								5591,
								5607
							],
							[
								5864,
								5879
							],
							[
								5946,
								5955
							],
							[
								6016,
								6024
							],
							[
								6073,
								6082
							],
							[
								6129,
								6139
							],
							[
								6204,
								6214
							],
							[
								6251,
								6261
							],
							[
								6349,
								6360
							],
							[
								6566,
								6570
							],
							[
								6751,
								6762
							],
							[
								6993,
								6997
							],
							[
								7049,
								7063
							],
							[
								7113,
								7163
							],
							[
								7233,
								7288
							],
							[
								7293,
								7327
							],
							[
								7506,
								7510
							],
							[
								7591,
								7606
							],
							[
								7694,
								7750
							],
							[
								7824,
								7834
							],
							[
								8038,
								8045
							],
							[
								8162,
								8173
							],
							[
								8210,
								8239
							],
							[
								8300,
								8331
							],
							[
								8533,
								8543
							],
							[
								8598,
								8611
							],
							[
								8648,
								8677
							],
							[
								8738,
								8769
							],
							[
								8973,
								8983
							],
							[
								9038,
								9042
							],
							[
								9140,
								9166
							],
							[
								12158,
								12162
							],
							[
								13177,
								13189
							],
							[
								13312,
								13320
							],
							[
								13406,
								13417
							],
							[
								13540,
								13553
							],
							[
								13676,
								13688
							],
							[
								13782,
								13791
							],
							[
								13843,
								13854
							],
							[
								13943,
								13952
							],
							[
								14072,
								14088
							],
							[
								14146,
								14162
							],
							[
								14210,
								14223
							],
							[
								14370,
								14385
							],
							[
								14532,
								14547
							],
							[
								14804,
								14818
							],
							[
								14904,
								14916
							],
							[
								14983,
								14995
							],
							[
								15101,
								15118
							],
							[
								15204,
								15215
							],
							[
								15275,
								15288
							],
							[
								15431,
								15439
							],
							[
								15547,
								15557
							],
							[
								15764,
								15773
							],
							[
								17579,
								17589
							],
							[
								19681,
								19687
							],
							[
								19979,
								19990
							],
							[
								20091,
								20141
							],
							[
								20246,
								20254
							],
							[
								20324,
								20332
							],
							[
								22141,
								22171
							],
							[
								22250,
								22260
							],
							[
								22278,
								22304
							],
							[
								22433,
								22441
							],
							[
								22524,
								22532
							],
							[
								22710,
								22715
							],
							[
								22753,
								22760
							],
							[
								22844,
								22858
							],
							[
								23451,
								23455
							],
							[
								23536,
								23541
							],
							[
								25095,
								25099
							],
							[
								26001,
								26015
							],
							[
								26079,
								26089
							],
							[
								26174,
								26196
							],
							[
								26418,
								26426
							],
							[
								26548,
								26567
							],
							[
								26665,
								26673
							],
							[
								26691,
								26713
							],
							[
								26834,
								26842
							],
							[
								26947,
								26973
							],
							[
								27328,
								27336
							],
							[
								27451,
								27462
							],
							[
								27480,
								27506
							],
							[
								27578,
								27582
							],
							[
								27687,
								27697
							],
							[
								27757,
								27761
							],
							[
								27824,
								27828
							],
							[
								27878,
								27882
							],
							[
								28292,
								28302
							],
							[
								28334,
								28342
							],
							[
								28439,
								28448
							],
							[
								28466,
								28488
							],
							[
								28706,
								28718
							],
							[
								28736,
								28762
							],
							[
								28997,
								29005
							],
							[
								29068,
								29076
							],
							[
								30201,
								30220
							],
							[
								30336,
								30346
							],
							[
								30401,
								30409
							],
							[
								30518,
								30525
							],
							[
								30543,
								30565
							],
							[
								30910,
								30918
							],
							[
								31015,
								31024
							],
							[
								31048,
								31070
							],
							[
								31175,
								31186
							],
							[
								31204,
								31226
							],
							[
								31603,
								31620
							],
							[
								31638,
								31660
							],
							[
								31916,
								31924
							],
							[
								32035,
								32040
							],
							[
								32088,
								32111
							],
							[
								32233,
								32244
							],
							[
								32293,
								32305
							],
							[
								32367,
								32376
							],
							[
								32423,
								32433
							],
							[
								32471,
								32507
							],
							[
								33162,
								33174
							],
							[
								33220,
								33229
							],
							[
								33276,
								33286
							],
							[
								33466,
								33471
							],
							[
								33527,
								33535
							],
							[
								33628,
								33651
							],
							[
								33910,
								33926
							],
							[
								34145,
								34161
							],
							[
								34570,
								34583
							],
							[
								34729,
								34739
							],
							[
								34787,
								34798
							],
							[
								34890,
								34902
							],
							[
								34952,
								34965
							],
							[
								35013,
								35025
							],
							[
								35075,
								35088
							],
							[
								35336,
								35349
							],
							[
								35384,
								35399
							],
							[
								35479,
								35534
							],
							[
								36084,
								36094
							],
							[
								36337,
								36357
							],
							[
								36440,
								36486
							],
							[
								37985,
								38050
							],
							[
								38379,
								38383
							],
							[
								38659,
								38663
							],
							[
								39392,
								39399
							],
							[
								39453,
								39460
							],
							[
								39548,
								39555
							],
							[
								39736,
								39771
							],
							[
								39810,
								39830
							],
							[
								39860,
								39866
							],
							[
								39887,
								39895
							],
							[
								40002,
								40035
							],
							[
								40300,
								40325
							],
							[
								40666,
								40708
							],
							[
								41240,
								41293
							],
							[
								42740,
								42746
							],
							[
								42796,
								42802
							],
							[
								42967,
								42973
							],
							[
								43115,
								43131
							],
							[
								43676,
								43683
							],
							[
								43726,
								43730
							],
							[
								43750,
								43757
							],
							[
								43878,
								43905
							],
							[
								43964,
								43979
							],
							[
								44310,
								44317
							],
							[
								44377,
								44391
							],
							[
								44436,
								44451
							],
							[
								44477,
								44481
							],
							[
								44513,
								44524
							],
							[
								44557,
								44569
							],
							[
								44603,
								44616
							],
							[
								44692,
								44697
							],
							[
								44777,
								44781
							],
							[
								44805,
								44817
							],
							[
								44880,
								44885
							],
							[
								44915,
								44919
							],
							[
								44943,
								44952
							],
							[
								44965,
								44981
							],
							[
								45323,
								45327
							],
							[
								45351,
								45362
							],
							[
								45421,
								45425
							],
							[
								45463,
								45467
							],
							[
								45499,
								45515
							],
							[
								45554,
								45558
							],
							[
								45576,
								45580
							],
							[
								45624,
								45676
							],
							[
								45864,
								45880
							],
							[
								46240,
								46261
							],
							[
								46287,
								46291
							],
							[
								46733,
								46738
							],
							[
								46773,
								46800
							],
							[
								46994,
								47022
							],
							[
								47203,
								47228
							],
							[
								47303,
								47335
							],
							[
								47466,
								47470
							],
							[
								47607,
								47636
							],
							[
								47746,
								47750
							],
							[
								48044,
								48066
							],
							[
								49105,
								49160
							],
							[
								49240,
								49247
							],
							[
								49318,
								49325
							],
							[
								49362,
								49388
							],
							[
								49482,
								49490
							],
							[
								49556,
								49564
							],
							[
								49626,
								49637
							],
							[
								49791,
								49800
							],
							[
								49819,
								49845
							],
							[
								49898,
								49907
							],
							[
								49960,
								49986
							],
							[
								50038,
								50057
							],
							[
								50133,
								50150
							],
							[
								50185,
								50209
							],
							[
								50468,
								50473
							],
							[
								50531,
								50538
							],
							[
								50620,
								50631
							],
							[
								51339,
								51349
							],
							[
								51397,
								51401
							],
							[
								51592,
								51603
							],
							[
								51614,
								51638
							],
							[
								51706,
								51738
							],
							[
								51894,
								51919
							],
							[
								51983,
								52019
							],
							[
								52089,
								52129
							],
							[
								52381,
								52409
							],
							[
								52456,
								52487
							],
							[
								52716,
								52758
							],
							[
								52961,
								52986
							],
							[
								53144,
								53165
							],
							[
								53210,
								53229
							],
							[
								53563,
								53590
							],
							[
								53658,
								53677
							],
							[
								53881,
								53916
							],
							[
								54034,
								54082
							],
							[
								54328,
								54355
							],
							[
								54973,
								55014
							],
							[
								55252,
								55279
							],
							[
								55422,
								55443
							],
							[
								55504,
								55531
							],
							[
								55576,
								55608
							],
							[
								55858,
								55884
							],
							[
								56078,
								56097
							],
							[
								56759,
								56784
							],
							[
								56832,
								56863
							],
							[
								56930,
								56945
							],
							[
								57140,
								57161
							],
							[
								57278,
								57314
							],
							[
								57534,
								57553
							],
							[
								57957,
								57978
							],
							[
								58195,
								58228
							],
							[
								58288,
								58311
							],
							[
								58374,
								58391
							],
							[
								58511,
								58515
							],
							[
								59342,
								59367
							],
							[
								59574,
								59601
							],
							[
								60066,
								60070
							],
							[
								60281,
								60297
							],
							[
								60508,
								60527
							],
							[
								60648,
								60653
							],
							[
								60991,
								61030
							],
							[
								61129,
								61172
							],
							[
								61382,
								61397
							],
							[
								61663,
								61699
							],
							[
								61795,
								61823
							],
							[
								62093,
								62137
							],
							[
								62199,
								62230
							],
							[
								62289,
								62310
							],
							[
								62369,
								62392
							],
							[
								62815,
								62841
							],
							[
								62909,
								62935
							],
							[
								62999,
								63018
							],
							[
								63060,
								63095
							],
							[
								63269,
								63311
							],
							[
								63496,
								63517
							],
							[
								63693,
								63723
							],
							[
								63943,
								63969
							],
							[
								64398,
								64417
							],
							[
								64478,
								64501
							],
							[
								65036,
								65063
							],
							[
								65113,
								65136
							],
							[
								65293,
								65329
							],
							[
								65399,
								65428
							],
							[
								65486,
								65509
							],
							[
								65687,
								65712
							],
							[
								65796,
								65838
							],
							[
								65937,
								65962
							],
							[
								66266,
								66321
							],
							[
								66575,
								66604
							],
							[
								66855,
								66899
							],
							[
								67031,
								67075
							],
							[
								67162,
								67190
							],
							[
								67334,
								67358
							],
							[
								67606,
								67650
							],
							[
								67972,
								68025
							],
							[
								68124,
								68169
							],
							[
								68244,
								68263
							],
							[
								68324,
								68345
							],
							[
								68522,
								68549
							],
							[
								68598,
								68628
							],
							[
								68640,
								68661
							],
							[
								68673,
								68705
							],
							[
								68847,
								68877
							],
							[
								68889,
								68930
							],
							[
								68942,
								68981
							],
							[
								68993,
								69016
							],
							[
								69028,
								69051
							],
							[
								69063,
								69082
							],
							[
								69094,
								69136
							],
							[
								69148,
								69173
							],
							[
								69185,
								69212
							],
							[
								69224,
								69262
							],
							[
								69274,
								69356
							],
							[
								69368,
								69435
							],
							[
								69447,
								69472
							],
							[
								69484,
								69526
							],
							[
								69711,
								69749
							],
							[
								69761,
								69818
							],
							[
								69830,
								69868
							],
							[
								69880,
								69905
							],
							[
								69917,
								69944
							],
							[
								69956,
								69994
							],
							[
								70006,
								70062
							],
							[
								70156,
								70207
							],
							[
								70219,
								70294
							],
							[
								70306,
								70337
							],
							[
								70349,
								70368
							],
							[
								70380,
								70416
							],
							[
								70512,
								70533
							],
							[
								70545,
								70575
							],
							[
								70587,
								70610
							],
							[
								70622,
								70665
							],
							[
								70677,
								70715
							],
							[
								70727,
								70771
							],
							[
								70783,
								70807
							],
							[
								70924,
								70954
							],
							[
								70966,
								70992
							],
							[
								71036,
								71083
							],
							[
								71095,
								71137
							],
							[
								71149,
								71187
							],
							[
								71199,
								71235
							],
							[
								71247,
								71294
							],
							[
								71306,
								71329
							],
							[
								71341,
								71375
							],
							[
								71583,
								71626
							],
							[
								71638,
								71690
							],
							[
								71794,
								71841
							],
							[
								71853,
								71881
							],
							[
								71893,
								71931
							],
							[
								71943,
								71984
							],
							[
								71996,
								72015
							],
							[
								72027,
								72056
							],
							[
								72068,
								72094
							],
							[
								72106,
								72134
							],
							[
								72146,
								72198
							],
							[
								72210,
								72238
							],
							[
								72250,
								72284
							],
							[
								72416,
								72437
							],
							[
								72449,
								72472
							],
							[
								72484,
								72522
							],
							[
								72534,
								72572
							],
							[
								72584,
								72605
							],
							[
								72617,
								72642
							],
							[
								72654,
								72679
							],
							[
								72691,
								72722
							],
							[
								72809,
								72828
							],
							[
								72840,
								72863
							],
							[
								72875,
								72916
							],
							[
								72928,
								72971
							],
							[
								72983,
								73010
							],
							[
								73022,
								73060
							],
							[
								73072,
								73105
							],
							[
								73117,
								73153
							],
							[
								73165,
								73184
							],
							[
								73250,
								73313
							],
							[
								73325,
								73381
							],
							[
								73393,
								73416
							],
							[
								73428,
								73463
							],
							[
								73475,
								73531
							],
							[
								73543,
								73596
							],
							[
								73608,
								73653
							],
							[
								73665,
								73710
							],
							[
								73722,
								73767
							],
							[
								73779,
								73809
							],
							[
								73821,
								73868
							],
							[
								73880,
								73905
							],
							[
								73917,
								73950
							],
							[
								73962,
								73992
							],
							[
								74004,
								74044
							],
							[
								74056,
								74109
							],
							[
								74121,
								74144
							],
							[
								74156,
								74177
							],
							[
								74189,
								74229
							],
							[
								74241,
								74275
							],
							[
								74287,
								74309
							],
							[
								74321,
								74355
							],
							[
								74367,
								74390
							],
							[
								74402,
								74444
							],
							[
								74456,
								74487
							],
							[
								74499,
								74525
							],
							[
								74538,
								74568
							],
							[
								75142,
								75182
							],
							[
								75404,
								75408
							],
							[
								76561,
								76601
							],
							[
								76984,
								77044
							],
							[
								77480,
								77506
							],
							[
								77614,
								77652
							],
							[
								77860,
								77864
							],
							[
								78163,
								78193
							],
							[
								78664,
								78668
							],
							[
								79332,
								79371
							],
							[
								80035,
								80092
							],
							[
								80413,
								80437
							],
							[
								80910,
								80940
							],
							[
								81204,
								81245
							],
							[
								81380,
								81419
							],
							[
								81431,
								81476
							],
							[
								81488,
								81516
							],
							[
								81528,
								81564
							],
							[
								81708,
								81746
							],
							[
								81758,
								81797
							],
							[
								81809,
								81850
							],
							[
								81862,
								81897
							],
							[
								81909,
								81956
							],
							[
								81968,
								82007
							],
							[
								82020,
								82054
							],
							[
								82066,
								82114
							],
							[
								82126,
								82169
							],
							[
								82181,
								82230
							],
							[
								82242,
								82292
							],
							[
								82304,
								82353
							],
							[
								82607,
								82631
							],
							[
								82688,
								82713
							],
							[
								83092,
								83121
							],
							[
								83314,
								83319
							],
							[
								83594,
								83615
							],
							[
								83682,
								83740
							],
							[
								83886,
								83890
							],
							[
								84494,
								84502
							],
							[
								84564,
								84572
							],
							[
								84692,
								84696
							],
							[
								84949,
								85007
							],
							[
								85109,
								85114
							],
							[
								85504,
								85511
							],
							[
								85700,
								85753
							],
							[
								85990,
								86066
							],
							[
								86228,
								86233
							],
							[
								86399,
								86479
							],
							[
								86606,
								86614
							],
							[
								86964,
								87019
							],
							[
								87353,
								87363
							],
							[
								87429,
								87454
							],
							[
								87492,
								87502
							],
							[
								87568,
								87583
							],
							[
								87661,
								87676
							],
							[
								87715,
								87719
							],
							[
								87799,
								87824
							],
							[
								87863,
								87871
							],
							[
								87913,
								87942
							],
							[
								87972,
								87976
							]
						],
						"symlist":
						[
							" (ast, r) =>",
							" function DeepFind(ast, pred, flags = deep.RETURN_VALUE)",
							" function* DeepSelect(ast, pred, flags = deep.RETURN_VALUE)",
							" function DeepCachePath(ast, path, m = ",
							"(ast))",
							" function DeepPathOf(ast, value)",
							" function DeepGet(ast, path, ...args)",
							"function FileTime(filename)",
							"function Newer(file, ...other)",
							"other =>",
							"function Older(file, other)",
							"function GetSubscripts(str)",
							"m =>",
							"function TrimSubscripts(str, sub)",
							" function nameOrIdPred(name_or_id, ...args)",
							" node =>",
							"List",
							"constructor(...args)",
							"filter(callback, thisArg = null)",
							"callback = elem =>",
							"slice(start, end)",
							"get first()",
							"elem =>",
							"entries()",
							"keys()",
							"values()",
							"toArray()",
							"(a, n) =>",
							"List",
							"Node",
							"constructor(ast)",
							"static get(ast)",
							"get ast()",
							"get id()",
							"get loc()",
							"get file()",
							" (v, k) =>",
							" (v, k) =>",
							"get range()",
							"r =>",
							"toJSON(obj)",
							"Node",
							"(node, ast) =>",
							" function PathOf(node, ast = globalThis['$'].data)",
							" function* Hier(node_or_path, t = (p, ast, abort) => p.",
							"(ast), ast = globalThis['$'].data)",
							"p =>",
							"abortFn = () =>",
							" function FindType(typeName, ast = globalThis['$'].data)",
							"([tok]) =>",
							"node =>",
							"PointerType",
							"constructor(pointee, ast, ns)",
							"static fromString(str, ast, ns)",
							"toString()",
							"ReferenceType",
							"constructor(pointee, ast, ns)",
							"static fromString(str, ast, ns)",
							"toString()",
							"Type",
							"constructor(node, ast, ns)",
							"n =>",
							"get regExp()",
							"isEnum()",
							"isPointer()",
							"isReference()",
							"isFunction()",
							"isArray()",
							"isInteger()",
							"arrayOf()",
							"get subscripts()",
							"trimSubscripts()",
							"get pointer()",
							"get reference()",
							"getPointer(ast)",
							"get unsigned()",
							"get signed()",
							"isCompound()",
							"isFloatingPoint()",
							"get alias()",
							"get aliases()",
							"isEnum()",
							"isString()",
							"get ffi()",
							"get size()",
							"toJS()",
							"toJSON(obj)",
							"static get(name_or_id, ast = globalThis['$'].data)",
							" node =>",
							" node =>",
							"function RoundTo(value, align)",
							"RecordDecl",
							"constructor(node, ast, ns)",
							"child =>",
							"child =>",
							"() =>",
							"node =>",
							"(acc, node) =>",
							"i =>",
							" n =>",
							"n =>",
							"([name, t]) =>",
							"get size()",
							"(acc, [name, type]) =>",
							"toJSON()",
							"([name, member]) =>",
							"EnumDecl",
							"constructor(node, ast)",
							"child =>",
							"({ name, type, inner }) =>",
							"toJSON()",
							"TypedefDecl",
							"constructor(node, ast, ns)",
							"n =>",
							" (v, k) =>",
							"n =>",
							"n =>",
							"n =>",
							"get size()",
							"toJSON()",
							"FieldDecl",
							"constructor(node, ast)",
							"FunctionDecl",
							"constructor(node, ast, ns)",
							"child =>",
							"child =>",
							"({ name, type }) =>",
							"isMethod()",
							"toJSON()",
							"VarDecl",
							"constructor(node, ast)",
							"toJSON()",
							"ClassDecl",
							"constructor(node, ast)",
							"BuiltinType",
							"constructor(node, ast)",
							"ConstantArrayType",
							"constructor(node, ast)",
							"toJSON()",
							"Range",
							"constructor(begin, end)",
							"get begin()",
							"set begin(v)",
							"get end()",
							"set end(v)",
							"toString(opts = { printFile: true })",
							"get length()",
							"toArray()",
							"toObject()",
							"Range",
							"Location",
							"static at(file, offset)",
							"static from(loc)",
							"constructor(loc)",
							"update(other)",
							"get line()",
							"set line(v)",
							"get column()",
							"set column(v)",
							"get offset()",
							"set offset(v)",
							" (t, ...c) =>",
							"'\\x1b[m' : t =>",
							"toString(opts = { printFile: true, onlyOffset: false })",
							"toObject()",
							"localeCompare(other)",
							" function TypeFactory(node, ast, cache = true)",
							"async function SpawnCompiler(compiler, input, outfile, args = [])",
							"p =>",
							"p =>",
							"line =>",
							"line =>",
							"line =>",
							" function PipeReader(fd, callback)",
							"(resolve, reject) =>",
							" () =>",
							" data =>",
							" function ReadPipe(fd, callback)",
							" function ReadOutput(fd)",
							"async function SourceDependencies(...args)",
							"async function AstDump(compiler, source, args, force)",
							"size()",
							"json()",
							"data()",
							"SetFile = loc =>",
							"files()",
							"n =>",
							"file =>",
							"pred2 = (used, implicit) =>",
							" node =>",
							"types()",
							" n =>",
							" () =>",
							"List",
							"functions()",
							" n =>",
							" () =>",
							" n =>",
							"List",
							"namespaces()",
							" n =>",
							"List",
							"classes()",
							"predicate = n =>",
							"List",
							"variables()",
							"n =>",
							"List",
							"names(depth = 1)",
							"n =>",
							"n =>",
							" function NameFor(decl, ast = globalThis['$']?.data)",
							" (value, key) =>",
							" function NodeType(n)",
							"t =>",
							" n =>",
							" function NodeName(n, name)",
							" function* RawLocation(path)",
							" function* RawRange(path)",
							" function CompleteLocation(path)",
							"l =>",
							" function CompleteRange(path)",
							"l =>",
							" function GetLoc(node)",
							" function GetTypeNode(node, ast = globalThis['$'].data)",
							"node =>",
							"node =>",
							" function GetTypeStr(node)",
							"inner =>",
							"inner =>",
							"([n, t]) =>",
							"NodeError",
							"constructor(message, node)",
							"NodeError",
							" function NodePrinter(ast)",
							" function put(str)",
							" function trim()",
							"printer = function(node)",
							"get()",
							"value()",
							"value(node)",
							"toString()",
							"i =>",
							"NodePrinter",
							"AbiTagAttr(abi_tag_attr)",
							"AccessSpecDecl(access_spec_decl)",
							"AlignedAttr(aligned_attr)",
							"AlwaysInlineAttr(always_inline_attr)",
							"ArraySubscriptExpr(array_subscript_expr)",
							"AsmLabelAttr(asm_label_attr)",
							"BinaryOperator(binary_operator)",
							"BlockCommandComment(block_command_comment)",
							"BuiltinAttr(builtin_attr)",
							"BreakStmt(break_stmt)",
							"CallExpr(call_expr)",
							"RecoveryExpr(recovery_expr)",
							"CaseStmt(case_stmt)",
							"CharacterLiteral(character_literal)",
							"CompoundAssignOperator(compound_assign_operator)",
							"CompoundStmt(compound_stmt)",
							"ConditionalOperator(conditional_operator)",
							"ConstantExpr(constant_expr)",
							"ConstAttr(const_attr)",
							"ContinueStmt(continue_stmt)",
							"CStyleCastExpr(cstyle_cast_expr)",
							"DeclRefExpr(decl_ref_expr)",
							"DeclStmt(decl_stmt)",
							"DefaultStmt(default_stmt)",
							"DeprecatedAttr(deprecated_attr)",
							"DoStmt(do_stmt)",
							"EmptyDecl(empty_decl)",
							"EnumConstantDecl(enum_constant_decl)",
							"EnumDecl(enum_decl)",
							"FieldDecl(field_decl)",
							"FloatingLiteral(floating_literal)",
							"FormatAttr(format_attr)",
							"ForStmt(for_stmt)",
							"n =>",
							"FullComment(full_comment)",
							"FunctionDecl(function_decl)",
							"n =>",
							" n =>",
							"GotoStmt(goto_stmt)",
							" n =>",
							"HTMLEndTagComment(html_end_tag_comment)",
							"HTMLStartTagComment(html_start_tag_comment)",
							"IfStmt(if_stmt)",
							"ImplicitCastExpr(implicit_cast_expr)",
							"InitListExpr(init_list_expr)",
							"InlineCommandComment(inline_command_comment)",
							"IntegerLiteral(integer_literal)",
							"LabelStmt(label_stmt)",
							"MemberExpr(member_expr)",
							"NonNullAttr(non_null_attr)",
							"NoThrowAttr(no_throw_attr)",
							"NullStmt(null_stmt)",
							"ParagraphComment(paragraph_comment)",
							"ParamCommandComment(param_command_comment)",
							"ParenExpr(paren_expr)",
							"ParenListExpr(paren_list_expr)",
							"ParmVarDecl(parm_var_decl)",
							"PureAttr(pure_attr)",
							"RecordDecl(record_decl)",
							"RestrictAttr(restrict_attr)",
							"ReturnStmt(return_stmt)",
							"ReturnsTwiceAttr(returns_twice_attr)",
							"StringLiteral(string_literal)",
							"SwitchStmt(switch_stmt)",
							"TextComment(text_comment)",
							"TranslationUnitDecl(translation_unit_decl)",
							"TypedefDecl(typedef_decl)",
							"UnaryExprOrTypeTraitExpr(unary_expr_or_type_trait_expr)",
							"UnaryOperator(unary_operator)",
							"UnresolvedLookupExpr(unresolved_lookup_expr)",
							"UnresolvedMemberExpr(unresolved_member_expr)",
							"VarDecl(var_decl, base_type)",
							"([offset, subscript]) =>",
							"VerbatimBlockComment(verbatim_block_comment)",
							"VerbatimBlockLineComment(verbatim_block_line_comment)",
							"WarnUnusedResultAttr(warn_unused_result_attr)",
							"WeakAttr(weak_attr)",
							"WhileStmt(while_stmt)",
							"OverrideAttr(override_attr)",
							"AddrLabelExpr(addr_label_expr)",
							"AliasAttr(alias_attr)",
							"AlignValueAttr(align_value_attr)",
							"AllocSizeAttr(alloc_size_attr)",
							"ArrayInitIndexExpr(array_init_index_expr)",
							"ArrayInitLoopExpr(array_init_loop_expr)",
							"AtomicExpr(atomic_expr)",
							"AtomicType(atomic_type)",
							"AutoType(auto_type)",
							"BuiltinTemplateDecl(builtin_template_decl)",
							"BuiltinType(builtin_type)",
							"CallbackAttr(callback_attr)",
							"ClassTemplateDecl(class_template_decl)",
							"ClassTemplatePartialSpecializationDecl(class_template_partial_specialization_decl)",
							"ClassTemplateSpecializationDecl(class_template_specialization_decl)",
							"ComplexType(complex_type)",
							"CompoundLiteralExpr(compound_literal_expr)",
							"ConstantArrayType(constant_array_type)",
							"ConstructorUsingShadowDecl(constructor_using_shadow_decl)",
							"ConvertVectorExpr(convert_vector_expr)",
							"DecayedType(decayed_type)",
							"DecltypeType(decltype_type)",
							"DependentNameType(dependent_name_type)",
							"DependentScopeDeclRefExpr(dependent_scope_decl_ref_expr)",
							"DependentSizedArrayType(dependent_sized_array_type)",
							"DependentTemplateSpecializationType(dependent_template_specialization_type)",
							"ElaboratedType(elaborated_type)",
							"EnumType(enum_type)",
							"ExprWithCleanups(expr_with_cleanups)",
							"FinalAttr(final_attr)",
							"FormatArgAttr(format_arg_attr)",
							"FriendDecl(friend_decl)",
							"FunctionNoProtoType(function_no_proto_type)",
							"FunctionProtoType(function_proto_type)",
							"FunctionTemplateDecl(function_template_decl)",
							"GCCAsmStmt(gcc_asm_stmt)",
							"GNUInlineAttr(gnu_inline_attr)",
							"GNUNullExpr(gnu_null_expr)",
							"ImplicitValueInitExpr(implicit_value_init_expr)",
							"IncompleteArrayType(incomplete_array_type)",
							"IndirectFieldDecl(indirect_field_decl)",
							"IndirectGotoStmt(indirect_goto_stmt)",
							"InjectedClassNameType(injected_class_name_type)",
							"LambdaExpr(lambda_expr)",
							"LinkageSpecDecl(linkage_spec_decl)",
							"LValueReferenceType(l_value_reference_type)",
							"MaterializeTemporaryExpr(materialize_temporary_expr)",
							"MaxFieldAlignmentAttr(max_field_alignment_attr)",
							"MayAliasAttr(may_alias_attr)",
							"MemberPointerType(member_pointer_type)",
							"MinVectorWidthAttr(min_vector_width_attr)",
							"ModeAttr(mode_attr)",
							"NamespaceDecl(namespace_decl)",
							"NoDebugAttr(no_debug_attr)",
							"NoInlineAttr(no_inline_attr)",
							"NonTypeTemplateParmDecl(non_type_template_parm_decl)",
							"OffsetOfExpr(offset_of_expr)",
							"OpaqueValueExpr(opaque_value_expr)",
							"OwnerAttr(owner_attr)",
							"PackedAttr(packed_attr)",
							"PackExpansionExpr(pack_expansion_expr)",
							"PackExpansionType(pack_expansion_type)",
							"ParenType(paren_type)",
							"PointerAttr(pointer_attr)",
							"PointerType(pointer_type)",
							"PredefinedExpr(predefined_expr)",
							"QualType(qual_type)",
							"RecordType(record_type)",
							"ReturnsNonNullAttr(returns_non_null_attr)",
							"RValueReferenceType(r_value_reference_type)",
							"SentinelAttr(sentinel_attr)",
							"ShuffleVectorExpr(shuffle_vector_expr)",
							"SizeOfPackExpr(size_of_pack_expr)",
							"StaticAssertDecl(static_assert_decl)",
							"StmtExpr(stmt_expr)",
							"SubstNonTypeTemplateParmExpr(subst_non_type_template_parm_expr)",
							"SubstTemplateTypeParmType(subst_template_type_parm_type)",
							"TargetAttr(target_attr)",
							"TemplateArgument(template_argument)",
							"TemplateSpecializationType(template_specialization_type)",
							"TemplateTemplateParmDecl(template_template_parm_decl)",
							"TemplateTypeParmDecl(template_type_parm_decl)",
							"TemplateTypeParmType(template_type_parm_type)",
							"TParamCommandComment(t_param_command_comment)",
							"TypeAliasDecl(type_alias_decl)",
							"TypeAliasTemplateDecl(type_alias_template_decl)",
							"TypedefType(typedef_type)",
							"TypeOfExprType(type_of_expr_type)",
							"TypeTraitExpr(type_trait_expr)",
							"UnaryTransformType(unary_transform_type)",
							"UnresolvedUsingValueDecl(unresolved_using_value_decl)",
							"UnusedAttr(unused_attr)",
							"UsingDecl(using_decl)",
							"UsingDirectiveDecl(using_directive_decl)",
							"UsingShadowDecl(using_shadow_decl)",
							"VAArgExpr(va_arg_expr)",
							"VarTemplateDecl(var_template_decl)",
							"VectorType(vector_type)",
							"VerbatimLineComment(verbatim_line_comment)",
							"VisibilityAttr(visibility_attr)",
							"WeakRefAttr(weak_ref_attr)",
							"CXXRecordDecl(cxx_record_decl)",
							"CXXConstructorDecl(cxx_constructor_decl)",
							"n =>",
							"CXXCtorInitializer(cxx_ctor_initializer)",
							"CXXDependentScopeMemberExpr(cxx_dependent_scope_member_expr)",
							"CXXThisExpr(cxx_this_expr)",
							"CXXDestructorDecl(cxx_destructor_decl)",
							"n =>",
							"CXXMethodDecl(cxx_method_decl)",
							"n =>",
							"CXXStaticCastExpr(cxx_static_cast_expr)",
							"CXXUnresolvedConstructExpr(cxx_unresolved_construct_expr)",
							"CXXNewExpr(cxx_new_expr)",
							"CXXDeleteExpr(cxx_delete_expr)",
							"CXXBoolLiteralExpr(cxx_bool_literal_expr)",
							"CXX11NoReturnAttr(cxx11_no_return_attr)",
							"CXXBindTemporaryExpr(cxx_bind_temporary_expr)",
							"CXXCatchStmt(cxx_catch_stmt)",
							"CXXConstructExpr(cxx_construct_expr)",
							"CXXConversionDecl(cxx_conversion_decl)",
							"CXXDefaultArgExpr(cxx_default_arg_expr)",
							"CXXDefaultInitExpr(cxx_default_init_expr)",
							"CXXForRangeStmt(cxx_for_range_stmt)",
							"CXXFunctionalCastExpr(cxx_functional_cast_expr)",
							"CXXMemberCallExpr(cxx_member_call_expr)",
							"CXXNoexceptExpr(cxx_noexcept_expr)",
							"CXXNullPtrLiteralExpr(cxx_null_ptr_literal_expr)",
							"CXXOperatorCallExpr(cxx_operator_call_expr)",
							"CXXReinterpretCastExpr(cxx_reinterpret_cast_expr)",
							"CXXScalarValueInitExpr(cxx_scalar_value_init_expr)",
							"CXXTemporaryObjectExpr(cxx_temporary_object_expr)",
							"CXXTryStmt(cxx_try_stmt)",
							" function PrintNode(node)",
							" function PrintAst(node, ast)",
							"get()",
							" function isNode(obj)",
							" function GetType(name_or_id, ast = globalThis['$']?.data)",
							"n =>",
							" node =>",
							" node =>",
							"r =>",
							" function GetClass(name_or_id, ast = globalThis['$'].data)",
							" n =>",
							"bases()",
							" function* GetBases(node, ast = globalThis['$'].data)",
							" function GetByName(arg, ast = globalThis['$'].data, predicate = () => true)",
							" n =>",
							" function GetNamespace(arg, root = globalThis['$'].data, predicate = () => true)",
							" n =>",
							" function NamespaceOf(node, ast = globalThis['$'].data)",
							"toString()",
							" function GetFields(node)",
							" (v, k) =>",
							" ([v, p]) =>",
							"([loc, ptr]) =>",
							"i =>",
							" function GetParams(node)",
							"child =>",
							" function PathRemoveLoc(path)",
							"p =>"
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				],
				[
					25,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/clang-ast.js",
						"symkeys":
						[
							[
								848,
								861
							],
							[
								940,
								996
							],
							[
								1451,
								1510
							],
							[
								1998,
								2037
							],
							[
								2043,
								2049
							],
							[
								2219,
								2251
							],
							[
								2353,
								2390
							],
							[
								2544,
								2571
							],
							[
								2653,
								2683
							],
							[
								2750,
								2758
							],
							[
								2797,
								2824
							],
							[
								2873,
								2900
							],
							[
								2977,
								2981
							],
							[
								3004,
								3037
							],
							[
								3217,
								3260
							],
							[
								3545,
								3553
							],
							[
								3945,
								3949
							],
							[
								3968,
								3988
							],
							[
								4139,
								4171
							],
							[
								4333,
								4351
							],
							[
								4612,
								4629
							],
							[
								4936,
								4947
							],
							[
								4967,
								4974
							],
							[
								5001,
								5010
							],
							[
								5130,
								5136
							],
							[
								5248,
								5256
							],
							[
								5371,
								5380
							],
							[
								5406,
								5415
							],
							[
								5446,
								5450
							],
							[
								5511,
								5515
							],
							[
								5591,
								5607
							],
							[
								5864,
								5879
							],
							[
								5946,
								5955
							],
							[
								6016,
								6024
							],
							[
								6073,
								6082
							],
							[
								6129,
								6139
							],
							[
								6204,
								6214
							],
							[
								6251,
								6261
							],
							[
								6349,
								6360
							],
							[
								6566,
								6570
							],
							[
								6751,
								6762
							],
							[
								6993,
								6997
							],
							[
								7049,
								7063
							],
							[
								7113,
								7163
							],
							[
								7233,
								7288
							],
							[
								7293,
								7327
							],
							[
								7506,
								7510
							],
							[
								7591,
								7606
							],
							[
								7694,
								7750
							],
							[
								7824,
								7834
							],
							[
								8038,
								8045
							],
							[
								8162,
								8173
							],
							[
								8210,
								8239
							],
							[
								8300,
								8331
							],
							[
								8533,
								8543
							],
							[
								8598,
								8611
							],
							[
								8648,
								8677
							],
							[
								8738,
								8769
							],
							[
								8973,
								8983
							],
							[
								9038,
								9042
							],
							[
								9140,
								9166
							],
							[
								12158,
								12162
							],
							[
								13177,
								13189
							],
							[
								13312,
								13320
							],
							[
								13406,
								13417
							],
							[
								13540,
								13553
							],
							[
								13676,
								13688
							],
							[
								13782,
								13791
							],
							[
								13843,
								13854
							],
							[
								13943,
								13952
							],
							[
								14072,
								14088
							],
							[
								14146,
								14162
							],
							[
								14210,
								14223
							],
							[
								14370,
								14385
							],
							[
								14532,
								14547
							],
							[
								14804,
								14818
							],
							[
								14904,
								14916
							],
							[
								14983,
								14995
							],
							[
								15101,
								15118
							],
							[
								15204,
								15215
							],
							[
								15275,
								15288
							],
							[
								15431,
								15439
							],
							[
								15547,
								15557
							],
							[
								15764,
								15773
							],
							[
								17579,
								17589
							],
							[
								19681,
								19687
							],
							[
								19979,
								19990
							],
							[
								20091,
								20141
							],
							[
								20246,
								20254
							],
							[
								20324,
								20332
							],
							[
								22141,
								22171
							],
							[
								22250,
								22260
							],
							[
								22278,
								22304
							],
							[
								22433,
								22441
							],
							[
								22524,
								22532
							],
							[
								22710,
								22715
							],
							[
								22753,
								22760
							],
							[
								22844,
								22858
							],
							[
								23451,
								23455
							],
							[
								23536,
								23541
							],
							[
								25095,
								25099
							],
							[
								26001,
								26015
							],
							[
								26079,
								26089
							],
							[
								26174,
								26196
							],
							[
								26418,
								26426
							],
							[
								26548,
								26567
							],
							[
								26665,
								26673
							],
							[
								26691,
								26713
							],
							[
								26834,
								26842
							],
							[
								26947,
								26973
							],
							[
								27328,
								27336
							],
							[
								27451,
								27462
							],
							[
								27480,
								27506
							],
							[
								27578,
								27582
							],
							[
								27687,
								27697
							],
							[
								27757,
								27761
							],
							[
								27824,
								27828
							],
							[
								27878,
								27882
							],
							[
								28292,
								28302
							],
							[
								28334,
								28342
							],
							[
								28439,
								28448
							],
							[
								28466,
								28488
							],
							[
								28706,
								28718
							],
							[
								28736,
								28762
							],
							[
								28997,
								29005
							],
							[
								29068,
								29076
							],
							[
								30201,
								30220
							],
							[
								30336,
								30346
							],
							[
								30401,
								30409
							],
							[
								30518,
								30525
							],
							[
								30543,
								30565
							],
							[
								30910,
								30918
							],
							[
								31015,
								31024
							],
							[
								31048,
								31070
							],
							[
								31175,
								31186
							],
							[
								31204,
								31226
							],
							[
								31603,
								31620
							],
							[
								31638,
								31660
							],
							[
								31916,
								31924
							],
							[
								32035,
								32040
							],
							[
								32088,
								32111
							],
							[
								32233,
								32244
							],
							[
								32293,
								32305
							],
							[
								32367,
								32376
							],
							[
								32423,
								32433
							],
							[
								32471,
								32507
							],
							[
								33162,
								33174
							],
							[
								33220,
								33229
							],
							[
								33276,
								33286
							],
							[
								33466,
								33471
							],
							[
								33527,
								33535
							],
							[
								33628,
								33651
							],
							[
								33910,
								33926
							],
							[
								34145,
								34161
							],
							[
								34570,
								34583
							],
							[
								34729,
								34739
							],
							[
								34787,
								34798
							],
							[
								34890,
								34902
							],
							[
								34952,
								34965
							],
							[
								35013,
								35025
							],
							[
								35075,
								35088
							],
							[
								35336,
								35349
							],
							[
								35384,
								35399
							],
							[
								35479,
								35534
							],
							[
								36084,
								36094
							],
							[
								36337,
								36357
							],
							[
								36440,
								36486
							],
							[
								37985,
								38050
							],
							[
								38379,
								38383
							],
							[
								38659,
								38663
							],
							[
								39392,
								39399
							],
							[
								39453,
								39460
							],
							[
								39548,
								39555
							],
							[
								39736,
								39771
							],
							[
								39810,
								39830
							],
							[
								39860,
								39866
							],
							[
								39887,
								39895
							],
							[
								40002,
								40035
							],
							[
								40300,
								40325
							],
							[
								40666,
								40708
							],
							[
								41240,
								41293
							],
							[
								42740,
								42746
							],
							[
								42796,
								42802
							],
							[
								42967,
								42973
							],
							[
								43115,
								43131
							],
							[
								43676,
								43683
							],
							[
								43726,
								43730
							],
							[
								43750,
								43757
							],
							[
								43878,
								43905
							],
							[
								43964,
								43979
							],
							[
								44310,
								44317
							],
							[
								44377,
								44391
							],
							[
								44436,
								44451
							],
							[
								44477,
								44481
							],
							[
								44513,
								44524
							],
							[
								44557,
								44569
							],
							[
								44603,
								44616
							],
							[
								44692,
								44697
							],
							[
								44777,
								44781
							],
							[
								44805,
								44817
							],
							[
								44880,
								44885
							],
							[
								44915,
								44919
							],
							[
								44943,
								44952
							],
							[
								44965,
								44981
							],
							[
								45323,
								45327
							],
							[
								45351,
								45362
							],
							[
								45421,
								45425
							],
							[
								45463,
								45467
							],
							[
								45499,
								45515
							],
							[
								45554,
								45558
							],
							[
								45576,
								45580
							],
							[
								45624,
								45676
							],
							[
								45864,
								45880
							],
							[
								46240,
								46261
							],
							[
								46287,
								46291
							],
							[
								46733,
								46738
							],
							[
								46773,
								46800
							],
							[
								46994,
								47022
							],
							[
								47203,
								47228
							],
							[
								47303,
								47335
							],
							[
								47466,
								47470
							],
							[
								47607,
								47636
							],
							[
								47746,
								47750
							],
							[
								48044,
								48066
							],
							[
								49105,
								49160
							],
							[
								49240,
								49247
							],
							[
								49318,
								49325
							],
							[
								49362,
								49388
							],
							[
								49482,
								49490
							],
							[
								49556,
								49564
							],
							[
								49626,
								49637
							],
							[
								49791,
								49800
							],
							[
								49819,
								49845
							],
							[
								49898,
								49907
							],
							[
								49960,
								49986
							],
							[
								50038,
								50057
							],
							[
								50133,
								50150
							],
							[
								50185,
								50209
							],
							[
								50468,
								50473
							],
							[
								50531,
								50538
							],
							[
								50620,
								50631
							],
							[
								51339,
								51349
							],
							[
								51397,
								51401
							],
							[
								51592,
								51603
							],
							[
								51614,
								51638
							],
							[
								51706,
								51738
							],
							[
								51894,
								51919
							],
							[
								51983,
								52019
							],
							[
								52089,
								52129
							],
							[
								52381,
								52409
							],
							[
								52456,
								52487
							],
							[
								52716,
								52758
							],
							[
								52961,
								52986
							],
							[
								53144,
								53165
							],
							[
								53210,
								53229
							],
							[
								53563,
								53590
							],
							[
								53658,
								53677
							],
							[
								53881,
								53916
							],
							[
								54034,
								54082
							],
							[
								54328,
								54355
							],
							[
								54973,
								55014
							],
							[
								55252,
								55279
							],
							[
								55422,
								55443
							],
							[
								55504,
								55531
							],
							[
								55576,
								55608
							],
							[
								55858,
								55884
							],
							[
								56078,
								56097
							],
							[
								56759,
								56784
							],
							[
								56832,
								56863
							],
							[
								56930,
								56945
							],
							[
								57140,
								57161
							],
							[
								57278,
								57314
							],
							[
								57534,
								57553
							],
							[
								57957,
								57978
							],
							[
								58195,
								58228
							],
							[
								58288,
								58311
							],
							[
								58374,
								58391
							],
							[
								58511,
								58515
							],
							[
								59342,
								59367
							],
							[
								59574,
								59601
							],
							[
								60066,
								60070
							],
							[
								60281,
								60297
							],
							[
								60508,
								60527
							],
							[
								60648,
								60653
							],
							[
								60991,
								61030
							],
							[
								61129,
								61172
							],
							[
								61382,
								61397
							],
							[
								61663,
								61699
							],
							[
								61795,
								61823
							],
							[
								62093,
								62137
							],
							[
								62199,
								62230
							],
							[
								62289,
								62310
							],
							[
								62369,
								62392
							],
							[
								62815,
								62841
							],
							[
								62909,
								62935
							],
							[
								62999,
								63018
							],
							[
								63060,
								63095
							],
							[
								63269,
								63311
							],
							[
								63496,
								63517
							],
							[
								63693,
								63723
							],
							[
								63943,
								63969
							],
							[
								64398,
								64417
							],
							[
								64478,
								64501
							],
							[
								65036,
								65063
							],
							[
								65113,
								65136
							],
							[
								65293,
								65329
							],
							[
								65399,
								65428
							],
							[
								65486,
								65509
							],
							[
								65687,
								65712
							],
							[
								65796,
								65838
							],
							[
								65937,
								65962
							],
							[
								66266,
								66321
							],
							[
								66575,
								66604
							],
							[
								66855,
								66899
							],
							[
								67031,
								67075
							],
							[
								67162,
								67190
							],
							[
								67334,
								67358
							],
							[
								67606,
								67650
							],
							[
								67972,
								68025
							],
							[
								68124,
								68169
							],
							[
								68244,
								68263
							],
							[
								68324,
								68345
							],
							[
								68522,
								68549
							],
							[
								68598,
								68628
							],
							[
								68640,
								68661
							],
							[
								68673,
								68705
							],
							[
								68847,
								68877
							],
							[
								68889,
								68930
							],
							[
								68942,
								68981
							],
							[
								68993,
								69016
							],
							[
								69028,
								69051
							],
							[
								69063,
								69082
							],
							[
								69094,
								69136
							],
							[
								69148,
								69173
							],
							[
								69185,
								69212
							],
							[
								69224,
								69262
							],
							[
								69274,
								69356
							],
							[
								69368,
								69435
							],
							[
								69447,
								69472
							],
							[
								69484,
								69526
							],
							[
								69711,
								69749
							],
							[
								69761,
								69818
							],
							[
								69830,
								69868
							],
							[
								69880,
								69905
							],
							[
								69917,
								69944
							],
							[
								69956,
								69994
							],
							[
								70006,
								70062
							],
							[
								70156,
								70207
							],
							[
								70219,
								70294
							],
							[
								70306,
								70337
							],
							[
								70349,
								70368
							],
							[
								70380,
								70416
							],
							[
								70512,
								70533
							],
							[
								70545,
								70575
							],
							[
								70587,
								70610
							],
							[
								70622,
								70665
							],
							[
								70677,
								70715
							],
							[
								70727,
								70771
							],
							[
								70783,
								70807
							],
							[
								70924,
								70954
							],
							[
								70966,
								70992
							],
							[
								71036,
								71083
							],
							[
								71095,
								71137
							],
							[
								71149,
								71187
							],
							[
								71199,
								71235
							],
							[
								71247,
								71294
							],
							[
								71306,
								71329
							],
							[
								71341,
								71375
							],
							[
								71583,
								71626
							],
							[
								71638,
								71690
							],
							[
								71794,
								71841
							],
							[
								71853,
								71881
							],
							[
								71893,
								71931
							],
							[
								71943,
								71984
							],
							[
								71996,
								72015
							],
							[
								72027,
								72056
							],
							[
								72068,
								72094
							],
							[
								72106,
								72134
							],
							[
								72146,
								72198
							],
							[
								72210,
								72238
							],
							[
								72250,
								72284
							],
							[
								72416,
								72437
							],
							[
								72449,
								72472
							],
							[
								72484,
								72522
							],
							[
								72534,
								72572
							],
							[
								72584,
								72605
							],
							[
								72617,
								72642
							],
							[
								72654,
								72679
							],
							[
								72691,
								72722
							],
							[
								72809,
								72828
							],
							[
								72840,
								72863
							],
							[
								72875,
								72916
							],
							[
								72928,
								72971
							],
							[
								72983,
								73010
							],
							[
								73022,
								73060
							],
							[
								73072,
								73105
							],
							[
								73117,
								73153
							],
							[
								73165,
								73184
							],
							[
								73250,
								73313
							],
							[
								73325,
								73381
							],
							[
								73393,
								73416
							],
							[
								73428,
								73463
							],
							[
								73475,
								73531
							],
							[
								73543,
								73596
							],
							[
								73608,
								73653
							],
							[
								73665,
								73710
							],
							[
								73722,
								73767
							],
							[
								73779,
								73809
							],
							[
								73821,
								73868
							],
							[
								73880,
								73905
							],
							[
								73917,
								73950
							],
							[
								73962,
								73992
							],
							[
								74004,
								74044
							],
							[
								74056,
								74109
							],
							[
								74121,
								74144
							],
							[
								74156,
								74177
							],
							[
								74189,
								74229
							],
							[
								74241,
								74275
							],
							[
								74287,
								74309
							],
							[
								74321,
								74355
							],
							[
								74367,
								74390
							],
							[
								74402,
								74444
							],
							[
								74456,
								74487
							],
							[
								74499,
								74525
							],
							[
								74538,
								74568
							],
							[
								75142,
								75182
							],
							[
								75404,
								75408
							],
							[
								76561,
								76601
							],
							[
								76984,
								77044
							],
							[
								77480,
								77506
							],
							[
								77614,
								77652
							],
							[
								77860,
								77864
							],
							[
								78163,
								78193
							],
							[
								78664,
								78668
							],
							[
								79332,
								79371
							],
							[
								80035,
								80092
							],
							[
								80413,
								80437
							],
							[
								80910,
								80940
							],
							[
								81204,
								81245
							],
							[
								81380,
								81419
							],
							[
								81431,
								81476
							],
							[
								81488,
								81516
							],
							[
								81528,
								81564
							],
							[
								81708,
								81746
							],
							[
								81758,
								81797
							],
							[
								81809,
								81850
							],
							[
								81862,
								81897
							],
							[
								81909,
								81956
							],
							[
								81968,
								82007
							],
							[
								82020,
								82054
							],
							[
								82066,
								82114
							],
							[
								82126,
								82169
							],
							[
								82181,
								82230
							],
							[
								82242,
								82292
							],
							[
								82304,
								82353
							],
							[
								82607,
								82631
							],
							[
								82688,
								82713
							],
							[
								83092,
								83121
							],
							[
								83314,
								83319
							],
							[
								83594,
								83615
							],
							[
								83682,
								83740
							],
							[
								83886,
								83890
							],
							[
								84494,
								84502
							],
							[
								84564,
								84572
							],
							[
								84692,
								84696
							],
							[
								84949,
								85007
							],
							[
								85109,
								85114
							],
							[
								85504,
								85511
							],
							[
								85700,
								85753
							],
							[
								85990,
								86066
							],
							[
								86228,
								86233
							],
							[
								86399,
								86479
							],
							[
								86606,
								86614
							],
							[
								86964,
								87019
							],
							[
								87353,
								87363
							],
							[
								87429,
								87454
							],
							[
								87492,
								87502
							],
							[
								87568,
								87583
							],
							[
								87661,
								87676
							],
							[
								87715,
								87719
							],
							[
								87799,
								87824
							],
							[
								87863,
								87871
							],
							[
								87913,
								87942
							],
							[
								87972,
								87976
							]
						],
						"symlist":
						[
							" (ast, r) =>",
							" function DeepFind(ast, pred, flags = deep.RETURN_VALUE)",
							" function* DeepSelect(ast, pred, flags = deep.RETURN_VALUE)",
							" function DeepCachePath(ast, path, m = ",
							"(ast))",
							" function DeepPathOf(ast, value)",
							" function DeepGet(ast, path, ...args)",
							"function FileTime(filename)",
							"function Newer(file, ...other)",
							"other =>",
							"function Older(file, other)",
							"function GetSubscripts(str)",
							"m =>",
							"function TrimSubscripts(str, sub)",
							" function nameOrIdPred(name_or_id, ...args)",
							" node =>",
							"List",
							"constructor(...args)",
							"filter(callback, thisArg = null)",
							"callback = elem =>",
							"slice(start, end)",
							"get first()",
							"elem =>",
							"entries()",
							"keys()",
							"values()",
							"toArray()",
							"(a, n) =>",
							"List",
							"Node",
							"constructor(ast)",
							"static get(ast)",
							"get ast()",
							"get id()",
							"get loc()",
							"get file()",
							" (v, k) =>",
							" (v, k) =>",
							"get range()",
							"r =>",
							"toJSON(obj)",
							"Node",
							"(node, ast) =>",
							" function PathOf(node, ast = globalThis['$'].data)",
							" function* Hier(node_or_path, t = (p, ast, abort) => p.",
							"(ast), ast = globalThis['$'].data)",
							"p =>",
							"abortFn = () =>",
							" function FindType(typeName, ast = globalThis['$'].data)",
							"([tok]) =>",
							"node =>",
							"PointerType",
							"constructor(pointee, ast, ns)",
							"static fromString(str, ast, ns)",
							"toString()",
							"ReferenceType",
							"constructor(pointee, ast, ns)",
							"static fromString(str, ast, ns)",
							"toString()",
							"Type",
							"constructor(node, ast, ns)",
							"n =>",
							"get regExp()",
							"isEnum()",
							"isPointer()",
							"isReference()",
							"isFunction()",
							"isArray()",
							"isInteger()",
							"arrayOf()",
							"get subscripts()",
							"trimSubscripts()",
							"get pointer()",
							"get reference()",
							"getPointer(ast)",
							"get unsigned()",
							"get signed()",
							"isCompound()",
							"isFloatingPoint()",
							"get alias()",
							"get aliases()",
							"isEnum()",
							"isString()",
							"get ffi()",
							"get size()",
							"toJS()",
							"toJSON(obj)",
							"static get(name_or_id, ast = globalThis['$'].data)",
							" node =>",
							" node =>",
							"function RoundTo(value, align)",
							"RecordDecl",
							"constructor(node, ast, ns)",
							"child =>",
							"child =>",
							"() =>",
							"node =>",
							"(acc, node) =>",
							"i =>",
							" n =>",
							"n =>",
							"([name, t]) =>",
							"get size()",
							"(acc, [name, type]) =>",
							"toJSON()",
							"([name, member]) =>",
							"EnumDecl",
							"constructor(node, ast)",
							"child =>",
							"({ name, type, inner }) =>",
							"toJSON()",
							"TypedefDecl",
							"constructor(node, ast, ns)",
							"n =>",
							" (v, k) =>",
							"n =>",
							"n =>",
							"n =>",
							"get size()",
							"toJSON()",
							"FieldDecl",
							"constructor(node, ast)",
							"FunctionDecl",
							"constructor(node, ast, ns)",
							"child =>",
							"child =>",
							"({ name, type }) =>",
							"isMethod()",
							"toJSON()",
							"VarDecl",
							"constructor(node, ast)",
							"toJSON()",
							"ClassDecl",
							"constructor(node, ast)",
							"BuiltinType",
							"constructor(node, ast)",
							"ConstantArrayType",
							"constructor(node, ast)",
							"toJSON()",
							"Range",
							"constructor(begin, end)",
							"get begin()",
							"set begin(v)",
							"get end()",
							"set end(v)",
							"toString(opts = { printFile: true })",
							"get length()",
							"toArray()",
							"toObject()",
							"Range",
							"Location",
							"static at(file, offset)",
							"static from(loc)",
							"constructor(loc)",
							"update(other)",
							"get line()",
							"set line(v)",
							"get column()",
							"set column(v)",
							"get offset()",
							"set offset(v)",
							" (t, ...c) =>",
							"'\\x1b[m' : t =>",
							"toString(opts = { printFile: true, onlyOffset: false })",
							"toObject()",
							"localeCompare(other)",
							" function TypeFactory(node, ast, cache = true)",
							"async function SpawnCompiler(compiler, input, outfile, args = [])",
							"p =>",
							"p =>",
							"line =>",
							"line =>",
							"line =>",
							" function PipeReader(fd, callback)",
							"(resolve, reject) =>",
							" () =>",
							" data =>",
							" function ReadPipe(fd, callback)",
							" function ReadOutput(fd)",
							"async function SourceDependencies(...args)",
							"async function AstDump(compiler, source, args, force)",
							"size()",
							"json()",
							"data()",
							"SetFile = loc =>",
							"files()",
							"n =>",
							"file =>",
							"pred2 = (used, implicit) =>",
							" node =>",
							"types()",
							" n =>",
							" () =>",
							"List",
							"functions()",
							" n =>",
							" () =>",
							" n =>",
							"List",
							"namespaces()",
							" n =>",
							"List",
							"classes()",
							"predicate = n =>",
							"List",
							"variables()",
							"n =>",
							"List",
							"names(depth = 1)",
							"n =>",
							"n =>",
							" function NameFor(decl, ast = globalThis['$']?.data)",
							" (value, key) =>",
							" function NodeType(n)",
							"t =>",
							" n =>",
							" function NodeName(n, name)",
							" function* RawLocation(path)",
							" function* RawRange(path)",
							" function CompleteLocation(path)",
							"l =>",
							" function CompleteRange(path)",
							"l =>",
							" function GetLoc(node)",
							" function GetTypeNode(node, ast = globalThis['$'].data)",
							"node =>",
							"node =>",
							" function GetTypeStr(node)",
							"inner =>",
							"inner =>",
							"([n, t]) =>",
							"NodeError",
							"constructor(message, node)",
							"NodeError",
							" function NodePrinter(ast)",
							" function put(str)",
							" function trim()",
							"printer = function(node)",
							"get()",
							"value()",
							"value(node)",
							"toString()",
							"i =>",
							"NodePrinter",
							"AbiTagAttr(abi_tag_attr)",
							"AccessSpecDecl(access_spec_decl)",
							"AlignedAttr(aligned_attr)",
							"AlwaysInlineAttr(always_inline_attr)",
							"ArraySubscriptExpr(array_subscript_expr)",
							"AsmLabelAttr(asm_label_attr)",
							"BinaryOperator(binary_operator)",
							"BlockCommandComment(block_command_comment)",
							"BuiltinAttr(builtin_attr)",
							"BreakStmt(break_stmt)",
							"CallExpr(call_expr)",
							"RecoveryExpr(recovery_expr)",
							"CaseStmt(case_stmt)",
							"CharacterLiteral(character_literal)",
							"CompoundAssignOperator(compound_assign_operator)",
							"CompoundStmt(compound_stmt)",
							"ConditionalOperator(conditional_operator)",
							"ConstantExpr(constant_expr)",
							"ConstAttr(const_attr)",
							"ContinueStmt(continue_stmt)",
							"CStyleCastExpr(cstyle_cast_expr)",
							"DeclRefExpr(decl_ref_expr)",
							"DeclStmt(decl_stmt)",
							"DefaultStmt(default_stmt)",
							"DeprecatedAttr(deprecated_attr)",
							"DoStmt(do_stmt)",
							"EmptyDecl(empty_decl)",
							"EnumConstantDecl(enum_constant_decl)",
							"EnumDecl(enum_decl)",
							"FieldDecl(field_decl)",
							"FloatingLiteral(floating_literal)",
							"FormatAttr(format_attr)",
							"ForStmt(for_stmt)",
							"n =>",
							"FullComment(full_comment)",
							"FunctionDecl(function_decl)",
							"n =>",
							" n =>",
							"GotoStmt(goto_stmt)",
							" n =>",
							"HTMLEndTagComment(html_end_tag_comment)",
							"HTMLStartTagComment(html_start_tag_comment)",
							"IfStmt(if_stmt)",
							"ImplicitCastExpr(implicit_cast_expr)",
							"InitListExpr(init_list_expr)",
							"InlineCommandComment(inline_command_comment)",
							"IntegerLiteral(integer_literal)",
							"LabelStmt(label_stmt)",
							"MemberExpr(member_expr)",
							"NonNullAttr(non_null_attr)",
							"NoThrowAttr(no_throw_attr)",
							"NullStmt(null_stmt)",
							"ParagraphComment(paragraph_comment)",
							"ParamCommandComment(param_command_comment)",
							"ParenExpr(paren_expr)",
							"ParenListExpr(paren_list_expr)",
							"ParmVarDecl(parm_var_decl)",
							"PureAttr(pure_attr)",
							"RecordDecl(record_decl)",
							"RestrictAttr(restrict_attr)",
							"ReturnStmt(return_stmt)",
							"ReturnsTwiceAttr(returns_twice_attr)",
							"StringLiteral(string_literal)",
							"SwitchStmt(switch_stmt)",
							"TextComment(text_comment)",
							"TranslationUnitDecl(translation_unit_decl)",
							"TypedefDecl(typedef_decl)",
							"UnaryExprOrTypeTraitExpr(unary_expr_or_type_trait_expr)",
							"UnaryOperator(unary_operator)",
							"UnresolvedLookupExpr(unresolved_lookup_expr)",
							"UnresolvedMemberExpr(unresolved_member_expr)",
							"VarDecl(var_decl, base_type)",
							"([offset, subscript]) =>",
							"VerbatimBlockComment(verbatim_block_comment)",
							"VerbatimBlockLineComment(verbatim_block_line_comment)",
							"WarnUnusedResultAttr(warn_unused_result_attr)",
							"WeakAttr(weak_attr)",
							"WhileStmt(while_stmt)",
							"OverrideAttr(override_attr)",
							"AddrLabelExpr(addr_label_expr)",
							"AliasAttr(alias_attr)",
							"AlignValueAttr(align_value_attr)",
							"AllocSizeAttr(alloc_size_attr)",
							"ArrayInitIndexExpr(array_init_index_expr)",
							"ArrayInitLoopExpr(array_init_loop_expr)",
							"AtomicExpr(atomic_expr)",
							"AtomicType(atomic_type)",
							"AutoType(auto_type)",
							"BuiltinTemplateDecl(builtin_template_decl)",
							"BuiltinType(builtin_type)",
							"CallbackAttr(callback_attr)",
							"ClassTemplateDecl(class_template_decl)",
							"ClassTemplatePartialSpecializationDecl(class_template_partial_specialization_decl)",
							"ClassTemplateSpecializationDecl(class_template_specialization_decl)",
							"ComplexType(complex_type)",
							"CompoundLiteralExpr(compound_literal_expr)",
							"ConstantArrayType(constant_array_type)",
							"ConstructorUsingShadowDecl(constructor_using_shadow_decl)",
							"ConvertVectorExpr(convert_vector_expr)",
							"DecayedType(decayed_type)",
							"DecltypeType(decltype_type)",
							"DependentNameType(dependent_name_type)",
							"DependentScopeDeclRefExpr(dependent_scope_decl_ref_expr)",
							"DependentSizedArrayType(dependent_sized_array_type)",
							"DependentTemplateSpecializationType(dependent_template_specialization_type)",
							"ElaboratedType(elaborated_type)",
							"EnumType(enum_type)",
							"ExprWithCleanups(expr_with_cleanups)",
							"FinalAttr(final_attr)",
							"FormatArgAttr(format_arg_attr)",
							"FriendDecl(friend_decl)",
							"FunctionNoProtoType(function_no_proto_type)",
							"FunctionProtoType(function_proto_type)",
							"FunctionTemplateDecl(function_template_decl)",
							"GCCAsmStmt(gcc_asm_stmt)",
							"GNUInlineAttr(gnu_inline_attr)",
							"GNUNullExpr(gnu_null_expr)",
							"ImplicitValueInitExpr(implicit_value_init_expr)",
							"IncompleteArrayType(incomplete_array_type)",
							"IndirectFieldDecl(indirect_field_decl)",
							"IndirectGotoStmt(indirect_goto_stmt)",
							"InjectedClassNameType(injected_class_name_type)",
							"LambdaExpr(lambda_expr)",
							"LinkageSpecDecl(linkage_spec_decl)",
							"LValueReferenceType(l_value_reference_type)",
							"MaterializeTemporaryExpr(materialize_temporary_expr)",
							"MaxFieldAlignmentAttr(max_field_alignment_attr)",
							"MayAliasAttr(may_alias_attr)",
							"MemberPointerType(member_pointer_type)",
							"MinVectorWidthAttr(min_vector_width_attr)",
							"ModeAttr(mode_attr)",
							"NamespaceDecl(namespace_decl)",
							"NoDebugAttr(no_debug_attr)",
							"NoInlineAttr(no_inline_attr)",
							"NonTypeTemplateParmDecl(non_type_template_parm_decl)",
							"OffsetOfExpr(offset_of_expr)",
							"OpaqueValueExpr(opaque_value_expr)",
							"OwnerAttr(owner_attr)",
							"PackedAttr(packed_attr)",
							"PackExpansionExpr(pack_expansion_expr)",
							"PackExpansionType(pack_expansion_type)",
							"ParenType(paren_type)",
							"PointerAttr(pointer_attr)",
							"PointerType(pointer_type)",
							"PredefinedExpr(predefined_expr)",
							"QualType(qual_type)",
							"RecordType(record_type)",
							"ReturnsNonNullAttr(returns_non_null_attr)",
							"RValueReferenceType(r_value_reference_type)",
							"SentinelAttr(sentinel_attr)",
							"ShuffleVectorExpr(shuffle_vector_expr)",
							"SizeOfPackExpr(size_of_pack_expr)",
							"StaticAssertDecl(static_assert_decl)",
							"StmtExpr(stmt_expr)",
							"SubstNonTypeTemplateParmExpr(subst_non_type_template_parm_expr)",
							"SubstTemplateTypeParmType(subst_template_type_parm_type)",
							"TargetAttr(target_attr)",
							"TemplateArgument(template_argument)",
							"TemplateSpecializationType(template_specialization_type)",
							"TemplateTemplateParmDecl(template_template_parm_decl)",
							"TemplateTypeParmDecl(template_type_parm_decl)",
							"TemplateTypeParmType(template_type_parm_type)",
							"TParamCommandComment(t_param_command_comment)",
							"TypeAliasDecl(type_alias_decl)",
							"TypeAliasTemplateDecl(type_alias_template_decl)",
							"TypedefType(typedef_type)",
							"TypeOfExprType(type_of_expr_type)",
							"TypeTraitExpr(type_trait_expr)",
							"UnaryTransformType(unary_transform_type)",
							"UnresolvedUsingValueDecl(unresolved_using_value_decl)",
							"UnusedAttr(unused_attr)",
							"UsingDecl(using_decl)",
							"UsingDirectiveDecl(using_directive_decl)",
							"UsingShadowDecl(using_shadow_decl)",
							"VAArgExpr(va_arg_expr)",
							"VarTemplateDecl(var_template_decl)",
							"VectorType(vector_type)",
							"VerbatimLineComment(verbatim_line_comment)",
							"VisibilityAttr(visibility_attr)",
							"WeakRefAttr(weak_ref_attr)",
							"CXXRecordDecl(cxx_record_decl)",
							"CXXConstructorDecl(cxx_constructor_decl)",
							"n =>",
							"CXXCtorInitializer(cxx_ctor_initializer)",
							"CXXDependentScopeMemberExpr(cxx_dependent_scope_member_expr)",
							"CXXThisExpr(cxx_this_expr)",
							"CXXDestructorDecl(cxx_destructor_decl)",
							"n =>",
							"CXXMethodDecl(cxx_method_decl)",
							"n =>",
							"CXXStaticCastExpr(cxx_static_cast_expr)",
							"CXXUnresolvedConstructExpr(cxx_unresolved_construct_expr)",
							"CXXNewExpr(cxx_new_expr)",
							"CXXDeleteExpr(cxx_delete_expr)",
							"CXXBoolLiteralExpr(cxx_bool_literal_expr)",
							"CXX11NoReturnAttr(cxx11_no_return_attr)",
							"CXXBindTemporaryExpr(cxx_bind_temporary_expr)",
							"CXXCatchStmt(cxx_catch_stmt)",
							"CXXConstructExpr(cxx_construct_expr)",
							"CXXConversionDecl(cxx_conversion_decl)",
							"CXXDefaultArgExpr(cxx_default_arg_expr)",
							"CXXDefaultInitExpr(cxx_default_init_expr)",
							"CXXForRangeStmt(cxx_for_range_stmt)",
							"CXXFunctionalCastExpr(cxx_functional_cast_expr)",
							"CXXMemberCallExpr(cxx_member_call_expr)",
							"CXXNoexceptExpr(cxx_noexcept_expr)",
							"CXXNullPtrLiteralExpr(cxx_null_ptr_literal_expr)",
							"CXXOperatorCallExpr(cxx_operator_call_expr)",
							"CXXReinterpretCastExpr(cxx_reinterpret_cast_expr)",
							"CXXScalarValueInitExpr(cxx_scalar_value_init_expr)",
							"CXXTemporaryObjectExpr(cxx_temporary_object_expr)",
							"CXXTryStmt(cxx_try_stmt)",
							" function PrintNode(node)",
							" function PrintAst(node, ast)",
							"get()",
							" function isNode(obj)",
							" function GetType(name_or_id, ast = globalThis['$']?.data)",
							"n =>",
							" node =>",
							" node =>",
							"r =>",
							" function GetClass(name_or_id, ast = globalThis['$'].data)",
							" n =>",
							"bases()",
							" function* GetBases(node, ast = globalThis['$'].data)",
							" function GetByName(arg, ast = globalThis['$'].data, predicate = () => true)",
							" n =>",
							" function GetNamespace(arg, root = globalThis['$'].data, predicate = () => true)",
							" n =>",
							" function NamespaceOf(node, ast = globalThis['$'].data)",
							"toString()",
							" function GetFields(node)",
							" (v, k) =>",
							" ([v, p]) =>",
							"([loc, ptr]) =>",
							"i =>",
							" function GetParams(node)",
							"child =>",
							" function PathRemoveLoc(path)",
							"p =>"
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				],
				[
					26,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				],
				[
					27,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/io-helpers.js",
						"symkeys":
						[
							[
								315,
								339
							],
							[
								533,
								570
							],
							[
								601,
								607
							],
							[
								673,
								686
							],
							[
								717,
								745
							],
							[
								989,
								1011
							],
							[
								1094,
								1127
							],
							[
								1209,
								1221
							],
							[
								1589,
								1621
							],
							[
								1687,
								1717
							],
							[
								1820,
								1851
							],
							[
								1919,
								1932
							],
							[
								2152,
								2160
							],
							[
								2245,
								2273
							],
							[
								2443,
								2484
							],
							[
								2706,
								2750
							],
							[
								2850,
								2881
							],
							[
								3248,
								3291
							],
							[
								3432,
								3480
							],
							[
								3793,
								3825
							],
							[
								3932,
								3972
							],
							[
								4134,
								4163
							],
							[
								4284,
								4317
							],
							[
								4378,
								4414
							],
							[
								4482,
								4509
							],
							[
								4562,
								4603
							],
							[
								4629,
								4638
							],
							[
								4680,
								4705
							],
							[
								4831,
								4841
							],
							[
								4959,
								4964
							],
							[
								5064,
								5074
							],
							[
								5151,
								5166
							],
							[
								5237,
								5251
							],
							[
								5371,
								5418
							],
							[
								5826,
								5857
							],
							[
								6285,
								6315
							],
							[
								6347,
								6365
							],
							[
								6497,
								6503
							]
						],
						"symlist":
						[
							" function IfDebug(token)",
							" function LogIfDebug(token, loggerFn)",
							" () =>",
							" (...args) =>",
							" function ReadFd(fd, binary)",
							" function IsStdio(obj)",
							" function ReadClose(file, binary)",
							"function* ()",
							" function ReadFile(name, binary)",
							" function ReadAny(obj, binary)",
							" function LoadHistory(filename)",
							"parse = () =>",
							"entry =>",
							" function ReadJSON(filename)",
							"async function ReadXML(filename, ...args)",
							"async function WriteXML(name, data, ...args)",
							" function WriteFile(file, data)",
							" function WriteFd(fd, data, offset, length)",
							" function WriteClose(file, data, offset, length)",
							" function WriteAny(obj, ...args)",
							" function WriteJSON(name, data, ...args)",
							" function ReadBJSON(filename)",
							" function WriteBJSON(name, value)",
							" function* Filter(gen, regEx = /.*/)",
							" function FilterImages(gen)",
							" function SortFiles(arr, field = 'ctime')",
							"(a, b) =>",
							" function* StatFiles(gen)",
							"toString()",
							"() =>",
							"toString()",
							"get landscape()",
							"get portrait()",
							"async function* FdReader(fd, bufferSize = 1024)",
							" function CopyToClipboard(text)",
							" function LogCall(fn, thisObj)",
							" function(...args)",
							"arg =>"
						]
					},
					"AQAAAAAAAAAAAAAA8AIAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					28,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADwAgAASWZEZWJ1Zyh0b2tlbikKTG9nSWZEZWJ1Zyh0b2tlbiwgbG9nZ2VyRm4pCigpID0+CiguLi5hcmdzKSA9PgpSZWFkRmQoZmQsIGJpbmFyeSkKSXNTdGRpbyhvYmopClJlYWRDbG9zZShmaWxlLCBiaW5hcnkpCigpClJlYWRGaWxlKG5hbWUsIGJpbmFyeSkKUmVhZEFueShvYmosIGJpbmFyeSkKTG9hZEhpc3RvcnkoZmlsZW5hbWUpCiAgcGFyc2UgPSAoKSA9PgogIGVudHJ5ID0+ClJlYWRKU09OKGZpbGVuYW1lKQpSZWFkWE1MKGZpbGVuYW1lLCAuLi5hcmdzKQpXcml0ZVhNTChuYW1lLCBkYXRhLCAuLi5hcmdzKQpXcml0ZUZpbGUoZmlsZSwgZGF0YSkKV3JpdGVGZChmZCwgZGF0YSwgb2Zmc2V0LCBsZW5ndGgpCldyaXRlQ2xvc2UoZmlsZSwgZGF0YSwgb2Zmc2V0LCBsZW5ndGgpCldyaXRlQW55KG9iaiwgLi4uYXJncykKV3JpdGVKU09OKG5hbWUsIGRhdGEsIC4uLmFyZ3MpClJlYWRCSlNPTihmaWxlbmFtZSkKV3JpdGVCSlNPTihuYW1lLCB2YWx1ZSkKRmlsdGVyKGdlbiwgcmVnRXggPSAvLiovKQpGaWx0ZXJJbWFnZXMoZ2VuKQpTb3J0RmlsZXMoYXJyLCBmaWVsZCA9ICdjdGltZScpCihhLCBiKSA9PgpTdGF0RmlsZXMoZ2VuKQogIHRvU3RyaW5nKCkKKCkgPT4KICB0b1N0cmluZygpCiAgZ2V0IGxhbmRzY2FwZSgpCiAgZ2V0IHBvcnRyYWl0KCkKRmRSZWFkZXIoZmQsIGJ1ZmZlclNpemUgPSAxMDI0KQpDb3B5VG9DbGlwYm9hcmQodGV4dCkKTG9nQ2FsbChmbiwgdGhpc09iaikKZnVuY3Rpb24oLi4uYXJncykKICBhcmcgPT4AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					29,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/io-helpers.js",
						"symkeys":
						[
							[
								315,
								339
							],
							[
								533,
								570
							],
							[
								601,
								607
							],
							[
								673,
								686
							],
							[
								717,
								745
							],
							[
								989,
								1011
							],
							[
								1094,
								1127
							],
							[
								1209,
								1221
							],
							[
								1589,
								1621
							],
							[
								1687,
								1717
							],
							[
								1820,
								1851
							],
							[
								1919,
								1932
							],
							[
								2152,
								2160
							],
							[
								2245,
								2273
							],
							[
								2443,
								2484
							],
							[
								2706,
								2750
							],
							[
								2850,
								2881
							],
							[
								3248,
								3291
							],
							[
								3432,
								3480
							],
							[
								3793,
								3825
							],
							[
								3932,
								3972
							],
							[
								4134,
								4163
							],
							[
								4284,
								4317
							],
							[
								4378,
								4414
							],
							[
								4482,
								4509
							],
							[
								4562,
								4603
							],
							[
								4629,
								4638
							],
							[
								4680,
								4705
							],
							[
								4831,
								4841
							],
							[
								4959,
								4964
							],
							[
								5064,
								5074
							],
							[
								5151,
								5166
							],
							[
								5237,
								5251
							],
							[
								5371,
								5418
							],
							[
								5826,
								5857
							],
							[
								6285,
								6315
							],
							[
								6347,
								6365
							],
							[
								6497,
								6503
							]
						],
						"symlist":
						[
							" function IfDebug(token)",
							" function LogIfDebug(token, loggerFn)",
							" () =>",
							" (...args) =>",
							" function ReadFd(fd, binary)",
							" function IsStdio(obj)",
							" function ReadClose(file, binary)",
							"function* ()",
							" function ReadFile(name, binary)",
							" function ReadAny(obj, binary)",
							" function LoadHistory(filename)",
							"parse = () =>",
							"entry =>",
							" function ReadJSON(filename)",
							"async function ReadXML(filename, ...args)",
							"async function WriteXML(name, data, ...args)",
							" function WriteFile(file, data)",
							" function WriteFd(fd, data, offset, length)",
							" function WriteClose(file, data, offset, length)",
							" function WriteAny(obj, ...args)",
							" function WriteJSON(name, data, ...args)",
							" function ReadBJSON(filename)",
							" function WriteBJSON(name, value)",
							" function* Filter(gen, regEx = /.*/)",
							" function FilterImages(gen)",
							" function SortFiles(arr, field = 'ctime')",
							"(a, b) =>",
							" function* StatFiles(gen)",
							"toString()",
							"() =>",
							"toString()",
							"get landscape()",
							"get portrait()",
							"async function* FdReader(fd, bufferSize = 1024)",
							" function CopyToClipboard(text)",
							" function LogCall(fn, thisObj)",
							" function(...args)",
							"arg =>"
						]
					},
					"AQAAAAAAAAAAAAAA8AIAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					30,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADwAgAASWZEZWJ1Zyh0b2tlbikKTG9nSWZEZWJ1Zyh0b2tlbiwgbG9nZ2VyRm4pCigpID0+CiguLi5hcmdzKSA9PgpSZWFkRmQoZmQsIGJpbmFyeSkKSXNTdGRpbyhvYmopClJlYWRDbG9zZShmaWxlLCBiaW5hcnkpCigpClJlYWRGaWxlKG5hbWUsIGJpbmFyeSkKUmVhZEFueShvYmosIGJpbmFyeSkKTG9hZEhpc3RvcnkoZmlsZW5hbWUpCiAgcGFyc2UgPSAoKSA9PgogIGVudHJ5ID0+ClJlYWRKU09OKGZpbGVuYW1lKQpSZWFkWE1MKGZpbGVuYW1lLCAuLi5hcmdzKQpXcml0ZVhNTChuYW1lLCBkYXRhLCAuLi5hcmdzKQpXcml0ZUZpbGUoZmlsZSwgZGF0YSkKV3JpdGVGZChmZCwgZGF0YSwgb2Zmc2V0LCBsZW5ndGgpCldyaXRlQ2xvc2UoZmlsZSwgZGF0YSwgb2Zmc2V0LCBsZW5ndGgpCldyaXRlQW55KG9iaiwgLi4uYXJncykKV3JpdGVKU09OKG5hbWUsIGRhdGEsIC4uLmFyZ3MpClJlYWRCSlNPTihmaWxlbmFtZSkKV3JpdGVCSlNPTihuYW1lLCB2YWx1ZSkKRmlsdGVyKGdlbiwgcmVnRXggPSAvLiovKQpGaWx0ZXJJbWFnZXMoZ2VuKQpTb3J0RmlsZXMoYXJyLCBmaWVsZCA9ICdjdGltZScpCihhLCBiKSA9PgpTdGF0RmlsZXMoZ2VuKQogIHRvU3RyaW5nKCkKKCkgPT4KICB0b1N0cmluZygpCiAgZ2V0IGxhbmRzY2FwZSgpCiAgZ2V0IHBvcnRyYWl0KCkKRmRSZWFkZXIoZmQsIGJ1ZmZlclNpemUgPSAxMDI0KQpDb3B5VG9DbGlwYm9hcmQodGV4dCkKTG9nQ2FsbChmbiwgdGhpc09iaikKZnVuY3Rpb24oLi4uYXJncykKICBhcmcgPT4AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					31,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/io-helpers.js",
						"symkeys":
						[
							[
								315,
								339
							],
							[
								533,
								570
							],
							[
								601,
								607
							],
							[
								673,
								686
							],
							[
								717,
								745
							],
							[
								989,
								1011
							],
							[
								1094,
								1127
							],
							[
								1209,
								1221
							],
							[
								1589,
								1621
							],
							[
								1687,
								1717
							],
							[
								1820,
								1851
							],
							[
								1919,
								1932
							],
							[
								2152,
								2160
							],
							[
								2245,
								2273
							],
							[
								2443,
								2484
							],
							[
								2706,
								2750
							],
							[
								2850,
								2881
							],
							[
								3248,
								3291
							],
							[
								3432,
								3480
							],
							[
								3793,
								3825
							],
							[
								3932,
								3972
							],
							[
								4134,
								4163
							],
							[
								4284,
								4317
							],
							[
								4378,
								4414
							],
							[
								4482,
								4509
							],
							[
								4562,
								4603
							],
							[
								4629,
								4638
							],
							[
								4680,
								4705
							],
							[
								4831,
								4841
							],
							[
								4959,
								4964
							],
							[
								5064,
								5074
							],
							[
								5151,
								5166
							],
							[
								5237,
								5251
							],
							[
								5371,
								5418
							],
							[
								5826,
								5857
							],
							[
								6285,
								6315
							],
							[
								6347,
								6365
							],
							[
								6497,
								6503
							]
						],
						"symlist":
						[
							" function IfDebug(token)",
							" function LogIfDebug(token, loggerFn)",
							" () =>",
							" (...args) =>",
							" function ReadFd(fd, binary)",
							" function IsStdio(obj)",
							" function ReadClose(file, binary)",
							"function* ()",
							" function ReadFile(name, binary)",
							" function ReadAny(obj, binary)",
							" function LoadHistory(filename)",
							"parse = () =>",
							"entry =>",
							" function ReadJSON(filename)",
							"async function ReadXML(filename, ...args)",
							"async function WriteXML(name, data, ...args)",
							" function WriteFile(file, data)",
							" function WriteFd(fd, data, offset, length)",
							" function WriteClose(file, data, offset, length)",
							" function WriteAny(obj, ...args)",
							" function WriteJSON(name, data, ...args)",
							" function ReadBJSON(filename)",
							" function WriteBJSON(name, value)",
							" function* Filter(gen, regEx = /.*/)",
							" function FilterImages(gen)",
							" function SortFiles(arr, field = 'ctime')",
							"(a, b) =>",
							" function* StatFiles(gen)",
							"toString()",
							"() =>",
							"toString()",
							"get landscape()",
							"get portrait()",
							"async function* FdReader(fd, bufferSize = 1024)",
							" function CopyToClipboard(text)",
							" function LogCall(fn, thisObj)",
							" function(...args)",
							"arg =>"
						]
					},
					"AQAAAAAAAAAAAAAA8AIAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					32,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADwAgAASWZEZWJ1Zyh0b2tlbikKTG9nSWZEZWJ1Zyh0b2tlbiwgbG9nZ2VyRm4pCigpID0+CiguLi5hcmdzKSA9PgpSZWFkRmQoZmQsIGJpbmFyeSkKSXNTdGRpbyhvYmopClJlYWRDbG9zZShmaWxlLCBiaW5hcnkpCigpClJlYWRGaWxlKG5hbWUsIGJpbmFyeSkKUmVhZEFueShvYmosIGJpbmFyeSkKTG9hZEhpc3RvcnkoZmlsZW5hbWUpCiAgcGFyc2UgPSAoKSA9PgogIGVudHJ5ID0+ClJlYWRKU09OKGZpbGVuYW1lKQpSZWFkWE1MKGZpbGVuYW1lLCAuLi5hcmdzKQpXcml0ZVhNTChuYW1lLCBkYXRhLCAuLi5hcmdzKQpXcml0ZUZpbGUoZmlsZSwgZGF0YSkKV3JpdGVGZChmZCwgZGF0YSwgb2Zmc2V0LCBsZW5ndGgpCldyaXRlQ2xvc2UoZmlsZSwgZGF0YSwgb2Zmc2V0LCBsZW5ndGgpCldyaXRlQW55KG9iaiwgLi4uYXJncykKV3JpdGVKU09OKG5hbWUsIGRhdGEsIC4uLmFyZ3MpClJlYWRCSlNPTihmaWxlbmFtZSkKV3JpdGVCSlNPTihuYW1lLCB2YWx1ZSkKRmlsdGVyKGdlbiwgcmVnRXggPSAvLiovKQpGaWx0ZXJJbWFnZXMoZ2VuKQpTb3J0RmlsZXMoYXJyLCBmaWVsZCA9ICdjdGltZScpCihhLCBiKSA9PgpTdGF0RmlsZXMoZ2VuKQogIHRvU3RyaW5nKCkKKCkgPT4KICB0b1N0cmluZygpCiAgZ2V0IGxhbmRzY2FwZSgpCiAgZ2V0IHBvcnRyYWl0KCkKRmRSZWFkZXIoZmQsIGJ1ZmZlclNpemUgPSAxMDI0KQpDb3B5VG9DbGlwYm9hcmQodGV4dCkKTG9nQ2FsbChmbiwgdGhpc09iaikKZnVuY3Rpb24oLi4uYXJncykKICBhcmcgPT4AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					33,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/io-helpers.js",
						"symkeys":
						[
							[
								315,
								339
							],
							[
								533,
								570
							],
							[
								601,
								607
							],
							[
								673,
								686
							],
							[
								717,
								745
							],
							[
								989,
								1011
							],
							[
								1094,
								1127
							],
							[
								1209,
								1221
							],
							[
								1589,
								1621
							],
							[
								1687,
								1717
							],
							[
								1820,
								1851
							],
							[
								1919,
								1932
							],
							[
								2152,
								2160
							],
							[
								2245,
								2273
							],
							[
								2443,
								2484
							],
							[
								2706,
								2750
							],
							[
								2850,
								2881
							],
							[
								3248,
								3291
							],
							[
								3432,
								3480
							],
							[
								3793,
								3825
							],
							[
								3932,
								3972
							],
							[
								4134,
								4163
							],
							[
								4284,
								4317
							],
							[
								4378,
								4414
							],
							[
								4482,
								4509
							],
							[
								4562,
								4603
							],
							[
								4629,
								4638
							],
							[
								4680,
								4705
							],
							[
								4831,
								4841
							],
							[
								4959,
								4964
							],
							[
								5064,
								5074
							],
							[
								5151,
								5166
							],
							[
								5237,
								5251
							],
							[
								5371,
								5418
							],
							[
								5826,
								5857
							],
							[
								6285,
								6315
							],
							[
								6347,
								6365
							],
							[
								6497,
								6503
							]
						],
						"symlist":
						[
							" function IfDebug(token)",
							" function LogIfDebug(token, loggerFn)",
							" () =>",
							" (...args) =>",
							" function ReadFd(fd, binary)",
							" function IsStdio(obj)",
							" function ReadClose(file, binary)",
							"function* ()",
							" function ReadFile(name, binary)",
							" function ReadAny(obj, binary)",
							" function LoadHistory(filename)",
							"parse = () =>",
							"entry =>",
							" function ReadJSON(filename)",
							"async function ReadXML(filename, ...args)",
							"async function WriteXML(name, data, ...args)",
							" function WriteFile(file, data)",
							" function WriteFd(fd, data, offset, length)",
							" function WriteClose(file, data, offset, length)",
							" function WriteAny(obj, ...args)",
							" function WriteJSON(name, data, ...args)",
							" function ReadBJSON(filename)",
							" function WriteBJSON(name, value)",
							" function* Filter(gen, regEx = /.*/)",
							" function FilterImages(gen)",
							" function SortFiles(arr, field = 'ctime')",
							"(a, b) =>",
							" function* StatFiles(gen)",
							"toString()",
							"() =>",
							"toString()",
							"get landscape()",
							"get portrait()",
							"async function* FdReader(fd, bufferSize = 1024)",
							" function CopyToClipboard(text)",
							" function LogCall(fn, thisObj)",
							" function(...args)",
							"arg =>"
						]
					},
					"AQAAAAAAAAAAAAAA8AIAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					34,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADwAgAASWZEZWJ1Zyh0b2tlbikKTG9nSWZEZWJ1Zyh0b2tlbiwgbG9nZ2VyRm4pCigpID0+CiguLi5hcmdzKSA9PgpSZWFkRmQoZmQsIGJpbmFyeSkKSXNTdGRpbyhvYmopClJlYWRDbG9zZShmaWxlLCBiaW5hcnkpCigpClJlYWRGaWxlKG5hbWUsIGJpbmFyeSkKUmVhZEFueShvYmosIGJpbmFyeSkKTG9hZEhpc3RvcnkoZmlsZW5hbWUpCiAgcGFyc2UgPSAoKSA9PgogIGVudHJ5ID0+ClJlYWRKU09OKGZpbGVuYW1lKQpSZWFkWE1MKGZpbGVuYW1lLCAuLi5hcmdzKQpXcml0ZVhNTChuYW1lLCBkYXRhLCAuLi5hcmdzKQpXcml0ZUZpbGUoZmlsZSwgZGF0YSkKV3JpdGVGZChmZCwgZGF0YSwgb2Zmc2V0LCBsZW5ndGgpCldyaXRlQ2xvc2UoZmlsZSwgZGF0YSwgb2Zmc2V0LCBsZW5ndGgpCldyaXRlQW55KG9iaiwgLi4uYXJncykKV3JpdGVKU09OKG5hbWUsIGRhdGEsIC4uLmFyZ3MpClJlYWRCSlNPTihmaWxlbmFtZSkKV3JpdGVCSlNPTihuYW1lLCB2YWx1ZSkKRmlsdGVyKGdlbiwgcmVnRXggPSAvLiovKQpGaWx0ZXJJbWFnZXMoZ2VuKQpTb3J0RmlsZXMoYXJyLCBmaWVsZCA9ICdjdGltZScpCihhLCBiKSA9PgpTdGF0RmlsZXMoZ2VuKQogIHRvU3RyaW5nKCkKKCkgPT4KICB0b1N0cmluZygpCiAgZ2V0IGxhbmRzY2FwZSgpCiAgZ2V0IHBvcnRyYWl0KCkKRmRSZWFkZXIoZmQsIGJ1ZmZlclNpemUgPSAxMDI0KQpDb3B5VG9DbGlwYm9hcmQodGV4dCkKTG9nQ2FsbChmbiwgdGhpc09iaikKZnVuY3Rpb24oLi4uYXJncykKICBhcmcgPT4AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					35,
					3,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/io-helpers.js",
						"symkeys":
						[
							[
								315,
								339
							],
							[
								533,
								570
							],
							[
								601,
								607
							],
							[
								673,
								686
							],
							[
								717,
								745
							],
							[
								989,
								1011
							],
							[
								1094,
								1127
							],
							[
								1209,
								1221
							],
							[
								1589,
								1621
							],
							[
								1687,
								1717
							],
							[
								1820,
								1851
							],
							[
								1919,
								1932
							],
							[
								2152,
								2160
							],
							[
								2245,
								2273
							],
							[
								2443,
								2484
							],
							[
								2706,
								2750
							],
							[
								2850,
								2881
							],
							[
								3248,
								3291
							],
							[
								3432,
								3480
							],
							[
								3793,
								3825
							],
							[
								3932,
								3972
							],
							[
								4134,
								4163
							],
							[
								4284,
								4317
							],
							[
								4378,
								4414
							],
							[
								4482,
								4509
							],
							[
								4562,
								4603
							],
							[
								4629,
								4638
							],
							[
								4680,
								4705
							],
							[
								4831,
								4841
							],
							[
								4959,
								4964
							],
							[
								5064,
								5074
							],
							[
								5151,
								5166
							],
							[
								5237,
								5251
							],
							[
								5371,
								5418
							],
							[
								5826,
								5857
							],
							[
								6285,
								6315
							],
							[
								6347,
								6365
							],
							[
								6497,
								6503
							]
						],
						"symlist":
						[
							" function IfDebug(token)",
							" function LogIfDebug(token, loggerFn)",
							" () =>",
							" (...args) =>",
							" function ReadFd(fd, binary)",
							" function IsStdio(obj)",
							" function ReadClose(file, binary)",
							"function* ()",
							" function ReadFile(name, binary)",
							" function ReadAny(obj, binary)",
							" function LoadHistory(filename)",
							"parse = () =>",
							"entry =>",
							" function ReadJSON(filename)",
							"async function ReadXML(filename, ...args)",
							"async function WriteXML(name, data, ...args)",
							" function WriteFile(file, data)",
							" function WriteFd(fd, data, offset, length)",
							" function WriteClose(file, data, offset, length)",
							" function WriteAny(obj, ...args)",
							" function WriteJSON(name, data, ...args)",
							" function ReadBJSON(filename)",
							" function WriteBJSON(name, value)",
							" function* Filter(gen, regEx = /.*/)",
							" function FilterImages(gen)",
							" function SortFiles(arr, field = 'ctime')",
							"(a, b) =>",
							" function* StatFiles(gen)",
							"toString()",
							"() =>",
							"toString()",
							"get landscape()",
							"get portrait()",
							"async function* FdReader(fd, bufferSize = 1024)",
							" function CopyToClipboard(text)",
							" function LogCall(fn, thisObj)",
							" function(...args)",
							"arg =>"
						]
					},
					"BQAAAAAAAAAAAAAA8AIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPACAABJZkRlYnVnKHRva2VuKQpMb2dJZkRlYnVnKHRva2VuLCBsb2dnZXJGbikKKCkgPT4KKC4uLmFyZ3MpID0+ClJlYWRGZChmZCwgYmluYXJ5KQpJc1N0ZGlvKG9iaikKUmVhZENsb3NlKGZpbGUsIGJpbmFyeSkKKCkKUmVhZEZpbGUobmFtZSwgYmluYXJ5KQpSZWFkQW55KG9iaiwgYmluYXJ5KQpMb2FkSGlzdG9yeShmaWxlbmFtZSkKICBwYXJzZSA9ICgpID0+CiAgZW50cnkgPT4KUmVhZEpTT04oZmlsZW5hbWUpClJlYWRYTUwoZmlsZW5hbWUsIC4uLmFyZ3MpCldyaXRlWE1MKG5hbWUsIGRhdGEsIC4uLmFyZ3MpCldyaXRlRmlsZShmaWxlLCBkYXRhKQpXcml0ZUZkKGZkLCBkYXRhLCBvZmZzZXQsIGxlbmd0aCkKV3JpdGVDbG9zZShmaWxlLCBkYXRhLCBvZmZzZXQsIGxlbmd0aCkKV3JpdGVBbnkob2JqLCAuLi5hcmdzKQpXcml0ZUpTT04obmFtZSwgZGF0YSwgLi4uYXJncykKUmVhZEJKU09OKGZpbGVuYW1lKQpXcml0ZUJKU09OKG5hbWUsIHZhbHVlKQpGaWx0ZXIoZ2VuLCByZWdFeCA9IC8uKi8pCkZpbHRlckltYWdlcyhnZW4pClNvcnRGaWxlcyhhcnIsIGZpZWxkID0gJ2N0aW1lJykKKGEsIGIpID0+ClN0YXRGaWxlcyhnZW4pCiAgdG9TdHJpbmcoKQooKSA9PgogIHRvU3RyaW5nKCkKICBnZXQgbGFuZHNjYXBlKCkKICBnZXQgcG9ydHJhaXQoKQpGZFJlYWRlcihmZCwgYnVmZmVyU2l6ZSA9IDEwMjQpCkNvcHlUb0NsaXBib2FyZCh0ZXh0KQpMb2dDYWxsKGZuLCB0aGlzT2JqKQpmdW5jdGlvbiguLi5hcmdzKQogIGFyZyA9PgAAAAAAAAAA8AIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPACAABJZkRlYnVnKHRva2VuKQpMb2dJZkRlYnVnKHRva2VuLCBsb2dnZXJGbikKKCkgPT4KKC4uLmFyZ3MpID0+ClJlYWRGZChmZCwgYmluYXJ5KQpJc1N0ZGlvKG9iaikKUmVhZENsb3NlKGZpbGUsIGJpbmFyeSkKKCkKUmVhZEZpbGUobmFtZSwgYmluYXJ5KQpSZWFkQW55KG9iaiwgYmluYXJ5KQpMb2FkSGlzdG9yeShmaWxlbmFtZSkKICBwYXJzZSA9ICgpID0+CiAgZW50cnkgPT4KUmVhZEpTT04oZmlsZW5hbWUpClJlYWRYTUwoZmlsZW5hbWUsIC4uLmFyZ3MpCldyaXRlWE1MKG5hbWUsIGRhdGEsIC4uLmFyZ3MpCldyaXRlRmlsZShmaWxlLCBkYXRhKQpXcml0ZUZkKGZkLCBkYXRhLCBvZmZzZXQsIGxlbmd0aCkKV3JpdGVDbG9zZShmaWxlLCBkYXRhLCBvZmZzZXQsIGxlbmd0aCkKV3JpdGVBbnkob2JqLCAuLi5hcmdzKQpXcml0ZUpTT04obmFtZSwgZGF0YSwgLi4uYXJncykKUmVhZEJKU09OKGZpbGVuYW1lKQpXcml0ZUJKU09OKG5hbWUsIHZhbHVlKQpGaWx0ZXIoZ2VuLCByZWdFeCA9IC8uKi8pCkZpbHRlckltYWdlcyhnZW4pClNvcnRGaWxlcyhhcnIsIGZpZWxkID0gJ2N0aW1lJykKKGEsIGIpID0+ClN0YXRGaWxlcyhnZW4pCiAgdG9TdHJpbmcoKQooKSA9PgogIHRvU3RyaW5nKCkKICBnZXQgbGFuZHNjYXBlKCkKICBnZXQgcG9ydHJhaXQoKQpGZFJlYWRlcihmZCwgYnVmZmVyU2l6ZSA9IDEwMjQpCkNvcHlUb0NsaXBib2FyZCh0ZXh0KQpMb2dDYWxsKGZuLCB0aGlzT2JqKQpmdW5jdGlvbiguLi5hcmdzKQogIGFyZyA9PgAAAAAAAAAA8AIAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "clang-list.js",
			"settings":
			{
				"buffer_size": 8043,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"revert",
					null,
					"",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					2,
					1,
					"revert",
					null,
					"",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					3,
					1,
					"left_delete",
					null,
					"AQAAADQCAAAAAAAANAIAAAAAAAABAAAARw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADUCAAAAAAAANQIAAAAAAAAAAAAAAADwvw"
				],
				[
					4,
					1,
					"insert",
					{
						"characters": "h"
					},
					"AQAAADQCAAAAAAAANQIAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADQCAAAAAAAANAIAAAAAAAAAAAAAAADwvw"
				],
				[
					5,
					1,
					"right_delete",
					null,
					"AQAAADUCAAAAAAAANQIAAAAAAAABAAAAaA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADUCAAAAAAAANQIAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "clang-ast.js",
			"settings":
			{
				"buffer_size": 88093,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					48,
					1,
					"cut",
					null,
					"AQAAAPyFAAAAAAAA/IUAAAAAAAAsAAAAICAgIGlmKCdmaWxlJyBpbiBsb2MpIHRoaXMuZmlsZSA9IGxvYy5maWxlOwo",
					"AQAAAAAAAAABAAAA/IUAAAAAAAAohgAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"paste",
					null,
					"AQAAAC+GAAAAAAAAW4YAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAL4YAAAAAAAAvhgAAAAAAAAAAAAAAAAAA"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": "{"
					},
					"AQAAAEWGAAAAAAAARoYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARYYAAAAAAABFhgAAAAAAAAAAAAAAAPC/"
				],
				[
					54,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAAEaGAAAAAAAAR4YAAAAAAAAAAAAAR4YAAAAAAABLhgAAAAAAAAAAAABHhgAAAAAAAEeGAAAAAAAABAAAACAgICBHhgAAAAAAAE2GAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARoYAAAAAAABGhgAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAGKGAAAAAAAAY4YAAAAAAAAAAAAAY4YAAAAAAABphgAAAAAAAAAAAABphgAAAAAAAGqGAAAAAAAAAAAAAGqGAAAAAAAAcIYAAAAAAAAAAAAAY4YAAAAAAABjhgAAAAAAAAYAAAAgICAgICA",
					"AQAAAAAAAAABAAAAYoYAAAAAAABihgAAAAAAAP///////+9/"
				],
				[
					59,
					1,
					"insert",
					{
						"characters": "}"
					},
					"AwAAAGqGAAAAAAAAa4YAAAAAAAAAAAAAZIYAAAAAAABkhgAAAAAAAAYAAAAgICAgICBkhgAAAAAAAGiGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaoYAAAAAAABqhgAAAAAAAAAAAAAAAEhA"
				],
				[
					62,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAGmGAAAAAAAAaoYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaYYAAAAAAABphgAAAAAAAAAAAAAAAPC/"
				],
				[
					65,
					1,
					"left_delete",
					null,
					"AQAAAGmGAAAAAAAAaYYAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAaoYAAAAAAABqhgAAAAAAAAAAAAAAAPC/"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAEyGAAAAAAAATYYAAAAAAAAAAAAATYYAAAAAAABShgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATIYAAAAAAABMhgAAAAAAAAAAAAAAAERA"
				],
				[
					70,
					1,
					"insert",
					{
						"characters": "Object.define"
					},
					"DQAAAEyGAAAAAAAATYYAAAAAAAAAAAAATYYAAAAAAABOhgAAAAAAAAAAAABOhgAAAAAAAE+GAAAAAAAAAAAAAE+GAAAAAAAAUIYAAAAAAAAAAAAAUIYAAAAAAABRhgAAAAAAAAAAAABRhgAAAAAAAFKGAAAAAAAAAAAAAFKGAAAAAAAAU4YAAAAAAAAAAAAAU4YAAAAAAABUhgAAAAAAAAAAAABUhgAAAAAAAFWGAAAAAAAAAAAAAFWGAAAAAAAAVoYAAAAAAAAAAAAAVoYAAAAAAABXhgAAAAAAAAAAAABXhgAAAAAAAFiGAAAAAAAAAAAAAFiGAAAAAAAAWYYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATIYAAAAAAABMhgAAAAAAAAAAAAAAAERA"
				],
				[
					72,
					1,
					"insert_completion",
					{
						"completion": "defineProperty",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "defineProperty"
					},
					"AgAAAFOGAAAAAAAAU4YAAAAAAAAGAAAAZGVmaW5lU4YAAAAAAABhhgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWYYAAAAAAABZhgAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAGGGAAAAAAAAY4YAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYYYAAAAAAABhhgAAAAAAAAAAAAAAAPC/"
				],
				[
					75,
					1,
					"left_delete",
					null,
					"AQAAAGKGAAAAAAAAYoYAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAY4YAAAAAAABjhgAAAAAAAAAAAAAAAPC/"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": "this,"
					},
					"BQAAAGKGAAAAAAAAY4YAAAAAAAAAAAAAY4YAAAAAAABkhgAAAAAAAAAAAABkhgAAAAAAAGWGAAAAAAAAAAAAAGWGAAAAAAAAZoYAAAAAAAAAAAAAZoYAAAAAAABnhgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYoYAAAAAAABihgAAAAAAAAAAAAAAAPC/"
				],
				[
					77,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGeGAAAAAAAAaIYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZ4YAAAAAAABnhgAAAAAAAAAAAAAAAPC/"
				],
				[
					78,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAGiGAAAAAAAAaoYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaIYAAAAAAABohgAAAAAAAAAAAAAAAPC/"
				],
				[
					79,
					1,
					"insert",
					{
						"characters": "file"
					},
					"BAAAAGmGAAAAAAAAaoYAAAAAAAAAAAAAaoYAAAAAAABrhgAAAAAAAAAAAABrhgAAAAAAAGyGAAAAAAAAAAAAAGyGAAAAAAAAbYYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaYYAAAAAAABphgAAAAAAAAAAAAAAAPC/"
				],
				[
					81,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAG6GAAAAAAAAb4YAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAboYAAAAAAABuhgAAAAAAAAAAAAAAAPC/"
				],
				[
					82,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAG+GAAAAAAAAcIYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAb4YAAAAAAABvhgAAAAAAAAAAAAAAAPC/"
				],
				[
					83,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAHCGAAAAAAAAcoYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcIYAAAAAAABwhgAAAAAAAAAAAAAAAPC/"
				],
				[
					84,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHGGAAAAAAAAcoYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcYYAAAAAAABxhgAAAAAAAAAAAAAAAPC/"
				],
				[
					85,
					1,
					"right_delete",
					null,
					"AQAAAHKGAAAAAAAAcoYAAAAAAAABAAAAfQ",
					"AQAAAAAAAAABAAAAcoYAAAAAAAByhgAAAAAAAAAAAAAAAPC/"
				],
				[
					86,
					1,
					"insert",
					{
						"characters": "value:"
					},
					"BgAAAHKGAAAAAAAAc4YAAAAAAAAAAAAAc4YAAAAAAAB0hgAAAAAAAAAAAAB0hgAAAAAAAHWGAAAAAAAAAAAAAHWGAAAAAAAAdoYAAAAAAAAAAAAAdoYAAAAAAAB3hgAAAAAAAAAAAAB3hgAAAAAAAHiGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcoYAAAAAAAByhgAAAAAAAAAAAAAAAPC/"
				],
				[
					87,
					1,
					"insert",
					{
						"characters": " loc."
					},
					"BQAAAHiGAAAAAAAAeYYAAAAAAAAAAAAAeYYAAAAAAAB6hgAAAAAAAAAAAAB6hgAAAAAAAHuGAAAAAAAAAAAAAHuGAAAAAAAAfIYAAAAAAAAAAAAAfIYAAAAAAAB9hgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeIYAAAAAAAB4hgAAAAAAAAAAAAAAAPC/"
				],
				[
					88,
					1,
					"left_delete",
					null,
					"AQAAAHyGAAAAAAAAfIYAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAAfYYAAAAAAAB9hgAAAAAAAAAAAAAAAPC/"
				],
				[
					89,
					1,
					"insert",
					{
						"characters": ".file"
					},
					"BQAAAHyGAAAAAAAAfYYAAAAAAAAAAAAAfYYAAAAAAAB+hgAAAAAAAAAAAAB+hgAAAAAAAH+GAAAAAAAAAAAAAH+GAAAAAAAAgIYAAAAAAAAAAAAAgIYAAAAAAACBhgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfIYAAAAAAAB8hgAAAAAAAAAAAAAAAPC/"
				],
				[
					118,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAIGGAAAAAAAAgoYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgYYAAAAAAACBhgAAAAAAAAAAAAAAAPC/"
				],
				[
					119,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIKGAAAAAAAAg4YAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgoYAAAAAAACChgAAAAAAAAAAAAAAAPC/"
				],
				[
					121,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAEaGAAAAAAAAR4YAAAAAAAAAAAAAR4YAAAAAAABLhgAAAAAAAAAAAABLhgAAAAAAAE2GAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARoYAAAAAAABGhgAAAAAAAAAAAAAAAH5A"
				],
				[
					124,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAE2GAAAAAAAAToYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATYYAAAAAAABNhgAAAAAAAAAAAAAAAPC/"
				],
				[
					125,
					1,
					"left_delete",
					null,
					"AQAAAE2GAAAAAAAATYYAAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAAToYAAAAAAABOhgAAAAAAAAAAAAAAAPC/"
				],
				[
					126,
					1,
					"insert",
					{
						"characters": "const"
					},
					"BQAAAE2GAAAAAAAAToYAAAAAAAAAAAAAToYAAAAAAABPhgAAAAAAAAAAAABPhgAAAAAAAFCGAAAAAAAAAAAAAFCGAAAAAAAAUYYAAAAAAAAAAAAAUYYAAAAAAABShgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATYYAAAAAAABNhgAAAAAAAAAAAAAAAPC/"
				],
				[
					127,
					1,
					"insert",
					{
						"characters": " haveFilename="
					},
					"DgAAAFKGAAAAAAAAU4YAAAAAAAAAAAAAU4YAAAAAAABUhgAAAAAAAAAAAABUhgAAAAAAAFWGAAAAAAAAAAAAAFWGAAAAAAAAVoYAAAAAAAAAAAAAVoYAAAAAAABXhgAAAAAAAAAAAABXhgAAAAAAAFiGAAAAAAAAAAAAAFiGAAAAAAAAWYYAAAAAAAAAAAAAWYYAAAAAAABahgAAAAAAAAAAAABahgAAAAAAAFuGAAAAAAAAAAAAAFuGAAAAAAAAXIYAAAAAAAAAAAAAXIYAAAAAAABdhgAAAAAAAAAAAABdhgAAAAAAAF6GAAAAAAAAAAAAAF6GAAAAAAAAX4YAAAAAAAAAAAAAX4YAAAAAAABghgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUoYAAAAAAABShgAAAAAAAAAAAAAAAPC/"
				],
				[
					128,
					1,
					"insert",
					{
						"characters": "typeof"
					},
					"BgAAAGCGAAAAAAAAYYYAAAAAAAAAAAAAYYYAAAAAAABihgAAAAAAAAAAAABihgAAAAAAAGOGAAAAAAAAAAAAAGOGAAAAAAAAZIYAAAAAAAAAAAAAZIYAAAAAAABlhgAAAAAAAAAAAABlhgAAAAAAAGaGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYIYAAAAAAABghgAAAAAAAAAAAAAAAPC/"
				],
				[
					129,
					1,
					"insert",
					{
						"characters": " loc.file"
					},
					"CQAAAGaGAAAAAAAAZ4YAAAAAAAAAAAAAZ4YAAAAAAABohgAAAAAAAAAAAABohgAAAAAAAGmGAAAAAAAAAAAAAGmGAAAAAAAAaoYAAAAAAAAAAAAAaoYAAAAAAABrhgAAAAAAAAAAAABrhgAAAAAAAGyGAAAAAAAAAAAAAGyGAAAAAAAAbYYAAAAAAAAAAAAAbYYAAAAAAABuhgAAAAAAAAAAAABuhgAAAAAAAG+GAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZoYAAAAAAABmhgAAAAAAAAAAAAAAAPC/"
				],
				[
					130,
					1,
					"insert",
					{
						"characters": " =="
					},
					"AwAAAG+GAAAAAAAAcIYAAAAAAAAAAAAAcIYAAAAAAABxhgAAAAAAAAAAAABxhgAAAAAAAHKGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAb4YAAAAAAABvhgAAAAAAAAAAAAAAAPC/"
				],
				[
					131,
					1,
					"insert",
					{
						"characters": " s"
					},
					"AgAAAHKGAAAAAAAAc4YAAAAAAAAAAAAAc4YAAAAAAAB0hgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcoYAAAAAAAByhgAAAAAAAAAAAAAAAPC/"
				],
				[
					132,
					1,
					"left_delete",
					null,
					"AQAAAHOGAAAAAAAAc4YAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAdIYAAAAAAAB0hgAAAAAAAAAAAAAAAPC/"
				],
				[
					133,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAHOGAAAAAAAAdYYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAc4YAAAAAAABzhgAAAAAAAAAAAAAAAPC/"
				],
				[
					134,
					1,
					"insert",
					{
						"characters": "string;"
					},
					"BwAAAHSGAAAAAAAAdYYAAAAAAAAAAAAAdYYAAAAAAAB2hgAAAAAAAAAAAAB2hgAAAAAAAHeGAAAAAAAAAAAAAHeGAAAAAAAAeIYAAAAAAAAAAAAAeIYAAAAAAAB5hgAAAAAAAAAAAAB5hgAAAAAAAHqGAAAAAAAAAAAAAHqGAAAAAAAAe4YAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdIYAAAAAAAB0hgAAAAAAAAAAAAAAAPC/"
				],
				[
					135,
					1,
					"left_delete",
					null,
					"AQAAAHqGAAAAAAAAeoYAAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAAe4YAAAAAAAB7hgAAAAAAAAAAAAAAAPC/"
				],
				[
					137,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAHuGAAAAAAAAfIYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAe4YAAAAAAAB7hgAAAAAAAAAAAAAAAPC/"
				],
				[
					138,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAHyGAAAAAAAAfYYAAAAAAAAAAAAAfYYAAAAAAACDhgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfIYAAAAAAAB8hgAAAAAAAAAAAAAAAPC/"
				],
				[
					177,
					1,
					"insert",
					{
						"characters": " enumerabnle:"
					},
					"DgAAAMCGAAAAAAAAwYYAAAAAAAAAAAAAfYYAAAAAAAB9hgAAAAAAAAYAAAAgICAgICC7hgAAAAAAALyGAAAAAAAAAAAAALyGAAAAAAAAvYYAAAAAAAAAAAAAvYYAAAAAAAC+hgAAAAAAAAAAAAC+hgAAAAAAAL+GAAAAAAAAAAAAAL+GAAAAAAAAwIYAAAAAAAAAAAAAwIYAAAAAAADBhgAAAAAAAAAAAADBhgAAAAAAAMKGAAAAAAAAAAAAAMKGAAAAAAAAw4YAAAAAAAAAAAAAw4YAAAAAAADEhgAAAAAAAAAAAADEhgAAAAAAAMWGAAAAAAAAAAAAAMWGAAAAAAAAxoYAAAAAAAAAAAAAxoYAAAAAAADHhgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwIYAAAAAAADAhgAAAAAAAAAAAAAAAPC/"
				],
				[
					178,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMeGAAAAAAAAyIYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAx4YAAAAAAADHhgAAAAAAAAAAAAAAAPC/"
				],
				[
					179,
					5,
					"left_delete",
					null,
					"BQAAAMeGAAAAAAAAx4YAAAAAAAABAAAAIMaGAAAAAAAAxoYAAAAAAAABAAAAOsWGAAAAAAAAxYYAAAAAAAABAAAAZcSGAAAAAAAAxIYAAAAAAAABAAAAbMOGAAAAAAAAw4YAAAAAAAABAAAAbg",
					"AQAAAAAAAAABAAAAyIYAAAAAAADIhgAAAAAAAAAAAAAAAPC/"
				],
				[
					180,
					1,
					"insert",
					{
						"characters": "le:"
					},
					"AwAAAMOGAAAAAAAAxIYAAAAAAAAAAAAAxIYAAAAAAADFhgAAAAAAAAAAAADFhgAAAAAAAMaGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAw4YAAAAAAADDhgAAAAAAAAAAAAAAAPC/"
				],
				[
					181,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMaGAAAAAAAAx4YAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxoYAAAAAAADGhgAAAAAAAAAAAAAAAPC/"
				],
				[
					182,
					1,
					"paste",
					null,
					"AQAAAMeGAAAAAAAA04YAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAx4YAAAAAAADHhgAAAAAAAAAAAAAAAPC/"
				],
				[
					185,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAANOGAAAAAAAA1IYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA04YAAAAAAADThgAAAAAAAAAAAAAAAPC/"
				],
				[
					186,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANSGAAAAAAAA1YYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1IYAAAAAAADUhgAAAAAAAAAAAAAAAPC/"
				],
				[
					189,
					14,
					"left_delete",
					null,
					"DgAAANSGAAAAAAAA1IYAAAAAAAABAAAAINOGAAAAAAAA04YAAAAAAAABAAAALNKGAAAAAAAA0oYAAAAAAAABAAAAZdGGAAAAAAAA0YYAAAAAAAABAAAAbdCGAAAAAAAA0IYAAAAAAAABAAAAYc+GAAAAAAAAz4YAAAAAAAABAAAAbs6GAAAAAAAAzoYAAAAAAAABAAAAZc2GAAAAAAAAzYYAAAAAAAABAAAAbMyGAAAAAAAAzIYAAAAAAAABAAAAacuGAAAAAAAAy4YAAAAAAAABAAAARsqGAAAAAAAAyoYAAAAAAAABAAAAZcmGAAAAAAAAyYYAAAAAAAABAAAAdsiGAAAAAAAAyIYAAAAAAAABAAAAYceGAAAAAAAAx4YAAAAAAAABAAAAaA",
					"AQAAAAAAAAABAAAA1YYAAAAAAADVhgAAAAAAAAAAAAAAAPC/"
				],
				[
					190,
					1,
					"insert",
					{
						"characters": "true,"
					},
					"BQAAAMeGAAAAAAAAyIYAAAAAAAAAAAAAyIYAAAAAAADJhgAAAAAAAAAAAADJhgAAAAAAAMqGAAAAAAAAAAAAAMqGAAAAAAAAy4YAAAAAAAAAAAAAy4YAAAAAAADMhgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAx4YAAAAAAADHhgAAAAAAAAAAAAAAAPC/"
				],
				[
					191,
					1,
					"insert",
					{
						"characters": " write"
					},
					"BgAAAMyGAAAAAAAAzYYAAAAAAAAAAAAAzYYAAAAAAADOhgAAAAAAAAAAAADOhgAAAAAAAM+GAAAAAAAAAAAAAM+GAAAAAAAA0IYAAAAAAAAAAAAA0IYAAAAAAADRhgAAAAAAAAAAAADRhgAAAAAAANKGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzIYAAAAAAADMhgAAAAAAAAAAAAAAAPC/"
				],
				[
					192,
					1,
					"left_delete",
					null,
					"AQAAANGGAAAAAAAA0YYAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAA0oYAAAAAAADShgAAAAAAAAAAAAAAAPC/"
				],
				[
					193,
					1,
					"insert",
					{
						"characters": "able:"
					},
					"BQAAANGGAAAAAAAA0oYAAAAAAAAAAAAA0oYAAAAAAADThgAAAAAAAAAAAADThgAAAAAAANSGAAAAAAAAAAAAANSGAAAAAAAA1YYAAAAAAAAAAAAA1YYAAAAAAADWhgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0YYAAAAAAADRhgAAAAAAAAAAAAAAAPC/"
				],
				[
					194,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANaGAAAAAAAA14YAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1oYAAAAAAADWhgAAAAAAAAAAAAAAAPC/"
				],
				[
					199,
					1,
					"insert",
					{
						"characters": "!have_"
					},
					"BgAAANeGAAAAAAAA2IYAAAAAAAAAAAAA2IYAAAAAAADZhgAAAAAAAAAAAADZhgAAAAAAANqGAAAAAAAAAAAAANqGAAAAAAAA24YAAAAAAAAAAAAA24YAAAAAAADchgAAAAAAAAAAAADchgAAAAAAAN2GAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA14YAAAAAAADXhgAAAAAAAAAAAAAAAPC/"
				],
				[
					200,
					1,
					"left_delete",
					null,
					"AQAAANyGAAAAAAAA3IYAAAAAAAABAAAAXw",
					"AQAAAAAAAAABAAAA3YYAAAAAAADdhgAAAAAAAAAAAAAAAPC/"
				],
				[
					201,
					1,
					"insert",
					{
						"characters": "Filename"
					},
					"CAAAANyGAAAAAAAA3YYAAAAAAAAAAAAA3YYAAAAAAADehgAAAAAAAAAAAADehgAAAAAAAN+GAAAAAAAAAAAAAN+GAAAAAAAA4IYAAAAAAAAAAAAA4IYAAAAAAADhhgAAAAAAAAAAAADhhgAAAAAAAOKGAAAAAAAAAAAAAOKGAAAAAAAA44YAAAAAAAAAAAAA44YAAAAAAADkhgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3IYAAAAAAADchgAAAAAAAAAAAAAAAPC/"
				],
				[
					202,
					1,
					"left_delete",
					null,
					"AQAAAOOGAAAAAAAA44YAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAA5IYAAAAAAADkhgAAAAAAAAAAAAAAAPC/"
				],
				[
					203,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAOOGAAAAAAAA5IYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA44YAAAAAAADjhgAAAAAAAAAAAAAAAPC/"
				],
				[
					208,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAOSGAAAAAAAA5YYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5IYAAAAAAADkhgAAAAAAAAAAAAAAAPC/"
				],
				[
					209,
					1,
					"insert",
					{
						"characters": " config"
					},
					"BwAAAOWGAAAAAAAA5oYAAAAAAAAAAAAA5oYAAAAAAADnhgAAAAAAAAAAAADnhgAAAAAAAOiGAAAAAAAAAAAAAOiGAAAAAAAA6YYAAAAAAAAAAAAA6YYAAAAAAADqhgAAAAAAAAAAAADqhgAAAAAAAOuGAAAAAAAAAAAAAOuGAAAAAAAA7IYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5YYAAAAAAADlhgAAAAAAAAAAAAAAAPC/"
				],
				[
					210,
					1,
					"insert",
					{
						"characters": "urabkl"
					},
					"BgAAAOyGAAAAAAAA7YYAAAAAAAAAAAAA7YYAAAAAAADuhgAAAAAAAAAAAADuhgAAAAAAAO+GAAAAAAAAAAAAAO+GAAAAAAAA8IYAAAAAAAAAAAAA8IYAAAAAAADxhgAAAAAAAAAAAADxhgAAAAAAAPKGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7IYAAAAAAADshgAAAAAAAAAAAAAAAPC/"
				],
				[
					211,
					2,
					"left_delete",
					null,
					"AgAAAPGGAAAAAAAA8YYAAAAAAAABAAAAbPCGAAAAAAAA8IYAAAAAAAABAAAAaw",
					"AQAAAAAAAAABAAAA8oYAAAAAAADyhgAAAAAAAAAAAAAAAPC/"
				],
				[
					212,
					1,
					"insert",
					{
						"characters": "b"
					},
					"AQAAAPCGAAAAAAAA8YYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8IYAAAAAAADwhgAAAAAAAAAAAAAAAPC/"
				],
				[
					213,
					1,
					"left_delete",
					null,
					"AQAAAPCGAAAAAAAA8IYAAAAAAAABAAAAYg",
					"AQAAAAAAAAABAAAA8YYAAAAAAADxhgAAAAAAAAAAAAAAAPC/"
				],
				[
					214,
					1,
					"insert",
					{
						"characters": "le:"
					},
					"AwAAAPCGAAAAAAAA8YYAAAAAAAAAAAAA8YYAAAAAAADyhgAAAAAAAAAAAADyhgAAAAAAAPOGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8IYAAAAAAADwhgAAAAAAAAAAAAAAAPC/"
				],
				[
					215,
					1,
					"insert",
					{
						"characters": " true"
					},
					"BQAAAPOGAAAAAAAA9IYAAAAAAAAAAAAA9IYAAAAAAAD1hgAAAAAAAAAAAAD1hgAAAAAAAPaGAAAAAAAAAAAAAPaGAAAAAAAA94YAAAAAAAAAAAAA94YAAAAAAAD4hgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA84YAAAAAAADzhgAAAAAAAAAAAAAAAPC/"
				],
				[
					216,
					1,
					"insert",
					{
						"characters": " };"
					},
					"AwAAAPiGAAAAAAAA+YYAAAAAAAAAAAAA+YYAAAAAAAD6hgAAAAAAAAAAAAD6hgAAAAAAAPuGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+IYAAAAAAAD4hgAAAAAAAAAAAAAAAPC/"
				],
				[
					219,
					1,
					"left_delete",
					null,
					"AQAAAPqGAAAAAAAA+oYAAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAA+4YAAAAAAAD7hgAAAAAAAAAAAAAAAPC/"
				],
				[
					220,
					1,
					"insert",
					{
						"characters": ");"
					},
					"AgAAAPqGAAAAAAAA+4YAAAAAAAAAAAAA+4YAAAAAAAD8hgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+oYAAAAAAAD6hgAAAAAAAAAAAAAAAPC/"
				],
				[
					223,
					1,
					"right_delete",
					null,
					"AQAAAP2GAAAAAAAA/YYAAAAAAAAdAAAAICAgICAgdGhpcy5maWxlID0gbG9jLmZpbGU7Cgo",
					"AQAAAAAAAAABAAAA/YYAAAAAAAAahwAAAAAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "io-helpers.js",
			"settings":
			{
				"buffer_size": 6619,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "ast-shell.js",
			"settings":
			{
				"buffer_size": 46678,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					2808,
					1,
					"insert",
					{
						"characters": "scriptArgs"
					},
					"CgAAAMSWAAAAAAAAxZYAAAAAAAAAAAAAxZYAAAAAAADGlgAAAAAAAAAAAADGlgAAAAAAAMeWAAAAAAAAAAAAAMeWAAAAAAAAyJYAAAAAAAAAAAAAyJYAAAAAAADJlgAAAAAAAAAAAADJlgAAAAAAAMqWAAAAAAAAAAAAAMqWAAAAAAAAy5YAAAAAAAAAAAAAy5YAAAAAAADMlgAAAAAAAAAAAADMlgAAAAAAAM2WAAAAAAAAAAAAAM2WAAAAAAAAzpYAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxJYAAAAAAADElgAAAAAAAAAAAAAAAPC/"
				],
				[
					2809,
					4,
					"right_delete",
					null,
					"BAAAAM6WAAAAAAAAzpYAAAAAAAABAAAAYc6WAAAAAAAAzpYAAAAAAAABAAAAcs6WAAAAAAAAzpYAAAAAAAABAAAAZ86WAAAAAAAAzpYAAAAAAAABAAAAcw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAzpYAAAAAAADOlgAAAAAAAAAAAAAAAPC/"
				],
				[
					2819,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADFsgAAaW1wb3J0IHsgRGVlcEZpbmQsIERlZXBTZWxlY3QsIERlZXBQYXRoT2YsIERlZXBHZXQsIEFzdER1bXAsIENvbXBsZXRlTG9jYXRpb24sIENvbXBsZXRlUmFuZ2UsIEVudW1EZWNsLCBGaW5kVHlwZSwgRnVuY3Rpb25EZWNsLCBHZXRGaWVsZHMsIEdldExvYywgR2V0UGFyYW1zLCBHZXRDbGFzcywgR2V0QmFzZXMsIEdldEJ5TmFtZSwgR2V0VHlwZSwgR2V0VHlwZU5vZGUsIEdldFR5cGVTdHIsIEhpZXIsIGlzTm9kZSwgTGlzdCwgTG9jYXRpb24sIE5vZGUsIE5vZGVOYW1lLCBOb2RlUHJpbnRlciwgTm9kZVR5cGUsIFBhdGhPZiwgUGF0aFJlbW92ZUxvYywgUHJpbnRBc3QsIFJhbmdlLCBSYXdMb2NhdGlvbiwgUmF3UmFuZ2UsIFJlY29yZERlY2wsIFNJWkVPRl9QT0lOVEVSLCBTb3VyY2VEZXBlbmRlbmNpZXMsIFNwYXduQ29tcGlsZXIsIFR5cGUsIFR5cGVkZWZEZWNsLCBUeXBlRmFjdG9yeSwgVmFyRGVjbCwgbmFtZU9ySWRQcmVkLCBOYW1lc3BhY2VPZiwgR2V0TmFtZXNwYWNlLCBQb2ludGVyVHlwZSwgUmVmZXJlbmNlVHlwZSwgRmllbGREZWNsLCBOYW1lRm9yLCB9IGZyb20gJy4vY2xhbmctYXN0LmpzJzsKaW1wb3J0IHsgRGlySXRlcmF0b3IsIFJlY3Vyc2l2ZURpckl0ZXJhdG9yIH0gZnJvbSAnLi9kaXItaGVscGVycy5qcyc7CmltcG9ydCB7IExvYWRIaXN0b3J5LCBSZWFkRmlsZSwgUmVhZEpTT04sIFdyaXRlRmlsZSwgV3JpdGVKU09OIH0gZnJvbSAnLi9pby1oZWxwZXJzLmpzJzsKaW1wb3J0ICogYXMgZGVlcCBmcm9tICcuL2xpYi9kZWVwLmpzJzsKaW1wb3J0ICogYXMgRUNNQVNjcmlwdCBmcm9tICcuL2xpYi9lY21hc2NyaXB0LmpzJzsKaW1wb3J0ICogYXMgZnMgZnJvbSAnLi9saWIvZmlsZXN5c3RlbS5qcyc7CmltcG9ydCB7IGRlZmluZSwgcHJvcGVydGllcywgbm9uZW51bWVyYWJsZSwgZGVmaW5lR2V0dGVyLCBnZXRPcHQsIGlzT2JqZWN0LCBsYXp5UHJvcGVydHksIG1lbW9pemUsIHB1c2hVbmlxdWUsIHRvQXJyYXlCdWZmZXIsIHRvU3RyaW5nLCB3ZWFrTWFwcGVyIH0gZnJvbSAnLi9saWIvbWlzYy5qcyc7CmltcG9ydCB7IGV4dGVuZEFycmF5IH0gZnJvbSAnZXh0ZW5kQXJyYXknOwppbXBvcnQgKiBhcyBwYXRoIGZyb20gJy4vbGliL3BhdGguanMnOwppbXBvcnQgeyBQb2ludGVyIH0gZnJvbSAnLi9saWIvcG9pbnRlci5qcyc7CmltcG9ydCBUcmVlIGZyb20gJy4vbGliL3RyZWUuanMnOwppbXBvcnQgeyBzcGxpdCwgZGVjYW1lbGl6ZSwgY2FtZWxpemUsIGNsYXNzTmFtZSwgbWFwV3JhcHBlciB9IGZyb20gJ3V0aWwnOwppbXBvcnQgeyBTaGVsbCwgU3Bhd24gfSBmcm9tICcuL29zLWhlbHBlcnMuanMnOwppbXBvcnQgKiBhcyBUZXJtaW5hbCBmcm9tICd0ZXJtaW5hbCc7CmltcG9ydCB7IENvbnNvbGUgfSBmcm9tICdjb25zb2xlJzsKaW1wb3J0IHsgUkVQTCB9IGZyb20gJ3JlcGwnOwppbXBvcnQgeyBpbnNwZWN0IH0gZnJvbSAnaW5zcGVjdCc7Ci8vaW1wb3J0IFBvcnRhYmxlU3Bhd24gZnJvbSAnLi9saWIvc3Bhd24uanMnOwoKZXh0ZW5kQXJyYXkoQXJyYXkucHJvdG90eXBlKTsKCmdsb2JhbFRoaXMuZnMgPSBmczsKCmxldCBwYXJhbXM7CmxldCBmaWxlczsKbGV0IHNwYXduLCBiYXNlLCBjbWRoaXN0LCBjb25maWc7CmxldCBkZWZzLCBpbmNsdWRlcywgbGlicywgc291cmNlczsKbGV0IGxpYmRpcnMgPSBbCiAgJy9saWInLAogICcvbGliL2kzODYtbGludXgtZ251JywKICAnL2xpYi94ODZfNjQtbGludXgtZ251JywKICAnL2xpYjMyJywKICAnL2xpYngzMicsCiAgJy91c3IvbGliJywKICAnL3Vzci9saWIvaTM4Ni1saW51eC1nbnUnLAogICcvdXNyL2xpYi9pMzg2LWxpbnV4LWdudS9pNjg2L3NzZTInLAogICcvdXNyL2xpYi9pMzg2LWxpbnV4LWdudS9zc2UyJywKICAnL3Vzci9saWIveDg2XzY0LWxpbnV4LWdudScsCiAgJy91c3IvbGliL3g4Nl82NC1saW51eC1nbnUvbGliZmFrZXJvb3QnLAogICcvdXNyL2xpYjMyJywKICAnL3Vzci9saWJ4MzInLAogICcvdXNyL2xvY2FsL2xpYicsCiAgJy91c3IvbG9jYWwvbGliL2kzODYtbGludXgtZ251JywKICAnL3Vzci9sb2NhbC9saWIveDg2XzY0LWxpbnV4LWdudScsCl07CmxldCBsaWJkaXJzMzIgPSBsaWJkaXJzLmZpbHRlcihkID0+IC8oMzIkfGlbMC05XTg2KS8udGVzdChkKSk7CmxldCBsaWJkaXJzNjQgPSBsaWJkaXJzLmZpbHRlcihkID0+ICEvKDMyJHxpWzAtOV04NikvLnRlc3QoZCkpOwoKY29uc3QgdHJhY2VQcm94eSA9IChvYmosIGhhbmRsZXIpID0+IHsKICBsZXQgcHJveHk7CiAgaGFuZGxlciA9IC8qaGFuZGxlciB8fCAqLyBmdW5jdGlvbihuYW1lLCBhcmdzKSB7CiAgICBjb25zb2xlLmxvZyhgQ2FsbGluZyBtZXRob2QgJyR7bmFtZX0nOmAsIC4uLmFyZ3MpOwogIH07CiAgLy9jb25zb2xlLmxvZygnaGFuZGxlcicsIHsgaGFuZGxlciB9LCBoYW5kbGVyICsgJycpOwogIHByb3h5ID0gbmV3IFByb3h5KG9iaiwgewogICAgZ2V0KHRhcmdldCwga2V5LCByZWNlaXZlcikgewogICAgICBsZXQgbWVtYmVyID0gUmVmbGVjdC5nZXQob2JqLCBrZXksIHJlY2VpdmVyKTsKICAgICAgaWYoMCAmJiB0eXBlb2YgbWVtYmVyID09ICdmdW5jdGlvbicpIHsKICAgICAgICBsZXQgbWV0aG9kID0gbWVtYmVyOyAvLyBtZW1iZXIuYmluZChvYmopOwogICAgICAgIG1lbWJlciA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgLy8gICAgICAgICAgaGFuZGxlci5jYWxsKHJlY2VpdmVyLCBrZXksIGFyZ3VtZW50cyk7CiAgICAgICAgICByZXR1cm4gbWV0aG9kLmFwcGx5KG9iaiwgYXJndW1lbnRzKTsKICAgICAgICB9OwogICAgICAgIG1lbWJlciA9IG1ldGhvZC5iaW5kKG9iaik7CiAgICAgICAgY29uc29sZS5sb2coJ1V0aWwudHJhY2VQcm94eScsIGtleSwgKG1lbWJlciArICcnKS5yZXBsYWNlKC9cblxzKy9nLCAnICcpLnNwbGl0KGxpbmVTcGxpdClbMF0pOwogICAgICB9CiAgICAgIHJldHVybiBtZW1iZXI7CiAgICB9LAogIH0pOwogIHJldHVybiBwcm94eTsKfTsKCmNvbnN0IENvbmNhdEl0ZXJhdG9yID0gaXRlcmF0b3IgPT4gewogIGxldCByZXN1bHQsCiAgICBzID0gJyc7CgogIGlmKCEoJ25leHQnIGluIGl0ZXJhdG9yKSkgewogICAgaWYoU3ltYm9sLml0ZXJhdG9yIGluIGl0ZXJhdG9yKSBpdGVyYXRvciA9IGl0ZXJhdG9yW1N5bWJvbC5pdGVyYXRvcl0oKTsKICB9CgogIHdoaWxlKChyZXN1bHQgPSBpdGVyYXRvci5uZXh0KCkpICYmICFyZXN1bHQuZG9uZSkgewogICAgaWYocyAhPSAnJykgcyArPSAnXG4nOwogICAgcyArPSByZXN1bHQudmFsdWU7CiAgfQoKICByZXR1cm4gczsKfTsKCmNvbnN0IFN0cmluZ0dlbmVyYXRvciA9CiAgZ2VuID0+CiAgKC4uLmFyZ3MpID0+IHsKICAgIGNvbnN0IGl0ZXJhdG9yID0gZ2VuKC4uLmFyZ3MpOwoKICAgIHJldHVybiBPYmplY3QuYXNzaWduKGl0ZXJhdG9yLCB7CiAgICAgIHRvU3RyaW5nKCkgewogICAgICAgIHJldHVybiBDb25jYXRJdGVyYXRvcih0aGlzKTsKICAgICAgfSwKICAgIH0pOwogIH07Cgphc3luYyBmdW5jdGlvbiBJbXBvcnRNb2R1bGUobW9kdWxlUGF0aCwgLi4uYXJncykgewogIGxldCBkb25lID0gZmFsc2UsCiAgICBtb2R1bGVOYW1lID0gcGF0aC5iYXNlbmFtZShtb2R1bGVQYXRoLCAnLmpzJyk7CgogIHJldHVybiBhd2FpdCBpbXBvcnQobW9kdWxlUGF0aCkudGhlbihtb2R1bGUgPT4gewogICAgZG9uZSA9IHRydWU7CiAgICBtb2R1bGUgPSBPYmplY3QuY3JlYXRlKAogICAgICBudWxsLAogICAgICBnZXRNZW1iZXJOYW1lcyhtb2R1bGUsIEluZmluaXR5LCAwKS5yZWR1Y2UoCiAgICAgICAgKGFjYywgaXRlbSkgPT4gKHsKICAgICAgICAgIC4uLmFjYywKICAgICAgICAgIFtpdGVtXTogeyB2YWx1ZTogbW9kdWxlW2l0ZW1dLCBlbnVtZXJhYmxlOiB0cnVlIH0sCiAgICAgICAgfSksCiAgICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMobW9kdWxlKSwKICAgICAgKSwKICAgICk7CgogICAgaWYoIWdsb2JhbFRoaXMubW9kdWxlcykgZ2xvYmFsVGhpcy5tb2R1bGVzID0ge307CiAgICBnbG9iYWxUaGlzLm1vZHVsZXNbbW9kdWxlTmFtZV0gPSBtb2R1bGU7CgogICAgT2JqZWN0LmFzc2lnbihnbG9iYWxUaGlzLCBtb2R1bGUpOwogICAgcmV0dXJuIHsgbW9kdWxlTmFtZSwgbW9kdWxlUGF0aCwgbW9kdWxlIH07CiAgfSk7CiAgLyouY2F0Y2goZSA9PiB7CiAgICAgIGRvbmUgPSB0cnVlOwogICAgICByZXR1cm4geyBtb2R1bGVOYW1lLCBtb2R1bGVQYXRoLCBtb2R1bGU6IGUubWVzc2FnZSB9OwogICAgfSkqLwp9CgpmdW5jdGlvbiBDb21tYW5kTGluZSgpIHsKICBsZXQgbG9nID0gY29uc29sZS5yZWFsbG9nOwogIC8vIGxldCBvdXRwdXRMb2cgPSBmcy5vcGVuU3luYygnb3V0cHV0LmxvZycsICd3KycpOwoKICBsZXQgcmVwbDsKICByZXBsID0gZ2xvYmFsVGhpcy5yZXBsID0gbmV3IFJFUEwoJ0FTVCcsIGZhbHNlKTsKCiAgbGV0IGNmZyA9IFJlYWRKU09OKGNvbmZpZyk7CgogIGlmKGNmZykgT2JqZWN0LmFzc2lnbihjb25zb2xlLm9wdGlvbnMsIGNmZy5pbnNwZWN0T3B0aW9ucyk7CgogIHJlcGwuaW1wb3J0TW9kdWxlID0gSW1wb3J0TW9kdWxlOwogIHJlcGwuaGlzdG9yeSA9IExvYWRIaXN0b3J5KGNtZGhpc3QpOwogIE9iamVjdC5hc3NpZ24ocmVwbC5kaXJlY3RpdmVzLCB7CiAgICBjOiBbCiAgICAgICguLi5hcmdzKSA9PiB7CiAgICAgICAgQ29tcGlsZSguLi5hcmdzKTsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0sCiAgICAgICdjb21waWxlIHNvdXJjZScsCiAgICBdLAogICAgbDogWwogICAgICAoLi4uYXJncykgPT4gewogICAgICAgIFByb2Nlc3NGaWxlKC4uLmFyZ3MpOwogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfSwKICAgICAgJ2xvYWQgc291cmNlIGZpbGUnLAogICAgXSwKICAgIGk6IFsKICAgICAgKG1vZHVsZSwgLi4uYXJncykgPT4gewogICAgICAgIGNvbnNvbGUubG9nKCdhcmdzJywgYXJncyk7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIHJldHVybiByZXF1aXJlKG1vZHVsZSk7CiAgICAgICAgfSBjYXRjaChlKSB7fQogICAgICAgIGltcG9ydChtb2R1bGUpLnRoZW4obSA9PiAoZ2xvYmFsVGhpc1ttb2R1bGVdID0gbSkpOwogICAgICB9LAogICAgICAnaW1wb3J0IG1vZHVsZScsCiAgICBdLAogIH0pOwogIHJlcGwuc2hvdyA9IHZhbHVlID0+IHsKICAgIGxldCBmaXJzdCwgc3RyOwogICAgaWYoaXNPYmplY3QodmFsdWUpICYmIChmaXJzdCA9IHZhbHVlLmZpcnN0ID8/IHZhbHVlWzBdKSAmJiBpc09iamVjdChmaXJzdCkgJiYgKCdpZCcgaW4gZmlyc3QgfHwgJ2tpbmQnIGluIGZpcnN0KSkgc3RyID0gVGFibGUodmFsdWUpOwogICAgZWxzZSBpZih0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycpIHN0ciA9IHZhbHVlOwogICAgZWxzZQogICAgICBzdHIgPSBpbnNwZWN0KHZhbHVlLCB7CiAgICAgICAgLi4uKGNmZz8uaW5zcGVjdE9wdGlvbnMgPz8ge30pLAogICAgICAgIC4uLnJlcGwuaW5zcGVjdE9wdGlvbnMsCiAgICAgICAgaGlkZUtleXM6IFsnbG9jJywgJ3JhbmdlJ10sCiAgICAgIH0pOwogICAgc3RkLm91dC5wdXRzKHN0ciArICdcbicpOwogIH07CgogIHJlcGwubG9hZFNhdmVPcHRpb25zKCk7CiAgcmVwbC5pbnNwZWN0T3B0aW9ucyA/Pz0gY29uc29sZS5vcHRpb25zOwoKICBnbG9iYWxUaGlzLnByaW50Tm9kZSA9IGFyZyA9PiB7CiAgICBjb25zb2xlLmxvZyhOb2RlUHJpbnRlcigkLmRhdGEpLnByaW50KGFyZykpOwogIH07CgogIC8qbGV0IGRlYnVnTG9nID0gZnMub3BlblN5bmMoJ2RlYnVnLmxvZycsICdhJyk7CiAgcmVwbC5kZWJ1Z0xvZyA9IGRlYnVnTG9nOwogIHJlcGwuZGVidWcgPSAoLi4uYXJncykgPT4gewogICAgbGV0IHMgPSAnJzsKICAgIGZvcihsZXQgYXJnIG9mIGFyZ3MpIHsKICAgICAgaWYocykgcyArPSAnICc7CiAgICAgIGlmKHR5cGVvZiBhcmcgIT0gJ3N0cnBpbmcnIHx8IGFyZy5pbmRleE9mKCdceDFiJykgPT0gLTEpIHMgKz0gaW5zcGVjdChhcmcsIHsgZGVwdGg6IEluZmluaXR5LCBkZXB0aDogNiwgY29tcGFjdDogZmFsc2UgfSk7CiAgICAgIGVsc2UgcyArPSBhcmc7CiAgICB9CiAgICBmcy53cml0ZVN5bmMoZGVidWdMb2csIHMgKyAnXG4nKTsKICAgIGlmKGRlYnVnTG9nLmZsdXNoKSBkZWJ1Z0xvZy5mbHVzaCgpOwogIH07Ki8KCiAgcmVwbC5hZGRDbGVhbnVwSGFuZGxlcigoKSA9PiB7CiAgICBUZXJtaW5hbC5tb3VzZXRyYWNraW5nRGlzYWJsZSgpOwogICAgbGV0IGhpc3QgPSByZXBsLmhpc3RvcnkuZmlsdGVyKChpdGVtLCBpLCBhKSA9PiBhLmxhc3RJbmRleE9mKGl0ZW0pID09IGkpOwogICAgV3JpdGVGaWxlKAogICAgICBjbWRoaXN0LAogICAgICBoaXN0CiAgICAgICAgLmZpbHRlcihlbnRyeSA9PiAoZW50cnkgKyAnJykudHJpbSgpICE9ICcnKQogICAgICAgIC5tYXAoZW50cnkgPT4gZW50cnkucmVwbGFjZSgvXG4vZywgJ1xcbicpICsgJ1xuJykKICAgICAgICAuam9pbignJyksCiAgICApOwoKICAgIGxldCBjZmcgPSB7IGluc3BlY3RPcHRpb25zOiBjb25zb2xlLm9wdGlvbnMgfTsKICAgIFdyaXRlSlNPTihjb25maWcsIGNmZyk7CgogICAgY29uc29sZS5sb2coYEVYSVQgKHdyb3RlICR7aGlzdC5sZW5ndGh9IGhpc3RvcnkgZW50cmllcylgKTsKICAgIHN0ZC5leGl0KDApOwogIH0pOwoKICAvL2F0ZXhpdCgoKSA9PiByZXBsLmNsZWFudXAoKSk7CgogIHJlcGwgPSB0cmFjZVByb3h5KHJlcGwpOwoKICBpZihwYXJhbXMuZXhlYykgcmVwbC5ldmFsQW5kUHJpbnQocGFyYW1zLmV4ZWMpOwogIGVsc2UgcmVwbC5ydW4oZmFsc2UpOwp9CgpmdW5jdGlvbiogSW5jbHVkZUFsbChkaXIsIG1heERlcHRoID0gSW5maW5pdHksIHByZWQgPSBlbnRyeSA9PiAvXC5bY2hdJC8udGVzdChlbnRyeSkpIHsKICBmb3IobGV0IGVudHJ5IG9mIFJlY3Vyc2l2ZURpckl0ZXJhdG9yKGRpciwgbWF4RGVwdGgsIHByZWQpKSB5aWVsZCBgI2luY2x1ZGUgIiR7ZW50cnl9ImA7Cn0KCmZ1bmN0aW9uIFNlbGVjdExvY2F0aW9ucyhub2RlKSB7CiAgcmV0dXJuIFsuLi5EZWVwU2VsZWN0KG5vZGUsIG4gPT4gWydvZmZzZXQnLCAnbGluZScsICdmaWxlJ10uc29tZShwcm9wID0+IG5bcHJvcF0gIT09IHVuZGVmaW5lZCkpXTsKfQoKZnVuY3Rpb24gTG9jYXRpb25TdHJpbmcobG9jKSB7CiAgaWYodHlwZW9mIGxvYyA9PSAnb2JqZWN0JyAmJiBsb2MgIT0gbnVsbCkgewogICAgbGV0IGZpbGUgPSBsb2MuZmlsZSA/PyAobG9jLmluY2x1ZGVkRnJvbSAmJiBsb2MuaW5jbHVkZWRGcm9tLmZpbGUpOwoKICAgIGlmKHR5cGVvZiBsb2MubGluZSA9PSAnbnVtYmVyJykgcmV0dXJuIGAke2ZpbGUgPyBmaWxlICsgJzonIDogJyd9JHtsb2MubGluZX0ke3R5cGVvZiBsb2MuY29sID09ICdudW1iZXInID8gJzonICsgbG9jLmNvbCA6ICcnfWA7CiAgICByZXR1cm4gYCR7ZmlsZSA/IGZpbGUgOiAnJ31AJHtsb2Mub2Zmc2V0fWA7CiAgfQp9Cgpjb25zdCBUeXBlTWFwID0gd2Vha01hcHBlcihub2RlID0+IG5ldyBUeXBlKG5vZGUpKTsKCmZ1bmN0aW9uIFN0cnVjdHMobm9kZXMpIHsKICByZXR1cm4gbm9kZXMKICAgIC5maWx0ZXIobm9kZSA9PiBub2RlLmlubmVyICYmIG5vZGUuaW5uZXIuc29tZShmaWVsZCA9PiBmaWVsZC5raW5kID09ICdGaWVsZERlY2wnKSkKICAgIC5tYXAobm9kZSA9PiBbCiAgICAgIC8vZGVlcC5maW5kKG5vZGUsIG4gPT4gdHlwZW9mIG4ubGluZSA9PSAnbnVtYmVyJyksCiAgICAgIG5ldyBMb2NhdGlvbihHZXRMb2Mobm9kZSkpLAogICAgICAoKG5vZGUudGFnVXNlZCA/IG5vZGUudGFnVXNlZCArICcgJyA6ICcnKSArIChub2RlLm5hbWUgPz8gJycpKS50cmltKCksCiAgICAgIG5ldyBNYXAobm9kZS5pbm5lci5tYXAoKGZpZWxkLCBpKSA9PiAoL0F0dHIvLnRlc3QoZmllbGQua2luZCkgPyBbU3ltYm9sKGZpZWxkLmtpbmQpLCBmaWVsZC5pZF0gOiBbZmllbGQubmFtZSB8fCBpLCAoZmllbGQudHlwZSAmJiBUeXBlRmFjdG9yeShmaWVsZC50eXBlKSkgfHwgZmllbGQua2luZF0pKSksCiAgICBdKTsKICAvKi5tYXAobm9kZSA9PiB0eXBlcyhub2RlKSkqLwp9CgpmdW5jdGlvbiBUYWJsZShsaXN0LCBwcmVkID0gKG4sIGwpID0+IHRydWUpIHsKICBsZXQgZW50cmllcyA9IFsuLi5saXN0XS5tYXAoKG4sIGkpID0+IChuID8gW2ksIExvY2F0aW9uU3RyaW5nKEdldExvYyhuKSksIG5dIDogdW5kZWZpbmVkKSkuZmlsdGVyKGUgPT4gZSk7CiAgbGV0IHR5cGVLZXkgPSAna2luZCcgaW4gbGlzdFswXSA/ICdraW5kJyA6ICd0eXBlJzsKICBsZXQga2V5cyA9IFsnaWQnLCB0eXBlS2V5LCAnbmFtZSddLmZpbHRlcihrID0+ICEhayk7CiAgbGV0IGl0ZW1zID0gZW50cmllcy5maWx0ZXIoKFtpLCBsLCBuXSkgPT4gcHJlZChuLCBsKSk7CiAgY29uc3QgZmlyc3QgPSBpdGVtc1swXVsyXTsKCiAgaWYoL0Z1bmN0aW9uLy50ZXN0KGZpcnN0W3R5cGVLZXldKSkgewogICAga2V5cyA9IFsKICAgICAgLi4ua2V5cywKICAgICAgZnVuY3Rpb24gcmV0dXJuVHlwZShuKSB7CiAgICAgICAgaWYobi50eXBlICYmIHR5cGVvZiBuLnR5cGUgPT0gJ29iamVjdCcpIHsKICAgICAgICAgIGNvbnN0IHsgcXVhbFR5cGUgfSA9IG4udHlwZTsKICAgICAgICAgIHJldHVybiBxdWFsVHlwZS5yZXBsYWNlKC9ccypcKC4qJC9nLCAnJyk7CiAgICAgICAgfQogICAgICAgIGlmKG5bdHlwZUtleV0pIHJldHVybiBuW3R5cGVLZXldOwogICAgICB9LAogICAgICBmdW5jdGlvbiBudW1BcmdzKG4pIHsKICAgICAgICBsZXQgcGFyYW1zID0gR2V0UGFyYW1zKG4pOwogICAgICAgIHJldHVybiBwYXJhbXMgPyBwYXJhbXMubGVuZ3RoIDogdW5kZWZpbmVkOwogICAgICB9LAogICAgICBmdW5jdGlvbiBQYXJhbXMobikgewogICAgICAgIGxldCBwYXJhbXMgPSBHZXRQYXJhbXMobik7CiAgICAgICAgcmV0dXJuIHBhcmFtcyA/IHBhcmFtcy5tYXAocCA9PiBQcmludEFzdChwKSkuam9pbignLCcpIDogdW5kZWZpbmVkOwogICAgICB9LAogICAgXTsKICB9CiAga2V5cyA9IFsnbicsIC4uLmtleXMsICdsb2NhdGlvbiddOwogIGNvbnN0IG5hbWVzID0ga2V5cy5tYXAoayA9PiAodHlwZW9mIGsgPT0gJ2Z1bmN0aW9uJyA/IGsubmFtZSA6IGspKTsKICBsZXQgcm93cyA9IGl0ZW1zLm1hcCgoW2ksIGwsIG5dKSA9PiBPYmplY3QuZnJvbUVudHJpZXMoW1snbicsIGldLCAuLi5rZXlzLnNsaWNlKDEsIC0xKS5tYXAoKGssIGopID0+IFtuYW1lc1tqICsgMV0sICh0eXBlb2YgayA9PSAnc3RyaW5nJyA/IG5ba10gOiBrKG4pKSA/PyAnJ10pLCBbJ2xvY2F0aW9uJywgbF1dKSk7CiAgbGV0IHNpemVzID0ge307CgogIGZvcihsZXQgcm93IG9mIHJvd3MpIHsKICAgIGZvcihsZXQgW2osIGldIG9mIG5hbWVzLmVudHJpZXMoKSkgewogICAgICBjb25zdCBjb2wgPSByb3dbaV0gKyAnJzsKICAgICAgaWYoKHNpemVzW2ldID8/IDApIDwgY29sLmxlbmd0aCkgc2l6ZXNbaV0gPSBjb2wubGVuZ3RoOwogICAgfQogIH0KCiAgbGV0IHdpZHRoID0gbmFtZXMucmVkdWNlKChhY2MsIG5hbWUpID0+IChhY2MgPyBhY2MgKyAzICsgc2l6ZXNbbmFtZV0gOiBzaXplc1tuYW1lXSksIDApOwogIGlmKHdpZHRoID4gcmVwbC50ZXJtV2lkdGgpIHNpemVzWydQYXJhbXMnXSAtPSB3aWR0aCAtIHJlcGwudGVybVdpZHRoOwoKICBmdW5jdGlvbiBwYWRUcnVuYyhsZW4sIHBhZCA9ICcgJykgewogICAgbGV0IG0gPSAncGFkJyArIChsZW4gPj0gMCA/ICdFbmQnIDogJ1N0YXJ0Jyk7CiAgICBsZW4gPSBNYXRoLmFicyhsZW4pOwoKICAgIHJldHVybiBzID0+IHsKICAgICAgcyA9IHMgKyAnJzsKICAgICAgcmV0dXJuIHMubGVuZ3RoID4gbGVuID8gcy5zbGljZSgwLCBsZW4pIDogc1ttXShsZW4sIHBhZCk7CiAgICB9OwogIH0KCiAgY29uc3QgdHJ1bmMgPSBuYW1lcy5tYXAoKG5hbWUsIGkpID0+IHBhZFRydW5jKChpID09IDAgPyAtMSA6IDEpICogc2l6ZXNbbmFtZV0pKTsKICBjb25zdCBwYWQgPSAoY29scywgcGFkLCBzZXApID0+IHsKICAgIGlmKCFBcnJheS5pc0FycmF5KGNvbHMpKSBjb2xzID0gbmFtZXMubWFwKChrZXksIGkpID0+IGNvbHNba2V5XSk7CiAgICByZXR1cm4gY29scwogICAgICAubWFwKChzLCBjb2wpID0+IHRydW5jW2NvbF0ocywgcGFkKSkKICAgICAgLmpvaW4oc2VwID8/ICcg4pSCICcpCiAgICAgIC50cmltRW5kKCk7CiAgfTsKCiAgcmV0dXJuICgKICAgIHBhZChuYW1lcykgKwogICAgJ1xuJyArCiAgICBwYWQoCiAgICAgIG5hbWVzLnJlZHVjZSgoYWNjLCBuKSA9PiAoeyAuLi5hY2MsIFtuXTogJycgfSksIHt9KSwKICAgICAgJ+KUgCcsCiAgICAgICfilIDilLzilIAnLAogICAgKSArCiAgICAnXG4nICsKICAgIHJvd3MucmVkdWNlKChhY2MsIHJvdykgPT4gewogICAgICByZXR1cm4gYWNjICsgcGFkKHJvdykuc2xpY2UoMCwgcmVwbC5jb2x1bW5zKSArICdcbic7CiAgICB9LCAnJykKICApOwp9CgpmdW5jdGlvbiBQcmludFJhbmdlKHJhbmdlLCBmaWxlKSB7CiAgaWYoJ3JhbmdlJyBpbiByYW5nZSkgcmFuZ2UgPSByYW5nZS5yYW5nZTsKCiAgY29uc3QgeyBiZWdpbiwgZW5kIH0gPSByYW5nZTsKCiAgZmlsZSA/Pz0gYmVnaW4uZmlsZSA/PyAkLnNvdXJjZTsKCiAgbGV0IGRhdGEgPSBSZWFkRmlsZShmaWxlLCAndXRmLTgnKTsKICByZXR1cm4gZGF0YSA/IGRhdGEuc2xpY2UoYmVnaW4ub2Zmc2V0LCBlbmQub2Zmc2V0ICsgKGVuZC50b2tMZW4gfCAwKSkgOiBudWxsOwp9CgpmdW5jdGlvbiBPdmVybGFwUmFuZ2UocjEsIHIyKSB7CiAgY29uc3QgR2V0UmFuZ2UgPSByID0+IFtyLmJlZ2luLm9mZnNldCwgci5lbmQub2Zmc2V0ICsgKHIuZW5kLnRva0xlbiB8IDApXTsKICBjb25zdCBJblJhbmdlID0gKGksIHIpID0+IGkgPj0gclswXSAmJiBpIDwgclsxXTsKCiAgcjEgPSBHZXRSYW5nZShyMSk7CiAgcjIgPSBHZXRSYW5nZShyMik7CgogIGlmKEluUmFuZ2UocjFbMF0sIHIyKSB8fCBJblJhbmdlKHIxWzFdLCByMikpIHJldHVybiB0cnVlOwogIGlmKEluUmFuZ2UocjJbMF0sIHIxKSB8fCBJblJhbmdlKHIyWzFdLCByMSkpIHJldHVybiB0cnVlOwoKICByZXR1cm4gZmFsc2U7Cn0KCmZ1bmN0aW9uIFBhcmVudE5vZGUobm9kZSwgYXN0ID0gJC5kYXRhKSB7CiAgbGV0IHAgPSBQYXRoT2Yobm9kZSwgYXN0KTsKCiAgcmV0dXJuIHAudXAoMikuZGVyZWYoYXN0KTsKfQoKZnVuY3Rpb24gTmV4dFNpYmxpbmcobm9kZSwgYXN0ID0gJC5kYXRhKSB7CiAgbGV0IHAgPSBQYXRoT2Yobm9kZSwgYXN0KTsKICBwW3AubGVuZ3RoIC0gMV0gKz0gMTsKCiAgcmV0dXJuIHAuZGVyZWYoYXN0KTsKfQoKZnVuY3Rpb24gUHJldmlvdXNTaWJsaW5nKG5vZGUsIGFzdCA9ICQuZGF0YSkgewogIGxldCBwID0gUGF0aE9mKG5vZGUsIGFzdCk7CiAgcFtwLmxlbmd0aCAtIDFdICs9IDE7CiAgcmV0dXJuIHAuZGVyZWYoYXN0KTsKfQoKZnVuY3Rpb24gRmlyc3RDaGlsZChub2RlLCBhc3QgPSAkLmRhdGEpIHsKICByZXR1cm4gUGF0aE9mKG5vZGUsIGFzdCkuZG93bignaW5uZXInLCAwKS5kZXJlZihhc3QpOwp9CgpmdW5jdGlvbiBMYXN0Q2hpbGQobm9kZSwgYXN0ID0gJC5kYXRhKSB7CiAgbGV0IGEgPSBQYXRoT2Yobm9kZSwgYXN0KS5kb3duKCdpbm5lcicpLmRlcmVmKGFzdCk7CiAgcmV0dXJuIGFbYS5sZW5ndGggLSAxXTsKfQoKZnVuY3Rpb24gVGVybWluYXRlKGV4aXRDb2RlKSB7CiAgY29uc29sZS5sb2coJ1Rlcm1pbmF0ZScsIGV4aXRDb2RlKTsKCiAgZXhpdChleGl0Q29kZSk7Cn0KCmZ1bmN0aW9uIFBhcnNlU3RydWN0cyh0ZXh0KSB7CiAgY29uc3QgcmUgPSAvKFteXG5dKilccj9cbi9nbXk7CiAgbGV0IGxpbmUsCiAgICBmaWVsZHMsCiAgICBzdHJ1Y3RzID0gW107CgogIHdoaWxlKChsaW5lID0gcmUuZXhlYyh0ZXh0KSkpIHsKICAgIGlmKC9eXHMqJC9nLnRlc3QobGluZVsxXSkpIGNvbnRpbnVlOwogICAgbGV0IGNvbHVtbnMgPSBsaW5lWzFdLnNwbGl0KC9ccysvZyk7CgogICAgaWYoaXNOYU4oK2NvbHVtbnNbMV0pKSBjb250aW51ZTsKCiAgICBsZXQgW25hbWVdID0gY29sdW1uczsKCiAgICBpZihmaWVsZHMgJiYgbmFtZVswXSA9PSAnLicpIHsKICAgICAgbGV0IFssIG9mZnNldCwgc2l6ZV0gPSBjb2x1bW5zOwogICAgICBmaWVsZHMucHVzaChbbmFtZSwgK29mZnNldCwgK3NpemVdKTsKICAgIH0gZWxzZSB7CiAgICAgIHN0cnVjdHMucHVzaChbbmFtZSwgeyBzaXplOiArY29sdW1uc1sxXSwgZmllbGRzOiAoZmllbGRzID0gW10pIH1dKTsKICAgIH0KICB9CgogIHJldHVybiBuZXcgTWFwKHN0cnVjdHMpOwp9Cgpjb25zdCBHZW5lcmF0ZUluc3BlY3RTdHJ1Y3QgPSBTdHJpbmdHZW5lcmF0b3IoZnVuY3Rpb24qIChkZWNsLCBpbmNsdWRlcykgewogIGxldCB7IG5hbWUsIG1lbWJlcnMgfSA9IGRlY2w7CgogIGluY2x1ZGVzID8/PSBbZGVjbC5sb2MuZmlsZS5yZXBsYWNlKC9eXC91c3JcL2luY2x1ZGVcLy8sICcnKV07CgogIC8vY29uc29sZS5sb2coJ0dlbmVyYXRlSW5zcGVjdFN0cnVjdCcsIHsgbmFtZSwgbWVtYmVycywgaW5jbHVkZXMgfSk7CgogIHlpZWxkICcjaW5jbHVkZSA8c3RkaW8uaD4nOwogIHlpZWxkICcjaW5jbHVkZSA8c3RkZGVmLmg+JzsKCiAgaWYoTWVtYmVyTmFtZXMobWVtYmVycykuc29tZShuYW1lID0+IC86Ly50ZXN0KG5hbWUpKSkKICAgIHlpZWxkIGAKc2l6ZV90CmJ5dGVfZmlyc3Rub3QoY29uc3Qgdm9pZCogcCwgc2l6ZV90IGxlbiwgdW5zaWduZWQgY2hhciB2KSB7CiAgY29uc3QgdW5zaWduZWQgY2hhciogeDsKICBmb3IoeCA9IHA7IGxlbjsgbGVuLS0sIHgrKykKICAgIGlmKCp4ICE9IHYpIGJyZWFrOwogIHJldHVybiB4IC0gKGNvbnN0IHVuc2lnbmVkIGNoYXIqKXA7Cn0KCnNpemVfdApieXRlX2xhc3Rub3QoY29uc3Qgdm9pZCogcCwgc2l6ZV90IGxlbiwgdW5zaWduZWQgY2hhciB2KSB7CiAgY29uc3QgdW5zaWduZWQgY2hhciogeDsKICBmb3IoeCA9IChjb25zdCB1bnNpZ25lZCBjaGFyKilwICsgbGVuIC0gMTsgbGVuOyBsZW4tLSwgeC0tKQogICAgaWYoKnggIT0gdikgYnJlYWs7CiAgcmV0dXJuIHggLSAoY29uc3QgdW5zaWduZWQgY2hhciopcDsKfQoKc2l6ZV90CmJpdF9maXJzdG5vdCh1bnNpZ25lZCBjaGFyIHYsIHVuc2lnbmVkIGNoYXIgYikgewogIGludCBpOwogIGZvcihpID0gMDsgaSA8IDg7IGkrKywgdiA+Pj0gMSkgCiAgICBpZigodiAmIDEpID09ICFiKSBicmVhazsKICByZXR1cm4gaTsKfQoKc2l6ZV90CmJpdF9sYXN0bm90KHVuc2lnbmVkIGNoYXIgdiwgdW5zaWduZWQgY2hhciBiKSB7CiAgaW50IGk7CiAgZm9yKGkgPSA3OyBpID49IDA7IGktLSkgCiAgICBpZighISh2ICYgKDEgPDwgaSkpID09ICFiKSBicmVhazsKICByZXR1cm4gaSA+PSAwID8gaSA6IDg7Cn0KCnNpemVfdApmaXJzdG5vdChjb25zdCB2b2lkKiBwLCBzaXplX3QgbGVuLCB1bnNpZ25lZCBjaGFyIHYpIHsKIGNvbnN0IGNoYXIqIHggPSBwOwogc2l6ZV90IGkgPSBieXRlX2ZpcnN0bm90KHAsIGxlbiwgdik7CiByZXR1cm4gaSAqIDggKyBiaXRfZmlyc3Rub3QoeFtpXSwgdik7Cn0KCnNpemVfdApsYXN0bm90KGNvbnN0IHZvaWQqIHAsIHNpemVfdCBsZW4sIHVuc2lnbmVkIGNoYXIgdikgewogY29uc3QgdW5zaWduZWQgY2hhciogeCA9IHA7CiBzaXplX3QgaSA9IGJ5dGVfbGFzdG5vdChwLCBsZW4sIHYpOwogcmV0dXJuIGkgKiA4ICsgYml0X2xhc3Rub3QoeFtpXSwgdik7Cn0KCnNpemVfdApiaXRzaXplKGNvbnN0IHZvaWQqIHAsIHNpemVfdCBsZW4pIHsKIHJldHVybiBsYXN0bm90KHAsIGxlbiwgMHhmZikgKyAxIC0gZmlyc3Rub3QocCwgbGVuLCAweGZmKTsKfQoKYDsKCiAgZm9yKGxldCBpbmNsdWRlIG9mIGluY2x1ZGVzKSB5aWVsZCBgI2luY2x1ZGUgIiR7aW5jbHVkZX0iYDsKICB5aWVsZCBgJHtuYW1lfSBzdmFyO2A7CiAgeWllbGQgYGludCBtYWluKCkge2A7CiAgeWllbGQgYCAgcHJpbnRmKCIke25hbWV9ICV6dVxcbiIsIHNpemVvZihzdmFyKSAqIDgpO2A7CgogIGZvcihsZXQgbWVtYmVyIG9mIE1lbWJlck5hbWVzKG1lbWJlcnMpKSB7CiAgICBpZih0cnVlIC8qKHR5cGUgPT0gbnVsbCB8fCB0eXBlb2YgdHlwZS5zaXplID09ICdudW1iZXInKSAmJiBtZW1iZXIgIT0gdW5kZWZpbmVkKi8pIHsKICAgICAgbGV0IGZpZWxkID0gbWVtYmVyLnJlcGxhY2UoLzouKi8sICcnKTsKICAgICAgaWYoLzovLnRlc3QobWVtYmVyKSkgewogICAgICAgIHlpZWxkIGAKICBtZW1zZXQoJnN2YXIsIDB4ZmYsIHNpemVvZihzdmFyKSk7CiAgc3Zhci4ke2ZpZWxkfSA9IDA7CiAgcHJpbnRmKCIuJHtmaWVsZH0gJXp1ICV6aVxcbiIsIGZpcnN0bm90KCZzdmFyLCBzaXplb2Yoc3ZhciksIDB4ZmYpLCBiaXRzaXplKCZzdmFyLCBzaXplb2Yoc3ZhcikpKTtgOwogICAgICB9IGVsc2UgewogICAgICAgIHlpZWxkIGAgIHByaW50ZigiLiR7ZmllbGR9ICV6dSAlenVcXG4iLCBvZmZzZXRvZigke25hbWV9LCAke2ZpZWxkfSkgKiA4LCBzaXplb2Yoc3Zhci4ke2ZpZWxkfSkgKiA4KTtgOwogICAgICB9CiAgICB9CiAgfQoKICB5aWVsZCBgICByZXR1cm4gMDtgOwogIHlpZWxkIGB9YDsKfSk7CgpmdW5jdGlvbiBJbnNwZWN0U3RydWN0KGRlY2wsIGluY2x1ZGVzLCBjb21waWxlciA9ICdjbGFuZycpIHsKICBpZih0eXBlb2YgZGVjbCA9PSAnc3RyaW5nJykgewogICAgbGV0IG5hbWUgPSAoZGVjbC5pbmRleE9mKCcgJykgIT0gLTEgPyAnJyA6ICdzdHJ1Y3QgJykgKyBkZWNsOwogICAgZGVjbCA9IFR5cGUuZ2V0KG5hbWUsICQuZGF0YSk7CiAgICBkZWNsID8/PSAkLmdldFR5cGUobmFtZSk7CiAgICBkZWNsLm5hbWUgPSBuYW1lOwogIH0KICBjb25zb2xlLmxvZygnSW5zcGVjdFN0cnVjdCcsIGRlY2wpOwoKICBjb25zdCBjb2RlID0gWy4uLkdlbmVyYXRlSW5zcGVjdFN0cnVjdChkZWNsLCBpbmNsdWRlcyldLmpvaW4oJ1xuJyk7CiAgY29uc3QgcHJvZ3JhbSA9IGAvdG1wL2luc3BlY3QtJHtkZWNsLm5hbWUucmVwbGFjZSgvIC9nLCAnXycpfWA7CiAgV3JpdGVGaWxlKHByb2dyYW0gKyAnLmMnLCBjb2RlKTsKCiAgbGV0IGNvbW1hbmQgPSBbY29tcGlsZXIsICctTzInLCAnLWcnLCAnLXcnLCAnLW8nLCBwcm9ncmFtLCBwcm9ncmFtICsgJy5jJywgLi4uZmxhZ3NdOwogIGNvbnNvbGUubG9nKCdJbnNwZWN0U3RydWN0JywgeyBjb21tYW5kOiBjb21tYW5kLmpvaW4oJyAnKSB9KTsKCiAgbGV0IHJlc3VsdCA9IG9zLmV4ZWMoY29tbWFuZCk7CgogIGlmKHJlc3VsdCA9PSAwKSB7CiAgICBsZXQgW2ZkLCBzdGRvdXRdID0gb3MucGlwZSgpOwoKICAgIG9zLmV4ZWMoWyhwcm9ncmFtLnN0YXJ0c1dpdGgoJy8nKSA/ICcnIDogYC4vYCkgKyBwcm9ncmFtXSwgeyBzdGRvdXQgfSk7CiAgICBsZXQgb3V0cHV0ID0gZnMucmVhZEFsbChmZCk7CgogICAgbGV0IGxpbmVzID0gb3V0cHV0LnRyaW0oKS5zcGxpdCgnXG4nKTsKICAgIGxldCBmaXJzdExpbmUgPSBsaW5lcy5zaGlmdCgpOwoKICAgIGxldCBbbmFtZSwgc2l6ZV0gPSBbLi4uc3BsaXQoZmlyc3RMaW5lLCBbLi4uZmlyc3RMaW5lXS5sYXN0SW5kZXhPZignICcpKV07CgogICAgbmFtZSA9IG5hbWUucmVwbGFjZSgvXihzdHJ1Y3R8dW5pb258ZW51bSlcIC8sICcnKTsKCiAgICAvL2NvbnNvbGUubG9nKCJsaW5lczoiLCBsaW5lcyk7CiAgICByZXN1bHQgPSBsaW5lcwogICAgICAubWFwKGxpbmUgPT4gKHR5cGVvZiBsaW5lID09ICdzdHJpbmcnID8gbGluZS5zcGxpdCgnICcpIDogbGluZSkpCiAgICAgIC5tYXAobGluZSA9PiBsaW5lLm1hcCgoY29sLCBpKSA9PiAoaXNOYU4oK2NvbCkgPyBjb2wgOiArY29sKSkpCiAgICAgIC5tYXAoKFtmaWVsZCwgb2Zmc2V0LCBzaXplXSkgPT4gW2ZpZWxkLnJlcGxhY2UoLzouKi8sICcnKS5yZXBsYWNlKC9eXC4vLCBuYW1lICsgJy4nKSwgb2Zmc2V0LCBzaXplXSk7CgogICAgbGV0IGVuZCA9IDA7CiAgICByZXN1bHQgPSByZXN1bHQucmVkdWNlKChhY2MsIGxpbmUpID0+IHsKICAgICAgaWYoYWNjLmxlbmd0aCkgewogICAgICAgIGlmKGVuZCA8IGFjYy5sYXN0WzFdICsgYWNjLmxhc3RbMl0pIGVuZCA9IGFjYy5sYXN0WzFdICsgYWNjLmxhc3RbMl07CgogICAgICAgIGlmKGVuZCA8IGxpbmVbMV0pIGFjYy5wdXNoKFtudWxsLCBlbmQsIGxpbmVbMV0gLSBlbmRdKTsKICAgICAgfQogICAgICBhY2MucHVzaChsaW5lKTsKICAgICAgcmV0dXJuIGFjYzsKICAgIH0sIFtdKTsKCiAgICByZXN1bHQudW5zaGlmdChbbmFtZSwgJy0nLCArc2l6ZV0pOwoKICAgIGRlZmluZShyZXN1bHQsIHsKICAgICAgdG9TdHJpbmcoc2VwID0gJyAnKSB7CiAgICAgICAgcmV0dXJuIHRoaXMubWFwKGxpbmUgPT4gbGluZS5qb2luKHNlcCkucmVwbGFjZSgnLicsICcgJykpLmpvaW4oJ1xuJyk7CiAgICAgIH0sCiAgICB9KTsKICB9CgogIHJldHVybiByZXN1bHQ7Cn0KCmZ1bmN0aW9uIFJvdW5kVG8odmFsdWUsIGFsaWduKSB7CiAgcmV0dXJuIE1hdGguZmxvb3IoKHZhbHVlICsgKGFsaWduIC0gMSkpIC8gYWxpZ24pICogYWxpZ247Cn0KCmZ1bmN0aW9uIE1ha2VTdHJ1Y3RDbGFzcyhkZWNsLCBmaWxlbmFtZSkgewogIGxldCBjb2RlID0gWy4uLkdlbmVyYXRlU3RydWN0Q2xhc3MoZGVjbCldLmpvaW4oJ1xuJyk7CgogIFdyaXRlRmlsZSgoZmlsZW5hbWUgPz8gZGVjbC5uYW1lLnJlcGxhY2UoL1teQS1aYS16MC05X10vZywgJy0nKSkgKyAnLmpzJywgY29kZSk7CgogIGlmKCFmaWxlbmFtZSkgcmV0dXJuIGNvZGU7Cn0KCmZ1bmN0aW9uKiBHZW5lcmF0ZVN0cnVjdENsYXNzKGRlY2wsIGZmaVByZWZpeCA9ICcnKSB7CiAgbGV0IG5hbWU7CgogIGlmKGRlY2wgaW5zdGFuY2VvZiBUeXBlZGVmRGVjbCkgewogICAgbmFtZSA9IGRlY2wubmFtZTsKICAgIGRlY2wgPSBkZWNsLnR5cGU7CiAgfQoKICBsZXQgeyBzaXplLCBtZW1iZXJzID0gW10gfSA9IGRlY2w7CiAgbmFtZSA/Pz0gZGVjbC5uYW1lOwoKICBsZXQgY2xhc3NOYW1lID0gbmFtZS5yZXBsYWNlKC9zdHJ1Y3RccyovLCAnJyk7CgogIHlpZWxkIGBjbGFzcyAke2NsYXNzTmFtZX0gZXh0ZW5kcyBBcnJheUJ1ZmZlciB7YDsKICB5aWVsZCBgICBjb25zdHJ1Y3RvcihvYmogPSB7fSkge1xuICAgIHN1cGVyKCR7c2l6ZX0pO1xuICAgIE9iamVjdC5hc3NpZ24odGhpcywgb2JqKTtcbiAgfWA7CiAgeWllbGQgYCAgZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkgeyByZXR1cm4gXGBbJHtuYW1lfSBAIFwke3RoaXN9IF1cYDsgfWA7CgogIGxldCBmaWVsZHMgPSBbXSwKICAgIG9mZnNldCA9IDA7CgogIGNvbnNvbGUubG9nKCdHZW5lcmF0ZVN0cnVjdENsYXNzJywgeyBkZWNsLCBtZW1iZXJzIH0pOwoKICBmb3IobGV0IFtuYW1lLCB0eXBlXSBvZiBtZW1iZXJzKSB7CiAgICBpZigvcmVzZXJ2ZWQvLnRlc3QobmFtZSkpIGNvbnRpbnVlOwoKICAgIGlmKHR5cGUuc2l6ZSA9PSA4KSBvZmZzZXQgPSBSb3VuZFRvKG9mZnNldCwgOCk7CiAgICBsZXQgZGVzdWdhcmVkID0gdHlwZS5kZXN1Z2FyZWQgJiYgdHlwZS5kZXN1Z2FyZWQgIT0gdHlwZSA/IGAgKCR7dHlwZS5kZXN1Z2FyZWR9KWAgOiAnJzsKICAgIGxldCBwb2ludGVyID0gdHlwZS5wb2ludGVyOwoKICAgIHlpZWxkICcnOwoKICAgIGxldCBzdWJzY3JpcHQgPSB0eXBlLnN1YnNjcmlwdCA/PyAnJzsKCiAgICB5aWVsZCBgICAvKiAke29mZnNldH06ICR7dHlwZX0ke2Rlc3VnYXJlZH0gJHtuYW1lfSR7c3Vic2NyaXB0fSAqL2A7CgogICAgdHJ5IHsKICAgICAgeWllbGQqIEdlbmVyYXRlR2V0U2V0KG5hbWUsIG9mZnNldCwgdHlwZSwgZmZpUHJlZml4KS5tYXAobGluZSA9PiBgICAke2xpbmV9YCk7CiAgICB9IGNhdGNoKGUpIHt9CgogICAgZmllbGRzLnB1c2gobmFtZSk7CgogICAgb2Zmc2V0ICs9IFJvdW5kVG8odHlwZS5zaXplLCA0KTsKICB9CgogIHlpZWxkICcnOwogIHlpZWxkIGAgIHN0YXRpYyBmcm9tKGFkZHJlc3MpIHtcbiAgICBsZXQgcmV0ID0gJHtmZmlQcmVmaXh9dG9BcnJheUJ1ZmZlcihhZGRyZXNzLCAke29mZnNldH0pO1xuICAgIHJldHVybiBPYmplY3Quc2V0UHJvdG90eXBlT2YocmV0LCAke2NsYXNzTmFtZX0ucHJvdG90eXBlKTtcbiAgfWA7CiAgeWllbGQgJyc7CgogIHlpZWxkIGAgIHRvU3RyaW5nKCkge1xuICAgIGNvbnN0IHsgJHtmaWVsZHMuam9pbignLCAnKX0gfSA9IHRoaXM7XG4gICAgcmV0dXJuIFxgJHtuYW1lfSB7JHtbLi4ubWVtYmVyc10KICAgIC5tYXAoKFtmaWVsZCwgbWVtYmVyXSkgPT4gJ1xcblxcdC4nICsgZmllbGQgKyAnID0gJyArIChtZW1iZXIuaXNQb2ludGVyKCkgPyAnMHgnIDogJycpICsgJyR7JyArIGZpZWxkICsgKG1lbWJlci5pc1BvaW50ZXIoKSA/ICcudG9TdHJpbmcoMTYpJyA6ICcnKSArICd9JykKICAgIC5qb2luKCcsJyl9XFxufVxgO1xuICB9YDsKICB5aWVsZCAnfSc7Cn0KCmZ1bmN0aW9uIEdlbmVyYXRlR2V0U2V0KG5hbWUsIG9mZnNldCwgdHlwZSwgZmZpUHJlZml4KSB7CiAgY29uc3QgeyBzaXplLCBzaWduZWQgfSA9IHR5cGU7CiAgY29uc3QgZmxvYXRpbmcgPSB0eXBlLmlzRmxvYXRpbmdQb2ludCgpOwogIGNvbnN0IHBvaW50ZXIgPSB0eXBlLmdldFBvaW50ZXIoJC5kYXRhKTsKCiAgbGV0IGN0b3IgPSBCeXRlTGVuZ3RoMlR5cGVkQXJyYXkoc2l6ZSwgc2lnbmVkLCBmbG9hdGluZyk7CiAgbGV0IHRvSGV4ID0gdiA9PiB2OwoKICBpZih0eXBlLmlzUG9pbnRlcigpKSB0b0hleCA9IHYgPT4gYCcweCcrJHt2fS50b1N0cmluZygxNilgOwoKICBjb25zdCBhID0gW107CgogIGlmKHBvaW50ZXIpIHsKICAgIGNvbnN0IHsgbmFtZSwgc2l6ZSwgc2lnbmVkLCBkZXN1Z2FyZWQgfSA9IHBvaW50ZXI7CiAgICBhLnVuc2hpZnQoYC8qICR7bmFtZX0ke2Rlc3VnYXJlZCA/IGAgKCR7ZGVzdWdhcmVkfSlgIDogJyd9ICR7c2l6ZX0gJHtzaWduZWR9ICovYCk7CiAgICBjb25zb2xlLmxvZygnR2VuZXJhdGVTdHJ1Y3RDbGFzcycsIHsgcG9pbnRlciB9KTsKICB9CgogIHJldHVybiBbCiAgICAuLi5hLAogICAgYHNldCAke25hbWV9KHZhbHVlKSB7IGlmKHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0JyAmJiB2YWx1ZSAhPSBudWxsICYmIHZhbHVlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHZhbHVlID0gJHtmZmlQcmVmaXh9dG9Qb2ludGVyKHZhbHVlKTsgbmV3ICR7Y3Rvcn0odGhpcywgJHtvZmZzZXR9KVswXSA9ICR7Qnl0ZUxlbmd0aDJWYWx1ZSgKICAgICAgc2l6ZSwKICAgICAgc2lnbmVkLAogICAgICBmbG9hdGluZywKICAgICl9OyB9YCwKICAgIGBnZXQgJHtuYW1lfSgpIHsgcmV0dXJuICR7dG9IZXgoYG5ldyAke2N0b3J9KHRoaXMsICR7b2Zmc2V0fSlbMF1gKX07IH1gLAogIF07Cn0KCmZ1bmN0aW9uIEJ5dGVMZW5ndGgyVHlwZWRBcnJheShieXRlTGVuZ3RoLCBzaWduZWQsIGZsb2F0aW5nKSB7CiAgaWYoZmxvYXRpbmcpIHsKICAgIHN3aXRjaCAoYnl0ZUxlbmd0aCkgewogICAgICBjYXNlIDQ6CiAgICAgICAgcmV0dXJuICdGbG9hdDMyQXJyYXknOwogICAgICBjYXNlIDg6CiAgICAgICAgcmV0dXJuICdGbG9hdDY0QXJyYXknOwogICAgICBkZWZhdWx0OgogICAgICAgIHRocm93IG5ldyBFcnJvcihgRmxvYXRpbmcgcG9pbnQsIGJ1dCAke2J5dGVMZW5ndGh9IHNpemVgKTsKICAgIH0KICB9CgogIHN3aXRjaCAoYnl0ZUxlbmd0aCkgewogICAgY2FzZSAxOgogICAgICByZXR1cm4gc2lnbmVkID8gJ0ludDhBcnJheScgOiAnVWludDhBcnJheSc7CiAgICBjYXNlIDI6CiAgICAgIHJldHVybiBzaWduZWQgPyAnSW50MTZBcnJheScgOiAnVWludDE2QXJyYXknOwogICAgY2FzZSA0OgogICAgICByZXR1cm4gc2lnbmVkID8gJ0ludDMyQXJyYXknIDogJ1VpbnQzMkFycmF5JzsKICAgIGNhc2UgODoKICAgICAgcmV0dXJuIGZsb2F0aW5nID8gJ0Zsb2F0NjRBcnJheScgOiBzaWduZWQgPyAnQmlnSW50NjRBcnJheScgOiAnQmlnVWludDY0QXJyYXknOwogICAgZGVmYXVsdDoKICAgICAgcmV0dXJuIHNpZ25lZCA/ICdJbnQ4QXJyYXknIDogJ1VpbnQ4QXJyYXknOwogIH0KfQoKZnVuY3Rpb24gQnl0ZUxlbmd0aDJWYWx1ZShieXRlTGVuZ3RoLCBzaWduZWQsIGZsb2F0aW5nKSB7CiAgaWYoYnl0ZUxlbmd0aCA9PSA4ICYmICFmbG9hdGluZykgcmV0dXJuICdCaWdJbnQodmFsdWUpJzsKICByZXR1cm4gJ3ZhbHVlJzsKfQoKZXhwb3J0IGNsYXNzIEZGSV9GdW5jdGlvbiB7CiAgY29uc3RydWN0b3Iobm9kZSwgcHJlZml4ID0gJycpIHsKICAgIGNvbnN0IHsgbmFtZSwgcmV0dXJuVHlwZSA9ICd2b2lkJywgcGFyYW1ldGVycyA9IFtdIH0gPSBub2RlOwoKICAgIC8vY29uc29sZS5sb2coJ0ZGSV9GdW5jdGlvbi5jb25zdHJ1Y3RvcicsIG5vZGUsIHsgbmFtZSwgcGFyYW1ldGVycyB9KTsKCiAgICB0aGlzLm5hbWUgPSBuYW1lOwogICAgdGhpcy5wcmVmaXggPSBwcmVmaXg7CiAgICB0aGlzLnJldHVyblR5cGUgPSByZXR1cm5UeXBlLmZmaTsKICAgIHRoaXMucGFyYW1ldGVycyA9IFsuLi4ocGFyYW1ldGVycyB8fCBbXSldLm1hcCgoW25hbWUsIHR5cGVdLCBpZHgpID0+IFtuYW1lID8/IGBhcmcke2lkeCArIDF9YCwgdHlwZS5mZmldKTsKICB9CgogIGdlbmVyYXRlRGVmaW5lKGZwLCBsaWIpIHsKICAgIGNvbnN0IHsgcHJlZml4LCBuYW1lLCByZXR1cm5UeXBlLCBwYXJhbWV0ZXJzIH0gPSB0aGlzOwogICAgZnAgPz89IChuYW1lLCBsaWIpID0+IGAke3ByZWZpeH1kbHN5bSgke2xpYiA/PyAnUlRMRF9ERUZBVUxUJ30sICcke25hbWV9JylgOwogICAgbGV0IGNvZGUgPSBgJyR7bmFtZX0nLCAke2ZwKG5hbWUsIGxpYil9LCBudWxsLCAnJHtyZXR1cm5UeXBlfSdgOwogICAgY29uc3QgY29sb3JUZXh0ID0geCA9PiB4OwoKICAgIC8vY29uc29sZS5sb2coJ2Z1bmN0aW9uJywgY29sb3JUZXh0KG5hbWUsIDEsIDMzKSwgJ3JldHVyblR5cGU6JywgY29sb3JUZXh0KHJldHVyblR5cGUsIDEsIDMxKSk7CgogICAgbGV0IHBhcmFtSW5kZXggPSAwOwoKICAgIGZvcihsZXQgW3BhcmFtTmFtZSwgdHlwZV0gb2YgcGFyYW1ldGVycykgewogICAgICArK3BhcmFtSW5kZXg7CgogICAgICAvL2NvbnNvbGUubG9nKGBwYXJhbSAjJHtwYXJhbUluZGV4fWAsIC4uLihwYXJhbU5hbWUgPyBbJ25hbWU6JywgcGFyYW1OYW1lXSA6IFtdKSwgJ3R5cGU6JywgdHlwZSk7CgogICAgICBjb2RlICs9ICcsICc7CiAgICAgIGNvZGUgKz0gYCcke3R5cGV9J2A7CiAgICB9CiAgICByZXR1cm4gYCR7cHJlZml4fWRlZmluZSgke2NvZGV9KTtgOwogIH0KCiAgZ2VuZXJhdGVEb2MoKSB7CiAgICBjb25zdCB7IHByZWZpeCwgbmFtZSwgcmV0dXJuVHlwZSwgcGFyYW1ldGVycyB9ID0gdGhpczsKICAgIGNvbnN0IGxpbmVzID0gW107CiAgICBjb25zdCBjb2x1bW5zID0gWzEwLCAxNl07CgogICAgY29uc3QgcHVzaCA9ICguLi5hcmdzKSA9PgogICAgICBsaW5lcy5wdXNoKAogICAgICAgIFsuLi5hcmdzXQogICAgICAgICAgLm1hcChmaWVsZCA9PiAodHlwZW9mIGZpZWxkICE9ICdzdHJpbmcnID8gJycgOiBmaWVsZCkpCiAgICAgICAgICAubWFwKChmaWVsZCwgY29sKSA9PiBmaWVsZC5wYWRFbmQoY29sdW1uc1tjb2xdID8/IDApKQogICAgICAgICAgLmpvaW4oJycpLAogICAgICApOwoKICAgIHB1c2goJy8qKicpOwogICAgcHVzaChgQGZ1bmN0aW9uYCwgYCR7bmFtZX1gKTsKCiAgICBpZihwYXJhbWV0ZXJzLmxlbmd0aCkgcHVzaCgpOwoKICAgIGxldCBqcyA9IHR5cGUgPT4gewogICAgICBsZXQgdHlwZU9iaiA9IFR5cGUuZGVjbGFyYXRpb25zLmdldCh0eXBlKTsKICAgICAgcmV0dXJuIHR5cGVPYmogPyB0eXBlT2JqLnRvSlMoKSA6IHR5cGU7CiAgICB9OwoKICAgIGZvcihsZXQgW3BhcmFtTmFtZSwgdHlwZV0gb2YgcGFyYW1ldGVycykgcHVzaChgQHBhcmFtYCwgYHske2pzKHR5cGUpfX1gLCBwYXJhbU5hbWUpOwoKICAgIGlmKHJldHVyblR5cGUgIT0gJ3ZvaWQnKSB7CiAgICAgIHB1c2goKTsKICAgICAgcHVzaChgQHJldHVybmAsIGB7JHtqcyhyZXR1cm5UeXBlKX19YCk7CiAgICB9CgogICAgcmV0dXJuIGxpbmVzLmpvaW4oJ1xuICogJykgKyAnXG4gKi9cbic7CiAgfQoKICBnZW5lcmF0ZUNhbGwoKSB7CiAgICBjb25zdCB7IHByZWZpeCwgbmFtZSwgcmV0dXJuVHlwZSwgcGFyYW1ldGVycyB9ID0gdGhpczsKICAgIGNvbnN0IHBhcmFtTmFtZXMgPSBwYXJhbWV0ZXJzLm1hcCgoW25hbWUsIHR5cGVdKSA9PiBuYW1lKTsKICAgIGxldCBjb2RlID0gYGZ1bmN0aW9uICR7bmFtZX0oJHtwYXJhbU5hbWVzLmpvaW4oJywgJyl9KSB7XG5gOwoKICAgIGNvZGUgKz0gYCAgJHtyZXR1cm5UeXBlICE9ICd2b2lkJyA/ICdyZXR1cm4gJyA6ICcnfSR7cHJlZml4fWNhbGwoJyR7bmFtZX0nLCAke3BhcmFtTmFtZXMuam9pbignLCAnKX0pO1xuYDsKICAgIGNvZGUgKz0gYH1gOwoKICAgIHJldHVybiBjb2RlOwogIH0KCiAgZ2VuZXJhdGUoZnAsIGxpYiwgZXhwKSB7CiAgICByZXR1cm4gW3RoaXMuZ2VuZXJhdGVEZWZpbmUoZnAsIGxpYiksICdcbicsIGV4cCA/ICdleHBvcnQgJyA6ICcnLCB0aGlzLmdlbmVyYXRlQ2FsbCgpLCAnXG4nXS5qb2luKCcnKTsKICB9CgogIGdlbmVyYXRlRnVuY3Rpb24oZnAsIGxpYikgewogICAgY29uc3QgeyBwcmVmaXgsIG5hbWUsIHJldHVyblR5cGUsIHBhcmFtZXRlcnMgfSA9IHRoaXM7CiAgICBjb25zdCBwYXJhbU5hbWVzID0gcGFyYW1ldGVycy5tYXAoKFtuYW1lLCB0eXBlXSkgPT4gbmFtZSk7CgogICAgbGV0IGNvZGUgPSBgbmV3IEZ1bmN0aW9uKCR7cGFyYW1OYW1lcy5tYXAocCA9PiBgJyR7cH0nYCkuam9pbignLCAnKX0sIGA7CiAgICBjb2RlICs9IGAncmV0dXJuICR7cHJlZml4fWNhbGwoIiR7bmFtZX0iJHtwYXJhbU5hbWVzLm1hcChwID0+IGAsICR7cH1gKS5qb2luKCcnKX0pJyk7YDsKCiAgICByZXR1cm4gY29kZTsKICB9CgogIGNvbXBpbGVGdW5jdGlvbihmcCwgbGliKSB7CiAgICBsZXQgY29kZSA9IHRoaXMuZ2VuZXJhdGVDYWxsKGZwLCBsaWIpOwogICAgbGV0IGZuID0gbmV3IEZ1bmN0aW9uKGByZXR1cm4gJHtjb2RlfWApOwoKICAgIHJldHVybiBmbigpOwogIH0KfQoKZnVuY3Rpb24gRmRSZWFkZXIoZmQsIGJ1ZmZlclNpemUgPSAxMDI0KSB7CiAgbGV0IGJ1ZiA9IGZzLmJ1ZmZlcihidWZmZXJTaXplKTsKCiAgcmV0dXJuIG5ldyBSZXBlYXRlcihhc3luYyAocHVzaCwgc3RvcCkgPT4gewogICAgbGV0IHJldDsKCiAgICBkbyB7CiAgICAgIGxldCByID0gYXdhaXQgZnMud2FpdFJlYWQoZmQpOwogICAgICByZXQgPSBmcy5yZWFkKGZkLCBidWYpOwoKICAgICAgaWYocmV0ID4gMCkgewogICAgICAgIGxldCBkYXRhID0gYnVmLnNsaWNlKDAsIHJldCk7CiAgICAgICAgYXdhaXQgcHVzaChmcy5idWZmZXJUb1N0cmluZyhkYXRhKSk7CiAgICAgIH0KICAgIH0gd2hpbGUocmV0ID09IGJ1ZmZlclNpemUpOwoKICAgIHN0b3AoKTsKICAgIGZzLmNsb3NlKGZkKTsKICB9KTsKfQoKZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIENvbW1hbmRSZWFkKGFyZ3MpIHsKICBsZXQgY2hpbGQgPSBTcGF3bihhcmdzLCB7CiAgICBibG9jazogZmFsc2UsCiAgICBzdGRpbzogWydpbmhlcml0JywgJ3BpcGUnLCAnaW5oZXJpdCddLAogIH0pOwoKICBsZXQgb3V0cHV0ID0gJycsCiAgICBkb25lID0gZmFsc2UsCiAgICBidWYgPSBuZXcgQXJyYXlCdWZmZXIoMTAyNCk7CgogIGlmKHBsYXRmb3JtID09ICdxdWlja2pzJykgewogICAgbGV0IHsgZmQgfSA9IGNoaWxkLnN0ZG91dDsKCiAgICBmb3IoOzspIHsKICAgICAgMTsKICAgICAgbGV0IHI7CiAgICAgIGF3YWl0IGZzLndhaXRSZWFkKGZkKTsKICAgICAgciA9IFJlYWRPdXRwdXQoZmQpOwogICAgICBpZihyID4gMCAmJiByIDwgYnVmLmJ5dGVMZW5ndGgpIGJyZWFrOwogICAgfQoKICAgIGxldCByZXN1bHQgPSBhd2FpdCBjaGlsZC53YWl0KCk7CgogICAgcmV0dXJuIG91dHB1dC50cmltRW5kKCk7CiAgfSBlbHNlIHsKICAgIEFjcXVpcmVSZWFkZXIoY2hpbGQuc3Rkb3V0LCBhc3luYyByZWFkZXIgPT4gewogICAgICBsZXQgcjsKCiAgICAgIHdoaWxlKChyID0gYXdhaXQgcmVhZGVyLnJlYWQoKSkpIGlmKCFyLmRvbmUpIGVycm9ycyArPSByLnZhbHVlLnRvU3RyaW5nKCk7CiAgICB9KTsKICB9CgogIGZ1bmN0aW9uIFJlYWRPdXRwdXQoZmQpIHsKICAgIGxldCBidWYgPSBuZXcgQXJyYXlCdWZmZXIoMTAyNCk7CiAgICBsZXQgciA9IG9zLnJlYWQoZmQsIGJ1ZiwgMCwgYnVmLmJ5dGVMZW5ndGgpOwoKICAgIG91dHB1dCArPSBmcy5idWZmZXJUb1N0cmluZyhidWYuc2xpY2UoMCwgcikpOwoKICAgIHJldHVybiByOwogIH0KfQoKZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIExpYnJhcnlFeHBvcnRzKGZpbGUpIHsKICBjb25zb2xlLmxvZyhgTGlicmFyeUV4cG9ydHM6YCwgZmlsZSk7CgogIGxldCBvdXRwdXQgPSBhd2FpdCBDb21tYW5kUmVhZChbJy9vcHQvZGlldC9iaW4vb2JqZHVtcCcsICctVCcsIGZpbGVdKTsKICBvdXRwdXQgPSBvdXRwdXQucmVwbGFjZSgvLipEWU5BTUlDIFNZTUJPTCBUQUJMRTpccy9tLCAnJyk7CgogIGxldCBsaW5lcyA9IG91dHB1dC5zcGxpdCgvXG4vZykuZmlsdGVyKGxpbmUgPT4gL1xzQmFzZVxzLy50ZXN0KGxpbmUpKTsKICBsZXQgY29sdW1ucyA9IGNvbEluZGV4ZXMobGluZXNbMF0pOwogIGxldCBlbnRyaWVzID0gbGluZXMubWFwKGxpbmUgPT4gY29sU3BsaXQobGluZSwgY29sdW1ucykubWFwKGNvbHVtbiA9PiBjb2x1bW4udHJpbUVuZCgpKSk7CgogIGVudHJpZXMuc29ydCgoYSwgYikgPT4gYVswXS5sb2NhbGVDb21wYXJlKGJbMF0pKTsKCiAgcmV0dXJuIGVudHJpZXMubWFwKGVudHJ5ID0+IGVudHJ5W2VudHJ5Lmxlbmd0aCAtIDFdLnRyaW1TdGFydCgpKTsKfQoKZnVuY3Rpb24gU2F2ZUxpYnJhcmllcygpIHsKICBjb25zdCBsYXllcnMgPSBPYmplY3QudmFsdWVzKFsuLi5wcm9qZWN0LnNjaGVtYXRpYy5sYXllcnMsIC4uLnByb2plY3QuYm9hcmQubGF5ZXJzXS5yZWR1Y2UoKGFjYywgW24sIGVdKSA9PiAoeyAuLi5hY2MsIFtuXTogZS5yYXcgfSksIHt9KSk7Cn0KCmZ1bmN0aW9uIFByb2Nlc3NGaWxlKGZpbGUsIGRlYnVnID0gdHJ1ZSkgewogIGNvbnN0IGV4dCA9IHBhdGguZXh0bmFtZShmaWxlKTsKICBsZXQgcmV0ID0gbnVsbDsKCiAgc3dpdGNoIChleHQpIHsKICAgIGNhc2UgJy5qcyc6CiAgICAgIHJldCA9IFBhcnNlRUNNQVNjcmlwdChmaWxlLCBkZWJ1Zyk7CiAgICAgIGJyZWFrOwogICAgY2FzZSAnLmNwcCc6CiAgICBjYXNlICcuY3h4JzoKICAgIGNhc2UgJy5jYyc6CiAgICBjYXNlICcuYyc6CiAgICBjYXNlICcuaCc6CiAgICAgIHJldCA9IENvbXBpbGUoZmlsZSAvKiwgZGVidWcqLyk7CiAgICAgIGJyZWFrOwogIH0KCiAgcmV0dXJuIHJldDsKfQoKZnVuY3Rpb24gUGFyc2VFQ01BU2NyaXB0KGZpbGUsIHBhcmFtcyA9IHt9KSB7CiAgbGV0IGRhdGEsIGIsIHJldDsKICBjb25zdCB7IGRlYnVnIH0gPSBwYXJhbXM7CgogIGlmKGZpbGUgPT0gJy0nKSBmaWxlID0gJy9kZXYvc3RkaW4nOwoKICBpZihmaWxlICYmIGZzLmV4aXN0c1N5bmMoZmlsZSkpIHsKICAgIGRhdGEgPSBSZWFkRmlsZShmaWxlLCAndXRmOCcpOwogICAgY29uc29sZS5sb2coJ29wZW5lZDonLCBmaWxlKTsKICB9IGVsc2UgewogICAgZmlsZSA9ICdzdGRpbic7CiAgICBkYXRhID0gc291cmNlOwogIH0KCiAgY29uc29sZS5sb2coJ09LLCBkYXRhOiAnLCBhYmJyZXZpYXRlKGVzY2FwZShkYXRhKSkpOwoKICBpZihkZWJ1ZykgRUNNQVNjcmlwdFBhcnNlci5pbnN0cnVtZW50YXRlKCk7CgogIGNvbnNvbGUubG9nKCdFQ01BU2NyaXB0UGFyc2VyOicsIEVDTUFTY3JpcHRQYXJzZXIpOwoKICBsZXQgcGFyc2VyLCBhc3QsIGVycm9yOwoKICBnbG9iYWxUaGlzLnBhcnNlciA9IHBhcnNlciA9IG51bGw7CiAgZ2xvYmFsVGhpcy5wYXJzZXIgPSBwYXJzZXIgPSBuZXcgRUNNQVNjcmlwdFBhcnNlcihkYXRhID8gZGF0YS50b1N0cmluZygpIDogZGF0YSwgZmlsZSwgZGVidWcpOwoKICB0cnkgewogICAgYXN0ID0gcGFyc2VyLnBhcnNlUHJvZ3JhbSgpOwogIH0gY2F0Y2goZXJyKSB7CiAgICBjb25zdCB0b2tlbnMgPSBbLi4ucGFyc2VyLnByb2Nlc3NlZCwgLi4ucGFyc2VyLnRva2Vuc107CiAgICBjb25zdCB0b2tlbiA9IHRva2Vuc1t0b2tlbnMubGVuZ3RoIC0gMV07CgogICAgY29uc29sZS5sb2coJ3BhcnNlUHJvZ3JhbSB0b2tlbicsIHRva2VuKTsKCiAgICBpZihlcnIgIT09IG51bGwpIHsKICAgICAgY29uc29sZS5sb2coJ3BhcnNlUHJvZ3JhbSBFUlJPUiBtZXNzYWdlOicsIGVycj8ubWVzc2FnZSk7CiAgICAgIGNvbnNvbGUubG9nKCdwYXJzZVByb2dyYW0gRVJST1Igc3RhY2s6XG4gICcgKyBuZXcgU3RhY2soZXJyPy5zdGFjaywgKGZyLCBpKSA9PiBmci5mdW5jdGlvbk5hbWUgIT0gJ2VzZmFjdG9yeScgJiYgaSA8IDUpLnRvU3RyaW5nKCkucmVwbGFjZSgvXG4vZywgJ1xuICAnKSk7CgogICAgICB0aHJvdyBlcnI7CiAgICB9IGVsc2UgewogICAgICBjb25zb2xlLmxvZygncGFyc2VQcm9ncmFtIEVSUk9SOicsIGVycik7CiAgICAgIHRocm93IG5ldyBFcnJvcigncGFyc2VQcm9ncmFtJyk7CiAgICB9CiAgfQoKICBwYXJzZXIuYWRkQ29tbWVudHNUb05vZGVzKGFzdCk7CiAgcmV0dXJuIGFzdDsKfQoKLypmdW5jdGlvbiBQYXJzZUVDTUFTY3JpcHQoZmlsZSwgZGVidWcgPSBmYWxzZSkgewogIGNvbnNvbGUubG9nKGBQYXJzaW5nICcke2ZpbGV9Jy4uLmApOwogIGxldCBkYXRhID0gUmVhZEZpbGUoZmlsZSwgJ3V0Zi04Jyk7CiAgbGV0IGFzdCwgZXJyb3I7CiAgbGV0IHBhcnNlcjsKICBjb25zb2xlLmxvZygnZGF0YScsIGRhdGEpOwogIGdsb2JhbFRoaXMucGFyc2VyID0gcGFyc2VyID0gbmV3IEVDTUFTY3JpcHRQYXJzZXIoZGF0YT8udG9TdHJpbmcgPyBkYXRhLnRvU3RyaW5nKCkgOiBkYXRhLCBmaWxlLCBkZWJ1Zyk7CgogIGdsb2JhbFRoaXMuYXN0ID0gYXN0ID0gcGFyc2VyLnBhcnNlUHJvZ3JhbSgpOwogIHBhcnNlci5hZGRDb21tZW50c1RvTm9kZXMoYXN0KTsKCiAgZ2xvYmFsVGhpcy5maWxlc1tmaWxlXSA9IGFzdDsKCiAgcmV0dXJuIHsKICAgIGFzdCwKICAgIGdldCBkYXRhKCkgewogICAgICByZXR1cm4gdGhpcy5hc3Q7CiAgICB9CiAgfTsKfSovCgpmdW5jdGlvbiBQcmludEVDTUFTY3JpcHQoYXN0LCBjb21tZW50cywgcHJpbnRlciA9IG5ldyBFQ01BU2NyaXB0LlByaW50ZXIoeyBpbmRlbnQ6IDQgfSwgY29tbWVudHMpKSB7CiAgcmV0dXJuIHByaW50ZXIucHJpbnQoYXN0KTsKfQoKZnVuY3Rpb24gUHJpbnRDQXJyYXkoc3RyaW5ncykgewogIGxldCBvID0gJyc7CgogIGZvcihsZXQgc3RyIG9mIHN0cmluZ3MpIHsKICAgIGlmKG8gIT0gJycpIG8gKz0gJywgJzsKCiAgICBpZih0eXBlb2Ygc3RyID09ICdzdHJpbmcnKSBvICs9ICciJyArIHN0ciArICciJzsKICAgIGVsc2UgbyArPSAnMCc7CiAgfQoKICAvKiBzdHJpbmdzLm1hcChzdHIgPT4gKHR5cGVvZiBzdHIgPT0gJ3N0cmluZycgJiYgc3RyID8gJyInICsgc3RyICsgJyInIDogJyIiJykpLm1hcChzdHIgPT4gc3RyICE9ICcnID8gc3RyIDogJyIiJykuam9pbignLFxuJykgKyovCgogIG8gKz0gYCB9KTtgOwogIHJldHVybiBgKChjb25zdCBjaGFyKmNvbnN0IFtdKXsgYCArIG87Cn0KCmZ1bmN0aW9uIE5hbWVzcGFjZXMobm9kZVBhdGgsIGFzdCA9ICQuZGF0YSkgewogIGxldCBwdHIgPSBuZXcgUG9pbnRlcihub2RlUGF0aCk7CiAgbGV0IHB0cnMgPSBwdHIuY2hhaW4oMik7CiAgbGV0IGdldCA9IHAgPT4gRGVlcEdldChhc3QsIHApOwoKICBsZXQgbnMgPSBwdHJzLm1hcChwID0+IGdldChwKSkuZmlsdGVyKG4gPT4gbi5raW5kID09ICdOYW1lc3BhY2VEZWNsJyk7CiAgcmV0dXJuIG5zOwp9CgpmdW5jdGlvbiogQ29uc3RhbnRzKG5vZGUsIHQgPSAobmFtZSwgdmFsdWUpID0+IFtuYW1lLCAhaXNOYU4oK3ZhbHVlKSA/ICt2YWx1ZSA6IHZhbHVlXSkgewogIGZvcihsZXQgaW5uZXIgb2Ygbm9kZS5pbm5lcikgewogICAgeWllbGQgdCguLi5QcmludEFzdChpbm5lcikuc3BsaXQoLyA9IC9nKSk7CiAgfQp9CgpNZW1iZXJOYW1lcy5VUFBFUiA9IDE7Ck1lbWJlck5hbWVzLk1FVEhPRFMgPSAyOwpNZW1iZXJOYW1lcy5QUk9QRVJUSUVTID0gNDsKCmZ1bmN0aW9uIEdldEltcG9ydHMoYXN0ID0gJC5kYXRhKSB7CiAgY29uc3QgciA9IFtdOwoKICBmb3IobGV0IFtuLCBwXSBvZiBEZWVwU2VsZWN0KCQuZGF0YSwgbiA9PiAobi50eXBlID8/IG4ua2luZCkuc3RhcnRzV2l0aCgnSW1wb3J0JykpKSByLnB1c2gobik7CgogIHJldHVybiByOwp9CgpmdW5jdGlvbiBHZXRJZGVudGlmaWVycyhub2Rlcywga2V5ID0gbnVsbCkgewogIGNvbnN0IHIgPSBbXTsKCiAgZm9yKGxldCBub2RlIG9mIG5vZGVzKSBmb3IgKGxldCBuIG9mIERlZXBTZWxlY3Qobm9kZSwgKG4sIGspID0+IChuLnR5cGUgPz8gbi5raW5kKSA9PSAnSWRlbnRpZmllcicgJiYgKGtleSA9PT0gbnVsbCB8fCBrID09IGtleSkpKSByLnB1c2gobi5uYW1lKTsKCiAgcmV0dXJuIHI7Cn0KCmZ1bmN0aW9uIE1lbWJlck5hbWVzKG1lbWJlcnMsIGZsYWdzID0gMCkgewogIGxldCByZXQgPSBbXTsKCiAgaWYobWVtYmVycy5tZW1iZXJzKSBtZW1iZXJzID0gbWVtYmVycy5tZW1iZXJzOwoKICBpZighQXJyYXkuaXNBcnJheShtZW1iZXJzKSkgewogICAgZm9yKGxldCBwdHIgb2YgWy4uLkRlZXBTZWxlY3QobWVtYmVycywgbiA9PiBuLmtpbmQuZW5kc1dpdGgoJ0RlY2wnKSAmJiBuLm5hbWUsIGRlZXAuUkVUVVJOX1BBVEgpXS5tYXAocGF0aCA9PiBuZXcgUG9pbnRlcihwYXRoKSkpIHsKICAgICAgbGV0IHB0cnMgPSBwdHIuY2hhaW4oMik7CgogICAgICBjb25zb2xlLmxvZygncHRyczonLCBwdHJzKTsKCiAgICAgIGxldCBuYW1lcyA9IHB0cnMubWFwKHAgPT4gRGVlcEdldChtZW1iZXJzLCBbLi4ucCwgJ25hbWUnXSwgZGVlcC5OT19USFJPVykpOwogICAgICBsZXQga2luZHMgPSBwdHJzLm1hcChwID0+IERlZXBHZXQobWVtYmVycywgWy4uLnAsICdraW5kJ10sIGRlZXAuTk9fVEhST1cpKTsKCiAgICAgIGNvbnNvbGUubG9nKCdraW5kczonLCBraW5kcyk7CiAgICAgIGNvbnNvbGUubG9nKCduYW1lczonLCBuYW1lcyk7CgogICAgICByZXQucHVzaChuYW1lcy5maWx0ZXIobmFtZSA9PiBuYW1lKS5qb2luKCcuJykpOwogICAgfQogIH0gZWxzZSB7CiAgICBjb25zdCBtZW1iZXJOYW1lUG9pbnRlcnMgPSBbLi4uRGVlcFNlbGVjdChtZW1iZXJzLCBuID0+IEFycmF5LmlzQXJyYXkobikgJiYgbi5sZW5ndGggPT0gMiAmJiB0eXBlb2YgblswXSA9PSAnc3RyaW5nJyAmJiBuWzFdICE9PSBudWxsKV0ubWFwKChbbm9kZSwgcHRyXSkgPT4gcHRyKTsKICAgIC8vY29uc29sZS5sb2coJ21lbWJlck5hbWVQb2ludGVycycsIG1lbWJlck5hbWVQb2ludGVycyk7CgogICAgZm9yKGxldCBwdHIgb2YgbWVtYmVyTmFtZVBvaW50ZXJzLm1hcChwYXRoID0+IG5ldyBQb2ludGVyKHBhdGgpKSkgewogICAgICBsZXQgcHRycyA9IHB0ci5jaGFpbigzKSwKICAgICAgICBuYW1lcyA9IHB0cnMubWFwKHAgPT4gRGVlcEdldChtZW1iZXJzLCBbLi4ucCwgMF0pKTsKCiAgICAgIHJldC5wdXNoKG5hbWVzLmZpbHRlcihuYW1lID0+IG5hbWUpLmpvaW4oJy4nKSk7CiAgICB9CiAgfQoKICBpZihmbGFncyAmIE1lbWJlck5hbWVzLlVQUEVSKSByZXQgPSByZXQubWFwKG5hbWUgPT4gZGVjYW1lbGl6ZShuYW1lLCAnXycpLnRvVXBwZXJDYXNlKCkpOwoKICByZXR1cm4gcmV0Owp9CgpmdW5jdGlvbiBVbnNldExvYyhub2RlLCBwcmVkID0gKHYsIHApID0+IHRydWUpIHsKICBmb3IobGV0IFt2LCBwXSBvZiBEZWVwU2VsZWN0KG5vZGUsICh2LCBrKSA9PiBrID09ICdsb2MnIHx8IGsgPT0gJ3JhbmdlJywgZGVlcC5SRVRVUk5fVkFMVUVfUEFUSCkpIGlmKHByZWQoRGVlcEdldChub2RlLCBbLi4ucF0uc2xpY2UoMCwgLTEpKSwgWy4uLnBdLmxhc3QpKSBkZWVwLnVuc2V0KG5vZGUsIHApOwoKICByZXR1cm4gbm9kZTsKfQoKZnVuY3Rpb24gTWFrZUZGSShub2RlLCBsaWIsIGV4cCwgZnApIHsKICBpZihBcnJheS5pc0FycmF5KG5vZGUpKQogICAgcmV0dXJuIChmdW5jdGlvbiogKCkgewogICAgICBsZXQgaSA9IDA7CgogICAgICBpZighZnApIHlpZWxkIGBpbXBvcnQgeyBkbG9wZW4sIGRlZmluZSwgZGxlcnJvciwgZGxjbG9zZSwgZGxzeW0sIGNhbGwsIGVycm5vLCBSVExEX05PVyB9IGZyb20gJ2ZmaSc7XG5gOwoKICAgICAgaWYobGliKSB7CiAgICAgICAgbGV0IGxpYnZhciA9IGxpYi5yZXBsYWNlKC9cLnNvKCR8XC4uKikvZywgJycpLnJlcGxhY2UoL1teQS1aYS16MC05X10vZywgJ18nKTsKCiAgICAgICAgeWllbGQgYGNvbnN0ICR7bGlidmFyfSA9IGRsb3BlbignJHtsaWJ9JywgUlRMRF9OT1cpO1xuYDsKCiAgICAgICAgbGliID0gbGlidmFyOwogICAgICB9CgogICAgICBmb3IobGV0IGl0ZW0gb2Ygbm9kZSkgewogICAgICAgIGxldCBvdXQgPSAnJzsKICAgICAgICAvL2NvbnNvbGUubG9nKGBNYWtlRkZJIGl0ZW0gIyR7aSArIDF9LyR7bm9kZS5sZW5ndGh9YCk7CgogICAgICAgIHRyeSB7CiAgICAgICAgICBsZXQgcmV0ID0gTWFrZUZGSShpdGVtLCBsaWIsIGV4cCwgZnApOwoKICAgICAgICAgIGlmKHR5cGVvZiByZXQgPT0gJ3N0cmluZycgJiYgcmV0Lmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgaWYob3V0KSBvdXQgKz0gJ1xuJzsKICAgICAgICAgICAgb3V0ICs9IHJldDsKICAgICAgICAgIH0KICAgICAgICB9IGNhdGNoKGVycm9yKSB7CiAgICAgICAgICBjb25zb2xlLmxvZyhgRVJST1IgaXRlbSBbJHtpfV06YCwgZXJyb3IubWVzc2FnZSArICdcbicgKyBlcnJvci5zdGFjayk7CiAgICAgICAgfQoKICAgICAgICBpKys7CgogICAgICAgIHlpZWxkIG91dDsKICAgICAgfQogICAgfSkoKTsKCiAgdHJ5IHsKICAgIGlmKCEobm9kZSBpbnN0YW5jZW9mIE5vZGUpKSBub2RlID0gVHlwZUZhY3Rvcnkobm9kZSwgJC5kYXRhKTsKICB9IGNhdGNoKGUpIHsKICAgIGNvbnNvbGUuZXJyb3IoJ1R5cGVGYWN0b3J5JywgZT8ubWVzc2FnZSk7CiAgfQoKICBpZih0eXBlb2Ygbm9kZSA9PSAnb2JqZWN0JyAmJiBub2RlICYmIG5vZGUua2luZCA9PSAnRnVuY3Rpb25EZWNsJykgbm9kZSA9IG5ldyBGdW5jdGlvbkRlY2wobm9kZSk7CgogIGlmKG5vZGUgaW5zdGFuY2VvZiBGdW5jdGlvbkRlY2wpIHsKICAgIGNvbnNvbGUubG9nKCdub2RlJywgKGdsb2JhbFRoaXMubm9kZSA9IG5vZGUpKTsKCiAgICBsZXQgZmZpID0gbmV3IEZGSV9GdW5jdGlvbihub2RlKTsKCiAgICBsZXQgcHJvdG9TdHIgPSBQcmludEFzdChub2RlLmFzdCwgJC5kYXRhKQogICAgICAucmVwbGFjZSgvXihbXlxuXChdKilcbi8sICckMSAnKQogICAgICAuc3BsaXQoL1xuL2cpWzBdCiAgICAgIC5yZXBsYWNlKC9cIHskLywgJzsnKTsKCiAgICBwcm90b1N0ciA9IHByb3RvU3RyLnJlcGxhY2UoL15ccypleHRlcm5ccysvLCAnJyk7CgogICAgcmV0dXJuIChmZmkuZ2VuZXJhdGVEb2MoZnAsIGxpYiwgZXhwKSA/PyBgLyogJHtwcm90b1N0cn0gKi9cbmApICsgZmZpLmdlbmVyYXRlKGZwLCBsaWIsIGV4cCk7CiAgfSBlbHNlIGlmKG5vZGUgaW5zdGFuY2VvZiBSZWNvcmREZWNsIHx8IG5vZGUgaW5zdGFuY2VvZiBUeXBlZGVmRGVjbCkgewogICAgcmV0dXJuIEdlbmVyYXRlU3RydWN0Q2xhc3Mobm9kZSk7CiAgICAvL3JldHVybiBbLi4uR2VuZXJhdGVTdHJ1Y3RDbGFzcyhub2RlKV0uam9pbignXG4nKTsKICB9Cn0KCmZ1bmN0aW9uIE1ha2VJZChuYW1lKSB7CiAgbGV0IHMgPSAnJzsKCiAgbmFtZSA9IG5hbWUucmVwbGFjZUFsbCgnOjonLCAnXycpOwoKICBmb3IobGV0IGNoIG9mIG5hbWUpIHsKICAgIGlmKC9bQS1aYS16MC05X10vLnRlc3QoY2gpKSB7CiAgICAgIHMgKz0gY2g7CiAgICAgIGNvbnRpbnVlOwogICAgfQoKICAgIHMgKz0gJ19fJyArIGNoLmNvZGVQb2ludEF0KDApLnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLCAnMCcpOwogIH0KCiAgcmV0dXJuIHM7Cn0KCmZ1bmN0aW9uIE1ha2VRdWlja0pTQ2xhc3Mobm9kZSwgYXN0ID0gJCkgewogIGNvbnN0IGNpZCA9IE1ha2VJZChkZWNhbWVsaXplKG5vZGUubmFtZSwgJycpKS50b0xvd2VyQ2FzZSgpOwogIGNvbnN0IGNuYW1lID0gYXN0Lm5hbWVzcGFjZU9mKG5vZGUpICsgJyc7CgogIGNvbnN0IFtkZWNsLCBhc3NpZ25dID0gWwogICAgKGNuYW1lLCB2bmFtZSA9ICdwdHInKSA9PiBgICAke2NuYW1lfSogJHt2bmFtZX07YCwKICAgIChjbmFtZSwgdm5hbWUgPSAncHRyJykgPT4gYCAgaWYoISgke3ZuYW1lfSA9IHN0YXRpY19jYXN0PCR7Y25hbWV9Kj4oSlNfR2V0T3BhcXVlMihjdHgsIHRoaXNfdmFsLCBqc18ke2NpZH1fY2xhc3NfaWQpKSkpXG4gICAgcmV0dXJuIEpTX0VYQ0VQVElPTjtgLAogIF07CgogIGNvbnN0IG1lbWJlcnMgPSB7CiAgICBmaWVsZHM6IFsuLi5ub2RlLm1lbWJlcnNdLmZpbHRlcihuID0+IGNsYXNzTmFtZShuKSA9PSAnRmllbGREZWNsJyAmJiAhWydwcm90ZWN0ZWQnLCAncHJpdmF0ZSddLmluY2x1ZGVzKG4uYWNjZXNzKSAmJiAhKG4uc3RvcmFnZUNsYXNzID09ICdzdGF0aWMnIHx8IG4uYXN0LnN0b3JhZ2VDbGFzcyA9PSAnc3RhdGljJykpLAogICAgc3RhdGljOiBbLi4ubm9kZS5tZW1iZXJzXS5maWx0ZXIobiA9PiBjbGFzc05hbWUobikgPT0gJ1R5cGUnICYmIChuLnN0b3JhZ2VDbGFzcyA9PSAnc3RhdGljJyB8fCBuLmFzdC5zdG9yYWdlQ2xhc3MgPT0gJ3N0YXRpYycpKSwKICAgIG1ldGhvZHM6IFsuLi5ub2RlLm1lbWJlcnNdLmZpbHRlcihuID0+IG4uYXN0LmtpbmQgPT0gJ0NYWE1ldGhvZERlY2wnICYmICFbJ3Byb3RlY3RlZCcsICdwcml2YXRlJ10uaW5jbHVkZXMobi5hY2Nlc3MpICYmICEobi5zdG9yYWdlQ2xhc3MgPT0gJ3N0YXRpYycgfHwgbi5hc3Quc3RvcmFnZUNsYXNzID09ICdzdGF0aWMnKSksCiAgICBmdW5jdGlvbnM6IFsuLi5ub2RlLm1lbWJlcnNdLmZpbHRlcihuID0+IG4uYXN0LmtpbmQgPT0gJ0NYWE1ldGhvZERlY2wnICYmICFbJ3Byb3RlY3RlZCcsICdwcml2YXRlJ10uaW5jbHVkZXMobi5hY2Nlc3MpICYmIChuLnN0b3JhZ2VDbGFzcyA9PSAnc3RhdGljJyB8fCBuLmFzdC5zdG9yYWdlQ2xhc3MgPT0gJ3N0YXRpYycpKSwKICAgIGVudW1zOiBbLi4ubm9kZS5tZW1iZXJzXS5maWx0ZXIobiA9PiBuLmFzdC5raW5kID09ICdFbnVtRGVjbCcpLAogICAgY3Rvcl9kdG9yOiBbLi4ubm9kZS5tZW1iZXJzXS5maWx0ZXIobiA9PiAhKG4uYXN0LmtpbmQgPT0gJ0NYWE1ldGhvZERlY2wnIHx8IGNsYXNzTmFtZShuKSA9PSAnVHlwZScpKSwKICB9OwoKICBsZXQgaW5zdCA9IGRlY2woY25hbWUpICsgJ1xuXG4nICsgYXNzaWduKGNuYW1lKSArICdcbic7CgogIGluc3QgKz0gYFxuICBzd2l0Y2gobWFnaWMpIHtcbmA7CgogIGNvbnN0IG91dCA9IHsKICAgIG1lbnVtOiBgZW51bSB7XG5gLAogICAgcGVudW06IGBlbnVtIHtcbmAsCiAgICBmbnM6IGBzdGF0aWMgY29uc3QgSlNDRnVuY3Rpb25MaXN0RW50cnkganNfJHtjaWR9X3Byb3RvX2Z1bmNzW10gPSB7XG5gLAogICAgcGdldDogYHN0YXRpYyBKU1ZhbHVlXG5qc18ke2NpZH1fZ2V0KEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdGhpc192YWwsIGludCBtYWdpYykge1xuICBKU1ZhbHVlIHJldCA9IEpTX1VOREVGSU5FRDtcbmAgKyBpbnN0LAogICAgcHNldDogYHN0YXRpYyBKU1ZhbHVlXG5qc18ke2NpZH1fc2V0KEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdGhpc192YWwsIEpTVmFsdWVDb25zdCB2YWx1ZSwgaW50IG1hZ2ljKSB7XG4gIEpTVmFsdWUgcmV0ID0gSlNfVU5ERUZJTkVEO1xuYCArIGluc3QsCiAgICBtZm46IGBzdGF0aWMgSlNWYWx1ZVxuanNfJHtjaWR9X21ldGhvZChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0IGFyZ3ZbXSwgaW50IG1hZ2ljKSB7XG4gIEpTVmFsdWUgcmV0ID0gSlNfVU5ERUZJTkVEO1xuYCArIGluc3QsCiAgICBzZm46IGBzdGF0aWMgSlNWYWx1ZVxuanNfJHtjaWR9X2Z1bmN0aW9ucyhKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0IGFyZ3ZbXSwgaW50IG1hZ2ljKSB7XG4gIEpTVmFsdWUgcmV0ID0gSlNfVU5ERUZJTkVEO1xuYCArIGluc3QsCiAgfTsKICBjb25zdCBtZXRob2RzID0ge30sCiAgICBuYW1lcyA9IFtdOwoKICBmb3IobGV0IG1ldGhvZCBvZiBtZW1iZXJzLm1ldGhvZHMpIHsKICAgIGlmKG5hbWVzLmluZGV4T2YobWV0aG9kLm5hbWUpID09IC0xKSBuYW1lcy5wdXNoKG1ldGhvZC5uYW1lKTsKCiAgICBtZXRob2RzW21ldGhvZC5uYW1lXSA/Pz0gW107CiAgICBtZXRob2RzW21ldGhvZC5uYW1lXS5wdXNoKG1ldGhvZCk7CiAgfQoKICBmb3IobGV0IG5hbWUgb2YgbmFtZXMpIHsKICAgIGNvbnN0IG1ldGhvZGxpc3QgPSBtZXRob2RzW25hbWVdOwogICAgY29uc3QgW21ldGhvZF0gPSBtZXRob2RsaXN0OwoKICAgIGNvbnN0IHsgcGFyYW1ldGVycywgcmV0dXJuVHlwZSB9ID0gbWV0aG9kOwogICAgY29uc3QgY25hbWUgPSAnTUVUSE9EXycgKyBNYWtlSWQoZGVjYW1lbGl6ZShuYW1lLCAnXycpKS50b1VwcGVyQ2FzZSgpLnJlcGxhY2VBbGwoJ19fJywgJ194Jyk7CgogICAgb3V0LmZucyArPSBgICBKU19DRlVOQ19NQUdJQ19ERUYoIiR7bmFtZX0iLCAke3BhcmFtZXRlcnMubGVuZ3RofSwgIGpzXyR7Y2lkfV9tZXRob2QsICR7Y25hbWV9KSxcbmA7CiAgICBvdXQubWVudW0gKz0gYCAgJHtjbmFtZX0sXG5gOwogICAgb3V0Lm1mbiArPSBgICAgIGNhc2UgJHtjbmFtZX06IHtcbmA7CgogICAgaWYocGFyYW1ldGVycy5sZW5ndGggPiAwKSB7CiAgICAgIGNvbnN0IHR5cGVzID0ge30sCiAgICAgICAgdG0gPSBuZXcgTWFwKCk7CiAgICAgIGxldCBpID0gMDsKCiAgICAgIGZvcihsZXQgW25hbWUgPSBgYXJnJHtpfWAsIHBhcmFtXSBvZiBwYXJhbWV0ZXJzKSB7CiAgICAgICAgY29uc3QgeyBkZXN1Z2FyZWQsIHF1YWxUeXBlIH0gPSBwYXJhbTsKCiAgICAgICAgbGV0IHR5cGUgPSBkZXN1Z2FyZWQgPz8gcXVhbFR5cGUgPz8gcGFyYW07CgogICAgICAgIHN3aXRjaCAodHlwZSkgewogICAgICAgICAgY2FzZSAnaW50JzoKICAgICAgICAgICAgdHlwZSA9ICdpbnQzMl90JzsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlICd1bnNpZ25lZCBpbnQnOgogICAgICAgICAgICB0eXBlID0gJ3VpbnQzMl90JzsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICAgIGNvbnNvbGUubG9nKCcnLCB7IG5hbWUsIHBhcmFtLCB0eXBlIH0pOwoKICAgICAgICB0eXBlc1t0eXBlXSA/Pz0gW107CiAgICAgICAgdHlwZXNbdHlwZV0ucHVzaChuYW1lKTsKCiAgICAgICAgdG0uc2V0KHR5cGUgKyAnJywgdHlwZSk7CgogICAgICAgICsraTsKICAgICAgfQoKICAgICAgY29uc3QgdG9fanN0eXBlID0gdHlwZSA9PiAoeyBpbnQ6ICdJbnQzMicsICd1bnNpZ25lZCBpbnQnOiAnVWludDMyJywgZG91YmxlOiAnRmxvYXQ2NCcsIGZsb2F0OiAnRmxvYXQ2NCcsIGludDMyX3Q6ICdJbnQzMicsIHVpbnQzMl90OiAnVWludDMyJywgaW50NjRfdDogJ0ludDY0JywgdWludDY0X3Q6ICdJbmRleCcgfVt0eXBlXSk7CgogICAgICBmb3IobGV0IHR5cGUgaW4gdHlwZXMpIHsKICAgICAgICBjb25zdCBqc3R5cGUgPSB0b19qc3R5cGUodHlwZSk7CiAgICAgICAgbGV0IHQgPSB0bS5nZXQodHlwZSk7CgogICAgICAgIGlmKGpzdHlwZSA9PSB1bmRlZmluZWQpIG91dC5tZm4gKz0gYCAgICBgICsgZGVjbCh0Py5wb2ludGVlID8/IHQgPz8gdHlwZSwgdHlwZXNbdHlwZV0uam9pbignLCAnKSkgKyAnXG4nOwogICAgICAgIGVsc2Ugb3V0Lm1mbiArPSBgICAgICAgJHt0eXBlfSAke3R5cGVzW3R5cGVdLmpvaW4oJywgJyl9O1xuYDsKICAgICAgfQoKICAgICAgb3V0Lm1mbiArPSBgXG5gOwoKICAgICAgaSA9IDA7CgogICAgICBmb3IobGV0IFtuYW1lID0gYGFyZyR7aX1gLCBwYXJhbV0gb2YgcGFyYW1ldGVycykgewogICAgICAgIGNvbnN0IHsgZGVzdWdhcmVkLCBxdWFsVHlwZSB9ID0gcGFyYW07CiAgICAgICAgbGV0IHR5cGUgPSBkZXN1Z2FyZWQgPz8gcXVhbFR5cGUgPz8gcGFyYW07CgogICAgICAgIGNvbnN0IGpzdHlwZSA9IHRvX2pzdHlwZSh0eXBlKTsKCiAgICAgICAgaWYoanN0eXBlID09IHVuZGVmaW5lZCkgb3V0Lm1mbiArPSBgICAgIGAgKyBhc3NpZ24odHlwZT8ucG9pbnRlZSA/PyB0eXBlLCBuYW1lKS5yZXBsYWNlQWxsKCdcbicsICdcbiAgICAnKSArICdcbic7CiAgICAgICAgZWxzZSBvdXQubWZuICs9IGAgICAgICBKU19UbyR7anN0eXBlfShjdHgsICYke25hbWV9LCBhcmd2WyR7aX1dKTtcbmA7CgogICAgICAgIC8vIGNvbnNvbGUubG9nKCcnLCB7IG5hbWUsIGRlc3VnYXJlZCwgdHlwZUFsaWFzIH0pOwogICAgICAgICsraTsKICAgICAgfQoKICAgICAgb3V0Lm1mbiArPSBgXG5gOwogICAgfQoKICAgIGxldCBwYXJhbXMgPSBbXTsKCiAgICBmb3IobGV0IFtuYW1lLCBwYXJhbV0gb2YgcGFyYW1ldGVycykgcGFyYW1zLnB1c2gobmFtZSA/PyAnb3RoZXInKTsKCiAgICBsZXQgY2FsbCA9IGBwdHItPiR7bmFtZX0oYCArIHBhcmFtcy5qb2luKCcsICcpICsgYClgOwoKICAgIGlmKHJldHVyblR5cGUpIHsKICAgICAgc3dpdGNoIChyZXR1cm5UeXBlICsgJycpIHsKICAgICAgICBjYXNlICd2b2lkJzoKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlICdmbG9hdCc6CiAgICAgICAgY2FzZSAnZG91YmxlJzoKICAgICAgICAgIGNhbGwgPSBgcmV0ID0gSlNfTmV3RmxvYXQ2NChjdHgsICR7Y2FsbH0pYDsKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlICdpbnQnOgogICAgICAgIGNhc2UgJ2ludDMyX3QnOgogICAgICAgICAgY2FsbCA9IGByZXQgPSBKU19OZXdJbnQzMihjdHgsICR7Y2FsbH0pYDsKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlICd1bnNpZ25lZCBpbnQnOgogICAgICAgIGNhc2UgJ3VpbnQzMl90JzoKICAgICAgICAgIGNhbGwgPSBgcmV0ID0gSlNfTmV3VWludDMyKGN0eCwgJHtjYWxsfSlgOwogICAgICAgICAgYnJlYWs7CgogICAgICAgIGNhc2UgJ2xvbmcnOgogICAgICAgIGNhc2UgJ3Vuc2lnbmVkIGxvbmcnOgogICAgICAgIGNhc2UgJ2ludDY0X3QnOgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICBjYWxsID0gYHJldCA9IEpTX05ld0ludDY0KGN0eCwgJHtjYWxsfSlgOwogICAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgIH0KCiAgICBvdXQubWZuICs9IGAgICAgICAke2NhbGx9O1xuYDsKICAgIG91dC5tZm4gKz0gYCAgICAgIGJyZWFrO1xuICAgIH1cbmA7CiAgfQoKICBmb3IobGV0IGZpZWxkIG9mIG1lbWJlcnMuZmllbGRzKSB7CiAgICBjb25zdCB7IG5hbWUsIGRlc3VnYXJlZCwgdHlwZUFsaWFzLCBhY2Nlc3MsIHN0b3JhZ2VDbGFzcyB9ID0gZmllbGQ7CgogICAgaWYoc3RvcmFnZUNsYXNzID09ICdzdGF0aWMnKSBjb250aW51ZTsKICAgIGlmKGZpZWxkLmFzdC5zdG9yYWdlQ2xhc3MgPT0gJ3N0YXRpYycpIGNvbnRpbnVlOwoKICAgIGNvbnN0IGNuYW1lID0gJ1BST1BfJyArIE1ha2VJZChkZWNhbWVsaXplKG5hbWUsICdfJykpLnRvVXBwZXJDYXNlKCkucmVwbGFjZUFsbCgnX18nLCAnX3gnKTsKCiAgICBvdXQuZm5zICs9IGAgIEpTX0NHRVRTRVRfTUFHSUNfREVGKCIke25hbWV9IiwganNfJHtjaWR9X2dldCwganNfJHtjaWR9X3NldCwgJHtjbmFtZX0pLFxuYDsKICAgIG91dC5wZW51bSArPSBgICAke2NuYW1lfSxcbmA7CiAgICBvdXQucGdldCArPSBgICAgIGNhc2UgJHtjbmFtZX06IHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbmA7CiAgICBvdXQucHNldCArPSBgICAgIGNhc2UgJHtjbmFtZX06IHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbmA7CiAgfQoKICBmb3IobGV0IGVuIG9mIG1lbWJlcnMuZW51bXMpIHsKICAgIGNvbnN0IHsgbmFtZSwgbWVtYmVycyB9ID0gZW47CgogICAgLy9vdXQuZm5zICs9IGAgIC8qIGVudW0gJHtuYW1lfSAqL1xuYDsKCiAgICBmb3IobGV0IFtuYW1lLCB2YWx1ZV0gb2YgbWVtYmVycykgewogICAgICBvdXQuZm5zICs9IGAgIEpTX1BST1BfSU5UNjRfREVGKCIke25hbWV9IiwgJHt2YWx1ZX0sIEpTX1BST1BfQ09ORklHVVJBQkxFKSxcbmA7CiAgICB9CiAgfQoKICBvdXQuZm5zICs9IGAgIEpTX1BST1BfU1RSSU5HX0RFRigiW1N5bWJvbC50b1N0cmluZ1RhZ10iLCAiJHtjbmFtZX0iLCBKU19QUk9QX0NPTkZJR1VSQUJMRSksXG5gOwoKICBvdXQuZm5zICs9IGB9O1xuYDsKICBvdXQubWVudW0gKz0gYH07XG5gOwogIG91dC5wZW51bSArPSBgfTtcbmA7CgogIG91dC5wZ2V0ICs9IGAgIH1cblxuICByZXR1cm4gcmV0O1xufTtcbmA7CiAgb3V0LnBzZXQgKz0gYCAgfVxuXG4gIHJldHVybiByZXQ7XG59O1xuYDsKICBvdXQubWZuICs9IGAgIH1cblxuICByZXR1cm4gcmV0O1xufTtcbmA7CgogIHJldHVybiBvdXQubWVudW0gKyBgXG5gICsgb3V0Lm1mbiArIGBcbmAgKyAobWVtYmVycy5maWVsZHMubGVuZ3RoID4gMCA/IG91dC5wZW51bSArIGBcbmAgKyBvdXQucGdldCArIGBcbmAgKyBvdXQucHNldCArIGBcbmAgOiAnJykgKyBvdXQuZm5zOwp9Cgphc3luYyBmdW5jdGlvbiBBU1RTaGVsbCguLi5hcmdzKSB7CiAgbGV0IGluc3BlY3RPcHRpb25zID0gewogICAgZGVwdGg6IDIsCiAgICAvKmJyZWFrTGVuZ3RoOiAyNDAsICovIGN1c3RvbUluc3BlY3Q6IHRydWUsCiAgICBjb21wYWN0OiBmYWxzZSwKICAgIGRlcHRoOiBJbmZpbml0eSwKICAgIG1heEFycmF5TGVuZ3RoOiBJbmZpbml0eSwKICAgIGhpZGVLZXlzOiBbJ2xvYycsICdyYW5nZSddLAogIH07CgogIGdsb2JhbFRoaXMuY29uc29sZSA9IG5ldyBDb25zb2xlKHsgaW5zcGVjdE9wdGlvbnMgfSk7CgogIGdsb2JhbFRoaXMuZmlsZXMgPSBmaWxlcyA9IHt9OwoKICBiYXNlID0gcGF0aC5iYXNlbmFtZShzY3JpcHRBcmdzWzBdLCAnLmpzJykucmVwbGFjZSgvXC5bYS16XSokLywgJycpOwogIGNtZGhpc3QgPSBgLiR7YmFzZX0tY21kaGlzdG9yeWA7CiAgY29uZmlnID0gYC4ke2Jhc2V9LWNvbmZpZ2A7CgogIHBhcmFtcyA9IGdsb2JhbFRoaXMucGFyYW1zID0gZ2V0T3B0KAogICAgewogICAgICBpbmNsdWRlOiBbdHJ1ZSwgKGEsIHApID0+IChwIHx8IFtdKS5jb25jYXQoW2FdKSwgJ0knXSwKICAgICAgZGVmaW5lOiBbdHJ1ZSwgKGEsIHApID0+IChwIHx8IFtdKS5jb25jYXQoW2FdKSwgJ0QnXSwKICAgICAgbGliczogW3RydWUsIChhLCBwKSA9PiAocCB8fCBbXSkuY29uY2F0KFthXSksICdsJ10sCiAgICAgIGRlYnVnOiBbZmFsc2UsIG51bGwsICd4J10sCiAgICAgIGZvcmNlOiBbZmFsc2UsIG51bGwsICdmJ10sCiAgICAgIHRhcmdldDogW3RydWUsIG51bGwsICd0J10sCiAgICAgIGV4ZWM6IFt0cnVlLCBudWxsLCAnZSddLAogICAgICAnc3lzdGVtLWluY2x1ZGVzJzogW2ZhbHNlLCBudWxsLCAncyddLAogICAgICAnbm8tcmVtb3ZlLWVtcHR5JzogW2ZhbHNlLCBudWxsLCAnRSddLAogICAgICAnb3V0cHV0LWRpcic6IFt0cnVlLCBudWxsLCAnZCddLAogICAgICBjb21waWxlcjogWydjbGFuZycsIG51bGwsICdjJ10sCiAgICAgICdAJzogJ2lucHV0JywKICAgIH0sCiAgICBhcmdzLAogICk7CgogIGRlZnMgPSBwYXJhbXMuZGVmaW5lIHx8IFtdOwogIGluY2x1ZGVzID0gcGFyYW1zLmluY2x1ZGUgfHwgW107CiAgbGlicyA9IHBhcmFtcy5saWJzIHx8IFtdOwogIHNvdXJjZXMgPSBwYXJhbXNbJ0AnXSB8fCBbXTsKCiAgZGVmaW5lKGdsb2JhbFRoaXMsIHsKICAgIGRlZnMsCiAgICBpbmNsdWRlcywKICAgIGxpYnMsCiAgICAvKiBwcmV0dGllci1pZ25vcmUgKi8gZ2V0IGZsYWdzKCkgewogICAgICByZXR1cm4gWyAuLi4ocGFyYW1zLnRhcmdldD8gW2AtLXRhcmdldD0ke3BhcmFtcy50YXJnZXR9YF0gOiBbXSksICAuLi5pbmNsdWRlcy5maWx0ZXIodiA9PiB0eXBlb2YgdiA9PSAnc3RyaW5nJykubWFwKHYgPT4gYC1JJHt2fWApLCAuLi5kZWZzLm1hcChkID0+IGAtRCR7ZH1gKSwgLi4ubGlicy5tYXAobCA9PiBgLWwke2x9YCldOwogICAgfSwKICB9KTsKCiAgYXN5bmMgZnVuY3Rpb24gQ29tcGlsZShmaWxlLCAuLi5hcmdzKSB7CiAgICBsZXQgcjsKCiAgICAvKiBpZihwYXJhbXMudGFyZ2V0KQogICAgICBhcmdzLnVuc2hpZnQoYC0tdGFyZ2V0PSR7cGFyYW1zLnRhcmdldH1gKTsqLwoKICAgIHRyeSB7CiAgICAgIHIgPSBnbG9iYWxUaGlzLnIgPSBhd2FpdCBBc3REdW1wKHBhcmFtcy5jb21waWxlciwgZmlsZSwgWy4uLmdsb2JhbFRoaXMuZmxhZ3MsIC4uLmFyZ3NdLCBwYXJhbXMuZm9yY2UpOwogICAgfSBjYXRjaChlKSB7CiAgICAgIGNvbnNvbGUubG9nKCdDb21waWxlIEVSUk9SOicsIGUubWVzc2FnZSArICdcbicgKyBlLnN0YWNrKTsKICAgICAgcmV0dXJuIGU7CiAgICB9CiAgICByLnNvdXJjZSA9IGZpbGU7CgogICAgZ2xvYmFsVGhpcy5maWxlc1tmaWxlXSA9IHI7CgogICAgbGV0IGFzdDJwYXRoID0gbWFwV3JhcHBlcihuZXcgV2Vha01hcCgpKTsKCiAgICBkZWZpbmUociwgewogICAgICBzZWxlY3QobmFtZV9vcl9pZCwgcHJlZCA9IG4gPT4gdHJ1ZSkgewogICAgICAgIHJldHVybiB0aGlzLmRhdGEuaW5uZXIuZmlsdGVyKG5hbWVPcklkUHJlZChuYW1lX29yX2lkLCBwcmVkKSk7CiAgICAgIH0sCiAgICAgIGdldEJ5SWRPck5hbWUobmFtZV9vcl9pZCwgcHJlZCA9IG4gPT4gdHJ1ZSkgewogICAgICAgIGxldCBub2RlID0gdGhpcy5kYXRhLmlubmVyLmZpbmRMYXN0KG5hbWVPcklkUHJlZChuYW1lX29yX2lkLCBwcmVkKSk7CgogICAgICAgIG5vZGUgPz89IHRoaXMuY2xhc3Nlcy5maW5kTGFzdChuYW1lT3JJZFByZWQobmFtZV9vcl9pZCwgcHJlZCkpOwogICAgICAgIG5vZGUgPz89IERlZXBGaW5kKHRoaXMuZGF0YSwgbmFtZU9ySWRQcmVkKG5hbWVfb3JfaWQsIHByZWQpKTsKICAgICAgICByZXR1cm4gbm9kZTsKICAgICAgfSwKICAgICAgZ2V0VHlwZTogbWVtb2l6ZShmdW5jdGlvbiBnZXRUeXBlKG5hbWVfb3JfaWQpIHsKICAgICAgICBsZXQgcmVzdWx0ID0gdGhpcy5nZXRCeUlkT3JOYW1lKG5hbWVfb3JfaWQsIG4gPT4gIS8oRnVuY3Rpb25EZWNsfE5hbWVzcGFjZURlY2wpLy50ZXN0KG4ua2luZCkgJiYgL0RlY2wvLnRlc3Qobi5raW5kKSk7CiAgICAgICAgLy9sZXQgcmVzdWx0ID0gdGhpcy5nZXROYW1lc3BhY2UobmFtZV9vcl9pZCwgdGhpcy5kYXRhLCBuID0+ICEvKEZ1bmN0aW9uRGVjbCkvLnRlc3Qobi5raW5kKSAmJiAvRGVjbC8udGVzdChuLmtpbmQpKTsKCiAgICAgICAgcmVzdWx0ID8/PSBHZXRUeXBlKG5hbWVfb3JfaWQsIHRoaXMuZGF0YSk7CgogICAgICAgIGlmKHJlc3VsdCkgewogICAgICAgICAgbGV0IHR5cGUgPSBUeXBlRmFjdG9yeShyZXN1bHQsIHRoaXMuZGF0YSk7CiAgICAgICAgICBpZih0eXBlKSByZXN1bHQgPSB0eXBlOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfSksCiAgICAgIGdldE5hbWVzcGFjZShhcmcsIHJvb3QgPSB0aGlzLmRhdGEsIHByZWRpY2F0ZSA9ICgpID0+IHRydWUpIHsKICAgICAgICByZXR1cm4gR2V0TmFtZXNwYWNlKGFyZywgcm9vdCwgcHJlZGljYXRlKTsKICAgICAgfSwKICAgICAgbmFtZXNwYWNlT2Yobm9kZSkgewogICAgICAgIHJldHVybiBOYW1lc3BhY2VPZihub2RlPy5hc3QgPz8gbm9kZSwgdGhpcy5kYXRhKTsKICAgICAgfSwKICAgICAgZ2V0Q2xhc3M6IG1lbW9pemUoZnVuY3Rpb24gZ2V0Q2xhc3MobmFtZV9vcl9pZCkgewogICAgICAgIHJldHVybiBHZXRDbGFzcyhuYW1lX29yX2lkLCB0aGlzLmRhdGEpOwogICAgICB9KSwKICAgICAgZ2V0RnVuY3Rpb24obmFtZV9vcl9pZCkgewogICAgICAgIGxldCByZXN1bHQgPSBpc05vZGUobmFtZV9vcl9pZCkgPyBuYW1lX29yX2lkIDogdGhpcy5nZXRCeUlkT3JOYW1lKG5hbWVfb3JfaWQsIG4gPT4gLyhGdW5jdGlvbkRlY2wpLy50ZXN0KG4ua2luZCkpOwoKICAgICAgICBpZihyZXN1bHQpIHJldHVybiBuZXcgRnVuY3Rpb25EZWNsKHJlc3VsdCwgdGhpcy5kYXRhKTsKICAgICAgfSwKICAgICAgZ2V0VmFyaWFibGUobmFtZV9vcl9pZCkgewogICAgICAgIGxldCByZXN1bHQgPSBpc05vZGUobmFtZV9vcl9pZCkgPyBuYW1lX29yX2lkIDogdGhpcy5nZXRCeUlkT3JOYW1lKG5hbWVfb3JfaWQsIG4gPT4gLyhWYXJEZWNsKS8udGVzdChuLmtpbmQpKTsKCiAgICAgICAgaWYocmVzdWx0KSByZXR1cm4gbmV3IFZhckRlY2wocmVzdWx0LCB0aGlzLmRhdGEpOwogICAgICB9LAogICAgICBnZXRMb2Mobm9kZSkgewogICAgICAgIHJldHVybiBDb21wbGV0ZUxvY2F0aW9uKG5vZGUpOwogICAgICB9LAogICAgfSk7CgogICAgZGVmaW5lR2V0dGVyKAogICAgICByLAogICAgICAndHJlZScsCiAgICAgIG1lbW9pemUoKCkgPT4gbmV3IFRyZWUoci5kYXRhKSksCiAgICApOwogICAgcmV0dXJuIGRlZmluZShyLCB7CiAgICAgIHBhdGhPZihuZWVkbGUsIG1heERlcHRoID0gMTApIHsKICAgICAgICBsZXQgcCA9IGFzdDJwYXRoKG5lZWRsZT8uYXN0ID8/IG5lZWRsZSk7CiAgICAgICAgaWYocCkgcmV0dXJuIHA7CgogICAgICAgIGlmKCdhc3QnIGluIG5lZWRsZSkgbmVlZGxlID0gbmVlZGxlLmFzdDsKCiAgICAgICAgZm9yKGxldCBbbm9kZSwgcGF0aF0gb2YgRGVlcFNlbGVjdChyLmRhdGEsIG4gPT4gdHlwZW9mIG4gPT0gJ29iamVjdCcgJiYgbiAhPSBudWxsLCBkZWVwLlJFVFVSTl9WQUxVRV9QQVRILCBtYXhEZXB0aCkpIGlmKG5vZGUgPT09IG5lZWRsZSkgcmV0dXJuIG5ldyBQb2ludGVyKHBhdGgpOwogICAgICB9LAogICAgfSk7CiAgfQoKICBPYmplY3QuYXNzaWduKGdsb2JhbFRoaXMsIHsKICAgIERlZXBTZWxlY3QsCiAgICBEZWVwR2V0LAogICAgRGVlcEZpbmQsCiAgICBEZWVwUGF0aE9mLAogICAgU0laRU9GX1BPSU5URVIsCiAgICBUeXBlLAogICAgUG9pbnRlclR5cGUsCiAgICBSZWZlcmVuY2VUeXBlLAogICAgRmllbGREZWNsLAogICAgTmFtZUZvciwKICAgIEFzdER1bXAsCiAgICBTb3VyY2VEZXBlbmRlbmNpZXMsCiAgICBOb2RlUHJpbnRlciwKICAgIE5vZGVUeXBlLAogICAgTm9kZU5hbWUsCiAgICBHZXRMb2MsCiAgICBSYXdMb2NhdGlvbiwKICAgIENvbXBsZXRlTG9jYXRpb24sCiAgICBSYXdSYW5nZSwKICAgIENvbXBsZXRlUmFuZ2UsCiAgICBHZXRUeXBlU3RyLAogICAgUHJpbnRSYW5nZSwKICAgIE92ZXJsYXBSYW5nZSwKICAgIFBhcmVudE5vZGUsCiAgICBOZXh0U2libGluZywKICAgIFByZXZpb3VzU2libGluZywKICAgIEZpcnN0Q2hpbGQsCiAgICBMYXN0Q2hpbGQsCiAgICBHZW5lcmF0ZUluc3BlY3RTdHJ1Y3QsCiAgICBHZW5lcmF0ZVN0cnVjdENsYXNzLAogICAgSW5zcGVjdFN0cnVjdCwKICAgIE1ha2VTdHJ1Y3RDbGFzcywKICAgIERpckl0ZXJhdG9yLAogICAgUmVjdXJzaXZlRGlySXRlcmF0b3IsCiAgICBJbmNsdWRlQWxsLAogICAgVGVybWluYWwsCiAgICBQcmludEFzdCwKICAgIENvbmNhdEl0ZXJhdG9yLAogICAgU3RyaW5nR2VuZXJhdG9yLAogICAgUmVhZEZpbGUsCiAgICBXcml0ZUZpbGUsCiAgICBNYWtlRkZJLAogICAgTWFrZVF1aWNrSlNDbGFzcywKICAgIFBhcnNlRUNNQVNjcmlwdCwKICAgIFByaW50RUNNQVNjcmlwdCwKICAgIFByb2Nlc3NGaWxlLAogICAgdG9BcnJheUJ1ZmZlciwKICAgIHRvU3RyaW5nLAogICAgQ29uc3RhbnRzLAogICAgUHJpbnRDQXJyYXksCiAgICBHZXRQYXJhbXMsCiAgICBMaXN0LAogICAgU2hlbGwsCiAgICBQYXJzZVN0cnVjdHMsCiAgfSk7CgogIFBvaW50ZXIucHJvdG90eXBlLmNoYWluID0gZnVuY3Rpb24oc3RlcCwgbGltaXQgPSBJbmZpbml0eSkgewogICAgbGV0IHB0ciA9IHRoaXMsCiAgICAgIHJldCA9IFtdLAogICAgICBsZW4gPSBwdHIubGVuZ3RoOwoKICAgIGZvcig7OykgewogICAgICBpZihyZXQubGVuZ3RoID49IGxpbWl0KSBicmVhazsKICAgICAgcmV0LnVuc2hpZnQocHRyKTsKCiAgICAgIGxlbiAtPSBzdGVwOwogICAgICBpZihsZW4gPD0gMCkgYnJlYWs7CiAgICAgIHB0ciA9IHB0ci5zbGljZSgwLCAtc3RlcCk7CiAgICB9CgogICAgcmV0dXJuIHJldDsKICB9OwoKICBPYmplY3QuYXNzaWduKGdsb2JhbFRoaXMsIHsKICAgIFBvaW50ZXIsCiAgICBUcmVlLAogICAgZGVlcCwKICAgIHBhdGgsCiAgICBDb21waWxlLAogICAgU2VsZWN0TG9jYXRpb25zLAogICAgTG9jYXRpb25TdHJpbmcsCiAgICBUYWJsZSwKICAgIFN0cnVjdHMsCiAgICBOb2RlLAogICAgVHlwZSwKICAgIFJlY29yZERlY2wsCiAgICBFbnVtRGVjbCwKICAgIFR5cGVkZWZEZWNsLAogICAgVmFyRGVjbCwKICAgIEZpbmRUeXBlLAogICAgSGllciwKICAgIFBhdGhPZiwKICAgIEZ1bmN0aW9uRGVjbCwKICAgIExvY2F0aW9uLAogICAgUmFuZ2UsCiAgICBUeXBlRmFjdG9yeSwKICAgIFNwYXduQ29tcGlsZXIsCiAgICBBc3REdW1wLAogICAgTm9kZVR5cGUsCiAgICBOb2RlTmFtZSwKICAgIEdldExvYywKICAgIEdldENsYXNzLAogICAgR2V0QmFzZXMsCiAgICBHZXRCeU5hbWUsCiAgICBHZXROYW1lc3BhY2UsCiAgICBOYW1lc3BhY2VPZiwKICAgIEdldFR5cGUsCiAgICBHZXRUeXBlU3RyLAogICAgR2V0VHlwZU5vZGUsCiAgICBHZXRGaWVsZHMsCiAgICBQYXRoUmVtb3ZlTG9jLAogICAgRkZJX0Z1bmN0aW9uLAogICAgbGliZGlycywKICAgIGxpYmRpcnMzMiwKICAgIGxpYmRpcnM2NCwKICAgIExpYnJhcnlFeHBvcnRzLAogICAgTWVtYmVyTmFtZXMsCiAgICBHZXRJbXBvcnRzLAogICAgR2V0SWRlbnRpZmllcnMsCiAgICBOYW1lc3BhY2VzLAogICAgVW5zZXRMb2MsCiAgfSk7CiAgLy9nbG9iYWxUaGlzLlV0aWwgPSBVdGlsOwogIGdsb2JhbFRoaXMuRiA9IGFyZyA9PiAkLmdldEZ1bmN0aW9uKGFyZyk7CiAgZ2xvYmFsVGhpcy5UID0gYXJnID0+ICQuZ2V0VHlwZShhcmcpOwoKICBsYXp5UHJvcGVydHkoZ2xvYmFsVGhpcywgJ1AnLCAoKSA9PiB7CiAgICBsZXQgcHJpbnRlciA9IE5vZGVQcmludGVyKCQuZGF0YSk7CgogICAgcmV0dXJuIG5vZGUgPT4gewogICAgICBpZignYXN0JyBpbiBub2RlKSBub2RlID0gbm9kZS5hc3Q7CiAgICAgIHByaW50ZXIuY2xlYXIoKTsKICAgICAgcmV0dXJuIHByaW50ZXIucHJpbnQobm9kZSk7CiAgICB9OwogIH0pOwoKICAvL2NvbnNvbGUubG9nKCdMb2FkaW5nIGhpc3RvcnknKTsKCiAgY29uc3QgdW5pdGhpc3QgPSBgLiR7YmFzZX0tdW5pdGhpc3RvcnlgOwogIGxldCBpdGVtcyA9IFtdLAogICAgaGlzdCA9IFJlYWRKU09OKHVuaXRoaXN0KSB8fCBbXTsKCiAgY29uc29sZS5sb2coJ0xvYWRpbmcgc291cmNlczonICsgc291cmNlcy5tYXAocyA9PiAnICcgKyBzKS5qb2luKCcsJykpOwoKICBnbG9iYWxUaGlzWydfJ10gPSBpdGVtczsKCiAgZm9yKGxldCBzb3VyY2Ugb2Ygc291cmNlcykgewogICAgbGV0IGl0ZW0gPSBhd2FpdCBQcm9jZXNzRmlsZShzb3VyY2UpOwoKICAgIGdsb2JhbFRoaXNbJyQnXSA9IGl0ZW07CgogICAgLyppZigvXC5qcyQvLnRlc3Qoc291cmNlKSkgaXRlbSA9IFBhcnNlRUNNQVNjcmlwdChzb3VyY2UpOwogICAgZWxzZSBpdGVtID0gYXdhaXQgQ29tcGlsZShzb3VyY2UpOyovCgogICAgaWYoaXRlbSkgewogICAgICBwdXNoVW5pcXVlKGhpc3QsIFsuLi5mbGFncywgc291cmNlXSk7CiAgICAgIGl0ZW1zLnB1c2goaXRlbSk7CiAgICB9CiAgfQoKICBXcml0ZUZpbGUodW5pdGhpc3QsIEpTT04uc3RyaW5naWZ5KGhpc3QsIG51bGwsIDIpKTsKCiAgLy8gZ2xvYmFsVGhpcy4kID0gaXRlbXMubGVuZ3RoID09IDEgPyBpdGVtc1swXSA6IGl0ZW1zOwogIGF3YWl0IENvbW1hbmRMaW5lKCk7Cn0KCmxldCBlcnJvcjsKCnRyeSB7CiAgY29uc3QgYXJndiA9IHNjcmlwdEFyZ3Muc2xpY2UoMSk7CiAgQVNUU2hlbGwoLi4uYXJndik7Cn0gY2F0Y2goZSkgewogIGVycm9yID0gZTsKfSBmaW5hbGx5IHsKICBpZihlcnJvcikgewogICAgY29uc29sZS5sb2coJ0ZBSUw6ICcgKyBlcnJvci5tZXNzYWdlLCAnXG4gICcgKyBuZXcgU3RhY2soZXJyb3Iuc3RhY2ssIGZyID0+IGZyLmZ1bmN0aW9uTmFtZSAhPSAnZXNmYWN0b3J5JykudG9TdHJpbmcoKS5yZXBsYWNlKC9cbi9nLCAnXG4gICcpKTsKICAgIGNvbnNvbGUubG9nKCdGQUlMJyk7CiAgICBzdGQuZXhpdCgxKTsKICB9Cn0KAAAAAAAAAAC7sgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFZcAAAAAAAAVlwAAAAAAAAAAAAAAgHBA"
				],
				[
					2855,
					1,
					"revert",
					null,
					"",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPQIAAAAAAAA9AgAAAAAAAAAAAAAAAAAA"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"doxy",
				"DoxyDoxygen: Comment All"
			],
			[
				"",
				":$ - EOF"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"format",
				"JsPrettier: Format Code"
			],
			[
				"prett",
				"JsPrettier: Format Code"
			],
			[
				"ou",
				"Browse Mode: Outline (Right)"
			],
			[
				"instga",
				"Package Control: Install Package"
			],
			[
				"prettier",
				"JsPrettier: Format Code"
			],
			[
				"json",
				"Pretty JSON: Minify JSON"
			],
			[
				"jspr",
				"JsPrettier: Format Code"
			],
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"color",
				"Color Highlight: Reset"
			],
			[
				"scheme",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"edit cu",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"install pac",
				"Package Control: Install Package"
			],
			[
				"list pack",
				"Package Control: List Packages"
			],
			[
				"edit ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"edit",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"outli",
				"Browse Mode: Outline (Right)"
			],
			[
				"debugger",
				"Preferences: Debugger Settings"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"INSTALL",
				"Package Control: Install Package"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"adap",
				"Debugger: Install Adapters"
			],
			[
				"install ada",
				"Debugger: Install Adapters"
			],
			[
				"adapter",
				"Debugger: Install Adapters"
			],
			[
				"debug",
				"Debugger: Install Adapters"
			],
			[
				"Package Control: remove",
				"Package Control: Remove Package"
			],
			[
				"debu",
				"Debugger: Install Adapters"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 289.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/clang-ast.js",
		"/home/roman/Projects/plot-cv/soundcloud-tracks.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/console.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fs.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/lib/deep.js",
		"/home/roman/Projects/plot-cv/os-helpers.js",
		"/home/janos/Projects/plot-cv/out.gz",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-context-vhost.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/test.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lws-context.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/events.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/web-platform-tests-streams/shared-storage/resources/util.sub.js",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-repeater.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/property-enumeration.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/buffer-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/qjsm.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/io.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/js-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/stream-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/queue.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-mysql.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-blob.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/async-closure.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/misc.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/xpath.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/xml.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-textcode.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/ringbuffer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/inotify.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/extendObject.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/ringbuffer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/js-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/streams.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake/functions.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/defines.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/async-closure.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/buffer-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fsPromises.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-syscallerror.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-syscallerror.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/web-platform-tests-streams/editing/crashtests/make-editable-div-inline-and-set-contenteditable-of-input-to-false.html",
		"/home/roman/Projects/plot-cv/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/process.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-magic.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_repeater.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-child-process.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/virtual-properties.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/child-process.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-predicate.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-pointer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-pgsql.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-path.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-mmap.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-location.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-list.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-internal.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-gpio.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/list-exports.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-serial.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-tree-walker.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-directory.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-deep.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/char-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-bjson.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-blob.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-queue.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-xml.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/path.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-archive.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/vector.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/predicate.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/inet_pton.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/path.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/xml-shell.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/testharnessreport.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/web-platform-tests-streams/streams/readable-streams/async-iterator.any.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_streams.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_stream.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/testharness.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/strverscmp.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/queue.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/mmap-win32.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/memmem.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/location.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/inet_ntop.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/getdents.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/debug.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/clock_gettime.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_sockets.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_pgsql.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_childprocess.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-llvm/usr/local/lib/quickjs/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-release/usr/local/lib/quickjs/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-clang/usr/local/lib/quickjs/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/parser/ebnf.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/lexer/bnf.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_inotify.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_deep.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_blob.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_predicate.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_treewalker.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_pointer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_op_overloading.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_xml.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-profile/usr/local/bin/list-exports.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-clang/usr/local/bin/resolve-imports.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-clang/usr/local/bin/list-exports.js"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 138.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"WriteJS",
			"ReadJSON",
			"WriteJS",
			"ReadJSON",
			"class Location",
			"Location",
			"Location\\b",
			"TYPE_BIG_INT",
			"fs\\.",
			"fs'",
			"Symbol.for",
			"Newer",
			"remove",
			"fs\\.",
			"Writing",
			"base =",
			"unithist",
			"'FunctionDecl",
			"No such",
			"'Type.cons",
			"GetClass",
			"getClass",
			"nameOrIdPred",
			"Deep(Find|Select)\\(",
			"Deep(Find|Select).*name ==",
			"DeepFind.*name ==",
			"DeepFind",
			"decl\\(",
			"\n        ",
			"EnumDecl",
			"class EnumDecl",
			"EnumDecl",
			"ions.get",
			"ions.set",
			"GetClass",
			"getClass",
			"'Type.cons",
			"completeDef",
			"MakeId",
			"cid =",
			"GetByName",
			"GetClass",
			"getClass",
			"GetByName",
			"GetBasese",
			"GetByName",
			"Object.assign",
			"mapFunction\\b",
			"function Get",
			"NameFor",
			"DeepPathOf",
			"deep.pathOf",
			"NamespaceOf",
			"function NamespaceOf",
			"node2path",
			"deep\\.",
			"deep\\.get",
			"deep\\..get",
			"deep\\.",
			"deep\\.get",
			"deep.get",
			"deep\\.",
			"deep\\.select",
			"deep\\.",
			"deep\\.pathOf",
			"deep.pathOf",
			"export const ([\\w]+) = (\\(?)(.*[^)])(\\)?) => {",
			"export const ([\\w]+) = (\\(?)(.*)(\\)?) => {",
			"export const ([\\w]+) = (\\(?)(.*)(\\)?) => {\n",
			"pathOf",
			"deep\\.",
			"deep\\.find",
			"\n      ",
			"deep\\.find",
			"DeepFind",
			"DeepFind.*RETURN_",
			"deep\\.find",
			"deep.find",
			"DeepFind",
			"deep.find",
			"DeepFind.*RETURN",
			"DeepFind",
			"deep\\.find",
			"\\= \\$\\.data",
			"class Type\\b",
			"RecordDecl",
			"new RecordDecl",
			"= \\$\\.data",
			"NamespaceOf",
			"new RecordDecl",
			"NameFor",
			"class RecordDecl",
			"NameFor",
			"RecordDecl",
			"NamespaceOf",
			"class FunctionDecl",
			"new FunctionDecl",
			"GetClass",
			"class Type\\b",
			"'Access'",
			"storageClass",
			"new Type\\b",
			"WeakMap",
			"'CXX",
			"class FieldDecl",
			"class PointerType",
			"FieldDecl",
			"'FieldDecl",
			"class FieldDecl",
			"new FieldDecl",
			"FieldDecl",
			"'Field",
			"class RecordDecl",
			"class ClassDecl",
			"TrimSubscripts",
			"'Type.cons",
			"'Type.cosn",
			"NamespaceOf",
			"fromString",
			"class FunctionDecl ",
			"type",
			"GetClass",
			"fromString",
			"PointerType",
			"function TypeFactory",
			"TypeFactory",
			"}*/\n",
			"class Type "
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"DeepGet",
			"DeepPathOf",
			"export function \\1(\\3) {",
			"DeepFind",
			"= globalThis['\\$'].data",
			"= globalThis['$'].data",
			"namespaceOf"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 752,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": "/home/roman/Projects/plot-cv/io-helpers.js",
							"function_name_status_row": 0,
							"outline_rename_mode": false,
							"symkeys":
							[
								[
									315,
									339
								],
								[
									533,
									570
								],
								[
									601,
									607
								],
								[
									673,
									686
								],
								[
									717,
									745
								],
								[
									989,
									1011
								],
								[
									1094,
									1127
								],
								[
									1209,
									1221
								],
								[
									1589,
									1621
								],
								[
									1687,
									1717
								],
								[
									1820,
									1851
								],
								[
									1919,
									1932
								],
								[
									2152,
									2160
								],
								[
									2245,
									2273
								],
								[
									2443,
									2484
								],
								[
									2706,
									2750
								],
								[
									2850,
									2881
								],
								[
									3248,
									3291
								],
								[
									3432,
									3480
								],
								[
									3793,
									3825
								],
								[
									3932,
									3972
								],
								[
									4134,
									4163
								],
								[
									4284,
									4317
								],
								[
									4378,
									4414
								],
								[
									4482,
									4509
								],
								[
									4562,
									4603
								],
								[
									4629,
									4638
								],
								[
									4680,
									4705
								],
								[
									4831,
									4841
								],
								[
									4959,
									4964
								],
								[
									5064,
									5074
								],
								[
									5151,
									5166
								],
								[
									5237,
									5251
								],
								[
									5371,
									5418
								],
								[
									5826,
									5857
								],
								[
									6285,
									6315
								],
								[
									6347,
									6365
								],
								[
									6497,
									6503
								]
							],
							"symlist":
							[
								"IfDebug(token)",
								"LogIfDebug(token, loggerFn)",
								"() =>",
								"(...args) =>",
								"ReadFd(fd, binary)",
								"IsStdio(obj)",
								"ReadClose(file, binary)",
								"()",
								"ReadFile(name, binary)",
								"ReadAny(obj, binary)",
								"LoadHistory(filename)",
								"  parse = () =>",
								"  entry =>",
								"ReadJSON(filename)",
								"ReadXML(filename, ...args)",
								"WriteXML(name, data, ...args)",
								"WriteFile(file, data)",
								"WriteFd(fd, data, offset, length)",
								"WriteClose(file, data, offset, length)",
								"WriteAny(obj, ...args)",
								"WriteJSON(name, data, ...args)",
								"ReadBJSON(filename)",
								"WriteBJSON(name, value)",
								"Filter(gen, regEx = /.*/)",
								"FilterImages(gen)",
								"SortFiles(arr, field = 'ctime')",
								"(a, b) =>",
								"StatFiles(gen)",
								"  toString()",
								"() =>",
								"  toString()",
								"  get landscape()",
								"  get portrait()",
								"FdReader(fd, bufferSize = 1024)",
								"CopyToClipboard(text)",
								"LogCall(fn, thisObj)",
								"function(...args)",
								"  arg =>"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1747022161.66,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "clang-list.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8043,
						"regions":
						{
						},
						"selection":
						[
							[
								22,
								22
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1747022191.37,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "clang-ast.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 88093,
						"regions":
						{
						},
						"selection":
						[
							[
								33928,
								33928
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 1240,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1747024172.7,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 19840.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "io-helpers.js",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6619,
						"regions":
						{
						},
						"selection":
						[
							[
								3784,
								3784
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 141,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1747024817.67,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2256.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "ast-shell.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 46678,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1746721943.9,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.764828128058,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.coffeecompile_output":
	{
		"height": 150.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "plot-cv.sublime-project",
	"replace":
	{
		"height": 50.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"io-he",
				"io-helpers.js"
			],
			[
				"clang-as",
				"clang-ast.js"
			],
			[
				"util.js",
				"quickjs/qjs-modules/lib/util.js"
			],
			[
				"console.js",
				"quickjs/qjs-modules/lib/console.js"
			],
			[
				"fs.js",
				"quickjs/qjs-modules/lib/fs.js"
			],
			[
				"deep.js",
				"lib/deep.js"
			],
			[
				"lib/deep",
				"lib/deep.js"
			],
			[
				"ast-shel",
				"ast-shell.js"
			],
			[
				"os-help",
				"os-helpers.js"
			],
			[
				"clang-ast",
				"clang-ast.js"
			],
			[
				"",
				"clang-list.js"
			],
			[
				"ast-she",
				"ast-shell.js"
			],
			[
				"clang-",
				"clang-list.js"
			],
			[
				"sound",
				"soundcloud-tracks.js"
			],
			[
				"out",
				"out.gz"
			],
			[
				"lws-context-v",
				"libwebsockets/include/libwebsockets/lws-context-vhost.h"
			],
			[
				"buffer-ut",
				"src/buffer-utils.c"
			],
			[
				"repl",
				"lib/repl.js"
			],
			[
				"utils.c",
				"src/utils.c"
			],
			[
				"qjsm.c",
				"src/qjsm.c"
			],
			[
				"utils.h",
				"include/utils.h"
			],
			[
				"quickjs-inspec",
				"quickjs-inspect.c"
			],
			[
				"io.js",
				"lib/io.js"
			],
			[
				"repl.js",
				"lib/repl.js"
			],
			[
				"util.sj",
				"web-platform-tests-streams/shared-storage/resources/util.sub.js"
			],
			[
				"quickjs.c",
				"~/Projects/plot-cv/quickjs/quickjs.c"
			],
			[
				"quickjs.h",
				"~/Projects/plot-cv/quickjs/quickjs.h"
			],
			[
				"js-utils.c",
				"src/js-utils.c"
			],
			[
				"quickjs-strea",
				"quickjs-stream.h"
			],
			[
				"quickjs-st",
				"quickjs-stream.c"
			],
			[
				"quickjs-stream.h",
				"quickjs-stream.h"
			],
			[
				"quickjs-ins",
				"quickjs-inspect.c"
			],
			[
				"ringbuffer.c",
				"src/ringbuffer.c"
			],
			[
				"ringbuf",
				"include/ringbuffer.h"
			],
			[
				"ringbuffer.h",
				"include/ringbuffer.h"
			],
			[
				"textcode.c",
				"quickjs-textcode.c"
			],
			[
				"quickjs-text",
				"quickjs-textcode.c"
			],
			[
				"stream.c",
				"quickjs-stream.c"
			],
			[
				"quickjs-stre",
				"quickjs-stream.c"
			],
			[
				"textcode",
				"quickjs-textcode.c"
			],
			[
				"quickjs-misc",
				"quickjs-misc.c"
			],
			[
				"function",
				"cmake/functions.cmake"
			],
			[
				"CMakeLIsts",
				"CMakeLists.txt"
			],
			[
				"quickjs-mis",
				"quickjs-misc.c"
			],
			[
				"fsProm",
				"lib/fsPromises.js"
			],
			[
				"CMake",
				"CMakeLists.txt"
			],
			[
				"cmakeli",
				"CMakeLists.txt"
			],
			[
				"cmakelists",
				"CMakeLists.txt"
			],
			[
				"CMakeLists",
				"CMakeLists.txt"
			],
			[
				"cmakelsits",
				"web-platform-tests-streams/editing/crashtests/make-editable-div-inline-and-set-contenteditable-of-input-to-false.html"
			],
			[
				"cmakeLists",
				"CMakeLists.txt"
			],
			[
				"js-util",
				"src/js-utils.c"
			],
			[
				"js-ut",
				"include/js-utils.h"
			],
			[
				"buffer-",
				"include/buffer-utils.h"
			],
			[
				"js-utils",
				"include/js-utils.h"
			],
			[
				"quickjs-sys",
				"quickjs-syscallerror.c"
			],
			[
				"js-u",
				"include/js-utils.h"
			],
			[
				"quickjs-socket",
				"quickjs-sockets.c"
			],
			[
				"async-cl",
				"src/async-closure.c"
			],
			[
				"utilsc",
				"src/utils.c"
			],
			[
				"quickjs-sock",
				"quickjs-sockets.h"
			],
			[
				"child",
				"src/child-process.c"
			],
			[
				"quickjs-child",
				"quickjs-child-process.c"
			],
			[
				"cmake",
				"CMakeLists.txt"
			],
			[
				"process.js",
				"lib/process.js"
			],
			[
				"quickjs-repea",
				"quickjs-repeater.c"
			],
			[
				"quickjs-repe",
				"quickjs-repeater.c"
			],
			[
				"quickjs-repeater",
				"quickjs-repeater.c"
			],
			[
				"test_repe",
				"tests/test_repeater.js"
			],
			[
				"quickjs-mysq",
				"quickjs-mysql.c"
			],
			[
				"quickjs-ser",
				"quickjs-serial.c"
			],
			[
				"quickjs-stream",
				"quickjs-stream.h"
			],
			[
				"quickjs-lex",
				"quickjs-lexer.c"
			],
			[
				"quickjs-list",
				"quickjs-list.c"
			],
			[
				"quickjs-list.c",
				"quickjs-list.c"
			],
			[
				"testhar",
				"lib/testharness.js"
			],
			[
				"qjsm",
				"src/qjsm.c"
			],
			[
				"test_repea",
				"tests/test_repeater.js"
			],
			[
				"test_socket",
				"tests/test_sockets.js"
			],
			[
				"test_sock",
				"tests/test_sockets.js"
			],
			[
				"textcod",
				"quickjs-textcode.c"
			],
			[
				"test_text",
				"tests/test_textcode.js"
			],
			[
				"stack.js",
				"lib/stack.js"
			],
			[
				"ebnf",
				"lib/parser/ebnf.js"
			],
			[
				"arser.",
				"lib/parser.js"
			],
			[
				"bnf.",
				"lib/lexer/bnf.js"
			],
			[
				"quickjs-my",
				"quickjs-mysql.c"
			],
			[
				"quickjs-blob",
				"quickjs-blob.c"
			],
			[
				"quickjs-bl",
				"quickjs-blob.c"
			],
			[
				"queue.c",
				"src/queue.c"
			],
			[
				"queue.h",
				"include/queue.h"
			],
			[
				"mysql",
				"tests/test_mysql.js"
			],
			[
				"child-",
				"src/child-process.c"
			],
			[
				"quickjs-chil",
				"quickjs-child-process.c"
			],
			[
				"xpath",
				"lib/xpath.js"
			],
			[
				"xpath.js",
				"lib/xpath.js"
			],
			[
				"pointer",
				"lib/pointer.js"
			],
			[
				"predicate.c",
				"src/predicate.c"
			],
			[
				"quickjs-pre",
				"quickjs-predicate.c"
			],
			[
				"dom.js",
				"lib/dom.js"
			],
			[
				"misc.js",
				"lib/misc.js"
			],
			[
				"char-ut",
				"include/char-utils.h"
			],
			[
				"quickjs-in",
				"quickjs-inspect.c"
			],
			[
				"css3",
				"lib/css3-selectors.js"
			],
			[
				"inspect.c",
				"quickjs-inspect.c"
			],
			[
				"quickjs-lexe",
				"quickjs-lexer.c"
			],
			[
				"test_lexer",
				"tests/test_lexer.js"
			],
			[
				"resolve-im",
				"resolve-imports.js"
			],
			[
				"pointer.js",
				"lib/pointer.js"
			],
			[
				"extendArra",
				"lib/extendArray.js"
			],
			[
				"list-ex",
				"list-exports.js"
			],
			[
				"xml-shell",
				"xml-shell.js"
			],
			[
				"cmake/",
				"cmake/QuickJSModule.cmake"
			],
			[
				"quickjs-arc",
				"quickjs-archive.c"
			],
			[
				"cmakelist",
				"CMakeLists.txt"
			],
			[
				"vfs",
				"lib/vfs.js"
			],
			[
				"quickjs-que",
				"quickjs-queue.c"
			],
			[
				"archive.h",
				"libarchive/libarchive/archive.h"
			],
			[
				"sz",
				"/tmp/sz.js"
			],
			[
				"archive_en",
				"libarchive/libarchive/archive_entry.h"
			],
			[
				"quickjs-ar",
				"quickjs-archive.c"
			],
			[
				"archive_write_open_fil",
				"libarchive/libarchive/archive_write_open_filename.c"
			],
			[
				"vfs.j",
				"lib/vfs.js"
			],
			[
				"cutils",
				"~/Projects/plot-cv/quickjs/cutils.c"
			],
			[
				"quickjs-pat",
				"quickjs-path.c"
			],
			[
				"extendArray",
				"lib/extendArray.js"
			],
			[
				"quickjs-path",
				"quickjs-path.c"
			],
			[
				"console",
				"lib/console.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/plot-cv.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 309.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"WS"
			]
		],
		"width": 1059.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 253.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
