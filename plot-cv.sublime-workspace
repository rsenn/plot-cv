{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"OPENCV_LIB",
				"OPENCV_LIBRARIES"
			],
			[
				"getOwn",
				"getOwnPropertyNames(...)"
			],
			[
				"relat",
				"relativeTo"
			],
			[
				"max",
				"maxLineGap"
			],
			[
				"Pm_Op",
				"Pm_OpenInput"
			],
			[
				"Pm_Get",
				"Pm_GetDeviceInfo"
			],
			[
				"getOwnProp",
				"getOwnPropertyDescriptors(...)"
			],
			[
				"getMem",
				"getMemberEntries"
			],
			[
				"break",
				"breakLength"
			],
			[
				"from",
				"fromCodePoint(...)"
			],
			[
				"Res",
				"ResizeHandler"
			],
			[
				"COLOR",
				"COLOR_BGR2Lab"
			],
			[
				"JS_SetP",
				"JS_SetPropertyFunctionList"
			],
			[
				"inspe",
				"inspectOptions"
			],
			[
				"Sin",
				"SingleLineComment"
			],
			[
				"use",
				"useAsyncIterator_1"
			],
			[
				"high",
				"highlight"
			],
			[
				"hig",
				"highlight"
			],
			[
				"useDe",
				"useDebouncedCallback"
			],
			[
				"preac",
				"preactComponent"
			],
			[
				"modul",
				"module_loader_func"
			],
			[
				"mod",
				"module_loader_func"
			],
			[
				"jsm_mo",
				"jsm_module_record"
			],
			[
				"jsm_mod",
				"jsm_module_record"
			],
			[
				"jsm_com",
				"jsm_compiled_modules"
			],
			[
				"QUICKJS_IN",
				"QUICKJS_INCLUDE_DIR"
			],
			[
				"QUICKJS_SOU",
				"QUICKJS_SOURCES_ROOT"
			],
			[
				"Po",
				"PortableFileSystem"
			],
			[
				"JS_EVAL",
				"JS_EVAL_TYPE_MODULE"
			],
			[
				"CPACK",
				"CPACK_PACKAGE_VERSION_MAJOR"
			],
			[
				"CPACK_PACK",
				"CPACK_PACKAGE_VERSION"
			],
			[
				"align_",
				"align_value_attr"
			],
			[
				"histo",
				"historySearch"
			],
			[
				"mouse",
				"mousetrackingDisable"
			],
			[
				"library",
				"libraryNames"
			],
			[
				"setMax",
				"setMaxListeners"
			],
			[
				"cons",
				"constructor"
			],
			[
				"Portable",
				"PortableFileSystem"
			],
			[
				"Get",
				"GetRange"
			],
			[
				"Minn",
				"MinnetHttpRequest"
			],
			[
				"Des",
				"DeserializeEntries"
			],
			[
				"define",
				"defineProperties(...)"
			],
			[
				"Deseria",
				"DeserializeEntries"
			],
			[
				"De",
				"DeserializeEntries"
			],
			[
				"Eve",
				"EventEmitter"
			],
			[
				"PATH_",
				"PATH_FNM_NOMATCH"
			],
			[
				"PATH_FNM_NO",
				"PATH_FNM_NOESCAPE"
			],
			[
				"asyn",
				"asyncIterator"
			],
			[
				"RPC",
				"RPCClientConnection"
			],
			[
				"Const",
				"Constants"
			],
			[
				"Impo",
				"ImportSpecifier"
			],
			[
				"Export",
				"ExportNamedDeclaration"
			],
			[
				"Imm",
				"ImmutableTranslation"
			],
			[
				"elem",
				"elementTransform"
			],
			[
				"minn",
				"minnet_ws_class_id"
			],
			[
				"JS_Get",
				"JS_GetOpaque"
			],
			[
				"getOw",
				"getOwnPropertySymbols(...)"
			],
			[
				"Minnet",
				"MinnetWebsocket"
			],
			[
				"Message",
				"MessageTransceiver"
			],
			[
				"corr",
				"CorrelateSchematicAndBoard"
			],
			[
				"Sys",
				"SyscallError"
			],
			[
				"getProp",
				"getPropertyDescriptors"
			],
			[
				"getO",
				"getOwnPropertyDescriptors(...)"
			],
			[
				"get",
				"getOwnPropertyDescriptors(...)"
			],
			[
				"toArra",
				"toArrayBuffer"
			],
			[
				"codePo",
				"codePointAt"
			],
			[
				"print",
				"print_status"
			],
			[
				"tty",
				"ttySetRaw"
			],
			[
				"variable",
				"variablesReference"
			],
			[
				"variables",
				"variablesReference"
			],
			[
				"JSIn",
				"JSInputArray"
			],
			[
				"keypoin",
				"keypoint_proto"
			],
			[
				"lws_call",
				"lws_callback_http_dummy"
			],
			[
				"utf",
				"utf8_first_code_mask"
			],
			[
				"length",
				"history_length"
			],
			[
				"Array",
				"ArrayBufferToString"
			],
			[
				"JSMo",
				"JSModuleLoaderFunc"
			],
			[
				"JS",
				"JSVideoWriterData"
			],
			[
				"D",
				"DebuggerProtocol"
			],
			[
				"Debu",
				"DebuggerProtocol"
			],
			[
				"descripto",
				"descriptor_channels"
			],
			[
				"descript",
				"descriptorExtractor"
			],
			[
				"pattern",
				"patternScale"
			],
			[
				"n",
				"nOctaves"
			],
			[
				"nO",
				"nOctaves"
			],
			[
				"quali",
				"quality_level"
			],
			[
				"JS_P",
				"JS_PROP_ENUMERABLE"
			],
			[
				"Feat",
				"Feature2D"
			],
			[
				"PROP_DESCRIPTOR_",
				"PROP_DESCRIPTOR_TYPE"
			],
			[
				"js_feat",
				"js_feature2d_data"
			],
			[
				"js_key",
				"js_keypoint_export"
			],
			[
				"x",
				"xfeatures2d"
			],
			[
				"JSInput",
				"JSInputOutputArray"
			],
			[
				"JS_NewArray",
				"JS_NewArrayBufferCopy"
			],
			[
				"Rota",
				"RotatedRect"
			],
			[
				"js_rotated",
				"js_rotated_rect_new"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"getOwnP",
				"getOwnPropertyNames"
			],
			[
				"PROP_Y",
				"PROP_YINTERCEPT"
			],
			[
				"PROP_X",
				"PROP_XINTERCEPT"
			],
			[
				"RE",
				"RETURN_PATH"
			],
			[
				"insp",
				"inspectSymbol"
			],
			[
				"contour",
				"contour_proto"
			],
			[
				"dst",
				"dst_pts"
			],
			[
				"CXX_",
				"CXX_STANDARD_VALUE"
			],
			[
				"process",
				"processor_or_index"
			],
			[
				"proces",
				"processor_or_index"
			],
			[
				"w",
				"width"
			],
			[
				"FUNC_TO",
				"FUNC_TOARRAY"
			],
			[
				"JSInpu",
				"JSInputOutputArray"
			],
			[
				"JS_Throw",
				"JS_ThrowInternalError"
			],
			[
				"typed",
				"typedarray_ctor"
			],
			[
				"JS_GetP",
				"JS_GetPropertyStr"
			],
			[
				"depe",
				"dependent_scope_decl_ref_expr"
			],
			[
				"com",
				"compound_stmt"
			],
			[
				"CXXConstruc",
				"CXXConstructorDecl"
			],
			[
				"refere",
				"referencedDecl"
			],
			[
				"Acc",
				"AccessSpecDecl"
			],
			[
				"value",
				"valueCategory"
			],
			[
				"ini",
				"initializers"
			],
			[
				"res",
				"RestElement"
			],
			[
				"arg",
				"argc"
			],
			[
				"instru",
				"instrument"
			],
			[
				"defaul",
				"defaultExport"
			],
			[
				"getBy",
				"getByIdOrName"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "Rule\nSymbol\n  constructor(str, id, rule)\n  clone()\n  toString()\n  toCowbird()\n  generate()\n  sym =>\n  toString()\n  n =>\n  combinations()\n  (a, part, i) =>\n  toCowbird(accu, combinations = true)\n  match =>\n  m =>\n  rule =>\nOperator\n  constructor(op, rule, ...args)\n  toString()\n  n =>\n  clone()\n  toCowbird(accu, name)\n  arg =>\n  str =>\n  constructor(grammar, fragment)\n  static from(array, grammar)\n  parse(productions)\n  toString(name, multiline)\n  l =>\n  toCowbird(accu, name)\n  part =>\n  match(parser)\n  static generate(a, f = 'choice', sep = ', ')\n  p =>\n  p =>\n  generate()\nRule\nSelf\n  constructor(rule)\n  clone()\n  toString()\n  toCowbird()\nMatch\n  constructor(rule, ...args)\n  pred = (p, i) =>\n  parse(symbols)\nLiteral\n  constructor(str, rule)\n  clone()\n  toString()\n  toCowbird(accu)\nGrammar\n  constructor(source, file)\n  addRule(name, productions, fragment)\n  getRule(name)\n  parseParentheses()\n  addMatches = () =>\n  parsePatterns(endTok = [';', '|'])\n  isCharMatch(m)\n  toRegExp(a, invert = false)\n  m =>\n  tok =>\n  parseRule(startTok = ':', endTok = ';', name)\n  addPatterns = () =>\n  resolveRules()\n  parseLine()\n  m =>\n  parse()\n  generate(dir = '../parse/')\n  p =>\n  p =>\n  m =>\n  toCowbird()",
			"settings":
			{
				"buffer_size": 1206,
				"line_ending": "Unix",
				"name": "𝌆 Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					91,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/xml/xpath.js",
						"symkeys":
						[
							[
								100,
								123
							],
							[
								156,
								179
							],
							[
								242,
								254
							],
							[
								491,
								515
							],
							[
								1312,
								1322
							],
							[
								1416,
								1451
							],
							[
								1577,
								1599
							],
							[
								2128,
								2144
							],
							[
								2462,
								2469
							],
							[
								2740,
								2758
							],
							[
								3369,
								3388
							],
							[
								3719,
								3728
							],
							[
								3813,
								3827
							],
							[
								4089,
								4150
							],
							[
								4509,
								4528
							],
							[
								5247,
								5262
							],
							[
								5376,
								5380
							],
							[
								5539,
								5543
							],
							[
								5692,
								5706
							],
							[
								5812,
								5844
							],
							[
								6010,
								6017
							],
							[
								6258,
								6274
							],
							[
								6301,
								6305
							],
							[
								6391,
								6405
							],
							[
								6432,
								6436
							],
							[
								6521,
								6556
							],
							[
								6768,
								6796
							],
							[
								7505,
								7516
							],
							[
								7953,
								7962
							],
							[
								7994,
								8080
							],
							[
								8502,
								8530
							],
							[
								8638,
								8646
							],
							[
								8762,
								8779
							],
							[
								8970,
								8998
							],
							[
								9472,
								9483
							],
							[
								9857,
								9881
							],
							[
								9996,
								10008
							],
							[
								10114,
								10118
							],
							[
								10191,
								10202
							],
							[
								10583,
								10595
							],
							[
								10658,
								10666
							],
							[
								10681,
								10691
							],
							[
								10706,
								10718
							],
							[
								11046,
								11119
							],
							[
								11502,
								11514
							],
							[
								11919,
								11925
							],
							[
								11955,
								11972
							],
							[
								12134,
								12140
							]
						],
						"symlist":
						[
							"incr = (o, p, i = 1) =>",
							"isSpecialAttr = attr =>",
							"MutableXPath",
							"static partMatcher(part)",
							"toString()",
							"static isMemberName(name, out = {})",
							"static from(path, obj)",
							"maxCount = () =>",
							"item =>",
							"(acc, sib, idx) =>",
							"([idx, tagName]) =>",
							"(x, p) =>",
							"ImmutableXPath",
							"static matchObj(tagName, attr_or_index, tagField = 'tagName')",
							"static strToPart(p)",
							"static parse(l)",
							"p =>",
							"p =>",
							"(acc, part) =>",
							"constructor(a, absolute = false)",
							"part =>",
							"get descendand()",
							"v =>",
							"get absolute()",
							"v =>",
							"slice(start = 0, end = this.length)",
							"c = (text, c = 33, b = 0) =>",
							"([k, v]) =>",
							"toArray()",
							"toString(sep = '/', childrenSym = this.constructor.CHILDREN_GLYPH, tfn = text => text)",
							"toCode(name = '', opts = {})",
							"y = i =>",
							"(acc, part, i) =>",
							" function partToStr(part)",
							"([k, v]) =>",
							"c : (text, ...colors) =>",
							"MutableXPath",
							"i =>",
							"(acc, p) =>",
							"MutableXPath",
							" text =>",
							"toRegExp()",
							"MutableXPath",
							"findXPath = (xpath, flat, { root, recursive = true, entries = false }) =>",
							"m = other =>",
							" () =>",
							"parseXPath = s =>",
							" () =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAPAgAAT2JqZWN0MkFycmF5ID0gKHhtbE9iaiwgZmxhdCkgPT4KKFtrLCB2XSkgPT4KICAoYWNjLCBbaywgdl0pID0+ClhNTEl0ZXJhdG9yCiAgY29uc3RydWN0b3IoLi4uYXJncykKICBzdGF0aWMgKml0ZXJhdGUobm9kZSwgZiA9IG51bGwsIHBhdGggPSBbXSwgcm9vdCkKWE1MQXR0cmlidXRlCiAgb2JqID0+CihhY2MsIG5hbWUsIGkpID0+CiAgc3RhdGljIGdldEJ5TmFtZShuYW1lLCBlbGVtZW50KQogIHN0YXRpYyBnZXRPckNyZWF0ZShuYW1lLCBlbGVtZW50LCB2YWx1ZSkKICAoKSA9PgogIGNvbnN0cnVjdG9yKG5hbWUsIGVsZW1lbnQsIHZhbHVlKQpYTUxPYmplY3QKICBjb25zdHJ1Y3Rvcih7IGF0dHJpYnV0ZXMsIGNoaWxkcmVuLCB0YWdOYW1lIH0pCihhY2MsIGtleSkgPT4KICBzdGF0aWMgdG9BcnJheSguLi5hcmdzKQogIGdldCBhdHRyaWJ1dGVzKCkKICBnZXRBdHRyaWJ1dGUobmFtZSkKICBzZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpCiAgdG9PYmplY3QoKQpYTUxPYmplY3QKICBrID0+ClhNTE9iamVjdApYTUxPYmplY3QAAAAAAAAAAOMDAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					92,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/xml/util.js",
						"symkeys":
						[
							[
								127,
								159
							],
							[
								229,
								240
							],
							[
								366,
								388
							],
							[
								536,
								547
							],
							[
								576,
								596
							],
							[
								666,
								714
							],
							[
								1032,
								1044
							],
							[
								1121,
								1127
							],
							[
								1282,
								1299
							],
							[
								1546,
								1577
							],
							[
								1636,
								1676
							],
							[
								1871,
								1877
							],
							[
								1946,
								1979
							],
							[
								2088,
								2097
							],
							[
								2120,
								2166
							],
							[
								2292,
								2305
							],
							[
								2460,
								2483
							],
							[
								2527,
								2543
							],
							[
								2601,
								2619
							],
							[
								2718,
								2743
							],
							[
								2859,
								2869
							],
							[
								3084,
								3093
							],
							[
								3154,
								3159
							],
							[
								3302,
								3311
							],
							[
								3385,
								3394
							]
						],
						"symlist":
						[
							"Object2Array = (xmlObj, flat) =>",
							"([k, v]) =>",
							" (acc, [k, v]) =>",
							"XMLIterator",
							"constructor(...args)",
							"static *iterate(node, f = null, path = [], root)",
							"XMLAttribute",
							"obj =>",
							"(acc, name, i) =>",
							"static getByName(name, element)",
							"static getOrCreate(name, element, value)",
							" () =>",
							"constructor(name, element, value)",
							"XMLObject",
							"constructor({ attributes, children, tagName })",
							"(acc, key) =>",
							"static toArray(...args)",
							"get attributes()",
							"getAttribute(name)",
							"setAttribute(name, value)",
							"toObject()",
							"XMLObject",
							" k =>",
							"XMLObject",
							"XMLObject"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADjAwAAICBpbmNyID0gKG8sIHAsIGkgPSAxKSA9PgogIGlzU3BlY2lhbEF0dHIgPSBhdHRyID0+Ck11dGFibGVYUGF0aAogIHN0YXRpYyBwYXJ0TWF0Y2hlcihwYXJ0KQogIHRvU3RyaW5nKCkKICBzdGF0aWMgaXNNZW1iZXJOYW1lKG5hbWUsIG91dCA9IHt9KQogIHN0YXRpYyBmcm9tKHBhdGgsIG9iaikKICBtYXhDb3VudCA9ICgpID0+CiAgaXRlbSA9PgooYWNjLCBzaWIsIGlkeCkgPT4KKFtpZHgsIHRhZ05hbWVdKSA9PgooeCwgcCkgPT4KSW1tdXRhYmxlWFBhdGgKICBzdGF0aWMgbWF0Y2hPYmoodGFnTmFtZSwgYXR0cl9vcl9pbmRleCwgdGFnRmllbGQgPSAndGFnTmFtZScpCiAgc3RhdGljIHN0clRvUGFydChwKQogIHN0YXRpYyBwYXJzZShsKQogIHAgPT4KICBwID0+CihhY2MsIHBhcnQpID0+CiAgY29uc3RydWN0b3IoYSwgYWJzb2x1dGUgPSBmYWxzZSkKICBwYXJ0ID0+CiAgZ2V0IGRlc2NlbmRhbmQoKQogIHYgPT4KICBnZXQgYWJzb2x1dGUoKQogIHYgPT4KICBzbGljZShzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKQogIGMgPSAodGV4dCwgYyA9IDMzLCBiID0gMCkgPT4KKFtrLCB2XSkgPT4KICB0b0FycmF5KCkKICB0b1N0cmluZyhzZXAgPSAnLycsIGNoaWxkcmVuU3ltID0gdGhpcy5jb25zdHJ1Y3Rvci5DSElMRFJFTl9HTFlQSCwgdGZuID0gdGV4dCA9PiB0ZXh0KQogIHRvQ29kZShuYW1lID0gJycsIG9wdHMgPSB7fSkKICB5ID0gaSA9PgooYWNjLCBwYXJ0LCBpKSA9PgogIHBhcnRUb1N0cihwYXJ0KQooW2ssIHZdKSA9PgogIGMgOiAodGV4dCwgLi4uY29sb3JzKSA9PgpNdXRhYmxlWFBhdGgKICBpID0+CihhY2MsIHApID0+Ck11dGFibGVYUGF0aAogIHRleHQgPT4KICB0b1JlZ0V4cCgpCk11dGFibGVYUGF0aAogIGZpbmRYUGF0aCA9ICh4cGF0aCwgZmxhdCwgeyByb290LCByZWN1cnNpdmUgPSB0cnVlLCBlbnRyaWVzID0gZmFsc2UgfSkgPT4KICBtID0gb3RoZXIgPT4KICAoKSA9PgogIHBhcnNlWFBhdGggPSBzID0+CiAgKCkgPT4AAAAAAAAAAA8CAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					93,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/xml/parse.js",
						"symkeys":
						[
							[
								791,
								816
							],
							[
								1090,
								1095
							],
							[
								1114,
								1119
							],
							[
								1174,
								1184
							],
							[
								1210,
								1220
							],
							[
								1247,
								1256
							],
							[
								1298,
								1316
							],
							[
								1430,
								1446
							],
							[
								1492,
								1506
							],
							[
								1581,
								1595
							],
							[
								2054,
								2058
							],
							[
								2263,
								2267
							],
							[
								3414,
								3441
							],
							[
								3708,
								3713
							],
							[
								3732,
								3737
							],
							[
								3819,
								3837
							],
							[
								3951,
								3967
							],
							[
								4077,
								4082
							],
							[
								4123,
								4128
							],
							[
								4174,
								4186
							],
							[
								4283,
								4299
							],
							[
								4348,
								4353
							],
							[
								4387,
								4401
							],
							[
								4614,
								4628
							],
							[
								4712,
								4716
							],
							[
								5109,
								5113
							],
							[
								5917,
								5921
							],
							[
								6254,
								6258
							],
							[
								7011,
								7020
							]
						],
						"symlist":
						[
							"parse = function parse(s)",
							" i =>",
							" i =>",
							" (i, j) =>",
							" (i, j) =>",
							"(a, c) =>",
							"start = tagName =>",
							"end = tagName =>",
							"skip = pred =>",
							"skipws = () =>",
							"c =>",
							"c =>",
							"parse2 = function parse2(g)",
							" i =>",
							" i =>",
							"start = tagName =>",
							"end = tagName =>",
							" c =>",
							" c =>",
							"next = () =>",
							"is = (ch, cl) =>",
							" s =>",
							"skip = pred =>",
							"skipws = () =>",
							"c =>",
							"c =>",
							"c =>",
							"c =>",
							"module =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAPAgAAT2JqZWN0MkFycmF5ID0gKHhtbE9iaiwgZmxhdCkgPT4KKFtrLCB2XSkgPT4KICAoYWNjLCBbaywgdl0pID0+ClhNTEl0ZXJhdG9yCiAgY29uc3RydWN0b3IoLi4uYXJncykKICBzdGF0aWMgKml0ZXJhdGUobm9kZSwgZiA9IG51bGwsIHBhdGggPSBbXSwgcm9vdCkKWE1MQXR0cmlidXRlCiAgb2JqID0+CihhY2MsIG5hbWUsIGkpID0+CiAgc3RhdGljIGdldEJ5TmFtZShuYW1lLCBlbGVtZW50KQogIHN0YXRpYyBnZXRPckNyZWF0ZShuYW1lLCBlbGVtZW50LCB2YWx1ZSkKICAoKSA9PgogIGNvbnN0cnVjdG9yKG5hbWUsIGVsZW1lbnQsIHZhbHVlKQpYTUxPYmplY3QKICBjb25zdHJ1Y3Rvcih7IGF0dHJpYnV0ZXMsIGNoaWxkcmVuLCB0YWdOYW1lIH0pCihhY2MsIGtleSkgPT4KICBzdGF0aWMgdG9BcnJheSguLi5hcmdzKQogIGdldCBhdHRyaWJ1dGVzKCkKICBnZXRBdHRyaWJ1dGUobmFtZSkKICBzZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpCiAgdG9PYmplY3QoKQpYTUxPYmplY3QKICBrID0+ClhNTE9iamVjdApYTUxPYmplY3QAAAAAAAAAAHgBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					94,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/xml/util.js",
						"symkeys":
						[
							[
								127,
								159
							],
							[
								229,
								240
							],
							[
								366,
								388
							],
							[
								536,
								547
							],
							[
								576,
								596
							],
							[
								666,
								714
							],
							[
								1032,
								1044
							],
							[
								1121,
								1127
							],
							[
								1282,
								1299
							],
							[
								1546,
								1577
							],
							[
								1636,
								1676
							],
							[
								1871,
								1877
							],
							[
								1946,
								1979
							],
							[
								2088,
								2097
							],
							[
								2120,
								2166
							],
							[
								2292,
								2305
							],
							[
								2460,
								2483
							],
							[
								2527,
								2543
							],
							[
								2601,
								2619
							],
							[
								2718,
								2743
							],
							[
								2859,
								2869
							],
							[
								3084,
								3093
							],
							[
								3154,
								3159
							],
							[
								3302,
								3311
							],
							[
								3385,
								3394
							]
						],
						"symlist":
						[
							"Object2Array = (xmlObj, flat) =>",
							"([k, v]) =>",
							" (acc, [k, v]) =>",
							"XMLIterator",
							"constructor(...args)",
							"static *iterate(node, f = null, path = [], root)",
							"XMLAttribute",
							"obj =>",
							"(acc, name, i) =>",
							"static getByName(name, element)",
							"static getOrCreate(name, element, value)",
							" () =>",
							"constructor(name, element, value)",
							"XMLObject",
							"constructor({ attributes, children, tagName })",
							"(acc, key) =>",
							"static toArray(...args)",
							"get attributes()",
							"getAttribute(name)",
							"setAttribute(name, value)",
							"toObject()",
							"XMLObject",
							" k =>",
							"XMLObject",
							"XMLObject"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB4AQAAICBwYXJzZSA9IGZ1bmN0aW9uIHBhcnNlKHMpCiAgaSA9PgogIGkgPT4KICAoaSwgaikgPT4KICAoaSwgaikgPT4KKGEsIGMpID0+CiAgc3RhcnQgPSB0YWdOYW1lID0+CiAgZW5kID0gdGFnTmFtZSA9PgogIHNraXAgPSBwcmVkID0+CiAgc2tpcHdzID0gKCkgPT4KICBjID0+CiAgYyA9PgogIHBhcnNlMiA9IGZ1bmN0aW9uIHBhcnNlMihnKQogIGkgPT4KICBpID0+CiAgc3RhcnQgPSB0YWdOYW1lID0+CiAgZW5kID0gdGFnTmFtZSA9PgogIGMgPT4KICBjID0+CiAgbmV4dCA9ICgpID0+CiAgaXMgPSAoY2gsIGNsKSA9PgogIHMgPT4KICBza2lwID0gcHJlZCA9PgogIHNraXB3cyA9ICgpID0+CiAgYyA9PgogIGMgPT4KICBjID0+CiAgYyA9PgogIG1vZHVsZSA9PgAAAAAAAAAADwIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					95,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/xml/parse.js",
						"symkeys":
						[
							[
								791,
								816
							],
							[
								1090,
								1095
							],
							[
								1114,
								1119
							],
							[
								1174,
								1184
							],
							[
								1210,
								1220
							],
							[
								1247,
								1256
							],
							[
								1298,
								1316
							],
							[
								1430,
								1446
							],
							[
								1492,
								1506
							],
							[
								1581,
								1595
							],
							[
								2054,
								2058
							],
							[
								2263,
								2267
							],
							[
								3414,
								3441
							],
							[
								3708,
								3713
							],
							[
								3732,
								3737
							],
							[
								3819,
								3837
							],
							[
								3951,
								3967
							],
							[
								4077,
								4082
							],
							[
								4123,
								4128
							],
							[
								4174,
								4186
							],
							[
								4283,
								4299
							],
							[
								4348,
								4353
							],
							[
								4387,
								4401
							],
							[
								4614,
								4628
							],
							[
								4712,
								4716
							],
							[
								5109,
								5113
							],
							[
								5917,
								5921
							],
							[
								6254,
								6258
							],
							[
								7011,
								7020
							]
						],
						"symlist":
						[
							"parse = function parse(s)",
							" i =>",
							" i =>",
							" (i, j) =>",
							" (i, j) =>",
							"(a, c) =>",
							"start = tagName =>",
							"end = tagName =>",
							"skip = pred =>",
							"skipws = () =>",
							"c =>",
							"c =>",
							"parse2 = function parse2(g)",
							" i =>",
							" i =>",
							"start = tagName =>",
							"end = tagName =>",
							" c =>",
							" c =>",
							"next = () =>",
							"is = (ch, cl) =>",
							" s =>",
							"skip = pred =>",
							"skipws = () =>",
							"c =>",
							"c =>",
							"c =>",
							"c =>",
							"module =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAPAgAAT2JqZWN0MkFycmF5ID0gKHhtbE9iaiwgZmxhdCkgPT4KKFtrLCB2XSkgPT4KICAoYWNjLCBbaywgdl0pID0+ClhNTEl0ZXJhdG9yCiAgY29uc3RydWN0b3IoLi4uYXJncykKICBzdGF0aWMgKml0ZXJhdGUobm9kZSwgZiA9IG51bGwsIHBhdGggPSBbXSwgcm9vdCkKWE1MQXR0cmlidXRlCiAgb2JqID0+CihhY2MsIG5hbWUsIGkpID0+CiAgc3RhdGljIGdldEJ5TmFtZShuYW1lLCBlbGVtZW50KQogIHN0YXRpYyBnZXRPckNyZWF0ZShuYW1lLCBlbGVtZW50LCB2YWx1ZSkKICAoKSA9PgogIGNvbnN0cnVjdG9yKG5hbWUsIGVsZW1lbnQsIHZhbHVlKQpYTUxPYmplY3QKICBjb25zdHJ1Y3Rvcih7IGF0dHJpYnV0ZXMsIGNoaWxkcmVuLCB0YWdOYW1lIH0pCihhY2MsIGtleSkgPT4KICBzdGF0aWMgdG9BcnJheSguLi5hcmdzKQogIGdldCBhdHRyaWJ1dGVzKCkKICBnZXRBdHRyaWJ1dGUobmFtZSkKICBzZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpCiAgdG9PYmplY3QoKQpYTUxPYmplY3QKICBrID0+ClhNTE9iamVjdApYTUxPYmplY3QAAAAAAAAAAHgBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					96,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/xml/util.js",
						"symkeys":
						[
							[
								127,
								159
							],
							[
								229,
								240
							],
							[
								366,
								388
							],
							[
								536,
								547
							],
							[
								576,
								596
							],
							[
								666,
								714
							],
							[
								1032,
								1044
							],
							[
								1121,
								1127
							],
							[
								1282,
								1299
							],
							[
								1546,
								1577
							],
							[
								1636,
								1676
							],
							[
								1871,
								1877
							],
							[
								1946,
								1979
							],
							[
								2088,
								2097
							],
							[
								2120,
								2166
							],
							[
								2292,
								2305
							],
							[
								2460,
								2483
							],
							[
								2527,
								2543
							],
							[
								2601,
								2619
							],
							[
								2718,
								2743
							],
							[
								2859,
								2869
							],
							[
								3084,
								3093
							],
							[
								3154,
								3159
							],
							[
								3302,
								3311
							],
							[
								3385,
								3394
							]
						],
						"symlist":
						[
							"Object2Array = (xmlObj, flat) =>",
							"([k, v]) =>",
							" (acc, [k, v]) =>",
							"XMLIterator",
							"constructor(...args)",
							"static *iterate(node, f = null, path = [], root)",
							"XMLAttribute",
							"obj =>",
							"(acc, name, i) =>",
							"static getByName(name, element)",
							"static getOrCreate(name, element, value)",
							" () =>",
							"constructor(name, element, value)",
							"XMLObject",
							"constructor({ attributes, children, tagName })",
							"(acc, key) =>",
							"static toArray(...args)",
							"get attributes()",
							"getAttribute(name)",
							"setAttribute(name, value)",
							"toObject()",
							"XMLObject",
							" k =>",
							"XMLObject",
							"XMLObject"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB4AQAAICBwYXJzZSA9IGZ1bmN0aW9uIHBhcnNlKHMpCiAgaSA9PgogIGkgPT4KICAoaSwgaikgPT4KICAoaSwgaikgPT4KKGEsIGMpID0+CiAgc3RhcnQgPSB0YWdOYW1lID0+CiAgZW5kID0gdGFnTmFtZSA9PgogIHNraXAgPSBwcmVkID0+CiAgc2tpcHdzID0gKCkgPT4KICBjID0+CiAgYyA9PgogIHBhcnNlMiA9IGZ1bmN0aW9uIHBhcnNlMihnKQogIGkgPT4KICBpID0+CiAgc3RhcnQgPSB0YWdOYW1lID0+CiAgZW5kID0gdGFnTmFtZSA9PgogIGMgPT4KICBjID0+CiAgbmV4dCA9ICgpID0+CiAgaXMgPSAoY2gsIGNsKSA9PgogIHMgPT4KICBza2lwID0gcHJlZCA9PgogIHNraXB3cyA9ICgpID0+CiAgYyA9PgogIGMgPT4KICBjID0+CiAgYyA9PgogIG1vZHVsZSA9PgAAAAAAAAAADwIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					97,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/xml/xpath.js",
						"symkeys":
						[
							[
								100,
								123
							],
							[
								156,
								179
							],
							[
								242,
								254
							],
							[
								491,
								515
							],
							[
								1312,
								1322
							],
							[
								1416,
								1451
							],
							[
								1577,
								1599
							],
							[
								2128,
								2144
							],
							[
								2462,
								2469
							],
							[
								2740,
								2758
							],
							[
								3369,
								3388
							],
							[
								3719,
								3728
							],
							[
								3813,
								3827
							],
							[
								4089,
								4150
							],
							[
								4509,
								4528
							],
							[
								5247,
								5262
							],
							[
								5376,
								5380
							],
							[
								5539,
								5543
							],
							[
								5692,
								5706
							],
							[
								5812,
								5844
							],
							[
								6010,
								6017
							],
							[
								6258,
								6274
							],
							[
								6301,
								6305
							],
							[
								6391,
								6405
							],
							[
								6432,
								6436
							],
							[
								6521,
								6556
							],
							[
								6768,
								6796
							],
							[
								7505,
								7516
							],
							[
								7953,
								7962
							],
							[
								7994,
								8080
							],
							[
								8502,
								8530
							],
							[
								8638,
								8646
							],
							[
								8762,
								8779
							],
							[
								8970,
								8998
							],
							[
								9472,
								9483
							],
							[
								9857,
								9881
							],
							[
								9996,
								10008
							],
							[
								10114,
								10118
							],
							[
								10191,
								10202
							],
							[
								10583,
								10595
							],
							[
								10658,
								10666
							],
							[
								10681,
								10691
							],
							[
								10706,
								10718
							],
							[
								11046,
								11119
							],
							[
								11502,
								11514
							],
							[
								11919,
								11925
							],
							[
								11955,
								11972
							],
							[
								12134,
								12140
							]
						],
						"symlist":
						[
							"incr = (o, p, i = 1) =>",
							"isSpecialAttr = attr =>",
							"MutableXPath",
							"static partMatcher(part)",
							"toString()",
							"static isMemberName(name, out = {})",
							"static from(path, obj)",
							"maxCount = () =>",
							"item =>",
							"(acc, sib, idx) =>",
							"([idx, tagName]) =>",
							"(x, p) =>",
							"ImmutableXPath",
							"static matchObj(tagName, attr_or_index, tagField = 'tagName')",
							"static strToPart(p)",
							"static parse(l)",
							"p =>",
							"p =>",
							"(acc, part) =>",
							"constructor(a, absolute = false)",
							"part =>",
							"get descendand()",
							"v =>",
							"get absolute()",
							"v =>",
							"slice(start = 0, end = this.length)",
							"c = (text, c = 33, b = 0) =>",
							"([k, v]) =>",
							"toArray()",
							"toString(sep = '/', childrenSym = this.constructor.CHILDREN_GLYPH, tfn = text => text)",
							"toCode(name = '', opts = {})",
							"y = i =>",
							"(acc, part, i) =>",
							" function partToStr(part)",
							"([k, v]) =>",
							"c : (text, ...colors) =>",
							"MutableXPath",
							"i =>",
							"(acc, p) =>",
							"MutableXPath",
							" text =>",
							"toRegExp()",
							"MutableXPath",
							"findXPath = (xpath, flat, { root, recursive = true, entries = false }) =>",
							"m = other =>",
							" () =>",
							"parseXPath = s =>",
							" () =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAPAgAAT2JqZWN0MkFycmF5ID0gKHhtbE9iaiwgZmxhdCkgPT4KKFtrLCB2XSkgPT4KICAoYWNjLCBbaywgdl0pID0+ClhNTEl0ZXJhdG9yCiAgY29uc3RydWN0b3IoLi4uYXJncykKICBzdGF0aWMgKml0ZXJhdGUobm9kZSwgZiA9IG51bGwsIHBhdGggPSBbXSwgcm9vdCkKWE1MQXR0cmlidXRlCiAgb2JqID0+CihhY2MsIG5hbWUsIGkpID0+CiAgc3RhdGljIGdldEJ5TmFtZShuYW1lLCBlbGVtZW50KQogIHN0YXRpYyBnZXRPckNyZWF0ZShuYW1lLCBlbGVtZW50LCB2YWx1ZSkKICAoKSA9PgogIGNvbnN0cnVjdG9yKG5hbWUsIGVsZW1lbnQsIHZhbHVlKQpYTUxPYmplY3QKICBjb25zdHJ1Y3Rvcih7IGF0dHJpYnV0ZXMsIGNoaWxkcmVuLCB0YWdOYW1lIH0pCihhY2MsIGtleSkgPT4KICBzdGF0aWMgdG9BcnJheSguLi5hcmdzKQogIGdldCBhdHRyaWJ1dGVzKCkKICBnZXRBdHRyaWJ1dGUobmFtZSkKICBzZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpCiAgdG9PYmplY3QoKQpYTUxPYmplY3QKICBrID0+ClhNTE9iamVjdApYTUxPYmplY3QAAAAAAAAAAOMDAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					98,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/xml/parse.js",
						"symkeys":
						[
							[
								791,
								816
							],
							[
								1090,
								1095
							],
							[
								1114,
								1119
							],
							[
								1174,
								1184
							],
							[
								1210,
								1220
							],
							[
								1247,
								1256
							],
							[
								1298,
								1316
							],
							[
								1430,
								1446
							],
							[
								1492,
								1506
							],
							[
								1581,
								1595
							],
							[
								2054,
								2058
							],
							[
								2263,
								2267
							],
							[
								3414,
								3441
							],
							[
								3708,
								3713
							],
							[
								3732,
								3737
							],
							[
								3819,
								3837
							],
							[
								3951,
								3967
							],
							[
								4077,
								4082
							],
							[
								4123,
								4128
							],
							[
								4174,
								4186
							],
							[
								4283,
								4299
							],
							[
								4348,
								4353
							],
							[
								4387,
								4401
							],
							[
								4614,
								4628
							],
							[
								4712,
								4716
							],
							[
								5109,
								5113
							],
							[
								5917,
								5921
							],
							[
								6254,
								6258
							],
							[
								7011,
								7020
							]
						],
						"symlist":
						[
							"parse = function parse(s)",
							" i =>",
							" i =>",
							" (i, j) =>",
							" (i, j) =>",
							"(a, c) =>",
							"start = tagName =>",
							"end = tagName =>",
							"skip = pred =>",
							"skipws = () =>",
							"c =>",
							"c =>",
							"parse2 = function parse2(g)",
							" i =>",
							" i =>",
							"start = tagName =>",
							"end = tagName =>",
							" c =>",
							" c =>",
							"next = () =>",
							"is = (ch, cl) =>",
							" s =>",
							"skip = pred =>",
							"skipws = () =>",
							"c =>",
							"c =>",
							"c =>",
							"c =>",
							"module =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADjAwAAICBpbmNyID0gKG8sIHAsIGkgPSAxKSA9PgogIGlzU3BlY2lhbEF0dHIgPSBhdHRyID0+Ck11dGFibGVYUGF0aAogIHN0YXRpYyBwYXJ0TWF0Y2hlcihwYXJ0KQogIHRvU3RyaW5nKCkKICBzdGF0aWMgaXNNZW1iZXJOYW1lKG5hbWUsIG91dCA9IHt9KQogIHN0YXRpYyBmcm9tKHBhdGgsIG9iaikKICBtYXhDb3VudCA9ICgpID0+CiAgaXRlbSA9PgooYWNjLCBzaWIsIGlkeCkgPT4KKFtpZHgsIHRhZ05hbWVdKSA9PgooeCwgcCkgPT4KSW1tdXRhYmxlWFBhdGgKICBzdGF0aWMgbWF0Y2hPYmoodGFnTmFtZSwgYXR0cl9vcl9pbmRleCwgdGFnRmllbGQgPSAndGFnTmFtZScpCiAgc3RhdGljIHN0clRvUGFydChwKQogIHN0YXRpYyBwYXJzZShsKQogIHAgPT4KICBwID0+CihhY2MsIHBhcnQpID0+CiAgY29uc3RydWN0b3IoYSwgYWJzb2x1dGUgPSBmYWxzZSkKICBwYXJ0ID0+CiAgZ2V0IGRlc2NlbmRhbmQoKQogIHYgPT4KICBnZXQgYWJzb2x1dGUoKQogIHYgPT4KICBzbGljZShzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKQogIGMgPSAodGV4dCwgYyA9IDMzLCBiID0gMCkgPT4KKFtrLCB2XSkgPT4KICB0b0FycmF5KCkKICB0b1N0cmluZyhzZXAgPSAnLycsIGNoaWxkcmVuU3ltID0gdGhpcy5jb25zdHJ1Y3Rvci5DSElMRFJFTl9HTFlQSCwgdGZuID0gdGV4dCA9PiB0ZXh0KQogIHRvQ29kZShuYW1lID0gJycsIG9wdHMgPSB7fSkKICB5ID0gaSA9PgooYWNjLCBwYXJ0LCBpKSA9PgogIHBhcnRUb1N0cihwYXJ0KQooW2ssIHZdKSA9PgogIGMgOiAodGV4dCwgLi4uY29sb3JzKSA9PgpNdXRhYmxlWFBhdGgKICBpID0+CihhY2MsIHApID0+Ck11dGFibGVYUGF0aAogIHRleHQgPT4KICB0b1JlZ0V4cCgpCk11dGFibGVYUGF0aAogIGZpbmRYUGF0aCA9ICh4cGF0aCwgZmxhdCwgeyByb290LCByZWN1cnNpdmUgPSB0cnVlLCBlbnRyaWVzID0gZmFsc2UgfSkgPT4KICBtID0gb3RoZXIgPT4KICAoKSA9PgogIHBhcnNlWFBhdGggPSBzID0+CiAgKCkgPT4AAAAAAAAAAHgBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					99,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/xml/util.js",
						"symkeys":
						[
							[
								127,
								159
							],
							[
								229,
								240
							],
							[
								366,
								388
							],
							[
								536,
								547
							],
							[
								576,
								596
							],
							[
								666,
								714
							],
							[
								1032,
								1044
							],
							[
								1121,
								1127
							],
							[
								1282,
								1299
							],
							[
								1546,
								1577
							],
							[
								1636,
								1676
							],
							[
								1871,
								1877
							],
							[
								1946,
								1979
							],
							[
								2088,
								2097
							],
							[
								2120,
								2166
							],
							[
								2292,
								2305
							],
							[
								2460,
								2483
							],
							[
								2527,
								2543
							],
							[
								2601,
								2619
							],
							[
								2718,
								2743
							],
							[
								2859,
								2869
							],
							[
								3084,
								3093
							],
							[
								3154,
								3159
							],
							[
								3302,
								3311
							],
							[
								3385,
								3394
							]
						],
						"symlist":
						[
							"Object2Array = (xmlObj, flat) =>",
							"([k, v]) =>",
							" (acc, [k, v]) =>",
							"XMLIterator",
							"constructor(...args)",
							"static *iterate(node, f = null, path = [], root)",
							"XMLAttribute",
							"obj =>",
							"(acc, name, i) =>",
							"static getByName(name, element)",
							"static getOrCreate(name, element, value)",
							" () =>",
							"constructor(name, element, value)",
							"XMLObject",
							"constructor({ attributes, children, tagName })",
							"(acc, key) =>",
							"static toArray(...args)",
							"get attributes()",
							"getAttribute(name)",
							"setAttribute(name, value)",
							"toObject()",
							"XMLObject",
							" k =>",
							"XMLObject",
							"XMLObject"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB4AQAAICBwYXJzZSA9IGZ1bmN0aW9uIHBhcnNlKHMpCiAgaSA9PgogIGkgPT4KICAoaSwgaikgPT4KICAoaSwgaikgPT4KKGEsIGMpID0+CiAgc3RhcnQgPSB0YWdOYW1lID0+CiAgZW5kID0gdGFnTmFtZSA9PgogIHNraXAgPSBwcmVkID0+CiAgc2tpcHdzID0gKCkgPT4KICBjID0+CiAgYyA9PgogIHBhcnNlMiA9IGZ1bmN0aW9uIHBhcnNlMihnKQogIGkgPT4KICBpID0+CiAgc3RhcnQgPSB0YWdOYW1lID0+CiAgZW5kID0gdGFnTmFtZSA9PgogIGMgPT4KICBjID0+CiAgbmV4dCA9ICgpID0+CiAgaXMgPSAoY2gsIGNsKSA9PgogIHMgPT4KICBza2lwID0gcHJlZCA9PgogIHNraXB3cyA9ICgpID0+CiAgYyA9PgogIGMgPT4KICBjID0+CiAgYyA9PgogIG1vZHVsZSA9PgAAAAAAAAAADwIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					100,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/xml/xpath.js",
						"symkeys":
						[
							[
								100,
								123
							],
							[
								156,
								179
							],
							[
								242,
								254
							],
							[
								491,
								515
							],
							[
								1312,
								1322
							],
							[
								1416,
								1451
							],
							[
								1577,
								1599
							],
							[
								2128,
								2144
							],
							[
								2462,
								2469
							],
							[
								2740,
								2758
							],
							[
								3369,
								3388
							],
							[
								3719,
								3728
							],
							[
								3813,
								3827
							],
							[
								4089,
								4150
							],
							[
								4509,
								4528
							],
							[
								5247,
								5262
							],
							[
								5376,
								5380
							],
							[
								5539,
								5543
							],
							[
								5692,
								5706
							],
							[
								5812,
								5844
							],
							[
								6010,
								6017
							],
							[
								6258,
								6274
							],
							[
								6301,
								6305
							],
							[
								6391,
								6405
							],
							[
								6432,
								6436
							],
							[
								6521,
								6556
							],
							[
								6768,
								6796
							],
							[
								7505,
								7516
							],
							[
								7953,
								7962
							],
							[
								7994,
								8080
							],
							[
								8502,
								8530
							],
							[
								8638,
								8646
							],
							[
								8762,
								8779
							],
							[
								8970,
								8998
							],
							[
								9472,
								9483
							],
							[
								9857,
								9881
							],
							[
								9996,
								10008
							],
							[
								10114,
								10118
							],
							[
								10191,
								10202
							],
							[
								10583,
								10595
							],
							[
								10658,
								10666
							],
							[
								10681,
								10691
							],
							[
								10706,
								10718
							],
							[
								11046,
								11119
							],
							[
								11502,
								11514
							],
							[
								11919,
								11925
							],
							[
								11955,
								11972
							],
							[
								12134,
								12140
							]
						],
						"symlist":
						[
							"incr = (o, p, i = 1) =>",
							"isSpecialAttr = attr =>",
							"MutableXPath",
							"static partMatcher(part)",
							"toString()",
							"static isMemberName(name, out = {})",
							"static from(path, obj)",
							"maxCount = () =>",
							"item =>",
							"(acc, sib, idx) =>",
							"([idx, tagName]) =>",
							"(x, p) =>",
							"ImmutableXPath",
							"static matchObj(tagName, attr_or_index, tagField = 'tagName')",
							"static strToPart(p)",
							"static parse(l)",
							"p =>",
							"p =>",
							"(acc, part) =>",
							"constructor(a, absolute = false)",
							"part =>",
							"get descendand()",
							"v =>",
							"get absolute()",
							"v =>",
							"slice(start = 0, end = this.length)",
							"c = (text, c = 33, b = 0) =>",
							"([k, v]) =>",
							"toArray()",
							"toString(sep = '/', childrenSym = this.constructor.CHILDREN_GLYPH, tfn = text => text)",
							"toCode(name = '', opts = {})",
							"y = i =>",
							"(acc, part, i) =>",
							" function partToStr(part)",
							"([k, v]) =>",
							"c : (text, ...colors) =>",
							"MutableXPath",
							"i =>",
							"(acc, p) =>",
							"MutableXPath",
							" text =>",
							"toRegExp()",
							"MutableXPath",
							"findXPath = (xpath, flat, { root, recursive = true, entries = false }) =>",
							"m = other =>",
							" () =>",
							"parseXPath = s =>",
							" () =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAPAgAAT2JqZWN0MkFycmF5ID0gKHhtbE9iaiwgZmxhdCkgPT4KKFtrLCB2XSkgPT4KICAoYWNjLCBbaywgdl0pID0+ClhNTEl0ZXJhdG9yCiAgY29uc3RydWN0b3IoLi4uYXJncykKICBzdGF0aWMgKml0ZXJhdGUobm9kZSwgZiA9IG51bGwsIHBhdGggPSBbXSwgcm9vdCkKWE1MQXR0cmlidXRlCiAgb2JqID0+CihhY2MsIG5hbWUsIGkpID0+CiAgc3RhdGljIGdldEJ5TmFtZShuYW1lLCBlbGVtZW50KQogIHN0YXRpYyBnZXRPckNyZWF0ZShuYW1lLCBlbGVtZW50LCB2YWx1ZSkKICAoKSA9PgogIGNvbnN0cnVjdG9yKG5hbWUsIGVsZW1lbnQsIHZhbHVlKQpYTUxPYmplY3QKICBjb25zdHJ1Y3Rvcih7IGF0dHJpYnV0ZXMsIGNoaWxkcmVuLCB0YWdOYW1lIH0pCihhY2MsIGtleSkgPT4KICBzdGF0aWMgdG9BcnJheSguLi5hcmdzKQogIGdldCBhdHRyaWJ1dGVzKCkKICBnZXRBdHRyaWJ1dGUobmFtZSkKICBzZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpCiAgdG9PYmplY3QoKQpYTUxPYmplY3QKICBrID0+ClhNTE9iamVjdApYTUxPYmplY3QAAAAAAAAAAOMDAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					101,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/xml/util.js",
						"symkeys":
						[
							[
								127,
								159
							],
							[
								229,
								240
							],
							[
								366,
								388
							],
							[
								536,
								547
							],
							[
								576,
								596
							],
							[
								666,
								714
							],
							[
								1032,
								1044
							],
							[
								1121,
								1127
							],
							[
								1282,
								1299
							],
							[
								1546,
								1577
							],
							[
								1636,
								1676
							],
							[
								1871,
								1877
							],
							[
								1946,
								1979
							],
							[
								2088,
								2097
							],
							[
								2120,
								2166
							],
							[
								2292,
								2305
							],
							[
								2460,
								2483
							],
							[
								2527,
								2543
							],
							[
								2601,
								2619
							],
							[
								2718,
								2743
							],
							[
								2859,
								2869
							],
							[
								3084,
								3093
							],
							[
								3154,
								3159
							],
							[
								3302,
								3311
							],
							[
								3385,
								3394
							]
						],
						"symlist":
						[
							"Object2Array = (xmlObj, flat) =>",
							"([k, v]) =>",
							" (acc, [k, v]) =>",
							"XMLIterator",
							"constructor(...args)",
							"static *iterate(node, f = null, path = [], root)",
							"XMLAttribute",
							"obj =>",
							"(acc, name, i) =>",
							"static getByName(name, element)",
							"static getOrCreate(name, element, value)",
							" () =>",
							"constructor(name, element, value)",
							"XMLObject",
							"constructor({ attributes, children, tagName })",
							"(acc, key) =>",
							"static toArray(...args)",
							"get attributes()",
							"getAttribute(name)",
							"setAttribute(name, value)",
							"toObject()",
							"XMLObject",
							" k =>",
							"XMLObject",
							"XMLObject"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADjAwAAICBpbmNyID0gKG8sIHAsIGkgPSAxKSA9PgogIGlzU3BlY2lhbEF0dHIgPSBhdHRyID0+Ck11dGFibGVYUGF0aAogIHN0YXRpYyBwYXJ0TWF0Y2hlcihwYXJ0KQogIHRvU3RyaW5nKCkKICBzdGF0aWMgaXNNZW1iZXJOYW1lKG5hbWUsIG91dCA9IHt9KQogIHN0YXRpYyBmcm9tKHBhdGgsIG9iaikKICBtYXhDb3VudCA9ICgpID0+CiAgaXRlbSA9PgooYWNjLCBzaWIsIGlkeCkgPT4KKFtpZHgsIHRhZ05hbWVdKSA9PgooeCwgcCkgPT4KSW1tdXRhYmxlWFBhdGgKICBzdGF0aWMgbWF0Y2hPYmoodGFnTmFtZSwgYXR0cl9vcl9pbmRleCwgdGFnRmllbGQgPSAndGFnTmFtZScpCiAgc3RhdGljIHN0clRvUGFydChwKQogIHN0YXRpYyBwYXJzZShsKQogIHAgPT4KICBwID0+CihhY2MsIHBhcnQpID0+CiAgY29uc3RydWN0b3IoYSwgYWJzb2x1dGUgPSBmYWxzZSkKICBwYXJ0ID0+CiAgZ2V0IGRlc2NlbmRhbmQoKQogIHYgPT4KICBnZXQgYWJzb2x1dGUoKQogIHYgPT4KICBzbGljZShzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKQogIGMgPSAodGV4dCwgYyA9IDMzLCBiID0gMCkgPT4KKFtrLCB2XSkgPT4KICB0b0FycmF5KCkKICB0b1N0cmluZyhzZXAgPSAnLycsIGNoaWxkcmVuU3ltID0gdGhpcy5jb25zdHJ1Y3Rvci5DSElMRFJFTl9HTFlQSCwgdGZuID0gdGV4dCA9PiB0ZXh0KQogIHRvQ29kZShuYW1lID0gJycsIG9wdHMgPSB7fSkKICB5ID0gaSA9PgooYWNjLCBwYXJ0LCBpKSA9PgogIHBhcnRUb1N0cihwYXJ0KQooW2ssIHZdKSA9PgogIGMgOiAodGV4dCwgLi4uY29sb3JzKSA9PgpNdXRhYmxlWFBhdGgKICBpID0+CihhY2MsIHApID0+Ck11dGFibGVYUGF0aAogIHRleHQgPT4KICB0b1JlZ0V4cCgpCk11dGFibGVYUGF0aAogIGZpbmRYUGF0aCA9ICh4cGF0aCwgZmxhdCwgeyByb290LCByZWN1cnNpdmUgPSB0cnVlLCBlbnRyaWVzID0gZmFsc2UgfSkgPT4KICBtID0gb3RoZXIgPT4KICAoKSA9PgogIHBhcnNlWFBhdGggPSBzID0+CiAgKCkgPT4AAAAAAAAAAA8CAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					102,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/xml/parse.js",
						"symkeys":
						[
							[
								791,
								816
							],
							[
								1090,
								1095
							],
							[
								1114,
								1119
							],
							[
								1174,
								1184
							],
							[
								1210,
								1220
							],
							[
								1247,
								1256
							],
							[
								1298,
								1316
							],
							[
								1430,
								1446
							],
							[
								1492,
								1506
							],
							[
								1581,
								1595
							],
							[
								2054,
								2058
							],
							[
								2263,
								2267
							],
							[
								3414,
								3441
							],
							[
								3708,
								3713
							],
							[
								3732,
								3737
							],
							[
								3819,
								3837
							],
							[
								3951,
								3967
							],
							[
								4077,
								4082
							],
							[
								4123,
								4128
							],
							[
								4174,
								4186
							],
							[
								4283,
								4299
							],
							[
								4348,
								4353
							],
							[
								4387,
								4401
							],
							[
								4614,
								4628
							],
							[
								4712,
								4716
							],
							[
								5109,
								5113
							],
							[
								5917,
								5921
							],
							[
								6254,
								6258
							],
							[
								7011,
								7020
							]
						],
						"symlist":
						[
							"parse = function parse(s)",
							" i =>",
							" i =>",
							" (i, j) =>",
							" (i, j) =>",
							"(a, c) =>",
							"start = tagName =>",
							"end = tagName =>",
							"skip = pred =>",
							"skipws = () =>",
							"c =>",
							"c =>",
							"parse2 = function parse2(g)",
							" i =>",
							" i =>",
							"start = tagName =>",
							"end = tagName =>",
							" c =>",
							" c =>",
							"next = () =>",
							"is = (ch, cl) =>",
							" s =>",
							"skip = pred =>",
							"skipws = () =>",
							"c =>",
							"c =>",
							"c =>",
							"c =>",
							"module =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAPAgAAT2JqZWN0MkFycmF5ID0gKHhtbE9iaiwgZmxhdCkgPT4KKFtrLCB2XSkgPT4KICAoYWNjLCBbaywgdl0pID0+ClhNTEl0ZXJhdG9yCiAgY29uc3RydWN0b3IoLi4uYXJncykKICBzdGF0aWMgKml0ZXJhdGUobm9kZSwgZiA9IG51bGwsIHBhdGggPSBbXSwgcm9vdCkKWE1MQXR0cmlidXRlCiAgb2JqID0+CihhY2MsIG5hbWUsIGkpID0+CiAgc3RhdGljIGdldEJ5TmFtZShuYW1lLCBlbGVtZW50KQogIHN0YXRpYyBnZXRPckNyZWF0ZShuYW1lLCBlbGVtZW50LCB2YWx1ZSkKICAoKSA9PgogIGNvbnN0cnVjdG9yKG5hbWUsIGVsZW1lbnQsIHZhbHVlKQpYTUxPYmplY3QKICBjb25zdHJ1Y3Rvcih7IGF0dHJpYnV0ZXMsIGNoaWxkcmVuLCB0YWdOYW1lIH0pCihhY2MsIGtleSkgPT4KICBzdGF0aWMgdG9BcnJheSguLi5hcmdzKQogIGdldCBhdHRyaWJ1dGVzKCkKICBnZXRBdHRyaWJ1dGUobmFtZSkKICBzZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpCiAgdG9PYmplY3QoKQpYTUxPYmplY3QKICBrID0+ClhNTE9iamVjdApYTUxPYmplY3QAAAAAAAAAAHgBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					1,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/grammars/xpath.g4",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB4AQAAICBwYXJzZSA9IGZ1bmN0aW9uIHBhcnNlKHMpCiAgaSA9PgogIGkgPT4KICAoaSwgaikgPT4KICAoaSwgaikgPT4KKGEsIGMpID0+CiAgc3RhcnQgPSB0YWdOYW1lID0+CiAgZW5kID0gdGFnTmFtZSA9PgogIHNraXAgPSBwcmVkID0+CiAgc2tpcHdzID0gKCkgPT4KICBjID0+CiAgYyA9PgogIHBhcnNlMiA9IGZ1bmN0aW9uIHBhcnNlMihnKQogIGkgPT4KICBpID0+CiAgc3RhcnQgPSB0YWdOYW1lID0+CiAgZW5kID0gdGFnTmFtZSA9PgogIGMgPT4KICBjID0+CiAgbmV4dCA9ICgpID0+CiAgaXMgPSAoY2gsIGNsKSA9PgogIHMgPT4KICBza2lwID0gcHJlZCA9PgogIHNraXB3cyA9ICgpID0+CiAgYyA9PgogIGMgPT4KICBjID0+CiAgYyA9PgogIG1vZHVsZSA9PgAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/test-parse.js",
						"symkeys":
						[
							[
								508,
								538
							],
							[
								740,
								768
							]
						],
						"symlist":
						[
							"function WriteFile(name, data)",
							"async function main(...args)"
						]
					},
					"AQAAAAAAAAAAAAAAJQAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					6,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/test-parse.js",
						"symkeys":
						[
							[
								465,
								495
							],
							[
								697,
								725
							]
						],
						"symlist":
						[
							"function WriteFile(name, data)",
							"async function main(...args)"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAAAlAAAAV3JpdGVGaWxlKG5hbWUsIGRhdGEpCiAgbWFpbiguLi5hcmdzKQAAAAAAAAAAJQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACUAAABXcml0ZUZpbGUobmFtZSwgZGF0YSkKICBtYWluKC4uLmFyZ3MpAAAAAAAAAAAlAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					7,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/test-parse.js",
						"symkeys":
						[
							[
								465,
								495
							],
							[
								697,
								725
							]
						],
						"symlist":
						[
							"function WriteFile(name, data)",
							"async function main(...args)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAlAAAAV3JpdGVGaWxlKG5hbWUsIGRhdGEpCiAgbWFpbiguLi5hcmdzKQAAAAAAAAAAJQAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					8,
					3,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/test-parse.js",
						"symkeys":
						[
							[
								465,
								495
							],
							[
								697,
								725
							]
						],
						"symlist":
						[
							"function WriteFile(name, data)",
							"async function main(...args)"
						]
					},
					"BgAAAAAAAAAAAAAAAAAAAAAAAAAlAAAAV3JpdGVGaWxlKG5hbWUsIGRhdGEpCiAgbWFpbiguLi5hcmdzKQAAAAAAAAAAJQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACUAAABXcml0ZUZpbGUobmFtZSwgZGF0YSkKICBtYWluKC4uLmFyZ3MpAAAAAAAAAAAlAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJQAAAFdyaXRlRmlsZShuYW1lLCBkYXRhKQogIG1haW4oLi4uYXJncykAAAAAAAAAACUAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					9,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/.env",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAlAAAAV3JpdGVGaWxlKG5hbWUsIGRhdGEpCiAgbWFpbiguLi5hcmdzKQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					10,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/test-parse.js",
						"symkeys":
						[
							[
								465,
								495
							],
							[
								697,
								725
							]
						],
						"symlist":
						[
							"function WriteFile(name, data)",
							"async function main(...args)"
						]
					},
					"AQAAAAAAAAAAAAAAJQAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					11,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/.env",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAlAAAAV3JpdGVGaWxlKG5hbWUsIGRhdGEpCiAgbWFpbiguLi5hcmdzKQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					12,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/test-parse.js",
						"symkeys":
						[
							[
								465,
								495
							],
							[
								697,
								725
							]
						],
						"symlist":
						[
							"function WriteFile(name, data)",
							"async function main(...args)"
						]
					},
					"AQAAAAAAAAAAAAAAJQAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					13,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAlAAAAV3JpdGVGaWxlKG5hbWUsIGRhdGEpCiAgbWFpbiguLi5hcmdzKQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					14,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					15,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					16,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					17,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					18,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/test-parse.js",
						"symkeys":
						[
							[
								465,
								495
							],
							[
								697,
								725
							]
						],
						"symlist":
						[
							"function WriteFile(name, data)",
							"async function main(...args)"
						]
					},
					"AQAAAAAAAAAAAAAAJQAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					19,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AwAAAAAAAAAAAAAAAAAAAAAAAAAlAAAAV3JpdGVGaWxlKG5hbWUsIGRhdGEpCiAgbWFpbiguLi5hcmdzKQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					20,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/test-parse.js",
						"symkeys":
						[
							[
								465,
								495
							],
							[
								693,
								721
							]
						],
						"symlist":
						[
							"function WriteFile(name, data)",
							"async function main(...args)"
						]
					},
					"AQAAAAAAAAAAAAAAJQAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					21,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/test-parse.js",
						"symkeys":
						[
							[
								465,
								495
							],
							[
								693,
								721
							]
						],
						"symlist":
						[
							"function WriteFile(name, data)",
							"async function main(...args)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAlAAAAV3JpdGVGaWxlKG5hbWUsIGRhdGEpCiAgbWFpbiguLi5hcmdzKQAAAAAAAAAAJQAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					22,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAlAAAAV3JpdGVGaWxlKG5hbWUsIGRhdGEpCiAgbWFpbiguLi5hcmdzKQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					23,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/test-parse.js",
						"symkeys":
						[
							[
								465,
								495
							],
							[
								693,
								721
							]
						],
						"symlist":
						[
							"function WriteFile(name, data)",
							"async function main(...args)"
						]
					},
					"AQAAAAAAAAAAAAAAJQAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					24,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAlAAAAV3JpdGVGaWxlKG5hbWUsIGRhdGEpCiAgbWFpbiguLi5hcmdzKQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					25,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/package.json",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					26,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					27,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/package.json",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					28,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/test-parse.js",
						"symkeys":
						[
							[
								465,
								495
							],
							[
								693,
								721
							]
						],
						"symlist":
						[
							"function WriteFile(name, data)",
							"async function main(...args)"
						]
					},
					"AQAAAAAAAAAAAAAAJQAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					29,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/.env",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAlAAAAV3JpdGVGaWxlKG5hbWUsIGRhdGEpCiAgbWFpbiguLi5hcmdzKQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					30,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/test-parse.js",
						"symkeys":
						[
							[
								465,
								495
							],
							[
								693,
								721
							]
						],
						"symlist":
						[
							"function WriteFile(name, data)",
							"async function main(...args)"
						]
					},
					"AQAAAAAAAAAAAAAAJQAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					31,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/ecmascript.js",
						"symkeys":
						[
							[
								1506,
								1530
							],
							[
								1631,
								1639
							],
							[
								1685,
								1704
							]
						],
						"symlist":
						[
							" function PathReplacer()",
							"t = s =>",
							" (path, to = '') =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAlAAAAV3JpdGVGaWxlKG5hbWUsIGRhdGEpCiAgbWFpbiguLi5hcmdzKQAAAAAAAAAALgAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					32,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/test-parse.js",
						"symkeys":
						[
							[
								465,
								495
							],
							[
								693,
								721
							]
						],
						"symlist":
						[
							"function WriteFile(name, data)",
							"async function main(...args)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAuAAAAUGF0aFJlcGxhY2VyKCkKICB0ID0gcyA9PgogIChwYXRoLCB0byA9ICcnKSA9PgAAAAAAAAAAJQAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					33,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/test-ecmascript2.js",
						"symkeys":
						[
							[
								2148,
								2162
							],
							[
								2333,
								2384
							],
							[
								2423,
								2475
							],
							[
								2505,
								2572
							],
							[
								2608,
								2647
							],
							[
								2661,
								2667
							],
							[
								2782,
								2795
							],
							[
								3010,
								3015
							],
							[
								3059,
								3064
							],
							[
								3123,
								3146
							],
							[
								3217,
								3247
							],
							[
								3494,
								3556
							],
							[
								3711,
								3733
							],
							[
								4045,
								4065
							],
							[
								4162,
								4188
							],
							[
								4406,
								4439
							],
							[
								4799,
								4804
							],
							[
								4863,
								4875
							],
							[
								5055,
								5061
							],
							[
								5370,
								5376
							],
							[
								5787,
								5798
							],
							[
								5860,
								5898
							],
							[
								7330,
								7341
							],
							[
								8156,
								8190
							],
							[
								8423,
								8442
							],
							[
								8516,
								8534
							],
							[
								8628,
								8675
							],
							[
								8722,
								8735
							],
							[
								8954,
								8972
							],
							[
								9192,
								9209
							],
							[
								9290,
								9310
							],
							[
								9427,
								9431
							],
							[
								10119,
								10125
							]
						],
						"symlist":
						[
							"testfn = () =>",
							"SliceOffEmpty = (arr, pred = item => item != '') =>",
							"FilterOutEmpty = (arr, pred = item => item != '') =>",
							".GetStack = (stack, cond = fr => fr.functionName != 'esfactory') =>",
							".FormatStack = (stack, start, limit) =>",
							" fr =>",
							"(frame, i) =>",
							"fr =>",
							"fr =>",
							"([func, file, line]) =>",
							"function WriteFile(name, data)",
							"function printAst(ast, comments, printer = globalThis.printer)",
							"function main(...argv)",
							" (v, r, o) =>",
							"([name, [arg, fn, ch]]) =>",
							" function(v, r, o, result)",
							"() =>",
							"time = () =>",
							" () =>",
							" fr =>",
							"([k, v]) =>",
							"function ParseECMAScript(file, params)",
							" (fr, i) =>",
							"function processFile(file, params)",
							"isRequire = node =>",
							"isImport = node =>",
							"({ comment, text, node, pos, len, ...item }) =>",
							" (a, b) =>",
							" ([path, node]) =>",
							"([path, node]) =>",
							"function finish(err)",
							"s =>",
							" fr =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAlAAAAV3JpdGVGaWxlKG5hbWUsIGRhdGEpCiAgbWFpbiguLi5hcmdzKQAAAAAAAAAA7QIAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					34,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/test-parse.js",
						"symkeys":
						[
							[
								465,
								495
							],
							[
								693,
								721
							]
						],
						"symlist":
						[
							"function WriteFile(name, data)",
							"async function main(...args)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADtAgAAICB0ZXN0Zm4gPSAoKSA9PgpTbGljZU9mZkVtcHR5ID0gKGFyciwgcHJlZCA9IGl0ZW0gPT4gaXRlbSAhPSAnJykgPT4KRmlsdGVyT3V0RW1wdHkgPSAoYXJyLCBwcmVkID0gaXRlbSA9PiBpdGVtICE9ICcnKSA9PgogIC5HZXRTdGFjayA9IChzdGFjaywgY29uZCA9IGZyID0+IGZyLmZ1bmN0aW9uTmFtZSAhPSAnZXNmYWN0b3J5JykgPT4KICAuRm9ybWF0U3RhY2sgPSAoc3RhY2ssIHN0YXJ0LCBsaW1pdCkgPT4KICBmciA9PgooZnJhbWUsIGkpID0+CiAgZnIgPT4KICBmciA9PgooW2Z1bmMsIGZpbGUsIGxpbmVdKSA9PgpXcml0ZUZpbGUobmFtZSwgZGF0YSkKICBwcmludEFzdChhc3QsIGNvbW1lbnRzLCBwcmludGVyID0gZ2xvYmFsVGhpcy5wcmludGVyKQogIG1haW4oLi4uYXJndikKICAodiwgciwgbykgPT4KKFtuYW1lLCBbYXJnLCBmbiwgY2hdXSkgPT4KICBmdW5jdGlvbih2LCByLCBvLCByZXN1bHQpCigpID0+CiAgdGltZSA9ICgpID0+CiAgKCkgPT4KICBmciA9PgooW2ssIHZdKSA9PgpQYXJzZUVDTUFTY3JpcHQoZmlsZSwgcGFyYW1zKQogIChmciwgaSkgPT4KICBwcm9jZXNzRmlsZShmaWxlLCBwYXJhbXMpCiAgaXNSZXF1aXJlID0gbm9kZSA9PgogIGlzSW1wb3J0ID0gbm9kZSA9PgooeyBjb21tZW50LCB0ZXh0LCBub2RlLCBwb3MsIGxlbiwgLi4uaXRlbSB9KSA9PgogIChhLCBiKSA9PgogIChbcGF0aCwgbm9kZV0pID0+CihbcGF0aCwgbm9kZV0pID0+CiAgZmluaXNoKGVycikKICBzID0+CiAgZnIgPT4AAAAAAAAAACUAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					35,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/cv-shell.js",
						"symkeys":
						[
							[
								1251,
								1299
							],
							[
								1417,
								1426
							],
							[
								1589,
								1593
							],
							[
								1701,
								1734
							],
							[
								1742,
								1743
							],
							[
								1757,
								1782
							],
							[
								1998,
								2012
							],
							[
								2105,
								2121
							],
							[
								2364,
								2378
							],
							[
								2462,
								2487
							],
							[
								2751,
								2763
							],
							[
								2845,
								2849
							],
							[
								3057,
								3069
							],
							[
								3166,
								3188
							],
							[
								3778,
								3787
							]
						],
						"symlist":
						[
							"async function importModule(moduleName, ...args)",
							"module =>",
							"e =>",
							"function StartREPL(prefix = path.",
							"(",
							"[0], '.js'), suffix = '')",
							".show = arg =>",
							".cleanup = () =>",
							" image =>",
							" function(line, pos)",
							" (p, err) =>",
							"p =>",
							"(...args) =>",
							"function main(...args)",
							"quit(arg)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAlAAAAV3JpdGVGaWxlKG5hbWUsIGRhdGEpCiAgbWFpbiguLi5hcmdzKQAAAAAAAAAA7gAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					36,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/test-parse.js",
						"symkeys":
						[
							[
								465,
								495
							],
							[
								693,
								721
							]
						],
						"symlist":
						[
							"function WriteFile(name, data)",
							"async function main(...args)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADuAAAAICBpbXBvcnRNb2R1bGUobW9kdWxlTmFtZSwgLi4uYXJncykKICBtb2R1bGUgPT4KICBlID0+ClN0YXJ0UkVQTChwcmVmaXggPSBwYXRoLgooClswXSwgJy5qcycpLCBzdWZmaXggPSAnJykKICAuc2hvdyA9IGFyZyA9PgogIC5jbGVhbnVwID0gKCkgPT4KICBpbWFnZSA9PgogIGZ1bmN0aW9uKGxpbmUsIHBvcykKICAocCwgZXJyKSA9PgogIHAgPT4KKC4uLmFyZ3MpID0+CiAgbWFpbiguLi5hcmdzKQogIHF1aXQoYXJnKQAAAAAAAAAAJQAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					37,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/cmake/highgui-viewer.cmake",
						"symkeys":
						[
							[
								4,
								24
							],
							[
								35,
								47
							],
							[
								192,
								207
							],
							[
								210,
								225
							],
							[
								318,
								340
							],
							[
								428,
								443
							],
							[
								488,
								508
							],
							[
								529,
								540
							],
							[
								586,
								602
							],
							[
								606,
								619
							],
							[
								623,
								646
							],
							[
								652,
								668
							],
							[
								672,
								699
							],
							[
								703,
								724
							],
							[
								736,
								741
							],
							[
								747,
								751
							],
							[
								755,
								765
							]
						],
						"symlist":
						[
							"GLEW_USE_STATIC_LIBS",
							"GLEW_VERBOSE",
							"QUICKJS_SOURCES",
							"QUICKJS_SOURCES",
							"HIGHGUI_VIEWER_SOURCES",
							"QUICKJS_VERSION",
							"CMAKE_INSTALL_PREFIX",
							"PLOTCV_DEFS",
							"QUICKJS_OPENCV_A",
							"PNG_LIBRARIES",
							"OPENCV_FREETYPE_LIBRARY",
							"OPENCV_LIBRARIES",
							"GLEW_SHARED_LIBRARY_RELEASE",
							"GLEW_SHARED_LIBRARIES",
							"LIBDL",
							"LIBM",
							"LIBPTHREAD"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAlAAAAV3JpdGVGaWxlKG5hbWUsIGRhdGEpCiAgbWFpbiguLi5hcmdzKQAAAAAAAAAAGQEAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					38,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/test-parse.js",
						"symkeys":
						[
							[
								465,
								495
							],
							[
								693,
								721
							]
						],
						"symlist":
						[
							"function WriteFile(name, data)",
							"async function main(...args)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAZAQAAR0xFV19VU0VfU1RBVElDX0xJQlMKR0xFV19WRVJCT1NFClFVSUNLSlNfU09VUkNFUwpRVUlDS0pTX1NPVVJDRVMKSElHSEdVSV9WSUVXRVJfU09VUkNFUwpRVUlDS0pTX1ZFUlNJT04KQ01BS0VfSU5TVEFMTF9QUkVGSVgKUExPVENWX0RFRlMKUVVJQ0tKU19PUEVOQ1ZfQQpQTkdfTElCUkFSSUVTCk9QRU5DVl9GUkVFVFlQRV9MSUJSQVJZCk9QRU5DVl9MSUJSQVJJRVMKR0xFV19TSEFSRURfTElCUkFSWV9SRUxFQVNFCkdMRVdfU0hBUkVEX0xJQlJBUklFUwpMSUJETApMSUJNCkxJQlBUSFJFQUQAAAAAAAAAACUAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					39,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/cmake/imgui-viewer.cmake",
						"symkeys":
						[
							[
								102,
								126
							],
							[
								297,
								314
							],
							[
								334,
								351
							],
							[
								359,
								373
							],
							[
								376,
								388
							],
							[
								392,
								413
							],
							[
								477,
								496
							],
							[
								550,
								564
							],
							[
								567,
								585
							],
							[
								589,
								609
							],
							[
								613,
								632
							],
							[
								687,
								704
							],
							[
								878,
								888
							],
							[
								891,
								904
							],
							[
								908,
								922
							],
							[
								926,
								939
							],
							[
								943,
								960
							],
							[
								1026,
								1050
							],
							[
								1537,
								1552
							],
							[
								1555,
								1570
							],
							[
								1816,
								1836
							],
							[
								1908,
								1923
							],
							[
								1943,
								1963
							],
							[
								2007,
								2018
							],
							[
								2069,
								2083
							],
							[
								2087,
								2103
							],
							[
								2107,
								2120
							],
							[
								2124,
								2147
							],
							[
								2153,
								2169
							],
							[
								2178,
								2194
							],
							[
								2198,
								2212
							],
							[
								2216,
								2230
							],
							[
								2234,
								2244
							],
							[
								2258,
								2263
							],
							[
								2267,
								2271
							],
							[
								2275,
								2285
							],
							[
								2360,
								2379
							],
							[
								2421,
								2432
							]
						],
						"symlist":
						[
							"CMAKE_CURRENT_SOURCE_DIR",
							"GLFW_INCLUDE_DIRS",
							"GLFW_LIBRARY_DIRS",
							"GLFW_LIBRARIES",
							"GLFW_LIBRARY",
							"pkgcfg_lib_GLFW3_glfw",
							"OPENGL_INCLUDE_DIRS",
							"GLEW_LIBRARIES",
							"pkgcfg_lib_GLEW_GL",
							"pkgcfg_lib_GLEW_GLEW",
							"pkgcfg_lib_GLEW_GLU",
							"GLEW_INCLUDE_DIRS",
							"EXTRA_LIBS",
							"COCOA_LIBRARY",
							"OpenGL_LIBRARY",
							"IOKIT_LIBRARY",
							"COREVIDEO_LIBRARY",
							"CMAKE_CURRENT_SOURCE_DIR",
							"QUICKJS_SOURCES",
							"QUICKJS_SOURCES",
							"IMGUI_VIEWER_SOURCES",
							"QUICKJS_VERSION",
							"CMAKE_INSTALL_PREFIX",
							"PLOTCV_DEFS",
							"SDL2_LIBRARIES",
							"QUICKJS_OPENCV_A",
							"PNG_LIBRARIES",
							"OPENCV_FREETYPE_LIBRARY",
							"OPENCV_LIBRARIES",
							"OPENGL_LIBRARIES",
							"GLFW_LIBRARIES",
							"GLEW_LIBRARIES",
							"EXTRA_LIBS",
							"LIBDL",
							"LIBM",
							"LIBPTHREAD",
							"OpenCV_INCLUDE_DIRS",
							"OpenCV_LIBS"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAlAAAAV3JpdGVGaWxlKG5hbWUsIGRhdGEpCiAgbWFpbiguLi5hcmdzKQAAAAAAAAAAdQIAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					40,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/test-parse.js",
						"symkeys":
						[
							[
								465,
								495
							],
							[
								693,
								721
							]
						],
						"symlist":
						[
							"function WriteFile(name, data)",
							"async function main(...args)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB1AgAAQ01BS0VfQ1VSUkVOVF9TT1VSQ0VfRElSCkdMRldfSU5DTFVERV9ESVJTCkdMRldfTElCUkFSWV9ESVJTCkdMRldfTElCUkFSSUVTCkdMRldfTElCUkFSWQogIHBrZ2NmZ19saWJfR0xGVzNfZ2xmdwpPUEVOR0xfSU5DTFVERV9ESVJTCkdMRVdfTElCUkFSSUVTCiAgcGtnY2ZnX2xpYl9HTEVXX0dMCiAgcGtnY2ZnX2xpYl9HTEVXX0dMRVcKICBwa2djZmdfbGliX0dMRVdfR0xVCkdMRVdfSU5DTFVERV9ESVJTCkVYVFJBX0xJQlMKQ09DT0FfTElCUkFSWQpPcGVuR0xfTElCUkFSWQpJT0tJVF9MSUJSQVJZCkNPUkVWSURFT19MSUJSQVJZCkNNQUtFX0NVUlJFTlRfU09VUkNFX0RJUgpRVUlDS0pTX1NPVVJDRVMKUVVJQ0tKU19TT1VSQ0VTCklNR1VJX1ZJRVdFUl9TT1VSQ0VTClFVSUNLSlNfVkVSU0lPTgpDTUFLRV9JTlNUQUxMX1BSRUZJWApQTE9UQ1ZfREVGUwpTREwyX0xJQlJBUklFUwpRVUlDS0pTX09QRU5DVl9BClBOR19MSUJSQVJJRVMKT1BFTkNWX0ZSRUVUWVBFX0xJQlJBUlkKT1BFTkNWX0xJQlJBUklFUwpPUEVOR0xfTElCUkFSSUVTCkdMRldfTElCUkFSSUVTCkdMRVdfTElCUkFSSUVTCkVYVFJBX0xJQlMKTElCREwKTElCTQpMSUJQVEhSRUFECk9wZW5DVl9JTkNMVURFX0RJUlMKT3BlbkNWX0xJQlMAAAAAAAAAACUAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					41,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/grammars/xpath.g4",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAlAAAAV3JpdGVGaWxlKG5hbWUsIGRhdGEpCiAgbWFpbiguLi5hcmdzKQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					42,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eda/circuitjs.js",
						"symkeys":
						[
							[
								110,
								131
							],
							[
								142,
								172
							],
							[
								251,
								262
							],
							[
								282,
								287
							],
							[
								321,
								329
							],
							[
								358,
								366
							],
							[
								395,
								406
							],
							[
								484,
								491
							],
							[
								534,
								561
							],
							[
								866,
								890
							],
							[
								1202,
								1209
							],
							[
								1235,
								1242
							],
							[
								1295,
								1302
							],
							[
								1350,
								1359
							],
							[
								1364,
								1381
							],
							[
								1472,
								1490
							],
							[
								1562,
								1569
							],
							[
								1595,
								1602
							],
							[
								1626,
								1635
							],
							[
								1758,
								1785
							],
							[
								1866,
								1875
							],
							[
								1894,
								1903
							],
							[
								2123,
								2141
							],
							[
								2256,
								2278
							],
							[
								2296,
								2305
							]
						],
						"symlist":
						[
							" function Element(el)",
							"makeGetterSetter = key => v =>",
							"line: () =>",
							" k =>",
							"a: () =>",
							"b: () =>",
							"type: () =>",
							"Element",
							"get(target, prop, receiver)",
							"set(target, prop, value)",
							"Element",
							"Element",
							"Element",
							"CircuitJS",
							"static load(file)",
							"static parse(text)",
							"line =>",
							"line =>",
							"(s, i) =>",
							"get(target, prop, receiver)",
							"CircuitJS",
							"CircuitJS",
							"prop = ([name]) =>",
							"getPrototypeOf(target)",
							"CircuitJS"
						]
					},
					"AQAAAAAAAAAAAAAAeQEAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					43,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/qjs-opencv/js/cvVideo.js",
						"symkeys":
						[
							[
								339,
								344
							],
							[
								375,
								380
							],
							[
								401,
								426
							],
							[
								515,
								590
							],
							[
								595,
								626
							],
							[
								1606,
								1610
							],
							[
								1737,
								1746
							],
							[
								2286,
								2299
							],
							[
								2304,
								2340
							],
							[
								2618,
								2622
							],
							[
								2733,
								2750
							],
							[
								2842,
								2858
							],
							[
								2903,
								2924
							],
							[
								2993,
								3007
							],
							[
								3691,
								3707
							],
							[
								3737,
								3747
							],
							[
								3773,
								3782
							],
							[
								3834,
								3850
							],
							[
								4086,
								4096
							],
							[
								4178,
								4184
							],
							[
								4550,
								4563
							],
							[
								4888,
								4910
							],
							[
								5169,
								5178
							],
							[
								5343,
								5363
							],
							[
								5459,
								5470
							],
							[
								5872,
								5879
							],
							[
								5912,
								5932
							],
							[
								5994,
								6007
							],
							[
								6870,
								6895
							],
							[
								7039,
								7056
							],
							[
								7267,
								7288
							],
							[
								7886,
								7911
							],
							[
								8064,
								8076
							],
							[
								8097,
								8116
							],
							[
								8190,
								8207
							],
							[
								8490,
								8503
							],
							[
								8566,
								8587
							],
							[
								8606,
								8619
							],
							[
								8694,
								8705
							],
							[
								8810,
								8820
							],
							[
								8920,
								8929
							],
							[
								9049,
								9065
							],
							[
								9192,
								9205
							],
							[
								9458,
								9467
							],
							[
								9505,
								9629
							],
							[
								9661,
								9672
							],
							[
								9712,
								9723
							],
							[
								9750,
								9770
							],
							[
								9899,
								9918
							],
							[
								10053,
								10072
							],
							[
								10193,
								10218
							],
							[
								10504,
								10514
							],
							[
								10669,
								10683
							],
							[
								10834,
								10844
							],
							[
								11103,
								11124
							]
						],
						"symlist":
						[
							"() =>",
							"() =>",
							" function Crop(mat, rect)",
							"function ImageSize(src, dst, dsize, action = (name, arg1, arg2) => console.",
							"(`${name} ${arg1} -> ${arg2}`))",
							"s =>",
							"(a, b) =>",
							"ImageSequence",
							"constructor(images = [], dimensions)",
							"e =>",
							"get frame_count()",
							"get pos_frames()",
							"set pos_frames(value)",
							"get pos_msec()",
							"getBackendName()",
							"isOpened()",
							"get(prop)",
							"set(prop, value)",
							"get size()",
							"grab()",
							"retrieve(mat)",
							" (name, arg1, arg2) =>",
							"read(mat)",
							"isVideoPath = arg =>",
							"VideoSource",
							"name =>",
							"constructor(...args)",
							"(acc, arg) =>",
							"capture(device, driverId)",
							".propId = prop =>",
							".read = function(mat)",
							".retrieve = function(mat)",
							"VideoCapture",
							"fromImages(...args)",
							".propId = prop =>",
							"ImageSequence",
							".read = function(mat)",
							"ImageSequence",
							"set size(s)",
							"get size()",
							"get(prop)",
							"set(prop, value)",
							"get backend()",
							"get fps()",
							"dump(props = ['frame_count', 'frame_width', 'frame_height', 'fps', 'format', 'fourcc', 'backend', 'pos_frames', 'pos_msec'])",
							"propName =>",
							"([k, v]) =>",
							"seekFrames(relative)",
							"seekMsecs(relative)",
							"get durationMsecs()",
							"position(type = 'frames')",
							"get size()",
							"set size(size)",
							"get time()",
							"pad = (i, n, frac) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB5AQAARWxlbWVudChlbCkKICBtYWtlR2V0dGVyU2V0dGVyID0ga2V5ID0+IHYgPT4KICBsaW5lOiAoKSA9PgogIGsgPT4KICBhOiAoKSA9PgogIGI6ICgpID0+CiAgdHlwZTogKCkgPT4KRWxlbWVudAogIGdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKQogIHNldCh0YXJnZXQsIHByb3AsIHZhbHVlKQpFbGVtZW50CkVsZW1lbnQKRWxlbWVudApDaXJjdWl0SlMKICBzdGF0aWMgbG9hZChmaWxlKQogIHN0YXRpYyBwYXJzZSh0ZXh0KQogIGxpbmUgPT4KICBsaW5lID0+CihzLCBpKSA9PgogIGdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKQpDaXJjdWl0SlMKQ2lyY3VpdEpTCiAgcHJvcCA9IChbbmFtZV0pID0+CiAgZ2V0UHJvdG90eXBlT2YodGFyZ2V0KQpDaXJjdWl0SlMAAAAAAAAAAFYEAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					44,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/geom/graph.js",
						"symkeys":
						[
							[
								45,
								50
							],
							[
								55,
								68
							],
							[
								126,
								150
							],
							[
								402,
								432
							],
							[
								714,
								732
							],
							[
								978,
								985
							],
							[
								1095,
								1118
							],
							[
								1169,
								1182
							],
							[
								1302,
								1315
							],
							[
								1459,
								1487
							],
							[
								1525,
								1538
							],
							[
								1603,
								1628
							],
							[
								1751,
								1768
							],
							[
								2020,
								2045
							],
							[
								2081,
								2094
							],
							[
								2225,
								2252
							],
							[
								2407,
								2414
							],
							[
								2496,
								2503
							],
							[
								3203,
								3216
							],
							[
								3504,
								3520
							],
							[
								3566,
								3573
							],
							[
								3817,
								3870
							],
							[
								4292,
								4304
							],
							[
								4518,
								4537
							],
							[
								4893,
								4901
							],
							[
								7374,
								7385
							],
							[
								7564,
								7571
							],
							[
								8374,
								8386
							],
							[
								8669,
								8677
							],
							[
								9225,
								9275
							],
							[
								9501,
								9555
							],
							[
								10656,
								10660
							],
							[
								10665,
								10696
							],
							[
								10730,
								10742
							],
							[
								10814,
								10818
							],
							[
								10823,
								10848
							],
							[
								10906,
								10924
							]
						],
						"symlist":
						[
							"Graph",
							"constructor()",
							"checkForDuplicateNodes()",
							"checkForDuplicateConnections()",
							"getAdjacencyList()",
							"node =>",
							"getConnectedNodes(node)",
							"connection =>",
							"connection =>",
							"getConnectionsFromNode(node)",
							"connection =>",
							"getNeighboringNodes(node)",
							"nodeConnection =>",
							"isConnected(node1, node2)",
							"connection =>",
							"addConnection(node1, node2)",
							"node =>",
							"node =>",
							"connection =>",
							"addNode(newNode)",
							"node =>",
							"findMinimumCyclesFromSource(adjacencyListSourceIndex)",
							"nodeIndex =>",
							"findMinimumCycles()",
							"cycle =>",
							"edgePair =>",
							"edge =>",
							"nodeIndex =>",
							"cycle =>",
							"static doArraysContainSameElements(array1, array2)",
							"static findShortestPath(adjacencyList, source, target)",
							"Node",
							"constructor(point, connections)",
							"equals(node)",
							"Edge",
							"constructor(node1, node2)",
							"equals(connection)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABWBAAAKCkgPT4KKCkgPT4KQ3JvcChtYXQsIHJlY3QpCkltYWdlU2l6ZShzcmMsIGRzdCwgZHNpemUsIGFjdGlvbiA9IChuYW1lLCBhcmcxLCBhcmcyKSA9PiBjb25zb2xlLgooYCR7bmFtZX0gJHthcmcxfSAtPiAke2FyZzJ9YCkpCiAgcyA9PgooYSwgYikgPT4KSW1hZ2VTZXF1ZW5jZQogIGNvbnN0cnVjdG9yKGltYWdlcyA9IFtdLCBkaW1lbnNpb25zKQogIGUgPT4KICBnZXQgZnJhbWVfY291bnQoKQogIGdldCBwb3NfZnJhbWVzKCkKICBzZXQgcG9zX2ZyYW1lcyh2YWx1ZSkKICBnZXQgcG9zX21zZWMoKQogIGdldEJhY2tlbmROYW1lKCkKICBpc09wZW5lZCgpCiAgZ2V0KHByb3ApCiAgc2V0KHByb3AsIHZhbHVlKQogIGdldCBzaXplKCkKICBncmFiKCkKICByZXRyaWV2ZShtYXQpCiAgKG5hbWUsIGFyZzEsIGFyZzIpID0+CiAgcmVhZChtYXQpCiAgaXNWaWRlb1BhdGggPSBhcmcgPT4KVmlkZW9Tb3VyY2UKICBuYW1lID0+CiAgY29uc3RydWN0b3IoLi4uYXJncykKKGFjYywgYXJnKSA9PgogIGNhcHR1cmUoZGV2aWNlLCBkcml2ZXJJZCkKICAucHJvcElkID0gcHJvcCA9PgogIC5yZWFkID0gZnVuY3Rpb24obWF0KQogIC5yZXRyaWV2ZSA9IGZ1bmN0aW9uKG1hdCkKVmlkZW9DYXB0dXJlCiAgZnJvbUltYWdlcyguLi5hcmdzKQogIC5wcm9wSWQgPSBwcm9wID0+CkltYWdlU2VxdWVuY2UKICAucmVhZCA9IGZ1bmN0aW9uKG1hdCkKSW1hZ2VTZXF1ZW5jZQogIHNldCBzaXplKHMpCiAgZ2V0IHNpemUoKQogIGdldChwcm9wKQogIHNldChwcm9wLCB2YWx1ZSkKICBnZXQgYmFja2VuZCgpCiAgZ2V0IGZwcygpCiAgZHVtcChwcm9wcyA9IFsnZnJhbWVfY291bnQnLCAnZnJhbWVfd2lkdGgnLCAnZnJhbWVfaGVpZ2h0JywgJ2ZwcycsICdmb3JtYXQnLCAnZm91cmNjJywgJ2JhY2tlbmQnLCAncG9zX2ZyYW1lcycsICdwb3NfbXNlYyddKQogIHByb3BOYW1lID0+Cihbaywgdl0pID0+CiAgc2Vla0ZyYW1lcyhyZWxhdGl2ZSkKICBzZWVrTXNlY3MocmVsYXRpdmUpCiAgZ2V0IGR1cmF0aW9uTXNlY3MoKQogIHBvc2l0aW9uKHR5cGUgPSAnZnJhbWVzJykKICBnZXQgc2l6ZSgpCiAgc2V0IHNpemUoc2l6ZSkKICBnZXQgdGltZSgpCiAgcGFkID0gKGksIG4sIGZyYWMpID0+AAAAAAAAAAAIAwAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					45,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/fd-graph.js",
						"symkeys":
						[
							[
								948,
								953
							],
							[
								958,
								983
							],
							[
								1174,
								1196
							],
							[
								1203,
								1225
							],
							[
								1232,
								1256
							],
							[
								1755,
								1769
							],
							[
								1876,
								1882
							],
							[
								2069,
								2133
							],
							[
								2213,
								2219
							],
							[
								2523,
								2553
							],
							[
								2609,
								2620
							],
							[
								2831,
								2841
							],
							[
								3203,
								3209
							],
							[
								3311,
								3317
							],
							[
								3376,
								3388
							],
							[
								3499,
								3536
							],
							[
								3888,
								3904
							],
							[
								3984,
								3998
							],
							[
								4126,
								4136
							],
							[
								4180,
								4193
							],
							[
								5975,
								6010
							],
							[
								6370,
								6397
							],
							[
								6548,
								6552
							],
							[
								6618,
								6622
							],
							[
								6682,
								6686
							],
							[
								6738,
								6742
							],
							[
								8087,
								8098
							],
							[
								8274,
								8288
							],
							[
								8491,
								8502
							],
							[
								8546,
								8553
							],
							[
								8554,
								8558
							],
							[
								8615,
								8622
							],
							[
								8623,
								8627
							],
							[
								8726,
								8759
							],
							[
								9206,
								9216
							],
							[
								9290,
								9302
							],
							[
								9341,
								9356
							],
							[
								9533,
								9537
							],
							[
								9637,
								9656
							],
							[
								9721,
								9727
							],
							[
								9873,
								9922
							],
							[
								10249,
								10256
							],
							[
								10320,
								10356
							],
							[
								10571,
								10604
							],
							[
								10814,
								10820
							],
							[
								10858,
								10865
							],
							[
								11076,
								11080
							],
							[
								11110,
								11137
							],
							[
								11455,
								11463
							],
							[
								11506,
								11514
							],
							[
								11557,
								11565
							],
							[
								11608,
								11616
							],
							[
								11659,
								11668
							],
							[
								11706,
								11715
							],
							[
								11753,
								11762
							],
							[
								11800,
								11809
							],
							[
								11848,
								11854
							],
							[
								11879,
								11883
							],
							[
								11922,
								11926
							],
							[
								11968,
								11980
							],
							[
								12061,
								12070
							]
						],
						"symlist":
						[
							"Graph",
							"constructor(options = {})",
							"onUpdateNode = node =>",
							"onUpdateEdge = edge =>",
							"onRenderGraph = graph =>",
							"update = () =>",
							" () =>",
							"addNode(n, charge = this.config.charge, mass = this.config.mass)",
							" () =>",
							"findNode(value, key = 'label')",
							"randomize()",
							"addEdge(e)",
							"add(o)",
							"push()",
							"resetNodes()",
							"*getConnections(node, exclude = null)",
							"isLeafNode(node)",
							"*branchNodes()",
							"get bbox()",
							"checkRedraw()",
							" function findBiggestGap(angles)",
							"distributeLeafNodes = () =>",
							"c =>",
							"c =>",
							"c =>",
							"l =>",
							"updateAll()",
							"roundAll(prec)",
							"serialize()",
							"node =>",
							"Node",
							"edge =>",
							"Edge",
							"deserialize(nodes, edges, config)",
							"get rect()",
							"get center()",
							"translate(x, y)",
							"Node",
							"static clone(other)",
							" () =>",
							"constructor(label, charge = 60, mass = 100, prng)",
							"reset()",
							"applyAttractiveForce(n, scale = 0.1)",
							"applyRepulsiveForce(n, scale = 1)",
							"toJS()",
							" key =>",
							"Edge",
							"constructor(node_a, node_b)",
							"get x1()",
							"get y1()",
							"get x2()",
							"get y2()",
							"set x1(v)",
							"set y1(v)",
							"set x2(v)",
							"set y2(v)",
							"toJS()",
							"Node",
							"Node",
							"toIdx(graph)",
							"draw(ctx)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAIAwAAR3JhcGgKICBjb25zdHJ1Y3RvcigpCiAgY2hlY2tGb3JEdXBsaWNhdGVOb2RlcygpCiAgY2hlY2tGb3JEdXBsaWNhdGVDb25uZWN0aW9ucygpCiAgZ2V0QWRqYWNlbmN5TGlzdCgpCiAgbm9kZSA9PgogIGdldENvbm5lY3RlZE5vZGVzKG5vZGUpCiAgY29ubmVjdGlvbiA9PgogIGNvbm5lY3Rpb24gPT4KICBnZXRDb25uZWN0aW9uc0Zyb21Ob2RlKG5vZGUpCiAgY29ubmVjdGlvbiA9PgogIGdldE5laWdoYm9yaW5nTm9kZXMobm9kZSkKICBub2RlQ29ubmVjdGlvbiA9PgogIGlzQ29ubmVjdGVkKG5vZGUxLCBub2RlMikKICBjb25uZWN0aW9uID0+CiAgYWRkQ29ubmVjdGlvbihub2RlMSwgbm9kZTIpCiAgbm9kZSA9PgogIG5vZGUgPT4KICBjb25uZWN0aW9uID0+CiAgYWRkTm9kZShuZXdOb2RlKQogIG5vZGUgPT4KICBmaW5kTWluaW11bUN5Y2xlc0Zyb21Tb3VyY2UoYWRqYWNlbmN5TGlzdFNvdXJjZUluZGV4KQogIG5vZGVJbmRleCA9PgogIGZpbmRNaW5pbXVtQ3ljbGVzKCkKICBjeWNsZSA9PgogIGVkZ2VQYWlyID0+CiAgZWRnZSA9PgogIG5vZGVJbmRleCA9PgogIGN5Y2xlID0+CiAgc3RhdGljIGRvQXJyYXlzQ29udGFpblNhbWVFbGVtZW50cyhhcnJheTEsIGFycmF5MikKICBzdGF0aWMgZmluZFNob3J0ZXN0UGF0aChhZGphY2VuY3lMaXN0LCBzb3VyY2UsIHRhcmdldCkKTm9kZQogIGNvbnN0cnVjdG9yKHBvaW50LCBjb25uZWN0aW9ucykKICBlcXVhbHMobm9kZSkKRWRnZQogIGNvbnN0cnVjdG9yKG5vZGUxLCBub2RlMikKICBlcXVhbHMoY29ubmVjdGlvbikAAAAAAAAAAO8DAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					46,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/ast-shell.js",
						"symkeys":
						[
							[
								1622,
								1626
							],
							[
								1685,
								1689
							],
							[
								1719,
								1767
							],
							[
								1882,
								1891
							],
							[
								2006,
								2028
							],
							[
								2487,
								2509
							],
							[
								2876,
								2886
							],
							[
								2944,
								2954
							],
							[
								3022,
								3038
							],
							[
								3479,
								3498
							],
							[
								3562,
								3583
							],
							[
								3917,
								3922
							],
							[
								3997,
								4012
							],
							[
								4104,
								4112
							],
							[
								4153,
								4161
							],
							[
								4406,
								4411
							],
							[
								4564,
								4637
							],
							[
								4641,
								4649
							],
							[
								4746,
								4776
							],
							[
								4811,
								4816
							],
							[
								4849,
								4856
							],
							[
								4968,
								4996
							],
							[
								5395,
								5402
							],
							[
								5421,
								5444
							],
							[
								5474,
								5481
							],
							[
								5512,
								5520
							],
							[
								5558,
								5565
							],
							[
								5765,
								5778
							],
							[
								5958,
								6001
							],
							[
								6034,
								6043
							],
							[
								6104,
								6108
							],
							[
								6156,
								6160
							],
							[
								6196,
								6210
							],
							[
								6317,
								6345
							],
							[
								6479,
								6504
							],
							[
								6602,
								6626
							],
							[
								6699,
								6703
							],
							[
								6821,
								6825
							],
							[
								6889,
								6903
							],
							[
								6959,
								6968
							],
							[
								7262,
								7276
							],
							[
								7425,
								7437
							],
							[
								7495,
								7520
							],
							[
								7569,
								7580
							],
							[
								7620,
								7631
							],
							[
								7768,
								7779
							],
							[
								7866,
								7879
							],
							[
								7960,
								7986
							],
							[
								8201,
								8230
							],
							[
								8241,
								8256
							],
							[
								8318,
								8337
							],
							[
								8545,
								8573
							],
							[
								8641,
								8688
							],
							[
								8955,
								8962
							],
							[
								10869,
								10927
							],
							[
								11970,
								11977
							],
							[
								12041,
								12048
							],
							[
								12058,
								12069
							],
							[
								12110,
								12136
							],
							[
								12252,
								12266
							],
							[
								12568,
								12587
							],
							[
								12614,
								12621
							],
							[
								12709,
								12739
							],
							[
								12805,
								12845
							],
							[
								13021,
								13072
							],
							[
								14029,
								14036
							],
							[
								14417,
								14437
							],
							[
								14608,
								14662
							],
							[
								14850,
								14862
							],
							[
								14889,
								14901
							],
							[
								15471,
								15531
							],
							[
								16113,
								16168
							],
							[
								16264,
								16276
							],
							[
								16281,
								16311
							],
							[
								16588,
								16610
							],
							[
								16656,
								16679
							],
							[
								16751,
								16766
							],
							[
								17294,
								17307
							],
							[
								17431,
								17450
							],
							[
								17502,
								17510
							],
							[
								17567,
								17582
							],
							[
								17740,
								17752
							],
							[
								18195,
								18209
							],
							[
								18309,
								18326
							],
							[
								18551,
								18573
							],
							[
								18690,
								18715
							],
							[
								18815,
								18832
							],
							[
								18886,
								18890
							],
							[
								18979,
								18983
							],
							[
								19034,
								19058
							],
							[
								19173,
								19213
							],
							[
								19273,
								19294
							],
							[
								19575,
								19607
							],
							[
								20190,
								20205
							],
							[
								20332,
								20357
							],
							[
								20593,
								20628
							],
							[
								20847,
								20854
							],
							[
								20949,
								20956
							],
							[
								20990,
								20999
							],
							[
								21035,
								21044
							],
							[
								21094,
								21102
							],
							[
								21144,
								21168
							],
							[
								21264,
								21280
							],
							[
								21316,
								21356
							],
							[
								21652,
								21695
							],
							[
								22649,
								22660
							],
							[
								23412,
								23462
							],
							[
								23484,
								23510
							],
							[
								23545,
								23574
							],
							[
								23928,
								23971
							],
							[
								24084,
								24088
							],
							[
								24104,
								24108
							],
							[
								24153,
								24240
							],
							[
								24407,
								24440
							],
							[
								24498,
								24503
							],
							[
								24581,
								24623
							],
							[
								24703,
								24713
							],
							[
								24835,
								24875
							],
							[
								25014,
								25019
							],
							[
								25199,
								25203
							],
							[
								25282,
								25286
							],
							[
								25438,
								25445
							],
							[
								25532,
								25537
							],
							[
								25645,
								25661
							],
							[
								25862,
								25866
							],
							[
								25926,
								25933
							],
							[
								26014,
								26021
							],
							[
								26086,
								26132
							],
							[
								26172,
								26182
							],
							[
								26383,
								26419
							],
							[
								26462,
								26474
							],
							[
								28016,
								28048
							],
							[
								28333,
								28338
							],
							[
								29530,
								29539
							],
							[
								29620,
								29629
							],
							[
								29738,
								29747
							],
							[
								29807,
								29816
							],
							[
								30070,
								30080
							],
							[
								30130,
								30140
							],
							[
								30188,
								30198
							],
							[
								30782,
								30793
							],
							[
								30829,
								30833
							],
							[
								30860,
								30864
							],
							[
								30888,
								30892
							],
							[
								30916,
								30920
							],
							[
								30948,
								30985
							],
							[
								31172,
								31227
							],
							[
								31358,
								31366
							],
							[
								31439,
								31447
							],
							[
								31485,
								31493
							],
							[
								31572,
								31608
							],
							[
								31697,
								31740
							],
							[
								31930,
								31935
							],
							[
								32036,
								32055
							],
							[
								32109,
								32114
							],
							[
								32363,
								32386
							],
							[
								32474,
								32479
							],
							[
								32591,
								32614
							],
							[
								32702,
								32707
							],
							[
								32809,
								32821
							],
							[
								33247,
								33252
							],
							[
								33312,
								33341
							],
							[
								33446,
								33451
							],
							[
								34339,
								34397
							],
							[
								35320,
								35331
							],
							[
								35364,
								35375
							],
							[
								35429,
								35435
							],
							[
								35488,
								35496
							],
							[
								35720,
								35747
							],
							[
								35776,
								35784
							],
							[
								36562,
								36568
							]
						],
						"symlist":
						[
							"d =>",
							"d =>",
							"async function ImportModule(modulePath, ...args)",
							"module =>",
							" (acc, item) =>",
							"function CommandLine()",
							"c(...args)",
							"l(...args)",
							".show = value =>",
							".printNode = arg =>",
							".debug = (...args) =>",
							"() =>",
							"(item, i, a) =>",
							"entry =>",
							"entry =>",
							"() =>",
							"function* IncludeAll(dir, maxDepth = Infinity, pred = entry => /\\.[ch]$/.",
							"(entry))",
							"function SelectLocations(node)",
							" n =>",
							"prop =>",
							"function LocationString(loc)",
							"node =>",
							"function Structs(nodes)",
							"node =>",
							"field =>",
							"node =>",
							"(field, i) =>",
							"function Table(list, pred = (n, l) => true)",
							"(n, i) =>",
							"e =>",
							"k =>",
							"([i, l, n]) =>",
							" function returnType(n)",
							" function numArgs(n)",
							" function Params(n)",
							"p =>",
							"k =>",
							"([i, l, n]) =>",
							"(k, j) =>",
							"(acc, name) =>",
							"(name, i) =>",
							"pad = (cols, pad, sep) =>",
							"(key, i) =>",
							"(s, col) =>",
							"(acc, n) =>",
							"(acc, row) =>",
							"function PrintRange(range)",
							"function OverlapRange(r1, r2)",
							"GetRange = r =>",
							"InRange = (i, r) =>",
							"function Terminate(exitCode)",
							"function* GenerateInspectStruct(decl, includes)",
							"name =>",
							"function InspectStruct(decl, includes, compiler = 'clang')",
							"line =>",
							"line =>",
							"(col, i) =>",
							"([field, offset, size]) =>",
							"(acc, line) =>",
							"toString(sep = ' ')",
							"line =>",
							"function RoundTo(value, align)",
							"function MakeStructClass(decl, filename)",
							"function* GenerateStructClass(decl, ffiPrefix = '')",
							"line =>",
							"([field, member]) =>",
							"function GenerateGetSet(name, offset, type, ffiPrefix)",
							"toHex = v =>",
							"toHex = v =>",
							"function ByteLength2TypedArray(byteLength, signed, floating)",
							"function ByteLength2Value(byteLength, signed, floating)",
							"FFI_Function",
							"constructor(node, prefix = '')",
							"([name, type], idx) =>",
							"generateDefine(fp, lib)",
							" (name, lib) =>",
							"generateDoc()",
							"push = (...args) =>",
							"field =>",
							"(field, col) =>",
							"js = type =>",
							"generateCall()",
							"([name, type]) =>",
							"generate(fp, lib, exp)",
							"generateFunction(fp, lib)",
							"([name, type]) =>",
							"p =>",
							"p =>",
							"compileFunction(fp, lib)",
							"function FdReader(fd, bufferSize = 1024)",
							"async (push, stop) =>",
							"async function CommandRead(args)",
							"async reader =>",
							" function ReadOutput(fd)",
							"async function LibraryExports(file)",
							"line =>",
							"line =>",
							"column =>",
							"(a, b) =>",
							"entry =>",
							"function SaveLibraries()",
							"(acc, [n, e]) =>",
							"function ProcessFile(file, debug = true)",
							"function ParseECMAScript(file, params = {})",
							" (fr, i) =>",
							"function PrintECMAScript(ast, comments, printer = ",
							"({ indent: 4 }, comments))",
							"function PrintCArray(strings)",
							"function Namespaces(nodePath, ast = $.data)",
							"p =>",
							"n =>",
							"function* Constants(node, t = (name, value) => [name, !isNaN(+value) ? +value : value])",
							"function GetImports(ast = $.data)",
							" n =>",
							"function GetIdentifiers(nodes, key = null)",
							" (n, k) =>",
							"function MemberNames(members, flags = 0)",
							" n =>",
							"p =>",
							"p =>",
							"name =>",
							" n =>",
							"([node, ptr]) =>",
							"p =>",
							"name =>",
							"name =>",
							"function UnsetLoc(node, pred = (v, p) => true)",
							" (v, k) =>",
							"function MakeFFI(node, lib, exp, fp)",
							"function* ()",
							"async function ASTShell(...args)",
							"fn =>",
							"module =>",
							"module =>",
							"module =>",
							"module =>",
							" (a, p) =>",
							" (a, p) =>",
							" (a, p) =>",
							"get flags()",
							"v =>",
							"v =>",
							"d =>",
							"l =>",
							"async function Compile(file, ...args)",
							" function nameOrIdPred(name_or_id, pred = n => true)",
							" node =>",
							" node =>",
							" node =>",
							"select(name_or_id, pred = n => true)",
							"getByIdOrName(name_or_id, pred = n => true)",
							" n =>",
							"getType(name_or_id)",
							" n =>",
							"getFunction(name_or_id)",
							" n =>",
							"getVariable(name_or_id)",
							" n =>",
							"getLoc(node)",
							"() =>",
							"pathOf(needle, maxDepth = 10)",
							" n =>",
							"Pointer.prototype.chain = function(step, limit = Infinity)",
							".F = arg =>",
							".T = arg =>",
							" () =>",
							" node =>",
							"pushUnique = (arr, item) =>",
							" elem =>",
							" fr =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADvAwAAR3JhcGgKICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pCiAgb25VcGRhdGVOb2RlID0gbm9kZSA9PgogIG9uVXBkYXRlRWRnZSA9IGVkZ2UgPT4KICBvblJlbmRlckdyYXBoID0gZ3JhcGggPT4KICB1cGRhdGUgPSAoKSA9PgogICgpID0+CiAgYWRkTm9kZShuLCBjaGFyZ2UgPSB0aGlzLmNvbmZpZy5jaGFyZ2UsIG1hc3MgPSB0aGlzLmNvbmZpZy5tYXNzKQogICgpID0+CiAgZmluZE5vZGUodmFsdWUsIGtleSA9ICdsYWJlbCcpCiAgcmFuZG9taXplKCkKICBhZGRFZGdlKGUpCiAgYWRkKG8pCiAgcHVzaCgpCiAgcmVzZXROb2RlcygpCipnZXRDb25uZWN0aW9ucyhub2RlLCBleGNsdWRlID0gbnVsbCkKICBpc0xlYWZOb2RlKG5vZGUpCipicmFuY2hOb2RlcygpCiAgZ2V0IGJib3goKQogIGNoZWNrUmVkcmF3KCkKICBmaW5kQmlnZ2VzdEdhcChhbmdsZXMpCiAgZGlzdHJpYnV0ZUxlYWZOb2RlcyA9ICgpID0+CiAgYyA9PgogIGMgPT4KICBjID0+CiAgbCA9PgogIHVwZGF0ZUFsbCgpCiAgcm91bmRBbGwocHJlYykKICBzZXJpYWxpemUoKQogIG5vZGUgPT4KTm9kZQogIGVkZ2UgPT4KRWRnZQogIGRlc2VyaWFsaXplKG5vZGVzLCBlZGdlcywgY29uZmlnKQogIGdldCByZWN0KCkKICBnZXQgY2VudGVyKCkKICB0cmFuc2xhdGUoeCwgeSkKTm9kZQogIHN0YXRpYyBjbG9uZShvdGhlcikKICAoKSA9PgogIGNvbnN0cnVjdG9yKGxhYmVsLCBjaGFyZ2UgPSA2MCwgbWFzcyA9IDEwMCwgcHJuZykKICByZXNldCgpCiAgYXBwbHlBdHRyYWN0aXZlRm9yY2Uobiwgc2NhbGUgPSAwLjEpCiAgYXBwbHlSZXB1bHNpdmVGb3JjZShuLCBzY2FsZSA9IDEpCiAgdG9KUygpCiAga2V5ID0+CkVkZ2UKICBjb25zdHJ1Y3Rvcihub2RlX2EsIG5vZGVfYikKICBnZXQgeDEoKQogIGdldCB5MSgpCiAgZ2V0IHgyKCkKICBnZXQgeTIoKQogIHNldCB4MSh2KQogIHNldCB5MSh2KQogIHNldCB4Mih2KQogIHNldCB5Mih2KQogIHRvSlMoKQpOb2RlCk5vZGUKICB0b0lkeChncmFwaCkKICBkcmF3KGN0eCkAAAAAAAAAAOsLAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					47,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-shell.js",
						"symkeys":
						[
							[
								2567,
								2591
							],
							[
								2755,
								2769
							],
							[
								2850,
								2863
							],
							[
								2927,
								2936
							],
							[
								3015,
								3025
							],
							[
								3089,
								3099
							],
							[
								3143,
								3171
							],
							[
								3238,
								3271
							],
							[
								3304,
								3309
							],
							[
								3946,
								3994
							],
							[
								4112,
								4121
							],
							[
								4284,
								4288
							],
							[
								4396,
								4426
							],
							[
								4668,
								4676
							],
							[
								4743,
								4747
							],
							[
								4837,
								4844
							],
							[
								5146,
								5170
							],
							[
								5415,
								5420
							],
							[
								7155,
								7199
							],
							[
								7646,
								7672
							],
							[
								8374,
								8397
							],
							[
								8517,
								8539
							],
							[
								8790,
								8794
							],
							[
								9282,
								9286
							],
							[
								9903,
								9932
							],
							[
								9957,
								9961
							],
							[
								10037,
								10060
							],
							[
								10104,
								10110
							],
							[
								10138,
								10142
							],
							[
								10158,
								10195
							],
							[
								10217,
								10233
							],
							[
								10317,
								10345
							],
							[
								10399,
								10410
							],
							[
								10493,
								10501
							],
							[
								10597,
								10601
							],
							[
								10751,
								10755
							],
							[
								10853,
								10858
							],
							[
								10918,
								10929
							],
							[
								11001,
								11012
							],
							[
								11104,
								11109
							],
							[
								11164,
								11170
							],
							[
								11267,
								11275
							],
							[
								11450,
								11479
							],
							[
								11572,
								11625
							],
							[
								11778,
								11782
							],
							[
								11836,
								11840
							],
							[
								12121,
								12128
							],
							[
								12150,
								12156
							],
							[
								12185,
								12216
							],
							[
								12357,
								12381
							],
							[
								12507,
								12518
							],
							[
								12536,
								12552
							],
							[
								12711,
								12716
							],
							[
								12740,
								12744
							],
							[
								12797,
								12806
							],
							[
								12879,
								12884
							],
							[
								13022,
								13027
							],
							[
								13154,
								13165
							],
							[
								13254,
								13261
							],
							[
								13851,
								13867
							],
							[
								15733,
								15767
							],
							[
								16106,
								16120
							],
							[
								16215,
								16219
							],
							[
								16241,
								16255
							],
							[
								16286,
								16290
							],
							[
								17595,
								17611
							],
							[
								17661,
								17676
							],
							[
								17745,
								17764
							],
							[
								17787,
								17799
							],
							[
								17888,
								17892
							],
							[
								17991,
								17995
							],
							[
								18214,
								18220
							],
							[
								18310,
								18324
							],
							[
								18353,
								18371
							],
							[
								18513,
								18525
							],
							[
								18555,
								18583
							],
							[
								20599,
								20610
							],
							[
								21151,
								21195
							],
							[
								21321,
								21341
							],
							[
								22296,
								22305
							],
							[
								22621,
								22630
							],
							[
								22701,
								22714
							],
							[
								22801,
								22822
							],
							[
								23174,
								23190
							],
							[
								23433,
								23438
							],
							[
								23476,
								23491
							],
							[
								23652,
								23660
							],
							[
								23701,
								23709
							]
						],
						"symlist":
						[
							"findLastIndex(predicate)",
							"rotateRight(n)",
							"rotateLeft(n)",
							"at(index)",
							"get head()",
							"get tail()",
							"function Terminate(exitCode)",
							"function xml(strings,expressions)",
							" e =>",
							"async function importModule(moduleName, ...args)",
							"module =>",
							"e =>",
							"function UpdateMeasures(board)",
							"lines =>",
							"e =>",
							"line =>",
							"function AlignItem(item)",
							"tr =>",
							"function AlignAll(doc = globalThis.document)",
							"function fixValue(element)",
							"function fixValues(doc)",
							"function coordMap(doc)",
							"p =>",
							"t =>",
							"function GetPolygons(d = doc)",
							"e =>",
							"function FindPolygons()",
							"doc =>",
							"e =>",
							"function RemovePolygons(p = polygons)",
							"([doc, list]) =>",
							"function GetNames(doc, pred)",
							"pred = e =>",
							"sheet =>",
							"e =>",
							"e =>",
							" e =>",
							"([v, p]) =>",
							"([v, p]) =>",
							"() =>",
							"doc =>",
							"sheet =>",
							"function GetByName(doc, name)",
							"function CorrelateSchematicAndBoard(schematic, board)",
							"d =>",
							"n =>",
							"name =>",
							"doc =>",
							"function GetSheets(doc_or_proj)",
							"function SaveLibraries()",
							"([n, e]) =>",
							"(acc, [n, e]) =>",
							" e =>",
							"e =>",
							"(a, b) =>",
							"id =>",
							"id =>",
							"([n, e]) =>",
							"name =>",
							"(acc, [n, e]) =>",
							"async function testEagle(filename)",
							"([name, e]) =>",
							"e =>",
							"([name, i]) =>",
							"p =>",
							"(child, i, a) =>",
							"(child2, i2) =>",
							"([index, equal]) =>",
							"([index]) =>",
							"i =>",
							"i =>",
							"doc =>",
							"([file, e]) =>",
							"([file, xpath]) =>",
							" ([k, v]) =>",
							"async function main(...args)",
							"toNumber(n)",
							"load(filename, project = globalThis.project)",
							"newProject(filename)",
							"quit(arg)",
							"module =>",
							".exit = () =>",
							".debug = (...args) =>",
							".show = value =>",
							"() =>",
							"(item, i, a) =>",
							"entry =>",
							"entry =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADrCwAAICBkID0+CiAgZCA9PgpJbXBvcnRNb2R1bGUobW9kdWxlUGF0aCwgLi4uYXJncykKICBtb2R1bGUgPT4KICAoYWNjLCBpdGVtKSA9PgpDb21tYW5kTGluZSgpCiAgYyguLi5hcmdzKQogIGwoLi4uYXJncykKICAuc2hvdyA9IHZhbHVlID0+CiAgLnByaW50Tm9kZSA9IGFyZyA9PgogIC5kZWJ1ZyA9ICguLi5hcmdzKSA9PgooKSA9PgooaXRlbSwgaSwgYSkgPT4KICBlbnRyeSA9PgogIGVudHJ5ID0+CigpID0+CkluY2x1ZGVBbGwoZGlyLCBtYXhEZXB0aCA9IEluZmluaXR5LCBwcmVkID0gZW50cnkgPT4gL1wuW2NoXSQvLgooZW50cnkpKQpTZWxlY3RMb2NhdGlvbnMobm9kZSkKICBuID0+CiAgcHJvcCA9PgpMb2NhdGlvblN0cmluZyhsb2MpCiAgbm9kZSA9PgpTdHJ1Y3RzKG5vZGVzKQogIG5vZGUgPT4KICBmaWVsZCA9PgogIG5vZGUgPT4KKGZpZWxkLCBpKSA9PgpUYWJsZShsaXN0LCBwcmVkID0gKG4sIGwpID0+IHRydWUpCihuLCBpKSA9PgogIGUgPT4KICBrID0+CihbaSwgbCwgbl0pID0+CiAgcmV0dXJuVHlwZShuKQogIG51bUFyZ3MobikKUGFyYW1zKG4pCiAgcCA9PgogIGsgPT4KKFtpLCBsLCBuXSkgPT4KKGssIGopID0+CihhY2MsIG5hbWUpID0+CihuYW1lLCBpKSA9PgogIHBhZCA9IChjb2xzLCBwYWQsIHNlcCkgPT4KKGtleSwgaSkgPT4KKHMsIGNvbCkgPT4KKGFjYywgbikgPT4KKGFjYywgcm93KSA9PgpQcmludFJhbmdlKHJhbmdlKQpPdmVybGFwUmFuZ2UocjEsIHIyKQpHZXRSYW5nZSA9IHIgPT4KSW5SYW5nZSA9IChpLCByKSA9PgpUZXJtaW5hdGUoZXhpdENvZGUpCkdlbmVyYXRlSW5zcGVjdFN0cnVjdChkZWNsLCBpbmNsdWRlcykKICBuYW1lID0+Ckluc3BlY3RTdHJ1Y3QoZGVjbCwgaW5jbHVkZXMsIGNvbXBpbGVyID0gJ2NsYW5nJykKICBsaW5lID0+CiAgbGluZSA9PgooY29sLCBpKSA9PgooW2ZpZWxkLCBvZmZzZXQsIHNpemVdKSA9PgooYWNjLCBsaW5lKSA9PgogIHRvU3RyaW5nKHNlcCA9ICcgJykKICBsaW5lID0+ClJvdW5kVG8odmFsdWUsIGFsaWduKQpNYWtlU3RydWN0Q2xhc3MoZGVjbCwgZmlsZW5hbWUpCkdlbmVyYXRlU3RydWN0Q2xhc3MoZGVjbCwgZmZpUHJlZml4ID0gJycpCiAgbGluZSA9PgooW2ZpZWxkLCBtZW1iZXJdKSA9PgpHZW5lcmF0ZUdldFNldChuYW1lLCBvZmZzZXQsIHR5cGUsIGZmaVByZWZpeCkKICB0b0hleCA9IHYgPT4KICB0b0hleCA9IHYgPT4KQnl0ZUxlbmd0aDJUeXBlZEFycmF5KGJ5dGVMZW5ndGgsIHNpZ25lZCwgZmxvYXRpbmcpCkJ5dGVMZW5ndGgyVmFsdWUoYnl0ZUxlbmd0aCwgc2lnbmVkLCBmbG9hdGluZykKRkZJX0Z1bmN0aW9uCiAgY29uc3RydWN0b3Iobm9kZSwgcHJlZml4ID0gJycpCihbbmFtZSwgdHlwZV0sIGlkeCkgPT4KICBnZW5lcmF0ZURlZmluZShmcCwgbGliKQogIChuYW1lLCBsaWIpID0+CiAgZ2VuZXJhdGVEb2MoKQogIHB1c2ggPSAoLi4uYXJncykgPT4KICBmaWVsZCA9PgooZmllbGQsIGNvbCkgPT4KICBqcyA9IHR5cGUgPT4KICBnZW5lcmF0ZUNhbGwoKQooW25hbWUsIHR5cGVdKSA9PgogIGdlbmVyYXRlKGZwLCBsaWIsIGV4cCkKICBnZW5lcmF0ZUZ1bmN0aW9uKGZwLCBsaWIpCihbbmFtZSwgdHlwZV0pID0+CiAgcCA9PgogIHAgPT4KICBjb21waWxlRnVuY3Rpb24oZnAsIGxpYikKRmRSZWFkZXIoZmQsIGJ1ZmZlclNpemUgPSAxMDI0KQoocHVzaCwgc3RvcCkgPT4KQ29tbWFuZFJlYWQoYXJncykKICByZWFkZXIgPT4KUmVhZE91dHB1dChmZCkKTGlicmFyeUV4cG9ydHMoZmlsZSkKICBsaW5lID0+CiAgbGluZSA9PgogIGNvbHVtbiA9PgooYSwgYikgPT4KICBlbnRyeSA9PgpTYXZlTGlicmFyaWVzKCkKKGFjYywgW24sIGVdKSA9PgpQcm9jZXNzRmlsZShmaWxlLCBkZWJ1ZyA9IHRydWUpClBhcnNlRUNNQVNjcmlwdChmaWxlLCBwYXJhbXMgPSB7fSkKICAoZnIsIGkpID0+ClByaW50RUNNQVNjcmlwdChhc3QsIGNvbW1lbnRzLCBwcmludGVyID0gCih7IGluZGVudDogNCB9LCBjb21tZW50cykpClByaW50Q0FycmF5KHN0cmluZ3MpCk5hbWVzcGFjZXMobm9kZVBhdGgsIGFzdCA9ICQuZGF0YSkKICBwID0+CiAgbiA9PgpDb25zdGFudHMobm9kZSwgdCA9IChuYW1lLCB2YWx1ZSkgPT4gW25hbWUsICFpc05hTigrdmFsdWUpID8gK3ZhbHVlIDogdmFsdWVdKQpHZXRJbXBvcnRzKGFzdCA9ICQuZGF0YSkKICBuID0+CkdldElkZW50aWZpZXJzKG5vZGVzLCBrZXkgPSBudWxsKQogIChuLCBrKSA9PgpNZW1iZXJOYW1lcyhtZW1iZXJzLCBmbGFncyA9IDApCiAgbiA9PgogIHAgPT4KICBwID0+CiAgbmFtZSA9PgogIG4gPT4KKFtub2RlLCBwdHJdKSA9PgogIHAgPT4KICBuYW1lID0+CiAgbmFtZSA9PgpVbnNldExvYyhub2RlLCBwcmVkID0gKHYsIHApID0+IHRydWUpCiAgKHYsIGspID0+Ck1ha2VGRkkobm9kZSwgbGliLCBleHAsIGZwKQooKQpBU1RTaGVsbCguLi5hcmdzKQogIGZuID0+CiAgbW9kdWxlID0+CiAgbW9kdWxlID0+CiAgbW9kdWxlID0+CiAgbW9kdWxlID0+CiAgKGEsIHApID0+CiAgKGEsIHApID0+CiAgKGEsIHApID0+CiAgZ2V0IGZsYWdzKCkKICB2ID0+CiAgdiA9PgogIGQgPT4KICBsID0+CkNvbXBpbGUoZmlsZSwgLi4uYXJncykKICBuYW1lT3JJZFByZWQobmFtZV9vcl9pZCwgcHJlZCA9IG4gPT4gdHJ1ZSkKICBub2RlID0+CiAgbm9kZSA9PgogIG5vZGUgPT4KICBzZWxlY3QobmFtZV9vcl9pZCwgcHJlZCA9IG4gPT4gdHJ1ZSkKICBnZXRCeUlkT3JOYW1lKG5hbWVfb3JfaWQsIHByZWQgPSBuID0+IHRydWUpCiAgbiA9PgogIGdldFR5cGUobmFtZV9vcl9pZCkKICBuID0+CiAgZ2V0RnVuY3Rpb24obmFtZV9vcl9pZCkKICBuID0+CiAgZ2V0VmFyaWFibGUobmFtZV9vcl9pZCkKICBuID0+CiAgZ2V0TG9jKG5vZGUpCigpID0+CiAgcGF0aE9mKG5lZWRsZSwgbWF4RGVwdGggPSAxMCkKICBuID0+ClBvaW50ZXIucHJvdG90eXBlLmNoYWluID0gZnVuY3Rpb24oc3RlcCwgbGltaXQgPSBJbmZpbml0eSkKICAuRiA9IGFyZyA9PgogIC5UID0gYXJnID0+CiAgKCkgPT4KICBub2RlID0+CiAgcHVzaFVuaXF1ZSA9IChhcnIsIGl0ZW0pID0+CiAgZWxlbSA9PgogIGZyID0+AAAAAAAAAAAABQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					48,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/document.js",
						"symkeys":
						[
							[
								767,
								780
							],
							[
								910,
								924
							],
							[
								1030,
								1060
							],
							[
								1170,
								1193
							],
							[
								1257,
								1280
							],
							[
								1425,
								1450
							],
							[
								1628,
								1676
							],
							[
								2132,
								2152
							],
							[
								2400,
								2415
							],
							[
								2546,
								2561
							],
							[
								2646,
								2661
							],
							[
								3522,
								3534
							],
							[
								3733,
								3739
							],
							[
								3836,
								3845
							],
							[
								3900,
								3914
							],
							[
								4001,
								4014
							],
							[
								4141,
								4155
							],
							[
								4261,
								4274
							],
							[
								4326,
								4339
							],
							[
								5664,
								5699
							],
							[
								6154,
								6189
							],
							[
								6312,
								6336
							],
							[
								6383,
								6395
							],
							[
								6435,
								6456
							],
							[
								6501,
								6513
							],
							[
								6553,
								6566
							],
							[
								6700,
								6713
							],
							[
								6749,
								6771
							],
							[
								7342,
								7346
							],
							[
								7727,
								7733
							],
							[
								7789,
								7793
							],
							[
								7868,
								7872
							],
							[
								7902,
								7906
							],
							[
								7999,
								8024
							],
							[
								8306,
								8310
							],
							[
								8384,
								8390
							],
							[
								8544,
								8548
							],
							[
								8741,
								8746
							],
							[
								8860,
								8864
							],
							[
								8951,
								8955
							],
							[
								9119,
								9133
							],
							[
								9224,
								9240
							],
							[
								9361,
								9372
							],
							[
								9423,
								9442
							],
							[
								9503,
								9511
							],
							[
								9555,
								9577
							],
							[
								9638,
								9660
							],
							[
								9725,
								9737
							],
							[
								9794,
								9798
							],
							[
								9943,
								9954
							],
							[
								10266,
								10283
							]
						],
						"symlist":
						[
							"EagleDocument",
							"get typeName()",
							"static typeName(fileExtension)",
							"static baseOf(filename)",
							"static typeOf(filename)",
							"static open(filename, fs)",
							"constructor(xmlStr, project, filename, type, fs)",
							"(raw, owner, ref) =>",
							"(key, value) =>",
							"(key, value) =>",
							"(key, value) =>",
							"(r, g, b) =>",
							" () =>",
							"get raw()",
							"get filename()",
							"get dirname()",
							"get basename()",
							"get changes()",
							"cacheFields()",
							"saveTo(file, overwrite = false, fs)",
							"index(path, transform = arg => arg)",
							"*getAll(pred, transform)",
							"(v, p, o) =>",
							"find(pred, transform)",
							"(v, p, o) =>",
							"lookup(xpath)",
							" (o, p, v) =>",
							"getBounds(sheetNo = 0)",
							"v =>",
							"sig =>",
							"c =>",
							"e =>",
							"Rect",
							"getMeasures(options = {})",
							"e =>",
							"obj =>",
							"e =>",
							" v =>",
							"e =>",
							"l =>",
							"get measures()",
							"get dimensions()",
							"signalMap()",
							"([name, signal]) =>",
							"child =>",
							"([child, geometry]) =>",
							"([child, geometry]) =>",
							"getLayer(id)",
							"n =>",
							"function ()",
							"get mainElement()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAABQAAICBmaW5kTGFzdEluZGV4KHByZWRpY2F0ZSkKICByb3RhdGVSaWdodChuKQogIHJvdGF0ZUxlZnQobikKICBhdChpbmRleCkKICBnZXQgaGVhZCgpCiAgZ2V0IHRhaWwoKQpUZXJtaW5hdGUoZXhpdENvZGUpCiAgeG1sKHN0cmluZ3MsZXhwcmVzc2lvbnMpCiAgZSA9PgogIGltcG9ydE1vZHVsZShtb2R1bGVOYW1lLCAuLi5hcmdzKQogIG1vZHVsZSA9PgogIGUgPT4KVXBkYXRlTWVhc3VyZXMoYm9hcmQpCiAgbGluZXMgPT4KICBlID0+CiAgbGluZSA9PgpBbGlnbkl0ZW0oaXRlbSkKICB0ciA9PgpBbGlnbkFsbChkb2MgPSBnbG9iYWxUaGlzLmRvY3VtZW50KQogIGZpeFZhbHVlKGVsZW1lbnQpCiAgZml4VmFsdWVzKGRvYykKICBjb29yZE1hcChkb2MpCiAgcCA9PgogIHQgPT4KR2V0UG9seWdvbnMoZCA9IGRvYykKICBlID0+CkZpbmRQb2x5Z29ucygpCiAgZG9jID0+CiAgZSA9PgpSZW1vdmVQb2x5Z29ucyhwID0gcG9seWdvbnMpCihbZG9jLCBsaXN0XSkgPT4KR2V0TmFtZXMoZG9jLCBwcmVkKQogIHByZWQgPSBlID0+CiAgc2hlZXQgPT4KICBlID0+CiAgZSA9PgogIGUgPT4KKFt2LCBwXSkgPT4KKFt2LCBwXSkgPT4KKCkgPT4KICBkb2MgPT4KICBzaGVldCA9PgpHZXRCeU5hbWUoZG9jLCBuYW1lKQpDb3JyZWxhdGVTY2hlbWF0aWNBbmRCb2FyZChzY2hlbWF0aWMsIGJvYXJkKQogIGQgPT4KICBuID0+CiAgbmFtZSA9PgogIGRvYyA9PgpHZXRTaGVldHMoZG9jX29yX3Byb2opClNhdmVMaWJyYXJpZXMoKQooW24sIGVdKSA9PgooYWNjLCBbbiwgZV0pID0+CiAgZSA9PgogIGUgPT4KKGEsIGIpID0+CiAgaWQgPT4KICBpZCA9PgooW24sIGVdKSA9PgogIG5hbWUgPT4KKGFjYywgW24sIGVdKSA9PgogIHRlc3RFYWdsZShmaWxlbmFtZSkKKFtuYW1lLCBlXSkgPT4KICBlID0+CihbbmFtZSwgaV0pID0+CiAgcCA9PgooY2hpbGQsIGksIGEpID0+CihjaGlsZDIsIGkyKSA9PgooW2luZGV4LCBlcXVhbF0pID0+CihbaW5kZXhdKSA9PgogIGkgPT4KICBpID0+CiAgZG9jID0+CihbZmlsZSwgZV0pID0+CihbZmlsZSwgeHBhdGhdKSA9PgogIChbaywgdl0pID0+CiAgbWFpbiguLi5hcmdzKQogIHRvTnVtYmVyKG4pCiAgbG9hZChmaWxlbmFtZSwgcHJvamVjdCA9IGdsb2JhbFRoaXMucHJvamVjdCkKICBuZXdQcm9qZWN0KGZpbGVuYW1lKQogIHF1aXQoYXJnKQogIG1vZHVsZSA9PgogIC5leGl0ID0gKCkgPT4KICAuZGVidWcgPSAoLi4uYXJncykgPT4KICAuc2hvdyA9IHZhbHVlID0+CigpID0+CihpdGVtLCBpLCBhKSA9PgogIGVudHJ5ID0+CiAgZW50cnkgPT4AAAAAAAAAAGADAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					49,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/package.json",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABgAwAARWFnbGVEb2N1bWVudAogIGdldCB0eXBlTmFtZSgpCiAgc3RhdGljIHR5cGVOYW1lKGZpbGVFeHRlbnNpb24pCiAgc3RhdGljIGJhc2VPZihmaWxlbmFtZSkKICBzdGF0aWMgdHlwZU9mKGZpbGVuYW1lKQogIHN0YXRpYyBvcGVuKGZpbGVuYW1lLCBmcykKICBjb25zdHJ1Y3Rvcih4bWxTdHIsIHByb2plY3QsIGZpbGVuYW1lLCB0eXBlLCBmcykKKHJhdywgb3duZXIsIHJlZikgPT4KKGtleSwgdmFsdWUpID0+CihrZXksIHZhbHVlKSA9Pgooa2V5LCB2YWx1ZSkgPT4KKHIsIGcsIGIpID0+CiAgKCkgPT4KICBnZXQgcmF3KCkKICBnZXQgZmlsZW5hbWUoKQogIGdldCBkaXJuYW1lKCkKICBnZXQgYmFzZW5hbWUoKQogIGdldCBjaGFuZ2VzKCkKICBjYWNoZUZpZWxkcygpCiAgc2F2ZVRvKGZpbGUsIG92ZXJ3cml0ZSA9IGZhbHNlLCBmcykKICBpbmRleChwYXRoLCB0cmFuc2Zvcm0gPSBhcmcgPT4gYXJnKQoqZ2V0QWxsKHByZWQsIHRyYW5zZm9ybSkKKHYsIHAsIG8pID0+CiAgZmluZChwcmVkLCB0cmFuc2Zvcm0pCih2LCBwLCBvKSA9PgogIGxvb2t1cCh4cGF0aCkKICAobywgcCwgdikgPT4KICBnZXRCb3VuZHMoc2hlZXRObyA9IDApCiAgdiA9PgogIHNpZyA9PgogIGMgPT4KICBlID0+ClJlY3QKICBnZXRNZWFzdXJlcyhvcHRpb25zID0ge30pCiAgZSA9PgogIG9iaiA9PgogIGUgPT4KICB2ID0+CiAgZSA9PgogIGwgPT4KICBnZXQgbWVhc3VyZXMoKQogIGdldCBkaW1lbnNpb25zKCkKICBzaWduYWxNYXAoKQooW25hbWUsIHNpZ25hbF0pID0+CiAgY2hpbGQgPT4KKFtjaGlsZCwgZ2VvbWV0cnldKSA9PgooW2NoaWxkLCBnZW9tZXRyeV0pID0+CiAgZ2V0TGF5ZXIoaWQpCiAgbiA9PgooKQogIGdldCBtYWluRWxlbWVudCgpAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					50,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/xml/util.js",
						"symkeys":
						[
							[
								127,
								159
							],
							[
								229,
								240
							],
							[
								366,
								388
							],
							[
								536,
								547
							],
							[
								576,
								596
							],
							[
								666,
								714
							],
							[
								1032,
								1044
							],
							[
								1121,
								1127
							],
							[
								1282,
								1299
							],
							[
								1546,
								1577
							],
							[
								1636,
								1676
							],
							[
								1871,
								1877
							],
							[
								1946,
								1979
							],
							[
								2088,
								2097
							],
							[
								2120,
								2166
							],
							[
								2292,
								2305
							],
							[
								2460,
								2483
							],
							[
								2527,
								2543
							],
							[
								2601,
								2619
							],
							[
								2718,
								2743
							],
							[
								2859,
								2869
							],
							[
								3084,
								3093
							],
							[
								3154,
								3159
							],
							[
								3302,
								3311
							],
							[
								3385,
								3394
							]
						],
						"symlist":
						[
							"Object2Array = (xmlObj, flat) =>",
							"([k, v]) =>",
							" (acc, [k, v]) =>",
							"XMLIterator",
							"constructor(...args)",
							"static *iterate(node, f = null, path = [], root)",
							"XMLAttribute",
							"obj =>",
							"(acc, name, i) =>",
							"static getByName(name, element)",
							"static getOrCreate(name, element, value)",
							" () =>",
							"constructor(name, element, value)",
							"XMLObject",
							"constructor({ attributes, children, tagName })",
							"(acc, key) =>",
							"static toArray(...args)",
							"get attributes()",
							"getAttribute(name)",
							"setAttribute(name, value)",
							"toObject()",
							"XMLObject",
							" k =>",
							"XMLObject",
							"XMLObject"
						]
					},
					"AQAAAAAAAAAAAAAADwIAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					51,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/xml/parse.js",
						"symkeys":
						[
							[
								791,
								816
							],
							[
								1090,
								1095
							],
							[
								1114,
								1119
							],
							[
								1174,
								1184
							],
							[
								1210,
								1220
							],
							[
								1247,
								1256
							],
							[
								1298,
								1316
							],
							[
								1430,
								1446
							],
							[
								1492,
								1506
							],
							[
								1581,
								1595
							],
							[
								2054,
								2058
							],
							[
								2263,
								2267
							],
							[
								3414,
								3441
							],
							[
								3708,
								3713
							],
							[
								3732,
								3737
							],
							[
								3819,
								3837
							],
							[
								3951,
								3967
							],
							[
								4077,
								4082
							],
							[
								4123,
								4128
							],
							[
								4174,
								4186
							],
							[
								4283,
								4299
							],
							[
								4348,
								4353
							],
							[
								4387,
								4401
							],
							[
								4614,
								4628
							],
							[
								4712,
								4716
							],
							[
								5109,
								5113
							],
							[
								5917,
								5921
							],
							[
								6254,
								6258
							],
							[
								7011,
								7020
							]
						],
						"symlist":
						[
							"parse = function parse(s)",
							" i =>",
							" i =>",
							" (i, j) =>",
							" (i, j) =>",
							"(a, c) =>",
							"start = tagName =>",
							"end = tagName =>",
							"skip = pred =>",
							"skipws = () =>",
							"c =>",
							"c =>",
							"parse2 = function parse2(g)",
							" i =>",
							" i =>",
							"start = tagName =>",
							"end = tagName =>",
							" c =>",
							" c =>",
							"next = () =>",
							"is = (ch, cl) =>",
							" s =>",
							"skip = pred =>",
							"skipws = () =>",
							"c =>",
							"c =>",
							"c =>",
							"c =>",
							"module =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAPAgAAT2JqZWN0MkFycmF5ID0gKHhtbE9iaiwgZmxhdCkgPT4KKFtrLCB2XSkgPT4KICAoYWNjLCBbaywgdl0pID0+ClhNTEl0ZXJhdG9yCiAgY29uc3RydWN0b3IoLi4uYXJncykKICBzdGF0aWMgKml0ZXJhdGUobm9kZSwgZiA9IG51bGwsIHBhdGggPSBbXSwgcm9vdCkKWE1MQXR0cmlidXRlCiAgb2JqID0+CihhY2MsIG5hbWUsIGkpID0+CiAgc3RhdGljIGdldEJ5TmFtZShuYW1lLCBlbGVtZW50KQogIHN0YXRpYyBnZXRPckNyZWF0ZShuYW1lLCBlbGVtZW50LCB2YWx1ZSkKICAoKSA9PgogIGNvbnN0cnVjdG9yKG5hbWUsIGVsZW1lbnQsIHZhbHVlKQpYTUxPYmplY3QKICBjb25zdHJ1Y3Rvcih7IGF0dHJpYnV0ZXMsIGNoaWxkcmVuLCB0YWdOYW1lIH0pCihhY2MsIGtleSkgPT4KICBzdGF0aWMgdG9BcnJheSguLi5hcmdzKQogIGdldCBhdHRyaWJ1dGVzKCkKICBnZXRBdHRyaWJ1dGUobmFtZSkKICBzZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpCiAgdG9PYmplY3QoKQpYTUxPYmplY3QKICBrID0+ClhNTE9iamVjdApYTUxPYmplY3QAAAAAAAAAAHgBAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					52,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/grammars/xpath.g4",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB4AQAAICBwYXJzZSA9IGZ1bmN0aW9uIHBhcnNlKHMpCiAgaSA9PgogIGkgPT4KICAoaSwgaikgPT4KICAoaSwgaikgPT4KKGEsIGMpID0+CiAgc3RhcnQgPSB0YWdOYW1lID0+CiAgZW5kID0gdGFnTmFtZSA9PgogIHNraXAgPSBwcmVkID0+CiAgc2tpcHdzID0gKCkgPT4KICBjID0+CiAgYyA9PgogIHBhcnNlMiA9IGZ1bmN0aW9uIHBhcnNlMihnKQogIGkgPT4KICBpID0+CiAgc3RhcnQgPSB0YWdOYW1lID0+CiAgZW5kID0gdGFnTmFtZSA9PgogIGMgPT4KICBjID0+CiAgbmV4dCA9ICgpID0+CiAgaXMgPSAoY2gsIGNsKSA9PgogIHMgPT4KICBza2lwID0gcHJlZCA9PgogIHNraXB3cyA9ICgpID0+CiAgYyA9PgogIGMgPT4KICBjID0+CiAgYyA9PgogIG1vZHVsZSA9PgAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					53,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/test-parse.js",
						"symkeys":
						[
							[
								465,
								495
							],
							[
								693,
								721
							]
						],
						"symlist":
						[
							"function WriteFile(name, data)",
							"async function main(...args)"
						]
					},
					"AQAAAAAAAAAAAAAAJQAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					54,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/grammars/xpath.g4",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAlAAAAV3JpdGVGaWxlKG5hbWUsIGRhdGEpCiAgbWFpbiguLi5hcmdzKQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					55,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					56,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/test-parse.js",
						"symkeys":
						[
							[
								465,
								495
							],
							[
								693,
								721
							]
						],
						"symlist":
						[
							"function WriteFile(name, data)",
							"async function main(...args)"
						]
					},
					"AQAAAAAAAAAAAAAAJQAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					57,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/test-parse.js",
						"symkeys":
						[
							[
								448,
								478
							],
							[
								676,
								704
							]
						],
						"symlist":
						[
							"function WriteFile(name, data)",
							"async function main(...args)"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAAAlAAAAV3JpdGVGaWxlKG5hbWUsIGRhdGEpCiAgbWFpbiguLi5hcmdzKQAAAAAAAAAAJQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACUAAABXcml0ZUZpbGUobmFtZSwgZGF0YSkKICBtYWluKC4uLmFyZ3MpAAAAAAAAAAAlAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					58,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/grammars/xpath.g4",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAlAAAAV3JpdGVGaWxlKG5hbWUsIGRhdGEpCiAgbWFpbiguLi5hcmdzKQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					59,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/test-parse.js",
						"symkeys":
						[
							[
								448,
								478
							],
							[
								676,
								704
							]
						],
						"symlist":
						[
							"function WriteFile(name, data)",
							"async function main(...args)"
						]
					},
					"AQAAAAAAAAAAAAAAJQAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					60,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/grammars/xpath.g4",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAlAAAAV3JpdGVGaWxlKG5hbWUsIGRhdGEpCiAgbWFpbiguLi5hcmdzKQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					61,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/test-parse.js",
						"symkeys":
						[
							[
								448,
								478
							],
							[
								676,
								704
							]
						],
						"symlist":
						[
							"function WriteFile(name, data)",
							"async function main(...args)"
						]
					},
					"AQAAAAAAAAAAAAAAJQAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					62,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/grammars/xpath.g4",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAlAAAAV3JpdGVGaWxlKG5hbWUsIGRhdGEpCiAgbWFpbiguLi5hcmdzKQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					63,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/test-parse.js",
						"symkeys":
						[
							[
								448,
								478
							],
							[
								676,
								704
							]
						],
						"symlist":
						[
							"function WriteFile(name, data)",
							"async function main(...args)"
						]
					},
					"AQAAAAAAAAAAAAAAJQAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					64,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAlAAAAV3JpdGVGaWxlKG5hbWUsIGRhdGEpCiAgbWFpbiguLi5hcmdzKQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					65,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/parse/grammar.js",
						"symkeys":
						[
							[
								198,
								202
							],
							[
								290,
								296
							],
							[
								316,
								342
							],
							[
								575,
								582
							],
							[
								679,
								689
							],
							[
								1054,
								1065
							],
							[
								1158,
								1168
							],
							[
								1191,
								1197
							],
							[
								1784,
								1794
							],
							[
								2044,
								2048
							],
							[
								2256,
								2270
							],
							[
								2326,
								2349
							],
							[
								3337,
								3373
							],
							[
								3512,
								3520
							],
							[
								3588,
								3592
							],
							[
								3615,
								3622
							],
							[
								3876,
								3884
							],
							[
								3904,
								3934
							],
							[
								4063,
								4073
							],
							[
								4157,
								4161
							],
							[
								4228,
								4235
							],
							[
								4339,
								4360
							],
							[
								4876,
								4882
							],
							[
								5416,
								5422
							],
							[
								5530,
								5560
							],
							[
								5733,
								5760
							],
							[
								5866,
								5884
							],
							[
								6255,
								6280
							],
							[
								6508,
								6512
							],
							[
								6568,
								6589
							],
							[
								6936,
								6943
							],
							[
								6971,
								6984
							],
							[
								7389,
								7433
							],
							[
								8609,
								8613
							],
							[
								8937,
								8941
							],
							[
								9308,
								9318
							],
							[
								9579,
								9583
							],
							[
								9657,
								9661
							],
							[
								9686,
								9703
							],
							[
								9793,
								9800
							],
							[
								9869,
								9879
							],
							[
								9953,
								9964
							],
							[
								10113,
								10118
							],
							[
								10137,
								10163
							],
							[
								10406,
								10422
							],
							[
								10625,
								10639
							],
							[
								11215,
								11222
							],
							[
								11247,
								11269
							],
							[
								11312,
								11319
							],
							[
								11401,
								11411
							],
							[
								11449,
								11464
							],
							[
								11529,
								11536
							],
							[
								11596,
								11621
							],
							[
								11728,
								11764
							],
							[
								12007,
								12020
							],
							[
								12063,
								12081
							],
							[
								12147,
								12165
							],
							[
								12578,
								12612
							],
							[
								14531,
								14558
							],
							[
								14962,
								15002
							],
							[
								15089,
								15093
							],
							[
								15118,
								15124
							],
							[
								15421,
								15466
							],
							[
								15667,
								15686
							],
							[
								16067,
								16081
							],
							[
								16243,
								16254
							],
							[
								16764,
								16768
							],
							[
								16809,
								16816
							],
							[
								17066,
								17093
							],
							[
								17649,
								17653
							],
							[
								17709,
								17713
							],
							[
								17737,
								17741
							],
							[
								18489,
								18500
							]
						],
						"symlist":
						[
							"Rule",
							"Symbol",
							"constructor(str, id, rule)",
							"clone()",
							"toString()",
							"toCowbird()",
							"generate()",
							"sym =>",
							"toString()",
							"n =>",
							"combinations()",
							" (a, part, i) =>",
							"toCowbird(accu, combinations = true)",
							"match =>",
							"m =>",
							"rule =>",
							"Operator",
							"constructor(op, rule, ...args)",
							"toString()",
							"n =>",
							"clone()",
							"toCowbird(accu, name)",
							"arg =>",
							"str =>",
							"constructor(grammar, fragment)",
							"static from(array, grammar)",
							"parse(productions)",
							"toString(name, multiline)",
							"l =>",
							"toCowbird(accu, name)",
							"part =>",
							"match(parser)",
							"static generate(a, f = 'choice', sep = ', ')",
							"p =>",
							"p =>",
							"generate()",
							"Rule",
							"Self",
							"constructor(rule)",
							"clone()",
							"toString()",
							"toCowbird()",
							"Match",
							"constructor(rule, ...args)",
							"pred = (p, i) =>",
							"parse(symbols)",
							"Literal",
							"constructor(str, rule)",
							"clone()",
							"toString()",
							"toCowbird(accu)",
							"Grammar",
							"constructor(source, file)",
							"addRule(name, productions, fragment)",
							"getRule(name)",
							"parseParentheses()",
							"addMatches = () =>",
							"parsePatterns(endTok = [';', '|'])",
							" function isCharMatch(m)",
							" function toRegExp(a, invert = false)",
							"m =>",
							"tok =>",
							"parseRule(startTok = ':', endTok = ';', name)",
							"addPatterns = () =>",
							"resolveRules()",
							"parseLine()",
							"m =>",
							"parse()",
							"generate(dir = '../parse/')",
							"p =>",
							"p =>",
							"m =>",
							"toCowbird()"
						]
					},
					"AQAAAAAAAAAAAAAAtgQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					66,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/test-parse.js",
						"symkeys":
						[
							[
								448,
								478
							],
							[
								676,
								704
							]
						],
						"symlist":
						[
							"function WriteFile(name, data)",
							"async function main(...args)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC2BAAAUnVsZQpTeW1ib2wKICBjb25zdHJ1Y3RvcihzdHIsIGlkLCBydWxlKQogIGNsb25lKCkKICB0b1N0cmluZygpCiAgdG9Db3diaXJkKCkKICBnZW5lcmF0ZSgpCiAgc3ltID0+CiAgdG9TdHJpbmcoKQogIG4gPT4KICBjb21iaW5hdGlvbnMoKQogIChhLCBwYXJ0LCBpKSA9PgogIHRvQ293YmlyZChhY2N1LCBjb21iaW5hdGlvbnMgPSB0cnVlKQogIG1hdGNoID0+CiAgbSA9PgogIHJ1bGUgPT4KT3BlcmF0b3IKICBjb25zdHJ1Y3RvcihvcCwgcnVsZSwgLi4uYXJncykKICB0b1N0cmluZygpCiAgbiA9PgogIGNsb25lKCkKICB0b0Nvd2JpcmQoYWNjdSwgbmFtZSkKICBhcmcgPT4KICBzdHIgPT4KICBjb25zdHJ1Y3RvcihncmFtbWFyLCBmcmFnbWVudCkKICBzdGF0aWMgZnJvbShhcnJheSwgZ3JhbW1hcikKICBwYXJzZShwcm9kdWN0aW9ucykKICB0b1N0cmluZyhuYW1lLCBtdWx0aWxpbmUpCiAgbCA9PgogIHRvQ293YmlyZChhY2N1LCBuYW1lKQogIHBhcnQgPT4KICBtYXRjaChwYXJzZXIpCiAgc3RhdGljIGdlbmVyYXRlKGEsIGYgPSAnY2hvaWNlJywgc2VwID0gJywgJykKICBwID0+CiAgcCA9PgogIGdlbmVyYXRlKCkKUnVsZQpTZWxmCiAgY29uc3RydWN0b3IocnVsZSkKICBjbG9uZSgpCiAgdG9TdHJpbmcoKQogIHRvQ293YmlyZCgpCk1hdGNoCiAgY29uc3RydWN0b3IocnVsZSwgLi4uYXJncykKICBwcmVkID0gKHAsIGkpID0+CiAgcGFyc2Uoc3ltYm9scykKTGl0ZXJhbAogIGNvbnN0cnVjdG9yKHN0ciwgcnVsZSkKICBjbG9uZSgpCiAgdG9TdHJpbmcoKQogIHRvQ293YmlyZChhY2N1KQpHcmFtbWFyCiAgY29uc3RydWN0b3Ioc291cmNlLCBmaWxlKQogIGFkZFJ1bGUobmFtZSwgcHJvZHVjdGlvbnMsIGZyYWdtZW50KQogIGdldFJ1bGUobmFtZSkKICBwYXJzZVBhcmVudGhlc2VzKCkKICBhZGRNYXRjaGVzID0gKCkgPT4KICBwYXJzZVBhdHRlcm5zKGVuZFRvayA9IFsnOycsICd8J10pCiAgaXNDaGFyTWF0Y2gobSkKICB0b1JlZ0V4cChhLCBpbnZlcnQgPSBmYWxzZSkKICBtID0+CiAgdG9rID0+CiAgcGFyc2VSdWxlKHN0YXJ0VG9rID0gJzonLCBlbmRUb2sgPSAnOycsIG5hbWUpCiAgYWRkUGF0dGVybnMgPSAoKSA9PgogIHJlc29sdmVSdWxlcygpCiAgcGFyc2VMaW5lKCkKICBtID0+CiAgcGFyc2UoKQogIGdlbmVyYXRlKGRpciA9ICcuLi9wYXJzZS8nKQogIHAgPT4KICBwID0+CiAgbSA9PgogIHRvQ293YmlyZCgpAAAAAAAAAAAlAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					67,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/parse/grammar.js",
						"symkeys":
						[
							[
								198,
								202
							],
							[
								290,
								296
							],
							[
								316,
								342
							],
							[
								575,
								582
							],
							[
								679,
								689
							],
							[
								1054,
								1065
							],
							[
								1158,
								1168
							],
							[
								1191,
								1197
							],
							[
								1784,
								1794
							],
							[
								2044,
								2048
							],
							[
								2256,
								2270
							],
							[
								2326,
								2349
							],
							[
								3337,
								3373
							],
							[
								3512,
								3520
							],
							[
								3588,
								3592
							],
							[
								3615,
								3622
							],
							[
								3876,
								3884
							],
							[
								3904,
								3934
							],
							[
								4063,
								4073
							],
							[
								4157,
								4161
							],
							[
								4228,
								4235
							],
							[
								4339,
								4360
							],
							[
								4876,
								4882
							],
							[
								5416,
								5422
							],
							[
								5530,
								5560
							],
							[
								5733,
								5760
							],
							[
								5866,
								5884
							],
							[
								6255,
								6280
							],
							[
								6508,
								6512
							],
							[
								6568,
								6589
							],
							[
								6936,
								6943
							],
							[
								6971,
								6984
							],
							[
								7389,
								7433
							],
							[
								8609,
								8613
							],
							[
								8937,
								8941
							],
							[
								9308,
								9318
							],
							[
								9579,
								9583
							],
							[
								9657,
								9661
							],
							[
								9686,
								9703
							],
							[
								9793,
								9800
							],
							[
								9869,
								9879
							],
							[
								9953,
								9964
							],
							[
								10113,
								10118
							],
							[
								10137,
								10163
							],
							[
								10406,
								10422
							],
							[
								10625,
								10639
							],
							[
								11215,
								11222
							],
							[
								11247,
								11269
							],
							[
								11312,
								11319
							],
							[
								11401,
								11411
							],
							[
								11449,
								11464
							],
							[
								11529,
								11536
							],
							[
								11596,
								11621
							],
							[
								11728,
								11764
							],
							[
								12007,
								12020
							],
							[
								12063,
								12081
							],
							[
								12147,
								12165
							],
							[
								12578,
								12612
							],
							[
								14531,
								14558
							],
							[
								14962,
								15002
							],
							[
								15089,
								15093
							],
							[
								15118,
								15124
							],
							[
								15421,
								15466
							],
							[
								15667,
								15686
							],
							[
								16067,
								16081
							],
							[
								16243,
								16254
							],
							[
								16764,
								16768
							],
							[
								16809,
								16816
							],
							[
								17066,
								17093
							],
							[
								17649,
								17653
							],
							[
								17709,
								17713
							],
							[
								17737,
								17741
							],
							[
								18489,
								18500
							]
						],
						"symlist":
						[
							"Rule",
							"Symbol",
							"constructor(str, id, rule)",
							"clone()",
							"toString()",
							"toCowbird()",
							"generate()",
							"sym =>",
							"toString()",
							"n =>",
							"combinations()",
							" (a, part, i) =>",
							"toCowbird(accu, combinations = true)",
							"match =>",
							"m =>",
							"rule =>",
							"Operator",
							"constructor(op, rule, ...args)",
							"toString()",
							"n =>",
							"clone()",
							"toCowbird(accu, name)",
							"arg =>",
							"str =>",
							"constructor(grammar, fragment)",
							"static from(array, grammar)",
							"parse(productions)",
							"toString(name, multiline)",
							"l =>",
							"toCowbird(accu, name)",
							"part =>",
							"match(parser)",
							"static generate(a, f = 'choice', sep = ', ')",
							"p =>",
							"p =>",
							"generate()",
							"Rule",
							"Self",
							"constructor(rule)",
							"clone()",
							"toString()",
							"toCowbird()",
							"Match",
							"constructor(rule, ...args)",
							"pred = (p, i) =>",
							"parse(symbols)",
							"Literal",
							"constructor(str, rule)",
							"clone()",
							"toString()",
							"toCowbird(accu)",
							"Grammar",
							"constructor(source, file)",
							"addRule(name, productions, fragment)",
							"getRule(name)",
							"parseParentheses()",
							"addMatches = () =>",
							"parsePatterns(endTok = [';', '|'])",
							" function isCharMatch(m)",
							" function toRegExp(a, invert = false)",
							"m =>",
							"tok =>",
							"parseRule(startTok = ':', endTok = ';', name)",
							"addPatterns = () =>",
							"resolveRules()",
							"parseLine()",
							"m =>",
							"parse()",
							"generate(dir = '../parse/')",
							"p =>",
							"p =>",
							"m =>",
							"toCowbird()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAlAAAAV3JpdGVGaWxlKG5hbWUsIGRhdGEpCiAgbWFpbiguLi5hcmdzKQAAAAAAAAAAtgQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					72,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/grammars/xpath.g4",
						"symkeys":
						[
							[
								5024,
								5039
							],
							[
								5386,
								5396
							]
						],
						"symlist":
						[
							"NCNameStartChar",
							"NCNameChar"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC2BAAAUnVsZQpTeW1ib2wKICBjb25zdHJ1Y3RvcihzdHIsIGlkLCBydWxlKQogIGNsb25lKCkKICB0b1N0cmluZygpCiAgdG9Db3diaXJkKCkKICBnZW5lcmF0ZSgpCiAgc3ltID0+CiAgdG9TdHJpbmcoKQogIG4gPT4KICBjb21iaW5hdGlvbnMoKQogIChhLCBwYXJ0LCBpKSA9PgogIHRvQ293YmlyZChhY2N1LCBjb21iaW5hdGlvbnMgPSB0cnVlKQogIG1hdGNoID0+CiAgbSA9PgogIHJ1bGUgPT4KT3BlcmF0b3IKICBjb25zdHJ1Y3RvcihvcCwgcnVsZSwgLi4uYXJncykKICB0b1N0cmluZygpCiAgbiA9PgogIGNsb25lKCkKICB0b0Nvd2JpcmQoYWNjdSwgbmFtZSkKICBhcmcgPT4KICBzdHIgPT4KICBjb25zdHJ1Y3RvcihncmFtbWFyLCBmcmFnbWVudCkKICBzdGF0aWMgZnJvbShhcnJheSwgZ3JhbW1hcikKICBwYXJzZShwcm9kdWN0aW9ucykKICB0b1N0cmluZyhuYW1lLCBtdWx0aWxpbmUpCiAgbCA9PgogIHRvQ293YmlyZChhY2N1LCBuYW1lKQogIHBhcnQgPT4KICBtYXRjaChwYXJzZXIpCiAgc3RhdGljIGdlbmVyYXRlKGEsIGYgPSAnY2hvaWNlJywgc2VwID0gJywgJykKICBwID0+CiAgcCA9PgogIGdlbmVyYXRlKCkKUnVsZQpTZWxmCiAgY29uc3RydWN0b3IocnVsZSkKICBjbG9uZSgpCiAgdG9TdHJpbmcoKQogIHRvQ293YmlyZCgpCk1hdGNoCiAgY29uc3RydWN0b3IocnVsZSwgLi4uYXJncykKICBwcmVkID0gKHAsIGkpID0+CiAgcGFyc2Uoc3ltYm9scykKTGl0ZXJhbAogIGNvbnN0cnVjdG9yKHN0ciwgcnVsZSkKICBjbG9uZSgpCiAgdG9TdHJpbmcoKQogIHRvQ293YmlyZChhY2N1KQpHcmFtbWFyCiAgY29uc3RydWN0b3Ioc291cmNlLCBmaWxlKQogIGFkZFJ1bGUobmFtZSwgcHJvZHVjdGlvbnMsIGZyYWdtZW50KQogIGdldFJ1bGUobmFtZSkKICBwYXJzZVBhcmVudGhlc2VzKCkKICBhZGRNYXRjaGVzID0gKCkgPT4KICBwYXJzZVBhdHRlcm5zKGVuZFRvayA9IFsnOycsICd8J10pCiAgaXNDaGFyTWF0Y2gobSkKICB0b1JlZ0V4cChhLCBpbnZlcnQgPSBmYWxzZSkKICBtID0+CiAgdG9rID0+CiAgcGFyc2VSdWxlKHN0YXJ0VG9rID0gJzonLCBlbmRUb2sgPSAnOycsIG5hbWUpCiAgYWRkUGF0dGVybnMgPSAoKSA9PgogIHJlc29sdmVSdWxlcygpCiAgcGFyc2VMaW5lKCkKICBtID0+CiAgcGFyc2UoKQogIGdlbmVyYXRlKGRpciA9ICcuLi9wYXJzZS8nKQogIHAgPT4KICBwID0+CiAgbSA9PgogIHRvQ293YmlyZCgpAAAAAAAAAAAaAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcwQAAAAAAAB2BAAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/parse/grammar.js",
						"symkeys":
						[
							[
								198,
								202
							],
							[
								290,
								296
							],
							[
								316,
								342
							],
							[
								575,
								582
							],
							[
								679,
								689
							],
							[
								1054,
								1065
							],
							[
								1158,
								1168
							],
							[
								1191,
								1197
							],
							[
								1784,
								1794
							],
							[
								2044,
								2048
							],
							[
								2256,
								2270
							],
							[
								2326,
								2349
							],
							[
								3337,
								3373
							],
							[
								3512,
								3520
							],
							[
								3588,
								3592
							],
							[
								3615,
								3622
							],
							[
								3876,
								3884
							],
							[
								3904,
								3934
							],
							[
								4063,
								4073
							],
							[
								4157,
								4161
							],
							[
								4228,
								4235
							],
							[
								4339,
								4360
							],
							[
								4876,
								4882
							],
							[
								5416,
								5422
							],
							[
								5530,
								5560
							],
							[
								5733,
								5760
							],
							[
								5866,
								5884
							],
							[
								6255,
								6280
							],
							[
								6508,
								6512
							],
							[
								6568,
								6589
							],
							[
								6936,
								6943
							],
							[
								6971,
								6984
							],
							[
								7389,
								7433
							],
							[
								8609,
								8613
							],
							[
								8937,
								8941
							],
							[
								9308,
								9318
							],
							[
								9579,
								9583
							],
							[
								9657,
								9661
							],
							[
								9686,
								9703
							],
							[
								9793,
								9800
							],
							[
								9869,
								9879
							],
							[
								9953,
								9964
							],
							[
								10113,
								10118
							],
							[
								10137,
								10163
							],
							[
								10406,
								10422
							],
							[
								10625,
								10639
							],
							[
								11215,
								11222
							],
							[
								11247,
								11269
							],
							[
								11312,
								11319
							],
							[
								11401,
								11411
							],
							[
								11449,
								11464
							],
							[
								11529,
								11536
							],
							[
								11596,
								11621
							],
							[
								11728,
								11764
							],
							[
								12007,
								12020
							],
							[
								12063,
								12081
							],
							[
								12147,
								12165
							],
							[
								12578,
								12612
							],
							[
								14531,
								14558
							],
							[
								14962,
								15002
							],
							[
								15089,
								15093
							],
							[
								15118,
								15124
							],
							[
								15421,
								15466
							],
							[
								15667,
								15686
							],
							[
								16067,
								16081
							],
							[
								16243,
								16254
							],
							[
								16764,
								16768
							],
							[
								16809,
								16816
							],
							[
								17066,
								17093
							],
							[
								17649,
								17653
							],
							[
								17709,
								17713
							],
							[
								17737,
								17741
							],
							[
								18489,
								18500
							]
						],
						"symlist":
						[
							"Rule",
							"Symbol",
							"constructor(str, id, rule)",
							"clone()",
							"toString()",
							"toCowbird()",
							"generate()",
							"sym =>",
							"toString()",
							"n =>",
							"combinations()",
							" (a, part, i) =>",
							"toCowbird(accu, combinations = true)",
							"match =>",
							"m =>",
							"rule =>",
							"Operator",
							"constructor(op, rule, ...args)",
							"toString()",
							"n =>",
							"clone()",
							"toCowbird(accu, name)",
							"arg =>",
							"str =>",
							"constructor(grammar, fragment)",
							"static from(array, grammar)",
							"parse(productions)",
							"toString(name, multiline)",
							"l =>",
							"toCowbird(accu, name)",
							"part =>",
							"match(parser)",
							"static generate(a, f = 'choice', sep = ', ')",
							"p =>",
							"p =>",
							"generate()",
							"Rule",
							"Self",
							"constructor(rule)",
							"clone()",
							"toString()",
							"toCowbird()",
							"Match",
							"constructor(rule, ...args)",
							"pred = (p, i) =>",
							"parse(symbols)",
							"Literal",
							"constructor(str, rule)",
							"clone()",
							"toString()",
							"toCowbird(accu)",
							"Grammar",
							"constructor(source, file)",
							"addRule(name, productions, fragment)",
							"getRule(name)",
							"parseParentheses()",
							"addMatches = () =>",
							"parsePatterns(endTok = [';', '|'])",
							" function isCharMatch(m)",
							" function toRegExp(a, invert = false)",
							"m =>",
							"tok =>",
							"parseRule(startTok = ':', endTok = ';', name)",
							"addPatterns = () =>",
							"resolveRules()",
							"parseLine()",
							"m =>",
							"parse()",
							"generate(dir = '../parse/')",
							"p =>",
							"p =>",
							"m =>",
							"toCowbird()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAaAAAATkNOYW1lU3RhcnRDaGFyCk5DTmFtZUNoYXIAAAAAAAAAALYEAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					74,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/grammars/xpath.g4",
						"symkeys":
						[
							[
								5024,
								5039
							],
							[
								5386,
								5396
							]
						],
						"symlist":
						[
							"NCNameStartChar",
							"NCNameChar"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC2BAAAUnVsZQpTeW1ib2wKICBjb25zdHJ1Y3RvcihzdHIsIGlkLCBydWxlKQogIGNsb25lKCkKICB0b1N0cmluZygpCiAgdG9Db3diaXJkKCkKICBnZW5lcmF0ZSgpCiAgc3ltID0+CiAgdG9TdHJpbmcoKQogIG4gPT4KICBjb21iaW5hdGlvbnMoKQogIChhLCBwYXJ0LCBpKSA9PgogIHRvQ293YmlyZChhY2N1LCBjb21iaW5hdGlvbnMgPSB0cnVlKQogIG1hdGNoID0+CiAgbSA9PgogIHJ1bGUgPT4KT3BlcmF0b3IKICBjb25zdHJ1Y3RvcihvcCwgcnVsZSwgLi4uYXJncykKICB0b1N0cmluZygpCiAgbiA9PgogIGNsb25lKCkKICB0b0Nvd2JpcmQoYWNjdSwgbmFtZSkKICBhcmcgPT4KICBzdHIgPT4KICBjb25zdHJ1Y3RvcihncmFtbWFyLCBmcmFnbWVudCkKICBzdGF0aWMgZnJvbShhcnJheSwgZ3JhbW1hcikKICBwYXJzZShwcm9kdWN0aW9ucykKICB0b1N0cmluZyhuYW1lLCBtdWx0aWxpbmUpCiAgbCA9PgogIHRvQ293YmlyZChhY2N1LCBuYW1lKQogIHBhcnQgPT4KICBtYXRjaChwYXJzZXIpCiAgc3RhdGljIGdlbmVyYXRlKGEsIGYgPSAnY2hvaWNlJywgc2VwID0gJywgJykKICBwID0+CiAgcCA9PgogIGdlbmVyYXRlKCkKUnVsZQpTZWxmCiAgY29uc3RydWN0b3IocnVsZSkKICBjbG9uZSgpCiAgdG9TdHJpbmcoKQogIHRvQ293YmlyZCgpCk1hdGNoCiAgY29uc3RydWN0b3IocnVsZSwgLi4uYXJncykKICBwcmVkID0gKHAsIGkpID0+CiAgcGFyc2Uoc3ltYm9scykKTGl0ZXJhbAogIGNvbnN0cnVjdG9yKHN0ciwgcnVsZSkKICBjbG9uZSgpCiAgdG9TdHJpbmcoKQogIHRvQ293YmlyZChhY2N1KQpHcmFtbWFyCiAgY29uc3RydWN0b3Ioc291cmNlLCBmaWxlKQogIGFkZFJ1bGUobmFtZSwgcHJvZHVjdGlvbnMsIGZyYWdtZW50KQogIGdldFJ1bGUobmFtZSkKICBwYXJzZVBhcmVudGhlc2VzKCkKICBhZGRNYXRjaGVzID0gKCkgPT4KICBwYXJzZVBhdHRlcm5zKGVuZFRvayA9IFsnOycsICd8J10pCiAgaXNDaGFyTWF0Y2gobSkKICB0b1JlZ0V4cChhLCBpbnZlcnQgPSBmYWxzZSkKICBtID0+CiAgdG9rID0+CiAgcGFyc2VSdWxlKHN0YXJ0VG9rID0gJzonLCBlbmRUb2sgPSAnOycsIG5hbWUpCiAgYWRkUGF0dGVybnMgPSAoKSA9PgogIHJlc29sdmVSdWxlcygpCiAgcGFyc2VMaW5lKCkKICBtID0+CiAgcGFyc2UoKQogIGdlbmVyYXRlKGRpciA9ICcuLi9wYXJzZS8nKQogIHAgPT4KICBwID0+CiAgbSA9PgogIHRvQ293YmlyZCgpAAAAAAAAAAAaAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					75,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/parse/grammar.js",
						"symkeys":
						[
							[
								198,
								202
							],
							[
								290,
								296
							],
							[
								316,
								342
							],
							[
								575,
								582
							],
							[
								679,
								689
							],
							[
								1054,
								1065
							],
							[
								1158,
								1168
							],
							[
								1191,
								1197
							],
							[
								1784,
								1794
							],
							[
								2044,
								2048
							],
							[
								2256,
								2270
							],
							[
								2326,
								2349
							],
							[
								3337,
								3373
							],
							[
								3512,
								3520
							],
							[
								3588,
								3592
							],
							[
								3615,
								3622
							],
							[
								3876,
								3884
							],
							[
								3904,
								3934
							],
							[
								4063,
								4073
							],
							[
								4157,
								4161
							],
							[
								4228,
								4235
							],
							[
								4339,
								4360
							],
							[
								4876,
								4882
							],
							[
								5416,
								5422
							],
							[
								5530,
								5560
							],
							[
								5733,
								5760
							],
							[
								5866,
								5884
							],
							[
								6255,
								6280
							],
							[
								6508,
								6512
							],
							[
								6568,
								6589
							],
							[
								6936,
								6943
							],
							[
								6971,
								6984
							],
							[
								7389,
								7433
							],
							[
								8609,
								8613
							],
							[
								8937,
								8941
							],
							[
								9308,
								9318
							],
							[
								9579,
								9583
							],
							[
								9657,
								9661
							],
							[
								9686,
								9703
							],
							[
								9793,
								9800
							],
							[
								9869,
								9879
							],
							[
								9953,
								9964
							],
							[
								10113,
								10118
							],
							[
								10137,
								10163
							],
							[
								10406,
								10422
							],
							[
								10625,
								10639
							],
							[
								11215,
								11222
							],
							[
								11247,
								11269
							],
							[
								11312,
								11319
							],
							[
								11401,
								11411
							],
							[
								11449,
								11464
							],
							[
								11529,
								11536
							],
							[
								11596,
								11621
							],
							[
								11728,
								11764
							],
							[
								12007,
								12020
							],
							[
								12063,
								12081
							],
							[
								12147,
								12165
							],
							[
								12578,
								12612
							],
							[
								14531,
								14558
							],
							[
								14962,
								15002
							],
							[
								15089,
								15093
							],
							[
								15118,
								15124
							],
							[
								15421,
								15466
							],
							[
								15667,
								15686
							],
							[
								16067,
								16081
							],
							[
								16243,
								16254
							],
							[
								16764,
								16768
							],
							[
								16809,
								16816
							],
							[
								17066,
								17093
							],
							[
								17649,
								17653
							],
							[
								17709,
								17713
							],
							[
								17737,
								17741
							],
							[
								18489,
								18500
							]
						],
						"symlist":
						[
							"Rule",
							"Symbol",
							"constructor(str, id, rule)",
							"clone()",
							"toString()",
							"toCowbird()",
							"generate()",
							"sym =>",
							"toString()",
							"n =>",
							"combinations()",
							" (a, part, i) =>",
							"toCowbird(accu, combinations = true)",
							"match =>",
							"m =>",
							"rule =>",
							"Operator",
							"constructor(op, rule, ...args)",
							"toString()",
							"n =>",
							"clone()",
							"toCowbird(accu, name)",
							"arg =>",
							"str =>",
							"constructor(grammar, fragment)",
							"static from(array, grammar)",
							"parse(productions)",
							"toString(name, multiline)",
							"l =>",
							"toCowbird(accu, name)",
							"part =>",
							"match(parser)",
							"static generate(a, f = 'choice', sep = ', ')",
							"p =>",
							"p =>",
							"generate()",
							"Rule",
							"Self",
							"constructor(rule)",
							"clone()",
							"toString()",
							"toCowbird()",
							"Match",
							"constructor(rule, ...args)",
							"pred = (p, i) =>",
							"parse(symbols)",
							"Literal",
							"constructor(str, rule)",
							"clone()",
							"toString()",
							"toCowbird(accu)",
							"Grammar",
							"constructor(source, file)",
							"addRule(name, productions, fragment)",
							"getRule(name)",
							"parseParentheses()",
							"addMatches = () =>",
							"parsePatterns(endTok = [';', '|'])",
							" function isCharMatch(m)",
							" function toRegExp(a, invert = false)",
							"m =>",
							"tok =>",
							"parseRule(startTok = ':', endTok = ';', name)",
							"addPatterns = () =>",
							"resolveRules()",
							"parseLine()",
							"m =>",
							"parse()",
							"generate(dir = '../parse/')",
							"p =>",
							"p =>",
							"m =>",
							"toCowbird()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAaAAAATkNOYW1lU3RhcnRDaGFyCk5DTmFtZUNoYXIAAAAAAAAAALYEAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					76,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/grammars/xpath.g4",
						"symkeys":
						[
							[
								5024,
								5039
							],
							[
								5386,
								5396
							]
						],
						"symlist":
						[
							"NCNameStartChar",
							"NCNameChar"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC2BAAAUnVsZQpTeW1ib2wKICBjb25zdHJ1Y3RvcihzdHIsIGlkLCBydWxlKQogIGNsb25lKCkKICB0b1N0cmluZygpCiAgdG9Db3diaXJkKCkKICBnZW5lcmF0ZSgpCiAgc3ltID0+CiAgdG9TdHJpbmcoKQogIG4gPT4KICBjb21iaW5hdGlvbnMoKQogIChhLCBwYXJ0LCBpKSA9PgogIHRvQ293YmlyZChhY2N1LCBjb21iaW5hdGlvbnMgPSB0cnVlKQogIG1hdGNoID0+CiAgbSA9PgogIHJ1bGUgPT4KT3BlcmF0b3IKICBjb25zdHJ1Y3RvcihvcCwgcnVsZSwgLi4uYXJncykKICB0b1N0cmluZygpCiAgbiA9PgogIGNsb25lKCkKICB0b0Nvd2JpcmQoYWNjdSwgbmFtZSkKICBhcmcgPT4KICBzdHIgPT4KICBjb25zdHJ1Y3RvcihncmFtbWFyLCBmcmFnbWVudCkKICBzdGF0aWMgZnJvbShhcnJheSwgZ3JhbW1hcikKICBwYXJzZShwcm9kdWN0aW9ucykKICB0b1N0cmluZyhuYW1lLCBtdWx0aWxpbmUpCiAgbCA9PgogIHRvQ293YmlyZChhY2N1LCBuYW1lKQogIHBhcnQgPT4KICBtYXRjaChwYXJzZXIpCiAgc3RhdGljIGdlbmVyYXRlKGEsIGYgPSAnY2hvaWNlJywgc2VwID0gJywgJykKICBwID0+CiAgcCA9PgogIGdlbmVyYXRlKCkKUnVsZQpTZWxmCiAgY29uc3RydWN0b3IocnVsZSkKICBjbG9uZSgpCiAgdG9TdHJpbmcoKQogIHRvQ293YmlyZCgpCk1hdGNoCiAgY29uc3RydWN0b3IocnVsZSwgLi4uYXJncykKICBwcmVkID0gKHAsIGkpID0+CiAgcGFyc2Uoc3ltYm9scykKTGl0ZXJhbAogIGNvbnN0cnVjdG9yKHN0ciwgcnVsZSkKICBjbG9uZSgpCiAgdG9TdHJpbmcoKQogIHRvQ293YmlyZChhY2N1KQpHcmFtbWFyCiAgY29uc3RydWN0b3Ioc291cmNlLCBmaWxlKQogIGFkZFJ1bGUobmFtZSwgcHJvZHVjdGlvbnMsIGZyYWdtZW50KQogIGdldFJ1bGUobmFtZSkKICBwYXJzZVBhcmVudGhlc2VzKCkKICBhZGRNYXRjaGVzID0gKCkgPT4KICBwYXJzZVBhdHRlcm5zKGVuZFRvayA9IFsnOycsICd8J10pCiAgaXNDaGFyTWF0Y2gobSkKICB0b1JlZ0V4cChhLCBpbnZlcnQgPSBmYWxzZSkKICBtID0+CiAgdG9rID0+CiAgcGFyc2VSdWxlKHN0YXJ0VG9rID0gJzonLCBlbmRUb2sgPSAnOycsIG5hbWUpCiAgYWRkUGF0dGVybnMgPSAoKSA9PgogIHJlc29sdmVSdWxlcygpCiAgcGFyc2VMaW5lKCkKICBtID0+CiAgcGFyc2UoKQogIGdlbmVyYXRlKGRpciA9ICcuLi9wYXJzZS8nKQogIHAgPT4KICBwID0+CiAgbSA9PgogIHRvQ293YmlyZCgpAAAAAAAAAAAaAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					77,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/parse/grammar.js",
						"symkeys":
						[
							[
								198,
								202
							],
							[
								290,
								296
							],
							[
								316,
								342
							],
							[
								575,
								582
							],
							[
								679,
								689
							],
							[
								1054,
								1065
							],
							[
								1158,
								1168
							],
							[
								1191,
								1197
							],
							[
								1784,
								1794
							],
							[
								2044,
								2048
							],
							[
								2256,
								2270
							],
							[
								2326,
								2349
							],
							[
								3337,
								3373
							],
							[
								3512,
								3520
							],
							[
								3588,
								3592
							],
							[
								3615,
								3622
							],
							[
								3876,
								3884
							],
							[
								3904,
								3934
							],
							[
								4063,
								4073
							],
							[
								4157,
								4161
							],
							[
								4228,
								4235
							],
							[
								4339,
								4360
							],
							[
								4876,
								4882
							],
							[
								5416,
								5422
							],
							[
								5530,
								5560
							],
							[
								5733,
								5760
							],
							[
								5866,
								5884
							],
							[
								6255,
								6280
							],
							[
								6508,
								6512
							],
							[
								6568,
								6589
							],
							[
								6936,
								6943
							],
							[
								6971,
								6984
							],
							[
								7389,
								7433
							],
							[
								8609,
								8613
							],
							[
								8937,
								8941
							],
							[
								9308,
								9318
							],
							[
								9579,
								9583
							],
							[
								9657,
								9661
							],
							[
								9686,
								9703
							],
							[
								9793,
								9800
							],
							[
								9869,
								9879
							],
							[
								9953,
								9964
							],
							[
								10113,
								10118
							],
							[
								10137,
								10163
							],
							[
								10406,
								10422
							],
							[
								10625,
								10639
							],
							[
								11215,
								11222
							],
							[
								11247,
								11269
							],
							[
								11312,
								11319
							],
							[
								11401,
								11411
							],
							[
								11449,
								11464
							],
							[
								11529,
								11536
							],
							[
								11596,
								11621
							],
							[
								11728,
								11764
							],
							[
								12007,
								12020
							],
							[
								12063,
								12081
							],
							[
								12147,
								12165
							],
							[
								12578,
								12612
							],
							[
								14531,
								14558
							],
							[
								14962,
								15002
							],
							[
								15089,
								15093
							],
							[
								15118,
								15124
							],
							[
								15421,
								15466
							],
							[
								15667,
								15686
							],
							[
								16067,
								16081
							],
							[
								16243,
								16254
							],
							[
								16764,
								16768
							],
							[
								16809,
								16816
							],
							[
								17066,
								17093
							],
							[
								17649,
								17653
							],
							[
								17709,
								17713
							],
							[
								17737,
								17741
							],
							[
								18489,
								18500
							]
						],
						"symlist":
						[
							"Rule",
							"Symbol",
							"constructor(str, id, rule)",
							"clone()",
							"toString()",
							"toCowbird()",
							"generate()",
							"sym =>",
							"toString()",
							"n =>",
							"combinations()",
							" (a, part, i) =>",
							"toCowbird(accu, combinations = true)",
							"match =>",
							"m =>",
							"rule =>",
							"Operator",
							"constructor(op, rule, ...args)",
							"toString()",
							"n =>",
							"clone()",
							"toCowbird(accu, name)",
							"arg =>",
							"str =>",
							"constructor(grammar, fragment)",
							"static from(array, grammar)",
							"parse(productions)",
							"toString(name, multiline)",
							"l =>",
							"toCowbird(accu, name)",
							"part =>",
							"match(parser)",
							"static generate(a, f = 'choice', sep = ', ')",
							"p =>",
							"p =>",
							"generate()",
							"Rule",
							"Self",
							"constructor(rule)",
							"clone()",
							"toString()",
							"toCowbird()",
							"Match",
							"constructor(rule, ...args)",
							"pred = (p, i) =>",
							"parse(symbols)",
							"Literal",
							"constructor(str, rule)",
							"clone()",
							"toString()",
							"toCowbird(accu)",
							"Grammar",
							"constructor(source, file)",
							"addRule(name, productions, fragment)",
							"getRule(name)",
							"parseParentheses()",
							"addMatches = () =>",
							"parsePatterns(endTok = [';', '|'])",
							" function isCharMatch(m)",
							" function toRegExp(a, invert = false)",
							"m =>",
							"tok =>",
							"parseRule(startTok = ':', endTok = ';', name)",
							"addPatterns = () =>",
							"resolveRules()",
							"parseLine()",
							"m =>",
							"parse()",
							"generate(dir = '../parse/')",
							"p =>",
							"p =>",
							"m =>",
							"toCowbird()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAaAAAATkNOYW1lU3RhcnRDaGFyCk5DTmFtZUNoYXIAAAAAAAAAALYEAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					78,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/parse/grammar.js",
						"symkeys":
						[
							[
								198,
								202
							],
							[
								290,
								296
							],
							[
								316,
								342
							],
							[
								575,
								582
							],
							[
								679,
								689
							],
							[
								1054,
								1065
							],
							[
								1158,
								1168
							],
							[
								1191,
								1197
							],
							[
								1784,
								1794
							],
							[
								2044,
								2048
							],
							[
								2256,
								2270
							],
							[
								2326,
								2349
							],
							[
								3337,
								3373
							],
							[
								3512,
								3520
							],
							[
								3588,
								3592
							],
							[
								3615,
								3622
							],
							[
								3876,
								3884
							],
							[
								3904,
								3934
							],
							[
								4063,
								4073
							],
							[
								4157,
								4161
							],
							[
								4228,
								4235
							],
							[
								4339,
								4360
							],
							[
								4876,
								4882
							],
							[
								5416,
								5422
							],
							[
								5530,
								5560
							],
							[
								5733,
								5760
							],
							[
								5866,
								5884
							],
							[
								6255,
								6280
							],
							[
								6508,
								6512
							],
							[
								6568,
								6589
							],
							[
								6936,
								6943
							],
							[
								6971,
								6984
							],
							[
								7389,
								7433
							],
							[
								8609,
								8613
							],
							[
								8937,
								8941
							],
							[
								9308,
								9318
							],
							[
								9579,
								9583
							],
							[
								9657,
								9661
							],
							[
								9686,
								9703
							],
							[
								9793,
								9800
							],
							[
								9869,
								9879
							],
							[
								9953,
								9964
							],
							[
								10113,
								10118
							],
							[
								10137,
								10163
							],
							[
								10406,
								10422
							],
							[
								10625,
								10639
							],
							[
								11215,
								11222
							],
							[
								11247,
								11269
							],
							[
								11312,
								11319
							],
							[
								11401,
								11411
							],
							[
								11449,
								11464
							],
							[
								11529,
								11536
							],
							[
								11596,
								11621
							],
							[
								11728,
								11764
							],
							[
								12007,
								12020
							],
							[
								12063,
								12081
							],
							[
								12147,
								12165
							],
							[
								12578,
								12612
							],
							[
								14531,
								14558
							],
							[
								14962,
								15002
							],
							[
								15089,
								15093
							],
							[
								15118,
								15124
							],
							[
								15421,
								15466
							],
							[
								15667,
								15686
							],
							[
								16067,
								16081
							],
							[
								16243,
								16254
							],
							[
								16797,
								16801
							],
							[
								16842,
								16849
							],
							[
								17099,
								17126
							],
							[
								17682,
								17686
							],
							[
								17742,
								17746
							],
							[
								17770,
								17774
							],
							[
								18522,
								18533
							]
						],
						"symlist":
						[
							"Rule",
							"Symbol",
							"constructor(str, id, rule)",
							"clone()",
							"toString()",
							"toCowbird()",
							"generate()",
							"sym =>",
							"toString()",
							"n =>",
							"combinations()",
							" (a, part, i) =>",
							"toCowbird(accu, combinations = true)",
							"match =>",
							"m =>",
							"rule =>",
							"Operator",
							"constructor(op, rule, ...args)",
							"toString()",
							"n =>",
							"clone()",
							"toCowbird(accu, name)",
							"arg =>",
							"str =>",
							"constructor(grammar, fragment)",
							"static from(array, grammar)",
							"parse(productions)",
							"toString(name, multiline)",
							"l =>",
							"toCowbird(accu, name)",
							"part =>",
							"match(parser)",
							"static generate(a, f = 'choice', sep = ', ')",
							"p =>",
							"p =>",
							"generate()",
							"Rule",
							"Self",
							"constructor(rule)",
							"clone()",
							"toString()",
							"toCowbird()",
							"Match",
							"constructor(rule, ...args)",
							"pred = (p, i) =>",
							"parse(symbols)",
							"Literal",
							"constructor(str, rule)",
							"clone()",
							"toString()",
							"toCowbird(accu)",
							"Grammar",
							"constructor(source, file)",
							"addRule(name, productions, fragment)",
							"getRule(name)",
							"parseParentheses()",
							"addMatches = () =>",
							"parsePatterns(endTok = [';', '|'])",
							" function isCharMatch(m)",
							" function toRegExp(a, invert = false)",
							"m =>",
							"tok =>",
							"parseRule(startTok = ':', endTok = ';', name)",
							"addPatterns = () =>",
							"resolveRules()",
							"parseLine()",
							"m =>",
							"parse()",
							"generate(dir = '../parse/')",
							"p =>",
							"p =>",
							"m =>",
							"toCowbird()"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAAC2BAAAUnVsZQpTeW1ib2wKICBjb25zdHJ1Y3RvcihzdHIsIGlkLCBydWxlKQogIGNsb25lKCkKICB0b1N0cmluZygpCiAgdG9Db3diaXJkKCkKICBnZW5lcmF0ZSgpCiAgc3ltID0+CiAgdG9TdHJpbmcoKQogIG4gPT4KICBjb21iaW5hdGlvbnMoKQogIChhLCBwYXJ0LCBpKSA9PgogIHRvQ293YmlyZChhY2N1LCBjb21iaW5hdGlvbnMgPSB0cnVlKQogIG1hdGNoID0+CiAgbSA9PgogIHJ1bGUgPT4KT3BlcmF0b3IKICBjb25zdHJ1Y3RvcihvcCwgcnVsZSwgLi4uYXJncykKICB0b1N0cmluZygpCiAgbiA9PgogIGNsb25lKCkKICB0b0Nvd2JpcmQoYWNjdSwgbmFtZSkKICBhcmcgPT4KICBzdHIgPT4KICBjb25zdHJ1Y3RvcihncmFtbWFyLCBmcmFnbWVudCkKICBzdGF0aWMgZnJvbShhcnJheSwgZ3JhbW1hcikKICBwYXJzZShwcm9kdWN0aW9ucykKICB0b1N0cmluZyhuYW1lLCBtdWx0aWxpbmUpCiAgbCA9PgogIHRvQ293YmlyZChhY2N1LCBuYW1lKQogIHBhcnQgPT4KICBtYXRjaChwYXJzZXIpCiAgc3RhdGljIGdlbmVyYXRlKGEsIGYgPSAnY2hvaWNlJywgc2VwID0gJywgJykKICBwID0+CiAgcCA9PgogIGdlbmVyYXRlKCkKUnVsZQpTZWxmCiAgY29uc3RydWN0b3IocnVsZSkKICBjbG9uZSgpCiAgdG9TdHJpbmcoKQogIHRvQ293YmlyZCgpCk1hdGNoCiAgY29uc3RydWN0b3IocnVsZSwgLi4uYXJncykKICBwcmVkID0gKHAsIGkpID0+CiAgcGFyc2Uoc3ltYm9scykKTGl0ZXJhbAogIGNvbnN0cnVjdG9yKHN0ciwgcnVsZSkKICBjbG9uZSgpCiAgdG9TdHJpbmcoKQogIHRvQ293YmlyZChhY2N1KQpHcmFtbWFyCiAgY29uc3RydWN0b3Ioc291cmNlLCBmaWxlKQogIGFkZFJ1bGUobmFtZSwgcHJvZHVjdGlvbnMsIGZyYWdtZW50KQogIGdldFJ1bGUobmFtZSkKICBwYXJzZVBhcmVudGhlc2VzKCkKICBhZGRNYXRjaGVzID0gKCkgPT4KICBwYXJzZVBhdHRlcm5zKGVuZFRvayA9IFsnOycsICd8J10pCiAgaXNDaGFyTWF0Y2gobSkKICB0b1JlZ0V4cChhLCBpbnZlcnQgPSBmYWxzZSkKICBtID0+CiAgdG9rID0+CiAgcGFyc2VSdWxlKHN0YXJ0VG9rID0gJzonLCBlbmRUb2sgPSAnOycsIG5hbWUpCiAgYWRkUGF0dGVybnMgPSAoKSA9PgogIHJlc29sdmVSdWxlcygpCiAgcGFyc2VMaW5lKCkKICBtID0+CiAgcGFyc2UoKQogIGdlbmVyYXRlKGRpciA9ICcuLi9wYXJzZS8nKQogIHAgPT4KICBwID0+CiAgbSA9PgogIHRvQ293YmlyZCgpAAAAAAAAAAC2BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtgQAAFJ1bGUKU3ltYm9sCiAgY29uc3RydWN0b3Ioc3RyLCBpZCwgcnVsZSkKICBjbG9uZSgpCiAgdG9TdHJpbmcoKQogIHRvQ293YmlyZCgpCiAgZ2VuZXJhdGUoKQogIHN5bSA9PgogIHRvU3RyaW5nKCkKICBuID0+CiAgY29tYmluYXRpb25zKCkKICAoYSwgcGFydCwgaSkgPT4KICB0b0Nvd2JpcmQoYWNjdSwgY29tYmluYXRpb25zID0gdHJ1ZSkKICBtYXRjaCA9PgogIG0gPT4KICBydWxlID0+Ck9wZXJhdG9yCiAgY29uc3RydWN0b3Iob3AsIHJ1bGUsIC4uLmFyZ3MpCiAgdG9TdHJpbmcoKQogIG4gPT4KICBjbG9uZSgpCiAgdG9Db3diaXJkKGFjY3UsIG5hbWUpCiAgYXJnID0+CiAgc3RyID0+CiAgY29uc3RydWN0b3IoZ3JhbW1hciwgZnJhZ21lbnQpCiAgc3RhdGljIGZyb20oYXJyYXksIGdyYW1tYXIpCiAgcGFyc2UocHJvZHVjdGlvbnMpCiAgdG9TdHJpbmcobmFtZSwgbXVsdGlsaW5lKQogIGwgPT4KICB0b0Nvd2JpcmQoYWNjdSwgbmFtZSkKICBwYXJ0ID0+CiAgbWF0Y2gocGFyc2VyKQogIHN0YXRpYyBnZW5lcmF0ZShhLCBmID0gJ2Nob2ljZScsIHNlcCA9ICcsICcpCiAgcCA9PgogIHAgPT4KICBnZW5lcmF0ZSgpClJ1bGUKU2VsZgogIGNvbnN0cnVjdG9yKHJ1bGUpCiAgY2xvbmUoKQogIHRvU3RyaW5nKCkKICB0b0Nvd2JpcmQoKQpNYXRjaAogIGNvbnN0cnVjdG9yKHJ1bGUsIC4uLmFyZ3MpCiAgcHJlZCA9IChwLCBpKSA9PgogIHBhcnNlKHN5bWJvbHMpCkxpdGVyYWwKICBjb25zdHJ1Y3RvcihzdHIsIHJ1bGUpCiAgY2xvbmUoKQogIHRvU3RyaW5nKCkKICB0b0Nvd2JpcmQoYWNjdSkKR3JhbW1hcgogIGNvbnN0cnVjdG9yKHNvdXJjZSwgZmlsZSkKICBhZGRSdWxlKG5hbWUsIHByb2R1Y3Rpb25zLCBmcmFnbWVudCkKICBnZXRSdWxlKG5hbWUpCiAgcGFyc2VQYXJlbnRoZXNlcygpCiAgYWRkTWF0Y2hlcyA9ICgpID0+CiAgcGFyc2VQYXR0ZXJucyhlbmRUb2sgPSBbJzsnLCAnfCddKQogIGlzQ2hhck1hdGNoKG0pCiAgdG9SZWdFeHAoYSwgaW52ZXJ0ID0gZmFsc2UpCiAgbSA9PgogIHRvayA9PgogIHBhcnNlUnVsZShzdGFydFRvayA9ICc6JywgZW5kVG9rID0gJzsnLCBuYW1lKQogIGFkZFBhdHRlcm5zID0gKCkgPT4KICByZXNvbHZlUnVsZXMoKQogIHBhcnNlTGluZSgpCiAgbSA9PgogIHBhcnNlKCkKICBnZW5lcmF0ZShkaXIgPSAnLi4vcGFyc2UvJykKICBwID0+CiAgcCA9PgogIG0gPT4KICB0b0Nvd2JpcmQoKQAAAAAAAAAAtgQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					83,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/parse/grammar.js",
						"symkeys":
						[
							[
								198,
								202
							],
							[
								290,
								296
							],
							[
								316,
								342
							],
							[
								575,
								582
							],
							[
								679,
								689
							],
							[
								1054,
								1065
							],
							[
								1158,
								1168
							],
							[
								1191,
								1197
							],
							[
								1784,
								1794
							],
							[
								2044,
								2048
							],
							[
								2256,
								2270
							],
							[
								2326,
								2349
							],
							[
								3337,
								3373
							],
							[
								3512,
								3520
							],
							[
								3588,
								3592
							],
							[
								3615,
								3622
							],
							[
								3876,
								3884
							],
							[
								3904,
								3934
							],
							[
								4063,
								4073
							],
							[
								4157,
								4161
							],
							[
								4228,
								4235
							],
							[
								4339,
								4360
							],
							[
								4876,
								4882
							],
							[
								5416,
								5422
							],
							[
								5530,
								5560
							],
							[
								5733,
								5760
							],
							[
								5866,
								5884
							],
							[
								6255,
								6280
							],
							[
								6508,
								6512
							],
							[
								6568,
								6589
							],
							[
								6936,
								6943
							],
							[
								6971,
								6984
							],
							[
								7389,
								7433
							],
							[
								8609,
								8613
							],
							[
								8937,
								8941
							],
							[
								9308,
								9318
							],
							[
								9579,
								9583
							],
							[
								9657,
								9661
							],
							[
								9686,
								9703
							],
							[
								9793,
								9800
							],
							[
								9869,
								9879
							],
							[
								9953,
								9964
							],
							[
								10113,
								10118
							],
							[
								10137,
								10163
							],
							[
								10406,
								10422
							],
							[
								10625,
								10639
							],
							[
								11215,
								11222
							],
							[
								11247,
								11269
							],
							[
								11312,
								11319
							],
							[
								11401,
								11411
							],
							[
								11449,
								11464
							],
							[
								11529,
								11536
							],
							[
								11596,
								11621
							],
							[
								11728,
								11764
							],
							[
								12064,
								12077
							],
							[
								12120,
								12138
							],
							[
								12204,
								12222
							],
							[
								12635,
								12669
							],
							[
								14588,
								14615
							],
							[
								15019,
								15059
							],
							[
								15146,
								15150
							],
							[
								15175,
								15181
							],
							[
								15478,
								15523
							],
							[
								15724,
								15743
							],
							[
								16124,
								16138
							],
							[
								16300,
								16311
							],
							[
								16854,
								16858
							],
							[
								16899,
								16906
							],
							[
								17156,
								17183
							],
							[
								17739,
								17743
							],
							[
								17799,
								17803
							],
							[
								17827,
								17831
							],
							[
								18579,
								18590
							]
						],
						"symlist":
						[
							"Rule",
							"Symbol",
							"constructor(str, id, rule)",
							"clone()",
							"toString()",
							"toCowbird()",
							"generate()",
							"sym =>",
							"toString()",
							"n =>",
							"combinations()",
							" (a, part, i) =>",
							"toCowbird(accu, combinations = true)",
							"match =>",
							"m =>",
							"rule =>",
							"Operator",
							"constructor(op, rule, ...args)",
							"toString()",
							"n =>",
							"clone()",
							"toCowbird(accu, name)",
							"arg =>",
							"str =>",
							"constructor(grammar, fragment)",
							"static from(array, grammar)",
							"parse(productions)",
							"toString(name, multiline)",
							"l =>",
							"toCowbird(accu, name)",
							"part =>",
							"match(parser)",
							"static generate(a, f = 'choice', sep = ', ')",
							"p =>",
							"p =>",
							"generate()",
							"Rule",
							"Self",
							"constructor(rule)",
							"clone()",
							"toString()",
							"toCowbird()",
							"Match",
							"constructor(rule, ...args)",
							"pred = (p, i) =>",
							"parse(symbols)",
							"Literal",
							"constructor(str, rule)",
							"clone()",
							"toString()",
							"toCowbird(accu)",
							"Grammar",
							"constructor(source, file)",
							"addRule(name, productions, fragment)",
							"getRule(name)",
							"parseParentheses()",
							"addMatches = () =>",
							"parsePatterns(endTok = [';', '|'])",
							" function isCharMatch(m)",
							" function toRegExp(a, invert = false)",
							"m =>",
							"tok =>",
							"parseRule(startTok = ':', endTok = ';', name)",
							"addPatterns = () =>",
							"resolveRules()",
							"parseLine()",
							"m =>",
							"parse()",
							"generate(dir = '../parse/')",
							"p =>",
							"p =>",
							"m =>",
							"toCowbird()"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAAC2BAAAUnVsZQpTeW1ib2wKICBjb25zdHJ1Y3RvcihzdHIsIGlkLCBydWxlKQogIGNsb25lKCkKICB0b1N0cmluZygpCiAgdG9Db3diaXJkKCkKICBnZW5lcmF0ZSgpCiAgc3ltID0+CiAgdG9TdHJpbmcoKQogIG4gPT4KICBjb21iaW5hdGlvbnMoKQogIChhLCBwYXJ0LCBpKSA9PgogIHRvQ293YmlyZChhY2N1LCBjb21iaW5hdGlvbnMgPSB0cnVlKQogIG1hdGNoID0+CiAgbSA9PgogIHJ1bGUgPT4KT3BlcmF0b3IKICBjb25zdHJ1Y3RvcihvcCwgcnVsZSwgLi4uYXJncykKICB0b1N0cmluZygpCiAgbiA9PgogIGNsb25lKCkKICB0b0Nvd2JpcmQoYWNjdSwgbmFtZSkKICBhcmcgPT4KICBzdHIgPT4KICBjb25zdHJ1Y3RvcihncmFtbWFyLCBmcmFnbWVudCkKICBzdGF0aWMgZnJvbShhcnJheSwgZ3JhbW1hcikKICBwYXJzZShwcm9kdWN0aW9ucykKICB0b1N0cmluZyhuYW1lLCBtdWx0aWxpbmUpCiAgbCA9PgogIHRvQ293YmlyZChhY2N1LCBuYW1lKQogIHBhcnQgPT4KICBtYXRjaChwYXJzZXIpCiAgc3RhdGljIGdlbmVyYXRlKGEsIGYgPSAnY2hvaWNlJywgc2VwID0gJywgJykKICBwID0+CiAgcCA9PgogIGdlbmVyYXRlKCkKUnVsZQpTZWxmCiAgY29uc3RydWN0b3IocnVsZSkKICBjbG9uZSgpCiAgdG9TdHJpbmcoKQogIHRvQ293YmlyZCgpCk1hdGNoCiAgY29uc3RydWN0b3IocnVsZSwgLi4uYXJncykKICBwcmVkID0gKHAsIGkpID0+CiAgcGFyc2Uoc3ltYm9scykKTGl0ZXJhbAogIGNvbnN0cnVjdG9yKHN0ciwgcnVsZSkKICBjbG9uZSgpCiAgdG9TdHJpbmcoKQogIHRvQ293YmlyZChhY2N1KQpHcmFtbWFyCiAgY29uc3RydWN0b3Ioc291cmNlLCBmaWxlKQogIGFkZFJ1bGUobmFtZSwgcHJvZHVjdGlvbnMsIGZyYWdtZW50KQogIGdldFJ1bGUobmFtZSkKICBwYXJzZVBhcmVudGhlc2VzKCkKICBhZGRNYXRjaGVzID0gKCkgPT4KICBwYXJzZVBhdHRlcm5zKGVuZFRvayA9IFsnOycsICd8J10pCiAgaXNDaGFyTWF0Y2gobSkKICB0b1JlZ0V4cChhLCBpbnZlcnQgPSBmYWxzZSkKICBtID0+CiAgdG9rID0+CiAgcGFyc2VSdWxlKHN0YXJ0VG9rID0gJzonLCBlbmRUb2sgPSAnOycsIG5hbWUpCiAgYWRkUGF0dGVybnMgPSAoKSA9PgogIHJlc29sdmVSdWxlcygpCiAgcGFyc2VMaW5lKCkKICBtID0+CiAgcGFyc2UoKQogIGdlbmVyYXRlKGRpciA9ICcuLi9wYXJzZS8nKQogIHAgPT4KICBwID0+CiAgbSA9PgogIHRvQ293YmlyZCgpAAAAAAAAAAC2BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtgQAAFJ1bGUKU3ltYm9sCiAgY29uc3RydWN0b3Ioc3RyLCBpZCwgcnVsZSkKICBjbG9uZSgpCiAgdG9TdHJpbmcoKQogIHRvQ293YmlyZCgpCiAgZ2VuZXJhdGUoKQogIHN5bSA9PgogIHRvU3RyaW5nKCkKICBuID0+CiAgY29tYmluYXRpb25zKCkKICAoYSwgcGFydCwgaSkgPT4KICB0b0Nvd2JpcmQoYWNjdSwgY29tYmluYXRpb25zID0gdHJ1ZSkKICBtYXRjaCA9PgogIG0gPT4KICBydWxlID0+Ck9wZXJhdG9yCiAgY29uc3RydWN0b3Iob3AsIHJ1bGUsIC4uLmFyZ3MpCiAgdG9TdHJpbmcoKQogIG4gPT4KICBjbG9uZSgpCiAgdG9Db3diaXJkKGFjY3UsIG5hbWUpCiAgYXJnID0+CiAgc3RyID0+CiAgY29uc3RydWN0b3IoZ3JhbW1hciwgZnJhZ21lbnQpCiAgc3RhdGljIGZyb20oYXJyYXksIGdyYW1tYXIpCiAgcGFyc2UocHJvZHVjdGlvbnMpCiAgdG9TdHJpbmcobmFtZSwgbXVsdGlsaW5lKQogIGwgPT4KICB0b0Nvd2JpcmQoYWNjdSwgbmFtZSkKICBwYXJ0ID0+CiAgbWF0Y2gocGFyc2VyKQogIHN0YXRpYyBnZW5lcmF0ZShhLCBmID0gJ2Nob2ljZScsIHNlcCA9ICcsICcpCiAgcCA9PgogIHAgPT4KICBnZW5lcmF0ZSgpClJ1bGUKU2VsZgogIGNvbnN0cnVjdG9yKHJ1bGUpCiAgY2xvbmUoKQogIHRvU3RyaW5nKCkKICB0b0Nvd2JpcmQoKQpNYXRjaAogIGNvbnN0cnVjdG9yKHJ1bGUsIC4uLmFyZ3MpCiAgcHJlZCA9IChwLCBpKSA9PgogIHBhcnNlKHN5bWJvbHMpCkxpdGVyYWwKICBjb25zdHJ1Y3RvcihzdHIsIHJ1bGUpCiAgY2xvbmUoKQogIHRvU3RyaW5nKCkKICB0b0Nvd2JpcmQoYWNjdSkKR3JhbW1hcgogIGNvbnN0cnVjdG9yKHNvdXJjZSwgZmlsZSkKICBhZGRSdWxlKG5hbWUsIHByb2R1Y3Rpb25zLCBmcmFnbWVudCkKICBnZXRSdWxlKG5hbWUpCiAgcGFyc2VQYXJlbnRoZXNlcygpCiAgYWRkTWF0Y2hlcyA9ICgpID0+CiAgcGFyc2VQYXR0ZXJucyhlbmRUb2sgPSBbJzsnLCAnfCddKQogIGlzQ2hhck1hdGNoKG0pCiAgdG9SZWdFeHAoYSwgaW52ZXJ0ID0gZmFsc2UpCiAgbSA9PgogIHRvayA9PgogIHBhcnNlUnVsZShzdGFydFRvayA9ICc6JywgZW5kVG9rID0gJzsnLCBuYW1lKQogIGFkZFBhdHRlcm5zID0gKCkgPT4KICByZXNvbHZlUnVsZXMoKQogIHBhcnNlTGluZSgpCiAgbSA9PgogIHBhcnNlKCkKICBnZW5lcmF0ZShkaXIgPSAnLi4vcGFyc2UvJykKICBwID0+CiAgcCA9PgogIG0gPT4KICB0b0Nvd2JpcmQoKQAAAAAAAAAAtgQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIQMAAAAAAAAsAwAAAAAAAAAAAAAAAPC/"
				],
				[
					84,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/parse/grammar.js",
						"symkeys":
						[
							[
								198,
								202
							],
							[
								290,
								296
							],
							[
								316,
								342
							],
							[
								575,
								582
							],
							[
								679,
								689
							],
							[
								1054,
								1065
							],
							[
								1158,
								1168
							],
							[
								1191,
								1197
							],
							[
								1784,
								1794
							],
							[
								2044,
								2048
							],
							[
								2256,
								2270
							],
							[
								2326,
								2349
							],
							[
								3337,
								3373
							],
							[
								3512,
								3520
							],
							[
								3588,
								3592
							],
							[
								3615,
								3622
							],
							[
								3876,
								3884
							],
							[
								3904,
								3934
							],
							[
								4063,
								4073
							],
							[
								4157,
								4161
							],
							[
								4228,
								4235
							],
							[
								4339,
								4360
							],
							[
								4876,
								4882
							],
							[
								5416,
								5422
							],
							[
								5530,
								5560
							],
							[
								5733,
								5760
							],
							[
								5866,
								5884
							],
							[
								6255,
								6280
							],
							[
								6508,
								6512
							],
							[
								6568,
								6589
							],
							[
								6936,
								6943
							],
							[
								6971,
								6984
							],
							[
								7389,
								7433
							],
							[
								8609,
								8613
							],
							[
								8937,
								8941
							],
							[
								9308,
								9318
							],
							[
								9579,
								9583
							],
							[
								9657,
								9661
							],
							[
								9686,
								9703
							],
							[
								9793,
								9800
							],
							[
								9869,
								9879
							],
							[
								9953,
								9964
							],
							[
								10113,
								10118
							],
							[
								10137,
								10163
							],
							[
								10406,
								10422
							],
							[
								10625,
								10639
							],
							[
								11215,
								11222
							],
							[
								11247,
								11269
							],
							[
								11312,
								11319
							],
							[
								11401,
								11411
							],
							[
								11449,
								11464
							],
							[
								11529,
								11536
							],
							[
								11596,
								11621
							],
							[
								11728,
								11764
							],
							[
								12064,
								12077
							],
							[
								12120,
								12138
							],
							[
								12204,
								12222
							],
							[
								12635,
								12669
							],
							[
								14588,
								14615
							],
							[
								15019,
								15059
							],
							[
								15146,
								15150
							],
							[
								15175,
								15181
							],
							[
								15478,
								15523
							],
							[
								15724,
								15743
							],
							[
								16124,
								16138
							],
							[
								16300,
								16311
							],
							[
								16854,
								16858
							],
							[
								16899,
								16906
							],
							[
								17156,
								17183
							],
							[
								17739,
								17743
							],
							[
								17799,
								17803
							],
							[
								17827,
								17831
							],
							[
								18579,
								18590
							]
						],
						"symlist":
						[
							"Rule",
							"Symbol",
							"constructor(str, id, rule)",
							"clone()",
							"toString()",
							"toCowbird()",
							"generate()",
							"sym =>",
							"toString()",
							"n =>",
							"combinations()",
							" (a, part, i) =>",
							"toCowbird(accu, combinations = true)",
							"match =>",
							"m =>",
							"rule =>",
							"Operator",
							"constructor(op, rule, ...args)",
							"toString()",
							"n =>",
							"clone()",
							"toCowbird(accu, name)",
							"arg =>",
							"str =>",
							"constructor(grammar, fragment)",
							"static from(array, grammar)",
							"parse(productions)",
							"toString(name, multiline)",
							"l =>",
							"toCowbird(accu, name)",
							"part =>",
							"match(parser)",
							"static generate(a, f = 'choice', sep = ', ')",
							"p =>",
							"p =>",
							"generate()",
							"Rule",
							"Self",
							"constructor(rule)",
							"clone()",
							"toString()",
							"toCowbird()",
							"Match",
							"constructor(rule, ...args)",
							"pred = (p, i) =>",
							"parse(symbols)",
							"Literal",
							"constructor(str, rule)",
							"clone()",
							"toString()",
							"toCowbird(accu)",
							"Grammar",
							"constructor(source, file)",
							"addRule(name, productions, fragment)",
							"getRule(name)",
							"parseParentheses()",
							"addMatches = () =>",
							"parsePatterns(endTok = [';', '|'])",
							" function isCharMatch(m)",
							" function toRegExp(a, invert = false)",
							"m =>",
							"tok =>",
							"parseRule(startTok = ':', endTok = ';', name)",
							"addPatterns = () =>",
							"resolveRules()",
							"parseLine()",
							"m =>",
							"parse()",
							"generate(dir = '../parse/')",
							"p =>",
							"p =>",
							"m =>",
							"toCowbird()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC2BAAAUnVsZQpTeW1ib2wKICBjb25zdHJ1Y3RvcihzdHIsIGlkLCBydWxlKQogIGNsb25lKCkKICB0b1N0cmluZygpCiAgdG9Db3diaXJkKCkKICBnZW5lcmF0ZSgpCiAgc3ltID0+CiAgdG9TdHJpbmcoKQogIG4gPT4KICBjb21iaW5hdGlvbnMoKQogIChhLCBwYXJ0LCBpKSA9PgogIHRvQ293YmlyZChhY2N1LCBjb21iaW5hdGlvbnMgPSB0cnVlKQogIG1hdGNoID0+CiAgbSA9PgogIHJ1bGUgPT4KT3BlcmF0b3IKICBjb25zdHJ1Y3RvcihvcCwgcnVsZSwgLi4uYXJncykKICB0b1N0cmluZygpCiAgbiA9PgogIGNsb25lKCkKICB0b0Nvd2JpcmQoYWNjdSwgbmFtZSkKICBhcmcgPT4KICBzdHIgPT4KICBjb25zdHJ1Y3RvcihncmFtbWFyLCBmcmFnbWVudCkKICBzdGF0aWMgZnJvbShhcnJheSwgZ3JhbW1hcikKICBwYXJzZShwcm9kdWN0aW9ucykKICB0b1N0cmluZyhuYW1lLCBtdWx0aWxpbmUpCiAgbCA9PgogIHRvQ293YmlyZChhY2N1LCBuYW1lKQogIHBhcnQgPT4KICBtYXRjaChwYXJzZXIpCiAgc3RhdGljIGdlbmVyYXRlKGEsIGYgPSAnY2hvaWNlJywgc2VwID0gJywgJykKICBwID0+CiAgcCA9PgogIGdlbmVyYXRlKCkKUnVsZQpTZWxmCiAgY29uc3RydWN0b3IocnVsZSkKICBjbG9uZSgpCiAgdG9TdHJpbmcoKQogIHRvQ293YmlyZCgpCk1hdGNoCiAgY29uc3RydWN0b3IocnVsZSwgLi4uYXJncykKICBwcmVkID0gKHAsIGkpID0+CiAgcGFyc2Uoc3ltYm9scykKTGl0ZXJhbAogIGNvbnN0cnVjdG9yKHN0ciwgcnVsZSkKICBjbG9uZSgpCiAgdG9TdHJpbmcoKQogIHRvQ293YmlyZChhY2N1KQpHcmFtbWFyCiAgY29uc3RydWN0b3Ioc291cmNlLCBmaWxlKQogIGFkZFJ1bGUobmFtZSwgcHJvZHVjdGlvbnMsIGZyYWdtZW50KQogIGdldFJ1bGUobmFtZSkKICBwYXJzZVBhcmVudGhlc2VzKCkKICBhZGRNYXRjaGVzID0gKCkgPT4KICBwYXJzZVBhdHRlcm5zKGVuZFRvayA9IFsnOycsICd8J10pCiAgaXNDaGFyTWF0Y2gobSkKICB0b1JlZ0V4cChhLCBpbnZlcnQgPSBmYWxzZSkKICBtID0+CiAgdG9rID0+CiAgcGFyc2VSdWxlKHN0YXJ0VG9rID0gJzonLCBlbmRUb2sgPSAnOycsIG5hbWUpCiAgYWRkUGF0dGVybnMgPSAoKSA9PgogIHJlc29sdmVSdWxlcygpCiAgcGFyc2VMaW5lKCkKICBtID0+CiAgcGFyc2UoKQogIGdlbmVyYXRlKGRpciA9ICcuLi9wYXJzZS8nKQogIHAgPT4KICBwID0+CiAgbSA9PgogIHRvQ293YmlyZCgpAAAAAAAAAAC2BAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					85,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC2BAAAUnVsZQpTeW1ib2wKICBjb25zdHJ1Y3RvcihzdHIsIGlkLCBydWxlKQogIGNsb25lKCkKICB0b1N0cmluZygpCiAgdG9Db3diaXJkKCkKICBnZW5lcmF0ZSgpCiAgc3ltID0+CiAgdG9TdHJpbmcoKQogIG4gPT4KICBjb21iaW5hdGlvbnMoKQogIChhLCBwYXJ0LCBpKSA9PgogIHRvQ293YmlyZChhY2N1LCBjb21iaW5hdGlvbnMgPSB0cnVlKQogIG1hdGNoID0+CiAgbSA9PgogIHJ1bGUgPT4KT3BlcmF0b3IKICBjb25zdHJ1Y3RvcihvcCwgcnVsZSwgLi4uYXJncykKICB0b1N0cmluZygpCiAgbiA9PgogIGNsb25lKCkKICB0b0Nvd2JpcmQoYWNjdSwgbmFtZSkKICBhcmcgPT4KICBzdHIgPT4KICBjb25zdHJ1Y3RvcihncmFtbWFyLCBmcmFnbWVudCkKICBzdGF0aWMgZnJvbShhcnJheSwgZ3JhbW1hcikKICBwYXJzZShwcm9kdWN0aW9ucykKICB0b1N0cmluZyhuYW1lLCBtdWx0aWxpbmUpCiAgbCA9PgogIHRvQ293YmlyZChhY2N1LCBuYW1lKQogIHBhcnQgPT4KICBtYXRjaChwYXJzZXIpCiAgc3RhdGljIGdlbmVyYXRlKGEsIGYgPSAnY2hvaWNlJywgc2VwID0gJywgJykKICBwID0+CiAgcCA9PgogIGdlbmVyYXRlKCkKUnVsZQpTZWxmCiAgY29uc3RydWN0b3IocnVsZSkKICBjbG9uZSgpCiAgdG9TdHJpbmcoKQogIHRvQ293YmlyZCgpCk1hdGNoCiAgY29uc3RydWN0b3IocnVsZSwgLi4uYXJncykKICBwcmVkID0gKHAsIGkpID0+CiAgcGFyc2Uoc3ltYm9scykKTGl0ZXJhbAogIGNvbnN0cnVjdG9yKHN0ciwgcnVsZSkKICBjbG9uZSgpCiAgdG9TdHJpbmcoKQogIHRvQ293YmlyZChhY2N1KQpHcmFtbWFyCiAgY29uc3RydWN0b3Ioc291cmNlLCBmaWxlKQogIGFkZFJ1bGUobmFtZSwgcHJvZHVjdGlvbnMsIGZyYWdtZW50KQogIGdldFJ1bGUobmFtZSkKICBwYXJzZVBhcmVudGhlc2VzKCkKICBhZGRNYXRjaGVzID0gKCkgPT4KICBwYXJzZVBhdHRlcm5zKGVuZFRvayA9IFsnOycsICd8J10pCiAgaXNDaGFyTWF0Y2gobSkKICB0b1JlZ0V4cChhLCBpbnZlcnQgPSBmYWxzZSkKICBtID0+CiAgdG9rID0+CiAgcGFyc2VSdWxlKHN0YXJ0VG9rID0gJzonLCBlbmRUb2sgPSAnOycsIG5hbWUpCiAgYWRkUGF0dGVybnMgPSAoKSA9PgogIHJlc29sdmVSdWxlcygpCiAgcGFyc2VMaW5lKCkKICBtID0+CiAgcGFyc2UoKQogIGdlbmVyYXRlKGRpciA9ICcuLi9wYXJzZS8nKQogIHAgPT4KICBwID0+CiAgbSA9PgogIHRvQ293YmlyZCgpAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					86,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/package.json",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					87,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					88,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/package.json",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					89,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/parse/grammar.js",
						"symkeys":
						[
							[
								198,
								202
							],
							[
								290,
								296
							],
							[
								316,
								342
							],
							[
								575,
								582
							],
							[
								679,
								689
							],
							[
								1054,
								1065
							],
							[
								1158,
								1168
							],
							[
								1191,
								1197
							],
							[
								1784,
								1794
							],
							[
								2044,
								2048
							],
							[
								2256,
								2270
							],
							[
								2326,
								2349
							],
							[
								3337,
								3373
							],
							[
								3512,
								3520
							],
							[
								3588,
								3592
							],
							[
								3615,
								3622
							],
							[
								3876,
								3884
							],
							[
								3904,
								3934
							],
							[
								4063,
								4073
							],
							[
								4157,
								4161
							],
							[
								4228,
								4235
							],
							[
								4339,
								4360
							],
							[
								4876,
								4882
							],
							[
								5416,
								5422
							],
							[
								5530,
								5560
							],
							[
								5733,
								5760
							],
							[
								5866,
								5884
							],
							[
								6255,
								6280
							],
							[
								6508,
								6512
							],
							[
								6568,
								6589
							],
							[
								6936,
								6943
							],
							[
								6971,
								6984
							],
							[
								7389,
								7433
							],
							[
								8609,
								8613
							],
							[
								8937,
								8941
							],
							[
								9308,
								9318
							],
							[
								9579,
								9583
							],
							[
								9657,
								9661
							],
							[
								9686,
								9703
							],
							[
								9793,
								9800
							],
							[
								9869,
								9879
							],
							[
								9953,
								9964
							],
							[
								10113,
								10118
							],
							[
								10137,
								10163
							],
							[
								10406,
								10422
							],
							[
								10625,
								10639
							],
							[
								11215,
								11222
							],
							[
								11247,
								11269
							],
							[
								11312,
								11319
							],
							[
								11401,
								11411
							],
							[
								11449,
								11464
							],
							[
								11529,
								11536
							],
							[
								11596,
								11621
							],
							[
								11728,
								11764
							],
							[
								12064,
								12077
							],
							[
								12120,
								12138
							],
							[
								12204,
								12222
							],
							[
								12635,
								12669
							],
							[
								14588,
								14615
							],
							[
								15019,
								15059
							],
							[
								15146,
								15150
							],
							[
								15175,
								15181
							],
							[
								15478,
								15523
							],
							[
								15724,
								15743
							],
							[
								16124,
								16138
							],
							[
								16300,
								16311
							],
							[
								16854,
								16858
							],
							[
								16899,
								16906
							],
							[
								17156,
								17183
							],
							[
								17739,
								17743
							],
							[
								17799,
								17803
							],
							[
								17827,
								17831
							],
							[
								18579,
								18590
							]
						],
						"symlist":
						[
							"Rule",
							"Symbol",
							"constructor(str, id, rule)",
							"clone()",
							"toString()",
							"toCowbird()",
							"generate()",
							"sym =>",
							"toString()",
							"n =>",
							"combinations()",
							" (a, part, i) =>",
							"toCowbird(accu, combinations = true)",
							"match =>",
							"m =>",
							"rule =>",
							"Operator",
							"constructor(op, rule, ...args)",
							"toString()",
							"n =>",
							"clone()",
							"toCowbird(accu, name)",
							"arg =>",
							"str =>",
							"constructor(grammar, fragment)",
							"static from(array, grammar)",
							"parse(productions)",
							"toString(name, multiline)",
							"l =>",
							"toCowbird(accu, name)",
							"part =>",
							"match(parser)",
							"static generate(a, f = 'choice', sep = ', ')",
							"p =>",
							"p =>",
							"generate()",
							"Rule",
							"Self",
							"constructor(rule)",
							"clone()",
							"toString()",
							"toCowbird()",
							"Match",
							"constructor(rule, ...args)",
							"pred = (p, i) =>",
							"parse(symbols)",
							"Literal",
							"constructor(str, rule)",
							"clone()",
							"toString()",
							"toCowbird(accu)",
							"Grammar",
							"constructor(source, file)",
							"addRule(name, productions, fragment)",
							"getRule(name)",
							"parseParentheses()",
							"addMatches = () =>",
							"parsePatterns(endTok = [';', '|'])",
							" function isCharMatch(m)",
							" function toRegExp(a, invert = false)",
							"m =>",
							"tok =>",
							"parseRule(startTok = ':', endTok = ';', name)",
							"addPatterns = () =>",
							"resolveRules()",
							"parseLine()",
							"m =>",
							"parse()",
							"generate(dir = '../parse/')",
							"p =>",
							"p =>",
							"m =>",
							"toCowbird()"
						]
					},
					"AQAAAAAAAAAAAAAAtgQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					90,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC2BAAAUnVsZQpTeW1ib2wKICBjb25zdHJ1Y3RvcihzdHIsIGlkLCBydWxlKQogIGNsb25lKCkKICB0b1N0cmluZygpCiAgdG9Db3diaXJkKCkKICBnZW5lcmF0ZSgpCiAgc3ltID0+CiAgdG9TdHJpbmcoKQogIG4gPT4KICBjb21iaW5hdGlvbnMoKQogIChhLCBwYXJ0LCBpKSA9PgogIHRvQ293YmlyZChhY2N1LCBjb21iaW5hdGlvbnMgPSB0cnVlKQogIG1hdGNoID0+CiAgbSA9PgogIHJ1bGUgPT4KT3BlcmF0b3IKICBjb25zdHJ1Y3RvcihvcCwgcnVsZSwgLi4uYXJncykKICB0b1N0cmluZygpCiAgbiA9PgogIGNsb25lKCkKICB0b0Nvd2JpcmQoYWNjdSwgbmFtZSkKICBhcmcgPT4KICBzdHIgPT4KICBjb25zdHJ1Y3RvcihncmFtbWFyLCBmcmFnbWVudCkKICBzdGF0aWMgZnJvbShhcnJheSwgZ3JhbW1hcikKICBwYXJzZShwcm9kdWN0aW9ucykKICB0b1N0cmluZyhuYW1lLCBtdWx0aWxpbmUpCiAgbCA9PgogIHRvQ293YmlyZChhY2N1LCBuYW1lKQogIHBhcnQgPT4KICBtYXRjaChwYXJzZXIpCiAgc3RhdGljIGdlbmVyYXRlKGEsIGYgPSAnY2hvaWNlJywgc2VwID0gJywgJykKICBwID0+CiAgcCA9PgogIGdlbmVyYXRlKCkKUnVsZQpTZWxmCiAgY29uc3RydWN0b3IocnVsZSkKICBjbG9uZSgpCiAgdG9TdHJpbmcoKQogIHRvQ293YmlyZCgpCk1hdGNoCiAgY29uc3RydWN0b3IocnVsZSwgLi4uYXJncykKICBwcmVkID0gKHAsIGkpID0+CiAgcGFyc2Uoc3ltYm9scykKTGl0ZXJhbAogIGNvbnN0cnVjdG9yKHN0ciwgcnVsZSkKICBjbG9uZSgpCiAgdG9TdHJpbmcoKQogIHRvQ293YmlyZChhY2N1KQpHcmFtbWFyCiAgY29uc3RydWN0b3Ioc291cmNlLCBmaWxlKQogIGFkZFJ1bGUobmFtZSwgcHJvZHVjdGlvbnMsIGZyYWdtZW50KQogIGdldFJ1bGUobmFtZSkKICBwYXJzZVBhcmVudGhlc2VzKCkKICBhZGRNYXRjaGVzID0gKCkgPT4KICBwYXJzZVBhdHRlcm5zKGVuZFRvayA9IFsnOycsICd8J10pCiAgaXNDaGFyTWF0Y2gobSkKICB0b1JlZ0V4cChhLCBpbnZlcnQgPSBmYWxzZSkKICBtID0+CiAgdG9rID0+CiAgcGFyc2VSdWxlKHN0YXJ0VG9rID0gJzonLCBlbmRUb2sgPSAnOycsIG5hbWUpCiAgYWRkUGF0dGVybnMgPSAoKSA9PgogIHJlc29sdmVSdWxlcygpCiAgcGFyc2VMaW5lKCkKICBtID0+CiAgcGFyc2UoKQogIGdlbmVyYXRlKGRpciA9ICcuLi9wYXJzZS8nKQogIHAgPT4KICBwID0+CiAgbSA9PgogIHRvQ293YmlyZCgpAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					91,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/grammars/xpath.g4",
						"symkeys":
						[
							[
								5024,
								5039
							],
							[
								5386,
								5396
							]
						],
						"symlist":
						[
							"NCNameStartChar",
							"NCNameChar"
						]
					},
					"AQAAAAAAAAAAAAAAGgAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					92,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/test-parse.js",
						"symkeys":
						[
							[
								448,
								478
							],
							[
								676,
								704
							]
						],
						"symlist":
						[
							"function WriteFile(name, data)",
							"async function main(...args)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAaAAAATkNOYW1lU3RhcnRDaGFyCk5DTmFtZUNoYXIAAAAAAAAAACUAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					93,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAlAAAAV3JpdGVGaWxlKG5hbWUsIGRhdGEpCiAgbWFpbiguLi5hcmdzKQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					94,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/parse/grammar.js",
						"symkeys":
						[
							[
								198,
								202
							],
							[
								290,
								296
							],
							[
								316,
								342
							],
							[
								575,
								582
							],
							[
								679,
								689
							],
							[
								1054,
								1065
							],
							[
								1158,
								1168
							],
							[
								1191,
								1197
							],
							[
								1784,
								1794
							],
							[
								2044,
								2048
							],
							[
								2256,
								2270
							],
							[
								2326,
								2349
							],
							[
								3337,
								3373
							],
							[
								3512,
								3520
							],
							[
								3588,
								3592
							],
							[
								3615,
								3622
							],
							[
								3876,
								3884
							],
							[
								3904,
								3934
							],
							[
								4063,
								4073
							],
							[
								4157,
								4161
							],
							[
								4228,
								4235
							],
							[
								4339,
								4360
							],
							[
								4876,
								4882
							],
							[
								5416,
								5422
							],
							[
								5530,
								5560
							],
							[
								5733,
								5760
							],
							[
								5866,
								5884
							],
							[
								6255,
								6280
							],
							[
								6508,
								6512
							],
							[
								6568,
								6589
							],
							[
								6936,
								6943
							],
							[
								6971,
								6984
							],
							[
								7389,
								7433
							],
							[
								8609,
								8613
							],
							[
								8937,
								8941
							],
							[
								9308,
								9318
							],
							[
								9579,
								9583
							],
							[
								9657,
								9661
							],
							[
								9686,
								9703
							],
							[
								9793,
								9800
							],
							[
								9869,
								9879
							],
							[
								9953,
								9964
							],
							[
								10113,
								10118
							],
							[
								10137,
								10163
							],
							[
								10406,
								10422
							],
							[
								10625,
								10639
							],
							[
								11215,
								11222
							],
							[
								11247,
								11269
							],
							[
								11312,
								11319
							],
							[
								11401,
								11411
							],
							[
								11449,
								11464
							],
							[
								11529,
								11536
							],
							[
								11596,
								11621
							],
							[
								11728,
								11764
							],
							[
								12064,
								12077
							],
							[
								12120,
								12138
							],
							[
								12204,
								12222
							],
							[
								12635,
								12669
							],
							[
								14588,
								14615
							],
							[
								15019,
								15059
							],
							[
								15146,
								15150
							],
							[
								15175,
								15181
							],
							[
								15478,
								15523
							],
							[
								15724,
								15743
							],
							[
								16124,
								16138
							],
							[
								16300,
								16311
							],
							[
								16854,
								16858
							],
							[
								16899,
								16906
							],
							[
								17156,
								17183
							],
							[
								17739,
								17743
							],
							[
								17799,
								17803
							],
							[
								17827,
								17831
							],
							[
								18579,
								18590
							]
						],
						"symlist":
						[
							"Rule",
							"Symbol",
							"constructor(str, id, rule)",
							"clone()",
							"toString()",
							"toCowbird()",
							"generate()",
							"sym =>",
							"toString()",
							"n =>",
							"combinations()",
							" (a, part, i) =>",
							"toCowbird(accu, combinations = true)",
							"match =>",
							"m =>",
							"rule =>",
							"Operator",
							"constructor(op, rule, ...args)",
							"toString()",
							"n =>",
							"clone()",
							"toCowbird(accu, name)",
							"arg =>",
							"str =>",
							"constructor(grammar, fragment)",
							"static from(array, grammar)",
							"parse(productions)",
							"toString(name, multiline)",
							"l =>",
							"toCowbird(accu, name)",
							"part =>",
							"match(parser)",
							"static generate(a, f = 'choice', sep = ', ')",
							"p =>",
							"p =>",
							"generate()",
							"Rule",
							"Self",
							"constructor(rule)",
							"clone()",
							"toString()",
							"toCowbird()",
							"Match",
							"constructor(rule, ...args)",
							"pred = (p, i) =>",
							"parse(symbols)",
							"Literal",
							"constructor(str, rule)",
							"clone()",
							"toString()",
							"toCowbird(accu)",
							"Grammar",
							"constructor(source, file)",
							"addRule(name, productions, fragment)",
							"getRule(name)",
							"parseParentheses()",
							"addMatches = () =>",
							"parsePatterns(endTok = [';', '|'])",
							" function isCharMatch(m)",
							" function toRegExp(a, invert = false)",
							"m =>",
							"tok =>",
							"parseRule(startTok = ':', endTok = ';', name)",
							"addPatterns = () =>",
							"resolveRules()",
							"parseLine()",
							"m =>",
							"parse()",
							"generate(dir = '../parse/')",
							"p =>",
							"p =>",
							"m =>",
							"toCowbird()"
						]
					},
					"AQAAAAAAAAAAAAAAtgQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					97,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/parse/grammar.js",
						"symkeys":
						[
							[
								198,
								202
							],
							[
								290,
								296
							],
							[
								316,
								342
							],
							[
								575,
								582
							],
							[
								679,
								689
							],
							[
								1054,
								1065
							],
							[
								1158,
								1168
							],
							[
								1191,
								1197
							],
							[
								1784,
								1794
							],
							[
								2044,
								2048
							],
							[
								2256,
								2270
							],
							[
								2326,
								2349
							],
							[
								3337,
								3373
							],
							[
								3512,
								3520
							],
							[
								3588,
								3592
							],
							[
								3615,
								3622
							],
							[
								3876,
								3884
							],
							[
								3904,
								3934
							],
							[
								4063,
								4073
							],
							[
								4157,
								4161
							],
							[
								4228,
								4235
							],
							[
								4339,
								4360
							],
							[
								4876,
								4882
							],
							[
								5416,
								5422
							],
							[
								5530,
								5560
							],
							[
								5733,
								5760
							],
							[
								5866,
								5884
							],
							[
								6255,
								6280
							],
							[
								6508,
								6512
							],
							[
								6568,
								6589
							],
							[
								6936,
								6943
							],
							[
								6971,
								6984
							],
							[
								7389,
								7433
							],
							[
								8609,
								8613
							],
							[
								8937,
								8941
							],
							[
								9308,
								9318
							],
							[
								9579,
								9583
							],
							[
								9657,
								9661
							],
							[
								9686,
								9703
							],
							[
								9793,
								9800
							],
							[
								9869,
								9879
							],
							[
								9953,
								9964
							],
							[
								10113,
								10118
							],
							[
								10137,
								10163
							],
							[
								10406,
								10422
							],
							[
								10625,
								10639
							],
							[
								11215,
								11222
							],
							[
								11247,
								11269
							],
							[
								11312,
								11319
							],
							[
								11401,
								11411
							],
							[
								11449,
								11464
							],
							[
								11529,
								11536
							],
							[
								11596,
								11621
							],
							[
								11728,
								11764
							],
							[
								12064,
								12077
							],
							[
								12120,
								12138
							],
							[
								12204,
								12222
							],
							[
								12635,
								12669
							],
							[
								14588,
								14615
							],
							[
								15019,
								15059
							],
							[
								15146,
								15150
							],
							[
								15175,
								15181
							],
							[
								15478,
								15523
							],
							[
								15724,
								15743
							],
							[
								16124,
								16138
							],
							[
								16300,
								16311
							],
							[
								16894,
								16898
							],
							[
								16939,
								16946
							],
							[
								17196,
								17223
							],
							[
								17779,
								17783
							],
							[
								17839,
								17843
							],
							[
								17867,
								17871
							],
							[
								18619,
								18630
							]
						],
						"symlist":
						[
							"Rule",
							"Symbol",
							"constructor(str, id, rule)",
							"clone()",
							"toString()",
							"toCowbird()",
							"generate()",
							"sym =>",
							"toString()",
							"n =>",
							"combinations()",
							" (a, part, i) =>",
							"toCowbird(accu, combinations = true)",
							"match =>",
							"m =>",
							"rule =>",
							"Operator",
							"constructor(op, rule, ...args)",
							"toString()",
							"n =>",
							"clone()",
							"toCowbird(accu, name)",
							"arg =>",
							"str =>",
							"constructor(grammar, fragment)",
							"static from(array, grammar)",
							"parse(productions)",
							"toString(name, multiline)",
							"l =>",
							"toCowbird(accu, name)",
							"part =>",
							"match(parser)",
							"static generate(a, f = 'choice', sep = ', ')",
							"p =>",
							"p =>",
							"generate()",
							"Rule",
							"Self",
							"constructor(rule)",
							"clone()",
							"toString()",
							"toCowbird()",
							"Match",
							"constructor(rule, ...args)",
							"pred = (p, i) =>",
							"parse(symbols)",
							"Literal",
							"constructor(str, rule)",
							"clone()",
							"toString()",
							"toCowbird(accu)",
							"Grammar",
							"constructor(source, file)",
							"addRule(name, productions, fragment)",
							"getRule(name)",
							"parseParentheses()",
							"addMatches = () =>",
							"parsePatterns(endTok = [';', '|'])",
							" function isCharMatch(m)",
							" function toRegExp(a, invert = false)",
							"m =>",
							"tok =>",
							"parseRule(startTok = ':', endTok = ';', name)",
							"addPatterns = () =>",
							"resolveRules()",
							"parseLine()",
							"m =>",
							"parse()",
							"generate(dir = '../parse/')",
							"p =>",
							"p =>",
							"m =>",
							"toCowbird()"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAAC2BAAAUnVsZQpTeW1ib2wKICBjb25zdHJ1Y3RvcihzdHIsIGlkLCBydWxlKQogIGNsb25lKCkKICB0b1N0cmluZygpCiAgdG9Db3diaXJkKCkKICBnZW5lcmF0ZSgpCiAgc3ltID0+CiAgdG9TdHJpbmcoKQogIG4gPT4KICBjb21iaW5hdGlvbnMoKQogIChhLCBwYXJ0LCBpKSA9PgogIHRvQ293YmlyZChhY2N1LCBjb21iaW5hdGlvbnMgPSB0cnVlKQogIG1hdGNoID0+CiAgbSA9PgogIHJ1bGUgPT4KT3BlcmF0b3IKICBjb25zdHJ1Y3RvcihvcCwgcnVsZSwgLi4uYXJncykKICB0b1N0cmluZygpCiAgbiA9PgogIGNsb25lKCkKICB0b0Nvd2JpcmQoYWNjdSwgbmFtZSkKICBhcmcgPT4KICBzdHIgPT4KICBjb25zdHJ1Y3RvcihncmFtbWFyLCBmcmFnbWVudCkKICBzdGF0aWMgZnJvbShhcnJheSwgZ3JhbW1hcikKICBwYXJzZShwcm9kdWN0aW9ucykKICB0b1N0cmluZyhuYW1lLCBtdWx0aWxpbmUpCiAgbCA9PgogIHRvQ293YmlyZChhY2N1LCBuYW1lKQogIHBhcnQgPT4KICBtYXRjaChwYXJzZXIpCiAgc3RhdGljIGdlbmVyYXRlKGEsIGYgPSAnY2hvaWNlJywgc2VwID0gJywgJykKICBwID0+CiAgcCA9PgogIGdlbmVyYXRlKCkKUnVsZQpTZWxmCiAgY29uc3RydWN0b3IocnVsZSkKICBjbG9uZSgpCiAgdG9TdHJpbmcoKQogIHRvQ293YmlyZCgpCk1hdGNoCiAgY29uc3RydWN0b3IocnVsZSwgLi4uYXJncykKICBwcmVkID0gKHAsIGkpID0+CiAgcGFyc2Uoc3ltYm9scykKTGl0ZXJhbAogIGNvbnN0cnVjdG9yKHN0ciwgcnVsZSkKICBjbG9uZSgpCiAgdG9TdHJpbmcoKQogIHRvQ293YmlyZChhY2N1KQpHcmFtbWFyCiAgY29uc3RydWN0b3Ioc291cmNlLCBmaWxlKQogIGFkZFJ1bGUobmFtZSwgcHJvZHVjdGlvbnMsIGZyYWdtZW50KQogIGdldFJ1bGUobmFtZSkKICBwYXJzZVBhcmVudGhlc2VzKCkKICBhZGRNYXRjaGVzID0gKCkgPT4KICBwYXJzZVBhdHRlcm5zKGVuZFRvayA9IFsnOycsICd8J10pCiAgaXNDaGFyTWF0Y2gobSkKICB0b1JlZ0V4cChhLCBpbnZlcnQgPSBmYWxzZSkKICBtID0+CiAgdG9rID0+CiAgcGFyc2VSdWxlKHN0YXJ0VG9rID0gJzonLCBlbmRUb2sgPSAnOycsIG5hbWUpCiAgYWRkUGF0dGVybnMgPSAoKSA9PgogIHJlc29sdmVSdWxlcygpCiAgcGFyc2VMaW5lKCkKICBtID0+CiAgcGFyc2UoKQogIGdlbmVyYXRlKGRpciA9ICcuLi9wYXJzZS8nKQogIHAgPT4KICBwID0+CiAgbSA9PgogIHRvQ293YmlyZCgpAAAAAAAAAAC2BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtgQAAFJ1bGUKU3ltYm9sCiAgY29uc3RydWN0b3Ioc3RyLCBpZCwgcnVsZSkKICBjbG9uZSgpCiAgdG9TdHJpbmcoKQogIHRvQ293YmlyZCgpCiAgZ2VuZXJhdGUoKQogIHN5bSA9PgogIHRvU3RyaW5nKCkKICBuID0+CiAgY29tYmluYXRpb25zKCkKICAoYSwgcGFydCwgaSkgPT4KICB0b0Nvd2JpcmQoYWNjdSwgY29tYmluYXRpb25zID0gdHJ1ZSkKICBtYXRjaCA9PgogIG0gPT4KICBydWxlID0+Ck9wZXJhdG9yCiAgY29uc3RydWN0b3Iob3AsIHJ1bGUsIC4uLmFyZ3MpCiAgdG9TdHJpbmcoKQogIG4gPT4KICBjbG9uZSgpCiAgdG9Db3diaXJkKGFjY3UsIG5hbWUpCiAgYXJnID0+CiAgc3RyID0+CiAgY29uc3RydWN0b3IoZ3JhbW1hciwgZnJhZ21lbnQpCiAgc3RhdGljIGZyb20oYXJyYXksIGdyYW1tYXIpCiAgcGFyc2UocHJvZHVjdGlvbnMpCiAgdG9TdHJpbmcobmFtZSwgbXVsdGlsaW5lKQogIGwgPT4KICB0b0Nvd2JpcmQoYWNjdSwgbmFtZSkKICBwYXJ0ID0+CiAgbWF0Y2gocGFyc2VyKQogIHN0YXRpYyBnZW5lcmF0ZShhLCBmID0gJ2Nob2ljZScsIHNlcCA9ICcsICcpCiAgcCA9PgogIHAgPT4KICBnZW5lcmF0ZSgpClJ1bGUKU2VsZgogIGNvbnN0cnVjdG9yKHJ1bGUpCiAgY2xvbmUoKQogIHRvU3RyaW5nKCkKICB0b0Nvd2JpcmQoKQpNYXRjaAogIGNvbnN0cnVjdG9yKHJ1bGUsIC4uLmFyZ3MpCiAgcHJlZCA9IChwLCBpKSA9PgogIHBhcnNlKHN5bWJvbHMpCkxpdGVyYWwKICBjb25zdHJ1Y3RvcihzdHIsIHJ1bGUpCiAgY2xvbmUoKQogIHRvU3RyaW5nKCkKICB0b0Nvd2JpcmQoYWNjdSkKR3JhbW1hcgogIGNvbnN0cnVjdG9yKHNvdXJjZSwgZmlsZSkKICBhZGRSdWxlKG5hbWUsIHByb2R1Y3Rpb25zLCBmcmFnbWVudCkKICBnZXRSdWxlKG5hbWUpCiAgcGFyc2VQYXJlbnRoZXNlcygpCiAgYWRkTWF0Y2hlcyA9ICgpID0+CiAgcGFyc2VQYXR0ZXJucyhlbmRUb2sgPSBbJzsnLCAnfCddKQogIGlzQ2hhck1hdGNoKG0pCiAgdG9SZWdFeHAoYSwgaW52ZXJ0ID0gZmFsc2UpCiAgbSA9PgogIHRvayA9PgogIHBhcnNlUnVsZShzdGFydFRvayA9ICc6JywgZW5kVG9rID0gJzsnLCBuYW1lKQogIGFkZFBhdHRlcm5zID0gKCkgPT4KICByZXNvbHZlUnVsZXMoKQogIHBhcnNlTGluZSgpCiAgbSA9PgogIHBhcnNlKCkKICBnZW5lcmF0ZShkaXIgPSAnLi4vcGFyc2UvJykKICBwID0+CiAgcCA9PgogIG0gPT4KICB0b0Nvd2JpcmQoKQAAAAAAAAAAtgQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdQQAAAAAAAB1BAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/grammars/xpath.g4",
			"settings":
			{
				"buffer_size": 5506,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "test-parse.js",
			"settings":
			{
				"buffer_size": 1815,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					5,
					2,
					"left_delete",
					null,
					"AgAAAMABAAAAAAAAwAEAAAAAAAAQAAAAbGV0IGZpbGVzeXN0ZW07Cr8BAAAAAAAAvwEAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAA0AEAAAAAAADAAQAAAAAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "lib/parse/grammar.js",
			"settings":
			{
				"buffer_size": 18788,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					19,
					1,
					"insert",
					{
						"characters": "\nconsole.loig"
					},
					"DgAAAGVBAAAAAAAAZkEAAAAAAAAAAAAAZkEAAAAAAABsQQAAAAAAAAAAAABsQQAAAAAAAG1BAAAAAAAAAAAAAG1BAAAAAAAAbkEAAAAAAAAAAAAAbkEAAAAAAABvQQAAAAAAAAAAAABvQQAAAAAAAHBBAAAAAAAAAAAAAHBBAAAAAAAAcUEAAAAAAAAAAAAAcUEAAAAAAAByQQAAAAAAAAAAAAByQQAAAAAAAHNBAAAAAAAAAAAAAHNBAAAAAAAAdEEAAAAAAAAAAAAAdEEAAAAAAAB1QQAAAAAAAAAAAAB1QQAAAAAAAHZBAAAAAAAAAAAAAHZBAAAAAAAAd0EAAAAAAAAAAAAAd0EAAAAAAAB4QQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZUEAAAAAAABlQQAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					2,
					"left_delete",
					null,
					"AgAAAHdBAAAAAAAAd0EAAAAAAAABAAAAZ3ZBAAAAAAAAdkEAAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAAeEEAAAAAAAB4QQAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AQAAAHZBAAAAAAAAd0EAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdkEAAAAAAAB2QQAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAHdBAAAAAAAAeUEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAd0EAAAAAAAB3QQAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAHhBAAAAAAAAekEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeEEAAAAAAAB4QQAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "rule"
					},
					"BAAAAHlBAAAAAAAAekEAAAAAAAAAAAAAekEAAAAAAAB7QQAAAAAAAAAAAAB7QQAAAAAAAHxBAAAAAAAAAAAAAHxBAAAAAAAAfUEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeUEAAAAAAAB5QQAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAH5BAAAAAAAAf0EAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfkEAAAAAAAB+QQAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": " rule"
					},
					"BQAAAH9BAAAAAAAAgEEAAAAAAAAAAAAAgEEAAAAAAACBQQAAAAAAAAAAAACBQQAAAAAAAIJBAAAAAAAAAAAAAIJBAAAAAAAAg0EAAAAAAAAAAAAAg0EAAAAAAACEQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAf0EAAAAAAAB/QQAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAIVBAAAAAAAAhkEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhUEAAAAAAACFQQAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					1,
					"paste",
					null,
					"AQAAAPotAAAAAAAAKS4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+i0AAAAAAAD6LQAAAAAAAAAAAAAAAPC/"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAPwtAAAAAAAA/S0AAAAAAAAAAAAA/S0AAAAAAAD9LQAAAAAAAAQAAAAgIC8v",
					"AQAAAAAAAAABAAAAAC4AAAAAAAD8LQAAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": "debud"
					},
					"BgAAAAUuAAAAAAAABi4AAAAAAAAAAAAABi4AAAAAAAAGLgAAAAAAAAMAAABsb2cGLgAAAAAAAAcuAAAAAAAAAAAAAAcuAAAAAAAACC4AAAAAAAAAAAAACC4AAAAAAAAJLgAAAAAAAAAAAAAJLgAAAAAAAAouAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABS4AAAAAAAAILgAAAAAAAAAAAAAAAPC/"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": "addRule"
					},
					"CAAAAAwuAAAAAAAADS4AAAAAAAAAAAAADS4AAAAAAAANLgAAAAAAAAwAAABwcm9kdWN0aW9uczoNLgAAAAAAAA4uAAAAAAAAAAAAAA4uAAAAAAAADy4AAAAAAAAAAAAADy4AAAAAAAAQLgAAAAAAAAAAAAAQLgAAAAAAABEuAAAAAAAAAAAAABEuAAAAAAAAEi4AAAAAAAAAAAAAEi4AAAAAAAATLgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADC4AAAAAAAAYLgAAAAAAAAAAAAAAAPC/"
				],
				[
					62,
					1,
					"insert",
					{
						"characters": "{name,"
					},
					"BgAAABUuAAAAAAAAFi4AAAAAAAAAAAAAFi4AAAAAAAAXLgAAAAAAAAAAAAAXLgAAAAAAABguAAAAAAAAAAAAABguAAAAAAAAGS4AAAAAAAAAAAAAGS4AAAAAAAAaLgAAAAAAAAAAAAAaLgAAAAAAABsuAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFS4AAAAAAAAVLgAAAAAAAAAAAAAAAPC/"
				],
				[
					65,
					1,
					"insert",
					{
						"characters": ",frame"
					},
					"BgAAACYuAAAAAAAAJy4AAAAAAAAAAAAAJy4AAAAAAAAoLgAAAAAAAAAAAAAoLgAAAAAAACkuAAAAAAAAAAAAACkuAAAAAAAAKi4AAAAAAAAAAAAAKi4AAAAAAAArLgAAAAAAAAAAAAArLgAAAAAAACwuAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJi4AAAAAAAAmLgAAAAAAAAAAAAAAAPC/"
				],
				[
					66,
					2,
					"left_delete",
					null,
					"AgAAACsuAAAAAAAAKy4AAAAAAAABAAAAZSouAAAAAAAAKi4AAAAAAAABAAAAbQ",
					"AQAAAAAAAAABAAAALC4AAAAAAAAsLgAAAAAAAAAAAAAAAPC/"
				],
				[
					67,
					1,
					"insert",
					{
						"characters": "gment"
					},
					"BQAAACouAAAAAAAAKy4AAAAAAAAAAAAAKy4AAAAAAAAsLgAAAAAAAAAAAAAsLgAAAAAAAC0uAAAAAAAAAAAAAC0uAAAAAAAALi4AAAAAAAAAAAAALi4AAAAAAAAvLgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKi4AAAAAAAAqLgAAAAAAAAAAAAAAAPC/"
				],
				[
					69,
					1,
					"left_delete",
					null,
					"AQAAAC8uAAAAAAAALy4AAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAMC4AAAAAAAAwLgAAAAAAAAAAAAAAAPC/"
				],
				[
					70,
					1,
					"insert",
					{
						"characters": "}"
					},
					"AQAAAC8uAAAAAAAAMC4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALy4AAAAAAAAvLgAAAAAAAAAAAAAAAPC/"
				],
				[
					71,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADAuAAAAAAAAMi4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMC4AAAAAAAAwLgAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					2,
					"left_delete",
					null,
					"AgAAADEuAAAAAAAAMS4AAAAAAAABAAAAKTAuAAAAAAAAMC4AAAAAAAABAAAAKA",
					"AQAAAAAAAAABAAAAMi4AAAAAAAAyLgAAAAAAAAAAAAAAAPC/"
				],
				[
					74,
					1,
					"insert",
					{
						"characters": "⁾"
					},
					"AQAAADAuAAAAAAAAMS4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMC4AAAAAAAAwLgAAAAAAAAAAAAAAAPC/"
				],
				[
					75,
					1,
					"left_delete",
					null,
					"AQAAADAuAAAAAAAAMC4AAAAAAAADAAAA4oG+",
					"AQAAAAAAAAABAAAAMS4AAAAAAAAxLgAAAAAAAAAAAAAAAPC/"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAADAuAAAAAAAAMS4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMC4AAAAAAAAwLgAAAAAAAAAAAAAAAPC/"
				],
				[
					83,
					1,
					"left_delete",
					null,
					"AQAAAAkuAAAAAAAACS4AAAAAAAABAAAAZA",
					"AQAAAAAAAAABAAAACi4AAAAAAAAKLgAAAAAAAAAAAAAAAPC/"
				],
				[
					84,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AQAAAAkuAAAAAAAACi4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACS4AAAAAAAAJLgAAAAAAAAAAAAAAAPC/"
				],
				[
					92,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAPxCAAAAAAAA/UIAAAAAAAAAAAAA/UIAAAAAAAABQwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/EIAAAAAAAD8QgAAAAAAAAAAAAAAAPC/"
				],
				[
					93,
					3,
					"left_delete",
					null,
					"AwAAAP9CAAAAAAAA/0IAAAAAAAACAAAAICD9QgAAAAAAAP1CAAAAAAAAAgAAACAg/EIAAAAAAAD8QgAAAAAAAAEAAAAK",
					"AQAAAAAAAAABAAAAAUMAAAAAAAABQwAAAAAAAAAAAAAAAPC/"
				],
				[
					106,
					1,
					"paste",
					null,
					"AQAAANo/AAAAAAAA+z8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2j8AAAAAAADaPwAAAAAAAAAAAAAAAPC/"
				],
				[
					111,
					1,
					"insert",
					{
						"characters": "parseRul"
					},
					"CQAAAO0/AAAAAAAA7j8AAAAAAAAAAAAA7j8AAAAAAADuPwAAAAAAAAQAAABydWxl7j8AAAAAAADvPwAAAAAAAAAAAADvPwAAAAAAAPA/AAAAAAAAAAAAAPA/AAAAAAAA8T8AAAAAAAAAAAAA8T8AAAAAAADyPwAAAAAAAAAAAADyPwAAAAAAAPM/AAAAAAAAAAAAAPM/AAAAAAAA9D8AAAAAAAAAAAAA9D8AAAAAAAD1PwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7T8AAAAAAADxPwAAAAAAAAAAAAAAAPC/"
				],
				[
					112,
					3,
					"left_delete",
					null,
					"AwAAAPQ/AAAAAAAA9D8AAAAAAAABAAAAbPM/AAAAAAAA8z8AAAAAAAABAAAAdfI/AAAAAAAA8j8AAAAAAAABAAAAUg",
					"AQAAAAAAAAABAAAA9T8AAAAAAAD1PwAAAAAAAAAAAAAAAPC/"
				],
				[
					113,
					1,
					"insert",
					{
						"characters": "Line"
					},
					"BAAAAPI/AAAAAAAA8z8AAAAAAAAAAAAA8z8AAAAAAAD0PwAAAAAAAAAAAAD0PwAAAAAAAPU/AAAAAAAAAAAAAPU/AAAAAAAA9j8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8j8AAAAAAADyPwAAAAAAAAAAAAAAAPC/"
				],
				[
					115,
					4,
					"right_delete",
					null,
					"BAAAAPk/AAAAAAAA+T8AAAAAAAABAAAAcvk/AAAAAAAA+T8AAAAAAAABAAAAdfk/AAAAAAAA+T8AAAAAAAABAAAAbPk/AAAAAAAA+T8AAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAA+T8AAAAAAAD5PwAAAAAAAAAAAAAAAPC/"
				],
				[
					116,
					1,
					"insert",
					{
						"characters": "parser"
					},
					"BgAAAPk/AAAAAAAA+j8AAAAAAAAAAAAA+j8AAAAAAAD7PwAAAAAAAAAAAAD7PwAAAAAAAPw/AAAAAAAAAAAAAPw/AAAAAAAA/T8AAAAAAAAAAAAA/T8AAAAAAAD+PwAAAAAAAAAAAAD+PwAAAAAAAP8/AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+T8AAAAAAAD5PwAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"prett",
				"JsPrettier: Format Code"
			],
			[
				"prettier",
				"JsPrettier: Format Code"
			],
			[
				"isntall",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"fo",
				"Format CSS: Expanded"
			],
			[
				"forma",
				"Format CSS: Expanded"
			],
			[
				"css",
				"Format CSS: Expanded"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"tidy",
				"Tidy CSS"
			],
			[
				"edut ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"build",
				"Build With: prettier ${file_path}"
			],
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"",
				"Bookmarks: Select Previous"
			],
			[
				"schem",
				"Schemr: Random scheme"
			],
			[
				"extra",
				"Extract Sublime Package: Extract all packages"
			],
			[
				"Package Control: ",
				"Package Control: List Packages"
			],
			[
				"extrac",
				"Extract Sublime Package: Extract all packages"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"packa",
				"Install Package Control"
			],
			[
				"edit",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"schemeed",
				"SchemeEditor: Edit Scheme (file picker)"
			],
			[
				"scheme",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"repo",
				"Package Control: Remove Repository"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"upgra",
				"Package Control: Upgrade Package"
			],
			[
				"install ",
				"Package Control: Install Package"
			],
			[
				"adv",
				"Package Control: Advanced Install Package"
			],
			[
				"ad",
				"Package Control: Advanced Install Package"
			],
			[
				"adva",
				"Package Control: Advanced Install Package"
			],
			[
				"edi",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"edit ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"remove pac",
				"Package Control: Remove Package"
			],
			[
				"outl",
				"Browse Mode: Outline (Right)"
			],
			[
				"debugger",
				"Debugger: Add or Select Configuration"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 442.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv",
		"/home/roman/Projects/plot-cv/cmake",
		"/home/roman/Projects/plot-cv/lib",
		"/home/roman/Projects/plot-cv/lib/xml"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/package.json",
		"/home/roman/Projects/plot-cv/test-parse.js",
		"/home/roman/Projects/plot-cv/lib/xml/parse.js",
		"/home/roman/Projects/plot-cv/lib/xml/util.js",
		"/home/roman/Projects/plot-cv/lib/eagle/document.js",
		"/home/roman/Projects/plot-cv/eagle-shell.js",
		"/home/roman/Projects/plot-cv/ast-shell.js",
		"/home/roman/Projects/plot-cv/lib/fd-graph.js",
		"/home/roman/Projects/plot-cv/lib/geom/graph.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/js/cvVideo.js",
		"/home/roman/Projects/plot-cv/lib/eda/circuitjs.js",
		"/home/roman/Projects/plot-cv/cmake/imgui-viewer.cmake",
		"/home/roman/Projects/plot-cv/cmake/highgui-viewer.cmake",
		"/home/roman/Projects/plot-cv/cv-shell.js",
		"/home/roman/Projects/plot-cv/test-ecmascript2.js",
		"/home/roman/Projects/plot-cv/lib/ecmascript.js",
		"/home/roman/Projects/plot-cv/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/lib/parse/lexer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-deep.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-xml.c",
		"/home/roman/Projects/plot-cv/fontsample.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_xml.js",
		"/home/roman/Projects/plot-cv/cmake/OpenCV.cmake",
		"/home/roman/Projects/plot-cv/list-exports.js",
		"/home/roman/Projects/plot-cv/lib/misc.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/lib/util.js",
		"/home/roman/Projects/plot-cv/lib/geom/line.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/list-exports.js",
		"/home/roman/Projects/plot-cv/image-helpers.js",
		"/home/roman/Projects/plot-cv/io-helpers.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/line.js",
		"/home/roman/Projects/plot-cv/test-line.js",
		"/home/roman/Projects/plot-cv/lib/geom/rect.js",
		"/home/roman/Projects/plot-cv/lib/dom/element.js",
		"/home/roman/Projects/plot-cv/lib/eagle/element.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/location.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/location.h",
		"/home/roman/Projects/plot-cv/lib/pointer.js",
		"/home/roman/Projects/plot-cv/lib/preact.m.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/jslexer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-path.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/path.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.c",
		"/home/roman/Projects/circuitjs1-1.2.2/modified_files/CirSim.java",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/extendArray.js",
		"/home/roman/Projects/plot-cv/lib/eagle/project.js",
		"/home/roman/Projects/plot-cv/test-video.js",
		"/home/roman/Projects/plot-cv/config.js",
		"/home/roman/Projects/plot-cv/lib/iterator/helpers.js",
		"/home/roman/Projects/plot-cv/lib/iterable.js",
		"/home/roman/Projects/plot-cv/lib/iterator.js",
		"/home/roman/Projects/plot-cv/test-mmap.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lexer.h",
		"/home/roman/Projects/plot-cv/lib/geom/point.js",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-libc.c",
		"/home/roman/Projects/plot-cv/eagle-commands.js",
		"/home/roman/Projects/plot-cv/clang-ast.js",
		"/home/roman/Projects/plot-cv/clang-list.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/cmake/FindMbedTLS.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/cmake/UseMultiArch.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/cmake/BuildMbedTLS.cmake",
		"/home/roman/Projects/plot-cv/cmake/FindQuickJS.cmake",
		"/home/roman/Projects/plot-cv/quickjs/cmake/CheckFlags.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-ffi/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-ffi/cmake/UseMultiArch.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-glfw/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.c",
		"/home/roman/Projects/plot-cv/portmidi-testio.c",
		"/home/roman/Projects/plot-cv/qjs-opencv/tests/test_freetype.js",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-opcode.h",
		"/home/roman/Projects/plot-cv/cmake/CheckFlags.cmake",
		"/home/roman/Projects/plot-cv/test-portmidi.js",
		"/home/roman/Projects/portmidi-trunk/pm_common/portmidi.h",
		"/home/roman/Projects/portmidi-trunk/pm_test/sendvirtual.c",
		"/home/roman/Projects/plot-cv/portmidi.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_mmap.js",
		"/home/roman/Projects/plot-cv/quickjs.h",
		"/home/roman/Projects/plot-cv/x.js",
		"/home/roman/Projects/plot-cv/utils.h",
		"/home/roman/Projects/plot-cv/debugger-server.js",
		"/home/roman/Projects/plot-cv/lib/async/helpers.js",
		"/home/roman/Projects/plot-cv/lib/eda/units.js",
		"/home/roman/Projects/plot-cv/lib/eda/colorCoding.js",
		"/home/roman/Projects/plot-cv/main.js",
		"/home/roman/Projects/plot-cv/test-opencv.js",
		"/home/roman/Projects/plot-cv/eagle-query.js",
		"/home/roman/Projects/plot-cv/server.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/cross.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/dimension.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/grid.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/sheet.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/svg.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/element.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/pad.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/rectangle.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/drawing.js",
		"/home/roman/Projects/plot-cv/lib/eagle/svgRenderer.js",
		"/home/roman/Projects/plot-cv/lib/eagle/boardRenderer.js",
		"/home/roman/Projects/plot-cv/lib/eagle/node.js",
		"/home/roman/Projects/plot-cv/lib/xml.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fs.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/utils.c",
		"/home/roman/Projects/plot-cv/components.js",
		"/home/roman/Projects/plot-cv/lib/dom/preactComponent.js",
		"/home/roman/Projects/plot-cv/lib/preact.js",
		"/home/roman/Projects/plot-cv/lib/hooks.js",
		"/home/roman/Projects/plot-cv/lib/preact.mjs",
		"/home/roman/Projects/plot-cv/lib/preact.standalone.js",
		"/home/roman/Projects/plot-cv/lib/preact.esm.js",
		"/home/roman/Projects/plot-cv/test-imread.js",
		"/home/roman/Projects/plot-cv/lib/hooks/useEvent.js",
		"/home/roman/Projects/plot-cv/ws-worker.js",
		"/home/roman/Projects/plot-cv/test-sockets.js",
		"/home/roman/Projects/plot-cv/debugger.html",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tmp.xml",
		"/home/roman/Projects/plot-cv/test-rpc.js",
		"/home/roman/Projects/plot-cv/test-umat.js",
		"/home/roman/Projects/plot-cv/test-cv.js",
		"/home/roman/Projects/plot-cv/test-net.js",
		"/home/roman/Projects/plot-cv/test-minnet.js",
		"/home/roman/Projects/plot-cv/plot-cv.js",
		"/home/roman/Projects/plot-cv/list-proxies.js"
	],
	"find":
	{
		"height": 41.0
	},
	"find_in_files":
	{
		"height": 185.0,
		"where_history":
		[
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,,-*/libwebsockets/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/build-*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,,-*/libwebsockets/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/build-*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/build-*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,-*/indexex*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/indexex*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/indexex/*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnoed*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/qjs-cache*/*,-*/txiki*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,*/quickjs-2*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs/*,-*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,*.cmake,-*/node_modules/*,-*/quickjs/*,-*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs/*,-*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp",
			"/home/roman/Projects/plot-cv,*.js,*.cpp,*.hpp,-*/node_modules/*,-*/quickjs/*,-*/acorn/*",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs/*,-*/acorn/*",
			"/home/roman/Projects/plot-cv,/home/roman/Projects/plot-cv/lib,*.js,-*/node_modules/*,-*/quickjs/*,-*/acorn/*",
			"/home/roman/Projects/plot-cv,/home/roman/Projects/plot-cv/lib,*.js,-*/node_modules/*,-*/quickjs/*",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs/*",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*",
			"/home/roman/Projects/plot-cv,*.js",
			"/home/roman/Projects/plot-cv/quickjs,*.c,*.h",
			"/home/roman/Projects/plot-cv/src,*.cpp,*.hpp",
			"/home/roman/Projects/plot-cv/quickjs,*.c,*.h"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"lexer",
			"filesystem\\.([^(]*)",
			"REPL",
			"params",
			"main",
			"CommandLine",
			"class ",
			"fromImages",
			"VideoSource",
			"ImageSequence",
			"\\(cli ",
			"opencv.a",
			"thermist",
			"gate'",
			"tags",
			"\"js_xml",
			"\"select",
			"result\\[",
			"QUICKJS_OPENCV_A",
			"\n      if(relativeTo) {\n        let rel = path.resolve(relativeTo);\n        source = path.absolute(source);\n\n        if(path.exists(rel) && !path.isDirectory(rel)) rel = path.dirname(rel);\n\n        log('\\x1b[1;33mrelativeTo\\x1b[0m', { rel, source });\n\n        source = path.relative(source, rel);\n      }\n\n      if(path.isRelative(source) && !/^(\\.|\\.\\.)\\//.test(source)) source = './' + source;\n\n",
			"476",
			"unique",
			"weakAss",
			"Util\\.define",
			"define\\(",
			"define",
			"define ",
			"export def",
			"once",
			"lazyProp",
			"dir:",
			"construct",
			"Object.ass",
			"path_exists",
			"path_is_",
			"isDire",
			"is_dire",
			"relativeTo =",
			"relativeTo",
			"\"relative",
			"file",
			"from '\\${",
			"'\\${",
			"file =",
			"quiet",
			";\\s*\\n\\s*let\\s*",
			"Identi",
			"' as",
			"default as",
			"util.js",
			"amelize =",
			"amelize",
			"path.base",
			"\\.replace",
			"log =",
			"caseSen",
			"path.basename",
			"`import {",
			"import {",
			"console =",
			"ProcessFile",
			"'p'",
			"lex->loc.file",
			"location_file",
			"lexer_file",
			"180",
			"207:",
			"^\\s*repl\\.[^ ]* = ",
			"^\\s*repl\\.[^ ]* =",
			"repl\\.",
			"directives",
			"irectives",
			"mportModule",
			"mport",
			"types",
			"assign.global",
			"main",
			"bind =",
			"Util.weak",
			"\n      ",
			"bindProp",
			"Point.bind",
			"Point.nind",
			"Line.bind",
			"cleanup",
			"historySave",
			"Terminate",
			"Terminate'",
			"Rect\\.bind\\(",
			"(Rect|Line)\\.bind\\(",
			"(Rect|Line)\\.bind",
			"bind =",
			"bind",
			"x2",
			"compact",
			"Object.ass",
			"Object.asss",
			"SaveConf",
			"\n    ",
			"SaveSVG",
			"dst",
			"'dst",
			"'results",
			"'dst",
			"qjs-opencv",
			"qjs-open",
			"Finding",
			"Finding QuickJS",
			"Finding",
			"find_quickjs",
			"^\\s*message\\s*\\(\\s*\"",
			"^\\s*message\\s*\\(",
			"^\\s*message",
			"dumpChar",
			"11",
			"a8",
			"PmEvent",
			"Pm_Read",
			"length",
			"PmEvent",
			"ptr",
			"CreateVirtua",
			"bufferSize",
			"latency",
			"PmTimeProcPtr",
			"time_proc",
			"inputDriverInfo",
			"PortMidiStream"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"fs.\\1Sync",
			"define",
			",",
			"file",
			"target_compile_definitions",
			"msg",
			"PmDeviceInfo",
			"export function",
			"libportmidi",
			"\\1//\\2",
			"text",
			"\\1",
			"export function",
			"export &",
			"fs.",
			"array",
			"fs",
			"black",
			"white",
			"input.",
			"'save'",
			"globalThis.",
			"fsPromises",
			"\\n\\n",
			"}\\n",
			"vector",
			"std::vector<",
			"log.info",
			"waitFor",
			"'",
			"'\\\\x\\1'",
			"'\\x\\1'",
			"200",
			"120",
			"out += ",
			"",
			"mask",
			"mas",
			"",
			"['.",
			"currentFile",
			"/* prettier-ignore */ import",
			"ShowSource",
			"/* prettier-ignore */ Object.assign(globalThis",
			"component",
			"",
			"token.id",
			"loc",
			"lexeme",
			"body",
			"toArrayBuffer",
			"toString",
			"waitRead",
			"dbg",
			"toString",
			"this.#events",
			"%2i",
			"-9s",
			"proc",
			"fs.",
			"jsm_module_record",
			"stepMode",
			"this.",
			"= require('\\1')",
			"const ",
			"fs",
			"ReadImport",
			"1000",
			"1000l",
			"SockAddr",
			"writeFileSync(",
			"...args",
			"iconProps",
			"js_module_get",
			"js_module_find",
			"jsm_load_module",
			"js_\\1",
			"js_load_\\1",
			"js_eval_binary",
			"ifndef NDEBUG",
			"lex->start",
			"lex->byte_length",
			"lex->pos",
			"lex->token_id",
			"lex->byte_length",
			"lex->pos",
			"tokens",
			"this.columns",
			"terminal.flush()",
			"f.flush()",
			"f.puts(",
			"500",
			"\\1this.\\2",
			"debug",
			"ucsLength",
			"this.",
			"this.out.flush",
			"history",
			"\\1//console.log",
			"puts",
			"export function",
			"type",
			"header.",
			"#000000",
			"a",
			"MakeListCommand",
			"si",
			"pi",
			"plen",
			"slen",
			"pattern[0]",
			"string[0]",
			"string.length",
			"pattern.length",
			"string.length",
			"export const",
			"this",
			"item",
			"js_deep_defaultflags",
			"sheet",
			"makeListMembersCmd",
			"get_websocket_obj",
			"0",
			"searchPath",
			"makeValueDescriptor",
			"socket",
			"",
			", func"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1206,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": "/home/roman/Projects/plot-cv/lib/parse/grammar.js",
							"function_name_status_row": 67,
							"outline_rename_mode": false,
							"symkeys":
							[
								[
									198,
									202
								],
								[
									290,
									296
								],
								[
									316,
									342
								],
								[
									575,
									582
								],
								[
									679,
									689
								],
								[
									1054,
									1065
								],
								[
									1158,
									1168
								],
								[
									1191,
									1197
								],
								[
									1784,
									1794
								],
								[
									2044,
									2048
								],
								[
									2256,
									2270
								],
								[
									2326,
									2349
								],
								[
									3337,
									3373
								],
								[
									3512,
									3520
								],
								[
									3588,
									3592
								],
								[
									3615,
									3622
								],
								[
									3876,
									3884
								],
								[
									3904,
									3934
								],
								[
									4063,
									4073
								],
								[
									4157,
									4161
								],
								[
									4228,
									4235
								],
								[
									4339,
									4360
								],
								[
									4876,
									4882
								],
								[
									5416,
									5422
								],
								[
									5530,
									5560
								],
								[
									5733,
									5760
								],
								[
									5866,
									5884
								],
								[
									6255,
									6280
								],
								[
									6508,
									6512
								],
								[
									6568,
									6589
								],
								[
									6936,
									6943
								],
								[
									6971,
									6984
								],
								[
									7389,
									7433
								],
								[
									8609,
									8613
								],
								[
									8937,
									8941
								],
								[
									9308,
									9318
								],
								[
									9579,
									9583
								],
								[
									9657,
									9661
								],
								[
									9686,
									9703
								],
								[
									9793,
									9800
								],
								[
									9869,
									9879
								],
								[
									9953,
									9964
								],
								[
									10113,
									10118
								],
								[
									10137,
									10163
								],
								[
									10406,
									10422
								],
								[
									10625,
									10639
								],
								[
									11215,
									11222
								],
								[
									11247,
									11269
								],
								[
									11312,
									11319
								],
								[
									11401,
									11411
								],
								[
									11449,
									11464
								],
								[
									11529,
									11536
								],
								[
									11596,
									11621
								],
								[
									11728,
									11764
								],
								[
									12064,
									12077
								],
								[
									12120,
									12138
								],
								[
									12204,
									12222
								],
								[
									12635,
									12669
								],
								[
									14588,
									14615
								],
								[
									15019,
									15059
								],
								[
									15146,
									15150
								],
								[
									15175,
									15181
								],
								[
									15478,
									15523
								],
								[
									15724,
									15743
								],
								[
									16124,
									16138
								],
								[
									16300,
									16311
								],
								[
									16894,
									16898
								],
								[
									16939,
									16946
								],
								[
									17196,
									17223
								],
								[
									17779,
									17783
								],
								[
									17839,
									17843
								],
								[
									17867,
									17871
								],
								[
									18619,
									18630
								]
							],
							"symlist":
							[
								"Rule",
								"Symbol",
								"  constructor(str, id, rule)",
								"  clone()",
								"  toString()",
								"  toCowbird()",
								"  generate()",
								"  sym =>",
								"  toString()",
								"  n =>",
								"  combinations()",
								"\t(a, part, i) =>",
								"  toCowbird(accu, combinations = true)",
								"  match =>",
								"  m =>",
								"  rule =>",
								"Operator",
								"  constructor(op, rule, ...args)",
								"  toString()",
								"  n =>",
								"  clone()",
								"  toCowbird(accu, name)",
								"  arg =>",
								"  str =>",
								"  constructor(grammar, fragment)",
								"  static from(array, grammar)",
								"  parse(productions)",
								"  toString(name, multiline)",
								"  l =>",
								"  toCowbird(accu, name)",
								"  part =>",
								"  match(parser)",
								"  static generate(a, f = 'choice', sep = ', ')",
								"  p =>",
								"  p =>",
								"  generate()",
								"Rule",
								"Self",
								"  constructor(rule)",
								"  clone()",
								"  toString()",
								"  toCowbird()",
								"Match",
								"  constructor(rule, ...args)",
								"  pred = (p, i) =>",
								"  parse(symbols)",
								"Literal",
								"  constructor(str, rule)",
								"  clone()",
								"  toString()",
								"  toCowbird(accu)",
								"Grammar",
								"  constructor(source, file)",
								"  addRule(name, productions, fragment)",
								"  getRule(name)",
								"  parseParentheses()",
								"  addMatches = () =>",
								"  parsePatterns(endTok = [';', '|'])",
								"  isCharMatch(m)",
								"  toRegExp(a, invert = false)",
								"  m =>",
								"  tok =>",
								"  parseRule(startTok = ':', endTok = ';', name)",
								"  addPatterns = () =>",
								"  resolveRules()",
								"  parseLine()",
								"  m =>",
								"  parse()",
								"  generate(dir = '../parse/')",
								"  p =>",
								"  p =>",
								"  m =>",
								"  toCowbird()"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1641906937.59,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 612.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "lib/grammars/xpath.g4",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5506,
						"regions":
						{
						},
						"selection":
						[
							[
								4063,
								4063
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 186,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1641906873.82,
							"tabs_extra_last_activated_sheet_index": 0,
							"tabs_extra_moving":
							[
								2,
								1
							],
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3720.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "test-parse.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1815,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1641906875.16,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 240.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "lib/parse/grammar.js",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18788,
						"regions":
						{
						},
						"selection":
						[
							[
								16383,
								16383
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 590,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1641907239.75,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 11425.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 29.0
	},
	"input":
	{
		"height": 55.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.8,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 139.0
	},
	"output.Debugger: Console":
	{
		"height": 0.0
	},
	"output.Debugger: Protocol":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 259.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "make",
	"project": "plot-cv.sublime-project",
	"replace":
	{
		"height": 74.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"package",
				"package.json"
			],
			[
				"grammar.js",
				"lib/parse/grammar.js"
			],
			[
				"test-parse",
				"test-parse.js"
			],
			[
				"eagle-shell",
				"eagle-shell.js"
			],
			[
				"test-ec",
				"test-ecmascript2.js"
			],
			[
				"lexer",
				"lib/parse/lexer.js"
			],
			[
				"ecmascript.js",
				"lib/ecmascript.js"
			],
			[
				"ast-shell",
				"ast-shell.js"
			],
			[
				"cv-shell",
				"cv-shell.js"
			],
			[
				"cvVide",
				"qjs-opencv/js/cvVideo.js"
			],
			[
				"imgui",
				"cmake/imgui-viewer.cmake"
			],
			[
				"high",
				"cmake/highgui-viewer.cmake"
			],
			[
				"cmakelis",
				"CMakeLists.txt"
			],
			[
				"line.js",
				"lib/geom/line.js"
			],
			[
				"circui",
				"lib/eda/circuitjs.js"
			],
			[
				"eagle-she",
				"eagle-shell.js"
			],
			[
				"cmakelist",
				"CMakeLists.txt"
			],
			[
				"quickjs-xml",
				"quickjs/qjs-modules/quickjs-xml.c"
			],
			[
				"deep.c",
				"quickjs/qjs-modules/quickjs-deep.c"
			],
			[
				"test_xml",
				"quickjs/qjs-modules/tests/test_xml.js"
			],
			[
				"cmakelists",
				"CMakeLists.txt"
			],
			[
				"highgui",
				"cmake/highgui-viewer.cmake"
			],
			[
				"list-ex",
				"list-exports.js"
			],
			[
				"list-exp",
				"list-exports.js"
			],
			[
				"misc.js",
				"lib/misc.js"
			],
			[
				"util.js",
				"quickjs/qjs-modules/lib/util.js"
			],
			[
				"projec",
				"lib/eagle/project.js"
			],
			[
				"agle-she",
				"eagle-shell.js"
			],
			[
				"point",
				"lib/geom/point.js"
			],
			[
				"path.c",
				"quickjs/qjs-modules/path.c"
			],
			[
				"element.",
				"lib/dom/element.js"
			],
			[
				"elemen",
				"lib/eagle/element.js"
			],
			[
				"quickjs-pa",
				"quickjs/qjs-modules/quickjs-path.c"
			],
			[
				"lib/u til",
				"lib/util.js"
			],
			[
				"jslex",
				"quickjs/qjs-modules/lib/jslexer.js"
			],
			[
				"preact.m.",
				"lib/preact.m.js"
			],
			[
				"location.c",
				"quickjs/qjs-modules/location.c"
			],
			[
				"location.h",
				"quickjs/qjs-modules/location.h"
			],
			[
				"lexer.h",
				"quickjs/qjs-modules/lexer.h"
			],
			[
				"lexer.c",
				"quickjs/qjs-modules/lexer.c"
			],
			[
				"quickjs-lexe",
				"quickjs/qjs-modules/quickjs-lexer.c"
			],
			[
				" circui",
				"lib/eda/circuitjs.js"
			],
			[
				"circuit",
				"lib/eda/circuitjs.js"
			],
			[
				"extend",
				"quickjs/qjs-modules/lib/extendArray.js"
			],
			[
				"repl",
				"quickjs/qjs-modules/lib/repl.js"
			],
			[
				"repl.js",
				"quickjs/qjs-modules/lib/repl.js"
			],
			[
				"eagle-s",
				"eagle-shell.js"
			],
			[
				"Rect",
				"lib/geom/rect.js"
			],
			[
				"-xml",
				"quickjs/qjs-modules/quickjs-xml.c"
			],
			[
				"io-help",
				"io-helpers.js"
			],
			[
				"image-he",
				"image-helpers.js"
			],
			[
				"test-video",
				"test-video.js"
			],
			[
				"config.js",
				"config.js"
			],
			[
				"test-mma",
				"test-mmap.js"
			],
			[
				"CMake",
				"CMakeLists.txt"
			],
			[
				"test_free",
				"qjs-opencv/tests/test_freetype.js"
			],
			[
				"portmi",
				"portmidi-testio.c"
			],
			[
				"clang-as",
				"clang-ast.js"
			],
			[
				"portmidi-",
				"portmidi-testio.c"
			],
			[
				"clang-ast",
				"clang-ast.js"
			],
			[
				"clang-list",
				"clang-list.js"
			],
			[
				"test_mmap",
				"quickjs/qjs-modules/tests/test_mmap.js"
			],
			[
				"quickjs.c",
				"quickjs/quickjs.c"
			],
			[
				"quickjs-op",
				"quickjs/quickjs-opcode.h"
			],
			[
				"eagle-comm",
				"eagle-commands.js"
			],
			[
				"quickjs-libc",
				"quickjs/quickjs-libc.c"
			],
			[
				"utils.h",
				"utils.h"
			],
			[
				"eagle-",
				"eagle-commands.js"
			],
			[
				"debugger-ser",
				"debugger-server.js"
			],
			[
				"clang-li",
				"clang-list.js"
			],
			[
				"ast-she",
				"ast-shell.js"
			],
			[
				"util",
				"lib/util.js"
			],
			[
				"main",
				"main.js"
			],
			[
				"eagle-com",
				"eagle-commands.js"
			],
			[
				"ser",
				"server.js"
			],
			[
				"node.js",
				"lib/eagle/node.js"
			],
			[
				"main.js",
				"main.js"
			],
			[
				"server.",
				"server.js"
			],
			[
				"io-h",
				"io-helpers.js"
			],
			[
				"colorCo",
				"lib/eda/colorCoding.js"
			],
			[
				"quickjs-mi",
				"quickjs/qjs-modules/quickjs-misc.c"
			],
			[
				"util.j",
				"quickjs/qjs-modules/lib/util.js"
			],
			[
				"fs.js",
				"quickjs/qjs-modules/lib/fs.js"
			],
			[
				"packa",
				"package.json"
			],
			[
				"xml.js",
				"lib/xml.js"
			],
			[
				"eagle-q",
				"eagle-query.js"
			],
			[
				"eagle-qu",
				"eagle-query.js"
			],
			[
				"componen",
				"components.js"
			],
			[
				"quickjs-in",
				"quickjs/qjs-modules/quickjs-inspect.c"
			],
			[
				"utils.c",
				"quickjs/qjs-modules/utils.c"
			],
			[
				"packag",
				"package.json"
			],
			[
				"plot-cv.cpp",
				"src/plot-cv.cpp"
			],
			[
				"test-im",
				"test-imread.js"
			],
			[
				"test-imre",
				"test-imread.js"
			],
			[
				"test-vid",
				"test-video.js"
			],
			[
				"cvPipe",
				"qjs-opencv/js/cvPipeline.js"
			],
			[
				"list.ht",
				"list.html"
			],
			[
				"debugger.",
				"debugger.html"
			],
			[
				"console.js",
				"quickjs/qjs-modules/lib/console.js"
			],
			[
				"list.htm",
				"list.html"
			],
			[
				"fire",
				"fire.js"
			],
			[
				"useEve",
				"lib/hooks/useEvent.js"
			],
			[
				"ompat.mjs",
				"lib/compat.mjs"
			],
			[
				".mjs",
				"lib/compat.mjs"
			],
			[
				"hooks.mj",
				"lib/hooks.mjs"
			],
			[
				"preact.mjs",
				"preact.mjs"
			],
			[
				"hooks.",
				"lib/hooks.mjs"
			],
			[
				"compat.mj",
				"lib/compat.mjs"
			],
			[
				"preactCom",
				"lib/dom/preactComponent.js"
			],
			[
				"components.",
				"components.js"
			],
			[
				"tlite.css",
				"tlite.css"
			],
			[
				"debugger.css",
				"static/debugger.css"
			],
			[
				"style.css",
				"style.css"
			],
			[
				"useTrkl",
				"lib/hooks/useTrkl.js"
			],
			[
				"compon",
				"components.js"
			],
			[
				"schema",
				"lib/eagle/schematicRenderer.js"
			],
			[
				"commands",
				"commands.js"
			],
			[
				"components",
				"components.js"
			],
			[
				"cvHi",
				"qjs-opencv/js/cvHighGUI.js"
			],
			[
				"test-cv",
				"test-cv.js"
			],
			[
				"align.js",
				"lib/geom/align.js"
			],
			[
				"rect.js",
				"lib/geom/rect.js"
			],
			[
				"qjsm",
				"quickjs/qjs-modules/qjsm.c"
			],
			[
				"cvVid",
				"qjs-opencv/js/cvVideo.js"
			],
			[
				"cvpip",
				"qjs-opencv/js/cvPipeline.js"
			],
			[
				"imagepip",
				"imagePipeline.js"
			],
			[
				"imagePip",
				"imagePipeline.js"
			],
			[
				"usetrkl",
				"lib/hooks/useTrkl.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/quickjs/modules/modules.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 309.0,
		"last_filter": "N",
		"selected_items":
		[
			[
				"N",
				"nb"
			],
			[
				"",
				"$"
			]
		],
		"width": 592.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 317.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
