{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Draw",
				"DrawCircle"
			],
			[
				"exi",
				"existsSync"
			],
			[
				"text",
				"text-decoration"
			],
			[
				"crea",
				"createTextNode"
			],
			[
				"Transform",
				"TransformationList"
			],
			[
				"trans",
				"transformation"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix",
				"name": "ùåÜ Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					3,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				],
				[
					4,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					5,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					6,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/svg.js",
						"symkeys":
						[
							[
								313,
								346
							],
							[
								704,
								732
							],
							[
								769,
								794
							],
							[
								829,
								860
							],
							[
								907,
								933
							],
							[
								1098,
								1127
							],
							[
								1322,
								1341
							],
							[
								1407,
								1426
							],
							[
								1518,
								1541
							],
							[
								1574,
								1589
							],
							[
								1674,
								1696
							],
							[
								1816,
								1870
							],
							[
								2374,
								2404
							],
							[
								3494,
								3520
							],
							[
								3570,
								3620
							],
							[
								4735,
								4782
							],
							[
								4854,
								4875
							],
							[
								4948,
								4972
							],
							[
								5045,
								5073
							],
							[
								5175,
								5195
							],
							[
								5232,
								5236
							],
							[
								5568,
								5599
							],
							[
								5677,
								5723
							],
							[
								6488,
								6518
							],
							[
								6712,
								6732
							],
							[
								7395,
								7427
							],
							[
								7450,
								7513
							],
							[
								7627,
								7634
							],
							[
								7668,
								7691
							],
							[
								7791,
								7809
							],
							[
								7886,
								7912
							],
							[
								8175,
								8208
							],
							[
								8414,
								8444
							],
							[
								8455,
								8473
							],
							[
								8734,
								8753
							],
							[
								8831,
								8850
							],
							[
								8952,
								8967
							],
							[
								9080,
								9095
							],
							[
								9187,
								9205
							],
							[
								9386,
								9405
							],
							[
								9568,
								9584
							],
							[
								9726,
								9741
							],
							[
								9892,
								9916
							],
							[
								10108,
								10131
							],
							[
								10272,
								10302
							],
							[
								10381,
								10410
							],
							[
								11868,
								11886
							],
							[
								12046,
								12069
							],
							[
								12146,
								12169
							],
							[
								12350,
								12376
							],
							[
								12474,
								12486
							],
							[
								12623,
								12649
							],
							[
								12852,
								12876
							],
							[
								13026,
								13039
							],
							[
								13094,
								13107
							],
							[
								14053,
								14068
							],
							[
								14124,
								14139
							],
							[
								14206,
								14224
							],
							[
								14367,
								14389
							],
							[
								14514,
								14520
							],
							[
								14558,
								14571
							],
							[
								15218,
								15241
							],
							[
								15595,
								15612
							],
							[
								15983,
								16000
							],
							[
								16112,
								16137
							],
							[
								16318,
								16350
							],
							[
								16532,
								16558
							],
							[
								16680,
								16708
							],
							[
								17596,
								17620
							],
							[
								17737,
								17763
							],
							[
								17950,
								17955
							],
							[
								17960,
								17982
							],
							[
								18054,
								18075
							],
							[
								18214,
								18233
							],
							[
								18391,
								18425
							],
							[
								20166,
								20184
							],
							[
								20275,
								20281
							],
							[
								20410,
								20414
							],
							[
								20835,
								20840
							],
							[
								20947,
								20951
							],
							[
								21669,
								21716
							],
							[
								23025,
								23029
							],
							[
								23215,
								23230
							],
							[
								24374,
								24379
							],
							[
								24670,
								24675
							],
							[
								25099,
								25104
							],
							[
								28010,
								28019
							],
							[
								28108,
								28115
							],
							[
								28209,
								28216
							],
							[
								28331,
								28341
							],
							[
								28375,
								28380
							],
							[
								28533,
								28537
							],
							[
								29509,
								29519
							],
							[
								29609,
								29622
							],
							[
								29734,
								29739
							],
							[
								29760,
								29780
							],
							[
								29831,
								29838
							],
							[
								29875,
								29885
							],
							[
								30345,
								30354
							],
							[
								30392,
								30404
							],
							[
								30486,
								30499
							],
							[
								30735,
								30755
							],
							[
								30827,
								30864
							],
							[
								30923,
								30929
							],
							[
								30934,
								30954
							],
							[
								30987,
								31013
							],
							[
								32804,
								32823
							],
							[
								32941,
								32963
							],
							[
								33139,
								33169
							],
							[
								33618,
								33640
							],
							[
								33736,
								33759
							],
							[
								33917,
								33924
							],
							[
								34018,
								34043
							],
							[
								35588,
								35601
							],
							[
								35924,
								35942
							],
							[
								35996,
								36015
							],
							[
								36218,
								36230
							],
							[
								37213,
								37222
							],
							[
								37289,
								37299
							],
							[
								38037,
								38054
							],
							[
								38107,
								38125
							],
							[
								38312,
								38328
							],
							[
								38380,
								38397
							],
							[
								38586,
								38603
							],
							[
								38656,
								38682
							],
							[
								39124,
								39131
							],
							[
								39186,
								39218
							],
							[
								39562,
								39578
							],
							[
								39676,
								39702
							],
							[
								39870,
								39876
							],
							[
								39930,
								39961
							],
							[
								40450,
								40466
							],
							[
								40523,
								40539
							],
							[
								40584,
								40593
							],
							[
								40694,
								40704
							],
							[
								40896,
								40908
							],
							[
								42177,
								42192
							],
							[
								42243,
								42259
							],
							[
								42329,
								42338
							],
							[
								42468,
								42482
							],
							[
								42528,
								42548
							],
							[
								43241,
								43258
							],
							[
								43827,
								43852
							],
							[
								43913,
								43939
							],
							[
								44043,
								44063
							],
							[
								44331,
								44334
							],
							[
								44339,
								44359
							],
							[
								44392,
								44403
							],
							[
								44625,
								44637
							],
							[
								45406,
								45416
							],
							[
								45512,
								45522
							],
							[
								45797,
								45806
							],
							[
								45869,
								45879
							],
							[
								45961,
								45973
							],
							[
								46288,
								46300
							],
							[
								46537,
								46574
							],
							[
								46987,
								47002
							],
							[
								47052,
								47069
							],
							[
								47217,
								47230
							],
							[
								47628,
								47645
							],
							[
								47656,
								47673
							],
							[
								47712,
								47725
							],
							[
								48395,
								48416
							],
							[
								48567,
								48595
							],
							[
								48779,
								48797
							],
							[
								50885,
								50889
							],
							[
								50908,
								50938
							],
							[
								51080,
								51109
							],
							[
								51181,
								51196
							],
							[
								51296,
								51301
							],
							[
								51371,
								51380
							],
							[
								51495,
								51526
							],
							[
								51556,
								51570
							],
							[
								51923,
								51942
							],
							[
								52049,
								52081
							],
							[
								52164,
								52179
							],
							[
								52245,
								52265
							],
							[
								52307,
								52330
							],
							[
								52429,
								52457
							],
							[
								52644,
								52677
							],
							[
								52718,
								52748
							],
							[
								52907,
								52960
							],
							[
								53376,
								53392
							],
							[
								53765,
								53810
							],
							[
								54239,
								54255
							],
							[
								55473,
								55518
							],
							[
								55839,
								55850
							],
							[
								55868,
								55886
							],
							[
								55892,
								55922
							],
							[
								55980,
								56000
							],
							[
								56282,
								56308
							],
							[
								56375,
								56391
							],
							[
								56417,
								56433
							],
							[
								56492,
								56521
							],
							[
								56623,
								56660
							],
							[
								56735,
								56756
							],
							[
								56801,
								56816
							],
							[
								57487,
								57495
							],
							[
								57514,
								57534
							],
							[
								57587,
								57594
							],
							[
								57642,
								57651
							],
							[
								57907,
								57924
							],
							[
								58087,
								58096
							],
							[
								58156,
								58163
							],
							[
								58198,
								58208
							],
							[
								58279,
								58288
							],
							[
								58394,
								58403
							],
							[
								58424,
								58444
							],
							[
								58477,
								58490
							],
							[
								58563,
								58577
							],
							[
								58689,
								58706
							],
							[
								59653,
								59666
							],
							[
								59795,
								59807
							],
							[
								59941,
								59954
							],
							[
								60066,
								60075
							],
							[
								60120,
								60128
							],
							[
								60165,
								60175
							],
							[
								60309,
								60318
							],
							[
								60489,
								60518
							],
							[
								60571,
								60599
							],
							[
								60991,
								61006
							],
							[
								61660,
								61675
							],
							[
								62638,
								62641
							],
							[
								62666,
								62690
							],
							[
								62867,
								62882
							],
							[
								63392,
								63408
							],
							[
								63496,
								63506
							],
							[
								63559,
								63574
							],
							[
								63671,
								63678
							],
							[
								63842,
								63881
							],
							[
								64249,
								64266
							],
							[
								64514,
								64538
							],
							[
								64624,
								64631
							],
							[
								64719,
								64725
							],
							[
								64777,
								64793
							],
							[
								64824,
								64840
							],
							[
								64916,
								64928
							],
							[
								64974,
								64999
							],
							[
								65075,
								65081
							],
							[
								65363,
								65377
							],
							[
								65481,
								65487
							],
							[
								65579,
								65596
							],
							[
								65885,
								65897
							],
							[
								66407,
								66422
							],
							[
								66572,
								66588
							],
							[
								66664,
								66672
							],
							[
								66796,
								66818
							],
							[
								66917,
								66933
							],
							[
								67102,
								67134
							],
							[
								67424,
								67446
							],
							[
								67537,
								67547
							],
							[
								67578,
								67589
							],
							[
								67719,
								67729
							],
							[
								67951,
								67967
							],
							[
								68018,
								68029
							],
							[
								68122,
								68148
							],
							[
								69098,
								69109
							],
							[
								70331,
								70338
							],
							[
								70355,
								70379
							],
							[
								70927,
								70939
							],
							[
								71010,
								71015
							],
							[
								71140,
								71145
							],
							[
								71254,
								71260
							],
							[
								71369,
								71380
							],
							[
								71450,
								71459
							],
							[
								71552,
								71561
							],
							[
								71622,
								71638
							],
							[
								71692,
								71706
							],
							[
								71798,
								71808
							],
							[
								72630,
								72645
							],
							[
								72821,
								72827
							],
							[
								72956,
								72966
							],
							[
								73059,
								73078
							],
							[
								73246,
								73258
							],
							[
								73339,
								73355
							],
							[
								73458,
								73462
							],
							[
								73524,
								73528
							],
							[
								73894,
								73916
							],
							[
								74031,
								74043
							],
							[
								74095,
								74107
							],
							[
								74718,
								74754
							],
							[
								75016,
								75047
							],
							[
								75200,
								75228
							],
							[
								75571,
								75599
							],
							[
								75750,
								75779
							],
							[
								76156,
								76181
							],
							[
								76323,
								76347
							],
							[
								76471,
								76524
							],
							[
								76764,
								76788
							],
							[
								76893,
								76919
							],
							[
								77118,
								77136
							],
							[
								77210,
								77235
							],
							[
								77361,
								77381
							],
							[
								78142,
								78164
							],
							[
								78201,
								78217
							],
							[
								78440,
								78462
							],
							[
								78578,
								78598
							],
							[
								78728,
								78742
							],
							[
								78887,
								78901
							],
							[
								79042,
								79070
							],
							[
								79382,
								79410
							],
							[
								79718,
								79736
							],
							[
								79805,
								79836
							],
							[
								80532,
								80541
							],
							[
								80562,
								80571
							],
							[
								80588,
								80599
							],
							[
								80924,
								80946
							],
							[
								81124,
								81128
							],
							[
								81151,
								81182
							],
							[
								81234,
								81243
							],
							[
								81269,
								81278
							],
							[
								81335,
								81340
							],
							[
								81405,
								81420
							],
							[
								81474,
								81489
							],
							[
								81545,
								81560
							],
							[
								81655,
								81670
							],
							[
								81775,
								81791
							],
							[
								81856,
								81872
							],
							[
								81931,
								81954
							],
							[
								82067,
								82092
							],
							[
								82328,
								82335
							],
							[
								82354,
								82385
							],
							[
								82440,
								82459
							],
							[
								82722,
								82758
							],
							[
								82874,
								82882
							],
							[
								83016,
								83042
							],
							[
								83613,
								83632
							],
							[
								83869,
								83886
							],
							[
								84195,
								84203
							],
							[
								84226,
								84250
							],
							[
								84385,
								84398
							],
							[
								84490,
								84496
							],
							[
								84527,
								84536
							],
							[
								84637,
								84647
							],
							[
								84701,
								84714
							],
							[
								84909,
								84914
							],
							[
								85067,
								85084
							],
							[
								85205,
								85227
							],
							[
								85341,
								85348
							],
							[
								85392,
								85423
							],
							[
								85516,
								85529
							],
							[
								85620,
								85626
							],
							[
								85657,
								85666
							],
							[
								85767,
								85777
							],
							[
								85844,
								85857
							],
							[
								86050,
								86055
							],
							[
								86177,
								86193
							],
							[
								86291,
								86322
							],
							[
								86558,
								86563
							],
							[
								86582,
								86613
							],
							[
								86687,
								86706
							],
							[
								86812,
								86829
							],
							[
								87355,
								87366
							],
							[
								87523,
								87550
							],
							[
								87820,
								87831
							],
							[
								88011,
								88038
							],
							[
								88159,
								88169
							],
							[
								88223,
								88229
							],
							[
								88351,
								88364
							],
							[
								88607,
								88617
							],
							[
								88946,
								88967
							],
							[
								89716,
								89735
							],
							[
								90124,
								90132
							],
							[
								90278,
								90288
							],
							[
								90480,
								90492
							],
							[
								90604,
								90617
							],
							[
								90985,
								91000
							],
							[
								91111,
								91126
							],
							[
								91222,
								91245
							],
							[
								91364,
								91389
							],
							[
								91613,
								91617
							],
							[
								91657,
								91688
							],
							[
								91756,
								91763
							],
							[
								91921,
								91931
							],
							[
								92033,
								92053
							],
							[
								92356,
								92375
							],
							[
								92619,
								92637
							],
							[
								92791,
								92795
							],
							[
								92925,
								92931
							],
							[
								92975,
								93006
							],
							[
								93088,
								93102
							],
							[
								93157,
								93171
							],
							[
								93251,
								93260
							],
							[
								93343,
								93353
							],
							[
								93420,
								93433
							],
							[
								93632,
								93644
							],
							[
								93734,
								93749
							],
							[
								93905,
								93936
							],
							[
								94299,
								94335
							],
							[
								94759,
								94790
							],
							[
								94801,
								94813
							],
							[
								94934,
								94952
							],
							[
								94978,
								94997
							],
							[
								95054,
								95072
							],
							[
								95124,
								95142
							],
							[
								95199,
								95231
							],
							[
								95309,
								95321
							],
							[
								95944,
								95988
							],
							[
								96270,
								96297
							],
							[
								96753,
								96760
							],
							[
								96765,
								96771
							],
							[
								96850,
								96854
							],
							[
								96875,
								96906
							],
							[
								96962,
								96981
							],
							[
								97165,
								97175
							],
							[
								97196,
								97211
							],
							[
								97256,
								97263
							],
							[
								97291,
								97319
							],
							[
								97377,
								97399
							],
							[
								97836,
								97842
							],
							[
								97866,
								97908
							],
							[
								97980,
								98008
							],
							[
								98900,
								98903
							],
							[
								98927,
								98979
							],
							[
								99041,
								99069
							],
							[
								99906,
								99927
							],
							[
								100011,
								100028
							],
							[
								100100,
								100117
							],
							[
								100167,
								100184
							],
							[
								100234,
								100251
							],
							[
								100347,
								100364
							],
							[
								100448,
								100465
							],
							[
								100549,
								100566
							],
							[
								100638,
								100659
							],
							[
								100719,
								100736
							],
							[
								100968,
								100980
							],
							[
								100993,
								101012
							],
							[
								101394,
								101422
							],
							[
								101542,
								101574
							],
							[
								101695,
								101734
							],
							[
								102200,
								102241
							],
							[
								102544,
								102576
							],
							[
								102719,
								102745
							],
							[
								102940,
								102970
							],
							[
								103092,
								103133
							],
							[
								105120,
								105145
							],
							[
								105753,
								105762
							],
							[
								105814,
								105820
							],
							[
								105955,
								105965
							],
							[
								106892,
								106909
							],
							[
								107060,
								107079
							],
							[
								108855,
								108865
							],
							[
								108913,
								108939
							],
							[
								109570,
								109579
							],
							[
								109584,
								109604
							],
							[
								109779,
								109786
							],
							[
								109885,
								109891
							],
							[
								109960,
								109981
							],
							[
								110052,
								110061
							],
							[
								110173,
								110189
							],
							[
								110290,
								110297
							],
							[
								110405,
								110415
							],
							[
								110547,
								110558
							],
							[
								111160,
								111172
							],
							[
								111263,
								111275
							],
							[
								111280,
								111300
							],
							[
								111333,
								111342
							],
							[
								111435,
								111444
							],
							[
								111478,
								111487
							],
							[
								111525,
								111537
							],
							[
								111542,
								111562
							],
							[
								111595,
								111604
							],
							[
								111941,
								111950
							],
							[
								112228,
								112249
							],
							[
								112310,
								112319
							],
							[
								112324,
								112344
							],
							[
								112377,
								112389
							],
							[
								113432,
								113446
							],
							[
								113868,
								113883
							],
							[
								113931,
								113940
							],
							[
								113973,
								113982
							],
							[
								114395,
								114436
							],
							[
								114484,
								114508
							],
							[
								114542,
								114549
							],
							[
								114691,
								114705
							],
							[
								114760,
								114774
							],
							[
								114817,
								114855
							],
							[
								114870,
								114897
							],
							[
								115050,
								115054
							],
							[
								115094,
								115125
							],
							[
								115193,
								115200
							],
							[
								115306,
								115313
							],
							[
								115391,
								115405
							],
							[
								115531,
								115541
							],
							[
								115622,
								115629
							],
							[
								115811,
								115830
							],
							[
								115984,
								115996
							],
							[
								116132,
								116136
							],
							[
								116255,
								116259
							],
							[
								116363,
								116367
							],
							[
								116522,
								116534
							],
							[
								116698,
								116714
							],
							[
								116818,
								116834
							],
							[
								116904,
								116925
							],
							[
								117003,
								117019
							],
							[
								117199,
								117229
							],
							[
								117473,
								117480
							],
							[
								117520,
								117551
							],
							[
								117710,
								117722
							],
							[
								117938,
								117946
							],
							[
								117986,
								118017
							],
							[
								118178,
								118190
							],
							[
								118411,
								118415
							],
							[
								118455,
								118486
							],
							[
								118658,
								118682
							],
							[
								118786,
								118791
							],
							[
								118796,
								118809
							],
							[
								118907,
								118914
							],
							[
								119009,
								119015
							],
							[
								119067,
								119078
							],
							[
								119642,
								119654
							],
							[
								119961,
								119968
							],
							[
								120382,
								120394
							],
							[
								120466,
								120475
							],
							[
								120816,
								120834
							],
							[
								121286,
								121299
							],
							[
								121602,
								121619
							],
							[
								121679,
								121697
							],
							[
								121759,
								121780
							],
							[
								121844,
								121854
							],
							[
								123025,
								123060
							],
							[
								123289,
								123315
							],
							[
								123397,
								123405
							],
							[
								123481,
								123520
							],
							[
								123661,
								123669
							],
							[
								123708,
								123716
							],
							[
								123866,
								123878
							],
							[
								124139,
								124161
							],
							[
								124203,
								124207
							],
							[
								124283,
								124302
							],
							[
								124366,
								124387
							],
							[
								124459,
								124466
							],
							[
								124529,
								124549
							],
							[
								124658,
								124664
							],
							[
								124807,
								124819
							],
							[
								125058,
								125087
							],
							[
								126678,
								126687
							],
							[
								126748,
								126755
							],
							[
								126831,
								126839
							],
							[
								126887,
								126897
							],
							[
								126994,
								127006
							],
							[
								127099,
								127105
							],
							[
								127186,
								127196
							],
							[
								127344,
								127362
							],
							[
								127633,
								127645
							],
							[
								127810,
								127842
							],
							[
								128075,
								128105
							],
							[
								131554,
								131565
							],
							[
								132272,
								132300
							],
							[
								132522,
								132528
							],
							[
								132553,
								132573
							],
							[
								133982,
								134020
							],
							[
								135164,
								135179
							],
							[
								135369,
								135392
							],
							[
								135461,
								135470
							],
							[
								135515,
								135545
							],
							[
								135813,
								135829
							],
							[
								135964,
								135990
							],
							[
								136120,
								136127
							],
							[
								136186,
								136198
							],
							[
								136242,
								136252
							],
							[
								136330,
								136340
							],
							[
								136382,
								136390
							],
							[
								136629,
								136645
							],
							[
								136776,
								136784
							],
							[
								136825,
								136849
							],
							[
								137284,
								137292
							],
							[
								137776,
								137796
							],
							[
								137905,
								137916
							],
							[
								138532,
								138547
							],
							[
								139420,
								139431
							],
							[
								139694,
								139739
							],
							[
								140051,
								140058
							],
							[
								140163,
								140179
							],
							[
								140269,
								140300
							],
							[
								140763,
								140771
							],
							[
								142581,
								142591
							],
							[
								142724,
								142742
							],
							[
								142935,
								142947
							],
							[
								143115,
								143135
							],
							[
								143853,
								143886
							],
							[
								144487,
								144505
							],
							[
								145154,
								145189
							],
							[
								146074,
								146084
							],
							[
								146232,
								146258
							],
							[
								146297,
								146314
							],
							[
								146462,
								146489
							],
							[
								146519,
								146549
							],
							[
								146569,
								146595
							],
							[
								146959,
								146970
							],
							[
								146975,
								146988
							],
							[
								147039,
								147050
							],
							[
								147206,
								147221
							],
							[
								147379,
								147383
							],
							[
								147438,
								147457
							],
							[
								147612,
								147623
							],
							[
								147683,
								147691
							],
							[
								147728,
								147735
							],
							[
								148506,
								148516
							],
							[
								148687,
								148717
							],
							[
								148938,
								148953
							],
							[
								149269,
								149312
							],
							[
								149391,
								149417
							],
							[
								149694,
								149703
							],
							[
								149827,
								149845
							],
							[
								150224,
								150240
							],
							[
								150470,
								150492
							],
							[
								150502,
								150506
							],
							[
								150543,
								150553
							],
							[
								150631,
								150640
							],
							[
								150690,
								150723
							],
							[
								151037,
								151053
							],
							[
								151125,
								151144
							],
							[
								151244,
								151270
							],
							[
								152356,
								152374
							],
							[
								152527,
								152543
							],
							[
								152610,
								152629
							],
							[
								152725,
								152759
							],
							[
								153450,
								153489
							],
							[
								154136,
								154156
							],
							[
								154643,
								154664
							],
							[
								155508,
								155512
							],
							[
								156310,
								156346
							],
							[
								156881,
								156885
							],
							[
								156956,
								156960
							],
							[
								157008,
								157013
							],
							[
								157062,
								157067
							],
							[
								157116,
								157125
							],
							[
								157178,
								157187
							],
							[
								157240,
								157251
							],
							[
								157290,
								157319
							],
							[
								157617,
								157633
							],
							[
								157745,
								157764
							],
							[
								157856,
								157877
							],
							[
								158092,
								158116
							],
							[
								158364,
								158380
							],
							[
								158440,
								158459
							],
							[
								158705,
								158732
							],
							[
								158832,
								158837
							],
							[
								158916,
								158921
							],
							[
								158995,
								159005
							],
							[
								159042,
								159053
							],
							[
								159119,
								159131
							],
							[
								159195,
								159214
							],
							[
								159575,
								159587
							],
							[
								159670,
								159684
							],
							[
								159767,
								159783
							],
							[
								160061,
								160077
							],
							[
								160134,
								160153
							],
							[
								160339,
								160353
							],
							[
								160439,
								160467
							],
							[
								160548,
								160557
							],
							[
								161008,
								161011
							],
							[
								161034,
								161065
							],
							[
								161177,
								161183
							],
							[
								161317,
								161325
							],
							[
								161513,
								161524
							],
							[
								161692,
								161709
							],
							[
								161945,
								161951
							],
							[
								162117,
								162128
							],
							[
								162215,
								162221
							],
							[
								162265,
								162296
							],
							[
								162413,
								162424
							],
							[
								162534,
								162554
							],
							[
								162781,
								162798
							],
							[
								162936,
								162963
							],
							[
								162969,
								162970
							],
							[
								163089,
								163116
							],
							[
								163122,
								163123
							],
							[
								163221,
								163254
							],
							[
								163260,
								163261
							],
							[
								163329,
								163355
							],
							[
								163361,
								163362
							],
							[
								163490,
								163516
							],
							[
								163522,
								163523
							],
							[
								163623,
								163656
							],
							[
								163662,
								163663
							],
							[
								163705,
								163719
							],
							[
								163752,
								163766
							],
							[
								163799,
								163819
							],
							[
								163883,
								163904
							],
							[
								164155,
								164159
							],
							[
								164199,
								164230
							],
							[
								164624,
								164638
							],
							[
								164853,
								164869
							],
							[
								165160,
								165172
							],
							[
								165775,
								165785
							],
							[
								165885,
								165901
							],
							[
								166018,
								166028
							],
							[
								167332,
								167352
							],
							[
								167471,
								167491
							],
							[
								167587,
								167592
							],
							[
								167632,
								167663
							],
							[
								167807,
								167813
							],
							[
								167872,
								167878
							],
							[
								167941,
								167950
							],
							[
								168468,
								168478
							],
							[
								168838,
								168858
							],
							[
								169082,
								169110
							],
							[
								169201,
								169207
							],
							[
								169226,
								169257
							],
							[
								169311,
								169320
							],
							[
								169380,
								169386
							],
							[
								169453,
								169459
							],
							[
								169492,
								169502
							],
							[
								169760,
								169779
							],
							[
								169891,
								169899
							],
							[
								169922,
								169953
							],
							[
								170061,
								170069
							],
							[
								170125,
								170138
							],
							[
								170237,
								170246
							],
							[
								170406,
								170417
							],
							[
								170537,
								170546
							],
							[
								170602,
								170619
							],
							[
								170884,
								170892
							],
							[
								170991,
								171004
							],
							[
								171025,
								171056
							],
							[
								171187,
								171211
							],
							[
								171336,
								171358
							],
							[
								171387,
								171395
							],
							[
								172009,
								172024
							],
							[
								172057,
								172072
							],
							[
								172105,
								172140
							],
							[
								172146,
								172147
							],
							[
								172236,
								172275
							],
							[
								172281,
								172282
							],
							[
								172364,
								172404
							],
							[
								172410,
								172411
							],
							[
								172574,
								172582
							],
							[
								172720,
								172753
							],
							[
								172759,
								172760
							],
							[
								172847,
								172872
							],
							[
								172878,
								172879
							],
							[
								172949,
								172974
							],
							[
								172980,
								172981
							],
							[
								173220,
								173221
							],
							[
								173244,
								173275
							],
							[
								173446,
								173457
							],
							[
								173532,
								173533
							],
							[
								173556,
								173587
							],
							[
								173664,
								173678
							],
							[
								173742,
								173749
							],
							[
								173925,
								173939
							],
							[
								174011,
								174019
							],
							[
								174301,
								174312
							],
							[
								174601,
								174609
							],
							[
								174794,
								174798
							],
							[
								174842,
								174873
							],
							[
								174976,
								174984
							],
							[
								175040,
								175053
							],
							[
								175148,
								175157
							],
							[
								175281,
								175292
							],
							[
								175404,
								175412
							],
							[
								175463,
								175480
							],
							[
								175734,
								175742
							],
							[
								175828,
								175832
							],
							[
								175853,
								175884
							],
							[
								175958,
								175967
							],
							[
								176443,
								176481
							],
							[
								176589,
								176621
							],
							[
								176822,
								176827
							],
							[
								176848,
								176879
							],
							[
								176932,
								176947
							],
							[
								177005,
								177033
							],
							[
								177143,
								177162
							],
							[
								177247,
								177267
							],
							[
								177331,
								177358
							],
							[
								177460,
								177468
							],
							[
								177507,
								177538
							],
							[
								177643,
								177650
							],
							[
								177755,
								177762
							],
							[
								177952,
								177959
							],
							[
								178068,
								178089
							],
							[
								178330,
								178366
							],
							[
								179005,
								179015
							],
							[
								179147,
								179162
							],
							[
								179410,
								179419
							],
							[
								179467,
								179474
							],
							[
								179696,
								179704
							],
							[
								179778,
								179781
							],
							[
								179800,
								179831
							],
							[
								179915,
								179933
							],
							[
								180122,
								180146
							]
						],
						"symlist":
						[
							"function registerMethods(name, m)",
							"function getMethodsFor(name)",
							"function getMethodNames()",
							"function addMethodNames(_names)",
							"function map(array, block)",
							"function filter(array, block)",
							"function radians(d)",
							"function degrees(r)",
							"function unCamelCase(s)",
							" function(m, g)",
							"function capitalize(s)",
							"function proportionalSize(element, width, height, box)",
							"function getOrigin(o, element)",
							"isDescriptive = element =>",
							"writeDataToDom = (element, data, defaults = {}) =>",
							"function registerWindow(win = null, doc = null)",
							"function saveWindow()",
							"function restoreWindow()",
							"function withWindow(win, fn)",
							"function getWindow()",
							"Base",
							"function create(name, ns = svg)",
							"function makeInstance(element, isHTML = false)",
							"function nodeOrNew(name, node)",
							"function adopt(node)",
							"function mockAdopt(mock = adopt)",
							"function register(element, name = element.name, asRoot = false)",
							"element",
							"function getClass(name)",
							"function eid(name)",
							"function assignNewId(node)",
							"function extend(modules, methods)",
							"function wrapWithAttrCheck(fn)",
							" function(...args)",
							"function siblings()",
							"function position()",
							"function next()",
							"function prev()",
							"function forward()",
							"function backward()",
							"function front()",
							"function back()",
							"function before(element)",
							"function after(element)",
							"function insertBefore(element)",
							"function insertAfter(element)",
							"function classes()",
							"function hasClass(name)",
							"function addClass(name)",
							"function removeClass(name)",
							"function (c)",
							"function toggleClass(name)",
							"function css(style, val)",
							"function (el)",
							"function (el)",
							"function show()",
							"function hide()",
							"function visible()",
							"function data(a, v, r)",
							" el =>",
							" el =>",
							"function remember(k, v)",
							"function forget()",
							"function memory()",
							"function sixDigitHex(hex)",
							"function componentHex(component)",
							"function is(object, space)",
							"function getParameters(a, b)",
							"function cieSpace(space)",
							"function hueToRgb(p, q, t)",
							"Color",
							"constructor(...inputs)",
							"static isColor(color)",
							"static isRgb(color)",
							"static random(mode = 'vibrant', t)",
							"static test(color)",
							"cmyk()",
							"v =>",
							"hsl()",
							"v =>",
							"init(a = 0, b = 0, c = 0, d = 0, space = 'rgb')",
							"v =>",
							"hexParse = v =>",
							"lab()",
							"lch()",
							"rgb()",
							"toArray()",
							"toHex()",
							"toRgb()",
							"toString()",
							"xyz()",
							"v =>",
							"_clamped()",
							"format = v =>",
							"Point",
							"constructor(...args)",
							"clone()",
							"init(x, y)",
							"toArray()",
							"transform(m)",
							"transformO(m)",
							"function point(x, y)",
							"function closeEnough(a, b, threshold)",
							"Matrix",
							"constructor(...args)",
							"static formatTransforms(o)",
							"static fromArray(a)",
							"static isMatrixLike(o)",
							"static matrixMultiply(l, r, o)",
							"around(cx, cy, matrix)",
							"aroundO(cx, cy, matrix)",
							"clone()",
							"decompose(cx = 0, cy = 0)",
							"equals(other)",
							"flip(axis, around)",
							"flipO(axis, around)",
							"init(source)",
							"inverse()",
							"inverseO()",
							"lmultiply(matrix)",
							"lmultiplyO(matrix)",
							"multiply(matrix)",
							"multiplyO(matrix)",
							"rotate(r, cx, cy)",
							"rotateO(r, cx = 0, cy = 0)",
							"scale()",
							"scaleO(x, y = x, cx = 0, cy = 0)",
							"shear(a, cx, cy)",
							"shearO(lx, cx = 0, cy = 0)",
							"skew()",
							"skewO(x, y = x, cx = 0, cy = 0)",
							"skewX(x, cx, cy)",
							"skewY(y, cx, cy)",
							"toArray()",
							"toString()",
							"transform(o)",
							"translate(x, y)",
							"translateO(x, y)",
							"valueOf()",
							"function ctm()",
							"function screenCTM()",
							"function parser()",
							"function isNulledBox(box)",
							"function domContains(node)",
							" function(node)",
							"Box",
							"constructor(...args)",
							"addOffset()",
							"init(source)",
							"isNulled()",
							"merge(box)",
							"toArray()",
							"toString()",
							"transform(m)",
							"function (p)",
							"function getBox(el, getBBoxFn, retry)",
							"function bbox()",
							"getBBox = node =>",
							"retry = el =>",
							"function rbox(el)",
							"getRBox = node =>",
							"retry = el =>",
							"function inside(x, y)",
							"viewbox(x, y, width, height)",
							"zoom(level, point)",
							"List",
							"constructor(arr = [], ...args)",
							"each(fnOrMethodName, ...args)",
							"(el, i, arr) =>",
							"el =>",
							"toArray()",
							"List.extend = function(methods)",
							"(obj, name) =>",
							" function(...attrs)",
							"function baseFind(query, parent)",
							" function(node)",
							"function find(query)",
							"function findOne(query)",
							"function getEvents(instance)",
							"function getEventTarget(instance)",
							"function clearEvents(instance)",
							"function on(node, events, listener, binding, options)",
							"function (event)",
							"function off(node, events, listener, options)",
							"function (event)",
							"function dispatch(node, event, data, options)",
							"EventTarget",
							"addEventListener()",
							"dispatch(event, data, options)",
							"dispatchEvent(event)",
							"fire(event, data, options)",
							"getEventHolder()",
							"getEventTarget()",
							"off(event, listener, options)",
							"on(event, listener, binding, options)",
							"removeEventListener()",
							"function noop()",
							"SVGArray",
							"constructor(...args)",
							"clone()",
							"init(arr)",
							"parse(array = [])",
							"toArray()",
							"toSet()",
							"toString()",
							"valueOf()",
							"SVGNumber",
							"constructor(...args)",
							"convert(unit)",
							"divide(number)",
							"init(value, unit)",
							"minus(number)",
							"plus(number)",
							"times(number)",
							"toArray()",
							"toJSON()",
							"toString()",
							"valueOf()",
							"function registerAttrHook(fn)",
							"function attr(attr, val, ns)",
							"(last, curr) =>",
							"(_val, hook) =>",
							"Dom",
							"constructor(node, attrs)",
							"add(element, i)",
							"addTo(parent, i)",
							"children()",
							" function(node)",
							"clear()",
							"clone(deep = true, assignNewIds = true)",
							"each(block, deep)",
							"element(nodeName, attrs)",
							"first()",
							"get(i)",
							"getEventHolder()",
							"getEventTarget()",
							"has(element)",
							"html(htmlOrFn, outerHTML)",
							"id(id)",
							"index(element)",
							"last()",
							"matches(selector)",
							"parent(type)",
							"put(element, i)",
							"putIn(parent, i)",
							"remove()",
							"removeElement(element)",
							"replace(element)",
							"round(precision = 2, map = null)",
							"svg(svgOrFn, outerSVG)",
							"toString()",
							"words(text)",
							"wrap(node)",
							"writeDataToDom()",
							"function ()",
							"xml(xmlOrFn, outerXML, ns)",
							"function ()",
							"Element",
							"constructor(node, attrs)",
							"center(x, y)",
							"cx(x)",
							"cy(y)",
							"defs()",
							"dmove(x, y)",
							"dx(x = 0)",
							"dy(y = 0)",
							"getEventHolder()",
							"height(height)",
							"move(x, y)",
							"reference(attr)",
							"root()",
							"setData(o)",
							"size(width, height)",
							"width(width)",
							"writeDataToDom()",
							"x(x)",
							"y(y)",
							"prefix: function(t, a)",
							"function (m)",
							" function(o)",
							"matrix: function(mat, b, c, d, e, f)",
							"rotate: function(angle, cx, cy)",
							"skew: function(x, y, cx, cy)",
							"shear: function(lam, cx, cy)",
							"scale: function(x, y, cx, cy)",
							"translate: function(x, y)",
							"relative: function(x, y)",
							"flip: function(direction = 'both', origin = 'center')",
							"opacity: function(value)",
							"radius: function(x, y = x)",
							"length: function()",
							"pointAt: function(length)",
							"font: function(a, v)",
							"function (last, event)",
							"fn = function(f)",
							"function untransform()",
							"function matrixify()",
							"function (str)",
							"function (str)",
							"function (matrix, transform)",
							"function toParent(parent, i)",
							"function toRoot(i)",
							"function transform(o, relative)",
							"Container",
							"flatten()",
							"function ()",
							"function (i, children)",
							"Defs",
							"constructor(node, attrs = node)",
							"flatten()",
							"ungroup()",
							"Shape",
							"function rx(rx)",
							"function ry(ry)",
							"function x$3(x)",
							"function y$3(y)",
							"function cx$1(x)",
							"function cy$1(y)",
							"function width$2(width)",
							"function height$2(height)",
							"Ellipse",
							"constructor(node, attrs = node)",
							"size(width, height)",
							"function (width = 0, height = width)",
							"Fragment",
							"xml(xmlOrFn, outerXML, ns)",
							"function from(x, y)",
							"function to(x, y)",
							"Gradient",
							"constructor(type, attrs)",
							"attr(a, b, c)",
							"bbox()",
							"targets()",
							"toString()",
							"update(block)",
							"url()",
							"gradient(...args)",
							"function (type, block)",
							"Pattern",
							"constructor(node, attrs = node)",
							"attr(a, b, c)",
							"bbox()",
							"targets()",
							"toString()",
							"update(block)",
							"url()",
							"pattern(...args)",
							"function (width, height, block)",
							"Image",
							"constructor(node, attrs = node)",
							"load(url, callback)",
							" function(e)",
							" function()",
							"function (attr, val, _this)",
							" pattern =>",
							"function (source, callback)",
							"PointArray",
							"bbox()",
							"function (el)",
							"move(x, y)",
							"parse(array = [0, 0])",
							"size(width, height)",
							"toLine()",
							"toString()",
							"transform(m)",
							"transformO(m)",
							"function x$2(x)",
							"function y$2(y)",
							"function width$1(width)",
							"function height$1(height)",
							"Line",
							"constructor(node, attrs = node)",
							"array()",
							"move(x, y)",
							"plot(x1, y1, x2, y2)",
							"size(width, height)",
							"function (...args)",
							"Line",
							"Marker",
							"constructor(node, attrs = node)",
							"height(height)",
							"orient(orient)",
							"ref(x, y)",
							"toString()",
							"update(block)",
							"width(width)",
							"marker(...args)",
							"function (width, height, block)",
							"marker(marker, width, height, block)",
							"function makeSetterGetter(k, f)",
							" function(v)",
							"'-': function(pos)",
							"'<>': function(pos)",
							"'>': function(pos)",
							"'<': function(pos)",
							"bezier: function(x1, y1, x2, y2)",
							" function(t)",
							"steps: function(steps, stepPosition = 'end')",
							" (t, beforeFlag = false) =>",
							"Stepper",
							"done()",
							"Ease",
							"constructor(fn = timeline.ease)",
							"step(from, to, pos)",
							"Controller",
							"constructor(fn)",
							"done(c)",
							"step(current, target, dt, c)",
							"function recalculate()",
							"Spring",
							"constructor(duration = 500, overshoot = 0)",
							"step(current, target, dt, c)",
							"PID",
							"constructor(p = 0.1, i = 0.01, d = 0, windup = 1000)",
							"step(current, target, dt, c)",
							"M: function(c, p, p0)",
							"L: function(c, p)",
							"H: function(c, p)",
							"V: function(c, p)",
							"C: function(c, p)",
							"S: function(c, p)",
							"Q: function(c, p)",
							"T: function(c, p)",
							"Z: function(c, p, p0)",
							"A: function(c, p)",
							"function (i)",
							" function(c, p, p0)",
							"function makeAbsolut(parser)",
							"function segmentComplete(parser)",
							"function startNewSegment(parser, token)",
							"function finalizeNumber(parser, inNumber)",
							"function finalizeSegment(parser)",
							"function isArcFlag(parser)",
							"function isExponential(parser)",
							"function pathParser(d, toAbsolute = true)",
							"function arrayToString(a)",
							"PathArray",
							"bbox()",
							"move(x, y)",
							"parse(d = 'M0 0')",
							"size(width, height)",
							"toString()",
							"getClassForType = value =>",
							"Morphable",
							"constructor(stepper)",
							"at(pos)",
							"done()",
							"function (last, curr)",
							"from(val)",
							"stepper(stepper)",
							"to(val)",
							"type(type)",
							"_set(value)",
							"function (o)",
							"NonMorphable",
							"constructor(...args)",
							"init(val)",
							"toArray()",
							"valueOf()",
							"TransformBag",
							"constructor(...args)",
							"init(obj)",
							"toArray()",
							"sortByKey = (a, b) =>",
							"ObjectBag",
							"constructor(...args)",
							"align(other)",
							"init(objOrArr)",
							"(last, curr) =>",
							"toArray()",
							"valueOf()",
							"function registerMorphableType(type = [])",
							"function makeMorphable()",
							"to(val)",
							"fromArray(arr)",
							"toConsumable()",
							"morph(from, to, pos, stepper, context)",
							"mapper = function(i, index)",
							"Path",
							"constructor(node, attrs = node)",
							"array()",
							"clear()",
							"height(height)",
							"move(x, y)",
							"plot(d)",
							"size(width, height)",
							"width(width)",
							"x(x)",
							"y(y)",
							"Path",
							"function (d)",
							"function array()",
							"function clear()",
							"function move$2(x, y)",
							"function plot(p)",
							"function size$1(width, height)",
							"Polygon",
							"constructor(node, attrs = node)",
							"function (p)",
							"Polyline",
							"constructor(node, attrs = node)",
							"function (p)",
							"Rect",
							"constructor(node, attrs = node)",
							"function (width, height)",
							"Queue",
							"constructor()",
							"first()",
							"last()",
							"push(value)",
							"remove(item)",
							"shift()",
							"timer: () =>",
							"frame(fn)",
							"timeout(fn, delay)",
							"immediate(fn)",
							"cancelFrame(node)",
							"clearTimeout(node)",
							"cancelImmediate(node)",
							"_draw(now)",
							"makeSchedule = function(runnerInfo)",
							"defaultSource = function()",
							"Timeline",
							"constructor(timeSource = defaultSource)",
							"active()",
							"finish()",
							"getEndTime()",
							"getEndTimeOfTimeline()",
							"i =>",
							"getLastRunnerInfo()",
							"getRunnerInfoById(id)",
							"pause()",
							"persist(dtOrForever)",
							"play()",
							"reverse(yes)",
							"schedule(runner, delay, when)",
							"(a, b) =>",
							"info =>",
							"seek(dt)",
							"source(fn)",
							"speed(speed)",
							"stop()",
							"time(time)",
							"unschedule(runner)",
							"updateTime()",
							"_continue(immediateStep = false)",
							"_stepFn(immediateStep = false)",
							"terminate()",
							"timeline: function(timeline)",
							"Runner",
							"constructor(options)",
							"static sanitise(duration, delay, when)",
							"active(enabled)",
							"addTransform(transform)",
							"after(fn)",
							"animate(duration, delay, when)",
							"clearTransform()",
							"clearTransformsFromQueue()",
							"item =>",
							"delay(delay)",
							"duration()",
							"during(fn)",
							"ease(fn)",
							"element(element)",
							"finish()",
							"loop(times, swing, wait)",
							"loops(p)",
							"persist(dtOrForever)",
							"position(p)",
							"f = function(x)",
							"progress(p)",
							"queue(initFn, runFn, retargetFn, isTransform)",
							"reset()",
							"reverse(reverse)",
							"schedule(timeline, delay, when)",
							"step(dt)",
							"time(time)",
							"timeline(timeline)",
							"unschedule()",
							"_initialise(running)",
							"_rememberMorpher(method, morpher)",
							"_run(positionOrDt)",
							"_tryRetarget(method, target, extra)",
							"FakeRunner",
							"clearTransformsFromQueue()",
							"mergeWith(runner)",
							"lmultiply = (last, curr) =>",
							"getRunnerTransform = runner =>",
							"function mergeTransforms()",
							"RunnerArray",
							"constructor()",
							"add(runner)",
							"clearBefore(id)",
							"r =>",
							"edit(id, newRunner)",
							"getByID(id)",
							"length()",
							"merge()",
							"remove(id)",
							"animate(duration, delay, when)",
							"delay(by, when)",
							"_clearTransformRunnersBefore(currentRunner)",
							"_currentTransform(current)",
							"runner =>",
							"_addRunner(runner)",
							"_prepareRunner()",
							"difference = (a, b) =>",
							"x =>",
							"attr(a, v)",
							"css(s, v)",
							"styleAttr(type, nameOrAttrs, val)",
							" function()",
							" function(pos)",
							" function(newToAttrs)",
							"zoom(level, point)",
							" function()",
							" function(pos)",
							" function(newLevel, newPoint)",
							"transform(transforms, relative, affine)",
							" function setup()",
							" function run(pos)",
							"a =>",
							" function retarget(newTransforms)",
							"x(x)",
							"y(y)",
							"ax(x)",
							"ay(y)",
							"dx(x = 0)",
							"dy(y = 0)",
							"dmove(x, y)",
							"_queueNumberDelta(method, to)",
							" function()",
							" function(pos)",
							" function(newTo)",
							"_queueObject(method, to)",
							" function()",
							" function(pos)",
							"_queueNumber(method, value)",
							"cx(x)",
							"cy(y)",
							"move(x, y)",
							"amove(x, y)",
							"center(x, y)",
							"size(width, height)",
							"width(width)",
							"height(height)",
							"plot(a, b, c, d)",
							" function()",
							" function(pos)",
							"leading(value)",
							"viewbox(x, y, width, height)",
							"update(o)",
							"Svg",
							"constructor(node, attrs = node)",
							"defs()",
							"isRoot()",
							"namespace()",
							"removeNamespace()",
							"root()",
							"function ()",
							"Symbol",
							"constructor(node, attrs = node)",
							"function ()",
							"function plain(text)",
							"function length()",
							"function x$1(x, box = this.",
							")",
							"function y$1(y, box = this.",
							")",
							"function move$1(x, y, box = this.",
							")",
							"function cx(x, box = this.",
							")",
							"function cy(y, box = this.",
							")",
							"function center(x, y, box = this.",
							")",
							"function ax(x)",
							"function ay(y)",
							"function amove(x, y)",
							"function build(build)",
							"Text",
							"constructor(node, attrs = node)",
							"leading(value)",
							"rebuild(rebuild)",
							"function (i)",
							"setData(o)",
							"writeDataToDom()",
							"text(text)",
							"function (text = '')",
							"function (text = '')",
							"Tspan",
							"constructor(node, attrs = node)",
							"dx(dx)",
							"dy(dy)",
							"newLine()",
							"text(text)",
							"function (text = '')",
							"newLine: function(text = '')",
							"Circle",
							"constructor(node, attrs = node)",
							"radius(r)",
							"rx(rx)",
							"ry(ry)",
							"size(size)",
							"function (size = 0)",
							"ClipPath",
							"constructor(node, attrs = node)",
							"remove()",
							"function (el)",
							"targets()",
							"function ()",
							"clipper()",
							"clipWith(element)",
							"unclip()",
							"ForeignObject",
							"constructor(node, attrs = node)",
							"function (width, height)",
							"function dmove(dx, dy)",
							"child =>",
							"function dx(dx)",
							"function dy(dy)",
							"function height(height, box = this.",
							")",
							"function move(x = 0, y = 0, box = this.",
							")",
							"function size(width, height, box = this.",
							")",
							"child =>",
							"function width(width, box = this.",
							")",
							"function x(x, box = this.",
							")",
							"function y(y, box = this.",
							")",
							"G",
							"constructor(node, attrs = node)",
							"function ()",
							"A",
							"constructor(node, attrs = node)",
							"target(target)",
							"to(url)",
							"function (url)",
							"unlink()",
							"linkTo(url)",
							"linker()",
							"Mask",
							"constructor(node, attrs = node)",
							"remove()",
							"function (el)",
							"targets()",
							"function ()",
							"masker()",
							"maskWith(element)",
							"unmask()",
							"Stop",
							"constructor(node, attrs = node)",
							"update(o)",
							"stop: function(offset, color, opacity)",
							"function cssRule(selector, rule)",
							"Style",
							"constructor(node, attrs = node)",
							"addText(w = '')",
							"font(name, src, params = {})",
							"rule(selector, obj)",
							"style(selector, obj)",
							"fontface(name, src, params)",
							"TextPath",
							"constructor(node, attrs = node)",
							"array()",
							"plot(d)",
							"track()",
							"function (text, path)",
							"function (track, importNodes = true)",
							"textPath()",
							"function (text)",
							"targets()",
							"node =>",
							"TextPath",
							"Use",
							"constructor(node, attrs = node)",
							"use(element, file)",
							"function (element, file)"
						]
					},
					"AQAAAAAAAAAAAAAAuTQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					7,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				],
				[
					8,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/svg.js",
						"symkeys":
						[
							[
								313,
								346
							],
							[
								704,
								732
							],
							[
								769,
								794
							],
							[
								829,
								860
							],
							[
								907,
								933
							],
							[
								1098,
								1127
							],
							[
								1322,
								1341
							],
							[
								1407,
								1426
							],
							[
								1518,
								1541
							],
							[
								1574,
								1589
							],
							[
								1674,
								1696
							],
							[
								1816,
								1870
							],
							[
								2374,
								2404
							],
							[
								3494,
								3520
							],
							[
								3570,
								3620
							],
							[
								4735,
								4782
							],
							[
								4854,
								4875
							],
							[
								4948,
								4972
							],
							[
								5045,
								5073
							],
							[
								5175,
								5195
							],
							[
								5232,
								5236
							],
							[
								5568,
								5599
							],
							[
								5677,
								5723
							],
							[
								6488,
								6518
							],
							[
								6712,
								6732
							],
							[
								7395,
								7427
							],
							[
								7450,
								7513
							],
							[
								7627,
								7634
							],
							[
								7668,
								7691
							],
							[
								7791,
								7809
							],
							[
								7886,
								7912
							],
							[
								8175,
								8208
							],
							[
								8414,
								8444
							],
							[
								8455,
								8473
							],
							[
								8734,
								8753
							],
							[
								8831,
								8850
							],
							[
								8952,
								8967
							],
							[
								9080,
								9095
							],
							[
								9187,
								9205
							],
							[
								9386,
								9405
							],
							[
								9568,
								9584
							],
							[
								9726,
								9741
							],
							[
								9892,
								9916
							],
							[
								10108,
								10131
							],
							[
								10272,
								10302
							],
							[
								10381,
								10410
							],
							[
								11868,
								11886
							],
							[
								12046,
								12069
							],
							[
								12146,
								12169
							],
							[
								12350,
								12376
							],
							[
								12474,
								12486
							],
							[
								12623,
								12649
							],
							[
								12852,
								12876
							],
							[
								13026,
								13039
							],
							[
								13094,
								13107
							],
							[
								14053,
								14068
							],
							[
								14124,
								14139
							],
							[
								14206,
								14224
							],
							[
								14367,
								14389
							],
							[
								14514,
								14520
							],
							[
								14558,
								14571
							],
							[
								15218,
								15241
							],
							[
								15595,
								15612
							],
							[
								15983,
								16000
							],
							[
								16112,
								16137
							],
							[
								16318,
								16350
							],
							[
								16532,
								16558
							],
							[
								16680,
								16708
							],
							[
								17596,
								17620
							],
							[
								17737,
								17763
							],
							[
								17950,
								17955
							],
							[
								17960,
								17982
							],
							[
								18054,
								18075
							],
							[
								18214,
								18233
							],
							[
								18391,
								18425
							],
							[
								20166,
								20184
							],
							[
								20275,
								20281
							],
							[
								20410,
								20414
							],
							[
								20835,
								20840
							],
							[
								20947,
								20951
							],
							[
								21669,
								21716
							],
							[
								23025,
								23029
							],
							[
								23215,
								23230
							],
							[
								24374,
								24379
							],
							[
								24670,
								24675
							],
							[
								25099,
								25104
							],
							[
								28010,
								28019
							],
							[
								28108,
								28115
							],
							[
								28209,
								28216
							],
							[
								28331,
								28341
							],
							[
								28375,
								28380
							],
							[
								28533,
								28537
							],
							[
								29509,
								29519
							],
							[
								29609,
								29622
							],
							[
								29734,
								29739
							],
							[
								29760,
								29780
							],
							[
								29831,
								29838
							],
							[
								29875,
								29885
							],
							[
								30345,
								30354
							],
							[
								30392,
								30404
							],
							[
								30486,
								30499
							],
							[
								30735,
								30755
							],
							[
								30827,
								30864
							],
							[
								30923,
								30929
							],
							[
								30934,
								30954
							],
							[
								30987,
								31013
							],
							[
								32804,
								32823
							],
							[
								32941,
								32963
							],
							[
								33139,
								33169
							],
							[
								33618,
								33640
							],
							[
								33736,
								33759
							],
							[
								33917,
								33924
							],
							[
								34018,
								34043
							],
							[
								35588,
								35601
							],
							[
								35924,
								35942
							],
							[
								35996,
								36015
							],
							[
								36218,
								36230
							],
							[
								37213,
								37222
							],
							[
								37289,
								37299
							],
							[
								38037,
								38054
							],
							[
								38107,
								38125
							],
							[
								38312,
								38328
							],
							[
								38380,
								38397
							],
							[
								38586,
								38603
							],
							[
								38656,
								38682
							],
							[
								39124,
								39131
							],
							[
								39186,
								39218
							],
							[
								39562,
								39578
							],
							[
								39676,
								39702
							],
							[
								39870,
								39876
							],
							[
								39930,
								39961
							],
							[
								40450,
								40466
							],
							[
								40523,
								40539
							],
							[
								40584,
								40593
							],
							[
								40694,
								40704
							],
							[
								40896,
								40908
							],
							[
								42177,
								42192
							],
							[
								42243,
								42259
							],
							[
								42329,
								42338
							],
							[
								42468,
								42482
							],
							[
								42528,
								42548
							],
							[
								43241,
								43258
							],
							[
								43827,
								43852
							],
							[
								43913,
								43939
							],
							[
								44043,
								44063
							],
							[
								44331,
								44334
							],
							[
								44339,
								44359
							],
							[
								44392,
								44403
							],
							[
								44625,
								44637
							],
							[
								45406,
								45416
							],
							[
								45512,
								45522
							],
							[
								45797,
								45806
							],
							[
								45869,
								45879
							],
							[
								45961,
								45973
							],
							[
								46288,
								46300
							],
							[
								46537,
								46574
							],
							[
								46987,
								47002
							],
							[
								47052,
								47069
							],
							[
								47217,
								47230
							],
							[
								47628,
								47645
							],
							[
								47656,
								47673
							],
							[
								47712,
								47725
							],
							[
								48395,
								48416
							],
							[
								48567,
								48595
							],
							[
								48779,
								48797
							],
							[
								50885,
								50889
							],
							[
								50908,
								50938
							],
							[
								51080,
								51109
							],
							[
								51181,
								51196
							],
							[
								51296,
								51301
							],
							[
								51371,
								51380
							],
							[
								51495,
								51526
							],
							[
								51556,
								51570
							],
							[
								51923,
								51942
							],
							[
								52049,
								52081
							],
							[
								52164,
								52179
							],
							[
								52245,
								52265
							],
							[
								52307,
								52330
							],
							[
								52429,
								52457
							],
							[
								52644,
								52677
							],
							[
								52718,
								52748
							],
							[
								52907,
								52960
							],
							[
								53376,
								53392
							],
							[
								53765,
								53810
							],
							[
								54239,
								54255
							],
							[
								55473,
								55518
							],
							[
								55839,
								55850
							],
							[
								55868,
								55886
							],
							[
								55892,
								55922
							],
							[
								55980,
								56000
							],
							[
								56282,
								56308
							],
							[
								56375,
								56391
							],
							[
								56417,
								56433
							],
							[
								56492,
								56521
							],
							[
								56623,
								56660
							],
							[
								56735,
								56756
							],
							[
								56801,
								56816
							],
							[
								57487,
								57495
							],
							[
								57514,
								57534
							],
							[
								57587,
								57594
							],
							[
								57642,
								57651
							],
							[
								57907,
								57924
							],
							[
								58087,
								58096
							],
							[
								58156,
								58163
							],
							[
								58198,
								58208
							],
							[
								58279,
								58288
							],
							[
								58394,
								58403
							],
							[
								58424,
								58444
							],
							[
								58477,
								58490
							],
							[
								58563,
								58577
							],
							[
								58689,
								58706
							],
							[
								59653,
								59666
							],
							[
								59795,
								59807
							],
							[
								59941,
								59954
							],
							[
								60066,
								60075
							],
							[
								60120,
								60128
							],
							[
								60165,
								60175
							],
							[
								60309,
								60318
							],
							[
								60489,
								60518
							],
							[
								60571,
								60599
							],
							[
								60991,
								61006
							],
							[
								61660,
								61675
							],
							[
								62638,
								62641
							],
							[
								62666,
								62690
							],
							[
								62867,
								62882
							],
							[
								63392,
								63408
							],
							[
								63496,
								63506
							],
							[
								63559,
								63574
							],
							[
								63671,
								63678
							],
							[
								63842,
								63881
							],
							[
								64249,
								64266
							],
							[
								64514,
								64538
							],
							[
								64624,
								64631
							],
							[
								64719,
								64725
							],
							[
								64777,
								64793
							],
							[
								64824,
								64840
							],
							[
								64916,
								64928
							],
							[
								64974,
								64999
							],
							[
								65075,
								65081
							],
							[
								65363,
								65377
							],
							[
								65481,
								65487
							],
							[
								65579,
								65596
							],
							[
								65885,
								65897
							],
							[
								66407,
								66422
							],
							[
								66572,
								66588
							],
							[
								66664,
								66672
							],
							[
								66796,
								66818
							],
							[
								66917,
								66933
							],
							[
								67102,
								67134
							],
							[
								67424,
								67446
							],
							[
								67537,
								67547
							],
							[
								67578,
								67589
							],
							[
								67719,
								67729
							],
							[
								67951,
								67967
							],
							[
								68018,
								68029
							],
							[
								68122,
								68148
							],
							[
								69098,
								69109
							],
							[
								70331,
								70338
							],
							[
								70355,
								70379
							],
							[
								70927,
								70939
							],
							[
								71010,
								71015
							],
							[
								71140,
								71145
							],
							[
								71254,
								71260
							],
							[
								71369,
								71380
							],
							[
								71450,
								71459
							],
							[
								71552,
								71561
							],
							[
								71622,
								71638
							],
							[
								71692,
								71706
							],
							[
								71798,
								71808
							],
							[
								72630,
								72645
							],
							[
								72821,
								72827
							],
							[
								72956,
								72966
							],
							[
								73059,
								73078
							],
							[
								73246,
								73258
							],
							[
								73339,
								73355
							],
							[
								73458,
								73462
							],
							[
								73524,
								73528
							],
							[
								73894,
								73916
							],
							[
								74031,
								74043
							],
							[
								74095,
								74107
							],
							[
								74718,
								74754
							],
							[
								75016,
								75047
							],
							[
								75200,
								75228
							],
							[
								75571,
								75599
							],
							[
								75750,
								75779
							],
							[
								76156,
								76181
							],
							[
								76323,
								76347
							],
							[
								76471,
								76524
							],
							[
								76764,
								76788
							],
							[
								76893,
								76919
							],
							[
								77118,
								77136
							],
							[
								77210,
								77235
							],
							[
								77361,
								77381
							],
							[
								78142,
								78164
							],
							[
								78201,
								78217
							],
							[
								78440,
								78462
							],
							[
								78578,
								78598
							],
							[
								78728,
								78742
							],
							[
								78887,
								78901
							],
							[
								79042,
								79070
							],
							[
								79382,
								79410
							],
							[
								79718,
								79736
							],
							[
								79805,
								79836
							],
							[
								80532,
								80541
							],
							[
								80562,
								80571
							],
							[
								80588,
								80599
							],
							[
								80924,
								80946
							],
							[
								81124,
								81128
							],
							[
								81151,
								81182
							],
							[
								81234,
								81243
							],
							[
								81269,
								81278
							],
							[
								81335,
								81340
							],
							[
								81405,
								81420
							],
							[
								81474,
								81489
							],
							[
								81545,
								81560
							],
							[
								81655,
								81670
							],
							[
								81775,
								81791
							],
							[
								81856,
								81872
							],
							[
								81931,
								81954
							],
							[
								82067,
								82092
							],
							[
								82328,
								82335
							],
							[
								82354,
								82385
							],
							[
								82440,
								82459
							],
							[
								82722,
								82758
							],
							[
								82874,
								82882
							],
							[
								83016,
								83042
							],
							[
								83613,
								83632
							],
							[
								83869,
								83886
							],
							[
								84195,
								84203
							],
							[
								84226,
								84250
							],
							[
								84385,
								84398
							],
							[
								84490,
								84496
							],
							[
								84527,
								84536
							],
							[
								84637,
								84647
							],
							[
								84701,
								84714
							],
							[
								84909,
								84914
							],
							[
								85067,
								85084
							],
							[
								85205,
								85227
							],
							[
								85341,
								85348
							],
							[
								85392,
								85423
							],
							[
								85516,
								85529
							],
							[
								85620,
								85626
							],
							[
								85657,
								85666
							],
							[
								85767,
								85777
							],
							[
								85844,
								85857
							],
							[
								86050,
								86055
							],
							[
								86177,
								86193
							],
							[
								86291,
								86322
							],
							[
								86558,
								86563
							],
							[
								86582,
								86613
							],
							[
								86687,
								86706
							],
							[
								86812,
								86829
							],
							[
								87355,
								87366
							],
							[
								87523,
								87550
							],
							[
								87820,
								87831
							],
							[
								88011,
								88038
							],
							[
								88159,
								88169
							],
							[
								88223,
								88229
							],
							[
								88351,
								88364
							],
							[
								88607,
								88617
							],
							[
								88946,
								88967
							],
							[
								89716,
								89735
							],
							[
								90124,
								90132
							],
							[
								90278,
								90288
							],
							[
								90480,
								90492
							],
							[
								90604,
								90617
							],
							[
								90985,
								91000
							],
							[
								91111,
								91126
							],
							[
								91222,
								91245
							],
							[
								91364,
								91389
							],
							[
								91613,
								91617
							],
							[
								91657,
								91688
							],
							[
								91756,
								91763
							],
							[
								91921,
								91931
							],
							[
								92033,
								92053
							],
							[
								92356,
								92375
							],
							[
								92619,
								92637
							],
							[
								92791,
								92795
							],
							[
								92925,
								92931
							],
							[
								92975,
								93006
							],
							[
								93088,
								93102
							],
							[
								93157,
								93171
							],
							[
								93251,
								93260
							],
							[
								93343,
								93353
							],
							[
								93420,
								93433
							],
							[
								93632,
								93644
							],
							[
								93734,
								93749
							],
							[
								93905,
								93936
							],
							[
								94299,
								94335
							],
							[
								94759,
								94790
							],
							[
								94801,
								94813
							],
							[
								94934,
								94952
							],
							[
								94978,
								94997
							],
							[
								95054,
								95072
							],
							[
								95124,
								95142
							],
							[
								95199,
								95231
							],
							[
								95309,
								95321
							],
							[
								95944,
								95988
							],
							[
								96270,
								96297
							],
							[
								96753,
								96760
							],
							[
								96765,
								96771
							],
							[
								96850,
								96854
							],
							[
								96875,
								96906
							],
							[
								96962,
								96981
							],
							[
								97165,
								97175
							],
							[
								97196,
								97211
							],
							[
								97256,
								97263
							],
							[
								97291,
								97319
							],
							[
								97377,
								97399
							],
							[
								97836,
								97842
							],
							[
								97866,
								97908
							],
							[
								97980,
								98008
							],
							[
								98900,
								98903
							],
							[
								98927,
								98979
							],
							[
								99041,
								99069
							],
							[
								99906,
								99927
							],
							[
								100011,
								100028
							],
							[
								100100,
								100117
							],
							[
								100167,
								100184
							],
							[
								100234,
								100251
							],
							[
								100347,
								100364
							],
							[
								100448,
								100465
							],
							[
								100549,
								100566
							],
							[
								100638,
								100659
							],
							[
								100719,
								100736
							],
							[
								100968,
								100980
							],
							[
								100993,
								101012
							],
							[
								101394,
								101422
							],
							[
								101542,
								101574
							],
							[
								101695,
								101734
							],
							[
								102200,
								102241
							],
							[
								102544,
								102576
							],
							[
								102719,
								102745
							],
							[
								102940,
								102970
							],
							[
								103092,
								103133
							],
							[
								105120,
								105145
							],
							[
								105753,
								105762
							],
							[
								105814,
								105820
							],
							[
								105955,
								105965
							],
							[
								106892,
								106909
							],
							[
								107060,
								107079
							],
							[
								108855,
								108865
							],
							[
								108913,
								108939
							],
							[
								109570,
								109579
							],
							[
								109584,
								109604
							],
							[
								109779,
								109786
							],
							[
								109885,
								109891
							],
							[
								109960,
								109981
							],
							[
								110052,
								110061
							],
							[
								110173,
								110189
							],
							[
								110290,
								110297
							],
							[
								110405,
								110415
							],
							[
								110547,
								110558
							],
							[
								111160,
								111172
							],
							[
								111263,
								111275
							],
							[
								111280,
								111300
							],
							[
								111333,
								111342
							],
							[
								111435,
								111444
							],
							[
								111478,
								111487
							],
							[
								111525,
								111537
							],
							[
								111542,
								111562
							],
							[
								111595,
								111604
							],
							[
								111941,
								111950
							],
							[
								112228,
								112249
							],
							[
								112310,
								112319
							],
							[
								112324,
								112344
							],
							[
								112377,
								112389
							],
							[
								113432,
								113446
							],
							[
								113868,
								113883
							],
							[
								113931,
								113940
							],
							[
								113973,
								113982
							],
							[
								114395,
								114436
							],
							[
								114484,
								114508
							],
							[
								114542,
								114549
							],
							[
								114691,
								114705
							],
							[
								114760,
								114774
							],
							[
								114817,
								114855
							],
							[
								114870,
								114897
							],
							[
								115050,
								115054
							],
							[
								115094,
								115125
							],
							[
								115193,
								115200
							],
							[
								115306,
								115313
							],
							[
								115391,
								115405
							],
							[
								115531,
								115541
							],
							[
								115622,
								115629
							],
							[
								115811,
								115830
							],
							[
								115984,
								115996
							],
							[
								116132,
								116136
							],
							[
								116255,
								116259
							],
							[
								116363,
								116367
							],
							[
								116522,
								116534
							],
							[
								116698,
								116714
							],
							[
								116818,
								116834
							],
							[
								116904,
								116925
							],
							[
								117003,
								117019
							],
							[
								117199,
								117229
							],
							[
								117473,
								117480
							],
							[
								117520,
								117551
							],
							[
								117710,
								117722
							],
							[
								117938,
								117946
							],
							[
								117986,
								118017
							],
							[
								118178,
								118190
							],
							[
								118411,
								118415
							],
							[
								118455,
								118486
							],
							[
								118658,
								118682
							],
							[
								118786,
								118791
							],
							[
								118796,
								118809
							],
							[
								118907,
								118914
							],
							[
								119009,
								119015
							],
							[
								119067,
								119078
							],
							[
								119642,
								119654
							],
							[
								119961,
								119968
							],
							[
								120382,
								120394
							],
							[
								120466,
								120475
							],
							[
								120816,
								120834
							],
							[
								121286,
								121299
							],
							[
								121602,
								121619
							],
							[
								121679,
								121697
							],
							[
								121759,
								121780
							],
							[
								121844,
								121854
							],
							[
								123025,
								123060
							],
							[
								123289,
								123315
							],
							[
								123397,
								123405
							],
							[
								123481,
								123520
							],
							[
								123661,
								123669
							],
							[
								123708,
								123716
							],
							[
								123866,
								123878
							],
							[
								124139,
								124161
							],
							[
								124203,
								124207
							],
							[
								124283,
								124302
							],
							[
								124366,
								124387
							],
							[
								124459,
								124466
							],
							[
								124529,
								124549
							],
							[
								124658,
								124664
							],
							[
								124807,
								124819
							],
							[
								125058,
								125087
							],
							[
								126678,
								126687
							],
							[
								126748,
								126755
							],
							[
								126831,
								126839
							],
							[
								126887,
								126897
							],
							[
								126994,
								127006
							],
							[
								127099,
								127105
							],
							[
								127186,
								127196
							],
							[
								127344,
								127362
							],
							[
								127633,
								127645
							],
							[
								127810,
								127842
							],
							[
								128075,
								128105
							],
							[
								131554,
								131565
							],
							[
								132272,
								132300
							],
							[
								132522,
								132528
							],
							[
								132553,
								132573
							],
							[
								133982,
								134020
							],
							[
								135164,
								135179
							],
							[
								135369,
								135392
							],
							[
								135461,
								135470
							],
							[
								135515,
								135545
							],
							[
								135813,
								135829
							],
							[
								135964,
								135990
							],
							[
								136120,
								136127
							],
							[
								136186,
								136198
							],
							[
								136242,
								136252
							],
							[
								136330,
								136340
							],
							[
								136382,
								136390
							],
							[
								136629,
								136645
							],
							[
								136776,
								136784
							],
							[
								136825,
								136849
							],
							[
								137284,
								137292
							],
							[
								137776,
								137796
							],
							[
								137905,
								137916
							],
							[
								138532,
								138547
							],
							[
								139420,
								139431
							],
							[
								139694,
								139739
							],
							[
								140051,
								140058
							],
							[
								140163,
								140179
							],
							[
								140269,
								140300
							],
							[
								140763,
								140771
							],
							[
								142581,
								142591
							],
							[
								142724,
								142742
							],
							[
								142935,
								142947
							],
							[
								143115,
								143135
							],
							[
								143853,
								143886
							],
							[
								144487,
								144505
							],
							[
								145154,
								145189
							],
							[
								146074,
								146084
							],
							[
								146232,
								146258
							],
							[
								146297,
								146314
							],
							[
								146462,
								146489
							],
							[
								146519,
								146549
							],
							[
								146569,
								146595
							],
							[
								146959,
								146970
							],
							[
								146975,
								146988
							],
							[
								147039,
								147050
							],
							[
								147206,
								147221
							],
							[
								147379,
								147383
							],
							[
								147438,
								147457
							],
							[
								147612,
								147623
							],
							[
								147683,
								147691
							],
							[
								147728,
								147735
							],
							[
								148506,
								148516
							],
							[
								148687,
								148717
							],
							[
								148938,
								148953
							],
							[
								149269,
								149312
							],
							[
								149391,
								149417
							],
							[
								149694,
								149703
							],
							[
								149827,
								149845
							],
							[
								150224,
								150240
							],
							[
								150470,
								150492
							],
							[
								150502,
								150506
							],
							[
								150543,
								150553
							],
							[
								150631,
								150640
							],
							[
								150690,
								150723
							],
							[
								151037,
								151053
							],
							[
								151125,
								151144
							],
							[
								151244,
								151270
							],
							[
								152356,
								152374
							],
							[
								152527,
								152543
							],
							[
								152610,
								152629
							],
							[
								152725,
								152759
							],
							[
								153450,
								153489
							],
							[
								154136,
								154156
							],
							[
								154643,
								154664
							],
							[
								155508,
								155512
							],
							[
								156310,
								156346
							],
							[
								156881,
								156885
							],
							[
								156956,
								156960
							],
							[
								157008,
								157013
							],
							[
								157062,
								157067
							],
							[
								157116,
								157125
							],
							[
								157178,
								157187
							],
							[
								157240,
								157251
							],
							[
								157290,
								157319
							],
							[
								157617,
								157633
							],
							[
								157745,
								157764
							],
							[
								157856,
								157877
							],
							[
								158092,
								158116
							],
							[
								158364,
								158380
							],
							[
								158440,
								158459
							],
							[
								158705,
								158732
							],
							[
								158832,
								158837
							],
							[
								158916,
								158921
							],
							[
								158995,
								159005
							],
							[
								159042,
								159053
							],
							[
								159119,
								159131
							],
							[
								159195,
								159214
							],
							[
								159575,
								159587
							],
							[
								159670,
								159684
							],
							[
								159767,
								159783
							],
							[
								160061,
								160077
							],
							[
								160134,
								160153
							],
							[
								160339,
								160353
							],
							[
								160439,
								160467
							],
							[
								160548,
								160557
							],
							[
								161008,
								161011
							],
							[
								161034,
								161065
							],
							[
								161177,
								161183
							],
							[
								161317,
								161325
							],
							[
								161513,
								161524
							],
							[
								161692,
								161709
							],
							[
								161945,
								161951
							],
							[
								162117,
								162128
							],
							[
								162215,
								162221
							],
							[
								162265,
								162296
							],
							[
								162413,
								162424
							],
							[
								162534,
								162554
							],
							[
								162781,
								162798
							],
							[
								162936,
								162963
							],
							[
								162969,
								162970
							],
							[
								163089,
								163116
							],
							[
								163122,
								163123
							],
							[
								163221,
								163254
							],
							[
								163260,
								163261
							],
							[
								163329,
								163355
							],
							[
								163361,
								163362
							],
							[
								163490,
								163516
							],
							[
								163522,
								163523
							],
							[
								163623,
								163656
							],
							[
								163662,
								163663
							],
							[
								163705,
								163719
							],
							[
								163752,
								163766
							],
							[
								163799,
								163819
							],
							[
								163883,
								163904
							],
							[
								164155,
								164159
							],
							[
								164199,
								164230
							],
							[
								164624,
								164638
							],
							[
								164853,
								164869
							],
							[
								165160,
								165172
							],
							[
								165775,
								165785
							],
							[
								165885,
								165901
							],
							[
								166018,
								166028
							],
							[
								167332,
								167352
							],
							[
								167471,
								167491
							],
							[
								167587,
								167592
							],
							[
								167632,
								167663
							],
							[
								167807,
								167813
							],
							[
								167872,
								167878
							],
							[
								167941,
								167950
							],
							[
								168468,
								168478
							],
							[
								168838,
								168858
							],
							[
								169082,
								169110
							],
							[
								169201,
								169207
							],
							[
								169226,
								169257
							],
							[
								169311,
								169320
							],
							[
								169380,
								169386
							],
							[
								169453,
								169459
							],
							[
								169492,
								169502
							],
							[
								169760,
								169779
							],
							[
								169891,
								169899
							],
							[
								169922,
								169953
							],
							[
								170061,
								170069
							],
							[
								170125,
								170138
							],
							[
								170237,
								170246
							],
							[
								170406,
								170417
							],
							[
								170537,
								170546
							],
							[
								170602,
								170619
							],
							[
								170884,
								170892
							],
							[
								170991,
								171004
							],
							[
								171025,
								171056
							],
							[
								171187,
								171211
							],
							[
								171336,
								171358
							],
							[
								171387,
								171395
							],
							[
								172009,
								172024
							],
							[
								172057,
								172072
							],
							[
								172105,
								172140
							],
							[
								172146,
								172147
							],
							[
								172236,
								172275
							],
							[
								172281,
								172282
							],
							[
								172364,
								172404
							],
							[
								172410,
								172411
							],
							[
								172574,
								172582
							],
							[
								172720,
								172753
							],
							[
								172759,
								172760
							],
							[
								172847,
								172872
							],
							[
								172878,
								172879
							],
							[
								172949,
								172974
							],
							[
								172980,
								172981
							],
							[
								173220,
								173221
							],
							[
								173244,
								173275
							],
							[
								173446,
								173457
							],
							[
								173532,
								173533
							],
							[
								173556,
								173587
							],
							[
								173664,
								173678
							],
							[
								173742,
								173749
							],
							[
								173925,
								173939
							],
							[
								174011,
								174019
							],
							[
								174301,
								174312
							],
							[
								174601,
								174609
							],
							[
								174794,
								174798
							],
							[
								174842,
								174873
							],
							[
								174976,
								174984
							],
							[
								175040,
								175053
							],
							[
								175148,
								175157
							],
							[
								175281,
								175292
							],
							[
								175404,
								175412
							],
							[
								175463,
								175480
							],
							[
								175734,
								175742
							],
							[
								175828,
								175832
							],
							[
								175853,
								175884
							],
							[
								175958,
								175967
							],
							[
								176443,
								176481
							],
							[
								176589,
								176621
							],
							[
								176822,
								176827
							],
							[
								176848,
								176879
							],
							[
								176932,
								176947
							],
							[
								177005,
								177033
							],
							[
								177143,
								177162
							],
							[
								177247,
								177267
							],
							[
								177331,
								177358
							],
							[
								177460,
								177468
							],
							[
								177507,
								177538
							],
							[
								177643,
								177650
							],
							[
								177755,
								177762
							],
							[
								177952,
								177959
							],
							[
								178068,
								178089
							],
							[
								178330,
								178366
							],
							[
								179005,
								179015
							],
							[
								179147,
								179162
							],
							[
								179410,
								179419
							],
							[
								179467,
								179474
							],
							[
								179696,
								179704
							],
							[
								179778,
								179781
							],
							[
								179800,
								179831
							],
							[
								179915,
								179933
							],
							[
								180122,
								180146
							]
						],
						"symlist":
						[
							"function registerMethods(name, m)",
							"function getMethodsFor(name)",
							"function getMethodNames()",
							"function addMethodNames(_names)",
							"function map(array, block)",
							"function filter(array, block)",
							"function radians(d)",
							"function degrees(r)",
							"function unCamelCase(s)",
							" function(m, g)",
							"function capitalize(s)",
							"function proportionalSize(element, width, height, box)",
							"function getOrigin(o, element)",
							"isDescriptive = element =>",
							"writeDataToDom = (element, data, defaults = {}) =>",
							"function registerWindow(win = null, doc = null)",
							"function saveWindow()",
							"function restoreWindow()",
							"function withWindow(win, fn)",
							"function getWindow()",
							"Base",
							"function create(name, ns = svg)",
							"function makeInstance(element, isHTML = false)",
							"function nodeOrNew(name, node)",
							"function adopt(node)",
							"function mockAdopt(mock = adopt)",
							"function register(element, name = element.name, asRoot = false)",
							"element",
							"function getClass(name)",
							"function eid(name)",
							"function assignNewId(node)",
							"function extend(modules, methods)",
							"function wrapWithAttrCheck(fn)",
							" function(...args)",
							"function siblings()",
							"function position()",
							"function next()",
							"function prev()",
							"function forward()",
							"function backward()",
							"function front()",
							"function back()",
							"function before(element)",
							"function after(element)",
							"function insertBefore(element)",
							"function insertAfter(element)",
							"function classes()",
							"function hasClass(name)",
							"function addClass(name)",
							"function removeClass(name)",
							"function (c)",
							"function toggleClass(name)",
							"function css(style, val)",
							"function (el)",
							"function (el)",
							"function show()",
							"function hide()",
							"function visible()",
							"function data(a, v, r)",
							" el =>",
							" el =>",
							"function remember(k, v)",
							"function forget()",
							"function memory()",
							"function sixDigitHex(hex)",
							"function componentHex(component)",
							"function is(object, space)",
							"function getParameters(a, b)",
							"function cieSpace(space)",
							"function hueToRgb(p, q, t)",
							"Color",
							"constructor(...inputs)",
							"static isColor(color)",
							"static isRgb(color)",
							"static random(mode = 'vibrant', t)",
							"static test(color)",
							"cmyk()",
							"v =>",
							"hsl()",
							"v =>",
							"init(a = 0, b = 0, c = 0, d = 0, space = 'rgb')",
							"v =>",
							"hexParse = v =>",
							"lab()",
							"lch()",
							"rgb()",
							"toArray()",
							"toHex()",
							"toRgb()",
							"toString()",
							"xyz()",
							"v =>",
							"_clamped()",
							"format = v =>",
							"Point",
							"constructor(...args)",
							"clone()",
							"init(x, y)",
							"toArray()",
							"transform(m)",
							"transformO(m)",
							"function point(x, y)",
							"function closeEnough(a, b, threshold)",
							"Matrix",
							"constructor(...args)",
							"static formatTransforms(o)",
							"static fromArray(a)",
							"static isMatrixLike(o)",
							"static matrixMultiply(l, r, o)",
							"around(cx, cy, matrix)",
							"aroundO(cx, cy, matrix)",
							"clone()",
							"decompose(cx = 0, cy = 0)",
							"equals(other)",
							"flip(axis, around)",
							"flipO(axis, around)",
							"init(source)",
							"inverse()",
							"inverseO()",
							"lmultiply(matrix)",
							"lmultiplyO(matrix)",
							"multiply(matrix)",
							"multiplyO(matrix)",
							"rotate(r, cx, cy)",
							"rotateO(r, cx = 0, cy = 0)",
							"scale()",
							"scaleO(x, y = x, cx = 0, cy = 0)",
							"shear(a, cx, cy)",
							"shearO(lx, cx = 0, cy = 0)",
							"skew()",
							"skewO(x, y = x, cx = 0, cy = 0)",
							"skewX(x, cx, cy)",
							"skewY(y, cx, cy)",
							"toArray()",
							"toString()",
							"transform(o)",
							"translate(x, y)",
							"translateO(x, y)",
							"valueOf()",
							"function ctm()",
							"function screenCTM()",
							"function parser()",
							"function isNulledBox(box)",
							"function domContains(node)",
							" function(node)",
							"Box",
							"constructor(...args)",
							"addOffset()",
							"init(source)",
							"isNulled()",
							"merge(box)",
							"toArray()",
							"toString()",
							"transform(m)",
							"function (p)",
							"function getBox(el, getBBoxFn, retry)",
							"function bbox()",
							"getBBox = node =>",
							"retry = el =>",
							"function rbox(el)",
							"getRBox = node =>",
							"retry = el =>",
							"function inside(x, y)",
							"viewbox(x, y, width, height)",
							"zoom(level, point)",
							"List",
							"constructor(arr = [], ...args)",
							"each(fnOrMethodName, ...args)",
							"(el, i, arr) =>",
							"el =>",
							"toArray()",
							"List.extend = function(methods)",
							"(obj, name) =>",
							" function(...attrs)",
							"function baseFind(query, parent)",
							" function(node)",
							"function find(query)",
							"function findOne(query)",
							"function getEvents(instance)",
							"function getEventTarget(instance)",
							"function clearEvents(instance)",
							"function on(node, events, listener, binding, options)",
							"function (event)",
							"function off(node, events, listener, options)",
							"function (event)",
							"function dispatch(node, event, data, options)",
							"EventTarget",
							"addEventListener()",
							"dispatch(event, data, options)",
							"dispatchEvent(event)",
							"fire(event, data, options)",
							"getEventHolder()",
							"getEventTarget()",
							"off(event, listener, options)",
							"on(event, listener, binding, options)",
							"removeEventListener()",
							"function noop()",
							"SVGArray",
							"constructor(...args)",
							"clone()",
							"init(arr)",
							"parse(array = [])",
							"toArray()",
							"toSet()",
							"toString()",
							"valueOf()",
							"SVGNumber",
							"constructor(...args)",
							"convert(unit)",
							"divide(number)",
							"init(value, unit)",
							"minus(number)",
							"plus(number)",
							"times(number)",
							"toArray()",
							"toJSON()",
							"toString()",
							"valueOf()",
							"function registerAttrHook(fn)",
							"function attr(attr, val, ns)",
							"(last, curr) =>",
							"(_val, hook) =>",
							"Dom",
							"constructor(node, attrs)",
							"add(element, i)",
							"addTo(parent, i)",
							"children()",
							" function(node)",
							"clear()",
							"clone(deep = true, assignNewIds = true)",
							"each(block, deep)",
							"element(nodeName, attrs)",
							"first()",
							"get(i)",
							"getEventHolder()",
							"getEventTarget()",
							"has(element)",
							"html(htmlOrFn, outerHTML)",
							"id(id)",
							"index(element)",
							"last()",
							"matches(selector)",
							"parent(type)",
							"put(element, i)",
							"putIn(parent, i)",
							"remove()",
							"removeElement(element)",
							"replace(element)",
							"round(precision = 2, map = null)",
							"svg(svgOrFn, outerSVG)",
							"toString()",
							"words(text)",
							"wrap(node)",
							"writeDataToDom()",
							"function ()",
							"xml(xmlOrFn, outerXML, ns)",
							"function ()",
							"Element",
							"constructor(node, attrs)",
							"center(x, y)",
							"cx(x)",
							"cy(y)",
							"defs()",
							"dmove(x, y)",
							"dx(x = 0)",
							"dy(y = 0)",
							"getEventHolder()",
							"height(height)",
							"move(x, y)",
							"reference(attr)",
							"root()",
							"setData(o)",
							"size(width, height)",
							"width(width)",
							"writeDataToDom()",
							"x(x)",
							"y(y)",
							"prefix: function(t, a)",
							"function (m)",
							" function(o)",
							"matrix: function(mat, b, c, d, e, f)",
							"rotate: function(angle, cx, cy)",
							"skew: function(x, y, cx, cy)",
							"shear: function(lam, cx, cy)",
							"scale: function(x, y, cx, cy)",
							"translate: function(x, y)",
							"relative: function(x, y)",
							"flip: function(direction = 'both', origin = 'center')",
							"opacity: function(value)",
							"radius: function(x, y = x)",
							"length: function()",
							"pointAt: function(length)",
							"font: function(a, v)",
							"function (last, event)",
							"fn = function(f)",
							"function untransform()",
							"function matrixify()",
							"function (str)",
							"function (str)",
							"function (matrix, transform)",
							"function toParent(parent, i)",
							"function toRoot(i)",
							"function transform(o, relative)",
							"Container",
							"flatten()",
							"function ()",
							"function (i, children)",
							"Defs",
							"constructor(node, attrs = node)",
							"flatten()",
							"ungroup()",
							"Shape",
							"function rx(rx)",
							"function ry(ry)",
							"function x$3(x)",
							"function y$3(y)",
							"function cx$1(x)",
							"function cy$1(y)",
							"function width$2(width)",
							"function height$2(height)",
							"Ellipse",
							"constructor(node, attrs = node)",
							"size(width, height)",
							"function (width = 0, height = width)",
							"Fragment",
							"xml(xmlOrFn, outerXML, ns)",
							"function from(x, y)",
							"function to(x, y)",
							"Gradient",
							"constructor(type, attrs)",
							"attr(a, b, c)",
							"bbox()",
							"targets()",
							"toString()",
							"update(block)",
							"url()",
							"gradient(...args)",
							"function (type, block)",
							"Pattern",
							"constructor(node, attrs = node)",
							"attr(a, b, c)",
							"bbox()",
							"targets()",
							"toString()",
							"update(block)",
							"url()",
							"pattern(...args)",
							"function (width, height, block)",
							"Image",
							"constructor(node, attrs = node)",
							"load(url, callback)",
							" function(e)",
							" function()",
							"function (attr, val, _this)",
							" pattern =>",
							"function (source, callback)",
							"PointArray",
							"bbox()",
							"function (el)",
							"move(x, y)",
							"parse(array = [0, 0])",
							"size(width, height)",
							"toLine()",
							"toString()",
							"transform(m)",
							"transformO(m)",
							"function x$2(x)",
							"function y$2(y)",
							"function width$1(width)",
							"function height$1(height)",
							"Line",
							"constructor(node, attrs = node)",
							"array()",
							"move(x, y)",
							"plot(x1, y1, x2, y2)",
							"size(width, height)",
							"function (...args)",
							"Line",
							"Marker",
							"constructor(node, attrs = node)",
							"height(height)",
							"orient(orient)",
							"ref(x, y)",
							"toString()",
							"update(block)",
							"width(width)",
							"marker(...args)",
							"function (width, height, block)",
							"marker(marker, width, height, block)",
							"function makeSetterGetter(k, f)",
							" function(v)",
							"'-': function(pos)",
							"'<>': function(pos)",
							"'>': function(pos)",
							"'<': function(pos)",
							"bezier: function(x1, y1, x2, y2)",
							" function(t)",
							"steps: function(steps, stepPosition = 'end')",
							" (t, beforeFlag = false) =>",
							"Stepper",
							"done()",
							"Ease",
							"constructor(fn = timeline.ease)",
							"step(from, to, pos)",
							"Controller",
							"constructor(fn)",
							"done(c)",
							"step(current, target, dt, c)",
							"function recalculate()",
							"Spring",
							"constructor(duration = 500, overshoot = 0)",
							"step(current, target, dt, c)",
							"PID",
							"constructor(p = 0.1, i = 0.01, d = 0, windup = 1000)",
							"step(current, target, dt, c)",
							"M: function(c, p, p0)",
							"L: function(c, p)",
							"H: function(c, p)",
							"V: function(c, p)",
							"C: function(c, p)",
							"S: function(c, p)",
							"Q: function(c, p)",
							"T: function(c, p)",
							"Z: function(c, p, p0)",
							"A: function(c, p)",
							"function (i)",
							" function(c, p, p0)",
							"function makeAbsolut(parser)",
							"function segmentComplete(parser)",
							"function startNewSegment(parser, token)",
							"function finalizeNumber(parser, inNumber)",
							"function finalizeSegment(parser)",
							"function isArcFlag(parser)",
							"function isExponential(parser)",
							"function pathParser(d, toAbsolute = true)",
							"function arrayToString(a)",
							"PathArray",
							"bbox()",
							"move(x, y)",
							"parse(d = 'M0 0')",
							"size(width, height)",
							"toString()",
							"getClassForType = value =>",
							"Morphable",
							"constructor(stepper)",
							"at(pos)",
							"done()",
							"function (last, curr)",
							"from(val)",
							"stepper(stepper)",
							"to(val)",
							"type(type)",
							"_set(value)",
							"function (o)",
							"NonMorphable",
							"constructor(...args)",
							"init(val)",
							"toArray()",
							"valueOf()",
							"TransformBag",
							"constructor(...args)",
							"init(obj)",
							"toArray()",
							"sortByKey = (a, b) =>",
							"ObjectBag",
							"constructor(...args)",
							"align(other)",
							"init(objOrArr)",
							"(last, curr) =>",
							"toArray()",
							"valueOf()",
							"function registerMorphableType(type = [])",
							"function makeMorphable()",
							"to(val)",
							"fromArray(arr)",
							"toConsumable()",
							"morph(from, to, pos, stepper, context)",
							"mapper = function(i, index)",
							"Path",
							"constructor(node, attrs = node)",
							"array()",
							"clear()",
							"height(height)",
							"move(x, y)",
							"plot(d)",
							"size(width, height)",
							"width(width)",
							"x(x)",
							"y(y)",
							"Path",
							"function (d)",
							"function array()",
							"function clear()",
							"function move$2(x, y)",
							"function plot(p)",
							"function size$1(width, height)",
							"Polygon",
							"constructor(node, attrs = node)",
							"function (p)",
							"Polyline",
							"constructor(node, attrs = node)",
							"function (p)",
							"Rect",
							"constructor(node, attrs = node)",
							"function (width, height)",
							"Queue",
							"constructor()",
							"first()",
							"last()",
							"push(value)",
							"remove(item)",
							"shift()",
							"timer: () =>",
							"frame(fn)",
							"timeout(fn, delay)",
							"immediate(fn)",
							"cancelFrame(node)",
							"clearTimeout(node)",
							"cancelImmediate(node)",
							"_draw(now)",
							"makeSchedule = function(runnerInfo)",
							"defaultSource = function()",
							"Timeline",
							"constructor(timeSource = defaultSource)",
							"active()",
							"finish()",
							"getEndTime()",
							"getEndTimeOfTimeline()",
							"i =>",
							"getLastRunnerInfo()",
							"getRunnerInfoById(id)",
							"pause()",
							"persist(dtOrForever)",
							"play()",
							"reverse(yes)",
							"schedule(runner, delay, when)",
							"(a, b) =>",
							"info =>",
							"seek(dt)",
							"source(fn)",
							"speed(speed)",
							"stop()",
							"time(time)",
							"unschedule(runner)",
							"updateTime()",
							"_continue(immediateStep = false)",
							"_stepFn(immediateStep = false)",
							"terminate()",
							"timeline: function(timeline)",
							"Runner",
							"constructor(options)",
							"static sanitise(duration, delay, when)",
							"active(enabled)",
							"addTransform(transform)",
							"after(fn)",
							"animate(duration, delay, when)",
							"clearTransform()",
							"clearTransformsFromQueue()",
							"item =>",
							"delay(delay)",
							"duration()",
							"during(fn)",
							"ease(fn)",
							"element(element)",
							"finish()",
							"loop(times, swing, wait)",
							"loops(p)",
							"persist(dtOrForever)",
							"position(p)",
							"f = function(x)",
							"progress(p)",
							"queue(initFn, runFn, retargetFn, isTransform)",
							"reset()",
							"reverse(reverse)",
							"schedule(timeline, delay, when)",
							"step(dt)",
							"time(time)",
							"timeline(timeline)",
							"unschedule()",
							"_initialise(running)",
							"_rememberMorpher(method, morpher)",
							"_run(positionOrDt)",
							"_tryRetarget(method, target, extra)",
							"FakeRunner",
							"clearTransformsFromQueue()",
							"mergeWith(runner)",
							"lmultiply = (last, curr) =>",
							"getRunnerTransform = runner =>",
							"function mergeTransforms()",
							"RunnerArray",
							"constructor()",
							"add(runner)",
							"clearBefore(id)",
							"r =>",
							"edit(id, newRunner)",
							"getByID(id)",
							"length()",
							"merge()",
							"remove(id)",
							"animate(duration, delay, when)",
							"delay(by, when)",
							"_clearTransformRunnersBefore(currentRunner)",
							"_currentTransform(current)",
							"runner =>",
							"_addRunner(runner)",
							"_prepareRunner()",
							"difference = (a, b) =>",
							"x =>",
							"attr(a, v)",
							"css(s, v)",
							"styleAttr(type, nameOrAttrs, val)",
							" function()",
							" function(pos)",
							" function(newToAttrs)",
							"zoom(level, point)",
							" function()",
							" function(pos)",
							" function(newLevel, newPoint)",
							"transform(transforms, relative, affine)",
							" function setup()",
							" function run(pos)",
							"a =>",
							" function retarget(newTransforms)",
							"x(x)",
							"y(y)",
							"ax(x)",
							"ay(y)",
							"dx(x = 0)",
							"dy(y = 0)",
							"dmove(x, y)",
							"_queueNumberDelta(method, to)",
							" function()",
							" function(pos)",
							" function(newTo)",
							"_queueObject(method, to)",
							" function()",
							" function(pos)",
							"_queueNumber(method, value)",
							"cx(x)",
							"cy(y)",
							"move(x, y)",
							"amove(x, y)",
							"center(x, y)",
							"size(width, height)",
							"width(width)",
							"height(height)",
							"plot(a, b, c, d)",
							" function()",
							" function(pos)",
							"leading(value)",
							"viewbox(x, y, width, height)",
							"update(o)",
							"Svg",
							"constructor(node, attrs = node)",
							"defs()",
							"isRoot()",
							"namespace()",
							"removeNamespace()",
							"root()",
							"function ()",
							"Symbol",
							"constructor(node, attrs = node)",
							"function ()",
							"function plain(text)",
							"function length()",
							"function x$1(x, box = this.",
							")",
							"function y$1(y, box = this.",
							")",
							"function move$1(x, y, box = this.",
							")",
							"function cx(x, box = this.",
							")",
							"function cy(y, box = this.",
							")",
							"function center(x, y, box = this.",
							")",
							"function ax(x)",
							"function ay(y)",
							"function amove(x, y)",
							"function build(build)",
							"Text",
							"constructor(node, attrs = node)",
							"leading(value)",
							"rebuild(rebuild)",
							"function (i)",
							"setData(o)",
							"writeDataToDom()",
							"text(text)",
							"function (text = '')",
							"function (text = '')",
							"Tspan",
							"constructor(node, attrs = node)",
							"dx(dx)",
							"dy(dy)",
							"newLine()",
							"text(text)",
							"function (text = '')",
							"newLine: function(text = '')",
							"Circle",
							"constructor(node, attrs = node)",
							"radius(r)",
							"rx(rx)",
							"ry(ry)",
							"size(size)",
							"function (size = 0)",
							"ClipPath",
							"constructor(node, attrs = node)",
							"remove()",
							"function (el)",
							"targets()",
							"function ()",
							"clipper()",
							"clipWith(element)",
							"unclip()",
							"ForeignObject",
							"constructor(node, attrs = node)",
							"function (width, height)",
							"function dmove(dx, dy)",
							"child =>",
							"function dx(dx)",
							"function dy(dy)",
							"function height(height, box = this.",
							")",
							"function move(x = 0, y = 0, box = this.",
							")",
							"function size(width, height, box = this.",
							")",
							"child =>",
							"function width(width, box = this.",
							")",
							"function x(x, box = this.",
							")",
							"function y(y, box = this.",
							")",
							"G",
							"constructor(node, attrs = node)",
							"function ()",
							"A",
							"constructor(node, attrs = node)",
							"target(target)",
							"to(url)",
							"function (url)",
							"unlink()",
							"linkTo(url)",
							"linker()",
							"Mask",
							"constructor(node, attrs = node)",
							"remove()",
							"function (el)",
							"targets()",
							"function ()",
							"masker()",
							"maskWith(element)",
							"unmask()",
							"Stop",
							"constructor(node, attrs = node)",
							"update(o)",
							"stop: function(offset, color, opacity)",
							"function cssRule(selector, rule)",
							"Style",
							"constructor(node, attrs = node)",
							"addText(w = '')",
							"font(name, src, params = {})",
							"rule(selector, obj)",
							"style(selector, obj)",
							"fontface(name, src, params)",
							"TextPath",
							"constructor(node, attrs = node)",
							"array()",
							"plot(d)",
							"track()",
							"function (text, path)",
							"function (track, importNodes = true)",
							"textPath()",
							"function (text)",
							"targets()",
							"node =>",
							"TextPath",
							"Use",
							"constructor(node, attrs = node)",
							"use(element, file)",
							"function (element, file)"
						]
					},
					"AQAAAAAAAAAAAAAAuTQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					9,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/webakeit/static/img/globi-bg-vector.svg",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				],
				[
					10,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					11,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/webakeit/static/img/globi-bg-vector.svg",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					12,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					13,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					14,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/webakeit/static/img/globi-bg-vector.svg",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					15,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					16,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/webakeit/static/img/globi-bg-vector.svg",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					17,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					18,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					19,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/webakeit/static/img/globi-bg-vector.svg",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					20,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					21,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/webakeit/static/img/globi-bg-vector.svg",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					22,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					23,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/webakeit/static/img/globi-bg-vector.svg",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "upload-server.js",
			"redo_stack":
			[
				[
					1,
					1,
					"insert",
					{
						"characters": "rver"
					},
					"BAAAAAMAAAAAAAAAAwAAAAAAAAABAAAAcgIAAAAAAAAAAgAAAAAAAAABAAAAZQEAAAAAAAAAAQAAAAAAAAABAAAAdgAAAAAAAAAAAAAAAAAAAAABAAAAcg",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABAAAAAAAAAAEAAAAAAAAAAAAAAAAAPC/"
				]
			],
			"settings":
			{
				"buffer_size": 36357,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/svg.js",
			"settings":
			{
				"buffer_size": 182157,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "/home/roman/Projects/webakeit/static/img/globi-bg-vector.svg",
			"settings":
			{
				"buffer_size": 188636,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "server.js",
			"redo_stack":
			[
				[
					3,
					1,
					"unindent",
					null,
					"AQAAAL0PAAAAAAAAvw8AAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL8PAAAAAAAAvw8AAAAAAAAAAAAAAADwvw"
				]
			],
			"settings":
			{
				"buffer_size": 29538,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					16,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAABwNAAAAAAAAHQ0AAAAAAAAAAAAAHQ0AAAAAAAAfDQAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHA0AAAAAAAAcDQAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAPoMAAAAAAAA+wwAAAAAAAAAAAAA+wwAAAAAAAD9DAAAAAAAAAAAAAAgDQAAAAAAACANAAAAAAAAAgAAACAg",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+gwAAAAAAAD6DAAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAE0MAAAAAAAATgwAAAAAAAAAAAAATgwAAAAAAABSDAAAAAAAAAAAAAAADQAAAAAAAAANAAAAAAAAAgAAACAg",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATQwAAAAAAABNDAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "draw-utils.js",
			"settings":
			{
				"buffer_size": 5161,
				"line_ending": "Unix"
			}
		},
		{
			"file": "draw.html",
			"settings":
			{
				"buffer_size": 500,
				"line_ending": "Unix"
			}
		},
		{
			"file": "draw.js",
			"settings":
			{
				"buffer_size": 16716,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					12,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAMI8AAAAAAAAwzwAAAAAAAAAAAAAwzwAAAAAAADEPAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMI8AAAAAAAAwjwAAAAAAAAAAAAAAADwvw"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": "-mirrored"
					},
					"CQAAACE9AAAAAAAAIj0AAAAAAAAAAAAAIj0AAAAAAAAjPQAAAAAAAAAAAAAjPQAAAAAAACQ9AAAAAAAAAAAAACQ9AAAAAAAAJT0AAAAAAAAAAAAAJT0AAAAAAAAmPQAAAAAAAAAAAAAmPQAAAAAAACc9AAAAAAAAAAAAACc9AAAAAAAAKD0AAAAAAAAAAAAAKD0AAAAAAAApPQAAAAAAAAAAAAApPQAAAAAAACo9AAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACE9AAAAAAAAIT0AAAAAAAAAAAAAAADwvw"
				],
				[
					26,
					1,
					"left_delete",
					null,
					"AQAAACE9AAAAAAAAIT0AAAAAAAAJAAAALW1pcnJvcmVk",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACo9AAAAAAAAIT0AAAAAAAAAAAAAAADwvw"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAPwnAAAAAAAA/ScAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPwnAAAAAAAA/CcAAAAAAAAAAAAAAADwvw"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": " transform:"
					},
					"CwAAAP0nAAAAAAAA/icAAAAAAAAAAAAA/icAAAAAAAD/JwAAAAAAAAAAAAD/JwAAAAAAAAAoAAAAAAAAAAAAAAAoAAAAAAAAASgAAAAAAAAAAAAAASgAAAAAAAACKAAAAAAAAAAAAAACKAAAAAAAAAMoAAAAAAAAAAAAAAMoAAAAAAAABCgAAAAAAAAAAAAABCgAAAAAAAAFKAAAAAAAAAAAAAAFKAAAAAAAAAYoAAAAAAAAAAAAAAYoAAAAAAAABygAAAAAAAAAAAAABygAAAAAAAAIKAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP0nAAAAAAAA/ScAAAAAAAAAAAAAAADwvw"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAgoAAAAAAAACSgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAgoAAAAAAAACCgAAAAAAAAAAAAAAADwvw"
				],
				[
					39,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAAkoAAAAAAAACygAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAkoAAAAAAAACSgAAAAAAAAAAAAAAADwvw"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": "scale(-"
					},
					"BwAAAAooAAAAAAAACygAAAAAAAAAAAAACygAAAAAAAAMKAAAAAAAAAAAAAAMKAAAAAAAAA0oAAAAAAAAAAAAAA0oAAAAAAAADigAAAAAAAAAAAAADigAAAAAAAAPKAAAAAAAAAAAAAAPKAAAAAAAABAoAAAAAAAAAAAAABAoAAAAAAAAESgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAooAAAAAAAACigAAAAAAAAAAAAAAADwvw"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": "1,"
					},
					"AgAAABEoAAAAAAAAEigAAAAAAAAAAAAAEigAAAAAAAATKAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABEoAAAAAAAAESgAAAAAAAAAAAAAAADwvw"
				],
				[
					42,
					1,
					"left_delete",
					null,
					"AQAAABIoAAAAAAAAEigAAAAAAAABAAAALA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABMoAAAAAAAAEygAAAAAAAAAAAAAAADwvw"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABIoAAAAAAAAEygAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABIoAAAAAAAAEigAAAAAAAAAAAAAAADwvw"
				],
				[
					44,
					1,
					"left_delete",
					null,
					"AQAAABIoAAAAAAAAEigAAAAAAAABAAAAIA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABMoAAAAAAAAEygAAAAAAAAAAAAAAADwvw"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAABIoAAAAAAAAEygAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABIoAAAAAAAAEigAAAAAAAAAAAAAAADwvw"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": " 1)"
					},
					"AwAAABMoAAAAAAAAFCgAAAAAAAAAAAAAFCgAAAAAAAAVKAAAAAAAAAAAAAAVKAAAAAAAABYoAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABMoAAAAAAAAEygAAAAAAAAAAAAAAADwvw"
				],
				[
					66,
					1,
					"cut",
					null,
					"AQAAALYnAAAAAAAAticAAAAAAABmAAAAICBFbGVtZW50LnNldENTUyhlbGVtLCB7IHBvc2l0aW9uOiAnYWJzb2x1dGUnLCBsZWZ0OiAnMHB4JywgdG9wOiAnMHB4JywgdHJhbnNmb3JtOiAnc2NhbGUoLTEsIDEpJyB9KTsK",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALYnAAAAAAAAHCgAAAAAAAAAAAAAAADwvw"
				],
				[
					67,
					2,
					"paste",
					null,
					"AgAAALYnAAAAAAAAHCgAAAAAAAAAAAAAHCgAAAAAAACCKAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALYnAAAAAAAAticAAAAAAAAAAAAAAADwvw"
				],
				[
					70,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAPwnAAAAAAAA/ScAAAAAAAAAAAAA/ScAAAAAAAD9JwAAAAAAABsAAAAsIHRyYW5zZm9ybTogJ3NjYWxlKC0xLCAxKSc",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPwnAAAAAAAAFygAAAAAAAAAAAAAAADwvw"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": ".firstElementChild"
					},
					"EgAAABcoAAAAAAAAGCgAAAAAAAAAAAAAGCgAAAAAAAAZKAAAAAAAAAAAAAAZKAAAAAAAABooAAAAAAAAAAAAABooAAAAAAAAGygAAAAAAAAAAAAAGygAAAAAAAAcKAAAAAAAAAAAAAAcKAAAAAAAAB0oAAAAAAAAAAAAAB0oAAAAAAAAHigAAAAAAAAAAAAAHigAAAAAAAAfKAAAAAAAAAAAAAAfKAAAAAAAACAoAAAAAAAAAAAAACAoAAAAAAAAISgAAAAAAAAAAAAAISgAAAAAAAAiKAAAAAAAAAAAAAAiKAAAAAAAACMoAAAAAAAAAAAAACMoAAAAAAAAJCgAAAAAAAAAAAAAJCgAAAAAAAAlKAAAAAAAAAAAAAAlKAAAAAAAACYoAAAAAAAAAAAAACYoAAAAAAAAJygAAAAAAAAAAAAAJygAAAAAAAAoKAAAAAAAAAAAAAAoKAAAAAAAACkoAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABcoAAAAAAAAFygAAAAAAAAAAAAAAADwvw"
				],
				[
					78,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAACwoAAAAAAAALSgAAAAAAAAAAAAALSgAAAAAAAAtKAAAAAAAAC8AAAAgcG9zaXRpb246ICdhYnNvbHV0ZScsIGxlZnQ6ICcwcHgnLCB0b3A6ICcwcHgnLA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACwoAAAAAAAAWygAAAAAAAAAAAAAAADwvw"
				],
				[
					86,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAAQoAAAAAAAABSgAAAAAAAAAAAAABSgAAAAAAAAGKAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAQoAAAAAAAABCgAAAAAAAAAAAAAAADwvw"
				],
				[
					91,
					2,
					"left_delete",
					null,
					"AgAAAAUoAAAAAAAABSgAAAAAAAABAAAALwQoAAAAAAAABCgAAAAAAAABAAAALw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAYoAAAAAAAABigAAAAAAAAAAAAAAADwvw"
				],
				[
					94,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAAQoAAAAAAAABSgAAAAAAAAAAAAABSgAAAAAAAAGKAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAQoAAAAAAAABCgAAAAAAAAAAAAAAADwvw"
				],
				[
					97,
					2,
					"left_delete",
					null,
					"AgAAAAUoAAAAAAAABSgAAAAAAAABAAAALwQoAAAAAAAABCgAAAAAAAABAAAALw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAYoAAAAAAAABigAAAAAAAAAAAAAAADwvw"
				],
				[
					100,
					1,
					"insert",
					{
						"characters": "lk"
					},
					"AwAAABgoAAAAAAAAGSgAAAAAAAAAAAAAGSgAAAAAAAAZKAAAAAAAAAUAAABmaXJzdBkoAAAAAAAAGigAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABgoAAAAAAAAHSgAAAAAAAAAAAAAAADwvw"
				],
				[
					101,
					1,
					"left_delete",
					null,
					"AQAAABkoAAAAAAAAGSgAAAAAAAABAAAAaw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABooAAAAAAAAGigAAAAAAAAAAAAAAADwvw"
				],
				[
					102,
					1,
					"insert",
					{
						"characters": "ast"
					},
					"AwAAABkoAAAAAAAAGigAAAAAAAAAAAAAGigAAAAAAAAbKAAAAAAAAAAAAAAbKAAAAAAAABwoAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABkoAAAAAAAAGSgAAAAAAAAAAAAAAADwvw"
				],
				[
					107,
					1,
					"right_delete",
					null,
					"AQAAABwoAAAAAAAAHCgAAAAAAAABAAAARQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABwoAAAAAAAAHCgAAAAAAAAAAAAAAADwvw"
				],
				[
					108,
					1,
					"insert",
					{
						"characters": "√§"
					},
					"AQAAABwoAAAAAAAAHSgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABwoAAAAAAAAHCgAAAAAAAAAAAAAAADwvw"
				],
				[
					23,
					1,
					"revert",
					null,
					"",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD9PQAAAAAAAKI+AAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "eagle-shell.js",
			"settings":
			{
				"buffer_size": 42559,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					13,
					1,
					"insert",
					{
						"characters": "[..."
					},
					"BAAAAMWVAAAAAAAAxpUAAAAAAAAAAAAAxpUAAAAAAADHlQAAAAAAAAAAAADHlQAAAAAAAMiVAAAAAAAAAAAAAMiVAAAAAAAAyZUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxZUAAAAAAADFlQAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "]"
					},
					"AQAAANqVAAAAAAAA25UAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2pUAAAAAAADalQAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": ".list]"
					},
					"BgAAADONAAAAAAAANI0AAAAAAAAAAAAANI0AAAAAAAA1jQAAAAAAAAAAAAA1jQAAAAAAADaNAAAAAAAAAAAAADaNAAAAAAAAN40AAAAAAAAAAAAAN40AAAAAAAA4jQAAAAAAAAAAAAA4jQAAAAAAADmNAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAM40AAAAAAAAzjQAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "[..."
					},
					"BAAAAC2NAAAAAAAALo0AAAAAAAAAAAAALo0AAAAAAAAvjQAAAAAAAAAAAAAvjQAAAAAAADCNAAAAAAAAAAAAADCNAAAAAAAAMY0AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALY0AAAAAAAAtjQAAAAAAAAAAAAAAAPC/"
				],
				[
					75,
					1,
					"cut",
					null,
					"AQAAAGaNAAAAAAAAZo0AAAAAAAAdAAAAICAgIC5tYXAocHQgPT4gcHQuZGl2KDIuNTQpKQo",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZo0AAAAAAACDjQAAAAAAAAAAAAAAAPC/"
				],
				[
					76,
					2,
					"paste",
					null,
					"AgAAAGaNAAAAAAAAg40AAAAAAAAAAAAAg40AAAAAAACgjQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZo0AAAAAAABmjQAAAAAAAAAAAAAAAPC/"
				],
				[
					81,
					1,
					"insert",
					{
						"characters": "round"
					},
					"BgAAAJWNAAAAAAAAlo0AAAAAAAAAAAAAlo0AAAAAAACWjQAAAAAAAAMAAABkaXaWjQAAAAAAAJeNAAAAAAAAAAAAAJeNAAAAAAAAmI0AAAAAAAAAAAAAmI0AAAAAAACZjQAAAAAAAAAAAACZjQAAAAAAAJqNAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAlY0AAAAAAACYjQAAAAAAAAAAAAAAAPC/"
				],
				[
					83,
					4,
					"right_delete",
					null,
					"BAAAAJuNAAAAAAAAm40AAAAAAAABAAAAMpuNAAAAAAAAm40AAAAAAAABAAAALpuNAAAAAAAAm40AAAAAAAABAAAANZuNAAAAAAAAm40AAAAAAAABAAAANA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAm40AAAAAAACbjQAAAAAAAAAAAAAAAPC/"
				],
				[
					84,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAAJuNAAAAAAAAnI0AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAm40AAAAAAACbjQAAAAAAAAAAAAAAAPC/"
				],
				[
					97,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAALyNAAAAAAAAvY0AAAAAAAAAAAAAvY0AAAAAAADBjQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvI0AAAAAAAC8jQAAAAAAAAAAAAAAAPC/"
				],
				[
					99,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAKONAAAAAAAApI0AAAAAAAAAAAAApI0AAAAAAACljQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAo40AAAAAAACjjQAAAAAAAAAAAAAAAEZA"
				]
			]
		},
		{
			"file": "lib/dom/element.js",
			"settings":
			{
				"buffer_size": 35370,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/eagle/element.js",
			"settings":
			{
				"buffer_size": 36661,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					18,
					1,
					"insert",
					{
						"characters": "owner."
					},
					"BgAAAGRFAAAAAAAAZUUAAAAAAAAAAAAAZUUAAAAAAABmRQAAAAAAAAAAAABmRQAAAAAAAGdFAAAAAAAAAAAAAGdFAAAAAAAAaEUAAAAAAAAAAAAAaEUAAAAAAABpRQAAAAAAAAAAAABpRQAAAAAAAGpFAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZEUAAAAAAABkRQAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"paste",
					null,
					"AQAAAD9EAAAAAAAARUQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAP0QAAAAAAAA/RAAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"prettier",
				"JsPrettier: Format Code"
			],
			[
				"prett",
				"JsPrettier: Format Code"
			],
			[
				":q",
				"Coffee: Quick Run Bar"
			],
			[
				"clang",
				"Clang Format: Format Selection"
			],
			[
				"mode",
				"HTML: Encode Special Characters"
			],
			[
				"insert",
				"Snippet: Insert livereload.js script"
			],
			[
				":w",
				":w - Save"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"OUTLIN",
				"Browse Mode: Outline (Right)"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 142.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv",
		"/home/roman/Projects/plot-cv/cubic-spline",
		"/home/roman/Projects/plot-cv/node-debugprotocol-client"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/noise-source.circuit",
		"/home/roman/Projects/plot-cv/lib/vfs/fs-adapter-memory.js",
		"/home/roman/Projects/plot-cv/lib/htmlentities.js",
		"/home/roman/Projects/plot-cv/webakeit.js",
		"/home/roman/Projects/plot-cv/webakeit-telegram.js",
		"/home/roman/Downloads/Telegram Desktop/ChatExport_2024-04-09/messages.html",
		"/home/roman/Projects/plot-cv/static/css/webakeit.css",
		"/home/roman/Projects/plot-cv/webakeit.tmp",
		"/home/roman/Projects/plot-cv/webakeit.html",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/xml-shell.js",
		"/home/roman/Projects/plot-cv/plot-cv.sublime-project",
		"/home/roman/Projects/plot-cv/eagle-shell.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/xml-shell.es",
		"/home/roman/Projects/plot-cv/lib/geom/splines.js",
		"/home/roman/Projects/plot-cv/fire.html",
		"/home/roman/Projects/plot-cv/numbers2.c",
		"/home/roman/Projects/plot-cv/main.js",
		"/home/roman/Projects/plot-cv/lib/geom/pointList.js",
		"/home/roman/Projects/plot-cv/draw.js",
		"/home/roman/Projects/plot-cv/lib/autoStore.js",
		"/home/roman/Projects/plot-cv/lib/async/events.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
		"/home/roman/Projects/plot-cv/debugger-client.js",
		"/home/roman/Projects/plot-cv/fire.js",
		"/home/roman/Projects/plot-cv/upload-server.js",
		"/home/roman/Projects/plot-cv/lib/geom/point.js",
		"/home/roman/Projects/plot-cv/lib/misc.js",
		"/home/roman/Projects/plot-cv/components.js",
		"/home/roman/Projects/plot-cv/draw.html",
		"/home/roman/Projects/plot-cv/static/css/draw.css",
		"/home/roman/Projects/plot-cv/webSocket.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/point.js",
		"/home/roman/Projects/plot-cv/draw-utils.js",
		"/home/roman/Projects/plot-cv/lib/fd-graph.js",
		"/home/roman/Projects/plot-cv/svg-box.js",
		"/home/roman/Projects/plot-cv/numbers.c",
		"/home/roman/Projects/plot-cv/hex.c",
		"/home/roman/Projects/plot-cv/upload-worker.js",
		"/home/roman/Projects/plot-cv/mailcow-db.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/examples/ssl-client.js",
		"/home/roman/Projects/plot-cv/promise-worker.js",
		"/home/roman/Projects/plot-cv/upload.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-mysql.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/wscli.js",
		"/home/roman/Projects/plot-cv/lib/geom/graph.js",
		"/home/roman/Projects/plot-cv/test-nanovg.js",
		"/home/roman/Projects/plot-cv/lib/eagle/node.js",
		"/home/roman/Projects/plot-cv/lib/eagle/element.js",
		"/home/roman/Projects/plot-cv/workertest.js",
		"/home/roman/Projects/plot-cv/test-worker.js",
		"/home/roman/Projects/plot-cv/static/css/upload.css",
		"/home/roman/Projects/plot-cv/upload.html",
		"/home/roman/Projects/plot-cv/debugger-server.js",
		"/home/roman/Projects/plot-cv/test-opencv.js",
		"/home/roman/Projects/plot-cv/map.html",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/tests/server.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/directory.js",
		"/home/roman/Projects/plot-cv/test-video.js",
		"/home/roman/Projects/plot-cv/cv-shell.js",
		"/home/roman/Projects/plot-cv/directory.html",
		"/home/roman/Projects/plot-cv/coil.html",
		"/home/roman/Projects/plot-cv/filelist.html",
		"/home/roman/Projects/plot-cv/noise.js",
		"/home/roman/Projects/plot-cv/pinkNoise.js",
		"/home/roman/Projects/plot-cv/noise.html",
		"/home/roman/Projects/plot-cv/landing.html",
		"/home/roman/Projects/plot-cv/404.html",
		"/home/roman/Projects/plot-cv/index.html",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/js/rpc.js",
		"/home/roman/Projects/plot-cv/style.css",
		"/home/roman/Projects/plot-cv/lib/lscache.js",
		"/home/roman/Projects/plot-cv/example.html",
		"/home/roman/Projects/plot-cv/clock.html",
		"/home/roman/Projects/plot-cv/eagle2svg.js",
		"/home/roman/Projects/plot-cv/Pink-Noise-Generator-Thomas-Henry.brd",
		"/home/roman/Projects/plot-cv/lib/eagle/schematicRenderer.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/grid.js",
		"/home/roman/Projects/plot-cv/lib/eagle/renderUtils.js",
		"/home/roman/Projects/plot-cv/lib/geom/transformation.js",
		"/home/roman/Projects/plot-cv/lib/eagle/nodeList.js",
		"/home/roman/Projects/plot-cv/lib/eagle/ref.js",
		"/home/roman/Projects/plot-cv/lib/eagle/project.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/polygon.js",
		"/home/roman/Projects/plot-cv/lib/geom/polygon.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/symbol.js",
		"/home/roman/Projects/plot-cv/lib/eagle/boardRenderer.js",
		"/home/roman/Projects/plot-cv/lib/eagle/svgRenderer.js",
		"/home/roman/Projects/plot-cv/lib/eagle/document.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/pad.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/hole.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/smd.js",
		"/home/roman/Projects/plot-cv/lib/ecmascript/parser.js",
		"/home/roman/Projects/plot-cv/github-userscript.js",
		"/home/roman/Projects/an-tronics/eagle/RX-FM-Radio-1.5V-dip.brd",
		"/home/roman/Projects/plot-cv/lib/eagle/components/pin.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/wire.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/3rdparty/denodrivers-postgres/docs/.nojekyll",
		"/home/roman/Projects/plot-cv/lib/eagle/components/via.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/repl.js",
		"/home/roman/Projects/plot-cv/lib/geom/line.js",
		"/home/roman/Projects/plot-cv/lib/geom/rect.js",
		"/home/roman/Projects/an-tronics/eagle/lbr/l.lbr",
		"/home/roman/Projects/an-tronics/eagle/github-userscript.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-internal.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/src/minnet-client.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/lib/core-net/close.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/callback.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/qjsm.c",
		"/home/janos/Projects/plot-cv/test-sourcemap.js",
		"/home/janos/Projects/plot-cv/ws-worker.js",
		"/home/janos/Projects/plot-cv/tokmap.c",
		"/home/janos/Projects/plot-cv/count-neighbours.js",
		"/home/janos/Projects/plot-cv/findsig.c",
		"/home/janos/Projects/plot-cv/getModuleProps.js",
		"/home/janos/Projects/plot-cv/midi-tcp.js",
		"/home/janos/Projects/plot-cv/portal.js",
		"/home/janos/Projects/plot-cv/resolve-imports.js",
		"/home/janos/Projects/plot-cv/palette.css",
		"/home/janos/Projects/plot-cv/get-res.c",
		"/home/janos/Projects/plot-cv/get-msys-packages.js",
		"/home/janos/Projects/plot-cv/gerber2gcode.js",
		"/home/janos/Projects/plot-cv/ftrace.js",
		"/home/janos/Projects/plot-cv/filelist.js",
		"/home/janos/Projects/plot-cv/coil.js",
		"/home/janos/Projects/plot-cv/eagle-server.js",
		"/home/janos/Projects/plot-cv/eagle-query.js"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 107.0,
		"where_history":
		[
			"/home/roman/Projects/plot-cv,*.js",
			"/home/roman/Projects/plot-cv/lib/eagle,*.js",
			"/home/roman/Projects/plot-cv/lib,*.js",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"kaefer1",
			"g12361",
			"kaefer1",
			"kaefer1\"",
			"kaefer1",
			"^class",
			"^const",
			"Animator",
			"Package2Circuit",
			"Eagle2C",
			"e2_5_4v",
			"Eagle2C",
			"streamify",
			"LoadSVG",
			"mountDirs",
			"defaultDirs",
			"glob\\b",
			"glob",
			"import { MessageReceiver, MessageTransmitter, MessageTransceiver, codecs, RPCApi, RPCProxy, RPCObject, RPCFactory, Connection, RPC_PARSE_ERROR, RPC_INVALID_REQUEST, RPC_METHOD_NOT_FOUND, RPC_INVALID_PARAMS, RPC_INTERNAL_ERROR, RPC_SERVER_ERROR_BASE, FactoryEndpoint, RPCServer, RPCClient, FactoryClient, RPCSocket, GetProperties, GetKeys, SerializeValue, DeserializeSymbols, DeserializeValue, RPCConnect, RPCListen } from './quickjs/qjs-net/js/rpc.js';\n",
			">\n",
			"^  (.)\\:",
			"Heute",
			"Hippiainen",
			"Hippiainen<",
			"media",
			"media_wrap",
			"√§",
			"√º",
			"√∂",
			"BoardFromSchematic",
			"InitBoar",
			"MOVE",
			"instances",
			"PointList\\.prototype\\.([^ ]*) \\= function",
			"addPoint",
			"PointList\\.prototype\\.([^ ]*) \\= function",
			"\\.add\\b",
			"\\bvar\\b",
			"this\\._points",
			"add =",
			"safe",
			"this\\._points",
			"ySeries",
			"onMessage",
			"\\berror\\b",
			"send",
			"send.*error",
			"AddPoint",
			"error",
			"CreateSocket",
			"'L'",
			"lineCommand",
			"'L'",
			"zoomFactor",
			"ZoomHandler",
			"zoomFactor",
			"zoomPos",
			"ZoomHandler",
			"LoadSVG",
			"RenderPalette",
			"GetSignalNames",
			"TouchEvents",
			"MouseEvents",
			"FindPoint",
			"GetPosition",
			"CreateElement",
			"GetElementsBySignal",
			"SortElementsByPosition",
			"EllipticArc",
			"Tracked",
			"Observable",
			"onMouseWhee",
			"AddPoint",
			"AnchorPoints",
			"anchorPoints",
			"AddPoint",
			"Move",
			"Path",
			"'path'",
			"AnchorPoints",
			"'circle'",
			"TouchEvents",
			"$",
			"data-",
			"MovePoint",
			"AddPoint",
			"TouchEvent",
			"elementsFromPoint",
			"touchstart",
			"Touch \\? 'o",
			"touchstart",
			"FindPoint",
			"points",
			"FindPoint",
			"MovePoint",
			"anchorPoints",
			"useTrkl",
			"anchorPoints",
			"AddPoint",
			"assign",
			"anchorPoints",
			"point-",
			"'Touch'",
			"mousedown",
			"'touchstart",
			"waitOne",
			"streamify",
			"TouchEvents",
			"streamify",
			"TouchEvents",
			"touchstart",
			"streamify",
			"TouchEvents",
			"MoveHandler",
			"TouchEvents",
			"MouseEvents",
			"isObject",
			"BBox",
			"geom.js",
			"Up",
			"querySelector",
			"AnchorPoints",
			"'circle'",
			"nearest",
			"minIndex",
			"minDist",
			"find",
			"sub ="
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"  '\\1':",
			"&auml;",
			"&uuml;",
			"&ouml;",
			"\\1",
			"let",
			"this",
			"ret",
			"factor",
			"GetCirclePosition",
			"index",
			"dist",
			"}\\n\\n\\1",
			"}\\n\\1",
			"Log",
			"format_base",
			"\\1u",
			"format",
			"GREEN",
			"c",
			"output",
			"TYPE_MASK",
			" + (obj?.cacheBucket ?? '') + ",
			"\\1//\\2",
			"opts",
			"}\\n\\n",
			"}\\n\\n\\1",
			"",
			"\n      t = 'l';"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": "/home/roman/Projects/webakeit/static/img/globi-bg-vector.svg",
							"function_name_status_row": 0,
							"outline_rename_mode": false,
							"show_line_column": "disabled",
							"symkeys":
							[
							],
							"symlist":
							[
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1715165701.35,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "upload-server.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 36357,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								36357
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"show_line_column": "disabled",
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1715680829.65,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 12598.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "lib/svg.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 182157,
						"regions":
						{
						},
						"selection":
						[
							[
								182157,
								182157
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 7011,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1715687264.6,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 118464.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/home/roman/Projects/webakeit/static/img/globi-bg-vector.svg",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 188636,
						"regions":
						{
							"col_010101FF":
							{
								"flags": 16,
								"regions":
								[
									[
										86544,
										86551
									],
									[
										112058,
										112065
									],
									[
										119704,
										119711
									],
									[
										122065,
										122072
									],
									[
										129721,
										129728
									],
									[
										132094,
										132101
									],
									[
										139762,
										139769
									],
									[
										142132,
										142139
									],
									[
										149789,
										149796
									],
									[
										152162,
										152169
									],
									[
										159831,
										159838
									],
									[
										162216,
										162223
									],
									[
										169897,
										169904
									],
									[
										185814,
										185821
									]
								],
								"scope": "col_010101FF"
							},
							"col_010101FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_010101FF_circle.png",
								"regions":
								[
									[
										86515,
										86515
									],
									[
										112029,
										112029
									],
									[
										119685,
										119685
									],
									[
										122036,
										122036
									],
									[
										129702,
										129702
									],
									[
										132065,
										132065
									],
									[
										139743,
										139743
									],
									[
										142103,
										142103
									],
									[
										149770,
										149770
									],
									[
										152133,
										152133
									],
									[
										159812,
										159812
									],
									[
										162187,
										162187
									],
									[
										169878,
										169878
									],
									[
										185795,
										185795
									]
								],
								"scope": "col_gutter"
							},
							"col_020509FF":
							{
								"flags": 16,
								"regions":
								[
									[
										81610,
										81617
									]
								],
								"scope": "col_020509FF"
							},
							"col_020509FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_020509FF_circle.png",
								"regions":
								[
									[
										81581,
										81581
									]
								],
								"scope": "col_gutter"
							},
							"col_03030AFF":
							{
								"flags": 16,
								"regions":
								[
									[
										90485,
										90492
									]
								],
								"scope": "col_03030AFF"
							},
							"col_03030AFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_03030AFF_circle.png",
								"regions":
								[
									[
										90456,
										90456
									]
								],
								"scope": "col_gutter"
							},
							"col_03040FFF":
							{
								"flags": 16,
								"regions":
								[
									[
										110532,
										110539
									],
									[
										120530,
										120537
									],
									[
										130551,
										130558
									],
									[
										140596,
										140603
									],
									[
										150619,
										150626
									],
									[
										160666,
										160673
									]
								],
								"scope": "col_03040FFF"
							},
							"col_03040FFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_03040FFF_circle.png",
								"regions":
								[
									[
										110503,
										110503
									],
									[
										120501,
										120501
									],
									[
										130522,
										130522
									],
									[
										140567,
										140567
									],
									[
										150590,
										150590
									],
									[
										160637,
										160637
									]
								],
								"scope": "col_gutter"
							},
							"col_05060EFF":
							{
								"flags": 16,
								"regions":
								[
									[
										105273,
										105280
									]
								],
								"scope": "col_05060EFF"
							},
							"col_05060EFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_05060EFF_circle.png",
								"regions":
								[
									[
										105244,
										105244
									]
								],
								"scope": "col_gutter"
							},
							"col_06060DFF":
							{
								"flags": 16,
								"regions":
								[
									[
										84790,
										84797
									]
								],
								"scope": "col_06060DFF"
							},
							"col_06060DFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_06060DFF_circle.png",
								"regions":
								[
									[
										84761,
										84761
									]
								],
								"scope": "col_gutter"
							},
							"col_06080EFF":
							{
								"flags": 16,
								"regions":
								[
									[
										83167,
										83174
									]
								],
								"scope": "col_06080EFF"
							},
							"col_06080EFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_06080EFF_circle.png",
								"regions":
								[
									[
										83138,
										83138
									]
								],
								"scope": "col_gutter"
							},
							"col_064C80FF":
							{
								"flags": 16,
								"regions":
								[
									[
										185749,
										185756
									]
								],
								"scope": "col_064C80FF"
							},
							"col_064C80FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_064C80FF_circle.png",
								"regions":
								[
									[
										185720,
										185720
									]
								],
								"scope": "col_gutter"
							},
							"col_07030EFF":
							{
								"flags": 16,
								"regions":
								[
									[
										87599,
										87606
									]
								],
								"scope": "col_07030EFF"
							},
							"col_07030EFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_07030EFF_circle.png",
								"regions":
								[
									[
										87570,
										87570
									]
								],
								"scope": "col_gutter"
							},
							"col_070507FF":
							{
								"flags": 16,
								"regions":
								[
									[
										82775,
										82782
									]
								],
								"scope": "col_070507FF"
							},
							"col_070507FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_070507FF_circle.png",
								"regions":
								[
									[
										82746,
										82746
									]
								],
								"scope": "col_gutter"
							},
							"col_0D0C0CFF":
							{
								"flags": 16,
								"regions":
								[
									[
										113518,
										113525
									],
									[
										123528,
										123535
									],
									[
										133563,
										133570
									],
									[
										143595,
										143602
									],
									[
										153631,
										153638
									],
									[
										163691,
										163698
									]
								],
								"scope": "col_0D0C0CFF"
							},
							"col_0D0C0CFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_0D0C0CFF_circle.png",
								"regions":
								[
									[
										113489,
										113489
									],
									[
										123499,
										123499
									],
									[
										133534,
										133534
									],
									[
										143566,
										143566
									],
									[
										153602,
										153602
									],
									[
										163662,
										163662
									]
								],
								"scope": "col_gutter"
							},
							"col_0E0109FF":
							{
								"flags": 16,
								"regions":
								[
									[
										111648,
										111655
									],
									[
										121651,
										121658
									],
									[
										131676,
										131683
									],
									[
										141717,
										141724
									],
									[
										151744,
										151751
									],
									[
										161794,
										161801
									]
								],
								"scope": "col_0E0109FF"
							},
							"col_0E0109FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_0E0109FF_circle.png",
								"regions":
								[
									[
										111619,
										111619
									],
									[
										121622,
										121622
									],
									[
										131647,
										131647
									],
									[
										141688,
										141688
									],
									[
										151715,
										151715
									],
									[
										161765,
										161765
									]
								],
								"scope": "col_gutter"
							},
							"col_0E1202FF":
							{
								"flags": 16,
								"regions":
								[
									[
										77036,
										77045
									],
									[
										77941,
										77948
									]
								],
								"scope": "col_0E1202FF"
							},
							"col_0E1202FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_0E1202FF_circle.png",
								"regions":
								[
									[
										77025,
										77025
									],
									[
										77910,
										77910
									]
								],
								"scope": "col_gutter"
							},
							"col_116FA5FF":
							{
								"flags": 16,
								"regions":
								[
									[
										14846,
										14853
									]
								],
								"scope": "col_116FA5FF"
							},
							"col_116FA5FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_116FA5FF_circle.png",
								"regions":
								[
									[
										14825,
										14825
									]
								],
								"scope": "col_gutter"
							},
							"col_120107FF":
							{
								"flags": 16,
								"regions":
								[
									[
										113106,
										113113
									],
									[
										123112,
										123119
									],
									[
										133143,
										133150
									],
									[
										143179,
										143186
									],
									[
										153211,
										153218
									],
									[
										163267,
										163274
									]
								],
								"scope": "col_120107FF"
							},
							"col_120107FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_120107FF_circle.png",
								"regions":
								[
									[
										113077,
										113077
									],
									[
										123083,
										123083
									],
									[
										133114,
										133114
									],
									[
										143150,
										143150
									],
									[
										153182,
										153182
									],
									[
										163238,
										163238
									]
								],
								"scope": "col_gutter"
							},
							"col_134044FF":
							{
								"flags": 16,
								"regions":
								[
									[
										19073,
										19080
									],
									[
										53286,
										53293
									],
									[
										58261,
										58268
									]
								],
								"scope": "col_134044FF"
							},
							"col_134044FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_134044FF_circle.png",
								"regions":
								[
									[
										19046,
										19046
									],
									[
										53257,
										53257
									],
									[
										58232,
										58232
									]
								],
								"scope": "col_gutter"
							},
							"col_143A43FF":
							{
								"flags": 16,
								"regions":
								[
									[
										15768,
										15775
									]
								],
								"scope": "col_143A43FF"
							},
							"col_143A43FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_143A43FF_circle.png",
								"regions":
								[
									[
										15747,
										15747
									]
								],
								"scope": "col_gutter"
							},
							"col_14547AFF":
							{
								"flags": 16,
								"regions":
								[
									[
										2049,
										2056
									]
								],
								"scope": "col_14547AFF"
							},
							"col_14547AFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_14547AFF_circle.png",
								"regions":
								[
									[
										2022,
										2022
									]
								],
								"scope": "col_gutter"
							},
							"col_164C48FF":
							{
								"flags": 16,
								"regions":
								[
									[
										66647,
										66654
									]
								],
								"scope": "col_164C48FF"
							},
							"col_164C48FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_164C48FF_circle.png",
								"regions":
								[
									[
										66614,
										66614
									]
								],
								"scope": "col_gutter"
							},
							"col_180106FF":
							{
								"flags": 16,
								"regions":
								[
									[
										112822,
										112829
									],
									[
										122826,
										122833
									],
									[
										132855,
										132862
									],
									[
										142893,
										142900
									],
									[
										152923,
										152930
									],
									[
										162977,
										162984
									]
								],
								"scope": "col_180106FF"
							},
							"col_180106FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_180106FF_circle.png",
								"regions":
								[
									[
										112793,
										112793
									],
									[
										122797,
										122797
									],
									[
										132826,
										132826
									],
									[
										142864,
										142864
									],
									[
										152894,
										152894
									],
									[
										162948,
										162948
									]
								],
								"scope": "col_gutter"
							},
							"col_18534FFF":
							{
								"flags": 16,
								"regions":
								[
									[
										66245,
										66252
									]
								],
								"scope": "col_18534FFF"
							},
							"col_18534FFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_18534FFF_circle.png",
								"regions":
								[
									[
										66212,
										66212
									]
								],
								"scope": "col_gutter"
							},
							"col_192B63FF":
							{
								"flags": 16,
								"regions":
								[
									[
										99890,
										99897
									]
								],
								"scope": "col_192B63FF"
							},
							"col_192B63FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_192B63FF_circle.png",
								"regions":
								[
									[
										99871,
										99871
									]
								],
								"scope": "col_gutter"
							},
							"col_1A70A1FF":
							{
								"flags": 16,
								"regions":
								[
									[
										1939,
										1946
									]
								],
								"scope": "col_1A70A1FF"
							},
							"col_1A70A1FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_1A70A1FF_circle.png",
								"regions":
								[
									[
										1912,
										1912
									]
								],
								"scope": "col_gutter"
							},
							"col_1E5B59FF":
							{
								"flags": 16,
								"regions":
								[
									[
										15856,
										15863
									]
								],
								"scope": "col_1E5B59FF"
							},
							"col_1E5B59FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_1E5B59FF_circle.png",
								"regions":
								[
									[
										15835,
										15835
									]
								],
								"scope": "col_gutter"
							},
							"col_210100FF":
							{
								"flags": 16,
								"regions":
								[
									[
										88662,
										88669
									]
								],
								"scope": "col_210100FF"
							},
							"col_210100FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_210100FF_circle.png",
								"regions":
								[
									[
										88633,
										88633
									]
								],
								"scope": "col_gutter"
							},
							"col_210510FF":
							{
								"flags": 16,
								"regions":
								[
									[
										21437,
										21444
									]
								],
								"scope": "col_210510FF"
							},
							"col_210510FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_210510FF_circle.png",
								"regions":
								[
									[
										21410,
										21410
									]
								],
								"scope": "col_gutter"
							},
							"col_21583DFF":
							{
								"flags": 16,
								"regions":
								[
									[
										65791,
										65798
									],
									[
										67063,
										67070
									],
									[
										67834,
										67841
									],
									[
										68748,
										68755
									],
									[
										69633,
										69640
									]
								],
								"scope": "col_21583DFF"
							},
							"col_21583DFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_21583DFF_circle.png",
								"regions":
								[
									[
										65758,
										65758
									],
									[
										67032,
										67032
									],
									[
										67803,
										67803
									],
									[
										68717,
										68717
									],
									[
										69602,
										69602
									]
								],
								"scope": "col_gutter"
							},
							"col_260101FF":
							{
								"flags": 16,
								"regions":
								[
									[
										119867,
										119874
									],
									[
										129884,
										129891
									],
									[
										139925,
										139932
									],
									[
										149952,
										149959
									],
									[
										159994,
										160001
									],
									[
										170060,
										170067
									]
								],
								"scope": "col_260101FF"
							},
							"col_260101FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_260101FF_circle.png",
								"regions":
								[
									[
										119838,
										119838
									],
									[
										129855,
										129855
									],
									[
										139896,
										139896
									],
									[
										149923,
										149923
									],
									[
										159965,
										159965
									],
									[
										170031,
										170031
									]
								],
								"scope": "col_gutter"
							},
							"col_28172DFF":
							{
								"flags": 16,
								"regions":
								[
									[
										3061,
										3068
									],
									[
										30898,
										30905
									]
								],
								"scope": "col_28172DFF"
							},
							"col_28172DFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_28172DFF_circle.png",
								"regions":
								[
									[
										3034,
										3034
									],
									[
										30871,
										30871
									]
								],
								"scope": "col_gutter"
							},
							"col_2E162AFF":
							{
								"flags": 16,
								"regions":
								[
									[
										20235,
										20242
									]
								],
								"scope": "col_2E162AFF"
							},
							"col_2E162AFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_2E162AFF_circle.png",
								"regions":
								[
									[
										20208,
										20208
									]
								],
								"scope": "col_gutter"
							},
							"col_2E4636FF":
							{
								"flags": 16,
								"regions":
								[
									[
										37149,
										37156
									]
								],
								"scope": "col_2E4636FF"
							},
							"col_2E4636FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_2E4636FF_circle.png",
								"regions":
								[
									[
										37095,
										37095
									]
								],
								"scope": "col_gutter"
							},
							"col_2F1A1EFF":
							{
								"flags": 16,
								"regions":
								[
									[
										23679,
										23686
									]
								],
								"scope": "col_2F1A1EFF"
							},
							"col_2F1A1EFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_2F1A1EFF_circle.png",
								"regions":
								[
									[
										23652,
										23652
									]
								],
								"scope": "col_gutter"
							},
							"col_30A4E4FF":
							{
								"flags": 16,
								"regions":
								[
									[
										14759,
										14766
									]
								],
								"scope": "col_30A4E4FF"
							},
							"col_30A4E4FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_30A4E4FF_circle.png",
								"regions":
								[
									[
										14738,
										14738
									]
								],
								"scope": "col_gutter"
							},
							"col_310105FF":
							{
								"flags": 16,
								"regions":
								[
									[
										85451,
										85458
									]
								],
								"scope": "col_310105FF"
							},
							"col_310105FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_310105FF_circle.png",
								"regions":
								[
									[
										85422,
										85422
									]
								],
								"scope": "col_gutter"
							},
							"col_328BC8FF":
							{
								"flags": 16,
								"regions":
								[
									[
										2462,
										2469
									]
								],
								"scope": "col_328BC8FF"
							},
							"col_328BC8FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_328BC8FF_circle.png",
								"regions":
								[
									[
										2435,
										2435
									]
								],
								"scope": "col_gutter"
							},
							"col_39191AFF":
							{
								"flags": 16,
								"regions":
								[
									[
										71286,
										71295
									]
								],
								"scope": "col_39191AFF"
							},
							"col_39191AFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_39191AFF_circle.png",
								"regions":
								[
									[
										71275,
										71275
									]
								],
								"scope": "col_gutter"
							},
							"col_3B250FFF":
							{
								"flags": 16,
								"regions":
								[
									[
										178609,
										178616
									]
								],
								"scope": "col_3B250FFF"
							},
							"col_3B250FFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_3B250FFF_circle.png",
								"regions":
								[
									[
										178578,
										178578
									]
								],
								"scope": "col_gutter"
							},
							"col_3D2B15FF":
							{
								"flags": 16,
								"regions":
								[
									[
										177644,
										177651
									]
								],
								"scope": "col_3D2B15FF"
							},
							"col_3D2B15FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_3D2B15FF_circle.png",
								"regions":
								[
									[
										177613,
										177613
									]
								],
								"scope": "col_gutter"
							},
							"col_3E151DFF":
							{
								"flags": 16,
								"regions":
								[
									[
										790,
										797
									],
									[
										1019,
										1026
									]
								],
								"scope": "col_3E151DFF"
							},
							"col_3E151DFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_3E151DFF_circle.png",
								"regions":
								[
									[
										763,
										763
									],
									[
										992,
										992
									]
								],
								"scope": "col_gutter"
							},
							"col_404C46FF":
							{
								"flags": 16,
								"regions":
								[
									[
										18910,
										18917
									]
								],
								"scope": "col_404C46FF"
							},
							"col_404C46FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_404C46FF_circle.png",
								"regions":
								[
									[
										18883,
										18883
									]
								],
								"scope": "col_gutter"
							},
							"col_4498D0FF":
							{
								"flags": 16,
								"regions":
								[
									[
										2572,
										2579
									]
								],
								"scope": "col_4498D0FF"
							},
							"col_4498D0FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_4498D0FF_circle.png",
								"regions":
								[
									[
										2545,
										2545
									]
								],
								"scope": "col_gutter"
							},
							"col_4B2A14FF":
							{
								"flags": 16,
								"regions":
								[
									[
										178133,
										178140
									]
								],
								"scope": "col_4B2A14FF"
							},
							"col_4B2A14FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_4B2A14FF_circle.png",
								"regions":
								[
									[
										178102,
										178102
									]
								],
								"scope": "col_gutter"
							},
							"col_4B796CFF":
							{
								"flags": 16,
								"regions":
								[
									[
										15942,
										15949
									]
								],
								"scope": "col_4B796CFF"
							},
							"col_4B796CFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_4B796CFF_circle.png",
								"regions":
								[
									[
										15921,
										15921
									]
								],
								"scope": "col_gutter"
							},
							"col_500F1BFF":
							{
								"flags": 16,
								"regions":
								[
									[
										23789,
										23796
									]
								],
								"scope": "col_500F1BFF"
							},
							"col_500F1BFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_500F1BFF_circle.png",
								"regions":
								[
									[
										23762,
										23762
									]
								],
								"scope": "col_gutter"
							},
							"col_512915FF":
							{
								"flags": 16,
								"regions":
								[
									[
										179107,
										179114
									]
								],
								"scope": "col_512915FF"
							},
							"col_512915FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_512915FF_circle.png",
								"regions":
								[
									[
										179076,
										179076
									]
								],
								"scope": "col_gutter"
							},
							"col_521E01FF":
							{
								"flags": 16,
								"regions":
								[
									[
										179549,
										179556
									]
								],
								"scope": "col_521E01FF"
							},
							"col_521E01FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_521E01FF_circle.png",
								"regions":
								[
									[
										179518,
										179518
									]
								],
								"scope": "col_gutter"
							},
							"col_568E73FF":
							{
								"flags": 16,
								"regions":
								[
									[
										18843,
										18850
									]
								],
								"scope": "col_568E73FF"
							},
							"col_568E73FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_568E73FF_circle.png",
								"regions":
								[
									[
										18816,
										18816
									]
								],
								"scope": "col_gutter"
							},
							"col_592B09FF":
							{
								"flags": 16,
								"regions":
								[
									[
										180041,
										180048
									]
								],
								"scope": "col_592B09FF"
							},
							"col_592B09FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_592B09FF_circle.png",
								"regions":
								[
									[
										180010,
										180010
									]
								],
								"scope": "col_gutter"
							},
							"col_5A2A20FF":
							{
								"flags": 16,
								"regions":
								[
									[
										70892,
										70901
									],
									[
										71247,
										71254
									]
								],
								"scope": "col_5A2A20FF"
							},
							"col_5A2A20FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_5A2A20FF_circle.png",
								"regions":
								[
									[
										70881,
										70881
									],
									[
										71216,
										71216
									]
								],
								"scope": "col_gutter"
							},
							"col_619A7AFF":
							{
								"flags": 16,
								"regions":
								[
									[
										65685,
										65692
									]
								],
								"scope": "col_619A7AFF"
							},
							"col_619A7AFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_619A7AFF_circle.png",
								"regions":
								[
									[
										65656,
										65656
									]
								],
								"scope": "col_gutter"
							},
							"col_650007FF":
							{
								"flags": 16,
								"regions":
								[
									[
										98487,
										98494
									]
								],
								"scope": "col_650007FF"
							},
							"col_650007FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_650007FF_circle.png",
								"regions":
								[
									[
										98458,
										98458
									]
								],
								"scope": "col_gutter"
							},
							"col_666666FF":
							{
								"flags": 16,
								"regions":
								[
									[
										745,
										752
									]
								],
								"scope": "col_666666FF"
							},
							"col_666666FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_666666FF_circle.png",
								"regions":
								[
									[
										727,
										727
									]
								],
								"scope": "col_gutter"
							},
							"col_6A7D57FF":
							{
								"flags": 16,
								"regions":
								[
									[
										15324,
										15331
									]
								],
								"scope": "col_6A7D57FF"
							},
							"col_6A7D57FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_6A7D57FF_circle.png",
								"regions":
								[
									[
										15303,
										15303
									]
								],
								"scope": "col_gutter"
							},
							"col_6F3B00FF":
							{
								"flags": 16,
								"regions":
								[
									[
										180263,
										180270
									]
								],
								"scope": "col_6F3B00FF"
							},
							"col_6F3B00FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_6F3B00FF_circle.png",
								"regions":
								[
									[
										180232,
										180232
									]
								],
								"scope": "col_gutter"
							},
							"col_73223DFF":
							{
								"flags": 16,
								"regions":
								[
									[
										20124,
										20131
									]
								],
								"scope": "col_73223DFF"
							},
							"col_73223DFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_73223DFF_circle.png",
								"regions":
								[
									[
										20097,
										20097
									]
								],
								"scope": "col_gutter"
							},
							"col_735203FF":
							{
								"flags": 16,
								"regions":
								[
									[
										180485,
										180492
									]
								],
								"scope": "col_735203FF"
							},
							"col_735203FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_735203FF_circle.png",
								"regions":
								[
									[
										180454,
										180454
									]
								],
								"scope": "col_gutter"
							},
							"col_742C39FF":
							{
								"flags": 16,
								"regions":
								[
									[
										953,
										960
									]
								],
								"scope": "col_742C39FF"
							},
							"col_742C39FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_742C39FF_circle.png",
								"regions":
								[
									[
										926,
										926
									]
								],
								"scope": "col_gutter"
							},
							"col_752030FF":
							{
								"flags": 16,
								"regions":
								[
									[
										23191,
										23198
									]
								],
								"scope": "col_752030FF"
							},
							"col_752030FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_752030FF_circle.png",
								"regions":
								[
									[
										23164,
										23164
									]
								],
								"scope": "col_gutter"
							},
							"col_7A2D4BFF":
							{
								"flags": 16,
								"regions":
								[
									[
										22038,
										22045
									]
								],
								"scope": "col_7A2D4BFF"
							},
							"col_7A2D4BFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_7A2D4BFF_circle.png",
								"regions":
								[
									[
										22011,
										22011
									]
								],
								"scope": "col_gutter"
							},
							"col_7C3033FF":
							{
								"flags": 16,
								"regions":
								[
									[
										24877,
										24884
									]
								],
								"scope": "col_7C3033FF"
							},
							"col_7C3033FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_7C3033FF_circle.png",
								"regions":
								[
									[
										24850,
										24850
									]
								],
								"scope": "col_gutter"
							},
							"col_7D3D5CFF":
							{
								"flags": 16,
								"regions":
								[
									[
										3171,
										3178
									],
									[
										31006,
										31013
									]
								],
								"scope": "col_7D3D5CFF"
							},
							"col_7D3D5CFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_7D3D5CFF_circle.png",
								"regions":
								[
									[
										3144,
										3144
									],
									[
										30979,
										30979
									]
								],
								"scope": "col_gutter"
							},
							"col_851B36FF":
							{
								"flags": 16,
								"regions":
								[
									[
										22594,
										22601
									]
								],
								"scope": "col_851B36FF"
							},
							"col_851B36FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_851B36FF_circle.png",
								"regions":
								[
									[
										22567,
										22567
									]
								],
								"scope": "col_gutter"
							},
							"col_87132CFF":
							{
								"flags": 16,
								"regions":
								[
									[
										24278,
										24285
									]
								],
								"scope": "col_87132CFF"
							},
							"col_87132CFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_87132CFF_circle.png",
								"regions":
								[
									[
										24251,
										24251
									]
								],
								"scope": "col_gutter"
							},
							"col_889967FF":
							{
								"flags": 16,
								"regions":
								[
									[
										15237,
										15244
									]
								],
								"scope": "col_889967FF"
							},
							"col_889967FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_889967FF_circle.png",
								"regions":
								[
									[
										15216,
										15216
									]
								],
								"scope": "col_gutter"
							},
							"col_8C7427FF":
							{
								"flags": 16,
								"regions":
								[
									[
										180708,
										180715
									]
								],
								"scope": "col_8C7427FF"
							},
							"col_8C7427FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_8C7427FF_circle.png",
								"regions":
								[
									[
										180677,
										180677
									]
								],
								"scope": "col_gutter"
							},
							"col_902037FF":
							{
								"flags": 16,
								"regions":
								[
									[
										20832,
										20839
									]
								],
								"scope": "col_902037FF"
							},
							"col_902037FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_902037FF_circle.png",
								"regions":
								[
									[
										20805,
										20805
									]
								],
								"scope": "col_gutter"
							},
							"col_920428FF":
							{
								"flags": 16,
								"regions":
								[
									[
										89005,
										89012
									]
								],
								"scope": "col_920428FF"
							},
							"col_920428FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_920428FF_circle.png",
								"regions":
								[
									[
										88976,
										88976
									]
								],
								"scope": "col_gutter"
							},
							"col_971332FF":
							{
								"flags": 16,
								"regions":
								[
									[
										98386,
										98393
									]
								],
								"scope": "col_971332FF"
							},
							"col_971332FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_971332FF_circle.png",
								"regions":
								[
									[
										98357,
										98357
									]
								],
								"scope": "col_gutter"
							},
							"col_9E534EFF":
							{
								"flags": 16,
								"regions":
								[
									[
										23081,
										23088
									]
								],
								"scope": "col_9E534EFF"
							},
							"col_9E534EFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_9E534EFF_circle.png",
								"regions":
								[
									[
										23054,
										23054
									]
								],
								"scope": "col_gutter"
							},
							"col_A0A0A0FF":
							{
								"flags": 16,
								"regions":
								[
									[
										21929,
										21936
									]
								],
								"scope": "col_A0A0A0FF"
							},
							"col_A0A0A0FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_A0A0A0FF_circle.png",
								"regions":
								[
									[
										21902,
										21902
									]
								],
								"scope": "col_gutter"
							},
							"col_A47E2BFF":
							{
								"flags": 16,
								"regions":
								[
									[
										180932,
										180939
									]
								],
								"scope": "col_A47E2BFF"
							},
							"col_A47E2BFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_A47E2BFF_circle.png",
								"regions":
								[
									[
										180901,
										180901
									]
								],
								"scope": "col_gutter"
							},
							"col_AA3255FF":
							{
								"flags": 16,
								"regions":
								[
									[
										89299,
										89306
									]
								],
								"scope": "col_AA3255FF"
							},
							"col_AA3255FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_AA3255FF_circle.png",
								"regions":
								[
									[
										89270,
										89270
									]
								],
								"scope": "col_gutter"
							},
							"col_B07F54FF":
							{
								"flags": 16,
								"regions":
								[
									[
										74980,
										74989
									]
								],
								"scope": "col_B07F54FF"
							},
							"col_B07F54FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_B07F54FF_circle.png",
								"regions":
								[
									[
										74969,
										74969
									]
								],
								"scope": "col_gutter"
							},
							"col_B19292FF":
							{
								"flags": 16,
								"regions":
								[
									[
										38107,
										38114
									]
								],
								"scope": "col_B19292FF"
							},
							"col_B19292FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_B19292FF_circle.png",
								"regions":
								[
									[
										38080,
										38080
									]
								],
								"scope": "col_gutter"
							},
							"col_B27146FF":
							{
								"flags": 16,
								"regions":
								[
									[
										1534,
										1541
									]
								],
								"scope": "col_B27146FF"
							},
							"col_B27146FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_B27146FF_circle.png",
								"regions":
								[
									[
										1507,
										1507
									]
								],
								"scope": "col_gutter"
							},
							"col_BA1740FF":
							{
								"flags": 16,
								"regions":
								[
									[
										24388,
										24395
									]
								],
								"scope": "col_BA1740FF"
							},
							"col_BA1740FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_BA1740FF_circle.png",
								"regions":
								[
									[
										24361,
										24361
									]
								],
								"scope": "col_gutter"
							},
							"col_BABABAFF":
							{
								"flags": 16,
								"regions":
								[
									[
										18308,
										18315
									]
								],
								"scope": "col_BABABAFF"
							},
							"col_BABABAFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_BABABAFF_circle.png",
								"regions":
								[
									[
										18281,
										18281
									]
								],
								"scope": "col_gutter"
							},
							"col_BC7966FF":
							{
								"flags": 16,
								"regions":
								[
									[
										24987,
										24994
									]
								],
								"scope": "col_BC7966FF"
							},
							"col_BC7966FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_BC7966FF_circle.png",
								"regions":
								[
									[
										24960,
										24960
									]
								],
								"scope": "col_gutter"
							},
							"col_C14394FF":
							{
								"flags": 16,
								"regions":
								[
									[
										60502,
										60509
									]
								],
								"scope": "col_C14394FF"
							},
							"col_C14394FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_C14394FF_circle.png",
								"regions":
								[
									[
										60473,
										60473
									]
								],
								"scope": "col_gutter"
							},
							"col_C3BE5CFF":
							{
								"flags": 16,
								"regions":
								[
									[
										177180,
										177187
									]
								],
								"scope": "col_C3BE5CFF"
							},
							"col_C3BE5CFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_C3BE5CFF_circle.png",
								"regions":
								[
									[
										177151,
										177151
									]
								],
								"scope": "col_gutter"
							},
							"col_C44B63FF":
							{
								"flags": 16,
								"regions":
								[
									[
										55603,
										55610
									]
								],
								"scope": "col_C44B63FF"
							},
							"col_C44B63FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_C44B63FF_circle.png",
								"regions":
								[
									[
										55574,
										55574
									]
								],
								"scope": "col_gutter"
							},
							"col_C5764EFF":
							{
								"flags": 16,
								"regions":
								[
									[
										179817,
										179824
									]
								],
								"scope": "col_C5764EFF"
							},
							"col_C5764EFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_C5764EFF_circle.png",
								"regions":
								[
									[
										179786,
										179786
									]
								],
								"scope": "col_gutter"
							},
							"col_C8234CFF":
							{
								"flags": 16,
								"regions":
								[
									[
										20721,
										20728
									]
								],
								"scope": "col_C8234CFF"
							},
							"col_C8234CFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_C8234CFF_circle.png",
								"regions":
								[
									[
										20694,
										20694
									]
								],
								"scope": "col_gutter"
							},
							"col_CB6264FF":
							{
								"flags": 16,
								"regions":
								[
									[
										179326,
										179333
									]
								],
								"scope": "col_CB6264FF"
							},
							"col_CB6264FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_CB6264FF_circle.png",
								"regions":
								[
									[
										179295,
										179295
									]
								],
								"scope": "col_gutter"
							},
							"col_CCB7B7FF":
							{
								"flags": 16,
								"regions":
								[
									[
										38471,
										38478
									]
								],
								"scope": "col_CCB7B7FF"
							},
							"col_CCB7B7FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_CCB7B7FF_circle.png",
								"regions":
								[
									[
										38452,
										38452
									]
								],
								"scope": "col_gutter"
							},
							"col_D0285EFF":
							{
								"flags": 16,
								"regions":
								[
									[
										25815,
										25822
									]
								],
								"scope": "col_D0285EFF"
							},
							"col_D0285EFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_D0285EFF_circle.png",
								"regions":
								[
									[
										25788,
										25788
									]
								],
								"scope": "col_gutter"
							},
							"col_D42A65FF":
							{
								"flags": 16,
								"regions":
								[
									[
										99479,
										99486
									]
								],
								"scope": "col_D42A65FF"
							},
							"col_D42A65FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_D42A65FF_circle.png",
								"regions":
								[
									[
										99450,
										99450
									]
								],
								"scope": "col_gutter"
							},
							"col_D7C7C7FF":
							{
								"flags": 16,
								"regions":
								[
									[
										37996,
										38003
									]
								],
								"scope": "col_D7C7C7FF"
							},
							"col_D7C7C7FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_D7C7C7FF_circle.png",
								"regions":
								[
									[
										37969,
										37969
									]
								],
								"scope": "col_gutter"
							},
							"col_DA8153FF":
							{
								"flags": 16,
								"regions":
								[
									[
										177912,
										177919
									]
								],
								"scope": "col_DA8153FF"
							},
							"col_DA8153FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_DA8153FF_circle.png",
								"regions":
								[
									[
										177881,
										177881
									]
								],
								"scope": "col_gutter"
							},
							"col_DA9161FF":
							{
								"flags": 16,
								"regions":
								[
									[
										181870,
										181877
									]
								],
								"scope": "col_DA9161FF"
							},
							"col_DA9161FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_DA9161FF_circle.png",
								"regions":
								[
									[
										181841,
										181841
									]
								],
								"scope": "col_gutter"
							},
							"col_DC6793FF":
							{
								"flags": 16,
								"regions":
								[
									[
										25749,
										25756
									]
								],
								"scope": "col_DC6793FF"
							},
							"col_DC6793FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_DC6793FF_circle.png",
								"regions":
								[
									[
										25722,
										25722
									]
								],
								"scope": "col_gutter"
							},
							"col_DC6798FF":
							{
								"flags": 16,
								"regions":
								[
									[
										25475,
										25482
									]
								],
								"scope": "col_DC6798FF"
							},
							"col_DC6798FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_DC6798FF_circle.png",
								"regions":
								[
									[
										25448,
										25448
									]
								],
								"scope": "col_gutter"
							},
							"col_DC6E50FF":
							{
								"flags": 16,
								"regions":
								[
									[
										178886,
										178893
									]
								],
								"scope": "col_DC6E50FF"
							},
							"col_DC6E50FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_DC6E50FF_circle.png",
								"regions":
								[
									[
										178855,
										178855
									]
								],
								"scope": "col_gutter"
							},
							"col_DF2C54FF":
							{
								"flags": 16,
								"regions":
								[
									[
										70348,
										70357
									],
									[
										70480,
										70487
									]
								],
								"scope": "col_DF2C54FF"
							},
							"col_DF2C54FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_DF2C54FF_circle.png",
								"regions":
								[
									[
										70337,
										70337
									],
									[
										70449,
										70449
									]
								],
								"scope": "col_gutter"
							},
							"col_E01A69FF":
							{
								"flags": 16,
								"regions":
								[
									[
										21328,
										21335
									]
								],
								"scope": "col_E01A69FF"
							},
							"col_E01A69FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_E01A69FF_circle.png",
								"regions":
								[
									[
										21301,
										21301
									]
								],
								"scope": "col_gutter"
							},
							"col_E34D8AFF":
							{
								"flags": 16,
								"regions":
								[
									[
										22483,
										22490
									],
									[
										92495,
										92502
									],
									[
										96391,
										96398
									]
								],
								"scope": "col_E34D8AFF"
							},
							"col_E34D8AFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_E34D8AFF_circle.png",
								"regions":
								[
									[
										22456,
										22456
									],
									[
										92466,
										92466
									],
									[
										96362,
										96362
									]
								],
								"scope": "col_gutter"
							},
							"col_E39070FF":
							{
								"flags": 16,
								"regions":
								[
									[
										178407,
										178414
									]
								],
								"scope": "col_E39070FF"
							},
							"col_E39070FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_E39070FF_circle.png",
								"regions":
								[
									[
										178376,
										178376
									]
								],
								"scope": "col_gutter"
							},
							"col_E988AFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										25630,
										25637
									]
								],
								"scope": "col_E988AFFF"
							},
							"col_E988AFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_E988AFFF_circle.png",
								"regions":
								[
									[
										25603,
										25603
									]
								],
								"scope": "col_gutter"
							},
							"col_EBD373FF":
							{
								"flags": 16,
								"regions":
								[
									[
										1423,
										1430
									],
									[
										74871,
										74880
									]
								],
								"scope": "col_EBD373FF"
							},
							"col_EBD373FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_EBD373FF_circle.png",
								"regions":
								[
									[
										1396,
										1396
									],
									[
										74860,
										74860
									]
								],
								"scope": "col_gutter"
							},
							"col_EFCEE0FF":
							{
								"flags": 16,
								"regions":
								[
									[
										99825,
										99832
									]
								],
								"scope": "col_EFCEE0FF"
							},
							"col_EFCEE0FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_EFCEE0FF_circle.png",
								"regions":
								[
									[
										99796,
										99796
									]
								],
								"scope": "col_gutter"
							},
							"col_F1A974FF":
							{
								"flags": 16,
								"regions":
								[
									[
										180982,
										180989
									]
								],
								"scope": "col_F1A974FF"
							},
							"col_F1A974FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_F1A974FF_circle.png",
								"regions":
								[
									[
										180963,
										180963
									]
								],
								"scope": "col_gutter"
							},
							"col_F1C6E6FF":
							{
								"flags": 16,
								"regions":
								[
									[
										120201,
										120208
									],
									[
										130220,
										130227
									],
									[
										140263,
										140270
									],
									[
										150288,
										150295
									],
									[
										160333,
										160340
									],
									[
										170400,
										170407
									]
								],
								"scope": "col_F1C6E6FF"
							},
							"col_F1C6E6FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_F1C6E6FF_circle.png",
								"regions":
								[
									[
										120172,
										120172
									],
									[
										130191,
										130191
									],
									[
										140234,
										140234
									],
									[
										150259,
										150259
									],
									[
										160304,
										160304
									],
									[
										170371,
										170371
									]
								],
								"scope": "col_gutter"
							},
							"col_F2D2E7FF":
							{
								"flags": 16,
								"regions":
								[
									[
										86647,
										86654
									]
								],
								"scope": "col_F2D2E7FF"
							},
							"col_F2D2E7FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_F2D2E7FF_circle.png",
								"regions":
								[
									[
										86618,
										86618
									]
								],
								"scope": "col_gutter"
							},
							"col_F3D3E0FF":
							{
								"flags": 16,
								"regions":
								[
									[
										86986,
										86993
									]
								],
								"scope": "col_F3D3E0FF"
							},
							"col_F3D3E0FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_F3D3E0FF_circle.png",
								"regions":
								[
									[
										86957,
										86957
									]
								],
								"scope": "col_gutter"
							},
							"col_F6DA5EFF":
							{
								"flags": 16,
								"regions":
								[
									[
										53361,
										53368
									]
								],
								"scope": "col_F6DA5EFF"
							},
							"col_F6DA5EFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_F6DA5EFF_circle.png",
								"regions":
								[
									[
										53332,
										53332
									]
								],
								"scope": "col_gutter"
							},
							"col_FACFEDFF":
							{
								"flags": 16,
								"regions":
								[
									[
										89810,
										89817
									]
								],
								"scope": "col_FACFEDFF"
							},
							"col_FACFEDFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FACFEDFF_circle.png",
								"regions":
								[
									[
										89781,
										89781
									]
								],
								"scope": "col_gutter"
							},
							"col_FBF177FF":
							{
								"flags": 16,
								"regions":
								[
									[
										172466,
										172473
									]
								],
								"scope": "col_FBF177FF"
							},
							"col_FBF177FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FBF177FF_circle.png",
								"regions":
								[
									[
										172447,
										172447
									]
								],
								"scope": "col_gutter"
							},
							"col_FDEDFDFF":
							{
								"flags": 16,
								"regions":
								[
									[
										187392,
										187401
									],
									[
										187457,
										187464
									]
								],
								"scope": "col_FDEDFDFF"
							},
							"col_FDEDFDFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FDEDFDFF_circle.png",
								"regions":
								[
									[
										187381,
										187381
									],
									[
										187426,
										187426
									]
								],
								"scope": "col_gutter"
							},
							"col_FDFAFCFF":
							{
								"flags": 16,
								"regions":
								[
									[
										79689,
										79696
									],
									[
										83928,
										83935
									]
								],
								"scope": "col_FDFAFCFF"
							},
							"col_FDFAFCFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FDFAFCFF_circle.png",
								"regions":
								[
									[
										79670,
										79670
									],
									[
										83899,
										83899
									]
								],
								"scope": "col_gutter"
							},
							"col_FEEB63FF":
							{
								"flags": 16,
								"regions":
								[
									[
										188459,
										188466
									]
								],
								"scope": "col_FEEB63FF"
							},
							"col_FEEB63FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FEEB63FF_circle.png",
								"regions":
								[
									[
										188440,
										188440
									]
								],
								"scope": "col_gutter"
							},
							"col_FFFFFFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										3633,
										3640
									],
									[
										4679,
										4686
									],
									[
										5709,
										5716
									],
									[
										6751,
										6758
									],
									[
										7805,
										7812
									],
									[
										8835,
										8842
									],
									[
										9881,
										9888
									],
									[
										10945,
										10952
									],
									[
										11981,
										11988
									],
									[
										18198,
										18205
									]
								],
								"scope": "col_FFFFFFFF"
							},
							"col_FFFFFFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FFFFFFFF_circle.png",
								"regions":
								[
									[
										3608,
										3608
									],
									[
										4654,
										4654
									],
									[
										5684,
										5684
									],
									[
										6726,
										6726
									],
									[
										7780,
										7780
									],
									[
										8810,
										8810
									],
									[
										9856,
										9856
									],
									[
										10920,
										10920
									],
									[
										11956,
										11956
									],
									[
										18171,
										18171
									]
								],
								"scope": "col_gutter"
							}
						},
						"selection":
						[
							[
								110165,
								110165
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 1683,
							"syntax": "Packages/XML/XML.sublime-syntax",
							"tab_size": 3,
							"tabs_extra_last_activated": 1715689909.31,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 42342.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "server.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 29538,
						"regions":
						{
						},
						"selection":
						[
							[
								4033,
								4033
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 140,
							"show_line_column": "disabled",
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1715165697.6,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2190.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "draw-utils.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5161,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1715165697.59,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "draw.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 500,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1715165697.57,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "draw.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16716,
						"regions":
						{
						},
						"selection":
						[
							[
								15869,
								16034
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 599,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1715608231.09,
							"tabs_extra_last_activated_sheet_index": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 10626.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "eagle-shell.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 42559,
						"regions":
						{
						},
						"selection":
						[
							[
								36261,
								36261
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 1279,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1715610923.37,
							"tabs_extra_last_activated_sheet_index": 5,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 25756.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "lib/dom/element.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 35370,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1715617068.52,
							"tabs_extra_last_activated_sheet_index": 6,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "lib/eagle/element.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 36661,
						"regions":
						{
						},
						"selection":
						[
							[
								36661,
								36661
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 1026,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1715608460.42,
							"tabs_extra_last_activated_sheet_index": 7,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 17443.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 32.0
	},
	"input":
	{
		"height": 41.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.8,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 300.0
	},
	"output.Debugger Console":
	{
		"height": 300.0
	},
	"output.exec":
	{
		"height": 138.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "plot-cv.sublime-project",
	"replace":
	{
		"height": 60.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"svg.js",
				"lib/svg.js"
			],
			[
				"elemen",
				"lib/eagle/element.js"
			],
			[
				"eagle-she",
				"eagle-shell.js"
			],
			[
				"draw.js",
				"draw.js"
			],
			[
				"draw.ht",
				"draw.html"
			],
			[
				"draw",
				"draw-utils.js"
			],
			[
				"server.",
				"server.js"
			],
			[
				"upload-ser",
				"upload-server.js"
			],
			[
				"htmle",
				"lib/htmlentities.js"
			],
			[
				"webka",
				"webakeit-telegram.js"
			],
			[
				"xml-she",
				"quickjs/qjs-modules/xml-shell.js"
			],
			[
				".html",
				"fire.html"
			],
			[
				"numbers2",
				"numbers2.c"
			],
			[
				"main.js",
				"main.js"
			],
			[
				"main",
				"main.js"
			],
			[
				"splines",
				"lib/geom/splines.js"
			],
			[
				"pointList",
				"lib/geom/pointList.js"
			],
			[
				"fire.js",
				"fire.js"
			],
			[
				"compon",
				"components.js"
			],
			[
				"ointlist",
				"lib/geom/pointList.js"
			],
			[
				"events.js",
				"lib/async/events.js"
			],
			[
				"point.js",
				"lib/geom/point.js"
			],
			[
				"misc.js",
				"lib/misc.js"
			],
			[
				"draw.css",
				"static/css/draw.css"
			],
			[
				"upload-server",
				"upload-server.js"
			],
			[
				"websocket",
				"webSocket.js"
			],
			[
				"draw.html",
				"draw.html"
			],
			[
				"autoStore",
				"lib/autoStore.js"
			],
			[
				"resolve-im",
				"quickjs/qjs-modules/resolve-imports.js"
			],
			[
				"svg-box",
				"svg-box.js"
			],
			[
				"fd-graph",
				"lib/fd-graph.js"
			],
			[
				"draw-u",
				"draw-utils.js"
			],
			[
				"draw-util",
				"draw-utils.js"
			],
			[
				"test-nano",
				"test-nanovg.js"
			],
			[
				"fd-gra",
				"lib/fd-graph.js"
			],
			[
				"graph.js",
				"lib/geom/graph.js"
			],
			[
				"eagle-shell",
				"eagle-shell.js"
			],
			[
				"node.js",
				"lib/eagle/node.js"
			],
			[
				"eleme",
				"lib/eagle/element.js"
			],
			[
				"quickjs-mysql.c",
				"quickjs/qjs-modules/quickjs-mysql.c"
			],
			[
				"mailcow-db",
				"mailcow-db.js"
			],
			[
				"wscli.js",
				"quickjs/qjs-net/wscli.js"
			],
			[
				"upload.js",
				"upload.js"
			],
			[
				"workertest",
				"workertest.js"
			],
			[
				"promise-wor",
				"promise-worker.js"
			],
			[
				"test-work",
				"test-worker.js"
			],
			[
				"debugger-ser",
				"debugger-server.js"
			],
			[
				"upload.css",
				"static/css/upload.css"
			],
			[
				"upload.html",
				"upload.html"
			],
			[
				"draw-ut",
				"draw-utils.js"
			],
			[
				"test-nan",
				"test-nanovg.js"
			],
			[
				"cv-shell",
				"cv-shell.js"
			],
			[
				"test-open",
				"test-opencv.js"
			],
			[
				"test-vid",
				"test-video.js"
			],
			[
				"test-opencv",
				"test-opencv.js"
			],
			[
				"noise.js",
				"noise.js"
			],
			[
				"noise",
				"noise.html"
			],
			[
				"dire",
				"directory.html"
			],
			[
				"upload",
				"upload.html"
			],
			[
				"map.ht",
				"map.html"
			],
			[
				"landing",
				"landing.html"
			],
			[
				"fire",
				"fire.html"
			],
			[
				"filelist",
				"filelist.html"
			],
			[
				"coil",
				"coil.html"
			],
			[
				"util.js",
				"quickjs/qjs-modules/lib/util.js"
			],
			[
				"inde",
				"index.html"
			],
			[
				"404.ht",
				"404.html"
			],
			[
				"lscac",
				"lib/lscache.js"
			],
			[
				"style.css",
				"style.css"
			],
			[
				"direcot",
				"directory.html"
			],
			[
				"rpc.js",
				"quickjs/qjs-net/js/rpc.js"
			],
			[
				"direc",
				"directory.html"
			],
			[
				"smd.js",
				"lib/eagle/components/smd.js"
			],
			[
				"smd.jy",
				"quickjs/qjs-modules/3rdparty/denodrivers-postgres/docs/.nojekyll"
			],
			[
				"via.js",
				"lib/eagle/components/via.js"
			],
			[
				"hole.js",
				"lib/eagle/components/hole.js"
			],
			[
				"eagle2sv",
				"eagle2svg.js"
			],
			[
				"svgRe",
				"lib/eagle/svgRenderer.js"
			],
			[
				"boardre",
				"lib/eagle/boardRenderer.js"
			],
			[
				"polygon",
				"lib/eagle/components/polygon.js"
			],
			[
				"polygon.js",
				"lib/geom/polygon.js"
			],
			[
				"symbol",
				"lib/eagle/components/symbol.js"
			],
			[
				"wire.js",
				"lib/eagle/components/wire.js"
			],
			[
				"components/sym",
				"lib/eagle/components/symbol.js"
			],
			[
				"eagle/ele",
				"lib/eagle/element.js"
			],
			[
				"github-user",
				"github-userscript.js"
			],
			[
				"line.js",
				"lib/geom/line.js"
			],
			[
				"rect.",
				"lib/geom/rect.js"
			],
			[
				"repl.js",
				"quickjs/qjs-modules/lib/repl.js"
			],
			[
				"minnet-clie",
				"quickjs/qjs-net/src/minnet-client.c"
			],
			[
				"callbaCK.C",
				"quickjs/qjs-net/lib/callback.c"
			],
			[
				"internal",
				"quickjs/qjs-modules/quickjs-internal.h"
			],
			[
				"utils.c",
				"quickjs/qjs-modules/src/utils.c"
			],
			[
				"qjsm.c",
				"quickjs/qjs-modules/src/qjsm.c"
			],
			[
				"eagle2",
				"eagle2gerber.js"
			],
			[
				"pcb-con",
				"pcb-conversion.js"
			],
			[
				"test_free",
				"qjs-opencv/tests/test_freetype.js"
			],
			[
				"param.js",
				"param.js"
			],
			[
				"make",
				"make-bitmap.js"
			],
			[
				"test_png",
				"qjs-opencv/tests/test_png.js"
			],
			[
				"stream/utils",
				"lib/stream/utils.js"
			],
			[
				"svg-cr",
				"svg-crop-pad.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 330.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
