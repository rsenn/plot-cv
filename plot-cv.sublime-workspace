{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"getOwnPr",
				"getOwnPropertyNames(...)"
			],
			[
				"Prom",
				"PromiseWorker"
			],
			[
				"trans",
				"transformation"
			],
			[
				"allow",
				"allowedDirs"
			],
			[
				"Get",
				"GetElementsBySignal"
			],
			[
				"GetEle",
				"GetElementsBySignal"
			],
			[
				"getOwn",
				"getOwnPropertyNames(...)"
			],
			[
				"ColorSi",
				"ColorSignals"
			],
			[
				"HTML",
				"HTMLTableRow"
			],
			[
				"HTMLTable",
				"HTMLTableColumn"
			],
			[
				"rend",
				"renderToString"
			],
			[
				"Pack",
				"Package2Circuit"
			],
			[
				"lazyP",
				"lazyProperties"
			],
			[
				"JS_Get",
				"JS_GetProperty"
			],
			[
				"Ret",
				"ReturnValuePathFunction"
			],
			[
				"cFunc",
				"cFuncListObjects"
			],
			[
				"isC",
				"isCFuncCall"
			],
			[
				"En",
				"EntityNames"
			],
			[
				"parseFrom",
				"parseFromString"
			],
			[
				"pseu",
				"pseudoClassArg"
			],
			[
				"pseudoC",
				"pseudoClassName"
			],
			[
				"Key",
				"KeyboardEvent"
			],
			[
				"getOp",
				"getOptionEntries"
			],
			[
				"setProp",
				"setPropertyValue"
			],
			[
				"parse",
				"parseSelectors"
			],
			[
				"JS_SetPr",
				"JS_SetPropertyStr"
			],
			[
				"jsm_buil",
				"jsm_builtin_init"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"JS_Set",
				"JS_SetProperty"
			],
			[
				"JS_New",
				"JS_NewObject"
			],
			[
				"ide",
				"importIdentifiers"
			],
			[
				"iden",
				"importIdentifiers"
			],
			[
				"import",
				"importIdentifiers"
			],
			[
				"ident",
				"identifierSets"
			],
			[
				"path_is",
				"path_is_absolute"
			],
			[
				"js_is_",
				"js_is_null_or_undefined"
			],
			[
				"path_skip_se",
				"path_skip_separator_s"
			],
			[
				"WRITABLE_METHO",
				"WRITABLE_METHOD_CLOSE"
			],
			[
				"list_fo",
				"list_for_each_prev"
			],
			[
				"JS_Th",
				"JS_ThrowOutOfMemory"
			],
			[
				"JS_",
				"JS_ThrowOutOfMemory"
			],
			[
				"underly",
				"underlying_source"
			],
			[
				"Tok",
				"TokenSequence"
			],
			[
				"JS_GetPr",
				"JS_GetPropertyStr"
			],
			[
				"JS_Thro",
				"JS_ThrowOutOfMemory"
			],
			[
				"getAt",
				"getAttributeNames"
			],
			[
				"self",
				"self_closing_tags"
			],
			[
				"self_",
				"self_closing_tags"
			],
			[
				"JS_PROP",
				"JS_PROP_ENUMERABLE"
			],
			[
				"depe",
				"dependencyMap"
			],
			[
				"de",
				"dependencyMap"
			],
			[
				"dep",
				"dependencyMap"
			],
			[
				"js_is_null",
				"js_is_null_or_undefined"
			],
			[
				"JS_P",
				"JS_PROP_ENUMERABLE"
			],
			[
				"JS_SetP",
				"JS_SetPropertyUint32"
			],
			[
				"spec",
				"specifiers"
			],
			[
				"Num",
				"NumericRange"
			],
			[
				"token_r",
				"token_release_rt"
			],
			[
				"JS_Thr",
				"JS_ThrowTypeError"
			],
			[
				"js_",
				"js_location_data"
			],
			[
				"debug_js_mall",
				"debug_js_malloc_usable_size"
			],
			[
				"repl",
				"replaceRange"
			],
			[
				"js_malloc_u",
				"js_malloc_usable_size_rt"
			],
			[
				"malloc",
				"malloc_usable_size"
			],
			[
				"all",
				"alloc_block_list"
			],
			[
				"alloc",
				"alloc_block_list"
			],
			[
				"path_skip",
				"path_skip_component"
			],
			[
				"jsm_mo",
				"jsm_module_loader"
			],
			[
				"JS_Throw",
				"JS_ThrowInternalError"
			],
			[
				"JS_AtomTo",
				"JS_AtomToValue"
			],
			[
				"inspect",
				"inspectSymbol"
			],
			[
				"at",
				"attributes"
			],
			[
				"parent",
				"parentElement"
			],
			[
				"owner",
				"ownerElement"
			],
			[
				"get",
				"getPrototypeOf"
			],
			[
				"child",
				"childElementCount"
			],
			[
				"getO",
				"getOwnPropertyNames"
			],
			[
				"js_misc_im",
				"js_misc_immutable_constructor"
			],
			[
				"obj",
				"object_tostring"
			],
			[
				"js_misc_immu",
				"js_misc_immutable_free"
			],
			[
				"js_misc_imm",
				"js_misc_immutable_constructor"
			],
			[
				"CMAKE_IMPORT",
				"CMAKE_IMPORT_LIBRARY_SUFFIX"
			],
			[
				"CMAKE_CUR",
				"CMAKE_CURRENT_BINARY_DIR"
			],
			[
				"js_is",
				"js_is_null_or_undefined"
			],
			[
				"js_asy",
				"js_async_socket_class_id"
			],
			[
				"JS_NewObj",
				"JS_NewObjectProtoClass"
			],
			[
				"async_",
				"async_socket_proto"
			],
			[
				"js_socket_class",
				"js_socket_class_id"
			],
			[
				"g",
				"getOwnPropertyNames(...)"
			],
			[
				"js_sockaddr_cl",
				"js_sockaddr_class_id"
			],
			[
				"js_so",
				"js_sockaddr_constructor"
			],
			[
				"js_sys",
				"js_syscallerror_class_id"
			],
			[
				"js_string",
				"js_stringdecoder_class_id"
			],
			[
				"js_pred",
				"js_predicate_class_id"
			],
			[
				"js_syn",
				"js_syntaxerror_class"
			],
			[
				"js_child",
				"js_child_process_class_id"
			],
			[
				"js_b",
				"js_blob_class_id"
			],
			[
				"js_loca",
				"js_location_class_id"
			],
			[
				"js_token_in",
				"js_token_inspect_funcs"
			],
			[
				"set",
				"setReadHandler"
			],
			[
				"js_get_",
				"js_get_propertystr_bool"
			],
			[
				"js_misc_ate",
				"js_misc_atexit_functions"
			],
			[
				"isF",
				"isFunction"
			],
			[
				"tab",
				"tab_atom_len"
			],
			[
				"isARr",
				"isArrayBuffer"
			],
			[
				"BIT",
				"BITFIELD_FROMARRAY"
			],
			[
				"to",
				"toStringTag"
			],
			[
				"inotify",
				"inotify_add_watch"
			],
			[
				"JS_SetProp",
				"JS_SetPropertyUint32"
			],
			[
				"JS_GEt",
				"JS_GetGlobalObject"
			],
			[
				"dbuf_put",
				"dbuf_put_colorstr"
			],
			[
				"REPEATER_",
				"REPEATER_REJECTED"
			],
			[
				"REP",
				"REPEATER_DONE"
			],
			[
				"resol",
				"resolving_funcs"
			],
			[
				"JS_NEwCFun",
				"JS_NewCFunctionData"
			],
			[
				"js_function",
				"js_function_bind_this"
			],
			[
				"js_repeater_iter",
				"js_repeater_iteration"
			],
			[
				"REPEA",
				"REPEATER_REJECTED"
			],
			[
				"exe",
				"execution"
			],
			[
				"REPEAT",
				"REPEATER_STOPPED"
			],
			[
				"JS_THro",
				"JS_ThrowOutOfMemory"
			],
			[
				"repeater",
				"repeater_finalizer"
			],
			[
				"BACK",
				"BACKGROUND_RED"
			],
			[
				"js_inspec",
				"js_inspect_tostring"
			],
			[
				"JS_Atom",
				"JS_AtomToValue"
			],
			[
				"JS_GetP",
				"JS_GetPropertyStr"
			],
			[
				"js_misc_glob_err",
				"js_misc_glob_errfunc_ctx"
			],
			[
				"js_misc",
				"js_misc_glob"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "  value =>\n   (level, message) =>\nExecTool(cmd, ...args)\nGetMime(file)\nMakeUUID = (rng = Math.random) =>\n  n =>\n  dd =>\n  d =>\nGetDir(dir)\n  n =>\nDateStr(date)\nModeStr(mode)\nHTMLPage = ({ title, style, scripts = [], children, ...props }) =>\n  script =>\nFilterForm = ({ ...props }) =>\nHTMLTable = ({ rows, ...props }) =>\nHTMLTableRow = ({ columns, ...props }) =>\nHTMLTableColumn = ({ columns, children, tag = 'td', ...props }) =>\nFileLink = ({ file, ...props }) =>\nFileObject = ({ file, stat = {}, ...props }) =>\nFileTable = ({ files, ...props }) =>\n(a, b) =>\n  field =>\n  file =>\nReadExiv2(file)\n([k, v]) =>\n([k, v]) =>\n([k, v]) =>\n(a, b) =>\n([k, v]) =>\nReadExiftool(file)\n  l =>\n  line =>\n([line, idx]) =>\nHeifConvert(src, dst, quality = 100)\nMagickResize(src, dst, rotate = 0, width, height)\n  main(...args)\n   (a, v) =>\n   (v, pv, o) =>\n   (module, ...args) =>\n  m =>\n  .show = arg =>\n  .cleanup = () =>\n   (...args) =>\n() =>\n  puts(s)\n() =>\nParseBody(gen)\n  .createWS = (url, callbacks, listen) =>\n  .out = s =>\n  test(req, resp)\n  proxy(req, resp)\n  config(req, resp)\n  file(req, resp)\n  dir =>\n  dir =>\n  f =>\n  file =>\n  uploads(req, resp)\n  files(req, resp)\n   n =>\n  n =>\n  n =>\n(a, b) =>\n  name =>\n  file =>\n  file =>\n([file, rel]) =>\n(acc, [file, st]) =>\n  string(a, b)\n  number(a, b)\n([name, obj]) =>\n({ name }) =>\n  onConnect(ws, req)\n  .sendCommand = function(data)\n  onClose(ws, reason)\n  onHttp(ws, req, resp)\n  onOpen(name, filename)\n  onContent(name, data)\n  onClose(name, file)\n  f = x =>\n  onFinalize()\n   (match, p1, p0, p2, p3, offset) =>\n  onMessage(ws, data)\n  onFd(fd, rd, wr)\n  get connections()\n  get by_uuid()\n  uuid(data)\n  onFd(fd, rd, wr)\n  onClose(ws, reason)\n  onMessage(ws, data)\n  quit(why)",
			"settings":
			{
				"buffer_size": 1725,
				"line_ending": "Unix",
				"name": "ùåÜ Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					21,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/container/DenseSpatialHash2D.js",
						"symkeys":
						[
							[
								13,
								31
							],
							[
								36,
								82
							],
							[
								558,
								565
							],
							[
								805,
								820
							],
							[
								863,
								878
							],
							[
								1259,
								1299
							],
							[
								1632,
								1659
							],
							[
								2538,
								2561
							],
							[
								2757,
								2775
							],
							[
								2933,
								2949
							],
							[
								3125,
								3132
							],
							[
								3188,
								3195
							],
							[
								3232,
								3242
							],
							[
								3282,
								3303
							],
							[
								3982,
								3992
							]
						],
						"symlist":
						[
							"DenseSpatialHash2D",
							"constructor(width, height, bucketSizePow2 = 6)",
							"clear()",
							"commitChanges()",
							"add(x, y, w, h)",
							"addToBuckets(id, minX, minY, maxX, maxY)",
							"addRect(id, dx, dy, dw, dh)",
							"setRect(id, x, y, w, h)",
							"addPos(id, dx, dy)",
							"setPos(id, x, y)",
							"has(id)",
							"get(id)",
							"get size()",
							"deleteFromBuckets(id)",
							"delete(id)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAEAQAAICBtYWluKC4uLmFyZ3MpCiAgcmVhZCguLi5hcmdzKQogIHdyaXRlKC4uLmFyZ3MpCiguLi5hcmdzKSA9PgogICBuYW1lID0+CiAgbSA9PgogIGVyciA9PgogIGxvYWQoZmlsZW5hbWUsIC4uLmFyZ3MpCiAgcGFyc2UoZmlsZW5hbWUsIC4uLmFyZ3MpCiAgc2VyaWFsaXplKC4uLmFyZ3MpCiAgd2ZuID0gKGZpbGVuYW1lLCBkYXRhKSA9PgogIHNhdmUoZmlsZW5hbWUsIG9iaiwgd2ZuID0gKGZpbGVuYW1lLCBkYXRhKSA9PiBmcy4KKGZpbGVuYW1lLCBkYXRhKSkAAAAAAAAAAEIBAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					22,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/container/deque.js",
						"symkeys":
						[
							[
								71,
								96
							],
							[
								338,
								388
							],
							[
								609,
								657
							],
							[
								1511,
								1553
							],
							[
								1778,
								1824
							],
							[
								2075,
								2129
							],
							[
								3217,
								3269
							],
							[
								3436,
								3490
							],
							[
								3575,
								3622
							],
							[
								3858,
								3908
							],
							[
								3944,
								3990
							],
							[
								4208,
								4260
							],
							[
								4303,
								4308
							],
							[
								4329,
								4334
							],
							[
								4355,
								4360
							],
							[
								4385,
								4390
							],
							[
								4408,
								4413
							],
							[
								4437,
								4442
							],
							[
								4458,
								4463
							],
							[
								4488,
								4493
							],
							[
								4513,
								4518
							],
							[
								4542,
								4547
							],
							[
								4564,
								4569
							],
							[
								4590,
								4595
							],
							[
								4612,
								4617
							],
							[
								4638,
								4643
							],
							[
								4661,
								4666
							],
							[
								4686,
								4691
							],
							[
								4734,
								4739
							],
							[
								4765,
								4770
							],
							[
								4805,
								4810
							],
							[
								4852,
								4920
							],
							[
								5021,
								5083
							],
							[
								5404,
								5457
							],
							[
								5575,
								5598
							],
							[
								5749,
								5779
							]
						],
						"symlist":
						[
							" function Deque(capacity)",
							"Deque.prototype.toArray = function Deque$toArray()",
							"Deque.prototype.push = function Deque$push(item)",
							"Deque.prototype.pop = function Deque$pop()",
							"Deque.prototype.shift = function Deque$shift()",
							"Deque.prototype.unshift = function Deque$unshift(item)",
							"Deque.prototype.peekBack = function Deque$peekBack()",
							"Deque.prototype.peekFront = function Deque$peekFront()",
							"Deque.prototype.get = function Deque$get(index)",
							"Deque.prototype.isEmpty = function Deque$isEmpty()",
							"Deque.prototype.clear = function Deque$clear()",
							"Deque.prototype.toString = function Deque$toString()",
							"Deque",
							"Deque",
							"Deque",
							"Deque",
							"Deque",
							"Deque",
							"Deque",
							"Deque",
							"Deque",
							"Deque",
							"Deque",
							"Deque",
							"Deque",
							"Deque",
							"Deque",
							"Deque",
							"Deque",
							"get()",
							"set()",
							"Deque.prototype._checkCapacity = function Deque$_checkCapacity(size)",
							"Deque.prototype._resizeTo = function Deque$_resizeTo(capacity)",
							"function arrayMove(src, srcIndex, dst, dstIndex, len)",
							"function pow2AtLeast(n)",
							"function getCapacity(capacity)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABCAQAARGVuc2VTcGF0aWFsSGFzaDJECiAgY29uc3RydWN0b3Iod2lkdGgsIGhlaWdodCwgYnVja2V0U2l6ZVBvdzIgPSA2KQogIGNsZWFyKCkKICBjb21taXRDaGFuZ2VzKCkKICBhZGQoeCwgeSwgdywgaCkKICBhZGRUb0J1Y2tldHMoaWQsIG1pblgsIG1pblksIG1heFgsIG1heFkpCiAgYWRkUmVjdChpZCwgZHgsIGR5LCBkdywgZGgpCiAgc2V0UmVjdChpZCwgeCwgeSwgdywgaCkKICBhZGRQb3MoaWQsIGR4LCBkeSkKICBzZXRQb3MoaWQsIHgsIHkpCiAgaGFzKGlkKQogIGdldChpZCkKICBnZXQgc2l6ZSgpCiAgZGVsZXRlRnJvbUJ1Y2tldHMoaWQpCiAgZGVsZXRlKGlkKQAAAAAAAAAAiQMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					23,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/container/DenseSpatialHash2D.js",
						"symkeys":
						[
							[
								13,
								31
							],
							[
								36,
								82
							],
							[
								558,
								565
							],
							[
								805,
								820
							],
							[
								863,
								878
							],
							[
								1259,
								1299
							],
							[
								1632,
								1659
							],
							[
								2538,
								2561
							],
							[
								2757,
								2775
							],
							[
								2933,
								2949
							],
							[
								3125,
								3132
							],
							[
								3188,
								3195
							],
							[
								3232,
								3242
							],
							[
								3282,
								3303
							],
							[
								3982,
								3992
							]
						],
						"symlist":
						[
							"DenseSpatialHash2D",
							"constructor(width, height, bucketSizePow2 = 6)",
							"clear()",
							"commitChanges()",
							"add(x, y, w, h)",
							"addToBuckets(id, minX, minY, maxX, maxY)",
							"addRect(id, dx, dy, dw, dh)",
							"setRect(id, x, y, w, h)",
							"addPos(id, dx, dy)",
							"setPos(id, x, y)",
							"has(id)",
							"get(id)",
							"get size()",
							"deleteFromBuckets(id)",
							"delete(id)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACJAwAARGVxdWUoY2FwYWNpdHkpCkRlcXVlLnByb3RvdHlwZS50b0FycmF5ID0gZnVuY3Rpb24gRGVxdWUkdG9BcnJheSgpCkRlcXVlLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gRGVxdWUkcHVzaChpdGVtKQpEZXF1ZS5wcm90b3R5cGUucG9wID0gZnVuY3Rpb24gRGVxdWUkcG9wKCkKRGVxdWUucHJvdG90eXBlLnNoaWZ0ID0gZnVuY3Rpb24gRGVxdWUkc2hpZnQoKQpEZXF1ZS5wcm90b3R5cGUudW5zaGlmdCA9IGZ1bmN0aW9uIERlcXVlJHVuc2hpZnQoaXRlbSkKRGVxdWUucHJvdG90eXBlLnBlZWtCYWNrID0gZnVuY3Rpb24gRGVxdWUkcGVla0JhY2soKQpEZXF1ZS5wcm90b3R5cGUucGVla0Zyb250ID0gZnVuY3Rpb24gRGVxdWUkcGVla0Zyb250KCkKRGVxdWUucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIERlcXVlJGdldChpbmRleCkKRGVxdWUucHJvdG90eXBlLmlzRW1wdHkgPSBmdW5jdGlvbiBEZXF1ZSRpc0VtcHR5KCkKRGVxdWUucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gRGVxdWUkY2xlYXIoKQpEZXF1ZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiBEZXF1ZSR0b1N0cmluZygpCkRlcXVlCkRlcXVlCkRlcXVlCkRlcXVlCkRlcXVlCkRlcXVlCkRlcXVlCkRlcXVlCkRlcXVlCkRlcXVlCkRlcXVlCkRlcXVlCkRlcXVlCkRlcXVlCkRlcXVlCkRlcXVlCkRlcXVlCiAgZ2V0KCkKICBzZXQoKQpEZXF1ZS5wcm90b3R5cGUuX2NoZWNrQ2FwYWNpdHkgPSBmdW5jdGlvbiBEZXF1ZSRfY2hlY2tDYXBhY2l0eShzaXplKQpEZXF1ZS5wcm90b3R5cGUuX3Jlc2l6ZVRvID0gZnVuY3Rpb24gRGVxdWUkX3Jlc2l6ZVRvKGNhcGFjaXR5KQogIGFycmF5TW92ZShzcmMsIHNyY0luZGV4LCBkc3QsIGRzdEluZGV4LCBsZW4pCiAgcG93MkF0TGVhc3QobikKICBnZXRDYXBhY2l0eShjYXBhY2l0eSkAAAAAAAAAAEIBAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					24,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/container/enum.js",
						"symkeys":
						[
							[
								125,
								149
							],
							[
								168,
								188
							],
							[
								390,
								420
							],
							[
								461,
								470
							],
							[
								574,
								578
							],
							[
								697,
								728
							],
							[
								955,
								966
							],
							[
								1034,
								1044
							],
							[
								1106,
								1117
							],
							[
								1257,
								1281
							],
							[
								2105,
								2139
							],
							[
								2601,
								2631
							]
						],
						"symlist":
						[
							"InvalidArgumentException",
							"constructor(message)",
							"getValidPropertyName = name =>",
							" match =>",
							"Enum",
							"constructor(name, value, extra)",
							"get value()",
							"get name()",
							"get extra()",
							"static valueOf(property)",
							"static create(items, extra = null)",
							"(/** string */ name, index) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABCAQAARGVuc2VTcGF0aWFsSGFzaDJECiAgY29uc3RydWN0b3Iod2lkdGgsIGhlaWdodCwgYnVja2V0U2l6ZVBvdzIgPSA2KQogIGNsZWFyKCkKICBjb21taXRDaGFuZ2VzKCkKICBhZGQoeCwgeSwgdywgaCkKICBhZGRUb0J1Y2tldHMoaWQsIG1pblgsIG1pblksIG1heFgsIG1heFkpCiAgYWRkUmVjdChpZCwgZHgsIGR5LCBkdywgZGgpCiAgc2V0UmVjdChpZCwgeCwgeSwgdywgaCkKICBhZGRQb3MoaWQsIGR4LCBkeSkKICBzZXRQb3MoaWQsIHgsIHkpCiAgaGFzKGlkKQogIGdldChpZCkKICBnZXQgc2l6ZSgpCiAgZGVsZXRlRnJvbUJ1Y2tldHMoaWQpCiAgZGVsZXRlKGlkKQAAAAAAAAAACgEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					25,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/container/Hash-Multimap.js",
						"symkeys":
						[
							[
								179,
								196
							],
							[
								618,
								640
							],
							[
								735,
								759
							],
							[
								824,
								865
							],
							[
								931,
								973
							],
							[
								1161,
								1203
							],
							[
								1249,
								1291
							],
							[
								1432,
								1477
							],
							[
								1601,
								1649
							],
							[
								1791,
								1843
							],
							[
								1906,
								1946
							],
							[
								1993,
								2035
							],
							[
								2083,
								2126
							],
							[
								2142,
								2154
							],
							[
								2198,
								2210
							],
							[
								2239,
								2252
							]
						],
						"symlist":
						[
							"value: function()",
							"value: function(index)",
							" function HashMultimap()",
							"HashMultimap.prototype.clear = function()",
							"HashMultimap.prototype.get = function(key)",
							"HashMultimap.prototype.has = function(key)",
							"HashMultimap.prototype.put = function(key)",
							"HashMultimap.prototype.remove = function(key)",
							"HashMultimap.prototype.removeAll = function(key)",
							"HashMultimap.prototype.replaceValues = function(key)",
							"HashMultimap.prototype.keys = function()",
							"HashMultimap.prototype.values = function()",
							"HashMultimap.prototype.entries = function()",
							"HashMultimap",
							"HashMultimap",
							" function* ()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAKAQAASW52YWxpZEFyZ3VtZW50RXhjZXB0aW9uCiAgY29uc3RydWN0b3IobWVzc2FnZSkKICBnZXRWYWxpZFByb3BlcnR5TmFtZSA9IG5hbWUgPT4KICAgbWF0Y2ggPT4KRW51bQogIGNvbnN0cnVjdG9yKG5hbWUsIHZhbHVlLCBleHRyYSkKICBnZXQgdmFsdWUoKQogIGdldCBuYW1lKCkKICBnZXQgZXh0cmEoKQogIHN0YXRpYyB2YWx1ZU9mKHByb3BlcnR5KQogIHN0YXRpYyBjcmVhdGUoaXRlbXMsIGV4dHJhID0gbnVsbCkKKC8qKnN0cmluZyAqLyBuYW1lLCBpbmRleCkgPT4AAAAAAAAAABcCAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					26,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/container/hashList.js",
						"symkeys":
						[
							[
								13,
								21
							],
							[
								26,
								50
							],
							[
								78,
								93
							],
							[
								181,
								195
							],
							[
								249,
								261
							],
							[
								596,
								605
							],
							[
								647,
								657
							],
							[
								693,
								699
							],
							[
								717,
								732
							],
							[
								766,
								790
							],
							[
								928,
								935
							],
							[
								980,
								993
							],
							[
								1106,
								1119
							],
							[
								1165,
								1174
							],
							[
								1248,
								1263
							],
							[
								1395,
								1406
							],
							[
								1455,
								1463
							],
							[
								1509,
								1516
							],
							[
								1596,
								1613
							],
							[
								1646,
								1663
							],
							[
								1957,
								1966
							],
							[
								2029,
								2041
							],
							[
								2061,
								2073
							],
							[
								2179,
								2189
							],
							[
								2239,
								2245
							]
						],
						"symlist":
						[
							"HashList",
							"constructor(keyfn, ctor)",
							"keyfn : item =>",
							"ctor : item =>",
							"add(...args)",
							"toArray()",
							"filter(fn)",
							"img =>",
							"reduce(fn, acc)",
							"delegate = (acc, key) =>",
							"map(fn)",
							"indexOf(name)",
							"(acc, key) =>",
							"at(index)",
							"method(...args)",
							"filter(arg)",
							"map(arg)",
							"find(a)",
							" (arg, i, arr) =>",
							" (arg, i, arr) =>",
							"remap(fn)",
							" obj =>",
							" obj =>",
							"toString()",
							"key =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAXAgAAICB2YWx1ZTogZnVuY3Rpb24oKQogIHZhbHVlOiBmdW5jdGlvbihpbmRleCkKSGFzaE11bHRpbWFwKCkKSGFzaE11bHRpbWFwLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uKCkKSGFzaE11bHRpbWFwLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihrZXkpCkhhc2hNdWx0aW1hcC5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24oa2V5KQpIYXNoTXVsdGltYXAucHJvdG90eXBlLnB1dCA9IGZ1bmN0aW9uKGtleSkKSGFzaE11bHRpbWFwLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbihrZXkpCkhhc2hNdWx0aW1hcC5wcm90b3R5cGUucmVtb3ZlQWxsID0gZnVuY3Rpb24oa2V5KQpIYXNoTXVsdGltYXAucHJvdG90eXBlLnJlcGxhY2VWYWx1ZXMgPSBmdW5jdGlvbihrZXkpCkhhc2hNdWx0aW1hcC5wcm90b3R5cGUua2V5cyA9IGZ1bmN0aW9uKCkKSGFzaE11bHRpbWFwLnByb3RvdHlwZS52YWx1ZXMgPSBmdW5jdGlvbigpCkhhc2hNdWx0aW1hcC5wcm90b3R5cGUuZW50cmllcyA9IGZ1bmN0aW9uKCkKSGFzaE11bHRpbWFwCkhhc2hNdWx0aW1hcAooKQAAAAAAAAAAawEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					27,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/container/hashmap.js",
						"symkeys":
						[
							[
								725,
								779
							],
							[
								1093,
								1170
							],
							[
								1327,
								1402
							],
							[
								1459,
								1503
							],
							[
								1560,
								1604
							],
							[
								1703,
								1728
							],
							[
								2048,
								2103
							],
							[
								2266,
								2314
							],
							[
								2592,
								2640
							],
							[
								2922,
								2976
							],
							[
								3205,
								3254
							],
							[
								3480,
								3532
							],
							[
								3725,
								3770
							],
							[
								3910,
								3959
							],
							[
								4146,
								4199
							],
							[
								4434,
								4492
							],
							[
								4731,
								4797
							],
							[
								4978,
								5034
							],
							[
								5320,
								5391
							],
							[
								5740,
								5787
							],
							[
								5943,
								5994
							],
							[
								6174,
								6227
							]
						],
						"symlist":
						[
							"setValues = function hashMapSetValues(HashMap, values)",
							"defineArrayProperty = function hashMapDefineArrayProperty(obj, property_name)",
							"defineSizeProperty = function hashMapDefineSizeProperty(obj, property_name)",
							"get: function hashMapDefineSizePropertyGet()",
							"set: function hashMapDefineSizePropertySet()",
							" function HashMap(values)",
							"HashMap.prototype.set = function hashMapSet(key, value)",
							"HashMap.prototype.get = function hashMapGet(key)",
							"HashMap.prototype.has = function hashMapHas(key)",
							"HashMap.prototype.delete = function hashMapDelete(key)",
							"HashMap.prototype.clear = function hashMapClear()",
							"HashMap.prototype.push = function hashMapPush(value)",
							"HashMap.prototype.pop = function hashMapPop()",
							"HashMap.prototype.shift = function hashMapShift()",
							"HashMap.prototype.reverse = function hashMapReverse()",
							"HashMap.prototype.indexOf = function hashMapIndexOf(value)",
							"HashMap.prototype.lastIndexOf = function hashMapLastIndexOf(value)",
							"HashMap.prototype.join = function hashMapJoin(separator)",
							"HashMap.prototype.forEach = function hashMapForEach(callback, instance)",
							"HashMap.prototype.keys = function hashMapKeys()",
							"HashMap.prototype.values = function hashMapValues()",
							"HashMap.prototype.entries = function hashMapEntries()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABrAQAASGFzaExpc3QKICBjb25zdHJ1Y3RvcihrZXlmbiwgY3RvcikKICBrZXlmbiA6IGl0ZW0gPT4KICBjdG9yIDogaXRlbSA9PgogIGFkZCguLi5hcmdzKQogIHRvQXJyYXkoKQogIGZpbHRlcihmbikKICBpbWcgPT4KICByZWR1Y2UoZm4sIGFjYykKICBkZWxlZ2F0ZSA9IChhY2MsIGtleSkgPT4KICBtYXAoZm4pCiAgaW5kZXhPZihuYW1lKQooYWNjLCBrZXkpID0+CiAgYXQoaW5kZXgpCiAgbWV0aG9kKC4uLmFyZ3MpCiAgZmlsdGVyKGFyZykKICBtYXAoYXJnKQogIGZpbmQoYSkKICAgKGFyZywgaSwgYXJyKSA9PgogICAoYXJnLCBpLCBhcnIpID0+CiAgcmVtYXAoZm4pCiAgIG9iaiA9PgogICBvYmogPT4KICB0b1N0cmluZygpCiAga2V5ID0+AAAAAAAAAACrBAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					28,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/container/multibimap.js",
						"symkeys":
						[
							[
								21,
								25
							],
							[
								30,
								43
							],
							[
								79,
								96
							],
							[
								200,
								206
							],
							[
								229,
								238
							],
							[
								330,
								336
							],
							[
								374,
								383
							],
							[
								505,
								517
							],
							[
								646,
								652
							],
							[
								690,
								698
							],
							[
								820,
								830
							],
							[
								835,
								857
							],
							[
								1050,
								1059
							],
							[
								1143,
								1152
							],
							[
								1236,
								1256
							],
							[
								1594,
								1598
							],
							[
								1647,
								1651
							],
							[
								1771,
								1775
							],
							[
								1889,
								1893
							],
							[
								2002,
								2011
							],
							[
								2081,
								2090
							],
							[
								2131,
								2140
							],
							[
								2181,
								2193
							],
							[
								2299,
								2311
							],
							[
								2365,
								2377
							],
							[
								2582,
								2588
							],
							[
								2683,
								2691
							],
							[
								2791,
								2824
							],
							[
								2871,
								2875
							],
							[
								2928,
								2959
							]
						],
						"symlist":
						[
							"_Map",
							"constructor()",
							"addIterable(k, v)",
							"val =>",
							"add(k, v)",
							"get(k)",
							"has(k, v)",
							"delete(k, v)",
							"keys()",
							"values()",
							"MultiBiMap",
							"constructor(opts = {})",
							"getKey(k)",
							"getVal(v)",
							"add(k, v, opts = {})",
							"k =>",
							"v =>",
							"k =>",
							"v =>",
							"has(k, v)",
							"hasKey(k)",
							"hasVal(v)",
							"delete(k, v)",
							"deleteKey(k)",
							"deleteVal(v)",
							"keys()",
							"values()",
							"function deleteAll(a, aMap, bMap)",
							"b =>",
							"function deleteOnly(a, b, aMap)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACrBAAAICBzZXRWYWx1ZXMgPSBmdW5jdGlvbiBoYXNoTWFwU2V0VmFsdWVzKEhhc2hNYXAsIHZhbHVlcykKICBkZWZpbmVBcnJheVByb3BlcnR5ID0gZnVuY3Rpb24gaGFzaE1hcERlZmluZUFycmF5UHJvcGVydHkob2JqLCBwcm9wZXJ0eV9uYW1lKQogIGRlZmluZVNpemVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGhhc2hNYXBEZWZpbmVTaXplUHJvcGVydHkob2JqLCBwcm9wZXJ0eV9uYW1lKQogIGdldDogZnVuY3Rpb24gaGFzaE1hcERlZmluZVNpemVQcm9wZXJ0eUdldCgpCiAgc2V0OiBmdW5jdGlvbiBoYXNoTWFwRGVmaW5lU2l6ZVByb3BlcnR5U2V0KCkKSGFzaE1hcCh2YWx1ZXMpCkhhc2hNYXAucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIGhhc2hNYXBTZXQoa2V5LCB2YWx1ZSkKSGFzaE1hcC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gaGFzaE1hcEdldChrZXkpCkhhc2hNYXAucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uIGhhc2hNYXBIYXMoa2V5KQpIYXNoTWFwLnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbiBoYXNoTWFwRGVsZXRlKGtleSkKSGFzaE1hcC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiBoYXNoTWFwQ2xlYXIoKQpIYXNoTWFwLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gaGFzaE1hcFB1c2godmFsdWUpCkhhc2hNYXAucHJvdG90eXBlLnBvcCA9IGZ1bmN0aW9uIGhhc2hNYXBQb3AoKQpIYXNoTWFwLnByb3RvdHlwZS5zaGlmdCA9IGZ1bmN0aW9uIGhhc2hNYXBTaGlmdCgpCkhhc2hNYXAucHJvdG90eXBlLnJldmVyc2UgPSBmdW5jdGlvbiBoYXNoTWFwUmV2ZXJzZSgpCkhhc2hNYXAucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiBoYXNoTWFwSW5kZXhPZih2YWx1ZSkKSGFzaE1hcC5wcm90b3R5cGUubGFzdEluZGV4T2YgPSBmdW5jdGlvbiBoYXNoTWFwTGFzdEluZGV4T2YodmFsdWUpCkhhc2hNYXAucHJvdG90eXBlLmpvaW4gPSBmdW5jdGlvbiBoYXNoTWFwSm9pbihzZXBhcmF0b3IpCkhhc2hNYXAucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiBoYXNoTWFwRm9yRWFjaChjYWxsYmFjaywgaW5zdGFuY2UpCkhhc2hNYXAucHJvdG90eXBlLmtleXMgPSBmdW5jdGlvbiBoYXNoTWFwS2V5cygpCkhhc2hNYXAucHJvdG90eXBlLnZhbHVlcyA9IGZ1bmN0aW9uIGhhc2hNYXBWYWx1ZXMoKQpIYXNoTWFwLnByb3RvdHlwZS5lbnRyaWVzID0gZnVuY3Rpb24gaGFzaE1hcEVudHJpZXMoKQAAAAAAAAAAhgEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					29,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/container/multikeymap.js",
						"symkeys":
						[
							[
								21,
								29
							],
							[
								34,
								61
							],
							[
								149,
								155
							],
							[
								467,
								476
							],
							[
								481,
								498
							],
							[
								586,
								595
							],
							[
								1024,
								1035
							],
							[
								1040,
								1053
							],
							[
								1127,
								1137
							],
							[
								1302,
								1319
							],
							[
								1415,
								1440
							],
							[
								1551,
								1558
							],
							[
								1623,
								1635
							],
							[
								1802,
								1821
							],
							[
								2615,
								2632
							],
							[
								2789,
								2798
							],
							[
								2846,
								2869
							],
							[
								3219,
								3228
							],
							[
								3355,
								3365
							],
							[
								3669,
								3678
							],
							[
								3739,
								3745
							],
							[
								3797,
								3813
							],
							[
								4055,
								4084
							],
							[
								4757,
								4767
							],
							[
								4815,
								4823
							]
						],
						"symlist":
						[
							"Iterator",
							"constructor(map, justValue)",
							"next()",
							"Traversor",
							"constructor(node)",
							"next(key)",
							"MultiKeyMap",
							"constructor()",
							"get size()",
							"_assertKeys(keys)",
							"_assertCallback(callback)",
							"clear()",
							"delete(keys)",
							"_delete(keys, node)",
							"_deleteKeys(keys)",
							"entries()",
							"forEach(callback, self)",
							"get(keys)",
							"_get(keys)",
							"has(keys)",
							"keys()",
							"set(keys, value)",
							"_set(base, keys, value, node)",
							"traverse()",
							"values()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACGAQAAICBfTWFwCiAgY29uc3RydWN0b3IoKQogIGFkZEl0ZXJhYmxlKGssIHYpCiAgdmFsID0+CiAgYWRkKGssIHYpCiAgZ2V0KGspCiAgaGFzKGssIHYpCiAgZGVsZXRlKGssIHYpCiAga2V5cygpCiAgdmFsdWVzKCkKTXVsdGlCaU1hcAogIGNvbnN0cnVjdG9yKG9wdHMgPSB7fSkKICBnZXRLZXkoaykKICBnZXRWYWwodikKICBhZGQoaywgdiwgb3B0cyA9IHt9KQogIGsgPT4KICB2ID0+CiAgayA9PgogIHYgPT4KICBoYXMoaywgdikKICBoYXNLZXkoaykKICBoYXNWYWwodikKICBkZWxldGUoaywgdikKICBkZWxldGVLZXkoaykKICBkZWxldGVWYWwodikKICBrZXlzKCkKICB2YWx1ZXMoKQogIGRlbGV0ZUFsbChhLCBhTWFwLCBiTWFwKQogIGIgPT4KICBkZWxldGVPbmx5KGEsIGIsIGFNYXApAAAAAAAAAACUAQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					30,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/container/multiMap.js",
						"symkeys":
						[
							[
								29,
								61
							],
							[
								465,
								493
							],
							[
								680,
								684
							],
							[
								828,
								866
							],
							[
								982,
								1025
							],
							[
								1405,
								1451
							],
							[
								1871,
								1914
							],
							[
								2171,
								2207
							],
							[
								2364,
								2402
							],
							[
								2442,
								2450
							],
							[
								2549,
								2597
							],
							[
								2627,
								2670
							],
							[
								2712,
								2727
							],
							[
								2748,
								2755
							],
							[
								2805,
								2842
							],
							[
								2941,
								2949
							],
							[
								3016,
								3021
							],
							[
								3061,
								3070
							],
							[
								3160,
								3168
							],
							[
								3236,
								3241
							],
							[
								3528,
								3559
							],
							[
								3637,
								3643
							]
						],
						"symlist":
						[
							"function mapEach(map, operation)",
							" function Multimap(iterable)",
							"i =>",
							"Multimap.prototype.get = function(key)",
							"Multimap.prototype.set = function(key, val)",
							"Multimap.prototype.delete = function(key, val)",
							"Multimap.prototype.has = function(key, val)",
							"Multimap.prototype.keys = function()",
							"Multimap.prototype.values = function()",
							"entry =>",
							"Multimap.prototype.forEachEntry = function(iter)",
							"Multimap.prototype.forEach = function(iter)",
							"(entry, key) =>",
							"item =>",
							"Multimap.prototype.clear = function()",
							"Multimap",
							"get()",
							" value =>",
							"Multimap",
							"get()",
							"function makeIterator(iterator)",
							"next()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACUAQAASXRlcmF0b3IKICBjb25zdHJ1Y3RvcihtYXAsIGp1c3RWYWx1ZSkKICBuZXh0KCkKVHJhdmVyc29yCiAgY29uc3RydWN0b3Iobm9kZSkKICBuZXh0KGtleSkKTXVsdGlLZXlNYXAKICBjb25zdHJ1Y3RvcigpCiAgZ2V0IHNpemUoKQogIF9hc3NlcnRLZXlzKGtleXMpCiAgX2Fzc2VydENhbGxiYWNrKGNhbGxiYWNrKQogIGNsZWFyKCkKICBkZWxldGUoa2V5cykKICBfZGVsZXRlKGtleXMsIG5vZGUpCiAgX2RlbGV0ZUtleXMoa2V5cykKICBlbnRyaWVzKCkKICBmb3JFYWNoKGNhbGxiYWNrLCBzZWxmKQogIGdldChrZXlzKQogIF9nZXQoa2V5cykKICBoYXMoa2V5cykKICBrZXlzKCkKICBzZXQoa2V5cywgdmFsdWUpCiAgX3NldChiYXNlLCBrZXlzLCB2YWx1ZSwgbm9kZSkKICB0cmF2ZXJzZSgpCiAgdmFsdWVzKCkAAAAAAAAAACUCAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					31,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/container/spatial-hash.js",
						"symkeys":
						[
							[
								13,
								24
							],
							[
								29,
								57
							],
							[
								743,
								755
							],
							[
								1562,
								1574
							],
							[
								1961,
								1972
							],
							[
								2204,
								2216
							],
							[
								2272,
								2318
							],
							[
								3376,
								3386
							],
							[
								3443,
								3465
							],
							[
								3527,
								3548
							],
							[
								3616,
								3642
							],
							[
								3759,
								3785
							]
						],
						"symlist":
						[
							"SpatialHash",
							"constructor(range, cellSize)",
							"insert(item)",
							"remove(item)",
							"removeAll()",
							"update(item)",
							"srch(range, selector, callback, returnOnFirst)",
							"any(range)",
							"query(range, selector)",
							"find(range, callback)",
							" function intersects(a, b)",
							" function getBounds(range)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAlAgAAICBtYXBFYWNoKG1hcCwgb3BlcmF0aW9uKQpNdWx0aW1hcChpdGVyYWJsZSkKICBpID0+Ck11bHRpbWFwLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihrZXkpCk11bHRpbWFwLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihrZXksIHZhbCkKTXVsdGltYXAucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uKGtleSwgdmFsKQpNdWx0aW1hcC5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24oa2V5LCB2YWwpCk11bHRpbWFwLnByb3RvdHlwZS5rZXlzID0gZnVuY3Rpb24oKQpNdWx0aW1hcC5wcm90b3R5cGUudmFsdWVzID0gZnVuY3Rpb24oKQogIGVudHJ5ID0+Ck11bHRpbWFwLnByb3RvdHlwZS5mb3JFYWNoRW50cnkgPSBmdW5jdGlvbihpdGVyKQpNdWx0aW1hcC5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uKGl0ZXIpCihlbnRyeSwga2V5KSA9PgogIGl0ZW0gPT4KTXVsdGltYXAucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24oKQpNdWx0aW1hcAogIGdldCgpCiAgIHZhbHVlID0+Ck11bHRpbWFwCiAgZ2V0KCkKICBtYWtlSXRlcmF0b3IoaXRlcmF0b3IpCiAgbmV4dCgpAAAAAAAAAAD6AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					1,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/container/spatialHash.js",
						"symkeys":
						[
							[
								6,
								46
							],
							[
								129,
								168
							],
							[
								778,
								823
							],
							[
								1556,
								1601
							],
							[
								1975,
								2020
							],
							[
								2069,
								2148
							],
							[
								3037,
								3080
							],
							[
								3132,
								3187
							],
							[
								3244,
								3298
							],
							[
								3355,
								3380
							],
							[
								3616,
								3637
							]
						],
						"symlist":
						[
							" function SpatialHash(range, bucketSize)",
							"SpatialHash.prototype.init = function()",
							"SpatialHash.prototype.insert = function(item)",
							"SpatialHash.prototype.remove = function(item)",
							"SpatialHash.prototype.update = function(item)",
							"SpatialHash.prototype.srch = function(range, selector, callback, returnOnFirst)",
							"SpatialHash.prototype.any = function(range)",
							"SpatialHash.prototype.query = function(range, selector)",
							"SpatialHash.prototype.find = function(range, callback)",
							"function intersects(a, b)",
							"function getBounds(a)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD6AAAAU3BhdGlhbEhhc2gKICBjb25zdHJ1Y3RvcihyYW5nZSwgY2VsbFNpemUpCiAgaW5zZXJ0KGl0ZW0pCiAgcmVtb3ZlKGl0ZW0pCiAgcmVtb3ZlQWxsKCkKICB1cGRhdGUoaXRlbSkKICBzcmNoKHJhbmdlLCBzZWxlY3RvciwgY2FsbGJhY2ssIHJldHVybk9uRmlyc3QpCiAgYW55KHJhbmdlKQogIHF1ZXJ5KHJhbmdlLCBzZWxlY3RvcikKICBmaW5kKHJhbmdlLCBjYWxsYmFjaykKICBpbnRlcnNlY3RzKGEsIGIpCiAgZ2V0Qm91bmRzKHJhbmdlKQAAAAAAAAAA3QEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					2,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/container/SpatialHash2D.js",
						"symkeys":
						[
							[
								32,
								45
							],
							[
								50,
								79
							],
							[
								273,
								280
							],
							[
								376,
								385
							],
							[
								434,
								450
							],
							[
								605,
								621
							],
							[
								1013,
								1022
							],
							[
								1217,
								1224
							],
							[
								1439,
								1443
							],
							[
								1930,
								1942
							],
							[
								2070,
								2077
							],
							[
								2368,
								2372
							],
							[
								2599,
								2628
							]
						],
						"symlist":
						[
							"SpatialHash2D",
							"constructor(cellSizePow2 = 5)",
							"clear()",
							"has(rect)",
							"getRectsAt(x, y)",
							"evalHashes(rect)",
							"add(rect)",
							"hash =>",
							"r =>",
							"delete(rect)",
							"hash =>",
							"r =>",
							"areRectsOverlap(rect0, rect1)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADdAQAAU3BhdGlhbEhhc2gocmFuZ2UsIGJ1Y2tldFNpemUpClNwYXRpYWxIYXNoLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24oKQpTcGF0aWFsSGFzaC5wcm90b3R5cGUuaW5zZXJ0ID0gZnVuY3Rpb24oaXRlbSkKU3BhdGlhbEhhc2gucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKGl0ZW0pClNwYXRpYWxIYXNoLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbihpdGVtKQpTcGF0aWFsSGFzaC5wcm90b3R5cGUuc3JjaCA9IGZ1bmN0aW9uKHJhbmdlLCBzZWxlY3RvciwgY2FsbGJhY2ssIHJldHVybk9uRmlyc3QpClNwYXRpYWxIYXNoLnByb3RvdHlwZS5hbnkgPSBmdW5jdGlvbihyYW5nZSkKU3BhdGlhbEhhc2gucHJvdG90eXBlLnF1ZXJ5ID0gZnVuY3Rpb24ocmFuZ2UsIHNlbGVjdG9yKQpTcGF0aWFsSGFzaC5wcm90b3R5cGUuZmluZCA9IGZ1bmN0aW9uKHJhbmdlLCBjYWxsYmFjaykKICBpbnRlcnNlY3RzKGEsIGIpCiAgZ2V0Qm91bmRzKGEpAAAAAAAAAADGAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					3,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/container/spatial-hashmap.js",
						"symkeys":
						[
							[
								196,
								233
							],
							[
								385,
								403
							],
							[
								441,
								461
							],
							[
								598,
								629
							],
							[
								785,
								825
							],
							[
								1007,
								1042
							],
							[
								1194,
								1236
							],
							[
								1340,
								1377
							],
							[
								1476,
								1504
							],
							[
								1605,
								1636
							],
							[
								2013,
								2043
							],
							[
								2427,
								2461
							],
							[
								2684,
								2718
							],
							[
								2818,
								2868
							],
							[
								3016,
								3063
							],
							[
								3169,
								3183
							],
							[
								3212,
								3272
							],
							[
								3729,
								3736
							],
							[
								3801,
								3808
							],
							[
								4034,
								4099
							],
							[
								4331,
								4386
							],
							[
								4472,
								4530
							],
							[
								4695,
								4709
							],
							[
								4729,
								4780
							],
							[
								4866,
								4921
							],
							[
								5084,
								5132
							],
							[
								5176,
								5226
							],
							[
								5363,
								5417
							],
							[
								5556,
								5610
							],
							[
								5995,
								6056
							],
							[
								6238,
								6293
							],
							[
								6338,
								6400
							],
							[
								6582,
								6638
							],
							[
								6675,
								6738
							],
							[
								6920,
								6982
							],
							[
								7130,
								7194
							],
							[
								7345,
								7406
							],
							[
								7495,
								7558
							],
							[
								7654,
								7708
							],
							[
								7791,
								7852
							],
							[
								7942,
								8002
							],
							[
								8095,
								8157
							],
							[
								8252,
								8311
							],
							[
								8403,
								8464
							]
						],
						"symlist":
						[
							"HashMap.prototype.Get = function(key)",
							"function Key(cell)",
							"function Keys(cells)",
							"function cellInArray(arr, item)",
							"function removeFromCell(grid, cell, obj)",
							"function addToCell(grid, cell, obj)",
							"function removeFromCells(grid, cells, obj)",
							"function addToCells(grid, cells, obj)",
							"function concat(orig, other)",
							"function sanitize(arr, exclude)",
							"function removeDuplicates(arr)",
							"function removeDuplicateCells(arr)",
							" function SpatialHashMap(cellSize)",
							"SpatialHashMap.prototype.add = function(aabb, obj)",
							"SpatialHashMap.prototype.remove = function(obj)",
							"SpatialHashMap",
							"SpatialHashMap.prototype.moveAndResize = function(diff, obj)",
							"cell =>",
							"cell =>",
							"SpatialHashMap.prototype.moveAndResizeTo = function(newAABB, obj)",
							"SpatialHashMap.prototype.resizeBy = function(diff, obj)",
							"SpatialHashMap.prototype.resizeTo = function(newSize, obj)",
							"SpatialHashMap",
							"SpatialHashMap.prototype.move = function(diff, obj)",
							"SpatialHashMap.prototype.moveTo = function(newPos, obj)",
							"SpatialHashMap.prototype.getAABB = function(obj)",
							"SpatialHashMap.prototype.getAABBs = function(objs)",
							"SpatialHashMap.prototype.cellForVector = function(vec)",
							"SpatialHashMap.prototype.cellsForAABB = function(aabb)",
							"SpatialHashMap.prototype.cellsForAABBs = function(aabbs, raw)",
							"SpatialHashMap.prototype.cellsForObject = function(obj)",
							"SpatialHashMap.prototype.cellsForObjects = function(objs, raw)",
							"SpatialHashMap.prototype.objectsForCell = function(cell)",
							"SpatialHashMap.prototype.objectsForCells = function(cells, raw)",
							"SpatialHashMap.prototype.objectsForObject = function(obj, raw)",
							"SpatialHashMap.prototype.objectsForObjects = function(objs, raw)",
							"SpatialHashMap.prototype.objectsForAABB = function(aabb, raw)",
							"SpatialHashMap.prototype.objectsForAABBs = function(aabbs, raw)",
							"SpatialHashMap.prototype.AABBsForCell = function(cell)",
							"SpatialHashMap.prototype.AABBsForCells = function(cells, raw)",
							"SpatialHashMap.prototype.AABBsForObject = function(obj, raw)",
							"SpatialHashMap.prototype.AABBsForObjects = function(objs, raw)",
							"SpatialHashMap.prototype.AABBsForAABB = function(aabb, raw)",
							"SpatialHashMap.prototype.AABBsForAABBs = function(aabbs, raw)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADGAAAAU3BhdGlhbEhhc2gyRAogIGNvbnN0cnVjdG9yKGNlbGxTaXplUG93MiA9IDUpCiAgY2xlYXIoKQogIGhhcyhyZWN0KQogIGdldFJlY3RzQXQoeCwgeSkKICBldmFsSGFzaGVzKHJlY3QpCiAgYWRkKHJlY3QpCiAgaGFzaCA9PgogIHIgPT4KICBkZWxldGUocmVjdCkKICBoYXNoID0+CiAgciA9PgogIGFyZVJlY3RzT3ZlcmxhcChyZWN0MCwgcmVjdDEpAAAAAAAAAACuBwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					4,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/container/spatial-hash.js",
						"symkeys":
						[
							[
								13,
								24
							],
							[
								29,
								57
							],
							[
								743,
								755
							],
							[
								1562,
								1574
							],
							[
								1961,
								1972
							],
							[
								2204,
								2216
							],
							[
								2272,
								2318
							],
							[
								3376,
								3386
							],
							[
								3443,
								3465
							],
							[
								3527,
								3548
							],
							[
								3616,
								3642
							],
							[
								3759,
								3785
							]
						],
						"symlist":
						[
							"SpatialHash",
							"constructor(range, cellSize)",
							"insert(item)",
							"remove(item)",
							"removeAll()",
							"update(item)",
							"srch(range, selector, callback, returnOnFirst)",
							"any(range)",
							"query(range, selector)",
							"find(range, callback)",
							" function intersects(a, b)",
							" function getBounds(range)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACuBwAASGFzaE1hcC5wcm90b3R5cGUuR2V0ID0gZnVuY3Rpb24oa2V5KQpLZXkoY2VsbCkKS2V5cyhjZWxscykKICBjZWxsSW5BcnJheShhcnIsIGl0ZW0pCiAgcmVtb3ZlRnJvbUNlbGwoZ3JpZCwgY2VsbCwgb2JqKQogIGFkZFRvQ2VsbChncmlkLCBjZWxsLCBvYmopCiAgcmVtb3ZlRnJvbUNlbGxzKGdyaWQsIGNlbGxzLCBvYmopCiAgYWRkVG9DZWxscyhncmlkLCBjZWxscywgb2JqKQogIGNvbmNhdChvcmlnLCBvdGhlcikKICBzYW5pdGl6ZShhcnIsIGV4Y2x1ZGUpCiAgcmVtb3ZlRHVwbGljYXRlcyhhcnIpCiAgcmVtb3ZlRHVwbGljYXRlQ2VsbHMoYXJyKQpTcGF0aWFsSGFzaE1hcChjZWxsU2l6ZSkKU3BhdGlhbEhhc2hNYXAucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uKGFhYmIsIG9iaikKU3BhdGlhbEhhc2hNYXAucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKG9iaikKU3BhdGlhbEhhc2hNYXAKU3BhdGlhbEhhc2hNYXAucHJvdG90eXBlLm1vdmVBbmRSZXNpemUgPSBmdW5jdGlvbihkaWZmLCBvYmopCiAgY2VsbCA9PgogIGNlbGwgPT4KU3BhdGlhbEhhc2hNYXAucHJvdG90eXBlLm1vdmVBbmRSZXNpemVUbyA9IGZ1bmN0aW9uKG5ld0FBQkIsIG9iaikKU3BhdGlhbEhhc2hNYXAucHJvdG90eXBlLnJlc2l6ZUJ5ID0gZnVuY3Rpb24oZGlmZiwgb2JqKQpTcGF0aWFsSGFzaE1hcC5wcm90b3R5cGUucmVzaXplVG8gPSBmdW5jdGlvbihuZXdTaXplLCBvYmopClNwYXRpYWxIYXNoTWFwClNwYXRpYWxIYXNoTWFwLnByb3RvdHlwZS5tb3ZlID0gZnVuY3Rpb24oZGlmZiwgb2JqKQpTcGF0aWFsSGFzaE1hcC5wcm90b3R5cGUubW92ZVRvID0gZnVuY3Rpb24obmV3UG9zLCBvYmopClNwYXRpYWxIYXNoTWFwLnByb3RvdHlwZS5nZXRBQUJCID0gZnVuY3Rpb24ob2JqKQpTcGF0aWFsSGFzaE1hcC5wcm90b3R5cGUuZ2V0QUFCQnMgPSBmdW5jdGlvbihvYmpzKQpTcGF0aWFsSGFzaE1hcC5wcm90b3R5cGUuY2VsbEZvclZlY3RvciA9IGZ1bmN0aW9uKHZlYykKU3BhdGlhbEhhc2hNYXAucHJvdG90eXBlLmNlbGxzRm9yQUFCQiA9IGZ1bmN0aW9uKGFhYmIpClNwYXRpYWxIYXNoTWFwLnByb3RvdHlwZS5jZWxsc0ZvckFBQkJzID0gZnVuY3Rpb24oYWFiYnMsIHJhdykKU3BhdGlhbEhhc2hNYXAucHJvdG90eXBlLmNlbGxzRm9yT2JqZWN0ID0gZnVuY3Rpb24ob2JqKQpTcGF0aWFsSGFzaE1hcC5wcm90b3R5cGUuY2VsbHNGb3JPYmplY3RzID0gZnVuY3Rpb24ob2JqcywgcmF3KQpTcGF0aWFsSGFzaE1hcC5wcm90b3R5cGUub2JqZWN0c0ZvckNlbGwgPSBmdW5jdGlvbihjZWxsKQpTcGF0aWFsSGFzaE1hcC5wcm90b3R5cGUub2JqZWN0c0ZvckNlbGxzID0gZnVuY3Rpb24oY2VsbHMsIHJhdykKU3BhdGlhbEhhc2hNYXAucHJvdG90eXBlLm9iamVjdHNGb3JPYmplY3QgPSBmdW5jdGlvbihvYmosIHJhdykKU3BhdGlhbEhhc2hNYXAucHJvdG90eXBlLm9iamVjdHNGb3JPYmplY3RzID0gZnVuY3Rpb24ob2JqcywgcmF3KQpTcGF0aWFsSGFzaE1hcC5wcm90b3R5cGUub2JqZWN0c0ZvckFBQkIgPSBmdW5jdGlvbihhYWJiLCByYXcpClNwYXRpYWxIYXNoTWFwLnByb3RvdHlwZS5vYmplY3RzRm9yQUFCQnMgPSBmdW5jdGlvbihhYWJicywgcmF3KQpTcGF0aWFsSGFzaE1hcC5wcm90b3R5cGUuQUFCQnNGb3JDZWxsID0gZnVuY3Rpb24oY2VsbCkKU3BhdGlhbEhhc2hNYXAucHJvdG90eXBlLkFBQkJzRm9yQ2VsbHMgPSBmdW5jdGlvbihjZWxscywgcmF3KQpTcGF0aWFsSGFzaE1hcC5wcm90b3R5cGUuQUFCQnNGb3JPYmplY3QgPSBmdW5jdGlvbihvYmosIHJhdykKU3BhdGlhbEhhc2hNYXAucHJvdG90eXBlLkFBQkJzRm9yT2JqZWN0cyA9IGZ1bmN0aW9uKG9ianMsIHJhdykKU3BhdGlhbEhhc2hNYXAucHJvdG90eXBlLkFBQkJzRm9yQUFCQiA9IGZ1bmN0aW9uKGFhYmIsIHJhdykKU3BhdGlhbEhhc2hNYXAucHJvdG90eXBlLkFBQkJzRm9yQUFCQnMgPSBmdW5jdGlvbihhYWJicywgcmF3KQAAAAAAAAAA+gAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					5,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/container/spatial-h.js",
						"symkeys":
						[
							[
								302,
								328
							],
							[
								624,
								667
							],
							[
								1067,
								1112
							],
							[
								2152,
								2193
							],
							[
								2340,
								2377
							],
							[
								2405,
								2445
							],
							[
								2728,
								2747
							]
						],
						"symlist":
						[
							" function SpatialH(config)",
							"SpatialH.prototype.insert = function(point)",
							"SpatialH.prototype.retrieve = function(point)",
							"SpatialH.prototype.hash = function(point)",
							"SpatialH.prototype.clear = function()",
							"SpatialH.prototype.remove = function(id)",
							"function int(value)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD6AAAAU3BhdGlhbEhhc2gKICBjb25zdHJ1Y3RvcihyYW5nZSwgY2VsbFNpemUpCiAgaW5zZXJ0KGl0ZW0pCiAgcmVtb3ZlKGl0ZW0pCiAgcmVtb3ZlQWxsKCkKICB1cGRhdGUoaXRlbSkKICBzcmNoKHJhbmdlLCBzZWxlY3RvciwgY2FsbGJhY2ssIHJldHVybk9uRmlyc3QpCiAgYW55KHJhbmdlKQogIHF1ZXJ5KHJhbmdlLCBzZWxlY3RvcikKICBmaW5kKHJhbmdlLCBjYWxsYmFjaykKICBpbnRlcnNlY3RzKGEsIGIpCiAgZ2V0Qm91bmRzKHJhbmdlKQAAAAAAAAAA8AAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					6,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/container/sortedMap.js",
						"symkeys":
						[
							[
								129,
								152
							],
							[
								222,
								252
							],
							[
								545,
								554
							],
							[
								896,
								940
							],
							[
								1218,
								1225
							],
							[
								1282,
								1293
							],
							[
								1457,
								1467
							],
							[
								1551,
								1567
							],
							[
								1663,
								1669
							],
							[
								1722,
								1735
							],
							[
								1838,
								1850
							],
							[
								1877,
								1881
							],
							[
								1903,
								1913
							],
							[
								2045,
								2058
							],
							[
								2267,
								2276
							],
							[
								2353,
								2362
							],
							[
								2392,
								2401
							]
						],
						"symlist":
						[
							"CMP_DEFAULT = (a, b) =>",
							"function bisect(arr, cmp, val)",
							"SortedMap",
							"constructor(entries = [], cmp = CMP_DEFAULT)",
							"clear()",
							"delete(key)",
							"*entries()",
							"forEach(f, that)",
							"keys()",
							"findKey(pred)",
							"keyOf(value)",
							"v =>",
							"find(pred)",
							"set(key, val)",
							"*values()",
							"SortedMap",
							"SortedMap"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADwAAAAU3BhdGlhbEgoY29uZmlnKQpTcGF0aWFsSC5wcm90b3R5cGUuaW5zZXJ0ID0gZnVuY3Rpb24ocG9pbnQpClNwYXRpYWxILnByb3RvdHlwZS5yZXRyaWV2ZSA9IGZ1bmN0aW9uKHBvaW50KQpTcGF0aWFsSC5wcm90b3R5cGUuaGFzaCA9IGZ1bmN0aW9uKHBvaW50KQpTcGF0aWFsSC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbigpClNwYXRpYWxILnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbihpZCkKICBpbnQodmFsdWUpAAAAAAAAAAAIAQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					7,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/container/Shash.js",
						"symkeys":
						[
							[
								26,
								69
							],
							[
								259,
								312
							],
							[
								470,
								521
							],
							[
								611,
								645
							]
						],
						"symlist":
						[
							" function Shash(width, height, onNeighbour)",
							"Shash.prototype.add = function(object, width, height)",
							"Shash.prototype.neighbour = function(object, ogrid)",
							"Shash.prototype.check = function()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAIAQAAQ01QX0RFRkFVTFQgPSAoYSwgYikgPT4KICBiaXNlY3QoYXJyLCBjbXAsIHZhbCkKU29ydGVkTWFwCiAgY29uc3RydWN0b3IoZW50cmllcyA9IFtdLCBjbXAgPSBDTVBfREVGQVVMVCkKICBjbGVhcigpCiAgZGVsZXRlKGtleSkKKmVudHJpZXMoKQogIGZvckVhY2goZiwgdGhhdCkKICBrZXlzKCkKICBmaW5kS2V5KHByZWQpCiAga2V5T2YodmFsdWUpCiAgdiA9PgogIGZpbmQocHJlZCkKICBzZXQoa2V5LCB2YWwpCip2YWx1ZXMoKQpTb3J0ZWRNYXAKU29ydGVkTWFwAAAAAAAAAACuAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					8,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/container/sortedMap.js",
						"symkeys":
						[
							[
								129,
								152
							],
							[
								222,
								252
							],
							[
								545,
								554
							],
							[
								896,
								940
							],
							[
								1218,
								1225
							],
							[
								1282,
								1293
							],
							[
								1457,
								1467
							],
							[
								1551,
								1567
							],
							[
								1663,
								1669
							],
							[
								1722,
								1735
							],
							[
								1838,
								1850
							],
							[
								1877,
								1881
							],
							[
								1903,
								1913
							],
							[
								2045,
								2058
							],
							[
								2267,
								2276
							],
							[
								2353,
								2362
							],
							[
								2392,
								2401
							]
						],
						"symlist":
						[
							"CMP_DEFAULT = (a, b) =>",
							"function bisect(arr, cmp, val)",
							"SortedMap",
							"constructor(entries = [], cmp = CMP_DEFAULT)",
							"clear()",
							"delete(key)",
							"*entries()",
							"forEach(f, that)",
							"keys()",
							"findKey(pred)",
							"keyOf(value)",
							"v =>",
							"find(pred)",
							"set(key, val)",
							"*values()",
							"SortedMap",
							"SortedMap"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACuAAAAU2hhc2god2lkdGgsIGhlaWdodCwgb25OZWlnaGJvdXIpClNoYXNoLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbihvYmplY3QsIHdpZHRoLCBoZWlnaHQpClNoYXNoLnByb3RvdHlwZS5uZWlnaGJvdXIgPSBmdW5jdGlvbihvYmplY3QsIG9ncmlkKQpTaGFzaC5wcm90b3R5cGUuY2hlY2sgPSBmdW5jdGlvbigpAAAAAAAAAAAIAQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					9,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/container/Shash.js",
						"symkeys":
						[
							[
								26,
								69
							],
							[
								259,
								312
							],
							[
								470,
								521
							],
							[
								611,
								645
							]
						],
						"symlist":
						[
							" function Shash(width, height, onNeighbour)",
							"Shash.prototype.add = function(object, width, height)",
							"Shash.prototype.neighbour = function(object, ogrid)",
							"Shash.prototype.check = function()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAIAQAAQ01QX0RFRkFVTFQgPSAoYSwgYikgPT4KICBiaXNlY3QoYXJyLCBjbXAsIHZhbCkKU29ydGVkTWFwCiAgY29uc3RydWN0b3IoZW50cmllcyA9IFtdLCBjbXAgPSBDTVBfREVGQVVMVCkKICBjbGVhcigpCiAgZGVsZXRlKGtleSkKKmVudHJpZXMoKQogIGZvckVhY2goZiwgdGhhdCkKICBrZXlzKCkKICBmaW5kS2V5KHByZWQpCiAga2V5T2YodmFsdWUpCiAgdiA9PgogIGZpbmQocHJlZCkKICBzZXQoa2V5LCB2YWwpCip2YWx1ZXMoKQpTb3J0ZWRNYXAKU29ydGVkTWFwAAAAAAAAAACuAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					10,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/container/multiMap.js",
						"symkeys":
						[
							[
								29,
								61
							],
							[
								465,
								493
							],
							[
								680,
								684
							],
							[
								828,
								866
							],
							[
								982,
								1025
							],
							[
								1405,
								1451
							],
							[
								1871,
								1914
							],
							[
								2171,
								2207
							],
							[
								2364,
								2402
							],
							[
								2442,
								2450
							],
							[
								2549,
								2597
							],
							[
								2627,
								2670
							],
							[
								2712,
								2727
							],
							[
								2748,
								2755
							],
							[
								2805,
								2842
							],
							[
								2941,
								2949
							],
							[
								3016,
								3021
							],
							[
								3061,
								3070
							],
							[
								3160,
								3168
							],
							[
								3236,
								3241
							],
							[
								3528,
								3559
							],
							[
								3637,
								3643
							]
						],
						"symlist":
						[
							"function mapEach(map, operation)",
							" function Multimap(iterable)",
							"i =>",
							"Multimap.prototype.get = function(key)",
							"Multimap.prototype.set = function(key, val)",
							"Multimap.prototype.delete = function(key, val)",
							"Multimap.prototype.has = function(key, val)",
							"Multimap.prototype.keys = function()",
							"Multimap.prototype.values = function()",
							"entry =>",
							"Multimap.prototype.forEachEntry = function(iter)",
							"Multimap.prototype.forEach = function(iter)",
							"(entry, key) =>",
							"item =>",
							"Multimap.prototype.clear = function()",
							"Multimap",
							"get()",
							" value =>",
							"Multimap",
							"get()",
							"function makeIterator(iterator)",
							"next()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACuAAAAU2hhc2god2lkdGgsIGhlaWdodCwgb25OZWlnaGJvdXIpClNoYXNoLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbihvYmplY3QsIHdpZHRoLCBoZWlnaHQpClNoYXNoLnByb3RvdHlwZS5uZWlnaGJvdXIgPSBmdW5jdGlvbihvYmplY3QsIG9ncmlkKQpTaGFzaC5wcm90b3R5cGUuY2hlY2sgPSBmdW5jdGlvbigpAAAAAAAAAAAlAgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					11,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/container/multikeymap.js",
						"symkeys":
						[
							[
								21,
								29
							],
							[
								34,
								61
							],
							[
								149,
								155
							],
							[
								467,
								476
							],
							[
								481,
								498
							],
							[
								586,
								595
							],
							[
								1024,
								1035
							],
							[
								1040,
								1053
							],
							[
								1127,
								1137
							],
							[
								1302,
								1319
							],
							[
								1415,
								1440
							],
							[
								1551,
								1558
							],
							[
								1623,
								1635
							],
							[
								1802,
								1821
							],
							[
								2615,
								2632
							],
							[
								2789,
								2798
							],
							[
								2846,
								2869
							],
							[
								3219,
								3228
							],
							[
								3355,
								3365
							],
							[
								3669,
								3678
							],
							[
								3739,
								3745
							],
							[
								3797,
								3813
							],
							[
								4055,
								4084
							],
							[
								4757,
								4767
							],
							[
								4815,
								4823
							]
						],
						"symlist":
						[
							"Iterator",
							"constructor(map, justValue)",
							"next()",
							"Traversor",
							"constructor(node)",
							"next(key)",
							"MultiKeyMap",
							"constructor()",
							"get size()",
							"_assertKeys(keys)",
							"_assertCallback(callback)",
							"clear()",
							"delete(keys)",
							"_delete(keys, node)",
							"_deleteKeys(keys)",
							"entries()",
							"forEach(callback, self)",
							"get(keys)",
							"_get(keys)",
							"has(keys)",
							"keys()",
							"set(keys, value)",
							"_set(base, keys, value, node)",
							"traverse()",
							"values()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAlAgAAICBtYXBFYWNoKG1hcCwgb3BlcmF0aW9uKQpNdWx0aW1hcChpdGVyYWJsZSkKICBpID0+Ck11bHRpbWFwLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihrZXkpCk11bHRpbWFwLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihrZXksIHZhbCkKTXVsdGltYXAucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uKGtleSwgdmFsKQpNdWx0aW1hcC5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24oa2V5LCB2YWwpCk11bHRpbWFwLnByb3RvdHlwZS5rZXlzID0gZnVuY3Rpb24oKQpNdWx0aW1hcC5wcm90b3R5cGUudmFsdWVzID0gZnVuY3Rpb24oKQogIGVudHJ5ID0+Ck11bHRpbWFwLnByb3RvdHlwZS5mb3JFYWNoRW50cnkgPSBmdW5jdGlvbihpdGVyKQpNdWx0aW1hcC5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uKGl0ZXIpCihlbnRyeSwga2V5KSA9PgogIGl0ZW0gPT4KTXVsdGltYXAucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24oKQpNdWx0aW1hcAogIGdldCgpCiAgIHZhbHVlID0+Ck11bHRpbWFwCiAgZ2V0KCkKICBtYWtlSXRlcmF0b3IoaXRlcmF0b3IpCiAgbmV4dCgpAAAAAAAAAACUAQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					12,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/container/multibimap.js",
						"symkeys":
						[
							[
								21,
								25
							],
							[
								30,
								43
							],
							[
								79,
								96
							],
							[
								200,
								206
							],
							[
								229,
								238
							],
							[
								330,
								336
							],
							[
								374,
								383
							],
							[
								505,
								517
							],
							[
								646,
								652
							],
							[
								690,
								698
							],
							[
								820,
								830
							],
							[
								835,
								857
							],
							[
								1050,
								1059
							],
							[
								1143,
								1152
							],
							[
								1236,
								1256
							],
							[
								1594,
								1598
							],
							[
								1647,
								1651
							],
							[
								1771,
								1775
							],
							[
								1889,
								1893
							],
							[
								2002,
								2011
							],
							[
								2081,
								2090
							],
							[
								2131,
								2140
							],
							[
								2181,
								2193
							],
							[
								2299,
								2311
							],
							[
								2365,
								2377
							],
							[
								2582,
								2588
							],
							[
								2683,
								2691
							],
							[
								2791,
								2824
							],
							[
								2871,
								2875
							],
							[
								2928,
								2959
							]
						],
						"symlist":
						[
							"_Map",
							"constructor()",
							"addIterable(k, v)",
							"val =>",
							"add(k, v)",
							"get(k)",
							"has(k, v)",
							"delete(k, v)",
							"keys()",
							"values()",
							"MultiBiMap",
							"constructor(opts = {})",
							"getKey(k)",
							"getVal(v)",
							"add(k, v, opts = {})",
							"k =>",
							"v =>",
							"k =>",
							"v =>",
							"has(k, v)",
							"hasKey(k)",
							"hasVal(v)",
							"delete(k, v)",
							"deleteKey(k)",
							"deleteVal(v)",
							"keys()",
							"values()",
							"function deleteAll(a, aMap, bMap)",
							"b =>",
							"function deleteOnly(a, b, aMap)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACUAQAASXRlcmF0b3IKICBjb25zdHJ1Y3RvcihtYXAsIGp1c3RWYWx1ZSkKICBuZXh0KCkKVHJhdmVyc29yCiAgY29uc3RydWN0b3Iobm9kZSkKICBuZXh0KGtleSkKTXVsdGlLZXlNYXAKICBjb25zdHJ1Y3RvcigpCiAgZ2V0IHNpemUoKQogIF9hc3NlcnRLZXlzKGtleXMpCiAgX2Fzc2VydENhbGxiYWNrKGNhbGxiYWNrKQogIGNsZWFyKCkKICBkZWxldGUoa2V5cykKICBfZGVsZXRlKGtleXMsIG5vZGUpCiAgX2RlbGV0ZUtleXMoa2V5cykKICBlbnRyaWVzKCkKICBmb3JFYWNoKGNhbGxiYWNrLCBzZWxmKQogIGdldChrZXlzKQogIF9nZXQoa2V5cykKICBoYXMoa2V5cykKICBrZXlzKCkKICBzZXQoa2V5cywgdmFsdWUpCiAgX3NldChiYXNlLCBrZXlzLCB2YWx1ZSwgbm9kZSkKICB0cmF2ZXJzZSgpCiAgdmFsdWVzKCkAAAAAAAAAAIYBAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					13,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/container/multikeymap.js",
						"symkeys":
						[
							[
								21,
								29
							],
							[
								34,
								61
							],
							[
								149,
								155
							],
							[
								467,
								476
							],
							[
								481,
								498
							],
							[
								586,
								595
							],
							[
								1024,
								1035
							],
							[
								1040,
								1053
							],
							[
								1127,
								1137
							],
							[
								1302,
								1319
							],
							[
								1415,
								1440
							],
							[
								1551,
								1558
							],
							[
								1623,
								1635
							],
							[
								1802,
								1821
							],
							[
								2615,
								2632
							],
							[
								2789,
								2798
							],
							[
								2846,
								2869
							],
							[
								3219,
								3228
							],
							[
								3355,
								3365
							],
							[
								3669,
								3678
							],
							[
								3739,
								3745
							],
							[
								3797,
								3813
							],
							[
								4055,
								4084
							],
							[
								4757,
								4767
							],
							[
								4815,
								4823
							]
						],
						"symlist":
						[
							"Iterator",
							"constructor(map, justValue)",
							"next()",
							"Traversor",
							"constructor(node)",
							"next(key)",
							"MultiKeyMap",
							"constructor()",
							"get size()",
							"_assertKeys(keys)",
							"_assertCallback(callback)",
							"clear()",
							"delete(keys)",
							"_delete(keys, node)",
							"_deleteKeys(keys)",
							"entries()",
							"forEach(callback, self)",
							"get(keys)",
							"_get(keys)",
							"has(keys)",
							"keys()",
							"set(keys, value)",
							"_set(base, keys, value, node)",
							"traverse()",
							"values()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACGAQAAICBfTWFwCiAgY29uc3RydWN0b3IoKQogIGFkZEl0ZXJhYmxlKGssIHYpCiAgdmFsID0+CiAgYWRkKGssIHYpCiAgZ2V0KGspCiAgaGFzKGssIHYpCiAgZGVsZXRlKGssIHYpCiAga2V5cygpCiAgdmFsdWVzKCkKTXVsdGlCaU1hcAogIGNvbnN0cnVjdG9yKG9wdHMgPSB7fSkKICBnZXRLZXkoaykKICBnZXRWYWwodikKICBhZGQoaywgdiwgb3B0cyA9IHt9KQogIGsgPT4KICB2ID0+CiAgayA9PgogIHYgPT4KICBoYXMoaywgdikKICBoYXNLZXkoaykKICBoYXNWYWwodikKICBkZWxldGUoaywgdikKICBkZWxldGVLZXkoaykKICBkZWxldGVWYWwodikKICBrZXlzKCkKICB2YWx1ZXMoKQogIGRlbGV0ZUFsbChhLCBhTWFwLCBiTWFwKQogIGIgPT4KICBkZWxldGVPbmx5KGEsIGIsIGFNYXApAAAAAAAAAACUAQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					14,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/container/deque.js",
						"symkeys":
						[
							[
								71,
								96
							],
							[
								338,
								388
							],
							[
								609,
								657
							],
							[
								1511,
								1553
							],
							[
								1778,
								1824
							],
							[
								2075,
								2129
							],
							[
								3217,
								3269
							],
							[
								3436,
								3490
							],
							[
								3575,
								3622
							],
							[
								3858,
								3908
							],
							[
								3944,
								3990
							],
							[
								4208,
								4260
							],
							[
								4303,
								4308
							],
							[
								4329,
								4334
							],
							[
								4355,
								4360
							],
							[
								4385,
								4390
							],
							[
								4408,
								4413
							],
							[
								4437,
								4442
							],
							[
								4458,
								4463
							],
							[
								4488,
								4493
							],
							[
								4513,
								4518
							],
							[
								4542,
								4547
							],
							[
								4564,
								4569
							],
							[
								4590,
								4595
							],
							[
								4612,
								4617
							],
							[
								4638,
								4643
							],
							[
								4661,
								4666
							],
							[
								4686,
								4691
							],
							[
								4734,
								4739
							],
							[
								4765,
								4770
							],
							[
								4805,
								4810
							],
							[
								4852,
								4920
							],
							[
								5021,
								5083
							],
							[
								5404,
								5457
							],
							[
								5575,
								5598
							],
							[
								5749,
								5779
							]
						],
						"symlist":
						[
							" function Deque(capacity)",
							"Deque.prototype.toArray = function Deque$toArray()",
							"Deque.prototype.push = function Deque$push(item)",
							"Deque.prototype.pop = function Deque$pop()",
							"Deque.prototype.shift = function Deque$shift()",
							"Deque.prototype.unshift = function Deque$unshift(item)",
							"Deque.prototype.peekBack = function Deque$peekBack()",
							"Deque.prototype.peekFront = function Deque$peekFront()",
							"Deque.prototype.get = function Deque$get(index)",
							"Deque.prototype.isEmpty = function Deque$isEmpty()",
							"Deque.prototype.clear = function Deque$clear()",
							"Deque.prototype.toString = function Deque$toString()",
							"Deque",
							"Deque",
							"Deque",
							"Deque",
							"Deque",
							"Deque",
							"Deque",
							"Deque",
							"Deque",
							"Deque",
							"Deque",
							"Deque",
							"Deque",
							"Deque",
							"Deque",
							"Deque",
							"Deque",
							"get()",
							"set()",
							"Deque.prototype._checkCapacity = function Deque$_checkCapacity(size)",
							"Deque.prototype._resizeTo = function Deque$_resizeTo(capacity)",
							"function arrayMove(src, srcIndex, dst, dstIndex, len)",
							"function pow2AtLeast(n)",
							"function getCapacity(capacity)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACUAQAASXRlcmF0b3IKICBjb25zdHJ1Y3RvcihtYXAsIGp1c3RWYWx1ZSkKICBuZXh0KCkKVHJhdmVyc29yCiAgY29uc3RydWN0b3Iobm9kZSkKICBuZXh0KGtleSkKTXVsdGlLZXlNYXAKICBjb25zdHJ1Y3RvcigpCiAgZ2V0IHNpemUoKQogIF9hc3NlcnRLZXlzKGtleXMpCiAgX2Fzc2VydENhbGxiYWNrKGNhbGxiYWNrKQogIGNsZWFyKCkKICBkZWxldGUoa2V5cykKICBfZGVsZXRlKGtleXMsIG5vZGUpCiAgX2RlbGV0ZUtleXMoa2V5cykKICBlbnRyaWVzKCkKICBmb3JFYWNoKGNhbGxiYWNrLCBzZWxmKQogIGdldChrZXlzKQogIF9nZXQoa2V5cykKICBoYXMoa2V5cykKICBrZXlzKCkKICBzZXQoa2V5cywgdmFsdWUpCiAgX3NldChiYXNlLCBrZXlzLCB2YWx1ZSwgbm9kZSkKICB0cmF2ZXJzZSgpCiAgdmFsdWVzKCkAAAAAAAAAAIkDAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					15,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/container/DenseSpatialHash2D.js",
						"symkeys":
						[
							[
								13,
								31
							],
							[
								36,
								82
							],
							[
								558,
								565
							],
							[
								805,
								820
							],
							[
								863,
								878
							],
							[
								1259,
								1299
							],
							[
								1632,
								1659
							],
							[
								2538,
								2561
							],
							[
								2757,
								2775
							],
							[
								2933,
								2949
							],
							[
								3125,
								3132
							],
							[
								3188,
								3195
							],
							[
								3232,
								3242
							],
							[
								3282,
								3303
							],
							[
								3982,
								3992
							]
						],
						"symlist":
						[
							"DenseSpatialHash2D",
							"constructor(width, height, bucketSizePow2 = 6)",
							"clear()",
							"commitChanges()",
							"add(x, y, w, h)",
							"addToBuckets(id, minX, minY, maxX, maxY)",
							"addRect(id, dx, dy, dw, dh)",
							"setRect(id, x, y, w, h)",
							"addPos(id, dx, dy)",
							"setPos(id, x, y)",
							"has(id)",
							"get(id)",
							"get size()",
							"deleteFromBuckets(id)",
							"delete(id)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACJAwAARGVxdWUoY2FwYWNpdHkpCkRlcXVlLnByb3RvdHlwZS50b0FycmF5ID0gZnVuY3Rpb24gRGVxdWUkdG9BcnJheSgpCkRlcXVlLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gRGVxdWUkcHVzaChpdGVtKQpEZXF1ZS5wcm90b3R5cGUucG9wID0gZnVuY3Rpb24gRGVxdWUkcG9wKCkKRGVxdWUucHJvdG90eXBlLnNoaWZ0ID0gZnVuY3Rpb24gRGVxdWUkc2hpZnQoKQpEZXF1ZS5wcm90b3R5cGUudW5zaGlmdCA9IGZ1bmN0aW9uIERlcXVlJHVuc2hpZnQoaXRlbSkKRGVxdWUucHJvdG90eXBlLnBlZWtCYWNrID0gZnVuY3Rpb24gRGVxdWUkcGVla0JhY2soKQpEZXF1ZS5wcm90b3R5cGUucGVla0Zyb250ID0gZnVuY3Rpb24gRGVxdWUkcGVla0Zyb250KCkKRGVxdWUucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIERlcXVlJGdldChpbmRleCkKRGVxdWUucHJvdG90eXBlLmlzRW1wdHkgPSBmdW5jdGlvbiBEZXF1ZSRpc0VtcHR5KCkKRGVxdWUucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gRGVxdWUkY2xlYXIoKQpEZXF1ZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiBEZXF1ZSR0b1N0cmluZygpCkRlcXVlCkRlcXVlCkRlcXVlCkRlcXVlCkRlcXVlCkRlcXVlCkRlcXVlCkRlcXVlCkRlcXVlCkRlcXVlCkRlcXVlCkRlcXVlCkRlcXVlCkRlcXVlCkRlcXVlCkRlcXVlCkRlcXVlCiAgZ2V0KCkKICBzZXQoKQpEZXF1ZS5wcm90b3R5cGUuX2NoZWNrQ2FwYWNpdHkgPSBmdW5jdGlvbiBEZXF1ZSRfY2hlY2tDYXBhY2l0eShzaXplKQpEZXF1ZS5wcm90b3R5cGUuX3Jlc2l6ZVRvID0gZnVuY3Rpb24gRGVxdWUkX3Jlc2l6ZVRvKGNhcGFjaXR5KQogIGFycmF5TW92ZShzcmMsIHNyY0luZGV4LCBkc3QsIGRzdEluZGV4LCBsZW4pCiAgcG93MkF0TGVhc3QobikKICBnZXRDYXBhY2l0eShjYXBhY2l0eSkAAAAAAAAAAEIBAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					16,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/container/compositeMap.js",
						"symkeys":
						[
							[
								13,
								25
							],
							[
								30,
								59
							],
							[
								1160,
								1175
							],
							[
								1499,
								1508
							],
							[
								2194,
								2201
							],
							[
								2400,
								2411
							],
							[
								3483,
								3491
							],
							[
								3923,
								3931
							],
							[
								4377,
								4396
							],
							[
								4601,
								4607
							],
							[
								4939,
								4945
							],
							[
								5633,
								5641
							],
							[
								5884,
								5890
							],
							[
								6385,
								6394
							],
							[
								6689,
								6695
							],
							[
								7413,
								7421
							],
							[
								7496,
								7526
							],
							[
								8389,
								8410
							],
							[
								8455,
								8470
							],
							[
								8526,
								8566
							],
							[
								8672,
								8687
							],
							[
								8777,
								8847
							],
							[
								8897,
								8912
							],
							[
								9043,
								9058
							],
							[
								9179,
								9245
							],
							[
								9295,
								9303
							],
							[
								9366,
								9374
							],
							[
								9462,
								9514
							],
							[
								9583,
								9598
							],
							[
								9681,
								9696
							],
							[
								9801,
								9868
							],
							[
								9944,
								9952
							],
							[
								10029,
								10037
							]
						],
						"symlist":
						[
							"CompositeMap",
							"constructor(entries, options)",
							"set(key, value)",
							"(v, k) =>",
							"clear()",
							"delete(key)",
							"has(key)",
							"get(key)",
							"forEach(callbackfn)",
							"keys()",
							"next()",
							"values()",
							"next()",
							"entries()",
							"next()",
							"toJSON()",
							"copySection(maps, key, keyPos)",
							"function copyMap(map)",
							"(value, key) =>",
							"function copyMaps(map, keyLength, level)",
							"(value, key) =>",
							"function recurseForEach(callbackfn, lastKeyPart, map, keyPart, keyPos)",
							"(value, key) =>",
							"(value, key) =>",
							"function recurseForEachValue(callbackfn, lastKeyPart, map, keyPos)",
							"value =>",
							"value =>",
							"function getRecursiveEntries(lastKeyPos, map, level)",
							"(value, key) =>",
							"(value, key) =>",
							"function recursiveEntriesToRecursiveMap(lastKeyPos, entries, level)",
							"entry =>",
							"entry =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABCAQAARGVuc2VTcGF0aWFsSGFzaDJECiAgY29uc3RydWN0b3Iod2lkdGgsIGhlaWdodCwgYnVja2V0U2l6ZVBvdzIgPSA2KQogIGNsZWFyKCkKICBjb21taXRDaGFuZ2VzKCkKICBhZGQoeCwgeSwgdywgaCkKICBhZGRUb0J1Y2tldHMoaWQsIG1pblgsIG1pblksIG1heFgsIG1heFkpCiAgYWRkUmVjdChpZCwgZHgsIGR5LCBkdywgZGgpCiAgc2V0UmVjdChpZCwgeCwgeSwgdywgaCkKICBhZGRQb3MoaWQsIGR4LCBkeSkKICBzZXRQb3MoaWQsIHgsIHkpCiAgaGFzKGlkKQogIGdldChpZCkKICBnZXQgc2l6ZSgpCiAgZGVsZXRlRnJvbUJ1Y2tldHMoaWQpCiAgZGVsZXRlKGlkKQAAAAAAAAAAlwIAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					17,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/container/componentMap.js",
						"symkeys":
						[
							[
								13,
								24
							],
							[
								29,
								55
							],
							[
								128,
								147
							],
							[
								322,
								330
							],
							[
								487,
								495
							],
							[
								588,
								603
							],
							[
								990,
								1001
							],
							[
								1210,
								1219
							],
							[
								1224,
								1249
							],
							[
								1526,
								1534
							],
							[
								1576,
								1584
							],
							[
								1626,
								1641
							],
							[
								1690,
								1701
							],
							[
								1759,
								1771
							],
							[
								1794,
								1819
							],
							[
								1917,
								1923
							]
						],
						"symlist":
						[
							"BucketStore",
							"constructor(getBucketName)",
							"getBucket(maybeKey)",
							"get(key)",
							"has(key)",
							"set(key, value)",
							"delete(key)",
							"BucketMap",
							"constructor(options = {})",
							"get(key)",
							"has(key)",
							"set(key, value)",
							"delete(key)",
							"ComponentMap",
							"constructor(options = {})",
							"key =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACXAgAAQ29tcG9zaXRlTWFwCiAgY29uc3RydWN0b3IoZW50cmllcywgb3B0aW9ucykKICBzZXQoa2V5LCB2YWx1ZSkKKHYsIGspID0+CiAgY2xlYXIoKQogIGRlbGV0ZShrZXkpCiAgaGFzKGtleSkKICBnZXQoa2V5KQogIGZvckVhY2goY2FsbGJhY2tmbikKICBrZXlzKCkKICBuZXh0KCkKICB2YWx1ZXMoKQogIG5leHQoKQogIGVudHJpZXMoKQogIG5leHQoKQogIHRvSlNPTigpCiAgY29weVNlY3Rpb24obWFwcywga2V5LCBrZXlQb3MpCiAgY29weU1hcChtYXApCih2YWx1ZSwga2V5KSA9PgogIGNvcHlNYXBzKG1hcCwga2V5TGVuZ3RoLCBsZXZlbCkKKHZhbHVlLCBrZXkpID0+CiAgcmVjdXJzZUZvckVhY2goY2FsbGJhY2tmbiwgbGFzdEtleVBhcnQsIG1hcCwga2V5UGFydCwga2V5UG9zKQoodmFsdWUsIGtleSkgPT4KKHZhbHVlLCBrZXkpID0+CiAgcmVjdXJzZUZvckVhY2hWYWx1ZShjYWxsYmFja2ZuLCBsYXN0S2V5UGFydCwgbWFwLCBrZXlQb3MpCiAgdmFsdWUgPT4KICB2YWx1ZSA9PgogIGdldFJlY3Vyc2l2ZUVudHJpZXMobGFzdEtleVBvcywgbWFwLCBsZXZlbCkKKHZhbHVlLCBrZXkpID0+Cih2YWx1ZSwga2V5KSA9PgogIHJlY3Vyc2l2ZUVudHJpZXNUb1JlY3Vyc2l2ZU1hcChsYXN0S2V5UG9zLCBlbnRyaWVzLCBsZXZlbCkKICBlbnRyeSA9PgogIGVudHJ5ID0+AAAAAAAAAAACAQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					18,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/container/boxhash.js",
						"symkeys":
						[
							[
								811,
								818
							],
							[
								885,
								906
							],
							[
								1354,
								1368
							],
							[
								2643,
								2657
							],
							[
								3255,
								3266
							],
							[
								4314,
								4343
							],
							[
								5182,
								5194
							],
							[
								5417,
								5433
							],
							[
								5683,
								5695
							],
							[
								6220,
								6239
							]
						],
						"symlist":
						[
							"BoxHash",
							"constructor(cellSize)",
							"insert(object)",
							"remove(object)",
							"query(AABB)",
							"queryCallback(AABB, callback)",
							"getBuckets()",
							"getAverageSize()",
							"getLargest()",
							"getSparseness(AABB)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAACAQAAQnVja2V0U3RvcmUKICBjb25zdHJ1Y3RvcihnZXRCdWNrZXROYW1lKQogIGdldEJ1Y2tldChtYXliZUtleSkKICBnZXQoa2V5KQogIGhhcyhrZXkpCiAgc2V0KGtleSwgdmFsdWUpCiAgZGVsZXRlKGtleSkKQnVja2V0TWFwCiAgY29uc3RydWN0b3Iob3B0aW9ucyA9IHt9KQogIGdldChrZXkpCiAgaGFzKGtleSkKICBzZXQoa2V5LCB2YWx1ZSkKICBkZWxldGUoa2V5KQpDb21wb25lbnRNYXAKICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pCiAga2V5ID0+AAAAAAAAAAC2AAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					19,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/dom/preactComponent.js",
						"symkeys":
						[
							[
								853,
								872
							],
							[
								1263,
								1287
							],
							[
								1351,
								1365
							],
							[
								1370,
								1392
							],
							[
								1688,
								1692
							],
							[
								2104,
								2117
							],
							[
								2165,
								2181
							],
							[
								2207,
								2221
							],
							[
								2252,
								2269
							],
							[
								2344,
								2375
							],
							[
								2500,
								2513
							],
							[
								2616,
								2623
							],
							[
								2682,
								2705
							],
							[
								2784,
								2791
							],
							[
								2825,
								2856
							],
							[
								3014,
								3038
							],
							[
								3112,
								3135
							],
							[
								3265,
								3287
							],
							[
								4067,
								4089
							],
							[
								4229,
								4237
							],
							[
								4351,
								4375
							],
							[
								5611,
								5633
							],
							[
								5690,
								5732
							],
							[
								6020,
								6038
							],
							[
								6330,
								6336
							],
							[
								6552,
								6583
							],
							[
								8597,
								8603
							],
							[
								8626,
								8651
							],
							[
								8785,
								8804
							],
							[
								8917,
								8939
							],
							[
								9101,
								9115
							],
							[
								9200,
								9224
							],
							[
								9728,
								9736
							],
							[
								9878,
								9889
							],
							[
								9912,
								9929
							],
							[
								9969,
								9989
							]
						],
						"symlist":
						[
							"Fragment = props =>",
							"add = (arr, ...items) =>",
							"ReactComponent",
							"static create(...args)",
							"c =>",
							"pathFn = p =>",
							"Array: (p, v) =>",
							"Map: (p, v) =>",
							"Object: (p, v) =>",
							" function flatten(obj, path)",
							"(child, i) =>",
							"args =>",
							"static isComponent(obj)",
							"prop =>",
							"static factory(render_to, root)",
							"render_to = component =>",
							"ret = function(...args)",
							"static append(...args)",
							"static fromObject(obj)",
							"child =>",
							"static toObject(...args)",
							"static toChildArray(a)",
							"static toSource(obj, opts = {}, depth = 0)",
							"([name, value]) =>",
							"obj =>",
							"static toString(obj, opts = {})",
							"Portal",
							"componentDidUpdate(props)",
							"componentDidMount()",
							"componentWillUnmount()",
							"findNode(node)",
							"renderLayer(show = true)",
							"render()",
							"PortalProxy",
							"getChildContext()",
							"render({ children })"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC2AAAAQm94SGFzaAogIGNvbnN0cnVjdG9yKGNlbGxTaXplKQogIGluc2VydChvYmplY3QpCiAgcmVtb3ZlKG9iamVjdCkKICBxdWVyeShBQUJCKQogIHF1ZXJ5Q2FsbGJhY2soQUFCQiwgY2FsbGJhY2spCiAgZ2V0QnVja2V0cygpCiAgZ2V0QXZlcmFnZVNpemUoKQogIGdldExhcmdlc3QoKQogIGdldFNwYXJzZW5lc3MoQUFCQikAAAAAAAAAAOMCAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					20,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/dom/reactComponent.js",
						"symkeys":
						[
							[
								116,
								130
							],
							[
								135,
								157
							],
							[
								486,
								517
							],
							[
								675,
								699
							],
							[
								773,
								789
							],
							[
								971,
								995
							],
							[
								1874,
								1881
							],
							[
								2069,
								2100
							]
						],
						"symlist":
						[
							"ReactComponent",
							"static create(...args)",
							"static factory(render_to, root)",
							"render_to = component =>",
							"ret = function()",
							"static toObject(...args)",
							"dummy()",
							"static toString(obj, opts = {})"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADjAgAARnJhZ21lbnQgPSBwcm9wcyA9PgogIGFkZCA9IChhcnIsIC4uLml0ZW1zKSA9PgpSZWFjdENvbXBvbmVudAogIHN0YXRpYyBjcmVhdGUoLi4uYXJncykKICBjID0+CiAgcGF0aEZuID0gcCA9PgpBcnJheTogKHAsIHYpID0+Ck1hcDogKHAsIHYpID0+Ck9iamVjdDogKHAsIHYpID0+CiAgZmxhdHRlbihvYmosIHBhdGgpCihjaGlsZCwgaSkgPT4KICBhcmdzID0+CiAgc3RhdGljIGlzQ29tcG9uZW50KG9iaikKICBwcm9wID0+CiAgc3RhdGljIGZhY3RvcnkocmVuZGVyX3RvLCByb290KQogIHJlbmRlcl90byA9IGNvbXBvbmVudCA9PgogIHJldCA9IGZ1bmN0aW9uKC4uLmFyZ3MpCiAgc3RhdGljIGFwcGVuZCguLi5hcmdzKQogIHN0YXRpYyBmcm9tT2JqZWN0KG9iaikKICBjaGlsZCA9PgogIHN0YXRpYyB0b09iamVjdCguLi5hcmdzKQogIHN0YXRpYyB0b0NoaWxkQXJyYXkoYSkKICBzdGF0aWMgdG9Tb3VyY2Uob2JqLCBvcHRzID0ge30sIGRlcHRoID0gMCkKKFtuYW1lLCB2YWx1ZV0pID0+CiAgb2JqID0+CiAgc3RhdGljIHRvU3RyaW5nKG9iaiwgb3B0cyA9IHt9KQpQb3J0YWwKICBjb21wb25lbnREaWRVcGRhdGUocHJvcHMpCiAgY29tcG9uZW50RGlkTW91bnQoKQogIGNvbXBvbmVudFdpbGxVbm1vdW50KCkKICBmaW5kTm9kZShub2RlKQogIHJlbmRlckxheWVyKHNob3cgPSB0cnVlKQogIHJlbmRlcigpClBvcnRhbFByb3h5CiAgZ2V0Q2hpbGRDb250ZXh0KCkKICByZW5kZXIoeyBjaGlsZHJlbiB9KQAAAAAAAAAAvgAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					21,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/dom/svg.arc.js",
						"symkeys":
						[
							[
								18,
								29
							],
							[
								46,
								57
							],
							[
								60,
								79
							],
							[
								255,
								285
							],
							[
								353,
								372
							],
							[
								479,
								483
							],
							[
								527,
								531
							],
							[
								575,
								579
							],
							[
								623,
								627
							],
							[
								671,
								700
							],
							[
								763,
								774
							],
							[
								876,
								881
							],
							[
								1017,
								1029
							],
							[
								1147,
								1171
							],
							[
								1402,
								1427
							],
							[
								1847,
								1857
							],
							[
								2204,
								2219
							],
							[
								2306,
								2315
							],
							[
								2374,
								2391
							],
							[
								2555,
								2567
							],
							[
								2724,
								2736
							],
							[
								2954,
								2964
							],
							[
								3001,
								3011
							],
							[
								3048,
								3062
							],
							[
								3114,
								3128
							],
							[
								3181,
								3193
							],
							[
								3474,
								3528
							],
							[
								4099,
								4133
							],
							[
								5295,
								5320
							],
							[
								5442,
								5453
							],
							[
								5884,
								5889
							],
							[
								6347,
								6355
							],
							[
								6407,
								6411
							],
							[
								6459,
								6463
							],
							[
								6511,
								6515
							],
							[
								6558,
								6562
							],
							[
								6605,
								6609
							],
							[
								6652,
								6656
							],
							[
								6699,
								6702
							],
							[
								6779,
								6786
							],
							[
								6829,
								6835
							],
							[
								6887,
								6895
							],
							[
								7178,
								7211
							]
						],
						"symlist":
						[
							"function ()",
							"function ()",
							" function Trig()",
							".prototype.format = function()",
							" (match, number) =>",
							"x1()",
							"y1()",
							"x2()",
							"y2()",
							"translateFull(x, y, relative)",
							"container()",
							"mid()",
							"distance(pt)",
							"distanceToLine(pt1, pt2)",
							"withinLineRange(pt1, pt2)",
							"onArc(arc)",
							"translate(x, y)",
							"equals(p)",
							"closeEnough(x, y)",
							"contains(pt)",
							"inside(x, y)",
							"leftTopX()",
							"leftTopY()",
							"rightBottomX()",
							"rightBottomY()",
							"inside(x, y)",
							"plotRadius(x1, y1, r, largeArcFlag, sweepFlag, x2, y2)",
							"plot(x1, y1, h, sweepFlag, x2, y2)",
							"lineAngle(x1, y1, x2, y2)",
							"ptOnArc(pt)",
							"mid()",
							"length()",
							"cx()",
							"cy()",
							"x1()",
							"y1()",
							"x2()",
							"y2()",
							"h()",
							"angle()",
							"flag()",
							"sweep(f)",
							"arc(x1, y1, r, sweepFlag, x2, y2)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC+AAAAUmVhY3RDb21wb25lbnQKICBzdGF0aWMgY3JlYXRlKC4uLmFyZ3MpCiAgc3RhdGljIGZhY3RvcnkocmVuZGVyX3RvLCByb290KQogIHJlbmRlcl90byA9IGNvbXBvbmVudCA9PgogIHJldCA9IGZ1bmN0aW9uKCkKICBzdGF0aWMgdG9PYmplY3QoLi4uYXJncykKICBkdW1teSgpCiAgc3RhdGljIHRvU3RyaW5nKG9iaiwgb3B0cyA9IHt9KQAAAAAAAAAAkAIAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					22,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/dom/select.js",
						"symkeys":
						[
							[
								54,
								60
							],
							[
								65,
								113
							]
						],
						"symlist":
						[
							"Select",
							"static create(entries, factory = Element.create)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACQAgAAKCkKKCkKVHJpZygpCiAgLnByb3RvdHlwZS5mb3JtYXQgPSBmdW5jdGlvbigpCiAgIChtYXRjaCwgbnVtYmVyKSA9PgogIHgxKCkKICB5MSgpCiAgeDIoKQogIHkyKCkKICB0cmFuc2xhdGVGdWxsKHgsIHksIHJlbGF0aXZlKQogIGNvbnRhaW5lcigpCiAgbWlkKCkKICBkaXN0YW5jZShwdCkKICBkaXN0YW5jZVRvTGluZShwdDEsIHB0MikKICB3aXRoaW5MaW5lUmFuZ2UocHQxLCBwdDIpCiAgb25BcmMoYXJjKQogIHRyYW5zbGF0ZSh4LCB5KQogIGVxdWFscyhwKQogIGNsb3NlRW5vdWdoKHgsIHkpCiAgY29udGFpbnMocHQpCiAgaW5zaWRlKHgsIHkpCiAgbGVmdFRvcFgoKQogIGxlZnRUb3BZKCkKICByaWdodEJvdHRvbVgoKQogIHJpZ2h0Qm90dG9tWSgpCiAgaW5zaWRlKHgsIHkpCiAgcGxvdFJhZGl1cyh4MSwgeTEsIHIsIGxhcmdlQXJjRmxhZywgc3dlZXBGbGFnLCB4MiwgeTIpCiAgcGxvdCh4MSwgeTEsIGgsIHN3ZWVwRmxhZywgeDIsIHkyKQogIGxpbmVBbmdsZSh4MSwgeTEsIHgyLCB5MikKICBwdE9uQXJjKHB0KQogIG1pZCgpCiAgbGVuZ3RoKCkKICBjeCgpCiAgY3koKQogIHgxKCkKICB5MSgpCiAgeDIoKQogIHkyKCkKICBoKCkKICBhbmdsZSgpCiAgZmxhZygpCiAgc3dlZXAoZikKICBhcmMoeDEsIHkxLCByLCBzd2VlcEZsYWcsIHgyLCB5MikAAAAAAAAAADkAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					23,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/dom/svg.arc.js",
						"symkeys":
						[
							[
								18,
								29
							],
							[
								46,
								57
							],
							[
								60,
								79
							],
							[
								255,
								285
							],
							[
								353,
								372
							],
							[
								479,
								483
							],
							[
								527,
								531
							],
							[
								575,
								579
							],
							[
								623,
								627
							],
							[
								671,
								700
							],
							[
								763,
								774
							],
							[
								876,
								881
							],
							[
								1017,
								1029
							],
							[
								1147,
								1171
							],
							[
								1402,
								1427
							],
							[
								1847,
								1857
							],
							[
								2204,
								2219
							],
							[
								2306,
								2315
							],
							[
								2374,
								2391
							],
							[
								2555,
								2567
							],
							[
								2724,
								2736
							],
							[
								2954,
								2964
							],
							[
								3001,
								3011
							],
							[
								3048,
								3062
							],
							[
								3114,
								3128
							],
							[
								3181,
								3193
							],
							[
								3474,
								3528
							],
							[
								4099,
								4133
							],
							[
								5295,
								5320
							],
							[
								5442,
								5453
							],
							[
								5884,
								5889
							],
							[
								6347,
								6355
							],
							[
								6407,
								6411
							],
							[
								6459,
								6463
							],
							[
								6511,
								6515
							],
							[
								6558,
								6562
							],
							[
								6605,
								6609
							],
							[
								6652,
								6656
							],
							[
								6699,
								6702
							],
							[
								6779,
								6786
							],
							[
								6829,
								6835
							],
							[
								6887,
								6895
							],
							[
								7178,
								7211
							]
						],
						"symlist":
						[
							"function ()",
							"function ()",
							" function Trig()",
							".prototype.format = function()",
							" (match, number) =>",
							"x1()",
							"y1()",
							"x2()",
							"y2()",
							"translateFull(x, y, relative)",
							"container()",
							"mid()",
							"distance(pt)",
							"distanceToLine(pt1, pt2)",
							"withinLineRange(pt1, pt2)",
							"onArc(arc)",
							"translate(x, y)",
							"equals(p)",
							"closeEnough(x, y)",
							"contains(pt)",
							"inside(x, y)",
							"leftTopX()",
							"leftTopY()",
							"rightBottomX()",
							"rightBottomY()",
							"inside(x, y)",
							"plotRadius(x1, y1, r, largeArcFlag, sweepFlag, x2, y2)",
							"plot(x1, y1, h, sweepFlag, x2, y2)",
							"lineAngle(x1, y1, x2, y2)",
							"ptOnArc(pt)",
							"mid()",
							"length()",
							"cx()",
							"cy()",
							"x1()",
							"y1()",
							"x2()",
							"y2()",
							"h()",
							"angle()",
							"flag()",
							"sweep(f)",
							"arc(x1, y1, r, sweepFlag, x2, y2)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA5AAAAU2VsZWN0CiAgc3RhdGljIGNyZWF0ZShlbnRyaWVzLCBmYWN0b3J5ID0gRWxlbWVudC5jcmVhdGUpAAAAAAAAAACQAgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					24,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/dom/timer.js",
						"symkeys":
						[
							[
								6,
								97
							],
							[
								173,
								178
							],
							[
								240,
								246
							],
							[
								464,
								504
							],
							[
								564,
								600
							],
							[
								679,
								717
							],
							[
								781,
								806
							],
							[
								835,
								849
							],
							[
								871,
								906
							],
							[
								912,
								923
							],
							[
								944,
								963
							],
							[
								1004,
								1009
							],
							[
								1172,
								1183
							],
							[
								1340,
								1360
							],
							[
								1428,
								1452
							],
							[
								1487,
								1501
							]
						],
						"symlist":
						[
							" function Timer(timeout, fn, props = {}, { create = setInterval, destroy = clearInterval })",
							"() =>",
							"stop()",
							"Timer.interval = (timeout, fn, props) =>",
							"Timer.once = (timeout, fn, props) =>",
							"Timer.until = (deadline, fn, props) =>",
							"create: (fn, interval) =>",
							"destroy: id =>",
							"Timer.debug = (impl = Timer.std) =>",
							"log: msg =>",
							"create(fn, timeout)",
							"() =>",
							"destroy(id)",
							"(resolve, reject) =>",
							"create: (fn, timeout) =>",
							"destroy: id =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACQAgAAKCkKKCkKVHJpZygpCiAgLnByb3RvdHlwZS5mb3JtYXQgPSBmdW5jdGlvbigpCiAgIChtYXRjaCwgbnVtYmVyKSA9PgogIHgxKCkKICB5MSgpCiAgeDIoKQogIHkyKCkKICB0cmFuc2xhdGVGdWxsKHgsIHksIHJlbGF0aXZlKQogIGNvbnRhaW5lcigpCiAgbWlkKCkKICBkaXN0YW5jZShwdCkKICBkaXN0YW5jZVRvTGluZShwdDEsIHB0MikKICB3aXRoaW5MaW5lUmFuZ2UocHQxLCBwdDIpCiAgb25BcmMoYXJjKQogIHRyYW5zbGF0ZSh4LCB5KQogIGVxdWFscyhwKQogIGNsb3NlRW5vdWdoKHgsIHkpCiAgY29udGFpbnMocHQpCiAgaW5zaWRlKHgsIHkpCiAgbGVmdFRvcFgoKQogIGxlZnRUb3BZKCkKICByaWdodEJvdHRvbVgoKQogIHJpZ2h0Qm90dG9tWSgpCiAgaW5zaWRlKHgsIHkpCiAgcGxvdFJhZGl1cyh4MSwgeTEsIHIsIGxhcmdlQXJjRmxhZywgc3dlZXBGbGFnLCB4MiwgeTIpCiAgcGxvdCh4MSwgeTEsIGgsIHN3ZWVwRmxhZywgeDIsIHkyKQogIGxpbmVBbmdsZSh4MSwgeTEsIHgyLCB5MikKICBwdE9uQXJjKHB0KQogIG1pZCgpCiAgbGVuZ3RoKCkKICBjeCgpCiAgY3koKQogIHgxKCkKICB5MSgpCiAgeDIoKQogIHkyKCkKICBoKCkKICBhbmdsZSgpCiAgZmxhZygpCiAgc3dlZXAoZikKICBhcmMoeDEsIHkxLCByLCBzd2VlcEZsYWcsIHgyLCB5MikAAAAAAAAAAJ8BAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					25,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/dom/tree.js",
						"symkeys":
						[
							[
								64,
								84
							],
							[
								224,
								270
							],
							[
								488,
								499
							]
						],
						"symlist":
						[
							" function Tree(root)",
							"Tree.walk = function walk(node, fn, accu = {})",
							"function ()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACfAQAAVGltZXIodGltZW91dCwgZm4sIHByb3BzID0ge30sIHsgY3JlYXRlID0gc2V0SW50ZXJ2YWwsIGRlc3Ryb3kgPSBjbGVhckludGVydmFsIH0pCigpID0+CiAgc3RvcCgpClRpbWVyLmludGVydmFsID0gKHRpbWVvdXQsIGZuLCBwcm9wcykgPT4KVGltZXIub25jZSA9ICh0aW1lb3V0LCBmbiwgcHJvcHMpID0+ClRpbWVyLnVudGlsID0gKGRlYWRsaW5lLCBmbiwgcHJvcHMpID0+CiAgY3JlYXRlOiAoZm4sIGludGVydmFsKSA9PgogIGRlc3Ryb3k6IGlkID0+ClRpbWVyLmRlYnVnID0gKGltcGwgPSBUaW1lci5zdGQpID0+CiAgbG9nOiBtc2cgPT4KICBjcmVhdGUoZm4sIHRpbWVvdXQpCigpID0+CiAgZGVzdHJveShpZCkKKHJlc29sdmUsIHJlamVjdCkgPT4KICBjcmVhdGU6IChmbiwgdGltZW91dCkgPT4KICBkZXN0cm95OiBpZCA9PgAAAAAAAAAAPAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					26,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/dom/svg.js",
						"symkeys":
						[
							[
								413,
								416
							],
							[
								437,
								505
							],
							[
								664,
								677
							],
							[
								700,
								715
							],
							[
								1085,
								1108
							],
							[
								1530,
								1541
							],
							[
								1613,
								1632
							],
							[
								1730,
								1756
							],
							[
								1875,
								1892
							],
							[
								2154,
								2159
							],
							[
								2267,
								2277
							],
							[
								3011,
								3041
							],
							[
								3325,
								3375
							],
							[
								3390,
								3421
							],
							[
								4160,
								4201
							],
							[
								4286,
								4317
							],
							[
								4378,
								4406
							],
							[
								4468,
								4494
							],
							[
								4543,
								4558
							],
							[
								4664,
								4683
							],
							[
								5019,
								5057
							],
							[
								5304,
								5399
							],
							[
								6078,
								6171
							],
							[
								6567,
								6580
							],
							[
								6753,
								6771
							],
							[
								6782,
								6816
							],
							[
								7026,
								7037
							],
							[
								7112,
								7125
							],
							[
								7161,
								7191
							],
							[
								7357,
								7395
							],
							[
								7527,
								7556
							],
							[
								7601,
								7611
							],
							[
								7636,
								7640
							],
							[
								7797,
								7808
							],
							[
								7938,
								7961
							],
							[
								8087,
								8109
							],
							[
								8147,
								8176
							],
							[
								8428,
								8436
							],
							[
								8524,
								8536
							],
							[
								8568,
								8575
							],
							[
								8604,
								8615
							],
							[
								8705,
								8712
							],
							[
								8750,
								8757
							],
							[
								8866,
								8874
							],
							[
								8925,
								8932
							],
							[
								8968,
								8995
							],
							[
								9098,
								9104
							],
							[
								9352,
								9369
							],
							[
								9936,
								9960
							],
							[
								10190,
								10206
							],
							[
								10518,
								10532
							],
							[
								10572,
								10579
							],
							[
								10750,
								10778
							],
							[
								11079,
								11102
							],
							[
								11775,
								11817
							],
							[
								12116,
								12126
							],
							[
								12238,
								12248
							],
							[
								12429,
								12448
							],
							[
								12818,
								12832
							],
							[
								13641,
								13651
							],
							[
								14574,
								14596
							],
							[
								14709,
								14730
							],
							[
								15020,
								15042
							],
							[
								15723,
								15752
							],
							[
								16110,
								16132
							],
							[
								16381,
								16391
							],
							[
								16434,
								16454
							],
							[
								16540,
								16544
							],
							[
								16558,
								16564
							],
							[
								16727,
								16752
							],
							[
								16790,
								16796
							],
							[
								16995,
								16999
							],
							[
								17021,
								17054
							]
						],
						"symlist":
						[
							"SVG",
							"static create(name, { outerHTML, innerHTML, text, ...attr }, parent)",
							"attrfn = n =>",
							"attrfn = arg =>",
							"static factory(...args)",
							"create(tag)",
							"append_to(elem, to)",
							"setattr(elem, name, value)",
							"setcss(elem, css)",
							"() =>",
							"get root()",
							".append_to = function(elem, p)",
							"factory = function SVGFactory(tag, attr, children)",
							"create = (tag, attr, parent) =>",
							".derive = function(override = {}, parent)",
							".initialize = function(...args)",
							".setRoot = function(...args)",
							".parent = function(parent)",
							"append_to(elem)",
							".clear = function()",
							"static matrix(element, screen = false)",
							"static bbox(element, options = { parent: null, absolute: false, client: false, screen: false })",
							"static gradient(type, { stops, factory = SVG.create, parent = null, line = false, ...props })",
							"(color, o) =>",
							"static owner(elem)",
							"ret = function(tag, props, parent)",
							" function()",
							"static path()",
							"static getProperty(elem, name)",
							"static getProperties(elem, properties)",
							"static *coloredElements(elem)",
							" (e, d) =>",
							"a =>",
							"([k, v]) =>",
							"(acc, [name, value]) =>",
							"static allColors(elem)",
							"addColor = (c, item, prop) =>",
							"color =>",
							"get colors()",
							"item =>",
							"index(name)",
							"item =>",
							"name(i)",
							"get(arg)",
							"item =>",
							"set(index, color, elements)",
							"dump()",
							"adjacencyMatrix()",
							"replace(color, newColor)",
							"newColor = () =>",
							"replaceAll(fn)",
							"item =>",
							"fn = (rgba, index, color) =>",
							"static *lineIterator(e)",
							"static *pathIterator(e, opts, fn = p => p)",
							"pos = i =>",
							"pos = i =>",
							"do_point = point =>",
							" (str, pad) =>",
							"toString()",
							"static parsePath(path)",
							"parseValues = args =>",
							" (_, command, args) =>",
							"static viewbox(element, rect)",
							"static splitPath(path)",
							"command =>",
							"([command, args]) =>",
							"m =>",
							"arg =>",
							"static pathToPoints(path)",
							"cmd =>",
							"n =>",
							"static *pathToPointIterator(path)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA8AAAAVHJlZShyb290KQpUcmVlLndhbGsgPSBmdW5jdGlvbiB3YWxrKG5vZGUsIGZuLCBhY2N1ID0ge30pCigpAAAAAAAAAADcBgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					27,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/dom/timer.js",
						"symkeys":
						[
							[
								6,
								97
							],
							[
								173,
								178
							],
							[
								240,
								246
							],
							[
								464,
								504
							],
							[
								564,
								600
							],
							[
								679,
								717
							],
							[
								781,
								806
							],
							[
								835,
								849
							],
							[
								871,
								906
							],
							[
								912,
								923
							],
							[
								944,
								963
							],
							[
								1004,
								1009
							],
							[
								1172,
								1183
							],
							[
								1340,
								1360
							],
							[
								1428,
								1452
							],
							[
								1487,
								1501
							]
						],
						"symlist":
						[
							" function Timer(timeout, fn, props = {}, { create = setInterval, destroy = clearInterval })",
							"() =>",
							"stop()",
							"Timer.interval = (timeout, fn, props) =>",
							"Timer.once = (timeout, fn, props) =>",
							"Timer.until = (deadline, fn, props) =>",
							"create: (fn, interval) =>",
							"destroy: id =>",
							"Timer.debug = (impl = Timer.std) =>",
							"log: msg =>",
							"create(fn, timeout)",
							"() =>",
							"destroy(id)",
							"(resolve, reject) =>",
							"create: (fn, timeout) =>",
							"destroy: id =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADcBgAAU1ZHCiAgc3RhdGljIGNyZWF0ZShuYW1lLCB7IG91dGVySFRNTCwgaW5uZXJIVE1MLCB0ZXh0LCAuLi5hdHRyIH0sIHBhcmVudCkKICBhdHRyZm4gPSBuID0+CiAgYXR0cmZuID0gYXJnID0+CiAgc3RhdGljIGZhY3RvcnkoLi4uYXJncykKICBjcmVhdGUodGFnKQogIGFwcGVuZF90byhlbGVtLCB0bykKICBzZXRhdHRyKGVsZW0sIG5hbWUsIHZhbHVlKQogIHNldGNzcyhlbGVtLCBjc3MpCigpID0+CiAgZ2V0IHJvb3QoKQogIC5hcHBlbmRfdG8gPSBmdW5jdGlvbihlbGVtLCBwKQogIGZhY3RvcnkgPSBmdW5jdGlvbiBTVkdGYWN0b3J5KHRhZywgYXR0ciwgY2hpbGRyZW4pCiAgY3JlYXRlID0gKHRhZywgYXR0ciwgcGFyZW50KSA9PgogIC5kZXJpdmUgPSBmdW5jdGlvbihvdmVycmlkZSA9IHt9LCBwYXJlbnQpCiAgLmluaXRpYWxpemUgPSBmdW5jdGlvbiguLi5hcmdzKQogIC5zZXRSb290ID0gZnVuY3Rpb24oLi4uYXJncykKICAucGFyZW50ID0gZnVuY3Rpb24ocGFyZW50KQogIGFwcGVuZF90byhlbGVtKQogIC5jbGVhciA9IGZ1bmN0aW9uKCkKICBzdGF0aWMgbWF0cml4KGVsZW1lbnQsIHNjcmVlbiA9IGZhbHNlKQogIHN0YXRpYyBiYm94KGVsZW1lbnQsIG9wdGlvbnMgPSB7IHBhcmVudDogbnVsbCwgYWJzb2x1dGU6IGZhbHNlLCBjbGllbnQ6IGZhbHNlLCBzY3JlZW46IGZhbHNlIH0pCiAgc3RhdGljIGdyYWRpZW50KHR5cGUsIHsgc3RvcHMsIGZhY3RvcnkgPSBTVkcuY3JlYXRlLCBwYXJlbnQgPSBudWxsLCBsaW5lID0gZmFsc2UsIC4uLnByb3BzIH0pCihjb2xvciwgbykgPT4KICBzdGF0aWMgb3duZXIoZWxlbSkKICByZXQgPSBmdW5jdGlvbih0YWcsIHByb3BzLCBwYXJlbnQpCiAgIGZ1bmN0aW9uKCkKICBzdGF0aWMgcGF0aCgpCiAgc3RhdGljIGdldFByb3BlcnR5KGVsZW0sIG5hbWUpCiAgc3RhdGljIGdldFByb3BlcnRpZXMoZWxlbSwgcHJvcGVydGllcykKICBzdGF0aWMgKmNvbG9yZWRFbGVtZW50cyhlbGVtKQogICAoZSwgZCkgPT4KICBhID0+Cihbaywgdl0pID0+CihhY2MsIFtuYW1lLCB2YWx1ZV0pID0+CiAgc3RhdGljIGFsbENvbG9ycyhlbGVtKQogIGFkZENvbG9yID0gKGMsIGl0ZW0sIHByb3ApID0+CiAgY29sb3IgPT4KICBnZXQgY29sb3JzKCkKICBpdGVtID0+CiAgaW5kZXgobmFtZSkKICBpdGVtID0+CiAgbmFtZShpKQogIGdldChhcmcpCiAgaXRlbSA9PgogIHNldChpbmRleCwgY29sb3IsIGVsZW1lbnRzKQogIGR1bXAoKQogIGFkamFjZW5jeU1hdHJpeCgpCiAgcmVwbGFjZShjb2xvciwgbmV3Q29sb3IpCiAgbmV3Q29sb3IgPSAoKSA9PgogIHJlcGxhY2VBbGwoZm4pCiAgaXRlbSA9PgogIGZuID0gKHJnYmEsIGluZGV4LCBjb2xvcikgPT4KICBzdGF0aWMgKmxpbmVJdGVyYXRvcihlKQogIHN0YXRpYyAqcGF0aEl0ZXJhdG9yKGUsIG9wdHMsIGZuID0gcCA9PiBwKQogIHBvcyA9IGkgPT4KICBwb3MgPSBpID0+CiAgZG9fcG9pbnQgPSBwb2ludCA9PgogICAoc3RyLCBwYWQpID0+CiAgdG9TdHJpbmcoKQogIHN0YXRpYyBwYXJzZVBhdGgocGF0aCkKICBwYXJzZVZhbHVlcyA9IGFyZ3MgPT4KICAgKF8sIGNvbW1hbmQsIGFyZ3MpID0+CiAgc3RhdGljIHZpZXdib3goZWxlbWVudCwgcmVjdCkKICBzdGF0aWMgc3BsaXRQYXRoKHBhdGgpCiAgY29tbWFuZCA9PgooW2NvbW1hbmQsIGFyZ3NdKSA9PgogIG0gPT4KICBhcmcgPT4KICBzdGF0aWMgcGF0aFRvUG9pbnRzKHBhdGgpCiAgY21kID0+CiAgbiA9PgogIHN0YXRpYyAqcGF0aFRvUG9pbnRJdGVyYXRvcihwYXRoKQAAAAAAAAAAnwEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					28,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/dom/tree.js",
						"symkeys":
						[
							[
								64,
								84
							],
							[
								224,
								270
							],
							[
								488,
								499
							]
						],
						"symlist":
						[
							" function Tree(root)",
							"Tree.walk = function walk(node, fn, accu = {})",
							"function ()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACfAQAAVGltZXIodGltZW91dCwgZm4sIHByb3BzID0ge30sIHsgY3JlYXRlID0gc2V0SW50ZXJ2YWwsIGRlc3Ryb3kgPSBjbGVhckludGVydmFsIH0pCigpID0+CiAgc3RvcCgpClRpbWVyLmludGVydmFsID0gKHRpbWVvdXQsIGZuLCBwcm9wcykgPT4KVGltZXIub25jZSA9ICh0aW1lb3V0LCBmbiwgcHJvcHMpID0+ClRpbWVyLnVudGlsID0gKGRlYWRsaW5lLCBmbiwgcHJvcHMpID0+CiAgY3JlYXRlOiAoZm4sIGludGVydmFsKSA9PgogIGRlc3Ryb3k6IGlkID0+ClRpbWVyLmRlYnVnID0gKGltcGwgPSBUaW1lci5zdGQpID0+CiAgbG9nOiBtc2cgPT4KICBjcmVhdGUoZm4sIHRpbWVvdXQpCigpID0+CiAgZGVzdHJveShpZCkKKHJlc29sdmUsIHJlamVjdCkgPT4KICBjcmVhdGU6IChmbiwgdGltZW91dCkgPT4KICBkZXN0cm95OiBpZCA9PgAAAAAAAAAAPAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					29,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/dom/svg.js",
						"symkeys":
						[
							[
								413,
								416
							],
							[
								437,
								505
							],
							[
								664,
								677
							],
							[
								700,
								715
							],
							[
								1085,
								1108
							],
							[
								1530,
								1541
							],
							[
								1613,
								1632
							],
							[
								1730,
								1756
							],
							[
								1875,
								1892
							],
							[
								2154,
								2159
							],
							[
								2267,
								2277
							],
							[
								3011,
								3041
							],
							[
								3325,
								3375
							],
							[
								3390,
								3421
							],
							[
								4160,
								4201
							],
							[
								4286,
								4317
							],
							[
								4378,
								4406
							],
							[
								4468,
								4494
							],
							[
								4543,
								4558
							],
							[
								4664,
								4683
							],
							[
								5019,
								5057
							],
							[
								5304,
								5399
							],
							[
								6078,
								6171
							],
							[
								6567,
								6580
							],
							[
								6753,
								6771
							],
							[
								6782,
								6816
							],
							[
								7026,
								7037
							],
							[
								7112,
								7125
							],
							[
								7161,
								7191
							],
							[
								7357,
								7395
							],
							[
								7527,
								7556
							],
							[
								7601,
								7611
							],
							[
								7636,
								7640
							],
							[
								7797,
								7808
							],
							[
								7938,
								7961
							],
							[
								8087,
								8109
							],
							[
								8147,
								8176
							],
							[
								8428,
								8436
							],
							[
								8524,
								8536
							],
							[
								8568,
								8575
							],
							[
								8604,
								8615
							],
							[
								8705,
								8712
							],
							[
								8750,
								8757
							],
							[
								8866,
								8874
							],
							[
								8925,
								8932
							],
							[
								8968,
								8995
							],
							[
								9098,
								9104
							],
							[
								9352,
								9369
							],
							[
								9936,
								9960
							],
							[
								10190,
								10206
							],
							[
								10518,
								10532
							],
							[
								10572,
								10579
							],
							[
								10750,
								10778
							],
							[
								11079,
								11102
							],
							[
								11775,
								11817
							],
							[
								12116,
								12126
							],
							[
								12238,
								12248
							],
							[
								12429,
								12448
							],
							[
								12818,
								12832
							],
							[
								13641,
								13651
							],
							[
								14574,
								14596
							],
							[
								14709,
								14730
							],
							[
								15020,
								15042
							],
							[
								15723,
								15752
							],
							[
								16110,
								16132
							],
							[
								16381,
								16391
							],
							[
								16434,
								16454
							],
							[
								16540,
								16544
							],
							[
								16558,
								16564
							],
							[
								16727,
								16752
							],
							[
								16790,
								16796
							],
							[
								16995,
								16999
							],
							[
								17021,
								17054
							]
						],
						"symlist":
						[
							"SVG",
							"static create(name, { outerHTML, innerHTML, text, ...attr }, parent)",
							"attrfn = n =>",
							"attrfn = arg =>",
							"static factory(...args)",
							"create(tag)",
							"append_to(elem, to)",
							"setattr(elem, name, value)",
							"setcss(elem, css)",
							"() =>",
							"get root()",
							".append_to = function(elem, p)",
							"factory = function SVGFactory(tag, attr, children)",
							"create = (tag, attr, parent) =>",
							".derive = function(override = {}, parent)",
							".initialize = function(...args)",
							".setRoot = function(...args)",
							".parent = function(parent)",
							"append_to(elem)",
							".clear = function()",
							"static matrix(element, screen = false)",
							"static bbox(element, options = { parent: null, absolute: false, client: false, screen: false })",
							"static gradient(type, { stops, factory = SVG.create, parent = null, line = false, ...props })",
							"(color, o) =>",
							"static owner(elem)",
							"ret = function(tag, props, parent)",
							" function()",
							"static path()",
							"static getProperty(elem, name)",
							"static getProperties(elem, properties)",
							"static *coloredElements(elem)",
							" (e, d) =>",
							"a =>",
							"([k, v]) =>",
							"(acc, [name, value]) =>",
							"static allColors(elem)",
							"addColor = (c, item, prop) =>",
							"color =>",
							"get colors()",
							"item =>",
							"index(name)",
							"item =>",
							"name(i)",
							"get(arg)",
							"item =>",
							"set(index, color, elements)",
							"dump()",
							"adjacencyMatrix()",
							"replace(color, newColor)",
							"newColor = () =>",
							"replaceAll(fn)",
							"item =>",
							"fn = (rgba, index, color) =>",
							"static *lineIterator(e)",
							"static *pathIterator(e, opts, fn = p => p)",
							"pos = i =>",
							"pos = i =>",
							"do_point = point =>",
							" (str, pad) =>",
							"toString()",
							"static parsePath(path)",
							"parseValues = args =>",
							" (_, command, args) =>",
							"static viewbox(element, rect)",
							"static splitPath(path)",
							"command =>",
							"([command, args]) =>",
							"m =>",
							"arg =>",
							"static pathToPoints(path)",
							"cmd =>",
							"n =>",
							"static *pathToPointIterator(path)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA8AAAAVHJlZShyb290KQpUcmVlLndhbGsgPSBmdW5jdGlvbiB3YWxrKG5vZGUsIGZuLCBhY2N1ID0ge30pCigpAAAAAAAAAADcBgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					30,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/draw/colorMap.js",
						"symkeys":
						[
							[
								127,
								135
							],
							[
								152,
								172
							],
							[
								946,
								965
							],
							[
								1102,
								1109
							],
							[
								1186,
								1200
							],
							[
								1258,
								1275
							],
							[
								1305,
								1316
							],
							[
								1438,
								1451
							],
							[
								1514,
								1534
							],
							[
								1598,
								1603
							],
							[
								1611,
								1622
							],
							[
								1679,
								1693
							],
							[
								1945,
								1959
							],
							[
								2126,
								2147
							],
							[
								2232,
								2236
							]
						],
						"symlist":
						[
							"ColorMap",
							"constructor(...args)",
							"toString(opts = {})",
							" num =>",
							"t = entries =>",
							"([key, color]) =>",
							"getMinMax()",
							"minmax = a =>",
							" (acc, chan) =>",
							" e =>",
							"([k, c]) =>",
							"fn = (v, k) =>",
							"fn = (c, k) =>",
							"*toScalar(ofpts = {})",
							"n =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADcBgAAU1ZHCiAgc3RhdGljIGNyZWF0ZShuYW1lLCB7IG91dGVySFRNTCwgaW5uZXJIVE1MLCB0ZXh0LCAuLi5hdHRyIH0sIHBhcmVudCkKICBhdHRyZm4gPSBuID0+CiAgYXR0cmZuID0gYXJnID0+CiAgc3RhdGljIGZhY3RvcnkoLi4uYXJncykKICBjcmVhdGUodGFnKQogIGFwcGVuZF90byhlbGVtLCB0bykKICBzZXRhdHRyKGVsZW0sIG5hbWUsIHZhbHVlKQogIHNldGNzcyhlbGVtLCBjc3MpCigpID0+CiAgZ2V0IHJvb3QoKQogIC5hcHBlbmRfdG8gPSBmdW5jdGlvbihlbGVtLCBwKQogIGZhY3RvcnkgPSBmdW5jdGlvbiBTVkdGYWN0b3J5KHRhZywgYXR0ciwgY2hpbGRyZW4pCiAgY3JlYXRlID0gKHRhZywgYXR0ciwgcGFyZW50KSA9PgogIC5kZXJpdmUgPSBmdW5jdGlvbihvdmVycmlkZSA9IHt9LCBwYXJlbnQpCiAgLmluaXRpYWxpemUgPSBmdW5jdGlvbiguLi5hcmdzKQogIC5zZXRSb290ID0gZnVuY3Rpb24oLi4uYXJncykKICAucGFyZW50ID0gZnVuY3Rpb24ocGFyZW50KQogIGFwcGVuZF90byhlbGVtKQogIC5jbGVhciA9IGZ1bmN0aW9uKCkKICBzdGF0aWMgbWF0cml4KGVsZW1lbnQsIHNjcmVlbiA9IGZhbHNlKQogIHN0YXRpYyBiYm94KGVsZW1lbnQsIG9wdGlvbnMgPSB7IHBhcmVudDogbnVsbCwgYWJzb2x1dGU6IGZhbHNlLCBjbGllbnQ6IGZhbHNlLCBzY3JlZW46IGZhbHNlIH0pCiAgc3RhdGljIGdyYWRpZW50KHR5cGUsIHsgc3RvcHMsIGZhY3RvcnkgPSBTVkcuY3JlYXRlLCBwYXJlbnQgPSBudWxsLCBsaW5lID0gZmFsc2UsIC4uLnByb3BzIH0pCihjb2xvciwgbykgPT4KICBzdGF0aWMgb3duZXIoZWxlbSkKICByZXQgPSBmdW5jdGlvbih0YWcsIHByb3BzLCBwYXJlbnQpCiAgIGZ1bmN0aW9uKCkKICBzdGF0aWMgcGF0aCgpCiAgc3RhdGljIGdldFByb3BlcnR5KGVsZW0sIG5hbWUpCiAgc3RhdGljIGdldFByb3BlcnRpZXMoZWxlbSwgcHJvcGVydGllcykKICBzdGF0aWMgKmNvbG9yZWRFbGVtZW50cyhlbGVtKQogICAoZSwgZCkgPT4KICBhID0+Cihbaywgdl0pID0+CihhY2MsIFtuYW1lLCB2YWx1ZV0pID0+CiAgc3RhdGljIGFsbENvbG9ycyhlbGVtKQogIGFkZENvbG9yID0gKGMsIGl0ZW0sIHByb3ApID0+CiAgY29sb3IgPT4KICBnZXQgY29sb3JzKCkKICBpdGVtID0+CiAgaW5kZXgobmFtZSkKICBpdGVtID0+CiAgbmFtZShpKQogIGdldChhcmcpCiAgaXRlbSA9PgogIHNldChpbmRleCwgY29sb3IsIGVsZW1lbnRzKQogIGR1bXAoKQogIGFkamFjZW5jeU1hdHJpeCgpCiAgcmVwbGFjZShjb2xvciwgbmV3Q29sb3IpCiAgbmV3Q29sb3IgPSAoKSA9PgogIHJlcGxhY2VBbGwoZm4pCiAgaXRlbSA9PgogIGZuID0gKHJnYmEsIGluZGV4LCBjb2xvcikgPT4KICBzdGF0aWMgKmxpbmVJdGVyYXRvcihlKQogIHN0YXRpYyAqcGF0aEl0ZXJhdG9yKGUsIG9wdHMsIGZuID0gcCA9PiBwKQogIHBvcyA9IGkgPT4KICBwb3MgPSBpID0+CiAgZG9fcG9pbnQgPSBwb2ludCA9PgogICAoc3RyLCBwYWQpID0+CiAgdG9TdHJpbmcoKQogIHN0YXRpYyBwYXJzZVBhdGgocGF0aCkKICBwYXJzZVZhbHVlcyA9IGFyZ3MgPT4KICAgKF8sIGNvbW1hbmQsIGFyZ3MpID0+CiAgc3RhdGljIHZpZXdib3goZWxlbWVudCwgcmVjdCkKICBzdGF0aWMgc3BsaXRQYXRoKHBhdGgpCiAgY29tbWFuZCA9PgooW2NvbW1hbmQsIGFyZ3NdKSA9PgogIG0gPT4KICBhcmcgPT4KICBzdGF0aWMgcGF0aFRvUG9pbnRzKHBhdGgpCiAgY21kID0+CiAgbiA9PgogIHN0YXRpYyAqcGF0aFRvUG9pbnRJdGVyYXRvcihwYXRoKQAAAAAAAAAA5QAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					31,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/dsp/fft.js",
						"symkeys":
						[
							[
								66,
								85
							],
							[
								904,
								973
							],
							[
								2199,
								2268
							]
						],
						"symlist":
						[
							" function FFT(size)",
							"FFT.prototype.forward = function(data, stride, stride_offset, re, im)",
							"FFT.prototype.inverse = function(re, im, data, stride, stride_offset)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADlAAAAQ29sb3JNYXAKICBjb25zdHJ1Y3RvciguLi5hcmdzKQogIHRvU3RyaW5nKG9wdHMgPSB7fSkKICAgbnVtID0+CiAgdCA9IGVudHJpZXMgPT4KKFtrZXksIGNvbG9yXSkgPT4KICBnZXRNaW5NYXgoKQogIG1pbm1heCA9IGEgPT4KICAgKGFjYywgY2hhbikgPT4KICAgZSA9PgooW2ssIGNdKSA9PgogIGZuID0gKHYsIGspID0+CiAgZm4gPSAoYywgaykgPT4KKnRvU2NhbGFyKG9mcHRzID0ge30pCiAgbiA9PgAAAAAAAAAAlQAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					32,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/dsp/util.js",
						"symkeys":
						[
							[
								66,
								96
							],
							[
								142,
								168
							],
							[
								226,
								253
							],
							[
								315,
								339
							],
							[
								399,
								474
							],
							[
								814,
								852
							],
							[
								918,
								940
							],
							[
								1143,
								1166
							],
							[
								1210,
								1234
							]
						],
						"symlist":
						[
							" function triangular_window(x)",
							" function cosine_window(x)",
							" function hamming_window(x)",
							" function hann_window(x)",
							" function window(buffer, size, stride, stride_offset, win = hamming_window)",
							" function butterworth_filter(x, n, d0)",
							" function eq_filter(x)",
							" function db_to_mag(db)",
							" function mag_to_db(mag)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACVAAAARkZUKHNpemUpCkZGVC5wcm90b3R5cGUuZm9yd2FyZCA9IGZ1bmN0aW9uKGRhdGEsIHN0cmlkZSwgc3RyaWRlX29mZnNldCwgcmUsIGltKQpGRlQucHJvdG90eXBlLmludmVyc2UgPSBmdW5jdGlvbihyZSwgaW0sIGRhdGEsIHN0cmlkZSwgc3RyaWRlX29mZnNldCkAAAAAAAAAAOEAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					33,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/dsp/fft.js",
						"symkeys":
						[
							[
								66,
								85
							],
							[
								904,
								973
							],
							[
								2199,
								2268
							]
						],
						"symlist":
						[
							" function FFT(size)",
							"FFT.prototype.forward = function(data, stride, stride_offset, re, im)",
							"FFT.prototype.inverse = function(re, im, data, stride, stride_offset)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADhAAAAICB0cmlhbmd1bGFyX3dpbmRvdyh4KQogIGNvc2luZV93aW5kb3coeCkKICBoYW1taW5nX3dpbmRvdyh4KQogIGhhbm5fd2luZG93KHgpCiAgd2luZG93KGJ1ZmZlciwgc2l6ZSwgc3RyaWRlLCBzdHJpZGVfb2Zmc2V0LCB3aW4gPSBoYW1taW5nX3dpbmRvdykKICBidXR0ZXJ3b3J0aF9maWx0ZXIoeCwgbiwgZDApCiAgZXFfZmlsdGVyKHgpCiAgZGJfdG9fbWFnKGRiKQogIG1hZ190b19kYihtYWcpAAAAAAAAAACVAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					34,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/dsp/util.js",
						"symkeys":
						[
							[
								66,
								96
							],
							[
								142,
								168
							],
							[
								226,
								253
							],
							[
								315,
								339
							],
							[
								399,
								474
							],
							[
								814,
								852
							],
							[
								918,
								940
							],
							[
								1143,
								1166
							],
							[
								1210,
								1234
							]
						],
						"symlist":
						[
							" function triangular_window(x)",
							" function cosine_window(x)",
							" function hamming_window(x)",
							" function hann_window(x)",
							" function window(buffer, size, stride, stride_offset, win = hamming_window)",
							" function butterworth_filter(x, n, d0)",
							" function eq_filter(x)",
							" function db_to_mag(db)",
							" function mag_to_db(mag)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACVAAAARkZUKHNpemUpCkZGVC5wcm90b3R5cGUuZm9yd2FyZCA9IGZ1bmN0aW9uKGRhdGEsIHN0cmlkZSwgc3RyaWRlX29mZnNldCwgcmUsIGltKQpGRlQucHJvdG90eXBlLmludmVyc2UgPSBmdW5jdGlvbihyZSwgaW0sIGRhdGEsIHN0cmlkZSwgc3RyaWRlX29mZnNldCkAAAAAAAAAAOEAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					35,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/dsp/fft.js",
						"symkeys":
						[
							[
								66,
								85
							],
							[
								904,
								973
							],
							[
								2199,
								2268
							]
						],
						"symlist":
						[
							" function FFT(size)",
							"FFT.prototype.forward = function(data, stride, stride_offset, re, im)",
							"FFT.prototype.inverse = function(re, im, data, stride, stride_offset)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADhAAAAICB0cmlhbmd1bGFyX3dpbmRvdyh4KQogIGNvc2luZV93aW5kb3coeCkKICBoYW1taW5nX3dpbmRvdyh4KQogIGhhbm5fd2luZG93KHgpCiAgd2luZG93KGJ1ZmZlciwgc2l6ZSwgc3RyaWRlLCBzdHJpZGVfb2Zmc2V0LCB3aW4gPSBoYW1taW5nX3dpbmRvdykKICBidXR0ZXJ3b3J0aF9maWx0ZXIoeCwgbiwgZDApCiAgZXFfZmlsdGVyKHgpCiAgZGJfdG9fbWFnKGRiKQogIG1hZ190b19kYihtYWcpAAAAAAAAAACVAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					36,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/dsp/util.js",
						"symkeys":
						[
							[
								66,
								96
							],
							[
								142,
								168
							],
							[
								226,
								253
							],
							[
								315,
								339
							],
							[
								399,
								474
							],
							[
								814,
								852
							],
							[
								918,
								940
							],
							[
								1143,
								1166
							],
							[
								1210,
								1234
							]
						],
						"symlist":
						[
							" function triangular_window(x)",
							" function cosine_window(x)",
							" function hamming_window(x)",
							" function hann_window(x)",
							" function window(buffer, size, stride, stride_offset, win = hamming_window)",
							" function butterworth_filter(x, n, d0)",
							" function eq_filter(x)",
							" function db_to_mag(db)",
							" function mag_to_db(mag)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACVAAAARkZUKHNpemUpCkZGVC5wcm90b3R5cGUuZm9yd2FyZCA9IGZ1bmN0aW9uKGRhdGEsIHN0cmlkZSwgc3RyaWRlX29mZnNldCwgcmUsIGltKQpGRlQucHJvdG90eXBlLmludmVyc2UgPSBmdW5jdGlvbihyZSwgaW0sIGRhdGEsIHN0cmlkZSwgc3RyaWRlX29mZnNldCkAAAAAAAAAAOEAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					37,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/dsp/fft.js",
						"symkeys":
						[
							[
								66,
								85
							],
							[
								904,
								973
							],
							[
								2199,
								2268
							]
						],
						"symlist":
						[
							" function FFT(size)",
							"FFT.prototype.forward = function(data, stride, stride_offset, re, im)",
							"FFT.prototype.inverse = function(re, im, data, stride, stride_offset)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADhAAAAICB0cmlhbmd1bGFyX3dpbmRvdyh4KQogIGNvc2luZV93aW5kb3coeCkKICBoYW1taW5nX3dpbmRvdyh4KQogIGhhbm5fd2luZG93KHgpCiAgd2luZG93KGJ1ZmZlciwgc2l6ZSwgc3RyaWRlLCBzdHJpZGVfb2Zmc2V0LCB3aW4gPSBoYW1taW5nX3dpbmRvdykKICBidXR0ZXJ3b3J0aF9maWx0ZXIoeCwgbiwgZDApCiAgZXFfZmlsdGVyKHgpCiAgZGJfdG9fbWFnKGRiKQogIG1hZ190b19kYihtYWcpAAAAAAAAAACVAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					1,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/dom/container.js",
						"symkeys":
						[
							[
								54,
								63
							],
							[
								68,
								103
							],
							[
								151,
								176
							]
						],
						"symlist":
						[
							"Container",
							"static factory(parent, size = null)",
							"append_to(elem, p = null)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACVAAAARkZUKHNpemUpCkZGVC5wcm90b3R5cGUuZm9yd2FyZCA9IGZ1bmN0aW9uKGRhdGEsIHN0cmlkZSwgc3RyaWRlX29mZnNldCwgcmUsIGltKQpGRlQucHJvdG90eXBlLmludmVyc2UgPSBmdW5jdGlvbihyZSwgaW0sIGRhdGEsIHN0cmlkZSwgc3RyaWRlX29mZnNldCkAAAAAAAAAAEsAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					2,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABLAAAAQ29udGFpbmVyCiAgc3RhdGljIGZhY3RvcnkocGFyZW50LCBzaXplID0gbnVsbCkKICBhcHBlbmRfdG8oZWxlbSwgcCA9IG51bGwpAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					3,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1591,
								1599
							],
							[
								1615,
								1635
							],
							[
								2075,
								2106
							],
							[
								2432,
								2454
							],
							[
								2674,
								2707
							],
							[
								2729,
								2733
							],
							[
								3109,
								3114
							],
							[
								3162,
								3166
							],
							[
								3187,
								3207
							],
							[
								3261,
								3265
							],
							[
								3335,
								3357
							],
							[
								3551,
								3573
							],
							[
								3996,
								4062
							],
							[
								4408,
								4417
							],
							[
								4522,
								4552
							],
							[
								4907,
								4942
							],
							[
								4974,
								5015
							],
							[
								5047,
								5113
							],
							[
								5146,
								5180
							],
							[
								5251,
								5298
							],
							[
								5834,
								5870
							],
							[
								5983,
								5992
							],
							[
								6228,
								6236
							],
							[
								6342,
								6349
							],
							[
								6399,
								6423
							],
							[
								6804,
								6815
							],
							[
								6905,
								6916
							],
							[
								6980,
								6991
							],
							[
								7045,
								7054
							],
							[
								7092,
								7103
							],
							[
								7191,
								7218
							],
							[
								7356,
								7360
							],
							[
								7384,
								7391
							],
							[
								7424,
								7440
							],
							[
								7569,
								7614
							],
							[
								7830,
								7888
							],
							[
								8200,
								8222
							],
							[
								8617,
								8627
							],
							[
								8871,
								8885
							],
							[
								9838,
								9862
							],
							[
								9988,
								9992
							],
							[
								10084,
								10098
							],
							[
								10198,
								10214
							],
							[
								10568,
								10581
							],
							[
								10599,
								10604
							],
							[
								10686,
								10693
							],
							[
								10721,
								10726
							],
							[
								10848,
								10873
							],
							[
								11048,
								11087
							],
							[
								11164,
								11175
							],
							[
								12741,
								12772
							],
							[
								13427,
								13460
							],
							[
								13732,
								13767
							],
							[
								13852,
								13885
							],
							[
								14645,
								14651
							],
							[
								14821,
								14827
							],
							[
								15597,
								15601
							],
							[
								16036,
								16043
							],
							[
								16436,
								16472
							],
							[
								16876,
								16910
							],
							[
								17804,
								17809
							],
							[
								18575,
								18579
							],
							[
								18673,
								18677
							],
							[
								18797,
								18806
							],
							[
								18936,
								18943
							],
							[
								19224,
								19231
							],
							[
								19312,
								19319
							],
							[
								19383,
								19399
							],
							[
								19464,
								19484
							],
							[
								20184,
								20196
							],
							[
								20295,
								20307
							],
							[
								20509,
								20525
							],
							[
								20681,
								20694
							],
							[
								20997,
								21015
							],
							[
								21151,
								21180
							],
							[
								21673,
								21692
							],
							[
								22106,
								22127
							],
							[
								22905,
								22927
							],
							[
								23400,
								23421
							],
							[
								23972,
								23991
							],
							[
								24425,
								24433
							],
							[
								27134,
								27146
							],
							[
								28847,
								28882
							],
							[
								29496,
								29515
							],
							[
								29623,
								29639
							],
							[
								29774,
								29791
							],
							[
								29836,
								29849
							],
							[
								29885,
								29895
							],
							[
								30336,
								30352
							],
							[
								30441,
								30460
							],
							[
								30471,
								30490
							],
							[
								30516,
								30536
							]
						],
						"symlist":
						[
							"value =>",
							" (level, message) =>",
							"function ExecTool(cmd, ...args)",
							"function GetMime(file)",
							"MakeUUID = (rng = Math.random) =>",
							"n =>",
							"dd =>",
							"d =>",
							"function GetDir(dir)",
							"n =>",
							"function DateStr(date)",
							"function ModeStr(mode)",
							"HTMLPage = ({ title, style, scripts = [], children, ...props }) =>",
							"script =>",
							"FilterForm = ({ ...props }) =>",
							"HTMLTable = ({ rows, ...props }) =>",
							"HTMLTableRow = ({ columns, ...props }) =>",
							"HTMLTableColumn = ({ columns, children, tag = 'td', ...props }) =>",
							"FileLink = ({ file, ...props }) =>",
							"FileObject = ({ file, stat = {}, ...props }) =>",
							"FileTable = ({ files, ...props }) =>",
							"(a, b) =>",
							"field =>",
							"file =>",
							"function ReadExiv2(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function ReadExiftool(file)",
							"l =>",
							"line =>",
							"([line, idx]) =>",
							"function HeifConvert(src, dst, quality = 100)",
							"function MagickResize(src, dst, rotate = 0, width, height)",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							" function ParseBody(gen)",
							".createWS = (url, callbacks, listen) =>",
							".out = s =>",
							"async function* test(req, resp)",
							" function proxy(req, resp)",
							" function* config(req, resp)",
							" function* file(req, resp)",
							"dir =>",
							"dir =>",
							"f =>",
							"file =>",
							" function* uploads(req, resp)",
							" function* files(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file, rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"({ name }) =>",
							"onConnect(ws, req)",
							".sendCommand = function(data)",
							"onClose(ws, reason)",
							"onHttp(ws, req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name, file)",
							"f = x =>",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"onFd(fd, rd, wr)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"AQAAAAAAAAAAAAAAvQYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					4,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AwAAAAAAAAAAAAAAAAAAAAAAAAC9BgAAICB2YWx1ZSA9PgogICAobGV2ZWwsIG1lc3NhZ2UpID0+CkV4ZWNUb29sKGNtZCwgLi4uYXJncykKR2V0TWltZShmaWxlKQpNYWtlVVVJRCA9IChybmcgPSBNYXRoLnJhbmRvbSkgPT4KICBuID0+CiAgZGQgPT4KICBkID0+CkdldERpcihkaXIpCiAgbiA9PgpEYXRlU3RyKGRhdGUpCk1vZGVTdHIobW9kZSkKSFRNTFBhZ2UgPSAoeyB0aXRsZSwgc3R5bGUsIHNjcmlwdHMgPSBbXSwgY2hpbGRyZW4sIC4uLnByb3BzIH0pID0+CiAgc2NyaXB0ID0+CkZpbHRlckZvcm0gPSAoeyAuLi5wcm9wcyB9KSA9PgpIVE1MVGFibGUgPSAoeyByb3dzLCAuLi5wcm9wcyB9KSA9PgpIVE1MVGFibGVSb3cgPSAoeyBjb2x1bW5zLCAuLi5wcm9wcyB9KSA9PgpIVE1MVGFibGVDb2x1bW4gPSAoeyBjb2x1bW5zLCBjaGlsZHJlbiwgdGFnID0gJ3RkJywgLi4ucHJvcHMgfSkgPT4KRmlsZUxpbmsgPSAoeyBmaWxlLCAuLi5wcm9wcyB9KSA9PgpGaWxlT2JqZWN0ID0gKHsgZmlsZSwgc3RhdCA9IHt9LCAuLi5wcm9wcyB9KSA9PgpGaWxlVGFibGUgPSAoeyBmaWxlcywgLi4ucHJvcHMgfSkgPT4KKGEsIGIpID0+CiAgZmllbGQgPT4KICBmaWxlID0+ClJlYWRFeGl2MihmaWxlKQooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgooYSwgYikgPT4KKFtrLCB2XSkgPT4KUmVhZEV4aWZ0b29sKGZpbGUpCiAgbCA9PgogIGxpbmUgPT4KKFtsaW5lLCBpZHhdKSA9PgpIZWlmQ29udmVydChzcmMsIGRzdCwgcXVhbGl0eSA9IDEwMCkKTWFnaWNrUmVzaXplKHNyYywgZHN0LCByb3RhdGUgPSAwLCB3aWR0aCwgaGVpZ2h0KQogIG1haW4oLi4uYXJncykKICAgKGEsIHYpID0+CiAgICh2LCBwdiwgbykgPT4KICAgKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSBhcmcgPT4KICAuY2xlYW51cCA9ICgpID0+CiAgICguLi5hcmdzKSA9PgooKSA9PgogIHB1dHMocykKKCkgPT4KUGFyc2VCb2R5KGdlbikKICAuY3JlYXRlV1MgPSAodXJsLCBjYWxsYmFja3MsIGxpc3RlbikgPT4KICAub3V0ID0gcyA9PgogIHRlc3QocmVxLCByZXNwKQogIHByb3h5KHJlcSwgcmVzcCkKICBjb25maWcocmVxLCByZXNwKQogIGZpbGUocmVxLCByZXNwKQogIGRpciA9PgogIGRpciA9PgogIGYgPT4KICBmaWxlID0+CiAgdXBsb2FkcyhyZXEsIHJlc3ApCiAgZmlsZXMocmVxLCByZXNwKQogICBuID0+CiAgbiA9PgogIG4gPT4KKGEsIGIpID0+CiAgbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CihbZmlsZSwgcmVsXSkgPT4KKGFjYywgW2ZpbGUsIHN0XSkgPT4KICBzdHJpbmcoYSwgYikKICBudW1iZXIoYSwgYikKKFtuYW1lLCBvYmpdKSA9PgooeyBuYW1lIH0pID0+CiAgb25Db25uZWN0KHdzLCByZXEpCiAgLnNlbmRDb21tYW5kID0gZnVuY3Rpb24oZGF0YSkKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25IdHRwKHdzLCByZXEsIHJlc3ApCiAgb25PcGVuKG5hbWUsIGZpbGVuYW1lKQogIG9uQ29udGVudChuYW1lLCBkYXRhKQogIG9uQ2xvc2UobmFtZSwgZmlsZSkKICBmID0geCA9PgogIG9uRmluYWxpemUoKQogICAobWF0Y2gsIHAxLCBwMCwgcDIsIHAzLCBvZmZzZXQpID0+CiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBnZXQgY29ubmVjdGlvbnMoKQogIGdldCBieV91dWlkKCkKICB1dWlkKGRhdGEpCiAgb25GZChmZCwgcmQsIHdyKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgcXVpdCh3aHkpAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					5,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1591,
								1599
							],
							[
								1615,
								1635
							],
							[
								2075,
								2106
							],
							[
								2432,
								2454
							],
							[
								2674,
								2707
							],
							[
								2729,
								2733
							],
							[
								3109,
								3114
							],
							[
								3162,
								3166
							],
							[
								3187,
								3207
							],
							[
								3261,
								3265
							],
							[
								3335,
								3357
							],
							[
								3551,
								3573
							],
							[
								3996,
								4062
							],
							[
								4408,
								4417
							],
							[
								4522,
								4552
							],
							[
								4907,
								4942
							],
							[
								4974,
								5015
							],
							[
								5047,
								5113
							],
							[
								5146,
								5180
							],
							[
								5251,
								5298
							],
							[
								5834,
								5870
							],
							[
								5983,
								5992
							],
							[
								6228,
								6236
							],
							[
								6342,
								6349
							],
							[
								6399,
								6423
							],
							[
								6804,
								6815
							],
							[
								6905,
								6916
							],
							[
								6980,
								6991
							],
							[
								7045,
								7054
							],
							[
								7092,
								7103
							],
							[
								7191,
								7218
							],
							[
								7356,
								7360
							],
							[
								7384,
								7391
							],
							[
								7424,
								7440
							],
							[
								7569,
								7614
							],
							[
								7830,
								7888
							],
							[
								8200,
								8222
							],
							[
								8617,
								8627
							],
							[
								8871,
								8885
							],
							[
								9838,
								9862
							],
							[
								9988,
								9992
							],
							[
								10084,
								10098
							],
							[
								10198,
								10214
							],
							[
								10568,
								10581
							],
							[
								10599,
								10604
							],
							[
								10686,
								10693
							],
							[
								10721,
								10726
							],
							[
								10848,
								10873
							],
							[
								11048,
								11087
							],
							[
								11164,
								11175
							],
							[
								12741,
								12772
							],
							[
								13427,
								13460
							],
							[
								13732,
								13767
							],
							[
								13852,
								13885
							],
							[
								14645,
								14651
							],
							[
								14821,
								14827
							],
							[
								15597,
								15601
							],
							[
								16036,
								16043
							],
							[
								16436,
								16472
							],
							[
								16876,
								16910
							],
							[
								17804,
								17809
							],
							[
								18575,
								18579
							],
							[
								18673,
								18677
							],
							[
								18797,
								18806
							],
							[
								18936,
								18943
							],
							[
								19224,
								19231
							],
							[
								19312,
								19319
							],
							[
								19383,
								19399
							],
							[
								19464,
								19484
							],
							[
								20184,
								20196
							],
							[
								20295,
								20307
							],
							[
								20509,
								20525
							],
							[
								20681,
								20694
							],
							[
								20997,
								21015
							],
							[
								21151,
								21180
							],
							[
								21673,
								21692
							],
							[
								22106,
								22127
							],
							[
								22905,
								22927
							],
							[
								23400,
								23421
							],
							[
								23972,
								23991
							],
							[
								24425,
								24433
							],
							[
								27134,
								27146
							],
							[
								28847,
								28882
							],
							[
								29496,
								29515
							],
							[
								29623,
								29639
							],
							[
								29774,
								29791
							],
							[
								29836,
								29849
							],
							[
								29885,
								29895
							],
							[
								30336,
								30352
							],
							[
								30441,
								30460
							],
							[
								30471,
								30490
							],
							[
								30516,
								30536
							]
						],
						"symlist":
						[
							"value =>",
							" (level, message) =>",
							"function ExecTool(cmd, ...args)",
							"function GetMime(file)",
							"MakeUUID = (rng = Math.random) =>",
							"n =>",
							"dd =>",
							"d =>",
							"function GetDir(dir)",
							"n =>",
							"function DateStr(date)",
							"function ModeStr(mode)",
							"HTMLPage = ({ title, style, scripts = [], children, ...props }) =>",
							"script =>",
							"FilterForm = ({ ...props }) =>",
							"HTMLTable = ({ rows, ...props }) =>",
							"HTMLTableRow = ({ columns, ...props }) =>",
							"HTMLTableColumn = ({ columns, children, tag = 'td', ...props }) =>",
							"FileLink = ({ file, ...props }) =>",
							"FileObject = ({ file, stat = {}, ...props }) =>",
							"FileTable = ({ files, ...props }) =>",
							"(a, b) =>",
							"field =>",
							"file =>",
							"function ReadExiv2(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function ReadExiftool(file)",
							"l =>",
							"line =>",
							"([line, idx]) =>",
							"function HeifConvert(src, dst, quality = 100)",
							"function MagickResize(src, dst, rotate = 0, width, height)",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							" function ParseBody(gen)",
							".createWS = (url, callbacks, listen) =>",
							".out = s =>",
							"async function* test(req, resp)",
							" function proxy(req, resp)",
							" function* config(req, resp)",
							" function* file(req, resp)",
							"dir =>",
							"dir =>",
							"f =>",
							"file =>",
							" function* uploads(req, resp)",
							" function* files(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file, rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"({ name }) =>",
							"onConnect(ws, req)",
							".sendCommand = function(data)",
							"onClose(ws, reason)",
							"onHttp(ws, req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name, file)",
							"f = x =>",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"onFd(fd, rd, wr)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"AQAAAAAAAAAAAAAAvQYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					6,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1591,
								1599
							],
							[
								1615,
								1635
							],
							[
								2075,
								2106
							],
							[
								2432,
								2454
							],
							[
								2674,
								2707
							],
							[
								2729,
								2733
							],
							[
								3109,
								3114
							],
							[
								3162,
								3166
							],
							[
								3187,
								3207
							],
							[
								3261,
								3265
							],
							[
								3335,
								3357
							],
							[
								3551,
								3573
							],
							[
								3996,
								4062
							],
							[
								4408,
								4417
							],
							[
								4522,
								4552
							],
							[
								4907,
								4942
							],
							[
								4974,
								5015
							],
							[
								5047,
								5113
							],
							[
								5146,
								5180
							],
							[
								5251,
								5298
							],
							[
								5834,
								5870
							],
							[
								5983,
								5992
							],
							[
								6228,
								6236
							],
							[
								6342,
								6349
							],
							[
								6399,
								6423
							],
							[
								6804,
								6815
							],
							[
								6905,
								6916
							],
							[
								6980,
								6991
							],
							[
								7045,
								7054
							],
							[
								7092,
								7103
							],
							[
								7191,
								7218
							],
							[
								7356,
								7360
							],
							[
								7384,
								7391
							],
							[
								7424,
								7440
							],
							[
								7569,
								7614
							],
							[
								7830,
								7888
							],
							[
								8200,
								8222
							],
							[
								8617,
								8627
							],
							[
								8871,
								8885
							],
							[
								9838,
								9862
							],
							[
								9988,
								9992
							],
							[
								10084,
								10098
							],
							[
								10198,
								10214
							],
							[
								10568,
								10581
							],
							[
								10599,
								10604
							],
							[
								10686,
								10693
							],
							[
								10721,
								10726
							],
							[
								10848,
								10873
							],
							[
								11048,
								11087
							],
							[
								11164,
								11175
							],
							[
								12741,
								12772
							],
							[
								13427,
								13460
							],
							[
								13732,
								13767
							],
							[
								13852,
								13885
							],
							[
								14645,
								14651
							],
							[
								14821,
								14827
							],
							[
								15597,
								15601
							],
							[
								16036,
								16043
							],
							[
								16436,
								16472
							],
							[
								16876,
								16910
							],
							[
								17804,
								17809
							],
							[
								18575,
								18579
							],
							[
								18673,
								18677
							],
							[
								18797,
								18806
							],
							[
								18936,
								18943
							],
							[
								19224,
								19231
							],
							[
								19312,
								19319
							],
							[
								19383,
								19399
							],
							[
								19464,
								19484
							],
							[
								20184,
								20196
							],
							[
								20295,
								20307
							],
							[
								20509,
								20525
							],
							[
								20681,
								20694
							],
							[
								20997,
								21015
							],
							[
								21151,
								21180
							],
							[
								21673,
								21692
							],
							[
								22106,
								22127
							],
							[
								22965,
								22987
							],
							[
								23460,
								23481
							],
							[
								24032,
								24051
							],
							[
								24485,
								24493
							],
							[
								27194,
								27206
							],
							[
								28907,
								28942
							],
							[
								29556,
								29575
							],
							[
								29683,
								29699
							],
							[
								29834,
								29851
							],
							[
								29896,
								29909
							],
							[
								29945,
								29955
							],
							[
								30396,
								30412
							],
							[
								30501,
								30520
							],
							[
								30531,
								30550
							],
							[
								30576,
								30596
							]
						],
						"symlist":
						[
							"value =>",
							" (level, message) =>",
							"function ExecTool(cmd, ...args)",
							"function GetMime(file)",
							"MakeUUID = (rng = Math.random) =>",
							"n =>",
							"dd =>",
							"d =>",
							"function GetDir(dir)",
							"n =>",
							"function DateStr(date)",
							"function ModeStr(mode)",
							"HTMLPage = ({ title, style, scripts = [], children, ...props }) =>",
							"script =>",
							"FilterForm = ({ ...props }) =>",
							"HTMLTable = ({ rows, ...props }) =>",
							"HTMLTableRow = ({ columns, ...props }) =>",
							"HTMLTableColumn = ({ columns, children, tag = 'td', ...props }) =>",
							"FileLink = ({ file, ...props }) =>",
							"FileObject = ({ file, stat = {}, ...props }) =>",
							"FileTable = ({ files, ...props }) =>",
							"(a, b) =>",
							"field =>",
							"file =>",
							"function ReadExiv2(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function ReadExiftool(file)",
							"l =>",
							"line =>",
							"([line, idx]) =>",
							"function HeifConvert(src, dst, quality = 100)",
							"function MagickResize(src, dst, rotate = 0, width, height)",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							" function ParseBody(gen)",
							".createWS = (url, callbacks, listen) =>",
							".out = s =>",
							"async function* test(req, resp)",
							" function proxy(req, resp)",
							" function* config(req, resp)",
							" function* file(req, resp)",
							"dir =>",
							"dir =>",
							"f =>",
							"file =>",
							" function* uploads(req, resp)",
							" function* files(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file, rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"({ name }) =>",
							"onConnect(ws, req)",
							".sendCommand = function(data)",
							"onClose(ws, reason)",
							"onHttp(ws, req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name, file)",
							"f = x =>",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"onFd(fd, rd, wr)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAAC9BgAAICB2YWx1ZSA9PgogICAobGV2ZWwsIG1lc3NhZ2UpID0+CkV4ZWNUb29sKGNtZCwgLi4uYXJncykKR2V0TWltZShmaWxlKQpNYWtlVVVJRCA9IChybmcgPSBNYXRoLnJhbmRvbSkgPT4KICBuID0+CiAgZGQgPT4KICBkID0+CkdldERpcihkaXIpCiAgbiA9PgpEYXRlU3RyKGRhdGUpCk1vZGVTdHIobW9kZSkKSFRNTFBhZ2UgPSAoeyB0aXRsZSwgc3R5bGUsIHNjcmlwdHMgPSBbXSwgY2hpbGRyZW4sIC4uLnByb3BzIH0pID0+CiAgc2NyaXB0ID0+CkZpbHRlckZvcm0gPSAoeyAuLi5wcm9wcyB9KSA9PgpIVE1MVGFibGUgPSAoeyByb3dzLCAuLi5wcm9wcyB9KSA9PgpIVE1MVGFibGVSb3cgPSAoeyBjb2x1bW5zLCAuLi5wcm9wcyB9KSA9PgpIVE1MVGFibGVDb2x1bW4gPSAoeyBjb2x1bW5zLCBjaGlsZHJlbiwgdGFnID0gJ3RkJywgLi4ucHJvcHMgfSkgPT4KRmlsZUxpbmsgPSAoeyBmaWxlLCAuLi5wcm9wcyB9KSA9PgpGaWxlT2JqZWN0ID0gKHsgZmlsZSwgc3RhdCA9IHt9LCAuLi5wcm9wcyB9KSA9PgpGaWxlVGFibGUgPSAoeyBmaWxlcywgLi4ucHJvcHMgfSkgPT4KKGEsIGIpID0+CiAgZmllbGQgPT4KICBmaWxlID0+ClJlYWRFeGl2MihmaWxlKQooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgooYSwgYikgPT4KKFtrLCB2XSkgPT4KUmVhZEV4aWZ0b29sKGZpbGUpCiAgbCA9PgogIGxpbmUgPT4KKFtsaW5lLCBpZHhdKSA9PgpIZWlmQ29udmVydChzcmMsIGRzdCwgcXVhbGl0eSA9IDEwMCkKTWFnaWNrUmVzaXplKHNyYywgZHN0LCByb3RhdGUgPSAwLCB3aWR0aCwgaGVpZ2h0KQogIG1haW4oLi4uYXJncykKICAgKGEsIHYpID0+CiAgICh2LCBwdiwgbykgPT4KICAgKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSBhcmcgPT4KICAuY2xlYW51cCA9ICgpID0+CiAgICguLi5hcmdzKSA9PgooKSA9PgogIHB1dHMocykKKCkgPT4KUGFyc2VCb2R5KGdlbikKICAuY3JlYXRlV1MgPSAodXJsLCBjYWxsYmFja3MsIGxpc3RlbikgPT4KICAub3V0ID0gcyA9PgogIHRlc3QocmVxLCByZXNwKQogIHByb3h5KHJlcSwgcmVzcCkKICBjb25maWcocmVxLCByZXNwKQogIGZpbGUocmVxLCByZXNwKQogIGRpciA9PgogIGRpciA9PgogIGYgPT4KICBmaWxlID0+CiAgdXBsb2FkcyhyZXEsIHJlc3ApCiAgZmlsZXMocmVxLCByZXNwKQogICBuID0+CiAgbiA9PgogIG4gPT4KKGEsIGIpID0+CiAgbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CihbZmlsZSwgcmVsXSkgPT4KKGFjYywgW2ZpbGUsIHN0XSkgPT4KICBzdHJpbmcoYSwgYikKICBudW1iZXIoYSwgYikKKFtuYW1lLCBvYmpdKSA9PgooeyBuYW1lIH0pID0+CiAgb25Db25uZWN0KHdzLCByZXEpCiAgLnNlbmRDb21tYW5kID0gZnVuY3Rpb24oZGF0YSkKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25IdHRwKHdzLCByZXEsIHJlc3ApCiAgb25PcGVuKG5hbWUsIGZpbGVuYW1lKQogIG9uQ29udGVudChuYW1lLCBkYXRhKQogIG9uQ2xvc2UobmFtZSwgZmlsZSkKICBmID0geCA9PgogIG9uRmluYWxpemUoKQogICAobWF0Y2gsIHAxLCBwMCwgcDIsIHAzLCBvZmZzZXQpID0+CiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBnZXQgY29ubmVjdGlvbnMoKQogIGdldCBieV91dWlkKCkKICB1dWlkKGRhdGEpCiAgb25GZChmZCwgcmQsIHdyKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgcXVpdCh3aHkpAAAAAAAAAAC9BgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvQYAACAgdmFsdWUgPT4KICAgKGxldmVsLCBtZXNzYWdlKSA9PgpFeGVjVG9vbChjbWQsIC4uLmFyZ3MpCkdldE1pbWUoZmlsZSkKTWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+CiAgbiA9PgogIGRkID0+CiAgZCA9PgpHZXREaXIoZGlyKQogIG4gPT4KRGF0ZVN0cihkYXRlKQpNb2RlU3RyKG1vZGUpCkhUTUxQYWdlID0gKHsgdGl0bGUsIHN0eWxlLCBzY3JpcHRzID0gW10sIGNoaWxkcmVuLCAuLi5wcm9wcyB9KSA9PgogIHNjcmlwdCA9PgpGaWx0ZXJGb3JtID0gKHsgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlID0gKHsgcm93cywgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlUm93ID0gKHsgY29sdW1ucywgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlQ29sdW1uID0gKHsgY29sdW1ucywgY2hpbGRyZW4sIHRhZyA9ICd0ZCcsIC4uLnByb3BzIH0pID0+CkZpbGVMaW5rID0gKHsgZmlsZSwgLi4ucHJvcHMgfSkgPT4KRmlsZU9iamVjdCA9ICh7IGZpbGUsIHN0YXQgPSB7fSwgLi4ucHJvcHMgfSkgPT4KRmlsZVRhYmxlID0gKHsgZmlsZXMsIC4uLnByb3BzIH0pID0+CihhLCBiKSA9PgogIGZpZWxkID0+CiAgZmlsZSA9PgpSZWFkRXhpdjIoZmlsZSkKKFtrLCB2XSkgPT4KKFtrLCB2XSkgPT4KKFtrLCB2XSkgPT4KKGEsIGIpID0+Cihbaywgdl0pID0+ClJlYWRFeGlmdG9vbChmaWxlKQogIGwgPT4KICBsaW5lID0+CihbbGluZSwgaWR4XSkgPT4KSGVpZkNvbnZlcnQoc3JjLCBkc3QsIHF1YWxpdHkgPSAxMDApCk1hZ2lja1Jlc2l6ZShzcmMsIGRzdCwgcm90YXRlID0gMCwgd2lkdGgsIGhlaWdodCkKICBtYWluKC4uLmFyZ3MpCiAgIChhLCB2KSA9PgogICAodiwgcHYsIG8pID0+CiAgIChtb2R1bGUsIC4uLmFyZ3MpID0+CiAgbSA9PgogIC5zaG93ID0gYXJnID0+CiAgLmNsZWFudXAgPSAoKSA9PgogICAoLi4uYXJncykgPT4KKCkgPT4KICBwdXRzKHMpCigpID0+ClBhcnNlQm9keShnZW4pCiAgLmNyZWF0ZVdTID0gKHVybCwgY2FsbGJhY2tzLCBsaXN0ZW4pID0+CiAgLm91dCA9IHMgPT4KICB0ZXN0KHJlcSwgcmVzcCkKICBwcm94eShyZXEsIHJlc3ApCiAgY29uZmlnKHJlcSwgcmVzcCkKICBmaWxlKHJlcSwgcmVzcCkKICBkaXIgPT4KICBkaXIgPT4KICBmID0+CiAgZmlsZSA9PgogIHVwbG9hZHMocmVxLCByZXNwKQogIGZpbGVzKHJlcSwgcmVzcCkKICAgbiA9PgogIG4gPT4KICBuID0+CihhLCBiKSA9PgogIG5hbWUgPT4KICBmaWxlID0+CiAgZmlsZSA9PgooW2ZpbGUsIHJlbF0pID0+CihhY2MsIFtmaWxlLCBzdF0pID0+CiAgc3RyaW5nKGEsIGIpCiAgbnVtYmVyKGEsIGIpCihbbmFtZSwgb2JqXSkgPT4KKHsgbmFtZSB9KSA9PgogIG9uQ29ubmVjdCh3cywgcmVxKQogIC5zZW5kQ29tbWFuZCA9IGZ1bmN0aW9uKGRhdGEpCiAgb25DbG9zZSh3cywgcmVhc29uKQogIG9uSHR0cCh3cywgcmVxLCByZXNwKQogIG9uT3BlbihuYW1lLCBmaWxlbmFtZSkKICBvbkNvbnRlbnQobmFtZSwgZGF0YSkKICBvbkNsb3NlKG5hbWUsIGZpbGUpCiAgZiA9IHggPT4KICBvbkZpbmFsaXplKCkKICAgKG1hdGNoLCBwMSwgcDAsIHAyLCBwMywgb2Zmc2V0KSA9PgogIG9uTWVzc2FnZSh3cywgZGF0YSkKICBvbkZkKGZkLCByZCwgd3IpCiAgZ2V0IGNvbm5lY3Rpb25zKCkKICBnZXQgYnlfdXVpZCgpCiAgdXVpZChkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIHF1aXQod2h5KQAAAAAAAAAAvQYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					7,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1591,
								1599
							],
							[
								1615,
								1635
							],
							[
								2075,
								2106
							],
							[
								2432,
								2454
							],
							[
								2674,
								2707
							],
							[
								2729,
								2733
							],
							[
								3109,
								3114
							],
							[
								3162,
								3166
							],
							[
								3187,
								3207
							],
							[
								3261,
								3265
							],
							[
								3335,
								3357
							],
							[
								3551,
								3573
							],
							[
								3996,
								4062
							],
							[
								4408,
								4417
							],
							[
								4522,
								4552
							],
							[
								4907,
								4942
							],
							[
								4974,
								5015
							],
							[
								5047,
								5113
							],
							[
								5146,
								5180
							],
							[
								5251,
								5298
							],
							[
								5834,
								5870
							],
							[
								5983,
								5992
							],
							[
								6228,
								6236
							],
							[
								6342,
								6349
							],
							[
								6399,
								6423
							],
							[
								6804,
								6815
							],
							[
								6905,
								6916
							],
							[
								6980,
								6991
							],
							[
								7045,
								7054
							],
							[
								7092,
								7103
							],
							[
								7191,
								7218
							],
							[
								7356,
								7360
							],
							[
								7384,
								7391
							],
							[
								7424,
								7440
							],
							[
								7569,
								7614
							],
							[
								7830,
								7888
							],
							[
								8200,
								8222
							],
							[
								8617,
								8627
							],
							[
								8871,
								8885
							],
							[
								9838,
								9862
							],
							[
								9988,
								9992
							],
							[
								10084,
								10098
							],
							[
								10198,
								10214
							],
							[
								10568,
								10581
							],
							[
								10599,
								10604
							],
							[
								10686,
								10693
							],
							[
								10721,
								10726
							],
							[
								10848,
								10873
							],
							[
								11048,
								11087
							],
							[
								11164,
								11175
							],
							[
								12741,
								12772
							],
							[
								13427,
								13460
							],
							[
								13732,
								13767
							],
							[
								13852,
								13885
							],
							[
								14645,
								14651
							],
							[
								14821,
								14827
							],
							[
								15597,
								15601
							],
							[
								16036,
								16043
							],
							[
								16436,
								16472
							],
							[
								16876,
								16910
							],
							[
								17804,
								17809
							],
							[
								18575,
								18579
							],
							[
								18673,
								18677
							],
							[
								18797,
								18806
							],
							[
								18936,
								18943
							],
							[
								19224,
								19231
							],
							[
								19312,
								19319
							],
							[
								19383,
								19399
							],
							[
								19464,
								19484
							],
							[
								20184,
								20196
							],
							[
								20295,
								20307
							],
							[
								20509,
								20525
							],
							[
								20681,
								20694
							],
							[
								20997,
								21015
							],
							[
								21151,
								21180
							],
							[
								21673,
								21692
							],
							[
								22106,
								22127
							],
							[
								22968,
								22990
							],
							[
								23463,
								23484
							],
							[
								24035,
								24054
							],
							[
								24488,
								24496
							],
							[
								27197,
								27209
							],
							[
								28910,
								28945
							],
							[
								29559,
								29578
							],
							[
								29686,
								29702
							],
							[
								29837,
								29854
							],
							[
								29899,
								29912
							],
							[
								29948,
								29958
							],
							[
								30399,
								30415
							],
							[
								30504,
								30523
							],
							[
								30534,
								30553
							],
							[
								30579,
								30599
							]
						],
						"symlist":
						[
							"value =>",
							" (level, message) =>",
							"function ExecTool(cmd, ...args)",
							"function GetMime(file)",
							"MakeUUID = (rng = Math.random) =>",
							"n =>",
							"dd =>",
							"d =>",
							"function GetDir(dir)",
							"n =>",
							"function DateStr(date)",
							"function ModeStr(mode)",
							"HTMLPage = ({ title, style, scripts = [], children, ...props }) =>",
							"script =>",
							"FilterForm = ({ ...props }) =>",
							"HTMLTable = ({ rows, ...props }) =>",
							"HTMLTableRow = ({ columns, ...props }) =>",
							"HTMLTableColumn = ({ columns, children, tag = 'td', ...props }) =>",
							"FileLink = ({ file, ...props }) =>",
							"FileObject = ({ file, stat = {}, ...props }) =>",
							"FileTable = ({ files, ...props }) =>",
							"(a, b) =>",
							"field =>",
							"file =>",
							"function ReadExiv2(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function ReadExiftool(file)",
							"l =>",
							"line =>",
							"([line, idx]) =>",
							"function HeifConvert(src, dst, quality = 100)",
							"function MagickResize(src, dst, rotate = 0, width, height)",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							" function ParseBody(gen)",
							".createWS = (url, callbacks, listen) =>",
							".out = s =>",
							"async function* test(req, resp)",
							" function proxy(req, resp)",
							" function* config(req, resp)",
							" function* file(req, resp)",
							"dir =>",
							"dir =>",
							"f =>",
							"file =>",
							" function* uploads(req, resp)",
							" function* files(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file, rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"({ name }) =>",
							"onConnect(ws, req)",
							".sendCommand = function(data)",
							"onClose(ws, reason)",
							"onHttp(ws, req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name, file)",
							"f = x =>",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"onFd(fd, rd, wr)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC9BgAAICB2YWx1ZSA9PgogICAobGV2ZWwsIG1lc3NhZ2UpID0+CkV4ZWNUb29sKGNtZCwgLi4uYXJncykKR2V0TWltZShmaWxlKQpNYWtlVVVJRCA9IChybmcgPSBNYXRoLnJhbmRvbSkgPT4KICBuID0+CiAgZGQgPT4KICBkID0+CkdldERpcihkaXIpCiAgbiA9PgpEYXRlU3RyKGRhdGUpCk1vZGVTdHIobW9kZSkKSFRNTFBhZ2UgPSAoeyB0aXRsZSwgc3R5bGUsIHNjcmlwdHMgPSBbXSwgY2hpbGRyZW4sIC4uLnByb3BzIH0pID0+CiAgc2NyaXB0ID0+CkZpbHRlckZvcm0gPSAoeyAuLi5wcm9wcyB9KSA9PgpIVE1MVGFibGUgPSAoeyByb3dzLCAuLi5wcm9wcyB9KSA9PgpIVE1MVGFibGVSb3cgPSAoeyBjb2x1bW5zLCAuLi5wcm9wcyB9KSA9PgpIVE1MVGFibGVDb2x1bW4gPSAoeyBjb2x1bW5zLCBjaGlsZHJlbiwgdGFnID0gJ3RkJywgLi4ucHJvcHMgfSkgPT4KRmlsZUxpbmsgPSAoeyBmaWxlLCAuLi5wcm9wcyB9KSA9PgpGaWxlT2JqZWN0ID0gKHsgZmlsZSwgc3RhdCA9IHt9LCAuLi5wcm9wcyB9KSA9PgpGaWxlVGFibGUgPSAoeyBmaWxlcywgLi4ucHJvcHMgfSkgPT4KKGEsIGIpID0+CiAgZmllbGQgPT4KICBmaWxlID0+ClJlYWRFeGl2MihmaWxlKQooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgooYSwgYikgPT4KKFtrLCB2XSkgPT4KUmVhZEV4aWZ0b29sKGZpbGUpCiAgbCA9PgogIGxpbmUgPT4KKFtsaW5lLCBpZHhdKSA9PgpIZWlmQ29udmVydChzcmMsIGRzdCwgcXVhbGl0eSA9IDEwMCkKTWFnaWNrUmVzaXplKHNyYywgZHN0LCByb3RhdGUgPSAwLCB3aWR0aCwgaGVpZ2h0KQogIG1haW4oLi4uYXJncykKICAgKGEsIHYpID0+CiAgICh2LCBwdiwgbykgPT4KICAgKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSBhcmcgPT4KICAuY2xlYW51cCA9ICgpID0+CiAgICguLi5hcmdzKSA9PgooKSA9PgogIHB1dHMocykKKCkgPT4KUGFyc2VCb2R5KGdlbikKICAuY3JlYXRlV1MgPSAodXJsLCBjYWxsYmFja3MsIGxpc3RlbikgPT4KICAub3V0ID0gcyA9PgogIHRlc3QocmVxLCByZXNwKQogIHByb3h5KHJlcSwgcmVzcCkKICBjb25maWcocmVxLCByZXNwKQogIGZpbGUocmVxLCByZXNwKQogIGRpciA9PgogIGRpciA9PgogIGYgPT4KICBmaWxlID0+CiAgdXBsb2FkcyhyZXEsIHJlc3ApCiAgZmlsZXMocmVxLCByZXNwKQogICBuID0+CiAgbiA9PgogIG4gPT4KKGEsIGIpID0+CiAgbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CihbZmlsZSwgcmVsXSkgPT4KKGFjYywgW2ZpbGUsIHN0XSkgPT4KICBzdHJpbmcoYSwgYikKICBudW1iZXIoYSwgYikKKFtuYW1lLCBvYmpdKSA9PgooeyBuYW1lIH0pID0+CiAgb25Db25uZWN0KHdzLCByZXEpCiAgLnNlbmRDb21tYW5kID0gZnVuY3Rpb24oZGF0YSkKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25IdHRwKHdzLCByZXEsIHJlc3ApCiAgb25PcGVuKG5hbWUsIGZpbGVuYW1lKQogIG9uQ29udGVudChuYW1lLCBkYXRhKQogIG9uQ2xvc2UobmFtZSwgZmlsZSkKICBmID0geCA9PgogIG9uRmluYWxpemUoKQogICAobWF0Y2gsIHAxLCBwMCwgcDIsIHAzLCBvZmZzZXQpID0+CiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBnZXQgY29ubmVjdGlvbnMoKQogIGdldCBieV91dWlkKCkKICB1dWlkKGRhdGEpCiAgb25GZChmZCwgcmQsIHdyKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgcXVpdCh3aHkpAAAAAAAAAAC9BgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					8,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1591,
								1599
							],
							[
								1615,
								1635
							],
							[
								2075,
								2106
							],
							[
								2432,
								2454
							],
							[
								2674,
								2707
							],
							[
								2729,
								2733
							],
							[
								3109,
								3114
							],
							[
								3162,
								3166
							],
							[
								3187,
								3207
							],
							[
								3261,
								3265
							],
							[
								3335,
								3357
							],
							[
								3551,
								3573
							],
							[
								3996,
								4062
							],
							[
								4408,
								4417
							],
							[
								4522,
								4552
							],
							[
								4907,
								4942
							],
							[
								4974,
								5015
							],
							[
								5047,
								5113
							],
							[
								5146,
								5180
							],
							[
								5251,
								5298
							],
							[
								5834,
								5870
							],
							[
								5983,
								5992
							],
							[
								6228,
								6236
							],
							[
								6342,
								6349
							],
							[
								6399,
								6423
							],
							[
								6804,
								6815
							],
							[
								6905,
								6916
							],
							[
								6980,
								6991
							],
							[
								7045,
								7054
							],
							[
								7092,
								7103
							],
							[
								7191,
								7218
							],
							[
								7356,
								7360
							],
							[
								7384,
								7391
							],
							[
								7424,
								7440
							],
							[
								7569,
								7614
							],
							[
								7830,
								7888
							],
							[
								8200,
								8222
							],
							[
								8617,
								8627
							],
							[
								8871,
								8885
							],
							[
								9838,
								9862
							],
							[
								9988,
								9992
							],
							[
								10084,
								10098
							],
							[
								10198,
								10214
							],
							[
								10568,
								10581
							],
							[
								10599,
								10604
							],
							[
								10686,
								10693
							],
							[
								10721,
								10726
							],
							[
								10848,
								10873
							],
							[
								11048,
								11087
							],
							[
								11164,
								11175
							],
							[
								12741,
								12772
							],
							[
								13427,
								13460
							],
							[
								13732,
								13767
							],
							[
								13852,
								13885
							],
							[
								14645,
								14651
							],
							[
								14821,
								14827
							],
							[
								15597,
								15601
							],
							[
								16036,
								16043
							],
							[
								16436,
								16472
							],
							[
								16876,
								16910
							],
							[
								17804,
								17809
							],
							[
								18575,
								18579
							],
							[
								18673,
								18677
							],
							[
								18797,
								18806
							],
							[
								18936,
								18943
							],
							[
								19224,
								19231
							],
							[
								19312,
								19319
							],
							[
								19383,
								19399
							],
							[
								19464,
								19484
							],
							[
								20184,
								20196
							],
							[
								20295,
								20307
							],
							[
								20509,
								20525
							],
							[
								20681,
								20694
							],
							[
								20997,
								21015
							],
							[
								21151,
								21180
							],
							[
								21673,
								21692
							],
							[
								22106,
								22127
							],
							[
								22983,
								23005
							],
							[
								23478,
								23499
							],
							[
								24050,
								24069
							],
							[
								24503,
								24511
							],
							[
								27212,
								27224
							],
							[
								28925,
								28960
							],
							[
								29574,
								29593
							],
							[
								29701,
								29717
							],
							[
								29852,
								29869
							],
							[
								29914,
								29927
							],
							[
								29963,
								29973
							],
							[
								30414,
								30430
							],
							[
								30519,
								30538
							],
							[
								30549,
								30568
							],
							[
								30594,
								30614
							]
						],
						"symlist":
						[
							"value =>",
							" (level, message) =>",
							"function ExecTool(cmd, ...args)",
							"function GetMime(file)",
							"MakeUUID = (rng = Math.random) =>",
							"n =>",
							"dd =>",
							"d =>",
							"function GetDir(dir)",
							"n =>",
							"function DateStr(date)",
							"function ModeStr(mode)",
							"HTMLPage = ({ title, style, scripts = [], children, ...props }) =>",
							"script =>",
							"FilterForm = ({ ...props }) =>",
							"HTMLTable = ({ rows, ...props }) =>",
							"HTMLTableRow = ({ columns, ...props }) =>",
							"HTMLTableColumn = ({ columns, children, tag = 'td', ...props }) =>",
							"FileLink = ({ file, ...props }) =>",
							"FileObject = ({ file, stat = {}, ...props }) =>",
							"FileTable = ({ files, ...props }) =>",
							"(a, b) =>",
							"field =>",
							"file =>",
							"function ReadExiv2(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function ReadExiftool(file)",
							"l =>",
							"line =>",
							"([line, idx]) =>",
							"function HeifConvert(src, dst, quality = 100)",
							"function MagickResize(src, dst, rotate = 0, width, height)",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							" function ParseBody(gen)",
							".createWS = (url, callbacks, listen) =>",
							".out = s =>",
							"async function* test(req, resp)",
							" function proxy(req, resp)",
							" function* config(req, resp)",
							" function* file(req, resp)",
							"dir =>",
							"dir =>",
							"f =>",
							"file =>",
							" function* uploads(req, resp)",
							" function* files(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file, rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"({ name }) =>",
							"onConnect(ws, req)",
							".sendCommand = function(data)",
							"onClose(ws, reason)",
							"onHttp(ws, req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name, file)",
							"f = x =>",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"onFd(fd, rd, wr)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC9BgAAICB2YWx1ZSA9PgogICAobGV2ZWwsIG1lc3NhZ2UpID0+CkV4ZWNUb29sKGNtZCwgLi4uYXJncykKR2V0TWltZShmaWxlKQpNYWtlVVVJRCA9IChybmcgPSBNYXRoLnJhbmRvbSkgPT4KICBuID0+CiAgZGQgPT4KICBkID0+CkdldERpcihkaXIpCiAgbiA9PgpEYXRlU3RyKGRhdGUpCk1vZGVTdHIobW9kZSkKSFRNTFBhZ2UgPSAoeyB0aXRsZSwgc3R5bGUsIHNjcmlwdHMgPSBbXSwgY2hpbGRyZW4sIC4uLnByb3BzIH0pID0+CiAgc2NyaXB0ID0+CkZpbHRlckZvcm0gPSAoeyAuLi5wcm9wcyB9KSA9PgpIVE1MVGFibGUgPSAoeyByb3dzLCAuLi5wcm9wcyB9KSA9PgpIVE1MVGFibGVSb3cgPSAoeyBjb2x1bW5zLCAuLi5wcm9wcyB9KSA9PgpIVE1MVGFibGVDb2x1bW4gPSAoeyBjb2x1bW5zLCBjaGlsZHJlbiwgdGFnID0gJ3RkJywgLi4ucHJvcHMgfSkgPT4KRmlsZUxpbmsgPSAoeyBmaWxlLCAuLi5wcm9wcyB9KSA9PgpGaWxlT2JqZWN0ID0gKHsgZmlsZSwgc3RhdCA9IHt9LCAuLi5wcm9wcyB9KSA9PgpGaWxlVGFibGUgPSAoeyBmaWxlcywgLi4ucHJvcHMgfSkgPT4KKGEsIGIpID0+CiAgZmllbGQgPT4KICBmaWxlID0+ClJlYWRFeGl2MihmaWxlKQooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgooYSwgYikgPT4KKFtrLCB2XSkgPT4KUmVhZEV4aWZ0b29sKGZpbGUpCiAgbCA9PgogIGxpbmUgPT4KKFtsaW5lLCBpZHhdKSA9PgpIZWlmQ29udmVydChzcmMsIGRzdCwgcXVhbGl0eSA9IDEwMCkKTWFnaWNrUmVzaXplKHNyYywgZHN0LCByb3RhdGUgPSAwLCB3aWR0aCwgaGVpZ2h0KQogIG1haW4oLi4uYXJncykKICAgKGEsIHYpID0+CiAgICh2LCBwdiwgbykgPT4KICAgKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSBhcmcgPT4KICAuY2xlYW51cCA9ICgpID0+CiAgICguLi5hcmdzKSA9PgooKSA9PgogIHB1dHMocykKKCkgPT4KUGFyc2VCb2R5KGdlbikKICAuY3JlYXRlV1MgPSAodXJsLCBjYWxsYmFja3MsIGxpc3RlbikgPT4KICAub3V0ID0gcyA9PgogIHRlc3QocmVxLCByZXNwKQogIHByb3h5KHJlcSwgcmVzcCkKICBjb25maWcocmVxLCByZXNwKQogIGZpbGUocmVxLCByZXNwKQogIGRpciA9PgogIGRpciA9PgogIGYgPT4KICBmaWxlID0+CiAgdXBsb2FkcyhyZXEsIHJlc3ApCiAgZmlsZXMocmVxLCByZXNwKQogICBuID0+CiAgbiA9PgogIG4gPT4KKGEsIGIpID0+CiAgbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CihbZmlsZSwgcmVsXSkgPT4KKGFjYywgW2ZpbGUsIHN0XSkgPT4KICBzdHJpbmcoYSwgYikKICBudW1iZXIoYSwgYikKKFtuYW1lLCBvYmpdKSA9PgooeyBuYW1lIH0pID0+CiAgb25Db25uZWN0KHdzLCByZXEpCiAgLnNlbmRDb21tYW5kID0gZnVuY3Rpb24oZGF0YSkKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25IdHRwKHdzLCByZXEsIHJlc3ApCiAgb25PcGVuKG5hbWUsIGZpbGVuYW1lKQogIG9uQ29udGVudChuYW1lLCBkYXRhKQogIG9uQ2xvc2UobmFtZSwgZmlsZSkKICBmID0geCA9PgogIG9uRmluYWxpemUoKQogICAobWF0Y2gsIHAxLCBwMCwgcDIsIHAzLCBvZmZzZXQpID0+CiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBnZXQgY29ubmVjdGlvbnMoKQogIGdldCBieV91dWlkKCkKICB1dWlkKGRhdGEpCiAgb25GZChmZCwgcmQsIHdyKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgcXVpdCh3aHkpAAAAAAAAAAC9BgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					9,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1591,
								1599
							],
							[
								1615,
								1635
							],
							[
								2075,
								2106
							],
							[
								2432,
								2454
							],
							[
								2674,
								2707
							],
							[
								2729,
								2733
							],
							[
								3109,
								3114
							],
							[
								3162,
								3166
							],
							[
								3187,
								3207
							],
							[
								3261,
								3265
							],
							[
								3335,
								3357
							],
							[
								3551,
								3573
							],
							[
								3996,
								4062
							],
							[
								4408,
								4417
							],
							[
								4522,
								4552
							],
							[
								4907,
								4942
							],
							[
								4974,
								5015
							],
							[
								5047,
								5113
							],
							[
								5146,
								5180
							],
							[
								5251,
								5298
							],
							[
								5834,
								5870
							],
							[
								5983,
								5992
							],
							[
								6228,
								6236
							],
							[
								6342,
								6349
							],
							[
								6399,
								6423
							],
							[
								6804,
								6815
							],
							[
								6905,
								6916
							],
							[
								6980,
								6991
							],
							[
								7045,
								7054
							],
							[
								7092,
								7103
							],
							[
								7191,
								7218
							],
							[
								7356,
								7360
							],
							[
								7384,
								7391
							],
							[
								7424,
								7440
							],
							[
								7569,
								7614
							],
							[
								7830,
								7888
							],
							[
								8200,
								8222
							],
							[
								8617,
								8627
							],
							[
								8871,
								8885
							],
							[
								9838,
								9862
							],
							[
								9988,
								9992
							],
							[
								10084,
								10098
							],
							[
								10198,
								10214
							],
							[
								10568,
								10581
							],
							[
								10599,
								10604
							],
							[
								10686,
								10693
							],
							[
								10721,
								10726
							],
							[
								10848,
								10873
							],
							[
								11048,
								11087
							],
							[
								11164,
								11175
							],
							[
								12741,
								12772
							],
							[
								13435,
								13468
							],
							[
								13740,
								13775
							],
							[
								13860,
								13893
							],
							[
								14653,
								14659
							],
							[
								14829,
								14835
							],
							[
								15605,
								15609
							],
							[
								16044,
								16051
							],
							[
								16444,
								16480
							],
							[
								16884,
								16918
							],
							[
								17812,
								17817
							],
							[
								18583,
								18587
							],
							[
								18681,
								18685
							],
							[
								18805,
								18814
							],
							[
								18944,
								18951
							],
							[
								19232,
								19239
							],
							[
								19320,
								19327
							],
							[
								19391,
								19407
							],
							[
								19472,
								19492
							],
							[
								20192,
								20204
							],
							[
								20303,
								20315
							],
							[
								20517,
								20533
							],
							[
								20689,
								20702
							],
							[
								21005,
								21023
							],
							[
								21159,
								21188
							],
							[
								21681,
								21700
							],
							[
								22114,
								22135
							],
							[
								22991,
								23013
							],
							[
								23486,
								23507
							],
							[
								24058,
								24077
							],
							[
								24511,
								24519
							],
							[
								27220,
								27232
							],
							[
								28933,
								28968
							],
							[
								29582,
								29601
							],
							[
								29709,
								29725
							],
							[
								29860,
								29877
							],
							[
								29922,
								29935
							],
							[
								29971,
								29981
							],
							[
								30422,
								30438
							],
							[
								30527,
								30546
							],
							[
								30557,
								30576
							],
							[
								30602,
								30622
							]
						],
						"symlist":
						[
							"value =>",
							" (level, message) =>",
							"function ExecTool(cmd, ...args)",
							"function GetMime(file)",
							"MakeUUID = (rng = Math.random) =>",
							"n =>",
							"dd =>",
							"d =>",
							"function GetDir(dir)",
							"n =>",
							"function DateStr(date)",
							"function ModeStr(mode)",
							"HTMLPage = ({ title, style, scripts = [], children, ...props }) =>",
							"script =>",
							"FilterForm = ({ ...props }) =>",
							"HTMLTable = ({ rows, ...props }) =>",
							"HTMLTableRow = ({ columns, ...props }) =>",
							"HTMLTableColumn = ({ columns, children, tag = 'td', ...props }) =>",
							"FileLink = ({ file, ...props }) =>",
							"FileObject = ({ file, stat = {}, ...props }) =>",
							"FileTable = ({ files, ...props }) =>",
							"(a, b) =>",
							"field =>",
							"file =>",
							"function ReadExiv2(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function ReadExiftool(file)",
							"l =>",
							"line =>",
							"([line, idx]) =>",
							"function HeifConvert(src, dst, quality = 100)",
							"function MagickResize(src, dst, rotate = 0, width, height)",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							" function ParseBody(gen)",
							".createWS = (url, callbacks, listen) =>",
							".out = s =>",
							"async function* test(req, resp)",
							" function proxy(req, resp)",
							" function* config(req, resp)",
							" function* file(req, resp)",
							"dir =>",
							"dir =>",
							"f =>",
							"file =>",
							" function* uploads(req, resp)",
							" function* files(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file, rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"({ name }) =>",
							"onConnect(ws, req)",
							".sendCommand = function(data)",
							"onClose(ws, reason)",
							"onHttp(ws, req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name, file)",
							"f = x =>",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"onFd(fd, rd, wr)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAAC9BgAAICB2YWx1ZSA9PgogICAobGV2ZWwsIG1lc3NhZ2UpID0+CkV4ZWNUb29sKGNtZCwgLi4uYXJncykKR2V0TWltZShmaWxlKQpNYWtlVVVJRCA9IChybmcgPSBNYXRoLnJhbmRvbSkgPT4KICBuID0+CiAgZGQgPT4KICBkID0+CkdldERpcihkaXIpCiAgbiA9PgpEYXRlU3RyKGRhdGUpCk1vZGVTdHIobW9kZSkKSFRNTFBhZ2UgPSAoeyB0aXRsZSwgc3R5bGUsIHNjcmlwdHMgPSBbXSwgY2hpbGRyZW4sIC4uLnByb3BzIH0pID0+CiAgc2NyaXB0ID0+CkZpbHRlckZvcm0gPSAoeyAuLi5wcm9wcyB9KSA9PgpIVE1MVGFibGUgPSAoeyByb3dzLCAuLi5wcm9wcyB9KSA9PgpIVE1MVGFibGVSb3cgPSAoeyBjb2x1bW5zLCAuLi5wcm9wcyB9KSA9PgpIVE1MVGFibGVDb2x1bW4gPSAoeyBjb2x1bW5zLCBjaGlsZHJlbiwgdGFnID0gJ3RkJywgLi4ucHJvcHMgfSkgPT4KRmlsZUxpbmsgPSAoeyBmaWxlLCAuLi5wcm9wcyB9KSA9PgpGaWxlT2JqZWN0ID0gKHsgZmlsZSwgc3RhdCA9IHt9LCAuLi5wcm9wcyB9KSA9PgpGaWxlVGFibGUgPSAoeyBmaWxlcywgLi4ucHJvcHMgfSkgPT4KKGEsIGIpID0+CiAgZmllbGQgPT4KICBmaWxlID0+ClJlYWRFeGl2MihmaWxlKQooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgooYSwgYikgPT4KKFtrLCB2XSkgPT4KUmVhZEV4aWZ0b29sKGZpbGUpCiAgbCA9PgogIGxpbmUgPT4KKFtsaW5lLCBpZHhdKSA9PgpIZWlmQ29udmVydChzcmMsIGRzdCwgcXVhbGl0eSA9IDEwMCkKTWFnaWNrUmVzaXplKHNyYywgZHN0LCByb3RhdGUgPSAwLCB3aWR0aCwgaGVpZ2h0KQogIG1haW4oLi4uYXJncykKICAgKGEsIHYpID0+CiAgICh2LCBwdiwgbykgPT4KICAgKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSBhcmcgPT4KICAuY2xlYW51cCA9ICgpID0+CiAgICguLi5hcmdzKSA9PgooKSA9PgogIHB1dHMocykKKCkgPT4KUGFyc2VCb2R5KGdlbikKICAuY3JlYXRlV1MgPSAodXJsLCBjYWxsYmFja3MsIGxpc3RlbikgPT4KICAub3V0ID0gcyA9PgogIHRlc3QocmVxLCByZXNwKQogIHByb3h5KHJlcSwgcmVzcCkKICBjb25maWcocmVxLCByZXNwKQogIGZpbGUocmVxLCByZXNwKQogIGRpciA9PgogIGRpciA9PgogIGYgPT4KICBmaWxlID0+CiAgdXBsb2FkcyhyZXEsIHJlc3ApCiAgZmlsZXMocmVxLCByZXNwKQogICBuID0+CiAgbiA9PgogIG4gPT4KKGEsIGIpID0+CiAgbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CihbZmlsZSwgcmVsXSkgPT4KKGFjYywgW2ZpbGUsIHN0XSkgPT4KICBzdHJpbmcoYSwgYikKICBudW1iZXIoYSwgYikKKFtuYW1lLCBvYmpdKSA9PgooeyBuYW1lIH0pID0+CiAgb25Db25uZWN0KHdzLCByZXEpCiAgLnNlbmRDb21tYW5kID0gZnVuY3Rpb24oZGF0YSkKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25IdHRwKHdzLCByZXEsIHJlc3ApCiAgb25PcGVuKG5hbWUsIGZpbGVuYW1lKQogIG9uQ29udGVudChuYW1lLCBkYXRhKQogIG9uQ2xvc2UobmFtZSwgZmlsZSkKICBmID0geCA9PgogIG9uRmluYWxpemUoKQogICAobWF0Y2gsIHAxLCBwMCwgcDIsIHAzLCBvZmZzZXQpID0+CiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBnZXQgY29ubmVjdGlvbnMoKQogIGdldCBieV91dWlkKCkKICB1dWlkKGRhdGEpCiAgb25GZChmZCwgcmQsIHdyKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgcXVpdCh3aHkpAAAAAAAAAAC9BgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvQYAACAgdmFsdWUgPT4KICAgKGxldmVsLCBtZXNzYWdlKSA9PgpFeGVjVG9vbChjbWQsIC4uLmFyZ3MpCkdldE1pbWUoZmlsZSkKTWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+CiAgbiA9PgogIGRkID0+CiAgZCA9PgpHZXREaXIoZGlyKQogIG4gPT4KRGF0ZVN0cihkYXRlKQpNb2RlU3RyKG1vZGUpCkhUTUxQYWdlID0gKHsgdGl0bGUsIHN0eWxlLCBzY3JpcHRzID0gW10sIGNoaWxkcmVuLCAuLi5wcm9wcyB9KSA9PgogIHNjcmlwdCA9PgpGaWx0ZXJGb3JtID0gKHsgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlID0gKHsgcm93cywgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlUm93ID0gKHsgY29sdW1ucywgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlQ29sdW1uID0gKHsgY29sdW1ucywgY2hpbGRyZW4sIHRhZyA9ICd0ZCcsIC4uLnByb3BzIH0pID0+CkZpbGVMaW5rID0gKHsgZmlsZSwgLi4ucHJvcHMgfSkgPT4KRmlsZU9iamVjdCA9ICh7IGZpbGUsIHN0YXQgPSB7fSwgLi4ucHJvcHMgfSkgPT4KRmlsZVRhYmxlID0gKHsgZmlsZXMsIC4uLnByb3BzIH0pID0+CihhLCBiKSA9PgogIGZpZWxkID0+CiAgZmlsZSA9PgpSZWFkRXhpdjIoZmlsZSkKKFtrLCB2XSkgPT4KKFtrLCB2XSkgPT4KKFtrLCB2XSkgPT4KKGEsIGIpID0+Cihbaywgdl0pID0+ClJlYWRFeGlmdG9vbChmaWxlKQogIGwgPT4KICBsaW5lID0+CihbbGluZSwgaWR4XSkgPT4KSGVpZkNvbnZlcnQoc3JjLCBkc3QsIHF1YWxpdHkgPSAxMDApCk1hZ2lja1Jlc2l6ZShzcmMsIGRzdCwgcm90YXRlID0gMCwgd2lkdGgsIGhlaWdodCkKICBtYWluKC4uLmFyZ3MpCiAgIChhLCB2KSA9PgogICAodiwgcHYsIG8pID0+CiAgIChtb2R1bGUsIC4uLmFyZ3MpID0+CiAgbSA9PgogIC5zaG93ID0gYXJnID0+CiAgLmNsZWFudXAgPSAoKSA9PgogICAoLi4uYXJncykgPT4KKCkgPT4KICBwdXRzKHMpCigpID0+ClBhcnNlQm9keShnZW4pCiAgLmNyZWF0ZVdTID0gKHVybCwgY2FsbGJhY2tzLCBsaXN0ZW4pID0+CiAgLm91dCA9IHMgPT4KICB0ZXN0KHJlcSwgcmVzcCkKICBwcm94eShyZXEsIHJlc3ApCiAgY29uZmlnKHJlcSwgcmVzcCkKICBmaWxlKHJlcSwgcmVzcCkKICBkaXIgPT4KICBkaXIgPT4KICBmID0+CiAgZmlsZSA9PgogIHVwbG9hZHMocmVxLCByZXNwKQogIGZpbGVzKHJlcSwgcmVzcCkKICAgbiA9PgogIG4gPT4KICBuID0+CihhLCBiKSA9PgogIG5hbWUgPT4KICBmaWxlID0+CiAgZmlsZSA9PgooW2ZpbGUsIHJlbF0pID0+CihhY2MsIFtmaWxlLCBzdF0pID0+CiAgc3RyaW5nKGEsIGIpCiAgbnVtYmVyKGEsIGIpCihbbmFtZSwgb2JqXSkgPT4KKHsgbmFtZSB9KSA9PgogIG9uQ29ubmVjdCh3cywgcmVxKQogIC5zZW5kQ29tbWFuZCA9IGZ1bmN0aW9uKGRhdGEpCiAgb25DbG9zZSh3cywgcmVhc29uKQogIG9uSHR0cCh3cywgcmVxLCByZXNwKQogIG9uT3BlbihuYW1lLCBmaWxlbmFtZSkKICBvbkNvbnRlbnQobmFtZSwgZGF0YSkKICBvbkNsb3NlKG5hbWUsIGZpbGUpCiAgZiA9IHggPT4KICBvbkZpbmFsaXplKCkKICAgKG1hdGNoLCBwMSwgcDAsIHAyLCBwMywgb2Zmc2V0KSA9PgogIG9uTWVzc2FnZSh3cywgZGF0YSkKICBvbkZkKGZkLCByZCwgd3IpCiAgZ2V0IGNvbm5lY3Rpb25zKCkKICBnZXQgYnlfdXVpZCgpCiAgdXVpZChkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIHF1aXQod2h5KQAAAAAAAAAAvQYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					10,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/dom/container.js",
						"symkeys":
						[
							[
								54,
								63
							],
							[
								68,
								103
							],
							[
								151,
								176
							]
						],
						"symlist":
						[
							"Container",
							"static factory(parent, size = null)",
							"append_to(elem, p = null)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC9BgAAICB2YWx1ZSA9PgogICAobGV2ZWwsIG1lc3NhZ2UpID0+CkV4ZWNUb29sKGNtZCwgLi4uYXJncykKR2V0TWltZShmaWxlKQpNYWtlVVVJRCA9IChybmcgPSBNYXRoLnJhbmRvbSkgPT4KICBuID0+CiAgZGQgPT4KICBkID0+CkdldERpcihkaXIpCiAgbiA9PgpEYXRlU3RyKGRhdGUpCk1vZGVTdHIobW9kZSkKSFRNTFBhZ2UgPSAoeyB0aXRsZSwgc3R5bGUsIHNjcmlwdHMgPSBbXSwgY2hpbGRyZW4sIC4uLnByb3BzIH0pID0+CiAgc2NyaXB0ID0+CkZpbHRlckZvcm0gPSAoeyAuLi5wcm9wcyB9KSA9PgpIVE1MVGFibGUgPSAoeyByb3dzLCAuLi5wcm9wcyB9KSA9PgpIVE1MVGFibGVSb3cgPSAoeyBjb2x1bW5zLCAuLi5wcm9wcyB9KSA9PgpIVE1MVGFibGVDb2x1bW4gPSAoeyBjb2x1bW5zLCBjaGlsZHJlbiwgdGFnID0gJ3RkJywgLi4ucHJvcHMgfSkgPT4KRmlsZUxpbmsgPSAoeyBmaWxlLCAuLi5wcm9wcyB9KSA9PgpGaWxlT2JqZWN0ID0gKHsgZmlsZSwgc3RhdCA9IHt9LCAuLi5wcm9wcyB9KSA9PgpGaWxlVGFibGUgPSAoeyBmaWxlcywgLi4ucHJvcHMgfSkgPT4KKGEsIGIpID0+CiAgZmllbGQgPT4KICBmaWxlID0+ClJlYWRFeGl2MihmaWxlKQooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgooYSwgYikgPT4KKFtrLCB2XSkgPT4KUmVhZEV4aWZ0b29sKGZpbGUpCiAgbCA9PgogIGxpbmUgPT4KKFtsaW5lLCBpZHhdKSA9PgpIZWlmQ29udmVydChzcmMsIGRzdCwgcXVhbGl0eSA9IDEwMCkKTWFnaWNrUmVzaXplKHNyYywgZHN0LCByb3RhdGUgPSAwLCB3aWR0aCwgaGVpZ2h0KQogIG1haW4oLi4uYXJncykKICAgKGEsIHYpID0+CiAgICh2LCBwdiwgbykgPT4KICAgKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSBhcmcgPT4KICAuY2xlYW51cCA9ICgpID0+CiAgICguLi5hcmdzKSA9PgooKSA9PgogIHB1dHMocykKKCkgPT4KUGFyc2VCb2R5KGdlbikKICAuY3JlYXRlV1MgPSAodXJsLCBjYWxsYmFja3MsIGxpc3RlbikgPT4KICAub3V0ID0gcyA9PgogIHRlc3QocmVxLCByZXNwKQogIHByb3h5KHJlcSwgcmVzcCkKICBjb25maWcocmVxLCByZXNwKQogIGZpbGUocmVxLCByZXNwKQogIGRpciA9PgogIGRpciA9PgogIGYgPT4KICBmaWxlID0+CiAgdXBsb2FkcyhyZXEsIHJlc3ApCiAgZmlsZXMocmVxLCByZXNwKQogICBuID0+CiAgbiA9PgogIG4gPT4KKGEsIGIpID0+CiAgbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CihbZmlsZSwgcmVsXSkgPT4KKGFjYywgW2ZpbGUsIHN0XSkgPT4KICBzdHJpbmcoYSwgYikKICBudW1iZXIoYSwgYikKKFtuYW1lLCBvYmpdKSA9PgooeyBuYW1lIH0pID0+CiAgb25Db25uZWN0KHdzLCByZXEpCiAgLnNlbmRDb21tYW5kID0gZnVuY3Rpb24oZGF0YSkKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25IdHRwKHdzLCByZXEsIHJlc3ApCiAgb25PcGVuKG5hbWUsIGZpbGVuYW1lKQogIG9uQ29udGVudChuYW1lLCBkYXRhKQogIG9uQ2xvc2UobmFtZSwgZmlsZSkKICBmID0geCA9PgogIG9uRmluYWxpemUoKQogICAobWF0Y2gsIHAxLCBwMCwgcDIsIHAzLCBvZmZzZXQpID0+CiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBnZXQgY29ubmVjdGlvbnMoKQogIGdldCBieV91dWlkKCkKICB1dWlkKGRhdGEpCiAgb25GZChmZCwgcmQsIHdyKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgcXVpdCh3aHkpAAAAAAAAAABLAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					11,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1591,
								1599
							],
							[
								1615,
								1635
							],
							[
								2075,
								2106
							],
							[
								2432,
								2454
							],
							[
								2674,
								2707
							],
							[
								2729,
								2733
							],
							[
								3109,
								3114
							],
							[
								3162,
								3166
							],
							[
								3187,
								3207
							],
							[
								3261,
								3265
							],
							[
								3335,
								3357
							],
							[
								3551,
								3573
							],
							[
								3996,
								4062
							],
							[
								4408,
								4417
							],
							[
								4522,
								4552
							],
							[
								4907,
								4942
							],
							[
								4974,
								5015
							],
							[
								5047,
								5113
							],
							[
								5146,
								5180
							],
							[
								5251,
								5298
							],
							[
								5834,
								5870
							],
							[
								5983,
								5992
							],
							[
								6228,
								6236
							],
							[
								6342,
								6349
							],
							[
								6399,
								6423
							],
							[
								6804,
								6815
							],
							[
								6905,
								6916
							],
							[
								6980,
								6991
							],
							[
								7045,
								7054
							],
							[
								7092,
								7103
							],
							[
								7191,
								7218
							],
							[
								7356,
								7360
							],
							[
								7384,
								7391
							],
							[
								7424,
								7440
							],
							[
								7569,
								7614
							],
							[
								7830,
								7888
							],
							[
								8200,
								8222
							],
							[
								8617,
								8627
							],
							[
								8871,
								8885
							],
							[
								9838,
								9862
							],
							[
								9988,
								9992
							],
							[
								10084,
								10098
							],
							[
								10198,
								10214
							],
							[
								10568,
								10581
							],
							[
								10599,
								10604
							],
							[
								10686,
								10693
							],
							[
								10721,
								10726
							],
							[
								10848,
								10873
							],
							[
								11048,
								11087
							],
							[
								11164,
								11175
							],
							[
								12741,
								12772
							],
							[
								13435,
								13468
							],
							[
								13740,
								13775
							],
							[
								13860,
								13893
							],
							[
								14653,
								14659
							],
							[
								14829,
								14835
							],
							[
								15605,
								15609
							],
							[
								16044,
								16051
							],
							[
								16444,
								16480
							],
							[
								16884,
								16918
							],
							[
								17812,
								17817
							],
							[
								18583,
								18587
							],
							[
								18681,
								18685
							],
							[
								18805,
								18814
							],
							[
								18944,
								18951
							],
							[
								19232,
								19239
							],
							[
								19320,
								19327
							],
							[
								19391,
								19407
							],
							[
								19472,
								19492
							],
							[
								20192,
								20204
							],
							[
								20303,
								20315
							],
							[
								20517,
								20533
							],
							[
								20689,
								20702
							],
							[
								21005,
								21023
							],
							[
								21159,
								21188
							],
							[
								21681,
								21700
							],
							[
								22114,
								22135
							],
							[
								22991,
								23013
							],
							[
								23486,
								23507
							],
							[
								24058,
								24077
							],
							[
								24511,
								24519
							],
							[
								27220,
								27232
							],
							[
								28933,
								28968
							],
							[
								29582,
								29601
							],
							[
								29709,
								29725
							],
							[
								29860,
								29877
							],
							[
								29922,
								29935
							],
							[
								29971,
								29981
							],
							[
								30422,
								30438
							],
							[
								30527,
								30546
							],
							[
								30557,
								30576
							],
							[
								30602,
								30622
							]
						],
						"symlist":
						[
							"value =>",
							" (level, message) =>",
							"function ExecTool(cmd, ...args)",
							"function GetMime(file)",
							"MakeUUID = (rng = Math.random) =>",
							"n =>",
							"dd =>",
							"d =>",
							"function GetDir(dir)",
							"n =>",
							"function DateStr(date)",
							"function ModeStr(mode)",
							"HTMLPage = ({ title, style, scripts = [], children, ...props }) =>",
							"script =>",
							"FilterForm = ({ ...props }) =>",
							"HTMLTable = ({ rows, ...props }) =>",
							"HTMLTableRow = ({ columns, ...props }) =>",
							"HTMLTableColumn = ({ columns, children, tag = 'td', ...props }) =>",
							"FileLink = ({ file, ...props }) =>",
							"FileObject = ({ file, stat = {}, ...props }) =>",
							"FileTable = ({ files, ...props }) =>",
							"(a, b) =>",
							"field =>",
							"file =>",
							"function ReadExiv2(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function ReadExiftool(file)",
							"l =>",
							"line =>",
							"([line, idx]) =>",
							"function HeifConvert(src, dst, quality = 100)",
							"function MagickResize(src, dst, rotate = 0, width, height)",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							" function ParseBody(gen)",
							".createWS = (url, callbacks, listen) =>",
							".out = s =>",
							"async function* test(req, resp)",
							" function proxy(req, resp)",
							" function* config(req, resp)",
							" function* file(req, resp)",
							"dir =>",
							"dir =>",
							"f =>",
							"file =>",
							" function* uploads(req, resp)",
							" function* files(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file, rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"({ name }) =>",
							"onConnect(ws, req)",
							".sendCommand = function(data)",
							"onClose(ws, reason)",
							"onHttp(ws, req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name, file)",
							"f = x =>",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"onFd(fd, rd, wr)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABLAAAAQ29udGFpbmVyCiAgc3RhdGljIGZhY3RvcnkocGFyZW50LCBzaXplID0gbnVsbCkKICBhcHBlbmRfdG8oZWxlbSwgcCA9IG51bGwpAAAAAAAAAAC9BgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				]
			]
		},
		{
			"file": "quickjs/qjs-modules/xml-shell.js",
			"settings":
			{
				"buffer_size": 4219,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					6,
					1,
					"cut",
					null,
					"AQAAAEYNAAAAAAAARg0AAAAAAACQAAAACgpmdW5jdGlvbiBzYXZlKGZpbGVuYW1lLCBvYmopIHsKICBsZXQgZGF0YTsKCiAgdHJ5IHsKICAgIGRhdGEgPSB4bWwud3JpdGUob2JqKTsKICB9IGNhdGNoKGUpIHt9CiAgaWYoZGF0YSkgZnMud3JpdGVGaWxlU3luYyhmaWxlbmFtZSwgZGF0YSk7Cn0K",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEYNAAAAAAAA1g0AAAAAAAAAAAAAAADwvw"
				],
				[
					7,
					2,
					"paste",
					null,
					"AgAAAEYNAAAAAAAA1g0AAAAAAAAAAAAA1g0AAAAAAABmDgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEYNAAAAAAAARg0AAAAAAAAAAAAAAADwvw"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "serialize"
					},
					"CgAAAFENAAAAAAAAUg0AAAAAAAAAAAAAUg0AAAAAAABSDQAAAAAAAAQAAABzYXZlUg0AAAAAAABTDQAAAAAAAAAAAABTDQAAAAAAAFQNAAAAAAAAAAAAAFQNAAAAAAAAVQ0AAAAAAAAAAAAAVQ0AAAAAAABWDQAAAAAAAAAAAABWDQAAAAAAAFcNAAAAAAAAAAAAAFcNAAAAAAAAWA0AAAAAAAAAAAAAWA0AAAAAAABZDQAAAAAAAAAAAABZDQAAAAAAAFoNAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFENAAAAAAAAVQ0AAAAAAAAAAAAAAADwvw"
				],
				[
					15,
					2,
					"left_delete",
					null,
					"AgAAAFwNAAAAAAAAXA0AAAAAAAAMAAAAaWxlbmFtZSwgb2JqWw0AAAAAAABbDQAAAAAAAAEAAABm",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFwNAAAAAAAAaA0AAAAAAAAAAAAAAADwvw"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "document"
					},
					"CAAAAFsNAAAAAAAAXA0AAAAAAAAAAAAAXA0AAAAAAABdDQAAAAAAAAAAAABdDQAAAAAAAF4NAAAAAAAAAAAAAF4NAAAAAAAAXw0AAAAAAAAAAAAAXw0AAAAAAABgDQAAAAAAAAAAAABgDQAAAAAAAGENAAAAAAAAAAAAAGENAAAAAAAAYg0AAAAAAAAAAAAAYg0AAAAAAABjDQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFsNAAAAAAAAWw0AAAAAAAAAAAAAAADwvw"
				],
				[
					21,
					4,
					"left_delete",
					null,
					"BAAAAHANAAAAAAAAcA0AAAAAAAABAAAAYW8NAAAAAAAAbw0AAAAAAAABAAAAdG4NAAAAAAAAbg0AAAAAAAABAAAAYW0NAAAAAAAAbQ0AAAAAAAABAAAAZA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHENAAAAAAAAcQ0AAAAAAAAAAAAAAADwvw"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": "s=new"
					},
					"BQAAAG0NAAAAAAAAbg0AAAAAAAAAAAAAbg0AAAAAAABvDQAAAAAAAAAAAABvDQAAAAAAAHANAAAAAAAAAAAAAHANAAAAAAAAcQ0AAAAAAAAAAAAAcQ0AAAAAAAByDQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG0NAAAAAAAAbQ0AAAAAAAAAAAAAAADwvw"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": " Serializer()"
					},
					"DQAAAHINAAAAAAAAcw0AAAAAAAAAAAAAcw0AAAAAAAB0DQAAAAAAAAAAAAB0DQAAAAAAAHUNAAAAAAAAAAAAAHUNAAAAAAAAdg0AAAAAAAAAAAAAdg0AAAAAAAB3DQAAAAAAAAAAAAB3DQAAAAAAAHgNAAAAAAAAAAAAAHgNAAAAAAAAeQ0AAAAAAAAAAAAAeQ0AAAAAAAB6DQAAAAAAAAAAAAB6DQAAAAAAAHsNAAAAAAAAAAAAAHsNAAAAAAAAfA0AAAAAAAAAAAAAfA0AAAAAAAB9DQAAAAAAAAAAAAB9DQAAAAAAAH4NAAAAAAAAAAAAAH4NAAAAAAAAfw0AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHINAAAAAAAAcg0AAAAAAAAAAAAAAADwvw"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": "data,"
					},
					"BQAAAG0NAAAAAAAAbg0AAAAAAAAAAAAAbg0AAAAAAABvDQAAAAAAAAAAAABvDQAAAAAAAHANAAAAAAAAAAAAAHANAAAAAAAAcQ0AAAAAAAAAAAAAcQ0AAAAAAAByDQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG0NAAAAAAAAbQ0AAAAAAAAAAAAAAABIQA"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "s.seria"
					},
					"BwAAAJoNAAAAAAAAmw0AAAAAAAAAAAAAmw0AAAAAAACcDQAAAAAAAAAAAACcDQAAAAAAAJ0NAAAAAAAAAAAAAJ0NAAAAAAAAng0AAAAAAAAAAAAAng0AAAAAAACfDQAAAAAAAAAAAACfDQAAAAAAAKANAAAAAAAAAAAAAKANAAAAAAAAoQ0AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJoNAAAAAAAAmg0AAAAAAAAAAAAAAABWQA"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "ize"
					},
					"AwAAAKENAAAAAAAAog0AAAAAAAAAAAAAog0AAAAAAACjDQAAAAAAAAAAAACjDQAAAAAAAKQNAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKENAAAAAAAAoQ0AAAAAAAAAAAAAAADwvw"
				],
				[
					32,
					4,
					"left_delete",
					null,
					"BAAAAKMNAAAAAAAAow0AAAAAAAABAAAAZaINAAAAAAAAog0AAAAAAAABAAAAeqENAAAAAAAAoQ0AAAAAAAABAAAAaaANAAAAAAAAoA0AAAAAAAABAAAAYQ",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKQNAAAAAAAApA0AAAAAAAAAAAAAAADwvw"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AQAAAKANAAAAAAAAoQ0AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKANAAAAAAAAoA0AAAAAAAAAAAAAAADwvw"
				],
				[
					34,
					1,
					"left_delete",
					null,
					"AQAAAKANAAAAAAAAoA0AAAAAAAABAAAAbA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKENAAAAAAAAoQ0AAAAAAAAAAAAAAADwvw"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "alizeToString("
					},
					"DgAAAKANAAAAAAAAoQ0AAAAAAAAAAAAAoQ0AAAAAAACiDQAAAAAAAAAAAACiDQAAAAAAAKMNAAAAAAAAAAAAAKMNAAAAAAAApA0AAAAAAAAAAAAApA0AAAAAAAClDQAAAAAAAAAAAAClDQAAAAAAAKYNAAAAAAAAAAAAAKYNAAAAAAAApw0AAAAAAAAAAAAApw0AAAAAAACoDQAAAAAAAAAAAACoDQAAAAAAAKkNAAAAAAAAAAAAAKkNAAAAAAAAqg0AAAAAAAAAAAAAqg0AAAAAAACrDQAAAAAAAAAAAACrDQAAAAAAAKwNAAAAAAAAAAAAAKwNAAAAAAAArQ0AAAAAAAAAAAAArQ0AAAAAAACuDQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKANAAAAAAAAoA0AAAAAAAAAAAAAAADwvw"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "document);"
					},
					"CgAAAK4NAAAAAAAArw0AAAAAAAAAAAAArw0AAAAAAACwDQAAAAAAAAAAAACwDQAAAAAAALENAAAAAAAAAAAAALENAAAAAAAAsg0AAAAAAAAAAAAAsg0AAAAAAACzDQAAAAAAAAAAAACzDQAAAAAAALQNAAAAAAAAAAAAALQNAAAAAAAAtQ0AAAAAAAAAAAAAtQ0AAAAAAAC2DQAAAAAAAAAAAAC2DQAAAAAAALcNAAAAAAAAAAAAALcNAAAAAAAAuA0AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK4NAAAAAAAArg0AAAAAAAAAAAAAAADwvw"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAALgNAAAAAAAAuQ0AAAAAAAAAAAAAuQ0AAAAAAAC9DQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALgNAAAAAAAAuA0AAAAAAAAAAAAAAADwvw"
				],
				[
					40,
					1,
					"left_delete",
					null,
					"AQAAAL0NAAAAAAAAvQ0AAAAAAAARAAAAeG1sLndyaXRlKG9iaik7CiA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL0NAAAAAAAAzg0AAAAAAAAAAAAAAADwvw"
				],
				[
					54,
					1,
					"insert",
					{
						"characters": "retuirn"
					},
					"CAAAAMwNAAAAAAAAzQ0AAAAAAAAAAAAAzQ0AAAAAAADNDQAAAAAAACwAAAAgIGlmKGRhdGEpIGZzLndyaXRlRmlsZVN5bmMoZmlsZW5hbWUsIGRhdGEpO80NAAAAAAAAzg0AAAAAAAAAAAAAzg0AAAAAAADPDQAAAAAAAAAAAADPDQAAAAAAANANAAAAAAAAAAAAANANAAAAAAAA0Q0AAAAAAAAAAAAA0Q0AAAAAAADSDQAAAAAAAAAAAADSDQAAAAAAANMNAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMwNAAAAAAAA+A0AAAAAAAAAAAAAAADwvw"
				],
				[
					55,
					3,
					"left_delete",
					null,
					"AwAAANINAAAAAAAA0g0AAAAAAAABAAAAbtENAAAAAAAA0Q0AAAAAAAABAAAActANAAAAAAAA0A0AAAAAAAABAAAAaQ",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANMNAAAAAAAA0w0AAAAAAAAAAAAAAADwvw"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": "rn"
					},
					"AgAAANANAAAAAAAA0Q0AAAAAAAAAAAAA0Q0AAAAAAADSDQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANANAAAAAAAA0A0AAAAAAAAAAAAAAADwvw"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": " data;"
					},
					"BgAAANINAAAAAAAA0w0AAAAAAAAAAAAA0w0AAAAAAADUDQAAAAAAAAAAAADUDQAAAAAAANUNAAAAAAAAAAAAANUNAAAAAAAA1g0AAAAAAAAAAAAA1g0AAAAAAADXDQAAAAAAAAAAAADXDQAAAAAAANgNAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANINAAAAAAAA0g0AAAAAAAAAAAAAAADwvw"
				],
				[
					63,
					1,
					"insert",
					{
						"characters": "serialize,"
					},
					"CgAAACQEAAAAAAAAJQQAAAAAAAAAAAAAJQQAAAAAAAAmBAAAAAAAAAAAAAAmBAAAAAAAACcEAAAAAAAAAAAAACcEAAAAAAAAKAQAAAAAAAAAAAAAKAQAAAAAAAApBAAAAAAAAAAAAAApBAAAAAAAACoEAAAAAAAAAAAAACoEAAAAAAAAKwQAAAAAAAAAAAAAKwQAAAAAAAAsBAAAAAAAAAAAAAAsBAAAAAAAAC0EAAAAAAAAAAAAAC0EAAAAAAAALgQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACQEAAAAAAAAJAQAAAAAAAAAAAAAAADwvw"
				],
				[
					66,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB1DgAAaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJzsKaW1wb3J0ICogYXMgeG1sIGZyb20gJ3htbCc7CmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJzsKaW1wb3J0ICogYXMgcG9pbnRlciBmcm9tICdwb2ludGVyJzsKaW1wb3J0ICogYXMgbG9jYXRpb24gZnJvbSAnbG9jYXRpb24nOwppbXBvcnQgQ29uc29sZSBmcm9tICdjb25zb2xlJzsKaW1wb3J0IHsgbm9kZVR5cGVzLCBQYXJzZXIsIE5vZGUsIE5vZGVMaXN0LCBOYW1lZE5vZGVNYXAsIEVsZW1lbnQsIERvY3VtZW50LCBBdHRyLCBUZXh0LCBUb2tlbkxpc3QsIEZhY3RvcnkgfSBmcm9tICdkb20nOwppbXBvcnQgeyBkZWZpbmUsIGdldE9wdCwgd2Vha0Fzc2lnbiB9IGZyb20gJ3V0aWwnOwppbXBvcnQgKiBhcyB1dGlsIGZyb20gJ3V0aWwnOwppbXBvcnQgKiBhcyBkb20gZnJvbSAnZG9tJzsKaW1wb3J0IFJFUEwgZnJvbSAncmVwbCc7CgpsZXQgcmVwbDsKCmZ1bmN0aW9uIG1haW4oLi4uYXJncykgewogIGdsb2JhbFRoaXMuY29uc29sZSA9IG5ldyBDb25zb2xlKHByb2Nlc3Muc3Rkb3V0LCB7CiAgICBpbnNwZWN0T3B0aW9uczogewogICAgICBjb2xvcnM6IHRydWUsCiAgICAgIGRlcHRoOiAxMCwKICAgICAgc3RyaW5nQnJlYWtOZXdsaW5lOiBmYWxzZSwKICAgICAgbWF4QXJyYXlMZW5ndGg6IDEwMDAwLAogICAgICBjb21wYWN0OiBmYWxzZSwKICAgICAgbWF4U3RyaW5nTGVuZ3RoOiBJbmZpbml0eSwKICAgICAgY3VzdG9tSW5zcGVjdDogdHJ1ZSAvKiwKICAgICAgaGlkZUtleXM6IFtTeW1ib2wuaXRlcmF0b3IsIFN5bWJvbC5mb3IoJ3F1aWNranMuaW5zcGVjdC5jdXN0b20nKSwgU3ltYm9sLmluc3BlY3RdKi8KICAgIH0KICB9KTsKCiAgbGV0IHBhcmFtcyA9IGdldE9wdCgKICAgIHsKICAgICAgb3V0cHV0OiBbdHJ1ZSwgbnVsbCwgJ28nXSwKICAgICAgaW50ZXJhY3RpdmU6IFt0cnVlLCBudWxsLCAnaSddLAogICAgICAnQCc6ICd4bWwnCiAgICB9LAogICAgYXJncwogICk7CgogIE9iamVjdC5hc3NpZ24oZ2xvYmFsVGhpcywgewogICAgeG1sOiB7CiAgICAgIHBhcnNlLAogICAgICBsb2FkLAogICAgICBzYXZlLHNlcmlhbGl6ZSwKICAgICAgcmVhZDogeG1sLnJlYWQsCiAgICAgIHdyaXRlOiB4bWwud3JpdGUKICAgIH0sCiAgICBqc29uOiB7CiAgICAgIHJlYWQoLi4uYXJncykgewogICAgICAgIHJldHVybiBKU09OLnBhcnNlKC4uLmFyZ3MpOwogICAgICB9LAogICAgICB3cml0ZSguLi5hcmdzKSB7CiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KC4uLmFyZ3MpOwogICAgICB9LAogICAgICBsb2FkLAogICAgICBzYXZlCiAgICB9LAogICAgZG9tLAogICAgdXRpbCwKICAgIGZzLAogICAgcGF0aCwKICAgIHBvaW50ZXIsCiAgICBsb2NhdGlvbgogIH0pOwogIE9iamVjdC5hc3NpZ24oZ2xvYmFsVGhpcywgewogICAgLi4uZ2xvYmFsVGhpcy54bWwsCiAgICAuLi5kb20sCiAgICAuLi51dGlsLAogICAgLi4ucG9pbnRlciwKICAgIC4uLmxvY2F0aW9uCiAgfSk7CgogIGdsb2JhbFRoaXMucGFyc2VyID8/PSBuZXcgZG9tLlBhcnNlcigpOwogIGdsb2JhbFRoaXMuZG9jdW1lbnRzID8/PSBbXTsKCiAgZm9yKGxldCBhcmcgb2YgcGFyYW1zWydAJ10pIHsKICAgIGdsb2JhbFRoaXMuZG9jdW1lbnQgPSBwYXJzZXIucGFyc2VGcm9tRmlsZShhcmcpOwogICAgZG9jdW1lbnRzLnB1c2goZG9jdW1lbnQpOwogIH0KCiAgcmVwbCA9IGdsb2JhbFRoaXMucmVwbCA9IG5ldyBSRVBMKAogICAgJ1x4MWJbMzg7Mjs4MDsyMDA7MjU1bScgKyBwYXRoLmJhc2VuYW1lKHByb2Nlc3MuYXJndlsxXSwgJy5qcycpLnJlcGxhY2UoL3Rlc3RfLywgJycpICsgJyBceDFiWzBtJywKICAgIGZhbHNlCiAgKTsKICByZXBsLnNob3cgPSByZXBsLnByaW50RnVuY3Rpb24oKC4uLmFyZ3MpID0+IGNvbnNvbGUubG9nKC4uLmFyZ3MpKTsKICByZXBsLmhpc3RvcnlMb2FkKG51bGwsIGZzKTsKICByZXBsLmxvYWRTYXZlT3B0aW9ucygpOwogIHJlcGwuZGlyZWN0aXZlcyA9IHsKICAgIGk6IFsKICAgICAgbmFtZSA9PiB7CiAgICAgICAgY29uc3QgYWxsID0gbmFtZVswXSA9PSAnKic7CiAgICAgICAgaWYobmFtZVswXSA9PSAnKicpIG5hbWUgPSBuYW1lLnNsaWNlKDEpOwoKICAgICAgICBpbXBvcnQobmFtZSkudGhlbihtID0+IHsKICAgICAgICAgIC8vcmVwbC5wcmludFN0YXR1cyhgTG9hZGVkICcke25hbWV9Jy5gKTsKICAgICAgICAgIGNvbnN0IHN5bSA9IG5hbWUucmVwbGFjZSgvLipcLy9nLCAnJykucmVwbGFjZSgvXC5bXi5dKyQvZ2ksICcnKTsKICAgICAgICAgIGxldCBlcnIgPSBmYWxzZTsKICAgICAgICAgIGlmKGFsbCkgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgIHdlYWtBc3NpZ24oZ2xvYmFsVGhpcywgbSk7CiAgICAgICAgICAgIH0gY2F0Y2goZSkgewogICAgICAgICAgICAgIGVyciA9IGU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmVwbC5wcmludFN0YXR1cyhlcnIgPyBgRXJyb3IgaW1wb3J0aW5nICcke25hbWV9JzogJHtlcnIubWVzc2FnZX1gIDogYEltcG9ydGVkIGZyb20gJyR7c3ltfSc6ICR7T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMobSkuam9pbignICcpfWApOwogICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGdsb2JhbFRoaXNbc3ltXSA9IG07CiAgICAgICAgICAgIHJlcGwucHJpbnRTdGF0dXMoYEltcG9ydGVkICcke3N5bX0nIGFzICcke3N5bX0nYCk7CiAgICAgICAgICB9CiAgICAgICAgfSkuY2F0Y2goZXJyID0+IHsKICAgICAgICAgIHJlcGwucHJpbnRTdGF0dXMoYEVSUk9SOiAke2Vyci5tZXNzYWdlfWApOwoKICAgICAgICB9KQogICAgICB9LAogICAgICAnaW1wb3J0IGEgbW9kdWxlJwogICAgXQogIH07CgogIGZvcihsZXQgYXJnIG9mIHBhcmFtc1snQCddKSB7CiAgICBwYXJzZShhcmcpOwogIH0KICByZXBsLnJ1blN5bmMoKTsKfQoKdHJ5IHsKICBtYWluKC4uLnNjcmlwdEFyZ3Muc2xpY2UoMSkpOwp9IGNhdGNoKGVycm9yKSB7CiAgY29uc29sZS5sb2coYEZBSUw6ICR7ZXJyb3IubWVzc2FnZX1cbiR7ZXJyb3Iuc3RhY2t9YCk7CiAgc3RkLmV4aXQoMSk7Cn0KCmZ1bmN0aW9uIGxvYWQoZmlsZW5hbWUsIC4uLmFyZ3MpIHsKICBsZXQgZGF0YTsKCiAgdHJ5IHsKICAgIGRhdGEgPSBmcy5yZWFkRmlsZVN5bmMoZmlsZW5hbWUsICd1dGYtOCcpOwogIH0gY2F0Y2goZSkge30KCiAgaWYoZGF0YSkgcmV0dXJuIHhtbC5yZWFkKGRhdGEsIGZpbGVuYW1lLCAuLi5hcmdzKTsKfQoKZnVuY3Rpb24gcGFyc2UoZmlsZW5hbWUsIC4uLmFyZ3MpIHsKICBsZXQgZG9jLAogICAgcGFyc2VyID0gbmV3IFBhcnNlcigpOwoKICB0cnkgewogICAgZG9jID0gcGFyc2VyLnBhcnNlRnJvbUZpbGUoZmlsZW5hbWUsICd1dGYtOCcpOwogIH0gY2F0Y2goZSkge30KICByZXR1cm4gKGdsb2JhbFRoaXMuZG9jdW1lbnQgPSBkb2MpOwp9CgpmdW5jdGlvbiBzZXJpYWxpemUoZG9jdW1lbnQpIHsKICBsZXQgZGF0YSxzPW5ldyBTZXJpYWxpemVyKCk7CgogIHRyeSB7CiAgICBkYXRhID0gcy5zZXJpYWxpemVUb1N0cmluZyhkb2N1bWVudCk7CiAgICAgfSBjYXRjaChlKSB7fQpyZXR1cm4gZGF0YTsKfQoKCmZ1bmN0aW9uIHNhdmUoZmlsZW5hbWUsIG9iaikgewogIGxldCBkYXRhOwoKICB0cnkgewogICAgZGF0YSA9IHhtbC53cml0ZShvYmopOwogIH0gY2F0Y2goZSkge30KICBpZihkYXRhKSBmcy53cml0ZUZpbGVTeW5jKGZpbGVuYW1lLCBkYXRhKTsKfQoAAAAAAAAAAPwOAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC4EAAAAAAAALgQAAAAAAAAAAAAAAADwvw"
				],
				[
					81,
					1,
					"cut",
					null,
					"AQAAAOcNAAAAAAAA5w0AAAAAAAAIAAAAZG9jdW1lbnQ",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOcNAAAAAAAA7w0AAAAAAAAAAAAAAADwvw"
				],
				[
					82,
					1,
					"insert",
					{
						"characters": "...args"
					},
					"BwAAAOcNAAAAAAAA6A0AAAAAAAAAAAAA6A0AAAAAAADpDQAAAAAAAAAAAADpDQAAAAAAAOoNAAAAAAAAAAAAAOoNAAAAAAAA6w0AAAAAAAAAAAAA6w0AAAAAAADsDQAAAAAAAAAAAADsDQAAAAAAAO0NAAAAAAAAAAAAAO0NAAAAAAAA7g0AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOcNAAAAAAAA5w0AAAAAAAAAAAAAAADwvw"
				],
				[
					84,
					1,
					"insert",
					{
						"characters": "\nlet"
					},
					"BQAAAPENAAAAAAAA8g0AAAAAAAAAAAAA8g0AAAAAAAD0DQAAAAAAAAAAAAD0DQAAAAAAAPUNAAAAAAAAAAAAAPUNAAAAAAAA9g0AAAAAAAAAAAAA9g0AAAAAAAD3DQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPENAAAAAAAA8Q0AAAAAAAAAAAAAAADwvw"
				],
				[
					85,
					1,
					"insert",
					{
						"characters": " ["
					},
					"AgAAAPcNAAAAAAAA+A0AAAAAAAAAAAAA+A0AAAAAAAD5DQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPcNAAAAAAAA9w0AAAAAAAAAAAAAAADwvw"
				],
				[
					86,
					1,
					"insert",
					{
						"characters": "filename,document]="
					},
					"EwAAAPkNAAAAAAAA+g0AAAAAAAAAAAAA+g0AAAAAAAD7DQAAAAAAAAAAAAD7DQAAAAAAAPwNAAAAAAAAAAAAAPwNAAAAAAAA/Q0AAAAAAAAAAAAA/Q0AAAAAAAD+DQAAAAAAAAAAAAD+DQAAAAAAAP8NAAAAAAAAAAAAAP8NAAAAAAAAAA4AAAAAAAAAAAAAAA4AAAAAAAABDgAAAAAAAAAAAAABDgAAAAAAAAIOAAAAAAAAAAAAAAIOAAAAAAAAAw4AAAAAAAAAAAAAAw4AAAAAAAAEDgAAAAAAAAAAAAAEDgAAAAAAAAUOAAAAAAAAAAAAAAUOAAAAAAAABg4AAAAAAAAAAAAABg4AAAAAAAAHDgAAAAAAAAAAAAAHDgAAAAAAAAgOAAAAAAAAAAAAAAgOAAAAAAAACQ4AAAAAAAAAAAAACQ4AAAAAAAAKDgAAAAAAAAAAAAAKDgAAAAAAAAsOAAAAAAAAAAAAAAsOAAAAAAAADA4AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPkNAAAAAAAA+Q0AAAAAAAAAAAAAAADwvw"
				],
				[
					87,
					1,
					"insert",
					{
						"characters": "args.length"
					},
					"CwAAAAwOAAAAAAAADQ4AAAAAAAAAAAAADQ4AAAAAAAAODgAAAAAAAAAAAAAODgAAAAAAAA8OAAAAAAAAAAAAAA8OAAAAAAAAEA4AAAAAAAAAAAAAEA4AAAAAAAARDgAAAAAAAAAAAAARDgAAAAAAABIOAAAAAAAAAAAAABIOAAAAAAAAEw4AAAAAAAAAAAAAEw4AAAAAAAAUDgAAAAAAAAAAAAAUDgAAAAAAABUOAAAAAAAAAAAAABUOAAAAAAAAFg4AAAAAAAAAAAAAFg4AAAAAAAAXDgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAwOAAAAAAAADA4AAAAAAAAAAAAAAADwvw"
				],
				[
					88,
					1,
					"insert",
					{
						"characters": " ?"
					},
					"AgAAABcOAAAAAAAAGA4AAAAAAAAAAAAAGA4AAAAAAAAZDgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABcOAAAAAAAAFw4AAAAAAAAAAAAAAADwvw"
				],
				[
					89,
					1,
					"left_delete",
					null,
					"AQAAABgOAAAAAAAAGA4AAAAAAAABAAAAPw",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABkOAAAAAAAAGQ4AAAAAAAAAAAAAAADwvw"
				],
				[
					90,
					1,
					"insert",
					{
						"characters": "=="
					},
					"AgAAABgOAAAAAAAAGQ4AAAAAAAAAAAAAGQ4AAAAAAAAaDgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABgOAAAAAAAAGA4AAAAAAAAAAAAAAADwvw"
				],
				[
					91,
					1,
					"insert",
					{
						"characters": " 1"
					},
					"AgAAABoOAAAAAAAAGw4AAAAAAAAAAAAAGw4AAAAAAAAcDgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABoOAAAAAAAAGg4AAAAAAAAAAAAAAADwvw"
				],
				[
					92,
					1,
					"insert",
					{
						"characters": " ?"
					},
					"AgAAABwOAAAAAAAAHQ4AAAAAAAAAAAAAHQ4AAAAAAAAeDgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABwOAAAAAAAAHA4AAAAAAAAAAAAAAADwvw"
				],
				[
					93,
					1,
					"insert",
					{
						"characters": " [n"
					},
					"AwAAAB4OAAAAAAAAHw4AAAAAAAAAAAAAHw4AAAAAAAAgDgAAAAAAAAAAAAAgDgAAAAAAACEOAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB4OAAAAAAAAHg4AAAAAAAAAAAAAAADwvw"
				],
				[
					94,
					1,
					"insert",
					{
						"characters": "ull"
					},
					"AwAAACEOAAAAAAAAIg4AAAAAAAAAAAAAIg4AAAAAAAAjDgAAAAAAAAAAAAAjDgAAAAAAACQOAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACEOAAAAAAAAIQ4AAAAAAAAAAAAAAADwvw"
				],
				[
					95,
					1,
					"left_delete",
					null,
					"AQAAACMOAAAAAAAAIw4AAAAAAAABAAAAbA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACQOAAAAAAAAJA4AAAAAAAAAAAAAAADwvw"
				],
				[
					96,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AQAAACMOAAAAAAAAJA4AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACMOAAAAAAAAIw4AAAAAAAAAAAAAAADwvw"
				],
				[
					97,
					3,
					"left_delete",
					null,
					"AwAAACMOAAAAAAAAIw4AAAAAAAABAAAAbCIOAAAAAAAAIg4AAAAAAAABAAAAbCEOAAAAAAAAIQ4AAAAAAAABAAAAdQ",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACQOAAAAAAAAJA4AAAAAAAAAAAAAAADwvw"
				],
				[
					98,
					1,
					"insert",
					{
						"characters": "ull,...args]"
					},
					"DAAAACEOAAAAAAAAIg4AAAAAAAAAAAAAIg4AAAAAAAAjDgAAAAAAAAAAAAAjDgAAAAAAACQOAAAAAAAAAAAAACQOAAAAAAAAJQ4AAAAAAAAAAAAAJQ4AAAAAAAAmDgAAAAAAAAAAAAAmDgAAAAAAACcOAAAAAAAAAAAAACcOAAAAAAAAKA4AAAAAAAAAAAAAKA4AAAAAAAApDgAAAAAAAAAAAAApDgAAAAAAACoOAAAAAAAAAAAAACoOAAAAAAAAKw4AAAAAAAAAAAAAKw4AAAAAAAAsDgAAAAAAAAAAAAAsDgAAAAAAAC0OAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACEOAAAAAAAAIQ4AAAAAAAAAAAAAAADwvw"
				],
				[
					99,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAAC0OAAAAAAAALg4AAAAAAAAAAAAALg4AAAAAAAAvDgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC0OAAAAAAAALQ4AAAAAAAAAAAAAAADwvw"
				],
				[
					100,
					1,
					"insert",
					{
						"characters": " args;"
					},
					"BgAAAC8OAAAAAAAAMA4AAAAAAAAAAAAAMA4AAAAAAAAxDgAAAAAAAAAAAAAxDgAAAAAAADIOAAAAAAAAAAAAADIOAAAAAAAAMw4AAAAAAAAAAAAAMw4AAAAAAAA0DgAAAAAAAAAAAAA0DgAAAAAAADUOAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC8OAAAAAAAALw4AAAAAAAAAAAAAAADwvw"
				],
				[
					111,
					1,
					"insert",
					{
						"characters": "doc"
					},
					"BAAAAAIOAAAAAAAAAw4AAAAAAAAAAAAAAw4AAAAAAAADDgAAAAAAAAgAAABkb2N1bWVudAMOAAAAAAAABA4AAAAAAAAAAAAABA4AAAAAAAAFDgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAIOAAAAAAAACg4AAAAAAAAAAAAAAADwvw"
				],
				[
					125,
					1,
					"paste",
					null,
					"AgAAAH8OAAAAAAAAgg4AAAAAAAAAAAAAgg4AAAAAAACCDgAAAAAAAAgAAABkb2N1bWVudA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH8OAAAAAAAAhw4AAAAAAAAAAAAAAADwvw"
				],
				[
					137,
					1,
					"paste",
					null,
					"AQAAAJYOAAAAAAAAww4AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJYOAAAAAAAAlg4AAAAAAAAAAAAAAADwvw"
				],
				[
					145,
					1,
					"insert",
					{
						"characters": " %&"
					},
					"AwAAAJ8OAAAAAAAAoA4AAAAAAAAAAAAAoA4AAAAAAAChDgAAAAAAAAAAAAChDgAAAAAAAKIOAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ8OAAAAAAAAnw4AAAAAAAAAAAAAAADwvw"
				],
				[
					146,
					2,
					"left_delete",
					null,
					"AgAAAKEOAAAAAAAAoQ4AAAAAAAABAAAAJqAOAAAAAAAAoA4AAAAAAAABAAAAJQ",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKIOAAAAAAAAog4AAAAAAAAAAAAAAADwvw"
				],
				[
					147,
					1,
					"insert",
					{
						"characters": "&&"
					},
					"AgAAAKAOAAAAAAAAoQ4AAAAAAAAAAAAAoQ4AAAAAAACiDgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKAOAAAAAAAAoA4AAAAAAAAAAAAAAADwvw"
				],
				[
					148,
					1,
					"insert",
					{
						"characters": " filename"
					},
					"CQAAAKIOAAAAAAAAow4AAAAAAAAAAAAAow4AAAAAAACkDgAAAAAAAAAAAACkDgAAAAAAAKUOAAAAAAAAAAAAAKUOAAAAAAAApg4AAAAAAAAAAAAApg4AAAAAAACnDgAAAAAAAAAAAACnDgAAAAAAAKgOAAAAAAAAAAAAAKgOAAAAAAAAqQ4AAAAAAAAAAAAAqQ4AAAAAAACqDgAAAAAAAAAAAACqDgAAAAAAAKsOAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKIOAAAAAAAAog4AAAAAAAAAAAAAAADwvw"
				],
				[
					153,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABuDwAAaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJzsKaW1wb3J0ICogYXMgeG1sIGZyb20gJ3htbCc7CmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJzsKaW1wb3J0ICogYXMgcG9pbnRlciBmcm9tICdwb2ludGVyJzsKaW1wb3J0ICogYXMgbG9jYXRpb24gZnJvbSAnbG9jYXRpb24nOwppbXBvcnQgQ29uc29sZSBmcm9tICdjb25zb2xlJzsKaW1wb3J0IHsgbm9kZVR5cGVzLCBQYXJzZXIsIE5vZGUsIE5vZGVMaXN0LCBOYW1lZE5vZGVNYXAsIEVsZW1lbnQsIERvY3VtZW50LCBBdHRyLCBUZXh0LCBUb2tlbkxpc3QsIEZhY3RvcnkgfSBmcm9tICdkb20nOwppbXBvcnQgeyBkZWZpbmUsIGdldE9wdCwgd2Vha0Fzc2lnbiB9IGZyb20gJ3V0aWwnOwppbXBvcnQgKiBhcyB1dGlsIGZyb20gJ3V0aWwnOwppbXBvcnQgKiBhcyBkb20gZnJvbSAnZG9tJzsKaW1wb3J0IFJFUEwgZnJvbSAncmVwbCc7CgpsZXQgcmVwbDsKCmZ1bmN0aW9uIG1haW4oLi4uYXJncykgewogIGdsb2JhbFRoaXMuY29uc29sZSA9IG5ldyBDb25zb2xlKHByb2Nlc3Muc3Rkb3V0LCB7CiAgICBpbnNwZWN0T3B0aW9uczogewogICAgICBjb2xvcnM6IHRydWUsCiAgICAgIGRlcHRoOiAxMCwKICAgICAgc3RyaW5nQnJlYWtOZXdsaW5lOiBmYWxzZSwKICAgICAgbWF4QXJyYXlMZW5ndGg6IDEwMDAwLAogICAgICBjb21wYWN0OiBmYWxzZSwKICAgICAgbWF4U3RyaW5nTGVuZ3RoOiBJbmZpbml0eSwKICAgICAgY3VzdG9tSW5zcGVjdDogdHJ1ZSAvKiwKICAgICAgaGlkZUtleXM6IFtTeW1ib2wuaXRlcmF0b3IsIFN5bWJvbC5mb3IoJ3F1aWNranMuaW5zcGVjdC5jdXN0b20nKSwgU3ltYm9sLmluc3BlY3RdKi8KICAgIH0KICB9KTsKCiAgbGV0IHBhcmFtcyA9IGdldE9wdCgKICAgIHsKICAgICAgb3V0cHV0OiBbdHJ1ZSwgbnVsbCwgJ28nXSwKICAgICAgaW50ZXJhY3RpdmU6IFt0cnVlLCBudWxsLCAnaSddLAogICAgICAnQCc6ICd4bWwnCiAgICB9LAogICAgYXJncwogICk7CgogIE9iamVjdC5hc3NpZ24oZ2xvYmFsVGhpcywgewogICAgeG1sOiB7CiAgICAgIHBhcnNlLAogICAgICBsb2FkLAogICAgICBzYXZlLAogICAgICBzZXJpYWxpemUsCiAgICAgIHJlYWQ6IHhtbC5yZWFkLAogICAgICB3cml0ZTogeG1sLndyaXRlCiAgICB9LAogICAganNvbjogewogICAgICByZWFkKC4uLmFyZ3MpIHsKICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSguLi5hcmdzKTsKICAgICAgfSwKICAgICAgd3JpdGUoLi4uYXJncykgewogICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSguLi5hcmdzKTsKICAgICAgfSwKICAgICAgbG9hZCwKICAgICAgc2F2ZQogICAgfSwKICAgIGRvbSwKICAgIHV0aWwsCiAgICBmcywKICAgIHBhdGgsCiAgICBwb2ludGVyLAogICAgbG9jYXRpb24KICB9KTsKICBPYmplY3QuYXNzaWduKGdsb2JhbFRoaXMsIHsKICAgIC4uLmdsb2JhbFRoaXMueG1sLAogICAgLi4uZG9tLAogICAgLi4udXRpbCwKICAgIC4uLnBvaW50ZXIsCiAgICAuLi5sb2NhdGlvbgogIH0pOwoKICBnbG9iYWxUaGlzLnBhcnNlciA/Pz0gbmV3IGRvbS5QYXJzZXIoKTsKICBnbG9iYWxUaGlzLmRvY3VtZW50cyA/Pz0gW107CgogIGZvcihsZXQgYXJnIG9mIHBhcmFtc1snQCddKSB7CiAgICBnbG9iYWxUaGlzLmRvY3VtZW50ID0gcGFyc2VyLnBhcnNlRnJvbUZpbGUoYXJnKTsKICAgIGRvY3VtZW50cy5wdXNoKGRvY3VtZW50KTsKICB9CgogIHJlcGwgPSBnbG9iYWxUaGlzLnJlcGwgPSBuZXcgUkVQTCgKICAgICdceDFiWzM4OzI7ODA7MjAwOzI1NW0nICsgcGF0aC5iYXNlbmFtZShwcm9jZXNzLmFyZ3ZbMV0sICcuanMnKS5yZXBsYWNlKC90ZXN0Xy8sICcnKSArICcgXHgxYlswbScsCiAgICBmYWxzZQogICk7CiAgcmVwbC5zaG93ID0gcmVwbC5wcmludEZ1bmN0aW9uKCguLi5hcmdzKSA9PiBjb25zb2xlLmxvZyguLi5hcmdzKSk7CiAgcmVwbC5oaXN0b3J5TG9hZChudWxsLCBmcyk7CiAgcmVwbC5sb2FkU2F2ZU9wdGlvbnMoKTsKICByZXBsLmRpcmVjdGl2ZXMgPSB7CiAgICBpOiBbCiAgICAgIG5hbWUgPT4gewogICAgICAgIGNvbnN0IGFsbCA9IG5hbWVbMF0gPT0gJyonOwogICAgICAgIGlmKG5hbWVbMF0gPT0gJyonKSBuYW1lID0gbmFtZS5zbGljZSgxKTsKCiAgICAgICAgaW1wb3J0KG5hbWUpCiAgICAgICAgICAudGhlbihtID0+IHsKICAgICAgICAgICAgLy9yZXBsLnByaW50U3RhdHVzKGBMb2FkZWQgJyR7bmFtZX0nLmApOwogICAgICAgICAgICBjb25zdCBzeW0gPSBuYW1lLnJlcGxhY2UoLy4qXC8vZywgJycpLnJlcGxhY2UoL1wuW14uXSskL2dpLCAnJyk7CiAgICAgICAgICAgIGxldCBlcnIgPSBmYWxzZTsKICAgICAgICAgICAgaWYoYWxsKSB7CiAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHdlYWtBc3NpZ24oZ2xvYmFsVGhpcywgbSk7CiAgICAgICAgICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgICAgICAgICBlcnIgPSBlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICByZXBsLnByaW50U3RhdHVzKAogICAgICAgICAgICAgICAgZXJyCiAgICAgICAgICAgICAgICAgID8gYEVycm9yIGltcG9ydGluZyAnJHtuYW1lfSc6ICR7ZXJyLm1lc3NhZ2V9YAogICAgICAgICAgICAgICAgICA6IGBJbXBvcnRlZCBmcm9tICcke3N5bX0nOiAke09iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG0pLmpvaW4oJyAnKX1gCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBnbG9iYWxUaGlzW3N5bV0gPSBtOwogICAgICAgICAgICAgIHJlcGwucHJpbnRTdGF0dXMoYEltcG9ydGVkICcke3N5bX0nIGFzICcke3N5bX0nYCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pCiAgICAgICAgICAuY2F0Y2goZXJyID0+IHsKICAgICAgICAgICAgcmVwbC5wcmludFN0YXR1cyhgRVJST1I6ICR7ZXJyLm1lc3NhZ2V9YCk7CiAgICAgICAgICB9KTsKICAgICAgfSwKICAgICAgJ2ltcG9ydCBhIG1vZHVsZScKICAgIF0KICB9OwoKICBmb3IobGV0IGFyZyBvZiBwYXJhbXNbJ0AnXSkgewogICAgcGFyc2UoYXJnKTsKICB9CiAgcmVwbC5ydW5TeW5jKCk7Cn0KCnRyeSB7CiAgbWFpbiguLi5zY3JpcHRBcmdzLnNsaWNlKDEpKTsKfSBjYXRjaChlcnJvcikgewogIGNvbnNvbGUubG9nKGBGQUlMOiAke2Vycm9yLm1lc3NhZ2V9XG4ke2Vycm9yLnN0YWNrfWApOwogIHN0ZC5leGl0KDEpOwp9CgpmdW5jdGlvbiBsb2FkKGZpbGVuYW1lLCAuLi5hcmdzKSB7CiAgbGV0IGRhdGE7CgogIHRyeSB7CiAgICBkYXRhID0gZnMucmVhZEZpbGVTeW5jKGZpbGVuYW1lLCAndXRmLTgnKTsKICB9IGNhdGNoKGUpIHt9CgogIGlmKGRhdGEpIHJldHVybiB4bWwucmVhZChkYXRhLCBmaWxlbmFtZSwgLi4uYXJncyk7Cn0KCmZ1bmN0aW9uIHBhcnNlKGZpbGVuYW1lLCAuLi5hcmdzKSB7CiAgbGV0IGRvYywKICAgIHBhcnNlciA9IG5ldyBQYXJzZXIoKTsKCiAgdHJ5IHsKICAgIGRvYyA9IHBhcnNlci5wYXJzZUZyb21GaWxlKGZpbGVuYW1lLCAndXRmLTgnKTsKICB9IGNhdGNoKGUpIHt9CiAgcmV0dXJuIChnbG9iYWxUaGlzLmRvY3VtZW50ID0gZG9jKTsKfQoKZnVuY3Rpb24gc2VyaWFsaXplKC4uLmFyZ3MpIHsKICBsZXQgW2ZpbGVuYW1lLGRvY109YXJncy5sZW5ndGggPT0gMSA/IFtudWxsLC4uLmFyZ3NdIDogYXJnczsKICBsZXQgZGF0YSwKICAgIHMgPSBuZXcgU2VyaWFsaXplcigpOwoKICB0cnkgewogICAgZGF0YSA9IHMuc2VyaWFsaXplVG9TdHJpbmcoZG9jKTsKICB9IGNhdGNoKGUpIHt9CiAgIGlmKGRhdGEgJiYgZmlsZW5hbWUpIGZzLndyaXRlRmlsZVN5bmMoZmlsZW5hbWUsIGRhdGEpOwogcmV0dXJuIGRhdGE7Cn0KCmZ1bmN0aW9uIHNhdmUoZmlsZW5hbWUsIG9iaikgewogIGxldCBkYXRhOwoKICB0cnkgewogICAgZGF0YSA9IHhtbC53cml0ZShvYmopOwogIH0gY2F0Y2goZSkge30KICBpZihkYXRhKSBmcy53cml0ZUZpbGVTeW5jKGZpbGVuYW1lLCBkYXRhKTsKfQoAAAAAAAAAAHIPAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKsOAAAAAAAAqw4AAAAAAAAAAAAAAADwvw"
				],
				[
					166,
					1,
					"paste",
					null,
					"AgAAAMsOAAAAAAAA6w4AAAAAAAAAAAAA6w4AAAAAAADrDgAAAAAAAAQAAABkYXRh",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMsOAAAAAAAAzw4AAAAAAAAAAAAAAADwvw"
				],
				[
					169,
					1,
					"insert",
					{
						"characters": "data"
					},
					"BQAAAM0OAAAAAAAAzg4AAAAAAAAAAAAAzg4AAAAAAADODgAAAAAAAAsAAAAgIHN0ciA9IHN0cs4OAAAAAAAAzw4AAAAAAAAAAAAAzw4AAAAAAADQDgAAAAAAAAAAAADQDgAAAAAAANEOAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM0OAAAAAAAA2A4AAAAAAAAAAAAAAADwvw"
				],
				[
					171,
					1,
					"left_delete",
					null,
					"AQAAAOIOAAAAAAAA4g4AAAAAAAABAAAAOw",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOMOAAAAAAAA4w4AAAAAAAD////////vfw"
				],
				[
					172,
					1,
					"right_delete",
					null,
					"AQAAAOIOAAAAAAAA4g4AAAAAAAABAAAACg",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOIOAAAAAAAA4g4AAAAAAAAAAAAAAADwvw"
				],
				[
					175,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACFDwAAaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJzsKaW1wb3J0ICogYXMgeG1sIGZyb20gJ3htbCc7CmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJzsKaW1wb3J0ICogYXMgcG9pbnRlciBmcm9tICdwb2ludGVyJzsKaW1wb3J0ICogYXMgbG9jYXRpb24gZnJvbSAnbG9jYXRpb24nOwppbXBvcnQgQ29uc29sZSBmcm9tICdjb25zb2xlJzsKaW1wb3J0IHsgbm9kZVR5cGVzLCBQYXJzZXIsIE5vZGUsIE5vZGVMaXN0LCBOYW1lZE5vZGVNYXAsIEVsZW1lbnQsIERvY3VtZW50LCBBdHRyLCBUZXh0LCBUb2tlbkxpc3QsIEZhY3RvcnkgfSBmcm9tICdkb20nOwppbXBvcnQgeyBkZWZpbmUsIGdldE9wdCwgd2Vha0Fzc2lnbiB9IGZyb20gJ3V0aWwnOwppbXBvcnQgKiBhcyB1dGlsIGZyb20gJ3V0aWwnOwppbXBvcnQgKiBhcyBkb20gZnJvbSAnZG9tJzsKaW1wb3J0IFJFUEwgZnJvbSAncmVwbCc7CgpsZXQgcmVwbDsKCmZ1bmN0aW9uIG1haW4oLi4uYXJncykgewogIGdsb2JhbFRoaXMuY29uc29sZSA9IG5ldyBDb25zb2xlKHByb2Nlc3Muc3Rkb3V0LCB7CiAgICBpbnNwZWN0T3B0aW9uczogewogICAgICBjb2xvcnM6IHRydWUsCiAgICAgIGRlcHRoOiAxMCwKICAgICAgc3RyaW5nQnJlYWtOZXdsaW5lOiBmYWxzZSwKICAgICAgbWF4QXJyYXlMZW5ndGg6IDEwMDAwLAogICAgICBjb21wYWN0OiBmYWxzZSwKICAgICAgbWF4U3RyaW5nTGVuZ3RoOiBJbmZpbml0eSwKICAgICAgY3VzdG9tSW5zcGVjdDogdHJ1ZSAvKiwKICAgICAgaGlkZUtleXM6IFtTeW1ib2wuaXRlcmF0b3IsIFN5bWJvbC5mb3IoJ3F1aWNranMuaW5zcGVjdC5jdXN0b20nKSwgU3ltYm9sLmluc3BlY3RdKi8KICAgIH0KICB9KTsKCiAgbGV0IHBhcmFtcyA9IGdldE9wdCgKICAgIHsKICAgICAgb3V0cHV0OiBbdHJ1ZSwgbnVsbCwgJ28nXSwKICAgICAgaW50ZXJhY3RpdmU6IFt0cnVlLCBudWxsLCAnaSddLAogICAgICAnQCc6ICd4bWwnCiAgICB9LAogICAgYXJncwogICk7CgogIE9iamVjdC5hc3NpZ24oZ2xvYmFsVGhpcywgewogICAgeG1sOiB7CiAgICAgIHBhcnNlLAogICAgICBsb2FkLAogICAgICBzYXZlLAogICAgICBzZXJpYWxpemUsCiAgICAgIHJlYWQ6IHhtbC5yZWFkLAogICAgICB3cml0ZTogeG1sLndyaXRlCiAgICB9LAogICAganNvbjogewogICAgICByZWFkKC4uLmFyZ3MpIHsKICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSguLi5hcmdzKTsKICAgICAgfSwKICAgICAgd3JpdGUoLi4uYXJncykgewogICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSguLi5hcmdzKTsKICAgICAgfSwKICAgICAgbG9hZCwKICAgICAgc2F2ZQogICAgfSwKICAgIGRvbSwKICAgIHV0aWwsCiAgICBmcywKICAgIHBhdGgsCiAgICBwb2ludGVyLAogICAgbG9jYXRpb24KICB9KTsKICBPYmplY3QuYXNzaWduKGdsb2JhbFRoaXMsIHsKICAgIC4uLmdsb2JhbFRoaXMueG1sLAogICAgLi4uZG9tLAogICAgLi4udXRpbCwKICAgIC4uLnBvaW50ZXIsCiAgICAuLi5sb2NhdGlvbgogIH0pOwoKICBnbG9iYWxUaGlzLnBhcnNlciA/Pz0gbmV3IGRvbS5QYXJzZXIoKTsKICBnbG9iYWxUaGlzLmRvY3VtZW50cyA/Pz0gW107CgogIGZvcihsZXQgYXJnIG9mIHBhcmFtc1snQCddKSB7CiAgICBnbG9iYWxUaGlzLmRvY3VtZW50ID0gcGFyc2VyLnBhcnNlRnJvbUZpbGUoYXJnKTsKICAgIGRvY3VtZW50cy5wdXNoKGRvY3VtZW50KTsKICB9CgogIHJlcGwgPSBnbG9iYWxUaGlzLnJlcGwgPSBuZXcgUkVQTCgKICAgICdceDFiWzM4OzI7ODA7MjAwOzI1NW0nICsgcGF0aC5iYXNlbmFtZShwcm9jZXNzLmFyZ3ZbMV0sICcuanMnKS5yZXBsYWNlKC90ZXN0Xy8sICcnKSArICcgXHgxYlswbScsCiAgICBmYWxzZQogICk7CiAgcmVwbC5zaG93ID0gcmVwbC5wcmludEZ1bmN0aW9uKCguLi5hcmdzKSA9PiBjb25zb2xlLmxvZyguLi5hcmdzKSk7CiAgcmVwbC5oaXN0b3J5TG9hZChudWxsLCBmcyk7CiAgcmVwbC5sb2FkU2F2ZU9wdGlvbnMoKTsKICByZXBsLmRpcmVjdGl2ZXMgPSB7CiAgICBpOiBbCiAgICAgIG5hbWUgPT4gewogICAgICAgIGNvbnN0IGFsbCA9IG5hbWVbMF0gPT0gJyonOwogICAgICAgIGlmKG5hbWVbMF0gPT0gJyonKSBuYW1lID0gbmFtZS5zbGljZSgxKTsKCiAgICAgICAgaW1wb3J0KG5hbWUpCiAgICAgICAgICAudGhlbihtID0+IHsKICAgICAgICAgICAgLy9yZXBsLnByaW50U3RhdHVzKGBMb2FkZWQgJyR7bmFtZX0nLmApOwogICAgICAgICAgICBjb25zdCBzeW0gPSBuYW1lLnJlcGxhY2UoLy4qXC8vZywgJycpLnJlcGxhY2UoL1wuW14uXSskL2dpLCAnJyk7CiAgICAgICAgICAgIGxldCBlcnIgPSBmYWxzZTsKICAgICAgICAgICAgaWYoYWxsKSB7CiAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHdlYWtBc3NpZ24oZ2xvYmFsVGhpcywgbSk7CiAgICAgICAgICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgICAgICAgICBlcnIgPSBlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICByZXBsLnByaW50U3RhdHVzKAogICAgICAgICAgICAgICAgZXJyCiAgICAgICAgICAgICAgICAgID8gYEVycm9yIGltcG9ydGluZyAnJHtuYW1lfSc6ICR7ZXJyLm1lc3NhZ2V9YAogICAgICAgICAgICAgICAgICA6IGBJbXBvcnRlZCBmcm9tICcke3N5bX0nOiAke09iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG0pLmpvaW4oJyAnKX1gCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBnbG9iYWxUaGlzW3N5bV0gPSBtOwogICAgICAgICAgICAgIHJlcGwucHJpbnRTdGF0dXMoYEltcG9ydGVkICcke3N5bX0nIGFzICcke3N5bX0nYCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pCiAgICAgICAgICAuY2F0Y2goZXJyID0+IHsKICAgICAgICAgICAgcmVwbC5wcmludFN0YXR1cyhgRVJST1I6ICR7ZXJyLm1lc3NhZ2V9YCk7CiAgICAgICAgICB9KTsKICAgICAgfSwKICAgICAgJ2ltcG9ydCBhIG1vZHVsZScKICAgIF0KICB9OwoKICBmb3IobGV0IGFyZyBvZiBwYXJhbXNbJ0AnXSkgewogICAgcGFyc2UoYXJnKTsKICB9CiAgcmVwbC5ydW5TeW5jKCk7Cn0KCnRyeSB7CiAgbWFpbiguLi5zY3JpcHRBcmdzLnNsaWNlKDEpKTsKfSBjYXRjaChlcnJvcikgewogIGNvbnNvbGUubG9nKGBGQUlMOiAke2Vycm9yLm1lc3NhZ2V9XG4ke2Vycm9yLnN0YWNrfWApOwogIHN0ZC5leGl0KDEpOwp9CgpmdW5jdGlvbiBsb2FkKGZpbGVuYW1lLCAuLi5hcmdzKSB7CiAgbGV0IGRhdGE7CgogIHRyeSB7CiAgICBkYXRhID0gZnMucmVhZEZpbGVTeW5jKGZpbGVuYW1lLCAndXRmLTgnKTsKICB9IGNhdGNoKGUpIHt9CgogIGlmKGRhdGEpIHJldHVybiB4bWwucmVhZChkYXRhLCBmaWxlbmFtZSwgLi4uYXJncyk7Cn0KCmZ1bmN0aW9uIHBhcnNlKGZpbGVuYW1lLCAuLi5hcmdzKSB7CiAgbGV0IGRvYywKICAgIHBhcnNlciA9IG5ldyBQYXJzZXIoKTsKCiAgdHJ5IHsKICAgIGRvYyA9IHBhcnNlci5wYXJzZUZyb21GaWxlKGZpbGVuYW1lLCAndXRmLTgnKTsKICB9IGNhdGNoKGUpIHt9CiAgcmV0dXJuIChnbG9iYWxUaGlzLmRvY3VtZW50ID0gZG9jKTsKfQoKZnVuY3Rpb24gc2VyaWFsaXplKC4uLmFyZ3MpIHsKICBsZXQgW2ZpbGVuYW1lLCBkb2NdID0gYXJncy5sZW5ndGggPT0gMSA/IFtudWxsLCAuLi5hcmdzXSA6IGFyZ3M7CiAgbGV0IGRhdGEsCiAgICBzID0gbmV3IFNlcmlhbGl6ZXIoKTsKCiAgdHJ5IHsKICAgIGRhdGEgPSBzLnNlcmlhbGl6ZVRvU3RyaW5nKGRvYyk7CiAgfSBjYXRjaChlKSB7fQogIGlmKGRhdGEgJiYgZmlsZW5hbWUpIGZzLndyaXRlRmlsZVN5bmMoZmlsZW5hbWUsICAgZGF0YS50cmltRW5kKCkgKyAnXG4nKTsKICByZXR1cm4gZGF0YTsKfQoKZnVuY3Rpb24gc2F2ZShmaWxlbmFtZSwgb2JqKSB7CiAgbGV0IGRhdGE7CgogIHRyeSB7CiAgICBkYXRhID0geG1sLndyaXRlKG9iaik7CiAgfSBjYXRjaChlKSB7fQogIGlmKGRhdGEpIGZzLndyaXRlRmlsZVN5bmMoZmlsZW5hbWUsIGRhdGEpOwp9CgAAAAAAAAAAgw8AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOIOAAAAAAAA4g4AAAAAAAAAAAAAAADwvw"
				],
				[
					180,
					1,
					"insert",
					{
						"characters": "return"
					},
					"BgAAALAOAAAAAAAAsQ4AAAAAAAAAAAAAsQ4AAAAAAACyDgAAAAAAAAAAAACyDgAAAAAAALMOAAAAAAAAAAAAALMOAAAAAAAAtA4AAAAAAAAAAAAAtA4AAAAAAAC1DgAAAAAAAAAAAAC1DgAAAAAAALYOAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALAOAAAAAAAAsA4AAAAAAAAAAAAAAADwvw"
				],
				[
					181,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALYOAAAAAAAAtw4AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALYOAAAAAAAAtg4AAAAAAAAAAAAAAADwvw"
				],
				[
					208,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAAYOAAAAAAAABw4AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAYOAAAAAAAABg4AAAAAAAAAAAAAAADwvw"
				],
				[
					209,
					1,
					"insert",
					{
						"characters": " wfn"
					},
					"BAAAAAcOAAAAAAAACA4AAAAAAAAAAAAACA4AAAAAAAAJDgAAAAAAAAAAAAAJDgAAAAAAAAoOAAAAAAAAAAAAAAoOAAAAAAAACw4AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAcOAAAAAAAABw4AAAAAAAAAAAAAAADwvw"
				],
				[
					210,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAAsOAAAAAAAADA4AAAAAAAAAAAAADA4AAAAAAAANDgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAsOAAAAAAAACw4AAAAAAAAAAAAAAADwvw"
				],
				[
					211,
					1,
					"insert",
					{
						"characters": " (filename,da"
					},
					"DQAAAA0OAAAAAAAADg4AAAAAAAAAAAAADg4AAAAAAAAPDgAAAAAAAAAAAAAPDgAAAAAAABAOAAAAAAAAAAAAABAOAAAAAAAAEQ4AAAAAAAAAAAAAEQ4AAAAAAAASDgAAAAAAAAAAAAASDgAAAAAAABMOAAAAAAAAAAAAABMOAAAAAAAAFA4AAAAAAAAAAAAAFA4AAAAAAAAVDgAAAAAAAAAAAAAVDgAAAAAAABYOAAAAAAAAAAAAABYOAAAAAAAAFw4AAAAAAAAAAAAAFw4AAAAAAAAYDgAAAAAAAAAAAAAYDgAAAAAAABkOAAAAAAAAAAAAABkOAAAAAAAAGg4AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA0OAAAAAAAADQ4AAAAAAAAAAAAAAADwvw"
				],
				[
					212,
					1,
					"insert",
					{
						"characters": "ta)"
					},
					"AwAAABoOAAAAAAAAGw4AAAAAAAAAAAAAGw4AAAAAAAAcDgAAAAAAAAAAAAAcDgAAAAAAAB0OAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABoOAAAAAAAAGg4AAAAAAAAAAAAAAADwvw"
				],
				[
					213,
					1,
					"insert",
					{
						"characters": " =>"
					},
					"AwAAAB0OAAAAAAAAHg4AAAAAAAAAAAAAHg4AAAAAAAAfDgAAAAAAAAAAAAAfDgAAAAAAACAOAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB0OAAAAAAAAHQ4AAAAAAAAAAAAAAADwvw"
				],
				[
					214,
					1,
					"insert",
					{
						"characters": "  "
					},
					"AgAAACAOAAAAAAAAIQ4AAAAAAAAAAAAAIQ4AAAAAAAAiDgAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACAOAAAAAAAAIA4AAAAAAAAAAAAAAADwvw"
				],
				[
					223,
					1,
					"cut",
					null,
					"AQAAANMOAAAAAAAA0w4AAAAAAAAQAAAAZnMud3JpdGVGaWxlU3luYw",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANMOAAAAAAAA4w4AAAAAAAAAAAAAAADwvw"
				],
				[
					224,
					1,
					"insert",
					{
						"characters": "wfn"
					},
					"AwAAANMOAAAAAAAA1A4AAAAAAAAAAAAA1A4AAAAAAADVDgAAAAAAAAAAAADVDgAAAAAAANYOAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANMOAAAAAAAA0w4AAAAAAAAAAAAAAADwvw"
				],
				[
					227,
					1,
					"paste",
					null,
					"AQAAACIOAAAAAAAAMg4AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACIOAAAAAAAAIg4AAAAAAAAAAAAAAADwvw"
				],
				[
					243,
					1,
					"insert",
					{
						"characters": "(filename,data)"
					},
					"DwAAADIOAAAAAAAAMw4AAAAAAAAAAAAAMw4AAAAAAAA0DgAAAAAAAAAAAAA0DgAAAAAAADUOAAAAAAAAAAAAADUOAAAAAAAANg4AAAAAAAAAAAAANg4AAAAAAAA3DgAAAAAAAAAAAAA3DgAAAAAAADgOAAAAAAAAAAAAADgOAAAAAAAAOQ4AAAAAAAAAAAAAOQ4AAAAAAAA6DgAAAAAAAAAAAAA6DgAAAAAAADsOAAAAAAAAAAAAADsOAAAAAAAAPA4AAAAAAAAAAAAAPA4AAAAAAAA9DgAAAAAAAAAAAAA9DgAAAAAAAD4OAAAAAAAAAAAAAD4OAAAAAAAAPw4AAAAAAAAAAAAAPw4AAAAAAABADgAAAAAAAAAAAABADgAAAAAAAEEOAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADIOAAAAAAAAMg4AAAAAAAAAAAAAAADwvw"
				],
				[
					258,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC4DwAAaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJzsKaW1wb3J0ICogYXMgeG1sIGZyb20gJ3htbCc7CmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJzsKaW1wb3J0ICogYXMgcG9pbnRlciBmcm9tICdwb2ludGVyJzsKaW1wb3J0ICogYXMgbG9jYXRpb24gZnJvbSAnbG9jYXRpb24nOwppbXBvcnQgQ29uc29sZSBmcm9tICdjb25zb2xlJzsKaW1wb3J0IHsgbm9kZVR5cGVzLCBQYXJzZXIsIE5vZGUsIE5vZGVMaXN0LCBOYW1lZE5vZGVNYXAsIEVsZW1lbnQsIERvY3VtZW50LCBBdHRyLCBUZXh0LCBUb2tlbkxpc3QsIEZhY3RvcnkgfSBmcm9tICdkb20nOwppbXBvcnQgeyBkZWZpbmUsIGdldE9wdCwgd2Vha0Fzc2lnbiB9IGZyb20gJ3V0aWwnOwppbXBvcnQgKiBhcyB1dGlsIGZyb20gJ3V0aWwnOwppbXBvcnQgKiBhcyBkb20gZnJvbSAnZG9tJzsKaW1wb3J0IFJFUEwgZnJvbSAncmVwbCc7CgpsZXQgcmVwbDsKCmZ1bmN0aW9uIG1haW4oLi4uYXJncykgewogIGdsb2JhbFRoaXMuY29uc29sZSA9IG5ldyBDb25zb2xlKHByb2Nlc3Muc3Rkb3V0LCB7CiAgICBpbnNwZWN0T3B0aW9uczogewogICAgICBjb2xvcnM6IHRydWUsCiAgICAgIGRlcHRoOiAxMCwKICAgICAgc3RyaW5nQnJlYWtOZXdsaW5lOiBmYWxzZSwKICAgICAgbWF4QXJyYXlMZW5ndGg6IDEwMDAwLAogICAgICBjb21wYWN0OiBmYWxzZSwKICAgICAgbWF4U3RyaW5nTGVuZ3RoOiBJbmZpbml0eSwKICAgICAgY3VzdG9tSW5zcGVjdDogdHJ1ZSAvKiwKICAgICAgaGlkZUtleXM6IFtTeW1ib2wuaXRlcmF0b3IsIFN5bWJvbC5mb3IoJ3F1aWNranMuaW5zcGVjdC5jdXN0b20nKSwgU3ltYm9sLmluc3BlY3RdKi8KICAgIH0KICB9KTsKCiAgbGV0IHBhcmFtcyA9IGdldE9wdCgKICAgIHsKICAgICAgb3V0cHV0OiBbdHJ1ZSwgbnVsbCwgJ28nXSwKICAgICAgaW50ZXJhY3RpdmU6IFt0cnVlLCBudWxsLCAnaSddLAogICAgICAnQCc6ICd4bWwnCiAgICB9LAogICAgYXJncwogICk7CgogIE9iamVjdC5hc3NpZ24oZ2xvYmFsVGhpcywgewogICAgeG1sOiB7CiAgICAgIHBhcnNlLAogICAgICBsb2FkLAogICAgICBzYXZlLAogICAgICBzZXJpYWxpemUsCiAgICAgIHJlYWQ6IHhtbC5yZWFkLAogICAgICB3cml0ZTogeG1sLndyaXRlCiAgICB9LAogICAganNvbjogewogICAgICByZWFkKC4uLmFyZ3MpIHsKICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSguLi5hcmdzKTsKICAgICAgfSwKICAgICAgd3JpdGUoLi4uYXJncykgewogICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSguLi5hcmdzKTsKICAgICAgfSwKICAgICAgbG9hZCwKICAgICAgc2F2ZQogICAgfSwKICAgIGRvbSwKICAgIHV0aWwsCiAgICBmcywKICAgIHBhdGgsCiAgICBwb2ludGVyLAogICAgbG9jYXRpb24KICB9KTsKICBPYmplY3QuYXNzaWduKGdsb2JhbFRoaXMsIHsKICAgIC4uLmdsb2JhbFRoaXMueG1sLAogICAgLi4uZG9tLAogICAgLi4udXRpbCwKICAgIC4uLnBvaW50ZXIsCiAgICAuLi5sb2NhdGlvbgogIH0pOwoKICBnbG9iYWxUaGlzLnBhcnNlciA/Pz0gbmV3IGRvbS5QYXJzZXIoKTsKICBnbG9iYWxUaGlzLmRvY3VtZW50cyA/Pz0gW107CgogIGZvcihsZXQgYXJnIG9mIHBhcmFtc1snQCddKSB7CiAgICBnbG9iYWxUaGlzLmRvY3VtZW50ID0gcGFyc2VyLnBhcnNlRnJvbUZpbGUoYXJnKTsKICAgIGRvY3VtZW50cy5wdXNoKGRvY3VtZW50KTsKICB9CgogIHJlcGwgPSBnbG9iYWxUaGlzLnJlcGwgPSBuZXcgUkVQTCgKICAgICdceDFiWzM4OzI7ODA7MjAwOzI1NW0nICsgcGF0aC5iYXNlbmFtZShwcm9jZXNzLmFyZ3ZbMV0sICcuanMnKS5yZXBsYWNlKC90ZXN0Xy8sICcnKSArICcgXHgxYlswbScsCiAgICBmYWxzZQogICk7CiAgcmVwbC5zaG93ID0gcmVwbC5wcmludEZ1bmN0aW9uKCguLi5hcmdzKSA9PiBjb25zb2xlLmxvZyguLi5hcmdzKSk7CiAgcmVwbC5oaXN0b3J5TG9hZChudWxsLCBmcyk7CiAgcmVwbC5sb2FkU2F2ZU9wdGlvbnMoKTsKICByZXBsLmRpcmVjdGl2ZXMgPSB7CiAgICBpOiBbCiAgICAgIG5hbWUgPT4gewogICAgICAgIGNvbnN0IGFsbCA9IG5hbWVbMF0gPT0gJyonOwogICAgICAgIGlmKG5hbWVbMF0gPT0gJyonKSBuYW1lID0gbmFtZS5zbGljZSgxKTsKCiAgICAgICAgaW1wb3J0KG5hbWUpCiAgICAgICAgICAudGhlbihtID0+IHsKICAgICAgICAgICAgLy9yZXBsLnByaW50U3RhdHVzKGBMb2FkZWQgJyR7bmFtZX0nLmApOwogICAgICAgICAgICBjb25zdCBzeW0gPSBuYW1lLnJlcGxhY2UoLy4qXC8vZywgJycpLnJlcGxhY2UoL1wuW14uXSskL2dpLCAnJyk7CiAgICAgICAgICAgIGxldCBlcnIgPSBmYWxzZTsKICAgICAgICAgICAgaWYoYWxsKSB7CiAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHdlYWtBc3NpZ24oZ2xvYmFsVGhpcywgbSk7CiAgICAgICAgICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgICAgICAgICBlcnIgPSBlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICByZXBsLnByaW50U3RhdHVzKAogICAgICAgICAgICAgICAgZXJyCiAgICAgICAgICAgICAgICAgID8gYEVycm9yIGltcG9ydGluZyAnJHtuYW1lfSc6ICR7ZXJyLm1lc3NhZ2V9YAogICAgICAgICAgICAgICAgICA6IGBJbXBvcnRlZCBmcm9tICcke3N5bX0nOiAke09iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG0pLmpvaW4oJyAnKX1gCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBnbG9iYWxUaGlzW3N5bV0gPSBtOwogICAgICAgICAgICAgIHJlcGwucHJpbnRTdGF0dXMoYEltcG9ydGVkICcke3N5bX0nIGFzICcke3N5bX0nYCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pCiAgICAgICAgICAuY2F0Y2goZXJyID0+IHsKICAgICAgICAgICAgcmVwbC5wcmludFN0YXR1cyhgRVJST1I6ICR7ZXJyLm1lc3NhZ2V9YCk7CiAgICAgICAgICB9KTsKICAgICAgfSwKICAgICAgJ2ltcG9ydCBhIG1vZHVsZScKICAgIF0KICB9OwoKICBmb3IobGV0IGFyZyBvZiBwYXJhbXNbJ0AnXSkgewogICAgcGFyc2UoYXJnKTsKICB9CiAgcmVwbC5ydW5TeW5jKCk7Cn0KCnRyeSB7CiAgbWFpbiguLi5zY3JpcHRBcmdzLnNsaWNlKDEpKTsKfSBjYXRjaChlcnJvcikgewogIGNvbnNvbGUubG9nKGBGQUlMOiAke2Vycm9yLm1lc3NhZ2V9XG4ke2Vycm9yLnN0YWNrfWApOwogIHN0ZC5leGl0KDEpOwp9CgpmdW5jdGlvbiBsb2FkKGZpbGVuYW1lLCAuLi5hcmdzKSB7CiAgbGV0IGRhdGE7CgogIHRyeSB7CiAgICBkYXRhID0gZnMucmVhZEZpbGVTeW5jKGZpbGVuYW1lLCAndXRmLTgnKTsKICB9IGNhdGNoKGUpIHt9CgogIGlmKGRhdGEpIHJldHVybiB4bWwucmVhZChkYXRhLCBmaWxlbmFtZSwgLi4uYXJncyk7Cn0KCmZ1bmN0aW9uIHBhcnNlKGZpbGVuYW1lLCAuLi5hcmdzKSB7CiAgbGV0IGRvYywKICAgIHBhcnNlciA9IG5ldyBQYXJzZXIoKTsKCiAgdHJ5IHsKICAgIGRvYyA9IHBhcnNlci5wYXJzZUZyb21GaWxlKGZpbGVuYW1lLCAndXRmLTgnKTsKICB9IGNhdGNoKGUpIHt9CiAgcmV0dXJuIChnbG9iYWxUaGlzLmRvY3VtZW50ID0gZG9jKTsKfQoKZnVuY3Rpb24gc2VyaWFsaXplKC4uLmFyZ3MpIHsKICBsZXQgW2ZpbGVuYW1lLCBkb2MsIHdmbiA9IChmaWxlbmFtZSxkYXRhKSA9PiAgZnMud3JpdGVGaWxlU3luYyhmaWxlbmFtZSxkYXRhKV0gPSBhcmdzLmxlbmd0aCA9PSAxID8gW251bGwsIC4uLmFyZ3NdIDogYXJnczsKICBsZXQgZGF0YSwKICAgIHMgPSBuZXcgU2VyaWFsaXplcigpOwoKICB0cnkgewogICAgZGF0YSA9IHMuc2VyaWFsaXplVG9TdHJpbmcoZG9jKTsKICB9IGNhdGNoKGUpIHt9CiAgaWYoZGF0YSAmJiBmaWxlbmFtZSkgcmV0dXJuIHdmbihmaWxlbmFtZSwgZGF0YS50cmltRW5kKCkgKyAnXG4nKTsKICByZXR1cm4gZGF0YTsKfQoKZnVuY3Rpb24gc2F2ZShmaWxlbmFtZSwgb2JqKSB7CiAgbGV0IGRhdGE7CgogIHRyeSB7CiAgICBkYXRhID0geG1sLndyaXRlKG9iaik7CiAgfSBjYXRjaChlKSB7fQogIGlmKGRhdGEpIGZzLndyaXRlRmlsZVN5bmMoZmlsZW5hbWUsIGRhdGEpOwp9CgAAAAAAAAAAvQ8AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANMOAAAAAAAA0w4AAAAAAAAAAAAAAADwvw"
				],
				[
					267,
					1,
					"cut",
					null,
					"AQAAAAYOAAAAAAAABg4AAAAAAAA8AAAALCB3Zm4gPSAoZmlsZW5hbWUsIGRhdGEpID0+IGZzLndyaXRlRmlsZVN5bmMoZmlsZW5hbWUsIGRhdGEp",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAYOAAAAAAAAQg4AAAAAAAAAAAAAAADwvw"
				],
				[
					268,
					1,
					"paste",
					null,
					"AQAAAAYOAAAAAAAAQg4AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAYOAAAAAAAABg4AAAAAAAAAAAAAAADwvw"
				],
				[
					271,
					1,
					"paste",
					null,
					"AQAAAEoPAAAAAAAAhg8AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEoPAAAAAAAASg8AAAAAAAAAAAAAAADwvw"
				],
				[
					280,
					4,
					"left_delete",
					null,
					"BAAAANgPAAAAAAAA2A8AAAAAAAANAAAAd3JpdGVGaWxlU3luY9cPAAAAAAAA1w8AAAAAAAABAAAALtYPAAAAAAAA1g8AAAAAAAABAAAAc9UPAAAAAAAA1Q8AAAAAAAABAAAAZg",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANgPAAAAAAAA5Q8AAAAAAAAAAAAAAADwvw"
				],
				[
					281,
					1,
					"insert",
					{
						"characters": "wfmn"
					},
					"BAAAANUPAAAAAAAA1g8AAAAAAAAAAAAA1g8AAAAAAADXDwAAAAAAAAAAAADXDwAAAAAAANgPAAAAAAAAAAAAANgPAAAAAAAA2Q8AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANUPAAAAAAAA1Q8AAAAAAAAAAAAAAADwvw"
				],
				[
					282,
					2,
					"left_delete",
					null,
					"AgAAANgPAAAAAAAA2A8AAAAAAAABAAAAbtcPAAAAAAAA1w8AAAAAAAABAAAAbQ",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANkPAAAAAAAA2Q8AAAAAAAAAAAAAAADwvw"
				],
				[
					283,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAANcPAAAAAAAA2A8AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANcPAAAAAAAA1w8AAAAAAAAAAAAAAADwvw"
				],
				[
					285,
					1,
					"insert",
					{
						"characters": "return"
					},
					"BgAAANUPAAAAAAAA1g8AAAAAAAAAAAAA1g8AAAAAAADXDwAAAAAAAAAAAADXDwAAAAAAANgPAAAAAAAAAAAAANgPAAAAAAAA2Q8AAAAAAAAAAAAA2Q8AAAAAAADaDwAAAAAAAAAAAADaDwAAAAAAANsPAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANUPAAAAAAAA1Q8AAAAAAAAAAAAAAADwvw"
				],
				[
					286,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANsPAAAAAAAA3A8AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANsPAAAAAAAA2w8AAAAAAAAAAAAAAADwvw"
				],
				[
					296,
					1,
					"paste",
					null,
					"AQAAAO4PAAAAAAAA/w8AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO4PAAAAAAAA7g8AAAAAAAAAAAAAAADwvw"
				],
				[
					323,
					1,
					"insert",
					{
						"characters": ",err"
					},
					"BAAAAJQPAAAAAAAAlQ8AAAAAAAAAAAAAlQ8AAAAAAACWDwAAAAAAAAAAAACWDwAAAAAAAJcPAAAAAAAAAAAAAJcPAAAAAAAAmA8AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJQPAAAAAAAAlA8AAAAAAAAAAAAAAADwvw"
				],
				[
					327,
					1,
					"insert",
					{
						"characters": "err=e"
					},
					"BQAAAMwPAAAAAAAAzQ8AAAAAAAAAAAAAzQ8AAAAAAADODwAAAAAAAAAAAADODwAAAAAAAM8PAAAAAAAAAAAAAM8PAAAAAAAA0A8AAAAAAAAAAAAA0A8AAAAAAADRDwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMwPAAAAAAAAzA8AAAAAAAAAAAAAAADwvw"
				],
				[
					332,
					1,
					"insert",
					{
						"characters": " &&!err"
					},
					"BwAAANwPAAAAAAAA3Q8AAAAAAAAAAAAA3Q8AAAAAAADeDwAAAAAAAAAAAADeDwAAAAAAAN8PAAAAAAAAAAAAAN8PAAAAAAAA4A8AAAAAAAAAAAAA4A8AAAAAAADhDwAAAAAAAAAAAADhDwAAAAAAAOIPAAAAAAAAAAAAAOIPAAAAAAAA4w8AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANwPAAAAAAAA3A8AAAAAAAAAAAAAAADwvw"
				],
				[
					334,
					1,
					"insert",
					{
						"characters": "\nreturn"
					},
					"CAAAABEQAAAAAAAAEhAAAAAAAAAAAAAAEhAAAAAAAAAUEAAAAAAAAAAAAAAUEAAAAAAAABUQAAAAAAAAAAAAABUQAAAAAAAAFhAAAAAAAAAAAAAAFhAAAAAAAAAXEAAAAAAAAAAAAAAXEAAAAAAAABgQAAAAAAAAAAAAABgQAAAAAAAAGRAAAAAAAAAAAAAAGRAAAAAAAAAaEAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABEQAAAAAAAAERAAAAAAAAD////////vfw"
				],
				[
					335,
					6,
					"left_delete",
					null,
					"BgAAABkQAAAAAAAAGRAAAAAAAAABAAAAbhgQAAAAAAAAGBAAAAAAAAABAAAAchcQAAAAAAAAFxAAAAAAAAABAAAAdRYQAAAAAAAAFhAAAAAAAAABAAAAdBUQAAAAAAAAFRAAAAAAAAABAAAAZRQQAAAAAAAAFBAAAAAAAAABAAAAcg",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABoQAAAAAAAAGhAAAAAAAAAAAAAAAADwvw"
				],
				[
					336,
					1,
					"insert",
					{
						"characters": "ifc"
					},
					"AwAAABQQAAAAAAAAFRAAAAAAAAAAAAAAFRAAAAAAAAAWEAAAAAAAAAAAAAAWEAAAAAAAABcQAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABQQAAAAAAAAFBAAAAAAAAAAAAAAAADwvw"
				],
				[
					337,
					2,
					"left_delete",
					null,
					"AgAAABYQAAAAAAAAFhAAAAAAAAABAAAAYxUQAAAAAAAAFRAAAAAAAAABAAAAZg",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABcQAAAAAAAAFxAAAAAAAAAAAAAAAADwvw"
				],
				[
					338,
					1,
					"insert",
					{
						"characters": "f(err)"
					},
					"BgAAABUQAAAAAAAAFhAAAAAAAAAAAAAAFhAAAAAAAAAXEAAAAAAAAAAAAAAXEAAAAAAAABgQAAAAAAAAAAAAABgQAAAAAAAAGRAAAAAAAAAAAAAAGRAAAAAAAAAaEAAAAAAAAAAAAAAaEAAAAAAAABsQAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABUQAAAAAAAAFRAAAAAAAAAAAAAAAADwvw"
				],
				[
					339,
					1,
					"insert",
					{
						"characters": " throw"
					},
					"BgAAABsQAAAAAAAAHBAAAAAAAAAAAAAAHBAAAAAAAAAdEAAAAAAAAAAAAAAdEAAAAAAAAB4QAAAAAAAAAAAAAB4QAAAAAAAAHxAAAAAAAAAAAAAAHxAAAAAAAAAgEAAAAAAAAAAAAAAgEAAAAAAAACEQAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABsQAAAAAAAAGxAAAAAAAAAAAAAAAADwvw"
				],
				[
					340,
					1,
					"insert",
					{
						"characters": " err;"
					},
					"BQAAACEQAAAAAAAAIhAAAAAAAAAAAAAAIhAAAAAAAAAjEAAAAAAAAAAAAAAjEAAAAAAAACQQAAAAAAAAAAAAACQQAAAAAAAAJRAAAAAAAAAAAAAAJRAAAAAAAAAmEAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACEQAAAAAAAAIRAAAAAAAAAAAAAAAADwvw"
				],
				[
					346,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAApEAAAaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJzsKaW1wb3J0ICogYXMgeG1sIGZyb20gJ3htbCc7CmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJzsKaW1wb3J0ICogYXMgcG9pbnRlciBmcm9tICdwb2ludGVyJzsKaW1wb3J0ICogYXMgbG9jYXRpb24gZnJvbSAnbG9jYXRpb24nOwppbXBvcnQgQ29uc29sZSBmcm9tICdjb25zb2xlJzsKaW1wb3J0IHsgbm9kZVR5cGVzLCBQYXJzZXIsIE5vZGUsIE5vZGVMaXN0LCBOYW1lZE5vZGVNYXAsIEVsZW1lbnQsIERvY3VtZW50LCBBdHRyLCBUZXh0LCBUb2tlbkxpc3QsIEZhY3RvcnkgfSBmcm9tICdkb20nOwppbXBvcnQgeyBkZWZpbmUsIGdldE9wdCwgd2Vha0Fzc2lnbiB9IGZyb20gJ3V0aWwnOwppbXBvcnQgKiBhcyB1dGlsIGZyb20gJ3V0aWwnOwppbXBvcnQgKiBhcyBkb20gZnJvbSAnZG9tJzsKaW1wb3J0IFJFUEwgZnJvbSAncmVwbCc7CgpsZXQgcmVwbDsKCmZ1bmN0aW9uIG1haW4oLi4uYXJncykgewogIGdsb2JhbFRoaXMuY29uc29sZSA9IG5ldyBDb25zb2xlKHByb2Nlc3Muc3Rkb3V0LCB7CiAgICBpbnNwZWN0T3B0aW9uczogewogICAgICBjb2xvcnM6IHRydWUsCiAgICAgIGRlcHRoOiAxMCwKICAgICAgc3RyaW5nQnJlYWtOZXdsaW5lOiBmYWxzZSwKICAgICAgbWF4QXJyYXlMZW5ndGg6IDEwMDAwLAogICAgICBjb21wYWN0OiBmYWxzZSwKICAgICAgbWF4U3RyaW5nTGVuZ3RoOiBJbmZpbml0eSwKICAgICAgY3VzdG9tSW5zcGVjdDogdHJ1ZSAvKiwKICAgICAgaGlkZUtleXM6IFtTeW1ib2wuaXRlcmF0b3IsIFN5bWJvbC5mb3IoJ3F1aWNranMuaW5zcGVjdC5jdXN0b20nKSwgU3ltYm9sLmluc3BlY3RdKi8KICAgIH0KICB9KTsKCiAgbGV0IHBhcmFtcyA9IGdldE9wdCgKICAgIHsKICAgICAgb3V0cHV0OiBbdHJ1ZSwgbnVsbCwgJ28nXSwKICAgICAgaW50ZXJhY3RpdmU6IFt0cnVlLCBudWxsLCAnaSddLAogICAgICAnQCc6ICd4bWwnCiAgICB9LAogICAgYXJncwogICk7CgogIE9iamVjdC5hc3NpZ24oZ2xvYmFsVGhpcywgewogICAgeG1sOiB7CiAgICAgIHBhcnNlLAogICAgICBsb2FkLAogICAgICBzYXZlLAogICAgICBzZXJpYWxpemUsCiAgICAgIHJlYWQ6IHhtbC5yZWFkLAogICAgICB3cml0ZTogeG1sLndyaXRlCiAgICB9LAogICAganNvbjogewogICAgICByZWFkKC4uLmFyZ3MpIHsKICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSguLi5hcmdzKTsKICAgICAgfSwKICAgICAgd3JpdGUoLi4uYXJncykgewogICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSguLi5hcmdzKTsKICAgICAgfSwKICAgICAgbG9hZCwKICAgICAgc2F2ZQogICAgfSwKICAgIGRvbSwKICAgIHV0aWwsCiAgICBmcywKICAgIHBhdGgsCiAgICBwb2ludGVyLAogICAgbG9jYXRpb24KICB9KTsKICBPYmplY3QuYXNzaWduKGdsb2JhbFRoaXMsIHsKICAgIC4uLmdsb2JhbFRoaXMueG1sLAogICAgLi4uZG9tLAogICAgLi4udXRpbCwKICAgIC4uLnBvaW50ZXIsCiAgICAuLi5sb2NhdGlvbgogIH0pOwoKICBnbG9iYWxUaGlzLnBhcnNlciA/Pz0gbmV3IGRvbS5QYXJzZXIoKTsKICBnbG9iYWxUaGlzLmRvY3VtZW50cyA/Pz0gW107CgogIGZvcihsZXQgYXJnIG9mIHBhcmFtc1snQCddKSB7CiAgICBnbG9iYWxUaGlzLmRvY3VtZW50ID0gcGFyc2VyLnBhcnNlRnJvbUZpbGUoYXJnKTsKICAgIGRvY3VtZW50cy5wdXNoKGRvY3VtZW50KTsKICB9CgogIHJlcGwgPSBnbG9iYWxUaGlzLnJlcGwgPSBuZXcgUkVQTCgKICAgICdceDFiWzM4OzI7ODA7MjAwOzI1NW0nICsgcGF0aC5iYXNlbmFtZShwcm9jZXNzLmFyZ3ZbMV0sICcuanMnKS5yZXBsYWNlKC90ZXN0Xy8sICcnKSArICcgXHgxYlswbScsCiAgICBmYWxzZQogICk7CiAgcmVwbC5zaG93ID0gcmVwbC5wcmludEZ1bmN0aW9uKCguLi5hcmdzKSA9PiBjb25zb2xlLmxvZyguLi5hcmdzKSk7CiAgcmVwbC5oaXN0b3J5TG9hZChudWxsLCBmcyk7CiAgcmVwbC5sb2FkU2F2ZU9wdGlvbnMoKTsKICByZXBsLmRpcmVjdGl2ZXMgPSB7CiAgICBpOiBbCiAgICAgIG5hbWUgPT4gewogICAgICAgIGNvbnN0IGFsbCA9IG5hbWVbMF0gPT0gJyonOwogICAgICAgIGlmKG5hbWVbMF0gPT0gJyonKSBuYW1lID0gbmFtZS5zbGljZSgxKTsKCiAgICAgICAgaW1wb3J0KG5hbWUpCiAgICAgICAgICAudGhlbihtID0+IHsKICAgICAgICAgICAgLy9yZXBsLnByaW50U3RhdHVzKGBMb2FkZWQgJyR7bmFtZX0nLmApOwogICAgICAgICAgICBjb25zdCBzeW0gPSBuYW1lLnJlcGxhY2UoLy4qXC8vZywgJycpLnJlcGxhY2UoL1wuW14uXSskL2dpLCAnJyk7CiAgICAgICAgICAgIGxldCBlcnIgPSBmYWxzZTsKICAgICAgICAgICAgaWYoYWxsKSB7CiAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHdlYWtBc3NpZ24oZ2xvYmFsVGhpcywgbSk7CiAgICAgICAgICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgICAgICAgICBlcnIgPSBlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICByZXBsLnByaW50U3RhdHVzKAogICAgICAgICAgICAgICAgZXJyCiAgICAgICAgICAgICAgICAgID8gYEVycm9yIGltcG9ydGluZyAnJHtuYW1lfSc6ICR7ZXJyLm1lc3NhZ2V9YAogICAgICAgICAgICAgICAgICA6IGBJbXBvcnRlZCBmcm9tICcke3N5bX0nOiAke09iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG0pLmpvaW4oJyAnKX1gCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBnbG9iYWxUaGlzW3N5bV0gPSBtOwogICAgICAgICAgICAgIHJlcGwucHJpbnRTdGF0dXMoYEltcG9ydGVkICcke3N5bX0nIGFzICcke3N5bX0nYCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pCiAgICAgICAgICAuY2F0Y2goZXJyID0+IHsKICAgICAgICAgICAgcmVwbC5wcmludFN0YXR1cyhgRVJST1I6ICR7ZXJyLm1lc3NhZ2V9YCk7CiAgICAgICAgICB9KTsKICAgICAgfSwKICAgICAgJ2ltcG9ydCBhIG1vZHVsZScKICAgIF0KICB9OwoKICBmb3IobGV0IGFyZyBvZiBwYXJhbXNbJ0AnXSkgewogICAgcGFyc2UoYXJnKTsKICB9CiAgcmVwbC5ydW5TeW5jKCk7Cn0KCnRyeSB7CiAgbWFpbiguLi5zY3JpcHRBcmdzLnNsaWNlKDEpKTsKfSBjYXRjaChlcnJvcikgewogIGNvbnNvbGUubG9nKGBGQUlMOiAke2Vycm9yLm1lc3NhZ2V9XG4ke2Vycm9yLnN0YWNrfWApOwogIHN0ZC5leGl0KDEpOwp9CgpmdW5jdGlvbiBsb2FkKGZpbGVuYW1lLCAuLi5hcmdzKSB7CiAgbGV0IGRhdGE7CgogIHRyeSB7CiAgICBkYXRhID0gZnMucmVhZEZpbGVTeW5jKGZpbGVuYW1lLCAndXRmLTgnKTsKICB9IGNhdGNoKGUpIHt9CgogIGlmKGRhdGEpIHJldHVybiB4bWwucmVhZChkYXRhLCBmaWxlbmFtZSwgLi4uYXJncyk7Cn0KCmZ1bmN0aW9uIHBhcnNlKGZpbGVuYW1lLCAuLi5hcmdzKSB7CiAgbGV0IGRvYywKICAgIHBhcnNlciA9IG5ldyBQYXJzZXIoKTsKCiAgdHJ5IHsKICAgIGRvYyA9IHBhcnNlci5wYXJzZUZyb21GaWxlKGZpbGVuYW1lLCAndXRmLTgnKTsKICB9IGNhdGNoKGUpIHt9CiAgcmV0dXJuIChnbG9iYWxUaGlzLmRvY3VtZW50ID0gZG9jKTsKfQoKZnVuY3Rpb24gc2VyaWFsaXplKC4uLmFyZ3MpIHsKICBsZXQgW2ZpbGVuYW1lLCBkb2MsIHdmbiA9IChmaWxlbmFtZSwgZGF0YSkgPT4gZnMud3JpdGVGaWxlU3luYyhmaWxlbmFtZSwgZGF0YSldID0KICAgIGFyZ3MubGVuZ3RoID09IDEgPyBbbnVsbCwgLi4uYXJnc10gOiBhcmdzOwogIGxldCBkYXRhLAogICAgcyA9IG5ldyBTZXJpYWxpemVyKCk7CgogIHRyeSB7CiAgICBkYXRhID0gcy5zZXJpYWxpemVUb1N0cmluZyhkb2MpOwogIH0gY2F0Y2goZSkge30KICBpZihkYXRhICYmIGZpbGVuYW1lKSByZXR1cm4gd2ZuKGZpbGVuYW1lLCBkYXRhLnRyaW1FbmQoKSArICdcbicpOwogIHJldHVybiBkYXRhOwp9CgpmdW5jdGlvbiBzYXZlKGZpbGVuYW1lLCBvYmosIHdmbiA9IChmaWxlbmFtZSwgZGF0YSkgPT4gZnMud3JpdGVGaWxlU3luYyhmaWxlbmFtZSwgZGF0YSkpIHsKICBsZXQgZGF0YSxlcnI7CgogIHRyeSB7CiAgICBkYXRhID0geG1sLndyaXRlKG9iaik7CiAgfSBjYXRjaChlKSB7ZXJyPWV9CiAgaWYoZGF0YSAmJiFlcnIpIHJldHVybiB3Zm4oZmlsZW5hbWUsIGRhdGEudHJpbUVuZCgpICsgJ1xuJyk7CiAgaWYoZXJyKSB0aHJvdyBlcnI7Cn0KAAAAAAAAAAA2EAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACcQAAAAAAAAJxAAAAAAAAAAAAAAAADwvw"
				],
				[
					364,
					1,
					"insert",
					{
						"characters": "\nlet"
					},
					"BQAAAJoPAAAAAAAAmw8AAAAAAAAAAAAAmw8AAAAAAACdDwAAAAAAAAAAAACdDwAAAAAAAJ4PAAAAAAAAAAAAAJ4PAAAAAAAAnw8AAAAAAAAAAAAAnw8AAAAAAACgDwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJoPAAAAAAAAmg8AAAAAAAAAAAAAAADwvw"
				],
				[
					365,
					1,
					"insert",
					{
						"characters": " raw="
					},
					"BQAAAKAPAAAAAAAAoQ8AAAAAAAAAAAAAoQ8AAAAAAACiDwAAAAAAAAAAAACiDwAAAAAAAKMPAAAAAAAAAAAAAKMPAAAAAAAApA8AAAAAAAAAAAAApA8AAAAAAAClDwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKAPAAAAAAAAoA8AAAAAAAAAAAAAAADwvw"
				],
				[
					366,
					1,
					"insert",
					{
						"characters": "Node.raw(obj"
					},
					"DAAAAKUPAAAAAAAApg8AAAAAAAAAAAAApg8AAAAAAACnDwAAAAAAAAAAAACnDwAAAAAAAKgPAAAAAAAAAAAAAKgPAAAAAAAAqQ8AAAAAAAAAAAAAqQ8AAAAAAACqDwAAAAAAAAAAAACqDwAAAAAAAKsPAAAAAAAAAAAAAKsPAAAAAAAArA8AAAAAAAAAAAAArA8AAAAAAACtDwAAAAAAAAAAAACtDwAAAAAAAK4PAAAAAAAAAAAAAK4PAAAAAAAArw8AAAAAAAAAAAAArw8AAAAAAACwDwAAAAAAAAAAAACwDwAAAAAAALEPAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKUPAAAAAAAApQ8AAAAAAAAAAAAAAADwvw"
				],
				[
					367,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAALEPAAAAAAAAsg8AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALEPAAAAAAAAsQ8AAAAAAAAAAAAAAADwvw"
				],
				[
					368,
					1,
					"insert",
					{
						"characters": " ??"
					},
					"AwAAALIPAAAAAAAAsw8AAAAAAAAAAAAAsw8AAAAAAAC0DwAAAAAAAAAAAAC0DwAAAAAAALUPAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALIPAAAAAAAAsg8AAAAAAAAAAAAAAADwvw"
				],
				[
					369,
					1,
					"insert",
					{
						"characters": " obj;"
					},
					"BQAAALUPAAAAAAAAtg8AAAAAAAAAAAAAtg8AAAAAAAC3DwAAAAAAAAAAAAC3DwAAAAAAALgPAAAAAAAAAAAAALgPAAAAAAAAuQ8AAAAAAAAAAAAAuQ8AAAAAAAC6DwAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALUPAAAAAAAAtQ8AAAAAAAAAAAAAAADwvw"
				],
				[
					385,
					1,
					"cut",
					null,
					"AQAAAKUPAAAAAAAApQ8AAAAAAAAUAAAATm9kZS5yYXcob2JqKSA/PyBvYmo",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKUPAAAAAAAAuQ8AAAAAAAAAAAAAAADwvw"
				],
				[
					390,
					1,
					"paste",
					null,
					"AgAAAMUPAAAAAAAA2Q8AAAAAAAAAAAAA2Q8AAAAAAADZDwAAAAAAAAMAAABvYmo",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMUPAAAAAAAAyA8AAAAAAAAAAAAAAADwvw"
				],
				[
					401,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAJsPAAAAAAAAnA8AAAAAAAAAAAAAnA8AAAAAAACcDwAAAAAAAAwAAAAgIGxldCByYXc9Owo",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJsPAAAAAAAApw8AAAAAAAAAAAAAAADwvw"
				],
				[
					406,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABIEAAAaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJzsKaW1wb3J0ICogYXMgeG1sIGZyb20gJ3htbCc7CmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJzsKaW1wb3J0ICogYXMgcG9pbnRlciBmcm9tICdwb2ludGVyJzsKaW1wb3J0ICogYXMgbG9jYXRpb24gZnJvbSAnbG9jYXRpb24nOwppbXBvcnQgQ29uc29sZSBmcm9tICdjb25zb2xlJzsKaW1wb3J0IHsgbm9kZVR5cGVzLCBQYXJzZXIsIE5vZGUsIE5vZGVMaXN0LCBOYW1lZE5vZGVNYXAsIEVsZW1lbnQsIERvY3VtZW50LCBBdHRyLCBUZXh0LCBUb2tlbkxpc3QsIEZhY3RvcnkgfSBmcm9tICdkb20nOwppbXBvcnQgeyBkZWZpbmUsIGdldE9wdCwgd2Vha0Fzc2lnbiB9IGZyb20gJ3V0aWwnOwppbXBvcnQgKiBhcyB1dGlsIGZyb20gJ3V0aWwnOwppbXBvcnQgKiBhcyBkb20gZnJvbSAnZG9tJzsKaW1wb3J0IFJFUEwgZnJvbSAncmVwbCc7CgpsZXQgcmVwbDsKCmZ1bmN0aW9uIG1haW4oLi4uYXJncykgewogIGdsb2JhbFRoaXMuY29uc29sZSA9IG5ldyBDb25zb2xlKHByb2Nlc3Muc3Rkb3V0LCB7CiAgICBpbnNwZWN0T3B0aW9uczogewogICAgICBjb2xvcnM6IHRydWUsCiAgICAgIGRlcHRoOiAxMCwKICAgICAgc3RyaW5nQnJlYWtOZXdsaW5lOiBmYWxzZSwKICAgICAgbWF4QXJyYXlMZW5ndGg6IDEwMDAwLAogICAgICBjb21wYWN0OiBmYWxzZSwKICAgICAgbWF4U3RyaW5nTGVuZ3RoOiBJbmZpbml0eSwKICAgICAgY3VzdG9tSW5zcGVjdDogdHJ1ZSAvKiwKICAgICAgaGlkZUtleXM6IFtTeW1ib2wuaXRlcmF0b3IsIFN5bWJvbC5mb3IoJ3F1aWNranMuaW5zcGVjdC5jdXN0b20nKSwgU3ltYm9sLmluc3BlY3RdKi8KICAgIH0KICB9KTsKCiAgbGV0IHBhcmFtcyA9IGdldE9wdCgKICAgIHsKICAgICAgb3V0cHV0OiBbdHJ1ZSwgbnVsbCwgJ28nXSwKICAgICAgaW50ZXJhY3RpdmU6IFt0cnVlLCBudWxsLCAnaSddLAogICAgICAnQCc6ICd4bWwnCiAgICB9LAogICAgYXJncwogICk7CgogIE9iamVjdC5hc3NpZ24oZ2xvYmFsVGhpcywgewogICAgeG1sOiB7CiAgICAgIHBhcnNlLAogICAgICBsb2FkLAogICAgICBzYXZlLAogICAgICBzZXJpYWxpemUsCiAgICAgIHJlYWQ6IHhtbC5yZWFkLAogICAgICB3cml0ZTogeG1sLndyaXRlCiAgICB9LAogICAganNvbjogewogICAgICByZWFkKC4uLmFyZ3MpIHsKICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSguLi5hcmdzKTsKICAgICAgfSwKICAgICAgd3JpdGUoLi4uYXJncykgewogICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSguLi5hcmdzKTsKICAgICAgfSwKICAgICAgbG9hZCwKICAgICAgc2F2ZQogICAgfSwKICAgIGRvbSwKICAgIHV0aWwsCiAgICBmcywKICAgIHBhdGgsCiAgICBwb2ludGVyLAogICAgbG9jYXRpb24KICB9KTsKICBPYmplY3QuYXNzaWduKGdsb2JhbFRoaXMsIHsKICAgIC4uLmdsb2JhbFRoaXMueG1sLAogICAgLi4uZG9tLAogICAgLi4udXRpbCwKICAgIC4uLnBvaW50ZXIsCiAgICAuLi5sb2NhdGlvbgogIH0pOwoKICBnbG9iYWxUaGlzLnBhcnNlciA/Pz0gbmV3IGRvbS5QYXJzZXIoKTsKICBnbG9iYWxUaGlzLmRvY3VtZW50cyA/Pz0gW107CgogIGZvcihsZXQgYXJnIG9mIHBhcmFtc1snQCddKSB7CiAgICBnbG9iYWxUaGlzLmRvY3VtZW50ID0gcGFyc2VyLnBhcnNlRnJvbUZpbGUoYXJnKTsKICAgIGRvY3VtZW50cy5wdXNoKGRvY3VtZW50KTsKICB9CgogIHJlcGwgPSBnbG9iYWxUaGlzLnJlcGwgPSBuZXcgUkVQTCgKICAgICdceDFiWzM4OzI7ODA7MjAwOzI1NW0nICsgcGF0aC5iYXNlbmFtZShwcm9jZXNzLmFyZ3ZbMV0sICcuanMnKS5yZXBsYWNlKC90ZXN0Xy8sICcnKSArICcgXHgxYlswbScsCiAgICBmYWxzZQogICk7CiAgcmVwbC5zaG93ID0gcmVwbC5wcmludEZ1bmN0aW9uKCguLi5hcmdzKSA9PiBjb25zb2xlLmxvZyguLi5hcmdzKSk7CiAgcmVwbC5oaXN0b3J5TG9hZChudWxsLCBmcyk7CiAgcmVwbC5sb2FkU2F2ZU9wdGlvbnMoKTsKICByZXBsLmRpcmVjdGl2ZXMgPSB7CiAgICBpOiBbCiAgICAgIG5hbWUgPT4gewogICAgICAgIGNvbnN0IGFsbCA9IG5hbWVbMF0gPT0gJyonOwogICAgICAgIGlmKG5hbWVbMF0gPT0gJyonKSBuYW1lID0gbmFtZS5zbGljZSgxKTsKCiAgICAgICAgaW1wb3J0KG5hbWUpCiAgICAgICAgICAudGhlbihtID0+IHsKICAgICAgICAgICAgLy9yZXBsLnByaW50U3RhdHVzKGBMb2FkZWQgJyR7bmFtZX0nLmApOwogICAgICAgICAgICBjb25zdCBzeW0gPSBuYW1lLnJlcGxhY2UoLy4qXC8vZywgJycpLnJlcGxhY2UoL1wuW14uXSskL2dpLCAnJyk7CiAgICAgICAgICAgIGxldCBlcnIgPSBmYWxzZTsKICAgICAgICAgICAgaWYoYWxsKSB7CiAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHdlYWtBc3NpZ24oZ2xvYmFsVGhpcywgbSk7CiAgICAgICAgICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgICAgICAgICBlcnIgPSBlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICByZXBsLnByaW50U3RhdHVzKAogICAgICAgICAgICAgICAgZXJyCiAgICAgICAgICAgICAgICAgID8gYEVycm9yIGltcG9ydGluZyAnJHtuYW1lfSc6ICR7ZXJyLm1lc3NhZ2V9YAogICAgICAgICAgICAgICAgICA6IGBJbXBvcnRlZCBmcm9tICcke3N5bX0nOiAke09iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG0pLmpvaW4oJyAnKX1gCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBnbG9iYWxUaGlzW3N5bV0gPSBtOwogICAgICAgICAgICAgIHJlcGwucHJpbnRTdGF0dXMoYEltcG9ydGVkICcke3N5bX0nIGFzICcke3N5bX0nYCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pCiAgICAgICAgICAuY2F0Y2goZXJyID0+IHsKICAgICAgICAgICAgcmVwbC5wcmludFN0YXR1cyhgRVJST1I6ICR7ZXJyLm1lc3NhZ2V9YCk7CiAgICAgICAgICB9KTsKICAgICAgfSwKICAgICAgJ2ltcG9ydCBhIG1vZHVsZScKICAgIF0KICB9OwoKICBmb3IobGV0IGFyZyBvZiBwYXJhbXNbJ0AnXSkgewogICAgcGFyc2UoYXJnKTsKICB9CiAgcmVwbC5ydW5TeW5jKCk7Cn0KCnRyeSB7CiAgbWFpbiguLi5zY3JpcHRBcmdzLnNsaWNlKDEpKTsKfSBjYXRjaChlcnJvcikgewogIGNvbnNvbGUubG9nKGBGQUlMOiAke2Vycm9yLm1lc3NhZ2V9XG4ke2Vycm9yLnN0YWNrfWApOwogIHN0ZC5leGl0KDEpOwp9CgpmdW5jdGlvbiBsb2FkKGZpbGVuYW1lLCAuLi5hcmdzKSB7CiAgbGV0IGRhdGE7CgogIHRyeSB7CiAgICBkYXRhID0gZnMucmVhZEZpbGVTeW5jKGZpbGVuYW1lLCAndXRmLTgnKTsKICB9IGNhdGNoKGUpIHt9CgogIGlmKGRhdGEpIHJldHVybiB4bWwucmVhZChkYXRhLCBmaWxlbmFtZSwgLi4uYXJncyk7Cn0KCmZ1bmN0aW9uIHBhcnNlKGZpbGVuYW1lLCAuLi5hcmdzKSB7CiAgbGV0IGRvYywKICAgIHBhcnNlciA9IG5ldyBQYXJzZXIoKTsKCiAgdHJ5IHsKICAgIGRvYyA9IHBhcnNlci5wYXJzZUZyb21GaWxlKGZpbGVuYW1lLCAndXRmLTgnKTsKICB9IGNhdGNoKGUpIHt9CiAgcmV0dXJuIChnbG9iYWxUaGlzLmRvY3VtZW50ID0gZG9jKTsKfQoKZnVuY3Rpb24gc2VyaWFsaXplKC4uLmFyZ3MpIHsKICBsZXQgW2ZpbGVuYW1lLCBkb2MsIHdmbiA9IChmaWxlbmFtZSwgZGF0YSkgPT4gZnMud3JpdGVGaWxlU3luYyhmaWxlbmFtZSwgZGF0YSldID0KICAgIGFyZ3MubGVuZ3RoID09IDEgPyBbbnVsbCwgLi4uYXJnc10gOiBhcmdzOwogIGxldCBkYXRhLAogICAgcyA9IG5ldyBTZXJpYWxpemVyKCk7CgogIHRyeSB7CiAgICBkYXRhID0gcy5zZXJpYWxpemVUb1N0cmluZyhkb2MpOwogIH0gY2F0Y2goZSkge30KICBpZihkYXRhICYmIGZpbGVuYW1lKSByZXR1cm4gd2ZuKGZpbGVuYW1lLCBkYXRhLnRyaW1FbmQoKSArICdcbicpOwogIHJldHVybiBkYXRhOwp9CgpmdW5jdGlvbiBzYXZlKGZpbGVuYW1lLCBvYmosIHdmbiA9IChmaWxlbmFtZSwgZGF0YSkgPT4gZnMud3JpdGVGaWxlU3luYyhmaWxlbmFtZSwgZGF0YSkpIHsKICBsZXQgZGF0YSwgZXJyOwogCiAgdHJ5IHsKICAgIGRhdGEgPSB4bWwud3JpdGUoTm9kZS5yYXcob2JqKSA/PyBvYmopOwogIH0gY2F0Y2goZSkgewogICAgZXJyID0gZTsKICB9CiAgaWYoZGF0YSAmJiAhZXJyKSByZXR1cm4gd2ZuKGZpbGVuYW1lLCBkYXRhLnRyaW1FbmQoKSArICdcbicpOwogIGlmKGVycikgdGhyb3cgZXJyOwp9CgAAAAAAAAAARxAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJwPAAAAAAAAnA8AAAAAAAAAAAAAAADwvw"
				],
				[
					409,
					1,
					"insert",
					{
						"characters": "globaqlT"
					},
					"CAAAAFENAAAAAAAAUg0AAAAAAAAAAAAAUg0AAAAAAABTDQAAAAAAAAAAAABTDQAAAAAAAFQNAAAAAAAAAAAAAFQNAAAAAAAAVQ0AAAAAAAAAAAAAVQ0AAAAAAABWDQAAAAAAAAAAAABWDQAAAAAAAFcNAAAAAAAAAAAAAFcNAAAAAAAAWA0AAAAAAAAAAAAAWA0AAAAAAABZDQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFENAAAAAAAAUQ0AAAAAAAAAAAAAAADwvw"
				],
				[
					410,
					3,
					"left_delete",
					null,
					"AwAAAFgNAAAAAAAAWA0AAAAAAAABAAAAVFcNAAAAAAAAVw0AAAAAAAABAAAAbFYNAAAAAAAAVg0AAAAAAAABAAAAcQ",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFkNAAAAAAAAWQ0AAAAAAAAAAAAAAADwvw"
				],
				[
					411,
					1,
					"insert",
					{
						"characters": "lThis.parser="
					},
					"DQAAAFYNAAAAAAAAVw0AAAAAAAAAAAAAVw0AAAAAAABYDQAAAAAAAAAAAABYDQAAAAAAAFkNAAAAAAAAAAAAAFkNAAAAAAAAWg0AAAAAAAAAAAAAWg0AAAAAAABbDQAAAAAAAAAAAABbDQAAAAAAAFwNAAAAAAAAAAAAAFwNAAAAAAAAXQ0AAAAAAAAAAAAAXQ0AAAAAAABeDQAAAAAAAAAAAABeDQAAAAAAAF8NAAAAAAAAAAAAAF8NAAAAAAAAYA0AAAAAAAAAAAAAYA0AAAAAAABhDQAAAAAAAAAAAABhDQAAAAAAAGINAAAAAAAAAAAAAGINAAAAAAAAYw0AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFYNAAAAAAAAVg0AAAAAAAAAAAAAAADwvw"
				],
				[
					428,
					1,
					"insert",
					{
						"characters": " ?=?"
					},
					"BAAAAGINAAAAAAAAYw0AAAAAAAAAAAAAYw0AAAAAAABkDQAAAAAAAAAAAABkDQAAAAAAAGUNAAAAAAAAAAAAAGUNAAAAAAAAZg0AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGINAAAAAAAAYg0AAAAAAAAAAAAAAADwvw"
				],
				[
					429,
					2,
					"left_delete",
					null,
					"AgAAAGUNAAAAAAAAZQ0AAAAAAAABAAAAP2QNAAAAAAAAZA0AAAAAAAABAAAAPQ",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGYNAAAAAAAAZg0AAAAAAAAAAAAAAADwvw"
				],
				[
					430,
					1,
					"insert",
					{
						"characters": "?"
					},
					"AQAAAGQNAAAAAAAAZQ0AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGQNAAAAAAAAZA0AAAAAAAAAAAAAAADwvw"
				],
				[
					432,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGYNAAAAAAAAZw0AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGYNAAAAAAAAZg0AAAAAAAAAAAAAAADwvw"
				],
				[
					440,
					1,
					"paste",
					null,
					"AQAAAJ8OAAAAAAAAtQ4AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ8OAAAAAAAAnw4AAAAAAAAAAAAAAADwvw"
				],
				[
					445,
					1,
					"insert",
					{
						"characters": "seroa√∂oz"
					},
					"CQAAAKoOAAAAAAAAqw4AAAAAAAAAAAAAqw4AAAAAAACrDgAAAAAAAAYAAABwYXJzZXKrDgAAAAAAAKwOAAAAAAAAAAAAAKwOAAAAAAAArQ4AAAAAAAAAAAAArQ4AAAAAAACuDgAAAAAAAAAAAACuDgAAAAAAAK8OAAAAAAAAAAAAAK8OAAAAAAAAsA4AAAAAAAAAAAAAsA4AAAAAAACxDgAAAAAAAAAAAACxDgAAAAAAALIOAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKoOAAAAAAAAsA4AAAAAAAAAAAAAAADwvw"
				],
				[
					446,
					5,
					"left_delete",
					null,
					"BQAAALEOAAAAAAAAsQ4AAAAAAAABAAAAerAOAAAAAAAAsA4AAAAAAAABAAAAb68OAAAAAAAArw4AAAAAAAACAAAAw7auDgAAAAAAAK4OAAAAAAAAAQAAAGGtDgAAAAAAAK0OAAAAAAAAAQAAAG8",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALIOAAAAAAAAsg4AAAAAAAAAAAAAAADwvw"
				],
				[
					447,
					1,
					"insert",
					{
						"characters": "ializer"
					},
					"BwAAAK0OAAAAAAAArg4AAAAAAAAAAAAArg4AAAAAAACvDgAAAAAAAAAAAACvDgAAAAAAALAOAAAAAAAAAAAAALAOAAAAAAAAsQ4AAAAAAAAAAAAAsQ4AAAAAAACyDgAAAAAAAAAAAACyDgAAAAAAALMOAAAAAAAAAAAAALMOAAAAAAAAtA4AAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK0OAAAAAAAArQ4AAAAAAAAAAAAAAADwvw"
				],
				[
					452,
					1,
					"revert",
					null,
					"CgAAAAAAAAAAAAAAAAAAAAAAAAB3EAAAaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJzsKaW1wb3J0ICogYXMgeG1sIGZyb20gJ3htbCc7CmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJzsKaW1wb3J0ICogYXMgcG9pbnRlciBmcm9tICdwb2ludGVyJzsKaW1wb3J0ICogYXMgbG9jYXRpb24gZnJvbSAnbG9jYXRpb24nOwppbXBvcnQgQ29uc29sZSBmcm9tICdjb25zb2xlJzsKaW1wb3J0IHsgbm9kZVR5cGVzLCBQYXJzZXIsIE5vZGUsIE5vZGVMaXN0LCBOYW1lZE5vZGVNYXAsIEVsZW1lbnQsIERvY3VtZW50LCBBdHRyLCBUZXh0LCBUb2tlbkxpc3QsIEZhY3RvcnkgfSBmcm9tICdkb20nOwppbXBvcnQgeyBkZWZpbmUsIGdldE9wdCwgd2Vha0Fzc2lnbiB9IGZyb20gJ3V0aWwnOwppbXBvcnQgKiBhcyB1dGlsIGZyb20gJ3V0aWwnOwppbXBvcnQgKiBhcyBkb20gZnJvbSAnZG9tJzsKaW1wb3J0IFJFUEwgZnJvbSAncmVwbCc7CgpsZXQgcmVwbDsKCmZ1bmN0aW9uIG1haW4oLi4uYXJncykgewogIGdsb2JhbFRoaXMuY29uc29sZSA9IG5ldyBDb25zb2xlKHByb2Nlc3Muc3Rkb3V0LCB7CiAgICBpbnNwZWN0T3B0aW9uczogewogICAgICBjb2xvcnM6IHRydWUsCiAgICAgIGRlcHRoOiAxMCwKICAgICAgc3RyaW5nQnJlYWtOZXdsaW5lOiBmYWxzZSwKICAgICAgbWF4QXJyYXlMZW5ndGg6IDEwMDAwLAogICAgICBjb21wYWN0OiBmYWxzZSwKICAgICAgbWF4U3RyaW5nTGVuZ3RoOiBJbmZpbml0eSwKICAgICAgY3VzdG9tSW5zcGVjdDogdHJ1ZSAvKiwKICAgICAgaGlkZUtleXM6IFtTeW1ib2wuaXRlcmF0b3IsIFN5bWJvbC5mb3IoJ3F1aWNranMuaW5zcGVjdC5jdXN0b20nKSwgU3ltYm9sLmluc3BlY3RdKi8KICAgIH0KICB9KTsKCiAgbGV0IHBhcmFtcyA9IGdldE9wdCgKICAgIHsKICAgICAgb3V0cHV0OiBbdHJ1ZSwgbnVsbCwgJ28nXSwKICAgICAgaW50ZXJhY3RpdmU6IFt0cnVlLCBudWxsLCAnaSddLAogICAgICAnQCc6ICd4bWwnCiAgICB9LAogICAgYXJncwogICk7CgogIE9iamVjdC5hc3NpZ24oZ2xvYmFsVGhpcywgewogICAgeG1sOiB7CiAgICAgIHBhcnNlLAogICAgICBsb2FkLAogICAgICBzYXZlLAogICAgICBzZXJpYWxpemUsCiAgICAgIHJlYWQ6IHhtbC5yZWFkLAogICAgICB3cml0ZTogeG1sLndyaXRlCiAgICB9LAogICAganNvbjogewogICAgICByZWFkKC4uLmFyZ3MpIHsKICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSguLi5hcmdzKTsKICAgICAgfSwKICAgICAgd3JpdGUoLi4uYXJncykgewogICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSguLi5hcmdzKTsKICAgICAgfSwKICAgICAgbG9hZCwKICAgICAgc2F2ZQogICAgfSwKICAgIGRvbSwKICAgIHV0aWwsCiAgICBmcywKICAgIHBhdGgsCiAgICBwb2ludGVyLAogICAgbG9jYXRpb24KICB9KTsKICBPYmplY3QuYXNzaWduKGdsb2JhbFRoaXMsIHsKICAgIC4uLmdsb2JhbFRoaXMueG1sLAogICAgLi4uZG9tLAogICAgLi4udXRpbCwKICAgIC4uLnBvaW50ZXIsCiAgICAuLi5sb2NhdGlvbgogIH0pOwoKICBnbG9iYWxUaGlzLnBhcnNlciA/Pz0gbmV3IGRvbS5QYXJzZXIoKTsKICBnbG9iYWxUaGlzLmRvY3VtZW50cyA/Pz0gW107CgogIGZvcihsZXQgYXJnIG9mIHBhcmFtc1snQCddKSB7CiAgICBnbG9iYWxUaGlzLmRvY3VtZW50ID0gcGFyc2VyLnBhcnNlRnJvbUZpbGUoYXJnKTsKICAgIGRvY3VtZW50cy5wdXNoKGRvY3VtZW50KTsKICB9CgogIHJlcGwgPSBnbG9iYWxUaGlzLnJlcGwgPSBuZXcgUkVQTCgKICAgICdceDFiWzM4OzI7ODA7MjAwOzI1NW0nICsgcGF0aC5iYXNlbmFtZShwcm9jZXNzLmFyZ3ZbMV0sICcuanMnKS5yZXBsYWNlKC90ZXN0Xy8sICcnKSArICcgXHgxYlswbScsCiAgICBmYWxzZQogICk7CiAgcmVwbC5zaG93ID0gcmVwbC5wcmludEZ1bmN0aW9uKCguLi5hcmdzKSA9PiBjb25zb2xlLmxvZyguLi5hcmdzKSk7CiAgcmVwbC5oaXN0b3J5TG9hZChudWxsLCBmcyk7CiAgcmVwbC5sb2FkU2F2ZU9wdGlvbnMoKTsKICByZXBsLmRpcmVjdGl2ZXMgPSB7CiAgICBpOiBbCiAgICAgIG5hbWUgPT4gewogICAgICAgIGNvbnN0IGFsbCA9IG5hbWVbMF0gPT0gJyonOwogICAgICAgIGlmKG5hbWVbMF0gPT0gJyonKSBuYW1lID0gbmFtZS5zbGljZSgxKTsKCiAgICAgICAgaW1wb3J0KG5hbWUpCiAgICAgICAgICAudGhlbihtID0+IHsKICAgICAgICAgICAgLy9yZXBsLnByaW50U3RhdHVzKGBMb2FkZWQgJyR7bmFtZX0nLmApOwogICAgICAgICAgICBjb25zdCBzeW0gPSBuYW1lLnJlcGxhY2UoLy4qXC8vZywgJycpLnJlcGxhY2UoL1wuW14uXSskL2dpLCAnJyk7CiAgICAgICAgICAgIGxldCBlcnIgPSBmYWxzZTsKICAgICAgICAgICAgaWYoYWxsKSB7CiAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHdlYWtBc3NpZ24oZ2xvYmFsVGhpcywgbSk7CiAgICAgICAgICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgICAgICAgICBlcnIgPSBlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICByZXBsLnByaW50U3RhdHVzKAogICAgICAgICAgICAgICAgZXJyCiAgICAgICAgICAgICAgICAgID8gYEVycm9yIGltcG9ydGluZyAnJHtuYW1lfSc6ICR7ZXJyLm1lc3NhZ2V9YAogICAgICAgICAgICAgICAgICA6IGBJbXBvcnRlZCBmcm9tICcke3N5bX0nOiAke09iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG0pLmpvaW4oJyAnKX1gCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBnbG9iYWxUaGlzW3N5bV0gPSBtOwogICAgICAgICAgICAgIHJlcGwucHJpbnRTdGF0dXMoYEltcG9ydGVkICcke3N5bX0nIGFzICcke3N5bX0nYCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pCiAgICAgICAgICAuY2F0Y2goZXJyID0+IHsKICAgICAgICAgICAgcmVwbC5wcmludFN0YXR1cyhgRVJST1I6ICR7ZXJyLm1lc3NhZ2V9YCk7CiAgICAgICAgICB9KTsKICAgICAgfSwKICAgICAgJ2ltcG9ydCBhIG1vZHVsZScKICAgIF0KICB9OwoKICBmb3IobGV0IGFyZyBvZiBwYXJhbXNbJ0AnXSkgewogICAgcGFyc2UoYXJnKTsKICB9CiAgcmVwbC5ydW5TeW5jKCk7Cn0KCnRyeSB7CiAgbWFpbiguLi5zY3JpcHRBcmdzLnNsaWNlKDEpKTsKfSBjYXRjaChlcnJvcikgewogIGNvbnNvbGUubG9nKGBGQUlMOiAke2Vycm9yLm1lc3NhZ2V9XG4ke2Vycm9yLnN0YWNrfWApOwogIHN0ZC5leGl0KDEpOwp9CgpmdW5jdGlvbiBsb2FkKGZpbGVuYW1lLCAuLi5hcmdzKSB7CiAgbGV0IGRhdGE7CgogIHRyeSB7CiAgICBkYXRhID0gZnMucmVhZEZpbGVTeW5jKGZpbGVuYW1lLCAndXRmLTgnKTsKICB9IGNhdGNoKGUpIHt9CgogIGlmKGRhdGEpIHJldHVybiB4bWwucmVhZChkYXRhLCBmaWxlbmFtZSwgLi4uYXJncyk7Cn0KCmZ1bmN0aW9uIHBhcnNlKGZpbGVuYW1lLCAuLi5hcmdzKSB7CiAgbGV0IGRvYywKICAgIHBhcnNlciA9IGdsb2JhbFRoaXMucGFyc2VyID8/PSBuZXcgUGFyc2VyKCk7CgogIHRyeSB7CiAgICBkb2MgPSBwYXJzZXIucGFyc2VGcm9tRmlsZShmaWxlbmFtZSwgJ3V0Zi04Jyk7CiAgfSBjYXRjaChlKSB7fQogIHJldHVybiAoZ2xvYmFsVGhpcy5kb2N1bWVudCA9IGRvYyk7Cn0KCmZ1bmN0aW9uIHNlcmlhbGl6ZSguLi5hcmdzKSB7CiAgbGV0IFtmaWxlbmFtZSwgZG9jLCB3Zm4gPSAoZmlsZW5hbWUsIGRhdGEpID0+IGZzLndyaXRlRmlsZVN5bmMoZmlsZW5hbWUsIGRhdGEpXSA9CiAgICBhcmdzLmxlbmd0aCA9PSAxID8gW251bGwsIC4uLmFyZ3NdIDogYXJnczsKICBsZXQgZGF0YSwKICAgIHMgPSBnbG9iYWxUaGlzLnNlcmlhbGl6ZXIgPz89IG5ldyBTZXJpYWxpemVyKCk7CgogIHRyeSB7CiAgICBkYXRhID0gcy5zZXJpYWxpemVUb1N0cmluZyhkb2MpOwogIH0gY2F0Y2goZSkge30KICBpZihkYXRhICYmIGZpbGVuYW1lKSByZXR1cm4gd2ZuKGZpbGVuYW1lLCBkYXRhLnRyaW1FbmQoKSArICdcbicpOwogIHJldHVybiBkYXRhOwp9CgpmdW5jdGlvbiBzYXZlKGZpbGVuYW1lLCBvYmosIHdmbiA9IChmaWxlbmFtZSwgZGF0YSkgPT4gZnMud3JpdGVGaWxlU3luYyhmaWxlbmFtZSwgZGF0YSkpIHsKICBsZXQgZGF0YSwgZXJyOwoKICB0cnkgewogICAgZGF0YSA9IHhtbC53cml0ZShOb2RlLnJhdyhvYmopID8/IG9iaik7CiAgfSBjYXRjaChlKSB7CiAgICBlcnIgPSBlOwogIH0KICBpZihkYXRhICYmICFlcnIpIHJldHVybiB3Zm4oZmlsZW5hbWUsIGRhdGEudHJpbUVuZCgpICsgJ1xuJyk7CiAgaWYoZXJyKSB0aHJvdyBlcnI7Cn0KAAAAAAAAAAB7EAAAAAAAAAAAAAAAAAAAAAAAAHsQAAAAAAAAAAAAAAAAAAAAAAAAexAAAAAAAAAAAAAAAAAAAAAAAAB7EAAAAAAAAAAAAAAAAAAAAAAAAHsQAAAAAAAAAAAAAAAAAAAAAAAAexAAAAAAAAAAAAAAAAAAAAAAAAB7EAAAAAAAAAAAAAAAAAAAAAAAAHsQAAAAAAAAAAAAAAAAAAAAAAAAexAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALQOAAAAAAAAtA4AAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "lib/dom/container.js",
			"settings":
			{
				"buffer_size": 474,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "import * as std from 'std';\nimport * as os from 'os';\nimport * as deep from './lib/deep.js';\nimport * as xml from 'xml';\nimport * as path from 'path';\nimport { Console } from 'console';\nimport REPL from './quickjs/qjs-modules/lib/repl.js';\nimport inspect from './lib/objectInspect.js';\nimport * as Terminal from './terminal.js';\nimport * as fs from 'fs';\nimport { link, unlink, error } from 'misc';\nimport { toString, define, toUnixTime, getOpt, randStr, isObject, isNumeric, isArrayBuffer, glob, GLOB_BRACE, waitFor } from 'util';\nimport { setLog, LLL_USER, LLL_NOTICE, LLL_WARN, LLL_INFO, client, server, FormParser, Hash, Response } from 'net';\nimport { parseDate, dateToObject } from './date-helpers.js';\nimport { IfDebug, LogIfDebug, ReadFile, LoadHistory, ReadJSON, ReadXML, MapFile, WriteFile, WriteJSON, WriteXML, ReadBJSON, WriteBJSON, DirIterator, RecursiveDirIterator, ReadDirRecursive, Filter, FilterImages, SortFiles, StatFiles, ReadFd, FdReader, CopyToClipboard, ReadCallback, LogCall, Spawn, FetchURL } from './io-helpers.js';\nimport { parseDegMinSec, parseGPSLocation } from './string-helpers.js';\nimport { h, html, render, Component, useState, useLayoutEffect, useRef } from './lib/preact.mjs';\nimport renderToString from './lib/preact-render-to-string.js';\nimport { exec, spawn } from 'child_process';\nimport { Execute } from './os-helpers.js';\nimport trkl from './lib/trkl.js';\n\nglobalThis.fs = fs;\nglobalThis.logFilter =\n  /(ws_set_timeout: on immortal stream|Unhandled|PROXY-|VHOST_CERT_AGING|BIND|EVENT_WAIT|WRITABLE)/;\n\ntrkl.property(globalThis, 'logLevel').subscribe(value =>\n  setLog(value, (level, message) => {\n    if(/__lws/.test(message)) return;\n    if(level == LLL_INFO && !/proxy/.test(message)) return;\n    if(logFilter.test(message)) return;\n\n    //if(params.debug || level <= LLL_WARN)\n    out(\n      (\n        ['ERR', 'WARN', 'NOTICE', 'INFO', 'DEBUG', 'PARSER', 'HEADER', 'EXT', 'CLIENT', 'LATENCY', 'MINNET', 'THREAD'][\n          Math.log2(level)\n        ] ?? level + ''\n      ).padEnd(8) + message.replace(/\\n/g, '\\\\n')\n    );\n  })\n);\n\nfunction ExecTool(cmd, ...args) {\n  let child = spawn(cmd, args, { stdio: [0, 'pipe', 2] });\n  let [stdin, stdout, stderr] = child.stdio;\n  let r;\n  let b = new ArrayBuffer(1024);\n  r = child.wait();\n  // console.log('ExecTool', { args, child });\n\n  r = os.read(stdout, b, 0, 1024);\n  let data = b.slice(0, r);\n  let str = toString(data);\n\n  return str;\n}\n\nfunction GetMime(file) {\n  let output = ExecTool('file', '-i', file);\n  output = output.replace(/[\\r\\n]*$/g, '');\n  output = output.replace(new RegExp(file + ':\\\\s+'), '');\n  output = output.replace(/\\;\\s*.*/g, '');\n  return output;\n}\n\nconst MakeUUID = (rng = Math.random) => [8, 4, 4, 4, 12].map(n => randStr(n, '0123456789abcdef'), rng).join('-');\n\nconst defaultDirs = (globalThis.defaultDirs = [\n  '.',\n  ...glob('../*/eagle'),\n  './uploads/*.{sch,brd,lbr}',\n  '/mnt/extext/Photos/*APPLE/*.{JPG,PNG,GIF,AAE,MOV,HEIC,MP4,WEBP}',\n  ['/home/roman/Bilder', new RegExp('.(jpg|jpeg|png|heic|tif|tiff)$', 'i')]\n]);\n\nconst allowedDirs = (globalThis.allowedDirs = defaultDirs\n  .map(dd => GetDir(Array.isArray(dd) ? dd[0] : dd))\n  .map(d => path.resolve(d)));\n\nfunction GetDir(dir) {\n  let a = path.toArray(dir);\n  let i = a.findIndex(n => /[*{}]/.test(n));\n  return i != -1 ? path.slice(dir, 0, i) : dir;\n}\n\nfunction DateStr(date) {\n  let str = date.toISOString();\n  let ti = str.indexOf('T');\n  return (\n    str.substring(0, ti) /*.replace(/-/g, '')*/ + ' ' + str.substring(ti + 1, ti + 1 + 8) //.replace(/:/g, '')\n  );\n}\n\nfunction ModeStr(mode) {\n  return (\n    (mode & (0o120000 == 0o120000) ? 'l' : mode & 0o40000 ? 'd' : '-') +\n    (mode & 0b100000000 ? 'r' : '-') +\n    (mode & 0b010000000 ? 'w' : '-') +\n    (mode & 0b001000000 ? 'x' : '-') +\n    (mode & 0b100000 ? 'r' : '-') +\n    (mode & 0b010000 ? 'w' : '-') +\n    (mode & 0b001000 ? 'x' : '-') +\n    (mode & 0b100 ? 'r' : '-') +\n    (mode & 0b010 ? 'w' : '-') +\n    (mode & 0b001 ? 'x' : '-')\n  );\n}\n\nconst HTMLPage = ({ title, style, scripts = [], children, ...props }) => {\n  return h('html', {}, [\n    h(\n      'head',\n      {},\n      [\n        h('title', {}, [title]),\n        ...(style ? [h('style', { type: 'text/css' }, [style])] : []),\n        h(\n          'link',\n          {\n            rel: 'stylesheet',\n            href: 'static/css/list.css'\n          },\n          []\n        )\n      ].concat(scripts.map(script => h('script', { type: 'module', src: script })))\n    ),\n    h('body', {}, children ?? [])\n  ]);\n};\n\nconst FilterForm = ({ ...props }) =>\n  h('form', { action: 'file', method: 'POST' }, [\n    h(\n      'input',\n      {\n        type: 'text',\n        size: 20,\n        name: 'filter',\n        value: '.*' /*,\n        onchange: e => {\n          console.log('onchange', e);\n        }*/\n      },\n      []\n    ),\n    h('input', { type: 'submit', value: 'Submit', class: 'hidden' }, [])\n  ]);\n\nconst HTMLTable = ({ rows, ...props }) => h('table', props, rows);\nconst HTMLTableRow = ({ columns, ...props }) => h('tr', props, columns);\nconst HTMLTableColumn = ({ columns, children, tag = 'td', ...props }) => h(tag, props, children);\n\nconst FileLink = ({ file, ...props }) => {\n  return h('a', { href: 'file/uploads/' + file }, [file]);\n};\nconst FileObject = ({ file, stat = {}, ...props }) => {\n  stat ??= fs.lstatSync('uploads/' + file);\n  // console.log('FileObject', { file, stat });\n  let isDir = stat.isDirectory();\n\n  return h(HTMLTableRow, {}, [\n    h(HTMLTableColumn, { class: 'mode' }, [\n      //(stat.mode & 0b111111111).toString(8),\n      ModeStr(stat.mode)\n    ]),\n    h(HTMLTableColumn, { class: 'file' }, [h(FileLink, { file: file + (isDir ? '/' : '') }, [])]),\n    h(HTMLTableColumn, { class: 'size' }, [stat.size + '']),\n    h(HTMLTableColumn, { class: 'date' }, [DateStr(new Date(stat.atime))])\n  ]);\n};\n\nconst FileTable = ({ files, ...props }) => {\n  //console.log('FileTable', files);\n\n  let fields = ['mode', 'file', 'size', 'atime'];\n\n  files = files.sort((a, b) => a.file.localeCompare(b.file));\n\n  return h(\n    HTMLTable,\n    {\n      ...props,\n      cellspacing: 0,\n      cellpadding: 0,\n      border: 0,\n      rows: [\n        h(\n          HTMLTableRow,\n          {\n            columns: fields.map(field => h(HTMLTableColumn, { tag: 'th' }, [field]))\n          },\n          []\n        )\n      ].concat(files.map(file => h(FileObject, file, [])))\n    },\n    []\n  );\n};\n\nfunction ReadExiv2(file) {\n  console.log('ReadExiv2', file);\n  let [rdf, stdout] = os.pipe();\n  os.exec(['exiv2', '-e', 'X-', 'ex', file], { stdout });\n  os.close(stdout);\n  let xmpdat = fs.readAllSync(rdf);\n  fs.closeSync(rdf);\n  // console.log('xmpdat', xmpdat);\n  let xmp = xml.read(xmpdat);\n  // console.log('xmp', xmp);\n  let flat = Object.fromEntries(\n    deep\n      .flatten(xmp, [])\n      .filter(([k, v]) => v !== '' && /attributes.*:/.test(k) && !/\\.xmlns/.test(k) && !isObject(v))\n      .filter(([k, v]) => /(GPS|[XY]Dim|[XY]Res|Date$|Make$|Model$)/.test(k))\n      .map(([k, v]) => [k.replace(/.*\\.attributes\\./g, ''), v])\n      .sort((a, b) => a[0].localeCompare(b[0]))\n      .map(([k, v]) => [k, isNaN(+v) ? (isNaN(Date.parse(v)) ? v : new Date(v)) : +v])\n  );\n  return flat;\n}\n\nfunction ReadExiftool(file) {\n  console.log('ReadExiftool', file);\n\n  let [ret, out] = Execute('exiftool', '-S', '-ee', file);\n\n  let a = out.split(/\\r?\\n/g).filter(l => l != '');\n\n  a = a.map(line => [line, line.indexOf(': ')]).map(([line, idx]) => [line.slice(0, idx), line.slice(idx + 2)]);\n  let o = Object.fromEntries(a);\n\n  //console.log('ReadExiftool',o);\n  return o;\n}\n\nfunction HeifConvert(src, dst, quality = 100) {\n  console.log('HeifConvert', src, dst);\n  let args = ['heif-convert', '-q', quality + '', src, dst];\n  let [ret, out] = Execute(...args);\n\n  console.log('HeifConvert', { args, ret, out });\n  return [ret, out];\n}\n\nfunction MagickResize(src, dst, rotate = 0, width, height) {\n  console.log('MagickResize', {\n    width,\n    height,\n    dst,\n    rotate\n  });\n  let args = ['convert', src, '-resize', width + 'x' + height, ...(rotate ? ['-rotate', '-' + rotate] : []), dst];\n  let [ret, out] = Execute(...args);\n\n  console.log('MagickResize', { args, ret, out });\n  return [ret, out];\n}\n\nfunction main(...args) {\n  const base = path.basename(scriptArgs[0], '.js').replace(/\\.[a-z]*$/, '');\n  const config = ReadJSON(`.${base}-config`) ?? {};\n\n  // console.log('allowedDirs', allowedDirs);\n  globalThis.console = new Console({\n    inspectOptions: {\n      compact: 2,\n      depth: Infinity,\n      customInspect: true,\n      maxArrayLength: 200\n    }\n  });\n  let params = getOpt(\n    {\n      verbose: [false, (a, v) => (v | 0) + 1, 'v'],\n      listen: [false, null, 'l'],\n      connect: [false, null, 'c'],\n      client: [false, null, 'C'],\n      server: [false, null, 'S'],\n      debug: [false, null, 'x'],\n      tls: [false, null, 't'],\n      'no-tls': [false, (v, pv, o) => ((o.tls = false), true), 'T'],\n      address: [true, null, 'a'],\n      port: [true, null, 'p'],\n      'ssl-cert': [true, null],\n      'ssl-private-key': [true, null],\n      '@': 'address,port'\n    },\n    args\n  );\n  if(params['no-tls'] === true) params.tls = false;\n\n  const {\n    address = '0.0.0.0',\n    port = 8999,\n    'ssl-cert': sslCert = 'localhost.crt',\n    'ssl-private-key': sslPrivateKey = 'localhost.key'\n  } = params;\n  const listen = params.connect && !params.listen ? false : true;\n  const is_server = !params.client || params.server;\n\n  let name = process.env['NAME'] ?? base;\n\n  name = name\n    .replace(/.*\\//, '')\n    .replace(/-/g, ' ')\n    .replace(/\\.[^\\/.]*$/, '');\n\n  let [prefix, suffix] = name.split(' ');\n\n  let repl = new REPL(`\\x1b[38;5;165m${prefix} \\x1b[38;5;39m${suffix}\\x1b[0m`, false);\n  const histfile = '.upload-server-history';\n  repl.historyLoad(histfile, false);\n  repl.loadSaveOptions();\n  repl.directives.i = [\n    (module, ...args) => {\n      console.log('args', args);\n      try {\n        return require(module);\n      } catch(e) {}\n      import(module).then(m => (globalThis[module] = m));\n    },\n    'import module'\n  ];\n\n  let { log } = console;\n  repl.show = arg => std.puts((typeof arg == 'string' ? arg : inspect(arg, globalThis.console.options)) + '\\n');\n\n  repl.cleanup = () => {\n    repl.readlineRemovePrompt();\n    Terminal.mousetrackingDisable();\n    let numLines = repl.historySave(histfile);\n\n    repl.printStatus(`EXIT (wrote ${numLines} history entries)`, false);\n\n    std.exit(0);\n  };\n\n  repl.inspectOptions = {\n    ...(repl.inspectOptions ?? console.options),\n    depth: Infinity,    \n    compact: false\n  };\n\n  console.log = (...args) => repl.printStatus(() => log(console.config(repl.inspectOptions), ...args));\n\n  let logFile =\n    {\n      puts(s) {\n        repl.printStatus(() => std.puts(s));\n      }\n    } ?? std.open('upload-server.log', 'w+');\n\n  let connections = new Set();\n  let by_uuid = {};\n\n  function ParseBody(gen) {\n    let prom,\n      o = '',\n      x;\n\n    while((x = gen.next())) {\n      let { value, done } = x;\n      o += value;\n    }\n    return o;\n  }\n\n  const createWS = (globalThis.createWS = (url, callbacks, listen) => {\n    //console.log('createWS', { url, callbacks, listen });\n\n    globalThis.out = s => logFile.puts(s + '\\n');\n\n    logLevel = (params.debug ? LLL_USER : 0) | (((params.debug ? LLL_INFO : LLL_WARN) << 1) - 1);\n    console.log('createWS', { logLevel });\n\n    return [client, server][+listen]({\n      tls: params.tls,\n      sslCert,\n      sslPrivateKey,\n      mimetypes: [\n        ['.svgz', 'application/gzip'],\n        ['.mjs', 'application/javascript'],\n        ['.js', 'application/javascript'],\n        ['.wasm', 'application/octet-stream'],\n        ['.eot', 'application/vnd.ms-fontobject'],\n        ['.lib', 'application/x-archive'],\n        ['.bz2', 'application/x-bzip2'],\n        ['.gitignore', 'text/plain'],\n        ['.cmake', 'text/plain'],\n        ['.hex', 'text/plain'],\n        ['.md', 'text/plain'],\n        ['.pbxproj', 'text/plain'],\n        ['.wat', 'text/plain'],\n        ['.c', 'text/x-c'],\n        ['.h', 'text/x-c'],\n        ['.cpp', 'text/x-c++'],\n        ['.hpp', 'text/x-c++'],\n        ['.filters', 'text/xml'],\n        ['.plist', 'text/xml'],\n        ['.storyboard', 'text/xml'],\n        ['.vcxproj', 'text/xml'],\n        ['.bat', 'text/x-msdos-batch'],\n        ['.mm', 'text/x-objective-c'],\n        ['.m', 'text/x-objective-c'],\n        ['.sh', 'text/x-shellscript']\n      ],\n      mounts: [\n        ['/', '.', 'upload.html'],\n        ['/get', './uploads', ''],\n        ['/warmcat', 'http://warmcat.com/', 'index.html'],\n        ['/distrelec', 'https://www.distrelec.ch/', 'login'],\n        ['/hasura', 'http://wild-beauty.herokuapp.com/v1/', 'graphql'],\n        // ['/upload', 'lws-deaddrop', null, 'lws-deaddrop'],\n        async function* test(req, resp) {\n          resp.type = 'text/plain';\n\n          console.log('*test', { req, resp });\n\n          let bodyStr = '';\n          if(req.method == 'POST') {\n            //console.log('req.body', req.body);\n            //              console.log('req.body.next()', await req.body.next());\n\n            for await(let chunk of await req.body) {\n              console.log('chunk', chunk);\n              bodyStr += toString(chunk);\n            }\n          }\n          console.log('bodyStr', bodyStr);\n\n          for(let i = 0; i < 10; i++) {\n            yield `line #${i}\\n`;\n            await waitFor((10 - i + 1) * 10);\n          }\n\n          yield 'done!';\n        },\n        function proxy(req, resp) {\n          console.log('proxy', { req, resp });\n          const { url, method, headers } = req;\n          console.log('proxy', { url, method, headers });\n          const { status, ok, type } = resp;\n\n          console.log('proxy', { status, ok, url, type });\n        },\n        function* config(req, resp) {\n          console.log('*config', { req, resp });\n          yield '{}';\n        },\n        function* file(req, resp) {\n          let { body, headers, json, url } = req;\n          let { query } = url;\n\n          if(typeof body == 'string')\n            query = {\n              ...query,\n              ...(JSON.parse(body) ?? {})\n            };\n\n          let { action = 'list', charset = 'utf-8', binary = false, file, contents } = query ?? {};\n\n          if(/^\\/file\\/./.test(url.path)) {\n            file = url.path.replace(/^\\/file\\//, '');\n            action = 'load';\n          }\n          console.log('*file', { query, body, file });\n\n          console.log(`*file`, { action, file });\n\n          if(file) {\n            file = path.absolute(file);\n            file = path.collapse(file);\n            console.log(\n              `allowedDirs:`,\n              allowedDirs.map(dir => path.normalize(dir))\n            );\n\n            //    console.log(`allowed:`, allowedDirs.map(dir => path.isin(file, dir)));\n            let allowed = allowedDirs.some(dir => path.isin(file, path.normalize(dir)));\n\n            if(!allowed) {\n              console.log(`Not allowed: '${file}'`);\n              throw new Error(`Not allowed: '${file}'`);\n            }\n          }\n\n          switch (action) {\n            case 'load':\n              let mime = GetMime(file);\n              resp.type = mime;\n              let data = fs.readFileSync(file, 1 | binary ? null : charset);\n              console.log(`*file.load`, { data });\n              yield data;\n              resp.body = data;\n              //yield\n              break;\n            case 'save':\n              fs.writeFileSync(file, contents);\n              yield 'done!\\r\\n';\n              break;\n            case 'list':\n              let files = fs.readdirSync('uploads').filter(f => !/^\\.$/.test(f));\n              let component = h(\n                HTMLPage,\n                {\n                  title: 'File list',\n                  style: `\nbody, * {\n  font-family: MiscFixedSC613,Fixed,\"Courier New\";\n}\n\n                `,\n                  scripts: ['filelist.js']\n                },\n                [\n                  h(FilterForm, {}, []),\n                  h(FileTable, {\n                    files: files.map(file => ({\n                      file,\n                      stat: fs.statSync(file)\n                    }))\n                  })\n                ]\n              );\n              yield renderToString(component);\n              break;\n              yield files.join('\\n');\n\n              break;\n            default:\n              throw new Error(`No such command: '${action}'`);\n          }\n        },\n        function* uploads(req, resp) {\n          resp.type = 'application/json';\n          console.log('uploads', req, resp);\n          console.log('req.url', req.url);\n          console.log('req.url.query', req.url.query);\n          let result = [];\n\n          for(let entry of glob('uploads/*.json')) {\n            let json = ReadJSON(entry);\n            result.push(json);\n          }\n\n          yield JSON.stringify(result);\n        },\n        function* files(req, resp) {\n          let { body, headers, json, url } = req;\n          let { query } = url;\n\n          define(globalThis, { filesRequest: { req, resp, body, query } });\n\n          console.log('*files', { req, resp, body, query });\n\n          const data = query ?? {}; //json ? json : JSON.parse(body ?? '{}');\n\n          resp.type = 'application/json';\n          let {\n            dirs = defaultDirs,\n            filter = '[^.].*' ?? '.(brd|sch|G[A-Z][A-Z])$',\n            verbose = false,\n            objects = true,\n            key = 'mtime',\n            limit = null,\n            flat = false\n          } = data ?? {};\n          let results = [];\n          for(let dir of dirs) {\n            let st,\n              names = [];\n            if(Array.isArray(dir)) {\n              let [, re] = dir;\n              let absdir = path.realpath(dir[0]);\n              names = [...RecursiveDirIterator(absdir, n => re.test(n))]; //.map(n => path.relative(n, absdir));\n              dir = path.relative(absdir, path.getcwd());\n            } else if((st = fs.statSync(dir)) && st.isDirectory()) {\n              let absdir = path.realpath(dir);\n              let components = absdir.split(path.sep);\n              if(components.length && components[0] === '') components.shift();\n              if(components.length < 2 || components[0] != 'home') throw new Error(`Access error`);\n              names = fs.readdirSync(absdir) ?? [];\n              dir = path.relative(absdir, path.getcwd());\n            } else {\n              names = glob(dir, GLOB_BRACE);\n              if(!Array.isArray(names)) names = [];\n              let a = path.toArray(dir);\n              let i = a.findIndex(n => /[*{}]/.test(n));\n              dir = path.slice(dir, 0, i);\n              names = names.map(n => n.slice(dir.length + 1));\n            }\n            if(!Array.isArray(names)) continue;\n            names = names.sort((a, b) => '' + b < '' + a);\n            if(filter) {\n              const re = new RegExp(filter, 'gi');\n              names = names.filter(name => re.test(name));\n            }\n            if(limit) {\n              let [offset = 0] = limit;\n              let [, length = names.length - start] = limit;\n              names = names.slice(offset, offset + length);\n            }\n            let entries = names\n              .map(file => (fs.existsSync(`${dir}/${file}`) ? `${dir}/${file}` : file))\n              .map(file => [file, path.relative(file, path.getcwd())])\n              .map(([file, rel]) => [file, fs.statSync(rel)]);\n            entries = entries.reduce((acc, [file, st]) => {\n              let name = file + (st && st.isDirectory() ? '/' : '');\n              let obj = {\n                name\n              };\n              acc.push([\n                name,\n                Object.assign(\n                  obj,\n                  st\n                    ? {\n                        mtime: toUnixTime(st.mtime),\n                        time: toUnixTime(st.ctime),\n                        mode: `0${(st.mode & 0x09ff).toString(8)}`,\n                        size: st.size\n                      }\n                    : {}\n                )\n              ]);\n              return acc;\n            }, []);\n\n            if(entries.length) {\n              let cmp = {\n                string(a, b) {\n                  return a[1][key].localeCompare(b[1][key]);\n                },\n                number(a, b) {\n                  return a[1][key] - b[1][key];\n                }\n              }[typeof entries[0][1][key]];\n              entries = entries.sort(cmp);\n            }\n            names = entries.map(([name, obj]) => (objects ? obj : name));\n\n            if(names.length > 0) {\n              //console.log('files result', { dir, names });\n              if(flat) names.map(({ name }) => results.push({ name: path.normalize(path.join(dir, name)) }));\n              else results.push({ dir, names });\n            }\n          }\n\n          // yield '\\n]';\n          yield JSON.stringify(...[results, ...(verbose ? [null, 2] : [])]);\n        }\n      ],\n      ...url,\n\n      ...callbacks,\n      onConnect(ws, req) {\n        const { peer, address, port } = ws;\n\n        //  console.log('\\x1b[38;5;33monConnect\\x1b[0m', { address, port });\n\n        ws.sendCommand = function(data) {\n          if(!isArrayBuffer(data) /*&& isObject(data)*/) data = JSON.stringify(data);\n\n          return this.send(data);\n        };\n        if(!ws.uuid) {\n          let data = (ws.uuid = MakeUUID());\n\n          ws.sendCommand({ type: 'uuid', data });\n          by_uuid[data] = ws;\n        }\n        connections.add(ws);\n        if(!req.url || req.url.path.endsWith('uploads')) {\n        } else {\n        }\n        if(callbacks.onConnect) return callbacks.onConnect(ws, req);\n      },\n      onClose(ws, reason) {\n        connections.delete(ws);\n\n        return callbacks.onClose(ws, reason);\n      },\n      /*      onRead(data) {\n         const req = this;\n        console.log('onRead', { req, data }); \n      },*/\n      /* onPost(data) {\n       const req = this;\n        try {\n          req.json = JSON.parse(data);\n        } catch(error) {\n          console.log('onPost', { req, data, error });\n        }\n      },*/\n      onHttp(ws, req, resp) {\n        /* if(req.method != 'GET')*/ //console.log('onHttp', console.config({ compact: 0 }), ws);\n        console.log('onHttp', console.config({ compact: 0 }), {ws,req});\n\n        define(globalThis, { ws, req, resp });\n\n        const { peer, address, port } = ws;\n        const { method, headers } = req;\n\n        if(req.url.path.endsWith('files')) {\n          resp.type = 'application/json';\n        } else if(req.method != 'GET' && req.headers['content-type'] == 'application/x-www-form-urlencoded') {\n          let fp,\n            hash,\n            tmpnam,\n            ext,\n            progress = 0;\n          console.log(req.method, headers);\n          if(req.url.path.endsWith('upload')) resp.status = 200;\n          resp.type = 'text/raw';\n\n          fp = new FormParser(ws, ['files', 'uuid'], {\n            chunkSize: 8192 /** 256*/,\n            onOpen(name, filename) {\n              console.log(`onOpen(${name}, ${filename})`);\n              if(this.file) {\n                this.onclose.call(this, name);\n              }\n\n              this.name = name;\n              this.filename = filename;\n              ext = path.extname(filename).toLowerCase();\n\n              this.file = fs.openSync((this.temp = 'uploads/' + (tmpnam = randStr(20) + '.tmp')), 'w+', 0o644);\n              hash = new Hash(Hash.TYPE_SHA1);\n            },\n            onContent(name, data) {\n              // console.log(`onContent(${this.filename})`,data.byteLength);\n              progress += data.byteLength;\n\n              let ws2 = by_uuid[ws.uuid ?? this.uuid];\n\n              fs.writeSync(this.file, data);\n              hash.update(data);\n              if(ws2)\n                ws2.sendCommand({\n                  type: 'progress',\n                  done: progress,\n                  name,\n                  filename: this.filename,\n                  total: +headers['content-length']\n                });\n            },\n\n            onClose(name, file) {\n              try {\n                console.log(`onClose[1](${name}, ${file})`, this.uuid);\n                let exif, cache, sha1;\n                if(hash) {\n                  hash.finalize();\n                  sha1 = hash.toString();\n                }\n                if(this.file) {\n                  fs.closeSync(this.file);\n                  this.file = null;\n                }\n                if(sha1) {\n                  let f = x => 'uploads/' + sha1 + x;\n                  let ret = link(this.temp, f(ext));\n                  let { errno } = error();\n                  let json = f('.json');\n                  if(fs.existsSync(json) && (cache = ReadJSON(json))) {\n                    exif = cache.exif;\n                  } else {\n                    if(!/(png|svg|gif|tga)$/i.test(ext)) {\n                      try {\n                        exif = ReadExiftool(f(ext));\n                      } catch(e) {\n                        try {\n                          exif = ReadExiftool(this.temp);\n                        } catch(e) {}\n                      }\n                    }\n                    let obj = {\n                      filename: this.filename,\n                      storage: f(ext),\n                      uploaded: Date.now(),\n                      address,\n                      exif\n                    };\n                    if(!/jpe?g$/.test(ext)) {\n                      HeifConvert(f(ext), f('.jpg'));\n                      if(fs.existsSync(f('.jpg'))) obj.jpg = f('.jpg');\n                    }\n                    let width = '',\n                      height = '256';\n\n                    if(exif) {\n                      const { ImageSize, ImageHeight, ImageWidth } = exif;\n                      let aspect = ImageWidth / ImageHeight;\n                      if(aspect >= 1) {\n                        width = 256;\n                        height = width / aspect;\n                      } else {\n                        /* height = 256;\n                        width = height * aspect;*/\n                      }\n                    }\n\n                    MagickResize(obj.jpg ?? f(ext), f('.thumb.jpg'), obj.exif?.Rotation ?? 0, width, height);\n\n                    if(fs.existsSync(f('.thumb.jpg'))) obj.thumbnail = f('.thumb.jpg');\n                    WriteJSON(json, obj);\n                    // console.log(`by_uuid`, by_uuid);\n                    console.log(`uuid`, ws.uuid ?? this.uuid);\n                    cache = obj;\n                  }\n                  if(ret == 0 || errno == 17) {\n                    unlink(this.temp);\n                    this.temp = null;\n                  }\n                }\n                const { filename } = this;\n                let ws2 = by_uuid[ws.uuid ?? this.uuid];\n                if(ws2)\n                  ws2.sendCommand({\n                    type: 'upload',\n                    ...(cache ?? {}),\n                    filename,\n                    exif\n                  });\n                //  console.log(`onClose[2](${name}, ${file})`);\n              } catch(e) {\n                console.log(`onClose ERROR:`, e.message);\n              }\n            },\n            onFinalize() {\n              console.log(`onFinalize() form parser`, this.uuid);\n              resp.body = `done: ${progress} bytes read\\r\\n`;\n            }\n          });\n        }\n\n        const { body, url } = resp;\n        const { referer } = req.headers;\n\n        let file = url.path.slice(1);\n        const dir = path.dirname(file); //file.replace(/\\/[^\\/]*$/g, '');\n\n        if(file.endsWith('.txt') || file.endsWith('.html') || file.endsWith('.css')) {\n          resp.body = fs.readFileSync(file, 'utf-8');\n        } else if(file.endsWith('.js')) {\n          let file1 = file;\n          if(/qjs-modules\\/lib/.test(file) && !/(dom|util)\\.js/.test(file)) {\n            let file2 = file.replace(/.*qjs-modules\\//g, '');\n            if(fs.existsSync(file2)) {\n              file = file2;\n            }\n          } else if(!fs.existsSync(file)) {\n            for(let dir of ['quickjs/qjs-modules', 'quickjs/qjs-modules/lib', '.', 'lib']) {\n              let file2 = dir + '/' + file;\n              console.log('inexistent file', file, file2, fs.existsSync(file2), referer);\n              if(fs.existsSync(file2)) {\n                file = file2;\n                break;\n              }\n            }\n          }\n\n          if(file1 != file) {\n            //  console.log('\\x1b[38;5;214monHttp\\x1b[0m', file1, '->', file);\n            resp.status = 302;\n            resp.headers = { ['Location']: '/' + file };\n            return resp;\n          }\n          //console.log('\\x1b[38;5;33monHttp\\x1b[0m', file1, file);\n\n          //\n          let body = fs.readFileSync(file, 'utf-8');\n\n          const re = /^(\\s*(im|ex)port[^\\n]*from ['\"])([^./'\"]*)(['\"]\\s*;[\\t ]*\\n?)/gm;\n\n          resp.body = body.replaceAll(re, (match, p1, p0, p2, p3, offset) => {\n            if(!/[\\/\\.]/.test(p2)) {\n              let fname = `${p2}.js`;\n              let rel = path.relative(fname, dir);\n              console.log('onHttp', { match, fname }, rel);\n\n              // if(!fs.existsSync(  rel)) return ``;\n\n              match = [p1, rel, p3].join('');\n\n              console.log('args', {\n                match,\n                p1,\n                p2,\n                p3,\n                offset\n              });\n            }\n            return match;\n          });\n        }\n        console.log('\\x1b[38;5;33monHttp\\x1b[0m', { resp });\n\n        return resp;\n      },\n      onMessage(ws, data) {\n        console.log('onMessage', ws, data);\n        return callbacks.onMessage(ws, data);\n      },\n      onFd(fd, rd, wr) {\n        return callbacks.onFd(fd, rd, wr);\n      },\n      ...(url && url.host ? url : {})\n    });\n  });\n\n  define(globalThis, {\n    get connections() {\n      return [...connections];\n    },\n    get by_uuid() {\n      return by_uuid;\n    },\n    uuid(data) {\n      return by_uuid[data];\n    }\n  });\n\n  Object.assign(globalThis, {\n    repl,\n    quit,\n    exit: quit,\n    std,\n    os,\n    deep,\n    fs,\n    path,\n    ReadJSON,\n    WriteJSON,\n    ReadFile,\n    WriteFile,\n    ReadBJSON,\n    WriteBJSON,\n    parseDate,\n    dateToObject,\n    Hash,\n    FormParser,\n    ExecTool,\n    Execute\n  });\n\n  delete globalThis.DEBUG;\n\n  createWS(\n    { protocol: 'ws', host: '0.0.0.0', port: 8999 },\n    {\n      onFd(fd, rd, wr) {\n        os.setReadHandler(fd, rd);\n        os.setWriteHandler(fd, wr);\n      },\n      onClose(ws, reason) {},\n      onMessage(ws, data) {}\n    },\n    true\n  );\n\n  function quit(why) {\n    console.log(`quit('${why}')`);\n\n    let cfg = { inspectOptions: console.options };\n    WriteJSON(`.${base}-config`, cfg);\n    repl.cleanup(why);\n  }\n\n  repl.runSync();\n}\n\ntry {\n  main(...scriptArgs.slice(1));\n} catch(error) {\n  console.log(`FAIL: ${error?.message ?? error}\\n${error?.stack}`);\n  1;\n  std.exit(1);\n} finally {\n}\n",
			"file": "upload-server.js",
			"file_size": 30957,
			"file_write_time": 133142344950591858,
			"settings":
			{
				"buffer_size": 30961,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					19,
					1,
					"cut",
					null,
					"AQAAAJZWAAAAAAAAllYAAAAAAAA9AAAAIGNvbnNvbGUubG9nKCdvbkh0dHAnLCBjb25zb2xlLmNvbmZpZyh7IGNvbXBhY3Q6IDAgfSksIHJlcSk7Cg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACWVgAAAAAAANNWAAAAAAAAAAAAAAAA8L8"
				],
				[
					20,
					2,
					"paste",
					null,
					"AgAAAJZWAAAAAAAA01YAAAAAAAAAAAAA01YAAAAAAAAQVwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACWVgAAAAAAAJZWAAAAAAAAAAAAAAAA8L8"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": "ws"
					},
					"AwAAAM1WAAAAAAAAzlYAAAAAAAAAAAAAzlYAAAAAAADOVgAAAAAAAAMAAAByZXHOVgAAAAAAAM9WAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADNVgAAAAAAANBWAAAAAAAAAAAAAAAA8L8"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "ws,"
					},
					"AwAAAC1XAAAAAAAALlcAAAAAAAAAAAAALlcAAAAAAAAvVwAAAAAAAAAAAAAvVwAAAAAAADBXAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAtVwAAAAAAAC1XAAAAAAAAAAAAAAAA8L8"
				],
				[
					38,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADWeAAAaW1wb3J0ICogYXMgc3RkIGZyb20gJ3N0ZCc7CmltcG9ydCAqIGFzIG9zIGZyb20gJ29zJzsKaW1wb3J0ICogYXMgZGVlcCBmcm9tICcuL2xpYi9kZWVwLmpzJzsKaW1wb3J0ICogYXMgeG1sIGZyb20gJ3htbCc7CmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7CmltcG9ydCB7IENvbnNvbGUgfSBmcm9tICdjb25zb2xlJzsKaW1wb3J0IFJFUEwgZnJvbSAnLi9xdWlja2pzL3Fqcy1tb2R1bGVzL2xpYi9yZXBsLmpzJzsKaW1wb3J0IGluc3BlY3QgZnJvbSAnLi9saWIvb2JqZWN0SW5zcGVjdC5qcyc7CmltcG9ydCAqIGFzIFRlcm1pbmFsIGZyb20gJy4vdGVybWluYWwuanMnOwppbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7CmltcG9ydCB7IGxpbmssIHVubGluaywgZXJyb3IgfSBmcm9tICdtaXNjJzsKaW1wb3J0IHsgdG9TdHJpbmcsIGRlZmluZSwgdG9Vbml4VGltZSwgZ2V0T3B0LCByYW5kU3RyLCBpc09iamVjdCwgaXNOdW1lcmljLCBpc0FycmF5QnVmZmVyLCBnbG9iLCBHTE9CX0JSQUNFLCB3YWl0Rm9yIH0gZnJvbSAndXRpbCc7CmltcG9ydCB7IHNldExvZywgTExMX1VTRVIsIExMTF9OT1RJQ0UsIExMTF9XQVJOLCBMTExfSU5GTywgY2xpZW50LCBzZXJ2ZXIsIEZvcm1QYXJzZXIsIEhhc2gsIFJlc3BvbnNlIH0gZnJvbSAnbmV0JzsKaW1wb3J0IHsgcGFyc2VEYXRlLCBkYXRlVG9PYmplY3QgfSBmcm9tICcuL2RhdGUtaGVscGVycy5qcyc7CmltcG9ydCB7IElmRGVidWcsIExvZ0lmRGVidWcsIFJlYWRGaWxlLCBMb2FkSGlzdG9yeSwgUmVhZEpTT04sIFJlYWRYTUwsIE1hcEZpbGUsIFdyaXRlRmlsZSwgV3JpdGVKU09OLCBXcml0ZVhNTCwgUmVhZEJKU09OLCBXcml0ZUJKU09OLCBEaXJJdGVyYXRvciwgUmVjdXJzaXZlRGlySXRlcmF0b3IsIFJlYWREaXJSZWN1cnNpdmUsIEZpbHRlciwgRmlsdGVySW1hZ2VzLCBTb3J0RmlsZXMsIFN0YXRGaWxlcywgUmVhZEZkLCBGZFJlYWRlciwgQ29weVRvQ2xpcGJvYXJkLCBSZWFkQ2FsbGJhY2ssIExvZ0NhbGwsIFNwYXduLCBGZXRjaFVSTCB9IGZyb20gJy4vaW8taGVscGVycy5qcyc7CmltcG9ydCB7IHBhcnNlRGVnTWluU2VjLCBwYXJzZUdQU0xvY2F0aW9uIH0gZnJvbSAnLi9zdHJpbmctaGVscGVycy5qcyc7CmltcG9ydCB7IGgsIGh0bWwsIHJlbmRlciwgQ29tcG9uZW50LCB1c2VTdGF0ZSwgdXNlTGF5b3V0RWZmZWN0LCB1c2VSZWYgfSBmcm9tICcuL2xpYi9wcmVhY3QubWpzJzsKaW1wb3J0IHJlbmRlclRvU3RyaW5nIGZyb20gJy4vbGliL3ByZWFjdC1yZW5kZXItdG8tc3RyaW5nLmpzJzsKaW1wb3J0IHsgZXhlYywgc3Bhd24gfSBmcm9tICdjaGlsZF9wcm9jZXNzJzsKaW1wb3J0IHsgRXhlY3V0ZSB9IGZyb20gJy4vb3MtaGVscGVycy5qcyc7CmltcG9ydCB0cmtsIGZyb20gJy4vbGliL3Rya2wuanMnOwoKZ2xvYmFsVGhpcy5mcyA9IGZzOwpnbG9iYWxUaGlzLmxvZ0ZpbHRlciA9CiAgLyh3c19zZXRfdGltZW91dDogb24gaW1tb3J0YWwgc3RyZWFtfFVuaGFuZGxlZHxQUk9YWS18VkhPU1RfQ0VSVF9BR0lOR3xCSU5EfEVWRU5UX1dBSVR8V1JJVEFCTEUpLzsKCnRya2wucHJvcGVydHkoZ2xvYmFsVGhpcywgJ2xvZ0xldmVsJykuc3Vic2NyaWJlKHZhbHVlID0+CiAgc2V0TG9nKHZhbHVlLCAobGV2ZWwsIG1lc3NhZ2UpID0+IHsKICAgIGlmKC9fX2x3cy8udGVzdChtZXNzYWdlKSkgcmV0dXJuOwogICAgaWYobGV2ZWwgPT0gTExMX0lORk8gJiYgIS9wcm94eS8udGVzdChtZXNzYWdlKSkgcmV0dXJuOwogICAgaWYobG9nRmlsdGVyLnRlc3QobWVzc2FnZSkpIHJldHVybjsKCiAgICAvL2lmKHBhcmFtcy5kZWJ1ZyB8fCBsZXZlbCA8PSBMTExfV0FSTikKICAgIG91dCgKICAgICAgKAogICAgICAgIFsnRVJSJywgJ1dBUk4nLCAnTk9USUNFJywgJ0lORk8nLCAnREVCVUcnLCAnUEFSU0VSJywgJ0hFQURFUicsICdFWFQnLCAnQ0xJRU5UJywgJ0xBVEVOQ1knLCAnTUlOTkVUJywgJ1RIUkVBRCddWwogICAgICAgICAgTWF0aC5sb2cyKGxldmVsKQogICAgICAgIF0gPz8gbGV2ZWwgKyAnJwogICAgICApLnBhZEVuZCg4KSArIG1lc3NhZ2UucmVwbGFjZSgvXG4vZywgJ1xcbicpCiAgICApOwogIH0pCik7CgpmdW5jdGlvbiBFeGVjVG9vbChjbWQsIC4uLmFyZ3MpIHsKICBsZXQgY2hpbGQgPSBzcGF3bihjbWQsIGFyZ3MsIHsgc3RkaW86IFswLCAncGlwZScsIDJdIH0pOwogIGxldCBbc3RkaW4sIHN0ZG91dCwgc3RkZXJyXSA9IGNoaWxkLnN0ZGlvOwogIGxldCByOwogIGxldCBiID0gbmV3IEFycmF5QnVmZmVyKDEwMjQpOwogIHIgPSBjaGlsZC53YWl0KCk7CiAgLy8gY29uc29sZS5sb2coJ0V4ZWNUb29sJywgeyBhcmdzLCBjaGlsZCB9KTsKCiAgciA9IG9zLnJlYWQoc3Rkb3V0LCBiLCAwLCAxMDI0KTsKICBsZXQgZGF0YSA9IGIuc2xpY2UoMCwgcik7CiAgbGV0IHN0ciA9IHRvU3RyaW5nKGRhdGEpOwoKICByZXR1cm4gc3RyOwp9CgpmdW5jdGlvbiBHZXRNaW1lKGZpbGUpIHsKICBsZXQgb3V0cHV0ID0gRXhlY1Rvb2woJ2ZpbGUnLCAnLWknLCBmaWxlKTsKICBvdXRwdXQgPSBvdXRwdXQucmVwbGFjZSgvW1xyXG5dKiQvZywgJycpOwogIG91dHB1dCA9IG91dHB1dC5yZXBsYWNlKG5ldyBSZWdFeHAoZmlsZSArICc6XFxzKycpLCAnJyk7CiAgb3V0cHV0ID0gb3V0cHV0LnJlcGxhY2UoL1w7XHMqLiovZywgJycpOwogIHJldHVybiBvdXRwdXQ7Cn0KCmNvbnN0IE1ha2VVVUlEID0gKHJuZyA9IE1hdGgucmFuZG9tKSA9PiBbOCwgNCwgNCwgNCwgMTJdLm1hcChuID0+IHJhbmRTdHIobiwgJzAxMjM0NTY3ODlhYmNkZWYnKSwgcm5nKS5qb2luKCctJyk7Cgpjb25zdCBkZWZhdWx0RGlycyA9IChnbG9iYWxUaGlzLmRlZmF1bHREaXJzID0gWwogICcuJywKICAuLi5nbG9iKCcuLi8qL2VhZ2xlJyksCiAgJy4vdXBsb2Fkcy8qLntzY2gsYnJkLGxicn0nLAogICcvbW50L2V4dGV4dC9QaG90b3MvKkFQUExFLyoue0pQRyxQTkcsR0lGLEFBRSxNT1YsSEVJQyxNUDQsV0VCUH0nLAogIFsnL2hvbWUvcm9tYW4vQmlsZGVyJywgbmV3IFJlZ0V4cCgnLihqcGd8anBlZ3xwbmd8aGVpY3x0aWZ8dGlmZikkJywgJ2knKV0KXSk7Cgpjb25zdCBhbGxvd2VkRGlycyA9IChnbG9iYWxUaGlzLmFsbG93ZWREaXJzID0gZGVmYXVsdERpcnMKICAubWFwKGRkID0+IEdldERpcihBcnJheS5pc0FycmF5KGRkKSA/IGRkWzBdIDogZGQpKQogIC5tYXAoZCA9PiBwYXRoLnJlc29sdmUoZCkpKTsKCmZ1bmN0aW9uIEdldERpcihkaXIpIHsKICBsZXQgYSA9IHBhdGgudG9BcnJheShkaXIpOwogIGxldCBpID0gYS5maW5kSW5kZXgobiA9PiAvWyp7fV0vLnRlc3QobikpOwogIHJldHVybiBpICE9IC0xID8gcGF0aC5zbGljZShkaXIsIDAsIGkpIDogZGlyOwp9CgpmdW5jdGlvbiBEYXRlU3RyKGRhdGUpIHsKICBsZXQgc3RyID0gZGF0ZS50b0lTT1N0cmluZygpOwogIGxldCB0aSA9IHN0ci5pbmRleE9mKCdUJyk7CiAgcmV0dXJuICgKICAgIHN0ci5zdWJzdHJpbmcoMCwgdGkpIC8qLnJlcGxhY2UoLy0vZywgJycpKi8gKyAnICcgKyBzdHIuc3Vic3RyaW5nKHRpICsgMSwgdGkgKyAxICsgOCkgLy8ucmVwbGFjZSgvOi9nLCAnJykKICApOwp9CgpmdW5jdGlvbiBNb2RlU3RyKG1vZGUpIHsKICByZXR1cm4gKAogICAgKG1vZGUgJiAoMG8xMjAwMDAgPT0gMG8xMjAwMDApID8gJ2wnIDogbW9kZSAmIDBvNDAwMDAgPyAnZCcgOiAnLScpICsKICAgIChtb2RlICYgMGIxMDAwMDAwMDAgPyAncicgOiAnLScpICsKICAgIChtb2RlICYgMGIwMTAwMDAwMDAgPyAndycgOiAnLScpICsKICAgIChtb2RlICYgMGIwMDEwMDAwMDAgPyAneCcgOiAnLScpICsKICAgIChtb2RlICYgMGIxMDAwMDAgPyAncicgOiAnLScpICsKICAgIChtb2RlICYgMGIwMTAwMDAgPyAndycgOiAnLScpICsKICAgIChtb2RlICYgMGIwMDEwMDAgPyAneCcgOiAnLScpICsKICAgIChtb2RlICYgMGIxMDAgPyAncicgOiAnLScpICsKICAgIChtb2RlICYgMGIwMTAgPyAndycgOiAnLScpICsKICAgIChtb2RlICYgMGIwMDEgPyAneCcgOiAnLScpCiAgKTsKfQoKY29uc3QgSFRNTFBhZ2UgPSAoeyB0aXRsZSwgc3R5bGUsIHNjcmlwdHMgPSBbXSwgY2hpbGRyZW4sIC4uLnByb3BzIH0pID0+IHsKICByZXR1cm4gaCgnaHRtbCcsIHt9LCBbCiAgICBoKAogICAgICAnaGVhZCcsCiAgICAgIHt9LAogICAgICBbCiAgICAgICAgaCgndGl0bGUnLCB7fSwgW3RpdGxlXSksCiAgICAgICAgLi4uKHN0eWxlID8gW2goJ3N0eWxlJywgeyB0eXBlOiAndGV4dC9jc3MnIH0sIFtzdHlsZV0pXSA6IFtdKSwKICAgICAgICBoKAogICAgICAgICAgJ2xpbmsnLAogICAgICAgICAgewogICAgICAgICAgICByZWw6ICdzdHlsZXNoZWV0JywKICAgICAgICAgICAgaHJlZjogJ3N0YXRpYy9jc3MvbGlzdC5jc3MnCiAgICAgICAgICB9LAogICAgICAgICAgW10KICAgICAgICApCiAgICAgIF0uY29uY2F0KHNjcmlwdHMubWFwKHNjcmlwdCA9PiBoKCdzY3JpcHQnLCB7IHR5cGU6ICdtb2R1bGUnLCBzcmM6IHNjcmlwdCB9KSkpCiAgICApLAogICAgaCgnYm9keScsIHt9LCBjaGlsZHJlbiA/PyBbXSkKICBdKTsKfTsKCmNvbnN0IEZpbHRlckZvcm0gPSAoeyAuLi5wcm9wcyB9KSA9PgogIGgoJ2Zvcm0nLCB7IGFjdGlvbjogJ2ZpbGUnLCBtZXRob2Q6ICdQT1NUJyB9LCBbCiAgICBoKAogICAgICAnaW5wdXQnLAogICAgICB7CiAgICAgICAgdHlwZTogJ3RleHQnLAogICAgICAgIHNpemU6IDIwLAogICAgICAgIG5hbWU6ICdmaWx0ZXInLAogICAgICAgIHZhbHVlOiAnLionIC8qLAogICAgICAgIG9uY2hhbmdlOiBlID0+IHsKICAgICAgICAgIGNvbnNvbGUubG9nKCdvbmNoYW5nZScsIGUpOwogICAgICAgIH0qLwogICAgICB9LAogICAgICBbXQogICAgKSwKICAgIGgoJ2lucHV0JywgeyB0eXBlOiAnc3VibWl0JywgdmFsdWU6ICdTdWJtaXQnLCBjbGFzczogJ2hpZGRlbicgfSwgW10pCiAgXSk7Cgpjb25zdCBIVE1MVGFibGUgPSAoeyByb3dzLCAuLi5wcm9wcyB9KSA9PiBoKCd0YWJsZScsIHByb3BzLCByb3dzKTsKY29uc3QgSFRNTFRhYmxlUm93ID0gKHsgY29sdW1ucywgLi4ucHJvcHMgfSkgPT4gaCgndHInLCBwcm9wcywgY29sdW1ucyk7CmNvbnN0IEhUTUxUYWJsZUNvbHVtbiA9ICh7IGNvbHVtbnMsIGNoaWxkcmVuLCB0YWcgPSAndGQnLCAuLi5wcm9wcyB9KSA9PiBoKHRhZywgcHJvcHMsIGNoaWxkcmVuKTsKCmNvbnN0IEZpbGVMaW5rID0gKHsgZmlsZSwgLi4ucHJvcHMgfSkgPT4gewogIHJldHVybiBoKCdhJywgeyBocmVmOiAnZmlsZS91cGxvYWRzLycgKyBmaWxlIH0sIFtmaWxlXSk7Cn07CmNvbnN0IEZpbGVPYmplY3QgPSAoeyBmaWxlLCBzdGF0ID0ge30sIC4uLnByb3BzIH0pID0+IHsKICBzdGF0ID8/PSBmcy5sc3RhdFN5bmMoJ3VwbG9hZHMvJyArIGZpbGUpOwogIC8vIGNvbnNvbGUubG9nKCdGaWxlT2JqZWN0JywgeyBmaWxlLCBzdGF0IH0pOwogIGxldCBpc0RpciA9IHN0YXQuaXNEaXJlY3RvcnkoKTsKCiAgcmV0dXJuIGgoSFRNTFRhYmxlUm93LCB7fSwgWwogICAgaChIVE1MVGFibGVDb2x1bW4sIHsgY2xhc3M6ICdtb2RlJyB9LCBbCiAgICAgIC8vKHN0YXQubW9kZSAmIDBiMTExMTExMTExKS50b1N0cmluZyg4KSwKICAgICAgTW9kZVN0cihzdGF0Lm1vZGUpCiAgICBdKSwKICAgIGgoSFRNTFRhYmxlQ29sdW1uLCB7IGNsYXNzOiAnZmlsZScgfSwgW2goRmlsZUxpbmssIHsgZmlsZTogZmlsZSArIChpc0RpciA/ICcvJyA6ICcnKSB9LCBbXSldKSwKICAgIGgoSFRNTFRhYmxlQ29sdW1uLCB7IGNsYXNzOiAnc2l6ZScgfSwgW3N0YXQuc2l6ZSArICcnXSksCiAgICBoKEhUTUxUYWJsZUNvbHVtbiwgeyBjbGFzczogJ2RhdGUnIH0sIFtEYXRlU3RyKG5ldyBEYXRlKHN0YXQuYXRpbWUpKV0pCiAgXSk7Cn07Cgpjb25zdCBGaWxlVGFibGUgPSAoeyBmaWxlcywgLi4ucHJvcHMgfSkgPT4gewogIC8vY29uc29sZS5sb2coJ0ZpbGVUYWJsZScsIGZpbGVzKTsKCiAgbGV0IGZpZWxkcyA9IFsnbW9kZScsICdmaWxlJywgJ3NpemUnLCAnYXRpbWUnXTsKCiAgZmlsZXMgPSBmaWxlcy5zb3J0KChhLCBiKSA9PiBhLmZpbGUubG9jYWxlQ29tcGFyZShiLmZpbGUpKTsKCiAgcmV0dXJuIGgoCiAgICBIVE1MVGFibGUsCiAgICB7CiAgICAgIC4uLnByb3BzLAogICAgICBjZWxsc3BhY2luZzogMCwKICAgICAgY2VsbHBhZGRpbmc6IDAsCiAgICAgIGJvcmRlcjogMCwKICAgICAgcm93czogWwogICAgICAgIGgoCiAgICAgICAgICBIVE1MVGFibGVSb3csCiAgICAgICAgICB7CiAgICAgICAgICAgIGNvbHVtbnM6IGZpZWxkcy5tYXAoZmllbGQgPT4gaChIVE1MVGFibGVDb2x1bW4sIHsgdGFnOiAndGgnIH0sIFtmaWVsZF0pKQogICAgICAgICAgfSwKICAgICAgICAgIFtdCiAgICAgICAgKQogICAgICBdLmNvbmNhdChmaWxlcy5tYXAoZmlsZSA9PiBoKEZpbGVPYmplY3QsIGZpbGUsIFtdKSkpCiAgICB9LAogICAgW10KICApOwp9OwoKZnVuY3Rpb24gUmVhZEV4aXYyKGZpbGUpIHsKICBjb25zb2xlLmxvZygnUmVhZEV4aXYyJywgZmlsZSk7CiAgbGV0IFtyZGYsIHN0ZG91dF0gPSBvcy5waXBlKCk7CiAgb3MuZXhlYyhbJ2V4aXYyJywgJy1lJywgJ1gtJywgJ2V4JywgZmlsZV0sIHsgc3Rkb3V0IH0pOwogIG9zLmNsb3NlKHN0ZG91dCk7CiAgbGV0IHhtcGRhdCA9IGZzLnJlYWRBbGxTeW5jKHJkZik7CiAgZnMuY2xvc2VTeW5jKHJkZik7CiAgLy8gY29uc29sZS5sb2coJ3htcGRhdCcsIHhtcGRhdCk7CiAgbGV0IHhtcCA9IHhtbC5yZWFkKHhtcGRhdCk7CiAgLy8gY29uc29sZS5sb2coJ3htcCcsIHhtcCk7CiAgbGV0IGZsYXQgPSBPYmplY3QuZnJvbUVudHJpZXMoCiAgICBkZWVwCiAgICAgIC5mbGF0dGVuKHhtcCwgW10pCiAgICAgIC5maWx0ZXIoKFtrLCB2XSkgPT4gdiAhPT0gJycgJiYgL2F0dHJpYnV0ZXMuKjovLnRlc3QoaykgJiYgIS9cLnhtbG5zLy50ZXN0KGspICYmICFpc09iamVjdCh2KSkKICAgICAgLmZpbHRlcigoW2ssIHZdKSA9PiAvKEdQU3xbWFldRGltfFtYWV1SZXN8RGF0ZSR8TWFrZSR8TW9kZWwkKS8udGVzdChrKSkKICAgICAgLm1hcCgoW2ssIHZdKSA9PiBbay5yZXBsYWNlKC8uKlwuYXR0cmlidXRlc1wuL2csICcnKSwgdl0pCiAgICAgIC5zb3J0KChhLCBiKSA9PiBhWzBdLmxvY2FsZUNvbXBhcmUoYlswXSkpCiAgICAgIC5tYXAoKFtrLCB2XSkgPT4gW2ssIGlzTmFOKCt2KSA/IChpc05hTihEYXRlLnBhcnNlKHYpKSA/IHYgOiBuZXcgRGF0ZSh2KSkgOiArdl0pCiAgKTsKICByZXR1cm4gZmxhdDsKfQoKZnVuY3Rpb24gUmVhZEV4aWZ0b29sKGZpbGUpIHsKICBjb25zb2xlLmxvZygnUmVhZEV4aWZ0b29sJywgZmlsZSk7CgogIGxldCBbcmV0LCBvdXRdID0gRXhlY3V0ZSgnZXhpZnRvb2wnLCAnLVMnLCAnLWVlJywgZmlsZSk7CgogIGxldCBhID0gb3V0LnNwbGl0KC9ccj9cbi9nKS5maWx0ZXIobCA9PiBsICE9ICcnKTsKCiAgYSA9IGEubWFwKGxpbmUgPT4gW2xpbmUsIGxpbmUuaW5kZXhPZignOiAnKV0pLm1hcCgoW2xpbmUsIGlkeF0pID0+IFtsaW5lLnNsaWNlKDAsIGlkeCksIGxpbmUuc2xpY2UoaWR4ICsgMildKTsKICBsZXQgbyA9IE9iamVjdC5mcm9tRW50cmllcyhhKTsKCiAgLy9jb25zb2xlLmxvZygnUmVhZEV4aWZ0b29sJyxvKTsKICByZXR1cm4gbzsKfQoKZnVuY3Rpb24gSGVpZkNvbnZlcnQoc3JjLCBkc3QsIHF1YWxpdHkgPSAxMDApIHsKICBjb25zb2xlLmxvZygnSGVpZkNvbnZlcnQnLCBzcmMsIGRzdCk7CiAgbGV0IGFyZ3MgPSBbJ2hlaWYtY29udmVydCcsICctcScsIHF1YWxpdHkgKyAnJywgc3JjLCBkc3RdOwogIGxldCBbcmV0LCBvdXRdID0gRXhlY3V0ZSguLi5hcmdzKTsKCiAgY29uc29sZS5sb2coJ0hlaWZDb252ZXJ0JywgeyBhcmdzLCByZXQsIG91dCB9KTsKICByZXR1cm4gW3JldCwgb3V0XTsKfQoKZnVuY3Rpb24gTWFnaWNrUmVzaXplKHNyYywgZHN0LCByb3RhdGUgPSAwLCB3aWR0aCwgaGVpZ2h0KSB7CiAgY29uc29sZS5sb2coJ01hZ2lja1Jlc2l6ZScsIHsKICAgIHdpZHRoLAogICAgaGVpZ2h0LAogICAgZHN0LAogICAgcm90YXRlCiAgfSk7CiAgbGV0IGFyZ3MgPSBbJ2NvbnZlcnQnLCBzcmMsICctcmVzaXplJywgd2lkdGggKyAneCcgKyBoZWlnaHQsIC4uLihyb3RhdGUgPyBbJy1yb3RhdGUnLCAnLScgKyByb3RhdGVdIDogW10pLCBkc3RdOwogIGxldCBbcmV0LCBvdXRdID0gRXhlY3V0ZSguLi5hcmdzKTsKCiAgY29uc29sZS5sb2coJ01hZ2lja1Jlc2l6ZScsIHsgYXJncywgcmV0LCBvdXQgfSk7CiAgcmV0dXJuIFtyZXQsIG91dF07Cn0KCmZ1bmN0aW9uIG1haW4oLi4uYXJncykgewogIGNvbnN0IGJhc2UgPSBwYXRoLmJhc2VuYW1lKHNjcmlwdEFyZ3NbMF0sICcuanMnKS5yZXBsYWNlKC9cLlthLXpdKiQvLCAnJyk7CiAgY29uc3QgY29uZmlnID0gUmVhZEpTT04oYC4ke2Jhc2V9LWNvbmZpZ2ApID8/IHt9OwoKICAvLyBjb25zb2xlLmxvZygnYWxsb3dlZERpcnMnLCBhbGxvd2VkRGlycyk7CiAgZ2xvYmFsVGhpcy5jb25zb2xlID0gbmV3IENvbnNvbGUoewogICAgaW5zcGVjdE9wdGlvbnM6IHsKICAgICAgY29tcGFjdDogMiwKICAgICAgZGVwdGg6IEluZmluaXR5LAogICAgICBjdXN0b21JbnNwZWN0OiB0cnVlLAogICAgICBtYXhBcnJheUxlbmd0aDogMjAwCiAgICB9CiAgfSk7CiAgbGV0IHBhcmFtcyA9IGdldE9wdCgKICAgIHsKICAgICAgdmVyYm9zZTogW2ZhbHNlLCAoYSwgdikgPT4gKHYgfCAwKSArIDEsICd2J10sCiAgICAgIGxpc3RlbjogW2ZhbHNlLCBudWxsLCAnbCddLAogICAgICBjb25uZWN0OiBbZmFsc2UsIG51bGwsICdjJ10sCiAgICAgIGNsaWVudDogW2ZhbHNlLCBudWxsLCAnQyddLAogICAgICBzZXJ2ZXI6IFtmYWxzZSwgbnVsbCwgJ1MnXSwKICAgICAgZGVidWc6IFtmYWxzZSwgbnVsbCwgJ3gnXSwKICAgICAgdGxzOiBbZmFsc2UsIG51bGwsICd0J10sCiAgICAgICduby10bHMnOiBbZmFsc2UsICh2LCBwdiwgbykgPT4gKChvLnRscyA9IGZhbHNlKSwgdHJ1ZSksICdUJ10sCiAgICAgIGFkZHJlc3M6IFt0cnVlLCBudWxsLCAnYSddLAogICAgICBwb3J0OiBbdHJ1ZSwgbnVsbCwgJ3AnXSwKICAgICAgJ3NzbC1jZXJ0JzogW3RydWUsIG51bGxdLAogICAgICAnc3NsLXByaXZhdGUta2V5JzogW3RydWUsIG51bGxdLAogICAgICAnQCc6ICdhZGRyZXNzLHBvcnQnCiAgICB9LAogICAgYXJncwogICk7CiAgaWYocGFyYW1zWyduby10bHMnXSA9PT0gdHJ1ZSkgcGFyYW1zLnRscyA9IGZhbHNlOwoKICBjb25zdCB7CiAgICBhZGRyZXNzID0gJzAuMC4wLjAnLAogICAgcG9ydCA9IDg5OTksCiAgICAnc3NsLWNlcnQnOiBzc2xDZXJ0ID0gJ2xvY2FsaG9zdC5jcnQnLAogICAgJ3NzbC1wcml2YXRlLWtleSc6IHNzbFByaXZhdGVLZXkgPSAnbG9jYWxob3N0LmtleScKICB9ID0gcGFyYW1zOwogIGNvbnN0IGxpc3RlbiA9IHBhcmFtcy5jb25uZWN0ICYmICFwYXJhbXMubGlzdGVuID8gZmFsc2UgOiB0cnVlOwogIGNvbnN0IGlzX3NlcnZlciA9ICFwYXJhbXMuY2xpZW50IHx8IHBhcmFtcy5zZXJ2ZXI7CgogIGxldCBuYW1lID0gcHJvY2Vzcy5lbnZbJ05BTUUnXSA/PyBiYXNlOwoKICBuYW1lID0gbmFtZQogICAgLnJlcGxhY2UoLy4qXC8vLCAnJykKICAgIC5yZXBsYWNlKC8tL2csICcgJykKICAgIC5yZXBsYWNlKC9cLlteXC8uXSokLywgJycpOwoKICBsZXQgW3ByZWZpeCwgc3VmZml4XSA9IG5hbWUuc3BsaXQoJyAnKTsKCiAgbGV0IHJlcGwgPSBuZXcgUkVQTChgXHgxYlszODs1OzE2NW0ke3ByZWZpeH0gXHgxYlszODs1OzM5bSR7c3VmZml4fVx4MWJbMG1gLCBmYWxzZSk7CiAgY29uc3QgaGlzdGZpbGUgPSAnLnVwbG9hZC1zZXJ2ZXItaGlzdG9yeSc7CiAgcmVwbC5oaXN0b3J5TG9hZChoaXN0ZmlsZSwgZmFsc2UpOwogIHJlcGwubG9hZFNhdmVPcHRpb25zKCk7CiAgcmVwbC5kaXJlY3RpdmVzLmkgPSBbCiAgICAobW9kdWxlLCAuLi5hcmdzKSA9PiB7CiAgICAgIGNvbnNvbGUubG9nKCdhcmdzJywgYXJncyk7CiAgICAgIHRyeSB7CiAgICAgICAgcmV0dXJuIHJlcXVpcmUobW9kdWxlKTsKICAgICAgfSBjYXRjaChlKSB7fQogICAgICBpbXBvcnQobW9kdWxlKS50aGVuKG0gPT4gKGdsb2JhbFRoaXNbbW9kdWxlXSA9IG0pKTsKICAgIH0sCiAgICAnaW1wb3J0IG1vZHVsZScKICBdOwoKICBsZXQgeyBsb2cgfSA9IGNvbnNvbGU7CiAgcmVwbC5zaG93ID0gYXJnID0+IHN0ZC5wdXRzKCh0eXBlb2YgYXJnID09ICdzdHJpbmcnID8gYXJnIDogaW5zcGVjdChhcmcsIGdsb2JhbFRoaXMuY29uc29sZS5vcHRpb25zKSkgKyAnXG4nKTsKCiAgcmVwbC5jbGVhbnVwID0gKCkgPT4gewogICAgcmVwbC5yZWFkbGluZVJlbW92ZVByb21wdCgpOwogICAgVGVybWluYWwubW91c2V0cmFja2luZ0Rpc2FibGUoKTsKICAgIGxldCBudW1MaW5lcyA9IHJlcGwuaGlzdG9yeVNhdmUoaGlzdGZpbGUpOwoKICAgIHJlcGwucHJpbnRTdGF0dXMoYEVYSVQgKHdyb3RlICR7bnVtTGluZXN9IGhpc3RvcnkgZW50cmllcylgLCBmYWxzZSk7CgogICAgc3RkLmV4aXQoMCk7CiAgfTsKCiAgcmVwbC5pbnNwZWN0T3B0aW9ucyA9IHsKICAgIC4uLihyZXBsLmluc3BlY3RPcHRpb25zID8/IGNvbnNvbGUub3B0aW9ucyksCiAgICBkZXB0aDogSW5maW5pdHksCiAgICBjb21wYWN0OiBmYWxzZQogIH07CgogIGNvbnNvbGUubG9nID0gKC4uLmFyZ3MpID0+IHJlcGwucHJpbnRTdGF0dXMoKCkgPT4gbG9nKGNvbnNvbGUuY29uZmlnKHJlcGwuaW5zcGVjdE9wdGlvbnMpLCAuLi5hcmdzKSk7CgogIGxldCBsb2dGaWxlID0KICAgIHsKICAgICAgcHV0cyhzKSB7CiAgICAgICAgcmVwbC5wcmludFN0YXR1cygoKSA9PiBzdGQucHV0cyhzKSk7CiAgICAgIH0KICAgIH0gPz8gc3RkLm9wZW4oJ3VwbG9hZC1zZXJ2ZXIubG9nJywgJ3crJyk7CgogIGxldCBjb25uZWN0aW9ucyA9IG5ldyBTZXQoKTsKICBsZXQgYnlfdXVpZCA9IHt9OwoKICBmdW5jdGlvbiBQYXJzZUJvZHkoZ2VuKSB7CiAgICBsZXQgcHJvbSwKICAgICAgbyA9ICcnLAogICAgICB4OwoKICAgIHdoaWxlKCh4ID0gZ2VuLm5leHQoKSkpIHsKICAgICAgbGV0IHsgdmFsdWUsIGRvbmUgfSA9IHg7CiAgICAgIG8gKz0gdmFsdWU7CiAgICB9CiAgICByZXR1cm4gbzsKICB9CgogIGNvbnN0IGNyZWF0ZVdTID0gKGdsb2JhbFRoaXMuY3JlYXRlV1MgPSAodXJsLCBjYWxsYmFja3MsIGxpc3RlbikgPT4gewogICAgLy9jb25zb2xlLmxvZygnY3JlYXRlV1MnLCB7IHVybCwgY2FsbGJhY2tzLCBsaXN0ZW4gfSk7CgogICAgZ2xvYmFsVGhpcy5vdXQgPSBzID0+IGxvZ0ZpbGUucHV0cyhzICsgJ1xuJyk7CgogICAgbG9nTGV2ZWwgPSAocGFyYW1zLmRlYnVnID8gTExMX1VTRVIgOiAwKSB8ICgoKHBhcmFtcy5kZWJ1ZyA/IExMTF9JTkZPIDogTExMX1dBUk4pIDw8IDEpIC0gMSk7CiAgICBjb25zb2xlLmxvZygnY3JlYXRlV1MnLCB7IGxvZ0xldmVsIH0pOwoKICAgIHJldHVybiBbY2xpZW50LCBzZXJ2ZXJdWytsaXN0ZW5dKHsKICAgICAgdGxzOiBwYXJhbXMudGxzLAogICAgICBzc2xDZXJ0LAogICAgICBzc2xQcml2YXRlS2V5LAogICAgICBtaW1ldHlwZXM6IFsKICAgICAgICBbJy5zdmd6JywgJ2FwcGxpY2F0aW9uL2d6aXAnXSwKICAgICAgICBbJy5tanMnLCAnYXBwbGljYXRpb24vamF2YXNjcmlwdCddLAogICAgICAgIFsnLmpzJywgJ2FwcGxpY2F0aW9uL2phdmFzY3JpcHQnXSwKICAgICAgICBbJy53YXNtJywgJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbSddLAogICAgICAgIFsnLmVvdCcsICdhcHBsaWNhdGlvbi92bmQubXMtZm9udG9iamVjdCddLAogICAgICAgIFsnLmxpYicsICdhcHBsaWNhdGlvbi94LWFyY2hpdmUnXSwKICAgICAgICBbJy5iejInLCAnYXBwbGljYXRpb24veC1iemlwMiddLAogICAgICAgIFsnLmdpdGlnbm9yZScsICd0ZXh0L3BsYWluJ10sCiAgICAgICAgWycuY21ha2UnLCAndGV4dC9wbGFpbiddLAogICAgICAgIFsnLmhleCcsICd0ZXh0L3BsYWluJ10sCiAgICAgICAgWycubWQnLCAndGV4dC9wbGFpbiddLAogICAgICAgIFsnLnBieHByb2onLCAndGV4dC9wbGFpbiddLAogICAgICAgIFsnLndhdCcsICd0ZXh0L3BsYWluJ10sCiAgICAgICAgWycuYycsICd0ZXh0L3gtYyddLAogICAgICAgIFsnLmgnLCAndGV4dC94LWMnXSwKICAgICAgICBbJy5jcHAnLCAndGV4dC94LWMrKyddLAogICAgICAgIFsnLmhwcCcsICd0ZXh0L3gtYysrJ10sCiAgICAgICAgWycuZmlsdGVycycsICd0ZXh0L3htbCddLAogICAgICAgIFsnLnBsaXN0JywgJ3RleHQveG1sJ10sCiAgICAgICAgWycuc3Rvcnlib2FyZCcsICd0ZXh0L3htbCddLAogICAgICAgIFsnLnZjeHByb2onLCAndGV4dC94bWwnXSwKICAgICAgICBbJy5iYXQnLCAndGV4dC94LW1zZG9zLWJhdGNoJ10sCiAgICAgICAgWycubW0nLCAndGV4dC94LW9iamVjdGl2ZS1jJ10sCiAgICAgICAgWycubScsICd0ZXh0L3gtb2JqZWN0aXZlLWMnXSwKICAgICAgICBbJy5zaCcsICd0ZXh0L3gtc2hlbGxzY3JpcHQnXQogICAgICBdLAogICAgICBtb3VudHM6IFsKICAgICAgICBbJy8nLCAnLicsICd1cGxvYWQuaHRtbCddLAogICAgICAgIFsnL2dldCcsICcuL3VwbG9hZHMnLCAnJ10sCiAgICAgICAgWycvd2FybWNhdCcsICdodHRwOi8vd2FybWNhdC5jb20vJywgJ2luZGV4Lmh0bWwnXSwKICAgICAgICBbJy9kaXN0cmVsZWMnLCAnaHR0cHM6Ly93d3cuZGlzdHJlbGVjLmNoLycsICdsb2dpbiddLAogICAgICAgIFsnL2hhc3VyYScsICdodHRwOi8vd2lsZC1iZWF1dHkuaGVyb2t1YXBwLmNvbS92MS8nLCAnZ3JhcGhxbCddLAogICAgICAgIC8vIFsnL3VwbG9hZCcsICdsd3MtZGVhZGRyb3AnLCBudWxsLCAnbHdzLWRlYWRkcm9wJ10sCiAgICAgICAgYXN5bmMgZnVuY3Rpb24qIHRlc3QocmVxLCByZXNwKSB7CiAgICAgICAgICByZXNwLnR5cGUgPSAndGV4dC9wbGFpbic7CgogICAgICAgICAgY29uc29sZS5sb2coJyp0ZXN0JywgeyByZXEsIHJlc3AgfSk7CgogICAgICAgICAgbGV0IGJvZHlTdHIgPSAnJzsKICAgICAgICAgIGlmKHJlcS5tZXRob2QgPT0gJ1BPU1QnKSB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdyZXEuYm9keScsIHJlcS5ib2R5KTsKICAgICAgICAgICAgLy8gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdyZXEuYm9keS5uZXh0KCknLCBhd2FpdCByZXEuYm9keS5uZXh0KCkpOwoKICAgICAgICAgICAgZm9yIGF3YWl0KGxldCBjaHVuayBvZiByZXEuYm9keSkgewogICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdjaHVuaycsIGNodW5rKTsKICAgICAgICAgICAgICBib2R5U3RyICs9IHRvU3RyaW5nKGNodW5rKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgY29uc29sZS5sb2coJ2JvZHlTdHInLCBib2R5U3RyKTsKCiAgICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgMTA7IGkrKykgewogICAgICAgICAgICB5aWVsZCBgbGluZSAjJHtpfVxuYDsKICAgICAgICAgICAgYXdhaXQgd2FpdEZvcigoMTAgLSBpICsgMSkgKiAxMCk7CiAgICAgICAgICB9CgogICAgICAgICAgeWllbGQgJ2RvbmUhJzsKICAgICAgICB9LAogICAgICAgIGZ1bmN0aW9uIHByb3h5KHJlcSwgcmVzcCkgewogICAgICAgICAgY29uc29sZS5sb2coJ3Byb3h5JywgeyByZXEsIHJlc3AgfSk7CiAgICAgICAgICBjb25zdCB7IHVybCwgbWV0aG9kLCBoZWFkZXJzIH0gPSByZXE7CiAgICAgICAgICBjb25zb2xlLmxvZygncHJveHknLCB7IHVybCwgbWV0aG9kLCBoZWFkZXJzIH0pOwogICAgICAgICAgY29uc3QgeyBzdGF0dXMsIG9rLCB0eXBlIH0gPSByZXNwOwoKICAgICAgICAgIGNvbnNvbGUubG9nKCdwcm94eScsIHsgc3RhdHVzLCBvaywgdXJsLCB0eXBlIH0pOwogICAgICAgIH0sCiAgICAgICAgZnVuY3Rpb24qIGNvbmZpZyhyZXEsIHJlc3ApIHsKICAgICAgICAgIGNvbnNvbGUubG9nKCcqY29uZmlnJywgeyByZXEsIHJlc3AgfSk7CiAgICAgICAgICB5aWVsZCAne30nOwogICAgICAgIH0sCiAgICAgICAgZnVuY3Rpb24qIGZpbGUocmVxLCByZXNwKSB7CiAgICAgICAgICBsZXQgeyBib2R5LCBoZWFkZXJzLCBqc29uLCB1cmwgfSA9IHJlcTsKICAgICAgICAgIGxldCB7IHF1ZXJ5IH0gPSB1cmw7CgogICAgICAgICAgaWYodHlwZW9mIGJvZHkgPT0gJ3N0cmluZycpCiAgICAgICAgICAgIHF1ZXJ5ID0gewogICAgICAgICAgICAgIC4uLnF1ZXJ5LAogICAgICAgICAgICAgIC4uLihKU09OLnBhcnNlKGJvZHkpID8/IHt9KQogICAgICAgICAgICB9OwoKICAgICAgICAgIGxldCB7IGFjdGlvbiA9ICdsaXN0JywgY2hhcnNldCA9ICd1dGYtOCcsIGJpbmFyeSA9IGZhbHNlLCBmaWxlLCBjb250ZW50cyB9ID0gcXVlcnkgPz8ge307CgogICAgICAgICAgaWYoL15cL2ZpbGVcLy4vLnRlc3QodXJsLnBhdGgpKSB7CiAgICAgICAgICAgIGZpbGUgPSB1cmwucGF0aC5yZXBsYWNlKC9eXC9maWxlXC8vLCAnJyk7CiAgICAgICAgICAgIGFjdGlvbiA9ICdsb2FkJzsKICAgICAgICAgIH0KICAgICAgICAgIGNvbnNvbGUubG9nKCcqZmlsZScsIHsgcXVlcnksIGJvZHksIGZpbGUgfSk7CgogICAgICAgICAgY29uc29sZS5sb2coYCpmaWxlYCwgeyBhY3Rpb24sIGZpbGUgfSk7CgogICAgICAgICAgaWYoZmlsZSkgewogICAgICAgICAgICBmaWxlID0gcGF0aC5hYnNvbHV0ZShmaWxlKTsKICAgICAgICAgICAgZmlsZSA9IHBhdGguY29sbGFwc2UoZmlsZSk7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKAogICAgICAgICAgICAgIGBhbGxvd2VkRGlyczpgLAogICAgICAgICAgICAgIGFsbG93ZWREaXJzLm1hcChkaXIgPT4gcGF0aC5ub3JtYWxpemUoZGlyKSkKICAgICAgICAgICAgKTsKCiAgICAgICAgICAgIC8vICAgIGNvbnNvbGUubG9nKGBhbGxvd2VkOmAsIGFsbG93ZWREaXJzLm1hcChkaXIgPT4gcGF0aC5pc2luKGZpbGUsIGRpcikpKTsKICAgICAgICAgICAgbGV0IGFsbG93ZWQgPSBhbGxvd2VkRGlycy5zb21lKGRpciA9PiBwYXRoLmlzaW4oZmlsZSwgcGF0aC5ub3JtYWxpemUoZGlyKSkpOwoKICAgICAgICAgICAgaWYoIWFsbG93ZWQpIHsKICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgTm90IGFsbG93ZWQ6ICcke2ZpbGV9J2ApOwogICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTm90IGFsbG93ZWQ6ICcke2ZpbGV9J2ApOwogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgc3dpdGNoIChhY3Rpb24pIHsKICAgICAgICAgICAgY2FzZSAnbG9hZCc6CiAgICAgICAgICAgICAgbGV0IG1pbWUgPSBHZXRNaW1lKGZpbGUpOwogICAgICAgICAgICAgIHJlc3AudHlwZSA9IG1pbWU7CiAgICAgICAgICAgICAgbGV0IGRhdGEgPSBmcy5yZWFkRmlsZVN5bmMoZmlsZSwgMSB8IGJpbmFyeSA/IG51bGwgOiBjaGFyc2V0KTsKICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgKmZpbGUubG9hZGAsIHsgZGF0YSB9KTsKICAgICAgICAgICAgICB5aWVsZCBkYXRhOwogICAgICAgICAgICAgIHJlc3AuYm9keSA9IGRhdGE7CiAgICAgICAgICAgICAgLy95aWVsZAogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlICdzYXZlJzoKICAgICAgICAgICAgICBmcy53cml0ZUZpbGVTeW5jKGZpbGUsIGNvbnRlbnRzKTsKICAgICAgICAgICAgICB5aWVsZCAnZG9uZSFcclxuJzsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAnbGlzdCc6CiAgICAgICAgICAgICAgbGV0IGZpbGVzID0gZnMucmVhZGRpclN5bmMoJ3VwbG9hZHMnKS5maWx0ZXIoZiA9PiAhL15cLiQvLnRlc3QoZikpOwogICAgICAgICAgICAgIGxldCBjb21wb25lbnQgPSBoKAogICAgICAgICAgICAgICAgSFRNTFBhZ2UsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHRpdGxlOiAnRmlsZSBsaXN0JywKICAgICAgICAgICAgICAgICAgc3R5bGU6IGAKYm9keSwgKiB7CiAgZm9udC1mYW1pbHk6IE1pc2NGaXhlZFNDNjEzLEZpeGVkLCJDb3VyaWVyIE5ldyI7Cn0KCiAgICAgICAgICAgICAgICBgLAogICAgICAgICAgICAgICAgICBzY3JpcHRzOiBbJ2ZpbGVsaXN0LmpzJ10KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIGgoRmlsdGVyRm9ybSwge30sIFtdKSwKICAgICAgICAgICAgICAgICAgaChGaWxlVGFibGUsIHsKICAgICAgICAgICAgICAgICAgICBmaWxlczogZmlsZXMubWFwKGZpbGUgPT4gKHsKICAgICAgICAgICAgICAgICAgICAgIGZpbGUsCiAgICAgICAgICAgICAgICAgICAgICBzdGF0OiBmcy5zdGF0U3luYyhmaWxlKQogICAgICAgICAgICAgICAgICAgIH0pKQogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgeWllbGQgcmVuZGVyVG9TdHJpbmcoY29tcG9uZW50KTsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB5aWVsZCBmaWxlcy5qb2luKCdcbicpOwoKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIHN1Y2ggY29tbWFuZDogJyR7YWN0aW9ufSdgKTsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIGZ1bmN0aW9uKiB1cGxvYWRzKHJlcSwgcmVzcCkgewogICAgICAgICAgcmVzcC50eXBlID0gJ2FwcGxpY2F0aW9uL2pzb24nOwogICAgICAgICAgY29uc29sZS5sb2coJ3VwbG9hZHMnLCByZXEsIHJlc3ApOwogICAgICAgICAgY29uc29sZS5sb2coJ3JlcS51cmwnLCByZXEudXJsKTsKICAgICAgICAgIGNvbnNvbGUubG9nKCdyZXEudXJsLnF1ZXJ5JywgcmVxLnVybC5xdWVyeSk7CiAgICAgICAgICBsZXQgcmVzdWx0ID0gW107CgogICAgICAgICAgZm9yKGxldCBlbnRyeSBvZiBnbG9iKCd1cGxvYWRzLyouanNvbicpKSB7CiAgICAgICAgICAgIGxldCBqc29uID0gUmVhZEpTT04oZW50cnkpOwogICAgICAgICAgICByZXN1bHQucHVzaChqc29uKTsKICAgICAgICAgIH0KCiAgICAgICAgICB5aWVsZCBKU09OLnN0cmluZ2lmeShyZXN1bHQpOwogICAgICAgIH0sCiAgICAgICAgZnVuY3Rpb24qIGZpbGVzKHJlcSwgcmVzcCkgewogICAgICAgICAgbGV0IHsgYm9keSwgaGVhZGVycywganNvbiwgdXJsIH0gPSByZXE7CiAgICAgICAgICBsZXQgeyBxdWVyeSB9ID0gdXJsOwoKICAgICAgICAgIGRlZmluZShnbG9iYWxUaGlzLCB7IGZpbGVzUmVxdWVzdDogeyByZXEsIHJlc3AsIGJvZHksIHF1ZXJ5IH0gfSk7CgogICAgICAgICAgY29uc29sZS5sb2coJypmaWxlcycsIHsgcmVxLCByZXNwLCBib2R5LCBxdWVyeSB9KTsKCiAgICAgICAgICBjb25zdCBkYXRhID0gcXVlcnkgPz8ge307IC8vanNvbiA/IGpzb24gOiBKU09OLnBhcnNlKGJvZHkgPz8gJ3t9Jyk7CgogICAgICAgICAgcmVzcC50eXBlID0gJ2FwcGxpY2F0aW9uL2pzb24nOwogICAgICAgICAgbGV0IHsKICAgICAgICAgICAgZGlycyA9IGRlZmF1bHREaXJzLAogICAgICAgICAgICBmaWx0ZXIgPSAnW14uXS4qJyA/PyAnLihicmR8c2NofEdbQS1aXVtBLVpdKSQnLAogICAgICAgICAgICB2ZXJib3NlID0gZmFsc2UsCiAgICAgICAgICAgIG9iamVjdHMgPSB0cnVlLAogICAgICAgICAgICBrZXkgPSAnbXRpbWUnLAogICAgICAgICAgICBsaW1pdCA9IG51bGwsCiAgICAgICAgICAgIGZsYXQgPSBmYWxzZQogICAgICAgICAgfSA9IGRhdGEgPz8ge307CiAgICAgICAgICBsZXQgcmVzdWx0cyA9IFtdOwogICAgICAgICAgZm9yKGxldCBkaXIgb2YgZGlycykgewogICAgICAgICAgICBsZXQgc3QsCiAgICAgICAgICAgICAgbmFtZXMgPSBbXTsKICAgICAgICAgICAgaWYoQXJyYXkuaXNBcnJheShkaXIpKSB7CiAgICAgICAgICAgICAgbGV0IFssIHJlXSA9IGRpcjsKICAgICAgICAgICAgICBsZXQgYWJzZGlyID0gcGF0aC5yZWFscGF0aChkaXJbMF0pOwogICAgICAgICAgICAgIG5hbWVzID0gWy4uLlJlY3Vyc2l2ZURpckl0ZXJhdG9yKGFic2RpciwgbiA9PiByZS50ZXN0KG4pKV07IC8vLm1hcChuID0+IHBhdGgucmVsYXRpdmUobiwgYWJzZGlyKSk7CiAgICAgICAgICAgICAgZGlyID0gcGF0aC5yZWxhdGl2ZShhYnNkaXIsIHBhdGguZ2V0Y3dkKCkpOwogICAgICAgICAgICB9IGVsc2UgaWYoKHN0ID0gZnMuc3RhdFN5bmMoZGlyKSkgJiYgc3QuaXNEaXJlY3RvcnkoKSkgewogICAgICAgICAgICAgIGxldCBhYnNkaXIgPSBwYXRoLnJlYWxwYXRoKGRpcik7CiAgICAgICAgICAgICAgbGV0IGNvbXBvbmVudHMgPSBhYnNkaXIuc3BsaXQocGF0aC5zZXApOwogICAgICAgICAgICAgIGlmKGNvbXBvbmVudHMubGVuZ3RoICYmIGNvbXBvbmVudHNbMF0gPT09ICcnKSBjb21wb25lbnRzLnNoaWZ0KCk7CiAgICAgICAgICAgICAgaWYoY29tcG9uZW50cy5sZW5ndGggPCAyIHx8IGNvbXBvbmVudHNbMF0gIT0gJ2hvbWUnKSB0aHJvdyBuZXcgRXJyb3IoYEFjY2VzcyBlcnJvcmApOwogICAgICAgICAgICAgIG5hbWVzID0gZnMucmVhZGRpclN5bmMoYWJzZGlyKSA/PyBbXTsKICAgICAgICAgICAgICBkaXIgPSBwYXRoLnJlbGF0aXZlKGFic2RpciwgcGF0aC5nZXRjd2QoKSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgbmFtZXMgPSBnbG9iKGRpciwgR0xPQl9CUkFDRSk7CiAgICAgICAgICAgICAgaWYoIUFycmF5LmlzQXJyYXkobmFtZXMpKSBuYW1lcyA9IFtdOwogICAgICAgICAgICAgIGxldCBhID0gcGF0aC50b0FycmF5KGRpcik7CiAgICAgICAgICAgICAgbGV0IGkgPSBhLmZpbmRJbmRleChuID0+IC9bKnt9XS8udGVzdChuKSk7CiAgICAgICAgICAgICAgZGlyID0gcGF0aC5zbGljZShkaXIsIDAsIGkpOwogICAgICAgICAgICAgIG5hbWVzID0gbmFtZXMubWFwKG4gPT4gbi5zbGljZShkaXIubGVuZ3RoICsgMSkpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmKCFBcnJheS5pc0FycmF5KG5hbWVzKSkgY29udGludWU7CiAgICAgICAgICAgIG5hbWVzID0gbmFtZXMuc29ydCgoYSwgYikgPT4gJycgKyBiIDwgJycgKyBhKTsKICAgICAgICAgICAgaWYoZmlsdGVyKSB7CiAgICAgICAgICAgICAgY29uc3QgcmUgPSBuZXcgUmVnRXhwKGZpbHRlciwgJ2dpJyk7CiAgICAgICAgICAgICAgbmFtZXMgPSBuYW1lcy5maWx0ZXIobmFtZSA9PiByZS50ZXN0KG5hbWUpKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZihsaW1pdCkgewogICAgICAgICAgICAgIGxldCBbb2Zmc2V0ID0gMF0gPSBsaW1pdDsKICAgICAgICAgICAgICBsZXQgWywgbGVuZ3RoID0gbmFtZXMubGVuZ3RoIC0gc3RhcnRdID0gbGltaXQ7CiAgICAgICAgICAgICAgbmFtZXMgPSBuYW1lcy5zbGljZShvZmZzZXQsIG9mZnNldCArIGxlbmd0aCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgbGV0IGVudHJpZXMgPSBuYW1lcwogICAgICAgICAgICAgIC5tYXAoZmlsZSA9PiAoZnMuZXhpc3RzU3luYyhgJHtkaXJ9LyR7ZmlsZX1gKSA/IGAke2Rpcn0vJHtmaWxlfWAgOiBmaWxlKSkKICAgICAgICAgICAgICAubWFwKGZpbGUgPT4gW2ZpbGUsIHBhdGgucmVsYXRpdmUoZmlsZSwgcGF0aC5nZXRjd2QoKSldKQogICAgICAgICAgICAgIC5tYXAoKFtmaWxlLCByZWxdKSA9PiBbZmlsZSwgZnMuc3RhdFN5bmMocmVsKV0pOwogICAgICAgICAgICBlbnRyaWVzID0gZW50cmllcy5yZWR1Y2UoKGFjYywgW2ZpbGUsIHN0XSkgPT4gewogICAgICAgICAgICAgIGxldCBuYW1lID0gZmlsZSArIChzdCAmJiBzdC5pc0RpcmVjdG9yeSgpID8gJy8nIDogJycpOwogICAgICAgICAgICAgIGxldCBvYmogPSB7CiAgICAgICAgICAgICAgICBuYW1lCiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICBhY2MucHVzaChbCiAgICAgICAgICAgICAgICBuYW1lLAogICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbigKICAgICAgICAgICAgICAgICAgb2JqLAogICAgICAgICAgICAgICAgICBzdAogICAgICAgICAgICAgICAgICAgID8gewogICAgICAgICAgICAgICAgICAgICAgICBtdGltZTogdG9Vbml4VGltZShzdC5tdGltZSksCiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWU6IHRvVW5peFRpbWUoc3QuY3RpbWUpLAogICAgICAgICAgICAgICAgICAgICAgICBtb2RlOiBgMCR7KHN0Lm1vZGUgJiAweDA5ZmYpLnRvU3RyaW5nKDgpfWAsCiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6IHN0LnNpemUKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICA6IHt9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSk7CiAgICAgICAgICAgICAgcmV0dXJuIGFjYzsKICAgICAgICAgICAgfSwgW10pOwoKICAgICAgICAgICAgaWYoZW50cmllcy5sZW5ndGgpIHsKICAgICAgICAgICAgICBsZXQgY21wID0gewogICAgICAgICAgICAgICAgc3RyaW5nKGEsIGIpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIGFbMV1ba2V5XS5sb2NhbGVDb21wYXJlKGJbMV1ba2V5XSk7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgbnVtYmVyKGEsIGIpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIGFbMV1ba2V5XSAtIGJbMV1ba2V5XTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9W3R5cGVvZiBlbnRyaWVzWzBdWzFdW2tleV1dOwogICAgICAgICAgICAgIGVudHJpZXMgPSBlbnRyaWVzLnNvcnQoY21wKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBuYW1lcyA9IGVudHJpZXMubWFwKChbbmFtZSwgb2JqXSkgPT4gKG9iamVjdHMgPyBvYmogOiBuYW1lKSk7CgogICAgICAgICAgICBpZihuYW1lcy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnZmlsZXMgcmVzdWx0JywgeyBkaXIsIG5hbWVzIH0pOwogICAgICAgICAgICAgIGlmKGZsYXQpIG5hbWVzLm1hcCgoeyBuYW1lIH0pID0+IHJlc3VsdHMucHVzaCh7IG5hbWU6IHBhdGgubm9ybWFsaXplKHBhdGguam9pbihkaXIsIG5hbWUpKSB9KSk7CiAgICAgICAgICAgICAgZWxzZSByZXN1bHRzLnB1c2goeyBkaXIsIG5hbWVzIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgLy8geWllbGQgJ1xuXSc7CiAgICAgICAgICB5aWVsZCBKU09OLnN0cmluZ2lmeSguLi5bcmVzdWx0cywgLi4uKHZlcmJvc2UgPyBbbnVsbCwgMl0gOiBbXSldKTsKICAgICAgICB9CiAgICAgIF0sCiAgICAgIC4uLnVybCwKCiAgICAgIC4uLmNhbGxiYWNrcywKICAgICAgb25Db25uZWN0KHdzLCByZXEpIHsKICAgICAgICBjb25zdCB7IHBlZXIsIGFkZHJlc3MsIHBvcnQgfSA9IHdzOwoKICAgICAgICAvLyAgY29uc29sZS5sb2coJ1x4MWJbMzg7NTszM21vbkNvbm5lY3RceDFiWzBtJywgeyBhZGRyZXNzLCBwb3J0IH0pOwoKICAgICAgICB3cy5zZW5kQ29tbWFuZCA9IGZ1bmN0aW9uKGRhdGEpIHsKICAgICAgICAgIGlmKCFpc0FycmF5QnVmZmVyKGRhdGEpIC8qJiYgaXNPYmplY3QoZGF0YSkqLykgZGF0YSA9IEpTT04uc3RyaW5naWZ5KGRhdGEpOwoKICAgICAgICAgIHJldHVybiB0aGlzLnNlbmQoZGF0YSk7CiAgICAgICAgfTsKICAgICAgICBpZighd3MudXVpZCkgewogICAgICAgICAgbGV0IGRhdGEgPSAod3MudXVpZCA9IE1ha2VVVUlEKCkpOwoKICAgICAgICAgIHdzLnNlbmRDb21tYW5kKHsgdHlwZTogJ3V1aWQnLCBkYXRhIH0pOwogICAgICAgICAgYnlfdXVpZFtkYXRhXSA9IHdzOwogICAgICAgIH0KICAgICAgICBjb25uZWN0aW9ucy5hZGQod3MpOwogICAgICAgIGlmKCFyZXEudXJsIHx8IHJlcS51cmwucGF0aC5lbmRzV2l0aCgndXBsb2FkcycpKSB7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICB9CiAgICAgICAgaWYoY2FsbGJhY2tzLm9uQ29ubmVjdCkgcmV0dXJuIGNhbGxiYWNrcy5vbkNvbm5lY3Qod3MsIHJlcSk7CiAgICAgIH0sCiAgICAgIG9uQ2xvc2Uod3MsIHJlYXNvbikgewogICAgICAgIGNvbm5lY3Rpb25zLmRlbGV0ZSh3cyk7CgogICAgICAgIHJldHVybiBjYWxsYmFja3Mub25DbG9zZSh3cywgcmVhc29uKTsKICAgICAgfSwKICAgICAgLyogICAgICBvblJlYWQoZGF0YSkgewogICAgICAgICBjb25zdCByZXEgPSB0aGlzOwogICAgICAgIGNvbnNvbGUubG9nKCdvblJlYWQnLCB7IHJlcSwgZGF0YSB9KTsgCiAgICAgIH0sKi8KICAgICAgLyogb25Qb3N0KGRhdGEpIHsKICAgICAgIGNvbnN0IHJlcSA9IHRoaXM7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIHJlcS5qc29uID0gSlNPTi5wYXJzZShkYXRhKTsKICAgICAgICB9IGNhdGNoKGVycm9yKSB7CiAgICAgICAgICBjb25zb2xlLmxvZygnb25Qb3N0JywgeyByZXEsIGRhdGEsIGVycm9yIH0pOwogICAgICAgIH0KICAgICAgfSwqLwogICAgICBvbkh0dHAod3MsIHJlcSwgcmVzcCkgewogICAgICAgIC8qIGlmKHJlcS5tZXRob2QgIT0gJ0dFVCcpKi8gY29uc29sZS5sb2coJ29uSHR0cCcsIGNvbnNvbGUuY29uZmlnKHsgY29tcGFjdDogMCB9KSwgd3MpOwogY29uc29sZS5sb2coJ29uSHR0cCcsIGNvbnNvbGUuY29uZmlnKHsgY29tcGFjdDogMCB9KSwgcmVxKTsKCiAgICAgICAgZGVmaW5lKGdsb2JhbFRoaXMsIHsgd3MscmVxLCByZXNwIH0pOwoKICAgICAgICBjb25zdCB7IHBlZXIsIGFkZHJlc3MsIHBvcnQgfSA9IHdzOwogICAgICAgIGNvbnN0IHsgbWV0aG9kLCBoZWFkZXJzIH0gPSByZXE7CgogICAgICAgIGlmKHJlcS51cmwucGF0aC5lbmRzV2l0aCgnZmlsZXMnKSkgewogICAgICAgICAgcmVzcC50eXBlID0gJ2FwcGxpY2F0aW9uL2pzb24nOwogICAgICAgIH0gZWxzZSBpZihyZXEubWV0aG9kICE9ICdHRVQnICYmIHJlcS5oZWFkZXJzWydjb250ZW50LXR5cGUnXSA9PSAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJykgewogICAgICAgICAgbGV0IGZwLAogICAgICAgICAgICBoYXNoLAogICAgICAgICAgICB0bXBuYW0sCiAgICAgICAgICAgIGV4dCwKICAgICAgICAgICAgcHJvZ3Jlc3MgPSAwOwogICAgICAgICAgY29uc29sZS5sb2cocmVxLm1ldGhvZCwgaGVhZGVycyk7CiAgICAgICAgICBpZihyZXEudXJsLnBhdGguZW5kc1dpdGgoJ3VwbG9hZCcpKSByZXNwLnN0YXR1cyA9IDIwMDsKICAgICAgICAgIHJlc3AudHlwZSA9ICd0ZXh0L3Jhdyc7CgogICAgICAgICAgZnAgPSBuZXcgRm9ybVBhcnNlcih3cywgWydmaWxlcycsICd1dWlkJ10sIHsKICAgICAgICAgICAgY2h1bmtTaXplOiA4MTkyIC8qKiAyNTYqLywKICAgICAgICAgICAgb25PcGVuKG5hbWUsIGZpbGVuYW1lKSB7CiAgICAgICAgICAgICAgY29uc29sZS5sb2coYG9uT3Blbigke25hbWV9LCAke2ZpbGVuYW1lfSlgKTsKICAgICAgICAgICAgICBpZih0aGlzLmZpbGUpIHsKICAgICAgICAgICAgICAgIHRoaXMub25jbG9zZS5jYWxsKHRoaXMsIG5hbWUpOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgdGhpcy5uYW1lID0gbmFtZTsKICAgICAgICAgICAgICB0aGlzLmZpbGVuYW1lID0gZmlsZW5hbWU7CiAgICAgICAgICAgICAgZXh0ID0gcGF0aC5leHRuYW1lKGZpbGVuYW1lKS50b0xvd2VyQ2FzZSgpOwoKICAgICAgICAgICAgICB0aGlzLmZpbGUgPSBmcy5vcGVuU3luYygodGhpcy50ZW1wID0gJ3VwbG9hZHMvJyArICh0bXBuYW0gPSByYW5kU3RyKDIwKSArICcudG1wJykpLCAndysnLCAwbzY0NCk7CiAgICAgICAgICAgICAgaGFzaCA9IG5ldyBIYXNoKEhhc2guVFlQRV9TSEExKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgb25Db250ZW50KG5hbWUsIGRhdGEpIHsKICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhgb25Db250ZW50KCR7dGhpcy5maWxlbmFtZX0pYCxkYXRhLmJ5dGVMZW5ndGgpOwogICAgICAgICAgICAgIHByb2dyZXNzICs9IGRhdGEuYnl0ZUxlbmd0aDsKCiAgICAgICAgICAgICAgbGV0IHdzMiA9IGJ5X3V1aWRbd3MudXVpZCA/PyB0aGlzLnV1aWRdOwoKICAgICAgICAgICAgICBmcy53cml0ZVN5bmModGhpcy5maWxlLCBkYXRhKTsKICAgICAgICAgICAgICBoYXNoLnVwZGF0ZShkYXRhKTsKICAgICAgICAgICAgICBpZih3czIpCiAgICAgICAgICAgICAgICB3czIuc2VuZENvbW1hbmQoewogICAgICAgICAgICAgICAgICB0eXBlOiAncHJvZ3Jlc3MnLAogICAgICAgICAgICAgICAgICBkb25lOiBwcm9ncmVzcywKICAgICAgICAgICAgICAgICAgbmFtZSwKICAgICAgICAgICAgICAgICAgZmlsZW5hbWU6IHRoaXMuZmlsZW5hbWUsCiAgICAgICAgICAgICAgICAgIHRvdGFsOiAraGVhZGVyc1snY29udGVudC1sZW5ndGgnXQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBvbkNsb3NlKG5hbWUsIGZpbGUpIHsKICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgY29uc29sZS5sb2coYG9uQ2xvc2VbMV0oJHtuYW1lfSwgJHtmaWxlfSlgLCB0aGlzLnV1aWQpOwogICAgICAgICAgICAgICAgbGV0IGV4aWYsIGNhY2hlLCBzaGExOwogICAgICAgICAgICAgICAgaWYoaGFzaCkgewogICAgICAgICAgICAgICAgICBoYXNoLmZpbmFsaXplKCk7CiAgICAgICAgICAgICAgICAgIHNoYTEgPSBoYXNoLnRvU3RyaW5nKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZih0aGlzLmZpbGUpIHsKICAgICAgICAgICAgICAgICAgZnMuY2xvc2VTeW5jKHRoaXMuZmlsZSk7CiAgICAgICAgICAgICAgICAgIHRoaXMuZmlsZSA9IG51bGw7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZihzaGExKSB7CiAgICAgICAgICAgICAgICAgIGxldCBmID0geCA9PiAndXBsb2Fkcy8nICsgc2hhMSArIHg7CiAgICAgICAgICAgICAgICAgIGxldCByZXQgPSBsaW5rKHRoaXMudGVtcCwgZihleHQpKTsKICAgICAgICAgICAgICAgICAgbGV0IHsgZXJybm8gfSA9IGVycm9yKCk7CiAgICAgICAgICAgICAgICAgIGxldCBqc29uID0gZignLmpzb24nKTsKICAgICAgICAgICAgICAgICAgaWYoZnMuZXhpc3RzU3luYyhqc29uKSAmJiAoY2FjaGUgPSBSZWFkSlNPTihqc29uKSkpIHsKICAgICAgICAgICAgICAgICAgICBleGlmID0gY2FjaGUuZXhpZjsKICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBpZighLyhwbmd8c3ZnfGdpZnx0Z2EpJC9pLnRlc3QoZXh0KSkgewogICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgZXhpZiA9IFJlYWRFeGlmdG9vbChmKGV4dCkpOwogICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpZiA9IFJlYWRFeGlmdG9vbCh0aGlzLnRlbXApOwogICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoKGUpIHt9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGxldCBvYmogPSB7CiAgICAgICAgICAgICAgICAgICAgICBmaWxlbmFtZTogdGhpcy5maWxlbmFtZSwKICAgICAgICAgICAgICAgICAgICAgIHN0b3JhZ2U6IGYoZXh0KSwKICAgICAgICAgICAgICAgICAgICAgIHVwbG9hZGVkOiBEYXRlLm5vdygpLAogICAgICAgICAgICAgICAgICAgICAgYWRkcmVzcywKICAgICAgICAgICAgICAgICAgICAgIGV4aWYKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIGlmKCEvanBlP2ckLy50ZXN0KGV4dCkpIHsKICAgICAgICAgICAgICAgICAgICAgIEhlaWZDb252ZXJ0KGYoZXh0KSwgZignLmpwZycpKTsKICAgICAgICAgICAgICAgICAgICAgIGlmKGZzLmV4aXN0c1N5bmMoZignLmpwZycpKSkgb2JqLmpwZyA9IGYoJy5qcGcnKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgbGV0IHdpZHRoID0gJycsCiAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSAnMjU2JzsKCiAgICAgICAgICAgICAgICAgICAgaWYoZXhpZikgewogICAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBJbWFnZVNpemUsIEltYWdlSGVpZ2h0LCBJbWFnZVdpZHRoIH0gPSBleGlmOwogICAgICAgICAgICAgICAgICAgICAgbGV0IGFzcGVjdCA9IEltYWdlV2lkdGggLyBJbWFnZUhlaWdodDsKICAgICAgICAgICAgICAgICAgICAgIGlmKGFzcGVjdCA+PSAxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoID0gMjU2OwogICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSB3aWR0aCAvIGFzcGVjdDsKICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIC8qIGhlaWdodCA9IDI1NjsKICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGggPSBoZWlnaHQgKiBhc3BlY3Q7Ki8KICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIE1hZ2lja1Jlc2l6ZShvYmouanBnID8/IGYoZXh0KSwgZignLnRodW1iLmpwZycpLCBvYmouZXhpZj8uUm90YXRpb24gPz8gMCwgd2lkdGgsIGhlaWdodCk7CgogICAgICAgICAgICAgICAgICAgIGlmKGZzLmV4aXN0c1N5bmMoZignLnRodW1iLmpwZycpKSkgb2JqLnRodW1ibmFpbCA9IGYoJy50aHVtYi5qcGcnKTsKICAgICAgICAgICAgICAgICAgICBXcml0ZUpTT04oanNvbiwgb2JqKTsKICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhgYnlfdXVpZGAsIGJ5X3V1aWQpOwogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGB1dWlkYCwgd3MudXVpZCA/PyB0aGlzLnV1aWQpOwogICAgICAgICAgICAgICAgICAgIGNhY2hlID0gb2JqOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIGlmKHJldCA9PSAwIHx8IGVycm5vID09IDE3KSB7CiAgICAgICAgICAgICAgICAgICAgdW5saW5rKHRoaXMudGVtcCk7CiAgICAgICAgICAgICAgICAgICAgdGhpcy50ZW1wID0gbnVsbDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgY29uc3QgeyBmaWxlbmFtZSB9ID0gdGhpczsKICAgICAgICAgICAgICAgIGxldCB3czIgPSBieV91dWlkW3dzLnV1aWQgPz8gdGhpcy51dWlkXTsKICAgICAgICAgICAgICAgIGlmKHdzMikKICAgICAgICAgICAgICAgICAgd3MyLnNlbmRDb21tYW5kKHsKICAgICAgICAgICAgICAgICAgICB0eXBlOiAndXBsb2FkJywKICAgICAgICAgICAgICAgICAgICAuLi4oY2FjaGUgPz8ge30pLAogICAgICAgICAgICAgICAgICAgIGZpbGVuYW1lLAogICAgICAgICAgICAgICAgICAgIGV4aWYKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAvLyAgY29uc29sZS5sb2coYG9uQ2xvc2VbMl0oJHtuYW1lfSwgJHtmaWxlfSlgKTsKICAgICAgICAgICAgICB9IGNhdGNoKGUpIHsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBvbkNsb3NlIEVSUk9SOmAsIGUubWVzc2FnZSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBvbkZpbmFsaXplKCkgewogICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBvbkZpbmFsaXplKCkgZm9ybSBwYXJzZXJgLCB0aGlzLnV1aWQpOwogICAgICAgICAgICAgIHJlc3AuYm9keSA9IGBkb25lOiAke3Byb2dyZXNzfSBieXRlcyByZWFkXHJcbmA7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgY29uc3QgeyBib2R5LCB1cmwgfSA9IHJlc3A7CiAgICAgICAgY29uc3QgeyByZWZlcmVyIH0gPSByZXEuaGVhZGVyczsKCiAgICAgICAgbGV0IGZpbGUgPSB1cmwucGF0aC5zbGljZSgxKTsKICAgICAgICBjb25zdCBkaXIgPSBwYXRoLmRpcm5hbWUoZmlsZSk7IC8vZmlsZS5yZXBsYWNlKC9cL1teXC9dKiQvZywgJycpOwoKICAgICAgICBpZihmaWxlLmVuZHNXaXRoKCcudHh0JykgfHwgZmlsZS5lbmRzV2l0aCgnLmh0bWwnKSB8fCBmaWxlLmVuZHNXaXRoKCcuY3NzJykpIHsKICAgICAgICAgIHJlc3AuYm9keSA9IGZzLnJlYWRGaWxlU3luYyhmaWxlLCAndXRmLTgnKTsKICAgICAgICB9IGVsc2UgaWYoZmlsZS5lbmRzV2l0aCgnLmpzJykpIHsKICAgICAgICAgIGxldCBmaWxlMSA9IGZpbGU7CiAgICAgICAgICBpZigvcWpzLW1vZHVsZXNcL2xpYi8udGVzdChmaWxlKSAmJiAhLyhkb218dXRpbClcLmpzLy50ZXN0KGZpbGUpKSB7CiAgICAgICAgICAgIGxldCBmaWxlMiA9IGZpbGUucmVwbGFjZSgvLipxanMtbW9kdWxlc1wvL2csICcnKTsKICAgICAgICAgICAgaWYoZnMuZXhpc3RzU3luYyhmaWxlMikpIHsKICAgICAgICAgICAgICBmaWxlID0gZmlsZTI7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSBpZighZnMuZXhpc3RzU3luYyhmaWxlKSkgewogICAgICAgICAgICBmb3IobGV0IGRpciBvZiBbJ3F1aWNranMvcWpzLW1vZHVsZXMnLCAncXVpY2tqcy9xanMtbW9kdWxlcy9saWInLCAnLicsICdsaWInXSkgewogICAgICAgICAgICAgIGxldCBmaWxlMiA9IGRpciArICcvJyArIGZpbGU7CiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2luZXhpc3RlbnQgZmlsZScsIGZpbGUsIGZpbGUyLCBmcy5leGlzdHNTeW5jKGZpbGUyKSwgcmVmZXJlcik7CiAgICAgICAgICAgICAgaWYoZnMuZXhpc3RzU3luYyhmaWxlMikpIHsKICAgICAgICAgICAgICAgIGZpbGUgPSBmaWxlMjsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIGlmKGZpbGUxICE9IGZpbGUpIHsKICAgICAgICAgICAgLy8gIGNvbnNvbGUubG9nKCdceDFiWzM4OzU7MjE0bW9uSHR0cFx4MWJbMG0nLCBmaWxlMSwgJy0+JywgZmlsZSk7CiAgICAgICAgICAgIHJlc3Auc3RhdHVzID0gMzAyOwogICAgICAgICAgICByZXNwLmhlYWRlcnMgPSB7IFsnTG9jYXRpb24nXTogJy8nICsgZmlsZSB9OwogICAgICAgICAgICByZXR1cm4gcmVzcDsKICAgICAgICAgIH0KICAgICAgICAgIC8vY29uc29sZS5sb2coJ1x4MWJbMzg7NTszM21vbkh0dHBceDFiWzBtJywgZmlsZTEsIGZpbGUpOwoKICAgICAgICAgIC8vCiAgICAgICAgICBsZXQgYm9keSA9IGZzLnJlYWRGaWxlU3luYyhmaWxlLCAndXRmLTgnKTsKCiAgICAgICAgICBjb25zdCByZSA9IC9eKFxzKihpbXxleClwb3J0W15cbl0qZnJvbSBbJyJdKShbXi4vJyJdKikoWyciXVxzKjtbXHQgXSpcbj8pL2dtOwoKICAgICAgICAgIHJlc3AuYm9keSA9IGJvZHkucmVwbGFjZUFsbChyZSwgKG1hdGNoLCBwMSwgcDAsIHAyLCBwMywgb2Zmc2V0KSA9PiB7CiAgICAgICAgICAgIGlmKCEvW1wvXC5dLy50ZXN0KHAyKSkgewogICAgICAgICAgICAgIGxldCBmbmFtZSA9IGAke3AyfS5qc2A7CiAgICAgICAgICAgICAgbGV0IHJlbCA9IHBhdGgucmVsYXRpdmUoZm5hbWUsIGRpcik7CiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ29uSHR0cCcsIHsgbWF0Y2gsIGZuYW1lIH0sIHJlbCk7CgogICAgICAgICAgICAgIC8vIGlmKCFmcy5leGlzdHNTeW5jKCAgcmVsKSkgcmV0dXJuIGBgOwoKICAgICAgICAgICAgICBtYXRjaCA9IFtwMSwgcmVsLCBwM10uam9pbignJyk7CgogICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdhcmdzJywgewogICAgICAgICAgICAgICAgbWF0Y2gsCiAgICAgICAgICAgICAgICBwMSwKICAgICAgICAgICAgICAgIHAyLAogICAgICAgICAgICAgICAgcDMsCiAgICAgICAgICAgICAgICBvZmZzZXQKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gbWF0Y2g7CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgICAgY29uc29sZS5sb2coJ1x4MWJbMzg7NTszM21vbkh0dHBceDFiWzBtJywgeyByZXNwIH0pOwoKICAgICAgICByZXR1cm4gcmVzcDsKICAgICAgfSwKICAgICAgb25NZXNzYWdlKHdzLCBkYXRhKSB7CiAgICAgICAgY29uc29sZS5sb2coJ29uTWVzc2FnZScsIHdzLCBkYXRhKTsKICAgICAgICByZXR1cm4gY2FsbGJhY2tzLm9uTWVzc2FnZSh3cywgZGF0YSk7CiAgICAgIH0sCiAgICAgIG9uRmQoZmQsIHJkLCB3cikgewogICAgICAgIHJldHVybiBjYWxsYmFja3Mub25GZChmZCwgcmQsIHdyKTsKICAgICAgfSwKICAgICAgLi4uKHVybCAmJiB1cmwuaG9zdCA/IHVybCA6IHt9KQogICAgfSk7CiAgfSk7CgogIGRlZmluZShnbG9iYWxUaGlzLCB7CiAgICBnZXQgY29ubmVjdGlvbnMoKSB7CiAgICAgIHJldHVybiBbLi4uY29ubmVjdGlvbnNdOwogICAgfSwKICAgIGdldCBieV91dWlkKCkgewogICAgICByZXR1cm4gYnlfdXVpZDsKICAgIH0sCiAgICB1dWlkKGRhdGEpIHsKICAgICAgcmV0dXJuIGJ5X3V1aWRbZGF0YV07CiAgICB9CiAgfSk7CgogIE9iamVjdC5hc3NpZ24oZ2xvYmFsVGhpcywgewogICAgcmVwbCwKICAgIHF1aXQsCiAgICBleGl0OiBxdWl0LAogICAgc3RkLAogICAgb3MsCiAgICBkZWVwLAogICAgZnMsCiAgICBwYXRoLAogICAgUmVhZEpTT04sCiAgICBXcml0ZUpTT04sCiAgICBSZWFkRmlsZSwKICAgIFdyaXRlRmlsZSwKICAgIFJlYWRCSlNPTiwKICAgIFdyaXRlQkpTT04sCiAgICBwYXJzZURhdGUsCiAgICBkYXRlVG9PYmplY3QsCiAgICBIYXNoLAogICAgRm9ybVBhcnNlciwKICAgIEV4ZWNUb29sLAogICAgRXhlY3V0ZQogIH0pOwoKICBkZWxldGUgZ2xvYmFsVGhpcy5ERUJVRzsKCiAgY3JlYXRlV1MoCiAgICB7IHByb3RvY29sOiAnd3MnLCBob3N0OiAnMC4wLjAuMCcsIHBvcnQ6IDg5OTkgfSwKICAgIHsKICAgICAgb25GZChmZCwgcmQsIHdyKSB7CiAgICAgICAgb3Muc2V0UmVhZEhhbmRsZXIoZmQsIHJkKTsKICAgICAgICBvcy5zZXRXcml0ZUhhbmRsZXIoZmQsIHdyKTsKICAgICAgfSwKICAgICAgb25DbG9zZSh3cywgcmVhc29uKSB7fSwKICAgICAgb25NZXNzYWdlKHdzLCBkYXRhKSB7fQogICAgfSwKICAgIHRydWUKICApOwoKICBmdW5jdGlvbiBxdWl0KHdoeSkgewogICAgY29uc29sZS5sb2coYHF1aXQoJyR7d2h5fScpYCk7CgogICAgbGV0IGNmZyA9IHsgaW5zcGVjdE9wdGlvbnM6IGNvbnNvbGUub3B0aW9ucyB9OwogICAgV3JpdGVKU09OKGAuJHtiYXNlfS1jb25maWdgLCBjZmcpOwogICAgcmVwbC5jbGVhbnVwKHdoeSk7CiAgfQoKICByZXBsLnJ1blN5bmMoKTsKfQoKdHJ5IHsKICBtYWluKC4uLnNjcmlwdEFyZ3Muc2xpY2UoMSkpOwp9IGNhdGNoKGVycm9yKSB7CiAgY29uc29sZS5sb2coYEZBSUw6ICR7ZXJyb3I/Lm1lc3NhZ2UgPz8gZXJyb3J9XG4ke2Vycm9yPy5zdGFja31gKTsKICAxOwogIHN0ZC5leGl0KDEpOwp9IGZpbmFsbHkgewp9CgAAAAAAAAAA3ngAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAwVwAAAAAAADBXAAAAAAAAAAAAAAAA8L8"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": "{ws,"
					},
					"BAAAABBXAAAAAAAAEVcAAAAAAAAAAAAAEVcAAAAAAAASVwAAAAAAAAAAAAASVwAAAAAAABNXAAAAAAAAAAAAABNXAAAAAAAAFFcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAQVwAAAAAAABBXAAAAAAAAAAAAAAAAf0A"
				],
				[
					54,
					1,
					"insert",
					{
						"characters": "$}"
					},
					"AgAAABdXAAAAAAAAGFcAAAAAAAAAAAAAGFcAAAAAAAAZVwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAXVwAAAAAAABdXAAAAAAAAAAAAAAAA8L8"
				],
				[
					55,
					2,
					"left_delete",
					null,
					"AgAAABhXAAAAAAAAGFcAAAAAAAABAAAAfRdXAAAAAAAAF1cAAAAAAAABAAAAJA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAZVwAAAAAAABlXAAAAAAAAAAAAAAAA8L8"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": "}"
					},
					"AQAAABdXAAAAAAAAGFcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAXVwAAAAAAABdXAAAAAAAAAAAAAAAA8L8"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAJdWAAAAAAAAmFYAAAAAAAAAAAAAmFYAAAAAAACZVgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACXVgAAAAAAAJdWAAAAAAAAAAAAAAAA8L8"
				],
				[
					85,
					1,
					"insert",
					{
						"characters": "await"
					},
					"BQAAACIzAAAAAAAAIzMAAAAAAAAAAAAAIzMAAAAAAAAkMwAAAAAAAAAAAAAkMwAAAAAAACUzAAAAAAAAAAAAACUzAAAAAAAAJjMAAAAAAAAAAAAAJjMAAAAAAAAnMwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAiMwAAAAAAACIzAAAAAAAAAAAAAAAA8L8"
				],
				[
					87,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACIzAAAAAAAAIzMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAiMwAAAAAAACIzAAAAAAAAAAAAAAAA8L8"
				],
				[
					91,
					1,
					"insert",
					{
						"characters": "(//"
					},
					"AwAAAIkyAAAAAAAAijIAAAAAAAAAAAAAijIAAAAAAACLMgAAAAAAAAAAAACLMgAAAAAAAIwyAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACJMgAAAAAAAIkyAAAAAAAAAAAAAAAAWEA"
				],
				[
					92,
					3,
					"left_delete",
					null,
					"AwAAAIsyAAAAAAAAizIAAAAAAAABAAAAL4oyAAAAAAAAijIAAAAAAAABAAAAL4kyAAAAAAAAiTIAAAAAAAABAAAAKA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACMMgAAAAAAAIwyAAAAAAAAAAAAAAAA8L8"
				],
				[
					93,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAIkyAAAAAAAAijIAAAAAAAAAAAAAijIAAAAAAACLMgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACJMgAAAAAAAIkyAAAAAAAAAAAAAAAA8L8"
				],
				[
					121,
					1,
					"insert",
					{
						"characters": "\t\t"
					},
					"AgAAAB8pAAAAAAAAISkAAAAAAAAAAAAAISkAAAAAAAAjKQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAfKQAAAAAAAB8pAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "/home/roman/Projects/pictest/7seg-2.54-new-boards.svg",
			"settings":
			{
				"buffer_size": 795573,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"prettier",
				"JsPrettier: Format Code"
			],
			[
				"",
				"Auto indent"
			],
			[
				"prett",
				"JsPrettier: Format Code"
			],
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"list pack",
				"Package Control: List Packages"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"edit ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"edit",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"outli",
				"Browse Mode: Outline (Right)"
			],
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"debugger",
				"Preferences: Debugger Settings"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"scheme",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"INSTALL",
				"Package Control: Install Package"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"adap",
				"Debugger: Install Adapters"
			],
			[
				"install ada",
				"Debugger: Install Adapters"
			],
			[
				"adapter",
				"Debugger: Install Adapters"
			],
			[
				"debug",
				"Debugger: Install Adapters"
			],
			[
				"Package Control: remove",
				"Package Control: Remove Package"
			],
			[
				"debu",
				"Debugger: Install Adapters"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 289.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.c",
		"/home/roman/Projects/plot-cv/eagle-server.js",
		"/home/roman/Projects/plot-cv/debugger-server.js",
		"/home/roman/Projects/plot-cv/cv-shell.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/qjsm.c",
		"/home/roman/Projects/plot-cv/ast-shell.js",
		"/home/roman/Projects/plot-cv/adsb-server.js",
		"/home/roman/Projects/plot-cv/test-rpc.js",
		"/home/roman/Projects/plot-cv/test-repl.js",
		"/home/roman/Projects/plot-cv/eagle-shell.js",
		"/home/roman/Projects/plot-cv/repl.js",
		"/home/roman/Projects/plot-cv/upload-server.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/repl.js",
		"/home/roman/Projects/plot-cv/lib/geom/transformation.js",
		"/home/roman/Projects/plot-cv/lib/async/helpers.js",
		"/home/roman/Projects/plot-cv/lib/async/events.js",
		"/home/roman/Projects/plot-cv/draw.js",
		"/home/roman/Projects/plot-cv/lib/async.js",
		"/home/roman/Projects/plot-cv/test-minnet.js",
		"/home/roman/Projects/plot-cv/plot-cv.sublime-project",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/xml-shell.js",
		"/home/roman/Projects/plot-cv/string-helpers.js",
		"/home/roman/Projects/plot-cv/list-directory.js",
		"/home/roman/Projects/plot-cv/list.html",
		"/home/roman/Projects/plot-cv/filelist.js",
		"/home/roman/Projects/plot-cv/index.html",
		"/home/roman/Projects/plot-cv/fire.js",
		"/home/roman/Projects/plot-cv/lib/crosskit.js",
		"/home/roman/Projects/plot-cv/fire-es.html",
		"/home/roman/Projects/plot-cv/fire-es.js",
		"/home/roman/Projects/plot-cv/lib/async/timer.js",
		"/home/roman/Projects/plot-cv/lib/dom/element.js",
		"/home/roman/Projects/plot-cv/test-worker.js",
		"/home/roman/Projects/plot-cv/fire.html",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
		"/home/roman/Projects/plot-cv/promise-worker.js",
		"/home/roman/Projects/plot-cv/workerScript.js",
		"/home/roman/Projects/plot-cv/resolve-imports.js",
		"/home/roman/Projects/plot-cv/fire.es",
		"/home/roman/Projects/plot-cv/process-pool.js",
		"/home/roman/Projects/plot-cv/worker.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/console.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fs.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/vector.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/streams.js",
		"/home/roman/Projects/plot-cv/test-stream.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/cmake/QuickJSModule.cmake",
		"/home/roman/Projects/plot-cv/test-worker2.js",
		"/home/roman/Projects/quickjs.c",
		"/home/roman/Projects/plot-cv/static/css/upload.css",
		"/home/roman/Projects/plot-cv/object-helpers.js",
		"/home/roman/Projects/plot-cv/lib/eagle/boardRenderer.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/pad.js",
		"/home/roman/Projects/plot-cv/src/matrix.cpp",
		"/home/roman/Projects/plot-cv/lib/eagle/renderUtils.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/text.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/package.js",
		"/home/roman/Projects/plot-cv/lib/eagle/libraryRenderer.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/board.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/frame.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/element.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/pin.js",
		"/home/roman/Projects/an-tronics/eagle/AGC-Amplifier-LM13600-Stereo.sch",
		"/home/roman/Projects/plot-cv/lib/eagle/components/textElement.js",
		"/home/roman/Projects/plot-cv/ws-worker.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/symbol.js",
		"/home/roman/Projects/plot-cv/lib/geom/matrix.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/instance.js",
		"/home/roman/Projects/plot-cv/lib/eagle/schematicRenderer.js",
		"/home/roman/Projects/plot-cv/AGC-Amplifier-LM13600-Stereo-schematic.svg",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_childprocess.js",
		"/home/roman/Projects/plot-cv/test-childprocess.js",
		"/home/roman/Projects/plot-cv/ol-helpers.js",
		"/home/roman/Projects/plot-cv/ol-map.js",
		"/home/roman/Projects/plot-cv/map.html",
		"/home/roman/Projects/plot-cv/upload.js",
		"/home/roman/Projects/plot-cv/os-helpers.js",
		"/home/roman/Projects/plot-cv/debugger.js",
		"/home/roman/Projects/plot-cv/test-debuggerprotocol.js",
		"/home/roman/Projects/plot-cv/lib/eagle/node.js",
		"/home/roman/Projects/plot-cv/static/css/draw.css",
		"/home/roman/Projects/plot-cv/lib/misc.js",
		"/home/roman/Projects/plot-cv/lib/geom/point.js",
		"/home/roman/Projects/plot-cv/lib/geom/rect.js",
		"/home/roman/Projects/plot-cv/lib/geom/align.js",
		"/home/roman/Projects/plot-cv/lib/dom/css.js",
		"/home/roman/Projects/plot-cv/lib/geom/line.js",
		"/home/roman/Projects/plot-cv/lib/dom/svg.js",
		"/home/roman/Projects/plot-cv/lib/eagle/svgRenderer.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/wire.js",
		"/home/roman/Projects/plot-cv/lib/autoStore.js",
		"/home/roman/Projects/plot-cv/lib/lscache.js",
		"/home/roman/Projects/plot-cv/lib/dom/preactComponent.js",
		"/home/roman/Projects/plot-cv/draw.html",
		"/home/roman/Projects/plot-cv/lib/eagle/element.js",
		"/home/roman/Projects/plot-cv/test-dom.js",
		"/home/roman/Projects/plot-cv/lib/eagle/elementProxy.js",
		"/home/roman/Projects/an-tronics/eagle/Mind-Synchronizing-Generator-PinHdrPot-Cinch.sch",
		"/home/roman/Projects/plot-cv/lib/eagle/ref.js",
		"/home/roman/Projects/plot-cv/lib/pointer.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/rect.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/drawing.js",
		"/home/roman/Projects/plot-cv/io-helpers.js",
		"/home/roman/Projects/plot-cv/lib/util.js",
		"/home/roman/Projects/plot-cv/lib/eagle/nodeList.js",
		"/home/roman/Projects/plot-cv/lib/eagle/nodeMap.js",
		"/home/roman/Projects/plot-cv/lib/eagle/document.js",
		"/home/roman/Projects/plot-cv/FM-Radio-Circuit-Mirrored-board.svg",
		"/home/roman/Projects/plot-cv/VCF-LM324-Stereo-board.svg",
		"/home/roman/Bilder/RaspberryPi-PICPgm/RaspberryPi-PICPgm.svg",
		"/home/roman/Projects/plot-cv/lib/eda/circuitjs.js",
		"/home/roman/Projects/plot-cv/test-renderer.js",
		"/home/roman/Projects/plot-cv/static/css/list.css",
		"/home/roman/Projects/plot-cv/test-mmap.js",
		"/home/roman/Schreibtisch/calc-angles.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-path.c",
		"/home/roman/Projects/plot-cv/lib/eagle/components/svg.js",
		"/home/roman/Projects/an-tronics/eagle/Mind-Synchronizing-Generator-PinHdrPot-Cinch.brd",
		"/home/roman/Projects/plot-cv/lib/eagle/components/via.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/signal.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/background.js",
		"/home/roman/Projects/plot-cv/eagle2svg.js",
		"/home/roman/Projects/plot-cv/lib/geom/bbox.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/wirePath.js"
	],
	"find":
	{
		"height": 24.0
	},
	"find_in_files":
	{
		"height": 146.0,
		"where_history":
		[
			"<open files>,/home/roman/Projects/plot-cv,*.js,-*/build/*,-*/inst/*",
			"/home/roman/Projects/plot-cv,*.js,-*/build/*,-*/inst/*",
			"/home/roman/Projects/plot-cv,*.js,-*/build/*",
			"/home/roman/Projects/plot-cv,*.js",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"weak",
			"weak.ref",
			"weak.map",
			"\"Weak",
			"\"Final",
			"Finalizer",
			"\"Weak",
			"os.read",
			"new REPL",
			"Config",
			"saveAnd",
			"new REPL",
			"REPL",
			"import",
			"\\* test",
			"new REPL",
			"302",
			"onHttp",
			"\\* test",
			"define\\(",
			"\\* test",
			"onHttp",
			"\\* test",
			"out",
			"logLevel",
			"params",
			"logLevel",
			"setLog",
			"logLevel",
			"logFilter",
			"setLog",
			"setLog\\(",
			"print\\(",
			"print",
			"files",
			"filter",
			"Table =",
			"queryEle",
			"'load'",
			"map\\(",
			"filter\\(",
			"Util\\(",
			"Util\\.",
			"identity",
			"streamify",
			"};,",
			"Return a new async iterator that applies a",
			"\nReturn a new async iterator that applies a",
			"Return a new async iterator that applies a",
			"Only pass along events that meet a condition",
			"function\\* filter",
			"filter",
			"TransformationList",
			"rect =",
			"MouseIterator",
			"MouseHandler",
			"relative",
			"getOpt",
			"getOPt",
			"g",
			"'h'",
			"getOpt",
			"rect =",
			"init\\(",
			"write err",
			"document",
			"init",
			"canvas",
			"pixels",
			"Util\\.",
			"fire",
			"Util\\.",
			"main\\(",
			"addEvent",
			"^const matrix =?",
			"matrix =?",
			"getOpt",
			"'test'",
			"434",
			"^(\\s*)(console)",
			"ReadableStream.pull",
			"^(\\s*)(console)",
			"^\\s*console",
			"setTime",
			"Timer",
			"CHILD",
			"console =",
			"'test'",
			"message",
			"jsm_module_locate",
			"jsm_stack_find",
			"jsm_module_loader",
			"orker",
			"SetModule",
			"package_json",
			"load_package",
			"module_package",
			"jsm_module_loader",
			"jsm_module_load",
			"jsm_module_loader",
			"package_json",
			"replOb",
			"jsm_init",
			"thread_local",
			"[^_a-z]module_loader",
			"module_loader",
			" module_loader =",
			"module_loader =",
			"module_loader",
			"package_js",
			"jsm_conte",
			"jsm_init",
			"jsm_context",
			"jsm_init_modules",
			"jsm_init",
			"initialized",
			"jsm_modules_initialized",
			"initialized",
			"jsm_init_modules",
			"jsm_inmit_modules",
			"jsm_con",
			"jsm_ini",
			"jsm_builtin",
			"jsm_modules_init",
			"jsm_builti",
			"jsm_builti8n",
			"jsm_init_modules",
			"jsm_built"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"\\1//\\2",
			""
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1725,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": "/home/roman/Projects/plot-cv/upload-server.js",
							"function_name_status_row": -1,
							"outline_rename_mode": false,
							"symkeys":
							[
								[
									1591,
									1599
								],
								[
									1615,
									1635
								],
								[
									2075,
									2106
								],
								[
									2432,
									2454
								],
								[
									2674,
									2707
								],
								[
									2729,
									2733
								],
								[
									3109,
									3114
								],
								[
									3162,
									3166
								],
								[
									3187,
									3207
								],
								[
									3261,
									3265
								],
								[
									3335,
									3357
								],
								[
									3551,
									3573
								],
								[
									3996,
									4062
								],
								[
									4408,
									4417
								],
								[
									4522,
									4552
								],
								[
									4907,
									4942
								],
								[
									4974,
									5015
								],
								[
									5047,
									5113
								],
								[
									5146,
									5180
								],
								[
									5251,
									5298
								],
								[
									5834,
									5870
								],
								[
									5983,
									5992
								],
								[
									6228,
									6236
								],
								[
									6342,
									6349
								],
								[
									6399,
									6423
								],
								[
									6804,
									6815
								],
								[
									6905,
									6916
								],
								[
									6980,
									6991
								],
								[
									7045,
									7054
								],
								[
									7092,
									7103
								],
								[
									7191,
									7218
								],
								[
									7356,
									7360
								],
								[
									7384,
									7391
								],
								[
									7424,
									7440
								],
								[
									7569,
									7614
								],
								[
									7830,
									7888
								],
								[
									8200,
									8222
								],
								[
									8617,
									8627
								],
								[
									8871,
									8885
								],
								[
									9838,
									9862
								],
								[
									9988,
									9992
								],
								[
									10084,
									10098
								],
								[
									10198,
									10214
								],
								[
									10568,
									10581
								],
								[
									10599,
									10604
								],
								[
									10686,
									10693
								],
								[
									10721,
									10726
								],
								[
									10848,
									10873
								],
								[
									11048,
									11087
								],
								[
									11164,
									11175
								],
								[
									12741,
									12772
								],
								[
									13435,
									13468
								],
								[
									13740,
									13775
								],
								[
									13860,
									13893
								],
								[
									14653,
									14659
								],
								[
									14829,
									14835
								],
								[
									15605,
									15609
								],
								[
									16044,
									16051
								],
								[
									16444,
									16480
								],
								[
									16884,
									16918
								],
								[
									17812,
									17817
								],
								[
									18583,
									18587
								],
								[
									18681,
									18685
								],
								[
									18805,
									18814
								],
								[
									18944,
									18951
								],
								[
									19232,
									19239
								],
								[
									19320,
									19327
								],
								[
									19391,
									19407
								],
								[
									19472,
									19492
								],
								[
									20192,
									20204
								],
								[
									20303,
									20315
								],
								[
									20517,
									20533
								],
								[
									20689,
									20702
								],
								[
									21005,
									21023
								],
								[
									21159,
									21188
								],
								[
									21681,
									21700
								],
								[
									22114,
									22135
								],
								[
									22991,
									23013
								],
								[
									23486,
									23507
								],
								[
									24058,
									24077
								],
								[
									24511,
									24519
								],
								[
									27220,
									27232
								],
								[
									28933,
									28968
								],
								[
									29582,
									29601
								],
								[
									29709,
									29725
								],
								[
									29860,
									29877
								],
								[
									29922,
									29935
								],
								[
									29971,
									29981
								],
								[
									30422,
									30438
								],
								[
									30527,
									30546
								],
								[
									30557,
									30576
								],
								[
									30602,
									30622
								]
							],
							"symlist":
							[
								"  value =>",
								"\t(level, message) =>",
								"ExecTool(cmd, ...args)",
								"GetMime(file)",
								"MakeUUID = (rng = Math.random) =>",
								"  n =>",
								"  dd =>",
								"  d =>",
								"GetDir(dir)",
								"  n =>",
								"DateStr(date)",
								"ModeStr(mode)",
								"HTMLPage = ({ title, style, scripts = [], children, ...props }) =>",
								"  script =>",
								"FilterForm = ({ ...props }) =>",
								"HTMLTable = ({ rows, ...props }) =>",
								"HTMLTableRow = ({ columns, ...props }) =>",
								"HTMLTableColumn = ({ columns, children, tag = 'td', ...props }) =>",
								"FileLink = ({ file, ...props }) =>",
								"FileObject = ({ file, stat = {}, ...props }) =>",
								"FileTable = ({ files, ...props }) =>",
								"(a, b) =>",
								"  field =>",
								"  file =>",
								"ReadExiv2(file)",
								"([k, v]) =>",
								"([k, v]) =>",
								"([k, v]) =>",
								"(a, b) =>",
								"([k, v]) =>",
								"ReadExiftool(file)",
								"  l =>",
								"  line =>",
								"([line, idx]) =>",
								"HeifConvert(src, dst, quality = 100)",
								"MagickResize(src, dst, rotate = 0, width, height)",
								"  main(...args)",
								"\t(a, v) =>",
								"\t(v, pv, o) =>",
								"\t(module, ...args) =>",
								"  m =>",
								"  .show = arg =>",
								"  .cleanup = () =>",
								"\t(...args) =>",
								"() =>",
								"  puts(s)",
								"() =>",
								"ParseBody(gen)",
								"  .createWS = (url, callbacks, listen) =>",
								"  .out = s =>",
								"  test(req, resp)",
								"  proxy(req, resp)",
								"  config(req, resp)",
								"  file(req, resp)",
								"  dir =>",
								"  dir =>",
								"  f =>",
								"  file =>",
								"  uploads(req, resp)",
								"  files(req, resp)",
								"\tn =>",
								"  n =>",
								"  n =>",
								"(a, b) =>",
								"  name =>",
								"  file =>",
								"  file =>",
								"([file, rel]) =>",
								"(acc, [file, st]) =>",
								"  string(a, b)",
								"  number(a, b)",
								"([name, obj]) =>",
								"({ name }) =>",
								"  onConnect(ws, req)",
								"  .sendCommand = function(data)",
								"  onClose(ws, reason)",
								"  onHttp(ws, req, resp)",
								"  onOpen(name, filename)",
								"  onContent(name, data)",
								"  onClose(name, file)",
								"  f = x =>",
								"  onFinalize()",
								"\t(match, p1, p0, p2, p3, offset) =>",
								"  onMessage(ws, data)",
								"  onFd(fd, rd, wr)",
								"  get connections()",
								"  get by_uuid()",
								"  uuid(data)",
								"  onFd(fd, rd, wr)",
								"  onClose(ws, reason)",
								"  onMessage(ws, data)",
								"  quit(why)"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 3,
							"tabs_extra_last_activated": 1669331424.45,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "quickjs/qjs-modules/xml-shell.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4219,
						"regions":
						{
						},
						"selection":
						[
							[
								83,
								83
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 2,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1669466442.2,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "lib/dom/container.js",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 474,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1669824577.28,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "upload-server.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 30961,
						"regions":
						{
						},
						"selection":
						[
							[
								10531,
								10531
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 340,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1669825564.04,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5100.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/home/roman/Projects/pictest/7seg-2.54-new-boards.svg",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 795573,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 24.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.804001835481,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 0.0
	},
	"output.Debugger Console":
	{
		"height": 0.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "plot-cv.sublime-project",
	"replace":
	{
		"height": 44.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"upload-server",
				"upload-server.js"
			],
			[
				"quickjs.h",
				"quickjs/quickjs.h"
			],
			[
				"quickjs.c",
				"quickjs/quickjs.c"
			],
			[
				"xml-shell",
				"quickjs/qjs-modules/xml-shell.js"
			],
			[
				"qjsm.c",
				"quickjs/qjs-modules/src/qjsm.c"
			],
			[
				"repl.js",
				"quickjs/qjs-modules/lib/repl.js"
			],
			[
				"eagle-shell",
				"eagle-shell.js"
			],
			[
				"repl",
				"repl.js"
			],
			[
				"string-he",
				"string-helpers.js"
			],
			[
				"upload-ser",
				"upload-server.js"
			],
			[
				"test-minnet",
				"test-minnet.js"
			],
			[
				"list-dir",
				"list-directory.js"
			],
			[
				"list.ht",
				"list.html"
			],
			[
				"draw.js",
				"draw.js"
			],
			[
				"filelist",
				"filelist.js"
			],
			[
				"index.html",
				"index.html"
			],
			[
				"transformation",
				"lib/geom/transformation.js"
			],
			[
				"element.",
				"lib/dom/element.js"
			],
			[
				"crosskit",
				"lib/crosskit.js"
			],
			[
				"fire-es",
				"fire-es.html"
			],
			[
				"lib/util.js",
				"quickjs/qjs-modules/lib/util.js"
			],
			[
				"resolve-im",
				"quickjs/qjs-modules/resolve-imports.js"
			],
			[
				"resolve",
				"resolve-imports.js"
			],
			[
				"fire-es.h",
				"fire-es.html"
			],
			[
				"fire.html",
				"fire.html"
			],
			[
				"fire.js",
				"fire.js"
			],
			[
				"fire-es.js",
				"fire-es.js"
			],
			[
				"fire.es",
				"fire.es"
			],
			[
				"",
				"test-worker.js"
			],
			[
				"quickjs",
				"qjs-opencv/cmake/QuickJSModule.cmake"
			],
			[
				"test-strea",
				"test-stream.js"
			],
			[
				"worker.js",
				"worker.js"
			],
			[
				"vector.h",
				"quickjs/qjs-modules/include/vector.h"
			],
			[
				"quickjs-misc",
				"quickjs/qjs-modules/quickjs-misc.c"
			],
			[
				"fs.js",
				"quickjs/qjs-modules/lib/fs.js"
			],
			[
				"console.js",
				"quickjs/qjs-modules/lib/console.js"
			],
			[
				"test-work",
				"test-worker.js"
			],
			[
				"worker",
				"worker.js"
			],
			[
				"workerSc",
				"workerScript.js"
			],
			[
				"wworker",
				"ws-worker.js"
			],
			[
				"matrix.js",
				"lib/geom/matrix.js"
			],
			[
				"matrix",
				"src/matrix.cpp"
			],
			[
				"test_chil",
				"quickjs/qjs-modules/tests/test_childprocess.js"
			],
			[
				"test-child",
				"test-childprocess.js"
			],
			[
				"os-help",
				"os-helpers.js"
			],
			[
				"object-help",
				"object-helpers.js"
			],
			[
				"ol-help",
				"ol-helpers.js"
			],
			[
				"ol-map",
				"ol-map.js"
			],
			[
				"map.html",
				"map.html"
			],
			[
				"upload.css",
				"static/css/upload.css"
			],
			[
				"upload.js",
				"upload.js"
			],
			[
				"debugger-ser",
				"debugger-server.js"
			],
			[
				"test-debu",
				"test-debuggerprotocol.js"
			],
			[
				"node.js",
				"lib/eagle/node.js"
			],
			[
				"misc.",
				"lib/misc.js"
			],
			[
				"draw.css",
				"static/css/draw.css"
			],
			[
				"rect.js",
				"lib/geom/rect.js"
			],
			[
				"svg.js",
				"lib/dom/svg.js"
			],
			[
				"lscache",
				"lib/lscache.js"
			],
			[
				"autoStore",
				"lib/autoStore.js"
			],
			[
				"misc.js",
				"lib/misc.js"
			],
			[
				"preactCom",
				"lib/dom/preactComponent.js"
			],
			[
				"draw.html",
				"draw.html"
			],
			[
				"test-dom",
				"test-dom.js"
			],
			[
				"elemen",
				"lib/eagle/element.js"
			],
			[
				"eagle-shel",
				"eagle-shell.js"
			],
			[
				"io-help",
				"io-helpers.js"
			],
			[
				"test-mmap",
				"test-mmap.js"
			],
			[
				"list.cs",
				"static/css/list.css"
			],
			[
				"test-rend",
				"test-renderer.js"
			],
			[
				"list-dire",
				"list-directory.js"
			],
			[
				"list.html",
				"list.html"
			],
			[
				"drawin",
				"lib/eagle/components/drawing.js"
			],
			[
				"wire.js",
				"lib/eagle/components/wire.js"
			],
			[
				"io-he",
				"io-helpers.js"
			],
			[
				"circui",
				"lib/eda/circuitjs.js"
			],
			[
				"util.js",
				"lib/util.js"
			],
			[
				"document",
				"lib/eagle/document.js"
			],
			[
				"upload",
				"upload.js"
			],
			[
				"io-helper",
				"io-helpers.js"
			],
			[
				"quickjs-pa",
				"quickjs/qjs-modules/quickjs-path.c"
			],
			[
				"quickjs-path",
				"quickjs/qjs-modules/quickjs-path.c"
			],
			[
				"bbox",
				"lib/geom/bbox.js"
			],
			[
				"eagle-she",
				"eagle-shell.js"
			],
			[
				"eagle2sv",
				"eagle2svg.js"
			],
			[
				"bbox.js",
				"lib/geom/bbox.js"
			],
			[
				"eagle2svg",
				"eagle2svg.js"
			],
			[
				"object-he",
				"object-helpers.js"
			],
			[
				"ol-map.js",
				"ol-map.js"
			],
			[
				"xml2react",
				"xml2react.js"
			],
			[
				"layer.js",
				"lib/dom/layer.js"
			],
			[
				"gallery-i",
				"static/svg/gallery-icon.svg"
			],
			[
				"gallery-ic",
				"gallery-icon.svg"
			],
			[
				"rect.j",
				"lib/geom/rect.js"
			],
			[
				"ol-he",
				"ol-helpers.js"
			],
			[
				"uploa",
				"upload.html"
			],
			[
				"upload.cs",
				"static/css/upload.css"
			],
			[
				"list-exp",
				"list-exports.js"
			],
			[
				"xpath",
				"lib/xpath.js"
			],
			[
				"xml.js",
				"lib/xml.js"
			],
			[
				"quickjs-deep",
				"quickjs-deep.c"
			],
			[
				"dom.js",
				"lib/dom.js"
			],
			[
				"lit-ex",
				"list-exports.js"
			],
			[
				"util",
				"lib/util.js"
			],
			[
				"dom",
				"lib/dom.js"
			],
			[
				"css3-",
				"lib/css3-selectors.js"
			],
			[
				"predicate.c",
				"src/predicate.c"
			],
			[
				"writ",
				"lib/xml/write.js"
			],
			[
				"xpath.js",
				"lib/xpath.js"
			],
			[
				"quickjs-bl",
				"quickjs-blob.c"
			],
			[
				"c.js",
				"lib/lexer/c.js"
			],
			[
				"console.j",
				"lib/console.js"
			],
			[
				"inspect",
				"quickjs-inspect.c"
			],
			[
				"quickjs-le",
				"quickjs-lexer.c"
			],
			[
				"deep.c",
				"quickjs-deep.c"
			],
			[
				"prop",
				"src/property-enumeration.c"
			],
			[
				"proper",
				"include/property-enumeration.h"
			],
			[
				"test_dom",
				"tests/test_dom.js"
			],
			[
				"quickjs-socket",
				"quickjs-sockets.c"
			],
			[
				"predicate.h",
				"include/predicate.h"
			],
			[
				"quickjs-pred",
				"quickjs-predicate.c"
			],
			[
				"test_pred",
				"tests/test_predicate.js"
			],
			[
				"utils.h",
				"include/utils.h"
			],
			[
				"utils.c",
				"src/utils.c"
			],
			[
				"char-u",
				"include/char-utils.h"
			],
			[
				"path.h",
				"include/path.h"
			],
			[
				"vecto",
				"src/vector.c"
			],
			[
				"events",
				"lib/events.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/plot-cv.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 370.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"WS"
			]
		],
		"width": 970.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 248.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
