{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Property",
				"PropertyEnumeration"
			],
			[
				"PaStream",
				"PaStreamParameters"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"PaE",
				"PaHostErrorInfo"
			],
			[
				"hostApi",
				"hostApiSpecificStreamInfo"
			],
			[
				"host",
				"hostApiType"
			],
			[
				"defaultHi",
				"defaultHighOutputLatency"
			],
			[
				"Draw",
				"DrawCircle"
			],
			[
				"exi",
				"existsSync"
			],
			[
				"text",
				"text-decoration"
			],
			[
				"crea",
				"createTextNode"
			],
			[
				"Transform",
				"TransformationList"
			],
			[
				"trans",
				"transformation"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "—Ⓜ– INT32_IN_RANGE ( ) … — macro function\n—Ⓜ– IS_COMPACT ( ) … — macro function\nⓉ  PropertyKey ; — typedef\nⓉ  InspectOptions ; — typedef\nⓉ  Inspector ; — typedef\n⒡  inspect_value ( ) ; — function declaration\n⒡  inspect_string ( ) ; — function declaration\n⒡  inspect_number ( ) ; — function declaration\n—Ⓕ– screen_width ( ) { … } — function\n—Ⓕ– options_init ( ) { … } — function\n—Ⓕ– options_free ( ) { … } — function\n—Ⓕ– options_get ( ) { … } — function\n—Ⓕ– options_object ( ) { … } — function\n—Ⓕ– options_hidden ( ) { … } — function\n—Ⓕ– options_numhidden ( ) { … } — function\n—Ⓕ– put_newline ( ) { … } — function\n—Ⓕ– adjust_spacing ( ) { … } — function\n—Ⓕ– put_spacing ( ) { … } — function\n—Ⓕ– put_escaped ( ) { … } — function\n—Ⓕ– inspect_custom ( ) { … } — function\n—Ⓕ– inspect_date ( ) { … } — function\n—Ⓕ– inspect_map ( ) { … } — function\n—Ⓕ– inspect_set ( ) { … } — function\n—Ⓕ– inspect_arraybuffer ( ) { … } — function\n—Ⓕ– inspect_regexp ( ) { … } — function\n—Ⓕ– inspect_number ( ) { … } — function\n—Ⓕ– inspect_string ( ) { … } — function\n—Ⓕ– inspect_key ( ) { … } — function\n—Ⓕ– inspect_atom ( ) { … } — function\n—Ⓕ– inspect_error ( ) { … } — function\n—Ⓕ– inspect_object ( ) { … } — function\n—Ⓕ– inspect_value ( ) { … } — function\n—Ⓕ– inspect_recursive ( ) { … } — function\n—Ⓕ– js_inspect ( ) { … } — function\n—Ⓕ– js_inspect_tostring ( ) { … } — function\n—Ⓕ– js_inspect_atom ( ) { … } — function\n—Ⓕ– js_inspect_init ( ) { … } — function\nⓂ  JS_INIT_MODULE … — macro object\nⓂ  JS_INIT_MODULE … — macro object",
			"settings":
			{
				"buffer_size": 1512,
				"line_ending": "Unix",
				"name": "𝌆 Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					554,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/build/compileCommand.js",
						"symkeys":
						[
							[
								155,
								169
							],
							[
								183,
								212
							],
							[
								630,
								643
							],
							[
								704,
								720
							],
							[
								769,
								781
							],
							[
								819,
								834
							],
							[
								869,
								873
							],
							[
								980,
								994
							],
							[
								1057,
								1070
							],
							[
								1131,
								1143
							],
							[
								1227,
								1233
							],
							[
								1274,
								1280
							],
							[
								1336,
								1347
							],
							[
								1405,
								1415
							],
							[
								1473,
								1486
							],
							[
								1532,
								1538
							],
							[
								1564,
								1580
							],
							[
								1778,
								1790
							],
							[
								1935,
								1950
							],
							[
								1986,
								2001
							],
							[
								2069,
								2074
							],
							[
								2094,
								2105
							],
							[
								2191,
								2206
							],
							[
								2269,
								2285
							],
							[
								2346,
								2360
							],
							[
								2420,
								2434
							],
							[
								2494,
								2509
							],
							[
								2570,
								2581
							],
							[
								2659,
								2673
							],
							[
								2754,
								2766
							],
							[
								2845,
								2853
							],
							[
								2907,
								2917
							],
							[
								3204,
								3219
							],
							[
								3277,
								3287
							],
							[
								4354,
								4363
							],
							[
								4402,
								4417
							],
							[
								4856,
								4912
							],
							[
								6191,
								6205
							],
							[
								6310,
								6338
							]
						],
						"symlist":
						[
							"CompileCommand",
							"constructor(a, workDir = '.')",
							"get program()",
							"set program(arg)",
							"get output()",
							"set output(arg)",
							"a =>",
							"get includes()",
							"get defines()",
							"get cflags()",
							"inc =>",
							"def =>",
							"get flags()",
							"get args()",
							"get sources()",
							"arg =>",
							"set sources(arg)",
							"get source()",
							"set source(arg)",
							"typeFlags(type)",
							" f =>",
							"type : f =>",
							"get warnFlags()",
							"get debugFlags()",
							"get optFlags()",
							"get depFlags()",
							"get modeFlags()",
							"isCompile()",
							"isPreprocess()",
							"isAssemble()",
							"isLink()",
							"get type()",
							"toString(delim)",
							"toObject()",
							"toArray()",
							"remove(...args)",
							" function ArgumentType(arg, i = Number.MAX_SAFE_INTEGER)",
							"CompileCommand",
							" function NinjaRule(command)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAbBAAA4oCU4pK74oCTIHByb3BlcnR5X2VudW1lcmF0aW9uX2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwcm9wZXJ0eV9lbnVtZXJhdGlvbl9kdW1wICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcHJvcGVydHlfZW51bWVyYXRpb25fcGF0aF90b3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHByb3BlcnR5X2VudW1lcmF0aW9uX3Jlc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcHJvcGVydHlfZW51bWVyYXRpb25fa2V5ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcHJvcGVydHlfZW51bWVyYXRpb25fcHJlZGljYXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcHJvcGVydHlfcmVjdXJzaW9uX3BhdGggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwcm9wZXJ0eV9yZWN1cnNpb25fcGF0aHN0ciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHByb3BlcnR5X3JlY3Vyc2lvbl9wYXRoc3RyX3ZhbHVlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcHJvcGVydHlfcmVjdXJzaW9uX2R1bXBhbGwgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwcm9wZXJ0eV9yZWN1cnNpb25fc2tpcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHByb3BlcnR5X3JlY3Vyc2lvbl9pbnNpZGVvZiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHByb3BlcnR5X3JlY3Vyc2lvbl9mcmVlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcHJvcGVydHlfcmVjdXJzaW9uX2NpcmN1bGFyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcHJvcGVydHlfcmVjdXJzaW9uX3B1c2ggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwcm9wZXJ0eV9yZWN1cnNpb25fcG9wICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcHJvcGVydHlfcmVjdXJzaW9uX2VudGVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgAAAAAAAAAAdQIAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					555,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
						"symkeys":
						[
							[
								813,
								827
							],
							[
								876,
								886
							],
							[
								967,
								978
							],
							[
								1408,
								1422
							],
							[
								1495,
								1504
							],
							[
								1587,
								1600
							],
							[
								1648,
								1662
							],
							[
								1710,
								1724
							],
							[
								1780,
								1792
							],
							[
								2325,
								2337
							],
							[
								3067,
								3079
							],
							[
								3307,
								3318
							],
							[
								7651,
								7665
							],
							[
								9298,
								9312
							],
							[
								9489,
								9500
							],
							[
								9619,
								9633
							],
							[
								9848,
								9859
							],
							[
								9971,
								9982
							],
							[
								12441,
								12455
							],
							[
								13363,
								13375
							],
							[
								14184,
								14195
							],
							[
								16002,
								16013
							],
							[
								17428,
								17447
							],
							[
								20564,
								20578
							],
							[
								21012,
								21026
							],
							[
								23269,
								23283
							],
							[
								25130,
								25141
							],
							[
								25673,
								25685
							],
							[
								25921,
								25934
							],
							[
								27336,
								27350
							],
							[
								30825,
								30838
							],
							[
								34006,
								34023
							],
							[
								37668,
								37678
							],
							[
								38560,
								38579
							],
							[
								39076,
								39091
							],
							[
								39912,
								39927
							],
							[
								40959,
								40973
							],
							[
								41003,
								41017
							]
						],
						"symlist":
						[
							"—Ⓜ– INT32_IN_RANGE ( ) … — macro function",
							"—Ⓜ– IS_COMPACT ( ) … — macro function",
							" Ⓣ  PropertyKey ; — typedef",
							" Ⓣ  InspectOptions ; — typedef",
							" Ⓣ  Inspector ; — typedef",
							" ⒡  inspect_value ( ) ; — function declaration",
							" ⒡  inspect_string ( ) ; — function declaration",
							" ⒡  inspect_number ( ) ; — function declaration",
							"—Ⓕ– screen_width ( ) { … } — function",
							"—Ⓕ– options_init ( ) { … } — function",
							"—Ⓕ– options_free ( ) { … } — function",
							"—Ⓕ– options_get ( ) { … } — function",
							"—Ⓕ– options_object ( ) { … } — function",
							"—Ⓕ– options_hidden ( ) { … } — function",
							"—Ⓕ– put_newline ( ) { … } — function",
							"—Ⓕ– adjust_spacing ( ) { … } — function",
							"—Ⓕ– put_spacing ( ) { … } — function",
							"—Ⓕ– put_escaped ( ) { … } — function",
							"—Ⓕ– inspect_custom ( ) { … } — function",
							"—Ⓕ– inspect_date ( ) { … } — function",
							"—Ⓕ– inspect_map ( ) { … } — function",
							"—Ⓕ– inspect_set ( ) { … } — function",
							"—Ⓕ– inspect_arraybuffer ( ) { … } — function",
							"—Ⓕ– inspect_regexp ( ) { … } — function",
							"—Ⓕ– inspect_number ( ) { … } — function",
							"—Ⓕ– inspect_string ( ) { … } — function",
							"—Ⓕ– inspect_key ( ) { … } — function",
							"—Ⓕ– inspect_atom ( ) { … } — function",
							"—Ⓕ– inspect_error ( ) { … } — function",
							"—Ⓕ– inspect_object ( ) { … } — function",
							"—Ⓕ– inspect_value ( ) { … } — function",
							"—Ⓕ– inspect_recursive ( ) { … } — function",
							"—Ⓕ– js_inspect ( ) { … } — function",
							"—Ⓕ– js_inspect_tostring ( ) { … } — function",
							"—Ⓕ– js_inspect_atom ( ) { … } — function",
							"—Ⓕ– js_inspect_init ( ) { … } — function",
							" Ⓜ  JS_INIT_MODULE … — macro object",
							" Ⓜ  JS_INIT_MODULE … — macro object"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB1AgAAQ29tcGlsZUNvbW1hbmQKICBjb25zdHJ1Y3RvcihhLCB3b3JrRGlyID0gJy4nKQogIGdldCBwcm9ncmFtKCkKICBzZXQgcHJvZ3JhbShhcmcpCiAgZ2V0IG91dHB1dCgpCiAgc2V0IG91dHB1dChhcmcpCiAgYSA9PgogIGdldCBpbmNsdWRlcygpCiAgZ2V0IGRlZmluZXMoKQogIGdldCBjZmxhZ3MoKQogIGluYyA9PgogIGRlZiA9PgogIGdldCBmbGFncygpCiAgZ2V0IGFyZ3MoKQogIGdldCBzb3VyY2VzKCkKICBhcmcgPT4KICBzZXQgc291cmNlcyhhcmcpCiAgZ2V0IHNvdXJjZSgpCiAgc2V0IHNvdXJjZShhcmcpCiAgdHlwZUZsYWdzKHR5cGUpCmYgPT4KICB0eXBlIDogZiA9PgogIGdldCB3YXJuRmxhZ3MoKQogIGdldCBkZWJ1Z0ZsYWdzKCkKICBnZXQgb3B0RmxhZ3MoKQogIGdldCBkZXBGbGFncygpCiAgZ2V0IG1vZGVGbGFncygpCiAgaXNDb21waWxlKCkKICBpc1ByZXByb2Nlc3MoKQogIGlzQXNzZW1ibGUoKQogIGlzTGluaygpCiAgZ2V0IHR5cGUoKQogIHRvU3RyaW5nKGRlbGltKQogIHRvT2JqZWN0KCkKICB0b0FycmF5KCkKICByZW1vdmUoLi4uYXJncykKQXJndW1lbnRUeXBlKGFyZywgaSA9IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKQpDb21waWxlQ29tbWFuZApOaW5qYVJ1bGUoY29tbWFuZCkAAAAAAAAAAL0FAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					564,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
						"symkeys":
						[
							[
								813,
								827
							],
							[
								876,
								886
							],
							[
								967,
								978
							],
							[
								1408,
								1422
							],
							[
								1495,
								1504
							],
							[
								1587,
								1600
							],
							[
								1648,
								1662
							],
							[
								1710,
								1724
							],
							[
								1780,
								1792
							],
							[
								2325,
								2337
							],
							[
								3067,
								3079
							],
							[
								3307,
								3318
							],
							[
								7651,
								7665
							],
							[
								9298,
								9312
							],
							[
								9488,
								9502
							],
							[
								9679,
								9690
							],
							[
								9809,
								9823
							],
							[
								10038,
								10049
							],
							[
								10161,
								10172
							],
							[
								12631,
								12645
							],
							[
								13553,
								13565
							],
							[
								14374,
								14385
							],
							[
								16192,
								16203
							],
							[
								17618,
								17637
							],
							[
								20754,
								20768
							],
							[
								21202,
								21216
							],
							[
								23459,
								23473
							],
							[
								25320,
								25331
							],
							[
								25863,
								25875
							],
							[
								26111,
								26124
							],
							[
								27526,
								27540
							],
							[
								31015,
								31028
							],
							[
								34196,
								34213
							],
							[
								37858,
								37868
							],
							[
								38750,
								38769
							],
							[
								39266,
								39281
							],
							[
								40102,
								40117
							],
							[
								41149,
								41163
							],
							[
								41193,
								41207
							]
						],
						"symlist":
						[
							"—Ⓜ– INT32_IN_RANGE ( ) … — macro function",
							"—Ⓜ– IS_COMPACT ( ) … — macro function",
							" Ⓣ  PropertyKey ; — typedef",
							" Ⓣ  InspectOptions ; — typedef",
							" Ⓣ  Inspector ; — typedef",
							" ⒡  inspect_value ( ) ; — function declaration",
							" ⒡  inspect_string ( ) ; — function declaration",
							" ⒡  inspect_number ( ) ; — function declaration",
							"—Ⓕ– screen_width ( ) { … } — function",
							"—Ⓕ– options_init ( ) { … } — function",
							"—Ⓕ– options_free ( ) { … } — function",
							"—Ⓕ– options_get ( ) { … } — function",
							"—Ⓕ– options_object ( ) { … } — function",
							"—Ⓕ– options_hidden ( ) { … } — function",
							"—Ⓕ– options_hidden ( ) { … } — function",
							"—Ⓕ– put_newline ( ) { … } — function",
							"—Ⓕ– adjust_spacing ( ) { … } — function",
							"—Ⓕ– put_spacing ( ) { … } — function",
							"—Ⓕ– put_escaped ( ) { … } — function",
							"—Ⓕ– inspect_custom ( ) { … } — function",
							"—Ⓕ– inspect_date ( ) { … } — function",
							"—Ⓕ– inspect_map ( ) { … } — function",
							"—Ⓕ– inspect_set ( ) { … } — function",
							"—Ⓕ– inspect_arraybuffer ( ) { … } — function",
							"—Ⓕ– inspect_regexp ( ) { … } — function",
							"—Ⓕ– inspect_number ( ) { … } — function",
							"—Ⓕ– inspect_string ( ) { … } — function",
							"—Ⓕ– inspect_key ( ) { … } — function",
							"—Ⓕ– inspect_atom ( ) { … } — function",
							"—Ⓕ– inspect_error ( ) { … } — function",
							"—Ⓕ– inspect_object ( ) { … } — function",
							"—Ⓕ– inspect_value ( ) { … } — function",
							"—Ⓕ– inspect_recursive ( ) { … } — function",
							"—Ⓕ– js_inspect ( ) { … } — function",
							"—Ⓕ– js_inspect_tostring ( ) { … } — function",
							"—Ⓕ– js_inspect_atom ( ) { … } — function",
							"—Ⓕ– js_inspect_init ( ) { … } — function",
							" Ⓜ  JS_INIT_MODULE … — macro object",
							" Ⓜ  JS_INIT_MODULE … — macro object"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAANBwAA4oCU4pOC4oCTIElOVDMyX0lOX1JBTkdFICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBJU19DT01QQUNUICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKTiSAgUHJvcGVydHlLZXkgOyDigJQgdHlwZWRlZgrik4kgIEluc3BlY3RPcHRpb25zIDsg4oCUIHR5cGVkZWYK4pOJICBJbnNwZWN0b3IgOyDigJQgdHlwZWRlZgrikqEgIGluc3BlY3RfdmFsdWUgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKSoSAgaW5zcGVjdF9zdHJpbmcgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKSoSAgaW5zcGVjdF9udW1iZXIgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKAlOKSu+KAkyBzY3JlZW5fd2lkdGggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX2ZyZWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIG9wdGlvbnNfb2JqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgb3B0aW9uc19oaWRkZW4gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwdXRfbmV3bGluZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGFkanVzdF9zcGFjaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcHV0X3NwYWNpbmcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwdXRfZXNjYXBlZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3RfY3VzdG9tICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9kYXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9tYXAgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X3NldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3RfYXJyYXlidWZmZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X3JlZ2V4cCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3RfbnVtYmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9zdHJpbmcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X2tleSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3RfYXRvbSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3RfZXJyb3IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X29iamVjdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3RfdmFsdWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X3JlY3Vyc2l2ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X3Rvc3RyaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF9hdG9tICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF9pbml0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0CuKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QAAAAAAAAAAOUFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7QEAAAAAAAAVAgAAAAAAAAAAAAAAAPC/"
				],
				[
					565,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
						"symkeys":
						[
							[
								813,
								827
							],
							[
								876,
								886
							],
							[
								967,
								978
							],
							[
								1408,
								1422
							],
							[
								1495,
								1504
							],
							[
								1587,
								1600
							],
							[
								1648,
								1662
							],
							[
								1710,
								1724
							],
							[
								1780,
								1792
							],
							[
								2325,
								2337
							],
							[
								3067,
								3079
							],
							[
								3307,
								3318
							],
							[
								7651,
								7665
							],
							[
								9298,
								9312
							],
							[
								9488,
								9505
							],
							[
								9682,
								9693
							],
							[
								9812,
								9826
							],
							[
								10041,
								10052
							],
							[
								10164,
								10175
							],
							[
								12634,
								12648
							],
							[
								13556,
								13568
							],
							[
								14377,
								14388
							],
							[
								16195,
								16206
							],
							[
								17621,
								17640
							],
							[
								20757,
								20771
							],
							[
								21205,
								21219
							],
							[
								23462,
								23476
							],
							[
								25323,
								25334
							],
							[
								25866,
								25878
							],
							[
								26114,
								26127
							],
							[
								27529,
								27543
							],
							[
								31018,
								31031
							],
							[
								34199,
								34216
							],
							[
								37861,
								37871
							],
							[
								38753,
								38772
							],
							[
								39269,
								39284
							],
							[
								40105,
								40120
							],
							[
								41152,
								41166
							],
							[
								41196,
								41210
							]
						],
						"symlist":
						[
							"—Ⓜ– INT32_IN_RANGE ( ) … — macro function",
							"—Ⓜ– IS_COMPACT ( ) … — macro function",
							" Ⓣ  PropertyKey ; — typedef",
							" Ⓣ  InspectOptions ; — typedef",
							" Ⓣ  Inspector ; — typedef",
							" ⒡  inspect_value ( ) ; — function declaration",
							" ⒡  inspect_string ( ) ; — function declaration",
							" ⒡  inspect_number ( ) ; — function declaration",
							"—Ⓕ– screen_width ( ) { … } — function",
							"—Ⓕ– options_init ( ) { … } — function",
							"—Ⓕ– options_free ( ) { … } — function",
							"—Ⓕ– options_get ( ) { … } — function",
							"—Ⓕ– options_object ( ) { … } — function",
							"—Ⓕ– options_hidden ( ) { … } — function",
							"—Ⓕ– options_numhidden ( ) { … } — function",
							"—Ⓕ– put_newline ( ) { … } — function",
							"—Ⓕ– adjust_spacing ( ) { … } — function",
							"—Ⓕ– put_spacing ( ) { … } — function",
							"—Ⓕ– put_escaped ( ) { … } — function",
							"—Ⓕ– inspect_custom ( ) { … } — function",
							"—Ⓕ– inspect_date ( ) { … } — function",
							"—Ⓕ– inspect_map ( ) { … } — function",
							"—Ⓕ– inspect_set ( ) { … } — function",
							"—Ⓕ– inspect_arraybuffer ( ) { … } — function",
							"—Ⓕ– inspect_regexp ( ) { … } — function",
							"—Ⓕ– inspect_number ( ) { … } — function",
							"—Ⓕ– inspect_string ( ) { … } — function",
							"—Ⓕ– inspect_key ( ) { … } — function",
							"—Ⓕ– inspect_atom ( ) { … } — function",
							"—Ⓕ– inspect_error ( ) { … } — function",
							"—Ⓕ– inspect_object ( ) { … } — function",
							"—Ⓕ– inspect_value ( ) { … } — function",
							"—Ⓕ– inspect_recursive ( ) { … } — function",
							"—Ⓕ– js_inspect ( ) { … } — function",
							"—Ⓕ– js_inspect_tostring ( ) { … } — function",
							"—Ⓕ– js_inspect_atom ( ) { … } — function",
							"—Ⓕ– js_inspect_init ( ) { … } — function",
							" Ⓜ  JS_INIT_MODULE … — macro object",
							" Ⓜ  JS_INIT_MODULE … — macro object"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAAA/BwAA4oCU4pOC4oCTIElOVDMyX0lOX1JBTkdFICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBJU19DT01QQUNUICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKTiSAgUHJvcGVydHlLZXkgOyDigJQgdHlwZWRlZgrik4kgIEluc3BlY3RPcHRpb25zIDsg4oCUIHR5cGVkZWYK4pOJICBJbnNwZWN0b3IgOyDigJQgdHlwZWRlZgrikqEgIGluc3BlY3RfdmFsdWUgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKSoSAgaW5zcGVjdF9zdHJpbmcgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKSoSAgaW5zcGVjdF9udW1iZXIgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKAlOKSu+KAkyBzY3JlZW5fd2lkdGggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX2ZyZWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIG9wdGlvbnNfb2JqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgb3B0aW9uc19oaWRkZW4gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX2hpZGRlbiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHB1dF9uZXdsaW5lICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgYWRqdXN0X3NwYWNpbmcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwdXRfc3BhY2luZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHB1dF9lc2NhcGVkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9jdXN0b20gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X2RhdGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X21hcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9hcnJheWJ1ZmZlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3RfcmVnZXhwICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9udW1iZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfa2V5ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9hdG9tICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9lcnJvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfb2JqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF92YWx1ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3RfcmVjdXJzaXZlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfdG9zdHJpbmcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X2F0b20gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QK4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAA6AUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEIHAADigJTik4LigJMgSU5UMzJfSU5fUkFOR0UgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIElTX0NPTVBBQ1QgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4pOJICBQcm9wZXJ0eUtleSA7IOKAlCB0eXBlZGVmCuKTiSAgSW5zcGVjdE9wdGlvbnMgOyDigJQgdHlwZWRlZgrik4kgIEluc3BlY3RvciA7IOKAlCB0eXBlZGVmCuKSoSAgaW5zcGVjdF92YWx1ZSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24K4pKhICBpbnNwZWN0X3N0cmluZyAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24K4pKhICBpbnNwZWN0X251bWJlciAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24K4oCU4pK74oCTIHNjcmVlbl93aWR0aCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIG9wdGlvbnNfaW5pdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIG9wdGlvbnNfZnJlZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIG9wdGlvbnNfZ2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgb3B0aW9uc19vYmplY3QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX2hpZGRlbiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIG9wdGlvbnNfbnVtaGlkZGVuICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcHV0X25ld2xpbmUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBhZGp1c3Rfc3BhY2luZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHB1dF9zcGFjaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcHV0X2VzY2FwZWQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X2N1c3RvbSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3RfZGF0ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3RfbWFwICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9zZXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X2FycmF5YnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9yZWdleHAgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X251bWJlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfc3RyaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9rZXkgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X2F0b20gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X2Vycm9yICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9vYmplY3QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X3ZhbHVlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9yZWN1cnNpdmUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF90b3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfYXRvbSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfaW5pdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdArik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0AAAAAAAAAADoBQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					566,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
						"symkeys":
						[
							[
								813,
								827
							],
							[
								876,
								886
							],
							[
								967,
								978
							],
							[
								1408,
								1422
							],
							[
								1495,
								1504
							],
							[
								1587,
								1600
							],
							[
								1648,
								1662
							],
							[
								1710,
								1724
							],
							[
								1780,
								1792
							],
							[
								2325,
								2337
							],
							[
								3067,
								3079
							],
							[
								3307,
								3318
							],
							[
								7651,
								7665
							],
							[
								9298,
								9312
							],
							[
								9488,
								9505
							],
							[
								9701,
								9712
							],
							[
								9831,
								9845
							],
							[
								10060,
								10071
							],
							[
								10183,
								10194
							],
							[
								12653,
								12667
							],
							[
								13575,
								13587
							],
							[
								14396,
								14407
							],
							[
								16214,
								16225
							],
							[
								17640,
								17659
							],
							[
								20776,
								20790
							],
							[
								21224,
								21238
							],
							[
								23481,
								23495
							],
							[
								25342,
								25353
							],
							[
								25885,
								25897
							],
							[
								26133,
								26146
							],
							[
								27548,
								27562
							],
							[
								31037,
								31050
							],
							[
								34218,
								34235
							],
							[
								37880,
								37890
							],
							[
								38772,
								38791
							],
							[
								39288,
								39303
							],
							[
								40124,
								40139
							],
							[
								41171,
								41185
							],
							[
								41215,
								41229
							]
						],
						"symlist":
						[
							"—Ⓜ– INT32_IN_RANGE ( ) … — macro function",
							"—Ⓜ– IS_COMPACT ( ) … — macro function",
							" Ⓣ  PropertyKey ; — typedef",
							" Ⓣ  InspectOptions ; — typedef",
							" Ⓣ  Inspector ; — typedef",
							" ⒡  inspect_value ( ) ; — function declaration",
							" ⒡  inspect_string ( ) ; — function declaration",
							" ⒡  inspect_number ( ) ; — function declaration",
							"—Ⓕ– screen_width ( ) { … } — function",
							"—Ⓕ– options_init ( ) { … } — function",
							"—Ⓕ– options_free ( ) { … } — function",
							"—Ⓕ– options_get ( ) { … } — function",
							"—Ⓕ– options_object ( ) { … } — function",
							"—Ⓕ– options_hidden ( ) { … } — function",
							"—Ⓕ– options_numhidden ( ) { … } — function",
							"—Ⓕ– put_newline ( ) { … } — function",
							"—Ⓕ– adjust_spacing ( ) { … } — function",
							"—Ⓕ– put_spacing ( ) { … } — function",
							"—Ⓕ– put_escaped ( ) { … } — function",
							"—Ⓕ– inspect_custom ( ) { … } — function",
							"—Ⓕ– inspect_date ( ) { … } — function",
							"—Ⓕ– inspect_map ( ) { … } — function",
							"—Ⓕ– inspect_set ( ) { … } — function",
							"—Ⓕ– inspect_arraybuffer ( ) { … } — function",
							"—Ⓕ– inspect_regexp ( ) { … } — function",
							"—Ⓕ– inspect_number ( ) { … } — function",
							"—Ⓕ– inspect_string ( ) { … } — function",
							"—Ⓕ– inspect_key ( ) { … } — function",
							"—Ⓕ– inspect_atom ( ) { … } — function",
							"—Ⓕ– inspect_error ( ) { … } — function",
							"—Ⓕ– inspect_object ( ) { … } — function",
							"—Ⓕ– inspect_value ( ) { … } — function",
							"—Ⓕ– inspect_recursive ( ) { … } — function",
							"—Ⓕ– js_inspect ( ) { … } — function",
							"—Ⓕ– js_inspect_tostring ( ) { … } — function",
							"—Ⓕ– js_inspect_atom ( ) { … } — function",
							"—Ⓕ– js_inspect_init ( ) { … } — function",
							" Ⓜ  JS_INIT_MODULE … — macro object",
							" Ⓜ  JS_INIT_MODULE … — macro object"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABCBwAA4oCU4pOC4oCTIElOVDMyX0lOX1JBTkdFICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBJU19DT01QQUNUICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKTiSAgUHJvcGVydHlLZXkgOyDigJQgdHlwZWRlZgrik4kgIEluc3BlY3RPcHRpb25zIDsg4oCUIHR5cGVkZWYK4pOJICBJbnNwZWN0b3IgOyDigJQgdHlwZWRlZgrikqEgIGluc3BlY3RfdmFsdWUgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKSoSAgaW5zcGVjdF9zdHJpbmcgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKSoSAgaW5zcGVjdF9udW1iZXIgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKAlOKSu+KAkyBzY3JlZW5fd2lkdGggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX2ZyZWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIG9wdGlvbnNfb2JqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgb3B0aW9uc19oaWRkZW4gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX251bWhpZGRlbiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHB1dF9uZXdsaW5lICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgYWRqdXN0X3NwYWNpbmcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwdXRfc3BhY2luZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHB1dF9lc2NhcGVkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9jdXN0b20gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X2RhdGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X21hcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9hcnJheWJ1ZmZlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3RfcmVnZXhwICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9udW1iZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfa2V5ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9hdG9tICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9lcnJvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfb2JqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF92YWx1ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3RfcmVjdXJzaXZlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfdG9zdHJpbmcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X2F0b20gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QK4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAA6AUAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					567,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/property-enumeration.c",
						"symkeys":
						[
							[
								196,
								221
							],
							[
								696,
								721
							],
							[
								1446,
								1480
							],
							[
								2545,
								2571
							],
							[
								2898,
								2922
							],
							[
								3266,
								3296
							],
							[
								3845,
								3868
							],
							[
								4306,
								4332
							],
							[
								4674,
								4706
							],
							[
								4976,
								5002
							],
							[
								5386,
								5409
							],
							[
								5763,
								5790
							],
							[
								6025,
								6048
							],
							[
								6203,
								6230
							],
							[
								6785,
								6808
							],
							[
								7163,
								7185
							],
							[
								7407,
								7431
							]
						],
						"symlist":
						[
							"—Ⓕ– property_enumeration_init ( ) { … } — function",
							"—Ⓕ– property_enumeration_dump ( ) { … } — function",
							"—Ⓕ– property_enumeration_path_tostring ( ) { … } — function",
							"—Ⓕ– property_enumeration_reset ( ) { … } — function",
							"—Ⓕ– property_enumeration_key ( ) { … } — function",
							"—Ⓕ– property_enumeration_predicate ( ) { … } — function",
							"—Ⓕ– property_recursion_path ( ) { … } — function",
							"—Ⓕ– property_recursion_pathstr ( ) { … } — function",
							"—Ⓕ– property_recursion_pathstr_value ( ) { … } — function",
							"—Ⓕ– property_recursion_dumpall ( ) { … } — function",
							"—Ⓕ– property_recursion_skip ( ) { … } — function",
							"—Ⓕ– property_recursion_insideof ( ) { … } — function",
							"—Ⓕ– property_recursion_free ( ) { … } — function",
							"—Ⓕ– property_recursion_circular ( ) { … } — function",
							"—Ⓕ– property_recursion_push ( ) { … } — function",
							"—Ⓕ– property_recursion_pop ( ) { … } — function",
							"—Ⓕ– property_recursion_enter ( ) { … } — function"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABCBwAA4oCU4pOC4oCTIElOVDMyX0lOX1JBTkdFICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBJU19DT01QQUNUICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKTiSAgUHJvcGVydHlLZXkgOyDigJQgdHlwZWRlZgrik4kgIEluc3BlY3RPcHRpb25zIDsg4oCUIHR5cGVkZWYK4pOJICBJbnNwZWN0b3IgOyDigJQgdHlwZWRlZgrikqEgIGluc3BlY3RfdmFsdWUgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKSoSAgaW5zcGVjdF9zdHJpbmcgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKSoSAgaW5zcGVjdF9udW1iZXIgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKAlOKSu+KAkyBzY3JlZW5fd2lkdGggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX2ZyZWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIG9wdGlvbnNfb2JqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgb3B0aW9uc19oaWRkZW4gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX251bWhpZGRlbiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHB1dF9uZXdsaW5lICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgYWRqdXN0X3NwYWNpbmcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwdXRfc3BhY2luZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHB1dF9lc2NhcGVkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9jdXN0b20gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X2RhdGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X21hcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9hcnJheWJ1ZmZlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3RfcmVnZXhwICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9udW1iZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfa2V5ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9hdG9tICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9lcnJvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfb2JqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF92YWx1ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3RfcmVjdXJzaXZlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfdG9zdHJpbmcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X2F0b20gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QK4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAAcQMAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					568,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
						"symkeys":
						[
							[
								813,
								827
							],
							[
								876,
								886
							],
							[
								967,
								978
							],
							[
								1408,
								1422
							],
							[
								1495,
								1504
							],
							[
								1587,
								1600
							],
							[
								1648,
								1662
							],
							[
								1710,
								1724
							],
							[
								1780,
								1792
							],
							[
								2325,
								2337
							],
							[
								3067,
								3079
							],
							[
								3307,
								3318
							],
							[
								7651,
								7665
							],
							[
								9298,
								9312
							],
							[
								9488,
								9505
							],
							[
								9656,
								9667
							],
							[
								9786,
								9800
							],
							[
								10015,
								10026
							],
							[
								10138,
								10149
							],
							[
								12608,
								12622
							],
							[
								13530,
								13542
							],
							[
								14351,
								14362
							],
							[
								16169,
								16180
							],
							[
								17595,
								17614
							],
							[
								20731,
								20745
							],
							[
								21179,
								21193
							],
							[
								23436,
								23450
							],
							[
								25297,
								25308
							],
							[
								25840,
								25852
							],
							[
								26088,
								26101
							],
							[
								27503,
								27517
							],
							[
								30992,
								31005
							],
							[
								34173,
								34190
							],
							[
								37835,
								37845
							],
							[
								38727,
								38746
							],
							[
								39243,
								39258
							],
							[
								40079,
								40094
							],
							[
								41126,
								41140
							],
							[
								41170,
								41184
							]
						],
						"symlist":
						[
							"—Ⓜ– INT32_IN_RANGE ( ) … — macro function",
							"—Ⓜ– IS_COMPACT ( ) … — macro function",
							" Ⓣ  PropertyKey ; — typedef",
							" Ⓣ  InspectOptions ; — typedef",
							" Ⓣ  Inspector ; — typedef",
							" ⒡  inspect_value ( ) ; — function declaration",
							" ⒡  inspect_string ( ) ; — function declaration",
							" ⒡  inspect_number ( ) ; — function declaration",
							"—Ⓕ– screen_width ( ) { … } — function",
							"—Ⓕ– options_init ( ) { … } — function",
							"—Ⓕ– options_free ( ) { … } — function",
							"—Ⓕ– options_get ( ) { … } — function",
							"—Ⓕ– options_object ( ) { … } — function",
							"—Ⓕ– options_hidden ( ) { … } — function",
							"—Ⓕ– options_numhidden ( ) { … } — function",
							"—Ⓕ– put_newline ( ) { … } — function",
							"—Ⓕ– adjust_spacing ( ) { … } — function",
							"—Ⓕ– put_spacing ( ) { … } — function",
							"—Ⓕ– put_escaped ( ) { … } — function",
							"—Ⓕ– inspect_custom ( ) { … } — function",
							"—Ⓕ– inspect_date ( ) { … } — function",
							"—Ⓕ– inspect_map ( ) { … } — function",
							"—Ⓕ– inspect_set ( ) { … } — function",
							"—Ⓕ– inspect_arraybuffer ( ) { … } — function",
							"—Ⓕ– inspect_regexp ( ) { … } — function",
							"—Ⓕ– inspect_number ( ) { … } — function",
							"—Ⓕ– inspect_string ( ) { … } — function",
							"—Ⓕ– inspect_key ( ) { … } — function",
							"—Ⓕ– inspect_atom ( ) { … } — function",
							"—Ⓕ– inspect_error ( ) { … } — function",
							"—Ⓕ– inspect_object ( ) { … } — function",
							"—Ⓕ– inspect_value ( ) { … } — function",
							"—Ⓕ– inspect_recursive ( ) { … } — function",
							"—Ⓕ– js_inspect ( ) { … } — function",
							"—Ⓕ– js_inspect_tostring ( ) { … } — function",
							"—Ⓕ– js_inspect_atom ( ) { … } — function",
							"—Ⓕ– js_inspect_init ( ) { … } — function",
							" Ⓜ  JS_INIT_MODULE … — macro object",
							" Ⓜ  JS_INIT_MODULE … — macro object"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAbBAAA4oCU4pK74oCTIHByb3BlcnR5X2VudW1lcmF0aW9uX2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwcm9wZXJ0eV9lbnVtZXJhdGlvbl9kdW1wICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcHJvcGVydHlfZW51bWVyYXRpb25fcGF0aF90b3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHByb3BlcnR5X2VudW1lcmF0aW9uX3Jlc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcHJvcGVydHlfZW51bWVyYXRpb25fa2V5ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcHJvcGVydHlfZW51bWVyYXRpb25fcHJlZGljYXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcHJvcGVydHlfcmVjdXJzaW9uX3BhdGggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwcm9wZXJ0eV9yZWN1cnNpb25fcGF0aHN0ciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHByb3BlcnR5X3JlY3Vyc2lvbl9wYXRoc3RyX3ZhbHVlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcHJvcGVydHlfcmVjdXJzaW9uX2R1bXBhbGwgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwcm9wZXJ0eV9yZWN1cnNpb25fc2tpcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHByb3BlcnR5X3JlY3Vyc2lvbl9pbnNpZGVvZiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHByb3BlcnR5X3JlY3Vyc2lvbl9mcmVlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcHJvcGVydHlfcmVjdXJzaW9uX2NpcmN1bGFyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcHJvcGVydHlfcmVjdXJzaW9uX3B1c2ggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwcm9wZXJ0eV9yZWN1cnNpb25fcG9wICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcHJvcGVydHlfcmVjdXJzaW9uX2VudGVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgAAAAAAAAAA6AUAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					569,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/property-enumeration.c",
						"symkeys":
						[
							[
								196,
								221
							],
							[
								696,
								721
							],
							[
								1446,
								1480
							],
							[
								2545,
								2571
							],
							[
								2898,
								2922
							],
							[
								3266,
								3296
							],
							[
								3845,
								3868
							],
							[
								4306,
								4332
							],
							[
								4674,
								4706
							],
							[
								4976,
								5002
							],
							[
								5386,
								5409
							],
							[
								5763,
								5790
							],
							[
								6025,
								6048
							],
							[
								6203,
								6230
							],
							[
								6785,
								6808
							],
							[
								7163,
								7185
							],
							[
								7407,
								7431
							]
						],
						"symlist":
						[
							"—Ⓕ– property_enumeration_init ( ) { … } — function",
							"—Ⓕ– property_enumeration_dump ( ) { … } — function",
							"—Ⓕ– property_enumeration_path_tostring ( ) { … } — function",
							"—Ⓕ– property_enumeration_reset ( ) { … } — function",
							"—Ⓕ– property_enumeration_key ( ) { … } — function",
							"—Ⓕ– property_enumeration_predicate ( ) { … } — function",
							"—Ⓕ– property_recursion_path ( ) { … } — function",
							"—Ⓕ– property_recursion_pathstr ( ) { … } — function",
							"—Ⓕ– property_recursion_pathstr_value ( ) { … } — function",
							"—Ⓕ– property_recursion_dumpall ( ) { … } — function",
							"—Ⓕ– property_recursion_skip ( ) { … } — function",
							"—Ⓕ– property_recursion_insideof ( ) { … } — function",
							"—Ⓕ– property_recursion_free ( ) { … } — function",
							"—Ⓕ– property_recursion_circular ( ) { … } — function",
							"—Ⓕ– property_recursion_push ( ) { … } — function",
							"—Ⓕ– property_recursion_pop ( ) { … } — function",
							"—Ⓕ– property_recursion_enter ( ) { … } — function"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABCBwAA4oCU4pOC4oCTIElOVDMyX0lOX1JBTkdFICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBJU19DT01QQUNUICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKTiSAgUHJvcGVydHlLZXkgOyDigJQgdHlwZWRlZgrik4kgIEluc3BlY3RPcHRpb25zIDsg4oCUIHR5cGVkZWYK4pOJICBJbnNwZWN0b3IgOyDigJQgdHlwZWRlZgrikqEgIGluc3BlY3RfdmFsdWUgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKSoSAgaW5zcGVjdF9zdHJpbmcgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKSoSAgaW5zcGVjdF9udW1iZXIgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKAlOKSu+KAkyBzY3JlZW5fd2lkdGggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX2ZyZWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIG9wdGlvbnNfb2JqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgb3B0aW9uc19oaWRkZW4gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX251bWhpZGRlbiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHB1dF9uZXdsaW5lICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgYWRqdXN0X3NwYWNpbmcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwdXRfc3BhY2luZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHB1dF9lc2NhcGVkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9jdXN0b20gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X2RhdGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X21hcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9hcnJheWJ1ZmZlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3RfcmVnZXhwICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9udW1iZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfa2V5ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9hdG9tICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9lcnJvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfb2JqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF92YWx1ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3RfcmVjdXJzaXZlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfdG9zdHJpbmcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X2F0b20gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QK4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAAcQMAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					570,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
						"symkeys":
						[
							[
								813,
								827
							],
							[
								876,
								886
							],
							[
								967,
								978
							],
							[
								1408,
								1422
							],
							[
								1495,
								1504
							],
							[
								1587,
								1600
							],
							[
								1648,
								1662
							],
							[
								1710,
								1724
							],
							[
								1780,
								1792
							],
							[
								2325,
								2337
							],
							[
								3067,
								3079
							],
							[
								3307,
								3318
							],
							[
								7651,
								7665
							],
							[
								9298,
								9312
							],
							[
								9488,
								9505
							],
							[
								9656,
								9667
							],
							[
								9786,
								9800
							],
							[
								10015,
								10026
							],
							[
								10138,
								10149
							],
							[
								12608,
								12622
							],
							[
								13530,
								13542
							],
							[
								14351,
								14362
							],
							[
								16169,
								16180
							],
							[
								17595,
								17614
							],
							[
								20731,
								20745
							],
							[
								21179,
								21193
							],
							[
								23436,
								23450
							],
							[
								25297,
								25308
							],
							[
								25840,
								25852
							],
							[
								26088,
								26101
							],
							[
								27503,
								27517
							],
							[
								30992,
								31005
							],
							[
								34173,
								34190
							],
							[
								37835,
								37845
							],
							[
								38727,
								38746
							],
							[
								39243,
								39258
							],
							[
								40079,
								40094
							],
							[
								41126,
								41140
							],
							[
								41170,
								41184
							]
						],
						"symlist":
						[
							"—Ⓜ– INT32_IN_RANGE ( ) … — macro function",
							"—Ⓜ– IS_COMPACT ( ) … — macro function",
							" Ⓣ  PropertyKey ; — typedef",
							" Ⓣ  InspectOptions ; — typedef",
							" Ⓣ  Inspector ; — typedef",
							" ⒡  inspect_value ( ) ; — function declaration",
							" ⒡  inspect_string ( ) ; — function declaration",
							" ⒡  inspect_number ( ) ; — function declaration",
							"—Ⓕ– screen_width ( ) { … } — function",
							"—Ⓕ– options_init ( ) { … } — function",
							"—Ⓕ– options_free ( ) { … } — function",
							"—Ⓕ– options_get ( ) { … } — function",
							"—Ⓕ– options_object ( ) { … } — function",
							"—Ⓕ– options_hidden ( ) { … } — function",
							"—Ⓕ– options_numhidden ( ) { … } — function",
							"—Ⓕ– put_newline ( ) { … } — function",
							"—Ⓕ– adjust_spacing ( ) { … } — function",
							"—Ⓕ– put_spacing ( ) { … } — function",
							"—Ⓕ– put_escaped ( ) { … } — function",
							"—Ⓕ– inspect_custom ( ) { … } — function",
							"—Ⓕ– inspect_date ( ) { … } — function",
							"—Ⓕ– inspect_map ( ) { … } — function",
							"—Ⓕ– inspect_set ( ) { … } — function",
							"—Ⓕ– inspect_arraybuffer ( ) { … } — function",
							"—Ⓕ– inspect_regexp ( ) { … } — function",
							"—Ⓕ– inspect_number ( ) { … } — function",
							"—Ⓕ– inspect_string ( ) { … } — function",
							"—Ⓕ– inspect_key ( ) { … } — function",
							"—Ⓕ– inspect_atom ( ) { … } — function",
							"—Ⓕ– inspect_error ( ) { … } — function",
							"—Ⓕ– inspect_object ( ) { … } — function",
							"—Ⓕ– inspect_value ( ) { … } — function",
							"—Ⓕ– inspect_recursive ( ) { … } — function",
							"—Ⓕ– js_inspect ( ) { … } — function",
							"—Ⓕ– js_inspect_tostring ( ) { … } — function",
							"—Ⓕ– js_inspect_atom ( ) { … } — function",
							"—Ⓕ– js_inspect_init ( ) { … } — function",
							" Ⓜ  JS_INIT_MODULE … — macro object",
							" Ⓜ  JS_INIT_MODULE … — macro object"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAbBAAA4oCU4pK74oCTIHByb3BlcnR5X2VudW1lcmF0aW9uX2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwcm9wZXJ0eV9lbnVtZXJhdGlvbl9kdW1wICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcHJvcGVydHlfZW51bWVyYXRpb25fcGF0aF90b3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHByb3BlcnR5X2VudW1lcmF0aW9uX3Jlc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcHJvcGVydHlfZW51bWVyYXRpb25fa2V5ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcHJvcGVydHlfZW51bWVyYXRpb25fcHJlZGljYXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcHJvcGVydHlfcmVjdXJzaW9uX3BhdGggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwcm9wZXJ0eV9yZWN1cnNpb25fcGF0aHN0ciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHByb3BlcnR5X3JlY3Vyc2lvbl9wYXRoc3RyX3ZhbHVlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcHJvcGVydHlfcmVjdXJzaW9uX2R1bXBhbGwgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwcm9wZXJ0eV9yZWN1cnNpb25fc2tpcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHByb3BlcnR5X3JlY3Vyc2lvbl9pbnNpZGVvZiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHByb3BlcnR5X3JlY3Vyc2lvbl9mcmVlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcHJvcGVydHlfcmVjdXJzaW9uX2NpcmN1bGFyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcHJvcGVydHlfcmVjdXJzaW9uX3B1c2ggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwcm9wZXJ0eV9yZWN1cnNpb25fcG9wICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcHJvcGVydHlfcmVjdXJzaW9uX2VudGVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgAAAAAAAAAA6AUAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					571,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
						"symkeys":
						[
							[
								813,
								827
							],
							[
								876,
								886
							],
							[
								967,
								978
							],
							[
								1408,
								1422
							],
							[
								1495,
								1504
							],
							[
								1587,
								1600
							],
							[
								1648,
								1662
							],
							[
								1710,
								1724
							],
							[
								1780,
								1792
							],
							[
								2325,
								2337
							],
							[
								3067,
								3079
							],
							[
								3307,
								3318
							],
							[
								7651,
								7665
							],
							[
								9298,
								9312
							],
							[
								9488,
								9505
							],
							[
								9691,
								9702
							],
							[
								9821,
								9835
							],
							[
								10050,
								10061
							],
							[
								10173,
								10184
							],
							[
								12643,
								12657
							],
							[
								13565,
								13577
							],
							[
								14386,
								14397
							],
							[
								16204,
								16215
							],
							[
								17630,
								17649
							],
							[
								20766,
								20780
							],
							[
								21214,
								21228
							],
							[
								23471,
								23485
							],
							[
								25332,
								25343
							],
							[
								25875,
								25887
							],
							[
								26123,
								26136
							],
							[
								27538,
								27552
							],
							[
								31027,
								31040
							],
							[
								34208,
								34225
							],
							[
								37870,
								37880
							],
							[
								38762,
								38781
							],
							[
								39278,
								39293
							],
							[
								40114,
								40129
							],
							[
								41161,
								41175
							],
							[
								41205,
								41219
							]
						],
						"symlist":
						[
							"—Ⓜ– INT32_IN_RANGE ( ) … — macro function",
							"—Ⓜ– IS_COMPACT ( ) … — macro function",
							" Ⓣ  PropertyKey ; — typedef",
							" Ⓣ  InspectOptions ; — typedef",
							" Ⓣ  Inspector ; — typedef",
							" ⒡  inspect_value ( ) ; — function declaration",
							" ⒡  inspect_string ( ) ; — function declaration",
							" ⒡  inspect_number ( ) ; — function declaration",
							"—Ⓕ– screen_width ( ) { … } — function",
							"—Ⓕ– options_init ( ) { … } — function",
							"—Ⓕ– options_free ( ) { … } — function",
							"—Ⓕ– options_get ( ) { … } — function",
							"—Ⓕ– options_object ( ) { … } — function",
							"—Ⓕ– options_hidden ( ) { … } — function",
							"—Ⓕ– options_numhidden ( ) { … } — function",
							"—Ⓕ– put_newline ( ) { … } — function",
							"—Ⓕ– adjust_spacing ( ) { … } — function",
							"—Ⓕ– put_spacing ( ) { … } — function",
							"—Ⓕ– put_escaped ( ) { … } — function",
							"—Ⓕ– inspect_custom ( ) { … } — function",
							"—Ⓕ– inspect_date ( ) { … } — function",
							"—Ⓕ– inspect_map ( ) { … } — function",
							"—Ⓕ– inspect_set ( ) { … } — function",
							"—Ⓕ– inspect_arraybuffer ( ) { … } — function",
							"—Ⓕ– inspect_regexp ( ) { … } — function",
							"—Ⓕ– inspect_number ( ) { … } — function",
							"—Ⓕ– inspect_string ( ) { … } — function",
							"—Ⓕ– inspect_key ( ) { … } — function",
							"—Ⓕ– inspect_atom ( ) { … } — function",
							"—Ⓕ– inspect_error ( ) { … } — function",
							"—Ⓕ– inspect_object ( ) { … } — function",
							"—Ⓕ– inspect_value ( ) { … } — function",
							"—Ⓕ– inspect_recursive ( ) { … } — function",
							"—Ⓕ– js_inspect ( ) { … } — function",
							"—Ⓕ– js_inspect_tostring ( ) { … } — function",
							"—Ⓕ– js_inspect_atom ( ) { … } — function",
							"—Ⓕ– js_inspect_init ( ) { … } — function",
							" Ⓜ  JS_INIT_MODULE … — macro object",
							" Ⓜ  JS_INIT_MODULE … — macro object"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAABCBwAA4oCU4pOC4oCTIElOVDMyX0lOX1JBTkdFICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBJU19DT01QQUNUICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKTiSAgUHJvcGVydHlLZXkgOyDigJQgdHlwZWRlZgrik4kgIEluc3BlY3RPcHRpb25zIDsg4oCUIHR5cGVkZWYK4pOJICBJbnNwZWN0b3IgOyDigJQgdHlwZWRlZgrikqEgIGluc3BlY3RfdmFsdWUgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKSoSAgaW5zcGVjdF9zdHJpbmcgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKSoSAgaW5zcGVjdF9udW1iZXIgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKAlOKSu+KAkyBzY3JlZW5fd2lkdGggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX2ZyZWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIG9wdGlvbnNfb2JqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgb3B0aW9uc19oaWRkZW4gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX251bWhpZGRlbiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHB1dF9uZXdsaW5lICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgYWRqdXN0X3NwYWNpbmcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwdXRfc3BhY2luZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHB1dF9lc2NhcGVkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9jdXN0b20gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X2RhdGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X21hcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9hcnJheWJ1ZmZlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3RfcmVnZXhwICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9udW1iZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfa2V5ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9hdG9tICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9lcnJvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfb2JqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF92YWx1ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3RfcmVjdXJzaXZlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfdG9zdHJpbmcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X2F0b20gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QK4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAA6AUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEIHAADigJTik4LigJMgSU5UMzJfSU5fUkFOR0UgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIElTX0NPTVBBQ1QgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4pOJICBQcm9wZXJ0eUtleSA7IOKAlCB0eXBlZGVmCuKTiSAgSW5zcGVjdE9wdGlvbnMgOyDigJQgdHlwZWRlZgrik4kgIEluc3BlY3RvciA7IOKAlCB0eXBlZGVmCuKSoSAgaW5zcGVjdF92YWx1ZSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24K4pKhICBpbnNwZWN0X3N0cmluZyAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24K4pKhICBpbnNwZWN0X251bWJlciAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24K4oCU4pK74oCTIHNjcmVlbl93aWR0aCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIG9wdGlvbnNfaW5pdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIG9wdGlvbnNfZnJlZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIG9wdGlvbnNfZ2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgb3B0aW9uc19vYmplY3QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX2hpZGRlbiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIG9wdGlvbnNfbnVtaGlkZGVuICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcHV0X25ld2xpbmUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBhZGp1c3Rfc3BhY2luZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHB1dF9zcGFjaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcHV0X2VzY2FwZWQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X2N1c3RvbSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3RfZGF0ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3RfbWFwICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9zZXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X2FycmF5YnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9yZWdleHAgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X251bWJlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfc3RyaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9rZXkgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X2F0b20gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X2Vycm9yICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9vYmplY3QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X3ZhbHVlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9yZWN1cnNpdmUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF90b3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfYXRvbSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfaW5pdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdArik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0AAAAAAAAAADoBQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					572,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
						"symkeys":
						[
							[
								813,
								827
							],
							[
								876,
								886
							],
							[
								967,
								978
							],
							[
								1408,
								1422
							],
							[
								1495,
								1504
							],
							[
								1587,
								1600
							],
							[
								1648,
								1662
							],
							[
								1710,
								1724
							],
							[
								1780,
								1792
							],
							[
								2325,
								2337
							],
							[
								3067,
								3079
							],
							[
								3307,
								3318
							],
							[
								7651,
								7665
							],
							[
								9298,
								9312
							],
							[
								9488,
								9505
							],
							[
								9690,
								9701
							],
							[
								9820,
								9834
							],
							[
								10049,
								10060
							],
							[
								10172,
								10183
							],
							[
								12642,
								12656
							],
							[
								13564,
								13576
							],
							[
								14385,
								14396
							],
							[
								16203,
								16214
							],
							[
								17629,
								17648
							],
							[
								20765,
								20779
							],
							[
								21213,
								21227
							],
							[
								23470,
								23484
							],
							[
								25331,
								25342
							],
							[
								25874,
								25886
							],
							[
								26122,
								26135
							],
							[
								27537,
								27551
							],
							[
								31026,
								31039
							],
							[
								34207,
								34224
							],
							[
								37869,
								37879
							],
							[
								38761,
								38780
							],
							[
								39277,
								39292
							],
							[
								40113,
								40128
							],
							[
								41160,
								41174
							],
							[
								41204,
								41218
							]
						],
						"symlist":
						[
							"—Ⓜ– INT32_IN_RANGE ( ) … — macro function",
							"—Ⓜ– IS_COMPACT ( ) … — macro function",
							" Ⓣ  PropertyKey ; — typedef",
							" Ⓣ  InspectOptions ; — typedef",
							" Ⓣ  Inspector ; — typedef",
							" ⒡  inspect_value ( ) ; — function declaration",
							" ⒡  inspect_string ( ) ; — function declaration",
							" ⒡  inspect_number ( ) ; — function declaration",
							"—Ⓕ– screen_width ( ) { … } — function",
							"—Ⓕ– options_init ( ) { … } — function",
							"—Ⓕ– options_free ( ) { … } — function",
							"—Ⓕ– options_get ( ) { … } — function",
							"—Ⓕ– options_object ( ) { … } — function",
							"—Ⓕ– options_hidden ( ) { … } — function",
							"—Ⓕ– options_numhidden ( ) { … } — function",
							"—Ⓕ– put_newline ( ) { … } — function",
							"—Ⓕ– adjust_spacing ( ) { … } — function",
							"—Ⓕ– put_spacing ( ) { … } — function",
							"—Ⓕ– put_escaped ( ) { … } — function",
							"—Ⓕ– inspect_custom ( ) { … } — function",
							"—Ⓕ– inspect_date ( ) { … } — function",
							"—Ⓕ– inspect_map ( ) { … } — function",
							"—Ⓕ– inspect_set ( ) { … } — function",
							"—Ⓕ– inspect_arraybuffer ( ) { … } — function",
							"—Ⓕ– inspect_regexp ( ) { … } — function",
							"—Ⓕ– inspect_number ( ) { … } — function",
							"—Ⓕ– inspect_string ( ) { … } — function",
							"—Ⓕ– inspect_key ( ) { … } — function",
							"—Ⓕ– inspect_atom ( ) { … } — function",
							"—Ⓕ– inspect_error ( ) { … } — function",
							"—Ⓕ– inspect_object ( ) { … } — function",
							"—Ⓕ– inspect_value ( ) { … } — function",
							"—Ⓕ– inspect_recursive ( ) { … } — function",
							"—Ⓕ– js_inspect ( ) { … } — function",
							"—Ⓕ– js_inspect_tostring ( ) { … } — function",
							"—Ⓕ– js_inspect_atom ( ) { … } — function",
							"—Ⓕ– js_inspect_init ( ) { … } — function",
							" Ⓜ  JS_INIT_MODULE … — macro object",
							" Ⓜ  JS_INIT_MODULE … — macro object"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABCBwAA4oCU4pOC4oCTIElOVDMyX0lOX1JBTkdFICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBJU19DT01QQUNUICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKTiSAgUHJvcGVydHlLZXkgOyDigJQgdHlwZWRlZgrik4kgIEluc3BlY3RPcHRpb25zIDsg4oCUIHR5cGVkZWYK4pOJICBJbnNwZWN0b3IgOyDigJQgdHlwZWRlZgrikqEgIGluc3BlY3RfdmFsdWUgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKSoSAgaW5zcGVjdF9zdHJpbmcgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKSoSAgaW5zcGVjdF9udW1iZXIgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKAlOKSu+KAkyBzY3JlZW5fd2lkdGggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX2ZyZWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIG9wdGlvbnNfb2JqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgb3B0aW9uc19oaWRkZW4gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX251bWhpZGRlbiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHB1dF9uZXdsaW5lICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgYWRqdXN0X3NwYWNpbmcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwdXRfc3BhY2luZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHB1dF9lc2NhcGVkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9jdXN0b20gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X2RhdGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X21hcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9hcnJheWJ1ZmZlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3RfcmVnZXhwICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9udW1iZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfa2V5ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9hdG9tICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9lcnJvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfb2JqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF92YWx1ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3RfcmVjdXJzaXZlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfdG9zdHJpbmcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X2F0b20gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QK4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAA6AUAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					573,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABCBwAA4oCU4pOC4oCTIElOVDMyX0lOX1JBTkdFICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBJU19DT01QQUNUICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKTiSAgUHJvcGVydHlLZXkgOyDigJQgdHlwZWRlZgrik4kgIEluc3BlY3RPcHRpb25zIDsg4oCUIHR5cGVkZWYK4pOJICBJbnNwZWN0b3IgOyDigJQgdHlwZWRlZgrikqEgIGluc3BlY3RfdmFsdWUgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKSoSAgaW5zcGVjdF9zdHJpbmcgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKSoSAgaW5zcGVjdF9udW1iZXIgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKAlOKSu+KAkyBzY3JlZW5fd2lkdGggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX2ZyZWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIG9wdGlvbnNfb2JqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgb3B0aW9uc19oaWRkZW4gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX251bWhpZGRlbiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHB1dF9uZXdsaW5lICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgYWRqdXN0X3NwYWNpbmcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwdXRfc3BhY2luZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHB1dF9lc2NhcGVkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9jdXN0b20gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X2RhdGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X21hcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9hcnJheWJ1ZmZlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3RfcmVnZXhwICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9udW1iZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfa2V5ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9hdG9tICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9lcnJvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfb2JqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF92YWx1ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3RfcmVjdXJzaXZlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfdG9zdHJpbmcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X2F0b20gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QK4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					574,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
						"symkeys":
						[
							[
								813,
								827
							],
							[
								876,
								886
							],
							[
								967,
								978
							],
							[
								1408,
								1422
							],
							[
								1495,
								1504
							],
							[
								1587,
								1600
							],
							[
								1648,
								1662
							],
							[
								1710,
								1724
							],
							[
								1780,
								1792
							],
							[
								2325,
								2337
							],
							[
								3067,
								3079
							],
							[
								3307,
								3318
							],
							[
								7651,
								7665
							],
							[
								9298,
								9312
							],
							[
								9488,
								9505
							],
							[
								9690,
								9701
							],
							[
								9820,
								9834
							],
							[
								10049,
								10060
							],
							[
								10172,
								10183
							],
							[
								12642,
								12656
							],
							[
								13564,
								13576
							],
							[
								14385,
								14396
							],
							[
								16203,
								16214
							],
							[
								17629,
								17648
							],
							[
								20765,
								20779
							],
							[
								21213,
								21227
							],
							[
								23470,
								23484
							],
							[
								25331,
								25342
							],
							[
								25874,
								25886
							],
							[
								26122,
								26135
							],
							[
								27537,
								27551
							],
							[
								31026,
								31039
							],
							[
								34207,
								34224
							],
							[
								37869,
								37879
							],
							[
								38761,
								38780
							],
							[
								39277,
								39292
							],
							[
								40113,
								40128
							],
							[
								41160,
								41174
							],
							[
								41204,
								41218
							]
						],
						"symlist":
						[
							"—Ⓜ– INT32_IN_RANGE ( ) … — macro function",
							"—Ⓜ– IS_COMPACT ( ) … — macro function",
							" Ⓣ  PropertyKey ; — typedef",
							" Ⓣ  InspectOptions ; — typedef",
							" Ⓣ  Inspector ; — typedef",
							" ⒡  inspect_value ( ) ; — function declaration",
							" ⒡  inspect_string ( ) ; — function declaration",
							" ⒡  inspect_number ( ) ; — function declaration",
							"—Ⓕ– screen_width ( ) { … } — function",
							"—Ⓕ– options_init ( ) { … } — function",
							"—Ⓕ– options_free ( ) { … } — function",
							"—Ⓕ– options_get ( ) { … } — function",
							"—Ⓕ– options_object ( ) { … } — function",
							"—Ⓕ– options_hidden ( ) { … } — function",
							"—Ⓕ– options_numhidden ( ) { … } — function",
							"—Ⓕ– put_newline ( ) { … } — function",
							"—Ⓕ– adjust_spacing ( ) { … } — function",
							"—Ⓕ– put_spacing ( ) { … } — function",
							"—Ⓕ– put_escaped ( ) { … } — function",
							"—Ⓕ– inspect_custom ( ) { … } — function",
							"—Ⓕ– inspect_date ( ) { … } — function",
							"—Ⓕ– inspect_map ( ) { … } — function",
							"—Ⓕ– inspect_set ( ) { … } — function",
							"—Ⓕ– inspect_arraybuffer ( ) { … } — function",
							"—Ⓕ– inspect_regexp ( ) { … } — function",
							"—Ⓕ– inspect_number ( ) { … } — function",
							"—Ⓕ– inspect_string ( ) { … } — function",
							"—Ⓕ– inspect_key ( ) { … } — function",
							"—Ⓕ– inspect_atom ( ) { … } — function",
							"—Ⓕ– inspect_error ( ) { … } — function",
							"—Ⓕ– inspect_object ( ) { … } — function",
							"—Ⓕ– inspect_value ( ) { … } — function",
							"—Ⓕ– inspect_recursive ( ) { … } — function",
							"—Ⓕ– js_inspect ( ) { … } — function",
							"—Ⓕ– js_inspect_tostring ( ) { … } — function",
							"—Ⓕ– js_inspect_atom ( ) { … } — function",
							"—Ⓕ– js_inspect_init ( ) { … } — function",
							" Ⓜ  JS_INIT_MODULE … — macro object",
							" Ⓜ  JS_INIT_MODULE … — macro object"
						]
					},
					"AQAAAAAAAAAAAAAA6AUAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					575,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
						"symkeys":
						[
							[
								813,
								827
							],
							[
								876,
								886
							],
							[
								967,
								978
							],
							[
								1408,
								1422
							],
							[
								1495,
								1504
							],
							[
								1587,
								1600
							],
							[
								1648,
								1662
							],
							[
								1710,
								1724
							],
							[
								1780,
								1792
							],
							[
								2325,
								2337
							],
							[
								3067,
								3079
							],
							[
								3307,
								3318
							],
							[
								7651,
								7665
							],
							[
								9298,
								9312
							],
							[
								9488,
								9505
							],
							[
								9690,
								9701
							],
							[
								9820,
								9834
							],
							[
								10049,
								10060
							],
							[
								10172,
								10183
							],
							[
								12642,
								12656
							],
							[
								13564,
								13576
							],
							[
								14385,
								14396
							],
							[
								16203,
								16214
							],
							[
								17629,
								17648
							],
							[
								20765,
								20779
							],
							[
								21213,
								21227
							],
							[
								23470,
								23484
							],
							[
								25331,
								25342
							],
							[
								25874,
								25886
							],
							[
								26122,
								26135
							],
							[
								27537,
								27551
							],
							[
								31026,
								31039
							],
							[
								34207,
								34224
							],
							[
								37927,
								37937
							],
							[
								38819,
								38838
							],
							[
								39335,
								39350
							],
							[
								40171,
								40186
							],
							[
								41218,
								41232
							],
							[
								41262,
								41276
							]
						],
						"symlist":
						[
							"—Ⓜ– INT32_IN_RANGE ( ) … — macro function",
							"—Ⓜ– IS_COMPACT ( ) … — macro function",
							" Ⓣ  PropertyKey ; — typedef",
							" Ⓣ  InspectOptions ; — typedef",
							" Ⓣ  Inspector ; — typedef",
							" ⒡  inspect_value ( ) ; — function declaration",
							" ⒡  inspect_string ( ) ; — function declaration",
							" ⒡  inspect_number ( ) ; — function declaration",
							"—Ⓕ– screen_width ( ) { … } — function",
							"—Ⓕ– options_init ( ) { … } — function",
							"—Ⓕ– options_free ( ) { … } — function",
							"—Ⓕ– options_get ( ) { … } — function",
							"—Ⓕ– options_object ( ) { … } — function",
							"—Ⓕ– options_hidden ( ) { … } — function",
							"—Ⓕ– options_numhidden ( ) { … } — function",
							"—Ⓕ– put_newline ( ) { … } — function",
							"—Ⓕ– adjust_spacing ( ) { … } — function",
							"—Ⓕ– put_spacing ( ) { … } — function",
							"—Ⓕ– put_escaped ( ) { … } — function",
							"—Ⓕ– inspect_custom ( ) { … } — function",
							"—Ⓕ– inspect_date ( ) { … } — function",
							"—Ⓕ– inspect_map ( ) { … } — function",
							"—Ⓕ– inspect_set ( ) { … } — function",
							"—Ⓕ– inspect_arraybuffer ( ) { … } — function",
							"—Ⓕ– inspect_regexp ( ) { … } — function",
							"—Ⓕ– inspect_number ( ) { … } — function",
							"—Ⓕ– inspect_string ( ) { … } — function",
							"—Ⓕ– inspect_key ( ) { … } — function",
							"—Ⓕ– inspect_atom ( ) { … } — function",
							"—Ⓕ– inspect_error ( ) { … } — function",
							"—Ⓕ– inspect_object ( ) { … } — function",
							"—Ⓕ– inspect_value ( ) { … } — function",
							"—Ⓕ– inspect_recursive ( ) { … } — function",
							"—Ⓕ– js_inspect ( ) { … } — function",
							"—Ⓕ– js_inspect_tostring ( ) { … } — function",
							"—Ⓕ– js_inspect_atom ( ) { … } — function",
							"—Ⓕ– js_inspect_init ( ) { … } — function",
							" Ⓜ  JS_INIT_MODULE … — macro object",
							" Ⓜ  JS_INIT_MODULE … — macro object"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABCBwAA4oCU4pOC4oCTIElOVDMyX0lOX1JBTkdFICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBJU19DT01QQUNUICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKTiSAgUHJvcGVydHlLZXkgOyDigJQgdHlwZWRlZgrik4kgIEluc3BlY3RPcHRpb25zIDsg4oCUIHR5cGVkZWYK4pOJICBJbnNwZWN0b3IgOyDigJQgdHlwZWRlZgrikqEgIGluc3BlY3RfdmFsdWUgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKSoSAgaW5zcGVjdF9zdHJpbmcgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKSoSAgaW5zcGVjdF9udW1iZXIgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKAlOKSu+KAkyBzY3JlZW5fd2lkdGggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX2ZyZWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIG9wdGlvbnNfb2JqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgb3B0aW9uc19oaWRkZW4gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX251bWhpZGRlbiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHB1dF9uZXdsaW5lICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgYWRqdXN0X3NwYWNpbmcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwdXRfc3BhY2luZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHB1dF9lc2NhcGVkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9jdXN0b20gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X2RhdGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X21hcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9hcnJheWJ1ZmZlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3RfcmVnZXhwICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9udW1iZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfa2V5ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9hdG9tICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9lcnJvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfb2JqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF92YWx1ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3RfcmVjdXJzaXZlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfdG9zdHJpbmcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X2F0b20gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QK4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAA6AUAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					576,
					4,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
						"symkeys":
						[
							[
								813,
								827
							],
							[
								876,
								886
							],
							[
								967,
								978
							],
							[
								1408,
								1422
							],
							[
								1495,
								1504
							],
							[
								1587,
								1600
							],
							[
								1648,
								1662
							],
							[
								1710,
								1724
							],
							[
								1780,
								1792
							],
							[
								2325,
								2337
							],
							[
								3067,
								3079
							],
							[
								3307,
								3318
							],
							[
								7651,
								7665
							],
							[
								9298,
								9312
							],
							[
								9488,
								9505
							],
							[
								9690,
								9701
							],
							[
								9820,
								9834
							],
							[
								10049,
								10060
							],
							[
								10172,
								10183
							],
							[
								12642,
								12656
							],
							[
								13564,
								13576
							],
							[
								14385,
								14396
							],
							[
								16203,
								16214
							],
							[
								17629,
								17648
							],
							[
								20765,
								20779
							],
							[
								21213,
								21227
							],
							[
								23470,
								23484
							],
							[
								25331,
								25342
							],
							[
								25874,
								25886
							],
							[
								26122,
								26135
							],
							[
								27537,
								27551
							],
							[
								31026,
								31039
							],
							[
								34207,
								34224
							],
							[
								37926,
								37936
							],
							[
								38818,
								38837
							],
							[
								39334,
								39349
							],
							[
								40170,
								40185
							],
							[
								41217,
								41231
							],
							[
								41261,
								41275
							]
						],
						"symlist":
						[
							"—Ⓜ– INT32_IN_RANGE ( ) … — macro function",
							"—Ⓜ– IS_COMPACT ( ) … — macro function",
							" Ⓣ  PropertyKey ; — typedef",
							" Ⓣ  InspectOptions ; — typedef",
							" Ⓣ  Inspector ; — typedef",
							" ⒡  inspect_value ( ) ; — function declaration",
							" ⒡  inspect_string ( ) ; — function declaration",
							" ⒡  inspect_number ( ) ; — function declaration",
							"—Ⓕ– screen_width ( ) { … } — function",
							"—Ⓕ– options_init ( ) { … } — function",
							"—Ⓕ– options_free ( ) { … } — function",
							"—Ⓕ– options_get ( ) { … } — function",
							"—Ⓕ– options_object ( ) { … } — function",
							"—Ⓕ– options_hidden ( ) { … } — function",
							"—Ⓕ– options_numhidden ( ) { … } — function",
							"—Ⓕ– put_newline ( ) { … } — function",
							"—Ⓕ– adjust_spacing ( ) { … } — function",
							"—Ⓕ– put_spacing ( ) { … } — function",
							"—Ⓕ– put_escaped ( ) { … } — function",
							"—Ⓕ– inspect_custom ( ) { … } — function",
							"—Ⓕ– inspect_date ( ) { … } — function",
							"—Ⓕ– inspect_map ( ) { … } — function",
							"—Ⓕ– inspect_set ( ) { … } — function",
							"—Ⓕ– inspect_arraybuffer ( ) { … } — function",
							"—Ⓕ– inspect_regexp ( ) { … } — function",
							"—Ⓕ– inspect_number ( ) { … } — function",
							"—Ⓕ– inspect_string ( ) { … } — function",
							"—Ⓕ– inspect_key ( ) { … } — function",
							"—Ⓕ– inspect_atom ( ) { … } — function",
							"—Ⓕ– inspect_error ( ) { … } — function",
							"—Ⓕ– inspect_object ( ) { … } — function",
							"—Ⓕ– inspect_value ( ) { … } — function",
							"—Ⓕ– inspect_recursive ( ) { … } — function",
							"—Ⓕ– js_inspect ( ) { … } — function",
							"—Ⓕ– js_inspect_tostring ( ) { … } — function",
							"—Ⓕ– js_inspect_atom ( ) { … } — function",
							"—Ⓕ– js_inspect_init ( ) { … } — function",
							" Ⓜ  JS_INIT_MODULE … — macro object",
							" Ⓜ  JS_INIT_MODULE … — macro object"
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				],
				[
					577,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
						"symkeys":
						[
							[
								813,
								827
							],
							[
								876,
								886
							],
							[
								967,
								978
							],
							[
								1408,
								1422
							],
							[
								1495,
								1504
							],
							[
								1587,
								1600
							],
							[
								1648,
								1662
							],
							[
								1710,
								1724
							],
							[
								1780,
								1792
							],
							[
								2325,
								2337
							],
							[
								3067,
								3079
							],
							[
								3307,
								3318
							],
							[
								7651,
								7665
							],
							[
								9298,
								9312
							],
							[
								9488,
								9505
							],
							[
								9690,
								9701
							],
							[
								9820,
								9834
							],
							[
								10049,
								10060
							],
							[
								10172,
								10183
							],
							[
								12642,
								12656
							],
							[
								13564,
								13576
							],
							[
								14385,
								14396
							],
							[
								16203,
								16214
							],
							[
								17629,
								17648
							],
							[
								20765,
								20779
							],
							[
								21213,
								21227
							],
							[
								23470,
								23484
							],
							[
								25331,
								25342
							],
							[
								25874,
								25886
							],
							[
								26122,
								26135
							],
							[
								27537,
								27551
							],
							[
								31026,
								31039
							],
							[
								34207,
								34224
							],
							[
								37926,
								37936
							],
							[
								38818,
								38837
							],
							[
								39334,
								39349
							],
							[
								40170,
								40185
							],
							[
								41217,
								41231
							],
							[
								41261,
								41275
							]
						],
						"symlist":
						[
							"—Ⓜ– INT32_IN_RANGE ( ) … — macro function",
							"—Ⓜ– IS_COMPACT ( ) … — macro function",
							" Ⓣ  PropertyKey ; — typedef",
							" Ⓣ  InspectOptions ; — typedef",
							" Ⓣ  Inspector ; — typedef",
							" ⒡  inspect_value ( ) ; — function declaration",
							" ⒡  inspect_string ( ) ; — function declaration",
							" ⒡  inspect_number ( ) ; — function declaration",
							"—Ⓕ– screen_width ( ) { … } — function",
							"—Ⓕ– options_init ( ) { … } — function",
							"—Ⓕ– options_free ( ) { … } — function",
							"—Ⓕ– options_get ( ) { … } — function",
							"—Ⓕ– options_object ( ) { … } — function",
							"—Ⓕ– options_hidden ( ) { … } — function",
							"—Ⓕ– options_numhidden ( ) { … } — function",
							"—Ⓕ– put_newline ( ) { … } — function",
							"—Ⓕ– adjust_spacing ( ) { … } — function",
							"—Ⓕ– put_spacing ( ) { … } — function",
							"—Ⓕ– put_escaped ( ) { … } — function",
							"—Ⓕ– inspect_custom ( ) { … } — function",
							"—Ⓕ– inspect_date ( ) { … } — function",
							"—Ⓕ– inspect_map ( ) { … } — function",
							"—Ⓕ– inspect_set ( ) { … } — function",
							"—Ⓕ– inspect_arraybuffer ( ) { … } — function",
							"—Ⓕ– inspect_regexp ( ) { … } — function",
							"—Ⓕ– inspect_number ( ) { … } — function",
							"—Ⓕ– inspect_string ( ) { … } — function",
							"—Ⓕ– inspect_key ( ) { … } — function",
							"—Ⓕ– inspect_atom ( ) { … } — function",
							"—Ⓕ– inspect_error ( ) { … } — function",
							"—Ⓕ– inspect_object ( ) { … } — function",
							"—Ⓕ– inspect_value ( ) { … } — function",
							"—Ⓕ– inspect_recursive ( ) { … } — function",
							"—Ⓕ– js_inspect ( ) { … } — function",
							"—Ⓕ– js_inspect_tostring ( ) { … } — function",
							"—Ⓕ– js_inspect_atom ( ) { … } — function",
							"—Ⓕ– js_inspect_init ( ) { … } — function",
							" Ⓜ  JS_INIT_MODULE … — macro object",
							" Ⓜ  JS_INIT_MODULE … — macro object"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABCBwAA4oCU4pOC4oCTIElOVDMyX0lOX1JBTkdFICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBJU19DT01QQUNUICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKTiSAgUHJvcGVydHlLZXkgOyDigJQgdHlwZWRlZgrik4kgIEluc3BlY3RPcHRpb25zIDsg4oCUIHR5cGVkZWYK4pOJICBJbnNwZWN0b3IgOyDigJQgdHlwZWRlZgrikqEgIGluc3BlY3RfdmFsdWUgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKSoSAgaW5zcGVjdF9zdHJpbmcgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKSoSAgaW5zcGVjdF9udW1iZXIgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKAlOKSu+KAkyBzY3JlZW5fd2lkdGggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX2ZyZWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIG9wdGlvbnNfb2JqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgb3B0aW9uc19oaWRkZW4gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX251bWhpZGRlbiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHB1dF9uZXdsaW5lICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgYWRqdXN0X3NwYWNpbmcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwdXRfc3BhY2luZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHB1dF9lc2NhcGVkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9jdXN0b20gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X2RhdGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X21hcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9hcnJheWJ1ZmZlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3RfcmVnZXhwICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9udW1iZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfa2V5ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9hdG9tICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9lcnJvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfb2JqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF92YWx1ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3RfcmVjdXJzaXZlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfdG9zdHJpbmcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X2F0b20gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QK4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAA6AUAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					580,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
						"symkeys":
						[
							[
								813,
								827
							],
							[
								876,
								886
							],
							[
								967,
								978
							],
							[
								1408,
								1422
							],
							[
								1495,
								1504
							],
							[
								1587,
								1600
							],
							[
								1648,
								1662
							],
							[
								1710,
								1724
							],
							[
								1780,
								1792
							],
							[
								2325,
								2337
							],
							[
								3067,
								3079
							],
							[
								3307,
								3318
							],
							[
								7651,
								7665
							],
							[
								9298,
								9312
							],
							[
								9493,
								9510
							],
							[
								9700,
								9711
							],
							[
								9830,
								9844
							],
							[
								10059,
								10070
							],
							[
								10182,
								10193
							],
							[
								12652,
								12666
							],
							[
								13574,
								13586
							],
							[
								14395,
								14406
							],
							[
								16213,
								16224
							],
							[
								17639,
								17658
							],
							[
								20775,
								20789
							],
							[
								21223,
								21237
							],
							[
								23480,
								23494
							],
							[
								25341,
								25352
							],
							[
								25884,
								25896
							],
							[
								26132,
								26145
							],
							[
								27547,
								27561
							],
							[
								31036,
								31049
							],
							[
								34217,
								34234
							],
							[
								37936,
								37946
							],
							[
								38828,
								38847
							],
							[
								39344,
								39359
							],
							[
								40180,
								40195
							],
							[
								41227,
								41241
							],
							[
								41271,
								41285
							]
						],
						"symlist":
						[
							"—Ⓜ– INT32_IN_RANGE ( ) … — macro function",
							"—Ⓜ– IS_COMPACT ( ) … — macro function",
							" Ⓣ  PropertyKey ; — typedef",
							" Ⓣ  InspectOptions ; — typedef",
							" Ⓣ  Inspector ; — typedef",
							" ⒡  inspect_value ( ) ; — function declaration",
							" ⒡  inspect_string ( ) ; — function declaration",
							" ⒡  inspect_number ( ) ; — function declaration",
							"—Ⓕ– screen_width ( ) { … } — function",
							"—Ⓕ– options_init ( ) { … } — function",
							"—Ⓕ– options_free ( ) { … } — function",
							"—Ⓕ– options_get ( ) { … } — function",
							"—Ⓕ– options_object ( ) { … } — function",
							"—Ⓕ– options_hidden ( ) { … } — function",
							"—Ⓕ– options_numhidden ( ) { … } — function",
							"—Ⓕ– put_newline ( ) { … } — function",
							"—Ⓕ– adjust_spacing ( ) { … } — function",
							"—Ⓕ– put_spacing ( ) { … } — function",
							"—Ⓕ– put_escaped ( ) { … } — function",
							"—Ⓕ– inspect_custom ( ) { … } — function",
							"—Ⓕ– inspect_date ( ) { … } — function",
							"—Ⓕ– inspect_map ( ) { … } — function",
							"—Ⓕ– inspect_set ( ) { … } — function",
							"—Ⓕ– inspect_arraybuffer ( ) { … } — function",
							"—Ⓕ– inspect_regexp ( ) { … } — function",
							"—Ⓕ– inspect_number ( ) { … } — function",
							"—Ⓕ– inspect_string ( ) { … } — function",
							"—Ⓕ– inspect_key ( ) { … } — function",
							"—Ⓕ– inspect_atom ( ) { … } — function",
							"—Ⓕ– inspect_error ( ) { … } — function",
							"—Ⓕ– inspect_object ( ) { … } — function",
							"—Ⓕ– inspect_value ( ) { … } — function",
							"—Ⓕ– inspect_recursive ( ) { … } — function",
							"—Ⓕ– js_inspect ( ) { … } — function",
							"—Ⓕ– js_inspect_tostring ( ) { … } — function",
							"—Ⓕ– js_inspect_atom ( ) { … } — function",
							"—Ⓕ– js_inspect_init ( ) { … } — function",
							" Ⓜ  JS_INIT_MODULE … — macro object",
							" Ⓜ  JS_INIT_MODULE … — macro object"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABCBwAA4oCU4pOC4oCTIElOVDMyX0lOX1JBTkdFICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBJU19DT01QQUNUICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKTiSAgUHJvcGVydHlLZXkgOyDigJQgdHlwZWRlZgrik4kgIEluc3BlY3RPcHRpb25zIDsg4oCUIHR5cGVkZWYK4pOJICBJbnNwZWN0b3IgOyDigJQgdHlwZWRlZgrikqEgIGluc3BlY3RfdmFsdWUgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKSoSAgaW5zcGVjdF9zdHJpbmcgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKSoSAgaW5zcGVjdF9udW1iZXIgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKAlOKSu+KAkyBzY3JlZW5fd2lkdGggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX2ZyZWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIG9wdGlvbnNfb2JqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgb3B0aW9uc19oaWRkZW4gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX251bWhpZGRlbiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHB1dF9uZXdsaW5lICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgYWRqdXN0X3NwYWNpbmcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwdXRfc3BhY2luZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHB1dF9lc2NhcGVkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9jdXN0b20gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X2RhdGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X21hcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9hcnJheWJ1ZmZlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3RfcmVnZXhwICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9udW1iZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfa2V5ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9hdG9tICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9lcnJvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfb2JqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF92YWx1ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3RfcmVjdXJzaXZlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfdG9zdHJpbmcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X2F0b20gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QK4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAA6AUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHwIAAAAAAAAfAgAAAAAAAAAAAAAAAPC/"
				],
				[
					581,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABCBwAA4oCU4pOC4oCTIElOVDMyX0lOX1JBTkdFICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBJU19DT01QQUNUICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKTiSAgUHJvcGVydHlLZXkgOyDigJQgdHlwZWRlZgrik4kgIEluc3BlY3RPcHRpb25zIDsg4oCUIHR5cGVkZWYK4pOJICBJbnNwZWN0b3IgOyDigJQgdHlwZWRlZgrikqEgIGluc3BlY3RfdmFsdWUgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKSoSAgaW5zcGVjdF9zdHJpbmcgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKSoSAgaW5zcGVjdF9udW1iZXIgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKAlOKSu+KAkyBzY3JlZW5fd2lkdGggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX2ZyZWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIG9wdGlvbnNfb2JqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgb3B0aW9uc19oaWRkZW4gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX251bWhpZGRlbiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHB1dF9uZXdsaW5lICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgYWRqdXN0X3NwYWNpbmcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwdXRfc3BhY2luZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHB1dF9lc2NhcGVkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9jdXN0b20gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X2RhdGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X21hcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9hcnJheWJ1ZmZlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3RfcmVnZXhwICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9udW1iZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfa2V5ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9hdG9tICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9lcnJvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfb2JqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF92YWx1ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3RfcmVjdXJzaXZlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfdG9zdHJpbmcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X2F0b20gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QK4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					582,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
						"symkeys":
						[
							[
								813,
								827
							],
							[
								876,
								886
							],
							[
								967,
								978
							],
							[
								1408,
								1422
							],
							[
								1495,
								1504
							],
							[
								1587,
								1600
							],
							[
								1648,
								1662
							],
							[
								1710,
								1724
							],
							[
								1780,
								1792
							],
							[
								2325,
								2337
							],
							[
								3067,
								3079
							],
							[
								3307,
								3318
							],
							[
								7651,
								7665
							],
							[
								9298,
								9312
							],
							[
								9493,
								9510
							],
							[
								9700,
								9711
							],
							[
								9830,
								9844
							],
							[
								10059,
								10070
							],
							[
								10182,
								10193
							],
							[
								12652,
								12666
							],
							[
								13574,
								13586
							],
							[
								14395,
								14406
							],
							[
								16213,
								16224
							],
							[
								17639,
								17658
							],
							[
								20775,
								20789
							],
							[
								21223,
								21237
							],
							[
								23480,
								23494
							],
							[
								25341,
								25352
							],
							[
								25884,
								25896
							],
							[
								26132,
								26145
							],
							[
								27547,
								27561
							],
							[
								31036,
								31049
							],
							[
								34217,
								34234
							],
							[
								37936,
								37946
							],
							[
								38828,
								38847
							],
							[
								39344,
								39359
							],
							[
								40180,
								40195
							],
							[
								41227,
								41241
							],
							[
								41271,
								41285
							]
						],
						"symlist":
						[
							"—Ⓜ– INT32_IN_RANGE ( ) … — macro function",
							"—Ⓜ– IS_COMPACT ( ) … — macro function",
							" Ⓣ  PropertyKey ; — typedef",
							" Ⓣ  InspectOptions ; — typedef",
							" Ⓣ  Inspector ; — typedef",
							" ⒡  inspect_value ( ) ; — function declaration",
							" ⒡  inspect_string ( ) ; — function declaration",
							" ⒡  inspect_number ( ) ; — function declaration",
							"—Ⓕ– screen_width ( ) { … } — function",
							"—Ⓕ– options_init ( ) { … } — function",
							"—Ⓕ– options_free ( ) { … } — function",
							"—Ⓕ– options_get ( ) { … } — function",
							"—Ⓕ– options_object ( ) { … } — function",
							"—Ⓕ– options_hidden ( ) { … } — function",
							"—Ⓕ– options_numhidden ( ) { … } — function",
							"—Ⓕ– put_newline ( ) { … } — function",
							"—Ⓕ– adjust_spacing ( ) { … } — function",
							"—Ⓕ– put_spacing ( ) { … } — function",
							"—Ⓕ– put_escaped ( ) { … } — function",
							"—Ⓕ– inspect_custom ( ) { … } — function",
							"—Ⓕ– inspect_date ( ) { … } — function",
							"—Ⓕ– inspect_map ( ) { … } — function",
							"—Ⓕ– inspect_set ( ) { … } — function",
							"—Ⓕ– inspect_arraybuffer ( ) { … } — function",
							"—Ⓕ– inspect_regexp ( ) { … } — function",
							"—Ⓕ– inspect_number ( ) { … } — function",
							"—Ⓕ– inspect_string ( ) { … } — function",
							"—Ⓕ– inspect_key ( ) { … } — function",
							"—Ⓕ– inspect_atom ( ) { … } — function",
							"—Ⓕ– inspect_error ( ) { … } — function",
							"—Ⓕ– inspect_object ( ) { … } — function",
							"—Ⓕ– inspect_value ( ) { … } — function",
							"—Ⓕ– inspect_recursive ( ) { … } — function",
							"—Ⓕ– js_inspect ( ) { … } — function",
							"—Ⓕ– js_inspect_tostring ( ) { … } — function",
							"—Ⓕ– js_inspect_atom ( ) { … } — function",
							"—Ⓕ– js_inspect_init ( ) { … } — function",
							" Ⓜ  JS_INIT_MODULE … — macro object",
							" Ⓜ  JS_INIT_MODULE … — macro object"
						]
					},
					"AQAAAAAAAAAAAAAA6AUAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					583,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
						"symkeys":
						[
							[
								813,
								827
							],
							[
								876,
								886
							],
							[
								967,
								978
							],
							[
								1408,
								1422
							],
							[
								1495,
								1504
							],
							[
								1587,
								1600
							],
							[
								1648,
								1662
							],
							[
								1710,
								1724
							],
							[
								1780,
								1792
							],
							[
								2325,
								2337
							],
							[
								3067,
								3079
							],
							[
								3307,
								3318
							],
							[
								7651,
								7665
							],
							[
								9298,
								9312
							],
							[
								9493,
								9510
							],
							[
								9700,
								9711
							],
							[
								9830,
								9844
							],
							[
								10059,
								10070
							],
							[
								10182,
								10193
							],
							[
								12652,
								12666
							],
							[
								13574,
								13586
							],
							[
								14395,
								14406
							],
							[
								16213,
								16224
							],
							[
								17639,
								17658
							],
							[
								20775,
								20789
							],
							[
								21223,
								21237
							],
							[
								23480,
								23494
							],
							[
								25341,
								25352
							],
							[
								25884,
								25896
							],
							[
								26132,
								26145
							],
							[
								27547,
								27561
							],
							[
								31036,
								31049
							],
							[
								34217,
								34234
							],
							[
								37965,
								37975
							],
							[
								38857,
								38876
							],
							[
								39373,
								39388
							],
							[
								40209,
								40224
							],
							[
								41256,
								41270
							],
							[
								41300,
								41314
							]
						],
						"symlist":
						[
							"—Ⓜ– INT32_IN_RANGE ( ) … — macro function",
							"—Ⓜ– IS_COMPACT ( ) … — macro function",
							" Ⓣ  PropertyKey ; — typedef",
							" Ⓣ  InspectOptions ; — typedef",
							" Ⓣ  Inspector ; — typedef",
							" ⒡  inspect_value ( ) ; — function declaration",
							" ⒡  inspect_string ( ) ; — function declaration",
							" ⒡  inspect_number ( ) ; — function declaration",
							"—Ⓕ– screen_width ( ) { … } — function",
							"—Ⓕ– options_init ( ) { … } — function",
							"—Ⓕ– options_free ( ) { … } — function",
							"—Ⓕ– options_get ( ) { … } — function",
							"—Ⓕ– options_object ( ) { … } — function",
							"—Ⓕ– options_hidden ( ) { … } — function",
							"—Ⓕ– options_numhidden ( ) { … } — function",
							"—Ⓕ– put_newline ( ) { … } — function",
							"—Ⓕ– adjust_spacing ( ) { … } — function",
							"—Ⓕ– put_spacing ( ) { … } — function",
							"—Ⓕ– put_escaped ( ) { … } — function",
							"—Ⓕ– inspect_custom ( ) { … } — function",
							"—Ⓕ– inspect_date ( ) { … } — function",
							"—Ⓕ– inspect_map ( ) { … } — function",
							"—Ⓕ– inspect_set ( ) { … } — function",
							"—Ⓕ– inspect_arraybuffer ( ) { … } — function",
							"—Ⓕ– inspect_regexp ( ) { … } — function",
							"—Ⓕ– inspect_number ( ) { … } — function",
							"—Ⓕ– inspect_string ( ) { … } — function",
							"—Ⓕ– inspect_key ( ) { … } — function",
							"—Ⓕ– inspect_atom ( ) { … } — function",
							"—Ⓕ– inspect_error ( ) { … } — function",
							"—Ⓕ– inspect_object ( ) { … } — function",
							"—Ⓕ– inspect_value ( ) { … } — function",
							"—Ⓕ– inspect_recursive ( ) { … } — function",
							"—Ⓕ– js_inspect ( ) { … } — function",
							"—Ⓕ– js_inspect_tostring ( ) { … } — function",
							"—Ⓕ– js_inspect_atom ( ) { … } — function",
							"—Ⓕ– js_inspect_init ( ) { … } — function",
							" Ⓜ  JS_INIT_MODULE … — macro object",
							" Ⓜ  JS_INIT_MODULE … — macro object"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAABCBwAA4oCU4pOC4oCTIElOVDMyX0lOX1JBTkdFICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBJU19DT01QQUNUICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKTiSAgUHJvcGVydHlLZXkgOyDigJQgdHlwZWRlZgrik4kgIEluc3BlY3RPcHRpb25zIDsg4oCUIHR5cGVkZWYK4pOJICBJbnNwZWN0b3IgOyDigJQgdHlwZWRlZgrikqEgIGluc3BlY3RfdmFsdWUgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKSoSAgaW5zcGVjdF9zdHJpbmcgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKSoSAgaW5zcGVjdF9udW1iZXIgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKAlOKSu+KAkyBzY3JlZW5fd2lkdGggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX2ZyZWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIG9wdGlvbnNfb2JqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgb3B0aW9uc19oaWRkZW4gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX251bWhpZGRlbiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHB1dF9uZXdsaW5lICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgYWRqdXN0X3NwYWNpbmcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwdXRfc3BhY2luZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHB1dF9lc2NhcGVkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9jdXN0b20gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X2RhdGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X21hcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9hcnJheWJ1ZmZlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3RfcmVnZXhwICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9udW1iZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfa2V5ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9hdG9tICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9lcnJvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfb2JqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF92YWx1ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3RfcmVjdXJzaXZlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfdG9zdHJpbmcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X2F0b20gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QK4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAA6AUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEIHAADigJTik4LigJMgSU5UMzJfSU5fUkFOR0UgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIElTX0NPTVBBQ1QgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4pOJICBQcm9wZXJ0eUtleSA7IOKAlCB0eXBlZGVmCuKTiSAgSW5zcGVjdE9wdGlvbnMgOyDigJQgdHlwZWRlZgrik4kgIEluc3BlY3RvciA7IOKAlCB0eXBlZGVmCuKSoSAgaW5zcGVjdF92YWx1ZSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24K4pKhICBpbnNwZWN0X3N0cmluZyAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24K4pKhICBpbnNwZWN0X251bWJlciAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24K4oCU4pK74oCTIHNjcmVlbl93aWR0aCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIG9wdGlvbnNfaW5pdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIG9wdGlvbnNfZnJlZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIG9wdGlvbnNfZ2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgb3B0aW9uc19vYmplY3QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX2hpZGRlbiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIG9wdGlvbnNfbnVtaGlkZGVuICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcHV0X25ld2xpbmUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBhZGp1c3Rfc3BhY2luZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHB1dF9zcGFjaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcHV0X2VzY2FwZWQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X2N1c3RvbSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3RfZGF0ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3RfbWFwICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9zZXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X2FycmF5YnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9yZWdleHAgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X251bWJlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfc3RyaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9rZXkgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X2F0b20gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X2Vycm9yICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9vYmplY3QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X3ZhbHVlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9yZWN1cnNpdmUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF90b3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfYXRvbSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfaW5pdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdArik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0AAAAAAAAAADoBQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					584,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
						"symkeys":
						[
							[
								813,
								827
							],
							[
								876,
								886
							],
							[
								967,
								978
							],
							[
								1408,
								1422
							],
							[
								1495,
								1504
							],
							[
								1587,
								1600
							],
							[
								1648,
								1662
							],
							[
								1710,
								1724
							],
							[
								1780,
								1792
							],
							[
								2325,
								2337
							],
							[
								3067,
								3079
							],
							[
								3307,
								3318
							],
							[
								7651,
								7665
							],
							[
								9298,
								9312
							],
							[
								9493,
								9510
							],
							[
								9700,
								9711
							],
							[
								9830,
								9844
							],
							[
								10059,
								10070
							],
							[
								10182,
								10193
							],
							[
								12652,
								12666
							],
							[
								13574,
								13586
							],
							[
								14395,
								14406
							],
							[
								16213,
								16224
							],
							[
								17639,
								17658
							],
							[
								20775,
								20789
							],
							[
								21223,
								21237
							],
							[
								23480,
								23494
							],
							[
								25341,
								25352
							],
							[
								25884,
								25896
							],
							[
								26132,
								26145
							],
							[
								27547,
								27561
							],
							[
								31036,
								31049
							],
							[
								34217,
								34234
							],
							[
								37964,
								37974
							],
							[
								38856,
								38875
							],
							[
								39372,
								39387
							],
							[
								40208,
								40223
							],
							[
								41255,
								41269
							],
							[
								41299,
								41313
							]
						],
						"symlist":
						[
							"—Ⓜ– INT32_IN_RANGE ( ) … — macro function",
							"—Ⓜ– IS_COMPACT ( ) … — macro function",
							" Ⓣ  PropertyKey ; — typedef",
							" Ⓣ  InspectOptions ; — typedef",
							" Ⓣ  Inspector ; — typedef",
							" ⒡  inspect_value ( ) ; — function declaration",
							" ⒡  inspect_string ( ) ; — function declaration",
							" ⒡  inspect_number ( ) ; — function declaration",
							"—Ⓕ– screen_width ( ) { … } — function",
							"—Ⓕ– options_init ( ) { … } — function",
							"—Ⓕ– options_free ( ) { … } — function",
							"—Ⓕ– options_get ( ) { … } — function",
							"—Ⓕ– options_object ( ) { … } — function",
							"—Ⓕ– options_hidden ( ) { … } — function",
							"—Ⓕ– options_numhidden ( ) { … } — function",
							"—Ⓕ– put_newline ( ) { … } — function",
							"—Ⓕ– adjust_spacing ( ) { … } — function",
							"—Ⓕ– put_spacing ( ) { … } — function",
							"—Ⓕ– put_escaped ( ) { … } — function",
							"—Ⓕ– inspect_custom ( ) { … } — function",
							"—Ⓕ– inspect_date ( ) { … } — function",
							"—Ⓕ– inspect_map ( ) { … } — function",
							"—Ⓕ– inspect_set ( ) { … } — function",
							"—Ⓕ– inspect_arraybuffer ( ) { … } — function",
							"—Ⓕ– inspect_regexp ( ) { … } — function",
							"—Ⓕ– inspect_number ( ) { … } — function",
							"—Ⓕ– inspect_string ( ) { … } — function",
							"—Ⓕ– inspect_key ( ) { … } — function",
							"—Ⓕ– inspect_atom ( ) { … } — function",
							"—Ⓕ– inspect_error ( ) { … } — function",
							"—Ⓕ– inspect_object ( ) { … } — function",
							"—Ⓕ– inspect_value ( ) { … } — function",
							"—Ⓕ– inspect_recursive ( ) { … } — function",
							"—Ⓕ– js_inspect ( ) { … } — function",
							"—Ⓕ– js_inspect_tostring ( ) { … } — function",
							"—Ⓕ– js_inspect_atom ( ) { … } — function",
							"—Ⓕ– js_inspect_init ( ) { … } — function",
							" Ⓜ  JS_INIT_MODULE … — macro object",
							" Ⓜ  JS_INIT_MODULE … — macro object"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAABCBwAA4oCU4pOC4oCTIElOVDMyX0lOX1JBTkdFICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBJU19DT01QQUNUICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKTiSAgUHJvcGVydHlLZXkgOyDigJQgdHlwZWRlZgrik4kgIEluc3BlY3RPcHRpb25zIDsg4oCUIHR5cGVkZWYK4pOJICBJbnNwZWN0b3IgOyDigJQgdHlwZWRlZgrikqEgIGluc3BlY3RfdmFsdWUgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKSoSAgaW5zcGVjdF9zdHJpbmcgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKSoSAgaW5zcGVjdF9udW1iZXIgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKAlOKSu+KAkyBzY3JlZW5fd2lkdGggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX2ZyZWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIG9wdGlvbnNfb2JqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgb3B0aW9uc19oaWRkZW4gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX251bWhpZGRlbiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHB1dF9uZXdsaW5lICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgYWRqdXN0X3NwYWNpbmcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwdXRfc3BhY2luZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHB1dF9lc2NhcGVkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9jdXN0b20gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X2RhdGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X21hcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9hcnJheWJ1ZmZlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3RfcmVnZXhwICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9udW1iZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfa2V5ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9hdG9tICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9lcnJvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfb2JqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF92YWx1ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3RfcmVjdXJzaXZlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfdG9zdHJpbmcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X2F0b20gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QK4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAA6AUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEIHAADigJTik4LigJMgSU5UMzJfSU5fUkFOR0UgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIElTX0NPTVBBQ1QgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4pOJICBQcm9wZXJ0eUtleSA7IOKAlCB0eXBlZGVmCuKTiSAgSW5zcGVjdE9wdGlvbnMgOyDigJQgdHlwZWRlZgrik4kgIEluc3BlY3RvciA7IOKAlCB0eXBlZGVmCuKSoSAgaW5zcGVjdF92YWx1ZSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24K4pKhICBpbnNwZWN0X3N0cmluZyAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24K4pKhICBpbnNwZWN0X251bWJlciAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24K4oCU4pK74oCTIHNjcmVlbl93aWR0aCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIG9wdGlvbnNfaW5pdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIG9wdGlvbnNfZnJlZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIG9wdGlvbnNfZ2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgb3B0aW9uc19vYmplY3QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX2hpZGRlbiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIG9wdGlvbnNfbnVtaGlkZGVuICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcHV0X25ld2xpbmUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBhZGp1c3Rfc3BhY2luZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHB1dF9zcGFjaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcHV0X2VzY2FwZWQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X2N1c3RvbSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3RfZGF0ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3RfbWFwICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9zZXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X2FycmF5YnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9yZWdleHAgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X251bWJlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfc3RyaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9rZXkgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X2F0b20gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X2Vycm9yICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9vYmplY3QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X3ZhbHVlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9yZWN1cnNpdmUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF90b3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfYXRvbSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfaW5pdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdArik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0AAAAAAAAAADoBQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					585,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
						"symkeys":
						[
							[
								813,
								827
							],
							[
								876,
								886
							],
							[
								967,
								978
							],
							[
								1408,
								1422
							],
							[
								1495,
								1504
							],
							[
								1587,
								1600
							],
							[
								1648,
								1662
							],
							[
								1710,
								1724
							],
							[
								1780,
								1792
							],
							[
								2325,
								2337
							],
							[
								3067,
								3079
							],
							[
								3307,
								3318
							],
							[
								7651,
								7665
							],
							[
								9298,
								9312
							],
							[
								9493,
								9510
							],
							[
								9708,
								9719
							],
							[
								9838,
								9852
							],
							[
								10067,
								10078
							],
							[
								10190,
								10201
							],
							[
								12660,
								12674
							],
							[
								13582,
								13594
							],
							[
								14403,
								14414
							],
							[
								16221,
								16232
							],
							[
								17647,
								17666
							],
							[
								20783,
								20797
							],
							[
								21231,
								21245
							],
							[
								23488,
								23502
							],
							[
								25349,
								25360
							],
							[
								25892,
								25904
							],
							[
								26140,
								26153
							],
							[
								27555,
								27569
							],
							[
								31044,
								31057
							],
							[
								34225,
								34242
							],
							[
								37979,
								37989
							],
							[
								38871,
								38890
							],
							[
								39387,
								39402
							],
							[
								40223,
								40238
							],
							[
								41270,
								41284
							],
							[
								41314,
								41328
							]
						],
						"symlist":
						[
							"—Ⓜ– INT32_IN_RANGE ( ) … — macro function",
							"—Ⓜ– IS_COMPACT ( ) … — macro function",
							" Ⓣ  PropertyKey ; — typedef",
							" Ⓣ  InspectOptions ; — typedef",
							" Ⓣ  Inspector ; — typedef",
							" ⒡  inspect_value ( ) ; — function declaration",
							" ⒡  inspect_string ( ) ; — function declaration",
							" ⒡  inspect_number ( ) ; — function declaration",
							"—Ⓕ– screen_width ( ) { … } — function",
							"—Ⓕ– options_init ( ) { … } — function",
							"—Ⓕ– options_free ( ) { … } — function",
							"—Ⓕ– options_get ( ) { … } — function",
							"—Ⓕ– options_object ( ) { … } — function",
							"—Ⓕ– options_hidden ( ) { … } — function",
							"—Ⓕ– options_numhidden ( ) { … } — function",
							"—Ⓕ– put_newline ( ) { … } — function",
							"—Ⓕ– adjust_spacing ( ) { … } — function",
							"—Ⓕ– put_spacing ( ) { … } — function",
							"—Ⓕ– put_escaped ( ) { … } — function",
							"—Ⓕ– inspect_custom ( ) { … } — function",
							"—Ⓕ– inspect_date ( ) { … } — function",
							"—Ⓕ– inspect_map ( ) { … } — function",
							"—Ⓕ– inspect_set ( ) { … } — function",
							"—Ⓕ– inspect_arraybuffer ( ) { … } — function",
							"—Ⓕ– inspect_regexp ( ) { … } — function",
							"—Ⓕ– inspect_number ( ) { … } — function",
							"—Ⓕ– inspect_string ( ) { … } — function",
							"—Ⓕ– inspect_key ( ) { … } — function",
							"—Ⓕ– inspect_atom ( ) { … } — function",
							"—Ⓕ– inspect_error ( ) { … } — function",
							"—Ⓕ– inspect_object ( ) { … } — function",
							"—Ⓕ– inspect_value ( ) { … } — function",
							"—Ⓕ– inspect_recursive ( ) { … } — function",
							"—Ⓕ– js_inspect ( ) { … } — function",
							"—Ⓕ– js_inspect_tostring ( ) { … } — function",
							"—Ⓕ– js_inspect_atom ( ) { … } — function",
							"—Ⓕ– js_inspect_init ( ) { … } — function",
							" Ⓜ  JS_INIT_MODULE … — macro object",
							" Ⓜ  JS_INIT_MODULE … — macro object"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABCBwAA4oCU4pOC4oCTIElOVDMyX0lOX1JBTkdFICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBJU19DT01QQUNUICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKTiSAgUHJvcGVydHlLZXkgOyDigJQgdHlwZWRlZgrik4kgIEluc3BlY3RPcHRpb25zIDsg4oCUIHR5cGVkZWYK4pOJICBJbnNwZWN0b3IgOyDigJQgdHlwZWRlZgrikqEgIGluc3BlY3RfdmFsdWUgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKSoSAgaW5zcGVjdF9zdHJpbmcgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKSoSAgaW5zcGVjdF9udW1iZXIgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKAlOKSu+KAkyBzY3JlZW5fd2lkdGggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX2ZyZWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIG9wdGlvbnNfb2JqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgb3B0aW9uc19oaWRkZW4gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX251bWhpZGRlbiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHB1dF9uZXdsaW5lICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgYWRqdXN0X3NwYWNpbmcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwdXRfc3BhY2luZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHB1dF9lc2NhcGVkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9jdXN0b20gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X2RhdGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X21hcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9hcnJheWJ1ZmZlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3RfcmVnZXhwICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9udW1iZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfa2V5ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9hdG9tICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9lcnJvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfb2JqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF92YWx1ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3RfcmVjdXJzaXZlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfdG9zdHJpbmcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X2F0b20gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QK4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAA6AUAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					586,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABCBwAA4oCU4pOC4oCTIElOVDMyX0lOX1JBTkdFICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBJU19DT01QQUNUICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKTiSAgUHJvcGVydHlLZXkgOyDigJQgdHlwZWRlZgrik4kgIEluc3BlY3RPcHRpb25zIDsg4oCUIHR5cGVkZWYK4pOJICBJbnNwZWN0b3IgOyDigJQgdHlwZWRlZgrikqEgIGluc3BlY3RfdmFsdWUgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKSoSAgaW5zcGVjdF9zdHJpbmcgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKSoSAgaW5zcGVjdF9udW1iZXIgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKAlOKSu+KAkyBzY3JlZW5fd2lkdGggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX2ZyZWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIG9wdGlvbnNfb2JqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgb3B0aW9uc19oaWRkZW4gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvcHRpb25zX251bWhpZGRlbiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHB1dF9uZXdsaW5lICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgYWRqdXN0X3NwYWNpbmcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwdXRfc3BhY2luZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHB1dF9lc2NhcGVkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9jdXN0b20gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X2RhdGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X21hcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9hcnJheWJ1ZmZlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3RfcmVnZXhwICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9udW1iZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfa2V5ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9hdG9tICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9lcnJvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfb2JqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF92YWx1ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3RfcmVjdXJzaXZlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfdG9zdHJpbmcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X2F0b20gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QK4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					587,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
						"symkeys":
						[
							[
								813,
								827
							],
							[
								876,
								886
							],
							[
								967,
								978
							],
							[
								1408,
								1422
							],
							[
								1495,
								1504
							],
							[
								1587,
								1600
							],
							[
								1648,
								1662
							],
							[
								1710,
								1724
							],
							[
								1780,
								1792
							],
							[
								2325,
								2337
							],
							[
								3067,
								3079
							],
							[
								3307,
								3318
							],
							[
								7651,
								7665
							],
							[
								9298,
								9312
							],
							[
								9493,
								9510
							],
							[
								9708,
								9719
							],
							[
								9838,
								9852
							],
							[
								10067,
								10078
							],
							[
								10190,
								10201
							],
							[
								12660,
								12674
							],
							[
								13582,
								13594
							],
							[
								14403,
								14414
							],
							[
								16221,
								16232
							],
							[
								17647,
								17666
							],
							[
								20783,
								20797
							],
							[
								21231,
								21245
							],
							[
								23488,
								23502
							],
							[
								25349,
								25360
							],
							[
								25892,
								25904
							],
							[
								26140,
								26153
							],
							[
								27555,
								27569
							],
							[
								31044,
								31057
							],
							[
								34225,
								34242
							],
							[
								37979,
								37989
							],
							[
								38871,
								38890
							],
							[
								39387,
								39402
							],
							[
								40223,
								40238
							],
							[
								41270,
								41284
							],
							[
								41314,
								41328
							]
						],
						"symlist":
						[
							"—Ⓜ– INT32_IN_RANGE ( ) … — macro function",
							"—Ⓜ– IS_COMPACT ( ) … — macro function",
							" Ⓣ  PropertyKey ; — typedef",
							" Ⓣ  InspectOptions ; — typedef",
							" Ⓣ  Inspector ; — typedef",
							" ⒡  inspect_value ( ) ; — function declaration",
							" ⒡  inspect_string ( ) ; — function declaration",
							" ⒡  inspect_number ( ) ; — function declaration",
							"—Ⓕ– screen_width ( ) { … } — function",
							"—Ⓕ– options_init ( ) { … } — function",
							"—Ⓕ– options_free ( ) { … } — function",
							"—Ⓕ– options_get ( ) { … } — function",
							"—Ⓕ– options_object ( ) { … } — function",
							"—Ⓕ– options_hidden ( ) { … } — function",
							"—Ⓕ– options_numhidden ( ) { … } — function",
							"—Ⓕ– put_newline ( ) { … } — function",
							"—Ⓕ– adjust_spacing ( ) { … } — function",
							"—Ⓕ– put_spacing ( ) { … } — function",
							"—Ⓕ– put_escaped ( ) { … } — function",
							"—Ⓕ– inspect_custom ( ) { … } — function",
							"—Ⓕ– inspect_date ( ) { … } — function",
							"—Ⓕ– inspect_map ( ) { … } — function",
							"—Ⓕ– inspect_set ( ) { … } — function",
							"—Ⓕ– inspect_arraybuffer ( ) { … } — function",
							"—Ⓕ– inspect_regexp ( ) { … } — function",
							"—Ⓕ– inspect_number ( ) { … } — function",
							"—Ⓕ– inspect_string ( ) { … } — function",
							"—Ⓕ– inspect_key ( ) { … } — function",
							"—Ⓕ– inspect_atom ( ) { … } — function",
							"—Ⓕ– inspect_error ( ) { … } — function",
							"—Ⓕ– inspect_object ( ) { … } — function",
							"—Ⓕ– inspect_value ( ) { … } — function",
							"—Ⓕ– inspect_recursive ( ) { … } — function",
							"—Ⓕ– js_inspect ( ) { … } — function",
							"—Ⓕ– js_inspect_tostring ( ) { … } — function",
							"—Ⓕ– js_inspect_atom ( ) { … } — function",
							"—Ⓕ– js_inspect_init ( ) { … } — function",
							" Ⓜ  JS_INIT_MODULE … — macro object",
							" Ⓜ  JS_INIT_MODULE … — macro object"
						]
					},
					"AQAAAAAAAAAAAAAA6AUAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"contents": "import { existsSync, reader, readerSync, readSync, writeSync } from 'fs';\nimport { createServer, getSessions, LLL_INFO, LLL_NOTICE, LLL_USER, LLL_WARN, logLevels, setLog } from 'net';\nimport { kill, setReadHandler, SIGTERM, sleep, ttySetRaw, Worker } from 'os';\nimport { clearInterval, setInterval, setTimeout } from 'timers';\nimport { atexit, bindMethods, btoa, define, keys, filterKeys, getOpt, isObject, lazyProperties, memoize, mod, once, propertyLookup, quote, toString, tryCatch, types, mapWrapper } from 'util';\nimport { List, Table } from './cli-helpers.js';\nimport { DebuggerDispatcher, FindFunctions, GetFunctionName, TrivialSyntaxHighlighter } from './debugger.js';\nimport { DebuggerProtocol } from './debuggerprotocol.js';\nimport { ReadFile, ReadJSON, WriteJSON } from './io-helpers.js';\nimport { consume, map } from './lib/async/helpers.js';\nimport { absolute, basename, extname, relative } from './lib/path.js';\nimport { Repeater } from './lib/repeater/repeater.js';\nimport { Spawn, WNOHANG } from './os-helpers.js';\nimport { F_GETFL, F_SETFL, fcntl, O_NONBLOCK } from './quickjs/qjs-ffi/lib/fcntl.js';\nimport { REPL } from './quickjs/qjs-modules/lib/repl.js';\nimport { Console } from 'console';\nimport { Location } from 'location';\nimport process from 'process';\nimport * as path from 'path';\nimport extendArray from 'extendArray';\nimport { AF_INET, AsyncSocket, IPPROTO_TCP, SOCK_STREAM, SockAddr } from 'sockets';\nimport { err as stderr } from 'std';\nimport { codecs, RPCApi, RPCProxy, RPCObject, RPCFactory, Connection, RPCServer, RPCClient, RPCSocket, RPCConnect, RPCListen } from './quickjs/qjs-net/js/rpc.js';\n\nfunction decorate(decorators, obj, ...args) {\n  if(!Array.isArray(decorators)) decorators = [decorators];\n\n  for(let decorator of decorators)\n    for(let prop of keys(obj))\n      if(typeof obj[prop] == 'function') {\n        let newfn = decorator(obj[prop], obj, prop, ...args);\n        if(obj[prop] !== newfn) obj[prop] = newfn;\n      }\n\n  return obj;\n}\n\nextendArray(Array.prototype);\n\nconst scriptName = (arg = scriptArgs[0]) => basename(arg, extname(arg));\n\nconst children = new Set();\n\natexit(() => {\n  for(let pid of children) {\n    console.log('atexit killing child', pid);\n    kill(pid, SIGTERM);\n  }\n});\n\nObject.assign(globalThis, {\n  codecs,\n  RPCApi,\n  RPCProxy,\n  RPCObject,\n  RPCFactory,\n  Connection,\n  RPCServer,\n  RPCClient,\n  RPCSocket,\n  RPCConnect,\n  RPCListen\n});\n\nconst signalName = n =>\n  'SIG' +\n  [\n    ,\n    'HUP',\n    'INT',\n    'QUIT',\n    'ILL',\n    'TRAP',\n    'ABRT',\n    'BUS',\n    'FPE',\n    'KILL',\n    'USR1',\n    'SEGV',\n    'USR2',\n    'PIPE',\n    'ALRM',\n    'TERM',\n    'STKFLT',\n    'CHLD',\n    'CONT',\n    'STOP',\n    'TSTP',\n    'TTIN',\n    'TTOU',\n    'URG',\n    'XCPU',\n    'XFSZ',\n    'VTALRM',\n    'PROF',\n    'WINCH',\n    'IO',\n    'PWR',\n    'SYS'\n  ][n];\n\nfunction checkChildExited(child) {\n  const { exited, termsig, signaled, exitcode } = child;\n\n  return exited ? (signaled ? `signalled ${signalName(termsig)}` : `exitcode ${exitcode}`) : null;\n}\n\nfunction GetLoc(node) {\n  if(node.loc?.start?.line) {\n    const { line, column } = node.loc.start;\n    const [charOffset] = node.range ?? [node.start];\n    return new Location(line, column + 1, charOffset);\n  }\n}\n\nasync function LoadAST(source) {\n  if(!existsSync(source)) return null;\n  const child = Spawn('meriyah', ['-l', source], { block: false, stdio: ['inherit', 'pipe', 'inherit'] });\n\n  let s = '';\n  for(let chunk of readerSync(child.stdout)) s += toString(chunk);\n\n  const status = child.wait();\n  const { length } = s;\n  //console.log('loadAST', { source, length, status });\n\n  return JSON.parse(s);\n}\n\nfunction StartREPL(prefix = scriptName(), suffix = '') {\n  let repl = new REPL(`\\x1b[38;5;165m${prefix} \\x1b[38;5;39m${suffix}\\x1b[0m`, false);\n  repl.historyLoad(null);\n  let { log } = console;\n\n  console.log = repl.printFunction(log.bind(console, console.config({ compact: 2 })));\n  let { show } = repl;\n\n  repl.show = arg => {\n    if(isObject(arg)) {\n      if(arg[Symbol.for('print')]) return arg.toString ? arg.toString() : arg + '';\n\n      //if(Array.isArray(arg) && typeof arg[0] == 'object' &&  Array.isArray(arg[0])) {\n      if(Array.isArray(arg) && typeof arg[0] == 'object') {\n        if(!Array.isArray(arg[0]) && (arg.length !== 2 || !Array.isArray(arg[1]))) {\n          if(arg.length == 2 && Array.isArray(arg[1])) {\n            const [event, stack] = arg;\n            if(['type', 'reason'].every(k => k in event)) if (['id', 'name', 'line'].every(k => k in stack[0])) return [List([event]), List(stack)];\n          }\n\n          if(\n            arg.length >= 2 /*Object.keys(arg[0]).some(key => arg.every(a => key in a)) ||*/ &&\n            arg.map(item => Object.keys(item)).reduce((acc, keys, i) => (i == 0 ? keys : acc ? keys.equal(acc) && keys : false))\n          )\n            return repl.show(Table(arg));\n        }\n      }\n    }\n\n    return show.call(repl, arg);\n  };\n\n  repl.loadSaveOptions();\n  //repl.printPromise = () => {};\n  repl.run();\n  return repl;\n}\n\nexport function StartDebugger(args, connect, address) {\n  let env = {};\n\n  address ??= '127.0.0.1:9901';\n\n  env['DISPLAY'] ??= ':0.0';\n\n  if(connect) env['QUICKJS_DEBUG_ADDRESS'] = address;\n  else env['QUICKJS_DEBUG_LISTEN_ADDRESS'] = address;\n\n  const child = Spawn('qjsm', args, { block: false, env: { ...process.env, ...env }, stdio: ['pipe', 'pipe', 'pipe'] });\n\n  if(!connect) listeners[address] = child;\n\n  if(process.env.DEBUG) console.log('StartDebugger', { args, connect, address, env }, child);\n\n  children.add(child.pid);\n\n  return define(child, { args });\n}\n\nexport async function ConnectDebugger(address, skipToMain = true, callback) {\n  const addr = new SockAddr(AF_INET, ...address.split(':'));\n  const sock = new AsyncSocket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n\n  const ret = await sock.connect(addr);\n\n  if(typeof callback != 'function' && typeof callback == 'object') callback = callback.onMessage;\n\n  if(process.env.DEBUG) console.log('ConnectDebugger', { address, skipToMain, sock });\n\n  if(ret >= 0) {\n    if(process.env.DEBUG) console.log('Connected', +sock, 'to', sock.remote);\n    sockets.add(sock);\n  }\n\n  const dbg = this ?? {};\n\n  define(dbg, {\n    sock,\n    addr,\n    async process(callback) {\n      if(process.env.DEBUG) console.log('Debugger process()', callback);\n\n      let ret,\n        lenBuf = new ArrayBuffer(9);\n\n      try {\n        while((ret = await sock.recv(lenBuf, 0, 9)) > 0) {\n          let len = parseInt(toString(lenBuf, 0, ret), 16);\n\n          let dataBuf = new ArrayBuffer(len);\n          let offset = 0;\n\n          while(offset < len) {\n            ret = await sock.recv(dataBuf, offset, len - offset);\n\n            if(ret <= 0) {\n              sock.close();\n              break;\n            }\n            offset += ret;\n          }\n          if(ret <= 0) break;\n\n          let s = toString(dataBuf);\n          let obj = JSON.parse(s);\n\n          if(process.env.DEBUG) console.log('process() read:',obj);\n\n\n          const funcName = '\\x1b[38;5;208mPROCESS\\x1b[0m';\n\n          if(process.env.DEBUG) console.log(funcName + ' \\x1b[38;5;196mbefore callback\\x1b[0m', obj);\n          let result = callback(obj);\n          await result;\n        }\n      } catch(error) {\n        console.log('Socket error:', error.message + '\\n' + error.stack);\n      } finally {\n        sock.close();\n        return ret;\n      }\n    },\n    async sendMessage(msg) {\n      if(typeof msg != 'string') msg = JSON.stringify(msg);\n      const ret = sock.send(msg.length.toString(16).padStart(8, '0') + '\\n' + msg);\n\n      if(process.env.DEBUG) console.log('\\x1b[38;5;33mSEND\\x1b[0m[' + sock.fd + '] (' + ret + ') ' + msg);\n\n      return ret;\n    }\n  });\n\n  if(process.env.DEBUG) console.log('ConnectDebugger', console.config({ depth: 1, compact: 0 }), dbg);\n\n  LaunchDebugger(dbg, skipToMain);\n\n  return dbg;\n}\n\nfunction LaunchDebugger(dbg, skipToMain = true) {\n  if(process.env.DEBUG) console.log('LaunchDebugger', console.config({ depth: 1, compact: 0 }), { dbg, skipToMain });\n\n  if(skipToMain) {\n    dbg.onstopped = once(async (...args) => {\n      let st = await dispatch.stackTrace();\n\n      script ??= st[0].filename;\n\n      let fns = await files[script].match(/main$/gi);\n      console.log('matched /main$/gi', fns /*.map(({ name }) => name)*/);\n\n      dbg.onstopped = null;\n      let resp;\n      console.log('breakpoints()', console.config({ compact: 0 }), { script, fns });\n      resp = await dispatch.breakpoints(script, fns);\n      console.log('breakpoints() response:', console.config({ compact: 0 }), resp);\n\n      setTimeout(async () => {\n        resp = await dispatch.continue();\n        console.log('continue() response:', console.config({ compact: 0 }), resp);\n      }, 100);\n    });\n  }\n  //dbg.onstopped ??= OnStopped;\n  let dispatch = (dbg.dispatch = globalThis.dispatch = new DebuggerDispatcher(dbg));\n\n  Object.assign(globalThis, bindMethods(dispatch, DebuggerDispatcher.prototype, {}));\n  Object.assign(globalThis, {\n    GetLoc,\n    PrintStackFrame,\n    PrintStack,\n    async value(name) {\n      let stack = await dispatch.stackTrace();\n\n      for(let frame of stack) {\n        let { local } = await dispatch.variables(frame.id, 1);\n\n        let v = local.find(v => v.name == name);\n\n        return v;\n      }\n    }\n  });\n\n  return dbg;\n}\n\nasync function PrintStackFrame(frame) {\n  if(frame === undefined) frame = 0;\n\n  let { id, name, filename, line } = frame;\n  let params;\n\n  try {\n    params = (await files[filename].functions).find(f => f.name == name)?.params;\n  } catch(e) {}\n\n  if(params) name += `(${params.join(', ')})`;\n  let loc = line !== undefined ? new Location(filename, line) : undefined;\n  let code = line !== undefined ? files[filename].line(line - 1) : undefined;\n  return [`#${id}`, ` at ${name.padEnd(30)}`, loc ? ' in ' + loc : ''].concat(code ? [code] : []);\n}\n\nasync function PrintStack(stack) {\n  stack ??= await stackTrace();\n  let frames = [];\n  for(let frame of stack) {\n    frames.push(await PrintStackFrame(frame));\n  }\n  return List(frames);\n}\n\ndecorate(\n  (member, obj, prop) =>\n    ({\n      async breakpoints(...args) {\n        if(!(typeof args[0] == 'string')) args.unshift(globalThis.script);\n\n        let [file, breakpoints] = args;\n        \n        file = absolute(file);\n        \n        if(types.isPromise(breakpoints)) breakpoints = await breakpoints;\n        if(Array.isArray(breakpoints)) breakpoints = breakpoints.map(b => filterKeys(b, ['name', 'line', 'column']));\n        \n        let ret = await member.call(this, file, breakpoints);\n        \n        if(ret.path) ret.path = relative(ret.path);\n        if(ret?.breakpoints?.path) ret.breakpoints.path = relative(ret.breakpoints.path);\n        \n       // console.log('breakpoints =', ret);\n\n        return ret;\n      },\n      async stackTrace(frame) {\n        let ret = (await member.call(this, frame)).map(frame => (typeof frame.filename == 'string' && (frame.filename = relative(absolute(frame.filename))), frame));\n        console.log('stackTrace =', ret);\n        return ret;\n      },\n      async scopes(n) {\n        let stack = await this.stackTrace();\n        if(n >= stack.length) return null;\n        let scopes = [];\n\n        for(let scope of await member.call(this, n)) {\n          const variables = await this.variables(scope.reference);\n          scope.variables = variables.length;\n          scopes.push(scope);\n        }\n\n        return scopes;\n      },\n      async waitRun() {\n        const [event, stack] = await member.call(this);\n        define(globalThis, { event, stack });\n        //console.log('waitRun', { event, stack });\n\n        repl.printStatus((await PrintStackFrame(stack[0])).join(' ') + '\\n');\n\n        const { filename, line } = stack[0];\n\n        define(globalThis, { file: filename, line });\n        return [event, stack];\n      },\n      async variables(n, depth = 0) {\n        const list = await member.call(this, n);\n        const ret = [];\n        const add = item => (item.variablesReference === 0 && delete item.variablesReference, ret.push(item));\n\n        for(let item of list) {\n          add(item);\n\n          if(depth > 0) {\n            if(item.variablesReference > 0) {\n              let children = await this.variables(item.variablesReference, depth - 1);\n\n              for(let child of children) {\n                if(!isNaN(child.name)) child.name = '  [' + child.name + ']';\n                else child.name = '  .' + child.name;\n\n                if(child.value?.startsWith('function ')) continue;\n                add(child);\n              }\n            }\n          }\n        }\n\n        return define(ret, {\n          [Symbol.for('print')]: true,\n          toString() {\n            return Table(this, ['name', 'value', 'type', 'variablesReference']);\n          }\n        });\n      }\n    }[prop] || member),\n\n  DebuggerDispatcher.prototype\n);\n\nconst mkaddr = (\n  (port = 8777) =>\n  () =>\n    `127.0.0.1:${port--}`\n)();\n\nasync function NewDebugger(args, skipToMain = false, address) {\n  address ??= mkaddr();\n\n  const child = (globalThis.child = globalThis.listeners[address] || StartDebugger(args, false, address));\n  let dispatch;\n\n  globalThis.script = args[0];\n\n  sleep(500);\n\n  const dbg = this ?? {};\n\n  define(dbg, {\n    child,\n    args,\n    kill: () => (children.delete(child.pid), kill(child.pid, SIGTERM))\n  });\n\n  await ConnectDebugger.call(dbg, address, skipToMain);\n\n  return dbg; //dispatch;\n}\n\nasync function OnStopped(msg) {\n  const st = (globalThis.stack = await dispatch.stackTrace());\n  let [top] = st;\n  let { id, name, filename, line } = top;\n  repl.printStatus(`#${id} ${name}@${filename}:${line}  ` + files[filename].line(line));\n}\n\nfunction URLWorker(script) {\n  const dataURL = s => `data:application/javascript;charset=utf-8;base64,` + btoa(s).replaceAll('+', '-').replaceAll('/', '_').replaceAll('=', '');\n\n  const url = dataURL(script);\n  const w = new Worker(url);\n\n  return define(new Repeater((push, stop) => (w.onmessage = push)), {\n    postMessage: msg => w.postMessage(msg)\n  });\n}\n\nfunction main(...args) {\n  const base = scriptName().replace(/\\.[a-z]*$/, '');\n\n  const config = ReadJSON(`.${base}-config`) ?? {};\n\n  globalThis.console = new Console(stderr, {\n    inspectOptions: { depth: Infinity, compact: 1, maxArrayLength: Infinity, customInspect: true }\n  });\n\n  let params = getOpt(\n    {\n      verbose: [false, (a, v) => (v | 0) + 1, 'v'],\n      listen: [false, null, 'l'],\n      connect: [false, null, 'c'],\n      client: [false, null, 'C'],\n      server: [false, null, 'S'],\n      debug: [false, null, 'x'],\n      tls: [false, (v, pv, o) => ((o.tls = true), true), 't'],\n      'no-tls': [false, (v, pv, o) => ((o.tls = false), true), 'T'],\n      address: [true, null, 'a'],\n      port: [true, null, 'p'],\n      quiet: [false, null, 'q'],\n      'ssl-cert': [true, null],\n      'ssl-private-key': [true, null],\n      'ssl-ca': [true, null],\n      '@': 'address,port'\n    },\n    args\n  );\n  if(params['no-tls'] === true) params.tls = false;\n  const {\n    address = '0.0.0.0',\n    port = 8999,\n    'ssl-cert': sslCert = 'localhost.crt',\n    'ssl-private-key': sslPrivateKey = 'localhost.key',\n    'ssl-ca': sslCA = '/etc/ssl/certs/ca-certificates.crt',\n    quiet = false,\n    debug = false,\n    tls = true\n  } = params;\n\n  const listen = params.connect && !params.listen ? false : true;\n\n  let name = scriptArgs[0];\n  name = name\n    .replace(/.*\\//, '')\n    .replace(/-/g, ' ')\n    .replace(/\\.[^\\/.]*$/, '');\n\n  let [prefix, suffix] = name.split(' ');\n\n  let protocol = new WeakMap();\n  let ws2dbg = (globalThis.ws2dbg = mapWrapper(new WeakMap()));\n  let dbg2ws = (globalThis.dbg2ws = mapWrapper(new WeakMap()));\n\n  let sockets = (globalThis.sockets ??= new Set());\n  //console.log(name, params['@']);\n\n  function createWS(url, callbacks, listen) {\n    //console.log('createWS', { url, callbacks, listen });\n\n    setLog(\n      quiet ? 0 : LLL_USER | (((debug > 1 ? LLL_INFO : LLL_WARN) << 1) - 1),\n      quiet || params.debug <= 1\n        ? () => {}\n        : (level, str) => {\n            if(/BIND_PROTOCOL|DROP_PROTOCOL|CHECK_ACCESS_RIGHTS|ADD_HEADERS/.test(str)) return;\n            console.log(logLevels[level].padEnd(10), str.trim());\n          }\n    );\n\n    let options;\n    let dbg;\n    console.log('createWS', { url });\n    return createServer(\n      url,\n      (options = {\n        tls: params.tls,\n        sslCert,\n        sslPrivateKey,\n        sslCA,\n        mimetypes: [\n          ['.svgz', 'application/gzip'],\n          ['.mjs', 'application/javascript'],\n          ['.es', 'application/javascript'],\n          ['.wasm', 'application/octet-stream'],\n          ['.eot', 'application/vnd.ms-fontobject'],\n          ['.lib', 'application/x-archive'],\n          ['.bz2', 'application/x-bzip2'],\n          ['.gitignore', 'text/plain'],\n          ['.cmake', 'text/plain'],\n          ['.hex', 'text/plain'],\n          ['.md', 'text/plain'],\n          ['.pbxproj', 'text/plain'],\n          ['.wat', 'text/plain'],\n          ['.c', 'text/x-c'],\n          ['.h', 'text/x-c'],\n          ['.cpp', 'text/x-c++'],\n          ['.hpp', 'text/x-c++'],\n          ['.filters', 'text/xml'],\n          ['.plist', 'text/xml'],\n          ['.storyboard', 'text/xml'],\n          ['.vcxproj', 'text/xml'],\n          ['.bat', 'text/x-msdos-batch'],\n          ['.mm', 'text/x-objective-c'],\n          ['.m', 'text/x-objective-c'],\n          ['.sh', 'text/x-shellscript']\n        ],\n        mounts: [\n          ['/proxy', 'ipv4:127.0.0.1:22', null, 'proxy-ws-raw-ws'],\n          ['/lws', 'https://www.google.ch/', null, ''],\n          ['/', '.', 'debugger.html'],\n          function* config(req, res) {\n            const { body, headers } = req;\n            console.log('/config', { req, res });\n            console.log('*config', { body, headers });\n            yield '{}';\n          },\n          function* files(req, res) {\n            const { body, headers } = req;\n            yield fs\n              .readdirSync('.')\n              .sort()\n              .map(f => f + '\\n')\n              .join('');\n          }\n        ],\n        ...url,\n        ...callbacks,\n        block: false,\n        onConnect(ws, req) {\n          console.log('onConnect', { ws, req }, req && req.headers);\n\n          Object.defineProperties(ws, {\n            sendMessage: {\n              value: async function sendMessage(msg) {\n                let ret = await this.send(JSON.stringify(msg));\n                console.log(`ws.sendMessage(`, console.config({ compact: 1 }), msg, `) = ${ret}`);\n                return ret;\n              },\n              enumerable: false\n            },\n            dbg: { value: null, writable: true, enumerable: false }\n          });\n\n          sockets.add(ws);\n        },\n        onClose(ws) {\n          console.log('onClose', { ws, dbg });\n          dbg?.close();\n\n          protocol.delete(ws);\n          sockets.delete(ws);\n        },\n        onError(ws) {\n          console.log('onError', ws);\n        },\n        onRequest(req, resp) {\n          const { method, headers } = req;\n          //console.log('\\x1b[38;5;33monRequest\\x1b[0m [\\n  ', req, ',\\n  ', resp, '\\n]');\n          const { body, url } = resp;\n\n          const file = url.path.slice(1);\n          const dir = file.replace(/\\/[^\\/]*$/g, '');\n          console.log('\\x1b[38;5;33monRequest\\x1b[0m', { file, dir, body });\n\n          if(file.endsWith('.js') && resp.body) {\n            //console.log('onRequest', { file, dir });\n            const re = /^(\\s*(im|ex)port[^\\n]*from ['\"])([^./'\"]*)(['\"]\\s*;[\\t ]*\\n?)/gm;\n\n            resp.body = body.replaceAll(re, (match, p1, p0, p2, p3, offset) => {\n              if(!/[\\/\\.]/.test(p2)) {\n                let fname = `${p2}.js`;\n\n                if(!existsSync(dir + '/' + fname)) return `/* ${match} */`;\n\n                match = [p1, './' + fname, p3].join('');\n\n                //console.log('args', { match, p1, p2, p3, offset });\n              }\n              return match;\n            });\n          }\n\n          return resp;\n        },\n        onMessage(ws, data) {\n          dbg = ws2dbg(ws);\n\n          // showSessions();\n\n          handleCommand(ws, data);\n\n          async function handleCommand(ws, data) {\n            let obj = JSON.parse(data);\n\n            console.log('onMessage(x)', obj);\n\n            const { command, ...rest } = obj;\n            // console.log('onMessage', command, rest);\n            const { connect = true, address = '127.0.0.1:' + Math.round(Math.random() * (65535 - 1024)) + 1024, args = [] } = rest;\n\n            switch (obj.type ?? command) {\n              case 'start': {\n                dbg = globalThis.dbg = { child: StartDebugger(args, connect, address) };\n\n                ws2dbg(ws, dbg);\n                dbg2ws(dbg, ws);\n\n                const [stdin, stdout, stderr] = child.stdio;\n                for(let fd of [stdout, stderr]) {\n                  let flags = fcntl(fd, F_GETFL);\n                  flags |= O_NONBLOCK;\n                  fcntl(fd, F_SETFL, flags);\n                }\n\n                console.log('stdout flags', fcntl(stdout, F_GETFL) & O_NONBLOCK, 'O_NONBLOCK=', O_NONBLOCK);\n\n                const forward = (fd, name) =>\n                  consume(reader(fd), buf => {\n                    let data = toString(buf.slice(0, r));\n                    //console.log(`read(${fd}, buf) = ${r} (${quote(data, \"'\")})`);\n\n                    ws.sendMessage({\n                      type: 'output',\n                      channel: name,\n                      data\n                    });\n                  });\n                forward(stdout, 'stdout');\n                forward(stderr, 'stderr');\n                define(globalThis, { stdout, stderr, reader });\n\n                sleep(1000);\n\n                let tid, exited;\n\n                tid = setInterval(() => {\n                  let pid = child.wait(WNOHANG);\n\n                  if((exited = checkChildExited(child))) {\n                    ws.sendMessage({\n                      type: 'error',\n                      command: 'start',\n                      message: `child process ${pid} ${exited}`\n                    });\n                    clearInterval(tid);\n                  }\n                }, 1000);\n\n                let pid = child.wait(WNOHANG);\n\n                if((exited = checkChildExited(child))) {\n                  ws.sendMessage({\n                    type: 'error',\n                    command: 'start',\n                    message: `unable to start debugger: ${exited}`\n                  });\n                  break;\n                }\n\n                const cwd = process.cwd();\n                ws.sendMessage({\n                  type: 'response',\n                  response: {\n                    command: 'start',\n                    args,\n                    cwd,\n                    address\n                  }\n                });\n\n                break;\n              }\n\n              case 'connect': {\n                dbg = globalThis.dbg = await ConnectDebugger.call(globalThis.dbg, address, false, (dbg, sock) => {\n                  console.log('wait(WNOHANG) =', child.wait(WNOHANG));\n                  console.log('child', child);\n                });\n\n                ws2dbg(ws, dbg);\n                dbg2ws(dbg, ws);\n\n                console.log('connect command', { ws, dbg });\n                sockets.add(dbg.sock);\n\n                const cwd = process.cwd();\n                let connected;\n\n                console.log('dbg', dbg);\n                break;\n              }\n\n              case 'file': {\n                const { path } = rest;\n                const data = ReadFile(path, 'utf-8');\n                //ws.send(JSON.stringify({ type: 'response', response: { command: 'file', path, data } }));\n\n                const lexer = new Lexer(data, path);\n                console.log('lexer', lexer);\n                const lines = [];\n\n                for(;;) {\n                  const { pos, size } = lexer;\n                  console.log('lexer', { pos, size });\n                  let result = lexer.next();\n                  if(result.done) break;\n                  const token = result.value;\n                  console.log('token', {\n                    lexeme: token.lexeme,\n                    id: token.id,\n                    loc: token.loc + ''\n                  });\n                  const { type, id, lexeme, loc } = token;\n                  const { line, column, file } = loc;\n                  //console.log('token', {lexeme,id,line});\n\n                  if(!lines[line - 1]) lines.push([]);\n                  let a = lines[line - 1];\n                  a.push([lexeme, id]);\n                }\n                console.log('lines', lines);\n                break;\n              }\n\n              case 'request': {\n                const { request } = obj;\n                const { request_seq, command, args } = request;\n\n                let response = await dbg.dispatch.sendRequest(command, args, request_seq);\n\n                if(command == 'stackTrace') {\n                  response.body = response.body.map(frame => {\n                    if(frame.filename) frame.filename = path.relative(frame.filename);\n\n                    return frame;\n                  });\n                }\n                console.log('Request', { request, response });\n\n                ws.sendMessage(response);\n\n                break;\n              }\n\n              default: {\n                /*  console.log('send to debugger', { obj });\n                dbg.sendMessage(obj);*/\n                const dbg = ws2dbg(ws);\n                const { pid } = dbg.child;\n                console.log('send to debugger', { pid, obj });\n\n                dbg.sendMessage(obj);\n\n                //DebuggerProtocol.send(dbg, data);\n                break;\n              }\n            }\n          }\n        },\n        ...(url && url.host ? url : {})\n      })\n    );\n  }\n\n  console.log('XX');\n\n  delete globalThis.DEBUG;\n\n  let inputBuf = new ArrayBuffer(10);\n  ttySetRaw(0);\n\n  setReadHandler(0, () => {\n    let r = readSync(0, inputBuf, 0, inputBuf.byteLength);\n\n    if(r > 0) {\n      let a = new Uint8Array(inputBuf.slice(0, r));\n\n      //console.log('a', a);\n\n      for(let i = 0; i < a.length; i++) if(a[i] == 13) a[i] = 10;\n\n      if(a.length == 1 && a[0] == 127) a = new Uint8Array([8, 0x20, 8]);\n\n      if(a.length == 1 && a[0] == 27) showSessions();\n      else writeSync(1, a.buffer);\n    }\n  });\n\n  function showSessions() {\n    let sessions = getSessions();\n    console.log('sessions', console.config({ maxArrayLength: Infinity, depth: 4, customInspect: true, compact: 0 }), sessions);\n  }\n\n  //setInterval(() => console.log('interval'), 5000);\n\n  globalThis.server = createWS(`wss://${address}:8998/ws`, {}, true);\n\n  define(globalThis, {\n    get connections() {\n      return [...globalThis.sockets].map(ws => ws2dbg(ws));\n    },\n    get socklist() {\n      return [...globalThis.sockets];\n    },\n    net: { setLog, LLL_USER, LLL_NOTICE, LLL_WARN, createServer },\n    TrivialSyntaxHighlighter,\n    NewDebugger,\n    LaunchDebugger,\n    StartDebugger,\n    ConnectDebugger,\n    DebuggerDispatcher,\n    DebuggerProtocol,\n    GetFunctionName,\n    FindFunctions,\n    LoadAST,\n    Table,\n    List,\n    get file() {\n      return this.files[this.script];\n    },\n    files: propertyLookup(\n      (globalThis.fileCache = {}),\n      memoize((file, source) => {\n        source ??= tryCatch(\n          () => TrivialSyntaxHighlighter(ReadFile(file)),\n          s => s,\n          () => ReadFile(file)\n        );\n        return define(\n          {\n            source,\n            indexlist: [...source.matchAll(/^[^\\n]*/gm)].map(m => m.index)\n          },\n          lazyProperties(\n            {\n              line(i, j) {\n                if(i === undefined) return '';\n                const { source, indexlist } = this;\n                j ??= i + 1;\n                const m = mod(indexlist.length - 1);\n                const [start, end] = [indexlist[m(i)], indexlist[m(j)]];\n                let line = source.slice(start, (end ?? 0) - 1);\n\n                if([...line.matchAll(/\\x1b([^A-Za-z]*[A-Za-z])/g)].last != '\\x1b[0m') line += '\\x1b[0m';\n\n                return line;\n              },\n              match(re) {\n                if(typeof re == 'string') re = new RegExp(re, 'gi');\n\n                return this.functions.then(fns =>\n                  define(\n                    fns.filter(({ name }) => re.test(name)),\n                    { [Symbol.toStringTag]: 'FunctionList', file }\n                  )\n                );\n              }\n            },\n            {\n              // estree: () => ,\n              async functions() {\n                return (globalThis.functionCache = [...FindFunctions((globalThis.ast = await LoadAST(file)))].map(([name, loc, params, expression, path]) =>\n                  define(\n                    {\n                      name,\n                      params,\n                      ...loc,\n                      expression\n                    },\n                    { path }\n                  )\n                ));\n              }\n            },\n            { async: false }\n          )\n        );\n      })\n    ),\n    async repeat(cond, fn, ...args) {\n      let r;\n      if(typeof cond == 'number') {\n        let n = cond;\n        cond = (r, i) => i >= n || r === true;\n      }\n      for(let i = 0; ; i++) {\n        r = await fn(...args);\n\n        if(cond(r, i)) break;\n      }\n      return r;\n    },\n    repl: StartREPL()\n  });\n\n  function quit(why) {\n    console.log(`quit('${why}')`);\n\n    let cfg = { inspectOptions: console.options };\n    WriteJSON(`.${base}-config`, cfg);\n    // repl.cleanup(why);\n  }\n}\n\ntry {\n  main(...scriptArgs.slice(1));\n} catch(error) {\n  console.log(`FAIL: ${error?.message ?? error}\\n${error?.stack}`);\n} finally {\n  //console.log('SUCCESS');\n}\n",
			"file": "debugger-server.js",
			"file_size": 29755,
			"file_write_time": 133861370719188489,
			"settings":
			{
				"buffer_size": 29794,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					448,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAALQpAAAAAAAAtSkAAAAAAAAAAAAAtSkAAAAAAAC9KQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC0KQAAAAAAALQpAAAAAAAA////////738"
				],
				[
					459,
					1,
					"insert",
					{
						"characters": "let"
					},
					"BQAAABopAAAAAAAAGykAAAAAAAAAAAAAGykAAAAAAAAbKQAAAAAAAAYAAAByZXR1cm6wKQAAAAAAALApAAAAAAAACAAAACAgICAgICAgGykAAAAAAAAcKQAAAAAAAAAAAAAcKQAAAAAAAB0pAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAgKQAAAAAAABopAAAAAAAAAAAAAAAAUkA"
				],
				[
					460,
					1,
					"insert",
					{
						"characters": " ret="
					},
					"BQAAAB0pAAAAAAAAHikAAAAAAAAAAAAAHikAAAAAAAAfKQAAAAAAAAAAAAAfKQAAAAAAACApAAAAAAAAAAAAACApAAAAAAAAISkAAAAAAAAAAAAAISkAAAAAAAAiKQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAdKQAAAAAAAB0pAAAAAAAAAAAAAAAA8L8"
				],
				[
					462,
					1,
					"insert",
					{
						"characters": "\n\nreturn"
					},
					"CwAAALYpAAAAAAAAtykAAAAAAAAAAAAAtykAAAAAAAC/KQAAAAAAAAAAAAC/KQAAAAAAAMApAAAAAAAAAAAAAMApAAAAAAAAyCkAAAAAAAAAAAAAtykAAAAAAAC3KQAAAAAAAAgAAAAgICAgICAgIMApAAAAAAAAwSkAAAAAAAAAAAAAwSkAAAAAAADCKQAAAAAAAAAAAADCKQAAAAAAAMMpAAAAAAAAAAAAAMMpAAAAAAAAxCkAAAAAAAAAAAAAxCkAAAAAAADFKQAAAAAAAAAAAADFKQAAAAAAAMYpAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC2KQAAAAAAALYpAAAAAAAA////////738"
				],
				[
					463,
					1,
					"insert",
					{
						"characters": " ret;"
					},
					"BQAAAMYpAAAAAAAAxykAAAAAAAAAAAAAxykAAAAAAADIKQAAAAAAAAAAAADIKQAAAAAAAMkpAAAAAAAAAAAAAMkpAAAAAAAAyikAAAAAAAAAAAAAyikAAAAAAADLKQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADGKQAAAAAAAMYpAAAAAAAAAAAAAAAA8L8"
				],
				[
					465,
					1,
					"insert",
					{
						"characters": "\nconsole.log"
					},
					"DAAAALcpAAAAAAAAuCkAAAAAAAAAAAAAuCkAAAAAAAC5KQAAAAAAAAAAAAC5KQAAAAAAALopAAAAAAAAAAAAALopAAAAAAAAuykAAAAAAAAAAAAAuykAAAAAAAC8KQAAAAAAAAAAAAC8KQAAAAAAAL0pAAAAAAAAAAAAAL0pAAAAAAAAvikAAAAAAAAAAAAAvikAAAAAAAC/KQAAAAAAAAAAAAC/KQAAAAAAAMApAAAAAAAAAAAAAMApAAAAAAAAwSkAAAAAAAAAAAAAwSkAAAAAAADCKQAAAAAAAAAAAADCKQAAAAAAAMMpAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC3KQAAAAAAALcpAAAAAAAAAAAAAABgZUA"
				],
				[
					466,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAMMpAAAAAAAAxSkAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADDKQAAAAAAAMMpAAAAAAAAAAAAAAAA8L8"
				],
				[
					467,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAMQpAAAAAAAAxikAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADEKQAAAAAAAMQpAAAAAAAAAAAAAAAA8L8"
				],
				[
					468,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAMUpAAAAAAAAxikAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADFKQAAAAAAAMUpAAAAAAAAAAAAAAAA8L8"
				],
				[
					469,
					1,
					"left_delete",
					null,
					"AQAAAMUpAAAAAAAAxSkAAAAAAAABAAAAMA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADGKQAAAAAAAMYpAAAAAAAAAAAAAAAA8L8"
				],
				[
					470,
					1,
					"insert",
					{
						"characters": "Stack:"
					},
					"BgAAAMUpAAAAAAAAxikAAAAAAAAAAAAAxikAAAAAAADHKQAAAAAAAAAAAADHKQAAAAAAAMgpAAAAAAAAAAAAAMgpAAAAAAAAySkAAAAAAAAAAAAAySkAAAAAAADKKQAAAAAAAAAAAADKKQAAAAAAAMspAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADFKQAAAAAAAMUpAAAAAAAAAAAAAAAA8L8"
				],
				[
					471,
					6,
					"left_delete",
					null,
					"BgAAAMopAAAAAAAAyikAAAAAAAABAAAAOskpAAAAAAAAySkAAAAAAAABAAAAa8gpAAAAAAAAyCkAAAAAAAABAAAAY8cpAAAAAAAAxykAAAAAAAABAAAAYcYpAAAAAAAAxikAAAAAAAABAAAAdMUpAAAAAAAAxSkAAAAAAAABAAAAUw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADLKQAAAAAAAMspAAAAAAAAAAAAAAAA8L8"
				],
				[
					472,
					1,
					"insert",
					{
						"characters": "stackTrace"
					},
					"CgAAAMUpAAAAAAAAxikAAAAAAAAAAAAAxikAAAAAAADHKQAAAAAAAAAAAADHKQAAAAAAAMgpAAAAAAAAAAAAAMgpAAAAAAAAySkAAAAAAAAAAAAAySkAAAAAAADKKQAAAAAAAAAAAADKKQAAAAAAAMspAAAAAAAAAAAAAMspAAAAAAAAzCkAAAAAAAAAAAAAzCkAAAAAAADNKQAAAAAAAAAAAADNKQAAAAAAAM4pAAAAAAAAAAAAAM4pAAAAAAAAzykAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADFKQAAAAAAAMUpAAAAAAAAAAAAAAAA8L8"
				],
				[
					473,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAM8pAAAAAAAA0CkAAAAAAAAAAAAA0CkAAAAAAADRKQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADPKQAAAAAAAM8pAAAAAAAAAAAAAAAA8L8"
				],
				[
					475,
					1,
					"insert",
					{
						"characters": "m"
					},
					"AQAAANIpAAAAAAAA0ykAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADSKQAAAAAAANIpAAAAAAAAAAAAAAAA8L8"
				],
				[
					476,
					1,
					"left_delete",
					null,
					"AQAAANIpAAAAAAAA0ikAAAAAAAABAAAAbQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADTKQAAAAAAANMpAAAAAAAAAAAAAAAA8L8"
				],
				[
					477,
					1,
					"insert",
					{
						"characters": ",ret"
					},
					"BAAAANIpAAAAAAAA0ykAAAAAAAAAAAAA0ykAAAAAAADUKQAAAAAAAAAAAADUKQAAAAAAANUpAAAAAAAAAAAAANUpAAAAAAAA1ikAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADSKQAAAAAAANIpAAAAAAAAAAAAAAAA8L8"
				],
				[
					479,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAANcpAAAAAAAA2CkAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADXKQAAAAAAANcpAAAAAAAAAAAAAAAA8L8"
				],
				[
					483,
					1,
					"left_delete",
					null,
					"AQAAALYpAAAAAAAAtikAAAAAAAABAAAACg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC3KQAAAAAAALcpAAAAAAAAAAAAAAAAckA"
				],
				[
					496,
					6,
					"left_delete",
					null,
					"BgAAAKsoAAAAAAAAqygAAAAAAAABAAAAfakoAAAAAAAAqSgAAAAAAAACAAAAICCnKAAAAAAAAKcoAAAAAAAAAgAAACAgpSgAAAAAAAClKAAAAAAAAAIAAAAgIKMoAAAAAAAAoygAAAAAAAACAAAAICCiKAAAAAAAAKIoAAAAAAAAAQAAAAo",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACsKAAAAAAAAKwoAAAAAAAAAAAAAAAA8L8"
				],
				[
					498,
					2,
					"left_delete",
					null,
					"AgAAAEgoAAAAAAAASCgAAAAAAAABAAAAe0coAAAAAAAARygAAAAAAAABAAAAIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABJKAAAAAAAAEkoAAAAAAAAAAAAAADAiEA"
				],
				[
					500,
					1,
					"left_delete",
					null,
					"AQAAAB8oAAAAAAAAHygAAAAAAAABAAAACg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAgKAAAAAAAACAoAAAAAAAAAAAAAABgdUA"
				],
				[
					503,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAB8oAAAAAAAAICgAAAAAAAAAAAAAICgAAAAAAAAoKAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAfKAAAAAAAAB8oAAAAAAAAAAAAAACIhEA"
				],
				[
					508,
					1,
					"revert",
					null,
					"",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADILwAAAAAAAMgvAAAAAAAAAAAAAAAAUkA"
				],
				[
					527,
					1,
					"insert",
					{
						"characters": "ket"
					},
					"BAAAAKAoAAAAAAAAoSgAAAAAAAAAAAAAoSgAAAAAAAChKAAAAAAAAAYAAAByZXR1cm6hKAAAAAAAAKIoAAAAAAAAAAAAAKIoAAAAAAAAoygAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACgKAAAAAAAAKYoAAAAAAAAAAAAAAAA8L8"
				],
				[
					528,
					3,
					"left_delete",
					null,
					"AwAAAKIoAAAAAAAAoigAAAAAAAABAAAAdKEoAAAAAAAAoSgAAAAAAAABAAAAZaAoAAAAAAAAoCgAAAAAAAABAAAAaw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACjKAAAAAAAAKMoAAAAAAAAAAAAAAAA8L8"
				],
				[
					529,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAAKAoAAAAAAAAoSgAAAAAAAAAAAAAoSgAAAAAAACiKAAAAAAAAAAAAACiKAAAAAAAAKMoAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACgKAAAAAAAAKAoAAAAAAAAAAAAAAAA8L8"
				],
				[
					530,
					1,
					"insert",
					{
						"characters": " ret="
					},
					"BQAAAKMoAAAAAAAApCgAAAAAAAAAAAAApCgAAAAAAAClKAAAAAAAAAAAAAClKAAAAAAAAKYoAAAAAAAAAAAAAKYoAAAAAAAApygAAAAAAAAAAAAApygAAAAAAACoKAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACjKAAAAAAAAKMoAAAAAAAAAAAAAAAA8L8"
				],
				[
					532,
					1,
					"insert",
					{
						"characters": "\n\nreturn"
					},
					"CwAAANQoAAAAAAAA1SgAAAAAAAAAAAAA1SgAAAAAAADdKAAAAAAAAAAAAADdKAAAAAAAAN4oAAAAAAAAAAAAAN4oAAAAAAAA5igAAAAAAAAAAAAA1SgAAAAAAADVKAAAAAAAAAgAAAAgICAgICAgIN4oAAAAAAAA3ygAAAAAAAAAAAAA3ygAAAAAAADgKAAAAAAAAAAAAADgKAAAAAAAAOEoAAAAAAAAAAAAAOEoAAAAAAAA4igAAAAAAAAAAAAA4igAAAAAAADjKAAAAAAAAAAAAADjKAAAAAAAAOQoAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADUKAAAAAAAANQoAAAAAAAA////////738"
				],
				[
					533,
					1,
					"insert",
					{
						"characters": " ret;"
					},
					"BQAAAOQoAAAAAAAA5SgAAAAAAAAAAAAA5SgAAAAAAADmKAAAAAAAAAAAAADmKAAAAAAAAOcoAAAAAAAAAAAAAOcoAAAAAAAA6CgAAAAAAAAAAAAA6CgAAAAAAADpKAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADkKAAAAAAAAOQoAAAAAAAAAAAAAAAA8L8"
				],
				[
					545,
					1,
					"paste",
					null,
					"AQAAANUoAAAAAAAA/ygAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADVKAAAAAAAANUoAAAAAAAAAAAAAAAA8L8"
				],
				[
					554,
					1,
					"insert",
					{
						"characters": "breajk"
					},
					"BwAAAOooAAAAAAAA6ygAAAAAAAAAAAAA6ygAAAAAAADrKAAAAAAAAAoAAABzdGFja1RyYWNl6ygAAAAAAADsKAAAAAAAAAAAAADsKAAAAAAAAO0oAAAAAAAAAAAAAO0oAAAAAAAA7igAAAAAAAAAAAAA7igAAAAAAADvKAAAAAAAAAAAAADvKAAAAAAAAPAoAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADqKAAAAAAAAPQoAAAAAAAAAAAAAAAA8L8"
				],
				[
					555,
					2,
					"left_delete",
					null,
					"AgAAAO8oAAAAAAAA7ygAAAAAAAABAAAAa+4oAAAAAAAA7igAAAAAAAABAAAAag",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADwKAAAAAAAAPAoAAAAAAAAAAAAAAAA8L8"
				],
				[
					556,
					1,
					"insert",
					{
						"characters": "kpoints"
					},
					"BwAAAO4oAAAAAAAA7ygAAAAAAAAAAAAA7ygAAAAAAADwKAAAAAAAAAAAAADwKAAAAAAAAPEoAAAAAAAAAAAAAPEoAAAAAAAA8igAAAAAAAAAAAAA8igAAAAAAADzKAAAAAAAAAAAAADzKAAAAAAAAPQoAAAAAAAAAAAAAPQoAAAAAAAA9SgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADuKAAAAAAAAO4oAAAAAAAAAAAAAAAA8L8"
				],
				[
					624,
					1,
					"insert",
					{
						"characters": "\n\nif"
					},
					"BwAAAP8oAAAAAAAAACkAAAAAAAAAAAAAACkAAAAAAAAIKQAAAAAAAAAAAAAIKQAAAAAAAAkpAAAAAAAAAAAAAAkpAAAAAAAAESkAAAAAAAAAAAAAACkAAAAAAAAAKQAAAAAAAAgAAAAgICAgICAgIAkpAAAAAAAACikAAAAAAAAAAAAACikAAAAAAAALKQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD/KAAAAAAAAP8oAAAAAAAAAAAAAAAA8L8"
				],
				[
					625,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAAspAAAAAAAADSkAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAALKQAAAAAAAAspAAAAAAAAAAAAAAAA8L8"
				],
				[
					626,
					1,
					"insert",
					{
						"characters": "ret.path"
					},
					"CAAAAAwpAAAAAAAADSkAAAAAAAAAAAAADSkAAAAAAAAOKQAAAAAAAAAAAAAOKQAAAAAAAA8pAAAAAAAAAAAAAA8pAAAAAAAAECkAAAAAAAAAAAAAECkAAAAAAAARKQAAAAAAAAAAAAARKQAAAAAAABIpAAAAAAAAAAAAABIpAAAAAAAAEykAAAAAAAAAAAAAEykAAAAAAAAUKQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAMKQAAAAAAAAwpAAAAAAAAAAAAAAAA8L8"
				],
				[
					628,
					1,
					"insert",
					{
						"characters": "\npr"
					},
					"BgAAABUpAAAAAAAAFikAAAAAAAAAAAAAFikAAAAAAAAeKQAAAAAAAAAAAAAWKQAAAAAAABYpAAAAAAAACAAAACAgICAgICAgFikAAAAAAAAgKQAAAAAAAAAAAAAgKQAAAAAAACEpAAAAAAAAAAAAACEpAAAAAAAAIikAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAVKQAAAAAAABUpAAAAAAAAAAAAAAAA8L8"
				],
				[
					629,
					2,
					"left_delete",
					null,
					"AgAAACEpAAAAAAAAISkAAAAAAAABAAAAciApAAAAAAAAICkAAAAAAAABAAAAcA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAiKQAAAAAAACIpAAAAAAAAAAAAAAAA8L8"
				],
				[
					630,
					1,
					"insert",
					{
						"characters": "ret.path=relative"
					},
					"EQAAACApAAAAAAAAISkAAAAAAAAAAAAAISkAAAAAAAAiKQAAAAAAAAAAAAAiKQAAAAAAACMpAAAAAAAAAAAAACMpAAAAAAAAJCkAAAAAAAAAAAAAJCkAAAAAAAAlKQAAAAAAAAAAAAAlKQAAAAAAACYpAAAAAAAAAAAAACYpAAAAAAAAJykAAAAAAAAAAAAAJykAAAAAAAAoKQAAAAAAAAAAAAAoKQAAAAAAACkpAAAAAAAAAAAAACkpAAAAAAAAKikAAAAAAAAAAAAAKikAAAAAAAArKQAAAAAAAAAAAAArKQAAAAAAACwpAAAAAAAAAAAAACwpAAAAAAAALSkAAAAAAAAAAAAALSkAAAAAAAAuKQAAAAAAAAAAAAAuKQAAAAAAAC8pAAAAAAAAAAAAAC8pAAAAAAAAMCkAAAAAAAAAAAAAMCkAAAAAAAAxKQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAgKQAAAAAAACApAAAAAAAAAAAAAAAA8L8"
				],
				[
					631,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADEpAAAAAAAAMykAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAxKQAAAAAAADEpAAAAAAAAAAAAAAAA8L8"
				],
				[
					632,
					1,
					"insert",
					{
						"characters": "ret.path"
					},
					"CAAAADIpAAAAAAAAMykAAAAAAAAAAAAAMykAAAAAAAA0KQAAAAAAAAAAAAA0KQAAAAAAADUpAAAAAAAAAAAAADUpAAAAAAAANikAAAAAAAAAAAAANikAAAAAAAA3KQAAAAAAAAAAAAA3KQAAAAAAADgpAAAAAAAAAAAAADgpAAAAAAAAOSkAAAAAAAAAAAAAOSkAAAAAAAA6KQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAyKQAAAAAAADIpAAAAAAAAAAAAAAAA8L8"
				],
				[
					634,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAADspAAAAAAAAPCkAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA7KQAAAAAAADspAAAAAAAAAAAAAAAA8L8"
				],
				[
					641,
					1,
					"cut",
					null,
					"AQAAAAEpAAAAAAAAASkAAAAAAAA9AAAAICAgICAgICBpZihyZXQucGF0aCkKICAgICAgICAgIHJldC5wYXRoPXJlbGF0aXZlKHJldC5wYXRoKTsKCg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAABKQAAAAAAAD4pAAAAAAAAAAAAAAAAAAA"
				],
				[
					643,
					1,
					"paste",
					null,
					"AQAAANUoAAAAAAAAEikAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADVKAAAAAAAANUoAAAAAAAAAAAAAAAAAAA"
				],
				[
					644,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAABIpAAAAAAAAEykAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAASKQAAAAAAABIpAAAAAAAAAAAAAAAA8L8"
				],
				[
					645,
					2,
					"left_delete",
					null,
					"AgAAABIpAAAAAAAAEikAAAAAAAABAAAAChEpAAAAAAAAESkAAAAAAAABAAAACg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAATKQAAAAAAABMpAAAAAAAAAAAAAAAA8L8"
				],
				[
					693,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAANUoAAAAAAAA1igAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADVKAAAAAAAANUoAAAAAAAAAAAAAAAAAAA"
				],
				[
					732,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAABEpAAAAAAAAEikAAAAAAAAAAAAAEikAAAAAAAAcKQAAAAAAAAAAAAASKQAAAAAAABIpAAAAAAAACgAAACAgICAgICAgICASKQAAAAAAABopAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAARKQAAAAAAABEpAAAAAAAAAAAAAAAA8L8"
				],
				[
					753,
					1,
					"cut",
					null,
					"AQAAANUoAAAAAAAA1SgAAAAAAAA9AAAACiAgICAgICAgaWYocmV0LnBhdGgpCiAgICAgICAgICByZXQucGF0aD1yZWxhdGl2ZShyZXQucGF0aCk7Cg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADVKAAAAAAAABIpAAAAAAAAAAAAAAAAAAA"
				],
				[
					754,
					2,
					"paste",
					null,
					"AgAAANUoAAAAAAAAEikAAAAAAAAAAAAAEikAAAAAAABPKQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADVKAAAAAAAANUoAAAAAAAAAAAAAAAA8L8"
				],
				[
					759,
					1,
					"insert",
					{
						"characters": "b"
					},
					"AwAAACIpAAAAAAAAIykAAAAAAAAAAAAAIykAAAAAAAAjKQAAAAAAAAQAAABwYXRoTCkAAAAAAABMKQAAAAAAAAgAAAAgICAgICAgIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAiKQAAAAAAACYpAAAAAAAAAAAAAAAA8L8"
				],
				[
					760,
					2,
					"left_delete",
					null,
					"AgAAACIpAAAAAAAAIikAAAAAAAABAAAAYiEpAAAAAAAAISkAAAAAAAABAAAALg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAjKQAAAAAAACMpAAAAAAAAAAAAAAAA8L8"
				],
				[
					761,
					1,
					"insert",
					{
						"characters": "?b"
					},
					"AgAAACEpAAAAAAAAIikAAAAAAAAAAAAAIikAAAAAAAAjKQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAhKQAAAAAAACEpAAAAAAAAAAAAAAAA8L8"
				],
				[
					762,
					1,
					"left_delete",
					null,
					"AQAAACIpAAAAAAAAIikAAAAAAAABAAAAYg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAjKQAAAAAAACMpAAAAAAAAAAAAAAAA8L8"
				],
				[
					763,
					1,
					"insert",
					{
						"characters": ".breakpoinst?.path"
					},
					"EgAAACIpAAAAAAAAIykAAAAAAAAAAAAAIykAAAAAAAAkKQAAAAAAAAAAAAAkKQAAAAAAACUpAAAAAAAAAAAAACUpAAAAAAAAJikAAAAAAAAAAAAAJikAAAAAAAAnKQAAAAAAAAAAAAAnKQAAAAAAACgpAAAAAAAAAAAAACgpAAAAAAAAKSkAAAAAAAAAAAAAKSkAAAAAAAAqKQAAAAAAAAAAAAAqKQAAAAAAACspAAAAAAAAAAAAACspAAAAAAAALCkAAAAAAAAAAAAALCkAAAAAAAAtKQAAAAAAAAAAAAAtKQAAAAAAAC4pAAAAAAAAAAAAAC4pAAAAAAAALykAAAAAAAAAAAAALykAAAAAAAAwKQAAAAAAAAAAAAAwKQAAAAAAADEpAAAAAAAAAAAAADEpAAAAAAAAMikAAAAAAAAAAAAAMikAAAAAAAAzKQAAAAAAAAAAAAAzKQAAAAAAADQpAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAiKQAAAAAAACIpAAAAAAAAAAAAAAAA8L8"
				],
				[
					765,
					1,
					"left_delete",
					null,
					"AQAAACwpAAAAAAAALCkAAAAAAAABAAAAcw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAtKQAAAAAAAC0pAAAAAAAAAAAAAAAA8L8"
				],
				[
					767,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAC0pAAAAAAAALikAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAtKQAAAAAAAC0pAAAAAAAAAAAAAAAA8L8"
				],
				[
					777,
					1,
					"paste",
					null,
					"AQAAAEQpAAAAAAAATykAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABEKQAAAAAAAEQpAAAAAAAAAAAAAAAA8L8"
				],
				[
					778,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAE8pAAAAAAAAUCkAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABPKQAAAAAAAE8pAAAAAAAAAAAAAAAA8L8"
				],
				[
					784,
					1,
					"paste",
					null,
					"AQAAAGIpAAAAAAAAbikAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABiKQAAAAAAAGIpAAAAAAAAAAAAAAAA8L8"
				],
				[
					809,
					1,
					"delete_blank_lines",
					{
						"surplus": false
					},
					"AQAAANUnAAAAAAAAmikAAAAAAADMAQAACiAgICAgICAgaWYodHlwZXMuaXNQcm9taXNlKGJyZWFrcG9pbnRzKSkgYnJlYWtwb2ludHMgPSBhd2FpdCBicmVha3BvaW50czsKCiAgICAgICAgaWYoQXJyYXkuaXNBcnJheShicmVha3BvaW50cykpIGJyZWFrcG9pbnRzID0gYnJlYWtwb2ludHMubWFwKGIgPT4gZmlsdGVyS2V5cyhiLCBbJ25hbWUnLCAnbGluZScsICdjb2x1bW4nXSkpOwoKICAgICAgICBsZXQgcmV0PSBhd2FpdCBtZW1iZXIuY2FsbCh0aGlzLCBmaWxlLCBicmVha3BvaW50cyk7CgogICAgICAgIGlmKHJldC5wYXRoKQogICAgICAgICAgcmV0LnBhdGg9cmVsYXRpdmUocmV0LnBhdGgpOwoKICAgICAgICBpZihyZXQ/LmJyZWFrcG9pbnRzPy5wYXRoKQogICAgICAgICAgcmV0LmJyZWFrcG9pbnRzLnBhdGg9cmVsYXRpdmUocmV0LmJyZWFrcG9pbnRzLnBhdGgpOwoKICAgICAgICBjb25zb2xlLmxvZygnYnJlYWtwb2ludHMgPScsIHJldCk7Cg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADVJwAAAAAAAKEpAAAAAAAAAAAAAAAA8L8"
				],
				[
					810,
					1,
					"delete_blank_lines",
					{
						"surplus": true
					},
					"AQAAANUnAAAAAAAAmikAAAAAAADFAQAAICAgICAgICBpZih0eXBlcy5pc1Byb21pc2UoYnJlYWtwb2ludHMpKSBicmVha3BvaW50cyA9IGF3YWl0IGJyZWFrcG9pbnRzOwogICAgICAgIGlmKEFycmF5LmlzQXJyYXkoYnJlYWtwb2ludHMpKSBicmVha3BvaW50cyA9IGJyZWFrcG9pbnRzLm1hcChiID0+IGZpbHRlcktleXMoYiwgWyduYW1lJywgJ2xpbmUnLCAnY29sdW1uJ10pKTsKICAgICAgICBsZXQgcmV0PSBhd2FpdCBtZW1iZXIuY2FsbCh0aGlzLCBmaWxlLCBicmVha3BvaW50cyk7CiAgICAgICAgaWYocmV0LnBhdGgpCiAgICAgICAgICByZXQucGF0aD1yZWxhdGl2ZShyZXQucGF0aCk7CiAgICAgICAgaWYocmV0Py5icmVha3BvaW50cz8ucGF0aCkKICAgICAgICAgIHJldC5icmVha3BvaW50cy5wYXRoPXJlbGF0aXZlKHJldC5icmVha3BvaW50cy5wYXRoKTsKICAgICAgICBjb25zb2xlLmxvZygnYnJlYWtwb2ludHMgPScsIHJldCk7",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADVJwAAAAAAAJopAAAAAAAAAAAAAAAA8L8"
				],
				[
					820,
					1,
					"delete_blank_lines",
					{
						"surplus": true
					},
					"AQAAAPIsAAAAAAAApS0AAAAAAAC0AAAACiAgICAgICAgcmVwbC5wcmludFN0YXR1cygoYXdhaXQgUHJpbnRTdGFja0ZyYW1lKHN0YWNrWzBdKSkuam9pbignICcpICsgJ1xuJyk7CgogICAgICAgIGNvbnN0IHsgZmlsZW5hbWUsIGxpbmUgfSA9IHN0YWNrWzBdOwoKICAgICAgICBkZWZpbmUoZ2xvYmFsVGhpcywgeyBmaWxlOiBmaWxlbmFtZSwgbGluZSB9KTsK",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADyLAAAAAAAAKYtAAAAAAAAAAAAAAAA8L8"
				],
				[
					825,
					1,
					"revert",
					null,
					"",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACtLwAAAAAAAK0vAAAAAAAAAAAAAAAA8L8"
				],
				[
					844,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAALMaAAAAAAAAtBoAAAAAAAAAAAAAtBoAAAAAAAC+GgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACzGgAAAAAAALMaAAAAAAAAAAAAAAAA8L8"
				],
				[
					859,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BgAAAAYbAAAAAAAABxsAAAAAAAAAAAAABxsAAAAAAAARGwAAAAAAAAAAAAC0GgAAAAAAALQaAAAAAAAACgAAACAgICAgICAgICAHGwAAAAAAAAgbAAAAAAAAAAAAAAgbAAAAAAAAEhsAAAAAAAAAAAAA/RoAAAAAAAD9GgAAAAAAAAoAAAAgICAgICAgICAg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAGGwAAAAAAAAYbAAAAAAAAAAAAAABAdEA"
				],
				[
					860,
					1,
					"paste",
					null,
					"AQAAAAgbAAAAAAAAURsAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAIGwAAAAAAAAgbAAAAAAAAAAAAAAAA8L8"
				],
				[
					865,
					1,
					"insert",
					{
						"characters": "D"
					},
					"AgAAADEbAAAAAAAAMhsAAAAAAAAAAAAAMhsAAAAAAAAyGwAAAAAAAAgAAABEZWJ1Z2dlcg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAxGwAAAAAAADkbAAAAAAAAAAAAAAAA8L8"
				],
				[
					866,
					1,
					"left_delete",
					null,
					"AQAAADEbAAAAAAAAMRsAAAAAAAABAAAARA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAyGwAAAAAAADIbAAAAAAAAAAAAAAAA8L8"
				],
				[
					867,
					1,
					"insert",
					{
						"characters": "process"
					},
					"BwAAADEbAAAAAAAAMhsAAAAAAAAAAAAAMhsAAAAAAAAzGwAAAAAAAAAAAAAzGwAAAAAAADQbAAAAAAAAAAAAADQbAAAAAAAANRsAAAAAAAAAAAAANRsAAAAAAAA2GwAAAAAAAAAAAAA2GwAAAAAAADcbAAAAAAAAAAAAADcbAAAAAAAAOBsAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAxGwAAAAAAADEbAAAAAAAAAAAAAAAA8L8"
				],
				[
					868,
					7,
					"left_delete",
					null,
					"BwAAADcbAAAAAAAANxsAAAAAAAABAAAAczYbAAAAAAAANhsAAAAAAAABAAAAczUbAAAAAAAANRsAAAAAAAABAAAAZTQbAAAAAAAANBsAAAAAAAABAAAAYzMbAAAAAAAAMxsAAAAAAAABAAAAbzIbAAAAAAAAMhsAAAAAAAABAAAAcjEbAAAAAAAAMRsAAAAAAAABAAAAcA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA4GwAAAAAAADgbAAAAAAAAAAAAAAAA8L8"
				],
				[
					869,
					1,
					"right_delete",
					null,
					"AQAAADEbAAAAAAAAMRsAAAAAAAABAAAAIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAxGwAAAAAAADEbAAAAAAAAAAAAAAAA8L8"
				],
				[
					872,
					1,
					"insert",
					{
						"characters": " read:"
					},
					"BgAAADobAAAAAAAAOxsAAAAAAAAAAAAAOxsAAAAAAAA8GwAAAAAAAAAAAAA8GwAAAAAAAD0bAAAAAAAAAAAAAD0bAAAAAAAAPhsAAAAAAAAAAAAAPhsAAAAAAAA/GwAAAAAAAAAAAAA/GwAAAAAAAEAbAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA6GwAAAAAAADobAAAAAAAAAAAAAAAA8L8"
				],
				[
					873,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEAbAAAAAAAAQRsAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABAGwAAAAAAAEAbAAAAAAAAAAAAAAAA8L8"
				],
				[
					874,
					1,
					"left_delete",
					null,
					"AQAAAEAbAAAAAAAAQBsAAAAAAAABAAAAIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABBGwAAAAAAAEEbAAAAAAAAAAAAAAAA8L8"
				],
				[
					878,
					1,
					"insert",
					{
						"characters": "obj"
					},
					"BAAAAEIbAAAAAAAAQxsAAAAAAAAAAAAAQxsAAAAAAABDGwAAAAAAAAkAAAAgY2FsbGJhY2tDGwAAAAAAAEQbAAAAAAAAAAAAAEQbAAAAAAAARRsAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABCGwAAAAAAAEsbAAAAAAAAAAAAAAAA8L8"
				],
				[
					887,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAACMbAAAAAAAAJRsAAAAAAAAAAAAADhsAAAAAAAAQGwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAOGwAAAAAAACMbAAAAAAAAAAAAAAAA8L8"
				],
				[
					910,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAANwpAAAAAAAA3SkAAAAAAAAAAAAA3SkAAAAAAADlKQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADcKQAAAAAAANwpAAAAAAAAAAAAAAAA8L8"
				],
				[
					912,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAALopAAAAAAAAuykAAAAAAAAAAAAAuykAAAAAAADDKQAAAAAAAAAAAADmKQAAAAAAAOYpAAAAAAAACAAAACAgICAgICAg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC6KQAAAAAAALopAAAAAAAAAAAAAAAAUkA"
				],
				[
					914,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAACwpAAAAAAAALSkAAAAAAAAAAAAALSkAAAAAAAA1KQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAsKQAAAAAAACwpAAAAAAAAAAAAAAAAUkA"
				],
				[
					916,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAO4oAAAAAAAA7ygAAAAAAAAAAAAA7ygAAAAAAAD3KAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADuKAAAAAAAAO4oAAAAAAAAAAAAAAAAUkA"
				],
				[
					924,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAC4oAAAAAAAALygAAAAAAAAAAAAALygAAAAAAAA3KAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAuKAAAAAAAAC4oAAAAAAAAAAAAAAAAUkA"
				],
				[
					933,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAA8oAAAAAAAAECgAAAAAAAAAAAAAECgAAAAAAAAYKAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAPKAAAAAAAAA8oAAAAAAAAAAAAAAAAUkA"
				],
				[
					958,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAAOYpAAAAAAAA5ykAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADmKQAAAAAAAOYpAAAAAAAAAAAAAAAA8L8"
				],
				[
					959,
					1,
					"left_delete",
					null,
					"AQAAAOYpAAAAAAAA5ikAAAAAAAABAAAALw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADnKQAAAAAAAOcpAAAAAAAAAAAAAAAA8L8"
				],
				[
					960,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAOYpAAAAAAAA5ykAAAAAAAAAAAAA5ykAAAAAAADoKQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADmKQAAAAAAAOYpAAAAAAAAAAAAAAAA8L8"
				],
				[
					18,
					2,
					"right_delete",
					null,
					"AgAAAA4bAAAAAAAADhsAAAAAAAABAAAALw4bAAAAAAAADhsAAAAAAAABAAAAKg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADhsAAAAAAAAOGwAAAAAAAAAAAAAAAGJA"
				],
				[
					20,
					2,
					"right_delete",
					null,
					"AgAAACMbAAAAAAAAIxsAAAAAAAABAAAAKiMbAAAAAAAAIxsAAAAAAAABAAAALw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIxsAAAAAAAAjGwAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					3,
					"left_delete",
					null,
					"AwAAAAwbAAAAAAAADBsAAAAAAAACAAAAICAKGwAAAAAAAAobAAAAAAAAAgAAACAgCBsAAAAAAAAIGwAAAAAAAAIAAAAgIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADhsAAAAAAAAOGwAAAAAAAAAAAAAAAGJA"
				]
			]
		},
		{
			"file": "upload-server.js",
			"settings":
			{
				"buffer_size": 35981,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					45,
					1,
					"insert",
					{
						"characters": "logLevels,"
					},
					"CgAAAIECAAAAAAAAggIAAAAAAAAAAAAAggIAAAAAAACDAgAAAAAAAAAAAACDAgAAAAAAAIQCAAAAAAAAAAAAAIQCAAAAAAAAhQIAAAAAAAAAAAAAhQIAAAAAAACGAgAAAAAAAAAAAACGAgAAAAAAAIcCAAAAAAAAAAAAAIcCAAAAAAAAiAIAAAAAAAAAAAAAiAIAAAAAAACJAgAAAAAAAAAAAACJAgAAAAAAAIoCAAAAAAAAAAAAAIoCAAAAAAAAiwIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACBAgAAAAAAAIECAAAAAAAAAAAAAAAA8L8"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIsCAAAAAAAAjAIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACLAgAAAAAAAIsCAAAAAAAAAAAAAAAA8L8"
				],
				[
					70,
					1,
					"insert",
					{
						"characters": "  loL"
					},
					"BgAAAB8LAAAAAAAAIAsAAAAAAAAAAAAAIAsAAAAAAAAgCwAAAAAAAI4AAABbJ0VSUicsICdXQVJOJywgJ05PVElDRScsICdJTkZPJywgJ0RFQlVHJywgJ1BBUlNFUicsICdIRUFERVInLCAnRVhUJywgJ0NMSUVOVCcsICdMQVRFTkNZJywgJ01JTk5FVCcsICdUSFJFQUQnXVtNYXRoLmxvZzIobGV2ZWwpXSA/PyBsZXZlbCArICcnIAsAAAAAAAAhCwAAAAAAAAAAAAAhCwAAAAAAACILAAAAAAAAAAAAACILAAAAAAAAIwsAAAAAAAAAAAAAIwsAAAAAAAAkCwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAfCwAAAAAAAK0LAAAAAAAAAAAAAAAA8L8"
				],
				[
					71,
					1,
					"left_delete",
					null,
					"AQAAACMLAAAAAAAAIwsAAAAAAAABAAAATA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAkCwAAAAAAACQLAAAAAAAAAAAAAAAA8L8"
				],
				[
					72,
					1,
					"insert",
					{
						"characters": "gLevels"
					},
					"BwAAACMLAAAAAAAAJAsAAAAAAAAAAAAAJAsAAAAAAAAlCwAAAAAAAAAAAAAlCwAAAAAAACYLAAAAAAAAAAAAACYLAAAAAAAAJwsAAAAAAAAAAAAAJwsAAAAAAAAoCwAAAAAAAAAAAAAoCwAAAAAAACkLAAAAAAAAAAAAACkLAAAAAAAAKgsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAjCwAAAAAAACMLAAAAAAAAAAAAAAAA8L8"
				],
				[
					73,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAACoLAAAAAAAALAsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAqCwAAAAAAACoLAAAAAAAAAAAAAAAA8L8"
				],
				[
					74,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAACoLAAAAAAAAKgsAAAAAAAABAAAAKCoLAAAAAAAAKgsAAAAAAAABAAAAKQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAArCwAAAAAAACsLAAAAAAAAAAAAAAAA8L8"
				],
				[
					75,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAACoLAAAAAAAALAsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAqCwAAAAAAACoLAAAAAAAAAAAAAAAA8L8"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": "lewv"
					},
					"BAAAACsLAAAAAAAALAsAAAAAAAAAAAAALAsAAAAAAAAtCwAAAAAAAAAAAAAtCwAAAAAAAC4LAAAAAAAAAAAAAC4LAAAAAAAALwsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAArCwAAAAAAACsLAAAAAAAAAAAAAAAA8L8"
				],
				[
					77,
					2,
					"left_delete",
					null,
					"AgAAAC4LAAAAAAAALgsAAAAAAAABAAAAdi0LAAAAAAAALQsAAAAAAAABAAAAdw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAvCwAAAAAAAC8LAAAAAAAAAAAAAAAA8L8"
				],
				[
					78,
					1,
					"insert",
					{
						"characters": "vel"
					},
					"AwAAAC0LAAAAAAAALgsAAAAAAAAAAAAALgsAAAAAAAAvCwAAAAAAAAAAAAAvCwAAAAAAADALAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAtCwAAAAAAAC0LAAAAAAAAAAAAAAAA8L8"
				],
				[
					82,
					3,
					"left_delete",
					null,
					"AwAAACELAAAAAAAAIQsAAAAAAAABAAAAbCALAAAAAAAAIAsAAAAAAAABAAAAIB8LAAAAAAAAHwsAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAiCwAAAAAAACILAAAAAAAAAAAAAAAA8L8"
				],
				[
					83,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AQAAAB8LAAAAAAAAIAsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAfCwAAAAAAAB8LAAAAAAAAAAAAAAAA8L8"
				],
				[
					94,
					1,
					"right_delete",
					null,
					"AQAAADwLAAAAAAAAPAsAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA8CwAAAAAAADwLAAAAAAAA////////738"
				],
				[
					141,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAKGIAAAAAAAAoogAAAAAAAAAAAAAoogAAAAAAACiiAAAAAAAALEAAAAsCiAgICBuZXQ6IHsKICAgICAgY3JlYXRlU2VydmVyLAogICAgICBzZXRMb2csCiAgICAgIExMTF9VU0VSLAogICAgICBMTExfTk9USUNFLAogICAgICBMTExfV0FSTiwKICAgICAgTExMX0lORk8sCiAgICAgIEZvcm1QYXJzZXIsCiAgICAgIEhhc2gsCiAgICAgIFJlc3BvbnNlLAogICAgICBTb2NrZXQKICAgIH0",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAChiAAAAAAAAFKJAAAAAAAAAAAAAAAA8L8"
				],
				[
					142,
					1,
					"left_delete",
					null,
					"AQAAAKGIAAAAAAAAoYgAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACiiAAAAAAAAKKIAAAAAAAAAAAAAAAA8L8"
				],
				[
					274,
					1,
					"left_delete",
					null,
					"AQAAAOMKAAAAAAAA4woAAAAAAAAsAAAAICAgIC8vaWYocGFyYW1zLmRlYnVnIHx8IGxldmVsIDw9IExMTF9XQVJOKQo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADjCgAAAAAAAA8LAAAAAAAAAAAAAAAA8L8"
				],
				[
					284,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANEJAAAAAAAA0gkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADRCQAAAAAAANEJAAAAAAAAAAAAAAAA8L8"
				],
				[
					285,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAANIJAAAAAAAA1AkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADSCQAAAAAAANIJAAAAAAAAAAAAAAAA8L8"
				],
				[
					286,
					1,
					"right_delete",
					null,
					"AQAAANMJAAAAAAAA0wkAAAAAAAABAAAAfQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADTCQAAAAAAANMJAAAAAAAAAAAAAAAA8L8"
				],
				[
					289,
					1,
					"insert",
					{
						"characters": "}"
					},
					"AQAAAFoLAAAAAAAAWwsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABaCwAAAAAAAFoLAAAAAAAAAAAAAAAA8L8"
				],
				[
					294,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAFkLAAAAAAAAWwsAAAAAAAAAAAAA1gkAAAAAAADYCQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABZCwAAAAAAANYJAAAAAAAAAAAAAAAA8L8"
				],
				[
					374,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAGuKAAAAAAAAbIoAAAAAAAAAAAAAbIoAAAAAAABsigAAAAAAAAUAAABhd2FpdA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABrigAAAAAAAHCKAAAAAAAAAAAAAAAA8L8"
				],
				[
					379,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAJ+JAAAAAAAAoIkAAAAAAAAAAAAAoIkAAAAAAACgiQAAAAAAAAUAAABhc3luYw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACfiQAAAAAAAKSJAAAAAAAAAAAAAAAA8L8"
				],
				[
					473,
					2,
					"left_delete",
					null,
					"AgAAAGiKAAAAAAAAaIoAAAAAAAABAAAAIGeKAAAAAAAAZ4oAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABpigAAAAAAAGmKAAAAAAAAAAAAAAAA8L8"
				],
				[
					485,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACBigAAAAAAAIGKAAAAAAAAAAAAAAAAAAA"
				],
				[
					497,
					1,
					"left_delete",
					null,
					"AQAAANYJAAAAAAAA1gkAAAAAAAABAAAALw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADXCQAAAAAAANcJAAAAAAAAAAAAAAAA8L8"
				],
				[
					498,
					1,
					"right_delete",
					null,
					"AQAAANYJAAAAAAAA1gkAAAAAAAABAAAAKg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADWCQAAAAAAANYJAAAAAAAAAAAAAAAA8L8"
				],
				[
					501,
					2,
					"left_delete",
					null,
					"AgAAAFoLAAAAAAAAWgsAAAAAAAABAAAAL1kLAAAAAAAAWQsAAAAAAAABAAAAKg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABbCwAAAAAAAFsLAAAAAAAA////////738"
				],
				[
					551,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAOQwAAAAAAAA5jAAAAAAAAAAAAAAsTAAAAAAAACzMAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACxMAAAAAAAAOQwAAAAAAAAAAAAAAAA8L8"
				],
				[
					589,
					1,
					"cut",
					null,
					"AQAAADaKAAAAAAAANooAAAAAAAASAAAAICAgICAgICAgICAgdHJ5IHsK",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA2igAAAAAAAEiKAAAAAAAAAAAAAAAAAAA"
				],
				[
					593,
					1,
					"cut",
					null,
					"AQAAAO2KAAAAAAAA7YoAAAAAAAAaAAAAICAgICAgICAgICAgfSBjYXRjaChlKSB7fQo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADtigAAAAAAAAeLAAAAAAAAAAAAAAAAAAA"
				],
				[
					600,
					1,
					"insert",
					{
						"characters": "\n\nclon"
					},
					"CQAAANqJAAAAAAAA24kAAAAAAAAAAAAA24kAAAAAAADjiQAAAAAAAAAAAADjiQAAAAAAAOSJAAAAAAAAAAAAAOSJAAAAAAAA7IkAAAAAAAAAAAAA24kAAAAAAADbiQAAAAAAAAgAAAAgICAgICAgIOSJAAAAAAAA5YkAAAAAAAAAAAAA5YkAAAAAAADmiQAAAAAAAAAAAADmiQAAAAAAAOeJAAAAAAAAAAAAAOeJAAAAAAAA6IkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADaiQAAAAAAANqJAAAAAAAAAAAAAAAA8L8"
				],
				[
					601,
					3,
					"left_delete",
					null,
					"AwAAAOeJAAAAAAAA54kAAAAAAAABAAAAbuaJAAAAAAAA5okAAAAAAAABAAAAb+WJAAAAAAAA5YkAAAAAAAABAAAAbA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADoiQAAAAAAAOiJAAAAAAAAAAAAAAAA8L8"
				],
				[
					602,
					1,
					"insert",
					{
						"characters": "onsole.log"
					},
					"CgAAAOWJAAAAAAAA5okAAAAAAAAAAAAA5okAAAAAAADniQAAAAAAAAAAAADniQAAAAAAAOiJAAAAAAAAAAAAAOiJAAAAAAAA6YkAAAAAAAAAAAAA6YkAAAAAAADqiQAAAAAAAAAAAADqiQAAAAAAAOuJAAAAAAAAAAAAAOuJAAAAAAAA7IkAAAAAAAAAAAAA7IkAAAAAAADtiQAAAAAAAAAAAADtiQAAAAAAAO6JAAAAAAAAAAAAAO6JAAAAAAAA74kAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADliQAAAAAAAOWJAAAAAAAAAAAAAAAA8L8"
				],
				[
					603,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAO+JAAAAAAAA8YkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADviQAAAAAAAO+JAAAAAAAAAAAAAAAA8L8"
				],
				[
					604,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAPCJAAAAAAAA8okAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADwiQAAAAAAAPCJAAAAAAAAAAAAAAAA8L8"
				],
				[
					605,
					1,
					"insert",
					{
						"characters": "onMessage"
					},
					"CQAAAPGJAAAAAAAA8okAAAAAAAAAAAAA8okAAAAAAADziQAAAAAAAAAAAADziQAAAAAAAPSJAAAAAAAAAAAAAPSJAAAAAAAA9YkAAAAAAAAAAAAA9YkAAAAAAAD2iQAAAAAAAAAAAAD2iQAAAAAAAPeJAAAAAAAAAAAAAPeJAAAAAAAA+IkAAAAAAAAAAAAA+IkAAAAAAAD5iQAAAAAAAAAAAAD5iQAAAAAAAPqJAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADxiQAAAAAAAPGJAAAAAAAAAAAAAAAA8L8"
				],
				[
					607,
					1,
					"insert",
					{
						"characters": ",msg"
					},
					"BAAAAPuJAAAAAAAA/IkAAAAAAAAAAAAA/IkAAAAAAAD9iQAAAAAAAAAAAAD9iQAAAAAAAP6JAAAAAAAAAAAAAP6JAAAAAAAA/4kAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD7iQAAAAAAAPuJAAAAAAAAAAAAAAAA8L8"
				],
				[
					609,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAACKAAAAAAAAAYoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAigAAAAAAAACKAAAAAAAAAAAAAAAA8L8"
				],
				[
					1,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA+D4AAAAAAAD4PgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "quickjs/qjs-net/js/rpc.js",
			"settings":
			{
				"buffer_size": 26723,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					55,
					1,
					"right_delete",
					null,
					"AQAAAAQxAAAAAAAABDEAAAAAAAAFAAAAYXN5bmM",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAEMQAAAAAAAAkxAAAAAAAAAAAAAAAA8L8"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAAUyAAAAAAAABjIAAAAAAAAAAAAABjIAAAAAAAAGMgAAAAAAAAUAAABhd2FpdA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAFMgAAAAAAAAoyAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "fire.js",
			"settings":
			{
				"buffer_size": 27120,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					60,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAAJeAAAAAAAAA14AAAAAAAAAAAAAA14AAAAAAAAJXgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAACXgAAAAAAAAJeAAAAAAAAAAAAAAAA8L8"
				],
				[
					69,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BwAAACteAAAAAAAALF4AAAAAAAAAAAAALF4AAAAAAAAwXgAAAAAAAAAAAAAwXgAAAAAAADJeAAAAAAAAAAAAAANeAAAAAAAAA14AAAAAAAAGAAAAICAgICAgLF4AAAAAAAAtXgAAAAAAAAAAAAAtXgAAAAAAADNeAAAAAAAAAAAAACZeAAAAAAAAJl4AAAAAAAAGAAAAICAgICAg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAArXgAAAAAAACteAAAAAAAAAAAAAAAA8L8"
				],
				[
					71,
					1,
					"insert",
					{
						"characters": "console.log"
					},
					"DAAAACZeAAAAAAAAJ14AAAAAAAAAAAAAKF4AAAAAAAAoXgAAAAAAAAYAAAAgICAgICAnXgAAAAAAACheAAAAAAAAAAAAACheAAAAAAAAKV4AAAAAAAAAAAAAKV4AAAAAAAAqXgAAAAAAAAAAAAAqXgAAAAAAACteAAAAAAAAAAAAACteAAAAAAAALF4AAAAAAAAAAAAALF4AAAAAAAAtXgAAAAAAAAAAAAAtXgAAAAAAAC5eAAAAAAAAAAAAAC5eAAAAAAAAL14AAAAAAAAAAAAAL14AAAAAAAAwXgAAAAAAAAAAAAAwXgAAAAAAADFeAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAmXgAAAAAAACZeAAAAAAAAAAAAAAAAS0A"
				],
				[
					72,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADFeAAAAAAAAM14AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAxXgAAAAAAADFeAAAAAAAAAAAAAAAA8L8"
				],
				[
					73,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAADJeAAAAAAAANF4AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAyXgAAAAAAADJeAAAAAAAAAAAAAAAA8L8"
				],
				[
					74,
					1,
					"insert",
					{
						"characters": "data"
					},
					"BAAAADNeAAAAAAAANF4AAAAAAAAAAAAANF4AAAAAAAA1XgAAAAAAAAAAAAA1XgAAAAAAADZeAAAAAAAAAAAAADZeAAAAAAAAN14AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAzXgAAAAAAADNeAAAAAAAAAAAAAAAA8L8"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAADheAAAAAAAAOV4AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA4XgAAAAAAADheAAAAAAAAAAAAAAAA8L8"
				],
				[
					77,
					2,
					"left_delete",
					null,
					"AgAAADheAAAAAAAAOF4AAAAAAAABAAAAOjdeAAAAAAAAN14AAAAAAAABAAAAJw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA5XgAAAAAAADleAAAAAAAAAAAAAAAA8L8"
				],
				[
					78,
					1,
					"insert",
					{
						"characters": ":',"
					},
					"AwAAADdeAAAAAAAAOF4AAAAAAAAAAAAAOF4AAAAAAAA5XgAAAAAAAAAAAAA5XgAAAAAAADpeAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA3XgAAAAAAADdeAAAAAAAAAAAAAAAA8L8"
				],
				[
					79,
					1,
					"insert",
					{
						"characters": " chunk"
					},
					"BgAAADpeAAAAAAAAO14AAAAAAAAAAAAAO14AAAAAAAA8XgAAAAAAAAAAAAA8XgAAAAAAAD1eAAAAAAAAAAAAAD1eAAAAAAAAPl4AAAAAAAAAAAAAPl4AAAAAAAA/XgAAAAAAAAAAAAA/XgAAAAAAAEBeAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA6XgAAAAAAADpeAAAAAAAAAAAAAAAA8L8"
				],
				[
					81,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAEFeAAAAAAAAQl4AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABBXgAAAAAAAEFeAAAAAAAAAAAAAAAA8L8"
				],
				[
					190,
					1,
					"right_delete",
					null,
					"AQAAAJ9nAAAAAAAAn2cAAAAAAAACAAAALy8",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAChZwAAAAAAAJ9nAAAAAAAAAAAAAAAA8L8"
				],
				[
					193,
					1,
					"right_delete",
					null,
					"AQAAALZnAAAAAAAAtmcAAAAAAAAMAAAAIEpTT04ucGFyc2Uo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC2ZwAAAAAAAMJnAAAAAAAAAAAAAAAA8L8"
				],
				[
					196,
					1,
					"left_delete",
					null,
					"AQAAALlnAAAAAAAAuWcAAAAAAAABAAAAKQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC6ZwAAAAAAALpnAAAAAAAAAAAAAAAA8L8"
				],
				[
					200,
					1,
					"cut",
					null,
					"AQAAAJ1nAAAAAAAAnWcAAAAAAAAfAAAAICBjb25zb2xlLmxvZygnV1Mgc2VuZDonLG1zZyk7Cg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACdZwAAAAAAALxnAAAAAAAAAAAAAAAAAAA"
				],
				[
					202,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAGNnAAAAAAAAZGcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABjZwAAAAAAAGNnAAAAAAAAAAAAAAAAAAA"
				],
				[
					203,
					1,
					"paste",
					null,
					"AQAAAGRnAAAAAAAAg2cAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABkZwAAAAAAAGRnAAAAAAAAAAAAAAAA8L8"
				],
				[
					216,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAGZnAAAAAAAAZ2cAAAAAAAAAAAAAZ2cAAAAAAABoZwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABmZwAAAAAAAGZnAAAAAAAAAAAAAAAA8L8"
				],
				[
					219,
					1,
					"left_delete",
					null,
					"AQAAAL1nAAAAAAAAvWcAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC+ZwAAAAAAAL5nAAAAAAAAAAAAAACAT0A"
				],
				[
					285,
					2,
					"right_delete",
					null,
					"AgAAACZeAAAAAAAAJl4AAAAAAAAdAAAAY29uc29sZS5sb2coJ2RhdGE6JywgY2h1bmspOwomXgAAAAAAACZeAAAAAAAAAQAAAAo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAmXgAAAAAAAENeAAAAAAAAAAAAAAAA8L8"
				],
				[
					324,
					1,
					"cut",
					null,
					"AQAAALRCAAAAAAAAtEIAAAAAAABkAAAACiAgICAgIC8qIGlmKCFnbG9iYWxUaGlzLmNpZCkgCiAgICAgICAgZ2xvYmFsVGhpcy5jaWQgPSBsc3RvcmUuY2lkIHx8IChsc3RvcmUuY2lkPU1ha2VDbGllbnRJRCgpKTsqLw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAYQwAAAAAAALRCAAAAAAAAAAAAAAAA8L8"
				],
				[
					325,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAALRCAAAAAAAAtUIAAAAAAAAAAAAAtUIAAAAAAAC7QgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC0QgAAAAAAALRCAAAAAAAAAAAAAAAA8L8"
				],
				[
					334,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAORCAAAAAAAA5UIAAAAAAAAAAAAA5UIAAAAAAADrQgAAAAAAAAAAAAC1QgAAAAAAALVCAAAAAAAABgAAACAgICAgIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADkQgAAAAAAAORCAAAAAAAAAAAAAAAA8L8"
				],
				[
					336,
					1,
					"left_delete",
					null,
					"AQAAAARDAAAAAAAABEMAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAFQwAAAAAAAAVDAAAAAAAAAAAAAAAAS0A"
				],
				[
					359,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAACdlAAAAAAAAKGUAAAAAAAAAAAAAKGUAAAAAAAAqZQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAnZQAAAAAAACdlAAAAAAAAAAAAAAAA8L8"
				],
				[
					364,
					1,
					"left_delete",
					null,
					"AgAAAGllAAAAAAAAaWUAAAAAAAABAAAAeyhlAAAAAAAAKGUAAAAAAAACAAAAICA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABqZQAAAAAAAGplAAAAAAAA////////738"
				],
				[
					366,
					1,
					"left_delete",
					null,
					"AQAAANtlAAAAAAAA22UAAAAAAAABAAAAfQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADcZQAAAAAAANxlAAAAAAAAAAAAAABwgUA"
				],
				[
					416,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAGpDAAAAAAAAa0MAAAAAAAAAAAAAa0MAAAAAAABtQwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABqQwAAAAAAAGpDAAAAAAAAAAAAAAAA8L8"
				],
				[
					419,
					1,
					"right_delete",
					null,
					"AgAAAI1DAAAAAAAAjUMAAAAAAAAQAAAAICAvL3N0cis9a2V5OwogIGtDAAAAAAAAa0MAAAAAAAACAAAAICA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACNQwAAAAAAAJ1DAAAAAAAAAAAAAAAAMkA"
				],
				[
					476,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAD1DAAAAAAAAP0MAAAAAAAAAAAAAC0MAAAAAAAANQwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAALQwAAAAAAAD1DAAAAAAAA////////738"
				],
				[
					688,
					1,
					"insert",
					{
						"characters": "Element"
					},
					"BwAAAJxYAAAAAAAAnVgAAAAAAAAAAAAAnVgAAAAAAACeWAAAAAAAAAAAAACeWAAAAAAAAJ9YAAAAAAAAAAAAAJ9YAAAAAAAAoFgAAAAAAAAAAAAAoFgAAAAAAAChWAAAAAAAAAAAAAChWAAAAAAAAKJYAAAAAAAAAAAAAKJYAAAAAAAAo1gAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACcWAAAAAAAAJxYAAAAAAAAAAAAAAAA8L8"
				],
				[
					698,
					1,
					"insert",
					{
						"characters": "Element"
					},
					"BwAAADBWAAAAAAAAMVYAAAAAAAAAAAAAMVYAAAAAAAAyVgAAAAAAAAAAAAAyVgAAAAAAADNWAAAAAAAAAAAAADNWAAAAAAAANFYAAAAAAAAAAAAANFYAAAAAAAA1VgAAAAAAAAAAAAA1VgAAAAAAADZWAAAAAAAAAAAAADZWAAAAAAAAN1YAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAwVgAAAAAAADBWAAAAAAAAAAAAAAAA8L8"
				],
				[
					709,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAFlWAAAAAAAAW1YAAAAAAAAAAAAATlUAAAAAAABQVQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABOVQAAAAAAAFlWAAAAAAAAAAAAAAAA8L8"
				],
				[
					723,
					1,
					"insert",
					{
						"characters": "globalThis."
					},
					"CwAAAKRYAAAAAAAApVgAAAAAAAAAAAAApVgAAAAAAACmWAAAAAAAAAAAAACmWAAAAAAAAKdYAAAAAAAAAAAAAKdYAAAAAAAAqFgAAAAAAAAAAAAAqFgAAAAAAACpWAAAAAAAAAAAAACpWAAAAAAAAKpYAAAAAAAAAAAAAKpYAAAAAAAAq1gAAAAAAAAAAAAAq1gAAAAAAACsWAAAAAAAAAAAAACsWAAAAAAAAK1YAAAAAAAAAAAAAK1YAAAAAAAArlgAAAAAAAAAAAAArlgAAAAAAACvWAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACkWAAAAAAAAKRYAAAAAAAAAAAAAAAA8L8"
				],
				[
					728,
					1,
					"insert",
					{
						"characters": "if("
					},
					"AwAAAJVYAAAAAAAAllgAAAAAAAAAAAAAllgAAAAAAACXWAAAAAAAAAAAAACXWAAAAAAAAJhYAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACVWAAAAAAAAJVYAAAAAAAAAAAAAAAAMkA"
				],
				[
					729,
					1,
					"paste",
					null,
					"AQAAAJhYAAAAAAAArVgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACYWAAAAAAAAJhYAAAAAAAAAAAAAAAA8L8"
				],
				[
					730,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAK1YAAAAAAAArlgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACtWAAAAAAAAK1YAAAAAAAAAAAAAAAA8L8"
				],
				[
					733,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAK5YAAAAAAAAr1gAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACuWAAAAAAAAK5YAAAAAAAAAAAAAAAA8L8"
				],
				[
					748,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAOZLAAAAAAAA50sAAAAAAAAAAAAA50sAAAAAAADxSwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADmSwAAAAAAAOZLAAAAAAAAAAAAAAAA8L8"
				],
				[
					750,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAMRLAAAAAAAAxUsAAAAAAAAAAAAAxUsAAAAAAADPSwAAAAAAAAAAAADySwAAAAAAAPJLAAAAAAAACgAAACAgICAgICAgICA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADESwAAAAAAAMRLAAAAAAAAAAAAAACAVkA"
				],
				[
					752,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAABdMAAAAAAAAGEwAAAAAAAAAAAAAGEwAAAAAAAAgTAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAXTAAAAAAAABdMAAAAAAAAAAAAAACAVkA"
				],
				[
					756,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AwAAAM9LAAAAAAAA0EsAAAAAAAAAAAAAGUwAAAAAAAAZTAAAAAAAAAgAAAAgICAgICAgINBLAAAAAAAA0UsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADPSwAAAAAAAM9LAAAAAAAAAAAAAAAA8L8"
				],
				[
					759,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAMhKAAAAAAAAyUoAAAAAAAAAAAAAyUoAAAAAAADPSgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADISgAAAAAAAMhKAAAAAAAAAAAAAAAAW0A"
				],
				[
					764,
					1,
					"left_delete",
					null,
					"AgAAAABKAAAAAAAAAEoAAAAAAAABAAAAe8hKAAAAAAAAyEoAAAAAAAAGAAAAICAgICAg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAABSgAAAAAAAAFKAAAAAAAA////////738"
				],
				[
					766,
					1,
					"left_delete",
					null,
					"AQAAADxKAAAAAAAAPEoAAAAAAAABAAAAfQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA9SgAAAAAAAD1KAAAAAAAAAAAAAABog0A"
				],
				[
					770,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAG5KAAAAAAAAb0oAAAAAAAAAAAAAb0oAAAAAAAB5SgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABuSgAAAAAAAG5KAAAAAAAAAAAAAAAA8L8"
				],
				[
					772,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAI1KAAAAAAAAjkoAAAAAAAAAAAAAjkoAAAAAAACYSgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACNSgAAAAAAAI1KAAAAAAAAAAAAAACAVkA"
				],
				[
					774,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAMBKAAAAAAAAwUoAAAAAAAAAAAAAwUoAAAAAAADLSgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADASgAAAAAAAMBKAAAAAAAAAAAAAACAVkA"
				],
				[
					778,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAKJIAAAAAAAAo0gAAAAAAAAAAAAAo0gAAAAAAACrSAAAAAAAAAAAAACrSAAAAAAAAKtIAAAAAAAAAQAAAGk",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACjSAAAAAAAAKJIAAAAAAAAAAAAAAAA8L8"
				],
				[
					782,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAC5JAAAAAAAAL0kAAAAAAAAAAAAAL0kAAAAAAAA4SQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAuSQAAAAAAAC5JAAAAAAAAAAAAAABAVEA"
				],
				[
					784,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAGFJAAAAAAAAYkkAAAAAAAAAAAAAYkkAAAAAAABrSQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABhSQAAAAAAAGFJAAAAAAAAAAAAAABAVEA"
				],
				[
					786,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAALBJAAAAAAAAsUkAAAAAAAAAAAAAsUkAAAAAAAC6SQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACwSQAAAAAAALBJAAAAAAAAAAAAAABAVEA"
				],
				[
					788,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAANVJAAAAAAAA1kkAAAAAAAAAAAAA1kkAAAAAAADfSQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADVSQAAAAAAANVJAAAAAAAAAAAAAABAVEA"
				],
				[
					793,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAMNGAAAAAAAAxEYAAAAAAAAAAAAAxEYAAAAAAADHRgAAAAAAAAAAAADHRgAAAAAAAMdGAAAAAAAAAQAAACA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADDRgAAAAAAAMRGAAAAAAAAAAAAAAAA8L8"
				],
				[
					798,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAF1FAAAAAAAAXkUAAAAAAAAAAAAAXkUAAAAAAABeRQAAAAAAALcAAAAKICAgICAgLy8gY29uc29sZS5sb2coJ2V2ZW50JywgeyB0eXBlLCBrZXksIGNoYXJDb2RlOiBrZXkuY29kZVBvaW50QXQoMCksIGtleUNvZGUsIHJlcGVhdCwgY3RybEtleSwgc2hpZnRLZXksIGFsdEtleSwgbWV0YUtleSB9KTsKCiAgICAgIC8vaWYoa2V5IGluIG1pc2NmaXhlZDZ4MTMgfHwga2V5Q29kZSA8IDB4MjApIHs",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAURgAAAAAAAF1FAAAAAAAAAAAAAAAA8L8"
				],
				[
					799,
					7,
					"left_delete",
					null,
					"BwAAAF1FAAAAAAAAXUUAAAAAAAABAAAAIFxFAAAAAAAAXEUAAAAAAAABAAAACltFAAAAAAAAW0UAAAAAAAABAAAAfVlFAAAAAAAAWUUAAAAAAAACAAAAICBXRQAAAAAAAFdFAAAAAAAAAgAAACAgVUUAAAAAAABVRQAAAAAAAAIAAAAgIFRFAAAAAAAAVEUAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABeRQAAAAAAAF5FAAAAAAAAAAAAAAAA8L8"
				],
				[
					800,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAFRFAAAAAAAAVUUAAAAAAAAAAAAAVUUAAAAAAABdRQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABURQAAAAAAAFRFAAAAAAAAAAAAAAAA8L8"
				],
				[
					803,
					1,
					"left_delete",
					null,
					"AgAAACZFAAAAAAAAJkUAAAAAAAABAAAAe1RFAAAAAAAAVEUAAAAAAAAIAAAAICAgICAgICA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAnRQAAAAAAACdFAAAAAAAA////////738"
				],
				[
					807,
					1,
					"left_delete",
					null,
					"AQAAAPNBAAAAAAAA80EAAAAAAAABAAAAew",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD0QQAAAAAAAPRBAAAAAAAAAAAAAAAA8L8"
				],
				[
					809,
					1,
					"left_delete",
					null,
					"AQAAAMpBAAAAAAAAykEAAAAAAAABAAAAew",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADLQQAAAAAAAMtBAAAAAAAAAAAAAADwdUA"
				],
				[
					813,
					1,
					"left_delete",
					null,
					"AQAAADtCAAAAAAAAO0IAAAAAAAABAAAAfQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA8QgAAAAAAADxCAAAAAAAAAAAAAABgdUA"
				],
				[
					815,
					8,
					"left_delete",
					null,
					"CAAAAEBCAAAAAAAAQEIAAAAAAAABAAAAfT5CAAAAAAAAPkIAAAAAAAACAAAAICA8QgAAAAAAADxCAAAAAAAAAgAAACAgO0IAAAAAAAA7QgAAAAAAAAEAAAAKOUIAAAAAAAA5QgAAAAAAAAIAAAAgIDdCAAAAAAAAN0IAAAAAAAACAAAAICA1QgAAAAAAADVCAAAAAAAAAgAAACAgNEIAAAAAAAA0QgAAAAAAAAEAAAAK",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABBQgAAAAAAAEFCAAAAAAAAAAAAAAAAS0A"
				],
				[
					818,
					1,
					"left_delete",
					null,
					"AQAAALxAAAAAAAAAvEAAAAAAAAABAAAAew",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC9QAAAAAAAAL1AAAAAAAAAAAAAAAAA8L8"
				],
				[
					820,
					1,
					"left_delete",
					null,
					"AQAAAJNAAAAAAAAAk0AAAAAAAAABAAAAew",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACUQAAAAAAAAJRAAAAAAAAAAAAAAADwdUA"
				],
				[
					822,
					1,
					"left_delete",
					null,
					"AQAAAP9AAAAAAAAA/0AAAAAAAAABAAAAfQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAQQAAAAAAAABBAAAAAAAAAAAAAADQdEA"
				],
				[
					824,
					8,
					"left_delete",
					null,
					"CAAAAARBAAAAAAAABEEAAAAAAAABAAAAfQJBAAAAAAAAAkEAAAAAAAACAAAAICAAQQAAAAAAAABBAAAAAAAAAgAAACAg/0AAAAAAAAD/QAAAAAAAAAEAAAAK/UAAAAAAAAD9QAAAAAAAAAIAAAAgIPtAAAAAAAAA+0AAAAAAAAACAAAAICD5QAAAAAAAAPlAAAAAAAAAAgAAACAg+EAAAAAAAAD4QAAAAAAAAAEAAAAK",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAFQQAAAAAAAAVBAAAAAAAAAAAAAAAAS0A"
				],
				[
					827,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAEA/AAAAAAAAQT8AAAAAAAAAAAAAQT8AAAAAAABBPwAAAAAAAJsAAAAKCiAgICAvKiAgICBmb3IobGV0IHR5ID0geSAtIDE7IHR5IDwgeSArIDE7IHR5KyspIAogICAgICBmb3IobGV0IHR4ID0geCAtIDE7IHR4IDwgeCArIDE7IHR4KyspIAogICAgICAgIHBpeGVsc1t0eV1bdHhdID0gcjsqLwoKICAgIC8vIHBpeGVsc1t5ICsgMV1beF0gPSByOw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADbPwAAAAAAAEA/AAAAAAAAAAAAAAAA8L8"
				],
				[
					830,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAOk+AAAAAAAA6j4AAAAAAAAAAAAA6j4AAAAAAADuPgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADpPgAAAAAAAOk+AAAAAAAAAAAAAAAA8L8"
				],
				[
					833,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAEo/AAAAAAAASz8AAAAAAAAAAAAASz8AAAAAAABNPwAAAAAAAAAAAADqPgAAAAAAAOo+AAAAAAAABAAAACAgICA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABKPwAAAAAAAEo/AAAAAAAAAAAAAAAAQkA"
				],
				[
					836,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAD4+AAAAAAAAPz4AAAAAAAAAAAAAPz4AAAAAAABFPgAAAAAAAAAAAABOPwAAAAAAAE4/AAAAAAAAAgAAACAg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA+PgAAAAAAAD4+AAAAAAAAAAAAAAAA8L8"
				],
				[
					838,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAI0+AAAAAAAAjj4AAAAAAAAAAAAAjj4AAAAAAACUPgAAAAAAAAAAAAA/PgAAAAAAAD8+AAAAAAAABgAAACAgICAgIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACNPgAAAAAAAI0+AAAAAAAAAAAAAAAAS0A"
				],
				[
					840,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAP89AAAAAAAAAD4AAAAAAAAAAAAAAD4AAAAAAAAGPgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD/PQAAAAAAAP89AAAAAAAAAAAAAAAAS0A"
				],
				[
					848,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAF05AAAAAAAAXjkAAAAAAAAAAAAAXjkAAAAAAABkOQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABdOQAAAAAAAF05AAAAAAAAAAAAAAAA8L8"
				],
				[
					853,
					1,
					"insert",
					{
						"characters": " "
					},
					"AwAAAEIxAAAAAAAAQzEAAAAAAAAAAAAAQzEAAAAAAABDMQAAAAAAAMABAAAKICAvKiAgT2JqZWN0LmFzc2lnbihnbG9iYWxUaGlzLCB7CiAgICBidWZmZXIsCiAgICBwYWxldHRlLAogICAgcGFsZXR0ZUhTTCwKICAgIHBpeGVscywKICAgIGNvbnRleHQsCiAgICBpbWFnZSwKICAgIGZwcywKICAgIG1hdHJpeCwKICAgIFJlcGFyZW50LAogICAgZG9tOiB7IEVsZW1lbnQgfSwKICAgIGdlb206IHsgUmVjdCB9LAogICAgTW91c2VUb1RvdWNoLAogICAgQ2F0Y2hJdGVyYXRvciwKICAgIFRvdWNoSXRlcmF0b3IsCiAgICBUb3VjaFByaW50ZXIsCiAgICBHZXRFbGVtZW50TWF0cml4LAogICAgU2V0Q3Jvc3NoYWlyLAogICAgRXZlbnRQb3NpdGlvbnMsCiAgICBQb3NpdGlvblByb2Nlc3NvciwKICAgIFBvc2l0aW9uTWF0cml4LAogICAgUHJvY2Vzc1Bvc2l0aW9uLAogICAgUHV0QXJyYXksCiAgICB3YWl0Rm9yLAogICAgUmVwbGF5VHJhaWwsCiAgICBCbGF6ZQogIH0pOyovnzcAAAAAAACfNwAAAAAAAAYAAAAgICAgICA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABCMQAAAAAAAAIzAAAAAAAAAAAAAAAA8L8"
				],
				[
					854,
					2,
					"left_delete",
					null,
					"AgAAAEIxAAAAAAAAQjEAAAAAAAABAAAAIEExAAAAAAAAQTEAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABDMQAAAAAAAEMxAAAAAAAAAAAAAAAA8L8"
				],
				[
					856,
					1,
					"left_delete",
					null,
					"AQAAAPAwAAAAAAAA8DAAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADxMAAAAAAAAPEwAAAAAAAAAAAAAAAogUA"
				],
				[
					861,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAACsqAAAAAAAALCoAAAAAAAAAAAAALCoAAAAAAAA0KgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAArKgAAAAAAACsqAAAAAAAAAAAAAAAA8L8"
				],
				[
					867,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAADIpAAAAAAAAMykAAAAAAAAAAAAAMykAAAAAAAA3KQAAAAAAAAAAAAAxKgAAAAAAADEqAAAAAAAACAAAACAgICAgICAg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAyKQAAAAAAADIpAAAAAAAAAAAAAAAA8L8"
				],
				[
					869,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAPEoAAAAAAAA8igAAAAAAAAAAAAA8igAAAAAAAD2KAAAAAAAAAAAAAA4KQAAAAAAADgpAAAAAAAABAAAACAgICA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADxKAAAAAAAAPEoAAAAAAAAAAAAAAAAQkA"
				],
				[
					871,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAACspAAAAAAAALCkAAAAAAAAAAAAALCkAAAAAAAAwKQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAArKQAAAAAAACspAAAAAAAAAAAAAAAAQkA"
				],
				[
					876,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAMYkAAAAAAAAxyQAAAAAAAAAAAAAxyQAAAAAAADJJAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADGJAAAAAAAAMYkAAAAAAAAAAAAAAAAMkA"
				],
				[
					878,
					1,
					"left_delete",
					null,
					"AQAAAOMkAAAAAAAA4yQAAAAAAAABAAAAew",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADkJAAAAAAAAOQkAAAAAAAA////////738"
				],
				[
					880,
					3,
					"left_delete",
					null,
					"AwAAAEglAAAAAAAASCUAAAAAAAABAAAAfUYlAAAAAAAARiUAAAAAAAACAAAAICBFJQAAAAAAAEUlAAAAAAAAAQAAAAo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABJJQAAAAAAAEklAAAAAAAAAAAAAACAb0A"
				],
				[
					882,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAABkkAAAAAAAAGiQAAAAAAAAAAAAAGiQAAAAAAAAgJAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAZJAAAAAAAABkkAAAAAAAAAAAAAABIi0A"
				],
				[
					885,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAHcjAAAAAAAAeCMAAAAAAAAAAAAAeCMAAAAAAAB8IwAAAAAAAAAAAAAfJAAAAAAAAB8kAAAAAAAABgAAACAgICAgIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB3IwAAAAAAAHcjAAAAAAAAAAAAAAAAQkA"
				],
				[
					890,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAF8hAAAAAAAAYCEAAAAAAAAAAAAAYCEAAAAAAABkIQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABfIQAAAAAAAF8hAAAAAAAAAAAAAAAA8L8"
				],
				[
					893,
					1,
					"left_delete",
					null,
					"AgAAALkgAAAAAAAAuSAAAAAAAAAzAAAALy8gY29uc29sZS5sb2coJ1RvdWNoUHJpbnRlcicsIGV2ZW50KTsKICAgIC8vCgogICAgLSEAAAAAAAAtIQAAAAAAAAQAAAAgICAg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC5IAAAAAAAAOwgAAAAAAAAAAAAAAAAQkA"
				],
				[
					895,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAMkgAAAAAAAAyiAAAAAAAAAAAAAAyiAAAAAAAADOIAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADJIAAAAAAAAMkgAAAAAAAAAAAAAAAAQkA"
				],
				[
					900,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAADEgAAAAAAAAMiAAAAAAAAAAAAAAMiAAAAAAAAA2IAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAxIAAAAAAAADEgAAAAAAAAAAAAAAAA8L8"
				],
				[
					905,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAANkTAAAAAAAA2hMAAAAAAAAAAAAA2hMAAAAAAADgEwAAAAAAAAAAAAA5IAAAAAAAADkgAAAAAAAABAAAACAgICA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADZEwAAAAAAANkTAAAAAAAAAAAAAAAA8L8"
				],
				[
					908,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAANoRAAAAAAAA2xEAAAAAAAAAAAAA2xEAAAAAAADfEQAAAAAAAAAAAADfEwAAAAAAAN8TAAAAAAAABgAAACAgICAgIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADaEQAAAAAAANoRAAAAAAAAAAAAAAAA8L8"
				],
				[
					911,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAPgQAAAAAAAA+RAAAAAAAAAAAAAA+RAAAAAAAAD7EAAAAAAAAAAAAADeEQAAAAAAAN4RAAAAAAAABAAAACAgICA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD4EAAAAAAAAPgQAAAAAAAAAAAAAAAA8L8"
				],
				[
					914,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAHwOAAAAAAAAfQ4AAAAAAAAAAAAAfQ4AAAAAAAB/DgAAAAAAAAAAAAD8EAAAAAAAAPwQAAAAAAAAAgAAACAg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB8DgAAAAAAAHwOAAAAAAAAAAAAAAAA8L8"
				],
				[
					921,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAADsNAAAAAAAAPA0AAAAAAAAAAAAAPA0AAAAAAAA+DQAAAAAAAAAAAACADgAAAAAAAIAOAAAAAAAAAgAAACAg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA7DQAAAAAAADsNAAAAAAAAAAAAAAAA8L8"
				],
				[
					924,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAABwNAAAAAAAAHQ0AAAAAAAAAAAAAHQ0AAAAAAAAjDQAAAAAAAAAAAABDDQAAAAAAAEMNAAAAAAAAAgAAACAg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAcDQAAAAAAABwNAAAAAAAAAAAAAAAA8L8"
				],
				[
					927,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAK0MAAAAAAAArgwAAAAAAAAAAAAArgwAAAAAAACxDAAAAAAAAAAAAAAhDQAAAAAAACENAAAAAAAABgAAACAgICAgIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACtDAAAAAAAAK0MAAAAAAAAAAAAAAAA8L8"
				],
				[
					933,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJUMAAAAAAAAlgwAAAAAAAAAAAAAlgwAAAAAAACaDAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACVDAAAAAAAAJUMAAAAAAAAAAAAAAAAQkA"
				],
				[
					942,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJgLAAAAAAAAmQsAAAAAAAAAAAAAmQsAAAAAAACbCwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACYCwAAAAAAAJgLAAAAAAAAAAAAAAAA8L8"
				],
				[
					945,
					2,
					"left_delete",
					null,
					"AwAAAHIIAAAAAAAAcggAAAAAAABiAAAACi8qZnVuY3Rpb24gU2V0TG9ja2VkKHN0YXRlKSB7CiAgaHRtbEVsZW1lbnQuY2xhc3NMaXN0W3N0YXRlID8gJ2FkZCcgOiAncmVtb3ZlJ10oJ2lzLWxvY2tlZCcpOwp9Ki83CwAAAAAAADcLAAAAAAAAAgAAACAgcQgAAAAAAABxCAAAAAAAAAEAAAAK",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAByCAAAAAAAANQIAAAAAAAAAAAAAAAA8L8"
				],
				[
					950,
					2,
					"left_delete",
					null,
					"AgAAALMGAAAAAAAAswYAAAAAAABfAAAACi8vaW1wb3J0IHsgZmlyZSB9IGZyb20gJy4vZmlyZS9idWlsZC9maXJlLWRlYnVnLmpzJzsKLy9pbXBvcnQgbHNjYWNoZSBmcm9tICcuL2xpYi9sc2NhY2hlLmpzJzuyBgAAAAAAALIGAAAAAAAAAQAAAAo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACzBgAAAAAAABIHAAAAAAAAAAAAAAAA8L8"
				],
				[
					961,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAALVEAAAAAAAAtkQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC1RAAAAAAAALVEAAAAAAAAAAAAAAAA8L8"
				],
				[
					1,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAtkQAAAAAAAC2RAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/async/websocket.js",
			"settings":
			{
				"buffer_size": 4060,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					51,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAPoPAAAAAAAA+w8AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD6DwAAAAAAAPoPAAAAAAAAAAAAAAAA8L8"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": " ev"
					},
					"AwAAAPsPAAAAAAAA/A8AAAAAAAAAAAAA/A8AAAAAAAD9DwAAAAAAAAAAAAD9DwAAAAAAAP4PAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD7DwAAAAAAAPsPAAAAAAAAAAAAAAAA8L8"
				],
				[
					62,
					1,
					"insert",
					{
						"characters": "globalThis.ev="
					},
					"DgAAAPwPAAAAAAAA/Q8AAAAAAAAAAAAA/Q8AAAAAAAD+DwAAAAAAAAAAAAD+DwAAAAAAAP8PAAAAAAAAAAAAAP8PAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAABEAAAAAAAAAAAAAABEAAAAAAAAAIQAAAAAAAAAAAAAAIQAAAAAAAAAxAAAAAAAAAAAAAAAxAAAAAAAAAEEAAAAAAAAAAAAAAEEAAAAAAAAAUQAAAAAAAAAAAAAAUQAAAAAAAABhAAAAAAAAAAAAAABhAAAAAAAAAHEAAAAAAAAAAAAAAHEAAAAAAAAAgQAAAAAAAAAAAAAAgQAAAAAAAACRAAAAAAAAAAAAAACRAAAAAAAAAKEAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD8DwAAAAAAAPwPAAAAAAAAAAAAAAAA8L8"
				],
				[
					84,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAEENAAAAAAAAQg0AAAAAAAAAAAAAQg0AAAAAAABGDQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABBDQAAAAAAAEENAAAAAAAAAAAAAAAA8L8"
				],
				[
					380,
					5,
					"left_delete",
					null,
					"BgAAAHsLAAAAAAAAewsAAAAAAADAAQAALyogIGxhenlQcm9wZXJ0aWVzKHRoaXMsIHsKICAgICAgICB3cml0YWJsZTogKCkgPT4KICAgICAgICAgIG5ldyBXcml0YWJsZVN0cmVhbSh7CiAgICAgICAgICAgIHdyaXRlOiBjaHVuayA9PiB0aGlzLnNvY2tldC5zZW5kKGNodW5rKSwKICAgICAgICAgICAgY2xvc2U6ICgpID0+IHRoaXMuc29ja2V0LmNsb3NlKCksCiAgICAgICAgICAgIGFib3J0OiBlcnIgPT4gdGhpcy5zb2NrZXQuY2xvc2UoZXJyKQogICAgICAgICAgfSksCiAgICAgICAgcmVhZGFibGU6ICgpID0+CiAgICAgICAgICBuZXcgUmVhZGFibGVTdHJlYW0oewogICAgICAgICAgICBzdGFydDogYXN5bmMgY29udHJvbGxlciA9PiB7CiAgICAgICAgICAgICAgZm9yIGF3YWl0KGxldCBjaHVuayBvZiB0aGlzKSBjb250cm9sbGVyLmVucXVldWUoY2h1bmspOwogICAgICAgICAgICB9CiAgICAgICAgICB9KQogICAgICB9KTsqL4ILAAAAAAAAggsAAAAAAAAEAAAAICAgIHkLAAAAAAAAeQsAAAAAAAACAAAAICB3CwAAAAAAAHcLAAAAAAAAAgAAACAgdQsAAAAAAAB1CwAAAAAAAAIAAAAgIHQLAAAAAAAAdAsAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB7CwAAAAAAADsNAAAAAAAAAAAAAAAA8L8"
				],
				[
					382,
					1,
					"left_delete",
					null,
					"AQAAAEQLAAAAAAAARAsAAAAAAAABAAAAew",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABFCwAAAAAAAEULAAAAAAAAAAAAAADgeUA"
				],
				[
					385,
					4,
					"left_delete",
					null,
					"BAAAAHgLAAAAAAAAeAsAAAAAAAABAAAAfXYLAAAAAAAAdgsAAAAAAAACAAAAICB0CwAAAAAAAHQLAAAAAAAAAgAAACAgcwsAAAAAAABzCwAAAAAAAAEAAAAK",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB5CwAAAAAAAHkLAAAAAAAAAAAAAABAbUA"
				],
				[
					483,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAGgKAAAAAAAAaQoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABoCgAAAAAAAGgKAAAAAAAAAAAAAAAA8L8"
				],
				[
					485,
					1,
					"insert",
					{
						"characters": "this.handler"
					},
					"DAAAAGgKAAAAAAAAaQoAAAAAAAAAAAAAaQoAAAAAAABqCgAAAAAAAAAAAABqCgAAAAAAAGsKAAAAAAAAAAAAAGsKAAAAAAAAbAoAAAAAAAAAAAAAbAoAAAAAAABtCgAAAAAAAAAAAABtCgAAAAAAAG4KAAAAAAAAAAAAAG4KAAAAAAAAbwoAAAAAAAAAAAAAbwoAAAAAAABwCgAAAAAAAAAAAABwCgAAAAAAAHEKAAAAAAAAAAAAAHEKAAAAAAAAcgoAAAAAAAAAAAAAcgoAAAAAAABzCgAAAAAAAAAAAABzCgAAAAAAAHQKAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABoCgAAAAAAAGgKAAAAAAAAAAAAAAAAAAA"
				],
				[
					486,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAHQKAAAAAAAAdQoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB0CgAAAAAAAHQKAAAAAAAAAAAAAAAA8L8"
				],
				[
					487,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAHUKAAAAAAAAdgoAAAAAAAAAAAAAdgoAAAAAAAB3CgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB1CgAAAAAAAHUKAAAAAAAAAAAAAAAA8L8"
				],
				[
					488,
					1,
					"insert",
					{
						"characters": " handlers;"
					},
					"CgAAAHcKAAAAAAAAeAoAAAAAAAAAAAAAeAoAAAAAAAB5CgAAAAAAAAAAAAB5CgAAAAAAAHoKAAAAAAAAAAAAAHoKAAAAAAAAewoAAAAAAAAAAAAAewoAAAAAAAB8CgAAAAAAAAAAAAB8CgAAAAAAAH0KAAAAAAAAAAAAAH0KAAAAAAAAfgoAAAAAAAAAAAAAfgoAAAAAAAB/CgAAAAAAAAAAAAB/CgAAAAAAAIAKAAAAAAAAAAAAAIAKAAAAAAAAgQoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB3CgAAAAAAAHcKAAAAAAAAAAAAAAAA8L8"
				],
				[
					499,
					8,
					"left_delete",
					null,
					"CAAAAJsKAAAAAAAAmwoAAAAAAAABAAAAc5oKAAAAAAAAmgoAAAAAAAABAAAAcpkKAAAAAAAAmQoAAAAAAAABAAAAZZgKAAAAAAAAmAoAAAAAAAABAAAAbJcKAAAAAAAAlwoAAAAAAAABAAAAZJYKAAAAAAAAlgoAAAAAAAABAAAAbpUKAAAAAAAAlQoAAAAAAAABAAAAYZQKAAAAAAAAlAoAAAAAAAABAAAAaA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACcCgAAAAAAAJwKAAAAAAAAAAAAAAAA8L8"
				],
				[
					504,
					1,
					"paste",
					null,
					"AgAAALcKAAAAAAAAxAoAAAAAAAAAAAAAxAoAAAAAAADECgAAAAAAAAIAAAB7fQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC3CgAAAAAAALkKAAAAAAAAAAAAAAAA8L8"
				],
				[
					1,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADaDwAAaW1wb3J0IHsgd2FpdEZvciB9IGZyb20gJy4uL21pc2MuanMnOwoKaWYoZ2xvYmFsVGhpcy5XZWJTb2NrZXQpIFdlYlNvY2tldC5tYWtlVVJMID0gV2ViU29ja2V0VVJMOwoKLy8gR2VuZXJhdGUgYSBQcm9taXNlIHRoYXQgbGlzdGVucyBvbmx5IG9uY2UgZm9yIGFuIGV2ZW50CmNvbnN0IG9uY2VQcm9taXNlID0gKGVtaXR0ZXIsIGV2ZW50cykgPT4gewogIGlmKCFBcnJheS5pc0FycmF5KGV2ZW50cykpIGV2ZW50cyA9IFtldmVudHNdOwoKICByZXR1cm4gbmV3IFByb21pc2UoCiAgICAvKidhZGRFdmVudExpc3RlbmVyJyBpbiBlbWl0dGVyIHx8Ki8gZmFsc2UKICAgICAgPyByZXNvbHZlID0+IHsKICAgICAgICAgIGNvbnN0IGhhbmRsZXIgPSBlID0+IHsKICAgICAgICAgICAgZm9yKGxldCBuYW1lIG9mIGV2ZW50cykgZW1pdHRlci5yZW1vdmVFdmVudExpc3RlbmVyKG5hbWUsIGhhbmRsZXIpOwogICAgICAgICAgICByZXNvbHZlKGUpOwogICAgICAgICAgfTsKICAgICAgICAgIGZvcihsZXQgbmFtZSBvZiBldmVudHMpIGVtaXR0ZXIuYWRkRXZlbnRMaXN0ZW5lcihuYW1lLCBoYW5kbGVyKTsKICAgICAgICB9CiAgICAgIDogcmVzb2x2ZSA9PiB7CiAgICAgICAgICBjb25zdCBoYW5kbGVyID0gZSA9PiB7CiAgICAgICAgICAgIGZvcihsZXQgbmFtZSBvZiBldmVudHMpIGVtaXR0ZXJbJ29uJyArIG5hbWVdID0gMDsKICAgICAgICAgICAgcmVzb2x2ZShlKTsKICAgICAgICAgIH07CiAgICAgICAgICBmb3IobGV0IG5hbWUgb2YgZXZlbnRzKSBlbWl0dGVyWydvbicgKyBuYW1lXSA9IGhhbmRsZXI7CiAgICAgICAgfQogICk7Cn07CgpleHBvcnQgY2xhc3MgV2ViU29ja2V0RXJyb3IgZXh0ZW5kcyBFcnJvciB7CiAgY29uc3RydWN0b3IobWVzc2FnZSwgd3MpIHsKICAgIHN1cGVyKG1lc3NhZ2UpOwogICAgdGhpcy5zb2NrZXQgPSB3czsKICB9Cn0KCi8vIEFkZCBhbiBhc3luYyBpdGVyYXRvciB0byBhbGwgV2ViU29ja2V0cwovL1dlYlNvY2tldC5wcm90b3R5cGVbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gV2ViU29ja2V0SXRlcmF0b3I7CgpleHBvcnQgYXN5bmMgZnVuY3Rpb24qIFdlYlNvY2tldEl0ZXJhdG9yKCkgewogIHdoaWxlKHRoaXMucmVhZHlTdGF0ZSAhPT0gV2ViU29ja2V0LkNMT1NFRCkgewogICAgbGV0IGV2ID0gYXdhaXQgb25jZVByb21pc2UodGhpcywgWydtZXNzYWdlJywgJ2Nsb3NlJywgJ2Vycm9yJ10pOwogICAgc3dpdGNoIChldi50eXBlKSB7CiAgICAgIGNhc2UgJ21lc3NhZ2UnOgogICAgICAgIHlpZWxkIGV2LmRhdGE7CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgJ2Nsb3NlJzoKICAgICAgICBjb25zdCB7IHJlYXNvbiwgY29kZSB9ID0gZXY7CiAgICAgICAgcmV0dXJuIHsgcmVhc29uLCBjb2RlIH07CgogICAgICBjYXNlICdlcnJvcic6CiAgICAgICAgdGhpcy5lcnJvciA9IGV2OwogICAgICAgIHRocm93IG5ldyBXZWJTb2NrZXRFcnJvcihgV2ViU29ja2V0IGVycm9yYCwgdGhpcyk7CiAgICAgICAgYnJlYWs7CiAgICB9CiAgfQp9CgpleHBvcnQgZnVuY3Rpb24gV2ViU29ja2V0VVJMKGFyZyA9ICcvJywgcXVlcnkgPSB7fSkgewogIGNvbnN0IHsgcHJvdG9jb2wsIG9yaWdpbiB9ID0gd2luZG93LmxvY2F0aW9uOwogIGxldCBwYXRoID0gdHlwZW9mIGFyZyA9PSAnb2JqZWN0JyA/IGFyZy5wYXRobmFtZSB8fCBhcmcucGF0aCB8fCAnJyA6IGFyZzsKICBsZXQgdXJsID0gbmV3IFVSTChwYXRoLCBvcmlnaW4ucmVwbGFjZSgvXmh0dHAvLCAnd3MnKSk7CiAgaWYodHlwZW9mIGFyZyA9PSAnb2JqZWN0JykgT2JqZWN0LmFzc2lnbih1cmwsIGFyZyk7CiAgZm9yKGxldCBrZXkgaW4gcXVlcnkpIHVybC5zZWFyY2hQYXJhbXMuc2V0KGtleSwgcXVlcnlba2V5XSk7CiAgcmV0dXJuIHVybFtwYXRoID09PSAnJyA/ICdvcmlnaW4nIDogJ2hyZWYnXTsKfQoKZXhwb3J0IGZ1bmN0aW9uIENyZWF0ZVdlYlNvY2tldChwYXRoID0gJy8nLCBwcm90b2NvbHMgPSBbXSkgewogIGNvbnNvbGUubG9nKCdDcmVhdGVXZWJTb2NrZXQnLCB7IHBhdGgsIHByb3RvY29scyB9KTsKICBsZXQgd3MgPSBuZXcgV2ViU29ja2V0KHBhdGggaW5zdGFuY2VvZiBVUkwgPyBwYXRoIDogV2ViU29ja2V0VVJMKHBhdGgpLCBwcm90b2NvbHMpOwogIHdzW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IFdlYlNvY2tldEl0ZXJhdG9yOwogIHJldHVybiB3czsKfQoKZXhwb3J0IGFzeW5jIGZ1bmN0aW9uKiBTdHJlYW1SZWFkSXRlcmF0b3Ioc3RybSkgewogIGxldCByZWFkZXIgPSBhd2FpdCBzdHJtLmdldFJlYWRlcigpOwoKICBkbyB7CiAgICBsZXQgeyBkb25lLCB2YWx1ZSB9ID0gYXdhaXQgcmVhZGVyLnJlYWQoKTsKICAgIGlmKGRvbmUpIGJyZWFrOwogICAgeWllbGQgdmFsdWU7CiAgfSB3aGlsZSh0cnVlKTsKCiAgYXdhaXQgcmVhZGVyLnJlbGVhc2VMb2NrKCk7Cn0KCmV4cG9ydCBjbGFzcyBSZWNvbm5lY3RpbmdXZWJTb2NrZXQgewogIHVybCA9IG51bGw7CiAgcHJvdG9jb2xzID0gW107CiAgbWVzc2FnZSA9IG51bGw7CiAgY2xvc2UgPSBudWxsOwogIGVycm9yID0gbnVsbDsKCiAgY29uc3RydWN0b3IodXJsID0gJy93cycsIHByb3RvY29scyA9IFtdLCBoYW5kbGVycyA9IHt9KSB7CiAgICB0aGlzLnVybCA9IFdlYlNvY2tldFVSTCh1cmwpICsgJyc7CiAgICB0aGlzLnByb3RvY29scyA9IHByb3RvY29sczsKdGhpcy5oYW5kbGVycyA9IGhhbmRsZXJzOwoKICAgIHRoaXMuY29ubmVjdCgpOwogIH0KCiAgYXN5bmMgY29ubmVjdChoYW5kbGVycyA9IHRoaXMuaGFuZGxlcnMpIHsKICAgIHRoaXMuc29ja2V0ID0gQ3JlYXRlV2ViU29ja2V0KHRoaXMudXJsLCB0aGlzLnByb3RvY29scyk7CgogICAgbGV0IGV2ID0gYXdhaXQgb25jZVByb21pc2UodGhpcy5zb2NrZXQsIFsnb3BlbicsICdlcnJvciddKTsKCiAgICBpZihldi50eXBlID09ICdvcGVuJykgCiAgICAgIGlmKGhhbmRsZXJzLm9uT3BlbikgaGFuZGxlcnMub25PcGVuKGV2KTsKCiAgICByZXR1cm4gZXY7CiAgfQoKICBnZXQgd3JpdGFibGUoKSB7CiAgICByZXR1cm4gbmV3IFdyaXRhYmxlU3RyZWFtKHsKICAgICAgd3JpdGU6IGNodW5rID0+IHRoaXMuc29ja2V0LnNlbmQoY2h1bmspLAogICAgICBjbG9zZTogKCkgPT4gdGhpcy5zb2NrZXQuY2xvc2UoKSwKICAgICAgYWJvcnQ6IGVyciA9PiB0aGlzLnNvY2tldC5jbG9zZShlcnIpCiAgICB9KTsKICB9CgogIGdldCByZWFkYWJsZSgpIHsKICAgIHJldHVybiBuZXcgUmVhZGFibGVTdHJlYW0oewogICAgICBzdGFydDogYXN5bmMgY29udHJvbGxlciA9PiB7CiAgICAgICAgZm9yIGF3YWl0KGxldCBjaHVuayBvZiB0aGlzKSBjb250cm9sbGVyLmVucXVldWUoY2h1bmspOwogICAgICB9CiAgICB9KTsKICB9CgogIGFzeW5jICpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkgewogICAgbGV0IGV2OwoKICAgIHdoaWxlKChldiA9IGF3YWl0IG9uY2VQcm9taXNlKHRoaXMuc29ja2V0LCBbJ21lc3NhZ2UnLCAnY2xvc2UnLCAnZXJyb3InXSkpKSB7CiAgICAgIGlmKGV2LnR5cGUgPT0gJ21lc3NhZ2UnKSB7CiAgICAgICAgeWllbGQgZXYuZGF0YTsKICAgICAgICBjb250aW51ZTsKICAgICAgfQoKICAgICAgY29uc3QgeyB0eXBlLCByZWFzb24sIGNvZGUgfSA9IGV2OwogICAgICBjb25zb2xlLmxvZygnY2xvc2VkL2Vycm9yJywgeyB0eXBlLCByZWFzb24sIGNvZGUgfSwgZ2xvYmFsVGhpcy5ldj1ldik7CgogICAgICBhd2FpdCB3YWl0Rm9yKHR5cGUgPT0gJ2Vycm9yJyA/IDEwMDAwIDogMjUwKTsKCiAgICAgIGxldCByZXQgPSBhd2FpdCB0aGlzLmNvbm5lY3QoKTsKICAgICAgY29uc29sZS5sb2coJ3JlY29ubmVjdCcsIHJldCk7CiAgICB9CgogICAgLypyZXR1cm4gewogICAgICBuZXh0OiBhc3luYyAoKSA9PiB7CiAgICAgICAgbGV0IG1zZyA9IGF3YWl0IHRoaXMubWVzc2FnZTsKICAgICAgICBjb25zb2xlLmxvZygnbXNnJyxtc2cpOwogICAgICAgIHRoaXMubWVzc2FnZSA9IG9uY2VQcm9taXNlKHRoaXMuc29ja2V0LCAnbWVzc2FnZScpOwogICAgICAgIHJldHVybiB7IHZhbHVlOiBtc2cuZGF0YSwgZG9uZTogZmFsc2UgfTsKICAgICAgfQogICAgfTsqLwogIH0KfQoAAAAAAAAAANwPAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvQwAAAAAAAC9DAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "quickjs/qjs-modules/quickjs-inspect.c",
			"settings":
			{
				"buffer_size": 41679,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					441,
					1,
					"cut",
					null,
					"AQAAAEYkAAAAAAAARiQAAAAAAAC+AAAACnN0YXRpYyBpbnQKb3B0aW9uc19oaWRkZW4oSW5zcGVjdE9wdGlvbnMqIG9wdHMsIEpTQXRvbSBhdG9tKSB7CiAgUHJvcGVydHlLZXkqIGtleTsKCiAgdmVjdG9yX2ZvcmVhY2hfdCgmb3B0cy0+aGlkZV9rZXlzLCBrZXkpIHsKICAgIGlmKGtleS0+YXRvbSA9PSBhdG9tKQogICAgICByZXR1cm4gMTsKICB9CgogIHJldHVybiAwOwp9Cg",
					"AQAAAAAAAAABAAAARiQAAAAAAAAEJQAAAAAAAAAAAAAAAPC/"
				],
				[
					442,
					2,
					"paste",
					null,
					"AgAAAEYkAAAAAAAABCUAAAAAAAAAAAAABCUAAAAAAADCJQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARiQAAAAAAABGJAAAAAAAAAAAAAAAAPC/"
				],
				[
					449,
					1,
					"insert",
					{
						"characters": "h7"
					},
					"AwAAABglAAAAAAAAGSUAAAAAAAAAAAAAGSUAAAAAAAAZJQAAAAAAAAYAAABoaWRkZW4ZJQAAAAAAABolAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGCUAAAAAAAAeJQAAAAAAAAAAAAAAAPC/"
				],
				[
					450,
					2,
					"left_delete",
					null,
					"AgAAABklAAAAAAAAGSUAAAAAAAABAAAANxglAAAAAAAAGCUAAAAAAAABAAAAaA",
					"AQAAAAAAAAABAAAAGiUAAAAAAAAaJQAAAAAAAAAAAAAAAPC/"
				],
				[
					451,
					1,
					"insert",
					{
						"characters": "numhidden"
					},
					"CQAAABglAAAAAAAAGSUAAAAAAAAAAAAAGSUAAAAAAAAaJQAAAAAAAAAAAAAaJQAAAAAAABslAAAAAAAAAAAAABslAAAAAAAAHCUAAAAAAAAAAAAAHCUAAAAAAAAdJQAAAAAAAAAAAAAdJQAAAAAAAB4lAAAAAAAAAAAAAB4lAAAAAAAAHyUAAAAAAAAAAAAAHyUAAAAAAAAgJQAAAAAAAAAAAAAgJQAAAAAAACElAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGCUAAAAAAAAYJQAAAAAAAAAAAAAAAPC/"
				],
				[
					458,
					1,
					"insert",
					{
						"characters": "*"
					},
					"AQAAAD8lAAAAAAAAQCUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPyUAAAAAAAA/JQAAAAAAAAAAAAAAAPC/"
				],
				[
					460,
					1,
					"insert",
					{
						"characters": "const"
					},
					"BQAAADglAAAAAAAAOSUAAAAAAAAAAAAAOSUAAAAAAAA6JQAAAAAAAAAAAAA6JQAAAAAAADslAAAAAAAAAAAAADslAAAAAAAAPCUAAAAAAAAAAAAAPCUAAAAAAAA9JQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOCUAAAAAAAA4JQAAAAAAAAAAAAAAAPC/"
				],
				[
					461,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAD0lAAAAAAAAPiUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPSUAAAAAAAA9JQAAAAAAAAAAAAAAAPC/"
				],
				[
					465,
					1,
					"left_delete",
					null,
					"AQAAAEQlAAAAAAAARCUAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAARSUAAAAAAABFJQAAAAAAAAAAAAAAAPC/"
				],
				[
					466,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEQlAAAAAAAARSUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARCUAAAAAAABEJQAAAAAAAAAAAAAAAPC/"
				],
				[
					467,
					1,
					"right_delete",
					null,
					"AQAAAEUlAAAAAAAARSUAAAAAAAABAAAAKg",
					"AQAAAAAAAAABAAAARSUAAAAAAABFJQAAAAAAAAAAAAAAAPC/"
				],
				[
					469,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAEklAAAAAAAASyUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASSUAAAAAAABJJQAAAAAAAAAAAAAAAPC/"
				],
				[
					471,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAEslAAAAAAAATCUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASyUAAAAAAABLJQAAAAAAAAAAAAAAAPC/"
				],
				[
					472,
					1,
					"insert",
					{
						"characters": " size_t"
					},
					"BwAAAEwlAAAAAAAATSUAAAAAAAAAAAAATSUAAAAAAABOJQAAAAAAAAAAAABOJQAAAAAAAE8lAAAAAAAAAAAAAE8lAAAAAAAAUCUAAAAAAAAAAAAAUCUAAAAAAABRJQAAAAAAAAAAAABRJQAAAAAAAFIlAAAAAAAAAAAAAFIlAAAAAAAAUyUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATCUAAAAAAABMJQAAAAAAAAAAAAAAAPC/"
				],
				[
					473,
					1,
					"insert",
					{
						"characters": "  n"
					},
					"AwAAAFMlAAAAAAAAVCUAAAAAAAAAAAAAVCUAAAAAAABVJQAAAAAAAAAAAABVJQAAAAAAAFYlAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUyUAAAAAAABTJQAAAAAAAAAAAAAAAPC/"
				],
				[
					479,
					1,
					"insert",
					{
						"characters": "\n\nfor"
					},
					"CAAAAFklAAAAAAAAWiUAAAAAAAAAAAAAWiUAAAAAAABcJQAAAAAAAAAAAABcJQAAAAAAAF0lAAAAAAAAAAAAAF0lAAAAAAAAXyUAAAAAAAAAAAAAWiUAAAAAAABaJQAAAAAAAAIAAAAgIF0lAAAAAAAAXiUAAAAAAAAAAAAAXiUAAAAAAABfJQAAAAAAAAAAAABfJQAAAAAAAGAlAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWSUAAAAAAABZJQAAAAAAAP///////+9/"
				],
				[
					480,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAGAlAAAAAAAAYiUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYCUAAAAAAABgJQAAAAAAAAAAAAAAAPC/"
				],
				[
					483,
					1,
					"insert",
					{
						"characters": "siuze"
					},
					"BQAAAGElAAAAAAAAYiUAAAAAAAAAAAAAYiUAAAAAAABjJQAAAAAAAAAAAABjJQAAAAAAAGQlAAAAAAAAAAAAAGQlAAAAAAAAZSUAAAAAAAAAAAAAZSUAAAAAAABmJQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYSUAAAAAAABhJQAAAAAAAAAAAAAAAEtA"
				],
				[
					484,
					1,
					"left_delete",
					null,
					"AQAAAGUlAAAAAAAAZSUAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAZiUAAAAAAABmJQAAAAAAAAAAAAAAAPC/"
				],
				[
					485,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGUlAAAAAAAAZiUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZSUAAAAAAABlJQAAAAAAAAAAAAAAAPC/"
				],
				[
					486,
					2,
					"left_delete",
					null,
					"AgAAAGUlAAAAAAAAZSUAAAAAAAABAAAAIGQlAAAAAAAAZCUAAAAAAAABAAAAeg",
					"AQAAAAAAAAABAAAAZiUAAAAAAABmJQAAAAAAAAAAAAAAAPC/"
				],
				[
					487,
					1,
					"insert",
					{
						"characters": "z"
					},
					"AQAAAGQlAAAAAAAAZSUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZCUAAAAAAABkJQAAAAAAAAAAAAAAAPC/"
				],
				[
					488,
					2,
					"left_delete",
					null,
					"AgAAAGQlAAAAAAAAZCUAAAAAAAABAAAAemMlAAAAAAAAYyUAAAAAAAABAAAAdQ",
					"AQAAAAAAAAABAAAAZSUAAAAAAABlJQAAAAAAAAAAAAAAAPC/"
				],
				[
					489,
					1,
					"insert",
					{
						"characters": "ze_t"
					},
					"BAAAAGMlAAAAAAAAZCUAAAAAAAAAAAAAZCUAAAAAAABlJQAAAAAAAAAAAABlJQAAAAAAAGYlAAAAAAAAAAAAAGYlAAAAAAAAZyUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYyUAAAAAAABjJQAAAAAAAAAAAAAAAPC/"
				],
				[
					490,
					1,
					"insert",
					{
						"characters": " i"
					},
					"AgAAAGclAAAAAAAAaCUAAAAAAAAAAAAAaCUAAAAAAABpJQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZyUAAAAAAABnJQAAAAAAAAAAAAAAAPC/"
				],
				[
					491,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAGklAAAAAAAAaiUAAAAAAAAAAAAAaiUAAAAAAABrJQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaSUAAAAAAABpJQAAAAAAAAAAAAAAAPC/"
				],
				[
					492,
					1,
					"insert",
					{
						"characters": " 0;"
					},
					"AwAAAGslAAAAAAAAbCUAAAAAAAAAAAAAbCUAAAAAAABtJQAAAAAAAAAAAABtJQAAAAAAAG4lAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAayUAAAAAAABrJQAAAAAAAAAAAAAAAPC/"
				],
				[
					493,
					1,
					"insert",
					{
						"characters": " i"
					},
					"AgAAAG4lAAAAAAAAbyUAAAAAAAAAAAAAbyUAAAAAAABwJQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbiUAAAAAAABuJQAAAAAAAAAAAAAAAPC/"
				],
				[
					494,
					1,
					"insert",
					{
						"characters": " <"
					},
					"AgAAAHAlAAAAAAAAcSUAAAAAAAAAAAAAcSUAAAAAAAByJQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcCUAAAAAAABwJQAAAAAAAAAAAAAAAPC/"
				],
				[
					495,
					1,
					"insert",
					{
						"characters": " n"
					},
					"AgAAAHIlAAAAAAAAcyUAAAAAAAAAAAAAcyUAAAAAAAB0JQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAciUAAAAAAAByJQAAAAAAAAAAAAAAAPC/"
				],
				[
					497,
					1,
					"left_delete",
					null,
					"AQAAAHQlAAAAAAAAdCUAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAdSUAAAAAAAB1JQAAAAAAAAAAAAAAAPC/"
				],
				[
					498,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAHQlAAAAAAAAdSUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdCUAAAAAAAB0JQAAAAAAAAAAAAAAAPC/"
				],
				[
					499,
					1,
					"insert",
					{
						"characters": " i++)"
					},
					"BQAAAHUlAAAAAAAAdiUAAAAAAAAAAAAAdiUAAAAAAAB3JQAAAAAAAAAAAAB3JQAAAAAAAHglAAAAAAAAAAAAAHglAAAAAAAAeSUAAAAAAAAAAAAAeSUAAAAAAAB6JQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdSUAAAAAAAB1JQAAAAAAAAAAAAAAAPC/"
				],
				[
					500,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHolAAAAAAAAeyUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeiUAAAAAAAB6JQAAAAAAAAAAAAAAAPC/"
				],
				[
					501,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAHslAAAAAAAAfSUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeyUAAAAAAAB7JQAAAAAAAAAAAAAAAPC/"
				],
				[
					502,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAHwlAAAAAAAAfSUAAAAAAAAAAAAAfSUAAAAAAAB/JQAAAAAAAAAAAAB/JQAAAAAAAIAlAAAAAAAAAAAAAIAlAAAAAAAAgiUAAAAAAAAAAAAAfSUAAAAAAAB9JQAAAAAAAAIAAAAgIH0lAAAAAAAAgSUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfCUAAAAAAAB8JQAAAAAAAAAAAAAAAPC/"
				],
				[
					506,
					1,
					"cut",
					null,
					"AQAAAIYlAAAAAAAAhiUAAAAAAAB8AAAAICBQcm9wZXJ0eUtleSoga2V5OwoKICB2ZWN0b3JfZm9yZWFjaF90KCZvcHRzLT5oaWRlX2tleXMsIGtleSkgewogICAgaWYoa2V5LT5hdG9tID09IGF0b20pCiAgICAgIHJldHVybiAxOwogIH0KCiAgcmV0dXJuIDA7Cg",
					"AQAAAAAAAAABAAAAhiUAAAAAAAACJgAAAAAAAAAAAAAAAAAA"
				],
				[
					509,
					1,
					"insert",
					{
						"characters": "int"
					},
					"BAAAAFolAAAAAAAAWyUAAAAAAAAAAAAAfiUAAAAAAAB+JQAAAAAAAAQAAAAgICAgWyUAAAAAAABcJQAAAAAAAAAAAABcJQAAAAAAAF0lAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWiUAAAAAAABaJQAAAAAAAAAAAAAAAAAA"
				],
				[
					510,
					1,
					"insert",
					{
						"characters": " count=0;"
					},
					"CQAAAF0lAAAAAAAAXiUAAAAAAAAAAAAAXiUAAAAAAABfJQAAAAAAAAAAAABfJQAAAAAAAGAlAAAAAAAAAAAAAGAlAAAAAAAAYSUAAAAAAAAAAAAAYSUAAAAAAABiJQAAAAAAAAAAAABiJQAAAAAAAGMlAAAAAAAAAAAAAGMlAAAAAAAAZCUAAAAAAAAAAAAAZCUAAAAAAABlJQAAAAAAAAAAAABlJQAAAAAAAGYlAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXSUAAAAAAABdJQAAAAAAAAAAAAAAAPC/"
				],
				[
					511,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAGYlAAAAAAAAZyUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZiUAAAAAAABmJQAAAAAAAAAAAAAAAPC/"
				],
				[
					513,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AgAAAIolAAAAAAAAiyUAAAAAAAAAAAAAiyUAAAAAAACMJQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiiUAAAAAAACKJQAAAAAAAAAAAAAAAAAA"
				],
				[
					514,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAIwlAAAAAAAAjiUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjCUAAAAAAACMJQAAAAAAAAAAAAAAAPC/"
				],
				[
					515,
					1,
					"insert",
					{
						"characters": "options.hi"
					},
					"CgAAAI0lAAAAAAAAjiUAAAAAAAAAAAAAjiUAAAAAAACPJQAAAAAAAAAAAACPJQAAAAAAAJAlAAAAAAAAAAAAAJAlAAAAAAAAkSUAAAAAAAAAAAAAkSUAAAAAAACSJQAAAAAAAAAAAACSJQAAAAAAAJMlAAAAAAAAAAAAAJMlAAAAAAAAlCUAAAAAAAAAAAAAlCUAAAAAAACVJQAAAAAAAAAAAACVJQAAAAAAAJYlAAAAAAAAAAAAAJYlAAAAAAAAlyUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjSUAAAAAAACNJQAAAAAAAAAAAAAAAPC/"
				],
				[
					516,
					4,
					"left_delete",
					null,
					"BAAAAJYlAAAAAAAAliUAAAAAAAABAAAAaZUlAAAAAAAAlSUAAAAAAAABAAAAaJQlAAAAAAAAlCUAAAAAAAABAAAALpMlAAAAAAAAkyUAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAlyUAAAAAAACXJQAAAAAAAAAAAAAAAPC/"
				],
				[
					517,
					1,
					"insert",
					{
						"characters": "s_hidden"
					},
					"CAAAAJMlAAAAAAAAlCUAAAAAAAAAAAAAlCUAAAAAAACVJQAAAAAAAAAAAACVJQAAAAAAAJYlAAAAAAAAAAAAAJYlAAAAAAAAlyUAAAAAAAAAAAAAlyUAAAAAAACYJQAAAAAAAAAAAACYJQAAAAAAAJklAAAAAAAAAAAAAJklAAAAAAAAmiUAAAAAAAAAAAAAmiUAAAAAAACbJQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkyUAAAAAAACTJQAAAAAAAAAAAAAAAPC/"
				],
				[
					518,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJslAAAAAAAAnSUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmyUAAAAAAACbJQAAAAAAAAAAAAAAAPC/"
				],
				[
					519,
					1,
					"insert",
					{
						"characters": "opts,"
					},
					"BQAAAJwlAAAAAAAAnSUAAAAAAAAAAAAAnSUAAAAAAACeJQAAAAAAAAAAAACeJQAAAAAAAJ8lAAAAAAAAAAAAAJ8lAAAAAAAAoCUAAAAAAAAAAAAAoCUAAAAAAAChJQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnCUAAAAAAACcJQAAAAAAAAAAAAAAAPC/"
				],
				[
					520,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKElAAAAAAAAoiUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoSUAAAAAAAChJQAAAAAAAAAAAAAAAPC/"
				],
				[
					529,
					1,
					"insert",
					{
						"characters": "at"
					},
					"AgAAAKIlAAAAAAAAoyUAAAAAAAAAAAAAoyUAAAAAAACkJQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoiUAAAAAAACiJQAAAAAAAAAAAAAAAPC/"
				],
				[
					530,
					1,
					"insert",
					{
						"characters": " om"
					},
					"AwAAAKQlAAAAAAAApSUAAAAAAAAAAAAApSUAAAAAAACmJQAAAAAAAAAAAACmJQAAAAAAAKclAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApCUAAAAAAACkJQAAAAAAAAAAAAAAAPC/"
				],
				[
					531,
					3,
					"left_delete",
					null,
					"AwAAAKYlAAAAAAAApiUAAAAAAAABAAAAbaUlAAAAAAAApSUAAAAAAAABAAAAb6QlAAAAAAAApCUAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAApyUAAAAAAACnJQAAAAAAAAAAAAAAAPC/"
				],
				[
					532,
					1,
					"insert",
					{
						"characters": "oms"
					},
					"AwAAAKQlAAAAAAAApSUAAAAAAAAAAAAApSUAAAAAAACmJQAAAAAAAAAAAACmJQAAAAAAAKclAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApCUAAAAAAACkJQAAAAAAAAAAAAAAAPC/"
				],
				[
					533,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAKclAAAAAAAAqSUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApyUAAAAAAACnJQAAAAAAAAAAAAAAAPC/"
				],
				[
					534,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAKglAAAAAAAAqSUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqCUAAAAAAACoJQAAAAAAAAAAAAAAAPC/"
				],
				[
					536,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAKolAAAAAAAAqyUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqiUAAAAAAACqJQAAAAAAAAAAAAAAAPC/"
				],
				[
					537,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKslAAAAAAAArCUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqyUAAAAAAACrJQAAAAAAAAAAAAAAAPC/"
				],
				[
					538,
					2,
					"left_delete",
					null,
					"AgAAAKslAAAAAAAAqyUAAAAAAAABAAAAIKolAAAAAAAAqiUAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAArCUAAAAAAACsJQAAAAAAAAAAAAAAAPC/"
				],
				[
					540,
					1,
					"left_delete",
					null,
					"AQAAAKslAAAAAAAAqyUAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAArCUAAAAAAACsJQAAAAAAAAAAAAAAAPC/"
				],
				[
					541,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAKslAAAAAAAArCUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqyUAAAAAAACrJQAAAAAAAAAAAAAAAPC/"
				],
				[
					542,
					1,
					"left_delete",
					null,
					"AQAAAKslAAAAAAAAqyUAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAArCUAAAAAAACsJQAAAAAAAAAAAAAAAPC/"
				],
				[
					543,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAKslAAAAAAAArCUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqyUAAAAAAACrJQAAAAAAAAAAAAAAAPC/"
				],
				[
					544,
					1,
					"insert",
					{
						"characters": "\ncoun"
					},
					"BgAAAKwlAAAAAAAArSUAAAAAAAAAAAAArSUAAAAAAACvJQAAAAAAAAAAAACvJQAAAAAAALAlAAAAAAAAAAAAALAlAAAAAAAAsSUAAAAAAAAAAAAAsSUAAAAAAACyJQAAAAAAAAAAAACyJQAAAAAAALMlAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArCUAAAAAAACsJQAAAAAAAAAAAAAAAPC/"
				],
				[
					545,
					1,
					"insert",
					{
						"characters": " t+"
					},
					"AwAAALMlAAAAAAAAtCUAAAAAAAAAAAAAtCUAAAAAAAC1JQAAAAAAAAAAAAC1JQAAAAAAALYlAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsyUAAAAAAACzJQAAAAAAAAAAAAAAAPC/"
				],
				[
					546,
					3,
					"left_delete",
					null,
					"AwAAALUlAAAAAAAAtSUAAAAAAAABAAAAK7QlAAAAAAAAtCUAAAAAAAABAAAAdLMlAAAAAAAAsyUAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAtiUAAAAAAAC2JQAAAAAAAAAAAAAAAPC/"
				],
				[
					547,
					1,
					"insert",
					{
						"characters": "t++;"
					},
					"BAAAALMlAAAAAAAAtCUAAAAAAAAAAAAAtCUAAAAAAAC1JQAAAAAAAAAAAAC1JQAAAAAAALYlAAAAAAAAAAAAALYlAAAAAAAAtyUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsyUAAAAAAACzJQAAAAAAAAAAAAAAAPC/"
				],
				[
					548,
					3,
					"left_delete",
					null,
					"AwAAALYlAAAAAAAAtiUAAAAAAAABAAAAO7UlAAAAAAAAtSUAAAAAAAABAAAAK7QlAAAAAAAAtCUAAAAAAAABAAAAKw",
					"AQAAAAAAAAABAAAAtyUAAAAAAAC3JQAAAAAAAAAAAAAAAPC/"
				],
				[
					549,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAALQlAAAAAAAAtSUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtCUAAAAAAAC0JQAAAAAAAAAAAAAAAPC/"
				],
				[
					551,
					1,
					"insert",
					{
						"characters": "++"
					},
					"AgAAAK8lAAAAAAAAsCUAAAAAAAAAAAAAsCUAAAAAAACxJQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAryUAAAAAAACvJQAAAAAAAAAAAAAAADJA"
				],
				[
					553,
					1,
					"insert",
					{
						"characters": "\nreturn"
					},
					"CAAAALslAAAAAAAAvCUAAAAAAAAAAAAAvCUAAAAAAAC+JQAAAAAAAAAAAAC+JQAAAAAAAL8lAAAAAAAAAAAAAL8lAAAAAAAAwCUAAAAAAAAAAAAAwCUAAAAAAADBJQAAAAAAAAAAAADBJQAAAAAAAMIlAAAAAAAAAAAAAMIlAAAAAAAAwyUAAAAAAAAAAAAAwyUAAAAAAADEJQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuyUAAAAAAAC7JQAAAAAAAAAAAAAAAEJA"
				],
				[
					554,
					1,
					"insert",
					{
						"characters": " count;"
					},
					"BwAAAMQlAAAAAAAAxSUAAAAAAAAAAAAAxSUAAAAAAADGJQAAAAAAAAAAAADGJQAAAAAAAMclAAAAAAAAAAAAAMclAAAAAAAAyCUAAAAAAAAAAAAAyCUAAAAAAADJJQAAAAAAAAAAAADJJQAAAAAAAMolAAAAAAAAAAAAAMolAAAAAAAAyyUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxCUAAAAAAADEJQAAAAAAAAAAAAAAAPC/"
				],
				[
					561,
					1,
					"left_delete",
					null,
					"AQAAAIglAAAAAAAAiCUAAAAAAAABAAAAew",
					"AQAAAAAAAAABAAAAiSUAAAAAAACJJQAAAAAAAAAAAAAAAPC/"
				],
				[
					564,
					1,
					"left_delete",
					null,
					"AQAAALklAAAAAAAAuSUAAAAAAAABAAAAfQ",
					"AQAAAAAAAAABAAAAuiUAAAAAAAC6JQAAAAAAAAAAAAAAAPC/"
				],
				[
					569,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAEolAAAAAAAASyUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASiUAAAAAAABKJQAAAAAAAAAAAAAAAPC/"
				],
				[
					570,
					1,
					"left_delete",
					null,
					"AQAAAEolAAAAAAAASiUAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAASyUAAAAAAABLJQAAAAAAAAAAAAAAAPC/"
				],
				[
					572,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAEklAAAAAAAASiUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASSUAAAAAAABJJQAAAAAAAAAAAAAAAPC/"
				],
				[
					589,
					1,
					"insert",
					{
						"characters": "  "
					},
					"AgAAAFqRAAAAAAAAW5EAAAAAAAAAAAAAW5EAAAAAAABckQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWpEAAAAAAABakQAAAAAAAAAAAAAAAPC/"
				],
				[
					590,
					1,
					"left_delete",
					null,
					"AQAAAFuRAAAAAAAAW5EAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAXJEAAAAAAABckQAAAAAAAAAAAAAAAPC/"
				],
				[
					591,
					1,
					"insert",
					{
						"characters": "-"
					},
					"AQAAAFuRAAAAAAAAXJEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAW5EAAAAAAABbkQAAAAAAAAAAAAAAAPC/"
				],
				[
					592,
					1,
					"insert",
					{
						"characters": " options"
					},
					"CAAAAFyRAAAAAAAAXZEAAAAAAAAAAAAAXZEAAAAAAABekQAAAAAAAAAAAABekQAAAAAAAF+RAAAAAAAAAAAAAF+RAAAAAAAAYJEAAAAAAAAAAAAAYJEAAAAAAABhkQAAAAAAAAAAAABhkQAAAAAAAGKRAAAAAAAAAAAAAGKRAAAAAAAAY5EAAAAAAAAAAAAAY5EAAAAAAABkkQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXJEAAAAAAABckQAAAAAAAAAAAAAAAPC/"
				],
				[
					593,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAGSRAAAAAAAAZZEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZJEAAAAAAABkkQAAAAAAAAAAAAAAAPC/"
				],
				[
					594,
					2,
					"left_delete",
					null,
					"AgAAAGSRAAAAAAAAZJEAAAAAAAABAAAALmORAAAAAAAAY5EAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAZZEAAAAAAABlkQAAAAAAAAAAAAAAAPC/"
				],
				[
					595,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAGORAAAAAAAAZJEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAY5EAAAAAAABjkQAAAAAAAAAAAAAAAPC/"
				],
				[
					596,
					1,
					"insert",
					{
						"characters": "_numhidden"
					},
					"CgAAAGSRAAAAAAAAZZEAAAAAAAAAAAAAZZEAAAAAAABmkQAAAAAAAAAAAABmkQAAAAAAAGeRAAAAAAAAAAAAAGeRAAAAAAAAaJEAAAAAAAAAAAAAaJEAAAAAAABpkQAAAAAAAAAAAABpkQAAAAAAAGqRAAAAAAAAAAAAAGqRAAAAAAAAa5EAAAAAAAAAAAAAa5EAAAAAAABskQAAAAAAAAAAAABskQAAAAAAAG2RAAAAAAAAAAAAAG2RAAAAAAAAbpEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZJEAAAAAAABkkQAAAAAAAAAAAAAAAPC/"
				],
				[
					597,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAG6RAAAAAAAAcJEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbpEAAAAAAABukQAAAAAAAAAAAAAAAPC/"
				],
				[
					598,
					1,
					"insert",
					{
						"characters": "it->"
					},
					"BAAAAG+RAAAAAAAAcJEAAAAAAAAAAAAAcJEAAAAAAABxkQAAAAAAAAAAAABxkQAAAAAAAHKRAAAAAAAAAAAAAHKRAAAAAAAAc5EAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAb5EAAAAAAABvkQAAAAAAAAAAAAAAAPC/"
				],
				[
					599,
					4,
					"left_delete",
					null,
					"BAAAAHKRAAAAAAAAcpEAAAAAAAABAAAAPnGRAAAAAAAAcZEAAAAAAAABAAAALXCRAAAAAAAAcJEAAAAAAAABAAAAdG+RAAAAAAAAb5EAAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAAc5EAAAAAAABzkQAAAAAAAAAAAAAAAPC/"
				],
				[
					600,
					1,
					"insert",
					{
						"characters": "opts"
					},
					"BAAAAG+RAAAAAAAAcJEAAAAAAAAAAAAAcJEAAAAAAABxkQAAAAAAAAAAAABxkQAAAAAAAHKRAAAAAAAAAAAAAHKRAAAAAAAAc5EAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAb5EAAAAAAABvkQAAAAAAAAAAAAAAAPC/"
				],
				[
					605,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAHORAAAAAAAAdJEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAc5EAAAAAAABzkQAAAAAAAAAAAAAAAPC/"
				],
				[
					606,
					1,
					"insert",
					{
						"characters": " ins"
					},
					"BAAAAHSRAAAAAAAAdZEAAAAAAAAAAAAAdZEAAAAAAAB2kQAAAAAAAAAAAAB2kQAAAAAAAHeRAAAAAAAAAAAAAHeRAAAAAAAAeJEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdJEAAAAAAAB0kQAAAAAAAAAAAAAAAPC/"
				],
				[
					607,
					1,
					"insert",
					{
						"characters": "p->"
					},
					"AwAAAHiRAAAAAAAAeZEAAAAAAAAAAAAAeZEAAAAAAAB6kQAAAAAAAAAAAAB6kQAAAAAAAHuRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeJEAAAAAAAB4kQAAAAAAAAAAAAAAAPC/"
				],
				[
					608,
					5,
					"left_delete",
					null,
					"BQAAAHqRAAAAAAAAepEAAAAAAAABAAAAPnmRAAAAAAAAeZEAAAAAAAABAAAALXiRAAAAAAAAeJEAAAAAAAABAAAAcHeRAAAAAAAAd5EAAAAAAAABAAAAc3aRAAAAAAAAdpEAAAAAAAABAAAAbg",
					"AQAAAAAAAAABAAAAe5EAAAAAAAB7kQAAAAAAAAAAAAAAAPC/"
				],
				[
					609,
					1,
					"insert",
					{
						"characters": "t->tab_atom"
					},
					"CwAAAHaRAAAAAAAAd5EAAAAAAAAAAAAAd5EAAAAAAAB4kQAAAAAAAAAAAAB4kQAAAAAAAHmRAAAAAAAAAAAAAHmRAAAAAAAAepEAAAAAAAAAAAAAepEAAAAAAAB7kQAAAAAAAAAAAAB7kQAAAAAAAHyRAAAAAAAAAAAAAHyRAAAAAAAAfZEAAAAAAAAAAAAAfZEAAAAAAAB+kQAAAAAAAAAAAAB+kQAAAAAAAH+RAAAAAAAAAAAAAH+RAAAAAAAAgJEAAAAAAAAAAAAAgJEAAAAAAACBkQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdpEAAAAAAAB2kQAAAAAAAAAAAAAAAPC/"
				],
				[
					610,
					1,
					"insert",
					{
						"characters": ",ti"
					},
					"AwAAAIGRAAAAAAAAgpEAAAAAAAAAAAAAgpEAAAAAAACDkQAAAAAAAAAAAACDkQAAAAAAAISRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgZEAAAAAAACBkQAAAAAAAAAAAAAAAPC/"
				],
				[
					611,
					2,
					"left_delete",
					null,
					"AgAAAIORAAAAAAAAg5EAAAAAAAABAAAAaYKRAAAAAAAAgpEAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAAhJEAAAAAAACEkQAAAAAAAAAAAAAAAPC/"
				],
				[
					612,
					1,
					"insert",
					{
						"characters": "it->t"
					},
					"BQAAAIKRAAAAAAAAg5EAAAAAAAAAAAAAg5EAAAAAAACEkQAAAAAAAAAAAACEkQAAAAAAAIWRAAAAAAAAAAAAAIWRAAAAAAAAhpEAAAAAAAAAAAAAhpEAAAAAAACHkQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgpEAAAAAAACCkQAAAAAAAAAAAAAAAPC/"
				],
				[
					613,
					1,
					"insert",
					{
						"characters": " ab"
					},
					"AwAAAIeRAAAAAAAAiJEAAAAAAAAAAAAAiJEAAAAAAACJkQAAAAAAAAAAAACJkQAAAAAAAIqRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAh5EAAAAAAACHkQAAAAAAAAAAAAAAAPC/"
				],
				[
					614,
					3,
					"left_delete",
					null,
					"AwAAAImRAAAAAAAAiZEAAAAAAAABAAAAYoiRAAAAAAAAiJEAAAAAAAABAAAAYYeRAAAAAAAAh5EAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAipEAAAAAAACKkQAAAAAAAAAAAAAAAPC/"
				],
				[
					615,
					1,
					"insert",
					{
						"characters": "ab_atom_len"
					},
					"CwAAAIeRAAAAAAAAiJEAAAAAAAAAAAAAiJEAAAAAAACJkQAAAAAAAAAAAACJkQAAAAAAAIqRAAAAAAAAAAAAAIqRAAAAAAAAi5EAAAAAAAAAAAAAi5EAAAAAAACMkQAAAAAAAAAAAACMkQAAAAAAAI2RAAAAAAAAAAAAAI2RAAAAAAAAjpEAAAAAAAAAAAAAjpEAAAAAAACPkQAAAAAAAAAAAACPkQAAAAAAAJCRAAAAAAAAAAAAAJCRAAAAAAAAkZEAAAAAAAAAAAAAkZEAAAAAAACSkQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAh5EAAAAAAACHkQAAAAAAAAAAAAAAAPC/"
				],
				[
					617,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAJORAAAAAAAAlJEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAk5EAAAAAAACTkQAAAAAAAAAAAAAAAPC/"
				],
				[
					618,
					1,
					"left_delete",
					null,
					"AQAAAJORAAAAAAAAk5EAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAlJEAAAAAAACUkQAAAAAAAAAAAAAAAPC/"
				],
				[
					619,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAJORAAAAAAAAlJEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAk5EAAAAAAACTkQAAAAAAAAAAAAAAAPC/"
				],
				[
					626,
					1,
					"left_delete",
					null,
					"AQAAAJSRAAAAAAAAlJEAAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAAlZEAAAAAAACVkQAAAAAAAAAAAAAAAPC/"
				],
				[
					644,
					1,
					"insert",
					{
						"characters": "uint32_t"
					},
					"CQAAAAwlAAAAAAAADSUAAAAAAAAAAAAADSUAAAAAAAANJQAAAAAAAAMAAABpbnQNJQAAAAAAAA4lAAAAAAAAAAAAAA4lAAAAAAAADyUAAAAAAAAAAAAADyUAAAAAAAAQJQAAAAAAAAAAAAAQJQAAAAAAABElAAAAAAAAAAAAABElAAAAAAAAEiUAAAAAAAAAAAAAEiUAAAAAAAATJQAAAAAAAAAAAAATJQAAAAAAABQlAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADCUAAAAAAAAPJQAAAAAAAAAAAAAAAPC/"
				],
				[
					654,
					1,
					"paste",
					null,
					"AgAAAGAlAAAAAAAAaCUAAAAAAAAAAAAAaCUAAAAAAABoJQAAAAAAAAMAAABpbnQ",
					"AQAAAAAAAAABAAAAYCUAAAAAAABjJQAAAAAAAAAAAAAAAPC/"
				],
				[
					665,
					1,
					"cut",
					null,
					"AQAAAGeRAAAAAAAAZ5EAAAAAAAA2AAAAb3B0aW9uc19udW1oaWRkZW4ob3B0cywgaXQtPnRhYl9hdG9tLGl0LT50YWJfYXRvbV9sZW4p",
					"AQAAAAAAAAABAAAAZ5EAAAAAAACdkQAAAAAAAAAAAAAAAPC/"
				],
				[
					666,
					1,
					"insert",
					{
						"characters": "nhidden"
					},
					"BwAAAGeRAAAAAAAAaJEAAAAAAAAAAAAAaJEAAAAAAABpkQAAAAAAAAAAAABpkQAAAAAAAGqRAAAAAAAAAAAAAGqRAAAAAAAAa5EAAAAAAAAAAAAAa5EAAAAAAABskQAAAAAAAAAAAABskQAAAAAAAG2RAAAAAAAAAAAAAG2RAAAAAAAAbpEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZ5EAAAAAAABnkQAAAAAAAAAAAAAAAPC/"
				],
				[
					668,
					1,
					"insert",
					{
						"characters": "\nuint32_t"
					},
					"CQAAAEKRAAAAAAAAQ5EAAAAAAAAAAAAAQ5EAAAAAAABEkQAAAAAAAAAAAABEkQAAAAAAAEWRAAAAAAAAAAAAAEWRAAAAAAAARpEAAAAAAAAAAAAARpEAAAAAAABHkQAAAAAAAAAAAABHkQAAAAAAAEiRAAAAAAAAAAAAAEiRAAAAAAAASZEAAAAAAAAAAAAASZEAAAAAAABKkQAAAAAAAAAAAABKkQAAAAAAAEuRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQpEAAAAAAABCkQAAAAAAAAAAAAAAMHhA"
				],
				[
					669,
					1,
					"insert",
					{
						"characters": " nhidden"
					},
					"CAAAAEuRAAAAAAAATJEAAAAAAAAAAAAATJEAAAAAAABNkQAAAAAAAAAAAABNkQAAAAAAAE6RAAAAAAAAAAAAAE6RAAAAAAAAT5EAAAAAAAAAAAAAT5EAAAAAAABQkQAAAAAAAAAAAABQkQAAAAAAAFGRAAAAAAAAAAAAAFGRAAAAAAAAUpEAAAAAAAAAAAAAUpEAAAAAAABTkQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAS5EAAAAAAABLkQAAAAAAAAAAAAAAAPC/"
				],
				[
					670,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAFORAAAAAAAAVJEAAAAAAAAAAAAAVJEAAAAAAABVkQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAU5EAAAAAAABTkQAAAAAAAAAAAAAAAPC/"
				],
				[
					671,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFWRAAAAAAAAVpEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVZEAAAAAAABVkQAAAAAAAAAAAAAAAPC/"
				],
				[
					672,
					1,
					"paste",
					null,
					"AQAAAFaRAAAAAAAAjJEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVpEAAAAAAABWkQAAAAAAAAAAAAAAAPC/"
				],
				[
					673,
					1,
					"insert",
					{
						"characters": ";;"
					},
					"AgAAAIyRAAAAAAAAjZEAAAAAAAAAAAAAjZEAAAAAAACOkQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjJEAAAAAAACMkQAAAAAAAAAAAAAAAPC/"
				],
				[
					678,
					1,
					"left_delete",
					null,
					"AQAAAI2RAAAAAAAAjZEAAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAAjpEAAAAAAACOkQAAAAAAAAAAAAAAAPC/"
				],
				[
					683,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAjZEAAAAAAACNkQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "quickjs/qjs-modules/src/property-enumeration.c",
			"settings":
			{
				"buffer_size": 7798,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "quickjs/qjs-modules/include/property-enumeration.h",
			"settings":
			{
				"buffer_size": 5963,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					43,
					1,
					"left_delete",
					null,
					"AQAAAH0MAAAAAAAAfQwAAAAAAAABAAAAPQ",
					"AQAAAAAAAAABAAAAfgwAAAAAAAB+DAAAAAAAAAAAAAAAAPC/"
				],
				[
					67,
					1,
					"insert",
					{
						"characters": "?="
					},
					"AgAAAMAMAAAAAAAAwQwAAAAAAAAAAAAAwQwAAAAAAADCDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwAwAAAAAAADADAAAAAAAAAAAAAAAAGtA"
				],
				[
					68,
					2,
					"left_delete",
					null,
					"AgAAAMEMAAAAAAAAwQwAAAAAAAABAAAAPcAMAAAAAAAAwAwAAAAAAAABAAAAPw",
					"AQAAAAAAAAABAAAAwgwAAAAAAADCDAAAAAAAAAAAAAAAAPC/"
				],
				[
					69,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAMAMAAAAAAAAwQwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwAwAAAAAAADADAAAAAAAAAAAAAAAAPC/"
				],
				[
					82,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAIoHAAAAAAAAiwcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAigcAAAAAAACKBwAAAAAAAAAAAAAAAPC/"
				],
				[
					83,
					2,
					"left_delete",
					null,
					"AgAAAIoHAAAAAAAAigcAAAAAAAABAAAAPYkHAAAAAAAAiQcAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAiwcAAAAAAACLBwAAAAAAAAAAAAAAAPC/"
				],
				[
					90,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIkHAAAAAAAAigcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiQcAAAAAAACJBwAAAAAAAAAAAAAAAPC/"
				],
				[
					99,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AwAAAHkHAAAAAAAAegcAAAAAAAAAAAAAegcAAAAAAAB6BwAAAAAAAAYAAABhc3NlcnR6BwAAAAAAAHsHAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeQcAAAAAAAB/BwAAAAAAAAAAAAAAAPC/"
				],
				[
					102,
					1,
					"left_delete",
					null,
					"AQAAAJgHAAAAAAAAmAcAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAmQcAAAAAAACZBwAAAAAAAAAAAAAAgEZA"
				],
				[
					105,
					1,
					"insert",
					{
						"characters": "\nreturn"
					},
					"CAAAANYHAAAAAAAA1wcAAAAAAAAAAAAA1wcAAAAAAADZBwAAAAAAAAAAAADZBwAAAAAAANoHAAAAAAAAAAAAANoHAAAAAAAA2wcAAAAAAAAAAAAA2wcAAAAAAADcBwAAAAAAAAAAAADcBwAAAAAAAN0HAAAAAAAAAAAAAN0HAAAAAAAA3gcAAAAAAAAAAAAA3gcAAAAAAADfBwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1gcAAAAAAADWBwAAAAAAAP///////+9/"
				],
				[
					106,
					1,
					"insert",
					{
						"characters": " JS_"
					},
					"BAAAAN8HAAAAAAAA4AcAAAAAAAAAAAAA4AcAAAAAAADhBwAAAAAAAAAAAADhBwAAAAAAAOIHAAAAAAAAAAAAAOIHAAAAAAAA4wcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3wcAAAAAAADfBwAAAAAAAAAAAAAAAPC/"
				],
				[
					107,
					12,
					"left_delete",
					null,
					"DAAAAOIHAAAAAAAA4gcAAAAAAAABAAAAX+EHAAAAAAAA4QcAAAAAAAABAAAAU+AHAAAAAAAA4AcAAAAAAAABAAAASt8HAAAAAAAA3wcAAAAAAAABAAAAIN4HAAAAAAAA3gcAAAAAAAABAAAAbt0HAAAAAAAA3QcAAAAAAAABAAAActwHAAAAAAAA3AcAAAAAAAABAAAAddsHAAAAAAAA2wcAAAAAAAABAAAAdNoHAAAAAAAA2gcAAAAAAAABAAAAZdkHAAAAAAAA2QcAAAAAAAABAAAActcHAAAAAAAA1wcAAAAAAAACAAAAICDWBwAAAAAAANYHAAAAAAAAAQAAAAo",
					"AQAAAAAAAAABAAAA4wcAAAAAAADjBwAAAAAAAAAAAAAAAPC/"
				],
				[
					115,
					1,
					"cut",
					null,
					"AQAAAHsHAAAAAAAAewcAAAAAAAAcAAAAKGl0LT5pZHggPCBpdC0+dGFiX2F0b21fbGVuKQ",
					"AQAAAAAAAAABAAAAewcAAAAAAACXBwAAAAAAAAAAAAAAAPC/"
				],
				[
					116,
					1,
					"paste",
					null,
					"AQAAAHsHAAAAAAAAlwcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAewcAAAAAAAB7BwAAAAAAAAAAAAAAAPC/"
				],
				[
					121,
					1,
					"right_delete",
					null,
					"AQAAAEgNAAAAAAAASA0AAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAASA0AAAAAAABIDQAAAAAAAAAAAAAAAPC/"
				],
				[
					122,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAEgNAAAAAAAASQ0AAAAAAAAAAAAASQ0AAAAAAABKDQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASA0AAAAAAABIDQAAAAAAAAAAAAAAAPC/"
				],
				[
					124,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AgAAAEkNAAAAAAAASg0AAAAAAAAAAAAASg0AAAAAAABLDQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASQ0AAAAAAABJDQAAAAAAAAAAAAAAAAAA"
				],
				[
					125,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAEsNAAAAAAAATQ0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASw0AAAAAAABLDQAAAAAAAAAAAAAAAPC/"
				],
				[
					126,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAEsNAAAAAAAASw0AAAAAAAABAAAAKEsNAAAAAAAASw0AAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAATA0AAAAAAABMDQAAAAAAAAAAAAAAAPC/"
				],
				[
					127,
					2,
					"left_delete",
					null,
					"AgAAAEoNAAAAAAAASg0AAAAAAAABAAAAZkkNAAAAAAAASQ0AAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAASw0AAAAAAABLDQAAAAAAAAAAAAAAAPC/"
				],
				[
					130,
					1,
					"left_delete",
					null,
					"AQAAAEgNAAAAAAAASA0AAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAASQ0AAAAAAABJDQAAAAAAAAAAAAAAAAAA"
				],
				[
					133,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAH4NAAAAAAAAfw0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfg0AAAAAAAB+DQAAAAAAAAAAAAAAAPC/"
				],
				[
					137,
					1,
					"cut",
					null,
					"AQAAAFINAAAAAAAAUg0AAAAAAAAtAAAAcHJvcGVydHlfZW51bWVyYXRpb25fc2V0cG9zKGl0LCBpdC0+aWR4ICsgMSk7",
					"AQAAAAAAAAABAAAAfw0AAAAAAABSDQAAAAAAAAAAAAAAAPC/"
				],
				[
					140,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAEgNAAAAAAAASQ0AAAAAAAAAAAAASQ0AAAAAAABLDQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASA0AAAAAAABIDQAAAAAAAP///////+9/"
				],
				[
					141,
					1,
					"paste",
					null,
					"AQAAAEsNAAAAAAAAeA0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASw0AAAAAAABLDQAAAAAAAAAAAAAAAPC/"
				],
				[
					142,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAHgNAAAAAAAAeQ0AAAAAAAAAAAAAeQ0AAAAAAAB7DQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeA0AAAAAAAB4DQAAAAAAAAAAAAAAAPC/"
				],
				[
					177,
					1,
					"paste",
					null,
					"AgAAAOsMAAAAAAAADA0AAAAAAAAAAAAADA0AAAAAAAAMDQAAAAAAAAEAAAAx",
					"AQAAAAAAAAABAAAA6wwAAAAAAADsDAAAAAAAAAAAAAAAAPC/"
				],
				[
					182,
					1,
					"left_delete",
					null,
					"AgAAAPoMAAAAAAAA+gwAAAAAAAABAAAAPZgNAAAAAAAAmA0AAAAAAAACAAAAICA",
					"AQAAAAAAAAABAAAA+wwAAAAAAAD7DAAAAAAAAAAAAAAAAPC/"
				],
				[
					203,
					1,
					"cut",
					null,
					"AQAAAKINAAAAAAAAog0AAAAAAAAKAAAAID8gaXQgOiAwOw",
					"AQAAAAAAAAABAAAAog0AAAAAAACsDQAAAAAAAAAAAAAAAPC/"
				],
				[
					211,
					1,
					"right_delete",
					null,
					"AQAAAJYNAAAAAAAAlg0AAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAAlg0AAAAAAACWDQAAAAAAAAAAAAAAAPC/"
				],
				[
					212,
					1,
					"paste",
					null,
					"AQAAAJYNAAAAAAAAoA0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlg0AAAAAAACWDQAAAAAAAAAAAAAAAPC/"
				],
				[
					214,
					1,
					"insert",
					{
						"characters": "re"
					},
					"AgAAAGoNAAAAAAAAaw0AAAAAAAAAAAAAaw0AAAAAAABsDQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAag0AAAAAAABqDQAAAAAAAAAAAAAAADJA"
				],
				[
					215,
					1,
					"left_delete",
					null,
					"AQAAAGsNAAAAAAAAaw0AAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAbA0AAAAAAABsDQAAAAAAAAAAAAAAAPC/"
				],
				[
					216,
					1,
					"insert",
					{
						"characters": "eturn"
					},
					"BQAAAGsNAAAAAAAAbA0AAAAAAAAAAAAAbA0AAAAAAABtDQAAAAAAAAAAAABtDQAAAAAAAG4NAAAAAAAAAAAAAG4NAAAAAAAAbw0AAAAAAAAAAAAAbw0AAAAAAABwDQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaw0AAAAAAABrDQAAAAAAAAAAAAAAAPC/"
				],
				[
					217,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHANAAAAAAAAcQ0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcA0AAAAAAABwDQAAAAAAAAAAAAAAAPC/"
				],
				[
					222,
					2,
					"left_delete",
					null,
					"AgAAAKgNAAAAAAAAqA0AAAAAAAAKAAAACiAgcmV0dXJuIKcNAAAAAAAApw0AAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAqA0AAAAAAACyDQAAAAAAAP///////+9/"
				],
				[
					227,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAApw0AAAAAAACnDQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/build/compileCommand.js",
			"settings":
			{
				"buffer_size": 6456,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAEsBAAAAAAAATAEAAAAAAAAAAAAATAEAAAAAAABQAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASwEAAAAAAABLAQAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAB4BAAAAAAAAHwEAAAAAAAAAAAAAHwEAAAAAAAAjAQAAAAAAAAAAAABRAQAAAAAAAFEBAAAAAAAABAAAACAgICA",
					"AQAAAAAAAAABAAAAHgEAAAAAAAAeAQAAAAAAAAAAAAAAAEJA"
				],
				[
					12,
					1,
					"right_delete",
					null,
					"AQAAAPgMAAAAAAAA+AwAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAA+AwAAAAAAAD4DAAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAPgMAAAAAAAA+QwAAAAAAAAAAAAA+QwAAAAAAAD/DAAAAAAAAAAAAAD/DAAAAAAAAAANAAAAAAAAAAAAAAANAAAAAAAABg0AAAAAAAAAAAAA+QwAAAAAAAD5DAAAAAAAAAYAAAAgICAgICA",
					"AQAAAAAAAAABAAAA+AwAAAAAAAD4DAAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAADwPAAAAAAAAPQ8AAAAAAAAAAAAAPQ8AAAAAAABBDwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPA8AAAAAAAA8DwAAAAAAAAAAAAAAAEtA"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AwAAAL8XAAAAAAAAwBcAAAAAAAAAAAAAPQ8AAAAAAAA9DwAAAAAAAAQAAAAgICAgvBcAAAAAAAC9FwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvxcAAAAAAAC/FwAAAAAAAAAAAAAAAAAA"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAALoXAAAAAAAAuxcAAAAAAAAAAAAAuxcAAAAAAAC8FwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuhcAAAAAAAC6FwAAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": "CompileCommad."
					},
					"DgAAALsXAAAAAAAAvBcAAAAAAAAAAAAAvBcAAAAAAAC9FwAAAAAAAAAAAAC9FwAAAAAAAL4XAAAAAAAAAAAAAL4XAAAAAAAAvxcAAAAAAAAAAAAAvxcAAAAAAADAFwAAAAAAAAAAAADAFwAAAAAAAMEXAAAAAAAAAAAAAMEXAAAAAAAAwhcAAAAAAAAAAAAAwhcAAAAAAADDFwAAAAAAAAAAAADDFwAAAAAAAMQXAAAAAAAAAAAAAMQXAAAAAAAAxRcAAAAAAAAAAAAAxRcAAAAAAADGFwAAAAAAAAAAAADGFwAAAAAAAMcXAAAAAAAAAAAAAMcXAAAAAAAAyBcAAAAAAAAAAAAAyBcAAAAAAADJFwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuxcAAAAAAAC7FwAAAAAAAAAAAAAAAAAA"
				],
				[
					58,
					2,
					"left_delete",
					null,
					"AgAAAMgXAAAAAAAAyBcAAAAAAAABAAAALscXAAAAAAAAxxcAAAAAAAABAAAAZA",
					"AQAAAAAAAAABAAAAyRcAAAAAAADJFwAAAAAAAAAAAAAAAPC/"
				],
				[
					59,
					1,
					"insert",
					{
						"characters": "nd.pr"
					},
					"BQAAAMcXAAAAAAAAyBcAAAAAAAAAAAAAyBcAAAAAAADJFwAAAAAAAAAAAADJFwAAAAAAAMoXAAAAAAAAAAAAAMoXAAAAAAAAyxcAAAAAAAAAAAAAyxcAAAAAAADMFwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxxcAAAAAAADHFwAAAAAAAAAAAAAAAPC/"
				],
				[
					60,
					1,
					"insert_completion",
					{
						"completion": "CompileCommand.prototype",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "CompileCommand.prototype"
					},
					"AgAAALsXAAAAAAAAuxcAAAAAAAARAAAAQ29tcGlsZUNvbW1hbmQucHK7FwAAAAAAANMXAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzBcAAAAAAADMFwAAAAAAAAAAAAAAAPC/"
				],
				[
					61,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAANMXAAAAAAAA1RcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0xcAAAAAAADTFwAAAAAAAAAAAAAAAPC/"
				],
				[
					62,
					1,
					"insert",
					{
						"characters": "Symbol.toStringT"
					},
					"EAAAANQXAAAAAAAA1RcAAAAAAAAAAAAA1RcAAAAAAADWFwAAAAAAAAAAAADWFwAAAAAAANcXAAAAAAAAAAAAANcXAAAAAAAA2BcAAAAAAAAAAAAA2BcAAAAAAADZFwAAAAAAAAAAAADZFwAAAAAAANoXAAAAAAAAAAAAANoXAAAAAAAA2xcAAAAAAAAAAAAA2xcAAAAAAADcFwAAAAAAAAAAAADcFwAAAAAAAN0XAAAAAAAAAAAAAN0XAAAAAAAA3hcAAAAAAAAAAAAA3hcAAAAAAADfFwAAAAAAAAAAAADfFwAAAAAAAOAXAAAAAAAAAAAAAOAXAAAAAAAA4RcAAAAAAAAAAAAA4RcAAAAAAADiFwAAAAAAAAAAAADiFwAAAAAAAOMXAAAAAAAAAAAAAOMXAAAAAAAA5BcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1BcAAAAAAADUFwAAAAAAAAAAAAAAAPC/"
				],
				[
					63,
					1,
					"insert",
					{
						"characters": "ag"
					},
					"AgAAAOQXAAAAAAAA5RcAAAAAAAAAAAAA5RcAAAAAAADmFwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5BcAAAAAAADkFwAAAAAAAAAAAAAAAPC/"
				],
				[
					65,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAOcXAAAAAAAA6BcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5xcAAAAAAADnFwAAAAAAAAAAAAAAAPC/"
				],
				[
					66,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAOgXAAAAAAAA6hcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6BcAAAAAAADoFwAAAAAAAAAAAAAAAPC/"
				],
				[
					67,
					1,
					"insert",
					{
						"characters": "CompileCommand"
					},
					"DgAAAOkXAAAAAAAA6hcAAAAAAAAAAAAA6hcAAAAAAADrFwAAAAAAAAAAAADrFwAAAAAAAOwXAAAAAAAAAAAAAOwXAAAAAAAA7RcAAAAAAAAAAAAA7RcAAAAAAADuFwAAAAAAAAAAAADuFwAAAAAAAO8XAAAAAAAAAAAAAO8XAAAAAAAA8BcAAAAAAAAAAAAA8BcAAAAAAADxFwAAAAAAAAAAAADxFwAAAAAAAPIXAAAAAAAAAAAAAPIXAAAAAAAA8xcAAAAAAAAAAAAA8xcAAAAAAAD0FwAAAAAAAAAAAAD0FwAAAAAAAPUXAAAAAAAAAAAAAPUXAAAAAAAA9hcAAAAAAAAAAAAA9hcAAAAAAAD3FwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6RcAAAAAAADpFwAAAAAAAAAAAAAAAPC/"
				],
				[
					69,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAPgXAAAAAAAA+RcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+BcAAAAAAAD4FwAAAAAAAAAAAAAAAPC/"
				],
				[
					70,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAPkXAAAAAAAA+hcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+RcAAAAAAAD5FwAAAAAAAAAAAAAAAPC/"
				],
				[
					164,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAPoXAAAAAAAA+xcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+hcAAAAAAAD6FwAAAAAAAAAAAAAAAAAA"
				],
				[
					165,
					1,
					"left_delete",
					null,
					"AQAAAPoXAAAAAAAA+hcAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAA+xcAAAAAAAD7FwAAAAAAAAAAAAAAAPC/"
				],
				[
					170,
					7,
					"right_delete",
					null,
					"BwAAAHEAAAAAAAAAcQAAAAAAAAABAAAAZXEAAAAAAAAAcQAAAAAAAAABAAAAeHEAAAAAAAAAcQAAAAAAAAABAAAAcHEAAAAAAAAAcQAAAAAAAAABAAAAb3EAAAAAAAAAcQAAAAAAAAABAAAAcnEAAAAAAAAAcQAAAAAAAAABAAAAdHEAAAAAAAAAcQAAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAcQAAAAAAAABxAAAAAAAAAAAAAAAAAAAA"
				],
				[
					189,
					1,
					"insert",
					{
						"characters": "\nexport"
					},
					"BwAAAIEYAAAAAAAAghgAAAAAAAAAAAAAghgAAAAAAACDGAAAAAAAAAAAAACDGAAAAAAAAIQYAAAAAAAAAAAAAIQYAAAAAAAAhRgAAAAAAAAAAAAAhRgAAAAAAACGGAAAAAAAAAAAAACGGAAAAAAAAIcYAAAAAAAAAAAAAIcYAAAAAAAAiBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgRgAAAAAAACBGAAAAAAAAAAAAAAAAAAA"
				],
				[
					190,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIgYAAAAAAAAiRgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiBgAAAAAAACIGAAAAAAAAAAAAAAAAPC/"
				],
				[
					191,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAIkYAAAAAAAAixgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiRgAAAAAAACJGAAAAAAAAAAAAAAAAPC/"
				],
				[
					192,
					1,
					"insert",
					{
						"characters": "Comp"
					},
					"BAAAAIoYAAAAAAAAixgAAAAAAAAAAAAAixgAAAAAAACMGAAAAAAAAAAAAACMGAAAAAAAAI0YAAAAAAAAAAAAAI0YAAAAAAAAjhgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAihgAAAAAAACKGAAAAAAAAAAAAAAAAPC/"
				],
				[
					193,
					1,
					"insert_completion",
					{
						"completion": "CompileCommand",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "CompileCommand"
					},
					"AgAAAIoYAAAAAAAAihgAAAAAAAAEAAAAQ29tcIoYAAAAAAAAmBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjhgAAAAAAACOGAAAAAAAAAAAAAAAAPC/"
				],
				[
					195,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAJkYAAAAAAAAmhgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmRgAAAAAAACZGAAAAAAAAAAAAAAAAPC/"
				],
				[
					198,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAALMXAAAAAAAAtBcAAAAAAAAAAAAAtBcAAAAAAAC1FwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsxcAAAAAAACzFwAAAAAAAAAAAAAAAGtA"
				],
				[
					362,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAJMAAAAAAAAAlQAAAAAAAAAAAAAAhgAAAAAAAACIAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhgAAAAAAAACTAAAAAAAAAAAAAAAAAPC/"
				],
				[
					370,
					1,
					"cut",
					null,
					"AQAAAIYAAAAAAAAAhgAAAAAAAAARAAAALypleHRlbmRzIEFycmF5Ki8",
					"AQAAAAAAAAABAAAAlwAAAAAAAACGAAAAAAAAAAAAAAAAAPC/"
				],
				[
					377,
					1,
					"insert",
					{
						"characters": "//1"
					},
					"AwAAAK8AAAAAAAAAsAAAAAAAAAAAAAAAsAAAAAAAAACxAAAAAAAAAAAAAACxAAAAAAAAALIAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArwAAAAAAAACvAAAAAAAAAAAAAAAAAPC/"
				],
				[
					378,
					1,
					"left_delete",
					null,
					"AQAAALEAAAAAAAAAsQAAAAAAAAABAAAAMQ",
					"AQAAAAAAAAABAAAAsgAAAAAAAACyAAAAAAAAAAAAAAAAAPC/"
				],
				[
					385,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAIgAAAAAAAAAiQAAAAAAAAAAAAAAiQAAAAAAAACLAAAAAAAAAAAAAACLAAAAAAAAAIwAAAAAAAAAAAAAAIwAAAAAAAAAjgAAAAAAAAAAAAAAiQAAAAAAAACJAAAAAAAAAAIAAAAgIA",
					"AQAAAAAAAAABAAAAiAAAAAAAAACIAAAAAAAAAAAAAAAAAPC/"
				],
				[
					387,
					1,
					"insert",
					{
						"characters": "  argv="
					},
					"CAAAAIkAAAAAAAAAigAAAAAAAAAAAAAAiwAAAAAAAACLAAAAAAAAAAIAAAAgIIoAAAAAAAAAiwAAAAAAAAAAAAAAiwAAAAAAAACMAAAAAAAAAAAAAACMAAAAAAAAAI0AAAAAAAAAAAAAAI0AAAAAAAAAjgAAAAAAAAAAAAAAjgAAAAAAAACPAAAAAAAAAAAAAACPAAAAAAAAAJAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiQAAAAAAAACJAAAAAAAAAAAAAAAAADJA"
				],
				[
					388,
					1,
					"left_delete",
					null,
					"AQAAAI8AAAAAAAAAjwAAAAAAAAABAAAAPQ",
					"AQAAAAAAAAABAAAAkAAAAAAAAACQAAAAAAAAAAAAAAAAAPC/"
				],
				[
					389,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAI8AAAAAAAAAkAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjwAAAAAAAACPAAAAAAAAAAAAAAAAAPC/"
				],
				[
					413,
					1,
					"insert",
					{
						"characters": "argv."
					},
					"BQAAAG8BAAAAAAAAcAEAAAAAAAAAAAAAcAEAAAAAAABxAQAAAAAAAAAAAABxAQAAAAAAAHIBAAAAAAAAAAAAAHIBAAAAAAAAcwEAAAAAAAAAAAAAcwEAAAAAAAB0AQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbwEAAAAAAABvAQAAAAAAAAAAAAAAAPC/"
				],
				[
					419,
					1,
					"cut",
					null,
					"AQAAAGoBAAAAAAAAagEAAAAAAAAKAAAAdGhpcy5hcmd2Lg",
					"AQAAAAAAAAABAAAAdAEAAAAAAABqAQAAAAAAAAAAAAAAAEtA"
				],
				[
					420,
					1,
					"paste",
					null,
					"AQAAAGoBAAAAAAAAdAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAagEAAAAAAABqAQAAAAAAAAAAAAAAAPC/"
				],
				[
					422,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAEgBAAAAAAAASQEAAAAAAAAAAAAASQEAAAAAAABKAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASAEAAAAAAABIAQAAAAAAAAAAAAAAAGJA"
				],
				[
					424,
					1,
					"paste",
					null,
					"AQAAAEkBAAAAAAAAUwEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASQEAAAAAAABJAQAAAAAAAAAAAAAAAAAA"
				],
				[
					425,
					1,
					"left_delete",
					null,
					"AQAAAFIBAAAAAAAAUgEAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAAUwEAAAAAAABTAQAAAAAAAAAAAAAAAPC/"
				],
				[
					426,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAFIBAAAAAAAAUwEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUgEAAAAAAABSAQAAAAAAAAAAAAAAAPC/"
				],
				[
					427,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAFMBAAAAAAAAVQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUwEAAAAAAABTAQAAAAAAAAAAAAAAAPC/"
				],
				[
					429,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAFUBAAAAAAAAVgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVQEAAAAAAABVAQAAAAAAAAAAAAAAAPC/"
				],
				[
					467,
					1,
					"cut",
					null,
					"AQAAAEkBAAAAAAAASQEAAAAAAAAOAAAAdGhpcy5hcmd2PVtdOwo",
					"AQAAAAAAAAABAAAASQEAAAAAAABXAQAAAAAAAAAAAAAAAPC/"
				],
				[
					468,
					1,
					"paste",
					null,
					"AQAAAEkBAAAAAAAAVwEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASQEAAAAAAABJAQAAAAAAAAAAAAAAAPC/"
				],
				[
					473,
					1,
					"paste",
					null,
					"AQAAAHgBAAAAAAAAhgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeAEAAAAAAAB4AQAAAAAAAAAAAAAAAPC/"
				],
				[
					476,
					5,
					"right_delete",
					null,
					"BQAAAIwBAAAAAAAAjAEAAAAAAAABAAAAYYwBAAAAAAAAjAEAAAAAAAABAAAAcowBAAAAAAAAjAEAAAAAAAABAAAAZ4wBAAAAAAAAjAEAAAAAAAABAAAAdowBAAAAAAAAjAEAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAAjAEAAAAAAACMAQAAAAAAAAAAAAAAAPC/"
				],
				[
					480,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAIcBAAAAAAAAiAEAAAAAAAAAAAAAiAEAAAAAAACJAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhwEAAAAAAACHAQAAAAAAAAAAAAAAACJA"
				],
				[
					492,
					1,
					"insert",
					{
						"characters": "argv-"
					},
					"BQAAAMQBAAAAAAAAxQEAAAAAAAAAAAAAxQEAAAAAAADGAQAAAAAAAAAAAADGAQAAAAAAAMcBAAAAAAAAAAAAAMcBAAAAAAAAyAEAAAAAAAAAAAAAyAEAAAAAAADJAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxAEAAAAAAADEAQAAAAAAAAAAAAAAAPC/"
				],
				[
					493,
					1,
					"left_delete",
					null,
					"AQAAAMgBAAAAAAAAyAEAAAAAAAABAAAALQ",
					"AQAAAAAAAAABAAAAyQEAAAAAAADJAQAAAAAAAAAAAAAAAPC/"
				],
				[
					494,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAMgBAAAAAAAAyQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyAEAAAAAAADIAQAAAAAAAAAAAAAAAPC/"
				],
				[
					512,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAHAAAAAAAAAAcQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcAAAAAAAAABwAAAAAAAAAAAAAAAAAPC/"
				],
				[
					513,
					1,
					"paste",
					null,
					"AQAAAHEAAAAAAAAAnwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcQAAAAAAAABxAAAAAAAAAAAAAAAAAPC/"
				],
				[
					516,
					2,
					"right_delete",
					null,
					"AgAAAHEAAAAAAAAAcQAAAAAAAAABAAAAL3EAAAAAAAAAcQAAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAAcQAAAAAAAABxAAAAAAAAAAAAAAAAAAAA"
				],
				[
					527,
					1,
					"insert",
					{
						"characters": "Array"
					},
					"BgAAAIIAAAAAAAAAgwAAAAAAAAAAAAAAgwAAAAAAAACDAAAAAAAAAA4AAABDb21waWxlQ29tbWFuZIMAAAAAAAAAhAAAAAAAAAAAAAAAhAAAAAAAAACFAAAAAAAAAAAAAACFAAAAAAAAAIYAAAAAAAAAAAAAAIYAAAAAAAAAhwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAggAAAAAAAACQAAAAAAAAAAAAAAAAAPC/"
				],
				[
					558,
					1,
					"",
					null,
					"AwAAAIwDAAAAAAAAlgMAAAAAAAAFAAAAdGhpc1tyAwAAAAAAAHwDAAAAAAAABQAAAHRoaXNbygIAAAAAAADUAgAAAAAAAAUAAAB0aGlzWw",
					"AQAAAAAAAAABAAAAygIAAAAAAADPAgAAAAAAAAAAAAAAAPC/"
				],
				[
					592,
					1,
					"",
					null,
					"AQAAAEgDAAAAAAAAUgMAAAAAAAAFAAAAdGhpcy4",
					"AQAAAAAAAAABAAAASAMAAAAAAABNAwAAAAAAAAAAAAAAAPC/"
				],
				[
					602,
					1,
					"",
					null,
					"AQAAAFAGAAAAAAAAWgYAAAAAAAAFAAAAdGhpcy4",
					"AQAAAAAAAAABAAAAUAYAAAAAAABVBgAAAAAAAAAAAAAAAPC/"
				],
				[
					603,
					1,
					"",
					null,
					"AQAAAJ0GAAAAAAAApwYAAAAAAAAFAAAAdGhpcy4",
					"AQAAAAAAAAABAAAAnQYAAAAAAACiBgAAAAAAAAAAAAAAAPC/"
				],
				[
					604,
					1,
					"",
					null,
					"AQAAAMAGAAAAAAAAygYAAAAAAAAFAAAAdGhpcy4",
					"AQAAAAAAAAABAAAAwAYAAAAAAADFBgAAAAAAAAAAAAAAAPC/"
				],
				[
					611,
					1,
					"",
					null,
					"AQAAAJgMAAAAAAAAogwAAAAAAAAFAAAAdGhpcy4",
					"AQAAAAAAAAABAAAAmAwAAAAAAACdDAAAAAAAAAAAAAAAAPC/"
				],
				[
					613,
					1,
					"",
					null,
					"AQAAAIgRAAAAAAAAkhEAAAAAAAAFAAAAdGhpcy4",
					"AQAAAAAAAAABAAAAiBEAAAAAAACNEQAAAAAAAAAAAAAAAPC/"
				],
				[
					614,
					1,
					"",
					null,
					"AQAAALcRAAAAAAAAwREAAAAAAAAFAAAAdGhpcy4",
					"AQAAAAAAAAABAAAAtxEAAAAAAAC8EQAAAAAAAAAAAAAAAPC/"
				],
				[
					651,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAALhgAAAAAAABtGAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "compile_commands.js",
			"settings":
			{
				"buffer_size": 5594,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					24,
					1,
					"insert_snippet",
					{
						"contents": "\n${TM_CURRENT_LINE/^\\s*((?:#|\\/\\/[\\/!]?)\\s*).*/$1/}"
					},
					"AQAAAFgVAAAAAAAAXRUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWBUAAAAAAABYFQAAAAAAAP///////+9/"
				],
				[
					25,
					3,
					"left_delete",
					null,
					"AwAAAFwVAAAAAAAAXBUAAAAAAAABAAAAL1sVAAAAAAAAWxUAAAAAAAABAAAAL1kVAAAAAAAAWRUAAAAAAAACAAAAICA",
					"AQAAAAAAAAABAAAAXRUAAAAAAABdFQAAAAAAAAAAAAAAAPC/"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAJMRAAAAAAAAlBEAAAAAAAAAAAAAlBEAAAAAAACWEQAAAAAAAAAAAACWEQAAAAAAAJgRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkxEAAAAAAACTEQAAAAAAAAAAAAAAAPC/"
				],
				[
					53,
					1,
					"paste",
					null,
					"AQAAAJgRAAAAAAAAphEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmBEAAAAAAACYEQAAAAAAAAAAAAAAAPC/"
				],
				[
					54,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAKYRAAAAAAAApxEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAphEAAAAAAACmEQAAAAAAAAAAAAAAAPC/"
				],
				[
					55,
					1,
					"ensure_newline_at_eof",
					null,
					"AQAAAB0WAAAAAAAAHhYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApxEAAAAAAACnEQAAAAAAAAAAAAAAAPC/"
				],
				[
					79,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAeFgAAaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnOwppbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnOwppbXBvcnQgeyBSZWN1cnNpdmVEaXJJdGVyYXRvciB9IGZyb20gJy4vZGlyLWhlbHBlcnMuanMnOwppbXBvcnQgeyBBcmd1bWVudFR5cGUsIENvbXBpbGVDb21tYW5kLCBNYWtlQ29tbWFuZCwgTWFrZUNvbW1hbmRzIH0gZnJvbSAnLi9saWIvY29tcGlsZUNvbW1hbmQuanMnOwppbXBvcnQgeyBhcnJheXNJbkNvbW1vbiwgZGVmaW5lLCBtYXBGdW5jdGlvbiwgdHlwZXMgfSBmcm9tICcuL2xpYi9taXNjLmpzJzsKaW1wb3J0IHsgQ29uc29sZSB9IGZyb20gJ2NvbnNvbGUnOwppbXBvcnQgcHJvY2VzcyBmcm9tICdwcm9jZXNzJzsKCmNvbnN0IGNvbW1hbmRzID0gKGdsb2JhbFRoaXMuY29tbWFuZHMgPSBbXSk7CmNvbnN0IGNtZE1hcCA9IChnbG9iYWxUaGlzLmNtZE1hcCA9IG1hcEZ1bmN0aW9uKG5ldyBXZWFrTWFwKCkpKTsKCmNvbnN0IGdldE1hbnkgPQogIGZuID0+CiAgKC4uLmFyZ3MpID0+CiAgICBhcmdzLmxlbmd0aCA9PSAxICYmIEFycmF5LmlzQXJyYXkoYXJnc1swXSkKICAgICAgPyAoZnVuY3Rpb24qIGl0ZXIoYXJyKSB7CiAgICAgICAgICBmb3IobGV0IGl0ZW0gb2YgYXJyKSB5aWVsZCBmbihpdGVtKSA/PyBpdGVtOwogICAgICAgIH0pKGFyZ3NbMF0pCiAgICAgIDogZm4oLi4uYXJncyk7Cgpjb25zdCBydW5HZW5lcmF0b3IgPQogIGZuID0+CiAgKC4uLmFyZ3MpID0+IHsKICAgIGxldCByZXN1bHQgPSBmbi5jYWxsKG51bGwsIC4uLmFyZ3MpOwogICAgaWYodHlwZXMuaXNJdGVyYXRvcihyZXN1bHQpKSByZXN1bHQgPSBbLi4ucmVzdWx0XTsKICAgIHJldHVybiByZXN1bHQ7CiAgfTsKCmNvbnN0IHRhcmdldE1hcCA9IChnbG9iYWxUaGlzLnRhcmdldE1hcCA9IHJ1bkdlbmVyYXRvcihnZXRNYW55KG1hcEZ1bmN0aW9uKG5ldyBNYXAoKSkpKSk7CmNvbnN0IHNvdXJjZXNNYXAgPSAoZ2xvYmFsVGhpcy5zb3VyY2VzTWFwID0gb3V0cHV0RmlsZSA9PiB7CiAgbGV0IHsgZGVwcyB9ID0gdGFyZ2V0TWFwKG91dHB1dEZpbGUpOwogIGRlcHMgPSB0YXJnZXRNYXAoZGVwcyk7CiAgZGVwcyA9IGRlcHMuZmxhdE1hcChkZXAgPT4gZGVwLnNvdXJjZXMpLmZpbHRlcihzID0+IHR5cGVvZiBzID09ICdzdHJpbmcnKTsKICByZXR1cm4gZGVwczsKfSk7Cgpjb25zdCBkZXBNYXAgPSAoZ2xvYmFsVGhpcy5kZXBNYXAgPSBpbnB1dEZpbGUgPT4KICBPYmplY3QudmFsdWVzKAogICAgY29tbWFuZHMucmVkdWNlKAogICAgICAoYWNjLCBjbWQpID0+CiAgICAgICAgWy4uLihjbWQuc291cmNlcyA/PyBjbWQuZGVwZW5kZW5jaWVzKV0uaW5kZXhPZihpbnB1dEZpbGUpICE9IC0xCiAgICAgICAgICA/ICgoYWNjW2NtZC5vdXRwdXRGaWxlXSA/Pz0gY21kKSwgYWNjKQogICAgICAgICAgOiBhY2MsCiAgICAgIHt9CiAgICApCiAgKSk7Cgpjb25zdCB0cmFuc2Zvcm1NYXAgPSAoZ2xvYmFsVGhpcy50cmFuc2Zvcm1NYXAgPSAoaW5wdXQsIG91dHB1dCwgbWFwKSA9PiB7CiAgbGV0IGZuID0gbWFwRnVuY3Rpb24obWFwKTsKICByZXR1cm4gKC4uLmFyZ3MpID0+IHsKICAgIGFyZ3MgPSBhcmdzLm1hcChpbnB1dCk7CiAgICBsZXQgcmVzdWx0ID0gZm4uY2FsbChudWxsLCAuLi5hcmdzKTsKICAgIGlmKGFyZ3MubGVuZ3RoIDwgMikgcmVzdWx0ID0gb3V0cHV0KHJlc3VsdCk7CiAgICByZXR1cm4gcmVzdWx0OwogIH07Cn0pOwoKY29uc3Qgd29ya0RpciA9IChnbG9iYWxUaGlzLndvcmtEaXIgPSB3b3JrRGlyID0+IHsKICBpZihwYXRoLmlzUmVsYXRpdmUod29ya0RpcikpIHdvcmtEaXIgPSBwYXRoLmFic29sdXRlKHdvcmtEaXIpOwogIHJldHVybiB7CiAgICB0b0Fic29sdXRlKHApIHsKICAgICAgaWYocGF0aC5pc1JlbGF0aXZlKHApKSBwID0gcGF0aC5qb2luKHRoaXM/LndvcmtEaXIgPz8gd29ya0RpciwgcCk7CiAgICAgIHJldHVybiBwOwogICAgfSwKICAgIHRvUmVsYXRpdmUocCkgewogICAgICBpZihBcnJheS5pc0FycmF5KHApKSByZXR1cm4gcC5tYXAodG9SZWwpOwogICAgICBmdW5jdGlvbiB0b1JlbChwKSB7CiAgICAgICAgcmV0dXJuIHBhdGguaXNBYnNvbHV0ZShwKSA/IHBhdGgucmVsYXRpdmUod29ya0RpciwgcCkgOiBwOwogICAgICB9CiAgICAgIHJldHVybiB0b1JlbChwKTsKICAgIH0KICB9Owp9KTsKCmNvbnN0IHJlbGF0aXZlTWFwID0gKGdsb2JhbFRoaXMucmVsYXRpdmVNYXAgPSAocmVsYXRpdmVUbywgbWFwKSA9PiB7CiAgbGV0IHsgdG9BYnNvbHV0ZSwgdG9SZWxhdGl2ZSB9ID0gd29ya0RpcihwYXRoLmFic29sdXRlKHJlbGF0aXZlVG8pKTsKCiAgcmV0dXJuIHRyYW5zZm9ybU1hcCh0b0Fic29sdXRlLCB0b1JlbGF0aXZlLCBtYXApOwp9KTsKCmNvbnN0IGJpbnV0aWxzID0gKGdsb2JhbFRoaXMuYmludXRpbHMgPSB7CiAgbm06ICguLi5hcmdzKSA9PgogICAgWy4uLlNoZWxsKGBubSAke2FyZ3Muam9pbignICcpfWApLm1hdGNoQWxsKC9bXlxuXSsvZyldCiAgICAgIC5tYXAobSA9PiBtWzBdLnNwbGl0KC86LykpCiAgICAgIC5maWx0ZXIoZW50cnkgPT4gZW50cnkubGVuZ3RoID4gMSkKICAgICAgLm1hcCgoW2ZpbGUsIGRhdGFdKSA9PiBbZmlsZSwgZGF0YS5zbGljZSgwLCAxNiksIGRhdGEuc2xpY2UoMTcsIDE4KSwgZGF0YS5zbGljZSgxOSldKQogICAgICAucmVkdWNlKAogICAgICAgIChhY2MsIFtmaWxlLCBhZGRyLCB0eXBlLCBuYW1lXSkgPT4gKAogICAgICAgICAgKGFjY1tmaWxlXSA/Pz0gW10pLAogICAgICAgICAgYWNjW2ZpbGVdLnB1c2goeyBhZGRyOiBwYXJzZUludChhZGRyLnRyaW0oKSB8fCAnMCcpLCB0eXBlLCBuYW1lIH0pLAogICAgICAgICAgYWNjCiAgICAgICAgKSwKICAgICAgICB7fQogICAgICApCn0pOwoKZnVuY3Rpb24gbWFpbiguLi5hcmdsaXN0KSB7CiAgY29uc3QgeyBzdGRvdXQsIHN0ZGVyciB9ID0gcHJvY2VzczsKICBnbG9iYWxUaGlzLmNvbnNvbGUgPSBuZXcgQ29uc29sZSh7CiAgICBzdGRvdXQsCiAgICBzdGRlcnIsCiAgICBpbnNwZWN0T3B0aW9uczogewogICAgICBjb2xvcnM6IHRydWUsCiAgICAgIGRlcHRoOiBJbmZpbml0eSwKICAgICAgY29tcGFjdDogZmFsc2UsCiAgICAgIG1heEFycmF5TGVuZ3RoOiBJbmZpbml0eSwKICAgICAgbWF4U3RyaW5nTGVuZ3RoOiBJbmZpbml0eQogICAgfQogIH0pOwogIGxldCBmaWxlID0KICAgIGFyZ2xpc3RbMF0gPz8KICAgICcvaG9tZS9yb21hbi9Qcm9qZWN0cy9wbG90LWN2L3F1aWNranMvcWpzLW1vZHVsZXMvYnVpbGQveDg2XzY0LWxpbnV4LWRlYnVnL2NvbXBpbGVfY29tbWFuZHMuanNvbic7CgogIGxldCBidWlsZGRpciA9IHBhdGguZGlybmFtZShmaWxlKTsKICBsZXQganNvbiA9IGZzLnJlYWRGaWxlU3luYyhmaWxlLCAndXRmLTgnKTsKICBsZXQgY29tcGlsZUNvbW1hbmRzID0gSlNPTi5wYXJzZShqc29uKTsKICBsZXQgcHJldkRpcmVjdG9yeTsKICBsZXQgZGlyZWN0b3JpZXMgPSBuZXcgU2V0KCksCiAgICB3b3JraW5nRGlyID0gcHJvY2Vzcy5jd2QoKTsKCiAgZm9yKGxldCB7IGRpcmVjdG9yeSwgY29tbWFuZCB9IG9mIGNvbXBpbGVDb21tYW5kcykgewogICAgbGV0IGNtZCA9IE1ha2VDb21tYW5kKGNvbW1hbmQsIGRpcmVjdG9yeSk7CgogICAgLyppZigtMSA9PSBjb21tYW5kcy5maW5kSW5kZXgoYyA9PiBjLm91dHB1dEZpbGUgPT0gY21kLm91dHB1dEZpbGUpKSovIHsKICAgICAgY29tbWFuZHMucHVzaChjbWQpOwoKICAgICAgdGFyZ2V0TWFwKGNtZC5vdXRwdXRGaWxlLCBjbWQpOwogICAgICBjbWRNYXAoY21kLCB7CiAgICAgICAgc3RyaW5nOiBjb21tYW5kLAogICAgICAgIGZpbGUsCiAgICAgICAgZ2V0IGRlcGVuZGVuY2llcygpIHsKICAgICAgICAgIHJldHVybiB0YXJnZXRNYXAoY21kLmRlcGVuZGVuY2llcyk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KCiAgICBkaXJlY3Rvcmllcy5hZGQoZGlyZWN0b3J5KTsKICAgIHByZXZEaXJlY3RvcnkgPSBkaXJlY3Rvcnk7CiAgfQogIGxldCBjb21tb24gPSBhcnJheXNJbkNvbW1vbihjb21tYW5kcykuZmlsdGVyKAogICAgKGFyZywgaSkgPT4gaSA+IDAgJiYgWydtb2RlJywgJ291dHB1dCddLmluZGV4T2YoQXJndW1lbnRUeXBlKGFyZykpID09IC0xCiAgKTsKCiAgbGV0IGkgPSAwOwogIGZvcihsZXQgY21kIG9mIGNvbW1hbmRzKSB7CiAgICAvL2NtZC5yZW1vdmUoLi4uY29tbW9uKTsKICAgIGxldCB7IHByb2dyYW0sIG91dHB1dCwgc291cmNlIH0gPSBjbWQ7CgogICAgdGFyZ2V0TWFwKGNtZC5vdXRwdXRGaWxlLCBjbWQpOwoKICAgICsraTsKICB9CiAgbGV0IHsgcHJvZ3JhbSB9ID0gY29tbWFuZHNbMF07CgogIGNvbW1vbi51bnNoaWZ0KHByb2dyYW0pOwogIGxldCBuZXdDbWQgPSBjb21tb24uam9pbignICcpOwoKICBsZXQgY29tbW9uQ21kID0gKGdsb2JhbFRoaXMuY29tbW9uQ21kID0gbmV3IENvbXBpbGVDb21tYW5kKG5ld0NtZCkpOwoKICBjb25zdCB7IGRlZmluZXMsIGluY2x1ZGVQYXRocywgZmxhZ3MgfSA9IGNvbW1vbkNtZDsKCiAgZGVmaW5lKGdsb2JhbFRoaXMsIHsKICAgIENvbXBpbGVDb21tYW5kLAogICAgZ2V0IENGTEFHUygpIHsKICAgICAgcmV0dXJuIFsuLi5kZWZpbmVzLm1hcChkID0+ICctRCcgKyBkKSwgLi4uaW5jbHVkZVBhdGhzLm1hcChpID0+ICctSScgKyBpKSwgLi4uZmxhZ3NdOwogICAgfQogIH0pOwoKICBsZXQgbGlua0ZpbGVzID0gWy4uLmRpcmVjdG9yaWVzXS5mbGF0TWFwKGRpciA9PiBbCiAgICAuLi5SZWN1cnNpdmVEaXJJdGVyYXRvcihkaXIsIChlbnRyeSwgZmlsZSkgPT4gL2xpbmtcLnR4dCQvLnRlc3QoZmlsZSkpCiAgXSk7CgogIGNvbnNvbGUubG9nKCdsaW5rRmlsZXMnLCBsaW5rRmlsZXMpOwoKICBmb3IobGV0IGZpbGUgb2YgbGlua0ZpbGVzKSB7CiAgICBjb25zdCBzdHJpbmcgPSBmcy5yZWFkRmlsZVN5bmMoZmlsZSwgJ3V0Zi04Jyk7CiAgICBsZXQgW2NtZF0gPSBNYWtlQ29tbWFuZHMoc3RyaW5nLCBmaWxlLnJlcGxhY2UoL1wvQ01ha2VGaWxlc1wvLiovZywgJycpKTsKCiAgICBjb25zdCB7IG91dHB1dCwgb2JqZWN0cyB9ID0gY21kOwoKICAgIC8qaWYoLTEgPT0gY29tbWFuZHMuZmluZEluZGV4KGMgPT4gYy5vdXRwdXRGaWxlID09IGNtZC5vdXRwdXRGaWxlKSkqLyB7CiAgICAgIGNvbW1hbmRzLnB1c2goY21kKTsKICAgICAgdGFyZ2V0TWFwKGNtZC5vdXRwdXRGaWxlLCBjbWQpOwogICAgICBjbWRNYXAoY21kLCB7CiAgICAgICAgc3RyaW5nLAogICAgICAgIGZpbGUsCiAgICAgICAgZ2V0IGRlcGVuZGVuY2llcygpIHsKICAgICAgICAgIHJldHVybiB0YXJnZXRNYXAoY21kLmRlcGVuZGVuY2llcyk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICAgIGNvbnNvbGUubG9nKCdjbWQnLCBjbWQpOwoKICAgIChnbG9iYWxUaGlzLmxpbmtDb21tYW5kcyA/Pz0gW10pLnB1c2goY21kKTsKICB9CgogIGNvbnNvbGUubG9nKCdjb21tYW5kcycsIGNvbW1hbmRzKTsKCiAgcHJvY2Vzcy5raWxsKHByb2Nlc3MucGlkLCAxMCk7CiAgLy9zdGFydEludGVyYWN0aXZlKCk7Cgp9Cgp0cnkgewogIG1haW4oLi4ucHJvY2Vzcy5hcmd2LnNsaWNlKDIpKTsKfSBjYXRjaChlcnJvcikgewogIGNvbnNvbGUubG9nKGBGQUlMOiAke2Vycm9yLm1lc3NhZ2V9XG4ke2Vycm9yLnN0YWNrfWApOwogIHByb2Nlc3MuZXhpdCgxKTsKfSBmaW5hbGx5IHsKICBjb25zb2xlLmxvZygnU1VDQ0VTUycpOwp9CgAAAAAAAAAAkRUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcQAAAAAAAADUAAAAAAAAAAAAAAAAAPC/"
				],
				[
					86,
					1,
					"cut",
					null,
					"AQAAAEMBAAAAAAAAQwEAAAAAAAAfAAAAaW1wb3J0IHByb2Nlc3MgZnJvbSAncHJvY2Vzcyc7Cg",
					"AQAAAAAAAAABAAAAQwEAAAAAAABiAQAAAAAAAAAAAAAAAPC/"
				],
				[
					255,
					1,
					"paste",
					null,
					"AQAAAAQRAAAAAAAAEBEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABBEAAAAAAAAEEQAAAAAAAAAAAAAAAPC/"
				],
				[
					256,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAABARAAAAAAAAEREAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEBEAAAAAAAAQEQAAAAAAAAAAAAAAAPC/"
				],
				[
					272,
					1,
					"paste",
					null,
					"AQAAAIgAAAAAAAAAkgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiAAAAAAAAACIAAAAAAAAAAAAAAAAAPC/"
				],
				[
					273,
					1,
					"insert",
					{
						"characters": ",CommandTGy"
					},
					"CwAAAJIAAAAAAAAAkwAAAAAAAAAAAAAAkwAAAAAAAACUAAAAAAAAAAAAAACUAAAAAAAAAJUAAAAAAAAAAAAAAJUAAAAAAAAAlgAAAAAAAAAAAAAAlgAAAAAAAACXAAAAAAAAAAAAAACXAAAAAAAAAJgAAAAAAAAAAAAAAJgAAAAAAAAAmQAAAAAAAAAAAAAAmQAAAAAAAACaAAAAAAAAAAAAAACaAAAAAAAAAJsAAAAAAAAAAAAAAJsAAAAAAAAAnAAAAAAAAAAAAAAAnAAAAAAAAACdAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkgAAAAAAAACSAAAAAAAAAAAAAAAAAPC/"
				],
				[
					274,
					2,
					"left_delete",
					null,
					"AgAAAJwAAAAAAAAAnAAAAAAAAAABAAAAeZsAAAAAAAAAmwAAAAAAAAABAAAARw",
					"AQAAAAAAAAABAAAAnQAAAAAAAACdAAAAAAAAAAAAAAAAAPC/"
				],
				[
					275,
					1,
					"insert",
					{
						"characters": "ype,"
					},
					"BAAAAJsAAAAAAAAAnAAAAAAAAAAAAAAAnAAAAAAAAACdAAAAAAAAAAAAAACdAAAAAAAAAJ4AAAAAAAAAAAAAAJ4AAAAAAAAAnwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmwAAAAAAAACbAAAAAAAAAAAAAAAAAPC/"
				],
				[
					289,
					1,
					"insert",
					{
						"characters": "Argume"
					},
					"BgAAACgRAAAAAAAAKREAAAAAAAAAAAAAKREAAAAAAAAqEQAAAAAAAAAAAAAqEQAAAAAAACsRAAAAAAAAAAAAACsRAAAAAAAALBEAAAAAAAAAAAAALBEAAAAAAAAtEQAAAAAAAAAAAAAtEQAAAAAAAC4RAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKBEAAAAAAAAoEQAAAAAAAAAAAAAAAPC/"
				],
				[
					290,
					1,
					"insert",
					{
						"characters": " ntI"
					},
					"BAAAAC4RAAAAAAAALxEAAAAAAAAAAAAALxEAAAAAAAAwEQAAAAAAAAAAAAAwEQAAAAAAADERAAAAAAAAAAAAADERAAAAAAAAMhEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALhEAAAAAAAAuEQAAAAAAAAAAAAAAAPC/"
				],
				[
					291,
					4,
					"left_delete",
					null,
					"BAAAADERAAAAAAAAMREAAAAAAAABAAAASTARAAAAAAAAMBEAAAAAAAABAAAAdC8RAAAAAAAALxEAAAAAAAABAAAAbi4RAAAAAAAALhEAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAMhEAAAAAAAAyEQAAAAAAAAAAAAAAAPC/"
				],
				[
					292,
					1,
					"insert",
					{
						"characters": "ntIs,Copmm"
					},
					"CgAAAC4RAAAAAAAALxEAAAAAAAAAAAAALxEAAAAAAAAwEQAAAAAAAAAAAAAwEQAAAAAAADERAAAAAAAAAAAAADERAAAAAAAAMhEAAAAAAAAAAAAAMhEAAAAAAAAzEQAAAAAAAAAAAAAzEQAAAAAAADQRAAAAAAAAAAAAADQRAAAAAAAANREAAAAAAAAAAAAANREAAAAAAAA2EQAAAAAAAAAAAAA2EQAAAAAAADcRAAAAAAAAAAAAADcRAAAAAAAAOBEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALhEAAAAAAAAuEQAAAAAAAAAAAAAAAPC/"
				],
				[
					293,
					3,
					"left_delete",
					null,
					"AwAAADcRAAAAAAAANxEAAAAAAAABAAAAbTYRAAAAAAAANhEAAAAAAAABAAAAbTURAAAAAAAANREAAAAAAAABAAAAcA",
					"AQAAAAAAAAABAAAAOBEAAAAAAAA4EQAAAAAAAAAAAAAAAPC/"
				],
				[
					294,
					1,
					"insert",
					{
						"characters": "mmandTyppe,"
					},
					"CwAAADURAAAAAAAANhEAAAAAAAAAAAAANhEAAAAAAAA3EQAAAAAAAAAAAAA3EQAAAAAAADgRAAAAAAAAAAAAADgRAAAAAAAAOREAAAAAAAAAAAAAOREAAAAAAAA6EQAAAAAAAAAAAAA6EQAAAAAAADsRAAAAAAAAAAAAADsRAAAAAAAAPBEAAAAAAAAAAAAAPBEAAAAAAAA9EQAAAAAAAAAAAAA9EQAAAAAAAD4RAAAAAAAAAAAAAD4RAAAAAAAAPxEAAAAAAAAAAAAAPxEAAAAAAABAEQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANREAAAAAAAA1EQAAAAAAAAAAAAAAAPC/"
				],
				[
					295,
					3,
					"left_delete",
					null,
					"AwAAAD8RAAAAAAAAPxEAAAAAAAABAAAALD4RAAAAAAAAPhEAAAAAAAABAAAAZT0RAAAAAAAAPREAAAAAAAABAAAAcA",
					"AQAAAAAAAAABAAAAQBEAAAAAAABAEQAAAAAAAAAAAAAAAPC/"
				],
				[
					296,
					1,
					"insert",
					{
						"characters": "e,"
					},
					"AgAAAD0RAAAAAAAAPhEAAAAAAAAAAAAAPhEAAAAAAAA/EQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPREAAAAAAAA9EQAAAAAAAAAAAAAAAPC/"
				],
				[
					307,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACtFQAAaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnOwppbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnOwppbXBvcnQgeyBSZWN1cnNpdmVEaXJJdGVyYXRvciB9IGZyb20gJy4vZGlyLWhlbHBlcnMuanMnOwppbXBvcnQgeyBBcmd1bWVudFR5cGUsIEFyZ3VtZW50SXMsQ29tbWFuZFR5cGUsQ29tcGlsZUNvbW1hbmQsIE1ha2VDb21tYW5kLCBNYWtlQ29tbWFuZHMgfSBmcm9tICcuL2xpYi9jb21waWxlQ29tbWFuZC5qcyc7CmltcG9ydCB7IGFycmF5c0luQ29tbW9uLCBkZWZpbmUsIG1hcEZ1bmN0aW9uLCB0eXBlcyB9IGZyb20gJy4vbGliL21pc2MuanMnOwppbXBvcnQgeyBDb25zb2xlIH0gZnJvbSAnY29uc29sZSc7Cgpjb25zdCBjb21tYW5kcyA9IChnbG9iYWxUaGlzLmNvbW1hbmRzID0gW10pOwpjb25zdCBjbWRNYXAgPSAoZ2xvYmFsVGhpcy5jbWRNYXAgPSBtYXBGdW5jdGlvbihuZXcgV2Vha01hcCgpKSk7Cgpjb25zdCBnZXRNYW55ID0KICBmbiA9PgogICguLi5hcmdzKSA9PgogICAgYXJncy5sZW5ndGggPT0gMSAmJiBBcnJheS5pc0FycmF5KGFyZ3NbMF0pCiAgICAgID8gKGZ1bmN0aW9uKiBpdGVyKGFycikgewogICAgICAgICAgZm9yKGxldCBpdGVtIG9mIGFycikgeWllbGQgZm4oaXRlbSkgPz8gaXRlbTsKICAgICAgICB9KShhcmdzWzBdKQogICAgICA6IGZuKC4uLmFyZ3MpOwoKY29uc3QgcnVuR2VuZXJhdG9yID0KICBmbiA9PgogICguLi5hcmdzKSA9PiB7CiAgICBsZXQgcmVzdWx0ID0gZm4uY2FsbChudWxsLCAuLi5hcmdzKTsKICAgIGlmKHR5cGVzLmlzSXRlcmF0b3IocmVzdWx0KSkgcmVzdWx0ID0gWy4uLnJlc3VsdF07CiAgICByZXR1cm4gcmVzdWx0OwogIH07Cgpjb25zdCB0YXJnZXRNYXAgPSAoZ2xvYmFsVGhpcy50YXJnZXRNYXAgPSBydW5HZW5lcmF0b3IoZ2V0TWFueShtYXBGdW5jdGlvbihuZXcgTWFwKCkpKSkpOwpjb25zdCBzb3VyY2VzTWFwID0gKGdsb2JhbFRoaXMuc291cmNlc01hcCA9IG91dHB1dEZpbGUgPT4gewogIGxldCB7IGRlcHMgfSA9IHRhcmdldE1hcChvdXRwdXRGaWxlKTsKICBkZXBzID0gdGFyZ2V0TWFwKGRlcHMpOwogIGRlcHMgPSBkZXBzLmZsYXRNYXAoZGVwID0+IGRlcC5zb3VyY2VzKS5maWx0ZXIocyA9PiB0eXBlb2YgcyA9PSAnc3RyaW5nJyk7CiAgcmV0dXJuIGRlcHM7Cn0pOwoKY29uc3QgZGVwTWFwID0gKGdsb2JhbFRoaXMuZGVwTWFwID0gaW5wdXRGaWxlID0+CiAgT2JqZWN0LnZhbHVlcyhjb21tYW5kcy5yZWR1Y2UoKGFjYywgY21kKSA9PiAoWy4uLihjbWQuc291cmNlcyA/PyBjbWQuZGVwZW5kZW5jaWVzKV0uaW5kZXhPZihpbnB1dEZpbGUpICE9IC0xID8gKChhY2NbY21kLm91dHB1dEZpbGVdID8/PSBjbWQpLCBhY2MpIDogYWNjKSwge30pKSk7Cgpjb25zdCB0cmFuc2Zvcm1NYXAgPSAoZ2xvYmFsVGhpcy50cmFuc2Zvcm1NYXAgPSAoaW5wdXQsIG91dHB1dCwgbWFwKSA9PiB7CiAgbGV0IGZuID0gbWFwRnVuY3Rpb24obWFwKTsKICByZXR1cm4gKC4uLmFyZ3MpID0+IHsKICAgIGFyZ3MgPSBhcmdzLm1hcChpbnB1dCk7CiAgICBsZXQgcmVzdWx0ID0gZm4uY2FsbChudWxsLCAuLi5hcmdzKTsKICAgIGlmKGFyZ3MubGVuZ3RoIDwgMikgcmVzdWx0ID0gb3V0cHV0KHJlc3VsdCk7CiAgICByZXR1cm4gcmVzdWx0OwogIH07Cn0pOwoKY29uc3Qgd29ya0RpciA9IChnbG9iYWxUaGlzLndvcmtEaXIgPSB3b3JrRGlyID0+IHsKICBpZihwYXRoLmlzUmVsYXRpdmUod29ya0RpcikpIHdvcmtEaXIgPSBwYXRoLmFic29sdXRlKHdvcmtEaXIpOwogIHJldHVybiB7CiAgICB0b0Fic29sdXRlKHApIHsKICAgICAgaWYocGF0aC5pc1JlbGF0aXZlKHApKSBwID0gcGF0aC5qb2luKHRoaXM/LndvcmtEaXIgPz8gd29ya0RpciwgcCk7CiAgICAgIHJldHVybiBwOwogICAgfSwKICAgIHRvUmVsYXRpdmUocCkgewogICAgICBpZihBcnJheS5pc0FycmF5KHApKSByZXR1cm4gcC5tYXAodG9SZWwpOwogICAgICBmdW5jdGlvbiB0b1JlbChwKSB7CiAgICAgICAgcmV0dXJuIHBhdGguaXNBYnNvbHV0ZShwKSA/IHBhdGgucmVsYXRpdmUod29ya0RpciwgcCkgOiBwOwogICAgICB9CiAgICAgIHJldHVybiB0b1JlbChwKTsKICAgIH0KICB9Owp9KTsKCmNvbnN0IHJlbGF0aXZlTWFwID0gKGdsb2JhbFRoaXMucmVsYXRpdmVNYXAgPSAocmVsYXRpdmVUbywgbWFwKSA9PiB7CiAgbGV0IHsgdG9BYnNvbHV0ZSwgdG9SZWxhdGl2ZSB9ID0gd29ya0RpcihwYXRoLmFic29sdXRlKHJlbGF0aXZlVG8pKTsKCiAgcmV0dXJuIHRyYW5zZm9ybU1hcCh0b0Fic29sdXRlLCB0b1JlbGF0aXZlLCBtYXApOwp9KTsKCmNvbnN0IGJpbnV0aWxzID0gKGdsb2JhbFRoaXMuYmludXRpbHMgPSB7CiAgbm06ICguLi5hcmdzKSA9PgogICAgWy4uLlNoZWxsKGBubSAke2FyZ3Muam9pbignICcpfWApLm1hdGNoQWxsKC9bXlxuXSsvZyldCiAgICAgIC5tYXAobSA9PiBtWzBdLnNwbGl0KC86LykpCiAgICAgIC5maWx0ZXIoZW50cnkgPT4gZW50cnkubGVuZ3RoID4gMSkKICAgICAgLm1hcCgoW2ZpbGUsIGRhdGFdKSA9PiBbZmlsZSwgZGF0YS5zbGljZSgwLCAxNiksIGRhdGEuc2xpY2UoMTcsIDE4KSwgZGF0YS5zbGljZSgxOSldKQogICAgICAucmVkdWNlKChhY2MsIFtmaWxlLCBhZGRyLCB0eXBlLCBuYW1lXSkgPT4gKChhY2NbZmlsZV0gPz89IFtdKSwgYWNjW2ZpbGVdLnB1c2goeyBhZGRyOiBwYXJzZUludChhZGRyLnRyaW0oKSB8fCAnMCcpLCB0eXBlLCBuYW1lIH0pLCBhY2MpLCB7fSkKfSk7CgpmdW5jdGlvbiBtYWluKC4uLmFyZ2xpc3QpIHsKICBjb25zdCB7IHN0ZG91dCwgc3RkZXJyIH0gPSBwcm9jZXNzOwogIGdsb2JhbFRoaXMuY29uc29sZSA9IG5ldyBDb25zb2xlKHsKICAgIHN0ZG91dCwKICAgIHN0ZGVyciwKICAgIGluc3BlY3RPcHRpb25zOiB7CiAgICAgIGNvbG9yczogdHJ1ZSwKICAgICAgZGVwdGg6IEluZmluaXR5LAogICAgICBjb21wYWN0OiBmYWxzZSwKICAgICAgbWF4QXJyYXlMZW5ndGg6IEluZmluaXR5LAogICAgICBtYXhTdHJpbmdMZW5ndGg6IEluZmluaXR5CiAgICB9CiAgfSk7CiAgbGV0IGZpbGUgPSBhcmdsaXN0WzBdID8/ICcvaG9tZS9yb21hbi9Qcm9qZWN0cy9wbG90LWN2L3F1aWNranMvcWpzLW1vZHVsZXMvYnVpbGQveDg2XzY0LWxpbnV4LWRlYnVnL2NvbXBpbGVfY29tbWFuZHMuanNvbic7CgogIGxldCBidWlsZGRpciA9IHBhdGguZGlybmFtZShmaWxlKTsKICBsZXQganNvbiA9IGZzLnJlYWRGaWxlU3luYyhmaWxlLCAndXRmLTgnKTsKICBsZXQgY29tcGlsZUNvbW1hbmRzID0gSlNPTi5wYXJzZShqc29uKTsKICBsZXQgcHJldkRpcmVjdG9yeTsKICBsZXQgZGlyZWN0b3JpZXMgPSBuZXcgU2V0KCksCiAgICB3b3JraW5nRGlyID0gcHJvY2Vzcy5jd2QoKTsKCiAgZm9yKGxldCB7IGRpcmVjdG9yeSwgY29tbWFuZCB9IG9mIGNvbXBpbGVDb21tYW5kcykgewogICAgbGV0IGNtZCA9IE1ha2VDb21tYW5kKGNvbW1hbmQsIGRpcmVjdG9yeSk7CgogICAgLyppZigtMSA9PSBjb21tYW5kcy5maW5kSW5kZXgoYyA9PiBjLm91dHB1dEZpbGUgPT0gY21kLm91dHB1dEZpbGUpKSovIHsKICAgICAgY29tbWFuZHMucHVzaChjbWQpOwoKICAgICAgdGFyZ2V0TWFwKGNtZC5vdXRwdXRGaWxlLCBjbWQpOwogICAgICBjbWRNYXAoY21kLCB7CiAgICAgICAgc3RyaW5nOiBjb21tYW5kLAogICAgICAgIGZpbGUsCiAgICAgICAgZ2V0IGRlcGVuZGVuY2llcygpIHsKICAgICAgICAgIHJldHVybiB0YXJnZXRNYXAoY21kLmRlcGVuZGVuY2llcyk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KCiAgICBkaXJlY3Rvcmllcy5hZGQoZGlyZWN0b3J5KTsKICAgIHByZXZEaXJlY3RvcnkgPSBkaXJlY3Rvcnk7CiAgfQogIGxldCBjb21tb24gPSBhcnJheXNJbkNvbW1vbihjb21tYW5kcykuZmlsdGVyKChhcmcsIGkpID0+IGkgPiAwICYmIFsnbW9kZScsICdvdXRwdXQnXS5pbmRleE9mKEFyZ3VtZW50VHlwZShhcmcpKSA9PSAtMSk7CgogIGxldCBpID0gMDsKICBmb3IobGV0IGNtZCBvZiBjb21tYW5kcykgewogICAgLy9jbWQucmVtb3ZlKC4uLmNvbW1vbik7CiAgICBsZXQgeyBwcm9ncmFtLCBvdXRwdXQsIHNvdXJjZSB9ID0gY21kOwoKICAgIHRhcmdldE1hcChjbWQub3V0cHV0RmlsZSwgY21kKTsKCiAgICArK2k7CiAgfQogIGxldCB7IHByb2dyYW0gfSA9IGNvbW1hbmRzWzBdOwoKICBjb21tb24udW5zaGlmdChwcm9ncmFtKTsKICBsZXQgbmV3Q21kID0gY29tbW9uLmpvaW4oJyAnKTsKCiAgbGV0IGNvbW1vbkNtZCA9IChnbG9iYWxUaGlzLmNvbW1vbkNtZCA9IG5ldyBDb21waWxlQ29tbWFuZChuZXdDbWQpKTsKCiAgY29uc3QgeyBkZWZpbmVzLCBpbmNsdWRlUGF0aHMsIGZsYWdzIH0gPSBjb21tb25DbWQ7CgogIGRlZmluZShnbG9iYWxUaGlzLCB7CiAgICBDb21waWxlQ29tbWFuZCxBcmd1bWVudFR5cGUsQXJndW1lbnRJcyxDb21tYW5kVHlwZSwKICAgIGdldCBDRkxBR1MoKSB7CiAgICAgIHJldHVybiBbLi4uZGVmaW5lcy5tYXAoZCA9PiAnLUQnICsgZCksIC4uLmluY2x1ZGVQYXRocy5tYXAoaSA9PiAnLUknICsgaSksIC4uLmZsYWdzXTsKICAgIH0KICB9KTsKCiAgbGV0IGxpbmtGaWxlcyA9IFsuLi5kaXJlY3Rvcmllc10uZmxhdE1hcChkaXIgPT4gWy4uLlJlY3Vyc2l2ZURpckl0ZXJhdG9yKGRpciwgKGVudHJ5LCBmaWxlKSA9PiAvbGlua1wudHh0JC8udGVzdChmaWxlKSldKTsKCiAgY29uc29sZS5sb2coJ2xpbmtGaWxlcycsIGxpbmtGaWxlcyk7CgogIGZvcihsZXQgZmlsZSBvZiBsaW5rRmlsZXMpIHsKICAgIGNvbnN0IHN0cmluZyA9IGZzLnJlYWRGaWxlU3luYyhmaWxlLCAndXRmLTgnKTsKICAgIGxldCBbY21kXSA9IE1ha2VDb21tYW5kcyhzdHJpbmcsIGZpbGUucmVwbGFjZSgvXC9DTWFrZUZpbGVzXC8uKi9nLCAnJykpOwoKICAgIGNvbnN0IHsgb3V0cHV0LCBvYmplY3RzIH0gPSBjbWQ7CgogICAgLyppZigtMSA9PSBjb21tYW5kcy5maW5kSW5kZXgoYyA9PiBjLm91dHB1dEZpbGUgPT0gY21kLm91dHB1dEZpbGUpKSovIHsKICAgICAgY29tbWFuZHMucHVzaChjbWQpOwogICAgICB0YXJnZXRNYXAoY21kLm91dHB1dEZpbGUsIGNtZCk7CiAgICAgIGNtZE1hcChjbWQsIHsKICAgICAgICBzdHJpbmcsCiAgICAgICAgZmlsZSwKICAgICAgICBnZXQgZGVwZW5kZW5jaWVzKCkgewogICAgICAgICAgcmV0dXJuIHRhcmdldE1hcChjbWQuZGVwZW5kZW5jaWVzKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQogICAgY29uc29sZS5sb2coJ2NtZCcsIGNtZCk7CgogICAgKGdsb2JhbFRoaXMubGlua0NvbW1hbmRzID8/PSBbXSkucHVzaChjbWQpOwogIH0KCiAgY29uc29sZS5sb2coJ2NvbW1hbmRzJywgY29tbWFuZHMpOwoKICBwcm9jZXNzLmtpbGwocHJvY2Vzcy5waWQsIDEwKTsKICAvL3N0YXJ0SW50ZXJhY3RpdmUoKTsKfQoKdHJ5IHsKICBtYWluKC4uLnByb2Nlc3MuYXJndi5zbGljZSgyKSk7Cn0gY2F0Y2goZXJyb3IpIHsKICBjb25zb2xlLmxvZyhgRkFJTDogJHtlcnJvci5tZXNzYWdlfVxuJHtlcnJvci5zdGFja31gKTsKICBwcm9jZXNzLmV4aXQoMSk7Cn0gZmluYWxseSB7CiAgY29uc29sZS5sb2coJ1NVQ0NFU1MnKTsKfQoAAAAAAAAAAL4VAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbQ8AAAAAAABtDwAAAAAAAAAAAAAAAPC/"
				],
				[
					356,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAEsMAAAAAAAATAwAAAAAAAAAAAAATAwAAAAAAABNDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASwwAAAAAAABLDAAAAAAAAAAAAAAAAPC/"
				],
				[
					358,
					1,
					"insert",
					{
						"characters": "console.log"
					},
					"CwAAAEwMAAAAAAAATQwAAAAAAAAAAAAATQwAAAAAAABODAAAAAAAAAAAAABODAAAAAAAAE8MAAAAAAAAAAAAAE8MAAAAAAAAUAwAAAAAAAAAAAAAUAwAAAAAAABRDAAAAAAAAAAAAABRDAAAAAAAAFIMAAAAAAAAAAAAAFIMAAAAAAAAUwwAAAAAAAAAAAAAUwwAAAAAAABUDAAAAAAAAAAAAABUDAAAAAAAAFUMAAAAAAAAAAAAAFUMAAAAAAAAVgwAAAAAAAAAAAAAVgwAAAAAAABXDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATAwAAAAAAABMDAAAAAAAAAAAAAAAAAAA"
				],
				[
					359,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAFcMAAAAAAAAWQwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVwwAAAAAAABXDAAAAAAAAAAAAAAAAPC/"
				],
				[
					360,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAFgMAAAAAAAAWgwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWAwAAAAAAABYDAAAAAAAAAAAAAAAAPC/"
				],
				[
					361,
					1,
					"insert",
					{
						"characters": "file"
					},
					"BAAAAFkMAAAAAAAAWgwAAAAAAAAAAAAAWgwAAAAAAABbDAAAAAAAAAAAAABbDAAAAAAAAFwMAAAAAAAAAAAAAFwMAAAAAAAAXQwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWQwAAAAAAABZDAAAAAAAAAAAAAAAAPC/"
				],
				[
					363,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAF4MAAAAAAAAXwwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXgwAAAAAAABeDAAAAAAAAAAAAAAAAPC/"
				],
				[
					364,
					1,
					"insert",
					{
						"characters": " fie"
					},
					"BAAAAF8MAAAAAAAAYAwAAAAAAAAAAAAAYAwAAAAAAABhDAAAAAAAAAAAAABhDAAAAAAAAGIMAAAAAAAAAAAAAGIMAAAAAAAAYwwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXwwAAAAAAABfDAAAAAAAAAAAAAAAAPC/"
				],
				[
					366,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAGQMAAAAAAAAZQwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZAwAAAAAAABkDAAAAAAAAAAAAAAAAPC/"
				],
				[
					367,
					3,
					"left_delete",
					null,
					"AwAAAGQMAAAAAAAAZAwAAAAAAAABAAAAO2MMAAAAAAAAYwwAAAAAAAABAAAAKWIMAAAAAAAAYgwAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAZQwAAAAAAABlDAAAAAAAAAAAAAAAAPC/"
				],
				[
					368,
					1,
					"insert",
					{
						"characters": "le),"
					},
					"BAAAAGIMAAAAAAAAYwwAAAAAAAAAAAAAYwwAAAAAAABkDAAAAAAAAAAAAABkDAAAAAAAAGUMAAAAAAAAAAAAAGUMAAAAAAAAZgwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYgwAAAAAAABiDAAAAAAAAAAAAAAAAPC/"
				],
				[
					371,
					1,
					"left_delete",
					null,
					"AQAAAGUMAAAAAAAAZQwAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAZgwAAAAAAABmDAAAAAAAAAAAAAAAAPC/"
				],
				[
					372,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAGUMAAAAAAAAZgwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZQwAAAAAAABlDAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "quickjs/qjs-modules/lib/repl.js",
			"settings":
			{
				"buffer_size": 62715,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					26,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAGXxAAAAAAAAZ/EAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZfEAAAAAAABl8QAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "$"
					},
					"AQAAAGbxAAAAAAAAZ/EAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZvEAAAAAAABm8QAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAGfxAAAAAAAAafEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZ/EAAAAAAABn8QAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": "module_name"
					},
					"CwAAAGjxAAAAAAAAafEAAAAAAAAAAAAAafEAAAAAAABq8QAAAAAAAAAAAABq8QAAAAAAAGvxAAAAAAAAAAAAAGvxAAAAAAAAbPEAAAAAAAAAAAAAbPEAAAAAAABt8QAAAAAAAAAAAABt8QAAAAAAAG7xAAAAAAAAAAAAAG7xAAAAAAAAb/EAAAAAAAAAAAAAb/EAAAAAAABw8QAAAAAAAAAAAABw8QAAAAAAAHHxAAAAAAAAAAAAAHHxAAAAAAAAcvEAAAAAAAAAAAAAcvEAAAAAAABz8QAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaPEAAAAAAABo8QAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"left_delete",
					null,
					"AQAAAHvxAAAAAAAAe/EAAAAAAAABAAAAJw",
					"AQAAAAAAAAABAAAAfPEAAAAAAAB88QAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "?"
					},
					"AQAAAHvxAAAAAAAAfPEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAe/EAAAAAAAB78QAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"left_delete",
					null,
					"AQAAAHvxAAAAAAAAe/EAAAAAAAABAAAAPw",
					"AQAAAAAAAAABAAAAfPEAAAAAAAB88QAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": "`"
					},
					"AQAAAHvxAAAAAAAAfPEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAe/EAAAAAAAB78QAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHzxAAAAAAAAffEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfPEAAAAAAAB88QAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"left_delete",
					null,
					"AQAAAFrxAAAAAAAAWvEAAAAAAAABAAAAJw",
					"AQAAAAAAAAABAAAAW/EAAAAAAABb8QAAAAAAAAAAAAAAYGVA"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": "`"
					},
					"AQAAAFrxAAAAAAAAW/EAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWvEAAAAAAABa8QAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAW/EAAAAAAABb8QAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "quickjs/qjs-modules/lib/fs.js",
			"settings":
			{
				"buffer_size": 26317,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					7,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AQAAALsBAAAAAAAAvAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuwEAAAAAAAC7AQAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"left_delete",
					null,
					"AQAAALsBAAAAAAAAuwEAAAAAAAABAAAAMg",
					"AQAAAAAAAAABAAAAvAEAAAAAAAC8AQAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAOhlAAAAAAAA6mUAAAAAAAAAAAAAxmUAAAAAAADIZQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxmUAAAAAAADoZQAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAyGUAAAAAAADqZQAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAyGUAAAAAAADqZQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/compileCommand.js",
			"settings":
			{
				"buffer_size": 11463,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1434,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIgjAAAAAAAAiSMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiCMAAAAAAACIIwAAAAAAAAAAAAAAAPC/"
				],
				[
					1439,
					1,
					"left_delete",
					null,
					"AQAAAKgjAAAAAAAAqCMAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAqSMAAAAAAACpIwAAAAAAAAAAAAAAAPC/"
				],
				[
					1440,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAKgjAAAAAAAAqSMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqCMAAAAAAACoIwAAAAAAAAAAAAAAAPC/"
				],
				[
					1441,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAKkjAAAAAAAAqiMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqSMAAAAAAACpIwAAAAAAAAAAAAAAAPC/"
				],
				[
					1443,
					1,
					"right_delete",
					null,
					"AQAAAKojAAAAAAAAqiMAAAAAAAAkAAAAOiBhcmcgPT4gQXJndW1lbnRUeXBlKGFyZykgPT0gcHJlZDsK",
					"AQAAAAAAAAABAAAAqiMAAAAAAADOIwAAAAAAAAAAAAAAAAAA"
				],
				[
					1449,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAALMjAAAAAAAAtCMAAAAAAAAAAAAAtCMAAAAAAAC0IwAAAAAAAD0AAAB0eXBlb2YgcHJlZCA9PSAnZnVuY3Rpb24nID8gYXJnID0+IHByZWQoQXJndW1lbnRUeXBlKGFyZykpIDog",
					"AQAAAAAAAAABAAAA8CMAAAAAAACzIwAAAAAAAAAAAAAAAPC/"
				],
				[
					1523,
					1,
					"cut",
					null,
					"AQAAACIKAAAAAAAAIgoAAAAAAABfAAAAdGhpcy5hcmd2Lm1hcCgoYXJnLCBpKSA9PiAoaSA+IDAgJiYgcHJlZChhcmcsIGkpICYmIGlzQWJzb2x1dGUoYXJnKSA/IHJlbGF0aXZlKHRvLCBhcmcpIDogYXJnKSk",
					"AQAAAAAAAAABAAAAIgoAAAAAAACBCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1526,
					1,
					"paste",
					null,
					"AQAAACIKAAAAAAAAgQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIgoAAAAAAAAiCgAAAAAAAAAAAAAAAHJA"
				],
				[
					1603,
					1,
					"insert",
					{
						"characters": "\nre"
					},
					"BAAAAPYiAAAAAAAA9yIAAAAAAAAAAAAA9yIAAAAAAAD5IgAAAAAAAAAAAAD5IgAAAAAAAPoiAAAAAAAAAAAAAPoiAAAAAAAA+yIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9iIAAAAAAAD2IgAAAAAAAAAAAAAAAPC/"
				],
				[
					1604,
					2,
					"left_delete",
					null,
					"AgAAAPoiAAAAAAAA+iIAAAAAAAABAAAAZfkiAAAAAAAA+SIAAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAA+yIAAAAAAAD7IgAAAAAAAAAAAAAAAPC/"
				],
				[
					1605,
					1,
					"insert",
					{
						"characters": "return"
					},
					"BgAAAPkiAAAAAAAA+iIAAAAAAAAAAAAA+iIAAAAAAAD7IgAAAAAAAAAAAAD7IgAAAAAAAPwiAAAAAAAAAAAAAPwiAAAAAAAA/SIAAAAAAAAAAAAA/SIAAAAAAAD+IgAAAAAAAAAAAAD+IgAAAAAAAP8iAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+SIAAAAAAAD5IgAAAAAAAAAAAAAAAPC/"
				],
				[
					1606,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAP8iAAAAAAAAACMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/yIAAAAAAAD/IgAAAAAAAAAAAAAAAPC/"
				],
				[
					1607,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAAAjAAAAAAAAAiMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAACMAAAAAAAAAIwAAAAAAAAAAAAAAAPC/"
				],
				[
					1608,
					1,
					"insert",
					{
						"characters": "file"
					},
					"BAAAAAEjAAAAAAAAAiMAAAAAAAAAAAAAAiMAAAAAAAADIwAAAAAAAAAAAAADIwAAAAAAAAQjAAAAAAAAAAAAAAQjAAAAAAAABSMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAASMAAAAAAAABIwAAAAAAAAAAAAAAAPC/"
				],
				[
					1610,
					1,
					"insert",
					{
						"characters": ":;"
					},
					"AgAAAAYjAAAAAAAAByMAAAAAAAAAAAAAByMAAAAAAAAIIwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABiMAAAAAAAAGIwAAAAAAAAAAAAAAAPC/"
				],
				[
					1611,
					2,
					"left_delete",
					null,
					"AgAAAAcjAAAAAAAAByMAAAAAAAABAAAAOwYjAAAAAAAABiMAAAAAAAABAAAAOg",
					"AQAAAAAAAAABAAAACCMAAAAAAAAIIwAAAAAAAAAAAAAAAPC/"
				],
				[
					1612,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAAYjAAAAAAAAByMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABiMAAAAAAAAGIwAAAAAAAAAAAAAAAPC/"
				],
				[
					1613,
					1,
					"left_delete",
					null,
					"AQAAAAYjAAAAAAAABiMAAAAAAAABAAAAOg",
					"AQAAAAAAAAABAAAAByMAAAAAAAAHIwAAAAAAAAAAAAAAAPC/"
				],
				[
					1614,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAAYjAAAAAAAAByMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABiMAAAAAAAAGIwAAAAAAAAAAAAAAAPC/"
				],
				[
					1640,
					1,
					"",
					null,
					"AQAAAC0JAAAAAAAAMwkAAAAAAAAJAAAAdW5kZWZpbmVk",
					"AQAAAAAAAAABAAAALQkAAAAAAAA2CQAAAAAAAAAAAAAAAPC/"
				],
				[
					1641,
					1,
					"",
					null,
					"AQAAANoJAAAAAAAA4AkAAAAAAAAJAAAAdW5kZWZpbmVk",
					"AQAAAAAAAAABAAAA2gkAAAAAAADjCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1642,
					1,
					"",
					null,
					"AQAAAEsbAAAAAAAAURsAAAAAAAAJAAAAdW5kZWZpbmVk",
					"AQAAAAAAAAABAAAASxsAAAAAAABUGwAAAAAAAAAAAAAAAPC/"
				],
				[
					1643,
					1,
					"",
					null,
					"AQAAAAwcAAAAAAAAEhwAAAAAAAAJAAAAdW5kZWZpbmVk",
					"AQAAAAAAAAABAAAADBwAAAAAAAAVHAAAAAAAAAAAAAAAAPC/"
				],
				[
					1644,
					1,
					"",
					null,
					"AQAAANAcAAAAAAAA1hwAAAAAAAAJAAAAdW5kZWZpbmVk",
					"AQAAAAAAAAABAAAA0BwAAAAAAADZHAAAAAAAAAAAAAAAAPC/"
				],
				[
					1677,
					1,
					"insert",
					{
						"characters": "&"
					},
					"AQAAANoJAAAAAAAA2wkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2gkAAAAAAADaCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1678,
					1,
					"left_delete",
					null,
					"AQAAANoJAAAAAAAA2gkAAAAAAAABAAAAJg",
					"AQAAAAAAAAABAAAA2wkAAAAAAADbCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1679,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAANoJAAAAAAAA2wkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2gkAAAAAAADaCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1681,
					1,
					"",
					null,
					"AQAAANsJAAAAAAAA+QkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2wkAAAAAAADbCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1682,
					1,
					"insert",
					{
						"characters": "()"
					},
					"AgAAAPkJAAAAAAAA+gkAAAAAAAAAAAAA+gkAAAAAAAD7CQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+QkAAAAAAAD5CQAAAAAAAAAAAAAAAPC/"
				],
				[
					1683,
					2,
					"left_delete",
					null,
					"AgAAAPoJAAAAAAAA+gkAAAAAAAABAAAAKfkJAAAAAAAA+QkAAAAAAAABAAAAKA",
					"AQAAAAAAAAABAAAA+wkAAAAAAAD7CQAAAAAAAAAAAAAAAPC/"
				],
				[
					1684,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAAPkJAAAAAAAA+gkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+QkAAAAAAAD5CQAAAAAAAAAAAAAAAPC/"
				],
				[
					1685,
					6,
					"right_delete",
					null,
					"BgAAAPoJAAAAAAAA+gkAAAAAAAABAAAAJ/oJAAAAAAAA+gkAAAAAAAABAAAAZvoJAAAAAAAA+gkAAAAAAAABAAAAafoJAAAAAAAA+gkAAAAAAAABAAAAbPoJAAAAAAAA+gkAAAAAAAABAAAAZfoJAAAAAAAA+gkAAAAAAAABAAAAJw",
					"AQAAAAAAAAABAAAA+gkAAAAAAAD6CQAAAAAAAAAAAAAAAPC/"
				],
				[
					1687,
					1,
					"right_delete",
					null,
					"AQAAANsJAAAAAAAA2wkAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAA2wkAAAAAAADbCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1695,
					1,
					"insert",
					{
						"characters": "^"
					},
					"AQAAANsJAAAAAAAA3AkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2wkAAAAAAADbCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1698,
					1,
					"insert",
					{
						"characters": "$"
					},
					"AQAAAPkJAAAAAAAA+gkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+QkAAAAAAAD5CQAAAAAAAAAAAAAAAPC/"
				],
				[
					1707,
					1,
					"paste",
					null,
					"AgAAAC0JAAAAAAAAUAkAAAAAAAAAAAAAUAkAAAAAAABQCQAAAAAAAAYAAAAnZmlsZSc",
					"AQAAAAAAAAABAAAALQkAAAAAAAAzCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1708,
					2,
					"left_delete",
					null,
					"AgAAAE8JAAAAAAAATwkAAAAAAAABAAAAKU4JAAAAAAAATgkAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAUAkAAAAAAABQCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1736,
					1,
					"insert",
					{
						"characters": "{"
					},
					"AQAAAGwKAAAAAAAAbQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbAoAAAAAAABsCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1737,
					1,
					"insert",
					{
						"characters": "\n\nif(/"
					},
					"CwAAAG0KAAAAAAAAbgoAAAAAAAAAAAAAbgoAAAAAAAByCgAAAAAAAAAAAABuCgAAAAAAAG4KAAAAAAAABAAAACAgICBuCgAAAAAAAHQKAAAAAAAAAAAAAHQKAAAAAAAAdQoAAAAAAAAAAAAAdQoAAAAAAAB7CgAAAAAAAAAAAABuCgAAAAAAAG4KAAAAAAAABgAAACAgICAgIHUKAAAAAAAAdgoAAAAAAAAAAAAAdgoAAAAAAAB3CgAAAAAAAAAAAAB3CgAAAAAAAHgKAAAAAAAAAAAAAHgKAAAAAAAAeQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbQoAAAAAAABtCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1738,
					2,
					"left_delete",
					null,
					"AgAAAHgKAAAAAAAAeAoAAAAAAAABAAAAL3cKAAAAAAAAdwoAAAAAAAABAAAAKA",
					"AQAAAAAAAAABAAAAeQoAAAAAAAB5CgAAAAAAAAAAAAAAAPC/"
				],
				[
					1740,
					1,
					"left_delete",
					null,
					"AQAAAI0KAAAAAAAAjQoAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAjgoAAAAAAACOCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1741,
					1,
					"insert",
					{
						"characters": "()"
					},
					"AgAAAI0KAAAAAAAAjgoAAAAAAAAAAAAAjgoAAAAAAACPCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjQoAAAAAAACNCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1742,
					2,
					"left_delete",
					null,
					"AgAAAI4KAAAAAAAAjgoAAAAAAAABAAAAKY0KAAAAAAAAjQoAAAAAAAABAAAAKA",
					"AQAAAAAAAAABAAAAjwoAAAAAAACPCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1746,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAI0KAAAAAAAAjgoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjQoAAAAAAACNCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1749,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAI0KAAAAAAAAjgoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjQoAAAAAAACNCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1750,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAI4KAAAAAAAAjwoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjgoAAAAAAACOCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1751,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAI8KAAAAAAAAkQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjwoAAAAAAACPCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1752,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAJAKAAAAAAAAkQoAAAAAAAAAAAAAkQoAAAAAAACXCgAAAAAAAAAAAACXCgAAAAAAAJgKAAAAAAAAAAAAAJgKAAAAAAAAngoAAAAAAAAAAAAAkQoAAAAAAACRCgAAAAAAAAYAAAAgICAgICCRCgAAAAAAAJkKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkAoAAAAAAACQCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1753,
					9,
					"right_delete",
					null,
					"CQAAAJkKAAAAAAAAmQoAAAAAAAABAAAACpkKAAAAAAAAmQoAAAAAAAACAAAAICCZCgAAAAAAAJkKAAAAAAAAAgAAACAgmQoAAAAAAACZCgAAAAAAAAIAAAAgIJkKAAAAAAAAmQoAAAAAAAABAAAAfZkKAAAAAAAAmQoAAAAAAAABAAAAIJkKAAAAAAAAmQoAAAAAAAABAAAAJpkKAAAAAAAAmQoAAAAAAAABAAAAJpkKAAAAAAAAmQoAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAmQoAAAAAAACZCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1754,
					1,
					"insert",
					{
						"characters": "if("
					},
					"AwAAAJkKAAAAAAAAmgoAAAAAAAAAAAAAmgoAAAAAAACbCgAAAAAAAAAAAACbCgAAAAAAAJwKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmQoAAAAAAACZCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1756,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAKsKAAAAAAAArAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqwoAAAAAAACrCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1757,
					1,
					"insert",
					{
						"characters": "  "
					},
					"AgAAAKwKAAAAAAAArQoAAAAAAAAAAAAArQoAAAAAAACuCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArAoAAAAAAACsCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1758,
					1,
					"left_delete",
					null,
					"AQAAAK0KAAAAAAAArQoAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAArgoAAAAAAACuCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1759,
					1,
					"insert",
					{
						"characters": "arg"
					},
					"AwAAAK0KAAAAAAAArgoAAAAAAAAAAAAArgoAAAAAAACvCgAAAAAAAAAAAACvCgAAAAAAALAKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArQoAAAAAAACtCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1760,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAALAKAAAAAAAAsQoAAAAAAAAAAAAAsQoAAAAAAACyCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsAoAAAAAAACwCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1761,
					3,
					"right_delete",
					null,
					"AwAAALIKAAAAAAAAsgoAAAAAAAABAAAAILIKAAAAAAAAsgoAAAAAAAABAAAAP7IKAAAAAAAAsgoAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAsgoAAAAAAACyCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1763,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAMMKAAAAAAAAxAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwwoAAAAAAADDCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1764,
					1,
					"insert",
					{
						"characters": "\n\nretur"
					},
					"CgAAAMQKAAAAAAAAxQoAAAAAAAAAAAAAxQoAAAAAAADNCgAAAAAAAAAAAADNCgAAAAAAAM4KAAAAAAAAAAAAAM4KAAAAAAAA1goAAAAAAAAAAAAAxQoAAAAAAADFCgAAAAAAAAgAAAAgICAgICAgIM4KAAAAAAAAzwoAAAAAAAAAAAAAzwoAAAAAAADQCgAAAAAAAAAAAADQCgAAAAAAANEKAAAAAAAAAAAAANEKAAAAAAAA0goAAAAAAAAAAAAA0goAAAAAAADTCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxAoAAAAAAADECgAAAAAAAAAAAAAAAPC/"
				],
				[
					1765,
					6,
					"left_delete",
					null,
					"BgAAANIKAAAAAAAA0goAAAAAAAABAAAActEKAAAAAAAA0QoAAAAAAAABAAAAddAKAAAAAAAA0AoAAAAAAAABAAAAdM8KAAAAAAAAzwoAAAAAAAABAAAAZc4KAAAAAAAAzgoAAAAAAAABAAAAcswKAAAAAAAAzAoAAAAAAAACAAAAICA",
					"AQAAAAAAAAABAAAA0woAAAAAAADTCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1767,
					1,
					"insert",
					{
						"characters": "}return"
					},
					"BwAAAMUKAAAAAAAAxgoAAAAAAAAAAAAAxgoAAAAAAADHCgAAAAAAAAAAAADHCgAAAAAAAMgKAAAAAAAAAAAAAMgKAAAAAAAAyQoAAAAAAAAAAAAAyQoAAAAAAADKCgAAAAAAAAAAAADKCgAAAAAAAMsKAAAAAAAAAAAAAMsKAAAAAAAAzAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxQoAAAAAAADFCgAAAAAAAAAAAAAAAEtA"
				],
				[
					1768,
					1,
					"insert",
					{
						"characters": " arg;"
					},
					"BQAAAMwKAAAAAAAAzQoAAAAAAAAAAAAAzQoAAAAAAADOCgAAAAAAAAAAAADOCgAAAAAAAM8KAAAAAAAAAAAAAM8KAAAAAAAA0AoAAAAAAAAAAAAA0AoAAAAAAADRCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzAoAAAAAAADMCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1769,
					1,
					"insert",
					{
						"characters": " }"
					},
					"AgAAANEKAAAAAAAA0goAAAAAAAAAAAAA0goAAAAAAADTCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0QoAAAAAAADRCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1772,
					10,
					"left_delete",
					null,
					"CgAAAN8KAAAAAAAA3woAAAAAAAABAAAAZ94KAAAAAAAA3goAAAAAAAABAAAAct0KAAAAAAAA3QoAAAAAAAABAAAAYdwKAAAAAAAA3AoAAAAAAAABAAAAINsKAAAAAAAA2woAAAAAAAABAAAAOtoKAAAAAAAA2goAAAAAAAABAAAAINgKAAAAAAAA2AoAAAAAAAACAAAAICDWCgAAAAAAANYKAAAAAAAAAgAAACAg1AoAAAAAAADUCgAAAAAAAAIAAAAgINMKAAAAAAAA0woAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAA4AoAAAAAAADgCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1782,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAMYKAAAAAAAAxwoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxgoAAAAAAADGCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1787,
					1,
					"left_delete",
					null,
					"AQAAANYKAAAAAAAA1goAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAA1woAAAAAAADXCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1790,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA1goAAAAAAADWCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1794,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAANEKAAAAAAAA0goAAAAAAAAAAAAA0goAAAAAAADcCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0QoAAAAAAADRCgAAAAAAAP///////+9/"
				],
				[
					1799,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAAJoKAAAAAAAAmwoAAAAAAAAAAAAAmwoAAAAAAACjCgAAAAAAAAAAAACjCgAAAAAAAKUKAAAAAAAAAAAAAN0KAAAAAAAA3QoAAAAAAAAKAAAAICAgICAgICAgIA",
					"AQAAAAAAAAABAAAAmgoAAAAAAACaCgAAAAAAAP///////+9/"
				],
				[
					1802,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AgAAAKUKAAAAAAAApgoAAAAAAAAAAAAApgoAAAAAAACnCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApQoAAAAAAAClCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1803,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAKcKAAAAAAAAqQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApwoAAAAAAACnCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1804,
					1,
					"insert",
					{
						"characters": "!ArgumentI"
					},
					"CgAAAKgKAAAAAAAAqQoAAAAAAAAAAAAAqQoAAAAAAACqCgAAAAAAAAAAAACqCgAAAAAAAKsKAAAAAAAAAAAAAKsKAAAAAAAArAoAAAAAAAAAAAAArAoAAAAAAACtCgAAAAAAAAAAAACtCgAAAAAAAK4KAAAAAAAAAAAAAK4KAAAAAAAArwoAAAAAAAAAAAAArwoAAAAAAACwCgAAAAAAAAAAAACwCgAAAAAAALEKAAAAAAAAAAAAALEKAAAAAAAAsgoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqAoAAAAAAACoCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1805,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAALIKAAAAAAAAswoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsgoAAAAAAACyCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1806,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAALMKAAAAAAAAtQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAswoAAAAAAACzCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1807,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAALQKAAAAAAAAtgoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtAoAAAAAAAC0CgAAAAAAAAAAAAAAAPC/"
				],
				[
					1808,
					1,
					"insert",
					{
						"characters": "file"
					},
					"BAAAALUKAAAAAAAAtgoAAAAAAAAAAAAAtgoAAAAAAAC3CgAAAAAAAAAAAAC3CgAAAAAAALgKAAAAAAAAAAAAALgKAAAAAAAAuQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtQoAAAAAAAC1CgAAAAAAAAAAAAAAAPC/"
				],
				[
					1810,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAALwKAAAAAAAAvQoAAAAAAAAAAAAAvQoAAAAAAADHCgAAAAAAAAAAAAC9CgAAAAAAAL0KAAAAAAAACgAAACAgICAgICAgICC9CgAAAAAAAMkKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvAoAAAAAAAC8CgAAAAAAAAAAAAAAAPC/"
				],
				[
					1815,
					1,
					"insert",
					{
						"characters": "\nlet"
					},
					"BwAAAJoKAAAAAAAAmwoAAAAAAAAAAAAAmwoAAAAAAACjCgAAAAAAAAAAAACjCgAAAAAAAKUKAAAAAAAAAAAAAMgKAAAAAAAAyAoAAAAAAAAMAAAAICAgICAgICAgICAgpQoAAAAAAACmCgAAAAAAAAAAAACmCgAAAAAAAKcKAAAAAAAAAAAAAKcKAAAAAAAAqAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmgoAAAAAAACaCgAAAAAAAP///////+9/"
				],
				[
					1816,
					1,
					"insert",
					{
						"characters": " opt="
					},
					"BQAAAKgKAAAAAAAAqQoAAAAAAAAAAAAAqQoAAAAAAACqCgAAAAAAAAAAAACqCgAAAAAAAKsKAAAAAAAAAAAAAKsKAAAAAAAArAoAAAAAAAAAAAAArAoAAAAAAACtCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqAoAAAAAAACoCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1817,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAK0KAAAAAAAArwoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArQoAAAAAAACtCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1819,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAK8KAAAAAAAAsAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArwoAAAAAAACvCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1822,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANIKAAAAAAAA0woAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0goAAAAAAADSCgAAAAAAAP///////+9/"
				],
				[
					1823,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAANMKAAAAAAAA1QoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0woAAAAAAADTCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1824,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAANQKAAAAAAAA1QoAAAAAAAAAAAAA1QoAAAAAAADfCgAAAAAAAAAAAADfCgAAAAAAAOAKAAAAAAAAAAAAAOAKAAAAAAAA6goAAAAAAAAAAAAA1QoAAAAAAADVCgAAAAAAAAoAAAAgICAgICAgICAg1QoAAAAAAADhCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1AoAAAAAAADUCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1827,
					1,
					"insert",
					{
						"characters": "opt=ar"
					},
					"BgAAAOEKAAAAAAAA4goAAAAAAAAAAAAA4goAAAAAAADjCgAAAAAAAAAAAADjCgAAAAAAAOQKAAAAAAAAAAAAAOQKAAAAAAAA5QoAAAAAAAAAAAAA5QoAAAAAAADmCgAAAAAAAAAAAADmCgAAAAAAAOcKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4QoAAAAAAADhCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1828,
					1,
					"insert",
					{
						"characters": "g.slice"
					},
					"BwAAAOcKAAAAAAAA6AoAAAAAAAAAAAAA6AoAAAAAAADpCgAAAAAAAAAAAADpCgAAAAAAAOoKAAAAAAAAAAAAAOoKAAAAAAAA6woAAAAAAAAAAAAA6woAAAAAAADsCgAAAAAAAAAAAADsCgAAAAAAAO0KAAAAAAAAAAAAAO0KAAAAAAAA7goAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5woAAAAAAADnCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1829,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAO4KAAAAAAAA8AoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7goAAAAAAADuCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1830,
					1,
					"insert",
					{
						"characters": "0,2"
					},
					"AwAAAO8KAAAAAAAA8AoAAAAAAAAAAAAA8AoAAAAAAADxCgAAAAAAAAAAAADxCgAAAAAAAPIKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7woAAAAAAADvCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1832,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAPMKAAAAAAAA9AoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8woAAAAAAADzCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1833,
					1,
					"insert",
					{
						"characters": "\narg=arg."
					},
					"CgAAAPQKAAAAAAAA9QoAAAAAAAAAAAAA9QoAAAAAAAABCwAAAAAAAAAAAAABCwAAAAAAAAILAAAAAAAAAAAAAAILAAAAAAAAAwsAAAAAAAAAAAAAAwsAAAAAAAAECwAAAAAAAAAAAAAECwAAAAAAAAULAAAAAAAAAAAAAAULAAAAAAAABgsAAAAAAAAAAAAABgsAAAAAAAAHCwAAAAAAAAAAAAAHCwAAAAAAAAgLAAAAAAAAAAAAAAgLAAAAAAAACQsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9AoAAAAAAAD0CgAAAAAAAAAAAAAAAPC/"
				],
				[
					1834,
					1,
					"insert",
					{
						"characters": "slice"
					},
					"BQAAAAkLAAAAAAAACgsAAAAAAAAAAAAACgsAAAAAAAALCwAAAAAAAAAAAAALCwAAAAAAAAwLAAAAAAAAAAAAAAwLAAAAAAAADQsAAAAAAAAAAAAADQsAAAAAAAAOCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACQsAAAAAAAAJCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1835,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAA4LAAAAAAAAEAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADgsAAAAAAAAOCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1836,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AQAAAA8LAAAAAAAAEAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADwsAAAAAAAAPCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1838,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAABELAAAAAAAAEgsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEQsAAAAAAAARCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1845,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAALAKAAAAAAAAsQoAAAAAAAAAAAAAsQoAAAAAAAC7CgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsAoAAAAAAACwCgAAAAAAAAAAAAAAUHBA"
				],
				[
					1849,
					1,
					"cut",
					null,
					"AQAAAMoKAAAAAAAAygoAAAAAAAASAAAAQXJndW1lbnRJcygnZmlsZScp",
					"AQAAAAAAAAABAAAAygoAAAAAAADcCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1853,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAKUKAAAAAAAApgoAAAAAAAAAAAAApgoAAAAAAACwCgAAAAAAAAAAAAC8CgAAAAAAALwKAAAAAAAACgAAACAgICAgICAgICA",
					"AQAAAAAAAAABAAAApQoAAAAAAAClCgAAAAAAAAAAAAAAgFZA"
				],
				[
					1855,
					1,
					"insert",
					{
						"characters": "const"
					},
					"BQAAAKUKAAAAAAAApgoAAAAAAAAAAAAApgoAAAAAAACnCgAAAAAAAAAAAACnCgAAAAAAAKgKAAAAAAAAAAAAAKgKAAAAAAAAqQoAAAAAAAAAAAAAqQoAAAAAAACqCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApQoAAAAAAAClCgAAAAAAAAAAAAAAgFZA"
				],
				[
					1856,
					1,
					"insert",
					{
						"characters": " isFile="
					},
					"CAAAAKoKAAAAAAAAqwoAAAAAAAAAAAAAqwoAAAAAAACsCgAAAAAAAAAAAACsCgAAAAAAAK0KAAAAAAAAAAAAAK0KAAAAAAAArgoAAAAAAAAAAAAArgoAAAAAAACvCgAAAAAAAAAAAACvCgAAAAAAALAKAAAAAAAAAAAAALAKAAAAAAAAsQoAAAAAAAAAAAAAsQoAAAAAAACyCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqgoAAAAAAACqCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1857,
					1,
					"paste",
					null,
					"AQAAALIKAAAAAAAAxAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsgoAAAAAAACyCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1858,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAMQKAAAAAAAAxQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxAoAAAAAAADECgAAAAAAAAAAAAAAAPC/"
				],
				[
					1861,
					1,
					"insert",
					{
						"characters": "isFile"
					},
					"BgAAAOsKAAAAAAAA7AoAAAAAAAAAAAAA7AoAAAAAAADtCgAAAAAAAAAAAADtCgAAAAAAAO4KAAAAAAAAAAAAAO4KAAAAAAAA7woAAAAAAAAAAAAA7woAAAAAAADwCgAAAAAAAAAAAADwCgAAAAAAAPEKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6woAAAAAAADrCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1868,
					1,
					"insert",
					{
						"characters": "\n\nif"
					},
					"BwAAAHYLAAAAAAAAdwsAAAAAAAAAAAAAdwsAAAAAAACBCwAAAAAAAAAAAACBCwAAAAAAAIILAAAAAAAAAAAAAIILAAAAAAAAjAsAAAAAAAAAAAAAdwsAAAAAAAB3CwAAAAAAAAoAAAAgICAgICAgICAgggsAAAAAAACDCwAAAAAAAAAAAACDCwAAAAAAAIQLAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdgsAAAAAAAB2CwAAAAAAAAAAAAAAAPC/"
				],
				[
					1869,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAIQLAAAAAAAAhgsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhAsAAAAAAACECwAAAAAAAAAAAAAAAPC/"
				],
				[
					1870,
					1,
					"insert",
					{
						"characters": "!isFile"
					},
					"BwAAAIULAAAAAAAAhgsAAAAAAAAAAAAAhgsAAAAAAACHCwAAAAAAAAAAAACHCwAAAAAAAIgLAAAAAAAAAAAAAIgLAAAAAAAAiQsAAAAAAAAAAAAAiQsAAAAAAACKCwAAAAAAAAAAAACKCwAAAAAAAIsLAAAAAAAAAAAAAIsLAAAAAAAAjAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhQsAAAAAAACFCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1872,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAI0LAAAAAAAAjgsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjQsAAAAAAACNCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1873,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAI4LAAAAAAAAkAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjgsAAAAAAACOCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1874,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAI8LAAAAAAAAkAsAAAAAAAAAAAAAkAsAAAAAAACaCwAAAAAAAAAAAACaCwAAAAAAAJsLAAAAAAAAAAAAAJsLAAAAAAAApQsAAAAAAAAAAAAAkAsAAAAAAACQCwAAAAAAAAoAAAAgICAgICAgICAgkAsAAAAAAACcCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjwsAAAAAAACPCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1875,
					1,
					"insert",
					{
						"characters": "arg="
					},
					"BAAAAJwLAAAAAAAAnQsAAAAAAAAAAAAAnQsAAAAAAACeCwAAAAAAAAAAAACeCwAAAAAAAJ8LAAAAAAAAAAAAAJ8LAAAAAAAAoAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnAsAAAAAAACcCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1876,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKALAAAAAAAAoQsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoAsAAAAAAACgCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1877,
					1,
					"left_delete",
					null,
					"AQAAAKALAAAAAAAAoAsAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAoQsAAAAAAAChCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1878,
					1,
					"insert",
					{
						"characters": "opt+arg;"
					},
					"CAAAAKALAAAAAAAAoQsAAAAAAAAAAAAAoQsAAAAAAACiCwAAAAAAAAAAAACiCwAAAAAAAKMLAAAAAAAAAAAAAKMLAAAAAAAApAsAAAAAAAAAAAAApAsAAAAAAAClCwAAAAAAAAAAAAClCwAAAAAAAKYLAAAAAAAAAAAAAKYLAAAAAAAApwsAAAAAAAAAAAAApwsAAAAAAACoCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoAsAAAAAAACgCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1880,
					1,
					"left_delete",
					null,
					"AQAAAD4LAAAAAAAAPgsAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAPwsAAAAAAAA/CwAAAAAAAAAAAAAAAGtA"
				],
				[
					1883,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAD4LAAAAAAAAPwsAAAAAAAAAAAAAPwsAAAAAAABJCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPgsAAAAAAAA+CwAAAAAAAAAAAAAAwFhA"
				],
				[
					1889,
					1,
					"left_delete",
					null,
					"AgAAAL4LAAAAAAAAvgsAAAAAAAABAAAACj8LAAAAAAAAPwsAAAAAAAAKAAAAICAgICAgICAgIA",
					"AQAAAAAAAAABAAAAvwsAAAAAAAC/CwAAAAAAAAAAAAAAgFZA"
				],
				[
					1893,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAL4LAAAAAAAAvwsAAAAAAAAAAAAAvwsAAAAAAADHCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvgsAAAAAAAC+CwAAAAAAAAAAAAAAwFhA"
				],
				[
					1898,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAxwsAAAAAAADHCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1918,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAMYKAAAAAAAAyAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxgoAAAAAAADGCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1919,
					1,
					"insert",
					{
						"characters": "arg"
					},
					"AwAAAMcKAAAAAAAAyAoAAAAAAAAAAAAAyAoAAAAAAADJCgAAAAAAAAAAAADJCgAAAAAAAMoKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxwoAAAAAAADHCgAAAAAAAAAAAAAAAPC/"
				],
				[
					1973,
					1,
					"insert",
					{
						"characters": "{"
					},
					"AQAAAGwLAAAAAAAAbQsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbAsAAAAAAABsCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1974,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAAG0LAAAAAAAAbgsAAAAAAAAAAAAAbgsAAAAAAAB4CwAAAAAAAAAAAABuCwAAAAAAAG4LAAAAAAAACgAAACAgICAgICAgICBuCwAAAAAAAHoLAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbQsAAAAAAABtCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1976,
					1,
					"insert",
					{
						"characters": "\n}"
					},
					"BQAAAJILAAAAAAAAkwsAAAAAAAAAAAAAkwsAAAAAAACfCwAAAAAAAAAAAACfCwAAAAAAAKALAAAAAAAAAAAAAJMLAAAAAAAAkwsAAAAAAAAMAAAAICAgICAgICAgICAgkwsAAAAAAACdCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkgsAAAAAAACSCwAAAAAAAP///////+9/"
				],
				[
					1981,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAAHkLAAAAAAAAegsAAAAAAAAAAAAAegsAAAAAAAB7CwAAAAAAAAAAAAB7CwAAAAAAAHwLAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeQsAAAAAAAB5CwAAAAAAAAAAAAAAwFhA"
				],
				[
					1982,
					1,
					"insert",
					{
						"characters": " new"
					},
					"BAAAAHwLAAAAAAAAfQsAAAAAAAAAAAAAfQsAAAAAAAB+CwAAAAAAAAAAAAB+CwAAAAAAAH8LAAAAAAAAAAAAAH8LAAAAAAAAgAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfAsAAAAAAAB8CwAAAAAAAAAAAAAAAPC/"
				],
				[
					1983,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAIALAAAAAAAAgQsAAAAAAAAAAAAAgQsAAAAAAACMCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgAsAAAAAAACACwAAAAAAAAAAAAAAAPC/"
				],
				[
					1984,
					7,
					"left_delete",
					null,
					"BwAAAIsLAAAAAAAAiwsAAAAAAAABAAAAIIkLAAAAAAAAiQsAAAAAAAACAAAAICCHCwAAAAAAAIcLAAAAAAAAAgAAACAghQsAAAAAAACFCwAAAAAAAAIAAAAgIIMLAAAAAAAAgwsAAAAAAAACAAAAICCBCwAAAAAAAIELAAAAAAAAAgAAACAggAsAAAAAAACACwAAAAAAAAEAAAAK",
					"AQAAAAAAAAABAAAAjAsAAAAAAACMCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1985,
					1,
					"right_delete",
					null,
					"AQAAAIALAAAAAAAAgAsAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAgAsAAAAAAACACwAAAAAAAAAAAAAAAPC/"
				],
				[
					1987,
					1,
					"insert",
					{
						"characters": "\n\narg=newarg;"
					},
					"EAAAAJgLAAAAAAAAmQsAAAAAAAAAAAAAmQsAAAAAAACkCwAAAAAAAAAAAACkCwAAAAAAAKULAAAAAAAAAAAAAKULAAAAAAAAsAsAAAAAAAAAAAAAmQsAAAAAAACZCwAAAAAAAAsAAAAgICAgICAgICAgIKULAAAAAAAApgsAAAAAAAAAAAAApgsAAAAAAACnCwAAAAAAAAAAAACnCwAAAAAAAKgLAAAAAAAAAAAAAKgLAAAAAAAAqQsAAAAAAAAAAAAAqQsAAAAAAACqCwAAAAAAAAAAAACqCwAAAAAAAKsLAAAAAAAAAAAAAKsLAAAAAAAArAsAAAAAAAAAAAAArAsAAAAAAACtCwAAAAAAAAAAAACtCwAAAAAAAK4LAAAAAAAAAAAAAK4LAAAAAAAArwsAAAAAAAAAAAAArwsAAAAAAACwCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmAsAAAAAAACYCwAAAAAAAP///////+9/"
				],
				[
					1989,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAJkLAAAAAAAAmgsAAAAAAAAAAAAAmgsAAAAAAACbCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmQsAAAAAAACZCwAAAAAAAAAAAAAAwGhA"
				],
				[
					1991,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AgAAAJoLAAAAAAAAmwsAAAAAAAAAAAAAmwsAAAAAAACcCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmgsAAAAAAACaCwAAAAAAAAAAAAAAAAAA"
				],
				[
					1992,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJwLAAAAAAAAngsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnAsAAAAAAACcCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1993,
					1,
					"insert",
					{
						"characters": "newarg.endsWith"
					},
					"DwAAAJ0LAAAAAAAAngsAAAAAAAAAAAAAngsAAAAAAACfCwAAAAAAAAAAAACfCwAAAAAAAKALAAAAAAAAAAAAAKALAAAAAAAAoQsAAAAAAAAAAAAAoQsAAAAAAACiCwAAAAAAAAAAAACiCwAAAAAAAKMLAAAAAAAAAAAAAKMLAAAAAAAApAsAAAAAAAAAAAAApAsAAAAAAAClCwAAAAAAAAAAAAClCwAAAAAAAKYLAAAAAAAAAAAAAKYLAAAAAAAApwsAAAAAAAAAAAAApwsAAAAAAACoCwAAAAAAAAAAAACoCwAAAAAAAKkLAAAAAAAAAAAAAKkLAAAAAAAAqgsAAAAAAAAAAAAAqgsAAAAAAACrCwAAAAAAAAAAAACrCwAAAAAAAKwLAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnQsAAAAAAACdCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1994,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAKwLAAAAAAAArgsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArAsAAAAAAACsCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1995,
					1,
					"insert",
					{
						"characters": "arg"
					},
					"AwAAAK0LAAAAAAAArgsAAAAAAAAAAAAArgsAAAAAAACvCwAAAAAAAAAAAACvCwAAAAAAALALAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArQsAAAAAAACtCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1997,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAALILAAAAAAAAswsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsgsAAAAAAACyCwAAAAAAAAAAAAAAAPC/"
				],
				[
					1998,
					1,
					"left_delete",
					null,
					"AQAAALILAAAAAAAAsgsAAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAAswsAAAAAAACzCwAAAAAAAAAAAAAAAPC/"
				],
				[
					2003,
					1,
					"insert",
					{
						"characters": "!"
					},
					"AQAAAJ0LAAAAAAAAngsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnQsAAAAAAACdCwAAAAAAAAAAAAAAAPC/"
				],
				[
					2006,
					1,
					"left_delete",
					null,
					"AQAAALMLAAAAAAAAswsAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAtAsAAAAAAAC0CwAAAAAAAAAAAAAAAPC/"
				],
				[
					2019,
					2,
					"delete_blank_lines",
					{
						"surplus": false
					},
					"AgAAAJoKAAAAAAAAHQwAAAAAAACJAQAACiAgICAgICAgICBjb25zdCBpc0ZpbGUgPSBBcmd1bWVudElzKCdmaWxlJykoYXJnKTsKICAgICAgICAgIGxldCBvcHQgPSAnJzsKCiAgICAgICAgICBpZighaXNGaWxlKSB7CiAgICAgICAgICAgIG9wdCA9IGFyZy5zbGljZSgwLCAyKTsKICAgICAgICAgICAgYXJnID0gYXJnLnNsaWNlKDIpOwogICAgICAgICAgfQoKICAgICAgICAgIGlmKGlzQWJzb2x1dGUoYXJnKSkgewogICAgICAgICAgIGxldCBuZXdhcmcgPSByZWxhdGl2ZSh0bywgYXJnKTsKCmlmKCFuZXdhcmcuZW5kc1dpdGgoYXJnKSkKICAgICAgICAgICBhcmc9bmV3YXJnOwogICAgICAgICAgfQoKICAgICAgICAgIGlmKCFpc0ZpbGUpIHsKICAgICAgICAgICAgYXJnID0gb3B0ICsgYXJnOwogICAgICAgICAgfQogICAgICAgIH0KmgoAAAAAAAAdDAAAAAAAAIMBAAAgICAgICAgICAgY29uc3QgaXNGaWxlID0gQXJndW1lbnRJcygnZmlsZScpKGFyZyk7CiAgICAgICAgICBsZXQgb3B0ID0gJyc7CiAgICAgICAgICBpZighaXNGaWxlKSB7CiAgICAgICAgICAgIG9wdCA9IGFyZy5zbGljZSgwLCAyKTsKICAgICAgICAgICAgYXJnID0gYXJnLnNsaWNlKDIpOwogICAgICAgICAgfQogICAgICAgICAgaWYoaXNBYnNvbHV0ZShhcmcpKSB7CiAgICAgICAgICAgbGV0IG5ld2FyZyA9IHJlbGF0aXZlKHRvLCBhcmcpOwppZighbmV3YXJnLmVuZHNXaXRoKGFyZykpCiAgICAgICAgICAgYXJnPW5ld2FyZzsKICAgICAgICAgIH0KICAgICAgICAgIGlmKCFpc0ZpbGUpIHsKICAgICAgICAgICAgYXJnID0gb3B0ICsgYXJnOwogICAgICAgICAgfQogICAgICAgIH0",
					"AQAAAAAAAAABAAAAmgoAAAAAAAAjDAAAAAAAAAAAAAAAAPC/"
				],
				[
					2023,
					1,
					"left_delete",
					null,
					"AQAAAOkLAAAAAAAA6QsAAAAAAAACAAAAewo",
					"AQAAAAAAAAABAAAA6QsAAAAAAADrCwAAAAAAAAAAAAAAAPC/"
				],
				[
					2026,
					7,
					"left_delete",
					null,
					"BwAAABAMAAAAAAAAEAwAAAAAAAABAAAAfQ4MAAAAAAAADgwAAAAAAAACAAAAICAMDAAAAAAAAAwMAAAAAAAAAgAAACAgCgwAAAAAAAAKDAAAAAAAAAIAAAAgIAgMAAAAAAAACAwAAAAAAAACAAAAICAGDAAAAAAAAAYMAAAAAAAAAgAAACAgBQwAAAAAAAAFDAAAAAAAAAEAAAAK",
					"AQAAAAAAAAABAAAAEQwAAAAAAAARDAAAAAAAAAAAAAAAAPC/"
				],
				[
					2031,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAANgLAAAAAAAA2QsAAAAAAAAAAAAA2QsAAAAAAADZCwAAAAAAABMAAAAgICAgIGlmKCFpc0ZpbGUpICAg",
					"AQAAAAAAAAABAAAA6wsAAAAAAADYCwAAAAAAAAAAAAAAAPC/"
				],
				[
					2034,
					1,
					"cut",
					null,
					"AQAAAOkLAAAAAAAA6QsAAAAAAAAJAAAAb3B0ICsgYXJn",
					"AQAAAAAAAAABAAAA6QsAAAAAAADyCwAAAAAAAAAAAAAAAPC/"
				],
				[
					2035,
					1,
					"paste",
					null,
					"AQAAAOkLAAAAAAAA8gsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6QsAAAAAAADpCwAAAAAAAAAAAAAAAPC/"
				],
				[
					2047,
					1,
					"cut",
					null,
					"AQAAANYKAAAAAAAA1goAAAAAAAAYAAAAbGV0IG9wdCA9ICcnOwogICAgICAgICAg",
					"AQAAAAAAAAABAAAA1goAAAAAAADuCgAAAAAAAAAAAAAAgFZA"
				],
				[
					2050,
					1,
					"paste",
					null,
					"AQAAAH8KAAAAAAAAlwoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfwoAAAAAAAB/CgAAAAAAAAAAAAAAAFJA"
				],
				[
					2051,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJcKAAAAAAAAmAoAAAAAAAAAAAAAmAoAAAAAAACiCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlwoAAAAAAACXCgAAAAAAAAAAAAAAAPC/"
				],
				[
					2053,
					6,
					"left_delete",
					null,
					"BgAAAJUKAAAAAAAAlQoAAAAAAAACAAAAICCTCgAAAAAAAJMKAAAAAAAAAgAAACAgkQoAAAAAAACRCgAAAAAAAAIAAAAgII8KAAAAAAAAjwoAAAAAAAACAAAAICCNCgAAAAAAAI0KAAAAAAAAAgAAACAgjAoAAAAAAACMCgAAAAAAAAEAAAAK",
					"AQAAAAAAAAABAAAAlwoAAAAAAACXCgAAAAAAAAAAAAAAgFZA"
				],
				[
					2060,
					1,
					"cut",
					null,
					"AQAAAOkLAAAAAAAA6QsAAAAAAAAJAAAAb3B0ICsgYXJn",
					"AQAAAAAAAAABAAAA6QsAAAAAAADyCwAAAAAAAAAAAAAAAPC/"
				],
				[
					2063,
					3,
					"left_delete",
					null,
					"AwAAAAYMAAAAAAAABgwAAAAAAAABAAAAZwUMAAAAAAAABQwAAAAAAAABAAAAcgQMAAAAAAAABAwAAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAABwwAAAAAAAAHDAAAAAAAAAAAAAAAAPC/"
				],
				[
					2064,
					1,
					"paste",
					null,
					"AQAAAAQMAAAAAAAADQwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABAwAAAAAAAAEDAAAAAAAAAAAAAAAAPC/"
				],
				[
					2071,
					1,
					"right_delete",
					null,
					"AQAAANMLAAAAAAAA0wsAAAAAAAAYAAAAICAgICAgICAgICAgICAgIGFyZyA9IDsK",
					"AQAAAAAAAAABAAAA0wsAAAAAAADrCwAAAAAAAAAAAAAAAAAA"
				],
				[
					2074,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA0wsAAAAAAADTCwAAAAAAAAAAAAAAAPC/"
				],
				[
					2124,
					1,
					"insert",
					{
						"characters": "\n//"
					},
					"BgAAAHMJAAAAAAAAdAkAAAAAAAAAAAAAdAkAAAAAAAB4CQAAAAAAAAAAAAB0CQAAAAAAAHQJAAAAAAAABAAAACAgICB0CQAAAAAAAHoJAAAAAAAAAAAAAHoJAAAAAAAAewkAAAAAAAAAAAAAewkAAAAAAAB8CQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcwkAAAAAAABzCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2127,
					2,
					"insert_snippet",
					{
						"contents": "\n${TM_CURRENT_LINE/^\\s*((?:#|\\/\\/[\\/!]?)\\s*).*/$1/}"
					},
					"AgAAAM0JAAAAAAAA1gkAAAAAAAAAAAAA1gkAAAAAAADfCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzQkAAAAAAADNCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2128,
					2,
					"left_delete",
					null,
					"AgAAAN4JAAAAAAAA3gkAAAAAAAABAAAAL90JAAAAAAAA3QkAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAA3wkAAAAAAADfCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2130,
					2,
					"right_delete",
					null,
					"AgAAANQJAAAAAAAA1AkAAAAAAAABAAAAL9QJAAAAAAAA1AkAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAA1AkAAAAAAADUCQAAAAAAAAAAAAAAAEtA"
				],
				[
					2131,
					1,
					"paste",
					null,
					"AQAAANQJAAAAAAAAggsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1AkAAAAAAADUCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2168,
					1,
					"insert",
					{
						"characters": "this.absoluet"
					},
					"DgAAAAMLAAAAAAAABAsAAAAAAAAAAAAABAsAAAAAAAAECwAAAAAAAAgAAAByZWxhdGl2ZQQLAAAAAAAABQsAAAAAAAAAAAAABQsAAAAAAAAGCwAAAAAAAAAAAAAGCwAAAAAAAAcLAAAAAAAAAAAAAAcLAAAAAAAACAsAAAAAAAAAAAAACAsAAAAAAAAJCwAAAAAAAAAAAAAJCwAAAAAAAAoLAAAAAAAAAAAAAAoLAAAAAAAACwsAAAAAAAAAAAAACwsAAAAAAAAMCwAAAAAAAAAAAAAMCwAAAAAAAA0LAAAAAAAAAAAAAA0LAAAAAAAADgsAAAAAAAAAAAAADgsAAAAAAAAPCwAAAAAAAAAAAAAPCwAAAAAAABALAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAwsAAAAAAAALCwAAAAAAAAAAAAAAAPC/"
				],
				[
					2169,
					2,
					"left_delete",
					null,
					"AgAAAA8LAAAAAAAADwsAAAAAAAABAAAAdA4LAAAAAAAADgsAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAEAsAAAAAAAAQCwAAAAAAAAAAAAAAAPC/"
				],
				[
					2170,
					1,
					"insert",
					{
						"characters": "tePath"
					},
					"BgAAAA4LAAAAAAAADwsAAAAAAAAAAAAADwsAAAAAAAAQCwAAAAAAAAAAAAAQCwAAAAAAABELAAAAAAAAAAAAABELAAAAAAAAEgsAAAAAAAAAAAAAEgsAAAAAAAATCwAAAAAAAAAAAAATCwAAAAAAABQLAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADgsAAAAAAAAOCwAAAAAAAAAAAAAAAPC/"
				],
				[
					2177,
					3,
					"left_delete",
					null,
					"AwAAABcLAAAAAAAAFwsAAAAAAAABAAAALBYLAAAAAAAAFgsAAAAAAAABAAAAbxULAAAAAAAAFQsAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAAGAsAAAAAAAAYCwAAAAAAAAAAAAAAAPC/"
				],
				[
					2178,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAABULAAAAAAAAFgsAAAAAAAAAAAAAFgsAAAAAAAAiCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFQsAAAAAAAAVCwAAAAAAAAAAAAAAAPC/"
				],
				[
					2179,
					1,
					"right_delete",
					null,
					"AQAAACILAAAAAAAAIgsAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAIgsAAAAAAAAiCwAAAAAAAAAAAAAAAPC/"
				],
				[
					2184,
					1,
					"cut",
					null,
					"AQAAABULAAAAAAAAFQsAAAAAAAANAAAACiAgICAgICAgICAgIA",
					"AQAAAAAAAAABAAAAIgsAAAAAAAAVCwAAAAAAAAAAAAAAAPC/"
				],
				[
					2210,
					1,
					"insert",
					{
						"characters": "!"
					},
					"AQAAANcKAAAAAAAA2AoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1woAAAAAAADXCgAAAAAAAAAAAAAAAPC/"
				],
				[
					2222,
					1,
					"right_delete",
					null,
					"AQAAABwLAAAAAAAAHAsAAAAAAAA0AAAAICAgICAgICAgICAgaWYoIW5ld2FyZy5lbmRzV2l0aChhcmcpKSBhcmcgPSBuZXdhcmc7Cg",
					"AQAAAAAAAAABAAAAHAsAAAAAAABQCwAAAAAAAAAAAAAAAAAA"
				],
				[
					2227,
					1,
					"insert",
					{
						"characters": "arg"
					},
					"BAAAAPUKAAAAAAAA9goAAAAAAAAAAAAA9goAAAAAAAD2CgAAAAAAAA0AAAAgIGxldCBuZXdhcmcg9goAAAAAAAD3CgAAAAAAAAAAAAD3CgAAAAAAAPgKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAgsAAAAAAAD1CgAAAAAAAAAAAAAAAPC/"
				],
				[
					2230,
					1,
					"left_delete",
					null,
					"AQAAAOkKAAAAAAAA6QoAAAAAAAABAAAAew",
					"AQAAAAAAAAABAAAA6goAAAAAAADqCgAAAAAAAAAAAAAAAPC/"
				],
				[
					2235,
					7,
					"left_delete",
					null,
					"BwAAABsLAAAAAAAAGwsAAAAAAAABAAAAfRkLAAAAAAAAGQsAAAAAAAACAAAAICAXCwAAAAAAABcLAAAAAAAAAgAAACAgFQsAAAAAAAAVCwAAAAAAAAIAAAAgIBMLAAAAAAAAEwsAAAAAAAACAAAAICARCwAAAAAAABELAAAAAAAAAgAAACAgEAsAAAAAAAAQCwAAAAAAAAEAAAAK",
					"AQAAAAAAAAABAAAAHAsAAAAAAAAcCwAAAAAAAAAAAAAAUHBA"
				],
				[
					2248,
					2,
					"right_delete",
					null,
					"AgAAAHQJAAAAAAAAdAkAAAAAAABaAAAAICAgICAgLy90aGlzLmFyZ3YubWFwKChhcmcsIGkpID0+IChpID4gMCAmJiBwcmVkKGFyZywgaSkgPyB0aGlzLmFic29sdXRlUGF0aChhcmcpIDogYXJnKSkKdAkAAAAAAAB0CQAAAAAAAAIAAAAgIA",
					"AQAAAAAAAAABAAAAdAkAAAAAAADOCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2251,
					2,
					"right_delete",
					null,
					"AgAAAHQJAAAAAAAAdAkAAAAAAAACAAAAICB0CQAAAAAAAHQJAAAAAAAAAgAAACAg",
					"AQAAAAAAAAABAAAAdAkAAAAAAAB0CQAAAAAAAAAAAAAAAPC/"
				],
				[
					2255,
					1,
					"cut",
					null,
					"AQAAAHQJAAAAAAAAdAkAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAdAkAAAAAAAB1CQAAAAAAAAAAAAAAAAAA"
				],
				[
					2266,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAdAkAAAAAAAB0CQAAAAAAAAAAAAAAAPC/"
				],
				[
					2274,
					1,
					"insert",
					{
						"characters": "const"
					},
					"BgAAABkJAAAAAAAAGgkAAAAAAAAAAAAAGgkAAAAAAAAaCQAAAAAAAAMAAABsZXQaCQAAAAAAABsJAAAAAAAAAAAAABsJAAAAAAAAHAkAAAAAAAAAAAAAHAkAAAAAAAAdCQAAAAAAAAAAAAAdCQAAAAAAAB4JAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGQkAAAAAAAAcCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2284,
					1,
					"paste",
					null,
					"AgAAAPYKAAAAAAAA+woAAAAAAAAAAAAA+woAAAAAAAD7CgAAAAAAAAMAAABsZXQ",
					"AQAAAAAAAAABAAAA9goAAAAAAAD5CgAAAAAAAAAAAAAAAPC/"
				],
				[
					2293,
					1,
					"paste",
					null,
					"AgAAAI0MAAAAAAAAkgwAAAAAAAAAAAAAkgwAAAAAAACSDAAAAAAAAAMAAABsZXQ",
					"AQAAAAAAAAABAAAAjQwAAAAAAACQDAAAAAAAAAAAAAAAAPC/"
				],
				[
					2319,
					1,
					"cut",
					null,
					"AQAAAOALAAAAAAAA4AsAAAAAAAAYAAAAIEFyZ3VtZW50SXMoJ2ZpbGUnKShhcmcp",
					"AQAAAAAAAAABAAAA4AsAAAAAAAD4CwAAAAAAAAAAAAAAAPC/"
				],
				[
					2326,
					1,
					"paste",
					null,
					"AgAAAPALAAAAAAAACAwAAAAAAAAAAAAACAwAAAAAAAAIDAAAAAAAAAYAAABpc0ZpbGU",
					"AQAAAAAAAAABAAAA8AsAAAAAAAD2CwAAAAAAAAAAAAAAAPC/"
				],
				[
					2335,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAMgLAAAAAAAAyQsAAAAAAAAAAAAAyQsAAAAAAADJCwAAAAAAABoAAAAgICAgICAgICAgY29uc3QgaXNGaWxlID07Cg",
					"AQAAAAAAAAABAAAAyAsAAAAAAADiCwAAAAAAAAAAAAAAAPC/"
				],
				[
					2342,
					1,
					"cut",
					null,
					"AQAAAOoJAAAAAAAA6gkAAAAAAAAYAAAAIEFyZ3VtZW50SXMoJ2ZpbGUnKShhcmcp",
					"AQAAAAAAAAABAAAA6gkAAAAAAAACCgAAAAAAAAAAAAAAAPC/"
				],
				[
					2347,
					1,
					"paste",
					null,
					"AgAAAPoJAAAAAAAAEgoAAAAAAAAAAAAAEgoAAAAAAAASCgAAAAAAAAYAAABpc0ZpbGU",
					"AQAAAAAAAAABAAAA+gkAAAAAAAAACgAAAAAAAAAAAAAAAPC/"
				],
				[
					2354,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAANIJAAAAAAAA0wkAAAAAAAAAAAAA0wkAAAAAAADTCQAAAAAAABoAAAAgICAgICAgICAgY29uc3QgaXNGaWxlID07Cg",
					"AQAAAAAAAAABAAAA0gkAAAAAAADsCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2361,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA0wkAAAAAAADTCQAAAAAAAAAAAAAAAPC/"
				],
				[
					2373,
					1,
					"cut",
					null,
					"AQAAABoBAAAAAAAAGgEAAAAAAAA0AAAAYWJzb2x1dGUodHlwZW9mIHdvcmtEaXIgPT0gJ3N0cmluZycgPyB3b3JrRGlyIDogJy4nKQ",
					"AQAAAAAAAAABAAAAGgEAAAAAAABOAQAAAAAAAAAAAAAAAPC/"
				],
				[
					2380,
					1,
					"insert",
					{
						"characters": "workDir:"
					},
					"CAAAAIUBAAAAAAAAhgEAAAAAAAAAAAAAhgEAAAAAAACHAQAAAAAAAAAAAACHAQAAAAAAAIgBAAAAAAAAAAAAAIgBAAAAAAAAiQEAAAAAAAAAAAAAiQEAAAAAAACKAQAAAAAAAAAAAACKAQAAAAAAAIsBAAAAAAAAAAAAAIsBAAAAAAAAjAEAAAAAAAAAAAAAjAEAAAAAAACNAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhQEAAAAAAACFAQAAAAAAAAAAAAAAAPC/"
				],
				[
					2381,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAI0BAAAAAAAAjgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjQEAAAAAAACNAQAAAAAAAAAAAAAAAPC/"
				],
				[
					2382,
					1,
					"paste",
					null,
					"AQAAAI4BAAAAAAAAwgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjgEAAAAAAACOAQAAAAAAAAAAAAAAAPC/"
				],
				[
					2383,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAMIBAAAAAAAAwwEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwgEAAAAAAADCAQAAAAAAAAAAAAAAAPC/"
				],
				[
					2384,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMMBAAAAAAAAxAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwwEAAAAAAADDAQAAAAAAAAAAAAAAAPC/"
				],
				[
					2389,
					1,
					"left_delete",
					null,
					"AQAAAMMBAAAAAAAAwwEAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAxAEAAAAAAADEAQAAAAAAAAAAAAAAAPC/"
				],
				[
					2396,
					1,
					"right_delete",
					null,
					"AQAAAAcBAAAAAAAABwEAAAAAAAAVAAAAICAgIHRoaXMud29ya0RpciA9IDsK",
					"AQAAAAAAAAABAAAABwEAAAAAAAAcAQAAAAAAAAAAAAAAAAAA"
				],
				[
					2564,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					2646,
					1,
					"insert",
					{
						"characters": "cnst"
					},
					"BAAAAFIaAAAAAAAAUxoAAAAAAAAAAAAAUxoAAAAAAABUGgAAAAAAAAAAAABUGgAAAAAAAFUaAAAAAAAAAAAAAFUaAAAAAAAAVhoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUhoAAAAAAABSGgAAAAAAAAAAAAAAAPC/"
				],
				[
					2649,
					3,
					"left_delete",
					null,
					"AwAAAFUaAAAAAAAAVRoAAAAAAAABAAAAdFQaAAAAAAAAVBoAAAAAAAABAAAAc1MaAAAAAAAAUxoAAAAAAAABAAAAbg",
					"AQAAAAAAAAABAAAAVhoAAAAAAABWGgAAAAAAAAAAAAAAwFhA"
				],
				[
					2650,
					1,
					"insert",
					{
						"characters": "onst"
					},
					"BAAAAFMaAAAAAAAAVBoAAAAAAAAAAAAAVBoAAAAAAABVGgAAAAAAAAAAAABVGgAAAAAAAFYaAAAAAAAAAAAAAFYaAAAAAAAAVxoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUxoAAAAAAABTGgAAAAAAAAAAAAAAAPC/"
				],
				[
					2654,
					1,
					"right_delete",
					null,
					"AQAAAD8aAAAAAAAAPxoAAAAAAAASAAAAbGV0IG91dHB1dCwKICAgICAg",
					"AQAAAAAAAAABAAAAPxoAAAAAAABRGgAAAAAAAAAAAAAAAEtA"
				],
				[
					2656,
					1,
					"insert",
					{
						"characters": "cnst"
					},
					"BAAAAH4aAAAAAAAAfxoAAAAAAAAAAAAAfxoAAAAAAACAGgAAAAAAAAAAAACAGgAAAAAAAIEaAAAAAAAAAAAAAIEaAAAAAAAAghoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfhoAAAAAAAB+GgAAAAAAAAAAAAAAAEtA"
				],
				[
					2657,
					4,
					"left_delete",
					null,
					"BAAAAIEaAAAAAAAAgRoAAAAAAAABAAAAdIAaAAAAAAAAgBoAAAAAAAABAAAAc38aAAAAAAAAfxoAAAAAAAABAAAAbn4aAAAAAAAAfhoAAAAAAAABAAAAYw",
					"AQAAAAAAAAABAAAAghoAAAAAAACCGgAAAAAAAAAAAAAAAPC/"
				],
				[
					2658,
					1,
					"insert",
					{
						"characters": "const"
					},
					"BQAAAH4aAAAAAAAAfxoAAAAAAAAAAAAAfxoAAAAAAACAGgAAAAAAAAAAAACAGgAAAAAAAIEaAAAAAAAAAAAAAIEaAAAAAAAAghoAAAAAAAAAAAAAghoAAAAAAACDGgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfhoAAAAAAAB+GgAAAAAAAAAAAAAAAPC/"
				],
				[
					2659,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIMaAAAAAAAAhBoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgxoAAAAAAACDGgAAAAAAAAAAAAAAAPC/"
				],
				[
					2662,
					1,
					"insert",
					{
						"characters": "return"
					},
					"BwAAAH4aAAAAAAAAfxoAAAAAAAAAAAAAfxoAAAAAAAB/GgAAAAAAAA4AAABjb25zdCBvdXRwdXQgPX8aAAAAAAAAgBoAAAAAAAAAAAAAgBoAAAAAAACBGgAAAAAAAAAAAACBGgAAAAAAAIIaAAAAAAAAAAAAAIIaAAAAAAAAgxoAAAAAAAAAAAAAgxoAAAAAAACEGgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjBoAAAAAAAB+GgAAAAAAAAAAAAAAAEtA"
				],
				[
					2664,
					1,
					"left_delete",
					null,
					"AQAAAHYaAAAAAAAAdhoAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAdxoAAAAAAAB3GgAAAAAAAAAAAAAAAFtA"
				],
				[
					2667,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAALQaAAAAAAAAtRoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtBoAAAAAAAC0GgAAAAAAAAAAAAAAKIFA"
				],
				[
					2676,
					5,
					"left_delete",
					null,
					"BQAAAMoaAAAAAAAAyhoAAAAAAAAkAAAAcmV0dXJuIC8qdGhpcy5hYnNvbHV0ZVBhdGgqLyBvdXRwdXQ7yBoAAAAAAADIGgAAAAAAAAIAAAAgIMYaAAAAAAAAxhoAAAAAAAACAAAAICDEGgAAAAAAAMQaAAAAAAAAAgAAACAgwxoAAAAAAADDGgAAAAAAAAEAAAAK",
					"AQAAAAAAAAABAAAA7hoAAAAAAADKGgAAAAAAAAAAAAAAAEtA"
				],
				[
					2710,
					1,
					"insert",
					{
						"characters": "let"
					},
					"BAAAAEAaAAAAAAAAQRoAAAAAAAAAAAAAQRoAAAAAAABBGgAAAAAAAAUAAABjb25zdEEaAAAAAAAAQhoAAAAAAAAAAAAAQhoAAAAAAABDGgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQBoAAAAAAABFGgAAAAAAAAAAAAAAAPC/"
				],
				[
					2729,
					1,
					"right_delete",
					null,
					"AQAAALIaAAAAAAAAshoAAAAAAAABAAAAMQ",
					"AQAAAAAAAAABAAAAshoAAAAAAACyGgAAAAAAAAAAAAAAAPC/"
				],
				[
					2749,
					1,
					"paste",
					null,
					"AQAAAA4fAAAAAAAATx8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADh8AAAAAAAAOHwAAAAAAAAAAAAAAAPC/"
				],
				[
					2759,
					1,
					"paste",
					null,
					"AgAAAD4fAAAAAAAASR8AAAAAAAAAAAAASR8AAAAAAABJHwAAAAAAAA4AAABDb21waWxlQ29tbWFuZA",
					"AQAAAAAAAAABAAAAPh8AAAAAAABMHwAAAAAAAAAAAAAAAPC/"
				],
				[
					2764,
					1,
					"paste",
					null,
					"AgAAAA4fAAAAAAAAGR8AAAAAAAAAAAAAGR8AAAAAAAAZHwAAAAAAAA4AAABDb21waWxlQ29tbWFuZA",
					"AQAAAAAAAAABAAAADh8AAAAAAAAcHwAAAAAAAAAAAAAAAPC/"
				],
				[
					2767,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAA0fAAAAAAAADh8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADR8AAAAAAAANHwAAAAAAAAAAAAAAAPC/"
				],
				[
					2774,
					1,
					"left_delete",
					null,
					"AQAAALIfAAAAAAAAsh8AAAAAAAApAAAAICAgIFtTeW1ib2wudG9TdHJpbmdUYWddOiAnTGlua0NvbW1hbmQnLAo",
					"AQAAAAAAAAABAAAAsh8AAAAAAADbHwAAAAAAAAAAAAAAAPC/"
				],
				[
					2787,
					1,
					"left_delete",
					null,
					"AQAAANQZAAAAAAAA1BkAAAAAAAAsAAAAICAgIFtTeW1ib2wudG9TdHJpbmdUYWddOiAnQ29tcGlsZUNvbW1hbmQnLAo",
					"AQAAAAAAAAABAAAA1BkAAAAAAAAAGgAAAAAAAAAAAAAAAPC/"
				],
				[
					2838,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAL4ZAAAAAAAAvxkAAAAAAAAAAAAAvxkAAAAAAADBGQAAAAAAAAAAAADBGQAAAAAAAMMZAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvhkAAAAAAAC+GQAAAAAAAAAAAAAAAPC/"
				],
				[
					2839,
					1,
					"paste",
					null,
					"AQAAAMMZAAAAAAAA1xkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwxkAAAAAAADDGQAAAAAAAAAAAAAAAPC/"
				],
				[
					2840,
					1,
					"insert",
					{
						"characters": ",m"
					},
					"AgAAANcZAAAAAAAA2BkAAAAAAAAAAAAA2BkAAAAAAADZGQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1xkAAAAAAADXGQAAAAAAAAAAAAAAAPC/"
				],
				[
					2841,
					2,
					"left_delete",
					null,
					"AgAAANgZAAAAAAAA2BkAAAAAAAABAAAAbdcZAAAAAAAA1xkAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAA2RkAAAAAAADZGQAAAAAAAAAAAAAAAPC/"
				],
				[
					2842,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAANcZAAAAAAAA2BkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1xkAAAAAAADXGQAAAAAAAAAAAAAAAPC/"
				],
				[
					2843,
					1,
					"insert",
					{
						"characters": "  "
					},
					"AgAAANgZAAAAAAAA2RkAAAAAAAAAAAAA2RkAAAAAAADaGQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2BkAAAAAAADYGQAAAAAAAAAAAAAAAPC/"
				],
				[
					2844,
					1,
					"left_delete",
					null,
					"AQAAANkZAAAAAAAA2RkAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAA2hkAAAAAAADaGQAAAAAAAAAAAAAAAPC/"
				],
				[
					2845,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAANkZAAAAAAAA2xkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2RkAAAAAAADZGQAAAAAAAAAAAAAAAPC/"
				],
				[
					2846,
					1,
					"insert",
					{
						"characters": "CompileComma"
					},
					"DAAAANoZAAAAAAAA2xkAAAAAAAAAAAAA2xkAAAAAAADcGQAAAAAAAAAAAADcGQAAAAAAAN0ZAAAAAAAAAAAAAN0ZAAAAAAAA3hkAAAAAAAAAAAAA3hkAAAAAAADfGQAAAAAAAAAAAADfGQAAAAAAAOAZAAAAAAAAAAAAAOAZAAAAAAAA4RkAAAAAAAAAAAAA4RkAAAAAAADiGQAAAAAAAAAAAADiGQAAAAAAAOMZAAAAAAAAAAAAAOMZAAAAAAAA5BkAAAAAAAAAAAAA5BkAAAAAAADlGQAAAAAAAAAAAADlGQAAAAAAAOYZAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2hkAAAAAAADaGQAAAAAAAAAAAAAAAPC/"
				],
				[
					2847,
					1,
					"insert",
					{
						"characters": "nd"
					},
					"AgAAAOYZAAAAAAAA5xkAAAAAAAAAAAAA5xkAAAAAAADoGQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5hkAAAAAAADmGQAAAAAAAAAAAAAAAPC/"
				],
				[
					2849,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAOkZAAAAAAAA6hkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6RkAAAAAAADpGQAAAAAAAAAAAAAAAPC/"
				],
				[
					2854,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAIMbAAAAAAAAhBsAAAAAAAAAAAAAhBsAAAAAAACFGwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgxsAAAAAAACDGwAAAAAAAAAAAAAAAPC/"
				],
				[
					2864,
					1,
					"paste",
					null,
					"AQAAAIEfAAAAAAAArR8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgR8AAAAAAACBHwAAAAAAAAAAAAAAAPC/"
				],
				[
					2876,
					1,
					"paste",
					null,
					"AgAAAJwfAAAAAAAApx8AAAAAAAAAAAAApx8AAAAAAACnHwAAAAAAAA4AAABDb21waWxlQ29tbWFuZA",
					"AQAAAAAAAAABAAAAnB8AAAAAAACqHwAAAAAAAAAAAAAAAPC/"
				],
				[
					2879,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAABEfAAAAAAAAEh8AAAAAAAAAAAAAEh8AAAAAAAATHwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAER8AAAAAAAARHwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"contents": "Searching 15882 files for \"\\[Symbol.toStringTag\\]\" (regex, case sensitive)\n\n~/Projects/plot-cv/convert-imports.js:\n    6  import deep from 'deep';\n    7  \n    8: Object.assign(ReadImport.prototype, { [Symbol.toStringTag]: 'Import' });\n    9  \n   10  function main(...args) {\n\n~/Projects/plot-cv/draw.js:\n   31    for(; e; ) {\n   32      yield e;\n   33:     if(e[Symbol.toStringTag] == 'HTMLDocument' && e[k] == null) e = window;\n   34      else e = e[k];\n   35    }\n\n~/Projects/plot-cv/quickjs.c:\n 40057  static const JSCFunctionListEntry js_array_iterator_proto_funcs[] = {\n 40058      JS_ITERATOR_NEXT_DEF(\"next\", 0, js_array_iterator_next, 0),\n 40059:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Array Iterator\", JS_PROP_CONFIGURABLE),\n 40060  };\n 40061  \n .....\n 42182  static const JSCFunctionListEntry js_string_iterator_proto_funcs[] = {\n 42183      JS_ITERATOR_NEXT_DEF(\"next\", 0, js_string_iterator_next, 0),\n 42184:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"String Iterator\", JS_PROP_CONFIGURABLE),\n 42185  };\n 42186  \n .....\n 42445      JS_CFUNC_DEF(\"imul\", 2, js_math_imul),\n 42446      JS_CFUNC_DEF(\"clz32\", 1, js_math_clz32),\n 42447:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Math\", JS_PROP_CONFIGURABLE),\n 42448      JS_PROP_DOUBLE_DEF(\"E\", 2.718281828459045, 0),\n 42449      JS_PROP_DOUBLE_DEF(\"LN10\", 2.302585092994046, 0),\n .....\n 44041  static const JSCFunctionListEntry js_regexp_string_iterator_proto_funcs[] = {\n 44042      JS_ITERATOR_NEXT_DEF(\"next\", 0, js_regexp_string_iterator_next, 0),\n 44043:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"RegExp String Iterator\", JS_PROP_CONFIGURABLE),\n 44044  };\n 44045  \n .....\n 44748      JS_CFUNC_DEF(\"parse\", 2, js_json_parse),\n 44749      JS_CFUNC_DEF(\"stringify\", 3, js_json_stringify),\n 44750:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"JSON\", JS_PROP_CONFIGURABLE),\n 44751  };\n 44752  \n .....\n 44915      JS_CFUNC_DEF(\"set\", 3, js_reflect_set),\n 44916      JS_CFUNC_DEF(\"setPrototypeOf\", 2, js_reflect_setPrototypeOf),\n 44917:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Reflect\", JS_PROP_CONFIGURABLE),\n 44918  };\n 44919  \n .....\n 45962      // XXX: should have writable: false\n 45963      JS_CFUNC_DEF(\"[Symbol.toPrimitive]\", 1, js_symbol_valueOf),\n 45964:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Symbol\", JS_PROP_CONFIGURABLE),\n 45965      JS_CGETSET_DEF(\"description\", js_symbol_get_description, NULL),\n 45966  };\n .....\n 46785          \"entries\", 0, js_create_map_iterator, (JS_ITERATOR_KIND_KEY_AND_VALUE << 2) | 0),\n 46786      JS_ALIAS_DEF(\"[Symbol.iterator]\", \"entries\"),\n 46787:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Map\", JS_PROP_CONFIGURABLE),\n 46788  };\n 46789  \n 46790  static const JSCFunctionListEntry js_map_iterator_proto_funcs[] = {\n 46791      JS_ITERATOR_NEXT_DEF(\"next\", 0, js_map_iterator_next, 0),\n 46792:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Map Iterator\", JS_PROP_CONFIGURABLE),\n 46793  };\n 46794  \n .....\n 46808                         js_create_map_iterator,\n 46809                         (JS_ITERATOR_KIND_KEY_AND_VALUE << 2) | MAGIC_SET),\n 46810:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Set\", JS_PROP_CONFIGURABLE),\n 46811  };\n 46812  \n 46813  static const JSCFunctionListEntry js_set_iterator_proto_funcs[] = {\n 46814      JS_ITERATOR_NEXT_DEF(\"next\", 0, js_map_iterator_next, MAGIC_SET),\n 46815:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Set Iterator\", JS_PROP_CONFIGURABLE),\n 46816  };\n 46817  \n .....\n 46821      JS_CFUNC_MAGIC_DEF(\"has\", 1, js_map_has, MAGIC_WEAK),\n 46822      JS_CFUNC_MAGIC_DEF(\"delete\", 1, js_map_delete, MAGIC_WEAK),\n 46823:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"WeakMap\", JS_PROP_CONFIGURABLE),\n 46824  };\n 46825  \n .....\n 46828      JS_CFUNC_MAGIC_DEF(\"has\", 1, js_map_has, MAGIC_SET | MAGIC_WEAK),\n 46829      JS_CFUNC_MAGIC_DEF(\"delete\", 1, js_map_delete, MAGIC_SET | MAGIC_WEAK),\n 46830:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"WeakSet\", JS_PROP_CONFIGURABLE),\n 46831  };\n 46832  \n .....\n 46881  /* Generator */\n 46882  static const JSCFunctionListEntry js_generator_function_proto_funcs[] = {\n 46883:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"GeneratorFunction\", JS_PROP_CONFIGURABLE),\n 46884  };\n 46885  \n .....\n 46888      JS_ITERATOR_NEXT_DEF(\"return\", 1, js_generator_next, GEN_MAGIC_RETURN),\n 46889      JS_ITERATOR_NEXT_DEF(\"throw\", 1, js_generator_next, GEN_MAGIC_THROW),\n 46890:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Generator\", JS_PROP_CONFIGURABLE),\n 46891  };\n 46892  \n .....\n 47874      JS_CFUNC_DEF(\"catch\", 1, js_promise_catch),\n 47875      JS_CFUNC_DEF(\"finally\", 1, js_promise_finally),\n 47876:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Promise\", JS_PROP_CONFIGURABLE),\n 47877  };\n 47878  \n 47879  /* AsyncFunction */\n 47880  static const JSCFunctionListEntry js_async_function_proto_funcs[] = {\n 47881:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"AsyncFunction\", JS_PROP_CONFIGURABLE),\n 47882  };\n 47883  \n .....\n 48070  \n 48071  static const JSCFunctionListEntry js_async_generator_function_proto_funcs[] = {\n 48072:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"AsyncGeneratorFunction\", JS_PROP_CONFIGURABLE),\n 48073  };\n 48074  \n .....\n 48079      JS_CFUNC_MAGIC_DEF(\"return\", 1, js_async_generator_next, GEN_MAGIC_RETURN),\n 48080      JS_CFUNC_MAGIC_DEF(\"throw\", 1, js_async_generator_next, GEN_MAGIC_THROW),\n 48081:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"AsyncGenerator\", JS_PROP_CONFIGURABLE),\n 48082  };\n 48083  \n .....\n 50027      JS_CFUNC_DEF(\"toString\", 0, js_bigint_toString),\n 50028      JS_CFUNC_DEF(\"valueOf\", 0, js_bigint_valueOf),\n 50029:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"BigInt\", JS_PROP_CONFIGURABLE),\n 50030  };\n 50031  \n .....\n 52048          \"byteLength\", js_array_buffer_get_byteLength, NULL, JS_CLASS_ARRAY_BUFFER),\n 52049      JS_CFUNC_MAGIC_DEF(\"slice\", 2, js_array_buffer_slice, JS_CLASS_ARRAY_BUFFER),\n 52050:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"ArrayBuffer\", JS_PROP_CONFIGURABLE),\n 52051  };\n 52052  \n .....\n 52061          \"byteLength\", js_array_buffer_get_byteLength, NULL, JS_CLASS_SHARED_ARRAY_BUFFER),\n 52062      JS_CFUNC_MAGIC_DEF(\"slice\", 2, js_array_buffer_slice, JS_CLASS_SHARED_ARRAY_BUFFER),\n 52063:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"SharedArrayBuffer\", JS_PROP_CONFIGURABLE),\n 52064  };\n 52065  \n .....\n 53576      JS_CFUNC_MAGIC_DEF(\n 53577          \"entries\", 0, js_create_typed_array_iterator, JS_ITERATOR_KIND_KEY_AND_VALUE),\n 53578:     JS_CGETSET_DEF(\"[Symbol.toStringTag]\", js_typed_array_get_toStringTag, NULL),\n 53579      JS_CFUNC_DEF(\"copyWithin\", 2, js_typed_array_copyWithin),\n 53580      JS_CFUNC_MAGIC_DEF(\"every\", 1, js_array_every, special_every | special_TA),\n .....\n 54132      JS_CFUNC_MAGIC_DEF(\"setFloat32\", 2, js_dataview_setValue, JS_CLASS_FLOAT32_ARRAY),\n 54133      JS_CFUNC_MAGIC_DEF(\"setFloat64\", 2, js_dataview_setValue, JS_CLASS_FLOAT64_ARRAY),\n 54134:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"DataView\", JS_PROP_CONFIGURABLE),\n 54135  };\n 54136  \n .....\n 54509      JS_CFUNC_DEF(\"wait\", 4, js_atomics_wait),\n 54510      JS_CFUNC_DEF(\"notify\", 3, js_atomics_notify),\n 54511:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Atomics\", JS_PROP_CONFIGURABLE),\n 54512  };\n 54513  \n\n~/Projects/plot-cv/test-opencv-worker.js:\n   22  \n   23    globalThis.console = new Console({\n   24: <skipped 56 characters> ...ngth: Infinity, maxStringLength: 1024, customInspect: true, classKey: Symbol.toStringTag, hideKeys: [Symbol.toStringTag] }\n   25    });\n   26  \n\n~/Projects/plot-cv/debugger-server.js:\n  929                    define(\n  930                      fns.filter(({ name }) => re.test(name)),\n  931:                     { [Symbol.toStringTag]: 'FunctionList', file }\n  932                    )\n  933                  );\n\n~/Projects/plot-cv/cli-helpers.js:\n   61        }\n   62      },\n   63:     { rows, keys, [Symbol.toStringTag]: 'Table', [Symbol.for('print')]: true }\n   64    );\n   65  }\n   ..\n   99        }\n  100      },\n  101:     { items, keys, [Symbol.toStringTag]: 'List', [Symbol.for('print')]: true }\n  102    );\n  103  }\n\n~/Projects/plot-cv/x.js:\n    4      Object.assign(this, obj);\n    5    }\n    6:   get [Symbol.toStringTag]() {\n    7      return `[PmDeviceInfo_S @ ${this} ]`;\n    8    }\n\n~/Projects/plot-cv/dump-structs.js:\n  552    yield `class ${name} extends ArrayBuffer {`;\n  553    yield `  constructor(obj = {}) {\\n    super(${size});\\n    Object.assign(this, obj);\\n  }`;\n  554:   yield `  get [Symbol.toStringTag]() { return \\`[struct ${name} @ \\${this} ]\\`; }`;\n  555    let fields = [];\n  556    for(let [name, [type, offset, size]] of map) {\n\n~/Projects/plot-cv/debugger.js:\n  210  }\n  211  \n  212: Object.assign(DebuggerDispatcher.prototype, { [Symbol.toStringTag]: 'DebuggerDispatcher' });\n  213  Object.setPrototypeOf(DebuggerDispatcher.prototype, null);\n  214  \n\n~/Projects/plot-cv/portaudio2.js:\n    6      Object.assign(this, obj);\n    7    }\n    8:   get [Symbol.toStringTag]() {\n    9      return `[PaStreamParameters @ ${this} ]`;\n   10    }\n\n~/Projects/plot-cv/test-ffi.js:\n   42      // Object.assign(this, obj);\n   43    }\n   44:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n   45      return `[Registers @ ${toPointer(this)} ]`;\n   46    }\n\n~/Projects/plot-cv/test-features2d.js:\n   17    let ctor_names = Object.getOwnPropertyNames(cv).filter(name => typeof cv[name] == 'function');\n   18  \n   19:   let features2d_names = ctor_names.filter(name => cv[name].prototype && cv[name].prototype[Symbol.toStringTag] == 'Feature2D');\n   20  \n   21    console.log('cv', features2d_names);\n\n~/Projects/plot-cv/adsb-map.js:\n   94      yield* this.convertTo('EPSG:3857');\n   95    }\n   96:   get [Symbol.toStringTag]() {\n   97      return `Coordinate ${this.lon},${this.lat}`;\n   98    }\n\n~/Projects/plot-cv/test-fft.js:\n   30      Object.assign(this, obj);\n   31    }\n   32:   /* prettier-ignore */ get [Symbol.toStringTag]() { return `[struct sf_info_t @ ${toPointer(this)} ]`; }\n   33  \n   34    /* prettier-ignore */ set frames(v) { new BigUint64Array(this, 0)[0] = BigInt(v); }\n\n~/Projects/plot-cv/message.js:\n  102  \n  103    [Symbol.for('nodejs.util.inspect.custom')]() {\n  104:     return this[Symbol.toStringTag]();\n  105    }\n  106:   [Symbol.toStringTag]() {\n  107      const { origin, recipient, type, body } = this;\n  108      return 'new Message', Util.filterOutMembers({ origin, recipient, type, body }, v => v == undefined);\n\n~/Projects/plot-cv/param.js:\n   12    }\n   13  \n   14:   /*[Symbol.toStringTag]() {\n   15      return this.toString();\n   16    }*/\n   ..\n   29  }\n   30  \n   31: define(Param.prototype, { get [Symbol.toStringTag]() { return this.toString(); } });\n   32  \n   33  export class NumericParam extends Param {\n\n~/Projects/plot-cv/ol-helpers.js:\n   75      yield* this.convertTo('EPSG:3857');\n   76    }\n   77:   get [Symbol.toStringTag]() {\n   78      return `Coordinate${this.type ? '[' + this.type + ']' : ''} ${this.lon},${this.lat}`;\n   79    }\n\n~/Projects/plot-cv/circuit.js:\n   19  }\n   20  \n   21: Comment.prototype[Symbol.toStringTag] = 'Comment';\n   22  \n   23  class Empty {\n   ..\n   36  }\n   37  \n   38: Empty.prototype[Symbol.toStringTag] = 'Empty';\n   39  \n   40  export class Via {\n   ..\n   54  }\n   55  \n   56: Via.prototype[Symbol.toStringTag] = 'Via';\n   57  \n   58  export class Board {\n   ..\n   63  }\n   64  \n   65: Board.prototype[Symbol.toStringTag] = 'Board';\n   66  \n   67  export class Package extends Array {\n   ..\n   79  }\n   80  \n   81: Package.prototype[Symbol.toStringTag] = 'Package';\n   82  \n   83  export class Component {\n   ..\n   92  }\n   93  \n   94: Component.prototype[Symbol.toStringTag] = 'Component';\n   95  \n   96  export class ConnectionPoint {\n   ..\n  105  }\n  106  \n  107: ConnectionPoint.prototype[Symbol.toStringTag] = 'ConnectionPoint';\n  108  \n  109  export class Connection {\n  ...\n  114  }\n  115  \n  116: Connection.prototype[Symbol.toStringTag] = 'Connection';\n  117  \n  118  export class Circuit {\n\n~/Projects/plot-cv/test-video.js:\n  143      maxArrayLength: 30,\n  144      compact: 1,\n  145:     hideKeys: [Symbol.toStringTag]\n  146    });\n  147    let f = std.open('test-video.log', 'w');\n\n~/Projects/plot-cv/test-imread.js:\n   61    let ctor_names = Object.getOwnPropertyNames(cv).filter(name => typeof cv[name] == 'function');\n   62  \n   63:   let features2d_names = ctor_names.filter(name => cv[name].prototype && cv[name].prototype[Symbol.toStringTag] == 'Feature2D');\n   64  \n   65    console.log('cv', features2d_names);\n\n~/Projects/plot-cv/resolve-imports2.js:\n  338      return path.relative(ES6Env.cwd, this.file || '');\n  339    }\n  340:   [Symbol.toStringTag]() {\n  341      return path.relative(ES6Env.cwd, this.file || '');\n  342    }\n\n~/Projects/plot-cv/dir-helpers.js:\n  154  \n  155    [Symbol.inspect](depth, opts = {}) {\n  156:     return `\\x1b[1;31m${this[Symbol.toStringTag]}\\x1b[0;32m ` + this.#string + `\\x1b[0m`;\n  157    }\n  158  \n  ...\n  176  }\n  177  \n  178: define(Path.prototype, { [Symbol.toStringTag]: 'Path' });\n  179  \n  180  /* same as proto[Symbol.operatorSet] = Operators.create(..op_list)\n\n~/Projects/plot-cv/test-libbpg.js:\n   17      return Object.setPrototypeOf(arrayBuf.slice(), BPGImageInfo.prototype);\n   18    }\n   19:   /* prettier-ignore */ get [Symbol.toStringTag]() { return `[struct BPGImageInfo @ ${this} ]`; }\n   20  \n   21    /* width@0 uint32_t 4 */\n\n~/Projects/plot-cv/ast-shell.js:\n  567    yield `class ${className} extends ArrayBuffer {`;\n  568    yield `  constructor(obj = {}) {\\n    super(${size});\\n    Object.assign(this, obj);\\n  }`;\n  569:   yield `  get [Symbol.toStringTag]() { return \\`[${name} @ \\${this} ]\\`; }`;\n  570  \n  571    let fields = [],\n\n~/Projects/plot-cv/inotify_event.js:\n   61  }\n   62  \n   63: inotify_event.prototype[Symbol.toStringTag] = 'inotify_event';\n   64  \n\n~/Projects/plot-cv/resolve-imports.js:\n  154      close: () => {},\n  155      seek: (whence, offset) => os.seek(fd, whence, offset),\n  156:     [Symbol.toStringTag]: `FileWriter< ${fd} >`,\n  157      inspect() {\n  158:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  159      }\n  160    });\n  ...\n  170      close: () => {},\n  171      seek: () => {},\n  172:     [Symbol.toStringTag]: `DummyWriter< ${name} >`,\n  173      inspect() {\n  174:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  175      }\n  176    });\n  ...\n  807  \n  808  define(NumericRange.prototype, {\n  809:   [Symbol.toStringTag]: 'NumericRange',\n  810    [Symbol.inspect](depth, opts) {\n  811      const [start, end] = this;\n  ...\n  862            return '';\n  863          },\n  864:         [Symbol.toStringTag]: 'FileMap(empty)'\n  865        };\n  866        return Object.setPrototypeOf(obj, FileMap.prototype);\n  ...\n 1081  }\n 1082  \n 1083: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1084  FileMap.prototype[Symbol.inspect] = function(depth, opts) {\n 1085    let arr = [...this].map(([range, buf], i) => {\n\n~/Projects/plot-cv/struct-buffer.js:\n    4      Object.assign(this, obj);\n    5    }\n    6:   get [Symbol.toStringTag]() {\n    7      return `[struct buffer @ ${this} ]`;\n    8    }\n\n~/Projects/plot-cv/clang-ast.js:\n  111  }\n  112  \n  113: define(List.prototype, { [Symbol.toStringTag]: 'List' });\n  114  \n  115  export class Node {\n  ...\n  182    }\n  183  \n  184:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  185      return this.constructor.name;\n  186    }\n  ...\n  931          }),\n  932          end: new Location({ ...end.toObject(), file: undefined, line: undefined, col: undefined }),\n  933:         [Symbol.toStringTag]: 'Range'\n  934        },\n  935        { ...opts, compact: false, customInspect: true, onlyOffset: true }\n  ...\n  956  }\n  957  \n  958: Range.prototype[Symbol.toStringTag] = 'Range';\n  959  \n  960  export class Location {\n  ...\n 1494  }\n 1495  \n 1496: NodeError.prototype[Symbol.toStringTag] = 'NodeError';\n 1497  \n 1498  export function NodePrinter(ast) {\n\n~/Projects/plot-cv/adsb-client.js:\n   33      close: () => {},\n   34      seek: (whence, offset) => os.seek(fd, whence, offset),\n   35:     [Symbol.toStringTag]: `FileWriter< ${fd} >`,\n   36      inspect() {\n   37:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n   38      }\n   39    });\n\n~/Projects/plot-cv/data/binfmttest.structs.js:\n    4      Object.assign(this, obj);\n    5    }\n    6:   get [Symbol.toStringTag]() { return `[struct range @ ${this} ]`; }\n    7  \n    8    /* 0: char * start@8 */\n    .\n   29      Object.assign(this, obj);\n   30    }\n   31:   get [Symbol.toStringTag]() { return `[struct binfmt_entry @ ${this} ]`; }\n   32  \n   33    /* 0: const char * name@8 */\n   ..\n   62      Object.assign(this, obj);\n   63    }\n   64:   get [Symbol.toStringTag]() { return `[struct binfmt_file @ ${this} ]`; }\n   65  \n   66    /* 0: uint8 * baseaddr@8 */\n\n~/Projects/plot-cv/data/ar-wrap.structs.js:\n    4      Object.assign(this, obj);\n    5    }\n    6:   get [Symbol.toStringTag]() { return `[struct stralloc @ ${this} ]`; }\n    7  \n    8    /* 0: char * s@8 */\n    .\n   29      Object.assign(this, obj);\n   30    }\n   31:   get [Symbol.toStringTag]() { return `[struct buffer @ ${this} ]`; }\n   32  \n   33    /* 0: char * x@8 */\n   ..\n   74      Object.assign(this, obj);\n   75    }\n   76:   get [Symbol.toStringTag]() { return `[struct strlist @ ${this} ]`; }\n   77  \n   78    /* 0: stralloc sa@NaN */\n   ..\n   95      Object.assign(this, obj);\n   96    }\n   97:   get [Symbol.toStringTag]() { return `[struct array @ ${this} ]`; }\n   98  \n   99    /* 0: char * p@8 */\n\n~/Projects/plot-cv/data/getdents.structs.js:\n    4      Object.assign(this, obj);\n    5    }\n    6:   get [Symbol.toStringTag]() { return `[struct __fsid_t @ ${this} ]`; }\n    7  \n    8    /* 0: int [2] __val@8 */\n    .\n   21      Object.assign(this, obj);\n   22    }\n   23:   get [Symbol.toStringTag]() { return `[struct __mbstate_t @ ${this} ]`; }\n   24  \n   25    /* 0: int __count@4 */\n   ..\n   42      Object.assign(this, obj);\n   43    }\n   44:   get [Symbol.toStringTag]() { return `[struct __fpos_t @ ${this} ]`; }\n   45  \n   46    /* 0: __off_t __pos@8 */\n   ..\n   63      Object.assign(this, obj);\n   64    }\n   65:   get [Symbol.toStringTag]() { return `[struct __fpos64_t @ ${this} ]`; }\n   66  \n   67    /* 0: __off64_t __pos@8 */\n   ..\n   84      Object.assign(this, obj);\n   85    }\n   86:   get [Symbol.toStringTag]() { return `[struct __FILE @ ${this} ]`; }\n   87  \n   88    /* 0: int _flags@4 */\n   ..\n  213      Object.assign(this, obj);\n  214    }\n  215:   get [Symbol.toStringTag]() { return `[struct FILE @ ${this} ]`; }\n  216  \n  217    /* 0: int _flags@4 */\n  ...\n  342      Object.assign(this, obj);\n  343    }\n  344:   get [Symbol.toStringTag]() { return `[struct cookie_io_functions_t @ ${this} ]`; }\n  345  \n  346    /* 0: cookie_read_function_t * read@8 */\n  ...\n  371      Object.assign(this, obj);\n  372    }\n  373:   get [Symbol.toStringTag]() { return `[struct div_t @ ${this} ]`; }\n  374  \n  375    /* 0: int quot@4 */\n  ...\n  392      Object.assign(this, obj);\n  393    }\n  394:   get [Symbol.toStringTag]() { return `[struct ldiv_t @ ${this} ]`; }\n  395  \n  396    /* 0: long quot@8 */\n  ...\n  413      Object.assign(this, obj);\n  414    }\n  415:   get [Symbol.toStringTag]() { return `[struct lldiv_t @ ${this} ]`; }\n  416  \n  417    /* 0: long long quot@8 */\n  ...\n  434      Object.assign(this, obj);\n  435    }\n  436:   get [Symbol.toStringTag]() { return `[struct __locale_t @ ${this} ]`; }\n  437  \n  438    /* 0: __int128 __locale_data@16 */\n  ...\n  471      Object.assign(this, obj);\n  472    }\n  473:   get [Symbol.toStringTag]() { return `[struct __sigset_t @ ${this} ]`; }\n  474  \n  475    /* 0: unsigned long [16] __val@128 */\n  ...\n  488      Object.assign(this, obj);\n  489    }\n  490:   get [Symbol.toStringTag]() { return `[struct fd_set @ ${this} ]`; }\n  491  \n  492    /* 0: __fd_mask [16] fds_bits@NaN */\n  ...\n  505      Object.assign(this, obj);\n  506    }\n  507:   get [Symbol.toStringTag]() { return `[struct __pthread_list_t @ ${this} ]`; }\n  508  \n  509    /* 0: struct __pthread_internal_list * __prev@8 */\n  ...\n  526      Object.assign(this, obj);\n  527    }\n  528:   get [Symbol.toStringTag]() { return `[struct __pthread_slist_t @ ${this} ]`; }\n  529  \n  530    /* 0: struct __pthread_internal_slist * __next@8 */\n  ...\n  543      Object.assign(this, obj);\n  544    }\n  545:   get [Symbol.toStringTag]() { return `[struct pthread_mutexattr_t @ ${this} ]`; }\n  546  \n  547    /* 0: char [4] __size@4 */\n  ...\n  564      Object.assign(this, obj);\n  565    }\n  566:   get [Symbol.toStringTag]() { return `[struct pthread_condattr_t @ ${this} ]`; }\n  567  \n  568    /* 0: char [4] __size@4 */\n  ...\n  585      Object.assign(this, obj);\n  586    }\n  587:   get [Symbol.toStringTag]() { return `[struct pthread_attr_t @ ${this} ]`; }\n  588  \n  589    /* 0: char [56] __size@56 */\n  ...\n  606      Object.assign(this, obj);\n  607    }\n  608:   get [Symbol.toStringTag]() { return `[struct pthread_mutex_t @ ${this} ]`; }\n  609  \n  610    /* 0: struct __pthread_mutex_s __data@NaN */\n  ...\n  631      Object.assign(this, obj);\n  632    }\n  633:   get [Symbol.toStringTag]() { return `[struct pthread_cond_t @ ${this} ]`; }\n  634  \n  635    /* 0: struct __pthread_cond_s __data@NaN */\n  ...\n  656      Object.assign(this, obj);\n  657    }\n  658:   get [Symbol.toStringTag]() { return `[struct pthread_rwlock_t @ ${this} ]`; }\n  659  \n  660    /* 0: struct __pthread_rwlock_arch_t __data@NaN */\n  ...\n  681      Object.assign(this, obj);\n  682    }\n  683:   get [Symbol.toStringTag]() { return `[struct pthread_rwlockattr_t @ ${this} ]`; }\n  684  \n  685    /* 0: char [8] __size@8 */\n  ...\n  702      Object.assign(this, obj);\n  703    }\n  704:   get [Symbol.toStringTag]() { return `[struct pthread_barrier_t @ ${this} ]`; }\n  705  \n  706    /* 0: char [32] __size@32 */\n  ...\n  723      Object.assign(this, obj);\n  724    }\n  725:   get [Symbol.toStringTag]() { return `[struct pthread_barrierattr_t @ ${this} ]`; }\n  726  \n  727    /* 0: char [4] __size@4 */\n  ...\n  744      Object.assign(this, obj);\n  745    }\n  746:   get [Symbol.toStringTag]() { return `[struct __kernel_fd_set @ ${this} ]`; }\n  747  \n  748    /* 0: unsigned long [16] fds_bits@128 */\n  ...\n  761      Object.assign(this, obj);\n  762    }\n  763:   get [Symbol.toStringTag]() { return `[struct __kernel_fsid_t @ ${this} ]`; }\n  764  \n  765    /* 0: int [2] val@8 */\n\n~/Projects/plot-cv/data/qjs.structs.js:\n    4      Object.assign(this, obj);\n    5    }\n    6:   get [Symbol.toStringTag]() { return `[struct DynBuf @ ${this} ]`; }\n    7  \n    8    /* 0: uint8_t * buf@8 */\n    .\n   41      Object.assign(this, obj);\n   42    }\n   43:   get [Symbol.toStringTag]() { return `[struct JSRefCountHeader @ ${this} ]`; }\n   44  \n   45    /* 0: int ref_count@4 */\n   ..\n   58      Object.assign(this, obj);\n   59    }\n   60:   get [Symbol.toStringTag]() { return `[struct JSValueUnion @ ${this} ]`; }\n   61  \n   62    /* 0: int32_t int32@4 */\n   ..\n   83      Object.assign(this, obj);\n   84    }\n   85:   get [Symbol.toStringTag]() { return `[struct JSValue @ ${this} ]`; }\n   86  \n   87    /* 0: JSValueUnion u@NaN */\n   ..\n  104      Object.assign(this, obj);\n  105    }\n  106:   get [Symbol.toStringTag]() { return `[struct JSMallocState @ ${this} ]`; }\n  107  \n  108    /* 0: size_t malloc_count@8 */\n  ...\n  133      Object.assign(this, obj);\n  134    }\n  135:   get [Symbol.toStringTag]() { return `[struct JSMallocFunctions @ ${this} ]`; }\n  136  \n  137    /* 0: void *(*)(JSMallocState *, size_t) js_malloc@8 */\n  ...\n  162      Object.assign(this, obj);\n  163    }\n  164:   get [Symbol.toStringTag]() { return `[struct JSMemoryUsage @ ${this} ]`; }\n  165  \n  166    /* 0: int64_t malloc_size@8 */\n  ...\n  279      Object.assign(this, obj);\n  280    }\n  281:   get [Symbol.toStringTag]() { return `[struct JSPropertyEnum @ ${this} ]`; }\n  282  \n  283    /* 0: int is_enumerable@4 */\n  ...\n  300      Object.assign(this, obj);\n  301    }\n  302:   get [Symbol.toStringTag]() { return `[struct JSPropertyDescriptor @ ${this} ]`; }\n  303  \n  304    /* 0: int flags@4 */\n  ...\n  329      Object.assign(this, obj);\n  330    }\n  331:   get [Symbol.toStringTag]() { return `[struct JSClassExoticMethods @ ${this} ]`; }\n  332  \n  333    /* 0: int (*)(JSContext *, JSPropertyDescriptor *, JSValue, JSAtom) get_own_property@8 */\n  ...\n  370      Object.assign(this, obj);\n  371    }\n  372:   get [Symbol.toStringTag]() { return `[struct JSClassDef @ ${this} ]`; }\n  373  \n  374    /* 0: const char * class_name@8 */\n  ...\n  403      Object.assign(this, obj);\n  404    }\n  405:   get [Symbol.toStringTag]() { return `[struct JSSharedArrayBufferFunctions @ ${this} ]`; }\n  406  \n  407    /* 0: void *(*)(void *, size_t) sab_alloc@8 */\n  ...\n  432      Object.assign(this, obj);\n  433    }\n  434:   get [Symbol.toStringTag]() { return `[struct JSCFunctionType @ ${this} ]`; }\n  435  \n  436    /* 0: JSCFunction * generic@8 */\n  ...\n  493      Object.assign(this, obj);\n  494    }\n  495:   get [Symbol.toStringTag]() { return `[struct JSCFunctionListEntry @ ${this} ]`; }\n  496  \n  497    /* 0: const char * name@8 */\n\n~/Projects/plot-cv/data/mplab.structs.js:\n    4      Object.assign(this, obj);\n    5    }\n    6:   get [Symbol.toStringTag]() { return `[struct stralloc @ ${this} ]`; }\n    7  \n    8    /* 0: char * s@8 */\n    .\n   29      Object.assign(this, obj);\n   30    }\n   31:   get [Symbol.toStringTag]() { return `[struct dir_t @ ${this} ]`; }\n   32  \n   33    /* 0: void * dir_int@8 */\n   ..\n   46      Object.assign(this, obj);\n   47    }\n   48:   get [Symbol.toStringTag]() { return `[struct rdir_t @ ${this} ]`; }\n   49  \n   50    /* 0: struct rdir_s * prev@8 */\n   ..\n   71      Object.assign(this, obj);\n   72    }\n   73:   get [Symbol.toStringTag]() { return `[struct slink @ ${this} ]`; }\n   74  \n   75    /* 0: struct slink * next@8 */\n   ..\n   88      Object.assign(this, obj);\n   89    }\n   90:   get [Symbol.toStringTag]() { return `[struct array @ ${this} ]`; }\n   91  \n   92    /* 0: char * p@8 */\n   ..\n  117      Object.assign(this, obj);\n  118    }\n  119:   get [Symbol.toStringTag]() { return `[struct buffer @ ${this} ]`; }\n  120  \n  121    /* 0: char * x@8 */\n  ...\n  162      Object.assign(this, obj);\n  163    }\n  164:   get [Symbol.toStringTag]() { return `[struct strlist @ ${this} ]`; }\n  165  \n  166    /* 0: stralloc sa@NaN */\n  ...\n  183      Object.assign(this, obj);\n  184    }\n  185:   get [Symbol.toStringTag]() { return `[struct range @ ${this} ]`; }\n  186  \n  187    /* 0: char * start@8 */\n  ...\n  208      Object.assign(this, obj);\n  209    }\n  210:   get [Symbol.toStringTag]() { return `[struct bucket_t @ ${this} ]`; }\n  211  \n  212    /* 0: struct bucket * next@8 */\n  ...\n  237      Object.assign(this, obj);\n  238    }\n  239:   get [Symbol.toStringTag]() { return `[struct set_t @ ${this} ]`; }\n  240  \n  241    /* 0: uint32 entries@4 */\n  ...\n  270      Object.assign(this, obj);\n  271    }\n  272:   get [Symbol.toStringTag]() { return `[struct set_iterator_t @ ${this} ]`; }\n  273  \n  274    /* 0: uint32 index@4 */\n  ...\n  295      Object.assign(this, obj);\n  296    }\n  297:   get [Symbol.toStringTag]() { return `[struct TUPLE @ ${this} ]`; }\n  298  \n  299    /* 0: struct tuple * next@8 */\n  ...\n  356      Object.assign(this, obj);\n  357    }\n  358:   get [Symbol.toStringTag]() { return `[struct HMAP_DB @ ${this} ]`; }\n  359  \n  360    /* 0: int tuple_count@4 */\n  ...\n  389      Object.assign(this, obj);\n  390    }\n  391:   get [Symbol.toStringTag]() { return `[struct machine_type @ ${this} ]`; }\n  392  \n  393    /* 0: enum (anonymous enum at ../c-utils/genmakefile.h:57:3) arch@4 */\n  ...\n  410      Object.assign(this, obj);\n  411    }\n  412:   get [Symbol.toStringTag]() { return `[struct system_type @ ${this} ]`; }\n  413  \n  414    /* 0: enum os_type os@4 */\n  ...\n  431      Object.assign(this, obj);\n  432    }\n  433:   get [Symbol.toStringTag]() { return `[struct sourcefile @ ${this} ]`; }\n  434  \n  435    /* 0: struct slink link@NaN */\n  ...\n  468      Object.assign(this, obj);\n  469    }\n  470:   get [Symbol.toStringTag]() { return `[struct sourcedir @ ${this} ]`; }\n  471  \n  472    /* 0: int n_sources@4 */\n  ...\n  509      Object.assign(this, obj);\n  510    }\n  511:   get [Symbol.toStringTag]() { return `[struct target @ ${this} ]`; }\n  512  \n  513    /* 0: const char * name@8 */\n  ...\n  554      Object.assign(this, obj);\n  555    }\n  556:   get [Symbol.toStringTag]() { return `[struct dirs_t @ ${this} ]`; }\n  557  \n  558    /* 0: strlist work@NaN */\n  ...\n  583      Object.assign(this, obj);\n  584    }\n  585:   get [Symbol.toStringTag]() { return `[struct exts_t @ ${this} ]`; }\n  586  \n  587    /* 0: char * obj@8 */\n  ...\n  612      Object.assign(this, obj);\n  613    }\n  614:   get [Symbol.toStringTag]() { return `[struct tools_t @ ${this} ]`; }\n  615  \n  616    /* 0: char * toolchain@8 */\n  ...\n  641      Object.assign(this, obj);\n  642    }\n  643:   get [Symbol.toStringTag]() { return `[struct config_t @ ${this} ]`; }\n  644  \n  645    /* 0: struct machine_type mach@NaN */\n  ...\n  674      Object.assign(this, obj);\n  675    }\n  676:   get [Symbol.toStringTag]() { return `[struct ini_section_t @ ${this} ]`; }\n  677  \n  678    /* 0: struct ini_section * next@8 */\n  ...\n  699      Object.assign(this, obj);\n  700    }\n  701:   get [Symbol.toStringTag]() { return `[struct mplab_config_t @ ${this} ]`; }\n  702  \n  703    /* 0: int warning_level@4 */\n\n~/Projects/plot-cv/data/test-websocket.structs.js:\n    4      Object.assign(this, obj);\n    5    }\n    6:   get [Symbol.toStringTag]() { return `[struct JSRefCountHeader @ ${this} ]`; }\n    7  \n    8    /* 0: int ref_count@4 */\n    .\n   21      Object.assign(this, obj);\n   22    }\n   23:   get [Symbol.toStringTag]() { return `[struct JSValueUnion @ ${this} ]`; }\n   24  \n   25    /* 0: int32_t int32@4 */\n   ..\n   46      Object.assign(this, obj);\n   47    }\n   48:   get [Symbol.toStringTag]() { return `[struct JSValue @ ${this} ]`; }\n   49  \n   50    /* 0: JSValueUnion u@NaN */\n   ..\n   67      Object.assign(this, obj);\n   68    }\n   69:   get [Symbol.toStringTag]() { return `[struct JSMallocState @ ${this} ]`; }\n   70  \n   71    /* 0: size_t malloc_count@8 */\n   ..\n   96      Object.assign(this, obj);\n   97    }\n   98:   get [Symbol.toStringTag]() { return `[struct JSMallocFunctions @ ${this} ]`; }\n   99  \n  100    /* 0: void *(*)(JSMallocState *, size_t) js_malloc@8 */\n  ...\n  125      Object.assign(this, obj);\n  126    }\n  127:   get [Symbol.toStringTag]() { return `[struct JSMemoryUsage @ ${this} ]`; }\n  128  \n  129    /* 0: int64_t malloc_size@8 */\n  ...\n  242      Object.assign(this, obj);\n  243    }\n  244:   get [Symbol.toStringTag]() { return `[struct JSPropertyEnum @ ${this} ]`; }\n  245  \n  246    /* 0: int is_enumerable@4 */\n  ...\n  263      Object.assign(this, obj);\n  264    }\n  265:   get [Symbol.toStringTag]() { return `[struct JSPropertyDescriptor @ ${this} ]`; }\n  266  \n  267    /* 0: int flags@4 */\n  ...\n  292      Object.assign(this, obj);\n  293    }\n  294:   get [Symbol.toStringTag]() { return `[struct JSClassExoticMethods @ ${this} ]`; }\n  295  \n  296    /* 0: int (*)(JSContext *, JSPropertyDescriptor *, JSValue, JSAtom) get_own_property@8 */\n  ...\n  333      Object.assign(this, obj);\n  334    }\n  335:   get [Symbol.toStringTag]() { return `[struct JSClassDef @ ${this} ]`; }\n  336  \n  337    /* 0: const char * class_name@8 */\n  ...\n  366      Object.assign(this, obj);\n  367    }\n  368:   get [Symbol.toStringTag]() { return `[struct JSSharedArrayBufferFunctions @ ${this} ]`; }\n  369  \n  370    /* 0: void *(*)(void *, size_t) sab_alloc@8 */\n  ...\n  395      Object.assign(this, obj);\n  396    }\n  397:   get [Symbol.toStringTag]() { return `[struct JSCFunctionType @ ${this} ]`; }\n  398  \n  399    /* 0: JSCFunction * generic@8 */\n  ...\n  456      Object.assign(this, obj);\n  457    }\n  458:   get [Symbol.toStringTag]() { return `[struct JSCFunctionListEntry @ ${this} ]`; }\n  459  \n  460    /* 0: const char * name@8 */\n\n~/Projects/plot-cv/quickjs/quickjs.c:\n 40770  static const JSCFunctionListEntry js_array_iterator_proto_funcs[] = {\n 40771      JS_ITERATOR_NEXT_DEF(\"next\", 0, js_array_iterator_next, 0 ),\n 40772:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Array Iterator\", JS_PROP_CONFIGURABLE ),\n 40773  };\n 40774  \n .....\n 42915  static const JSCFunctionListEntry js_string_iterator_proto_funcs[] = {\n 42916      JS_ITERATOR_NEXT_DEF(\"next\", 0, js_string_iterator_next, 0 ),\n 42917:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"String Iterator\", JS_PROP_CONFIGURABLE ),\n 42918  };\n 42919  \n .....\n 43181      JS_CFUNC_DEF(\"imul\", 2, js_math_imul ),\n 43182      JS_CFUNC_DEF(\"clz32\", 1, js_math_clz32 ),\n 43183:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Math\", JS_PROP_CONFIGURABLE ),\n 43184      JS_PROP_DOUBLE_DEF(\"E\", 2.718281828459045, 0 ),\n 43185      JS_PROP_DOUBLE_DEF(\"LN10\", 2.302585092994046, 0 ),\n .....\n 44818  static const JSCFunctionListEntry js_regexp_string_iterator_proto_funcs[] = {\n 44819      JS_ITERATOR_NEXT_DEF(\"next\", 0, js_regexp_string_iterator_next, 0 ),\n 44820:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"RegExp String Iterator\", JS_PROP_CONFIGURABLE ),\n 44821  };\n 44822  \n .....\n 45530      JS_CFUNC_DEF(\"parse\", 2, js_json_parse ),\n 45531      JS_CFUNC_DEF(\"stringify\", 3, js_json_stringify ),\n 45532:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"JSON\", JS_PROP_CONFIGURABLE ),\n 45533  };\n 45534  \n .....\n 45704      JS_CFUNC_DEF(\"set\", 3, js_reflect_set ),\n 45705      JS_CFUNC_DEF(\"setPrototypeOf\", 2, js_reflect_setPrototypeOf ),\n 45706:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Reflect\", JS_PROP_CONFIGURABLE ),\n 45707  };\n 45708  \n .....\n 46746      // XXX: should have writable: false\n 46747      JS_CFUNC_DEF(\"[Symbol.toPrimitive]\", 1, js_symbol_valueOf ),\n 46748:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Symbol\", JS_PROP_CONFIGURABLE ),\n 46749      JS_CGETSET_DEF(\"description\", js_symbol_get_description, NULL ),\n 46750  };\n .....\n 47585      JS_CFUNC_MAGIC_DEF(\"entries\", 0, js_create_map_iterator, (JS_ITERATOR_KIND_KEY_AND_VALUE << 2) | 0 ),\n 47586      JS_ALIAS_DEF(\"[Symbol.iterator]\", \"entries\" ),\n 47587:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Map\", JS_PROP_CONFIGURABLE ),\n 47588  };\n 47589  \n 47590  static const JSCFunctionListEntry js_map_iterator_proto_funcs[] = {\n 47591      JS_ITERATOR_NEXT_DEF(\"next\", 0, js_map_iterator_next, 0 ),\n 47592:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Map Iterator\", JS_PROP_CONFIGURABLE ),\n 47593  };\n 47594  \n .....\n 47604      JS_ALIAS_DEF(\"[Symbol.iterator]\", \"values\" ),\n 47605      JS_CFUNC_MAGIC_DEF(\"entries\", 0, js_create_map_iterator, (JS_ITERATOR_KIND_KEY_AND_VALUE << 2) | MAGIC_SET ),\n 47606:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Set\", JS_PROP_CONFIGURABLE ),\n 47607  };\n 47608  \n 47609  static const JSCFunctionListEntry js_set_iterator_proto_funcs[] = {\n 47610      JS_ITERATOR_NEXT_DEF(\"next\", 0, js_map_iterator_next, MAGIC_SET ),\n 47611:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Set Iterator\", JS_PROP_CONFIGURABLE ),\n 47612  };\n 47613  \n .....\n 47617      JS_CFUNC_MAGIC_DEF(\"has\", 1, js_map_has, MAGIC_WEAK ),\n 47618      JS_CFUNC_MAGIC_DEF(\"delete\", 1, js_map_delete, MAGIC_WEAK ),\n 47619:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"WeakMap\", JS_PROP_CONFIGURABLE ),\n 47620  };\n 47621  \n .....\n 47624      JS_CFUNC_MAGIC_DEF(\"has\", 1, js_map_has, MAGIC_SET | MAGIC_WEAK ),\n 47625      JS_CFUNC_MAGIC_DEF(\"delete\", 1, js_map_delete, MAGIC_SET | MAGIC_WEAK ),\n 47626:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"WeakSet\", JS_PROP_CONFIGURABLE ),\n 47627  };\n 47628  \n .....\n 47678  /* Generator */\n 47679  static const JSCFunctionListEntry js_generator_function_proto_funcs[] = {\n 47680:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"GeneratorFunction\", JS_PROP_CONFIGURABLE),\n 47681  };\n 47682  \n .....\n 47685      JS_ITERATOR_NEXT_DEF(\"return\", 1, js_generator_next, GEN_MAGIC_RETURN ),\n 47686      JS_ITERATOR_NEXT_DEF(\"throw\", 1, js_generator_next, GEN_MAGIC_THROW ),\n 47687:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Generator\", JS_PROP_CONFIGURABLE),\n 47688  };\n 47689  \n .....\n 48694      JS_CFUNC_DEF(\"catch\", 1, js_promise_catch ),\n 48695      JS_CFUNC_DEF(\"finally\", 1, js_promise_finally ),\n 48696:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Promise\", JS_PROP_CONFIGURABLE ),\n 48697  };\n 48698  \n 48699  /* AsyncFunction */\n 48700  static const JSCFunctionListEntry js_async_function_proto_funcs[] = {\n 48701:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"AsyncFunction\", JS_PROP_CONFIGURABLE ),\n 48702  };\n 48703  \n .....\n 48896  \n 48897  static const JSCFunctionListEntry js_async_generator_function_proto_funcs[] = {\n 48898:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"AsyncGeneratorFunction\", JS_PROP_CONFIGURABLE ),\n 48899  };\n 48900  \n .....\n 48905      JS_CFUNC_MAGIC_DEF(\"return\", 1, js_async_generator_next, GEN_MAGIC_RETURN ),\n 48906      JS_CFUNC_MAGIC_DEF(\"throw\", 1, js_async_generator_next, GEN_MAGIC_THROW ),\n 48907:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"AsyncGenerator\", JS_PROP_CONFIGURABLE ),\n 48908  };\n 48909  \n .....\n 50871      JS_CFUNC_DEF(\"toString\", 0, js_bigint_toString ),\n 50872      JS_CFUNC_DEF(\"valueOf\", 0, js_bigint_valueOf ),\n 50873:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"BigInt\", JS_PROP_CONFIGURABLE ),\n 50874  };\n 50875  \n .....\n 52907      JS_CGETSET_MAGIC_DEF(\"byteLength\", js_array_buffer_get_byteLength, NULL, JS_CLASS_ARRAY_BUFFER ),\n 52908      JS_CFUNC_MAGIC_DEF(\"slice\", 2, js_array_buffer_slice, JS_CLASS_ARRAY_BUFFER ),\n 52909:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"ArrayBuffer\", JS_PROP_CONFIGURABLE ),\n 52910  };\n 52911  \n .....\n 52919      JS_CGETSET_MAGIC_DEF(\"byteLength\", js_array_buffer_get_byteLength, NULL, JS_CLASS_SHARED_ARRAY_BUFFER ),\n 52920      JS_CFUNC_MAGIC_DEF(\"slice\", 2, js_array_buffer_slice, JS_CLASS_SHARED_ARRAY_BUFFER ),\n 52921:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"SharedArrayBuffer\", JS_PROP_CONFIGURABLE ),\n 52922  };\n 52923  \n .....\n 54456      JS_CFUNC_MAGIC_DEF(\"keys\", 0, js_create_typed_array_iterator, JS_ITERATOR_KIND_KEY ),\n 54457      JS_CFUNC_MAGIC_DEF(\"entries\", 0, js_create_typed_array_iterator, JS_ITERATOR_KIND_KEY_AND_VALUE ),\n 54458:     JS_CGETSET_DEF(\"[Symbol.toStringTag]\", js_typed_array_get_toStringTag, NULL ),\n 54459      JS_CFUNC_DEF(\"copyWithin\", 2, js_typed_array_copyWithin ),\n 54460      JS_CFUNC_MAGIC_DEF(\"every\", 1, js_array_every, special_every | special_TA ),\n .....\n 55038      JS_CFUNC_MAGIC_DEF(\"setFloat32\", 2, js_dataview_setValue, JS_CLASS_FLOAT32_ARRAY ),\n 55039      JS_CFUNC_MAGIC_DEF(\"setFloat64\", 2, js_dataview_setValue, JS_CLASS_FLOAT64_ARRAY ),\n 55040:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"DataView\", JS_PROP_CONFIGURABLE ),\n 55041  };\n 55042  \n .....\n 55477      JS_CFUNC_DEF(\"wait\", 4, js_atomics_wait ),\n 55478      JS_CFUNC_DEF(\"notify\", 3, js_atomics_notify ),\n 55479:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Atomics\", JS_PROP_CONFIGURABLE ),\n 55480  };\n 55481  \n\n~/Projects/plot-cv/quickjs/qjs-net/tests/client.js:\n  103            value: () => ({ read: () => readable.next() })\n  104          },\n  105:         [Symbol.toStringTag]: { value: 'ReadableStream' }\n  106        }\n  107      ),\n\n~/Projects/plot-cv/quickjs/qjs-net/js/event-emitter.js:\n   47  }\n   48  \n   49: EventEmitter.prototype[Symbol.toStringTag] = 'EventEmitter';\n   50  \n\n~/Projects/plot-cv/quickjs/qjs-net/js/rpc.js:\n   39  \n   40  function getPrototypeName(proto) {\n   41:   return proto[Symbol.toStringTag] ?? proto.constructor?.name;\n   42  }\n   43  \n   ..\n  131  }\n  132  \n  133: define(RPCObject.prototype, { [Symbol.toStringTag]: 'RPCObject' });\n  134  \n  135  export function RPCFactory(api) {\n  ...\n  151  RPCFactory.prototype = function() {};\n  152  \n  153: define(RPCFactory.prototype, { [Symbol.toStringTag]: 'RPCFactory' });\n  154  \n  155  export function EncodeValue(arg) {\n  ...\n  288  }\n  289  \n  290: define(Connection.prototype, { [Symbol.toStringTag]: 'RPCConnection' });\n  291  define(Connection, { codecs });\n  292  \n  ...\n  455  }\n  456  \n  457: define(RPCServer.prototype, { [Symbol.toStringTag]: 'RPCServer' });\n  458  \n  459  /**\n  ...\n  497  }\n  498  \n  499: define(RPCClient.prototype, { [Symbol.toStringTag]: 'RPCClient' });\n  500  \n  501  export class FactoryClient extends RPCClient {\n  ...\n  681    });\n  682  }\n  683: define(RPCSocket.prototype, { [Symbol.toStringTag]: 'RPCSocket' });\n  684  \n  685  if(!isFunction(globalThis.WebSocket)) globalThis.WebSocket = function WebSocket() {};\n\n~/Projects/plot-cv/quickjs/qjs-net/src/minnet-client.c:\n 1161      JS_CGETSET_MAGIC_FLAGS_DEF(\"lineBuffered\", minnet_client_get, minnet_client_set, CLIENT_LINEBUFFERED, 0),\n 1162      // JS_CFUNC_MAGIC_DEF(\"[Symbol.asyncIterator]\", 0, minnet_client_iterator, CLIENT_ASYNCITERATOR),\n 1163:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"MinnetClient\", JS_PROP_CONFIGURABLE),\n 1164  };\n 1165  \n\n~/Projects/plot-cv/quickjs/qjs-net/src/minnet-websocket.c:\n  493      JS_CGETSET_MAGIC_FLAGS_DEF(\"readyState\", minnet_ws_get, 0, WEBSOCKET_READYSTATE, JS_PROP_ENUMERABLE),\n  494      JS_CGETSET_MAGIC_FLAGS_DEF(\"serial\", minnet_ws_get, 0, WEBSOCKET_SERIAL, JS_PROP_ENUMERABLE),\n  495:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"MinnetWebsocket\", JS_PROP_CONFIGURABLE),\n  496      JS_PROP_INT32_DEF(\"CONNECTING\", 0, JS_PROP_CONFIGURABLE),\n  497      JS_PROP_INT32_DEF(\"OPEN\", 1, JS_PROP_CONFIGURABLE),\n\n~/Projects/plot-cv/quickjs/qjs-net/src/minnet-ringbuffer.c:\n  453      JS_CGETSET_MAGIC_FLAGS_DEF(\"oldestTail\", minnet_ringbuffer_get, minnet_ringbuffer_set, RINGBUFFER_OLDEST_TAIL, JS_PROP_ENUMERABLE),\n  454      JS_CGETSET_MAGIC_FLAGS_DEF(\"linearInsertRange\", minnet_ringbuffer_get, 0, RINGBUFFER_INSERTRANGE, 0),\n  455:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"MinnetRingbuffer\", JS_PROP_CONFIGURABLE),\n  456  };\n  457  \n\n~/Projects/plot-cv/quickjs/qjs-net/src/minnet-generator.c:\n  253  static const JSCFunctionListEntry minnet_generator_iter[] = {\n  254      JS_CFUNC_DEF(\"[Symbol.asyncIterator]\", 0, (JSCFunction*)&JS_DupValue),\n  255:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"MinnetGeneratorIterator\", JS_PROP_CONFIGURABLE),\n  256  };\n  257  \n  ...\n  272      JS_CGETSET_MAGIC_DEF(\"chunkSize\", minnet_generator_get, 0, GENERATOR_CHUNK_SIZE),\n  273      JS_CFUNC_MAGIC_DEF(\"[Symbol.asyncIterator]\", 0, minnet_generator_method, GENERATOR_ITERATOR),\n  274:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"MinnetGenerator\", JS_PROP_CONFIGURABLE),\n  275  };\n  276  \n\n~/Projects/plot-cv/quickjs/qjs-net/src/minnet-formparser.c:\n  366      JS_CGETSET_MAGIC_DEF(\"onclose\", minnet_formparser_get, minnet_formparser_set, FORM_PARSER_ON_CLOSE),\n  367      JS_CGETSET_MAGIC_DEF(\"onfinalize\", minnet_formparser_get, minnet_formparser_set, FORM_PARSER_ON_FINALIZE),\n  368:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"MinnetFormParser\", JS_PROP_CONFIGURABLE),\n  369  };\n  370  \n\n~/Projects/plot-cv/quickjs/qjs-net/src/minnet-asynciterator.c:\n  102      JS_CFUNC_MAGIC_DEF(\"push\", 1, minnet_asynciterator_method, ASYNCITERATOR_PUSH),\n  103      JS_CFUNC_MAGIC_DEF(\"stop\", 0, minnet_asynciterator_method, ASYNCITERATOR_STOP),\n  104:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"AsyncIterator\", JS_PROP_CONFIGURABLE),\n  105  };\n  106  \n\n~/Projects/plot-cv/quickjs/qjs-net/src/minnet-url.c:\n  364      JS_CFUNC_MAGIC_DEF(\"toObject\", 0, minnet_url_method, URL_TO_OBJECT),\n  365      JS_CFUNC_DEF(\"inspect\", 0, minnet_url_inspect),\n  366:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"MinnetURL\", JS_PROP_CONFIGURABLE),\n  367  };\n  368  \n\n~/Projects/plot-cv/quickjs/qjs-net/src/minnet-server.c:\n  879      JS_CGETSET_MAGIC_DEF(\"onrequest\", minnet_server_get, minnet_server_set, SERVER_ONREQUEST),\n  880      JS_CGETSET_MAGIC_FLAGS_DEF(\"listening\", minnet_server_get, 0, SERVER_LISTENING, JS_PROP_ENUMERABLE),\n  881:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"MinnetServer\", JS_PROP_CONFIGURABLE),\n  882  };\n  883  \n\n~/Projects/plot-cv/quickjs/qjs-net/src/minnet-request.c:\n  395      JS_CFUNC_DEF(\"get\", 1, minnet_request_getheader),\n  396      JS_CFUNC_DEF(\"clone\", 0, minnet_request_clone),\n  397:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"MinnetRequest\", JS_PROP_CONFIGURABLE),\n  398  };\n  399  \n\n~/Projects/plot-cv/quickjs/qjs-net/src/minnet-headers.c:\n  246      JS_CGETSET_MAGIC_DEF(\"buffer\", minnet_headers_get, 0, HEADERS_BUFFER),\n  247      JS_CFUNC_DEF(\"inspect\", 0, minnet_headers_inspect),\n  248:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"MinnetHeaders\", JS_PROP_CONFIGURABLE),\n  249  };\n  250  \n\n~/Projects/plot-cv/quickjs/qjs-net/src/minnet-response.c:\n  465      JS_CGETSET_MAGIC_DEF(\"type\", minnet_response_get, 0, RESPONSE_TYPE),\n  466      JS_CGETSET_MAGIC_FLAGS_DEF(\"url\", minnet_response_get, minnet_response_set, RESPONSE_URL, JS_PROP_ENUMERABLE),\n  467:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"MinnetResponse\", JS_PROP_CONFIGURABLE),\n  468  };\n  469  \n\n~/Projects/plot-cv/quickjs/qjs-net/src/minnet-hash.c:\n  383      JS_CGETSET_MAGIC_FLAGS_DEF(\"hmac\", minnet_hash_get, 0, HASH_HMAC, 0),\n  384      JS_CGETSET_MAGIC_FLAGS_DEF(\"finalized\", minnet_hash_get, 0, HASH_FINALIZED, 0),\n  385:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"MinnetHash\", JS_PROP_CONFIGURABLE),\n  386      JS_PROP_INT32_DEF(\"TYPE_MD5\", LWS_GENHASH_TYPE_MD5, 0),\n  387      JS_PROP_INT32_DEF(\"TYPE_SHA1\", LWS_GENHASH_TYPE_SHA1, 0),\n\n~/Projects/plot-cv/quickjs/qjs-glfw/workarea.c:\n  146      JS_CGETSET_ENUMERABLE_MAGIC_DEF(\"size\", glfw_workarea_get, glfw_workarea_set, 1),\n  147      JS_CFUNC_DEF(\"[Symbol.iterator]\", 0, glfw_workarea_iterator),\n  148:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"GLFWworkarea\", JS_PROP_CONFIGURABLE),\n  149  };\n  150  \n\n~/Projects/plot-cv/quickjs/qjs-glfw/gamma_ramp.c:\n  119      JS_CGETSET_MAGIC_DEF(\"blue\", glfw_gamma_ramp_array, NULL, GAMMA_BLUE),\n  120      JS_CGETSET_ENUMERABLE_DEF(\"size\", glfw_gamma_ramp_size, NULL),\n  121:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"GLFWgammaramp\", JS_PROP_CONFIGURABLE),\n  122  };\n  123  \n\n~/Projects/plot-cv/quickjs/qjs-glfw/position.c:\n  113      JS_CGETSET_ENUMERABLE_MAGIC_DEF(\"y\", glfw_position_get, glfw_position_set, 1),\n  114      JS_CFUNC_DEF(\"[Symbol.iterator]\", 0, glfw_position_iterator),\n  115:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"GLFWposition\", JS_PROP_CONFIGURABLE),\n  116  };\n  117  \n\n~/Projects/plot-cv/quickjs/qjs-glfw/scale.c:\n  119      JS_CGETSET_ENUMERABLE_MAGIC_DEF(\"y\", glfw_scale_get, glfw_scale_set, 1),\n  120      JS_CFUNC_DEF(\"[Symbol.iterator]\", 0, glfw_scale_iterator),\n  121:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"GLFWscale\", JS_PROP_CONFIGURABLE),\n  122  };\n  123  \n\n~/Projects/plot-cv/quickjs/qjs-glfw/window.c:\n 1012      JS_CFUNC_MAGIC_DEF(\"getKey\", 1, glfw_window_functions, GET_KEY),\n 1013      JS_CFUNC_MAGIC_DEF(\"destroy\", 0, glfw_window_functions, DESTROY_WINDOW),\n 1014:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"GLFWwindow\", JS_PROP_CONFIGURABLE),\n 1015  };\n 1016  \n\n~/Projects/plot-cv/quickjs/qjs-glfw/image.c:\n  240      JS_CGETSET_ENUMERABLE_MAGIC_DEF(\"width\", glfw_image_get, NULL, IMAGE_WIDTH),\n  241      JS_CGETSET_ENUMERABLE_MAGIC_DEF(\"height\", glfw_image_get, NULL, IMAGE_HEIGHT),\n  242:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"GLFWimage\", JS_PROP_CONFIGURABLE),\n  243  };\n  244  \n\n~/Projects/plot-cv/quickjs/qjs-glfw/monitor.c:\n  229      JS_CGETSET_DEF(\"gamma\", glfw_monitor_get_gamma, glfw_monitor_set_gamma),\n  230      JS_CGETSET_DEF(\"userPointer\", glfw_monitor_get_ptr, glfw_monitor_set_ptr),\n  231:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"GLFWmonitor\", JS_PROP_CONFIGURABLE),\n  232  };\n  233  \n\n~/Projects/plot-cv/quickjs/qjs-glfw/size.c:\n  125      JS_CGETSET_ENUMERABLE_MAGIC_DEF(\"height\", glfw_size_get, glfw_size_set, 1),\n  126      JS_CFUNC_DEF(\"[Symbol.iterator]\", 0, glfw_size_iterator),\n  127:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"GLFWsize\", JS_PROP_CONFIGURABLE),\n  128  };\n  129  \n\n~/Projects/plot-cv/quickjs/qjs-glfw/video_mode.c:\n   67      JS_CGETSET_MAGIC_DEF(\"blueBits\", glfw_video_mode_get, glfw_video_mode_set, 4),\n   68      JS_CGETSET_ENUMERABLE_MAGIC_DEF(\"refreshRate\", glfw_video_mode_get, glfw_video_mode_set, 5),\n   69:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"GLFWvidmode\", JS_PROP_CONFIGURABLE),\n   70  };\n   71  \n\n~/Projects/plot-cv/quickjs/qjs-modules/quickjs-pointer.c:\n  443      JS_CGETSET_MAGIC_DEF(\"path\", js_pointer_get, js_pointer_set, PROP_PATH),\n  444      JS_CGETSET_MAGIC_DEF(\"atoms\", js_pointer_get, 0, PROP_ATOMS),\n  445:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Pointer\", JS_PROP_CONFIGURABLE),\n  446  };\n  447  \n\n~/Projects/plot-cv/quickjs/qjs-modules/quickjs-deep.c:\n  703      JS_ITERATOR_NEXT_DEF(\"next\", 0, js_deep_iterator_next, 0),\n  704      JS_CFUNC_DEF(\"[Symbol.iterator]\", 0, js_deep_iterator_iterator),\n  705:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Deep Iterator\", JS_PROP_CONFIGURABLE),\n  706  };\n  707  \n\n~/Projects/plot-cv/quickjs/qjs-modules/quickjs-queue.c:\n  258      JS_CGETSET_MAGIC_DEF(\"chunks\", js_queue_get, 0, QUEUE_CHUNKS),\n  259      JS_CFUNC_DEF(\"[Symbol.iterator]\", 0, js_queue_iterator),\n  260:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Queue\", JS_PROP_CONFIGURABLE),\n  261  };\n  262  \n  ...\n  286  static const JSCFunctionListEntry js_queue_iterator_funcs[] = {\n  287      JS_ITERATOR_NEXT_DEF(\"next\", 0, js_queue_iterator_next, 0),\n  288:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"QueueIterator\", JS_PROP_CONFIGURABLE),\n  289  };\n  290  \n\n~/Projects/plot-cv/quickjs/qjs-modules/quickjs-location.c:\n  423      JS_CFUNC_DEF(\"clone\", 0, js_location_clone),\n  424      JS_CFUNC_MAGIC_DEF(\"toString\", 0, js_location_methods, LOCATION_TOSTRING),\n  425:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Location\", JS_PROP_CONFIGURABLE),\n  426  };\n  427  \n\n~/Projects/plot-cv/quickjs/qjs-modules/quickjs-list.c:\n 1261      JS_ALIAS_DEF(\"[Symbol.iterator]\", \"values\"),\n 1262      JS_CGETSET_MAGIC_DEF(\"size\", js_list_get, 0, PROP_LENGTH),\n 1263:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"List\", JS_PROP_CONFIGURABLE),\n 1264  };\n 1265  \n ....\n 1276      JS_CFUNC_DEF(\"next\", 0, js_list_iterator_fn),\n 1277      JS_CFUNC_DEF(\"[Symbol.iterator]\", 0, (void*)&JS_DupValue),\n 1278:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"ListIterator\", JS_PROP_CONFIGURABLE),\n 1279  };\n 1280  \n\n~/Projects/plot-cv/quickjs/qjs-modules/quickjs-archive.c:\n  910      JS_PROP_INT32_DEF(\"READ\", 0, JS_PROP_CONFIGURABLE),\n  911      JS_PROP_INT32_DEF(\"WRITE\", 1, JS_PROP_CONFIGURABLE),\n  912:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Archive\", JS_PROP_CONFIGURABLE),\n  913  };\n  914  \n  915  static const JSCFunctionListEntry js_archive_iterator_funcs[] = {\n  916      JS_ITERATOR_NEXT_DEF(\"next\", 0, js_archive_iterator_next, 0),\n  917:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"ArchiveIterator\", JS_PROP_CONFIGURABLE),\n  918  };\n  919  \n  ...\n 1900      JS_CGETSET_MAGIC_DEF(\"isMetadataEncrypted\", js_archiveentry_get, js_archiveentry_set, ENTRY_ISMETADATAENCRYPTED),\n 1901      JS_CGETSET_MAGIC_DEF(\"isEncrypted\", js_archiveentry_get, js_archiveentry_set, ENTRY_ISENCRYPTED),\n 1902:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"ArchiveEntry\", JS_PROP_CONFIGURABLE),\n 1903  };\n 1904  \n ....\n 1967      JS_CFUNC_MAGIC_DEF(\"include\", 1, js_archivematch_functions, MATCH_INCLUDE),\n 1968      JS_CFUNC_MAGIC_DEF(\"exclude\", 1, js_archivematch_functions, MATCH_EXCLUDE),\n 1969:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"ArchiveMatch\", JS_PROP_CONFIGURABLE),\n 1970  };\n 1971  \n\n~/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.c:\n  900      JS_CFUNC_MAGIC_DEF(\"releaseLock\", 0, js_reader_method, READER_RELEASE_LOCK),\n  901      JS_CGETSET_MAGIC_DEF(\"closed\", js_reader_get, 0, READER_PROP_CLOSED),\n  902:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"ReadableStreamDefaultReader\", JS_PROP_CONFIGURABLE),\n  903  };\n  904  \n  ...\n 1177      JS_CGETSET_MAGIC_FLAGS_DEF(\"closed\", js_readable_get, 0, READABLE_PROP_CLOSED, JS_PROP_ENUMERABLE),\n 1178      JS_CGETSET_MAGIC_FLAGS_DEF(\"locked\", js_readable_get, 0, READABLE_PROP_LOCKED, JS_PROP_ENUMERABLE),\n 1179:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Readable\", JS_PROP_CONFIGURABLE),\n 1180  };\n 1181  \n ....\n 1185      JS_CFUNC_MAGIC_DEF(\"error\", 1, js_readable_controller, READABLE_ERROR),\n 1186      JS_CGETSET_DEF(\"desiredSize\", js_readable_desired, 0),\n 1187:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"ReadableStreamDefaultController\", JS_PROP_CONFIGURABLE),\n 1188  };\n 1189  \n ....\n 1686      JS_CGETSET_MAGIC_DEF(\"closed\", js_writer_get, 0, WRITER_PROP_CLOSED),\n 1687      JS_CGETSET_MAGIC_DEF(\"ready\", js_writer_get, 0, WRITER_PROP_READY),\n 1688:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"WritableStreamDefaultWriter\", JS_PROP_CONFIGURABLE),\n 1689  };\n 1690  \n ....\n 1947      JS_CFUNC_MAGIC_DEF(\"getWriter\", 0, js_writable_method, WRITABLE_GET_WRITER),\n 1948      JS_CGETSET_MAGIC_FLAGS_DEF(\"locked\", js_writable_get, 0, WRITABLE_PROP_LOCKED, JS_PROP_ENUMERABLE),\n 1949:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"WritableStream\", JS_PROP_CONFIGURABLE),\n 1950      JS_CFUNC_DEF(\"[Symbol.iterator]\", 0, js_writable_iterator),\n 1951  };\n ....\n 1953  const JSCFunctionListEntry js_writable_controller_funcs[] = {\n 1954      JS_CFUNC_MAGIC_DEF(\"error\", 0, js_writable_controller, WRITABLE_ERROR),\n 1955:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"WritableStreamDefaultController\", JS_PROP_CONFIGURABLE),\n 1956  };\n 1957  \n ....\n 2217      JS_CGETSET_MAGIC_FLAGS_DEF(\"readable\", js_transform_get, 0, TRANSFORM_PROP_READABLE, JS_PROP_ENUMERABLE),\n 2218      JS_CGETSET_MAGIC_FLAGS_DEF(\"writable\", js_transform_get, 0, TRANSFORM_PROP_WRITABLE, JS_PROP_ENUMERABLE),\n 2219:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"TransformStream\", JS_PROP_CONFIGURABLE),\n 2220  };\n 2221  \n ....\n 2225      JS_CFUNC_MAGIC_DEF(\"error\", 1, js_transform_controller, TRANSFORM_ERROR),\n 2226      JS_CGETSET_DEF(\"desiredSize\", js_transform_desired, 0),\n 2227:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"TransformStreamDefaultController\", JS_PROP_CONFIGURABLE),\n 2228  };\n 2229  \n\n~/Projects/plot-cv/quickjs/qjs-modules/quickjs-serial.c:\n  596      JS_CGETSET_MAGIC_DEF(\"inputWaiting\", js_serialport_get, 0, SERIALPORT_INPUTWAITING),\n  597      JS_CGETSET_MAGIC_DEF(\"outputWaiting\", js_serialport_get, 0, SERIALPORT_OUTPUTWAITING),\n  598:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"SerialPort\", JS_PROP_CONFIGURABLE),\n  599  };\n  600  \n  ...\n  620      JS_PROP_STRING_DEF(\"name\", \"SerialError\", JS_PROP_WRITABLE | JS_PROP_CONFIGURABLE),\n  621      JS_PROP_INT32_DEF(\"type\", 0, JS_PROP_WRITABLE | JS_PROP_CONFIGURABLE),\n  622:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"SerialError\", JS_PROP_CONFIGURABLE),\n  623  };\n  624  \n\n~/Projects/plot-cv/quickjs/qjs-modules/quickjs-gpio.c:\n  185      JS_CFUNC_MAGIC_DEF(\"getPin\", 1, js_gpio_functions, GPIO_METHOD_GET_PIN),\n  186      JS_CGETSET_MAGIC_DEF(\"buffer\", js_gpio_getter, 0, GPIO_BUFFER),\n  187:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"GPIO\", JS_PROP_CONFIGURABLE),\n  188  };\n  189  \n\n~/Projects/plot-cv/quickjs/qjs-modules/quickjs-blob.c:\n  293      JS_CGETSET_MAGIC_DEF(\"size\", js_blob_get, 0, BLOB_SIZE),\n  294      JS_CGETSET_MAGIC_DEF(\"type\", js_blob_get, 0, BLOB_TYPE),\n  295:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Blob\", JS_PROP_CONFIGURABLE),\n  296  };\n  297  \n\n~/Projects/plot-cv/quickjs/qjs-modules/quickjs-directory.c:\n  282      JS_CFUNC_MAGIC_DEF(\"throw\", 1, js_directory_method, DIRECTORY_THROW),\n  283      JS_CFUNC_MAGIC_DEF(\"[Symbol.iterator]\", 0, js_directory_method, DIRECTORY_ITERATOR),\n  284:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Directory\", JS_PROP_CONFIGURABLE),\n  285  };\n  286  \n\n~/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c:\n  126    vector_init(&opts->hide_keys, ctx);\n  127  \n  128:   opts->class_key = (PropertyKey){0, JS_DupAtom(ctx, js_atom_from(ctx, \"[Symbol.toStringTag]\"))};\n  129    opts->class_key.name = JS_AtomToCString(ctx, opts->class_key.atom);\n  130  \n\n~/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.c:\n  518      JS_CFUNC_MAGIC_DEF(\"clone\", 0, js_sockaddr_method, SOCKADDR_CLONE),\n  519      JS_CFUNC_MAGIC_DEF(\"toString\", 0, js_sockaddr_method, SOCKADDR_TOSTRING),\n  520:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"SockAddr\", 0),\n  521  };\n  522  \n  ...\n 1899      JS_CFUNC_DEF(\"valueOf\", 0, js_socket_valueof),\n 1900      JS_ALIAS_DEF(\"[Symbol.toPrimitive]\", \"valueOf\"),\n 1901:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Socket\", JS_PROP_CONFIGURABLE),\n 1902  };\n 1903  \n ....\n 1931      JS_CFUNC_DEF(\"valueOf\", 0, js_socket_valueof),\n 1932      JS_ALIAS_DEF(\"[Symbol.toPrimitive]\", \"valueOf\"),\n 1933:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"AsyncSocket\", JS_PROP_CONFIGURABLE),\n 1934  };\n 1935  \n\n~/Projects/plot-cv/quickjs/qjs-modules/quickjs-syscallerror.c:\n  303      JS_CFUNC_MAGIC_DEF(\"toString\", 0, js_syscallerror_method, SYSCALLERROR_TOSTRING),\n  304      JS_ALIAS_DEF(\"[Symbol.toPrimitive]\", \"toString\"),\n  305:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"SyscallError\", JS_PROP_CONFIGURABLE),\n  306  };\n  307  \n\n~/Projects/plot-cv/quickjs/qjs-modules/quickjs-repeater.c:\n  494      JS_CFUNC_DEF(\"next\", 0, js_repeater_next),\n  495      JS_CGETSET_MAGIC_DEF(\"state\", js_repeater_get, 0, PROP_STATE),\n  496:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Repeater\", JS_PROP_CONFIGURABLE),\n  497      JS_CFUNC_DEF(\"[Symbol.asyncIterator]\", 0, js_repeater_iterator),\n  498  };\n\n~/Projects/plot-cv/quickjs/qjs-modules/quickjs-pgsql.c:\n 1245      JS_CFUNC_DEF(\"insertQuery\", 2, js_pgconn_insert_query),\n 1246      // JS_CFUNC_MAGIC_DEF(\"escapeString\", 1, js_pgconn_methods, METHOD_ESCAPE_STRING),\n 1247:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"PGconn\", JS_PROP_CONFIGURABLE),\n 1248  };\n 1249  \n ....\n 1320      JS_PROP_STRING_DEF(\"name\", \"PGerror\", JS_PROP_WRITABLE | JS_PROP_CONFIGURABLE),\n 1321      JS_PROP_INT32_DEF(\"type\", 0, JS_PROP_WRITABLE | JS_PROP_CONFIGURABLE),\n 1322:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"PGerror\", JS_PROP_CONFIGURABLE),\n 1323  };\n 1324  \n ....\n 1792      JS_CFUNC_MAGIC_DEF(\"fetchAssoc\", 0, js_pgresult_functions, METHOD_FETCH_ASSOC),\n 1793      JS_CFUNC_DEF(\"[Symbol.iterator]\", 0, js_pgresult_iterator),\n 1794:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"PGresult\", JS_PROP_CONFIGURABLE),\n 1795  };\n 1796  \n\n~/Projects/plot-cv/quickjs/qjs-modules/quickjs-predicate.c:\n  907      JS_CFUNC_MAGIC_DEF(\"values\", 0, js_predicate_method, METHOD_VALUES),\n  908      JS_CGETSET_MAGIC_DEF(\"length\", js_predicate_get, 0, PROP_ARGC),\n  909:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Predicate\", JS_PROP_CONFIGURABLE),\n  910  };\n  911  \n\n~/Projects/plot-cv/quickjs/qjs-modules/quickjs-mysql.c:\n 1209      JS_CFUNC_MAGIC_DEF(\"setOption\", 2, js_mysql_methods, METHOD_SET_OPTION),\n 1210      JS_PROP_INT32_DEF(\"resultType\", 0, JS_PROP_C_W_E),\n 1211:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"MySQL\", JS_PROP_CONFIGURABLE),\n 1212  };\n 1213  \n ....\n 1345      JS_PROP_STRING_DEF(\"name\", \"MySQLError\", JS_PROP_WRITABLE | JS_PROP_CONFIGURABLE),\n 1346      JS_PROP_INT32_DEF(\"type\", 0, JS_PROP_WRITABLE | JS_PROP_CONFIGURABLE),\n 1347:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"MySQLError\", JS_PROP_CONFIGURABLE),\n 1348  };\n 1349  \n ....\n 1794      JS_CFUNC_MAGIC_DEF(\"[Symbol.iterator]\", 0, js_mysqlresult_iterator, METHOD_ITERATOR),\n 1795      JS_CFUNC_MAGIC_DEF(\"[Symbol.asyncIterator]\", 0, js_mysqlresult_iterator, METHOD_ASYNC_ITERATOR),\n 1796:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"MySQLResult\", JS_PROP_CONFIGURABLE),\n 1797  };\n 1798  \n\n~/Projects/plot-cv/quickjs/qjs-modules/quickjs-tree-walker.c:\n  563      JS_CGETSET_MAGIC_DEF(\"flags\", js_tree_walker_get, js_tree_walker_set, PROP_FLAGS),\n  564      JS_CFUNC_DEF(\"toString\", 0, js_tree_walker_tostring),\n  565:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"TreeWalker\", JS_PROP_CONFIGURABLE),\n  566  };\n  567  \n  ...\n  589  static const JSCFunctionListEntry js_tree_iterator_proto_funcs[] = {\n  590      JS_ITERATOR_NEXT_DEF(\"next\", 0, js_tree_iterator_next, 0),\n  591:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"TreeIterator\", JS_PROP_CONFIGURABLE),\n  592      JS_CFUNC_DEF(\"[Symbol.iterator]\", 0, js_tree_walker_iterator),\n  593  };\n\n~/Projects/plot-cv/quickjs/qjs-modules/quickjs-child-process.c:\n  375      JS_CFUNC_DEF(\"wait\", 0, js_child_process_wait),\n  376      JS_CFUNC_MAGIC_DEF(\"kill\", 0, js_child_process_kill, 0),\n  377:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"ChildProcess\", 0),\n  378  };\n  379  \n\n~/Projects/plot-cv/quickjs/qjs-modules/quickjs-textcode.c:\n  347      JS_CGETSET_MAGIC_DEF(\"endian\", js_decoder_get, 0, DECODER_ENDIANNESS),\n  348      JS_CGETSET_MAGIC_DEF(\"buffered\", js_decoder_get, 0, DECODER_BUFFERED),\n  349:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"TextDecoder\", JS_PROP_CONFIGURABLE),\n  350  };\n  351  \n  ...\n  616      JS_CGETSET_MAGIC_DEF(\"endian\", js_encoder_get, 0, ENCODER_ENDIANNESS),\n  617      JS_CGETSET_MAGIC_DEF(\"buffered\", js_encoder_get, 0, ENCODER_BUFFERED),\n  618:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"TextEncoder\", JS_PROP_CONFIGURABLE),\n  619  };\n  620  \n\n~/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js:\n  295      close: () => {},\n  296      seek: (whence, offset) => os.seek(fd, whence, offset),\n  297:     [Symbol.toStringTag]: `FileWriter< ${fd} >`,\n  298      inspect() {\n  299:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  300      }\n  301    });\n  ...\n  316      write: fn,\n  317      close: () => {},\n  318:     [Symbol.toStringTag]: `ArrayWriter`,\n  319      inspect() {\n  320:       return inspect({ arr }) ?? this[Symbol.toStringTag];\n  321      }\n  322    });\n  ...\n  332      close: () => {},\n  333      seek: () => {},\n  334:     [Symbol.toStringTag]: `DummyWriter< ${name} >`,\n  335      inspect() {\n  336:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  337      }\n  338    });\n  ...\n  639  \n  640  define(Import.prototype, {\n  641:   [Symbol.toStringTag]: 'Import',\n  642    ids(pred = local => true) {\n  643      return ImportIds(this.tokens.slice())\n  ...\n 1346  \n 1347  define(NumericRange.prototype, {\n 1348:   [Symbol.toStringTag]: 'NumericRange',\n 1349    [inspectSymbol](depth, opts) {\n 1350      const [start, end] = this;\n ....\n 1404            return '';\n 1405          },\n 1406:         [Symbol.toStringTag]: 'FileMap(empty)'\n 1407        };\n 1408        return Object.setPrototypeOf(obj, FileMap.prototype);\n ....\n 1746  }\n 1747  \n 1748: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1749  \n 1750  function BufferFile(file, buf) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.c:\n  290      JS_ALIAS_DEF(\"length\", \"charLength\"),\n  291      JS_ALIAS_DEF(\"range\", \"charRange\"),\n  292:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Token\", JS_PROP_CONFIGURABLE),\n  293  };\n  294  \n  ...\n 1468      JS_CFUNC_MAGIC_DEF(\"[Symbol.iterator]\", 0, js_lexer_iterator, YIELD_ID | YIELD_DONE_VALUE),\n 1469      JS_CFUNC_MAGIC_DEF(\"values\", 0, js_lexer_iterator, YIELD_OBJ | YIELD_DONE_VALUE),\n 1470:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Lexer\", JS_PROP_CONFIGURABLE),\n 1471  };\n 1472  \n\n~/Projects/plot-cv/quickjs/qjs-modules/quickjs-magic.c:\n  335      JS_CFUNC_MAGIC_DEF(\"setparam\", 2, js_magic_method, METHOD_SETPARAM),\n  336      JS_CGETSET_MAGIC_DEF(\"version\", js_magic_get, 0, METHOD_VERSION),\n  337:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Magic\", JS_PROP_CONFIGURABLE),\n  338  };\n  339  \n\n~/Projects/plot-cv/quickjs/qjs-modules/tmp/resolve-imports.js:\n  250      },\n  251      seek: (whence, offset) => os.seek(fd2, whence, offset),\n  252:     [Symbol.toStringTag]: `FileWriter< ${fd2} >`,\n  253      inspect() {\n  254:       return inspect({ fd: fd2 }) ?? this[Symbol.toStringTag];\n  255      }\n  256    });\n  ...\n  267      close: () => {\n  268      },\n  269:     [Symbol.toStringTag]: `ArrayWriter`,\n  270      inspect() {\n  271:       return inspect({ arr }) ?? this[Symbol.toStringTag];\n  272      }\n  273    });\n  ...\n  284      seek: () => {\n  285      },\n  286:     [Symbol.toStringTag]: `DummyWriter< ${name} >`,\n  287      inspect() {\n  288:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  289      }\n  290    });\n  ...\n  539  }\n  540  define(Import.prototype, {\n  541:   [Symbol.toStringTag]: \"Import\",\n  542    ids(pred = (local) => true) {\n  543      return ImportIds(this.tokens.slice()).map(({ lexeme }) => lexeme).filter(pred);\n  ...\n 1054  };\n 1055  define(NumericRange.prototype, {\n 1056:   [Symbol.toStringTag]: \"NumericRange\",\n 1057    [inspectSymbol](depth, opts) {\n 1058      const [start, end] = this;\n ....\n 1105            return \"\";\n 1106          },\n 1107:         [Symbol.toStringTag]: \"FileMap(empty)\"\n 1108        };\n 1109        return Object.setPrototypeOf(obj, _FileMap.prototype);\n ....\n 1388    }\n 1389  };\n 1390: FileMap.prototype[Symbol.toStringTag] = \"FileMap\";\n 1391  function BufferFile(file2, buf) {\n 1392    file2 = path.resolve(file2);\n\n~/Projects/plot-cv/quickjs/qjs-modules/streams/demos/transforms/text-encode-transform.js:\n  146    function exportAs(name, value) {\n  147      // Make it stringify as [object <name>] rather than [object Object].\n  148:     value.prototype[Symbol.toStringTag] = name;\n  149      Object.defineProperty(self, name,\n  150                            {\n\n~/Projects/plot-cv/quickjs/qjs-modules/tests/test_dom.js:\n  173              Recurse(attr, fn, [...stack, node]);\n  174              //console.log('Attr', attr, Node.path(attr));\n  175:           } //Recurse({ name: attr, value:attributes[attr],[Symbol.toStringTag]: 'Attr', __proto__: Attr.prototype }, fn, [...stack, node]);\n  176          }\n  177        }\n\n~/Projects/plot-cv/quickjs/qjs-modules/tests/test_lexer.js:\n  209        compact: 1,\n  210        stringBreakNewline: false,\n  211:       hideKeys: [Symbol.toStringTag]\n  212      }\n  213    });\n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/inotify.js:\n   71                return this.watch(event);\n   72              },\n   73:             [Symbol.toStringTag]: 'InotifyEvent'\n   74            });\n   75  */\n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/socklen_t.js:\n   16    }\n   17  \n   18:   get [Symbol.toStringTag]() {\n   19      return 'socklen_t';\n   20    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/console.js:\n   51      numberBase: 10,\n   52      classKey: Symbol.toStringTag,\n   53:     hideKeys: [Symbol.toStringTag]\n   54    };\n   55  \n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/io.js:\n   51  }\n   52  \n   53: define(HandlerEntry.prototype, { [Symbol.toStringTag]: 'HandlerEntry' });\n   54  \n   55  export class DescriptorMap extends Array {\n   ..\n   90  }\n   91  \n   92: define(DescriptorMap.prototype, { [Symbol.toStringTag]: 'DescriptorMap' });\n   93  \n   94  export class Multiplexer {\n   ..\n  154  }\n  155  \n  156: define(Multiplexer.prototype, { [Symbol.toStringTag]: 'Multiplexer' });\n  157  \n  158  const io = new Multiplexer();\n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/misc.js:\n  304      .split(/,\\s*/g);\n  305  \n  306: export const getClassName = obj => (isObject(obj) ? ('constructor' in obj && obj.constructor.name) || obj[Symbol.toStringTag] : undefined);\n  307  \n  308  export function bits(arrayBuffer, start, end) {\n  ...\n  331          if('constructor' in value) name = value.constructor.name ?? (value.constructor + '').replace(/^\\s*function\\s*/g, '').replace(/\\(.*/g, '');\n  332          name ??= getTypeName(Object.getPrototypeOf(value));\n  333:         name ??= value[Symbol.toStringTag];\n  334          return name;\n  335        }\n  ...\n  343  \n  344  export function isArrayBuffer(obj) {\n  345:   return obj instanceof ArrayBuffer || obj[Symbol.toStringTag] == 'ArrayBuffer';\n  346  }\n  347  \n  348  export function isBigDecimal(num) {\n  349:   return typeof num == 'bigdecimal' || num[Symbol.toStringTag] == 'BigDecimal';\n  350  }\n  351  \n  352  export function isBigFloat(num) {\n  353:   return typeof num == 'bigfloat' || num[Symbol.toStringTag] == 'BigFloat';\n  354  }\n  355  \n  356  export function isBigInt(num) {\n  357:   return typeof num == 'bigint' || num[Symbol.toStringTag] == 'isBigInt';\n  358  }\n  359  \n  ...\n  375  \n  376  export function isError(value) {\n  377:   return value instanceof Error || value[Symbol.toStringTag].endsWith('Error');\n  378  }\n  379  \n  ...\n  434  \n  435  export function isSymbol(value) {\n  436:   return typeof value == 'symbol' || value[Symbol.toStringTag] == 'Symbol';\n  437  }\n  438  \n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/require.js:\n   95  }\n   96  \n   97: define(Module.prototype, { [Symbol.toStringTag]: 'Module' });\n   98  \n   99  class CJSModule extends Module {\n  ...\n  137  }\n  138  \n  139: define(CJSModule.prototype, { [Symbol.toStringTag]: 'CJSModule' });\n  140  \n  141  class ESModule extends Module {\n  ...\n  170  }\n  171  \n  172: define(ESModule.prototype, { [Symbol.toStringTag]: 'ESModule' });\n  173  \n  174  function statPath(path) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/xpath.js:\n   12  }\n   13  \n   14: DereferenceError.prototype[Symbol.toStringTag] = 'DereferenceError';\n   15  \n   16  export class XPath {\n   ..\n  118      return;\n  119      `\\x1b[1;31m${this.constructor.name ?? className(this)}\\x1b[0m ` +\n  120:       inspect([...this].map(GetKey) ?? { __proto__: { [Symbol.toStringTag]: 'XPath' }, ...obj }, {\n  121          ...opts,\n  122          customInspect: true\n  ...\n  124    }\n  125  \n  126:   get [Symbol.toStringTag]() {\n  127      return 'XPath';\n  128    }\n  ...\n  131  }\n  132  \n  133: define(XPath.prototype, { [Symbol.toStringTag]: 'XPath' });\n  134  \n  135  export const ImmutableXPath = XPath;\n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/stack.js:\n   31  }\n   32  \n   33: Stack.prototype[Symbol.toStringTag] = 'Stack';\n   34  \n   35  Stack.prototype.toString = function() {\n   ..\n   46  Stack.prototype[inspectSymbol] = function(depth, options) {\n   47    return (\n   48:     `\\x1b[1;31m${this[Symbol.toStringTag]}\\x1b[0m ` +\n   49      inspect([...this], depth, {\n   50        ...options,\n   ..\n  216    }\n  217  \n  218:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  219      return 'StackFrame';\n  220    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/dom.js:\n  571  define(Node.prototype, Interface.prototype);\n  572  extend(Node.prototype, NODE_TYPES, { enumerable: false });\n  573: extend(Node.prototype, { [Symbol.toStringTag]: 'Node' }, { enumerable: false });\n  574  \n  575  function MakeCache(ctor, store = new WeakMap()) {\n  ...\n  652    NodeList.prototype,\n  653    {\n  654:     [Symbol.toStringTag]: 'NodeList',\n  655      *[Symbol.iterator]() {\n  656        const factory = Factory.for(this);\n  ...\n  701      constructor: NamedNodeMap,\n  702  \n  703:     [Symbol.toStringTag]: 'NamedNodeMap',\n  704  \n  705      get path() {\n  ...\n  994  }\n  995  \n  996: extend(Element.prototype, { [Symbol.toStringTag]: 'Element', nodeType: ELEMENT_NODE }, { enumerable: false });\n  997  \n  998  /*\n  ...\n 1167  }\n 1168  \n 1169: extend(Document.prototype, { [Symbol.toStringTag]: 'Document', nodeType: DOCUMENT_NODE }, { enumerable: false });\n 1170  \n 1171  export class Attr extends Node {\n ....\n 1227    {\n 1228      nodeType: ATTRIBUTE_NODE,\n 1229:     [Symbol.toStringTag]: 'Attr'\n 1230    },\n 1231    { enumerable: false }\n ....\n 1273  \n 1274    [inspectSymbol](depth, opts) {\n 1275:     return `\\x1b[1;31m${this[Symbol.toStringTag]}\\x1b[0m \\x1b[38;2;192;2550m${quote(this.data, \"'\")}\\x1b[0m`;\n 1276    }\n 1277  \n ....\n 1286      nodeType: TEXT_NODE,\n 1287      nodeName: '#text',\n 1288:     [Symbol.toStringTag]: 'Text'\n 1289    },\n 1290    { enumerable: false }\n ....\n 1333      nodeType: COMMENT_NODE,\n 1334      nodeName: '#comment',\n 1335:     [Symbol.toStringTag]: 'Comment'\n 1336    },\n 1337    { enumerable: false }\n ....\n 1436    TokenList.prototype,\n 1437    {\n 1438:     [Symbol.toStringTag]: 'TokenList'\n 1439    },\n 1440    { enumerable: false }\n ....\n 1594      constructor: CSSStyleDeclaration,\n 1595  \n 1596:     [Symbol.toStringTag]: 'CSSStyleDeclaration',\n 1597  \n 1598      get parentRule() {\n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/tty.js:\n   10  \n   11  define(ReadStream.prototype, {\n   12:   [Symbol.toStringTag]: 'ReadStream'\n   13  });\n   14  \n   ..\n   93      configurable: true\n   94    },\n   95:   [Symbol.toStringTag]: { value: 'WriteStream', configurable: true }\n   96  });\n   97  \n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/util.js:\n  182    },\n  183    isModuleNamespaceObject(v) {\n  184:     return isObject(v) && v[Symbol.toStringTag] == 'Module';\n  185    },\n  186    isConstructor(v) {\n  ...\n 1987  export function className(obj) {\n 1988    if(isObject(obj)) {\n 1989:     if(Symbol.toStringTag in obj) return obj[Symbol.toStringTag];\n 1990      if('constructor' in obj) return functionName(obj.constructor);\n 1991    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/db.js:\n   95  \n   96  define(Pool.prototype, {\n   97:   [Symbol.toStringTag]: 'Pool'\n   98  });\n   99  \n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/repl.js:\n 2084  \n 2085  Object.assign(REPL.prototype, {\n 2086:   [Symbol.toStringTag]: 'REPL',\n 2087    handleInput: REPL.prototype.evalAndPrint,\n 2088    directives: loadModule\n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/streams.js:\n  137    }\n  138  \n  139:   define(ByLineStream.prototype, { [Symbol.toStringTag]: 'ByLineStream' });\n  140  \n  141    return ByLineStream;\n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/fs.js:\n  135  }\n  136  \n  137: Stats.prototype[Symbol.toStringTag] = 'Stats';\n  138  \n  139  for(let prop in statsFields) Object.defineProperty(Stats.prototype, prop, { value: undefined, enumerable: false, writable: true, configurable: true });\n  ...\n  279  }\n  280  \n  281: FileHandle.prototype[Symbol.toStringTag] = 'FileHandle';\n  282  \n  283  delete FileHandle.prototype.constructor;\n  ...\n  877    }\n  878  \n  879:   [Symbol.toStringTag] = 'inotify_event';\n  880  }\n  881  \n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/parser.js:\n   22  }\n   23  \n   24: define(Rule.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'Rule' });\n   25  \n   26  export class Terminal extends Rule {\n   ..\n   45  }\n   46  \n   47: define(Terminal.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'Terminal' });\n   48  \n   49  export class ZeroOrMore extends Rule {\n   ..\n   63  }\n   64  \n   65: define(ZeroOrMore.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'ZeroOrMore' });\n   66  \n   67  export function make_operators_set(...op_list) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/events.js:\n   55  }\n   56  \n   57: EventEmitter.prototype[Symbol.toStringTag] = 'EventEmitter';\n   58  \n   59  const PRIVATE = Symbol('EventTarget');\n   ..\n   98  }\n   99  \n  100: EventTarget.prototype[Symbol.toStringTag] = 'EventTarget';\n  101  \n  102  const getMethods = obj =>\n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/vfs.js:\n  311            for(let chunk of q) written += ar.write(chunk);\n  312          },\n  313:         [Symbol.toStringTag]: 'WriteStream'\n  314        };\n  315      } else {\n  ...\n  329            error: () => ar.error != null,\n  330            close: () => ar.close(),\n  331:           [Symbol.toStringTag]: 'ReadStream'\n  332          };\n  333        }\n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/lexer/c.js:\n  118  globalThis.CLexer = CLexer;\n  119  \n  120: define(CLexer.prototype, { [Symbol.toStringTag]: 'CLexer' });\n  121  \n  122  export default CLexer;\n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/lexer/csv.js:\n   23    }\n   24  \n   25:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n   26      return \"CSVLexer\";\n   27    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/lexer/ecmascript.js:\n  129    }\n  130  \n  131:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  132      return \"ECMAScriptLexer\";\n  133    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/lexer/bnf.js:\n  194    }\n  195  \n  196:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  197      return \"BNFLexer\";\n  198    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/web-platform-tests-streams/wasm/jsapi/constructor/toStringTag.any.js:\n   37    });\n   38  \n   39:   assert_true(delete WebAssembly[Symbol.toStringTag]);\n   40    assert_equals(WebAssembly.toString(), \"[object Object]\");\n   41    assert_equals(Object.prototype.toString.call(WebAssembly), \"[object Object]\");\n\n~/Projects/plot-cv/quickjs/qjs-modules/web-platform-tests-streams/webidl/ecmascript-binding/class-string-interface.any.js:\n   56  // This test must be last.\n   57  test(() => {\n   58:   delete Blob.prototype[Symbol.toStringTag];\n   59  \n   60    assert_equals(Object.prototype.toString.call(Blob.prototype), \"[object Object]\", \"prototype\");\n\n~/Projects/plot-cv/quickjs/qjs-modules/web-platform-tests-streams/webidl/ecmascript-binding/observable-array-ownkeys.window.js:\n   22        \"Own properties whose key is an array index have been added.\");\n   23  \n   24:   observableArray[Symbol.toStringTag] = \"string_tag\";\n   25    observableArray[Symbol.toPrimitive] = \"primitive\";\n   26    assert_array_equals(\n\n~/Projects/plot-cv/quickjs/qjs-modules/web-platform-tests-streams/fetch/api/headers/headers-record.any.js:\n  271    var record = {\n  272      a: \"b\",\n  273:     [Symbol.toStringTag]: {\n  274        // Make sure the ToString conversion of the value happens\n  275        // after the ToString conversion of the key.\n  ...\n  309        toString: function() { addLogEntry(\"toString\", [this]); return \"b\"; }\n  310      },\n  311:     [Symbol.toStringTag]: {\n  312        toString: function () { addLogEntry(\"toString\", [this]); return \"nope\"; }\n  313      },\n\n~/Projects/plot-cv/quickjs/qjs-modules/web-platform-tests-streams/generic-sensor/resources/generic-sensor-helpers.js:\n  112  \n  113  function get_sensor_reading_properties(sensor) {\n  114:   const className = sensor[Symbol.toStringTag];\n  115    if ([\n  116          'Accelerometer', 'GravitySensor', 'Gyroscope',\n  ...\n  174  \n  175    // Note that this is not serialized by postMessage().\n  176:   sensorData[Symbol.toStringTag] = sensor[Symbol.toStringTag];\n  177  \n  178    return sensorData;\n\n~/Projects/plot-cv/quickjs/qjs-modules/web-platform-tests-streams/console/console-namespace-object-class-string.any.js:\n   37    });\n   38  \n   39:   assert_true(delete console[Symbol.toStringTag]);\n   40    assert_equals(console.toString(), \"[object Object]\");\n   41    assert_equals(Object.prototype.toString.call(console), \"[object Object]\");\n\n~/Projects/plot-cv/quickjs/qjs-modules/web-platform-tests-streams/WebCryptoAPI/util/helpers.js:\n  162      });\n  163      assert_equals(key.usages.length, usageCount, \"usages property is correct\");\n  164:     assert_equals(key[Symbol.toStringTag], 'CryptoKey', \"has the expected Symbol.toStringTag\");\n  165  }\n  166  \n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/bin/check-imports.js:\n  295      close: () => {},\n  296      seek: (whence, offset) => os.seek(fd, whence, offset),\n  297:     [Symbol.toStringTag]: `FileWriter< ${fd} >`,\n  298      inspect() {\n  299:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  300      }\n  301    });\n  ...\n  316      write: fn,\n  317      close: () => {},\n  318:     [Symbol.toStringTag]: `ArrayWriter`,\n  319      inspect() {\n  320:       return inspect({ arr }) ?? this[Symbol.toStringTag];\n  321      }\n  322    });\n  ...\n  332      close: () => {},\n  333      seek: () => {},\n  334:     [Symbol.toStringTag]: `DummyWriter< ${name} >`,\n  335      inspect() {\n  336:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  337      }\n  338    });\n  ...\n  639  \n  640  define(Import.prototype, {\n  641:   [Symbol.toStringTag]: 'Import',\n  642    ids(pred = local => true) {\n  643      return ImportIds(this.tokens.slice())\n  ...\n 1346  \n 1347  define(NumericRange.prototype, {\n 1348:   [Symbol.toStringTag]: 'NumericRange',\n 1349    [inspectSymbol](depth, opts) {\n 1350      const [start, end] = this;\n ....\n 1404            return '';\n 1405          },\n 1406:         [Symbol.toStringTag]: 'FileMap(empty)'\n 1407        };\n 1408        return Object.setPrototypeOf(obj, FileMap.prototype);\n ....\n 1746  }\n 1747  \n 1748: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1749  \n 1750  function BufferFile(file, buf) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/bin/resolve-imports.js:\n  295      close: () => {},\n  296      seek: (whence, offset) => os.seek(fd, whence, offset),\n  297:     [Symbol.toStringTag]: `FileWriter< ${fd} >`,\n  298      inspect() {\n  299:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  300      }\n  301    });\n  ...\n  316      write: fn,\n  317      close: () => {},\n  318:     [Symbol.toStringTag]: `ArrayWriter`,\n  319      inspect() {\n  320:       return inspect({ arr }) ?? this[Symbol.toStringTag];\n  321      }\n  322    });\n  ...\n  332      close: () => {},\n  333      seek: () => {},\n  334:     [Symbol.toStringTag]: `DummyWriter< ${name} >`,\n  335      inspect() {\n  336:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  337      }\n  338    });\n  ...\n  639  \n  640  define(Import.prototype, {\n  641:   [Symbol.toStringTag]: 'Import',\n  642    ids(pred = local => true) {\n  643      return ImportIds(this.tokens.slice())\n  ...\n 1346  \n 1347  define(NumericRange.prototype, {\n 1348:   [Symbol.toStringTag]: 'NumericRange',\n 1349    [inspectSymbol](depth, opts) {\n 1350      const [start, end] = this;\n ....\n 1404            return '';\n 1405          },\n 1406:         [Symbol.toStringTag]: 'FileMap(empty)'\n 1407        };\n 1408        return Object.setPrototypeOf(obj, FileMap.prototype);\n ....\n 1746  }\n 1747  \n 1748: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1749  \n 1750  function BufferFile(file, buf) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/bin/list-imports.js:\n  295      close: () => {},\n  296      seek: (whence, offset) => os.seek(fd, whence, offset),\n  297:     [Symbol.toStringTag]: `FileWriter< ${fd} >`,\n  298      inspect() {\n  299:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  300      }\n  301    });\n  ...\n  316      write: fn,\n  317      close: () => {},\n  318:     [Symbol.toStringTag]: `ArrayWriter`,\n  319      inspect() {\n  320:       return inspect({ arr }) ?? this[Symbol.toStringTag];\n  321      }\n  322    });\n  ...\n  332      close: () => {},\n  333      seek: () => {},\n  334:     [Symbol.toStringTag]: `DummyWriter< ${name} >`,\n  335      inspect() {\n  336:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  337      }\n  338    });\n  ...\n  639  \n  640  define(Import.prototype, {\n  641:   [Symbol.toStringTag]: 'Import',\n  642    ids(pred = local => true) {\n  643      return ImportIds(this.tokens.slice())\n  ...\n 1346  \n 1347  define(NumericRange.prototype, {\n 1348:   [Symbol.toStringTag]: 'NumericRange',\n 1349    [inspectSymbol](depth, opts) {\n 1350      const [start, end] = this;\n ....\n 1404            return '';\n 1405          },\n 1406:         [Symbol.toStringTag]: 'FileMap(empty)'\n 1407        };\n 1408        return Object.setPrototypeOf(obj, FileMap.prototype);\n ....\n 1746  }\n 1747  \n 1748: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1749  \n 1750  function BufferFile(file, buf) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/local/lib/quickjs/inotify.js:\n   71                return this.watch(event);\n   72              },\n   73:             [Symbol.toStringTag]: 'InotifyEvent'\n   74            });\n   75  */\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/local/lib/quickjs/socklen_t.js:\n   16    }\n   17  \n   18:   get [Symbol.toStringTag]() {\n   19      return 'socklen_t';\n   20    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/local/lib/quickjs/console.js:\n   51      numberBase: 10,\n   52      classKey: Symbol.toStringTag,\n   53:     hideKeys: [Symbol.toStringTag]\n   54    };\n   55  \n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/local/lib/quickjs/io.js:\n   51  }\n   52  \n   53: define(HandlerEntry.prototype, { [Symbol.toStringTag]: 'HandlerEntry' });\n   54  \n   55  export class DescriptorMap extends Array {\n   ..\n   90  }\n   91  \n   92: define(DescriptorMap.prototype, { [Symbol.toStringTag]: 'DescriptorMap' });\n   93  \n   94  export class Multiplexer {\n   ..\n  154  }\n  155  \n  156: define(Multiplexer.prototype, { [Symbol.toStringTag]: 'Multiplexer' });\n  157  \n  158  const io = new Multiplexer();\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/local/lib/quickjs/require.js:\n   95  }\n   96  \n   97: define(Module.prototype, { [Symbol.toStringTag]: 'Module' });\n   98  \n   99  class CJSModule extends Module {\n  ...\n  137  }\n  138  \n  139: define(CJSModule.prototype, { [Symbol.toStringTag]: 'CJSModule' });\n  140  \n  141  class ESModule extends Module {\n  ...\n  170  }\n  171  \n  172: define(ESModule.prototype, { [Symbol.toStringTag]: 'ESModule' });\n  173  \n  174  function statPath(path) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/local/lib/quickjs/xpath.js:\n   12  }\n   13  \n   14: DereferenceError.prototype[Symbol.toStringTag] = 'DereferenceError';\n   15  \n   16  export class XPath {\n   ..\n  118      return;\n  119      `\\x1b[1;31m${this.constructor.name ?? className(this)}\\x1b[0m ` +\n  120:       inspect([...this].map(GetKey) ?? { __proto__: { [Symbol.toStringTag]: 'XPath' }, ...obj }, {\n  121          ...opts,\n  122          customInspect: true\n  ...\n  124    }\n  125  \n  126:   get [Symbol.toStringTag]() {\n  127      return 'XPath';\n  128    }\n  ...\n  131  }\n  132  \n  133: define(XPath.prototype, { [Symbol.toStringTag]: 'XPath' });\n  134  \n  135  export const ImmutableXPath = XPath;\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/local/lib/quickjs/stack.js:\n   31  }\n   32  \n   33: Stack.prototype[Symbol.toStringTag] = 'Stack';\n   34  \n   35  Stack.prototype.toString = function() {\n   ..\n   46  Stack.prototype[inspectSymbol] = function(depth, options) {\n   47    return (\n   48:     `\\x1b[1;31m${this[Symbol.toStringTag]}\\x1b[0m ` +\n   49      inspect([...this], depth, {\n   50        ...options,\n   ..\n  216    }\n  217  \n  218:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  219      return 'StackFrame';\n  220    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/local/lib/quickjs/dom.js:\n  571  define(Node.prototype, Interface.prototype);\n  572  extend(Node.prototype, NODE_TYPES, { enumerable: false });\n  573: extend(Node.prototype, { [Symbol.toStringTag]: 'Node' }, { enumerable: false });\n  574  \n  575  function MakeCache(ctor, store = new WeakMap()) {\n  ...\n  652    NodeList.prototype,\n  653    {\n  654:     [Symbol.toStringTag]: 'NodeList',\n  655      *[Symbol.iterator]() {\n  656        const factory = Factory.for(this);\n  ...\n  701      constructor: NamedNodeMap,\n  702  \n  703:     [Symbol.toStringTag]: 'NamedNodeMap',\n  704  \n  705      get path() {\n  ...\n  994  }\n  995  \n  996: extend(Element.prototype, { [Symbol.toStringTag]: 'Element', nodeType: ELEMENT_NODE }, { enumerable: false });\n  997  \n  998  /*\n  ...\n 1167  }\n 1168  \n 1169: extend(Document.prototype, { [Symbol.toStringTag]: 'Document', nodeType: DOCUMENT_NODE }, { enumerable: false });\n 1170  \n 1171  export class Attr extends Node {\n ....\n 1227    {\n 1228      nodeType: ATTRIBUTE_NODE,\n 1229:     [Symbol.toStringTag]: 'Attr'\n 1230    },\n 1231    { enumerable: false }\n ....\n 1273  \n 1274    [inspectSymbol](depth, opts) {\n 1275:     return `\\x1b[1;31m${this[Symbol.toStringTag]}\\x1b[0m \\x1b[38;2;192;2550m${quote(this.data, \"'\")}\\x1b[0m`;\n 1276    }\n 1277  \n ....\n 1286      nodeType: TEXT_NODE,\n 1287      nodeName: '#text',\n 1288:     [Symbol.toStringTag]: 'Text'\n 1289    },\n 1290    { enumerable: false }\n ....\n 1333      nodeType: COMMENT_NODE,\n 1334      nodeName: '#comment',\n 1335:     [Symbol.toStringTag]: 'Comment'\n 1336    },\n 1337    { enumerable: false }\n ....\n 1436    TokenList.prototype,\n 1437    {\n 1438:     [Symbol.toStringTag]: 'TokenList'\n 1439    },\n 1440    { enumerable: false }\n ....\n 1594      constructor: CSSStyleDeclaration,\n 1595  \n 1596:     [Symbol.toStringTag]: 'CSSStyleDeclaration',\n 1597  \n 1598      get parentRule() {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/local/lib/quickjs/tty.js:\n   10  \n   11  define(ReadStream.prototype, {\n   12:   [Symbol.toStringTag]: 'ReadStream'\n   13  });\n   14  \n   ..\n   93      configurable: true\n   94    },\n   95:   [Symbol.toStringTag]: { value: 'WriteStream', configurable: true }\n   96  });\n   97  \n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/local/lib/quickjs/util.js:\n  182    },\n  183    isModuleNamespaceObject(v) {\n  184:     return isObject(v) && v[Symbol.toStringTag] == 'Module';\n  185    },\n  186    isConstructor(v) {\n  ...\n 1986  export function className(obj) {\n 1987    if(isObject(obj)) {\n 1988:     if(Symbol.toStringTag in obj) return obj[Symbol.toStringTag];\n 1989      if('constructor' in obj) return functionName(obj.constructor);\n 1990    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/local/lib/quickjs/db.js:\n   95  \n   96  define(Pool.prototype, {\n   97:   [Symbol.toStringTag]: 'Pool'\n   98  });\n   99  \n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/local/lib/quickjs/repl.js:\n 2081  \n 2082  Object.assign(REPL.prototype, {\n 2083:   [Symbol.toStringTag]: 'REPL',\n 2084    handleInput: REPL.prototype.evalAndPrint,\n 2085    directives: loadModule\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/local/lib/quickjs/streams.js:\n  137    }\n  138  \n  139:   define(ByLineStream.prototype, { [Symbol.toStringTag]: 'ByLineStream' });\n  140  \n  141    return ByLineStream;\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/local/lib/quickjs/fs.js:\n  241  }\n  242  \n  243: FileHandle.prototype[Symbol.toStringTag] = 'FileHandle';\n  244  \n  245  delete FileHandle.prototype.constructor;\n  ...\n  836    }\n  837  \n  838:   [Symbol.toStringTag] = 'inotify_event';\n  839  }\n  840  \n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/local/lib/quickjs/parser.js:\n   22  }\n   23  \n   24: define(Rule.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'Rule' });\n   25  \n   26  export class Terminal extends Rule {\n   ..\n   45  }\n   46  \n   47: define(Terminal.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'Terminal' });\n   48  \n   49  export class ZeroOrMore extends Rule {\n   ..\n   63  }\n   64  \n   65: define(ZeroOrMore.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'ZeroOrMore' });\n   66  \n   67  export function make_operators_set(...op_list) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/local/lib/quickjs/events.js:\n   55  }\n   56  \n   57: EventEmitter.prototype[Symbol.toStringTag] = 'EventEmitter';\n   58  \n   59  const PRIVATE = Symbol('EventTarget');\n   ..\n   98  }\n   99  \n  100: EventTarget.prototype[Symbol.toStringTag] = 'EventTarget';\n  101  \n  102  const getMethods = obj =>\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/local/lib/quickjs/vfs.js:\n  311            for(let chunk of q) written += ar.write(chunk);\n  312          },\n  313:         [Symbol.toStringTag]: 'WriteStream'\n  314        };\n  315      } else {\n  ...\n  329            error: () => ar.error != null,\n  330            close: () => ar.close(),\n  331:           [Symbol.toStringTag]: 'ReadStream'\n  332          };\n  333        }\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/local/lib/quickjs/lexer/c.js:\n  118  globalThis.CLexer = CLexer;\n  119  \n  120: define(CLexer.prototype, { [Symbol.toStringTag]: 'CLexer' });\n  121  \n  122  export default CLexer;\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/local/lib/quickjs/lexer/csv.js:\n   23    }\n   24  \n   25:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n   26      return \"CSVLexer\";\n   27    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/local/lib/quickjs/lexer/ecmascript.js:\n  129    }\n  130  \n  131:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  132      return \"ECMAScriptLexer\";\n  133    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/local/lib/quickjs/lexer/bnf.js:\n  194    }\n  195  \n  196:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  197      return \"BNFLexer\";\n  198    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/bin/resolve-imports.js:\n  295      close: () => {},\n  296      seek: (whence, offset) => os.seek(fd, whence, offset),\n  297:     [Symbol.toStringTag]: `FileWriter< ${fd} >`,\n  298      inspect() {\n  299:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  300      }\n  301    });\n  ...\n  316      write: fn,\n  317      close: () => {},\n  318:     [Symbol.toStringTag]: `ArrayWriter`,\n  319      inspect() {\n  320:       return inspect({ arr }) ?? this[Symbol.toStringTag];\n  321      }\n  322    });\n  ...\n  332      close: () => {},\n  333      seek: () => {},\n  334:     [Symbol.toStringTag]: `DummyWriter< ${name} >`,\n  335      inspect() {\n  336:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  337      }\n  338    });\n  ...\n  639  \n  640  define(Import.prototype, {\n  641:   [Symbol.toStringTag]: 'Import',\n  642    ids(pred = local => true) {\n  643      return ImportIds(this.tokens.slice())\n  ...\n 1346  \n 1347  define(NumericRange.prototype, {\n 1348:   [Symbol.toStringTag]: 'NumericRange',\n 1349    [inspectSymbol](depth, opts) {\n 1350      const [start, end] = this;\n ....\n 1404            return '';\n 1405          },\n 1406:         [Symbol.toStringTag]: 'FileMap(empty)'\n 1407        };\n 1408        return Object.setPrototypeOf(obj, FileMap.prototype);\n ....\n 1746  }\n 1747  \n 1748: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1749  \n 1750  function BufferFile(file, buf) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/inotify.js:\n   71                return this.watch(event);\n   72              },\n   73:             [Symbol.toStringTag]: 'InotifyEvent'\n   74            });\n   75  */\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/socklen_t.js:\n   16    }\n   17  \n   18:   get [Symbol.toStringTag]() {\n   19      return 'socklen_t';\n   20    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/console.js:\n   51      numberBase: 10,\n   52      classKey: Symbol.toStringTag,\n   53:     hideKeys: [Symbol.toStringTag]\n   54    };\n   55  \n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/io.js:\n   51  }\n   52  \n   53: define(HandlerEntry.prototype, { [Symbol.toStringTag]: 'HandlerEntry' });\n   54  \n   55  export class DescriptorMap extends Array {\n   ..\n   90  }\n   91  \n   92: define(DescriptorMap.prototype, { [Symbol.toStringTag]: 'DescriptorMap' });\n   93  \n   94  export class Multiplexer {\n   ..\n  154  }\n  155  \n  156: define(Multiplexer.prototype, { [Symbol.toStringTag]: 'Multiplexer' });\n  157  \n  158  const io = new Multiplexer();\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/require.js:\n   95  }\n   96  \n   97: define(Module.prototype, { [Symbol.toStringTag]: 'Module' });\n   98  \n   99  class CJSModule extends Module {\n  ...\n  137  }\n  138  \n  139: define(CJSModule.prototype, { [Symbol.toStringTag]: 'CJSModule' });\n  140  \n  141  class ESModule extends Module {\n  ...\n  170  }\n  171  \n  172: define(ESModule.prototype, { [Symbol.toStringTag]: 'ESModule' });\n  173  \n  174  function statPath(path) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/xpath.js:\n   12  }\n   13  \n   14: DereferenceError.prototype[Symbol.toStringTag] = 'DereferenceError';\n   15  \n   16  export class XPath {\n   ..\n  118      return;\n  119      `\\x1b[1;31m${this.constructor.name ?? className(this)}\\x1b[0m ` +\n  120:       inspect([...this].map(GetKey) ?? { __proto__: { [Symbol.toStringTag]: 'XPath' }, ...obj }, {\n  121          ...opts,\n  122          customInspect: true\n  ...\n  124    }\n  125  \n  126:   get [Symbol.toStringTag]() {\n  127      return 'XPath';\n  128    }\n  ...\n  131  }\n  132  \n  133: define(XPath.prototype, { [Symbol.toStringTag]: 'XPath' });\n  134  \n  135  export const ImmutableXPath = XPath;\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/stack.js:\n   31  }\n   32  \n   33: Stack.prototype[Symbol.toStringTag] = 'Stack';\n   34  \n   35  Stack.prototype.toString = function() {\n   ..\n   46  Stack.prototype[inspectSymbol] = function(depth, options) {\n   47    return (\n   48:     `\\x1b[1;31m${this[Symbol.toStringTag]}\\x1b[0m ` +\n   49      inspect([...this], depth, {\n   50        ...options,\n   ..\n  216    }\n  217  \n  218:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  219      return 'StackFrame';\n  220    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/dom.js:\n  571  define(Node.prototype, Interface.prototype);\n  572  extend(Node.prototype, NODE_TYPES, { enumerable: false });\n  573: extend(Node.prototype, { [Symbol.toStringTag]: 'Node' }, { enumerable: false });\n  574  \n  575  function MakeCache(ctor, store = new WeakMap()) {\n  ...\n  652    NodeList.prototype,\n  653    {\n  654:     [Symbol.toStringTag]: 'NodeList',\n  655      *[Symbol.iterator]() {\n  656        const factory = Factory.for(this);\n  ...\n  701      constructor: NamedNodeMap,\n  702  \n  703:     [Symbol.toStringTag]: 'NamedNodeMap',\n  704  \n  705      get path() {\n  ...\n  994  }\n  995  \n  996: extend(Element.prototype, { [Symbol.toStringTag]: 'Element', nodeType: ELEMENT_NODE }, { enumerable: false });\n  997  \n  998  /*\n  ...\n 1167  }\n 1168  \n 1169: extend(Document.prototype, { [Symbol.toStringTag]: 'Document', nodeType: DOCUMENT_NODE }, { enumerable: false });\n 1170  \n 1171  export class Attr extends Node {\n ....\n 1227    {\n 1228      nodeType: ATTRIBUTE_NODE,\n 1229:     [Symbol.toStringTag]: 'Attr'\n 1230    },\n 1231    { enumerable: false }\n ....\n 1273  \n 1274    [inspectSymbol](depth, opts) {\n 1275:     return `\\x1b[1;31m${this[Symbol.toStringTag]}\\x1b[0m \\x1b[38;2;192;2550m${quote(this.data, \"'\")}\\x1b[0m`;\n 1276    }\n 1277  \n ....\n 1286      nodeType: TEXT_NODE,\n 1287      nodeName: '#text',\n 1288:     [Symbol.toStringTag]: 'Text'\n 1289    },\n 1290    { enumerable: false }\n ....\n 1333      nodeType: COMMENT_NODE,\n 1334      nodeName: '#comment',\n 1335:     [Symbol.toStringTag]: 'Comment'\n 1336    },\n 1337    { enumerable: false }\n ....\n 1436    TokenList.prototype,\n 1437    {\n 1438:     [Symbol.toStringTag]: 'TokenList'\n 1439    },\n 1440    { enumerable: false }\n ....\n 1594      constructor: CSSStyleDeclaration,\n 1595  \n 1596:     [Symbol.toStringTag]: 'CSSStyleDeclaration',\n 1597  \n 1598      get parentRule() {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/tty.js:\n   10  \n   11  define(ReadStream.prototype, {\n   12:   [Symbol.toStringTag]: 'ReadStream'\n   13  });\n   14  \n   ..\n   93      configurable: true\n   94    },\n   95:   [Symbol.toStringTag]: { value: 'WriteStream', configurable: true }\n   96  });\n   97  \n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/util.js:\n  182    },\n  183    isModuleNamespaceObject(v) {\n  184:     return isObject(v) && v[Symbol.toStringTag] == 'Module';\n  185    },\n  186    isConstructor(v) {\n  ...\n 1986  export function className(obj) {\n 1987    if(isObject(obj)) {\n 1988:     if(Symbol.toStringTag in obj) return obj[Symbol.toStringTag];\n 1989      if('constructor' in obj) return functionName(obj.constructor);\n 1990    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/db.js:\n   95  \n   96  define(Pool.prototype, {\n   97:   [Symbol.toStringTag]: 'Pool'\n   98  });\n   99  \n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/repl.js:\n 2081  \n 2082  Object.assign(REPL.prototype, {\n 2083:   [Symbol.toStringTag]: 'REPL',\n 2084    handleInput: REPL.prototype.evalAndPrint,\n 2085    directives: loadModule\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/streams.js:\n  137    }\n  138  \n  139:   define(ByLineStream.prototype, { [Symbol.toStringTag]: 'ByLineStream' });\n  140  \n  141    return ByLineStream;\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/fs.js:\n  241  }\n  242  \n  243: FileHandle.prototype[Symbol.toStringTag] = 'FileHandle';\n  244  \n  245  delete FileHandle.prototype.constructor;\n  ...\n  836    }\n  837  \n  838:   [Symbol.toStringTag] = 'inotify_event';\n  839  }\n  840  \n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/parser.js:\n   22  }\n   23  \n   24: define(Rule.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'Rule' });\n   25  \n   26  export class Terminal extends Rule {\n   ..\n   45  }\n   46  \n   47: define(Terminal.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'Terminal' });\n   48  \n   49  export class ZeroOrMore extends Rule {\n   ..\n   63  }\n   64  \n   65: define(ZeroOrMore.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'ZeroOrMore' });\n   66  \n   67  export function make_operators_set(...op_list) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/events.js:\n   55  }\n   56  \n   57: EventEmitter.prototype[Symbol.toStringTag] = 'EventEmitter';\n   58  \n   59  const PRIVATE = Symbol('EventTarget');\n   ..\n   98  }\n   99  \n  100: EventTarget.prototype[Symbol.toStringTag] = 'EventTarget';\n  101  \n  102  const getMethods = obj =>\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/vfs.js:\n  311            for(let chunk of q) written += ar.write(chunk);\n  312          },\n  313:         [Symbol.toStringTag]: 'WriteStream'\n  314        };\n  315      } else {\n  ...\n  329            error: () => ar.error != null,\n  330            close: () => ar.close(),\n  331:           [Symbol.toStringTag]: 'ReadStream'\n  332          };\n  333        }\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/lexer/c.js:\n  118  globalThis.CLexer = CLexer;\n  119  \n  120: define(CLexer.prototype, { [Symbol.toStringTag]: 'CLexer' });\n  121  \n  122  export default CLexer;\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/lexer/csv.js:\n   23    }\n   24  \n   25:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n   26      return \"CSVLexer\";\n   27    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/lexer/ecmascript.js:\n  129    }\n  130  \n  131:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  132      return \"ECMAScriptLexer\";\n  133    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/lexer/bnf.js:\n  194    }\n  195  \n  196:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  197      return \"BNFLexer\";\n  198    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/bin/check-imports.js:\n  295      close: () => {},\n  296      seek: (whence, offset) => os.seek(fd, whence, offset),\n  297:     [Symbol.toStringTag]: `FileWriter< ${fd} >`,\n  298      inspect() {\n  299:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  300      }\n  301    });\n  ...\n  316      write: fn,\n  317      close: () => {},\n  318:     [Symbol.toStringTag]: `ArrayWriter`,\n  319      inspect() {\n  320:       return inspect({ arr }) ?? this[Symbol.toStringTag];\n  321      }\n  322    });\n  ...\n  332      close: () => {},\n  333      seek: () => {},\n  334:     [Symbol.toStringTag]: `DummyWriter< ${name} >`,\n  335      inspect() {\n  336:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  337      }\n  338    });\n  ...\n  639  \n  640  define(Import.prototype, {\n  641:   [Symbol.toStringTag]: 'Import',\n  642    ids(pred = local => true) {\n  643      return ImportIds(this.tokens.slice())\n  ...\n 1346  \n 1347  define(NumericRange.prototype, {\n 1348:   [Symbol.toStringTag]: 'NumericRange',\n 1349    [inspectSymbol](depth, opts) {\n 1350      const [start, end] = this;\n ....\n 1404            return '';\n 1405          },\n 1406:         [Symbol.toStringTag]: 'FileMap(empty)'\n 1407        };\n 1408        return Object.setPrototypeOf(obj, FileMap.prototype);\n ....\n 1746  }\n 1747  \n 1748: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1749  \n 1750  function BufferFile(file, buf) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/bin/resolve-imports.js:\n  295      close: () => {},\n  296      seek: (whence, offset) => os.seek(fd, whence, offset),\n  297:     [Symbol.toStringTag]: `FileWriter< ${fd} >`,\n  298      inspect() {\n  299:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  300      }\n  301    });\n  ...\n  316      write: fn,\n  317      close: () => {},\n  318:     [Symbol.toStringTag]: `ArrayWriter`,\n  319      inspect() {\n  320:       return inspect({ arr }) ?? this[Symbol.toStringTag];\n  321      }\n  322    });\n  ...\n  332      close: () => {},\n  333      seek: () => {},\n  334:     [Symbol.toStringTag]: `DummyWriter< ${name} >`,\n  335      inspect() {\n  336:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  337      }\n  338    });\n  ...\n  639  \n  640  define(Import.prototype, {\n  641:   [Symbol.toStringTag]: 'Import',\n  642    ids(pred = local => true) {\n  643      return ImportIds(this.tokens.slice())\n  ...\n 1346  \n 1347  define(NumericRange.prototype, {\n 1348:   [Symbol.toStringTag]: 'NumericRange',\n 1349    [inspectSymbol](depth, opts) {\n 1350      const [start, end] = this;\n ....\n 1404            return '';\n 1405          },\n 1406:         [Symbol.toStringTag]: 'FileMap(empty)'\n 1407        };\n 1408        return Object.setPrototypeOf(obj, FileMap.prototype);\n ....\n 1746  }\n 1747  \n 1748: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1749  \n 1750  function BufferFile(file, buf) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/bin/list-imports.js:\n  295      close: () => {},\n  296      seek: (whence, offset) => os.seek(fd, whence, offset),\n  297:     [Symbol.toStringTag]: `FileWriter< ${fd} >`,\n  298      inspect() {\n  299:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  300      }\n  301    });\n  ...\n  316      write: fn,\n  317      close: () => {},\n  318:     [Symbol.toStringTag]: `ArrayWriter`,\n  319      inspect() {\n  320:       return inspect({ arr }) ?? this[Symbol.toStringTag];\n  321      }\n  322    });\n  ...\n  332      close: () => {},\n  333      seek: () => {},\n  334:     [Symbol.toStringTag]: `DummyWriter< ${name} >`,\n  335      inspect() {\n  336:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  337      }\n  338    });\n  ...\n  639  \n  640  define(Import.prototype, {\n  641:   [Symbol.toStringTag]: 'Import',\n  642    ids(pred = local => true) {\n  643      return ImportIds(this.tokens.slice())\n  ...\n 1346  \n 1347  define(NumericRange.prototype, {\n 1348:   [Symbol.toStringTag]: 'NumericRange',\n 1349    [inspectSymbol](depth, opts) {\n 1350      const [start, end] = this;\n ....\n 1404            return '';\n 1405          },\n 1406:         [Symbol.toStringTag]: 'FileMap(empty)'\n 1407        };\n 1408        return Object.setPrototypeOf(obj, FileMap.prototype);\n ....\n 1746  }\n 1747  \n 1748: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1749  \n 1750  function BufferFile(file, buf) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/inotify.js:\n   71                return this.watch(event);\n   72              },\n   73:             [Symbol.toStringTag]: 'InotifyEvent'\n   74            });\n   75  */\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/socklen_t.js:\n   16    }\n   17  \n   18:   get [Symbol.toStringTag]() {\n   19      return 'socklen_t';\n   20    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/console.js:\n   51      numberBase: 10,\n   52      classKey: Symbol.toStringTag,\n   53:     hideKeys: [Symbol.toStringTag]\n   54    };\n   55  \n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/io.js:\n   51  }\n   52  \n   53: define(HandlerEntry.prototype, { [Symbol.toStringTag]: 'HandlerEntry' });\n   54  \n   55  export class DescriptorMap extends Array {\n   ..\n   90  }\n   91  \n   92: define(DescriptorMap.prototype, { [Symbol.toStringTag]: 'DescriptorMap' });\n   93  \n   94  export class Multiplexer {\n   ..\n  154  }\n  155  \n  156: define(Multiplexer.prototype, { [Symbol.toStringTag]: 'Multiplexer' });\n  157  \n  158  const io = new Multiplexer();\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/require.js:\n   95  }\n   96  \n   97: define(Module.prototype, { [Symbol.toStringTag]: 'Module' });\n   98  \n   99  class CJSModule extends Module {\n  ...\n  137  }\n  138  \n  139: define(CJSModule.prototype, { [Symbol.toStringTag]: 'CJSModule' });\n  140  \n  141  class ESModule extends Module {\n  ...\n  170  }\n  171  \n  172: define(ESModule.prototype, { [Symbol.toStringTag]: 'ESModule' });\n  173  \n  174  function statPath(path) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/xpath.js:\n   12  }\n   13  \n   14: DereferenceError.prototype[Symbol.toStringTag] = 'DereferenceError';\n   15  \n   16  export class XPath {\n   ..\n  118      return;\n  119      `\\x1b[1;31m${this.constructor.name ?? className(this)}\\x1b[0m ` +\n  120:       inspect([...this].map(GetKey) ?? { __proto__: { [Symbol.toStringTag]: 'XPath' }, ...obj }, {\n  121          ...opts,\n  122          customInspect: true\n  ...\n  124    }\n  125  \n  126:   get [Symbol.toStringTag]() {\n  127      return 'XPath';\n  128    }\n  ...\n  131  }\n  132  \n  133: define(XPath.prototype, { [Symbol.toStringTag]: 'XPath' });\n  134  \n  135  export const ImmutableXPath = XPath;\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/stack.js:\n   31  }\n   32  \n   33: Stack.prototype[Symbol.toStringTag] = 'Stack';\n   34  \n   35  Stack.prototype.toString = function() {\n   ..\n   46  Stack.prototype[inspectSymbol] = function(depth, options) {\n   47    return (\n   48:     `\\x1b[1;31m${this[Symbol.toStringTag]}\\x1b[0m ` +\n   49      inspect([...this], depth, {\n   50        ...options,\n   ..\n  216    }\n  217  \n  218:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  219      return 'StackFrame';\n  220    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/dom.js:\n  571  define(Node.prototype, Interface.prototype);\n  572  extend(Node.prototype, NODE_TYPES, { enumerable: false });\n  573: extend(Node.prototype, { [Symbol.toStringTag]: 'Node' }, { enumerable: false });\n  574  \n  575  function MakeCache(ctor, store = new WeakMap()) {\n  ...\n  652    NodeList.prototype,\n  653    {\n  654:     [Symbol.toStringTag]: 'NodeList',\n  655      *[Symbol.iterator]() {\n  656        const factory = Factory.for(this);\n  ...\n  701      constructor: NamedNodeMap,\n  702  \n  703:     [Symbol.toStringTag]: 'NamedNodeMap',\n  704  \n  705      get path() {\n  ...\n  994  }\n  995  \n  996: extend(Element.prototype, { [Symbol.toStringTag]: 'Element', nodeType: ELEMENT_NODE }, { enumerable: false });\n  997  \n  998  /*\n  ...\n 1167  }\n 1168  \n 1169: extend(Document.prototype, { [Symbol.toStringTag]: 'Document', nodeType: DOCUMENT_NODE }, { enumerable: false });\n 1170  \n 1171  export class Attr extends Node {\n ....\n 1227    {\n 1228      nodeType: ATTRIBUTE_NODE,\n 1229:     [Symbol.toStringTag]: 'Attr'\n 1230    },\n 1231    { enumerable: false }\n ....\n 1273  \n 1274    [inspectSymbol](depth, opts) {\n 1275:     return `\\x1b[1;31m${this[Symbol.toStringTag]}\\x1b[0m \\x1b[38;2;192;2550m${quote(this.data, \"'\")}\\x1b[0m`;\n 1276    }\n 1277  \n ....\n 1286      nodeType: TEXT_NODE,\n 1287      nodeName: '#text',\n 1288:     [Symbol.toStringTag]: 'Text'\n 1289    },\n 1290    { enumerable: false }\n ....\n 1333      nodeType: COMMENT_NODE,\n 1334      nodeName: '#comment',\n 1335:     [Symbol.toStringTag]: 'Comment'\n 1336    },\n 1337    { enumerable: false }\n ....\n 1436    TokenList.prototype,\n 1437    {\n 1438:     [Symbol.toStringTag]: 'TokenList'\n 1439    },\n 1440    { enumerable: false }\n ....\n 1594      constructor: CSSStyleDeclaration,\n 1595  \n 1596:     [Symbol.toStringTag]: 'CSSStyleDeclaration',\n 1597  \n 1598      get parentRule() {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/tty.js:\n   10  \n   11  define(ReadStream.prototype, {\n   12:   [Symbol.toStringTag]: 'ReadStream'\n   13  });\n   14  \n   ..\n   93      configurable: true\n   94    },\n   95:   [Symbol.toStringTag]: { value: 'WriteStream', configurable: true }\n   96  });\n   97  \n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/util.js:\n  182    },\n  183    isModuleNamespaceObject(v) {\n  184:     return isObject(v) && v[Symbol.toStringTag] == 'Module';\n  185    },\n  186    isConstructor(v) {\n  ...\n 1986  export function className(obj) {\n 1987    if(isObject(obj)) {\n 1988:     if(Symbol.toStringTag in obj) return obj[Symbol.toStringTag];\n 1989      if('constructor' in obj) return functionName(obj.constructor);\n 1990    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/db.js:\n   95  \n   96  define(Pool.prototype, {\n   97:   [Symbol.toStringTag]: 'Pool'\n   98  });\n   99  \n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/repl.js:\n 2081  \n 2082  Object.assign(REPL.prototype, {\n 2083:   [Symbol.toStringTag]: 'REPL',\n 2084    handleInput: REPL.prototype.evalAndPrint,\n 2085    directives: loadModule\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/streams.js:\n  137    }\n  138  \n  139:   define(ByLineStream.prototype, { [Symbol.toStringTag]: 'ByLineStream' });\n  140  \n  141    return ByLineStream;\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/fs.js:\n  241  }\n  242  \n  243: FileHandle.prototype[Symbol.toStringTag] = 'FileHandle';\n  244  \n  245  delete FileHandle.prototype.constructor;\n  ...\n  836    }\n  837  \n  838:   [Symbol.toStringTag] = 'inotify_event';\n  839  }\n  840  \n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/parser.js:\n   22  }\n   23  \n   24: define(Rule.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'Rule' });\n   25  \n   26  export class Terminal extends Rule {\n   ..\n   45  }\n   46  \n   47: define(Terminal.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'Terminal' });\n   48  \n   49  export class ZeroOrMore extends Rule {\n   ..\n   63  }\n   64  \n   65: define(ZeroOrMore.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'ZeroOrMore' });\n   66  \n   67  export function make_operators_set(...op_list) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/events.js:\n   55  }\n   56  \n   57: EventEmitter.prototype[Symbol.toStringTag] = 'EventEmitter';\n   58  \n   59  const PRIVATE = Symbol('EventTarget');\n   ..\n   98  }\n   99  \n  100: EventTarget.prototype[Symbol.toStringTag] = 'EventTarget';\n  101  \n  102  const getMethods = obj =>\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/vfs.js:\n  311            for(let chunk of q) written += ar.write(chunk);\n  312          },\n  313:         [Symbol.toStringTag]: 'WriteStream'\n  314        };\n  315      } else {\n  ...\n  329            error: () => ar.error != null,\n  330            close: () => ar.close(),\n  331:           [Symbol.toStringTag]: 'ReadStream'\n  332          };\n  333        }\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/lexer/c.js:\n  118  globalThis.CLexer = CLexer;\n  119  \n  120: define(CLexer.prototype, { [Symbol.toStringTag]: 'CLexer' });\n  121  \n  122  export default CLexer;\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/lexer/csv.js:\n   23    }\n   24  \n   25:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n   26      return \"CSVLexer\";\n   27    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/lexer/ecmascript.js:\n  129    }\n  130  \n  131:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  132      return \"ECMAScriptLexer\";\n  133    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/lexer/bnf.js:\n  194    }\n  195  \n  196:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  197      return \"BNFLexer\";\n  198    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/bin/check-imports.js:\n  295      close: () => {},\n  296      seek: (whence, offset) => os.seek(fd, whence, offset),\n  297:     [Symbol.toStringTag]: `FileWriter< ${fd} >`,\n  298      inspect() {\n  299:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  300      }\n  301    });\n  ...\n  316      write: fn,\n  317      close: () => {},\n  318:     [Symbol.toStringTag]: `ArrayWriter`,\n  319      inspect() {\n  320:       return inspect({ arr }) ?? this[Symbol.toStringTag];\n  321      }\n  322    });\n  ...\n  332      close: () => {},\n  333      seek: () => {},\n  334:     [Symbol.toStringTag]: `DummyWriter< ${name} >`,\n  335      inspect() {\n  336:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  337      }\n  338    });\n  ...\n  639  \n  640  define(Import.prototype, {\n  641:   [Symbol.toStringTag]: 'Import',\n  642    ids(pred = local => true) {\n  643      return ImportIds(this.tokens.slice())\n  ...\n 1346  \n 1347  define(NumericRange.prototype, {\n 1348:   [Symbol.toStringTag]: 'NumericRange',\n 1349    [inspectSymbol](depth, opts) {\n 1350      const [start, end] = this;\n ....\n 1404            return '';\n 1405          },\n 1406:         [Symbol.toStringTag]: 'FileMap(empty)'\n 1407        };\n 1408        return Object.setPrototypeOf(obj, FileMap.prototype);\n ....\n 1746  }\n 1747  \n 1748: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1749  \n 1750  function BufferFile(file, buf) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/bin/resolve-imports.js:\n  295      close: () => {},\n  296      seek: (whence, offset) => os.seek(fd, whence, offset),\n  297:     [Symbol.toStringTag]: `FileWriter< ${fd} >`,\n  298      inspect() {\n  299:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  300      }\n  301    });\n  ...\n  316      write: fn,\n  317      close: () => {},\n  318:     [Symbol.toStringTag]: `ArrayWriter`,\n  319      inspect() {\n  320:       return inspect({ arr }) ?? this[Symbol.toStringTag];\n  321      }\n  322    });\n  ...\n  332      close: () => {},\n  333      seek: () => {},\n  334:     [Symbol.toStringTag]: `DummyWriter< ${name} >`,\n  335      inspect() {\n  336:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  337      }\n  338    });\n  ...\n  639  \n  640  define(Import.prototype, {\n  641:   [Symbol.toStringTag]: 'Import',\n  642    ids(pred = local => true) {\n  643      return ImportIds(this.tokens.slice())\n  ...\n 1346  \n 1347  define(NumericRange.prototype, {\n 1348:   [Symbol.toStringTag]: 'NumericRange',\n 1349    [inspectSymbol](depth, opts) {\n 1350      const [start, end] = this;\n ....\n 1404            return '';\n 1405          },\n 1406:         [Symbol.toStringTag]: 'FileMap(empty)'\n 1407        };\n 1408        return Object.setPrototypeOf(obj, FileMap.prototype);\n ....\n 1746  }\n 1747  \n 1748: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1749  \n 1750  function BufferFile(file, buf) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/bin/list-imports.js:\n  295      close: () => {},\n  296      seek: (whence, offset) => os.seek(fd, whence, offset),\n  297:     [Symbol.toStringTag]: `FileWriter< ${fd} >`,\n  298      inspect() {\n  299:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  300      }\n  301    });\n  ...\n  316      write: fn,\n  317      close: () => {},\n  318:     [Symbol.toStringTag]: `ArrayWriter`,\n  319      inspect() {\n  320:       return inspect({ arr }) ?? this[Symbol.toStringTag];\n  321      }\n  322    });\n  ...\n  332      close: () => {},\n  333      seek: () => {},\n  334:     [Symbol.toStringTag]: `DummyWriter< ${name} >`,\n  335      inspect() {\n  336:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  337      }\n  338    });\n  ...\n  639  \n  640  define(Import.prototype, {\n  641:   [Symbol.toStringTag]: 'Import',\n  642    ids(pred = local => true) {\n  643      return ImportIds(this.tokens.slice())\n  ...\n 1346  \n 1347  define(NumericRange.prototype, {\n 1348:   [Symbol.toStringTag]: 'NumericRange',\n 1349    [inspectSymbol](depth, opts) {\n 1350      const [start, end] = this;\n ....\n 1404            return '';\n 1405          },\n 1406:         [Symbol.toStringTag]: 'FileMap(empty)'\n 1407        };\n 1408        return Object.setPrototypeOf(obj, FileMap.prototype);\n ....\n 1746  }\n 1747  \n 1748: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1749  \n 1750  function BufferFile(file, buf) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/inotify.js:\n   71                return this.watch(event);\n   72              },\n   73:             [Symbol.toStringTag]: 'InotifyEvent'\n   74            });\n   75  */\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/socklen_t.js:\n   16    }\n   17  \n   18:   get [Symbol.toStringTag]() {\n   19      return 'socklen_t';\n   20    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/console.js:\n   51      numberBase: 10,\n   52      classKey: Symbol.toStringTag,\n   53:     hideKeys: [Symbol.toStringTag]\n   54    };\n   55  \n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/io.js:\n   51  }\n   52  \n   53: define(HandlerEntry.prototype, { [Symbol.toStringTag]: 'HandlerEntry' });\n   54  \n   55  export class DescriptorMap extends Array {\n   ..\n   90  }\n   91  \n   92: define(DescriptorMap.prototype, { [Symbol.toStringTag]: 'DescriptorMap' });\n   93  \n   94  export class Multiplexer {\n   ..\n  154  }\n  155  \n  156: define(Multiplexer.prototype, { [Symbol.toStringTag]: 'Multiplexer' });\n  157  \n  158  const io = new Multiplexer();\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/require.js:\n   95  }\n   96  \n   97: define(Module.prototype, { [Symbol.toStringTag]: 'Module' });\n   98  \n   99  class CJSModule extends Module {\n  ...\n  137  }\n  138  \n  139: define(CJSModule.prototype, { [Symbol.toStringTag]: 'CJSModule' });\n  140  \n  141  class ESModule extends Module {\n  ...\n  170  }\n  171  \n  172: define(ESModule.prototype, { [Symbol.toStringTag]: 'ESModule' });\n  173  \n  174  function statPath(path) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/xpath.js:\n   12  }\n   13  \n   14: DereferenceError.prototype[Symbol.toStringTag] = 'DereferenceError';\n   15  \n   16  export class XPath {\n   ..\n  118      return;\n  119      `\\x1b[1;31m${this.constructor.name ?? className(this)}\\x1b[0m ` +\n  120:       inspect([...this].map(GetKey) ?? { __proto__: { [Symbol.toStringTag]: 'XPath' }, ...obj }, {\n  121          ...opts,\n  122          customInspect: true\n  ...\n  124    }\n  125  \n  126:   get [Symbol.toStringTag]() {\n  127      return 'XPath';\n  128    }\n  ...\n  131  }\n  132  \n  133: define(XPath.prototype, { [Symbol.toStringTag]: 'XPath' });\n  134  \n  135  export const ImmutableXPath = XPath;\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/stack.js:\n   31  }\n   32  \n   33: Stack.prototype[Symbol.toStringTag] = 'Stack';\n   34  \n   35  Stack.prototype.toString = function() {\n   ..\n   46  Stack.prototype[inspectSymbol] = function(depth, options) {\n   47    return (\n   48:     `\\x1b[1;31m${this[Symbol.toStringTag]}\\x1b[0m ` +\n   49      inspect([...this], depth, {\n   50        ...options,\n   ..\n  216    }\n  217  \n  218:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  219      return 'StackFrame';\n  220    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/dom.js:\n  571  define(Node.prototype, Interface.prototype);\n  572  extend(Node.prototype, NODE_TYPES, { enumerable: false });\n  573: extend(Node.prototype, { [Symbol.toStringTag]: 'Node' }, { enumerable: false });\n  574  \n  575  function MakeCache(ctor, store = new WeakMap()) {\n  ...\n  652    NodeList.prototype,\n  653    {\n  654:     [Symbol.toStringTag]: 'NodeList',\n  655      *[Symbol.iterator]() {\n  656        const factory = Factory.for(this);\n  ...\n  701      constructor: NamedNodeMap,\n  702  \n  703:     [Symbol.toStringTag]: 'NamedNodeMap',\n  704  \n  705      get path() {\n  ...\n  994  }\n  995  \n  996: extend(Element.prototype, { [Symbol.toStringTag]: 'Element', nodeType: ELEMENT_NODE }, { enumerable: false });\n  997  \n  998  /*\n  ...\n 1167  }\n 1168  \n 1169: extend(Document.prototype, { [Symbol.toStringTag]: 'Document', nodeType: DOCUMENT_NODE }, { enumerable: false });\n 1170  \n 1171  export class Attr extends Node {\n ....\n 1227    {\n 1228      nodeType: ATTRIBUTE_NODE,\n 1229:     [Symbol.toStringTag]: 'Attr'\n 1230    },\n 1231    { enumerable: false }\n ....\n 1273  \n 1274    [inspectSymbol](depth, opts) {\n 1275:     return `\\x1b[1;31m${this[Symbol.toStringTag]}\\x1b[0m \\x1b[38;2;192;2550m${quote(this.data, \"'\")}\\x1b[0m`;\n 1276    }\n 1277  \n ....\n 1286      nodeType: TEXT_NODE,\n 1287      nodeName: '#text',\n 1288:     [Symbol.toStringTag]: 'Text'\n 1289    },\n 1290    { enumerable: false }\n ....\n 1333      nodeType: COMMENT_NODE,\n 1334      nodeName: '#comment',\n 1335:     [Symbol.toStringTag]: 'Comment'\n 1336    },\n 1337    { enumerable: false }\n ....\n 1436    TokenList.prototype,\n 1437    {\n 1438:     [Symbol.toStringTag]: 'TokenList'\n 1439    },\n 1440    { enumerable: false }\n ....\n 1594      constructor: CSSStyleDeclaration,\n 1595  \n 1596:     [Symbol.toStringTag]: 'CSSStyleDeclaration',\n 1597  \n 1598      get parentRule() {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/tty.js:\n   10  \n   11  define(ReadStream.prototype, {\n   12:   [Symbol.toStringTag]: 'ReadStream'\n   13  });\n   14  \n   ..\n   93      configurable: true\n   94    },\n   95:   [Symbol.toStringTag]: { value: 'WriteStream', configurable: true }\n   96  });\n   97  \n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/util.js:\n  182    },\n  183    isModuleNamespaceObject(v) {\n  184:     return isObject(v) && v[Symbol.toStringTag] == 'Module';\n  185    },\n  186    isConstructor(v) {\n  ...\n 1986  export function className(obj) {\n 1987    if(isObject(obj)) {\n 1988:     if(Symbol.toStringTag in obj) return obj[Symbol.toStringTag];\n 1989      if('constructor' in obj) return functionName(obj.constructor);\n 1990    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/db.js:\n   95  \n   96  define(Pool.prototype, {\n   97:   [Symbol.toStringTag]: 'Pool'\n   98  });\n   99  \n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/repl.js:\n 2081  \n 2082  Object.assign(REPL.prototype, {\n 2083:   [Symbol.toStringTag]: 'REPL',\n 2084    handleInput: REPL.prototype.evalAndPrint,\n 2085    directives: loadModule\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/streams.js:\n  137    }\n  138  \n  139:   define(ByLineStream.prototype, { [Symbol.toStringTag]: 'ByLineStream' });\n  140  \n  141    return ByLineStream;\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/fs.js:\n  241  }\n  242  \n  243: FileHandle.prototype[Symbol.toStringTag] = 'FileHandle';\n  244  \n  245  delete FileHandle.prototype.constructor;\n  ...\n  836    }\n  837  \n  838:   [Symbol.toStringTag] = 'inotify_event';\n  839  }\n  840  \n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/parser.js:\n   22  }\n   23  \n   24: define(Rule.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'Rule' });\n   25  \n   26  export class Terminal extends Rule {\n   ..\n   45  }\n   46  \n   47: define(Terminal.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'Terminal' });\n   48  \n   49  export class ZeroOrMore extends Rule {\n   ..\n   63  }\n   64  \n   65: define(ZeroOrMore.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'ZeroOrMore' });\n   66  \n   67  export function make_operators_set(...op_list) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/events.js:\n   55  }\n   56  \n   57: EventEmitter.prototype[Symbol.toStringTag] = 'EventEmitter';\n   58  \n   59  const PRIVATE = Symbol('EventTarget');\n   ..\n   98  }\n   99  \n  100: EventTarget.prototype[Symbol.toStringTag] = 'EventTarget';\n  101  \n  102  const getMethods = obj =>\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/vfs.js:\n  311            for(let chunk of q) written += ar.write(chunk);\n  312          },\n  313:         [Symbol.toStringTag]: 'WriteStream'\n  314        };\n  315      } else {\n  ...\n  329            error: () => ar.error != null,\n  330            close: () => ar.close(),\n  331:           [Symbol.toStringTag]: 'ReadStream'\n  332          };\n  333        }\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/lexer/c.js:\n  118  globalThis.CLexer = CLexer;\n  119  \n  120: define(CLexer.prototype, { [Symbol.toStringTag]: 'CLexer' });\n  121  \n  122  export default CLexer;\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/lexer/csv.js:\n   23    }\n   24  \n   25:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n   26      return \"CSVLexer\";\n   27    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/lexer/ecmascript.js:\n  129    }\n  130  \n  131:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  132      return \"ECMAScriptLexer\";\n  133    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/lexer/bnf.js:\n  194    }\n  195  \n  196:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  197      return \"BNFLexer\";\n  198    }\n\n~/Projects/plot-cv/quickjs/qjs-ffi/lib/fd_set.js:\n   25    }\n   26  \n   27:   get [Symbol.toStringTag]() {\n   28      return 'fd_set';\n   29    }\n\n~/Projects/plot-cv/quickjs/qjs-ffi/lib/socklen_t.js:\n   13    }\n   14  \n   15:   get [Symbol.toStringTag]() {\n   16      return 'socklen_t';\n   17    }\n\n~/Projects/plot-cv/quickjs/qjs-ffi/lib/socket.js:\n  252    }\n  253  \n  254:   get [Symbol.toStringTag]() {\n  255      return 'SockAddr';\n  256    }\n\n~/Projects/plot-cv/quickjs/qjs-ffi/lib/zlib.js:\n   43      Object.assign(this, obj);\n   44    }\n   45:   get [Symbol.toStringTag]() {\n   46      return `[z_stream_s @ ${this} ]`;\n   47    }\n\n~/Projects/plot-cv/quickjs/qjs-ffi/examples/portmidi.js:\n  623  }\n  624  \n  625: MIDIInput.prototype[Symbol.toStringTag] = 'MIDIInput';\n  626: MIDIOutput.prototype[Symbol.toStringTag] = 'MIDIOutput';\n  627: MIDIInputMap.prototype[Symbol.toStringTag] = 'MIDIInputMap';\n  628: MIDIOutputMap.prototype[Symbol.toStringTag] = 'MIDIOutputMap';\n  629: MIDIAccess.prototype[Symbol.toStringTag] = 'MIDIAccess';\n\n~/Projects/plot-cv/quickjs/inst/i686-w64-mingw32/usr/i686-w64-mingw32/sys-root/mingw/bin/resolve-imports.js:\n  295      close: () => {},\n  296      seek: (whence, offset) => os.seek(fd, whence, offset),\n  297:     [Symbol.toStringTag]: `FileWriter< ${fd} >`,\n  298      inspect() {\n  299:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  300      }\n  301    });\n  ...\n  316      write: fn,\n  317      close: () => {},\n  318:     [Symbol.toStringTag]: `ArrayWriter`,\n  319      inspect() {\n  320:       return inspect({ arr }) ?? this[Symbol.toStringTag];\n  321      }\n  322    });\n  ...\n  332      close: () => {},\n  333      seek: () => {},\n  334:     [Symbol.toStringTag]: `DummyWriter< ${name} >`,\n  335      inspect() {\n  336:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  337      }\n  338    });\n  ...\n  639  \n  640  define(Import.prototype, {\n  641:   [Symbol.toStringTag]: 'Import',\n  642    ids(pred = local => true) {\n  643      return ImportIds(this.tokens.slice())\n  ...\n 1346  \n 1347  define(NumericRange.prototype, {\n 1348:   [Symbol.toStringTag]: 'NumericRange',\n 1349    [inspectSymbol](depth, opts) {\n 1350      const [start, end] = this;\n ....\n 1404            return '';\n 1405          },\n 1406:         [Symbol.toStringTag]: 'FileMap(empty)'\n 1407        };\n 1408        return Object.setPrototypeOf(obj, FileMap.prototype);\n ....\n 1746  }\n 1747  \n 1748: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1749  \n 1750  function BufferFile(file, buf) {\n\n~/Projects/plot-cv/quickjs/inst/i686-w64-mingw32/usr/i686-w64-mingw32/sys-root/mingw/lib/quickjs/inotify.js:\n   71                return this.watch(event);\n   72              },\n   73:             [Symbol.toStringTag]: 'InotifyEvent'\n   74            });\n   75  */\n\n~/Projects/plot-cv/quickjs/inst/i686-w64-mingw32/usr/i686-w64-mingw32/sys-root/mingw/lib/quickjs/socklen_t.js:\n   16    }\n   17  \n   18:   get [Symbol.toStringTag]() {\n   19      return 'socklen_t';\n   20    }\n\n~/Projects/plot-cv/quickjs/inst/i686-w64-mingw32/usr/i686-w64-mingw32/sys-root/mingw/lib/quickjs/console.js:\n   51      numberBase: 10,\n   52      classKey: Symbol.toStringTag,\n   53:     hideKeys: [Symbol.toStringTag]\n   54    };\n   55  \n\n~/Projects/plot-cv/quickjs/inst/i686-w64-mingw32/usr/i686-w64-mingw32/sys-root/mingw/lib/quickjs/io.js:\n   51  }\n   52  \n   53: define(HandlerEntry.prototype, { [Symbol.toStringTag]: 'HandlerEntry' });\n   54  \n   55  export class DescriptorMap extends Array {\n   ..\n   90  }\n   91  \n   92: define(DescriptorMap.prototype, { [Symbol.toStringTag]: 'DescriptorMap' });\n   93  \n   94  export class Multiplexer {\n   ..\n  154  }\n  155  \n  156: define(Multiplexer.prototype, { [Symbol.toStringTag]: 'Multiplexer' });\n  157  \n  158  const io = new Multiplexer();\n\n~/Projects/plot-cv/quickjs/inst/i686-w64-mingw32/usr/i686-w64-mingw32/sys-root/mingw/lib/quickjs/require.js:\n   95  }\n   96  \n   97: define(Module.prototype, { [Symbol.toStringTag]: 'Module' });\n   98  \n   99  class CJSModule extends Module {\n  ...\n  137  }\n  138  \n  139: define(CJSModule.prototype, { [Symbol.toStringTag]: 'CJSModule' });\n  140  \n  141  class ESModule extends Module {\n  ...\n  170  }\n  171  \n  172: define(ESModule.prototype, { [Symbol.toStringTag]: 'ESModule' });\n  173  \n  174  function statPath(path) {\n\n~/Projects/plot-cv/quickjs/inst/i686-w64-mingw32/usr/i686-w64-mingw32/sys-root/mingw/lib/quickjs/xpath.js:\n   12  }\n   13  \n   14: DereferenceError.prototype[Symbol.toStringTag] = 'DereferenceError';\n   15  \n   16  export class XPath {\n   ..\n  118      return;\n  119      `\\x1b[1;31m${this.constructor.name ?? className(this)}\\x1b[0m ` +\n  120:       inspect([...this].map(GetKey) ?? { __proto__: { [Symbol.toStringTag]: 'XPath' }, ...obj }, {\n  121          ...opts,\n  122          customInspect: true\n  ...\n  124    }\n  125  \n  126:   get [Symbol.toStringTag]() {\n  127      return 'XPath';\n  128    }\n  ...\n  131  }\n  132  \n  133: define(XPath.prototype, { [Symbol.toStringTag]: 'XPath' });\n  134  \n  135  export const ImmutableXPath = XPath;\n\n~/Projects/plot-cv/quickjs/inst/i686-w64-mingw32/usr/i686-w64-mingw32/sys-root/mingw/lib/quickjs/stack.js:\n   31  }\n   32  \n   33: Stack.prototype[Symbol.toStringTag] = 'Stack';\n   34  \n   35  Stack.prototype.toString = function() {\n   ..\n   46  Stack.prototype[inspectSymbol] = function(depth, options) {\n   47    return (\n   48:     `\\x1b[1;31m${this[Symbol.toStringTag]}\\x1b[0m ` +\n   49      inspect([...this], depth, {\n   50        ...options,\n   ..\n  216    }\n  217  \n  218:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  219      return 'StackFrame';\n  220    }\n\n~/Projects/plot-cv/quickjs/inst/i686-w64-mingw32/usr/i686-w64-mingw32/sys-root/mingw/lib/quickjs/dom.js:\n  571  define(Node.prototype, Interface.prototype);\n  572  extend(Node.prototype, NODE_TYPES, { enumerable: false });\n  573: extend(Node.prototype, { [Symbol.toStringTag]: 'Node' }, { enumerable: false });\n  574  \n  575  function MakeCache(ctor, store = new WeakMap()) {\n  ...\n  652    NodeList.prototype,\n  653    {\n  654:     [Symbol.toStringTag]: 'NodeList',\n  655      *[Symbol.iterator]() {\n  656        const factory = Factory.for(this);\n  ...\n  701      constructor: NamedNodeMap,\n  702  \n  703:     [Symbol.toStringTag]: 'NamedNodeMap',\n  704  \n  705      get path() {\n  ...\n  994  }\n  995  \n  996: extend(Element.prototype, { [Symbol.toStringTag]: 'Element', nodeType: ELEMENT_NODE }, { enumerable: false });\n  997  \n  998  /*\n  ...\n 1167  }\n 1168  \n 1169: extend(Document.prototype, { [Symbol.toStringTag]: 'Document', nodeType: DOCUMENT_NODE }, { enumerable: false });\n 1170  \n 1171  export class Attr extends Node {\n ....\n 1227    {\n 1228      nodeType: ATTRIBUTE_NODE,\n 1229:     [Symbol.toStringTag]: 'Attr'\n 1230    },\n 1231    { enumerable: false }\n ....\n 1273  \n 1274    [inspectSymbol](depth, opts) {\n 1275:     return `\\x1b[1;31m${this[Symbol.toStringTag]}\\x1b[0m \\x1b[38;2;192;2550m${quote(this.data, \"'\")}\\x1b[0m`;\n 1276    }\n 1277  \n ....\n 1286      nodeType: TEXT_NODE,\n 1287      nodeName: '#text',\n 1288:     [Symbol.toStringTag]: 'Text'\n 1289    },\n 1290    { enumerable: false }\n ....\n 1333      nodeType: COMMENT_NODE,\n 1334      nodeName: '#comment',\n 1335:     [Symbol.toStringTag]: 'Comment'\n 1336    },\n 1337    { enumerable: false }\n ....\n 1436    TokenList.prototype,\n 1437    {\n 1438:     [Symbol.toStringTag]: 'TokenList'\n 1439    },\n 1440    { enumerable: false }\n ....\n 1594      constructor: CSSStyleDeclaration,\n 1595  \n 1596:     [Symbol.toStringTag]: 'CSSStyleDeclaration',\n 1597  \n 1598      get parentRule() {\n\n~/Projects/plot-cv/quickjs/inst/i686-w64-mingw32/usr/i686-w64-mingw32/sys-root/mingw/lib/quickjs/tty.js:\n   10  \n   11  define(ReadStream.prototype, {\n   12:   [Symbol.toStringTag]: 'ReadStream'\n   13  });\n   14  \n   ..\n   93      configurable: true\n   94    },\n   95:   [Symbol.toStringTag]: { value: 'WriteStream', configurable: true }\n   96  });\n   97  \n\n~/Projects/plot-cv/quickjs/inst/i686-w64-mingw32/usr/i686-w64-mingw32/sys-root/mingw/lib/quickjs/util.js:\n  182    },\n  183    isModuleNamespaceObject(v) {\n  184:     return isObject(v) && v[Symbol.toStringTag] == 'Module';\n  185    },\n  186    isConstructor(v) {\n  ...\n 1980  export function className(obj) {\n 1981    if(isObject(obj)) {\n 1982:     if(Symbol.toStringTag in obj) return obj[Symbol.toStringTag];\n 1983      if('constructor' in obj) return functionName(obj.constructor);\n 1984    }\n\n~/Projects/plot-cv/quickjs/inst/i686-w64-mingw32/usr/i686-w64-mingw32/sys-root/mingw/lib/quickjs/db.js:\n   95  \n   96  define(Pool.prototype, {\n   97:   [Symbol.toStringTag]: 'Pool'\n   98  });\n   99  \n\n~/Projects/plot-cv/quickjs/inst/i686-w64-mingw32/usr/i686-w64-mingw32/sys-root/mingw/lib/quickjs/repl.js:\n 2080  \n 2081  Object.assign(REPL.prototype, {\n 2082:   [Symbol.toStringTag]: 'REPL',\n 2083    handleInput: REPL.prototype.evalAndPrint,\n 2084    directives: loadModule\n\n~/Projects/plot-cv/quickjs/inst/i686-w64-mingw32/usr/i686-w64-mingw32/sys-root/mingw/lib/quickjs/streams.js:\n  137    }\n  138  \n  139:   define(ByLineStream.prototype, { [Symbol.toStringTag]: 'ByLineStream' });\n  140  \n  141    return ByLineStream;\n\n~/Projects/plot-cv/quickjs/inst/i686-w64-mingw32/usr/i686-w64-mingw32/sys-root/mingw/lib/quickjs/fs.js:\n  618    }\n  619  \n  620:   [Symbol.toStringTag] = 'inotify_event';\n  621  }\n  622  \n\n~/Projects/plot-cv/quickjs/inst/i686-w64-mingw32/usr/i686-w64-mingw32/sys-root/mingw/lib/quickjs/parser.js:\n   22  }\n   23  \n   24: define(Rule.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'Rule' });\n   25  \n   26  export class Terminal extends Rule {\n   ..\n   45  }\n   46  \n   47: define(Terminal.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'Terminal' });\n   48  \n   49  export class ZeroOrMore extends Rule {\n   ..\n   63  }\n   64  \n   65: define(ZeroOrMore.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'ZeroOrMore' });\n   66  \n   67  export function make_operators_set(...op_list) {\n\n~/Projects/plot-cv/quickjs/inst/i686-w64-mingw32/usr/i686-w64-mingw32/sys-root/mingw/lib/quickjs/events.js:\n   55  }\n   56  \n   57: EventEmitter.prototype[Symbol.toStringTag] = 'EventEmitter';\n   58  \n   59  const PRIVATE = Symbol('EventTarget');\n   ..\n   98  }\n   99  \n  100: EventTarget.prototype[Symbol.toStringTag] = 'EventTarget';\n  101  \n  102  const getMethods = obj =>\n\n~/Projects/plot-cv/quickjs/inst/i686-w64-mingw32/usr/i686-w64-mingw32/sys-root/mingw/lib/quickjs/vfs.js:\n  311            for(let chunk of q) written += ar.write(chunk);\n  312          },\n  313:         [Symbol.toStringTag]: 'WriteStream'\n  314        };\n  315      } else {\n  ...\n  329            error: () => ar.error != null,\n  330            close: () => ar.close(),\n  331:           [Symbol.toStringTag]: 'ReadStream'\n  332          };\n  333        }\n\n~/Projects/plot-cv/quickjs/inst/i686-w64-mingw32/usr/i686-w64-mingw32/sys-root/mingw/lib/quickjs/lexer/c.js:\n  118  globalThis.CLexer = CLexer;\n  119  \n  120: define(CLexer.prototype, { [Symbol.toStringTag]: 'CLexer' });\n  121  \n  122  export default CLexer;\n\n~/Projects/plot-cv/quickjs/inst/i686-w64-mingw32/usr/i686-w64-mingw32/sys-root/mingw/lib/quickjs/lexer/csv.js:\n   23    }\n   24  \n   25:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n   26      return \"CSVLexer\";\n   27    }\n\n~/Projects/plot-cv/quickjs/inst/i686-w64-mingw32/usr/i686-w64-mingw32/sys-root/mingw/lib/quickjs/lexer/ecmascript.js:\n  129    }\n  130  \n  131:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  132      return \"ECMAScriptLexer\";\n  133    }\n\n~/Projects/plot-cv/quickjs/inst/i686-w64-mingw32/usr/i686-w64-mingw32/sys-root/mingw/lib/quickjs/lexer/bnf.js:\n  194    }\n  195  \n  196:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  197      return \"BNFLexer\";\n  198    }\n\n~/Projects/plot-cv/quickjs/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/bin/resolve-imports.js:\n  295      close: () => {},\n  296      seek: (whence, offset) => os.seek(fd, whence, offset),\n  297:     [Symbol.toStringTag]: `FileWriter< ${fd} >`,\n  298      inspect() {\n  299:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  300      }\n  301    });\n  ...\n  316      write: fn,\n  317      close: () => {},\n  318:     [Symbol.toStringTag]: `ArrayWriter`,\n  319      inspect() {\n  320:       return inspect({ arr }) ?? this[Symbol.toStringTag];\n  321      }\n  322    });\n  ...\n  332      close: () => {},\n  333      seek: () => {},\n  334:     [Symbol.toStringTag]: `DummyWriter< ${name} >`,\n  335      inspect() {\n  336:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  337      }\n  338    });\n  ...\n  639  \n  640  define(Import.prototype, {\n  641:   [Symbol.toStringTag]: 'Import',\n  642    ids(pred = local => true) {\n  643      return ImportIds(this.tokens.slice())\n  ...\n 1346  \n 1347  define(NumericRange.prototype, {\n 1348:   [Symbol.toStringTag]: 'NumericRange',\n 1349    [inspectSymbol](depth, opts) {\n 1350      const [start, end] = this;\n ....\n 1404            return '';\n 1405          },\n 1406:         [Symbol.toStringTag]: 'FileMap(empty)'\n 1407        };\n 1408        return Object.setPrototypeOf(obj, FileMap.prototype);\n ....\n 1746  }\n 1747  \n 1748: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1749  \n 1750  function BufferFile(file, buf) {\n\n~/Projects/plot-cv/quickjs/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/lib/quickjs/inotify.js:\n   71                return this.watch(event);\n   72              },\n   73:             [Symbol.toStringTag]: 'InotifyEvent'\n   74            });\n   75  */\n\n~/Projects/plot-cv/quickjs/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/lib/quickjs/socklen_t.js:\n   16    }\n   17  \n   18:   get [Symbol.toStringTag]() {\n   19      return 'socklen_t';\n   20    }\n\n~/Projects/plot-cv/quickjs/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/lib/quickjs/console.js:\n   51      numberBase: 10,\n   52      classKey: Symbol.toStringTag,\n   53:     hideKeys: [Symbol.toStringTag]\n   54    };\n   55  \n\n~/Projects/plot-cv/quickjs/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/lib/quickjs/io.js:\n   51  }\n   52  \n   53: define(HandlerEntry.prototype, { [Symbol.toStringTag]: 'HandlerEntry' });\n   54  \n   55  export class DescriptorMap extends Array {\n   ..\n   90  }\n   91  \n   92: define(DescriptorMap.prototype, { [Symbol.toStringTag]: 'DescriptorMap' });\n   93  \n   94  export class Multiplexer {\n   ..\n  154  }\n  155  \n  156: define(Multiplexer.prototype, { [Symbol.toStringTag]: 'Multiplexer' });\n  157  \n  158  const io = new Multiplexer();\n\n~/Projects/plot-cv/quickjs/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/lib/quickjs/require.js:\n   95  }\n   96  \n   97: define(Module.prototype, { [Symbol.toStringTag]: 'Module' });\n   98  \n   99  class CJSModule extends Module {\n  ...\n  137  }\n  138  \n  139: define(CJSModule.prototype, { [Symbol.toStringTag]: 'CJSModule' });\n  140  \n  141  class ESModule extends Module {\n  ...\n  170  }\n  171  \n  172: define(ESModule.prototype, { [Symbol.toStringTag]: 'ESModule' });\n  173  \n  174  function statPath(path) {\n\n~/Projects/plot-cv/quickjs/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/lib/quickjs/xpath.js:\n   12  }\n   13  \n   14: DereferenceError.prototype[Symbol.toStringTag] = 'DereferenceError';\n   15  \n   16  export class XPath {\n   ..\n  118      return;\n  119      `\\x1b[1;31m${this.constructor.name ?? className(this)}\\x1b[0m ` +\n  120:       inspect([...this].map(GetKey) ?? { __proto__: { [Symbol.toStringTag]: 'XPath' }, ...obj }, {\n  121          ...opts,\n  122          customInspect: true\n  ...\n  124    }\n  125  \n  126:   get [Symbol.toStringTag]() {\n  127      return 'XPath';\n  128    }\n  ...\n  131  }\n  132  \n  133: define(XPath.prototype, { [Symbol.toStringTag]: 'XPath' });\n  134  \n  135  export const ImmutableXPath = XPath;\n\n~/Projects/plot-cv/quickjs/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/lib/quickjs/stack.js:\n   31  }\n   32  \n   33: Stack.prototype[Symbol.toStringTag] = 'Stack';\n   34  \n   35  Stack.prototype.toString = function() {\n   ..\n   46  Stack.prototype[inspectSymbol] = function(depth, options) {\n   47    return (\n   48:     `\\x1b[1;31m${this[Symbol.toStringTag]}\\x1b[0m ` +\n   49      inspect([...this], depth, {\n   50        ...options,\n   ..\n  216    }\n  217  \n  218:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  219      return 'StackFrame';\n  220    }\n\n~/Projects/plot-cv/quickjs/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/lib/quickjs/dom.js:\n  571  define(Node.prototype, Interface.prototype);\n  572  extend(Node.prototype, NODE_TYPES, { enumerable: false });\n  573: extend(Node.prototype, { [Symbol.toStringTag]: 'Node' }, { enumerable: false });\n  574  \n  575  function MakeCache(ctor, store = new WeakMap()) {\n  ...\n  652    NodeList.prototype,\n  653    {\n  654:     [Symbol.toStringTag]: 'NodeList',\n  655      *[Symbol.iterator]() {\n  656        const factory = Factory.for(this);\n  ...\n  701      constructor: NamedNodeMap,\n  702  \n  703:     [Symbol.toStringTag]: 'NamedNodeMap',\n  704  \n  705      get path() {\n  ...\n  994  }\n  995  \n  996: extend(Element.prototype, { [Symbol.toStringTag]: 'Element', nodeType: ELEMENT_NODE }, { enumerable: false });\n  997  \n  998  /*\n  ...\n 1167  }\n 1168  \n 1169: extend(Document.prototype, { [Symbol.toStringTag]: 'Document', nodeType: DOCUMENT_NODE }, { enumerable: false });\n 1170  \n 1171  export class Attr extends Node {\n ....\n 1227    {\n 1228      nodeType: ATTRIBUTE_NODE,\n 1229:     [Symbol.toStringTag]: 'Attr'\n 1230    },\n 1231    { enumerable: false }\n ....\n 1273  \n 1274    [inspectSymbol](depth, opts) {\n 1275:     return `\\x1b[1;31m${this[Symbol.toStringTag]}\\x1b[0m \\x1b[38;2;192;2550m${quote(this.data, \"'\")}\\x1b[0m`;\n 1276    }\n 1277  \n ....\n 1286      nodeType: TEXT_NODE,\n 1287      nodeName: '#text',\n 1288:     [Symbol.toStringTag]: 'Text'\n 1289    },\n 1290    { enumerable: false }\n ....\n 1333      nodeType: COMMENT_NODE,\n 1334      nodeName: '#comment',\n 1335:     [Symbol.toStringTag]: 'Comment'\n 1336    },\n 1337    { enumerable: false }\n ....\n 1436    TokenList.prototype,\n 1437    {\n 1438:     [Symbol.toStringTag]: 'TokenList'\n 1439    },\n 1440    { enumerable: false }\n ....\n 1594      constructor: CSSStyleDeclaration,\n 1595  \n 1596:     [Symbol.toStringTag]: 'CSSStyleDeclaration',\n 1597  \n 1598      get parentRule() {\n\n~/Projects/plot-cv/quickjs/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/lib/quickjs/tty.js:\n   10  \n   11  define(ReadStream.prototype, {\n   12:   [Symbol.toStringTag]: 'ReadStream'\n   13  });\n   14  \n   ..\n   93      configurable: true\n   94    },\n   95:   [Symbol.toStringTag]: { value: 'WriteStream', configurable: true }\n   96  });\n   97  \n\n~/Projects/plot-cv/quickjs/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/lib/quickjs/util.js:\n  182    },\n  183    isModuleNamespaceObject(v) {\n  184:     return isObject(v) && v[Symbol.toStringTag] == 'Module';\n  185    },\n  186    isConstructor(v) {\n  ...\n 1980  export function className(obj) {\n 1981    if(isObject(obj)) {\n 1982:     if(Symbol.toStringTag in obj) return obj[Symbol.toStringTag];\n 1983      if('constructor' in obj) return functionName(obj.constructor);\n 1984    }\n\n~/Projects/plot-cv/quickjs/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/lib/quickjs/db.js:\n   95  \n   96  define(Pool.prototype, {\n   97:   [Symbol.toStringTag]: 'Pool'\n   98  });\n   99  \n\n~/Projects/plot-cv/quickjs/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/lib/quickjs/repl.js:\n 2080  \n 2081  Object.assign(REPL.prototype, {\n 2082:   [Symbol.toStringTag]: 'REPL',\n 2083    handleInput: REPL.prototype.evalAndPrint,\n 2084    directives: loadModule\n\n~/Projects/plot-cv/quickjs/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/lib/quickjs/streams.js:\n  137    }\n  138  \n  139:   define(ByLineStream.prototype, { [Symbol.toStringTag]: 'ByLineStream' });\n  140  \n  141    return ByLineStream;\n\n~/Projects/plot-cv/quickjs/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/lib/quickjs/fs.js:\n  618    }\n  619  \n  620:   [Symbol.toStringTag] = 'inotify_event';\n  621  }\n  622  \n\n~/Projects/plot-cv/quickjs/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/lib/quickjs/parser.js:\n   22  }\n   23  \n   24: define(Rule.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'Rule' });\n   25  \n   26  export class Terminal extends Rule {\n   ..\n   45  }\n   46  \n   47: define(Terminal.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'Terminal' });\n   48  \n   49  export class ZeroOrMore extends Rule {\n   ..\n   63  }\n   64  \n   65: define(ZeroOrMore.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'ZeroOrMore' });\n   66  \n   67  export function make_operators_set(...op_list) {\n\n~/Projects/plot-cv/quickjs/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/lib/quickjs/events.js:\n   55  }\n   56  \n   57: EventEmitter.prototype[Symbol.toStringTag] = 'EventEmitter';\n   58  \n   59  const PRIVATE = Symbol('EventTarget');\n   ..\n   98  }\n   99  \n  100: EventTarget.prototype[Symbol.toStringTag] = 'EventTarget';\n  101  \n  102  const getMethods = obj =>\n\n~/Projects/plot-cv/quickjs/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/lib/quickjs/vfs.js:\n  311            for(let chunk of q) written += ar.write(chunk);\n  312          },\n  313:         [Symbol.toStringTag]: 'WriteStream'\n  314        };\n  315      } else {\n  ...\n  329            error: () => ar.error != null,\n  330            close: () => ar.close(),\n  331:           [Symbol.toStringTag]: 'ReadStream'\n  332          };\n  333        }\n\n~/Projects/plot-cv/quickjs/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/lib/quickjs/lexer/c.js:\n  118  globalThis.CLexer = CLexer;\n  119  \n  120: define(CLexer.prototype, { [Symbol.toStringTag]: 'CLexer' });\n  121  \n  122  export default CLexer;\n\n~/Projects/plot-cv/quickjs/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/lib/quickjs/lexer/csv.js:\n   23    }\n   24  \n   25:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n   26      return \"CSVLexer\";\n   27    }\n\n~/Projects/plot-cv/quickjs/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/lib/quickjs/lexer/ecmascript.js:\n  129    }\n  130  \n  131:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  132      return \"ECMAScriptLexer\";\n  133    }\n\n~/Projects/plot-cv/quickjs/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/lib/quickjs/lexer/bnf.js:\n  194    }\n  195  \n  196:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  197      return \"BNFLexer\";\n  198    }\n\n~/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/bin/resolve-imports.js:\n  295      close: () => {},\n  296      seek: (whence, offset) => os.seek(fd, whence, offset),\n  297:     [Symbol.toStringTag]: `FileWriter< ${fd} >`,\n  298      inspect() {\n  299:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  300      }\n  301    });\n  ...\n  316      write: fn,\n  317      close: () => {},\n  318:     [Symbol.toStringTag]: `ArrayWriter`,\n  319      inspect() {\n  320:       return inspect({ arr }) ?? this[Symbol.toStringTag];\n  321      }\n  322    });\n  ...\n  332      close: () => {},\n  333      seek: () => {},\n  334:     [Symbol.toStringTag]: `DummyWriter< ${name} >`,\n  335      inspect() {\n  336:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  337      }\n  338    });\n  ...\n  639  \n  640  define(Import.prototype, {\n  641:   [Symbol.toStringTag]: 'Import',\n  642    ids(pred = local => true) {\n  643      return ImportIds(this.tokens.slice())\n  ...\n 1346  \n 1347  define(NumericRange.prototype, {\n 1348:   [Symbol.toStringTag]: 'NumericRange',\n 1349    [inspectSymbol](depth, opts) {\n 1350      const [start, end] = this;\n ....\n 1404            return '';\n 1405          },\n 1406:         [Symbol.toStringTag]: 'FileMap(empty)'\n 1407        };\n 1408        return Object.setPrototypeOf(obj, FileMap.prototype);\n ....\n 1746  }\n 1747  \n 1748: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1749  \n 1750  function BufferFile(file, buf) {\n\n~/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/inotify.js:\n   71                return this.watch(event);\n   72              },\n   73:             [Symbol.toStringTag]: 'InotifyEvent'\n   74            });\n   75  */\n\n~/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/socklen_t.js:\n   16    }\n   17  \n   18:   get [Symbol.toStringTag]() {\n   19      return 'socklen_t';\n   20    }\n\n~/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/console.js:\n   51      numberBase: 10,\n   52      classKey: Symbol.toStringTag,\n   53:     hideKeys: [Symbol.toStringTag]\n   54    };\n   55  \n\n~/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/io.js:\n   51  }\n   52  \n   53: define(HandlerEntry.prototype, { [Symbol.toStringTag]: 'HandlerEntry' });\n   54  \n   55  export class DescriptorMap extends Array {\n   ..\n   90  }\n   91  \n   92: define(DescriptorMap.prototype, { [Symbol.toStringTag]: 'DescriptorMap' });\n   93  \n   94  export class Multiplexer {\n   ..\n  154  }\n  155  \n  156: define(Multiplexer.prototype, { [Symbol.toStringTag]: 'Multiplexer' });\n  157  \n  158  const io = new Multiplexer();\n\n~/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/require.js:\n   95  }\n   96  \n   97: define(Module.prototype, { [Symbol.toStringTag]: 'Module' });\n   98  \n   99  class CJSModule extends Module {\n  ...\n  137  }\n  138  \n  139: define(CJSModule.prototype, { [Symbol.toStringTag]: 'CJSModule' });\n  140  \n  141  class ESModule extends Module {\n  ...\n  170  }\n  171  \n  172: define(ESModule.prototype, { [Symbol.toStringTag]: 'ESModule' });\n  173  \n  174  function statPath(path) {\n\n~/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/xpath.js:\n   12  }\n   13  \n   14: DereferenceError.prototype[Symbol.toStringTag] = 'DereferenceError';\n   15  \n   16  export class XPath {\n   ..\n  118      return;\n  119      `\\x1b[1;31m${this.constructor.name ?? className(this)}\\x1b[0m ` +\n  120:       inspect([...this].map(GetKey) ?? { __proto__: { [Symbol.toStringTag]: 'XPath' }, ...obj }, {\n  121          ...opts,\n  122          customInspect: true\n  ...\n  124    }\n  125  \n  126:   get [Symbol.toStringTag]() {\n  127      return 'XPath';\n  128    }\n  ...\n  131  }\n  132  \n  133: define(XPath.prototype, { [Symbol.toStringTag]: 'XPath' });\n  134  \n  135  export const ImmutableXPath = XPath;\n\n~/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/stack.js:\n   31  }\n   32  \n   33: Stack.prototype[Symbol.toStringTag] = 'Stack';\n   34  \n   35  Stack.prototype.toString = function() {\n   ..\n   46  Stack.prototype[inspectSymbol] = function(depth, options) {\n   47    return (\n   48:     `\\x1b[1;31m${this[Symbol.toStringTag]}\\x1b[0m ` +\n   49      inspect([...this], depth, {\n   50        ...options,\n   ..\n  216    }\n  217  \n  218:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  219      return 'StackFrame';\n  220    }\n\n~/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/dom.js:\n  571  define(Node.prototype, Interface.prototype);\n  572  extend(Node.prototype, NODE_TYPES, { enumerable: false });\n  573: extend(Node.prototype, { [Symbol.toStringTag]: 'Node' }, { enumerable: false });\n  574  \n  575  function MakeCache(ctor, store = new WeakMap()) {\n  ...\n  652    NodeList.prototype,\n  653    {\n  654:     [Symbol.toStringTag]: 'NodeList',\n  655      *[Symbol.iterator]() {\n  656        const factory = Factory.for(this);\n  ...\n  701      constructor: NamedNodeMap,\n  702  \n  703:     [Symbol.toStringTag]: 'NamedNodeMap',\n  704  \n  705      get path() {\n  ...\n  994  }\n  995  \n  996: extend(Element.prototype, { [Symbol.toStringTag]: 'Element', nodeType: ELEMENT_NODE }, { enumerable: false });\n  997  \n  998  /*\n  ...\n 1167  }\n 1168  \n 1169: extend(Document.prototype, { [Symbol.toStringTag]: 'Document', nodeType: DOCUMENT_NODE }, { enumerable: false });\n 1170  \n 1171  export class Attr extends Node {\n ....\n 1227    {\n 1228      nodeType: ATTRIBUTE_NODE,\n 1229:     [Symbol.toStringTag]: 'Attr'\n 1230    },\n 1231    { enumerable: false }\n ....\n 1273  \n 1274    [inspectSymbol](depth, opts) {\n 1275:     return `\\x1b[1;31m${this[Symbol.toStringTag]}\\x1b[0m \\x1b[38;2;192;2550m${quote(this.data, \"'\")}\\x1b[0m`;\n 1276    }\n 1277  \n ....\n 1286      nodeType: TEXT_NODE,\n 1287      nodeName: '#text',\n 1288:     [Symbol.toStringTag]: 'Text'\n 1289    },\n 1290    { enumerable: false }\n ....\n 1333      nodeType: COMMENT_NODE,\n 1334      nodeName: '#comment',\n 1335:     [Symbol.toStringTag]: 'Comment'\n 1336    },\n 1337    { enumerable: false }\n ....\n 1436    TokenList.prototype,\n 1437    {\n 1438:     [Symbol.toStringTag]: 'TokenList'\n 1439    },\n 1440    { enumerable: false }\n ....\n 1594      constructor: CSSStyleDeclaration,\n 1595  \n 1596:     [Symbol.toStringTag]: 'CSSStyleDeclaration',\n 1597  \n 1598      get parentRule() {\n\n~/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/tty.js:\n   10  \n   11  define(ReadStream.prototype, {\n   12:   [Symbol.toStringTag]: 'ReadStream'\n   13  });\n   14  \n   ..\n   93      configurable: true\n   94    },\n   95:   [Symbol.toStringTag]: { value: 'WriteStream', configurable: true }\n   96  });\n   97  \n\n~/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/util.js:\n  182    },\n  183    isModuleNamespaceObject(v) {\n  184:     return isObject(v) && v[Symbol.toStringTag] == 'Module';\n  185    },\n  186    isConstructor(v) {\n  ...\n 1980  export function className(obj) {\n 1981    if(isObject(obj)) {\n 1982:     if(Symbol.toStringTag in obj) return obj[Symbol.toStringTag];\n 1983      if('constructor' in obj) return functionName(obj.constructor);\n 1984    }\n\n~/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/db.js:\n   95  \n   96  define(Pool.prototype, {\n   97:   [Symbol.toStringTag]: 'Pool'\n   98  });\n   99  \n\n~/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/repl.js:\n 2080  \n 2081  Object.assign(REPL.prototype, {\n 2082:   [Symbol.toStringTag]: 'REPL',\n 2083    handleInput: REPL.prototype.evalAndPrint,\n 2084    directives: loadModule\n\n~/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/streams.js:\n  137    }\n  138  \n  139:   define(ByLineStream.prototype, { [Symbol.toStringTag]: 'ByLineStream' });\n  140  \n  141    return ByLineStream;\n\n~/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/fs.js:\n  618    }\n  619  \n  620:   [Symbol.toStringTag] = 'inotify_event';\n  621  }\n  622  \n\n~/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/parser.js:\n   22  }\n   23  \n   24: define(Rule.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'Rule' });\n   25  \n   26  export class Terminal extends Rule {\n   ..\n   45  }\n   46  \n   47: define(Terminal.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'Terminal' });\n   48  \n   49  export class ZeroOrMore extends Rule {\n   ..\n   63  }\n   64  \n   65: define(ZeroOrMore.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'ZeroOrMore' });\n   66  \n   67  export function make_operators_set(...op_list) {\n\n~/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/events.js:\n   55  }\n   56  \n   57: EventEmitter.prototype[Symbol.toStringTag] = 'EventEmitter';\n   58  \n   59  const PRIVATE = Symbol('EventTarget');\n   ..\n   98  }\n   99  \n  100: EventTarget.prototype[Symbol.toStringTag] = 'EventTarget';\n  101  \n  102  const getMethods = obj =>\n\n~/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/vfs.js:\n  311            for(let chunk of q) written += ar.write(chunk);\n  312          },\n  313:         [Symbol.toStringTag]: 'WriteStream'\n  314        };\n  315      } else {\n  ...\n  329            error: () => ar.error != null,\n  330            close: () => ar.close(),\n  331:           [Symbol.toStringTag]: 'ReadStream'\n  332          };\n  333        }\n\n~/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/lexer/c.js:\n  118  globalThis.CLexer = CLexer;\n  119  \n  120: define(CLexer.prototype, { [Symbol.toStringTag]: 'CLexer' });\n  121  \n  122  export default CLexer;\n\n~/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/lexer/csv.js:\n   23    }\n   24  \n   25:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n   26      return \"CSVLexer\";\n   27    }\n\n~/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/lexer/ecmascript.js:\n  129    }\n  130  \n  131:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  132      return \"ECMAScriptLexer\";\n  133    }\n\n~/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/lexer/bnf.js:\n  194    }\n  195  \n  196:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  197      return \"BNFLexer\";\n  198    }\n\n~/Projects/plot-cv/quickjs/inst/x86_64-w64-mingw32/usr/x86_64-w64-mingw32/sys-root/mingw/bin/resolve-imports.js:\n  295      close: () => {},\n  296      seek: (whence, offset) => os.seek(fd, whence, offset),\n  297:     [Symbol.toStringTag]: `FileWriter< ${fd} >`,\n  298      inspect() {\n  299:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  300      }\n  301    });\n  ...\n  316      write: fn,\n  317      close: () => {},\n  318:     [Symbol.toStringTag]: `ArrayWriter`,\n  319      inspect() {\n  320:       return inspect({ arr }) ?? this[Symbol.toStringTag];\n  321      }\n  322    });\n  ...\n  332      close: () => {},\n  333      seek: () => {},\n  334:     [Symbol.toStringTag]: `DummyWriter< ${name} >`,\n  335      inspect() {\n  336:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  337      }\n  338    });\n  ...\n  639  \n  640  define(Import.prototype, {\n  641:   [Symbol.toStringTag]: 'Import',\n  642    ids(pred = local => true) {\n  643      return ImportIds(this.tokens.slice())\n  ...\n 1346  \n 1347  define(NumericRange.prototype, {\n 1348:   [Symbol.toStringTag]: 'NumericRange',\n 1349    [inspectSymbol](depth, opts) {\n 1350      const [start, end] = this;\n ....\n 1404            return '';\n 1405          },\n 1406:         [Symbol.toStringTag]: 'FileMap(empty)'\n 1407        };\n 1408        return Object.setPrototypeOf(obj, FileMap.prototype);\n ....\n 1746  }\n 1747  \n 1748: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1749  \n 1750  function BufferFile(file, buf) {\n\n~/Projects/plot-cv/quickjs/inst/x86_64-w64-mingw32/usr/x86_64-w64-mingw32/sys-root/mingw/lib/quickjs/inotify.js:\n   71                return this.watch(event);\n   72              },\n   73:             [Symbol.toStringTag]: 'InotifyEvent'\n   74            });\n   75  */\n\n~/Projects/plot-cv/quickjs/inst/x86_64-w64-mingw32/usr/x86_64-w64-mingw32/sys-root/mingw/lib/quickjs/socklen_t.js:\n   16    }\n   17  \n   18:   get [Symbol.toStringTag]() {\n   19      return 'socklen_t';\n   20    }\n\n~/Projects/plot-cv/quickjs/inst/x86_64-w64-mingw32/usr/x86_64-w64-mingw32/sys-root/mingw/lib/quickjs/console.js:\n   51      numberBase: 10,\n   52      classKey: Symbol.toStringTag,\n   53:     hideKeys: [Symbol.toStringTag]\n   54    };\n   55  \n\n~/Projects/plot-cv/quickjs/inst/x86_64-w64-mingw32/usr/x86_64-w64-mingw32/sys-root/mingw/lib/quickjs/io.js:\n   51  }\n   52  \n   53: define(HandlerEntry.prototype, { [Symbol.toStringTag]: 'HandlerEntry' });\n   54  \n   55  export class DescriptorMap extends Array {\n   ..\n   90  }\n   91  \n   92: define(DescriptorMap.prototype, { [Symbol.toStringTag]: 'DescriptorMap' });\n   93  \n   94  export class Multiplexer {\n   ..\n  154  }\n  155  \n  156: define(Multiplexer.prototype, { [Symbol.toStringTag]: 'Multiplexer' });\n  157  \n  158  const io = new Multiplexer();\n\n~/Projects/plot-cv/quickjs/inst/x86_64-w64-mingw32/usr/x86_64-w64-mingw32/sys-root/mingw/lib/quickjs/require.js:\n   95  }\n   96  \n   97: define(Module.prototype, { [Symbol.toStringTag]: 'Module' });\n   98  \n   99  class CJSModule extends Module {\n  ...\n  137  }\n  138  \n  139: define(CJSModule.prototype, { [Symbol.toStringTag]: 'CJSModule' });\n  140  \n  141  class ESModule extends Module {\n  ...\n  170  }\n  171  \n  172: define(ESModule.prototype, { [Symbol.toStringTag]: 'ESModule' });\n  173  \n  174  function statPath(path) {\n\n~/Projects/plot-cv/quickjs/inst/x86_64-w64-mingw32/usr/x86_64-w64-mingw32/sys-root/mingw/lib/quickjs/xpath.js:\n   12  }\n   13  \n   14: DereferenceError.prototype[Symbol.toStringTag] = 'DereferenceError';\n   15  \n   16  export class XPath {\n   ..\n  118      return;\n  119      `\\x1b[1;31m${this.constructor.name ?? className(this)}\\x1b[0m ` +\n  120:       inspect([...this].map(GetKey) ?? { __proto__: { [Symbol.toStringTag]: 'XPath' }, ...obj }, {\n  121          ...opts,\n  122          customInspect: true\n  ...\n  124    }\n  125  \n  126:   get [Symbol.toStringTag]() {\n  127      return 'XPath';\n  128    }\n  ...\n  131  }\n  132  \n  133: define(XPath.prototype, { [Symbol.toStringTag]: 'XPath' });\n  134  \n  135  export const ImmutableXPath = XPath;\n\n~/Projects/plot-cv/quickjs/inst/x86_64-w64-mingw32/usr/x86_64-w64-mingw32/sys-root/mingw/lib/quickjs/stack.js:\n   31  }\n   32  \n   33: Stack.prototype[Symbol.toStringTag] = 'Stack';\n   34  \n   35  Stack.prototype.toString = function() {\n   ..\n   46  Stack.prototype[inspectSymbol] = function(depth, options) {\n   47    return (\n   48:     `\\x1b[1;31m${this[Symbol.toStringTag]}\\x1b[0m ` +\n   49      inspect([...this], depth, {\n   50        ...options,\n   ..\n  216    }\n  217  \n  218:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  219      return 'StackFrame';\n  220    }\n\n~/Projects/plot-cv/quickjs/inst/x86_64-w64-mingw32/usr/x86_64-w64-mingw32/sys-root/mingw/lib/quickjs/dom.js:\n  571  define(Node.prototype, Interface.prototype);\n  572  extend(Node.prototype, NODE_TYPES, { enumerable: false });\n  573: extend(Node.prototype, { [Symbol.toStringTag]: 'Node' }, { enumerable: false });\n  574  \n  575  function MakeCache(ctor, store = new WeakMap()) {\n  ...\n  652    NodeList.prototype,\n  653    {\n  654:     [Symbol.toStringTag]: 'NodeList',\n  655      *[Symbol.iterator]() {\n  656        const factory = Factory.for(this);\n  ...\n  701      constructor: NamedNodeMap,\n  702  \n  703:     [Symbol.toStringTag]: 'NamedNodeMap',\n  704  \n  705      get path() {\n  ...\n  994  }\n  995  \n  996: extend(Element.prototype, { [Symbol.toStringTag]: 'Element', nodeType: ELEMENT_NODE }, { enumerable: false });\n  997  \n  998  /*\n  ...\n 1167  }\n 1168  \n 1169: extend(Document.prototype, { [Symbol.toStringTag]: 'Document', nodeType: DOCUMENT_NODE }, { enumerable: false });\n 1170  \n 1171  export class Attr extends Node {\n ....\n 1227    {\n 1228      nodeType: ATTRIBUTE_NODE,\n 1229:     [Symbol.toStringTag]: 'Attr'\n 1230    },\n 1231    { enumerable: false }\n ....\n 1273  \n 1274    [inspectSymbol](depth, opts) {\n 1275:     return `\\x1b[1;31m${this[Symbol.toStringTag]}\\x1b[0m \\x1b[38;2;192;2550m${quote(this.data, \"'\")}\\x1b[0m`;\n 1276    }\n 1277  \n ....\n 1286      nodeType: TEXT_NODE,\n 1287      nodeName: '#text',\n 1288:     [Symbol.toStringTag]: 'Text'\n 1289    },\n 1290    { enumerable: false }\n ....\n 1333      nodeType: COMMENT_NODE,\n 1334      nodeName: '#comment',\n 1335:     [Symbol.toStringTag]: 'Comment'\n 1336    },\n 1337    { enumerable: false }\n ....\n 1436    TokenList.prototype,\n 1437    {\n 1438:     [Symbol.toStringTag]: 'TokenList'\n 1439    },\n 1440    { enumerable: false }\n ....\n 1594      constructor: CSSStyleDeclaration,\n 1595  \n 1596:     [Symbol.toStringTag]: 'CSSStyleDeclaration',\n 1597  \n 1598      get parentRule() {\n\n~/Projects/plot-cv/quickjs/inst/x86_64-w64-mingw32/usr/x86_64-w64-mingw32/sys-root/mingw/lib/quickjs/tty.js:\n   10  \n   11  define(ReadStream.prototype, {\n   12:   [Symbol.toStringTag]: 'ReadStream'\n   13  });\n   14  \n   ..\n   93      configurable: true\n   94    },\n   95:   [Symbol.toStringTag]: { value: 'WriteStream', configurable: true }\n   96  });\n   97  \n\n~/Projects/plot-cv/quickjs/inst/x86_64-w64-mingw32/usr/x86_64-w64-mingw32/sys-root/mingw/lib/quickjs/util.js:\n  182    },\n  183    isModuleNamespaceObject(v) {\n  184:     return isObject(v) && v[Symbol.toStringTag] == 'Module';\n  185    },\n  186    isConstructor(v) {\n  ...\n 1980  export function className(obj) {\n 1981    if(isObject(obj)) {\n 1982:     if(Symbol.toStringTag in obj) return obj[Symbol.toStringTag];\n 1983      if('constructor' in obj) return functionName(obj.constructor);\n 1984    }\n\n~/Projects/plot-cv/quickjs/inst/x86_64-w64-mingw32/usr/x86_64-w64-mingw32/sys-root/mingw/lib/quickjs/db.js:\n   95  \n   96  define(Pool.prototype, {\n   97:   [Symbol.toStringTag]: 'Pool'\n   98  });\n   99  \n\n~/Projects/plot-cv/quickjs/inst/x86_64-w64-mingw32/usr/x86_64-w64-mingw32/sys-root/mingw/lib/quickjs/repl.js:\n 2080  \n 2081  Object.assign(REPL.prototype, {\n 2082:   [Symbol.toStringTag]: 'REPL',\n 2083    handleInput: REPL.prototype.evalAndPrint,\n 2084    directives: loadModule\n\n~/Projects/plot-cv/quickjs/inst/x86_64-w64-mingw32/usr/x86_64-w64-mingw32/sys-root/mingw/lib/quickjs/streams.js:\n  137    }\n  138  \n  139:   define(ByLineStream.prototype, { [Symbol.toStringTag]: 'ByLineStream' });\n  140  \n  141    return ByLineStream;\n\n~/Projects/plot-cv/quickjs/inst/x86_64-w64-mingw32/usr/x86_64-w64-mingw32/sys-root/mingw/lib/quickjs/fs.js:\n  618    }\n  619  \n  620:   [Symbol.toStringTag] = 'inotify_event';\n  621  }\n  622  \n\n~/Projects/plot-cv/quickjs/inst/x86_64-w64-mingw32/usr/x86_64-w64-mingw32/sys-root/mingw/lib/quickjs/parser.js:\n   22  }\n   23  \n   24: define(Rule.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'Rule' });\n   25  \n   26  export class Terminal extends Rule {\n   ..\n   45  }\n   46  \n   47: define(Terminal.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'Terminal' });\n   48  \n   49  export class ZeroOrMore extends Rule {\n   ..\n   63  }\n   64  \n   65: define(ZeroOrMore.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'ZeroOrMore' });\n   66  \n   67  export function make_operators_set(...op_list) {\n\n~/Projects/plot-cv/quickjs/inst/x86_64-w64-mingw32/usr/x86_64-w64-mingw32/sys-root/mingw/lib/quickjs/events.js:\n   55  }\n   56  \n   57: EventEmitter.prototype[Symbol.toStringTag] = 'EventEmitter';\n   58  \n   59  const PRIVATE = Symbol('EventTarget');\n   ..\n   98  }\n   99  \n  100: EventTarget.prototype[Symbol.toStringTag] = 'EventTarget';\n  101  \n  102  const getMethods = obj =>\n\n~/Projects/plot-cv/quickjs/inst/x86_64-w64-mingw32/usr/x86_64-w64-mingw32/sys-root/mingw/lib/quickjs/vfs.js:\n  311            for(let chunk of q) written += ar.write(chunk);\n  312          },\n  313:         [Symbol.toStringTag]: 'WriteStream'\n  314        };\n  315      } else {\n  ...\n  329            error: () => ar.error != null,\n  330            close: () => ar.close(),\n  331:           [Symbol.toStringTag]: 'ReadStream'\n  332          };\n  333        }\n\n~/Projects/plot-cv/quickjs/inst/x86_64-w64-mingw32/usr/x86_64-w64-mingw32/sys-root/mingw/lib/quickjs/lexer/c.js:\n  118  globalThis.CLexer = CLexer;\n  119  \n  120: define(CLexer.prototype, { [Symbol.toStringTag]: 'CLexer' });\n  121  \n  122  export default CLexer;\n\n~/Projects/plot-cv/quickjs/inst/x86_64-w64-mingw32/usr/x86_64-w64-mingw32/sys-root/mingw/lib/quickjs/lexer/csv.js:\n   23    }\n   24  \n   25:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n   26      return \"CSVLexer\";\n   27    }\n\n~/Projects/plot-cv/quickjs/inst/x86_64-w64-mingw32/usr/x86_64-w64-mingw32/sys-root/mingw/lib/quickjs/lexer/ecmascript.js:\n  129    }\n  130  \n  131:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  132      return \"ECMAScriptLexer\";\n  133    }\n\n~/Projects/plot-cv/quickjs/inst/x86_64-w64-mingw32/usr/x86_64-w64-mingw32/sys-root/mingw/lib/quickjs/lexer/bnf.js:\n  194    }\n  195  \n  196:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  197      return \"BNFLexer\";\n  198    }\n\n~/Projects/plot-cv/quickjs/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/bin/resolve-imports.js:\n  295      close: () => {},\n  296      seek: (whence, offset) => os.seek(fd, whence, offset),\n  297:     [Symbol.toStringTag]: `FileWriter< ${fd} >`,\n  298      inspect() {\n  299:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  300      }\n  301    });\n  ...\n  316      write: fn,\n  317      close: () => {},\n  318:     [Symbol.toStringTag]: `ArrayWriter`,\n  319      inspect() {\n  320:       return inspect({ arr }) ?? this[Symbol.toStringTag];\n  321      }\n  322    });\n  ...\n  332      close: () => {},\n  333      seek: () => {},\n  334:     [Symbol.toStringTag]: `DummyWriter< ${name} >`,\n  335      inspect() {\n  336:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  337      }\n  338    });\n  ...\n  639  \n  640  define(Import.prototype, {\n  641:   [Symbol.toStringTag]: 'Import',\n  642    ids(pred = local => true) {\n  643      return ImportIds(this.tokens.slice())\n  ...\n 1346  \n 1347  define(NumericRange.prototype, {\n 1348:   [Symbol.toStringTag]: 'NumericRange',\n 1349    [inspectSymbol](depth, opts) {\n 1350      const [start, end] = this;\n ....\n 1404            return '';\n 1405          },\n 1406:         [Symbol.toStringTag]: 'FileMap(empty)'\n 1407        };\n 1408        return Object.setPrototypeOf(obj, FileMap.prototype);\n ....\n 1746  }\n 1747  \n 1748: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1749  \n 1750  function BufferFile(file, buf) {\n\n~/Projects/plot-cv/quickjs/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/inotify.js:\n   71                return this.watch(event);\n   72              },\n   73:             [Symbol.toStringTag]: 'InotifyEvent'\n   74            });\n   75  */\n\n~/Projects/plot-cv/quickjs/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/socklen_t.js:\n   16    }\n   17  \n   18:   get [Symbol.toStringTag]() {\n   19      return 'socklen_t';\n   20    }\n\n~/Projects/plot-cv/quickjs/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/console.js:\n   51      numberBase: 10,\n   52      classKey: Symbol.toStringTag,\n   53:     hideKeys: [Symbol.toStringTag]\n   54    };\n   55  \n\n~/Projects/plot-cv/quickjs/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/io.js:\n   51  }\n   52  \n   53: define(HandlerEntry.prototype, { [Symbol.toStringTag]: 'HandlerEntry' });\n   54  \n   55  export class DescriptorMap extends Array {\n   ..\n   90  }\n   91  \n   92: define(DescriptorMap.prototype, { [Symbol.toStringTag]: 'DescriptorMap' });\n   93  \n   94  export class Multiplexer {\n   ..\n  154  }\n  155  \n  156: define(Multiplexer.prototype, { [Symbol.toStringTag]: 'Multiplexer' });\n  157  \n  158  const io = new Multiplexer();\n\n~/Projects/plot-cv/quickjs/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/require.js:\n   95  }\n   96  \n   97: define(Module.prototype, { [Symbol.toStringTag]: 'Module' });\n   98  \n   99  class CJSModule extends Module {\n  ...\n  137  }\n  138  \n  139: define(CJSModule.prototype, { [Symbol.toStringTag]: 'CJSModule' });\n  140  \n  141  class ESModule extends Module {\n  ...\n  170  }\n  171  \n  172: define(ESModule.prototype, { [Symbol.toStringTag]: 'ESModule' });\n  173  \n  174  function statPath(path) {\n\n~/Projects/plot-cv/quickjs/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/xpath.js:\n   12  }\n   13  \n   14: DereferenceError.prototype[Symbol.toStringTag] = 'DereferenceError';\n   15  \n   16  export class XPath {\n   ..\n  118      return;\n  119      `\\x1b[1;31m${this.constructor.name ?? className(this)}\\x1b[0m ` +\n  120:       inspect([...this].map(GetKey) ?? { __proto__: { [Symbol.toStringTag]: 'XPath' }, ...obj }, {\n  121          ...opts,\n  122          customInspect: true\n  ...\n  124    }\n  125  \n  126:   get [Symbol.toStringTag]() {\n  127      return 'XPath';\n  128    }\n  ...\n  131  }\n  132  \n  133: define(XPath.prototype, { [Symbol.toStringTag]: 'XPath' });\n  134  \n  135  export const ImmutableXPath = XPath;\n\n~/Projects/plot-cv/quickjs/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/stack.js:\n   31  }\n   32  \n   33: Stack.prototype[Symbol.toStringTag] = 'Stack';\n   34  \n   35  Stack.prototype.toString = function() {\n   ..\n   46  Stack.prototype[inspectSymbol] = function(depth, options) {\n   47    return (\n   48:     `\\x1b[1;31m${this[Symbol.toStringTag]}\\x1b[0m ` +\n   49      inspect([...this], depth, {\n   50        ...options,\n   ..\n  216    }\n  217  \n  218:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  219      return 'StackFrame';\n  220    }\n\n~/Projects/plot-cv/quickjs/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/dom.js:\n  571  define(Node.prototype, Interface.prototype);\n  572  extend(Node.prototype, NODE_TYPES, { enumerable: false });\n  573: extend(Node.prototype, { [Symbol.toStringTag]: 'Node' }, { enumerable: false });\n  574  \n  575  function MakeCache(ctor, store = new WeakMap()) {\n  ...\n  652    NodeList.prototype,\n  653    {\n  654:     [Symbol.toStringTag]: 'NodeList',\n  655      *[Symbol.iterator]() {\n  656        const factory = Factory.for(this);\n  ...\n  701      constructor: NamedNodeMap,\n  702  \n  703:     [Symbol.toStringTag]: 'NamedNodeMap',\n  704  \n  705      get path() {\n  ...\n  994  }\n  995  \n  996: extend(Element.prototype, { [Symbol.toStringTag]: 'Element', nodeType: ELEMENT_NODE }, { enumerable: false });\n  997  \n  998  /*\n  ...\n 1167  }\n 1168  \n 1169: extend(Document.prototype, { [Symbol.toStringTag]: 'Document', nodeType: DOCUMENT_NODE }, { enumerable: false });\n 1170  \n 1171  export class Attr extends Node {\n ....\n 1227    {\n 1228      nodeType: ATTRIBUTE_NODE,\n 1229:     [Symbol.toStringTag]: 'Attr'\n 1230    },\n 1231    { enumerable: false }\n ....\n 1273  \n 1274    [inspectSymbol](depth, opts) {\n 1275:     return `\\x1b[1;31m${this[Symbol.toStringTag]}\\x1b[0m \\x1b[38;2;192;2550m${quote(this.data, \"'\")}\\x1b[0m`;\n 1276    }\n 1277  \n ....\n 1286      nodeType: TEXT_NODE,\n 1287      nodeName: '#text',\n 1288:     [Symbol.toStringTag]: 'Text'\n 1289    },\n 1290    { enumerable: false }\n ....\n 1333      nodeType: COMMENT_NODE,\n 1334      nodeName: '#comment',\n 1335:     [Symbol.toStringTag]: 'Comment'\n 1336    },\n 1337    { enumerable: false }\n ....\n 1436    TokenList.prototype,\n 1437    {\n 1438:     [Symbol.toStringTag]: 'TokenList'\n 1439    },\n 1440    { enumerable: false }\n ....\n 1594      constructor: CSSStyleDeclaration,\n 1595  \n 1596:     [Symbol.toStringTag]: 'CSSStyleDeclaration',\n 1597  \n 1598      get parentRule() {\n\n~/Projects/plot-cv/quickjs/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/tty.js:\n   10  \n   11  define(ReadStream.prototype, {\n   12:   [Symbol.toStringTag]: 'ReadStream'\n   13  });\n   14  \n   ..\n   93      configurable: true\n   94    },\n   95:   [Symbol.toStringTag]: { value: 'WriteStream', configurable: true }\n   96  });\n   97  \n\n~/Projects/plot-cv/quickjs/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/util.js:\n  182    },\n  183    isModuleNamespaceObject(v) {\n  184:     return isObject(v) && v[Symbol.toStringTag] == 'Module';\n  185    },\n  186    isConstructor(v) {\n  ...\n 1980  export function className(obj) {\n 1981    if(isObject(obj)) {\n 1982:     if(Symbol.toStringTag in obj) return obj[Symbol.toStringTag];\n 1983      if('constructor' in obj) return functionName(obj.constructor);\n 1984    }\n\n~/Projects/plot-cv/quickjs/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/db.js:\n   95  \n   96  define(Pool.prototype, {\n   97:   [Symbol.toStringTag]: 'Pool'\n   98  });\n   99  \n\n~/Projects/plot-cv/quickjs/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/repl.js:\n 2080  \n 2081  Object.assign(REPL.prototype, {\n 2082:   [Symbol.toStringTag]: 'REPL',\n 2083    handleInput: REPL.prototype.evalAndPrint,\n 2084    directives: loadModule\n\n~/Projects/plot-cv/quickjs/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/streams.js:\n  137    }\n  138  \n  139:   define(ByLineStream.prototype, { [Symbol.toStringTag]: 'ByLineStream' });\n  140  \n  141    return ByLineStream;\n\n~/Projects/plot-cv/quickjs/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/fs.js:\n  618    }\n  619  \n  620:   [Symbol.toStringTag] = 'inotify_event';\n  621  }\n  622  \n\n~/Projects/plot-cv/quickjs/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/parser.js:\n   22  }\n   23  \n   24: define(Rule.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'Rule' });\n   25  \n   26  export class Terminal extends Rule {\n   ..\n   45  }\n   46  \n   47: define(Terminal.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'Terminal' });\n   48  \n   49  export class ZeroOrMore extends Rule {\n   ..\n   63  }\n   64  \n   65: define(ZeroOrMore.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'ZeroOrMore' });\n   66  \n   67  export function make_operators_set(...op_list) {\n\n~/Projects/plot-cv/quickjs/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/events.js:\n   55  }\n   56  \n   57: EventEmitter.prototype[Symbol.toStringTag] = 'EventEmitter';\n   58  \n   59  const PRIVATE = Symbol('EventTarget');\n   ..\n   98  }\n   99  \n  100: EventTarget.prototype[Symbol.toStringTag] = 'EventTarget';\n  101  \n  102  const getMethods = obj =>\n\n~/Projects/plot-cv/quickjs/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/vfs.js:\n  311            for(let chunk of q) written += ar.write(chunk);\n  312          },\n  313:         [Symbol.toStringTag]: 'WriteStream'\n  314        };\n  315      } else {\n  ...\n  329            error: () => ar.error != null,\n  330            close: () => ar.close(),\n  331:           [Symbol.toStringTag]: 'ReadStream'\n  332          };\n  333        }\n\n~/Projects/plot-cv/quickjs/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/lexer/c.js:\n  118  globalThis.CLexer = CLexer;\n  119  \n  120: define(CLexer.prototype, { [Symbol.toStringTag]: 'CLexer' });\n  121  \n  122  export default CLexer;\n\n~/Projects/plot-cv/quickjs/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/lexer/csv.js:\n   23    }\n   24  \n   25:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n   26      return \"CSVLexer\";\n   27    }\n\n~/Projects/plot-cv/quickjs/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/lexer/ecmascript.js:\n  129    }\n  130  \n  131:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  132      return \"ECMAScriptLexer\";\n  133    }\n\n~/Projects/plot-cv/quickjs/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/lexer/bnf.js:\n  194    }\n  195  \n  196:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  197      return \"BNFLexer\";\n  198    }\n\n~/Projects/plot-cv/quickjs-2024-01-13/quickjs.c:\n 40738  static const JSCFunctionListEntry js_array_iterator_proto_funcs[] = {\n 40739      JS_ITERATOR_NEXT_DEF(\"next\", 0, js_array_iterator_next, 0 ),\n 40740:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Array Iterator\", JS_PROP_CONFIGURABLE ),\n 40741  };\n 40742  \n .....\n 42883  static const JSCFunctionListEntry js_string_iterator_proto_funcs[] = {\n 42884      JS_ITERATOR_NEXT_DEF(\"next\", 0, js_string_iterator_next, 0 ),\n 42885:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"String Iterator\", JS_PROP_CONFIGURABLE ),\n 42886  };\n 42887  \n .....\n 43149      JS_CFUNC_DEF(\"imul\", 2, js_math_imul ),\n 43150      JS_CFUNC_DEF(\"clz32\", 1, js_math_clz32 ),\n 43151:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Math\", JS_PROP_CONFIGURABLE ),\n 43152      JS_PROP_DOUBLE_DEF(\"E\", 2.718281828459045, 0 ),\n 43153      JS_PROP_DOUBLE_DEF(\"LN10\", 2.302585092994046, 0 ),\n .....\n 44786  static const JSCFunctionListEntry js_regexp_string_iterator_proto_funcs[] = {\n 44787      JS_ITERATOR_NEXT_DEF(\"next\", 0, js_regexp_string_iterator_next, 0 ),\n 44788:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"RegExp String Iterator\", JS_PROP_CONFIGURABLE ),\n 44789  };\n 44790  \n .....\n 45498      JS_CFUNC_DEF(\"parse\", 2, js_json_parse ),\n 45499      JS_CFUNC_DEF(\"stringify\", 3, js_json_stringify ),\n 45500:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"JSON\", JS_PROP_CONFIGURABLE ),\n 45501  };\n 45502  \n .....\n 45672      JS_CFUNC_DEF(\"set\", 3, js_reflect_set ),\n 45673      JS_CFUNC_DEF(\"setPrototypeOf\", 2, js_reflect_setPrototypeOf ),\n 45674:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Reflect\", JS_PROP_CONFIGURABLE ),\n 45675  };\n 45676  \n .....\n 46714      // XXX: should have writable: false\n 46715      JS_CFUNC_DEF(\"[Symbol.toPrimitive]\", 1, js_symbol_valueOf ),\n 46716:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Symbol\", JS_PROP_CONFIGURABLE ),\n 46717      JS_CGETSET_DEF(\"description\", js_symbol_get_description, NULL ),\n 46718  };\n .....\n 47553      JS_CFUNC_MAGIC_DEF(\"entries\", 0, js_create_map_iterator, (JS_ITERATOR_KIND_KEY_AND_VALUE << 2) | 0 ),\n 47554      JS_ALIAS_DEF(\"[Symbol.iterator]\", \"entries\" ),\n 47555:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Map\", JS_PROP_CONFIGURABLE ),\n 47556  };\n 47557  \n 47558  static const JSCFunctionListEntry js_map_iterator_proto_funcs[] = {\n 47559      JS_ITERATOR_NEXT_DEF(\"next\", 0, js_map_iterator_next, 0 ),\n 47560:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Map Iterator\", JS_PROP_CONFIGURABLE ),\n 47561  };\n 47562  \n .....\n 47572      JS_ALIAS_DEF(\"[Symbol.iterator]\", \"values\" ),\n 47573      JS_CFUNC_MAGIC_DEF(\"entries\", 0, js_create_map_iterator, (JS_ITERATOR_KIND_KEY_AND_VALUE << 2) | MAGIC_SET ),\n 47574:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Set\", JS_PROP_CONFIGURABLE ),\n 47575  };\n 47576  \n 47577  static const JSCFunctionListEntry js_set_iterator_proto_funcs[] = {\n 47578      JS_ITERATOR_NEXT_DEF(\"next\", 0, js_map_iterator_next, MAGIC_SET ),\n 47579:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Set Iterator\", JS_PROP_CONFIGURABLE ),\n 47580  };\n 47581  \n .....\n 47585      JS_CFUNC_MAGIC_DEF(\"has\", 1, js_map_has, MAGIC_WEAK ),\n 47586      JS_CFUNC_MAGIC_DEF(\"delete\", 1, js_map_delete, MAGIC_WEAK ),\n 47587:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"WeakMap\", JS_PROP_CONFIGURABLE ),\n 47588  };\n 47589  \n .....\n 47592      JS_CFUNC_MAGIC_DEF(\"has\", 1, js_map_has, MAGIC_SET | MAGIC_WEAK ),\n 47593      JS_CFUNC_MAGIC_DEF(\"delete\", 1, js_map_delete, MAGIC_SET | MAGIC_WEAK ),\n 47594:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"WeakSet\", JS_PROP_CONFIGURABLE ),\n 47595  };\n 47596  \n .....\n 47646  /* Generator */\n 47647  static const JSCFunctionListEntry js_generator_function_proto_funcs[] = {\n 47648:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"GeneratorFunction\", JS_PROP_CONFIGURABLE),\n 47649  };\n 47650  \n .....\n 47653      JS_ITERATOR_NEXT_DEF(\"return\", 1, js_generator_next, GEN_MAGIC_RETURN ),\n 47654      JS_ITERATOR_NEXT_DEF(\"throw\", 1, js_generator_next, GEN_MAGIC_THROW ),\n 47655:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Generator\", JS_PROP_CONFIGURABLE),\n 47656  };\n 47657  \n .....\n 48662      JS_CFUNC_DEF(\"catch\", 1, js_promise_catch ),\n 48663      JS_CFUNC_DEF(\"finally\", 1, js_promise_finally ),\n 48664:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Promise\", JS_PROP_CONFIGURABLE ),\n 48665  };\n 48666  \n 48667  /* AsyncFunction */\n 48668  static const JSCFunctionListEntry js_async_function_proto_funcs[] = {\n 48669:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"AsyncFunction\", JS_PROP_CONFIGURABLE ),\n 48670  };\n 48671  \n .....\n 48864  \n 48865  static const JSCFunctionListEntry js_async_generator_function_proto_funcs[] = {\n 48866:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"AsyncGeneratorFunction\", JS_PROP_CONFIGURABLE ),\n 48867  };\n 48868  \n .....\n 48873      JS_CFUNC_MAGIC_DEF(\"return\", 1, js_async_generator_next, GEN_MAGIC_RETURN ),\n 48874      JS_CFUNC_MAGIC_DEF(\"throw\", 1, js_async_generator_next, GEN_MAGIC_THROW ),\n 48875:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"AsyncGenerator\", JS_PROP_CONFIGURABLE ),\n 48876  };\n 48877  \n .....\n 50839      JS_CFUNC_DEF(\"toString\", 0, js_bigint_toString ),\n 50840      JS_CFUNC_DEF(\"valueOf\", 0, js_bigint_valueOf ),\n 50841:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"BigInt\", JS_PROP_CONFIGURABLE ),\n 50842  };\n 50843  \n .....\n 52875      JS_CGETSET_MAGIC_DEF(\"byteLength\", js_array_buffer_get_byteLength, NULL, JS_CLASS_ARRAY_BUFFER ),\n 52876      JS_CFUNC_MAGIC_DEF(\"slice\", 2, js_array_buffer_slice, JS_CLASS_ARRAY_BUFFER ),\n 52877:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"ArrayBuffer\", JS_PROP_CONFIGURABLE ),\n 52878  };\n 52879  \n .....\n 52887      JS_CGETSET_MAGIC_DEF(\"byteLength\", js_array_buffer_get_byteLength, NULL, JS_CLASS_SHARED_ARRAY_BUFFER ),\n 52888      JS_CFUNC_MAGIC_DEF(\"slice\", 2, js_array_buffer_slice, JS_CLASS_SHARED_ARRAY_BUFFER ),\n 52889:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"SharedArrayBuffer\", JS_PROP_CONFIGURABLE ),\n 52890  };\n 52891  \n .....\n 54424      JS_CFUNC_MAGIC_DEF(\"keys\", 0, js_create_typed_array_iterator, JS_ITERATOR_KIND_KEY ),\n 54425      JS_CFUNC_MAGIC_DEF(\"entries\", 0, js_create_typed_array_iterator, JS_ITERATOR_KIND_KEY_AND_VALUE ),\n 54426:     JS_CGETSET_DEF(\"[Symbol.toStringTag]\", js_typed_array_get_toStringTag, NULL ),\n 54427      JS_CFUNC_DEF(\"copyWithin\", 2, js_typed_array_copyWithin ),\n 54428      JS_CFUNC_MAGIC_DEF(\"every\", 1, js_array_every, special_every | special_TA ),\n .....\n 55006      JS_CFUNC_MAGIC_DEF(\"setFloat32\", 2, js_dataview_setValue, JS_CLASS_FLOAT32_ARRAY ),\n 55007      JS_CFUNC_MAGIC_DEF(\"setFloat64\", 2, js_dataview_setValue, JS_CLASS_FLOAT64_ARRAY ),\n 55008:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"DataView\", JS_PROP_CONFIGURABLE ),\n 55009  };\n 55010  \n .....\n 55445      JS_CFUNC_DEF(\"wait\", 4, js_atomics_wait ),\n 55446      JS_CFUNC_DEF(\"notify\", 3, js_atomics_notify ),\n 55447:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Atomics\", JS_PROP_CONFIGURABLE ),\n 55448  };\n 55449  \n\n~/Projects/plot-cv/lib/compileCommand.js:\n  114  \n  115    /* [Symbol.inspect](depth, options = {}) {\n  116:     return '\\x1b[1;31m' + this[Symbol.toStringTag] + '\\x1b[0m ' + inspect(this.argv, options);\n  117    }*/\n  118  \n  ...\n  137        };\n  138      },\n  139:     [Symbol.toStringTag]: 'Command' /*, [Symbol.species]: Command*/\n  140    })\n  141  );\n  ...\n  227    CompileCommand.prototype,\n  228    nonenumerable({\n  229:     [Symbol.toStringTag]: 'CompileCommand',\n  230      type: 'compile',\n  231      [Symbol.species]: CompileCommand,\n  ...\n  242  );\n  243  \n  244: //CompileCommand.prototype[Symbol.toStringTag] = 'CompileCommand';\n  245  \n  246  export class LinkCommand extends Command {\n  ...\n  267  }\n  268  \n  269: //LinkCommand.prototype[Symbol.toStringTag] = 'LinkCommand';\n  270  \n  271  define(\n  272    LinkCommand.prototype,\n  273    nonenumerable({\n  274:      [Symbol.toStringTag]: 'LinkCommand',\n  275     __proto__: Command.prototype,\n  276      type: 'link',\n\n~/Projects/plot-cv/lib/fd-graph.js:\n  457    draw(ctx) {}\n  458  \n  459:   get [Symbol.toStringTag]() {\n  460      return 'Edge';\n  461    }\n\n~/Projects/plot-cv/lib/jslexer.js:\n  121    }\n  122  \n  123:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  124      return \"JSLexer\";\n  125    }\n\n~/Projects/plot-cv/lib/misc.js:\n  146    },\n  147    isModuleNamespaceObject(v) {\n  148:     return isObject(v) && v[Symbol.toStringTag] == 'Module';\n  149    },\n  150    isConstructor(v) {\n  ...\n  204      return `SyscallError: '${this.syscall}' errno = ${this.code} (${this.errno})`;\n  205    },\n  206:   [Symbol.toStringTag]: 'SyscallError'\n  207  });\n  208  \n  ...\n 2335    if(isObject(obj)) {\n 2336      if('constructor' in obj) return functionName(obj.constructor);\n 2337:     if(Symbol.toStringTag in obj) return obj[Symbol.toStringTag];\n 2338    }\n 2339    return null;\n ....\n 2417  \n 2418  export function isBigDecimal(num) {\n 2419:   return typeof num == 'bigdecimal' || num[Symbol.toStringTag] == 'BigDecimal';\n 2420  }\n 2421  \n 2422  export function isBigFloat(num) {\n 2423:   return typeof num == 'bigfloat' || num[Symbol.toStringTag] == 'BigFloat';\n 2424  }\n 2425  \n 2426  export function isBigInt(num) {\n 2427:   return typeof num == 'bigint' || num[Symbol.toStringTag] == 'isBigInt';\n 2428  }\n 2429  \n ....\n 2449  \n 2450  export function isError(value) {\n 2451:   return value instanceof Error || value[Symbol.toStringTag].endsWith('Error');\n 2452  }\n 2453  \n ....\n 2508  \n 2509  export function isSymbol(value) {\n 2510:   return typeof value == 'symbol' || value[Symbol.toStringTag] == 'Symbol';\n 2511  }\n 2512  \n\n~/Projects/plot-cv/lib/stack.js:\n   26  }\n   27  \n   28: Stack.prototype[Symbol.toStringTag] = 'Stack';\n   29  \n   30  Stack.prototype.toString = function() {\n   ..\n   40  };\n   41  Stack.prototype[inspectSymbol] = function(depth, options) {\n   42:   return `\\x1b[1;31m${this[Symbol.toStringTag]}\\x1b[0m ` + globalThis.inspect([...this], depth, { ...options, breakLength: 1000, compact: 1 });\n   43  };\n   44  \n   ..\n  204    }\n  205  \n  206:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  207      return 'StackFrame';\n  208    }\n\n~/Projects/plot-cv/lib/pointer.js:\n  188    }\n  189  \n  190:   [Symbol.toStringTag]() {\n  191      return Pointer.prototype.toString.call('.', '\\u220a' + CHILDREN_SPACE);\n  192    }\n\n~/Projects/plot-cv/lib/util.js:\n 3602  Stack:${Util.stack.prototype.toString.call(stack, color, stack.columnWidths)}`;\n 3603      },\n 3604:     [Symbol.toStringTag]() {\n 3605        return this.toString(false);\n 3606      },\n ....\n 3651      return text;\n 3652    },\n 3653:   [Symbol.toStringTag]() {\n 3654      return Util.location.prototype.toString.call(this, false);\n 3655    },\n ....\n 3772        return this.getLocation();\n 3773      },\n 3774:     [Symbol.toStringTag]() {\n 3775        return this.toString(false);\n 3776      },\n ....\n 3947      return s + '\\n';\n 3948    },\n 3949:   [Symbol.toStringTag]() {\n 3950      return Util.stack.prototype.toString.call(this);\n 3951    },\n\n~/Projects/plot-cv/lib/meriyah.js:\n  182  }\n  183  \n  184: ParseError.prototype[Symbol.toStringTag] = 'ParseError';\n  185  \n  186  function report(parser, type, ...params) {\n\n~/Projects/plot-cv/lib/location.js:\n   22    return new Location(line, column, pos, withFilename ? file : null, freeze);\n   23  };\n   24: Location.prototype[Symbol.toStringTag] = 'Location';\n   25  \n   26  Location.prototype[Symbol.iterator] = function* () {\n\n~/Projects/plot-cv/lib/svg/path.js:\n  549  };\n  550  \n  551: SvgPath.prototype[Symbol.toStringTag] = 'SvgPath';\n  552  \n  553  export default SvgPath;\n\n~/Projects/plot-cv/lib/geom/polygon.js:\n    9    }\n   10  \n   11:   get [Symbol.toStringTag]() {\n   12      return 'Polygon';\n   13    }\n\n~/Projects/plot-cv/lib/geom/lineList.js:\n  162      return this.map(line => line.toString({ ...options, pad: 0, separator: '|' })).join(separator);\n  163    }\n  164:   [Symbol.toStringTag]() {\n  165      return this.toString({ separator: '\\n' });\n  166    }\n\n~/Projects/plot-cv/lib/geom/size.js:\n   57  Size.prototype.height = NaN;*/\n   58  Size.prototype.units = null;\n   59: Size.prototype[Symbol.toStringTag] = 'Size';\n   60  \n   61  Size.prototype.convertUnits = function(w = 'window' in globalThis ? window : null) {\n   ..\n  215    Size.prototype[Symbol.inspect] = function(depth, options) {\n  216      const { width, height } = this;\n  217:     return define({ width, height }, { [Symbol.toStringTag]: 'Size' });\n  218    };\n  219  Size.prototype[Symbol.iterator] = function* () {\n\n~/Projects/plot-cv/lib/geom/graph.js:\n  312  }\n  313  \n  314: Graph.prototype[Symbol.toStringTag] = 'Graph';\n  315  \n  316  export class Node {\n  ...\n  325  }\n  326  \n  327: Node.prototype[Symbol.toStringTag] = 'Node';\n  328  Node.prototype.point = null;\n  329  \n  ...\n  339  }\n  340  \n  341: Edge.prototype[Symbol.toStringTag] = 'Edge';\n  342  \n  343  Graph.Node = Node;\n\n~/Projects/plot-cv/lib/geom/point.js:\n  300    [inspectSymbol](depth, options) {\n  301      const { x, y } = this;\n  302:     return define({ x, y }, { [Symbol.toStringTag]: 'Point' });\n  303    },\n  304:   [Symbol.toStringTag]: 'Point'\n  305  });\n  306  \n\n~/Projects/plot-cv/lib/geom/pointList.js:\n  488    }\n  489  \n  490:   /*PointList.prototype[Symbol.toStringTag] = function(sep = ',', prec) {\n  491    return Array.prototype.map\n  492      .call(this, point => point.round(prec))\n  ...\n  559  }\n  560  \n  561: PointList.prototype[Symbol.toStringTag] = 'PointList';\n  562  \n  563  define(PointList, {\n\n~/Projects/plot-cv/lib/geom/transformation.js:\n   22    }\n   23  \n   24:   get [Symbol.toStringTag]() {\n   25      return functionName(this.constructor);\n   26    }\n   ..\n  121    }\n  122  \n  123:   /*[Symbol.toStringTag]() {\n  124      return this.toString();\n  125    }*/\n  ...\n  146  }\n  147  \n  148: //Transformation.prototype[Symbol.toStringTag]='Transformation';\n  149  \n  150  Object.defineProperty(Transformation, Symbol.hasInstance, {\n  ...\n  437  \n  438    /*\n  439:   [Symbol.toStringTag]() {\n  440      return this.toSource();\n  441    }*/\n  ...\n  631    }\n  632  \n  633:   /*  [Symbol.toStringTag]() {\n  634      return this.toString();\n  635    }*/\n\n~/Projects/plot-cv/lib/geom/rect.js:\n   88    return new Rect(...matches.map(m => +m[0]));\n   89  };\n   90: Rect.prototype[Symbol.toStringTag] = 'Rect';\n   91  \n   92  Rect.prototype.clone = function(fn) {\n   ..\n  459  Rect.prototype[inspectSymbol] = function(depth, options) {\n  460    const { x, y, width, height } = this;\n  461:   return { x, y, width, height, [Symbol.toStringTag]: 'Rect' };\n  462  };\n  463  Rect.isBBox = rect => !(rect instanceof Rect) && ['x1', 'x2', 'y1', 'y2'].every(prop => prop in rect);\n\n~/Projects/plot-cv/lib/geom/bbox.js:\n  288  }\n  289  \n  290: BBox.prototype[Symbol.toStringTag] = 'BBox';\n  291  \n  292  export const isBBox = (bbox, testFn = (prop, name, obj) => name in obj) => isObject(bbox) && ['x1', 'y1', 'x2', 'y2'].every(n => testFn(bbox[n], n, bbox));\n\n~/Projects/plot-cv/lib/geom/circle.js:\n   60  \n   61  export const isCircle = obj => ['x', 'y', 'radius'].every(prop => obj[prop] !== undefined);\n   62: Circle.prototype[Symbol.toStringTag] = 'Circle';\n   63  \n   64  Object.defineProperty(Circle.prototype, 'x', {\n\n~/Projects/plot-cv/lib/xml/xpath.js:\n  318    }\n  319  \n  320:   [Symbol.toStringTag]() {\n  321      return MutableXPath.prototype[Symbol.inspect ?? Symbol.for('nodejs.util.inspect.custom')].call(this, text => text);\n  322    }\n\n~/Projects/plot-cv/lib/xml/util.js:\n  113      return [this[0], this[1], ...(Array.isArray(this[2]) ? this[2] : [])];\n  114    },\n  115:   [Symbol.toStringTag]() {\n  116      return this.toString();\n  117    }\n\n~/Projects/plot-cv/lib/color/hsla.js:\n  141    return parseInt('0x' + hex.slice(1));\n  142  };\n  143: HSLA.prototype[Symbol.toStringTag] = function() {\n  144    return HSLA.prototype.toString.call(this);\n  145  };\n\n~/Projects/plot-cv/lib/eagle/document.js:\n  380  }\n  381  \n  382: define(EagleDocument.prototype, { [Symbol.toStringTag]: 'EagleDocument' });\n  383  \n\n~/Projects/plot-cv/lib/eagle/node.js:\n  375      }\n  376  \n  377:     const name = this[Symbol.toStringTag];\n  378  \n  379      return (ret = concat(text(name + ' ', 0), ret));\n  ...\n  479    EagleNode.prototype,\n  480    nonenumerable({\n  481:     [Symbol.toStringTag]: 'EagleNode',\n  482      ref: null\n  483    })\n\n~/Projects/plot-cv/lib/eagle/project.js:\n  338  }\n  339  \n  340: EagleProject.prototype[Symbol.toStringTag] = 'EagleProject';\n  341  \n\n~/Projects/plot-cv/lib/eagle/nodeMap.js:\n  134  }\n  135  \n  136: EagleNodeMap.prototype[Symbol.toStringTag] = 'EagleNodeMap';\n  137  \n\n~/Projects/plot-cv/lib/eagle/ref.js:\n  125  }\n  126  \n  127: define(EagleReference.prototype, nonenumerable({ [Symbol.toStringTag]: 'EagleReference' }));\n  128  \n  129  export function EagleRef(root, path, check = false) {\n\n~/Projects/plot-cv/lib/eagle/classes.js:\n    7    }\n    8  }\n    9: Library.prototype[Symbol.toStringTag] = 'Library';\n   10  \n   11  export class Package extends ObjectInterface {\n   ..\n   15  }\n   16  \n   17: Package.prototype[Symbol.toStringTag] = 'Package';\n   18  \n   19  export class Element extends ObjectInterface {\n   ..\n   39  }\n   40  \n   41: Element.prototype[Symbol.toStringTag] = 'Element';\n   42  \n\n~/Projects/plot-cv/lib/eagle/element.js:\n 1085  \n 1086  define(EagleElement, nonenumerable({ subscribers: [], r: null, class: undefined }));\n 1087: weakDefine(EagleElement.prototype, { [Symbol.toStringTag]: 'EagleElement' });\n 1088: EagleElement.prototype[Symbol.toStringTag] = 'EagleElement';\n 1089  \n 1090  export const makeEagleElement = (owner, ref, raw) => EagleElement.get(owner, ref, raw);\n\n~/Projects/plot-cv/lib/eagle/nodeList.js:\n  170  }\n  171  \n  172: EagleNodeList.prototype[Symbol.toStringTag] = 'EagleNodeList';\n  173  \n\n~/Projects/plot-cv/lib/dom/cacheStorage.js:\n  103     * @return {[type]} [description]\n  104     */\n  105:   [Symbol.toStringTag]() {\n  106      return 'CacheStorage';\n  107    }\n\n~/Projects/plot-cv/lib/dom/helpers.js:\n  215      const el = this[Symbol.for('element')];\n  216  \n  217:     const name = this[Symbol.toStringTag] ?? 'ObjectInterface';\n  218  \n  219      return `\\x1b[1;31m${name}\\x1b[1;36m {\\x1b[0m ${el.getAttributeNames().reduce((acc, k, i) => (acc ? acc + ' ' : acc) + `${k}=\"${el.getAttribute(k)}\"`, '')} \\x1b[1;36m}\\x1b[0m`;\n  ...\n  225  }\n  226  \n  227: ObjectInterface.prototype[Symbol.toStringTag] = 'ObjectInterface';\n  228  \n\n~/Projects/plot-cv/lib/dom/cache.js:\n   13  };\n   14  \n   15: const isReq = req => req && req[Symbol.toStringTag] === 'Request';\n   16: const isRes = res => res && res[Symbol.toStringTag] === 'Response';\n   17  const strToBase64 = str => new Buffer(str).toString('hex');\n   18  const base64ToStr = hex => new Buffer(hex, 'hex').toString();\n\n~/Projects/plot-cv/lib/eda/circuitjs.js:\n   56  \n   57  Element.prototype = new Array();\n   58: Element.prototype[Symbol.toStringTag] = 'CircuitJSElement';\n   59  Element.prototype.constructor = Element;\n   60  Element.prototype.toString = function() {\n\n~/Projects/plot-cv/lib/whatwg/url.js:\n  918      return this.toString();\n  919    }\n  920:   get [Symbol.toStringTag]() {\n  921      return 'StringView : ' + this.toString();\n  922    }\n\n~/Projects/plot-cv/lib/json/path.js:\n  419    }\n  420  \n  421:   [Symbol.toStringTag]() {\n  422      return MutablePath.prototype.toString.call('.', '\\u220a' + CHILDREN_SPACE);\n  423    }\n\n~/Projects/plot-cv/lib/container/multikeymap.js:\n   58    }\n   59  \n   60:   get [Symbol.toStringTag]() {\n   61      return 'MultiKeyMap';\n   62    }\n\n~/Projects/plot-cv/lib/ecmascript/estree.js:\n  156    }\n  157  \n  158:   [Symbol.toStringTag](...args) {\n  159      return this[inspectSymbol](...args);\n  160    }\n\n~/Projects/plot-cv/lib/ecmascript/lexer.js:\n   79  };\n   80  \n   81: SyntaxError.prototype[Symbol.toStringTag] = function() {\n   82    return this.toString();\n   83  };\n   ..\n  137  //Range.prototype.constructor = Range;\n  138  \n  139: Range.prototype[Symbol.toStringTag] = function(n, opts = {}) {\n  140    const { showFile = true, colors = false } = opts;\n  141  \n  ...\n  151  };\n  152  Range.prototype.toString = function() {\n  153:   return this[Symbol.toStringTag](0, { colors: false });\n  154  };\n  155  Range.prototype[Symbol.for('nodejs.util.inspect.custom')] = function(n, opts = {}) {\n\n~/Projects/plot-cv/lib/ecmascript/token.js:\n   33        column: pos ? pos.column : 0,\n   34        line: pos ? pos.line : 0,\n   35:       [Symbol.toStringTag]() {\n   36          return this.toString();\n   37        },\n   ..\n  111    }\n  112  \n  113:   [Symbol.toStringTag]() {\n  114      return this.toString();\n  115    }\n\n~/Projects/plot-cv/qjs-opencv/draw.js:\n    9  \n   10    /**\n   11:    * @var {string} Draw.prototype.[Symbol.toStringTag]\n   12     */\n   13:   [Symbol.toStringTag] = 'Draw';\n   14  \n   15    /**\n\n~/Projects/plot-cv/qjs-opencv/rotated_rect.js:\n   42  \n   43    /**\n   44:    * @var {string} RotatedRect.prototype.[Symbol.toStringTag]\n   45     */\n   46:   [Symbol.toStringTag] = 'RotatedRect';\n   47  \n   48    /**\n\n~/Projects/plot-cv/qjs-opencv/keypoint.js:\n   45  \n   46    /**\n   47:    * @var {string} KeyPoint.prototype.[Symbol.toStringTag]\n   48     */\n   49:   [Symbol.toStringTag] = 'KeyPoint';\n   50  }\n   51  \n\n~/Projects/plot-cv/qjs-opencv/clahe.js:\n   31  \n   32    /**\n   33:    * @var {string} CLAHE.prototype.[Symbol.toStringTag]\n   34     */\n   35:   [Symbol.toStringTag] = 'CLAHE';\n   36  }\n   37  \n\n~/Projects/plot-cv/qjs-opencv/video_capture.js:\n   57  \n   58    /**\n   59:    * @var {string} VideoCapture.prototype.[Symbol.toStringTag]\n   60     */\n   61:   [Symbol.toStringTag] = 'VideoCapture';\n   62  }\n   63  \n\n~/Projects/plot-cv/qjs-opencv/utility.js:\n   73  \n   74    /**\n   75:    * @var {string} TickMeter.prototype.[Symbol.toStringTag]\n   76     */\n   77:   [Symbol.toStringTag] = 'TickMeter';\n   78  }\n   79  \n\n~/Projects/plot-cv/qjs-opencv/umat.js:\n  224  \n  225    /**\n  226:    * @var {string} UMat.prototype.[Symbol.toStringTag]\n  227     */\n  228:   [Symbol.toStringTag] = 'UMat';\n  229  \n  230    /**\n\n~/Projects/plot-cv/qjs-opencv/line_segment_detector.js:\n   27  \n   28    /**\n   29:    * @var {string} LineSegmentDetector.prototype.[Symbol.toStringTag]\n   30     */\n   31:   [Symbol.toStringTag] = 'LineSegmentDetector';\n   32  }\n   33  \n\n~/Projects/plot-cv/qjs-opencv/contour.js:\n  271  \n  272    /**\n  273:    * @var {string} Contour.prototype.[Symbol.toStringTag]\n  274     */\n  275:   [Symbol.toStringTag] = 'Contour';\n  276  \n  277    /**\n\n~/Projects/plot-cv/qjs-opencv/size.js:\n  149  \n  150    /**\n  151:    * @var {string} Size.prototype.[Symbol.toStringTag]\n  152     */\n  153:   [Symbol.toStringTag] = 'Size';\n  154  }\n  155  \n\n~/Projects/plot-cv/qjs-opencv/video_writer.js:\n   45  \n   46    /**\n   47:    * @var {string} VideoWriter.prototype.[Symbol.toStringTag]\n   48     */\n   49:   [Symbol.toStringTag] = 'VideoWriter';\n   50  \n   51    /**\n\n~/Projects/plot-cv/qjs-opencv/point_iterator.js:\n   20  \n   21    /**\n   22:    * @var {string} PointIterator.prototype.[Symbol.toStringTag]\n   23     */\n   24:   [Symbol.toStringTag] = 'PointIterator';\n   25  }\n   26  \n\n~/Projects/plot-cv/qjs-opencv/feature2d.js:\n  226     * @alias defaultName\n  227     */\n  228:   get [Symbol.toStringTag]() {\n  229      return this.defaultName;\n  230    }\n  231  \n  232    /**\n  233:    * @var {string} Feature2D.prototype.[Symbol.toStringTag]\n  234     */\n  235:   [Symbol.toStringTag] = 'Feature2D';\n  236  }\n  237  \n\n~/Projects/plot-cv/qjs-opencv/subdiv2d.js:\n   99  \n  100    /**\n  101:    * @var {string} Subdiv2D.prototype.[Symbol.toStringTag]\n  102     */\n  103:   [Symbol.toStringTag] = 'Subdiv2D';\n  104  \n  105    /**\n\n~/Projects/plot-cv/qjs-opencv/line.js:\n  190  \n  191    /**\n  192:    * @var {string} Line.prototype.[Symbol.toStringTag]\n  193     */\n  194:   [Symbol.toStringTag] = 'Line';\n  195  \n  196    /**\n\n~/Projects/plot-cv/qjs-opencv/point.js:\n  121  \n  122    /**\n  123:    * @var {string} Point.prototype.[Symbol.toStringTag]\n  124     */\n  125:   [Symbol.toStringTag] = 'Point';\n  126  \n  127    /**\n  128:    * @function Point.prototype.[Symbol.toStringTag]\n  129     * @returns {Object}  Returns null\n  130     */\n  131:   [Symbol.toStringTag]() {}\n  132  \n  133    /**\n\n~/Projects/plot-cv/qjs-opencv/mat.js:\n  294  \n  295    /**\n  296:    * @var {string} MatIterator.prototype.[Symbol.toStringTag]\n  297     */\n  298:   [Symbol.toStringTag] = 'Mat';\n  299  \n  300    /**\n  ...\n  304  \n  305    /**\n  306:    * @var {string} MatIterator.prototype.[Symbol.toStringTag]\n  307     */\n  308:   [Symbol.toStringTag] = 'MatIterator';\n  309  \n  310    /**\n\n~/Projects/plot-cv/qjs-opencv/slice_iterator.js:\n   20  \n   21    /**\n   22:    * @var {string} SliceIterator.prototype.[Symbol.toStringTag]\n   23     */\n   24:   [Symbol.toStringTag] = 'SliceIterator';\n   25  }\n   26  \n\n~/Projects/plot-cv/qjs-opencv/rect.js:\n  163  \n  164    /**\n  165:    * @var {string} Rect.prototype.[Symbol.toStringTag]\n  166     */\n  167:   [Symbol.toStringTag] = 'Rect';\n  168  \n  169    /**\n\n~/Projects/plot-cv/qjs-opencv/fast_line_detector.js:\n   21  \n   22    /**\n   23:    * @var {string} FastLineDetector.prototype.[Symbol.toStringTag]\n   24     */\n   25:   [Symbol.toStringTag] = 'FastLineDetector';\n   26  }\n   27  \n\n~/Projects/plot-cv/quickjs-2023-12-09/quickjs.c:\n 39418  static const JSCFunctionListEntry js_array_iterator_proto_funcs[] = {\n 39419      JS_ITERATOR_NEXT_DEF(\"next\", 0, js_array_iterator_next, 0 ),\n 39420:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Array Iterator\", JS_PROP_CONFIGURABLE ),\n 39421  };\n 39422  \n .....\n 41414  static const JSCFunctionListEntry js_string_iterator_proto_funcs[] = {\n 41415      JS_ITERATOR_NEXT_DEF(\"next\", 0, js_string_iterator_next, 0 ),\n 41416:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"String Iterator\", JS_PROP_CONFIGURABLE ),\n 41417  };\n 41418  \n .....\n 41680      JS_CFUNC_DEF(\"imul\", 2, js_math_imul ),\n 41681      JS_CFUNC_DEF(\"clz32\", 1, js_math_clz32 ),\n 41682:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Math\", JS_PROP_CONFIGURABLE ),\n 41683      JS_PROP_DOUBLE_DEF(\"E\", 2.718281828459045, 0 ),\n 41684      JS_PROP_DOUBLE_DEF(\"LN10\", 2.302585092994046, 0 ),\n .....\n 43243  static const JSCFunctionListEntry js_regexp_string_iterator_proto_funcs[] = {\n 43244      JS_ITERATOR_NEXT_DEF(\"next\", 0, js_regexp_string_iterator_next, 0 ),\n 43245:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"RegExp String Iterator\", JS_PROP_CONFIGURABLE ),\n 43246  };\n 43247  \n .....\n 43955      JS_CFUNC_DEF(\"parse\", 2, js_json_parse ),\n 43956      JS_CFUNC_DEF(\"stringify\", 3, js_json_stringify ),\n 43957:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"JSON\", JS_PROP_CONFIGURABLE ),\n 43958  };\n 43959  \n .....\n 44129      JS_CFUNC_DEF(\"set\", 3, js_reflect_set ),\n 44130      JS_CFUNC_DEF(\"setPrototypeOf\", 2, js_reflect_setPrototypeOf ),\n 44131:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Reflect\", JS_PROP_CONFIGURABLE ),\n 44132  };\n 44133  \n .....\n 45171      // XXX: should have writable: false\n 45172      JS_CFUNC_DEF(\"[Symbol.toPrimitive]\", 1, js_symbol_valueOf ),\n 45173:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Symbol\", JS_PROP_CONFIGURABLE ),\n 45174      JS_CGETSET_DEF(\"description\", js_symbol_get_description, NULL ),\n 45175  };\n .....\n 45892      JS_CFUNC_MAGIC_DEF(\"entries\", 0, js_create_map_iterator, (JS_ITERATOR_KIND_KEY_AND_VALUE << 2) | 0 ),\n 45893      JS_ALIAS_DEF(\"[Symbol.iterator]\", \"entries\" ),\n 45894:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Map\", JS_PROP_CONFIGURABLE ),\n 45895  };\n 45896  \n 45897  static const JSCFunctionListEntry js_map_iterator_proto_funcs[] = {\n 45898      JS_ITERATOR_NEXT_DEF(\"next\", 0, js_map_iterator_next, 0 ),\n 45899:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Map Iterator\", JS_PROP_CONFIGURABLE ),\n 45900  };\n 45901  \n .....\n 45911      JS_ALIAS_DEF(\"[Symbol.iterator]\", \"values\" ),\n 45912      JS_CFUNC_MAGIC_DEF(\"entries\", 0, js_create_map_iterator, (JS_ITERATOR_KIND_KEY_AND_VALUE << 2) | MAGIC_SET ),\n 45913:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Set\", JS_PROP_CONFIGURABLE ),\n 45914  };\n 45915  \n 45916  static const JSCFunctionListEntry js_set_iterator_proto_funcs[] = {\n 45917      JS_ITERATOR_NEXT_DEF(\"next\", 0, js_map_iterator_next, MAGIC_SET ),\n 45918:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Set Iterator\", JS_PROP_CONFIGURABLE ),\n 45919  };\n 45920  \n .....\n 45924      JS_CFUNC_MAGIC_DEF(\"has\", 1, js_map_has, MAGIC_WEAK ),\n 45925      JS_CFUNC_MAGIC_DEF(\"delete\", 1, js_map_delete, MAGIC_WEAK ),\n 45926:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"WeakMap\", JS_PROP_CONFIGURABLE ),\n 45927  };\n 45928  \n .....\n 45931      JS_CFUNC_MAGIC_DEF(\"has\", 1, js_map_has, MAGIC_SET | MAGIC_WEAK ),\n 45932      JS_CFUNC_MAGIC_DEF(\"delete\", 1, js_map_delete, MAGIC_SET | MAGIC_WEAK ),\n 45933:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"WeakSet\", JS_PROP_CONFIGURABLE ),\n 45934  };\n 45935  \n .....\n 45985  /* Generator */\n 45986  static const JSCFunctionListEntry js_generator_function_proto_funcs[] = {\n 45987:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"GeneratorFunction\", JS_PROP_CONFIGURABLE),\n 45988  };\n 45989  \n .....\n 45992      JS_ITERATOR_NEXT_DEF(\"return\", 1, js_generator_next, GEN_MAGIC_RETURN ),\n 45993      JS_ITERATOR_NEXT_DEF(\"throw\", 1, js_generator_next, GEN_MAGIC_THROW ),\n 45994:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Generator\", JS_PROP_CONFIGURABLE),\n 45995  };\n 45996  \n .....\n 46995      JS_CFUNC_DEF(\"catch\", 1, js_promise_catch ),\n 46996      JS_CFUNC_DEF(\"finally\", 1, js_promise_finally ),\n 46997:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Promise\", JS_PROP_CONFIGURABLE ),\n 46998  };\n 46999  \n 47000  /* AsyncFunction */\n 47001  static const JSCFunctionListEntry js_async_function_proto_funcs[] = {\n 47002:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"AsyncFunction\", JS_PROP_CONFIGURABLE ),\n 47003  };\n 47004  \n .....\n 47197  \n 47198  static const JSCFunctionListEntry js_async_generator_function_proto_funcs[] = {\n 47199:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"AsyncGeneratorFunction\", JS_PROP_CONFIGURABLE ),\n 47200  };\n 47201  \n .....\n 47206      JS_CFUNC_MAGIC_DEF(\"return\", 1, js_async_generator_next, GEN_MAGIC_RETURN ),\n 47207      JS_CFUNC_MAGIC_DEF(\"throw\", 1, js_async_generator_next, GEN_MAGIC_THROW ),\n 47208:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"AsyncGenerator\", JS_PROP_CONFIGURABLE ),\n 47209  };\n 47210  \n .....\n 49178      JS_CFUNC_DEF(\"toString\", 0, js_bigint_toString ),\n 49179      JS_CFUNC_DEF(\"valueOf\", 0, js_bigint_valueOf ),\n 49180:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"BigInt\", JS_PROP_CONFIGURABLE ),\n 49181  };\n 49182  \n .....\n 51196      JS_CGETSET_MAGIC_DEF(\"byteLength\", js_array_buffer_get_byteLength, NULL, JS_CLASS_ARRAY_BUFFER ),\n 51197      JS_CFUNC_MAGIC_DEF(\"slice\", 2, js_array_buffer_slice, JS_CLASS_ARRAY_BUFFER ),\n 51198:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"ArrayBuffer\", JS_PROP_CONFIGURABLE ),\n 51199  };\n 51200  \n .....\n 51208      JS_CGETSET_MAGIC_DEF(\"byteLength\", js_array_buffer_get_byteLength, NULL, JS_CLASS_SHARED_ARRAY_BUFFER ),\n 51209      JS_CFUNC_MAGIC_DEF(\"slice\", 2, js_array_buffer_slice, JS_CLASS_SHARED_ARRAY_BUFFER ),\n 51210:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"SharedArrayBuffer\", JS_PROP_CONFIGURABLE ),\n 51211  };\n 51212  \n .....\n 52664      JS_CFUNC_MAGIC_DEF(\"keys\", 0, js_create_typed_array_iterator, JS_ITERATOR_KIND_KEY ),\n 52665      JS_CFUNC_MAGIC_DEF(\"entries\", 0, js_create_typed_array_iterator, JS_ITERATOR_KIND_KEY_AND_VALUE ),\n 52666:     JS_CGETSET_DEF(\"[Symbol.toStringTag]\", js_typed_array_get_toStringTag, NULL ),\n 52667      JS_CFUNC_DEF(\"copyWithin\", 2, js_typed_array_copyWithin ),\n 52668      JS_CFUNC_MAGIC_DEF(\"every\", 1, js_array_every, special_every | special_TA ),\n .....\n 53244      JS_CFUNC_MAGIC_DEF(\"setFloat32\", 2, js_dataview_setValue, JS_CLASS_FLOAT32_ARRAY ),\n 53245      JS_CFUNC_MAGIC_DEF(\"setFloat64\", 2, js_dataview_setValue, JS_CLASS_FLOAT64_ARRAY ),\n 53246:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"DataView\", JS_PROP_CONFIGURABLE ),\n 53247  };\n 53248  \n .....\n 53683      JS_CFUNC_DEF(\"wait\", 4, js_atomics_wait ),\n 53684      JS_CFUNC_DEF(\"notify\", 3, js_atomics_notify ),\n 53685:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Atomics\", JS_PROP_CONFIGURABLE ),\n 53686  };\n 53687  \n\n~/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/bin/convert-imports.js:\n    6  import deep from 'deep';\n    7  \n    8: Object.assign(ReadImport.prototype, { [Symbol.toStringTag]: 'Import' });\n    9  \n   10  function main(...args) {\n\n~/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/bin/resolve-imports.js:\n  298      close: () => {},\n  299      seek: (whence, offset) => os.seek(fd, whence, offset),\n  300:     [Symbol.toStringTag]: `FileWriter< ${fd} >`,\n  301      inspect() {\n  302:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  303      }\n  304    });\n  ...\n  319      write: fn,\n  320      close: () => {},\n  321:     [Symbol.toStringTag]: `ArrayWriter`,\n  322      inspect() {\n  323:       return inspect({ arr }) ?? this[Symbol.toStringTag];\n  324      }\n  325    });\n  ...\n  335      close: () => {},\n  336      seek: () => {},\n  337:     [Symbol.toStringTag]: `DummyWriter< ${name} >`,\n  338      inspect() {\n  339:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  340      }\n  341    });\n  ...\n  642  \n  643  define(Import.prototype, {\n  644:   [Symbol.toStringTag]: 'Import',\n  645    ids(pred = local => true) {\n  646      return ImportIds(this.tokens.slice())\n  ...\n 1349  \n 1350  define(NumericRange.prototype, {\n 1351:   [Symbol.toStringTag]: 'NumericRange',\n 1352    [inspectSymbol](depth, opts) {\n 1353      const [start, end] = this;\n ....\n 1407            return '';\n 1408          },\n 1409:         [Symbol.toStringTag]: 'FileMap(empty)'\n 1410        };\n 1411        return Object.setPrototypeOf(obj, FileMap.prototype);\n ....\n 1749  }\n 1750  \n 1751: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1752  \n 1753  function BufferFile(file, buf) {\n\n~/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/inotify.js:\n   71                return this.watch(event);\n   72              },\n   73:             [Symbol.toStringTag]: 'InotifyEvent'\n   74            });\n   75  */\n\n~/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/socklen_t.js:\n   16    }\n   17  \n   18:   get [Symbol.toStringTag]() {\n   19      return 'socklen_t';\n   20    }\n\n~/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/console.js:\n   51      numberBase: 10,\n   52      classKey: Symbol.toStringTag,\n   53:     hideKeys: [Symbol.toStringTag]\n   54    };\n   55  \n\n~/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/io.js:\n   51  }\n   52  \n   53: define(HandlerEntry.prototype, { [Symbol.toStringTag]: 'HandlerEntry' });\n   54  \n   55  export class DescriptorMap extends Array {\n   ..\n   90  }\n   91  \n   92: define(DescriptorMap.prototype, { [Symbol.toStringTag]: 'DescriptorMap' });\n   93  \n   94  export class Multiplexer {\n   ..\n  154  }\n  155  \n  156: define(Multiplexer.prototype, { [Symbol.toStringTag]: 'Multiplexer' });\n  157  \n  158  const io = new Multiplexer();\n\n~/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/require.js:\n   95  }\n   96  \n   97: define(Module.prototype, { [Symbol.toStringTag]: 'Module' });\n   98  \n   99  class CJSModule extends Module {\n  ...\n  137  }\n  138  \n  139: define(CJSModule.prototype, { [Symbol.toStringTag]: 'CJSModule' });\n  140  \n  141  class ESModule extends Module {\n  ...\n  170  }\n  171  \n  172: define(ESModule.prototype, { [Symbol.toStringTag]: 'ESModule' });\n  173  \n  174  function statPath(path) {\n\n~/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/xpath.js:\n   12  }\n   13  \n   14: DereferenceError.prototype[Symbol.toStringTag] = 'DereferenceError';\n   15  \n   16  export class XPath {\n   ..\n  118      return;\n  119      `\\x1b[1;31m${this.constructor.name ?? className(this)}\\x1b[0m ` +\n  120:       inspect([...this].map(GetKey) ?? { __proto__: { [Symbol.toStringTag]: 'XPath' }, ...obj }, {\n  121          ...opts,\n  122          customInspect: true\n  ...\n  124    }\n  125  \n  126:   get [Symbol.toStringTag]() {\n  127      return 'XPath';\n  128    }\n  ...\n  131  }\n  132  \n  133: define(XPath.prototype, { [Symbol.toStringTag]: 'XPath' });\n  134  \n  135  export const ImmutableXPath = XPath;\n\n~/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/stack.js:\n   30  }\n   31  \n   32: Stack.prototype[Symbol.toStringTag] = 'Stack';\n   33  \n   34  Stack.prototype.toString = function() {\n   ..\n   45  Stack.prototype[inspectSymbol] = function(depth, options) {\n   46    return (\n   47:     `\\x1b[1;31m${this[Symbol.toStringTag]}\\x1b[0m ` +\n   48      globalThis.inspect([...this], depth, {\n   49        ...options,\n   ..\n  215    }\n  216  \n  217:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  218      return 'StackFrame';\n  219    }\n\n~/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/dom.js:\n  571  define(Node.prototype, Interface.prototype);\n  572  extend(Node.prototype, NODE_TYPES, { enumerable: false });\n  573: extend(Node.prototype, { [Symbol.toStringTag]: 'Node' }, { enumerable: false });\n  574  \n  575  function MakeCache(ctor, store = new WeakMap()) {\n  ...\n  652    NodeList.prototype,\n  653    {\n  654:     [Symbol.toStringTag]: 'NodeList',\n  655      *[Symbol.iterator]() {\n  656        const factory = Factory.for(this);\n  ...\n  701      constructor: NamedNodeMap,\n  702  \n  703:     [Symbol.toStringTag]: 'NamedNodeMap',\n  704  \n  705      get path() {\n  ...\n  994  }\n  995  \n  996: extend(Element.prototype, { [Symbol.toStringTag]: 'Element', nodeType: ELEMENT_NODE }, { enumerable: false });\n  997  \n  998  /*\n  ...\n 1167  }\n 1168  \n 1169: extend(Document.prototype, { [Symbol.toStringTag]: 'Document', nodeType: DOCUMENT_NODE }, { enumerable: false });\n 1170  \n 1171  export class Attr extends Node {\n ....\n 1226    {\n 1227      nodeType: ATTRIBUTE_NODE,\n 1228:     [Symbol.toStringTag]: 'Attr'\n 1229    },\n 1230    { enumerable: false }\n ....\n 1272  \n 1273    [inspectSymbol](depth, opts) {\n 1274:     return `\\x1b[1;31m${this[Symbol.toStringTag]}\\x1b[0m \\x1b[38;2;192;2550m${quote(this.data, \"'\")}\\x1b[0m`;\n 1275    }\n 1276  \n ....\n 1285      nodeType: TEXT_NODE,\n 1286      nodeName: '#text',\n 1287:     [Symbol.toStringTag]: 'Text'\n 1288    },\n 1289    { enumerable: false }\n ....\n 1332      nodeType: COMMENT_NODE,\n 1333      nodeName: '#comment',\n 1334:     [Symbol.toStringTag]: 'Comment'\n 1335    },\n 1336    { enumerable: false }\n ....\n 1435    TokenList.prototype,\n 1436    {\n 1437:     [Symbol.toStringTag]: 'TokenList'\n 1438    },\n 1439    { enumerable: false }\n ....\n 1593      constructor: CSSStyleDeclaration,\n 1594  \n 1595:     [Symbol.toStringTag]: 'CSSStyleDeclaration',\n 1596  \n 1597      get parentRule() {\n\n~/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/tty.js:\n   10  \n   11  define(ReadStream.prototype, {\n   12:   [Symbol.toStringTag]: 'ReadStream'\n   13  });\n   14  \n   ..\n   93      configurable: true\n   94    },\n   95:   [Symbol.toStringTag]: { value: 'WriteStream', configurable: true }\n   96  });\n   97  \n\n~/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/util.js:\n  182    },\n  183    isModuleNamespaceObject(v) {\n  184:     return isObject(v) && v[Symbol.toStringTag] == 'Module';\n  185    },\n  186    isConstructor(v) {\n  ...\n 1980  export function className(obj) {\n 1981    if(isObject(obj)) {\n 1982:     if(Symbol.toStringTag in obj) return obj[Symbol.toStringTag];\n 1983      if('constructor' in obj) return functionName(obj.constructor);\n 1984    }\n\n~/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/db.js:\n   95  \n   96  define(Pool.prototype, {\n   97:   [Symbol.toStringTag]: 'Pool'\n   98  });\n   99  \n\n~/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/repl.js:\n 2039  \n 2040  Object.assign(REPL.prototype, {\n 2041:   [Symbol.toStringTag]: 'REPL',\n 2042    handleInput: REPL.prototype.evalAndPrint,\n 2043    directives: loadModule\n\n~/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/streams.js:\n  135    }\n  136  \n  137:   define(ByLineStream.prototype, { [Symbol.toStringTag]: 'ByLineStream' });\n  138  \n  139    return ByLineStream;\n\n~/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/fs.js:\n  618    }\n  619  \n  620:   [Symbol.toStringTag] = 'inotify_event';\n  621  }\n  622  \n\n~/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/parser.js:\n   21  }\n   22  \n   23: define(Rule.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'Rule' });\n   24  \n   25  export class Terminal extends Rule {\n   ..\n   44  }\n   45  \n   46: define(Terminal.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'Terminal' });\n   47  \n   48  export class ZeroOrMore extends Rule {\n   ..\n   62  }\n   63  \n   64: define(ZeroOrMore.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'ZeroOrMore' });\n   65  \n   66  export function make_operators_set(...op_list) {\n\n~/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/events.js:\n   55  }\n   56  \n   57: EventEmitter.prototype[Symbol.toStringTag] = 'EventEmitter';\n   58  \n   59  const PRIVATE = Symbol('EventTarget');\n   ..\n   98  }\n   99  \n  100: EventTarget.prototype[Symbol.toStringTag] = 'EventTarget';\n  101  \n  102  const getMethods = obj =>\n\n~/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/vfs.js:\n  311            for(let chunk of q) written += ar.write(chunk);\n  312          },\n  313:         [Symbol.toStringTag]: 'WriteStream'\n  314        };\n  315      } else {\n  ...\n  329            error: () => ar.error != null,\n  330            close: () => ar.close(),\n  331:           [Symbol.toStringTag]: 'ReadStream'\n  332          };\n  333        }\n\n~/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/lexer/c.js:\n  118  globalThis.CLexer = CLexer;\n  119  \n  120: define(CLexer.prototype, { [Symbol.toStringTag]: 'CLexer' });\n  121  \n  122  export default CLexer;\n\n~/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/lexer/csv.js:\n   23    }\n   24  \n   25:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n   26      return \"CSVLexer\";\n   27    }\n\n~/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/lexer/ecmascript.js:\n  129    }\n  130  \n  131:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  132      return \"ECMAScriptLexer\";\n  133    }\n\n~/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/lexer/bnf.js:\n  194    }\n  195  \n  196:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  197      return \"BNFLexer\";\n  198    }\n\n~/Projects/plot-cv/inst/x86_64-linux-gnu/usr/local/bin/convert-imports.js:\n    6  import deep from 'deep';\n    7  \n    8: Object.assign(ReadImport.prototype, { [Symbol.toStringTag]: 'Import' });\n    9  \n   10  function main(...args) {\n\n~/Projects/plot-cv/inst/x86_64-linux-gnu/usr/local/bin/resolve-imports.js:\n  298      close: () => {},\n  299      seek: (whence, offset) => os.seek(fd, whence, offset),\n  300:     [Symbol.toStringTag]: `FileWriter< ${fd} >`,\n  301      inspect() {\n  302:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  303      }\n  304    });\n  ...\n  319      write: fn,\n  320      close: () => {},\n  321:     [Symbol.toStringTag]: `ArrayWriter`,\n  322      inspect() {\n  323:       return inspect({ arr }) ?? this[Symbol.toStringTag];\n  324      }\n  325    });\n  ...\n  335      close: () => {},\n  336      seek: () => {},\n  337:     [Symbol.toStringTag]: `DummyWriter< ${name} >`,\n  338      inspect() {\n  339:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  340      }\n  341    });\n  ...\n  642  \n  643  define(Import.prototype, {\n  644:   [Symbol.toStringTag]: 'Import',\n  645    ids(pred = local => true) {\n  646      return ImportIds(this.tokens.slice())\n  ...\n 1349  \n 1350  define(NumericRange.prototype, {\n 1351:   [Symbol.toStringTag]: 'NumericRange',\n 1352    [inspectSymbol](depth, opts) {\n 1353      const [start, end] = this;\n ....\n 1407            return '';\n 1408          },\n 1409:         [Symbol.toStringTag]: 'FileMap(empty)'\n 1410        };\n 1411        return Object.setPrototypeOf(obj, FileMap.prototype);\n ....\n 1749  }\n 1750  \n 1751: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1752  \n 1753  function BufferFile(file, buf) {\n\n~/Projects/plot-cv/inst/x86_64-linux-gnu/usr/local/lib/quickjs/inotify.js:\n   71                return this.watch(event);\n   72              },\n   73:             [Symbol.toStringTag]: 'InotifyEvent'\n   74            });\n   75  */\n\n~/Projects/plot-cv/inst/x86_64-linux-gnu/usr/local/lib/quickjs/socklen_t.js:\n   16    }\n   17  \n   18:   get [Symbol.toStringTag]() {\n   19      return 'socklen_t';\n   20    }\n\n~/Projects/plot-cv/inst/x86_64-linux-gnu/usr/local/lib/quickjs/console.js:\n   51      numberBase: 10,\n   52      classKey: Symbol.toStringTag,\n   53:     hideKeys: [Symbol.toStringTag]\n   54    };\n   55  \n\n~/Projects/plot-cv/inst/x86_64-linux-gnu/usr/local/lib/quickjs/io.js:\n   51  }\n   52  \n   53: define(HandlerEntry.prototype, { [Symbol.toStringTag]: 'HandlerEntry' });\n   54  \n   55  export class DescriptorMap extends Array {\n   ..\n   90  }\n   91  \n   92: define(DescriptorMap.prototype, { [Symbol.toStringTag]: 'DescriptorMap' });\n   93  \n   94  export class Multiplexer {\n   ..\n  154  }\n  155  \n  156: define(Multiplexer.prototype, { [Symbol.toStringTag]: 'Multiplexer' });\n  157  \n  158  const io = new Multiplexer();\n\n~/Projects/plot-cv/inst/x86_64-linux-gnu/usr/local/lib/quickjs/require.js:\n   95  }\n   96  \n   97: define(Module.prototype, { [Symbol.toStringTag]: 'Module' });\n   98  \n   99  class CJSModule extends Module {\n  ...\n  137  }\n  138  \n  139: define(CJSModule.prototype, { [Symbol.toStringTag]: 'CJSModule' });\n  140  \n  141  class ESModule extends Module {\n  ...\n  170  }\n  171  \n  172: define(ESModule.prototype, { [Symbol.toStringTag]: 'ESModule' });\n  173  \n  174  function statPath(path) {\n\n~/Projects/plot-cv/inst/x86_64-linux-gnu/usr/local/lib/quickjs/xpath.js:\n   12  }\n   13  \n   14: DereferenceError.prototype[Symbol.toStringTag] = 'DereferenceError';\n   15  \n   16  export class XPath {\n   ..\n  118      return;\n  119      `\\x1b[1;31m${this.constructor.name ?? className(this)}\\x1b[0m ` +\n  120:       inspect([...this].map(GetKey) ?? { __proto__: { [Symbol.toStringTag]: 'XPath' }, ...obj }, {\n  121          ...opts,\n  122          customInspect: true\n  ...\n  124    }\n  125  \n  126:   get [Symbol.toStringTag]() {\n  127      return 'XPath';\n  128    }\n  ...\n  131  }\n  132  \n  133: define(XPath.prototype, { [Symbol.toStringTag]: 'XPath' });\n  134  \n  135  export const ImmutableXPath = XPath;\n\n~/Projects/plot-cv/inst/x86_64-linux-gnu/usr/local/lib/quickjs/stack.js:\n   30  }\n   31  \n   32: Stack.prototype[Symbol.toStringTag] = 'Stack';\n   33  \n   34  Stack.prototype.toString = function() {\n   ..\n   45  Stack.prototype[inspectSymbol] = function(depth, options) {\n   46    return (\n   47:     `\\x1b[1;31m${this[Symbol.toStringTag]}\\x1b[0m ` +\n   48      globalThis.inspect([...this], depth, {\n   49        ...options,\n   ..\n  215    }\n  216  \n  217:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  218      return 'StackFrame';\n  219    }\n\n~/Projects/plot-cv/inst/x86_64-linux-gnu/usr/local/lib/quickjs/dom.js:\n  571  define(Node.prototype, Interface.prototype);\n  572  extend(Node.prototype, NODE_TYPES, { enumerable: false });\n  573: extend(Node.prototype, { [Symbol.toStringTag]: 'Node' }, { enumerable: false });\n  574  \n  575  function MakeCache(ctor, store = new WeakMap()) {\n  ...\n  652    NodeList.prototype,\n  653    {\n  654:     [Symbol.toStringTag]: 'NodeList',\n  655      *[Symbol.iterator]() {\n  656        const factory = Factory.for(this);\n  ...\n  701      constructor: NamedNodeMap,\n  702  \n  703:     [Symbol.toStringTag]: 'NamedNodeMap',\n  704  \n  705      get path() {\n  ...\n  994  }\n  995  \n  996: extend(Element.prototype, { [Symbol.toStringTag]: 'Element', nodeType: ELEMENT_NODE }, { enumerable: false });\n  997  \n  998  /*\n  ...\n 1167  }\n 1168  \n 1169: extend(Document.prototype, { [Symbol.toStringTag]: 'Document', nodeType: DOCUMENT_NODE }, { enumerable: false });\n 1170  \n 1171  export class Attr extends Node {\n ....\n 1226    {\n 1227      nodeType: ATTRIBUTE_NODE,\n 1228:     [Symbol.toStringTag]: 'Attr'\n 1229    },\n 1230    { enumerable: false }\n ....\n 1272  \n 1273    [inspectSymbol](depth, opts) {\n 1274:     return `\\x1b[1;31m${this[Symbol.toStringTag]}\\x1b[0m \\x1b[38;2;192;2550m${quote(this.data, \"'\")}\\x1b[0m`;\n 1275    }\n 1276  \n ....\n 1285      nodeType: TEXT_NODE,\n 1286      nodeName: '#text',\n 1287:     [Symbol.toStringTag]: 'Text'\n 1288    },\n 1289    { enumerable: false }\n ....\n 1332      nodeType: COMMENT_NODE,\n 1333      nodeName: '#comment',\n 1334:     [Symbol.toStringTag]: 'Comment'\n 1335    },\n 1336    { enumerable: false }\n ....\n 1435    TokenList.prototype,\n 1436    {\n 1437:     [Symbol.toStringTag]: 'TokenList'\n 1438    },\n 1439    { enumerable: false }\n ....\n 1593      constructor: CSSStyleDeclaration,\n 1594  \n 1595:     [Symbol.toStringTag]: 'CSSStyleDeclaration',\n 1596  \n 1597      get parentRule() {\n\n~/Projects/plot-cv/inst/x86_64-linux-gnu/usr/local/lib/quickjs/tty.js:\n   10  \n   11  define(ReadStream.prototype, {\n   12:   [Symbol.toStringTag]: 'ReadStream'\n   13  });\n   14  \n   ..\n   93      configurable: true\n   94    },\n   95:   [Symbol.toStringTag]: { value: 'WriteStream', configurable: true }\n   96  });\n   97  \n\n~/Projects/plot-cv/inst/x86_64-linux-gnu/usr/local/lib/quickjs/util.js:\n  182    },\n  183    isModuleNamespaceObject(v) {\n  184:     return isObject(v) && v[Symbol.toStringTag] == 'Module';\n  185    },\n  186    isConstructor(v) {\n  ...\n 1980  export function className(obj) {\n 1981    if(isObject(obj)) {\n 1982:     if(Symbol.toStringTag in obj) return obj[Symbol.toStringTag];\n 1983      if('constructor' in obj) return functionName(obj.constructor);\n 1984    }\n\n~/Projects/plot-cv/inst/x86_64-linux-gnu/usr/local/lib/quickjs/db.js:\n   95  \n   96  define(Pool.prototype, {\n   97:   [Symbol.toStringTag]: 'Pool'\n   98  });\n   99  \n\n~/Projects/plot-cv/inst/x86_64-linux-gnu/usr/local/lib/quickjs/repl.js:\n 2039  \n 2040  Object.assign(REPL.prototype, {\n 2041:   [Symbol.toStringTag]: 'REPL',\n 2042    handleInput: REPL.prototype.evalAndPrint,\n 2043    directives: loadModule\n\n~/Projects/plot-cv/inst/x86_64-linux-gnu/usr/local/lib/quickjs/streams.js:\n  135    }\n  136  \n  137:   define(ByLineStream.prototype, { [Symbol.toStringTag]: 'ByLineStream' });\n  138  \n  139    return ByLineStream;\n\n~/Projects/plot-cv/inst/x86_64-linux-gnu/usr/local/lib/quickjs/fs.js:\n  618    }\n  619  \n  620:   [Symbol.toStringTag] = 'inotify_event';\n  621  }\n  622  \n\n~/Projects/plot-cv/inst/x86_64-linux-gnu/usr/local/lib/quickjs/parser.js:\n   21  }\n   22  \n   23: define(Rule.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'Rule' });\n   24  \n   25  export class Terminal extends Rule {\n   ..\n   44  }\n   45  \n   46: define(Terminal.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'Terminal' });\n   47  \n   48  export class ZeroOrMore extends Rule {\n   ..\n   62  }\n   63  \n   64: define(ZeroOrMore.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'ZeroOrMore' });\n   65  \n   66  export function make_operators_set(...op_list) {\n\n~/Projects/plot-cv/inst/x86_64-linux-gnu/usr/local/lib/quickjs/events.js:\n   55  }\n   56  \n   57: EventEmitter.prototype[Symbol.toStringTag] = 'EventEmitter';\n   58  \n   59  const PRIVATE = Symbol('EventTarget');\n   ..\n   98  }\n   99  \n  100: EventTarget.prototype[Symbol.toStringTag] = 'EventTarget';\n  101  \n  102  const getMethods = obj =>\n\n~/Projects/plot-cv/inst/x86_64-linux-gnu/usr/local/lib/quickjs/vfs.js:\n  311            for(let chunk of q) written += ar.write(chunk);\n  312          },\n  313:         [Symbol.toStringTag]: 'WriteStream'\n  314        };\n  315      } else {\n  ...\n  329            error: () => ar.error != null,\n  330            close: () => ar.close(),\n  331:           [Symbol.toStringTag]: 'ReadStream'\n  332          };\n  333        }\n\n~/Projects/plot-cv/inst/x86_64-linux-gnu/usr/local/lib/quickjs/lexer/c.js:\n  118  globalThis.CLexer = CLexer;\n  119  \n  120: define(CLexer.prototype, { [Symbol.toStringTag]: 'CLexer' });\n  121  \n  122  export default CLexer;\n\n~/Projects/plot-cv/inst/x86_64-linux-gnu/usr/local/lib/quickjs/lexer/csv.js:\n   23    }\n   24  \n   25:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n   26      return \"CSVLexer\";\n   27    }\n\n~/Projects/plot-cv/inst/x86_64-linux-gnu/usr/local/lib/quickjs/lexer/ecmascript.js:\n  129    }\n  130  \n  131:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  132      return \"ECMAScriptLexer\";\n  133    }\n\n~/Projects/plot-cv/inst/x86_64-linux-gnu/usr/local/lib/quickjs/lexer/bnf.js:\n  194    }\n  195  \n  196:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  197      return \"BNFLexer\";\n  198    }\n\n1212 matches across 435 files\n\n\nSearching 15882 files for \"\\[Symbol.toStringTag\\]\" (regex, case sensitive)\n\n~/Projects/plot-cv/convert-imports.js:\n    6  import deep from 'deep';\n    7  \n    8: Object.assign(ReadImport.prototype, { [Symbol.toStringTag]: 'Import' });\n    9  \n   10  function main(...args) {\n\n~/Projects/plot-cv/draw.js:\n   31    for(; e; ) {\n   32      yield e;\n   33:     if(e[Symbol.toStringTag] == 'HTMLDocument' && e[k] == null) e = window;\n   34      else e = e[k];\n   35    }\n\n~/Projects/plot-cv/quickjs.c:\n 40057  static const JSCFunctionListEntry js_array_iterator_proto_funcs[] = {\n 40058      JS_ITERATOR_NEXT_DEF(\"next\", 0, js_array_iterator_next, 0),\n 40059:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Array Iterator\", JS_PROP_CONFIGURABLE),\n 40060  };\n 40061  \n .....\n 42182  static const JSCFunctionListEntry js_string_iterator_proto_funcs[] = {\n 42183      JS_ITERATOR_NEXT_DEF(\"next\", 0, js_string_iterator_next, 0),\n 42184:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"String Iterator\", JS_PROP_CONFIGURABLE),\n 42185  };\n 42186  \n .....\n 42445      JS_CFUNC_DEF(\"imul\", 2, js_math_imul),\n 42446      JS_CFUNC_DEF(\"clz32\", 1, js_math_clz32),\n 42447:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Math\", JS_PROP_CONFIGURABLE),\n 42448      JS_PROP_DOUBLE_DEF(\"E\", 2.718281828459045, 0),\n 42449      JS_PROP_DOUBLE_DEF(\"LN10\", 2.302585092994046, 0),\n .....\n 44041  static const JSCFunctionListEntry js_regexp_string_iterator_proto_funcs[] = {\n 44042      JS_ITERATOR_NEXT_DEF(\"next\", 0, js_regexp_string_iterator_next, 0),\n 44043:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"RegExp String Iterator\", JS_PROP_CONFIGURABLE),\n 44044  };\n 44045  \n .....\n 44748      JS_CFUNC_DEF(\"parse\", 2, js_json_parse),\n 44749      JS_CFUNC_DEF(\"stringify\", 3, js_json_stringify),\n 44750:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"JSON\", JS_PROP_CONFIGURABLE),\n 44751  };\n 44752  \n .....\n 44915      JS_CFUNC_DEF(\"set\", 3, js_reflect_set),\n 44916      JS_CFUNC_DEF(\"setPrototypeOf\", 2, js_reflect_setPrototypeOf),\n 44917:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Reflect\", JS_PROP_CONFIGURABLE),\n 44918  };\n 44919  \n .....\n 45962      // XXX: should have writable: false\n 45963      JS_CFUNC_DEF(\"[Symbol.toPrimitive]\", 1, js_symbol_valueOf),\n 45964:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Symbol\", JS_PROP_CONFIGURABLE),\n 45965      JS_CGETSET_DEF(\"description\", js_symbol_get_description, NULL),\n 45966  };\n .....\n 46785          \"entries\", 0, js_create_map_iterator, (JS_ITERATOR_KIND_KEY_AND_VALUE << 2) | 0),\n 46786      JS_ALIAS_DEF(\"[Symbol.iterator]\", \"entries\"),\n 46787:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Map\", JS_PROP_CONFIGURABLE),\n 46788  };\n 46789  \n 46790  static const JSCFunctionListEntry js_map_iterator_proto_funcs[] = {\n 46791      JS_ITERATOR_NEXT_DEF(\"next\", 0, js_map_iterator_next, 0),\n 46792:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Map Iterator\", JS_PROP_CONFIGURABLE),\n 46793  };\n 46794  \n .....\n 46808                         js_create_map_iterator,\n 46809                         (JS_ITERATOR_KIND_KEY_AND_VALUE << 2) | MAGIC_SET),\n 46810:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Set\", JS_PROP_CONFIGURABLE),\n 46811  };\n 46812  \n 46813  static const JSCFunctionListEntry js_set_iterator_proto_funcs[] = {\n 46814      JS_ITERATOR_NEXT_DEF(\"next\", 0, js_map_iterator_next, MAGIC_SET),\n 46815:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Set Iterator\", JS_PROP_CONFIGURABLE),\n 46816  };\n 46817  \n .....\n 46821      JS_CFUNC_MAGIC_DEF(\"has\", 1, js_map_has, MAGIC_WEAK),\n 46822      JS_CFUNC_MAGIC_DEF(\"delete\", 1, js_map_delete, MAGIC_WEAK),\n 46823:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"WeakMap\", JS_PROP_CONFIGURABLE),\n 46824  };\n 46825  \n .....\n 46828      JS_CFUNC_MAGIC_DEF(\"has\", 1, js_map_has, MAGIC_SET | MAGIC_WEAK),\n 46829      JS_CFUNC_MAGIC_DEF(\"delete\", 1, js_map_delete, MAGIC_SET | MAGIC_WEAK),\n 46830:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"WeakSet\", JS_PROP_CONFIGURABLE),\n 46831  };\n 46832  \n .....\n 46881  /* Generator */\n 46882  static const JSCFunctionListEntry js_generator_function_proto_funcs[] = {\n 46883:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"GeneratorFunction\", JS_PROP_CONFIGURABLE),\n 46884  };\n 46885  \n .....\n 46888      JS_ITERATOR_NEXT_DEF(\"return\", 1, js_generator_next, GEN_MAGIC_RETURN),\n 46889      JS_ITERATOR_NEXT_DEF(\"throw\", 1, js_generator_next, GEN_MAGIC_THROW),\n 46890:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Generator\", JS_PROP_CONFIGURABLE),\n 46891  };\n 46892  \n .....\n 47874      JS_CFUNC_DEF(\"catch\", 1, js_promise_catch),\n 47875      JS_CFUNC_DEF(\"finally\", 1, js_promise_finally),\n 47876:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Promise\", JS_PROP_CONFIGURABLE),\n 47877  };\n 47878  \n 47879  /* AsyncFunction */\n 47880  static const JSCFunctionListEntry js_async_function_proto_funcs[] = {\n 47881:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"AsyncFunction\", JS_PROP_CONFIGURABLE),\n 47882  };\n 47883  \n .....\n 48070  \n 48071  static const JSCFunctionListEntry js_async_generator_function_proto_funcs[] = {\n 48072:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"AsyncGeneratorFunction\", JS_PROP_CONFIGURABLE),\n 48073  };\n 48074  \n .....\n 48079      JS_CFUNC_MAGIC_DEF(\"return\", 1, js_async_generator_next, GEN_MAGIC_RETURN),\n 48080      JS_CFUNC_MAGIC_DEF(\"throw\", 1, js_async_generator_next, GEN_MAGIC_THROW),\n 48081:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"AsyncGenerator\", JS_PROP_CONFIGURABLE),\n 48082  };\n 48083  \n .....\n 50027      JS_CFUNC_DEF(\"toString\", 0, js_bigint_toString),\n 50028      JS_CFUNC_DEF(\"valueOf\", 0, js_bigint_valueOf),\n 50029:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"BigInt\", JS_PROP_CONFIGURABLE),\n 50030  };\n 50031  \n .....\n 52048          \"byteLength\", js_array_buffer_get_byteLength, NULL, JS_CLASS_ARRAY_BUFFER),\n 52049      JS_CFUNC_MAGIC_DEF(\"slice\", 2, js_array_buffer_slice, JS_CLASS_ARRAY_BUFFER),\n 52050:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"ArrayBuffer\", JS_PROP_CONFIGURABLE),\n 52051  };\n 52052  \n .....\n 52061          \"byteLength\", js_array_buffer_get_byteLength, NULL, JS_CLASS_SHARED_ARRAY_BUFFER),\n 52062      JS_CFUNC_MAGIC_DEF(\"slice\", 2, js_array_buffer_slice, JS_CLASS_SHARED_ARRAY_BUFFER),\n 52063:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"SharedArrayBuffer\", JS_PROP_CONFIGURABLE),\n 52064  };\n 52065  \n .....\n 53576      JS_CFUNC_MAGIC_DEF(\n 53577          \"entries\", 0, js_create_typed_array_iterator, JS_ITERATOR_KIND_KEY_AND_VALUE),\n 53578:     JS_CGETSET_DEF(\"[Symbol.toStringTag]\", js_typed_array_get_toStringTag, NULL),\n 53579      JS_CFUNC_DEF(\"copyWithin\", 2, js_typed_array_copyWithin),\n 53580      JS_CFUNC_MAGIC_DEF(\"every\", 1, js_array_every, special_every | special_TA),\n .....\n 54132      JS_CFUNC_MAGIC_DEF(\"setFloat32\", 2, js_dataview_setValue, JS_CLASS_FLOAT32_ARRAY),\n 54133      JS_CFUNC_MAGIC_DEF(\"setFloat64\", 2, js_dataview_setValue, JS_CLASS_FLOAT64_ARRAY),\n 54134:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"DataView\", JS_PROP_CONFIGURABLE),\n 54135  };\n 54136  \n .....\n 54509      JS_CFUNC_DEF(\"wait\", 4, js_atomics_wait),\n 54510      JS_CFUNC_DEF(\"notify\", 3, js_atomics_notify),\n 54511:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Atomics\", JS_PROP_CONFIGURABLE),\n 54512  };\n 54513  \n\n~/Projects/plot-cv/test-opencv-worker.js:\n   22  \n   23    globalThis.console = new Console({\n   24: <skipped 56 characters> ...ngth: Infinity, maxStringLength: 1024, customInspect: true, classKey: Symbol.toStringTag, hideKeys: [Symbol.toStringTag] }\n   25    });\n   26  \n\n~/Projects/plot-cv/debugger-server.js:\n  929                    define(\n  930                      fns.filter(({ name }) => re.test(name)),\n  931:                     { [Symbol.toStringTag]: 'FunctionList', file }\n  932                    )\n  933                  );\n\n~/Projects/plot-cv/cli-helpers.js:\n   61        }\n   62      },\n   63:     { rows, keys, [Symbol.toStringTag]: 'Table', [Symbol.for('print')]: true }\n   64    );\n   65  }\n   ..\n   99        }\n  100      },\n  101:     { items, keys, [Symbol.toStringTag]: 'List', [Symbol.for('print')]: true }\n  102    );\n  103  }\n\n~/Projects/plot-cv/x.js:\n    4      Object.assign(this, obj);\n    5    }\n    6:   get [Symbol.toStringTag]() {\n    7      return `[PmDeviceInfo_S @ ${this} ]`;\n    8    }\n\n~/Projects/plot-cv/dump-structs.js:\n  552    yield `class ${name} extends ArrayBuffer {`;\n  553    yield `  constructor(obj = {}) {\\n    super(${size});\\n    Object.assign(this, obj);\\n  }`;\n  554:   yield `  get [Symbol.toStringTag]() { return \\`[struct ${name} @ \\${this} ]\\`; }`;\n  555    let fields = [];\n  556    for(let [name, [type, offset, size]] of map) {\n\n~/Projects/plot-cv/debugger.js:\n  210  }\n  211  \n  212: Object.assign(DebuggerDispatcher.prototype, { [Symbol.toStringTag]: 'DebuggerDispatcher' });\n  213  Object.setPrototypeOf(DebuggerDispatcher.prototype, null);\n  214  \n\n~/Projects/plot-cv/portaudio2.js:\n    6      Object.assign(this, obj);\n    7    }\n    8:   get [Symbol.toStringTag]() {\n    9      return `[PaStreamParameters @ ${this} ]`;\n   10    }\n\n~/Projects/plot-cv/test-ffi.js:\n   42      // Object.assign(this, obj);\n   43    }\n   44:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n   45      return `[Registers @ ${toPointer(this)} ]`;\n   46    }\n\n~/Projects/plot-cv/test-features2d.js:\n   17    let ctor_names = Object.getOwnPropertyNames(cv).filter(name => typeof cv[name] == 'function');\n   18  \n   19:   let features2d_names = ctor_names.filter(name => cv[name].prototype && cv[name].prototype[Symbol.toStringTag] == 'Feature2D');\n   20  \n   21    console.log('cv', features2d_names);\n\n~/Projects/plot-cv/adsb-map.js:\n   94      yield* this.convertTo('EPSG:3857');\n   95    }\n   96:   get [Symbol.toStringTag]() {\n   97      return `Coordinate ${this.lon},${this.lat}`;\n   98    }\n\n~/Projects/plot-cv/test-fft.js:\n   30      Object.assign(this, obj);\n   31    }\n   32:   /* prettier-ignore */ get [Symbol.toStringTag]() { return `[struct sf_info_t @ ${toPointer(this)} ]`; }\n   33  \n   34    /* prettier-ignore */ set frames(v) { new BigUint64Array(this, 0)[0] = BigInt(v); }\n\n~/Projects/plot-cv/message.js:\n  102  \n  103    [Symbol.for('nodejs.util.inspect.custom')]() {\n  104:     return this[Symbol.toStringTag]();\n  105    }\n  106:   [Symbol.toStringTag]() {\n  107      const { origin, recipient, type, body } = this;\n  108      return 'new Message', Util.filterOutMembers({ origin, recipient, type, body }, v => v == undefined);\n\n~/Projects/plot-cv/param.js:\n   12    }\n   13  \n   14:   /*[Symbol.toStringTag]() {\n   15      return this.toString();\n   16    }*/\n   ..\n   29  }\n   30  \n   31: define(Param.prototype, { get [Symbol.toStringTag]() { return this.toString(); } });\n   32  \n   33  export class NumericParam extends Param {\n\n~/Projects/plot-cv/ol-helpers.js:\n   75      yield* this.convertTo('EPSG:3857');\n   76    }\n   77:   get [Symbol.toStringTag]() {\n   78      return `Coordinate${this.type ? '[' + this.type + ']' : ''} ${this.lon},${this.lat}`;\n   79    }\n\n~/Projects/plot-cv/circuit.js:\n   19  }\n   20  \n   21: Comment.prototype[Symbol.toStringTag] = 'Comment';\n   22  \n   23  class Empty {\n   ..\n   36  }\n   37  \n   38: Empty.prototype[Symbol.toStringTag] = 'Empty';\n   39  \n   40  export class Via {\n   ..\n   54  }\n   55  \n   56: Via.prototype[Symbol.toStringTag] = 'Via';\n   57  \n   58  export class Board {\n   ..\n   63  }\n   64  \n   65: Board.prototype[Symbol.toStringTag] = 'Board';\n   66  \n   67  export class Package extends Array {\n   ..\n   79  }\n   80  \n   81: Package.prototype[Symbol.toStringTag] = 'Package';\n   82  \n   83  export class Component {\n   ..\n   92  }\n   93  \n   94: Component.prototype[Symbol.toStringTag] = 'Component';\n   95  \n   96  export class ConnectionPoint {\n   ..\n  105  }\n  106  \n  107: ConnectionPoint.prototype[Symbol.toStringTag] = 'ConnectionPoint';\n  108  \n  109  export class Connection {\n  ...\n  114  }\n  115  \n  116: Connection.prototype[Symbol.toStringTag] = 'Connection';\n  117  \n  118  export class Circuit {\n\n~/Projects/plot-cv/test-video.js:\n  143      maxArrayLength: 30,\n  144      compact: 1,\n  145:     hideKeys: [Symbol.toStringTag]\n  146    });\n  147    let f = std.open('test-video.log', 'w');\n\n~/Projects/plot-cv/test-imread.js:\n   61    let ctor_names = Object.getOwnPropertyNames(cv).filter(name => typeof cv[name] == 'function');\n   62  \n   63:   let features2d_names = ctor_names.filter(name => cv[name].prototype && cv[name].prototype[Symbol.toStringTag] == 'Feature2D');\n   64  \n   65    console.log('cv', features2d_names);\n\n~/Projects/plot-cv/resolve-imports2.js:\n  338      return path.relative(ES6Env.cwd, this.file || '');\n  339    }\n  340:   [Symbol.toStringTag]() {\n  341      return path.relative(ES6Env.cwd, this.file || '');\n  342    }\n\n~/Projects/plot-cv/dir-helpers.js:\n  154  \n  155    [Symbol.inspect](depth, opts = {}) {\n  156:     return `\\x1b[1;31m${this[Symbol.toStringTag]}\\x1b[0;32m ` + this.#string + `\\x1b[0m`;\n  157    }\n  158  \n  ...\n  176  }\n  177  \n  178: define(Path.prototype, { [Symbol.toStringTag]: 'Path' });\n  179  \n  180  /* same as proto[Symbol.operatorSet] = Operators.create(..op_list)\n\n~/Projects/plot-cv/test-libbpg.js:\n   17      return Object.setPrototypeOf(arrayBuf.slice(), BPGImageInfo.prototype);\n   18    }\n   19:   /* prettier-ignore */ get [Symbol.toStringTag]() { return `[struct BPGImageInfo @ ${this} ]`; }\n   20  \n   21    /* width@0 uint32_t 4 */\n\n~/Projects/plot-cv/ast-shell.js:\n  567    yield `class ${className} extends ArrayBuffer {`;\n  568    yield `  constructor(obj = {}) {\\n    super(${size});\\n    Object.assign(this, obj);\\n  }`;\n  569:   yield `  get [Symbol.toStringTag]() { return \\`[${name} @ \\${this} ]\\`; }`;\n  570  \n  571    let fields = [],\n\n~/Projects/plot-cv/inotify_event.js:\n   61  }\n   62  \n   63: inotify_event.prototype[Symbol.toStringTag] = 'inotify_event';\n   64  \n\n~/Projects/plot-cv/resolve-imports.js:\n  154      close: () => {},\n  155      seek: (whence, offset) => os.seek(fd, whence, offset),\n  156:     [Symbol.toStringTag]: `FileWriter< ${fd} >`,\n  157      inspect() {\n  158:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  159      }\n  160    });\n  ...\n  170      close: () => {},\n  171      seek: () => {},\n  172:     [Symbol.toStringTag]: `DummyWriter< ${name} >`,\n  173      inspect() {\n  174:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  175      }\n  176    });\n  ...\n  807  \n  808  define(NumericRange.prototype, {\n  809:   [Symbol.toStringTag]: 'NumericRange',\n  810    [Symbol.inspect](depth, opts) {\n  811      const [start, end] = this;\n  ...\n  862            return '';\n  863          },\n  864:         [Symbol.toStringTag]: 'FileMap(empty)'\n  865        };\n  866        return Object.setPrototypeOf(obj, FileMap.prototype);\n  ...\n 1081  }\n 1082  \n 1083: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1084  FileMap.prototype[Symbol.inspect] = function(depth, opts) {\n 1085    let arr = [...this].map(([range, buf], i) => {\n\n~/Projects/plot-cv/struct-buffer.js:\n    4      Object.assign(this, obj);\n    5    }\n    6:   get [Symbol.toStringTag]() {\n    7      return `[struct buffer @ ${this} ]`;\n    8    }\n\n~/Projects/plot-cv/clang-ast.js:\n  111  }\n  112  \n  113: define(List.prototype, { [Symbol.toStringTag]: 'List' });\n  114  \n  115  export class Node {\n  ...\n  182    }\n  183  \n  184:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  185      return this.constructor.name;\n  186    }\n  ...\n  931          }),\n  932          end: new Location({ ...end.toObject(), file: undefined, line: undefined, col: undefined }),\n  933:         [Symbol.toStringTag]: 'Range'\n  934        },\n  935        { ...opts, compact: false, customInspect: true, onlyOffset: true }\n  ...\n  956  }\n  957  \n  958: Range.prototype[Symbol.toStringTag] = 'Range';\n  959  \n  960  export class Location {\n  ...\n 1494  }\n 1495  \n 1496: NodeError.prototype[Symbol.toStringTag] = 'NodeError';\n 1497  \n 1498  export function NodePrinter(ast) {\n\n~/Projects/plot-cv/adsb-client.js:\n   33      close: () => {},\n   34      seek: (whence, offset) => os.seek(fd, whence, offset),\n   35:     [Symbol.toStringTag]: `FileWriter< ${fd} >`,\n   36      inspect() {\n   37:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n   38      }\n   39    });\n\n~/Projects/plot-cv/data/binfmttest.structs.js:\n    4      Object.assign(this, obj);\n    5    }\n    6:   get [Symbol.toStringTag]() { return `[struct range @ ${this} ]`; }\n    7  \n    8    /* 0: char * start@8 */\n    .\n   29      Object.assign(this, obj);\n   30    }\n   31:   get [Symbol.toStringTag]() { return `[struct binfmt_entry @ ${this} ]`; }\n   32  \n   33    /* 0: const char * name@8 */\n   ..\n   62      Object.assign(this, obj);\n   63    }\n   64:   get [Symbol.toStringTag]() { return `[struct binfmt_file @ ${this} ]`; }\n   65  \n   66    /* 0: uint8 * baseaddr@8 */\n\n~/Projects/plot-cv/data/ar-wrap.structs.js:\n    4      Object.assign(this, obj);\n    5    }\n    6:   get [Symbol.toStringTag]() { return `[struct stralloc @ ${this} ]`; }\n    7  \n    8    /* 0: char * s@8 */\n    .\n   29      Object.assign(this, obj);\n   30    }\n   31:   get [Symbol.toStringTag]() { return `[struct buffer @ ${this} ]`; }\n   32  \n   33    /* 0: char * x@8 */\n   ..\n   74      Object.assign(this, obj);\n   75    }\n   76:   get [Symbol.toStringTag]() { return `[struct strlist @ ${this} ]`; }\n   77  \n   78    /* 0: stralloc sa@NaN */\n   ..\n   95      Object.assign(this, obj);\n   96    }\n   97:   get [Symbol.toStringTag]() { return `[struct array @ ${this} ]`; }\n   98  \n   99    /* 0: char * p@8 */\n\n~/Projects/plot-cv/data/getdents.structs.js:\n    4      Object.assign(this, obj);\n    5    }\n    6:   get [Symbol.toStringTag]() { return `[struct __fsid_t @ ${this} ]`; }\n    7  \n    8    /* 0: int [2] __val@8 */\n    .\n   21      Object.assign(this, obj);\n   22    }\n   23:   get [Symbol.toStringTag]() { return `[struct __mbstate_t @ ${this} ]`; }\n   24  \n   25    /* 0: int __count@4 */\n   ..\n   42      Object.assign(this, obj);\n   43    }\n   44:   get [Symbol.toStringTag]() { return `[struct __fpos_t @ ${this} ]`; }\n   45  \n   46    /* 0: __off_t __pos@8 */\n   ..\n   63      Object.assign(this, obj);\n   64    }\n   65:   get [Symbol.toStringTag]() { return `[struct __fpos64_t @ ${this} ]`; }\n   66  \n   67    /* 0: __off64_t __pos@8 */\n   ..\n   84      Object.assign(this, obj);\n   85    }\n   86:   get [Symbol.toStringTag]() { return `[struct __FILE @ ${this} ]`; }\n   87  \n   88    /* 0: int _flags@4 */\n   ..\n  213      Object.assign(this, obj);\n  214    }\n  215:   get [Symbol.toStringTag]() { return `[struct FILE @ ${this} ]`; }\n  216  \n  217    /* 0: int _flags@4 */\n  ...\n  342      Object.assign(this, obj);\n  343    }\n  344:   get [Symbol.toStringTag]() { return `[struct cookie_io_functions_t @ ${this} ]`; }\n  345  \n  346    /* 0: cookie_read_function_t * read@8 */\n  ...\n  371      Object.assign(this, obj);\n  372    }\n  373:   get [Symbol.toStringTag]() { return `[struct div_t @ ${this} ]`; }\n  374  \n  375    /* 0: int quot@4 */\n  ...\n  392      Object.assign(this, obj);\n  393    }\n  394:   get [Symbol.toStringTag]() { return `[struct ldiv_t @ ${this} ]`; }\n  395  \n  396    /* 0: long quot@8 */\n  ...\n  413      Object.assign(this, obj);\n  414    }\n  415:   get [Symbol.toStringTag]() { return `[struct lldiv_t @ ${this} ]`; }\n  416  \n  417    /* 0: long long quot@8 */\n  ...\n  434      Object.assign(this, obj);\n  435    }\n  436:   get [Symbol.toStringTag]() { return `[struct __locale_t @ ${this} ]`; }\n  437  \n  438    /* 0: __int128 __locale_data@16 */\n  ...\n  471      Object.assign(this, obj);\n  472    }\n  473:   get [Symbol.toStringTag]() { return `[struct __sigset_t @ ${this} ]`; }\n  474  \n  475    /* 0: unsigned long [16] __val@128 */\n  ...\n  488      Object.assign(this, obj);\n  489    }\n  490:   get [Symbol.toStringTag]() { return `[struct fd_set @ ${this} ]`; }\n  491  \n  492    /* 0: __fd_mask [16] fds_bits@NaN */\n  ...\n  505      Object.assign(this, obj);\n  506    }\n  507:   get [Symbol.toStringTag]() { return `[struct __pthread_list_t @ ${this} ]`; }\n  508  \n  509    /* 0: struct __pthread_internal_list * __prev@8 */\n  ...\n  526      Object.assign(this, obj);\n  527    }\n  528:   get [Symbol.toStringTag]() { return `[struct __pthread_slist_t @ ${this} ]`; }\n  529  \n  530    /* 0: struct __pthread_internal_slist * __next@8 */\n  ...\n  543      Object.assign(this, obj);\n  544    }\n  545:   get [Symbol.toStringTag]() { return `[struct pthread_mutexattr_t @ ${this} ]`; }\n  546  \n  547    /* 0: char [4] __size@4 */\n  ...\n  564      Object.assign(this, obj);\n  565    }\n  566:   get [Symbol.toStringTag]() { return `[struct pthread_condattr_t @ ${this} ]`; }\n  567  \n  568    /* 0: char [4] __size@4 */\n  ...\n  585      Object.assign(this, obj);\n  586    }\n  587:   get [Symbol.toStringTag]() { return `[struct pthread_attr_t @ ${this} ]`; }\n  588  \n  589    /* 0: char [56] __size@56 */\n  ...\n  606      Object.assign(this, obj);\n  607    }\n  608:   get [Symbol.toStringTag]() { return `[struct pthread_mutex_t @ ${this} ]`; }\n  609  \n  610    /* 0: struct __pthread_mutex_s __data@NaN */\n  ...\n  631      Object.assign(this, obj);\n  632    }\n  633:   get [Symbol.toStringTag]() { return `[struct pthread_cond_t @ ${this} ]`; }\n  634  \n  635    /* 0: struct __pthread_cond_s __data@NaN */\n  ...\n  656      Object.assign(this, obj);\n  657    }\n  658:   get [Symbol.toStringTag]() { return `[struct pthread_rwlock_t @ ${this} ]`; }\n  659  \n  660    /* 0: struct __pthread_rwlock_arch_t __data@NaN */\n  ...\n  681      Object.assign(this, obj);\n  682    }\n  683:   get [Symbol.toStringTag]() { return `[struct pthread_rwlockattr_t @ ${this} ]`; }\n  684  \n  685    /* 0: char [8] __size@8 */\n  ...\n  702      Object.assign(this, obj);\n  703    }\n  704:   get [Symbol.toStringTag]() { return `[struct pthread_barrier_t @ ${this} ]`; }\n  705  \n  706    /* 0: char [32] __size@32 */\n  ...\n  723      Object.assign(this, obj);\n  724    }\n  725:   get [Symbol.toStringTag]() { return `[struct pthread_barrierattr_t @ ${this} ]`; }\n  726  \n  727    /* 0: char [4] __size@4 */\n  ...\n  744      Object.assign(this, obj);\n  745    }\n  746:   get [Symbol.toStringTag]() { return `[struct __kernel_fd_set @ ${this} ]`; }\n  747  \n  748    /* 0: unsigned long [16] fds_bits@128 */\n  ...\n  761      Object.assign(this, obj);\n  762    }\n  763:   get [Symbol.toStringTag]() { return `[struct __kernel_fsid_t @ ${this} ]`; }\n  764  \n  765    /* 0: int [2] val@8 */\n\n~/Projects/plot-cv/data/qjs.structs.js:\n    4      Object.assign(this, obj);\n    5    }\n    6:   get [Symbol.toStringTag]() { return `[struct DynBuf @ ${this} ]`; }\n    7  \n    8    /* 0: uint8_t * buf@8 */\n    .\n   41      Object.assign(this, obj);\n   42    }\n   43:   get [Symbol.toStringTag]() { return `[struct JSRefCountHeader @ ${this} ]`; }\n   44  \n   45    /* 0: int ref_count@4 */\n   ..\n   58      Object.assign(this, obj);\n   59    }\n   60:   get [Symbol.toStringTag]() { return `[struct JSValueUnion @ ${this} ]`; }\n   61  \n   62    /* 0: int32_t int32@4 */\n   ..\n   83      Object.assign(this, obj);\n   84    }\n   85:   get [Symbol.toStringTag]() { return `[struct JSValue @ ${this} ]`; }\n   86  \n   87    /* 0: JSValueUnion u@NaN */\n   ..\n  104      Object.assign(this, obj);\n  105    }\n  106:   get [Symbol.toStringTag]() { return `[struct JSMallocState @ ${this} ]`; }\n  107  \n  108    /* 0: size_t malloc_count@8 */\n  ...\n  133      Object.assign(this, obj);\n  134    }\n  135:   get [Symbol.toStringTag]() { return `[struct JSMallocFunctions @ ${this} ]`; }\n  136  \n  137    /* 0: void *(*)(JSMallocState *, size_t) js_malloc@8 */\n  ...\n  162      Object.assign(this, obj);\n  163    }\n  164:   get [Symbol.toStringTag]() { return `[struct JSMemoryUsage @ ${this} ]`; }\n  165  \n  166    /* 0: int64_t malloc_size@8 */\n  ...\n  279      Object.assign(this, obj);\n  280    }\n  281:   get [Symbol.toStringTag]() { return `[struct JSPropertyEnum @ ${this} ]`; }\n  282  \n  283    /* 0: int is_enumerable@4 */\n  ...\n  300      Object.assign(this, obj);\n  301    }\n  302:   get [Symbol.toStringTag]() { return `[struct JSPropertyDescriptor @ ${this} ]`; }\n  303  \n  304    /* 0: int flags@4 */\n  ...\n  329      Object.assign(this, obj);\n  330    }\n  331:   get [Symbol.toStringTag]() { return `[struct JSClassExoticMethods @ ${this} ]`; }\n  332  \n  333    /* 0: int (*)(JSContext *, JSPropertyDescriptor *, JSValue, JSAtom) get_own_property@8 */\n  ...\n  370      Object.assign(this, obj);\n  371    }\n  372:   get [Symbol.toStringTag]() { return `[struct JSClassDef @ ${this} ]`; }\n  373  \n  374    /* 0: const char * class_name@8 */\n  ...\n  403      Object.assign(this, obj);\n  404    }\n  405:   get [Symbol.toStringTag]() { return `[struct JSSharedArrayBufferFunctions @ ${this} ]`; }\n  406  \n  407    /* 0: void *(*)(void *, size_t) sab_alloc@8 */\n  ...\n  432      Object.assign(this, obj);\n  433    }\n  434:   get [Symbol.toStringTag]() { return `[struct JSCFunctionType @ ${this} ]`; }\n  435  \n  436    /* 0: JSCFunction * generic@8 */\n  ...\n  493      Object.assign(this, obj);\n  494    }\n  495:   get [Symbol.toStringTag]() { return `[struct JSCFunctionListEntry @ ${this} ]`; }\n  496  \n  497    /* 0: const char * name@8 */\n\n~/Projects/plot-cv/data/mplab.structs.js:\n    4      Object.assign(this, obj);\n    5    }\n    6:   get [Symbol.toStringTag]() { return `[struct stralloc @ ${this} ]`; }\n    7  \n    8    /* 0: char * s@8 */\n    .\n   29      Object.assign(this, obj);\n   30    }\n   31:   get [Symbol.toStringTag]() { return `[struct dir_t @ ${this} ]`; }\n   32  \n   33    /* 0: void * dir_int@8 */\n   ..\n   46      Object.assign(this, obj);\n   47    }\n   48:   get [Symbol.toStringTag]() { return `[struct rdir_t @ ${this} ]`; }\n   49  \n   50    /* 0: struct rdir_s * prev@8 */\n   ..\n   71      Object.assign(this, obj);\n   72    }\n   73:   get [Symbol.toStringTag]() { return `[struct slink @ ${this} ]`; }\n   74  \n   75    /* 0: struct slink * next@8 */\n   ..\n   88      Object.assign(this, obj);\n   89    }\n   90:   get [Symbol.toStringTag]() { return `[struct array @ ${this} ]`; }\n   91  \n   92    /* 0: char * p@8 */\n   ..\n  117      Object.assign(this, obj);\n  118    }\n  119:   get [Symbol.toStringTag]() { return `[struct buffer @ ${this} ]`; }\n  120  \n  121    /* 0: char * x@8 */\n  ...\n  162      Object.assign(this, obj);\n  163    }\n  164:   get [Symbol.toStringTag]() { return `[struct strlist @ ${this} ]`; }\n  165  \n  166    /* 0: stralloc sa@NaN */\n  ...\n  183      Object.assign(this, obj);\n  184    }\n  185:   get [Symbol.toStringTag]() { return `[struct range @ ${this} ]`; }\n  186  \n  187    /* 0: char * start@8 */\n  ...\n  208      Object.assign(this, obj);\n  209    }\n  210:   get [Symbol.toStringTag]() { return `[struct bucket_t @ ${this} ]`; }\n  211  \n  212    /* 0: struct bucket * next@8 */\n  ...\n  237      Object.assign(this, obj);\n  238    }\n  239:   get [Symbol.toStringTag]() { return `[struct set_t @ ${this} ]`; }\n  240  \n  241    /* 0: uint32 entries@4 */\n  ...\n  270      Object.assign(this, obj);\n  271    }\n  272:   get [Symbol.toStringTag]() { return `[struct set_iterator_t @ ${this} ]`; }\n  273  \n  274    /* 0: uint32 index@4 */\n  ...\n  295      Object.assign(this, obj);\n  296    }\n  297:   get [Symbol.toStringTag]() { return `[struct TUPLE @ ${this} ]`; }\n  298  \n  299    /* 0: struct tuple * next@8 */\n  ...\n  356      Object.assign(this, obj);\n  357    }\n  358:   get [Symbol.toStringTag]() { return `[struct HMAP_DB @ ${this} ]`; }\n  359  \n  360    /* 0: int tuple_count@4 */\n  ...\n  389      Object.assign(this, obj);\n  390    }\n  391:   get [Symbol.toStringTag]() { return `[struct machine_type @ ${this} ]`; }\n  392  \n  393    /* 0: enum (anonymous enum at ../c-utils/genmakefile.h:57:3) arch@4 */\n  ...\n  410      Object.assign(this, obj);\n  411    }\n  412:   get [Symbol.toStringTag]() { return `[struct system_type @ ${this} ]`; }\n  413  \n  414    /* 0: enum os_type os@4 */\n  ...\n  431      Object.assign(this, obj);\n  432    }\n  433:   get [Symbol.toStringTag]() { return `[struct sourcefile @ ${this} ]`; }\n  434  \n  435    /* 0: struct slink link@NaN */\n  ...\n  468      Object.assign(this, obj);\n  469    }\n  470:   get [Symbol.toStringTag]() { return `[struct sourcedir @ ${this} ]`; }\n  471  \n  472    /* 0: int n_sources@4 */\n  ...\n  509      Object.assign(this, obj);\n  510    }\n  511:   get [Symbol.toStringTag]() { return `[struct target @ ${this} ]`; }\n  512  \n  513    /* 0: const char * name@8 */\n  ...\n  554      Object.assign(this, obj);\n  555    }\n  556:   get [Symbol.toStringTag]() { return `[struct dirs_t @ ${this} ]`; }\n  557  \n  558    /* 0: strlist work@NaN */\n  ...\n  583      Object.assign(this, obj);\n  584    }\n  585:   get [Symbol.toStringTag]() { return `[struct exts_t @ ${this} ]`; }\n  586  \n  587    /* 0: char * obj@8 */\n  ...\n  612      Object.assign(this, obj);\n  613    }\n  614:   get [Symbol.toStringTag]() { return `[struct tools_t @ ${this} ]`; }\n  615  \n  616    /* 0: char * toolchain@8 */\n  ...\n  641      Object.assign(this, obj);\n  642    }\n  643:   get [Symbol.toStringTag]() { return `[struct config_t @ ${this} ]`; }\n  644  \n  645    /* 0: struct machine_type mach@NaN */\n  ...\n  674      Object.assign(this, obj);\n  675    }\n  676:   get [Symbol.toStringTag]() { return `[struct ini_section_t @ ${this} ]`; }\n  677  \n  678    /* 0: struct ini_section * next@8 */\n  ...\n  699      Object.assign(this, obj);\n  700    }\n  701:   get [Symbol.toStringTag]() { return `[struct mplab_config_t @ ${this} ]`; }\n  702  \n  703    /* 0: int warning_level@4 */\n\n~/Projects/plot-cv/data/test-websocket.structs.js:\n    4      Object.assign(this, obj);\n    5    }\n    6:   get [Symbol.toStringTag]() { return `[struct JSRefCountHeader @ ${this} ]`; }\n    7  \n    8    /* 0: int ref_count@4 */\n    .\n   21      Object.assign(this, obj);\n   22    }\n   23:   get [Symbol.toStringTag]() { return `[struct JSValueUnion @ ${this} ]`; }\n   24  \n   25    /* 0: int32_t int32@4 */\n   ..\n   46      Object.assign(this, obj);\n   47    }\n   48:   get [Symbol.toStringTag]() { return `[struct JSValue @ ${this} ]`; }\n   49  \n   50    /* 0: JSValueUnion u@NaN */\n   ..\n   67      Object.assign(this, obj);\n   68    }\n   69:   get [Symbol.toStringTag]() { return `[struct JSMallocState @ ${this} ]`; }\n   70  \n   71    /* 0: size_t malloc_count@8 */\n   ..\n   96      Object.assign(this, obj);\n   97    }\n   98:   get [Symbol.toStringTag]() { return `[struct JSMallocFunctions @ ${this} ]`; }\n   99  \n  100    /* 0: void *(*)(JSMallocState *, size_t) js_malloc@8 */\n  ...\n  125      Object.assign(this, obj);\n  126    }\n  127:   get [Symbol.toStringTag]() { return `[struct JSMemoryUsage @ ${this} ]`; }\n  128  \n  129    /* 0: int64_t malloc_size@8 */\n  ...\n  242      Object.assign(this, obj);\n  243    }\n  244:   get [Symbol.toStringTag]() { return `[struct JSPropertyEnum @ ${this} ]`; }\n  245  \n  246    /* 0: int is_enumerable@4 */\n  ...\n  263      Object.assign(this, obj);\n  264    }\n  265:   get [Symbol.toStringTag]() { return `[struct JSPropertyDescriptor @ ${this} ]`; }\n  266  \n  267    /* 0: int flags@4 */\n  ...\n  292      Object.assign(this, obj);\n  293    }\n  294:   get [Symbol.toStringTag]() { return `[struct JSClassExoticMethods @ ${this} ]`; }\n  295  \n  296    /* 0: int (*)(JSContext *, JSPropertyDescriptor *, JSValue, JSAtom) get_own_property@8 */\n  ...\n  333      Object.assign(this, obj);\n  334    }\n  335:   get [Symbol.toStringTag]() { return `[struct JSClassDef @ ${this} ]`; }\n  336  \n  337    /* 0: const char * class_name@8 */\n  ...\n  366      Object.assign(this, obj);\n  367    }\n  368:   get [Symbol.toStringTag]() { return `[struct JSSharedArrayBufferFunctions @ ${this} ]`; }\n  369  \n  370    /* 0: void *(*)(void *, size_t) sab_alloc@8 */\n  ...\n  395      Object.assign(this, obj);\n  396    }\n  397:   get [Symbol.toStringTag]() { return `[struct JSCFunctionType @ ${this} ]`; }\n  398  \n  399    /* 0: JSCFunction * generic@8 */\n  ...\n  456      Object.assign(this, obj);\n  457    }\n  458:   get [Symbol.toStringTag]() { return `[struct JSCFunctionListEntry @ ${this} ]`; }\n  459  \n  460    /* 0: const char * name@8 */\n\n~/Projects/plot-cv/quickjs/quickjs.c:\n 40770  static const JSCFunctionListEntry js_array_iterator_proto_funcs[] = {\n 40771      JS_ITERATOR_NEXT_DEF(\"next\", 0, js_array_iterator_next, 0 ),\n 40772:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Array Iterator\", JS_PROP_CONFIGURABLE ),\n 40773  };\n 40774  \n .....\n 42915  static const JSCFunctionListEntry js_string_iterator_proto_funcs[] = {\n 42916      JS_ITERATOR_NEXT_DEF(\"next\", 0, js_string_iterator_next, 0 ),\n 42917:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"String Iterator\", JS_PROP_CONFIGURABLE ),\n 42918  };\n 42919  \n .....\n 43181      JS_CFUNC_DEF(\"imul\", 2, js_math_imul ),\n 43182      JS_CFUNC_DEF(\"clz32\", 1, js_math_clz32 ),\n 43183:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Math\", JS_PROP_CONFIGURABLE ),\n 43184      JS_PROP_DOUBLE_DEF(\"E\", 2.718281828459045, 0 ),\n 43185      JS_PROP_DOUBLE_DEF(\"LN10\", 2.302585092994046, 0 ),\n .....\n 44818  static const JSCFunctionListEntry js_regexp_string_iterator_proto_funcs[] = {\n 44819      JS_ITERATOR_NEXT_DEF(\"next\", 0, js_regexp_string_iterator_next, 0 ),\n 44820:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"RegExp String Iterator\", JS_PROP_CONFIGURABLE ),\n 44821  };\n 44822  \n .....\n 45530      JS_CFUNC_DEF(\"parse\", 2, js_json_parse ),\n 45531      JS_CFUNC_DEF(\"stringify\", 3, js_json_stringify ),\n 45532:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"JSON\", JS_PROP_CONFIGURABLE ),\n 45533  };\n 45534  \n .....\n 45704      JS_CFUNC_DEF(\"set\", 3, js_reflect_set ),\n 45705      JS_CFUNC_DEF(\"setPrototypeOf\", 2, js_reflect_setPrototypeOf ),\n 45706:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Reflect\", JS_PROP_CONFIGURABLE ),\n 45707  };\n 45708  \n .....\n 46746      // XXX: should have writable: false\n 46747      JS_CFUNC_DEF(\"[Symbol.toPrimitive]\", 1, js_symbol_valueOf ),\n 46748:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Symbol\", JS_PROP_CONFIGURABLE ),\n 46749      JS_CGETSET_DEF(\"description\", js_symbol_get_description, NULL ),\n 46750  };\n .....\n 47585      JS_CFUNC_MAGIC_DEF(\"entries\", 0, js_create_map_iterator, (JS_ITERATOR_KIND_KEY_AND_VALUE << 2) | 0 ),\n 47586      JS_ALIAS_DEF(\"[Symbol.iterator]\", \"entries\" ),\n 47587:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Map\", JS_PROP_CONFIGURABLE ),\n 47588  };\n 47589  \n 47590  static const JSCFunctionListEntry js_map_iterator_proto_funcs[] = {\n 47591      JS_ITERATOR_NEXT_DEF(\"next\", 0, js_map_iterator_next, 0 ),\n 47592:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Map Iterator\", JS_PROP_CONFIGURABLE ),\n 47593  };\n 47594  \n .....\n 47604      JS_ALIAS_DEF(\"[Symbol.iterator]\", \"values\" ),\n 47605      JS_CFUNC_MAGIC_DEF(\"entries\", 0, js_create_map_iterator, (JS_ITERATOR_KIND_KEY_AND_VALUE << 2) | MAGIC_SET ),\n 47606:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Set\", JS_PROP_CONFIGURABLE ),\n 47607  };\n 47608  \n 47609  static const JSCFunctionListEntry js_set_iterator_proto_funcs[] = {\n 47610      JS_ITERATOR_NEXT_DEF(\"next\", 0, js_map_iterator_next, MAGIC_SET ),\n 47611:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Set Iterator\", JS_PROP_CONFIGURABLE ),\n 47612  };\n 47613  \n .....\n 47617      JS_CFUNC_MAGIC_DEF(\"has\", 1, js_map_has, MAGIC_WEAK ),\n 47618      JS_CFUNC_MAGIC_DEF(\"delete\", 1, js_map_delete, MAGIC_WEAK ),\n 47619:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"WeakMap\", JS_PROP_CONFIGURABLE ),\n 47620  };\n 47621  \n .....\n 47624      JS_CFUNC_MAGIC_DEF(\"has\", 1, js_map_has, MAGIC_SET | MAGIC_WEAK ),\n 47625      JS_CFUNC_MAGIC_DEF(\"delete\", 1, js_map_delete, MAGIC_SET | MAGIC_WEAK ),\n 47626:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"WeakSet\", JS_PROP_CONFIGURABLE ),\n 47627  };\n 47628  \n .....\n 47678  /* Generator */\n 47679  static const JSCFunctionListEntry js_generator_function_proto_funcs[] = {\n 47680:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"GeneratorFunction\", JS_PROP_CONFIGURABLE),\n 47681  };\n 47682  \n .....\n 47685      JS_ITERATOR_NEXT_DEF(\"return\", 1, js_generator_next, GEN_MAGIC_RETURN ),\n 47686      JS_ITERATOR_NEXT_DEF(\"throw\", 1, js_generator_next, GEN_MAGIC_THROW ),\n 47687:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Generator\", JS_PROP_CONFIGURABLE),\n 47688  };\n 47689  \n .....\n 48694      JS_CFUNC_DEF(\"catch\", 1, js_promise_catch ),\n 48695      JS_CFUNC_DEF(\"finally\", 1, js_promise_finally ),\n 48696:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Promise\", JS_PROP_CONFIGURABLE ),\n 48697  };\n 48698  \n 48699  /* AsyncFunction */\n 48700  static const JSCFunctionListEntry js_async_function_proto_funcs[] = {\n 48701:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"AsyncFunction\", JS_PROP_CONFIGURABLE ),\n 48702  };\n 48703  \n .....\n 48896  \n 48897  static const JSCFunctionListEntry js_async_generator_function_proto_funcs[] = {\n 48898:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"AsyncGeneratorFunction\", JS_PROP_CONFIGURABLE ),\n 48899  };\n 48900  \n .....\n 48905      JS_CFUNC_MAGIC_DEF(\"return\", 1, js_async_generator_next, GEN_MAGIC_RETURN ),\n 48906      JS_CFUNC_MAGIC_DEF(\"throw\", 1, js_async_generator_next, GEN_MAGIC_THROW ),\n 48907:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"AsyncGenerator\", JS_PROP_CONFIGURABLE ),\n 48908  };\n 48909  \n .....\n 50871      JS_CFUNC_DEF(\"toString\", 0, js_bigint_toString ),\n 50872      JS_CFUNC_DEF(\"valueOf\", 0, js_bigint_valueOf ),\n 50873:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"BigInt\", JS_PROP_CONFIGURABLE ),\n 50874  };\n 50875  \n .....\n 52907      JS_CGETSET_MAGIC_DEF(\"byteLength\", js_array_buffer_get_byteLength, NULL, JS_CLASS_ARRAY_BUFFER ),\n 52908      JS_CFUNC_MAGIC_DEF(\"slice\", 2, js_array_buffer_slice, JS_CLASS_ARRAY_BUFFER ),\n 52909:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"ArrayBuffer\", JS_PROP_CONFIGURABLE ),\n 52910  };\n 52911  \n .....\n 52919      JS_CGETSET_MAGIC_DEF(\"byteLength\", js_array_buffer_get_byteLength, NULL, JS_CLASS_SHARED_ARRAY_BUFFER ),\n 52920      JS_CFUNC_MAGIC_DEF(\"slice\", 2, js_array_buffer_slice, JS_CLASS_SHARED_ARRAY_BUFFER ),\n 52921:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"SharedArrayBuffer\", JS_PROP_CONFIGURABLE ),\n 52922  };\n 52923  \n .....\n 54456      JS_CFUNC_MAGIC_DEF(\"keys\", 0, js_create_typed_array_iterator, JS_ITERATOR_KIND_KEY ),\n 54457      JS_CFUNC_MAGIC_DEF(\"entries\", 0, js_create_typed_array_iterator, JS_ITERATOR_KIND_KEY_AND_VALUE ),\n 54458:     JS_CGETSET_DEF(\"[Symbol.toStringTag]\", js_typed_array_get_toStringTag, NULL ),\n 54459      JS_CFUNC_DEF(\"copyWithin\", 2, js_typed_array_copyWithin ),\n 54460      JS_CFUNC_MAGIC_DEF(\"every\", 1, js_array_every, special_every | special_TA ),\n .....\n 55038      JS_CFUNC_MAGIC_DEF(\"setFloat32\", 2, js_dataview_setValue, JS_CLASS_FLOAT32_ARRAY ),\n 55039      JS_CFUNC_MAGIC_DEF(\"setFloat64\", 2, js_dataview_setValue, JS_CLASS_FLOAT64_ARRAY ),\n 55040:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"DataView\", JS_PROP_CONFIGURABLE ),\n 55041  };\n 55042  \n .....\n 55477      JS_CFUNC_DEF(\"wait\", 4, js_atomics_wait ),\n 55478      JS_CFUNC_DEF(\"notify\", 3, js_atomics_notify ),\n 55479:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Atomics\", JS_PROP_CONFIGURABLE ),\n 55480  };\n 55481  \n\n~/Projects/plot-cv/quickjs/qjs-net/tests/client.js:\n  103            value: () => ({ read: () => readable.next() })\n  104          },\n  105:         [Symbol.toStringTag]: { value: 'ReadableStream' }\n  106        }\n  107      ),\n\n~/Projects/plot-cv/quickjs/qjs-net/js/event-emitter.js:\n   47  }\n   48  \n   49: EventEmitter.prototype[Symbol.toStringTag] = 'EventEmitter';\n   50  \n\n~/Projects/plot-cv/quickjs/qjs-net/js/rpc.js:\n   39  \n   40  function getPrototypeName(proto) {\n   41:   return proto[Symbol.toStringTag] ?? proto.constructor?.name;\n   42  }\n   43  \n   ..\n  131  }\n  132  \n  133: define(RPCObject.prototype, { [Symbol.toStringTag]: 'RPCObject' });\n  134  \n  135  export function RPCFactory(api) {\n  ...\n  151  RPCFactory.prototype = function() {};\n  152  \n  153: define(RPCFactory.prototype, { [Symbol.toStringTag]: 'RPCFactory' });\n  154  \n  155  export function EncodeValue(arg) {\n  ...\n  288  }\n  289  \n  290: define(Connection.prototype, { [Symbol.toStringTag]: 'RPCConnection' });\n  291  define(Connection, { codecs });\n  292  \n  ...\n  455  }\n  456  \n  457: define(RPCServer.prototype, { [Symbol.toStringTag]: 'RPCServer' });\n  458  \n  459  /**\n  ...\n  497  }\n  498  \n  499: define(RPCClient.prototype, { [Symbol.toStringTag]: 'RPCClient' });\n  500  \n  501  export class FactoryClient extends RPCClient {\n  ...\n  681    });\n  682  }\n  683: define(RPCSocket.prototype, { [Symbol.toStringTag]: 'RPCSocket' });\n  684  \n  685  if(!isFunction(globalThis.WebSocket)) globalThis.WebSocket = function WebSocket() {};\n\n~/Projects/plot-cv/quickjs/qjs-net/src/minnet-client.c:\n 1161      JS_CGETSET_MAGIC_FLAGS_DEF(\"lineBuffered\", minnet_client_get, minnet_client_set, CLIENT_LINEBUFFERED, 0),\n 1162      // JS_CFUNC_MAGIC_DEF(\"[Symbol.asyncIterator]\", 0, minnet_client_iterator, CLIENT_ASYNCITERATOR),\n 1163:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"MinnetClient\", JS_PROP_CONFIGURABLE),\n 1164  };\n 1165  \n\n~/Projects/plot-cv/quickjs/qjs-net/src/minnet-websocket.c:\n  493      JS_CGETSET_MAGIC_FLAGS_DEF(\"readyState\", minnet_ws_get, 0, WEBSOCKET_READYSTATE, JS_PROP_ENUMERABLE),\n  494      JS_CGETSET_MAGIC_FLAGS_DEF(\"serial\", minnet_ws_get, 0, WEBSOCKET_SERIAL, JS_PROP_ENUMERABLE),\n  495:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"MinnetWebsocket\", JS_PROP_CONFIGURABLE),\n  496      JS_PROP_INT32_DEF(\"CONNECTING\", 0, JS_PROP_CONFIGURABLE),\n  497      JS_PROP_INT32_DEF(\"OPEN\", 1, JS_PROP_CONFIGURABLE),\n\n~/Projects/plot-cv/quickjs/qjs-net/src/minnet-ringbuffer.c:\n  453      JS_CGETSET_MAGIC_FLAGS_DEF(\"oldestTail\", minnet_ringbuffer_get, minnet_ringbuffer_set, RINGBUFFER_OLDEST_TAIL, JS_PROP_ENUMERABLE),\n  454      JS_CGETSET_MAGIC_FLAGS_DEF(\"linearInsertRange\", minnet_ringbuffer_get, 0, RINGBUFFER_INSERTRANGE, 0),\n  455:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"MinnetRingbuffer\", JS_PROP_CONFIGURABLE),\n  456  };\n  457  \n\n~/Projects/plot-cv/quickjs/qjs-net/src/minnet-generator.c:\n  253  static const JSCFunctionListEntry minnet_generator_iter[] = {\n  254      JS_CFUNC_DEF(\"[Symbol.asyncIterator]\", 0, (JSCFunction*)&JS_DupValue),\n  255:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"MinnetGeneratorIterator\", JS_PROP_CONFIGURABLE),\n  256  };\n  257  \n  ...\n  272      JS_CGETSET_MAGIC_DEF(\"chunkSize\", minnet_generator_get, 0, GENERATOR_CHUNK_SIZE),\n  273      JS_CFUNC_MAGIC_DEF(\"[Symbol.asyncIterator]\", 0, minnet_generator_method, GENERATOR_ITERATOR),\n  274:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"MinnetGenerator\", JS_PROP_CONFIGURABLE),\n  275  };\n  276  \n\n~/Projects/plot-cv/quickjs/qjs-net/src/minnet-formparser.c:\n  366      JS_CGETSET_MAGIC_DEF(\"onclose\", minnet_formparser_get, minnet_formparser_set, FORM_PARSER_ON_CLOSE),\n  367      JS_CGETSET_MAGIC_DEF(\"onfinalize\", minnet_formparser_get, minnet_formparser_set, FORM_PARSER_ON_FINALIZE),\n  368:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"MinnetFormParser\", JS_PROP_CONFIGURABLE),\n  369  };\n  370  \n\n~/Projects/plot-cv/quickjs/qjs-net/src/minnet-asynciterator.c:\n  102      JS_CFUNC_MAGIC_DEF(\"push\", 1, minnet_asynciterator_method, ASYNCITERATOR_PUSH),\n  103      JS_CFUNC_MAGIC_DEF(\"stop\", 0, minnet_asynciterator_method, ASYNCITERATOR_STOP),\n  104:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"AsyncIterator\", JS_PROP_CONFIGURABLE),\n  105  };\n  106  \n\n~/Projects/plot-cv/quickjs/qjs-net/src/minnet-url.c:\n  364      JS_CFUNC_MAGIC_DEF(\"toObject\", 0, minnet_url_method, URL_TO_OBJECT),\n  365      JS_CFUNC_DEF(\"inspect\", 0, minnet_url_inspect),\n  366:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"MinnetURL\", JS_PROP_CONFIGURABLE),\n  367  };\n  368  \n\n~/Projects/plot-cv/quickjs/qjs-net/src/minnet-server.c:\n  879      JS_CGETSET_MAGIC_DEF(\"onrequest\", minnet_server_get, minnet_server_set, SERVER_ONREQUEST),\n  880      JS_CGETSET_MAGIC_FLAGS_DEF(\"listening\", minnet_server_get, 0, SERVER_LISTENING, JS_PROP_ENUMERABLE),\n  881:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"MinnetServer\", JS_PROP_CONFIGURABLE),\n  882  };\n  883  \n\n~/Projects/plot-cv/quickjs/qjs-net/src/minnet-request.c:\n  395      JS_CFUNC_DEF(\"get\", 1, minnet_request_getheader),\n  396      JS_CFUNC_DEF(\"clone\", 0, minnet_request_clone),\n  397:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"MinnetRequest\", JS_PROP_CONFIGURABLE),\n  398  };\n  399  \n\n~/Projects/plot-cv/quickjs/qjs-net/src/minnet-headers.c:\n  246      JS_CGETSET_MAGIC_DEF(\"buffer\", minnet_headers_get, 0, HEADERS_BUFFER),\n  247      JS_CFUNC_DEF(\"inspect\", 0, minnet_headers_inspect),\n  248:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"MinnetHeaders\", JS_PROP_CONFIGURABLE),\n  249  };\n  250  \n\n~/Projects/plot-cv/quickjs/qjs-net/src/minnet-response.c:\n  465      JS_CGETSET_MAGIC_DEF(\"type\", minnet_response_get, 0, RESPONSE_TYPE),\n  466      JS_CGETSET_MAGIC_FLAGS_DEF(\"url\", minnet_response_get, minnet_response_set, RESPONSE_URL, JS_PROP_ENUMERABLE),\n  467:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"MinnetResponse\", JS_PROP_CONFIGURABLE),\n  468  };\n  469  \n\n~/Projects/plot-cv/quickjs/qjs-net/src/minnet-hash.c:\n  383      JS_CGETSET_MAGIC_FLAGS_DEF(\"hmac\", minnet_hash_get, 0, HASH_HMAC, 0),\n  384      JS_CGETSET_MAGIC_FLAGS_DEF(\"finalized\", minnet_hash_get, 0, HASH_FINALIZED, 0),\n  385:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"MinnetHash\", JS_PROP_CONFIGURABLE),\n  386      JS_PROP_INT32_DEF(\"TYPE_MD5\", LWS_GENHASH_TYPE_MD5, 0),\n  387      JS_PROP_INT32_DEF(\"TYPE_SHA1\", LWS_GENHASH_TYPE_SHA1, 0),\n\n~/Projects/plot-cv/quickjs/qjs-glfw/workarea.c:\n  146      JS_CGETSET_ENUMERABLE_MAGIC_DEF(\"size\", glfw_workarea_get, glfw_workarea_set, 1),\n  147      JS_CFUNC_DEF(\"[Symbol.iterator]\", 0, glfw_workarea_iterator),\n  148:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"GLFWworkarea\", JS_PROP_CONFIGURABLE),\n  149  };\n  150  \n\n~/Projects/plot-cv/quickjs/qjs-glfw/gamma_ramp.c:\n  119      JS_CGETSET_MAGIC_DEF(\"blue\", glfw_gamma_ramp_array, NULL, GAMMA_BLUE),\n  120      JS_CGETSET_ENUMERABLE_DEF(\"size\", glfw_gamma_ramp_size, NULL),\n  121:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"GLFWgammaramp\", JS_PROP_CONFIGURABLE),\n  122  };\n  123  \n\n~/Projects/plot-cv/quickjs/qjs-glfw/position.c:\n  113      JS_CGETSET_ENUMERABLE_MAGIC_DEF(\"y\", glfw_position_get, glfw_position_set, 1),\n  114      JS_CFUNC_DEF(\"[Symbol.iterator]\", 0, glfw_position_iterator),\n  115:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"GLFWposition\", JS_PROP_CONFIGURABLE),\n  116  };\n  117  \n\n~/Projects/plot-cv/quickjs/qjs-glfw/scale.c:\n  119      JS_CGETSET_ENUMERABLE_MAGIC_DEF(\"y\", glfw_scale_get, glfw_scale_set, 1),\n  120      JS_CFUNC_DEF(\"[Symbol.iterator]\", 0, glfw_scale_iterator),\n  121:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"GLFWscale\", JS_PROP_CONFIGURABLE),\n  122  };\n  123  \n\n~/Projects/plot-cv/quickjs/qjs-glfw/window.c:\n 1012      JS_CFUNC_MAGIC_DEF(\"getKey\", 1, glfw_window_functions, GET_KEY),\n 1013      JS_CFUNC_MAGIC_DEF(\"destroy\", 0, glfw_window_functions, DESTROY_WINDOW),\n 1014:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"GLFWwindow\", JS_PROP_CONFIGURABLE),\n 1015  };\n 1016  \n\n~/Projects/plot-cv/quickjs/qjs-glfw/image.c:\n  240      JS_CGETSET_ENUMERABLE_MAGIC_DEF(\"width\", glfw_image_get, NULL, IMAGE_WIDTH),\n  241      JS_CGETSET_ENUMERABLE_MAGIC_DEF(\"height\", glfw_image_get, NULL, IMAGE_HEIGHT),\n  242:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"GLFWimage\", JS_PROP_CONFIGURABLE),\n  243  };\n  244  \n\n~/Projects/plot-cv/quickjs/qjs-glfw/monitor.c:\n  229      JS_CGETSET_DEF(\"gamma\", glfw_monitor_get_gamma, glfw_monitor_set_gamma),\n  230      JS_CGETSET_DEF(\"userPointer\", glfw_monitor_get_ptr, glfw_monitor_set_ptr),\n  231:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"GLFWmonitor\", JS_PROP_CONFIGURABLE),\n  232  };\n  233  \n\n~/Projects/plot-cv/quickjs/qjs-glfw/size.c:\n  125      JS_CGETSET_ENUMERABLE_MAGIC_DEF(\"height\", glfw_size_get, glfw_size_set, 1),\n  126      JS_CFUNC_DEF(\"[Symbol.iterator]\", 0, glfw_size_iterator),\n  127:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"GLFWsize\", JS_PROP_CONFIGURABLE),\n  128  };\n  129  \n\n~/Projects/plot-cv/quickjs/qjs-glfw/video_mode.c:\n   67      JS_CGETSET_MAGIC_DEF(\"blueBits\", glfw_video_mode_get, glfw_video_mode_set, 4),\n   68      JS_CGETSET_ENUMERABLE_MAGIC_DEF(\"refreshRate\", glfw_video_mode_get, glfw_video_mode_set, 5),\n   69:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"GLFWvidmode\", JS_PROP_CONFIGURABLE),\n   70  };\n   71  \n\n~/Projects/plot-cv/quickjs/qjs-modules/quickjs-pointer.c:\n  443      JS_CGETSET_MAGIC_DEF(\"path\", js_pointer_get, js_pointer_set, PROP_PATH),\n  444      JS_CGETSET_MAGIC_DEF(\"atoms\", js_pointer_get, 0, PROP_ATOMS),\n  445:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Pointer\", JS_PROP_CONFIGURABLE),\n  446  };\n  447  \n\n~/Projects/plot-cv/quickjs/qjs-modules/quickjs-deep.c:\n  703      JS_ITERATOR_NEXT_DEF(\"next\", 0, js_deep_iterator_next, 0),\n  704      JS_CFUNC_DEF(\"[Symbol.iterator]\", 0, js_deep_iterator_iterator),\n  705:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Deep Iterator\", JS_PROP_CONFIGURABLE),\n  706  };\n  707  \n\n~/Projects/plot-cv/quickjs/qjs-modules/quickjs-queue.c:\n  258      JS_CGETSET_MAGIC_DEF(\"chunks\", js_queue_get, 0, QUEUE_CHUNKS),\n  259      JS_CFUNC_DEF(\"[Symbol.iterator]\", 0, js_queue_iterator),\n  260:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Queue\", JS_PROP_CONFIGURABLE),\n  261  };\n  262  \n  ...\n  286  static const JSCFunctionListEntry js_queue_iterator_funcs[] = {\n  287      JS_ITERATOR_NEXT_DEF(\"next\", 0, js_queue_iterator_next, 0),\n  288:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"QueueIterator\", JS_PROP_CONFIGURABLE),\n  289  };\n  290  \n\n~/Projects/plot-cv/quickjs/qjs-modules/quickjs-location.c:\n  423      JS_CFUNC_DEF(\"clone\", 0, js_location_clone),\n  424      JS_CFUNC_MAGIC_DEF(\"toString\", 0, js_location_methods, LOCATION_TOSTRING),\n  425:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Location\", JS_PROP_CONFIGURABLE),\n  426  };\n  427  \n\n~/Projects/plot-cv/quickjs/qjs-modules/quickjs-list.c:\n 1261      JS_ALIAS_DEF(\"[Symbol.iterator]\", \"values\"),\n 1262      JS_CGETSET_MAGIC_DEF(\"size\", js_list_get, 0, PROP_LENGTH),\n 1263:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"List\", JS_PROP_CONFIGURABLE),\n 1264  };\n 1265  \n ....\n 1276      JS_CFUNC_DEF(\"next\", 0, js_list_iterator_fn),\n 1277      JS_CFUNC_DEF(\"[Symbol.iterator]\", 0, (void*)&JS_DupValue),\n 1278:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"ListIterator\", JS_PROP_CONFIGURABLE),\n 1279  };\n 1280  \n\n~/Projects/plot-cv/quickjs/qjs-modules/quickjs-archive.c:\n  910      JS_PROP_INT32_DEF(\"READ\", 0, JS_PROP_CONFIGURABLE),\n  911      JS_PROP_INT32_DEF(\"WRITE\", 1, JS_PROP_CONFIGURABLE),\n  912:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Archive\", JS_PROP_CONFIGURABLE),\n  913  };\n  914  \n  915  static const JSCFunctionListEntry js_archive_iterator_funcs[] = {\n  916      JS_ITERATOR_NEXT_DEF(\"next\", 0, js_archive_iterator_next, 0),\n  917:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"ArchiveIterator\", JS_PROP_CONFIGURABLE),\n  918  };\n  919  \n  ...\n 1900      JS_CGETSET_MAGIC_DEF(\"isMetadataEncrypted\", js_archiveentry_get, js_archiveentry_set, ENTRY_ISMETADATAENCRYPTED),\n 1901      JS_CGETSET_MAGIC_DEF(\"isEncrypted\", js_archiveentry_get, js_archiveentry_set, ENTRY_ISENCRYPTED),\n 1902:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"ArchiveEntry\", JS_PROP_CONFIGURABLE),\n 1903  };\n 1904  \n ....\n 1967      JS_CFUNC_MAGIC_DEF(\"include\", 1, js_archivematch_functions, MATCH_INCLUDE),\n 1968      JS_CFUNC_MAGIC_DEF(\"exclude\", 1, js_archivematch_functions, MATCH_EXCLUDE),\n 1969:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"ArchiveMatch\", JS_PROP_CONFIGURABLE),\n 1970  };\n 1971  \n\n~/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.c:\n  900      JS_CFUNC_MAGIC_DEF(\"releaseLock\", 0, js_reader_method, READER_RELEASE_LOCK),\n  901      JS_CGETSET_MAGIC_DEF(\"closed\", js_reader_get, 0, READER_PROP_CLOSED),\n  902:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"ReadableStreamDefaultReader\", JS_PROP_CONFIGURABLE),\n  903  };\n  904  \n  ...\n 1177      JS_CGETSET_MAGIC_FLAGS_DEF(\"closed\", js_readable_get, 0, READABLE_PROP_CLOSED, JS_PROP_ENUMERABLE),\n 1178      JS_CGETSET_MAGIC_FLAGS_DEF(\"locked\", js_readable_get, 0, READABLE_PROP_LOCKED, JS_PROP_ENUMERABLE),\n 1179:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Readable\", JS_PROP_CONFIGURABLE),\n 1180  };\n 1181  \n ....\n 1185      JS_CFUNC_MAGIC_DEF(\"error\", 1, js_readable_controller, READABLE_ERROR),\n 1186      JS_CGETSET_DEF(\"desiredSize\", js_readable_desired, 0),\n 1187:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"ReadableStreamDefaultController\", JS_PROP_CONFIGURABLE),\n 1188  };\n 1189  \n ....\n 1686      JS_CGETSET_MAGIC_DEF(\"closed\", js_writer_get, 0, WRITER_PROP_CLOSED),\n 1687      JS_CGETSET_MAGIC_DEF(\"ready\", js_writer_get, 0, WRITER_PROP_READY),\n 1688:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"WritableStreamDefaultWriter\", JS_PROP_CONFIGURABLE),\n 1689  };\n 1690  \n ....\n 1947      JS_CFUNC_MAGIC_DEF(\"getWriter\", 0, js_writable_method, WRITABLE_GET_WRITER),\n 1948      JS_CGETSET_MAGIC_FLAGS_DEF(\"locked\", js_writable_get, 0, WRITABLE_PROP_LOCKED, JS_PROP_ENUMERABLE),\n 1949:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"WritableStream\", JS_PROP_CONFIGURABLE),\n 1950      JS_CFUNC_DEF(\"[Symbol.iterator]\", 0, js_writable_iterator),\n 1951  };\n ....\n 1953  const JSCFunctionListEntry js_writable_controller_funcs[] = {\n 1954      JS_CFUNC_MAGIC_DEF(\"error\", 0, js_writable_controller, WRITABLE_ERROR),\n 1955:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"WritableStreamDefaultController\", JS_PROP_CONFIGURABLE),\n 1956  };\n 1957  \n ....\n 2217      JS_CGETSET_MAGIC_FLAGS_DEF(\"readable\", js_transform_get, 0, TRANSFORM_PROP_READABLE, JS_PROP_ENUMERABLE),\n 2218      JS_CGETSET_MAGIC_FLAGS_DEF(\"writable\", js_transform_get, 0, TRANSFORM_PROP_WRITABLE, JS_PROP_ENUMERABLE),\n 2219:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"TransformStream\", JS_PROP_CONFIGURABLE),\n 2220  };\n 2221  \n ....\n 2225      JS_CFUNC_MAGIC_DEF(\"error\", 1, js_transform_controller, TRANSFORM_ERROR),\n 2226      JS_CGETSET_DEF(\"desiredSize\", js_transform_desired, 0),\n 2227:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"TransformStreamDefaultController\", JS_PROP_CONFIGURABLE),\n 2228  };\n 2229  \n\n~/Projects/plot-cv/quickjs/qjs-modules/quickjs-serial.c:\n  596      JS_CGETSET_MAGIC_DEF(\"inputWaiting\", js_serialport_get, 0, SERIALPORT_INPUTWAITING),\n  597      JS_CGETSET_MAGIC_DEF(\"outputWaiting\", js_serialport_get, 0, SERIALPORT_OUTPUTWAITING),\n  598:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"SerialPort\", JS_PROP_CONFIGURABLE),\n  599  };\n  600  \n  ...\n  620      JS_PROP_STRING_DEF(\"name\", \"SerialError\", JS_PROP_WRITABLE | JS_PROP_CONFIGURABLE),\n  621      JS_PROP_INT32_DEF(\"type\", 0, JS_PROP_WRITABLE | JS_PROP_CONFIGURABLE),\n  622:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"SerialError\", JS_PROP_CONFIGURABLE),\n  623  };\n  624  \n\n~/Projects/plot-cv/quickjs/qjs-modules/quickjs-gpio.c:\n  185      JS_CFUNC_MAGIC_DEF(\"getPin\", 1, js_gpio_functions, GPIO_METHOD_GET_PIN),\n  186      JS_CGETSET_MAGIC_DEF(\"buffer\", js_gpio_getter, 0, GPIO_BUFFER),\n  187:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"GPIO\", JS_PROP_CONFIGURABLE),\n  188  };\n  189  \n\n~/Projects/plot-cv/quickjs/qjs-modules/quickjs-blob.c:\n  293      JS_CGETSET_MAGIC_DEF(\"size\", js_blob_get, 0, BLOB_SIZE),\n  294      JS_CGETSET_MAGIC_DEF(\"type\", js_blob_get, 0, BLOB_TYPE),\n  295:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Blob\", JS_PROP_CONFIGURABLE),\n  296  };\n  297  \n\n~/Projects/plot-cv/quickjs/qjs-modules/quickjs-directory.c:\n  282      JS_CFUNC_MAGIC_DEF(\"throw\", 1, js_directory_method, DIRECTORY_THROW),\n  283      JS_CFUNC_MAGIC_DEF(\"[Symbol.iterator]\", 0, js_directory_method, DIRECTORY_ITERATOR),\n  284:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Directory\", JS_PROP_CONFIGURABLE),\n  285  };\n  286  \n\n~/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c:\n  126    vector_init(&opts->hide_keys, ctx);\n  127  \n  128:   opts->class_key = (PropertyKey){0, JS_DupAtom(ctx, js_atom_from(ctx, \"[Symbol.toStringTag]\"))};\n  129    opts->class_key.name = JS_AtomToCString(ctx, opts->class_key.atom);\n  130  \n\n~/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.c:\n  518      JS_CFUNC_MAGIC_DEF(\"clone\", 0, js_sockaddr_method, SOCKADDR_CLONE),\n  519      JS_CFUNC_MAGIC_DEF(\"toString\", 0, js_sockaddr_method, SOCKADDR_TOSTRING),\n  520:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"SockAddr\", 0),\n  521  };\n  522  \n  ...\n 1899      JS_CFUNC_DEF(\"valueOf\", 0, js_socket_valueof),\n 1900      JS_ALIAS_DEF(\"[Symbol.toPrimitive]\", \"valueOf\"),\n 1901:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Socket\", JS_PROP_CONFIGURABLE),\n 1902  };\n 1903  \n ....\n 1931      JS_CFUNC_DEF(\"valueOf\", 0, js_socket_valueof),\n 1932      JS_ALIAS_DEF(\"[Symbol.toPrimitive]\", \"valueOf\"),\n 1933:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"AsyncSocket\", JS_PROP_CONFIGURABLE),\n 1934  };\n 1935  \n\n~/Projects/plot-cv/quickjs/qjs-modules/quickjs-syscallerror.c:\n  303      JS_CFUNC_MAGIC_DEF(\"toString\", 0, js_syscallerror_method, SYSCALLERROR_TOSTRING),\n  304      JS_ALIAS_DEF(\"[Symbol.toPrimitive]\", \"toString\"),\n  305:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"SyscallError\", JS_PROP_CONFIGURABLE),\n  306  };\n  307  \n\n~/Projects/plot-cv/quickjs/qjs-modules/quickjs-repeater.c:\n  494      JS_CFUNC_DEF(\"next\", 0, js_repeater_next),\n  495      JS_CGETSET_MAGIC_DEF(\"state\", js_repeater_get, 0, PROP_STATE),\n  496:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Repeater\", JS_PROP_CONFIGURABLE),\n  497      JS_CFUNC_DEF(\"[Symbol.asyncIterator]\", 0, js_repeater_iterator),\n  498  };\n\n~/Projects/plot-cv/quickjs/qjs-modules/quickjs-pgsql.c:\n 1245      JS_CFUNC_DEF(\"insertQuery\", 2, js_pgconn_insert_query),\n 1246      // JS_CFUNC_MAGIC_DEF(\"escapeString\", 1, js_pgconn_methods, METHOD_ESCAPE_STRING),\n 1247:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"PGconn\", JS_PROP_CONFIGURABLE),\n 1248  };\n 1249  \n ....\n 1320      JS_PROP_STRING_DEF(\"name\", \"PGerror\", JS_PROP_WRITABLE | JS_PROP_CONFIGURABLE),\n 1321      JS_PROP_INT32_DEF(\"type\", 0, JS_PROP_WRITABLE | JS_PROP_CONFIGURABLE),\n 1322:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"PGerror\", JS_PROP_CONFIGURABLE),\n 1323  };\n 1324  \n ....\n 1792      JS_CFUNC_MAGIC_DEF(\"fetchAssoc\", 0, js_pgresult_functions, METHOD_FETCH_ASSOC),\n 1793      JS_CFUNC_DEF(\"[Symbol.iterator]\", 0, js_pgresult_iterator),\n 1794:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"PGresult\", JS_PROP_CONFIGURABLE),\n 1795  };\n 1796  \n\n~/Projects/plot-cv/quickjs/qjs-modules/quickjs-predicate.c:\n  907      JS_CFUNC_MAGIC_DEF(\"values\", 0, js_predicate_method, METHOD_VALUES),\n  908      JS_CGETSET_MAGIC_DEF(\"length\", js_predicate_get, 0, PROP_ARGC),\n  909:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Predicate\", JS_PROP_CONFIGURABLE),\n  910  };\n  911  \n\n~/Projects/plot-cv/quickjs/qjs-modules/quickjs-mysql.c:\n 1209      JS_CFUNC_MAGIC_DEF(\"setOption\", 2, js_mysql_methods, METHOD_SET_OPTION),\n 1210      JS_PROP_INT32_DEF(\"resultType\", 0, JS_PROP_C_W_E),\n 1211:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"MySQL\", JS_PROP_CONFIGURABLE),\n 1212  };\n 1213  \n ....\n 1345      JS_PROP_STRING_DEF(\"name\", \"MySQLError\", JS_PROP_WRITABLE | JS_PROP_CONFIGURABLE),\n 1346      JS_PROP_INT32_DEF(\"type\", 0, JS_PROP_WRITABLE | JS_PROP_CONFIGURABLE),\n 1347:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"MySQLError\", JS_PROP_CONFIGURABLE),\n 1348  };\n 1349  \n ....\n 1794      JS_CFUNC_MAGIC_DEF(\"[Symbol.iterator]\", 0, js_mysqlresult_iterator, METHOD_ITERATOR),\n 1795      JS_CFUNC_MAGIC_DEF(\"[Symbol.asyncIterator]\", 0, js_mysqlresult_iterator, METHOD_ASYNC_ITERATOR),\n 1796:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"MySQLResult\", JS_PROP_CONFIGURABLE),\n 1797  };\n 1798  \n\n~/Projects/plot-cv/quickjs/qjs-modules/quickjs-tree-walker.c:\n  563      JS_CGETSET_MAGIC_DEF(\"flags\", js_tree_walker_get, js_tree_walker_set, PROP_FLAGS),\n  564      JS_CFUNC_DEF(\"toString\", 0, js_tree_walker_tostring),\n  565:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"TreeWalker\", JS_PROP_CONFIGURABLE),\n  566  };\n  567  \n  ...\n  589  static const JSCFunctionListEntry js_tree_iterator_proto_funcs[] = {\n  590      JS_ITERATOR_NEXT_DEF(\"next\", 0, js_tree_iterator_next, 0),\n  591:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"TreeIterator\", JS_PROP_CONFIGURABLE),\n  592      JS_CFUNC_DEF(\"[Symbol.iterator]\", 0, js_tree_walker_iterator),\n  593  };\n\n~/Projects/plot-cv/quickjs/qjs-modules/quickjs-child-process.c:\n  375      JS_CFUNC_DEF(\"wait\", 0, js_child_process_wait),\n  376      JS_CFUNC_MAGIC_DEF(\"kill\", 0, js_child_process_kill, 0),\n  377:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"ChildProcess\", 0),\n  378  };\n  379  \n\n~/Projects/plot-cv/quickjs/qjs-modules/quickjs-textcode.c:\n  347      JS_CGETSET_MAGIC_DEF(\"endian\", js_decoder_get, 0, DECODER_ENDIANNESS),\n  348      JS_CGETSET_MAGIC_DEF(\"buffered\", js_decoder_get, 0, DECODER_BUFFERED),\n  349:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"TextDecoder\", JS_PROP_CONFIGURABLE),\n  350  };\n  351  \n  ...\n  616      JS_CGETSET_MAGIC_DEF(\"endian\", js_encoder_get, 0, ENCODER_ENDIANNESS),\n  617      JS_CGETSET_MAGIC_DEF(\"buffered\", js_encoder_get, 0, ENCODER_BUFFERED),\n  618:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"TextEncoder\", JS_PROP_CONFIGURABLE),\n  619  };\n  620  \n\n~/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js:\n  295      close: () => {},\n  296      seek: (whence, offset) => os.seek(fd, whence, offset),\n  297:     [Symbol.toStringTag]: `FileWriter< ${fd} >`,\n  298      inspect() {\n  299:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  300      }\n  301    });\n  ...\n  316      write: fn,\n  317      close: () => {},\n  318:     [Symbol.toStringTag]: `ArrayWriter`,\n  319      inspect() {\n  320:       return inspect({ arr }) ?? this[Symbol.toStringTag];\n  321      }\n  322    });\n  ...\n  332      close: () => {},\n  333      seek: () => {},\n  334:     [Symbol.toStringTag]: `DummyWriter< ${name} >`,\n  335      inspect() {\n  336:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  337      }\n  338    });\n  ...\n  639  \n  640  define(Import.prototype, {\n  641:   [Symbol.toStringTag]: 'Import',\n  642    ids(pred = local => true) {\n  643      return ImportIds(this.tokens.slice())\n  ...\n 1346  \n 1347  define(NumericRange.prototype, {\n 1348:   [Symbol.toStringTag]: 'NumericRange',\n 1349    [inspectSymbol](depth, opts) {\n 1350      const [start, end] = this;\n ....\n 1404            return '';\n 1405          },\n 1406:         [Symbol.toStringTag]: 'FileMap(empty)'\n 1407        };\n 1408        return Object.setPrototypeOf(obj, FileMap.prototype);\n ....\n 1746  }\n 1747  \n 1748: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1749  \n 1750  function BufferFile(file, buf) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.c:\n  290      JS_ALIAS_DEF(\"length\", \"charLength\"),\n  291      JS_ALIAS_DEF(\"range\", \"charRange\"),\n  292:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Token\", JS_PROP_CONFIGURABLE),\n  293  };\n  294  \n  ...\n 1468      JS_CFUNC_MAGIC_DEF(\"[Symbol.iterator]\", 0, js_lexer_iterator, YIELD_ID | YIELD_DONE_VALUE),\n 1469      JS_CFUNC_MAGIC_DEF(\"values\", 0, js_lexer_iterator, YIELD_OBJ | YIELD_DONE_VALUE),\n 1470:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Lexer\", JS_PROP_CONFIGURABLE),\n 1471  };\n 1472  \n\n~/Projects/plot-cv/quickjs/qjs-modules/quickjs-magic.c:\n  335      JS_CFUNC_MAGIC_DEF(\"setparam\", 2, js_magic_method, METHOD_SETPARAM),\n  336      JS_CGETSET_MAGIC_DEF(\"version\", js_magic_get, 0, METHOD_VERSION),\n  337:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Magic\", JS_PROP_CONFIGURABLE),\n  338  };\n  339  \n\n~/Projects/plot-cv/quickjs/qjs-modules/tmp/resolve-imports.js:\n  250      },\n  251      seek: (whence, offset) => os.seek(fd2, whence, offset),\n  252:     [Symbol.toStringTag]: `FileWriter< ${fd2} >`,\n  253      inspect() {\n  254:       return inspect({ fd: fd2 }) ?? this[Symbol.toStringTag];\n  255      }\n  256    });\n  ...\n  267      close: () => {\n  268      },\n  269:     [Symbol.toStringTag]: `ArrayWriter`,\n  270      inspect() {\n  271:       return inspect({ arr }) ?? this[Symbol.toStringTag];\n  272      }\n  273    });\n  ...\n  284      seek: () => {\n  285      },\n  286:     [Symbol.toStringTag]: `DummyWriter< ${name} >`,\n  287      inspect() {\n  288:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  289      }\n  290    });\n  ...\n  539  }\n  540  define(Import.prototype, {\n  541:   [Symbol.toStringTag]: \"Import\",\n  542    ids(pred = (local) => true) {\n  543      return ImportIds(this.tokens.slice()).map(({ lexeme }) => lexeme).filter(pred);\n  ...\n 1054  };\n 1055  define(NumericRange.prototype, {\n 1056:   [Symbol.toStringTag]: \"NumericRange\",\n 1057    [inspectSymbol](depth, opts) {\n 1058      const [start, end] = this;\n ....\n 1105            return \"\";\n 1106          },\n 1107:         [Symbol.toStringTag]: \"FileMap(empty)\"\n 1108        };\n 1109        return Object.setPrototypeOf(obj, _FileMap.prototype);\n ....\n 1388    }\n 1389  };\n 1390: FileMap.prototype[Symbol.toStringTag] = \"FileMap\";\n 1391  function BufferFile(file2, buf) {\n 1392    file2 = path.resolve(file2);\n\n~/Projects/plot-cv/quickjs/qjs-modules/streams/demos/transforms/text-encode-transform.js:\n  146    function exportAs(name, value) {\n  147      // Make it stringify as [object <name>] rather than [object Object].\n  148:     value.prototype[Symbol.toStringTag] = name;\n  149      Object.defineProperty(self, name,\n  150                            {\n\n~/Projects/plot-cv/quickjs/qjs-modules/tests/test_dom.js:\n  173              Recurse(attr, fn, [...stack, node]);\n  174              //console.log('Attr', attr, Node.path(attr));\n  175:           } //Recurse({ name: attr, value:attributes[attr],[Symbol.toStringTag]: 'Attr', __proto__: Attr.prototype }, fn, [...stack, node]);\n  176          }\n  177        }\n\n~/Projects/plot-cv/quickjs/qjs-modules/tests/test_lexer.js:\n  209        compact: 1,\n  210        stringBreakNewline: false,\n  211:       hideKeys: [Symbol.toStringTag]\n  212      }\n  213    });\n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/inotify.js:\n   71                return this.watch(event);\n   72              },\n   73:             [Symbol.toStringTag]: 'InotifyEvent'\n   74            });\n   75  */\n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/socklen_t.js:\n   16    }\n   17  \n   18:   get [Symbol.toStringTag]() {\n   19      return 'socklen_t';\n   20    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/console.js:\n   51      numberBase: 10,\n   52      classKey: Symbol.toStringTag,\n   53:     hideKeys: [Symbol.toStringTag]\n   54    };\n   55  \n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/io.js:\n   51  }\n   52  \n   53: define(HandlerEntry.prototype, { [Symbol.toStringTag]: 'HandlerEntry' });\n   54  \n   55  export class DescriptorMap extends Array {\n   ..\n   90  }\n   91  \n   92: define(DescriptorMap.prototype, { [Symbol.toStringTag]: 'DescriptorMap' });\n   93  \n   94  export class Multiplexer {\n   ..\n  154  }\n  155  \n  156: define(Multiplexer.prototype, { [Symbol.toStringTag]: 'Multiplexer' });\n  157  \n  158  const io = new Multiplexer();\n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/misc.js:\n  304      .split(/,\\s*/g);\n  305  \n  306: export const getClassName = obj => (isObject(obj) ? ('constructor' in obj && obj.constructor.name) || obj[Symbol.toStringTag] : undefined);\n  307  \n  308  export function bits(arrayBuffer, start, end) {\n  ...\n  331          if('constructor' in value) name = value.constructor.name ?? (value.constructor + '').replace(/^\\s*function\\s*/g, '').replace(/\\(.*/g, '');\n  332          name ??= getTypeName(Object.getPrototypeOf(value));\n  333:         name ??= value[Symbol.toStringTag];\n  334          return name;\n  335        }\n  ...\n  343  \n  344  export function isArrayBuffer(obj) {\n  345:   return obj instanceof ArrayBuffer || obj[Symbol.toStringTag] == 'ArrayBuffer';\n  346  }\n  347  \n  348  export function isBigDecimal(num) {\n  349:   return typeof num == 'bigdecimal' || num[Symbol.toStringTag] == 'BigDecimal';\n  350  }\n  351  \n  352  export function isBigFloat(num) {\n  353:   return typeof num == 'bigfloat' || num[Symbol.toStringTag] == 'BigFloat';\n  354  }\n  355  \n  356  export function isBigInt(num) {\n  357:   return typeof num == 'bigint' || num[Symbol.toStringTag] == 'isBigInt';\n  358  }\n  359  \n  ...\n  375  \n  376  export function isError(value) {\n  377:   return value instanceof Error || value[Symbol.toStringTag].endsWith('Error');\n  378  }\n  379  \n  ...\n  434  \n  435  export function isSymbol(value) {\n  436:   return typeof value == 'symbol' || value[Symbol.toStringTag] == 'Symbol';\n  437  }\n  438  \n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/require.js:\n   95  }\n   96  \n   97: define(Module.prototype, { [Symbol.toStringTag]: 'Module' });\n   98  \n   99  class CJSModule extends Module {\n  ...\n  137  }\n  138  \n  139: define(CJSModule.prototype, { [Symbol.toStringTag]: 'CJSModule' });\n  140  \n  141  class ESModule extends Module {\n  ...\n  170  }\n  171  \n  172: define(ESModule.prototype, { [Symbol.toStringTag]: 'ESModule' });\n  173  \n  174  function statPath(path) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/xpath.js:\n   12  }\n   13  \n   14: DereferenceError.prototype[Symbol.toStringTag] = 'DereferenceError';\n   15  \n   16  export class XPath {\n   ..\n  118      return;\n  119      `\\x1b[1;31m${this.constructor.name ?? className(this)}\\x1b[0m ` +\n  120:       inspect([...this].map(GetKey) ?? { __proto__: { [Symbol.toStringTag]: 'XPath' }, ...obj }, {\n  121          ...opts,\n  122          customInspect: true\n  ...\n  124    }\n  125  \n  126:   get [Symbol.toStringTag]() {\n  127      return 'XPath';\n  128    }\n  ...\n  131  }\n  132  \n  133: define(XPath.prototype, { [Symbol.toStringTag]: 'XPath' });\n  134  \n  135  export const ImmutableXPath = XPath;\n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/stack.js:\n   31  }\n   32  \n   33: Stack.prototype[Symbol.toStringTag] = 'Stack';\n   34  \n   35  Stack.prototype.toString = function() {\n   ..\n   46  Stack.prototype[inspectSymbol] = function(depth, options) {\n   47    return (\n   48:     `\\x1b[1;31m${this[Symbol.toStringTag]}\\x1b[0m ` +\n   49      inspect([...this], depth, {\n   50        ...options,\n   ..\n  216    }\n  217  \n  218:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  219      return 'StackFrame';\n  220    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/dom.js:\n  571  define(Node.prototype, Interface.prototype);\n  572  extend(Node.prototype, NODE_TYPES, { enumerable: false });\n  573: extend(Node.prototype, { [Symbol.toStringTag]: 'Node' }, { enumerable: false });\n  574  \n  575  function MakeCache(ctor, store = new WeakMap()) {\n  ...\n  652    NodeList.prototype,\n  653    {\n  654:     [Symbol.toStringTag]: 'NodeList',\n  655      *[Symbol.iterator]() {\n  656        const factory = Factory.for(this);\n  ...\n  701      constructor: NamedNodeMap,\n  702  \n  703:     [Symbol.toStringTag]: 'NamedNodeMap',\n  704  \n  705      get path() {\n  ...\n  994  }\n  995  \n  996: extend(Element.prototype, { [Symbol.toStringTag]: 'Element', nodeType: ELEMENT_NODE }, { enumerable: false });\n  997  \n  998  /*\n  ...\n 1167  }\n 1168  \n 1169: extend(Document.prototype, { [Symbol.toStringTag]: 'Document', nodeType: DOCUMENT_NODE }, { enumerable: false });\n 1170  \n 1171  export class Attr extends Node {\n ....\n 1227    {\n 1228      nodeType: ATTRIBUTE_NODE,\n 1229:     [Symbol.toStringTag]: 'Attr'\n 1230    },\n 1231    { enumerable: false }\n ....\n 1273  \n 1274    [inspectSymbol](depth, opts) {\n 1275:     return `\\x1b[1;31m${this[Symbol.toStringTag]}\\x1b[0m \\x1b[38;2;192;2550m${quote(this.data, \"'\")}\\x1b[0m`;\n 1276    }\n 1277  \n ....\n 1286      nodeType: TEXT_NODE,\n 1287      nodeName: '#text',\n 1288:     [Symbol.toStringTag]: 'Text'\n 1289    },\n 1290    { enumerable: false }\n ....\n 1333      nodeType: COMMENT_NODE,\n 1334      nodeName: '#comment',\n 1335:     [Symbol.toStringTag]: 'Comment'\n 1336    },\n 1337    { enumerable: false }\n ....\n 1436    TokenList.prototype,\n 1437    {\n 1438:     [Symbol.toStringTag]: 'TokenList'\n 1439    },\n 1440    { enumerable: false }\n ....\n 1594      constructor: CSSStyleDeclaration,\n 1595  \n 1596:     [Symbol.toStringTag]: 'CSSStyleDeclaration',\n 1597  \n 1598      get parentRule() {\n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/tty.js:\n   10  \n   11  define(ReadStream.prototype, {\n   12:   [Symbol.toStringTag]: 'ReadStream'\n   13  });\n   14  \n   ..\n   93      configurable: true\n   94    },\n   95:   [Symbol.toStringTag]: { value: 'WriteStream', configurable: true }\n   96  });\n   97  \n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/util.js:\n  182    },\n  183    isModuleNamespaceObject(v) {\n  184:     return isObject(v) && v[Symbol.toStringTag] == 'Module';\n  185    },\n  186    isConstructor(v) {\n  ...\n 1987  export function className(obj) {\n 1988    if(isObject(obj)) {\n 1989:     if(Symbol.toStringTag in obj) return obj[Symbol.toStringTag];\n 1990      if('constructor' in obj) return functionName(obj.constructor);\n 1991    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/db.js:\n   95  \n   96  define(Pool.prototype, {\n   97:   [Symbol.toStringTag]: 'Pool'\n   98  });\n   99  \n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/repl.js:\n 2084  \n 2085  Object.assign(REPL.prototype, {\n 2086:   [Symbol.toStringTag]: 'REPL',\n 2087    handleInput: REPL.prototype.evalAndPrint,\n 2088    directives: loadModule\n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/streams.js:\n  137    }\n  138  \n  139:   define(ByLineStream.prototype, { [Symbol.toStringTag]: 'ByLineStream' });\n  140  \n  141    return ByLineStream;\n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/fs.js:\n  135  }\n  136  \n  137: Stats.prototype[Symbol.toStringTag] = 'Stats';\n  138  \n  139  for(let prop in statsFields) Object.defineProperty(Stats.prototype, prop, { value: undefined, enumerable: false, writable: true, configurable: true });\n  ...\n  279  }\n  280  \n  281: FileHandle.prototype[Symbol.toStringTag] = 'FileHandle';\n  282  \n  283  delete FileHandle.prototype.constructor;\n  ...\n  877    }\n  878  \n  879:   [Symbol.toStringTag] = 'inotify_event';\n  880  }\n  881  \n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/parser.js:\n   22  }\n   23  \n   24: define(Rule.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'Rule' });\n   25  \n   26  export class Terminal extends Rule {\n   ..\n   45  }\n   46  \n   47: define(Terminal.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'Terminal' });\n   48  \n   49  export class ZeroOrMore extends Rule {\n   ..\n   63  }\n   64  \n   65: define(ZeroOrMore.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'ZeroOrMore' });\n   66  \n   67  export function make_operators_set(...op_list) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/events.js:\n   55  }\n   56  \n   57: EventEmitter.prototype[Symbol.toStringTag] = 'EventEmitter';\n   58  \n   59  const PRIVATE = Symbol('EventTarget');\n   ..\n   98  }\n   99  \n  100: EventTarget.prototype[Symbol.toStringTag] = 'EventTarget';\n  101  \n  102  const getMethods = obj =>\n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/vfs.js:\n  311            for(let chunk of q) written += ar.write(chunk);\n  312          },\n  313:         [Symbol.toStringTag]: 'WriteStream'\n  314        };\n  315      } else {\n  ...\n  329            error: () => ar.error != null,\n  330            close: () => ar.close(),\n  331:           [Symbol.toStringTag]: 'ReadStream'\n  332          };\n  333        }\n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/lexer/c.js:\n  118  globalThis.CLexer = CLexer;\n  119  \n  120: define(CLexer.prototype, { [Symbol.toStringTag]: 'CLexer' });\n  121  \n  122  export default CLexer;\n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/lexer/csv.js:\n   23    }\n   24  \n   25:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n   26      return \"CSVLexer\";\n   27    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/lexer/ecmascript.js:\n  129    }\n  130  \n  131:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  132      return \"ECMAScriptLexer\";\n  133    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/lexer/bnf.js:\n  194    }\n  195  \n  196:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  197      return \"BNFLexer\";\n  198    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/web-platform-tests-streams/wasm/jsapi/constructor/toStringTag.any.js:\n   37    });\n   38  \n   39:   assert_true(delete WebAssembly[Symbol.toStringTag]);\n   40    assert_equals(WebAssembly.toString(), \"[object Object]\");\n   41    assert_equals(Object.prototype.toString.call(WebAssembly), \"[object Object]\");\n\n~/Projects/plot-cv/quickjs/qjs-modules/web-platform-tests-streams/webidl/ecmascript-binding/class-string-interface.any.js:\n   56  // This test must be last.\n   57  test(() => {\n   58:   delete Blob.prototype[Symbol.toStringTag];\n   59  \n   60    assert_equals(Object.prototype.toString.call(Blob.prototype), \"[object Object]\", \"prototype\");\n\n~/Projects/plot-cv/quickjs/qjs-modules/web-platform-tests-streams/webidl/ecmascript-binding/observable-array-ownkeys.window.js:\n   22        \"Own properties whose key is an array index have been added.\");\n   23  \n   24:   observableArray[Symbol.toStringTag] = \"string_tag\";\n   25    observableArray[Symbol.toPrimitive] = \"primitive\";\n   26    assert_array_equals(\n\n~/Projects/plot-cv/quickjs/qjs-modules/web-platform-tests-streams/fetch/api/headers/headers-record.any.js:\n  271    var record = {\n  272      a: \"b\",\n  273:     [Symbol.toStringTag]: {\n  274        // Make sure the ToString conversion of the value happens\n  275        // after the ToString conversion of the key.\n  ...\n  309        toString: function() { addLogEntry(\"toString\", [this]); return \"b\"; }\n  310      },\n  311:     [Symbol.toStringTag]: {\n  312        toString: function () { addLogEntry(\"toString\", [this]); return \"nope\"; }\n  313      },\n\n~/Projects/plot-cv/quickjs/qjs-modules/web-platform-tests-streams/generic-sensor/resources/generic-sensor-helpers.js:\n  112  \n  113  function get_sensor_reading_properties(sensor) {\n  114:   const className = sensor[Symbol.toStringTag];\n  115    if ([\n  116          'Accelerometer', 'GravitySensor', 'Gyroscope',\n  ...\n  174  \n  175    // Note that this is not serialized by postMessage().\n  176:   sensorData[Symbol.toStringTag] = sensor[Symbol.toStringTag];\n  177  \n  178    return sensorData;\n\n~/Projects/plot-cv/quickjs/qjs-modules/web-platform-tests-streams/console/console-namespace-object-class-string.any.js:\n   37    });\n   38  \n   39:   assert_true(delete console[Symbol.toStringTag]);\n   40    assert_equals(console.toString(), \"[object Object]\");\n   41    assert_equals(Object.prototype.toString.call(console), \"[object Object]\");\n\n~/Projects/plot-cv/quickjs/qjs-modules/web-platform-tests-streams/WebCryptoAPI/util/helpers.js:\n  162      });\n  163      assert_equals(key.usages.length, usageCount, \"usages property is correct\");\n  164:     assert_equals(key[Symbol.toStringTag], 'CryptoKey', \"has the expected Symbol.toStringTag\");\n  165  }\n  166  \n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/bin/check-imports.js:\n  295      close: () => {},\n  296      seek: (whence, offset) => os.seek(fd, whence, offset),\n  297:     [Symbol.toStringTag]: `FileWriter< ${fd} >`,\n  298      inspect() {\n  299:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  300      }\n  301    });\n  ...\n  316      write: fn,\n  317      close: () => {},\n  318:     [Symbol.toStringTag]: `ArrayWriter`,\n  319      inspect() {\n  320:       return inspect({ arr }) ?? this[Symbol.toStringTag];\n  321      }\n  322    });\n  ...\n  332      close: () => {},\n  333      seek: () => {},\n  334:     [Symbol.toStringTag]: `DummyWriter< ${name} >`,\n  335      inspect() {\n  336:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  337      }\n  338    });\n  ...\n  639  \n  640  define(Import.prototype, {\n  641:   [Symbol.toStringTag]: 'Import',\n  642    ids(pred = local => true) {\n  643      return ImportIds(this.tokens.slice())\n  ...\n 1346  \n 1347  define(NumericRange.prototype, {\n 1348:   [Symbol.toStringTag]: 'NumericRange',\n 1349    [inspectSymbol](depth, opts) {\n 1350      const [start, end] = this;\n ....\n 1404            return '';\n 1405          },\n 1406:         [Symbol.toStringTag]: 'FileMap(empty)'\n 1407        };\n 1408        return Object.setPrototypeOf(obj, FileMap.prototype);\n ....\n 1746  }\n 1747  \n 1748: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1749  \n 1750  function BufferFile(file, buf) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/bin/resolve-imports.js:\n  295      close: () => {},\n  296      seek: (whence, offset) => os.seek(fd, whence, offset),\n  297:     [Symbol.toStringTag]: `FileWriter< ${fd} >`,\n  298      inspect() {\n  299:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  300      }\n  301    });\n  ...\n  316      write: fn,\n  317      close: () => {},\n  318:     [Symbol.toStringTag]: `ArrayWriter`,\n  319      inspect() {\n  320:       return inspect({ arr }) ?? this[Symbol.toStringTag];\n  321      }\n  322    });\n  ...\n  332      close: () => {},\n  333      seek: () => {},\n  334:     [Symbol.toStringTag]: `DummyWriter< ${name} >`,\n  335      inspect() {\n  336:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  337      }\n  338    });\n  ...\n  639  \n  640  define(Import.prototype, {\n  641:   [Symbol.toStringTag]: 'Import',\n  642    ids(pred = local => true) {\n  643      return ImportIds(this.tokens.slice())\n  ...\n 1346  \n 1347  define(NumericRange.prototype, {\n 1348:   [Symbol.toStringTag]: 'NumericRange',\n 1349    [inspectSymbol](depth, opts) {\n 1350      const [start, end] = this;\n ....\n 1404            return '';\n 1405          },\n 1406:         [Symbol.toStringTag]: 'FileMap(empty)'\n 1407        };\n 1408        return Object.setPrototypeOf(obj, FileMap.prototype);\n ....\n 1746  }\n 1747  \n 1748: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1749  \n 1750  function BufferFile(file, buf) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/bin/list-imports.js:\n  295      close: () => {},\n  296      seek: (whence, offset) => os.seek(fd, whence, offset),\n  297:     [Symbol.toStringTag]: `FileWriter< ${fd} >`,\n  298      inspect() {\n  299:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  300      }\n  301    });\n  ...\n  316      write: fn,\n  317      close: () => {},\n  318:     [Symbol.toStringTag]: `ArrayWriter`,\n  319      inspect() {\n  320:       return inspect({ arr }) ?? this[Symbol.toStringTag];\n  321      }\n  322    });\n  ...\n  332      close: () => {},\n  333      seek: () => {},\n  334:     [Symbol.toStringTag]: `DummyWriter< ${name} >`,\n  335      inspect() {\n  336:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  337      }\n  338    });\n  ...\n  639  \n  640  define(Import.prototype, {\n  641:   [Symbol.toStringTag]: 'Import',\n  642    ids(pred = local => true) {\n  643      return ImportIds(this.tokens.slice())\n  ...\n 1346  \n 1347  define(NumericRange.prototype, {\n 1348:   [Symbol.toStringTag]: 'NumericRange',\n 1349    [inspectSymbol](depth, opts) {\n 1350      const [start, end] = this;\n ....\n 1404            return '';\n 1405          },\n 1406:         [Symbol.toStringTag]: 'FileMap(empty)'\n 1407        };\n 1408        return Object.setPrototypeOf(obj, FileMap.prototype);\n ....\n 1746  }\n 1747  \n 1748: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1749  \n 1750  function BufferFile(file, buf) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/local/lib/quickjs/inotify.js:\n   71                return this.watch(event);\n   72              },\n   73:             [Symbol.toStringTag]: 'InotifyEvent'\n   74            });\n   75  */\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/local/lib/quickjs/socklen_t.js:\n   16    }\n   17  \n   18:   get [Symbol.toStringTag]() {\n   19      return 'socklen_t';\n   20    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/local/lib/quickjs/console.js:\n   51      numberBase: 10,\n   52      classKey: Symbol.toStringTag,\n   53:     hideKeys: [Symbol.toStringTag]\n   54    };\n   55  \n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/local/lib/quickjs/io.js:\n   51  }\n   52  \n   53: define(HandlerEntry.prototype, { [Symbol.toStringTag]: 'HandlerEntry' });\n   54  \n   55  export class DescriptorMap extends Array {\n   ..\n   90  }\n   91  \n   92: define(DescriptorMap.prototype, { [Symbol.toStringTag]: 'DescriptorMap' });\n   93  \n   94  export class Multiplexer {\n   ..\n  154  }\n  155  \n  156: define(Multiplexer.prototype, { [Symbol.toStringTag]: 'Multiplexer' });\n  157  \n  158  const io = new Multiplexer();\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/local/lib/quickjs/require.js:\n   95  }\n   96  \n   97: define(Module.prototype, { [Symbol.toStringTag]: 'Module' });\n   98  \n   99  class CJSModule extends Module {\n  ...\n  137  }\n  138  \n  139: define(CJSModule.prototype, { [Symbol.toStringTag]: 'CJSModule' });\n  140  \n  141  class ESModule extends Module {\n  ...\n  170  }\n  171  \n  172: define(ESModule.prototype, { [Symbol.toStringTag]: 'ESModule' });\n  173  \n  174  function statPath(path) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/local/lib/quickjs/xpath.js:\n   12  }\n   13  \n   14: DereferenceError.prototype[Symbol.toStringTag] = 'DereferenceError';\n   15  \n   16  export class XPath {\n   ..\n  118      return;\n  119      `\\x1b[1;31m${this.constructor.name ?? className(this)}\\x1b[0m ` +\n  120:       inspect([...this].map(GetKey) ?? { __proto__: { [Symbol.toStringTag]: 'XPath' }, ...obj }, {\n  121          ...opts,\n  122          customInspect: true\n  ...\n  124    }\n  125  \n  126:   get [Symbol.toStringTag]() {\n  127      return 'XPath';\n  128    }\n  ...\n  131  }\n  132  \n  133: define(XPath.prototype, { [Symbol.toStringTag]: 'XPath' });\n  134  \n  135  export const ImmutableXPath = XPath;\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/local/lib/quickjs/stack.js:\n   31  }\n   32  \n   33: Stack.prototype[Symbol.toStringTag] = 'Stack';\n   34  \n   35  Stack.prototype.toString = function() {\n   ..\n   46  Stack.prototype[inspectSymbol] = function(depth, options) {\n   47    return (\n   48:     `\\x1b[1;31m${this[Symbol.toStringTag]}\\x1b[0m ` +\n   49      inspect([...this], depth, {\n   50        ...options,\n   ..\n  216    }\n  217  \n  218:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  219      return 'StackFrame';\n  220    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/local/lib/quickjs/dom.js:\n  571  define(Node.prototype, Interface.prototype);\n  572  extend(Node.prototype, NODE_TYPES, { enumerable: false });\n  573: extend(Node.prototype, { [Symbol.toStringTag]: 'Node' }, { enumerable: false });\n  574  \n  575  function MakeCache(ctor, store = new WeakMap()) {\n  ...\n  652    NodeList.prototype,\n  653    {\n  654:     [Symbol.toStringTag]: 'NodeList',\n  655      *[Symbol.iterator]() {\n  656        const factory = Factory.for(this);\n  ...\n  701      constructor: NamedNodeMap,\n  702  \n  703:     [Symbol.toStringTag]: 'NamedNodeMap',\n  704  \n  705      get path() {\n  ...\n  994  }\n  995  \n  996: extend(Element.prototype, { [Symbol.toStringTag]: 'Element', nodeType: ELEMENT_NODE }, { enumerable: false });\n  997  \n  998  /*\n  ...\n 1167  }\n 1168  \n 1169: extend(Document.prototype, { [Symbol.toStringTag]: 'Document', nodeType: DOCUMENT_NODE }, { enumerable: false });\n 1170  \n 1171  export class Attr extends Node {\n ....\n 1227    {\n 1228      nodeType: ATTRIBUTE_NODE,\n 1229:     [Symbol.toStringTag]: 'Attr'\n 1230    },\n 1231    { enumerable: false }\n ....\n 1273  \n 1274    [inspectSymbol](depth, opts) {\n 1275:     return `\\x1b[1;31m${this[Symbol.toStringTag]}\\x1b[0m \\x1b[38;2;192;2550m${quote(this.data, \"'\")}\\x1b[0m`;\n 1276    }\n 1277  \n ....\n 1286      nodeType: TEXT_NODE,\n 1287      nodeName: '#text',\n 1288:     [Symbol.toStringTag]: 'Text'\n 1289    },\n 1290    { enumerable: false }\n ....\n 1333      nodeType: COMMENT_NODE,\n 1334      nodeName: '#comment',\n 1335:     [Symbol.toStringTag]: 'Comment'\n 1336    },\n 1337    { enumerable: false }\n ....\n 1436    TokenList.prototype,\n 1437    {\n 1438:     [Symbol.toStringTag]: 'TokenList'\n 1439    },\n 1440    { enumerable: false }\n ....\n 1594      constructor: CSSStyleDeclaration,\n 1595  \n 1596:     [Symbol.toStringTag]: 'CSSStyleDeclaration',\n 1597  \n 1598      get parentRule() {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/local/lib/quickjs/tty.js:\n   10  \n   11  define(ReadStream.prototype, {\n   12:   [Symbol.toStringTag]: 'ReadStream'\n   13  });\n   14  \n   ..\n   93      configurable: true\n   94    },\n   95:   [Symbol.toStringTag]: { value: 'WriteStream', configurable: true }\n   96  });\n   97  \n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/local/lib/quickjs/util.js:\n  182    },\n  183    isModuleNamespaceObject(v) {\n  184:     return isObject(v) && v[Symbol.toStringTag] == 'Module';\n  185    },\n  186    isConstructor(v) {\n  ...\n 1986  export function className(obj) {\n 1987    if(isObject(obj)) {\n 1988:     if(Symbol.toStringTag in obj) return obj[Symbol.toStringTag];\n 1989      if('constructor' in obj) return functionName(obj.constructor);\n 1990    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/local/lib/quickjs/db.js:\n   95  \n   96  define(Pool.prototype, {\n   97:   [Symbol.toStringTag]: 'Pool'\n   98  });\n   99  \n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/local/lib/quickjs/repl.js:\n 2081  \n 2082  Object.assign(REPL.prototype, {\n 2083:   [Symbol.toStringTag]: 'REPL',\n 2084    handleInput: REPL.prototype.evalAndPrint,\n 2085    directives: loadModule\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/local/lib/quickjs/streams.js:\n  137    }\n  138  \n  139:   define(ByLineStream.prototype, { [Symbol.toStringTag]: 'ByLineStream' });\n  140  \n  141    return ByLineStream;\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/local/lib/quickjs/fs.js:\n  241  }\n  242  \n  243: FileHandle.prototype[Symbol.toStringTag] = 'FileHandle';\n  244  \n  245  delete FileHandle.prototype.constructor;\n  ...\n  836    }\n  837  \n  838:   [Symbol.toStringTag] = 'inotify_event';\n  839  }\n  840  \n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/local/lib/quickjs/parser.js:\n   22  }\n   23  \n   24: define(Rule.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'Rule' });\n   25  \n   26  export class Terminal extends Rule {\n   ..\n   45  }\n   46  \n   47: define(Terminal.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'Terminal' });\n   48  \n   49  export class ZeroOrMore extends Rule {\n   ..\n   63  }\n   64  \n   65: define(ZeroOrMore.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'ZeroOrMore' });\n   66  \n   67  export function make_operators_set(...op_list) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/local/lib/quickjs/events.js:\n   55  }\n   56  \n   57: EventEmitter.prototype[Symbol.toStringTag] = 'EventEmitter';\n   58  \n   59  const PRIVATE = Symbol('EventTarget');\n   ..\n   98  }\n   99  \n  100: EventTarget.prototype[Symbol.toStringTag] = 'EventTarget';\n  101  \n  102  const getMethods = obj =>\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/local/lib/quickjs/vfs.js:\n  311            for(let chunk of q) written += ar.write(chunk);\n  312          },\n  313:         [Symbol.toStringTag]: 'WriteStream'\n  314        };\n  315      } else {\n  ...\n  329            error: () => ar.error != null,\n  330            close: () => ar.close(),\n  331:           [Symbol.toStringTag]: 'ReadStream'\n  332          };\n  333        }\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/local/lib/quickjs/lexer/c.js:\n  118  globalThis.CLexer = CLexer;\n  119  \n  120: define(CLexer.prototype, { [Symbol.toStringTag]: 'CLexer' });\n  121  \n  122  export default CLexer;\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/local/lib/quickjs/lexer/csv.js:\n   23    }\n   24  \n   25:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n   26      return \"CSVLexer\";\n   27    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/local/lib/quickjs/lexer/ecmascript.js:\n  129    }\n  130  \n  131:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  132      return \"ECMAScriptLexer\";\n  133    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/local/lib/quickjs/lexer/bnf.js:\n  194    }\n  195  \n  196:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  197      return \"BNFLexer\";\n  198    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/bin/resolve-imports.js:\n  295      close: () => {},\n  296      seek: (whence, offset) => os.seek(fd, whence, offset),\n  297:     [Symbol.toStringTag]: `FileWriter< ${fd} >`,\n  298      inspect() {\n  299:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  300      }\n  301    });\n  ...\n  316      write: fn,\n  317      close: () => {},\n  318:     [Symbol.toStringTag]: `ArrayWriter`,\n  319      inspect() {\n  320:       return inspect({ arr }) ?? this[Symbol.toStringTag];\n  321      }\n  322    });\n  ...\n  332      close: () => {},\n  333      seek: () => {},\n  334:     [Symbol.toStringTag]: `DummyWriter< ${name} >`,\n  335      inspect() {\n  336:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  337      }\n  338    });\n  ...\n  639  \n  640  define(Import.prototype, {\n  641:   [Symbol.toStringTag]: 'Import',\n  642    ids(pred = local => true) {\n  643      return ImportIds(this.tokens.slice())\n  ...\n 1346  \n 1347  define(NumericRange.prototype, {\n 1348:   [Symbol.toStringTag]: 'NumericRange',\n 1349    [inspectSymbol](depth, opts) {\n 1350      const [start, end] = this;\n ....\n 1404            return '';\n 1405          },\n 1406:         [Symbol.toStringTag]: 'FileMap(empty)'\n 1407        };\n 1408        return Object.setPrototypeOf(obj, FileMap.prototype);\n ....\n 1746  }\n 1747  \n 1748: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1749  \n 1750  function BufferFile(file, buf) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/inotify.js:\n   71                return this.watch(event);\n   72              },\n   73:             [Symbol.toStringTag]: 'InotifyEvent'\n   74            });\n   75  */\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/socklen_t.js:\n   16    }\n   17  \n   18:   get [Symbol.toStringTag]() {\n   19      return 'socklen_t';\n   20    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/console.js:\n   51      numberBase: 10,\n   52      classKey: Symbol.toStringTag,\n   53:     hideKeys: [Symbol.toStringTag]\n   54    };\n   55  \n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/io.js:\n   51  }\n   52  \n   53: define(HandlerEntry.prototype, { [Symbol.toStringTag]: 'HandlerEntry' });\n   54  \n   55  export class DescriptorMap extends Array {\n   ..\n   90  }\n   91  \n   92: define(DescriptorMap.prototype, { [Symbol.toStringTag]: 'DescriptorMap' });\n   93  \n   94  export class Multiplexer {\n   ..\n  154  }\n  155  \n  156: define(Multiplexer.prototype, { [Symbol.toStringTag]: 'Multiplexer' });\n  157  \n  158  const io = new Multiplexer();\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/require.js:\n   95  }\n   96  \n   97: define(Module.prototype, { [Symbol.toStringTag]: 'Module' });\n   98  \n   99  class CJSModule extends Module {\n  ...\n  137  }\n  138  \n  139: define(CJSModule.prototype, { [Symbol.toStringTag]: 'CJSModule' });\n  140  \n  141  class ESModule extends Module {\n  ...\n  170  }\n  171  \n  172: define(ESModule.prototype, { [Symbol.toStringTag]: 'ESModule' });\n  173  \n  174  function statPath(path) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/xpath.js:\n   12  }\n   13  \n   14: DereferenceError.prototype[Symbol.toStringTag] = 'DereferenceError';\n   15  \n   16  export class XPath {\n   ..\n  118      return;\n  119      `\\x1b[1;31m${this.constructor.name ?? className(this)}\\x1b[0m ` +\n  120:       inspect([...this].map(GetKey) ?? { __proto__: { [Symbol.toStringTag]: 'XPath' }, ...obj }, {\n  121          ...opts,\n  122          customInspect: true\n  ...\n  124    }\n  125  \n  126:   get [Symbol.toStringTag]() {\n  127      return 'XPath';\n  128    }\n  ...\n  131  }\n  132  \n  133: define(XPath.prototype, { [Symbol.toStringTag]: 'XPath' });\n  134  \n  135  export const ImmutableXPath = XPath;\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/stack.js:\n   31  }\n   32  \n   33: Stack.prototype[Symbol.toStringTag] = 'Stack';\n   34  \n   35  Stack.prototype.toString = function() {\n   ..\n   46  Stack.prototype[inspectSymbol] = function(depth, options) {\n   47    return (\n   48:     `\\x1b[1;31m${this[Symbol.toStringTag]}\\x1b[0m ` +\n   49      inspect([...this], depth, {\n   50        ...options,\n   ..\n  216    }\n  217  \n  218:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  219      return 'StackFrame';\n  220    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/dom.js:\n  571  define(Node.prototype, Interface.prototype);\n  572  extend(Node.prototype, NODE_TYPES, { enumerable: false });\n  573: extend(Node.prototype, { [Symbol.toStringTag]: 'Node' }, { enumerable: false });\n  574  \n  575  function MakeCache(ctor, store = new WeakMap()) {\n  ...\n  652    NodeList.prototype,\n  653    {\n  654:     [Symbol.toStringTag]: 'NodeList',\n  655      *[Symbol.iterator]() {\n  656        const factory = Factory.for(this);\n  ...\n  701      constructor: NamedNodeMap,\n  702  \n  703:     [Symbol.toStringTag]: 'NamedNodeMap',\n  704  \n  705      get path() {\n  ...\n  994  }\n  995  \n  996: extend(Element.prototype, { [Symbol.toStringTag]: 'Element', nodeType: ELEMENT_NODE }, { enumerable: false });\n  997  \n  998  /*\n  ...\n 1167  }\n 1168  \n 1169: extend(Document.prototype, { [Symbol.toStringTag]: 'Document', nodeType: DOCUMENT_NODE }, { enumerable: false });\n 1170  \n 1171  export class Attr extends Node {\n ....\n 1227    {\n 1228      nodeType: ATTRIBUTE_NODE,\n 1229:     [Symbol.toStringTag]: 'Attr'\n 1230    },\n 1231    { enumerable: false }\n ....\n 1273  \n 1274    [inspectSymbol](depth, opts) {\n 1275:     return `\\x1b[1;31m${this[Symbol.toStringTag]}\\x1b[0m \\x1b[38;2;192;2550m${quote(this.data, \"'\")}\\x1b[0m`;\n 1276    }\n 1277  \n ....\n 1286      nodeType: TEXT_NODE,\n 1287      nodeName: '#text',\n 1288:     [Symbol.toStringTag]: 'Text'\n 1289    },\n 1290    { enumerable: false }\n ....\n 1333      nodeType: COMMENT_NODE,\n 1334      nodeName: '#comment',\n 1335:     [Symbol.toStringTag]: 'Comment'\n 1336    },\n 1337    { enumerable: false }\n ....\n 1436    TokenList.prototype,\n 1437    {\n 1438:     [Symbol.toStringTag]: 'TokenList'\n 1439    },\n 1440    { enumerable: false }\n ....\n 1594      constructor: CSSStyleDeclaration,\n 1595  \n 1596:     [Symbol.toStringTag]: 'CSSStyleDeclaration',\n 1597  \n 1598      get parentRule() {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/tty.js:\n   10  \n   11  define(ReadStream.prototype, {\n   12:   [Symbol.toStringTag]: 'ReadStream'\n   13  });\n   14  \n   ..\n   93      configurable: true\n   94    },\n   95:   [Symbol.toStringTag]: { value: 'WriteStream', configurable: true }\n   96  });\n   97  \n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/util.js:\n  182    },\n  183    isModuleNamespaceObject(v) {\n  184:     return isObject(v) && v[Symbol.toStringTag] == 'Module';\n  185    },\n  186    isConstructor(v) {\n  ...\n 1986  export function className(obj) {\n 1987    if(isObject(obj)) {\n 1988:     if(Symbol.toStringTag in obj) return obj[Symbol.toStringTag];\n 1989      if('constructor' in obj) return functionName(obj.constructor);\n 1990    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/db.js:\n   95  \n   96  define(Pool.prototype, {\n   97:   [Symbol.toStringTag]: 'Pool'\n   98  });\n   99  \n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/repl.js:\n 2081  \n 2082  Object.assign(REPL.prototype, {\n 2083:   [Symbol.toStringTag]: 'REPL',\n 2084    handleInput: REPL.prototype.evalAndPrint,\n 2085    directives: loadModule\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/streams.js:\n  137    }\n  138  \n  139:   define(ByLineStream.prototype, { [Symbol.toStringTag]: 'ByLineStream' });\n  140  \n  141    return ByLineStream;\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/fs.js:\n  241  }\n  242  \n  243: FileHandle.prototype[Symbol.toStringTag] = 'FileHandle';\n  244  \n  245  delete FileHandle.prototype.constructor;\n  ...\n  836    }\n  837  \n  838:   [Symbol.toStringTag] = 'inotify_event';\n  839  }\n  840  \n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/parser.js:\n   22  }\n   23  \n   24: define(Rule.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'Rule' });\n   25  \n   26  export class Terminal extends Rule {\n   ..\n   45  }\n   46  \n   47: define(Terminal.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'Terminal' });\n   48  \n   49  export class ZeroOrMore extends Rule {\n   ..\n   63  }\n   64  \n   65: define(ZeroOrMore.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'ZeroOrMore' });\n   66  \n   67  export function make_operators_set(...op_list) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/events.js:\n   55  }\n   56  \n   57: EventEmitter.prototype[Symbol.toStringTag] = 'EventEmitter';\n   58  \n   59  const PRIVATE = Symbol('EventTarget');\n   ..\n   98  }\n   99  \n  100: EventTarget.prototype[Symbol.toStringTag] = 'EventTarget';\n  101  \n  102  const getMethods = obj =>\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/vfs.js:\n  311            for(let chunk of q) written += ar.write(chunk);\n  312          },\n  313:         [Symbol.toStringTag]: 'WriteStream'\n  314        };\n  315      } else {\n  ...\n  329            error: () => ar.error != null,\n  330            close: () => ar.close(),\n  331:           [Symbol.toStringTag]: 'ReadStream'\n  332          };\n  333        }\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/lexer/c.js:\n  118  globalThis.CLexer = CLexer;\n  119  \n  120: define(CLexer.prototype, { [Symbol.toStringTag]: 'CLexer' });\n  121  \n  122  export default CLexer;\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/lexer/csv.js:\n   23    }\n   24  \n   25:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n   26      return \"CSVLexer\";\n   27    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/lexer/ecmascript.js:\n  129    }\n  130  \n  131:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  132      return \"ECMAScriptLexer\";\n  133    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/lexer/bnf.js:\n  194    }\n  195  \n  196:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  197      return \"BNFLexer\";\n  198    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/bin/check-imports.js:\n  295      close: () => {},\n  296      seek: (whence, offset) => os.seek(fd, whence, offset),\n  297:     [Symbol.toStringTag]: `FileWriter< ${fd} >`,\n  298      inspect() {\n  299:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  300      }\n  301    });\n  ...\n  316      write: fn,\n  317      close: () => {},\n  318:     [Symbol.toStringTag]: `ArrayWriter`,\n  319      inspect() {\n  320:       return inspect({ arr }) ?? this[Symbol.toStringTag];\n  321      }\n  322    });\n  ...\n  332      close: () => {},\n  333      seek: () => {},\n  334:     [Symbol.toStringTag]: `DummyWriter< ${name} >`,\n  335      inspect() {\n  336:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  337      }\n  338    });\n  ...\n  639  \n  640  define(Import.prototype, {\n  641:   [Symbol.toStringTag]: 'Import',\n  642    ids(pred = local => true) {\n  643      return ImportIds(this.tokens.slice())\n  ...\n 1346  \n 1347  define(NumericRange.prototype, {\n 1348:   [Symbol.toStringTag]: 'NumericRange',\n 1349    [inspectSymbol](depth, opts) {\n 1350      const [start, end] = this;\n ....\n 1404            return '';\n 1405          },\n 1406:         [Symbol.toStringTag]: 'FileMap(empty)'\n 1407        };\n 1408        return Object.setPrototypeOf(obj, FileMap.prototype);\n ....\n 1746  }\n 1747  \n 1748: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1749  \n 1750  function BufferFile(file, buf) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/bin/resolve-imports.js:\n  295      close: () => {},\n  296      seek: (whence, offset) => os.seek(fd, whence, offset),\n  297:     [Symbol.toStringTag]: `FileWriter< ${fd} >`,\n  298      inspect() {\n  299:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  300      }\n  301    });\n  ...\n  316      write: fn,\n  317      close: () => {},\n  318:     [Symbol.toStringTag]: `ArrayWriter`,\n  319      inspect() {\n  320:       return inspect({ arr }) ?? this[Symbol.toStringTag];\n  321      }\n  322    });\n  ...\n  332      close: () => {},\n  333      seek: () => {},\n  334:     [Symbol.toStringTag]: `DummyWriter< ${name} >`,\n  335      inspect() {\n  336:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  337      }\n  338    });\n  ...\n  639  \n  640  define(Import.prototype, {\n  641:   [Symbol.toStringTag]: 'Import',\n  642    ids(pred = local => true) {\n  643      return ImportIds(this.tokens.slice())\n  ...\n 1346  \n 1347  define(NumericRange.prototype, {\n 1348:   [Symbol.toStringTag]: 'NumericRange',\n 1349    [inspectSymbol](depth, opts) {\n 1350      const [start, end] = this;\n ....\n 1404            return '';\n 1405          },\n 1406:         [Symbol.toStringTag]: 'FileMap(empty)'\n 1407        };\n 1408        return Object.setPrototypeOf(obj, FileMap.prototype);\n ....\n 1746  }\n 1747  \n 1748: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1749  \n 1750  function BufferFile(file, buf) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/bin/list-imports.js:\n  295      close: () => {},\n  296      seek: (whence, offset) => os.seek(fd, whence, offset),\n  297:     [Symbol.toStringTag]: `FileWriter< ${fd} >`,\n  298      inspect() {\n  299:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  300      }\n  301    });\n  ...\n  316      write: fn,\n  317      close: () => {},\n  318:     [Symbol.toStringTag]: `ArrayWriter`,\n  319      inspect() {\n  320:       return inspect({ arr }) ?? this[Symbol.toStringTag];\n  321      }\n  322    });\n  ...\n  332      close: () => {},\n  333      seek: () => {},\n  334:     [Symbol.toStringTag]: `DummyWriter< ${name} >`,\n  335      inspect() {\n  336:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  337      }\n  338    });\n  ...\n  639  \n  640  define(Import.prototype, {\n  641:   [Symbol.toStringTag]: 'Import',\n  642    ids(pred = local => true) {\n  643      return ImportIds(this.tokens.slice())\n  ...\n 1346  \n 1347  define(NumericRange.prototype, {\n 1348:   [Symbol.toStringTag]: 'NumericRange',\n 1349    [inspectSymbol](depth, opts) {\n 1350      const [start, end] = this;\n ....\n 1404            return '';\n 1405          },\n 1406:         [Symbol.toStringTag]: 'FileMap(empty)'\n 1407        };\n 1408        return Object.setPrototypeOf(obj, FileMap.prototype);\n ....\n 1746  }\n 1747  \n 1748: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1749  \n 1750  function BufferFile(file, buf) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/inotify.js:\n   71                return this.watch(event);\n   72              },\n   73:             [Symbol.toStringTag]: 'InotifyEvent'\n   74            });\n   75  */\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/socklen_t.js:\n   16    }\n   17  \n   18:   get [Symbol.toStringTag]() {\n   19      return 'socklen_t';\n   20    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/console.js:\n   51      numberBase: 10,\n   52      classKey: Symbol.toStringTag,\n   53:     hideKeys: [Symbol.toStringTag]\n   54    };\n   55  \n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/io.js:\n   51  }\n   52  \n   53: define(HandlerEntry.prototype, { [Symbol.toStringTag]: 'HandlerEntry' });\n   54  \n   55  export class DescriptorMap extends Array {\n   ..\n   90  }\n   91  \n   92: define(DescriptorMap.prototype, { [Symbol.toStringTag]: 'DescriptorMap' });\n   93  \n   94  export class Multiplexer {\n   ..\n  154  }\n  155  \n  156: define(Multiplexer.prototype, { [Symbol.toStringTag]: 'Multiplexer' });\n  157  \n  158  const io = new Multiplexer();\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/require.js:\n   95  }\n   96  \n   97: define(Module.prototype, { [Symbol.toStringTag]: 'Module' });\n   98  \n   99  class CJSModule extends Module {\n  ...\n  137  }\n  138  \n  139: define(CJSModule.prototype, { [Symbol.toStringTag]: 'CJSModule' });\n  140  \n  141  class ESModule extends Module {\n  ...\n  170  }\n  171  \n  172: define(ESModule.prototype, { [Symbol.toStringTag]: 'ESModule' });\n  173  \n  174  function statPath(path) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/xpath.js:\n   12  }\n   13  \n   14: DereferenceError.prototype[Symbol.toStringTag] = 'DereferenceError';\n   15  \n   16  export class XPath {\n   ..\n  118      return;\n  119      `\\x1b[1;31m${this.constructor.name ?? className(this)}\\x1b[0m ` +\n  120:       inspect([...this].map(GetKey) ?? { __proto__: { [Symbol.toStringTag]: 'XPath' }, ...obj }, {\n  121          ...opts,\n  122          customInspect: true\n  ...\n  124    }\n  125  \n  126:   get [Symbol.toStringTag]() {\n  127      return 'XPath';\n  128    }\n  ...\n  131  }\n  132  \n  133: define(XPath.prototype, { [Symbol.toStringTag]: 'XPath' });\n  134  \n  135  export const ImmutableXPath = XPath;\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/stack.js:\n   31  }\n   32  \n   33: Stack.prototype[Symbol.toStringTag] = 'Stack';\n   34  \n   35  Stack.prototype.toString = function() {\n   ..\n   46  Stack.prototype[inspectSymbol] = function(depth, options) {\n   47    return (\n   48:     `\\x1b[1;31m${this[Symbol.toStringTag]}\\x1b[0m ` +\n   49      inspect([...this], depth, {\n   50        ...options,\n   ..\n  216    }\n  217  \n  218:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  219      return 'StackFrame';\n  220    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/dom.js:\n  571  define(Node.prototype, Interface.prototype);\n  572  extend(Node.prototype, NODE_TYPES, { enumerable: false });\n  573: extend(Node.prototype, { [Symbol.toStringTag]: 'Node' }, { enumerable: false });\n  574  \n  575  function MakeCache(ctor, store = new WeakMap()) {\n  ...\n  652    NodeList.prototype,\n  653    {\n  654:     [Symbol.toStringTag]: 'NodeList',\n  655      *[Symbol.iterator]() {\n  656        const factory = Factory.for(this);\n  ...\n  701      constructor: NamedNodeMap,\n  702  \n  703:     [Symbol.toStringTag]: 'NamedNodeMap',\n  704  \n  705      get path() {\n  ...\n  994  }\n  995  \n  996: extend(Element.prototype, { [Symbol.toStringTag]: 'Element', nodeType: ELEMENT_NODE }, { enumerable: false });\n  997  \n  998  /*\n  ...\n 1167  }\n 1168  \n 1169: extend(Document.prototype, { [Symbol.toStringTag]: 'Document', nodeType: DOCUMENT_NODE }, { enumerable: false });\n 1170  \n 1171  export class Attr extends Node {\n ....\n 1227    {\n 1228      nodeType: ATTRIBUTE_NODE,\n 1229:     [Symbol.toStringTag]: 'Attr'\n 1230    },\n 1231    { enumerable: false }\n ....\n 1273  \n 1274    [inspectSymbol](depth, opts) {\n 1275:     return `\\x1b[1;31m${this[Symbol.toStringTag]}\\x1b[0m \\x1b[38;2;192;2550m${quote(this.data, \"'\")}\\x1b[0m`;\n 1276    }\n 1277  \n ....\n 1286      nodeType: TEXT_NODE,\n 1287      nodeName: '#text',\n 1288:     [Symbol.toStringTag]: 'Text'\n 1289    },\n 1290    { enumerable: false }\n ....\n 1333      nodeType: COMMENT_NODE,\n 1334      nodeName: '#comment',\n 1335:     [Symbol.toStringTag]: 'Comment'\n 1336    },\n 1337    { enumerable: false }\n ....\n 1436    TokenList.prototype,\n 1437    {\n 1438:     [Symbol.toStringTag]: 'TokenList'\n 1439    },\n 1440    { enumerable: false }\n ....\n 1594      constructor: CSSStyleDeclaration,\n 1595  \n 1596:     [Symbol.toStringTag]: 'CSSStyleDeclaration',\n 1597  \n 1598      get parentRule() {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/tty.js:\n   10  \n   11  define(ReadStream.prototype, {\n   12:   [Symbol.toStringTag]: 'ReadStream'\n   13  });\n   14  \n   ..\n   93      configurable: true\n   94    },\n   95:   [Symbol.toStringTag]: { value: 'WriteStream', configurable: true }\n   96  });\n   97  \n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/util.js:\n  182    },\n  183    isModuleNamespaceObject(v) {\n  184:     return isObject(v) && v[Symbol.toStringTag] == 'Module';\n  185    },\n  186    isConstructor(v) {\n  ...\n 1986  export function className(obj) {\n 1987    if(isObject(obj)) {\n 1988:     if(Symbol.toStringTag in obj) return obj[Symbol.toStringTag];\n 1989      if('constructor' in obj) return functionName(obj.constructor);\n 1990    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/db.js:\n   95  \n   96  define(Pool.prototype, {\n   97:   [Symbol.toStringTag]: 'Pool'\n   98  });\n   99  \n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/repl.js:\n 2081  \n 2082  Object.assign(REPL.prototype, {\n 2083:   [Symbol.toStringTag]: 'REPL',\n 2084    handleInput: REPL.prototype.evalAndPrint,\n 2085    directives: loadModule\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/streams.js:\n  137    }\n  138  \n  139:   define(ByLineStream.prototype, { [Symbol.toStringTag]: 'ByLineStream' });\n  140  \n  141    return ByLineStream;\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/fs.js:\n  241  }\n  242  \n  243: FileHandle.prototype[Symbol.toStringTag] = 'FileHandle';\n  244  \n  245  delete FileHandle.prototype.constructor;\n  ...\n  836    }\n  837  \n  838:   [Symbol.toStringTag] = 'inotify_event';\n  839  }\n  840  \n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/parser.js:\n   22  }\n   23  \n   24: define(Rule.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'Rule' });\n   25  \n   26  export class Terminal extends Rule {\n   ..\n   45  }\n   46  \n   47: define(Terminal.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'Terminal' });\n   48  \n   49  export class ZeroOrMore extends Rule {\n   ..\n   63  }\n   64  \n   65: define(ZeroOrMore.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'ZeroOrMore' });\n   66  \n   67  export function make_operators_set(...op_list) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/events.js:\n   55  }\n   56  \n   57: EventEmitter.prototype[Symbol.toStringTag] = 'EventEmitter';\n   58  \n   59  const PRIVATE = Symbol('EventTarget');\n   ..\n   98  }\n   99  \n  100: EventTarget.prototype[Symbol.toStringTag] = 'EventTarget';\n  101  \n  102  const getMethods = obj =>\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/vfs.js:\n  311            for(let chunk of q) written += ar.write(chunk);\n  312          },\n  313:         [Symbol.toStringTag]: 'WriteStream'\n  314        };\n  315      } else {\n  ...\n  329            error: () => ar.error != null,\n  330            close: () => ar.close(),\n  331:           [Symbol.toStringTag]: 'ReadStream'\n  332          };\n  333        }\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/lexer/c.js:\n  118  globalThis.CLexer = CLexer;\n  119  \n  120: define(CLexer.prototype, { [Symbol.toStringTag]: 'CLexer' });\n  121  \n  122  export default CLexer;\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/lexer/csv.js:\n   23    }\n   24  \n   25:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n   26      return \"CSVLexer\";\n   27    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/lexer/ecmascript.js:\n  129    }\n  130  \n  131:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  132      return \"ECMAScriptLexer\";\n  133    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/lexer/bnf.js:\n  194    }\n  195  \n  196:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  197      return \"BNFLexer\";\n  198    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/bin/check-imports.js:\n  295      close: () => {},\n  296      seek: (whence, offset) => os.seek(fd, whence, offset),\n  297:     [Symbol.toStringTag]: `FileWriter< ${fd} >`,\n  298      inspect() {\n  299:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  300      }\n  301    });\n  ...\n  316      write: fn,\n  317      close: () => {},\n  318:     [Symbol.toStringTag]: `ArrayWriter`,\n  319      inspect() {\n  320:       return inspect({ arr }) ?? this[Symbol.toStringTag];\n  321      }\n  322    });\n  ...\n  332      close: () => {},\n  333      seek: () => {},\n  334:     [Symbol.toStringTag]: `DummyWriter< ${name} >`,\n  335      inspect() {\n  336:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  337      }\n  338    });\n  ...\n  639  \n  640  define(Import.prototype, {\n  641:   [Symbol.toStringTag]: 'Import',\n  642    ids(pred = local => true) {\n  643      return ImportIds(this.tokens.slice())\n  ...\n 1346  \n 1347  define(NumericRange.prototype, {\n 1348:   [Symbol.toStringTag]: 'NumericRange',\n 1349    [inspectSymbol](depth, opts) {\n 1350      const [start, end] = this;\n ....\n 1404            return '';\n 1405          },\n 1406:         [Symbol.toStringTag]: 'FileMap(empty)'\n 1407        };\n 1408        return Object.setPrototypeOf(obj, FileMap.prototype);\n ....\n 1746  }\n 1747  \n 1748: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1749  \n 1750  function BufferFile(file, buf) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/bin/resolve-imports.js:\n  295      close: () => {},\n  296      seek: (whence, offset) => os.seek(fd, whence, offset),\n  297:     [Symbol.toStringTag]: `FileWriter< ${fd} >`,\n  298      inspect() {\n  299:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  300      }\n  301    });\n  ...\n  316      write: fn,\n  317      close: () => {},\n  318:     [Symbol.toStringTag]: `ArrayWriter`,\n  319      inspect() {\n  320:       return inspect({ arr }) ?? this[Symbol.toStringTag];\n  321      }\n  322    });\n  ...\n  332      close: () => {},\n  333      seek: () => {},\n  334:     [Symbol.toStringTag]: `DummyWriter< ${name} >`,\n  335      inspect() {\n  336:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  337      }\n  338    });\n  ...\n  639  \n  640  define(Import.prototype, {\n  641:   [Symbol.toStringTag]: 'Import',\n  642    ids(pred = local => true) {\n  643      return ImportIds(this.tokens.slice())\n  ...\n 1346  \n 1347  define(NumericRange.prototype, {\n 1348:   [Symbol.toStringTag]: 'NumericRange',\n 1349    [inspectSymbol](depth, opts) {\n 1350      const [start, end] = this;\n ....\n 1404            return '';\n 1405          },\n 1406:         [Symbol.toStringTag]: 'FileMap(empty)'\n 1407        };\n 1408        return Object.setPrototypeOf(obj, FileMap.prototype);\n ....\n 1746  }\n 1747  \n 1748: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1749  \n 1750  function BufferFile(file, buf) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/bin/list-imports.js:\n  295      close: () => {},\n  296      seek: (whence, offset) => os.seek(fd, whence, offset),\n  297:     [Symbol.toStringTag]: `FileWriter< ${fd} >`,\n  298      inspect() {\n  299:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  300      }\n  301    });\n  ...\n  316      write: fn,\n  317      close: () => {},\n  318:     [Symbol.toStringTag]: `ArrayWriter`,\n  319      inspect() {\n  320:       return inspect({ arr }) ?? this[Symbol.toStringTag];\n  321      }\n  322    });\n  ...\n  332      close: () => {},\n  333      seek: () => {},\n  334:     [Symbol.toStringTag]: `DummyWriter< ${name} >`,\n  335      inspect() {\n  336:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  337      }\n  338    });\n  ...\n  639  \n  640  define(Import.prototype, {\n  641:   [Symbol.toStringTag]: 'Import',\n  642    ids(pred = local => true) {\n  643      return ImportIds(this.tokens.slice())\n  ...\n 1346  \n 1347  define(NumericRange.prototype, {\n 1348:   [Symbol.toStringTag]: 'NumericRange',\n 1349    [inspectSymbol](depth, opts) {\n 1350      const [start, end] = this;\n ....\n 1404            return '';\n 1405          },\n 1406:         [Symbol.toStringTag]: 'FileMap(empty)'\n 1407        };\n 1408        return Object.setPrototypeOf(obj, FileMap.prototype);\n ....\n 1746  }\n 1747  \n 1748: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1749  \n 1750  function BufferFile(file, buf) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/inotify.js:\n   71                return this.watch(event);\n   72              },\n   73:             [Symbol.toStringTag]: 'InotifyEvent'\n   74            });\n   75  */\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/socklen_t.js:\n   16    }\n   17  \n   18:   get [Symbol.toStringTag]() {\n   19      return 'socklen_t';\n   20    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/console.js:\n   51      numberBase: 10,\n   52      classKey: Symbol.toStringTag,\n   53:     hideKeys: [Symbol.toStringTag]\n   54    };\n   55  \n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/io.js:\n   51  }\n   52  \n   53: define(HandlerEntry.prototype, { [Symbol.toStringTag]: 'HandlerEntry' });\n   54  \n   55  export class DescriptorMap extends Array {\n   ..\n   90  }\n   91  \n   92: define(DescriptorMap.prototype, { [Symbol.toStringTag]: 'DescriptorMap' });\n   93  \n   94  export class Multiplexer {\n   ..\n  154  }\n  155  \n  156: define(Multiplexer.prototype, { [Symbol.toStringTag]: 'Multiplexer' });\n  157  \n  158  const io = new Multiplexer();\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/require.js:\n   95  }\n   96  \n   97: define(Module.prototype, { [Symbol.toStringTag]: 'Module' });\n   98  \n   99  class CJSModule extends Module {\n  ...\n  137  }\n  138  \n  139: define(CJSModule.prototype, { [Symbol.toStringTag]: 'CJSModule' });\n  140  \n  141  class ESModule extends Module {\n  ...\n  170  }\n  171  \n  172: define(ESModule.prototype, { [Symbol.toStringTag]: 'ESModule' });\n  173  \n  174  function statPath(path) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/xpath.js:\n   12  }\n   13  \n   14: DereferenceError.prototype[Symbol.toStringTag] = 'DereferenceError';\n   15  \n   16  export class XPath {\n   ..\n  118      return;\n  119      `\\x1b[1;31m${this.constructor.name ?? className(this)}\\x1b[0m ` +\n  120:       inspect([...this].map(GetKey) ?? { __proto__: { [Symbol.toStringTag]: 'XPath' }, ...obj }, {\n  121          ...opts,\n  122          customInspect: true\n  ...\n  124    }\n  125  \n  126:   get [Symbol.toStringTag]() {\n  127      return 'XPath';\n  128    }\n  ...\n  131  }\n  132  \n  133: define(XPath.prototype, { [Symbol.toStringTag]: 'XPath' });\n  134  \n  135  export const ImmutableXPath = XPath;\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/stack.js:\n   31  }\n   32  \n   33: Stack.prototype[Symbol.toStringTag] = 'Stack';\n   34  \n   35  Stack.prototype.toString = function() {\n   ..\n   46  Stack.prototype[inspectSymbol] = function(depth, options) {\n   47    return (\n   48:     `\\x1b[1;31m${this[Symbol.toStringTag]}\\x1b[0m ` +\n   49      inspect([...this], depth, {\n   50        ...options,\n   ..\n  216    }\n  217  \n  218:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  219      return 'StackFrame';\n  220    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/dom.js:\n  571  define(Node.prototype, Interface.prototype);\n  572  extend(Node.prototype, NODE_TYPES, { enumerable: false });\n  573: extend(Node.prototype, { [Symbol.toStringTag]: 'Node' }, { enumerable: false });\n  574  \n  575  function MakeCache(ctor, store = new WeakMap()) {\n  ...\n  652    NodeList.prototype,\n  653    {\n  654:     [Symbol.toStringTag]: 'NodeList',\n  655      *[Symbol.iterator]() {\n  656        const factory = Factory.for(this);\n  ...\n  701      constructor: NamedNodeMap,\n  702  \n  703:     [Symbol.toStringTag]: 'NamedNodeMap',\n  704  \n  705      get path() {\n  ...\n  994  }\n  995  \n  996: extend(Element.prototype, { [Symbol.toStringTag]: 'Element', nodeType: ELEMENT_NODE }, { enumerable: false });\n  997  \n  998  /*\n  ...\n 1167  }\n 1168  \n 1169: extend(Document.prototype, { [Symbol.toStringTag]: 'Document', nodeType: DOCUMENT_NODE }, { enumerable: false });\n 1170  \n 1171  export class Attr extends Node {\n ....\n 1227    {\n 1228      nodeType: ATTRIBUTE_NODE,\n 1229:     [Symbol.toStringTag]: 'Attr'\n 1230    },\n 1231    { enumerable: false }\n ....\n 1273  \n 1274    [inspectSymbol](depth, opts) {\n 1275:     return `\\x1b[1;31m${this[Symbol.toStringTag]}\\x1b[0m \\x1b[38;2;192;2550m${quote(this.data, \"'\")}\\x1b[0m`;\n 1276    }\n 1277  \n ....\n 1286      nodeType: TEXT_NODE,\n 1287      nodeName: '#text',\n 1288:     [Symbol.toStringTag]: 'Text'\n 1289    },\n 1290    { enumerable: false }\n ....\n 1333      nodeType: COMMENT_NODE,\n 1334      nodeName: '#comment',\n 1335:     [Symbol.toStringTag]: 'Comment'\n 1336    },\n 1337    { enumerable: false }\n ....\n 1436    TokenList.prototype,\n 1437    {\n 1438:     [Symbol.toStringTag]: 'TokenList'\n 1439    },\n 1440    { enumerable: false }\n ....\n 1594      constructor: CSSStyleDeclaration,\n 1595  \n 1596:     [Symbol.toStringTag]: 'CSSStyleDeclaration',\n 1597  \n 1598      get parentRule() {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/tty.js:\n   10  \n   11  define(ReadStream.prototype, {\n   12:   [Symbol.toStringTag]: 'ReadStream'\n   13  });\n   14  \n   ..\n   93      configurable: true\n   94    },\n   95:   [Symbol.toStringTag]: { value: 'WriteStream', configurable: true }\n   96  });\n   97  \n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/util.js:\n  182    },\n  183    isModuleNamespaceObject(v) {\n  184:     return isObject(v) && v[Symbol.toStringTag] == 'Module';\n  185    },\n  186    isConstructor(v) {\n  ...\n 1986  export function className(obj) {\n 1987    if(isObject(obj)) {\n 1988:     if(Symbol.toStringTag in obj) return obj[Symbol.toStringTag];\n 1989      if('constructor' in obj) return functionName(obj.constructor);\n 1990    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/db.js:\n   95  \n   96  define(Pool.prototype, {\n   97:   [Symbol.toStringTag]: 'Pool'\n   98  });\n   99  \n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/repl.js:\n 2081  \n 2082  Object.assign(REPL.prototype, {\n 2083:   [Symbol.toStringTag]: 'REPL',\n 2084    handleInput: REPL.prototype.evalAndPrint,\n 2085    directives: loadModule\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/streams.js:\n  137    }\n  138  \n  139:   define(ByLineStream.prototype, { [Symbol.toStringTag]: 'ByLineStream' });\n  140  \n  141    return ByLineStream;\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/fs.js:\n  241  }\n  242  \n  243: FileHandle.prototype[Symbol.toStringTag] = 'FileHandle';\n  244  \n  245  delete FileHandle.prototype.constructor;\n  ...\n  836    }\n  837  \n  838:   [Symbol.toStringTag] = 'inotify_event';\n  839  }\n  840  \n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/parser.js:\n   22  }\n   23  \n   24: define(Rule.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'Rule' });\n   25  \n   26  export class Terminal extends Rule {\n   ..\n   45  }\n   46  \n   47: define(Terminal.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'Terminal' });\n   48  \n   49  export class ZeroOrMore extends Rule {\n   ..\n   63  }\n   64  \n   65: define(ZeroOrMore.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'ZeroOrMore' });\n   66  \n   67  export function make_operators_set(...op_list) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/events.js:\n   55  }\n   56  \n   57: EventEmitter.prototype[Symbol.toStringTag] = 'EventEmitter';\n   58  \n   59  const PRIVATE = Symbol('EventTarget');\n   ..\n   98  }\n   99  \n  100: EventTarget.prototype[Symbol.toStringTag] = 'EventTarget';\n  101  \n  102  const getMethods = obj =>\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/vfs.js:\n  311            for(let chunk of q) written += ar.write(chunk);\n  312          },\n  313:         [Symbol.toStringTag]: 'WriteStream'\n  314        };\n  315      } else {\n  ...\n  329            error: () => ar.error != null,\n  330            close: () => ar.close(),\n  331:           [Symbol.toStringTag]: 'ReadStream'\n  332          };\n  333        }\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/lexer/c.js:\n  118  globalThis.CLexer = CLexer;\n  119  \n  120: define(CLexer.prototype, { [Symbol.toStringTag]: 'CLexer' });\n  121  \n  122  export default CLexer;\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/lexer/csv.js:\n   23    }\n   24  \n   25:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n   26      return \"CSVLexer\";\n   27    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/lexer/ecmascript.js:\n  129    }\n  130  \n  131:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  132      return \"ECMAScriptLexer\";\n  133    }\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/lexer/bnf.js:\n  194    }\n  195  \n  196:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  197      return \"BNFLexer\";\n  198    }\n\n~/Projects/plot-cv/quickjs/qjs-ffi/lib/fd_set.js:\n   25    }\n   26  \n   27:   get [Symbol.toStringTag]() {\n   28      return 'fd_set';\n   29    }\n\n~/Projects/plot-cv/quickjs/qjs-ffi/lib/socklen_t.js:\n   13    }\n   14  \n   15:   get [Symbol.toStringTag]() {\n   16      return 'socklen_t';\n   17    }\n\n~/Projects/plot-cv/quickjs/qjs-ffi/lib/socket.js:\n  252    }\n  253  \n  254:   get [Symbol.toStringTag]() {\n  255      return 'SockAddr';\n  256    }\n\n~/Projects/plot-cv/quickjs/qjs-ffi/lib/zlib.js:\n   43      Object.assign(this, obj);\n   44    }\n   45:   get [Symbol.toStringTag]() {\n   46      return `[z_stream_s @ ${this} ]`;\n   47    }\n\n~/Projects/plot-cv/quickjs/qjs-ffi/examples/portmidi.js:\n  623  }\n  624  \n  625: MIDIInput.prototype[Symbol.toStringTag] = 'MIDIInput';\n  626: MIDIOutput.prototype[Symbol.toStringTag] = 'MIDIOutput';\n  627: MIDIInputMap.prototype[Symbol.toStringTag] = 'MIDIInputMap';\n  628: MIDIOutputMap.prototype[Symbol.toStringTag] = 'MIDIOutputMap';\n  629: MIDIAccess.prototype[Symbol.toStringTag] = 'MIDIAccess';\n\n~/Projects/plot-cv/quickjs/inst/i686-w64-mingw32/usr/i686-w64-mingw32/sys-root/mingw/bin/resolve-imports.js:\n  295      close: () => {},\n  296      seek: (whence, offset) => os.seek(fd, whence, offset),\n  297:     [Symbol.toStringTag]: `FileWriter< ${fd} >`,\n  298      inspect() {\n  299:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  300      }\n  301    });\n  ...\n  316      write: fn,\n  317      close: () => {},\n  318:     [Symbol.toStringTag]: `ArrayWriter`,\n  319      inspect() {\n  320:       return inspect({ arr }) ?? this[Symbol.toStringTag];\n  321      }\n  322    });\n  ...\n  332      close: () => {},\n  333      seek: () => {},\n  334:     [Symbol.toStringTag]: `DummyWriter< ${name} >`,\n  335      inspect() {\n  336:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  337      }\n  338    });\n  ...\n  639  \n  640  define(Import.prototype, {\n  641:   [Symbol.toStringTag]: 'Import',\n  642    ids(pred = local => true) {\n  643      return ImportIds(this.tokens.slice())\n  ...\n 1346  \n 1347  define(NumericRange.prototype, {\n 1348:   [Symbol.toStringTag]: 'NumericRange',\n 1349    [inspectSymbol](depth, opts) {\n 1350      const [start, end] = this;\n ....\n 1404            return '';\n 1405          },\n 1406:         [Symbol.toStringTag]: 'FileMap(empty)'\n 1407        };\n 1408        return Object.setPrototypeOf(obj, FileMap.prototype);\n ....\n 1746  }\n 1747  \n 1748: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1749  \n 1750  function BufferFile(file, buf) {\n\n~/Projects/plot-cv/quickjs/inst/i686-w64-mingw32/usr/i686-w64-mingw32/sys-root/mingw/lib/quickjs/inotify.js:\n   71                return this.watch(event);\n   72              },\n   73:             [Symbol.toStringTag]: 'InotifyEvent'\n   74            });\n   75  */\n\n~/Projects/plot-cv/quickjs/inst/i686-w64-mingw32/usr/i686-w64-mingw32/sys-root/mingw/lib/quickjs/socklen_t.js:\n   16    }\n   17  \n   18:   get [Symbol.toStringTag]() {\n   19      return 'socklen_t';\n   20    }\n\n~/Projects/plot-cv/quickjs/inst/i686-w64-mingw32/usr/i686-w64-mingw32/sys-root/mingw/lib/quickjs/console.js:\n   51      numberBase: 10,\n   52      classKey: Symbol.toStringTag,\n   53:     hideKeys: [Symbol.toStringTag]\n   54    };\n   55  \n\n~/Projects/plot-cv/quickjs/inst/i686-w64-mingw32/usr/i686-w64-mingw32/sys-root/mingw/lib/quickjs/io.js:\n   51  }\n   52  \n   53: define(HandlerEntry.prototype, { [Symbol.toStringTag]: 'HandlerEntry' });\n   54  \n   55  export class DescriptorMap extends Array {\n   ..\n   90  }\n   91  \n   92: define(DescriptorMap.prototype, { [Symbol.toStringTag]: 'DescriptorMap' });\n   93  \n   94  export class Multiplexer {\n   ..\n  154  }\n  155  \n  156: define(Multiplexer.prototype, { [Symbol.toStringTag]: 'Multiplexer' });\n  157  \n  158  const io = new Multiplexer();\n\n~/Projects/plot-cv/quickjs/inst/i686-w64-mingw32/usr/i686-w64-mingw32/sys-root/mingw/lib/quickjs/require.js:\n   95  }\n   96  \n   97: define(Module.prototype, { [Symbol.toStringTag]: 'Module' });\n   98  \n   99  class CJSModule extends Module {\n  ...\n  137  }\n  138  \n  139: define(CJSModule.prototype, { [Symbol.toStringTag]: 'CJSModule' });\n  140  \n  141  class ESModule extends Module {\n  ...\n  170  }\n  171  \n  172: define(ESModule.prototype, { [Symbol.toStringTag]: 'ESModule' });\n  173  \n  174  function statPath(path) {\n\n~/Projects/plot-cv/quickjs/inst/i686-w64-mingw32/usr/i686-w64-mingw32/sys-root/mingw/lib/quickjs/xpath.js:\n   12  }\n   13  \n   14: DereferenceError.prototype[Symbol.toStringTag] = 'DereferenceError';\n   15  \n   16  export class XPath {\n   ..\n  118      return;\n  119      `\\x1b[1;31m${this.constructor.name ?? className(this)}\\x1b[0m ` +\n  120:       inspect([...this].map(GetKey) ?? { __proto__: { [Symbol.toStringTag]: 'XPath' }, ...obj }, {\n  121          ...opts,\n  122          customInspect: true\n  ...\n  124    }\n  125  \n  126:   get [Symbol.toStringTag]() {\n  127      return 'XPath';\n  128    }\n  ...\n  131  }\n  132  \n  133: define(XPath.prototype, { [Symbol.toStringTag]: 'XPath' });\n  134  \n  135  export const ImmutableXPath = XPath;\n\n~/Projects/plot-cv/quickjs/inst/i686-w64-mingw32/usr/i686-w64-mingw32/sys-root/mingw/lib/quickjs/stack.js:\n   31  }\n   32  \n   33: Stack.prototype[Symbol.toStringTag] = 'Stack';\n   34  \n   35  Stack.prototype.toString = function() {\n   ..\n   46  Stack.prototype[inspectSymbol] = function(depth, options) {\n   47    return (\n   48:     `\\x1b[1;31m${this[Symbol.toStringTag]}\\x1b[0m ` +\n   49      inspect([...this], depth, {\n   50        ...options,\n   ..\n  216    }\n  217  \n  218:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  219      return 'StackFrame';\n  220    }\n\n~/Projects/plot-cv/quickjs/inst/i686-w64-mingw32/usr/i686-w64-mingw32/sys-root/mingw/lib/quickjs/dom.js:\n  571  define(Node.prototype, Interface.prototype);\n  572  extend(Node.prototype, NODE_TYPES, { enumerable: false });\n  573: extend(Node.prototype, { [Symbol.toStringTag]: 'Node' }, { enumerable: false });\n  574  \n  575  function MakeCache(ctor, store = new WeakMap()) {\n  ...\n  652    NodeList.prototype,\n  653    {\n  654:     [Symbol.toStringTag]: 'NodeList',\n  655      *[Symbol.iterator]() {\n  656        const factory = Factory.for(this);\n  ...\n  701      constructor: NamedNodeMap,\n  702  \n  703:     [Symbol.toStringTag]: 'NamedNodeMap',\n  704  \n  705      get path() {\n  ...\n  994  }\n  995  \n  996: extend(Element.prototype, { [Symbol.toStringTag]: 'Element', nodeType: ELEMENT_NODE }, { enumerable: false });\n  997  \n  998  /*\n  ...\n 1167  }\n 1168  \n 1169: extend(Document.prototype, { [Symbol.toStringTag]: 'Document', nodeType: DOCUMENT_NODE }, { enumerable: false });\n 1170  \n 1171  export class Attr extends Node {\n ....\n 1227    {\n 1228      nodeType: ATTRIBUTE_NODE,\n 1229:     [Symbol.toStringTag]: 'Attr'\n 1230    },\n 1231    { enumerable: false }\n ....\n 1273  \n 1274    [inspectSymbol](depth, opts) {\n 1275:     return `\\x1b[1;31m${this[Symbol.toStringTag]}\\x1b[0m \\x1b[38;2;192;2550m${quote(this.data, \"'\")}\\x1b[0m`;\n 1276    }\n 1277  \n ....\n 1286      nodeType: TEXT_NODE,\n 1287      nodeName: '#text',\n 1288:     [Symbol.toStringTag]: 'Text'\n 1289    },\n 1290    { enumerable: false }\n ....\n 1333      nodeType: COMMENT_NODE,\n 1334      nodeName: '#comment',\n 1335:     [Symbol.toStringTag]: 'Comment'\n 1336    },\n 1337    { enumerable: false }\n ....\n 1436    TokenList.prototype,\n 1437    {\n 1438:     [Symbol.toStringTag]: 'TokenList'\n 1439    },\n 1440    { enumerable: false }\n ....\n 1594      constructor: CSSStyleDeclaration,\n 1595  \n 1596:     [Symbol.toStringTag]: 'CSSStyleDeclaration',\n 1597  \n 1598      get parentRule() {\n\n~/Projects/plot-cv/quickjs/inst/i686-w64-mingw32/usr/i686-w64-mingw32/sys-root/mingw/lib/quickjs/tty.js:\n   10  \n   11  define(ReadStream.prototype, {\n   12:   [Symbol.toStringTag]: 'ReadStream'\n   13  });\n   14  \n   ..\n   93      configurable: true\n   94    },\n   95:   [Symbol.toStringTag]: { value: 'WriteStream', configurable: true }\n   96  });\n   97  \n\n~/Projects/plot-cv/quickjs/inst/i686-w64-mingw32/usr/i686-w64-mingw32/sys-root/mingw/lib/quickjs/util.js:\n  182    },\n  183    isModuleNamespaceObject(v) {\n  184:     return isObject(v) && v[Symbol.toStringTag] == 'Module';\n  185    },\n  186    isConstructor(v) {\n  ...\n 1980  export function className(obj) {\n 1981    if(isObject(obj)) {\n 1982:     if(Symbol.toStringTag in obj) return obj[Symbol.toStringTag];\n 1983      if('constructor' in obj) return functionName(obj.constructor);\n 1984    }\n\n~/Projects/plot-cv/quickjs/inst/i686-w64-mingw32/usr/i686-w64-mingw32/sys-root/mingw/lib/quickjs/db.js:\n   95  \n   96  define(Pool.prototype, {\n   97:   [Symbol.toStringTag]: 'Pool'\n   98  });\n   99  \n\n~/Projects/plot-cv/quickjs/inst/i686-w64-mingw32/usr/i686-w64-mingw32/sys-root/mingw/lib/quickjs/repl.js:\n 2080  \n 2081  Object.assign(REPL.prototype, {\n 2082:   [Symbol.toStringTag]: 'REPL',\n 2083    handleInput: REPL.prototype.evalAndPrint,\n 2084    directives: loadModule\n\n~/Projects/plot-cv/quickjs/inst/i686-w64-mingw32/usr/i686-w64-mingw32/sys-root/mingw/lib/quickjs/streams.js:\n  137    }\n  138  \n  139:   define(ByLineStream.prototype, { [Symbol.toStringTag]: 'ByLineStream' });\n  140  \n  141    return ByLineStream;\n\n~/Projects/plot-cv/quickjs/inst/i686-w64-mingw32/usr/i686-w64-mingw32/sys-root/mingw/lib/quickjs/fs.js:\n  618    }\n  619  \n  620:   [Symbol.toStringTag] = 'inotify_event';\n  621  }\n  622  \n\n~/Projects/plot-cv/quickjs/inst/i686-w64-mingw32/usr/i686-w64-mingw32/sys-root/mingw/lib/quickjs/parser.js:\n   22  }\n   23  \n   24: define(Rule.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'Rule' });\n   25  \n   26  export class Terminal extends Rule {\n   ..\n   45  }\n   46  \n   47: define(Terminal.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'Terminal' });\n   48  \n   49  export class ZeroOrMore extends Rule {\n   ..\n   63  }\n   64  \n   65: define(ZeroOrMore.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'ZeroOrMore' });\n   66  \n   67  export function make_operators_set(...op_list) {\n\n~/Projects/plot-cv/quickjs/inst/i686-w64-mingw32/usr/i686-w64-mingw32/sys-root/mingw/lib/quickjs/events.js:\n   55  }\n   56  \n   57: EventEmitter.prototype[Symbol.toStringTag] = 'EventEmitter';\n   58  \n   59  const PRIVATE = Symbol('EventTarget');\n   ..\n   98  }\n   99  \n  100: EventTarget.prototype[Symbol.toStringTag] = 'EventTarget';\n  101  \n  102  const getMethods = obj =>\n\n~/Projects/plot-cv/quickjs/inst/i686-w64-mingw32/usr/i686-w64-mingw32/sys-root/mingw/lib/quickjs/vfs.js:\n  311            for(let chunk of q) written += ar.write(chunk);\n  312          },\n  313:         [Symbol.toStringTag]: 'WriteStream'\n  314        };\n  315      } else {\n  ...\n  329            error: () => ar.error != null,\n  330            close: () => ar.close(),\n  331:           [Symbol.toStringTag]: 'ReadStream'\n  332          };\n  333        }\n\n~/Projects/plot-cv/quickjs/inst/i686-w64-mingw32/usr/i686-w64-mingw32/sys-root/mingw/lib/quickjs/lexer/c.js:\n  118  globalThis.CLexer = CLexer;\n  119  \n  120: define(CLexer.prototype, { [Symbol.toStringTag]: 'CLexer' });\n  121  \n  122  export default CLexer;\n\n~/Projects/plot-cv/quickjs/inst/i686-w64-mingw32/usr/i686-w64-mingw32/sys-root/mingw/lib/quickjs/lexer/csv.js:\n   23    }\n   24  \n   25:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n   26      return \"CSVLexer\";\n   27    }\n\n~/Projects/plot-cv/quickjs/inst/i686-w64-mingw32/usr/i686-w64-mingw32/sys-root/mingw/lib/quickjs/lexer/ecmascript.js:\n  129    }\n  130  \n  131:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  132      return \"ECMAScriptLexer\";\n  133    }\n\n~/Projects/plot-cv/quickjs/inst/i686-w64-mingw32/usr/i686-w64-mingw32/sys-root/mingw/lib/quickjs/lexer/bnf.js:\n  194    }\n  195  \n  196:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  197      return \"BNFLexer\";\n  198    }\n\n~/Projects/plot-cv/quickjs/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/bin/resolve-imports.js:\n  295      close: () => {},\n  296      seek: (whence, offset) => os.seek(fd, whence, offset),\n  297:     [Symbol.toStringTag]: `FileWriter< ${fd} >`,\n  298      inspect() {\n  299:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  300      }\n  301    });\n  ...\n  316      write: fn,\n  317      close: () => {},\n  318:     [Symbol.toStringTag]: `ArrayWriter`,\n  319      inspect() {\n  320:       return inspect({ arr }) ?? this[Symbol.toStringTag];\n  321      }\n  322    });\n  ...\n  332      close: () => {},\n  333      seek: () => {},\n  334:     [Symbol.toStringTag]: `DummyWriter< ${name} >`,\n  335      inspect() {\n  336:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  337      }\n  338    });\n  ...\n  639  \n  640  define(Import.prototype, {\n  641:   [Symbol.toStringTag]: 'Import',\n  642    ids(pred = local => true) {\n  643      return ImportIds(this.tokens.slice())\n  ...\n 1346  \n 1347  define(NumericRange.prototype, {\n 1348:   [Symbol.toStringTag]: 'NumericRange',\n 1349    [inspectSymbol](depth, opts) {\n 1350      const [start, end] = this;\n ....\n 1404            return '';\n 1405          },\n 1406:         [Symbol.toStringTag]: 'FileMap(empty)'\n 1407        };\n 1408        return Object.setPrototypeOf(obj, FileMap.prototype);\n ....\n 1746  }\n 1747  \n 1748: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1749  \n 1750  function BufferFile(file, buf) {\n\n~/Projects/plot-cv/quickjs/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/lib/quickjs/inotify.js:\n   71                return this.watch(event);\n   72              },\n   73:             [Symbol.toStringTag]: 'InotifyEvent'\n   74            });\n   75  */\n\n~/Projects/plot-cv/quickjs/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/lib/quickjs/socklen_t.js:\n   16    }\n   17  \n   18:   get [Symbol.toStringTag]() {\n   19      return 'socklen_t';\n   20    }\n\n~/Projects/plot-cv/quickjs/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/lib/quickjs/console.js:\n   51      numberBase: 10,\n   52      classKey: Symbol.toStringTag,\n   53:     hideKeys: [Symbol.toStringTag]\n   54    };\n   55  \n\n~/Projects/plot-cv/quickjs/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/lib/quickjs/io.js:\n   51  }\n   52  \n   53: define(HandlerEntry.prototype, { [Symbol.toStringTag]: 'HandlerEntry' });\n   54  \n   55  export class DescriptorMap extends Array {\n   ..\n   90  }\n   91  \n   92: define(DescriptorMap.prototype, { [Symbol.toStringTag]: 'DescriptorMap' });\n   93  \n   94  export class Multiplexer {\n   ..\n  154  }\n  155  \n  156: define(Multiplexer.prototype, { [Symbol.toStringTag]: 'Multiplexer' });\n  157  \n  158  const io = new Multiplexer();\n\n~/Projects/plot-cv/quickjs/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/lib/quickjs/require.js:\n   95  }\n   96  \n   97: define(Module.prototype, { [Symbol.toStringTag]: 'Module' });\n   98  \n   99  class CJSModule extends Module {\n  ...\n  137  }\n  138  \n  139: define(CJSModule.prototype, { [Symbol.toStringTag]: 'CJSModule' });\n  140  \n  141  class ESModule extends Module {\n  ...\n  170  }\n  171  \n  172: define(ESModule.prototype, { [Symbol.toStringTag]: 'ESModule' });\n  173  \n  174  function statPath(path) {\n\n~/Projects/plot-cv/quickjs/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/lib/quickjs/xpath.js:\n   12  }\n   13  \n   14: DereferenceError.prototype[Symbol.toStringTag] = 'DereferenceError';\n   15  \n   16  export class XPath {\n   ..\n  118      return;\n  119      `\\x1b[1;31m${this.constructor.name ?? className(this)}\\x1b[0m ` +\n  120:       inspect([...this].map(GetKey) ?? { __proto__: { [Symbol.toStringTag]: 'XPath' }, ...obj }, {\n  121          ...opts,\n  122          customInspect: true\n  ...\n  124    }\n  125  \n  126:   get [Symbol.toStringTag]() {\n  127      return 'XPath';\n  128    }\n  ...\n  131  }\n  132  \n  133: define(XPath.prototype, { [Symbol.toStringTag]: 'XPath' });\n  134  \n  135  export const ImmutableXPath = XPath;\n\n~/Projects/plot-cv/quickjs/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/lib/quickjs/stack.js:\n   31  }\n   32  \n   33: Stack.prototype[Symbol.toStringTag] = 'Stack';\n   34  \n   35  Stack.prototype.toString = function() {\n   ..\n   46  Stack.prototype[inspectSymbol] = function(depth, options) {\n   47    return (\n   48:     `\\x1b[1;31m${this[Symbol.toStringTag]}\\x1b[0m ` +\n   49      inspect([...this], depth, {\n   50        ...options,\n   ..\n  216    }\n  217  \n  218:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  219      return 'StackFrame';\n  220    }\n\n~/Projects/plot-cv/quickjs/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/lib/quickjs/dom.js:\n  571  define(Node.prototype, Interface.prototype);\n  572  extend(Node.prototype, NODE_TYPES, { enumerable: false });\n  573: extend(Node.prototype, { [Symbol.toStringTag]: 'Node' }, { enumerable: false });\n  574  \n  575  function MakeCache(ctor, store = new WeakMap()) {\n  ...\n  652    NodeList.prototype,\n  653    {\n  654:     [Symbol.toStringTag]: 'NodeList',\n  655      *[Symbol.iterator]() {\n  656        const factory = Factory.for(this);\n  ...\n  701      constructor: NamedNodeMap,\n  702  \n  703:     [Symbol.toStringTag]: 'NamedNodeMap',\n  704  \n  705      get path() {\n  ...\n  994  }\n  995  \n  996: extend(Element.prototype, { [Symbol.toStringTag]: 'Element', nodeType: ELEMENT_NODE }, { enumerable: false });\n  997  \n  998  /*\n  ...\n 1167  }\n 1168  \n 1169: extend(Document.prototype, { [Symbol.toStringTag]: 'Document', nodeType: DOCUMENT_NODE }, { enumerable: false });\n 1170  \n 1171  export class Attr extends Node {\n ....\n 1227    {\n 1228      nodeType: ATTRIBUTE_NODE,\n 1229:     [Symbol.toStringTag]: 'Attr'\n 1230    },\n 1231    { enumerable: false }\n ....\n 1273  \n 1274    [inspectSymbol](depth, opts) {\n 1275:     return `\\x1b[1;31m${this[Symbol.toStringTag]}\\x1b[0m \\x1b[38;2;192;2550m${quote(this.data, \"'\")}\\x1b[0m`;\n 1276    }\n 1277  \n ....\n 1286      nodeType: TEXT_NODE,\n 1287      nodeName: '#text',\n 1288:     [Symbol.toStringTag]: 'Text'\n 1289    },\n 1290    { enumerable: false }\n ....\n 1333      nodeType: COMMENT_NODE,\n 1334      nodeName: '#comment',\n 1335:     [Symbol.toStringTag]: 'Comment'\n 1336    },\n 1337    { enumerable: false }\n ....\n 1436    TokenList.prototype,\n 1437    {\n 1438:     [Symbol.toStringTag]: 'TokenList'\n 1439    },\n 1440    { enumerable: false }\n ....\n 1594      constructor: CSSStyleDeclaration,\n 1595  \n 1596:     [Symbol.toStringTag]: 'CSSStyleDeclaration',\n 1597  \n 1598      get parentRule() {\n\n~/Projects/plot-cv/quickjs/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/lib/quickjs/tty.js:\n   10  \n   11  define(ReadStream.prototype, {\n   12:   [Symbol.toStringTag]: 'ReadStream'\n   13  });\n   14  \n   ..\n   93      configurable: true\n   94    },\n   95:   [Symbol.toStringTag]: { value: 'WriteStream', configurable: true }\n   96  });\n   97  \n\n~/Projects/plot-cv/quickjs/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/lib/quickjs/util.js:\n  182    },\n  183    isModuleNamespaceObject(v) {\n  184:     return isObject(v) && v[Symbol.toStringTag] == 'Module';\n  185    },\n  186    isConstructor(v) {\n  ...\n 1980  export function className(obj) {\n 1981    if(isObject(obj)) {\n 1982:     if(Symbol.toStringTag in obj) return obj[Symbol.toStringTag];\n 1983      if('constructor' in obj) return functionName(obj.constructor);\n 1984    }\n\n~/Projects/plot-cv/quickjs/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/lib/quickjs/db.js:\n   95  \n   96  define(Pool.prototype, {\n   97:   [Symbol.toStringTag]: 'Pool'\n   98  });\n   99  \n\n~/Projects/plot-cv/quickjs/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/lib/quickjs/repl.js:\n 2080  \n 2081  Object.assign(REPL.prototype, {\n 2082:   [Symbol.toStringTag]: 'REPL',\n 2083    handleInput: REPL.prototype.evalAndPrint,\n 2084    directives: loadModule\n\n~/Projects/plot-cv/quickjs/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/lib/quickjs/streams.js:\n  137    }\n  138  \n  139:   define(ByLineStream.prototype, { [Symbol.toStringTag]: 'ByLineStream' });\n  140  \n  141    return ByLineStream;\n\n~/Projects/plot-cv/quickjs/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/lib/quickjs/fs.js:\n  618    }\n  619  \n  620:   [Symbol.toStringTag] = 'inotify_event';\n  621  }\n  622  \n\n~/Projects/plot-cv/quickjs/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/lib/quickjs/parser.js:\n   22  }\n   23  \n   24: define(Rule.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'Rule' });\n   25  \n   26  export class Terminal extends Rule {\n   ..\n   45  }\n   46  \n   47: define(Terminal.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'Terminal' });\n   48  \n   49  export class ZeroOrMore extends Rule {\n   ..\n   63  }\n   64  \n   65: define(ZeroOrMore.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'ZeroOrMore' });\n   66  \n   67  export function make_operators_set(...op_list) {\n\n~/Projects/plot-cv/quickjs/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/lib/quickjs/events.js:\n   55  }\n   56  \n   57: EventEmitter.prototype[Symbol.toStringTag] = 'EventEmitter';\n   58  \n   59  const PRIVATE = Symbol('EventTarget');\n   ..\n   98  }\n   99  \n  100: EventTarget.prototype[Symbol.toStringTag] = 'EventTarget';\n  101  \n  102  const getMethods = obj =>\n\n~/Projects/plot-cv/quickjs/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/lib/quickjs/vfs.js:\n  311            for(let chunk of q) written += ar.write(chunk);\n  312          },\n  313:         [Symbol.toStringTag]: 'WriteStream'\n  314        };\n  315      } else {\n  ...\n  329            error: () => ar.error != null,\n  330            close: () => ar.close(),\n  331:           [Symbol.toStringTag]: 'ReadStream'\n  332          };\n  333        }\n\n~/Projects/plot-cv/quickjs/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/lib/quickjs/lexer/c.js:\n  118  globalThis.CLexer = CLexer;\n  119  \n  120: define(CLexer.prototype, { [Symbol.toStringTag]: 'CLexer' });\n  121  \n  122  export default CLexer;\n\n~/Projects/plot-cv/quickjs/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/lib/quickjs/lexer/csv.js:\n   23    }\n   24  \n   25:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n   26      return \"CSVLexer\";\n   27    }\n\n~/Projects/plot-cv/quickjs/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/lib/quickjs/lexer/ecmascript.js:\n  129    }\n  130  \n  131:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  132      return \"ECMAScriptLexer\";\n  133    }\n\n~/Projects/plot-cv/quickjs/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/lib/quickjs/lexer/bnf.js:\n  194    }\n  195  \n  196:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  197      return \"BNFLexer\";\n  198    }\n\n~/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/bin/resolve-imports.js:\n  295      close: () => {},\n  296      seek: (whence, offset) => os.seek(fd, whence, offset),\n  297:     [Symbol.toStringTag]: `FileWriter< ${fd} >`,\n  298      inspect() {\n  299:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  300      }\n  301    });\n  ...\n  316      write: fn,\n  317      close: () => {},\n  318:     [Symbol.toStringTag]: `ArrayWriter`,\n  319      inspect() {\n  320:       return inspect({ arr }) ?? this[Symbol.toStringTag];\n  321      }\n  322    });\n  ...\n  332      close: () => {},\n  333      seek: () => {},\n  334:     [Symbol.toStringTag]: `DummyWriter< ${name} >`,\n  335      inspect() {\n  336:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  337      }\n  338    });\n  ...\n  639  \n  640  define(Import.prototype, {\n  641:   [Symbol.toStringTag]: 'Import',\n  642    ids(pred = local => true) {\n  643      return ImportIds(this.tokens.slice())\n  ...\n 1346  \n 1347  define(NumericRange.prototype, {\n 1348:   [Symbol.toStringTag]: 'NumericRange',\n 1349    [inspectSymbol](depth, opts) {\n 1350      const [start, end] = this;\n ....\n 1404            return '';\n 1405          },\n 1406:         [Symbol.toStringTag]: 'FileMap(empty)'\n 1407        };\n 1408        return Object.setPrototypeOf(obj, FileMap.prototype);\n ....\n 1746  }\n 1747  \n 1748: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1749  \n 1750  function BufferFile(file, buf) {\n\n~/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/inotify.js:\n   71                return this.watch(event);\n   72              },\n   73:             [Symbol.toStringTag]: 'InotifyEvent'\n   74            });\n   75  */\n\n~/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/socklen_t.js:\n   16    }\n   17  \n   18:   get [Symbol.toStringTag]() {\n   19      return 'socklen_t';\n   20    }\n\n~/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/console.js:\n   51      numberBase: 10,\n   52      classKey: Symbol.toStringTag,\n   53:     hideKeys: [Symbol.toStringTag]\n   54    };\n   55  \n\n~/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/io.js:\n   51  }\n   52  \n   53: define(HandlerEntry.prototype, { [Symbol.toStringTag]: 'HandlerEntry' });\n   54  \n   55  export class DescriptorMap extends Array {\n   ..\n   90  }\n   91  \n   92: define(DescriptorMap.prototype, { [Symbol.toStringTag]: 'DescriptorMap' });\n   93  \n   94  export class Multiplexer {\n   ..\n  154  }\n  155  \n  156: define(Multiplexer.prototype, { [Symbol.toStringTag]: 'Multiplexer' });\n  157  \n  158  const io = new Multiplexer();\n\n~/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/require.js:\n   95  }\n   96  \n   97: define(Module.prototype, { [Symbol.toStringTag]: 'Module' });\n   98  \n   99  class CJSModule extends Module {\n  ...\n  137  }\n  138  \n  139: define(CJSModule.prototype, { [Symbol.toStringTag]: 'CJSModule' });\n  140  \n  141  class ESModule extends Module {\n  ...\n  170  }\n  171  \n  172: define(ESModule.prototype, { [Symbol.toStringTag]: 'ESModule' });\n  173  \n  174  function statPath(path) {\n\n~/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/xpath.js:\n   12  }\n   13  \n   14: DereferenceError.prototype[Symbol.toStringTag] = 'DereferenceError';\n   15  \n   16  export class XPath {\n   ..\n  118      return;\n  119      `\\x1b[1;31m${this.constructor.name ?? className(this)}\\x1b[0m ` +\n  120:       inspect([...this].map(GetKey) ?? { __proto__: { [Symbol.toStringTag]: 'XPath' }, ...obj }, {\n  121          ...opts,\n  122          customInspect: true\n  ...\n  124    }\n  125  \n  126:   get [Symbol.toStringTag]() {\n  127      return 'XPath';\n  128    }\n  ...\n  131  }\n  132  \n  133: define(XPath.prototype, { [Symbol.toStringTag]: 'XPath' });\n  134  \n  135  export const ImmutableXPath = XPath;\n\n~/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/stack.js:\n   31  }\n   32  \n   33: Stack.prototype[Symbol.toStringTag] = 'Stack';\n   34  \n   35  Stack.prototype.toString = function() {\n   ..\n   46  Stack.prototype[inspectSymbol] = function(depth, options) {\n   47    return (\n   48:     `\\x1b[1;31m${this[Symbol.toStringTag]}\\x1b[0m ` +\n   49      inspect([...this], depth, {\n   50        ...options,\n   ..\n  216    }\n  217  \n  218:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  219      return 'StackFrame';\n  220    }\n\n~/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/dom.js:\n  571  define(Node.prototype, Interface.prototype);\n  572  extend(Node.prototype, NODE_TYPES, { enumerable: false });\n  573: extend(Node.prototype, { [Symbol.toStringTag]: 'Node' }, { enumerable: false });\n  574  \n  575  function MakeCache(ctor, store = new WeakMap()) {\n  ...\n  652    NodeList.prototype,\n  653    {\n  654:     [Symbol.toStringTag]: 'NodeList',\n  655      *[Symbol.iterator]() {\n  656        const factory = Factory.for(this);\n  ...\n  701      constructor: NamedNodeMap,\n  702  \n  703:     [Symbol.toStringTag]: 'NamedNodeMap',\n  704  \n  705      get path() {\n  ...\n  994  }\n  995  \n  996: extend(Element.prototype, { [Symbol.toStringTag]: 'Element', nodeType: ELEMENT_NODE }, { enumerable: false });\n  997  \n  998  /*\n  ...\n 1167  }\n 1168  \n 1169: extend(Document.prototype, { [Symbol.toStringTag]: 'Document', nodeType: DOCUMENT_NODE }, { enumerable: false });\n 1170  \n 1171  export class Attr extends Node {\n ....\n 1227    {\n 1228      nodeType: ATTRIBUTE_NODE,\n 1229:     [Symbol.toStringTag]: 'Attr'\n 1230    },\n 1231    { enumerable: false }\n ....\n 1273  \n 1274    [inspectSymbol](depth, opts) {\n 1275:     return `\\x1b[1;31m${this[Symbol.toStringTag]}\\x1b[0m \\x1b[38;2;192;2550m${quote(this.data, \"'\")}\\x1b[0m`;\n 1276    }\n 1277  \n ....\n 1286      nodeType: TEXT_NODE,\n 1287      nodeName: '#text',\n 1288:     [Symbol.toStringTag]: 'Text'\n 1289    },\n 1290    { enumerable: false }\n ....\n 1333      nodeType: COMMENT_NODE,\n 1334      nodeName: '#comment',\n 1335:     [Symbol.toStringTag]: 'Comment'\n 1336    },\n 1337    { enumerable: false }\n ....\n 1436    TokenList.prototype,\n 1437    {\n 1438:     [Symbol.toStringTag]: 'TokenList'\n 1439    },\n 1440    { enumerable: false }\n ....\n 1594      constructor: CSSStyleDeclaration,\n 1595  \n 1596:     [Symbol.toStringTag]: 'CSSStyleDeclaration',\n 1597  \n 1598      get parentRule() {\n\n~/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/tty.js:\n   10  \n   11  define(ReadStream.prototype, {\n   12:   [Symbol.toStringTag]: 'ReadStream'\n   13  });\n   14  \n   ..\n   93      configurable: true\n   94    },\n   95:   [Symbol.toStringTag]: { value: 'WriteStream', configurable: true }\n   96  });\n   97  \n\n~/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/util.js:\n  182    },\n  183    isModuleNamespaceObject(v) {\n  184:     return isObject(v) && v[Symbol.toStringTag] == 'Module';\n  185    },\n  186    isConstructor(v) {\n  ...\n 1980  export function className(obj) {\n 1981    if(isObject(obj)) {\n 1982:     if(Symbol.toStringTag in obj) return obj[Symbol.toStringTag];\n 1983      if('constructor' in obj) return functionName(obj.constructor);\n 1984    }\n\n~/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/db.js:\n   95  \n   96  define(Pool.prototype, {\n   97:   [Symbol.toStringTag]: 'Pool'\n   98  });\n   99  \n\n~/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/repl.js:\n 2080  \n 2081  Object.assign(REPL.prototype, {\n 2082:   [Symbol.toStringTag]: 'REPL',\n 2083    handleInput: REPL.prototype.evalAndPrint,\n 2084    directives: loadModule\n\n~/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/streams.js:\n  137    }\n  138  \n  139:   define(ByLineStream.prototype, { [Symbol.toStringTag]: 'ByLineStream' });\n  140  \n  141    return ByLineStream;\n\n~/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/fs.js:\n  618    }\n  619  \n  620:   [Symbol.toStringTag] = 'inotify_event';\n  621  }\n  622  \n\n~/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/parser.js:\n   22  }\n   23  \n   24: define(Rule.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'Rule' });\n   25  \n   26  export class Terminal extends Rule {\n   ..\n   45  }\n   46  \n   47: define(Terminal.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'Terminal' });\n   48  \n   49  export class ZeroOrMore extends Rule {\n   ..\n   63  }\n   64  \n   65: define(ZeroOrMore.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'ZeroOrMore' });\n   66  \n   67  export function make_operators_set(...op_list) {\n\n~/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/events.js:\n   55  }\n   56  \n   57: EventEmitter.prototype[Symbol.toStringTag] = 'EventEmitter';\n   58  \n   59  const PRIVATE = Symbol('EventTarget');\n   ..\n   98  }\n   99  \n  100: EventTarget.prototype[Symbol.toStringTag] = 'EventTarget';\n  101  \n  102  const getMethods = obj =>\n\n~/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/vfs.js:\n  311            for(let chunk of q) written += ar.write(chunk);\n  312          },\n  313:         [Symbol.toStringTag]: 'WriteStream'\n  314        };\n  315      } else {\n  ...\n  329            error: () => ar.error != null,\n  330            close: () => ar.close(),\n  331:           [Symbol.toStringTag]: 'ReadStream'\n  332          };\n  333        }\n\n~/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/lexer/c.js:\n  118  globalThis.CLexer = CLexer;\n  119  \n  120: define(CLexer.prototype, { [Symbol.toStringTag]: 'CLexer' });\n  121  \n  122  export default CLexer;\n\n~/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/lexer/csv.js:\n   23    }\n   24  \n   25:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n   26      return \"CSVLexer\";\n   27    }\n\n~/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/lexer/ecmascript.js:\n  129    }\n  130  \n  131:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  132      return \"ECMAScriptLexer\";\n  133    }\n\n~/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/lexer/bnf.js:\n  194    }\n  195  \n  196:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  197      return \"BNFLexer\";\n  198    }\n\n~/Projects/plot-cv/quickjs/inst/x86_64-w64-mingw32/usr/x86_64-w64-mingw32/sys-root/mingw/bin/resolve-imports.js:\n  295      close: () => {},\n  296      seek: (whence, offset) => os.seek(fd, whence, offset),\n  297:     [Symbol.toStringTag]: `FileWriter< ${fd} >`,\n  298      inspect() {\n  299:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  300      }\n  301    });\n  ...\n  316      write: fn,\n  317      close: () => {},\n  318:     [Symbol.toStringTag]: `ArrayWriter`,\n  319      inspect() {\n  320:       return inspect({ arr }) ?? this[Symbol.toStringTag];\n  321      }\n  322    });\n  ...\n  332      close: () => {},\n  333      seek: () => {},\n  334:     [Symbol.toStringTag]: `DummyWriter< ${name} >`,\n  335      inspect() {\n  336:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  337      }\n  338    });\n  ...\n  639  \n  640  define(Import.prototype, {\n  641:   [Symbol.toStringTag]: 'Import',\n  642    ids(pred = local => true) {\n  643      return ImportIds(this.tokens.slice())\n  ...\n 1346  \n 1347  define(NumericRange.prototype, {\n 1348:   [Symbol.toStringTag]: 'NumericRange',\n 1349    [inspectSymbol](depth, opts) {\n 1350      const [start, end] = this;\n ....\n 1404            return '';\n 1405          },\n 1406:         [Symbol.toStringTag]: 'FileMap(empty)'\n 1407        };\n 1408        return Object.setPrototypeOf(obj, FileMap.prototype);\n ....\n 1746  }\n 1747  \n 1748: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1749  \n 1750  function BufferFile(file, buf) {\n\n~/Projects/plot-cv/quickjs/inst/x86_64-w64-mingw32/usr/x86_64-w64-mingw32/sys-root/mingw/lib/quickjs/inotify.js:\n   71                return this.watch(event);\n   72              },\n   73:             [Symbol.toStringTag]: 'InotifyEvent'\n   74            });\n   75  */\n\n~/Projects/plot-cv/quickjs/inst/x86_64-w64-mingw32/usr/x86_64-w64-mingw32/sys-root/mingw/lib/quickjs/socklen_t.js:\n   16    }\n   17  \n   18:   get [Symbol.toStringTag]() {\n   19      return 'socklen_t';\n   20    }\n\n~/Projects/plot-cv/quickjs/inst/x86_64-w64-mingw32/usr/x86_64-w64-mingw32/sys-root/mingw/lib/quickjs/console.js:\n   51      numberBase: 10,\n   52      classKey: Symbol.toStringTag,\n   53:     hideKeys: [Symbol.toStringTag]\n   54    };\n   55  \n\n~/Projects/plot-cv/quickjs/inst/x86_64-w64-mingw32/usr/x86_64-w64-mingw32/sys-root/mingw/lib/quickjs/io.js:\n   51  }\n   52  \n   53: define(HandlerEntry.prototype, { [Symbol.toStringTag]: 'HandlerEntry' });\n   54  \n   55  export class DescriptorMap extends Array {\n   ..\n   90  }\n   91  \n   92: define(DescriptorMap.prototype, { [Symbol.toStringTag]: 'DescriptorMap' });\n   93  \n   94  export class Multiplexer {\n   ..\n  154  }\n  155  \n  156: define(Multiplexer.prototype, { [Symbol.toStringTag]: 'Multiplexer' });\n  157  \n  158  const io = new Multiplexer();\n\n~/Projects/plot-cv/quickjs/inst/x86_64-w64-mingw32/usr/x86_64-w64-mingw32/sys-root/mingw/lib/quickjs/require.js:\n   95  }\n   96  \n   97: define(Module.prototype, { [Symbol.toStringTag]: 'Module' });\n   98  \n   99  class CJSModule extends Module {\n  ...\n  137  }\n  138  \n  139: define(CJSModule.prototype, { [Symbol.toStringTag]: 'CJSModule' });\n  140  \n  141  class ESModule extends Module {\n  ...\n  170  }\n  171  \n  172: define(ESModule.prototype, { [Symbol.toStringTag]: 'ESModule' });\n  173  \n  174  function statPath(path) {\n\n~/Projects/plot-cv/quickjs/inst/x86_64-w64-mingw32/usr/x86_64-w64-mingw32/sys-root/mingw/lib/quickjs/xpath.js:\n   12  }\n   13  \n   14: DereferenceError.prototype[Symbol.toStringTag] = 'DereferenceError';\n   15  \n   16  export class XPath {\n   ..\n  118      return;\n  119      `\\x1b[1;31m${this.constructor.name ?? className(this)}\\x1b[0m ` +\n  120:       inspect([...this].map(GetKey) ?? { __proto__: { [Symbol.toStringTag]: 'XPath' }, ...obj }, {\n  121          ...opts,\n  122          customInspect: true\n  ...\n  124    }\n  125  \n  126:   get [Symbol.toStringTag]() {\n  127      return 'XPath';\n  128    }\n  ...\n  131  }\n  132  \n  133: define(XPath.prototype, { [Symbol.toStringTag]: 'XPath' });\n  134  \n  135  export const ImmutableXPath = XPath;\n\n~/Projects/plot-cv/quickjs/inst/x86_64-w64-mingw32/usr/x86_64-w64-mingw32/sys-root/mingw/lib/quickjs/stack.js:\n   31  }\n   32  \n   33: Stack.prototype[Symbol.toStringTag] = 'Stack';\n   34  \n   35  Stack.prototype.toString = function() {\n   ..\n   46  Stack.prototype[inspectSymbol] = function(depth, options) {\n   47    return (\n   48:     `\\x1b[1;31m${this[Symbol.toStringTag]}\\x1b[0m ` +\n   49      inspect([...this], depth, {\n   50        ...options,\n   ..\n  216    }\n  217  \n  218:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  219      return 'StackFrame';\n  220    }\n\n~/Projects/plot-cv/quickjs/inst/x86_64-w64-mingw32/usr/x86_64-w64-mingw32/sys-root/mingw/lib/quickjs/dom.js:\n  571  define(Node.prototype, Interface.prototype);\n  572  extend(Node.prototype, NODE_TYPES, { enumerable: false });\n  573: extend(Node.prototype, { [Symbol.toStringTag]: 'Node' }, { enumerable: false });\n  574  \n  575  function MakeCache(ctor, store = new WeakMap()) {\n  ...\n  652    NodeList.prototype,\n  653    {\n  654:     [Symbol.toStringTag]: 'NodeList',\n  655      *[Symbol.iterator]() {\n  656        const factory = Factory.for(this);\n  ...\n  701      constructor: NamedNodeMap,\n  702  \n  703:     [Symbol.toStringTag]: 'NamedNodeMap',\n  704  \n  705      get path() {\n  ...\n  994  }\n  995  \n  996: extend(Element.prototype, { [Symbol.toStringTag]: 'Element', nodeType: ELEMENT_NODE }, { enumerable: false });\n  997  \n  998  /*\n  ...\n 1167  }\n 1168  \n 1169: extend(Document.prototype, { [Symbol.toStringTag]: 'Document', nodeType: DOCUMENT_NODE }, { enumerable: false });\n 1170  \n 1171  export class Attr extends Node {\n ....\n 1227    {\n 1228      nodeType: ATTRIBUTE_NODE,\n 1229:     [Symbol.toStringTag]: 'Attr'\n 1230    },\n 1231    { enumerable: false }\n ....\n 1273  \n 1274    [inspectSymbol](depth, opts) {\n 1275:     return `\\x1b[1;31m${this[Symbol.toStringTag]}\\x1b[0m \\x1b[38;2;192;2550m${quote(this.data, \"'\")}\\x1b[0m`;\n 1276    }\n 1277  \n ....\n 1286      nodeType: TEXT_NODE,\n 1287      nodeName: '#text',\n 1288:     [Symbol.toStringTag]: 'Text'\n 1289    },\n 1290    { enumerable: false }\n ....\n 1333      nodeType: COMMENT_NODE,\n 1334      nodeName: '#comment',\n 1335:     [Symbol.toStringTag]: 'Comment'\n 1336    },\n 1337    { enumerable: false }\n ....\n 1436    TokenList.prototype,\n 1437    {\n 1438:     [Symbol.toStringTag]: 'TokenList'\n 1439    },\n 1440    { enumerable: false }\n ....\n 1594      constructor: CSSStyleDeclaration,\n 1595  \n 1596:     [Symbol.toStringTag]: 'CSSStyleDeclaration',\n 1597  \n 1598      get parentRule() {\n\n~/Projects/plot-cv/quickjs/inst/x86_64-w64-mingw32/usr/x86_64-w64-mingw32/sys-root/mingw/lib/quickjs/tty.js:\n   10  \n   11  define(ReadStream.prototype, {\n   12:   [Symbol.toStringTag]: 'ReadStream'\n   13  });\n   14  \n   ..\n   93      configurable: true\n   94    },\n   95:   [Symbol.toStringTag]: { value: 'WriteStream', configurable: true }\n   96  });\n   97  \n\n~/Projects/plot-cv/quickjs/inst/x86_64-w64-mingw32/usr/x86_64-w64-mingw32/sys-root/mingw/lib/quickjs/util.js:\n  182    },\n  183    isModuleNamespaceObject(v) {\n  184:     return isObject(v) && v[Symbol.toStringTag] == 'Module';\n  185    },\n  186    isConstructor(v) {\n  ...\n 1980  export function className(obj) {\n 1981    if(isObject(obj)) {\n 1982:     if(Symbol.toStringTag in obj) return obj[Symbol.toStringTag];\n 1983      if('constructor' in obj) return functionName(obj.constructor);\n 1984    }\n\n~/Projects/plot-cv/quickjs/inst/x86_64-w64-mingw32/usr/x86_64-w64-mingw32/sys-root/mingw/lib/quickjs/db.js:\n   95  \n   96  define(Pool.prototype, {\n   97:   [Symbol.toStringTag]: 'Pool'\n   98  });\n   99  \n\n~/Projects/plot-cv/quickjs/inst/x86_64-w64-mingw32/usr/x86_64-w64-mingw32/sys-root/mingw/lib/quickjs/repl.js:\n 2080  \n 2081  Object.assign(REPL.prototype, {\n 2082:   [Symbol.toStringTag]: 'REPL',\n 2083    handleInput: REPL.prototype.evalAndPrint,\n 2084    directives: loadModule\n\n~/Projects/plot-cv/quickjs/inst/x86_64-w64-mingw32/usr/x86_64-w64-mingw32/sys-root/mingw/lib/quickjs/streams.js:\n  137    }\n  138  \n  139:   define(ByLineStream.prototype, { [Symbol.toStringTag]: 'ByLineStream' });\n  140  \n  141    return ByLineStream;\n\n~/Projects/plot-cv/quickjs/inst/x86_64-w64-mingw32/usr/x86_64-w64-mingw32/sys-root/mingw/lib/quickjs/fs.js:\n  618    }\n  619  \n  620:   [Symbol.toStringTag] = 'inotify_event';\n  621  }\n  622  \n\n~/Projects/plot-cv/quickjs/inst/x86_64-w64-mingw32/usr/x86_64-w64-mingw32/sys-root/mingw/lib/quickjs/parser.js:\n   22  }\n   23  \n   24: define(Rule.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'Rule' });\n   25  \n   26  export class Terminal extends Rule {\n   ..\n   45  }\n   46  \n   47: define(Terminal.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'Terminal' });\n   48  \n   49  export class ZeroOrMore extends Rule {\n   ..\n   63  }\n   64  \n   65: define(ZeroOrMore.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'ZeroOrMore' });\n   66  \n   67  export function make_operators_set(...op_list) {\n\n~/Projects/plot-cv/quickjs/inst/x86_64-w64-mingw32/usr/x86_64-w64-mingw32/sys-root/mingw/lib/quickjs/events.js:\n   55  }\n   56  \n   57: EventEmitter.prototype[Symbol.toStringTag] = 'EventEmitter';\n   58  \n   59  const PRIVATE = Symbol('EventTarget');\n   ..\n   98  }\n   99  \n  100: EventTarget.prototype[Symbol.toStringTag] = 'EventTarget';\n  101  \n  102  const getMethods = obj =>\n\n~/Projects/plot-cv/quickjs/inst/x86_64-w64-mingw32/usr/x86_64-w64-mingw32/sys-root/mingw/lib/quickjs/vfs.js:\n  311            for(let chunk of q) written += ar.write(chunk);\n  312          },\n  313:         [Symbol.toStringTag]: 'WriteStream'\n  314        };\n  315      } else {\n  ...\n  329            error: () => ar.error != null,\n  330            close: () => ar.close(),\n  331:           [Symbol.toStringTag]: 'ReadStream'\n  332          };\n  333        }\n\n~/Projects/plot-cv/quickjs/inst/x86_64-w64-mingw32/usr/x86_64-w64-mingw32/sys-root/mingw/lib/quickjs/lexer/c.js:\n  118  globalThis.CLexer = CLexer;\n  119  \n  120: define(CLexer.prototype, { [Symbol.toStringTag]: 'CLexer' });\n  121  \n  122  export default CLexer;\n\n~/Projects/plot-cv/quickjs/inst/x86_64-w64-mingw32/usr/x86_64-w64-mingw32/sys-root/mingw/lib/quickjs/lexer/csv.js:\n   23    }\n   24  \n   25:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n   26      return \"CSVLexer\";\n   27    }\n\n~/Projects/plot-cv/quickjs/inst/x86_64-w64-mingw32/usr/x86_64-w64-mingw32/sys-root/mingw/lib/quickjs/lexer/ecmascript.js:\n  129    }\n  130  \n  131:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  132      return \"ECMAScriptLexer\";\n  133    }\n\n~/Projects/plot-cv/quickjs/inst/x86_64-w64-mingw32/usr/x86_64-w64-mingw32/sys-root/mingw/lib/quickjs/lexer/bnf.js:\n  194    }\n  195  \n  196:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  197      return \"BNFLexer\";\n  198    }\n\n~/Projects/plot-cv/quickjs/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/bin/resolve-imports.js:\n  295      close: () => {},\n  296      seek: (whence, offset) => os.seek(fd, whence, offset),\n  297:     [Symbol.toStringTag]: `FileWriter< ${fd} >`,\n  298      inspect() {\n  299:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  300      }\n  301    });\n  ...\n  316      write: fn,\n  317      close: () => {},\n  318:     [Symbol.toStringTag]: `ArrayWriter`,\n  319      inspect() {\n  320:       return inspect({ arr }) ?? this[Symbol.toStringTag];\n  321      }\n  322    });\n  ...\n  332      close: () => {},\n  333      seek: () => {},\n  334:     [Symbol.toStringTag]: `DummyWriter< ${name} >`,\n  335      inspect() {\n  336:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  337      }\n  338    });\n  ...\n  639  \n  640  define(Import.prototype, {\n  641:   [Symbol.toStringTag]: 'Import',\n  642    ids(pred = local => true) {\n  643      return ImportIds(this.tokens.slice())\n  ...\n 1346  \n 1347  define(NumericRange.prototype, {\n 1348:   [Symbol.toStringTag]: 'NumericRange',\n 1349    [inspectSymbol](depth, opts) {\n 1350      const [start, end] = this;\n ....\n 1404            return '';\n 1405          },\n 1406:         [Symbol.toStringTag]: 'FileMap(empty)'\n 1407        };\n 1408        return Object.setPrototypeOf(obj, FileMap.prototype);\n ....\n 1746  }\n 1747  \n 1748: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1749  \n 1750  function BufferFile(file, buf) {\n\n~/Projects/plot-cv/quickjs/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/inotify.js:\n   71                return this.watch(event);\n   72              },\n   73:             [Symbol.toStringTag]: 'InotifyEvent'\n   74            });\n   75  */\n\n~/Projects/plot-cv/quickjs/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/socklen_t.js:\n   16    }\n   17  \n   18:   get [Symbol.toStringTag]() {\n   19      return 'socklen_t';\n   20    }\n\n~/Projects/plot-cv/quickjs/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/console.js:\n   51      numberBase: 10,\n   52      classKey: Symbol.toStringTag,\n   53:     hideKeys: [Symbol.toStringTag]\n   54    };\n   55  \n\n~/Projects/plot-cv/quickjs/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/io.js:\n   51  }\n   52  \n   53: define(HandlerEntry.prototype, { [Symbol.toStringTag]: 'HandlerEntry' });\n   54  \n   55  export class DescriptorMap extends Array {\n   ..\n   90  }\n   91  \n   92: define(DescriptorMap.prototype, { [Symbol.toStringTag]: 'DescriptorMap' });\n   93  \n   94  export class Multiplexer {\n   ..\n  154  }\n  155  \n  156: define(Multiplexer.prototype, { [Symbol.toStringTag]: 'Multiplexer' });\n  157  \n  158  const io = new Multiplexer();\n\n~/Projects/plot-cv/quickjs/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/require.js:\n   95  }\n   96  \n   97: define(Module.prototype, { [Symbol.toStringTag]: 'Module' });\n   98  \n   99  class CJSModule extends Module {\n  ...\n  137  }\n  138  \n  139: define(CJSModule.prototype, { [Symbol.toStringTag]: 'CJSModule' });\n  140  \n  141  class ESModule extends Module {\n  ...\n  170  }\n  171  \n  172: define(ESModule.prototype, { [Symbol.toStringTag]: 'ESModule' });\n  173  \n  174  function statPath(path) {\n\n~/Projects/plot-cv/quickjs/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/xpath.js:\n   12  }\n   13  \n   14: DereferenceError.prototype[Symbol.toStringTag] = 'DereferenceError';\n   15  \n   16  export class XPath {\n   ..\n  118      return;\n  119      `\\x1b[1;31m${this.constructor.name ?? className(this)}\\x1b[0m ` +\n  120:       inspect([...this].map(GetKey) ?? { __proto__: { [Symbol.toStringTag]: 'XPath' }, ...obj }, {\n  121          ...opts,\n  122          customInspect: true\n  ...\n  124    }\n  125  \n  126:   get [Symbol.toStringTag]() {\n  127      return 'XPath';\n  128    }\n  ...\n  131  }\n  132  \n  133: define(XPath.prototype, { [Symbol.toStringTag]: 'XPath' });\n  134  \n  135  export const ImmutableXPath = XPath;\n\n~/Projects/plot-cv/quickjs/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/stack.js:\n   31  }\n   32  \n   33: Stack.prototype[Symbol.toStringTag] = 'Stack';\n   34  \n   35  Stack.prototype.toString = function() {\n   ..\n   46  Stack.prototype[inspectSymbol] = function(depth, options) {\n   47    return (\n   48:     `\\x1b[1;31m${this[Symbol.toStringTag]}\\x1b[0m ` +\n   49      inspect([...this], depth, {\n   50        ...options,\n   ..\n  216    }\n  217  \n  218:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  219      return 'StackFrame';\n  220    }\n\n~/Projects/plot-cv/quickjs/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/dom.js:\n  571  define(Node.prototype, Interface.prototype);\n  572  extend(Node.prototype, NODE_TYPES, { enumerable: false });\n  573: extend(Node.prototype, { [Symbol.toStringTag]: 'Node' }, { enumerable: false });\n  574  \n  575  function MakeCache(ctor, store = new WeakMap()) {\n  ...\n  652    NodeList.prototype,\n  653    {\n  654:     [Symbol.toStringTag]: 'NodeList',\n  655      *[Symbol.iterator]() {\n  656        const factory = Factory.for(this);\n  ...\n  701      constructor: NamedNodeMap,\n  702  \n  703:     [Symbol.toStringTag]: 'NamedNodeMap',\n  704  \n  705      get path() {\n  ...\n  994  }\n  995  \n  996: extend(Element.prototype, { [Symbol.toStringTag]: 'Element', nodeType: ELEMENT_NODE }, { enumerable: false });\n  997  \n  998  /*\n  ...\n 1167  }\n 1168  \n 1169: extend(Document.prototype, { [Symbol.toStringTag]: 'Document', nodeType: DOCUMENT_NODE }, { enumerable: false });\n 1170  \n 1171  export class Attr extends Node {\n ....\n 1227    {\n 1228      nodeType: ATTRIBUTE_NODE,\n 1229:     [Symbol.toStringTag]: 'Attr'\n 1230    },\n 1231    { enumerable: false }\n ....\n 1273  \n 1274    [inspectSymbol](depth, opts) {\n 1275:     return `\\x1b[1;31m${this[Symbol.toStringTag]}\\x1b[0m \\x1b[38;2;192;2550m${quote(this.data, \"'\")}\\x1b[0m`;\n 1276    }\n 1277  \n ....\n 1286      nodeType: TEXT_NODE,\n 1287      nodeName: '#text',\n 1288:     [Symbol.toStringTag]: 'Text'\n 1289    },\n 1290    { enumerable: false }\n ....\n 1333      nodeType: COMMENT_NODE,\n 1334      nodeName: '#comment',\n 1335:     [Symbol.toStringTag]: 'Comment'\n 1336    },\n 1337    { enumerable: false }\n ....\n 1436    TokenList.prototype,\n 1437    {\n 1438:     [Symbol.toStringTag]: 'TokenList'\n 1439    },\n 1440    { enumerable: false }\n ....\n 1594      constructor: CSSStyleDeclaration,\n 1595  \n 1596:     [Symbol.toStringTag]: 'CSSStyleDeclaration',\n 1597  \n 1598      get parentRule() {\n\n~/Projects/plot-cv/quickjs/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/tty.js:\n   10  \n   11  define(ReadStream.prototype, {\n   12:   [Symbol.toStringTag]: 'ReadStream'\n   13  });\n   14  \n   ..\n   93      configurable: true\n   94    },\n   95:   [Symbol.toStringTag]: { value: 'WriteStream', configurable: true }\n   96  });\n   97  \n\n~/Projects/plot-cv/quickjs/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/util.js:\n  182    },\n  183    isModuleNamespaceObject(v) {\n  184:     return isObject(v) && v[Symbol.toStringTag] == 'Module';\n  185    },\n  186    isConstructor(v) {\n  ...\n 1980  export function className(obj) {\n 1981    if(isObject(obj)) {\n 1982:     if(Symbol.toStringTag in obj) return obj[Symbol.toStringTag];\n 1983      if('constructor' in obj) return functionName(obj.constructor);\n 1984    }\n\n~/Projects/plot-cv/quickjs/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/db.js:\n   95  \n   96  define(Pool.prototype, {\n   97:   [Symbol.toStringTag]: 'Pool'\n   98  });\n   99  \n\n~/Projects/plot-cv/quickjs/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/repl.js:\n 2080  \n 2081  Object.assign(REPL.prototype, {\n 2082:   [Symbol.toStringTag]: 'REPL',\n 2083    handleInput: REPL.prototype.evalAndPrint,\n 2084    directives: loadModule\n\n~/Projects/plot-cv/quickjs/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/streams.js:\n  137    }\n  138  \n  139:   define(ByLineStream.prototype, { [Symbol.toStringTag]: 'ByLineStream' });\n  140  \n  141    return ByLineStream;\n\n~/Projects/plot-cv/quickjs/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/fs.js:\n  618    }\n  619  \n  620:   [Symbol.toStringTag] = 'inotify_event';\n  621  }\n  622  \n\n~/Projects/plot-cv/quickjs/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/parser.js:\n   22  }\n   23  \n   24: define(Rule.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'Rule' });\n   25  \n   26  export class Terminal extends Rule {\n   ..\n   45  }\n   46  \n   47: define(Terminal.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'Terminal' });\n   48  \n   49  export class ZeroOrMore extends Rule {\n   ..\n   63  }\n   64  \n   65: define(ZeroOrMore.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'ZeroOrMore' });\n   66  \n   67  export function make_operators_set(...op_list) {\n\n~/Projects/plot-cv/quickjs/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/events.js:\n   55  }\n   56  \n   57: EventEmitter.prototype[Symbol.toStringTag] = 'EventEmitter';\n   58  \n   59  const PRIVATE = Symbol('EventTarget');\n   ..\n   98  }\n   99  \n  100: EventTarget.prototype[Symbol.toStringTag] = 'EventTarget';\n  101  \n  102  const getMethods = obj =>\n\n~/Projects/plot-cv/quickjs/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/vfs.js:\n  311            for(let chunk of q) written += ar.write(chunk);\n  312          },\n  313:         [Symbol.toStringTag]: 'WriteStream'\n  314        };\n  315      } else {\n  ...\n  329            error: () => ar.error != null,\n  330            close: () => ar.close(),\n  331:           [Symbol.toStringTag]: 'ReadStream'\n  332          };\n  333        }\n\n~/Projects/plot-cv/quickjs/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/lexer/c.js:\n  118  globalThis.CLexer = CLexer;\n  119  \n  120: define(CLexer.prototype, { [Symbol.toStringTag]: 'CLexer' });\n  121  \n  122  export default CLexer;\n\n~/Projects/plot-cv/quickjs/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/lexer/csv.js:\n   23    }\n   24  \n   25:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n   26      return \"CSVLexer\";\n   27    }\n\n~/Projects/plot-cv/quickjs/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/lexer/ecmascript.js:\n  129    }\n  130  \n  131:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  132      return \"ECMAScriptLexer\";\n  133    }\n\n~/Projects/plot-cv/quickjs/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/lexer/bnf.js:\n  194    }\n  195  \n  196:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  197      return \"BNFLexer\";\n  198    }\n\n~/Projects/plot-cv/quickjs-2024-01-13/quickjs.c:\n 40738  static const JSCFunctionListEntry js_array_iterator_proto_funcs[] = {\n 40739      JS_ITERATOR_NEXT_DEF(\"next\", 0, js_array_iterator_next, 0 ),\n 40740:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Array Iterator\", JS_PROP_CONFIGURABLE ),\n 40741  };\n 40742  \n .....\n 42883  static const JSCFunctionListEntry js_string_iterator_proto_funcs[] = {\n 42884      JS_ITERATOR_NEXT_DEF(\"next\", 0, js_string_iterator_next, 0 ),\n 42885:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"String Iterator\", JS_PROP_CONFIGURABLE ),\n 42886  };\n 42887  \n .....\n 43149      JS_CFUNC_DEF(\"imul\", 2, js_math_imul ),\n 43150      JS_CFUNC_DEF(\"clz32\", 1, js_math_clz32 ),\n 43151:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Math\", JS_PROP_CONFIGURABLE ),\n 43152      JS_PROP_DOUBLE_DEF(\"E\", 2.718281828459045, 0 ),\n 43153      JS_PROP_DOUBLE_DEF(\"LN10\", 2.302585092994046, 0 ),\n .....\n 44786  static const JSCFunctionListEntry js_regexp_string_iterator_proto_funcs[] = {\n 44787      JS_ITERATOR_NEXT_DEF(\"next\", 0, js_regexp_string_iterator_next, 0 ),\n 44788:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"RegExp String Iterator\", JS_PROP_CONFIGURABLE ),\n 44789  };\n 44790  \n .....\n 45498      JS_CFUNC_DEF(\"parse\", 2, js_json_parse ),\n 45499      JS_CFUNC_DEF(\"stringify\", 3, js_json_stringify ),\n 45500:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"JSON\", JS_PROP_CONFIGURABLE ),\n 45501  };\n 45502  \n .....\n 45672      JS_CFUNC_DEF(\"set\", 3, js_reflect_set ),\n 45673      JS_CFUNC_DEF(\"setPrototypeOf\", 2, js_reflect_setPrototypeOf ),\n 45674:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Reflect\", JS_PROP_CONFIGURABLE ),\n 45675  };\n 45676  \n .....\n 46714      // XXX: should have writable: false\n 46715      JS_CFUNC_DEF(\"[Symbol.toPrimitive]\", 1, js_symbol_valueOf ),\n 46716:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Symbol\", JS_PROP_CONFIGURABLE ),\n 46717      JS_CGETSET_DEF(\"description\", js_symbol_get_description, NULL ),\n 46718  };\n .....\n 47553      JS_CFUNC_MAGIC_DEF(\"entries\", 0, js_create_map_iterator, (JS_ITERATOR_KIND_KEY_AND_VALUE << 2) | 0 ),\n 47554      JS_ALIAS_DEF(\"[Symbol.iterator]\", \"entries\" ),\n 47555:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Map\", JS_PROP_CONFIGURABLE ),\n 47556  };\n 47557  \n 47558  static const JSCFunctionListEntry js_map_iterator_proto_funcs[] = {\n 47559      JS_ITERATOR_NEXT_DEF(\"next\", 0, js_map_iterator_next, 0 ),\n 47560:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Map Iterator\", JS_PROP_CONFIGURABLE ),\n 47561  };\n 47562  \n .....\n 47572      JS_ALIAS_DEF(\"[Symbol.iterator]\", \"values\" ),\n 47573      JS_CFUNC_MAGIC_DEF(\"entries\", 0, js_create_map_iterator, (JS_ITERATOR_KIND_KEY_AND_VALUE << 2) | MAGIC_SET ),\n 47574:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Set\", JS_PROP_CONFIGURABLE ),\n 47575  };\n 47576  \n 47577  static const JSCFunctionListEntry js_set_iterator_proto_funcs[] = {\n 47578      JS_ITERATOR_NEXT_DEF(\"next\", 0, js_map_iterator_next, MAGIC_SET ),\n 47579:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Set Iterator\", JS_PROP_CONFIGURABLE ),\n 47580  };\n 47581  \n .....\n 47585      JS_CFUNC_MAGIC_DEF(\"has\", 1, js_map_has, MAGIC_WEAK ),\n 47586      JS_CFUNC_MAGIC_DEF(\"delete\", 1, js_map_delete, MAGIC_WEAK ),\n 47587:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"WeakMap\", JS_PROP_CONFIGURABLE ),\n 47588  };\n 47589  \n .....\n 47592      JS_CFUNC_MAGIC_DEF(\"has\", 1, js_map_has, MAGIC_SET | MAGIC_WEAK ),\n 47593      JS_CFUNC_MAGIC_DEF(\"delete\", 1, js_map_delete, MAGIC_SET | MAGIC_WEAK ),\n 47594:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"WeakSet\", JS_PROP_CONFIGURABLE ),\n 47595  };\n 47596  \n .....\n 47646  /* Generator */\n 47647  static const JSCFunctionListEntry js_generator_function_proto_funcs[] = {\n 47648:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"GeneratorFunction\", JS_PROP_CONFIGURABLE),\n 47649  };\n 47650  \n .....\n 47653      JS_ITERATOR_NEXT_DEF(\"return\", 1, js_generator_next, GEN_MAGIC_RETURN ),\n 47654      JS_ITERATOR_NEXT_DEF(\"throw\", 1, js_generator_next, GEN_MAGIC_THROW ),\n 47655:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Generator\", JS_PROP_CONFIGURABLE),\n 47656  };\n 47657  \n .....\n 48662      JS_CFUNC_DEF(\"catch\", 1, js_promise_catch ),\n 48663      JS_CFUNC_DEF(\"finally\", 1, js_promise_finally ),\n 48664:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Promise\", JS_PROP_CONFIGURABLE ),\n 48665  };\n 48666  \n 48667  /* AsyncFunction */\n 48668  static const JSCFunctionListEntry js_async_function_proto_funcs[] = {\n 48669:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"AsyncFunction\", JS_PROP_CONFIGURABLE ),\n 48670  };\n 48671  \n .....\n 48864  \n 48865  static const JSCFunctionListEntry js_async_generator_function_proto_funcs[] = {\n 48866:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"AsyncGeneratorFunction\", JS_PROP_CONFIGURABLE ),\n 48867  };\n 48868  \n .....\n 48873      JS_CFUNC_MAGIC_DEF(\"return\", 1, js_async_generator_next, GEN_MAGIC_RETURN ),\n 48874      JS_CFUNC_MAGIC_DEF(\"throw\", 1, js_async_generator_next, GEN_MAGIC_THROW ),\n 48875:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"AsyncGenerator\", JS_PROP_CONFIGURABLE ),\n 48876  };\n 48877  \n .....\n 50839      JS_CFUNC_DEF(\"toString\", 0, js_bigint_toString ),\n 50840      JS_CFUNC_DEF(\"valueOf\", 0, js_bigint_valueOf ),\n 50841:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"BigInt\", JS_PROP_CONFIGURABLE ),\n 50842  };\n 50843  \n .....\n 52875      JS_CGETSET_MAGIC_DEF(\"byteLength\", js_array_buffer_get_byteLength, NULL, JS_CLASS_ARRAY_BUFFER ),\n 52876      JS_CFUNC_MAGIC_DEF(\"slice\", 2, js_array_buffer_slice, JS_CLASS_ARRAY_BUFFER ),\n 52877:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"ArrayBuffer\", JS_PROP_CONFIGURABLE ),\n 52878  };\n 52879  \n .....\n 52887      JS_CGETSET_MAGIC_DEF(\"byteLength\", js_array_buffer_get_byteLength, NULL, JS_CLASS_SHARED_ARRAY_BUFFER ),\n 52888      JS_CFUNC_MAGIC_DEF(\"slice\", 2, js_array_buffer_slice, JS_CLASS_SHARED_ARRAY_BUFFER ),\n 52889:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"SharedArrayBuffer\", JS_PROP_CONFIGURABLE ),\n 52890  };\n 52891  \n .....\n 54424      JS_CFUNC_MAGIC_DEF(\"keys\", 0, js_create_typed_array_iterator, JS_ITERATOR_KIND_KEY ),\n 54425      JS_CFUNC_MAGIC_DEF(\"entries\", 0, js_create_typed_array_iterator, JS_ITERATOR_KIND_KEY_AND_VALUE ),\n 54426:     JS_CGETSET_DEF(\"[Symbol.toStringTag]\", js_typed_array_get_toStringTag, NULL ),\n 54427      JS_CFUNC_DEF(\"copyWithin\", 2, js_typed_array_copyWithin ),\n 54428      JS_CFUNC_MAGIC_DEF(\"every\", 1, js_array_every, special_every | special_TA ),\n .....\n 55006      JS_CFUNC_MAGIC_DEF(\"setFloat32\", 2, js_dataview_setValue, JS_CLASS_FLOAT32_ARRAY ),\n 55007      JS_CFUNC_MAGIC_DEF(\"setFloat64\", 2, js_dataview_setValue, JS_CLASS_FLOAT64_ARRAY ),\n 55008:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"DataView\", JS_PROP_CONFIGURABLE ),\n 55009  };\n 55010  \n .....\n 55445      JS_CFUNC_DEF(\"wait\", 4, js_atomics_wait ),\n 55446      JS_CFUNC_DEF(\"notify\", 3, js_atomics_notify ),\n 55447:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Atomics\", JS_PROP_CONFIGURABLE ),\n 55448  };\n 55449  \n\n~/Projects/plot-cv/lib/compileCommand.js:\n  114  \n  115    /* [Symbol.inspect](depth, options = {}) {\n  116:     return '\\x1b[1;31m' + this[Symbol.toStringTag] + '\\x1b[0m ' + inspect(this.argv, options);\n  117    }*/\n  118  \n  ...\n  137        };\n  138      },\n  139:     [Symbol.toStringTag]: 'Command' /*, [Symbol.species]: Command*/\n  140    })\n  141  );\n  ...\n  227    CompileCommand.prototype,\n  228    nonenumerable({\n  229:     [Symbol.toStringTag]: 'CompileCommand',\n  230      type: 'compile',\n  231      [Symbol.species]: CompileCommand,\n  ...\n  242  );\n  243  \n  244: //CompileCommand.prototype[Symbol.toStringTag] = 'CompileCommand';\n  245  \n  246  export class LinkCommand extends Command {\n  ...\n  267  }\n  268  \n  269: //LinkCommand.prototype[Symbol.toStringTag] = 'LinkCommand';\n  270  \n  271  define(\n  272    LinkCommand.prototype,\n  273    nonenumerable({\n  274:      [Symbol.toStringTag]: 'LinkCommand',\n  275     __proto__: Command.prototype,\n  276      type: 'link',\n\n~/Projects/plot-cv/lib/fd-graph.js:\n  457    draw(ctx) {}\n  458  \n  459:   get [Symbol.toStringTag]() {\n  460      return 'Edge';\n  461    }\n\n~/Projects/plot-cv/lib/jslexer.js:\n  121    }\n  122  \n  123:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  124      return \"JSLexer\";\n  125    }\n\n~/Projects/plot-cv/lib/misc.js:\n  146    },\n  147    isModuleNamespaceObject(v) {\n  148:     return isObject(v) && v[Symbol.toStringTag] == 'Module';\n  149    },\n  150    isConstructor(v) {\n  ...\n  204      return `SyscallError: '${this.syscall}' errno = ${this.code} (${this.errno})`;\n  205    },\n  206:   [Symbol.toStringTag]: 'SyscallError'\n  207  });\n  208  \n  ...\n 2335    if(isObject(obj)) {\n 2336      if('constructor' in obj) return functionName(obj.constructor);\n 2337:     if(Symbol.toStringTag in obj) return obj[Symbol.toStringTag];\n 2338    }\n 2339    return null;\n ....\n 2417  \n 2418  export function isBigDecimal(num) {\n 2419:   return typeof num == 'bigdecimal' || num[Symbol.toStringTag] == 'BigDecimal';\n 2420  }\n 2421  \n 2422  export function isBigFloat(num) {\n 2423:   return typeof num == 'bigfloat' || num[Symbol.toStringTag] == 'BigFloat';\n 2424  }\n 2425  \n 2426  export function isBigInt(num) {\n 2427:   return typeof num == 'bigint' || num[Symbol.toStringTag] == 'isBigInt';\n 2428  }\n 2429  \n ....\n 2449  \n 2450  export function isError(value) {\n 2451:   return value instanceof Error || value[Symbol.toStringTag].endsWith('Error');\n 2452  }\n 2453  \n ....\n 2508  \n 2509  export function isSymbol(value) {\n 2510:   return typeof value == 'symbol' || value[Symbol.toStringTag] == 'Symbol';\n 2511  }\n 2512  \n\n~/Projects/plot-cv/lib/stack.js:\n   26  }\n   27  \n   28: Stack.prototype[Symbol.toStringTag] = 'Stack';\n   29  \n   30  Stack.prototype.toString = function() {\n   ..\n   40  };\n   41  Stack.prototype[inspectSymbol] = function(depth, options) {\n   42:   return `\\x1b[1;31m${this[Symbol.toStringTag]}\\x1b[0m ` + globalThis.inspect([...this], depth, { ...options, breakLength: 1000, compact: 1 });\n   43  };\n   44  \n   ..\n  204    }\n  205  \n  206:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  207      return 'StackFrame';\n  208    }\n\n~/Projects/plot-cv/lib/pointer.js:\n  188    }\n  189  \n  190:   [Symbol.toStringTag]() {\n  191      return Pointer.prototype.toString.call('.', '\\u220a' + CHILDREN_SPACE);\n  192    }\n\n~/Projects/plot-cv/lib/util.js:\n 3602  Stack:${Util.stack.prototype.toString.call(stack, color, stack.columnWidths)}`;\n 3603      },\n 3604:     [Symbol.toStringTag]() {\n 3605        return this.toString(false);\n 3606      },\n ....\n 3651      return text;\n 3652    },\n 3653:   [Symbol.toStringTag]() {\n 3654      return Util.location.prototype.toString.call(this, false);\n 3655    },\n ....\n 3772        return this.getLocation();\n 3773      },\n 3774:     [Symbol.toStringTag]() {\n 3775        return this.toString(false);\n 3776      },\n ....\n 3947      return s + '\\n';\n 3948    },\n 3949:   [Symbol.toStringTag]() {\n 3950      return Util.stack.prototype.toString.call(this);\n 3951    },\n\n~/Projects/plot-cv/lib/meriyah.js:\n  182  }\n  183  \n  184: ParseError.prototype[Symbol.toStringTag] = 'ParseError';\n  185  \n  186  function report(parser, type, ...params) {\n\n~/Projects/plot-cv/lib/location.js:\n   22    return new Location(line, column, pos, withFilename ? file : null, freeze);\n   23  };\n   24: Location.prototype[Symbol.toStringTag] = 'Location';\n   25  \n   26  Location.prototype[Symbol.iterator] = function* () {\n\n~/Projects/plot-cv/lib/svg/path.js:\n  549  };\n  550  \n  551: SvgPath.prototype[Symbol.toStringTag] = 'SvgPath';\n  552  \n  553  export default SvgPath;\n\n~/Projects/plot-cv/lib/geom/polygon.js:\n    9    }\n   10  \n   11:   get [Symbol.toStringTag]() {\n   12      return 'Polygon';\n   13    }\n\n~/Projects/plot-cv/lib/geom/lineList.js:\n  162      return this.map(line => line.toString({ ...options, pad: 0, separator: '|' })).join(separator);\n  163    }\n  164:   [Symbol.toStringTag]() {\n  165      return this.toString({ separator: '\\n' });\n  166    }\n\n~/Projects/plot-cv/lib/geom/size.js:\n   57  Size.prototype.height = NaN;*/\n   58  Size.prototype.units = null;\n   59: Size.prototype[Symbol.toStringTag] = 'Size';\n   60  \n   61  Size.prototype.convertUnits = function(w = 'window' in globalThis ? window : null) {\n   ..\n  215    Size.prototype[Symbol.inspect] = function(depth, options) {\n  216      const { width, height } = this;\n  217:     return define({ width, height }, { [Symbol.toStringTag]: 'Size' });\n  218    };\n  219  Size.prototype[Symbol.iterator] = function* () {\n\n~/Projects/plot-cv/lib/geom/graph.js:\n  312  }\n  313  \n  314: Graph.prototype[Symbol.toStringTag] = 'Graph';\n  315  \n  316  export class Node {\n  ...\n  325  }\n  326  \n  327: Node.prototype[Symbol.toStringTag] = 'Node';\n  328  Node.prototype.point = null;\n  329  \n  ...\n  339  }\n  340  \n  341: Edge.prototype[Symbol.toStringTag] = 'Edge';\n  342  \n  343  Graph.Node = Node;\n\n~/Projects/plot-cv/lib/geom/point.js:\n  300    [inspectSymbol](depth, options) {\n  301      const { x, y } = this;\n  302:     return define({ x, y }, { [Symbol.toStringTag]: 'Point' });\n  303    },\n  304:   [Symbol.toStringTag]: 'Point'\n  305  });\n  306  \n\n~/Projects/plot-cv/lib/geom/pointList.js:\n  488    }\n  489  \n  490:   /*PointList.prototype[Symbol.toStringTag] = function(sep = ',', prec) {\n  491    return Array.prototype.map\n  492      .call(this, point => point.round(prec))\n  ...\n  559  }\n  560  \n  561: PointList.prototype[Symbol.toStringTag] = 'PointList';\n  562  \n  563  define(PointList, {\n\n~/Projects/plot-cv/lib/geom/transformation.js:\n   22    }\n   23  \n   24:   get [Symbol.toStringTag]() {\n   25      return functionName(this.constructor);\n   26    }\n   ..\n  121    }\n  122  \n  123:   /*[Symbol.toStringTag]() {\n  124      return this.toString();\n  125    }*/\n  ...\n  146  }\n  147  \n  148: //Transformation.prototype[Symbol.toStringTag]='Transformation';\n  149  \n  150  Object.defineProperty(Transformation, Symbol.hasInstance, {\n  ...\n  437  \n  438    /*\n  439:   [Symbol.toStringTag]() {\n  440      return this.toSource();\n  441    }*/\n  ...\n  631    }\n  632  \n  633:   /*  [Symbol.toStringTag]() {\n  634      return this.toString();\n  635    }*/\n\n~/Projects/plot-cv/lib/geom/rect.js:\n   88    return new Rect(...matches.map(m => +m[0]));\n   89  };\n   90: Rect.prototype[Symbol.toStringTag] = 'Rect';\n   91  \n   92  Rect.prototype.clone = function(fn) {\n   ..\n  459  Rect.prototype[inspectSymbol] = function(depth, options) {\n  460    const { x, y, width, height } = this;\n  461:   return { x, y, width, height, [Symbol.toStringTag]: 'Rect' };\n  462  };\n  463  Rect.isBBox = rect => !(rect instanceof Rect) && ['x1', 'x2', 'y1', 'y2'].every(prop => prop in rect);\n\n~/Projects/plot-cv/lib/geom/bbox.js:\n  288  }\n  289  \n  290: BBox.prototype[Symbol.toStringTag] = 'BBox';\n  291  \n  292  export const isBBox = (bbox, testFn = (prop, name, obj) => name in obj) => isObject(bbox) && ['x1', 'y1', 'x2', 'y2'].every(n => testFn(bbox[n], n, bbox));\n\n~/Projects/plot-cv/lib/geom/circle.js:\n   60  \n   61  export const isCircle = obj => ['x', 'y', 'radius'].every(prop => obj[prop] !== undefined);\n   62: Circle.prototype[Symbol.toStringTag] = 'Circle';\n   63  \n   64  Object.defineProperty(Circle.prototype, 'x', {\n\n~/Projects/plot-cv/lib/xml/xpath.js:\n  318    }\n  319  \n  320:   [Symbol.toStringTag]() {\n  321      return MutableXPath.prototype[Symbol.inspect ?? Symbol.for('nodejs.util.inspect.custom')].call(this, text => text);\n  322    }\n\n~/Projects/plot-cv/lib/xml/util.js:\n  113      return [this[0], this[1], ...(Array.isArray(this[2]) ? this[2] : [])];\n  114    },\n  115:   [Symbol.toStringTag]() {\n  116      return this.toString();\n  117    }\n\n~/Projects/plot-cv/lib/color/hsla.js:\n  141    return parseInt('0x' + hex.slice(1));\n  142  };\n  143: HSLA.prototype[Symbol.toStringTag] = function() {\n  144    return HSLA.prototype.toString.call(this);\n  145  };\n\n~/Projects/plot-cv/lib/eagle/document.js:\n  380  }\n  381  \n  382: define(EagleDocument.prototype, { [Symbol.toStringTag]: 'EagleDocument' });\n  383  \n\n~/Projects/plot-cv/lib/eagle/node.js:\n  375      }\n  376  \n  377:     const name = this[Symbol.toStringTag];\n  378  \n  379      return (ret = concat(text(name + ' ', 0), ret));\n  ...\n  479    EagleNode.prototype,\n  480    nonenumerable({\n  481:     [Symbol.toStringTag]: 'EagleNode',\n  482      ref: null\n  483    })\n\n~/Projects/plot-cv/lib/eagle/project.js:\n  338  }\n  339  \n  340: EagleProject.prototype[Symbol.toStringTag] = 'EagleProject';\n  341  \n\n~/Projects/plot-cv/lib/eagle/nodeMap.js:\n  134  }\n  135  \n  136: EagleNodeMap.prototype[Symbol.toStringTag] = 'EagleNodeMap';\n  137  \n\n~/Projects/plot-cv/lib/eagle/ref.js:\n  125  }\n  126  \n  127: define(EagleReference.prototype, nonenumerable({ [Symbol.toStringTag]: 'EagleReference' }));\n  128  \n  129  export function EagleRef(root, path, check = false) {\n\n~/Projects/plot-cv/lib/eagle/classes.js:\n    7    }\n    8  }\n    9: Library.prototype[Symbol.toStringTag] = 'Library';\n   10  \n   11  export class Package extends ObjectInterface {\n   ..\n   15  }\n   16  \n   17: Package.prototype[Symbol.toStringTag] = 'Package';\n   18  \n   19  export class Element extends ObjectInterface {\n   ..\n   39  }\n   40  \n   41: Element.prototype[Symbol.toStringTag] = 'Element';\n   42  \n\n~/Projects/plot-cv/lib/eagle/element.js:\n 1085  \n 1086  define(EagleElement, nonenumerable({ subscribers: [], r: null, class: undefined }));\n 1087: weakDefine(EagleElement.prototype, { [Symbol.toStringTag]: 'EagleElement' });\n 1088: EagleElement.prototype[Symbol.toStringTag] = 'EagleElement';\n 1089  \n 1090  export const makeEagleElement = (owner, ref, raw) => EagleElement.get(owner, ref, raw);\n\n~/Projects/plot-cv/lib/eagle/nodeList.js:\n  170  }\n  171  \n  172: EagleNodeList.prototype[Symbol.toStringTag] = 'EagleNodeList';\n  173  \n\n~/Projects/plot-cv/lib/dom/cacheStorage.js:\n  103     * @return {[type]} [description]\n  104     */\n  105:   [Symbol.toStringTag]() {\n  106      return 'CacheStorage';\n  107    }\n\n~/Projects/plot-cv/lib/dom/helpers.js:\n  215      const el = this[Symbol.for('element')];\n  216  \n  217:     const name = this[Symbol.toStringTag] ?? 'ObjectInterface';\n  218  \n  219      return `\\x1b[1;31m${name}\\x1b[1;36m {\\x1b[0m ${el.getAttributeNames().reduce((acc, k, i) => (acc ? acc + ' ' : acc) + `${k}=\"${el.getAttribute(k)}\"`, '')} \\x1b[1;36m}\\x1b[0m`;\n  ...\n  225  }\n  226  \n  227: ObjectInterface.prototype[Symbol.toStringTag] = 'ObjectInterface';\n  228  \n\n~/Projects/plot-cv/lib/dom/cache.js:\n   13  };\n   14  \n   15: const isReq = req => req && req[Symbol.toStringTag] === 'Request';\n   16: const isRes = res => res && res[Symbol.toStringTag] === 'Response';\n   17  const strToBase64 = str => new Buffer(str).toString('hex');\n   18  const base64ToStr = hex => new Buffer(hex, 'hex').toString();\n\n~/Projects/plot-cv/lib/eda/circuitjs.js:\n   56  \n   57  Element.prototype = new Array();\n   58: Element.prototype[Symbol.toStringTag] = 'CircuitJSElement';\n   59  Element.prototype.constructor = Element;\n   60  Element.prototype.toString = function() {\n\n~/Projects/plot-cv/lib/whatwg/url.js:\n  918      return this.toString();\n  919    }\n  920:   get [Symbol.toStringTag]() {\n  921      return 'StringView : ' + this.toString();\n  922    }\n\n~/Projects/plot-cv/lib/json/path.js:\n  419    }\n  420  \n  421:   [Symbol.toStringTag]() {\n  422      return MutablePath.prototype.toString.call('.', '\\u220a' + CHILDREN_SPACE);\n  423    }\n\n~/Projects/plot-cv/lib/container/multikeymap.js:\n   58    }\n   59  \n   60:   get [Symbol.toStringTag]() {\n   61      return 'MultiKeyMap';\n   62    }\n\n~/Projects/plot-cv/lib/ecmascript/estree.js:\n  156    }\n  157  \n  158:   [Symbol.toStringTag](...args) {\n  159      return this[inspectSymbol](...args);\n  160    }\n\n~/Projects/plot-cv/lib/ecmascript/lexer.js:\n   79  };\n   80  \n   81: SyntaxError.prototype[Symbol.toStringTag] = function() {\n   82    return this.toString();\n   83  };\n   ..\n  137  //Range.prototype.constructor = Range;\n  138  \n  139: Range.prototype[Symbol.toStringTag] = function(n, opts = {}) {\n  140    const { showFile = true, colors = false } = opts;\n  141  \n  ...\n  151  };\n  152  Range.prototype.toString = function() {\n  153:   return this[Symbol.toStringTag](0, { colors: false });\n  154  };\n  155  Range.prototype[Symbol.for('nodejs.util.inspect.custom')] = function(n, opts = {}) {\n\n~/Projects/plot-cv/lib/ecmascript/token.js:\n   33        column: pos ? pos.column : 0,\n   34        line: pos ? pos.line : 0,\n   35:       [Symbol.toStringTag]() {\n   36          return this.toString();\n   37        },\n   ..\n  111    }\n  112  \n  113:   [Symbol.toStringTag]() {\n  114      return this.toString();\n  115    }\n\n~/Projects/plot-cv/qjs-opencv/draw.js:\n    9  \n   10    /**\n   11:    * @var {string} Draw.prototype.[Symbol.toStringTag]\n   12     */\n   13:   [Symbol.toStringTag] = 'Draw';\n   14  \n   15    /**\n\n~/Projects/plot-cv/qjs-opencv/rotated_rect.js:\n   42  \n   43    /**\n   44:    * @var {string} RotatedRect.prototype.[Symbol.toStringTag]\n   45     */\n   46:   [Symbol.toStringTag] = 'RotatedRect';\n   47  \n   48    /**\n\n~/Projects/plot-cv/qjs-opencv/keypoint.js:\n   45  \n   46    /**\n   47:    * @var {string} KeyPoint.prototype.[Symbol.toStringTag]\n   48     */\n   49:   [Symbol.toStringTag] = 'KeyPoint';\n   50  }\n   51  \n\n~/Projects/plot-cv/qjs-opencv/clahe.js:\n   31  \n   32    /**\n   33:    * @var {string} CLAHE.prototype.[Symbol.toStringTag]\n   34     */\n   35:   [Symbol.toStringTag] = 'CLAHE';\n   36  }\n   37  \n\n~/Projects/plot-cv/qjs-opencv/video_capture.js:\n   57  \n   58    /**\n   59:    * @var {string} VideoCapture.prototype.[Symbol.toStringTag]\n   60     */\n   61:   [Symbol.toStringTag] = 'VideoCapture';\n   62  }\n   63  \n\n~/Projects/plot-cv/qjs-opencv/utility.js:\n   73  \n   74    /**\n   75:    * @var {string} TickMeter.prototype.[Symbol.toStringTag]\n   76     */\n   77:   [Symbol.toStringTag] = 'TickMeter';\n   78  }\n   79  \n\n~/Projects/plot-cv/qjs-opencv/umat.js:\n  224  \n  225    /**\n  226:    * @var {string} UMat.prototype.[Symbol.toStringTag]\n  227     */\n  228:   [Symbol.toStringTag] = 'UMat';\n  229  \n  230    /**\n\n~/Projects/plot-cv/qjs-opencv/line_segment_detector.js:\n   27  \n   28    /**\n   29:    * @var {string} LineSegmentDetector.prototype.[Symbol.toStringTag]\n   30     */\n   31:   [Symbol.toStringTag] = 'LineSegmentDetector';\n   32  }\n   33  \n\n~/Projects/plot-cv/qjs-opencv/contour.js:\n  271  \n  272    /**\n  273:    * @var {string} Contour.prototype.[Symbol.toStringTag]\n  274     */\n  275:   [Symbol.toStringTag] = 'Contour';\n  276  \n  277    /**\n\n~/Projects/plot-cv/qjs-opencv/size.js:\n  149  \n  150    /**\n  151:    * @var {string} Size.prototype.[Symbol.toStringTag]\n  152     */\n  153:   [Symbol.toStringTag] = 'Size';\n  154  }\n  155  \n\n~/Projects/plot-cv/qjs-opencv/video_writer.js:\n   45  \n   46    /**\n   47:    * @var {string} VideoWriter.prototype.[Symbol.toStringTag]\n   48     */\n   49:   [Symbol.toStringTag] = 'VideoWriter';\n   50  \n   51    /**\n\n~/Projects/plot-cv/qjs-opencv/point_iterator.js:\n   20  \n   21    /**\n   22:    * @var {string} PointIterator.prototype.[Symbol.toStringTag]\n   23     */\n   24:   [Symbol.toStringTag] = 'PointIterator';\n   25  }\n   26  \n\n~/Projects/plot-cv/qjs-opencv/feature2d.js:\n  226     * @alias defaultName\n  227     */\n  228:   get [Symbol.toStringTag]() {\n  229      return this.defaultName;\n  230    }\n  231  \n  232    /**\n  233:    * @var {string} Feature2D.prototype.[Symbol.toStringTag]\n  234     */\n  235:   [Symbol.toStringTag] = 'Feature2D';\n  236  }\n  237  \n\n~/Projects/plot-cv/qjs-opencv/subdiv2d.js:\n   99  \n  100    /**\n  101:    * @var {string} Subdiv2D.prototype.[Symbol.toStringTag]\n  102     */\n  103:   [Symbol.toStringTag] = 'Subdiv2D';\n  104  \n  105    /**\n\n~/Projects/plot-cv/qjs-opencv/line.js:\n  190  \n  191    /**\n  192:    * @var {string} Line.prototype.[Symbol.toStringTag]\n  193     */\n  194:   [Symbol.toStringTag] = 'Line';\n  195  \n  196    /**\n\n~/Projects/plot-cv/qjs-opencv/point.js:\n  121  \n  122    /**\n  123:    * @var {string} Point.prototype.[Symbol.toStringTag]\n  124     */\n  125:   [Symbol.toStringTag] = 'Point';\n  126  \n  127    /**\n  128:    * @function Point.prototype.[Symbol.toStringTag]\n  129     * @returns {Object}  Returns null\n  130     */\n  131:   [Symbol.toStringTag]() {}\n  132  \n  133    /**\n\n~/Projects/plot-cv/qjs-opencv/mat.js:\n  294  \n  295    /**\n  296:    * @var {string} MatIterator.prototype.[Symbol.toStringTag]\n  297     */\n  298:   [Symbol.toStringTag] = 'Mat';\n  299  \n  300    /**\n  ...\n  304  \n  305    /**\n  306:    * @var {string} MatIterator.prototype.[Symbol.toStringTag]\n  307     */\n  308:   [Symbol.toStringTag] = 'MatIterator';\n  309  \n  310    /**\n\n~/Projects/plot-cv/qjs-opencv/slice_iterator.js:\n   20  \n   21    /**\n   22:    * @var {string} SliceIterator.prototype.[Symbol.toStringTag]\n   23     */\n   24:   [Symbol.toStringTag] = 'SliceIterator';\n   25  }\n   26  \n\n~/Projects/plot-cv/qjs-opencv/rect.js:\n  163  \n  164    /**\n  165:    * @var {string} Rect.prototype.[Symbol.toStringTag]\n  166     */\n  167:   [Symbol.toStringTag] = 'Rect';\n  168  \n  169    /**\n\n~/Projects/plot-cv/qjs-opencv/fast_line_detector.js:\n   21  \n   22    /**\n   23:    * @var {string} FastLineDetector.prototype.[Symbol.toStringTag]\n   24     */\n   25:   [Symbol.toStringTag] = 'FastLineDetector';\n   26  }\n   27  \n\n~/Projects/plot-cv/quickjs-2023-12-09/quickjs.c:\n 39418  static const JSCFunctionListEntry js_array_iterator_proto_funcs[] = {\n 39419      JS_ITERATOR_NEXT_DEF(\"next\", 0, js_array_iterator_next, 0 ),\n 39420:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Array Iterator\", JS_PROP_CONFIGURABLE ),\n 39421  };\n 39422  \n .....\n 41414  static const JSCFunctionListEntry js_string_iterator_proto_funcs[] = {\n 41415      JS_ITERATOR_NEXT_DEF(\"next\", 0, js_string_iterator_next, 0 ),\n 41416:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"String Iterator\", JS_PROP_CONFIGURABLE ),\n 41417  };\n 41418  \n .....\n 41680      JS_CFUNC_DEF(\"imul\", 2, js_math_imul ),\n 41681      JS_CFUNC_DEF(\"clz32\", 1, js_math_clz32 ),\n 41682:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Math\", JS_PROP_CONFIGURABLE ),\n 41683      JS_PROP_DOUBLE_DEF(\"E\", 2.718281828459045, 0 ),\n 41684      JS_PROP_DOUBLE_DEF(\"LN10\", 2.302585092994046, 0 ),\n .....\n 43243  static const JSCFunctionListEntry js_regexp_string_iterator_proto_funcs[] = {\n 43244      JS_ITERATOR_NEXT_DEF(\"next\", 0, js_regexp_string_iterator_next, 0 ),\n 43245:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"RegExp String Iterator\", JS_PROP_CONFIGURABLE ),\n 43246  };\n 43247  \n .....\n 43955      JS_CFUNC_DEF(\"parse\", 2, js_json_parse ),\n 43956      JS_CFUNC_DEF(\"stringify\", 3, js_json_stringify ),\n 43957:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"JSON\", JS_PROP_CONFIGURABLE ),\n 43958  };\n 43959  \n .....\n 44129      JS_CFUNC_DEF(\"set\", 3, js_reflect_set ),\n 44130      JS_CFUNC_DEF(\"setPrototypeOf\", 2, js_reflect_setPrototypeOf ),\n 44131:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Reflect\", JS_PROP_CONFIGURABLE ),\n 44132  };\n 44133  \n .....\n 45171      // XXX: should have writable: false\n 45172      JS_CFUNC_DEF(\"[Symbol.toPrimitive]\", 1, js_symbol_valueOf ),\n 45173:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Symbol\", JS_PROP_CONFIGURABLE ),\n 45174      JS_CGETSET_DEF(\"description\", js_symbol_get_description, NULL ),\n 45175  };\n .....\n 45892      JS_CFUNC_MAGIC_DEF(\"entries\", 0, js_create_map_iterator, (JS_ITERATOR_KIND_KEY_AND_VALUE << 2) | 0 ),\n 45893      JS_ALIAS_DEF(\"[Symbol.iterator]\", \"entries\" ),\n 45894:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Map\", JS_PROP_CONFIGURABLE ),\n 45895  };\n 45896  \n 45897  static const JSCFunctionListEntry js_map_iterator_proto_funcs[] = {\n 45898      JS_ITERATOR_NEXT_DEF(\"next\", 0, js_map_iterator_next, 0 ),\n 45899:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Map Iterator\", JS_PROP_CONFIGURABLE ),\n 45900  };\n 45901  \n .....\n 45911      JS_ALIAS_DEF(\"[Symbol.iterator]\", \"values\" ),\n 45912      JS_CFUNC_MAGIC_DEF(\"entries\", 0, js_create_map_iterator, (JS_ITERATOR_KIND_KEY_AND_VALUE << 2) | MAGIC_SET ),\n 45913:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Set\", JS_PROP_CONFIGURABLE ),\n 45914  };\n 45915  \n 45916  static const JSCFunctionListEntry js_set_iterator_proto_funcs[] = {\n 45917      JS_ITERATOR_NEXT_DEF(\"next\", 0, js_map_iterator_next, MAGIC_SET ),\n 45918:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Set Iterator\", JS_PROP_CONFIGURABLE ),\n 45919  };\n 45920  \n .....\n 45924      JS_CFUNC_MAGIC_DEF(\"has\", 1, js_map_has, MAGIC_WEAK ),\n 45925      JS_CFUNC_MAGIC_DEF(\"delete\", 1, js_map_delete, MAGIC_WEAK ),\n 45926:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"WeakMap\", JS_PROP_CONFIGURABLE ),\n 45927  };\n 45928  \n .....\n 45931      JS_CFUNC_MAGIC_DEF(\"has\", 1, js_map_has, MAGIC_SET | MAGIC_WEAK ),\n 45932      JS_CFUNC_MAGIC_DEF(\"delete\", 1, js_map_delete, MAGIC_SET | MAGIC_WEAK ),\n 45933:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"WeakSet\", JS_PROP_CONFIGURABLE ),\n 45934  };\n 45935  \n .....\n 45985  /* Generator */\n 45986  static const JSCFunctionListEntry js_generator_function_proto_funcs[] = {\n 45987:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"GeneratorFunction\", JS_PROP_CONFIGURABLE),\n 45988  };\n 45989  \n .....\n 45992      JS_ITERATOR_NEXT_DEF(\"return\", 1, js_generator_next, GEN_MAGIC_RETURN ),\n 45993      JS_ITERATOR_NEXT_DEF(\"throw\", 1, js_generator_next, GEN_MAGIC_THROW ),\n 45994:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Generator\", JS_PROP_CONFIGURABLE),\n 45995  };\n 45996  \n .....\n 46995      JS_CFUNC_DEF(\"catch\", 1, js_promise_catch ),\n 46996      JS_CFUNC_DEF(\"finally\", 1, js_promise_finally ),\n 46997:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Promise\", JS_PROP_CONFIGURABLE ),\n 46998  };\n 46999  \n 47000  /* AsyncFunction */\n 47001  static const JSCFunctionListEntry js_async_function_proto_funcs[] = {\n 47002:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"AsyncFunction\", JS_PROP_CONFIGURABLE ),\n 47003  };\n 47004  \n .....\n 47197  \n 47198  static const JSCFunctionListEntry js_async_generator_function_proto_funcs[] = {\n 47199:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"AsyncGeneratorFunction\", JS_PROP_CONFIGURABLE ),\n 47200  };\n 47201  \n .....\n 47206      JS_CFUNC_MAGIC_DEF(\"return\", 1, js_async_generator_next, GEN_MAGIC_RETURN ),\n 47207      JS_CFUNC_MAGIC_DEF(\"throw\", 1, js_async_generator_next, GEN_MAGIC_THROW ),\n 47208:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"AsyncGenerator\", JS_PROP_CONFIGURABLE ),\n 47209  };\n 47210  \n .....\n 49178      JS_CFUNC_DEF(\"toString\", 0, js_bigint_toString ),\n 49179      JS_CFUNC_DEF(\"valueOf\", 0, js_bigint_valueOf ),\n 49180:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"BigInt\", JS_PROP_CONFIGURABLE ),\n 49181  };\n 49182  \n .....\n 51196      JS_CGETSET_MAGIC_DEF(\"byteLength\", js_array_buffer_get_byteLength, NULL, JS_CLASS_ARRAY_BUFFER ),\n 51197      JS_CFUNC_MAGIC_DEF(\"slice\", 2, js_array_buffer_slice, JS_CLASS_ARRAY_BUFFER ),\n 51198:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"ArrayBuffer\", JS_PROP_CONFIGURABLE ),\n 51199  };\n 51200  \n .....\n 51208      JS_CGETSET_MAGIC_DEF(\"byteLength\", js_array_buffer_get_byteLength, NULL, JS_CLASS_SHARED_ARRAY_BUFFER ),\n 51209      JS_CFUNC_MAGIC_DEF(\"slice\", 2, js_array_buffer_slice, JS_CLASS_SHARED_ARRAY_BUFFER ),\n 51210:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"SharedArrayBuffer\", JS_PROP_CONFIGURABLE ),\n 51211  };\n 51212  \n .....\n 52664      JS_CFUNC_MAGIC_DEF(\"keys\", 0, js_create_typed_array_iterator, JS_ITERATOR_KIND_KEY ),\n 52665      JS_CFUNC_MAGIC_DEF(\"entries\", 0, js_create_typed_array_iterator, JS_ITERATOR_KIND_KEY_AND_VALUE ),\n 52666:     JS_CGETSET_DEF(\"[Symbol.toStringTag]\", js_typed_array_get_toStringTag, NULL ),\n 52667      JS_CFUNC_DEF(\"copyWithin\", 2, js_typed_array_copyWithin ),\n 52668      JS_CFUNC_MAGIC_DEF(\"every\", 1, js_array_every, special_every | special_TA ),\n .....\n 53244      JS_CFUNC_MAGIC_DEF(\"setFloat32\", 2, js_dataview_setValue, JS_CLASS_FLOAT32_ARRAY ),\n 53245      JS_CFUNC_MAGIC_DEF(\"setFloat64\", 2, js_dataview_setValue, JS_CLASS_FLOAT64_ARRAY ),\n 53246:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"DataView\", JS_PROP_CONFIGURABLE ),\n 53247  };\n 53248  \n .....\n 53683      JS_CFUNC_DEF(\"wait\", 4, js_atomics_wait ),\n 53684      JS_CFUNC_DEF(\"notify\", 3, js_atomics_notify ),\n 53685:     JS_PROP_STRING_DEF(\"[Symbol.toStringTag]\", \"Atomics\", JS_PROP_CONFIGURABLE ),\n 53686  };\n 53687  \n\n~/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/bin/convert-imports.js:\n    6  import deep from 'deep';\n    7  \n    8: Object.assign(ReadImport.prototype, { [Symbol.toStringTag]: 'Import' });\n    9  \n   10  function main(...args) {\n\n~/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/bin/resolve-imports.js:\n  298      close: () => {},\n  299      seek: (whence, offset) => os.seek(fd, whence, offset),\n  300:     [Symbol.toStringTag]: `FileWriter< ${fd} >`,\n  301      inspect() {\n  302:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  303      }\n  304    });\n  ...\n  319      write: fn,\n  320      close: () => {},\n  321:     [Symbol.toStringTag]: `ArrayWriter`,\n  322      inspect() {\n  323:       return inspect({ arr }) ?? this[Symbol.toStringTag];\n  324      }\n  325    });\n  ...\n  335      close: () => {},\n  336      seek: () => {},\n  337:     [Symbol.toStringTag]: `DummyWriter< ${name} >`,\n  338      inspect() {\n  339:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  340      }\n  341    });\n  ...\n  642  \n  643  define(Import.prototype, {\n  644:   [Symbol.toStringTag]: 'Import',\n  645    ids(pred = local => true) {\n  646      return ImportIds(this.tokens.slice())\n  ...\n 1349  \n 1350  define(NumericRange.prototype, {\n 1351:   [Symbol.toStringTag]: 'NumericRange',\n 1352    [inspectSymbol](depth, opts) {\n 1353      const [start, end] = this;\n ....\n 1407            return '';\n 1408          },\n 1409:         [Symbol.toStringTag]: 'FileMap(empty)'\n 1410        };\n 1411        return Object.setPrototypeOf(obj, FileMap.prototype);\n ....\n 1749  }\n 1750  \n 1751: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1752  \n 1753  function BufferFile(file, buf) {\n\n~/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/inotify.js:\n   71                return this.watch(event);\n   72              },\n   73:             [Symbol.toStringTag]: 'InotifyEvent'\n   74            });\n   75  */\n\n~/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/socklen_t.js:\n   16    }\n   17  \n   18:   get [Symbol.toStringTag]() {\n   19      return 'socklen_t';\n   20    }\n\n~/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/console.js:\n   51      numberBase: 10,\n   52      classKey: Symbol.toStringTag,\n   53:     hideKeys: [Symbol.toStringTag]\n   54    };\n   55  \n\n~/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/io.js:\n   51  }\n   52  \n   53: define(HandlerEntry.prototype, { [Symbol.toStringTag]: 'HandlerEntry' });\n   54  \n   55  export class DescriptorMap extends Array {\n   ..\n   90  }\n   91  \n   92: define(DescriptorMap.prototype, { [Symbol.toStringTag]: 'DescriptorMap' });\n   93  \n   94  export class Multiplexer {\n   ..\n  154  }\n  155  \n  156: define(Multiplexer.prototype, { [Symbol.toStringTag]: 'Multiplexer' });\n  157  \n  158  const io = new Multiplexer();\n\n~/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/require.js:\n   95  }\n   96  \n   97: define(Module.prototype, { [Symbol.toStringTag]: 'Module' });\n   98  \n   99  class CJSModule extends Module {\n  ...\n  137  }\n  138  \n  139: define(CJSModule.prototype, { [Symbol.toStringTag]: 'CJSModule' });\n  140  \n  141  class ESModule extends Module {\n  ...\n  170  }\n  171  \n  172: define(ESModule.prototype, { [Symbol.toStringTag]: 'ESModule' });\n  173  \n  174  function statPath(path) {\n\n~/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/xpath.js:\n   12  }\n   13  \n   14: DereferenceError.prototype[Symbol.toStringTag] = 'DereferenceError';\n   15  \n   16  export class XPath {\n   ..\n  118      return;\n  119      `\\x1b[1;31m${this.constructor.name ?? className(this)}\\x1b[0m ` +\n  120:       inspect([...this].map(GetKey) ?? { __proto__: { [Symbol.toStringTag]: 'XPath' }, ...obj }, {\n  121          ...opts,\n  122          customInspect: true\n  ...\n  124    }\n  125  \n  126:   get [Symbol.toStringTag]() {\n  127      return 'XPath';\n  128    }\n  ...\n  131  }\n  132  \n  133: define(XPath.prototype, { [Symbol.toStringTag]: 'XPath' });\n  134  \n  135  export const ImmutableXPath = XPath;\n\n~/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/stack.js:\n   30  }\n   31  \n   32: Stack.prototype[Symbol.toStringTag] = 'Stack';\n   33  \n   34  Stack.prototype.toString = function() {\n   ..\n   45  Stack.prototype[inspectSymbol] = function(depth, options) {\n   46    return (\n   47:     `\\x1b[1;31m${this[Symbol.toStringTag]}\\x1b[0m ` +\n   48      globalThis.inspect([...this], depth, {\n   49        ...options,\n   ..\n  215    }\n  216  \n  217:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  218      return 'StackFrame';\n  219    }\n\n~/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/dom.js:\n  571  define(Node.prototype, Interface.prototype);\n  572  extend(Node.prototype, NODE_TYPES, { enumerable: false });\n  573: extend(Node.prototype, { [Symbol.toStringTag]: 'Node' }, { enumerable: false });\n  574  \n  575  function MakeCache(ctor, store = new WeakMap()) {\n  ...\n  652    NodeList.prototype,\n  653    {\n  654:     [Symbol.toStringTag]: 'NodeList',\n  655      *[Symbol.iterator]() {\n  656        const factory = Factory.for(this);\n  ...\n  701      constructor: NamedNodeMap,\n  702  \n  703:     [Symbol.toStringTag]: 'NamedNodeMap',\n  704  \n  705      get path() {\n  ...\n  994  }\n  995  \n  996: extend(Element.prototype, { [Symbol.toStringTag]: 'Element', nodeType: ELEMENT_NODE }, { enumerable: false });\n  997  \n  998  /*\n  ...\n 1167  }\n 1168  \n 1169: extend(Document.prototype, { [Symbol.toStringTag]: 'Document', nodeType: DOCUMENT_NODE }, { enumerable: false });\n 1170  \n 1171  export class Attr extends Node {\n ....\n 1226    {\n 1227      nodeType: ATTRIBUTE_NODE,\n 1228:     [Symbol.toStringTag]: 'Attr'\n 1229    },\n 1230    { enumerable: false }\n ....\n 1272  \n 1273    [inspectSymbol](depth, opts) {\n 1274:     return `\\x1b[1;31m${this[Symbol.toStringTag]}\\x1b[0m \\x1b[38;2;192;2550m${quote(this.data, \"'\")}\\x1b[0m`;\n 1275    }\n 1276  \n ....\n 1285      nodeType: TEXT_NODE,\n 1286      nodeName: '#text',\n 1287:     [Symbol.toStringTag]: 'Text'\n 1288    },\n 1289    { enumerable: false }\n ....\n 1332      nodeType: COMMENT_NODE,\n 1333      nodeName: '#comment',\n 1334:     [Symbol.toStringTag]: 'Comment'\n 1335    },\n 1336    { enumerable: false }\n ....\n 1435    TokenList.prototype,\n 1436    {\n 1437:     [Symbol.toStringTag]: 'TokenList'\n 1438    },\n 1439    { enumerable: false }\n ....\n 1593      constructor: CSSStyleDeclaration,\n 1594  \n 1595:     [Symbol.toStringTag]: 'CSSStyleDeclaration',\n 1596  \n 1597      get parentRule() {\n\n~/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/tty.js:\n   10  \n   11  define(ReadStream.prototype, {\n   12:   [Symbol.toStringTag]: 'ReadStream'\n   13  });\n   14  \n   ..\n   93      configurable: true\n   94    },\n   95:   [Symbol.toStringTag]: { value: 'WriteStream', configurable: true }\n   96  });\n   97  \n\n~/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/util.js:\n  182    },\n  183    isModuleNamespaceObject(v) {\n  184:     return isObject(v) && v[Symbol.toStringTag] == 'Module';\n  185    },\n  186    isConstructor(v) {\n  ...\n 1980  export function className(obj) {\n 1981    if(isObject(obj)) {\n 1982:     if(Symbol.toStringTag in obj) return obj[Symbol.toStringTag];\n 1983      if('constructor' in obj) return functionName(obj.constructor);\n 1984    }\n\n~/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/db.js:\n   95  \n   96  define(Pool.prototype, {\n   97:   [Symbol.toStringTag]: 'Pool'\n   98  });\n   99  \n\n~/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/repl.js:\n 2039  \n 2040  Object.assign(REPL.prototype, {\n 2041:   [Symbol.toStringTag]: 'REPL',\n 2042    handleInput: REPL.prototype.evalAndPrint,\n 2043    directives: loadModule\n\n~/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/streams.js:\n  135    }\n  136  \n  137:   define(ByLineStream.prototype, { [Symbol.toStringTag]: 'ByLineStream' });\n  138  \n  139    return ByLineStream;\n\n~/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/fs.js:\n  618    }\n  619  \n  620:   [Symbol.toStringTag] = 'inotify_event';\n  621  }\n  622  \n\n~/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/parser.js:\n   21  }\n   22  \n   23: define(Rule.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'Rule' });\n   24  \n   25  export class Terminal extends Rule {\n   ..\n   44  }\n   45  \n   46: define(Terminal.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'Terminal' });\n   47  \n   48  export class ZeroOrMore extends Rule {\n   ..\n   62  }\n   63  \n   64: define(ZeroOrMore.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'ZeroOrMore' });\n   65  \n   66  export function make_operators_set(...op_list) {\n\n~/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/events.js:\n   55  }\n   56  \n   57: EventEmitter.prototype[Symbol.toStringTag] = 'EventEmitter';\n   58  \n   59  const PRIVATE = Symbol('EventTarget');\n   ..\n   98  }\n   99  \n  100: EventTarget.prototype[Symbol.toStringTag] = 'EventTarget';\n  101  \n  102  const getMethods = obj =>\n\n~/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/vfs.js:\n  311            for(let chunk of q) written += ar.write(chunk);\n  312          },\n  313:         [Symbol.toStringTag]: 'WriteStream'\n  314        };\n  315      } else {\n  ...\n  329            error: () => ar.error != null,\n  330            close: () => ar.close(),\n  331:           [Symbol.toStringTag]: 'ReadStream'\n  332          };\n  333        }\n\n~/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/lexer/c.js:\n  118  globalThis.CLexer = CLexer;\n  119  \n  120: define(CLexer.prototype, { [Symbol.toStringTag]: 'CLexer' });\n  121  \n  122  export default CLexer;\n\n~/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/lexer/csv.js:\n   23    }\n   24  \n   25:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n   26      return \"CSVLexer\";\n   27    }\n\n~/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/lexer/ecmascript.js:\n  129    }\n  130  \n  131:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  132      return \"ECMAScriptLexer\";\n  133    }\n\n~/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/lexer/bnf.js:\n  194    }\n  195  \n  196:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  197      return \"BNFLexer\";\n  198    }\n\n~/Projects/plot-cv/inst/x86_64-linux-gnu/usr/local/bin/convert-imports.js:\n    6  import deep from 'deep';\n    7  \n    8: Object.assign(ReadImport.prototype, { [Symbol.toStringTag]: 'Import' });\n    9  \n   10  function main(...args) {\n\n~/Projects/plot-cv/inst/x86_64-linux-gnu/usr/local/bin/resolve-imports.js:\n  298      close: () => {},\n  299      seek: (whence, offset) => os.seek(fd, whence, offset),\n  300:     [Symbol.toStringTag]: `FileWriter< ${fd} >`,\n  301      inspect() {\n  302:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  303      }\n  304    });\n  ...\n  319      write: fn,\n  320      close: () => {},\n  321:     [Symbol.toStringTag]: `ArrayWriter`,\n  322      inspect() {\n  323:       return inspect({ arr }) ?? this[Symbol.toStringTag];\n  324      }\n  325    });\n  ...\n  335      close: () => {},\n  336      seek: () => {},\n  337:     [Symbol.toStringTag]: `DummyWriter< ${name} >`,\n  338      inspect() {\n  339:       return inspect({ fd }) ?? this[Symbol.toStringTag];\n  340      }\n  341    });\n  ...\n  642  \n  643  define(Import.prototype, {\n  644:   [Symbol.toStringTag]: 'Import',\n  645    ids(pred = local => true) {\n  646      return ImportIds(this.tokens.slice())\n  ...\n 1349  \n 1350  define(NumericRange.prototype, {\n 1351:   [Symbol.toStringTag]: 'NumericRange',\n 1352    [inspectSymbol](depth, opts) {\n 1353      const [start, end] = this;\n ....\n 1407            return '';\n 1408          },\n 1409:         [Symbol.toStringTag]: 'FileMap(empty)'\n 1410        };\n 1411        return Object.setPrototypeOf(obj, FileMap.prototype);\n ....\n 1749  }\n 1750  \n 1751: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1752  \n 1753  function BufferFile(file, buf) {\n\n~/Projects/plot-cv/inst/x86_64-linux-gnu/usr/local/lib/quickjs/inotify.js:\n   71                return this.watch(event);\n   72              },\n   73:             [Symbol.toStringTag]: 'InotifyEvent'\n   74            });\n   75  */\n\n~/Projects/plot-cv/inst/x86_64-linux-gnu/usr/local/lib/quickjs/socklen_t.js:\n   16    }\n   17  \n   18:   get [Symbol.toStringTag]() {\n   19      return 'socklen_t';\n   20    }\n\n~/Projects/plot-cv/inst/x86_64-linux-gnu/usr/local/lib/quickjs/console.js:\n   51      numberBase: 10,\n   52      classKey: Symbol.toStringTag,\n   53:     hideKeys: [Symbol.toStringTag]\n   54    };\n   55  \n\n~/Projects/plot-cv/inst/x86_64-linux-gnu/usr/local/lib/quickjs/io.js:\n   51  }\n   52  \n   53: define(HandlerEntry.prototype, { [Symbol.toStringTag]: 'HandlerEntry' });\n   54  \n   55  export class DescriptorMap extends Array {\n   ..\n   90  }\n   91  \n   92: define(DescriptorMap.prototype, { [Symbol.toStringTag]: 'DescriptorMap' });\n   93  \n   94  export class Multiplexer {\n   ..\n  154  }\n  155  \n  156: define(Multiplexer.prototype, { [Symbol.toStringTag]: 'Multiplexer' });\n  157  \n  158  const io = new Multiplexer();\n\n~/Projects/plot-cv/inst/x86_64-linux-gnu/usr/local/lib/quickjs/require.js:\n   95  }\n   96  \n   97: define(Module.prototype, { [Symbol.toStringTag]: 'Module' });\n   98  \n   99  class CJSModule extends Module {\n  ...\n  137  }\n  138  \n  139: define(CJSModule.prototype, { [Symbol.toStringTag]: 'CJSModule' });\n  140  \n  141  class ESModule extends Module {\n  ...\n  170  }\n  171  \n  172: define(ESModule.prototype, { [Symbol.toStringTag]: 'ESModule' });\n  173  \n  174  function statPath(path) {\n\n~/Projects/plot-cv/inst/x86_64-linux-gnu/usr/local/lib/quickjs/xpath.js:\n   12  }\n   13  \n   14: DereferenceError.prototype[Symbol.toStringTag] = 'DereferenceError';\n   15  \n   16  export class XPath {\n   ..\n  118      return;\n  119      `\\x1b[1;31m${this.constructor.name ?? className(this)}\\x1b[0m ` +\n  120:       inspect([...this].map(GetKey) ?? { __proto__: { [Symbol.toStringTag]: 'XPath' }, ...obj }, {\n  121          ...opts,\n  122          customInspect: true\n  ...\n  124    }\n  125  \n  126:   get [Symbol.toStringTag]() {\n  127      return 'XPath';\n  128    }\n  ...\n  131  }\n  132  \n  133: define(XPath.prototype, { [Symbol.toStringTag]: 'XPath' });\n  134  \n  135  export const ImmutableXPath = XPath;\n\n~/Projects/plot-cv/inst/x86_64-linux-gnu/usr/local/lib/quickjs/stack.js:\n   30  }\n   31  \n   32: Stack.prototype[Symbol.toStringTag] = 'Stack';\n   33  \n   34  Stack.prototype.toString = function() {\n   ..\n   45  Stack.prototype[inspectSymbol] = function(depth, options) {\n   46    return (\n   47:     `\\x1b[1;31m${this[Symbol.toStringTag]}\\x1b[0m ` +\n   48      globalThis.inspect([...this], depth, {\n   49        ...options,\n   ..\n  215    }\n  216  \n  217:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  218      return 'StackFrame';\n  219    }\n\n~/Projects/plot-cv/inst/x86_64-linux-gnu/usr/local/lib/quickjs/dom.js:\n  571  define(Node.prototype, Interface.prototype);\n  572  extend(Node.prototype, NODE_TYPES, { enumerable: false });\n  573: extend(Node.prototype, { [Symbol.toStringTag]: 'Node' }, { enumerable: false });\n  574  \n  575  function MakeCache(ctor, store = new WeakMap()) {\n  ...\n  652    NodeList.prototype,\n  653    {\n  654:     [Symbol.toStringTag]: 'NodeList',\n  655      *[Symbol.iterator]() {\n  656        const factory = Factory.for(this);\n  ...\n  701      constructor: NamedNodeMap,\n  702  \n  703:     [Symbol.toStringTag]: 'NamedNodeMap',\n  704  \n  705      get path() {\n  ...\n  994  }\n  995  \n  996: extend(Element.prototype, { [Symbol.toStringTag]: 'Element', nodeType: ELEMENT_NODE }, { enumerable: false });\n  997  \n  998  /*\n  ...\n 1167  }\n 1168  \n 1169: extend(Document.prototype, { [Symbol.toStringTag]: 'Document', nodeType: DOCUMENT_NODE }, { enumerable: false });\n 1170  \n 1171  export class Attr extends Node {\n ....\n 1226    {\n 1227      nodeType: ATTRIBUTE_NODE,\n 1228:     [Symbol.toStringTag]: 'Attr'\n 1229    },\n 1230    { enumerable: false }\n ....\n 1272  \n 1273    [inspectSymbol](depth, opts) {\n 1274:     return `\\x1b[1;31m${this[Symbol.toStringTag]}\\x1b[0m \\x1b[38;2;192;2550m${quote(this.data, \"'\")}\\x1b[0m`;\n 1275    }\n 1276  \n ....\n 1285      nodeType: TEXT_NODE,\n 1286      nodeName: '#text',\n 1287:     [Symbol.toStringTag]: 'Text'\n 1288    },\n 1289    { enumerable: false }\n ....\n 1332      nodeType: COMMENT_NODE,\n 1333      nodeName: '#comment',\n 1334:     [Symbol.toStringTag]: 'Comment'\n 1335    },\n 1336    { enumerable: false }\n ....\n 1435    TokenList.prototype,\n 1436    {\n 1437:     [Symbol.toStringTag]: 'TokenList'\n 1438    },\n 1439    { enumerable: false }\n ....\n 1593      constructor: CSSStyleDeclaration,\n 1594  \n 1595:     [Symbol.toStringTag]: 'CSSStyleDeclaration',\n 1596  \n 1597      get parentRule() {\n\n~/Projects/plot-cv/inst/x86_64-linux-gnu/usr/local/lib/quickjs/tty.js:\n   10  \n   11  define(ReadStream.prototype, {\n   12:   [Symbol.toStringTag]: 'ReadStream'\n   13  });\n   14  \n   ..\n   93      configurable: true\n   94    },\n   95:   [Symbol.toStringTag]: { value: 'WriteStream', configurable: true }\n   96  });\n   97  \n\n~/Projects/plot-cv/inst/x86_64-linux-gnu/usr/local/lib/quickjs/util.js:\n  182    },\n  183    isModuleNamespaceObject(v) {\n  184:     return isObject(v) && v[Symbol.toStringTag] == 'Module';\n  185    },\n  186    isConstructor(v) {\n  ...\n 1980  export function className(obj) {\n 1981    if(isObject(obj)) {\n 1982:     if(Symbol.toStringTag in obj) return obj[Symbol.toStringTag];\n 1983      if('constructor' in obj) return functionName(obj.constructor);\n 1984    }\n\n~/Projects/plot-cv/inst/x86_64-linux-gnu/usr/local/lib/quickjs/db.js:\n   95  \n   96  define(Pool.prototype, {\n   97:   [Symbol.toStringTag]: 'Pool'\n   98  });\n   99  \n\n~/Projects/plot-cv/inst/x86_64-linux-gnu/usr/local/lib/quickjs/repl.js:\n 2039  \n 2040  Object.assign(REPL.prototype, {\n 2041:   [Symbol.toStringTag]: 'REPL',\n 2042    handleInput: REPL.prototype.evalAndPrint,\n 2043    directives: loadModule\n\n~/Projects/plot-cv/inst/x86_64-linux-gnu/usr/local/lib/quickjs/streams.js:\n  135    }\n  136  \n  137:   define(ByLineStream.prototype, { [Symbol.toStringTag]: 'ByLineStream' });\n  138  \n  139    return ByLineStream;\n\n~/Projects/plot-cv/inst/x86_64-linux-gnu/usr/local/lib/quickjs/fs.js:\n  618    }\n  619  \n  620:   [Symbol.toStringTag] = 'inotify_event';\n  621  }\n  622  \n\n~/Projects/plot-cv/inst/x86_64-linux-gnu/usr/local/lib/quickjs/parser.js:\n   21  }\n   22  \n   23: define(Rule.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'Rule' });\n   24  \n   25  export class Terminal extends Rule {\n   ..\n   44  }\n   45  \n   46: define(Terminal.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'Terminal' });\n   47  \n   48  export class ZeroOrMore extends Rule {\n   ..\n   62  }\n   63  \n   64: define(ZeroOrMore.prototype, { [Symbol.operatorSet]: Operators.create({}), [Symbol.toStringTag]: 'ZeroOrMore' });\n   65  \n   66  export function make_operators_set(...op_list) {\n\n~/Projects/plot-cv/inst/x86_64-linux-gnu/usr/local/lib/quickjs/events.js:\n   55  }\n   56  \n   57: EventEmitter.prototype[Symbol.toStringTag] = 'EventEmitter';\n   58  \n   59  const PRIVATE = Symbol('EventTarget');\n   ..\n   98  }\n   99  \n  100: EventTarget.prototype[Symbol.toStringTag] = 'EventTarget';\n  101  \n  102  const getMethods = obj =>\n\n~/Projects/plot-cv/inst/x86_64-linux-gnu/usr/local/lib/quickjs/vfs.js:\n  311            for(let chunk of q) written += ar.write(chunk);\n  312          },\n  313:         [Symbol.toStringTag]: 'WriteStream'\n  314        };\n  315      } else {\n  ...\n  329            error: () => ar.error != null,\n  330            close: () => ar.close(),\n  331:           [Symbol.toStringTag]: 'ReadStream'\n  332          };\n  333        }\n\n~/Projects/plot-cv/inst/x86_64-linux-gnu/usr/local/lib/quickjs/lexer/c.js:\n  118  globalThis.CLexer = CLexer;\n  119  \n  120: define(CLexer.prototype, { [Symbol.toStringTag]: 'CLexer' });\n  121  \n  122  export default CLexer;\n\n~/Projects/plot-cv/inst/x86_64-linux-gnu/usr/local/lib/quickjs/lexer/csv.js:\n   23    }\n   24  \n   25:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n   26      return \"CSVLexer\";\n   27    }\n\n~/Projects/plot-cv/inst/x86_64-linux-gnu/usr/local/lib/quickjs/lexer/ecmascript.js:\n  129    }\n  130  \n  131:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  132      return \"ECMAScriptLexer\";\n  133    }\n\n~/Projects/plot-cv/inst/x86_64-linux-gnu/usr/local/lib/quickjs/lexer/bnf.js:\n  194    }\n  195  \n  196:   /* prettier-ignore */ get [Symbol.toStringTag]() {\n  197      return \"BNFLexer\";\n  198    }\n\n1212 matches across 435 files\n\n\nSearching 15882 files for \"\\[Symbol.toStringTag\\] =\" (regex, case sensitive)\n\n~/Projects/plot-cv/draw.js:\n   31    for(; e; ) {\n   32      yield e;\n   33:     if(e[Symbol.toStringTag] == 'HTMLDocument' && e[k] == null) e = window;\n   34      else e = e[k];\n   35    }\n\n~/Projects/plot-cv/test-features2d.js:\n   17    let ctor_names = Object.getOwnPropertyNames(cv).filter(name => typeof cv[name] == 'function');\n   18  \n   19:   let features2d_names = ctor_names.filter(name => cv[name].prototype && cv[name].prototype[Symbol.toStringTag] == 'Feature2D');\n   20  \n   21    console.log('cv', features2d_names);\n\n~/Projects/plot-cv/circuit.js:\n   19  }\n   20  \n   21: Comment.prototype[Symbol.toStringTag] = 'Comment';\n   22  \n   23  class Empty {\n   ..\n   36  }\n   37  \n   38: Empty.prototype[Symbol.toStringTag] = 'Empty';\n   39  \n   40  export class Via {\n   ..\n   54  }\n   55  \n   56: Via.prototype[Symbol.toStringTag] = 'Via';\n   57  \n   58  export class Board {\n   ..\n   63  }\n   64  \n   65: Board.prototype[Symbol.toStringTag] = 'Board';\n   66  \n   67  export class Package extends Array {\n   ..\n   79  }\n   80  \n   81: Package.prototype[Symbol.toStringTag] = 'Package';\n   82  \n   83  export class Component {\n   ..\n   92  }\n   93  \n   94: Component.prototype[Symbol.toStringTag] = 'Component';\n   95  \n   96  export class ConnectionPoint {\n   ..\n  105  }\n  106  \n  107: ConnectionPoint.prototype[Symbol.toStringTag] = 'ConnectionPoint';\n  108  \n  109  export class Connection {\n  ...\n  114  }\n  115  \n  116: Connection.prototype[Symbol.toStringTag] = 'Connection';\n  117  \n  118  export class Circuit {\n\n~/Projects/plot-cv/test-imread.js:\n   61    let ctor_names = Object.getOwnPropertyNames(cv).filter(name => typeof cv[name] == 'function');\n   62  \n   63:   let features2d_names = ctor_names.filter(name => cv[name].prototype && cv[name].prototype[Symbol.toStringTag] == 'Feature2D');\n   64  \n   65    console.log('cv', features2d_names);\n\n~/Projects/plot-cv/inotify_event.js:\n   61  }\n   62  \n   63: inotify_event.prototype[Symbol.toStringTag] = 'inotify_event';\n   64  \n\n~/Projects/plot-cv/resolve-imports.js:\n 1081  }\n 1082  \n 1083: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1084  FileMap.prototype[Symbol.inspect] = function(depth, opts) {\n 1085    let arr = [...this].map(([range, buf], i) => {\n\n~/Projects/plot-cv/clang-ast.js:\n  956  }\n  957  \n  958: Range.prototype[Symbol.toStringTag] = 'Range';\n  959  \n  960  export class Location {\n  ...\n 1494  }\n 1495  \n 1496: NodeError.prototype[Symbol.toStringTag] = 'NodeError';\n 1497  \n 1498  export function NodePrinter(ast) {\n\n~/Projects/plot-cv/quickjs/qjs-net/js/event-emitter.js:\n   47  }\n   48  \n   49: EventEmitter.prototype[Symbol.toStringTag] = 'EventEmitter';\n   50  \n\n~/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js:\n 1746  }\n 1747  \n 1748: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1749  \n 1750  function BufferFile(file, buf) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/tmp/resolve-imports.js:\n 1388    }\n 1389  };\n 1390: FileMap.prototype[Symbol.toStringTag] = \"FileMap\";\n 1391  function BufferFile(file2, buf) {\n 1392    file2 = path.resolve(file2);\n\n~/Projects/plot-cv/quickjs/qjs-modules/streams/demos/transforms/text-encode-transform.js:\n  146    function exportAs(name, value) {\n  147      // Make it stringify as [object <name>] rather than [object Object].\n  148:     value.prototype[Symbol.toStringTag] = name;\n  149      Object.defineProperty(self, name,\n  150                            {\n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/misc.js:\n  343  \n  344  export function isArrayBuffer(obj) {\n  345:   return obj instanceof ArrayBuffer || obj[Symbol.toStringTag] == 'ArrayBuffer';\n  346  }\n  347  \n  348  export function isBigDecimal(num) {\n  349:   return typeof num == 'bigdecimal' || num[Symbol.toStringTag] == 'BigDecimal';\n  350  }\n  351  \n  352  export function isBigFloat(num) {\n  353:   return typeof num == 'bigfloat' || num[Symbol.toStringTag] == 'BigFloat';\n  354  }\n  355  \n  356  export function isBigInt(num) {\n  357:   return typeof num == 'bigint' || num[Symbol.toStringTag] == 'isBigInt';\n  358  }\n  359  \n  ...\n  434  \n  435  export function isSymbol(value) {\n  436:   return typeof value == 'symbol' || value[Symbol.toStringTag] == 'Symbol';\n  437  }\n  438  \n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/xpath.js:\n   12  }\n   13  \n   14: DereferenceError.prototype[Symbol.toStringTag] = 'DereferenceError';\n   15  \n   16  export class XPath {\n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/stack.js:\n   31  }\n   32  \n   33: Stack.prototype[Symbol.toStringTag] = 'Stack';\n   34  \n   35  Stack.prototype.toString = function() {\n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/util.js:\n  182    },\n  183    isModuleNamespaceObject(v) {\n  184:     return isObject(v) && v[Symbol.toStringTag] == 'Module';\n  185    },\n  186    isConstructor(v) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/fs.js:\n  135  }\n  136  \n  137: Stats.prototype[Symbol.toStringTag] = 'Stats';\n  138  \n  139  for(let prop in statsFields) Object.defineProperty(Stats.prototype, prop, { value: undefined, enumerable: false, writable: true, configurable: true });\n  ...\n  279  }\n  280  \n  281: FileHandle.prototype[Symbol.toStringTag] = 'FileHandle';\n  282  \n  283  delete FileHandle.prototype.constructor;\n  ...\n  877    }\n  878  \n  879:   [Symbol.toStringTag] = 'inotify_event';\n  880  }\n  881  \n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/events.js:\n   55  }\n   56  \n   57: EventEmitter.prototype[Symbol.toStringTag] = 'EventEmitter';\n   58  \n   59  const PRIVATE = Symbol('EventTarget');\n   ..\n   98  }\n   99  \n  100: EventTarget.prototype[Symbol.toStringTag] = 'EventTarget';\n  101  \n  102  const getMethods = obj =>\n\n~/Projects/plot-cv/quickjs/qjs-modules/web-platform-tests-streams/webidl/ecmascript-binding/observable-array-ownkeys.window.js:\n   22        \"Own properties whose key is an array index have been added.\");\n   23  \n   24:   observableArray[Symbol.toStringTag] = \"string_tag\";\n   25    observableArray[Symbol.toPrimitive] = \"primitive\";\n   26    assert_array_equals(\n\n~/Projects/plot-cv/quickjs/qjs-modules/web-platform-tests-streams/generic-sensor/resources/generic-sensor-helpers.js:\n  174  \n  175    // Note that this is not serialized by postMessage().\n  176:   sensorData[Symbol.toStringTag] = sensor[Symbol.toStringTag];\n  177  \n  178    return sensorData;\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/bin/check-imports.js:\n 1746  }\n 1747  \n 1748: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1749  \n 1750  function BufferFile(file, buf) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/bin/resolve-imports.js:\n 1746  }\n 1747  \n 1748: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1749  \n 1750  function BufferFile(file, buf) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/bin/list-imports.js:\n 1746  }\n 1747  \n 1748: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1749  \n 1750  function BufferFile(file, buf) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/local/lib/quickjs/xpath.js:\n   12  }\n   13  \n   14: DereferenceError.prototype[Symbol.toStringTag] = 'DereferenceError';\n   15  \n   16  export class XPath {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/local/lib/quickjs/stack.js:\n   31  }\n   32  \n   33: Stack.prototype[Symbol.toStringTag] = 'Stack';\n   34  \n   35  Stack.prototype.toString = function() {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/local/lib/quickjs/util.js:\n  182    },\n  183    isModuleNamespaceObject(v) {\n  184:     return isObject(v) && v[Symbol.toStringTag] == 'Module';\n  185    },\n  186    isConstructor(v) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/local/lib/quickjs/fs.js:\n  241  }\n  242  \n  243: FileHandle.prototype[Symbol.toStringTag] = 'FileHandle';\n  244  \n  245  delete FileHandle.prototype.constructor;\n  ...\n  836    }\n  837  \n  838:   [Symbol.toStringTag] = 'inotify_event';\n  839  }\n  840  \n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-pc-msys/usr/local/lib/quickjs/events.js:\n   55  }\n   56  \n   57: EventEmitter.prototype[Symbol.toStringTag] = 'EventEmitter';\n   58  \n   59  const PRIVATE = Symbol('EventTarget');\n   ..\n   98  }\n   99  \n  100: EventTarget.prototype[Symbol.toStringTag] = 'EventTarget';\n  101  \n  102  const getMethods = obj =>\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/bin/resolve-imports.js:\n 1746  }\n 1747  \n 1748: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1749  \n 1750  function BufferFile(file, buf) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/xpath.js:\n   12  }\n   13  \n   14: DereferenceError.prototype[Symbol.toStringTag] = 'DereferenceError';\n   15  \n   16  export class XPath {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/stack.js:\n   31  }\n   32  \n   33: Stack.prototype[Symbol.toStringTag] = 'Stack';\n   34  \n   35  Stack.prototype.toString = function() {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/util.js:\n  182    },\n  183    isModuleNamespaceObject(v) {\n  184:     return isObject(v) && v[Symbol.toStringTag] == 'Module';\n  185    },\n  186    isConstructor(v) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/fs.js:\n  241  }\n  242  \n  243: FileHandle.prototype[Symbol.toStringTag] = 'FileHandle';\n  244  \n  245  delete FileHandle.prototype.constructor;\n  ...\n  836    }\n  837  \n  838:   [Symbol.toStringTag] = 'inotify_event';\n  839  }\n  840  \n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/events.js:\n   55  }\n   56  \n   57: EventEmitter.prototype[Symbol.toStringTag] = 'EventEmitter';\n   58  \n   59  const PRIVATE = Symbol('EventTarget');\n   ..\n   98  }\n   99  \n  100: EventTarget.prototype[Symbol.toStringTag] = 'EventTarget';\n  101  \n  102  const getMethods = obj =>\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/bin/check-imports.js:\n 1746  }\n 1747  \n 1748: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1749  \n 1750  function BufferFile(file, buf) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/bin/resolve-imports.js:\n 1746  }\n 1747  \n 1748: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1749  \n 1750  function BufferFile(file, buf) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/bin/list-imports.js:\n 1746  }\n 1747  \n 1748: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1749  \n 1750  function BufferFile(file, buf) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/xpath.js:\n   12  }\n   13  \n   14: DereferenceError.prototype[Symbol.toStringTag] = 'DereferenceError';\n   15  \n   16  export class XPath {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/stack.js:\n   31  }\n   32  \n   33: Stack.prototype[Symbol.toStringTag] = 'Stack';\n   34  \n   35  Stack.prototype.toString = function() {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/util.js:\n  182    },\n  183    isModuleNamespaceObject(v) {\n  184:     return isObject(v) && v[Symbol.toStringTag] == 'Module';\n  185    },\n  186    isConstructor(v) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/fs.js:\n  241  }\n  242  \n  243: FileHandle.prototype[Symbol.toStringTag] = 'FileHandle';\n  244  \n  245  delete FileHandle.prototype.constructor;\n  ...\n  836    }\n  837  \n  838:   [Symbol.toStringTag] = 'inotify_event';\n  839  }\n  840  \n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/events.js:\n   55  }\n   56  \n   57: EventEmitter.prototype[Symbol.toStringTag] = 'EventEmitter';\n   58  \n   59  const PRIVATE = Symbol('EventTarget');\n   ..\n   98  }\n   99  \n  100: EventTarget.prototype[Symbol.toStringTag] = 'EventTarget';\n  101  \n  102  const getMethods = obj =>\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/bin/check-imports.js:\n 1746  }\n 1747  \n 1748: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1749  \n 1750  function BufferFile(file, buf) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/bin/resolve-imports.js:\n 1746  }\n 1747  \n 1748: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1749  \n 1750  function BufferFile(file, buf) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/bin/list-imports.js:\n 1746  }\n 1747  \n 1748: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1749  \n 1750  function BufferFile(file, buf) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/xpath.js:\n   12  }\n   13  \n   14: DereferenceError.prototype[Symbol.toStringTag] = 'DereferenceError';\n   15  \n   16  export class XPath {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/stack.js:\n   31  }\n   32  \n   33: Stack.prototype[Symbol.toStringTag] = 'Stack';\n   34  \n   35  Stack.prototype.toString = function() {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/util.js:\n  182    },\n  183    isModuleNamespaceObject(v) {\n  184:     return isObject(v) && v[Symbol.toStringTag] == 'Module';\n  185    },\n  186    isConstructor(v) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/fs.js:\n  241  }\n  242  \n  243: FileHandle.prototype[Symbol.toStringTag] = 'FileHandle';\n  244  \n  245  delete FileHandle.prototype.constructor;\n  ...\n  836    }\n  837  \n  838:   [Symbol.toStringTag] = 'inotify_event';\n  839  }\n  840  \n\n~/Projects/plot-cv/quickjs/qjs-modules/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/events.js:\n   55  }\n   56  \n   57: EventEmitter.prototype[Symbol.toStringTag] = 'EventEmitter';\n   58  \n   59  const PRIVATE = Symbol('EventTarget');\n   ..\n   98  }\n   99  \n  100: EventTarget.prototype[Symbol.toStringTag] = 'EventTarget';\n  101  \n  102  const getMethods = obj =>\n\n~/Projects/plot-cv/quickjs/qjs-ffi/examples/portmidi.js:\n  623  }\n  624  \n  625: MIDIInput.prototype[Symbol.toStringTag] = 'MIDIInput';\n  626: MIDIOutput.prototype[Symbol.toStringTag] = 'MIDIOutput';\n  627: MIDIInputMap.prototype[Symbol.toStringTag] = 'MIDIInputMap';\n  628: MIDIOutputMap.prototype[Symbol.toStringTag] = 'MIDIOutputMap';\n  629: MIDIAccess.prototype[Symbol.toStringTag] = 'MIDIAccess';\n\n~/Projects/plot-cv/quickjs/inst/i686-w64-mingw32/usr/i686-w64-mingw32/sys-root/mingw/bin/resolve-imports.js:\n 1746  }\n 1747  \n 1748: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1749  \n 1750  function BufferFile(file, buf) {\n\n~/Projects/plot-cv/quickjs/inst/i686-w64-mingw32/usr/i686-w64-mingw32/sys-root/mingw/lib/quickjs/xpath.js:\n   12  }\n   13  \n   14: DereferenceError.prototype[Symbol.toStringTag] = 'DereferenceError';\n   15  \n   16  export class XPath {\n\n~/Projects/plot-cv/quickjs/inst/i686-w64-mingw32/usr/i686-w64-mingw32/sys-root/mingw/lib/quickjs/stack.js:\n   31  }\n   32  \n   33: Stack.prototype[Symbol.toStringTag] = 'Stack';\n   34  \n   35  Stack.prototype.toString = function() {\n\n~/Projects/plot-cv/quickjs/inst/i686-w64-mingw32/usr/i686-w64-mingw32/sys-root/mingw/lib/quickjs/util.js:\n  182    },\n  183    isModuleNamespaceObject(v) {\n  184:     return isObject(v) && v[Symbol.toStringTag] == 'Module';\n  185    },\n  186    isConstructor(v) {\n\n~/Projects/plot-cv/quickjs/inst/i686-w64-mingw32/usr/i686-w64-mingw32/sys-root/mingw/lib/quickjs/fs.js:\n  618    }\n  619  \n  620:   [Symbol.toStringTag] = 'inotify_event';\n  621  }\n  622  \n\n~/Projects/plot-cv/quickjs/inst/i686-w64-mingw32/usr/i686-w64-mingw32/sys-root/mingw/lib/quickjs/events.js:\n   55  }\n   56  \n   57: EventEmitter.prototype[Symbol.toStringTag] = 'EventEmitter';\n   58  \n   59  const PRIVATE = Symbol('EventTarget');\n   ..\n   98  }\n   99  \n  100: EventTarget.prototype[Symbol.toStringTag] = 'EventTarget';\n  101  \n  102  const getMethods = obj =>\n\n~/Projects/plot-cv/quickjs/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/bin/resolve-imports.js:\n 1746  }\n 1747  \n 1748: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1749  \n 1750  function BufferFile(file, buf) {\n\n~/Projects/plot-cv/quickjs/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/lib/quickjs/xpath.js:\n   12  }\n   13  \n   14: DereferenceError.prototype[Symbol.toStringTag] = 'DereferenceError';\n   15  \n   16  export class XPath {\n\n~/Projects/plot-cv/quickjs/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/lib/quickjs/stack.js:\n   31  }\n   32  \n   33: Stack.prototype[Symbol.toStringTag] = 'Stack';\n   34  \n   35  Stack.prototype.toString = function() {\n\n~/Projects/plot-cv/quickjs/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/lib/quickjs/util.js:\n  182    },\n  183    isModuleNamespaceObject(v) {\n  184:     return isObject(v) && v[Symbol.toStringTag] == 'Module';\n  185    },\n  186    isConstructor(v) {\n\n~/Projects/plot-cv/quickjs/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/lib/quickjs/fs.js:\n  618    }\n  619  \n  620:   [Symbol.toStringTag] = 'inotify_event';\n  621  }\n  622  \n\n~/Projects/plot-cv/quickjs/inst/x86_64-pc-msys/usr/x86_64-pc-msys/sys-root/usr/lib/quickjs/events.js:\n   55  }\n   56  \n   57: EventEmitter.prototype[Symbol.toStringTag] = 'EventEmitter';\n   58  \n   59  const PRIVATE = Symbol('EventTarget');\n   ..\n   98  }\n   99  \n  100: EventTarget.prototype[Symbol.toStringTag] = 'EventTarget';\n  101  \n  102  const getMethods = obj =>\n\n~/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/bin/resolve-imports.js:\n 1746  }\n 1747  \n 1748: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1749  \n 1750  function BufferFile(file, buf) {\n\n~/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/xpath.js:\n   12  }\n   13  \n   14: DereferenceError.prototype[Symbol.toStringTag] = 'DereferenceError';\n   15  \n   16  export class XPath {\n\n~/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/stack.js:\n   31  }\n   32  \n   33: Stack.prototype[Symbol.toStringTag] = 'Stack';\n   34  \n   35  Stack.prototype.toString = function() {\n\n~/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/util.js:\n  182    },\n  183    isModuleNamespaceObject(v) {\n  184:     return isObject(v) && v[Symbol.toStringTag] == 'Module';\n  185    },\n  186    isConstructor(v) {\n\n~/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/fs.js:\n  618    }\n  619  \n  620:   [Symbol.toStringTag] = 'inotify_event';\n  621  }\n  622  \n\n~/Projects/plot-cv/quickjs/inst/x86_64-linux-debug/usr/local/lib/quickjs/events.js:\n   55  }\n   56  \n   57: EventEmitter.prototype[Symbol.toStringTag] = 'EventEmitter';\n   58  \n   59  const PRIVATE = Symbol('EventTarget');\n   ..\n   98  }\n   99  \n  100: EventTarget.prototype[Symbol.toStringTag] = 'EventTarget';\n  101  \n  102  const getMethods = obj =>\n\n~/Projects/plot-cv/quickjs/inst/x86_64-w64-mingw32/usr/x86_64-w64-mingw32/sys-root/mingw/bin/resolve-imports.js:\n 1746  }\n 1747  \n 1748: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1749  \n 1750  function BufferFile(file, buf) {\n\n~/Projects/plot-cv/quickjs/inst/x86_64-w64-mingw32/usr/x86_64-w64-mingw32/sys-root/mingw/lib/quickjs/xpath.js:\n   12  }\n   13  \n   14: DereferenceError.prototype[Symbol.toStringTag] = 'DereferenceError';\n   15  \n   16  export class XPath {\n\n~/Projects/plot-cv/quickjs/inst/x86_64-w64-mingw32/usr/x86_64-w64-mingw32/sys-root/mingw/lib/quickjs/stack.js:\n   31  }\n   32  \n   33: Stack.prototype[Symbol.toStringTag] = 'Stack';\n   34  \n   35  Stack.prototype.toString = function() {\n\n~/Projects/plot-cv/quickjs/inst/x86_64-w64-mingw32/usr/x86_64-w64-mingw32/sys-root/mingw/lib/quickjs/util.js:\n  182    },\n  183    isModuleNamespaceObject(v) {\n  184:     return isObject(v) && v[Symbol.toStringTag] == 'Module';\n  185    },\n  186    isConstructor(v) {\n\n~/Projects/plot-cv/quickjs/inst/x86_64-w64-mingw32/usr/x86_64-w64-mingw32/sys-root/mingw/lib/quickjs/fs.js:\n  618    }\n  619  \n  620:   [Symbol.toStringTag] = 'inotify_event';\n  621  }\n  622  \n\n~/Projects/plot-cv/quickjs/inst/x86_64-w64-mingw32/usr/x86_64-w64-mingw32/sys-root/mingw/lib/quickjs/events.js:\n   55  }\n   56  \n   57: EventEmitter.prototype[Symbol.toStringTag] = 'EventEmitter';\n   58  \n   59  const PRIVATE = Symbol('EventTarget');\n   ..\n   98  }\n   99  \n  100: EventTarget.prototype[Symbol.toStringTag] = 'EventTarget';\n  101  \n  102  const getMethods = obj =>\n\n~/Projects/plot-cv/quickjs/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/bin/resolve-imports.js:\n 1746  }\n 1747  \n 1748: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1749  \n 1750  function BufferFile(file, buf) {\n\n~/Projects/plot-cv/quickjs/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/xpath.js:\n   12  }\n   13  \n   14: DereferenceError.prototype[Symbol.toStringTag] = 'DereferenceError';\n   15  \n   16  export class XPath {\n\n~/Projects/plot-cv/quickjs/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/stack.js:\n   31  }\n   32  \n   33: Stack.prototype[Symbol.toStringTag] = 'Stack';\n   34  \n   35  Stack.prototype.toString = function() {\n\n~/Projects/plot-cv/quickjs/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/util.js:\n  182    },\n  183    isModuleNamespaceObject(v) {\n  184:     return isObject(v) && v[Symbol.toStringTag] == 'Module';\n  185    },\n  186    isConstructor(v) {\n\n~/Projects/plot-cv/quickjs/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/fs.js:\n  618    }\n  619  \n  620:   [Symbol.toStringTag] = 'inotify_event';\n  621  }\n  622  \n\n~/Projects/plot-cv/quickjs/inst/i686-pc-msys/usr/i686-pc-msys/sys-root/usr/lib/quickjs/events.js:\n   55  }\n   56  \n   57: EventEmitter.prototype[Symbol.toStringTag] = 'EventEmitter';\n   58  \n   59  const PRIVATE = Symbol('EventTarget');\n   ..\n   98  }\n   99  \n  100: EventTarget.prototype[Symbol.toStringTag] = 'EventTarget';\n  101  \n  102  const getMethods = obj =>\n\n~/Projects/plot-cv/lib/compileCommand.js:\n  242  );\n  243  \n  244: //CompileCommand.prototype[Symbol.toStringTag] = 'CompileCommand';\n  245  \n  246  export class LinkCommand extends Command {\n  ...\n  267  }\n  268  \n  269: //LinkCommand.prototype[Symbol.toStringTag] = 'LinkCommand';\n  270  \n  271  define(\n\n~/Projects/plot-cv/lib/misc.js:\n  146    },\n  147    isModuleNamespaceObject(v) {\n  148:     return isObject(v) && v[Symbol.toStringTag] == 'Module';\n  149    },\n  150    isConstructor(v) {\n  ...\n 2417  \n 2418  export function isBigDecimal(num) {\n 2419:   return typeof num == 'bigdecimal' || num[Symbol.toStringTag] == 'BigDecimal';\n 2420  }\n 2421  \n 2422  export function isBigFloat(num) {\n 2423:   return typeof num == 'bigfloat' || num[Symbol.toStringTag] == 'BigFloat';\n 2424  }\n 2425  \n 2426  export function isBigInt(num) {\n 2427:   return typeof num == 'bigint' || num[Symbol.toStringTag] == 'isBigInt';\n 2428  }\n 2429  \n ....\n 2508  \n 2509  export function isSymbol(value) {\n 2510:   return typeof value == 'symbol' || value[Symbol.toStringTag] == 'Symbol';\n 2511  }\n 2512  \n\n~/Projects/plot-cv/lib/stack.js:\n   26  }\n   27  \n   28: Stack.prototype[Symbol.toStringTag] = 'Stack';\n   29  \n   30  Stack.prototype.toString = function() {\n\n~/Projects/plot-cv/lib/meriyah.js:\n  182  }\n  183  \n  184: ParseError.prototype[Symbol.toStringTag] = 'ParseError';\n  185  \n  186  function report(parser, type, ...params) {\n\n~/Projects/plot-cv/lib/location.js:\n   22    return new Location(line, column, pos, withFilename ? file : null, freeze);\n   23  };\n   24: Location.prototype[Symbol.toStringTag] = 'Location';\n   25  \n   26  Location.prototype[Symbol.iterator] = function* () {\n\n~/Projects/plot-cv/lib/svg/path.js:\n  549  };\n  550  \n  551: SvgPath.prototype[Symbol.toStringTag] = 'SvgPath';\n  552  \n  553  export default SvgPath;\n\n~/Projects/plot-cv/lib/geom/size.js:\n   57  Size.prototype.height = NaN;*/\n   58  Size.prototype.units = null;\n   59: Size.prototype[Symbol.toStringTag] = 'Size';\n   60  \n   61  Size.prototype.convertUnits = function(w = 'window' in globalThis ? window : null) {\n\n~/Projects/plot-cv/lib/geom/graph.js:\n  312  }\n  313  \n  314: Graph.prototype[Symbol.toStringTag] = 'Graph';\n  315  \n  316  export class Node {\n  ...\n  325  }\n  326  \n  327: Node.prototype[Symbol.toStringTag] = 'Node';\n  328  Node.prototype.point = null;\n  329  \n  ...\n  339  }\n  340  \n  341: Edge.prototype[Symbol.toStringTag] = 'Edge';\n  342  \n  343  Graph.Node = Node;\n\n~/Projects/plot-cv/lib/geom/pointList.js:\n  488    }\n  489  \n  490:   /*PointList.prototype[Symbol.toStringTag] = function(sep = ',', prec) {\n  491    return Array.prototype.map\n  492      .call(this, point => point.round(prec))\n  ...\n  559  }\n  560  \n  561: PointList.prototype[Symbol.toStringTag] = 'PointList';\n  562  \n  563  define(PointList, {\n\n~/Projects/plot-cv/lib/geom/rect.js:\n   88    return new Rect(...matches.map(m => +m[0]));\n   89  };\n   90: Rect.prototype[Symbol.toStringTag] = 'Rect';\n   91  \n   92  Rect.prototype.clone = function(fn) {\n\n~/Projects/plot-cv/lib/geom/bbox.js:\n  288  }\n  289  \n  290: BBox.prototype[Symbol.toStringTag] = 'BBox';\n  291  \n  292  export const isBBox = (bbox, testFn = (prop, name, obj) => name in obj) => isObject(bbox) && ['x1', 'y1', 'x2', 'y2'].every(n => testFn(bbox[n], n, bbox));\n\n~/Projects/plot-cv/lib/geom/circle.js:\n   60  \n   61  export const isCircle = obj => ['x', 'y', 'radius'].every(prop => obj[prop] !== undefined);\n   62: Circle.prototype[Symbol.toStringTag] = 'Circle';\n   63  \n   64  Object.defineProperty(Circle.prototype, 'x', {\n\n~/Projects/plot-cv/lib/color/hsla.js:\n  141    return parseInt('0x' + hex.slice(1));\n  142  };\n  143: HSLA.prototype[Symbol.toStringTag] = function() {\n  144    return HSLA.prototype.toString.call(this);\n  145  };\n\n~/Projects/plot-cv/lib/eagle/project.js:\n  338  }\n  339  \n  340: EagleProject.prototype[Symbol.toStringTag] = 'EagleProject';\n  341  \n\n~/Projects/plot-cv/lib/eagle/nodeMap.js:\n  134  }\n  135  \n  136: EagleNodeMap.prototype[Symbol.toStringTag] = 'EagleNodeMap';\n  137  \n\n~/Projects/plot-cv/lib/eagle/classes.js:\n    7    }\n    8  }\n    9: Library.prototype[Symbol.toStringTag] = 'Library';\n   10  \n   11  export class Package extends ObjectInterface {\n   ..\n   15  }\n   16  \n   17: Package.prototype[Symbol.toStringTag] = 'Package';\n   18  \n   19  export class Element extends ObjectInterface {\n   ..\n   39  }\n   40  \n   41: Element.prototype[Symbol.toStringTag] = 'Element';\n   42  \n\n~/Projects/plot-cv/lib/eagle/element.js:\n 1086  define(EagleElement, nonenumerable({ subscribers: [], r: null, class: undefined }));\n 1087  weakDefine(EagleElement.prototype, { [Symbol.toStringTag]: 'EagleElement' });\n 1088: EagleElement.prototype[Symbol.toStringTag] = 'EagleElement';\n 1089  \n 1090  export const makeEagleElement = (owner, ref, raw) => EagleElement.get(owner, ref, raw);\n\n~/Projects/plot-cv/lib/eagle/nodeList.js:\n  170  }\n  171  \n  172: EagleNodeList.prototype[Symbol.toStringTag] = 'EagleNodeList';\n  173  \n\n~/Projects/plot-cv/lib/dom/helpers.js:\n  225  }\n  226  \n  227: ObjectInterface.prototype[Symbol.toStringTag] = 'ObjectInterface';\n  228  \n\n~/Projects/plot-cv/lib/dom/cache.js:\n   13  };\n   14  \n   15: const isReq = req => req && req[Symbol.toStringTag] === 'Request';\n   16: const isRes = res => res && res[Symbol.toStringTag] === 'Response';\n   17  const strToBase64 = str => new Buffer(str).toString('hex');\n   18  const base64ToStr = hex => new Buffer(hex, 'hex').toString();\n\n~/Projects/plot-cv/lib/eda/circuitjs.js:\n   56  \n   57  Element.prototype = new Array();\n   58: Element.prototype[Symbol.toStringTag] = 'CircuitJSElement';\n   59  Element.prototype.constructor = Element;\n   60  Element.prototype.toString = function() {\n\n~/Projects/plot-cv/lib/ecmascript/lexer.js:\n   79  };\n   80  \n   81: SyntaxError.prototype[Symbol.toStringTag] = function() {\n   82    return this.toString();\n   83  };\n   ..\n  137  //Range.prototype.constructor = Range;\n  138  \n  139: Range.prototype[Symbol.toStringTag] = function(n, opts = {}) {\n  140    const { showFile = true, colors = false } = opts;\n  141  \n\n~/Projects/plot-cv/qjs-opencv/draw.js:\n   11     * @var {string} Draw.prototype.[Symbol.toStringTag]\n   12     */\n   13:   [Symbol.toStringTag] = 'Draw';\n   14  \n   15    /**\n\n~/Projects/plot-cv/qjs-opencv/rotated_rect.js:\n   44     * @var {string} RotatedRect.prototype.[Symbol.toStringTag]\n   45     */\n   46:   [Symbol.toStringTag] = 'RotatedRect';\n   47  \n   48    /**\n\n~/Projects/plot-cv/qjs-opencv/keypoint.js:\n   47     * @var {string} KeyPoint.prototype.[Symbol.toStringTag]\n   48     */\n   49:   [Symbol.toStringTag] = 'KeyPoint';\n   50  }\n   51  \n\n~/Projects/plot-cv/qjs-opencv/clahe.js:\n   33     * @var {string} CLAHE.prototype.[Symbol.toStringTag]\n   34     */\n   35:   [Symbol.toStringTag] = 'CLAHE';\n   36  }\n   37  \n\n~/Projects/plot-cv/qjs-opencv/video_capture.js:\n   59     * @var {string} VideoCapture.prototype.[Symbol.toStringTag]\n   60     */\n   61:   [Symbol.toStringTag] = 'VideoCapture';\n   62  }\n   63  \n\n~/Projects/plot-cv/qjs-opencv/utility.js:\n   75     * @var {string} TickMeter.prototype.[Symbol.toStringTag]\n   76     */\n   77:   [Symbol.toStringTag] = 'TickMeter';\n   78  }\n   79  \n\n~/Projects/plot-cv/qjs-opencv/umat.js:\n  226     * @var {string} UMat.prototype.[Symbol.toStringTag]\n  227     */\n  228:   [Symbol.toStringTag] = 'UMat';\n  229  \n  230    /**\n\n~/Projects/plot-cv/qjs-opencv/line_segment_detector.js:\n   29     * @var {string} LineSegmentDetector.prototype.[Symbol.toStringTag]\n   30     */\n   31:   [Symbol.toStringTag] = 'LineSegmentDetector';\n   32  }\n   33  \n\n~/Projects/plot-cv/qjs-opencv/contour.js:\n  273     * @var {string} Contour.prototype.[Symbol.toStringTag]\n  274     */\n  275:   [Symbol.toStringTag] = 'Contour';\n  276  \n  277    /**\n\n~/Projects/plot-cv/qjs-opencv/size.js:\n  151     * @var {string} Size.prototype.[Symbol.toStringTag]\n  152     */\n  153:   [Symbol.toStringTag] = 'Size';\n  154  }\n  155  \n\n~/Projects/plot-cv/qjs-opencv/video_writer.js:\n   47     * @var {string} VideoWriter.prototype.[Symbol.toStringTag]\n   48     */\n   49:   [Symbol.toStringTag] = 'VideoWriter';\n   50  \n   51    /**\n\n~/Projects/plot-cv/qjs-opencv/point_iterator.js:\n   22     * @var {string} PointIterator.prototype.[Symbol.toStringTag]\n   23     */\n   24:   [Symbol.toStringTag] = 'PointIterator';\n   25  }\n   26  \n\n~/Projects/plot-cv/qjs-opencv/feature2d.js:\n  233     * @var {string} Feature2D.prototype.[Symbol.toStringTag]\n  234     */\n  235:   [Symbol.toStringTag] = 'Feature2D';\n  236  }\n  237  \n\n~/Projects/plot-cv/qjs-opencv/subdiv2d.js:\n  101     * @var {string} Subdiv2D.prototype.[Symbol.toStringTag]\n  102     */\n  103:   [Symbol.toStringTag] = 'Subdiv2D';\n  104  \n  105    /**\n\n~/Projects/plot-cv/qjs-opencv/line.js:\n  192     * @var {string} Line.prototype.[Symbol.toStringTag]\n  193     */\n  194:   [Symbol.toStringTag] = 'Line';\n  195  \n  196    /**\n\n~/Projects/plot-cv/qjs-opencv/point.js:\n  123     * @var {string} Point.prototype.[Symbol.toStringTag]\n  124     */\n  125:   [Symbol.toStringTag] = 'Point';\n  126  \n  127    /**\n\n~/Projects/plot-cv/qjs-opencv/mat.js:\n  296     * @var {string} MatIterator.prototype.[Symbol.toStringTag]\n  297     */\n  298:   [Symbol.toStringTag] = 'Mat';\n  299  \n  300    /**\n  ...\n  306     * @var {string} MatIterator.prototype.[Symbol.toStringTag]\n  307     */\n  308:   [Symbol.toStringTag] = 'MatIterator';\n  309  \n  310    /**\n\n~/Projects/plot-cv/qjs-opencv/slice_iterator.js:\n   22     * @var {string} SliceIterator.prototype.[Symbol.toStringTag]\n   23     */\n   24:   [Symbol.toStringTag] = 'SliceIterator';\n   25  }\n   26  \n\n~/Projects/plot-cv/qjs-opencv/rect.js:\n  165     * @var {string} Rect.prototype.[Symbol.toStringTag]\n  166     */\n  167:   [Symbol.toStringTag] = 'Rect';\n  168  \n  169    /**\n\n~/Projects/plot-cv/qjs-opencv/fast_line_detector.js:\n   23     * @var {string} FastLineDetector.prototype.[Symbol.toStringTag]\n   24     */\n   25:   [Symbol.toStringTag] = 'FastLineDetector';\n   26  }\n   27  \n\n~/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/bin/resolve-imports.js:\n 1749  }\n 1750  \n 1751: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1752  \n 1753  function BufferFile(file, buf) {\n\n~/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/xpath.js:\n   12  }\n   13  \n   14: DereferenceError.prototype[Symbol.toStringTag] = 'DereferenceError';\n   15  \n   16  export class XPath {\n\n~/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/stack.js:\n   30  }\n   31  \n   32: Stack.prototype[Symbol.toStringTag] = 'Stack';\n   33  \n   34  Stack.prototype.toString = function() {\n\n~/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/util.js:\n  182    },\n  183    isModuleNamespaceObject(v) {\n  184:     return isObject(v) && v[Symbol.toStringTag] == 'Module';\n  185    },\n  186    isConstructor(v) {\n\n~/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/fs.js:\n  618    }\n  619  \n  620:   [Symbol.toStringTag] = 'inotify_event';\n  621  }\n  622  \n\n~/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/lib/quickjs/events.js:\n   55  }\n   56  \n   57: EventEmitter.prototype[Symbol.toStringTag] = 'EventEmitter';\n   58  \n   59  const PRIVATE = Symbol('EventTarget');\n   ..\n   98  }\n   99  \n  100: EventTarget.prototype[Symbol.toStringTag] = 'EventTarget';\n  101  \n  102  const getMethods = obj =>\n\n~/Projects/plot-cv/inst/x86_64-linux-gnu/usr/local/bin/resolve-imports.js:\n 1749  }\n 1750  \n 1751: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1752  \n 1753  function BufferFile(file, buf) {\n\n~/Projects/plot-cv/inst/x86_64-linux-gnu/usr/local/lib/quickjs/xpath.js:\n   12  }\n   13  \n   14: DereferenceError.prototype[Symbol.toStringTag] = 'DereferenceError';\n   15  \n   16  export class XPath {\n\n~/Projects/plot-cv/inst/x86_64-linux-gnu/usr/local/lib/quickjs/stack.js:\n   30  }\n   31  \n   32: Stack.prototype[Symbol.toStringTag] = 'Stack';\n   33  \n   34  Stack.prototype.toString = function() {\n\n~/Projects/plot-cv/inst/x86_64-linux-gnu/usr/local/lib/quickjs/util.js:\n  182    },\n  183    isModuleNamespaceObject(v) {\n  184:     return isObject(v) && v[Symbol.toStringTag] == 'Module';\n  185    },\n  186    isConstructor(v) {\n\n~/Projects/plot-cv/inst/x86_64-linux-gnu/usr/local/lib/quickjs/fs.js:\n  618    }\n  619  \n  620:   [Symbol.toStringTag] = 'inotify_event';\n  621  }\n  622  \n\n~/Projects/plot-cv/inst/x86_64-linux-gnu/usr/local/lib/quickjs/events.js:\n   55  }\n   56  \n   57: EventEmitter.prototype[Symbol.toStringTag] = 'EventEmitter';\n   58  \n   59  const PRIVATE = Symbol('EventTarget');\n   ..\n   98  }\n   99  \n  100: EventTarget.prototype[Symbol.toStringTag] = 'EventTarget';\n  101  \n  102  const getMethods = obj =>\n\n181 matches across 134 files\n\n\nSearching 15137 files for \"\\[Symbol.toStringTag\\] =\" (regex, case sensitive)\n\n~/Projects/plot-cv/draw.js:\n   31    for(; e; ) {\n   32      yield e;\n   33:     if(e[Symbol.toStringTag] == 'HTMLDocument' && e[k] == null) e = window;\n   34      else e = e[k];\n   35    }\n\n~/Projects/plot-cv/test-features2d.js:\n   17    let ctor_names = Object.getOwnPropertyNames(cv).filter(name => typeof cv[name] == 'function');\n   18  \n   19:   let features2d_names = ctor_names.filter(name => cv[name].prototype && cv[name].prototype[Symbol.toStringTag] == 'Feature2D');\n   20  \n   21    console.log('cv', features2d_names);\n\n~/Projects/plot-cv/circuit.js:\n   19  }\n   20  \n   21: Comment.prototype[Symbol.toStringTag] = 'Comment';\n   22  \n   23  class Empty {\n   ..\n   36  }\n   37  \n   38: Empty.prototype[Symbol.toStringTag] = 'Empty';\n   39  \n   40  export class Via {\n   ..\n   54  }\n   55  \n   56: Via.prototype[Symbol.toStringTag] = 'Via';\n   57  \n   58  export class Board {\n   ..\n   63  }\n   64  \n   65: Board.prototype[Symbol.toStringTag] = 'Board';\n   66  \n   67  export class Package extends Array {\n   ..\n   79  }\n   80  \n   81: Package.prototype[Symbol.toStringTag] = 'Package';\n   82  \n   83  export class Component {\n   ..\n   92  }\n   93  \n   94: Component.prototype[Symbol.toStringTag] = 'Component';\n   95  \n   96  export class ConnectionPoint {\n   ..\n  105  }\n  106  \n  107: ConnectionPoint.prototype[Symbol.toStringTag] = 'ConnectionPoint';\n  108  \n  109  export class Connection {\n  ...\n  114  }\n  115  \n  116: Connection.prototype[Symbol.toStringTag] = 'Connection';\n  117  \n  118  export class Circuit {\n\n~/Projects/plot-cv/test-imread.js:\n   61    let ctor_names = Object.getOwnPropertyNames(cv).filter(name => typeof cv[name] == 'function');\n   62  \n   63:   let features2d_names = ctor_names.filter(name => cv[name].prototype && cv[name].prototype[Symbol.toStringTag] == 'Feature2D');\n   64  \n   65    console.log('cv', features2d_names);\n\n~/Projects/plot-cv/inotify_event.js:\n   61  }\n   62  \n   63: inotify_event.prototype[Symbol.toStringTag] = 'inotify_event';\n   64  \n\n~/Projects/plot-cv/resolve-imports.js:\n 1081  }\n 1082  \n 1083: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1084  FileMap.prototype[Symbol.inspect] = function(depth, opts) {\n 1085    let arr = [...this].map(([range, buf], i) => {\n\n~/Projects/plot-cv/clang-ast.js:\n  956  }\n  957  \n  958: Range.prototype[Symbol.toStringTag] = 'Range';\n  959  \n  960  export class Location {\n  ...\n 1494  }\n 1495  \n 1496: NodeError.prototype[Symbol.toStringTag] = 'NodeError';\n 1497  \n 1498  export function NodePrinter(ast) {\n\n~/Projects/plot-cv/quickjs/qjs-net/js/event-emitter.js:\n   47  }\n   48  \n   49: EventEmitter.prototype[Symbol.toStringTag] = 'EventEmitter';\n   50  \n\n~/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js:\n 1746  }\n 1747  \n 1748: FileMap.prototype[Symbol.toStringTag] = 'FileMap';\n 1749  \n 1750  function BufferFile(file, buf) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/tmp/resolve-imports.js:\n 1388    }\n 1389  };\n 1390: FileMap.prototype[Symbol.toStringTag] = \"FileMap\";\n 1391  function BufferFile(file2, buf) {\n 1392    file2 = path.resolve(file2);\n\n~/Projects/plot-cv/quickjs/qjs-modules/streams/demos/transforms/text-encode-transform.js:\n  146    function exportAs(name, value) {\n  147      // Make it stringify as [object <name>] rather than [object Object].\n  148:     value.prototype[Symbol.toStringTag] = name;\n  149      Object.defineProperty(self, name,\n  150                            {\n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/misc.js:\n  343  \n  344  export function isArrayBuffer(obj) {\n  345:   return obj instanceof ArrayBuffer || obj[Symbol.toStringTag] == 'ArrayBuffer';\n  346  }\n  347  \n  348  export function isBigDecimal(num) {\n  349:   return typeof num == 'bigdecimal' || num[Symbol.toStringTag] == 'BigDecimal';\n  350  }\n  351  \n  352  export function isBigFloat(num) {\n  353:   return typeof num == 'bigfloat' || num[Symbol.toStringTag] == 'BigFloat';\n  354  }\n  355  \n  356  export function isBigInt(num) {\n  357:   return typeof num == 'bigint' || num[Symbol.toStringTag] == 'isBigInt';\n  358  }\n  359  \n  ...\n  434  \n  435  export function isSymbol(value) {\n  436:   return typeof value == 'symbol' || value[Symbol.toStringTag] == 'Symbol';\n  437  }\n  438  \n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/xpath.js:\n   12  }\n   13  \n   14: DereferenceError.prototype[Symbol.toStringTag] = 'DereferenceError';\n   15  \n   16  export class XPath {\n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/stack.js:\n   31  }\n   32  \n   33: Stack.prototype[Symbol.toStringTag] = 'Stack';\n   34  \n   35  Stack.prototype.toString = function() {\n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/util.js:\n  182    },\n  183    isModuleNamespaceObject(v) {\n  184:     return isObject(v) && v[Symbol.toStringTag] == 'Module';\n  185    },\n  186    isConstructor(v) {\n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/fs.js:\n  135  }\n  136  \n  137: Stats.prototype[Symbol.toStringTag] = 'Stats';\n  138  \n  139  for(let prop in statsFields) Object.defineProperty(Stats.prototype, prop, { value: undefined, enumerable: false, writable: true, configurable: true });\n  ...\n  279  }\n  280  \n  281: FileHandle.prototype[Symbol.toStringTag] = 'FileHandle';\n  282  \n  283  delete FileHandle.prototype.constructor;\n  ...\n  877    }\n  878  \n  879:   [Symbol.toStringTag] = 'inotify_event';\n  880  }\n  881  \n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/events.js:\n   55  }\n   56  \n   57: EventEmitter.prototype[Symbol.toStringTag] = 'EventEmitter';\n   58  \n   59  const PRIVATE = Symbol('EventTarget');\n   ..\n   98  }\n   99  \n  100: EventTarget.prototype[Symbol.toStringTag] = 'EventTarget';\n  101  \n  102  const getMethods = obj =>\n\n~/Projects/plot-cv/quickjs/qjs-modules/web-platform-tests-streams/webidl/ecmascript-binding/observable-array-ownkeys.window.js:\n   22        \"Own properties whose key is an array index have been added.\");\n   23  \n   24:   observableArray[Symbol.toStringTag] = \"string_tag\";\n   25    observableArray[Symbol.toPrimitive] = \"primitive\";\n   26    assert_array_equals(\n\n~/Projects/plot-cv/quickjs/qjs-modules/web-platform-tests-streams/generic-sensor/resources/generic-sensor-helpers.js:\n  174  \n  175    // Note that this is not serialized by postMessage().\n  176:   sensorData[Symbol.toStringTag] = sensor[Symbol.toStringTag];\n  177  \n  178    return sensorData;\n\n~/Projects/plot-cv/quickjs/qjs-ffi/examples/portmidi.js:\n  623  }\n  624  \n  625: MIDIInput.prototype[Symbol.toStringTag] = 'MIDIInput';\n  626: MIDIOutput.prototype[Symbol.toStringTag] = 'MIDIOutput';\n  627: MIDIInputMap.prototype[Symbol.toStringTag] = 'MIDIInputMap';\n  628: MIDIOutputMap.prototype[Symbol.toStringTag] = 'MIDIOutputMap';\n  629: MIDIAccess.prototype[Symbol.toStringTag] = 'MIDIAccess';\n\n~/Projects/plot-cv/lib/compileCommand.js:\n  242  );\n  243  \n  244: //CompileCommand.prototype[Symbol.toStringTag] = 'CompileCommand';\n  245  \n  246  export class LinkCommand extends Command {\n  ...\n  267  }\n  268  \n  269: //LinkCommand.prototype[Symbol.toStringTag] = 'LinkCommand';\n  270  \n  271  define(\n\n~/Projects/plot-cv/lib/misc.js:\n  146    },\n  147    isModuleNamespaceObject(v) {\n  148:     return isObject(v) && v[Symbol.toStringTag] == 'Module';\n  149    },\n  150    isConstructor(v) {\n  ...\n 2417  \n 2418  export function isBigDecimal(num) {\n 2419:   return typeof num == 'bigdecimal' || num[Symbol.toStringTag] == 'BigDecimal';\n 2420  }\n 2421  \n 2422  export function isBigFloat(num) {\n 2423:   return typeof num == 'bigfloat' || num[Symbol.toStringTag] == 'BigFloat';\n 2424  }\n 2425  \n 2426  export function isBigInt(num) {\n 2427:   return typeof num == 'bigint' || num[Symbol.toStringTag] == 'isBigInt';\n 2428  }\n 2429  \n ....\n 2508  \n 2509  export function isSymbol(value) {\n 2510:   return typeof value == 'symbol' || value[Symbol.toStringTag] == 'Symbol';\n 2511  }\n 2512  \n\n~/Projects/plot-cv/lib/stack.js:\n   26  }\n   27  \n   28: Stack.prototype[Symbol.toStringTag] = 'Stack';\n   29  \n   30  Stack.prototype.toString = function() {\n\n~/Projects/plot-cv/lib/meriyah.js:\n  182  }\n  183  \n  184: ParseError.prototype[Symbol.toStringTag] = 'ParseError';\n  185  \n  186  function report(parser, type, ...params) {\n\n~/Projects/plot-cv/lib/location.js:\n   22    return new Location(line, column, pos, withFilename ? file : null, freeze);\n   23  };\n   24: Location.prototype[Symbol.toStringTag] = 'Location';\n   25  \n   26  Location.prototype[Symbol.iterator] = function* () {\n\n~/Projects/plot-cv/lib/svg/path.js:\n  549  };\n  550  \n  551: SvgPath.prototype[Symbol.toStringTag] = 'SvgPath';\n  552  \n  553  export default SvgPath;\n\n~/Projects/plot-cv/lib/geom/size.js:\n   57  Size.prototype.height = NaN;*/\n   58  Size.prototype.units = null;\n   59: Size.prototype[Symbol.toStringTag] = 'Size';\n   60  \n   61  Size.prototype.convertUnits = function(w = 'window' in globalThis ? window : null) {\n\n~/Projects/plot-cv/lib/geom/graph.js:\n  312  }\n  313  \n  314: Graph.prototype[Symbol.toStringTag] = 'Graph';\n  315  \n  316  export class Node {\n  ...\n  325  }\n  326  \n  327: Node.prototype[Symbol.toStringTag] = 'Node';\n  328  Node.prototype.point = null;\n  329  \n  ...\n  339  }\n  340  \n  341: Edge.prototype[Symbol.toStringTag] = 'Edge';\n  342  \n  343  Graph.Node = Node;\n\n~/Projects/plot-cv/lib/geom/pointList.js:\n  488    }\n  489  \n  490:   /*PointList.prototype[Symbol.toStringTag] = function(sep = ',', prec) {\n  491    return Array.prototype.map\n  492      .call(this, point => point.round(prec))\n  ...\n  559  }\n  560  \n  561: PointList.prototype[Symbol.toStringTag] = 'PointList';\n  562  \n  563  define(PointList, {\n\n~/Projects/plot-cv/lib/geom/rect.js:\n   88    return new Rect(...matches.map(m => +m[0]));\n   89  };\n   90: Rect.prototype[Symbol.toStringTag] = 'Rect';\n   91  \n   92  Rect.prototype.clone = function(fn) {\n\n~/Projects/plot-cv/lib/geom/bbox.js:\n  288  }\n  289  \n  290: BBox.prototype[Symbol.toStringTag] = 'BBox';\n  291  \n  292  export const isBBox = (bbox, testFn = (prop, name, obj) => name in obj) => isObject(bbox) && ['x1', 'y1', 'x2', 'y2'].every(n => testFn(bbox[n], n, bbox));\n\n~/Projects/plot-cv/lib/geom/circle.js:\n   60  \n   61  export const isCircle = obj => ['x', 'y', 'radius'].every(prop => obj[prop] !== undefined);\n   62: Circle.prototype[Symbol.toStringTag] = 'Circle';\n   63  \n   64  Object.defineProperty(Circle.prototype, 'x', {\n\n~/Projects/plot-cv/lib/color/hsla.js:\n  141    return parseInt('0x' + hex.slice(1));\n  142  };\n  143: HSLA.prototype[Symbol.toStringTag] = function() {\n  144    return HSLA.prototype.toString.call(this);\n  145  };\n\n~/Projects/plot-cv/lib/eagle/project.js:\n  338  }\n  339  \n  340: EagleProject.prototype[Symbol.toStringTag] = 'EagleProject';\n  341  \n\n~/Projects/plot-cv/lib/eagle/nodeMap.js:\n  134  }\n  135  \n  136: EagleNodeMap.prototype[Symbol.toStringTag] = 'EagleNodeMap';\n  137  \n\n~/Projects/plot-cv/lib/eagle/classes.js:\n    7    }\n    8  }\n    9: Library.prototype[Symbol.toStringTag] = 'Library';\n   10  \n   11  export class Package extends ObjectInterface {\n   ..\n   15  }\n   16  \n   17: Package.prototype[Symbol.toStringTag] = 'Package';\n   18  \n   19  export class Element extends ObjectInterface {\n   ..\n   39  }\n   40  \n   41: Element.prototype[Symbol.toStringTag] = 'Element';\n   42  \n\n~/Projects/plot-cv/lib/eagle/element.js:\n 1086  define(EagleElement, nonenumerable({ subscribers: [], r: null, class: undefined }));\n 1087  weakDefine(EagleElement.prototype, { [Symbol.toStringTag]: 'EagleElement' });\n 1088: EagleElement.prototype[Symbol.toStringTag] = 'EagleElement';\n 1089  \n 1090  export const makeEagleElement = (owner, ref, raw) => EagleElement.get(owner, ref, raw);\n\n~/Projects/plot-cv/lib/eagle/nodeList.js:\n  170  }\n  171  \n  172: EagleNodeList.prototype[Symbol.toStringTag] = 'EagleNodeList';\n  173  \n\n~/Projects/plot-cv/lib/dom/helpers.js:\n  225  }\n  226  \n  227: ObjectInterface.prototype[Symbol.toStringTag] = 'ObjectInterface';\n  228  \n\n~/Projects/plot-cv/lib/dom/cache.js:\n   13  };\n   14  \n   15: const isReq = req => req && req[Symbol.toStringTag] === 'Request';\n   16: const isRes = res => res && res[Symbol.toStringTag] === 'Response';\n   17  const strToBase64 = str => new Buffer(str).toString('hex');\n   18  const base64ToStr = hex => new Buffer(hex, 'hex').toString();\n\n~/Projects/plot-cv/lib/eda/circuitjs.js:\n   56  \n   57  Element.prototype = new Array();\n   58: Element.prototype[Symbol.toStringTag] = 'CircuitJSElement';\n   59  Element.prototype.constructor = Element;\n   60  Element.prototype.toString = function() {\n\n~/Projects/plot-cv/lib/ecmascript/lexer.js:\n   79  };\n   80  \n   81: SyntaxError.prototype[Symbol.toStringTag] = function() {\n   82    return this.toString();\n   83  };\n   ..\n  137  //Range.prototype.constructor = Range;\n  138  \n  139: Range.prototype[Symbol.toStringTag] = function(n, opts = {}) {\n  140    const { showFile = true, colors = false } = opts;\n  141  \n\n~/Projects/plot-cv/qjs-opencv/draw.js:\n   11     * @var {string} Draw.prototype.[Symbol.toStringTag]\n   12     */\n   13:   [Symbol.toStringTag] = 'Draw';\n   14  \n   15    /**\n\n~/Projects/plot-cv/qjs-opencv/rotated_rect.js:\n   44     * @var {string} RotatedRect.prototype.[Symbol.toStringTag]\n   45     */\n   46:   [Symbol.toStringTag] = 'RotatedRect';\n   47  \n   48    /**\n\n~/Projects/plot-cv/qjs-opencv/keypoint.js:\n   47     * @var {string} KeyPoint.prototype.[Symbol.toStringTag]\n   48     */\n   49:   [Symbol.toStringTag] = 'KeyPoint';\n   50  }\n   51  \n\n~/Projects/plot-cv/qjs-opencv/clahe.js:\n   33     * @var {string} CLAHE.prototype.[Symbol.toStringTag]\n   34     */\n   35:   [Symbol.toStringTag] = 'CLAHE';\n   36  }\n   37  \n\n~/Projects/plot-cv/qjs-opencv/video_capture.js:\n   59     * @var {string} VideoCapture.prototype.[Symbol.toStringTag]\n   60     */\n   61:   [Symbol.toStringTag] = 'VideoCapture';\n   62  }\n   63  \n\n~/Projects/plot-cv/qjs-opencv/utility.js:\n   75     * @var {string} TickMeter.prototype.[Symbol.toStringTag]\n   76     */\n   77:   [Symbol.toStringTag] = 'TickMeter';\n   78  }\n   79  \n\n~/Projects/plot-cv/qjs-opencv/umat.js:\n  226     * @var {string} UMat.prototype.[Symbol.toStringTag]\n  227     */\n  228:   [Symbol.toStringTag] = 'UMat';\n  229  \n  230    /**\n\n~/Projects/plot-cv/qjs-opencv/line_segment_detector.js:\n   29     * @var {string} LineSegmentDetector.prototype.[Symbol.toStringTag]\n   30     */\n   31:   [Symbol.toStringTag] = 'LineSegmentDetector';\n   32  }\n   33  \n\n~/Projects/plot-cv/qjs-opencv/contour.js:\n  273     * @var {string} Contour.prototype.[Symbol.toStringTag]\n  274     */\n  275:   [Symbol.toStringTag] = 'Contour';\n  276  \n  277    /**\n\n~/Projects/plot-cv/qjs-opencv/size.js:\n  151     * @var {string} Size.prototype.[Symbol.toStringTag]\n  152     */\n  153:   [Symbol.toStringTag] = 'Size';\n  154  }\n  155  \n\n~/Projects/plot-cv/qjs-opencv/video_writer.js:\n   47     * @var {string} VideoWriter.prototype.[Symbol.toStringTag]\n   48     */\n   49:   [Symbol.toStringTag] = 'VideoWriter';\n   50  \n   51    /**\n\n~/Projects/plot-cv/qjs-opencv/point_iterator.js:\n   22     * @var {string} PointIterator.prototype.[Symbol.toStringTag]\n   23     */\n   24:   [Symbol.toStringTag] = 'PointIterator';\n   25  }\n   26  \n\n~/Projects/plot-cv/qjs-opencv/feature2d.js:\n  233     * @var {string} Feature2D.prototype.[Symbol.toStringTag]\n  234     */\n  235:   [Symbol.toStringTag] = 'Feature2D';\n  236  }\n  237  \n\n~/Projects/plot-cv/qjs-opencv/subdiv2d.js:\n  101     * @var {string} Subdiv2D.prototype.[Symbol.toStringTag]\n  102     */\n  103:   [Symbol.toStringTag] = 'Subdiv2D';\n  104  \n  105    /**\n\n~/Projects/plot-cv/qjs-opencv/line.js:\n  192     * @var {string} Line.prototype.[Symbol.toStringTag]\n  193     */\n  194:   [Symbol.toStringTag] = 'Line';\n  195  \n  196    /**\n\n~/Projects/plot-cv/qjs-opencv/point.js:\n  123     * @var {string} Point.prototype.[Symbol.toStringTag]\n  124     */\n  125:   [Symbol.toStringTag] = 'Point';\n  126  \n  127    /**\n\n~/Projects/plot-cv/qjs-opencv/mat.js:\n  296     * @var {string} MatIterator.prototype.[Symbol.toStringTag]\n  297     */\n  298:   [Symbol.toStringTag] = 'Mat';\n  299  \n  300    /**\n  ...\n  306     * @var {string} MatIterator.prototype.[Symbol.toStringTag]\n  307     */\n  308:   [Symbol.toStringTag] = 'MatIterator';\n  309  \n  310    /**\n\n~/Projects/plot-cv/qjs-opencv/slice_iterator.js:\n   22     * @var {string} SliceIterator.prototype.[Symbol.toStringTag]\n   23     */\n   24:   [Symbol.toStringTag] = 'SliceIterator';\n   25  }\n   26  \n\n~/Projects/plot-cv/qjs-opencv/rect.js:\n  165     * @var {string} Rect.prototype.[Symbol.toStringTag]\n  166     */\n  167:   [Symbol.toStringTag] = 'Rect';\n  168  \n  169    /**\n\n~/Projects/plot-cv/qjs-opencv/fast_line_detector.js:\n   23     * @var {string} FastLineDetector.prototype.[Symbol.toStringTag]\n   24     */\n   25:   [Symbol.toStringTag] = 'FastLineDetector';\n   26  }\n   27  \n\n94 matches across 62 files\n",
			"settings":
			{
				"buffer_size": 529290,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "quickjs/qjs-modules/lib/util.js",
			"settings":
			{
				"buffer_size": 70090,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					68,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAACJVAAAAAAAAI1UAAAAAAAAAAAAAI1UAAAAAAAAnVQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIlUAAAAAAAAiVQAAAAAAAAAAAAAAAPC/"
				],
				[
					70,
					1,
					"",
					null,
					"AQAAACdVAAAAAAAAQ1UAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJ1UAAAAAAAAnVQAAAAAAAAAAAAAAAPC/"
				],
				[
					71,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAENVAAAAAAAARVUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQ1UAAAAAAABDVQAAAAAAAAAAAAAAAPC/"
				],
				[
					72,
					1,
					"insert",
					{
						"characters": "p"
					},
					"AQAAAERVAAAAAAAARVUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARFUAAAAAAABEVQAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					1,
					"left_delete",
					null,
					"AQAAAERVAAAAAAAARFUAAAAAAAABAAAAcA",
					"AQAAAAAAAAABAAAARVUAAAAAAABFVQAAAAAAAAAAAAAAAPC/"
				],
				[
					74,
					1,
					"insert",
					{
						"characters": "props"
					},
					"BQAAAERVAAAAAAAARVUAAAAAAAAAAAAARVUAAAAAAABGVQAAAAAAAAAAAABGVQAAAAAAAEdVAAAAAAAAAAAAAEdVAAAAAAAASFUAAAAAAAAAAAAASFUAAAAAAABJVQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARFUAAAAAAABEVQAAAAAAAAAAAAAAAPC/"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEpVAAAAAAAAS1UAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASlUAAAAAAABKVQAAAAAAAAAAAAAAAPC/"
				],
				[
					78,
					1,
					"insert",
					{
						"characters": "[..."
					},
					"BAAAACdVAAAAAAAAKFUAAAAAAAAAAAAAKFUAAAAAAAApVQAAAAAAAAAAAAApVQAAAAAAACpVAAAAAAAAAAAAACpVAAAAAAAAK1UAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJ1UAAAAAAAAnVQAAAAAAAAAAAAAAAEJA"
				],
				[
					80,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAE9VAAAAAAAAUFUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAT1UAAAAAAABPVQAAAAAAAP///////+9/"
				],
				[
					81,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFBVAAAAAAAAUVUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUFUAAAAAAABQVQAAAAAAAAAAAAAAAPC/"
				],
				[
					85,
					1,
					"",
					null,
					"AQAAAFFVAAAAAAAAbVUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUVUAAAAAAABRVQAAAAAAAAAAAAAAAPC/"
				],
				[
					88,
					2,
					"left_delete",
					null,
					"AgAAAFJVAAAAAAAAUlUAAAAAAAABAAAAPVFVAAAAAAAAUVUAAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAAU1UAAAAAAABTVQAAAAAAAAAAAAAAAPC/"
				],
				[
					90,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAGtVAAAAAAAAbVUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAa1UAAAAAAABrVQAAAAAAAP///////+9/"
				],
				[
					91,
					1,
					"insert",
					{
						"characters": "props"
					},
					"BQAAAGxVAAAAAAAAbVUAAAAAAAAAAAAAbVUAAAAAAABuVQAAAAAAAAAAAABuVQAAAAAAAG9VAAAAAAAAAAAAAG9VAAAAAAAAcFUAAAAAAAAAAAAAcFUAAAAAAABxVQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbFUAAAAAAABsVQAAAAAAAAAAAAAAAPC/"
				],
				[
					93,
					1,
					"insert",
					{
						"characters": " ]"
					},
					"AgAAAHJVAAAAAAAAc1UAAAAAAAAAAAAAc1UAAAAAAAB0VQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAclUAAAAAAAByVQAAAAAAAAAAAAAAAPC/"
				],
				[
					97,
					1,
					"insert",
					{
						"characters": " ..."
					},
					"BAAAAFBVAAAAAAAAUVUAAAAAAAAAAAAAUVUAAAAAAABSVQAAAAAAAAAAAABSVQAAAAAAAFNVAAAAAAAAAAAAAFNVAAAAAAAAVFUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUFUAAAAAAABQVQAAAAAAAAAAAAAAUHlA"
				],
				[
					100,
					2,
					"left_delete",
					null,
					"AgAAAClVAAAAAAAAKVUAAAAAAAABAAAALihVAAAAAAAAKFUAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAAKlUAAAAAAAAqVQAAAAAAAAAAAAAAAPC/"
				],
				[
					101,
					1,
					"right_delete",
					null,
					"AQAAAChVAAAAAAAAKFUAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAAKFUAAAAAAAAoVQAAAAAAAAAAAAAAAPC/"
				],
				[
					102,
					1,
					"left_delete",
					null,
					"AQAAACdVAAAAAAAAJ1UAAAAAAAABAAAAWw",
					"AQAAAAAAAAABAAAAKFUAAAAAAAAoVQAAAAAAAAAAAAAAAPC/"
				],
				[
					105,
					1,
					"insert",
					{
						"characters": ".concat"
					},
					"BwAAAEpVAAAAAAAAS1UAAAAAAAAAAAAAS1UAAAAAAABMVQAAAAAAAAAAAABMVQAAAAAAAE1VAAAAAAAAAAAAAE1VAAAAAAAATlUAAAAAAAAAAAAATlUAAAAAAABPVQAAAAAAAAAAAABPVQAAAAAAAFBVAAAAAAAAAAAAAFBVAAAAAAAAUVUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASlUAAAAAAABKVQAAAAAAAAAAAAAAAPC/"
				],
				[
					106,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAFFVAAAAAAAAU1UAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUVUAAAAAAABRVQAAAAAAAAAAAAAAAPC/"
				],
				[
					107,
					8,
					"right_delete",
					null,
					"CAAAAFJVAAAAAAAAUlUAAAAAAAABAAAAKVJVAAAAAAAAUlUAAAAAAAABAAAAIFJVAAAAAAAAUlUAAAAAAAABAAAALFJVAAAAAAAAUlUAAAAAAAABAAAAIFJVAAAAAAAAUlUAAAAAAAABAAAALlJVAAAAAAAAUlUAAAAAAAABAAAALlJVAAAAAAAAUlUAAAAAAAABAAAALlJVAAAAAAAAUlUAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAUlUAAAAAAABSVQAAAAAAAAAAAAAAAPC/"
				],
				[
					109,
					2,
					"left_delete",
					null,
					"AgAAAHRVAAAAAAAAdFUAAAAAAAABAAAAXXNVAAAAAAAAc1UAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAdVUAAAAAAAB1VQAAAAAAAP///////+9/"
				],
				[
					110,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAHNVAAAAAAAAdFUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAc1UAAAAAAABzVQAAAAAAAAAAAAAAAPC/"
				],
				[
					112,
					1,
					"insert",
					{
						"characters": "const"
					},
					"BQAAACdVAAAAAAAAKFUAAAAAAAAAAAAAKFUAAAAAAAApVQAAAAAAAAAAAAApVQAAAAAAACpVAAAAAAAAAAAAACpVAAAAAAAAK1UAAAAAAAAAAAAAK1UAAAAAAAAsVQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJ1UAAAAAAAAnVQAAAAAAAAAAAAAAAEJA"
				],
				[
					113,
					1,
					"insert",
					{
						"characters": " keys="
					},
					"BgAAACxVAAAAAAAALVUAAAAAAAAAAAAALVUAAAAAAAAuVQAAAAAAAAAAAAAuVQAAAAAAAC9VAAAAAAAAAAAAAC9VAAAAAAAAMFUAAAAAAAAAAAAAMFUAAAAAAAAxVQAAAAAAAAAAAAAxVQAAAAAAADJVAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALFUAAAAAAAAsVQAAAAAAAAAAAAAAAPC/"
				],
				[
					115,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAH9VAAAAAAAAgFUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAf1UAAAAAAAB/VQAAAAAAAP///////+9/"
				],
				[
					121,
					1,
					"insert",
					{
						"characters": "of"
					},
					"AgAAAJNVAAAAAAAAlFUAAAAAAAAAAAAAlFUAAAAAAACVVQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAk1UAAAAAAACTVQAAAAAAAAAAAAAAAPC/"
				],
				[
					122,
					1,
					"insert",
					{
						"characters": " keys"
					},
					"BQAAAJVVAAAAAAAAllUAAAAAAAAAAAAAllUAAAAAAACXVQAAAAAAAAAAAACXVQAAAAAAAJhVAAAAAAAAAAAAAJhVAAAAAAAAmVUAAAAAAAAAAAAAmVUAAAAAAACaVQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlVUAAAAAAACVVQAAAAAAAAAAAAAAAPC/"
				],
				[
					124,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAKFVAAAAAAAAo1UAAAAAAAAAAAAAmlUAAAAAAACcVQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmlUAAAAAAAChVQAAAAAAAAAAAAAAAPC/"
				],
				[
					129,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAnFUAAAAAAACjVQAAAAAAAAAAAAAAAPC/"
				],
				[
					175,
					1,
					"paste",
					null,
					"AQAAADtVAAAAAAAATlUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAO1UAAAAAAAA7VQAAAAAAAAAAAAAAAPC/"
				],
				[
					178,
					1,
					"cut",
					null,
					"AQAAAE5VAAAAAAAATlUAAAAAAAAVAAAAZ2V0T3duUHJvcGVydHlTeW1ib2xz",
					"AQAAAAAAAAABAAAATlUAAAAAAABjVQAAAAAAAAAAAAAAAPC/"
				],
				[
					188,
					1,
					"paste",
					null,
					"AgAAAGRVAAAAAAAAeVUAAAAAAAAAAAAAeVUAAAAAAAB5VQAAAAAAABMAAABnZXRPd25Qcm9wZXJ0eU5hbWVz",
					"AQAAAAAAAAABAAAAZFUAAAAAAAB3VQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "draw.js",
			"settings":
			{
				"buffer_size": 16817,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					131,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAKgrAAAAAAAAqSsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACoKwAAAAAAAKgrAAAAAAAAAAAAAAAA8L8"
				],
				[
					132,
					1,
					"insert",
					{
						"characters": " this"
					},
					"BQAAAKkrAAAAAAAAqisAAAAAAAAAAAAAqisAAAAAAACrKwAAAAAAAAAAAACrKwAAAAAAAKwrAAAAAAAAAAAAAKwrAAAAAAAArSsAAAAAAAAAAAAArSsAAAAAAACuKwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACpKwAAAAAAAKkrAAAAAAAAAAAAAAAA8L8"
				],
				[
					160,
					1,
					"insert",
					{
						"characters": "ws"
					},
					"AgAAAHArAAAAAAAAcSsAAAAAAAAAAAAAcSsAAAAAAAByKwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABwKwAAAAAAAHArAAAAAAAAAAAAAAAA8L8"
				],
				[
					165,
					4,
					"left_delete",
					null,
					"BAAAAK8rAAAAAAAArysAAAAAAAABAAAAc64rAAAAAAAArisAAAAAAAABAAAAaa0rAAAAAAAArSsAAAAAAAABAAAAaKwrAAAAAAAArCsAAAAAAAABAAAAdA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACwKwAAAAAAALArAAAAAAAAAAAAAAAA8L8"
				],
				[
					166,
					1,
					"insert",
					{
						"characters": "ws"
					},
					"AgAAAKwrAAAAAAAArSsAAAAAAAAAAAAArSsAAAAAAACuKwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACsKwAAAAAAAKwrAAAAAAAAAAAAAAAA8L8"
				],
				[
					177,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AgAAAHArAAAAAAAAcSsAAAAAAAAAAAAAcSsAAAAAAABxKwAAAAAAAAIAAAB3cw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABwKwAAAAAAAHIrAAAAAAAAAAAAAAAA8L8"
				],
				[
					182,
					1,
					"insert",
					{
						"characters": "e.tasrget"
					},
					"CgAAAKsrAAAAAAAArCsAAAAAAAAAAAAArCsAAAAAAACsKwAAAAAAAAIAAAB3c6wrAAAAAAAArSsAAAAAAAAAAAAArSsAAAAAAACuKwAAAAAAAAAAAACuKwAAAAAAAK8rAAAAAAAAAAAAAK8rAAAAAAAAsCsAAAAAAAAAAAAAsCsAAAAAAACxKwAAAAAAAAAAAACxKwAAAAAAALIrAAAAAAAAAAAAALIrAAAAAAAAsysAAAAAAAAAAAAAsysAAAAAAAC0KwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACrKwAAAAAAAK0rAAAAAAAAAAAAAAAA8L8"
				],
				[
					183,
					5,
					"left_delete",
					null,
					"BQAAALMrAAAAAAAAsysAAAAAAAABAAAAdLIrAAAAAAAAsisAAAAAAAABAAAAZbErAAAAAAAAsSsAAAAAAAABAAAAZ7ArAAAAAAAAsCsAAAAAAAABAAAAcq8rAAAAAAAArysAAAAAAAABAAAAcw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC0KwAAAAAAALQrAAAAAAAAAAAAAAAA8L8"
				],
				[
					184,
					1,
					"insert",
					{
						"characters": "rget"
					},
					"BAAAAK8rAAAAAAAAsCsAAAAAAAAAAAAAsCsAAAAAAACxKwAAAAAAAAAAAACxKwAAAAAAALIrAAAAAAAAAAAAALIrAAAAAAAAsysAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACvKwAAAAAAAK8rAAAAAAAAAAAAAAAA8L8"
				],
				[
					200,
					1,
					"insert_snippet",
					{
						"contents": "{${0:$SELECTION}}"
					},
					"AgAAAHArAAAAAAAAcCsAAAAAAAABAAAAZXArAAAAAAAAcysAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABwKwAAAAAAAHErAAAAAAAAAAAAAAAA8L8"
				],
				[
					201,
					1,
					"insert",
					{
						"characters": " target:"
					},
					"CQAAAHErAAAAAAAAcisAAAAAAAAAAAAAcisAAAAAAAByKwAAAAAAAAEAAABlcisAAAAAAABzKwAAAAAAAAAAAABzKwAAAAAAAHQrAAAAAAAAAAAAAHQrAAAAAAAAdSsAAAAAAAAAAAAAdSsAAAAAAAB2KwAAAAAAAAAAAAB2KwAAAAAAAHcrAAAAAAAAAAAAAHcrAAAAAAAAeCsAAAAAAAAAAAAAeCsAAAAAAAB5KwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABxKwAAAAAAAHIrAAAAAAAAAAAAAAAA8L8"
				],
				[
					202,
					1,
					"insert",
					{
						"characters": " ws"
					},
					"AwAAAHkrAAAAAAAAeisAAAAAAAAAAAAAeisAAAAAAAB7KwAAAAAAAAAAAAB7KwAAAAAAAHwrAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB5KwAAAAAAAHkrAAAAAAAAAAAAAAAA8L8"
				],
				[
					203,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHwrAAAAAAAAfSsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB8KwAAAAAAAHwrAAAAAAAAAAAAAAAA8L8"
				],
				[
					213,
					1,
					"insert",
					{
						"characters": "ws"
					},
					"AwAAALgrAAAAAAAAuSsAAAAAAAAAAAAAuSsAAAAAAAC5KwAAAAAAAAgAAABlLnRhcmdldLkrAAAAAAAAuisAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC4KwAAAAAAAMArAAAAAAAAAAAAAAAA8L8"
				],
				[
					224,
					1,
					"cut",
					null,
					"AQAAANEsAAAAAAAA0SwAAAAAAAA4AAAAICB3cy5zZW5kTWVzc2FnZSA9IG1zZyA9PiB3cy5zZW5kKEpTT04uc3RyaW5naWZ5KG1zZykpOwo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADRLAAAAAAAAAktAAAAAAAAAAAAAAAA8L8"
				],
				[
					227,
					1,
					"paste",
					null,
					"AQAAAIYrAAAAAAAAvisAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACGKwAAAAAAAIYrAAAAAAAAAAAAAAAA8L8"
				],
				[
					228,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAL4rAAAAAAAAvysAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC+KwAAAAAAAL4rAAAAAAAAAAAAAAAA8L8"
				],
				[
					231,
					4,
					"left_delete",
					null,
					"BAAAAPIrAAAAAAAA8isAAAAAAAABAAAAc/ErAAAAAAAA8SsAAAAAAAABAAAAd/ArAAAAAAAA8CsAAAAAAAABAAAAIO8rAAAAAAAA7ysAAAAAAAABAAAALA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADzKwAAAAAAAPMrAAAAAAAAAAAAAAAA8L8"
				],
				[
					234,
					1,
					"left_delete",
					null,
					"AQAAAAQtAAAAAAAABC0AAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAFLQAAAAAAAAUtAAAAAAAAAAAAAAAAe0A"
				],
				[
					267,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAO8rAAAAAAAA8CsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADvKwAAAAAAAO8rAAAAAAAAAAAAAAAA8L8"
				],
				[
					268,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPArAAAAAAAA8SsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADwKwAAAAAAAPArAAAAAAAAAAAAAAAA8L8"
				],
				[
					269,
					1,
					"paste",
					null,
					"AQAAAPErAAAAAAAA/ysAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADxKwAAAAAAAPErAAAAAAAAAAAAAAAA8L8"
				],
				[
					282,
					1,
					"left_delete",
					null,
					"AQAAAPMrAAAAAAAA8ysAAAAAAAAMAAAALnNlbmRNZXNzYWdl",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADzKwAAAAAAAP8rAAAAAAAAAAAAAAAA8L8"
				],
				[
					341,
					1,
					"cut",
					null,
					"AQAAAIIrAAAAAAAAgisAAAAAAAA8AAAAICAgICAgd3Muc2VuZE1lc3NhZ2UgPSBtc2cgPT4gd3Muc2VuZChKU09OLnN0cmluZ2lmeShtc2cpKTsK",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACCKwAAAAAAAL4rAAAAAAAAAAAAAAAA8L8"
				],
				[
					344,
					1,
					"paste",
					null,
					"AQAAAMMqAAAAAAAA/yoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADDKgAAAAAAAMMqAAAAAAAAAAAAAAAA8L8"
				],
				[
					349,
					1,
					"insert",
					{
						"characters": "func"
					},
					"BQAAAMkqAAAAAAAAyioAAAAAAAAAAAAAyioAAAAAAADKKgAAAAAAAAMAAAB3cy7KKgAAAAAAAMsqAAAAAAAAAAAAAMsqAAAAAAAAzCoAAAAAAAAAAAAAzCoAAAAAAADNKgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADMKgAAAAAAAMkqAAAAAAAAAAAAAAAAS0A"
				],
				[
					350,
					1,
					"insert",
					{
						"characters": " tion"
					},
					"BQAAAM0qAAAAAAAAzioAAAAAAAAAAAAAzioAAAAAAADPKgAAAAAAAAAAAADPKgAAAAAAANAqAAAAAAAAAAAAANAqAAAAAAAA0SoAAAAAAAAAAAAA0SoAAAAAAADSKgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADNKgAAAAAAAM0qAAAAAAAAAAAAAAAA8L8"
				],
				[
					351,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANIqAAAAAAAA0yoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADSKgAAAAAAANIqAAAAAAAAAAAAAAAA8L8"
				],
				[
					352,
					6,
					"left_delete",
					null,
					"BgAAANIqAAAAAAAA0ioAAAAAAAABAAAAINEqAAAAAAAA0SoAAAAAAAABAAAAbtAqAAAAAAAA0CoAAAAAAAABAAAAb88qAAAAAAAAzyoAAAAAAAABAAAAac4qAAAAAAAAzioAAAAAAAABAAAAdM0qAAAAAAAAzSoAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADTKgAAAAAAANMqAAAAAAAAAAAAAAAA8L8"
				],
				[
					353,
					1,
					"insert",
					{
						"characters": "tion"
					},
					"BAAAAM0qAAAAAAAAzioAAAAAAAAAAAAAzioAAAAAAADPKgAAAAAAAAAAAADPKgAAAAAAANAqAAAAAAAAAAAAANAqAAAAAAAA0SoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADNKgAAAAAAAM0qAAAAAAAAAAAAAAAA8L8"
				],
				[
					354,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANEqAAAAAAAA0ioAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADRKgAAAAAAANEqAAAAAAAAAAAAAAAA8L8"
				],
				[
					356,
					1,
					"left_delete",
					null,
					"AQAAAN4qAAAAAAAA3ioAAAAAAAABAAAAPQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADfKgAAAAAAAN8qAAAAAAAAAAAAAAAA8L8"
				],
				[
					357,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAN4qAAAAAAAA4CoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADeKgAAAAAAAN4qAAAAAAAAAAAAAAAA8L8"
				],
				[
					359,
					1,
					"left_delete",
					null,
					"AQAAAN8qAAAAAAAA3yoAAAAAAAABAAAAKQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADgKgAAAAAAAOAqAAAAAAAAAAAAAAAA8L8"
				],
				[
					361,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAOMqAAAAAAAA5CoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADjKgAAAAAAAOMqAAAAAAAAAAAAAAAA8L8"
				],
				[
					362,
					1,
					"insert",
					{
						"characters": " }"
					},
					"AgAAAOQqAAAAAAAA5SoAAAAAAAAAAAAA5SoAAAAAAADmKgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADkKgAAAAAAAOQqAAAAAAAAAAAAAAAA8L8"
				],
				[
					363,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAOYqAAAAAAAA6CoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADmKgAAAAAAAOYqAAAAAAAAAAAAAAAA8L8"
				],
				[
					364,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAOYqAAAAAAAA5ioAAAAAAAABAAAAe+YqAAAAAAAA5ioAAAAAAAABAAAAfQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADnKgAAAAAAAOcqAAAAAAAAAAAAAAAA8L8"
				],
				[
					365,
					1,
					"left_delete",
					null,
					"AQAAAOUqAAAAAAAA5SoAAAAAAAABAAAAfQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADmKgAAAAAAAOYqAAAAAAAAAAAAAAAA8L8"
				],
				[
					366,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAOUqAAAAAAAA5yoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADlKgAAAAAAAOUqAAAAAAAAAAAAAAAA8L8"
				],
				[
					367,
					4,
					"right_delete",
					null,
					"BAAAAOYqAAAAAAAA5ioAAAAAAAABAAAAfeYqAAAAAAAA5ioAAAAAAAABAAAAIOYqAAAAAAAA5ioAAAAAAAABAAAAPeYqAAAAAAAA5ioAAAAAAAABAAAAPg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADmKgAAAAAAAOYqAAAAAAAAAAAAAAAA8L8"
				],
				[
					368,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAOYqAAAAAAAA5yoAAAAAAAAAAAAA5yoAAAAAAADtKgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADmKgAAAAAAAOYqAAAAAAAAAAAAAAAA8L8"
				],
				[
					370,
					1,
					"insert",
					{
						"characters": "\n}"
					},
					"BQAAAAsrAAAAAAAADCsAAAAAAAAAAAAADCsAAAAAAAATKwAAAAAAAAAAAAATKwAAAAAAABQrAAAAAAAAAAAAAAwrAAAAAAAADCsAAAAAAAAHAAAAICAgICAgIAwrAAAAAAAAESsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAALKwAAAAAAAAsrAAAAAAAA////////738"
				],
				[
					372,
					1,
					"insert",
					{
						"characters": "return"
					},
					"BgAAAO0qAAAAAAAA7ioAAAAAAAAAAAAA7ioAAAAAAADvKgAAAAAAAAAAAADvKgAAAAAAAPAqAAAAAAAAAAAAAPAqAAAAAAAA8SoAAAAAAAAAAAAA8SoAAAAAAADyKgAAAAAAAAAAAADyKgAAAAAAAPMqAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADtKgAAAAAAAO0qAAAAAAAAAAAAAAAAS0A"
				],
				[
					401,
					2,
					"right_delete",
					null,
					"AgAAAOw5AAAAAAAA7DkAAAAAAAACAAAAd3PsOQAAAAAAAOw5AAAAAAAAAQAAAC4",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADsOQAAAAAAAO45AAAAAAAAAAAAAAAA8L8"
				],
				[
					418,
					1,
					"",
					null,
					"AQAAAE0GAAAAAAAAWAYAAAAAAAAOAAAAd3Muc2VuZE1lc3NhZ2U",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABNBgAAAAAAAFsGAAAAAAAAAAAAAAAA8L8"
				],
				[
					419,
					1,
					"",
					null,
					"AQAAAKsUAAAAAAAAthQAAAAAAAAOAAAAd3Muc2VuZE1lc3NhZ2U",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACrFAAAAAAAALkUAAAAAAAAAAAAAAAA8L8"
				],
				[
					428,
					1,
					"insert",
					{
						"characters": "&&"
					},
					"AgAAAIYsAAAAAAAAhywAAAAAAAAAAAAAhywAAAAAAACILAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACGLAAAAAAAAIYsAAAAAAAAAAAAAAAA8L8"
				],
				[
					429,
					2,
					"left_delete",
					null,
					"AgAAAIcsAAAAAAAAhywAAAAAAAABAAAAJoYsAAAAAAAAhiwAAAAAAAABAAAAJg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACILAAAAAAAAIgsAAAAAAAAAAAAAAAA8L8"
				],
				[
					430,
					1,
					"insert",
					{
						"characters": "(//"
					},
					"AwAAAIYsAAAAAAAAhywAAAAAAAAAAAAAhywAAAAAAACILAAAAAAAAAAAAACILAAAAAAAAIksAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACGLAAAAAAAAIYsAAAAAAAAAAAAAAAA8L8"
				],
				[
					431,
					3,
					"left_delete",
					null,
					"AwAAAIgsAAAAAAAAiCwAAAAAAAABAAAAL4csAAAAAAAAhywAAAAAAAABAAAAL4YsAAAAAAAAhiwAAAAAAAABAAAAKA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACJLAAAAAAAAIksAAAAAAAAAAAAAAAA8L8"
				],
				[
					432,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAIYsAAAAAAAAhywAAAAAAAAAAAAAhywAAAAAAACILAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACGLAAAAAAAAIYsAAAAAAAAAAAAAAAA8L8"
				],
				[
					445,
					2,
					"left_delete",
					null,
					"AgAAADsGAAAAAAAAOwYAAAAAAAAQAAAAJiB3cy5zZW5kTWVzc2FnZToGAAAAAAAAOgYAAAAAAAABAAAAJg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA7BgAAAAAAAEsGAAAAAAAAAAAAAAAA8L8"
				],
				[
					482,
					1,
					"insert",
					{
						"characters": "globalThis."
					},
					"CwAAAN0qAAAAAAAA3ioAAAAAAAAAAAAA3ioAAAAAAADfKgAAAAAAAAAAAADfKgAAAAAAAOAqAAAAAAAAAAAAAOAqAAAAAAAA4SoAAAAAAAAAAAAA4SoAAAAAAADiKgAAAAAAAAAAAADiKgAAAAAAAOMqAAAAAAAAAAAAAOMqAAAAAAAA5CoAAAAAAAAAAAAA5CoAAAAAAADlKgAAAAAAAAAAAADlKgAAAAAAAOYqAAAAAAAAAAAAAOYqAAAAAAAA5yoAAAAAAAAAAAAA5yoAAAAAAADoKgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADdKgAAAAAAAN0qAAAAAAAAAAAAAAAA8L8"
				],
				[
					495,
					1,
					"insert",
					{
						"characters": ",sendMessage"
					},
					"DAAAACMwAAAAAAAAJDAAAAAAAAAAAAAAJDAAAAAAAAAlMAAAAAAAAAAAAAAlMAAAAAAAACYwAAAAAAAAAAAAACYwAAAAAAAAJzAAAAAAAAAAAAAAJzAAAAAAAAAoMAAAAAAAAAAAAAAoMAAAAAAAACkwAAAAAAAAAAAAACkwAAAAAAAAKjAAAAAAAAAAAAAAKjAAAAAAAAArMAAAAAAAAAAAAAArMAAAAAAAACwwAAAAAAAAAAAAACwwAAAAAAAALTAAAAAAAAAAAAAALTAAAAAAAAAuMAAAAAAAAAAAAAAuMAAAAAAAAC8wAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAjMAAAAAAAACMwAAAAAAAAAAAAAAAA8L8"
				],
				[
					500,
					1,
					"cut",
					null,
					"AQAAACMwAAAAAAAAIzAAAAAAAAAMAAAALHNlbmRNZXNzYWdl",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAjMAAAAAAAAC8wAAAAAAAA////////738"
				],
				[
					504,
					1,
					"paste",
					null,
					"AQAAANQvAAAAAAAA4C8AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADULwAAAAAAANQvAAAAAAAAAAAAAAAA8L8"
				],
				[
					523,
					1,
					"insert",
					{
						"characters": "{"
					},
					"AQAAADwGAAAAAAAAPQYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA8BgAAAAAAADwGAAAAAAAAAAAAAAAA8L8"
				],
				[
					524,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BwAAAD0GAAAAAAAAPgYAAAAAAAAAAAAAPgYAAAAAAABABgAAAAAAAAAAAAA+BgAAAAAAAD4GAAAAAAAAAgAAACAgPgYAAAAAAABCBgAAAAAAAAAAAABCBgAAAAAAAEMGAAAAAAAAAAAAAEMGAAAAAAAARwYAAAAAAAAAAAAAPgYAAAAAAAA+BgAAAAAAAAQAAAAgICAg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA9BgAAAAAAAD0GAAAAAAAAAAAAAAAA8L8"
				],
				[
					526,
					1,
					"insert",
					{
						"characters": "try"
					},
					"AwAAAD4GAAAAAAAAPwYAAAAAAAAAAAAAPwYAAAAAAABABgAAAAAAAAAAAABABgAAAAAAAEEGAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA+BgAAAAAAAD4GAAAAAAAAAAAAAAAAQkA"
				],
				[
					527,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEEGAAAAAAAAQgYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABBBgAAAAAAAEEGAAAAAAAAAAAAAAAA8L8"
				],
				[
					528,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAEIGAAAAAAAARAYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABCBgAAAAAAAEIGAAAAAAAAAAAAAAAA8L8"
				],
				[
					529,
					1,
					"right_delete",
					null,
					"AQAAAEMGAAAAAAAAQwYAAAAAAAABAAAAfQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABDBgAAAAAAAEMGAAAAAAAAAAAAAAAA8L8"
				],
				[
					532,
					1,
					"insert",
					{
						"characters": "\n}catch"
					},
					"CgAAAG4GAAAAAAAAbwYAAAAAAAAAAAAAbwYAAAAAAABzBgAAAAAAAAAAAABzBgAAAAAAAHQGAAAAAAAAAAAAAG8GAAAAAAAAbwYAAAAAAAAEAAAAICAgIG8GAAAAAAAAcQYAAAAAAAAAAAAAcgYAAAAAAABzBgAAAAAAAAAAAABzBgAAAAAAAHQGAAAAAAAAAAAAAHQGAAAAAAAAdQYAAAAAAAAAAAAAdQYAAAAAAAB2BgAAAAAAAAAAAAB2BgAAAAAAAHcGAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABuBgAAAAAAAG4GAAAAAAAA////////738"
				],
				[
					533,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAHcGAAAAAAAAeQYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB3BgAAAAAAAHcGAAAAAAAAAAAAAAAA8L8"
				],
				[
					534,
					1,
					"insert",
					{
						"characters": "error"
					},
					"BQAAAHgGAAAAAAAAeQYAAAAAAAAAAAAAeQYAAAAAAAB6BgAAAAAAAAAAAAB6BgAAAAAAAHsGAAAAAAAAAAAAAHsGAAAAAAAAfAYAAAAAAAAAAAAAfAYAAAAAAAB9BgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB4BgAAAAAAAHgGAAAAAAAAAAAAAAAA8L8"
				],
				[
					536,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAH4GAAAAAAAAgAYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB+BgAAAAAAAH4GAAAAAAAAAAAAAAAA8L8"
				],
				[
					537,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAH8GAAAAAAAAgAYAAAAAAAAAAAAAgAYAAAAAAACCBgAAAAAAAAAAAACCBgAAAAAAAIMGAAAAAAAAAAAAAIMGAAAAAAAAhQYAAAAAAAAAAAAAgAYAAAAAAACABgAAAAAAAAIAAAAgIIAGAAAAAAAAhAYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB/BgAAAAAAAH8GAAAAAAAAAAAAAAAA8L8"
				],
				[
					539,
					1,
					"insert",
					{
						"characters": "}"
					},
					"AgAAAI0GAAAAAAAAjgYAAAAAAAAAAAAAgAYAAAAAAACABgAAAAAAAAQAAAAgICAg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACNBgAAAAAAAI0GAAAAAAAAAAAAAAAAQkA"
				],
				[
					540,
					1,
					"left_delete",
					null,
					"AQAAAIkGAAAAAAAAiQYAAAAAAAABAAAAfQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACKBgAAAAAAAIoGAAAAAAAAAAAAAAAA8L8"
				],
				[
					542,
					1,
					"insert",
					{
						"characters": "\n}"
					},
					"BQAAAIQGAAAAAAAAhQYAAAAAAAAAAAAAhQYAAAAAAACHBgAAAAAAAAAAAACHBgAAAAAAAIgGAAAAAAAAAAAAAIUGAAAAAAAAhQYAAAAAAAACAAAAICCFBgAAAAAAAIUGAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACEBgAAAAAAAIQGAAAAAAAAAAAAAAAAQkA"
				],
				[
					548,
					1,
					"insert",
					{
						"characters": "console.error"
					},
					"DQAAAIAGAAAAAAAAgQYAAAAAAAAAAAAAgQYAAAAAAACCBgAAAAAAAAAAAACCBgAAAAAAAIMGAAAAAAAAAAAAAIMGAAAAAAAAhAYAAAAAAAAAAAAAhAYAAAAAAACFBgAAAAAAAAAAAACFBgAAAAAAAIYGAAAAAAAAAAAAAIYGAAAAAAAAhwYAAAAAAAAAAAAAhwYAAAAAAACIBgAAAAAAAAAAAACIBgAAAAAAAIkGAAAAAAAAAAAAAIkGAAAAAAAAigYAAAAAAAAAAAAAigYAAAAAAACLBgAAAAAAAAAAAACLBgAAAAAAAIwGAAAAAAAAAAAAAIwGAAAAAAAAjQYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACABgAAAAAAAIAGAAAAAAAAAAAAAAAAIkA"
				],
				[
					549,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAI0GAAAAAAAAjwYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACNBgAAAAAAAI0GAAAAAAAAAAAAAAAA8L8"
				],
				[
					550,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAI4GAAAAAAAAkAYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACOBgAAAAAAAI4GAAAAAAAAAAAAAAAA8L8"
				],
				[
					551,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAI8GAAAAAAAAkAYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACPBgAAAAAAAI8GAAAAAAAAAAAAAAAA8L8"
				],
				[
					552,
					1,
					"left_delete",
					null,
					"AQAAAI8GAAAAAAAAjwYAAAAAAAABAAAAMA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACQBgAAAAAAAJAGAAAAAAAAAAAAAAAA8L8"
				],
				[
					553,
					1,
					"insert",
					{
						"characters": "Log()"
					},
					"BQAAAI8GAAAAAAAAkAYAAAAAAAAAAAAAkAYAAAAAAACRBgAAAAAAAAAAAACRBgAAAAAAAJIGAAAAAAAAAAAAAJIGAAAAAAAAkwYAAAAAAAAAAAAAkwYAAAAAAACUBgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACPBgAAAAAAAI8GAAAAAAAAAAAAAAAA8L8"
				],
				[
					556,
					1,
					"insert",
					{
						"characters": " error:"
					},
					"BwAAAJQGAAAAAAAAlQYAAAAAAAAAAAAAlQYAAAAAAACWBgAAAAAAAAAAAACWBgAAAAAAAJcGAAAAAAAAAAAAAJcGAAAAAAAAmAYAAAAAAAAAAAAAmAYAAAAAAACZBgAAAAAAAAAAAACZBgAAAAAAAJoGAAAAAAAAAAAAAJoGAAAAAAAAmwYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACUBgAAAAAAAJQGAAAAAAAAAAAAAAAA8L8"
				],
				[
					558,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAJwGAAAAAAAAnQYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACcBgAAAAAAAJwGAAAAAAAAAAAAAAAA8L8"
				],
				[
					559,
					1,
					"insert",
					{
						"characters": " error"
					},
					"BgAAAJ0GAAAAAAAAngYAAAAAAAAAAAAAngYAAAAAAACfBgAAAAAAAAAAAACfBgAAAAAAAKAGAAAAAAAAAAAAAKAGAAAAAAAAoQYAAAAAAAAAAAAAoQYAAAAAAACiBgAAAAAAAAAAAACiBgAAAAAAAKMGAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACdBgAAAAAAAJ0GAAAAAAAAAAAAAAAA8L8"
				],
				[
					601,
					1,
					"cut",
					null,
					"AQAAAActAAAAAAAABy0AAAAAAABaAAAAICB3cy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgKHsgZGF0YSB9KSA9PiBjb25zb2xlLmxvZygnbWVzc2FnZScsIEpTT04ucGFyc2UoZGF0YSkpKTsK",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAHLQAAAAAAAGEtAAAAAAAAAAAAAAAA8L8"
				],
				[
					602,
					1,
					"paste",
					null,
					"AQAAAActAAAAAAAAYS0AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAHLQAAAAAAAActAAAAAAAAAAAAAAAA8L8"
				],
				[
					615,
					1,
					"cut",
					null,
					"AQAAAActAAAAAAAABy0AAAAAAABaAAAAICB3cy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgKHsgZGF0YSB9KSA9PiBjb25zb2xlLmxvZygnbWVzc2FnZScsIEpTT04ucGFyc2UoZGF0YSkpKTsK",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAHLQAAAAAAAGEtAAAAAAAAAAAAAAAA8L8"
				],
				[
					620,
					1,
					"paste",
					null,
					"AQAAABQsAAAAAAAAbiwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAULAAAAAAAABQsAAAAAAAAAAAAAAAA8L8"
				],
				[
					665,
					1,
					"left_delete",
					null,
					"AQAAABQsAAAAAAAAFCwAAAAAAABaAAAAICB3cy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgKHsgZGF0YSB9KSA9PiBjb25zb2xlLmxvZygnbWVzc2FnZScsIEpTT04ucGFyc2UoZGF0YSkpKTsK",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAULAAAAAAAAG4sAAAAAAAAAAAAAAAA8L8"
				],
				[
					708,
					1,
					"insert",
					{
						"characters": "await"
					},
					"BQAAAKMxAAAAAAAApDEAAAAAAAAAAAAApDEAAAAAAAClMQAAAAAAAAAAAAClMQAAAAAAAKYxAAAAAAAAAAAAAKYxAAAAAAAApzEAAAAAAAAAAAAApzEAAAAAAACoMQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACjMQAAAAAAAKMxAAAAAAAAAAAAAAAA8L8"
				],
				[
					762,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAFEsAAAAAAAAUiwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABRLAAAAAAAAFEsAAAAAAAAAAAAAAAA8L8"
				],
				[
					763,
					1,
					"insert",
					{
						"characters": "\nopn"
					},
					"BQAAAFIsAAAAAAAAUywAAAAAAAAAAAAAUywAAAAAAABXLAAAAAAAAAAAAABXLAAAAAAAAFgsAAAAAAAAAAAAAFgsAAAAAAAAWSwAAAAAAAAAAAAAWSwAAAAAAABaLAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABSLAAAAAAAAFIsAAAAAAAAAAAAAAAA8L8"
				],
				[
					764,
					2,
					"left_delete",
					null,
					"AgAAAFksAAAAAAAAWSwAAAAAAAABAAAAblgsAAAAAAAAWCwAAAAAAAABAAAAcA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABaLAAAAAAAAFosAAAAAAAAAAAAAAAA8L8"
				],
				[
					765,
					1,
					"insert",
					{
						"characters": "nMessage"
					},
					"CAAAAFgsAAAAAAAAWSwAAAAAAAAAAAAAWSwAAAAAAABaLAAAAAAAAAAAAABaLAAAAAAAAFssAAAAAAAAAAAAAFssAAAAAAAAXCwAAAAAAAAAAAAAXCwAAAAAAABdLAAAAAAAAAAAAABdLAAAAAAAAF4sAAAAAAAAAAAAAF4sAAAAAAAAXywAAAAAAAAAAAAAXywAAAAAAABgLAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABYLAAAAAAAAFgsAAAAAAAAAAAAAAAA8L8"
				],
				[
					766,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAGAsAAAAAAAAYiwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABgLAAAAAAAAGAsAAAAAAAAAAAAAAAA8L8"
				],
				[
					768,
					1,
					"left_delete",
					null,
					"AQAAAGEsAAAAAAAAYSwAAAAAAAABAAAAKQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABiLAAAAAAAAGIsAAAAAAAAAAAAAAAA8L8"
				],
				[
					769,
					1,
					"insert",
					{
						"characters": "e)"
					},
					"AgAAAGEsAAAAAAAAYiwAAAAAAAAAAAAAYiwAAAAAAABjLAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABhLAAAAAAAAGEsAAAAAAAAAAAAAAAA8L8"
				],
				[
					770,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGMsAAAAAAAAZCwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABjLAAAAAAAAGMsAAAAAAAAAAAAAAAA8L8"
				],
				[
					771,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAGQsAAAAAAAAZiwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABkLAAAAAAAAGQsAAAAAAAAAAAAAAAA8L8"
				],
				[
					772,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAGUsAAAAAAAAZiwAAAAAAAAAAAAAZiwAAAAAAABqLAAAAAAAAAAAAABqLAAAAAAAAGssAAAAAAAAAAAAAGssAAAAAAAAbywAAAAAAAAAAAAAZiwAAAAAAABmLAAAAAAAAAQAAAAgICAgZiwAAAAAAABsLAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABlLAAAAAAAAGUsAAAAAAAAAAAAAAAA8L8"
				],
				[
					784,
					1,
					"paste",
					null,
					"AQAAAGwsAAAAAAAAoywAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABsLAAAAAAAAGwsAAAAAAAAAAAAAAAA8L8"
				],
				[
					791,
					1,
					"left_delete",
					null,
					"AQAAAHssAAAAAAAAeywAAAAAAAAgAAAAUmVjb25uZWN0aW5nV2ViU29ja2V0IGNvbm5lY3RlZCE",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB7LAAAAAAAAJssAAAAAAAAAAAAAAAA8L8"
				],
				[
					792,
					1,
					"insert",
					{
						"characters": "onMesasg"
					},
					"CAAAAHssAAAAAAAAfCwAAAAAAAAAAAAAfCwAAAAAAAB9LAAAAAAAAAAAAAB9LAAAAAAAAH4sAAAAAAAAAAAAAH4sAAAAAAAAfywAAAAAAAAAAAAAfywAAAAAAACALAAAAAAAAAAAAACALAAAAAAAAIEsAAAAAAAAAAAAAIEsAAAAAAAAgiwAAAAAAAAAAAAAgiwAAAAAAACDLAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB7LAAAAAAAAHssAAAAAAAAAAAAAAAA8L8"
				],
				[
					793,
					3,
					"left_delete",
					null,
					"AwAAAIIsAAAAAAAAgiwAAAAAAAABAAAAZ4EsAAAAAAAAgSwAAAAAAAABAAAAc4AsAAAAAAAAgCwAAAAAAAABAAAAYQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACDLAAAAAAAAIMsAAAAAAAAAAAAAAAA8L8"
				],
				[
					794,
					1,
					"insert",
					{
						"characters": "sage"
					},
					"BAAAAIAsAAAAAAAAgSwAAAAAAAAAAAAAgSwAAAAAAACCLAAAAAAAAAAAAACCLAAAAAAAAIMsAAAAAAAAAAAAAIMsAAAAAAAAhCwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACALAAAAAAAAIAsAAAAAAAAAAAAAAAA8L8"
				],
				[
					796,
					2,
					"right_delete",
					null,
					"AgAAAIcsAAAAAAAAhywAAAAAAAABAAAAd4csAAAAAAAAhywAAAAAAAABAAAAcw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACHLAAAAAAAAIcsAAAAAAAAAAAAAAAA8L8"
				],
				[
					797,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAIcsAAAAAAAAiCwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACHLAAAAAAAAIcsAAAAAAAAAAAAAAAA8L8"
				],
				[
					800,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACILAAAAAAAAIgsAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "test-alea.js",
			"settings":
			{
				"buffer_size": 443,
				"line_ending": "Unix"
			}
		},
		{
			"file": "quickjs/qjs-modules/quickjs-sockets.c",
			"settings":
			{
				"buffer_size": 71395,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					511,
					1,
					"paste",
					null,
					"AQAAAPd3AAAAAAAAS3gAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPd3AAAAAAAA93cAAAAAAAAAAAAAAADwvw"
				],
				[
					518,
					1,
					"cut",
					null,
					"AQAAAPd3AAAAAAAA93cAAAAAAABUAAAAICBKU19DYWxsKGN0eCwgSlNfSXNFeGNlcHRpb24odmFsdWUpID8gZGF0YVsyXSA6IGRhdGFbMV0sIEpTX1VOREVGSU5FRCwgMSwgJnZhbHVlKTsK",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPd3AAAAAAAAS3gAAAAAAAAAAAAAAADwvw"
				],
				[
					519,
					1,
					"paste",
					null,
					"AQAAAPd3AAAAAAAAS3gAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPd3AAAAAAAA93cAAAAAAAAAAAAAAADwvw"
				],
				[
					530,
					1,
					"cut",
					null,
					"AQAAAPd3AAAAAAAA93cAAAAAAABUAAAAICBKU19DYWxsKGN0eCwgSlNfSXNFeGNlcHRpb24odmFsdWUpID8gZGF0YVsyXSA6IGRhdGFbMV0sIEpTX1VOREVGSU5FRCwgMSwgJnZhbHVlKTsK",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPd3AAAAAAAAS3gAAAAAAAAAAAAAAADwvw"
				],
				[
					531,
					1,
					"paste",
					null,
					"AQAAAPd3AAAAAAAAS3gAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPd3AAAAAAAA93cAAAAAAAAAAAAAAADwvw"
				],
				[
					557,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAPZ3AAAAAAAA93cAAAAAAAAAAAAA93cAAAAAAAD4dwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPZ3AAAAAAAA9ncAAAAAAAAAAAAAAADwvw"
				],
				[
					559,
					1,
					"insert",
					{
						"characters": "iu"
					},
					"AgAAAPd3AAAAAAAA+HcAAAAAAAAAAAAA+HcAAAAAAAD5dwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPd3AAAAAAAA93cAAAAAAAAAAAAAAAAAAA"
				],
				[
					560,
					1,
					"left_delete",
					null,
					"AQAAAPh3AAAAAAAA+HcAAAAAAAABAAAAdQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPl3AAAAAAAA+XcAAAAAAAAAAAAAAADwvw"
				],
				[
					561,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AQAAAPh3AAAAAAAA+XcAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPh3AAAAAAAA+HcAAAAAAAAAAAAAAADwvw"
				],
				[
					562,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAPl3AAAAAAAA+3cAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPl3AAAAAAAA+XcAAAAAAAAAAAAAAADwvw"
				],
				[
					563,
					1,
					"insert",
					{
						"characters": "JS_Is"
					},
					"BQAAAPp3AAAAAAAA+3cAAAAAAAAAAAAA+3cAAAAAAAD8dwAAAAAAAAAAAAD8dwAAAAAAAP13AAAAAAAAAAAAAP13AAAAAAAA/ncAAAAAAAAAAAAA/ncAAAAAAAD/dwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPp3AAAAAAAA+ncAAAAAAAAAAAAAAADwvw"
				],
				[
					564,
					1,
					"insert_completion",
					{
						"completion": "JS_IsException",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "JS_IsException"
					},
					"AgAAAPp3AAAAAAAA+ncAAAAAAAAFAAAASlNfSXP6dwAAAAAAAAh4AAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP93AAAAAAAA/3cAAAAAAAAAAAAAAADwvw"
				],
				[
					565,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAAh4AAAAAAAACngAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAh4AAAAAAAACHgAAAAAAAAAAAAAAADwvw"
				],
				[
					566,
					1,
					"insert",
					{
						"characters": "vlae"
					},
					"BAAAAAl4AAAAAAAACngAAAAAAAAAAAAACngAAAAAAAALeAAAAAAAAAAAAAALeAAAAAAAAAx4AAAAAAAAAAAAAAx4AAAAAAAADXgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAl4AAAAAAAACXgAAAAAAAAAAAAAAADwvw"
				],
				[
					567,
					3,
					"left_delete",
					null,
					"AwAAAAx4AAAAAAAADHgAAAAAAAABAAAAZQt4AAAAAAAAC3gAAAAAAAABAAAAYQp4AAAAAAAACngAAAAAAAABAAAAbA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA14AAAAAAAADXgAAAAAAAAAAAAAAADwvw"
				],
				[
					568,
					1,
					"insert",
					{
						"characters": "alue"
					},
					"BAAAAAp4AAAAAAAAC3gAAAAAAAAAAAAAC3gAAAAAAAAMeAAAAAAAAAAAAAAMeAAAAAAAAA14AAAAAAAAAAAAAA14AAAAAAAADngAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAp4AAAAAAAACngAAAAAAAAAAAAAAADwvw"
				],
				[
					570,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABB4AAAAAAAAEXgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABB4AAAAAAAAEHgAAAAAAAAAAAAAAADwvw"
				],
				[
					571,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAABF4AAAAAAAAE3gAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABF4AAAAAAAAEXgAAAAAAAAAAAAAAADwvw"
				],
				[
					572,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAABJ4AAAAAAAAE3gAAAAAAAAAAAAAE3gAAAAAAAAUeAAAAAAAAAAAAAATeAAAAAAAABV4AAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABJ4AAAAAAAAEngAAAAAAAAAAAAAAADwvw"
				],
				[
					573,
					1,
					"insert",
					{
						"characters": "JS_GetEx"
					},
					"CAAAABV4AAAAAAAAFngAAAAAAAAAAAAAFngAAAAAAAAXeAAAAAAAAAAAAAAXeAAAAAAAABh4AAAAAAAAAAAAABh4AAAAAAAAGXgAAAAAAAAAAAAAGXgAAAAAAAAaeAAAAAAAAAAAAAAaeAAAAAAAABt4AAAAAAAAAAAAABt4AAAAAAAAHHgAAAAAAAAAAAAAHHgAAAAAAAAdeAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABV4AAAAAAAAFXgAAAAAAAAAAAAAAADwvw"
				],
				[
					578,
					1,
					"paste",
					null,
					"AgAAABV4AAAAAAAAJHgAAAAAAAAAAAAAJHgAAAAAAAAkeAAAAAAAAAgAAABKU19HZXRFeA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABV4AAAAAAAAHXgAAAAAAAAAAAAAAADwvw"
				],
				[
					579,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAACR4AAAAAAAAJngAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACR4AAAAAAAAJHgAAAAAAAAAAAAAAADwvw"
				],
				[
					581,
					1,
					"left_delete",
					null,
					"AQAAACV4AAAAAAAAJXgAAAAAAAABAAAAKQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACZ4AAAAAAAAJngAAAAAAAAAAAAAAADwvw"
				],
				[
					582,
					1,
					"insert",
					{
						"characters": "ctx);"
					},
					"BQAAACV4AAAAAAAAJngAAAAAAAAAAAAAJngAAAAAAAAneAAAAAAAAAAAAAAneAAAAAAAACh4AAAAAAAAAAAAACh4AAAAAAAAKXgAAAAAAAAAAAAAKXgAAAAAAAAqeAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACV4AAAAAAAAJXgAAAAAAAAAAAAAAADwvw"
				],
				[
					584,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABV4AAAAAAAAFngAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABV4AAAAAAAAFXgAAAAAAAAAAAAAAAAyQA"
				],
				[
					588,
					1,
					"insert",
					{
						"characters": "value="
					},
					"BgAAABV4AAAAAAAAFngAAAAAAAAAAAAAFngAAAAAAAAXeAAAAAAAAAAAAAAXeAAAAAAAABh4AAAAAAAAAAAAABh4AAAAAAAAGXgAAAAAAAAAAAAAGXgAAAAAAAAaeAAAAAAAAAAAAAAaeAAAAAAAABt4AAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABV4AAAAAAAAFXgAAAAAAAAAAAAAAADwvw"
				],
				[
					616,
					1,
					"insert",
					{
						"characters": "={0,-1}"
					},
					"BwAAADSLAAAAAAAANYsAAAAAAAAAAAAANYsAAAAAAAA2iwAAAAAAAAAAAAA2iwAAAAAAADeLAAAAAAAAAAAAADeLAAAAAAAAOIsAAAAAAAAAAAAAOIsAAAAAAAA5iwAAAAAAAAAAAAA5iwAAAAAAADqLAAAAAAAAAAAAADqLAAAAAAAAO4sAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADSLAAAAAAAANIsAAAAAAAAAAAAAAADwvw"
				],
				[
					676,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAF2zAAAAAAAAXrMAAAAAAAAAAAAAXrMAAAAAAABfswAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF2zAAAAAAAAXbMAAAAAAAAAAAAAAABCQA"
				],
				[
					679,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAJKzAAAAAAAAk7MAAAAAAAAAAAAAk7MAAAAAAACUswAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJKzAAAAAAAAkrMAAAAAAAAAAAAAAADwvw"
				],
				[
					684,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAF2rAAAAAAAAXqsAAAAAAAAAAAAAXqsAAAAAAABfqwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF2rAAAAAAAAXasAAAAAAAAAAAAAAADwvw"
				],
				[
					688,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAJKrAAAAAAAAk6sAAAAAAAAAAAAAk6sAAAAAAACUqwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJKrAAAAAAAAkqsAAAAAAAAAAAAAAADwvw"
				],
				[
					913,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAAAAAAAAAAAAAgAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					914,
					1,
					"left_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAAACAAAAICA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAIAAAAAAAAAAgAAAAAAAAAAAAAAAADwvw"
				],
				[
					964,
					1,
					"insert",
					{
						"characters": "\n\nuif"
					},
					"CAAAAImKAAAAAAAAiooAAAAAAAAAAAAAiooAAAAAAACQigAAAAAAAAAAAACQigAAAAAAAJGKAAAAAAAAAAAAAJGKAAAAAAAAl4oAAAAAAAAAAAAAiooAAAAAAACKigAAAAAAAAYAAAAgICAgICCRigAAAAAAAJKKAAAAAAAAAAAAAJKKAAAAAAAAk4oAAAAAAAAAAAAAk4oAAAAAAACUigAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAImKAAAAAAAAiYoAAAAAAAAAAAAAAADwvw"
				],
				[
					965,
					3,
					"left_delete",
					null,
					"AwAAAJOKAAAAAAAAk4oAAAAAAAABAAAAZpKKAAAAAAAAkooAAAAAAAABAAAAaZGKAAAAAAAAkYoAAAAAAAABAAAAdQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJSKAAAAAAAAlIoAAAAAAAAAAAAAAADwvw"
				],
				[
					966,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AgAAAJGKAAAAAAAAkooAAAAAAAAAAAAAkooAAAAAAACTigAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJGKAAAAAAAAkYoAAAAAAAAAAAAAAADwvw"
				],
				[
					967,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJOKAAAAAAAAlYoAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJOKAAAAAAAAk4oAAAAAAAAAAAAAAADwvw"
				],
				[
					968,
					1,
					"insert",
					{
						"characters": "JS_IsNumberr"
					},
					"DAAAAJSKAAAAAAAAlYoAAAAAAAAAAAAAlYoAAAAAAACWigAAAAAAAAAAAACWigAAAAAAAJeKAAAAAAAAAAAAAJeKAAAAAAAAmIoAAAAAAAAAAAAAmIoAAAAAAACZigAAAAAAAAAAAACZigAAAAAAAJqKAAAAAAAAAAAAAJqKAAAAAAAAm4oAAAAAAAAAAAAAm4oAAAAAAACcigAAAAAAAAAAAACcigAAAAAAAJ2KAAAAAAAAAAAAAJ2KAAAAAAAAnooAAAAAAAAAAAAAnooAAAAAAACfigAAAAAAAAAAAACfigAAAAAAAKCKAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJSKAAAAAAAAlIoAAAAAAAAAAAAAAADwvw"
				],
				[
					969,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAKCKAAAAAAAAoooAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKCKAAAAAAAAoIoAAAAAAAAAAAAAAADwvw"
				],
				[
					970,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAKCKAAAAAAAAoIoAAAAAAAABAAAAKKCKAAAAAAAAoIoAAAAAAAABAAAAKQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKGKAAAAAAAAoYoAAAAAAAAAAAAAAADwvw"
				],
				[
					971,
					1,
					"left_delete",
					null,
					"AQAAAJ+KAAAAAAAAn4oAAAAAAAABAAAAcg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKCKAAAAAAAAoIoAAAAAAAAAAAAAAADwvw"
				],
				[
					972,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJ+KAAAAAAAAoYoAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ+KAAAAAAAAn4oAAAAAAAAAAAAAAADwvw"
				],
				[
					973,
					1,
					"insert",
					{
						"characters": "ret"
					},
					"AwAAAKCKAAAAAAAAoYoAAAAAAAAAAAAAoYoAAAAAAACiigAAAAAAAAAAAACiigAAAAAAAKOKAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKCKAAAAAAAAoIoAAAAAAAAAAAAAAADwvw"
				],
				[
					975,
					1,
					"left_delete",
					null,
					"AQAAAKSKAAAAAAAApIoAAAAAAAABAAAAKQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKWKAAAAAAAApYoAAAAAAAAAAAAAAADwvw"
				],
				[
					976,
					1,
					"insert",
					{
						"characters": " &&"
					},
					"AwAAAKSKAAAAAAAApYoAAAAAAAAAAAAApYoAAAAAAACmigAAAAAAAAAAAACmigAAAAAAAKeKAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKSKAAAAAAAApIoAAAAAAAAAAAAAAADwvw"
				],
				[
					977,
					1,
					"insert",
					{
						"characters": " JS_ToInt32"
					},
					"CwAAAKeKAAAAAAAAqIoAAAAAAAAAAAAAqIoAAAAAAACpigAAAAAAAAAAAACpigAAAAAAAKqKAAAAAAAAAAAAAKqKAAAAAAAAq4oAAAAAAAAAAAAAq4oAAAAAAACsigAAAAAAAAAAAACsigAAAAAAAK2KAAAAAAAAAAAAAK2KAAAAAAAArooAAAAAAAAAAAAArooAAAAAAACvigAAAAAAAAAAAACvigAAAAAAALCKAAAAAAAAAAAAALCKAAAAAAAAsYoAAAAAAAAAAAAAsYoAAAAAAACyigAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKeKAAAAAAAAp4oAAAAAAAAAAAAAAADwvw"
				],
				[
					978,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAALKKAAAAAAAAtIoAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALKKAAAAAAAAsooAAAAAAAAAAAAAAADwvw"
				],
				[
					979,
					1,
					"insert",
					{
						"characters": "ctx,"
					},
					"BAAAALOKAAAAAAAAtIoAAAAAAAAAAAAAtIoAAAAAAAC1igAAAAAAAAAAAAC1igAAAAAAALaKAAAAAAAAAAAAALaKAAAAAAAAt4oAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALOKAAAAAAAAs4oAAAAAAAAAAAAAAADwvw"
				],
				[
					980,
					1,
					"insert",
					{
						"characters": " ret"
					},
					"BAAAALeKAAAAAAAAuIoAAAAAAAAAAAAAuIoAAAAAAAC5igAAAAAAAAAAAAC5igAAAAAAALqKAAAAAAAAAAAAALqKAAAAAAAAu4oAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALeKAAAAAAAAt4oAAAAAAAAAAAAAAADwvw"
				],
				[
					982,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAALyKAAAAAAAAvYoAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALyKAAAAAAAAvIoAAAAAAAAAAAAAAADwvw"
				],
				[
					983,
					5,
					"left_delete",
					null,
					"BQAAALyKAAAAAAAAvIoAAAAAAAABAAAAKbuKAAAAAAAAu4oAAAAAAAABAAAAKbqKAAAAAAAAuooAAAAAAAABAAAAdLmKAAAAAAAAuYoAAAAAAAABAAAAZbiKAAAAAAAAuIoAAAAAAAABAAAAcg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL2KAAAAAAAAvYoAAAAAAAAAAAAAAADwvw"
				],
				[
					985,
					1,
					"insert",
					{
						"characters": "\nn"
					},
					"AgAAAIqKAAAAAAAAi4oAAAAAAAAAAAAAi4oAAAAAAACMigAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIqKAAAAAAAAiooAAAAAAAAAAAAAAFB5QA"
				],
				[
					986,
					1,
					"left_delete",
					null,
					"AQAAAIuKAAAAAAAAi4oAAAAAAAABAAAAbg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIyKAAAAAAAAjIoAAAAAAAAAAAAAAADwvw"
				],
				[
					987,
					1,
					"insert",
					{
						"characters": "int32_t"
					},
					"BwAAAIuKAAAAAAAAjIoAAAAAAAAAAAAAjIoAAAAAAACNigAAAAAAAAAAAACNigAAAAAAAI6KAAAAAAAAAAAAAI6KAAAAAAAAj4oAAAAAAAAAAAAAj4oAAAAAAACQigAAAAAAAAAAAACQigAAAAAAAJGKAAAAAAAAAAAAAJGKAAAAAAAAkooAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIuKAAAAAAAAi4oAAAAAAAAAAAAAAADwvw"
				],
				[
					988,
					1,
					"insert",
					{
						"characters": " res"
					},
					"BAAAAJKKAAAAAAAAk4oAAAAAAAAAAAAAk4oAAAAAAACUigAAAAAAAAAAAACUigAAAAAAAJWKAAAAAAAAAAAAAJWKAAAAAAAAlooAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJKKAAAAAAAAkooAAAAAAAAAAAAAAADwvw"
				],
				[
					989,
					1,
					"left_delete",
					null,
					"AQAAAJWKAAAAAAAAlYoAAAAAAAABAAAAcw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJaKAAAAAAAAlooAAAAAAAAAAAAAAADwvw"
				],
				[
					990,
					1,
					"insert",
					{
						"characters": "sult;"
					},
					"BQAAAJWKAAAAAAAAlooAAAAAAAAAAAAAlooAAAAAAACXigAAAAAAAAAAAACXigAAAAAAAJiKAAAAAAAAAAAAAJiKAAAAAAAAmYoAAAAAAAAAAAAAmYoAAAAAAACaigAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJWKAAAAAAAAlYoAAAAAAAAAAAAAAADwvw"
				],
				[
					991,
					1,
					"left_delete",
					null,
					"AQAAAJmKAAAAAAAAmYoAAAAAAAABAAAAOw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJqKAAAAAAAAmooAAAAAAAAAAAAAAADwvw"
				],
				[
					992,
					1,
					"insert",
					{
						"characters": "=-1;"
					},
					"BAAAAJmKAAAAAAAAmooAAAAAAAAAAAAAmooAAAAAAACbigAAAAAAAAAAAACbigAAAAAAAJyKAAAAAAAAAAAAAJyKAAAAAAAAnYoAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJmKAAAAAAAAmYoAAAAAAAAAAAAAAADwvw"
				],
				[
					993,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAJ2KAAAAAAAAnooAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ2KAAAAAAAAnYoAAAAAAAAAAAAAAADwvw"
				],
				[
					997,
					1,
					"insert",
					{
						"characters": "&result,"
					},
					"CAAAAMuKAAAAAAAAzIoAAAAAAAAAAAAAzIoAAAAAAADNigAAAAAAAAAAAADNigAAAAAAAM6KAAAAAAAAAAAAAM6KAAAAAAAAz4oAAAAAAAAAAAAAz4oAAAAAAADQigAAAAAAAAAAAADQigAAAAAAANGKAAAAAAAAAAAAANGKAAAAAAAA0ooAAAAAAAAAAAAA0ooAAAAAAADTigAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMuKAAAAAAAAy4oAAAAAAAAAAAAAAADwvw"
				],
				[
					998,
					1,
					"insert",
					{
						"characters": " are"
					},
					"BAAAANOKAAAAAAAA1IoAAAAAAAAAAAAA1IoAAAAAAADVigAAAAAAAAAAAADVigAAAAAAANaKAAAAAAAAAAAAANaKAAAAAAAA14oAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANOKAAAAAAAA04oAAAAAAAAAAAAAAADwvw"
				],
				[
					999,
					3,
					"left_delete",
					null,
					"AwAAANaKAAAAAAAA1ooAAAAAAAABAAAAZdWKAAAAAAAA1YoAAAAAAAABAAAActSKAAAAAAAA1IoAAAAAAAABAAAAYQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANeKAAAAAAAA14oAAAAAAAAAAAAAAADwvw"
				],
				[
					1000,
					1,
					"insert",
					{
						"characters": "ret))"
					},
					"BQAAANSKAAAAAAAA1YoAAAAAAAAAAAAA1YoAAAAAAADWigAAAAAAAAAAAADWigAAAAAAANeKAAAAAAAAAAAAANeKAAAAAAAA2IoAAAAAAAAAAAAA2IoAAAAAAADZigAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANSKAAAAAAAA1IoAAAAAAAAAAAAAAADwvw"
				],
				[
					1001,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANmKAAAAAAAA2ooAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANmKAAAAAAAA2YoAAAAAAAAAAAAAAADwvw"
				],
				[
					1002,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAANqKAAAAAAAA3IoAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANqKAAAAAAAA2ooAAAAAAAAAAAAAAADwvw"
				],
				[
					1003,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAANuKAAAAAAAA3IoAAAAAAAAAAAAA3IoAAAAAAADiigAAAAAAAAAAAADiigAAAAAAAOOKAAAAAAAAAAAAAOOKAAAAAAAA6YoAAAAAAAAAAAAA3IoAAAAAAADcigAAAAAAAAYAAAAgICAgICDcigAAAAAAAOSKAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANuKAAAAAAAA24oAAAAAAAAAAAAAAADwvw"
				],
				[
					1008,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAOSKAAAAAAAA5YoAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOSKAAAAAAAA5IoAAAAAAAAAAAAAAADwvw"
				],
				[
					1009,
					1,
					"left_delete",
					null,
					"AQAAAOSKAAAAAAAA5IoAAAAAAAABAAAAaQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOWKAAAAAAAA5YoAAAAAAAAAAAAAAADwvw"
				],
				[
					1015,
					1,
					"cut",
					null,
					"AQAAALyKAAAAAAAAvIoAAAAAAAAcAAAASlNfVG9JbnQzMihjdHgsJnJlc3VsdCwgcmV0KQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALyKAAAAAAAA2IoAAAAAAAAAAAAAAADwvw"
				],
				[
					1016,
					4,
					"left_delete",
					null,
					"BQAAALuKAAAAAAAAu4oAAAAAAAABAAAAIL+KAAAAAAAAv4oAAAAAAAAIAAAAICAgICAgICC6igAAAAAAALqKAAAAAAAAAQAAACa5igAAAAAAALmKAAAAAAAAAQAAACa4igAAAAAAALiKAAAAAAAAAQAAACA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALyKAAAAAAAAvIoAAAAAAAAAAAAAAADwvw"
				],
				[
					1018,
					1,
					"paste",
					null,
					"AQAAALyKAAAAAAAA2IoAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALyKAAAAAAAAvIoAAAAAAAAAAAAAACBsQA"
				],
				[
					1022,
					1,
					"cut",
					null,
					"AQAAAIuKAAAAAAAAi4oAAAAAAAATAAAAaW50MzJfdCByZXN1bHQ9LTE7Cg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIuKAAAAAAAAnooAAAAAAAAAAAAAAAAAAA"
				],
				[
					1024,
					1,
					"paste",
					null,
					"AQAAAKmKAAAAAAAAvIoAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKmKAAAAAAAAqYoAAAAAAAAAAAAAAAAAAA"
				],
				[
					1029,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAANiKAAAAAAAA2YoAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANiKAAAAAAAA2IoAAAAAAAD////////vfw"
				],
				[
					1030,
					1,
					"insert",
					{
						"characters": "\n\nif"
					},
					"BAAAANmKAAAAAAAA2ooAAAAAAAAAAAAA2ooAAAAAAADbigAAAAAAAAAAAADbigAAAAAAANyKAAAAAAAAAAAAANyKAAAAAAAA3YoAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANmKAAAAAAAA2YoAAAAAAAAAAAAAAADwvw"
				],
				[
					1031,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAN2KAAAAAAAA34oAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN2KAAAAAAAA3YoAAAAAAAAAAAAAAADwvw"
				],
				[
					1032,
					1,
					"insert",
					{
						"characters": "result==0"
					},
					"CQAAAN6KAAAAAAAA34oAAAAAAAAAAAAA34oAAAAAAADgigAAAAAAAAAAAADgigAAAAAAAOGKAAAAAAAAAAAAAOGKAAAAAAAA4ooAAAAAAAAAAAAA4ooAAAAAAADjigAAAAAAAAAAAADjigAAAAAAAOSKAAAAAAAAAAAAAOSKAAAAAAAA5YoAAAAAAAAAAAAA5YoAAAAAAADmigAAAAAAAAAAAADmigAAAAAAAOeKAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN6KAAAAAAAA3ooAAAAAAAAAAAAAAADwvw"
				],
				[
					1034,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOiKAAAAAAAA6YoAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOiKAAAAAAAA6IoAAAAAAAAAAAAAAADwvw"
				],
				[
					1037,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAOmKAAAAAAAA6ooAAAAAAAAAAAAA6ooAAAAAAADsigAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOmKAAAAAAAA6YoAAAAAAAAAAAAAAADwvw"
				],
				[
					1038,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOyKAAAAAAAA7YoAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOyKAAAAAAAA7IoAAAAAAAAAAAAAAADwvw"
				],
				[
					1059,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAIuKAAAAAAAAjIoAAAAAAAAAAAAAjIoAAAAAAACMigAAAAAAAGsAAAAKICAgICAgaWYoSlNfSXNOdW1iZXIocmV0KSkgewppbnQzMl90IHJlc3VsdD0tMTsKSlNfVG9JbnQzMihjdHgsJnJlc3VsdCwgcmV0KTsKCmlmKHJlc3VsdD09MCkgCiAgIAogICAgICB9IA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIuKAAAAAAAA9ooAAAAAAAAAAAAAAADwvw"
				],
				[
					1076,
					1,
					"left_delete",
					null,
					"AQAAAIuKAAAAAAAAi4oAAAAAAAABAAAAIA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIyKAAAAAAAAjIoAAAAAAAAAAAAAAECNQA"
				],
				[
					1081,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AgAAAIuKAAAAAAAAjIoAAAAAAAAAAAAAjIoAAAAAAACNigAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIuKAAAAAAAAi4oAAAAAAAAAAAAAAADwvw"
				],
				[
					1082,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAI2KAAAAAAAAj4oAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI2KAAAAAAAAjYoAAAAAAAAAAAAAAADwvw"
				],
				[
					1083,
					1,
					"insert",
					{
						"characters": "JS_IsNumber"
					},
					"CwAAAI6KAAAAAAAAj4oAAAAAAAAAAAAAj4oAAAAAAACQigAAAAAAAAAAAACQigAAAAAAAJGKAAAAAAAAAAAAAJGKAAAAAAAAkooAAAAAAAAAAAAAkooAAAAAAACTigAAAAAAAAAAAACTigAAAAAAAJSKAAAAAAAAAAAAAJSKAAAAAAAAlYoAAAAAAAAAAAAAlYoAAAAAAACWigAAAAAAAAAAAACWigAAAAAAAJeKAAAAAAAAAAAAAJeKAAAAAAAAmIoAAAAAAAAAAAAAmIoAAAAAAACZigAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI6KAAAAAAAAjooAAAAAAAAAAAAAAADwvw"
				],
				[
					1084,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJmKAAAAAAAAm4oAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJmKAAAAAAAAmYoAAAAAAAAAAAAAAADwvw"
				],
				[
					1085,
					1,
					"insert",
					{
						"characters": "ret"
					},
					"AwAAAJqKAAAAAAAAm4oAAAAAAAAAAAAAm4oAAAAAAACcigAAAAAAAAAAAACcigAAAAAAAJ2KAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJqKAAAAAAAAmooAAAAAAAAAAAAAAADwvw"
				],
				[
					1087,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJ+KAAAAAAAAoIoAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ+KAAAAAAAAn4oAAAAAAAAAAAAAAADwvw"
				],
				[
					1088,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAKCKAAAAAAAAoooAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKCKAAAAAAAAoIoAAAAAAAAAAAAAAADwvw"
				],
				[
					1089,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAAKGKAAAAAAAAoooAAAAAAAAAAAAAoooAAAAAAACjigAAAAAAAAAAAACiigAAAAAAAKSKAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKGKAAAAAAAAoYoAAAAAAAAAAAAAAADwvw"
				],
				[
					1144,
					1,
					"left_delete",
					null,
					"AgAAAHqrAAAAAAAAeqsAAAAAAAABAAAAL6KKAAAAAAAAoooAAAAAAAACAAAAICA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHurAAAAAAAAe6sAAAAAAAAAAAAAAADwvw"
				],
				[
					1145,
					1,
					"right_delete",
					null,
					"AQAAAHirAAAAAAAAeKsAAAAAAAABAAAALw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHirAAAAAAAAeKsAAAAAAAAAAAAAAADwvw"
				],
				[
					1148,
					1,
					"left_delete",
					null,
					"AQAAAKurAAAAAAAAq6sAAAAAAAABAAAALw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKyrAAAAAAAArKsAAAAAAAAAAAAAAADwvw"
				],
				[
					1149,
					1,
					"right_delete",
					null,
					"AQAAAKurAAAAAAAAq6sAAAAAAAABAAAALw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKurAAAAAAAAq6sAAAAAAAAAAAAAAADwvw"
				],
				[
					1152,
					3,
					"right_delete",
					null,
					"AwAAAHezAAAAAAAAd7MAAAAAAAABAAAAIHezAAAAAAAAd7MAAAAAAAABAAAAL3ezAAAAAAAAd7MAAAAAAAABAAAALw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHezAAAAAAAAd7MAAAAAAAAAAAAAAADwvw"
				],
				[
					1155,
					2,
					"left_delete",
					null,
					"AgAAAKuzAAAAAAAAq7MAAAAAAAABAAAAL6qzAAAAAAAAqrMAAAAAAAABAAAALw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKyzAAAAAAAArLMAAAAAAAAAAAAAAADwvw"
				],
				[
					1171,
					1,
					"insert",
					{
						"characters": "s->sysno"
					},
					"CQAAAI6KAAAAAAAAj4oAAAAAAAAAAAAAj4oAAAAAAACPigAAAAAAABAAAABKU19Jc051bWJlcihyZXQpj4oAAAAAAACQigAAAAAAAAAAAACQigAAAAAAAJGKAAAAAAAAAAAAAJGKAAAAAAAAkooAAAAAAAAAAAAAkooAAAAAAACTigAAAAAAAAAAAACTigAAAAAAAJSKAAAAAAAAAAAAAJSKAAAAAAAAlYoAAAAAAAAAAAAAlYoAAAAAAACWigAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI6KAAAAAAAAnooAAAAAAAAAAAAAAADwvw"
				],
				[
					1172,
					5,
					"left_delete",
					null,
					"BQAAAJWKAAAAAAAAlYoAAAAAAAABAAAAb5SKAAAAAAAAlIoAAAAAAAABAAAAbpOKAAAAAAAAk4oAAAAAAAABAAAAc5KKAAAAAAAAkooAAAAAAAABAAAAeZGKAAAAAAAAkYoAAAAAAAABAAAAcw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJaKAAAAAAAAlooAAAAAAAAAAAAAAADwvw"
				],
				[
					1173,
					1,
					"insert",
					{
						"characters": "ret"
					},
					"AwAAAJGKAAAAAAAAkooAAAAAAAAAAAAAkooAAAAAAACTigAAAAAAAAAAAACTigAAAAAAAJSKAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJGKAAAAAAAAkYoAAAAAAAAAAAAAAADwvw"
				],
				[
					1174,
					1,
					"insert",
					{
						"characters": " =="
					},
					"AwAAAJSKAAAAAAAAlYoAAAAAAAAAAAAAlYoAAAAAAACWigAAAAAAAAAAAACWigAAAAAAAJeKAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJSKAAAAAAAAlIoAAAAAAAAAAAAAAADwvw"
				],
				[
					1175,
					1,
					"insert",
					{
						"characters": " 0"
					},
					"AgAAAJeKAAAAAAAAmIoAAAAAAAAAAAAAmIoAAAAAAACZigAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJeKAAAAAAAAl4oAAAAAAAAAAAAAAADwvw"
				],
				[
					1180,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAJ2KAAAAAAAAnooAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ2KAAAAAAAAnYoAAAAAAAD////////vfw"
				],
				[
					1181,
					1,
					"left_delete",
					null,
					"AQAAAJ2KAAAAAAAAnYoAAAAAAAABAAAACg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ6KAAAAAAAAnooAAAAAAAAAAAAAAADwvw"
				],
				[
					1186,
					1,
					"paste",
					null,
					"AQAAAI+KAAAAAAAAmYoAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI+KAAAAAAAAj4oAAAAAAAAAAAAAAADwvw"
				],
				[
					1189,
					1,
					"left_delete",
					null,
					"AQAAAI6KAAAAAAAAjooAAAAAAAABAAAAcw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI+KAAAAAAAAj4oAAAAAAAAAAAAAAADwvw"
				],
				[
					1192,
					1,
					"insert",
					{
						"characters": "(*s)"
					},
					"BAAAAJiKAAAAAAAAmYoAAAAAAAAAAAAAmYoAAAAAAACaigAAAAAAAAAAAACaigAAAAAAAJuKAAAAAAAAAAAAAJuKAAAAAAAAnIoAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJiKAAAAAAAAmIoAAAAAAAAAAAAAAADwvw"
				],
				[
					1195,
					1,
					"right_delete",
					null,
					"AQAAAJyKAAAAAAAAnIoAAAAAAAAKAAAALT5yZXQgPT0gMA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJyKAAAAAAAApooAAAAAAAAAAAAAAADwvw"
				],
				[
					1215,
					2,
					"left_delete",
					null,
					"AgAAAIqKAAAAAAAAiooAAAAAAAAYAAAACmlmKHNvY2tldF9lb2YoKnMpKSB7Cgp9iYoAAAAAAACJigAAAAAAAAEAAAAK",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIqKAAAAAAAAoooAAAAAAAAAAAAAAADwvw"
				],
				[
					1220,
					1,
					"revert",
					null,
					"",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAImKAAAAAAAAiYoAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "debugger.js",
			"settings":
			{
				"buffer_size": 9022,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					97,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADgTAAAAAAAAOhMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADgTAAAAAAAAOBMAAAAAAAAAAAAAAADwvw"
				],
				[
					98,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAADgTAAAAAAAAOBMAAAAAAAABAAAAKDgTAAAAAAAAOBMAAAAAAAABAAAAKQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADkTAAAAAAAAORMAAAAAAAAAAAAAAADwvw"
				],
				[
					99,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AQAAADgTAAAAAAAAORMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADgTAAAAAAAAOBMAAAAAAAAAAAAAAADwvw"
				],
				[
					100,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADkTAAAAAAAAOxMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADkTAAAAAAAAORMAAAAAAAAAAAAAAADwvw"
				],
				[
					101,
					1,
					"insert",
					{
						"characters": "proces"
					},
					"BgAAADoTAAAAAAAAOxMAAAAAAAAAAAAAOxMAAAAAAAA8EwAAAAAAAAAAAAA8EwAAAAAAAD0TAAAAAAAAAAAAAD0TAAAAAAAAPhMAAAAAAAAAAAAAPhMAAAAAAAA/EwAAAAAAAAAAAAA/EwAAAAAAAEATAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADoTAAAAAAAAOhMAAAAAAAAAAAAAAADwvw"
				],
				[
					102,
					6,
					"left_delete",
					null,
					"BgAAAD8TAAAAAAAAPxMAAAAAAAABAAAAcz4TAAAAAAAAPhMAAAAAAAABAAAAZT0TAAAAAAAAPRMAAAAAAAABAAAAYzwTAAAAAAAAPBMAAAAAAAABAAAAbzsTAAAAAAAAOxMAAAAAAAABAAAAcjoTAAAAAAAAOhMAAAAAAAABAAAAcA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEATAAAAAAAAQBMAAAAAAAAAAAAAAADwvw"
				],
				[
					103,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAADoTAAAAAAAAPBMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADoTAAAAAAAAOhMAAAAAAAAAAAAAAADwvw"
				],
				[
					104,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAADsTAAAAAAAAPBMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADsTAAAAAAAAOxMAAAAAAAAAAAAAAADwvw"
				],
				[
					105,
					1,
					"left_delete",
					null,
					"AQAAADsTAAAAAAAAOxMAAAAAAAABAAAAcg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADwTAAAAAAAAPBMAAAAAAAAAAAAAAADwvw"
				],
				[
					106,
					1,
					"insert",
					{
						"characters": "process()"
					},
					"CQAAADsTAAAAAAAAPBMAAAAAAAAAAAAAPBMAAAAAAAA9EwAAAAAAAAAAAAA9EwAAAAAAAD4TAAAAAAAAAAAAAD4TAAAAAAAAPxMAAAAAAAAAAAAAPxMAAAAAAABAEwAAAAAAAAAAAABAEwAAAAAAAEETAAAAAAAAAAAAAEETAAAAAAAAQhMAAAAAAAAAAAAAQhMAAAAAAABDEwAAAAAAAAAAAABDEwAAAAAAAEQTAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADsTAAAAAAAAOxMAAAAAAAAAAAAAAADwvw"
				],
				[
					107,
					1,
					"insert",
					{
						"characters": " exc"
					},
					"BAAAAEQTAAAAAAAARRMAAAAAAAAAAAAARRMAAAAAAABGEwAAAAAAAAAAAABGEwAAAAAAAEcTAAAAAAAAAAAAAEcTAAAAAAAASBMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEQTAAAAAAAARBMAAAAAAAAAAAAAAADwvw"
				],
				[
					108,
					1,
					"left_delete",
					null,
					"AQAAAEcTAAAAAAAARxMAAAAAAAABAAAAYw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEgTAAAAAAAASBMAAAAAAAAAAAAAAADwvw"
				],
				[
					109,
					1,
					"insert",
					{
						"characters": "ception:"
					},
					"CAAAAEcTAAAAAAAASBMAAAAAAAAAAAAASBMAAAAAAABJEwAAAAAAAAAAAABJEwAAAAAAAEoTAAAAAAAAAAAAAEoTAAAAAAAASxMAAAAAAAAAAAAASxMAAAAAAABMEwAAAAAAAAAAAABMEwAAAAAAAE0TAAAAAAAAAAAAAE0TAAAAAAAAThMAAAAAAAAAAAAAThMAAAAAAABPEwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEcTAAAAAAAARxMAAAAAAAAAAAAAAADwvw"
				],
				[
					111,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAFATAAAAAAAAURMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFATAAAAAAAAUBMAAAAAAAAAAAAAAADwvw"
				],
				[
					112,
					1,
					"insert",
					{
						"characters": " e"
					},
					"AgAAAFETAAAAAAAAUhMAAAAAAAAAAAAAUhMAAAAAAABTEwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFETAAAAAAAAURMAAAAAAAAAAAAAAADwvw"
				],
				[
					119,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAFYTAAAAAAAAVxMAAAAAAAAAAAAAVxMAAAAAAABdEwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFYTAAAAAAAAVhMAAAAAAAD////////vfw"
				],
				[
					150,
					1,
					"revert",
					null,
					"",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACMNAAAAAAAAIw0AAAAAAAAAAAAAAAAAAA"
				],
				[
					168,
					10,
					"right_delete",
					null,
					"CgAAAHUOAAAAAAAAdQ4AAAAAAAABAAAACnUOAAAAAAAAdQ4AAAAAAAABAAAAIHUOAAAAAAAAdQ4AAAAAAAABAAAAIHUOAAAAAAAAdQ4AAAAAAAABAAAAIHUOAAAAAAAAdQ4AAAAAAAABAAAAIHUOAAAAAAAAdQ4AAAAAAAABAAAAIHUOAAAAAAAAdQ4AAAAAAAABAAAAIHUOAAAAAAAAdQ4AAAAAAAABAAAAIHUOAAAAAAAAdQ4AAAAAAAABAAAAIHUOAAAAAAAAdQ4AAAAAAAABAAAALg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHUOAAAAAAAAdQ4AAAAAAAAAAAAAAADwvw"
				],
				[
					169,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAHUOAAAAAAAAdg4AAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHUOAAAAAAAAdQ4AAAAAAAAAAAAAAADwvw"
				],
				[
					210,
					1,
					"cut",
					null,
					"AQAAAJodAAAAAAAAmh0AAAAAAAAZAAAAcmVxdWVzdF9zZXEgPSArK3RoaXMuI3NlcQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJodAAAAAAAAsx0AAAAAAAAAAAAAAADwvw"
				],
				[
					213,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAIwdAAAAAAAAjR0AAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIwdAAAAAAAAjB0AAAAAAAAAAAAAAADwvw"
				],
				[
					214,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAI0dAAAAAAAAjh0AAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI0dAAAAAAAAjR0AAAAAAAAAAAAAAADwvw"
				],
				[
					215,
					1,
					"paste",
					null,
					"AQAAAI4dAAAAAAAApx0AAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI4dAAAAAAAAjh0AAAAAAAAAAAAAAADwvw"
				],
				[
					222,
					1,
					"right_delete",
					null,
					"AQAAAKsdAAAAAAAAqx0AAAAAAAAMAAAAICAgIGNvbnN0IDsK",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKsdAAAAAAAAtx0AAAAAAAAAAAAAAAAAAA"
				],
				[
					223,
					1,
					"left_delete",
					null,
					"AQAAAKodAAAAAAAAqh0AAAAAAAABAAAACg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKsdAAAAAAAAqx0AAAAAAAAAAAAAAADwvw"
				],
				[
					228,
					1,
					"revert",
					null,
					"",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKodAAAAAAAAqh0AAAAAAAAAAAAAAADwvw"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAPoPAAAAAAAA+w8AAAAAAAAAAAAA+w8AAAAAAAAJEAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD6DwAAAAAAAPoPAAAAAAAAAAAAAAAA8L8"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAMISAAAAAAAAwxIAAAAAAAAAAAAAwxIAAAAAAADPEgAAAAAAAAAAAAD7DwAAAAAAAPsPAAAAAAAADgAAACAgICAgICAgICAgICAg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADCEgAAAAAAAMISAAAAAAAAAAAAAAAA8L8"
				],
				[
					85,
					1,
					"",
					null,
					"AQAAAFMNAAAAAAAAXA0AAAAAAAAKAAAAI3Jlc3BvbnNlcw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABTDQAAAAAAAF0NAAAAAAAAAAAAAAAA8L8"
				],
				[
					86,
					1,
					"",
					null,
					"AQAAAHYPAAAAAAAAfw8AAAAAAAAKAAAAI3Jlc3BvbnNlcw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB2DwAAAAAAAIAPAAAAAAAAAAAAAAAA8L8"
				],
				[
					87,
					1,
					"",
					null,
					"AQAAAFweAAAAAAAAZR4AAAAAAAAKAAAAI3Jlc3BvbnNlcw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABcHgAAAAAAAGYeAAAAAAAAAAAAAAAA8L8"
				],
				[
					88,
					1,
					"",
					null,
					"AQAAAJkeAAAAAAAAoh4AAAAAAAAKAAAAI3Jlc3BvbnNlcw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACZHgAAAAAAAKMeAAAAAAAAAAAAAAAA8L8"
				],
				[
					95,
					1,
					"revert",
					null,
					"",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAIAAAAyHgAAAAAAADIeAAAAAAAAAAAAAAAA8L8KIAAAAAAAAAogAAAAAAAAAAAAAAAA8L8"
				],
				[
					120,
					1,
					"right_delete",
					null,
					"AQAAAHQOAAAAAAAAdA4AAAAAAAABAAAACg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB0DgAAAAAAAHQOAAAAAAAAAAAAAAAA8L8"
				],
				[
					134,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJ4PAAAAAAAAnw8AAAAAAAAAAAAAnw8AAAAAAACtDwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACeDwAAAAAAAJ4PAAAAAAAA////////738"
				],
				[
					137,
					1,
					"insert",
					{
						"characters": "delete"
					},
					"BgAAAK0PAAAAAAAArg8AAAAAAAAAAAAArg8AAAAAAACvDwAAAAAAAAAAAACvDwAAAAAAALAPAAAAAAAAAAAAALAPAAAAAAAAsQ8AAAAAAAAAAAAAsQ8AAAAAAACyDwAAAAAAAAAAAACyDwAAAAAAALMPAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACtDwAAAAAAAK0PAAAAAAAAAAAAAAAA8L8"
				],
				[
					138,
					1,
					"insert",
					{
						"characters": " this.resposes"
					},
					"DgAAALMPAAAAAAAAtA8AAAAAAAAAAAAAtA8AAAAAAAC1DwAAAAAAAAAAAAC1DwAAAAAAALYPAAAAAAAAAAAAALYPAAAAAAAAtw8AAAAAAAAAAAAAtw8AAAAAAAC4DwAAAAAAAAAAAAC4DwAAAAAAALkPAAAAAAAAAAAAALkPAAAAAAAAug8AAAAAAAAAAAAAug8AAAAAAAC7DwAAAAAAAAAAAAC7DwAAAAAAALwPAAAAAAAAAAAAALwPAAAAAAAAvQ8AAAAAAAAAAAAAvQ8AAAAAAAC+DwAAAAAAAAAAAAC+DwAAAAAAAL8PAAAAAAAAAAAAAL8PAAAAAAAAwA8AAAAAAAAAAAAAwA8AAAAAAADBDwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACzDwAAAAAAALMPAAAAAAAAAAAAAAAA8L8"
				],
				[
					139,
					3,
					"left_delete",
					null,
					"AwAAAMAPAAAAAAAAwA8AAAAAAAABAAAAc78PAAAAAAAAvw8AAAAAAAABAAAAZb4PAAAAAAAAvg8AAAAAAAABAAAAcw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADBDwAAAAAAAMEPAAAAAAAAAAAAAAAA8L8"
				],
				[
					140,
					1,
					"insert",
					{
						"characters": "nses"
					},
					"BAAAAL4PAAAAAAAAvw8AAAAAAAAAAAAAvw8AAAAAAADADwAAAAAAAAAAAADADwAAAAAAAMEPAAAAAAAAAAAAAMEPAAAAAAAAwg8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC+DwAAAAAAAL4PAAAAAAAAAAAAAAAA8L8"
				],
				[
					141,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAMIPAAAAAAAAxA8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADCDwAAAAAAAMIPAAAAAAAAAAAAAAAA8L8"
				],
				[
					142,
					1,
					"insert",
					{
						"characters": "request_sedq"
					},
					"DAAAAMMPAAAAAAAAxA8AAAAAAAAAAAAAxA8AAAAAAADFDwAAAAAAAAAAAADFDwAAAAAAAMYPAAAAAAAAAAAAAMYPAAAAAAAAxw8AAAAAAAAAAAAAxw8AAAAAAADIDwAAAAAAAAAAAADIDwAAAAAAAMkPAAAAAAAAAAAAAMkPAAAAAAAAyg8AAAAAAAAAAAAAyg8AAAAAAADLDwAAAAAAAAAAAADLDwAAAAAAAMwPAAAAAAAAAAAAAMwPAAAAAAAAzQ8AAAAAAAAAAAAAzQ8AAAAAAADODwAAAAAAAAAAAADODwAAAAAAAM8PAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADDDwAAAAAAAMMPAAAAAAAAAAAAAAAA8L8"
				],
				[
					143,
					2,
					"left_delete",
					null,
					"AgAAAM4PAAAAAAAAzg8AAAAAAAABAAAAcc0PAAAAAAAAzQ8AAAAAAAABAAAAZA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADPDwAAAAAAAM8PAAAAAAAAAAAAAAAA8L8"
				],
				[
					144,
					1,
					"insert",
					{
						"characters": "q"
					},
					"AQAAAM0PAAAAAAAAzg8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADNDwAAAAAAAM0PAAAAAAAAAAAAAAAA8L8"
				],
				[
					146,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAM8PAAAAAAAA0A8AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADPDwAAAAAAAM8PAAAAAAAAAAAAAAAA8L8"
				],
				[
					147,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAANAPAAAAAAAA0Q8AAAAAAAAAAAAA0Q8AAAAAAADfDwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADQDwAAAAAAANAPAAAAAAAAAAAAAAAA8L8"
				],
				[
					149,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAK0PAAAAAAAArg8AAAAAAAAAAAAArg8AAAAAAAC8DwAAAAAAAAAAAADgDwAAAAAAAOAPAAAAAAAADgAAACAgICAgICAgICAgICAg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACtDwAAAAAAAK0PAAAAAAAAAAAAAACAX0A"
				],
				[
					166,
					1,
					"revert",
					null,
					"",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADgDwAAAAAAAOAPAAAAAAAAAAAAAAAAAAA"
				],
				[
					173,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAKYJAAAAAAAApwkAAAAAAAAAAAAApwkAAAAAAACnCQAAAAAAAHwDAAAKCi8qZXhwb3J0IGZ1bmN0aW9uIEVDTUFTY3JpcHRTeW50YXhIaWdobGlnaHRlcihpbnB1dCwgZmlsZW5hbWUpIHsKICBjb25zdCBsZXhlciA9IG5ldyBFQ01BU2NyaXB0TGV4ZXIoaW5wdXQsIGZpbGVuYW1lKTsKICBsZXQgcHJldiA9IDAsCiAgICBzID0gJyc7CiAgY29uc3VtZVN5bmMobGV4ZXIudmFsdWVzKCksICh7IGlkLCB0eXBlLCBsZXhlbWUgfSkgPT4gewogICAgbGV0IGNvbG9yID0gewogICAgICBzaGViYW5nOiAzMiwKICAgICAgY29tbWVudDogMzIsCiAgICAgIHJlZ2V4cExpdGVyYWw6IDM1LAogICAgICB0ZW1wbGF0ZUxpdGVyYWw6IDM1LAogICAgICB0ZW1wbGF0ZUxpdGVyYWxIZWFkOiAzNSwKICAgICAgdGVtcGxhdGVMaXRlcmFsUGFydDogMzUsCiAgICAgIHRlbXBsYXRlTGl0ZXJhbFRhaWw6IDM1LAogICAgICBwdW5jdHVhdG9yOiAzNiwKICAgICAgbnVtZXJpY0xpdGVyYWw6IDM2LAogICAgICBzdHJpbmdMaXRlcmFsOiAzNiwKICAgICAgYm9vbGVhbkxpdGVyYWw6IDMxLAogICAgICBudWxsTGl0ZXJhbDogMzUsCiAgICAgIGtleXdvcmQ6IDMxLAogICAgICBpZGVudGlmaWVyOiAzMywKICAgICAgcHJpdmF0ZUlkZW50aWZpZXI6IDMzLAogICAgICB3aGl0ZXNwYWNlOiBmYWxzZQogICAgfVt0eXBlXTsKCiAgICBpZihsZXhlbWUuaW5kZXhPZignXG4nKSAhPSAtMSkgY29sb3IgPSAwOwoKICAgIGlmKGNvbG9yICE9PSBmYWxzZSkgewogICAgICBpZihwcmV2ICE9IGNvbG9yKSBsZXhlbWUgPSAnXHgxYlsnICsgKGNvbG9yID8gJzE7JyA6ICcnKSArIGNvbG9yICsgJ20nICsgbGV4ZW1lOwogICAgICBwcmV2ID0gY29sb3I7CiAgICB9CgogICAgcyArPSBsZXhlbWU7CiAgfSk7CgogIGlmKHByZXYpIHMgKz0gJ1x4MWJbMG0nOwogIHJldHVybiBzOwp9Ciov",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACmCQAAAAAAACINAAAAAAAAAAAAAAAA8L8"
				],
				[
					174,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAKcJAAAAAAAAqAkAAAAAAAAAAAAAqAkAAAAAAACpCQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACnCQAAAAAAAKcJAAAAAAAAAAAAAAAA8L8"
				],
				[
					181,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAC4cAAAAAAAALxwAAAAAAAAAAAAALxwAAAAAAAAvHAAAAAAAAOAFAAAKLypmdW5jdGlvbiBUZXN0V29ya2VyKCkgewogIGdsb2JhbFRoaXMuY29uc29sZSA9IG5ldyBDb25zb2xlKHsKICAgIGNvbG9yczogdHJ1ZSwKICAgIGNvbXBhY3Q6IDEsCiAgICBwcmVmaXg6ICdceDFiWzM4OzU7MjIwbVBBUkVOVFx4MWJbMG0nCiAgfSk7CiAgd29ya2VyID0gbmV3IFdvcmtlcignLi93cy13b3JrZXIuanMnKTsKICBjb3VudGVyID0gMDsKICB3b3JrZXIub25tZXNzYWdlID0gV29ya2VyTWVzc2FnZTsKICBzZXRSZWFkSGFuZGxlcigwLCAoKSA9PiB7CiAgICBsZXQgbGluZSA9IHByb2Nlc3Muc3RkaW4uZ2V0bGluZSgpOwogICAgd29ya2VyLnBvc3RNZXNzYWdlKHsgbGluZSB9KTsKICB9KTsKfQoKbGV0IHNvY2ssIGNvbm5lY3Rpb247CmZ1bmN0aW9uIFdvcmtlck1lc3NhZ2UoZSkgewogIHZhciBldiA9IGUuZGF0YTsKICBjb25zdCB7IG1lc3NhZ2UsIGlkIH0gPSBldjsKICBzd2l0Y2ggKGV2LnR5cGUpIHsKICAgIGNhc2UgJ21lc3NhZ2UnOiB7CiAgICAgIHN3aXRjaCAobWVzc2FnZS50eXBlKSB7CiAgICAgICAgY2FzZSAnc3RhcnQnOiB7CiAgICAgICAgICBjb25zb2xlLmxvZygnU1RBUlQnLCBtZXNzYWdlLnN0YXJ0KTsKICAgICAgICAgIGNvbnN0IHsgYXJncywgY29ubmVjdCwgYWRkcmVzcyB9ID0gbWVzc2FnZS5zdGFydDsKICAgICAgICAgIGxldCBjaGlsZCA9IFN0YXJ0RGVidWdnZXIoYXJncywgY29ubmVjdCwgYWRkcmVzcyk7CiAgICAgICAgICBzbGVlcCgxMDAwKTsKICAgICAgICAgIHNvY2sgPSBDb25uZWN0RGVidWdnZXIoYWRkcmVzcyk7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgICAgZGVmYXVsdDogewogICAgICAgICAgY29uc29sZS5sb2coJ0Zyb20gV09SS0VSJywgZXYpOwogICAgICAgICAgY29ubmVjdGlvbi5zZW5kTWVzc2FnZShtZXNzYWdlKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgfQogICAgICBicmVhazsKICAgIH0KICAgIGNhc2UgJ251bSc6IHsKICAgICAgYXNzZXJ0KGV2Lm51bSwgY291bnRlcik7CiAgICAgIGNvdW50ZXIrKzsKICAgICAgaWYoY291bnRlciA9PSAxMCkgewogICAgICAgIGxldCBzYWIgPSBuZXcgU2hhcmVkQXJyYXlCdWZmZXIoMTApOwogICAgICAgIGxldCBidWYgPSBuZXcgVWludDhBcnJheShzYWIpOwogICAgICAgIHdvcmtlci5wb3N0TWVzc2FnZSh7IHR5cGU6ICdzYWInLCBidWY6IGJ1ZiB9KTsKICAgICAgICBjb3VudGVyID0gMDsKICAgICAgfQogICAgICBicmVhazsKICAgIH0KICAgIGNhc2UgJ3NhYl9kb25lJzogewogICAgICBsZXQgYnVmID0gZXYuYnVmOwogICAgICBhc3NlcnQoYnVmWzJdLCAxMCk7CiAgICAgIHdvcmtlci5wb3N0TWVzc2FnZSh7IHR5cGU6ICdhYm9ydCcgfSk7CiAgICAgIGJyZWFrOwogICAgfQogICAgY2FzZSAnZG9uZSc6IHsKICAgICAgYnJlYWs7CiAgICB9CiAgfQp9CgpmdW5jdGlvbiBzZW5kKGlkLCBib2R5KSB7CiAgd29ya2VyLnBvc3RNZXNzYWdlKHsgdHlwZTogJ3NlbmQnLCBpZCwgYm9keSB9KTsKfSov",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAuHAAAAAAAAA4iAAAAAAAAAAAAAAAA8L8"
				],
				[
					184,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAOEhAAAAAAAA4iEAAAAAAAAAAAAA4iEAAAAAAADiIQAAAAAAAP0AAAAKICAgIC8qICAgIHRyeSB7CiAgICAgIGlmKHAubGFzdCA9PSAndmFsdWUnKSBuYW1lID0gZGVlcC5nZXQoYXN0LCBwLnNsaWNlKDAsIC0xKS5jb25jYXQoWydrZXknLCAnbmFtZSddKSk7CiAgICB9IGNhdGNoKGUpIHt9CgogICAgaWYocGFyZW50LnR5cGUgPT0gJ1Byb3BlcnR5JykgewogICAgICBpZihwYXJlbnQua2V5LnR5cGUgPT0gJ0xpdGVyYWwnKSB7CiAgICAgICAgbmFtZSA/Pz0gcGFyZW50LmtleS52YWx1ZTsKICAgICAgfQogICAgfSov",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADhIQAAAAAAAN4iAAAAAAAAAAAAAAAA8L8"
				],
				[
					187,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAF0iAAAAAAAAXiIAAAAAAAAAAAAAXiIAAAAAAABeIgAAAAAAABMAAAAKICAgICAgLyppZihuYW1lKSov",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABwIgAAAAAAAF0iAAAAAAAAAAAAAAAA8L8"
				],
				[
					194,
					1,
					"revert",
					null,
					"",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABeIgAAAAAAAF4iAAAAAAAAAAAAAAAA8L8"
				],
				[
					196,
					1,
					"paste",
					null,
					"AQAAAJ0KAAAAAAAAswoAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACdCgAAAAAAAJ0KAAAAAAAAAAAAAAAA8L8"
				],
				[
					200,
					1,
					"paste",
					null,
					"AQAAAG0QAAAAAAAAgxAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABtEAAAAAAAAG0QAAAAAAAAAAAAAAAA8L8"
				],
				[
					205,
					1,
					"paste",
					null,
					"AQAAAPYRAAAAAAAADBIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD2EQAAAAAAAPYRAAAAAAAAAAAAAAAA8L8"
				],
				[
					214,
					1,
					"revert",
					null,
					"",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABMEgAAAAAAAEwSAAAAAAAAAAAAAAAA8L8"
				],
				[
					268,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAADEXAAAAAAAAMhcAAAAAAAAAAAAAMhcAAAAAAAA2FwAAAAAAAAAAAAA2FwAAAAAAADcXAAAAAAAAAAAAADcXAAAAAAAAOxcAAAAAAAAAAAAAMhcAAAAAAAAyFwAAAAAAAAQAAAAgICAg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAxFwAAAAAAADEXAAAAAAAAAAAAAAAAQkA"
				],
				[
					270,
					1,
					"insert",
					{
						"characters": "console.log"
					},
					"CwAAADEXAAAAAAAAMhcAAAAAAAAAAAAAMhcAAAAAAAAzFwAAAAAAAAAAAAAzFwAAAAAAADQXAAAAAAAAAAAAADQXAAAAAAAANRcAAAAAAAAAAAAANRcAAAAAAAA2FwAAAAAAAAAAAAA2FwAAAAAAADcXAAAAAAAAAAAAADcXAAAAAAAAOBcAAAAAAAAAAAAAOBcAAAAAAAA5FwAAAAAAAAAAAAA5FwAAAAAAADoXAAAAAAAAAAAAADoXAAAAAAAAOxcAAAAAAAAAAAAAOxcAAAAAAAA8FwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAxFwAAAAAAADEXAAAAAAAAAAAAAAAAQkA"
				],
				[
					271,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADwXAAAAAAAAPhcAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA8FwAAAAAAADwXAAAAAAAAAAAAAAAA8L8"
				],
				[
					272,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAD0XAAAAAAAAPxcAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA9FwAAAAAAAD0XAAAAAAAAAAAAAAAA8L8"
				],
				[
					273,
					1,
					"insert",
					{
						"characters": "breakpoints"
					},
					"CwAAAD4XAAAAAAAAPxcAAAAAAAAAAAAAPxcAAAAAAABAFwAAAAAAAAAAAABAFwAAAAAAAEEXAAAAAAAAAAAAAEEXAAAAAAAAQhcAAAAAAAAAAAAAQhcAAAAAAABDFwAAAAAAAAAAAABDFwAAAAAAAEQXAAAAAAAAAAAAAEQXAAAAAAAARRcAAAAAAAAAAAAARRcAAAAAAABGFwAAAAAAAAAAAABGFwAAAAAAAEcXAAAAAAAAAAAAAEcXAAAAAAAASBcAAAAAAAAAAAAASBcAAAAAAABJFwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA+FwAAAAAAAD4XAAAAAAAAAAAAAAAA8L8"
				],
				[
					274,
					1,
					"insert",
					{
						"characters": "(1)"
					},
					"AwAAAEkXAAAAAAAAShcAAAAAAAAAAAAAShcAAAAAAABLFwAAAAAAAAAAAABLFwAAAAAAAEwXAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABJFwAAAAAAAEkXAAAAAAAAAAAAAAAA8L8"
				],
				[
					276,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAE0XAAAAAAAAThcAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABNFwAAAAAAAE0XAAAAAAAAAAAAAAAA8L8"
				],
				[
					277,
					1,
					"insert",
					{
						"characters": " b"
					},
					"AgAAAE4XAAAAAAAATxcAAAAAAAAAAAAATxcAAAAAAABQFwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABOFwAAAAAAAE4XAAAAAAAAAAAAAAAA8L8"
				],
				[
					278,
					1,
					"left_delete",
					null,
					"AQAAAE8XAAAAAAAATxcAAAAAAAABAAAAYg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABQFwAAAAAAAFAXAAAAAAAAAAAAAAAA8L8"
				],
				[
					279,
					1,
					"insert",
					{
						"characters": "msg"
					},
					"AwAAAE8XAAAAAAAAUBcAAAAAAAAAAAAAUBcAAAAAAABRFwAAAAAAAAAAAABRFwAAAAAAAFIXAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABPFwAAAAAAAE8XAAAAAAAAAAAAAAAA8L8"
				],
				[
					281,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAFMXAAAAAAAAVBcAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABTFwAAAAAAAFMXAAAAAAAAAAAAAAAA8L8"
				],
				[
					287,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAAFcXAAAAAAAAWBcAAAAAAAAAAAAAWBcAAAAAAABZFwAAAAAAAAAAAABZFwAAAAAAAFoXAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABXFwAAAAAAAFcXAAAAAAAAAAAAAAAA8L8"
				],
				[
					288,
					1,
					"insert",
					{
						"characters": " ret="
					},
					"BQAAAFoXAAAAAAAAWxcAAAAAAAAAAAAAWxcAAAAAAABcFwAAAAAAAAAAAABcFwAAAAAAAF0XAAAAAAAAAAAAAF0XAAAAAAAAXhcAAAAAAAAAAAAAXhcAAAAAAABfFwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABaFwAAAAAAAFoXAAAAAAAAAAAAAAAA8L8"
				],
				[
					290,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAHgXAAAAAAAAeRcAAAAAAAAAAAAAeRcAAAAAAAB6FwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB4FwAAAAAAAHgXAAAAAAAA////////738"
				],
				[
					293,
					1,
					"cut",
					null,
					"AQAAAC4XAAAAAAAALhcAAAAAAAAnAAAAICAgY29uc29sZS5sb2coJ2JyZWFrcG9pbnRzKDEpJywgbXNnKTsK",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAuFwAAAAAAAFUXAAAAAAAAAAAAAAAAIkA"
				],
				[
					294,
					1,
					"paste",
					null,
					"AQAAAC4XAAAAAAAAVRcAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAuFwAAAAAAAC4XAAAAAAAAAAAAAAAA8L8"
				],
				[
					296,
					1,
					"paste",
					null,
					"AQAAAHkXAAAAAAAAoBcAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB5FwAAAAAAAHkXAAAAAAAAAAAAAAAAAAA"
				],
				[
					301,
					1,
					"insert_snippet",
					{
						"contents": "{${0:$SELECTION}}"
					},
					"AwAAAJoXAAAAAAAAmhcAAAAAAAADAAAAbXNnmhcAAAAAAACfFwAAAAAAAAAAAACiFwAAAAAAAKIXAAAAAAAAAQAAACA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACaFwAAAAAAAJ0XAAAAAAAAAAAAAAAA8L8"
				],
				[
					302,
					1,
					"insert",
					{
						"characters": "msg,ret"
					},
					"CAAAAJsXAAAAAAAAnBcAAAAAAAAAAAAAnBcAAAAAAACcFwAAAAAAAAMAAABtc2ecFwAAAAAAAJ0XAAAAAAAAAAAAAJ0XAAAAAAAAnhcAAAAAAAAAAAAAnhcAAAAAAACfFwAAAAAAAAAAAACfFwAAAAAAAKAXAAAAAAAAAAAAAKAXAAAAAAAAoRcAAAAAAAAAAAAAoRcAAAAAAACiFwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACbFwAAAAAAAJ4XAAAAAAAAAAAAAAAA8L8"
				],
				[
					307,
					1,
					"cut",
					null,
					"AQAAADEXAAAAAAAAMRcAAAAAAAAkAAAAY29uc29sZS5sb2coJ2JyZWFrcG9pbnRzKDEpJywgbXNnKTsK",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAxFwAAAAAAAFUXAAAAAAAAAAAAAAAAQkA"
				],
				[
					315,
					1,
					"insert",
					{
						"characters": "await"
					},
					"BQAAAD0XAAAAAAAAPhcAAAAAAAAAAAAAPhcAAAAAAAA/FwAAAAAAAAAAAAA/FwAAAAAAAEAXAAAAAAAAAAAAAEAXAAAAAAAAQRcAAAAAAAAAAAAAQRcAAAAAAABCFwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA9FwAAAAAAAD0XAAAAAAAAAAAAAAAA8L8"
				],
				[
					316,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEIXAAAAAAAAQxcAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABCFwAAAAAAAEIXAAAAAAAAAAAAAAAA8L8"
				],
				[
					319,
					1,
					"insert",
					{
						"characters": "async"
					},
					"BQAAAAcWAAAAAAAACBYAAAAAAAAAAAAACBYAAAAAAAAJFgAAAAAAAAAAAAAJFgAAAAAAAAoWAAAAAAAAAAAAAAoWAAAAAAAACxYAAAAAAAAAAAAACxYAAAAAAAAMFgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAHFgAAAAAAAAcWAAAAAAAAAAAAAAAAMkA"
				],
				[
					320,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAwWAAAAAAAADRYAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAMFgAAAAAAAAwWAAAAAAAAAAAAAAAA8L8"
				],
				[
					337,
					1,
					"revert",
					null,
					"",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABGGQAAAAAAAEYZAAAAAAAAAAAAAAAA8L8"
				],
				[
					368,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAF4XAAAAAAAAXxcAAAAAAAAAAAAAXxcAAAAAAABjFwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABeFwAAAAAAAF4XAAAAAAAAAAAAAAAA8L8"
				],
				[
					416,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AwAAAGgXAAAAAAAAaRcAAAAAAAAAAAAAXxcAAAAAAABfFwAAAAAAAAQAAAAgICAgZRcAAAAAAABmFwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABoFwAAAAAAAGgXAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "debugger-client.js",
			"settings":
			{
				"buffer_size": 10822,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					34,
					1,
					"insert",
					{
						"characters": "\nif"
					},
					"BAAAAOQSAAAAAAAA5RIAAAAAAAAAAAAA5RIAAAAAAADnEgAAAAAAAAAAAADnEgAAAAAAAOgSAAAAAAAAAAAAAOgSAAAAAAAA6RIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADkEgAAAAAAAOQSAAAAAAAAAAAAAACQckA"
				],
				[
					35,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAOkSAAAAAAAA6xIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADpEgAAAAAAAOkSAAAAAAAAAAAAAAAA8L8"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "!address"
					},
					"CAAAAOoSAAAAAAAA6xIAAAAAAAAAAAAA6xIAAAAAAADsEgAAAAAAAAAAAADsEgAAAAAAAO0SAAAAAAAAAAAAAO0SAAAAAAAA7hIAAAAAAAAAAAAA7hIAAAAAAADvEgAAAAAAAAAAAADvEgAAAAAAAPASAAAAAAAAAAAAAPASAAAAAAAA8RIAAAAAAAAAAAAA8RIAAAAAAADyEgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADqEgAAAAAAAOoSAAAAAAAAAAAAAAAA8L8"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPMSAAAAAAAA9BIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADzEgAAAAAAAPMSAAAAAAAAAAAAAAAA8L8"
				],
				[
					39,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAPQSAAAAAAAA9hIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD0EgAAAAAAAPQSAAAAAAAAAAAAAAAA8L8"
				],
				[
					40,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAPUSAAAAAAAA9hIAAAAAAAAAAAAA9hIAAAAAAAD4EgAAAAAAAAAAAAD4EgAAAAAAAPkSAAAAAAAAAAAAAPkSAAAAAAAA+xIAAAAAAAAAAAAA9hIAAAAAAAD2EgAAAAAAAAIAAAAgIPYSAAAAAAAA+hIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD1EgAAAAAAAPUSAAAAAAAAAAAAAAAA8L8"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": "globalThis.addr"
					},
					"DwAAAPoSAAAAAAAA+xIAAAAAAAAAAAAA+xIAAAAAAAD8EgAAAAAAAAAAAAD8EgAAAAAAAP0SAAAAAAAAAAAAAP0SAAAAAAAA/hIAAAAAAAAAAAAA/hIAAAAAAAD/EgAAAAAAAAAAAAD/EgAAAAAAAAATAAAAAAAAAAAAAAATAAAAAAAAARMAAAAAAAAAAAAAARMAAAAAAAACEwAAAAAAAAAAAAACEwAAAAAAAAMTAAAAAAAAAAAAAAMTAAAAAAAABBMAAAAAAAAAAAAABBMAAAAAAAAFEwAAAAAAAAAAAAAFEwAAAAAAAAYTAAAAAAAAAAAAAAYTAAAAAAAABxMAAAAAAAAAAAAABxMAAAAAAAAIEwAAAAAAAAAAAAAIEwAAAAAAAAkTAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD6EgAAAAAAAPoSAAAAAAAAAAAAAAAA8L8"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": "ess=address="
					},
					"DAAAAAkTAAAAAAAAChMAAAAAAAAAAAAAChMAAAAAAAALEwAAAAAAAAAAAAALEwAAAAAAAAwTAAAAAAAAAAAAAAwTAAAAAAAADRMAAAAAAAAAAAAADRMAAAAAAAAOEwAAAAAAAAAAAAAOEwAAAAAAAA8TAAAAAAAAAAAAAA8TAAAAAAAAEBMAAAAAAAAAAAAAEBMAAAAAAAAREwAAAAAAAAAAAAAREwAAAAAAABITAAAAAAAAAAAAABITAAAAAAAAExMAAAAAAAAAAAAAExMAAAAAAAAUEwAAAAAAAAAAAAAUEwAAAAAAABUTAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAJEwAAAAAAAAkTAAAAAAAAAAAAAAAA8L8"
				],
				[
					44,
					1,
					"",
					null,
					"AQAAABUTAAAAAAAAOBMAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAVEwAAAAAAABUTAAAAAAAAAAAAAAAA8L8"
				],
				[
					47,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADgTAAAAAAAAOhMAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA4EwAAAAAAADgTAAAAAAAAAAAAAAAA8L8"
				],
				[
					49,
					2,
					"left_delete",
					null,
					"AgAAADkTAAAAAAAAORMAAAAAAAABAAAAKTgTAAAAAAAAOBMAAAAAAAABAAAAKA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA6EwAAAAAAADoTAAAAAAAAAAAAAAAA8L8"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": ");"
					},
					"AgAAADgTAAAAAAAAORMAAAAAAAAAAAAAORMAAAAAAAA6EwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA4EwAAAAAAADgTAAAAAAAAAAAAAAAA8L8"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAABUTAAAAAAAAFhMAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAVEwAAAAAAABUTAAAAAAAAAAAAAAAA8L8"
				],
				[
					54,
					1,
					"left_delete",
					null,
					"AQAAABUTAAAAAAAAFRMAAAAAAAABAAAALw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAWEwAAAAAAABYTAAAAAAAAAAAAAAAA8L8"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAABUTAAAAAAAAFhMAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAVEwAAAAAAABUTAAAAAAAAAAAAAAAA8L8"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": "'127.0.0.1:"
					},
					"CwAAABUTAAAAAAAAFhMAAAAAAAAAAAAAFhMAAAAAAAAXEwAAAAAAAAAAAAAXEwAAAAAAABgTAAAAAAAAAAAAABgTAAAAAAAAGRMAAAAAAAAAAAAAGRMAAAAAAAAaEwAAAAAAAAAAAAAaEwAAAAAAABsTAAAAAAAAAAAAABsTAAAAAAAAHBMAAAAAAAAAAAAAHBMAAAAAAAAdEwAAAAAAAAAAAAAdEwAAAAAAAB4TAAAAAAAAAAAAAB4TAAAAAAAAHxMAAAAAAAAAAAAAHxMAAAAAAAAgEwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAVEwAAAAAAABUTAAAAAAAAAAAAAAAA8L8"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": "'°+"
					},
					"AwAAACATAAAAAAAAIRMAAAAAAAAAAAAAIRMAAAAAAAAiEwAAAAAAAAAAAAAiEwAAAAAAACMTAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAgEwAAAAAAACATAAAAAAAAAAAAAAAA8L8"
				],
				[
					59,
					2,
					"left_delete",
					null,
					"AgAAACITAAAAAAAAIhMAAAAAAAABAAAAKyETAAAAAAAAIRMAAAAAAAACAAAAwrA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAjEwAAAAAAACMTAAAAAAAAAAAAAAAA8L8"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": "+"
					},
					"AQAAACETAAAAAAAAIhMAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAhEwAAAAAAACETAAAAAAAAAAAAAAAA8L8"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAEwTAAAAAAAATRMAAAAAAAAAAAAATRMAAAAAAABPEwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABMEwAAAAAAAEwTAAAAAAAA////////738"
				],
				[
					87,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AwAAAJ0TAAAAAAAAnhMAAAAAAAAAAAAATRMAAAAAAABNEwAAAAAAAAIAAAAgIJwTAAAAAAAAnRMAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACdEwAAAAAAAJ0TAAAAAAAAAAAAAAAA8L8"
				],
				[
					88,
					1,
					"insert",
					{
						"characters": " globalThis.addr"
					},
					"EAAAAJ0TAAAAAAAAnhMAAAAAAAAAAAAAnhMAAAAAAACfEwAAAAAAAAAAAACfEwAAAAAAAKATAAAAAAAAAAAAAKATAAAAAAAAoRMAAAAAAAAAAAAAoRMAAAAAAACiEwAAAAAAAAAAAACiEwAAAAAAAKMTAAAAAAAAAAAAAKMTAAAAAAAApBMAAAAAAAAAAAAApBMAAAAAAAClEwAAAAAAAAAAAAClEwAAAAAAAKYTAAAAAAAAAAAAAKYTAAAAAAAApxMAAAAAAAAAAAAApxMAAAAAAACoEwAAAAAAAAAAAACoEwAAAAAAAKkTAAAAAAAAAAAAAKkTAAAAAAAAqhMAAAAAAAAAAAAAqhMAAAAAAACrEwAAAAAAAAAAAACrEwAAAAAAAKwTAAAAAAAAAAAAAKwTAAAAAAAArRMAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACdEwAAAAAAAJ0TAAAAAAAAAAAAAAAA8L8"
				],
				[
					89,
					1,
					"insert",
					{
						"characters": "ess"
					},
					"AwAAAK0TAAAAAAAArhMAAAAAAAAAAAAArhMAAAAAAACvEwAAAAAAAAAAAACvEwAAAAAAALATAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACtEwAAAAAAAK0TAAAAAAAAAAAAAAAA8L8"
				],
				[
					136,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAL0lAAAAAAAAviUAAAAAAAAAAAAAviUAAAAAAADGJQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC9JQAAAAAAAL0lAAAAAAAAAAAAAAAA8L8"
				],
				[
					139,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAIYlAAAAAAAAhyUAAAAAAAAAAAAAhyUAAAAAAACPJQAAAAAAAAAAAADHJQAAAAAAAMclAAAAAAAACAAAACAgICAgICAg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACGJQAAAAAAAIYlAAAAAAAAAAAAAAAAUkA"
				],
				[
					171,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAANgkAAAAAAAA2SQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADYJAAAAAAAANgkAAAAAAAAAAAAAAAA8L8"
				],
				[
					172,
					5,
					"left_delete",
					null,
					"BQAAANgkAAAAAAAA2CQAAAAAAAABAAAACtckAAAAAAAA1yQAAAAAAAABAAAAL9YkAAAAAAAA1iQAAAAAAAABAAAAKtUkAAAAAAAA1SQAAAAAAAABAAAACtQkAAAAAAAA1CQAAAAAAAABAAAAOw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADZJAAAAAAAANkkAAAAAAAAAAAAAAAA8L8"
				],
				[
					173,
					1,
					"insert",
					{
						"characters": ";*/"
					},
					"AwAAANQkAAAAAAAA1SQAAAAAAAAAAAAA1SQAAAAAAADWJAAAAAAAAAAAAADWJAAAAAAAANckAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADUJAAAAAAAANQkAAAAAAAAAAAAAAAA8L8"
				],
				[
					176,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAANckAAAAAAAA2CQAAAAAAAAAAAAA2CQAAAAAAADaJAAAAAAAAAAAAADaJAAAAAAAANskAAAAAAAAAAAAANskAAAAAAAA3SQAAAAAAAAAAAAA2CQAAAAAAADYJAAAAAAAAAIAAAAgIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADXJAAAAAAAANckAAAAAAAAAAAAAAAA8L8"
				],
				[
					281,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAEQeAAAAAAAARR4AAAAAAAAAAAAA2iQAAAAAAADaJAAAAAAAAAIAAAAgIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABEHgAAAAAAAEQeAAAAAAAAAAAAAAAA8L8"
				],
				[
					303,
					1,
					"insert",
					{
						"characters": "\n\nresponses"
					},
					"DgAAAPYlAAAAAAAA9yUAAAAAAAAAAAAA9yUAAAAAAAD5JQAAAAAAAAAAAAD5JQAAAAAAAPolAAAAAAAAAAAAAPolAAAAAAAA/CUAAAAAAAAAAAAA9yUAAAAAAAD3JQAAAAAAAAIAAAAgIPolAAAAAAAA+yUAAAAAAAAAAAAA+yUAAAAAAAD8JQAAAAAAAAAAAAD8JQAAAAAAAP0lAAAAAAAAAAAAAP0lAAAAAAAA/iUAAAAAAAAAAAAA/iUAAAAAAAD/JQAAAAAAAAAAAAD/JQAAAAAAAAAmAAAAAAAAAAAAAAAmAAAAAAAAASYAAAAAAAAAAAAAASYAAAAAAAACJgAAAAAAAAAAAAACJgAAAAAAAAMmAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD2JQAAAAAAAPYlAAAAAAAAAAAAAAAA8L8"
				],
				[
					305,
					1,
					"insert",
					{
						"characters": "glöo"
					},
					"BQAAAPolAAAAAAAA+yUAAAAAAAAAAAAA+yUAAAAAAAD7JQAAAAAAAAkAAAByZXNwb25zZXP7JQAAAAAAAPwlAAAAAAAAAAAAAPwlAAAAAAAA/SUAAAAAAAAAAAAA/SUAAAAAAAD+JQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAADJgAAAAAAAPolAAAAAAAAAAAAAAAAMkA"
				],
				[
					306,
					4,
					"left_delete",
					null,
					"BAAAAP0lAAAAAAAA/SUAAAAAAAABAAAAb/wlAAAAAAAA/CUAAAAAAAACAAAAw7b7JQAAAAAAAPslAAAAAAAAAQAAAGz6JQAAAAAAAPolAAAAAAAAAQAAAGc",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD+JQAAAAAAAP4lAAAAAAAAAAAAAAAA8L8"
				],
				[
					307,
					1,
					"insert",
					{
						"characters": "responses=dispatch"
					},
					"EgAAAPolAAAAAAAA+yUAAAAAAAAAAAAA+yUAAAAAAAD8JQAAAAAAAAAAAAD8JQAAAAAAAP0lAAAAAAAAAAAAAP0lAAAAAAAA/iUAAAAAAAAAAAAA/iUAAAAAAAD/JQAAAAAAAAAAAAD/JQAAAAAAAAAmAAAAAAAAAAAAAAAmAAAAAAAAASYAAAAAAAAAAAAAASYAAAAAAAACJgAAAAAAAAAAAAACJgAAAAAAAAMmAAAAAAAAAAAAAAMmAAAAAAAABCYAAAAAAAAAAAAABCYAAAAAAAAFJgAAAAAAAAAAAAAFJgAAAAAAAAYmAAAAAAAAAAAAAAYmAAAAAAAAByYAAAAAAAAAAAAAByYAAAAAAAAIJgAAAAAAAAAAAAAIJgAAAAAAAAkmAAAAAAAAAAAAAAkmAAAAAAAACiYAAAAAAAAAAAAACiYAAAAAAAALJgAAAAAAAAAAAAALJgAAAAAAAAwmAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD6JQAAAAAAAPolAAAAAAAAAAAAAAAA8L8"
				],
				[
					308,
					1,
					"insert",
					{
						"characters": ".responses;"
					},
					"CwAAAAwmAAAAAAAADSYAAAAAAAAAAAAADSYAAAAAAAAOJgAAAAAAAAAAAAAOJgAAAAAAAA8mAAAAAAAAAAAAAA8mAAAAAAAAECYAAAAAAAAAAAAAECYAAAAAAAARJgAAAAAAAAAAAAARJgAAAAAAABImAAAAAAAAAAAAABImAAAAAAAAEyYAAAAAAAAAAAAAEyYAAAAAAAAUJgAAAAAAAAAAAAAUJgAAAAAAABUmAAAAAAAAAAAAABUmAAAAAAAAFiYAAAAAAAAAAAAAFiYAAAAAAAAXJgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAMJgAAAAAAAAwmAAAAAAAAAAAAAAAA8L8"
				],
				[
					311,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAABcmAAAAAAAAGCYAAAAAAAAAAAAAGCYAAAAAAAAaJgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAXJgAAAAAAABcmAAAAAAAAAAAAAAAA8L8"
				],
				[
					316,
					2,
					"left_delete",
					null,
					"AgAAABgmAAAAAAAAGCYAAAAAAAACAAAAICAXJgAAAAAAABcmAAAAAAAAAQAAAAo",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAaJgAAAAAAABomAAAAAAAAAAAAAAAA8L8"
				],
				[
					388,
					1,
					"cut",
					null,
					"AQAAAK8bAAAAAAAArxsAAAAAAAAKAAAAcmVzcG9uc2VzLA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACvGwAAAAAAALkbAAAAAAAAAAAAAAAA8L8"
				],
				[
					394,
					1,
					"insert",
					{
						"characters": "globalThis.responses"
					},
					"FAAAAPolAAAAAAAA+yUAAAAAAAAAAAAA+yUAAAAAAAD8JQAAAAAAAAAAAAD8JQAAAAAAAP0lAAAAAAAAAAAAAP0lAAAAAAAA/iUAAAAAAAAAAAAA/iUAAAAAAAD/JQAAAAAAAAAAAAD/JQAAAAAAAAAmAAAAAAAAAAAAAAAmAAAAAAAAASYAAAAAAAAAAAAAASYAAAAAAAACJgAAAAAAAAAAAAACJgAAAAAAAAMmAAAAAAAAAAAAAAMmAAAAAAAABCYAAAAAAAAAAAAABCYAAAAAAAAFJgAAAAAAAAAAAAAFJgAAAAAAAAYmAAAAAAAAAAAAAAYmAAAAAAAAByYAAAAAAAAAAAAAByYAAAAAAAAIJgAAAAAAAAAAAAAIJgAAAAAAAAkmAAAAAAAAAAAAAAkmAAAAAAAACiYAAAAAAAAAAAAACiYAAAAAAAALJgAAAAAAAAAAAAALJgAAAAAAAAwmAAAAAAAAAAAAAAwmAAAAAAAADSYAAAAAAAAAAAAADSYAAAAAAAAOJgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD6JQAAAAAAAPolAAAAAAAAAAAAAAAA8L8"
				],
				[
					395,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAA4mAAAAAAAADyYAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAOJgAAAAAAAA4mAAAAAAAAAAAAAAAA8L8"
				],
				[
					401,
					1,
					"insert",
					{
						"characters": "36"
					},
					"AgAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					402,
					2,
					"left_delete",
					null,
					"AgAAAAEAAAAAAAAAAQAAAAAAAAABAAAANgAAAAAAAAAAAAAAAAAAAAABAAAAMw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAACAAAAAAAAAAIAAAAAAAAAAAAAAAAA8L8"
				],
				[
					492,
					1,
					"cut",
					null,
					"AQAAAGgGAAAAAAAAaAYAAAAAAAAUAAAARWxlbWVudC5maW5kKCdtYWluJyk",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABoBgAAAAAAAHwGAAAAAAAAAAAAAAAA8L8"
				],
				[
					493,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAGgGAAAAAAAAaQYAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABoBgAAAAAAAGgGAAAAAAAAAAAAAAAA8L8"
				],
				[
					495,
					1,
					"insert",
					{
						"characters": "\nlet"
					},
					"BQAAAEkGAAAAAAAASgYAAAAAAAAAAAAASgYAAAAAAABMBgAAAAAAAAAAAABMBgAAAAAAAE0GAAAAAAAAAAAAAE0GAAAAAAAATgYAAAAAAAAAAAAATgYAAAAAAABPBgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABJBgAAAAAAAEkGAAAAAAAAAAAAAABwcUA"
				],
				[
					496,
					1,
					"insert",
					{
						"characters": " e;"
					},
					"AwAAAE8GAAAAAAAAUAYAAAAAAAAAAAAAUAYAAAAAAABRBgAAAAAAAAAAAABRBgAAAAAAAFIGAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABPBgAAAAAAAE8GAAAAAAAAAAAAAAAA8L8"
				],
				[
					497,
					1,
					"insert",
					{
						"characters": "\n\nif"
					},
					"BwAAAFIGAAAAAAAAUwYAAAAAAAAAAAAAUwYAAAAAAABVBgAAAAAAAAAAAABVBgAAAAAAAFYGAAAAAAAAAAAAAFYGAAAAAAAAWAYAAAAAAAAAAAAAUwYAAAAAAABTBgAAAAAAAAIAAAAgIFYGAAAAAAAAVwYAAAAAAAAAAAAAVwYAAAAAAABYBgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABSBgAAAAAAAFIGAAAAAAAAAAAAAAAA8L8"
				],
				[
					498,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAFgGAAAAAAAAWgYAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABYBgAAAAAAAFgGAAAAAAAAAAAAAAAA8L8"
				],
				[
					499,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAFkGAAAAAAAAWgYAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABZBgAAAAAAAFkGAAAAAAAAAAAAAAAA8L8"
				],
				[
					500,
					1,
					"left_delete",
					null,
					"AQAAAFkGAAAAAAAAWQYAAAAAAAABAAAAZQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABaBgAAAAAAAFoGAAAAAAAAAAAAAAAA8L8"
				],
				[
					501,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAFkGAAAAAAAAWwYAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABZBgAAAAAAAFkGAAAAAAAAAAAAAAAA8L8"
				],
				[
					502,
					1,
					"insert",
					{
						"characters": "e="
					},
					"AgAAAFoGAAAAAAAAWwYAAAAAAAAAAAAAWwYAAAAAAABcBgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABaBgAAAAAAAFoGAAAAAAAAAAAAAAAA8L8"
				],
				[
					503,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFwGAAAAAAAAXQYAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABcBgAAAAAAAFwGAAAAAAAAAAAAAAAA8L8"
				],
				[
					504,
					1,
					"paste",
					null,
					"AQAAAF0GAAAAAAAAcQYAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABdBgAAAAAAAF0GAAAAAAAAAAAAAAAA8L8"
				],
				[
					506,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHMGAAAAAAAAdAYAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABzBgAAAAAAAHMGAAAAAAAAAAAAAAAA8L8"
				],
				[
					507,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAHQGAAAAAAAAdgYAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB0BgAAAAAAAHQGAAAAAAAAAAAAAAAA8L8"
				],
				[
					508,
					1,
					"right_delete",
					null,
					"AQAAAHUGAAAAAAAAdQYAAAAAAAABAAAAfQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB1BgAAAAAAAHUGAAAAAAAAAAAAAAAA8L8"
				],
				[
					511,
					1,
					"insert",
					{
						"characters": "\n}"
					},
					"BQAAACwHAAAAAAAALQcAAAAAAAAAAAAALQcAAAAAAAAvBwAAAAAAAAAAAAAvBwAAAAAAADAHAAAAAAAAAAAAAC0HAAAAAAAALQcAAAAAAAACAAAAICAtBwAAAAAAAC0HAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAsBwAAAAAAACwHAAAAAAAA////////738"
				],
				[
					515,
					1,
					"revert",
					null,
					"",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADTBgAAAAAAANMGAAAAAAAAAAAAAAAAIkA"
				],
				[
					590,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAIkPAAAAAAAAig8AAAAAAAAAAAAAig8AAAAAAACMDwAAAAAAAAAAAACMDwAAAAAAAI0PAAAAAAAAAAAAAI0PAAAAAAAAjw8AAAAAAAAAAAAAig8AAAAAAACKDwAAAAAAAAIAAAAgIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACJDwAAAAAAAIkPAAAAAAAAAAAAAAAA8L8"
				],
				[
					605,
					2,
					"left_delete",
					null,
					"AgAAAIsPAAAAAAAAiw8AAAAAAAACAAAAICCKDwAAAAAAAIoPAAAAAAAAAQAAAAo",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACNDwAAAAAAAI0PAAAAAAAAAAAAAAAA8L8"
				],
				[
					613,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAANEPAAAAAAAA0g8AAAAAAAAAAAAA0g8AAAAAAADUDwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADRDwAAAAAAANEPAAAAAAAAAAAAAAAAMkA"
				],
				[
					667,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABdMgAAIyEvdXNyL2Jpbi9lbnYgcWpzbQppbXBvcnQgeyBCdXR0b24sIFBhbmVsIH0gZnJvbSAnLi9jb21wb25lbnRzLmpzJzsKaW1wb3J0IHsgRGVidWdnZXJEaXNwYXRjaGVyLCBUcml2aWFsVG9rZW5pemVyIH0gZnJvbSAnLi9kZWJ1Z2dlci5qcyc7CmltcG9ydCB7IFJlY29ubmVjdGluZ1dlYlNvY2tldCwgV2ViU29ja2V0VVJMIH0gZnJvbSAnLi9saWIvYXN5bmMvd2Vic29ja2V0LmpzJzsKaW1wb3J0IHsgY2xhc3NOYW1lcyB9IGZyb20gJy4vbGliL2NsYXNzTmFtZXMuanMnOwppbXBvcnQgeyBFbGVtZW50LCBSR0JBIH0gZnJvbSAnLi9saWIvZG9tLmpzJzsKaW1wb3J0IHsgRnJhZ21lbnQsIGgsIHJlbmRlciwgdG9DaGlsZEFycmF5IH0gZnJvbSAnLi9saWIvZG9tL3ByZWFjdENvbXBvbmVudC5qcyc7CmltcG9ydCB7IHVzZUZldGNoLCB1c2VUcmtsIH0gZnJvbSAnLi9saWIvaG9va3MuanMnOwppbXBvcnQgeyBKU0xleGVyIH0gZnJvbSAnLi9saWIvanNsZXhlci5qcyc7CmltcG9ydCB7IGRlZmluZSwgd2Vha0RlZmluZSwgbWVtb2l6ZSwgcmFuZCB9IGZyb20gJy4vbGliL21pc2MuanMnOwppbXBvcnQgeyB0cmtsIH0gZnJvbSAnLi9saWIvdHJrbC5qcyc7CmltcG9ydCB7IE1lc3NhZ2VSZWNlaXZlciwgTWVzc2FnZVRyYW5zbWl0dGVyLCBNZXNzYWdlVHJhbnNjZWl2ZXIsIHBhcnNlVVJMLCBjb2RlY3MsIFJQQ0FwaSwgUlBDUHJveHksIFJQQ09iamVjdCwgUlBDRmFjdG9yeSwgQ29ubmVjdGlvbiwgUlBDX1BBUlNFX0VSUk9SLCBSUENfSU5WQUxJRF9SRVFVRVNULCBSUENfTUVUSE9EX05PVF9GT1VORCwgUlBDX0lOVkFMSURfUEFSQU1TLCBSUENfSU5URVJOQUxfRVJST1IsIFJQQ19TRVJWRVJfRVJST1JfQkFTRSwgRmFjdG9yeUVuZHBvaW50LCBSUENTZXJ2ZXIsIFJQQ0NsaWVudCwgRmFjdG9yeUNsaWVudCwgUlBDU29ja2V0LCBHZXRQcm9wZXJ0aWVzLCBHZXRLZXlzLCBTZXJpYWxpemVWYWx1ZSwgRGVzZXJpYWxpemVTeW1ib2xzLCBEZXNlcmlhbGl6ZVZhbHVlLCBSUENDb25uZWN0LCBSUENMaXN0ZW4gfSBmcm9tICcuL3F1aWNranMvcWpzLW5ldC9qcy9ycGMuanMnOwoKbGV0IGN3ZCA9ICcuJzsKbGV0IHJlc3BvbnNlcyA9IHt9OwpsZXQgY3VycmVudFNvdXJjZSA9IHRya2wobnVsbCk7CmxldCBjdXJyZW50TGluZSA9IHRya2woLTEpOwpsZXQgdXJsOwpsZXQgc2VxID0gMCwKICBudW1MaW5lcyA9IHRya2woMCk7Cgp3ZWFrRGVmaW5lKFdlYlNvY2tldC5wcm90b3R5cGUsIHsKICBzZW5kTWVzc2FnZShtc2cpIHsKICAgIHJldHVybiB0aGlzLnNlbmQoSlNPTi5zdHJpbmdpZnkobXNnKSk7CiAgfQp9KTsKCmdsb2JhbFRoaXMucHJvY2VzcyA9IHsgZW52OiB7IERFQlVHOiB0cnVlIH0gfTsKCmN1cnJlbnRTb3VyY2UuaWQgPSAnY3VycmVudFNvdXJjZSc7CmN1cnJlbnRMaW5lLmlkID0gJ2N1cnJlbnRMaW5lJzsKCmN1cnJlbnRTb3VyY2Uuc3Vic2NyaWJlKHNvdXJjZSA9PiBjb25zb2xlLmxvZygnY3VycmVudFNvdXJjZSBzZXQgdG8nLCBzb3VyY2UpKTsKY3VycmVudExpbmUuc3Vic2NyaWJlKGxpbmUgPT4gY29uc29sZS5sb2coJ2N1cnJlbnRMaW5lIHNldCB0bycsIGxpbmUpKTsKY3VycmVudExpbmUuc3Vic2NyaWJlKGxpbmUgPT4gewogIGxldCBlOwoKICBpZigoZSA9IEVsZW1lbnQuZmluZCgnbWFpbicpKSkgewogICAgY29uc3QgbnVtTGluZXMgPSBNYXRoLmZsb29yKGUub2Zmc2V0SGVpZ2h0IC8gRWxlbWVudC5maW5kKCcuc291cmNlID4gcHJlJykub2Zmc2V0SGVpZ2h0KTsKICAgIGxldCBwb3MgPSBNYXRoLm1heCgwLCBsaW5lIC0gKG51bUxpbmVzID4+PiAxKSk7CiAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IGAjbGluZS0ke3Bvc31gOwogIH0KfSk7Cgpjb25zdCBkb1JlbmRlciA9IG1lbW9pemUoUmVuZGVyVUkpOwoKd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBlID0+IHsKICB1cmwgPSBuZXcgVVJMKGRvY3VtZW50LmxvY2F0aW9uLmhyZWYpOwoKICBsZXQgc29ja2V0VVJMID0gbmV3IFVSTCgnd3MnLCB1cmwpOwogIHNvY2tldFVSTC5wcm90b2NvbCA9IHNvY2tldFVSTC5wcm90b2NvbC5yZXBsYWNlKCdodHRwJywgJ3dzJyk7CiAgY29uc29sZS5sb2coJ3NvY2tldFVSTCcsIHNvY2tldFVSTCk7CgogIChhc3luYyAoKSA9PiB7CiAgICBhd2FpdCBDcmVhdGVTb2NrZXQoc29ja2V0VVJMKTsKICAgIGNvbnNvbGUubG9nKGBMb2FkZWRgLCB7IHNvY2tldFVSTCwgd3MgfSk7CiAgfSkoKTsKfSk7CgpnbG9iYWxUaGlzLmFkZEV2ZW50TGlzdGVuZXIoJ2tleXByZXNzJywgZSA9PiB7CiAgY29uc3QgaGFuZGxlciA9IHsKICAgIEtleU46IE5leHQsCiAgICBLZXlJOiBTdGVwSW4sCiAgICBLZXlPOiBTdGVwT3V0LAogICAgS2V5QzogQ29udGludWUsCiAgICBLZXlQOiBQYXVzZQogIH1bZS5jb2RlXTsKICAvL2NvbnNvbGUubG9nKCdrZXlwcmVzcycsIGUsIGhhbmRsZXIpOwoKICBpZihoYW5kbGVyKSBoYW5kbGVyKCk7Cn0pOwoKLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgogKiBDb21wb25lbnRzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqCiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCmNvbnN0IFNvdXJjZUxpbmUgPSAoeyBsaW5lbm8sIHRleHQsIGFjdGl2ZSwgY2hpbGRyZW4gfSkgPT4gewogIHJldHVybiBoKEZyYWdtZW50LCB7fSwgWwogICAgaCgnYScsIHsgbmFtZTogYGxpbmUtJHtsaW5lbm8udHJpbSgpfWAgfSwgW10pLAogICAgaCgKICAgICAgJ3ByZScsCiAgICAgIHsKICAgICAgICBjbGFzczogY2xhc3NOYW1lcygndGV4dCcsIGFjdGl2ZSAmJiAnYWN0aXZlJykKICAgICAgICAvL2lubmVySFRNTDogYCR7bGluZW5vfSBgICsgdGV4dAogICAgICB9LAogICAgICB0b0NoaWxkQXJyYXkoW2goJ3NwYW4nLCB7IGNsYXNzOiBjbGFzc05hbWVzKCdsaW5lbm8nLCBhY3RpdmUgJiYgJ2FjdGl2ZScsIFsnZXZlbicsICdvZGQnXVtsaW5lbm8gJSAyXSkgfSwgW2Ake2xpbmVub30gYF0pLCAuLi5jaGlsZHJlbl0pCiAgICApCiAgXSk7Cn07Cgpjb25zdCBTb3VyY2VUZXh0ID0gKHsgdGV4dCwgZmlsZW5hbWUgfSkgPT4gewogIGNvbnN0IGFjdGl2ZUxpbmUgPSB1c2VUcmtsKGN1cnJlbnRMaW5lKTsKICBjb25zdCBsaW5lcyA9IHRleHQuc3BsaXQoL1xuL2cpOwogIGNvbnN0IG51bURpZ2l0cyA9IG4gPT4gTWF0aC5mbG9vcihNYXRoLmxvZzEwKG4pICsgMSk7CiAgY29uc3QgbiA9IG51bURpZ2l0cyhsaW5lcy5sZW5ndGgpICsgMjsKICByZXR1cm4gaCgKICAgICdkaXYnLAogICAgeyBjbGFzczogJ3NvdXJjZScsICdkYXRhLW5hbWUnOiBmaWxlbmFtZSB9LAogICAgbGluZXMubWFwKChsaW5lLCBpKSA9PgogICAgICBoKAogICAgICAgIFNvdXJjZUxpbmUsCiAgICAgICAgewogICAgICAgICAgbGluZW5vOiAoaSArIDEgKyAnJykucGFkU3RhcnQobiksCiAgICAgICAgICBhY3RpdmU6IGFjdGl2ZUxpbmUgPT0gaSArIDEKICAgICAgICAgIC8vdGV4dDogVHJpdmlhbFRva2VuaXplcihsaW5lKS5yZWR1Y2UoKGFjYywgW3R5cGUsIHRva2VuXSkgPT4gYWNjICsgYDxzcGFuIGNsYXNzPSIke3R5cGV9Ij4ke3Rva2VufTwvc3Bhbj5gLCAnJykKICAgICAgICB9LAogICAgICAgIFRyaXZpYWxUb2tlbml6ZXIobGluZSkubWFwKChbdHlwZSwgdG9rZW5dKSA9PiBoKCdzcGFuJywgeyBjbGFzczogdHlwZSB9LCBbdG9rZW5dKSkKICAgICAgKQogICAgKQogICk7Cn07Cgpjb25zdCBTb3VyY2VGaWxlID0gcHJvcHMgPT4gewogIGNvbnNvbGUubG9nKCdwcm9wcy5maWxlJywgY3VycmVudFNvdXJjZSgpKTsKICBjb25zdCBmaWxlID0gdXNlVHJrbChjdXJyZW50U291cmNlKTsKCiAgY29uc29sZS5sb2coJ2ZpbGUnLCB7IGN3ZCwgZmlsZSB9KTsKCiAgY29uc3QgZmlsZW5hbWUgPSBmaWxlOyAvKj8gcGF0aC5yZWxhdGl2ZShjd2QsIGZpbGUsIGN3ZCkgOiBudWxsKi8KICAKICBsZXQgdGV4dCA9CiAgICAoZmlsZSAmJgogICAgICAhL148Lio+JC8udGVzdChmaWxlKSAmJgogICAgICB1c2VGZXRjaChmaWxlbmFtZSwgcmVzcCA9PiB7CiAgICAgICAgY29uc29sZS5sb2coJ0ZldGNoJywgcmVzcC5zdGF0dXMsIG5ldyBVUkwoZmlsZW5hbWUsIGRvY3VtZW50LmxvY2F0aW9uLmhyZWYpKTsKICAgICAgICByZXR1cm4gcmVzcC50ZXh0KCk7CiAgICAgIH0pKSB8fAogICAgJyc7CgogIHJldHVybiAvKmgoJ2RpdicsIHsgY2xhc3M6ICdjb250YWluZXInIH0sIFsqLyBoKEZyYWdtZW50LCB7fSwgWwogICAgLy9oKCdkaXYnLCB7fSwgW10pLAogICAgaCgnZGl2JywgeyBjbGFzczogJ2hlYWRlcicgfSwgW2ZpbGVuYW1lXSksCiAgICBoKFNvdXJjZVRleHQsIHsgdGV4dCwgZmlsZW5hbWUgfSkKICBdKTsKfTsKCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKICogRW5kIG9mIENvbXBvbmVudHMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKgogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwoKYXN5bmMgZnVuY3Rpb24gTG9hZFNvdXJjZShmaWxlbmFtZSkgewogIHRyeSB7CiAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChmaWxlbmFtZSk7CiAgICByZXR1cm4gYXdhaXQgcmVzcG9uc2UudGV4dCgpOwogIH0gY2F0Y2goZSkge30KfQoKZnVuY3Rpb24gU3RhcnQoYXJncywgYWRkcmVzcykgewogIGlmKCFhZGRyZXNzKSB7CiAgICBnbG9iYWxUaGlzLmFkZHJlc3MgPSBhZGRyZXNzID0gJzEyNy4wLjAuMTonICsgKE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDQwOTYpICsgODE5Mik7CiAgfQoKICByZXR1cm4gSW5pdGlhdGUoJ3N0YXJ0JywgYWRkcmVzcywgZmFsc2UsIGFyZ3MpOwp9CgpmdW5jdGlvbiBDb25uZWN0KGFkZHJlc3MgPSBnbG9iYWxUaGlzLmFkZHJlc3MpIHsKICByZXR1cm4gSW5pdGlhdGUoJ2Nvbm5lY3QnLCBhZGRyZXNzLCB0cnVlKTsKfQoKZnVuY3Rpb24gSW5pdGlhdGUoY29tbWFuZCwgYWRkcmVzcywgY29ubmVjdCA9IGZhbHNlLCBhcmdzKSB7CiAgYWRkcmVzcyA/Pz0gYCR7dXJsLnNlYXJjaFBhcmFtcy5nZXQoJ2FkZHJlc3MnKSA/PyAnMTI3LjAuMC4xJ306JHsoZ2xvYmFsVGhpcy5wb3J0ID8/PSB1cmwuc2VhcmNoUGFyYW1zLmdldCgncG9ydCcpID8/IChNYXRoLmZsb29yKHJhbmQoKSkgJSA5MDApICsgOTAwMCl9YDsKICBjb25zb2xlLmxvZygnSW5pdGlhdGUnLCB7IGNvbW1hbmQsIGFkZHJlc3MsIGNvbm5lY3QsIGFyZ3MgfSk7CiAgcmV0dXJuIHdzLnNlbmQoSlNPTi5zdHJpbmdpZnkoeyBjb21tYW5kLCBjb25uZWN0LCBhZGRyZXNzLCBhcmdzIH0pKTsKfQoKY29uc3QgdG9rZW5Db2xvcnMgPSB7CiAgY29tbWVudDogbmV3IFJHQkEoMCwgMjU1LCAwKSwKICByZWdleHBMaXRlcmFsOiBuZXcgUkdCQSgyNTUsIDAsIDI1NSksCiAgdGVtcGxhdGVMaXRlcmFsOiBuZXcgUkdCQSgwLCAyNTUsIDI1NSksCiAgcHVuY3R1YXRvcjogbmV3IFJHQkEoMCwgMjU1LCAyNTUpLAogIG51bWVyaWNMaXRlcmFsOiBuZXcgUkdCQSgwLCAyNTUsIDI1NSksCiAgc3RyaW5nOiBuZXcgUkdCQSgwLCAyNTUsIDI1NSksCiAgYm9vbGVhbkxpdGVyYWw6IG5ldyBSR0JBKDI1NSwgMjU1LCAwKSwKICBudWxsTGl0ZXJhbDogbmV3IFJHQkEoMjU1LCAwLCAyNTUpLAogIGtleXdvcmQ6IG5ldyBSR0JBKDI1NSwgMCwgMCksCiAgaWRlbnRpZmllcjogbmV3IFJHQkEoMjU1LCAyNTUsIDApLAogIHByaXZhdGVJZGVudGlmaWVyOiBuZXcgUkdCQSgyNTUsIDI1NSwgMCksCiAgd2hpdGVzcGFjZTogbmV3IFJHQkEoMjU1LCAyNTUsIDI1NSkKfTsKCmZ1bmN0aW9uKiBUb2tlbml6ZUpTKGRhdGEsIGZpbGVuYW1lKSB7CiAgbGV0IGxleCA9IG5ldyBKU0xleGVyKCk7CiAgbGV4LnNldElucHV0KGRhdGEsIGZpbGVuYW1lKTsKCiAgbGV0IHsgdG9rZW5zIH0gPSBsZXg7CiAgbGV0IGNvbG9ycyA9IE9iamVjdC5lbnRyaWVzKHRva2VuQ29sb3JzKS5yZWR1Y2UoKGFjYywgW3R5cGUsIGNdKSA9PiAoeyAuLi5hY2MsIFt0b2tlbnMuaW5kZXhPZih0eXBlKSArIDFdOiBjLmhleCgpIH0pLCB7fSk7CiAgbGV0IHByZXYgPSB7fTsKICBsZXQgb3V0ID0gW107CiAgZm9yKGxldCB7IGlkLCBsZXhlbWUsIGxpbmUgfSBvZiBsZXgpIHsKICAgIGNvbnN0IHR5cGUgPSB0b2tlbnNbaWQgLSAxXTsKICAgIGxldCB7IGxpbmUgfSA9IGxleC5sb2M7CiAgICBsaW5lIC09IGxleGVtZS5zcGxpdCgvXG4vZykubGVuZ3RoIC0gMTsKCiAgICAvL2NvbnNvbGUubG9nKCd0b2snLCB7IGlkLCBsZXhlbWUsIGxpbmUgfSk7CgogICAgaWYocHJldi5saW5lICE9IGxpbmUpIHsKICAgICAgZm9yKGxldCBpID0gcHJldi5saW5lOyBpIDwgbGluZTsgaSsrKSB7CiAgICAgICAgeWllbGQgb3V0OwogICAgICAgIG91dCA9IFtdOwogICAgICB9CiAgICB9CgogICAgZm9yKGxldCBzIG9mIGxleGVtZS5zcGxpdCgvXG4vZykucmVkdWNlKChhY2MsIGwpID0+IHsKICAgICAgaWYobCAhPSAnJykgewogICAgICAgIGlmKGFjYy5sZW5ndGgpIGFjY1thY2MubGVuZ3RoIC0gMV0gKz0gJ1xuJzsKICAgICAgICBhY2MucHVzaChsKTsKICAgICAgfQogICAgICByZXR1cm4gYWNjOwogICAgfSwgW10pKSB7CiAgICAgIG91dC5wdXNoKFt0eXBlLCBzXSk7CiAgICAgIGlmKHMuZW5kc1dpdGgoJ1xuJykpIHsKICAgICAgICB5aWVsZCBvdXQ7CiAgICAgICAgb3V0ID0gW107CiAgICAgICAgbGluZSsrOwogICAgICB9CiAgICB9CgogICAgcHJldi5saW5lID0gbGluZTsKICAgIGxpbmUgPSBsZXgubG9jOwogIH0KICBvdXQgKz0gJzwvcHJlPic7Cn0KCk9iamVjdC5hc3NpZ24oZ2xvYmFsVGhpcywgewogIFN0YXJ0LAogIENvbm5lY3QsCiAgU3RlcEluLAogIFN0ZXBPdXQsCiAgTmV4dCwKICBDb250aW51ZSwKICBQYXVzZSwKICBFdmFsdWF0ZSwKICBTdGFja1RyYWNlLAogIFNlbmRSZXF1ZXN0Cn0pOwpPYmplY3QuYXNzaWduKGdsb2JhbFRoaXMsIHsgY3VycmVudExpbmUsIGN1cnJlbnRTb3VyY2UsIFRva2VuaXplSlMgfSk7Ck9iamVjdC5hc3NpZ24oZ2xvYmFsVGhpcywgeyBDcmVhdGVTb2NrZXQsIFN0YXJ0LCBJbml0aWF0ZSwgTG9hZFNvdXJjZSwgR2V0VmFyaWFibGVzIH0pOwpPYmplY3QuYXNzaWduKGdsb2JhbFRoaXMsIHsKICBXZWJTb2NrZXRVUkwsCiAgcGFyc2VVUkwsCiAgTWVzc2FnZVJlY2VpdmVyLAogIE1lc3NhZ2VUcmFuc21pdHRlciwKICBNZXNzYWdlVHJhbnNjZWl2ZXIsCiAgY29kZWNzLAogIFJQQ0FwaSwKICBSUENQcm94eSwKICBSUENPYmplY3QsCiAgUlBDRmFjdG9yeSwKICBDb25uZWN0aW9uLAogIFJQQ19QQVJTRV9FUlJPUiwKICBSUENfSU5WQUxJRF9SRVFVRVNULAogIFJQQ19NRVRIT0RfTk9UX0ZPVU5ELAogIFJQQ19JTlZBTElEX1BBUkFNUywKICBSUENfSU5URVJOQUxfRVJST1IsCiAgUlBDX1NFUlZFUl9FUlJPUl9CQVNFLAogIEZhY3RvcnlFbmRwb2ludCwKICBSUENTZXJ2ZXIsCiAgUlBDQ2xpZW50LAogIEZhY3RvcnlDbGllbnQsCiAgUlBDU29ja2V0LAogIEdldFByb3BlcnRpZXMsCiAgR2V0S2V5cywKICBTZXJpYWxpemVWYWx1ZSwKICBEZXNlcmlhbGl6ZVN5bWJvbHMsCiAgRGVzZXJpYWxpemVWYWx1ZSwKICBSUENDb25uZWN0LAogIFJQQ0xpc3Rlbgp9KTsKCmFzeW5jIGZ1bmN0aW9uIENyZWF0ZVNvY2tldChlbmRwb2ludCkgewogIGxldCB1cmwgPSBXZWJTb2NrZXRVUkwoJy93cycpOwogIGxldCByd3MgPSAoZ2xvYmFsVGhpcy5yd3MgPSBuZXcgUmVjb25uZWN0aW5nV2ViU29ja2V0KHVybCwgJ3dzJywgewogICAgb25PcGVuKCkgewogICAgICBjb25zb2xlLmxvZygnUmVjb25uZWN0aW5nV2ViU29ja2V0IGNvbm5lY3RlZCEnKTsKICAgIH0KICB9KSk7CgogIGRlZmluZShnbG9iYWxUaGlzLCB7CiAgICBnZXQgd3MoKSB7CiAgICAgIHJldHVybiByd3Muc29ja2V0OwogICAgfQogIH0pOwoKICAvL2xldCB3cyA9IChnbG9iYWxUaGlzLndzID0gcndzLndzLypuZXcgV2ViU29ja2V0Q2xpZW50KCkqLyk7CgogIGNvbnNvbGUubG9nKCd3cycsIHdzKTsKICAvLwogIGF3YWl0IHJ3cy5jb25uZWN0KGVuZHBvaW50KTsKCiAgLyogKGFzeW5jIGZ1bmN0aW9uIFJlYWRTb2NrZXQoKSB7CiAgICBmb3IgYXdhaXQobGV0IG1zZyBvZiB3cykgewogICAgICBsZXQgZGF0YTsKICAgICAgdHJ5IHsKICAgICAgICBkYXRhID0gSlNPTi5wYXJzZShtc2cuZGF0YSk7CiAgICAgIH0gY2F0Y2goZSkgewogICAgICAgIGNvbnNvbGUubG9nKCdXUyBFUlJPUiBwYXJzaW5nJywgbXNnLmRhdGEpOwogICAgICB9CiAgICAgIGdsb2JhbFRoaXMucmVzcG9uc2UgPSBkYXRhOwogICAgICBpZihkYXRhKSB7CiAgICAgICAgY29uc29sZS5sb2coJ3dzIHJlY2VpdmVkICcsIGRhdGEpOwogICAgICAgIGNvbnN0IHsgcmVzcG9uc2UsIHJlcXVlc3Rfc2VxIH0gPSBkYXRhOwogICAgICAgIGlmKHJlc3BvbnNlKSB7CiAgICAgICAgICBjb25zdCB7IGNvbW1hbmQgfSA9IHJlc3BvbnNlOwogICAgICAgICAgaWYoWydzdGFydCcsICdjb25uZWN0J10uaW5kZXhPZihjb21tYW5kKSA+PSAwKSB7CiAgICAgICAgICAgIGN3ZCA9IHJlc3BvbnNlLmN3ZDsKICAgICAgICAgICAgY29uc29sZS5sb2coJ2NvbW1hbmQ6JywgY29tbWFuZCk7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdyZXNwb25zZTonLCByZXNwb25zZSk7CiAgICAgICAgICAgIGlmKHJlc3BvbnNlLmFyZ3NbMF0pIHsKICAgICAgICAgICAgICBjdXJyZW50U291cmNlKHJlc3BvbnNlLmFyZ3NbMF0pOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIFVwZGF0ZVBvc2l0aW9uKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgUmVuZGVyVUkoKTsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CiAgICAgICAgICBpZihjb21tYW5kID09ICdzdGFydCcpIHsKICAgICAgICAgICAgY3dkID0gcmVzcG9uc2UuY3dkOwogICAgICAgICAgICBjb25zb2xlLmxvZygnc3RhcnQnLCByZXNwb25zZSk7CiAgICAgICAgICAgIFJlbmRlclVJKHJlc3BvbnNlLmFyZ3NbMF0pOwogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYocmVzcG9uc2VzW3JlcXVlc3Rfc2VxXSkgcmVzcG9uc2VzW3JlcXVlc3Rfc2VxXShkYXRhKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBjb25zb2xlLmxvZygnV1MnLCB3cyk7CiAgICAgIH0KICAgICAgaWYoWydlbmQnLCAnZXJyb3InXS5pbmRleE9mKGRhdGEudHlwZSkgPj0gMCkgewogICAgICAgIGRvY3VtZW50LmJvZHkuaW5uZXJIVE1MID0gJyc7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgIH0KICB9KSgpOyovCgogIGxldCBkaXNwYXRjaCA9IChnbG9iYWxUaGlzLmRpc3BhdGNoID0gbmV3IERlYnVnZ2VyRGlzcGF0Y2hlcih7CiAgICBhc3luYyBwcm9jZXNzKGNhbGxiYWNrKSB7CiAgICAgIGZvciBhd2FpdChsZXQgbXNnIG9mIHJ3cykgewogICAgICAgIGxldCBkYXRhID0gSlNPTi5wYXJzZShtc2cpOwoKICAgICAgICBwcm9jZXNzLmVudi5ERUJVRyAmJiBjb25zb2xlLmxvZygnV1MgcmVjZWl2ZWQ6JywgZGF0YSk7CgogICAgICAgIGNhbGxiYWNrKGRhdGEpOwogICAgICB9CiAgICB9CiAgfSkpOwoKICByZXNwb25zZXMgPSBnbG9iYWxUaGlzLnJlc3BvbnNlcyA9IGRpc3BhdGNoLnJlc3BvbnNlczsKCiAgd3Muc2VuZE1lc3NhZ2UgPSBmdW5jdGlvbihtc2cpIHsKICAgIHByb2Nlc3MuZW52LkRFQlVHICYmIGNvbnNvbGUubG9nKCdXUyBzZW5kaW5nOicsIG1zZyk7CiAgICByZXR1cm4gdGhpcy5zZW5kKEpTT04uc3RyaW5naWZ5KG1zZykpOwogIH07CiAgLyogaWYodXJsLnNlYXJjaFBhcmFtcy5oYXMoJ3BvcnQnKSkgYXdhaXQgQ29ubmVjdCgpOwogIGVsc2UgYXdhaXQgU3RhcnQoW3VybC5zZWFyY2hQYXJhbXMuZ2V0KCdzY3JpcHQnKSA/PyAncXVpY2tqcy9xanMtbW9kdWxlcy90ZXN0cy90ZXN0X2RvbS5qcyddKTsgLy8gJ3Rlc3QtdmlkZW8uanMnLCAnbmlnaHR3YXRjaC5tcDQnXSk7CiovCiAgcmV0dXJuIHJ3czsKfQoKZnVuY3Rpb24gR2V0VmFyaWFibGVzKHJlZiA9IDApIHsKICByZXR1cm4gU2VuZFJlcXVlc3QoJ3ZhcmlhYmxlcycsIHsgdmFyaWFibGVzUmVmZXJlbmNlOiByZWYgfSk7Cn0KCmFzeW5jIGZ1bmN0aW9uIFVwZGF0ZVBvc2l0aW9uKCkgewogIGNvbnN0IHN0YWNrID0gKGdsb2JhbFRoaXMuc3RhY2sgPSBhd2FpdCBTdGFja1RyYWNlKCkpOwogIGNvbnNvbGUubG9nKCdzdGFjaycsIHN0YWNrKTsKCiAgY29uc3QgeyBmaWxlbmFtZSwgbGluZSwgbmFtZSB9ID0gc3RhY2tbMF07CgogIGN1cnJlbnRTb3VyY2UoZmlsZW5hbWUpOwogIC8vICBSZW5kZXJVSShmaWxlbmFtZSk7CiAgY3VycmVudExpbmUobGluZSk7CgogIFJlbmRlclVJKCk7CgogIC8vIGRvUmVuZGVyKGN1cnJlbnRTb3VyY2UpOwoKICAvL3dpbmRvdy5sb2NhdGlvbi5oYXNoID0gYCNsaW5lLSR7bGluZX1gOwp9Cgphc3luYyBmdW5jdGlvbiBTdGVwSW4oKSB7CiAgYXdhaXQgU2VuZFJlcXVlc3QoJ3N0ZXBJbicpOwogIGF3YWl0IFVwZGF0ZVBvc2l0aW9uKCk7Cn0KCmFzeW5jIGZ1bmN0aW9uIFN0ZXBPdXQoKSB7CiAgYXdhaXQgU2VuZFJlcXVlc3QoJ3N0ZXBPdXQnKTsKICBhd2FpdCBVcGRhdGVQb3NpdGlvbigpOwp9Cgphc3luYyBmdW5jdGlvbiBOZXh0KCkgewogIGF3YWl0IFNlbmRSZXF1ZXN0KCduZXh0Jyk7CiAgYXdhaXQgVXBkYXRlUG9zaXRpb24oKTsKfQoKYXN5bmMgZnVuY3Rpb24gQ29udGludWUoKSB7CiAgcmV0dXJuIFNlbmRSZXF1ZXN0KCdjb250aW51ZScpOwp9Cgphc3luYyBmdW5jdGlvbiBQYXVzZSgpIHsKICBhd2FpdCBTZW5kUmVxdWVzdCgncGF1c2UnKTsKICBhd2FpdCBVcGRhdGVQb3NpdGlvbigpOwp9Cgphc3luYyBmdW5jdGlvbiBFdmFsdWF0ZShleHByZXNzaW9uKSB7CiAgcmV0dXJuIFNlbmRSZXF1ZXN0KCdldmFsdWF0ZScsIHsgZXhwcmVzc2lvbiB9KTsKfQoKYXN5bmMgZnVuY3Rpb24gU3RhY2tUcmFjZSgpIHsKICBsZXQgeyBib2R5IH0gPSBhd2FpdCBTZW5kUmVxdWVzdCgnc3RhY2tUcmFjZScpOwogIHJldHVybiBib2R5Owp9CgovKgogIHsKICAgICJ0eXBlIjogImJyZWFrcG9pbnRzIiwKICAgICJicmVha3BvaW50cyI6IHsKICAgICAgInBhdGgiOiAibGliL2VjbWFzY3JpcHQvcGFyc2VyMi5qcyIsCiAgICAgICJicmVha3BvaW50cyI6IFsgeyAibGluZSI6IDQ3MCwgImNvbHVtbiI6IDAgfSwgeyAibGluZSI6IDIxNTEsICJjb2x1bW4iOiAwIH0sIHsgImxpbmUiOiAyNDAxLCAiY29sdW1uIjogMCB9IF0KICAgIH0KICB9CiovCgpmdW5jdGlvbiBTZW5kUmVxdWVzdChjb21tYW5kLCBhcmdzID0ge30pIHsKICBjb25zdCByZXF1ZXN0X3NlcSA9ICsrc2VxOwoKICB3cy5zZW5kTWVzc2FnZSh7IHR5cGU6ICdyZXF1ZXN0JywgcmVxdWVzdDogeyByZXF1ZXN0X3NlcSwgY29tbWFuZCwgYXJncyB9IH0pOwoKICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gKHJlc3BvbnNlc1tyZXF1ZXN0X3NlcV0gPSByZXNvbHZlKSk7Cn0KCi8qY29uc3QgQnV0dG9uID0gKHtpbWFnZX0pID0+IHsKY29uc3QgcmVmID0gdXNlQ2xpY2soZSA9PiB7CiAgY29uc29sZS5sb2coJ2NsaWNrISEhIScpOwp9KTsKIHJldHVybiAgaCgnYnV0dG9uJywgeyByZWYsIGNsYXNzOiAnYnV0dG9uJyB9LCBoKCdpbWcnLCB7IHNyYzogaW1hZ2UgfSkpOwp9Ki8KLypjb25zdCBCdXR0b25CYXI9ICAoe2NoaWxkcmVufSkgPT4gCmgoJ2RpdicsIHtjbGFzczogJ2J1dHRvbi1iYXInIH0sIGNoaWxkcmVuKTsqLwoKZnVuY3Rpb24gUmVuZGVyVUkoKSB7CiAgY29uc29sZS5sb2coJ1JlbmRlclVJJyk7CiAgLyogaWYoY3VycmVudFNvdXJjZSgpICE9IGZpbGUpIAogICAgY3VycmVudFNvdXJjZShmaWxlKTsqLwoKICBjb25zdCBjb21wb25lbnQgPSBoKEZyYWdtZW50LCB7fSwgWwogICAgaChQYW5lbCwgeyBjbGFzc05hbWU6IGNsYXNzTmFtZXMoJ2J1dHRvbnMnLCAnbm8tc2VsZWN0JyksIHRhZzogJ2hlYWRlcicgfSwgWwogICAgICBoKEJ1dHRvbiwgeyBpbWFnZTogJ3N0YXRpYy9zdmcvY29udGludWUuc3ZnJywgZm46IENvbnRpbnVlIH0pLAogICAgICBoKEJ1dHRvbiwgeyBpbWFnZTogJ3N0YXRpYy9zdmcvcGF1c2Uuc3ZnJywgZm46IFBhdXNlIH0pLAogICAgICAvL2goQnV0dG9uLCB7aW1hZ2U6ICdzdGF0aWMvc3ZnL3N0YXJ0LnN2Zyd9KSwKICAgICAgaChCdXR0b24sIHsKICAgICAgICBpbWFnZTogJ3N0YXRpYy9zdmcvc3RlcC1pbnRvLnN2ZycsCiAgICAgICAgZm46IFN0ZXBJbgogICAgICB9KSwKICAgICAgaChCdXR0b24sIHsKICAgICAgICBpbWFnZTogJ3N0YXRpYy9zdmcvc3RlcC1vdXQuc3ZnJywKICAgICAgICBmbjogU3RlcE91dAogICAgICB9KSwKICAgICAgaChCdXR0b24sIHsgaW1hZ2U6ICdzdGF0aWMvc3ZnL3N0ZXAtb3Zlci5zdmcnLCBmbjogTmV4dCB9KQogICAgICAvLyAgIGgoQnV0dG9uLCB7IGltYWdlOiAnc3RhdGljL3N2Zy9yZXN0YXJ0LnN2ZycgfSksCiAgICAgIC8vaChCdXR0b24sIHtpbWFnZTogJ3N0YXRpYy9zdmcvc3RvcC5zdmcnLCBlbmFibGU6IHRya2woZmFsc2UpfSksCiAgICBdKSwKICAgIGgoJ21haW4nLCB7fSwgaChTb3VyY2VGaWxlLCB7IGZpbGU6IGN1cnJlbnRTb3VyY2UgfSkpLAogICAgaCgnZm9vdGVyJywge30sIFtdKQogIF0pOwogIGNvbnN0IHsgYm9keSB9ID0gZG9jdW1lbnQ7CiAgcmVuZGVyKGNvbXBvbmVudCwgYm9keSk7CiAgY29uc29sZS5sb2coJ3JlbmRlcmVkJywgY29tcG9uZW50KTsKfQoAAAAAAAAAAFsyAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABxEgAAAAAAAHESAAAAAAAAAAAAAAAA8L8"
				],
				[
					723,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAABcgAAAAAAAAGCAAAAAAAAAAAAAAGCAAAAAAAAAYIAAAAAAAAOYEAAAKICAvKiAoYXN5bmMgZnVuY3Rpb24gUmVhZFNvY2tldCgpIHsKICAgIGZvciBhd2FpdChsZXQgbXNnIG9mIHdzKSB7CiAgICAgIGxldCBkYXRhOwogICAgICB0cnkgewogICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKG1zZy5kYXRhKTsKICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgY29uc29sZS5sb2coJ1dTIEVSUk9SIHBhcnNpbmcnLCBtc2cuZGF0YSk7CiAgICAgIH0KICAgICAgZ2xvYmFsVGhpcy5yZXNwb25zZSA9IGRhdGE7CiAgICAgIGlmKGRhdGEpIHsKICAgICAgICBjb25zb2xlLmxvZygnd3MgcmVjZWl2ZWQgJywgZGF0YSk7CiAgICAgICAgY29uc3QgeyByZXNwb25zZSwgcmVxdWVzdF9zZXEgfSA9IGRhdGE7CiAgICAgICAgaWYocmVzcG9uc2UpIHsKICAgICAgICAgIGNvbnN0IHsgY29tbWFuZCB9ID0gcmVzcG9uc2U7CiAgICAgICAgICBpZihbJ3N0YXJ0JywgJ2Nvbm5lY3QnXS5pbmRleE9mKGNvbW1hbmQpID49IDApIHsKICAgICAgICAgICAgY3dkID0gcmVzcG9uc2UuY3dkOwogICAgICAgICAgICBjb25zb2xlLmxvZygnY29tbWFuZDonLCBjb21tYW5kKTsKICAgICAgICAgICAgY29uc29sZS5sb2coJ3Jlc3BvbnNlOicsIHJlc3BvbnNlKTsKICAgICAgICAgICAgaWYocmVzcG9uc2UuYXJnc1swXSkgewogICAgICAgICAgICAgIGN1cnJlbnRTb3VyY2UocmVzcG9uc2UuYXJnc1swXSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgVXBkYXRlUG9zaXRpb24oKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBSZW5kZXJVSSgpOwogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KICAgICAgICAgIGlmKGNvbW1hbmQgPT0gJ3N0YXJ0JykgewogICAgICAgICAgICBjd2QgPSByZXNwb25zZS5jd2Q7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdzdGFydCcsIHJlc3BvbnNlKTsKICAgICAgICAgICAgUmVuZGVyVUkocmVzcG9uc2UuYXJnc1swXSk7CiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZihyZXNwb25zZXNbcmVxdWVzdF9zZXFdKSByZXNwb25zZXNbcmVxdWVzdF9zZXFdKGRhdGEpOwogICAgICB9IGVsc2UgewogICAgICAgIGNvbnNvbGUubG9nKCdXUycsIHdzKTsKICAgICAgfQogICAgICBpZihbJ2VuZCcsICdlcnJvciddLmluZGV4T2YoZGF0YS50eXBlKSA+PSAwKSB7CiAgICAgICAgZG9jdW1lbnQuYm9keS5pbm5lckhUTUwgPSAnJzsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgfQogIH0pKCk7Ki8",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAXIAAAAAAAAP0kAAAAAAAAAAAAAAAA8L8"
				],
				[
					731,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAPUhAAAAAAAA9iEAAAAAAAAAAAAA9iEAAAAAAAD2IQAAAAAAAMMAAAAKICAvKiBpZih1cmwuc2VhcmNoUGFyYW1zLmhhcygncG9ydCcpKSBhd2FpdCBDb25uZWN0KCk7CiAgZWxzZSBhd2FpdCBTdGFydChbdXJsLnNlYXJjaFBhcmFtcy5nZXQoJ3NjcmlwdCcpID8/ICdxdWlja2pzL3Fqcy1tb2R1bGVzL3Rlc3RzL3Rlc3RfZG9tLmpzJ10pOyAvLyAndGVzdC12aWRlby5qcycsICduaWdodHdhdGNoLm1wNCddKTsKKi8",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC4IgAAAAAAAPUhAAAAAAAAAAAAAAAA8L8"
				],
				[
					732,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAPYhAAAAAAAA9yEAAAAAAAAAAAAA9yEAAAAAAAD5IQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD2IQAAAAAAAPYhAAAAAAAAAAAAAAAA8L8"
				],
				[
					735,
					1,
					"left_delete",
					null,
					"AgAAAHEjAAAAAAAAcSMAAAAAAABLAAAACiAgLy8gZG9SZW5kZXIoY3VycmVudFNvdXJjZSk7CgogIC8vd2luZG93LmxvY2F0aW9uLmhhc2ggPSBgI2xpbmUtJHtsaW5lfWA79yEAAAAAAAD3IQAAAAAAAAIAAAAgIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC8IwAAAAAAAHEjAAAAAAAAAAAAAAAA8L8"
				],
				[
					738,
					2,
					"left_delete",
					null,
					"AgAAAMQlAAAAAAAAxCUAAAAAAADjAAAACi8qCiAgewogICAgInR5cGUiOiAiYnJlYWtwb2ludHMiLAogICAgImJyZWFrcG9pbnRzIjogewogICAgICAicGF0aCI6ICJsaWIvZWNtYXNjcmlwdC9wYXJzZXIyLmpzIiwKICAgICAgImJyZWFrcG9pbnRzIjogWyB7ICJsaW5lIjogNDcwLCAiY29sdW1uIjogMCB9LCB7ICJsaW5lIjogMjE1MSwgImNvbHVtbiI6IDAgfSwgeyAibGluZSI6IDI0MDEsICJjb2x1bW4iOiAwIH0gXQogICAgfQogIH0KKi/DJQAAAAAAAMMlAAAAAAAAAQAAAAo",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADEJQAAAAAAAKcmAAAAAAAAAAAAAAAA8L8"
				],
				[
					741,
					1,
					"left_delete",
					null,
					"AQAAALAmAAAAAAAAsCYAAAAAAAD+AAAACi8qY29uc3QgQnV0dG9uID0gKHtpbWFnZX0pID0+IHsKY29uc3QgcmVmID0gdXNlQ2xpY2soZSA9PiB7CiAgY29uc29sZS5sb2coJ2NsaWNrISEhIScpOwp9KTsKIHJldHVybiAgaCgnYnV0dG9uJywgeyByZWYsIGNsYXNzOiAnYnV0dG9uJyB9LCBoKCdpbWcnLCB7IHNyYzogaW1hZ2UgfSkpOwp9Ki8KLypjb25zdCBCdXR0b25CYXI9ICAoe2NoaWxkcmVufSkgPT4gCmgoJ2RpdicsIHtjbGFzczogJ2J1dHRvbi1iYXInIH0sIGNoaWxkcmVuKTsqLwo",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACwJgAAAAAAAK4nAAAAAAAAAAAAAAAA8L8"
				],
				[
					744,
					1,
					"left_delete",
					null,
					"AQAAAOEmAAAAAAAA4SYAAAAAAAA+AAAACiAgLyogaWYoY3VycmVudFNvdXJjZSgpICE9IGZpbGUpIAogICAgY3VycmVudFNvdXJjZShmaWxlKTsqLwo",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAfJwAAAAAAAOEmAAAAAAAAAAAAAAAA8L8"
				],
				[
					756,
					1,
					"revert",
					null,
					"",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAJKQAAAAAAAAkpAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "test-video.js",
			"settings":
			{
				"buffer_size": 26264,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"right",
				"Browse Mode: Outline (Right)"
			],
			[
				"prettier",
				"JsPrettier: Format Code"
			],
			[
				"prett",
				"JsPrettier: Format Code"
			],
			[
				":q",
				"Coffee: Quick Run Bar"
			],
			[
				"clang",
				"Clang Format: Format Selection"
			],
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"mode",
				"HTML: Encode Special Characters"
			],
			[
				"insert",
				"Snippet: Insert livereload.js script"
			],
			[
				":w",
				":w - Save"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"OUTLIN",
				"Browse Mode: Outline (Right)"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 142.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv",
		"/home/roman/Projects/plot-cv/lib",
		"/home/roman/Projects/plot-cv/lib/build",
		"/home/roman/Projects/plot-cv/ol-layerswitcher"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/property-enumeration.h",
		"/home/roman/Projects/plot-cv/webSocket.js",
		"/home/roman/Projects/plot-cv/debugger.html",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.h",
		"/home/roman/Projects/plot-cv/debuggerprotocol.js",
		"/home/roman/Projects/plot-cv/lib/repeater/repeater.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/qjsm.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-imgui/cmake/BuildGLFW.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/cmake/BuildBrotli.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/cmake/BuildLibwebsockets.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-glfw/cmake/BuildGLFW.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/cmake/BuildMbedTLS.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/cmake/BuildCURL.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-glfw/cmake/BuildGL3W.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-sound/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/plugin-standalone/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/js/rpc.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/brotli/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/cmake/FindLibreSSL.cmake",
		"/home/roman/Projects/plot-cv/test-nanovg.js",
		"/home/roman/Projects/plot-cv/debugger-client.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/js/debugger-client.js",
		"/home/roman/Projects/plot-cv/debugger.js",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.c",
		"/home/roman/Projects/plot-cv/test-alea.js",
		"/home/roman/Projects/plot-cv/test-repeater.js",
		"/home/roman/Projects/plot-cv/debugger-server.js",
		"/home/roman/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/bin/wscli.js",
		"/home/roman/Projects/plot-cv/quickjs.c",
		"/home/roman/Projects/plot-cv/repredator/pre8.png",
		"/home/roman/Projects/plot-cv/repredator/pre7.png",
		"/home/roman/Projects/plot-cv/repredator/pre2.png",
		"/home/roman/Projects/plot-cv/repredator/pre1.png",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/test-rpc.js",
		"/home/roman/Projects/plot-cv/clang-ast.js",
		"/home/roman/Projects/plot-cv/portaudio2.js",
		"/usr/include/portaudio.h",
		"/home/roman/Projects/plot-cv/portaudio.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
		"/home/roman/Projects/plot-cv/os-helpers.js",
		"/home/roman/Projects/plot-cv/io-helpers.js",
		"/usr/include/portmidi.h",
		"/home/roman/Projects/plot-cv/portmidi.js",
		"/home/roman/Projects/plot-cv/ast-shell.js",
		"/home/roman/Projects/plot-cv/list.html",
		"/home/roman/Projects/plot-cv/eagle-shell.js",
		"/home/roman/Projects/plot-cv/out.tmp",
		"/home/roman/Projects/plot-cv/webakeit.js",
		"/home/roman/Projects/plot-cv/webakeit-telegram.js",
		"/home/roman/Downloads/Telegram Desktop/ChatExport_2024-04-09/messages.html",
		"/home/roman/Projects/plot-cv/static/css/webakeit.css",
		"/home/roman/Projects/plot-cv/webakeit.tmp",
		"/home/roman/Projects/plot-cv/webakeit.html",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/xml-shell.js",
		"/home/roman/Projects/plot-cv/plot-cv.sublime-project",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/xml-shell.es",
		"/home/roman/Projects/plot-cv/lib/geom/splines.js",
		"/home/roman/Projects/plot-cv/fire.html",
		"/home/roman/Projects/plot-cv/numbers2.c",
		"/home/roman/Projects/plot-cv/main.js",
		"/home/roman/Projects/plot-cv/lib/geom/pointList.js",
		"/home/roman/Projects/plot-cv/draw.js",
		"/home/roman/Projects/plot-cv/lib/autoStore.js",
		"/home/roman/Projects/plot-cv/lib/async/events.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
		"/home/roman/Projects/plot-cv/fire.js",
		"/home/roman/Projects/plot-cv/upload-server.js",
		"/home/roman/Projects/plot-cv/lib/geom/point.js",
		"/home/roman/Projects/plot-cv/lib/misc.js",
		"/home/roman/Projects/plot-cv/components.js",
		"/home/roman/Projects/plot-cv/draw.html",
		"/home/roman/Projects/plot-cv/static/css/draw.css",
		"/home/roman/Projects/plot-cv/qjs-opencv/point.js",
		"/home/roman/Projects/plot-cv/draw-utils.js",
		"/home/roman/Projects/plot-cv/lib/fd-graph.js",
		"/home/roman/Projects/plot-cv/svg-box.js",
		"/home/roman/Projects/plot-cv/numbers.c",
		"/home/roman/Projects/plot-cv/hex.c",
		"/home/roman/Projects/plot-cv/upload-worker.js",
		"/home/roman/Projects/plot-cv/mailcow-db.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/examples/ssl-client.js",
		"/home/roman/Projects/plot-cv/promise-worker.js",
		"/home/roman/Projects/plot-cv/upload.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-mysql.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/wscli.js",
		"/home/roman/Projects/plot-cv/lib/geom/graph.js",
		"/home/roman/Projects/plot-cv/lib/eagle/node.js",
		"/home/roman/Projects/plot-cv/lib/eagle/element.js",
		"/home/roman/Projects/plot-cv/workertest.js",
		"/home/roman/Projects/plot-cv/test-worker.js",
		"/home/roman/Projects/plot-cv/static/css/upload.css",
		"/home/roman/Projects/plot-cv/upload.html",
		"/home/roman/Projects/plot-cv/test-opencv.js",
		"/home/roman/Projects/plot-cv/map.html",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/tests/server.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/directory.js",
		"/home/roman/Projects/plot-cv/test-video.js",
		"/home/roman/Projects/plot-cv/cv-shell.js",
		"/home/roman/Projects/plot-cv/directory.html",
		"/home/roman/Projects/plot-cv/coil.html",
		"/home/roman/Projects/plot-cv/filelist.html",
		"/home/roman/Projects/plot-cv/noise.js",
		"/home/roman/Projects/plot-cv/pinkNoise.js",
		"/home/roman/Projects/plot-cv/noise.html",
		"/home/roman/Projects/plot-cv/landing.html",
		"/home/roman/Projects/plot-cv/404.html",
		"/home/roman/Projects/plot-cv/index.html",
		"/home/roman/Projects/plot-cv/style.css",
		"/home/roman/Projects/plot-cv/lib/lscache.js",
		"/home/roman/Projects/plot-cv/example.html",
		"/home/roman/Projects/plot-cv/clock.html",
		"/home/roman/Projects/plot-cv/eagle2svg.js",
		"/home/roman/Projects/plot-cv/Pink-Noise-Generator-Thomas-Henry.brd",
		"/home/roman/Projects/plot-cv/lib/eagle/schematicRenderer.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/grid.js",
		"/home/roman/Projects/plot-cv/lib/eagle/renderUtils.js",
		"/home/roman/Projects/plot-cv/lib/geom/transformation.js",
		"/home/roman/Projects/plot-cv/lib/eagle/nodeList.js",
		"/home/roman/Projects/plot-cv/lib/eagle/ref.js",
		"/home/roman/Projects/plot-cv/lib/eagle/project.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/polygon.js",
		"/home/roman/Projects/plot-cv/lib/geom/polygon.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/symbol.js"
	],
	"find":
	{
		"height": 39.0
	},
	"find_in_files":
	{
		"height": 107.0,
		"where_history":
		[
			"/home/roman/Projects/plot-cv,*.js,*.c,*.h,*.cmake,CMakeLists.txt,-*/inst/*,-*/build/*",
			"/home/roman/Projects/plot-cv,*.js,*.c,*.h,*.cmake,CMakeLists.txt",
			"/home/roman/Projects/plot-cv,*.jsx,*.c,*.h,*.cmake,CMakeLists.txt",
			"/home/roman/Projects/plot-cv,*.js,*.c,*.h,*.cmake,CMakeLists.txt",
			"/home/roman/Projects/plot-cv,*.js,*.cmake,CMakeLists.txt",
			"/home/roman/Projects/plot-cv,*.jsx,*.cmake,CMakeLists.txt",
			"/home/roman/Projects/plot-cv,*.js,*.cmake,CMakeLists.txt",
			"/home/roman/Projects/plot-cv,*.js",
			"/home/roman/Projects/plot-cv/lib/eagle,*.js",
			"/home/roman/Projects/plot-cv/lib,*.js",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"options_numhidden",
			"options_hidden",
			"options_numhidden",
			"options_hidden",
			"tostringtag",
			"\\[Symbol.toStringTag\\] =",
			"\\[Symbol.toStringTag\\]",
			"toStringTag",
			"ion define\\b",
			"define\\b",
			"property_enumeration_next",
			"_next\\b",
			"property_recursion_top",
			"\\bindex\\b",
			"Inspector",
			"Writer",
			"setReadHandler",
			"loadModule",
			"main",
			"\n    ",
			"get output\\b",
			"outputFile",
			"CommandOutput",
			"type:",
			"\\btype\\b",
			"\n          ",
			"relative",
			"'L'",
			"'-L'",
			"undefined",
			"\\bundefined\\b",
			"isAbsolute",
			"relative",
			"ArgumentType",
			"ArgumentIs",
			"CompileCommand",
			"ArgumentType",
			"ArgumentIs",
			"relative",
			"\\bthis\\b",
			"MakeCommand",
			"CommandType",
			"MakeCommands",
			"MakeComma",
			"CommandOutput",
			"run",
			"\\[\\.\\.\\.this\\]",
			"\\[\\.\\.\\.this\\]\\.",
			"\\[\\.\\.\\.this",
			"commonCmd",
			"\\bcommands\\b",
			"commands",
			"globalThis",
			"globalThis\\.",
			"Console",
			"\\bdefine\\b",
			"toJSON",
			"inspect",
			"extendArray",
			"this\\.",
			"this\\[",
			"this\\.",
			"this\\[",
			"this[\\[\\.]",
			"this\\[",
			"CompileCommand",
			"\n",
			"CompileCommand",
			"toStringTag",
			"\\bsvg\\b",
			"svgContainer",
			"SVGCom",
			"SVGComponent",
			"overlay",
			"\\bsvg\\b",
			"svgContainer",
			"overlay",
			"GetRects",
			"hello",
			"'hello'",
			"rects",
			"'rects'",
			"'hello'",
			"'rects'",
			"GetRects",
			"NewWS\\(",
			"NewWS",
			"Reconnect",
			"waitFor",
			"\\bconnect\\b",
			"connect",
			"CreateWebSocket",
			"WebSocketURL",
			"CreateWebSocket",
			"createServer",
			"createSewr",
			"onMessage",
			"\\bcid\\b",
			"cid =",
			"SendWS",
			" //",
			"SendWS",
			"cid",
			"uuid",
			"WebSocket",
			"CreateWebSock",
			"oncePromise",
			"resolve\\(",
			"setLog",
			"onMessage",
			"createServer",
			"main",
			"async ",
			"processMessage",
			"serv\\b",
			"serv",
			"processMessage",
			"async",
			"setLog",
			"CreateSocket",
			"uuid",
			"\\.uuid",
			"'uuid'",
			"uuid",
			"logLevel",
			"setLog",
			"sendMessage",
			"ws.sendMessage"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"'file'",
			"this.argv",
			"this.argv.",
			"this.argv[",
			"this.argv.",
			"this.argv[",
			"sendMessage",
			"responses",
			"import",
			"",
			"{ArrayBuffer}   buffer",
			"{ArrayBuffer}      buffer",
			"{Object|null}   outputDriverInfo",
			"{ArrayBuffer}   stream",
			", ",
			"m",
			"{ ",
			"export const ",
			"nameKey",
			", GetStream(stream)",
			"GetStream",
			"DereferenceStream",
			"export ",
			"export class ",
			"export class",
			"}\\n\n  get ",
			"); /**",
			"",
			"export const \\1 = ",
			"export function ",
			"&auml;",
			"&uuml;",
			"&ouml;",
			"\\1",
			"let",
			"this",
			"ret",
			"factor",
			"GetCirclePosition",
			"index",
			"dist",
			"}\\n\\n\\1",
			"}\\n\\1",
			"Log",
			"format_base",
			"\\1u",
			"format",
			"GREEN",
			"c",
			"output",
			"TYPE_MASK",
			" + (obj?.cacheBucket ?? '') + ",
			"\\1//\\2",
			"opts",
			"}\\n\\n",
			"}\\n\\n\\1",
			"",
			"\n      t = 'l';"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1512,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
							"function_name_status_row": 14,
							"outline_rename_mode": false,
							"symkeys":
							[
								[
									813,
									827
								],
								[
									876,
									886
								],
								[
									967,
									978
								],
								[
									1408,
									1422
								],
								[
									1495,
									1504
								],
								[
									1587,
									1600
								],
								[
									1648,
									1662
								],
								[
									1710,
									1724
								],
								[
									1780,
									1792
								],
								[
									2325,
									2337
								],
								[
									3067,
									3079
								],
								[
									3307,
									3318
								],
								[
									7651,
									7665
								],
								[
									9298,
									9312
								],
								[
									9493,
									9510
								],
								[
									9708,
									9719
								],
								[
									9838,
									9852
								],
								[
									10067,
									10078
								],
								[
									10190,
									10201
								],
								[
									12660,
									12674
								],
								[
									13582,
									13594
								],
								[
									14403,
									14414
								],
								[
									16221,
									16232
								],
								[
									17647,
									17666
								],
								[
									20783,
									20797
								],
								[
									21231,
									21245
								],
								[
									23488,
									23502
								],
								[
									25349,
									25360
								],
								[
									25892,
									25904
								],
								[
									26140,
									26153
								],
								[
									27555,
									27569
								],
								[
									31044,
									31057
								],
								[
									34225,
									34242
								],
								[
									37979,
									37989
								],
								[
									38871,
									38890
								],
								[
									39387,
									39402
								],
								[
									40223,
									40238
								],
								[
									41270,
									41284
								],
								[
									41314,
									41328
								]
							],
							"symlist":
							[
								"—Ⓜ– INT32_IN_RANGE ( ) … — macro function",
								"—Ⓜ– IS_COMPACT ( ) … — macro function",
								"Ⓣ  PropertyKey ; — typedef",
								"Ⓣ  InspectOptions ; — typedef",
								"Ⓣ  Inspector ; — typedef",
								"⒡  inspect_value ( ) ; — function declaration",
								"⒡  inspect_string ( ) ; — function declaration",
								"⒡  inspect_number ( ) ; — function declaration",
								"—Ⓕ– screen_width ( ) { … } — function",
								"—Ⓕ– options_init ( ) { … } — function",
								"—Ⓕ– options_free ( ) { … } — function",
								"—Ⓕ– options_get ( ) { … } — function",
								"—Ⓕ– options_object ( ) { … } — function",
								"—Ⓕ– options_hidden ( ) { … } — function",
								"—Ⓕ– options_numhidden ( ) { … } — function",
								"—Ⓕ– put_newline ( ) { … } — function",
								"—Ⓕ– adjust_spacing ( ) { … } — function",
								"—Ⓕ– put_spacing ( ) { … } — function",
								"—Ⓕ– put_escaped ( ) { … } — function",
								"—Ⓕ– inspect_custom ( ) { … } — function",
								"—Ⓕ– inspect_date ( ) { … } — function",
								"—Ⓕ– inspect_map ( ) { … } — function",
								"—Ⓕ– inspect_set ( ) { … } — function",
								"—Ⓕ– inspect_arraybuffer ( ) { … } — function",
								"—Ⓕ– inspect_regexp ( ) { … } — function",
								"—Ⓕ– inspect_number ( ) { … } — function",
								"—Ⓕ– inspect_string ( ) { … } — function",
								"—Ⓕ– inspect_key ( ) { … } — function",
								"—Ⓕ– inspect_atom ( ) { … } — function",
								"—Ⓕ– inspect_error ( ) { … } — function",
								"—Ⓕ– inspect_object ( ) { … } — function",
								"—Ⓕ– inspect_value ( ) { … } — function",
								"—Ⓕ– inspect_recursive ( ) { … } — function",
								"—Ⓕ– js_inspect ( ) { … } — function",
								"—Ⓕ– js_inspect_tostring ( ) { … } — function",
								"—Ⓕ– js_inspect_atom ( ) { … } — function",
								"—Ⓕ– js_inspect_init ( ) { … } — function",
								"Ⓜ  JS_INIT_MODULE … — macro object",
								"Ⓜ  JS_INIT_MODULE … — macro object"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1741669145.04,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "debugger-server.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 29794,
						"regions":
						{
						},
						"selection":
						[
							[
								16011,
								16027
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 540,
							"rulers":
							[
							],
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1740608090.05,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true,
							"wrap_width": 0
						},
						"translation.x": 0.0,
						"translation.y": 8804.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "upload-server.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 35981,
						"regions":
						{
						},
						"selection":
						[
							[
								16120,
								16120
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 522,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1740631217.86,
							"tabs_extra_last_activated_sheet_index": 1,
							"tabs_extra_moving":
							[
								2,
								1
							],
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 9040.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "quickjs/qjs-net/js/rpc.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 26723,
						"regions":
						{
						},
						"selection":
						[
							[
								12944,
								12944
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 453,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1740631205.79,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7596.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "fire.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 27120,
						"regions":
						{
						},
						"selection":
						[
							[
								17590,
								17590
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 680,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1741668896.58,
							"tabs_extra_last_activated_sheet_index": 3,
							"tabs_extra_moving":
							[
								6,
								1
							],
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 11956.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "lib/async/websocket.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4060,
						"regions":
						{
						},
						"selection":
						[
							[
								3261,
								3261
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 120,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1741668300.37,
							"tabs_extra_last_activated_sheet_index": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1894.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "quickjs/qjs-modules/quickjs-inspect.c",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 41679,
						"regions":
						{
						},
						"selection":
						[
							[
								36965,
								36965
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 1337,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1741669232.04,
							"tabs_extra_last_activated_sheet_index": 5,
							"tabs_extra_moving":
							[
								6,
								1
							],
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 26089.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "quickjs/qjs-modules/src/property-enumeration.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7798,
						"regions":
						{
						},
						"selection":
						[
							[
								2227,
								2232
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 83,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1741669073.22,
							"tabs_extra_last_activated_sheet_index": 6,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1148.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "quickjs/qjs-modules/include/property-enumeration.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5963,
						"regions":
						{
						},
						"selection":
						[
							[
								3495,
								3495
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 115,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1741669013.01,
							"tabs_extra_last_activated_sheet_index": 7,
							"tabs_extra_moving":
							[
								6,
								1
							],
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1688.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "lib/build/compileCommand.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6456,
						"regions":
						{
						},
						"selection":
						[
							[
								6190,
								6253
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 213,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1741669015.08,
							"tabs_extra_last_activated_sheet_index": 8,
							"tabs_extra_moving":
							[
								6,
								1
							],
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3617.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "compile_commands.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5594,
						"regions":
						{
						},
						"selection":
						[
							[
								3290,
								3292
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 95,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1741667078.82,
							"tabs_extra_last_activated_sheet_index": 7,
							"tabs_extra_moving":
							[
								6,
								1
							],
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1580.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "quickjs/qjs-modules/lib/repl.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 62715,
						"regions":
						{
						},
						"selection":
						[
							[
								61787,
								61787
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 2332,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1741667207.79,
							"tabs_extra_last_activated_sheet_index": 8,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 41486.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "quickjs/qjs-modules/lib/fs.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 26317,
						"regions":
						{
						},
						"selection":
						[
							[
								26056,
								26090
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 1121,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1741667245.16,
							"tabs_extra_last_activated_sheet_index": 9,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 19832.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "lib/compileCommand.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11463,
						"regions":
						{
						},
						"selection":
						[
							[
								7077,
								7088
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 243,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1741668628.66,
							"tabs_extra_last_activated_sheet_index": 12,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3733.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 14,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 529290,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions": "",
								"scope": ""
							}
						},
						"selection":
						[
							[
								512021,
								512021
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"detect_indentation": false,
							"function_name_status_row": 15766,
							"line_numbers": false,
							"output_tag": 4,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage",
							"tabs_extra_last_activated": 1741668822.29,
							"tabs_extra_last_activated_sheet_index": 13,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 284215.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "quickjs/qjs-modules/lib/util.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 70090,
						"regions":
						{
						},
						"selection":
						[
							[
								21570,
								21570
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 727,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1741668617.4,
							"tabs_extra_last_activated_sheet_index": 13,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 12928.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "draw.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16817,
						"regions":
						{
						},
						"selection":
						[
							[
								11400,
								11400
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 415,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1740628257.49,
							"tabs_extra_last_activated_sheet_index": 6,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6579.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "test-alea.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 443,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1740631205.49,
							"tabs_extra_last_activated_sheet_index": 6,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "quickjs/qjs-modules/quickjs-sockets.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 71395,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 1324,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1740631037.39,
							"tabs_extra_last_activated_sheet_index": 7,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 24827.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "debugger.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9022,
						"regions":
						{
						},
						"selection":
						[
							[
								5022,
								5022
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 131,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1740631204.52,
							"tabs_extra_last_activated_sheet_index": 8,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2329.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "debugger-client.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10822,
						"regions":
						{
						},
						"selection":
						[
							[
								10505,
								10505
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 384,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1740388769.41,
							"tabs_extra_last_activated_sheet_index": 5,
							"tabs_extra_moving":
							[
								3,
								1
							],
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6562.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "test-video.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 26264,
						"regions":
						{
						},
						"selection":
						[
							[
								5485,
								5489
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 134,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1740388757.58,
							"tabs_extra_last_activated_sheet_index": 6,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1921.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 41.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.8,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 300.0
	},
	"output.Debugger Console":
	{
		"height": 300.0
	},
	"output.exec":
	{
		"height": 138.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "plot-cv.sublime-project",
	"replace":
	{
		"height": 70.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"inspect.c",
				"quickjs/qjs-modules/quickjs-inspect.c"
			],
			[
				"util.js",
				"quickjs/qjs-modules/lib/util.js"
			],
			[
				"propery",
				"quickjs/qjs-modules/include/property-enumeration.h"
			],
			[
				"roperty",
				"quickjs/qjs-modules/src/property-enumeration.c"
			],
			[
				"property-",
				"quickjs/qjs-modules/include/property-enumeration.h"
			],
			[
				"fs.js",
				"quickjs/qjs-modules/lib/fs.js"
			],
			[
				"repl.js",
				"quickjs/qjs-modules/lib/repl.js"
			],
			[
				"compile_comm",
				"compile_commands.js"
			],
			[
				"lib/compileCom",
				"lib/compileCommand.js"
			],
			[
				"fire.js",
				"fire.js"
			],
			[
				"rpc.js",
				"quickjs/qjs-net/js/rpc.js"
			],
			[
				"draw",
				"draw.js"
			],
			[
				"draw.js",
				"draw.js"
			],
			[
				"async/web",
				"lib/async/websocket.js"
			],
			[
				"websocket",
				"webSocket.js"
			],
			[
				"upload-ser",
				"upload-server.js"
			],
			[
				"test-vide",
				"test-video.js"
			],
			[
				"test-alea",
				"test-alea.js"
			],
			[
				"test-vid",
				"test-video.js"
			],
			[
				"debugger.ht",
				"debugger.html"
			],
			[
				"debugger.js",
				"debugger.js"
			],
			[
				"utils.h",
				"quickjs/qjs-modules/include/utils.h"
			],
			[
				"quickjs-socket",
				"quickjs/qjs-modules/quickjs-sockets.c"
			],
			[
				"debugger-clie",
				"debugger-client.js"
			],
			[
				"debugger-ser",
				"debugger-server.js"
			],
			[
				"test-nanovg",
				"test-nanovg.js"
			],
			[
				"repeater",
				"lib/repeater/repeater.js"
			],
			[
				"repeater.js",
				"lib/repeater/repeater.js"
			],
			[
				"qjsm.c",
				"quickjs/qjs-modules/src/qjsm.c"
			],
			[
				"quickjs.c",
				"quickjs.c"
			],
			[
				"test-repea",
				"test-repeater.js"
			],
			[
				"debugger.htm",
				"debugger.html"
			],
			[
				"debugger",
				"debuggerprotocol.js"
			],
			[
				"portmidi",
				"/usr/include/portmidi.h"
			],
			[
				"portmidi.js",
				"portmidi.js"
			],
			[
				"portmidi.h",
				"/usr/include/portmidi.h"
			],
			[
				"clang-as",
				"clang-ast.js"
			],
			[
				"ast-she",
				"ast-shell.js"
			],
			[
				"-helpers",
				"os-helpers.js"
			],
			[
				"io-helper",
				"io-helpers.js"
			],
			[
				"portaudio.h",
				"/usr/include/portaudio.h"
			],
			[
				"portaudio",
				"portaudio.js"
			],
			[
				"quickjs.h",
				"quickjs/quickjs.h"
			],
			[
				"quickjs-misc",
				"quickjs/qjs-modules/quickjs-misc.c"
			],
			[
				"portaudio.js",
				"portaudio.js"
			],
			[
				"portaudio2.js",
				"portaudio2.js"
			],
			[
				"list.ht",
				"list.html"
			],
			[
				"eagle-she",
				"eagle-shell.js"
			],
			[
				"webka",
				"webakeit-telegram.js"
			],
			[
				"xml-she",
				"quickjs/qjs-modules/xml-shell.js"
			],
			[
				".html",
				"fire.html"
			],
			[
				"numbers2",
				"numbers2.c"
			],
			[
				"main.js",
				"main.js"
			],
			[
				"main",
				"main.js"
			],
			[
				"splines",
				"lib/geom/splines.js"
			],
			[
				"pointList",
				"lib/geom/pointList.js"
			],
			[
				"compon",
				"components.js"
			],
			[
				"ointlist",
				"lib/geom/pointList.js"
			],
			[
				"events.js",
				"lib/async/events.js"
			],
			[
				"point.js",
				"lib/geom/point.js"
			],
			[
				"misc.js",
				"lib/misc.js"
			],
			[
				"draw.css",
				"static/css/draw.css"
			],
			[
				"upload-server",
				"upload-server.js"
			],
			[
				"draw.html",
				"draw.html"
			],
			[
				"autoStore",
				"lib/autoStore.js"
			],
			[
				"resolve-im",
				"quickjs/qjs-modules/resolve-imports.js"
			],
			[
				"svg-box",
				"svg-box.js"
			],
			[
				"fd-graph",
				"lib/fd-graph.js"
			],
			[
				"draw-u",
				"draw-utils.js"
			],
			[
				"draw-util",
				"draw-utils.js"
			],
			[
				"test-nano",
				"test-nanovg.js"
			],
			[
				"fd-gra",
				"lib/fd-graph.js"
			],
			[
				"graph.js",
				"lib/geom/graph.js"
			],
			[
				"eagle-shell",
				"eagle-shell.js"
			],
			[
				"node.js",
				"lib/eagle/node.js"
			],
			[
				"eleme",
				"lib/eagle/element.js"
			],
			[
				"quickjs-mysql.c",
				"quickjs/qjs-modules/quickjs-mysql.c"
			],
			[
				"mailcow-db",
				"mailcow-db.js"
			],
			[
				"wscli.js",
				"quickjs/qjs-net/wscli.js"
			],
			[
				"upload.js",
				"upload.js"
			],
			[
				"workertest",
				"workertest.js"
			],
			[
				"promise-wor",
				"promise-worker.js"
			],
			[
				"test-work",
				"test-worker.js"
			],
			[
				"upload.css",
				"static/css/upload.css"
			],
			[
				"upload.html",
				"upload.html"
			],
			[
				"draw-ut",
				"draw-utils.js"
			],
			[
				"test-nan",
				"test-nanovg.js"
			],
			[
				"cv-shell",
				"cv-shell.js"
			],
			[
				"test-open",
				"test-opencv.js"
			],
			[
				"test-opencv",
				"test-opencv.js"
			],
			[
				"noise.js",
				"noise.js"
			],
			[
				"noise",
				"noise.html"
			],
			[
				"dire",
				"directory.html"
			],
			[
				"upload",
				"upload.html"
			],
			[
				"map.ht",
				"map.html"
			],
			[
				"landing",
				"landing.html"
			],
			[
				"fire",
				"fire.html"
			],
			[
				"filelist",
				"filelist.html"
			],
			[
				"coil",
				"coil.html"
			],
			[
				"inde",
				"index.html"
			],
			[
				"404.ht",
				"404.html"
			],
			[
				"lscac",
				"lib/lscache.js"
			],
			[
				"style.css",
				"style.css"
			],
			[
				"direcot",
				"directory.html"
			],
			[
				"direc",
				"directory.html"
			],
			[
				"smd.js",
				"lib/eagle/components/smd.js"
			],
			[
				"smd.jy",
				"quickjs/qjs-modules/3rdparty/denodrivers-postgres/docs/.nojekyll"
			],
			[
				"via.js",
				"lib/eagle/components/via.js"
			],
			[
				"hole.js",
				"lib/eagle/components/hole.js"
			],
			[
				"eagle2sv",
				"eagle2svg.js"
			],
			[
				"svgRe",
				"lib/eagle/svgRenderer.js"
			],
			[
				"boardre",
				"lib/eagle/boardRenderer.js"
			],
			[
				"polygon",
				"lib/eagle/components/polygon.js"
			],
			[
				"polygon.js",
				"lib/geom/polygon.js"
			],
			[
				"symbol",
				"lib/eagle/components/symbol.js"
			],
			[
				"wire.js",
				"lib/eagle/components/wire.js"
			],
			[
				"components/sym",
				"lib/eagle/components/symbol.js"
			],
			[
				"eagle/ele",
				"lib/eagle/element.js"
			],
			[
				"github-user",
				"github-userscript.js"
			],
			[
				"line.js",
				"lib/geom/line.js"
			],
			[
				"rect.",
				"lib/geom/rect.js"
			],
			[
				"minnet-clie",
				"quickjs/qjs-net/src/minnet-client.c"
			],
			[
				"callbaCK.C",
				"quickjs/qjs-net/lib/callback.c"
			],
			[
				"internal",
				"quickjs/qjs-modules/quickjs-internal.h"
			],
			[
				"utils.c",
				"quickjs/qjs-modules/src/utils.c"
			],
			[
				"eagle2",
				"eagle2gerber.js"
			],
			[
				"pcb-con",
				"pcb-conversion.js"
			],
			[
				"test_free",
				"qjs-opencv/tests/test_freetype.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 230.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
