{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Property",
				"PropertyEnumeration"
			],
			[
				"PaStream",
				"PaStreamParameters"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"PaE",
				"PaHostErrorInfo"
			],
			[
				"hostApi",
				"hostApiSpecificStreamInfo"
			],
			[
				"host",
				"hostApiType"
			],
			[
				"defaultHi",
				"defaultHighOutputLatency"
			],
			[
				"Draw",
				"DrawCircle"
			],
			[
				"exi",
				"existsSync"
			],
			[
				"text",
				"text-decoration"
			],
			[
				"crea",
				"createTextNode"
			],
			[
				"Transform",
				"TransformationList"
			],
			[
				"trans",
				"transformation"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "Util(g)\nUtil.formatAnnotatedObject = function(subject, o)\n  i =>\n  item =>\n  padding = x =>\n  arr =>\nUtil.curry = (fn, arity) =>\n  ret = function curried(...args)\n(v, i) =>\nCurried = function(...a)\nfunction()\nfunction(a)\nfunction(a, b)\nfunction(a, b, c)\nfunction(a, b, c, d)\n  get()\nUtil.arityN = (fn, n) =>\nfunction(fn)\nfunction()\nfunction(fn)\nfunction(a)\nfunction(fn)\nfunction(a, b)\nfunction(fn)\nfunction(a, b, c)\nfunction(fn)\nfunction(a, b, c, d)\nfunction(fn)\nfunction(a, b, c, d, e)\nUtil.getter = target =>\n  self = function(key)\n  .fn = key =>\n  .fn = key =>\nUtil.setter = target =>\n  set = function(key, value)\n  .fn = (key, value) =>\n  .fn = (key, value) =>\nUtil.remover = target =>\nkey =>\nkey =>\nUtil.hasFn = target =>\nkey =>\nkey =>\nUtil.adder = target =>\narg =>\narg =>\n  self = function(obj, arg = 1)\nChooseFn(a, o)\n  .fn = (obj, arg) =>\n  .fn = (obj, arg) =>\n  .fn = (obj, arg) =>\n  .fn = (num, arg) =>\n  .fn = (obj, arg) =>\nUtil.updater = (target, get, set, fn) =>\n(k, f, i) =>\n  doUpdate(key, func, i)\n  create = () =>\nkey =>\n() =>\n  self = function(...args)\nUtil.once = (fn, thisArg, memoFn) =>\nfunction(...args)\nUtil.delay = (func, wait, thisObj) =>\nfunction(...args)\n()\nUtil.throttle = (f, t, thisObj) =>\nfunction(...args)\nUtil.debounce = (func, wait, options = {}) =>\n  later()\n  debounced(...a)\n  .clear = function()\n  .flush = function()\nUtil.debounceAsync = (fn, wait, options = {}) =>\nfunction(...a)\n  resolve =>\n() =>\n  arg =>\ng =>\ng =>\n() =>\nerr =>\n() =>\nerr =>\n() =>\nerr =>\n() =>\nUtil.log = (...args) =>\n  f =>\n  f =>\n(a, p, i) =>\n  get: () =>\n  .setFilters = function(args)\n  arg =>\n  .getFilters = function()\nUtil.msg = (strings, ...substitutions) =>\n(base, n) =>\nUtil.generalLog = function(n, x)\nUtil.toSource = function(arg, opts = {})\n  print = (...args) =>\nUtil.debug = function(message)\n  removeCircular = function(key, value)\n  arg =>\nUtil.type = function({ type })\nUtil.functionName = function(fn)\nUtil.className = function(obj)\n  obj\nUtil.unwrapComponent = function(c)\nUtil.componentName = function(c)\nUtil.count = function(s, ch)\nUtil.parseNum = function(str)\nUtil.minmax = function(num, min, max)\nUtil.getExponential = function(num)\nUtil.getNumberParts = function(num)\nUtil.pow2 = function(n)\nUtil.pow10 = function(n)\nUtil.bitValue = function(n)\nUtil.bitMask = function(bits, start = 0)\nUtil.bitGroups = function(num, bpp, minLen)\nUtil.bitStuff = (arr, bpp) =>\n([b, f], n) =>\nUtil.toBinary = function(num)\nUtil.toBits = function(num)\nbit =>\nUtil.getBit = function(v, n)\nUtil.isSet = function(v, n)\nUtil.bitCount = function(n)\nUtil.bitNo = function(n)\nUtil.toggleBit = function(num, bit)\nUtil.setBit = function(num, bit)\nUtil.clearBit = function(num, bit)\nUtil.range = function(...args)\n(v, k) =>\n  n =>\nUtil.set = function(obj, prop, value)\n(prop, value) =>\n(prop, value) =>\n(prop, value) =>\nvalue =>\n(obj, prop) =>\n() =>\nUtil.bitArrayToNumbers = function(arr)\nUtil.bitsToNumbers = function(bits)\n(val, key, arr) =>\nUtil.shuffle = function(arr, rnd = Util.rng)\n(a, b) =>\nUtil.sortNum = function(arr)\n(a, b) =>\nUtil.draw = (arr, n = 1, rnd = Util.rng) =>\nUtil.is = function(what, ...pred)\n  type =>\n  fn =>\nUtil.instanceOf = (value, ctor) =>\nUtil.onoff = function(val)\nUtil.numbersToBits = function(arr)\n(bits, num) =>\nUtil.randomNumbers = function([start, end], draws)\nUtil.randomBits = function(r = [1, 50], n = 5)\nUtil.padFn = function(len, char = ' ', fn = (str, pad) => pad)\n(s, n = len) =>\nUtil.pad = function(s, n, char = ' ')\nUtil.abbreviate = function(str, max = 40, suffix = '...')\nUtil.trim = function(str, charset)\nUtil.trimRight = function(str, charset)\nUtil.indent = (text, space = ' ') =>\nUtil.define = (obj, ...args) =>\nUtil.memoizedProperties = (obj, methods) =>\n  get()\nUtil.copyWhole = (dst, ...args) =>\nUtil.copyEntries = (obj, entries) =>\nUtil.extend = (...args) =>\nUtil.isCloneable = obj =>\nUtil.isUnextendable = val =>\n  pred = (k, v, f) =>\n(key, depth) =>\n  value = function(...args)\nUtil.defineGetter = (obj, key, fn, enumerable = false) =>\nUtil.defineGetterSetter = (obj, key, g, s, enumerable = false) =>\nUtil.defineGettersSetters = (obj, gettersSetters) =>\nUtil.extendArray = function(arr = Array.prototype)\nfunction(pred)\nfunction()\nfunction()\n(item, i, a) =>\nfunction()\nfunction(value)\nUtil.adapter = function(obj, getLength = obj => obj.length, getKey = (obj, index) => obj.\n(index), getItem = (obj, key) => obj[key], setItem = (obj, index, value) => (obj[index] = value))\n  get length()\n  get instance()\n  key(i)\n  get(key)\n  has(key)\n  set(key, value)\n*keys()\n*entries()\n  toObject()\n  toMap()\n  .localStorage = function(s)\n() =>\nw =>\n() =>\nl =>\n(l, i) =>\n(l, key) =>\n(l, key, v) =>\nUtil.array = function(a)\nUtil.arrayFromEntries = entries =>\n([k, v]) =>\nkey =>\n([k, v]) =>\nUtil.toMap = function(hash = {}, fn)\nUtil.extendMap = function(map)\n  .entries = function*iterator()\n  .toObject = function()\n  .match = function(...args)\nentries =>\nUtil.objectFrom = function(any)\nUtil.tail = function(arr)\nUtil.splice = function(str, index, delcount, insert)\nUtil.identity = arg =>\nUtil.reverse = arr =>\nUtil.keyOf = function(obj, prop)\nUtil.rotateRight = function(arr, n)\nUtil.repeater = function(n, what)\n()\n()\nUtil.repeat = function(n, what)\nUtil.arrayDim = function(dimensions, init)\nUtil.flatten = function(arr)\nUtil.chunkArray = (a, size) =>\n(acc, item, i) =>\nUtil.partition = function*(a, size)\nUtil.difference = (a, b, incicludes) =>\n  x =>\n  x =>\n  x =>\n  x =>\nUtil.intersect = (a, b) =>\nUtil.symmetricDifference = (a, b) =>\nUtil.union = (a, b, equality) =>\nUtil.partition = (array, callback) =>\nUtil.chances = function(numbers, matches)\nUtil.sum = arr =>\n(acc, n) =>\nUtil.expr = fn =>\n  expr(...args)\n  addArgs(args)\n  ret = function returnFn(...args)\n(a, b) =>\n(a, b) =>\n(a, b) =>\n(a, b) =>\n(a, b) =>\n(a, b) =>\n(a, b) =>\nUtil.mod = (a, b) =>\nn =>\n(a, b) =>\nUtil.fnName = function(f, parent)\nUtil.objName = function(o)\nUtil.findKey = function(obj, pred, thisVal)\n  value : v =>\nUtil.find = function(arr, value, prop = 'id')\n  pred = function(obj)\nobj =>\nobj =>\n  pred = ([key, value], arr) =>\nUtil.findIndex = function(obj, pred, thisArg)\nUtil.match = function(arg, pred)\n  match = (val, key) =>\n(acc, val, key) =>\n(acc, key) =>\nUtil.toHash = function(map, keyTransform = k => \n('' + k))\n(v, k) =>\nUtil.indexOf = function(obj, prop)\nUtil.greatestCommonDenominator = (a, b) =>\nUtil.leastCommonMultiple = (n1, n2) =>\n(re, str)\nUtil.inspect = function(obj, opts = {})\n  stringFn = str =>\n  print = (...args) =>\n(space = false) =>\n(space = false) =>\nkey =>\nkey =>\nUtil.dump = function(name, props)\n() =>\nw =>\n() =>\nUtil.ucfirst = function(str)\nUtil.lcfirst = function(str)\nUtil.typeOf = v =>\nUtil.camelize = (text, sep = '') =>\n(match, p1, p2, offset) =>\nUtil.decamelize = function(str, separator = '-')\nUtil.ifThenElse = function(pred = value => !!value, _then = () => {}, _else = () => {})\nfunction(value)\nUtil.if = (value, _then, _else, pred) =>\n  v =>\n() =>\n() =>\nUtil.ifElse = (value, _else, pred) =>\n  v =>\n() =>\n() =>\n() =>\nUtil.ifThen = (value, _then, pred) =>\n  v =>\n() =>\n() =>\n() =>\nUtil.switch = ({ default: defaultCase, ...cases }) =>\nfunction(value)\n(fn, arr)\nUtil.colorDump = (iterable, textFn) =>\n(color, n) =>\nUtil.bucketInserter = (map, ...extraArgs) =>\nfunction(...args)\nfunction(...args)\nUtil.fifo = function fifo()\n  resolve = () =>\n  generator()\n  r =>\n  push(...args)\n  process: function run()\nUtil.isEmail = function(v)\nUtil.isString = function(v)\nUtil.isNumeric = v =>\nUtil.isUndefined = arg =>\nUtil.isObject = obj =>\nUtil.isPrimitive = obj =>\nUtil.isFunction = arg =>\nUtil.not = fn =>\nfunction(...args)\nUtil.isAsync = fn =>\nUtil.isArrowFunction = fn =>\nUtil.isEmptyString = v =>\nUtil.isEmpty = (...args) =>\n  empty(v)\nUtil.isNonEmpty = (...args) =>\n  nonEmpty = v =>\nUtil.isIpAddress = v =>\n  i =>\n  i =>\nUtil.isPortNumber = v =>\nUtil.hasProps = function(obj, props)\n  prop =>\nUtil.validatePassword = function(value)\nUtil.clone = function(obj, proto)\n  constructor\nUtil.deepClone = function(data)\nUtil.findVal = function(object, propName, maxDepth = 10)\nUtil.deepCloneObservable = function(data)\nUtil.toArray = function(observableArray)\nUtil.arryToTree = function(data, id, pId, appId)\n(e, i) =>\nUtil.to3wei = function(a, old, id, pId)\n(e, i) =>\n(se, si) =>\nUtil.arrExchangePos = function(arr, i, j)\nUtil.arrRemove = function(arr, i)\nUtil.move = function(src, dst = [])\nUtil.moveIf = function(src, pred, dst = [])\nUtil.logOutClearStorage = function()\nUtil.getCookie = function(cookie, name)\nUtil.parseCookie = function(c = document.cookie)\n  pred = char =>\n  char =>\n  char =>\nUtil.encodeCookie = c =>\n([key, value]) =>\nUtil.setCookies = c =>\n([key, value]) =>\nUtil.clearCookies = function(c)\n(acc, name) =>\nUtil.deleteCookie = function(name)\n() =>\nw =>\n() =>\nUtil.accAdd = function(arg1, arg2)\nUtil.Subtr = function(arg1, arg2)\nUtil.accDiv = function(arg1, arg2)\nUtil.accMul = function(arg1, arg2)\nUtil.dateFormatter = function(date, formate)\nUtil.numberFormatter = function(numStr)\nUtil.searchObject = function(object, matchCallback, currentPath, result, searched)\n(req = {}) =>\n() =>\n() =>\n() =>\nurl =>\n() =>\n() =>\n() =>\n() =>\n() =>\n() =>\n() =>\nUtil.parseQuery = function(url = \n)\nUtil.encodeQuery = function(data)\nUtil.parseURL = function(href = this.\n)\n  part =>\n([k, v]) =>\n(acc, m) =>\n  href(override)\nUtil.makeURL = function(...args)\nUtil.numberFromURL = function(url, fn)\nUtil.tryPromise = fn =>\n(resolve, reject) =>\n  resolve = a =>\n  reject = () =>\n  resolve = () =>\n  reject = () =>\n  function(...args)\nfunction(...args)\n  resolve = a =>\n  reject = () =>\nUtil.putError = err =>\n() =>\nfn =>\nret =>\nUtil.tryPredicate = (fn, defaultRet) =>\nret =>\n() =>\nUtil.isBrowser = function()\n() =>\nw =>\n() =>\n() =>\nd =>\n() =>\nUtil.waitFor = function waitFor(msecs)\n({ setTimeout, clearTimeout, setInterval, clearInterval }) =>\n(resolve, reject) =>\n() =>\n  clear = () =>\nUtil.timeout = (msecs, promises, promiseClass = Promise) =>\nUtil.isServer = function()\nUtil.isMobile = function()\nUtil.uniquePred = (cmp = null) =>\n(el, i, arr) =>\n  item =>\n(el, i, arr) =>\nUtil.unique = (arr, cmp) =>\n  cmp = (a, b) =>\n(e, i, a) =>\nUtil.zip = a =>\n(a, b) =>\n(_, i) =>\n  arr =>\nUtil.histogram = (...args) =>\n(k, v) =>\n  initVal = () =>\n  setVal = v =>\n(it, i) =>\n(item, i) =>\n(entry, idx, key) =>\n([k, v]) =>\n(a, b) =>\nUtil.concat = function*(...args)\nUtil.distinct = function(arr)\n(value, index, me) =>\nUtil.rangeMinMax = function(arr, field)\n  obj =>\nUtil.remap = (...args) =>\n  getR = () =>\n  r = val =>\nUtil.mergeLists = function(arr1, arr2, key = 'id')\nUtil.foreach = function(o, fn)\nUtil.all = function(obj, pred)\nUtil.isGenerator = function(fn)\nUtil.isIterator = obj =>\nUtil.isIterable = obj =>\n  x =>\nUtil.isConstructor = x =>\n  construct(target, args)\n  target\n  x\n  m =>\nUtil.filter = function(a, pred)\n()\n  fn = (k, v) =>\nUtil.reduce = (obj, fn, accu) =>\nUtil.mapFunctional = fn =>\n(arg)\nUtil.map = (...args) =>\n  ret = a =>\n()\n  ret = a =>\n()\nUtil.entriesToObj = function(arr)\n(acc, item) =>\nUtil.isDate = function(d)\nUtil.parseDate = function(d)\nUtil.isoDate = function(date)\nUtil.toUnixTime = function(dateObj, utc = false)\nUtil.unixTime = function(utc = false)\nUtil.fromUnixTime = function(epoch, utc = false)\nUtil.formatTime = function(date = \n(), format = 'HH:MM:SS')\nUtil.leapYear = function(year)\nUtil.timeSpan = function(s)\nUtil.randFloat = function(min, max, rnd = Util.rng)\nUtil.randInt = (...args) =>\nUtil.randStr = (len, charset, rnd = Util.rng) =>\nUtil.hex = function(num, numDigits)\nUtil.numberParts = (num, base) =>\nUtil.roundDigits = precision =>\nUtil.roundFunction = (prec, digits, type) =>\nfunction(value)\nUtil.roundTo = function(value, prec, digits, type)\n() =>\nutf8 =>\nv =>\nutf8 =>\nbase64 =>\nv =>\nstring =>\nUtil.formatRecord = function(obj)\n  item =>\nfunction(obj)\n  .isArrayLike = obj =>\nUtil.equals = function(a, b)\n(e, i) =>\nUtil.versionCompare = (a, b) =>\n  isdigit = c =>\nUtil.isGetter = (obj, propName) =>\nUtil.isBool = value =>\nUtil.size = (...args) =>\n  size(obj)\nUtil.isMap = function(obj)\nUtil.effectiveDeviceWidth = function()\nUtil.getFormFields = function(initialState)\n(acc, { elements }) =>\n(acc2, { name, value }) =>\nUtil.mergeObjects = function(objArr, predicate = (dst, src, key) => (src[key] == '' ? undefined : src[key]))\nUtil.getUserAgent = function(headers = req.headers)\nUtil.factor = function(start, end)\nUtil.factorial = function(n)\nUtil.increment = function(obj, key)\nUtil.counter = function()\n  self = function()\nUtil.filterKeys = function(obj, pred = k => true)\n  pred = str =>\n  pred = str =>\nUtil.filterMembers = function(obj, fn)\n  pred = (k, v, o) =>\nUtil.filterOutMembers = function(obj, fn)\n  pred = (v, k, o) =>\nUtil.dumpMembers = obj =>\nUtil.filterOutKeys = function(obj, arr)\n(v, k, o) =>\n(k, v) =>\nkey =>\n() =>\n(v, k, o) =>\nUtil.removeKeys = function(obj, arr)\n(v, k, o) =>\n(k, v) =>\nkey =>\nUtil.getKeys = function(obj, arr)\nUtil.numbersConvert = function(str)\n(ch, i) =>\nUtil.entries = function(arg)\n()\nUtil.keys = function(arg)\n()\nUtil.values = function(arg)\n()\nUtil.removeEqual = function(a, b)\nUtil.clear = obj =>\nUtil.remove = (arr, item) =>\n(other, i, arr) =>\nUtil.removeIf = function(arr, pred)\nUtil.traverse = function(o, fn)\n(v, k, a) =>\n  walker(o, depth = 0)\nUtil.traverseWithPath = function(o, rootPath = [])\n  walker(o, path)\nUtil.indexByPath = function(o, p)\nUtil.pushUnique = (arr, ...args) =>\n(acc, item) =>\nUtil.insertSorted = function(arr, item, cmp = (a, b) => b - a)\n  next = (k, v) =>\n(k, v) =>\n(k, v) =>\n(k, v) =>\n  fn = function(key, value)\nUtil.keyIterator = obj =>\nUtil.entryIterator = obj =>\n()\nUtil.mapAdapter = getSetFunction =>\n  get(key)\n  set(key, value)\n  .keys = () =>\n  .entries = () =>\nUtil.mapFunction = map =>\n  fn = function(...args)\n  m =>\n  .set = (key, value) =>\n(k, v) =>\n  .get = key =>\n  .set = (key, value) =>\n(k, v) =>\n  .get = key =>\n  .set = (key, value) =>\n(k, v) =>\n  .get = key =>\n  .set = (key, value) =>\n(k, v) =>\n  .get = key =>\n  .update = function(key, fn = (k, v) => v)\n  .entries = function*()\n  .values = function*()\n  .keys = function*()\nfunction()\n([key, value]) =>\n  .keys = () =>\n  .entries = () =>\n  .values = () =>\n  .keys = function*()\n  .entries = function*()\n  .values = function*()\n  .filter = function(pred)\n()\n  .map = function(t)\n()\n  .forEach = function(fn)\n  .delete = key =>\n  .has = key =>\nUtil.mapWrapper = (map, toKey = key => key, fromKey = key => key) =>\n  .set = (key, value) =>\n(k, v) =>\n  .get = key =>\n  .keys = () =>\n  .entries = function*()\n  .values = function*()\n  .has = key =>\n  .delete = key =>\n  m =>\nUtil.mapCombinator = (forward, backward) =>\n  fn = function(key, value)\n(a,m) =>\nkey =>\na =>\n  makeGetter(map, next = a => a)\nkey =>\nUtil.predicate = (fn_or_regex, pred) =>\n  fn = arg =>\n  .valueOf = function()\narg =>\nUtil.some = predicates =>\nvalue =>\n  pred =>\nUtil.every = predicates =>\nvalue =>\n  pred =>\nUtil.iterateMembers = function*(obj, predicate = (name, depth, obj, proto) => true, depth = 0)\n(...predicates) =>\n(...args) =>\n  pred =>\n(...predicates) =>\n(...args) =>\n  pred =>\n(pred, obj) =>\nUtil.memberNameFilter = (depth = 1, start = 0) =>\n(m, l, o) =>\n(m, l, o) =>\n(name, depth, obj, proto) =>\nUtil.getMemberNames = (obj, ...args) =>\nUtil.getMemberEntries = (obj, ...args) =>\n  name =>\n  accFn = (a, m, o) =>\n(obj, ...args) =>\n(a, m) =>\n(r, a, m) =>\n(r, a) =>\n  incFn = (c, n, self) =>\n  incFn = (c, n, self) =>\n  inc = (i, n = 1) =>\n  self = function Count(n = 1)\n  .valueOf = function()\n  filterFn = (key, value) =>\n(acc, mem, idx) =>\nr =>\n() =>\n  fn = function ReduceIntoMap(arg, acc = mapObj)\n(acc, arg) =>\n(a, m, o) =>\nUtil.methodNameFilter = (depth = 1, start = 0) =>\n(m, l, o) =>\n() =>\nb =>\n() =>\nUtil.getMethodNames = (obj, depth = 1, start = 0) =>\n(a, m, o) =>\nUtil.inherit = (dst, src, depth = 1) =>\n  inherits(ctor, superCtor)\n  ctor\n  superCtor\n  inherits(ctor, superCtor)\nTempCtor = function()\nTempCtor\n  superCtor\n  ctor\n  ctor\nUtil.bindMethods = (obj, methods, dest) =>\nUtil.getConstructor = obj =>\nUtil.getPrototypeChain = function(obj, fn = p => p)\nUtil.getObjectChain = (obj, fn = p => p) =>\nUtil.getPropertyDescriptors = function(obj)\np =>\n  fn = (c, p) =>\n(p, o) =>\nUtil.weakDefine = function(...args)\n  other =>\nUtil.exception = function Exception(...args)\n  toString(color = false)\nUtil.location = function Location(...args)\n  toString(color = false)\nt =>\n  getFileName()\n  getLineNumber()\n  getColumnNumber()\nUtil.stackFrame = function StackFrame(frame)\n  prop =>\n  propertyMap()\n  method =>\n([method, func]) =>\n  getFunction()\n  getMethodName()\n  getFunctionName()\n  getTypeName()\n  getFileName()\n  getLineNumber()\n  getColumnNumber()\n  get()\n  toString(color, opts = {})\n(t, color) =>\nt =>\n  p =>\n  p =>\n(f, i) =>\n  getLocation()\n  get location()\nUtil.scriptName = () =>\n() =>\nargs =>\n() =>\nUtil.getFunctionName = () =>\nUtil.getFunctionArguments = fn =>\nUtil.scriptDir = () =>\n() =>\nscript =>\n() =>\nUtil.stack = function Stack(stack, offset)\n  frame =>\n([m, p]) =>\n(acc, [method, property]) =>\n  getStack()\n  .prepareStackTrace = (_, stack) =>\n  stackToString(st, start = 0)\n()\n  frame =>\n  part =>\n  frame =>\n([func, file]) =>\n  n =>\n([func, file]) =>\n([func, [columnNumber, lineNumber, ...file]]) =>\n({ methodName, functionName: func, fileName: file, columnNumber: column, lineNumber: line }) =>\ns =>\ns =>\n() =>\ns =>\ns =>\n() =>\n  frame =>\n  frame =>\n  get: () =>\n  get: () =>\n*value()\n  toString(opts = {})\n  f =>\n  getFunctionName()\n  getMethodName()\n  getFileName()\n  getLineNumber()\n  get()\n(a, f) =>\n(fn, i) =>\nUtil.getCallerStack = function(position = 2, limit = 1000, stack)\n  .prepareStackTrace = (_, stack) =>\nUtil.getCallerFile = function(position = 2)\nUtil.getCallerFunction = function(position = 2)\nUtil.getCallerFunctionName = function(position = 2)\nUtil.getCallerFunctionNames = function(position = 2)\nUtil.getCaller = function(index = 1, stack)\n  f =>\nUtil.getCallers = function(index = 1, num = Number.MAX_SAFE_INTEGER, stack)\n  f =>\nUtil.getStackFrames = function(offset = 2)\n  frame =>\nUtil.getStackFrame = function(offset = 2)\nUtil.rotateLeft = function(x, n)\nUtil.rotateRight = function(x, n)\nUtil.hashString = function(string, bits = 32, mask = 0xffffffff)\nUtil.flatTree = function(tree, addOutput)\n  addOutput = arg =>\nkey =>\nUtil.traverseTree = function(tree, fn, depth = 0, parent = null)\nUtil.walkTree = function(node, pred, t, depth = 0, parent = null)\n()\n  pred = i =>\n  t = function(i)\nUtil.isPromise = function(obj)\n  setImmediate = fn =>\nUtil.next = function(iter, observer, prev = undefined)\n  val =>\n() =>\n  err =>\n() =>\nUtil.getImageAverageColor = function(imageElement, options)\n  toStringRgb()\n  toStringRgba()\n  toStringHex()\n  toHex = function(d)\nUtil.jsonToObject = function(jsonStr)\nUtil.splitLines = function(str, max_linelen = Number.MAX_SAFE_INTEGER)\nUtil.splitAt = function*(str, ...indexes)\n(a, b) =>\nUtil.decodeEscapes = function(text)\n  m =>\n([s, t]) =>\nUtil.stripXML = text =>\nUtil.stripHTML = html =>\n  p =>\n  p =>\nUtil.stripNonPrintable = text =>\nUtil.decodeHTMLEntities = function(text)\n(match, entity) =>\nUtil.encodeHTMLEntities = (str, charset = '\\u00A0-\\u9999<>&') =>\ni =>\nUtil.stripAnsi = function(str)\nUtil.proxy = (obj = {}, handler) =>\n  get(target, key, receiver)\n  set(target, key, value, receiver)\nUtil.propertyLookup = (obj = {}, handler = key => null) =>\n  get(target, key, receiver)\nUtil.traceProxy = (obj, handler) =>\nfunction(name, args)\n  get(target, key, receiver)\n  member = function()\nUtil.proxyTree = function proxyTree(...callbacks)\n  applyCallback = () =>\n  get(target, key)\n  set(target, key, value)\n  apply(target, thisArg, args)\n  node(path)\n() =>\nUtil.construct = constructor =>\nF(args)\nF\n  constructor\nUtil.constructApply = (constructor, array) =>\nUtil.immutable = args =>\n  set: () =>\n  deleteProperty: () =>\n  defineProperty: () =>\nUtil.immutableClass = (orig, ...proto) =>\n  p =>\nctor =>\n  ctor\n  imm = base =>\n  constructor(...args)\nUtil.partial = function partial(fn /*, arg1, arg2 etc */)\nfunction()\n(min, max, value) =>\nUtil.coloring = (useColor = true) =>\n  code(...args)\n  text(text)\n  concat(...args)\n  code(...args)\n  text(text, ...color)\n  concat(...args)\n  code(...args)\n  text(text, ...color)\n  concat(...args)\nUtil.colorText = (...args) =>\nUtil.decodeAnsi = (str, index) =>\n  isDigit = c =>\n  notDigit = c =>\n  findIndex = (pred, start) =>\nUtil.stripAnsi = str =>\nUtil.ansiCode = (...args) =>\nUtil.wordWrap = (str, width, delimiter) =>\nUtil.multiParagraphWordWrap = (str, width, delimiter) =>\nUtil.defineInspect = (proto, ...props) =>\nfunction()\n(acc, key) =>\n(a, b, value) =>\nUtil.bindProperties = (proxy, target, props, gen) =>\n  name =>\n(acc, name) =>\np => v =>\n  k =>\n(a, [k, v]) =>\n(...args) =>\n(...args) =>\n(a, k) =>\n  get: () =>\n  get: () =>\n()\nobj =>\n  on: val =>\n  off: val =>\n  true: val =>\n  false: val =>\nAssertionFailed\n  constructor(message, stack)\nUtil.assert = function assert(val, message)\nUtil.assertEqual = function assertEqual(val1, val2, message)\nUtil.assignGlobal = () =>\nUtil.weakMapper = function(createFn, map = \n(), hitFn)\n  self = function(obj, ...args)\n  .set = (k, v) =>\n  .get = k =>\nUtil.merge = function(...args)\na =>\na =>\n(acc, arg) =>\nUtil.transformer = (a, ...l) =>\n(c, f) =>\nfunction(...v)\nUtil.copyTextToClipboard = (i, t) =>\n  module =>\n(a, b, c) =>\n() =>\nUtil.toPlainObject = obj =>\nv =>\nUtil.toBuiltinObject = obj =>\nv =>\n  t = (v, n) =>\n(acc, k) =>\nUtil.timer = msecs =>\n  remaining = () =>\n  finish = callback =>\n  log = (method, ...args) =>\n  obj =>\nv =>\n  timeout = (msecs, tmr = timer) =>\n() =>\n(...args) =>\n() =>\n  add = (arr, ...items) =>\n  get delay()\n  get created()\n  get start()\n  get stop()\n  get elapsed()\n  get end()\n  get remain()\n  cancel()\n  pause()\n  .resume = function()\n  .restart = function()\n  callback(...args)\n  subscribe(f)\n  unsubscribe(f)\n  start = () =>\n(resolve, reject) =>\nUtil.thenableReject = error =>\n  then: (resolve, reject) =>\nUtil.wrapGenerator = fn =>\nfunction(...args)\nUtil.wrapGeneratorMethods = obj =>\nUtil.decorateIterable = (proto, generators = false) =>\n  forEach(fn, thisArg)\n*map(fn, thisArg)\n*filter(pred, thisArg)\n  findIndex(pred, thisArg)\n  indexOf(item, startIndex = -1)\n(e, i) =>\n  find(pred, thisArg)\n  every(pred, thisArg)\n  some(pred, thisArg)\n  reduce(fn, accu)\n*entries()\n*keys()\n*values()\nUtil.swap = (a, b) =>\nUtil.swapArray = ([a, b]) =>\nUtil.cacheAdapter = (st, defaultOpts = {}) =>\n() =>\n  c =>\n() =>\n  getItem(request, opts = {})\n  setItem(request, response)\n  addItem(request)\n  removeItem(request, opts = {})\n  key(index)\n  keys(urls = false, t = a => a)\n  response =>\n  r =>\n  clear()\nUtil.cachedFetch = (allOpts = {}) =>\n() =>\n  self = function CachedFetch(request, opts = {})\n(returnValue, fn, ...args) =>\nUtil.proxyObject = (root, handler) =>\n  ptr = path =>\n(a, i) =>\n(value, path) =>\n  get(target, key)\n  node(path)\nUtil.parseXML = function(xmlStr)\n() =>\nparser =>\n  fn = (value, ...args) =>\n() =>\nmap =>\n(obj, ...args) =>\n() =>\n(obj, ...args) =>\n  self = (obj, ...args) =>\n() =>\n() =>\na =>\n() =>\n() =>\nfn =>\n() =>\n() =>\na =>\n() =>\n() =>\na =>\n() =>\n() =>\nUtil.getOpt = (options = {}, args) =>\n  findOpt = arg =>\n([optname, option]) =>\n  opt =>\n() =>\nv =>\n() =>\n() =>\nv =>\nUtil.getEnv = varName =>\n() =>\n  e =>\n() =>\nUtil.getEnvVars = () =>\n() =>\n  e =>\n() =>\nUtil.safeFunction = (fn, trapExceptions, thisObj) =>\n  function(...args)\nfunction(...args)\na =>\nerror =>\nUtil.safeCall = (fn, ...args) =>\nUtil.safeApply = (fn, args = []) =>\nUtil.exit = exitCode =>\n  stdExit = std =>\n() =>\n([obj, exit]) =>\n() =>\nUtil.atexit = handler =>\nUtil.callMain = (fn, trapExceptions) =>\n(...args) =>\n  ret =>\n() =>\nerr =>\n() =>\nargv1 =>\nUtil.printReturnValue = (fn, opts = {}) =>\n  print = (returnValue, fn, ...args) =>\n  self = (...args) =>\nUtil.replaceAll = (needles, haystack) =>\n([re, str]) =>\n(acc, [match, replacement]) =>\nUtil.quote = (str, q = '\"') =>\nUtil.escape = (str, pred = codePoint => codePoint < 32 || codePoint > 0xff) =>\nUtil.escapeRegex = string =>\nUtil.consolePrinter = function ConsolePrinter(log = console.log)\n  self = function(...args)\n  .log = (...args) =>\nUtil.consoleJoin = function(...args)\nUtil.consoleConcat = function(...args)\n  self = function ConsoleConcat(...args)\n  clear()\n  log = (...args) =>\n  print()\n  i =>\n  output()\n  add(...args)\nUtil.booleanAdapter = (getSetFn, trueValue = 1, falseValue = 0) =>\nfunction(value)\n  set = () =>\nfunction(...args)\nUtil.deriveGetSet = (fn, get = v => v, set = v => v, thisObj) =>\n() =>\nv =>\n  handler = () =>\nExFunc\n  constructor()\n  __call__(...args)\nUtil.isatty = fd =>\n  mod =>\nUtil.ttyGetWinSize = (fd = 1) =>\n  m =>\n(resolve, reject) =>\n(resolve, reject) =>\nUtil.stdio = (fd, mode = true) =>\nUtil.signal = (num, act) =>\n  m =>\n() =>\nUtil.timeit = (fn, args = [], options = {}) =>\n(p, c) =>\nUtil.lazyProperty = (obj, name, getter, opts = {}) =>\n  replaceProperty = value =>\n  function()\nfunction()\n  v =>\nUtil.lazyProperties = (obj, gettersObj, opts = {}) =>\n  f = (a, b) =>\nfunction(a, b)\n(a, b) =>\n(a, b) =>\n() =>\nHighResolutionTime\n  constructor(secs = 0, nano = 0)\n  static create(s, n)\n  get seconds()\n  get milliseconds()\n  get nanoseconds()\n  diff(o)\n  sum(o)\n  since(o)\n  toString()\n  inspect()\n  hrtime(previousTimestamp)\n  hrtime(previousTimestamp)\n() =>\n(minDelay = 0) =>\n  resolve =>\n  resolve =>\n  animationFrame(t)\nUtil.getNow = () =>\n  performanceNow = () =>\n  performanceNow = function(clock = CLOCK_MONOTONIC_RAW)\n  gettime = (clk_id, tp) =>\nUtil.formatColumns = a =>\n(acc, row, i) =>\n(col, j) =>\n  row =>\n(col, j) =>\nUtil.getPlatform = () =>\n() =>\n() =>\n() =>\n() =>\n() =>\n() =>\n() =>\n() =>\nUtil.colIndexes = line =>\n([prev, cols], char, i) =>\nUtil.colSplit = (line, indexes) =>\n  map = (name, flag) =>\n(value)\n  log = (duration, name, args, ret) =>\n(args, ret) =>\n(args, ret) =>\n  function(...args)\nfunction(...args)\n  both = () =>\n(name, args) =>\n  arg =>\n(name, ret) =>\nfunction(...args)\nUtil.bind = function(f, ...args)\n  ret = function()\n  ret = function()\n  ret\n  f\nUtil.bytesToUTF8 = function*(bytes)\nUtil.codePointsToString = codePoints =>\nUtil.bufferToString = b =>\nUtil.levenshteinDistance = function levenshteinDistance(a, b)\nUtil.padTrunc = (...args) =>\n(s, pad = ' ') =>\nUtil.setReadHandler = (fd, handler) =>\n  os =>",
			"settings":
			{
				"buffer_size": 26187,
				"line_ending": "Unix",
				"name": "𝌆 Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					574,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/include/libtcc.h",
						"symkeys":
						[
							[
								25,
								33
							],
							[
								62,
								71
							],
							[
								127,
								135
							],
							[
								162,
								170
							],
							[
								236,
								243
							],
							[
								304,
								314
							],
							[
								380,
								396
							],
							[
								486,
								504
							],
							[
								669,
								684
							],
							[
								806,
								826
							],
							[
								911,
								934
							],
							[
								1050,
								1067
							],
							[
								1173,
								1192
							],
							[
								1368,
								1380
							],
							[
								1439,
								1458
							],
							[
								1469,
								1483
							],
							[
								1499,
								1515
							],
							[
								1529,
								1548
							],
							[
								1559,
								1584
							],
							[
								1595,
								1619
							],
							[
								1704,
								1722
							],
							[
								1886,
								1905
							],
							[
								1945,
								1962
							],
							[
								2020,
								2034
							],
							[
								2072,
								2086
							],
							[
								2124,
								2138
							],
							[
								2172,
								2193
							],
							[
								2285,
								2305
							],
							[
								2427,
								2442
							],
							[
								2540,
								2554
							],
							[
								2709,
								2724
							],
							[
								2871,
								2878
							],
							[
								2995,
								3007
							],
							[
								3300,
								3317
							],
							[
								3391,
								3405
							]
						],
						"symlist":
						[
							" Ⓜ  LIBTCC_H … — macro object",
							" Ⓜ  LIBTCCAPI … — macro object",
							" ⒞  TCCState ; — type declaration",
							" Ⓣ  TCCState ; — typedef",
							" ⒡  tcc_new ( ) ; — function declaration",
							" ⒡  tcc_delete ( ) ; — function declaration",
							" ⒡  tcc_set_lib_path ( ) ; — function declaration",
							"—Ⓕ– tcc_set_error_func ( ) { … } — function",
							" ⒡  tcc_set_options ( ) ; — function declaration",
							" ⒡  tcc_add_include_path ( ) ; — function declaration",
							" ⒡  tcc_add_sysinclude_path ( ) ; — function declaration",
							" ⒡  tcc_define_symbol ( ) ; — function declaration",
							" ⒡  tcc_undefine_symbol ( ) ; — function declaration",
							" ⒡  tcc_add_file ( ) ; — function declaration",
							" Ⓜ  TCC_FILETYPE_BINARY … — macro object",
							" Ⓜ  TCC_FILETYPE_C … — macro object",
							" Ⓜ  TCC_FILETYPE_ASM … — macro object",
							" Ⓜ  TCC_FILETYPE_ASM_PP … — macro object",
							" Ⓜ  TCC_FILETYPE_AR_WHOLE_OFF … — macro object",
							" Ⓜ  TCC_FILETYPE_AR_WHOLE_ON … — macro object",
							" ⒡  tcc_compile_string ( ) ; — function declaration",
							" ⒡  tcc_set_output_type ( ) ; — function declaration",
							" Ⓜ  TCC_OUTPUT_MEMORY … — macro object",
							" Ⓜ  TCC_OUTPUT_EXE … — macro object",
							" Ⓜ  TCC_OUTPUT_DLL … — macro object",
							" Ⓜ  TCC_OUTPUT_OBJ … — macro object",
							" Ⓜ  TCC_OUTPUT_PREPROCESS … — macro object",
							" ⒡  tcc_add_library_path ( ) ; — function declaration",
							" ⒡  tcc_add_library ( ) ; — function declaration",
							" ⒡  tcc_add_symbol ( ) ; — function declaration",
							" ⒡  tcc_output_file ( ) ; — function declaration",
							" ⒡  tcc_run ( ) ; — function declaration",
							" ⒡  tcc_relocate ( ) ; — function declaration",
							" Ⓜ  TCC_RELOCATE_AUTO … — macro object",
							" ⒡  tcc_get_symbol ( ) ; — function declaration"
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				],
				[
					575,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/src/sample/imgui_hello.c",
						"symkeys":
						[
							[
								207,
								217
							],
							[
								373,
								381
							],
							[
								472,
								486
							]
						],
						"symlist":
						[
							"—Ⓕ– ctoy_begin ( ) { … } — function",
							"—Ⓕ– ctoy_end ( ) { … } — function",
							"—Ⓕ– ctoy_main_loop ( ) { … } — function"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACCBgAA4pOCICBMSUJUQ0NfSCDigKYg4oCUIG1hY3JvIG9iamVjdArik4IgIExJQlRDQ0FQSSDigKYg4oCUIG1hY3JvIG9iamVjdArikp4gIFRDQ1N0YXRlIDsg4oCUIHR5cGUgZGVjbGFyYXRpb24K4pOJICBUQ0NTdGF0ZSA7IOKAlCB0eXBlZGVmCuKSoSAgdGNjX25ldyAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24K4pKhICB0Y2NfZGVsZXRlICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgrikqEgIHRjY19zZXRfbGliX3BhdGggKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKAlOKSu+KAkyB0Y2Nfc2V0X2Vycm9yX2Z1bmMgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKSoSAgdGNjX3NldF9vcHRpb25zICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgrikqEgIHRjY19hZGRfaW5jbHVkZV9wYXRoICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgrikqEgIHRjY19hZGRfc3lzaW5jbHVkZV9wYXRoICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgrikqEgIHRjY19kZWZpbmVfc3ltYm9sICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgrikqEgIHRjY191bmRlZmluZV9zeW1ib2wgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKSoSAgdGNjX2FkZF9maWxlICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgrik4IgIFRDQ19GSUxFVFlQRV9CSU5BUlkg4oCmIOKAlCBtYWNybyBvYmplY3QK4pOCICBUQ0NfRklMRVRZUEVfQyDigKYg4oCUIG1hY3JvIG9iamVjdArik4IgIFRDQ19GSUxFVFlQRV9BU00g4oCmIOKAlCBtYWNybyBvYmplY3QK4pOCICBUQ0NfRklMRVRZUEVfQVNNX1BQIOKApiDigJQgbWFjcm8gb2JqZWN0CuKTgiAgVENDX0ZJTEVUWVBFX0FSX1dIT0xFX09GRiDigKYg4oCUIG1hY3JvIG9iamVjdArik4IgIFRDQ19GSUxFVFlQRV9BUl9XSE9MRV9PTiDigKYg4oCUIG1hY3JvIG9iamVjdArikqEgIHRjY19jb21waWxlX3N0cmluZyAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24K4pKhICB0Y2Nfc2V0X291dHB1dF90eXBlICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgrik4IgIFRDQ19PVVRQVVRfTUVNT1JZIOKApiDigJQgbWFjcm8gb2JqZWN0CuKTgiAgVENDX09VVFBVVF9FWEUg4oCmIOKAlCBtYWNybyBvYmplY3QK4pOCICBUQ0NfT1VUUFVUX0RMTCDigKYg4oCUIG1hY3JvIG9iamVjdArik4IgIFRDQ19PVVRQVVRfT0JKIOKApiDigJQgbWFjcm8gb2JqZWN0CuKTgiAgVENDX09VVFBVVF9QUkVQUk9DRVNTIOKApiDigJQgbWFjcm8gb2JqZWN0CuKSoSAgdGNjX2FkZF9saWJyYXJ5X3BhdGggKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKSoSAgdGNjX2FkZF9saWJyYXJ5ICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgrikqEgIHRjY19hZGRfc3ltYm9sICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgrikqEgIHRjY19vdXRwdXRfZmlsZSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24K4pKhICB0Y2NfcnVuICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgrikqEgIHRjY19yZWxvY2F0ZSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24K4pOCICBUQ0NfUkVMT0NBVEVfQVVUTyDigKYg4oCUIG1hY3JvIG9iamVjdArikqEgIHRjY19nZXRfc3ltYm9sICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgAAAAAAAAAAbQAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					576,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/src/sample/libtcc_hello.c",
						"symkeys":
						[
							[
								214,
								224
							],
							[
								702,
								716
							],
							[
								760,
								768
							]
						],
						"symlist":
						[
							"—Ⓕ– ctoy_begin ( ) { … } — function",
							"—Ⓕ– ctoy_main_loop ( ) { … } — function",
							"—Ⓕ– ctoy_end ( ) { … } — function"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACLAAAA4oCU4pK74oCTIGN0b3lfYmVnaW4gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBjdG95X2VuZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGN0b3lfbWFpbl9sb29wICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgAAAAAAAAAAbQAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					577,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/src/sample/raytracing.c",
						"symkeys":
						[
							[
								2,
								73
							],
							[
								1075,
								1147
							],
							[
								1159,
								1171
							],
							[
								1224,
								1249
							],
							[
								1349,
								1356
							],
							[
								1587,
								1591
							],
							[
								5543,
								5553
							],
							[
								5720,
								5728
							],
							[
								5779,
								5793
							]
						],
						"symlist":
						[
							"=== ==========================================================",
							"=== ==========================================================",
							" Ⓜ  USE_3D_NOISE … — macro object",
							" Ⓜ  STB_PERLIN_IMPLEMENTATION … — macro object",
							"—Ⓜ– GET_RAY ( ) … — macro function",
							"—Ⓕ– draw ( ) { … } — function",
							"—Ⓕ– ctoy_begin ( ) { … } — function",
							"—Ⓕ– ctoy_end ( ) { … } — function",
							"—Ⓕ– ctoy_main_loop ( ) { … } — function"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACLAAAA4oCU4pK74oCTIGN0b3lfYmVnaW4gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBjdG95X21haW5fbG9vcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGN0b3lfZW5kICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgAAAAAAAAAAewEAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					578,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/src/sample/sound_hello.c",
						"symkeys":
						[
							[
								123,
								134
							],
							[
								219,
								228
							],
							[
								317,
								327
							],
							[
								493,
								503
							],
							[
								567,
								580
							],
							[
								647,
								657
							],
							[
								703,
								713
							],
							[
								760,
								764
							],
							[
								827,
								832
							],
							[
								879,
								887
							],
							[
								937,
								948
							],
							[
								1011,
								1019
							],
							[
								1076,
								1084
							],
							[
								1163,
								1168
							],
							[
								1260,
								1270
							],
							[
								2225,
								2235
							],
							[
								2324,
								2332
							],
							[
								2365,
								2379
							]
						],
						"symlist":
						[
							"—Ⓕ– sound_begin ( ) { … } — function",
							"—Ⓕ– sound_end ( ) { … } — function",
							"—Ⓕ– sound_data ( ) { … } — function",
							"—Ⓕ– sound_gain ( ) { … } — function",
							"—Ⓕ– sound_looping ( ) { … } — function",
							"—Ⓕ– sound_play ( ) { … } — function",
							"—Ⓕ– sound_stop ( ) { … } — function",
							"—Ⓕ– log2 ( ) { … } — function",
							"—Ⓕ– round ( ) { … } — function",
							"—Ⓕ– sin_wave ( ) { … } — function",
							"—Ⓕ– square_wave ( ) { … } — function",
							"—Ⓕ– saw_wave ( ) { … } — function",
							"—Ⓕ– tri_wave ( ) { … } — function",
							"—Ⓕ– noise ( ) { … } — function",
							"—Ⓕ– synthesize ( ) { … } — function",
							"—Ⓕ– ctoy_begin ( ) { … } — function",
							"—Ⓕ– ctoy_end ( ) { … } — function",
							"—Ⓕ– ctoy_main_loop ( ) { … } — function"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC5AQAAPT09ID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KPT09ID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0K4pOCICBVU0VfM0RfTk9JU0Ug4oCmIOKAlCBtYWNybyBvYmplY3QK4pOCICBTVEJfUEVSTElOX0lNUExFTUVOVEFUSU9OIOKApiDigJQgbWFjcm8gb2JqZWN0CuKAlOKTguKAkyBHRVRfUkFZICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKSu+KAkyBkcmF3ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgY3RveV9iZWdpbiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGN0b3lfZW5kICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgY3RveV9tYWluX2xvb3AgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uAAAAAAAAAAB3AgAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					579,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/src/sample/triangle_hello.c",
						"symkeys":
						[
							[
								456,
								460
							],
							[
								741,
								751
							],
							[
								1340,
								1348
							],
							[
								1462,
								1476
							]
						],
						"symlist":
						[
							"—Ⓕ– draw ( ) { … } — function",
							"—Ⓕ– ctoy_begin ( ) { … } — function",
							"—Ⓕ– ctoy_end ( ) { … } — function",
							"—Ⓕ– ctoy_main_loop ( ) { … } — function"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAArAwAA4oCU4pK74oCTIHNvdW5kX2JlZ2luICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgc291bmRfZW5kICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgc291bmRfZGF0YSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHNvdW5kX2dhaW4gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBzb3VuZF9sb29waW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgc291bmRfcGxheSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHNvdW5kX3N0b3AgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBsb2cyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcm91bmQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBzaW5fd2F2ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHNxdWFyZV93YXZlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgc2F3X3dhdmUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB0cmlfd2F2ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIG5vaXNlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgc3ludGhlc2l6ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGN0b3lfYmVnaW4gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBjdG95X2VuZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGN0b3lfbWFpbl9sb29wICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgAAAAAAAAAAiwAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					580,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/src/sample/voronoi.c",
						"symkeys":
						[
							[
								2,
								73
							],
							[
								1072,
								1144
							],
							[
								1195,
								1206
							],
							[
								1218,
								1228
							],
							[
								1487,
								1491
							],
							[
								1787,
								1792
							],
							[
								1865,
								1872
							],
							[
								2492,
								2496
							],
							[
								3279,
								3293
							],
							[
								3368,
								3378
							],
							[
								3458,
								3466
							]
						],
						"symlist":
						[
							"=== ==========================================================",
							"=== ==========================================================",
							" Ⓜ  POINT_COUNT … — macro object",
							"—Ⓒ– test_point { … } ; — type",
							"—Ⓕ– init ( ) { … } — function",
							"—Ⓕ– clear ( ) { … } — function",
							"—Ⓕ– animate ( ) { … } — function",
							"—Ⓕ– draw ( ) { … } — function",
							"—Ⓕ– ctoy_main_loop ( ) { … } — function",
							"—Ⓕ– ctoy_begin ( ) { … } — function",
							"—Ⓕ– ctoy_end ( ) { … } — function"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACzAAAA4oCU4pK74oCTIGRyYXcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBjdG95X2JlZ2luICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgY3RveV9lbmQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBjdG95X21haW5fbG9vcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24AAAAAAAAAAKUBAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					581,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/src/sample/triangle_hello.c",
						"symkeys":
						[
							[
								456,
								460
							],
							[
								741,
								751
							],
							[
								1340,
								1348
							],
							[
								1462,
								1476
							]
						],
						"symlist":
						[
							"—Ⓕ– draw ( ) { … } — function",
							"—Ⓕ– ctoy_begin ( ) { … } — function",
							"—Ⓕ– ctoy_end ( ) { … } — function",
							"—Ⓕ– ctoy_main_loop ( ) { … } — function"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD7AQAAPT09ID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KPT09ID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0K4pOCICBQT0lOVF9DT1VOVCDigKYg4oCUIG1hY3JvIG9iamVjdArigJTikrjigJMgdGVzdF9wb2ludCB7IOKApiB9IDsg4oCUIHR5cGUK4oCU4pK74oCTIGluaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBjbGVhciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGFuaW1hdGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBkcmF3ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgY3RveV9tYWluX2xvb3AgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBjdG95X2JlZ2luICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgY3RveV9lbmQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uAAAAAAAAAACLAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					582,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/src/sample/voronoi.c",
						"symkeys":
						[
							[
								2,
								73
							],
							[
								1072,
								1144
							],
							[
								1195,
								1206
							],
							[
								1218,
								1228
							],
							[
								1487,
								1491
							],
							[
								1787,
								1792
							],
							[
								1865,
								1872
							],
							[
								2492,
								2496
							],
							[
								3279,
								3293
							],
							[
								3368,
								3378
							],
							[
								3458,
								3466
							]
						],
						"symlist":
						[
							"=== ==========================================================",
							"=== ==========================================================",
							" Ⓜ  POINT_COUNT … — macro object",
							"—Ⓒ– test_point { … } ; — type",
							"—Ⓕ– init ( ) { … } — function",
							"—Ⓕ– clear ( ) { … } — function",
							"—Ⓕ– animate ( ) { … } — function",
							"—Ⓕ– draw ( ) { … } — function",
							"—Ⓕ– ctoy_main_loop ( ) { … } — function",
							"—Ⓕ– ctoy_begin ( ) { … } — function",
							"—Ⓕ– ctoy_end ( ) { … } — function"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACzAAAA4oCU4pK74oCTIGRyYXcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBjdG95X2JlZ2luICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgY3RveV9lbmQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBjdG95X21haW5fbG9vcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24AAAAAAAAAAKUBAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					583,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/tool/build_native/3rdparty/glfw/examples/gears.c",
						"symkeys":
						[
							[
								588,
								605
							],
							[
								1089,
								1093
							],
							[
								5791,
								5795
							],
							[
								6555,
								6562
							],
							[
								6660,
								6663
							],
							[
								7257,
								7264
							],
							[
								7755,
								7759
							],
							[
								8681,
								8685
							]
						],
						"symlist":
						[
							" Ⓜ  _USE_MATH_DEFINES … — macro object",
							"—Ⓕ– gear ( ) { … } — function",
							"—Ⓕ– draw ( ) { … } — function",
							"—Ⓕ– animate ( ) { … } — function",
							"—Ⓕ– key ( ) { … } — function",
							"—Ⓕ– reshape ( ) { … } — function",
							"—Ⓕ– init ( ) { … } — function",
							"—Ⓕ– main ( ) { … } — function"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD7AQAAPT09ID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KPT09ID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0K4pOCICBQT0lOVF9DT1VOVCDigKYg4oCUIG1hY3JvIG9iamVjdArigJTikrjigJMgdGVzdF9wb2ludCB7IOKApiB9IDsg4oCUIHR5cGUK4oCU4pK74oCTIGluaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBjbGVhciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGFuaW1hdGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBkcmF3ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgY3RveV9tYWluX2xvb3AgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBjdG95X2JlZ2luICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgY3RveV9lbmQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uAAAAAAAAAAD8AAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					584,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABIAQAA4pOCICBfVVNFX01BVEhfREVGSU5FUyDigKYg4oCUIG1hY3JvIG9iamVjdArigJTikrvigJMgZ2VhciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGRyYXcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBhbmltYXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMga2V5ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcmVzaGFwZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBtYWluICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					585,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/tool/build_native/3rdparty/glfw/examples/gears.c",
						"symkeys":
						[
							[
								588,
								605
							],
							[
								1089,
								1093
							],
							[
								5791,
								5795
							],
							[
								6555,
								6562
							],
							[
								6660,
								6663
							],
							[
								7257,
								7264
							],
							[
								7755,
								7759
							],
							[
								8681,
								8685
							]
						],
						"symlist":
						[
							" Ⓜ  _USE_MATH_DEFINES … — macro object",
							"—Ⓕ– gear ( ) { … } — function",
							"—Ⓕ– draw ( ) { … } — function",
							"—Ⓕ– animate ( ) { … } — function",
							"—Ⓕ– key ( ) { … } — function",
							"—Ⓕ– reshape ( ) { … } — function",
							"—Ⓕ– init ( ) { … } — function",
							"—Ⓕ– main ( ) { … } — function"
						]
					},
					"AQAAAAAAAAAAAAAA/AAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					586,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABIAQAA4pOCICBfVVNFX01BVEhfREVGSU5FUyDigKYg4oCUIG1hY3JvIG9iamVjdArigJTikrvigJMgZ2VhciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGRyYXcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBhbmltYXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMga2V5ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcmVzaGFwZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBtYWluICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					587,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/util.js",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					588,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					589,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/util.js",
						"symkeys":
						[
							[
								706,
								723
							],
							[
								987,
								1036
							],
							[
								1923,
								1927
							],
							[
								2743,
								2750
							],
							[
								3272,
								3286
							],
							[
								3546,
								3552
							],
							[
								3655,
								3682
							],
							[
								3730,
								3761
							],
							[
								3917,
								3927
							],
							[
								3966,
								3990
							],
							[
								4057,
								4073
							],
							[
								4118,
								4135
							],
							[
								4183,
								4203
							],
							[
								4254,
								4277
							],
							[
								4325,
								4351
							],
							[
								4752,
								4757
							],
							[
								4816,
								4840
							],
							[
								4863,
								4879
							],
							[
								4894,
								4905
							],
							[
								4945,
								4961
							],
							[
								4976,
								4988
							],
							[
								5029,
								5045
							],
							[
								5060,
								5075
							],
							[
								5119,
								5135
							],
							[
								5150,
								5168
							],
							[
								5215,
								5231
							],
							[
								5246,
								5267
							],
							[
								5317,
								5333
							],
							[
								5348,
								5372
							],
							[
								5498,
								5521
							],
							[
								5604,
								5624
							],
							[
								5879,
								5891
							],
							[
								5941,
								5953
							],
							[
								6073,
								6096
							],
							[
								6169,
								6195
							],
							[
								6430,
								6451
							],
							[
								6506,
								6527
							],
							[
								6656,
								6680
							],
							[
								6766,
								6773
							],
							[
								6794,
								6801
							],
							[
								6831,
								6853
							],
							[
								6936,
								6943
							],
							[
								6961,
								6968
							],
							[
								6993,
								7015
							],
							[
								7065,
								7072
							],
							[
								7126,
								7133
							],
							[
								7165,
								7194
							],
							[
								7540,
								7565
							],
							[
								7692,
								7711
							],
							[
								7793,
								7812
							],
							[
								7999,
								8018
							],
							[
								8096,
								8115
							],
							[
								8180,
								8199
							],
							[
								8295,
								8335
							],
							[
								8477,
								8490
							],
							[
								8516,
								8549
							],
							[
								8798,
								8812
							],
							[
								8973,
								8980
							],
							[
								9197,
								9203
							],
							[
								9609,
								9633
							],
							[
								10012,
								10048
							],
							[
								10090,
								10108
							],
							[
								10291,
								10328
							],
							[
								10409,
								10427
							],
							[
								10445,
								10456
							],
							[
								10522,
								10556
							],
							[
								10583,
								10601
							],
							[
								10876,
								10921
							],
							[
								11121,
								11139
							],
							[
								11390,
								11416
							],
							[
								11675,
								11694
							],
							[
								11773,
								11792
							],
							[
								11942,
								11990
							],
							[
								12171,
								12186
							],
							[
								12212,
								12222
							],
							[
								12309,
								12314
							],
							[
								13081,
								13087
							],
							[
								13163,
								13168
							],
							[
								13177,
								13182
							],
							[
								13211,
								13220
							],
							[
								13244,
								13254
							],
							[
								13276,
								13289
							],
							[
								13317,
								13331
							],
							[
								13357,
								13374
							],
							[
								13402,
								13420
							],
							[
								13521,
								13526
							],
							[
								13734,
								13757
							],
							[
								14213,
								14217
							],
							[
								14259,
								14263
							],
							[
								14370,
								14382
							],
							[
								14976,
								14986
							],
							[
								15074,
								15102
							],
							[
								15136,
								15142
							],
							[
								15204,
								15228
							],
							[
								15258,
								15299
							],
							[
								15575,
								15587
							],
							[
								15620,
								15652
							],
							[
								15694,
								15734
							],
							[
								15888,
								15908
							],
							[
								17195,
								17225
							],
							[
								17285,
								17322
							],
							[
								17507,
								17513
							],
							[
								17728,
								17758
							],
							[
								17838,
								17870
							],
							[
								18098,
								18128
							],
							[
								18265,
								18268
							],
							[
								18405,
								18439
							],
							[
								18596,
								18628
							],
							[
								18918,
								18946
							],
							[
								19024,
								19053
							],
							[
								19128,
								19165
							],
							[
								19215,
								19250
							],
							[
								19431,
								19466
							],
							[
								19766,
								19789
							],
							[
								19820,
								19844
							],
							[
								19908,
								19935
							],
							[
								19968,
								20008
							],
							[
								20126,
								20169
							],
							[
								20472,
								20501
							],
							[
								20558,
								20572
							],
							[
								20621,
								20650
							],
							[
								20692,
								20719
							],
							[
								20829,
								20836
							],
							[
								20856,
								20884
							],
							[
								20974,
								21001
							],
							[
								21040,
								21067
							],
							[
								21117,
								21141
							],
							[
								21216,
								21251
							],
							[
								21353,
								21385
							],
							[
								21470,
								21504
							],
							[
								21589,
								21619
							],
							[
								21839,
								21849
							],
							[
								21902,
								21906
							],
							[
								21974,
								22011
							],
							[
								22048,
								22065
							],
							[
								22088,
								22105
							],
							[
								22165,
								22182
							],
							[
								22268,
								22277
							],
							[
								22349,
								22363
							],
							[
								22431,
								22436
							],
							[
								23139,
								23177
							],
							[
								23328,
								23363
							],
							[
								23447,
								23465
							],
							[
								23523,
								23567
							],
							[
								23581,
								23590
							],
							[
								23622,
								23650
							],
							[
								23664,
								23673
							],
							[
								23742,
								23785
							],
							[
								23905,
								23938
							],
							[
								23965,
								23972
							],
							[
								24101,
								24106
							],
							[
								24122,
								24156
							],
							[
								24233,
								24259
							],
							[
								24357,
								24391
							],
							[
								24414,
								24428
							],
							[
								24463,
								24513
							],
							[
								24651,
								24697
							],
							[
								24758,
								24820
							],
							[
								24831,
								24847
							],
							[
								24982,
								25019
							],
							[
								25058,
								25115
							],
							[
								25487,
								25521
							],
							[
								25661,
								25700
							],
							[
								25780,
								25817
							],
							[
								25934,
								25965
							],
							[
								26720,
								26763
							],
							[
								26894,
								26899
							],
							[
								27055,
								27089
							],
							[
								27297,
								27333
							],
							[
								27395,
								27421
							],
							[
								28181,
								28206
							],
							[
								28274,
								28302
							],
							[
								28895,
								28914
							],
							[
								29009,
								29024
							],
							[
								29152,
								29177
							],
							[
								29477,
								29534
							],
							[
								29657,
								29722
							],
							[
								29832,
								29884
							],
							[
								30005,
								30055
							],
							[
								30171,
								30186
							],
							[
								30257,
								30268
							],
							[
								30356,
								30367
							],
							[
								30393,
								30408
							],
							[
								30486,
								30500
							],
							[
								30540,
								30559
							],
							[
								30777,
								30866
							],
							[
								30869,
								30966
							],
							[
								31022,
								31034
							],
							[
								31099,
								31113
							],
							[
								31145,
								31151
							],
							[
								31194,
								31202
							],
							[
								31248,
								31256
							],
							[
								31312,
								31327
							],
							[
								31380,
								31387
							],
							[
								31498,
								31508
							],
							[
								31650,
								31660
							],
							[
								31723,
								31730
							],
							[
								31815,
								31842
							],
							[
								31866,
								31875
							],
							[
								31901,
								31909
							],
							[
								31926,
								31935
							],
							[
								31974,
								31982
							],
							[
								31993,
								32006
							],
							[
								32017,
								32032
							],
							[
								32061,
								32079
							],
							[
								32159,
								32183
							],
							[
								32604,
								32638
							],
							[
								32669,
								32680
							],
							[
								32685,
								32695
							],
							[
								32709,
								32720
							],
							[
								32741,
								32777
							],
							[
								33281,
								33311
							],
							[
								33355,
								33386
							],
							[
								33621,
								33643
							],
							[
								33703,
								33729
							],
							[
								33845,
								33856
							],
							[
								33968,
								33999
							],
							[
								34204,
								34229
							],
							[
								34296,
								34348
							],
							[
								34460,
								34482
							],
							[
								34488,
								34509
							],
							[
								34526,
								34558
							],
							[
								34678,
								34713
							],
							[
								34778,
								34811
							],
							[
								34858,
								34870
							],
							[
								34940,
								34952
							],
							[
								35009,
								35040
							],
							[
								35084,
								35126
							],
							[
								35302,
								35330
							],
							[
								35441,
								35471
							],
							[
								35483,
								35500
							],
							[
								35624,
								35660
							],
							[
								35737,
								35776
							],
							[
								35888,
								35892
							],
							[
								35919,
								35923
							],
							[
								35962,
								35966
							],
							[
								35994,
								35998
							],
							[
								36021,
								36047
							],
							[
								36089,
								36125
							],
							[
								36163,
								36195
							],
							[
								36534,
								36571
							],
							[
								36815,
								36856
							],
							[
								36949,
								36966
							],
							[
								36978,
								36989
							],
							[
								37004,
								37021
							],
							[
								37107,
								37131
							],
							[
								37154,
								37180
							],
							[
								37636,
								37668
							],
							[
								37922,
								37931
							],
							[
								37962,
								37971
							],
							[
								38002,
								38011
							],
							[
								38042,
								38051
							],
							[
								38082,
								38091
							],
							[
								38121,
								38130
							],
							[
								38161,
								38170
							],
							[
								38179,
								38199
							],
							[
								38243,
								38248
							],
							[
								38291,
								38300
							],
							[
								38468,
								38501
							],
							[
								38875,
								38901
							],
							[
								39127,
								39170
							],
							[
								39212,
								39224
							],
							[
								39302,
								39347
							],
							[
								39468,
								39488
							],
							[
								39609,
								39616
							],
							[
								39635,
								39642
							],
							[
								39822,
								39851
							],
							[
								39980,
								40025
							],
							[
								40153,
								40185
							],
							[
								40264,
								40285
							],
							[
								40537,
								40555
							],
							[
								40742,
								40755
							],
							[
								40872,
								40920
							],
							[
								40933,
								40942
							],
							[
								40980,
								40990
							],
							[
								41037,
								41071
							],
							[
								41348,
								41390
							],
							[
								41444,
								41482
							],
							[
								41644,
								41663
							],
							[
								41864,
								41903
							],
							[
								42037,
								42054
							],
							[
								42594,
								42614
							],
							[
								42702,
								42721
							],
							[
								42762,
								42781
							],
							[
								44629,
								44636
							],
							[
								44651,
								44658
							],
							[
								46275,
								46308
							],
							[
								46456,
								46465
							],
							[
								46485,
								46493
							],
							[
								46497,
								46506
							],
							[
								46647,
								46675
							],
							[
								46789,
								46817
							],
							[
								46931,
								46949
							],
							[
								47328,
								47363
							],
							[
								47403,
								47430
							],
							[
								47511,
								47559
							],
							[
								47770,
								47857
							],
							[
								47868,
								47884
							],
							[
								47993,
								48033
							],
							[
								48059,
								48063
							],
							[
								48080,
								48085
							],
							[
								48104,
								48109
							],
							[
								48127,
								48164
							],
							[
								48190,
								48194
							],
							[
								48200,
								48206
							],
							[
								48221,
								48227
							],
							[
								48235,
								48241
							],
							[
								48257,
								48294
							],
							[
								48320,
								48324
							],
							[
								48338,
								48344
							],
							[
								48352,
								48358
							],
							[
								48365,
								48371
							],
							[
								48388,
								48441
							],
							[
								48442,
								48459
							],
							[
								48564,
								48583
							],
							[
								48630,
								48668
							],
							[
								48693,
								48706
							],
							[
								49332,
								49376
							],
							[
								49448,
								49466
							],
							[
								49720,
								49738
							],
							[
								50065,
								50092
							],
							[
								50101,
								50116
							],
							[
								50192,
								50219
							],
							[
								50346,
								50350
							],
							[
								50428,
								50441
							],
							[
								50638,
								50667
							],
							[
								50775,
								50801
							],
							[
								50869,
								50896
							],
							[
								51168,
								51189
							],
							[
								51259,
								51284
							],
							[
								51304,
								51326
							],
							[
								51390,
								51415
							],
							[
								51540,
								51564
							],
							[
								51788,
								51804
							],
							[
								51805,
								51824
							],
							[
								51857,
								51877
							],
							[
								51966,
								51994
							],
							[
								52092,
								52117
							],
							[
								52167,
								52194
							],
							[
								52197,
								52216
							],
							[
								52521,
								52551
							],
							[
								52594,
								52609
							],
							[
								52677,
								52700
							],
							[
								52739,
								52743
							],
							[
								52783,
								52787
							],
							[
								52825,
								52849
							],
							[
								52916,
								52952
							],
							[
								53017,
								53024
							],
							[
								53062,
								53101
							],
							[
								53241,
								53274
							],
							[
								53467,
								53478
							],
							[
								53575,
								53606
							],
							[
								53665,
								53721
							],
							[
								54085,
								54126
							],
							[
								54492,
								54532
							],
							[
								54760,
								54808
							],
							[
								54840,
								54849
							],
							[
								55132,
								55171
							],
							[
								55182,
								55191
							],
							[
								55230,
								55241
							],
							[
								55646,
								55687
							],
							[
								55733,
								55766
							],
							[
								55843,
								55878
							],
							[
								55978,
								56021
							],
							[
								56201,
								56237
							],
							[
								56554,
								56593
							],
							[
								56729,
								56777
							],
							[
								56945,
								56959
							],
							[
								57131,
								57138
							],
							[
								57254,
								57261
							],
							[
								57596,
								57620
							],
							[
								57650,
								57667
							],
							[
								57724,
								57746
							],
							[
								57775,
								57792
							],
							[
								57898,
								57929
							],
							[
								58003,
								58023
							],
							[
								58157,
								58191
							],
							[
								58221,
								58230
							],
							[
								58250,
								58258
							],
							[
								58262,
								58271
							],
							[
								58364,
								58398
							],
							[
								58699,
								58732
							],
							[
								59094,
								59128
							],
							[
								59498,
								59532
							],
							[
								59815,
								59859
							],
							[
								60484,
								60523
							],
							[
								60651,
								60733
							],
							[
								61859,
								61872
							],
							[
								61890,
								61899
							],
							[
								61917,
								61926
							],
							[
								61977,
								61988
							],
							[
								62012,
								62024
							],
							[
								62031,
								62042
							],
							[
								62079,
								62084
							],
							[
								62187,
								62192
							],
							[
								62337,
								62342
							],
							[
								62375,
								62380
							],
							[
								62415,
								62420
							],
							[
								62615,
								62620
							],
							[
								62824,
								62857
							],
							[
								62870,
								62871
							],
							[
								63280,
								63313
							],
							[
								63477,
								63514
							],
							[
								63522,
								63523
							],
							[
								63999,
								64006
							],
							[
								64145,
								64156
							],
							[
								64242,
								64253
							],
							[
								64540,
								64554
							],
							[
								65097,
								65129
							],
							[
								65458,
								65496
							],
							[
								65795,
								65818
							],
							[
								65831,
								65851
							],
							[
								65914,
								65928
							],
							[
								65932,
								65946
							],
							[
								66023,
								66038
							],
							[
								66112,
								66126
							],
							[
								66169,
								66192
							],
							[
								66384,
								66402
							],
							[
								66608,
								66622
							],
							[
								66626,
								66640
							],
							[
								66812,
								66834
							],
							[
								67378,
								67383
							],
							[
								67425,
								67431
							],
							[
								67474,
								67481
							],
							[
								67510,
								67549
							],
							[
								67578,
								67588
							],
							[
								67594,
								67603
							],
							[
								67621,
								67648
							],
							[
								67688,
								67697
							],
							[
								67706,
								67714
							],
							[
								67762,
								67771
							],
							[
								67797,
								67806
							],
							[
								67817,
								67825
							],
							[
								67897,
								67906
							],
							[
								67997,
								68041
							],
							[
								68103,
								68164
							],
							[
								68472,
								68498
							],
							[
								68526,
								68531
							],
							[
								68555,
								68568
							],
							[
								68676,
								68741
							],
							[
								68846,
								68872
							],
							[
								68906,
								68932
							],
							[
								68953,
								68986
							],
							[
								69014,
								69030
							],
							[
								69045,
								69052
							],
							[
								69074,
								69090
							],
							[
								69115,
								69142
							],
							[
								69199,
								69214
							],
							[
								69236,
								69248
							],
							[
								69265,
								69280
							],
							[
								69290,
								69299
							],
							[
								69339,
								69348
							],
							[
								69355,
								69361
							],
							[
								69373,
								69402
							],
							[
								69488,
								69498
							],
							[
								69539,
								69554
							],
							[
								69573,
								69586
							],
							[
								70011,
								70021
							],
							[
								70160,
								70172
							],
							[
								70453,
								70474
							],
							[
								70660,
								70671
							],
							[
								70708,
								70717
							],
							[
								70797,
								70830
							],
							[
								71136,
								71165
							],
							[
								71209,
								71231
							],
							[
								71265,
								71304
							],
							[
								71338,
								71344
							],
							[
								71417,
								71442
							],
							[
								71453,
								71465
							],
							[
								71658,
								71668
							],
							[
								71720,
								71770
							],
							[
								72178,
								72208
							],
							[
								72294,
								72324
							],
							[
								72397,
								72428
							],
							[
								72582,
								72606
							],
							[
								72661,
								72685
							],
							[
								72812,
								72816
							],
							[
								72896,
								72921
							],
							[
								73009,
								73032
							],
							[
								73064,
								73070
							],
							[
								73213,
								73214
							],
							[
								73305,
								73309
							],
							[
								73443,
								73474
							],
							[
								73726,
								73738
							],
							[
								73855,
								73869
							],
							[
								74015,
								74047
							],
							[
								74251,
								74277
							],
							[
								74278,
								74295
							],
							[
								74344,
								74367
							],
							[
								74400,
								74410
							],
							[
								74459,
								74471
							],
							[
								74786,
								74796
							],
							[
								74988,
								75000
							],
							[
								75675,
								75708
							],
							[
								75736,
								75750
							],
							[
								75844,
								75869
							],
							[
								76018,
								76046
							],
							[
								76180,
								76209
							],
							[
								76509,
								76557
							],
							[
								76746,
								76783
							],
							[
								76832,
								76880
							],
							[
								76994,
								77028
							],
							[
								77036,
								77060
							],
							[
								77574,
								77604
							],
							[
								77730,
								77757
							],
							[
								78234,
								78285
							],
							[
								78327,
								78354
							],
							[
								78524,
								78572
							],
							[
								78784,
								78819
							],
							[
								79026,
								79059
							],
							[
								79331,
								79362
							],
							[
								79675,
								79719
							],
							[
								79855,
								79871
							],
							[
								80032,
								80082
							],
							[
								80478,
								80483
							],
							[
								80564,
								80577
							],
							[
								80626,
								80636
							],
							[
								80640,
								80653
							],
							[
								80728,
								80743
							],
							[
								80792,
								80802
							],
							[
								80806,
								80821
							],
							[
								80888,
								80921
							],
							[
								81031,
								81038
							],
							[
								81323,
								81338
							],
							[
								81614,
								81635
							],
							[
								81696,
								81724
							],
							[
								81815,
								81824
							],
							[
								82791,
								82822
							],
							[
								82994,
								83008
							],
							[
								83631,
								83665
							],
							[
								83850,
								83872
							],
							[
								83908,
								83932
							],
							[
								83935,
								83955
							],
							[
								84199,
								84225
							],
							[
								84320,
								84358
							],
							[
								84760,
								84803
							],
							[
								84885,
								84913
							],
							[
								84935,
								84961
							],
							[
								85100,
								85208
							],
							[
								85446,
								85497
							],
							[
								85575,
								85609
							],
							[
								85697,
								85725
							],
							[
								85759,
								85794
							],
							[
								85868,
								85893
							],
							[
								85915,
								85932
							],
							[
								85974,
								86023
							],
							[
								86096,
								86109
							],
							[
								86181,
								86194
							],
							[
								86370,
								86408
							],
							[
								86419,
								86438
							],
							[
								86492,
								86533
							],
							[
								86544,
								86563
							],
							[
								86621,
								86646
							],
							[
								86693,
								86732
							],
							[
								86821,
								86834
							],
							[
								86873,
								86883
							],
							[
								86937,
								86944
							],
							[
								86969,
								86975
							],
							[
								87017,
								87030
							],
							[
								87050,
								87086
							],
							[
								87171,
								87184
							],
							[
								87223,
								87233
							],
							[
								87266,
								87273
							],
							[
								87379,
								87412
							],
							[
								87492,
								87527
							],
							[
								87567,
								87577
							],
							[
								87692,
								87720
							],
							[
								87883,
								87895
							],
							[
								88000,
								88025
							],
							[
								88140,
								88153
							],
							[
								88252,
								88279
							],
							[
								88398,
								88411
							],
							[
								88514,
								88547
							],
							[
								88770,
								88789
							],
							[
								88868,
								88896
							],
							[
								88915,
								88934
							],
							[
								88952,
								88987
							],
							[
								89330,
								89361
							],
							[
								89420,
								89433
							],
							[
								89517,
								89549
							],
							[
								89730,
								89780
							],
							[
								89823,
								89850
							],
							[
								90052,
								90085
							],
							[
								90136,
								90171
							],
							[
								90184,
								90198
							],
							[
								90265,
								90327
							],
							[
								90526,
								90542
							],
							[
								90769,
								90779
							],
							[
								90818,
								90828
							],
							[
								90848,
								90858
							],
							[
								90886,
								90911
							],
							[
								91037,
								91062
							],
							[
								91337,
								91364
							],
							[
								91597,
								91609
							],
							[
								93262,
								93297
							],
							[
								93316,
								93324
							],
							[
								93372,
								93387
							],
							[
								93535,
								93548
							],
							[
								93741,
								93757
							],
							[
								93964,
								93989
							],
							[
								94004,
								94026
							],
							[
								94242,
								94246
							],
							[
								94460,
								94482
							],
							[
								94504,
								94514
							],
							[
								94532,
								94545
							],
							[
								94692,
								94714
							],
							[
								94736,
								94746
							],
							[
								94764,
								94777
							],
							[
								94906,
								94928
							],
							[
								94954,
								94964
							],
							[
								94982,
								94995
							],
							[
								95031,
								95053
							],
							[
								95074,
								95084
							],
							[
								95102,
								95115
							],
							[
								95135,
								95176
							],
							[
								95483,
								95506
							],
							[
								95587,
								95609
							],
							[
								95683,
								95703
							],
							[
								95835,
								95846
							],
							[
								95879,
								95896
							],
							[
								96073,
								96092
							],
							[
								96127,
								96149
							],
							[
								96281,
								96302
							],
							[
								96440,
								96460
							],
							[
								96527,
								96550
							],
							[
								96626,
								96648
							],
							[
								96766,
								96790
							],
							[
								96852,
								96864
							],
							[
								97035,
								97053
							],
							[
								97115,
								97127
							],
							[
								97279,
								97302
							],
							[
								97443,
								97459
							],
							[
								97515,
								97528
							],
							[
								97560,
								97628
							],
							[
								97669,
								97691
							],
							[
								97720,
								97730
							],
							[
								97746,
								97759
							],
							[
								97819,
								97832
							],
							[
								97908,
								97931
							],
							[
								98059,
								98081
							],
							[
								98178,
								98191
							],
							[
								98253,
								98269
							],
							[
								98307,
								98311
							],
							[
								98570,
								98613
							],
							[
								98628,
								98653
							],
							[
								98796,
								98804
							],
							[
								98818,
								98825
							],
							[
								98834,
								98839
							],
							[
								98857,
								98898
							],
							[
								98911,
								98918
							],
							[
								98995,
								99034
							],
							[
								99191,
								99202
							],
							[
								99237,
								99258
							],
							[
								99336,
								99343
							],
							[
								99375,
								99400
							],
							[
								99458,
								99467
							],
							[
								99484,
								99491
							],
							[
								99509,
								99535
							],
							[
								99593,
								99602
							],
							[
								99620,
								99627
							],
							[
								99646,
								99741
							],
							[
								100373,
								100393
							],
							[
								100394,
								100408
							],
							[
								100430,
								100437
							],
							[
								100464,
								100484
							],
							[
								100485,
								100499
							],
							[
								100520,
								100527
							],
							[
								100571,
								100585
							],
							[
								100657,
								100706
							],
							[
								100719,
								100735
							],
							[
								100769,
								100785
							],
							[
								100877,
								100909
							],
							[
								100940,
								100979
							],
							[
								101360,
								101401
							],
							[
								101440,
								101447
							],
							[
								101503,
								101523
							],
							[
								101561,
								101580
							],
							[
								101654,
								101671
							],
							[
								101690,
								101710
							],
							[
								101714,
								101731
							],
							[
								101781,
								101804
							],
							[
								101905,
								101928
							],
							[
								101972,
								101991
							],
							[
								102034,
								102062
							],
							[
								102158,
								102179
							],
							[
								102255,
								102281
							],
							[
								102394,
								102412
							],
							[
								102466,
								102471
							],
							[
								102474,
								102480
							],
							[
								102493,
								102539
							],
							[
								102622,
								102635
							],
							[
								103014,
								103027
							],
							[
								103090,
								103139
							],
							[
								103152,
								103168
							],
							[
								103190,
								103203
							],
							[
								103231,
								103243
							],
							[
								103247,
								103260
							],
							[
								103322,
								103374
							],
							[
								103563,
								103576
							],
							[
								103639,
								103678
							],
							[
								103822,
								103857
							],
							[
								103929,
								103933
							],
							[
								103960,
								103969
							],
							[
								104220,
								104255
							],
							[
								104331,
								104352
							],
							[
								104367,
								104375
							],
							[
								104388,
								104397
							],
							[
								104419,
								104423
							],
							[
								104462,
								104466
							],
							[
								104613,
								104655
							],
							[
								104988,
								105016
							],
							[
								105076,
								105127
							],
							[
								105378,
								105421
							],
							[
								105474,
								105517
							],
							[
								105553,
								105558
							],
							[
								105635,
								105649
							],
							[
								105684,
								105694
							],
							[
								105707,
								105742
							],
							[
								105786,
								105794
							],
							[
								106341,
								106385
							],
							[
								106920,
								106943
							],
							[
								107356,
								107398
							],
							[
								108204,
								108227
							],
							[
								108599,
								108604
							],
							[
								109163,
								109176
							],
							[
								109212,
								109227
							],
							[
								109265,
								109282
							],
							[
								109324,
								109368
							],
							[
								109567,
								109574
							],
							[
								110285,
								110298
							],
							[
								110333,
								110342
							],
							[
								110399,
								110418
							],
							[
								110524,
								110537
							],
							[
								110712,
								110727
							],
							[
								110771,
								110788
							],
							[
								110834,
								110847
							],
							[
								110889,
								110902
							],
							[
								110944,
								110959
							],
							[
								111003,
								111020
							],
							[
								111148,
								111153
							],
							[
								111302,
								111328
							],
							[
								111505,
								111519
							],
							[
								111542,
								111547
							],
							[
								112181,
								112185
							],
							[
								112243,
								112247
							],
							[
								112490,
								112499
							],
							[
								112624,
								112637
							],
							[
								112711,
								112725
							],
							[
								112981,
								113004
							],
							[
								113022,
								113031
							],
							[
								113044,
								113055
							],
							[
								113065,
								113074
							],
							[
								113094,
								113122
							],
							[
								113230,
								113263
							],
							[
								113430,
								113452
							],
							[
								113470,
								113479
							],
							[
								113499,
								113512
							],
							[
								113570,
								113579
							],
							[
								113599,
								113641
							],
							[
								114114,
								114122
							],
							[
								114157,
								114168
							],
							[
								114245,
								114283
							],
							[
								114634,
								114655
							],
							[
								114740,
								114774
							],
							[
								114927,
								114966
							],
							[
								115022,
								115034
							],
							[
								115493,
								115501
							],
							[
								115633,
								115640
							],
							[
								115699,
								115707
							],
							[
								115821,
								115838
							],
							[
								115917,
								115921
							],
							[
								115975,
								115992
							],
							[
								116104,
								116152
							],
							[
								116433,
								116528
							],
							[
								116663,
								116675
							],
							[
								116685,
								116697
							],
							[
								116702,
								116715
							],
							[
								116821,
								116833
							],
							[
								116843,
								116855
							],
							[
								116860,
								116873
							],
							[
								116981,
								116989
							],
							[
								117200,
								117208
							],
							[
								117583,
								117593
							],
							[
								117673,
								117683
							],
							[
								117764,
								117772
							],
							[
								117903,
								117922
							],
							[
								118476,
								118480
							],
							[
								118549,
								118566
							],
							[
								118606,
								118621
							],
							[
								118659,
								118672
							],
							[
								118708,
								118723
							],
							[
								118833,
								118838
							],
							[
								118908,
								118917
							],
							[
								118938,
								118948
							],
							[
								119055,
								119120
							],
							[
								119471,
								119505
							],
							[
								119589,
								119632
							],
							[
								119848,
								119895
							],
							[
								120086,
								120137
							],
							[
								120357,
								120409
							],
							[
								120757,
								120800
							],
							[
								121172,
								121176
							],
							[
								121291,
								121366
							],
							[
								121740,
								121744
							],
							[
								121977,
								122019
							],
							[
								122083,
								122091
							],
							[
								122252,
								122293
							],
							[
								122340,
								122372
							],
							[
								122453,
								122486
							],
							[
								122545,
								122609
							],
							[
								122849,
								122890
							],
							[
								122928,
								122946
							],
							[
								122995,
								123002
							],
							[
								123196,
								123260
							],
							[
								123436,
								123501
							],
							[
								123514,
								123526
							],
							[
								123543,
								123554
							],
							[
								123578,
								123593
							],
							[
								123976,
								124006
							],
							[
								124183,
								124203
							],
							[
								124223,
								124277
							],
							[
								124500,
								124506
							],
							[
								124558,
								124563
							],
							[
								124619,
								124625
							],
							[
								124702,
								124707
							],
							[
								124750,
								124809
							],
							[
								126858,
								126871
							],
							[
								127019,
								127033
							],
							[
								127193,
								127206
							],
							[
								127288,
								127307
							],
							[
								127550,
								127587
							],
							[
								127935,
								128005
							],
							[
								128361,
								128403
							],
							[
								128454,
								128463
							],
							[
								128629,
								128664
							],
							[
								128791,
								128795
							],
							[
								128817,
								128828
							],
							[
								128938,
								128961
							],
							[
								129105,
								129129
							],
							[
								129230,
								129234
							],
							[
								129257,
								129261
							],
							[
								129273,
								129305
							],
							[
								129353,
								129393
							],
							[
								129622,
								129641
							],
							[
								129673,
								129737
							],
							[
								129789,
								129794
							],
							[
								129827,
								129857
							],
							[
								129944,
								129979
							],
							[
								130003,
								130029
							],
							[
								130143,
								130176
							],
							[
								130315,
								130373
							],
							[
								130398,
								130424
							],
							[
								130467,
								130502
							],
							[
								130545,
								130566
							],
							[
								130715,
								130741
							],
							[
								130899,
								130918
							],
							[
								131240,
								131289
							],
							[
								131314,
								131335
							],
							[
								131377,
								131393
							],
							[
								131447,
								131470
							],
							[
								131533,
								131561
							],
							[
								131623,
								131644
							],
							[
								131668,
								131673
							],
							[
								132246,
								132277
							],
							[
								132280,
								132298
							],
							[
								132350,
								132351
							],
							[
								132364,
								132375
							],
							[
								132930,
								132975
							],
							[
								133077,
								133101
							],
							[
								133364,
								133374
							],
							[
								133422,
								133443
							],
							[
								133491,
								133512
							],
							[
								133599,
								133640
							],
							[
								133788,
								133792
							],
							[
								133838,
								133846
							],
							[
								133875,
								133879
							],
							[
								134254,
								134267
							],
							[
								134320,
								134340
							],
							[
								134666,
								134723
							],
							[
								134830,
								134841
							],
							[
								135181,
								135201
							],
							[
								135241,
								135277
							],
							[
								135306,
								135319
							],
							[
								135362,
								135372
							],
							[
								135417,
								135432
							],
							[
								136406,
								136419
							],
							[
								136990,
								137010
							],
							[
								137085,
								137100
							],
							[
								137478,
								137491
							],
							[
								137562,
								137582
							],
							[
								137664,
								137679
							],
							[
								137745,
								137774
							],
							[
								137848,
								137881
							],
							[
								137993,
								138007
							],
							[
								138047,
								138062
							],
							[
								138084,
								138112
							],
							[
								138641,
								138664
							],
							[
								138871,
								138899
							],
							[
								139006,
								139048
							],
							[
								139375,
								139431
							],
							[
								139665,
								139706
							],
							[
								139797,
								139808
							],
							[
								139952,
								139965
							],
							[
								140286,
								140302
							],
							[
								140331,
								140383
							],
							[
								140452,
								140459
							],
							[
								140544,
								140558
							],
							[
								140640,
								140650
							],
							[
								140756,
								140760
							],
							[
								140792,
								140812
							],
							[
								140863,
								140876
							],
							[
								140926,
								140938
							],
							[
								141232,
								141247
							],
							[
								141568,
								141578
							],
							[
								141633,
								141643
							],
							[
								141727,
								141738
							],
							[
								141795,
								141802
							],
							[
								142406,
								142416
							],
							[
								142482,
								142493
							],
							[
								142561,
								142573
							],
							[
								142608,
								142621
							],
							[
								142666,
								142681
							],
							[
								142700,
								142727
							],
							[
								142913,
								142956
							],
							[
								143117,
								143177
							],
							[
								143263,
								143288
							],
							[
								143337,
								143380
							],
							[
								143391,
								143401
							],
							[
								143410,
								143439
							],
							[
								143695,
								143711
							],
							[
								143733,
								143744
							],
							[
								143794,
								143824
							],
							[
								143893,
								143898
							],
							[
								143927,
								143932
							],
							[
								144227,
								144240
							],
							[
								144291,
								144322
							],
							[
								144343,
								144356
							],
							[
								144357,
								144377
							],
							[
								144466,
								144502
							],
							[
								144575,
								144590
							],
							[
								144671,
								144683
							],
							[
								145158,
								145163
							],
							[
								145886,
								145913
							],
							[
								145938,
								145943
							],
							[
								145994,
								146023
							],
							[
								146102,
								146107
							],
							[
								146189,
								146202
							],
							[
								146253,
								146264
							],
							[
								146304,
								146325
							],
							[
								146449,
								146466
							],
							[
								146596,
								146616
							],
							[
								146812,
								146838
							],
							[
								146930,
								146936
							],
							[
								146966,
								146971
							],
							[
								147047,
								147080
							],
							[
								147238,
								147243
							],
							[
								147294,
								147307
							],
							[
								147331,
								147337
							],
							[
								147420,
								147444
							],
							[
								147538,
								147549
							],
							[
								147605,
								147618
							],
							[
								147680,
								147691
							],
							[
								147790,
								147800
							],
							[
								147898,
								147911
							],
							[
								148024,
								148033
							],
							[
								148091,
								148103
							],
							[
								148186,
								148194
							],
							[
								148294,
								148301
							],
							[
								148403,
								148423
							],
							[
								148611,
								148632
							],
							[
								148891,
								148908
							],
							[
								149061,
								149073
							],
							[
								149202,
								149216
							],
							[
								149387,
								149400
							],
							[
								149417,
								149437
							],
							[
								149696,
								149726
							],
							[
								149732,
								149758
							],
							[
								149777,
								149803
							],
							[
								149832,
								149850
							],
							[
								149916,
								149950
							],
							[
								150064,
								150118
							],
							[
								150145,
								150165
							],
							[
								150255,
								150272
							],
							[
								150368,
								150390
							],
							[
								150497,
								150521
							],
							[
								150629,
								150659
							],
							[
								150690,
								150699
							],
							[
								150742,
								150761
							],
							[
								150910,
								150930
							],
							[
								151047,
								151066
							],
							[
								151180,
								151196
							],
							[
								151304,
								151314
							],
							[
								151392,
								151399
							],
							[
								151465,
								151474
							],
							[
								151819,
								151840
							],
							[
								151849,
								151877
							],
							[
								151887,
								151932
							],
							[
								151987,
								151998
							],
							[
								152020,
								152030
							],
							[
								152043,
								152054
							],
							[
								152082,
								152115
							],
							[
								152276,
								152308
							],
							[
								152376,
								152398
							],
							[
								152570,
								152606
							],
							[
								152768,
								152784
							],
							[
								152845,
								152881
							],
							[
								152957,
								152968
							],
							[
								153033,
								153037
							],
							[
								153076,
								153089
							],
							[
								153203,
								153239
							],
							[
								153416,
								153421
							],
							[
								153462,
								153515
							],
							[
								154453,
								154482
							],
							[
								154636,
								154673
							],
							[
								154684,
								154697
							],
							[
								154710,
								154719
							],
							[
								154766,
								154786
							],
							[
								154820,
								154836
							],
							[
								155059,
								155080
							],
							[
								155208,
								155240
							],
							[
								155267,
								155276
							],
							[
								155288,
								155301
							],
							[
								155379,
								155403
							],
							[
								155470,
								155479
							],
							[
								155495,
								155505
							],
							[
								155522,
								155539
							],
							[
								155567,
								155576
							],
							[
								155577,
								155600
							],
							[
								155646,
								155670
							],
							[
								155818,
								155823
							],
							[
								155841,
								155850
							],
							[
								155951,
								155959
							],
							[
								155963,
								155972
							],
							[
								155994,
								156007
							],
							[
								156024,
								156037
							],
							[
								156044,
								156057
							],
							[
								156083,
								156100
							],
							[
								156113,
								156129
							],
							[
								156199,
								156204
							],
							[
								156222,
								156231
							],
							[
								156332,
								156340
							],
							[
								156353,
								156362
							],
							[
								156377,
								156382
							],
							[
								156470,
								156507
							],
							[
								156664,
								156680
							],
							[
								156694,
								156716
							],
							[
								156829,
								156835
							],
							[
								157883,
								157898
							],
							[
								157948,
								157962
							],
							[
								157976,
								157991
							],
							[
								158521,
								158538
							],
							[
								158588,
								158604
							],
							[
								158888,
								158918
							],
							[
								158936,
								158945
							],
							[
								158963,
								158973
							],
							[
								158986,
								158995
							],
							[
								159138,
								159167
							],
							[
								159185,
								159194
							],
							[
								159212,
								159222
							],
							[
								159226,
								159235
							],
							[
								160516,
								160568
							],
							[
								160634,
								160657
							],
							[
								160729,
								160747
							],
							[
								161096,
								161106
							],
							[
								161110,
								161124
							],
							[
								161326,
								161358
							],
							[
								161385,
								161420
							],
							[
								161460,
								161483
							],
							[
								161644,
								161660
							],
							[
								161845,
								161854
							],
							[
								161880,
								161900
							],
							[
								161927,
								161936
							],
							[
								161951,
								161975
							],
							[
								162115,
								162160
							],
							[
								162192,
								162210
							],
							[
								162356,
								162368
							],
							[
								162513,
								162518
							],
							[
								162832,
								162839
							],
							[
								162976,
								162995
							],
							[
								163013,
								163035
							],
							[
								163315,
								163357
							],
							[
								163374,
								163411
							],
							[
								163654,
								163673
							],
							[
								164043,
								164083
							],
							[
								164126,
								164140
							],
							[
								164210,
								164240
							],
							[
								164289,
								164319
							],
							[
								164386,
								164464
							],
							[
								164914,
								164942
							],
							[
								164994,
								165058
							],
							[
								165076,
								165100
							],
							[
								165359,
								165378
							],
							[
								165493,
								165529
							],
							[
								166254,
								166292
							],
							[
								166309,
								166347
							],
							[
								167642,
								167649
							],
							[
								167705,
								167723
							],
							[
								167935,
								167942
							],
							[
								167990,
								167994
							],
							[
								168121,
								168129
							],
							[
								168196,
								168208
							],
							[
								169185,
								169251
							],
							[
								169252,
								169269
							],
							[
								169507,
								169518
							],
							[
								169535,
								169554
							],
							[
								169668,
								169732
							],
							[
								169748,
								169757
							],
							[
								169769,
								169777
							],
							[
								169830,
								169845
							],
							[
								169861,
								169867
							],
							[
								169891,
								169904
							],
							[
								170099,
								170116
							],
							[
								170161,
								170186
							],
							[
								170285,
								170291
							],
							[
								170411,
								170443
							],
							[
								170520,
								170524
							],
							[
								170654,
								170675
							],
							[
								170713,
								170734
							],
							[
								170775,
								170808
							],
							[
								171041,
								171068
							],
							[
								171160,
								171164
							],
							[
								171271,
								171276
							],
							[
								171540,
								171586
							],
							[
								172176,
								172185
							],
							[
								172421,
								172474
							],
							[
								172485,
								172511
							],
							[
								172814,
								172830
							],
							[
								172914,
								172925
							],
							[
								173171,
								173175
							],
							[
								173459,
								173512
							],
							[
								173740,
								173753
							],
							[
								173764,
								173780
							],
							[
								173955,
								173964
							],
							[
								174006,
								174015
							],
							[
								174055,
								174060
							],
							[
								174096,
								174114
							],
							[
								174135,
								174166
							],
							[
								174273,
								174292
							],
							[
								174585,
								174598
							],
							[
								174687,
								174705
							],
							[
								174800,
								174817
							],
							[
								174950,
								174957
							],
							[
								175076,
								175082
							],
							[
								175232,
								175240
							],
							[
								175359,
								175369
							],
							[
								175598,
								175607
							],
							[
								176105,
								176145
							],
							[
								176454,
								176489
							],
							[
								176820,
								176826
							],
							[
								176862,
								176880
							],
							[
								176924,
								176934
							],
							[
								177017,
								177027
							],
							[
								177076,
								177108
							],
							[
								177355,
								177374
							],
							[
								177992,
								178014
							],
							[
								178313,
								178373
							],
							[
								178639,
								178664
							],
							[
								179065,
								179090
							],
							[
								179119,
								179135
							],
							[
								179144,
								179155
							],
							[
								179247,
								179253
							],
							[
								179262,
								179273
							],
							[
								179333,
								179357
							],
							[
								179375,
								179384
							],
							[
								179408,
								179417
							],
							[
								179445,
								179456
							],
							[
								179483,
								179494
							],
							[
								179527,
								179540
							],
							[
								179559,
								179572
							],
							[
								179584,
								179597
							],
							[
								179748,
								179759
							],
							[
								179861,
								179886
							],
							[
								179904,
								179930
							],
							[
								180021,
								180055
							],
							[
								180327,
								180348
							],
							[
								180413,
								180431
							],
							[
								180599,
								180635
							],
							[
								181057,
								181077
							],
							[
								181280,
								181295
							],
							[
								181571,
								181594
							],
							[
								181803,
								181821
							],
							[
								182039,
								182051
							],
							[
								182081,
								182096
							],
							[
								182141,
								182147
							],
							[
								182199,
								182213
							],
							[
								182355,
								182373
							],
							[
								182569,
								182601
							],
							[
								182667,
								182683
							],
							[
								183019,
								183035
							],
							[
								183482,
								183485
							],
							[
								183498,
								183499
							],
							[
								183529,
								183565
							],
							[
								184006,
								184045
							],
							[
								184134,
								184160
							],
							[
								184208,
								184269
							],
							[
								184676,
								184704
							],
							[
								184811,
								184829
							],
							[
								185124,
								185162
							],
							[
								185216,
								185221
							]
						],
						"symlist":
						[
							" function Util(g)",
							"Util.formatAnnotatedObject = function(subject, o)",
							"i =>",
							"item =>",
							"padding = x =>",
							"arr =>",
							"Util.curry = (fn, arity) =>",
							"ret = function curried(...args)",
							" (v, i) =>",
							"Curried = function(...a)",
							" function()",
							" function(a)",
							" function(a, b)",
							" function(a, b, c)",
							" function(a, b, c, d)",
							"get()",
							"Util.arityN = (fn, n) =>",
							" function(fn)",
							" function()",
							" function(fn)",
							" function(a)",
							" function(fn)",
							" function(a, b)",
							" function(fn)",
							" function(a, b, c)",
							" function(fn)",
							" function(a, b, c, d)",
							" function(fn)",
							" function(a, b, c, d, e)",
							"Util.getter = target =>",
							"self = function(key)",
							".fn = key =>",
							".fn = key =>",
							"Util.setter = target =>",
							"set = function(key, value)",
							".fn = (key, value) =>",
							".fn = (key, value) =>",
							"Util.remover = target =>",
							" key =>",
							" key =>",
							"Util.hasFn = target =>",
							" key =>",
							" key =>",
							"Util.adder = target =>",
							" arg =>",
							" arg =>",
							"self = function(obj, arg = 1)",
							" function ChooseFn(a, o)",
							".fn = (obj, arg) =>",
							".fn = (obj, arg) =>",
							".fn = (obj, arg) =>",
							".fn = (num, arg) =>",
							".fn = (obj, arg) =>",
							"Util.updater = (target, get, set, fn) =>",
							" (k, f, i) =>",
							" function doUpdate(key, func, i)",
							"create = () =>",
							" key =>",
							" () =>",
							"self = function(...args)",
							"Util.once = (fn, thisArg, memoFn) =>",
							" function(...args)",
							"Util.delay = (func, wait, thisObj) =>",
							" function(...args)",
							"function ()",
							"Util.throttle = (f, t, thisObj) =>",
							" function(...args)",
							"Util.debounce = (func, wait, options = {}) =>",
							" function later()",
							" function debounced(...a)",
							".clear = function()",
							".flush = function()",
							"Util.debounceAsync = (fn, wait, options = {}) =>",
							" function(...a)",
							"resolve =>",
							"() =>",
							"arg =>",
							" g =>",
							" g =>",
							" () =>",
							" err =>",
							" () =>",
							" err =>",
							" () =>",
							" err =>",
							"() =>",
							"Util.log = (...args) =>",
							"f =>",
							"f =>",
							"(a, p, i) =>",
							"get: () =>",
							".setFilters = function(args)",
							"arg =>",
							".getFilters = function()",
							"Util.msg = (strings, ...substitutions) =>",
							"(base, n) =>",
							"Util.generalLog = function(n, x)",
							"Util.toSource = function(arg, opts = {})",
							"print = (...args) =>",
							"Util.debug = function(message)",
							"removeCircular = function(key, value)",
							"arg =>",
							"Util.type = function({ type })",
							"Util.functionName = function(fn)",
							"Util.className = function(obj)",
							"obj",
							"Util.unwrapComponent = function(c)",
							"Util.componentName = function(c)",
							"Util.count = function(s, ch)",
							"Util.parseNum = function(str)",
							"Util.minmax = function(num, min, max)",
							"Util.getExponential = function(num)",
							"Util.getNumberParts = function(num)",
							"Util.pow2 = function(n)",
							"Util.pow10 = function(n)",
							"Util.bitValue = function(n)",
							"Util.bitMask = function(bits, start = 0)",
							"Util.bitGroups = function(num, bpp, minLen)",
							"Util.bitStuff = (arr, bpp) =>",
							"([b, f], n) =>",
							"Util.toBinary = function(num)",
							"Util.toBits = function(num)",
							" bit =>",
							"Util.getBit = function(v, n)",
							"Util.isSet = function(v, n)",
							"Util.bitCount = function(n)",
							"Util.bitNo = function(n)",
							"Util.toggleBit = function(num, bit)",
							"Util.setBit = function(num, bit)",
							"Util.clearBit = function(num, bit)",
							"Util.range = function(...args)",
							" (v, k) =>",
							"n =>",
							"Util.set = function(obj, prop, value)",
							" (prop, value) =>",
							" (prop, value) =>",
							" (prop, value) =>",
							" value =>",
							"(obj, prop) =>",
							"() =>",
							"Util.bitArrayToNumbers = function(arr)",
							"Util.bitsToNumbers = function(bits)",
							"(val, key, arr) =>",
							"Util.shuffle = function(arr, rnd = Util.rng)",
							"(a, b) =>",
							"Util.sortNum = function(arr)",
							"(a, b) =>",
							"Util.draw = (arr, n = 1, rnd = Util.rng) =>",
							"Util.is = function(what, ...pred)",
							"type =>",
							"fn =>",
							"Util.instanceOf = (value, ctor) =>",
							"Util.onoff = function(val)",
							"Util.numbersToBits = function(arr)",
							"(bits, num) =>",
							"Util.randomNumbers = function([start, end], draws)",
							"Util.randomBits = function(r = [1, 50], n = 5)",
							"Util.padFn = function(len, char = ' ', fn = (str, pad) => pad)",
							" (s, n = len) =>",
							"Util.pad = function(s, n, char = ' ')",
							"Util.abbreviate = function(str, max = 40, suffix = '...')",
							"Util.trim = function(str, charset)",
							"Util.trimRight = function(str, charset)",
							"Util.indent = (text, space = ' ') =>",
							"Util.define = (obj, ...args) =>",
							"Util.memoizedProperties = (obj, methods) =>",
							"get()",
							"Util.copyWhole = (dst, ...args) =>",
							"Util.copyEntries = (obj, entries) =>",
							"Util.extend = (...args) =>",
							"Util.isCloneable = obj =>",
							"Util.isUnextendable = val =>",
							"pred = (k, v, f) =>",
							"(key, depth) =>",
							"value = function(...args)",
							"Util.defineGetter = (obj, key, fn, enumerable = false) =>",
							"Util.defineGetterSetter = (obj, key, g, s, enumerable = false) =>",
							"Util.defineGettersSetters = (obj, gettersSetters) =>",
							"Util.extendArray = function(arr = Array.prototype)",
							" function(pred)",
							" function()",
							" function()",
							"(item, i, a) =>",
							" function()",
							" function(value)",
							"Util.adapter = function(obj, getLength = obj => obj.length, getKey = (obj, index) => obj.",
							"(index), getItem = (obj, key) => obj[key], setItem = (obj, index, value) => (obj[index] = value))",
							"get length()",
							"get instance()",
							"key(i)",
							"get(key)",
							"has(key)",
							"set(key, value)",
							"*keys()",
							"*entries()",
							"toObject()",
							"toMap()",
							".localStorage = function(s)",
							" () =>",
							" w =>",
							" () =>",
							" l =>",
							" (l, i) =>",
							" (l, key) =>",
							" (l, key, v) =>",
							"Util.array = function(a)",
							"Util.arrayFromEntries = entries =>",
							"([k, v]) =>",
							" key =>",
							"([k, v]) =>",
							"Util.toMap = function(hash = {}, fn)",
							"Util.extendMap = function(map)",
							".entries = function* iterator()",
							".toObject = function()",
							".match = function(...args)",
							" entries =>",
							"Util.objectFrom = function(any)",
							"Util.tail = function(arr)",
							"Util.splice = function(str, index, delcount, insert)",
							"Util.identity = arg =>",
							"Util.reverse = arr =>",
							"Util.keyOf = function(obj, prop)",
							"Util.rotateRight = function(arr, n)",
							"Util.repeater = function(n, what)",
							"function* ()",
							"function* ()",
							"Util.repeat = function(n, what)",
							"Util.arrayDim = function(dimensions, init)",
							"Util.flatten = function(arr)",
							"Util.chunkArray = (a, size) =>",
							"(acc, item, i) =>",
							"Util.partition = function* (a, size)",
							"Util.difference = (a, b, incicludes) =>",
							"x =>",
							"x =>",
							"x =>",
							"x =>",
							"Util.intersect = (a, b) =>",
							"Util.symmetricDifference = (a, b) =>",
							"Util.union = (a, b, equality) =>",
							"Util.partition = (array, callback) =>",
							"Util.chances = function(numbers, matches)",
							"Util.sum = arr =>",
							"(acc, n) =>",
							"Util.expr = fn =>",
							" function expr(...args)",
							" function addArgs(args)",
							"ret = function returnFn(...args)",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"Util.mod = (a, b) =>",
							" n =>",
							"(a, b) =>",
							"Util.fnName = function(f, parent)",
							"Util.objName = function(o)",
							"Util.findKey = function(obj, pred, thisVal)",
							"value : v =>",
							"Util.find = function(arr, value, prop = 'id')",
							"pred = function(obj)",
							" obj =>",
							" obj =>",
							"pred = ([key, value], arr) =>",
							"Util.findIndex = function(obj, pred, thisArg)",
							"Util.match = function(arg, pred)",
							"match = (val, key) =>",
							"(acc, val, key) =>",
							"(acc, key) =>",
							"Util.toHash = function(map, keyTransform = k => ",
							"('' + k))",
							" (v, k) =>",
							"Util.indexOf = function(obj, prop)",
							"Util.greatestCommonDenominator = (a, b) =>",
							"Util.leastCommonMultiple = (n1, n2) =>",
							"function* (re, str)",
							"Util.inspect = function(obj, opts = {})",
							"stringFn = str =>",
							"print = (...args) =>",
							" (space = false) =>",
							" (space = false) =>",
							" key =>",
							" key =>",
							"Util.dump = function(name, props)",
							" () =>",
							" w =>",
							" () =>",
							"Util.ucfirst = function(str)",
							"Util.lcfirst = function(str)",
							"Util.typeOf = v =>",
							"Util.camelize = (text, sep = '') =>",
							" (match, p1, p2, offset) =>",
							"Util.decamelize = function(str, separator = '-')",
							"Util.ifThenElse = function(pred = value => !!value, _then = () => {}, _else = () => {})",
							" function(value)",
							"Util.if = (value, _then, _else, pred) =>",
							"v =>",
							"() =>",
							"() =>",
							"Util.ifElse = (value, _else, pred) =>",
							"v =>",
							" () =>",
							" () =>",
							" () =>",
							"Util.ifThen = (value, _then, pred) =>",
							"v =>",
							" () =>",
							" () =>",
							" () =>",
							"Util.switch = ({ default: defaultCase, ...cases }) =>",
							" function(value)",
							"function* (fn, arr)",
							"Util.colorDump = (iterable, textFn) =>",
							"(color, n) =>",
							"Util.bucketInserter = (map, ...extraArgs) =>",
							" function(...args)",
							" function(...args)",
							"Util.fifo = function fifo()",
							"resolve = () =>",
							"async function* generator()",
							"r =>",
							"push(...args)",
							"process: async function run()",
							"Util.isEmail = function(v)",
							"Util.isString = function(v)",
							"Util.isNumeric = v =>",
							"Util.isUndefined = arg =>",
							"Util.isObject = obj =>",
							"Util.isPrimitive = obj =>",
							"Util.isFunction = arg =>",
							"Util.not = fn =>",
							" function(...args)",
							"Util.isAsync = fn =>",
							"Util.isArrowFunction = fn =>",
							"Util.isEmptyString = v =>",
							"Util.isEmpty = (...args) =>",
							" function empty(v)",
							"Util.isNonEmpty = (...args) =>",
							"nonEmpty = v =>",
							"Util.isIpAddress = v =>",
							"i =>",
							"i =>",
							"Util.isPortNumber = v =>",
							"Util.hasProps = function(obj, props)",
							"prop =>",
							"Util.validatePassword = function(value)",
							"Util.clone = function(obj, proto)",
							"constructor",
							"Util.deepClone = function(data)",
							"Util.findVal = function(object, propName, maxDepth = 10)",
							"Util.deepCloneObservable = function(data)",
							"Util.toArray = function(observableArray)",
							"Util.arryToTree = function(data, id, pId, appId)",
							"(e, i) =>",
							"Util.to3wei = function(a, old, id, pId)",
							"(e, i) =>",
							"(se, si) =>",
							"Util.arrExchangePos = function(arr, i, j)",
							"Util.arrRemove = function(arr, i)",
							"Util.move = function(src, dst = [])",
							"Util.moveIf = function(src, pred, dst = [])",
							"Util.logOutClearStorage = function()",
							"Util.getCookie = function(cookie, name)",
							"Util.parseCookie = function(c = document.cookie)",
							"pred = char =>",
							"char =>",
							"char =>",
							"Util.encodeCookie = c =>",
							"([key, value]) =>",
							"Util.setCookies = c =>",
							"([key, value]) =>",
							"Util.clearCookies = function(c)",
							" (acc, name) =>",
							"Util.deleteCookie = function(name)",
							" () =>",
							" w =>",
							" () =>",
							"Util.accAdd = function(arg1, arg2)",
							"Util.Subtr = function(arg1, arg2)",
							"Util.accDiv = function(arg1, arg2)",
							"Util.accMul = function(arg1, arg2)",
							"Util.dateFormatter = function(date, formate)",
							"Util.numberFormatter = function(numStr)",
							"Util.searchObject = function(object, matchCallback, currentPath, result, searched)",
							"(req = {}) =>",
							" () =>",
							" () =>",
							" () =>",
							" url =>",
							" () =>",
							"() =>",
							"() =>",
							"() =>",
							"() =>",
							"() =>",
							"() =>",
							"Util.parseQuery = function(url = ",
							")",
							"Util.encodeQuery = function(data)",
							"Util.parseURL = function(href = this.",
							")",
							"part =>",
							"([k, v]) =>",
							"(acc, m) =>",
							"href(override)",
							"Util.makeURL = function(...args)",
							"Util.numberFromURL = function(url, fn)",
							"Util.tryPromise = fn =>",
							"(resolve, reject) =>",
							"resolve = a =>",
							"reject = () =>",
							"resolve = () =>",
							"reject = () =>",
							"async function(...args)",
							" function(...args)",
							"resolve = a =>",
							"reject = () =>",
							"Util.putError = err =>",
							"() =>",
							" fn =>",
							" ret =>",
							"Util.tryPredicate = (fn, defaultRet) =>",
							" ret =>",
							" () =>",
							"Util.isBrowser = function()",
							" () =>",
							" w =>",
							" () =>",
							" () =>",
							" d =>",
							" () =>",
							"Util.waitFor = async function waitFor(msecs)",
							"({ setTimeout, clearTimeout, setInterval, clearInterval }) =>",
							"async (resolve, reject) =>",
							"() =>",
							"clear = () =>",
							"Util.timeout = async (msecs, promises, promiseClass = Promise) =>",
							"Util.isServer = function()",
							"Util.isMobile = function()",
							"Util.uniquePred = (cmp = null) =>",
							" (el, i, arr) =>",
							"item =>",
							" (el, i, arr) =>",
							"Util.unique = (arr, cmp) =>",
							"cmp = (a, b) =>",
							"(e, i, a) =>",
							"Util.zip = a =>",
							"(a, b) =>",
							"(_, i) =>",
							"arr =>",
							"Util.histogram = (...args) =>",
							" (k, v) =>",
							"initVal = () =>",
							"setVal = v =>",
							"(it, i) =>",
							"(item, i) =>",
							" (entry, idx, key) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"Util.concat = function* (...args)",
							"Util.distinct = function(arr)",
							" (value, index, me) =>",
							"Util.rangeMinMax = function(arr, field)",
							"obj =>",
							"Util.remap = (...args) =>",
							"getR = () =>",
							"r = val =>",
							"Util.mergeLists = function(arr1, arr2, key = 'id')",
							"Util.foreach = function(o, fn)",
							"Util.all = function(obj, pred)",
							"Util.isGenerator = function(fn)",
							"Util.isIterator = obj =>",
							"Util.isIterable = obj =>",
							"x =>",
							"Util.isConstructor = x =>",
							"construct(target, args)",
							"target",
							"x",
							"m =>",
							"Util.filter = function(a, pred)",
							"function* ()",
							"fn = (k, v) =>",
							"Util.reduce = (obj, fn, accu) =>",
							"Util.mapFunctional = fn =>",
							" function* (arg)",
							"Util.map = (...args) =>",
							"ret = a =>",
							"function* ()",
							"ret = a =>",
							"function* ()",
							"Util.entriesToObj = function(arr)",
							"(acc, item) =>",
							"Util.isDate = function(d)",
							"Util.parseDate = function(d)",
							"Util.isoDate = function(date)",
							"Util.toUnixTime = function(dateObj, utc = false)",
							"Util.unixTime = function(utc = false)",
							"Util.fromUnixTime = function(epoch, utc = false)",
							"Util.formatTime = function(date = ",
							"(), format = 'HH:MM:SS')",
							"Util.leapYear = function(year)",
							"Util.timeSpan = function(s)",
							"Util.randFloat = function(min, max, rnd = Util.rng)",
							"Util.randInt = (...args) =>",
							"Util.randStr = (len, charset, rnd = Util.rng) =>",
							"Util.hex = function(num, numDigits)",
							"Util.numberParts = (num, base) =>",
							"Util.roundDigits = precision =>",
							"Util.roundFunction = (prec, digits, type) =>",
							" function(value)",
							"Util.roundTo = function(value, prec, digits, type)",
							"() =>",
							" utf8 =>",
							" v =>",
							" utf8 =>",
							" base64 =>",
							" v =>",
							" string =>",
							"Util.formatRecord = function(obj)",
							"item =>",
							" function(obj)",
							".isArrayLike = obj =>",
							"Util.equals = function(a, b)",
							"(e, i) =>",
							"Util.versionCompare = (a, b) =>",
							"isdigit = c =>",
							"Util.isGetter = (obj, propName) =>",
							"Util.isBool = value =>",
							"Util.size = (...args) =>",
							" function size(obj)",
							"Util.isMap = function(obj)",
							"Util.effectiveDeviceWidth = function()",
							"Util.getFormFields = function(initialState)",
							" (acc, { elements }) =>",
							"(acc2, { name, value }) =>",
							"Util.mergeObjects = function(objArr, predicate = (dst, src, key) => (src[key] == '' ? undefined : src[key]))",
							"Util.getUserAgent = function(headers = req.headers)",
							"Util.factor = function(start, end)",
							"Util.factorial = function(n)",
							"Util.increment = function(obj, key)",
							"Util.counter = function()",
							"self = function()",
							"Util.filterKeys = function(obj, pred = k => true)",
							"pred = str =>",
							"pred = str =>",
							"Util.filterMembers = function(obj, fn)",
							"pred = (k, v, o) =>",
							"Util.filterOutMembers = function(obj, fn)",
							"pred = (v, k, o) =>",
							"Util.dumpMembers = obj =>",
							"Util.filterOutKeys = function(obj, arr)",
							" (v, k, o) =>",
							" (k, v) =>",
							" key =>",
							" () =>",
							" (v, k, o) =>",
							"Util.removeKeys = function(obj, arr)",
							" (v, k, o) =>",
							" (k, v) =>",
							" key =>",
							"Util.getKeys = function(obj, arr)",
							"Util.numbersConvert = function(str)",
							"(ch, i) =>",
							"Util.entries = function(arg)",
							"function* ()",
							"Util.keys = function(arg)",
							" function* ()",
							"Util.values = function(arg)",
							" function* ()",
							"Util.removeEqual = function(a, b)",
							"Util.clear = obj =>",
							"Util.remove = (arr, item) =>",
							" (other, i, arr) =>",
							"Util.removeIf = function(arr, pred)",
							"Util.traverse = function(o, fn)",
							" (v, k, a) =>",
							" function* walker(o, depth = 0)",
							"Util.traverseWithPath = function(o, rootPath = [])",
							" function* walker(o, path)",
							"Util.indexByPath = function(o, p)",
							"Util.pushUnique = (arr, ...args) =>",
							"(acc, item) =>",
							"Util.insertSorted = function(arr, item, cmp = (a, b) => b - a)",
							"next = (k, v) =>",
							" (k, v) =>",
							" (k, v) =>",
							" (k, v) =>",
							"fn = function(key, value)",
							"Util.keyIterator = obj =>",
							"Util.entryIterator = obj =>",
							"function* ()",
							"Util.mapAdapter = getSetFunction =>",
							"get(key)",
							"set(key, value)",
							".keys = () =>",
							".entries = () =>",
							"Util.mapFunction = map =>",
							"fn = function(...args)",
							"m =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".update = function(key, fn = (k, v) => v)",
							".entries = function* ()",
							".values = function* ()",
							".keys = function* ()",
							" function()",
							"([key, value]) =>",
							".keys = async () =>",
							".entries = async () =>",
							".values = async () =>",
							".keys = function* ()",
							".entries = function* ()",
							".values = function* ()",
							".filter = function(pred)",
							"function* ()",
							".map = function(t)",
							"function* ()",
							".forEach = function(fn)",
							".delete = key =>",
							".has = key =>",
							"Util.mapWrapper = (map, toKey = key => key, fromKey = key => key) =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".keys = () =>",
							".entries = function* ()",
							".values = function* ()",
							".has = key =>",
							".delete = key =>",
							"m =>",
							"Util.mapCombinator = (forward, backward) =>",
							"fn = function(key, value)",
							"(a,m) =>",
							" key =>",
							" a =>",
							" function makeGetter(map, next = a => a)",
							" key =>",
							"Util.predicate = (fn_or_regex, pred) =>",
							"fn = arg =>",
							".valueOf = function()",
							" arg =>",
							"Util.some = predicates =>",
							" value =>",
							"pred =>",
							"Util.every = predicates =>",
							" value =>",
							"pred =>",
							"Util.iterateMembers = function* (obj, predicate = (name, depth, obj, proto) => true, depth = 0)",
							" (...predicates) =>",
							" (...args) =>",
							"pred =>",
							" (...predicates) =>",
							" (...args) =>",
							"pred =>",
							"(pred, obj) =>",
							"Util.memberNameFilter = (depth = 1, start = 0) =>",
							" (m, l, o) =>",
							" (m, l, o) =>",
							" (name, depth, obj, proto) =>",
							"Util.getMemberNames = (obj, ...args) =>",
							"Util.getMemberEntries = (obj, ...args) =>",
							"name =>",
							"accFn = (a, m, o) =>",
							" (obj, ...args) =>",
							" (a, m) =>",
							" (r, a, m) =>",
							" (r, a) =>",
							"incFn = (c, n, self) =>",
							"incFn = (c, n, self) =>",
							"inc = (i, n = 1) =>",
							"self = function Count(n = 1)",
							".valueOf = function()",
							"filterFn = (key, value) =>",
							"(acc, mem, idx) =>",
							" r =>",
							" () =>",
							"fn = function ReduceIntoMap(arg, acc = mapObj)",
							"(acc, arg) =>",
							" (a, m, o) =>",
							"Util.methodNameFilter = (depth = 1, start = 0) =>",
							" (m, l, o) =>",
							" () =>",
							" b =>",
							" () =>",
							"Util.getMethodNames = (obj, depth = 1, start = 0) =>",
							" (a, m, o) =>",
							"Util.inherit = (dst, src, depth = 1) =>",
							" function inherits(ctor, superCtor)",
							"ctor",
							"superCtor",
							" function inherits(ctor, superCtor)",
							"TempCtor = function()",
							"TempCtor",
							"superCtor",
							"ctor",
							"ctor",
							"Util.bindMethods = (obj, methods, dest) =>",
							"Util.getConstructor = obj =>",
							"Util.getPrototypeChain = function(obj, fn = p => p)",
							"Util.getObjectChain = (obj, fn = p => p) =>",
							"Util.getPropertyDescriptors = function(obj)",
							" p =>",
							"fn = (c, p) =>",
							" (p, o) =>",
							"Util.weakDefine = function(...args)",
							"other =>",
							"Util.exception = function Exception(...args)",
							"toString(color = false)",
							"Util.location = function Location(...args)",
							"toString(color = false)",
							" t =>",
							"getFileName()",
							"getLineNumber()",
							"getColumnNumber()",
							"Util.stackFrame = function StackFrame(frame)",
							"prop =>",
							"propertyMap()",
							"method =>",
							"([method, func]) =>",
							"getFunction()",
							"getMethodName()",
							"getFunctionName()",
							"getTypeName()",
							"getFileName()",
							"getLineNumber()",
							"getColumnNumber()",
							"get()",
							"toString(color, opts = {})",
							" (t, color) =>",
							" t =>",
							"p =>",
							"p =>",
							"(f, i) =>",
							"getLocation()",
							"get location()",
							"Util.scriptName = () =>",
							" () =>",
							" args =>",
							" () =>",
							"Util.getFunctionName = () =>",
							"Util.getFunctionArguments = fn =>",
							"Util.scriptDir = () =>",
							" () =>",
							" script =>",
							" () =>",
							"Util.stack = function Stack(stack, offset)",
							"frame =>",
							"([m, p]) =>",
							" (acc, [method, property]) =>",
							" function getStack()",
							".prepareStackTrace = (_, stack) =>",
							" function stackToString(st, start = 0)",
							"function* ()",
							"frame =>",
							"part =>",
							"frame =>",
							"([func, file]) =>",
							"n =>",
							"([func, file]) =>",
							"([func, [columnNumber, lineNumber, ...file]]) =>",
							"({ methodName, functionName: func, fileName: file, columnNumber: column, lineNumber: line }) =>",
							" s =>",
							" s =>",
							" () =>",
							" s =>",
							" s =>",
							" () =>",
							"frame =>",
							"frame =>",
							"get: () =>",
							"get: () =>",
							"*value()",
							"toString(opts = {})",
							"f =>",
							"getFunctionName()",
							"getMethodName()",
							"getFileName()",
							"getLineNumber()",
							"get()",
							"(a, f) =>",
							"(fn, i) =>",
							"Util.getCallerStack = function(position = 2, limit = 1000, stack)",
							".prepareStackTrace = (_, stack) =>",
							"Util.getCallerFile = function(position = 2)",
							"Util.getCallerFunction = function(position = 2)",
							"Util.getCallerFunctionName = function(position = 2)",
							"Util.getCallerFunctionNames = function(position = 2)",
							"Util.getCaller = function(index = 1, stack)",
							"f =>",
							"Util.getCallers = function(index = 1, num = Number.MAX_SAFE_INTEGER, stack)",
							"f =>",
							"Util.getStackFrames = function(offset = 2)",
							"frame =>",
							"Util.getStackFrame = function(offset = 2)",
							"Util.rotateLeft = function(x, n)",
							"Util.rotateRight = function(x, n)",
							"Util.hashString = function(string, bits = 32, mask = 0xffffffff)",
							"Util.flatTree = function(tree, addOutput)",
							"addOutput = arg =>",
							" key =>",
							"Util.traverseTree = function(tree, fn, depth = 0, parent = null)",
							"Util.walkTree = function(node, pred, t, depth = 0, parent = null)",
							"function* ()",
							"pred = i =>",
							"t = function(i)",
							"Util.isPromise = function(obj)",
							"setImmediate = fn =>",
							"Util.next = function(iter, observer, prev = undefined)",
							"val =>",
							"() =>",
							"err =>",
							"() =>",
							"Util.getImageAverageColor = function(imageElement, options)",
							"toStringRgb()",
							"toStringRgba()",
							"toStringHex()",
							"toHex = function(d)",
							"Util.jsonToObject = function(jsonStr)",
							"Util.splitLines = function(str, max_linelen = Number.MAX_SAFE_INTEGER)",
							"Util.splitAt = function* (str, ...indexes)",
							"(a, b) =>",
							"Util.decodeEscapes = function(text)",
							"m =>",
							"([s, t]) =>",
							"Util.stripXML = text =>",
							"Util.stripHTML = html =>",
							"p =>",
							"p =>",
							"Util.stripNonPrintable = text =>",
							"Util.decodeHTMLEntities = function(text)",
							" (match, entity) =>",
							"Util.encodeHTMLEntities = (str, charset = '\\u00A0-\\u9999<>&') =>",
							" i =>",
							"Util.stripAnsi = function(str)",
							"Util.proxy = (obj = {}, handler) =>",
							"get(target, key, receiver)",
							"set(target, key, value, receiver)",
							"Util.propertyLookup = (obj = {}, handler = key => null) =>",
							"get(target, key, receiver)",
							"Util.traceProxy = (obj, handler) =>",
							" function(name, args)",
							"get(target, key, receiver)",
							"member = function()",
							"Util.proxyTree = function proxyTree(...callbacks)",
							"applyCallback = () =>",
							"get(target, key)",
							"set(target, key, value)",
							"apply(target, thisArg, args)",
							" function node(path)",
							"() =>",
							"Util.construct = constructor =>",
							" function F(args)",
							"F",
							"constructor",
							"Util.constructApply = (constructor, array) =>",
							"Util.immutable = args =>",
							"set: () =>",
							"deleteProperty: () =>",
							"defineProperty: () =>",
							"Util.immutableClass = (orig, ...proto) =>",
							"p =>",
							" ctor =>",
							"ctor",
							"imm = base =>",
							"constructor(...args)",
							"Util.partial = function partial(fn /*, arg1, arg2 etc */)",
							" function()",
							"(min, max, value) =>",
							"Util.coloring = (useColor = true) =>",
							"code(...args)",
							"text(text)",
							"concat(...args)",
							"code(...args)",
							"text(text, ...color)",
							"concat(...args)",
							"code(...args)",
							"text(text, ...color)",
							"concat(...args)",
							"Util.colorText = (...args) =>",
							"Util.decodeAnsi = (str, index) =>",
							"isDigit = c =>",
							"notDigit = c =>",
							"findIndex = (pred, start) =>",
							"Util.stripAnsi = str =>",
							"Util.ansiCode = (...args) =>",
							"Util.wordWrap = (str, width, delimiter) =>",
							"Util.multiParagraphWordWrap = (str, width, delimiter) =>",
							"Util.defineInspect = (proto, ...props) =>",
							" function()",
							"(acc, key) =>",
							"(a, b, value) =>",
							"Util.bindProperties = (proxy, target, props, gen) =>",
							"name =>",
							"(acc, name) =>",
							" p => v =>",
							"k =>",
							" (a, [k, v]) =>",
							" (...args) =>",
							"(...args) =>",
							" (a, k) =>",
							"get: () =>",
							"get: () =>",
							"function ()",
							" obj =>",
							"on: val =>",
							"off: val =>",
							"true: val =>",
							"false: val =>",
							"AssertionFailed",
							"constructor(message, stack)",
							"Util.assert = function assert(val, message)",
							"Util.assertEqual = function assertEqual(val1, val2, message)",
							"Util.assignGlobal = () =>",
							"Util.weakMapper = function(createFn, map = ",
							"(), hitFn)",
							"self = function(obj, ...args)",
							".set = (k, v) =>",
							".get = k =>",
							"Util.merge = function(...args)",
							" a =>",
							" a =>",
							"(acc, arg) =>",
							"Util.transformer = (a, ...l) =>",
							" (c, f) =>",
							" function(...v)",
							"Util.copyTextToClipboard = (i, t) =>",
							"async module =>",
							"(a, b, c) =>",
							"() =>",
							"Util.toPlainObject = obj =>",
							" v =>",
							"Util.toBuiltinObject = obj =>",
							" v =>",
							"t = (v, n) =>",
							"(acc, k) =>",
							"Util.timer = msecs =>",
							"remaining = () =>",
							"finish = callback =>",
							"log = (method, ...args) =>",
							"obj =>",
							" v =>",
							"timeout = (msecs, tmr = timer) =>",
							"() =>",
							" (...args) =>",
							" () =>",
							"add = (arr, ...items) =>",
							"get delay()",
							"get created()",
							"get start()",
							"get stop()",
							"get elapsed()",
							"get end()",
							"get remain()",
							"cancel()",
							"pause()",
							".resume = function()",
							".restart = function()",
							"callback(...args)",
							"subscribe(f)",
							"unsubscribe(f)",
							"start = () =>",
							"(resolve, reject) =>",
							"Util.thenableReject = error =>",
							"then: (resolve, reject) =>",
							"Util.wrapGenerator = fn =>",
							" function(...args)",
							"Util.wrapGeneratorMethods = obj =>",
							"Util.decorateIterable = (proto, generators = false) =>",
							"forEach(fn, thisArg)",
							"*map(fn, thisArg)",
							"*filter(pred, thisArg)",
							"findIndex(pred, thisArg)",
							"indexOf(item, startIndex = -1)",
							"(e, i) =>",
							"find(pred, thisArg)",
							"every(pred, thisArg)",
							"some(pred, thisArg)",
							"reduce(fn, accu)",
							"*entries()",
							"*keys()",
							"*values()",
							"Util.swap = (a, b) =>",
							"Util.swapArray = ([a, b]) =>",
							"Util.cacheAdapter = (st, defaultOpts = {}) =>",
							" () =>",
							"async c =>",
							" () =>",
							"async getItem(request, opts = {})",
							"async setItem(request, response)",
							"async addItem(request)",
							"async removeItem(request, opts = {})",
							"async key(index)",
							"async keys(urls = false, t = a => a)",
							"response =>",
							"r =>",
							"async clear()",
							"Util.cachedFetch = (allOpts = {}) =>",
							"() =>",
							"self = async function CachedFetch(request, opts = {})",
							"(returnValue, fn, ...args) =>",
							"Util.proxyObject = (root, handler) =>",
							"ptr = path =>",
							"(a, i) =>",
							" (value, path) =>",
							"get(target, key)",
							" function node(path)",
							"Util.parseXML = function(xmlStr)",
							" () =>",
							" parser =>",
							"fn = (value, ...args) =>",
							" () =>",
							" map =>",
							"(obj, ...args) =>",
							" () =>",
							" (obj, ...args) =>",
							"self = (obj, ...args) =>",
							"() =>",
							" () =>",
							" a =>",
							" () =>",
							" () =>",
							" fn =>",
							" () =>",
							" () =>",
							" a =>",
							"() =>",
							" () =>",
							" a =>",
							" () =>",
							"() =>",
							"Util.getOpt = (options = {}, args) =>",
							"findOpt = arg =>",
							"([optname, option]) =>",
							"opt =>",
							" () =>",
							" v =>",
							" () =>",
							" () =>",
							" v =>",
							"Util.getEnv = async varName =>",
							" () =>",
							"async e =>",
							" () =>",
							"Util.getEnvVars = async () =>",
							" () =>",
							"async e =>",
							" () =>",
							"Util.safeFunction = (fn, trapExceptions, thisObj) =>",
							"async function(...args)",
							" function(...args)",
							" a =>",
							" error =>",
							"Util.safeCall = (fn, ...args) =>",
							"Util.safeApply = (fn, args = []) =>",
							"Util.exit = exitCode =>",
							"stdExit = std =>",
							" () =>",
							" ([obj, exit]) =>",
							" () =>",
							"Util.atexit = handler =>",
							"Util.callMain = async (fn, trapExceptions) =>",
							"async (...args) =>",
							"async ret =>",
							"() =>",
							" err =>",
							" () =>",
							" argv1 =>",
							"Util.printReturnValue = (fn, opts = {}) =>",
							"print = (returnValue, fn, ...args) =>",
							"self = (...args) =>",
							"Util.replaceAll = (needles, haystack) =>",
							"([re, str]) =>",
							"(acc, [match, replacement]) =>",
							"Util.quote = (str, q = '\"') =>",
							"Util.escape = (str, pred = codePoint => codePoint < 32 || codePoint > 0xff) =>",
							"Util.escapeRegex = string =>",
							"Util.consolePrinter = function ConsolePrinter(log = console.log)",
							"self = function(...args)",
							".log = (...args) =>",
							"Util.consoleJoin = function(...args)",
							"Util.consoleConcat = function(...args)",
							"self = function ConsoleConcat(...args)",
							"clear()",
							"log = (...args) =>",
							"print()",
							"i =>",
							"output()",
							"add(...args)",
							"Util.booleanAdapter = (getSetFn, trueValue = 1, falseValue = 0) =>",
							" function(value)",
							"set = () =>",
							" function(...args)",
							"Util.deriveGetSet = (fn, get = v => v, set = v => v, thisObj) =>",
							" () =>",
							" v =>",
							"handler = () =>",
							"ExFunc",
							"constructor()",
							"__call__(...args)",
							"Util.isatty = async fd =>",
							"mod =>",
							"Util.ttyGetWinSize = (fd = 1) =>",
							"m =>",
							" (resolve, reject) =>",
							" (resolve, reject) =>",
							"Util.stdio = (fd, mode = true) =>",
							"Util.signal = (num, act) =>",
							"m =>",
							"() =>",
							"Util.timeit = (fn, args = [], options = {}) =>",
							"(p, c) =>",
							"Util.lazyProperty = (obj, name, getter, opts = {}) =>",
							"replaceProperty = value =>",
							"async function()",
							" function()",
							"v =>",
							"Util.lazyProperties = (obj, gettersObj, opts = {}) =>",
							"f = (a, b) =>",
							" function(a, b)",
							"(a, b) =>",
							"(a, b) =>",
							"() =>",
							"HighResolutionTime",
							"constructor(secs = 0, nano = 0)",
							"static create(s, n)",
							"get seconds()",
							"get milliseconds()",
							"get nanoseconds()",
							"diff(o)",
							"sum(o)",
							"since(o)",
							"toString()",
							"inspect()",
							"async function hrtime(previousTimestamp)",
							" function hrtime(previousTimestamp)",
							" () =>",
							" (minDelay = 0) =>",
							"resolve =>",
							"resolve =>",
							" function animationFrame(t)",
							"Util.getNow = () =>",
							"performanceNow = () =>",
							"performanceNow = async function(clock = CLOCK_MONOTONIC_RAW)",
							"gettime = (clk_id, tp) =>",
							"Util.formatColumns = a =>",
							"(acc, row, i) =>",
							"(col, j) =>",
							"row =>",
							"(col, j) =>",
							"Util.getPlatform = () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							"async () =>",
							"Util.colIndexes = line =>",
							"([prev, cols], char, i) =>",
							"Util.colSplit = (line, indexes) =>",
							"map = (name, flag) =>",
							" function* (value)",
							"log = (duration, name, args, ret) =>",
							"async (args, ret) =>",
							" (args, ret) =>",
							"async function(...args)",
							" function(...args)",
							"both = () =>",
							"(name, args) =>",
							"arg =>",
							"(name, ret) =>",
							" function(...args)",
							"Util.bind = function(f, ...args)",
							"ret = function()",
							"ret = function()",
							"ret",
							"f",
							"Util.bytesToUTF8 = function* (bytes)",
							"Util.codePointsToString = codePoints =>",
							"Util.bufferToString = b =>",
							"Util.levenshteinDistance = function levenshteinDistance(a, b)",
							"Util.padTrunc = (...args) =>",
							" (s, pad = ' ') =>",
							"Util.setReadHandler = (fd, handler) =>",
							"os =>"
						]
					},
					"AQAAAAAAAAAAAAAAS2YAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"contents": "import { existsSync, reader, readerSync, readSync, writeSync } from 'fs';\nimport { createServer, getSessions, LLL_INFO, LLL_NOTICE, LLL_USER, LLL_WARN, logLevels, setLog } from 'net';\nimport { kill, setReadHandler, SIGTERM, sleep, ttySetRaw, Worker } from 'os';\nimport { clearInterval, setInterval, setTimeout } from 'timers';\nimport { atexit, bindMethods, btoa, define, keys, filterKeys, getOpt, isObject, lazyProperties, memoize, mod, once, propertyLookup, quote, toString, tryCatch, types, mapWrapper } from 'util';\nimport { List, Table } from './cli-helpers.js';\nimport { DebuggerDispatcher, FindFunctions, GetFunctionName, TrivialSyntaxHighlighter } from './debugger.js';\nimport { DebuggerProtocol } from './debuggerprotocol.js';\nimport { ReadFile, ReadJSON, WriteJSON } from './io-helpers.js';\nimport { consume, map } from './lib/async/helpers.js';\nimport { absolute, basename, extname, relative } from './lib/path.js';\nimport { Repeater } from './lib/repeater/repeater.js';\nimport { Spawn, WNOHANG } from './os-helpers.js';\nimport { F_GETFL, F_SETFL, fcntl, O_NONBLOCK } from './quickjs/qjs-ffi/lib/fcntl.js';\nimport { REPL } from './quickjs/qjs-modules/lib/repl.js';\nimport { Console } from 'console';\nimport { Location } from 'location';\nimport process from 'process';\nimport * as path from 'path';\nimport extendArray from 'extendArray';\nimport { AF_INET, AsyncSocket, IPPROTO_TCP, SOCK_STREAM, SockAddr } from 'sockets';\nimport { err as stderr } from 'std';\nimport { codecs, RPCApi, RPCProxy, RPCObject, RPCFactory, Connection, RPCServer, RPCClient, RPCSocket, RPCConnect, RPCListen } from './quickjs/qjs-net/js/rpc.js';\n\nfunction decorate(decorators, obj, ...args) {\n  if(!Array.isArray(decorators)) decorators = [decorators];\n\n  for(let decorator of decorators)\n    for(let prop of keys(obj))\n      if(typeof obj[prop] == 'function') {\n        let newfn = decorator(obj[prop], obj, prop, ...args);\n        if(obj[prop] !== newfn) obj[prop] = newfn;\n      }\n\n  return obj;\n}\n\nextendArray(Array.prototype);\n\nconst scriptName = (arg = scriptArgs[0]) => basename(arg, extname(arg));\n\nconst children = new Set();\n\natexit(() => {\n  for(let pid of children) {\n    console.log('atexit killing child', pid);\n    kill(pid, SIGTERM);\n  }\n});\n\nObject.assign(globalThis, {\n  codecs,\n  RPCApi,\n  RPCProxy,\n  RPCObject,\n  RPCFactory,\n  Connection,\n  RPCServer,\n  RPCClient,\n  RPCSocket,\n  RPCConnect,\n  RPCListen\n});\n\nconst signalName = n =>\n  'SIG' +\n  [\n    ,\n    'HUP',\n    'INT',\n    'QUIT',\n    'ILL',\n    'TRAP',\n    'ABRT',\n    'BUS',\n    'FPE',\n    'KILL',\n    'USR1',\n    'SEGV',\n    'USR2',\n    'PIPE',\n    'ALRM',\n    'TERM',\n    'STKFLT',\n    'CHLD',\n    'CONT',\n    'STOP',\n    'TSTP',\n    'TTIN',\n    'TTOU',\n    'URG',\n    'XCPU',\n    'XFSZ',\n    'VTALRM',\n    'PROF',\n    'WINCH',\n    'IO',\n    'PWR',\n    'SYS'\n  ][n];\n\nfunction checkChildExited(child) {\n  const { exited, termsig, signaled, exitcode } = child;\n\n  return exited ? (signaled ? `signalled ${signalName(termsig)}` : `exitcode ${exitcode}`) : null;\n}\n\nfunction GetLoc(node) {\n  if(node.loc?.start?.line) {\n    const { line, column } = node.loc.start;\n    const [charOffset] = node.range ?? [node.start];\n    return new Location(line, column + 1, charOffset);\n  }\n}\n\nasync function LoadAST(source) {\n  if(!existsSync(source)) return null;\n  const child = Spawn('meriyah', ['-l', source], { block: false, stdio: ['inherit', 'pipe', 'inherit'] });\n\n  let s = '';\n  for(let chunk of readerSync(child.stdout)) s += toString(chunk);\n\n  const status = child.wait();\n  const { length } = s;\n  //console.log('loadAST', { source, length, status });\n\n  return JSON.parse(s);\n}\n\nfunction StartREPL(prefix = scriptName(), suffix = '') {\n  let repl = new REPL(`\\x1b[38;5;165m${prefix} \\x1b[38;5;39m${suffix}\\x1b[0m`, false);\n  repl.historyLoad(null);\n  let { log } = console;\n\n  console.log = repl.printFunction(log.bind(console, console.config({ compact: 2 })));\n  let { show } = repl;\n\n  repl.show = arg => {\n    if(isObject(arg)) {\n      if(arg[Symbol.for('print')]) return arg.toString ? arg.toString() : arg + '';\n\n      //if(Array.isArray(arg) && typeof arg[0] == 'object' &&  Array.isArray(arg[0])) {\n      if(Array.isArray(arg) && typeof arg[0] == 'object') {\n        if(!Array.isArray(arg[0]) && (arg.length !== 2 || !Array.isArray(arg[1]))) {\n          if(arg.length == 2 && Array.isArray(arg[1])) {\n            const [event, stack] = arg;\n            if(['type', 'reason'].every(k => k in event)) if (['id', 'name', 'line'].every(k => k in stack[0])) return [List([event]), List(stack)];\n          }\n\n          if(\n            arg.length >= 2 /*Object.keys(arg[0]).some(key => arg.every(a => key in a)) ||*/ &&\n            arg.map(item => Object.keys(item)).reduce((acc, keys, i) => (i == 0 ? keys : acc ? keys.equal(acc) && keys : false))\n          )\n            return repl.show(Table(arg));\n        }\n      }\n    }\n\n    return show.call(repl, arg);\n  };\n\n  repl.loadSaveOptions();\n  //repl.printPromise = () => {};\n  repl.run();\n  return repl;\n}\n\nexport function StartDebugger(args, connect, address) {\n  let env = {};\n\n  address ??= '127.0.0.1:9901';\n\n  env['DISPLAY'] ??= ':0.0';\n\n  if(connect) env['QUICKJS_DEBUG_ADDRESS'] = address;\n  else env['QUICKJS_DEBUG_LISTEN_ADDRESS'] = address;\n\n  const child = Spawn('qjsm', args, { block: false, env: { ...process.env, ...env }, stdio: ['pipe', 'pipe', 'pipe'] });\n\n  if(!connect) listeners[address] = child;\n\n  if(process.env.DEBUG) console.log('StartDebugger', { args, connect, address, env }, child);\n\n  children.add(child.pid);\n\n  return define(child, { args });\n}\n\nexport async function ConnectDebugger(address, skipToMain = true, callback) {\n  const addr = new SockAddr(AF_INET, ...address.split(':'));\n  const sock = new AsyncSocket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n\n  const ret = await sock.connect(addr);\n\n  if(typeof callback != 'function' && typeof callback == 'object') callback = callback.onMessage;\n\n  if(process.env.DEBUG) console.log('ConnectDebugger', { address, skipToMain, sock });\n\n  if(ret >= 0) {\n    if(process.env.DEBUG) console.log('Connected', +sock, 'to', sock.remote);\n    sockets.add(sock);\n  }\n\n  const dbg = this ?? {};\n\n  define(dbg, {\n    sock,\n    addr,\n    async process(callback) {\n      if(process.env.DEBUG) console.log('Debugger process()', callback);\n\n      let ret,\n        lenBuf = new ArrayBuffer(9);\n\n      try {\n        while((ret = await sock.recv(lenBuf, 0, 9)) > 0) {\n          let len = parseInt(toString(lenBuf, 0, ret), 16);\n\n          let dataBuf = new ArrayBuffer(len);\n          let offset = 0;\n\n          while(offset < len) {\n            ret = await sock.recv(dataBuf, offset, len - offset);\n\n            if(ret <= 0) {\n              sock.close();\n              break;\n            }\n            offset += ret;\n          }\n          if(ret <= 0) break;\n\n          let s = toString(dataBuf);\n          let obj = JSON.parse(s);\n\n          if(process.env.DEBUG) console.log('process() read:',obj);\n\n\n          const funcName = '\\x1b[38;5;208mPROCESS\\x1b[0m';\n\n          if(process.env.DEBUG) console.log(funcName + ' \\x1b[38;5;196mbefore callback\\x1b[0m', obj);\n          let result = callback(obj);\n          await result;\n        }\n      } catch(error) {\n        console.log('Socket error:', error.message + '\\n' + error.stack);\n      } finally {\n        sock.close();\n        return ret;\n      }\n    },\n    async sendMessage(msg) {\n      if(typeof msg != 'string') msg = JSON.stringify(msg);\n      const ret = sock.send(msg.length.toString(16).padStart(8, '0') + '\\n' + msg);\n\n      if(process.env.DEBUG) console.log('\\x1b[38;5;33mSEND\\x1b[0m[' + sock.fd + '] (' + ret + ') ' + msg);\n\n      return ret;\n    }\n  });\n\n  if(process.env.DEBUG) console.log('ConnectDebugger', console.config({ depth: 1, compact: 0 }), dbg);\n\n  LaunchDebugger(dbg, skipToMain);\n\n  return dbg;\n}\n\nfunction LaunchDebugger(dbg, skipToMain = true) {\n  if(process.env.DEBUG) console.log('LaunchDebugger', console.config({ depth: 1, compact: 0 }), { dbg, skipToMain });\n\n  if(skipToMain) {\n    dbg.onstopped = once(async (...args) => {\n      let st = await dispatch.stackTrace();\n\n      script ??= st[0].filename;\n\n      let fns = await files[script].match(/main$/gi);\n      console.log('matched /main$/gi', fns /*.map(({ name }) => name)*/);\n\n      dbg.onstopped = null;\n      let resp;\n      console.log('breakpoints()', console.config({ compact: 0 }), { script, fns });\n      resp = await dispatch.breakpoints(script, fns);\n      console.log('breakpoints() response:', console.config({ compact: 0 }), resp);\n\n      setTimeout(async () => {\n        resp = await dispatch.continue();\n        console.log('continue() response:', console.config({ compact: 0 }), resp);\n      }, 100);\n    });\n  }\n  //dbg.onstopped ??= OnStopped;\n  let dispatch = (dbg.dispatch = globalThis.dispatch = new DebuggerDispatcher(dbg));\n\n  Object.assign(globalThis, bindMethods(dispatch, DebuggerDispatcher.prototype, {}));\n  Object.assign(globalThis, {\n    GetLoc,\n    PrintStackFrame,\n    PrintStack,\n    async value(name) {\n      let stack = await dispatch.stackTrace();\n\n      for(let frame of stack) {\n        let { local } = await dispatch.variables(frame.id, 1);\n\n        let v = local.find(v => v.name == name);\n\n        return v;\n      }\n    }\n  });\n\n  return dbg;\n}\n\nasync function PrintStackFrame(frame) {\n  if(frame === undefined) frame = 0;\n\n  let { id, name, filename, line } = frame;\n  let params;\n\n  try {\n    params = (await files[filename].functions).find(f => f.name == name)?.params;\n  } catch(e) {}\n\n  if(params) name += `(${params.join(', ')})`;\n  let loc = line !== undefined ? new Location(filename, line) : undefined;\n  let code = line !== undefined ? files[filename].line(line - 1) : undefined;\n  return [`#${id}`, ` at ${name.padEnd(30)}`, loc ? ' in ' + loc : ''].concat(code ? [code] : []);\n}\n\nasync function PrintStack(stack) {\n  stack ??= await stackTrace();\n  let frames = [];\n  for(let frame of stack) {\n    frames.push(await PrintStackFrame(frame));\n  }\n  return List(frames);\n}\n\ndecorate(\n  (member, obj, prop) =>\n    ({\n      async breakpoints(...args) {\n        if(!(typeof args[0] == 'string')) args.unshift(globalThis.script);\n\n        let [file, breakpoints] = args;\n        \n        file = absolute(file);\n        \n        if(types.isPromise(breakpoints)) breakpoints = await breakpoints;\n        if(Array.isArray(breakpoints)) breakpoints = breakpoints.map(b => filterKeys(b, ['name', 'line', 'column']));\n        \n        let ret = await member.call(this, file, breakpoints);\n        \n        if(ret.path) ret.path = relative(ret.path);\n        if(ret?.breakpoints?.path) ret.breakpoints.path = relative(ret.breakpoints.path);\n        \n       // console.log('breakpoints =', ret);\n\n        return ret;\n      },\n      async stackTrace(frame) {\n        let ret = (await member.call(this, frame)).map(frame => (typeof frame.filename == 'string' && (frame.filename = relative(absolute(frame.filename))), frame));\n        console.log('stackTrace =', ret);\n        return ret;\n      },\n      async scopes(n) {\n        let stack = await this.stackTrace();\n        if(n >= stack.length) return null;\n        let scopes = [];\n\n        for(let scope of await member.call(this, n)) {\n          const variables = await this.variables(scope.reference);\n          scope.variables = variables.length;\n          scopes.push(scope);\n        }\n\n        return scopes;\n      },\n      async waitRun() {\n        const [event, stack] = await member.call(this);\n        define(globalThis, { event, stack });\n        //console.log('waitRun', { event, stack });\n\n        repl.printStatus((await PrintStackFrame(stack[0])).join(' ') + '\\n');\n\n        const { filename, line } = stack[0];\n\n        define(globalThis, { file: filename, line });\n        return [event, stack];\n      },\n      async variables(n, depth = 0) {\n        const list = await member.call(this, n);\n        const ret = [];\n        const add = item => (item.variablesReference === 0 && delete item.variablesReference, ret.push(item));\n\n        for(let item of list) {\n          add(item);\n\n          if(depth > 0) {\n            if(item.variablesReference > 0) {\n              let children = await this.variables(item.variablesReference, depth - 1);\n\n              for(let child of children) {\n                if(!isNaN(child.name)) child.name = '  [' + child.name + ']';\n                else child.name = '  .' + child.name;\n\n                if(child.value?.startsWith('function ')) continue;\n                add(child);\n              }\n            }\n          }\n        }\n\n        return define(ret, {\n          [Symbol.for('print')]: true,\n          toString() {\n            return Table(this, ['name', 'value', 'type', 'variablesReference']);\n          }\n        });\n      }\n    }[prop] || member),\n\n  DebuggerDispatcher.prototype\n);\n\nconst mkaddr = (\n  (port = 8777) =>\n  () =>\n    `127.0.0.1:${port--}`\n)();\n\nasync function NewDebugger(args, skipToMain = false, address) {\n  address ??= mkaddr();\n\n  const child = (globalThis.child = globalThis.listeners[address] || StartDebugger(args, false, address));\n  let dispatch;\n\n  globalThis.script = args[0];\n\n  sleep(500);\n\n  const dbg = this ?? {};\n\n  define(dbg, {\n    child,\n    args,\n    kill: () => (children.delete(child.pid), kill(child.pid, SIGTERM))\n  });\n\n  await ConnectDebugger.call(dbg, address, skipToMain);\n\n  return dbg; //dispatch;\n}\n\nasync function OnStopped(msg) {\n  const st = (globalThis.stack = await dispatch.stackTrace());\n  let [top] = st;\n  let { id, name, filename, line } = top;\n  repl.printStatus(`#${id} ${name}@${filename}:${line}  ` + files[filename].line(line));\n}\n\nfunction URLWorker(script) {\n  const dataURL = s => `data:application/javascript;charset=utf-8;base64,` + btoa(s).replaceAll('+', '-').replaceAll('/', '_').replaceAll('=', '');\n\n  const url = dataURL(script);\n  const w = new Worker(url);\n\n  return define(new Repeater((push, stop) => (w.onmessage = push)), {\n    postMessage: msg => w.postMessage(msg)\n  });\n}\n\nfunction main(...args) {\n  const base = scriptName().replace(/\\.[a-z]*$/, '');\n\n  const config = ReadJSON(`.${base}-config`) ?? {};\n\n  globalThis.console = new Console(stderr, {\n    inspectOptions: { depth: Infinity, compact: 1, maxArrayLength: Infinity, customInspect: true }\n  });\n\n  let params = getOpt(\n    {\n      verbose: [false, (a, v) => (v | 0) + 1, 'v'],\n      listen: [false, null, 'l'],\n      connect: [false, null, 'c'],\n      client: [false, null, 'C'],\n      server: [false, null, 'S'],\n      debug: [false, null, 'x'],\n      tls: [false, (v, pv, o) => ((o.tls = true), true), 't'],\n      'no-tls': [false, (v, pv, o) => ((o.tls = false), true), 'T'],\n      address: [true, null, 'a'],\n      port: [true, null, 'p'],\n      quiet: [false, null, 'q'],\n      'ssl-cert': [true, null],\n      'ssl-private-key': [true, null],\n      'ssl-ca': [true, null],\n      '@': 'address,port'\n    },\n    args\n  );\n  if(params['no-tls'] === true) params.tls = false;\n  const {\n    address = '0.0.0.0',\n    port = 8999,\n    'ssl-cert': sslCert = 'localhost.crt',\n    'ssl-private-key': sslPrivateKey = 'localhost.key',\n    'ssl-ca': sslCA = '/etc/ssl/certs/ca-certificates.crt',\n    quiet = false,\n    debug = false,\n    tls = true\n  } = params;\n\n  const listen = params.connect && !params.listen ? false : true;\n\n  let name = scriptArgs[0];\n  name = name\n    .replace(/.*\\//, '')\n    .replace(/-/g, ' ')\n    .replace(/\\.[^\\/.]*$/, '');\n\n  let [prefix, suffix] = name.split(' ');\n\n  let protocol = new WeakMap();\n  let ws2dbg = (globalThis.ws2dbg = mapWrapper(new WeakMap()));\n  let dbg2ws = (globalThis.dbg2ws = mapWrapper(new WeakMap()));\n\n  let sockets = (globalThis.sockets ??= new Set());\n  //console.log(name, params['@']);\n\n  function createWS(url, callbacks, listen) {\n    //console.log('createWS', { url, callbacks, listen });\n\n    setLog(\n      quiet ? 0 : LLL_USER | (((debug > 1 ? LLL_INFO : LLL_WARN) << 1) - 1),\n      quiet || params.debug <= 1\n        ? () => {}\n        : (level, str) => {\n            if(/BIND_PROTOCOL|DROP_PROTOCOL|CHECK_ACCESS_RIGHTS|ADD_HEADERS/.test(str)) return;\n            console.log(logLevels[level].padEnd(10), str.trim());\n          }\n    );\n\n    let options;\n    let dbg;\n    console.log('createWS', { url });\n    return createServer(\n      url,\n      (options = {\n        tls: params.tls,\n        sslCert,\n        sslPrivateKey,\n        sslCA,\n        mimetypes: [\n          ['.svgz', 'application/gzip'],\n          ['.mjs', 'application/javascript'],\n          ['.es', 'application/javascript'],\n          ['.wasm', 'application/octet-stream'],\n          ['.eot', 'application/vnd.ms-fontobject'],\n          ['.lib', 'application/x-archive'],\n          ['.bz2', 'application/x-bzip2'],\n          ['.gitignore', 'text/plain'],\n          ['.cmake', 'text/plain'],\n          ['.hex', 'text/plain'],\n          ['.md', 'text/plain'],\n          ['.pbxproj', 'text/plain'],\n          ['.wat', 'text/plain'],\n          ['.c', 'text/x-c'],\n          ['.h', 'text/x-c'],\n          ['.cpp', 'text/x-c++'],\n          ['.hpp', 'text/x-c++'],\n          ['.filters', 'text/xml'],\n          ['.plist', 'text/xml'],\n          ['.storyboard', 'text/xml'],\n          ['.vcxproj', 'text/xml'],\n          ['.bat', 'text/x-msdos-batch'],\n          ['.mm', 'text/x-objective-c'],\n          ['.m', 'text/x-objective-c'],\n          ['.sh', 'text/x-shellscript']\n        ],\n        mounts: [\n          ['/proxy', 'ipv4:127.0.0.1:22', null, 'proxy-ws-raw-ws'],\n          ['/lws', 'https://www.google.ch/', null, ''],\n          ['/', '.', 'debugger.html'],\n          function* config(req, res) {\n            const { body, headers } = req;\n            console.log('/config', { req, res });\n            console.log('*config', { body, headers });\n            yield '{}';\n          },\n          function* files(req, res) {\n            const { body, headers } = req;\n            yield fs\n              .readdirSync('.')\n              .sort()\n              .map(f => f + '\\n')\n              .join('');\n          }\n        ],\n        ...url,\n        ...callbacks,\n        block: false,\n        onConnect(ws, req) {\n          console.log('onConnect', { ws, req }, req && req.headers);\n\n          Object.defineProperties(ws, {\n            sendMessage: {\n              value: async function sendMessage(msg) {\n                let ret = await this.send(JSON.stringify(msg));\n                console.log(`ws.sendMessage(`, console.config({ compact: 1 }), msg, `) = ${ret}`);\n                return ret;\n              },\n              enumerable: false\n            },\n            dbg: { value: null, writable: true, enumerable: false }\n          });\n\n          sockets.add(ws);\n        },\n        onClose(ws) {\n          console.log('onClose', { ws, dbg });\n          dbg?.close();\n\n          protocol.delete(ws);\n          sockets.delete(ws);\n        },\n        onError(ws) {\n          console.log('onError', ws);\n        },\n        onRequest(req, resp) {\n          const { method, headers } = req;\n          //console.log('\\x1b[38;5;33monRequest\\x1b[0m [\\n  ', req, ',\\n  ', resp, '\\n]');\n          const { body, url } = resp;\n\n          const file = url.path.slice(1);\n          const dir = file.replace(/\\/[^\\/]*$/g, '');\n          console.log('\\x1b[38;5;33monRequest\\x1b[0m', { file, dir, body });\n\n          if(file.endsWith('.js') && resp.body) {\n            //console.log('onRequest', { file, dir });\n            const re = /^(\\s*(im|ex)port[^\\n]*from ['\"])([^./'\"]*)(['\"]\\s*;[\\t ]*\\n?)/gm;\n\n            resp.body = body.replaceAll(re, (match, p1, p0, p2, p3, offset) => {\n              if(!/[\\/\\.]/.test(p2)) {\n                let fname = `${p2}.js`;\n\n                if(!existsSync(dir + '/' + fname)) return `/* ${match} */`;\n\n                match = [p1, './' + fname, p3].join('');\n\n                //console.log('args', { match, p1, p2, p3, offset });\n              }\n              return match;\n            });\n          }\n\n          return resp;\n        },\n        onMessage(ws, data) {\n          dbg = ws2dbg(ws);\n\n          // showSessions();\n\n          handleCommand(ws, data);\n\n          async function handleCommand(ws, data) {\n            let obj = JSON.parse(data);\n\n            console.log('onMessage(x)', obj);\n\n            const { command, ...rest } = obj;\n            // console.log('onMessage', command, rest);\n            const { connect = true, address = '127.0.0.1:' + Math.round(Math.random() * (65535 - 1024)) + 1024, args = [] } = rest;\n\n            switch (obj.type ?? command) {\n              case 'start': {\n                dbg = globalThis.dbg = { child: StartDebugger(args, connect, address) };\n\n                ws2dbg(ws, dbg);\n                dbg2ws(dbg, ws);\n\n                const [stdin, stdout, stderr] = child.stdio;\n                for(let fd of [stdout, stderr]) {\n                  let flags = fcntl(fd, F_GETFL);\n                  flags |= O_NONBLOCK;\n                  fcntl(fd, F_SETFL, flags);\n                }\n\n                console.log('stdout flags', fcntl(stdout, F_GETFL) & O_NONBLOCK, 'O_NONBLOCK=', O_NONBLOCK);\n\n                const forward = (fd, name) =>\n                  consume(reader(fd), buf => {\n                    let data = toString(buf.slice(0, r));\n                    //console.log(`read(${fd}, buf) = ${r} (${quote(data, \"'\")})`);\n\n                    ws.sendMessage({\n                      type: 'output',\n                      channel: name,\n                      data\n                    });\n                  });\n                forward(stdout, 'stdout');\n                forward(stderr, 'stderr');\n                define(globalThis, { stdout, stderr, reader });\n\n                sleep(1000);\n\n                let tid, exited;\n\n                tid = setInterval(() => {\n                  let pid = child.wait(WNOHANG);\n\n                  if((exited = checkChildExited(child))) {\n                    ws.sendMessage({\n                      type: 'error',\n                      command: 'start',\n                      message: `child process ${pid} ${exited}`\n                    });\n                    clearInterval(tid);\n                  }\n                }, 1000);\n\n                let pid = child.wait(WNOHANG);\n\n                if((exited = checkChildExited(child))) {\n                  ws.sendMessage({\n                    type: 'error',\n                    command: 'start',\n                    message: `unable to start debugger: ${exited}`\n                  });\n                  break;\n                }\n\n                const cwd = process.cwd();\n                ws.sendMessage({\n                  type: 'response',\n                  response: {\n                    command: 'start',\n                    args,\n                    cwd,\n                    address\n                  }\n                });\n\n                break;\n              }\n\n              case 'connect': {\n                dbg = globalThis.dbg = await ConnectDebugger.call(globalThis.dbg, address, false, (dbg, sock) => {\n                  console.log('wait(WNOHANG) =', child.wait(WNOHANG));\n                  console.log('child', child);\n                });\n\n                ws2dbg(ws, dbg);\n                dbg2ws(dbg, ws);\n\n                console.log('connect command', { ws, dbg });\n                sockets.add(dbg.sock);\n\n                const cwd = process.cwd();\n                let connected;\n\n                console.log('dbg', dbg);\n                break;\n              }\n\n              case 'file': {\n                const { path } = rest;\n                const data = ReadFile(path, 'utf-8');\n                //ws.send(JSON.stringify({ type: 'response', response: { command: 'file', path, data } }));\n\n                const lexer = new Lexer(data, path);\n                console.log('lexer', lexer);\n                const lines = [];\n\n                for(;;) {\n                  const { pos, size } = lexer;\n                  console.log('lexer', { pos, size });\n                  let result = lexer.next();\n                  if(result.done) break;\n                  const token = result.value;\n                  console.log('token', {\n                    lexeme: token.lexeme,\n                    id: token.id,\n                    loc: token.loc + ''\n                  });\n                  const { type, id, lexeme, loc } = token;\n                  const { line, column, file } = loc;\n                  //console.log('token', {lexeme,id,line});\n\n                  if(!lines[line - 1]) lines.push([]);\n                  let a = lines[line - 1];\n                  a.push([lexeme, id]);\n                }\n                console.log('lines', lines);\n                break;\n              }\n\n              case 'request': {\n                const { request } = obj;\n                const { request_seq, command, args } = request;\n\n                let response = await dbg.dispatch.sendRequest(command, args, request_seq);\n\n                if(command == 'stackTrace') {\n                  response.body = response.body.map(frame => {\n                    if(frame.filename) frame.filename = path.relative(frame.filename);\n\n                    return frame;\n                  });\n                }\n                console.log('Request', { request, response });\n\n                ws.sendMessage(response);\n\n                break;\n              }\n\n              default: {\n                /*  console.log('send to debugger', { obj });\n                dbg.sendMessage(obj);*/\n                const dbg = ws2dbg(ws);\n                const { pid } = dbg.child;\n                console.log('send to debugger', { pid, obj });\n\n                dbg.sendMessage(obj);\n\n                //DebuggerProtocol.send(dbg, data);\n                break;\n              }\n            }\n          }\n        },\n        ...(url && url.host ? url : {})\n      })\n    );\n  }\n\n  console.log('XX');\n\n  delete globalThis.DEBUG;\n\n  let inputBuf = new ArrayBuffer(10);\n  ttySetRaw(0);\n\n  setReadHandler(0, () => {\n    let r = readSync(0, inputBuf, 0, inputBuf.byteLength);\n\n    if(r > 0) {\n      let a = new Uint8Array(inputBuf.slice(0, r));\n\n      //console.log('a', a);\n\n      for(let i = 0; i < a.length; i++) if(a[i] == 13) a[i] = 10;\n\n      if(a.length == 1 && a[0] == 127) a = new Uint8Array([8, 0x20, 8]);\n\n      if(a.length == 1 && a[0] == 27) showSessions();\n      else writeSync(1, a.buffer);\n    }\n  });\n\n  function showSessions() {\n    let sessions = getSessions();\n    console.log('sessions', console.config({ maxArrayLength: Infinity, depth: 4, customInspect: true, compact: 0 }), sessions);\n  }\n\n  //setInterval(() => console.log('interval'), 5000);\n\n  globalThis.server = createWS(`wss://${address}:8998/ws`, {}, true);\n\n  define(globalThis, {\n    get connections() {\n      return [...globalThis.sockets].map(ws => ws2dbg(ws));\n    },\n    get socklist() {\n      return [...globalThis.sockets];\n    },\n    net: { setLog, LLL_USER, LLL_NOTICE, LLL_WARN, createServer },\n    TrivialSyntaxHighlighter,\n    NewDebugger,\n    LaunchDebugger,\n    StartDebugger,\n    ConnectDebugger,\n    DebuggerDispatcher,\n    DebuggerProtocol,\n    GetFunctionName,\n    FindFunctions,\n    LoadAST,\n    Table,\n    List,\n    get file() {\n      return this.files[this.script];\n    },\n    files: propertyLookup(\n      (globalThis.fileCache = {}),\n      memoize((file, source) => {\n        source ??= tryCatch(\n          () => TrivialSyntaxHighlighter(ReadFile(file)),\n          s => s,\n          () => ReadFile(file)\n        );\n        return define(\n          {\n            source,\n            indexlist: [...source.matchAll(/^[^\\n]*/gm)].map(m => m.index)\n          },\n          lazyProperties(\n            {\n              line(i, j) {\n                if(i === undefined) return '';\n                const { source, indexlist } = this;\n                j ??= i + 1;\n                const m = mod(indexlist.length - 1);\n                const [start, end] = [indexlist[m(i)], indexlist[m(j)]];\n                let line = source.slice(start, (end ?? 0) - 1);\n\n                if([...line.matchAll(/\\x1b([^A-Za-z]*[A-Za-z])/g)].last != '\\x1b[0m') line += '\\x1b[0m';\n\n                return line;\n              },\n              match(re) {\n                if(typeof re == 'string') re = new RegExp(re, 'gi');\n\n                return this.functions.then(fns =>\n                  define(\n                    fns.filter(({ name }) => re.test(name)),\n                    { [Symbol.toStringTag]: 'FunctionList', file }\n                  )\n                );\n              }\n            },\n            {\n              // estree: () => ,\n              async functions() {\n                return (globalThis.functionCache = [...FindFunctions((globalThis.ast = await LoadAST(file)))].map(([name, loc, params, expression, path]) =>\n                  define(\n                    {\n                      name,\n                      params,\n                      ...loc,\n                      expression\n                    },\n                    { path }\n                  )\n                ));\n              }\n            },\n            { async: false }\n          )\n        );\n      })\n    ),\n    async repeat(cond, fn, ...args) {\n      let r;\n      if(typeof cond == 'number') {\n        let n = cond;\n        cond = (r, i) => i >= n || r === true;\n      }\n      for(let i = 0; ; i++) {\n        r = await fn(...args);\n\n        if(cond(r, i)) break;\n      }\n      return r;\n    },\n    repl: StartREPL()\n  });\n\n  function quit(why) {\n    console.log(`quit('${why}')`);\n\n    let cfg = { inspectOptions: console.options };\n    WriteJSON(`.${base}-config`, cfg);\n    // repl.cleanup(why);\n  }\n}\n\ntry {\n  main(...scriptArgs.slice(1));\n} catch(error) {\n  console.log(`FAIL: ${error?.message ?? error}\\n${error?.stack}`);\n} finally {\n  //console.log('SUCCESS');\n}\n",
			"file": "debugger-server.js",
			"file_size": 29755,
			"file_write_time": 133861370719188489,
			"settings":
			{
				"buffer_size": 29794,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					448,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAALQpAAAAAAAAtSkAAAAAAAAAAAAAtSkAAAAAAAC9KQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALQpAAAAAAAAtCkAAAAAAAD////////vfw"
				],
				[
					459,
					1,
					"insert",
					{
						"characters": "let"
					},
					"BQAAABopAAAAAAAAGykAAAAAAAAAAAAAGykAAAAAAAAbKQAAAAAAAAYAAAByZXR1cm6wKQAAAAAAALApAAAAAAAACAAAACAgICAgICAgGykAAAAAAAAcKQAAAAAAAAAAAAAcKQAAAAAAAB0pAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACApAAAAAAAAGikAAAAAAAAAAAAAAABSQA"
				],
				[
					460,
					1,
					"insert",
					{
						"characters": " ret="
					},
					"BQAAAB0pAAAAAAAAHikAAAAAAAAAAAAAHikAAAAAAAAfKQAAAAAAAAAAAAAfKQAAAAAAACApAAAAAAAAAAAAACApAAAAAAAAISkAAAAAAAAAAAAAISkAAAAAAAAiKQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB0pAAAAAAAAHSkAAAAAAAAAAAAAAADwvw"
				],
				[
					462,
					1,
					"insert",
					{
						"characters": "\n\nreturn"
					},
					"CwAAALYpAAAAAAAAtykAAAAAAAAAAAAAtykAAAAAAAC/KQAAAAAAAAAAAAC/KQAAAAAAAMApAAAAAAAAAAAAAMApAAAAAAAAyCkAAAAAAAAAAAAAtykAAAAAAAC3KQAAAAAAAAgAAAAgICAgICAgIMApAAAAAAAAwSkAAAAAAAAAAAAAwSkAAAAAAADCKQAAAAAAAAAAAADCKQAAAAAAAMMpAAAAAAAAAAAAAMMpAAAAAAAAxCkAAAAAAAAAAAAAxCkAAAAAAADFKQAAAAAAAAAAAADFKQAAAAAAAMYpAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALYpAAAAAAAAtikAAAAAAAD////////vfw"
				],
				[
					463,
					1,
					"insert",
					{
						"characters": " ret;"
					},
					"BQAAAMYpAAAAAAAAxykAAAAAAAAAAAAAxykAAAAAAADIKQAAAAAAAAAAAADIKQAAAAAAAMkpAAAAAAAAAAAAAMkpAAAAAAAAyikAAAAAAAAAAAAAyikAAAAAAADLKQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMYpAAAAAAAAxikAAAAAAAAAAAAAAADwvw"
				],
				[
					465,
					1,
					"insert",
					{
						"characters": "\nconsole.log"
					},
					"DAAAALcpAAAAAAAAuCkAAAAAAAAAAAAAuCkAAAAAAAC5KQAAAAAAAAAAAAC5KQAAAAAAALopAAAAAAAAAAAAALopAAAAAAAAuykAAAAAAAAAAAAAuykAAAAAAAC8KQAAAAAAAAAAAAC8KQAAAAAAAL0pAAAAAAAAAAAAAL0pAAAAAAAAvikAAAAAAAAAAAAAvikAAAAAAAC/KQAAAAAAAAAAAAC/KQAAAAAAAMApAAAAAAAAAAAAAMApAAAAAAAAwSkAAAAAAAAAAAAAwSkAAAAAAADCKQAAAAAAAAAAAADCKQAAAAAAAMMpAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALcpAAAAAAAAtykAAAAAAAAAAAAAAGBlQA"
				],
				[
					466,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAMMpAAAAAAAAxSkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMMpAAAAAAAAwykAAAAAAAAAAAAAAADwvw"
				],
				[
					467,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAMQpAAAAAAAAxikAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMQpAAAAAAAAxCkAAAAAAAAAAAAAAADwvw"
				],
				[
					468,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAMUpAAAAAAAAxikAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMUpAAAAAAAAxSkAAAAAAAAAAAAAAADwvw"
				],
				[
					469,
					1,
					"left_delete",
					null,
					"AQAAAMUpAAAAAAAAxSkAAAAAAAABAAAAMA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMYpAAAAAAAAxikAAAAAAAAAAAAAAADwvw"
				],
				[
					470,
					1,
					"insert",
					{
						"characters": "Stack:"
					},
					"BgAAAMUpAAAAAAAAxikAAAAAAAAAAAAAxikAAAAAAADHKQAAAAAAAAAAAADHKQAAAAAAAMgpAAAAAAAAAAAAAMgpAAAAAAAAySkAAAAAAAAAAAAAySkAAAAAAADKKQAAAAAAAAAAAADKKQAAAAAAAMspAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMUpAAAAAAAAxSkAAAAAAAAAAAAAAADwvw"
				],
				[
					471,
					6,
					"left_delete",
					null,
					"BgAAAMopAAAAAAAAyikAAAAAAAABAAAAOskpAAAAAAAAySkAAAAAAAABAAAAa8gpAAAAAAAAyCkAAAAAAAABAAAAY8cpAAAAAAAAxykAAAAAAAABAAAAYcYpAAAAAAAAxikAAAAAAAABAAAAdMUpAAAAAAAAxSkAAAAAAAABAAAAUw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMspAAAAAAAAyykAAAAAAAAAAAAAAADwvw"
				],
				[
					472,
					1,
					"insert",
					{
						"characters": "stackTrace"
					},
					"CgAAAMUpAAAAAAAAxikAAAAAAAAAAAAAxikAAAAAAADHKQAAAAAAAAAAAADHKQAAAAAAAMgpAAAAAAAAAAAAAMgpAAAAAAAAySkAAAAAAAAAAAAAySkAAAAAAADKKQAAAAAAAAAAAADKKQAAAAAAAMspAAAAAAAAAAAAAMspAAAAAAAAzCkAAAAAAAAAAAAAzCkAAAAAAADNKQAAAAAAAAAAAADNKQAAAAAAAM4pAAAAAAAAAAAAAM4pAAAAAAAAzykAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMUpAAAAAAAAxSkAAAAAAAAAAAAAAADwvw"
				],
				[
					473,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAM8pAAAAAAAA0CkAAAAAAAAAAAAA0CkAAAAAAADRKQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM8pAAAAAAAAzykAAAAAAAAAAAAAAADwvw"
				],
				[
					475,
					1,
					"insert",
					{
						"characters": "m"
					},
					"AQAAANIpAAAAAAAA0ykAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANIpAAAAAAAA0ikAAAAAAAAAAAAAAADwvw"
				],
				[
					476,
					1,
					"left_delete",
					null,
					"AQAAANIpAAAAAAAA0ikAAAAAAAABAAAAbQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANMpAAAAAAAA0ykAAAAAAAAAAAAAAADwvw"
				],
				[
					477,
					1,
					"insert",
					{
						"characters": ",ret"
					},
					"BAAAANIpAAAAAAAA0ykAAAAAAAAAAAAA0ykAAAAAAADUKQAAAAAAAAAAAADUKQAAAAAAANUpAAAAAAAAAAAAANUpAAAAAAAA1ikAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANIpAAAAAAAA0ikAAAAAAAAAAAAAAADwvw"
				],
				[
					479,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAANcpAAAAAAAA2CkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANcpAAAAAAAA1ykAAAAAAAAAAAAAAADwvw"
				],
				[
					483,
					1,
					"left_delete",
					null,
					"AQAAALYpAAAAAAAAtikAAAAAAAABAAAACg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALcpAAAAAAAAtykAAAAAAAAAAAAAAAByQA"
				],
				[
					496,
					6,
					"left_delete",
					null,
					"BgAAAKsoAAAAAAAAqygAAAAAAAABAAAAfakoAAAAAAAAqSgAAAAAAAACAAAAICCnKAAAAAAAAKcoAAAAAAAAAgAAACAgpSgAAAAAAAClKAAAAAAAAAIAAAAgIKMoAAAAAAAAoygAAAAAAAACAAAAICCiKAAAAAAAAKIoAAAAAAAAAQAAAAo",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKwoAAAAAAAArCgAAAAAAAAAAAAAAADwvw"
				],
				[
					498,
					2,
					"left_delete",
					null,
					"AgAAAEgoAAAAAAAASCgAAAAAAAABAAAAe0coAAAAAAAARygAAAAAAAABAAAAIA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEkoAAAAAAAASSgAAAAAAAAAAAAAAMCIQA"
				],
				[
					500,
					1,
					"left_delete",
					null,
					"AQAAAB8oAAAAAAAAHygAAAAAAAABAAAACg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACAoAAAAAAAAICgAAAAAAAAAAAAAAGB1QA"
				],
				[
					503,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAB8oAAAAAAAAICgAAAAAAAAAAAAAICgAAAAAAAAoKAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB8oAAAAAAAAHygAAAAAAAAAAAAAAIiEQA"
				],
				[
					508,
					1,
					"revert",
					null,
					"",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMgvAAAAAAAAyC8AAAAAAAAAAAAAAABSQA"
				],
				[
					527,
					1,
					"insert",
					{
						"characters": "ket"
					},
					"BAAAAKAoAAAAAAAAoSgAAAAAAAAAAAAAoSgAAAAAAAChKAAAAAAAAAYAAAByZXR1cm6hKAAAAAAAAKIoAAAAAAAAAAAAAKIoAAAAAAAAoygAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKAoAAAAAAAApigAAAAAAAAAAAAAAADwvw"
				],
				[
					528,
					3,
					"left_delete",
					null,
					"AwAAAKIoAAAAAAAAoigAAAAAAAABAAAAdKEoAAAAAAAAoSgAAAAAAAABAAAAZaAoAAAAAAAAoCgAAAAAAAABAAAAaw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKMoAAAAAAAAoygAAAAAAAAAAAAAAADwvw"
				],
				[
					529,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAAKAoAAAAAAAAoSgAAAAAAAAAAAAAoSgAAAAAAACiKAAAAAAAAAAAAACiKAAAAAAAAKMoAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKAoAAAAAAAAoCgAAAAAAAAAAAAAAADwvw"
				],
				[
					530,
					1,
					"insert",
					{
						"characters": " ret="
					},
					"BQAAAKMoAAAAAAAApCgAAAAAAAAAAAAApCgAAAAAAAClKAAAAAAAAAAAAAClKAAAAAAAAKYoAAAAAAAAAAAAAKYoAAAAAAAApygAAAAAAAAAAAAApygAAAAAAACoKAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKMoAAAAAAAAoygAAAAAAAAAAAAAAADwvw"
				],
				[
					532,
					1,
					"insert",
					{
						"characters": "\n\nreturn"
					},
					"CwAAANQoAAAAAAAA1SgAAAAAAAAAAAAA1SgAAAAAAADdKAAAAAAAAAAAAADdKAAAAAAAAN4oAAAAAAAAAAAAAN4oAAAAAAAA5igAAAAAAAAAAAAA1SgAAAAAAADVKAAAAAAAAAgAAAAgICAgICAgIN4oAAAAAAAA3ygAAAAAAAAAAAAA3ygAAAAAAADgKAAAAAAAAAAAAADgKAAAAAAAAOEoAAAAAAAAAAAAAOEoAAAAAAAA4igAAAAAAAAAAAAA4igAAAAAAADjKAAAAAAAAAAAAADjKAAAAAAAAOQoAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANQoAAAAAAAA1CgAAAAAAAD////////vfw"
				],
				[
					533,
					1,
					"insert",
					{
						"characters": " ret;"
					},
					"BQAAAOQoAAAAAAAA5SgAAAAAAAAAAAAA5SgAAAAAAADmKAAAAAAAAAAAAADmKAAAAAAAAOcoAAAAAAAAAAAAAOcoAAAAAAAA6CgAAAAAAAAAAAAA6CgAAAAAAADpKAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOQoAAAAAAAA5CgAAAAAAAAAAAAAAADwvw"
				],
				[
					545,
					1,
					"paste",
					null,
					"AQAAANUoAAAAAAAA/ygAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANUoAAAAAAAA1SgAAAAAAAAAAAAAAADwvw"
				],
				[
					554,
					1,
					"insert",
					{
						"characters": "breajk"
					},
					"BwAAAOooAAAAAAAA6ygAAAAAAAAAAAAA6ygAAAAAAADrKAAAAAAAAAoAAABzdGFja1RyYWNl6ygAAAAAAADsKAAAAAAAAAAAAADsKAAAAAAAAO0oAAAAAAAAAAAAAO0oAAAAAAAA7igAAAAAAAAAAAAA7igAAAAAAADvKAAAAAAAAAAAAADvKAAAAAAAAPAoAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOooAAAAAAAA9CgAAAAAAAAAAAAAAADwvw"
				],
				[
					555,
					2,
					"left_delete",
					null,
					"AgAAAO8oAAAAAAAA7ygAAAAAAAABAAAAa+4oAAAAAAAA7igAAAAAAAABAAAAag",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPAoAAAAAAAA8CgAAAAAAAAAAAAAAADwvw"
				],
				[
					556,
					1,
					"insert",
					{
						"characters": "kpoints"
					},
					"BwAAAO4oAAAAAAAA7ygAAAAAAAAAAAAA7ygAAAAAAADwKAAAAAAAAAAAAADwKAAAAAAAAPEoAAAAAAAAAAAAAPEoAAAAAAAA8igAAAAAAAAAAAAA8igAAAAAAADzKAAAAAAAAAAAAADzKAAAAAAAAPQoAAAAAAAAAAAAAPQoAAAAAAAA9SgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO4oAAAAAAAA7igAAAAAAAAAAAAAAADwvw"
				],
				[
					624,
					1,
					"insert",
					{
						"characters": "\n\nif"
					},
					"BwAAAP8oAAAAAAAAACkAAAAAAAAAAAAAACkAAAAAAAAIKQAAAAAAAAAAAAAIKQAAAAAAAAkpAAAAAAAAAAAAAAkpAAAAAAAAESkAAAAAAAAAAAAAACkAAAAAAAAAKQAAAAAAAAgAAAAgICAgICAgIAkpAAAAAAAACikAAAAAAAAAAAAACikAAAAAAAALKQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP8oAAAAAAAA/ygAAAAAAAAAAAAAAADwvw"
				],
				[
					625,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAAspAAAAAAAADSkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAspAAAAAAAACykAAAAAAAAAAAAAAADwvw"
				],
				[
					626,
					1,
					"insert",
					{
						"characters": "ret.path"
					},
					"CAAAAAwpAAAAAAAADSkAAAAAAAAAAAAADSkAAAAAAAAOKQAAAAAAAAAAAAAOKQAAAAAAAA8pAAAAAAAAAAAAAA8pAAAAAAAAECkAAAAAAAAAAAAAECkAAAAAAAARKQAAAAAAAAAAAAARKQAAAAAAABIpAAAAAAAAAAAAABIpAAAAAAAAEykAAAAAAAAAAAAAEykAAAAAAAAUKQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAwpAAAAAAAADCkAAAAAAAAAAAAAAADwvw"
				],
				[
					628,
					1,
					"insert",
					{
						"characters": "\npr"
					},
					"BgAAABUpAAAAAAAAFikAAAAAAAAAAAAAFikAAAAAAAAeKQAAAAAAAAAAAAAWKQAAAAAAABYpAAAAAAAACAAAACAgICAgICAgFikAAAAAAAAgKQAAAAAAAAAAAAAgKQAAAAAAACEpAAAAAAAAAAAAACEpAAAAAAAAIikAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABUpAAAAAAAAFSkAAAAAAAAAAAAAAADwvw"
				],
				[
					629,
					2,
					"left_delete",
					null,
					"AgAAACEpAAAAAAAAISkAAAAAAAABAAAAciApAAAAAAAAICkAAAAAAAABAAAAcA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACIpAAAAAAAAIikAAAAAAAAAAAAAAADwvw"
				],
				[
					630,
					1,
					"insert",
					{
						"characters": "ret.path=relative"
					},
					"EQAAACApAAAAAAAAISkAAAAAAAAAAAAAISkAAAAAAAAiKQAAAAAAAAAAAAAiKQAAAAAAACMpAAAAAAAAAAAAACMpAAAAAAAAJCkAAAAAAAAAAAAAJCkAAAAAAAAlKQAAAAAAAAAAAAAlKQAAAAAAACYpAAAAAAAAAAAAACYpAAAAAAAAJykAAAAAAAAAAAAAJykAAAAAAAAoKQAAAAAAAAAAAAAoKQAAAAAAACkpAAAAAAAAAAAAACkpAAAAAAAAKikAAAAAAAAAAAAAKikAAAAAAAArKQAAAAAAAAAAAAArKQAAAAAAACwpAAAAAAAAAAAAACwpAAAAAAAALSkAAAAAAAAAAAAALSkAAAAAAAAuKQAAAAAAAAAAAAAuKQAAAAAAAC8pAAAAAAAAAAAAAC8pAAAAAAAAMCkAAAAAAAAAAAAAMCkAAAAAAAAxKQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACApAAAAAAAAICkAAAAAAAAAAAAAAADwvw"
				],
				[
					631,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADEpAAAAAAAAMykAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADEpAAAAAAAAMSkAAAAAAAAAAAAAAADwvw"
				],
				[
					632,
					1,
					"insert",
					{
						"characters": "ret.path"
					},
					"CAAAADIpAAAAAAAAMykAAAAAAAAAAAAAMykAAAAAAAA0KQAAAAAAAAAAAAA0KQAAAAAAADUpAAAAAAAAAAAAADUpAAAAAAAANikAAAAAAAAAAAAANikAAAAAAAA3KQAAAAAAAAAAAAA3KQAAAAAAADgpAAAAAAAAAAAAADgpAAAAAAAAOSkAAAAAAAAAAAAAOSkAAAAAAAA6KQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADIpAAAAAAAAMikAAAAAAAAAAAAAAADwvw"
				],
				[
					634,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAADspAAAAAAAAPCkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADspAAAAAAAAOykAAAAAAAAAAAAAAADwvw"
				],
				[
					641,
					1,
					"cut",
					null,
					"AQAAAAEpAAAAAAAAASkAAAAAAAA9AAAAICAgICAgICBpZihyZXQucGF0aCkKICAgICAgICAgIHJldC5wYXRoPXJlbGF0aXZlKHJldC5wYXRoKTsKCg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAEpAAAAAAAAPikAAAAAAAAAAAAAAAAAAA"
				],
				[
					643,
					1,
					"paste",
					null,
					"AQAAANUoAAAAAAAAEikAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANUoAAAAAAAA1SgAAAAAAAAAAAAAAAAAAA"
				],
				[
					644,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAABIpAAAAAAAAEykAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABIpAAAAAAAAEikAAAAAAAAAAAAAAADwvw"
				],
				[
					645,
					2,
					"left_delete",
					null,
					"AgAAABIpAAAAAAAAEikAAAAAAAABAAAAChEpAAAAAAAAESkAAAAAAAABAAAACg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABMpAAAAAAAAEykAAAAAAAAAAAAAAADwvw"
				],
				[
					693,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAANUoAAAAAAAA1igAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANUoAAAAAAAA1SgAAAAAAAAAAAAAAAAAAA"
				],
				[
					732,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAABEpAAAAAAAAEikAAAAAAAAAAAAAEikAAAAAAAAcKQAAAAAAAAAAAAASKQAAAAAAABIpAAAAAAAACgAAACAgICAgICAgICASKQAAAAAAABopAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABEpAAAAAAAAESkAAAAAAAAAAAAAAADwvw"
				],
				[
					753,
					1,
					"cut",
					null,
					"AQAAANUoAAAAAAAA1SgAAAAAAAA9AAAACiAgICAgICAgaWYocmV0LnBhdGgpCiAgICAgICAgICByZXQucGF0aD1yZWxhdGl2ZShyZXQucGF0aCk7Cg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANUoAAAAAAAAEikAAAAAAAAAAAAAAAAAAA"
				],
				[
					754,
					2,
					"paste",
					null,
					"AgAAANUoAAAAAAAAEikAAAAAAAAAAAAAEikAAAAAAABPKQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANUoAAAAAAAA1SgAAAAAAAAAAAAAAADwvw"
				],
				[
					759,
					1,
					"insert",
					{
						"characters": "b"
					},
					"AwAAACIpAAAAAAAAIykAAAAAAAAAAAAAIykAAAAAAAAjKQAAAAAAAAQAAABwYXRoTCkAAAAAAABMKQAAAAAAAAgAAAAgICAgICAgIA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACIpAAAAAAAAJikAAAAAAAAAAAAAAADwvw"
				],
				[
					760,
					2,
					"left_delete",
					null,
					"AgAAACIpAAAAAAAAIikAAAAAAAABAAAAYiEpAAAAAAAAISkAAAAAAAABAAAALg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACMpAAAAAAAAIykAAAAAAAAAAAAAAADwvw"
				],
				[
					761,
					1,
					"insert",
					{
						"characters": "?b"
					},
					"AgAAACEpAAAAAAAAIikAAAAAAAAAAAAAIikAAAAAAAAjKQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACEpAAAAAAAAISkAAAAAAAAAAAAAAADwvw"
				],
				[
					762,
					1,
					"left_delete",
					null,
					"AQAAACIpAAAAAAAAIikAAAAAAAABAAAAYg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACMpAAAAAAAAIykAAAAAAAAAAAAAAADwvw"
				],
				[
					763,
					1,
					"insert",
					{
						"characters": ".breakpoinst?.path"
					},
					"EgAAACIpAAAAAAAAIykAAAAAAAAAAAAAIykAAAAAAAAkKQAAAAAAAAAAAAAkKQAAAAAAACUpAAAAAAAAAAAAACUpAAAAAAAAJikAAAAAAAAAAAAAJikAAAAAAAAnKQAAAAAAAAAAAAAnKQAAAAAAACgpAAAAAAAAAAAAACgpAAAAAAAAKSkAAAAAAAAAAAAAKSkAAAAAAAAqKQAAAAAAAAAAAAAqKQAAAAAAACspAAAAAAAAAAAAACspAAAAAAAALCkAAAAAAAAAAAAALCkAAAAAAAAtKQAAAAAAAAAAAAAtKQAAAAAAAC4pAAAAAAAAAAAAAC4pAAAAAAAALykAAAAAAAAAAAAALykAAAAAAAAwKQAAAAAAAAAAAAAwKQAAAAAAADEpAAAAAAAAAAAAADEpAAAAAAAAMikAAAAAAAAAAAAAMikAAAAAAAAzKQAAAAAAAAAAAAAzKQAAAAAAADQpAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACIpAAAAAAAAIikAAAAAAAAAAAAAAADwvw"
				],
				[
					765,
					1,
					"left_delete",
					null,
					"AQAAACwpAAAAAAAALCkAAAAAAAABAAAAcw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC0pAAAAAAAALSkAAAAAAAAAAAAAAADwvw"
				],
				[
					767,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAC0pAAAAAAAALikAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC0pAAAAAAAALSkAAAAAAAAAAAAAAADwvw"
				],
				[
					777,
					1,
					"paste",
					null,
					"AQAAAEQpAAAAAAAATykAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEQpAAAAAAAARCkAAAAAAAAAAAAAAADwvw"
				],
				[
					778,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAE8pAAAAAAAAUCkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAE8pAAAAAAAATykAAAAAAAAAAAAAAADwvw"
				],
				[
					784,
					1,
					"paste",
					null,
					"AQAAAGIpAAAAAAAAbikAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGIpAAAAAAAAYikAAAAAAAAAAAAAAADwvw"
				],
				[
					809,
					1,
					"delete_blank_lines",
					{
						"surplus": false
					},
					"AQAAANUnAAAAAAAAmikAAAAAAADMAQAACiAgICAgICAgaWYodHlwZXMuaXNQcm9taXNlKGJyZWFrcG9pbnRzKSkgYnJlYWtwb2ludHMgPSBhd2FpdCBicmVha3BvaW50czsKCiAgICAgICAgaWYoQXJyYXkuaXNBcnJheShicmVha3BvaW50cykpIGJyZWFrcG9pbnRzID0gYnJlYWtwb2ludHMubWFwKGIgPT4gZmlsdGVyS2V5cyhiLCBbJ25hbWUnLCAnbGluZScsICdjb2x1bW4nXSkpOwoKICAgICAgICBsZXQgcmV0PSBhd2FpdCBtZW1iZXIuY2FsbCh0aGlzLCBmaWxlLCBicmVha3BvaW50cyk7CgogICAgICAgIGlmKHJldC5wYXRoKQogICAgICAgICAgcmV0LnBhdGg9cmVsYXRpdmUocmV0LnBhdGgpOwoKICAgICAgICBpZihyZXQ/LmJyZWFrcG9pbnRzPy5wYXRoKQogICAgICAgICAgcmV0LmJyZWFrcG9pbnRzLnBhdGg9cmVsYXRpdmUocmV0LmJyZWFrcG9pbnRzLnBhdGgpOwoKICAgICAgICBjb25zb2xlLmxvZygnYnJlYWtwb2ludHMgPScsIHJldCk7Cg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANUnAAAAAAAAoSkAAAAAAAAAAAAAAADwvw"
				],
				[
					810,
					1,
					"delete_blank_lines",
					{
						"surplus": true
					},
					"AQAAANUnAAAAAAAAmikAAAAAAADFAQAAICAgICAgICBpZih0eXBlcy5pc1Byb21pc2UoYnJlYWtwb2ludHMpKSBicmVha3BvaW50cyA9IGF3YWl0IGJyZWFrcG9pbnRzOwogICAgICAgIGlmKEFycmF5LmlzQXJyYXkoYnJlYWtwb2ludHMpKSBicmVha3BvaW50cyA9IGJyZWFrcG9pbnRzLm1hcChiID0+IGZpbHRlcktleXMoYiwgWyduYW1lJywgJ2xpbmUnLCAnY29sdW1uJ10pKTsKICAgICAgICBsZXQgcmV0PSBhd2FpdCBtZW1iZXIuY2FsbCh0aGlzLCBmaWxlLCBicmVha3BvaW50cyk7CiAgICAgICAgaWYocmV0LnBhdGgpCiAgICAgICAgICByZXQucGF0aD1yZWxhdGl2ZShyZXQucGF0aCk7CiAgICAgICAgaWYocmV0Py5icmVha3BvaW50cz8ucGF0aCkKICAgICAgICAgIHJldC5icmVha3BvaW50cy5wYXRoPXJlbGF0aXZlKHJldC5icmVha3BvaW50cy5wYXRoKTsKICAgICAgICBjb25zb2xlLmxvZygnYnJlYWtwb2ludHMgPScsIHJldCk7",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANUnAAAAAAAAmikAAAAAAAAAAAAAAADwvw"
				],
				[
					820,
					1,
					"delete_blank_lines",
					{
						"surplus": true
					},
					"AQAAAPIsAAAAAAAApS0AAAAAAAC0AAAACiAgICAgICAgcmVwbC5wcmludFN0YXR1cygoYXdhaXQgUHJpbnRTdGFja0ZyYW1lKHN0YWNrWzBdKSkuam9pbignICcpICsgJ1xuJyk7CgogICAgICAgIGNvbnN0IHsgZmlsZW5hbWUsIGxpbmUgfSA9IHN0YWNrWzBdOwoKICAgICAgICBkZWZpbmUoZ2xvYmFsVGhpcywgeyBmaWxlOiBmaWxlbmFtZSwgbGluZSB9KTsK",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPIsAAAAAAAApi0AAAAAAAAAAAAAAADwvw"
				],
				[
					825,
					1,
					"revert",
					null,
					"",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK0vAAAAAAAArS8AAAAAAAAAAAAAAADwvw"
				],
				[
					844,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAALMaAAAAAAAAtBoAAAAAAAAAAAAAtBoAAAAAAAC+GgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALMaAAAAAAAAsxoAAAAAAAAAAAAAAADwvw"
				],
				[
					859,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BgAAAAYbAAAAAAAABxsAAAAAAAAAAAAABxsAAAAAAAARGwAAAAAAAAAAAAC0GgAAAAAAALQaAAAAAAAACgAAACAgICAgICAgICAHGwAAAAAAAAgbAAAAAAAAAAAAAAgbAAAAAAAAEhsAAAAAAAAAAAAA/RoAAAAAAAD9GgAAAAAAAAoAAAAgICAgICAgICAg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAYbAAAAAAAABhsAAAAAAAAAAAAAAEB0QA"
				],
				[
					860,
					1,
					"paste",
					null,
					"AQAAAAgbAAAAAAAAURsAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAgbAAAAAAAACBsAAAAAAAAAAAAAAADwvw"
				],
				[
					865,
					1,
					"insert",
					{
						"characters": "D"
					},
					"AgAAADEbAAAAAAAAMhsAAAAAAAAAAAAAMhsAAAAAAAAyGwAAAAAAAAgAAABEZWJ1Z2dlcg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADEbAAAAAAAAORsAAAAAAAAAAAAAAADwvw"
				],
				[
					866,
					1,
					"left_delete",
					null,
					"AQAAADEbAAAAAAAAMRsAAAAAAAABAAAARA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADIbAAAAAAAAMhsAAAAAAAAAAAAAAADwvw"
				],
				[
					867,
					1,
					"insert",
					{
						"characters": "process"
					},
					"BwAAADEbAAAAAAAAMhsAAAAAAAAAAAAAMhsAAAAAAAAzGwAAAAAAAAAAAAAzGwAAAAAAADQbAAAAAAAAAAAAADQbAAAAAAAANRsAAAAAAAAAAAAANRsAAAAAAAA2GwAAAAAAAAAAAAA2GwAAAAAAADcbAAAAAAAAAAAAADcbAAAAAAAAOBsAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADEbAAAAAAAAMRsAAAAAAAAAAAAAAADwvw"
				],
				[
					868,
					7,
					"left_delete",
					null,
					"BwAAADcbAAAAAAAANxsAAAAAAAABAAAAczYbAAAAAAAANhsAAAAAAAABAAAAczUbAAAAAAAANRsAAAAAAAABAAAAZTQbAAAAAAAANBsAAAAAAAABAAAAYzMbAAAAAAAAMxsAAAAAAAABAAAAbzIbAAAAAAAAMhsAAAAAAAABAAAAcjEbAAAAAAAAMRsAAAAAAAABAAAAcA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADgbAAAAAAAAOBsAAAAAAAAAAAAAAADwvw"
				],
				[
					869,
					1,
					"right_delete",
					null,
					"AQAAADEbAAAAAAAAMRsAAAAAAAABAAAAIA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADEbAAAAAAAAMRsAAAAAAAAAAAAAAADwvw"
				],
				[
					872,
					1,
					"insert",
					{
						"characters": " read:"
					},
					"BgAAADobAAAAAAAAOxsAAAAAAAAAAAAAOxsAAAAAAAA8GwAAAAAAAAAAAAA8GwAAAAAAAD0bAAAAAAAAAAAAAD0bAAAAAAAAPhsAAAAAAAAAAAAAPhsAAAAAAAA/GwAAAAAAAAAAAAA/GwAAAAAAAEAbAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADobAAAAAAAAOhsAAAAAAAAAAAAAAADwvw"
				],
				[
					873,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEAbAAAAAAAAQRsAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEAbAAAAAAAAQBsAAAAAAAAAAAAAAADwvw"
				],
				[
					874,
					1,
					"left_delete",
					null,
					"AQAAAEAbAAAAAAAAQBsAAAAAAAABAAAAIA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEEbAAAAAAAAQRsAAAAAAAAAAAAAAADwvw"
				],
				[
					878,
					1,
					"insert",
					{
						"characters": "obj"
					},
					"BAAAAEIbAAAAAAAAQxsAAAAAAAAAAAAAQxsAAAAAAABDGwAAAAAAAAkAAAAgY2FsbGJhY2tDGwAAAAAAAEQbAAAAAAAAAAAAAEQbAAAAAAAARRsAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEIbAAAAAAAASxsAAAAAAAAAAAAAAADwvw"
				],
				[
					887,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAACMbAAAAAAAAJRsAAAAAAAAAAAAADhsAAAAAAAAQGwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA4bAAAAAAAAIxsAAAAAAAAAAAAAAADwvw"
				],
				[
					910,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAANwpAAAAAAAA3SkAAAAAAAAAAAAA3SkAAAAAAADlKQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANwpAAAAAAAA3CkAAAAAAAAAAAAAAADwvw"
				],
				[
					912,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAALopAAAAAAAAuykAAAAAAAAAAAAAuykAAAAAAADDKQAAAAAAAAAAAADmKQAAAAAAAOYpAAAAAAAACAAAACAgICAgICAg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALopAAAAAAAAuikAAAAAAAAAAAAAAABSQA"
				],
				[
					914,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAACwpAAAAAAAALSkAAAAAAAAAAAAALSkAAAAAAAA1KQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACwpAAAAAAAALCkAAAAAAAAAAAAAAABSQA"
				],
				[
					916,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAO4oAAAAAAAA7ygAAAAAAAAAAAAA7ygAAAAAAAD3KAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO4oAAAAAAAA7igAAAAAAAAAAAAAAABSQA"
				],
				[
					924,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAC4oAAAAAAAALygAAAAAAAAAAAAALygAAAAAAAA3KAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC4oAAAAAAAALigAAAAAAAAAAAAAAABSQA"
				],
				[
					933,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAA8oAAAAAAAAECgAAAAAAAAAAAAAECgAAAAAAAAYKAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA8oAAAAAAAADygAAAAAAAAAAAAAAABSQA"
				],
				[
					958,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAAOYpAAAAAAAA5ykAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOYpAAAAAAAA5ikAAAAAAAAAAAAAAADwvw"
				],
				[
					959,
					1,
					"left_delete",
					null,
					"AQAAAOYpAAAAAAAA5ikAAAAAAAABAAAALw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOcpAAAAAAAA5ykAAAAAAAAAAAAAAADwvw"
				],
				[
					960,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAOYpAAAAAAAA5ykAAAAAAAAAAAAA5ykAAAAAAADoKQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOYpAAAAAAAA5ikAAAAAAAAAAAAAAADwvw"
				],
				[
					18,
					2,
					"right_delete",
					null,
					"AgAAAA4bAAAAAAAADhsAAAAAAAABAAAALw4bAAAAAAAADhsAAAAAAAABAAAAKg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAOGwAAAAAAAA4bAAAAAAAAAAAAAAAAYkA"
				],
				[
					20,
					2,
					"right_delete",
					null,
					"AgAAACMbAAAAAAAAIxsAAAAAAAABAAAAKiMbAAAAAAAAIxsAAAAAAAABAAAALw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAjGwAAAAAAACMbAAAAAAAAAAAAAAAA8L8"
				],
				[
					26,
					3,
					"left_delete",
					null,
					"AwAAAAwbAAAAAAAADBsAAAAAAAACAAAAICAKGwAAAAAAAAobAAAAAAAAAgAAACAgCBsAAAAAAAAIGwAAAAAAAAIAAAAgIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAOGwAAAAAAAA4bAAAAAAAAAAAAAAAAYkA"
				]
			]
		},
		{
			"file": "CToy-1.05-Linux64-x86_64/tool/build_native/3rdparty/glfw/examples/gears.c",
			"settings":
			{
				"buffer_size": 9910,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "lib/util.js",
			"settings":
			{
				"buffer_size": 185305,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "lib/dom/css.js",
			"settings":
			{
				"buffer_size": 6945,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAJsBAAAAAAAAnAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmwEAAAAAAACbAQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/bpg/bpgdec8.js",
			"settings":
			{
				"buffer_size": 21381,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "lib/bpg/bpgdec.js",
			"settings":
			{
				"buffer_size": 21380,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "lib/container/multiMap.js",
			"settings":
			{
				"buffer_size": 4122,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "quickjs/qjs-modules/lib/repl.js",
			"settings":
			{
				"buffer_size": 62715,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					26,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAGXxAAAAAAAAZ/EAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABl8QAAAAAAAGXxAAAAAAAAAAAAAAAA8L8"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "$"
					},
					"AQAAAGbxAAAAAAAAZ/EAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABm8QAAAAAAAGbxAAAAAAAAAAAAAAAA8L8"
				],
				[
					28,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAGfxAAAAAAAAafEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABn8QAAAAAAAGfxAAAAAAAAAAAAAAAA8L8"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": "module_name"
					},
					"CwAAAGjxAAAAAAAAafEAAAAAAAAAAAAAafEAAAAAAABq8QAAAAAAAAAAAABq8QAAAAAAAGvxAAAAAAAAAAAAAGvxAAAAAAAAbPEAAAAAAAAAAAAAbPEAAAAAAABt8QAAAAAAAAAAAABt8QAAAAAAAG7xAAAAAAAAAAAAAG7xAAAAAAAAb/EAAAAAAAAAAAAAb/EAAAAAAABw8QAAAAAAAAAAAABw8QAAAAAAAHHxAAAAAAAAAAAAAHHxAAAAAAAAcvEAAAAAAAAAAAAAcvEAAAAAAABz8QAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABo8QAAAAAAAGjxAAAAAAAAAAAAAAAA8L8"
				],
				[
					31,
					1,
					"left_delete",
					null,
					"AQAAAHvxAAAAAAAAe/EAAAAAAAABAAAAJw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB88QAAAAAAAHzxAAAAAAAAAAAAAAAA8L8"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "?"
					},
					"AQAAAHvxAAAAAAAAfPEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB78QAAAAAAAHvxAAAAAAAAAAAAAAAA8L8"
				],
				[
					33,
					1,
					"left_delete",
					null,
					"AQAAAHvxAAAAAAAAe/EAAAAAAAABAAAAPw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB88QAAAAAAAHzxAAAAAAAAAAAAAAAA8L8"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": "`"
					},
					"AQAAAHvxAAAAAAAAfPEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB78QAAAAAAAHvxAAAAAAAAAAAAAAAA8L8"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHzxAAAAAAAAffEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB88QAAAAAAAHzxAAAAAAAAAAAAAAAA8L8"
				],
				[
					39,
					1,
					"left_delete",
					null,
					"AQAAAFrxAAAAAAAAWvEAAAAAAAABAAAAJw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABb8QAAAAAAAFvxAAAAAAAAAAAAAABgZUA"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": "`"
					},
					"AQAAAFrxAAAAAAAAW/EAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABa8QAAAAAAAFrxAAAAAAAAAAAAAAAA8L8"
				],
				[
					47,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABb8QAAAAAAAFvxAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "debugger-client.js",
			"settings":
			{
				"buffer_size": 10822,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					34,
					1,
					"insert",
					{
						"characters": "\nif"
					},
					"BAAAAOQSAAAAAAAA5RIAAAAAAAAAAAAA5RIAAAAAAADnEgAAAAAAAAAAAADnEgAAAAAAAOgSAAAAAAAAAAAAAOgSAAAAAAAA6RIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOQSAAAAAAAA5BIAAAAAAAAAAAAAAJByQA"
				],
				[
					35,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAOkSAAAAAAAA6xIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOkSAAAAAAAA6RIAAAAAAAAAAAAAAADwvw"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "!address"
					},
					"CAAAAOoSAAAAAAAA6xIAAAAAAAAAAAAA6xIAAAAAAADsEgAAAAAAAAAAAADsEgAAAAAAAO0SAAAAAAAAAAAAAO0SAAAAAAAA7hIAAAAAAAAAAAAA7hIAAAAAAADvEgAAAAAAAAAAAADvEgAAAAAAAPASAAAAAAAAAAAAAPASAAAAAAAA8RIAAAAAAAAAAAAA8RIAAAAAAADyEgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOoSAAAAAAAA6hIAAAAAAAAAAAAAAADwvw"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPMSAAAAAAAA9BIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPMSAAAAAAAA8xIAAAAAAAAAAAAAAADwvw"
				],
				[
					39,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAPQSAAAAAAAA9hIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPQSAAAAAAAA9BIAAAAAAAAAAAAAAADwvw"
				],
				[
					40,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAPUSAAAAAAAA9hIAAAAAAAAAAAAA9hIAAAAAAAD4EgAAAAAAAAAAAAD4EgAAAAAAAPkSAAAAAAAAAAAAAPkSAAAAAAAA+xIAAAAAAAAAAAAA9hIAAAAAAAD2EgAAAAAAAAIAAAAgIPYSAAAAAAAA+hIAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPUSAAAAAAAA9RIAAAAAAAAAAAAAAADwvw"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": "globalThis.addr"
					},
					"DwAAAPoSAAAAAAAA+xIAAAAAAAAAAAAA+xIAAAAAAAD8EgAAAAAAAAAAAAD8EgAAAAAAAP0SAAAAAAAAAAAAAP0SAAAAAAAA/hIAAAAAAAAAAAAA/hIAAAAAAAD/EgAAAAAAAAAAAAD/EgAAAAAAAAATAAAAAAAAAAAAAAATAAAAAAAAARMAAAAAAAAAAAAAARMAAAAAAAACEwAAAAAAAAAAAAACEwAAAAAAAAMTAAAAAAAAAAAAAAMTAAAAAAAABBMAAAAAAAAAAAAABBMAAAAAAAAFEwAAAAAAAAAAAAAFEwAAAAAAAAYTAAAAAAAAAAAAAAYTAAAAAAAABxMAAAAAAAAAAAAABxMAAAAAAAAIEwAAAAAAAAAAAAAIEwAAAAAAAAkTAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPoSAAAAAAAA+hIAAAAAAAAAAAAAAADwvw"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": "ess=address="
					},
					"DAAAAAkTAAAAAAAAChMAAAAAAAAAAAAAChMAAAAAAAALEwAAAAAAAAAAAAALEwAAAAAAAAwTAAAAAAAAAAAAAAwTAAAAAAAADRMAAAAAAAAAAAAADRMAAAAAAAAOEwAAAAAAAAAAAAAOEwAAAAAAAA8TAAAAAAAAAAAAAA8TAAAAAAAAEBMAAAAAAAAAAAAAEBMAAAAAAAAREwAAAAAAAAAAAAAREwAAAAAAABITAAAAAAAAAAAAABITAAAAAAAAExMAAAAAAAAAAAAAExMAAAAAAAAUEwAAAAAAAAAAAAAUEwAAAAAAABUTAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAkTAAAAAAAACRMAAAAAAAAAAAAAAADwvw"
				],
				[
					44,
					1,
					"",
					null,
					"AQAAABUTAAAAAAAAOBMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABUTAAAAAAAAFRMAAAAAAAAAAAAAAADwvw"
				],
				[
					47,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADgTAAAAAAAAOhMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADgTAAAAAAAAOBMAAAAAAAAAAAAAAADwvw"
				],
				[
					49,
					2,
					"left_delete",
					null,
					"AgAAADkTAAAAAAAAORMAAAAAAAABAAAAKTgTAAAAAAAAOBMAAAAAAAABAAAAKA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADoTAAAAAAAAOhMAAAAAAAAAAAAAAADwvw"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": ");"
					},
					"AgAAADgTAAAAAAAAORMAAAAAAAAAAAAAORMAAAAAAAA6EwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADgTAAAAAAAAOBMAAAAAAAAAAAAAAADwvw"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAABUTAAAAAAAAFhMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABUTAAAAAAAAFRMAAAAAAAAAAAAAAADwvw"
				],
				[
					54,
					1,
					"left_delete",
					null,
					"AQAAABUTAAAAAAAAFRMAAAAAAAABAAAALw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABYTAAAAAAAAFhMAAAAAAAAAAAAAAADwvw"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAABUTAAAAAAAAFhMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABUTAAAAAAAAFRMAAAAAAAAAAAAAAADwvw"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": "'127.0.0.1:"
					},
					"CwAAABUTAAAAAAAAFhMAAAAAAAAAAAAAFhMAAAAAAAAXEwAAAAAAAAAAAAAXEwAAAAAAABgTAAAAAAAAAAAAABgTAAAAAAAAGRMAAAAAAAAAAAAAGRMAAAAAAAAaEwAAAAAAAAAAAAAaEwAAAAAAABsTAAAAAAAAAAAAABsTAAAAAAAAHBMAAAAAAAAAAAAAHBMAAAAAAAAdEwAAAAAAAAAAAAAdEwAAAAAAAB4TAAAAAAAAAAAAAB4TAAAAAAAAHxMAAAAAAAAAAAAAHxMAAAAAAAAgEwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABUTAAAAAAAAFRMAAAAAAAAAAAAAAADwvw"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": "'°+"
					},
					"AwAAACATAAAAAAAAIRMAAAAAAAAAAAAAIRMAAAAAAAAiEwAAAAAAAAAAAAAiEwAAAAAAACMTAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACATAAAAAAAAIBMAAAAAAAAAAAAAAADwvw"
				],
				[
					59,
					2,
					"left_delete",
					null,
					"AgAAACITAAAAAAAAIhMAAAAAAAABAAAAKyETAAAAAAAAIRMAAAAAAAACAAAAwrA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACMTAAAAAAAAIxMAAAAAAAAAAAAAAADwvw"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": "+"
					},
					"AQAAACETAAAAAAAAIhMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACETAAAAAAAAIRMAAAAAAAAAAAAAAADwvw"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAEwTAAAAAAAATRMAAAAAAAAAAAAATRMAAAAAAABPEwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEwTAAAAAAAATBMAAAAAAAD////////vfw"
				],
				[
					87,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AwAAAJ0TAAAAAAAAnhMAAAAAAAAAAAAATRMAAAAAAABNEwAAAAAAAAIAAAAgIJwTAAAAAAAAnRMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ0TAAAAAAAAnRMAAAAAAAAAAAAAAADwvw"
				],
				[
					88,
					1,
					"insert",
					{
						"characters": " globalThis.addr"
					},
					"EAAAAJ0TAAAAAAAAnhMAAAAAAAAAAAAAnhMAAAAAAACfEwAAAAAAAAAAAACfEwAAAAAAAKATAAAAAAAAAAAAAKATAAAAAAAAoRMAAAAAAAAAAAAAoRMAAAAAAACiEwAAAAAAAAAAAACiEwAAAAAAAKMTAAAAAAAAAAAAAKMTAAAAAAAApBMAAAAAAAAAAAAApBMAAAAAAAClEwAAAAAAAAAAAAClEwAAAAAAAKYTAAAAAAAAAAAAAKYTAAAAAAAApxMAAAAAAAAAAAAApxMAAAAAAACoEwAAAAAAAAAAAACoEwAAAAAAAKkTAAAAAAAAAAAAAKkTAAAAAAAAqhMAAAAAAAAAAAAAqhMAAAAAAACrEwAAAAAAAAAAAACrEwAAAAAAAKwTAAAAAAAAAAAAAKwTAAAAAAAArRMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ0TAAAAAAAAnRMAAAAAAAAAAAAAAADwvw"
				],
				[
					89,
					1,
					"insert",
					{
						"characters": "ess"
					},
					"AwAAAK0TAAAAAAAArhMAAAAAAAAAAAAArhMAAAAAAACvEwAAAAAAAAAAAACvEwAAAAAAALATAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK0TAAAAAAAArRMAAAAAAAAAAAAAAADwvw"
				],
				[
					136,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAL0lAAAAAAAAviUAAAAAAAAAAAAAviUAAAAAAADGJQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL0lAAAAAAAAvSUAAAAAAAAAAAAAAADwvw"
				],
				[
					139,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAIYlAAAAAAAAhyUAAAAAAAAAAAAAhyUAAAAAAACPJQAAAAAAAAAAAADHJQAAAAAAAMclAAAAAAAACAAAACAgICAgICAg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIYlAAAAAAAAhiUAAAAAAAAAAAAAAABSQA"
				],
				[
					171,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAANgkAAAAAAAA2SQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANgkAAAAAAAA2CQAAAAAAAAAAAAAAADwvw"
				],
				[
					172,
					5,
					"left_delete",
					null,
					"BQAAANgkAAAAAAAA2CQAAAAAAAABAAAACtckAAAAAAAA1yQAAAAAAAABAAAAL9YkAAAAAAAA1iQAAAAAAAABAAAAKtUkAAAAAAAA1SQAAAAAAAABAAAACtQkAAAAAAAA1CQAAAAAAAABAAAAOw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANkkAAAAAAAA2SQAAAAAAAAAAAAAAADwvw"
				],
				[
					173,
					1,
					"insert",
					{
						"characters": ";*/"
					},
					"AwAAANQkAAAAAAAA1SQAAAAAAAAAAAAA1SQAAAAAAADWJAAAAAAAAAAAAADWJAAAAAAAANckAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANQkAAAAAAAA1CQAAAAAAAAAAAAAAADwvw"
				],
				[
					176,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAANckAAAAAAAA2CQAAAAAAAAAAAAA2CQAAAAAAADaJAAAAAAAAAAAAADaJAAAAAAAANskAAAAAAAAAAAAANskAAAAAAAA3SQAAAAAAAAAAAAA2CQAAAAAAADYJAAAAAAAAAIAAAAgIA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANckAAAAAAAA1yQAAAAAAAAAAAAAAADwvw"
				],
				[
					281,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAEQeAAAAAAAARR4AAAAAAAAAAAAA2iQAAAAAAADaJAAAAAAAAAIAAAAgIA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEQeAAAAAAAARB4AAAAAAAAAAAAAAADwvw"
				],
				[
					303,
					1,
					"insert",
					{
						"characters": "\n\nresponses"
					},
					"DgAAAPYlAAAAAAAA9yUAAAAAAAAAAAAA9yUAAAAAAAD5JQAAAAAAAAAAAAD5JQAAAAAAAPolAAAAAAAAAAAAAPolAAAAAAAA/CUAAAAAAAAAAAAA9yUAAAAAAAD3JQAAAAAAAAIAAAAgIPolAAAAAAAA+yUAAAAAAAAAAAAA+yUAAAAAAAD8JQAAAAAAAAAAAAD8JQAAAAAAAP0lAAAAAAAAAAAAAP0lAAAAAAAA/iUAAAAAAAAAAAAA/iUAAAAAAAD/JQAAAAAAAAAAAAD/JQAAAAAAAAAmAAAAAAAAAAAAAAAmAAAAAAAAASYAAAAAAAAAAAAAASYAAAAAAAACJgAAAAAAAAAAAAACJgAAAAAAAAMmAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPYlAAAAAAAA9iUAAAAAAAAAAAAAAADwvw"
				],
				[
					305,
					1,
					"insert",
					{
						"characters": "glöo"
					},
					"BQAAAPolAAAAAAAA+yUAAAAAAAAAAAAA+yUAAAAAAAD7JQAAAAAAAAkAAAByZXNwb25zZXP7JQAAAAAAAPwlAAAAAAAAAAAAAPwlAAAAAAAA/SUAAAAAAAAAAAAA/SUAAAAAAAD+JQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAMmAAAAAAAA+iUAAAAAAAAAAAAAAAAyQA"
				],
				[
					306,
					4,
					"left_delete",
					null,
					"BAAAAP0lAAAAAAAA/SUAAAAAAAABAAAAb/wlAAAAAAAA/CUAAAAAAAACAAAAw7b7JQAAAAAAAPslAAAAAAAAAQAAAGz6JQAAAAAAAPolAAAAAAAAAQAAAGc",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP4lAAAAAAAA/iUAAAAAAAAAAAAAAADwvw"
				],
				[
					307,
					1,
					"insert",
					{
						"characters": "responses=dispatch"
					},
					"EgAAAPolAAAAAAAA+yUAAAAAAAAAAAAA+yUAAAAAAAD8JQAAAAAAAAAAAAD8JQAAAAAAAP0lAAAAAAAAAAAAAP0lAAAAAAAA/iUAAAAAAAAAAAAA/iUAAAAAAAD/JQAAAAAAAAAAAAD/JQAAAAAAAAAmAAAAAAAAAAAAAAAmAAAAAAAAASYAAAAAAAAAAAAAASYAAAAAAAACJgAAAAAAAAAAAAACJgAAAAAAAAMmAAAAAAAAAAAAAAMmAAAAAAAABCYAAAAAAAAAAAAABCYAAAAAAAAFJgAAAAAAAAAAAAAFJgAAAAAAAAYmAAAAAAAAAAAAAAYmAAAAAAAAByYAAAAAAAAAAAAAByYAAAAAAAAIJgAAAAAAAAAAAAAIJgAAAAAAAAkmAAAAAAAAAAAAAAkmAAAAAAAACiYAAAAAAAAAAAAACiYAAAAAAAALJgAAAAAAAAAAAAALJgAAAAAAAAwmAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPolAAAAAAAA+iUAAAAAAAAAAAAAAADwvw"
				],
				[
					308,
					1,
					"insert",
					{
						"characters": ".responses;"
					},
					"CwAAAAwmAAAAAAAADSYAAAAAAAAAAAAADSYAAAAAAAAOJgAAAAAAAAAAAAAOJgAAAAAAAA8mAAAAAAAAAAAAAA8mAAAAAAAAECYAAAAAAAAAAAAAECYAAAAAAAARJgAAAAAAAAAAAAARJgAAAAAAABImAAAAAAAAAAAAABImAAAAAAAAEyYAAAAAAAAAAAAAEyYAAAAAAAAUJgAAAAAAAAAAAAAUJgAAAAAAABUmAAAAAAAAAAAAABUmAAAAAAAAFiYAAAAAAAAAAAAAFiYAAAAAAAAXJgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAwmAAAAAAAADCYAAAAAAAAAAAAAAADwvw"
				],
				[
					311,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAABcmAAAAAAAAGCYAAAAAAAAAAAAAGCYAAAAAAAAaJgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABcmAAAAAAAAFyYAAAAAAAAAAAAAAADwvw"
				],
				[
					316,
					2,
					"left_delete",
					null,
					"AgAAABgmAAAAAAAAGCYAAAAAAAACAAAAICAXJgAAAAAAABcmAAAAAAAAAQAAAAo",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABomAAAAAAAAGiYAAAAAAAAAAAAAAADwvw"
				],
				[
					388,
					1,
					"cut",
					null,
					"AQAAAK8bAAAAAAAArxsAAAAAAAAKAAAAcmVzcG9uc2VzLA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK8bAAAAAAAAuRsAAAAAAAAAAAAAAADwvw"
				],
				[
					394,
					1,
					"insert",
					{
						"characters": "globalThis.responses"
					},
					"FAAAAPolAAAAAAAA+yUAAAAAAAAAAAAA+yUAAAAAAAD8JQAAAAAAAAAAAAD8JQAAAAAAAP0lAAAAAAAAAAAAAP0lAAAAAAAA/iUAAAAAAAAAAAAA/iUAAAAAAAD/JQAAAAAAAAAAAAD/JQAAAAAAAAAmAAAAAAAAAAAAAAAmAAAAAAAAASYAAAAAAAAAAAAAASYAAAAAAAACJgAAAAAAAAAAAAACJgAAAAAAAAMmAAAAAAAAAAAAAAMmAAAAAAAABCYAAAAAAAAAAAAABCYAAAAAAAAFJgAAAAAAAAAAAAAFJgAAAAAAAAYmAAAAAAAAAAAAAAYmAAAAAAAAByYAAAAAAAAAAAAAByYAAAAAAAAIJgAAAAAAAAAAAAAIJgAAAAAAAAkmAAAAAAAAAAAAAAkmAAAAAAAACiYAAAAAAAAAAAAACiYAAAAAAAALJgAAAAAAAAAAAAALJgAAAAAAAAwmAAAAAAAAAAAAAAwmAAAAAAAADSYAAAAAAAAAAAAADSYAAAAAAAAOJgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPolAAAAAAAA+iUAAAAAAAAAAAAAAADwvw"
				],
				[
					395,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAA4mAAAAAAAADyYAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA4mAAAAAAAADiYAAAAAAAAAAAAAAADwvw"
				],
				[
					401,
					1,
					"insert",
					{
						"characters": "36"
					},
					"AgAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					402,
					2,
					"left_delete",
					null,
					"AgAAAAEAAAAAAAAAAQAAAAAAAAABAAAANgAAAAAAAAAAAAAAAAAAAAABAAAAMw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAIAAAAAAAAAAgAAAAAAAAAAAAAAAADwvw"
				],
				[
					492,
					1,
					"cut",
					null,
					"AQAAAGgGAAAAAAAAaAYAAAAAAAAUAAAARWxlbWVudC5maW5kKCdtYWluJyk",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGgGAAAAAAAAfAYAAAAAAAAAAAAAAADwvw"
				],
				[
					493,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAGgGAAAAAAAAaQYAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGgGAAAAAAAAaAYAAAAAAAAAAAAAAADwvw"
				],
				[
					495,
					1,
					"insert",
					{
						"characters": "\nlet"
					},
					"BQAAAEkGAAAAAAAASgYAAAAAAAAAAAAASgYAAAAAAABMBgAAAAAAAAAAAABMBgAAAAAAAE0GAAAAAAAAAAAAAE0GAAAAAAAATgYAAAAAAAAAAAAATgYAAAAAAABPBgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEkGAAAAAAAASQYAAAAAAAAAAAAAAHBxQA"
				],
				[
					496,
					1,
					"insert",
					{
						"characters": " e;"
					},
					"AwAAAE8GAAAAAAAAUAYAAAAAAAAAAAAAUAYAAAAAAABRBgAAAAAAAAAAAABRBgAAAAAAAFIGAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAE8GAAAAAAAATwYAAAAAAAAAAAAAAADwvw"
				],
				[
					497,
					1,
					"insert",
					{
						"characters": "\n\nif"
					},
					"BwAAAFIGAAAAAAAAUwYAAAAAAAAAAAAAUwYAAAAAAABVBgAAAAAAAAAAAABVBgAAAAAAAFYGAAAAAAAAAAAAAFYGAAAAAAAAWAYAAAAAAAAAAAAAUwYAAAAAAABTBgAAAAAAAAIAAAAgIFYGAAAAAAAAVwYAAAAAAAAAAAAAVwYAAAAAAABYBgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFIGAAAAAAAAUgYAAAAAAAAAAAAAAADwvw"
				],
				[
					498,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAFgGAAAAAAAAWgYAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFgGAAAAAAAAWAYAAAAAAAAAAAAAAADwvw"
				],
				[
					499,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAFkGAAAAAAAAWgYAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFkGAAAAAAAAWQYAAAAAAAAAAAAAAADwvw"
				],
				[
					500,
					1,
					"left_delete",
					null,
					"AQAAAFkGAAAAAAAAWQYAAAAAAAABAAAAZQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFoGAAAAAAAAWgYAAAAAAAAAAAAAAADwvw"
				],
				[
					501,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAFkGAAAAAAAAWwYAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFkGAAAAAAAAWQYAAAAAAAAAAAAAAADwvw"
				],
				[
					502,
					1,
					"insert",
					{
						"characters": "e="
					},
					"AgAAAFoGAAAAAAAAWwYAAAAAAAAAAAAAWwYAAAAAAABcBgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFoGAAAAAAAAWgYAAAAAAAAAAAAAAADwvw"
				],
				[
					503,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFwGAAAAAAAAXQYAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFwGAAAAAAAAXAYAAAAAAAAAAAAAAADwvw"
				],
				[
					504,
					1,
					"paste",
					null,
					"AQAAAF0GAAAAAAAAcQYAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF0GAAAAAAAAXQYAAAAAAAAAAAAAAADwvw"
				],
				[
					506,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHMGAAAAAAAAdAYAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHMGAAAAAAAAcwYAAAAAAAAAAAAAAADwvw"
				],
				[
					507,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAHQGAAAAAAAAdgYAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHQGAAAAAAAAdAYAAAAAAAAAAAAAAADwvw"
				],
				[
					508,
					1,
					"right_delete",
					null,
					"AQAAAHUGAAAAAAAAdQYAAAAAAAABAAAAfQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHUGAAAAAAAAdQYAAAAAAAAAAAAAAADwvw"
				],
				[
					511,
					1,
					"insert",
					{
						"characters": "\n}"
					},
					"BQAAACwHAAAAAAAALQcAAAAAAAAAAAAALQcAAAAAAAAvBwAAAAAAAAAAAAAvBwAAAAAAADAHAAAAAAAAAAAAAC0HAAAAAAAALQcAAAAAAAACAAAAICAtBwAAAAAAAC0HAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACwHAAAAAAAALAcAAAAAAAD////////vfw"
				],
				[
					515,
					1,
					"revert",
					null,
					"",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANMGAAAAAAAA0wYAAAAAAAAAAAAAAAAiQA"
				],
				[
					590,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAIkPAAAAAAAAig8AAAAAAAAAAAAAig8AAAAAAACMDwAAAAAAAAAAAACMDwAAAAAAAI0PAAAAAAAAAAAAAI0PAAAAAAAAjw8AAAAAAAAAAAAAig8AAAAAAACKDwAAAAAAAAIAAAAgIA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIkPAAAAAAAAiQ8AAAAAAAAAAAAAAADwvw"
				],
				[
					605,
					2,
					"left_delete",
					null,
					"AgAAAIsPAAAAAAAAiw8AAAAAAAACAAAAICCKDwAAAAAAAIoPAAAAAAAAAQAAAAo",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI0PAAAAAAAAjQ8AAAAAAAAAAAAAAADwvw"
				],
				[
					613,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAANEPAAAAAAAA0g8AAAAAAAAAAAAA0g8AAAAAAADUDwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANEPAAAAAAAA0Q8AAAAAAAAAAAAAAAAyQA"
				],
				[
					667,
					1,
					"revert",
					null,
					"",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHESAAAAAAAAcRIAAAAAAAAAAAAAAADwvw"
				],
				[
					723,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAABcgAAAAAAAAGCAAAAAAAAAAAAAAGCAAAAAAAAAYIAAAAAAAAOYEAAAKICAvKiAoYXN5bmMgZnVuY3Rpb24gUmVhZFNvY2tldCgpIHsKICAgIGZvciBhd2FpdChsZXQgbXNnIG9mIHdzKSB7CiAgICAgIGxldCBkYXRhOwogICAgICB0cnkgewogICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKG1zZy5kYXRhKTsKICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgY29uc29sZS5sb2coJ1dTIEVSUk9SIHBhcnNpbmcnLCBtc2cuZGF0YSk7CiAgICAgIH0KICAgICAgZ2xvYmFsVGhpcy5yZXNwb25zZSA9IGRhdGE7CiAgICAgIGlmKGRhdGEpIHsKICAgICAgICBjb25zb2xlLmxvZygnd3MgcmVjZWl2ZWQgJywgZGF0YSk7CiAgICAgICAgY29uc3QgeyByZXNwb25zZSwgcmVxdWVzdF9zZXEgfSA9IGRhdGE7CiAgICAgICAgaWYocmVzcG9uc2UpIHsKICAgICAgICAgIGNvbnN0IHsgY29tbWFuZCB9ID0gcmVzcG9uc2U7CiAgICAgICAgICBpZihbJ3N0YXJ0JywgJ2Nvbm5lY3QnXS5pbmRleE9mKGNvbW1hbmQpID49IDApIHsKICAgICAgICAgICAgY3dkID0gcmVzcG9uc2UuY3dkOwogICAgICAgICAgICBjb25zb2xlLmxvZygnY29tbWFuZDonLCBjb21tYW5kKTsKICAgICAgICAgICAgY29uc29sZS5sb2coJ3Jlc3BvbnNlOicsIHJlc3BvbnNlKTsKICAgICAgICAgICAgaWYocmVzcG9uc2UuYXJnc1swXSkgewogICAgICAgICAgICAgIGN1cnJlbnRTb3VyY2UocmVzcG9uc2UuYXJnc1swXSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgVXBkYXRlUG9zaXRpb24oKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBSZW5kZXJVSSgpOwogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KICAgICAgICAgIGlmKGNvbW1hbmQgPT0gJ3N0YXJ0JykgewogICAgICAgICAgICBjd2QgPSByZXNwb25zZS5jd2Q7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdzdGFydCcsIHJlc3BvbnNlKTsKICAgICAgICAgICAgUmVuZGVyVUkocmVzcG9uc2UuYXJnc1swXSk7CiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZihyZXNwb25zZXNbcmVxdWVzdF9zZXFdKSByZXNwb25zZXNbcmVxdWVzdF9zZXFdKGRhdGEpOwogICAgICB9IGVsc2UgewogICAgICAgIGNvbnNvbGUubG9nKCdXUycsIHdzKTsKICAgICAgfQogICAgICBpZihbJ2VuZCcsICdlcnJvciddLmluZGV4T2YoZGF0YS50eXBlKSA+PSAwKSB7CiAgICAgICAgZG9jdW1lbnQuYm9keS5pbm5lckhUTUwgPSAnJzsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgfQogIH0pKCk7Ki8",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABcgAAAAAAAA/SQAAAAAAAAAAAAAAADwvw"
				],
				[
					731,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAPUhAAAAAAAA9iEAAAAAAAAAAAAA9iEAAAAAAAD2IQAAAAAAAMMAAAAKICAvKiBpZih1cmwuc2VhcmNoUGFyYW1zLmhhcygncG9ydCcpKSBhd2FpdCBDb25uZWN0KCk7CiAgZWxzZSBhd2FpdCBTdGFydChbdXJsLnNlYXJjaFBhcmFtcy5nZXQoJ3NjcmlwdCcpID8/ICdxdWlja2pzL3Fqcy1tb2R1bGVzL3Rlc3RzL3Rlc3RfZG9tLmpzJ10pOyAvLyAndGVzdC12aWRlby5qcycsICduaWdodHdhdGNoLm1wNCddKTsKKi8",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALgiAAAAAAAA9SEAAAAAAAAAAAAAAADwvw"
				],
				[
					732,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAPYhAAAAAAAA9yEAAAAAAAAAAAAA9yEAAAAAAAD5IQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPYhAAAAAAAA9iEAAAAAAAAAAAAAAADwvw"
				],
				[
					735,
					1,
					"left_delete",
					null,
					"AgAAAHEjAAAAAAAAcSMAAAAAAABLAAAACiAgLy8gZG9SZW5kZXIoY3VycmVudFNvdXJjZSk7CgogIC8vd2luZG93LmxvY2F0aW9uLmhhc2ggPSBgI2xpbmUtJHtsaW5lfWA79yEAAAAAAAD3IQAAAAAAAAIAAAAgIA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALwjAAAAAAAAcSMAAAAAAAAAAAAAAADwvw"
				],
				[
					738,
					2,
					"left_delete",
					null,
					"AgAAAMQlAAAAAAAAxCUAAAAAAADjAAAACi8qCiAgewogICAgInR5cGUiOiAiYnJlYWtwb2ludHMiLAogICAgImJyZWFrcG9pbnRzIjogewogICAgICAicGF0aCI6ICJsaWIvZWNtYXNjcmlwdC9wYXJzZXIyLmpzIiwKICAgICAgImJyZWFrcG9pbnRzIjogWyB7ICJsaW5lIjogNDcwLCAiY29sdW1uIjogMCB9LCB7ICJsaW5lIjogMjE1MSwgImNvbHVtbiI6IDAgfSwgeyAibGluZSI6IDI0MDEsICJjb2x1bW4iOiAwIH0gXQogICAgfQogIH0KKi/DJQAAAAAAAMMlAAAAAAAAAQAAAAo",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMQlAAAAAAAApyYAAAAAAAAAAAAAAADwvw"
				],
				[
					741,
					1,
					"left_delete",
					null,
					"AQAAALAmAAAAAAAAsCYAAAAAAAD+AAAACi8qY29uc3QgQnV0dG9uID0gKHtpbWFnZX0pID0+IHsKY29uc3QgcmVmID0gdXNlQ2xpY2soZSA9PiB7CiAgY29uc29sZS5sb2coJ2NsaWNrISEhIScpOwp9KTsKIHJldHVybiAgaCgnYnV0dG9uJywgeyByZWYsIGNsYXNzOiAnYnV0dG9uJyB9LCBoKCdpbWcnLCB7IHNyYzogaW1hZ2UgfSkpOwp9Ki8KLypjb25zdCBCdXR0b25CYXI9ICAoe2NoaWxkcmVufSkgPT4gCmgoJ2RpdicsIHtjbGFzczogJ2J1dHRvbi1iYXInIH0sIGNoaWxkcmVuKTsqLwo",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALAmAAAAAAAAricAAAAAAAAAAAAAAADwvw"
				],
				[
					744,
					1,
					"left_delete",
					null,
					"AQAAAOEmAAAAAAAA4SYAAAAAAAA+AAAACiAgLyogaWYoY3VycmVudFNvdXJjZSgpICE9IGZpbGUpIAogICAgY3VycmVudFNvdXJjZShmaWxlKTsqLwo",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB8nAAAAAAAA4SYAAAAAAAAAAAAAAADwvw"
				],
				[
					756,
					1,
					"revert",
					null,
					"",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAkpAAAAAAAACSkAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "test-video.js",
			"settings":
			{
				"buffer_size": 26264,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"right",
				"Browse Mode: Outline (Right)"
			],
			[
				"prettier",
				"JsPrettier: Format Code"
			],
			[
				"prett",
				"JsPrettier: Format Code"
			],
			[
				":q",
				"Coffee: Quick Run Bar"
			],
			[
				"clang",
				"Clang Format: Format Selection"
			],
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"mode",
				"HTML: Encode Special Characters"
			],
			[
				"insert",
				"Snippet: Insert livereload.js script"
			],
			[
				":w",
				":w - Save"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"OUTLIN",
				"Browse Mode: Outline (Right)"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 142.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv",
		"/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64",
		"/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/data",
		"/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/include",
		"/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/include/AL",
		"/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/include/GLES2",
		"/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/src",
		"/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/src/sample",
		"/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/src/util",
		"/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/tool",
		"/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/tool/build_native",
		"/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/tool/build_native/3rdparty",
		"/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/tool/build_native/3rdparty/dirent",
		"/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/tool/build_native/3rdparty/dirent/include",
		"/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/tool/build_native/3rdparty/glfw",
		"/home/roman/Projects/plot-cv/CToy-1.05-Linux64-x86_64/tool/build_native/3rdparty/glfw/examples",
		"/home/roman/Projects/plot-cv/ol-layerswitcher"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/lib/bpg/bpgdec8.html",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/js/rpc.js",
		"/home/roman/Projects/plot-cv/upload-server.js",
		"/home/roman/Projects/plot-cv/debugger.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.c",
		"/home/roman/Projects/plot-cv/test-alea.js",
		"/home/roman/Projects/plot-cv/draw.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/lib/async/debounce.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fs.js",
		"/home/roman/Projects/plot-cv/lib/compileCommand.js",
		"/home/roman/Projects/plot-cv/compile_commands.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
		"/home/roman/Projects/plot-cv/lib/bpg/bpgdec.wat",
		"/home/roman/Projects/plot-cv/lib/bpg/bpgdec.mjs",
		"/home/roman/Projects/plot-cv/fire.js",
		"/home/roman/Projects/plot-cv/lib/bpg/bpgdec.html.symbols",
		"/home/roman/Projects/plot-cv/lib/bpg/bpgdec8.wat",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/property-enumeration.c",
		"/home/roman/Projects/plot-cv/lib/async/websocket.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/property-enumeration.h",
		"/home/roman/Projects/plot-cv/lib/build/compileCommand.js",
		"/home/roman/Projects/plot-cv/webSocket.js",
		"/home/roman/Projects/plot-cv/debugger.html",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.h",
		"/home/roman/Projects/plot-cv/debuggerprotocol.js",
		"/home/roman/Projects/plot-cv/lib/repeater/repeater.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/qjsm.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-imgui/cmake/BuildGLFW.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/cmake/BuildBrotli.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/cmake/BuildLibwebsockets.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-glfw/cmake/BuildGLFW.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/cmake/BuildMbedTLS.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/cmake/BuildCURL.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-glfw/cmake/BuildGL3W.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-sound/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/plugin-standalone/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/brotli/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/cmake/FindLibreSSL.cmake",
		"/home/roman/Projects/plot-cv/test-nanovg.js",
		"/home/roman/Projects/plot-cv/debugger-client.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/js/debugger-client.js",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.c",
		"/home/roman/Projects/plot-cv/test-repeater.js",
		"/home/roman/Projects/plot-cv/debugger-server.js",
		"/home/roman/Projects/plot-cv/inst/x86_64-linux-debug/usr/local/bin/wscli.js",
		"/home/roman/Projects/plot-cv/quickjs.c",
		"/home/roman/Projects/plot-cv/repredator/pre8.png",
		"/home/roman/Projects/plot-cv/repredator/pre7.png",
		"/home/roman/Projects/plot-cv/repredator/pre2.png",
		"/home/roman/Projects/plot-cv/repredator/pre1.png",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/test-rpc.js",
		"/home/roman/Projects/plot-cv/clang-ast.js",
		"/home/roman/Projects/plot-cv/portaudio2.js",
		"/usr/include/portaudio.h",
		"/home/roman/Projects/plot-cv/portaudio.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
		"/home/roman/Projects/plot-cv/os-helpers.js",
		"/home/roman/Projects/plot-cv/io-helpers.js",
		"/usr/include/portmidi.h",
		"/home/roman/Projects/plot-cv/portmidi.js",
		"/home/roman/Projects/plot-cv/ast-shell.js",
		"/home/roman/Projects/plot-cv/list.html",
		"/home/roman/Projects/plot-cv/eagle-shell.js",
		"/home/roman/Projects/plot-cv/out.tmp",
		"/home/roman/Projects/plot-cv/webakeit.js",
		"/home/roman/Projects/plot-cv/webakeit-telegram.js",
		"/home/roman/Downloads/Telegram Desktop/ChatExport_2024-04-09/messages.html",
		"/home/roman/Projects/plot-cv/static/css/webakeit.css",
		"/home/roman/Projects/plot-cv/webakeit.tmp",
		"/home/roman/Projects/plot-cv/webakeit.html",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/xml-shell.js",
		"/home/roman/Projects/plot-cv/plot-cv.sublime-project",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/xml-shell.es",
		"/home/roman/Projects/plot-cv/lib/geom/splines.js",
		"/home/roman/Projects/plot-cv/fire.html",
		"/home/roman/Projects/plot-cv/numbers2.c",
		"/home/roman/Projects/plot-cv/main.js",
		"/home/roman/Projects/plot-cv/lib/geom/pointList.js",
		"/home/roman/Projects/plot-cv/lib/autoStore.js",
		"/home/roman/Projects/plot-cv/lib/async/events.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
		"/home/roman/Projects/plot-cv/lib/geom/point.js",
		"/home/roman/Projects/plot-cv/lib/misc.js",
		"/home/roman/Projects/plot-cv/components.js",
		"/home/roman/Projects/plot-cv/draw.html",
		"/home/roman/Projects/plot-cv/static/css/draw.css",
		"/home/roman/Projects/plot-cv/qjs-opencv/point.js",
		"/home/roman/Projects/plot-cv/draw-utils.js",
		"/home/roman/Projects/plot-cv/lib/fd-graph.js",
		"/home/roman/Projects/plot-cv/svg-box.js",
		"/home/roman/Projects/plot-cv/numbers.c",
		"/home/roman/Projects/plot-cv/hex.c",
		"/home/roman/Projects/plot-cv/upload-worker.js",
		"/home/roman/Projects/plot-cv/mailcow-db.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/examples/ssl-client.js",
		"/home/roman/Projects/plot-cv/promise-worker.js",
		"/home/roman/Projects/plot-cv/upload.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-mysql.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/wscli.js",
		"/home/roman/Projects/plot-cv/lib/geom/graph.js",
		"/home/roman/Projects/plot-cv/lib/eagle/node.js",
		"/home/roman/Projects/plot-cv/lib/eagle/element.js",
		"/home/roman/Projects/plot-cv/workertest.js",
		"/home/roman/Projects/plot-cv/test-worker.js",
		"/home/roman/Projects/plot-cv/static/css/upload.css",
		"/home/roman/Projects/plot-cv/upload.html",
		"/home/roman/Projects/plot-cv/test-opencv.js",
		"/home/roman/Projects/plot-cv/map.html",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/tests/server.js",
		"/home/roman/Projects/plot-cv/directory.js",
		"/home/roman/Projects/plot-cv/test-video.js",
		"/home/roman/Projects/plot-cv/cv-shell.js",
		"/home/roman/Projects/plot-cv/directory.html",
		"/home/roman/Projects/plot-cv/coil.html",
		"/home/roman/Projects/plot-cv/filelist.html",
		"/home/roman/Projects/plot-cv/noise.js",
		"/home/roman/Projects/plot-cv/pinkNoise.js",
		"/home/roman/Projects/plot-cv/noise.html",
		"/home/roman/Projects/plot-cv/landing.html",
		"/home/roman/Projects/plot-cv/404.html",
		"/home/roman/Projects/plot-cv/index.html",
		"/home/roman/Projects/plot-cv/style.css",
		"/home/roman/Projects/plot-cv/lib/lscache.js"
	],
	"find":
	{
		"height": 41.0
	},
	"find_in_files":
	{
		"height": 107.0,
		"where_history":
		[
			"/home/roman/Projects/plot-cv,*.js,*.c,*.h,*.cmake,CMakeLists.txt,-*/inst/*,-*/build/*",
			"/home/roman/Projects/plot-cv,*.js,*.c,*.h,*.cmake,CMakeLists.txt",
			"/home/roman/Projects/plot-cv,*.jsx,*.c,*.h,*.cmake,CMakeLists.txt",
			"/home/roman/Projects/plot-cv,*.js,*.c,*.h,*.cmake,CMakeLists.txt",
			"/home/roman/Projects/plot-cv,*.js,*.cmake,CMakeLists.txt",
			"/home/roman/Projects/plot-cv,*.jsx,*.cmake,CMakeLists.txt",
			"/home/roman/Projects/plot-cv,*.js,*.cmake,CMakeLists.txt",
			"/home/roman/Projects/plot-cv,*.js",
			"/home/roman/Projects/plot-cv/lib/eagle,*.js",
			"/home/roman/Projects/plot-cv/lib,*.js",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"defer\\b",
			"defer",
			"getWait",
			"currentWait",
			"\\bwait\\b",
			"getWait",
			"\\bwait\\b",
			"getWait",
			"debounce",
			"options_numhidden",
			"options_hidden",
			"options_numhidden",
			"options_hidden",
			"tostringtag",
			"\\[Symbol.toStringTag\\] =",
			"\\[Symbol.toStringTag\\]",
			"toStringTag",
			"ion define\\b",
			"define\\b",
			"property_enumeration_next",
			"_next\\b",
			"property_recursion_top",
			"\\bindex\\b",
			"Inspector",
			"Writer",
			"setReadHandler",
			"loadModule",
			"main",
			"\n    ",
			"get output\\b",
			"outputFile",
			"CommandOutput",
			"type:",
			"\\btype\\b",
			"\n          ",
			"relative",
			"'L'",
			"'-L'",
			"undefined",
			"\\bundefined\\b",
			"isAbsolute",
			"relative",
			"ArgumentType",
			"ArgumentIs",
			"CompileCommand",
			"ArgumentType",
			"ArgumentIs",
			"relative",
			"\\bthis\\b",
			"MakeCommand",
			"CommandType",
			"MakeCommands",
			"MakeComma",
			"CommandOutput",
			"run",
			"\\[\\.\\.\\.this\\]",
			"\\[\\.\\.\\.this\\]\\.",
			"\\[\\.\\.\\.this",
			"commonCmd",
			"\\bcommands\\b",
			"commands",
			"globalThis",
			"globalThis\\.",
			"Console",
			"\\bdefine\\b",
			"toJSON",
			"inspect",
			"extendArray",
			"this\\.",
			"this\\[",
			"this\\.",
			"this\\[",
			"this[\\[\\.]",
			"this\\[",
			"CompileCommand",
			"\n",
			"CompileCommand",
			"toStringTag",
			"\\bsvg\\b",
			"svgContainer",
			"SVGCom",
			"SVGComponent",
			"overlay",
			"\\bsvg\\b",
			"svgContainer",
			"overlay",
			"GetRects",
			"hello",
			"'hello'",
			"rects",
			"'rects'",
			"'hello'",
			"'rects'",
			"GetRects",
			"NewWS\\(",
			"NewWS",
			"Reconnect",
			"waitFor",
			"\\bconnect\\b",
			"connect",
			"CreateWebSocket",
			"WebSocketURL",
			"CreateWebSocket",
			"createServer",
			"createSewr",
			"onMessage",
			"\\bcid\\b",
			"cid =",
			"SendWS",
			" //",
			"SendWS",
			"cid",
			"uuid",
			"WebSocket",
			"CreateWebSock",
			"oncePromise",
			"resolve\\(",
			"setLog",
			"onMessage",
			"createServer",
			"main",
			"async ",
			"processMessage",
			"serv\\b",
			"serv",
			"processMessage",
			"async",
			"setLog"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"'file'",
			"this.argv",
			"this.argv.",
			"this.argv[",
			"this.argv.",
			"this.argv[",
			"sendMessage",
			"responses",
			"import",
			"",
			"{ArrayBuffer}   buffer",
			"{ArrayBuffer}      buffer",
			"{Object|null}   outputDriverInfo",
			"{ArrayBuffer}   stream",
			", ",
			"m",
			"{ ",
			"export const ",
			"nameKey",
			", GetStream(stream)",
			"GetStream",
			"DereferenceStream",
			"export ",
			"export class ",
			"export class",
			"}\\n\n  get ",
			"); /**",
			"",
			"export const \\1 = ",
			"export function ",
			"&auml;",
			"&uuml;",
			"&ouml;",
			"\\1",
			"let",
			"this",
			"ret",
			"factor",
			"GetCirclePosition",
			"index",
			"dist",
			"}\\n\\n\\1",
			"}\\n\\1",
			"Log",
			"format_base",
			"\\1u",
			"format",
			"GREEN",
			"c",
			"output",
			"TYPE_MASK",
			" + (obj?.cacheBucket ?? '') + ",
			"\\1//\\2",
			"opts",
			"}\\n\\n",
			"}\\n\\n\\1",
			"",
			"\n      t = 'l';"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 26187,
						"regions":
						{
							"col_FFFFFFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										18143,
										18153
									]
								],
								"scope": "col_FFFFFFFF"
							},
							"col_FFFFFFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FFFFFFFF_circle.png",
								"regions":
								[
									[
										18090,
										18090
									]
								],
								"scope": "col_gutter"
							}
						},
						"selection":
						[
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": "/home/roman/Projects/plot-cv/lib/util.js",
							"function_name_status_row": 132,
							"outline_rename_mode": false,
							"symkeys":
							[
								[
									706,
									723
								],
								[
									987,
									1036
								],
								[
									1923,
									1927
								],
								[
									2743,
									2750
								],
								[
									3272,
									3286
								],
								[
									3546,
									3552
								],
								[
									3655,
									3682
								],
								[
									3730,
									3761
								],
								[
									3917,
									3927
								],
								[
									3966,
									3990
								],
								[
									4057,
									4073
								],
								[
									4118,
									4135
								],
								[
									4183,
									4203
								],
								[
									4254,
									4277
								],
								[
									4325,
									4351
								],
								[
									4752,
									4757
								],
								[
									4816,
									4840
								],
								[
									4863,
									4879
								],
								[
									4894,
									4905
								],
								[
									4945,
									4961
								],
								[
									4976,
									4988
								],
								[
									5029,
									5045
								],
								[
									5060,
									5075
								],
								[
									5119,
									5135
								],
								[
									5150,
									5168
								],
								[
									5215,
									5231
								],
								[
									5246,
									5267
								],
								[
									5317,
									5333
								],
								[
									5348,
									5372
								],
								[
									5498,
									5521
								],
								[
									5604,
									5624
								],
								[
									5879,
									5891
								],
								[
									5941,
									5953
								],
								[
									6073,
									6096
								],
								[
									6169,
									6195
								],
								[
									6430,
									6451
								],
								[
									6506,
									6527
								],
								[
									6656,
									6680
								],
								[
									6766,
									6773
								],
								[
									6794,
									6801
								],
								[
									6831,
									6853
								],
								[
									6936,
									6943
								],
								[
									6961,
									6968
								],
								[
									6993,
									7015
								],
								[
									7065,
									7072
								],
								[
									7126,
									7133
								],
								[
									7165,
									7194
								],
								[
									7540,
									7565
								],
								[
									7692,
									7711
								],
								[
									7793,
									7812
								],
								[
									7999,
									8018
								],
								[
									8096,
									8115
								],
								[
									8180,
									8199
								],
								[
									8295,
									8335
								],
								[
									8477,
									8490
								],
								[
									8516,
									8549
								],
								[
									8798,
									8812
								],
								[
									8973,
									8980
								],
								[
									9197,
									9203
								],
								[
									9609,
									9633
								],
								[
									10012,
									10048
								],
								[
									10090,
									10108
								],
								[
									10291,
									10328
								],
								[
									10409,
									10427
								],
								[
									10445,
									10456
								],
								[
									10522,
									10556
								],
								[
									10583,
									10601
								],
								[
									10876,
									10921
								],
								[
									11121,
									11139
								],
								[
									11390,
									11416
								],
								[
									11675,
									11694
								],
								[
									11773,
									11792
								],
								[
									11942,
									11990
								],
								[
									12171,
									12186
								],
								[
									12212,
									12222
								],
								[
									12309,
									12314
								],
								[
									13081,
									13087
								],
								[
									13163,
									13168
								],
								[
									13177,
									13182
								],
								[
									13211,
									13220
								],
								[
									13244,
									13254
								],
								[
									13276,
									13289
								],
								[
									13317,
									13331
								],
								[
									13357,
									13374
								],
								[
									13402,
									13420
								],
								[
									13521,
									13526
								],
								[
									13734,
									13757
								],
								[
									14213,
									14217
								],
								[
									14259,
									14263
								],
								[
									14370,
									14382
								],
								[
									14976,
									14986
								],
								[
									15074,
									15102
								],
								[
									15136,
									15142
								],
								[
									15204,
									15228
								],
								[
									15258,
									15299
								],
								[
									15575,
									15587
								],
								[
									15620,
									15652
								],
								[
									15694,
									15734
								],
								[
									15888,
									15908
								],
								[
									17195,
									17225
								],
								[
									17285,
									17322
								],
								[
									17507,
									17513
								],
								[
									17728,
									17758
								],
								[
									17838,
									17870
								],
								[
									18098,
									18128
								],
								[
									18265,
									18268
								],
								[
									18405,
									18439
								],
								[
									18596,
									18628
								],
								[
									18918,
									18946
								],
								[
									19024,
									19053
								],
								[
									19128,
									19165
								],
								[
									19215,
									19250
								],
								[
									19431,
									19466
								],
								[
									19766,
									19789
								],
								[
									19820,
									19844
								],
								[
									19908,
									19935
								],
								[
									19968,
									20008
								],
								[
									20126,
									20169
								],
								[
									20472,
									20501
								],
								[
									20558,
									20572
								],
								[
									20621,
									20650
								],
								[
									20692,
									20719
								],
								[
									20829,
									20836
								],
								[
									20856,
									20884
								],
								[
									20974,
									21001
								],
								[
									21040,
									21067
								],
								[
									21117,
									21141
								],
								[
									21216,
									21251
								],
								[
									21353,
									21385
								],
								[
									21470,
									21504
								],
								[
									21589,
									21619
								],
								[
									21839,
									21849
								],
								[
									21902,
									21906
								],
								[
									21974,
									22011
								],
								[
									22048,
									22065
								],
								[
									22088,
									22105
								],
								[
									22165,
									22182
								],
								[
									22268,
									22277
								],
								[
									22349,
									22363
								],
								[
									22431,
									22436
								],
								[
									23139,
									23177
								],
								[
									23328,
									23363
								],
								[
									23447,
									23465
								],
								[
									23523,
									23567
								],
								[
									23581,
									23590
								],
								[
									23622,
									23650
								],
								[
									23664,
									23673
								],
								[
									23742,
									23785
								],
								[
									23905,
									23938
								],
								[
									23965,
									23972
								],
								[
									24101,
									24106
								],
								[
									24122,
									24156
								],
								[
									24233,
									24259
								],
								[
									24357,
									24391
								],
								[
									24414,
									24428
								],
								[
									24463,
									24513
								],
								[
									24651,
									24697
								],
								[
									24758,
									24820
								],
								[
									24831,
									24847
								],
								[
									24982,
									25019
								],
								[
									25058,
									25115
								],
								[
									25487,
									25521
								],
								[
									25661,
									25700
								],
								[
									25780,
									25817
								],
								[
									25934,
									25965
								],
								[
									26720,
									26763
								],
								[
									26894,
									26899
								],
								[
									27055,
									27089
								],
								[
									27297,
									27333
								],
								[
									27395,
									27421
								],
								[
									28181,
									28206
								],
								[
									28274,
									28302
								],
								[
									28895,
									28914
								],
								[
									29009,
									29024
								],
								[
									29152,
									29177
								],
								[
									29477,
									29534
								],
								[
									29657,
									29722
								],
								[
									29832,
									29884
								],
								[
									30005,
									30055
								],
								[
									30171,
									30186
								],
								[
									30257,
									30268
								],
								[
									30356,
									30367
								],
								[
									30393,
									30408
								],
								[
									30486,
									30500
								],
								[
									30540,
									30559
								],
								[
									30777,
									30866
								],
								[
									30869,
									30966
								],
								[
									31022,
									31034
								],
								[
									31099,
									31113
								],
								[
									31145,
									31151
								],
								[
									31194,
									31202
								],
								[
									31248,
									31256
								],
								[
									31312,
									31327
								],
								[
									31380,
									31387
								],
								[
									31498,
									31508
								],
								[
									31650,
									31660
								],
								[
									31723,
									31730
								],
								[
									31815,
									31842
								],
								[
									31866,
									31875
								],
								[
									31901,
									31909
								],
								[
									31926,
									31935
								],
								[
									31974,
									31982
								],
								[
									31993,
									32006
								],
								[
									32017,
									32032
								],
								[
									32061,
									32079
								],
								[
									32159,
									32183
								],
								[
									32604,
									32638
								],
								[
									32669,
									32680
								],
								[
									32685,
									32695
								],
								[
									32709,
									32720
								],
								[
									32741,
									32777
								],
								[
									33281,
									33311
								],
								[
									33355,
									33386
								],
								[
									33621,
									33643
								],
								[
									33703,
									33729
								],
								[
									33845,
									33856
								],
								[
									33968,
									33999
								],
								[
									34204,
									34229
								],
								[
									34296,
									34348
								],
								[
									34460,
									34482
								],
								[
									34488,
									34509
								],
								[
									34526,
									34558
								],
								[
									34678,
									34713
								],
								[
									34778,
									34811
								],
								[
									34858,
									34870
								],
								[
									34940,
									34952
								],
								[
									35009,
									35040
								],
								[
									35084,
									35126
								],
								[
									35302,
									35330
								],
								[
									35441,
									35471
								],
								[
									35483,
									35500
								],
								[
									35624,
									35660
								],
								[
									35737,
									35776
								],
								[
									35888,
									35892
								],
								[
									35919,
									35923
								],
								[
									35962,
									35966
								],
								[
									35994,
									35998
								],
								[
									36021,
									36047
								],
								[
									36089,
									36125
								],
								[
									36163,
									36195
								],
								[
									36534,
									36571
								],
								[
									36815,
									36856
								],
								[
									36949,
									36966
								],
								[
									36978,
									36989
								],
								[
									37004,
									37021
								],
								[
									37107,
									37131
								],
								[
									37154,
									37180
								],
								[
									37636,
									37668
								],
								[
									37922,
									37931
								],
								[
									37962,
									37971
								],
								[
									38002,
									38011
								],
								[
									38042,
									38051
								],
								[
									38082,
									38091
								],
								[
									38121,
									38130
								],
								[
									38161,
									38170
								],
								[
									38179,
									38199
								],
								[
									38243,
									38248
								],
								[
									38291,
									38300
								],
								[
									38468,
									38501
								],
								[
									38875,
									38901
								],
								[
									39127,
									39170
								],
								[
									39212,
									39224
								],
								[
									39302,
									39347
								],
								[
									39468,
									39488
								],
								[
									39609,
									39616
								],
								[
									39635,
									39642
								],
								[
									39822,
									39851
								],
								[
									39980,
									40025
								],
								[
									40153,
									40185
								],
								[
									40264,
									40285
								],
								[
									40537,
									40555
								],
								[
									40742,
									40755
								],
								[
									40872,
									40920
								],
								[
									40933,
									40942
								],
								[
									40980,
									40990
								],
								[
									41037,
									41071
								],
								[
									41348,
									41390
								],
								[
									41444,
									41482
								],
								[
									41644,
									41663
								],
								[
									41864,
									41903
								],
								[
									42037,
									42054
								],
								[
									42594,
									42614
								],
								[
									42702,
									42721
								],
								[
									42762,
									42781
								],
								[
									44629,
									44636
								],
								[
									44651,
									44658
								],
								[
									46275,
									46308
								],
								[
									46456,
									46465
								],
								[
									46485,
									46493
								],
								[
									46497,
									46506
								],
								[
									46647,
									46675
								],
								[
									46789,
									46817
								],
								[
									46931,
									46949
								],
								[
									47328,
									47363
								],
								[
									47403,
									47430
								],
								[
									47511,
									47559
								],
								[
									47770,
									47857
								],
								[
									47868,
									47884
								],
								[
									47993,
									48033
								],
								[
									48059,
									48063
								],
								[
									48080,
									48085
								],
								[
									48104,
									48109
								],
								[
									48127,
									48164
								],
								[
									48190,
									48194
								],
								[
									48200,
									48206
								],
								[
									48221,
									48227
								],
								[
									48235,
									48241
								],
								[
									48257,
									48294
								],
								[
									48320,
									48324
								],
								[
									48338,
									48344
								],
								[
									48352,
									48358
								],
								[
									48365,
									48371
								],
								[
									48388,
									48441
								],
								[
									48442,
									48459
								],
								[
									48564,
									48583
								],
								[
									48630,
									48668
								],
								[
									48693,
									48706
								],
								[
									49332,
									49376
								],
								[
									49448,
									49466
								],
								[
									49720,
									49738
								],
								[
									50065,
									50092
								],
								[
									50101,
									50116
								],
								[
									50192,
									50219
								],
								[
									50346,
									50350
								],
								[
									50428,
									50441
								],
								[
									50638,
									50667
								],
								[
									50775,
									50801
								],
								[
									50869,
									50896
								],
								[
									51168,
									51189
								],
								[
									51259,
									51284
								],
								[
									51304,
									51326
								],
								[
									51390,
									51415
								],
								[
									51540,
									51564
								],
								[
									51788,
									51804
								],
								[
									51805,
									51824
								],
								[
									51857,
									51877
								],
								[
									51966,
									51994
								],
								[
									52092,
									52117
								],
								[
									52167,
									52194
								],
								[
									52197,
									52216
								],
								[
									52521,
									52551
								],
								[
									52594,
									52609
								],
								[
									52677,
									52700
								],
								[
									52739,
									52743
								],
								[
									52783,
									52787
								],
								[
									52825,
									52849
								],
								[
									52916,
									52952
								],
								[
									53017,
									53024
								],
								[
									53062,
									53101
								],
								[
									53241,
									53274
								],
								[
									53467,
									53478
								],
								[
									53575,
									53606
								],
								[
									53665,
									53721
								],
								[
									54085,
									54126
								],
								[
									54492,
									54532
								],
								[
									54760,
									54808
								],
								[
									54840,
									54849
								],
								[
									55132,
									55171
								],
								[
									55182,
									55191
								],
								[
									55230,
									55241
								],
								[
									55646,
									55687
								],
								[
									55733,
									55766
								],
								[
									55843,
									55878
								],
								[
									55978,
									56021
								],
								[
									56201,
									56237
								],
								[
									56554,
									56593
								],
								[
									56729,
									56777
								],
								[
									56945,
									56959
								],
								[
									57131,
									57138
								],
								[
									57254,
									57261
								],
								[
									57596,
									57620
								],
								[
									57650,
									57667
								],
								[
									57724,
									57746
								],
								[
									57775,
									57792
								],
								[
									57898,
									57929
								],
								[
									58003,
									58023
								],
								[
									58157,
									58191
								],
								[
									58221,
									58230
								],
								[
									58250,
									58258
								],
								[
									58262,
									58271
								],
								[
									58364,
									58398
								],
								[
									58699,
									58732
								],
								[
									59094,
									59128
								],
								[
									59498,
									59532
								],
								[
									59815,
									59859
								],
								[
									60484,
									60523
								],
								[
									60651,
									60733
								],
								[
									61859,
									61872
								],
								[
									61890,
									61899
								],
								[
									61917,
									61926
								],
								[
									61977,
									61988
								],
								[
									62012,
									62024
								],
								[
									62031,
									62042
								],
								[
									62079,
									62084
								],
								[
									62187,
									62192
								],
								[
									62337,
									62342
								],
								[
									62375,
									62380
								],
								[
									62415,
									62420
								],
								[
									62615,
									62620
								],
								[
									62824,
									62857
								],
								[
									62870,
									62871
								],
								[
									63280,
									63313
								],
								[
									63477,
									63514
								],
								[
									63522,
									63523
								],
								[
									63999,
									64006
								],
								[
									64145,
									64156
								],
								[
									64242,
									64253
								],
								[
									64540,
									64554
								],
								[
									65097,
									65129
								],
								[
									65458,
									65496
								],
								[
									65795,
									65818
								],
								[
									65831,
									65851
								],
								[
									65914,
									65928
								],
								[
									65932,
									65946
								],
								[
									66023,
									66038
								],
								[
									66112,
									66126
								],
								[
									66169,
									66192
								],
								[
									66384,
									66402
								],
								[
									66608,
									66622
								],
								[
									66626,
									66640
								],
								[
									66812,
									66834
								],
								[
									67378,
									67383
								],
								[
									67425,
									67431
								],
								[
									67474,
									67481
								],
								[
									67510,
									67549
								],
								[
									67578,
									67588
								],
								[
									67594,
									67603
								],
								[
									67621,
									67648
								],
								[
									67688,
									67697
								],
								[
									67706,
									67714
								],
								[
									67762,
									67771
								],
								[
									67797,
									67806
								],
								[
									67817,
									67825
								],
								[
									67897,
									67906
								],
								[
									67997,
									68041
								],
								[
									68103,
									68164
								],
								[
									68472,
									68498
								],
								[
									68526,
									68531
								],
								[
									68555,
									68568
								],
								[
									68676,
									68741
								],
								[
									68846,
									68872
								],
								[
									68906,
									68932
								],
								[
									68953,
									68986
								],
								[
									69014,
									69030
								],
								[
									69045,
									69052
								],
								[
									69074,
									69090
								],
								[
									69115,
									69142
								],
								[
									69199,
									69214
								],
								[
									69236,
									69248
								],
								[
									69265,
									69280
								],
								[
									69290,
									69299
								],
								[
									69339,
									69348
								],
								[
									69355,
									69361
								],
								[
									69373,
									69402
								],
								[
									69488,
									69498
								],
								[
									69539,
									69554
								],
								[
									69573,
									69586
								],
								[
									70011,
									70021
								],
								[
									70160,
									70172
								],
								[
									70453,
									70474
								],
								[
									70660,
									70671
								],
								[
									70708,
									70717
								],
								[
									70797,
									70830
								],
								[
									71136,
									71165
								],
								[
									71209,
									71231
								],
								[
									71265,
									71304
								],
								[
									71338,
									71344
								],
								[
									71417,
									71442
								],
								[
									71453,
									71465
								],
								[
									71658,
									71668
								],
								[
									71720,
									71770
								],
								[
									72178,
									72208
								],
								[
									72294,
									72324
								],
								[
									72397,
									72428
								],
								[
									72582,
									72606
								],
								[
									72661,
									72685
								],
								[
									72812,
									72816
								],
								[
									72896,
									72921
								],
								[
									73009,
									73032
								],
								[
									73064,
									73070
								],
								[
									73213,
									73214
								],
								[
									73305,
									73309
								],
								[
									73443,
									73474
								],
								[
									73726,
									73738
								],
								[
									73855,
									73869
								],
								[
									74015,
									74047
								],
								[
									74251,
									74277
								],
								[
									74278,
									74295
								],
								[
									74344,
									74367
								],
								[
									74400,
									74410
								],
								[
									74459,
									74471
								],
								[
									74786,
									74796
								],
								[
									74988,
									75000
								],
								[
									75675,
									75708
								],
								[
									75736,
									75750
								],
								[
									75844,
									75869
								],
								[
									76018,
									76046
								],
								[
									76180,
									76209
								],
								[
									76509,
									76557
								],
								[
									76746,
									76783
								],
								[
									76832,
									76880
								],
								[
									76994,
									77028
								],
								[
									77036,
									77060
								],
								[
									77574,
									77604
								],
								[
									77730,
									77757
								],
								[
									78234,
									78285
								],
								[
									78327,
									78354
								],
								[
									78524,
									78572
								],
								[
									78784,
									78819
								],
								[
									79026,
									79059
								],
								[
									79331,
									79362
								],
								[
									79675,
									79719
								],
								[
									79855,
									79871
								],
								[
									80032,
									80082
								],
								[
									80478,
									80483
								],
								[
									80564,
									80577
								],
								[
									80626,
									80636
								],
								[
									80640,
									80653
								],
								[
									80728,
									80743
								],
								[
									80792,
									80802
								],
								[
									80806,
									80821
								],
								[
									80888,
									80921
								],
								[
									81031,
									81038
								],
								[
									81323,
									81338
								],
								[
									81614,
									81635
								],
								[
									81696,
									81724
								],
								[
									81815,
									81824
								],
								[
									82791,
									82822
								],
								[
									82994,
									83008
								],
								[
									83631,
									83665
								],
								[
									83850,
									83872
								],
								[
									83908,
									83932
								],
								[
									83935,
									83955
								],
								[
									84199,
									84225
								],
								[
									84320,
									84358
								],
								[
									84760,
									84803
								],
								[
									84885,
									84913
								],
								[
									84935,
									84961
								],
								[
									85100,
									85208
								],
								[
									85446,
									85497
								],
								[
									85575,
									85609
								],
								[
									85697,
									85725
								],
								[
									85759,
									85794
								],
								[
									85868,
									85893
								],
								[
									85915,
									85932
								],
								[
									85974,
									86023
								],
								[
									86096,
									86109
								],
								[
									86181,
									86194
								],
								[
									86370,
									86408
								],
								[
									86419,
									86438
								],
								[
									86492,
									86533
								],
								[
									86544,
									86563
								],
								[
									86621,
									86646
								],
								[
									86693,
									86732
								],
								[
									86821,
									86834
								],
								[
									86873,
									86883
								],
								[
									86937,
									86944
								],
								[
									86969,
									86975
								],
								[
									87017,
									87030
								],
								[
									87050,
									87086
								],
								[
									87171,
									87184
								],
								[
									87223,
									87233
								],
								[
									87266,
									87273
								],
								[
									87379,
									87412
								],
								[
									87492,
									87527
								],
								[
									87567,
									87577
								],
								[
									87692,
									87720
								],
								[
									87883,
									87895
								],
								[
									88000,
									88025
								],
								[
									88140,
									88153
								],
								[
									88252,
									88279
								],
								[
									88398,
									88411
								],
								[
									88514,
									88547
								],
								[
									88770,
									88789
								],
								[
									88868,
									88896
								],
								[
									88915,
									88934
								],
								[
									88952,
									88987
								],
								[
									89330,
									89361
								],
								[
									89420,
									89433
								],
								[
									89517,
									89549
								],
								[
									89730,
									89780
								],
								[
									89823,
									89850
								],
								[
									90052,
									90085
								],
								[
									90136,
									90171
								],
								[
									90184,
									90198
								],
								[
									90265,
									90327
								],
								[
									90526,
									90542
								],
								[
									90769,
									90779
								],
								[
									90818,
									90828
								],
								[
									90848,
									90858
								],
								[
									90886,
									90911
								],
								[
									91037,
									91062
								],
								[
									91337,
									91364
								],
								[
									91597,
									91609
								],
								[
									93262,
									93297
								],
								[
									93316,
									93324
								],
								[
									93372,
									93387
								],
								[
									93535,
									93548
								],
								[
									93741,
									93757
								],
								[
									93964,
									93989
								],
								[
									94004,
									94026
								],
								[
									94242,
									94246
								],
								[
									94460,
									94482
								],
								[
									94504,
									94514
								],
								[
									94532,
									94545
								],
								[
									94692,
									94714
								],
								[
									94736,
									94746
								],
								[
									94764,
									94777
								],
								[
									94906,
									94928
								],
								[
									94954,
									94964
								],
								[
									94982,
									94995
								],
								[
									95031,
									95053
								],
								[
									95074,
									95084
								],
								[
									95102,
									95115
								],
								[
									95135,
									95176
								],
								[
									95483,
									95506
								],
								[
									95587,
									95609
								],
								[
									95683,
									95703
								],
								[
									95835,
									95846
								],
								[
									95879,
									95896
								],
								[
									96073,
									96092
								],
								[
									96127,
									96149
								],
								[
									96281,
									96302
								],
								[
									96440,
									96460
								],
								[
									96527,
									96550
								],
								[
									96626,
									96648
								],
								[
									96766,
									96790
								],
								[
									96852,
									96864
								],
								[
									97035,
									97053
								],
								[
									97115,
									97127
								],
								[
									97279,
									97302
								],
								[
									97443,
									97459
								],
								[
									97515,
									97528
								],
								[
									97560,
									97628
								],
								[
									97669,
									97691
								],
								[
									97720,
									97730
								],
								[
									97746,
									97759
								],
								[
									97819,
									97832
								],
								[
									97908,
									97931
								],
								[
									98059,
									98081
								],
								[
									98178,
									98191
								],
								[
									98253,
									98269
								],
								[
									98307,
									98311
								],
								[
									98570,
									98613
								],
								[
									98628,
									98653
								],
								[
									98796,
									98804
								],
								[
									98818,
									98825
								],
								[
									98834,
									98839
								],
								[
									98857,
									98898
								],
								[
									98911,
									98918
								],
								[
									98995,
									99034
								],
								[
									99191,
									99202
								],
								[
									99237,
									99258
								],
								[
									99336,
									99343
								],
								[
									99375,
									99400
								],
								[
									99458,
									99467
								],
								[
									99484,
									99491
								],
								[
									99509,
									99535
								],
								[
									99593,
									99602
								],
								[
									99620,
									99627
								],
								[
									99646,
									99741
								],
								[
									100373,
									100393
								],
								[
									100394,
									100408
								],
								[
									100430,
									100437
								],
								[
									100464,
									100484
								],
								[
									100485,
									100499
								],
								[
									100520,
									100527
								],
								[
									100571,
									100585
								],
								[
									100657,
									100706
								],
								[
									100719,
									100735
								],
								[
									100769,
									100785
								],
								[
									100877,
									100909
								],
								[
									100940,
									100979
								],
								[
									101360,
									101401
								],
								[
									101440,
									101447
								],
								[
									101503,
									101523
								],
								[
									101561,
									101580
								],
								[
									101654,
									101671
								],
								[
									101690,
									101710
								],
								[
									101714,
									101731
								],
								[
									101781,
									101804
								],
								[
									101905,
									101928
								],
								[
									101972,
									101991
								],
								[
									102034,
									102062
								],
								[
									102158,
									102179
								],
								[
									102255,
									102281
								],
								[
									102394,
									102412
								],
								[
									102466,
									102471
								],
								[
									102474,
									102480
								],
								[
									102493,
									102539
								],
								[
									102622,
									102635
								],
								[
									103014,
									103027
								],
								[
									103090,
									103139
								],
								[
									103152,
									103168
								],
								[
									103190,
									103203
								],
								[
									103231,
									103243
								],
								[
									103247,
									103260
								],
								[
									103322,
									103374
								],
								[
									103563,
									103576
								],
								[
									103639,
									103678
								],
								[
									103822,
									103857
								],
								[
									103929,
									103933
								],
								[
									103960,
									103969
								],
								[
									104220,
									104255
								],
								[
									104331,
									104352
								],
								[
									104367,
									104375
								],
								[
									104388,
									104397
								],
								[
									104419,
									104423
								],
								[
									104462,
									104466
								],
								[
									104613,
									104655
								],
								[
									104988,
									105016
								],
								[
									105076,
									105127
								],
								[
									105378,
									105421
								],
								[
									105474,
									105517
								],
								[
									105553,
									105558
								],
								[
									105635,
									105649
								],
								[
									105684,
									105694
								],
								[
									105707,
									105742
								],
								[
									105786,
									105794
								],
								[
									106341,
									106385
								],
								[
									106920,
									106943
								],
								[
									107356,
									107398
								],
								[
									108204,
									108227
								],
								[
									108599,
									108604
								],
								[
									109163,
									109176
								],
								[
									109212,
									109227
								],
								[
									109265,
									109282
								],
								[
									109324,
									109368
								],
								[
									109567,
									109574
								],
								[
									110285,
									110298
								],
								[
									110333,
									110342
								],
								[
									110399,
									110418
								],
								[
									110524,
									110537
								],
								[
									110712,
									110727
								],
								[
									110771,
									110788
								],
								[
									110834,
									110847
								],
								[
									110889,
									110902
								],
								[
									110944,
									110959
								],
								[
									111003,
									111020
								],
								[
									111148,
									111153
								],
								[
									111302,
									111328
								],
								[
									111505,
									111519
								],
								[
									111542,
									111547
								],
								[
									112181,
									112185
								],
								[
									112243,
									112247
								],
								[
									112490,
									112499
								],
								[
									112624,
									112637
								],
								[
									112711,
									112725
								],
								[
									112981,
									113004
								],
								[
									113022,
									113031
								],
								[
									113044,
									113055
								],
								[
									113065,
									113074
								],
								[
									113094,
									113122
								],
								[
									113230,
									113263
								],
								[
									113430,
									113452
								],
								[
									113470,
									113479
								],
								[
									113499,
									113512
								],
								[
									113570,
									113579
								],
								[
									113599,
									113641
								],
								[
									114114,
									114122
								],
								[
									114157,
									114168
								],
								[
									114245,
									114283
								],
								[
									114634,
									114655
								],
								[
									114740,
									114774
								],
								[
									114927,
									114966
								],
								[
									115022,
									115034
								],
								[
									115493,
									115501
								],
								[
									115633,
									115640
								],
								[
									115699,
									115707
								],
								[
									115821,
									115838
								],
								[
									115917,
									115921
								],
								[
									115975,
									115992
								],
								[
									116104,
									116152
								],
								[
									116433,
									116528
								],
								[
									116663,
									116675
								],
								[
									116685,
									116697
								],
								[
									116702,
									116715
								],
								[
									116821,
									116833
								],
								[
									116843,
									116855
								],
								[
									116860,
									116873
								],
								[
									116981,
									116989
								],
								[
									117200,
									117208
								],
								[
									117583,
									117593
								],
								[
									117673,
									117683
								],
								[
									117764,
									117772
								],
								[
									117903,
									117922
								],
								[
									118476,
									118480
								],
								[
									118549,
									118566
								],
								[
									118606,
									118621
								],
								[
									118659,
									118672
								],
								[
									118708,
									118723
								],
								[
									118833,
									118838
								],
								[
									118908,
									118917
								],
								[
									118938,
									118948
								],
								[
									119055,
									119120
								],
								[
									119471,
									119505
								],
								[
									119589,
									119632
								],
								[
									119848,
									119895
								],
								[
									120086,
									120137
								],
								[
									120357,
									120409
								],
								[
									120757,
									120800
								],
								[
									121172,
									121176
								],
								[
									121291,
									121366
								],
								[
									121740,
									121744
								],
								[
									121977,
									122019
								],
								[
									122083,
									122091
								],
								[
									122252,
									122293
								],
								[
									122340,
									122372
								],
								[
									122453,
									122486
								],
								[
									122545,
									122609
								],
								[
									122849,
									122890
								],
								[
									122928,
									122946
								],
								[
									122995,
									123002
								],
								[
									123196,
									123260
								],
								[
									123436,
									123501
								],
								[
									123514,
									123526
								],
								[
									123543,
									123554
								],
								[
									123578,
									123593
								],
								[
									123976,
									124006
								],
								[
									124183,
									124203
								],
								[
									124223,
									124277
								],
								[
									124500,
									124506
								],
								[
									124558,
									124563
								],
								[
									124619,
									124625
								],
								[
									124702,
									124707
								],
								[
									124750,
									124809
								],
								[
									126858,
									126871
								],
								[
									127019,
									127033
								],
								[
									127193,
									127206
								],
								[
									127288,
									127307
								],
								[
									127550,
									127587
								],
								[
									127935,
									128005
								],
								[
									128361,
									128403
								],
								[
									128454,
									128463
								],
								[
									128629,
									128664
								],
								[
									128791,
									128795
								],
								[
									128817,
									128828
								],
								[
									128938,
									128961
								],
								[
									129105,
									129129
								],
								[
									129230,
									129234
								],
								[
									129257,
									129261
								],
								[
									129273,
									129305
								],
								[
									129353,
									129393
								],
								[
									129622,
									129641
								],
								[
									129673,
									129737
								],
								[
									129789,
									129794
								],
								[
									129827,
									129857
								],
								[
									129944,
									129979
								],
								[
									130003,
									130029
								],
								[
									130143,
									130176
								],
								[
									130315,
									130373
								],
								[
									130398,
									130424
								],
								[
									130467,
									130502
								],
								[
									130545,
									130566
								],
								[
									130715,
									130741
								],
								[
									130899,
									130918
								],
								[
									131240,
									131289
								],
								[
									131314,
									131335
								],
								[
									131377,
									131393
								],
								[
									131447,
									131470
								],
								[
									131533,
									131561
								],
								[
									131623,
									131644
								],
								[
									131668,
									131673
								],
								[
									132246,
									132277
								],
								[
									132280,
									132298
								],
								[
									132350,
									132351
								],
								[
									132364,
									132375
								],
								[
									132930,
									132975
								],
								[
									133077,
									133101
								],
								[
									133364,
									133374
								],
								[
									133422,
									133443
								],
								[
									133491,
									133512
								],
								[
									133599,
									133640
								],
								[
									133788,
									133792
								],
								[
									133838,
									133846
								],
								[
									133875,
									133879
								],
								[
									134254,
									134267
								],
								[
									134320,
									134340
								],
								[
									134666,
									134723
								],
								[
									134830,
									134841
								],
								[
									135181,
									135201
								],
								[
									135241,
									135277
								],
								[
									135306,
									135319
								],
								[
									135362,
									135372
								],
								[
									135417,
									135432
								],
								[
									136406,
									136419
								],
								[
									136990,
									137010
								],
								[
									137085,
									137100
								],
								[
									137478,
									137491
								],
								[
									137562,
									137582
								],
								[
									137664,
									137679
								],
								[
									137745,
									137774
								],
								[
									137848,
									137881
								],
								[
									137993,
									138007
								],
								[
									138047,
									138062
								],
								[
									138084,
									138112
								],
								[
									138641,
									138664
								],
								[
									138871,
									138899
								],
								[
									139006,
									139048
								],
								[
									139375,
									139431
								],
								[
									139665,
									139706
								],
								[
									139797,
									139808
								],
								[
									139952,
									139965
								],
								[
									140286,
									140302
								],
								[
									140331,
									140383
								],
								[
									140452,
									140459
								],
								[
									140544,
									140558
								],
								[
									140640,
									140650
								],
								[
									140756,
									140760
								],
								[
									140792,
									140812
								],
								[
									140863,
									140876
								],
								[
									140926,
									140938
								],
								[
									141232,
									141247
								],
								[
									141568,
									141578
								],
								[
									141633,
									141643
								],
								[
									141727,
									141738
								],
								[
									141795,
									141802
								],
								[
									142406,
									142416
								],
								[
									142482,
									142493
								],
								[
									142561,
									142573
								],
								[
									142608,
									142621
								],
								[
									142666,
									142681
								],
								[
									142700,
									142727
								],
								[
									142913,
									142956
								],
								[
									143117,
									143177
								],
								[
									143263,
									143288
								],
								[
									143337,
									143380
								],
								[
									143391,
									143401
								],
								[
									143410,
									143439
								],
								[
									143695,
									143711
								],
								[
									143733,
									143744
								],
								[
									143794,
									143824
								],
								[
									143893,
									143898
								],
								[
									143927,
									143932
								],
								[
									144227,
									144240
								],
								[
									144291,
									144322
								],
								[
									144343,
									144356
								],
								[
									144357,
									144377
								],
								[
									144466,
									144502
								],
								[
									144575,
									144590
								],
								[
									144671,
									144683
								],
								[
									145158,
									145163
								],
								[
									145886,
									145913
								],
								[
									145938,
									145943
								],
								[
									145994,
									146023
								],
								[
									146102,
									146107
								],
								[
									146189,
									146202
								],
								[
									146253,
									146264
								],
								[
									146304,
									146325
								],
								[
									146449,
									146466
								],
								[
									146596,
									146616
								],
								[
									146812,
									146838
								],
								[
									146930,
									146936
								],
								[
									146966,
									146971
								],
								[
									147047,
									147080
								],
								[
									147238,
									147243
								],
								[
									147294,
									147307
								],
								[
									147331,
									147337
								],
								[
									147420,
									147444
								],
								[
									147538,
									147549
								],
								[
									147605,
									147618
								],
								[
									147680,
									147691
								],
								[
									147790,
									147800
								],
								[
									147898,
									147911
								],
								[
									148024,
									148033
								],
								[
									148091,
									148103
								],
								[
									148186,
									148194
								],
								[
									148294,
									148301
								],
								[
									148403,
									148423
								],
								[
									148611,
									148632
								],
								[
									148891,
									148908
								],
								[
									149061,
									149073
								],
								[
									149202,
									149216
								],
								[
									149387,
									149400
								],
								[
									149417,
									149437
								],
								[
									149696,
									149726
								],
								[
									149732,
									149758
								],
								[
									149777,
									149803
								],
								[
									149832,
									149850
								],
								[
									149916,
									149950
								],
								[
									150064,
									150118
								],
								[
									150145,
									150165
								],
								[
									150255,
									150272
								],
								[
									150368,
									150390
								],
								[
									150497,
									150521
								],
								[
									150629,
									150659
								],
								[
									150690,
									150699
								],
								[
									150742,
									150761
								],
								[
									150910,
									150930
								],
								[
									151047,
									151066
								],
								[
									151180,
									151196
								],
								[
									151304,
									151314
								],
								[
									151392,
									151399
								],
								[
									151465,
									151474
								],
								[
									151819,
									151840
								],
								[
									151849,
									151877
								],
								[
									151887,
									151932
								],
								[
									151987,
									151998
								],
								[
									152020,
									152030
								],
								[
									152043,
									152054
								],
								[
									152082,
									152115
								],
								[
									152276,
									152308
								],
								[
									152376,
									152398
								],
								[
									152570,
									152606
								],
								[
									152768,
									152784
								],
								[
									152845,
									152881
								],
								[
									152957,
									152968
								],
								[
									153033,
									153037
								],
								[
									153076,
									153089
								],
								[
									153203,
									153239
								],
								[
									153416,
									153421
								],
								[
									153462,
									153515
								],
								[
									154453,
									154482
								],
								[
									154636,
									154673
								],
								[
									154684,
									154697
								],
								[
									154710,
									154719
								],
								[
									154766,
									154786
								],
								[
									154820,
									154836
								],
								[
									155059,
									155080
								],
								[
									155208,
									155240
								],
								[
									155267,
									155276
								],
								[
									155288,
									155301
								],
								[
									155379,
									155403
								],
								[
									155470,
									155479
								],
								[
									155495,
									155505
								],
								[
									155522,
									155539
								],
								[
									155567,
									155576
								],
								[
									155577,
									155600
								],
								[
									155646,
									155670
								],
								[
									155818,
									155823
								],
								[
									155841,
									155850
								],
								[
									155951,
									155959
								],
								[
									155963,
									155972
								],
								[
									155994,
									156007
								],
								[
									156024,
									156037
								],
								[
									156044,
									156057
								],
								[
									156083,
									156100
								],
								[
									156113,
									156129
								],
								[
									156199,
									156204
								],
								[
									156222,
									156231
								],
								[
									156332,
									156340
								],
								[
									156353,
									156362
								],
								[
									156377,
									156382
								],
								[
									156470,
									156507
								],
								[
									156664,
									156680
								],
								[
									156694,
									156716
								],
								[
									156829,
									156835
								],
								[
									157883,
									157898
								],
								[
									157948,
									157962
								],
								[
									157976,
									157991
								],
								[
									158521,
									158538
								],
								[
									158588,
									158604
								],
								[
									158888,
									158918
								],
								[
									158936,
									158945
								],
								[
									158963,
									158973
								],
								[
									158986,
									158995
								],
								[
									159138,
									159167
								],
								[
									159185,
									159194
								],
								[
									159212,
									159222
								],
								[
									159226,
									159235
								],
								[
									160516,
									160568
								],
								[
									160634,
									160657
								],
								[
									160729,
									160747
								],
								[
									161096,
									161106
								],
								[
									161110,
									161124
								],
								[
									161326,
									161358
								],
								[
									161385,
									161420
								],
								[
									161460,
									161483
								],
								[
									161644,
									161660
								],
								[
									161845,
									161854
								],
								[
									161880,
									161900
								],
								[
									161927,
									161936
								],
								[
									161951,
									161975
								],
								[
									162115,
									162160
								],
								[
									162192,
									162210
								],
								[
									162356,
									162368
								],
								[
									162513,
									162518
								],
								[
									162832,
									162839
								],
								[
									162976,
									162995
								],
								[
									163013,
									163035
								],
								[
									163315,
									163357
								],
								[
									163374,
									163411
								],
								[
									163654,
									163673
								],
								[
									164043,
									164083
								],
								[
									164126,
									164140
								],
								[
									164210,
									164240
								],
								[
									164289,
									164319
								],
								[
									164386,
									164464
								],
								[
									164914,
									164942
								],
								[
									164994,
									165058
								],
								[
									165076,
									165100
								],
								[
									165359,
									165378
								],
								[
									165493,
									165529
								],
								[
									166254,
									166292
								],
								[
									166309,
									166347
								],
								[
									167642,
									167649
								],
								[
									167705,
									167723
								],
								[
									167935,
									167942
								],
								[
									167990,
									167994
								],
								[
									168121,
									168129
								],
								[
									168196,
									168208
								],
								[
									169185,
									169251
								],
								[
									169252,
									169269
								],
								[
									169507,
									169518
								],
								[
									169535,
									169554
								],
								[
									169668,
									169732
								],
								[
									169748,
									169757
								],
								[
									169769,
									169777
								],
								[
									169830,
									169845
								],
								[
									169861,
									169867
								],
								[
									169891,
									169904
								],
								[
									170099,
									170116
								],
								[
									170161,
									170186
								],
								[
									170285,
									170291
								],
								[
									170411,
									170443
								],
								[
									170520,
									170524
								],
								[
									170654,
									170675
								],
								[
									170713,
									170734
								],
								[
									170775,
									170808
								],
								[
									171041,
									171068
								],
								[
									171160,
									171164
								],
								[
									171271,
									171276
								],
								[
									171540,
									171586
								],
								[
									172176,
									172185
								],
								[
									172421,
									172474
								],
								[
									172485,
									172511
								],
								[
									172814,
									172830
								],
								[
									172914,
									172925
								],
								[
									173171,
									173175
								],
								[
									173459,
									173512
								],
								[
									173740,
									173753
								],
								[
									173764,
									173780
								],
								[
									173955,
									173964
								],
								[
									174006,
									174015
								],
								[
									174055,
									174060
								],
								[
									174096,
									174114
								],
								[
									174135,
									174166
								],
								[
									174273,
									174292
								],
								[
									174585,
									174598
								],
								[
									174687,
									174705
								],
								[
									174800,
									174817
								],
								[
									174950,
									174957
								],
								[
									175076,
									175082
								],
								[
									175232,
									175240
								],
								[
									175359,
									175369
								],
								[
									175598,
									175607
								],
								[
									176105,
									176145
								],
								[
									176454,
									176489
								],
								[
									176820,
									176826
								],
								[
									176862,
									176880
								],
								[
									176924,
									176934
								],
								[
									177017,
									177027
								],
								[
									177076,
									177108
								],
								[
									177355,
									177374
								],
								[
									177992,
									178014
								],
								[
									178313,
									178373
								],
								[
									178639,
									178664
								],
								[
									179065,
									179090
								],
								[
									179119,
									179135
								],
								[
									179144,
									179155
								],
								[
									179247,
									179253
								],
								[
									179262,
									179273
								],
								[
									179333,
									179357
								],
								[
									179375,
									179384
								],
								[
									179408,
									179417
								],
								[
									179445,
									179456
								],
								[
									179483,
									179494
								],
								[
									179527,
									179540
								],
								[
									179559,
									179572
								],
								[
									179584,
									179597
								],
								[
									179748,
									179759
								],
								[
									179861,
									179886
								],
								[
									179904,
									179930
								],
								[
									180021,
									180055
								],
								[
									180327,
									180348
								],
								[
									180413,
									180431
								],
								[
									180599,
									180635
								],
								[
									181057,
									181077
								],
								[
									181280,
									181295
								],
								[
									181571,
									181594
								],
								[
									181803,
									181821
								],
								[
									182039,
									182051
								],
								[
									182081,
									182096
								],
								[
									182141,
									182147
								],
								[
									182199,
									182213
								],
								[
									182355,
									182373
								],
								[
									182569,
									182601
								],
								[
									182667,
									182683
								],
								[
									183019,
									183035
								],
								[
									183482,
									183485
								],
								[
									183498,
									183499
								],
								[
									183529,
									183565
								],
								[
									184006,
									184045
								],
								[
									184134,
									184160
								],
								[
									184208,
									184269
								],
								[
									184676,
									184704
								],
								[
									184811,
									184829
								],
								[
									185124,
									185162
								],
								[
									185216,
									185221
								]
							],
							"symlist":
							[
								"Util(g)",
								"Util.formatAnnotatedObject = function(subject, o)",
								"  i =>",
								"  item =>",
								"  padding = x =>",
								"  arr =>",
								"Util.curry = (fn, arity) =>",
								"  ret = function curried(...args)",
								"(v, i) =>",
								"Curried = function(...a)",
								"function()",
								"function(a)",
								"function(a, b)",
								"function(a, b, c)",
								"function(a, b, c, d)",
								"  get()",
								"Util.arityN = (fn, n) =>",
								"function(fn)",
								"function()",
								"function(fn)",
								"function(a)",
								"function(fn)",
								"function(a, b)",
								"function(fn)",
								"function(a, b, c)",
								"function(fn)",
								"function(a, b, c, d)",
								"function(fn)",
								"function(a, b, c, d, e)",
								"Util.getter = target =>",
								"  self = function(key)",
								"  .fn = key =>",
								"  .fn = key =>",
								"Util.setter = target =>",
								"  set = function(key, value)",
								"  .fn = (key, value) =>",
								"  .fn = (key, value) =>",
								"Util.remover = target =>",
								"key =>",
								"key =>",
								"Util.hasFn = target =>",
								"key =>",
								"key =>",
								"Util.adder = target =>",
								"arg =>",
								"arg =>",
								"  self = function(obj, arg = 1)",
								"ChooseFn(a, o)",
								"  .fn = (obj, arg) =>",
								"  .fn = (obj, arg) =>",
								"  .fn = (obj, arg) =>",
								"  .fn = (num, arg) =>",
								"  .fn = (obj, arg) =>",
								"Util.updater = (target, get, set, fn) =>",
								"(k, f, i) =>",
								"  doUpdate(key, func, i)",
								"  create = () =>",
								"key =>",
								"() =>",
								"  self = function(...args)",
								"Util.once = (fn, thisArg, memoFn) =>",
								"function(...args)",
								"Util.delay = (func, wait, thisObj) =>",
								"function(...args)",
								"()",
								"Util.throttle = (f, t, thisObj) =>",
								"function(...args)",
								"Util.debounce = (func, wait, options = {}) =>",
								"  later()",
								"  debounced(...a)",
								"  .clear = function()",
								"  .flush = function()",
								"Util.debounceAsync = (fn, wait, options = {}) =>",
								"function(...a)",
								"  resolve =>",
								"() =>",
								"  arg =>",
								"g =>",
								"g =>",
								"() =>",
								"err =>",
								"() =>",
								"err =>",
								"() =>",
								"err =>",
								"() =>",
								"Util.log = (...args) =>",
								"  f =>",
								"  f =>",
								"(a, p, i) =>",
								"  get: () =>",
								"  .setFilters = function(args)",
								"  arg =>",
								"  .getFilters = function()",
								"Util.msg = (strings, ...substitutions) =>",
								"(base, n) =>",
								"Util.generalLog = function(n, x)",
								"Util.toSource = function(arg, opts = {})",
								"  print = (...args) =>",
								"Util.debug = function(message)",
								"  removeCircular = function(key, value)",
								"  arg =>",
								"Util.type = function({ type })",
								"Util.functionName = function(fn)",
								"Util.className = function(obj)",
								"  obj",
								"Util.unwrapComponent = function(c)",
								"Util.componentName = function(c)",
								"Util.count = function(s, ch)",
								"Util.parseNum = function(str)",
								"Util.minmax = function(num, min, max)",
								"Util.getExponential = function(num)",
								"Util.getNumberParts = function(num)",
								"Util.pow2 = function(n)",
								"Util.pow10 = function(n)",
								"Util.bitValue = function(n)",
								"Util.bitMask = function(bits, start = 0)",
								"Util.bitGroups = function(num, bpp, minLen)",
								"Util.bitStuff = (arr, bpp) =>",
								"([b, f], n) =>",
								"Util.toBinary = function(num)",
								"Util.toBits = function(num)",
								"bit =>",
								"Util.getBit = function(v, n)",
								"Util.isSet = function(v, n)",
								"Util.bitCount = function(n)",
								"Util.bitNo = function(n)",
								"Util.toggleBit = function(num, bit)",
								"Util.setBit = function(num, bit)",
								"Util.clearBit = function(num, bit)",
								"Util.range = function(...args)",
								"(v, k) =>",
								"  n =>",
								"Util.set = function(obj, prop, value)",
								"(prop, value) =>",
								"(prop, value) =>",
								"(prop, value) =>",
								"value =>",
								"(obj, prop) =>",
								"() =>",
								"Util.bitArrayToNumbers = function(arr)",
								"Util.bitsToNumbers = function(bits)",
								"(val, key, arr) =>",
								"Util.shuffle = function(arr, rnd = Util.rng)",
								"(a, b) =>",
								"Util.sortNum = function(arr)",
								"(a, b) =>",
								"Util.draw = (arr, n = 1, rnd = Util.rng) =>",
								"Util.is = function(what, ...pred)",
								"  type =>",
								"  fn =>",
								"Util.instanceOf = (value, ctor) =>",
								"Util.onoff = function(val)",
								"Util.numbersToBits = function(arr)",
								"(bits, num) =>",
								"Util.randomNumbers = function([start, end], draws)",
								"Util.randomBits = function(r = [1, 50], n = 5)",
								"Util.padFn = function(len, char = ' ', fn = (str, pad) => pad)",
								"(s, n = len) =>",
								"Util.pad = function(s, n, char = ' ')",
								"Util.abbreviate = function(str, max = 40, suffix = '...')",
								"Util.trim = function(str, charset)",
								"Util.trimRight = function(str, charset)",
								"Util.indent = (text, space = ' ') =>",
								"Util.define = (obj, ...args) =>",
								"Util.memoizedProperties = (obj, methods) =>",
								"  get()",
								"Util.copyWhole = (dst, ...args) =>",
								"Util.copyEntries = (obj, entries) =>",
								"Util.extend = (...args) =>",
								"Util.isCloneable = obj =>",
								"Util.isUnextendable = val =>",
								"  pred = (k, v, f) =>",
								"(key, depth) =>",
								"  value = function(...args)",
								"Util.defineGetter = (obj, key, fn, enumerable = false) =>",
								"Util.defineGetterSetter = (obj, key, g, s, enumerable = false) =>",
								"Util.defineGettersSetters = (obj, gettersSetters) =>",
								"Util.extendArray = function(arr = Array.prototype)",
								"function(pred)",
								"function()",
								"function()",
								"(item, i, a) =>",
								"function()",
								"function(value)",
								"Util.adapter = function(obj, getLength = obj => obj.length, getKey = (obj, index) => obj.",
								"(index), getItem = (obj, key) => obj[key], setItem = (obj, index, value) => (obj[index] = value))",
								"  get length()",
								"  get instance()",
								"  key(i)",
								"  get(key)",
								"  has(key)",
								"  set(key, value)",
								"*keys()",
								"*entries()",
								"  toObject()",
								"  toMap()",
								"  .localStorage = function(s)",
								"() =>",
								"w =>",
								"() =>",
								"l =>",
								"(l, i) =>",
								"(l, key) =>",
								"(l, key, v) =>",
								"Util.array = function(a)",
								"Util.arrayFromEntries = entries =>",
								"([k, v]) =>",
								"key =>",
								"([k, v]) =>",
								"Util.toMap = function(hash = {}, fn)",
								"Util.extendMap = function(map)",
								"  .entries = function*iterator()",
								"  .toObject = function()",
								"  .match = function(...args)",
								"entries =>",
								"Util.objectFrom = function(any)",
								"Util.tail = function(arr)",
								"Util.splice = function(str, index, delcount, insert)",
								"Util.identity = arg =>",
								"Util.reverse = arr =>",
								"Util.keyOf = function(obj, prop)",
								"Util.rotateRight = function(arr, n)",
								"Util.repeater = function(n, what)",
								"()",
								"()",
								"Util.repeat = function(n, what)",
								"Util.arrayDim = function(dimensions, init)",
								"Util.flatten = function(arr)",
								"Util.chunkArray = (a, size) =>",
								"(acc, item, i) =>",
								"Util.partition = function*(a, size)",
								"Util.difference = (a, b, incicludes) =>",
								"  x =>",
								"  x =>",
								"  x =>",
								"  x =>",
								"Util.intersect = (a, b) =>",
								"Util.symmetricDifference = (a, b) =>",
								"Util.union = (a, b, equality) =>",
								"Util.partition = (array, callback) =>",
								"Util.chances = function(numbers, matches)",
								"Util.sum = arr =>",
								"(acc, n) =>",
								"Util.expr = fn =>",
								"  expr(...args)",
								"  addArgs(args)",
								"  ret = function returnFn(...args)",
								"(a, b) =>",
								"(a, b) =>",
								"(a, b) =>",
								"(a, b) =>",
								"(a, b) =>",
								"(a, b) =>",
								"(a, b) =>",
								"Util.mod = (a, b) =>",
								"n =>",
								"(a, b) =>",
								"Util.fnName = function(f, parent)",
								"Util.objName = function(o)",
								"Util.findKey = function(obj, pred, thisVal)",
								"  value : v =>",
								"Util.find = function(arr, value, prop = 'id')",
								"  pred = function(obj)",
								"obj =>",
								"obj =>",
								"  pred = ([key, value], arr) =>",
								"Util.findIndex = function(obj, pred, thisArg)",
								"Util.match = function(arg, pred)",
								"  match = (val, key) =>",
								"(acc, val, key) =>",
								"(acc, key) =>",
								"Util.toHash = function(map, keyTransform = k => ",
								"('' + k))",
								"(v, k) =>",
								"Util.indexOf = function(obj, prop)",
								"Util.greatestCommonDenominator = (a, b) =>",
								"Util.leastCommonMultiple = (n1, n2) =>",
								"(re, str)",
								"Util.inspect = function(obj, opts = {})",
								"  stringFn = str =>",
								"  print = (...args) =>",
								"(space = false) =>",
								"(space = false) =>",
								"key =>",
								"key =>",
								"Util.dump = function(name, props)",
								"() =>",
								"w =>",
								"() =>",
								"Util.ucfirst = function(str)",
								"Util.lcfirst = function(str)",
								"Util.typeOf = v =>",
								"Util.camelize = (text, sep = '') =>",
								"(match, p1, p2, offset) =>",
								"Util.decamelize = function(str, separator = '-')",
								"Util.ifThenElse = function(pred = value => !!value, _then = () => {}, _else = () => {})",
								"function(value)",
								"Util.if = (value, _then, _else, pred) =>",
								"  v =>",
								"() =>",
								"() =>",
								"Util.ifElse = (value, _else, pred) =>",
								"  v =>",
								"() =>",
								"() =>",
								"() =>",
								"Util.ifThen = (value, _then, pred) =>",
								"  v =>",
								"() =>",
								"() =>",
								"() =>",
								"Util.switch = ({ default: defaultCase, ...cases }) =>",
								"function(value)",
								"(fn, arr)",
								"Util.colorDump = (iterable, textFn) =>",
								"(color, n) =>",
								"Util.bucketInserter = (map, ...extraArgs) =>",
								"function(...args)",
								"function(...args)",
								"Util.fifo = function fifo()",
								"  resolve = () =>",
								"  generator()",
								"  r =>",
								"  push(...args)",
								"  process: function run()",
								"Util.isEmail = function(v)",
								"Util.isString = function(v)",
								"Util.isNumeric = v =>",
								"Util.isUndefined = arg =>",
								"Util.isObject = obj =>",
								"Util.isPrimitive = obj =>",
								"Util.isFunction = arg =>",
								"Util.not = fn =>",
								"function(...args)",
								"Util.isAsync = fn =>",
								"Util.isArrowFunction = fn =>",
								"Util.isEmptyString = v =>",
								"Util.isEmpty = (...args) =>",
								"  empty(v)",
								"Util.isNonEmpty = (...args) =>",
								"  nonEmpty = v =>",
								"Util.isIpAddress = v =>",
								"  i =>",
								"  i =>",
								"Util.isPortNumber = v =>",
								"Util.hasProps = function(obj, props)",
								"  prop =>",
								"Util.validatePassword = function(value)",
								"Util.clone = function(obj, proto)",
								"  constructor",
								"Util.deepClone = function(data)",
								"Util.findVal = function(object, propName, maxDepth = 10)",
								"Util.deepCloneObservable = function(data)",
								"Util.toArray = function(observableArray)",
								"Util.arryToTree = function(data, id, pId, appId)",
								"(e, i) =>",
								"Util.to3wei = function(a, old, id, pId)",
								"(e, i) =>",
								"(se, si) =>",
								"Util.arrExchangePos = function(arr, i, j)",
								"Util.arrRemove = function(arr, i)",
								"Util.move = function(src, dst = [])",
								"Util.moveIf = function(src, pred, dst = [])",
								"Util.logOutClearStorage = function()",
								"Util.getCookie = function(cookie, name)",
								"Util.parseCookie = function(c = document.cookie)",
								"  pred = char =>",
								"  char =>",
								"  char =>",
								"Util.encodeCookie = c =>",
								"([key, value]) =>",
								"Util.setCookies = c =>",
								"([key, value]) =>",
								"Util.clearCookies = function(c)",
								"(acc, name) =>",
								"Util.deleteCookie = function(name)",
								"() =>",
								"w =>",
								"() =>",
								"Util.accAdd = function(arg1, arg2)",
								"Util.Subtr = function(arg1, arg2)",
								"Util.accDiv = function(arg1, arg2)",
								"Util.accMul = function(arg1, arg2)",
								"Util.dateFormatter = function(date, formate)",
								"Util.numberFormatter = function(numStr)",
								"Util.searchObject = function(object, matchCallback, currentPath, result, searched)",
								"(req = {}) =>",
								"() =>",
								"() =>",
								"() =>",
								"url =>",
								"() =>",
								"() =>",
								"() =>",
								"() =>",
								"() =>",
								"() =>",
								"() =>",
								"Util.parseQuery = function(url = ",
								")",
								"Util.encodeQuery = function(data)",
								"Util.parseURL = function(href = this.",
								")",
								"  part =>",
								"([k, v]) =>",
								"(acc, m) =>",
								"  href(override)",
								"Util.makeURL = function(...args)",
								"Util.numberFromURL = function(url, fn)",
								"Util.tryPromise = fn =>",
								"(resolve, reject) =>",
								"  resolve = a =>",
								"  reject = () =>",
								"  resolve = () =>",
								"  reject = () =>",
								"  function(...args)",
								"function(...args)",
								"  resolve = a =>",
								"  reject = () =>",
								"Util.putError = err =>",
								"() =>",
								"fn =>",
								"ret =>",
								"Util.tryPredicate = (fn, defaultRet) =>",
								"ret =>",
								"() =>",
								"Util.isBrowser = function()",
								"() =>",
								"w =>",
								"() =>",
								"() =>",
								"d =>",
								"() =>",
								"Util.waitFor = function waitFor(msecs)",
								"({ setTimeout, clearTimeout, setInterval, clearInterval }) =>",
								"(resolve, reject) =>",
								"() =>",
								"  clear = () =>",
								"Util.timeout = (msecs, promises, promiseClass = Promise) =>",
								"Util.isServer = function()",
								"Util.isMobile = function()",
								"Util.uniquePred = (cmp = null) =>",
								"(el, i, arr) =>",
								"  item =>",
								"(el, i, arr) =>",
								"Util.unique = (arr, cmp) =>",
								"  cmp = (a, b) =>",
								"(e, i, a) =>",
								"Util.zip = a =>",
								"(a, b) =>",
								"(_, i) =>",
								"  arr =>",
								"Util.histogram = (...args) =>",
								"(k, v) =>",
								"  initVal = () =>",
								"  setVal = v =>",
								"(it, i) =>",
								"(item, i) =>",
								"(entry, idx, key) =>",
								"([k, v]) =>",
								"(a, b) =>",
								"Util.concat = function*(...args)",
								"Util.distinct = function(arr)",
								"(value, index, me) =>",
								"Util.rangeMinMax = function(arr, field)",
								"  obj =>",
								"Util.remap = (...args) =>",
								"  getR = () =>",
								"  r = val =>",
								"Util.mergeLists = function(arr1, arr2, key = 'id')",
								"Util.foreach = function(o, fn)",
								"Util.all = function(obj, pred)",
								"Util.isGenerator = function(fn)",
								"Util.isIterator = obj =>",
								"Util.isIterable = obj =>",
								"  x =>",
								"Util.isConstructor = x =>",
								"  construct(target, args)",
								"  target",
								"  x",
								"  m =>",
								"Util.filter = function(a, pred)",
								"()",
								"  fn = (k, v) =>",
								"Util.reduce = (obj, fn, accu) =>",
								"Util.mapFunctional = fn =>",
								"(arg)",
								"Util.map = (...args) =>",
								"  ret = a =>",
								"()",
								"  ret = a =>",
								"()",
								"Util.entriesToObj = function(arr)",
								"(acc, item) =>",
								"Util.isDate = function(d)",
								"Util.parseDate = function(d)",
								"Util.isoDate = function(date)",
								"Util.toUnixTime = function(dateObj, utc = false)",
								"Util.unixTime = function(utc = false)",
								"Util.fromUnixTime = function(epoch, utc = false)",
								"Util.formatTime = function(date = ",
								"(), format = 'HH:MM:SS')",
								"Util.leapYear = function(year)",
								"Util.timeSpan = function(s)",
								"Util.randFloat = function(min, max, rnd = Util.rng)",
								"Util.randInt = (...args) =>",
								"Util.randStr = (len, charset, rnd = Util.rng) =>",
								"Util.hex = function(num, numDigits)",
								"Util.numberParts = (num, base) =>",
								"Util.roundDigits = precision =>",
								"Util.roundFunction = (prec, digits, type) =>",
								"function(value)",
								"Util.roundTo = function(value, prec, digits, type)",
								"() =>",
								"utf8 =>",
								"v =>",
								"utf8 =>",
								"base64 =>",
								"v =>",
								"string =>",
								"Util.formatRecord = function(obj)",
								"  item =>",
								"function(obj)",
								"  .isArrayLike = obj =>",
								"Util.equals = function(a, b)",
								"(e, i) =>",
								"Util.versionCompare = (a, b) =>",
								"  isdigit = c =>",
								"Util.isGetter = (obj, propName) =>",
								"Util.isBool = value =>",
								"Util.size = (...args) =>",
								"  size(obj)",
								"Util.isMap = function(obj)",
								"Util.effectiveDeviceWidth = function()",
								"Util.getFormFields = function(initialState)",
								"(acc, { elements }) =>",
								"(acc2, { name, value }) =>",
								"Util.mergeObjects = function(objArr, predicate = (dst, src, key) => (src[key] == '' ? undefined : src[key]))",
								"Util.getUserAgent = function(headers = req.headers)",
								"Util.factor = function(start, end)",
								"Util.factorial = function(n)",
								"Util.increment = function(obj, key)",
								"Util.counter = function()",
								"  self = function()",
								"Util.filterKeys = function(obj, pred = k => true)",
								"  pred = str =>",
								"  pred = str =>",
								"Util.filterMembers = function(obj, fn)",
								"  pred = (k, v, o) =>",
								"Util.filterOutMembers = function(obj, fn)",
								"  pred = (v, k, o) =>",
								"Util.dumpMembers = obj =>",
								"Util.filterOutKeys = function(obj, arr)",
								"(v, k, o) =>",
								"(k, v) =>",
								"key =>",
								"() =>",
								"(v, k, o) =>",
								"Util.removeKeys = function(obj, arr)",
								"(v, k, o) =>",
								"(k, v) =>",
								"key =>",
								"Util.getKeys = function(obj, arr)",
								"Util.numbersConvert = function(str)",
								"(ch, i) =>",
								"Util.entries = function(arg)",
								"()",
								"Util.keys = function(arg)",
								"()",
								"Util.values = function(arg)",
								"()",
								"Util.removeEqual = function(a, b)",
								"Util.clear = obj =>",
								"Util.remove = (arr, item) =>",
								"(other, i, arr) =>",
								"Util.removeIf = function(arr, pred)",
								"Util.traverse = function(o, fn)",
								"(v, k, a) =>",
								"  walker(o, depth = 0)",
								"Util.traverseWithPath = function(o, rootPath = [])",
								"  walker(o, path)",
								"Util.indexByPath = function(o, p)",
								"Util.pushUnique = (arr, ...args) =>",
								"(acc, item) =>",
								"Util.insertSorted = function(arr, item, cmp = (a, b) => b - a)",
								"  next = (k, v) =>",
								"(k, v) =>",
								"(k, v) =>",
								"(k, v) =>",
								"  fn = function(key, value)",
								"Util.keyIterator = obj =>",
								"Util.entryIterator = obj =>",
								"()",
								"Util.mapAdapter = getSetFunction =>",
								"  get(key)",
								"  set(key, value)",
								"  .keys = () =>",
								"  .entries = () =>",
								"Util.mapFunction = map =>",
								"  fn = function(...args)",
								"  m =>",
								"  .set = (key, value) =>",
								"(k, v) =>",
								"  .get = key =>",
								"  .set = (key, value) =>",
								"(k, v) =>",
								"  .get = key =>",
								"  .set = (key, value) =>",
								"(k, v) =>",
								"  .get = key =>",
								"  .set = (key, value) =>",
								"(k, v) =>",
								"  .get = key =>",
								"  .update = function(key, fn = (k, v) => v)",
								"  .entries = function*()",
								"  .values = function*()",
								"  .keys = function*()",
								"function()",
								"([key, value]) =>",
								"  .keys = () =>",
								"  .entries = () =>",
								"  .values = () =>",
								"  .keys = function*()",
								"  .entries = function*()",
								"  .values = function*()",
								"  .filter = function(pred)",
								"()",
								"  .map = function(t)",
								"()",
								"  .forEach = function(fn)",
								"  .delete = key =>",
								"  .has = key =>",
								"Util.mapWrapper = (map, toKey = key => key, fromKey = key => key) =>",
								"  .set = (key, value) =>",
								"(k, v) =>",
								"  .get = key =>",
								"  .keys = () =>",
								"  .entries = function*()",
								"  .values = function*()",
								"  .has = key =>",
								"  .delete = key =>",
								"  m =>",
								"Util.mapCombinator = (forward, backward) =>",
								"  fn = function(key, value)",
								"(a,m) =>",
								"key =>",
								"a =>",
								"  makeGetter(map, next = a => a)",
								"key =>",
								"Util.predicate = (fn_or_regex, pred) =>",
								"  fn = arg =>",
								"  .valueOf = function()",
								"arg =>",
								"Util.some = predicates =>",
								"value =>",
								"  pred =>",
								"Util.every = predicates =>",
								"value =>",
								"  pred =>",
								"Util.iterateMembers = function*(obj, predicate = (name, depth, obj, proto) => true, depth = 0)",
								"(...predicates) =>",
								"(...args) =>",
								"  pred =>",
								"(...predicates) =>",
								"(...args) =>",
								"  pred =>",
								"(pred, obj) =>",
								"Util.memberNameFilter = (depth = 1, start = 0) =>",
								"(m, l, o) =>",
								"(m, l, o) =>",
								"(name, depth, obj, proto) =>",
								"Util.getMemberNames = (obj, ...args) =>",
								"Util.getMemberEntries = (obj, ...args) =>",
								"  name =>",
								"  accFn = (a, m, o) =>",
								"(obj, ...args) =>",
								"(a, m) =>",
								"(r, a, m) =>",
								"(r, a) =>",
								"  incFn = (c, n, self) =>",
								"  incFn = (c, n, self) =>",
								"  inc = (i, n = 1) =>",
								"  self = function Count(n = 1)",
								"  .valueOf = function()",
								"  filterFn = (key, value) =>",
								"(acc, mem, idx) =>",
								"r =>",
								"() =>",
								"  fn = function ReduceIntoMap(arg, acc = mapObj)",
								"(acc, arg) =>",
								"(a, m, o) =>",
								"Util.methodNameFilter = (depth = 1, start = 0) =>",
								"(m, l, o) =>",
								"() =>",
								"b =>",
								"() =>",
								"Util.getMethodNames = (obj, depth = 1, start = 0) =>",
								"(a, m, o) =>",
								"Util.inherit = (dst, src, depth = 1) =>",
								"  inherits(ctor, superCtor)",
								"  ctor",
								"  superCtor",
								"  inherits(ctor, superCtor)",
								"TempCtor = function()",
								"TempCtor",
								"  superCtor",
								"  ctor",
								"  ctor",
								"Util.bindMethods = (obj, methods, dest) =>",
								"Util.getConstructor = obj =>",
								"Util.getPrototypeChain = function(obj, fn = p => p)",
								"Util.getObjectChain = (obj, fn = p => p) =>",
								"Util.getPropertyDescriptors = function(obj)",
								"p =>",
								"  fn = (c, p) =>",
								"(p, o) =>",
								"Util.weakDefine = function(...args)",
								"  other =>",
								"Util.exception = function Exception(...args)",
								"  toString(color = false)",
								"Util.location = function Location(...args)",
								"  toString(color = false)",
								"t =>",
								"  getFileName()",
								"  getLineNumber()",
								"  getColumnNumber()",
								"Util.stackFrame = function StackFrame(frame)",
								"  prop =>",
								"  propertyMap()",
								"  method =>",
								"([method, func]) =>",
								"  getFunction()",
								"  getMethodName()",
								"  getFunctionName()",
								"  getTypeName()",
								"  getFileName()",
								"  getLineNumber()",
								"  getColumnNumber()",
								"  get()",
								"  toString(color, opts = {})",
								"(t, color) =>",
								"t =>",
								"  p =>",
								"  p =>",
								"(f, i) =>",
								"  getLocation()",
								"  get location()",
								"Util.scriptName = () =>",
								"() =>",
								"args =>",
								"() =>",
								"Util.getFunctionName = () =>",
								"Util.getFunctionArguments = fn =>",
								"Util.scriptDir = () =>",
								"() =>",
								"script =>",
								"() =>",
								"Util.stack = function Stack(stack, offset)",
								"  frame =>",
								"([m, p]) =>",
								"(acc, [method, property]) =>",
								"  getStack()",
								"  .prepareStackTrace = (_, stack) =>",
								"  stackToString(st, start = 0)",
								"()",
								"  frame =>",
								"  part =>",
								"  frame =>",
								"([func, file]) =>",
								"  n =>",
								"([func, file]) =>",
								"([func, [columnNumber, lineNumber, ...file]]) =>",
								"({ methodName, functionName: func, fileName: file, columnNumber: column, lineNumber: line }) =>",
								"s =>",
								"s =>",
								"() =>",
								"s =>",
								"s =>",
								"() =>",
								"  frame =>",
								"  frame =>",
								"  get: () =>",
								"  get: () =>",
								"*value()",
								"  toString(opts = {})",
								"  f =>",
								"  getFunctionName()",
								"  getMethodName()",
								"  getFileName()",
								"  getLineNumber()",
								"  get()",
								"(a, f) =>",
								"(fn, i) =>",
								"Util.getCallerStack = function(position = 2, limit = 1000, stack)",
								"  .prepareStackTrace = (_, stack) =>",
								"Util.getCallerFile = function(position = 2)",
								"Util.getCallerFunction = function(position = 2)",
								"Util.getCallerFunctionName = function(position = 2)",
								"Util.getCallerFunctionNames = function(position = 2)",
								"Util.getCaller = function(index = 1, stack)",
								"  f =>",
								"Util.getCallers = function(index = 1, num = Number.MAX_SAFE_INTEGER, stack)",
								"  f =>",
								"Util.getStackFrames = function(offset = 2)",
								"  frame =>",
								"Util.getStackFrame = function(offset = 2)",
								"Util.rotateLeft = function(x, n)",
								"Util.rotateRight = function(x, n)",
								"Util.hashString = function(string, bits = 32, mask = 0xffffffff)",
								"Util.flatTree = function(tree, addOutput)",
								"  addOutput = arg =>",
								"key =>",
								"Util.traverseTree = function(tree, fn, depth = 0, parent = null)",
								"Util.walkTree = function(node, pred, t, depth = 0, parent = null)",
								"()",
								"  pred = i =>",
								"  t = function(i)",
								"Util.isPromise = function(obj)",
								"  setImmediate = fn =>",
								"Util.next = function(iter, observer, prev = undefined)",
								"  val =>",
								"() =>",
								"  err =>",
								"() =>",
								"Util.getImageAverageColor = function(imageElement, options)",
								"  toStringRgb()",
								"  toStringRgba()",
								"  toStringHex()",
								"  toHex = function(d)",
								"Util.jsonToObject = function(jsonStr)",
								"Util.splitLines = function(str, max_linelen = Number.MAX_SAFE_INTEGER)",
								"Util.splitAt = function*(str, ...indexes)",
								"(a, b) =>",
								"Util.decodeEscapes = function(text)",
								"  m =>",
								"([s, t]) =>",
								"Util.stripXML = text =>",
								"Util.stripHTML = html =>",
								"  p =>",
								"  p =>",
								"Util.stripNonPrintable = text =>",
								"Util.decodeHTMLEntities = function(text)",
								"(match, entity) =>",
								"Util.encodeHTMLEntities = (str, charset = '\\u00A0-\\u9999<>&') =>",
								"i =>",
								"Util.stripAnsi = function(str)",
								"Util.proxy = (obj = {}, handler) =>",
								"  get(target, key, receiver)",
								"  set(target, key, value, receiver)",
								"Util.propertyLookup = (obj = {}, handler = key => null) =>",
								"  get(target, key, receiver)",
								"Util.traceProxy = (obj, handler) =>",
								"function(name, args)",
								"  get(target, key, receiver)",
								"  member = function()",
								"Util.proxyTree = function proxyTree(...callbacks)",
								"  applyCallback = () =>",
								"  get(target, key)",
								"  set(target, key, value)",
								"  apply(target, thisArg, args)",
								"  node(path)",
								"() =>",
								"Util.construct = constructor =>",
								"F(args)",
								"F",
								"  constructor",
								"Util.constructApply = (constructor, array) =>",
								"Util.immutable = args =>",
								"  set: () =>",
								"  deleteProperty: () =>",
								"  defineProperty: () =>",
								"Util.immutableClass = (orig, ...proto) =>",
								"  p =>",
								"ctor =>",
								"  ctor",
								"  imm = base =>",
								"  constructor(...args)",
								"Util.partial = function partial(fn /*, arg1, arg2 etc */)",
								"function()",
								"(min, max, value) =>",
								"Util.coloring = (useColor = true) =>",
								"  code(...args)",
								"  text(text)",
								"  concat(...args)",
								"  code(...args)",
								"  text(text, ...color)",
								"  concat(...args)",
								"  code(...args)",
								"  text(text, ...color)",
								"  concat(...args)",
								"Util.colorText = (...args) =>",
								"Util.decodeAnsi = (str, index) =>",
								"  isDigit = c =>",
								"  notDigit = c =>",
								"  findIndex = (pred, start) =>",
								"Util.stripAnsi = str =>",
								"Util.ansiCode = (...args) =>",
								"Util.wordWrap = (str, width, delimiter) =>",
								"Util.multiParagraphWordWrap = (str, width, delimiter) =>",
								"Util.defineInspect = (proto, ...props) =>",
								"function()",
								"(acc, key) =>",
								"(a, b, value) =>",
								"Util.bindProperties = (proxy, target, props, gen) =>",
								"  name =>",
								"(acc, name) =>",
								"p => v =>",
								"  k =>",
								"(a, [k, v]) =>",
								"(...args) =>",
								"(...args) =>",
								"(a, k) =>",
								"  get: () =>",
								"  get: () =>",
								"()",
								"obj =>",
								"  on: val =>",
								"  off: val =>",
								"  true: val =>",
								"  false: val =>",
								"AssertionFailed",
								"  constructor(message, stack)",
								"Util.assert = function assert(val, message)",
								"Util.assertEqual = function assertEqual(val1, val2, message)",
								"Util.assignGlobal = () =>",
								"Util.weakMapper = function(createFn, map = ",
								"(), hitFn)",
								"  self = function(obj, ...args)",
								"  .set = (k, v) =>",
								"  .get = k =>",
								"Util.merge = function(...args)",
								"a =>",
								"a =>",
								"(acc, arg) =>",
								"Util.transformer = (a, ...l) =>",
								"(c, f) =>",
								"function(...v)",
								"Util.copyTextToClipboard = (i, t) =>",
								"  module =>",
								"(a, b, c) =>",
								"() =>",
								"Util.toPlainObject = obj =>",
								"v =>",
								"Util.toBuiltinObject = obj =>",
								"v =>",
								"  t = (v, n) =>",
								"(acc, k) =>",
								"Util.timer = msecs =>",
								"  remaining = () =>",
								"  finish = callback =>",
								"  log = (method, ...args) =>",
								"  obj =>",
								"v =>",
								"  timeout = (msecs, tmr = timer) =>",
								"() =>",
								"(...args) =>",
								"() =>",
								"  add = (arr, ...items) =>",
								"  get delay()",
								"  get created()",
								"  get start()",
								"  get stop()",
								"  get elapsed()",
								"  get end()",
								"  get remain()",
								"  cancel()",
								"  pause()",
								"  .resume = function()",
								"  .restart = function()",
								"  callback(...args)",
								"  subscribe(f)",
								"  unsubscribe(f)",
								"  start = () =>",
								"(resolve, reject) =>",
								"Util.thenableReject = error =>",
								"  then: (resolve, reject) =>",
								"Util.wrapGenerator = fn =>",
								"function(...args)",
								"Util.wrapGeneratorMethods = obj =>",
								"Util.decorateIterable = (proto, generators = false) =>",
								"  forEach(fn, thisArg)",
								"*map(fn, thisArg)",
								"*filter(pred, thisArg)",
								"  findIndex(pred, thisArg)",
								"  indexOf(item, startIndex = -1)",
								"(e, i) =>",
								"  find(pred, thisArg)",
								"  every(pred, thisArg)",
								"  some(pred, thisArg)",
								"  reduce(fn, accu)",
								"*entries()",
								"*keys()",
								"*values()",
								"Util.swap = (a, b) =>",
								"Util.swapArray = ([a, b]) =>",
								"Util.cacheAdapter = (st, defaultOpts = {}) =>",
								"() =>",
								"  c =>",
								"() =>",
								"  getItem(request, opts = {})",
								"  setItem(request, response)",
								"  addItem(request)",
								"  removeItem(request, opts = {})",
								"  key(index)",
								"  keys(urls = false, t = a => a)",
								"  response =>",
								"  r =>",
								"  clear()",
								"Util.cachedFetch = (allOpts = {}) =>",
								"() =>",
								"  self = function CachedFetch(request, opts = {})",
								"(returnValue, fn, ...args) =>",
								"Util.proxyObject = (root, handler) =>",
								"  ptr = path =>",
								"(a, i) =>",
								"(value, path) =>",
								"  get(target, key)",
								"  node(path)",
								"Util.parseXML = function(xmlStr)",
								"() =>",
								"parser =>",
								"  fn = (value, ...args) =>",
								"() =>",
								"map =>",
								"(obj, ...args) =>",
								"() =>",
								"(obj, ...args) =>",
								"  self = (obj, ...args) =>",
								"() =>",
								"() =>",
								"a =>",
								"() =>",
								"() =>",
								"fn =>",
								"() =>",
								"() =>",
								"a =>",
								"() =>",
								"() =>",
								"a =>",
								"() =>",
								"() =>",
								"Util.getOpt = (options = {}, args) =>",
								"  findOpt = arg =>",
								"([optname, option]) =>",
								"  opt =>",
								"() =>",
								"v =>",
								"() =>",
								"() =>",
								"v =>",
								"Util.getEnv = varName =>",
								"() =>",
								"  e =>",
								"() =>",
								"Util.getEnvVars = () =>",
								"() =>",
								"  e =>",
								"() =>",
								"Util.safeFunction = (fn, trapExceptions, thisObj) =>",
								"  function(...args)",
								"function(...args)",
								"a =>",
								"error =>",
								"Util.safeCall = (fn, ...args) =>",
								"Util.safeApply = (fn, args = []) =>",
								"Util.exit = exitCode =>",
								"  stdExit = std =>",
								"() =>",
								"([obj, exit]) =>",
								"() =>",
								"Util.atexit = handler =>",
								"Util.callMain = (fn, trapExceptions) =>",
								"(...args) =>",
								"  ret =>",
								"() =>",
								"err =>",
								"() =>",
								"argv1 =>",
								"Util.printReturnValue = (fn, opts = {}) =>",
								"  print = (returnValue, fn, ...args) =>",
								"  self = (...args) =>",
								"Util.replaceAll = (needles, haystack) =>",
								"([re, str]) =>",
								"(acc, [match, replacement]) =>",
								"Util.quote = (str, q = '\"') =>",
								"Util.escape = (str, pred = codePoint => codePoint < 32 || codePoint > 0xff) =>",
								"Util.escapeRegex = string =>",
								"Util.consolePrinter = function ConsolePrinter(log = console.log)",
								"  self = function(...args)",
								"  .log = (...args) =>",
								"Util.consoleJoin = function(...args)",
								"Util.consoleConcat = function(...args)",
								"  self = function ConsoleConcat(...args)",
								"  clear()",
								"  log = (...args) =>",
								"  print()",
								"  i =>",
								"  output()",
								"  add(...args)",
								"Util.booleanAdapter = (getSetFn, trueValue = 1, falseValue = 0) =>",
								"function(value)",
								"  set = () =>",
								"function(...args)",
								"Util.deriveGetSet = (fn, get = v => v, set = v => v, thisObj) =>",
								"() =>",
								"v =>",
								"  handler = () =>",
								"ExFunc",
								"  constructor()",
								"  __call__(...args)",
								"Util.isatty = fd =>",
								"  mod =>",
								"Util.ttyGetWinSize = (fd = 1) =>",
								"  m =>",
								"(resolve, reject) =>",
								"(resolve, reject) =>",
								"Util.stdio = (fd, mode = true) =>",
								"Util.signal = (num, act) =>",
								"  m =>",
								"() =>",
								"Util.timeit = (fn, args = [], options = {}) =>",
								"(p, c) =>",
								"Util.lazyProperty = (obj, name, getter, opts = {}) =>",
								"  replaceProperty = value =>",
								"  function()",
								"function()",
								"  v =>",
								"Util.lazyProperties = (obj, gettersObj, opts = {}) =>",
								"  f = (a, b) =>",
								"function(a, b)",
								"(a, b) =>",
								"(a, b) =>",
								"() =>",
								"HighResolutionTime",
								"  constructor(secs = 0, nano = 0)",
								"  static create(s, n)",
								"  get seconds()",
								"  get milliseconds()",
								"  get nanoseconds()",
								"  diff(o)",
								"  sum(o)",
								"  since(o)",
								"  toString()",
								"  inspect()",
								"  hrtime(previousTimestamp)",
								"  hrtime(previousTimestamp)",
								"() =>",
								"(minDelay = 0) =>",
								"  resolve =>",
								"  resolve =>",
								"  animationFrame(t)",
								"Util.getNow = () =>",
								"  performanceNow = () =>",
								"  performanceNow = function(clock = CLOCK_MONOTONIC_RAW)",
								"  gettime = (clk_id, tp) =>",
								"Util.formatColumns = a =>",
								"(acc, row, i) =>",
								"(col, j) =>",
								"  row =>",
								"(col, j) =>",
								"Util.getPlatform = () =>",
								"() =>",
								"() =>",
								"() =>",
								"() =>",
								"() =>",
								"() =>",
								"() =>",
								"() =>",
								"Util.colIndexes = line =>",
								"([prev, cols], char, i) =>",
								"Util.colSplit = (line, indexes) =>",
								"  map = (name, flag) =>",
								"(value)",
								"  log = (duration, name, args, ret) =>",
								"(args, ret) =>",
								"(args, ret) =>",
								"  function(...args)",
								"function(...args)",
								"  both = () =>",
								"(name, args) =>",
								"  arg =>",
								"(name, ret) =>",
								"function(...args)",
								"Util.bind = function(f, ...args)",
								"  ret = function()",
								"  ret = function()",
								"  ret",
								"  f",
								"Util.bytesToUTF8 = function*(bytes)",
								"Util.codePointsToString = codePoints =>",
								"Util.bufferToString = b =>",
								"Util.levenshteinDistance = function levenshteinDistance(a, b)",
								"Util.padTrunc = (...args) =>",
								"(s, pad = ' ') =>",
								"Util.setReadHandler = (fd, handler) =>",
								"  os =>"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1741895305.7,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "debugger-server.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 29794,
						"regions":
						{
						},
						"selection":
						[
							[
								13172,
								13143
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 439,
							"rulers":
							[
							],
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1741992179.23,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true,
							"wrap_width": 0
						},
						"translation.x": 0.0,
						"translation.y": 13040.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "CToy-1.05-Linux64-x86_64/tool/build_native/3rdparty/glfw/examples/gears.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9910,
						"regions":
						{
						},
						"selection":
						[
							[
								661,
								661
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 30,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1741996672.83,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "lib/util.js",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 185305,
						"regions":
						{
							"col_000000CC":
							{
								"flags": 16,
								"regions":
								[
									[
										48828,
										48843
									]
								],
								"scope": "col_000000CC"
							},
							"col_000000CC_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_000000CC_circle.png",
								"regions":
								[
									[
										48765,
										48765
									]
								],
								"scope": "col_gutter"
							},
							"col_000050FF":
							{
								"flags": 16,
								"regions":
								[
									[
										135899,
										135910
									]
								],
								"scope": "col_000050FF"
							},
							"col_000050FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_000050FF_circle.png",
								"regions":
								[
									[
										135888,
										135888
									]
								],
								"scope": "col_gutter"
							},
							"col_0000A0FF":
							{
								"flags": 16,
								"regions":
								[
									[
										136107,
										136119
									]
								],
								"scope": "col_0000A0FF"
							},
							"col_0000A0FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_0000A0FF_circle.png",
								"regions":
								[
									[
										136096,
										136096
									]
								],
								"scope": "col_gutter"
							},
							"col_005000FF":
							{
								"flags": 16,
								"regions":
								[
									[
										135848,
										135859
									]
								],
								"scope": "col_005000FF"
							},
							"col_005000FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_005000FF_circle.png",
								"regions":
								[
									[
										135837,
										135837
									]
								],
								"scope": "col_gutter"
							},
							"col_005050FF":
							{
								"flags": 16,
								"regions":
								[
									[
										135950,
										135962
									]
								],
								"scope": "col_005050FF"
							},
							"col_005050FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_005050FF_circle.png",
								"regions":
								[
									[
										135939,
										135939
									]
								],
								"scope": "col_gutter"
							},
							"col_00A000FF":
							{
								"flags": 16,
								"regions":
								[
									[
										136053,
										136065
									]
								],
								"scope": "col_00A000FF"
							},
							"col_00A000FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_00A000FF_circle.png",
								"regions":
								[
									[
										136042,
										136042
									]
								],
								"scope": "col_gutter"
							},
							"col_00A0A0FF":
							{
								"flags": 16,
								"regions":
								[
									[
										136161,
										136175
									]
								],
								"scope": "col_00A0A0FF"
							},
							"col_00A0A0FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_00A0A0FF_circle.png",
								"regions":
								[
									[
										136150,
										136150
									]
								],
								"scope": "col_gutter"
							},
							"col_010101FF":
							{
								"flags": 16,
								"regions":
								[
									[
										49292,
										49297
									],
									[
										126015,
										126020
									],
									[
										135799,
										135809
									],
									[
										136003,
										136013
									]
								],
								"scope": "col_010101FF"
							},
							"col_010101FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_010101FF_circle.png",
								"regions":
								[
									[
										49278,
										49278
									],
									[
										125976,
										125976
									],
									[
										135788,
										135788
									],
									[
										135992,
										135992
									]
								],
								"scope": "col_gutter"
							},
							"col_4444DDFF":
							{
								"flags": 16,
								"regions":
								[
									[
										48879,
										48886
									]
								],
								"scope": "col_4444DDFF"
							},
							"col_4444DDFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_4444DDFF_circle.png",
								"regions":
								[
									[
										48765,
										48765
									]
								],
								"scope": "col_gutter"
							},
							"col_500000FF":
							{
								"flags": 16,
								"regions":
								[
									[
										135823,
										135834
									]
								],
								"scope": "col_500000FF"
							},
							"col_500000FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_500000FF_circle.png",
								"regions":
								[
									[
										135812,
										135812
									]
								],
								"scope": "col_gutter"
							},
							"col_500050FF":
							{
								"flags": 16,
								"regions":
								[
									[
										135924,
										135936
									]
								],
								"scope": "col_500050FF"
							},
							"col_500050FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_500050FF_circle.png",
								"regions":
								[
									[
										135913,
										135913
									]
								],
								"scope": "col_gutter"
							},
							"col_505000FF":
							{
								"flags": 16,
								"regions":
								[
									[
										135873,
										135885
									]
								],
								"scope": "col_505000FF"
							},
							"col_505000FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_505000FF_circle.png",
								"regions":
								[
									[
										135862,
										135862
									]
								],
								"scope": "col_gutter"
							},
							"col_505050FF":
							{
								"flags": 16,
								"regions":
								[
									[
										135976,
										135989
									]
								],
								"scope": "col_505050FF"
							},
							"col_505050FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_505050FF_circle.png",
								"regions":
								[
									[
										135965,
										135965
									]
								],
								"scope": "col_gutter"
							},
							"col_7FFFFFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										122834,
										122844
									]
								],
								"scope": "col_7FFFFFFF"
							},
							"col_7FFFFFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_7FFFFFFF_circle.png",
								"regions":
								[
									[
										122819,
										122819
									]
								],
								"scope": "col_gutter"
							},
							"col_A00000FF":
							{
								"flags": 16,
								"regions":
								[
									[
										136027,
										136039
									]
								],
								"scope": "col_A00000FF"
							},
							"col_A00000FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_A00000FF_circle.png",
								"regions":
								[
									[
										136016,
										136016
									]
								],
								"scope": "col_gutter"
							},
							"col_A000A0FF":
							{
								"flags": 16,
								"regions":
								[
									[
										136133,
										136147
									]
								],
								"scope": "col_A000A0FF"
							},
							"col_A000A0FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_A000A0FF_circle.png",
								"regions":
								[
									[
										136122,
										136122
									]
								],
								"scope": "col_gutter"
							},
							"col_A0A000FF":
							{
								"flags": 16,
								"regions":
								[
									[
										136079,
										136093
									]
								],
								"scope": "col_A0A000FF"
							},
							"col_A0A000FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_A0A000FF_circle.png",
								"regions":
								[
									[
										136068,
										136068
									]
								],
								"scope": "col_gutter"
							},
							"col_A0A0A0FF":
							{
								"flags": 16,
								"regions":
								[
									[
										136189,
										136205
									]
								],
								"scope": "col_A0A0A0FF"
							},
							"col_A0A0A0FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_A0A0A0FF_circle.png",
								"regions":
								[
									[
										136178,
										136178
									]
								],
								"scope": "col_gutter"
							},
							"col_FFFFFFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										122598,
										122608
									],
									[
										126022,
										126027
									]
								],
								"scope": "col_FFFFFFFF"
							},
							"col_FFFFFFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FFFFFFFF_circle.png",
								"regions":
								[
									[
										122545,
										122545
									],
									[
										125976,
										125976
									]
								],
								"scope": "col_gutter"
							}
						},
						"selection":
						[
							[
								844,
								848
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 29,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1741996680.33,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "lib/dom/css.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6945,
						"regions":
						{
						},
						"selection":
						[
							[
								2671,
								2671
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 102,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1741992178.38,
							"tabs_extra_last_activated_sheet_index": 1,
							"tabs_extra_moving":
							[
								3,
								1
							],
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2040.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "lib/bpg/bpgdec8.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21381,
						"regions":
						{
						},
						"selection":
						[
							[
								629,
								648
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 22,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1741989399.35,
							"tabs_extra_last_activated_sheet_index": 2,
							"tabs_extra_moving":
							[
								3,
								1
							],
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1500.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "lib/bpg/bpgdec.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21380,
						"regions":
						{
						},
						"selection":
						[
							[
								8469,
								8562
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 272,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1741989398.52,
							"tabs_extra_last_activated_sheet_index": 3,
							"tabs_extra_moving":
							[
								3,
								1
							],
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5060.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "lib/container/multiMap.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4122,
						"regions":
						{
						},
						"selection":
						[
							[
								27,
								27
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1741989543.7,
							"tabs_extra_last_activated_sheet_index": 4,
							"tabs_extra_moving":
							[
								3,
								1
							],
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "quickjs/qjs-modules/lib/repl.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 62715,
						"regions":
						{
						},
						"selection":
						[
							[
								61787,
								61787
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 2332,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1741989287.1,
							"tabs_extra_last_activated_sheet_index": 6,
							"tabs_extra_moving":
							[
								3,
								1
							],
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 41486.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "debugger-client.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10822,
						"regions":
						{
						},
						"selection":
						[
							[
								10505,
								10505
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 384,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1741989287.37,
							"tabs_extra_last_activated_sheet_index": 7,
							"tabs_extra_moving":
							[
								3,
								1
							],
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6562.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "test-video.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 26264,
						"regions":
						{
						},
						"selection":
						[
							[
								5485,
								5489
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 134,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1741992176.86,
							"tabs_extra_last_activated_sheet_index": 7,
							"tabs_extra_moving":
							[
								3,
								1
							],
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3301.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 29.0
	},
	"input":
	{
		"height": 41.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.8,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 300.0
	},
	"output.Debugger Console":
	{
		"height": 300.0
	},
	"output.exec":
	{
		"height": 138.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "plot-cv.sublime-project",
	"replace":
	{
		"height": 70.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"util.js",
				"lib/util.js"
			],
			[
				"async/deb",
				"lib/async/debounce.js"
			],
			[
				"inspect.c",
				"quickjs/qjs-modules/quickjs-inspect.c"
			],
			[
				"propery",
				"quickjs/qjs-modules/include/property-enumeration.h"
			],
			[
				"roperty",
				"quickjs/qjs-modules/src/property-enumeration.c"
			],
			[
				"property-",
				"quickjs/qjs-modules/include/property-enumeration.h"
			],
			[
				"fs.js",
				"quickjs/qjs-modules/lib/fs.js"
			],
			[
				"repl.js",
				"quickjs/qjs-modules/lib/repl.js"
			],
			[
				"compile_comm",
				"compile_commands.js"
			],
			[
				"lib/compileCom",
				"lib/compileCommand.js"
			],
			[
				"fire.js",
				"fire.js"
			],
			[
				"rpc.js",
				"quickjs/qjs-net/js/rpc.js"
			],
			[
				"draw",
				"draw.js"
			],
			[
				"draw.js",
				"draw.js"
			],
			[
				"async/web",
				"lib/async/websocket.js"
			],
			[
				"websocket",
				"webSocket.js"
			],
			[
				"upload-ser",
				"upload-server.js"
			],
			[
				"test-vide",
				"test-video.js"
			],
			[
				"test-alea",
				"test-alea.js"
			],
			[
				"test-vid",
				"test-video.js"
			],
			[
				"debugger.ht",
				"debugger.html"
			],
			[
				"debugger.js",
				"debugger.js"
			],
			[
				"utils.h",
				"quickjs/qjs-modules/include/utils.h"
			],
			[
				"quickjs-socket",
				"quickjs/qjs-modules/quickjs-sockets.c"
			],
			[
				"debugger-clie",
				"debugger-client.js"
			],
			[
				"debugger-ser",
				"debugger-server.js"
			],
			[
				"test-nanovg",
				"test-nanovg.js"
			],
			[
				"repeater",
				"lib/repeater/repeater.js"
			],
			[
				"repeater.js",
				"lib/repeater/repeater.js"
			],
			[
				"qjsm.c",
				"quickjs/qjs-modules/src/qjsm.c"
			],
			[
				"quickjs.c",
				"quickjs.c"
			],
			[
				"test-repea",
				"test-repeater.js"
			],
			[
				"debugger.htm",
				"debugger.html"
			],
			[
				"debugger",
				"debuggerprotocol.js"
			],
			[
				"portmidi",
				"/usr/include/portmidi.h"
			],
			[
				"portmidi.js",
				"portmidi.js"
			],
			[
				"portmidi.h",
				"/usr/include/portmidi.h"
			],
			[
				"clang-as",
				"clang-ast.js"
			],
			[
				"ast-she",
				"ast-shell.js"
			],
			[
				"-helpers",
				"os-helpers.js"
			],
			[
				"io-helper",
				"io-helpers.js"
			],
			[
				"portaudio.h",
				"/usr/include/portaudio.h"
			],
			[
				"portaudio",
				"portaudio.js"
			],
			[
				"quickjs.h",
				"quickjs/quickjs.h"
			],
			[
				"quickjs-misc",
				"quickjs/qjs-modules/quickjs-misc.c"
			],
			[
				"portaudio.js",
				"portaudio.js"
			],
			[
				"portaudio2.js",
				"portaudio2.js"
			],
			[
				"list.ht",
				"list.html"
			],
			[
				"eagle-she",
				"eagle-shell.js"
			],
			[
				"webka",
				"webakeit-telegram.js"
			],
			[
				"xml-she",
				"quickjs/qjs-modules/xml-shell.js"
			],
			[
				".html",
				"fire.html"
			],
			[
				"numbers2",
				"numbers2.c"
			],
			[
				"main.js",
				"main.js"
			],
			[
				"main",
				"main.js"
			],
			[
				"splines",
				"lib/geom/splines.js"
			],
			[
				"pointList",
				"lib/geom/pointList.js"
			],
			[
				"compon",
				"components.js"
			],
			[
				"ointlist",
				"lib/geom/pointList.js"
			],
			[
				"events.js",
				"lib/async/events.js"
			],
			[
				"point.js",
				"lib/geom/point.js"
			],
			[
				"misc.js",
				"lib/misc.js"
			],
			[
				"draw.css",
				"static/css/draw.css"
			],
			[
				"upload-server",
				"upload-server.js"
			],
			[
				"draw.html",
				"draw.html"
			],
			[
				"autoStore",
				"lib/autoStore.js"
			],
			[
				"resolve-im",
				"quickjs/qjs-modules/resolve-imports.js"
			],
			[
				"svg-box",
				"svg-box.js"
			],
			[
				"fd-graph",
				"lib/fd-graph.js"
			],
			[
				"draw-u",
				"draw-utils.js"
			],
			[
				"draw-util",
				"draw-utils.js"
			],
			[
				"test-nano",
				"test-nanovg.js"
			],
			[
				"fd-gra",
				"lib/fd-graph.js"
			],
			[
				"graph.js",
				"lib/geom/graph.js"
			],
			[
				"eagle-shell",
				"eagle-shell.js"
			],
			[
				"node.js",
				"lib/eagle/node.js"
			],
			[
				"eleme",
				"lib/eagle/element.js"
			],
			[
				"quickjs-mysql.c",
				"quickjs/qjs-modules/quickjs-mysql.c"
			],
			[
				"mailcow-db",
				"mailcow-db.js"
			],
			[
				"wscli.js",
				"quickjs/qjs-net/wscli.js"
			],
			[
				"upload.js",
				"upload.js"
			],
			[
				"workertest",
				"workertest.js"
			],
			[
				"promise-wor",
				"promise-worker.js"
			],
			[
				"test-work",
				"test-worker.js"
			],
			[
				"upload.css",
				"static/css/upload.css"
			],
			[
				"upload.html",
				"upload.html"
			],
			[
				"draw-ut",
				"draw-utils.js"
			],
			[
				"test-nan",
				"test-nanovg.js"
			],
			[
				"cv-shell",
				"cv-shell.js"
			],
			[
				"test-open",
				"test-opencv.js"
			],
			[
				"test-opencv",
				"test-opencv.js"
			],
			[
				"noise.js",
				"noise.js"
			],
			[
				"noise",
				"noise.html"
			],
			[
				"dire",
				"directory.html"
			],
			[
				"upload",
				"upload.html"
			],
			[
				"map.ht",
				"map.html"
			],
			[
				"landing",
				"landing.html"
			],
			[
				"fire",
				"fire.html"
			],
			[
				"filelist",
				"filelist.html"
			],
			[
				"coil",
				"coil.html"
			],
			[
				"inde",
				"index.html"
			],
			[
				"404.ht",
				"404.html"
			],
			[
				"lscac",
				"lib/lscache.js"
			],
			[
				"style.css",
				"style.css"
			],
			[
				"direcot",
				"directory.html"
			],
			[
				"direc",
				"directory.html"
			],
			[
				"smd.js",
				"lib/eagle/components/smd.js"
			],
			[
				"smd.jy",
				"quickjs/qjs-modules/3rdparty/denodrivers-postgres/docs/.nojekyll"
			],
			[
				"via.js",
				"lib/eagle/components/via.js"
			],
			[
				"hole.js",
				"lib/eagle/components/hole.js"
			],
			[
				"eagle2sv",
				"eagle2svg.js"
			],
			[
				"svgRe",
				"lib/eagle/svgRenderer.js"
			],
			[
				"boardre",
				"lib/eagle/boardRenderer.js"
			],
			[
				"polygon",
				"lib/eagle/components/polygon.js"
			],
			[
				"polygon.js",
				"lib/geom/polygon.js"
			],
			[
				"symbol",
				"lib/eagle/components/symbol.js"
			],
			[
				"wire.js",
				"lib/eagle/components/wire.js"
			],
			[
				"components/sym",
				"lib/eagle/components/symbol.js"
			],
			[
				"eagle/ele",
				"lib/eagle/element.js"
			],
			[
				"github-user",
				"github-userscript.js"
			],
			[
				"line.js",
				"lib/geom/line.js"
			],
			[
				"rect.",
				"lib/geom/rect.js"
			],
			[
				"minnet-clie",
				"quickjs/qjs-net/src/minnet-client.c"
			],
			[
				"callbaCK.C",
				"quickjs/qjs-net/lib/callback.c"
			],
			[
				"internal",
				"quickjs/qjs-modules/quickjs-internal.h"
			],
			[
				"utils.c",
				"quickjs/qjs-modules/src/utils.c"
			],
			[
				"eagle2",
				"eagle2gerber.js"
			],
			[
				"pcb-con",
				"pcb-conversion.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 230.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
