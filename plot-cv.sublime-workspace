{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"define",
				"defineProperty"
			],
			[
				"exists",
				"existsAndNotEmpty"
			],
			[
				"RETURN_",
				"RETURN_VALUE_PATH"
			],
			[
				"constr",
				"constructor"
			],
			[
				"RE",
				"deep.RETURN_VALUE_PATH"
			],
			[
				"CXXRec",
				"CXXRecordDecl"
			],
			[
				"CXXReco",
				"CXXRecordDecl"
			],
			[
				"des",
				"desugared"
			],
			[
				"con",
				"constructor"
			],
			[
				"jsm_start_",
				"jsm_start_interactive3"
			],
			[
				"by",
				"byobRequest"
			],
			[
				"Read",
				"ReadableStreamBYOBRequest"
			],
			[
				"js_by",
				"js_readable_byob_request"
			],
			[
				"BY",
				"BYOB_REQUEST_METHOD_RESPONDWITHNEWVIEW"
			],
			[
				"JS_",
				"JS_NewObjectProtoClass"
			],
			[
				"JS_Get",
				"JS_GetPropertyUint32"
			],
			[
				"is_",
				"is_exception"
			],
			[
				"JS_T",
				"JS_ThrowInternalError"
			],
			[
				"Repe",
				"RepeaterItem"
			],
			[
				"WRITER_PROP",
				"WRITER_PROP_READY"
			],
			[
				"JS_Throw",
				"JS_ThrowInternalError"
			],
			[
				"to",
				"toStringTag"
			],
			[
				"Der",
				"DereferenceError"
			],
			[
				"Dere",
				"DereferenceError"
			],
			[
				"Is",
				"IsPunctuator"
			],
			[
				"js_magic_fun",
				"js_magic_function"
			],
			[
				"js_queue_iter",
				"js_queue_iterator_class_id"
			],
			[
				"js_queue_itreat",
				"js_queue_iterator_class_id"
			],
			[
				"js_",
				"js_archive_mode"
			],
			[
				"JS_GetP",
				"JS_GetPropertyStr"
			],
			[
				"JS_Set",
				"JS_SetPropertyUint32"
			],
			[
				"ENTRY_IS",
				"ENTRY_ISDATAENCRYPTED"
			],
			[
				"js_archivema",
				"js_archivematch_class_id"
			],
			[
				"JS_NewObjec",
				"JS_NewObjectProtoClass"
			],
			[
				"Module",
				"ModuleLoaderContext"
			],
			[
				"JS_Th",
				"JS_ThrowTypeError"
			],
			[
				"ModuleLo",
				"ModuleLoaderContext"
			],
			[
				"escape",
				"escape_noquote_tab"
			],
			[
				"max",
				"max_array_length"
			],
			[
				"tty",
				"tty_set_raw"
			],
			[
				"getOwnPrope",
				"getOwnPropertyDescriptor"
			],
			[
				"PATH_SKIP",
				"PATH_SKIP_SEPARATOR"
			],
			[
				"ListIterat",
				"ListIteratorKind"
			],
			[
				"_f",
				"_wfindnext64"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"JS_PROP_",
				"JS_PROP_CONFIGURABLE"
			],
			[
				"JS_GetPr",
				"JS_GetPropertyStr"
			],
			[
				"js_sock",
				"js_sockaddr_data"
			],
			[
				"SET_",
				"SET_CONSOLE_MODE"
			],
			[
				"ERA",
				"ERASE_IN_LINE"
			],
			[
				"js_misc_set",
				"js_misc_settextattr"
			],
			[
				"dw",
				"dwCursorPosition"
			],
			[
				"prop",
				"property_recursion_top"
			],
			[
				"property_enumer",
				"property_enumeration_index"
			],
			[
				"INT",
				"INSPECT_INT32T_INRANGE"
			],
			[
				"js_inspect_print_arra",
				"js_inspect_print_arraybuffer2"
			],
			[
				"is_a",
				"is_arraybuffer"
			],
			[
				"fmt",
				"fmt_ulong"
			],
			[
				"inspec",
				"inspect_newline2"
			],
			[
				"property_",
				"property_recursion_top"
			],
			[
				"js_inspec",
				"js_inspect_print_value"
			],
			[
				"JS_Atom",
				"JS_AtomToValue"
			],
			[
				"mysql_op",
				"mysql_optionsv"
			],
			[
				"MY",
				"MYSQLConnectParameters"
			],
			[
				"js_connect",
				"js_connectparams_class_id"
			],
			[
				"js_conn",
				"js_connectparams_from"
			],
			[
				"MYSQL",
				"MYSQLConnectParameters"
			],
			[
				"mysql_get",
				"mysql_get_socket"
			],
			[
				"async",
				"asyncclosure_resolve"
			],
			[
				"res",
				"resolving_funcs"
			],
			[
				"HAVE_LIB",
				"HAVE_LIBMARIADBCLIENT"
			],
			[
				"js_is_null",
				"js_is_null_or_undefined"
			],
			[
				"FileDesc",
				"FileDescriptorHandlers"
			],
			[
				"js_generat",
				"js_generator_prototype"
			],
			[
				"tab_",
				"tab_atom_len"
			],
			[
				"proper",
				"property_recursion_pop"
			],
			[
				"property_rec",
				"property_recursion_top"
			],
			[
				"property",
				"property_recursion_top"
			],
			[
				"RETURN",
				"deep.RETURN_VALUE_PATH"
			],
			[
				"LIBS",
				"LIBSERIALPORT_LIBRARY_DIR"
			],
			[
				"js_misc_atexit_",
				"js_misc_atexit_called"
			],
			[
				"getO",
				"getOwnPropertyNames(...)"
			],
			[
				"Res",
				"ResolveAlias"
			],
			[
				"relati",
				"relativePath"
			],
			[
				"js_syscla",
				"js_syscallerror_defines"
			],
			[
				"get",
				"getOwnPropertyDescriptor(...)"
			],
			[
				"resol",
				"resolving_funcs"
			],
			[
				"set",
				"set_handler"
			],
			[
				"Async",
				"AsyncSocketClosure"
			],
			[
				"Asy",
				"AsyncSocketClosure"
			],
			[
				"js_socket_async_",
				"js_socket_async_resolver"
			],
			[
				"js_socket_asyc",
				"js_socket_async_closure_free"
			],
			[
				"JS_EV",
				"JS_EVAL_FLAG_COMPILE_ONLY"
			],
			[
				"check_",
				"check_function_and_include"
			],
			[
				"PGCon",
				"PGConnectParameters"
			],
			[
				"PGC",
				"PGConnectParameters"
			],
			[
				"connect",
				"connectparams_parse"
			],
			[
				"Nam",
				"FieldNameFunc"
			],
			[
				"PG",
				"PGSQLResult"
			],
			[
				"js",
				"js_pgresult_class_id"
			],
			[
				"PGSQ",
				"PGSQResultIterator"
			],
			[
				"js_misc_getopa",
				"js_misc_getopaque"
			],
			[
				"js_pgrequ",
				"js_pgresult_opaque"
			],
			[
				"PGRES_PO",
				"PGRES_POLLING_READING"
			],
			[
				"PROP_PRO",
				"PROP_PROTOCOL_VERSION"
			],
			[
				"B",
				"BOOL"
			],
			[
				"Asyn",
				"AsyncIterator"
			],
			[
				"ret",
				"return_flag"
			],
			[
				"ImportID",
				"ImportIdMap"
			],
			[
				"Num",
				"NumericRange"
			],
			[
				"dbuf_",
				"dbuf_init2"
			],
			[
				"getOwn",
				"getOwnPropertyNames(...)"
			],
			[
				"has_",
				"has_dot_or_slash"
			],
			[
				"My",
				"MySQLResult"
			],
			[
				"JS_ToCS",
				"JS_ToCStringLen"
			],
			[
				"CF",
				"CFunctionClosureRecord"
			],
			[
				"extendA",
				"extendAsyncGenerator"
			],
			[
				"JS_SetPr",
				"JS_SetPropertyStr"
			],
			[
				"MYSQL_TYPE_NEW",
				"MYSQL_TYPE_NEWDECIMAL"
			],
			[
				"JS_CF",
				"JS_CFUNC_MAGIC_DEF"
			],
			[
				"js_mysqlresult_fun",
				"js_mysqlresult_functions"
			],
			[
				"JS_ToCSt",
				"JS_ToCStringLen"
			],
			[
				"js_mysql_f",
				"js_mysql_functions"
			],
			[
				"MARIA",
				"MARIADBCLIENT_LIBRARY"
			],
			[
				"depe",
				"dependencyMap"
			],
			[
				"depden",
				"dependencyTree"
			],
			[
				"add_",
				"add_dependencies"
			],
			[
				"ch",
				"chunks_written"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "FetchClass(url)\n  e =>\n  simplifyList = list =>\n([a, b]) =>\n([a]) =>\n  summaryList = summary =>\n  e =>\n([name]) =>\n(a, e) =>\n  makeURL = p =>\n  getURL(name)\n  entry =>\n*keys()\n*values()\n*entries()\n  pred = (k, v) =>\n  pred = (key, value) =>\n  get name()",
			"settings":
			{
				"buffer_size": 253,
				"line_ending": "Unix",
				"name": "ùåÜ Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					1,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AwAAAAAAAAAAAAAAAAAAAAAAAADJCQAAQUJCUkVWSUFURQpNQVgKU1RSCk1BWApTVFIKTUFYClNUUgpTVFIKTUFYCk9VVFBVVF9WQVIKU1RSCkRVTVAKQVJHTgpTRVBBUkFUT1IKU0VQQVJBVE9SClNFUEFSQVRPUgpWQVIKVkFSClZBUgpBClNFUEFSQVRPUgpBClZBUgpBCkFSR04KQ0FOT05JQ0FMSVpFClNUUgpUTVBfU1RSClRNUF9TVFIKT1VUUFVUX1ZBUgpUTVBfU1RSCkJBU0VOQU1FClNUUgpBUkdOClRNUF9TVFIKT1VUUFVUX1ZBUgpUTVBfU1RSCkRJUk5BTUUKU1RSCkFSR04KVE1QX1NUUgpPVVRQVVRfVkFSClRNUF9TVFIKQUREUFJFRklYCk9VVFBVVApBUkdOClBSRUZJWApBUkcKQVJHTgpPVVRQVVRfVkFSCk9VVFBVVApBRERTVUZGSVgKT1VUUFVUCkFSR04KQVJHClNVRkZJWApBUkdOCk9VVFBVVF9WQVIKT1VUUFVUClJFTEFUSVZFX1BBVEgKTElTVApBUkdOClJFTEFUSVZFX1RPCkFSRwpBUkcKQVJHTgpPVVRfVkFSCkxJU1QKQ0hFQ0tfRlVOQ1RJT05fREVGClJFU1VMVF9WQVIKQVJHVjEKUFJFUFJPQ19ERUYKQVJHVjIKRlVOQwpGVU5DCkZVTkMKUkVTVUxUX1ZBUgpSRVNVTFRfVkFSClJFU1VMVF9WQVIKRlVOQwpQUkVQUk9DX0RFRgpQUkVQUk9DX0RFRgpQUkVQUk9DX0RFRgpSRVNVTFRfVkFSCkNIRUNLX0ZVTkNUSU9OUwpBUkdOCkZVTkMKRlVOQwpSRVNVTFRfVkFSCkFSR04KUkVTVUxUX1ZBTFVFCkFSR04KUE9TSVRJVkVfUkVQT1JUClBPU0lUSVZFX1JFUE9SVApQT1NJVElWRV9SRVBPUlQKQVJHTgpORUdBVElWRV9SRVBPUlQKTkVHQVRJVkVfUkVQT1JUCk5FR0FUSVZFX1JFUE9SVApWQVJOQU1FCk9VVFBVVF9WQVIKUE9TSVRJVkVfUkVQT1JUClZBUk5BTUUKT1VUUFVUX1ZBUgpORUdBVElWRV9SRVBPUlQKVkFSTkFNRQpSRVBPUlQKVkFSTkFNRQpBUkdOCk1TRwpSRVBPUlRfUkVTVUxUCkNIRUNLX0xJQlJBUllfRlVOQ1RJT05TCkxJQgpBUkdOCkZVTkMKRlVOQwpGVU5DCkZVTkMKRlVOQwpRVUlDS0pTX0xJQlJBUlkKUkVTVUxUClJFU1VMVApSRVNVTFRfVkFSClJFU1VMVApSRVNVTFQKRlVOQwpMTkFNRQpSCkFSR04KQ0hFQ0tfRlVOQ1RJT05TX0RFRgpBUkdOCkZVTkMKQVJHTgpDTEVBTl9OQU1FClNUUgpTVFIKT1VUUFVUX1ZBUgpTVFIKQ0hFQ0tfSU5DTFVERV9ERUYKUkVTVUxUX1ZBUgpBUkdWMQpQUkVQUk9DX0RFRgpBUkdWMgpJTkMKSU5DX0QKSU5DX0QKSU5DClJFU1VMVF9WQVIKUkVTVUxUX1ZBUgpSRVNVTFRfVkFSCklOQwpQUkVQUk9DX0RFRgpQUkVQUk9DX0RFRgpQUkVQUk9DX0RFRgpSRVNVTFRfVkFSCkNIRUNLX0lOQ0xVREVTCkFSR04KSU5DCklOQwpSRVNVTFRfVkFSCkFSR04KQ0hFQ0tfSU5DTFVERVNfREVGCkFSR04KSU5DCkFSR04KQ0hFQ0tfRlVOQ1RJT05fQU5EX0lOQ0xVREUKSU5DCkZVTkMKSU5DCklOQ19SRVNVTFQKSU5DX1JFU1VMVApJTkNfUkVTVUxUCkZVTkMKRlVOQ19SRVNVTFQKRlVOQ19SRVNVTFQKSU5DX1JFU1VMVApBUFBFTkRfUEFSRU5UCkxJU1QKVkFSCkFSR04KVkFSCkxJU1QKQ09OVEFJTlMKTElTVApWQUxVRQpJTkRFWApSRVNVTFQKSU5ERVgKUkVTVUxUCklOREVYCkxJU1QKSVRFTQpWQUxVRQpSRVNVTFQKSVRFTQpWQUxVRQpMSVNUCk9VVFBVVApSRVNVTFQKQUREX1VOSVFVRQpSRVNVTFQKTElTVApBUkdOCklURU0KSVRFTQpBUkdOCkxJU1QKUkVTVUxUClNZTUxJTksKREVTVERJUgpMSU5LX05BTUUKVEFSR0VUCkNNQUtFX0NPTU1BTkQKVEFSR0VUCkRFU1RESVIKTElOS19OQU1FClJQQVRIX0FQUEVORApBUkdOClZBUgpWQVIKVkFMVUUKVkFSClZBUgpDTUFLRV9JTlNUQUxMX1JQQVRIClZBTFVFClZBUgpBUkdOCkNIRUNLX0ZMQUcKRkxBRwpUTVAKQ01BS0VfUkVRVUlSRURfUVVJRVQKRkxBRwpWQVIKQ01BS0VfUkVRVUlSRURfUVVJRVQKUkVTVUxUClZBUgpGTEFHCkFSR04KRkxBRwpUUllfQ09ERQpSRVNVTFRfVkFSCk9VVFBVVF9WQVIKQ01BS0VfQ1VSUkVOVF9CSU5BUllfRElSCkZJTEUKQ09ERQpDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVIKQ01BS0VfQ1VSUkVOVF9CSU5BUllfRElSCkZJTEUKQ01BS0VfUkVRVUlSRURfRkxBR1MKQ01BS0VfUkVRVUlSRURfREVGSU5JVElPTlMKTERGTEFHUwpMSUJTClJFU1VMVF9WQVIKUkVTVUxUCk9VVFBVVF9WQVIKT1VUUFVUClJFU1VMVF9WQVIKT1VUUFVUX1ZBUgpDSEVDS19FWFRFUk5BTApOQU1FCk5BTUUKTkFNRQpPVVRQVVRfVkFSCkxJQlMKTERGTEFHUwpSVU5fQ09ERQpGTgpDTUFLRV9DVVJSRU5UX0JJTkFSWV9ESVIKUk5ECkZJTEUKRk4KQ09ERQpGTgpGTgpDTUFLRV9SRVFVSVJFRF9GTEFHUwpDTUFLRV9SRVFVSVJFRF9ERUZJTklUSU9OUwpMREZMQUdTCkxJQlMKTE9HCkNPTVBJTEVfT1VUUFVUClJVTl9PVVRQVVQKUkVTVUxUX1ZBUgpDT01QSUxFX1JFU1VMVApPVVRQVVRfVkFSCkNPTVBJTEVfT1VUUFVUCkZOClJVTl9SRVNVTFQKUkVTVUxUX1ZBUgpSVU5fUkVTVUxUClJVTl9SRVNVTFQKUlVOX09VVFBVVApPVVRQVVRfVkFSClJVTl9PVVRQVVQKUlVOX09VVFBVVApGTgpMSUJOQU1FCkZJTEVOQU1FCkxJQk5BTUUKT1VUX1ZBUgpMSUJOQU1FAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					1,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					2,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/container/compositeMap.js",
						"symkeys":
						[
							[
								13,
								25
							],
							[
								30,
								59
							],
							[
								1160,
								1175
							],
							[
								1499,
								1508
							],
							[
								2194,
								2201
							],
							[
								2400,
								2411
							],
							[
								3483,
								3491
							],
							[
								3923,
								3931
							],
							[
								4377,
								4396
							],
							[
								4601,
								4607
							],
							[
								4939,
								4945
							],
							[
								5633,
								5641
							],
							[
								5884,
								5890
							],
							[
								6385,
								6394
							],
							[
								6689,
								6695
							],
							[
								7413,
								7421
							],
							[
								7496,
								7526
							],
							[
								8389,
								8410
							],
							[
								8455,
								8470
							],
							[
								8527,
								8567
							],
							[
								8673,
								8688
							],
							[
								8779,
								8849
							],
							[
								8899,
								8914
							],
							[
								9045,
								9060
							],
							[
								9182,
								9248
							],
							[
								9298,
								9306
							],
							[
								9369,
								9377
							],
							[
								9466,
								9518
							],
							[
								9587,
								9602
							],
							[
								9685,
								9700
							],
							[
								9806,
								9873
							],
							[
								9949,
								9957
							],
							[
								10034,
								10042
							]
						],
						"symlist":
						[
							"CompositeMap",
							"constructor(entries, options)",
							"set(key, value)",
							"(v, k) =>",
							"clear()",
							"delete(key)",
							"has(key)",
							"get(key)",
							"forEach(callbackfn)",
							"keys()",
							"next()",
							"values()",
							"next()",
							"entries()",
							"next()",
							"toJSON()",
							"copySection(maps, key, keyPos)",
							"function copyMap(map)",
							"(value, key) =>",
							"function copyMaps(map, keyLength, level)",
							"(value, key) =>",
							"function recurseForEach(callbackfn, lastKeyPart, map, keyPart, keyPos)",
							"(value, key) =>",
							"(value, key) =>",
							"function recurseForEachValue(callbackfn, lastKeyPart, map, keyPos)",
							"value =>",
							"value =>",
							"function getRecursiveEntries(lastKeyPos, map, level)",
							"(value, key) =>",
							"(value, key) =>",
							"function recursiveEntriesToRecursiveMap(lastKeyPos, entries, level)",
							"entry =>",
							"entry =>"
						]
					},
					"AQAAAAAAAAAAAAAAlwIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					3,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AwAAAAAAAAAAAAAAAAAAAAAAAACXAgAAQ29tcG9zaXRlTWFwCiAgY29uc3RydWN0b3IoZW50cmllcywgb3B0aW9ucykKICBzZXQoa2V5LCB2YWx1ZSkKKHYsIGspID0+CiAgY2xlYXIoKQogIGRlbGV0ZShrZXkpCiAgaGFzKGtleSkKICBnZXQoa2V5KQogIGZvckVhY2goY2FsbGJhY2tmbikKICBrZXlzKCkKICBuZXh0KCkKICB2YWx1ZXMoKQogIG5leHQoKQogIGVudHJpZXMoKQogIG5leHQoKQogIHRvSlNPTigpCiAgY29weVNlY3Rpb24obWFwcywga2V5LCBrZXlQb3MpCiAgY29weU1hcChtYXApCih2YWx1ZSwga2V5KSA9PgogIGNvcHlNYXBzKG1hcCwga2V5TGVuZ3RoLCBsZXZlbCkKKHZhbHVlLCBrZXkpID0+CiAgcmVjdXJzZUZvckVhY2goY2FsbGJhY2tmbiwgbGFzdEtleVBhcnQsIG1hcCwga2V5UGFydCwga2V5UG9zKQoodmFsdWUsIGtleSkgPT4KKHZhbHVlLCBrZXkpID0+CiAgcmVjdXJzZUZvckVhY2hWYWx1ZShjYWxsYmFja2ZuLCBsYXN0S2V5UGFydCwgbWFwLCBrZXlQb3MpCiAgdmFsdWUgPT4KICB2YWx1ZSA9PgogIGdldFJlY3Vyc2l2ZUVudHJpZXMobGFzdEtleVBvcywgbWFwLCBsZXZlbCkKKHZhbHVlLCBrZXkpID0+Cih2YWx1ZSwga2V5KSA9PgogIHJlY3Vyc2l2ZUVudHJpZXNUb1JlY3Vyc2l2ZU1hcChsYXN0S2V5UG9zLCBlbnRyaWVzLCBsZXZlbCkKICBlbnRyeSA9PgogIGVudHJ5ID0+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					4,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					5,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/container/weakStackFrame.js",
						"symkeys":
						[
							[
								75,
								89
							],
							[
								94,
								116
							],
							[
								162,
								181
							],
							[
								281,
								294
							],
							[
								381,
								397
							],
							[
								672,
								677
							],
							[
								717,
								729
							],
							[
								777,
								788
							],
							[
								835,
								858
							],
							[
								1017,
								1031
							]
						],
						"symlist":
						[
							"WeakStackFrame",
							"static create(...args)",
							"constructor(parent)",
							"push(...args)",
							"replace(...args)",
							"pop()",
							"get parent()",
							"get depth()",
							"*ancestors(includeSelf)",
							"WeakStackFrame"
						]
					},
					"AQAAAAAAAAAAAAAArAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					6,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/net/reconnectingWebSocket.js",
						"symkeys":
						[
							[
								112,
								133
							],
							[
								642,
								681
							],
							[
								1045,
								1064
							],
							[
								1243,
								1262
							],
							[
								1439,
								1461
							],
							[
								1639,
								1656
							],
							[
								1827,
								1840
							],
							[
								2094,
								2126
							],
							[
								2172,
								2177
							],
							[
								2816,
								2835
							],
							[
								3044,
								3061
							],
							[
								3369,
								3376
							],
							[
								3648,
								3679
							],
							[
								3704,
								3708
							],
							[
								3853,
								3857
							],
							[
								4029,
								4050
							],
							[
								4152,
								4157
							]
						],
						"symlist":
						[
							"ReconnectingWebSocket",
							"constructor(host, protocols = [], ctor)",
							"onMessage(callback)",
							"onConnect(callback)",
							"onDisconnect(callback)",
							"onError(callback)",
							"send(content)",
							"unsubscribe(eventType, callback)",
							"cb =>",
							"on(event, callback)",
							"rebindCallbacks()",
							"data =>",
							"registerReconnectionListeners()",
							"e =>",
							"e =>",
							"attemptReconnecting()",
							"() =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACsAAAAV2Vha1N0YWNrRnJhbWUKICBzdGF0aWMgY3JlYXRlKC4uLmFyZ3MpCiAgY29uc3RydWN0b3IocGFyZW50KQogIHB1c2goLi4uYXJncykKICByZXBsYWNlKC4uLmFyZ3MpCiAgcG9wKCkKICBnZXQgcGFyZW50KCkKICBnZXQgZGVwdGgoKQoqYW5jZXN0b3JzKGluY2x1ZGVTZWxmKQpXZWFrU3RhY2tGcmFtZQAAAAAAAAAAVQEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					7,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABVAQAAUmVjb25uZWN0aW5nV2ViU29ja2V0CiAgY29uc3RydWN0b3IoaG9zdCwgcHJvdG9jb2xzID0gW10sIGN0b3IpCiAgb25NZXNzYWdlKGNhbGxiYWNrKQogIG9uQ29ubmVjdChjYWxsYmFjaykKICBvbkRpc2Nvbm5lY3QoY2FsbGJhY2spCiAgb25FcnJvcihjYWxsYmFjaykKICBzZW5kKGNvbnRlbnQpCiAgdW5zdWJzY3JpYmUoZXZlbnRUeXBlLCBjYWxsYmFjaykKICBjYiA9PgogIG9uKGV2ZW50LCBjYWxsYmFjaykKICByZWJpbmRDYWxsYmFja3MoKQogIGRhdGEgPT4KICByZWdpc3RlclJlY29ubmVjdGlvbkxpc3RlbmVycygpCiAgZSA9PgogIGUgPT4KICBhdHRlbXB0UmVjb25uZWN0aW5nKCkKKCkgPT4AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					8,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/net/webSocketStream.js",
						"symkeys":
						[
							[
								6,
								25
							],
							[
								226,
								256
							],
							[
								480,
								492
							],
							[
								873,
								878
							],
							[
								965,
								991
							],
							[
								1036,
								1042
							],
							[
								1260,
								1266
							],
							[
								1481,
								1488
							],
							[
								1550,
								1563
							],
							[
								1637,
								1662
							],
							[
								1810,
								1823
							],
							[
								1897,
								1914
							],
							[
								1980,
								2020
							],
							[
								2049,
								2055
							],
							[
								2115,
								2120
							],
							[
								2179,
								2191
							],
							[
								2363,
								2381
							],
							[
								2457,
								2479
							],
							[
								3092,
								3099
							],
							[
								3221,
								3228
							],
							[
								3434,
								3440
							],
							[
								3491,
								3531
							],
							[
								3550,
								3556
							],
							[
								3596,
								3601
							]
						],
						"symlist":
						[
							"WebSocketStreamImpl",
							"constructor(url, options = {})",
							"async (e) =>",
							"() =>",
							"async (resolve, reject) =>",
							"(r) =>",
							"(e) =>",
							" (e) =>",
							"start: (c) =>",
							"cancel: async (reason) =>",
							"start: (c) =>",
							"write: (value) =>",
							"close({ code = 1000, reason = \"\" } = {})",
							"(r) =>",
							"() =>",
							"close: () =>",
							"abort: (reason) =>",
							" ({ code, reason }) =>",
							" (e) =>",
							" (e) =>",
							"(e) =>",
							"close({ code = 1000, reason = \"\" } = {})",
							"(r) =>",
							"() =>"
						]
					},
					"AQAAAAAAAAAAAAAAdAEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					9,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/net/webSocketStream.js",
						"symkeys":
						[
							[
								6,
								25
							],
							[
								226,
								256
							],
							[
								480,
								492
							],
							[
								873,
								878
							],
							[
								965,
								991
							],
							[
								1036,
								1042
							],
							[
								1260,
								1266
							],
							[
								1481,
								1488
							],
							[
								1550,
								1563
							],
							[
								1637,
								1662
							],
							[
								1810,
								1823
							],
							[
								1897,
								1914
							],
							[
								1980,
								2020
							],
							[
								2049,
								2055
							],
							[
								2115,
								2120
							],
							[
								2179,
								2191
							],
							[
								2363,
								2381
							],
							[
								2457,
								2479
							],
							[
								3092,
								3099
							],
							[
								3221,
								3228
							],
							[
								3434,
								3440
							],
							[
								3491,
								3531
							],
							[
								3550,
								3556
							],
							[
								3596,
								3601
							]
						],
						"symlist":
						[
							"WebSocketStreamImpl",
							"constructor(url, options = {})",
							"async (e) =>",
							"() =>",
							"async (resolve, reject) =>",
							"(r) =>",
							"(e) =>",
							" (e) =>",
							"start: (c) =>",
							"cancel: async (reason) =>",
							"start: (c) =>",
							"write: (value) =>",
							"close({ code = 1000, reason = \"\" } = {})",
							"(r) =>",
							"() =>",
							"close: () =>",
							"abort: (reason) =>",
							" ({ code, reason }) =>",
							" (e) =>",
							" (e) =>",
							"(e) =>",
							"close({ code = 1000, reason = \"\" } = {})",
							"(r) =>",
							"() =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB0AQAAV2ViU29ja2V0U3RyZWFtSW1wbAogIGNvbnN0cnVjdG9yKHVybCwgb3B0aW9ucyA9IHt9KQooZSkgPT4KKCkgPT4KKHJlc29sdmUsIHJlamVjdCkgPT4KKHIpID0+CihlKSA9PgooZSkgPT4KICBzdGFydDogKGMpID0+CiAgY2FuY2VsOiAocmVhc29uKSA9PgogIHN0YXJ0OiAoYykgPT4KICB3cml0ZTogKHZhbHVlKSA9PgogIGNsb3NlKHsgY29kZSA9IDEwMDAsIHJlYXNvbiA9ICIiIH0gPSB7fSkKKHIpID0+CigpID0+CiAgY2xvc2U6ICgpID0+CiAgYWJvcnQ6IChyZWFzb24pID0+Cih7IGNvZGUsIHJlYXNvbiB9KSA9PgooZSkgPT4KKGUpID0+CihlKSA9PgogIGNsb3NlKHsgY29kZSA9IDEwMDAsIHJlYXNvbiA9ICIiIH0gPSB7fSkKKHIpID0+CigpID0+AAAAAAAAAAB0AQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					1,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/io-helpers.js",
						"symkeys":
						[
							[
								315,
								339
							],
							[
								533,
								570
							],
							[
								601,
								607
							],
							[
								673,
								686
							],
							[
								717,
								745
							],
							[
								989,
								1011
							],
							[
								1094,
								1127
							],
							[
								1209,
								1221
							],
							[
								1589,
								1621
							],
							[
								1687,
								1717
							],
							[
								1820,
								1851
							],
							[
								1919,
								1932
							],
							[
								2152,
								2160
							],
							[
								2245,
								2273
							],
							[
								2443,
								2484
							],
							[
								2706,
								2750
							],
							[
								2850,
								2881
							],
							[
								3248,
								3291
							],
							[
								3432,
								3480
							],
							[
								3793,
								3825
							],
							[
								3932,
								3972
							],
							[
								4134,
								4163
							],
							[
								4284,
								4317
							],
							[
								4378,
								4414
							],
							[
								4482,
								4509
							],
							[
								4562,
								4603
							],
							[
								4629,
								4638
							],
							[
								4680,
								4705
							],
							[
								4831,
								4841
							],
							[
								4959,
								4964
							],
							[
								5064,
								5074
							],
							[
								5151,
								5166
							],
							[
								5237,
								5251
							],
							[
								5371,
								5418
							],
							[
								5826,
								5857
							],
							[
								6285,
								6315
							],
							[
								6347,
								6365
							],
							[
								6484,
								6490
							]
						],
						"symlist":
						[
							" function IfDebug(token)",
							" function LogIfDebug(token, loggerFn)",
							" () =>",
							" (...args) =>",
							" function ReadFd(fd, binary)",
							" function IsStdio(obj)",
							" function ReadClose(file, binary)",
							"function* ()",
							" function ReadFile(name, binary)",
							" function ReadAny(obj, binary)",
							" function LoadHistory(filename)",
							"parse = () =>",
							"entry =>",
							" function ReadJSON(filename)",
							"async function ReadXML(filename, ...args)",
							"async function WriteXML(name, data, ...args)",
							" function WriteFile(file, data)",
							" function WriteFd(fd, data, offset, length)",
							" function WriteClose(file, data, offset, length)",
							" function WriteAny(obj, ...args)",
							" function WriteJSON(name, data, ...args)",
							" function ReadBJSON(filename)",
							" function WriteBJSON(name, value)",
							" function* Filter(gen, regEx = /.*/)",
							" function FilterImages(gen)",
							" function SortFiles(arr, field = 'ctime')",
							"(a, b) =>",
							" function* StatFiles(gen)",
							"toString()",
							"() =>",
							"toString()",
							"get landscape()",
							"get portrait()",
							"async function* FdReader(fd, bufferSize = 1024)",
							" function CopyToClipboard(text)",
							" function LogCall(fn, thisObj)",
							" function(...args)",
							"arg =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB0AQAAV2ViU29ja2V0U3RyZWFtSW1wbAogIGNvbnN0cnVjdG9yKHVybCwgb3B0aW9ucyA9IHt9KQooZSkgPT4KKCkgPT4KKHJlc29sdmUsIHJlamVjdCkgPT4KKHIpID0+CihlKSA9PgooZSkgPT4KICBzdGFydDogKGMpID0+CiAgY2FuY2VsOiAocmVhc29uKSA9PgogIHN0YXJ0OiAoYykgPT4KICB3cml0ZTogKHZhbHVlKSA9PgogIGNsb3NlKHsgY29kZSA9IDEwMDAsIHJlYXNvbiA9ICIiIH0gPSB7fSkKKHIpID0+CigpID0+CiAgY2xvc2U6ICgpID0+CiAgYWJvcnQ6IChyZWFzb24pID0+Cih7IGNvZGUsIHJlYXNvbiB9KSA9PgooZSkgPT4KKGUpID0+CihlKSA9PgogIGNsb3NlKHsgY29kZSA9IDEwMDAsIHJlYXNvbiA9ICIiIH0gPSB7fSkKKHIpID0+CigpID0+AAAAAAAAAADwAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					2,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/ast-shell.js",
						"symkeys":
						[
							[
								2133,
								2137
							],
							[
								2196,
								2200
							],
							[
								2236,
								2266
							],
							[
								2309,
								2330
							],
							[
								2479,
								2505
							],
							[
								2663,
								2682
							],
							[
								3011,
								3039
							],
							[
								3329,
								3337
							],
							[
								3338,
								3352
							],
							[
								3434,
								3444
							],
							[
								3507,
								3555
							],
							[
								3669,
								3678
							],
							[
								3788,
								3810
							],
							[
								4272,
								4294
							],
							[
								4658,
								4676
							],
							[
								4776,
								4794
							],
							[
								4900,
								4926
							],
							[
								5062,
								5066
							],
							[
								5145,
								5161
							],
							[
								5653,
								5672
							],
							[
								6171,
								6176
							],
							[
								6251,
								6266
							],
							[
								6351,
								6359
							],
							[
								6400,
								6408
							],
							[
								6780,
								6853
							],
							[
								6857,
								6865
							],
							[
								6962,
								6992
							],
							[
								7024,
								7029
							],
							[
								7062,
								7069
							],
							[
								7099,
								7127
							],
							[
								7470,
								7477
							],
							[
								7496,
								7519
							],
							[
								7549,
								7556
							],
							[
								7587,
								7595
							],
							[
								7633,
								7640
							],
							[
								7849,
								7862
							],
							[
								8093,
								8136
							],
							[
								8169,
								8178
							],
							[
								8239,
								8243
							],
							[
								8345,
								8349
							],
							[
								8385,
								8399
							],
							[
								8511,
								8539
							],
							[
								8744,
								8769
							],
							[
								8867,
								8891
							],
							[
								8964,
								8968
							],
							[
								9087,
								9091
							],
							[
								9155,
								9169
							],
							[
								9242,
								9251
							],
							[
								9565,
								9579
							],
							[
								9702,
								9737
							],
							[
								9826,
								9831
							],
							[
								9954,
								9966
							],
							[
								10019,
								10044
							],
							[
								10093,
								10104
							],
							[
								10144,
								10155
							],
							[
								10293,
								10304
							],
							[
								10392,
								10405
							],
							[
								10486,
								10518
							],
							[
								10756,
								10785
							],
							[
								10796,
								10811
							],
							[
								10873,
								10892
							],
							[
								11100,
								11139
							],
							[
								11204,
								11244
							],
							[
								11327,
								11371
							],
							[
								11453,
								11492
							],
							[
								11554,
								11592
							],
							[
								11678,
								11706
							],
							[
								11769,
								11796
							],
							[
								12347,
								12373
							],
							[
								12640,
								12647
							],
							[
								14563,
								14621
							],
							[
								15657,
								15664
							],
							[
								15728,
								15735
							],
							[
								15745,
								15756
							],
							[
								15797,
								15823
							],
							[
								15939,
								15953
							],
							[
								16250,
								16269
							],
							[
								16296,
								16303
							],
							[
								16392,
								16422
							],
							[
								16488,
								16528
							],
							[
								16704,
								16755
							],
							[
								17744,
								17751
							],
							[
								18159,
								18185
							],
							[
								18431,
								18485
							],
							[
								18674,
								18686
							],
							[
								18714,
								18726
							],
							[
								19343,
								19403
							],
							[
								20014,
								20069
							],
							[
								20165,
								20177
							],
							[
								20182,
								20212
							],
							[
								20493,
								20515
							],
							[
								20561,
								20584
							],
							[
								20656,
								20671
							],
							[
								20806,
								20822
							],
							[
								21226,
								21239
							],
							[
								21364,
								21383
							],
							[
								21435,
								21443
							],
							[
								21500,
								21515
							],
							[
								21675,
								21687
							],
							[
								22032,
								22046
							],
							[
								22146,
								22163
							],
							[
								22390,
								22412
							],
							[
								22529,
								22554
							],
							[
								22654,
								22671
							],
							[
								22726,
								22730
							],
							[
								22818,
								22822
							],
							[
								22874,
								22898
							],
							[
								23014,
								23054
							],
							[
								23115,
								23136
							],
							[
								23420,
								23452
							],
							[
								23937,
								23952
							],
							[
								24063,
								24088
							],
							[
								24257,
								24292
							],
							[
								24512,
								24519
							],
							[
								24608,
								24615
							],
							[
								24644,
								24653
							],
							[
								24690,
								24699
							],
							[
								24749,
								24757
							],
							[
								24799,
								24823
							],
							[
								24924,
								24940
							],
							[
								24980,
								25020
							],
							[
								25318,
								25361
							],
							[
								26323,
								26334
							],
							[
								27087,
								27137
							],
							[
								27159,
								27185
							],
							[
								27220,
								27249
							],
							[
								27593,
								27636
							],
							[
								27707,
								27717
							],
							[
								27756,
								27760
							],
							[
								27776,
								27780
							],
							[
								27825,
								27912
							],
							[
								28079,
								28112
							],
							[
								28170,
								28175
							],
							[
								28245,
								28287
							],
							[
								28365,
								28375
							],
							[
								28481,
								28521
							],
							[
								28665,
								28670
							],
							[
								28730,
								28743
							],
							[
								28866,
								28870
							],
							[
								28948,
								28952
							],
							[
								29105,
								29112
							],
							[
								29209,
								29214
							],
							[
								29305,
								29321
							],
							[
								29432,
								29439
							],
							[
								29518,
								29522
							],
							[
								29582,
								29589
							],
							[
								29665,
								29672
							],
							[
								29729,
								29775
							],
							[
								29814,
								29824
							],
							[
								29980,
								30016
							],
							[
								30057,
								30069
							],
							[
								31712,
								31733
							],
							[
								31970,
								32010
							],
							[
								32148,
								32177
							],
							[
								32203,
								32232
							],
							[
								32425,
								32435
							],
							[
								32649,
								32659
							],
							[
								32796,
								32806
							],
							[
								33025,
								33035
							],
							[
								33248,
								33252
							],
							[
								33320,
								33324
							],
							[
								35573,
								35592
							],
							[
								38856,
								38888
							],
							[
								39381,
								39391
							],
							[
								39441,
								39451
							],
							[
								39499,
								39509
							],
							[
								40087,
								40098
							],
							[
								40192,
								40196
							],
							[
								40223,
								40227
							],
							[
								40251,
								40255
							],
							[
								40279,
								40283
							],
							[
								40312,
								40349
							],
							[
								40788,
								40833
							],
							[
								40930,
								40964
							],
							[
								41249,
								41277
							],
							[
								41343,
								41357
							],
							[
								41810,
								41827
							],
							[
								41902,
								41919
							],
							[
								42013,
								42042
							],
							[
								42109,
								42132
							],
							[
								42240,
								42245
							],
							[
								42357,
								42380
							],
							[
								42468,
								42473
							],
							[
								42575,
								42587
							],
							[
								42702,
								42707
							],
							[
								42763,
								42792
							],
							[
								43133,
								43147
							],
							[
								44299,
								44357
							],
							[
								45371,
								45382
							],
							[
								45415,
								45426
							],
							[
								45475,
								45481
							],
							[
								45534,
								45542
							],
							[
								45840,
								45844
							],
							[
								46549,
								46555
							]
						],
						"symlist":
						[
							"d =>",
							"d =>",
							"traceProxy = (obj, handler) =>",
							" function(name, args)",
							"get(target, key, receiver)",
							"member = function()",
							"ConcatIterator = iterator =>",
							" gen =>",
							" (...args) =>",
							"toString()",
							"async function ImportModule(modulePath, ...args)",
							"module =>",
							" (acc, item) =>",
							"function CommandLine()",
							" (...args) =>",
							" (...args) =>",
							" (module, ...args) =>",
							"m =>",
							".show = value =>",
							".printNode = arg =>",
							"() =>",
							"(item, i, a) =>",
							"entry =>",
							"entry =>",
							"function* IncludeAll(dir, maxDepth = Infinity, pred = entry => /\\.[ch]$/.",
							"(entry))",
							"function SelectLocations(node)",
							" n =>",
							"prop =>",
							"function LocationString(loc)",
							"node =>",
							"function Structs(nodes)",
							"node =>",
							"field =>",
							"node =>",
							"(field, i) =>",
							"function Table(list, pred = (n, l) => true)",
							"(n, i) =>",
							"e =>",
							"k =>",
							"([i, l, n]) =>",
							" function returnType(n)",
							" function numArgs(n)",
							" function Params(n)",
							"p =>",
							"k =>",
							"([i, l, n]) =>",
							"(k, j) =>",
							"(acc, name) =>",
							" function padTrunc(len, pad = ' ')",
							" s =>",
							"(name, i) =>",
							"pad = (cols, pad, sep) =>",
							"(key, i) =>",
							"(s, col) =>",
							"(acc, n) =>",
							"(acc, row) =>",
							"function PrintRange(range, file)",
							"function OverlapRange(r1, r2)",
							"GetRange = r =>",
							"InRange = (i, r) =>",
							"function ParentNode(node, ast = $.data)",
							"function NextSibling(node, ast = $.data)",
							"function PreviousSibling(node, ast = $.data)",
							"function FirstChild(node, ast = $.data)",
							"function LastChild(node, ast = $.data)",
							"function Terminate(exitCode)",
							"function ParseStructs(text)",
							"function* (decl, includes)",
							"name =>",
							"function InspectStruct(decl, includes, compiler = 'clang')",
							"line =>",
							"line =>",
							"(col, i) =>",
							"([field, offset, size]) =>",
							"(acc, line) =>",
							"toString(sep = ' ')",
							"line =>",
							"function RoundTo(value, align)",
							"function MakeStructClass(decl, filename)",
							"function* GenerateStructClass(decl, ffiPrefix = '')",
							"line =>",
							" ([field, member]) =>",
							"function GenerateGetSet(name, offset, type, ffiPrefix)",
							"toHex = v =>",
							"toHex = v =>",
							"function ByteLength2TypedArray(byteLength, signed, floating)",
							"function ByteLength2Value(byteLength, signed, floating)",
							"FFI_Function",
							"constructor(node, prefix = '')",
							"([name, type], idx) =>",
							"generateDefine(fp, lib)",
							" (name, lib) =>",
							"colorText = x =>",
							"generateDoc()",
							"push = (...args) =>",
							"field =>",
							"(field, col) =>",
							"js = type =>",
							"generateCall()",
							"([name, type]) =>",
							"generate(fp, lib, exp)",
							"generateFunction(fp, lib)",
							"([name, type]) =>",
							"p =>",
							"p =>",
							"compileFunction(fp, lib)",
							"function FdReader(fd, bufferSize = 1024)",
							"async (push, stop) =>",
							"async function CommandRead(args)",
							"async reader =>",
							" function ReadOutput(fd)",
							"async function LibraryExports(file)",
							"line =>",
							"line =>",
							"column =>",
							"(a, b) =>",
							"entry =>",
							"function SaveLibraries()",
							"(acc, [n, e]) =>",
							"function ProcessFile(file, debug = true)",
							"function ParseECMAScript(file, params = {})",
							" (fr, i) =>",
							"function PrintECMAScript(ast, comments, printer = ",
							"({ indent: 4 }, comments))",
							"function PrintCArray(strings)",
							"function Namespaces(nodePath, ast = $.data)",
							"get = p =>",
							"p =>",
							"n =>",
							"function* Constants(node, t = (name, value) => [name, !isNaN(+value) ? +value : value])",
							"function GetImports(ast = $.data)",
							" n =>",
							"function GetIdentifiers(nodes, key = null)",
							" (n, k) =>",
							"function MemberNames(members, flags = 0)",
							" n =>",
							" path =>",
							"p =>",
							"p =>",
							"name =>",
							" n =>",
							"([node, ptr]) =>",
							"path =>",
							"p =>",
							"name =>",
							"name =>",
							"function UnsetLoc(node, pred = (v, p) => true)",
							" (v, k) =>",
							"function MakeFFI(node, lib, exp, fp)",
							"function* ()",
							"function MakeId(name)",
							"function MakeQuickJSClass(node, ast = $)",
							" (cname, vname = 'ptr') =>",
							" (cname, vname = 'ptr') =>",
							" n =>",
							" n =>",
							" n =>",
							" n =>",
							"n =>",
							"n =>",
							"to_jstype = type =>",
							"async function ASTShell(...args)",
							" (a, p) =>",
							" (a, p) =>",
							" (a, p) =>",
							"get flags()",
							"v =>",
							"v =>",
							"d =>",
							"l =>",
							"async function Compile(file, ...args)",
							"select(name_or_id, pred = n => true, ...args)",
							"getByIdOrName(name_or_id, ...args)",
							"function getType(name_or_id)",
							" n =>",
							"predicate = () =>",
							"namespaceOf(node)",
							"function getClass(name_or_id)",
							"getFunction(name_or_id)",
							" n =>",
							"getVariable(name_or_id)",
							" n =>",
							"getLoc(node)",
							"() =>",
							"pathOf(needle, maxDepth = 10)",
							" n =>",
							"Pointer.prototype.chain = function(step, limit = Infinity)",
							".F = arg =>",
							".T = arg =>",
							" () =>",
							" node =>",
							"s =>",
							" fr =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADwAgAASWZEZWJ1Zyh0b2tlbikKTG9nSWZEZWJ1Zyh0b2tlbiwgbG9nZ2VyRm4pCigpID0+CiguLi5hcmdzKSA9PgpSZWFkRmQoZmQsIGJpbmFyeSkKSXNTdGRpbyhvYmopClJlYWRDbG9zZShmaWxlLCBiaW5hcnkpCigpClJlYWRGaWxlKG5hbWUsIGJpbmFyeSkKUmVhZEFueShvYmosIGJpbmFyeSkKTG9hZEhpc3RvcnkoZmlsZW5hbWUpCiAgcGFyc2UgPSAoKSA9PgogIGVudHJ5ID0+ClJlYWRKU09OKGZpbGVuYW1lKQpSZWFkWE1MKGZpbGVuYW1lLCAuLi5hcmdzKQpXcml0ZVhNTChuYW1lLCBkYXRhLCAuLi5hcmdzKQpXcml0ZUZpbGUoZmlsZSwgZGF0YSkKV3JpdGVGZChmZCwgZGF0YSwgb2Zmc2V0LCBsZW5ndGgpCldyaXRlQ2xvc2UoZmlsZSwgZGF0YSwgb2Zmc2V0LCBsZW5ndGgpCldyaXRlQW55KG9iaiwgLi4uYXJncykKV3JpdGVKU09OKG5hbWUsIGRhdGEsIC4uLmFyZ3MpClJlYWRCSlNPTihmaWxlbmFtZSkKV3JpdGVCSlNPTihuYW1lLCB2YWx1ZSkKRmlsdGVyKGdlbiwgcmVnRXggPSAvLiovKQpGaWx0ZXJJbWFnZXMoZ2VuKQpTb3J0RmlsZXMoYXJyLCBmaWVsZCA9ICdjdGltZScpCihhLCBiKSA9PgpTdGF0RmlsZXMoZ2VuKQogIHRvU3RyaW5nKCkKKCkgPT4KICB0b1N0cmluZygpCiAgZ2V0IGxhbmRzY2FwZSgpCiAgZ2V0IHBvcnRyYWl0KCkKRmRSZWFkZXIoZmQsIGJ1ZmZlclNpemUgPSAxMDI0KQpDb3B5VG9DbGlwYm9hcmQodGV4dCkKTG9nQ2FsbChmbiwgdGhpc09iaikKZnVuY3Rpb24oLi4uYXJncykKICBhcmcgPT4AAAAAAAAAAI0NAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					3,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/mozdev.js",
						"symkeys":
						[
							[
								137,
								162
							],
							[
								643,
								647
							],
							[
								679,
								701
							],
							[
								722,
								733
							],
							[
								790,
								798
							],
							[
								844,
								868
							],
							[
								938,
								942
							],
							[
								1024,
								1035
							],
							[
								1111,
								1120
							],
							[
								1228,
								1242
							],
							[
								1315,
								1327
							],
							[
								1489,
								1497
							],
							[
								1817,
								1824
							],
							[
								1886,
								1895
							],
							[
								1963,
								1973
							],
							[
								2065,
								2081
							],
							[
								2162,
								2184
							],
							[
								2351,
								2361
							]
						],
						"symlist":
						[
							" function FetchClass(url)",
							"e =>",
							"simplifyList = list =>",
							"([a, b]) =>",
							"([a]) =>",
							"summaryList = summary =>",
							"e =>",
							"([name]) =>",
							"(a, e) =>",
							"makeURL = p =>",
							"getURL(name)",
							"entry =>",
							"*keys()",
							"*values()",
							"*entries()",
							"pred = (k, v) =>",
							"pred = (key, value) =>",
							"get name()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACNDQAAICBkID0+CiAgZCA9PgogIHRyYWNlUHJveHkgPSAob2JqLCBoYW5kbGVyKSA9PgpmdW5jdGlvbihuYW1lLCBhcmdzKQogIGdldCh0YXJnZXQsIGtleSwgcmVjZWl2ZXIpCiAgbWVtYmVyID0gZnVuY3Rpb24oKQpDb25jYXRJdGVyYXRvciA9IGl0ZXJhdG9yID0+CmdlbiA9PgooLi4uYXJncykgPT4KICB0b1N0cmluZygpCkltcG9ydE1vZHVsZShtb2R1bGVQYXRoLCAuLi5hcmdzKQogIG1vZHVsZSA9PgooYWNjLCBpdGVtKSA9PgpDb21tYW5kTGluZSgpCiguLi5hcmdzKSA9PgooLi4uYXJncykgPT4KKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSB2YWx1ZSA9PgogIC5wcmludE5vZGUgPSBhcmcgPT4KKCkgPT4KKGl0ZW0sIGksIGEpID0+CiAgZW50cnkgPT4KICBlbnRyeSA9PgpJbmNsdWRlQWxsKGRpciwgbWF4RGVwdGggPSBJbmZpbml0eSwgcHJlZCA9IGVudHJ5ID0+IC9cLltjaF0kLy4KKGVudHJ5KSkKU2VsZWN0TG9jYXRpb25zKG5vZGUpCm4gPT4KICBwcm9wID0+CkxvY2F0aW9uU3RyaW5nKGxvYykKICBub2RlID0+ClN0cnVjdHMobm9kZXMpCiAgbm9kZSA9PgogIGZpZWxkID0+CiAgbm9kZSA9PgooZmllbGQsIGkpID0+ClRhYmxlKGxpc3QsIHByZWQgPSAobiwgbCkgPT4gdHJ1ZSkKKG4sIGkpID0+CiAgZSA9PgogIGsgPT4KKFtpLCBsLCBuXSkgPT4KICByZXR1cm5UeXBlKG4pCiAgbnVtQXJncyhuKQpQYXJhbXMobikKICBwID0+CiAgayA9PgooW2ksIGwsIG5dKSA9PgooaywgaikgPT4KKGFjYywgbmFtZSkgPT4KICBwYWRUcnVuYyhsZW4sIHBhZCA9ICcgJykKcyA9PgoobmFtZSwgaSkgPT4KICBwYWQgPSAoY29scywgcGFkLCBzZXApID0+CihrZXksIGkpID0+CihzLCBjb2wpID0+CihhY2MsIG4pID0+CihhY2MsIHJvdykgPT4KUHJpbnRSYW5nZShyYW5nZSwgZmlsZSkKT3ZlcmxhcFJhbmdlKHIxLCByMikKR2V0UmFuZ2UgPSByID0+CkluUmFuZ2UgPSAoaSwgcikgPT4KUGFyZW50Tm9kZShub2RlLCBhc3QgPSAkLmRhdGEpCk5leHRTaWJsaW5nKG5vZGUsIGFzdCA9ICQuZGF0YSkKUHJldmlvdXNTaWJsaW5nKG5vZGUsIGFzdCA9ICQuZGF0YSkKRmlyc3RDaGlsZChub2RlLCBhc3QgPSAkLmRhdGEpCkxhc3RDaGlsZChub2RlLCBhc3QgPSAkLmRhdGEpClRlcm1pbmF0ZShleGl0Q29kZSkKUGFyc2VTdHJ1Y3RzKHRleHQpCihkZWNsLCBpbmNsdWRlcykKICBuYW1lID0+Ckluc3BlY3RTdHJ1Y3QoZGVjbCwgaW5jbHVkZXMsIGNvbXBpbGVyID0gJ2NsYW5nJykKICBsaW5lID0+CiAgbGluZSA9PgooY29sLCBpKSA9PgooW2ZpZWxkLCBvZmZzZXQsIHNpemVdKSA9PgooYWNjLCBsaW5lKSA9PgogIHRvU3RyaW5nKHNlcCA9ICcgJykKICBsaW5lID0+ClJvdW5kVG8odmFsdWUsIGFsaWduKQpNYWtlU3RydWN0Q2xhc3MoZGVjbCwgZmlsZW5hbWUpCkdlbmVyYXRlU3RydWN0Q2xhc3MoZGVjbCwgZmZpUHJlZml4ID0gJycpCiAgbGluZSA9PgooW2ZpZWxkLCBtZW1iZXJdKSA9PgpHZW5lcmF0ZUdldFNldChuYW1lLCBvZmZzZXQsIHR5cGUsIGZmaVByZWZpeCkKICB0b0hleCA9IHYgPT4KICB0b0hleCA9IHYgPT4KQnl0ZUxlbmd0aDJUeXBlZEFycmF5KGJ5dGVMZW5ndGgsIHNpZ25lZCwgZmxvYXRpbmcpCkJ5dGVMZW5ndGgyVmFsdWUoYnl0ZUxlbmd0aCwgc2lnbmVkLCBmbG9hdGluZykKRkZJX0Z1bmN0aW9uCiAgY29uc3RydWN0b3Iobm9kZSwgcHJlZml4ID0gJycpCihbbmFtZSwgdHlwZV0sIGlkeCkgPT4KICBnZW5lcmF0ZURlZmluZShmcCwgbGliKQoobmFtZSwgbGliKSA9PgogIGNvbG9yVGV4dCA9IHggPT4KICBnZW5lcmF0ZURvYygpCiAgcHVzaCA9ICguLi5hcmdzKSA9PgogIGZpZWxkID0+CihmaWVsZCwgY29sKSA9PgogIGpzID0gdHlwZSA9PgogIGdlbmVyYXRlQ2FsbCgpCihbbmFtZSwgdHlwZV0pID0+CiAgZ2VuZXJhdGUoZnAsIGxpYiwgZXhwKQogIGdlbmVyYXRlRnVuY3Rpb24oZnAsIGxpYikKKFtuYW1lLCB0eXBlXSkgPT4KICBwID0+CiAgcCA9PgogIGNvbXBpbGVGdW5jdGlvbihmcCwgbGliKQpGZFJlYWRlcihmZCwgYnVmZmVyU2l6ZSA9IDEwMjQpCihwdXNoLCBzdG9wKSA9PgpDb21tYW5kUmVhZChhcmdzKQogIHJlYWRlciA9PgpSZWFkT3V0cHV0KGZkKQpMaWJyYXJ5RXhwb3J0cyhmaWxlKQogIGxpbmUgPT4KICBsaW5lID0+CiAgY29sdW1uID0+CihhLCBiKSA9PgogIGVudHJ5ID0+ClNhdmVMaWJyYXJpZXMoKQooYWNjLCBbbiwgZV0pID0+ClByb2Nlc3NGaWxlKGZpbGUsIGRlYnVnID0gdHJ1ZSkKUGFyc2VFQ01BU2NyaXB0KGZpbGUsIHBhcmFtcyA9IHt9KQooZnIsIGkpID0+ClByaW50RUNNQVNjcmlwdChhc3QsIGNvbW1lbnRzLCBwcmludGVyID0gCih7IGluZGVudDogNCB9LCBjb21tZW50cykpClByaW50Q0FycmF5KHN0cmluZ3MpCk5hbWVzcGFjZXMobm9kZVBhdGgsIGFzdCA9ICQuZGF0YSkKICBnZXQgPSBwID0+CiAgcCA9PgogIG4gPT4KQ29uc3RhbnRzKG5vZGUsIHQgPSAobmFtZSwgdmFsdWUpID0+IFtuYW1lLCAhaXNOYU4oK3ZhbHVlKSA/ICt2YWx1ZSA6IHZhbHVlXSkKR2V0SW1wb3J0cyhhc3QgPSAkLmRhdGEpCm4gPT4KR2V0SWRlbnRpZmllcnMobm9kZXMsIGtleSA9IG51bGwpCihuLCBrKSA9PgpNZW1iZXJOYW1lcyhtZW1iZXJzLCBmbGFncyA9IDApCm4gPT4KcGF0aCA9PgogIHAgPT4KICBwID0+CiAgbmFtZSA9PgpuID0+Cihbbm9kZSwgcHRyXSkgPT4KICBwYXRoID0+CiAgcCA9PgogIG5hbWUgPT4KICBuYW1lID0+ClVuc2V0TG9jKG5vZGUsIHByZWQgPSAodiwgcCkgPT4gdHJ1ZSkKKHYsIGspID0+Ck1ha2VGRkkobm9kZSwgbGliLCBleHAsIGZwKQooKQpNYWtlSWQobmFtZSkKTWFrZVF1aWNrSlNDbGFzcyhub2RlLCBhc3QgPSAkKQooY25hbWUsIHZuYW1lID0gJ3B0cicpID0+CihjbmFtZSwgdm5hbWUgPSAncHRyJykgPT4KbiA9PgpuID0+Cm4gPT4KbiA9PgogIG4gPT4KICBuID0+CiAgdG9fanN0eXBlID0gdHlwZSA9PgpBU1RTaGVsbCguLi5hcmdzKQooYSwgcCkgPT4KKGEsIHApID0+CihhLCBwKSA9PgogIGdldCBmbGFncygpCiAgdiA9PgogIHYgPT4KICBkID0+CiAgbCA9PgpDb21waWxlKGZpbGUsIC4uLmFyZ3MpCiAgc2VsZWN0KG5hbWVfb3JfaWQsIHByZWQgPSBuID0+IHRydWUsIC4uLmFyZ3MpCiAgZ2V0QnlJZE9yTmFtZShuYW1lX29yX2lkLCAuLi5hcmdzKQogIGdldFR5cGUobmFtZV9vcl9pZCkKbiA9PgogIHByZWRpY2F0ZSA9ICgpID0+CiAgbmFtZXNwYWNlT2Yobm9kZSkKICBnZXRDbGFzcyhuYW1lX29yX2lkKQogIGdldEZ1bmN0aW9uKG5hbWVfb3JfaWQpCm4gPT4KICBnZXRWYXJpYWJsZShuYW1lX29yX2lkKQpuID0+CiAgZ2V0TG9jKG5vZGUpCigpID0+CiAgcGF0aE9mKG5lZWRsZSwgbWF4RGVwdGggPSAxMCkKbiA9PgpQb2ludGVyLnByb3RvdHlwZS5jaGFpbiA9IGZ1bmN0aW9uKHN0ZXAsIGxpbWl0ID0gSW5maW5pdHkpCiAgLkYgPSBhcmcgPT4KICAuVCA9IGFyZyA9PgooKSA9Pgpub2RlID0+CiAgcyA9PgpmciA9PgAAAAAAAAAA/QAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					4,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/clang-list.js",
						"symkeys":
						[
							[
								341,
								365
							],
							[
								529,
								535
							],
							[
								579,
								596
							],
							[
								707,
								735
							],
							[
								921,
								931
							],
							[
								981,
								991
							],
							[
								1927,
								1931
							],
							[
								1978,
								1982
							],
							[
								2080,
								2117
							],
							[
								2402,
								2446
							],
							[
								2454,
								2496
							],
							[
								2536,
								2543
							],
							[
								2587,
								2594
							],
							[
								3005,
								3016
							],
							[
								3063,
								3068
							],
							[
								3078,
								3083
							],
							[
								3096,
								3107
							],
							[
								3137,
								3142
							],
							[
								3155,
								3166
							],
							[
								3324,
								3330
							],
							[
								3731,
								3741
							],
							[
								3903,
								3913
							],
							[
								4210,
								4220
							],
							[
								4777,
								4782
							],
							[
								4925,
								4965
							],
							[
								5017,
								5050
							],
							[
								5235,
								5253
							],
							[
								5299,
								5315
							],
							[
								5331,
								5348
							],
							[
								5375,
								5398
							],
							[
								5414,
								5436
							],
							[
								5536,
								5547
							],
							[
								5670,
								5679
							],
							[
								5749,
								5760
							],
							[
								5978,
								5986
							],
							[
								6016,
								6024
							],
							[
								6043,
								6047
							],
							[
								6214,
								6225
							],
							[
								6280,
								6291
							],
							[
								6323,
								6332
							],
							[
								6482,
								6493
							],
							[
								6544,
								6558
							],
							[
								6697,
								6701
							],
							[
								6971,
								7010
							],
							[
								7104,
								7117
							],
							[
								7574,
								7606
							],
							[
								7770,
								7804
							]
						],
						"symlist":
						[
							"findLastIndex(predicate)",
							"tail()",
							"startsWith(start)",
							"async function main(...args)",
							" (a, p) =>",
							" (a, p) =>",
							"d =>",
							"v =>",
							"async function processFiles(...files)",
							"async function ReadAST(outfile, load = f => ",
							"(f), save = WriteFile, parse = JSON.parse)",
							"name =>",
							"stat =>",
							"async () =>",
							" a =>",
							"() =>",
							"async () =>",
							"() =>",
							"async () =>",
							"err =>",
							" (v, p) =>",
							"toString()",
							"toString()",
							" v =>",
							" function ListNodes(sysinc = false)",
							"NoSystemIncludes = ([p, n, l]) =>",
							" ([path, decl]) =>",
							"names = decls =>",
							"([path, decl]) =>",
							"declarations = decls =>",
							"([path, decl, loc]) =>",
							"([p, n]) =>",
							"(a, b) =>",
							"([p, n]) =>",
							"([p]) =>",
							"([p]) =>",
							"p =>",
							"([p, n]) =>",
							"([p, n]) =>",
							"(a, b) =>",
							"([p, n]) =>",
							"([p, n, l]) =>",
							"k =>",
							"([path, node, id, name, type, kind]) =>",
							"(field, i) =>",
							"function writeOutput(name, data)",
							"function GetLibraryFor(symbolName)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD9AAAARmV0Y2hDbGFzcyh1cmwpCiAgZSA9PgogIHNpbXBsaWZ5TGlzdCA9IGxpc3QgPT4KKFthLCBiXSkgPT4KKFthXSkgPT4KICBzdW1tYXJ5TGlzdCA9IHN1bW1hcnkgPT4KICBlID0+CihbbmFtZV0pID0+CihhLCBlKSA9PgogIG1ha2VVUkwgPSBwID0+CiAgZ2V0VVJMKG5hbWUpCiAgZW50cnkgPT4KKmtleXMoKQoqdmFsdWVzKCkKKmVudHJpZXMoKQogIHByZWQgPSAoaywgdikgPT4KICBwcmVkID0gKGtleSwgdmFsdWUpID0+CiAgZ2V0IG5hbWUoKQAAAAAAAAAAwQIAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					5,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/clang-ast.js",
						"symkeys":
						[
							[
								848,
								861
							],
							[
								940,
								996
							],
							[
								1451,
								1510
							],
							[
								1998,
								2035
							],
							[
								2254,
								2286
							],
							[
								2388,
								2425
							],
							[
								2579,
								2606
							],
							[
								2688,
								2718
							],
							[
								2785,
								2793
							],
							[
								2832,
								2859
							],
							[
								2908,
								2935
							],
							[
								3012,
								3016
							],
							[
								3039,
								3072
							],
							[
								3252,
								3295
							],
							[
								3580,
								3588
							],
							[
								3980,
								3984
							],
							[
								4003,
								4023
							],
							[
								4174,
								4206
							],
							[
								4368,
								4386
							],
							[
								4639,
								4656
							],
							[
								4963,
								4974
							],
							[
								4994,
								5001
							],
							[
								5028,
								5037
							],
							[
								5157,
								5163
							],
							[
								5275,
								5283
							],
							[
								5398,
								5407
							],
							[
								5433,
								5442
							],
							[
								5473,
								5477
							],
							[
								5538,
								5542
							],
							[
								5618,
								5634
							],
							[
								5891,
								5906
							],
							[
								5973,
								5982
							],
							[
								6043,
								6051
							],
							[
								6100,
								6109
							],
							[
								6156,
								6166
							],
							[
								6219,
								6229
							],
							[
								6260,
								6270
							],
							[
								6358,
								6369
							],
							[
								6575,
								6579
							],
							[
								6760,
								6771
							],
							[
								7002,
								7006
							],
							[
								7058,
								7072
							],
							[
								7122,
								7172
							],
							[
								7242,
								7297
							],
							[
								7302,
								7336
							],
							[
								7515,
								7519
							],
							[
								7600,
								7615
							],
							[
								7703,
								7759
							],
							[
								7833,
								7843
							],
							[
								8047,
								8054
							],
							[
								8171,
								8182
							],
							[
								8219,
								8248
							],
							[
								8309,
								8340
							],
							[
								8542,
								8552
							],
							[
								8607,
								8620
							],
							[
								8657,
								8686
							],
							[
								8747,
								8778
							],
							[
								8982,
								8992
							],
							[
								9047,
								9051
							],
							[
								9149,
								9175
							],
							[
								12155,
								12159
							],
							[
								13174,
								13186
							],
							[
								13309,
								13317
							],
							[
								13403,
								13414
							],
							[
								13537,
								13550
							],
							[
								13673,
								13685
							],
							[
								13779,
								13788
							],
							[
								13840,
								13851
							],
							[
								13940,
								13949
							],
							[
								14069,
								14085
							],
							[
								14143,
								14159
							],
							[
								14207,
								14220
							],
							[
								14367,
								14382
							],
							[
								14529,
								14544
							],
							[
								14801,
								14815
							],
							[
								14901,
								14913
							],
							[
								14980,
								14992
							],
							[
								15098,
								15115
							],
							[
								15201,
								15212
							],
							[
								15272,
								15285
							],
							[
								15428,
								15436
							],
							[
								15544,
								15554
							],
							[
								15735,
								15744
							],
							[
								17550,
								17560
							],
							[
								19639,
								19645
							],
							[
								19931,
								19942
							],
							[
								20043,
								20093
							],
							[
								20179,
								20187
							],
							[
								20247,
								20255
							],
							[
								22062,
								22092
							],
							[
								22171,
								22181
							],
							[
								22199,
								22225
							],
							[
								22354,
								22362
							],
							[
								22445,
								22453
							],
							[
								22631,
								22636
							],
							[
								22674,
								22681
							],
							[
								22765,
								22779
							],
							[
								23372,
								23376
							],
							[
								23457,
								23462
							],
							[
								24996,
								25000
							],
							[
								25902,
								25916
							],
							[
								25980,
								25990
							],
							[
								26075,
								26097
							],
							[
								26319,
								26327
							],
							[
								26449,
								26468
							],
							[
								26566,
								26574
							],
							[
								26592,
								26614
							],
							[
								26735,
								26743
							],
							[
								26848,
								26874
							],
							[
								27229,
								27237
							],
							[
								27352,
								27363
							],
							[
								27381,
								27407
							],
							[
								27479,
								27483
							],
							[
								27588,
								27598
							],
							[
								27658,
								27662
							],
							[
								27725,
								27729
							],
							[
								27779,
								27783
							],
							[
								28193,
								28203
							],
							[
								28235,
								28243
							],
							[
								28340,
								28349
							],
							[
								28367,
								28389
							],
							[
								28607,
								28619
							],
							[
								28637,
								28663
							],
							[
								28898,
								28906
							],
							[
								28969,
								28977
							],
							[
								30044,
								30063
							],
							[
								30179,
								30189
							],
							[
								30244,
								30252
							],
							[
								30361,
								30368
							],
							[
								30386,
								30408
							],
							[
								30753,
								30761
							],
							[
								30858,
								30867
							],
							[
								30891,
								30913
							],
							[
								31018,
								31029
							],
							[
								31047,
								31069
							],
							[
								31446,
								31463
							],
							[
								31481,
								31503
							],
							[
								31759,
								31767
							],
							[
								31878,
								31883
							],
							[
								31931,
								31954
							],
							[
								32076,
								32087
							],
							[
								32136,
								32148
							],
							[
								32210,
								32219
							],
							[
								32266,
								32276
							],
							[
								32314,
								32350
							],
							[
								33005,
								33017
							],
							[
								33063,
								33072
							],
							[
								33119,
								33129
							],
							[
								33309,
								33314
							],
							[
								33370,
								33378
							],
							[
								33471,
								33494
							],
							[
								33753,
								33769
							],
							[
								33988,
								34004
							],
							[
								34415,
								34428
							],
							[
								34574,
								34584
							],
							[
								34632,
								34643
							],
							[
								34735,
								34747
							],
							[
								34797,
								34810
							],
							[
								34858,
								34870
							],
							[
								34920,
								34933
							],
							[
								35181,
								35194
							],
							[
								35229,
								35244
							],
							[
								35324,
								35379
							],
							[
								35923,
								35933
							],
							[
								36176,
								36196
							],
							[
								36279,
								36325
							],
							[
								37824,
								37889
							],
							[
								38199,
								38203
							],
							[
								38464,
								38468
							],
							[
								39193,
								39200
							],
							[
								39254,
								39261
							],
							[
								39345,
								39352
							],
							[
								39529,
								39564
							],
							[
								39603,
								39623
							],
							[
								39653,
								39659
							],
							[
								39680,
								39688
							],
							[
								39795,
								39828
							],
							[
								40093,
								40118
							],
							[
								40459,
								40501
							],
							[
								41033,
								41086
							],
							[
								42496,
								42502
							],
							[
								42552,
								42558
							],
							[
								42723,
								42729
							],
							[
								42871,
								42887
							],
							[
								43432,
								43439
							],
							[
								43482,
								43486
							],
							[
								43506,
								43513
							],
							[
								43634,
								43661
							],
							[
								43720,
								43735
							],
							[
								44040,
								44047
							],
							[
								44107,
								44121
							],
							[
								44166,
								44181
							],
							[
								44207,
								44211
							],
							[
								44243,
								44254
							],
							[
								44287,
								44299
							],
							[
								44333,
								44346
							],
							[
								44422,
								44427
							],
							[
								44507,
								44511
							],
							[
								44535,
								44547
							],
							[
								44610,
								44615
							],
							[
								44645,
								44649
							],
							[
								44673,
								44682
							],
							[
								44695,
								44711
							],
							[
								45053,
								45057
							],
							[
								45081,
								45092
							],
							[
								45151,
								45155
							],
							[
								45193,
								45197
							],
							[
								45229,
								45245
							],
							[
								45284,
								45288
							],
							[
								45306,
								45310
							],
							[
								45354,
								45406
							],
							[
								45594,
								45610
							],
							[
								45970,
								45991
							],
							[
								46017,
								46021
							],
							[
								46463,
								46468
							],
							[
								46503,
								46530
							],
							[
								46724,
								46752
							],
							[
								46933,
								46958
							],
							[
								47033,
								47065
							],
							[
								47196,
								47200
							],
							[
								47337,
								47366
							],
							[
								47476,
								47480
							],
							[
								47774,
								47796
							],
							[
								48835,
								48890
							],
							[
								48970,
								48977
							],
							[
								49043,
								49050
							],
							[
								49087,
								49113
							],
							[
								49207,
								49215
							],
							[
								49281,
								49289
							],
							[
								49351,
								49362
							],
							[
								49516,
								49525
							],
							[
								49544,
								49570
							],
							[
								49623,
								49632
							],
							[
								49685,
								49711
							],
							[
								49763,
								49782
							],
							[
								49858,
								49875
							],
							[
								49910,
								49934
							],
							[
								50193,
								50198
							],
							[
								50256,
								50263
							],
							[
								50345,
								50356
							],
							[
								51064,
								51074
							],
							[
								51122,
								51126
							],
							[
								51317,
								51328
							],
							[
								51339,
								51363
							],
							[
								51431,
								51463
							],
							[
								51619,
								51644
							],
							[
								51708,
								51744
							],
							[
								51814,
								51854
							],
							[
								52106,
								52134
							],
							[
								52181,
								52212
							],
							[
								52441,
								52483
							],
							[
								52686,
								52711
							],
							[
								52869,
								52890
							],
							[
								52935,
								52954
							],
							[
								53288,
								53315
							],
							[
								53383,
								53402
							],
							[
								53606,
								53641
							],
							[
								53759,
								53807
							],
							[
								54053,
								54080
							],
							[
								54698,
								54739
							],
							[
								54977,
								55004
							],
							[
								55147,
								55168
							],
							[
								55229,
								55256
							],
							[
								55301,
								55333
							],
							[
								55583,
								55609
							],
							[
								55803,
								55822
							],
							[
								56484,
								56509
							],
							[
								56557,
								56588
							],
							[
								56655,
								56670
							],
							[
								56865,
								56886
							],
							[
								57003,
								57039
							],
							[
								57259,
								57278
							],
							[
								57682,
								57703
							],
							[
								57920,
								57953
							],
							[
								58013,
								58036
							],
							[
								58099,
								58116
							],
							[
								58236,
								58240
							],
							[
								59067,
								59092
							],
							[
								59299,
								59326
							],
							[
								59791,
								59795
							],
							[
								60005,
								60009
							],
							[
								60208,
								60227
							],
							[
								60348,
								60353
							],
							[
								60691,
								60730
							],
							[
								60829,
								60872
							],
							[
								61082,
								61097
							],
							[
								61363,
								61399
							],
							[
								61495,
								61523
							],
							[
								61793,
								61837
							],
							[
								61899,
								61930
							],
							[
								61989,
								62010
							],
							[
								62069,
								62092
							],
							[
								62515,
								62541
							],
							[
								62609,
								62635
							],
							[
								62699,
								62718
							],
							[
								62760,
								62795
							],
							[
								62969,
								63011
							],
							[
								63196,
								63217
							],
							[
								63393,
								63423
							],
							[
								63643,
								63669
							],
							[
								64098,
								64117
							],
							[
								64178,
								64201
							],
							[
								64736,
								64763
							],
							[
								64813,
								64836
							],
							[
								64993,
								65029
							],
							[
								65099,
								65128
							],
							[
								65186,
								65209
							],
							[
								65387,
								65412
							],
							[
								65496,
								65538
							],
							[
								65637,
								65662
							],
							[
								65966,
								66021
							],
							[
								66263,
								66292
							],
							[
								66543,
								66587
							],
							[
								66719,
								66763
							],
							[
								66850,
								66878
							],
							[
								67022,
								67046
							],
							[
								67294,
								67338
							],
							[
								67660,
								67713
							],
							[
								67812,
								67857
							],
							[
								67932,
								67951
							],
							[
								68012,
								68033
							],
							[
								68210,
								68237
							],
							[
								68286,
								68316
							],
							[
								68328,
								68349
							],
							[
								68361,
								68393
							],
							[
								68535,
								68565
							],
							[
								68577,
								68618
							],
							[
								68630,
								68669
							],
							[
								68681,
								68704
							],
							[
								68716,
								68739
							],
							[
								68751,
								68770
							],
							[
								68782,
								68824
							],
							[
								68836,
								68861
							],
							[
								68873,
								68900
							],
							[
								68912,
								68950
							],
							[
								68962,
								69044
							],
							[
								69056,
								69123
							],
							[
								69135,
								69160
							],
							[
								69172,
								69214
							],
							[
								69399,
								69437
							],
							[
								69449,
								69506
							],
							[
								69518,
								69556
							],
							[
								69568,
								69593
							],
							[
								69605,
								69632
							],
							[
								69644,
								69682
							],
							[
								69694,
								69750
							],
							[
								69844,
								69895
							],
							[
								69907,
								69982
							],
							[
								69994,
								70025
							],
							[
								70037,
								70056
							],
							[
								70068,
								70104
							],
							[
								70200,
								70221
							],
							[
								70233,
								70263
							],
							[
								70275,
								70298
							],
							[
								70310,
								70353
							],
							[
								70365,
								70403
							],
							[
								70415,
								70459
							],
							[
								70471,
								70495
							],
							[
								70612,
								70642
							],
							[
								70654,
								70680
							],
							[
								70724,
								70771
							],
							[
								70783,
								70825
							],
							[
								70837,
								70875
							],
							[
								70887,
								70923
							],
							[
								70935,
								70982
							],
							[
								70994,
								71017
							],
							[
								71029,
								71063
							],
							[
								71271,
								71314
							],
							[
								71326,
								71378
							],
							[
								71482,
								71529
							],
							[
								71541,
								71569
							],
							[
								71581,
								71619
							],
							[
								71631,
								71672
							],
							[
								71684,
								71703
							],
							[
								71715,
								71744
							],
							[
								71756,
								71782
							],
							[
								71794,
								71822
							],
							[
								71834,
								71886
							],
							[
								71898,
								71926
							],
							[
								71938,
								71972
							],
							[
								72104,
								72125
							],
							[
								72137,
								72160
							],
							[
								72172,
								72210
							],
							[
								72222,
								72260
							],
							[
								72272,
								72293
							],
							[
								72305,
								72330
							],
							[
								72342,
								72367
							],
							[
								72379,
								72410
							],
							[
								72497,
								72516
							],
							[
								72528,
								72551
							],
							[
								72563,
								72604
							],
							[
								72616,
								72659
							],
							[
								72671,
								72698
							],
							[
								72710,
								72748
							],
							[
								72760,
								72793
							],
							[
								72805,
								72841
							],
							[
								72853,
								72872
							],
							[
								72938,
								73001
							],
							[
								73013,
								73069
							],
							[
								73081,
								73104
							],
							[
								73116,
								73151
							],
							[
								73163,
								73219
							],
							[
								73231,
								73284
							],
							[
								73296,
								73341
							],
							[
								73353,
								73398
							],
							[
								73410,
								73455
							],
							[
								73467,
								73497
							],
							[
								73509,
								73556
							],
							[
								73568,
								73593
							],
							[
								73605,
								73638
							],
							[
								73650,
								73680
							],
							[
								73692,
								73732
							],
							[
								73744,
								73797
							],
							[
								73809,
								73832
							],
							[
								73844,
								73865
							],
							[
								73877,
								73917
							],
							[
								73929,
								73963
							],
							[
								73975,
								73997
							],
							[
								74009,
								74043
							],
							[
								74055,
								74078
							],
							[
								74090,
								74132
							],
							[
								74144,
								74175
							],
							[
								74187,
								74213
							],
							[
								74226,
								74256
							],
							[
								74830,
								74870
							],
							[
								75080,
								75084
							],
							[
								76225,
								76265
							],
							[
								76648,
								76708
							],
							[
								77144,
								77170
							],
							[
								77278,
								77316
							],
							[
								77512,
								77516
							],
							[
								77803,
								77833
							],
							[
								78292,
								78296
							],
							[
								78948,
								78987
							],
							[
								79651,
								79708
							],
							[
								80029,
								80053
							],
							[
								80526,
								80556
							],
							[
								80820,
								80861
							],
							[
								80996,
								81035
							],
							[
								81047,
								81092
							],
							[
								81104,
								81132
							],
							[
								81144,
								81180
							],
							[
								81324,
								81362
							],
							[
								81374,
								81413
							],
							[
								81425,
								81466
							],
							[
								81478,
								81513
							],
							[
								81525,
								81572
							],
							[
								81584,
								81623
							],
							[
								81636,
								81670
							],
							[
								81682,
								81730
							],
							[
								81742,
								81785
							],
							[
								81797,
								81846
							],
							[
								81858,
								81908
							],
							[
								81920,
								81969
							],
							[
								82223,
								82247
							],
							[
								82304,
								82329
							],
							[
								82708,
								82737
							],
							[
								82930,
								82935
							],
							[
								83210,
								83231
							],
							[
								83298,
								83356
							],
							[
								83502,
								83506
							],
							[
								84091,
								84099
							],
							[
								84151,
								84159
							],
							[
								84271,
								84275
							],
							[
								84528,
								84586
							],
							[
								84688,
								84693
							],
							[
								85042,
								85049
							],
							[
								85238,
								85291
							],
							[
								85528,
								85589
							],
							[
								85899,
								85979
							],
							[
								86100,
								86105
							],
							[
								86443,
								86504
							],
							[
								86846,
								86856
							],
							[
								86922,
								86947
							],
							[
								86985,
								86995
							],
							[
								87060,
								87071
							],
							[
								87145,
								87160
							],
							[
								87199,
								87203
							],
							[
								87283,
								87308
							],
							[
								87347,
								87355
							],
							[
								87397,
								87426
							],
							[
								87456,
								87460
							]
						],
						"symlist":
						[
							" (ast, r) =>",
							" function DeepFind(ast, pred, flags = deep.RETURN_VALUE)",
							" function* DeepSelect(ast, pred, flags = deep.RETURN_VALUE)",
							" function DeepCachePath(ast, path, m)",
							" function DeepPathOf(ast, value)",
							" function DeepGet(ast, path, ...args)",
							"function FileTime(filename)",
							"function Newer(file, ...other)",
							"other =>",
							"function Older(file, other)",
							"function GetSubscripts(str)",
							"m =>",
							"function TrimSubscripts(str, sub)",
							" function nameOrIdPred(name_or_id, ...args)",
							" node =>",
							"List",
							"constructor(...args)",
							"filter(callback, thisArg = null)",
							"callback = elem =>",
							"slice(start, end)",
							"get first()",
							"elem =>",
							"entries()",
							"keys()",
							"values()",
							"toArray()",
							"(a, n) =>",
							"List",
							"Node",
							"constructor(ast)",
							"static get(ast)",
							"get ast()",
							"get id()",
							"get loc()",
							"get file()",
							" (v, k) =>",
							" (v, k) =>",
							"get range()",
							"r =>",
							"toJSON(obj)",
							"Node",
							"(node, ast) =>",
							" function PathOf(node, ast = globalThis['$'].data)",
							" function* Hier(node_or_path, t = (p, ast, abort) => p.",
							"(ast), ast = globalThis['$'].data)",
							"p =>",
							"abortFn = () =>",
							" function FindType(typeName, ast = globalThis['$'].data)",
							"([tok]) =>",
							"node =>",
							"PointerType",
							"constructor(pointee, ast, ns)",
							"static fromString(str, ast, ns)",
							"toString()",
							"ReferenceType",
							"constructor(pointee, ast, ns)",
							"static fromString(str, ast, ns)",
							"toString()",
							"Type",
							"constructor(node, ast, ns)",
							"n =>",
							"get regExp()",
							"isEnum()",
							"isPointer()",
							"isReference()",
							"isFunction()",
							"isArray()",
							"isInteger()",
							"arrayOf()",
							"get subscripts()",
							"trimSubscripts()",
							"get pointer()",
							"get reference()",
							"getPointer(ast)",
							"get unsigned()",
							"get signed()",
							"isCompound()",
							"isFloatingPoint()",
							"get alias()",
							"get aliases()",
							"isEnum()",
							"isString()",
							"get ffi()",
							"get size()",
							"toJS()",
							"toJSON(obj)",
							"static get(name_or_id, ast = globalThis['$'].data)",
							" node =>",
							" node =>",
							"function RoundTo(value, align)",
							"RecordDecl",
							"constructor(node, ast, ns)",
							"child =>",
							"child =>",
							"() =>",
							"node =>",
							"(acc, node) =>",
							"i =>",
							" n =>",
							"n =>",
							"([name, t]) =>",
							"get size()",
							"(acc, [name, type]) =>",
							"toJSON()",
							"([name, member]) =>",
							"EnumDecl",
							"constructor(node, ast)",
							"child =>",
							"({ name, type, inner }) =>",
							"toJSON()",
							"TypedefDecl",
							"constructor(node, ast, ns)",
							"n =>",
							" (v, k) =>",
							"n =>",
							"n =>",
							"n =>",
							"get size()",
							"toJSON()",
							"FieldDecl",
							"constructor(node, ast)",
							"FunctionDecl",
							"constructor(node, ast, ns)",
							"child =>",
							"child =>",
							"({ name, type }) =>",
							"isMethod()",
							"toJSON()",
							"VarDecl",
							"constructor(node, ast)",
							"toJSON()",
							"ClassDecl",
							"constructor(node, ast)",
							"BuiltinType",
							"constructor(node, ast)",
							"ConstantArrayType",
							"constructor(node, ast)",
							"toJSON()",
							"Range",
							"constructor(begin, end)",
							"get begin()",
							"set begin(v)",
							"get end()",
							"set end(v)",
							"toString(opts = { printFile: true })",
							"get length()",
							"toArray()",
							"toObject()",
							"Range",
							"Location",
							"static at(file, offset)",
							"static from(loc)",
							"constructor(loc)",
							"update(other)",
							"get line()",
							"set line(v)",
							"get column()",
							"set column(v)",
							"get offset()",
							"set offset(v)",
							" (t, ...c) =>",
							"'\\x1b[m' : t =>",
							"toString(opts = { printFile: true, onlyOffset: false })",
							"toObject()",
							"localeCompare(other)",
							" function TypeFactory(node, ast, cache = true)",
							"async function SpawnCompiler(compiler, input, outfile, args = [])",
							"p =>",
							"p =>",
							"line =>",
							"line =>",
							"line =>",
							" function PipeReader(fd, callback)",
							"(resolve, reject) =>",
							" () =>",
							" data =>",
							" function ReadPipe(fd, callback)",
							" function ReadOutput(fd)",
							"async function SourceDependencies(...args)",
							"async function AstDump(compiler, source, args, force)",
							"size()",
							"json()",
							"data()",
							"SetFile = loc =>",
							"files()",
							"n =>",
							"file =>",
							"pred2 = (used, implicit) =>",
							" node =>",
							"types()",
							" n =>",
							" () =>",
							"List",
							"functions()",
							" n =>",
							" () =>",
							" n =>",
							"List",
							"namespaces()",
							" n =>",
							"List",
							"classes()",
							"predicate = n =>",
							"List",
							"variables()",
							"n =>",
							"List",
							"names(depth = 1)",
							"n =>",
							"n =>",
							" function NameFor(decl, ast = globalThis['$']?.data)",
							" (value, key) =>",
							" function NodeType(n)",
							"t =>",
							" n =>",
							" function NodeName(n, name)",
							" function* RawLocation(path)",
							" function* RawRange(path)",
							" function CompleteLocation(path)",
							"l =>",
							" function CompleteRange(path)",
							"l =>",
							" function GetLoc(node)",
							" function GetTypeNode(node, ast = globalThis['$'].data)",
							"node =>",
							"node =>",
							" function GetTypeStr(node)",
							"inner =>",
							"inner =>",
							"([n, t]) =>",
							"NodeError",
							"constructor(message, node)",
							"NodeError",
							" function NodePrinter(ast)",
							" function put(str)",
							" function trim()",
							"printer = function(node)",
							"get()",
							"value()",
							"value(node)",
							"toString()",
							"i =>",
							"NodePrinter",
							"AbiTagAttr(abi_tag_attr)",
							"AccessSpecDecl(access_spec_decl)",
							"AlignedAttr(aligned_attr)",
							"AlwaysInlineAttr(always_inline_attr)",
							"ArraySubscriptExpr(array_subscript_expr)",
							"AsmLabelAttr(asm_label_attr)",
							"BinaryOperator(binary_operator)",
							"BlockCommandComment(block_command_comment)",
							"BuiltinAttr(builtin_attr)",
							"BreakStmt(break_stmt)",
							"CallExpr(call_expr)",
							"RecoveryExpr(recovery_expr)",
							"CaseStmt(case_stmt)",
							"CharacterLiteral(character_literal)",
							"CompoundAssignOperator(compound_assign_operator)",
							"CompoundStmt(compound_stmt)",
							"ConditionalOperator(conditional_operator)",
							"ConstantExpr(constant_expr)",
							"ConstAttr(const_attr)",
							"ContinueStmt(continue_stmt)",
							"CStyleCastExpr(cstyle_cast_expr)",
							"DeclRefExpr(decl_ref_expr)",
							"DeclStmt(decl_stmt)",
							"DefaultStmt(default_stmt)",
							"DeprecatedAttr(deprecated_attr)",
							"DoStmt(do_stmt)",
							"EmptyDecl(empty_decl)",
							"EnumConstantDecl(enum_constant_decl)",
							"EnumDecl(enum_decl)",
							"FieldDecl(field_decl)",
							"FloatingLiteral(floating_literal)",
							"FormatAttr(format_attr)",
							"ForStmt(for_stmt)",
							"n =>",
							"FullComment(full_comment)",
							"FunctionDecl(function_decl)",
							"n =>",
							"n =>",
							"GotoStmt(goto_stmt)",
							" n =>",
							"HTMLEndTagComment(html_end_tag_comment)",
							"HTMLStartTagComment(html_start_tag_comment)",
							"IfStmt(if_stmt)",
							"ImplicitCastExpr(implicit_cast_expr)",
							"InitListExpr(init_list_expr)",
							"InlineCommandComment(inline_command_comment)",
							"IntegerLiteral(integer_literal)",
							"LabelStmt(label_stmt)",
							"MemberExpr(member_expr)",
							"NonNullAttr(non_null_attr)",
							"NoThrowAttr(no_throw_attr)",
							"NullStmt(null_stmt)",
							"ParagraphComment(paragraph_comment)",
							"ParamCommandComment(param_command_comment)",
							"ParenExpr(paren_expr)",
							"ParenListExpr(paren_list_expr)",
							"ParmVarDecl(parm_var_decl)",
							"PureAttr(pure_attr)",
							"RecordDecl(record_decl)",
							"RestrictAttr(restrict_attr)",
							"ReturnStmt(return_stmt)",
							"ReturnsTwiceAttr(returns_twice_attr)",
							"StringLiteral(string_literal)",
							"SwitchStmt(switch_stmt)",
							"TextComment(text_comment)",
							"TranslationUnitDecl(translation_unit_decl)",
							"TypedefDecl(typedef_decl)",
							"UnaryExprOrTypeTraitExpr(unary_expr_or_type_trait_expr)",
							"UnaryOperator(unary_operator)",
							"UnresolvedLookupExpr(unresolved_lookup_expr)",
							"UnresolvedMemberExpr(unresolved_member_expr)",
							"VarDecl(var_decl, base_type)",
							"([offset, subscript]) =>",
							"VerbatimBlockComment(verbatim_block_comment)",
							"VerbatimBlockLineComment(verbatim_block_line_comment)",
							"WarnUnusedResultAttr(warn_unused_result_attr)",
							"WeakAttr(weak_attr)",
							"WhileStmt(while_stmt)",
							"OverrideAttr(override_attr)",
							"AddrLabelExpr(addr_label_expr)",
							"AliasAttr(alias_attr)",
							"AlignValueAttr(align_value_attr)",
							"AllocSizeAttr(alloc_size_attr)",
							"ArrayInitIndexExpr(array_init_index_expr)",
							"ArrayInitLoopExpr(array_init_loop_expr)",
							"AtomicExpr(atomic_expr)",
							"AtomicType(atomic_type)",
							"AutoType(auto_type)",
							"BuiltinTemplateDecl(builtin_template_decl)",
							"BuiltinType(builtin_type)",
							"CallbackAttr(callback_attr)",
							"ClassTemplateDecl(class_template_decl)",
							"ClassTemplatePartialSpecializationDecl(class_template_partial_specialization_decl)",
							"ClassTemplateSpecializationDecl(class_template_specialization_decl)",
							"ComplexType(complex_type)",
							"CompoundLiteralExpr(compound_literal_expr)",
							"ConstantArrayType(constant_array_type)",
							"ConstructorUsingShadowDecl(constructor_using_shadow_decl)",
							"ConvertVectorExpr(convert_vector_expr)",
							"DecayedType(decayed_type)",
							"DecltypeType(decltype_type)",
							"DependentNameType(dependent_name_type)",
							"DependentScopeDeclRefExpr(dependent_scope_decl_ref_expr)",
							"DependentSizedArrayType(dependent_sized_array_type)",
							"DependentTemplateSpecializationType(dependent_template_specialization_type)",
							"ElaboratedType(elaborated_type)",
							"EnumType(enum_type)",
							"ExprWithCleanups(expr_with_cleanups)",
							"FinalAttr(final_attr)",
							"FormatArgAttr(format_arg_attr)",
							"FriendDecl(friend_decl)",
							"FunctionNoProtoType(function_no_proto_type)",
							"FunctionProtoType(function_proto_type)",
							"FunctionTemplateDecl(function_template_decl)",
							"GCCAsmStmt(gcc_asm_stmt)",
							"GNUInlineAttr(gnu_inline_attr)",
							"GNUNullExpr(gnu_null_expr)",
							"ImplicitValueInitExpr(implicit_value_init_expr)",
							"IncompleteArrayType(incomplete_array_type)",
							"IndirectFieldDecl(indirect_field_decl)",
							"IndirectGotoStmt(indirect_goto_stmt)",
							"InjectedClassNameType(injected_class_name_type)",
							"LambdaExpr(lambda_expr)",
							"LinkageSpecDecl(linkage_spec_decl)",
							"LValueReferenceType(l_value_reference_type)",
							"MaterializeTemporaryExpr(materialize_temporary_expr)",
							"MaxFieldAlignmentAttr(max_field_alignment_attr)",
							"MayAliasAttr(may_alias_attr)",
							"MemberPointerType(member_pointer_type)",
							"MinVectorWidthAttr(min_vector_width_attr)",
							"ModeAttr(mode_attr)",
							"NamespaceDecl(namespace_decl)",
							"NoDebugAttr(no_debug_attr)",
							"NoInlineAttr(no_inline_attr)",
							"NonTypeTemplateParmDecl(non_type_template_parm_decl)",
							"OffsetOfExpr(offset_of_expr)",
							"OpaqueValueExpr(opaque_value_expr)",
							"OwnerAttr(owner_attr)",
							"PackedAttr(packed_attr)",
							"PackExpansionExpr(pack_expansion_expr)",
							"PackExpansionType(pack_expansion_type)",
							"ParenType(paren_type)",
							"PointerAttr(pointer_attr)",
							"PointerType(pointer_type)",
							"PredefinedExpr(predefined_expr)",
							"QualType(qual_type)",
							"RecordType(record_type)",
							"ReturnsNonNullAttr(returns_non_null_attr)",
							"RValueReferenceType(r_value_reference_type)",
							"SentinelAttr(sentinel_attr)",
							"ShuffleVectorExpr(shuffle_vector_expr)",
							"SizeOfPackExpr(size_of_pack_expr)",
							"StaticAssertDecl(static_assert_decl)",
							"StmtExpr(stmt_expr)",
							"SubstNonTypeTemplateParmExpr(subst_non_type_template_parm_expr)",
							"SubstTemplateTypeParmType(subst_template_type_parm_type)",
							"TargetAttr(target_attr)",
							"TemplateArgument(template_argument)",
							"TemplateSpecializationType(template_specialization_type)",
							"TemplateTemplateParmDecl(template_template_parm_decl)",
							"TemplateTypeParmDecl(template_type_parm_decl)",
							"TemplateTypeParmType(template_type_parm_type)",
							"TParamCommandComment(t_param_command_comment)",
							"TypeAliasDecl(type_alias_decl)",
							"TypeAliasTemplateDecl(type_alias_template_decl)",
							"TypedefType(typedef_type)",
							"TypeOfExprType(type_of_expr_type)",
							"TypeTraitExpr(type_trait_expr)",
							"UnaryTransformType(unary_transform_type)",
							"UnresolvedUsingValueDecl(unresolved_using_value_decl)",
							"UnusedAttr(unused_attr)",
							"UsingDecl(using_decl)",
							"UsingDirectiveDecl(using_directive_decl)",
							"UsingShadowDecl(using_shadow_decl)",
							"VAArgExpr(va_arg_expr)",
							"VarTemplateDecl(var_template_decl)",
							"VectorType(vector_type)",
							"VerbatimLineComment(verbatim_line_comment)",
							"VisibilityAttr(visibility_attr)",
							"WeakRefAttr(weak_ref_attr)",
							"CXXRecordDecl(cxx_record_decl)",
							"CXXConstructorDecl(cxx_constructor_decl)",
							"n =>",
							"CXXCtorInitializer(cxx_ctor_initializer)",
							"CXXDependentScopeMemberExpr(cxx_dependent_scope_member_expr)",
							"CXXThisExpr(cxx_this_expr)",
							"CXXDestructorDecl(cxx_destructor_decl)",
							"n =>",
							"CXXMethodDecl(cxx_method_decl)",
							"n =>",
							"CXXStaticCastExpr(cxx_static_cast_expr)",
							"CXXUnresolvedConstructExpr(cxx_unresolved_construct_expr)",
							"CXXNewExpr(cxx_new_expr)",
							"CXXDeleteExpr(cxx_delete_expr)",
							"CXXBoolLiteralExpr(cxx_bool_literal_expr)",
							"CXX11NoReturnAttr(cxx11_no_return_attr)",
							"CXXBindTemporaryExpr(cxx_bind_temporary_expr)",
							"CXXCatchStmt(cxx_catch_stmt)",
							"CXXConstructExpr(cxx_construct_expr)",
							"CXXConversionDecl(cxx_conversion_decl)",
							"CXXDefaultArgExpr(cxx_default_arg_expr)",
							"CXXDefaultInitExpr(cxx_default_init_expr)",
							"CXXForRangeStmt(cxx_for_range_stmt)",
							"CXXFunctionalCastExpr(cxx_functional_cast_expr)",
							"CXXMemberCallExpr(cxx_member_call_expr)",
							"CXXNoexceptExpr(cxx_noexcept_expr)",
							"CXXNullPtrLiteralExpr(cxx_null_ptr_literal_expr)",
							"CXXOperatorCallExpr(cxx_operator_call_expr)",
							"CXXReinterpretCastExpr(cxx_reinterpret_cast_expr)",
							"CXXScalarValueInitExpr(cxx_scalar_value_init_expr)",
							"CXXTemporaryObjectExpr(cxx_temporary_object_expr)",
							"CXXTryStmt(cxx_try_stmt)",
							" function PrintNode(node)",
							" function PrintAst(node, ast)",
							"get()",
							" function isNode(obj)",
							" function GetType(name_or_id, ast = globalThis['$']?.data)",
							"n =>",
							" node =>",
							" node =>",
							"r =>",
							" function GetClass(name_or_id, ast = globalThis['$'].data)",
							" n =>",
							"bases()",
							" function* GetBases(node, ast = globalThis['$'].data)",
							" function GetByName(arg, ast = globalThis['$'].data, ...args)",
							" function GetNamespace(arg, root = globalThis['$'].data, predicate = () => true)",
							" n =>",
							" function NamespaceOf(node, path, ast = globalThis['$'].data)",
							"toString()",
							" function GetFields(node)",
							" (v, k) =>",
							"([v, p]) =>",
							"([loc, ptr]) =>",
							"i =>",
							" function GetParams(node)",
							"child =>",
							" function PathRemoveLoc(path)",
							"p =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADBAgAAICBmaW5kTGFzdEluZGV4KHByZWRpY2F0ZSkKICB0YWlsKCkKICBzdGFydHNXaXRoKHN0YXJ0KQogIG1haW4oLi4uYXJncykKKGEsIHApID0+CihhLCBwKSA9PgogIGQgPT4KICB2ID0+CiAgcHJvY2Vzc0ZpbGVzKC4uLmZpbGVzKQpSZWFkQVNUKG91dGZpbGUsIGxvYWQgPSBmID0+IAooZiksIHNhdmUgPSBXcml0ZUZpbGUsIHBhcnNlID0gSlNPTi5wYXJzZSkKICBuYW1lID0+CiAgc3RhdCA9PgooKSA9PgphID0+CigpID0+CigpID0+CigpID0+CigpID0+CiAgZXJyID0+Cih2LCBwKSA9PgogIHRvU3RyaW5nKCkKICB0b1N0cmluZygpCnYgPT4KTGlzdE5vZGVzKHN5c2luYyA9IGZhbHNlKQpOb1N5c3RlbUluY2x1ZGVzID0gKFtwLCBuLCBsXSkgPT4KKFtwYXRoLCBkZWNsXSkgPT4KICBuYW1lcyA9IGRlY2xzID0+CihbcGF0aCwgZGVjbF0pID0+CiAgZGVjbGFyYXRpb25zID0gZGVjbHMgPT4KKFtwYXRoLCBkZWNsLCBsb2NdKSA9PgooW3AsIG5dKSA9PgooYSwgYikgPT4KKFtwLCBuXSkgPT4KKFtwXSkgPT4KKFtwXSkgPT4KICBwID0+CihbcCwgbl0pID0+CihbcCwgbl0pID0+CihhLCBiKSA9PgooW3AsIG5dKSA9PgooW3AsIG4sIGxdKSA9PgogIGsgPT4KKFtwYXRoLCBub2RlLCBpZCwgbmFtZSwgdHlwZSwga2luZF0pID0+CihmaWVsZCwgaSkgPT4KICB3cml0ZU91dHB1dChuYW1lLCBkYXRhKQpHZXRMaWJyYXJ5Rm9yKHN5bWJvbE5hbWUpAAAAAAAAAAA1LQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					6,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/compile_commands.js",
						"symkeys":
						[
							[
								476,
								483
							],
							[
								484,
								498
							],
							[
								555,
								574
							],
							[
								695,
								702
							],
							[
								703,
								717
							],
							[
								961,
								988
							],
							[
								1079,
								1085
							],
							[
								1106,
								1110
							],
							[
								1180,
								1202
							],
							[
								1235,
								1248
							],
							[
								1401,
								1440
							],
							[
								1480,
								1493
							],
							[
								1670,
								1691
							],
							[
								1774,
								1787
							],
							[
								1890,
								1903
							],
							[
								1954,
								1977
							],
							[
								2125,
								2160
							],
							[
								2336,
								2352
							],
							[
								2423,
								2427
							],
							[
								2459,
								2467
							],
							[
								2497,
								2514
							],
							[
								2592,
								2626
							],
							[
								2731,
								2756
							],
							[
								3698,
								3716
							],
							[
								3906,
								3917
							],
							[
								4467,
								4479
							],
							[
								4511,
								4515
							],
							[
								4547,
								4551
							],
							[
								4630,
								4636
							],
							[
								4666,
								4683
							],
							[
								5149,
								5167
							]
						],
						"symlist":
						[
							" fn =>",
							" (...args) =>",
							"function* iter(arr)",
							" fn =>",
							" (...args) =>",
							".sourcesMap = outputFile =>",
							"dep =>",
							"s =>",
							".depMap = inputFile =>",
							"(acc, cmd) =>",
							".transformMap = (input, output, map) =>",
							" (...args) =>",
							".workDir = workDir =>",
							"toAbsolute(p)",
							"toRelative(p)",
							" function toRel(p)",
							".relativeMap = (relativeTo, map) =>",
							"nm: (...args) =>",
							"m =>",
							"entry =>",
							"([file, data]) =>",
							"(acc, [file, addr, type, name]) =>",
							"function main(...arglist)",
							"get dependencies()",
							"(arg, i) =>",
							"get CFLAGS()",
							"d =>",
							"i =>",
							"dir =>",
							" (entry, file) =>",
							"get dependencies()"
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				],
				[
					7,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/compileCommand.js",
						"symkeys":
						[
							[
								219,
								226
							],
							[
								231,
								260
							],
							[
								570,
								583
							],
							[
								633,
								649
							],
							[
								677,
								695
							],
							[
								792,
								813
							],
							[
								879,
								890
							],
							[
								944,
								959
							],
							[
								1028,
								1044
							],
							[
								1111,
								1125
							],
							[
								1191,
								1205
							],
							[
								1271,
								1285
							],
							[
								1358,
								1369
							],
							[
								1428,
								1442
							],
							[
								1501,
								1513
							],
							[
								1572,
								1580
							],
							[
								1611,
								1626
							],
							[
								1684,
								1693
							],
							[
								1737,
								1752
							],
							[
								1956,
								1974
							],
							[
								2233,
								2249
							],
							[
								2302,
								2312
							],
							[
								2432,
								2443
							],
							[
								2745,
								2757
							],
							[
								2902,
								2913
							],
							[
								3443,
								3455
							],
							[
								3623,
								3630
							],
							[
								3712,
								3720
							],
							[
								4026,
								4056
							],
							[
								4140,
								4148
							],
							[
								4301,
								4315
							],
							[
								4336,
								4365
							],
							[
								4459,
								4477
							],
							[
								4540,
								4553
							],
							[
								4614,
								4626
							],
							[
								4710,
								4716
							],
							[
								4757,
								4763
							],
							[
								4819,
								4830
							],
							[
								4888,
								4898
							],
							[
								4956,
								4969
							],
							[
								5015,
								5021
							],
							[
								5048,
								5064
							],
							[
								5262,
								5274
							],
							[
								5431,
								5446
							],
							[
								5482,
								5492
							],
							[
								6570,
								6584
							],
							[
								6721,
								6733
							],
							[
								6770,
								6774
							],
							[
								6882,
								6897
							],
							[
								6934,
								6938
							],
							[
								7148,
								7159
							],
							[
								7180,
								7209
							],
							[
								7264,
								7279
							],
							[
								7349,
								7363
							],
							[
								7433,
								7448
							],
							[
								7518,
								7528
							],
							[
								7586,
								7596
							],
							[
								7624,
								7637
							],
							[
								7672,
								7683
							],
							[
								7827,
								7833
							],
							[
								7862,
								7873
							],
							[
								7915,
								7919
							],
							[
								8049,
								8060
							],
							[
								8146,
								8153
							],
							[
								8234,
								8290
							],
							[
								9592,
								9618
							],
							[
								9654,
								9661
							],
							[
								9730,
								9737
							],
							[
								9771,
								9778
							],
							[
								9815,
								9845
							],
							[
								10351,
								10394
							],
							[
								10490,
								10497
							],
							[
								10536,
								10587
							],
							[
								10717,
								10725
							],
							[
								10897,
								10908
							],
							[
								10942,
								10954
							],
							[
								10991,
								10995
							],
							[
								11124,
								11133
							],
							[
								11213,
								11228
							],
							[
								11265,
								11269
							],
							[
								11404,
								11432
							]
						],
						"symlist":
						[
							"Command",
							"constructor(a, workDir = '.')",
							"get program()",
							"set program(arg)",
							"absolutePath(path)",
							"argumentsOfType(type)",
							"(arg, i) =>",
							"get warnFlags()",
							"get debugFlags()",
							"get optFlags()",
							"get depFlags()",
							"get modeFlag()",
							"isCompile()",
							"isPreprocess()",
							"isAssemble()",
							"isLink()",
							"toString(delim)",
							"toArray()",
							"remove(...args)",
							"get dependencies()",
							"get outputFile()",
							"absolute()",
							"(arg, i) =>",
							"relative(to)",
							"(arg, i) =>",
							"run(opts={})",
							"Command",
							"toJSON()",
							"fromString(str, workDir = '.')",
							"([m]) =>",
							"CompileCommand",
							"constructor(a, workDir = '.')",
							"get includePaths()",
							"get defines()",
							"get cflags()",
							"inc =>",
							"def =>",
							"get flags()",
							"get args()",
							"get sources()",
							"arg =>",
							"set sources(arg)",
							"get source()",
							"set source(arg)",
							"toObject()",
							"CompileCommand",
							"get output()",
							"a =>",
							"set output(arg)",
							"a =>",
							"LinkCommand",
							"constructor(a, workDir = '.')",
							"get libraries()",
							"get libpaths()",
							"get linkflags()",
							"get args()",
							"(arg,i) =>",
							"get objects()",
							"(arg, i) =>",
							"arg =>",
							"get flags()",
							"t =>",
							"LinkCommand",
							"Command",
							" function ArgumentType(arg, i = Number.MAX_SAFE_INTEGER)",
							" function ArgumentIs(pred)",
							" arg =>",
							" arg =>",
							" arg =>",
							" function CommandType(command)",
							" function MakeCommands(text, workDir = '.')",
							"line =>",
							" function MakeCommand(arrayOrString, workDir = '.')",
							"([m]) =>",
							"LinkCommand",
							"get output()",
							"a =>",
							"(a, i) =>",
							"set output(arg)",
							"a =>",
							" function NinjaRule(command)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAZm4gPT4KKC4uLmFyZ3MpID0+CiAgaXRlcihhcnIpCmZuID0+CiguLi5hcmdzKSA9PgogIC5zb3VyY2VzTWFwID0gb3V0cHV0RmlsZSA9PgogIGRlcCA9PgogIHMgPT4KICAuZGVwTWFwID0gaW5wdXRGaWxlID0+CihhY2MsIGNtZCkgPT4KICAudHJhbnNmb3JtTWFwID0gKGlucHV0LCBvdXRwdXQsIG1hcCkgPT4KKC4uLmFyZ3MpID0+CiAgLndvcmtEaXIgPSB3b3JrRGlyID0+CiAgdG9BYnNvbHV0ZShwKQogIHRvUmVsYXRpdmUocCkKICB0b1JlbChwKQogIC5yZWxhdGl2ZU1hcCA9IChyZWxhdGl2ZVRvLCBtYXApID0+CiAgbm06ICguLi5hcmdzKSA9PgogIG0gPT4KICBlbnRyeSA9PgooW2ZpbGUsIGRhdGFdKSA9PgooYWNjLCBbZmlsZSwgYWRkciwgdHlwZSwgbmFtZV0pID0+CiAgbWFpbiguLi5hcmdsaXN0KQogIGdldCBkZXBlbmRlbmNpZXMoKQooYXJnLCBpKSA9PgogIGdldCBDRkxBR1MoKQogIGQgPT4KICBpID0+CiAgZGlyID0+CihlbnRyeSwgZmlsZSkgPT4KICBnZXQgZGVwZW5kZW5jaWVzKCkAAAAAAAAAAPwEAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					8,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD8BAAAQ29tbWFuZAogIGNvbnN0cnVjdG9yKGEsIHdvcmtEaXIgPSAnLicpCiAgZ2V0IHByb2dyYW0oKQogIHNldCBwcm9ncmFtKGFyZykKICBhYnNvbHV0ZVBhdGgocGF0aCkKICBhcmd1bWVudHNPZlR5cGUodHlwZSkKKGFyZywgaSkgPT4KICBnZXQgd2FybkZsYWdzKCkKICBnZXQgZGVidWdGbGFncygpCiAgZ2V0IG9wdEZsYWdzKCkKICBnZXQgZGVwRmxhZ3MoKQogIGdldCBtb2RlRmxhZygpCiAgaXNDb21waWxlKCkKICBpc1ByZXByb2Nlc3MoKQogIGlzQXNzZW1ibGUoKQogIGlzTGluaygpCiAgdG9TdHJpbmcoZGVsaW0pCiAgdG9BcnJheSgpCiAgcmVtb3ZlKC4uLmFyZ3MpCiAgZ2V0IGRlcGVuZGVuY2llcygpCiAgZ2V0IG91dHB1dEZpbGUoKQogIGFic29sdXRlKCkKKGFyZywgaSkgPT4KICByZWxhdGl2ZSh0bykKKGFyZywgaSkgPT4KICBydW4ob3B0cz17fSkKQ29tbWFuZAogIHRvSlNPTigpCiAgZnJvbVN0cmluZyhzdHIsIHdvcmtEaXIgPSAnLicpCihbbV0pID0+CkNvbXBpbGVDb21tYW5kCiAgY29uc3RydWN0b3IoYSwgd29ya0RpciA9ICcuJykKICBnZXQgaW5jbHVkZVBhdGhzKCkKICBnZXQgZGVmaW5lcygpCiAgZ2V0IGNmbGFncygpCiAgaW5jID0+CiAgZGVmID0+CiAgZ2V0IGZsYWdzKCkKICBnZXQgYXJncygpCiAgZ2V0IHNvdXJjZXMoKQogIGFyZyA9PgogIHNldCBzb3VyY2VzKGFyZykKICBnZXQgc291cmNlKCkKICBzZXQgc291cmNlKGFyZykKICB0b09iamVjdCgpCkNvbXBpbGVDb21tYW5kCiAgZ2V0IG91dHB1dCgpCiAgYSA9PgogIHNldCBvdXRwdXQoYXJnKQogIGEgPT4KTGlua0NvbW1hbmQKICBjb25zdHJ1Y3RvcihhLCB3b3JrRGlyID0gJy4nKQogIGdldCBsaWJyYXJpZXMoKQogIGdldCBsaWJwYXRocygpCiAgZ2V0IGxpbmtmbGFncygpCiAgZ2V0IGFyZ3MoKQooYXJnLGkpID0+CiAgZ2V0IG9iamVjdHMoKQooYXJnLCBpKSA9PgogIGFyZyA9PgogIGdldCBmbGFncygpCiAgdCA9PgpMaW5rQ29tbWFuZApDb21tYW5kCkFyZ3VtZW50VHlwZShhcmcsIGkgPSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUikKQXJndW1lbnRJcyhwcmVkKQphcmcgPT4KYXJnID0+CmFyZyA9PgpDb21tYW5kVHlwZShjb21tYW5kKQpNYWtlQ29tbWFuZHModGV4dCwgd29ya0RpciA9ICcuJykKICBsaW5lID0+Ck1ha2VDb21tYW5kKGFycmF5T3JTdHJpbmcsIHdvcmtEaXIgPSAnLicpCihbbV0pID0+CkxpbmtDb21tYW5kCiAgZ2V0IG91dHB1dCgpCiAgYSA9PgooYSwgaSkgPT4KICBzZXQgb3V0cHV0KGFyZykKICBhID0+Ck5pbmphUnVsZShjb21tYW5kKQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					9,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/container/weakStackFrame.js",
						"symkeys":
						[
							[
								75,
								89
							],
							[
								94,
								116
							],
							[
								162,
								181
							],
							[
								281,
								294
							],
							[
								381,
								397
							],
							[
								672,
								677
							],
							[
								717,
								729
							],
							[
								777,
								788
							],
							[
								835,
								858
							],
							[
								1017,
								1031
							]
						],
						"symlist":
						[
							"WeakStackFrame",
							"static create(...args)",
							"constructor(parent)",
							"push(...args)",
							"replace(...args)",
							"pop()",
							"get parent()",
							"get depth()",
							"*ancestors(includeSelf)",
							"WeakStackFrame"
						]
					},
					"AQAAAAAAAAAAAAAArAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					10,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/net/reconnectingWebSocket.js",
						"symkeys":
						[
							[
								112,
								133
							],
							[
								642,
								681
							],
							[
								1045,
								1064
							],
							[
								1243,
								1262
							],
							[
								1439,
								1461
							],
							[
								1639,
								1656
							],
							[
								1827,
								1840
							],
							[
								2094,
								2126
							],
							[
								2172,
								2177
							],
							[
								2816,
								2835
							],
							[
								3044,
								3061
							],
							[
								3369,
								3376
							],
							[
								3648,
								3679
							],
							[
								3704,
								3708
							],
							[
								3853,
								3857
							],
							[
								4029,
								4050
							],
							[
								4152,
								4157
							]
						],
						"symlist":
						[
							"ReconnectingWebSocket",
							"constructor(host, protocols = [], ctor)",
							"onMessage(callback)",
							"onConnect(callback)",
							"onDisconnect(callback)",
							"onError(callback)",
							"send(content)",
							"unsubscribe(eventType, callback)",
							"cb =>",
							"on(event, callback)",
							"rebindCallbacks()",
							"data =>",
							"registerReconnectionListeners()",
							"e =>",
							"e =>",
							"attemptReconnecting()",
							"() =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACsAAAAV2Vha1N0YWNrRnJhbWUKICBzdGF0aWMgY3JlYXRlKC4uLmFyZ3MpCiAgY29uc3RydWN0b3IocGFyZW50KQogIHB1c2goLi4uYXJncykKICByZXBsYWNlKC4uLmFyZ3MpCiAgcG9wKCkKICBnZXQgcGFyZW50KCkKICBnZXQgZGVwdGgoKQoqYW5jZXN0b3JzKGluY2x1ZGVTZWxmKQpXZWFrU3RhY2tGcmFtZQAAAAAAAAAAVQEAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					11,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/net/webSocketStream.js",
						"symkeys":
						[
							[
								6,
								25
							],
							[
								226,
								256
							],
							[
								480,
								492
							],
							[
								873,
								878
							],
							[
								965,
								991
							],
							[
								1036,
								1042
							],
							[
								1260,
								1266
							],
							[
								1481,
								1488
							],
							[
								1550,
								1563
							],
							[
								1637,
								1662
							],
							[
								1810,
								1823
							],
							[
								1897,
								1914
							],
							[
								1980,
								2020
							],
							[
								2049,
								2055
							],
							[
								2115,
								2120
							],
							[
								2179,
								2191
							],
							[
								2363,
								2381
							],
							[
								2457,
								2479
							],
							[
								3092,
								3099
							],
							[
								3221,
								3228
							],
							[
								3434,
								3440
							],
							[
								3491,
								3531
							],
							[
								3550,
								3556
							],
							[
								3596,
								3601
							]
						],
						"symlist":
						[
							"WebSocketStreamImpl",
							"constructor(url, options = {})",
							"async (e) =>",
							"() =>",
							"async (resolve, reject) =>",
							"(r) =>",
							"(e) =>",
							" (e) =>",
							"start: (c) =>",
							"cancel: async (reason) =>",
							"start: (c) =>",
							"write: (value) =>",
							"close({ code = 1000, reason = \"\" } = {})",
							"(r) =>",
							"() =>",
							"close: () =>",
							"abort: (reason) =>",
							" ({ code, reason }) =>",
							" (e) =>",
							" (e) =>",
							"(e) =>",
							"close({ code = 1000, reason = \"\" } = {})",
							"(r) =>",
							"() =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABVAQAAUmVjb25uZWN0aW5nV2ViU29ja2V0CiAgY29uc3RydWN0b3IoaG9zdCwgcHJvdG9jb2xzID0gW10sIGN0b3IpCiAgb25NZXNzYWdlKGNhbGxiYWNrKQogIG9uQ29ubmVjdChjYWxsYmFjaykKICBvbkRpc2Nvbm5lY3QoY2FsbGJhY2spCiAgb25FcnJvcihjYWxsYmFjaykKICBzZW5kKGNvbnRlbnQpCiAgdW5zdWJzY3JpYmUoZXZlbnRUeXBlLCBjYWxsYmFjaykKICBjYiA9PgogIG9uKGV2ZW50LCBjYWxsYmFjaykKICByZWJpbmRDYWxsYmFja3MoKQogIGRhdGEgPT4KICByZWdpc3RlclJlY29ubmVjdGlvbkxpc3RlbmVycygpCiAgZSA9PgogIGUgPT4KICBhdHRlbXB0UmVjb25uZWN0aW5nKCkKKCkgPT4AAAAAAAAAAHQBAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					12,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/io-helpers.js",
						"symkeys":
						[
							[
								315,
								339
							],
							[
								533,
								570
							],
							[
								601,
								607
							],
							[
								673,
								686
							],
							[
								717,
								745
							],
							[
								989,
								1011
							],
							[
								1094,
								1127
							],
							[
								1209,
								1221
							],
							[
								1589,
								1621
							],
							[
								1687,
								1717
							],
							[
								1820,
								1851
							],
							[
								1919,
								1932
							],
							[
								2152,
								2160
							],
							[
								2245,
								2273
							],
							[
								2443,
								2484
							],
							[
								2706,
								2750
							],
							[
								2850,
								2881
							],
							[
								3248,
								3291
							],
							[
								3432,
								3480
							],
							[
								3793,
								3825
							],
							[
								3932,
								3972
							],
							[
								4134,
								4163
							],
							[
								4284,
								4317
							],
							[
								4378,
								4414
							],
							[
								4482,
								4509
							],
							[
								4562,
								4603
							],
							[
								4629,
								4638
							],
							[
								4680,
								4705
							],
							[
								4831,
								4841
							],
							[
								4959,
								4964
							],
							[
								5064,
								5074
							],
							[
								5151,
								5166
							],
							[
								5237,
								5251
							],
							[
								5371,
								5418
							],
							[
								5826,
								5857
							],
							[
								6285,
								6315
							],
							[
								6347,
								6365
							],
							[
								6484,
								6490
							]
						],
						"symlist":
						[
							" function IfDebug(token)",
							" function LogIfDebug(token, loggerFn)",
							" () =>",
							" (...args) =>",
							" function ReadFd(fd, binary)",
							" function IsStdio(obj)",
							" function ReadClose(file, binary)",
							"function* ()",
							" function ReadFile(name, binary)",
							" function ReadAny(obj, binary)",
							" function LoadHistory(filename)",
							"parse = () =>",
							"entry =>",
							" function ReadJSON(filename)",
							"async function ReadXML(filename, ...args)",
							"async function WriteXML(name, data, ...args)",
							" function WriteFile(file, data)",
							" function WriteFd(fd, data, offset, length)",
							" function WriteClose(file, data, offset, length)",
							" function WriteAny(obj, ...args)",
							" function WriteJSON(name, data, ...args)",
							" function ReadBJSON(filename)",
							" function WriteBJSON(name, value)",
							" function* Filter(gen, regEx = /.*/)",
							" function FilterImages(gen)",
							" function SortFiles(arr, field = 'ctime')",
							"(a, b) =>",
							" function* StatFiles(gen)",
							"toString()",
							"() =>",
							"toString()",
							"get landscape()",
							"get portrait()",
							"async function* FdReader(fd, bufferSize = 1024)",
							" function CopyToClipboard(text)",
							" function LogCall(fn, thisObj)",
							" function(...args)",
							"arg =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB0AQAAV2ViU29ja2V0U3RyZWFtSW1wbAogIGNvbnN0cnVjdG9yKHVybCwgb3B0aW9ucyA9IHt9KQooZSkgPT4KKCkgPT4KKHJlc29sdmUsIHJlamVjdCkgPT4KKHIpID0+CihlKSA9PgooZSkgPT4KICBzdGFydDogKGMpID0+CiAgY2FuY2VsOiAocmVhc29uKSA9PgogIHN0YXJ0OiAoYykgPT4KICB3cml0ZTogKHZhbHVlKSA9PgogIGNsb3NlKHsgY29kZSA9IDEwMDAsIHJlYXNvbiA9ICIiIH0gPSB7fSkKKHIpID0+CigpID0+CiAgY2xvc2U6ICgpID0+CiAgYWJvcnQ6IChyZWFzb24pID0+Cih7IGNvZGUsIHJlYXNvbiB9KSA9PgooZSkgPT4KKGUpID0+CihlKSA9PgogIGNsb3NlKHsgY29kZSA9IDEwMDAsIHJlYXNvbiA9ICIiIH0gPSB7fSkKKHIpID0+CigpID0+AAAAAAAAAADwAgAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					13,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/mozdev.js",
						"symkeys":
						[
							[
								137,
								162
							],
							[
								643,
								647
							],
							[
								679,
								701
							],
							[
								722,
								733
							],
							[
								790,
								798
							],
							[
								844,
								868
							],
							[
								938,
								942
							],
							[
								1024,
								1035
							],
							[
								1111,
								1120
							],
							[
								1228,
								1242
							],
							[
								1315,
								1327
							],
							[
								1489,
								1497
							],
							[
								1817,
								1824
							],
							[
								1886,
								1895
							],
							[
								1963,
								1973
							],
							[
								2065,
								2081
							],
							[
								2162,
								2184
							],
							[
								2351,
								2361
							]
						],
						"symlist":
						[
							" function FetchClass(url)",
							"e =>",
							"simplifyList = list =>",
							"([a, b]) =>",
							"([a]) =>",
							"summaryList = summary =>",
							"e =>",
							"([name]) =>",
							"(a, e) =>",
							"makeURL = p =>",
							"getURL(name)",
							"entry =>",
							"*keys()",
							"*values()",
							"*entries()",
							"pred = (k, v) =>",
							"pred = (key, value) =>",
							"get name()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADwAgAASWZEZWJ1Zyh0b2tlbikKTG9nSWZEZWJ1Zyh0b2tlbiwgbG9nZ2VyRm4pCigpID0+CiguLi5hcmdzKSA9PgpSZWFkRmQoZmQsIGJpbmFyeSkKSXNTdGRpbyhvYmopClJlYWRDbG9zZShmaWxlLCBiaW5hcnkpCigpClJlYWRGaWxlKG5hbWUsIGJpbmFyeSkKUmVhZEFueShvYmosIGJpbmFyeSkKTG9hZEhpc3RvcnkoZmlsZW5hbWUpCiAgcGFyc2UgPSAoKSA9PgogIGVudHJ5ID0+ClJlYWRKU09OKGZpbGVuYW1lKQpSZWFkWE1MKGZpbGVuYW1lLCAuLi5hcmdzKQpXcml0ZVhNTChuYW1lLCBkYXRhLCAuLi5hcmdzKQpXcml0ZUZpbGUoZmlsZSwgZGF0YSkKV3JpdGVGZChmZCwgZGF0YSwgb2Zmc2V0LCBsZW5ndGgpCldyaXRlQ2xvc2UoZmlsZSwgZGF0YSwgb2Zmc2V0LCBsZW5ndGgpCldyaXRlQW55KG9iaiwgLi4uYXJncykKV3JpdGVKU09OKG5hbWUsIGRhdGEsIC4uLmFyZ3MpClJlYWRCSlNPTihmaWxlbmFtZSkKV3JpdGVCSlNPTihuYW1lLCB2YWx1ZSkKRmlsdGVyKGdlbiwgcmVnRXggPSAvLiovKQpGaWx0ZXJJbWFnZXMoZ2VuKQpTb3J0RmlsZXMoYXJyLCBmaWVsZCA9ICdjdGltZScpCihhLCBiKSA9PgpTdGF0RmlsZXMoZ2VuKQogIHRvU3RyaW5nKCkKKCkgPT4KICB0b1N0cmluZygpCiAgZ2V0IGxhbmRzY2FwZSgpCiAgZ2V0IHBvcnRyYWl0KCkKRmRSZWFkZXIoZmQsIGJ1ZmZlclNpemUgPSAxMDI0KQpDb3B5VG9DbGlwYm9hcmQodGV4dCkKTG9nQ2FsbChmbiwgdGhpc09iaikKZnVuY3Rpb24oLi4uYXJncykKICBhcmcgPT4AAAAAAAAAAP0AAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					14,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
						"symkeys":
						[
							[
								501,
								515
							],
							[
								595,
								618
							],
							[
								756,
								773
							],
							[
								814,
								831
							],
							[
								864,
								873
							],
							[
								907,
								917
							],
							[
								951,
								961
							],
							[
								996,
								1007
							],
							[
								1041,
								1051
							],
							[
								1086,
								1097
							],
							[
								1134,
								1147
							],
							[
								1185,
								1199
							],
							[
								1235,
								1247
							],
							[
								1283,
								1295
							],
							[
								1349,
								1369
							],
							[
								1422,
								1435
							],
							[
								1495,
								1516
							],
							[
								1558,
								1574
							],
							[
								1628,
								1647
							],
							[
								1682,
								1698
							],
							[
								1822,
								1856
							],
							[
								1879,
								1911
							],
							[
								1934,
								1977
							],
							[
								3806,
								3825
							],
							[
								3923,
								3939
							],
							[
								4001,
								4019
							],
							[
								4083,
								4102
							],
							[
								4167,
								4176
							],
							[
								4231,
								4248
							],
							[
								4311,
								4328
							],
							[
								4391,
								4405
							],
							[
								4465,
								4480
							],
							[
								4541,
								4556
							],
							[
								4617,
								4625
							],
							[
								4679,
								4691
							],
							[
								4749,
								4759
							],
							[
								4815,
								4826
							],
							[
								4883,
								4891
							],
							[
								4945,
								4967
							],
							[
								5035,
								5050
							],
							[
								5111,
								5133
							],
							[
								5201,
								5217
							],
							[
								5279,
								5295
							],
							[
								5357,
								5369
							],
							[
								5427,
								5439
							],
							[
								5497,
								5510
							],
							[
								5569,
								5587
							],
							[
								5645,
								5663
							],
							[
								5727,
								5749
							],
							[
								5817,
								5844
							],
							[
								5917,
								5934
							],
							[
								5991,
								6008
							],
							[
								6065,
								6082
							],
							[
								6129,
								6145
							],
							[
								6228,
								6244
							],
							[
								6316,
								6332
							],
							[
								6404,
								6421
							],
							[
								6478,
								6498
							],
							[
								6557,
								6577
							],
							[
								6720,
								6739
							],
							[
								6815,
								6822
							],
							[
								6851,
								6871
							],
							[
								6950,
								6965
							],
							[
								7026,
								7052
							],
							[
								7123,
								7139
							],
							[
								7195,
								7208
							],
							[
								7276,
								7294
							],
							[
								7367,
								7380
							],
							[
								7436,
								7450
							],
							[
								7553,
								7579
							],
							[
								7625,
								7646
							],
							[
								7805,
								7830
							],
							[
								7915,
								7957
							],
							[
								8091,
								8131
							],
							[
								11063,
								11088
							],
							[
								11304,
								11352
							],
							[
								11669,
								11704
							],
							[
								11861,
								11879
							],
							[
								11909,
								11914
							],
							[
								12004,
								12031
							],
							[
								12149,
								12184
							],
							[
								12245,
								12249
							],
							[
								12266,
								12270
							],
							[
								12297,
								12306
							],
							[
								12471,
								12500
							],
							[
								12580,
								12610
							],
							[
								12617,
								12620
							],
							[
								12675,
								12707
							],
							[
								12950,
								12980
							],
							[
								13004,
								13020
							],
							[
								13021,
								13044
							],
							[
								13142,
								13177
							],
							[
								13201,
								13217
							],
							[
								13218,
								13241
							],
							[
								13339,
								13372
							],
							[
								13422,
								13445
							],
							[
								13539,
								13572
							],
							[
								14030,
								14036
							],
							[
								14053,
								14069
							],
							[
								14144,
								14156
							],
							[
								14191,
								14202
							],
							[
								14269,
								14290
							],
							[
								14326,
								14337
							],
							[
								14584,
								14590
							],
							[
								14603,
								14619
							],
							[
								14820,
								14825
							],
							[
								14839,
								14848
							],
							[
								14876,
								14899
							],
							[
								14933,
								14946
							],
							[
								14973,
								14978
							],
							[
								15019,
								15041
							],
							[
								15099,
								15105
							],
							[
								15121,
								15137
							],
							[
								15218,
								15245
							],
							[
								15291,
								15297
							],
							[
								15342,
								15354
							],
							[
								15384,
								15417
							],
							[
								15596,
								15614
							],
							[
								15697,
								15715
							],
							[
								15834,
								15852
							],
							[
								16027,
								16060
							],
							[
								16194,
								16207
							],
							[
								16327,
								16348
							],
							[
								16418,
								16436
							],
							[
								16878,
								16917
							],
							[
								16994,
								17011
							],
							[
								17134,
								17148
							],
							[
								17310,
								17327
							],
							[
								17468,
								17485
							],
							[
								17516,
								17533
							],
							[
								17633,
								17650
							],
							[
								17944,
								17958
							],
							[
								18004,
								18027
							],
							[
								18084,
								18091
							],
							[
								18109,
								18116
							],
							[
								18141,
								18166
							],
							[
								18226,
								18233
							],
							[
								18254,
								18261
							],
							[
								18291,
								18346
							],
							[
								18451,
								18458
							],
							[
								18596,
								18620
							],
							[
								18670,
								18674
							],
							[
								18705,
								18739
							],
							[
								18750,
								18763
							],
							[
								18822,
								18867
							],
							[
								18932,
								18943
							],
							[
								18963,
								18983
							],
							[
								19024,
								19053
							],
							[
								19077,
								19088
							],
							[
								19103,
								19115
							],
							[
								19163,
								19202
							],
							[
								19303,
								19307
							],
							[
								19340,
								19345
							],
							[
								19371,
								19377
							],
							[
								19406,
								19412
							],
							[
								19505,
								19518
							],
							[
								19546,
								19559
							],
							[
								19686,
								19697
							],
							[
								19777,
								19837
							],
							[
								19907,
								19924
							],
							[
								19985,
								20009
							],
							[
								20093,
								20120
							],
							[
								20342,
								20362
							],
							[
								20392,
								20403
							],
							[
								20504,
								20539
							],
							[
								20579,
								20597
							],
							[
								20775,
								20796
							],
							[
								20820,
								20830
							],
							[
								20866,
								20895
							],
							[
								20952,
								20962
							],
							[
								21013,
								21018
							],
							[
								21075,
								21088
							],
							[
								21162,
								21221
							],
							[
								21288,
								21313
							],
							[
								21695,
								21725
							],
							[
								22095,
								22135
							],
							[
								22270,
								22281
							],
							[
								22325,
								22362
							],
							[
								22497,
								22508
							],
							[
								22554,
								22610
							],
							[
								22772,
								22836
							],
							[
								22985,
								23036
							],
							[
								23704,
								23766
							],
							[
								23948,
								23973
							],
							[
								24072,
								24097
							],
							[
								24212,
								24281
							],
							[
								24378,
								24400
							],
							[
								24434,
								24445
							],
							[
								24468,
								24490
							],
							[
								24733,
								24805
							],
							[
								24908,
								24979
							],
							[
								25077,
								25128
							],
							[
								25302,
								25349
							],
							[
								25416,
								25459
							],
							[
								25589,
								25646
							],
							[
								25740,
								25746
							],
							[
								25760,
								25766
							],
							[
								26072,
								26106
							],
							[
								26409,
								26433
							],
							[
								26500,
								26505
							],
							[
								26534,
								26539
							],
							[
								26816,
								26829
							],
							[
								26885,
								26937
							],
							[
								26943,
								26960
							],
							[
								26990,
								26999
							],
							[
								27015,
								27025
							],
							[
								27037,
								27054
							],
							[
								27077,
								27086
							],
							[
								27087,
								27110
							],
							[
								27155,
								27179
							],
							[
								27265,
								27309
							],
							[
								27479,
								27513
							],
							[
								27579,
								27615
							],
							[
								27670,
								27687
							],
							[
								28013,
								28058
							],
							[
								28165,
								28178
							],
							[
								28269,
								28282
							],
							[
								28381,
								28394
							],
							[
								28468,
								28511
							],
							[
								28512,
								28531
							],
							[
								28546,
								28550
							],
							[
								28673,
								28693
							],
							[
								28746,
								28769
							],
							[
								28849,
								28869
							],
							[
								28951,
								28969
							],
							[
								29112,
								29130
							],
							[
								29203,
								29235
							],
							[
								29246,
								29272
							],
							[
								29381,
								29390
							],
							[
								29593,
								29625
							],
							[
								29654,
								29670
							],
							[
								29685,
								29692
							],
							[
								29711,
								29730
							],
							[
								29769,
								29790
							],
							[
								29830,
								29843
							],
							[
								29894,
								29915
							],
							[
								30085,
								30113
							],
							[
								30332,
								30349
							],
							[
								30350,
								30364
							],
							[
								30386,
								30393
							],
							[
								30444,
								30461
							],
							[
								30462,
								30471
							],
							[
								30531,
								30548
							],
							[
								30549,
								30572
							],
							[
								30628,
								30652
							],
							[
								33318,
								33346
							],
							[
								33777,
								33781
							],
							[
								33910,
								33923
							],
							[
								34239,
								34251
							],
							[
								34515,
								34528
							],
							[
								34634,
								34648
							],
							[
								35542,
								35570
							],
							[
								35687,
								35700
							],
							[
								35814,
								35838
							],
							[
								35931,
								35965
							],
							[
								36090,
								36129
							],
							[
								36176,
								36213
							],
							[
								36260,
								36287
							],
							[
								36298,
								36314
							],
							[
								36372,
								36394
							],
							[
								36427,
								36437
							],
							[
								36487,
								36499
							],
							[
								36783,
								36793
							],
							[
								36868,
								36880
							],
							[
								37161,
								37187
							],
							[
								37439,
								37487
							],
							[
								37535,
								37647
							],
							[
								37753,
								37776
							],
							[
								37915,
								37947
							],
							[
								38263,
								38317
							],
							[
								38680,
								38732
							],
							[
								38871,
								38897
							],
							[
								39181,
								39197
							],
							[
								39364,
								39375
							],
							[
								39578,
								39630
							],
							[
								39806,
								39888
							],
							[
								40049,
								40059
							],
							[
								40077,
								40090
							],
							[
								40269,
								40304
							],
							[
								40465,
								40524
							],
							[
								41009,
								41045
							],
							[
								41204,
								41220
							],
							[
								41234,
								41256
							],
							[
								41370,
								41376
							],
							[
								41482,
								41495
							],
							[
								43110,
								43148
							],
							[
								43248,
								43264
							],
							[
								43337,
								43381
							],
							[
								43697,
								43717
							],
							[
								43920,
								43962
							],
							[
								44160,
								44191
							],
							[
								44241,
								44283
							],
							[
								44405,
								44429
							],
							[
								44689,
								44699
							],
							[
								44747,
								44751
							],
							[
								44787,
								44818
							],
							[
								44829,
								44846
							],
							[
								44989,
								45023
							],
							[
								45262,
								45281
							],
							[
								45319,
								45341
							],
							[
								45454,
								45476
							],
							[
								45589,
								45624
							],
							[
								45672,
								45699
							],
							[
								45790,
								45828
							],
							[
								46037,
								46085
							],
							[
								46670,
								46699
							],
							[
								47148,
								47188
							],
							[
								47283,
								47310
							],
							[
								47367,
								47394
							],
							[
								47600,
								47614
							],
							[
								47663,
								47669
							],
							[
								47710,
								47776
							],
							[
								47778,
								47782
							],
							[
								47940,
								47947
							],
							[
								48039,
								48049
							],
							[
								48160,
								48169
							],
							[
								48275,
								48301
							],
							[
								48434,
								48465
							],
							[
								48630,
								48653
							],
							[
								48792,
								48816
							],
							[
								48986,
								49009
							],
							[
								49189,
								49208
							],
							[
								49250,
								49258
							],
							[
								49306,
								49315
							],
							[
								49349,
								49358
							],
							[
								49392,
								49401
							],
							[
								49435,
								49444
							],
							[
								49478,
								49487
							],
							[
								49520,
								49529
							],
							[
								49563,
								49572
							],
							[
								49606,
								49615
							],
							[
								49640,
								49674
							],
							[
								49820,
								49865
							],
							[
								49931,
								49941
							],
							[
								49980,
								49990
							],
							[
								50010,
								50020
							],
							[
								50049,
								50074
							],
							[
								50206,
								50231
							],
							[
								50330,
								50365
							],
							[
								50418,
								50452
							],
							[
								50534,
								50570
							],
							[
								50699,
								50703
							],
							[
								50734,
								50738
							],
							[
								50781,
								50785
							],
							[
								50813,
								50817
							],
							[
								50846,
								50874
							],
							[
								51004,
								51008
							],
							[
								51031,
								51062
							],
							[
								51401,
								51437
							],
							[
								51686,
								51716
							],
							[
								51885,
								51889
							],
							[
								52174,
								52201
							],
							[
								52245,
								52254
							],
							[
								52307,
								52319
							],
							[
								52462,
								52474
							],
							[
								52601,
								52626
							],
							[
								52666,
								52692
							],
							[
								52946,
								52970
							],
							[
								53164,
								53187
							],
							[
								53285,
								53432
							],
							[
								53441,
								53523
							],
							[
								53564,
								53575
							],
							[
								53577,
								53589
							],
							[
								53815,
								53835
							],
							[
								54052,
								54067
							],
							[
								54348,
								54371
							],
							[
								54577,
								54595
							],
							[
								54809,
								54823
							],
							[
								54884,
								54896
							],
							[
								54956,
								54965
							],
							[
								55243,
								55259
							],
							[
								55695,
								55731
							],
							[
								55859,
								55868
							],
							[
								56044,
								56055
							],
							[
								56066,
								56074
							],
							[
								56123,
								56135
							],
							[
								56382,
								56394
							],
							[
								56579,
								56605
							],
							[
								56624,
								56628
							],
							[
								56715,
								56739
							],
							[
								56817,
								56846
							],
							[
								56900,
								56931
							],
							[
								56938,
								56941
							],
							[
								56985,
								56998
							],
							[
								57089,
								57160
							],
							[
								57186,
								57212
							],
							[
								57356,
								57386
							],
							[
								57545,
								57565
							],
							[
								57645,
								57678
							],
							[
								57835,
								57891
							],
							[
								57902,
								57918
							],
							[
								58056,
								58087
							],
							[
								58127,
								58178
							],
							[
								58534,
								58562
							],
							[
								58717,
								58781
							],
							[
								58843,
								58858
							],
							[
								58927,
								58941
							],
							[
								58980,
								59003
							],
							[
								59195,
								59213
							],
							[
								59404,
								59474
							],
							[
								59623,
								59647
							],
							[
								59666,
								59674
							],
							[
								59710,
								59725
							],
							[
								59854,
								59867
							],
							[
								60030,
								60046
							],
							[
								60241,
								60267
							],
							[
								60283,
								60305
							],
							[
								60568,
								60572
							],
							[
								60758,
								60780
							],
							[
								60821,
								60834
							],
							[
								60958,
								60980
							],
							[
								61021,
								61034
							],
							[
								61140,
								61162
							],
							[
								61207,
								61220
							],
							[
								61256,
								61278
							],
							[
								61318,
								61331
							],
							[
								61351,
								61392
							],
							[
								61683,
								61706
							],
							[
								61788,
								61810
							],
							[
								61885,
								61905
							],
							[
								62034,
								62045
							],
							[
								62078,
								62095
							],
							[
								62259,
								62278
							],
							[
								62313,
								62335
							],
							[
								62468,
								62489
							],
							[
								62627,
								62647
							],
							[
								62714,
								62737
							],
							[
								62814,
								62836
							],
							[
								62945,
								62969
							],
							[
								63026,
								63038
							],
							[
								63212,
								63230
							],
							[
								63287,
								63299
							],
							[
								63454,
								63477
							],
							[
								63610,
								63626
							],
							[
								63672,
								63685
							],
							[
								63723,
								63790
							],
							[
								63827,
								63849
							],
							[
								63895,
								63908
							],
							[
								63960,
								63973
							],
							[
								64041,
								64064
							],
							[
								64184,
								64206
							],
							[
								64295,
								64308
							],
							[
								64362,
								64378
							],
							[
								64416,
								64420
							],
							[
								64530,
								64567
							],
							[
								64578,
								64588
							],
							[
								64597,
								64626
							],
							[
								64846,
								64862
							],
							[
								64884,
								64895
							],
							[
								64951,
								64978
							],
							[
								65025,
								65043
							],
							[
								65117,
								65152
							],
							[
								65278,
								65299
							],
							[
								65334,
								65343
							],
							[
								65352,
								65360
							],
							[
								65403,
								65412
							],
							[
								65435,
								65444
							],
							[
								65455,
								65463
							],
							[
								65530,
								65539
							],
							[
								65573,
								65601
							],
							[
								65743,
								65762
							],
							[
								65970,
								65996
							],
							[
								66285,
								66307
							],
							[
								66453,
								66475
							],
							[
								66989,
								67039
							],
							[
								67205,
								67254
							],
							[
								67323,
								67330
							],
							[
								67416,
								67430
							],
							[
								67512,
								67522
							],
							[
								67631,
								67635
							],
							[
								67666,
								67686
							],
							[
								67732,
								67745
							],
							[
								67795,
								67807
							],
							[
								67950,
								67965
							],
							[
								68382,
								68420
							],
							[
								68604,
								68615
							],
							[
								68651,
								68672
							],
							[
								68742,
								68749
							],
							[
								68788,
								68818
							],
							[
								68840,
								68856
							],
							[
								68857,
								68877
							],
							[
								68968,
								69003
							],
							[
								69060,
								69123
							],
							[
								69195,
								69227
							],
							[
								69319,
								69341
							],
							[
								69391,
								69434
							],
							[
								69681,
								69706
							],
							[
								69753,
								69783
							],
							[
								69801,
								69819
							],
							[
								69897,
								69902
							],
							[
								69925,
								69942
							]
						],
						"symlist":
						[
							"sliceFn = x =>",
							"ArrayBuffer(start, end)",
							"SharedArrayBuffer",
							"Uint8ClampedArray",
							"Int8Array",
							"Uint8Array",
							"Int16Array",
							"Uint16Array",
							"Int32Array",
							"Uint32Array",
							"BigInt64Array",
							"BigUint64Array",
							"Float32Array",
							"Float64Array",
							"slice = (x, s, e) =>",
							"length = x =>",
							"objectToString = o =>",
							"stringify = v =>",
							"formatNumber = n =>",
							"isNative = fn =>",
							"AsyncFunction = async function x()",
							"GeneratorFunction = function* ()",
							"AsyncGeneratorFunction = async function* ()",
							"isAnyArrayBuffer(v)",
							"isArrayBuffer(v)",
							"isBigInt64Array(v)",
							"isBigUint64Array(v)",
							"isDate(v)",
							"isFloat32Array(v)",
							"isFloat64Array(v)",
							"isInt8Array(v)",
							"isInt16Array(v)",
							"isInt32Array(v)",
							"isMap(v)",
							"isPromise(v)",
							"isProxy(v)",
							"isRegExp(v)",
							"isSet(v)",
							"isSharedArrayBuffer(v)",
							"isUint8Array(v)",
							"isUint8ClampedArray(v)",
							"isUint16Array(v)",
							"isUint32Array(v)",
							"isWeakMap(v)",
							"isWeakSet(v)",
							"isDataView(v)",
							"isBooleanObject(v)",
							"isAsyncFunction(v)",
							"isGeneratorFunction(v)",
							"isAsyncGeneratorFunction(v)",
							"isNumberObject(v)",
							"isBigIntObject(v)",
							"isSymbolObject(v)",
							"isNativeError(v)",
							"isMapIterator(v)",
							"isSetIterator(v)",
							"isStringObject(v)",
							"isArrayBufferView(v)",
							"isArgumentsObject(v)",
							"isBoxedPrimitive(v)",
							"ctor =>",
							"isGeneratorObject(v)",
							"isTypedArray(v)",
							"isModuleNamespaceObject(v)",
							"isConstructor(v)",
							"isIterable(v)",
							"isAsyncIterable(v)",
							"isIterator(v)",
							"isArrayLike(v)",
							" function hasBuiltIn(o, m)",
							" function isAsync(fn)",
							" function format(...args)",
							" function formatWithOptions(opts, ...args)",
							"function formatWithOptionsInternal(o, v)",
							" function assert(...args)",
							" function assertEqual(actual, expected, message)",
							" function setInterval(callback, ms)",
							" function start()",
							"() =>",
							" function clearInterval(id)",
							" function inherits(ctor, superCtor)",
							"ctor",
							"ctor",
							"superCtor",
							" function getConstructor(obj)",
							" function memoize(fn, cache = ",
							"())",
							" function Memoize(n, ...rest)",
							" function chain(first, ...fns)",
							" (acc, fn) =>",
							" function(...args)",
							" function chainRight(first, ...fns)",
							" (acc, fn) =>",
							" function(...args)",
							" function chainArray(tmp, ...fns)",
							"tmp = function(...args)",
							" function getset(target, ...args)",
							"key =>",
							" (key, value) =>",
							" key =>",
							"([k, v]) =>",
							" (key, value) =>",
							"([k, v]) =>",
							"key =>",
							" (key, value) =>",
							"() =>",
							" value =>",
							" function methods(obj)",
							"bind(...args)",
							"fn =>",
							"transform(read, write)",
							"key =>",
							" (key, value) =>",
							" function modifier(...args)",
							" fn =>",
							" newValue =>",
							" function getter(target, ...args)",
							"ret = (...argv) =>",
							"ret = (...argv) =>",
							"ret = (...argv) =>",
							" function setter(target, ...args)",
							" (...argv) =>",
							"ret = (key, value) =>",
							"ret = (...argv) =>",
							" function gettersetter(target, ...args)",
							"fn = (...args) =>",
							" (...args2) =>",
							"fn = (...args) =>",
							"fn = (...args) =>",
							"fn = (...args) =>",
							"fn = (...args) =>",
							" (...args2) =>",
							" function hasFn(target)",
							" key =>",
							" key =>",
							" function remover(target)",
							" key =>",
							" key =>",
							" function getOrCreate(target, create = () => ({}), set)",
							" key =>",
							" function hasGetSet(obj)",
							"m =>",
							" function getSetArgument(get, set)",
							" (...args) =>",
							" function wrapGetSet(getter, setter, ...args)",
							" prop =>",
							" (prop, value) =>",
							" function weakGetSet(...args)",
							" wref =>",
							" value =>",
							" function addremovehas(target, ...args)",
							"n =>",
							"el =>",
							" el =>",
							" el =>",
							" el =>",
							" el =>",
							"has = el =>",
							" function lookupObject(getset, instance = {}, handlers = {})",
							"get(target, prop)",
							"set(target, prop, value)",
							" function mapObject(target)",
							"set: (key, value) =>",
							"get: key =>",
							" function once(fn, thisArg, memoFn)",
							" function(...args)",
							" function waitFor(ms)",
							"resolve =>",
							" function waitCancellable(ms)",
							"resolve =>",
							"() =>",
							"cancel: () =>",
							" function extend(dst, src, options = { enumerable: false })",
							"options = (desc, prop) =>",
							" function define(obj, ...args)",
							" function nonenumerable(props, obj = {})",
							"([k, v]) =>",
							" function enumerable(props, obj = {})",
							"([k, v]) =>",
							" function defineGetter(obj, key, fn, enumerable = false)",
							" function defineGetterSetter(obj, key, g, s, enumerable = false)",
							" function defineGettersSetters(obj, gettersSetters)",
							" function* prototypeIterator(obj, pred = (obj, depth) => true)",
							" function pick(obj, keys)",
							" function omit(obj, keys)",
							" function keys(obj, start = 0, end = obj => obj === Object.prototype)",
							"pred = (obj, depth) =>",
							"end = () =>",
							"pred = (obj, depth) =>",
							" function entries(obj, start = 0, end = obj => obj === Object.prototype)",
							" function values(obj, start = 0, end = obj => obj === Object.prototype)",
							" function getMethodNames(obj, depth = 1, start = 0)",
							" function getMethods(obj, depth = 1, start = 0)",
							" function bindMethods(obj, methods, target)",
							" function properties(obj, options = { enumerable: true })",
							" fn =>",
							" fn =>",
							" function weakDefine(obj, ...args)",
							" function merge(...args)",
							" a =>",
							" a =>",
							"(acc, arg) =>",
							" function weakAssoc(fn = (value, ...args) => Object.",
							"(value, ...args))",
							" () =>",
							" map =>",
							"(obj, ...args) =>",
							" () =>",
							" (obj, ...args) =>",
							"self = (obj, ...args) =>",
							" function getConstructorChain(obj, ...range)",
							" function hasPrototype(obj, proto)",
							" function filter(seq, pred, thisArg)",
							"pred = (el, i) =>",
							" function filterKeys(r, needles, keep = true)",
							"pred = key =>",
							"pred = key =>",
							"(obj, key) =>",
							"curry = (f, arr = [], length = f.length) =>",
							" function(...args)",
							"a =>",
							"(min, max, value) =>",
							"generate = (fn, add) =>",
							"add = (item, gen) =>",
							" function(...args)",
							" function(...args)",
							" function* split(buf, ...points)",
							"splitAt = (b, pos, len) =>",
							"(a, b) =>",
							" function uniquePred(cmp = null)",
							" (el, i, arr) =>",
							"item =>",
							"i : (el, i, arr) =>",
							"unique = (...args) =>",
							"(arr, cmp) =>",
							"function* unique(seq)",
							"getFunctionArguments = fn =>",
							" (offset = 0) =>",
							" (...args) =>",
							"code =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" (red, green, blue) =>",
							"function getAnsiStyles()",
							"value: (red, green, blue) =>",
							"c =>",
							"value: hex =>",
							"character =>",
							"value: hex =>",
							"value: code =>",
							"value: (red, green, blue) =>",
							"value: hex =>",
							" function stripAnsi(str)",
							" function padAnsi(str, n, s = ' ')",
							" function padStartAnsi(str, n, s = ' ')",
							" function padEndAnsi(str, n, s = ' ')",
							" function mapFunctional(fn)",
							" function* (arg)",
							" function map(...args)",
							"ret = a =>",
							"function* ()",
							"ret = a =>",
							"function* ()",
							" function randInt(...args)",
							" function randFloat(min, max, rng = Math.random)",
							" function randStr(n, set = '_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', rng = Math.random)",
							" function toBigInt(arg)",
							" function roundDigits(precision)",
							" function roundTo(value, prec, digits, type = 'round')",
							" function lazyProperty(obj, name, getter, opts = {})",
							"replaceProperty = value =>",
							"async function()",
							" function()",
							" function lazyProperties(obj, gettersObj, opts = {})",
							" function observeProperties(target = {}, obj, fn = (prop, value) => {}, opts = {})",
							"get: () =>",
							"set: value =>",
							" function decorate(decorators, obj)",
							" function decorateProperty(target, property, ...decorators)",
							" function getOpt(options = {}, args)",
							"findOpt = arg =>",
							"([optname, option]) =>",
							"opt =>",
							"(acc, arg) =>",
							" function showHelp(opts, exitCode = 0)",
							"(acc, [name]) =>",
							" (acc, [name, [hasArg, fn, shortOpt]]) =>",
							" function isoDate(d)",
							" function toUnixTime(dateObj, utc = false)",
							" function unixTime(utc = false)",
							" function fromUnixTime(epoch, utc = false)",
							" function range(...args)",
							" (v, k) =>",
							"n =>",
							" function chunkArray(arr, size)",
							"fn = (a, v, i) =>",
							" function decodeHTMLEntities(text)",
							" (match, entity) =>",
							" function ucfirst(str)",
							" function lcfirst(str)",
							" function camelize(str, delim = '')",
							" (match, p1, p2, offset) =>",
							" function decamelize(str, delim = '-')",
							" function shorten(str, max = 40, suffix = '...')",
							" function* bytesToUTF8(bytes)",
							" function codePointsToString(codePoints)",
							" function bufferToString(b)",
							" function arraysInCommon(a)",
							"(itm, indx) =>",
							"arr =>",
							" function arrayFacade(proto, itemFn = (container, i) => container.",
							"(i))",
							"*keys()",
							"*entries()",
							"*values()",
							"forEach(callback, thisArg)",
							"reduce(callback, accu, thisArg)",
							"*map(callback, thisArg)",
							"every(callback, thisArg)",
							"some(callback, thisArg)",
							" function mod(a, b)",
							"b : n =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							" function pushUnique(arr, ...args)",
							" function inserter(dest, next = (k, v) => {})",
							" (k, v) =>",
							" (k, v) =>",
							" (k, v) =>",
							"fn = function(key, value)",
							" function intersect(a, b)",
							" function symmetricDifference(a, b)",
							" function* partitionArray(a, size)",
							" function difference(a, b, includes)",
							"x =>",
							"x =>",
							"x =>",
							"x =>",
							" function intersection(a, b)",
							"x =>",
							" function union(a, b, equality)",
							" function partition(array, callback)",
							" function push(obj, ...values)",
							"v =>",
							" function repeater(n, what)",
							"n = () =>",
							"function* ()",
							"function* ()",
							" function repeat(n, what)",
							" function functionName(fn)",
							" function className(obj)",
							"isArrowFunction = fn =>",
							" function instrument( fn, log = (duration, name, args, ret) => console.log(`function '${name}'` + (ret !== undefined ? ` {= ${escape(ret + '').",
							"(0, 100) + '...'}}` : '') + ` timing: ${duration}ms`), logInterval = 0, //1000 )",
							"now = () =>",
							"([s, ns]) =>",
							"async (args, ret) =>",
							" (args, ret) =>",
							"async function(...args)",
							" function(...args)",
							"newMap = () =>",
							"(...args) =>",
							"get(path)",
							"set(path, value)",
							"catchable = function Catchable(self)",
							"catchable",
							"function ()",
							"then(fn)",
							"(...args) =>",
							"(...args) =>",
							" function isNumeric(value)",
							"v =>",
							" function isIndex(value)",
							" function numericIndex(value)",
							" function histogram(arr, out = ",
							"())",
							"incr = key =>",
							" function propertyLookupHandlers(getter = key => null, setter, thisObj)",
							"get(target, key, receiver)",
							".set = (target, key, value) =>",
							".ownKeys = target =>",
							" function propertyLookup(...args)",
							" function padFn(len, char = ' ', fn = (str, pad) => pad)",
							" (s, n = len) =>",
							" function pad(s, n, char = ' ')",
							" function abbreviate(str, max = 40, suffix = '...')",
							" function trim(str, charset)",
							" function tryFunction(fn, resolve = a => a, reject = () => null)",
							"resolve = () =>",
							"reject = () =>",
							"async function(...args)",
							" function(...args)",
							" function tryCatch(fn, resolve = a => a, reject = () => null, ...args)",
							" function mapAdapter(fn)",
							"get(key)",
							"set(key, value)",
							".keys = () =>",
							".entries = () =>",
							" function mapFunction(map)",
							"fn = function(...args)",
							"m =>",
							".set = (key, value) =>",
							".get = key =>",
							".set = (key, value) =>",
							".get = key =>",
							".set = (key, value) =>",
							".get = key =>",
							".set = (key, value) =>",
							".get = key =>",
							".update = function(key, fn = (k, v) => v)",
							".entries = function* ()",
							".values = function* ()",
							".keys = function* ()",
							" function()",
							"([key, value]) =>",
							".keys = async () =>",
							".entries = async () =>",
							".values = async () =>",
							".keys = function* ()",
							".entries = function* ()",
							".values = function* ()",
							".filter = function(pred)",
							"function* ()",
							".map = function(t)",
							"function* ()",
							".forEach = function(fn)",
							".delete = key =>",
							".has = key =>",
							" function mapWrapper(map, toKey = key => key, fromKey = key => key)",
							".set = (key, value) =>",
							".get = key =>",
							".keys = () =>",
							".entries = function* ()",
							".values = function* ()",
							".has = key =>",
							".delete = key =>",
							"m =>",
							" function weakMapper(createFn, map = ",
							"(), hitFn)",
							"self = function(obj, ...args)",
							".set = (k, v) =>",
							".get = k =>",
							" function wrapGenerator(fn)",
							" function(...args)",
							" function wrapGeneratorMethods(obj)",
							" function isBrowser()",
							" () =>",
							" w =>",
							" () =>",
							" () =>",
							" d =>",
							" () =>",
							" function startInteractive()",
							"function* (re, str)",
							" function indexOf(...args)",
							" (what, offset = 0) =>",
							" (what, offset = 0) =>",
							" function* searchAll(haystack, needle, offset = 0)",
							" function bindProperties(obj, target, props, gen)",
							"name =>",
							"(acc, name) =>",
							" p => v =>",
							"k =>",
							" (a, [k, v]) =>",
							" (...args) =>",
							"(...args) =>",
							" (a, k) =>",
							" function predicate(fn_or_regex, pred)",
							"fn = arg =>",
							".valueOf = function()",
							" arg =>",
							" function transformer(a, ...l)",
							" (acc, fn) =>",
							" function(...v)",
							" function getSystemErrorName(errno)",
							" function Membrane(instance, obj, proto, wrapProp, wrapElement)",
							"get: (target, prop, receiver) =>",
							"has: (target, prop) =>",
							"getOwnPropertyDescriptor: (target, prop) =>",
							"getPrototypeOf: target =>",
							"setPrototypeOf: (target, p) =>",
							"ownKeys: target =>",
							"() =>",
							"(acc, name, i) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD9AAAARmV0Y2hDbGFzcyh1cmwpCiAgZSA9PgogIHNpbXBsaWZ5TGlzdCA9IGxpc3QgPT4KKFthLCBiXSkgPT4KKFthXSkgPT4KICBzdW1tYXJ5TGlzdCA9IHN1bW1hcnkgPT4KICBlID0+CihbbmFtZV0pID0+CihhLCBlKSA9PgogIG1ha2VVUkwgPSBwID0+CiAgZ2V0VVJMKG5hbWUpCiAgZW50cnkgPT4KKmtleXMoKQoqdmFsdWVzKCkKKmVudHJpZXMoKQogIHByZWQgPSAoaywgdikgPT4KICBwcmVkID0gKGtleSwgdmFsdWUpID0+CiAgZ2V0IG5hbWUoKQAAAAAAAAAAwycAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					15,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/mozdev.js",
						"symkeys":
						[
							[
								137,
								162
							],
							[
								643,
								647
							],
							[
								679,
								701
							],
							[
								722,
								733
							],
							[
								790,
								798
							],
							[
								844,
								868
							],
							[
								938,
								942
							],
							[
								1024,
								1035
							],
							[
								1111,
								1120
							],
							[
								1228,
								1242
							],
							[
								1315,
								1327
							],
							[
								1489,
								1497
							],
							[
								1817,
								1824
							],
							[
								1886,
								1895
							],
							[
								1963,
								1973
							],
							[
								2065,
								2081
							],
							[
								2162,
								2184
							],
							[
								2351,
								2361
							]
						],
						"symlist":
						[
							" function FetchClass(url)",
							"e =>",
							"simplifyList = list =>",
							"([a, b]) =>",
							"([a]) =>",
							"summaryList = summary =>",
							"e =>",
							"([name]) =>",
							"(a, e) =>",
							"makeURL = p =>",
							"getURL(name)",
							"entry =>",
							"*keys()",
							"*values()",
							"*entries()",
							"pred = (k, v) =>",
							"pred = (key, value) =>",
							"get name()"
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				],
				[
					16,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/ast-shell.js",
						"symkeys":
						[
							[
								2133,
								2137
							],
							[
								2196,
								2200
							],
							[
								2236,
								2266
							],
							[
								2309,
								2330
							],
							[
								2479,
								2505
							],
							[
								2663,
								2682
							],
							[
								3011,
								3039
							],
							[
								3329,
								3337
							],
							[
								3338,
								3352
							],
							[
								3434,
								3444
							],
							[
								3507,
								3555
							],
							[
								3669,
								3678
							],
							[
								3788,
								3810
							],
							[
								4272,
								4294
							],
							[
								4658,
								4676
							],
							[
								4776,
								4794
							],
							[
								4900,
								4926
							],
							[
								5062,
								5066
							],
							[
								5145,
								5161
							],
							[
								5653,
								5672
							],
							[
								6171,
								6176
							],
							[
								6251,
								6266
							],
							[
								6351,
								6359
							],
							[
								6400,
								6408
							],
							[
								6780,
								6853
							],
							[
								6857,
								6865
							],
							[
								6962,
								6992
							],
							[
								7024,
								7029
							],
							[
								7062,
								7069
							],
							[
								7099,
								7127
							],
							[
								7470,
								7477
							],
							[
								7496,
								7519
							],
							[
								7549,
								7556
							],
							[
								7587,
								7595
							],
							[
								7633,
								7640
							],
							[
								7849,
								7862
							],
							[
								8093,
								8136
							],
							[
								8169,
								8178
							],
							[
								8239,
								8243
							],
							[
								8345,
								8349
							],
							[
								8385,
								8399
							],
							[
								8511,
								8539
							],
							[
								8744,
								8769
							],
							[
								8867,
								8891
							],
							[
								8964,
								8968
							],
							[
								9087,
								9091
							],
							[
								9155,
								9169
							],
							[
								9242,
								9251
							],
							[
								9565,
								9579
							],
							[
								9702,
								9737
							],
							[
								9826,
								9831
							],
							[
								9954,
								9966
							],
							[
								10019,
								10044
							],
							[
								10093,
								10104
							],
							[
								10144,
								10155
							],
							[
								10293,
								10304
							],
							[
								10392,
								10405
							],
							[
								10486,
								10518
							],
							[
								10756,
								10785
							],
							[
								10796,
								10811
							],
							[
								10873,
								10892
							],
							[
								11100,
								11139
							],
							[
								11204,
								11244
							],
							[
								11327,
								11371
							],
							[
								11453,
								11492
							],
							[
								11554,
								11592
							],
							[
								11678,
								11706
							],
							[
								11769,
								11796
							],
							[
								12347,
								12373
							],
							[
								12640,
								12647
							],
							[
								14563,
								14621
							],
							[
								15657,
								15664
							],
							[
								15728,
								15735
							],
							[
								15745,
								15756
							],
							[
								15797,
								15823
							],
							[
								15939,
								15953
							],
							[
								16250,
								16269
							],
							[
								16296,
								16303
							],
							[
								16392,
								16422
							],
							[
								16488,
								16528
							],
							[
								16704,
								16755
							],
							[
								17744,
								17751
							],
							[
								18159,
								18185
							],
							[
								18431,
								18485
							],
							[
								18674,
								18686
							],
							[
								18714,
								18726
							],
							[
								19343,
								19403
							],
							[
								20014,
								20069
							],
							[
								20165,
								20177
							],
							[
								20182,
								20212
							],
							[
								20493,
								20515
							],
							[
								20561,
								20584
							],
							[
								20656,
								20671
							],
							[
								20806,
								20822
							],
							[
								21226,
								21239
							],
							[
								21364,
								21383
							],
							[
								21435,
								21443
							],
							[
								21500,
								21515
							],
							[
								21675,
								21687
							],
							[
								22032,
								22046
							],
							[
								22146,
								22163
							],
							[
								22390,
								22412
							],
							[
								22529,
								22554
							],
							[
								22654,
								22671
							],
							[
								22726,
								22730
							],
							[
								22818,
								22822
							],
							[
								22874,
								22898
							],
							[
								23014,
								23054
							],
							[
								23115,
								23136
							],
							[
								23420,
								23452
							],
							[
								23937,
								23952
							],
							[
								24063,
								24088
							],
							[
								24257,
								24292
							],
							[
								24512,
								24519
							],
							[
								24608,
								24615
							],
							[
								24644,
								24653
							],
							[
								24690,
								24699
							],
							[
								24749,
								24757
							],
							[
								24799,
								24823
							],
							[
								24924,
								24940
							],
							[
								24980,
								25020
							],
							[
								25318,
								25361
							],
							[
								26323,
								26334
							],
							[
								27087,
								27137
							],
							[
								27159,
								27185
							],
							[
								27220,
								27249
							],
							[
								27593,
								27636
							],
							[
								27707,
								27717
							],
							[
								27756,
								27760
							],
							[
								27776,
								27780
							],
							[
								27825,
								27912
							],
							[
								28079,
								28112
							],
							[
								28170,
								28175
							],
							[
								28245,
								28287
							],
							[
								28365,
								28375
							],
							[
								28481,
								28521
							],
							[
								28665,
								28670
							],
							[
								28730,
								28743
							],
							[
								28866,
								28870
							],
							[
								28948,
								28952
							],
							[
								29105,
								29112
							],
							[
								29209,
								29214
							],
							[
								29305,
								29321
							],
							[
								29432,
								29439
							],
							[
								29518,
								29522
							],
							[
								29582,
								29589
							],
							[
								29665,
								29672
							],
							[
								29729,
								29775
							],
							[
								29814,
								29824
							],
							[
								29980,
								30016
							],
							[
								30057,
								30069
							],
							[
								31712,
								31733
							],
							[
								31970,
								32010
							],
							[
								32148,
								32177
							],
							[
								32203,
								32232
							],
							[
								32425,
								32435
							],
							[
								32649,
								32659
							],
							[
								32796,
								32806
							],
							[
								33025,
								33035
							],
							[
								33248,
								33252
							],
							[
								33320,
								33324
							],
							[
								35573,
								35592
							],
							[
								38856,
								38888
							],
							[
								39381,
								39391
							],
							[
								39441,
								39451
							],
							[
								39499,
								39509
							],
							[
								40087,
								40098
							],
							[
								40192,
								40196
							],
							[
								40223,
								40227
							],
							[
								40251,
								40255
							],
							[
								40279,
								40283
							],
							[
								40312,
								40349
							],
							[
								40788,
								40833
							],
							[
								40930,
								40964
							],
							[
								41249,
								41277
							],
							[
								41343,
								41357
							],
							[
								41810,
								41827
							],
							[
								41902,
								41919
							],
							[
								42013,
								42042
							],
							[
								42109,
								42132
							],
							[
								42240,
								42245
							],
							[
								42357,
								42380
							],
							[
								42468,
								42473
							],
							[
								42575,
								42587
							],
							[
								42702,
								42707
							],
							[
								42763,
								42792
							],
							[
								43133,
								43147
							],
							[
								44299,
								44357
							],
							[
								45371,
								45382
							],
							[
								45415,
								45426
							],
							[
								45475,
								45481
							],
							[
								45534,
								45542
							],
							[
								45840,
								45844
							],
							[
								46549,
								46555
							]
						],
						"symlist":
						[
							"d =>",
							"d =>",
							"traceProxy = (obj, handler) =>",
							" function(name, args)",
							"get(target, key, receiver)",
							"member = function()",
							"ConcatIterator = iterator =>",
							" gen =>",
							" (...args) =>",
							"toString()",
							"async function ImportModule(modulePath, ...args)",
							"module =>",
							" (acc, item) =>",
							"function CommandLine()",
							" (...args) =>",
							" (...args) =>",
							" (module, ...args) =>",
							"m =>",
							".show = value =>",
							".printNode = arg =>",
							"() =>",
							"(item, i, a) =>",
							"entry =>",
							"entry =>",
							"function* IncludeAll(dir, maxDepth = Infinity, pred = entry => /\\.[ch]$/.",
							"(entry))",
							"function SelectLocations(node)",
							" n =>",
							"prop =>",
							"function LocationString(loc)",
							"node =>",
							"function Structs(nodes)",
							"node =>",
							"field =>",
							"node =>",
							"(field, i) =>",
							"function Table(list, pred = (n, l) => true)",
							"(n, i) =>",
							"e =>",
							"k =>",
							"([i, l, n]) =>",
							" function returnType(n)",
							" function numArgs(n)",
							" function Params(n)",
							"p =>",
							"k =>",
							"([i, l, n]) =>",
							"(k, j) =>",
							"(acc, name) =>",
							" function padTrunc(len, pad = ' ')",
							" s =>",
							"(name, i) =>",
							"pad = (cols, pad, sep) =>",
							"(key, i) =>",
							"(s, col) =>",
							"(acc, n) =>",
							"(acc, row) =>",
							"function PrintRange(range, file)",
							"function OverlapRange(r1, r2)",
							"GetRange = r =>",
							"InRange = (i, r) =>",
							"function ParentNode(node, ast = $.data)",
							"function NextSibling(node, ast = $.data)",
							"function PreviousSibling(node, ast = $.data)",
							"function FirstChild(node, ast = $.data)",
							"function LastChild(node, ast = $.data)",
							"function Terminate(exitCode)",
							"function ParseStructs(text)",
							"function* (decl, includes)",
							"name =>",
							"function InspectStruct(decl, includes, compiler = 'clang')",
							"line =>",
							"line =>",
							"(col, i) =>",
							"([field, offset, size]) =>",
							"(acc, line) =>",
							"toString(sep = ' ')",
							"line =>",
							"function RoundTo(value, align)",
							"function MakeStructClass(decl, filename)",
							"function* GenerateStructClass(decl, ffiPrefix = '')",
							"line =>",
							" ([field, member]) =>",
							"function GenerateGetSet(name, offset, type, ffiPrefix)",
							"toHex = v =>",
							"toHex = v =>",
							"function ByteLength2TypedArray(byteLength, signed, floating)",
							"function ByteLength2Value(byteLength, signed, floating)",
							"FFI_Function",
							"constructor(node, prefix = '')",
							"([name, type], idx) =>",
							"generateDefine(fp, lib)",
							" (name, lib) =>",
							"colorText = x =>",
							"generateDoc()",
							"push = (...args) =>",
							"field =>",
							"(field, col) =>",
							"js = type =>",
							"generateCall()",
							"([name, type]) =>",
							"generate(fp, lib, exp)",
							"generateFunction(fp, lib)",
							"([name, type]) =>",
							"p =>",
							"p =>",
							"compileFunction(fp, lib)",
							"function FdReader(fd, bufferSize = 1024)",
							"async (push, stop) =>",
							"async function CommandRead(args)",
							"async reader =>",
							" function ReadOutput(fd)",
							"async function LibraryExports(file)",
							"line =>",
							"line =>",
							"column =>",
							"(a, b) =>",
							"entry =>",
							"function SaveLibraries()",
							"(acc, [n, e]) =>",
							"function ProcessFile(file, debug = true)",
							"function ParseECMAScript(file, params = {})",
							" (fr, i) =>",
							"function PrintECMAScript(ast, comments, printer = ",
							"({ indent: 4 }, comments))",
							"function PrintCArray(strings)",
							"function Namespaces(nodePath, ast = $.data)",
							"get = p =>",
							"p =>",
							"n =>",
							"function* Constants(node, t = (name, value) => [name, !isNaN(+value) ? +value : value])",
							"function GetImports(ast = $.data)",
							" n =>",
							"function GetIdentifiers(nodes, key = null)",
							" (n, k) =>",
							"function MemberNames(members, flags = 0)",
							" n =>",
							" path =>",
							"p =>",
							"p =>",
							"name =>",
							" n =>",
							"([node, ptr]) =>",
							"path =>",
							"p =>",
							"name =>",
							"name =>",
							"function UnsetLoc(node, pred = (v, p) => true)",
							" (v, k) =>",
							"function MakeFFI(node, lib, exp, fp)",
							"function* ()",
							"function MakeId(name)",
							"function MakeQuickJSClass(node, ast = $)",
							" (cname, vname = 'ptr') =>",
							" (cname, vname = 'ptr') =>",
							" n =>",
							" n =>",
							" n =>",
							" n =>",
							"n =>",
							"n =>",
							"to_jstype = type =>",
							"async function ASTShell(...args)",
							" (a, p) =>",
							" (a, p) =>",
							" (a, p) =>",
							"get flags()",
							"v =>",
							"v =>",
							"d =>",
							"l =>",
							"async function Compile(file, ...args)",
							"select(name_or_id, pred = n => true, ...args)",
							"getByIdOrName(name_or_id, ...args)",
							"function getType(name_or_id)",
							" n =>",
							"predicate = () =>",
							"namespaceOf(node)",
							"function getClass(name_or_id)",
							"getFunction(name_or_id)",
							" n =>",
							"getVariable(name_or_id)",
							" n =>",
							"getLoc(node)",
							"() =>",
							"pathOf(needle, maxDepth = 10)",
							" n =>",
							"Pointer.prototype.chain = function(step, limit = Infinity)",
							".F = arg =>",
							".T = arg =>",
							" () =>",
							" node =>",
							"s =>",
							" fr =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD9AAAARmV0Y2hDbGFzcyh1cmwpCiAgZSA9PgogIHNpbXBsaWZ5TGlzdCA9IGxpc3QgPT4KKFthLCBiXSkgPT4KKFthXSkgPT4KICBzdW1tYXJ5TGlzdCA9IHN1bW1hcnkgPT4KICBlID0+CihbbmFtZV0pID0+CihhLCBlKSA9PgogIG1ha2VVUkwgPSBwID0+CiAgZ2V0VVJMKG5hbWUpCiAgZW50cnkgPT4KKmtleXMoKQoqdmFsdWVzKCkKKmVudHJpZXMoKQogIHByZWQgPSAoaywgdikgPT4KICBwcmVkID0gKGtleSwgdmFsdWUpID0+CiAgZ2V0IG5hbWUoKQAAAAAAAAAAjQ0AAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					17,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/mozdev.js",
						"symkeys":
						[
							[
								137,
								162
							],
							[
								643,
								647
							],
							[
								679,
								701
							],
							[
								722,
								733
							],
							[
								790,
								798
							],
							[
								844,
								868
							],
							[
								938,
								942
							],
							[
								1024,
								1035
							],
							[
								1111,
								1120
							],
							[
								1228,
								1242
							],
							[
								1315,
								1327
							],
							[
								1489,
								1497
							],
							[
								1817,
								1824
							],
							[
								1886,
								1895
							],
							[
								1963,
								1973
							],
							[
								2065,
								2081
							],
							[
								2162,
								2184
							],
							[
								2351,
								2361
							]
						],
						"symlist":
						[
							" function FetchClass(url)",
							"e =>",
							"simplifyList = list =>",
							"([a, b]) =>",
							"([a]) =>",
							"summaryList = summary =>",
							"e =>",
							"([name]) =>",
							"(a, e) =>",
							"makeURL = p =>",
							"getURL(name)",
							"entry =>",
							"*keys()",
							"*values()",
							"*entries()",
							"pred = (k, v) =>",
							"pred = (key, value) =>",
							"get name()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACNDQAAICBkID0+CiAgZCA9PgogIHRyYWNlUHJveHkgPSAob2JqLCBoYW5kbGVyKSA9PgpmdW5jdGlvbihuYW1lLCBhcmdzKQogIGdldCh0YXJnZXQsIGtleSwgcmVjZWl2ZXIpCiAgbWVtYmVyID0gZnVuY3Rpb24oKQpDb25jYXRJdGVyYXRvciA9IGl0ZXJhdG9yID0+CmdlbiA9PgooLi4uYXJncykgPT4KICB0b1N0cmluZygpCkltcG9ydE1vZHVsZShtb2R1bGVQYXRoLCAuLi5hcmdzKQogIG1vZHVsZSA9PgooYWNjLCBpdGVtKSA9PgpDb21tYW5kTGluZSgpCiguLi5hcmdzKSA9PgooLi4uYXJncykgPT4KKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSB2YWx1ZSA9PgogIC5wcmludE5vZGUgPSBhcmcgPT4KKCkgPT4KKGl0ZW0sIGksIGEpID0+CiAgZW50cnkgPT4KICBlbnRyeSA9PgpJbmNsdWRlQWxsKGRpciwgbWF4RGVwdGggPSBJbmZpbml0eSwgcHJlZCA9IGVudHJ5ID0+IC9cLltjaF0kLy4KKGVudHJ5KSkKU2VsZWN0TG9jYXRpb25zKG5vZGUpCm4gPT4KICBwcm9wID0+CkxvY2F0aW9uU3RyaW5nKGxvYykKICBub2RlID0+ClN0cnVjdHMobm9kZXMpCiAgbm9kZSA9PgogIGZpZWxkID0+CiAgbm9kZSA9PgooZmllbGQsIGkpID0+ClRhYmxlKGxpc3QsIHByZWQgPSAobiwgbCkgPT4gdHJ1ZSkKKG4sIGkpID0+CiAgZSA9PgogIGsgPT4KKFtpLCBsLCBuXSkgPT4KICByZXR1cm5UeXBlKG4pCiAgbnVtQXJncyhuKQpQYXJhbXMobikKICBwID0+CiAgayA9PgooW2ksIGwsIG5dKSA9PgooaywgaikgPT4KKGFjYywgbmFtZSkgPT4KICBwYWRUcnVuYyhsZW4sIHBhZCA9ICcgJykKcyA9PgoobmFtZSwgaSkgPT4KICBwYWQgPSAoY29scywgcGFkLCBzZXApID0+CihrZXksIGkpID0+CihzLCBjb2wpID0+CihhY2MsIG4pID0+CihhY2MsIHJvdykgPT4KUHJpbnRSYW5nZShyYW5nZSwgZmlsZSkKT3ZlcmxhcFJhbmdlKHIxLCByMikKR2V0UmFuZ2UgPSByID0+CkluUmFuZ2UgPSAoaSwgcikgPT4KUGFyZW50Tm9kZShub2RlLCBhc3QgPSAkLmRhdGEpCk5leHRTaWJsaW5nKG5vZGUsIGFzdCA9ICQuZGF0YSkKUHJldmlvdXNTaWJsaW5nKG5vZGUsIGFzdCA9ICQuZGF0YSkKRmlyc3RDaGlsZChub2RlLCBhc3QgPSAkLmRhdGEpCkxhc3RDaGlsZChub2RlLCBhc3QgPSAkLmRhdGEpClRlcm1pbmF0ZShleGl0Q29kZSkKUGFyc2VTdHJ1Y3RzKHRleHQpCihkZWNsLCBpbmNsdWRlcykKICBuYW1lID0+Ckluc3BlY3RTdHJ1Y3QoZGVjbCwgaW5jbHVkZXMsIGNvbXBpbGVyID0gJ2NsYW5nJykKICBsaW5lID0+CiAgbGluZSA9PgooY29sLCBpKSA9PgooW2ZpZWxkLCBvZmZzZXQsIHNpemVdKSA9PgooYWNjLCBsaW5lKSA9PgogIHRvU3RyaW5nKHNlcCA9ICcgJykKICBsaW5lID0+ClJvdW5kVG8odmFsdWUsIGFsaWduKQpNYWtlU3RydWN0Q2xhc3MoZGVjbCwgZmlsZW5hbWUpCkdlbmVyYXRlU3RydWN0Q2xhc3MoZGVjbCwgZmZpUHJlZml4ID0gJycpCiAgbGluZSA9PgooW2ZpZWxkLCBtZW1iZXJdKSA9PgpHZW5lcmF0ZUdldFNldChuYW1lLCBvZmZzZXQsIHR5cGUsIGZmaVByZWZpeCkKICB0b0hleCA9IHYgPT4KICB0b0hleCA9IHYgPT4KQnl0ZUxlbmd0aDJUeXBlZEFycmF5KGJ5dGVMZW5ndGgsIHNpZ25lZCwgZmxvYXRpbmcpCkJ5dGVMZW5ndGgyVmFsdWUoYnl0ZUxlbmd0aCwgc2lnbmVkLCBmbG9hdGluZykKRkZJX0Z1bmN0aW9uCiAgY29uc3RydWN0b3Iobm9kZSwgcHJlZml4ID0gJycpCihbbmFtZSwgdHlwZV0sIGlkeCkgPT4KICBnZW5lcmF0ZURlZmluZShmcCwgbGliKQoobmFtZSwgbGliKSA9PgogIGNvbG9yVGV4dCA9IHggPT4KICBnZW5lcmF0ZURvYygpCiAgcHVzaCA9ICguLi5hcmdzKSA9PgogIGZpZWxkID0+CihmaWVsZCwgY29sKSA9PgogIGpzID0gdHlwZSA9PgogIGdlbmVyYXRlQ2FsbCgpCihbbmFtZSwgdHlwZV0pID0+CiAgZ2VuZXJhdGUoZnAsIGxpYiwgZXhwKQogIGdlbmVyYXRlRnVuY3Rpb24oZnAsIGxpYikKKFtuYW1lLCB0eXBlXSkgPT4KICBwID0+CiAgcCA9PgogIGNvbXBpbGVGdW5jdGlvbihmcCwgbGliKQpGZFJlYWRlcihmZCwgYnVmZmVyU2l6ZSA9IDEwMjQpCihwdXNoLCBzdG9wKSA9PgpDb21tYW5kUmVhZChhcmdzKQogIHJlYWRlciA9PgpSZWFkT3V0cHV0KGZkKQpMaWJyYXJ5RXhwb3J0cyhmaWxlKQogIGxpbmUgPT4KICBsaW5lID0+CiAgY29sdW1uID0+CihhLCBiKSA9PgogIGVudHJ5ID0+ClNhdmVMaWJyYXJpZXMoKQooYWNjLCBbbiwgZV0pID0+ClByb2Nlc3NGaWxlKGZpbGUsIGRlYnVnID0gdHJ1ZSkKUGFyc2VFQ01BU2NyaXB0KGZpbGUsIHBhcmFtcyA9IHt9KQooZnIsIGkpID0+ClByaW50RUNNQVNjcmlwdChhc3QsIGNvbW1lbnRzLCBwcmludGVyID0gCih7IGluZGVudDogNCB9LCBjb21tZW50cykpClByaW50Q0FycmF5KHN0cmluZ3MpCk5hbWVzcGFjZXMobm9kZVBhdGgsIGFzdCA9ICQuZGF0YSkKICBnZXQgPSBwID0+CiAgcCA9PgogIG4gPT4KQ29uc3RhbnRzKG5vZGUsIHQgPSAobmFtZSwgdmFsdWUpID0+IFtuYW1lLCAhaXNOYU4oK3ZhbHVlKSA/ICt2YWx1ZSA6IHZhbHVlXSkKR2V0SW1wb3J0cyhhc3QgPSAkLmRhdGEpCm4gPT4KR2V0SWRlbnRpZmllcnMobm9kZXMsIGtleSA9IG51bGwpCihuLCBrKSA9PgpNZW1iZXJOYW1lcyhtZW1iZXJzLCBmbGFncyA9IDApCm4gPT4KcGF0aCA9PgogIHAgPT4KICBwID0+CiAgbmFtZSA9PgpuID0+Cihbbm9kZSwgcHRyXSkgPT4KICBwYXRoID0+CiAgcCA9PgogIG5hbWUgPT4KICBuYW1lID0+ClVuc2V0TG9jKG5vZGUsIHByZWQgPSAodiwgcCkgPT4gdHJ1ZSkKKHYsIGspID0+Ck1ha2VGRkkobm9kZSwgbGliLCBleHAsIGZwKQooKQpNYWtlSWQobmFtZSkKTWFrZVF1aWNrSlNDbGFzcyhub2RlLCBhc3QgPSAkKQooY25hbWUsIHZuYW1lID0gJ3B0cicpID0+CihjbmFtZSwgdm5hbWUgPSAncHRyJykgPT4KbiA9PgpuID0+Cm4gPT4KbiA9PgogIG4gPT4KICBuID0+CiAgdG9fanN0eXBlID0gdHlwZSA9PgpBU1RTaGVsbCguLi5hcmdzKQooYSwgcCkgPT4KKGEsIHApID0+CihhLCBwKSA9PgogIGdldCBmbGFncygpCiAgdiA9PgogIHYgPT4KICBkID0+CiAgbCA9PgpDb21waWxlKGZpbGUsIC4uLmFyZ3MpCiAgc2VsZWN0KG5hbWVfb3JfaWQsIHByZWQgPSBuID0+IHRydWUsIC4uLmFyZ3MpCiAgZ2V0QnlJZE9yTmFtZShuYW1lX29yX2lkLCAuLi5hcmdzKQogIGdldFR5cGUobmFtZV9vcl9pZCkKbiA9PgogIHByZWRpY2F0ZSA9ICgpID0+CiAgbmFtZXNwYWNlT2Yobm9kZSkKICBnZXRDbGFzcyhuYW1lX29yX2lkKQogIGdldEZ1bmN0aW9uKG5hbWVfb3JfaWQpCm4gPT4KICBnZXRWYXJpYWJsZShuYW1lX29yX2lkKQpuID0+CiAgZ2V0TG9jKG5vZGUpCigpID0+CiAgcGF0aE9mKG5lZWRsZSwgbWF4RGVwdGggPSAxMCkKbiA9PgpQb2ludGVyLnByb3RvdHlwZS5jaGFpbiA9IGZ1bmN0aW9uKHN0ZXAsIGxpbWl0ID0gSW5maW5pdHkpCiAgLkYgPSBhcmcgPT4KICAuVCA9IGFyZyA9PgooKSA9Pgpub2RlID0+CiAgcyA9PgpmciA9PgAAAAAAAAAA/QAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "mozdev.js",
			"settings":
			{
				"buffer_size": 2478,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "import { Parser } from 'dom';"
			},
			"undo_stack":
			[
				[
					1673,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMwFAAAAAAAAzQUAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMwFAAAAAAAAzAUAAAAAAAAAAAAAAADwvw"
				],
				[
					1674,
					1,
					"left_delete",
					null,
					"AQAAAMwFAAAAAAAAzAUAAAAAAAABAAAAIA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM0FAAAAAAAAzQUAAAAAAAAAAAAAAADwvw"
				],
				[
					1675,
					1,
					"insert",
					{
						"characters": ".map"
					},
					"BAAAAMwFAAAAAAAAzQUAAAAAAAAAAAAAzQUAAAAAAADOBQAAAAAAAAAAAADOBQAAAAAAAM8FAAAAAAAAAAAAAM8FAAAAAAAA0AUAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMwFAAAAAAAAzAUAAAAAAAAAAAAAAADwvw"
				],
				[
					1676,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAANAFAAAAAAAA0gUAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANAFAAAAAAAA0AUAAAAAAAAAAAAAAADwvw"
				],
				[
					1677,
					1,
					"insert",
					{
						"characters": "p"
					},
					"AQAAANEFAAAAAAAA0gUAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANEFAAAAAAAA0QUAAAAAAAAAAAAAAADwvw"
				],
				[
					1678,
					1,
					"insert",
					{
						"characters": " =>"
					},
					"AwAAANIFAAAAAAAA0wUAAAAAAAAAAAAA0wUAAAAAAADUBQAAAAAAAAAAAADUBQAAAAAAANUFAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANIFAAAAAAAA0gUAAAAAAAAAAAAAAADwvw"
				],
				[
					1679,
					1,
					"insert",
					{
						"characters": "  r"
					},
					"AwAAANUFAAAAAAAA1gUAAAAAAAAAAAAA1gUAAAAAAADXBQAAAAAAAAAAAADXBQAAAAAAANgFAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANUFAAAAAAAA1QUAAAAAAAAAAAAAAADwvw"
				],
				[
					1680,
					1,
					"left_delete",
					null,
					"AQAAANcFAAAAAAAA1wUAAAAAAAABAAAAcg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANgFAAAAAAAA2AUAAAAAAAAAAAAAAADwvw"
				],
				[
					1681,
					1,
					"insert",
					{
						"characters": "u+"
					},
					"AgAAANcFAAAAAAAA2AUAAAAAAAAAAAAA2AUAAAAAAADZBQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANcFAAAAAAAA1wUAAAAAAAAAAAAAAADwvw"
				],
				[
					1682,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAANkFAAAAAAAA2wUAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANkFAAAAAAAA2QUAAAAAAAAAAAAAAADwvw"
				],
				[
					1683,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAANoFAAAAAAAA2wUAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANoFAAAAAAAA2gUAAAAAAAAAAAAAAADwvw"
				],
				[
					1685,
					1,
					"insert",
					{
						"characters": "+pathname"
					},
					"CQAAANwFAAAAAAAA3QUAAAAAAAAAAAAA3QUAAAAAAADeBQAAAAAAAAAAAADeBQAAAAAAAN8FAAAAAAAAAAAAAN8FAAAAAAAA4AUAAAAAAAAAAAAA4AUAAAAAAADhBQAAAAAAAAAAAADhBQAAAAAAAOIFAAAAAAAAAAAAAOIFAAAAAAAA4wUAAAAAAAAAAAAA4wUAAAAAAADkBQAAAAAAAAAAAADkBQAAAAAAAOUFAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANwFAAAAAAAA3AUAAAAAAAAAAAAAAADwvw"
				],
				[
					1687,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAOYFAAAAAAAA5wUAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOYFAAAAAAAA5gUAAAAAAAAAAAAAAADwvw"
				],
				[
					1692,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD+BgAAaW1wb3J0IHsgUGFyc2VyLCBVUkwgfSBmcm9tICdkb20nOwppbXBvcnQgeyB1cmxHZXQgfSBmcm9tICdzdGQnOwppbXBvcnQgeyBkZWZpbmUsIHByb3BlcnRpZXMsIG5vbmVudW1lcmFibGUgfSBmcm9tICd1dGlsJzsKCmV4cG9ydCBmdW5jdGlvbiBGZXRjaENsYXNzKHVybCkgewogIGNvbnN0IHUgPSBuZXcgVVJMKHVybC5yZXBsYWNlKC9cL1teXC9dKiQvLCAnJykpOwogIGNvbnN0IGJhc2UgPSB1LnBhdGhuYW1lOwogIGNvbnN0IHJlID0gbmV3IFJlZ0V4cCgnXicgKyBiYXNlICsgJy8nKTsKICBjb25zdCBkb2MgPSBuZXcgUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKHVybEdldCh1cmwpKTsKCiAgY29uc3Qga2V5cyA9IHsKICAgIENvbnN0cnVjdG9yOiAnY29uc3RydWN0b3InLAogICAgJ0luc3RhbmNlIHByb3BlcnRpZXMnOiAncHJvcGVydGllcycsCiAgICAnSW5zdGFuY2UgbWV0aG9kcyc6ICdtZXRob2RzJywKICAgIEV2ZW50czogJ2V2ZW50cycsCiAgICBJbmhlcml0YW5jZTogJ2Jhc2VzJywKICAgICdSZWxhdGVkIHBhZ2VzIGZvciBXZWIgQXVkaW8gQVBJJzogJ3JlbGF0ZWQnLAogIH07CgogIGNvbnN0IHN1bW1hcnlFbGVtZW50cyA9IFsuLi5kb2MucXVlcnlTZWxlY3RvckFsbCgnc3VtbWFyeScpXS5maWx0ZXIoZSA9PiBlLmlubmVyVGV4dCBpbiBrZXlzKTsKCiAgY29uc3Qgc2ltcGxpZnlMaXN0ID0gbGlzdCA9PiB7CiAgICBpZihsaXN0LmV2ZXJ5KChbYSwgYl0pID0+IGEucmVwbGFjZSgvXHNFeHBlcmltZW50YWwkLywgJycpID09IGIpKSByZXR1cm4gbGlzdC5tYXAoKFthXSkgPT4gYSk7CgogICAgcmV0dXJuIG5ldyBNYXAobGlzdCk7CiAgfTsKCiAgY29uc3Qgc3VtbWFyeUxpc3QgPSBzdW1tYXJ5ID0+CiAgICBzaW1wbGlmeUxpc3QoCiAgICAgIFsuLi5zdW1tYXJ5Lm5leHRTaWJsaW5nLnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpJyldCiAgICAgICAgLm1hcChlID0+IFtlLmlubmVyVGV4dCwgZS5xdWVyeVNlbGVjdG9yKCdhJykuZ2V0QXR0cmlidXRlKCdocmVmJykucmVwbGFjZShyZSwgJycpXSkKICAgICAgICAuZmlsdGVyKChbbmFtZV0pID0+ICEvXHNEZXByZWNhdGVkJC8udGVzdChuYW1lKSksCiAgICApOwoKICBjb25zdCBzdW1tYXJpZXMgPSBzdW1tYXJ5RWxlbWVudHMucmVkdWNlKAogICAgKGEsIGUpID0+ICh7IC4uLmEsIFtrZXlzW2UuaW5uZXJUZXh0XSA/PyBlLmlubmVyVGV4dF06IHN1bW1hcnlMaXN0KGUpIH0pLAogICAge30sCiAgKTsKCiAgcmV0dXJuIGRlZmluZSgKICAgIHN1bW1hcmllcywKICAgIG5vbmVudW1lcmFibGUoewogICAgICBnZXRVUkwobmFtZSkgewogICAgICAgIGNvbnN0IHJlID0gbmV3IFJlZ0V4cChuYW1lICsgJyhcKFwpfCkoXHMuKnwpJyk7CgogICAgICAgIGZvcihsZXQgaWQgaW4ga2V5cykgewppZihpZCA9PSBuYW1lKSByZXR1cm4gIFsuLi50aGlzW2tleXNbaWRdXV0ubWFwKGVudHJ5ID0+IEFycmF5LmlzQXJyYXkoZW50cnkpID8gZW50cnlbMV0gOiBlbnRyeSkubWFwKHAgPT4gIHUrJy8nK3BhdGhuYW1lKTsKCiAgICAgICAgICBmb3IobGV0IGVudHJ5IG9mIHRoaXNba2V5c1tpZF1dKSB7CiAgICAgICAgICAgIGlmKHR5cGVvZiBlbnRyeSA9PSAnc3RyaW5nJyAmJiByZS50ZXN0KGVudHJ5KSkgcmV0dXJuIHUgKyAnLycgKyBlbnRyeTsKCiAgICAgICAgICAgIGNvbnN0IFtwcm9wLCBwYXRobmFtZV0gPSBlbnRyeTsKCiAgICAgICAgICAgIGlmKHJlLnRlc3QocHJvcCkpIHJldHVybiB1ICsgJy8nICsgcGF0aG5hbWU7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAogICAgfSksCiAgKTsKfQoAAAAAAAAAADYHAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOcFAAAAAAAA5wUAAAAAAAAAAAAAAADwvw"
				],
				[
					1707,
					1,
					"paste",
					null,
					"AgAAAHkFAAAAAAAAgQUAAAAAAAAAAAAAgQUAAAAAAACBBQAAAAAAAAIAAABpZA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHkFAAAAAAAAewUAAAAAAAAAAAAAAADwvw"
				],
				[
					1723,
					1,
					"insert",
					{
						"characters": "p"
					},
					"AgAAABsGAAAAAAAAHAYAAAAAAAAAAAAAHAYAAAAAAAAcBgAAAAAAAAgAAABwYXRobmFtZQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABsGAAAAAAAAIwYAAAAAAAAAAAAAAADwvw"
				],
				[
					1737,
					1,
					"insert",
					{
						"characters": "Object.set"
					},
					"CgAAAMIEAAAAAAAAwwQAAAAAAAAAAAAAwwQAAAAAAADEBAAAAAAAAAAAAADEBAAAAAAAAMUEAAAAAAAAAAAAAMUEAAAAAAAAxgQAAAAAAAAAAAAAxgQAAAAAAADHBAAAAAAAAAAAAADHBAAAAAAAAMgEAAAAAAAAAAAAAMgEAAAAAAAAyQQAAAAAAAAAAAAAyQQAAAAAAADKBAAAAAAAAAAAAADKBAAAAAAAAMsEAAAAAAAAAAAAAMsEAAAAAAAAzAQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMIEAAAAAAAAwgQAAAAAAAAAAAAAAADwvw"
				],
				[
					1738,
					1,
					"insert_completion",
					{
						"completion": "setPrototypeOf($1)",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "setPrototypeOf(...)"
					},
					"AgAAAMkEAAAAAAAAyQQAAAAAAAADAAAAc2V0yQQAAAAAAADZBAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMwEAAAAAAAAzAQAAAAAAAAAAAAAAADwvw"
				],
				[
					1739,
					1,
					"right_delete",
					null,
					"AQAAANgEAAAAAAAA2AQAAAAAAAABAAAAKQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANgEAAAAAAAA2AQAAAAAAAAAAAAAAADwvw"
				],
				[
					1741,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAANoEAAAAAAAA2wQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANoEAAAAAAAA2gQAAAAAAAAAAAAAAADwvw"
				],
				[
					1742,
					1,
					"insert",
					{
						"characters": " null)"
					},
					"BgAAANsEAAAAAAAA3AQAAAAAAAAAAAAA3AQAAAAAAADdBAAAAAAAAAAAAADdBAAAAAAAAN4EAAAAAAAAAAAAAN4EAAAAAAAA3wQAAAAAAAAAAAAA3wQAAAAAAADgBAAAAAAAAAAAAADgBAAAAAAAAOEEAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANsEAAAAAAAA2wQAAAAAAAAAAAAAAADwvw"
				],
				[
					1755,
					1,
					"insert",
					{
						"characters": "\ngetMembetrs"
					},
					"DQAAAEIHAAAAAAAAQwcAAAAAAAAAAAAAQwcAAAAAAABJBwAAAAAAAAAAAABJBwAAAAAAAEoHAAAAAAAAAAAAAEoHAAAAAAAASwcAAAAAAAAAAAAASwcAAAAAAABMBwAAAAAAAAAAAABMBwAAAAAAAE0HAAAAAAAAAAAAAE0HAAAAAAAATgcAAAAAAAAAAAAATgcAAAAAAABPBwAAAAAAAAAAAABPBwAAAAAAAFAHAAAAAAAAAAAAAFAHAAAAAAAAUQcAAAAAAAAAAAAAUQcAAAAAAABSBwAAAAAAAAAAAABSBwAAAAAAAFMHAAAAAAAAAAAAAFMHAAAAAAAAVAcAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEIHAAAAAAAAQgcAAAAAAAAAAAAAAADwvw"
				],
				[
					1756,
					3,
					"left_delete",
					null,
					"AwAAAFMHAAAAAAAAUwcAAAAAAAABAAAAc1IHAAAAAAAAUgcAAAAAAAABAAAAclEHAAAAAAAAUQcAAAAAAAABAAAAdA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFQHAAAAAAAAVAcAAAAAAAAAAAAAAADwvw"
				],
				[
					1757,
					1,
					"insert",
					{
						"characters": "rs"
					},
					"AgAAAFEHAAAAAAAAUgcAAAAAAAAAAAAAUgcAAAAAAABTBwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFEHAAAAAAAAUQcAAAAAAAAAAAAAAADwvw"
				],
				[
					1758,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAFMHAAAAAAAAVQcAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFMHAAAAAAAAUwcAAAAAAAAAAAAAAADwvw"
				],
				[
					1760,
					1,
					"left_delete",
					null,
					"AQAAAFQHAAAAAAAAVAcAAAAAAAABAAAAKQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFUHAAAAAAAAVQcAAAAAAAAAAAAAAADwvw"
				],
				[
					1761,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAFQHAAAAAAAAVQcAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFQHAAAAAAAAVAcAAAAAAAAAAAAAAADwvw"
				],
				[
					1762,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFUHAAAAAAAAVgcAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFUHAAAAAAAAVQcAAAAAAAAAAAAAAADwvw"
				],
				[
					1763,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAFYHAAAAAAAAWAcAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFYHAAAAAAAAVgcAAAAAAAAAAAAAAADwvw"
				],
				[
					1764,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAFcHAAAAAAAAWAcAAAAAAAAAAAAAWAcAAAAAAABeBwAAAAAAAAAAAABeBwAAAAAAAF8HAAAAAAAAAAAAAF8HAAAAAAAAZQcAAAAAAAAAAAAAWAcAAAAAAABYBwAAAAAAAAYAAAAgICAgICBYBwAAAAAAAGAHAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFcHAAAAAAAAVwcAAAAAAAAAAAAAAADwvw"
				],
				[
					1769,
					1,
					"insert",
					{
						"characters": "keys"
					},
					"BgAAAEkHAAAAAAAASgcAAAAAAAAAAAAASgcAAAAAAABKBwAAAAAAAAoAAABnZXRNZW1iZXJzTwcAAAAAAABPBwAAAAAAAAgAAAAgICAgICAgIEoHAAAAAAAASwcAAAAAAAAAAAAASwcAAAAAAABMBwAAAAAAAAAAAABMBwAAAAAAAE0HAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEkHAAAAAAAAUwcAAAAAAAAAAAAAAADwvw"
				],
				[
					1771,
					1,
					"insert",
					{
						"characters": "*"
					},
					"AQAAAEkHAAAAAAAASgcAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEkHAAAAAAAASQcAAAAAAAAAAAAAAABIQA"
				],
				[
					1778,
					1,
					"paste",
					null,
					"AQAAAFMHAAAAAAAAGgkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFMHAAAAAAAAUwcAAAAAAAAAAAAAAADwvw"
				],
				[
					1781,
					1,
					"right_delete",
					null,
					"AQAAAHMHAAAAAAAAcwcAAAAAAAAVAAAAIGlmKGtleXNbaWRdID09IG5hbWUp",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHMHAAAAAAAAiAcAAAAAAAAAAAAAAADwvw"
				],
				[
					1785,
					1,
					"insert",
					{
						"characters": "yield"
					},
					"BgAAAH0HAAAAAAAAfgcAAAAAAAAAAAAAfgcAAAAAAAB+BwAAAAAAABMAAAAgICByZXR1cm4gWy4uLnRoaXNbfgcAAAAAAAB/BwAAAAAAAAAAAAB/BwAAAAAAAIAHAAAAAAAAAAAAAIAHAAAAAAAAgQcAAAAAAAAAAAAAgQcAAAAAAACCBwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJAHAAAAAAAAfQcAAAAAAAAAAAAAAADwvw"
				],
				[
					1786,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIIHAAAAAAAAgwcAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIIHAAAAAAAAggcAAAAAAAAAAAAAAADwvw"
				],
				[
					1788,
					2,
					"left_delete",
					null,
					"AgAAAIwHAAAAAAAAjAcAAAAAAAABAAAAXYsHAAAAAAAAiwcAAAAAAAABAAAAXQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI0HAAAAAAAAjQcAAAAAAAD////////vfw"
				],
				[
					1789,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAIsHAAAAAAAAjAcAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIsHAAAAAAAAiwcAAAAAAAAAAAAAAADwvw"
				],
				[
					1791,
					1,
					"left_delete",
					null,
					"AQAAAGgHAAAAAAAAaAcAAAAAAAABAAAAew",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGkHAAAAAAAAaQcAAAAAAAAAAAAAAABoQA"
				],
				[
					1793,
					7,
					"left_delete",
					null,
					"BwAAAHEHAAAAAAAAcQcAAAAAAAABAAAAIG8HAAAAAAAAbwcAAAAAAAACAAAAICBtBwAAAAAAAG0HAAAAAAAAAgAAACAgawcAAAAAAABrBwAAAAAAAAIAAAAgIGkHAAAAAAAAaQcAAAAAAAACAAAAICBoBwAAAAAAAGgHAAAAAAAAAQAAAApnBwAAAAAAAGcHAAAAAAAAAQAAACA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHIHAAAAAAAAcgcAAAAAAAAAAAAAAABlQA"
				],
				[
					1798,
					1,
					"cut",
					null,
					"AQAAAIEHAAAAAAAAgQcAAAAAAABhAQAAICAgICAgICAgICAgICAubWFwKGVudHJ5ID0+IChBcnJheS5pc0FycmF5KGVudHJ5KSA/IGVudHJ5WzFdIDogZW50cnkpKQogICAgICAgICAgICAgIC5tYXAocCA9PiB1ICsgJy8nICsgcCk7CgogICAgICAgICAgZm9yKGxldCBlbnRyeSBvZiB0aGlzW2tleXNbaWRdXSkgewogICAgICAgICAgICBpZih0eXBlb2YgZW50cnkgPT0gJ3N0cmluZycgJiYgcmUudGVzdChlbnRyeSkpIHJldHVybiB1ICsgJy8nICsgZW50cnk7CgogICAgICAgICAgICBjb25zdCBbcHJvcCwgcGF0aG5hbWVdID0gZW50cnk7CgogICAgICAgICAgICBpZihyZS50ZXN0KHByb3ApKSByZXR1cm4gdSArICcvJyArIHBhdGhuYW1lOwogICAgICAgICAgfQo",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIEHAAAAAAAA4ggAAAAAAAAAAAAAAAAAAA"
				],
				[
					1800,
					1,
					"right_delete",
					null,
					"AQAAAIEHAAAAAAAAgQcAAAAAAAAKAAAAICAgICAgICB9Cg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIEHAAAAAAAAiwcAAAAAAAAAAAAAAAAAAA"
				],
				[
					1817,
					1,
					"insert",
					{
						"characters": "key"
					},
					"BAAAAHsFAAAAAAAAfAUAAAAAAAAAAAAAfAUAAAAAAAB8BQAAAAAAAAIAAABpZHwFAAAAAAAAfQUAAAAAAAAAAAAAfQUAAAAAAAB+BQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHsFAAAAAAAAfQUAAAAAAAAAAAAAAADwvw"
				],
				[
					1823,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AgAAAH8FAAAAAAAAgAUAAAAAAAAAAAAAgAUAAAAAAACABQAAAAAAAAcAAABpbiBrZXlz",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH8FAAAAAAAAhgUAAAAAAAAAAAAAAADwvw"
				],
				[
					1824,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIAFAAAAAAAAgQUAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIAFAAAAAAAAgAUAAAAAAAAAAAAAAADwvw"
				],
				[
					1825,
					2,
					"left_delete",
					null,
					"AgAAAIAFAAAAAAAAgAUAAAAAAAABAAAAIH8FAAAAAAAAfwUAAAAAAAABAAAAZg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIEFAAAAAAAAgQUAAAAAAAAAAAAAAADwvw"
				],
				[
					1826,
					1,
					"insert",
					{
						"characters": "of"
					},
					"AgAAAH8FAAAAAAAAgAUAAAAAAAAAAAAAgAUAAAAAAACBBQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH8FAAAAAAAAfwUAAAAAAAAAAAAAAADwvw"
				],
				[
					1827,
					1,
					"insert",
					{
						"characters": " this.keys"
					},
					"CgAAAIEFAAAAAAAAggUAAAAAAAAAAAAAggUAAAAAAACDBQAAAAAAAAAAAACDBQAAAAAAAIQFAAAAAAAAAAAAAIQFAAAAAAAAhQUAAAAAAAAAAAAAhQUAAAAAAACGBQAAAAAAAAAAAACGBQAAAAAAAIcFAAAAAAAAAAAAAIcFAAAAAAAAiAUAAAAAAAAAAAAAiAUAAAAAAACJBQAAAAAAAAAAAACJBQAAAAAAAIoFAAAAAAAAAAAAAIoFAAAAAAAAiwUAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIEFAAAAAAAAgQUAAAAAAAAAAAAAAADwvw"
				],
				[
					1828,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAIsFAAAAAAAAjQUAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIsFAAAAAAAAiwUAAAAAAAAAAAAAAADwvw"
				],
				[
					1838,
					1,
					"insert",
					{
						"characters": "key"
					},
					"BAAAAJ4FAAAAAAAAnwUAAAAAAAAAAAAAnwUAAAAAAACfBQAAAAAAAAgAAABrZXlzW2lkXZ8FAAAAAAAAoAUAAAAAAAAAAAAAoAUAAAAAAAChBQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ4FAAAAAAAApgUAAAAAAAAAAAAAAADwvw"
				],
				[
					1850,
					1,
					"paste",
					null,
					"AgAAAMcFAAAAAAAAygUAAAAAAAAAAAAAygUAAAAAAADKBQAAAAAAAAgAAABrZXlzW2lkXQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMcFAAAAAAAAzwUAAAAAAAAAAAAAAADwvw"
				],
				[
					1857,
					1,
					"paste",
					null,
					"AgAAAFsGAAAAAAAAXgYAAAAAAAAAAAAAXgYAAAAAAABeBgAAAAAAAAgAAABrZXlzW2lkXQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFsGAAAAAAAAYwYAAAAAAAAAAAAAAADwvw"
				],
				[
					1878,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAIEHAAAAAAAAggcAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIEHAAAAAAAAgQcAAAAAAAAAAAAAAADwvw"
				],
				[
					1879,
					1,
					"left_delete",
					null,
					"AQAAAIEHAAAAAAAAgQcAAAAAAAABAAAALg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIIHAAAAAAAAggcAAAAAAAAAAAAAAADwvw"
				],
				[
					1880,
					1,
					"insert",
					{
						"characters": ",m"
					},
					"AgAAAIEHAAAAAAAAggcAAAAAAAAAAAAAggcAAAAAAACDBwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIEHAAAAAAAAgQcAAAAAAAAAAAAAAADwvw"
				],
				[
					1881,
					1,
					"left_delete",
					null,
					"AQAAAIIHAAAAAAAAggcAAAAAAAABAAAAbQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIMHAAAAAAAAgwcAAAAAAAAAAAAAAADwvw"
				],
				[
					1882,
					1,
					"insert",
					{
						"characters": "\ngetMembers"
					},
					"DAAAAIIHAAAAAAAAgwcAAAAAAAAAAAAAgwcAAAAAAACJBwAAAAAAAAAAAACJBwAAAAAAAIoHAAAAAAAAAAAAAIoHAAAAAAAAiwcAAAAAAAAAAAAAiwcAAAAAAACMBwAAAAAAAAAAAACMBwAAAAAAAI0HAAAAAAAAAAAAAI0HAAAAAAAAjgcAAAAAAAAAAAAAjgcAAAAAAACPBwAAAAAAAAAAAACPBwAAAAAAAJAHAAAAAAAAAAAAAJAHAAAAAAAAkQcAAAAAAAAAAAAAkQcAAAAAAACSBwAAAAAAAAAAAACSBwAAAAAAAJMHAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIIHAAAAAAAAggcAAAAAAAAAAAAAAADwvw"
				],
				[
					1883,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJMHAAAAAAAAlQcAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJMHAAAAAAAAkwcAAAAAAAAAAAAAAADwvw"
				],
				[
					1885,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJUHAAAAAAAAlgcAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJUHAAAAAAAAlQcAAAAAAAAAAAAAAADwvw"
				],
				[
					1886,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAJYHAAAAAAAAmAcAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJYHAAAAAAAAlgcAAAAAAAAAAAAAAADwvw"
				],
				[
					1887,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAJcHAAAAAAAAmAcAAAAAAAAAAAAAmAcAAAAAAACeBwAAAAAAAAAAAACeBwAAAAAAAJ8HAAAAAAAAAAAAAJ8HAAAAAAAApQcAAAAAAAAAAAAAmAcAAAAAAACYBwAAAAAAAAYAAAAgICAgICCYBwAAAAAAAKAHAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJcHAAAAAAAAlwcAAAAAAAAAAAAAAADwvw"
				],
				[
					1890,
					1,
					"insert",
					{
						"characters": "for"
					},
					"AwAAAKAHAAAAAAAAoQcAAAAAAAAAAAAAoQcAAAAAAACiBwAAAAAAAAAAAACiBwAAAAAAAKMHAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKAHAAAAAAAAoAcAAAAAAAAAAAAAAADwvw"
				],
				[
					1891,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAKMHAAAAAAAApQcAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKMHAAAAAAAAowcAAAAAAAAAAAAAAADwvw"
				],
				[
					1892,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAAKQHAAAAAAAApQcAAAAAAAAAAAAApQcAAAAAAACmBwAAAAAAAAAAAACmBwAAAAAAAKcHAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKQHAAAAAAAApAcAAAAAAAAAAAAAAADwvw"
				],
				[
					1893,
					1,
					"insert",
					{
						"characters": " key"
					},
					"BAAAAKcHAAAAAAAAqAcAAAAAAAAAAAAAqAcAAAAAAACpBwAAAAAAAAAAAACpBwAAAAAAAKoHAAAAAAAAAAAAAKoHAAAAAAAAqwcAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKcHAAAAAAAApwcAAAAAAAAAAAAAAADwvw"
				],
				[
					1894,
					1,
					"insert",
					{
						"characters": " of"
					},
					"AwAAAKsHAAAAAAAArAcAAAAAAAAAAAAArAcAAAAAAACtBwAAAAAAAAAAAACtBwAAAAAAAK4HAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKsHAAAAAAAAqwcAAAAAAAAAAAAAAADwvw"
				],
				[
					1895,
					1,
					"insert",
					{
						"characters": " this.keys"
					},
					"CgAAAK4HAAAAAAAArwcAAAAAAAAAAAAArwcAAAAAAACwBwAAAAAAAAAAAACwBwAAAAAAALEHAAAAAAAAAAAAALEHAAAAAAAAsgcAAAAAAAAAAAAAsgcAAAAAAACzBwAAAAAAAAAAAACzBwAAAAAAALQHAAAAAAAAAAAAALQHAAAAAAAAtQcAAAAAAAAAAAAAtQcAAAAAAAC2BwAAAAAAAAAAAAC2BwAAAAAAALcHAAAAAAAAAAAAALcHAAAAAAAAuAcAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK4HAAAAAAAArgcAAAAAAAAAAAAAAADwvw"
				],
				[
					1896,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAALgHAAAAAAAAugcAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALgHAAAAAAAAuAcAAAAAAAAAAAAAAADwvw"
				],
				[
					1898,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAALsHAAAAAAAAvQcAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALsHAAAAAAAAuwcAAAAAAAAAAAAAAADwvw"
				],
				[
					1899,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAALwHAAAAAAAAvQcAAAAAAAAAAAAAvQcAAAAAAADFBwAAAAAAAAAAAADFBwAAAAAAAMYHAAAAAAAAAAAAAMYHAAAAAAAAzgcAAAAAAAAAAAAAvQcAAAAAAAC9BwAAAAAAAAgAAAAgICAgICAgIL0HAAAAAAAAxwcAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALwHAAAAAAAAvAcAAAAAAAAAAAAAAADwvw"
				],
				[
					1909,
					1,
					"cut",
					null,
					"AQAAADoHAAAAAAAAOgcAAAAAAABIAAAALAogICAgICAqa2V5cygpIHsKIGZvcihsZXQgaWQgaW4ga2V5cykKICAgICAgICAgeWllbGQga2V5c1tpZF07CiAgICAgIH0s",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADoHAAAAAAAAggcAAAAAAAAAAAAAAADwvw"
				],
				[
					1910,
					2,
					"paste",
					null,
					"AgAAADoHAAAAAAAAggcAAAAAAAAAAAAAggcAAAAAAADKBwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADoHAAAAAAAAOgcAAAAAAAAAAAAAAADwvw"
				],
				[
					1912,
					1,
					"right_delete",
					null,
					"AgAAAIIHAAAAAAAAggcAAAAAAAABAAAALAQIAAAAAAAABAgAAAAAAAAKAAAAICAgICAgICAgIA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIIHAAAAAAAAggcAAAAAAAAAAAAAAABQQA"
				],
				[
					1918,
					1,
					"insert",
					{
						"characters": "values"
					},
					"BwAAAIoHAAAAAAAAiwcAAAAAAAAAAAAAiwcAAAAAAACLBwAAAAAAAAQAAABrZXlziwcAAAAAAACMBwAAAAAAAAAAAACMBwAAAAAAAI0HAAAAAAAAAAAAAI0HAAAAAAAAjgcAAAAAAAAAAAAAjgcAAAAAAACPBwAAAAAAAAAAAACPBwAAAAAAAJAHAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI4HAAAAAAAAigcAAAAAAAAAAAAAAADwvw"
				],
				[
					1923,
					1,
					"insert",
					{
						"characters": "this[]"
					},
					"BgAAALkHAAAAAAAAugcAAAAAAAAAAAAAugcAAAAAAAC7BwAAAAAAAAAAAAC7BwAAAAAAALwHAAAAAAAAAAAAALwHAAAAAAAAvQcAAAAAAAAAAAAAvQcAAAAAAAC+BwAAAAAAAAAAAAC+BwAAAAAAAL8HAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALkHAAAAAAAAuQcAAAAAAAAAAAAAAADwvw"
				],
				[
					1924,
					1,
					"left_delete",
					null,
					"AQAAAL4HAAAAAAAAvgcAAAAAAAABAAAAXQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL8HAAAAAAAAvwcAAAAAAAAAAAAAAADwvw"
				],
				[
					1927,
					1,
					"insert",
					{
						"characters": "]"
					},
					"AQAAAMYHAAAAAAAAxwcAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMYHAAAAAAAAxgcAAAAAAAAAAAAAAADwvw"
				],
				[
					1938,
					1,
					"insert",
					{
						"characters": "value"
					},
					"BgAAAAMIAAAAAAAABAgAAAAAAAAAAAAABAgAAAAAAAAECAAAAAAAAAQAAABrZXlzBAgAAAAAAAAFCAAAAAAAAAAAAAAFCAAAAAAAAAYIAAAAAAAAAAAAAAYIAAAAAAAABwgAAAAAAAAAAAAABwgAAAAAAAAICAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAMIAAAAAAAABwgAAAAAAAAAAAAAAADwvw"
				],
				[
					1945,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAAgIAAAAAAAACQgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAgIAAAAAAAACAgAAAAAAAAAAAAAAADwvw"
				],
				[
					1952,
					3,
					"left_delete",
					null,
					"AwAAAPkHAAAAAAAA+QcAAAAAAAABAAAAefgHAAAAAAAA+AcAAAAAAAABAAAAZfcHAAAAAAAA9wcAAAAAAAABAAAAaw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPoHAAAAAAAA+gcAAAAAAAAAAAAAAADwvw"
				],
				[
					1953,
					1,
					"insert",
					{
						"characters": "value"
					},
					"BQAAAPcHAAAAAAAA+AcAAAAAAAAAAAAA+AcAAAAAAAD5BwAAAAAAAAAAAAD5BwAAAAAAAPoHAAAAAAAAAAAAAPoHAAAAAAAA+wcAAAAAAAAAAAAA+wcAAAAAAAD8BwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPcHAAAAAAAA9wcAAAAAAAAAAAAAAADwvw"
				],
				[
					1962,
					1,
					"insert",
					{
						"characters": "types,"
					},
					"BgAAAEkAAAAAAAAASgAAAAAAAAAAAAAASgAAAAAAAABLAAAAAAAAAAAAAABLAAAAAAAAAEwAAAAAAAAAAAAAAEwAAAAAAAAATQAAAAAAAAAAAAAATQAAAAAAAABOAAAAAAAAAAAAAABOAAAAAAAAAE8AAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEkAAAAAAAAASQAAAAAAAAAAAAAAAADwvw"
				],
				[
					1965,
					1,
					"insert",
					{
						"characters": "oif"
					},
					"AwAAABYIAAAAAAAAFwgAAAAAAAAAAAAAFwgAAAAAAAAYCAAAAAAAAAAAAAAYCAAAAAAAABkIAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABYIAAAAAAAAFggAAAAAAAAAAAAAAADwvw"
				],
				[
					1966,
					3,
					"left_delete",
					null,
					"AwAAABgIAAAAAAAAGAgAAAAAAAABAAAAZhcIAAAAAAAAFwgAAAAAAAABAAAAaRYIAAAAAAAAFggAAAAAAAABAAAAbw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABkIAAAAAAAAGQgAAAAAAAAAAAAAAADwvw"
				],
				[
					1967,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AgAAABYIAAAAAAAAFwgAAAAAAAAAAAAAFwgAAAAAAAAYCAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABYIAAAAAAAAFggAAAAAAAAAAAAAAADwvw"
				],
				[
					1968,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAABgIAAAAAAAAGggAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABgIAAAAAAAAGAgAAAAAAAAAAAAAAADwvw"
				],
				[
					1969,
					1,
					"insert",
					{
						"characters": "/ty"
					},
					"AwAAABkIAAAAAAAAGggAAAAAAAAAAAAAGggAAAAAAAAbCAAAAAAAAAAAAAAbCAAAAAAAABwIAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABkIAAAAAAAAGQgAAAAAAAAAAAAAAADwvw"
				],
				[
					1970,
					3,
					"left_delete",
					null,
					"AwAAABsIAAAAAAAAGwgAAAAAAAABAAAAeRoIAAAAAAAAGggAAAAAAAABAAAAdBkIAAAAAAAAGQgAAAAAAAABAAAALw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABwIAAAAAAAAHAgAAAAAAAAAAAAAAADwvw"
				],
				[
					1971,
					1,
					"insert",
					{
						"characters": "types.isMap"
					},
					"CwAAABkIAAAAAAAAGggAAAAAAAAAAAAAGggAAAAAAAAbCAAAAAAAAAAAAAAbCAAAAAAAABwIAAAAAAAAAAAAABwIAAAAAAAAHQgAAAAAAAAAAAAAHQgAAAAAAAAeCAAAAAAAAAAAAAAeCAAAAAAAAB8IAAAAAAAAAAAAAB8IAAAAAAAAIAgAAAAAAAAAAAAAIAgAAAAAAAAhCAAAAAAAAAAAAAAhCAAAAAAAACIIAAAAAAAAAAAAACIIAAAAAAAAIwgAAAAAAAAAAAAAIwgAAAAAAAAkCAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABkIAAAAAAAAGQgAAAAAAAAAAAAAAADwvw"
				],
				[
					1972,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAACQIAAAAAAAAJggAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACQIAAAAAAAAJAgAAAAAAAAAAAAAAADwvw"
				],
				[
					1973,
					1,
					"insert",
					{
						"characters": "value"
					},
					"BQAAACUIAAAAAAAAJggAAAAAAAAAAAAAJggAAAAAAAAnCAAAAAAAAAAAAAAnCAAAAAAAACgIAAAAAAAAAAAAACgIAAAAAAAAKQgAAAAAAAAAAAAAKQgAAAAAAAAqCAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACUIAAAAAAAAJQgAAAAAAAAAAAAAAADwvw"
				],
				[
					1975,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACwIAAAAAAAALQgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACwIAAAAAAAALAgAAAAAAAAAAAAAAADwvw"
				],
				[
					1976,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAC0IAAAAAAAALwgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC0IAAAAAAAALQgAAAAAAAAAAAAAAADwvw"
				],
				[
					1977,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAAC4IAAAAAAAALwgAAAAAAAAAAAAALwgAAAAAAAAwCAAAAAAAAAAAAAAvCAAAAAAAADEIAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC4IAAAAAAAALggAAAAAAAAAAAAAAADwvw"
				],
				[
					1984,
					1,
					"insert",
					{
						"characters": "*"
					},
					"AgAAAN4HAAAAAAAA3wcAAAAAAAAAAAAAMAgAAAAAAAAwCAAAAAAAAAIAAAAgIA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN4HAAAAAAAA3gcAAAAAAAAAAAAAAADwvw"
				],
				[
					1990,
					1,
					"insert",
					{
						"characters": "  "
					},
					"AgAAADAIAAAAAAAAMQgAAAAAAAAAAAAAMQgAAAAAAAAyCAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADAIAAAAAAAAMAgAAAAAAAAAAAAAAABMQA"
				],
				[
					1991,
					1,
					"insert",
					{
						"characters": "yield"
					},
					"BQAAADIIAAAAAAAAMwgAAAAAAAAAAAAAMwgAAAAAAAA0CAAAAAAAAAAAAAA0CAAAAAAAADUIAAAAAAAAAAAAADUIAAAAAAAANggAAAAAAAAAAAAANggAAAAAAAA3CAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADIIAAAAAAAAMggAAAAAAAAAAAAAAADwvw"
				],
				[
					1992,
					1,
					"insert",
					{
						"characters": " *"
					},
					"AgAAADcIAAAAAAAAOAgAAAAAAAAAAAAAOAgAAAAAAAA5CAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADcIAAAAAAAANwgAAAAAAAAAAAAAAADwvw"
				],
				[
					1993,
					1,
					"insert",
					{
						"characters": "value.keys"
					},
					"CgAAADkIAAAAAAAAOggAAAAAAAAAAAAAOggAAAAAAAA7CAAAAAAAAAAAAAA7CAAAAAAAADwIAAAAAAAAAAAAADwIAAAAAAAAPQgAAAAAAAAAAAAAPQgAAAAAAAA+CAAAAAAAAAAAAAA+CAAAAAAAAD8IAAAAAAAAAAAAAD8IAAAAAAAAQAgAAAAAAAAAAAAAQAgAAAAAAABBCAAAAAAAAAAAAABBCAAAAAAAAEIIAAAAAAAAAAAAAEIIAAAAAAAAQwgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADkIAAAAAAAAOQgAAAAAAAAAAAAAAADwvw"
				],
				[
					1994,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAEMIAAAAAAAARQgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEMIAAAAAAAAQwgAAAAAAAAAAAAAAADwvw"
				],
				[
					1996,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAEUIAAAAAAAARggAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEUIAAAAAAAARQgAAAAAAAAAAAAAAADwvw"
				],
				[
					2005,
					1,
					"insert",
					{
						"characters": "enmt"
					},
					"BQAAAD8IAAAAAAAAQAgAAAAAAAAAAAAAQAgAAAAAAABACAAAAAAAAAQAAABrZXlzQAgAAAAAAABBCAAAAAAAAAAAAABBCAAAAAAAAEIIAAAAAAAAAAAAAEIIAAAAAAAAQwgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD8IAAAAAAAAQwgAAAAAAAAAAAAAAADwvw"
				],
				[
					2006,
					2,
					"left_delete",
					null,
					"AgAAAEIIAAAAAAAAQggAAAAAAAABAAAAdEEIAAAAAAAAQQgAAAAAAAABAAAAbQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEMIAAAAAAAAQwgAAAAAAAAAAAAAAADwvw"
				],
				[
					2007,
					1,
					"insert",
					{
						"characters": "tries"
					},
					"BQAAAEEIAAAAAAAAQggAAAAAAAAAAAAAQggAAAAAAABDCAAAAAAAAAAAAABDCAAAAAAAAEQIAAAAAAAAAAAAAEQIAAAAAAAARQgAAAAAAAAAAAAARQgAAAAAAABGCAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEEIAAAAAAAAQQgAAAAAAAAAAAAAAADwvw"
				],
				[
					2010,
					1,
					"right_delete",
					null,
					"AQAAAC4IAAAAAAAALggAAAAAAAABAAAAew",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC4IAAAAAAAALggAAAAAAAAAAAAAAADwvw"
				],
				[
					2012,
					2,
					"left_delete",
					null,
					"AgAAAEkIAAAAAAAASQgAAAAAAAABAAAAfUgIAAAAAAAASAgAAAAAAAABAAAACg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEoIAAAAAAAASggAAAAAAAAAAAAAAABnQA"
				],
				[
					2015,
					1,
					"left_delete",
					null,
					"AQAAABUIAAAAAAAAFQgAAAAAAAABAAAAew",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABYIAAAAAAAAFggAAAAAAAD////////vfw"
				],
				[
					2017,
					6,
					"left_delete",
					null,
					"BgAAAFAIAAAAAAAAUAgAAAAAAAABAAAAfU4IAAAAAAAATggAAAAAAAACAAAAICBMCAAAAAAAAEwIAAAAAAAAAgAAACAgSggAAAAAAABKCAAAAAAAAAIAAAAgIEgIAAAAAAAASAgAAAAAAAACAAAAICBHCAAAAAAAAEcIAAAAAAAAAQAAAAo",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFEIAAAAAAAAUQgAAAAAAAAAAAAAAIBzQA"
				],
				[
					2020,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABfCAAAaW1wb3J0IHsgUGFyc2VyLCBVUkwgfSBmcm9tICdkb20nOwppbXBvcnQgeyB1cmxHZXQgfSBmcm9tICdzdGQnOwppbXBvcnQge3R5cGVzLCBkZWZpbmUsIHByb3BlcnRpZXMsIG5vbmVudW1lcmFibGUgfSBmcm9tICd1dGlsJzsKCmV4cG9ydCBmdW5jdGlvbiBGZXRjaENsYXNzKHVybCkgewogIGNvbnN0IHUgPSBuZXcgVVJMKHVybC5yZXBsYWNlKC9cL1teXC9dKiQvLCAnJykpOwogIGNvbnN0IGJhc2UgPSB1LnBhdGhuYW1lOwogIGNvbnN0IHJlID0gbmV3IFJlZ0V4cCgnXicgKyBiYXNlICsgJy8nKTsKICBjb25zdCBkb2MgPSBuZXcgUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKHVybEdldCh1cmwpKTsKCiAgY29uc3Qga2V5cyA9IHsKICAgIENvbnN0cnVjdG9yOiAnY29uc3RydWN0b3InLAogICAgJ0luc3RhbmNlIHByb3BlcnRpZXMnOiAncHJvcGVydGllcycsCiAgICAnSW5zdGFuY2UgbWV0aG9kcyc6ICdtZXRob2RzJywKICAgIEV2ZW50czogJ2V2ZW50cycsCiAgICBJbmhlcml0YW5jZTogJ2Jhc2VzJywKICAgICdSZWxhdGVkIHBhZ2VzIGZvciBXZWIgQXVkaW8gQVBJJzogJ3JlbGF0ZWQnLAogIH07CgogIGNvbnN0IHN1bW1hcnlFbGVtZW50cyA9IFsuLi5kb2MucXVlcnlTZWxlY3RvckFsbCgnc3VtbWFyeScpXS5maWx0ZXIoZSA9PiBlLmlubmVyVGV4dCBpbiBrZXlzKTsKCiAgY29uc3Qgc2ltcGxpZnlMaXN0ID0gbGlzdCA9PiB7CiAgICBpZihsaXN0LmV2ZXJ5KChbYSwgYl0pID0+IGEucmVwbGFjZSgvXHNFeHBlcmltZW50YWwkLywgJycpID09IGIpKSByZXR1cm4gbGlzdC5tYXAoKFthXSkgPT4gYSk7CgogICAgcmV0dXJuIG5ldyBNYXAobGlzdCk7CiAgfTsKCiAgY29uc3Qgc3VtbWFyeUxpc3QgPSBzdW1tYXJ5ID0+CiAgICBzaW1wbGlmeUxpc3QoCiAgICAgIFsuLi5zdW1tYXJ5Lm5leHRTaWJsaW5nLnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpJyldCiAgICAgICAgLm1hcChlID0+IFtlLmlubmVyVGV4dCwgZS5xdWVyeVNlbGVjdG9yKCdhJykuZ2V0QXR0cmlidXRlKCdocmVmJykucmVwbGFjZShyZSwgJycpXSkKICAgICAgICAuZmlsdGVyKChbbmFtZV0pID0+ICEvXHNEZXByZWNhdGVkJC8udGVzdChuYW1lKSksCiAgICApOwoKICBjb25zdCBzdW1tYXJpZXMgPSBzdW1tYXJ5RWxlbWVudHMucmVkdWNlKAogICAgKGEsIGUpID0+ICh7IC4uLmEsIFtrZXlzW2UuaW5uZXJUZXh0XSA/PyBlLmlubmVyVGV4dF06IHN1bW1hcnlMaXN0KGUpIH0pLAogICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHt9LCBudWxsKSwKICApOwoKICByZXR1cm4gZGVmaW5lKAogICAgc3VtbWFyaWVzLAogICAgbm9uZW51bWVyYWJsZSh7CiAgICAgIGdldFVSTChuYW1lKSB7CiAgICAgICAgY29uc3QgcmUgPSBuZXcgUmVnRXhwKG5hbWUgKyAnKFwoXCl8KShccy4qfCknKTsKCiAgICAgICAgZm9yKGxldCBrZXkgb2YgdGhpcy5rZXlzKCkpIHsKICAgICAgICAgIGlmKGtleSA9PSBuYW1lKQogICAgICAgICAgICByZXR1cm4gWy4uLnRoaXNba2V5XV0KICAgICAgICAgICAgICAubWFwKGVudHJ5ID0+IChBcnJheS5pc0FycmF5KGVudHJ5KSA/IGVudHJ5WzFdIDogZW50cnkpKQogICAgICAgICAgICAgIC5tYXAocCA9PiB1ICsgJy8nICsgcCk7CgogICAgICAgICAgZm9yKGxldCBlbnRyeSBvZiB0aGlzW2tleV0pIHsKICAgICAgICAgICAgaWYodHlwZW9mIGVudHJ5ID09ICdzdHJpbmcnICYmIHJlLnRlc3QoZW50cnkpKSByZXR1cm4gdSArICcvJyArIGVudHJ5OwoKICAgICAgICAgICAgY29uc3QgW3Byb3AsIHBhdGhuYW1lXSA9IGVudHJ5OwoKICAgICAgICAgICAgaWYocmUudGVzdChwcm9wKSkgcmV0dXJuIHUgKyAnLycgKyBwYXRobmFtZTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sCiAgICAgICprZXlzKCkgewogZm9yKGxldCBpZCBpbiBrZXlzKQogICAgICAgICB5aWVsZCBrZXlzW2lkXTsKICAgICAgfSwKICAgICAgKnZhbHVlcygpIHsKIGZvcihsZXQgaWQgaW4ga2V5cykKICAgICAgICAgeWllbGQgdGhpc1trZXlzW2lkXV07CiAgICAgIH0sCiAgICAgICpnZXRNZW1iZXJzKCkgewogICAgICAgIGZvcihsZXQgdmFsdWUgb2YgdGhpcy52YWx1ZXMoKSkKaWYodHlwZXMuaXNNYXAodmFsdWUpKSAKICB5aWVsZCAqdmFsdWUuZW50cmllcygpOwogICAgICB9CiAgICB9KSwKICApOwp9CgAAAAAAAAAAWggAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEcIAAAAAAAARwgAAAAAAAAAAAAAAADwvw"
				],
				[
					2041,
					1,
					"insert",
					{
						"characters": "\n\nconst"
					},
					"CgAAAO4EAAAAAAAA7wQAAAAAAAAAAAAA7wQAAAAAAADxBAAAAAAAAAAAAADxBAAAAAAAAPIEAAAAAAAAAAAAAPIEAAAAAAAA9AQAAAAAAAAAAAAA7wQAAAAAAADvBAAAAAAAAAIAAAAgIPIEAAAAAAAA8wQAAAAAAAAAAAAA8wQAAAAAAAD0BAAAAAAAAAAAAAD0BAAAAAAAAPUEAAAAAAAAAAAAAPUEAAAAAAAA9gQAAAAAAAAAAAAA9gQAAAAAAAD3BAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO4EAAAAAAAA7gQAAAAAAAAAAAAAAADwvw"
				],
				[
					2042,
					1,
					"insert",
					{
						"characters": " makeURL"
					},
					"CAAAAPcEAAAAAAAA+AQAAAAAAAAAAAAA+AQAAAAAAAD5BAAAAAAAAAAAAAD5BAAAAAAAAPoEAAAAAAAAAAAAAPoEAAAAAAAA+wQAAAAAAAAAAAAA+wQAAAAAAAD8BAAAAAAAAAAAAAD8BAAAAAAAAP0EAAAAAAAAAAAAAP0EAAAAAAAA/gQAAAAAAAAAAAAA/gQAAAAAAAD/BAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPcEAAAAAAAA9wQAAAAAAAAAAAAAAADwvw"
				],
				[
					2043,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAP8EAAAAAAAAAAUAAAAAAAAAAAAAAAUAAAAAAAABBQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP8EAAAAAAAA/wQAAAAAAAAAAAAAAADwvw"
				],
				[
					2044,
					1,
					"insert",
					{
						"characters": " p"
					},
					"AgAAAAEFAAAAAAAAAgUAAAAAAAAAAAAAAgUAAAAAAAADBQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAEFAAAAAAAAAQUAAAAAAAAAAAAAAADwvw"
				],
				[
					2045,
					1,
					"insert",
					{
						"characters": " =>"
					},
					"AwAAAAMFAAAAAAAABAUAAAAAAAAAAAAABAUAAAAAAAAFBQAAAAAAAAAAAAAFBQAAAAAAAAYFAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAMFAAAAAAAAAwUAAAAAAAAAAAAAAADwvw"
				],
				[
					2046,
					1,
					"insert",
					{
						"characters": " u"
					},
					"AgAAAAYFAAAAAAAABwUAAAAAAAAAAAAABwUAAAAAAAAIBQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAYFAAAAAAAABgUAAAAAAAAAAAAAAADwvw"
				],
				[
					2047,
					1,
					"insert",
					{
						"characters": " +"
					},
					"AgAAAAgFAAAAAAAACQUAAAAAAAAAAAAACQUAAAAAAAAKBQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAgFAAAAAAAACAUAAAAAAAAAAAAAAADwvw"
				],
				[
					2048,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAoFAAAAAAAACwUAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAoFAAAAAAAACgUAAAAAAAAAAAAAAADwvw"
				],
				[
					2049,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAAsFAAAAAAAADQUAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAsFAAAAAAAACwUAAAAAAAAAAAAAAADwvw"
				],
				[
					2050,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAAAwFAAAAAAAADQUAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAwFAAAAAAAADAUAAAAAAAAAAAAAAADwvw"
				],
				[
					2052,
					1,
					"insert",
					{
						"characters": " +p"
					},
					"AwAAAA4FAAAAAAAADwUAAAAAAAAAAAAADwUAAAAAAAAQBQAAAAAAAAAAAAAQBQAAAAAAABEFAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA4FAAAAAAAADgUAAAAAAAAAAAAAAADwvw"
				],
				[
					2053,
					1,
					"left_delete",
					null,
					"AQAAABAFAAAAAAAAEAUAAAAAAAABAAAAcA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABEFAAAAAAAAEQUAAAAAAAAAAAAAAADwvw"
				],
				[
					2054,
					1,
					"insert",
					{
						"characters": " p;"
					},
					"AwAAABAFAAAAAAAAEQUAAAAAAAAAAAAAEQUAAAAAAAASBQAAAAAAAAAAAAASBQAAAAAAABMFAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABAFAAAAAAAAEAUAAAAAAAAAAAAAAADwvw"
				],
				[
					2068,
					1,
					"paste",
					null,
					"AQAAANEGAAAAAAAA2AYAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANEGAAAAAAAA0QYAAAAAAAAAAAAAAADwvw"
				],
				[
					2069,
					1,
					"insert",
					{
						"characters": "(entry)"
					},
					"BwAAANgGAAAAAAAA2QYAAAAAAAAAAAAA2QYAAAAAAADaBgAAAAAAAAAAAADaBgAAAAAAANsGAAAAAAAAAAAAANsGAAAAAAAA3AYAAAAAAAAAAAAA3AYAAAAAAADdBgAAAAAAAAAAAADdBgAAAAAAAN4GAAAAAAAAAAAAAN4GAAAAAAAA3wYAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANgGAAAAAAAA2AYAAAAAAAAAAAAAAADwvw"
				],
				[
					2072,
					1,
					"cut",
					null,
					"AQAAAN8GAAAAAAAA3wYAAAAAAAAPAAAAdSArICcvJyArIGVudHJ5",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN8GAAAAAAAA7gYAAAAAAAAAAAAAAADwvw"
				],
				[
					2075,
					1,
					"insert",
					{
						"characters": "makeURL("
					},
					"CAAAADQHAAAAAAAANQcAAAAAAAAAAAAANQcAAAAAAAA2BwAAAAAAAAAAAAA2BwAAAAAAADcHAAAAAAAAAAAAADcHAAAAAAAAOAcAAAAAAAAAAAAAOAcAAAAAAAA5BwAAAAAAAAAAAAA5BwAAAAAAADoHAAAAAAAAAAAAADoHAAAAAAAAOwcAAAAAAAAAAAAAOwcAAAAAAAA8BwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADQHAAAAAAAANAcAAAAAAAAAAAAAAADwvw"
				],
				[
					2076,
					11,
					"right_delete",
					null,
					"CwAAADwHAAAAAAAAPAcAAAAAAAABAAAAdTwHAAAAAAAAPAcAAAAAAAABAAAAIDwHAAAAAAAAPAcAAAAAAAABAAAAKzwHAAAAAAAAPAcAAAAAAAABAAAAIDwHAAAAAAAAPAcAAAAAAAABAAAAJzwHAAAAAAAAPAcAAAAAAAABAAAALzwHAAAAAAAAPAcAAAAAAAABAAAAJzwHAAAAAAAAPAcAAAAAAAABAAAAIDwHAAAAAAAAPAcAAAAAAAABAAAAKzwHAAAAAAAAPAcAAAAAAAABAAAAIDwHAAAAAAAAPAcAAAAAAAABAAAAcA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADwHAAAAAAAAPAcAAAAAAAAAAAAAAADwvw"
				],
				[
					2077,
					1,
					"insert",
					{
						"characters": "p"
					},
					"AQAAADwHAAAAAAAAPQcAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADwHAAAAAAAAPAcAAAAAAAAAAAAAAADwvw"
				],
				[
					2080,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAEQHAAAAAAAARQcAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEQHAAAAAAAARAcAAAAAAAAAAAAAAADwvw"
				],
				[
					2086,
					1,
					"insert",
					{
						"characters": "makeURL("
					},
					"CAAAAFgGAAAAAAAAWQYAAAAAAAAAAAAAWQYAAAAAAABaBgAAAAAAAAAAAABaBgAAAAAAAFsGAAAAAAAAAAAAAFsGAAAAAAAAXAYAAAAAAAAAAAAAXAYAAAAAAABdBgAAAAAAAAAAAABdBgAAAAAAAF4GAAAAAAAAAAAAAF4GAAAAAAAAXwYAAAAAAAAAAAAAXwYAAAAAAABgBgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFgGAAAAAAAAWAYAAAAAAAAAAAAAAADwvw"
				],
				[
					2090,
					1,
					"insert",
					{
						"characters": "makeURL"
					},
					"CAAAAFMGAAAAAAAAVAYAAAAAAAAAAAAAVAYAAAAAAABUBgAAAAAAABgAAABwID0+IG1ha2VVUkwodSArICcvJyArIHBUBgAAAAAAAFUGAAAAAAAAAAAAAFUGAAAAAAAAVgYAAAAAAAAAAAAAVgYAAAAAAABXBgAAAAAAAAAAAABXBgAAAAAAAFgGAAAAAAAAAAAAAFgGAAAAAAAAWQYAAAAAAAAAAAAAWQYAAAAAAABaBgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFMGAAAAAAAAawYAAAAAAAAAAAAAAADwvw"
				],
				[
					2133,
					1,
					"insert",
					{
						"characters": "'^+"
					},
					"AwAAAHwFAAAAAAAAfQUAAAAAAAAAAAAAfQUAAAAAAAB+BQAAAAAAAAAAAAB+BQAAAAAAAH8FAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHwFAAAAAAAAfAUAAAAAAAAAAAAAAADwvw"
				],
				[
					2134,
					1,
					"left_delete",
					null,
					"AQAAAH4FAAAAAAAAfgUAAAAAAAABAAAAKw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH8FAAAAAAAAfwUAAAAAAAAAAAAAAADwvw"
				],
				[
					2135,
					1,
					"insert",
					{
						"characters": "'"
					},
					"AQAAAH4FAAAAAAAAfwUAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH4FAAAAAAAAfgUAAAAAAAAAAAAAAADwvw"
				],
				[
					2136,
					1,
					"insert",
					{
						"characters": " +"
					},
					"AgAAAH8FAAAAAAAAgAUAAAAAAAAAAAAAgAUAAAAAAACBBQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH8FAAAAAAAAfwUAAAAAAAAAAAAAAADwvw"
				],
				[
					2137,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIEFAAAAAAAAggUAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIEFAAAAAAAAgQUAAAAAAAAAAAAAAADwvw"
				],
				[
					2140,
					1,
					"insert",
					{
						"characters": " +"
					},
					"AgAAAJkFAAAAAAAAmgUAAAAAAAAAAAAAmgUAAAAAAACbBQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJkFAAAAAAAAmQUAAAAAAAAAAAAAAADwvw"
				],
				[
					2141,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJsFAAAAAAAAnAUAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJsFAAAAAAAAmwUAAAAAAAAAAAAAAADwvw"
				],
				[
					2142,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAJwFAAAAAAAAngUAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJwFAAAAAAAAnAUAAAAAAAAAAAAAAADwvw"
				],
				[
					2143,
					1,
					"insert",
					{
						"characters": "$"
					},
					"AQAAAJ0FAAAAAAAAngUAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ0FAAAAAAAAnQUAAAAAAAAAAAAAAADwvw"
				],
				[
					2159,
					1,
					"cut",
					null,
					"AQAAALAHAAAAAAAAsAcAAAAAAABNAAAAICAgICp2YWx1ZXMoKSB7CiAgICAgICAgZm9yKGxldCBpZCBpbiBrZXlzKSB5aWVsZCB0aGlzW2tleXNbaWRdXTsKICAgICAgfSwKICA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALAHAAAAAAAA/QcAAAAAAAAAAAAAAADwvw"
				],
				[
					2160,
					2,
					"paste",
					null,
					"AgAAALAHAAAAAAAA/QcAAAAAAAAAAAAA/QcAAAAAAABKCAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALAHAAAAAAAAsAcAAAAAAAAAAAAAAADwvw"
				],
				[
					2164,
					1,
					"insert",
					{
						"characters": "[keysd["
					},
					"BwAAAC8IAAAAAAAAMAgAAAAAAAAAAAAAMAgAAAAAAAAxCAAAAAAAAAAAAAAxCAAAAAAAADIIAAAAAAAAAAAAADIIAAAAAAAAMwgAAAAAAAAAAAAAMwgAAAAAAAA0CAAAAAAAAAAAAAA0CAAAAAAAADUIAAAAAAAAAAAAADUIAAAAAAAANggAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC8IAAAAAAAALwgAAAAAAAAAAAAAAADwvw"
				],
				[
					2165,
					2,
					"left_delete",
					null,
					"AgAAADUIAAAAAAAANQgAAAAAAAABAAAAWzQIAAAAAAAANAgAAAAAAAABAAAAZA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADYIAAAAAAAANggAAAAAAAAAAAAAAADwvw"
				],
				[
					2166,
					1,
					"insert",
					{
						"characters": "[id],"
					},
					"BQAAADQIAAAAAAAANQgAAAAAAAAAAAAANQgAAAAAAAA2CAAAAAAAAAAAAAA2CAAAAAAAADcIAAAAAAAAAAAAADcIAAAAAAAAOAgAAAAAAAAAAAAAOAgAAAAAAAA5CAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADQIAAAAAAAANAgAAAAAAAAAAAAAAADwvw"
				],
				[
					2167,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADkIAAAAAAAAOggAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADkIAAAAAAAAOQgAAAAAAAAAAAAAAADwvw"
				],
				[
					2170,
					1,
					"insert",
					{
						"characters": "]"
					},
					"AQAAAEgIAAAAAAAASQgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEgIAAAAAAAASAgAAAAAAAAAAAAAAADwvw"
				],
				[
					2177,
					1,
					"insert",
					{
						"characters": "entries"
					},
					"CAAAAAIIAAAAAAAAAwgAAAAAAAAAAAAAAwgAAAAAAAADCAAAAAAAAAYAAAB2YWx1ZXMDCAAAAAAAAAQIAAAAAAAAAAAAAAQIAAAAAAAABQgAAAAAAAAAAAAABQgAAAAAAAAGCAAAAAAAAAAAAAAGCAAAAAAAAAcIAAAAAAAAAAAAAAcIAAAAAAAACAgAAAAAAAAAAAAACAgAAAAAAAAJCAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAgIAAAAAAAAAggAAAAAAAAAAAAAAADwvw"
				],
				[
					2182,
					1,
					"insert",
					{
						"characters": "[key,"
					},
					"BQAAAHsIAAAAAAAAfAgAAAAAAAAAAAAAfAgAAAAAAAB9CAAAAAAAAAAAAAB9CAAAAAAAAH4IAAAAAAAAAAAAAH4IAAAAAAAAfwgAAAAAAAAAAAAAfwgAAAAAAACACAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHsIAAAAAAAAewgAAAAAAAAAAAAAAADwvw"
				],
				[
					2184,
					1,
					"insert",
					{
						"characters": "]"
					},
					"AQAAAIUIAAAAAAAAhggAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIUIAAAAAAAAhQgAAAAAAAAAAAAAAADwvw"
				],
				[
					2186,
					6,
					"right_delete",
					null,
					"BgAAAI8IAAAAAAAAjwgAAAAAAAABAAAAdo8IAAAAAAAAjwgAAAAAAAABAAAAYY8IAAAAAAAAjwgAAAAAAAABAAAAbI8IAAAAAAAAjwgAAAAAAAABAAAAdY8IAAAAAAAAjwgAAAAAAAABAAAAZY8IAAAAAAAAjwgAAAAAAAABAAAAcw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI8IAAAAAAAAjwgAAAAAAAAAAAAAAADwvw"
				],
				[
					2187,
					1,
					"insert",
					{
						"characters": "entries"
					},
					"BwAAAI8IAAAAAAAAkAgAAAAAAAAAAAAAkAgAAAAAAACRCAAAAAAAAAAAAACRCAAAAAAAAJIIAAAAAAAAAAAAAJIIAAAAAAAAkwgAAAAAAAAAAAAAkwgAAAAAAACUCAAAAAAAAAAAAACUCAAAAAAAAJUIAAAAAAAAAAAAAJUIAAAAAAAAlggAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI8IAAAAAAAAjwgAAAAAAAAAAAAAAADwvw"
				],
				[
					2198,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADhCAAAaW1wb3J0IHsgUGFyc2VyLCBVUkwgfSBmcm9tICdkb20nOwppbXBvcnQgeyB1cmxHZXQgfSBmcm9tICdzdGQnOwppbXBvcnQgeyB0eXBlcywgZGVmaW5lLCBwcm9wZXJ0aWVzLCBub25lbnVtZXJhYmxlIH0gZnJvbSAndXRpbCc7CgpleHBvcnQgZnVuY3Rpb24gRmV0Y2hDbGFzcyh1cmwpIHsKICBjb25zdCB1ID0gbmV3IFVSTCh1cmwucmVwbGFjZSgvXC9bXlwvXSokLywgJycpKTsKICBjb25zdCBiYXNlID0gdS5wYXRobmFtZTsKICBjb25zdCByZSA9IG5ldyBSZWdFeHAoJ14nICsgYmFzZSArICcvJyk7CiAgY29uc3QgZG9jID0gbmV3IFBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyh1cmxHZXQodXJsKSk7CgogIGNvbnN0IGtleXMgPSB7CiAgICBDb25zdHJ1Y3RvcjogJ2NvbnN0cnVjdG9yJywKICAgICdJbnN0YW5jZSBwcm9wZXJ0aWVzJzogJ3Byb3BlcnRpZXMnLAogICAgJ0luc3RhbmNlIG1ldGhvZHMnOiAnbWV0aG9kcycsCiAgICBFdmVudHM6ICdldmVudHMnLAogICAgSW5oZXJpdGFuY2U6ICdiYXNlcycsCiAgICAnUmVsYXRlZCBwYWdlcyBmb3IgV2ViIEF1ZGlvIEFQSSc6ICdyZWxhdGVkJywKICB9OwoKICBjb25zdCBzdW1tYXJ5RWxlbWVudHMgPSBbLi4uZG9jLnF1ZXJ5U2VsZWN0b3JBbGwoJ3N1bW1hcnknKV0uZmlsdGVyKGUgPT4gZS5pbm5lclRleHQgaW4ga2V5cyk7CgogIGNvbnN0IHNpbXBsaWZ5TGlzdCA9IGxpc3QgPT4gewogICAgaWYobGlzdC5ldmVyeSgoW2EsIGJdKSA9PiBhLnJlcGxhY2UoL1xzRXhwZXJpbWVudGFsJC8sICcnKSA9PSBiKSkgcmV0dXJuIGxpc3QubWFwKChbYV0pID0+IGEpOwoKICAgIHJldHVybiBuZXcgTWFwKGxpc3QpOwogIH07CgogIGNvbnN0IHN1bW1hcnlMaXN0ID0gc3VtbWFyeSA9PgogICAgc2ltcGxpZnlMaXN0KAogICAgICBbLi4uc3VtbWFyeS5uZXh0U2libGluZy5xdWVyeVNlbGVjdG9yQWxsKCdsaScpXQogICAgICAgIC5tYXAoZSA9PiBbZS5pbm5lclRleHQsIGUucXVlcnlTZWxlY3RvcignYScpLmdldEF0dHJpYnV0ZSgnaHJlZicpLnJlcGxhY2UocmUsICcnKV0pCiAgICAgICAgLmZpbHRlcigoW25hbWVdKSA9PiAhL1xzRGVwcmVjYXRlZCQvLnRlc3QobmFtZSkpLAogICAgKTsKCiAgY29uc3Qgc3VtbWFyaWVzID0gc3VtbWFyeUVsZW1lbnRzLnJlZHVjZSgKICAgIChhLCBlKSA9PiAoeyAuLi5hLCBba2V5c1tlLmlubmVyVGV4dF0gPz8gZS5pbm5lclRleHRdOiBzdW1tYXJ5TGlzdChlKSB9KSwKICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih7fSwgbnVsbCksCiAgKTsKCiAgY29uc3QgbWFrZVVSTCA9IHAgPT4gdSArICcvJyArIHA7CgogIHJldHVybiBkZWZpbmUoCiAgICBzdW1tYXJpZXMsCiAgICBub25lbnVtZXJhYmxlKHsKICAgICAgZ2V0VVJMKG5hbWUpIHsKICAgICAgICBjb25zdCByZSA9IG5ldyBSZWdFeHAoJ14nICsgbmFtZSArICcoXChcKXwpKFxzLip8KScgKyAnJCcpOwoKICAgICAgICBmb3IobGV0IGtleSBvZiB0aGlzLmtleXMoKSkgewogICAgICAgICAgaWYoa2V5ID09IG5hbWUpCiAgICAgICAgICAgIHJldHVybiBbLi4udGhpc1trZXldXQogICAgICAgICAgICAgIC5tYXAoZW50cnkgPT4gKEFycmF5LmlzQXJyYXkoZW50cnkpID8gZW50cnlbMV0gOiBlbnRyeSkpCiAgICAgICAgICAgICAgLm1hcChtYWtlVVJMKTsKCiAgICAgICAgICBmb3IobGV0IGVudHJ5IG9mIHRoaXNba2V5XSkgewogICAgICAgICAgICBpZih0eXBlb2YgZW50cnkgPT0gJ3N0cmluZycgJiYgcmUudGVzdChlbnRyeSkpIHJldHVybiBtYWtlVVJMKGVudHJ5KTsKCiAgICAgICAgICAgIGNvbnN0IFtwcm9wLCBwYXRobmFtZV0gPSBlbnRyeTsKCiAgICAgICAgICAgIGlmKHJlLnRlc3QocHJvcCkpIHJldHVybiBtYWtlVVJMKHBhdGhuYW1lKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sCiAgICAgICprZXlzKCkgewogICAgICAgIGZvcihsZXQgaWQgaW4ga2V5cykgeWllbGQga2V5c1tpZF07CiAgICAgIH0sCiAgICAgICp2YWx1ZXMoKSB7CiAgICAgICAgZm9yKGxldCBpZCBpbiBrZXlzKSB5aWVsZCB0aGlzW2tleXNbaWRdXTsKICAgICAgfSwKICAgICAgKmVudHJpZXMoKSB7CiAgICAgICAgZm9yKGxldCBpZCBpbiBrZXlzKSB5aWVsZCBba2V5c1tpZF0sIHRoaXNba2V5c1tpZF1dXTsKICAgICAgfSwKICAgICAgKmdldE1lbWJlcnMoKSB7CiAgICAgICAgZm9yKGxldCBba2V5LHZhbHVlXSBvZiB0aGlzLmVudHJpZXMoKSkgaWYodHlwZXMuaXNNYXAodmFsdWUpKSB5aWVsZCogdmFsdWUuZW50cmllcygpOwogICAgICB9LAogICAgfSksCiAgKTsKfQoAAAAAAAAAAOIIAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJYIAAAAAAAAlggAAAAAAAAAAAAAAIB1QA"
				],
				[
					2207,
					1,
					"insert",
					{
						"characters": "pred"
					},
					"BAAAAGcIAAAAAAAAaAgAAAAAAAAAAAAAaAgAAAAAAABpCAAAAAAAAAAAAABpCAAAAAAAAGoIAAAAAAAAAAAAAGoIAAAAAAAAawgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGcIAAAAAAAAZwgAAAAAAAAAAAAAAADwvw"
				],
				[
					2208,
					1,
					"insert",
					{
						"characters": " =>"
					},
					"AwAAAGsIAAAAAAAAbAgAAAAAAAAAAAAAbAgAAAAAAABtCAAAAAAAAAAAAABtCAAAAAAAAG4IAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGsIAAAAAAAAawgAAAAAAAAAAAAAAADwvw"
				],
				[
					2209,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAG4IAAAAAAAAbwgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG4IAAAAAAAAbggAAAAAAAAAAAAAAADwvw"
				],
				[
					2210,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAG8IAAAAAAAAcQgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG8IAAAAAAAAbwgAAAAAAAAAAAAAAADwvw"
				],
				[
					2212,
					1,
					"insert",
					{
						"characters": " =>"
					},
					"AwAAAHEIAAAAAAAAcggAAAAAAAAAAAAAcggAAAAAAABzCAAAAAAAAAAAAABzCAAAAAAAAHQIAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHEIAAAAAAAAcQgAAAAAAAAAAAAAAADwvw"
				],
				[
					2213,
					1,
					"insert",
					{
						"characters": " true"
					},
					"BQAAAHQIAAAAAAAAdQgAAAAAAAAAAAAAdQgAAAAAAAB2CAAAAAAAAAAAAAB2CAAAAAAAAHcIAAAAAAAAAAAAAHcIAAAAAAAAeAgAAAAAAAAAAAAAeAgAAAAAAAB5CAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHQIAAAAAAAAdAgAAAAAAAAAAAAAAADwvw"
				],
				[
					2215,
					1,
					"insert",
					{
						"characters": "\nuf"
					},
					"BQAAAHwIAAAAAAAAfQgAAAAAAAAAAAAAfQgAAAAAAACDCAAAAAAAAAAAAACDCAAAAAAAAIUIAAAAAAAAAAAAAIUIAAAAAAAAhggAAAAAAAAAAAAAhggAAAAAAACHCAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHwIAAAAAAAAfAgAAAAAAAD////////vfw"
				],
				[
					2216,
					2,
					"left_delete",
					null,
					"AgAAAIYIAAAAAAAAhggAAAAAAAABAAAAZoUIAAAAAAAAhQgAAAAAAAABAAAAdQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIcIAAAAAAAAhwgAAAAAAAAAAAAAAADwvw"
				],
				[
					2217,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AgAAAIUIAAAAAAAAhggAAAAAAAAAAAAAhggAAAAAAACHCAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIUIAAAAAAAAhQgAAAAAAAAAAAAAAADwvw"
				],
				[
					2218,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAIcIAAAAAAAAiQgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIcIAAAAAAAAhwgAAAAAAAAAAAAAAADwvw"
				],
				[
					2219,
					1,
					"insert",
					{
						"characters": "Array.isArray"
					},
					"DQAAAIgIAAAAAAAAiQgAAAAAAAAAAAAAiQgAAAAAAACKCAAAAAAAAAAAAACKCAAAAAAAAIsIAAAAAAAAAAAAAIsIAAAAAAAAjAgAAAAAAAAAAAAAjAgAAAAAAACNCAAAAAAAAAAAAACNCAAAAAAAAI4IAAAAAAAAAAAAAI4IAAAAAAAAjwgAAAAAAAAAAAAAjwgAAAAAAACQCAAAAAAAAAAAAACQCAAAAAAAAJEIAAAAAAAAAAAAAJEIAAAAAAAAkggAAAAAAAAAAAAAkggAAAAAAACTCAAAAAAAAAAAAACTCAAAAAAAAJQIAAAAAAAAAAAAAJQIAAAAAAAAlQgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIgIAAAAAAAAiAgAAAAAAAAAAAAAAADwvw"
				],
				[
					2220,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJUIAAAAAAAAlwgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJUIAAAAAAAAlQgAAAAAAAAAAAAAAADwvw"
				],
				[
					2221,
					1,
					"insert",
					{
						"characters": "pred"
					},
					"BAAAAJYIAAAAAAAAlwgAAAAAAAAAAAAAlwgAAAAAAACYCAAAAAAAAAAAAACYCAAAAAAAAJkIAAAAAAAAAAAAAJkIAAAAAAAAmggAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJYIAAAAAAAAlggAAAAAAAAAAAAAAADwvw"
				],
				[
					2223,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJwIAAAAAAAAnQgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJwIAAAAAAAAnAgAAAAAAAAAAAAAAADwvw"
				],
				[
					2224,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAJ0IAAAAAAAAnwgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ0IAAAAAAAAnQgAAAAAAAAAAAAAAADwvw"
				],
				[
					2225,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAJ4IAAAAAAAAnwgAAAAAAAAAAAAAnwgAAAAAAACnCAAAAAAAAAAAAACnCAAAAAAAAKgIAAAAAAAAAAAAAKgIAAAAAAAAsAgAAAAAAAAAAAAAnwgAAAAAAACfCAAAAAAAAAgAAAAgICAgICAgIJ8IAAAAAAAAqQgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ4IAAAAAAAAnggAAAAAAAAAAAAAAADwvw"
				],
				[
					2226,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAAKkIAAAAAAAAqggAAAAAAAAAAAAAqggAAAAAAACrCAAAAAAAAAAAAACrCAAAAAAAAKwIAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKkIAAAAAAAAqQgAAAAAAAAAAAAAAADwvw"
				],
				[
					2227,
					1,
					"insert",
					{
						"characters": " adr"
					},
					"BAAAAKwIAAAAAAAArQgAAAAAAAAAAAAArQgAAAAAAACuCAAAAAAAAAAAAACuCAAAAAAAAK8IAAAAAAAAAAAAAK8IAAAAAAAAsAgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKwIAAAAAAAArAgAAAAAAAAAAAAAAADwvw"
				],
				[
					2228,
					2,
					"left_delete",
					null,
					"AgAAAK8IAAAAAAAArwgAAAAAAAABAAAAcq4IAAAAAAAArggAAAAAAAABAAAAZA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALAIAAAAAAAAsAgAAAAAAAAAAAAAAADwvw"
				],
				[
					2229,
					1,
					"insert",
					{
						"characters": "rr=pred;"
					},
					"CAAAAK4IAAAAAAAArwgAAAAAAAAAAAAArwgAAAAAAACwCAAAAAAAAAAAAACwCAAAAAAAALEIAAAAAAAAAAAAALEIAAAAAAAAsggAAAAAAAAAAAAAsggAAAAAAACzCAAAAAAAAAAAAACzCAAAAAAAALQIAAAAAAAAAAAAALQIAAAAAAAAtQgAAAAAAAAAAAAAtQgAAAAAAAC2CAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK4IAAAAAAAArggAAAAAAAAAAAAAAADwvw"
				],
				[
					2230,
					1,
					"insert",
					{
						"characters": "\npred="
					},
					"BwAAALYIAAAAAAAAtwgAAAAAAAAAAAAAtwgAAAAAAADBCAAAAAAAAAAAAADBCAAAAAAAAMIIAAAAAAAAAAAAAMIIAAAAAAAAwwgAAAAAAAAAAAAAwwgAAAAAAADECAAAAAAAAAAAAADECAAAAAAAAMUIAAAAAAAAAAAAAMUIAAAAAAAAxggAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALYIAAAAAAAAtggAAAAAAAAAAAAAAADwvw"
				],
				[
					2231,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMYIAAAAAAAAxwgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMYIAAAAAAAAxggAAAAAAAAAAAAAAADwvw"
				],
				[
					2232,
					1,
					"left_delete",
					null,
					"AQAAAMYIAAAAAAAAxggAAAAAAAABAAAAIA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMcIAAAAAAAAxwgAAAAAAAAAAAAAAADwvw"
				],
				[
					2233,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAMYIAAAAAAAAyAgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMYIAAAAAAAAxggAAAAAAAAAAAAAAADwvw"
				],
				[
					2234,
					1,
					"insert",
					{
						"characters": "key,value"
					},
					"CQAAAMcIAAAAAAAAyAgAAAAAAAAAAAAAyAgAAAAAAADJCAAAAAAAAAAAAADJCAAAAAAAAMoIAAAAAAAAAAAAAMoIAAAAAAAAywgAAAAAAAAAAAAAywgAAAAAAADMCAAAAAAAAAAAAADMCAAAAAAAAM0IAAAAAAAAAAAAAM0IAAAAAAAAzggAAAAAAAAAAAAAzggAAAAAAADPCAAAAAAAAAAAAADPCAAAAAAAANAIAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMcIAAAAAAAAxwgAAAAAAAAAAAAAAADwvw"
				],
				[
					2236,
					1,
					"insert",
					{
						"characters": " =>"
					},
					"AwAAANEIAAAAAAAA0ggAAAAAAAAAAAAA0ggAAAAAAADTCAAAAAAAAAAAAADTCAAAAAAAANQIAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANEIAAAAAAAA0QgAAAAAAAAAAAAAAADwvw"
				],
				[
					2237,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANQIAAAAAAAA1QgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANQIAAAAAAAA1AgAAAAAAAAAAAAAAADwvw"
				],
				[
					2244,
					1,
					"insert",
					{
						"characters": "arr.indexOf"
					},
					"CwAAANUIAAAAAAAA1ggAAAAAAAAAAAAA1ggAAAAAAADXCAAAAAAAAAAAAADXCAAAAAAAANgIAAAAAAAAAAAAANgIAAAAAAAA2QgAAAAAAAAAAAAA2QgAAAAAAADaCAAAAAAAAAAAAADaCAAAAAAAANsIAAAAAAAAAAAAANsIAAAAAAAA3AgAAAAAAAAAAAAA3AgAAAAAAADdCAAAAAAAAAAAAADdCAAAAAAAAN4IAAAAAAAAAAAAAN4IAAAAAAAA3wgAAAAAAAAAAAAA3wgAAAAAAADgCAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANUIAAAAAAAA1QgAAAAAAAAAAAAAAADwvw"
				],
				[
					2245,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAOAIAAAAAAAA4ggAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOAIAAAAAAAA4AgAAAAAAAAAAAAAAADwvw"
				],
				[
					2246,
					1,
					"insert",
					{
						"characters": "key"
					},
					"AwAAAOEIAAAAAAAA4ggAAAAAAAAAAAAA4ggAAAAAAADjCAAAAAAAAAAAAADjCAAAAAAAAOQIAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOEIAAAAAAAA4QgAAAAAAAAAAAAAAADwvw"
				],
				[
					2248,
					1,
					"insert",
					{
						"characters": " !="
					},
					"AwAAAOUIAAAAAAAA5ggAAAAAAAAAAAAA5ggAAAAAAADnCAAAAAAAAAAAAADnCAAAAAAAAOgIAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOUIAAAAAAAA5QgAAAAAAAAAAAAAAADwvw"
				],
				[
					2249,
					1,
					"insert",
					{
						"characters": " -1)"
					},
					"BAAAAOgIAAAAAAAA6QgAAAAAAAAAAAAA6QgAAAAAAADqCAAAAAAAAAAAAADqCAAAAAAAAOsIAAAAAAAAAAAAAOsIAAAAAAAA7AgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOgIAAAAAAAA6AgAAAAAAAAAAAAAAADwvw"
				],
				[
					2250,
					1,
					"left_delete",
					null,
					"AQAAAOsIAAAAAAAA6wgAAAAAAAABAAAAKQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOwIAAAAAAAA7AgAAAAAAAAAAAAAAADwvw"
				],
				[
					2251,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAOsIAAAAAAAA7AgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOsIAAAAAAAA6wgAAAAAAAAAAAAAAADwvw"
				],
				[
					2256,
					1,
					"insert",
					{
						"characters": " if"
					},
					"AwAAAD0JAAAAAAAAPgkAAAAAAAAAAAAAPgkAAAAAAAA/CQAAAAAAAAAAAAA/CQAAAAAAAEAJAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD0JAAAAAAAAPQkAAAAAAAAAAAAAAADwvw"
				],
				[
					2257,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAEAJAAAAAAAAQgkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEAJAAAAAAAAQAkAAAAAAAAAAAAAAADwvw"
				],
				[
					2258,
					1,
					"insert",
					{
						"characters": "pred"
					},
					"BAAAAEEJAAAAAAAAQgkAAAAAAAAAAAAAQgkAAAAAAABDCQAAAAAAAAAAAABDCQAAAAAAAEQJAAAAAAAAAAAAAEQJAAAAAAAARQkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEEJAAAAAAAAQQkAAAAAAAAAAAAAAADwvw"
				],
				[
					2259,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAEUJAAAAAAAARwkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEUJAAAAAAAARQkAAAAAAAAAAAAAAADwvw"
				],
				[
					2260,
					1,
					"insert",
					{
						"characters": "key,value"
					},
					"CQAAAEYJAAAAAAAARwkAAAAAAAAAAAAARwkAAAAAAABICQAAAAAAAAAAAABICQAAAAAAAEkJAAAAAAAAAAAAAEkJAAAAAAAASgkAAAAAAAAAAAAASgkAAAAAAABLCQAAAAAAAAAAAABLCQAAAAAAAEwJAAAAAAAAAAAAAEwJAAAAAAAATQkAAAAAAAAAAAAATQkAAAAAAABOCQAAAAAAAAAAAABOCQAAAAAAAE8JAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEYJAAAAAAAARgkAAAAAAAAAAAAAAADwvw"
				],
				[
					2277,
					1,
					"left_delete",
					null,
					"AQAAAG0IAAAAAAAAbQgAAAAAAAABAAAAPg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG4IAAAAAAAAbggAAAAAAAAAAAAAAADwvw"
				],
				[
					2279,
					1,
					"insert",
					{
						"characters": "key,value"
					},
					"CQAAAG8IAAAAAAAAcAgAAAAAAAAAAAAAcAgAAAAAAABxCAAAAAAAAAAAAABxCAAAAAAAAHIIAAAAAAAAAAAAAHIIAAAAAAAAcwgAAAAAAAAAAAAAcwgAAAAAAAB0CAAAAAAAAAAAAAB0CAAAAAAAAHUIAAAAAAAAAAAAAHUIAAAAAAAAdggAAAAAAAAAAAAAdggAAAAAAAB3CAAAAAAAAAAAAAB3CAAAAAAAAHgIAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG8IAAAAAAAAbwgAAAAAAAAAAAAAAADwvw"
				],
				[
					2280,
					8,
					"left_delete",
					null,
					"CAAAAHcIAAAAAAAAdwgAAAAAAAABAAAAZXYIAAAAAAAAdggAAAAAAAABAAAAdXUIAAAAAAAAdQgAAAAAAAABAAAAbHQIAAAAAAAAdAgAAAAAAAABAAAAYXMIAAAAAAAAcwgAAAAAAAABAAAAdnIIAAAAAAAAcggAAAAAAAABAAAALHEIAAAAAAAAcQgAAAAAAAABAAAAeXAIAAAAAAAAcAgAAAAAAAABAAAAZQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHgIAAAAAAAAeAgAAAAAAAAAAAAAAADwvw"
				],
				[
					2281,
					1,
					"insert",
					{
						"characters": ",v"
					},
					"AgAAAHAIAAAAAAAAcQgAAAAAAAAAAAAAcQgAAAAAAAByCAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHAIAAAAAAAAcAgAAAAAAAAAAAAAAADwvw"
				],
				[
					2286,
					1,
					"insert",
					{
						"characters": "\ngetName"
					},
					"CwAAAHQJAAAAAAAAdQkAAAAAAAAAAAAAdQkAAAAAAAB7CQAAAAAAAAAAAAB1CQAAAAAAAHUJAAAAAAAABgAAACAgICAgIHUJAAAAAAAAeQkAAAAAAAAAAAAAeQkAAAAAAAB6CQAAAAAAAAAAAAB6CQAAAAAAAHsJAAAAAAAAAAAAAHsJAAAAAAAAfAkAAAAAAAAAAAAAfAkAAAAAAAB9CQAAAAAAAAAAAAB9CQAAAAAAAH4JAAAAAAAAAAAAAH4JAAAAAAAAfwkAAAAAAAAAAAAAfwkAAAAAAACACQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHQJAAAAAAAAdAkAAAAAAAAAAAAAAADwvw"
				],
				[
					2287,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAIAJAAAAAAAAggkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIAJAAAAAAAAgAkAAAAAAAAAAAAAAADwvw"
				],
				[
					2289,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIIJAAAAAAAAgwkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIIJAAAAAAAAggkAAAAAAAAAAAAAAADwvw"
				],
				[
					2290,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAIMJAAAAAAAAhQkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIMJAAAAAAAAgwkAAAAAAAAAAAAAAADwvw"
				],
				[
					2291,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAIQJAAAAAAAAhQkAAAAAAAAAAAAAhQkAAAAAAACJCQAAAAAAAAAAAACJCQAAAAAAAIoJAAAAAAAAAAAAAIoJAAAAAAAAjgkAAAAAAAAAAAAAhQkAAAAAAACFCQAAAAAAAAQAAAAgICAghQkAAAAAAACLCQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIQJAAAAAAAAhAkAAAAAAAAAAAAAAADwvw"
				],
				[
					2292,
					1,
					"insert",
					{
						"characters": "const"
					},
					"BQAAAIsJAAAAAAAAjAkAAAAAAAAAAAAAjAkAAAAAAACNCQAAAAAAAAAAAACNCQAAAAAAAI4JAAAAAAAAAAAAAI4JAAAAAAAAjwkAAAAAAAAAAAAAjwkAAAAAAACQCQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIsJAAAAAAAAiwkAAAAAAAAAAAAAAADwvw"
				],
				[
					2293,
					1,
					"insert",
					{
						"characters": " it"
					},
					"AwAAAJAJAAAAAAAAkQkAAAAAAAAAAAAAkQkAAAAAAACSCQAAAAAAAAAAAACSCQAAAAAAAJMJAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJAJAAAAAAAAkAkAAAAAAAAAAAAAAADwvw"
				],
				[
					2294,
					2,
					"left_delete",
					null,
					"AgAAAJIJAAAAAAAAkgkAAAAAAAABAAAAdJEJAAAAAAAAkQkAAAAAAAABAAAAaQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJMJAAAAAAAAkwkAAAAAAAAAAAAAAADwvw"
				],
				[
					2295,
					1,
					"insert",
					{
						"characters": "gen=this.getMembe"
					},
					"EQAAAJEJAAAAAAAAkgkAAAAAAAAAAAAAkgkAAAAAAACTCQAAAAAAAAAAAACTCQAAAAAAAJQJAAAAAAAAAAAAAJQJAAAAAAAAlQkAAAAAAAAAAAAAlQkAAAAAAACWCQAAAAAAAAAAAACWCQAAAAAAAJcJAAAAAAAAAAAAAJcJAAAAAAAAmAkAAAAAAAAAAAAAmAkAAAAAAACZCQAAAAAAAAAAAACZCQAAAAAAAJoJAAAAAAAAAAAAAJoJAAAAAAAAmwkAAAAAAAAAAAAAmwkAAAAAAACcCQAAAAAAAAAAAACcCQAAAAAAAJ0JAAAAAAAAAAAAAJ0JAAAAAAAAngkAAAAAAAAAAAAAngkAAAAAAACfCQAAAAAAAAAAAACfCQAAAAAAAKAJAAAAAAAAAAAAAKAJAAAAAAAAoQkAAAAAAAAAAAAAoQkAAAAAAACiCQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJEJAAAAAAAAkQkAAAAAAAAAAAAAAADwvw"
				],
				[
					2296,
					1,
					"insert",
					{
						"characters": "rs"
					},
					"AgAAAKIJAAAAAAAAowkAAAAAAAAAAAAAowkAAAAAAACkCQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKIJAAAAAAAAogkAAAAAAAAAAAAAAADwvw"
				],
				[
					2297,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAKQJAAAAAAAApgkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKQJAAAAAAAApAkAAAAAAAAAAAAAAADwvw"
				],
				[
					2298,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAKUJAAAAAAAApwkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKUJAAAAAAAApQkAAAAAAAAAAAAAAADwvw"
				],
				[
					2299,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAKYJAAAAAAAAqAkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKYJAAAAAAAApgkAAAAAAAAAAAAAAADwvw"
				],
				[
					2300,
					1,
					"insert",
					{
						"characters": "constructor"
					},
					"CwAAAKcJAAAAAAAAqAkAAAAAAAAAAAAAqAkAAAAAAACpCQAAAAAAAAAAAACpCQAAAAAAAKoJAAAAAAAAAAAAAKoJAAAAAAAAqwkAAAAAAAAAAAAAqwkAAAAAAACsCQAAAAAAAAAAAACsCQAAAAAAAK0JAAAAAAAAAAAAAK0JAAAAAAAArgkAAAAAAAAAAAAArgkAAAAAAACvCQAAAAAAAAAAAACvCQAAAAAAALAJAAAAAAAAAAAAALAJAAAAAAAAsQkAAAAAAAAAAAAAsQkAAAAAAACyCQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKcJAAAAAAAApwkAAAAAAAAAAAAAAADwvw"
				],
				[
					2302,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAALUJAAAAAAAAtgkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALUJAAAAAAAAtQkAAAAAAAAAAAAAAADwvw"
				],
				[
					2305,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAALYJAAAAAAAAtwkAAAAAAAAAAAAAtwkAAAAAAAC9CQAAAAAAAAAAAAC9CQAAAAAAAL4JAAAAAAAAAAAAAL4JAAAAAAAAxAkAAAAAAAAAAAAAtwkAAAAAAAC3CQAAAAAAAAYAAAAgICAgICA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALYJAAAAAAAAtgkAAAAAAAAAAAAAAADwvw"
				],
				[
					2308,
					1,
					"insert",
					{
						"characters": "gen.next"
					},
					"CAAAAL4JAAAAAAAAvwkAAAAAAAAAAAAAvwkAAAAAAADACQAAAAAAAAAAAADACQAAAAAAAMEJAAAAAAAAAAAAAMEJAAAAAAAAwgkAAAAAAAAAAAAAwgkAAAAAAADDCQAAAAAAAAAAAADDCQAAAAAAAMQJAAAAAAAAAAAAAMQJAAAAAAAAxQkAAAAAAAAAAAAAxQkAAAAAAADGCQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL4JAAAAAAAAvgkAAAAAAAAAAAAAAADwvw"
				],
				[
					2309,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAMYJAAAAAAAAyAkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMYJAAAAAAAAxgkAAAAAAAAAAAAAAADwvw"
				],
				[
					2312,
					1,
					"insert",
					{
						"characters": "const{value}="
					},
					"DQAAAL4JAAAAAAAAvwkAAAAAAAAAAAAAvwkAAAAAAADACQAAAAAAAAAAAADACQAAAAAAAMEJAAAAAAAAAAAAAMEJAAAAAAAAwgkAAAAAAAAAAAAAwgkAAAAAAADDCQAAAAAAAAAAAADDCQAAAAAAAMQJAAAAAAAAAAAAAMQJAAAAAAAAxQkAAAAAAAAAAAAAxQkAAAAAAADGCQAAAAAAAAAAAADGCQAAAAAAAMcJAAAAAAAAAAAAAMcJAAAAAAAAyAkAAAAAAAAAAAAAyAkAAAAAAADJCQAAAAAAAAAAAADJCQAAAAAAAMoJAAAAAAAAAAAAAMoJAAAAAAAAywkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL4JAAAAAAAAvgkAAAAAAAAAAAAAAABIQA"
				],
				[
					2314,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAANUJAAAAAAAA1gkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANUJAAAAAAAA1QkAAAAAAAD////////vfw"
				],
				[
					2316,
					1,
					"left_delete",
					null,
					"AQAAALYJAAAAAAAAtgkAAAAAAAABAAAACg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALcJAAAAAAAAtwkAAAAAAAAAAAAAAABuQA"
				],
				[
					2320,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAANUJAAAAAAAA1gkAAAAAAAAAAAAA1gkAAAAAAADcCQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANUJAAAAAAAA1QkAAAAAAAAAAAAAAADwvw"
				],
				[
					2323,
					1,
					"insert",
					{
						"characters": "\nrert"
					},
					"BwAAANwJAAAAAAAA3QkAAAAAAAAAAAAA3QkAAAAAAADjCQAAAAAAAAAAAADWCQAAAAAAANYJAAAAAAAABgAAACAgICAgIN0JAAAAAAAA3gkAAAAAAAAAAAAA3gkAAAAAAADfCQAAAAAAAAAAAADfCQAAAAAAAOAJAAAAAAAAAAAAAOAJAAAAAAAA4QkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANwJAAAAAAAA3AkAAAAAAAAAAAAAAADwvw"
				],
				[
					2324,
					2,
					"left_delete",
					null,
					"AgAAAOAJAAAAAAAA4AkAAAAAAAABAAAAdN8JAAAAAAAA3wkAAAAAAAABAAAAcg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOEJAAAAAAAA4QkAAAAAAAAAAAAAAADwvw"
				],
				[
					2325,
					1,
					"insert",
					{
						"characters": "turn"
					},
					"BAAAAN8JAAAAAAAA4AkAAAAAAAAAAAAA4AkAAAAAAADhCQAAAAAAAAAAAADhCQAAAAAAAOIJAAAAAAAAAAAAAOIJAAAAAAAA4wkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN8JAAAAAAAA3wkAAAAAAAAAAAAAAADwvw"
				],
				[
					2326,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOMJAAAAAAAA5AkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOMJAAAAAAAA4wkAAAAAAAAAAAAAAADwvw"
				],
				[
					2327,
					1,
					"insert",
					{
						"characters": "value.replace"
					},
					"DQAAAOQJAAAAAAAA5QkAAAAAAAAAAAAA5QkAAAAAAADmCQAAAAAAAAAAAADmCQAAAAAAAOcJAAAAAAAAAAAAAOcJAAAAAAAA6AkAAAAAAAAAAAAA6AkAAAAAAADpCQAAAAAAAAAAAADpCQAAAAAAAOoJAAAAAAAAAAAAAOoJAAAAAAAA6wkAAAAAAAAAAAAA6wkAAAAAAADsCQAAAAAAAAAAAADsCQAAAAAAAO0JAAAAAAAAAAAAAO0JAAAAAAAA7gkAAAAAAAAAAAAA7gkAAAAAAADvCQAAAAAAAAAAAADvCQAAAAAAAPAJAAAAAAAAAAAAAPAJAAAAAAAA8QkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOQJAAAAAAAA5AkAAAAAAAAAAAAAAADwvw"
				],
				[
					2328,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAPEJAAAAAAAA8wkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPEJAAAAAAAA8QkAAAAAAAAAAAAAAADwvw"
				],
				[
					2330,
					1,
					"left_delete",
					null,
					"AQAAAPIJAAAAAAAA8gkAAAAAAAABAAAAKQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPMJAAAAAAAA8wkAAAAAAAAAAAAAAADwvw"
				],
				[
					2331,
					1,
					"insert",
					{
						"characters": "/\\/"
					},
					"AwAAAPIJAAAAAAAA8wkAAAAAAAAAAAAA8wkAAAAAAAD0CQAAAAAAAAAAAAD0CQAAAAAAAPUJAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPIJAAAAAAAA8gkAAAAAAAAAAAAAAADwvw"
				],
				[
					2332,
					1,
					"left_delete",
					null,
					"AQAAAPQJAAAAAAAA9AkAAAAAAAABAAAALw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPUJAAAAAAAA9QkAAAAAAAAAAAAAAADwvw"
				],
				[
					2333,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAPQJAAAAAAAA9gkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPQJAAAAAAAA9AkAAAAAAAAAAAAAAADwvw"
				],
				[
					2334,
					1,
					"insert",
					{
						"characters": "\\"
					},
					"AQAAAPUJAAAAAAAA9gkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPUJAAAAAAAA9QkAAAAAAAAAAAAAAADwvw"
				],
				[
					2336,
					1,
					"insert",
					{
						"characters": "$/."
					},
					"AwAAAPcJAAAAAAAA+AkAAAAAAAAAAAAA+AkAAAAAAAD5CQAAAAAAAAAAAAD5CQAAAAAAAPoJAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPcJAAAAAAAA9wkAAAAAAAAAAAAAAADwvw"
				],
				[
					2337,
					1,
					"left_delete",
					null,
					"AQAAAPkJAAAAAAAA+QkAAAAAAAABAAAALg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPoJAAAAAAAA+gkAAAAAAAAAAAAAAADwvw"
				],
				[
					2338,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAPkJAAAAAAAA+gkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPkJAAAAAAAA+QkAAAAAAAAAAAAAAADwvw"
				],
				[
					2339,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPoJAAAAAAAA+wkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPoJAAAAAAAA+gkAAAAAAAAAAAAAAADwvw"
				],
				[
					2340,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAPsJAAAAAAAA/QkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPsJAAAAAAAA+wkAAAAAAAAAAAAAAADwvw"
				],
				[
					2342,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAP0JAAAAAAAA/gkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP0JAAAAAAAA/QkAAAAAAAAAAAAAAADwvw"
				],
				[
					2343,
					1,
					"left_delete",
					null,
					"AQAAAP0JAAAAAAAA/QkAAAAAAAABAAAAKQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP4JAAAAAAAA/gkAAAAAAAAAAAAAAADwvw"
				],
				[
					2344,
					1,
					"insert",
					{
						"characters": ");"
					},
					"AgAAAP0JAAAAAAAA/gkAAAAAAAAAAAAA/gkAAAAAAAD/CQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP0JAAAAAAAA/QkAAAAAAAAAAAAAAADwvw"
				],
				[
					2357,
					1,
					"insert",
					{
						"characters": "console.log"
					},
					"CwAAANYJAAAAAAAA1wkAAAAAAAAAAAAA1wkAAAAAAADYCQAAAAAAAAAAAADYCQAAAAAAANkJAAAAAAAAAAAAANkJAAAAAAAA2gkAAAAAAAAAAAAA2gkAAAAAAADbCQAAAAAAAAAAAADbCQAAAAAAANwJAAAAAAAAAAAAANwJAAAAAAAA3QkAAAAAAAAAAAAA3QkAAAAAAADeCQAAAAAAAAAAAADeCQAAAAAAAN8JAAAAAAAAAAAAAN8JAAAAAAAA4AkAAAAAAAAAAAAA4AkAAAAAAADhCQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANYJAAAAAAAA1gkAAAAAAAAAAAAAAAAwQA"
				],
				[
					2358,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAOEJAAAAAAAA4wkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOEJAAAAAAAA4QkAAAAAAAAAAAAAAADwvw"
				],
				[
					2361,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMIJAAAAAAAAwwkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMIJAAAAAAAAwgkAAAAAAAAAAAAAAADwvw"
				],
				[
					2364,
					1,
					"insert",
					{
						"characters": "ret"
					},
					"BAAAAMMJAAAAAAAAxAkAAAAAAAAAAAAAxAkAAAAAAADECQAAAAAAAAcAAAB7dmFsdWV9xAkAAAAAAADFCQAAAAAAAAAAAADFCQAAAAAAAMYJAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMMJAAAAAAAAygkAAAAAAAAAAAAAAADwvw"
				],
				[
					2370,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AQAAAN8JAAAAAAAA4AkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN8JAAAAAAAA3wkAAAAAAAAAAAAAAADwvw"
				],
				[
					2371,
					1,
					"left_delete",
					null,
					"AQAAAN8JAAAAAAAA3wkAAAAAAAABAAAAZw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOAJAAAAAAAA4AkAAAAAAAAAAAAAAADwvw"
				],
				[
					2372,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAN8JAAAAAAAA4QkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN8JAAAAAAAA3wkAAAAAAAAAAAAAAADwvw"
				],
				[
					2373,
					1,
					"insert",
					{
						"characters": "getName"
					},
					"BwAAAOAJAAAAAAAA4QkAAAAAAAAAAAAA4QkAAAAAAADiCQAAAAAAAAAAAADiCQAAAAAAAOMJAAAAAAAAAAAAAOMJAAAAAAAA5AkAAAAAAAAAAAAA5AkAAAAAAADlCQAAAAAAAAAAAADlCQAAAAAAAOYJAAAAAAAAAAAAAOYJAAAAAAAA5wkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOAJAAAAAAAA4AkAAAAAAAAAAAAAAADwvw"
				],
				[
					2375,
					1,
					"insert",
					{
						"characters": ",ret"
					},
					"BAAAAOgJAAAAAAAA6QkAAAAAAAAAAAAA6QkAAAAAAADqCQAAAAAAAAAAAADqCQAAAAAAAOsJAAAAAAAAAAAAAOsJAAAAAAAA7AkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOgJAAAAAAAA6AkAAAAAAAAAAAAAAADwvw"
				],
				[
					2377,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAO0JAAAAAAAA7gkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO0JAAAAAAAA7QkAAAAAAAAAAAAAAADwvw"
				],
				[
					2382,
					1,
					"insert",
					{
						"characters": "\nco"
					},
					"AwAAAO4JAAAAAAAA7wkAAAAAAAAAAAAA7wkAAAAAAADwCQAAAAAAAAAAAADwCQAAAAAAAPEJAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO4JAAAAAAAA7gkAAAAAAAAAAAAAAABrQA"
				],
				[
					2383,
					2,
					"left_delete",
					null,
					"AgAAAPAJAAAAAAAA8AkAAAAAAAABAAAAb+8JAAAAAAAA7wkAAAAAAAABAAAAYw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPEJAAAAAAAA8QkAAAAAAAAAAAAAAADwvw"
				],
				[
					2384,
					1,
					"insert",
					{
						"characters": "const"
					},
					"BQAAAO8JAAAAAAAA8AkAAAAAAAAAAAAA8AkAAAAAAADxCQAAAAAAAAAAAADxCQAAAAAAAPIJAAAAAAAAAAAAAPIJAAAAAAAA8wkAAAAAAAAAAAAA8wkAAAAAAAD0CQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO8JAAAAAAAA7wkAAAAAAAAAAAAAAADwvw"
				],
				[
					2385,
					1,
					"insert",
					{
						"characters": " value=ret.value;"
					},
					"EQAAAPQJAAAAAAAA9QkAAAAAAAAAAAAA9QkAAAAAAAD2CQAAAAAAAAAAAAD2CQAAAAAAAPcJAAAAAAAAAAAAAPcJAAAAAAAA+AkAAAAAAAAAAAAA+AkAAAAAAAD5CQAAAAAAAAAAAAD5CQAAAAAAAPoJAAAAAAAAAAAAAPoJAAAAAAAA+wkAAAAAAAAAAAAA+wkAAAAAAAD8CQAAAAAAAAAAAAD8CQAAAAAAAP0JAAAAAAAAAAAAAP0JAAAAAAAA/gkAAAAAAAAAAAAA/gkAAAAAAAD/CQAAAAAAAAAAAAD/CQAAAAAAAAAKAAAAAAAAAAAAAAAKAAAAAAAAAQoAAAAAAAAAAAAAAQoAAAAAAAACCgAAAAAAAAAAAAACCgAAAAAAAAMKAAAAAAAAAAAAAAMKAAAAAAAABAoAAAAAAAAAAAAABAoAAAAAAAAFCgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPQJAAAAAAAA9AkAAAAAAAAAAAAAAADwvw"
				],
				[
					2392,
					1,
					"insert",
					{
						"characters": "}"
					},
					"AgAAAMMJAAAAAAAAxAkAAAAAAAAAAAAAxAkAAAAAAADECQAAAAAAAAMAAAByZXQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMMJAAAAAAAAxgkAAAAAAAAAAAAAAADwvw"
				],
				[
					2393,
					1,
					"left_delete",
					null,
					"AQAAAMMJAAAAAAAAwwkAAAAAAAABAAAAfQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMQJAAAAAAAAxAkAAAAAAAAAAAAAAADwvw"
				],
				[
					2394,
					1,
					"insert",
					{
						"characters": "{value}"
					},
					"BwAAAMMJAAAAAAAAxAkAAAAAAAAAAAAAxAkAAAAAAADFCQAAAAAAAAAAAADFCQAAAAAAAMYJAAAAAAAAAAAAAMYJAAAAAAAAxwkAAAAAAAAAAAAAxwkAAAAAAADICQAAAAAAAAAAAADICQAAAAAAAMkJAAAAAAAAAAAAAMkJAAAAAAAAygkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMMJAAAAAAAAwwkAAAAAAAAAAAAAAADwvw"
				],
				[
					2399,
					1,
					"insert",
					{
						"characters": "["
					},
					"AQAAAMMJAAAAAAAAxAkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMMJAAAAAAAAwwkAAAAAAAAAAAAAAADwvw"
				],
				[
					2400,
					1,
					"insert",
					{
						"characters": "value]"
					},
					"BgAAAMQJAAAAAAAAxQkAAAAAAAAAAAAAxQkAAAAAAADGCQAAAAAAAAAAAADGCQAAAAAAAMcJAAAAAAAAAAAAAMcJAAAAAAAAyAkAAAAAAAAAAAAAyAkAAAAAAADJCQAAAAAAAAAAAADJCQAAAAAAAMoJAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMQJAAAAAAAAxAkAAAAAAAAAAAAAAADwvw"
				],
				[
					2401,
					7,
					"right_delete",
					null,
					"BwAAAMoJAAAAAAAAygkAAAAAAAABAAAAe8oJAAAAAAAAygkAAAAAAAABAAAAdsoJAAAAAAAAygkAAAAAAAABAAAAYcoJAAAAAAAAygkAAAAAAAABAAAAbMoJAAAAAAAAygkAAAAAAAABAAAAdcoJAAAAAAAAygkAAAAAAAABAAAAZcoJAAAAAAAAygkAAAAAAAABAAAAfQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMoJAAAAAAAAygkAAAAAAAAAAAAAAADwvw"
				],
				[
					2404,
					1,
					"insert",
					{
						"characters": ".valuze"
					},
					"BwAAANUJAAAAAAAA1gkAAAAAAAAAAAAA1gkAAAAAAADXCQAAAAAAAAAAAADXCQAAAAAAANgJAAAAAAAAAAAAANgJAAAAAAAA2QkAAAAAAAAAAAAA2QkAAAAAAADaCQAAAAAAAAAAAADaCQAAAAAAANsJAAAAAAAAAAAAANsJAAAAAAAA3AkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANUJAAAAAAAA1QkAAAAAAAAAAAAAAADwvw"
				],
				[
					2405,
					2,
					"left_delete",
					null,
					"AgAAANsJAAAAAAAA2wkAAAAAAAABAAAAZdoJAAAAAAAA2gkAAAAAAAABAAAAeg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANwJAAAAAAAA3AkAAAAAAAAAAAAAAADwvw"
				],
				[
					2406,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAANoJAAAAAAAA2wkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANoJAAAAAAAA2gkAAAAAAAAAAAAAAADwvw"
				],
				[
					2409,
					1,
					"cut",
					null,
					"AQAAAN0JAAAAAAAA3QkAAAAAAAAzAAAAY29uc29sZS5sb2coJ2dldE5hbWUnLHJldCk7CmNvbnN0IHZhbHVlPXJldC52YWx1ZTsK",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN0JAAAAAAAAEAoAAAAAAAAAAAAAAAAAAA"
				],
				[
					2440,
					1,
					"paste",
					null,
					"AgAAAOoJAAAAAAAA+gkAAAAAAAAAAAAA+gkAAAAAAAD6CQAAAAAAAAUAAAB2YWx1ZQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOoJAAAAAAAA7wkAAAAAAAAAAAAAAADwvw"
				],
				[
					2441,
					1,
					"insert",
					{
						"characters": "[0]"
					},
					"AwAAAPoJAAAAAAAA+wkAAAAAAAAAAAAA+wkAAAAAAAD8CQAAAAAAAAAAAAD8CQAAAAAAAP0JAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPoJAAAAAAAA+gkAAAAAAAAAAAAAAADwvw"
				],
				[
					2447,
					1,
					"insert",
					{
						"characters": "?"
					},
					"AQAAAPQJAAAAAAAA9QkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPQJAAAAAAAA9AkAAAAAAAAAAAAAAADwvw"
				],
				[
					2450,
					1,
					"insert",
					{
						"characters": "?."
					},
					"AgAAAPsJAAAAAAAA/AkAAAAAAAAAAAAA/AkAAAAAAAD9CQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPsJAAAAAAAA+wkAAAAAAAAAAAAAAADwvw"
				],
				[
					2453,
					1,
					"insert",
					{
						"characters": "?="
					},
					"AgAAAAAKAAAAAAAAAQoAAAAAAAAAAAAAAQoAAAAAAAACCgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAKAAAAAAAAAAoAAAAAAAAAAAAAAADwvw"
				],
				[
					2454,
					1,
					"left_delete",
					null,
					"AQAAAAEKAAAAAAAAAQoAAAAAAAABAAAAPQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAIKAAAAAAAAAgoAAAAAAAAAAAAAAADwvw"
				],
				[
					2464,
					1,
					"right_delete",
					null,
					"AQAAAL0JAAAAAAAAvQkAAAAAAAAmAAAAY29uc3QgW3ZhbHVlXT1nZW4ubmV4dCgpLnZhbHVlOwogICAgICA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL0JAAAAAAAA4wkAAAAAAAAAAAAAAABIQA"
				],
				[
					2471,
					1,
					"cut",
					null,
					"AQAAAJUJAAAAAAAAlQkAAAAAAAAgAAAAdGhpcy5nZXRNZW1iZXJzKFsnY29uc3RydWN0b3InXSk",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJUJAAAAAAAAtQkAAAAAAAAAAAAAAADwvw"
				],
				[
					2476,
					1,
					"paste",
					null,
					"AgAAAKQJAAAAAAAAxAkAAAAAAAAAAAAAxAkAAAAAAADECQAAAAAAAAMAAABnZW4",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKQJAAAAAAAApwkAAAAAAAAAAAAAAADwvw"
				],
				[
					2485,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAIUJAAAAAAAAhgkAAAAAAAAAAAAAhgkAAAAAAACGCQAAAAAAABIAAAAgICAgICBjb25zdCBnZW49Owo",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIUJAAAAAAAAlwkAAAAAAAAAAAAAAADwvw"
				],
				[
					2490,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADzCQAAaW1wb3J0IHsgUGFyc2VyLCBVUkwgfSBmcm9tICdkb20nOwppbXBvcnQgeyB1cmxHZXQgfSBmcm9tICdzdGQnOwppbXBvcnQgeyB0eXBlcywgZGVmaW5lLCBwcm9wZXJ0aWVzLCBub25lbnVtZXJhYmxlIH0gZnJvbSAndXRpbCc7CgpleHBvcnQgZnVuY3Rpb24gRmV0Y2hDbGFzcyh1cmwpIHsKICBjb25zdCB1ID0gbmV3IFVSTCh1cmwucmVwbGFjZSgvXC9bXlwvXSokLywgJycpKTsKICBjb25zdCBiYXNlID0gdS5wYXRobmFtZTsKICBjb25zdCByZSA9IG5ldyBSZWdFeHAoJ14nICsgYmFzZSArICcvJyk7CiAgY29uc3QgZG9jID0gbmV3IFBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyh1cmxHZXQodXJsKSk7CgogIGNvbnN0IGtleXMgPSB7CiAgICBDb25zdHJ1Y3RvcjogJ2NvbnN0cnVjdG9yJywKICAgICdJbnN0YW5jZSBwcm9wZXJ0aWVzJzogJ3Byb3BlcnRpZXMnLAogICAgJ0luc3RhbmNlIG1ldGhvZHMnOiAnbWV0aG9kcycsCiAgICBFdmVudHM6ICdldmVudHMnLAogICAgSW5oZXJpdGFuY2U6ICdiYXNlcycsCiAgICAnUmVsYXRlZCBwYWdlcyBmb3IgV2ViIEF1ZGlvIEFQSSc6ICdyZWxhdGVkJywKICB9OwoKICBjb25zdCBzdW1tYXJ5RWxlbWVudHMgPSBbLi4uZG9jLnF1ZXJ5U2VsZWN0b3JBbGwoJ3N1bW1hcnknKV0uZmlsdGVyKGUgPT4gZS5pbm5lclRleHQgaW4ga2V5cyk7CgogIGNvbnN0IHNpbXBsaWZ5TGlzdCA9IGxpc3QgPT4gewogICAgaWYobGlzdC5ldmVyeSgoW2EsIGJdKSA9PiBhLnJlcGxhY2UoL1xzRXhwZXJpbWVudGFsJC8sICcnKSA9PSBiKSkgcmV0dXJuIGxpc3QubWFwKChbYV0pID0+IGEpOwoKICAgIHJldHVybiBuZXcgTWFwKGxpc3QpOwogIH07CgogIGNvbnN0IHN1bW1hcnlMaXN0ID0gc3VtbWFyeSA9PgogICAgc2ltcGxpZnlMaXN0KAogICAgICBbLi4uc3VtbWFyeS5uZXh0U2libGluZy5xdWVyeVNlbGVjdG9yQWxsKCdsaScpXQogICAgICAgIC5tYXAoZSA9PiBbZS5pbm5lclRleHQsIGUucXVlcnlTZWxlY3RvcignYScpLmdldEF0dHJpYnV0ZSgnaHJlZicpLnJlcGxhY2UocmUsICcnKV0pCiAgICAgICAgLmZpbHRlcigoW25hbWVdKSA9PiAhL1xzRGVwcmVjYXRlZCQvLnRlc3QobmFtZSkpLAogICAgKTsKCiAgY29uc3Qgc3VtbWFyaWVzID0gc3VtbWFyeUVsZW1lbnRzLnJlZHVjZSgKICAgIChhLCBlKSA9PiAoeyAuLi5hLCBba2V5c1tlLmlubmVyVGV4dF0gPz8gZS5pbm5lclRleHRdOiBzdW1tYXJ5TGlzdChlKSB9KSwKICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih7fSwgbnVsbCksCiAgKTsKCiAgY29uc3QgbWFrZVVSTCA9IHAgPT4gdSArICcvJyArIHA7CgogIHJldHVybiBkZWZpbmUoCiAgICBzdW1tYXJpZXMsCiAgICBub25lbnVtZXJhYmxlKHsKICAgICAgZ2V0VVJMKG5hbWUpIHsKICAgICAgICBjb25zdCByZSA9IG5ldyBSZWdFeHAoJ14nICsgbmFtZSArICcoXChcKXwpKFxzLip8KScgKyAnJCcpOwoKICAgICAgICBmb3IobGV0IGtleSBvZiB0aGlzLmtleXMoKSkgewogICAgICAgICAgaWYoa2V5ID09IG5hbWUpCiAgICAgICAgICAgIHJldHVybiBbLi4udGhpc1trZXldXQogICAgICAgICAgICAgIC5tYXAoZW50cnkgPT4gKEFycmF5LmlzQXJyYXkoZW50cnkpID8gZW50cnlbMV0gOiBlbnRyeSkpCiAgICAgICAgICAgICAgLm1hcChtYWtlVVJMKTsKCiAgICAgICAgICBmb3IobGV0IGVudHJ5IG9mIHRoaXNba2V5XSkgewogICAgICAgICAgICBpZih0eXBlb2YgZW50cnkgPT0gJ3N0cmluZycgJiYgcmUudGVzdChlbnRyeSkpIHJldHVybiBtYWtlVVJMKGVudHJ5KTsKCiAgICAgICAgICAgIGNvbnN0IFtwcm9wLCBwYXRobmFtZV0gPSBlbnRyeTsKCiAgICAgICAgICAgIGlmKHJlLnRlc3QocHJvcCkpIHJldHVybiBtYWtlVVJMKHBhdGhuYW1lKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sCiAgICAgICprZXlzKCkgewogICAgICAgIGZvcihsZXQgaWQgaW4ga2V5cykgeWllbGQga2V5c1tpZF07CiAgICAgIH0sCiAgICAgICp2YWx1ZXMoKSB7CiAgICAgICAgZm9yKGxldCBpZCBpbiBrZXlzKSB5aWVsZCB0aGlzW2tleXNbaWRdXTsKICAgICAgfSwKICAgICAgKmVudHJpZXMoKSB7CiAgICAgICAgZm9yKGxldCBpZCBpbiBrZXlzKSB5aWVsZCBba2V5c1tpZF0sIHRoaXNba2V5c1tpZF1dXTsKICAgICAgfSwKICAgICAgKmdldE1lbWJlcnMocHJlZCA9IChrLHYpID0+IHRydWUpIHsKICAgICAgICBpZihBcnJheS5pc0FycmF5KHByZWQpKSB7CiAgICAgICAgICBsZXQgYXJyPXByZWQ7CiAgICAgICAgICBwcmVkPShrZXksdmFsdWUpID0+IGFyci5pbmRleE9mKGtleSkgIT0gLTE7CiAgICAgICAgfQogICAgICAgIGZvcihsZXQgW2tleSwgdmFsdWVdIG9mIHRoaXMuZW50cmllcygpKSBpZih0eXBlcy5pc01hcCh2YWx1ZSkpIGlmKHByZWQoa2V5LHZhbHVlKSkgeWllbGQqIHZhbHVlLmVudHJpZXMoKTsKICAgICAgfSwKICAgIGdldE5hbWUoKSB7CiAgICAgICByZXR1cm4gdGhpcy5nZXRNZW1iZXJzKFsnY29uc3RydWN0b3InXSkubmV4dCgpPy52YWx1ZT8uWzBdPy5yZXBsYWNlKC9cKFwpJC8sICcnKTsKICAgIH0KICAgIH0pLAogICk7Cn0KAAAAAAAAAAALCgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIYJAAAAAAAAhgkAAAAAAAAAAAAAAADwvw"
				],
				[
					2497,
					1,
					"insert",
					{
						"characters": "const"
					},
					"BgAAAKwIAAAAAAAArQgAAAAAAAAAAAAArQgAAAAAAACtCAAAAAAAAAMAAABsZXStCAAAAAAAAK4IAAAAAAAAAAAAAK4IAAAAAAAArwgAAAAAAAAAAAAArwgAAAAAAACwCAAAAAAAAAAAAACwCAAAAAAAALEIAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKwIAAAAAAAArwgAAAAAAAAAAAAAAADwvw"
				],
				[
					2527,
					1,
					"insert",
					{
						"characters": "get"
					},
					"AwAAAIoJAAAAAAAAiwkAAAAAAAAAAAAAiwkAAAAAAACMCQAAAAAAAAAAAACMCQAAAAAAAI0JAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIoJAAAAAAAAigkAAAAAAAAAAAAAAADwvw"
				],
				[
					2529,
					4,
					"right_delete",
					null,
					"BAAAAJIJAAAAAAAAkgkAAAAAAAABAAAAZ5IJAAAAAAAAkgkAAAAAAAABAAAAZZIJAAAAAAAAkgkAAAAAAAABAAAAdJIJAAAAAAAAkgkAAAAAAAABAAAATg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJIJAAAAAAAAkgkAAAAAAAAAAAAAAADwvw"
				],
				[
					2530,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAJIJAAAAAAAAkwkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJIJAAAAAAAAkgkAAAAAAAAAAAAAAADwvw"
				],
				[
					2541,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAANCgAAaW1wb3J0IHsgUGFyc2VyLCBVUkwgfSBmcm9tICdkb20nOwppbXBvcnQgeyB1cmxHZXQgfSBmcm9tICdzdGQnOwppbXBvcnQgeyB0eXBlcywgZGVmaW5lLCBwcm9wZXJ0aWVzLCBub25lbnVtZXJhYmxlIH0gZnJvbSAndXRpbCc7CgpleHBvcnQgZnVuY3Rpb24gRmV0Y2hDbGFzcyh1cmwpIHsKICBjb25zdCB1ID0gbmV3IFVSTCh1cmwucmVwbGFjZSgvXC9bXlwvXSokLywgJycpKTsKICBjb25zdCBiYXNlID0gdS5wYXRobmFtZTsKICBjb25zdCByZSA9IG5ldyBSZWdFeHAoJ14nICsgYmFzZSArICcvJyk7CiAgY29uc3QgZG9jID0gbmV3IFBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyh1cmxHZXQodXJsKSk7CgogIGNvbnN0IGtleXMgPSB7CiAgICBDb25zdHJ1Y3RvcjogJ2NvbnN0cnVjdG9yJywKICAgICdJbnN0YW5jZSBwcm9wZXJ0aWVzJzogJ3Byb3BlcnRpZXMnLAogICAgJ0luc3RhbmNlIG1ldGhvZHMnOiAnbWV0aG9kcycsCiAgICBFdmVudHM6ICdldmVudHMnLAogICAgSW5oZXJpdGFuY2U6ICdiYXNlcycsCiAgICAnUmVsYXRlZCBwYWdlcyBmb3IgV2ViIEF1ZGlvIEFQSSc6ICdyZWxhdGVkJywKICB9OwoKICBjb25zdCBzdW1tYXJ5RWxlbWVudHMgPSBbLi4uZG9jLnF1ZXJ5U2VsZWN0b3JBbGwoJ3N1bW1hcnknKV0uZmlsdGVyKGUgPT4gZS5pbm5lclRleHQgaW4ga2V5cyk7CgogIGNvbnN0IHNpbXBsaWZ5TGlzdCA9IGxpc3QgPT4gewogICAgaWYobGlzdC5ldmVyeSgoW2EsIGJdKSA9PiBhLnJlcGxhY2UoL1xzRXhwZXJpbWVudGFsJC8sICcnKSA9PSBiKSkgcmV0dXJuIGxpc3QubWFwKChbYV0pID0+IGEpOwoKICAgIHJldHVybiBuZXcgTWFwKGxpc3QpOwogIH07CgogIGNvbnN0IHN1bW1hcnlMaXN0ID0gc3VtbWFyeSA9PgogICAgc2ltcGxpZnlMaXN0KAogICAgICBbLi4uc3VtbWFyeS5uZXh0U2libGluZy5xdWVyeVNlbGVjdG9yQWxsKCdsaScpXQogICAgICAgIC5tYXAoZSA9PiBbZS5pbm5lclRleHQsIGUucXVlcnlTZWxlY3RvcignYScpLmdldEF0dHJpYnV0ZSgnaHJlZicpLnJlcGxhY2UocmUsICcnKV0pCiAgICAgICAgLmZpbHRlcigoW25hbWVdKSA9PiAhL1xzRGVwcmVjYXRlZCQvLnRlc3QobmFtZSkpLAogICAgKTsKCiAgY29uc3Qgc3VtbWFyaWVzID0gc3VtbWFyeUVsZW1lbnRzLnJlZHVjZSgKICAgIChhLCBlKSA9PiAoeyAuLi5hLCBba2V5c1tlLmlubmVyVGV4dF0gPz8gZS5pbm5lclRleHRdOiBzdW1tYXJ5TGlzdChlKSB9KSwKICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih7fSwgbnVsbCksCiAgKTsKCiAgY29uc3QgbWFrZVVSTCA9IHAgPT4gdSArICcvJyArIHA7CgogIHJldHVybiBkZWZpbmUoCiAgICBzdW1tYXJpZXMsCiAgICBub25lbnVtZXJhYmxlKHsKICAgICAgZ2V0VVJMKG5hbWUpIHsKICAgICAgICBjb25zdCByZSA9IG5ldyBSZWdFeHAoJ14nICsgbmFtZSArICcoXChcKXwpKFxzLip8KScgKyAnJCcpOwoKICAgICAgICBmb3IobGV0IGtleSBvZiB0aGlzLmtleXMoKSkgewogICAgICAgICAgaWYoa2V5ID09IG5hbWUpCiAgICAgICAgICAgIHJldHVybiBbLi4udGhpc1trZXldXQogICAgICAgICAgICAgIC5tYXAoZW50cnkgPT4gKEFycmF5LmlzQXJyYXkoZW50cnkpID8gZW50cnlbMV0gOiBlbnRyeSkpCiAgICAgICAgICAgICAgLm1hcChtYWtlVVJMKTsKCiAgICAgICAgICBmb3IobGV0IGVudHJ5IG9mIHRoaXNba2V5XSkgewogICAgICAgICAgICBpZih0eXBlb2YgZW50cnkgPT0gJ3N0cmluZycgJiYgcmUudGVzdChlbnRyeSkpIHJldHVybiBtYWtlVVJMKGVudHJ5KTsKCiAgICAgICAgICAgIGNvbnN0IFtwcm9wLCBwYXRobmFtZV0gPSBlbnRyeTsKCiAgICAgICAgICAgIGlmKHJlLnRlc3QocHJvcCkpIHJldHVybiBtYWtlVVJMKHBhdGhuYW1lKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sCiAgICAgICprZXlzKCkgewogICAgICAgIGZvcihsZXQgaWQgaW4ga2V5cykgeWllbGQga2V5c1tpZF07CiAgICAgIH0sCiAgICAgICp2YWx1ZXMoKSB7CiAgICAgICAgZm9yKGxldCBpZCBpbiBrZXlzKSB5aWVsZCB0aGlzW2tleXNbaWRdXTsKICAgICAgfSwKICAgICAgKmVudHJpZXMoKSB7CiAgICAgICAgZm9yKGxldCBpZCBpbiBrZXlzKSB5aWVsZCBba2V5c1tpZF0sIHRoaXNba2V5c1tpZF1dXTsKICAgICAgfSwKICAgICAgKmdldE1lbWJlcnMocHJlZCA9IChrLCB2KSA9PiB0cnVlKSB7CiAgICAgICAgaWYoQXJyYXkuaXNBcnJheShwcmVkKSkgewogICAgICAgICAgY29uc3QgYXJyID0gcHJlZDsKICAgICAgICAgIHByZWQgPSAoa2V5LCB2YWx1ZSkgPT4gYXJyLmluZGV4T2Yoa2V5KSAhPSAtMTsKICAgICAgICB9CiAgICAgICAgZm9yKGxldCBba2V5LCB2YWx1ZV0gb2YgdGhpcy5lbnRyaWVzKCkpCiAgICAgICAgICBpZih0eXBlcy5pc01hcCh2YWx1ZSkpIGlmIChwcmVkKGtleSwgdmFsdWUpKSB5aWVsZCogdmFsdWUuZW50cmllcygpOwogICAgICB9LAogZ2V0ICAgICBuYW1lKCkgewogICAgICAgIHJldHVybiB0aGlzLmdldE1lbWJlcnMoWydjb25zdHJ1Y3RvciddKS5uZXh0KCk/LnZhbHVlPy5bMF0/LnJlcGxhY2UoL1woXCkkLywgJycpOwogICAgICB9LAogICAgfSksCiAgKTsKfQoAAAAAAAAAAA4KAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJMJAAAAAAAAkwkAAAAAAAAAAAAAAADwvw"
				],
				[
					2552,
					1,
					"revert",
					null,
					"BwAAAAAAAAAAAAAAAAAAAAAAAAAOCgAAaW1wb3J0IHsgUGFyc2VyLCBVUkwgfSBmcm9tICdkb20nOwppbXBvcnQgeyB1cmxHZXQgfSBmcm9tICdzdGQnOwppbXBvcnQgeyB0eXBlcywgZGVmaW5lLCBwcm9wZXJ0aWVzLCBub25lbnVtZXJhYmxlIH0gZnJvbSAndXRpbCc7CgpleHBvcnQgZnVuY3Rpb24gRmV0Y2hDbGFzcyh1cmwpIHsKICBjb25zdCB1ID0gbmV3IFVSTCh1cmwucmVwbGFjZSgvXC9bXlwvXSokLywgJycpKTsKICBjb25zdCBiYXNlID0gdS5wYXRobmFtZTsKICBjb25zdCByZSA9IG5ldyBSZWdFeHAoJ14nICsgYmFzZSArICcvJyk7CiAgY29uc3QgZG9jID0gbmV3IFBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyh1cmxHZXQodXJsKSk7CgogIGNvbnN0IGtleXMgPSB7CiAgICBDb25zdHJ1Y3RvcjogJ2NvbnN0cnVjdG9yJywKICAgICdJbnN0YW5jZSBwcm9wZXJ0aWVzJzogJ3Byb3BlcnRpZXMnLAogICAgJ0luc3RhbmNlIG1ldGhvZHMnOiAnbWV0aG9kcycsCiAgICBFdmVudHM6ICdldmVudHMnLAogICAgSW5oZXJpdGFuY2U6ICdiYXNlcycsCiAgICAnUmVsYXRlZCBwYWdlcyBmb3IgV2ViIEF1ZGlvIEFQSSc6ICdyZWxhdGVkJywKICB9OwoKICBjb25zdCBzdW1tYXJ5RWxlbWVudHMgPSBbLi4uZG9jLnF1ZXJ5U2VsZWN0b3JBbGwoJ3N1bW1hcnknKV0uZmlsdGVyKGUgPT4gZS5pbm5lclRleHQgaW4ga2V5cyk7CgogIGNvbnN0IHNpbXBsaWZ5TGlzdCA9IGxpc3QgPT4gewogICAgaWYobGlzdC5ldmVyeSgoW2EsIGJdKSA9PiBhLnJlcGxhY2UoL1xzRXhwZXJpbWVudGFsJC8sICcnKSA9PSBiKSkgcmV0dXJuIGxpc3QubWFwKChbYV0pID0+IGEpOwoKICAgIHJldHVybiBuZXcgTWFwKGxpc3QpOwogIH07CgogIGNvbnN0IHN1bW1hcnlMaXN0ID0gc3VtbWFyeSA9PgogICAgc2ltcGxpZnlMaXN0KAogICAgICBbLi4uc3VtbWFyeS5uZXh0U2libGluZy5xdWVyeVNlbGVjdG9yQWxsKCdsaScpXQogICAgICAgIC5tYXAoZSA9PiBbZS5pbm5lclRleHQsIGUucXVlcnlTZWxlY3RvcignYScpLmdldEF0dHJpYnV0ZSgnaHJlZicpLnJlcGxhY2UocmUsICcnKV0pCiAgICAgICAgLmZpbHRlcigoW25hbWVdKSA9PiAhL1xzRGVwcmVjYXRlZCQvLnRlc3QobmFtZSkpLAogICAgKTsKCiAgY29uc3Qgc3VtbWFyaWVzID0gc3VtbWFyeUVsZW1lbnRzLnJlZHVjZSgKICAgIChhLCBlKSA9PiAoeyAuLi5hLCBba2V5c1tlLmlubmVyVGV4dF0gPz8gZS5pbm5lclRleHRdOiBzdW1tYXJ5TGlzdChlKSB9KSwKICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih7fSwgbnVsbCksCiAgKTsKCiAgY29uc3QgbWFrZVVSTCA9IHAgPT4gdSArICcvJyArIHA7CgogIHJldHVybiBkZWZpbmUoCiAgICBzdW1tYXJpZXMsCiAgICBub25lbnVtZXJhYmxlKHsKICAgICAgZ2V0VVJMKG5hbWUpIHsKICAgICAgICBjb25zdCByZSA9IG5ldyBSZWdFeHAoJ14nICsgbmFtZSArICcoXChcKXwpKFxzLip8KScgKyAnJCcpOwoKICAgICAgICBmb3IobGV0IGtleSBvZiB0aGlzLmtleXMoKSkgewogICAgICAgICAgaWYoa2V5ID09IG5hbWUpCiAgICAgICAgICAgIHJldHVybiBbLi4udGhpc1trZXldXQogICAgICAgICAgICAgIC5tYXAoZW50cnkgPT4gKEFycmF5LmlzQXJyYXkoZW50cnkpID8gZW50cnlbMV0gOiBlbnRyeSkpCiAgICAgICAgICAgICAgLm1hcChtYWtlVVJMKTsKCiAgICAgICAgICBmb3IobGV0IGVudHJ5IG9mIHRoaXNba2V5XSkgewogICAgICAgICAgICBpZih0eXBlb2YgZW50cnkgPT0gJ3N0cmluZycgJiYgcmUudGVzdChlbnRyeSkpIHJldHVybiBtYWtlVVJMKGVudHJ5KTsKCiAgICAgICAgICAgIGNvbnN0IFtwcm9wLCBwYXRobmFtZV0gPSBlbnRyeTsKCiAgICAgICAgICAgIGlmKHJlLnRlc3QocHJvcCkpIHJldHVybiBtYWtlVVJMKHBhdGhuYW1lKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sCiAgICAgICprZXlzKCkgewogICAgICAgIGZvcihsZXQgaWQgaW4ga2V5cykgeWllbGQga2V5c1tpZF07CiAgICAgIH0sCiAgICAgICp2YWx1ZXMoKSB7CiAgICAgICAgZm9yKGxldCBpZCBpbiBrZXlzKSB5aWVsZCB0aGlzW2tleXNbaWRdXTsKICAgICAgfSwKICAgICAgKmVudHJpZXMoKSB7CiAgICAgICAgZm9yKGxldCBpZCBpbiBrZXlzKSB5aWVsZCBba2V5c1tpZF0sIHRoaXNba2V5c1tpZF1dXTsKICAgICAgfSwKICAgICAgKmdldE1lbWJlcnMocHJlZCA9IChrLCB2KSA9PiB0cnVlKSB7CiAgICAgICAgaWYoQXJyYXkuaXNBcnJheShwcmVkKSkgewogICAgICAgICAgY29uc3QgYXJyID0gcHJlZDsKICAgICAgICAgIHByZWQgPSAoa2V5LCB2YWx1ZSkgPT4gYXJyLmluZGV4T2Yoa2V5KSAhPSAtMTsKICAgICAgICB9CiAgICAgICAgZm9yKGxldCBba2V5LCB2YWx1ZV0gb2YgdGhpcy5lbnRyaWVzKCkpCiAgICAgICAgICBpZih0eXBlcy5pc01hcCh2YWx1ZSkpIGlmIChwcmVkKGtleSwgdmFsdWUpKSB5aWVsZCogdmFsdWUuZW50cmllcygpOwogICAgICB9LAogICAgICBnZXQgbmFtZSgpIHsKICAgICAgICByZXR1cm4gdGhpcy5nZXRNZW1iZXJzKFsnY29uc3RydWN0b3InXSkubmV4dCgpPy52YWx1ZT8uWzBdPy5yZXBsYWNlKC9cKFwpJC8sICcnKTsKICAgICAgfSwKICAgIH0pLAogICk7Cn0KAAAAAAAAAACuCQAAAAAAAAAAAAAAAAAAAAAAAK4JAAAAAAAAAAAAAAAAAAAAAAAArgkAAAAAAAAAAAAAAAAAAAAAAACuCQAAAAAAAAAAAAAAAAAAAAAAAK4JAAAAAAAAAAAAAAAAAAAAAAAArgkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB4GAAAAAAAAHgYAAAAAAAAAAAAAAADwvw"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"doxy",
				"DoxyDoxygen: Comment All"
			],
			[
				"",
				":$ - EOF"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"format",
				"JsPrettier: Format Code"
			],
			[
				"prett",
				"JsPrettier: Format Code"
			],
			[
				"ou",
				"Browse Mode: Outline (Right)"
			],
			[
				"instga",
				"Package Control: Install Package"
			],
			[
				"prettier",
				"JsPrettier: Format Code"
			],
			[
				"json",
				"Pretty JSON: Minify JSON"
			],
			[
				"jspr",
				"JsPrettier: Format Code"
			],
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"color",
				"Color Highlight: Reset"
			],
			[
				"scheme",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"edit cu",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"install pac",
				"Package Control: Install Package"
			],
			[
				"list pack",
				"Package Control: List Packages"
			],
			[
				"edit ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"edit",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"outli",
				"Browse Mode: Outline (Right)"
			],
			[
				"debugger",
				"Preferences: Debugger Settings"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"INSTALL",
				"Package Control: Install Package"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"adap",
				"Debugger: Install Adapters"
			],
			[
				"install ada",
				"Debugger: Install Adapters"
			],
			[
				"adapter",
				"Debugger: Install Adapters"
			],
			[
				"debug",
				"Debugger: Install Adapters"
			],
			[
				"Package Control: remove",
				"Package Control: Remove Package"
			],
			[
				"debu",
				"Debugger: Install Adapters"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 289.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv",
		"/home/roman/Projects/plot-cv/lib",
		"/home/roman/Projects/plot-cv/lib/container",
		"/home/roman/Projects/plot-cv/lib/net"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/ast-shell.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/io-helpers.js",
		"/home/roman/Projects/plot-cv/lib/net/webSocketStream.js",
		"/home/roman/Projects/plot-cv/lib/container/weakStackFrame.js",
		"/home/roman/Projects/plot-cv/lib/compileCommand.js",
		"/home/roman/Projects/plot-cv/compile_commands.js",
		"/home/roman/Projects/plot-cv/clang-ast.js",
		"/home/roman/Projects/plot-cv/clang-list.js",
		"/home/roman/Projects/plot-cv/quickjs2/cmake/functions.cmake",
		"/home/roman/Projects/plot-cv/soundcloud-tracks.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/console.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fs.js",
		"/home/roman/Projects/plot-cv/lib/deep.js",
		"/home/roman/Projects/plot-cv/os-helpers.js",
		"/home/janos/Projects/plot-cv/out.gz",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-context-vhost.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/test.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lws-context.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/events.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/web-platform-tests-streams/shared-storage/resources/util.sub.js",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-repeater.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/property-enumeration.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/buffer-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/qjsm.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/io.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/js-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/stream-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/queue.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-mysql.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-blob.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/async-closure.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/misc.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/xpath.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/xml.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-textcode.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/ringbuffer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/inotify.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/extendObject.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/ringbuffer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/js-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/streams.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake/functions.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/defines.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/async-closure.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/buffer-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fsPromises.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-syscallerror.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-syscallerror.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/web-platform-tests-streams/editing/crashtests/make-editable-div-inline-and-set-contenteditable-of-input-to-false.html",
		"/home/roman/Projects/plot-cv/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/process.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-magic.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_repeater.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-child-process.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/virtual-properties.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/child-process.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-predicate.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-pointer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-pgsql.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-path.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-mmap.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-location.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-list.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-internal.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-gpio.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/list-exports.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-serial.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-tree-walker.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-directory.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-deep.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/char-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-bjson.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-blob.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-queue.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-xml.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/path.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-archive.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/vector.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/predicate.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/inet_pton.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/path.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/xml-shell.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/testharnessreport.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/web-platform-tests-streams/streams/readable-streams/async-iterator.any.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_streams.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_stream.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/testharness.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/strverscmp.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/queue.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/mmap-win32.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/memmem.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/location.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/inet_ntop.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/getdents.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/debug.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/clock_gettime.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_sockets.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_pgsql.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_childprocess.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-llvm/usr/local/lib/quickjs/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-release/usr/local/lib/quickjs/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-clang/usr/local/lib/quickjs/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/parser/ebnf.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/lexer/bnf.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_inotify.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_deep.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_blob.js"
	],
	"find":
	{
		"height": 33.0
	},
	"find_in_files":
	{
		"height": 138.0,
		"where_history":
		[
			"/home/roman/Projects/plot-cv,*.js,*.cmake,CMakeLists.txt,-*/inst/*",
			"/home/roman/Projects/plot-cv,*.js,-*/inst/*",
			"/home/roman/Projects/plot-cv,*.js",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"try_run",
			"run\\b",
			"GetClass",
			"ast2np",
			"NamespaceOf",
			"GetClass",
			"DeepSelect",
			"nameOrIdPred",
			"GetByName",
			"nameOrIdPred",
			"DeepFind",
			"members",
			"\\bmembers\\b",
			"get members",
			"getType",
			"\\bimport\\b[^\\n]*\\bTree(Iterator|Walker)\\b[^\\n]*\\bfrom\\b",
			"\\bTree(Iterator|Walker)\\b.*\\bfrom\\b",
			"Tree(Iterator|Walker)",
			"isMap",
			"}\n",
			"WriteJS",
			"ReadJSON",
			"WriteJS",
			"ReadJSON",
			"class Location",
			"Location",
			"Location\\b",
			"TYPE_BIG_INT",
			"fs\\.",
			"fs'",
			"Symbol.for",
			"Newer",
			"remove",
			"fs\\.",
			"Writing",
			"base =",
			"unithist",
			"'FunctionDecl",
			"No such",
			"'Type.cons",
			"GetClass",
			"getClass",
			"nameOrIdPred",
			"Deep(Find|Select)\\(",
			"Deep(Find|Select).*name ==",
			"DeepFind.*name ==",
			"DeepFind",
			"decl\\(",
			"\n        ",
			"EnumDecl",
			"class EnumDecl",
			"EnumDecl",
			"ions.get",
			"ions.set",
			"GetClass",
			"getClass",
			"'Type.cons",
			"completeDef",
			"MakeId",
			"cid =",
			"GetByName",
			"GetClass",
			"getClass",
			"GetByName",
			"GetBasese",
			"GetByName",
			"Object.assign",
			"mapFunction\\b",
			"function Get",
			"NameFor",
			"DeepPathOf",
			"deep.pathOf",
			"NamespaceOf",
			"function NamespaceOf",
			"node2path",
			"deep\\.",
			"deep\\.get",
			"deep\\..get",
			"deep\\.",
			"deep\\.get",
			"deep.get",
			"deep\\.",
			"deep\\.select",
			"deep\\.",
			"deep\\.pathOf",
			"deep.pathOf",
			"export const ([\\w]+) = (\\(?)(.*[^)])(\\)?) => {",
			"export const ([\\w]+) = (\\(?)(.*)(\\)?) => {",
			"export const ([\\w]+) = (\\(?)(.*)(\\)?) => {\n",
			"pathOf",
			"deep\\.",
			"deep\\.find",
			"\n      ",
			"deep\\.find",
			"DeepFind",
			"DeepFind.*RETURN_",
			"deep\\.find",
			"deep.find",
			"DeepFind",
			"deep.find",
			"DeepFind.*RETURN",
			"DeepFind",
			"deep\\.find",
			"\\= \\$\\.data",
			"class Type\\b",
			"RecordDecl",
			"new RecordDecl",
			"= \\$\\.data",
			"NamespaceOf",
			"new RecordDecl",
			"NameFor",
			"class RecordDecl",
			"NameFor",
			"RecordDecl",
			"NamespaceOf",
			"class FunctionDecl",
			"new FunctionDecl",
			"GetClass",
			"class Type\\b",
			"'Access'",
			"storageClass",
			"new Type\\b",
			"WeakMap",
			"'CXX",
			"class FieldDecl",
			"class PointerType",
			"FieldDecl",
			"'FieldDecl"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"DeepGet",
			"DeepPathOf",
			"export function \\1(\\3) {",
			"DeepFind",
			"= globalThis['\\$'].data",
			"= globalThis['$'].data",
			"namespaceOf"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 253,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": "/home/roman/Projects/plot-cv/mozdev.js",
							"function_name_status_row": 0,
							"outline_rename_mode": false,
							"symkeys":
							[
								[
									137,
									162
								],
								[
									643,
									647
								],
								[
									679,
									701
								],
								[
									722,
									733
								],
								[
									790,
									798
								],
								[
									844,
									868
								],
								[
									938,
									942
								],
								[
									1024,
									1035
								],
								[
									1111,
									1120
								],
								[
									1228,
									1242
								],
								[
									1315,
									1327
								],
								[
									1489,
									1497
								],
								[
									1817,
									1824
								],
								[
									1886,
									1895
								],
								[
									1963,
									1973
								],
								[
									2065,
									2081
								],
								[
									2162,
									2184
								],
								[
									2351,
									2361
								]
							],
							"symlist":
							[
								"FetchClass(url)",
								"  e =>",
								"  simplifyList = list =>",
								"([a, b]) =>",
								"([a]) =>",
								"  summaryList = summary =>",
								"  e =>",
								"([name]) =>",
								"(a, e) =>",
								"  makeURL = p =>",
								"  getURL(name)",
								"  entry =>",
								"*keys()",
								"*values()",
								"*entries()",
								"  pred = (k, v) =>",
								"  pred = (key, value) =>",
								"  get name()"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1747022161.66,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "mozdev.js",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2478,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"auto_name": "import { Parser } from 'dom';",
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1747699956.74,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 33.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.764828128058,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.coffeecompile_output":
	{
		"height": 150.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "plot-cv.sublime-project",
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"compile_commands.js"
			],
			[
				"compileCommand",
				"lib/compileCommand.js"
			],
			[
				"command",
				"compile_commands.js"
			],
			[
				"lib/util.js",
				"quickjs/qjs-modules/lib/util.js"
			],
			[
				"io-he",
				"io-helpers.js"
			],
			[
				"clang-as",
				"clang-ast.js"
			],
			[
				"util.js",
				"quickjs/qjs-modules/lib/util.js"
			],
			[
				"console.js",
				"quickjs/qjs-modules/lib/console.js"
			],
			[
				"fs.js",
				"quickjs/qjs-modules/lib/fs.js"
			],
			[
				"deep.js",
				"lib/deep.js"
			],
			[
				"lib/deep",
				"lib/deep.js"
			],
			[
				"ast-shel",
				"ast-shell.js"
			],
			[
				"os-help",
				"os-helpers.js"
			],
			[
				"clang-ast",
				"clang-ast.js"
			],
			[
				"ast-she",
				"ast-shell.js"
			],
			[
				"clang-",
				"clang-list.js"
			],
			[
				"sound",
				"soundcloud-tracks.js"
			],
			[
				"out",
				"out.gz"
			],
			[
				"lws-context-v",
				"libwebsockets/include/libwebsockets/lws-context-vhost.h"
			],
			[
				"buffer-ut",
				"src/buffer-utils.c"
			],
			[
				"repl",
				"lib/repl.js"
			],
			[
				"utils.c",
				"src/utils.c"
			],
			[
				"qjsm.c",
				"src/qjsm.c"
			],
			[
				"utils.h",
				"include/utils.h"
			],
			[
				"quickjs-inspec",
				"quickjs-inspect.c"
			],
			[
				"io.js",
				"lib/io.js"
			],
			[
				"repl.js",
				"lib/repl.js"
			],
			[
				"util.sj",
				"web-platform-tests-streams/shared-storage/resources/util.sub.js"
			],
			[
				"quickjs.c",
				"~/Projects/plot-cv/quickjs/quickjs.c"
			],
			[
				"quickjs.h",
				"~/Projects/plot-cv/quickjs/quickjs.h"
			],
			[
				"js-utils.c",
				"src/js-utils.c"
			],
			[
				"quickjs-strea",
				"quickjs-stream.h"
			],
			[
				"quickjs-st",
				"quickjs-stream.c"
			],
			[
				"quickjs-stream.h",
				"quickjs-stream.h"
			],
			[
				"quickjs-ins",
				"quickjs-inspect.c"
			],
			[
				"ringbuffer.c",
				"src/ringbuffer.c"
			],
			[
				"ringbuf",
				"include/ringbuffer.h"
			],
			[
				"ringbuffer.h",
				"include/ringbuffer.h"
			],
			[
				"textcode.c",
				"quickjs-textcode.c"
			],
			[
				"quickjs-text",
				"quickjs-textcode.c"
			],
			[
				"stream.c",
				"quickjs-stream.c"
			],
			[
				"quickjs-stre",
				"quickjs-stream.c"
			],
			[
				"textcode",
				"quickjs-textcode.c"
			],
			[
				"quickjs-misc",
				"quickjs-misc.c"
			],
			[
				"function",
				"cmake/functions.cmake"
			],
			[
				"CMakeLIsts",
				"CMakeLists.txt"
			],
			[
				"quickjs-mis",
				"quickjs-misc.c"
			],
			[
				"fsProm",
				"lib/fsPromises.js"
			],
			[
				"CMake",
				"CMakeLists.txt"
			],
			[
				"cmakeli",
				"CMakeLists.txt"
			],
			[
				"cmakelists",
				"CMakeLists.txt"
			],
			[
				"CMakeLists",
				"CMakeLists.txt"
			],
			[
				"cmakelsits",
				"web-platform-tests-streams/editing/crashtests/make-editable-div-inline-and-set-contenteditable-of-input-to-false.html"
			],
			[
				"cmakeLists",
				"CMakeLists.txt"
			],
			[
				"js-util",
				"src/js-utils.c"
			],
			[
				"js-ut",
				"include/js-utils.h"
			],
			[
				"buffer-",
				"include/buffer-utils.h"
			],
			[
				"js-utils",
				"include/js-utils.h"
			],
			[
				"quickjs-sys",
				"quickjs-syscallerror.c"
			],
			[
				"js-u",
				"include/js-utils.h"
			],
			[
				"quickjs-socket",
				"quickjs-sockets.c"
			],
			[
				"async-cl",
				"src/async-closure.c"
			],
			[
				"utilsc",
				"src/utils.c"
			],
			[
				"quickjs-sock",
				"quickjs-sockets.h"
			],
			[
				"child",
				"src/child-process.c"
			],
			[
				"quickjs-child",
				"quickjs-child-process.c"
			],
			[
				"cmake",
				"CMakeLists.txt"
			],
			[
				"process.js",
				"lib/process.js"
			],
			[
				"quickjs-repea",
				"quickjs-repeater.c"
			],
			[
				"quickjs-repe",
				"quickjs-repeater.c"
			],
			[
				"quickjs-repeater",
				"quickjs-repeater.c"
			],
			[
				"test_repe",
				"tests/test_repeater.js"
			],
			[
				"quickjs-mysq",
				"quickjs-mysql.c"
			],
			[
				"quickjs-ser",
				"quickjs-serial.c"
			],
			[
				"quickjs-stream",
				"quickjs-stream.h"
			],
			[
				"quickjs-lex",
				"quickjs-lexer.c"
			],
			[
				"quickjs-list",
				"quickjs-list.c"
			],
			[
				"quickjs-list.c",
				"quickjs-list.c"
			],
			[
				"testhar",
				"lib/testharness.js"
			],
			[
				"qjsm",
				"src/qjsm.c"
			],
			[
				"test_repea",
				"tests/test_repeater.js"
			],
			[
				"test_socket",
				"tests/test_sockets.js"
			],
			[
				"test_sock",
				"tests/test_sockets.js"
			],
			[
				"textcod",
				"quickjs-textcode.c"
			],
			[
				"test_text",
				"tests/test_textcode.js"
			],
			[
				"stack.js",
				"lib/stack.js"
			],
			[
				"ebnf",
				"lib/parser/ebnf.js"
			],
			[
				"arser.",
				"lib/parser.js"
			],
			[
				"bnf.",
				"lib/lexer/bnf.js"
			],
			[
				"quickjs-my",
				"quickjs-mysql.c"
			],
			[
				"quickjs-blob",
				"quickjs-blob.c"
			],
			[
				"quickjs-bl",
				"quickjs-blob.c"
			],
			[
				"queue.c",
				"src/queue.c"
			],
			[
				"queue.h",
				"include/queue.h"
			],
			[
				"mysql",
				"tests/test_mysql.js"
			],
			[
				"child-",
				"src/child-process.c"
			],
			[
				"quickjs-chil",
				"quickjs-child-process.c"
			],
			[
				"xpath",
				"lib/xpath.js"
			],
			[
				"xpath.js",
				"lib/xpath.js"
			],
			[
				"pointer",
				"lib/pointer.js"
			],
			[
				"predicate.c",
				"src/predicate.c"
			],
			[
				"quickjs-pre",
				"quickjs-predicate.c"
			],
			[
				"dom.js",
				"lib/dom.js"
			],
			[
				"misc.js",
				"lib/misc.js"
			],
			[
				"char-ut",
				"include/char-utils.h"
			],
			[
				"quickjs-in",
				"quickjs-inspect.c"
			],
			[
				"css3",
				"lib/css3-selectors.js"
			],
			[
				"inspect.c",
				"quickjs-inspect.c"
			],
			[
				"quickjs-lexe",
				"quickjs-lexer.c"
			],
			[
				"test_lexer",
				"tests/test_lexer.js"
			],
			[
				"resolve-im",
				"resolve-imports.js"
			],
			[
				"pointer.js",
				"lib/pointer.js"
			],
			[
				"extendArra",
				"lib/extendArray.js"
			],
			[
				"list-ex",
				"list-exports.js"
			],
			[
				"xml-shell",
				"xml-shell.js"
			],
			[
				"cmake/",
				"cmake/QuickJSModule.cmake"
			],
			[
				"quickjs-arc",
				"quickjs-archive.c"
			],
			[
				"cmakelist",
				"CMakeLists.txt"
			],
			[
				"vfs",
				"lib/vfs.js"
			],
			[
				"quickjs-que",
				"quickjs-queue.c"
			],
			[
				"archive.h",
				"libarchive/libarchive/archive.h"
			],
			[
				"sz",
				"/tmp/sz.js"
			],
			[
				"archive_en",
				"libarchive/libarchive/archive_entry.h"
			],
			[
				"quickjs-ar",
				"quickjs-archive.c"
			],
			[
				"archive_write_open_fil",
				"libarchive/libarchive/archive_write_open_filename.c"
			],
			[
				"vfs.j",
				"lib/vfs.js"
			],
			[
				"cutils",
				"~/Projects/plot-cv/quickjs/cutils.c"
			],
			[
				"quickjs-pat",
				"quickjs-path.c"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/plot-cv.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 309.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"WS"
			]
		],
		"width": 1059.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 253.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
