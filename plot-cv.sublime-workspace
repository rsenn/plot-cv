{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"circui",
				"circuitFilePath"
			],
			[
				"Conn",
				"ConnectionPoint"
			],
			[
				"parseCom",
				"parseCommentOrEmpty"
			],
			[
				"circ",
				"circuitFilePath"
			],
			[
				"built",
				"builtin_attr"
			],
			[
				"dep",
				"depthOrPred"
			],
			[
				"exte",
				"extendAsyncGenerator"
			],
			[
				"extend",
				"extendArray"
			],
			[
				"allo",
				"allowedDirs"
			],
			[
				"getOwnPr",
				"getOwnPropertyNames(...)"
			],
			[
				"Prom",
				"PromiseWorker"
			],
			[
				"trans",
				"transformation"
			],
			[
				"allow",
				"allowedDirs"
			],
			[
				"Get",
				"GetElementsBySignal"
			],
			[
				"GetEle",
				"GetElementsBySignal"
			],
			[
				"getOwn",
				"getOwnPropertyNames(...)"
			],
			[
				"ColorSi",
				"ColorSignals"
			],
			[
				"HTML",
				"HTMLTableRow"
			],
			[
				"HTMLTable",
				"HTMLTableColumn"
			],
			[
				"rend",
				"renderToString"
			],
			[
				"Pack",
				"Package2Circuit"
			],
			[
				"lazyP",
				"lazyProperties"
			],
			[
				"JS_Get",
				"JS_GetProperty"
			],
			[
				"Ret",
				"ReturnValuePathFunction"
			],
			[
				"cFunc",
				"cFuncListObjects"
			],
			[
				"isC",
				"isCFuncCall"
			],
			[
				"En",
				"EntityNames"
			],
			[
				"parseFrom",
				"parseFromString"
			],
			[
				"pseu",
				"pseudoClassArg"
			],
			[
				"pseudoC",
				"pseudoClassName"
			],
			[
				"Key",
				"KeyboardEvent"
			],
			[
				"getOp",
				"getOptionEntries"
			],
			[
				"setProp",
				"setPropertyValue"
			],
			[
				"parse",
				"parseSelectors"
			],
			[
				"JS_SetPr",
				"JS_SetPropertyStr"
			],
			[
				"jsm_buil",
				"jsm_builtin_init"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"JS_Set",
				"JS_SetProperty"
			],
			[
				"JS_New",
				"JS_NewObject"
			],
			[
				"ide",
				"importIdentifiers"
			],
			[
				"iden",
				"importIdentifiers"
			],
			[
				"import",
				"importIdentifiers"
			],
			[
				"ident",
				"identifierSets"
			],
			[
				"path_is",
				"path_is_absolute"
			],
			[
				"js_is_",
				"js_is_null_or_undefined"
			],
			[
				"path_skip_se",
				"path_skip_separator_s"
			],
			[
				"WRITABLE_METHO",
				"WRITABLE_METHOD_CLOSE"
			],
			[
				"list_fo",
				"list_for_each_prev"
			],
			[
				"JS_Th",
				"JS_ThrowOutOfMemory"
			],
			[
				"JS_",
				"JS_ThrowOutOfMemory"
			],
			[
				"underly",
				"underlying_source"
			],
			[
				"Tok",
				"TokenSequence"
			],
			[
				"JS_GetPr",
				"JS_GetPropertyStr"
			],
			[
				"JS_Thro",
				"JS_ThrowOutOfMemory"
			],
			[
				"getAt",
				"getAttributeNames"
			],
			[
				"self",
				"self_closing_tags"
			],
			[
				"self_",
				"self_closing_tags"
			],
			[
				"JS_PROP",
				"JS_PROP_ENUMERABLE"
			],
			[
				"depe",
				"dependencyMap"
			],
			[
				"de",
				"dependencyMap"
			],
			[
				"js_is_null",
				"js_is_null_or_undefined"
			],
			[
				"JS_P",
				"JS_PROP_ENUMERABLE"
			],
			[
				"JS_SetP",
				"JS_SetPropertyUint32"
			],
			[
				"spec",
				"specifiers"
			],
			[
				"Num",
				"NumericRange"
			],
			[
				"token_r",
				"token_release_rt"
			],
			[
				"JS_Thr",
				"JS_ThrowTypeError"
			],
			[
				"js_",
				"js_location_data"
			],
			[
				"debug_js_mall",
				"debug_js_malloc_usable_size"
			],
			[
				"repl",
				"replaceRange"
			],
			[
				"js_malloc_u",
				"js_malloc_usable_size_rt"
			],
			[
				"malloc",
				"malloc_usable_size"
			],
			[
				"all",
				"alloc_block_list"
			],
			[
				"alloc",
				"alloc_block_list"
			],
			[
				"path_skip",
				"path_skip_component"
			],
			[
				"jsm_mo",
				"jsm_module_loader"
			],
			[
				"JS_Throw",
				"JS_ThrowInternalError"
			],
			[
				"JS_AtomTo",
				"JS_AtomToValue"
			],
			[
				"inspect",
				"inspectSymbol"
			],
			[
				"at",
				"attributes"
			],
			[
				"parent",
				"parentElement"
			],
			[
				"owner",
				"ownerElement"
			],
			[
				"get",
				"getPrototypeOf"
			],
			[
				"child",
				"childElementCount"
			],
			[
				"getO",
				"getOwnPropertyNames"
			],
			[
				"js_misc_im",
				"js_misc_immutable_constructor"
			],
			[
				"obj",
				"object_tostring"
			],
			[
				"js_misc_immu",
				"js_misc_immutable_free"
			],
			[
				"js_misc_imm",
				"js_misc_immutable_constructor"
			],
			[
				"CMAKE_IMPORT",
				"CMAKE_IMPORT_LIBRARY_SUFFIX"
			],
			[
				"CMAKE_CUR",
				"CMAKE_CURRENT_BINARY_DIR"
			],
			[
				"js_is",
				"js_is_null_or_undefined"
			],
			[
				"js_asy",
				"js_async_socket_class_id"
			],
			[
				"JS_NewObj",
				"JS_NewObjectProtoClass"
			],
			[
				"async_",
				"async_socket_proto"
			],
			[
				"js_socket_class",
				"js_socket_class_id"
			],
			[
				"g",
				"getOwnPropertyNames(...)"
			],
			[
				"js_sockaddr_cl",
				"js_sockaddr_class_id"
			],
			[
				"js_so",
				"js_sockaddr_constructor"
			],
			[
				"js_sys",
				"js_syscallerror_class_id"
			],
			[
				"js_string",
				"js_stringdecoder_class_id"
			],
			[
				"js_pred",
				"js_predicate_class_id"
			],
			[
				"js_syn",
				"js_syntaxerror_class"
			],
			[
				"js_child",
				"js_child_process_class_id"
			],
			[
				"js_b",
				"js_blob_class_id"
			],
			[
				"js_loca",
				"js_location_class_id"
			],
			[
				"js_token_in",
				"js_token_inspect_funcs"
			],
			[
				"set",
				"setReadHandler"
			],
			[
				"js_get_",
				"js_get_propertystr_bool"
			],
			[
				"js_misc_ate",
				"js_misc_atexit_functions"
			],
			[
				"isF",
				"isFunction"
			],
			[
				"tab",
				"tab_atom_len"
			],
			[
				"isARr",
				"isArrayBuffer"
			],
			[
				"BIT",
				"BITFIELD_FROMARRAY"
			],
			[
				"to",
				"toStringTag"
			],
			[
				"inotify",
				"inotify_add_watch"
			],
			[
				"JS_SetProp",
				"JS_SetPropertyUint32"
			],
			[
				"JS_GEt",
				"JS_GetGlobalObject"
			],
			[
				"dbuf_put",
				"dbuf_put_colorstr"
			],
			[
				"REPEATER_",
				"REPEATER_REJECTED"
			],
			[
				"REP",
				"REPEATER_DONE"
			],
			[
				"resol",
				"resolving_funcs"
			],
			[
				"JS_NEwCFun",
				"JS_NewCFunctionData"
			],
			[
				"js_function",
				"js_function_bind_this"
			],
			[
				"js_repeater_iter",
				"js_repeater_iteration"
			],
			[
				"REPEA",
				"REPEATER_REJECTED"
			],
			[
				"exe",
				"execution"
			],
			[
				"REPEAT",
				"REPEATER_STOPPED"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "  value =>\n  (level, message) =>\nAsyncCollect(iter)\nExecTool(cmd, ...args)\nGetMime(file)\nMatcher(pattern, t = arg => arg)\n  (...args) =>\nKeyOrValueMatcher(pattern)\n  ([key, value]) =>\nGetRootDirectories(pattern = '*')\nMakeUUID = (rng = Math.random) =>\n  n =>\n  dd =>\n  d =>\n  d =>\n  d =>\nGetDir(dir)\n  n =>\nDirName(name)\n  it =>\nDateStr(date)\nModeStr(mode)\nHTMLPage = ({ title, style, scripts = [], children, ...props }) =>\n  script =>\nFilterForm = ({ ...props }) =>\nHTMLTable = ({ rows, ...props }) =>\nHTMLTableRow = ({ columns, ...props }) =>\nHTMLTableColumn = ({ columns, children, tag = 'td', ...props }) =>\nFileLink = ({ file, ...props }) =>\nFileObject = ({ file, stat = {}, ...props }) =>\nFileTable = ({ files, ...props }) =>\n(a, b) =>\n  field =>\n  file =>\nReadExiv2(file)\n([k, v]) =>\n([k, v]) =>\n([k, v]) =>\n(a, b) =>\n([k, v]) =>\nReadExiftool(file)\n  l =>\n  line =>\n([line, idx]) =>\nHeifConvert(src, dst, quality = 100)\nMagickResize(src, dst, rotate = 0, width, height)\n  main(...args)\n  (a, v) =>\n  (v, pv, o) =>\n  (module, ...args) =>\n  m =>\n  .show = arg =>\n  .cleanup = () =>\n  (...args) =>\n() =>\n  puts(s)\n() =>\nParseBody(gen)\n  .createWS = (url, callbacks, listen) =>\n  .out = s =>\n  test(req, resp)\n  proxy(req, resp)\n  config(req, resp)\n  file(req, resp)\n  dir =>\n  dir =>\n  f =>\n  file =>\n  uploads(req, resp)\n  files(req, resp)\n  n =>\n([name, type]) =>\n  files2(req, resp)\n  n =>\n  n =>\n  n =>\n(a, b) =>\n  name =>\n  file =>\n  file =>\n([file, rel]) =>\n(acc, [file, st]) =>\n  string(a, b)\n  number(a, b)\n([name, obj]) =>\n({ name }) =>\n  onConnect(ws, req)\n  .sendCommand = function(data)\n  onClose(ws, reason)\n  onHttp(ws, req, resp)\n  onOpen(name, filename)\n  onContent(name, data)\n  onClose(name, file)\n  f = x =>\n  onFinalize()\n  (match, p1, p0, p2, p3, offset) =>\n  onMessage(ws, data)\n  onFd(fd, rd, wr)\n  get connections()\n  get by_uuid()\n  uuid(data)\n  onFd(fd, rd, wr)\n  onClose(ws, reason)\n  onMessage(ws, data)\n  quit(why)",
			"settings":
			{
				"buffer_size": 1947,
				"line_ending": "Unix",
				"name": "ùåÜ Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					179,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
						"symkeys":
						[
							[
								833,
								847
							],
							[
								927,
								950
							],
							[
								1088,
								1105
							],
							[
								1146,
								1163
							],
							[
								1196,
								1205
							],
							[
								1239,
								1249
							],
							[
								1283,
								1293
							],
							[
								1328,
								1339
							],
							[
								1373,
								1383
							],
							[
								1418,
								1429
							],
							[
								1466,
								1479
							],
							[
								1517,
								1531
							],
							[
								1567,
								1579
							],
							[
								1615,
								1627
							],
							[
								1680,
								1700
							],
							[
								1962,
								1978
							],
							[
								2032,
								2051
							],
							[
								2086,
								2102
							],
							[
								2144,
								2159
							],
							[
								2180,
								2184
							],
							[
								2222,
								2256
							],
							[
								2279,
								2311
							],
							[
								2334,
								2377
							],
							[
								4206,
								4225
							],
							[
								4323,
								4339
							],
							[
								4401,
								4419
							],
							[
								4483,
								4502
							],
							[
								4567,
								4576
							],
							[
								4631,
								4648
							],
							[
								4711,
								4728
							],
							[
								4791,
								4805
							],
							[
								4865,
								4880
							],
							[
								4941,
								4956
							],
							[
								5017,
								5025
							],
							[
								5079,
								5091
							],
							[
								5149,
								5159
							],
							[
								5215,
								5226
							],
							[
								5283,
								5291
							],
							[
								5345,
								5367
							],
							[
								5435,
								5450
							],
							[
								5511,
								5533
							],
							[
								5601,
								5617
							],
							[
								5679,
								5695
							],
							[
								5757,
								5769
							],
							[
								5827,
								5839
							],
							[
								5897,
								5910
							],
							[
								5969,
								5987
							],
							[
								6045,
								6063
							],
							[
								6127,
								6149
							],
							[
								6217,
								6244
							],
							[
								6317,
								6334
							],
							[
								6391,
								6408
							],
							[
								6465,
								6482
							],
							[
								6529,
								6545
							],
							[
								6628,
								6644
							],
							[
								6716,
								6732
							],
							[
								6804,
								6821
							],
							[
								6878,
								6898
							],
							[
								6957,
								6977
							],
							[
								7136,
								7155
							],
							[
								7231,
								7238
							],
							[
								7267,
								7287
							],
							[
								7357,
								7372
							],
							[
								7433,
								7459
							],
							[
								7530,
								7546
							],
							[
								7602,
								7615
							],
							[
								7692,
								7710
							],
							[
								7792,
								7805
							],
							[
								7870,
								7884
							],
							[
								7986,
								8012
							],
							[
								8058,
								8083
							],
							[
								8168,
								8210
							],
							[
								8344,
								8384
							],
							[
								11313,
								11356
							],
							[
								11773,
								11808
							],
							[
								11964,
								11982
							],
							[
								12012,
								12017
							],
							[
								12107,
								12134
							],
							[
								12253,
								12288
							],
							[
								12349,
								12353
							],
							[
								12369,
								12373
							],
							[
								12400,
								12409
							],
							[
								12572,
								12605
							],
							[
								12734,
								12766
							],
							[
								12930,
								12963
							],
							[
								13159,
								13180
							],
							[
								13258,
								13264
							],
							[
								13281,
								13297
							],
							[
								13443,
								13449
							],
							[
								13462,
								13478
							],
							[
								13651,
								13656
							],
							[
								13670,
								13679
							],
							[
								13729,
								13756
							],
							[
								13801,
								13807
							],
							[
								13852,
								13864
							],
							[
								13894,
								13927
							],
							[
								13985,
								13991
							],
							[
								14106,
								14118
							],
							[
								14172,
								14184
							],
							[
								14332,
								14343
							],
							[
								14385,
								14418
							],
							[
								14476,
								14485
							],
							[
								14607,
								14628
							],
							[
								14689,
								14710
							],
							[
								14868,
								14882
							],
							[
								15184,
								15224
							],
							[
								15291,
								15301
							],
							[
								15459,
								15480
							],
							[
								15614,
								15635
							],
							[
								15667,
								15688
							],
							[
								15791,
								15812
							],
							[
								16087,
								16097
							],
							[
								16143,
								16167
							],
							[
								16217,
								16221
							],
							[
								16261,
								16295
							],
							[
								16306,
								16319
							],
							[
								16378,
								16423
							],
							[
								16488,
								16499
							],
							[
								16519,
								16539
							],
							[
								16579,
								16608
							],
							[
								16632,
								16643
							],
							[
								16658,
								16670
							],
							[
								16717,
								16756
							],
							[
								16857,
								16861
							],
							[
								16900,
								16905
							],
							[
								16931,
								16937
							],
							[
								16966,
								16972
							],
							[
								17065,
								17078
							],
							[
								17106,
								17119
							],
							[
								17245,
								17256
							],
							[
								17336,
								17396
							],
							[
								17466,
								17483
							],
							[
								17544,
								17568
							],
							[
								17643,
								17670
							],
							[
								17900,
								17920
							],
							[
								17950,
								17961
							],
							[
								18060,
								18095
							],
							[
								18135,
								18153
							],
							[
								18340,
								18361
							],
							[
								18385,
								18395
							],
							[
								18434,
								18464
							],
							[
								19012,
								19051
							],
							[
								19160,
								19199
							],
							[
								19494,
								19551
							],
							[
								19645,
								19651
							],
							[
								19665,
								19671
							],
							[
								19984,
								20018
							],
							[
								20325,
								20380
							],
							[
								20656,
								20700
							],
							[
								20867,
								20901
							],
							[
								20967,
								21003
							],
							[
								21078,
								21095
							],
							[
								21239,
								21284
							],
							[
								21427,
								21440
							],
							[
								21538,
								21551
							],
							[
								21633,
								21670
							],
							[
								21671,
								21685
							],
							[
								21691,
								21695
							],
							[
								21777,
								21800
							],
							[
								21880,
								21900
							],
							[
								21991,
								22009
							],
							[
								22152,
								22170
							],
							[
								22243,
								22275
							],
							[
								22303,
								22329
							],
							[
								22654,
								22675
							],
							[
								22719,
								22732
							],
							[
								22795,
								22811
							],
							[
								22826,
								22833
							],
							[
								22865,
								22881
							],
							[
								22933,
								22954
							],
							[
								23123,
								23151
							],
							[
								23370,
								23387
							],
							[
								23388,
								23397
							],
							[
								23449,
								23466
							],
							[
								23467,
								23476
							],
							[
								23536,
								23553
							],
							[
								23554,
								23577
							],
							[
								23633,
								23657
							],
							[
								26284,
								26312
							],
							[
								26743,
								26747
							],
							[
								26875,
								26888
							],
							[
								27204,
								27216
							],
							[
								27479,
								27492
							],
							[
								27597,
								27611
							],
							[
								28504,
								28532
							],
							[
								28648,
								28661
							],
							[
								28773,
								28799
							],
							[
								28989,
								29037
							],
							[
								29085,
								29197
							],
							[
								29302,
								29325
							],
							[
								29464,
								29516
							],
							[
								29610,
								29626
							],
							[
								29710,
								29721
							],
							[
								29834,
								29838
							],
							[
								30117,
								30150
							],
							[
								30264,
								30316
							],
							[
								30490,
								30572
							],
							[
								30732,
								30742
							],
							[
								30760,
								30773
							],
							[
								30959,
								30995
							],
							[
								31152,
								31168
							],
							[
								31186,
								31208
							],
							[
								31321,
								31327
							],
							[
								31431,
								31444
							],
							[
								33099,
								33141
							],
							[
								33336,
								33367
							],
							[
								33417,
								33459
							],
							[
								33579,
								33603
							],
							[
								33823,
								33833
							],
							[
								33886,
								33890
							],
							[
								33929,
								33960
							],
							[
								33971,
								33988
							],
							[
								34129,
								34164
							],
							[
								34212,
								34239
							],
							[
								34330,
								34368
							],
							[
								34577,
								34625
							],
							[
								35213,
								35240
							],
							[
								35443,
								35457
							],
							[
								35506,
								35512
							],
							[
								35553,
								35619
							],
							[
								35621,
								35625
							],
							[
								35783,
								35790
							],
							[
								35882,
								35892
							],
							[
								36003,
								36012
							],
							[
								36118,
								36144
							],
							[
								36277,
								36308
							],
							[
								36483,
								36502
							],
							[
								36553,
								36561
							],
							[
								36590,
								36624
							],
							[
								36768,
								36793
							],
							[
								36891,
								36926
							],
							[
								36979,
								37008
							],
							[
								37090,
								37126
							],
							[
								37255,
								37259
							],
							[
								37286,
								37290
							],
							[
								37329,
								37333
							],
							[
								37361,
								37365
							],
							[
								37394,
								37422
							],
							[
								37552,
								37556
							],
							[
								37613,
								37644
							],
							[
								37762,
								37792
							],
							[
								37928,
								37932
							],
							[
								38216,
								38243
							],
							[
								38296,
								38305
							],
							[
								38366,
								38378
							],
							[
								38520,
								38532
							],
							[
								38659,
								38684
							],
							[
								38724,
								38750
							],
							[
								38984,
								39008
							],
							[
								39201,
								39224
							],
							[
								39325,
								39365
							],
							[
								39514,
								39518
							],
							[
								39551,
								39559
							],
							[
								39588,
								39592
							],
							[
								39967,
								39980
							],
							[
								40033,
								40053
							],
							[
								40409,
								40575
							],
							[
								40584,
								40641
							],
							[
								40648,
								40689
							],
							[
								40956,
								40976
							],
							[
								41178,
								41193
							],
							[
								41474,
								41497
							],
							[
								41702,
								41720
							],
							[
								41933,
								41947
							],
							[
								42008,
								42020
							],
							[
								42118,
								42127
							],
							[
								42403,
								42419
							],
							[
								42854,
								42890
							],
							[
								42985,
								42994
							],
							[
								43170,
								43181
							],
							[
								43192,
								43200
							],
							[
								43249,
								43261
							],
							[
								43506,
								43518
							],
							[
								43699,
								43725
							],
							[
								43744,
								43748
							],
							[
								43835,
								43859
							],
							[
								43937,
								43966
							],
							[
								44020,
								44051
							],
							[
								44058,
								44061
							],
							[
								44105,
								44118
							],
							[
								44218,
								44273
							],
							[
								44299,
								44325
							],
							[
								44508,
								44535
							],
							[
								44624,
								44657
							],
							[
								44677,
								44693
							],
							[
								44800,
								44818
							],
							[
								45024,
								45075
							]
						],
						"symlist":
						[
							"sliceFn = x =>",
							"ArrayBuffer(start, end)",
							"SharedArrayBuffer",
							"Uint8ClampedArray",
							"Int8Array",
							"Uint8Array",
							"Int16Array",
							"Uint16Array",
							"Int32Array",
							"Uint32Array",
							"BigInt64Array",
							"BigUint64Array",
							"Float32Array",
							"Float64Array",
							"slice = (x, s, e) =>",
							"stringify = v =>",
							"formatNumber = n =>",
							"isNative = fn =>",
							"function util()",
							"util",
							"AsyncFunction = async function x()",
							"GeneratorFunction = function* ()",
							"AsyncGeneratorFunction = async function* ()",
							"isAnyArrayBuffer(v)",
							"isArrayBuffer(v)",
							"isBigInt64Array(v)",
							"isBigUint64Array(v)",
							"isDate(v)",
							"isFloat32Array(v)",
							"isFloat64Array(v)",
							"isInt8Array(v)",
							"isInt16Array(v)",
							"isInt32Array(v)",
							"isMap(v)",
							"isPromise(v)",
							"isProxy(v)",
							"isRegExp(v)",
							"isSet(v)",
							"isSharedArrayBuffer(v)",
							"isUint8Array(v)",
							"isUint8ClampedArray(v)",
							"isUint16Array(v)",
							"isUint32Array(v)",
							"isWeakMap(v)",
							"isWeakSet(v)",
							"isDataView(v)",
							"isBooleanObject(v)",
							"isAsyncFunction(v)",
							"isGeneratorFunction(v)",
							"isAsyncGeneratorFunction(v)",
							"isNumberObject(v)",
							"isBigIntObject(v)",
							"isSymbolObject(v)",
							"isNativeError(v)",
							"isMapIterator(v)",
							"isSetIterator(v)",
							"isStringObject(v)",
							"isArrayBufferView(v)",
							"isArgumentsObject(v)",
							"isBoxedPrimitive(v)",
							"ctor =>",
							"isGeneratorObject(v)",
							"isTypedArray(v)",
							"isModuleNamespaceObject(v)",
							"isConstructor(v)",
							"isIterable(v)",
							"isAsyncIterable(v)",
							"isIterator(v)",
							"isArrayLike(v)",
							" function hasBuiltIn(o, m)",
							" function format(...args)",
							" function formatWithOptions(opts, ...args)",
							"function formatWithOptionsInternal(o, v)",
							" function assert(actual, expected, message)",
							" function setInterval(callback, ms)",
							" function start()",
							"() =>",
							" function clearInterval(id)",
							" function inherits(ctor, superCtor)",
							"ctor",
							"ctor",
							"superCtor",
							" function memoize(fn, cache = {})",
							" function Memoize(n, ...rest)",
							" function getset(target, ...args)",
							"GetSet = (...args) =>",
							"key =>",
							" (key, value) =>",
							"key =>",
							" (key, value) =>",
							"() =>",
							" value =>",
							" function modifier(...args)",
							" fn =>",
							" newValue =>",
							" function getter(target, ...args)",
							" () =>",
							"ret = key =>",
							"ret = key =>",
							"ret = () =>",
							" function setter(target, ...args)",
							" value =>",
							"ret = (key, value) =>",
							"ret = (key, value) =>",
							"ret = value =>",
							" function gettersetter(obj, ...optional)",
							" (...v) =>",
							"fn = (...optional) =>",
							"fn = (...optional) =>",
							"fn = (...optional) =>",
							"fn = (...optional) =>",
							" (...v) =>",
							" function hasGetSet(obj)",
							"m =>",
							" function getSetArgument(get, set)",
							" (...args) =>",
							" function wrapGetSet(getter, setter, ...args)",
							" prop =>",
							" (prop, value) =>",
							" function weakGetSet(...args)",
							" wref =>",
							" value =>",
							" function addremovehas(target, ...args)",
							"n =>",
							"el =>",
							" el =>",
							" el =>",
							" el =>",
							" el =>",
							"has = el =>",
							" function lookupObject(getset, instance = {}, handlers = {})",
							"get(target, prop)",
							"set(target, prop, value)",
							" function mapObject(target)",
							"set: (key, value) =>",
							"get: key =>",
							" function once(fn, thisArg, memoFn)",
							" function(...args)",
							" function waitFor(ms)",
							"resolve =>",
							" function define(obj, ...args)",
							" function keys(obj, maxDepthOrPred = 1)",
							"maxDepthOrPred = (obj, currentDepth) =>",
							" function properties(obj, options = { enumerable: true })",
							" fn =>",
							" fn =>",
							" function weakAssign(obj, ...args)",
							" function getPrototypeChain(obj, limit = -1, start = 0)",
							" function getConstructorChain(obj, ...range)",
							" function hasPrototype(obj, proto)",
							" function filter(seq, pred, thisArg)",
							"pred = (el, i) =>",
							" function filterKeys(r, needles, keep = true)",
							"pred = key =>",
							"(obj, key) =>",
							" (f, arr = [], length = f.length) =>",
							" (...args) =>",
							"a =>",
							"generate = (fn, add) =>",
							"add = (item, gen) =>",
							" function(...args)",
							" function(...args)",
							" function* split(buf, ...points)",
							"splitAt = (b, pos, len) =>",
							"unique = (...args) =>",
							"(arr, cmp) =>",
							" (el, i, arr) =>",
							"item =>",
							" (el, i, arr) =>",
							"function* unique(seq)",
							"getFunctionArguments = fn =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" (red, green, blue) =>",
							"function getAnsiStyles()",
							"value: (red, green, blue) =>",
							"c =>",
							"value: hex =>",
							"character =>",
							"value: hex =>",
							"value: code =>",
							"value: (red, green, blue) =>",
							"value: hex =>",
							" function randInt(...args)",
							" function randFloat(min, max, rng = Math.random)",
							" function randStr(n, set = '_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', rng = Math.random)",
							" function toBigInt(arg)",
							" function lazyProperty(obj, name, getter, opts = {})",
							"async function()",
							" function()",
							"v =>",
							" function replaceProperty(value)",
							" function lazyProperties(obj, gettersObj, opts = {})",
							" function observeProperties(target = {}, obj, fn = (prop, value) => {}, opts = {})",
							"get: () =>",
							"set: value =>",
							" function getOpt(options = {}, args)",
							"findOpt = arg =>",
							"([optname, option]) =>",
							"opt =>",
							"(acc, arg) =>",
							" function toUnixTime(dateObj, utc = false)",
							" function unixTime(utc = false)",
							" function fromUnixTime(epoch, utc = false)",
							" function range(...args)",
							" (v, k) =>",
							"n =>",
							" function chunkArray(arr, size)",
							"fn = (a, v, i) =>",
							" function camelize(str, delim = '')",
							" (match, p1, p2, offset) =>",
							" function decamelize(str, delim = '-')",
							" function shorten(str, max = 40, suffix = '...')",
							" function arraysInCommon(a)",
							"(itm, indx) =>",
							"arr =>",
							" function arrayFacade(proto, itemFn = (container, i) => container.",
							"(i))",
							"*keys()",
							"*entries()",
							"*values()",
							"forEach(callback, thisArg)",
							"reduce(callback, accu, thisArg)",
							" function mod(a, b)",
							"b : n =>",
							" function pushUnique(arr, ...args)",
							" function intersect(a, b)",
							" function symmetricDifference(a, b)",
							" function* partition(a, size)",
							" function difference(a, b, includes)",
							"x =>",
							"x =>",
							"x =>",
							"x =>",
							" function intersection(a, b)",
							"x =>",
							" function union(a, b, equality)",
							" function push(obj, ...values)",
							"v =>",
							" function repeater(n, what)",
							"n = () =>",
							"function* ()",
							"function* ()",
							" function repeat(n, what)",
							" function functionName(fn)",
							" function className(obj)",
							"isArrowFunction = fn =>",
							" function immutableClass(orig, ...proto)",
							"p =>",
							" ctor =>",
							"ctor",
							"imm = base =>",
							"constructor(...args)",
							" function instrument( fn, log = (duration, name, args, ret) => console.log( `function '${name}'` + (ret !== undefined ? ` {= ${escape(ret + '').",
							"(0, 100) + '...'}}` : '') + ` timing: ${duration.",
							"(3)}ms` ), logInterval = 0 //1000 )",
							"async (args, ret) =>",
							" (args, ret) =>",
							"async function(...args)",
							" function(...args)",
							"newMap = () =>",
							"(...args) =>",
							"get(path)",
							"set(path, value)",
							"catchable = function Catchable(self)",
							"catchable",
							"function ()",
							"then(fn)",
							"(...args) =>",
							"(...args) =>",
							" function isNumeric(value)",
							"v =>",
							" function isIndex(value)",
							" function numericIndex(value)",
							" function histogram(arr, out = ",
							"())",
							"incr = key =>",
							" function propertyLookupHandlers(handler = key => null)",
							"get(target, key, receiver)",
							".ownKeys = function(target)",
							" function propertyLookup(...args)",
							"handler = key =>",
							"function (...args)",
							" function abbreviate(str, max = 40, suffix = '...')"
						]
					},
					"AQAAAAAAAAAAAAAA2RYAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					180,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADZFgAAICBzbGljZUZuID0geCA9PgpBcnJheUJ1ZmZlcihzdGFydCwgZW5kKQpTaGFyZWRBcnJheUJ1ZmZlcgpVaW50OENsYW1wZWRBcnJheQpJbnQ4QXJyYXkKVWludDhBcnJheQpJbnQxNkFycmF5ClVpbnQxNkFycmF5CkludDMyQXJyYXkKVWludDMyQXJyYXkKQmlnSW50NjRBcnJheQpCaWdVaW50NjRBcnJheQpGbG9hdDMyQXJyYXkKRmxvYXQ2NEFycmF5CiAgc2xpY2UgPSAoeCwgcywgZSkgPT4KICBzdHJpbmdpZnkgPSB2ID0+CiAgZm9ybWF0TnVtYmVyID0gbiA9PgogIGlzTmF0aXZlID0gZm4gPT4KICB1dGlsKCkKICB1dGlsCkFzeW5jRnVuY3Rpb24gPSBmdW5jdGlvbiB4KCkKR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbiooKQpBc3luY0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24qKCkKICBpc0FueUFycmF5QnVmZmVyKHYpCiAgaXNBcnJheUJ1ZmZlcih2KQogIGlzQmlnSW50NjRBcnJheSh2KQogIGlzQmlnVWludDY0QXJyYXkodikKICBpc0RhdGUodikKICBpc0Zsb2F0MzJBcnJheSh2KQogIGlzRmxvYXQ2NEFycmF5KHYpCiAgaXNJbnQ4QXJyYXkodikKICBpc0ludDE2QXJyYXkodikKICBpc0ludDMyQXJyYXkodikKICBpc01hcCh2KQogIGlzUHJvbWlzZSh2KQogIGlzUHJveHkodikKICBpc1JlZ0V4cCh2KQogIGlzU2V0KHYpCiAgaXNTaGFyZWRBcnJheUJ1ZmZlcih2KQogIGlzVWludDhBcnJheSh2KQogIGlzVWludDhDbGFtcGVkQXJyYXkodikKICBpc1VpbnQxNkFycmF5KHYpCiAgaXNVaW50MzJBcnJheSh2KQogIGlzV2Vha01hcCh2KQogIGlzV2Vha1NldCh2KQogIGlzRGF0YVZpZXcodikKICBpc0Jvb2xlYW5PYmplY3QodikKICBpc0FzeW5jRnVuY3Rpb24odikKICBpc0dlbmVyYXRvckZ1bmN0aW9uKHYpCiAgaXNBc3luY0dlbmVyYXRvckZ1bmN0aW9uKHYpCiAgaXNOdW1iZXJPYmplY3QodikKICBpc0JpZ0ludE9iamVjdCh2KQogIGlzU3ltYm9sT2JqZWN0KHYpCiAgaXNOYXRpdmVFcnJvcih2KQogIGlzTWFwSXRlcmF0b3IodikKICBpc1NldEl0ZXJhdG9yKHYpCiAgaXNTdHJpbmdPYmplY3QodikKICBpc0FycmF5QnVmZmVyVmlldyh2KQogIGlzQXJndW1lbnRzT2JqZWN0KHYpCiAgaXNCb3hlZFByaW1pdGl2ZSh2KQogIGN0b3IgPT4KICBpc0dlbmVyYXRvck9iamVjdCh2KQogIGlzVHlwZWRBcnJheSh2KQogIGlzTW9kdWxlTmFtZXNwYWNlT2JqZWN0KHYpCiAgaXNDb25zdHJ1Y3Rvcih2KQogIGlzSXRlcmFibGUodikKICBpc0FzeW5jSXRlcmFibGUodikKICBpc0l0ZXJhdG9yKHYpCiAgaXNBcnJheUxpa2UodikKICBoYXNCdWlsdEluKG8sIG0pCiAgZm9ybWF0KC4uLmFyZ3MpCiAgZm9ybWF0V2l0aE9wdGlvbnMob3B0cywgLi4uYXJncykKICBmb3JtYXRXaXRoT3B0aW9uc0ludGVybmFsKG8sIHYpCiAgYXNzZXJ0KGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpCiAgc2V0SW50ZXJ2YWwoY2FsbGJhY2ssIG1zKQogIHN0YXJ0KCkKKCkgPT4KICBjbGVhckludGVydmFsKGlkKQogIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3RvcikKICBjdG9yCiAgY3RvcgogIHN1cGVyQ3RvcgogIG1lbW9pemUoZm4sIGNhY2hlID0ge30pCk1lbW9pemUobiwgLi4ucmVzdCkKICBnZXRzZXQodGFyZ2V0LCAuLi5hcmdzKQpHZXRTZXQgPSAoLi4uYXJncykgPT4KICBrZXkgPT4KICAoa2V5LCB2YWx1ZSkgPT4KICBrZXkgPT4KICAoa2V5LCB2YWx1ZSkgPT4KKCkgPT4KICB2YWx1ZSA9PgogIG1vZGlmaWVyKC4uLmFyZ3MpCiAgZm4gPT4KICBuZXdWYWx1ZSA9PgogIGdldHRlcih0YXJnZXQsIC4uLmFyZ3MpCiAgKCkgPT4KICByZXQgPSBrZXkgPT4KICByZXQgPSBrZXkgPT4KICByZXQgPSAoKSA9PgogIHNldHRlcih0YXJnZXQsIC4uLmFyZ3MpCiAgdmFsdWUgPT4KICByZXQgPSAoa2V5LCB2YWx1ZSkgPT4KICByZXQgPSAoa2V5LCB2YWx1ZSkgPT4KICByZXQgPSB2YWx1ZSA9PgogIGdldHRlcnNldHRlcihvYmosIC4uLm9wdGlvbmFsKQogICguLi52KSA9PgogIGZuID0gKC4uLm9wdGlvbmFsKSA9PgogIGZuID0gKC4uLm9wdGlvbmFsKSA9PgogIGZuID0gKC4uLm9wdGlvbmFsKSA9PgogIGZuID0gKC4uLm9wdGlvbmFsKSA9PgogICguLi52KSA9PgogIGhhc0dldFNldChvYmopCiAgbSA9PgogIGdldFNldEFyZ3VtZW50KGdldCwgc2V0KQogICguLi5hcmdzKSA9PgogIHdyYXBHZXRTZXQoZ2V0dGVyLCBzZXR0ZXIsIC4uLmFyZ3MpCiAgcHJvcCA9PgogIChwcm9wLCB2YWx1ZSkgPT4KICB3ZWFrR2V0U2V0KC4uLmFyZ3MpCiAgd3JlZiA9PgogIHZhbHVlID0+CiAgYWRkcmVtb3ZlaGFzKHRhcmdldCwgLi4uYXJncykKICBuID0+CiAgZWwgPT4KICBlbCA9PgogIGVsID0+CiAgZWwgPT4KICBlbCA9PgogIGhhcyA9IGVsID0+CiAgbG9va3VwT2JqZWN0KGdldHNldCwgaW5zdGFuY2UgPSB7fSwgaGFuZGxlcnMgPSB7fSkKICBnZXQodGFyZ2V0LCBwcm9wKQogIHNldCh0YXJnZXQsIHByb3AsIHZhbHVlKQogIG1hcE9iamVjdCh0YXJnZXQpCiAgc2V0OiAoa2V5LCB2YWx1ZSkgPT4KICBnZXQ6IGtleSA9PgogIG9uY2UoZm4sIHRoaXNBcmcsIG1lbW9GbikKICBmdW5jdGlvbiguLi5hcmdzKQogIHdhaXRGb3IobXMpCiAgcmVzb2x2ZSA9PgogIGRlZmluZShvYmosIC4uLmFyZ3MpCiAga2V5cyhvYmosIG1heERlcHRoT3JQcmVkID0gMSkKICBtYXhEZXB0aE9yUHJlZCA9IChvYmosIGN1cnJlbnREZXB0aCkgPT4KICBwcm9wZXJ0aWVzKG9iaiwgb3B0aW9ucyA9IHsgZW51bWVyYWJsZTogdHJ1ZSB9KQogIGZuID0+CiAgZm4gPT4KICB3ZWFrQXNzaWduKG9iaiwgLi4uYXJncykKICBnZXRQcm90b3R5cGVDaGFpbihvYmosIGxpbWl0ID0gLTEsIHN0YXJ0ID0gMCkKICBnZXRDb25zdHJ1Y3RvckNoYWluKG9iaiwgLi4ucmFuZ2UpCiAgaGFzUHJvdG90eXBlKG9iaiwgcHJvdG8pCiAgZmlsdGVyKHNlcSwgcHJlZCwgdGhpc0FyZykKICBwcmVkID0gKGVsLCBpKSA9PgogIGZpbHRlcktleXMociwgbmVlZGxlcywga2VlcCA9IHRydWUpCiAgcHJlZCA9IGtleSA9Pgoob2JqLCBrZXkpID0+CiAgKGYsIGFyciA9IFtdLCBsZW5ndGggPSBmLmxlbmd0aCkgPT4KICAoLi4uYXJncykgPT4KICBhID0+CiAgZ2VuZXJhdGUgPSAoZm4sIGFkZCkgPT4KICBhZGQgPSAoaXRlbSwgZ2VuKSA9PgogIGZ1bmN0aW9uKC4uLmFyZ3MpCiAgZnVuY3Rpb24oLi4uYXJncykKICBzcGxpdChidWYsIC4uLnBvaW50cykKICBzcGxpdEF0ID0gKGIsIHBvcywgbGVuKSA9PgogIHVuaXF1ZSA9ICguLi5hcmdzKSA9PgooYXJyLCBjbXApID0+CiAgKGVsLCBpLCBhcnIpID0+CiAgaXRlbSA9PgogIChlbCwgaSwgYXJyKSA9PgogIHVuaXF1ZShzZXEpCiAgZ2V0RnVuY3Rpb25Bcmd1bWVudHMgPSBmbiA9PgogIChvZmZzZXQgPSAwKSA9PgogIGNvZGUgPT4KICAob2Zmc2V0ID0gMCkgPT4KICBjb2RlID0+CiAgKG9mZnNldCA9IDApID0+CiAgKHJlZCwgZ3JlZW4sIGJsdWUpID0+CiAgZ2V0QW5zaVN0eWxlcygpCiAgdmFsdWU6IChyZWQsIGdyZWVuLCBibHVlKSA9PgogIGMgPT4KICB2YWx1ZTogaGV4ID0+CiAgY2hhcmFjdGVyID0+CiAgdmFsdWU6IGhleCA9PgogIHZhbHVlOiBjb2RlID0+CiAgdmFsdWU6IChyZWQsIGdyZWVuLCBibHVlKSA9PgogIHZhbHVlOiBoZXggPT4KICByYW5kSW50KC4uLmFyZ3MpCiAgcmFuZEZsb2F0KG1pbiwgbWF4LCBybmcgPSBNYXRoLnJhbmRvbSkKICByYW5kU3RyKG4sIHNldCA9ICdfMDEyMzQ1Njc4OUFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonLCBybmcgPSBNYXRoLnJhbmRvbSkKICB0b0JpZ0ludChhcmcpCiAgbGF6eVByb3BlcnR5KG9iaiwgbmFtZSwgZ2V0dGVyLCBvcHRzID0ge30pCiAgZnVuY3Rpb24oKQogIGZ1bmN0aW9uKCkKICB2ID0+CiAgcmVwbGFjZVByb3BlcnR5KHZhbHVlKQogIGxhenlQcm9wZXJ0aWVzKG9iaiwgZ2V0dGVyc09iaiwgb3B0cyA9IHt9KQogIG9ic2VydmVQcm9wZXJ0aWVzKHRhcmdldCA9IHt9LCBvYmosIGZuID0gKHByb3AsIHZhbHVlKSA9PiB7fSwgb3B0cyA9IHt9KQogIGdldDogKCkgPT4KICBzZXQ6IHZhbHVlID0+CiAgZ2V0T3B0KG9wdGlvbnMgPSB7fSwgYXJncykKICBmaW5kT3B0ID0gYXJnID0+Cihbb3B0bmFtZSwgb3B0aW9uXSkgPT4KICBvcHQgPT4KKGFjYywgYXJnKSA9PgogIHRvVW5peFRpbWUoZGF0ZU9iaiwgdXRjID0gZmFsc2UpCiAgdW5peFRpbWUodXRjID0gZmFsc2UpCiAgZnJvbVVuaXhUaW1lKGVwb2NoLCB1dGMgPSBmYWxzZSkKICByYW5nZSguLi5hcmdzKQogICh2LCBrKSA9PgogIG4gPT4KICBjaHVua0FycmF5KGFyciwgc2l6ZSkKICBmbiA9IChhLCB2LCBpKSA9PgogIGNhbWVsaXplKHN0ciwgZGVsaW0gPSAnJykKICAobWF0Y2gsIHAxLCBwMiwgb2Zmc2V0KSA9PgogIGRlY2FtZWxpemUoc3RyLCBkZWxpbSA9ICctJykKICBzaG9ydGVuKHN0ciwgbWF4ID0gNDAsIHN1ZmZpeCA9ICcuLi4nKQogIGFycmF5c0luQ29tbW9uKGEpCihpdG0sIGluZHgpID0+CiAgYXJyID0+CiAgYXJyYXlGYWNhZGUocHJvdG8sIGl0ZW1GbiA9IChjb250YWluZXIsIGkpID0+IGNvbnRhaW5lci4KKGkpKQoqa2V5cygpCiplbnRyaWVzKCkKKnZhbHVlcygpCiAgZm9yRWFjaChjYWxsYmFjaywgdGhpc0FyZykKICByZWR1Y2UoY2FsbGJhY2ssIGFjY3UsIHRoaXNBcmcpCiAgbW9kKGEsIGIpCiAgYiA6IG4gPT4KICBwdXNoVW5pcXVlKGFyciwgLi4uYXJncykKICBpbnRlcnNlY3QoYSwgYikKICBzeW1tZXRyaWNEaWZmZXJlbmNlKGEsIGIpCiAgcGFydGl0aW9uKGEsIHNpemUpCiAgZGlmZmVyZW5jZShhLCBiLCBpbmNsdWRlcykKICB4ID0+CiAgeCA9PgogIHggPT4KICB4ID0+CiAgaW50ZXJzZWN0aW9uKGEsIGIpCiAgeCA9PgogIHVuaW9uKGEsIGIsIGVxdWFsaXR5KQogIHB1c2gob2JqLCAuLi52YWx1ZXMpCiAgdiA9PgogIHJlcGVhdGVyKG4sIHdoYXQpCiAgbiA9ICgpID0+CigpCigpCiAgcmVwZWF0KG4sIHdoYXQpCiAgZnVuY3Rpb25OYW1lKGZuKQogIGNsYXNzTmFtZShvYmopCiAgaXNBcnJvd0Z1bmN0aW9uID0gZm4gPT4KICBpbW11dGFibGVDbGFzcyhvcmlnLCAuLi5wcm90bykKICBwID0+CiAgY3RvciA9PgogIGN0b3IKICBpbW0gPSBiYXNlID0+CiAgY29uc3RydWN0b3IoLi4uYXJncykKICBpbnN0cnVtZW50KCBmbiwgbG9nID0gKGR1cmF0aW9uLCBuYW1lLCBhcmdzLCByZXQpID0+IGNvbnNvbGUubG9nKCBgZnVuY3Rpb24gJyR7bmFtZX0nYCArIChyZXQgIT09IHVuZGVmaW5lZCA/IGAgez0gJHtlc2NhcGUocmV0ICsgJycpLgooMCwgMTAwKSArICcuLi4nfX1gIDogJycpICsgYCB0aW1pbmc6ICR7ZHVyYXRpb24uCigzKX1tc2AgKSwgbG9nSW50ZXJ2YWwgPSAwIC8vMTAwMCApCihhcmdzLCByZXQpID0+CiAgKGFyZ3MsIHJldCkgPT4KICBmdW5jdGlvbiguLi5hcmdzKQogIGZ1bmN0aW9uKC4uLmFyZ3MpCiAgbmV3TWFwID0gKCkgPT4KKC4uLmFyZ3MpID0+CiAgZ2V0KHBhdGgpCiAgc2V0KHBhdGgsIHZhbHVlKQogIGNhdGNoYWJsZSA9IGZ1bmN0aW9uIENhdGNoYWJsZShzZWxmKQogIGNhdGNoYWJsZQooKQogIHRoZW4oZm4pCiguLi5hcmdzKSA9PgooLi4uYXJncykgPT4KICBpc051bWVyaWModmFsdWUpCiAgdiA9PgogIGlzSW5kZXgodmFsdWUpCiAgbnVtZXJpY0luZGV4KHZhbHVlKQogIGhpc3RvZ3JhbShhcnIsIG91dCA9IAooKSkKICBpbmNyID0ga2V5ID0+CiAgcHJvcGVydHlMb29rdXBIYW5kbGVycyhoYW5kbGVyID0ga2V5ID0+IG51bGwpCiAgZ2V0KHRhcmdldCwga2V5LCByZWNlaXZlcikKICAub3duS2V5cyA9IGZ1bmN0aW9uKHRhcmdldCkKICBwcm9wZXJ0eUxvb2t1cCguLi5hcmdzKQogIGhhbmRsZXIgPSBrZXkgPT4KKC4uLmFyZ3MpCiAgYWJicmV2aWF0ZShzdHIsIG1heCA9IDQwLCBzdWZmaXggPSAnLi4uJykAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					181,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/delegate.js",
						"symkeys":
						[
							[
								13,
								48
							],
							[
								75,
								101
							],
							[
								246,
								259
							],
							[
								306,
								339
							]
						],
						"symlist":
						[
							"proxyDelegate = (target, origin) =>",
							"get(target, key, receiver)",
							" (...args) =>",
							"set(target, key, value, receiver)"
						]
					},
					"AQAAAAAAAAAAAAAAdQAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					182,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
						"symkeys":
						[
							[
								833,
								847
							],
							[
								927,
								950
							],
							[
								1088,
								1105
							],
							[
								1146,
								1163
							],
							[
								1196,
								1205
							],
							[
								1239,
								1249
							],
							[
								1283,
								1293
							],
							[
								1328,
								1339
							],
							[
								1373,
								1383
							],
							[
								1418,
								1429
							],
							[
								1466,
								1479
							],
							[
								1517,
								1531
							],
							[
								1567,
								1579
							],
							[
								1615,
								1627
							],
							[
								1680,
								1700
							],
							[
								1962,
								1978
							],
							[
								2032,
								2051
							],
							[
								2086,
								2102
							],
							[
								2144,
								2159
							],
							[
								2180,
								2184
							],
							[
								2222,
								2256
							],
							[
								2279,
								2311
							],
							[
								2334,
								2377
							],
							[
								4206,
								4225
							],
							[
								4323,
								4339
							],
							[
								4401,
								4419
							],
							[
								4483,
								4502
							],
							[
								4567,
								4576
							],
							[
								4631,
								4648
							],
							[
								4711,
								4728
							],
							[
								4791,
								4805
							],
							[
								4865,
								4880
							],
							[
								4941,
								4956
							],
							[
								5017,
								5025
							],
							[
								5079,
								5091
							],
							[
								5149,
								5159
							],
							[
								5215,
								5226
							],
							[
								5283,
								5291
							],
							[
								5345,
								5367
							],
							[
								5435,
								5450
							],
							[
								5511,
								5533
							],
							[
								5601,
								5617
							],
							[
								5679,
								5695
							],
							[
								5757,
								5769
							],
							[
								5827,
								5839
							],
							[
								5897,
								5910
							],
							[
								5969,
								5987
							],
							[
								6045,
								6063
							],
							[
								6127,
								6149
							],
							[
								6217,
								6244
							],
							[
								6317,
								6334
							],
							[
								6391,
								6408
							],
							[
								6465,
								6482
							],
							[
								6529,
								6545
							],
							[
								6628,
								6644
							],
							[
								6716,
								6732
							],
							[
								6804,
								6821
							],
							[
								6878,
								6898
							],
							[
								6957,
								6977
							],
							[
								7136,
								7155
							],
							[
								7231,
								7238
							],
							[
								7267,
								7287
							],
							[
								7357,
								7372
							],
							[
								7433,
								7459
							],
							[
								7530,
								7546
							],
							[
								7602,
								7615
							],
							[
								7692,
								7710
							],
							[
								7792,
								7805
							],
							[
								7870,
								7884
							],
							[
								7986,
								8012
							],
							[
								8058,
								8083
							],
							[
								8168,
								8210
							],
							[
								8344,
								8384
							],
							[
								11313,
								11356
							],
							[
								11773,
								11808
							],
							[
								11964,
								11982
							],
							[
								12012,
								12017
							],
							[
								12107,
								12134
							],
							[
								12253,
								12288
							],
							[
								12349,
								12353
							],
							[
								12369,
								12373
							],
							[
								12400,
								12409
							],
							[
								12572,
								12605
							],
							[
								12734,
								12766
							],
							[
								12930,
								12963
							],
							[
								13159,
								13180
							],
							[
								13258,
								13264
							],
							[
								13281,
								13297
							],
							[
								13443,
								13449
							],
							[
								13462,
								13478
							],
							[
								13651,
								13656
							],
							[
								13670,
								13679
							],
							[
								13729,
								13756
							],
							[
								13801,
								13807
							],
							[
								13852,
								13864
							],
							[
								13894,
								13927
							],
							[
								13985,
								13991
							],
							[
								14106,
								14118
							],
							[
								14172,
								14184
							],
							[
								14332,
								14343
							],
							[
								14385,
								14418
							],
							[
								14476,
								14485
							],
							[
								14607,
								14628
							],
							[
								14689,
								14710
							],
							[
								14868,
								14882
							],
							[
								15184,
								15224
							],
							[
								15291,
								15301
							],
							[
								15459,
								15480
							],
							[
								15614,
								15635
							],
							[
								15667,
								15688
							],
							[
								15791,
								15812
							],
							[
								16087,
								16097
							],
							[
								16143,
								16167
							],
							[
								16217,
								16221
							],
							[
								16261,
								16295
							],
							[
								16306,
								16319
							],
							[
								16378,
								16423
							],
							[
								16488,
								16499
							],
							[
								16519,
								16539
							],
							[
								16579,
								16608
							],
							[
								16632,
								16643
							],
							[
								16658,
								16670
							],
							[
								16717,
								16756
							],
							[
								16857,
								16861
							],
							[
								16900,
								16905
							],
							[
								16931,
								16937
							],
							[
								16966,
								16972
							],
							[
								17065,
								17078
							],
							[
								17106,
								17119
							],
							[
								17245,
								17256
							],
							[
								17336,
								17396
							],
							[
								17466,
								17483
							],
							[
								17544,
								17568
							],
							[
								17643,
								17670
							],
							[
								17900,
								17920
							],
							[
								17950,
								17961
							],
							[
								18060,
								18095
							],
							[
								18135,
								18153
							],
							[
								18340,
								18361
							],
							[
								18385,
								18395
							],
							[
								18434,
								18464
							],
							[
								19012,
								19051
							],
							[
								19160,
								19199
							],
							[
								19494,
								19551
							],
							[
								19645,
								19651
							],
							[
								19665,
								19671
							],
							[
								19984,
								20018
							],
							[
								20325,
								20380
							],
							[
								20656,
								20700
							],
							[
								20867,
								20901
							],
							[
								20967,
								21003
							],
							[
								21078,
								21095
							],
							[
								21239,
								21284
							],
							[
								21427,
								21440
							],
							[
								21538,
								21551
							],
							[
								21633,
								21670
							],
							[
								21671,
								21685
							],
							[
								21691,
								21695
							],
							[
								21777,
								21800
							],
							[
								21880,
								21900
							],
							[
								21991,
								22009
							],
							[
								22152,
								22170
							],
							[
								22243,
								22275
							],
							[
								22303,
								22329
							],
							[
								22654,
								22675
							],
							[
								22719,
								22732
							],
							[
								22795,
								22811
							],
							[
								22826,
								22833
							],
							[
								22865,
								22881
							],
							[
								22933,
								22954
							],
							[
								23123,
								23151
							],
							[
								23370,
								23387
							],
							[
								23388,
								23397
							],
							[
								23449,
								23466
							],
							[
								23467,
								23476
							],
							[
								23536,
								23553
							],
							[
								23554,
								23577
							],
							[
								23633,
								23657
							],
							[
								26284,
								26312
							],
							[
								26743,
								26747
							],
							[
								26875,
								26888
							],
							[
								27204,
								27216
							],
							[
								27479,
								27492
							],
							[
								27597,
								27611
							],
							[
								28504,
								28532
							],
							[
								28648,
								28661
							],
							[
								28773,
								28799
							],
							[
								28989,
								29037
							],
							[
								29085,
								29197
							],
							[
								29302,
								29325
							],
							[
								29464,
								29516
							],
							[
								29610,
								29626
							],
							[
								29710,
								29721
							],
							[
								29834,
								29838
							],
							[
								30117,
								30150
							],
							[
								30264,
								30316
							],
							[
								30490,
								30572
							],
							[
								30732,
								30742
							],
							[
								30760,
								30773
							],
							[
								30959,
								30995
							],
							[
								31152,
								31168
							],
							[
								31186,
								31208
							],
							[
								31321,
								31327
							],
							[
								31431,
								31444
							],
							[
								33099,
								33141
							],
							[
								33336,
								33367
							],
							[
								33417,
								33459
							],
							[
								33579,
								33603
							],
							[
								33823,
								33833
							],
							[
								33886,
								33890
							],
							[
								33929,
								33960
							],
							[
								33971,
								33988
							],
							[
								34129,
								34164
							],
							[
								34212,
								34239
							],
							[
								34330,
								34368
							],
							[
								34577,
								34625
							],
							[
								35213,
								35240
							],
							[
								35443,
								35457
							],
							[
								35506,
								35512
							],
							[
								35553,
								35619
							],
							[
								35621,
								35625
							],
							[
								35783,
								35790
							],
							[
								35882,
								35892
							],
							[
								36003,
								36012
							],
							[
								36118,
								36144
							],
							[
								36277,
								36308
							],
							[
								36483,
								36502
							],
							[
								36553,
								36561
							],
							[
								36590,
								36624
							],
							[
								36768,
								36793
							],
							[
								36891,
								36926
							],
							[
								36979,
								37008
							],
							[
								37090,
								37126
							],
							[
								37255,
								37259
							],
							[
								37286,
								37290
							],
							[
								37329,
								37333
							],
							[
								37361,
								37365
							],
							[
								37394,
								37422
							],
							[
								37552,
								37556
							],
							[
								37613,
								37644
							],
							[
								37762,
								37792
							],
							[
								37928,
								37932
							],
							[
								38216,
								38243
							],
							[
								38296,
								38305
							],
							[
								38366,
								38378
							],
							[
								38520,
								38532
							],
							[
								38659,
								38684
							],
							[
								38724,
								38750
							],
							[
								38984,
								39008
							],
							[
								39201,
								39224
							],
							[
								39325,
								39365
							],
							[
								39514,
								39518
							],
							[
								39551,
								39559
							],
							[
								39588,
								39592
							],
							[
								39967,
								39980
							],
							[
								40033,
								40053
							],
							[
								40409,
								40575
							],
							[
								40584,
								40641
							],
							[
								40648,
								40689
							],
							[
								40956,
								40976
							],
							[
								41178,
								41193
							],
							[
								41474,
								41497
							],
							[
								41702,
								41720
							],
							[
								41933,
								41947
							],
							[
								42008,
								42020
							],
							[
								42118,
								42127
							],
							[
								42403,
								42419
							],
							[
								42854,
								42890
							],
							[
								42985,
								42994
							],
							[
								43170,
								43181
							],
							[
								43192,
								43200
							],
							[
								43249,
								43261
							],
							[
								43506,
								43518
							],
							[
								43699,
								43725
							],
							[
								43744,
								43748
							],
							[
								43835,
								43859
							],
							[
								43937,
								43966
							],
							[
								44020,
								44051
							],
							[
								44058,
								44061
							],
							[
								44105,
								44118
							],
							[
								44218,
								44273
							],
							[
								44299,
								44325
							],
							[
								44508,
								44535
							],
							[
								44624,
								44657
							],
							[
								44677,
								44693
							],
							[
								44800,
								44818
							],
							[
								45024,
								45075
							]
						],
						"symlist":
						[
							"sliceFn = x =>",
							"ArrayBuffer(start, end)",
							"SharedArrayBuffer",
							"Uint8ClampedArray",
							"Int8Array",
							"Uint8Array",
							"Int16Array",
							"Uint16Array",
							"Int32Array",
							"Uint32Array",
							"BigInt64Array",
							"BigUint64Array",
							"Float32Array",
							"Float64Array",
							"slice = (x, s, e) =>",
							"stringify = v =>",
							"formatNumber = n =>",
							"isNative = fn =>",
							"function util()",
							"util",
							"AsyncFunction = async function x()",
							"GeneratorFunction = function* ()",
							"AsyncGeneratorFunction = async function* ()",
							"isAnyArrayBuffer(v)",
							"isArrayBuffer(v)",
							"isBigInt64Array(v)",
							"isBigUint64Array(v)",
							"isDate(v)",
							"isFloat32Array(v)",
							"isFloat64Array(v)",
							"isInt8Array(v)",
							"isInt16Array(v)",
							"isInt32Array(v)",
							"isMap(v)",
							"isPromise(v)",
							"isProxy(v)",
							"isRegExp(v)",
							"isSet(v)",
							"isSharedArrayBuffer(v)",
							"isUint8Array(v)",
							"isUint8ClampedArray(v)",
							"isUint16Array(v)",
							"isUint32Array(v)",
							"isWeakMap(v)",
							"isWeakSet(v)",
							"isDataView(v)",
							"isBooleanObject(v)",
							"isAsyncFunction(v)",
							"isGeneratorFunction(v)",
							"isAsyncGeneratorFunction(v)",
							"isNumberObject(v)",
							"isBigIntObject(v)",
							"isSymbolObject(v)",
							"isNativeError(v)",
							"isMapIterator(v)",
							"isSetIterator(v)",
							"isStringObject(v)",
							"isArrayBufferView(v)",
							"isArgumentsObject(v)",
							"isBoxedPrimitive(v)",
							"ctor =>",
							"isGeneratorObject(v)",
							"isTypedArray(v)",
							"isModuleNamespaceObject(v)",
							"isConstructor(v)",
							"isIterable(v)",
							"isAsyncIterable(v)",
							"isIterator(v)",
							"isArrayLike(v)",
							" function hasBuiltIn(o, m)",
							" function format(...args)",
							" function formatWithOptions(opts, ...args)",
							"function formatWithOptionsInternal(o, v)",
							" function assert(actual, expected, message)",
							" function setInterval(callback, ms)",
							" function start()",
							"() =>",
							" function clearInterval(id)",
							" function inherits(ctor, superCtor)",
							"ctor",
							"ctor",
							"superCtor",
							" function memoize(fn, cache = {})",
							" function Memoize(n, ...rest)",
							" function getset(target, ...args)",
							"GetSet = (...args) =>",
							"key =>",
							" (key, value) =>",
							"key =>",
							" (key, value) =>",
							"() =>",
							" value =>",
							" function modifier(...args)",
							" fn =>",
							" newValue =>",
							" function getter(target, ...args)",
							" () =>",
							"ret = key =>",
							"ret = key =>",
							"ret = () =>",
							" function setter(target, ...args)",
							" value =>",
							"ret = (key, value) =>",
							"ret = (key, value) =>",
							"ret = value =>",
							" function gettersetter(obj, ...optional)",
							" (...v) =>",
							"fn = (...optional) =>",
							"fn = (...optional) =>",
							"fn = (...optional) =>",
							"fn = (...optional) =>",
							" (...v) =>",
							" function hasGetSet(obj)",
							"m =>",
							" function getSetArgument(get, set)",
							" (...args) =>",
							" function wrapGetSet(getter, setter, ...args)",
							" prop =>",
							" (prop, value) =>",
							" function weakGetSet(...args)",
							" wref =>",
							" value =>",
							" function addremovehas(target, ...args)",
							"n =>",
							"el =>",
							" el =>",
							" el =>",
							" el =>",
							" el =>",
							"has = el =>",
							" function lookupObject(getset, instance = {}, handlers = {})",
							"get(target, prop)",
							"set(target, prop, value)",
							" function mapObject(target)",
							"set: (key, value) =>",
							"get: key =>",
							" function once(fn, thisArg, memoFn)",
							" function(...args)",
							" function waitFor(ms)",
							"resolve =>",
							" function define(obj, ...args)",
							" function keys(obj, maxDepthOrPred = 1)",
							"maxDepthOrPred = (obj, currentDepth) =>",
							" function properties(obj, options = { enumerable: true })",
							" fn =>",
							" fn =>",
							" function weakAssign(obj, ...args)",
							" function getPrototypeChain(obj, limit = -1, start = 0)",
							" function getConstructorChain(obj, ...range)",
							" function hasPrototype(obj, proto)",
							" function filter(seq, pred, thisArg)",
							"pred = (el, i) =>",
							" function filterKeys(r, needles, keep = true)",
							"pred = key =>",
							"(obj, key) =>",
							" (f, arr = [], length = f.length) =>",
							" (...args) =>",
							"a =>",
							"generate = (fn, add) =>",
							"add = (item, gen) =>",
							" function(...args)",
							" function(...args)",
							" function* split(buf, ...points)",
							"splitAt = (b, pos, len) =>",
							"unique = (...args) =>",
							"(arr, cmp) =>",
							" (el, i, arr) =>",
							"item =>",
							" (el, i, arr) =>",
							"function* unique(seq)",
							"getFunctionArguments = fn =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" (red, green, blue) =>",
							"function getAnsiStyles()",
							"value: (red, green, blue) =>",
							"c =>",
							"value: hex =>",
							"character =>",
							"value: hex =>",
							"value: code =>",
							"value: (red, green, blue) =>",
							"value: hex =>",
							" function randInt(...args)",
							" function randFloat(min, max, rng = Math.random)",
							" function randStr(n, set = '_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', rng = Math.random)",
							" function toBigInt(arg)",
							" function lazyProperty(obj, name, getter, opts = {})",
							"async function()",
							" function()",
							"v =>",
							" function replaceProperty(value)",
							" function lazyProperties(obj, gettersObj, opts = {})",
							" function observeProperties(target = {}, obj, fn = (prop, value) => {}, opts = {})",
							"get: () =>",
							"set: value =>",
							" function getOpt(options = {}, args)",
							"findOpt = arg =>",
							"([optname, option]) =>",
							"opt =>",
							"(acc, arg) =>",
							" function toUnixTime(dateObj, utc = false)",
							" function unixTime(utc = false)",
							" function fromUnixTime(epoch, utc = false)",
							" function range(...args)",
							" (v, k) =>",
							"n =>",
							" function chunkArray(arr, size)",
							"fn = (a, v, i) =>",
							" function camelize(str, delim = '')",
							" (match, p1, p2, offset) =>",
							" function decamelize(str, delim = '-')",
							" function shorten(str, max = 40, suffix = '...')",
							" function arraysInCommon(a)",
							"(itm, indx) =>",
							"arr =>",
							" function arrayFacade(proto, itemFn = (container, i) => container.",
							"(i))",
							"*keys()",
							"*entries()",
							"*values()",
							"forEach(callback, thisArg)",
							"reduce(callback, accu, thisArg)",
							" function mod(a, b)",
							"b : n =>",
							" function pushUnique(arr, ...args)",
							" function intersect(a, b)",
							" function symmetricDifference(a, b)",
							" function* partition(a, size)",
							" function difference(a, b, includes)",
							"x =>",
							"x =>",
							"x =>",
							"x =>",
							" function intersection(a, b)",
							"x =>",
							" function union(a, b, equality)",
							" function push(obj, ...values)",
							"v =>",
							" function repeater(n, what)",
							"n = () =>",
							"function* ()",
							"function* ()",
							" function repeat(n, what)",
							" function functionName(fn)",
							" function className(obj)",
							"isArrowFunction = fn =>",
							" function immutableClass(orig, ...proto)",
							"p =>",
							" ctor =>",
							"ctor",
							"imm = base =>",
							"constructor(...args)",
							" function instrument( fn, log = (duration, name, args, ret) => console.log( `function '${name}'` + (ret !== undefined ? ` {= ${escape(ret + '').",
							"(0, 100) + '...'}}` : '') + ` timing: ${duration.",
							"(3)}ms` ), logInterval = 0 //1000 )",
							"async (args, ret) =>",
							" (args, ret) =>",
							"async function(...args)",
							" function(...args)",
							"newMap = () =>",
							"(...args) =>",
							"get(path)",
							"set(path, value)",
							"catchable = function Catchable(self)",
							"catchable",
							"function ()",
							"then(fn)",
							"(...args) =>",
							"(...args) =>",
							" function isNumeric(value)",
							"v =>",
							" function isIndex(value)",
							" function numericIndex(value)",
							" function histogram(arr, out = ",
							"())",
							"incr = key =>",
							" function propertyLookupHandlers(handler = key => null)",
							"get(target, key, receiver)",
							".ownKeys = function(target)",
							" function propertyLookup(...args)",
							"handler = key =>",
							"function (...args)",
							" function abbreviate(str, max = 40, suffix = '...')"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB1AAAAICBwcm94eURlbGVnYXRlID0gKHRhcmdldCwgb3JpZ2luKSA9PgogIGdldCh0YXJnZXQsIGtleSwgcmVjZWl2ZXIpCiAgKC4uLmFyZ3MpID0+CiAgc2V0KHRhcmdldCwga2V5LCB2YWx1ZSwgcmVjZWl2ZXIpAAAAAAAAAADZFgAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					183,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AwAAAAAAAAAAAAAAAAAAAAAAAADZFgAAICBzbGljZUZuID0geCA9PgpBcnJheUJ1ZmZlcihzdGFydCwgZW5kKQpTaGFyZWRBcnJheUJ1ZmZlcgpVaW50OENsYW1wZWRBcnJheQpJbnQ4QXJyYXkKVWludDhBcnJheQpJbnQxNkFycmF5ClVpbnQxNkFycmF5CkludDMyQXJyYXkKVWludDMyQXJyYXkKQmlnSW50NjRBcnJheQpCaWdVaW50NjRBcnJheQpGbG9hdDMyQXJyYXkKRmxvYXQ2NEFycmF5CiAgc2xpY2UgPSAoeCwgcywgZSkgPT4KICBzdHJpbmdpZnkgPSB2ID0+CiAgZm9ybWF0TnVtYmVyID0gbiA9PgogIGlzTmF0aXZlID0gZm4gPT4KICB1dGlsKCkKICB1dGlsCkFzeW5jRnVuY3Rpb24gPSBmdW5jdGlvbiB4KCkKR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbiooKQpBc3luY0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24qKCkKICBpc0FueUFycmF5QnVmZmVyKHYpCiAgaXNBcnJheUJ1ZmZlcih2KQogIGlzQmlnSW50NjRBcnJheSh2KQogIGlzQmlnVWludDY0QXJyYXkodikKICBpc0RhdGUodikKICBpc0Zsb2F0MzJBcnJheSh2KQogIGlzRmxvYXQ2NEFycmF5KHYpCiAgaXNJbnQ4QXJyYXkodikKICBpc0ludDE2QXJyYXkodikKICBpc0ludDMyQXJyYXkodikKICBpc01hcCh2KQogIGlzUHJvbWlzZSh2KQogIGlzUHJveHkodikKICBpc1JlZ0V4cCh2KQogIGlzU2V0KHYpCiAgaXNTaGFyZWRBcnJheUJ1ZmZlcih2KQogIGlzVWludDhBcnJheSh2KQogIGlzVWludDhDbGFtcGVkQXJyYXkodikKICBpc1VpbnQxNkFycmF5KHYpCiAgaXNVaW50MzJBcnJheSh2KQogIGlzV2Vha01hcCh2KQogIGlzV2Vha1NldCh2KQogIGlzRGF0YVZpZXcodikKICBpc0Jvb2xlYW5PYmplY3QodikKICBpc0FzeW5jRnVuY3Rpb24odikKICBpc0dlbmVyYXRvckZ1bmN0aW9uKHYpCiAgaXNBc3luY0dlbmVyYXRvckZ1bmN0aW9uKHYpCiAgaXNOdW1iZXJPYmplY3QodikKICBpc0JpZ0ludE9iamVjdCh2KQogIGlzU3ltYm9sT2JqZWN0KHYpCiAgaXNOYXRpdmVFcnJvcih2KQogIGlzTWFwSXRlcmF0b3IodikKICBpc1NldEl0ZXJhdG9yKHYpCiAgaXNTdHJpbmdPYmplY3QodikKICBpc0FycmF5QnVmZmVyVmlldyh2KQogIGlzQXJndW1lbnRzT2JqZWN0KHYpCiAgaXNCb3hlZFByaW1pdGl2ZSh2KQogIGN0b3IgPT4KICBpc0dlbmVyYXRvck9iamVjdCh2KQogIGlzVHlwZWRBcnJheSh2KQogIGlzTW9kdWxlTmFtZXNwYWNlT2JqZWN0KHYpCiAgaXNDb25zdHJ1Y3Rvcih2KQogIGlzSXRlcmFibGUodikKICBpc0FzeW5jSXRlcmFibGUodikKICBpc0l0ZXJhdG9yKHYpCiAgaXNBcnJheUxpa2UodikKICBoYXNCdWlsdEluKG8sIG0pCiAgZm9ybWF0KC4uLmFyZ3MpCiAgZm9ybWF0V2l0aE9wdGlvbnMob3B0cywgLi4uYXJncykKICBmb3JtYXRXaXRoT3B0aW9uc0ludGVybmFsKG8sIHYpCiAgYXNzZXJ0KGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpCiAgc2V0SW50ZXJ2YWwoY2FsbGJhY2ssIG1zKQogIHN0YXJ0KCkKKCkgPT4KICBjbGVhckludGVydmFsKGlkKQogIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3RvcikKICBjdG9yCiAgY3RvcgogIHN1cGVyQ3RvcgogIG1lbW9pemUoZm4sIGNhY2hlID0ge30pCk1lbW9pemUobiwgLi4ucmVzdCkKICBnZXRzZXQodGFyZ2V0LCAuLi5hcmdzKQpHZXRTZXQgPSAoLi4uYXJncykgPT4KICBrZXkgPT4KICAoa2V5LCB2YWx1ZSkgPT4KICBrZXkgPT4KICAoa2V5LCB2YWx1ZSkgPT4KKCkgPT4KICB2YWx1ZSA9PgogIG1vZGlmaWVyKC4uLmFyZ3MpCiAgZm4gPT4KICBuZXdWYWx1ZSA9PgogIGdldHRlcih0YXJnZXQsIC4uLmFyZ3MpCiAgKCkgPT4KICByZXQgPSBrZXkgPT4KICByZXQgPSBrZXkgPT4KICByZXQgPSAoKSA9PgogIHNldHRlcih0YXJnZXQsIC4uLmFyZ3MpCiAgdmFsdWUgPT4KICByZXQgPSAoa2V5LCB2YWx1ZSkgPT4KICByZXQgPSAoa2V5LCB2YWx1ZSkgPT4KICByZXQgPSB2YWx1ZSA9PgogIGdldHRlcnNldHRlcihvYmosIC4uLm9wdGlvbmFsKQogICguLi52KSA9PgogIGZuID0gKC4uLm9wdGlvbmFsKSA9PgogIGZuID0gKC4uLm9wdGlvbmFsKSA9PgogIGZuID0gKC4uLm9wdGlvbmFsKSA9PgogIGZuID0gKC4uLm9wdGlvbmFsKSA9PgogICguLi52KSA9PgogIGhhc0dldFNldChvYmopCiAgbSA9PgogIGdldFNldEFyZ3VtZW50KGdldCwgc2V0KQogICguLi5hcmdzKSA9PgogIHdyYXBHZXRTZXQoZ2V0dGVyLCBzZXR0ZXIsIC4uLmFyZ3MpCiAgcHJvcCA9PgogIChwcm9wLCB2YWx1ZSkgPT4KICB3ZWFrR2V0U2V0KC4uLmFyZ3MpCiAgd3JlZiA9PgogIHZhbHVlID0+CiAgYWRkcmVtb3ZlaGFzKHRhcmdldCwgLi4uYXJncykKICBuID0+CiAgZWwgPT4KICBlbCA9PgogIGVsID0+CiAgZWwgPT4KICBlbCA9PgogIGhhcyA9IGVsID0+CiAgbG9va3VwT2JqZWN0KGdldHNldCwgaW5zdGFuY2UgPSB7fSwgaGFuZGxlcnMgPSB7fSkKICBnZXQodGFyZ2V0LCBwcm9wKQogIHNldCh0YXJnZXQsIHByb3AsIHZhbHVlKQogIG1hcE9iamVjdCh0YXJnZXQpCiAgc2V0OiAoa2V5LCB2YWx1ZSkgPT4KICBnZXQ6IGtleSA9PgogIG9uY2UoZm4sIHRoaXNBcmcsIG1lbW9GbikKICBmdW5jdGlvbiguLi5hcmdzKQogIHdhaXRGb3IobXMpCiAgcmVzb2x2ZSA9PgogIGRlZmluZShvYmosIC4uLmFyZ3MpCiAga2V5cyhvYmosIG1heERlcHRoT3JQcmVkID0gMSkKICBtYXhEZXB0aE9yUHJlZCA9IChvYmosIGN1cnJlbnREZXB0aCkgPT4KICBwcm9wZXJ0aWVzKG9iaiwgb3B0aW9ucyA9IHsgZW51bWVyYWJsZTogdHJ1ZSB9KQogIGZuID0+CiAgZm4gPT4KICB3ZWFrQXNzaWduKG9iaiwgLi4uYXJncykKICBnZXRQcm90b3R5cGVDaGFpbihvYmosIGxpbWl0ID0gLTEsIHN0YXJ0ID0gMCkKICBnZXRDb25zdHJ1Y3RvckNoYWluKG9iaiwgLi4ucmFuZ2UpCiAgaGFzUHJvdG90eXBlKG9iaiwgcHJvdG8pCiAgZmlsdGVyKHNlcSwgcHJlZCwgdGhpc0FyZykKICBwcmVkID0gKGVsLCBpKSA9PgogIGZpbHRlcktleXMociwgbmVlZGxlcywga2VlcCA9IHRydWUpCiAgcHJlZCA9IGtleSA9Pgoob2JqLCBrZXkpID0+CiAgKGYsIGFyciA9IFtdLCBsZW5ndGggPSBmLmxlbmd0aCkgPT4KICAoLi4uYXJncykgPT4KICBhID0+CiAgZ2VuZXJhdGUgPSAoZm4sIGFkZCkgPT4KICBhZGQgPSAoaXRlbSwgZ2VuKSA9PgogIGZ1bmN0aW9uKC4uLmFyZ3MpCiAgZnVuY3Rpb24oLi4uYXJncykKICBzcGxpdChidWYsIC4uLnBvaW50cykKICBzcGxpdEF0ID0gKGIsIHBvcywgbGVuKSA9PgogIHVuaXF1ZSA9ICguLi5hcmdzKSA9PgooYXJyLCBjbXApID0+CiAgKGVsLCBpLCBhcnIpID0+CiAgaXRlbSA9PgogIChlbCwgaSwgYXJyKSA9PgogIHVuaXF1ZShzZXEpCiAgZ2V0RnVuY3Rpb25Bcmd1bWVudHMgPSBmbiA9PgogIChvZmZzZXQgPSAwKSA9PgogIGNvZGUgPT4KICAob2Zmc2V0ID0gMCkgPT4KICBjb2RlID0+CiAgKG9mZnNldCA9IDApID0+CiAgKHJlZCwgZ3JlZW4sIGJsdWUpID0+CiAgZ2V0QW5zaVN0eWxlcygpCiAgdmFsdWU6IChyZWQsIGdyZWVuLCBibHVlKSA9PgogIGMgPT4KICB2YWx1ZTogaGV4ID0+CiAgY2hhcmFjdGVyID0+CiAgdmFsdWU6IGhleCA9PgogIHZhbHVlOiBjb2RlID0+CiAgdmFsdWU6IChyZWQsIGdyZWVuLCBibHVlKSA9PgogIHZhbHVlOiBoZXggPT4KICByYW5kSW50KC4uLmFyZ3MpCiAgcmFuZEZsb2F0KG1pbiwgbWF4LCBybmcgPSBNYXRoLnJhbmRvbSkKICByYW5kU3RyKG4sIHNldCA9ICdfMDEyMzQ1Njc4OUFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonLCBybmcgPSBNYXRoLnJhbmRvbSkKICB0b0JpZ0ludChhcmcpCiAgbGF6eVByb3BlcnR5KG9iaiwgbmFtZSwgZ2V0dGVyLCBvcHRzID0ge30pCiAgZnVuY3Rpb24oKQogIGZ1bmN0aW9uKCkKICB2ID0+CiAgcmVwbGFjZVByb3BlcnR5KHZhbHVlKQogIGxhenlQcm9wZXJ0aWVzKG9iaiwgZ2V0dGVyc09iaiwgb3B0cyA9IHt9KQogIG9ic2VydmVQcm9wZXJ0aWVzKHRhcmdldCA9IHt9LCBvYmosIGZuID0gKHByb3AsIHZhbHVlKSA9PiB7fSwgb3B0cyA9IHt9KQogIGdldDogKCkgPT4KICBzZXQ6IHZhbHVlID0+CiAgZ2V0T3B0KG9wdGlvbnMgPSB7fSwgYXJncykKICBmaW5kT3B0ID0gYXJnID0+Cihbb3B0bmFtZSwgb3B0aW9uXSkgPT4KICBvcHQgPT4KKGFjYywgYXJnKSA9PgogIHRvVW5peFRpbWUoZGF0ZU9iaiwgdXRjID0gZmFsc2UpCiAgdW5peFRpbWUodXRjID0gZmFsc2UpCiAgZnJvbVVuaXhUaW1lKGVwb2NoLCB1dGMgPSBmYWxzZSkKICByYW5nZSguLi5hcmdzKQogICh2LCBrKSA9PgogIG4gPT4KICBjaHVua0FycmF5KGFyciwgc2l6ZSkKICBmbiA9IChhLCB2LCBpKSA9PgogIGNhbWVsaXplKHN0ciwgZGVsaW0gPSAnJykKICAobWF0Y2gsIHAxLCBwMiwgb2Zmc2V0KSA9PgogIGRlY2FtZWxpemUoc3RyLCBkZWxpbSA9ICctJykKICBzaG9ydGVuKHN0ciwgbWF4ID0gNDAsIHN1ZmZpeCA9ICcuLi4nKQogIGFycmF5c0luQ29tbW9uKGEpCihpdG0sIGluZHgpID0+CiAgYXJyID0+CiAgYXJyYXlGYWNhZGUocHJvdG8sIGl0ZW1GbiA9IChjb250YWluZXIsIGkpID0+IGNvbnRhaW5lci4KKGkpKQoqa2V5cygpCiplbnRyaWVzKCkKKnZhbHVlcygpCiAgZm9yRWFjaChjYWxsYmFjaywgdGhpc0FyZykKICByZWR1Y2UoY2FsbGJhY2ssIGFjY3UsIHRoaXNBcmcpCiAgbW9kKGEsIGIpCiAgYiA6IG4gPT4KICBwdXNoVW5pcXVlKGFyciwgLi4uYXJncykKICBpbnRlcnNlY3QoYSwgYikKICBzeW1tZXRyaWNEaWZmZXJlbmNlKGEsIGIpCiAgcGFydGl0aW9uKGEsIHNpemUpCiAgZGlmZmVyZW5jZShhLCBiLCBpbmNsdWRlcykKICB4ID0+CiAgeCA9PgogIHggPT4KICB4ID0+CiAgaW50ZXJzZWN0aW9uKGEsIGIpCiAgeCA9PgogIHVuaW9uKGEsIGIsIGVxdWFsaXR5KQogIHB1c2gob2JqLCAuLi52YWx1ZXMpCiAgdiA9PgogIHJlcGVhdGVyKG4sIHdoYXQpCiAgbiA9ICgpID0+CigpCigpCiAgcmVwZWF0KG4sIHdoYXQpCiAgZnVuY3Rpb25OYW1lKGZuKQogIGNsYXNzTmFtZShvYmopCiAgaXNBcnJvd0Z1bmN0aW9uID0gZm4gPT4KICBpbW11dGFibGVDbGFzcyhvcmlnLCAuLi5wcm90bykKICBwID0+CiAgY3RvciA9PgogIGN0b3IKICBpbW0gPSBiYXNlID0+CiAgY29uc3RydWN0b3IoLi4uYXJncykKICBpbnN0cnVtZW50KCBmbiwgbG9nID0gKGR1cmF0aW9uLCBuYW1lLCBhcmdzLCByZXQpID0+IGNvbnNvbGUubG9nKCBgZnVuY3Rpb24gJyR7bmFtZX0nYCArIChyZXQgIT09IHVuZGVmaW5lZCA/IGAgez0gJHtlc2NhcGUocmV0ICsgJycpLgooMCwgMTAwKSArICcuLi4nfX1gIDogJycpICsgYCB0aW1pbmc6ICR7ZHVyYXRpb24uCigzKX1tc2AgKSwgbG9nSW50ZXJ2YWwgPSAwIC8vMTAwMCApCihhcmdzLCByZXQpID0+CiAgKGFyZ3MsIHJldCkgPT4KICBmdW5jdGlvbiguLi5hcmdzKQogIGZ1bmN0aW9uKC4uLmFyZ3MpCiAgbmV3TWFwID0gKCkgPT4KKC4uLmFyZ3MpID0+CiAgZ2V0KHBhdGgpCiAgc2V0KHBhdGgsIHZhbHVlKQogIGNhdGNoYWJsZSA9IGZ1bmN0aW9uIENhdGNoYWJsZShzZWxmKQogIGNhdGNoYWJsZQooKQogIHRoZW4oZm4pCiguLi5hcmdzKSA9PgooLi4uYXJncykgPT4KICBpc051bWVyaWModmFsdWUpCiAgdiA9PgogIGlzSW5kZXgodmFsdWUpCiAgbnVtZXJpY0luZGV4KHZhbHVlKQogIGhpc3RvZ3JhbShhcnIsIG91dCA9IAooKSkKICBpbmNyID0ga2V5ID0+CiAgcHJvcGVydHlMb29rdXBIYW5kbGVycyhoYW5kbGVyID0ga2V5ID0+IG51bGwpCiAgZ2V0KHRhcmdldCwga2V5LCByZWNlaXZlcikKICAub3duS2V5cyA9IGZ1bmN0aW9uKHRhcmdldCkKICBwcm9wZXJ0eUxvb2t1cCguLi5hcmdzKQogIGhhbmRsZXIgPSBrZXkgPT4KKC4uLmFyZ3MpCiAgYWJicmV2aWF0ZShzdHIsIG1heCA9IDQwLCBzdWZmaXggPSAnLi4uJykAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					184,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					186,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
						"symkeys":
						[
							[
								833,
								847
							],
							[
								927,
								950
							],
							[
								1088,
								1105
							],
							[
								1146,
								1163
							],
							[
								1196,
								1205
							],
							[
								1239,
								1249
							],
							[
								1283,
								1293
							],
							[
								1328,
								1339
							],
							[
								1373,
								1383
							],
							[
								1418,
								1429
							],
							[
								1466,
								1479
							],
							[
								1517,
								1531
							],
							[
								1567,
								1579
							],
							[
								1615,
								1627
							],
							[
								1680,
								1700
							],
							[
								1962,
								1978
							],
							[
								2032,
								2051
							],
							[
								2086,
								2102
							],
							[
								2144,
								2159
							],
							[
								2180,
								2184
							],
							[
								2222,
								2256
							],
							[
								2279,
								2311
							],
							[
								2334,
								2377
							],
							[
								4206,
								4225
							],
							[
								4323,
								4339
							],
							[
								4401,
								4419
							],
							[
								4483,
								4502
							],
							[
								4567,
								4576
							],
							[
								4631,
								4648
							],
							[
								4711,
								4728
							],
							[
								4791,
								4805
							],
							[
								4865,
								4880
							],
							[
								4941,
								4956
							],
							[
								5017,
								5025
							],
							[
								5079,
								5091
							],
							[
								5149,
								5159
							],
							[
								5215,
								5226
							],
							[
								5283,
								5291
							],
							[
								5345,
								5367
							],
							[
								5435,
								5450
							],
							[
								5511,
								5533
							],
							[
								5601,
								5617
							],
							[
								5679,
								5695
							],
							[
								5757,
								5769
							],
							[
								5827,
								5839
							],
							[
								5897,
								5910
							],
							[
								5969,
								5987
							],
							[
								6045,
								6063
							],
							[
								6127,
								6149
							],
							[
								6217,
								6244
							],
							[
								6317,
								6334
							],
							[
								6391,
								6408
							],
							[
								6465,
								6482
							],
							[
								6529,
								6545
							],
							[
								6628,
								6644
							],
							[
								6716,
								6732
							],
							[
								6804,
								6821
							],
							[
								6878,
								6898
							],
							[
								6957,
								6977
							],
							[
								7136,
								7155
							],
							[
								7231,
								7238
							],
							[
								7267,
								7287
							],
							[
								7357,
								7372
							],
							[
								7433,
								7459
							],
							[
								7530,
								7546
							],
							[
								7602,
								7615
							],
							[
								7692,
								7710
							],
							[
								7792,
								7805
							],
							[
								7870,
								7884
							],
							[
								7986,
								8012
							],
							[
								8058,
								8083
							],
							[
								8168,
								8210
							],
							[
								8344,
								8384
							],
							[
								11313,
								11356
							],
							[
								11773,
								11808
							],
							[
								11964,
								11982
							],
							[
								12012,
								12017
							],
							[
								12107,
								12134
							],
							[
								12253,
								12288
							],
							[
								12349,
								12353
							],
							[
								12369,
								12373
							],
							[
								12400,
								12409
							],
							[
								12572,
								12605
							],
							[
								12734,
								12766
							],
							[
								12930,
								12963
							],
							[
								13159,
								13180
							],
							[
								13258,
								13264
							],
							[
								13281,
								13297
							],
							[
								13443,
								13449
							],
							[
								13462,
								13478
							],
							[
								13651,
								13656
							],
							[
								13670,
								13679
							],
							[
								13729,
								13756
							],
							[
								13801,
								13807
							],
							[
								13852,
								13864
							],
							[
								13894,
								13927
							],
							[
								13985,
								13991
							],
							[
								14106,
								14118
							],
							[
								14172,
								14184
							],
							[
								14332,
								14343
							],
							[
								14385,
								14418
							],
							[
								14476,
								14485
							],
							[
								14607,
								14628
							],
							[
								14689,
								14710
							],
							[
								14868,
								14882
							],
							[
								15184,
								15224
							],
							[
								15291,
								15301
							],
							[
								15459,
								15480
							],
							[
								15614,
								15635
							],
							[
								15667,
								15688
							],
							[
								15791,
								15812
							],
							[
								16087,
								16097
							],
							[
								16143,
								16167
							],
							[
								16217,
								16221
							],
							[
								16261,
								16295
							],
							[
								16306,
								16319
							],
							[
								16378,
								16423
							],
							[
								16488,
								16499
							],
							[
								16519,
								16539
							],
							[
								16579,
								16608
							],
							[
								16632,
								16643
							],
							[
								16658,
								16670
							],
							[
								16717,
								16756
							],
							[
								16857,
								16861
							],
							[
								16900,
								16905
							],
							[
								16931,
								16937
							],
							[
								16966,
								16972
							],
							[
								17065,
								17078
							],
							[
								17106,
								17119
							],
							[
								17245,
								17256
							],
							[
								17336,
								17396
							],
							[
								17466,
								17483
							],
							[
								17544,
								17568
							],
							[
								17643,
								17670
							],
							[
								17900,
								17920
							],
							[
								17950,
								17961
							],
							[
								18060,
								18095
							],
							[
								18135,
								18153
							],
							[
								18340,
								18361
							],
							[
								18385,
								18395
							],
							[
								18434,
								18464
							],
							[
								19012,
								19051
							],
							[
								19160,
								19199
							],
							[
								19494,
								19551
							],
							[
								19645,
								19651
							],
							[
								19665,
								19671
							],
							[
								19984,
								20018
							],
							[
								20325,
								20380
							],
							[
								20656,
								20700
							],
							[
								20867,
								20901
							],
							[
								20967,
								21003
							],
							[
								21078,
								21095
							],
							[
								21239,
								21284
							],
							[
								21427,
								21440
							],
							[
								21538,
								21551
							],
							[
								21633,
								21670
							],
							[
								21671,
								21685
							],
							[
								21691,
								21695
							],
							[
								21777,
								21800
							],
							[
								21880,
								21900
							],
							[
								21991,
								22009
							],
							[
								22152,
								22170
							],
							[
								22243,
								22275
							],
							[
								22303,
								22329
							],
							[
								22654,
								22675
							],
							[
								22719,
								22732
							],
							[
								22795,
								22811
							],
							[
								22826,
								22833
							],
							[
								22865,
								22881
							],
							[
								22933,
								22954
							],
							[
								23123,
								23151
							],
							[
								23370,
								23387
							],
							[
								23388,
								23397
							],
							[
								23449,
								23466
							],
							[
								23467,
								23476
							],
							[
								23536,
								23553
							],
							[
								23554,
								23577
							],
							[
								23633,
								23657
							],
							[
								26284,
								26312
							],
							[
								26743,
								26747
							],
							[
								26875,
								26888
							],
							[
								27204,
								27216
							],
							[
								27479,
								27492
							],
							[
								27597,
								27611
							],
							[
								28504,
								28532
							],
							[
								28648,
								28661
							],
							[
								28773,
								28799
							],
							[
								28989,
								29037
							],
							[
								29085,
								29197
							],
							[
								29302,
								29325
							],
							[
								29464,
								29516
							],
							[
								29610,
								29626
							],
							[
								29710,
								29721
							],
							[
								29834,
								29838
							],
							[
								30117,
								30150
							],
							[
								30264,
								30316
							],
							[
								30490,
								30572
							],
							[
								30732,
								30742
							],
							[
								30760,
								30773
							],
							[
								30959,
								30995
							],
							[
								31152,
								31168
							],
							[
								31186,
								31208
							],
							[
								31321,
								31327
							],
							[
								31431,
								31444
							],
							[
								33099,
								33141
							],
							[
								33336,
								33367
							],
							[
								33417,
								33459
							],
							[
								33579,
								33603
							],
							[
								33823,
								33833
							],
							[
								33886,
								33890
							],
							[
								33929,
								33960
							],
							[
								33971,
								33988
							],
							[
								34129,
								34164
							],
							[
								34212,
								34239
							],
							[
								34330,
								34368
							],
							[
								34577,
								34625
							],
							[
								35213,
								35240
							],
							[
								35443,
								35457
							],
							[
								35506,
								35512
							],
							[
								35553,
								35619
							],
							[
								35621,
								35625
							],
							[
								35783,
								35790
							],
							[
								35882,
								35892
							],
							[
								36003,
								36012
							],
							[
								36118,
								36144
							],
							[
								36277,
								36308
							],
							[
								36483,
								36502
							],
							[
								36553,
								36561
							],
							[
								36590,
								36624
							],
							[
								36768,
								36793
							],
							[
								36891,
								36926
							],
							[
								36979,
								37008
							],
							[
								37090,
								37126
							],
							[
								37255,
								37259
							],
							[
								37286,
								37290
							],
							[
								37329,
								37333
							],
							[
								37361,
								37365
							],
							[
								37394,
								37422
							],
							[
								37552,
								37556
							],
							[
								37613,
								37644
							],
							[
								37762,
								37792
							],
							[
								37928,
								37932
							],
							[
								38216,
								38243
							],
							[
								38296,
								38305
							],
							[
								38366,
								38378
							],
							[
								38520,
								38532
							],
							[
								38659,
								38684
							],
							[
								38724,
								38750
							],
							[
								38984,
								39008
							],
							[
								39201,
								39224
							],
							[
								39325,
								39365
							],
							[
								39514,
								39518
							],
							[
								39551,
								39559
							],
							[
								39588,
								39592
							],
							[
								39967,
								39980
							],
							[
								40033,
								40053
							],
							[
								40409,
								40575
							],
							[
								40584,
								40641
							],
							[
								40648,
								40689
							],
							[
								40956,
								40976
							],
							[
								41178,
								41193
							],
							[
								41474,
								41497
							],
							[
								41702,
								41720
							],
							[
								41933,
								41947
							],
							[
								42008,
								42020
							],
							[
								42118,
								42127
							],
							[
								42403,
								42419
							],
							[
								42854,
								42890
							],
							[
								42985,
								42994
							],
							[
								43170,
								43181
							],
							[
								43192,
								43200
							],
							[
								43249,
								43261
							],
							[
								43506,
								43518
							],
							[
								43699,
								43725
							],
							[
								43744,
								43748
							],
							[
								43835,
								43859
							],
							[
								43937,
								43966
							],
							[
								44020,
								44051
							],
							[
								44058,
								44061
							],
							[
								44105,
								44118
							],
							[
								44218,
								44273
							],
							[
								44299,
								44325
							],
							[
								44508,
								44535
							],
							[
								44624,
								44657
							],
							[
								44677,
								44693
							],
							[
								44800,
								44818
							],
							[
								45024,
								45075
							]
						],
						"symlist":
						[
							"sliceFn = x =>",
							"ArrayBuffer(start, end)",
							"SharedArrayBuffer",
							"Uint8ClampedArray",
							"Int8Array",
							"Uint8Array",
							"Int16Array",
							"Uint16Array",
							"Int32Array",
							"Uint32Array",
							"BigInt64Array",
							"BigUint64Array",
							"Float32Array",
							"Float64Array",
							"slice = (x, s, e) =>",
							"stringify = v =>",
							"formatNumber = n =>",
							"isNative = fn =>",
							"function util()",
							"util",
							"AsyncFunction = async function x()",
							"GeneratorFunction = function* ()",
							"AsyncGeneratorFunction = async function* ()",
							"isAnyArrayBuffer(v)",
							"isArrayBuffer(v)",
							"isBigInt64Array(v)",
							"isBigUint64Array(v)",
							"isDate(v)",
							"isFloat32Array(v)",
							"isFloat64Array(v)",
							"isInt8Array(v)",
							"isInt16Array(v)",
							"isInt32Array(v)",
							"isMap(v)",
							"isPromise(v)",
							"isProxy(v)",
							"isRegExp(v)",
							"isSet(v)",
							"isSharedArrayBuffer(v)",
							"isUint8Array(v)",
							"isUint8ClampedArray(v)",
							"isUint16Array(v)",
							"isUint32Array(v)",
							"isWeakMap(v)",
							"isWeakSet(v)",
							"isDataView(v)",
							"isBooleanObject(v)",
							"isAsyncFunction(v)",
							"isGeneratorFunction(v)",
							"isAsyncGeneratorFunction(v)",
							"isNumberObject(v)",
							"isBigIntObject(v)",
							"isSymbolObject(v)",
							"isNativeError(v)",
							"isMapIterator(v)",
							"isSetIterator(v)",
							"isStringObject(v)",
							"isArrayBufferView(v)",
							"isArgumentsObject(v)",
							"isBoxedPrimitive(v)",
							"ctor =>",
							"isGeneratorObject(v)",
							"isTypedArray(v)",
							"isModuleNamespaceObject(v)",
							"isConstructor(v)",
							"isIterable(v)",
							"isAsyncIterable(v)",
							"isIterator(v)",
							"isArrayLike(v)",
							" function hasBuiltIn(o, m)",
							" function format(...args)",
							" function formatWithOptions(opts, ...args)",
							"function formatWithOptionsInternal(o, v)",
							" function assert(actual, expected, message)",
							" function setInterval(callback, ms)",
							" function start()",
							"() =>",
							" function clearInterval(id)",
							" function inherits(ctor, superCtor)",
							"ctor",
							"ctor",
							"superCtor",
							" function memoize(fn, cache = {})",
							" function Memoize(n, ...rest)",
							" function getset(target, ...args)",
							"GetSet = (...args) =>",
							"key =>",
							" (key, value) =>",
							"key =>",
							" (key, value) =>",
							"() =>",
							" value =>",
							" function modifier(...args)",
							" fn =>",
							" newValue =>",
							" function getter(target, ...args)",
							" () =>",
							"ret = key =>",
							"ret = key =>",
							"ret = () =>",
							" function setter(target, ...args)",
							" value =>",
							"ret = (key, value) =>",
							"ret = (key, value) =>",
							"ret = value =>",
							" function gettersetter(obj, ...optional)",
							" (...v) =>",
							"fn = (...optional) =>",
							"fn = (...optional) =>",
							"fn = (...optional) =>",
							"fn = (...optional) =>",
							" (...v) =>",
							" function hasGetSet(obj)",
							"m =>",
							" function getSetArgument(get, set)",
							" (...args) =>",
							" function wrapGetSet(getter, setter, ...args)",
							" prop =>",
							" (prop, value) =>",
							" function weakGetSet(...args)",
							" wref =>",
							" value =>",
							" function addremovehas(target, ...args)",
							"n =>",
							"el =>",
							" el =>",
							" el =>",
							" el =>",
							" el =>",
							"has = el =>",
							" function lookupObject(getset, instance = {}, handlers = {})",
							"get(target, prop)",
							"set(target, prop, value)",
							" function mapObject(target)",
							"set: (key, value) =>",
							"get: key =>",
							" function once(fn, thisArg, memoFn)",
							" function(...args)",
							" function waitFor(ms)",
							"resolve =>",
							" function define(obj, ...args)",
							" function keys(obj, maxDepthOrPred = 1)",
							"maxDepthOrPred = (obj, currentDepth) =>",
							" function properties(obj, options = { enumerable: true })",
							" fn =>",
							" fn =>",
							" function weakAssign(obj, ...args)",
							" function getPrototypeChain(obj, limit = -1, start = 0)",
							" function getConstructorChain(obj, ...range)",
							" function hasPrototype(obj, proto)",
							" function filter(seq, pred, thisArg)",
							"pred = (el, i) =>",
							" function filterKeys(r, needles, keep = true)",
							"pred = key =>",
							"(obj, key) =>",
							" (f, arr = [], length = f.length) =>",
							" (...args) =>",
							"a =>",
							"generate = (fn, add) =>",
							"add = (item, gen) =>",
							" function(...args)",
							" function(...args)",
							" function* split(buf, ...points)",
							"splitAt = (b, pos, len) =>",
							"unique = (...args) =>",
							"(arr, cmp) =>",
							" (el, i, arr) =>",
							"item =>",
							" (el, i, arr) =>",
							"function* unique(seq)",
							"getFunctionArguments = fn =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" (red, green, blue) =>",
							"function getAnsiStyles()",
							"value: (red, green, blue) =>",
							"c =>",
							"value: hex =>",
							"character =>",
							"value: hex =>",
							"value: code =>",
							"value: (red, green, blue) =>",
							"value: hex =>",
							" function randInt(...args)",
							" function randFloat(min, max, rng = Math.random)",
							" function randStr(n, set = '_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', rng = Math.random)",
							" function toBigInt(arg)",
							" function lazyProperty(obj, name, getter, opts = {})",
							"async function()",
							" function()",
							"v =>",
							" function replaceProperty(value)",
							" function lazyProperties(obj, gettersObj, opts = {})",
							" function observeProperties(target = {}, obj, fn = (prop, value) => {}, opts = {})",
							"get: () =>",
							"set: value =>",
							" function getOpt(options = {}, args)",
							"findOpt = arg =>",
							"([optname, option]) =>",
							"opt =>",
							"(acc, arg) =>",
							" function toUnixTime(dateObj, utc = false)",
							" function unixTime(utc = false)",
							" function fromUnixTime(epoch, utc = false)",
							" function range(...args)",
							" (v, k) =>",
							"n =>",
							" function chunkArray(arr, size)",
							"fn = (a, v, i) =>",
							" function camelize(str, delim = '')",
							" (match, p1, p2, offset) =>",
							" function decamelize(str, delim = '-')",
							" function shorten(str, max = 40, suffix = '...')",
							" function arraysInCommon(a)",
							"(itm, indx) =>",
							"arr =>",
							" function arrayFacade(proto, itemFn = (container, i) => container.",
							"(i))",
							"*keys()",
							"*entries()",
							"*values()",
							"forEach(callback, thisArg)",
							"reduce(callback, accu, thisArg)",
							" function mod(a, b)",
							"b : n =>",
							" function pushUnique(arr, ...args)",
							" function intersect(a, b)",
							" function symmetricDifference(a, b)",
							" function* partition(a, size)",
							" function difference(a, b, includes)",
							"x =>",
							"x =>",
							"x =>",
							"x =>",
							" function intersection(a, b)",
							"x =>",
							" function union(a, b, equality)",
							" function push(obj, ...values)",
							"v =>",
							" function repeater(n, what)",
							"n = () =>",
							"function* ()",
							"function* ()",
							" function repeat(n, what)",
							" function functionName(fn)",
							" function className(obj)",
							"isArrowFunction = fn =>",
							" function immutableClass(orig, ...proto)",
							"p =>",
							" ctor =>",
							"ctor",
							"imm = base =>",
							"constructor(...args)",
							" function instrument( fn, log = (duration, name, args, ret) => console.log( `function '${name}'` + (ret !== undefined ? ` {= ${escape(ret + '').",
							"(0, 100) + '...'}}` : '') + ` timing: ${duration.",
							"(3)}ms` ), logInterval = 0 //1000 )",
							"async (args, ret) =>",
							" (args, ret) =>",
							"async function(...args)",
							" function(...args)",
							"newMap = () =>",
							"(...args) =>",
							"get(path)",
							"set(path, value)",
							"catchable = function Catchable(self)",
							"catchable",
							"function ()",
							"then(fn)",
							"(...args) =>",
							"(...args) =>",
							" function isNumeric(value)",
							"v =>",
							" function isIndex(value)",
							" function numericIndex(value)",
							" function histogram(arr, out = ",
							"())",
							"incr = key =>",
							" function propertyLookupHandlers(handler = key => null)",
							"get(target, key, receiver)",
							".ownKeys = function(target)",
							" function propertyLookup(...args)",
							"handler = key =>",
							"function (...args)",
							" function abbreviate(str, max = 40, suffix = '...')"
						]
					},
					"AQAAAAAAAAAAAAAA2RYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					187,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AwAAAAAAAAAAAAAAAAAAAAAAAADZFgAAICBzbGljZUZuID0geCA9PgpBcnJheUJ1ZmZlcihzdGFydCwgZW5kKQpTaGFyZWRBcnJheUJ1ZmZlcgpVaW50OENsYW1wZWRBcnJheQpJbnQ4QXJyYXkKVWludDhBcnJheQpJbnQxNkFycmF5ClVpbnQxNkFycmF5CkludDMyQXJyYXkKVWludDMyQXJyYXkKQmlnSW50NjRBcnJheQpCaWdVaW50NjRBcnJheQpGbG9hdDMyQXJyYXkKRmxvYXQ2NEFycmF5CiAgc2xpY2UgPSAoeCwgcywgZSkgPT4KICBzdHJpbmdpZnkgPSB2ID0+CiAgZm9ybWF0TnVtYmVyID0gbiA9PgogIGlzTmF0aXZlID0gZm4gPT4KICB1dGlsKCkKICB1dGlsCkFzeW5jRnVuY3Rpb24gPSBmdW5jdGlvbiB4KCkKR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbiooKQpBc3luY0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24qKCkKICBpc0FueUFycmF5QnVmZmVyKHYpCiAgaXNBcnJheUJ1ZmZlcih2KQogIGlzQmlnSW50NjRBcnJheSh2KQogIGlzQmlnVWludDY0QXJyYXkodikKICBpc0RhdGUodikKICBpc0Zsb2F0MzJBcnJheSh2KQogIGlzRmxvYXQ2NEFycmF5KHYpCiAgaXNJbnQ4QXJyYXkodikKICBpc0ludDE2QXJyYXkodikKICBpc0ludDMyQXJyYXkodikKICBpc01hcCh2KQogIGlzUHJvbWlzZSh2KQogIGlzUHJveHkodikKICBpc1JlZ0V4cCh2KQogIGlzU2V0KHYpCiAgaXNTaGFyZWRBcnJheUJ1ZmZlcih2KQogIGlzVWludDhBcnJheSh2KQogIGlzVWludDhDbGFtcGVkQXJyYXkodikKICBpc1VpbnQxNkFycmF5KHYpCiAgaXNVaW50MzJBcnJheSh2KQogIGlzV2Vha01hcCh2KQogIGlzV2Vha1NldCh2KQogIGlzRGF0YVZpZXcodikKICBpc0Jvb2xlYW5PYmplY3QodikKICBpc0FzeW5jRnVuY3Rpb24odikKICBpc0dlbmVyYXRvckZ1bmN0aW9uKHYpCiAgaXNBc3luY0dlbmVyYXRvckZ1bmN0aW9uKHYpCiAgaXNOdW1iZXJPYmplY3QodikKICBpc0JpZ0ludE9iamVjdCh2KQogIGlzU3ltYm9sT2JqZWN0KHYpCiAgaXNOYXRpdmVFcnJvcih2KQogIGlzTWFwSXRlcmF0b3IodikKICBpc1NldEl0ZXJhdG9yKHYpCiAgaXNTdHJpbmdPYmplY3QodikKICBpc0FycmF5QnVmZmVyVmlldyh2KQogIGlzQXJndW1lbnRzT2JqZWN0KHYpCiAgaXNCb3hlZFByaW1pdGl2ZSh2KQogIGN0b3IgPT4KICBpc0dlbmVyYXRvck9iamVjdCh2KQogIGlzVHlwZWRBcnJheSh2KQogIGlzTW9kdWxlTmFtZXNwYWNlT2JqZWN0KHYpCiAgaXNDb25zdHJ1Y3Rvcih2KQogIGlzSXRlcmFibGUodikKICBpc0FzeW5jSXRlcmFibGUodikKICBpc0l0ZXJhdG9yKHYpCiAgaXNBcnJheUxpa2UodikKICBoYXNCdWlsdEluKG8sIG0pCiAgZm9ybWF0KC4uLmFyZ3MpCiAgZm9ybWF0V2l0aE9wdGlvbnMob3B0cywgLi4uYXJncykKICBmb3JtYXRXaXRoT3B0aW9uc0ludGVybmFsKG8sIHYpCiAgYXNzZXJ0KGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpCiAgc2V0SW50ZXJ2YWwoY2FsbGJhY2ssIG1zKQogIHN0YXJ0KCkKKCkgPT4KICBjbGVhckludGVydmFsKGlkKQogIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3RvcikKICBjdG9yCiAgY3RvcgogIHN1cGVyQ3RvcgogIG1lbW9pemUoZm4sIGNhY2hlID0ge30pCk1lbW9pemUobiwgLi4ucmVzdCkKICBnZXRzZXQodGFyZ2V0LCAuLi5hcmdzKQpHZXRTZXQgPSAoLi4uYXJncykgPT4KICBrZXkgPT4KICAoa2V5LCB2YWx1ZSkgPT4KICBrZXkgPT4KICAoa2V5LCB2YWx1ZSkgPT4KKCkgPT4KICB2YWx1ZSA9PgogIG1vZGlmaWVyKC4uLmFyZ3MpCiAgZm4gPT4KICBuZXdWYWx1ZSA9PgogIGdldHRlcih0YXJnZXQsIC4uLmFyZ3MpCiAgKCkgPT4KICByZXQgPSBrZXkgPT4KICByZXQgPSBrZXkgPT4KICByZXQgPSAoKSA9PgogIHNldHRlcih0YXJnZXQsIC4uLmFyZ3MpCiAgdmFsdWUgPT4KICByZXQgPSAoa2V5LCB2YWx1ZSkgPT4KICByZXQgPSAoa2V5LCB2YWx1ZSkgPT4KICByZXQgPSB2YWx1ZSA9PgogIGdldHRlcnNldHRlcihvYmosIC4uLm9wdGlvbmFsKQogICguLi52KSA9PgogIGZuID0gKC4uLm9wdGlvbmFsKSA9PgogIGZuID0gKC4uLm9wdGlvbmFsKSA9PgogIGZuID0gKC4uLm9wdGlvbmFsKSA9PgogIGZuID0gKC4uLm9wdGlvbmFsKSA9PgogICguLi52KSA9PgogIGhhc0dldFNldChvYmopCiAgbSA9PgogIGdldFNldEFyZ3VtZW50KGdldCwgc2V0KQogICguLi5hcmdzKSA9PgogIHdyYXBHZXRTZXQoZ2V0dGVyLCBzZXR0ZXIsIC4uLmFyZ3MpCiAgcHJvcCA9PgogIChwcm9wLCB2YWx1ZSkgPT4KICB3ZWFrR2V0U2V0KC4uLmFyZ3MpCiAgd3JlZiA9PgogIHZhbHVlID0+CiAgYWRkcmVtb3ZlaGFzKHRhcmdldCwgLi4uYXJncykKICBuID0+CiAgZWwgPT4KICBlbCA9PgogIGVsID0+CiAgZWwgPT4KICBlbCA9PgogIGhhcyA9IGVsID0+CiAgbG9va3VwT2JqZWN0KGdldHNldCwgaW5zdGFuY2UgPSB7fSwgaGFuZGxlcnMgPSB7fSkKICBnZXQodGFyZ2V0LCBwcm9wKQogIHNldCh0YXJnZXQsIHByb3AsIHZhbHVlKQogIG1hcE9iamVjdCh0YXJnZXQpCiAgc2V0OiAoa2V5LCB2YWx1ZSkgPT4KICBnZXQ6IGtleSA9PgogIG9uY2UoZm4sIHRoaXNBcmcsIG1lbW9GbikKICBmdW5jdGlvbiguLi5hcmdzKQogIHdhaXRGb3IobXMpCiAgcmVzb2x2ZSA9PgogIGRlZmluZShvYmosIC4uLmFyZ3MpCiAga2V5cyhvYmosIG1heERlcHRoT3JQcmVkID0gMSkKICBtYXhEZXB0aE9yUHJlZCA9IChvYmosIGN1cnJlbnREZXB0aCkgPT4KICBwcm9wZXJ0aWVzKG9iaiwgb3B0aW9ucyA9IHsgZW51bWVyYWJsZTogdHJ1ZSB9KQogIGZuID0+CiAgZm4gPT4KICB3ZWFrQXNzaWduKG9iaiwgLi4uYXJncykKICBnZXRQcm90b3R5cGVDaGFpbihvYmosIGxpbWl0ID0gLTEsIHN0YXJ0ID0gMCkKICBnZXRDb25zdHJ1Y3RvckNoYWluKG9iaiwgLi4ucmFuZ2UpCiAgaGFzUHJvdG90eXBlKG9iaiwgcHJvdG8pCiAgZmlsdGVyKHNlcSwgcHJlZCwgdGhpc0FyZykKICBwcmVkID0gKGVsLCBpKSA9PgogIGZpbHRlcktleXMociwgbmVlZGxlcywga2VlcCA9IHRydWUpCiAgcHJlZCA9IGtleSA9Pgoob2JqLCBrZXkpID0+CiAgKGYsIGFyciA9IFtdLCBsZW5ndGggPSBmLmxlbmd0aCkgPT4KICAoLi4uYXJncykgPT4KICBhID0+CiAgZ2VuZXJhdGUgPSAoZm4sIGFkZCkgPT4KICBhZGQgPSAoaXRlbSwgZ2VuKSA9PgogIGZ1bmN0aW9uKC4uLmFyZ3MpCiAgZnVuY3Rpb24oLi4uYXJncykKICBzcGxpdChidWYsIC4uLnBvaW50cykKICBzcGxpdEF0ID0gKGIsIHBvcywgbGVuKSA9PgogIHVuaXF1ZSA9ICguLi5hcmdzKSA9PgooYXJyLCBjbXApID0+CiAgKGVsLCBpLCBhcnIpID0+CiAgaXRlbSA9PgogIChlbCwgaSwgYXJyKSA9PgogIHVuaXF1ZShzZXEpCiAgZ2V0RnVuY3Rpb25Bcmd1bWVudHMgPSBmbiA9PgogIChvZmZzZXQgPSAwKSA9PgogIGNvZGUgPT4KICAob2Zmc2V0ID0gMCkgPT4KICBjb2RlID0+CiAgKG9mZnNldCA9IDApID0+CiAgKHJlZCwgZ3JlZW4sIGJsdWUpID0+CiAgZ2V0QW5zaVN0eWxlcygpCiAgdmFsdWU6IChyZWQsIGdyZWVuLCBibHVlKSA9PgogIGMgPT4KICB2YWx1ZTogaGV4ID0+CiAgY2hhcmFjdGVyID0+CiAgdmFsdWU6IGhleCA9PgogIHZhbHVlOiBjb2RlID0+CiAgdmFsdWU6IChyZWQsIGdyZWVuLCBibHVlKSA9PgogIHZhbHVlOiBoZXggPT4KICByYW5kSW50KC4uLmFyZ3MpCiAgcmFuZEZsb2F0KG1pbiwgbWF4LCBybmcgPSBNYXRoLnJhbmRvbSkKICByYW5kU3RyKG4sIHNldCA9ICdfMDEyMzQ1Njc4OUFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonLCBybmcgPSBNYXRoLnJhbmRvbSkKICB0b0JpZ0ludChhcmcpCiAgbGF6eVByb3BlcnR5KG9iaiwgbmFtZSwgZ2V0dGVyLCBvcHRzID0ge30pCiAgZnVuY3Rpb24oKQogIGZ1bmN0aW9uKCkKICB2ID0+CiAgcmVwbGFjZVByb3BlcnR5KHZhbHVlKQogIGxhenlQcm9wZXJ0aWVzKG9iaiwgZ2V0dGVyc09iaiwgb3B0cyA9IHt9KQogIG9ic2VydmVQcm9wZXJ0aWVzKHRhcmdldCA9IHt9LCBvYmosIGZuID0gKHByb3AsIHZhbHVlKSA9PiB7fSwgb3B0cyA9IHt9KQogIGdldDogKCkgPT4KICBzZXQ6IHZhbHVlID0+CiAgZ2V0T3B0KG9wdGlvbnMgPSB7fSwgYXJncykKICBmaW5kT3B0ID0gYXJnID0+Cihbb3B0bmFtZSwgb3B0aW9uXSkgPT4KICBvcHQgPT4KKGFjYywgYXJnKSA9PgogIHRvVW5peFRpbWUoZGF0ZU9iaiwgdXRjID0gZmFsc2UpCiAgdW5peFRpbWUodXRjID0gZmFsc2UpCiAgZnJvbVVuaXhUaW1lKGVwb2NoLCB1dGMgPSBmYWxzZSkKICByYW5nZSguLi5hcmdzKQogICh2LCBrKSA9PgogIG4gPT4KICBjaHVua0FycmF5KGFyciwgc2l6ZSkKICBmbiA9IChhLCB2LCBpKSA9PgogIGNhbWVsaXplKHN0ciwgZGVsaW0gPSAnJykKICAobWF0Y2gsIHAxLCBwMiwgb2Zmc2V0KSA9PgogIGRlY2FtZWxpemUoc3RyLCBkZWxpbSA9ICctJykKICBzaG9ydGVuKHN0ciwgbWF4ID0gNDAsIHN1ZmZpeCA9ICcuLi4nKQogIGFycmF5c0luQ29tbW9uKGEpCihpdG0sIGluZHgpID0+CiAgYXJyID0+CiAgYXJyYXlGYWNhZGUocHJvdG8sIGl0ZW1GbiA9IChjb250YWluZXIsIGkpID0+IGNvbnRhaW5lci4KKGkpKQoqa2V5cygpCiplbnRyaWVzKCkKKnZhbHVlcygpCiAgZm9yRWFjaChjYWxsYmFjaywgdGhpc0FyZykKICByZWR1Y2UoY2FsbGJhY2ssIGFjY3UsIHRoaXNBcmcpCiAgbW9kKGEsIGIpCiAgYiA6IG4gPT4KICBwdXNoVW5pcXVlKGFyciwgLi4uYXJncykKICBpbnRlcnNlY3QoYSwgYikKICBzeW1tZXRyaWNEaWZmZXJlbmNlKGEsIGIpCiAgcGFydGl0aW9uKGEsIHNpemUpCiAgZGlmZmVyZW5jZShhLCBiLCBpbmNsdWRlcykKICB4ID0+CiAgeCA9PgogIHggPT4KICB4ID0+CiAgaW50ZXJzZWN0aW9uKGEsIGIpCiAgeCA9PgogIHVuaW9uKGEsIGIsIGVxdWFsaXR5KQogIHB1c2gob2JqLCAuLi52YWx1ZXMpCiAgdiA9PgogIHJlcGVhdGVyKG4sIHdoYXQpCiAgbiA9ICgpID0+CigpCigpCiAgcmVwZWF0KG4sIHdoYXQpCiAgZnVuY3Rpb25OYW1lKGZuKQogIGNsYXNzTmFtZShvYmopCiAgaXNBcnJvd0Z1bmN0aW9uID0gZm4gPT4KICBpbW11dGFibGVDbGFzcyhvcmlnLCAuLi5wcm90bykKICBwID0+CiAgY3RvciA9PgogIGN0b3IKICBpbW0gPSBiYXNlID0+CiAgY29uc3RydWN0b3IoLi4uYXJncykKICBpbnN0cnVtZW50KCBmbiwgbG9nID0gKGR1cmF0aW9uLCBuYW1lLCBhcmdzLCByZXQpID0+IGNvbnNvbGUubG9nKCBgZnVuY3Rpb24gJyR7bmFtZX0nYCArIChyZXQgIT09IHVuZGVmaW5lZCA/IGAgez0gJHtlc2NhcGUocmV0ICsgJycpLgooMCwgMTAwKSArICcuLi4nfX1gIDogJycpICsgYCB0aW1pbmc6ICR7ZHVyYXRpb24uCigzKX1tc2AgKSwgbG9nSW50ZXJ2YWwgPSAwIC8vMTAwMCApCihhcmdzLCByZXQpID0+CiAgKGFyZ3MsIHJldCkgPT4KICBmdW5jdGlvbiguLi5hcmdzKQogIGZ1bmN0aW9uKC4uLmFyZ3MpCiAgbmV3TWFwID0gKCkgPT4KKC4uLmFyZ3MpID0+CiAgZ2V0KHBhdGgpCiAgc2V0KHBhdGgsIHZhbHVlKQogIGNhdGNoYWJsZSA9IGZ1bmN0aW9uIENhdGNoYWJsZShzZWxmKQogIGNhdGNoYWJsZQooKQogIHRoZW4oZm4pCiguLi5hcmdzKSA9PgooLi4uYXJncykgPT4KICBpc051bWVyaWModmFsdWUpCiAgdiA9PgogIGlzSW5kZXgodmFsdWUpCiAgbnVtZXJpY0luZGV4KHZhbHVlKQogIGhpc3RvZ3JhbShhcnIsIG91dCA9IAooKSkKICBpbmNyID0ga2V5ID0+CiAgcHJvcGVydHlMb29rdXBIYW5kbGVycyhoYW5kbGVyID0ga2V5ID0+IG51bGwpCiAgZ2V0KHRhcmdldCwga2V5LCByZWNlaXZlcikKICAub3duS2V5cyA9IGZ1bmN0aW9uKHRhcmdldCkKICBwcm9wZXJ0eUxvb2t1cCguLi5hcmdzKQogIGhhbmRsZXIgPSBrZXkgPT4KKC4uLmFyZ3MpCiAgYWJicmV2aWF0ZShzdHIsIG1heCA9IDQwLCBzdWZmaXggPSAnLi4uJykAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					189,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					191,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
						"symkeys":
						[
							[
								833,
								847
							],
							[
								927,
								950
							],
							[
								1088,
								1105
							],
							[
								1146,
								1163
							],
							[
								1196,
								1205
							],
							[
								1239,
								1249
							],
							[
								1283,
								1293
							],
							[
								1328,
								1339
							],
							[
								1373,
								1383
							],
							[
								1418,
								1429
							],
							[
								1466,
								1479
							],
							[
								1517,
								1531
							],
							[
								1567,
								1579
							],
							[
								1615,
								1627
							],
							[
								1680,
								1700
							],
							[
								1962,
								1978
							],
							[
								2032,
								2051
							],
							[
								2086,
								2102
							],
							[
								2144,
								2159
							],
							[
								2180,
								2184
							],
							[
								2222,
								2256
							],
							[
								2279,
								2311
							],
							[
								2334,
								2377
							],
							[
								4206,
								4225
							],
							[
								4323,
								4339
							],
							[
								4401,
								4419
							],
							[
								4483,
								4502
							],
							[
								4567,
								4576
							],
							[
								4631,
								4648
							],
							[
								4711,
								4728
							],
							[
								4791,
								4805
							],
							[
								4865,
								4880
							],
							[
								4941,
								4956
							],
							[
								5017,
								5025
							],
							[
								5079,
								5091
							],
							[
								5149,
								5159
							],
							[
								5215,
								5226
							],
							[
								5283,
								5291
							],
							[
								5345,
								5367
							],
							[
								5435,
								5450
							],
							[
								5511,
								5533
							],
							[
								5601,
								5617
							],
							[
								5679,
								5695
							],
							[
								5757,
								5769
							],
							[
								5827,
								5839
							],
							[
								5897,
								5910
							],
							[
								5969,
								5987
							],
							[
								6045,
								6063
							],
							[
								6127,
								6149
							],
							[
								6217,
								6244
							],
							[
								6317,
								6334
							],
							[
								6391,
								6408
							],
							[
								6465,
								6482
							],
							[
								6529,
								6545
							],
							[
								6628,
								6644
							],
							[
								6716,
								6732
							],
							[
								6804,
								6821
							],
							[
								6878,
								6898
							],
							[
								6957,
								6977
							],
							[
								7136,
								7155
							],
							[
								7231,
								7238
							],
							[
								7267,
								7287
							],
							[
								7357,
								7372
							],
							[
								7433,
								7459
							],
							[
								7530,
								7546
							],
							[
								7602,
								7615
							],
							[
								7692,
								7710
							],
							[
								7792,
								7805
							],
							[
								7870,
								7884
							],
							[
								7986,
								8012
							],
							[
								8058,
								8083
							],
							[
								8168,
								8210
							],
							[
								8344,
								8384
							],
							[
								11313,
								11356
							],
							[
								11773,
								11808
							],
							[
								11964,
								11982
							],
							[
								12012,
								12017
							],
							[
								12107,
								12134
							],
							[
								12253,
								12288
							],
							[
								12349,
								12353
							],
							[
								12369,
								12373
							],
							[
								12400,
								12409
							],
							[
								12572,
								12605
							],
							[
								12734,
								12766
							],
							[
								12930,
								12963
							],
							[
								13159,
								13180
							],
							[
								13258,
								13264
							],
							[
								13281,
								13297
							],
							[
								13443,
								13449
							],
							[
								13462,
								13478
							],
							[
								13651,
								13656
							],
							[
								13670,
								13679
							],
							[
								13729,
								13756
							],
							[
								13801,
								13807
							],
							[
								13852,
								13864
							],
							[
								13894,
								13927
							],
							[
								13985,
								13991
							],
							[
								14106,
								14118
							],
							[
								14172,
								14184
							],
							[
								14332,
								14343
							],
							[
								14385,
								14418
							],
							[
								14476,
								14485
							],
							[
								14607,
								14628
							],
							[
								14689,
								14710
							],
							[
								14868,
								14882
							],
							[
								15184,
								15224
							],
							[
								15291,
								15301
							],
							[
								15459,
								15480
							],
							[
								15614,
								15635
							],
							[
								15667,
								15688
							],
							[
								15791,
								15812
							],
							[
								16087,
								16097
							],
							[
								16143,
								16167
							],
							[
								16217,
								16221
							],
							[
								16261,
								16295
							],
							[
								16306,
								16319
							],
							[
								16378,
								16423
							],
							[
								16488,
								16499
							],
							[
								16519,
								16539
							],
							[
								16579,
								16608
							],
							[
								16632,
								16643
							],
							[
								16658,
								16670
							],
							[
								16717,
								16756
							],
							[
								16857,
								16861
							],
							[
								16900,
								16905
							],
							[
								16931,
								16937
							],
							[
								16966,
								16972
							],
							[
								17065,
								17078
							],
							[
								17106,
								17119
							],
							[
								17245,
								17256
							],
							[
								17336,
								17396
							],
							[
								17466,
								17483
							],
							[
								17544,
								17568
							],
							[
								17643,
								17670
							],
							[
								17900,
								17920
							],
							[
								17950,
								17961
							],
							[
								18060,
								18095
							],
							[
								18135,
								18153
							],
							[
								18340,
								18361
							],
							[
								18385,
								18395
							],
							[
								18434,
								18464
							],
							[
								19012,
								19051
							],
							[
								19160,
								19199
							],
							[
								19494,
								19551
							],
							[
								19645,
								19651
							],
							[
								19665,
								19671
							],
							[
								19984,
								20018
							],
							[
								20325,
								20380
							],
							[
								20656,
								20700
							],
							[
								20867,
								20901
							],
							[
								20967,
								21003
							],
							[
								21078,
								21095
							],
							[
								21239,
								21284
							],
							[
								21427,
								21440
							],
							[
								21538,
								21551
							],
							[
								21633,
								21670
							],
							[
								21671,
								21685
							],
							[
								21691,
								21695
							],
							[
								21777,
								21800
							],
							[
								21880,
								21900
							],
							[
								21991,
								22009
							],
							[
								22152,
								22170
							],
							[
								22243,
								22275
							],
							[
								22303,
								22329
							],
							[
								22654,
								22675
							],
							[
								22719,
								22732
							],
							[
								22795,
								22811
							],
							[
								22826,
								22833
							],
							[
								22865,
								22881
							],
							[
								22933,
								22954
							],
							[
								23123,
								23151
							],
							[
								23370,
								23387
							],
							[
								23388,
								23397
							],
							[
								23449,
								23466
							],
							[
								23467,
								23476
							],
							[
								23536,
								23553
							],
							[
								23554,
								23577
							],
							[
								23633,
								23657
							],
							[
								26284,
								26312
							],
							[
								26743,
								26747
							],
							[
								26875,
								26888
							],
							[
								27204,
								27216
							],
							[
								27479,
								27492
							],
							[
								27597,
								27611
							],
							[
								28504,
								28532
							],
							[
								28648,
								28661
							],
							[
								28773,
								28799
							],
							[
								28989,
								29037
							],
							[
								29085,
								29197
							],
							[
								29302,
								29325
							],
							[
								29464,
								29516
							],
							[
								29610,
								29626
							],
							[
								29710,
								29721
							],
							[
								29834,
								29838
							],
							[
								30117,
								30150
							],
							[
								30264,
								30316
							],
							[
								30490,
								30572
							],
							[
								30732,
								30742
							],
							[
								30760,
								30773
							],
							[
								30959,
								30995
							],
							[
								31152,
								31168
							],
							[
								31186,
								31208
							],
							[
								31321,
								31327
							],
							[
								31431,
								31444
							],
							[
								33099,
								33141
							],
							[
								33336,
								33367
							],
							[
								33417,
								33459
							],
							[
								33579,
								33603
							],
							[
								33823,
								33833
							],
							[
								33886,
								33890
							],
							[
								33929,
								33960
							],
							[
								33971,
								33988
							],
							[
								34129,
								34164
							],
							[
								34212,
								34239
							],
							[
								34330,
								34368
							],
							[
								34577,
								34625
							],
							[
								35213,
								35240
							],
							[
								35443,
								35457
							],
							[
								35506,
								35512
							],
							[
								35553,
								35619
							],
							[
								35621,
								35625
							],
							[
								35783,
								35790
							],
							[
								35882,
								35892
							],
							[
								36003,
								36012
							],
							[
								36118,
								36144
							],
							[
								36277,
								36308
							],
							[
								36483,
								36502
							],
							[
								36553,
								36561
							],
							[
								36590,
								36624
							],
							[
								36768,
								36793
							],
							[
								36891,
								36926
							],
							[
								36979,
								37008
							],
							[
								37090,
								37126
							],
							[
								37255,
								37259
							],
							[
								37286,
								37290
							],
							[
								37329,
								37333
							],
							[
								37361,
								37365
							],
							[
								37394,
								37422
							],
							[
								37552,
								37556
							],
							[
								37613,
								37644
							],
							[
								37762,
								37792
							],
							[
								37928,
								37932
							],
							[
								38216,
								38243
							],
							[
								38296,
								38305
							],
							[
								38366,
								38378
							],
							[
								38520,
								38532
							],
							[
								38659,
								38684
							],
							[
								38724,
								38750
							],
							[
								38984,
								39008
							],
							[
								39201,
								39224
							],
							[
								39325,
								39365
							],
							[
								39514,
								39518
							],
							[
								39551,
								39559
							],
							[
								39588,
								39592
							],
							[
								39967,
								39980
							],
							[
								40033,
								40053
							],
							[
								40409,
								40575
							],
							[
								40584,
								40641
							],
							[
								40648,
								40689
							],
							[
								40956,
								40976
							],
							[
								41178,
								41193
							],
							[
								41474,
								41497
							],
							[
								41702,
								41720
							],
							[
								41933,
								41947
							],
							[
								42008,
								42020
							],
							[
								42118,
								42127
							],
							[
								42403,
								42419
							],
							[
								42854,
								42890
							],
							[
								42985,
								42994
							],
							[
								43170,
								43181
							],
							[
								43192,
								43200
							],
							[
								43249,
								43261
							],
							[
								43506,
								43518
							],
							[
								43699,
								43725
							],
							[
								43744,
								43748
							],
							[
								43835,
								43859
							],
							[
								43937,
								43966
							],
							[
								44020,
								44051
							],
							[
								44058,
								44061
							],
							[
								44105,
								44118
							],
							[
								44218,
								44273
							],
							[
								44299,
								44325
							],
							[
								44508,
								44535
							],
							[
								44624,
								44657
							],
							[
								44677,
								44693
							],
							[
								44800,
								44818
							],
							[
								45024,
								45075
							]
						],
						"symlist":
						[
							"sliceFn = x =>",
							"ArrayBuffer(start, end)",
							"SharedArrayBuffer",
							"Uint8ClampedArray",
							"Int8Array",
							"Uint8Array",
							"Int16Array",
							"Uint16Array",
							"Int32Array",
							"Uint32Array",
							"BigInt64Array",
							"BigUint64Array",
							"Float32Array",
							"Float64Array",
							"slice = (x, s, e) =>",
							"stringify = v =>",
							"formatNumber = n =>",
							"isNative = fn =>",
							"function util()",
							"util",
							"AsyncFunction = async function x()",
							"GeneratorFunction = function* ()",
							"AsyncGeneratorFunction = async function* ()",
							"isAnyArrayBuffer(v)",
							"isArrayBuffer(v)",
							"isBigInt64Array(v)",
							"isBigUint64Array(v)",
							"isDate(v)",
							"isFloat32Array(v)",
							"isFloat64Array(v)",
							"isInt8Array(v)",
							"isInt16Array(v)",
							"isInt32Array(v)",
							"isMap(v)",
							"isPromise(v)",
							"isProxy(v)",
							"isRegExp(v)",
							"isSet(v)",
							"isSharedArrayBuffer(v)",
							"isUint8Array(v)",
							"isUint8ClampedArray(v)",
							"isUint16Array(v)",
							"isUint32Array(v)",
							"isWeakMap(v)",
							"isWeakSet(v)",
							"isDataView(v)",
							"isBooleanObject(v)",
							"isAsyncFunction(v)",
							"isGeneratorFunction(v)",
							"isAsyncGeneratorFunction(v)",
							"isNumberObject(v)",
							"isBigIntObject(v)",
							"isSymbolObject(v)",
							"isNativeError(v)",
							"isMapIterator(v)",
							"isSetIterator(v)",
							"isStringObject(v)",
							"isArrayBufferView(v)",
							"isArgumentsObject(v)",
							"isBoxedPrimitive(v)",
							"ctor =>",
							"isGeneratorObject(v)",
							"isTypedArray(v)",
							"isModuleNamespaceObject(v)",
							"isConstructor(v)",
							"isIterable(v)",
							"isAsyncIterable(v)",
							"isIterator(v)",
							"isArrayLike(v)",
							" function hasBuiltIn(o, m)",
							" function format(...args)",
							" function formatWithOptions(opts, ...args)",
							"function formatWithOptionsInternal(o, v)",
							" function assert(actual, expected, message)",
							" function setInterval(callback, ms)",
							" function start()",
							"() =>",
							" function clearInterval(id)",
							" function inherits(ctor, superCtor)",
							"ctor",
							"ctor",
							"superCtor",
							" function memoize(fn, cache = {})",
							" function Memoize(n, ...rest)",
							" function getset(target, ...args)",
							"GetSet = (...args) =>",
							"key =>",
							" (key, value) =>",
							"key =>",
							" (key, value) =>",
							"() =>",
							" value =>",
							" function modifier(...args)",
							" fn =>",
							" newValue =>",
							" function getter(target, ...args)",
							" () =>",
							"ret = key =>",
							"ret = key =>",
							"ret = () =>",
							" function setter(target, ...args)",
							" value =>",
							"ret = (key, value) =>",
							"ret = (key, value) =>",
							"ret = value =>",
							" function gettersetter(obj, ...optional)",
							" (...v) =>",
							"fn = (...optional) =>",
							"fn = (...optional) =>",
							"fn = (...optional) =>",
							"fn = (...optional) =>",
							" (...v) =>",
							" function hasGetSet(obj)",
							"m =>",
							" function getSetArgument(get, set)",
							" (...args) =>",
							" function wrapGetSet(getter, setter, ...args)",
							" prop =>",
							" (prop, value) =>",
							" function weakGetSet(...args)",
							" wref =>",
							" value =>",
							" function addremovehas(target, ...args)",
							"n =>",
							"el =>",
							" el =>",
							" el =>",
							" el =>",
							" el =>",
							"has = el =>",
							" function lookupObject(getset, instance = {}, handlers = {})",
							"get(target, prop)",
							"set(target, prop, value)",
							" function mapObject(target)",
							"set: (key, value) =>",
							"get: key =>",
							" function once(fn, thisArg, memoFn)",
							" function(...args)",
							" function waitFor(ms)",
							"resolve =>",
							" function define(obj, ...args)",
							" function keys(obj, maxDepthOrPred = 1)",
							"maxDepthOrPred = (obj, currentDepth) =>",
							" function properties(obj, options = { enumerable: true })",
							" fn =>",
							" fn =>",
							" function weakAssign(obj, ...args)",
							" function getPrototypeChain(obj, limit = -1, start = 0)",
							" function getConstructorChain(obj, ...range)",
							" function hasPrototype(obj, proto)",
							" function filter(seq, pred, thisArg)",
							"pred = (el, i) =>",
							" function filterKeys(r, needles, keep = true)",
							"pred = key =>",
							"(obj, key) =>",
							" (f, arr = [], length = f.length) =>",
							" (...args) =>",
							"a =>",
							"generate = (fn, add) =>",
							"add = (item, gen) =>",
							" function(...args)",
							" function(...args)",
							" function* split(buf, ...points)",
							"splitAt = (b, pos, len) =>",
							"unique = (...args) =>",
							"(arr, cmp) =>",
							" (el, i, arr) =>",
							"item =>",
							" (el, i, arr) =>",
							"function* unique(seq)",
							"getFunctionArguments = fn =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" (red, green, blue) =>",
							"function getAnsiStyles()",
							"value: (red, green, blue) =>",
							"c =>",
							"value: hex =>",
							"character =>",
							"value: hex =>",
							"value: code =>",
							"value: (red, green, blue) =>",
							"value: hex =>",
							" function randInt(...args)",
							" function randFloat(min, max, rng = Math.random)",
							" function randStr(n, set = '_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', rng = Math.random)",
							" function toBigInt(arg)",
							" function lazyProperty(obj, name, getter, opts = {})",
							"async function()",
							" function()",
							"v =>",
							" function replaceProperty(value)",
							" function lazyProperties(obj, gettersObj, opts = {})",
							" function observeProperties(target = {}, obj, fn = (prop, value) => {}, opts = {})",
							"get: () =>",
							"set: value =>",
							" function getOpt(options = {}, args)",
							"findOpt = arg =>",
							"([optname, option]) =>",
							"opt =>",
							"(acc, arg) =>",
							" function toUnixTime(dateObj, utc = false)",
							" function unixTime(utc = false)",
							" function fromUnixTime(epoch, utc = false)",
							" function range(...args)",
							" (v, k) =>",
							"n =>",
							" function chunkArray(arr, size)",
							"fn = (a, v, i) =>",
							" function camelize(str, delim = '')",
							" (match, p1, p2, offset) =>",
							" function decamelize(str, delim = '-')",
							" function shorten(str, max = 40, suffix = '...')",
							" function arraysInCommon(a)",
							"(itm, indx) =>",
							"arr =>",
							" function arrayFacade(proto, itemFn = (container, i) => container.",
							"(i))",
							"*keys()",
							"*entries()",
							"*values()",
							"forEach(callback, thisArg)",
							"reduce(callback, accu, thisArg)",
							" function mod(a, b)",
							"b : n =>",
							" function pushUnique(arr, ...args)",
							" function intersect(a, b)",
							" function symmetricDifference(a, b)",
							" function* partition(a, size)",
							" function difference(a, b, includes)",
							"x =>",
							"x =>",
							"x =>",
							"x =>",
							" function intersection(a, b)",
							"x =>",
							" function union(a, b, equality)",
							" function push(obj, ...values)",
							"v =>",
							" function repeater(n, what)",
							"n = () =>",
							"function* ()",
							"function* ()",
							" function repeat(n, what)",
							" function functionName(fn)",
							" function className(obj)",
							"isArrowFunction = fn =>",
							" function immutableClass(orig, ...proto)",
							"p =>",
							" ctor =>",
							"ctor",
							"imm = base =>",
							"constructor(...args)",
							" function instrument( fn, log = (duration, name, args, ret) => console.log( `function '${name}'` + (ret !== undefined ? ` {= ${escape(ret + '').",
							"(0, 100) + '...'}}` : '') + ` timing: ${duration.",
							"(3)}ms` ), logInterval = 0 //1000 )",
							"async (args, ret) =>",
							" (args, ret) =>",
							"async function(...args)",
							" function(...args)",
							"newMap = () =>",
							"(...args) =>",
							"get(path)",
							"set(path, value)",
							"catchable = function Catchable(self)",
							"catchable",
							"function ()",
							"then(fn)",
							"(...args) =>",
							"(...args) =>",
							" function isNumeric(value)",
							"v =>",
							" function isIndex(value)",
							" function numericIndex(value)",
							" function histogram(arr, out = ",
							"())",
							"incr = key =>",
							" function propertyLookupHandlers(handler = key => null)",
							"get(target, key, receiver)",
							".ownKeys = function(target)",
							" function propertyLookup(...args)",
							"handler = key =>",
							"function (...args)",
							" function abbreviate(str, max = 40, suffix = '...')"
						]
					},
					"AQAAAAAAAAAAAAAA2RYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					192,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AwAAAAAAAAAAAAAAAAAAAAAAAADZFgAAICBzbGljZUZuID0geCA9PgpBcnJheUJ1ZmZlcihzdGFydCwgZW5kKQpTaGFyZWRBcnJheUJ1ZmZlcgpVaW50OENsYW1wZWRBcnJheQpJbnQ4QXJyYXkKVWludDhBcnJheQpJbnQxNkFycmF5ClVpbnQxNkFycmF5CkludDMyQXJyYXkKVWludDMyQXJyYXkKQmlnSW50NjRBcnJheQpCaWdVaW50NjRBcnJheQpGbG9hdDMyQXJyYXkKRmxvYXQ2NEFycmF5CiAgc2xpY2UgPSAoeCwgcywgZSkgPT4KICBzdHJpbmdpZnkgPSB2ID0+CiAgZm9ybWF0TnVtYmVyID0gbiA9PgogIGlzTmF0aXZlID0gZm4gPT4KICB1dGlsKCkKICB1dGlsCkFzeW5jRnVuY3Rpb24gPSBmdW5jdGlvbiB4KCkKR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbiooKQpBc3luY0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24qKCkKICBpc0FueUFycmF5QnVmZmVyKHYpCiAgaXNBcnJheUJ1ZmZlcih2KQogIGlzQmlnSW50NjRBcnJheSh2KQogIGlzQmlnVWludDY0QXJyYXkodikKICBpc0RhdGUodikKICBpc0Zsb2F0MzJBcnJheSh2KQogIGlzRmxvYXQ2NEFycmF5KHYpCiAgaXNJbnQ4QXJyYXkodikKICBpc0ludDE2QXJyYXkodikKICBpc0ludDMyQXJyYXkodikKICBpc01hcCh2KQogIGlzUHJvbWlzZSh2KQogIGlzUHJveHkodikKICBpc1JlZ0V4cCh2KQogIGlzU2V0KHYpCiAgaXNTaGFyZWRBcnJheUJ1ZmZlcih2KQogIGlzVWludDhBcnJheSh2KQogIGlzVWludDhDbGFtcGVkQXJyYXkodikKICBpc1VpbnQxNkFycmF5KHYpCiAgaXNVaW50MzJBcnJheSh2KQogIGlzV2Vha01hcCh2KQogIGlzV2Vha1NldCh2KQogIGlzRGF0YVZpZXcodikKICBpc0Jvb2xlYW5PYmplY3QodikKICBpc0FzeW5jRnVuY3Rpb24odikKICBpc0dlbmVyYXRvckZ1bmN0aW9uKHYpCiAgaXNBc3luY0dlbmVyYXRvckZ1bmN0aW9uKHYpCiAgaXNOdW1iZXJPYmplY3QodikKICBpc0JpZ0ludE9iamVjdCh2KQogIGlzU3ltYm9sT2JqZWN0KHYpCiAgaXNOYXRpdmVFcnJvcih2KQogIGlzTWFwSXRlcmF0b3IodikKICBpc1NldEl0ZXJhdG9yKHYpCiAgaXNTdHJpbmdPYmplY3QodikKICBpc0FycmF5QnVmZmVyVmlldyh2KQogIGlzQXJndW1lbnRzT2JqZWN0KHYpCiAgaXNCb3hlZFByaW1pdGl2ZSh2KQogIGN0b3IgPT4KICBpc0dlbmVyYXRvck9iamVjdCh2KQogIGlzVHlwZWRBcnJheSh2KQogIGlzTW9kdWxlTmFtZXNwYWNlT2JqZWN0KHYpCiAgaXNDb25zdHJ1Y3Rvcih2KQogIGlzSXRlcmFibGUodikKICBpc0FzeW5jSXRlcmFibGUodikKICBpc0l0ZXJhdG9yKHYpCiAgaXNBcnJheUxpa2UodikKICBoYXNCdWlsdEluKG8sIG0pCiAgZm9ybWF0KC4uLmFyZ3MpCiAgZm9ybWF0V2l0aE9wdGlvbnMob3B0cywgLi4uYXJncykKICBmb3JtYXRXaXRoT3B0aW9uc0ludGVybmFsKG8sIHYpCiAgYXNzZXJ0KGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpCiAgc2V0SW50ZXJ2YWwoY2FsbGJhY2ssIG1zKQogIHN0YXJ0KCkKKCkgPT4KICBjbGVhckludGVydmFsKGlkKQogIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3RvcikKICBjdG9yCiAgY3RvcgogIHN1cGVyQ3RvcgogIG1lbW9pemUoZm4sIGNhY2hlID0ge30pCk1lbW9pemUobiwgLi4ucmVzdCkKICBnZXRzZXQodGFyZ2V0LCAuLi5hcmdzKQpHZXRTZXQgPSAoLi4uYXJncykgPT4KICBrZXkgPT4KICAoa2V5LCB2YWx1ZSkgPT4KICBrZXkgPT4KICAoa2V5LCB2YWx1ZSkgPT4KKCkgPT4KICB2YWx1ZSA9PgogIG1vZGlmaWVyKC4uLmFyZ3MpCiAgZm4gPT4KICBuZXdWYWx1ZSA9PgogIGdldHRlcih0YXJnZXQsIC4uLmFyZ3MpCiAgKCkgPT4KICByZXQgPSBrZXkgPT4KICByZXQgPSBrZXkgPT4KICByZXQgPSAoKSA9PgogIHNldHRlcih0YXJnZXQsIC4uLmFyZ3MpCiAgdmFsdWUgPT4KICByZXQgPSAoa2V5LCB2YWx1ZSkgPT4KICByZXQgPSAoa2V5LCB2YWx1ZSkgPT4KICByZXQgPSB2YWx1ZSA9PgogIGdldHRlcnNldHRlcihvYmosIC4uLm9wdGlvbmFsKQogICguLi52KSA9PgogIGZuID0gKC4uLm9wdGlvbmFsKSA9PgogIGZuID0gKC4uLm9wdGlvbmFsKSA9PgogIGZuID0gKC4uLm9wdGlvbmFsKSA9PgogIGZuID0gKC4uLm9wdGlvbmFsKSA9PgogICguLi52KSA9PgogIGhhc0dldFNldChvYmopCiAgbSA9PgogIGdldFNldEFyZ3VtZW50KGdldCwgc2V0KQogICguLi5hcmdzKSA9PgogIHdyYXBHZXRTZXQoZ2V0dGVyLCBzZXR0ZXIsIC4uLmFyZ3MpCiAgcHJvcCA9PgogIChwcm9wLCB2YWx1ZSkgPT4KICB3ZWFrR2V0U2V0KC4uLmFyZ3MpCiAgd3JlZiA9PgogIHZhbHVlID0+CiAgYWRkcmVtb3ZlaGFzKHRhcmdldCwgLi4uYXJncykKICBuID0+CiAgZWwgPT4KICBlbCA9PgogIGVsID0+CiAgZWwgPT4KICBlbCA9PgogIGhhcyA9IGVsID0+CiAgbG9va3VwT2JqZWN0KGdldHNldCwgaW5zdGFuY2UgPSB7fSwgaGFuZGxlcnMgPSB7fSkKICBnZXQodGFyZ2V0LCBwcm9wKQogIHNldCh0YXJnZXQsIHByb3AsIHZhbHVlKQogIG1hcE9iamVjdCh0YXJnZXQpCiAgc2V0OiAoa2V5LCB2YWx1ZSkgPT4KICBnZXQ6IGtleSA9PgogIG9uY2UoZm4sIHRoaXNBcmcsIG1lbW9GbikKICBmdW5jdGlvbiguLi5hcmdzKQogIHdhaXRGb3IobXMpCiAgcmVzb2x2ZSA9PgogIGRlZmluZShvYmosIC4uLmFyZ3MpCiAga2V5cyhvYmosIG1heERlcHRoT3JQcmVkID0gMSkKICBtYXhEZXB0aE9yUHJlZCA9IChvYmosIGN1cnJlbnREZXB0aCkgPT4KICBwcm9wZXJ0aWVzKG9iaiwgb3B0aW9ucyA9IHsgZW51bWVyYWJsZTogdHJ1ZSB9KQogIGZuID0+CiAgZm4gPT4KICB3ZWFrQXNzaWduKG9iaiwgLi4uYXJncykKICBnZXRQcm90b3R5cGVDaGFpbihvYmosIGxpbWl0ID0gLTEsIHN0YXJ0ID0gMCkKICBnZXRDb25zdHJ1Y3RvckNoYWluKG9iaiwgLi4ucmFuZ2UpCiAgaGFzUHJvdG90eXBlKG9iaiwgcHJvdG8pCiAgZmlsdGVyKHNlcSwgcHJlZCwgdGhpc0FyZykKICBwcmVkID0gKGVsLCBpKSA9PgogIGZpbHRlcktleXMociwgbmVlZGxlcywga2VlcCA9IHRydWUpCiAgcHJlZCA9IGtleSA9Pgoob2JqLCBrZXkpID0+CiAgKGYsIGFyciA9IFtdLCBsZW5ndGggPSBmLmxlbmd0aCkgPT4KICAoLi4uYXJncykgPT4KICBhID0+CiAgZ2VuZXJhdGUgPSAoZm4sIGFkZCkgPT4KICBhZGQgPSAoaXRlbSwgZ2VuKSA9PgogIGZ1bmN0aW9uKC4uLmFyZ3MpCiAgZnVuY3Rpb24oLi4uYXJncykKICBzcGxpdChidWYsIC4uLnBvaW50cykKICBzcGxpdEF0ID0gKGIsIHBvcywgbGVuKSA9PgogIHVuaXF1ZSA9ICguLi5hcmdzKSA9PgooYXJyLCBjbXApID0+CiAgKGVsLCBpLCBhcnIpID0+CiAgaXRlbSA9PgogIChlbCwgaSwgYXJyKSA9PgogIHVuaXF1ZShzZXEpCiAgZ2V0RnVuY3Rpb25Bcmd1bWVudHMgPSBmbiA9PgogIChvZmZzZXQgPSAwKSA9PgogIGNvZGUgPT4KICAob2Zmc2V0ID0gMCkgPT4KICBjb2RlID0+CiAgKG9mZnNldCA9IDApID0+CiAgKHJlZCwgZ3JlZW4sIGJsdWUpID0+CiAgZ2V0QW5zaVN0eWxlcygpCiAgdmFsdWU6IChyZWQsIGdyZWVuLCBibHVlKSA9PgogIGMgPT4KICB2YWx1ZTogaGV4ID0+CiAgY2hhcmFjdGVyID0+CiAgdmFsdWU6IGhleCA9PgogIHZhbHVlOiBjb2RlID0+CiAgdmFsdWU6IChyZWQsIGdyZWVuLCBibHVlKSA9PgogIHZhbHVlOiBoZXggPT4KICByYW5kSW50KC4uLmFyZ3MpCiAgcmFuZEZsb2F0KG1pbiwgbWF4LCBybmcgPSBNYXRoLnJhbmRvbSkKICByYW5kU3RyKG4sIHNldCA9ICdfMDEyMzQ1Njc4OUFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonLCBybmcgPSBNYXRoLnJhbmRvbSkKICB0b0JpZ0ludChhcmcpCiAgbGF6eVByb3BlcnR5KG9iaiwgbmFtZSwgZ2V0dGVyLCBvcHRzID0ge30pCiAgZnVuY3Rpb24oKQogIGZ1bmN0aW9uKCkKICB2ID0+CiAgcmVwbGFjZVByb3BlcnR5KHZhbHVlKQogIGxhenlQcm9wZXJ0aWVzKG9iaiwgZ2V0dGVyc09iaiwgb3B0cyA9IHt9KQogIG9ic2VydmVQcm9wZXJ0aWVzKHRhcmdldCA9IHt9LCBvYmosIGZuID0gKHByb3AsIHZhbHVlKSA9PiB7fSwgb3B0cyA9IHt9KQogIGdldDogKCkgPT4KICBzZXQ6IHZhbHVlID0+CiAgZ2V0T3B0KG9wdGlvbnMgPSB7fSwgYXJncykKICBmaW5kT3B0ID0gYXJnID0+Cihbb3B0bmFtZSwgb3B0aW9uXSkgPT4KICBvcHQgPT4KKGFjYywgYXJnKSA9PgogIHRvVW5peFRpbWUoZGF0ZU9iaiwgdXRjID0gZmFsc2UpCiAgdW5peFRpbWUodXRjID0gZmFsc2UpCiAgZnJvbVVuaXhUaW1lKGVwb2NoLCB1dGMgPSBmYWxzZSkKICByYW5nZSguLi5hcmdzKQogICh2LCBrKSA9PgogIG4gPT4KICBjaHVua0FycmF5KGFyciwgc2l6ZSkKICBmbiA9IChhLCB2LCBpKSA9PgogIGNhbWVsaXplKHN0ciwgZGVsaW0gPSAnJykKICAobWF0Y2gsIHAxLCBwMiwgb2Zmc2V0KSA9PgogIGRlY2FtZWxpemUoc3RyLCBkZWxpbSA9ICctJykKICBzaG9ydGVuKHN0ciwgbWF4ID0gNDAsIHN1ZmZpeCA9ICcuLi4nKQogIGFycmF5c0luQ29tbW9uKGEpCihpdG0sIGluZHgpID0+CiAgYXJyID0+CiAgYXJyYXlGYWNhZGUocHJvdG8sIGl0ZW1GbiA9IChjb250YWluZXIsIGkpID0+IGNvbnRhaW5lci4KKGkpKQoqa2V5cygpCiplbnRyaWVzKCkKKnZhbHVlcygpCiAgZm9yRWFjaChjYWxsYmFjaywgdGhpc0FyZykKICByZWR1Y2UoY2FsbGJhY2ssIGFjY3UsIHRoaXNBcmcpCiAgbW9kKGEsIGIpCiAgYiA6IG4gPT4KICBwdXNoVW5pcXVlKGFyciwgLi4uYXJncykKICBpbnRlcnNlY3QoYSwgYikKICBzeW1tZXRyaWNEaWZmZXJlbmNlKGEsIGIpCiAgcGFydGl0aW9uKGEsIHNpemUpCiAgZGlmZmVyZW5jZShhLCBiLCBpbmNsdWRlcykKICB4ID0+CiAgeCA9PgogIHggPT4KICB4ID0+CiAgaW50ZXJzZWN0aW9uKGEsIGIpCiAgeCA9PgogIHVuaW9uKGEsIGIsIGVxdWFsaXR5KQogIHB1c2gob2JqLCAuLi52YWx1ZXMpCiAgdiA9PgogIHJlcGVhdGVyKG4sIHdoYXQpCiAgbiA9ICgpID0+CigpCigpCiAgcmVwZWF0KG4sIHdoYXQpCiAgZnVuY3Rpb25OYW1lKGZuKQogIGNsYXNzTmFtZShvYmopCiAgaXNBcnJvd0Z1bmN0aW9uID0gZm4gPT4KICBpbW11dGFibGVDbGFzcyhvcmlnLCAuLi5wcm90bykKICBwID0+CiAgY3RvciA9PgogIGN0b3IKICBpbW0gPSBiYXNlID0+CiAgY29uc3RydWN0b3IoLi4uYXJncykKICBpbnN0cnVtZW50KCBmbiwgbG9nID0gKGR1cmF0aW9uLCBuYW1lLCBhcmdzLCByZXQpID0+IGNvbnNvbGUubG9nKCBgZnVuY3Rpb24gJyR7bmFtZX0nYCArIChyZXQgIT09IHVuZGVmaW5lZCA/IGAgez0gJHtlc2NhcGUocmV0ICsgJycpLgooMCwgMTAwKSArICcuLi4nfX1gIDogJycpICsgYCB0aW1pbmc6ICR7ZHVyYXRpb24uCigzKX1tc2AgKSwgbG9nSW50ZXJ2YWwgPSAwIC8vMTAwMCApCihhcmdzLCByZXQpID0+CiAgKGFyZ3MsIHJldCkgPT4KICBmdW5jdGlvbiguLi5hcmdzKQogIGZ1bmN0aW9uKC4uLmFyZ3MpCiAgbmV3TWFwID0gKCkgPT4KKC4uLmFyZ3MpID0+CiAgZ2V0KHBhdGgpCiAgc2V0KHBhdGgsIHZhbHVlKQogIGNhdGNoYWJsZSA9IGZ1bmN0aW9uIENhdGNoYWJsZShzZWxmKQogIGNhdGNoYWJsZQooKQogIHRoZW4oZm4pCiguLi5hcmdzKSA9PgooLi4uYXJncykgPT4KICBpc051bWVyaWModmFsdWUpCiAgdiA9PgogIGlzSW5kZXgodmFsdWUpCiAgbnVtZXJpY0luZGV4KHZhbHVlKQogIGhpc3RvZ3JhbShhcnIsIG91dCA9IAooKSkKICBpbmNyID0ga2V5ID0+CiAgcHJvcGVydHlMb29rdXBIYW5kbGVycyhoYW5kbGVyID0ga2V5ID0+IG51bGwpCiAgZ2V0KHRhcmdldCwga2V5LCByZWNlaXZlcikKICAub3duS2V5cyA9IGZ1bmN0aW9uKHRhcmdldCkKICBwcm9wZXJ0eUxvb2t1cCguLi5hcmdzKQogIGhhbmRsZXIgPSBrZXkgPT4KKC4uLmFyZ3MpCiAgYWJicmV2aWF0ZShzdHIsIG1heCA9IDQwLCBzdWZmaXggPSAnLi4uJykAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					194,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					195,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
						"symkeys":
						[
							[
								833,
								847
							],
							[
								927,
								950
							],
							[
								1088,
								1105
							],
							[
								1146,
								1163
							],
							[
								1196,
								1205
							],
							[
								1239,
								1249
							],
							[
								1283,
								1293
							],
							[
								1328,
								1339
							],
							[
								1373,
								1383
							],
							[
								1418,
								1429
							],
							[
								1466,
								1479
							],
							[
								1517,
								1531
							],
							[
								1567,
								1579
							],
							[
								1615,
								1627
							],
							[
								1680,
								1700
							],
							[
								1962,
								1978
							],
							[
								2032,
								2051
							],
							[
								2086,
								2102
							],
							[
								2144,
								2159
							],
							[
								2180,
								2184
							],
							[
								2222,
								2256
							],
							[
								2279,
								2311
							],
							[
								2334,
								2377
							],
							[
								4206,
								4225
							],
							[
								4323,
								4339
							],
							[
								4401,
								4419
							],
							[
								4483,
								4502
							],
							[
								4567,
								4576
							],
							[
								4631,
								4648
							],
							[
								4711,
								4728
							],
							[
								4791,
								4805
							],
							[
								4865,
								4880
							],
							[
								4941,
								4956
							],
							[
								5017,
								5025
							],
							[
								5079,
								5091
							],
							[
								5149,
								5159
							],
							[
								5215,
								5226
							],
							[
								5283,
								5291
							],
							[
								5345,
								5367
							],
							[
								5435,
								5450
							],
							[
								5511,
								5533
							],
							[
								5601,
								5617
							],
							[
								5679,
								5695
							],
							[
								5757,
								5769
							],
							[
								5827,
								5839
							],
							[
								5897,
								5910
							],
							[
								5969,
								5987
							],
							[
								6045,
								6063
							],
							[
								6127,
								6149
							],
							[
								6217,
								6244
							],
							[
								6317,
								6334
							],
							[
								6391,
								6408
							],
							[
								6465,
								6482
							],
							[
								6529,
								6545
							],
							[
								6628,
								6644
							],
							[
								6716,
								6732
							],
							[
								6804,
								6821
							],
							[
								6878,
								6898
							],
							[
								6957,
								6977
							],
							[
								7136,
								7155
							],
							[
								7231,
								7238
							],
							[
								7267,
								7287
							],
							[
								7357,
								7372
							],
							[
								7433,
								7459
							],
							[
								7530,
								7546
							],
							[
								7602,
								7615
							],
							[
								7692,
								7710
							],
							[
								7792,
								7805
							],
							[
								7870,
								7884
							],
							[
								7986,
								8012
							],
							[
								8058,
								8083
							],
							[
								8168,
								8210
							],
							[
								8344,
								8384
							],
							[
								11313,
								11356
							],
							[
								11773,
								11808
							],
							[
								11964,
								11982
							],
							[
								12012,
								12017
							],
							[
								12107,
								12134
							],
							[
								12253,
								12288
							],
							[
								12349,
								12353
							],
							[
								12369,
								12373
							],
							[
								12400,
								12409
							],
							[
								12572,
								12605
							],
							[
								12734,
								12766
							],
							[
								12930,
								12963
							],
							[
								13159,
								13180
							],
							[
								13258,
								13264
							],
							[
								13281,
								13297
							],
							[
								13443,
								13449
							],
							[
								13462,
								13478
							],
							[
								13651,
								13656
							],
							[
								13670,
								13679
							],
							[
								13729,
								13756
							],
							[
								13801,
								13807
							],
							[
								13852,
								13864
							],
							[
								13894,
								13927
							],
							[
								13985,
								13991
							],
							[
								14106,
								14118
							],
							[
								14172,
								14184
							],
							[
								14332,
								14343
							],
							[
								14385,
								14418
							],
							[
								14476,
								14485
							],
							[
								14607,
								14628
							],
							[
								14689,
								14710
							],
							[
								14868,
								14882
							],
							[
								15184,
								15224
							],
							[
								15291,
								15301
							],
							[
								15459,
								15480
							],
							[
								15614,
								15635
							],
							[
								15667,
								15688
							],
							[
								15791,
								15812
							],
							[
								16087,
								16097
							],
							[
								16143,
								16167
							],
							[
								16217,
								16221
							],
							[
								16261,
								16295
							],
							[
								16306,
								16319
							],
							[
								16378,
								16423
							],
							[
								16488,
								16499
							],
							[
								16519,
								16539
							],
							[
								16579,
								16608
							],
							[
								16632,
								16643
							],
							[
								16658,
								16670
							],
							[
								16717,
								16756
							],
							[
								16857,
								16861
							],
							[
								16900,
								16905
							],
							[
								16931,
								16937
							],
							[
								16966,
								16972
							],
							[
								17065,
								17078
							],
							[
								17106,
								17119
							],
							[
								17245,
								17256
							],
							[
								17336,
								17396
							],
							[
								17466,
								17483
							],
							[
								17544,
								17568
							],
							[
								17643,
								17670
							],
							[
								17900,
								17920
							],
							[
								17950,
								17961
							],
							[
								18060,
								18095
							],
							[
								18135,
								18153
							],
							[
								18340,
								18361
							],
							[
								18385,
								18395
							],
							[
								18434,
								18464
							],
							[
								19012,
								19051
							],
							[
								19160,
								19199
							],
							[
								19494,
								19551
							],
							[
								19645,
								19651
							],
							[
								19665,
								19671
							],
							[
								19984,
								20018
							],
							[
								20325,
								20380
							],
							[
								20656,
								20700
							],
							[
								20867,
								20901
							],
							[
								20967,
								21003
							],
							[
								21078,
								21095
							],
							[
								21239,
								21284
							],
							[
								21427,
								21440
							],
							[
								21538,
								21551
							],
							[
								21633,
								21670
							],
							[
								21671,
								21685
							],
							[
								21691,
								21695
							],
							[
								21777,
								21800
							],
							[
								21880,
								21900
							],
							[
								21991,
								22009
							],
							[
								22152,
								22170
							],
							[
								22243,
								22275
							],
							[
								22303,
								22329
							],
							[
								22654,
								22675
							],
							[
								22719,
								22732
							],
							[
								22795,
								22811
							],
							[
								22826,
								22833
							],
							[
								22865,
								22881
							],
							[
								22933,
								22954
							],
							[
								23123,
								23151
							],
							[
								23370,
								23387
							],
							[
								23388,
								23397
							],
							[
								23449,
								23466
							],
							[
								23467,
								23476
							],
							[
								23536,
								23553
							],
							[
								23554,
								23577
							],
							[
								23633,
								23657
							],
							[
								26284,
								26312
							],
							[
								26743,
								26747
							],
							[
								26875,
								26888
							],
							[
								27204,
								27216
							],
							[
								27479,
								27492
							],
							[
								27597,
								27611
							],
							[
								28504,
								28532
							],
							[
								28648,
								28661
							],
							[
								28773,
								28799
							],
							[
								28989,
								29037
							],
							[
								29085,
								29197
							],
							[
								29302,
								29325
							],
							[
								29464,
								29516
							],
							[
								29610,
								29626
							],
							[
								29710,
								29721
							],
							[
								29834,
								29838
							],
							[
								30117,
								30150
							],
							[
								30264,
								30316
							],
							[
								30490,
								30572
							],
							[
								30732,
								30742
							],
							[
								30760,
								30773
							],
							[
								30959,
								30995
							],
							[
								31152,
								31168
							],
							[
								31186,
								31208
							],
							[
								31321,
								31327
							],
							[
								31431,
								31444
							],
							[
								33099,
								33141
							],
							[
								33336,
								33367
							],
							[
								33417,
								33459
							],
							[
								33579,
								33603
							],
							[
								33823,
								33833
							],
							[
								33886,
								33890
							],
							[
								33929,
								33960
							],
							[
								33971,
								33988
							],
							[
								34129,
								34164
							],
							[
								34212,
								34239
							],
							[
								34330,
								34368
							],
							[
								34577,
								34625
							],
							[
								35213,
								35240
							],
							[
								35443,
								35457
							],
							[
								35506,
								35512
							],
							[
								35553,
								35619
							],
							[
								35621,
								35625
							],
							[
								35783,
								35790
							],
							[
								35882,
								35892
							],
							[
								36003,
								36012
							],
							[
								36118,
								36144
							],
							[
								36277,
								36308
							],
							[
								36483,
								36502
							],
							[
								36553,
								36561
							],
							[
								36590,
								36624
							],
							[
								36768,
								36793
							],
							[
								36891,
								36926
							],
							[
								36979,
								37008
							],
							[
								37090,
								37126
							],
							[
								37255,
								37259
							],
							[
								37286,
								37290
							],
							[
								37329,
								37333
							],
							[
								37361,
								37365
							],
							[
								37394,
								37422
							],
							[
								37552,
								37556
							],
							[
								37613,
								37644
							],
							[
								37762,
								37792
							],
							[
								37928,
								37932
							],
							[
								38216,
								38243
							],
							[
								38296,
								38305
							],
							[
								38366,
								38378
							],
							[
								38520,
								38532
							],
							[
								38659,
								38684
							],
							[
								38724,
								38750
							],
							[
								38984,
								39008
							],
							[
								39201,
								39224
							],
							[
								39325,
								39365
							],
							[
								39514,
								39518
							],
							[
								39551,
								39559
							],
							[
								39588,
								39592
							],
							[
								39967,
								39980
							],
							[
								40033,
								40053
							],
							[
								40409,
								40575
							],
							[
								40584,
								40641
							],
							[
								40648,
								40689
							],
							[
								40956,
								40976
							],
							[
								41178,
								41193
							],
							[
								41474,
								41497
							],
							[
								41702,
								41720
							],
							[
								41933,
								41947
							],
							[
								42008,
								42020
							],
							[
								42118,
								42127
							],
							[
								42403,
								42419
							],
							[
								42854,
								42890
							],
							[
								42985,
								42994
							],
							[
								43170,
								43181
							],
							[
								43192,
								43200
							],
							[
								43249,
								43261
							],
							[
								43506,
								43518
							],
							[
								43699,
								43725
							],
							[
								43744,
								43748
							],
							[
								43835,
								43859
							],
							[
								43937,
								43966
							],
							[
								44020,
								44051
							],
							[
								44058,
								44061
							],
							[
								44105,
								44118
							],
							[
								44218,
								44273
							],
							[
								44299,
								44325
							],
							[
								44508,
								44535
							],
							[
								44624,
								44657
							],
							[
								44677,
								44693
							],
							[
								44800,
								44818
							],
							[
								45024,
								45075
							]
						],
						"symlist":
						[
							"sliceFn = x =>",
							"ArrayBuffer(start, end)",
							"SharedArrayBuffer",
							"Uint8ClampedArray",
							"Int8Array",
							"Uint8Array",
							"Int16Array",
							"Uint16Array",
							"Int32Array",
							"Uint32Array",
							"BigInt64Array",
							"BigUint64Array",
							"Float32Array",
							"Float64Array",
							"slice = (x, s, e) =>",
							"stringify = v =>",
							"formatNumber = n =>",
							"isNative = fn =>",
							"function util()",
							"util",
							"AsyncFunction = async function x()",
							"GeneratorFunction = function* ()",
							"AsyncGeneratorFunction = async function* ()",
							"isAnyArrayBuffer(v)",
							"isArrayBuffer(v)",
							"isBigInt64Array(v)",
							"isBigUint64Array(v)",
							"isDate(v)",
							"isFloat32Array(v)",
							"isFloat64Array(v)",
							"isInt8Array(v)",
							"isInt16Array(v)",
							"isInt32Array(v)",
							"isMap(v)",
							"isPromise(v)",
							"isProxy(v)",
							"isRegExp(v)",
							"isSet(v)",
							"isSharedArrayBuffer(v)",
							"isUint8Array(v)",
							"isUint8ClampedArray(v)",
							"isUint16Array(v)",
							"isUint32Array(v)",
							"isWeakMap(v)",
							"isWeakSet(v)",
							"isDataView(v)",
							"isBooleanObject(v)",
							"isAsyncFunction(v)",
							"isGeneratorFunction(v)",
							"isAsyncGeneratorFunction(v)",
							"isNumberObject(v)",
							"isBigIntObject(v)",
							"isSymbolObject(v)",
							"isNativeError(v)",
							"isMapIterator(v)",
							"isSetIterator(v)",
							"isStringObject(v)",
							"isArrayBufferView(v)",
							"isArgumentsObject(v)",
							"isBoxedPrimitive(v)",
							"ctor =>",
							"isGeneratorObject(v)",
							"isTypedArray(v)",
							"isModuleNamespaceObject(v)",
							"isConstructor(v)",
							"isIterable(v)",
							"isAsyncIterable(v)",
							"isIterator(v)",
							"isArrayLike(v)",
							" function hasBuiltIn(o, m)",
							" function format(...args)",
							" function formatWithOptions(opts, ...args)",
							"function formatWithOptionsInternal(o, v)",
							" function assert(actual, expected, message)",
							" function setInterval(callback, ms)",
							" function start()",
							"() =>",
							" function clearInterval(id)",
							" function inherits(ctor, superCtor)",
							"ctor",
							"ctor",
							"superCtor",
							" function memoize(fn, cache = {})",
							" function Memoize(n, ...rest)",
							" function getset(target, ...args)",
							"GetSet = (...args) =>",
							"key =>",
							" (key, value) =>",
							"key =>",
							" (key, value) =>",
							"() =>",
							" value =>",
							" function modifier(...args)",
							" fn =>",
							" newValue =>",
							" function getter(target, ...args)",
							" () =>",
							"ret = key =>",
							"ret = key =>",
							"ret = () =>",
							" function setter(target, ...args)",
							" value =>",
							"ret = (key, value) =>",
							"ret = (key, value) =>",
							"ret = value =>",
							" function gettersetter(obj, ...optional)",
							" (...v) =>",
							"fn = (...optional) =>",
							"fn = (...optional) =>",
							"fn = (...optional) =>",
							"fn = (...optional) =>",
							" (...v) =>",
							" function hasGetSet(obj)",
							"m =>",
							" function getSetArgument(get, set)",
							" (...args) =>",
							" function wrapGetSet(getter, setter, ...args)",
							" prop =>",
							" (prop, value) =>",
							" function weakGetSet(...args)",
							" wref =>",
							" value =>",
							" function addremovehas(target, ...args)",
							"n =>",
							"el =>",
							" el =>",
							" el =>",
							" el =>",
							" el =>",
							"has = el =>",
							" function lookupObject(getset, instance = {}, handlers = {})",
							"get(target, prop)",
							"set(target, prop, value)",
							" function mapObject(target)",
							"set: (key, value) =>",
							"get: key =>",
							" function once(fn, thisArg, memoFn)",
							" function(...args)",
							" function waitFor(ms)",
							"resolve =>",
							" function define(obj, ...args)",
							" function keys(obj, maxDepthOrPred = 1)",
							"maxDepthOrPred = (obj, currentDepth) =>",
							" function properties(obj, options = { enumerable: true })",
							" fn =>",
							" fn =>",
							" function weakAssign(obj, ...args)",
							" function getPrototypeChain(obj, limit = -1, start = 0)",
							" function getConstructorChain(obj, ...range)",
							" function hasPrototype(obj, proto)",
							" function filter(seq, pred, thisArg)",
							"pred = (el, i) =>",
							" function filterKeys(r, needles, keep = true)",
							"pred = key =>",
							"(obj, key) =>",
							" (f, arr = [], length = f.length) =>",
							" (...args) =>",
							"a =>",
							"generate = (fn, add) =>",
							"add = (item, gen) =>",
							" function(...args)",
							" function(...args)",
							" function* split(buf, ...points)",
							"splitAt = (b, pos, len) =>",
							"unique = (...args) =>",
							"(arr, cmp) =>",
							" (el, i, arr) =>",
							"item =>",
							" (el, i, arr) =>",
							"function* unique(seq)",
							"getFunctionArguments = fn =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" (red, green, blue) =>",
							"function getAnsiStyles()",
							"value: (red, green, blue) =>",
							"c =>",
							"value: hex =>",
							"character =>",
							"value: hex =>",
							"value: code =>",
							"value: (red, green, blue) =>",
							"value: hex =>",
							" function randInt(...args)",
							" function randFloat(min, max, rng = Math.random)",
							" function randStr(n, set = '_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', rng = Math.random)",
							" function toBigInt(arg)",
							" function lazyProperty(obj, name, getter, opts = {})",
							"async function()",
							" function()",
							"v =>",
							" function replaceProperty(value)",
							" function lazyProperties(obj, gettersObj, opts = {})",
							" function observeProperties(target = {}, obj, fn = (prop, value) => {}, opts = {})",
							"get: () =>",
							"set: value =>",
							" function getOpt(options = {}, args)",
							"findOpt = arg =>",
							"([optname, option]) =>",
							"opt =>",
							"(acc, arg) =>",
							" function toUnixTime(dateObj, utc = false)",
							" function unixTime(utc = false)",
							" function fromUnixTime(epoch, utc = false)",
							" function range(...args)",
							" (v, k) =>",
							"n =>",
							" function chunkArray(arr, size)",
							"fn = (a, v, i) =>",
							" function camelize(str, delim = '')",
							" (match, p1, p2, offset) =>",
							" function decamelize(str, delim = '-')",
							" function shorten(str, max = 40, suffix = '...')",
							" function arraysInCommon(a)",
							"(itm, indx) =>",
							"arr =>",
							" function arrayFacade(proto, itemFn = (container, i) => container.",
							"(i))",
							"*keys()",
							"*entries()",
							"*values()",
							"forEach(callback, thisArg)",
							"reduce(callback, accu, thisArg)",
							" function mod(a, b)",
							"b : n =>",
							" function pushUnique(arr, ...args)",
							" function intersect(a, b)",
							" function symmetricDifference(a, b)",
							" function* partition(a, size)",
							" function difference(a, b, includes)",
							"x =>",
							"x =>",
							"x =>",
							"x =>",
							" function intersection(a, b)",
							"x =>",
							" function union(a, b, equality)",
							" function push(obj, ...values)",
							"v =>",
							" function repeater(n, what)",
							"n = () =>",
							"function* ()",
							"function* ()",
							" function repeat(n, what)",
							" function functionName(fn)",
							" function className(obj)",
							"isArrowFunction = fn =>",
							" function immutableClass(orig, ...proto)",
							"p =>",
							" ctor =>",
							"ctor",
							"imm = base =>",
							"constructor(...args)",
							" function instrument( fn, log = (duration, name, args, ret) => console.log( `function '${name}'` + (ret !== undefined ? ` {= ${escape(ret + '').",
							"(0, 100) + '...'}}` : '') + ` timing: ${duration.",
							"(3)}ms` ), logInterval = 0 //1000 )",
							"async (args, ret) =>",
							" (args, ret) =>",
							"async function(...args)",
							" function(...args)",
							"newMap = () =>",
							"(...args) =>",
							"get(path)",
							"set(path, value)",
							"catchable = function Catchable(self)",
							"catchable",
							"function ()",
							"then(fn)",
							"(...args) =>",
							"(...args) =>",
							" function isNumeric(value)",
							"v =>",
							" function isIndex(value)",
							" function numericIndex(value)",
							" function histogram(arr, out = ",
							"())",
							"incr = key =>",
							" function propertyLookupHandlers(handler = key => null)",
							"get(target, key, receiver)",
							".ownKeys = function(target)",
							" function propertyLookup(...args)",
							"handler = key =>",
							"function (...args)",
							" function abbreviate(str, max = 40, suffix = '...')"
						]
					},
					"AQAAAAAAAAAAAAAA2RYAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					196,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADZFgAAICBzbGljZUZuID0geCA9PgpBcnJheUJ1ZmZlcihzdGFydCwgZW5kKQpTaGFyZWRBcnJheUJ1ZmZlcgpVaW50OENsYW1wZWRBcnJheQpJbnQ4QXJyYXkKVWludDhBcnJheQpJbnQxNkFycmF5ClVpbnQxNkFycmF5CkludDMyQXJyYXkKVWludDMyQXJyYXkKQmlnSW50NjRBcnJheQpCaWdVaW50NjRBcnJheQpGbG9hdDMyQXJyYXkKRmxvYXQ2NEFycmF5CiAgc2xpY2UgPSAoeCwgcywgZSkgPT4KICBzdHJpbmdpZnkgPSB2ID0+CiAgZm9ybWF0TnVtYmVyID0gbiA9PgogIGlzTmF0aXZlID0gZm4gPT4KICB1dGlsKCkKICB1dGlsCkFzeW5jRnVuY3Rpb24gPSBmdW5jdGlvbiB4KCkKR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbiooKQpBc3luY0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24qKCkKICBpc0FueUFycmF5QnVmZmVyKHYpCiAgaXNBcnJheUJ1ZmZlcih2KQogIGlzQmlnSW50NjRBcnJheSh2KQogIGlzQmlnVWludDY0QXJyYXkodikKICBpc0RhdGUodikKICBpc0Zsb2F0MzJBcnJheSh2KQogIGlzRmxvYXQ2NEFycmF5KHYpCiAgaXNJbnQ4QXJyYXkodikKICBpc0ludDE2QXJyYXkodikKICBpc0ludDMyQXJyYXkodikKICBpc01hcCh2KQogIGlzUHJvbWlzZSh2KQogIGlzUHJveHkodikKICBpc1JlZ0V4cCh2KQogIGlzU2V0KHYpCiAgaXNTaGFyZWRBcnJheUJ1ZmZlcih2KQogIGlzVWludDhBcnJheSh2KQogIGlzVWludDhDbGFtcGVkQXJyYXkodikKICBpc1VpbnQxNkFycmF5KHYpCiAgaXNVaW50MzJBcnJheSh2KQogIGlzV2Vha01hcCh2KQogIGlzV2Vha1NldCh2KQogIGlzRGF0YVZpZXcodikKICBpc0Jvb2xlYW5PYmplY3QodikKICBpc0FzeW5jRnVuY3Rpb24odikKICBpc0dlbmVyYXRvckZ1bmN0aW9uKHYpCiAgaXNBc3luY0dlbmVyYXRvckZ1bmN0aW9uKHYpCiAgaXNOdW1iZXJPYmplY3QodikKICBpc0JpZ0ludE9iamVjdCh2KQogIGlzU3ltYm9sT2JqZWN0KHYpCiAgaXNOYXRpdmVFcnJvcih2KQogIGlzTWFwSXRlcmF0b3IodikKICBpc1NldEl0ZXJhdG9yKHYpCiAgaXNTdHJpbmdPYmplY3QodikKICBpc0FycmF5QnVmZmVyVmlldyh2KQogIGlzQXJndW1lbnRzT2JqZWN0KHYpCiAgaXNCb3hlZFByaW1pdGl2ZSh2KQogIGN0b3IgPT4KICBpc0dlbmVyYXRvck9iamVjdCh2KQogIGlzVHlwZWRBcnJheSh2KQogIGlzTW9kdWxlTmFtZXNwYWNlT2JqZWN0KHYpCiAgaXNDb25zdHJ1Y3Rvcih2KQogIGlzSXRlcmFibGUodikKICBpc0FzeW5jSXRlcmFibGUodikKICBpc0l0ZXJhdG9yKHYpCiAgaXNBcnJheUxpa2UodikKICBoYXNCdWlsdEluKG8sIG0pCiAgZm9ybWF0KC4uLmFyZ3MpCiAgZm9ybWF0V2l0aE9wdGlvbnMob3B0cywgLi4uYXJncykKICBmb3JtYXRXaXRoT3B0aW9uc0ludGVybmFsKG8sIHYpCiAgYXNzZXJ0KGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpCiAgc2V0SW50ZXJ2YWwoY2FsbGJhY2ssIG1zKQogIHN0YXJ0KCkKKCkgPT4KICBjbGVhckludGVydmFsKGlkKQogIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3RvcikKICBjdG9yCiAgY3RvcgogIHN1cGVyQ3RvcgogIG1lbW9pemUoZm4sIGNhY2hlID0ge30pCk1lbW9pemUobiwgLi4ucmVzdCkKICBnZXRzZXQodGFyZ2V0LCAuLi5hcmdzKQpHZXRTZXQgPSAoLi4uYXJncykgPT4KICBrZXkgPT4KICAoa2V5LCB2YWx1ZSkgPT4KICBrZXkgPT4KICAoa2V5LCB2YWx1ZSkgPT4KKCkgPT4KICB2YWx1ZSA9PgogIG1vZGlmaWVyKC4uLmFyZ3MpCiAgZm4gPT4KICBuZXdWYWx1ZSA9PgogIGdldHRlcih0YXJnZXQsIC4uLmFyZ3MpCiAgKCkgPT4KICByZXQgPSBrZXkgPT4KICByZXQgPSBrZXkgPT4KICByZXQgPSAoKSA9PgogIHNldHRlcih0YXJnZXQsIC4uLmFyZ3MpCiAgdmFsdWUgPT4KICByZXQgPSAoa2V5LCB2YWx1ZSkgPT4KICByZXQgPSAoa2V5LCB2YWx1ZSkgPT4KICByZXQgPSB2YWx1ZSA9PgogIGdldHRlcnNldHRlcihvYmosIC4uLm9wdGlvbmFsKQogICguLi52KSA9PgogIGZuID0gKC4uLm9wdGlvbmFsKSA9PgogIGZuID0gKC4uLm9wdGlvbmFsKSA9PgogIGZuID0gKC4uLm9wdGlvbmFsKSA9PgogIGZuID0gKC4uLm9wdGlvbmFsKSA9PgogICguLi52KSA9PgogIGhhc0dldFNldChvYmopCiAgbSA9PgogIGdldFNldEFyZ3VtZW50KGdldCwgc2V0KQogICguLi5hcmdzKSA9PgogIHdyYXBHZXRTZXQoZ2V0dGVyLCBzZXR0ZXIsIC4uLmFyZ3MpCiAgcHJvcCA9PgogIChwcm9wLCB2YWx1ZSkgPT4KICB3ZWFrR2V0U2V0KC4uLmFyZ3MpCiAgd3JlZiA9PgogIHZhbHVlID0+CiAgYWRkcmVtb3ZlaGFzKHRhcmdldCwgLi4uYXJncykKICBuID0+CiAgZWwgPT4KICBlbCA9PgogIGVsID0+CiAgZWwgPT4KICBlbCA9PgogIGhhcyA9IGVsID0+CiAgbG9va3VwT2JqZWN0KGdldHNldCwgaW5zdGFuY2UgPSB7fSwgaGFuZGxlcnMgPSB7fSkKICBnZXQodGFyZ2V0LCBwcm9wKQogIHNldCh0YXJnZXQsIHByb3AsIHZhbHVlKQogIG1hcE9iamVjdCh0YXJnZXQpCiAgc2V0OiAoa2V5LCB2YWx1ZSkgPT4KICBnZXQ6IGtleSA9PgogIG9uY2UoZm4sIHRoaXNBcmcsIG1lbW9GbikKICBmdW5jdGlvbiguLi5hcmdzKQogIHdhaXRGb3IobXMpCiAgcmVzb2x2ZSA9PgogIGRlZmluZShvYmosIC4uLmFyZ3MpCiAga2V5cyhvYmosIG1heERlcHRoT3JQcmVkID0gMSkKICBtYXhEZXB0aE9yUHJlZCA9IChvYmosIGN1cnJlbnREZXB0aCkgPT4KICBwcm9wZXJ0aWVzKG9iaiwgb3B0aW9ucyA9IHsgZW51bWVyYWJsZTogdHJ1ZSB9KQogIGZuID0+CiAgZm4gPT4KICB3ZWFrQXNzaWduKG9iaiwgLi4uYXJncykKICBnZXRQcm90b3R5cGVDaGFpbihvYmosIGxpbWl0ID0gLTEsIHN0YXJ0ID0gMCkKICBnZXRDb25zdHJ1Y3RvckNoYWluKG9iaiwgLi4ucmFuZ2UpCiAgaGFzUHJvdG90eXBlKG9iaiwgcHJvdG8pCiAgZmlsdGVyKHNlcSwgcHJlZCwgdGhpc0FyZykKICBwcmVkID0gKGVsLCBpKSA9PgogIGZpbHRlcktleXMociwgbmVlZGxlcywga2VlcCA9IHRydWUpCiAgcHJlZCA9IGtleSA9Pgoob2JqLCBrZXkpID0+CiAgKGYsIGFyciA9IFtdLCBsZW5ndGggPSBmLmxlbmd0aCkgPT4KICAoLi4uYXJncykgPT4KICBhID0+CiAgZ2VuZXJhdGUgPSAoZm4sIGFkZCkgPT4KICBhZGQgPSAoaXRlbSwgZ2VuKSA9PgogIGZ1bmN0aW9uKC4uLmFyZ3MpCiAgZnVuY3Rpb24oLi4uYXJncykKICBzcGxpdChidWYsIC4uLnBvaW50cykKICBzcGxpdEF0ID0gKGIsIHBvcywgbGVuKSA9PgogIHVuaXF1ZSA9ICguLi5hcmdzKSA9PgooYXJyLCBjbXApID0+CiAgKGVsLCBpLCBhcnIpID0+CiAgaXRlbSA9PgogIChlbCwgaSwgYXJyKSA9PgogIHVuaXF1ZShzZXEpCiAgZ2V0RnVuY3Rpb25Bcmd1bWVudHMgPSBmbiA9PgogIChvZmZzZXQgPSAwKSA9PgogIGNvZGUgPT4KICAob2Zmc2V0ID0gMCkgPT4KICBjb2RlID0+CiAgKG9mZnNldCA9IDApID0+CiAgKHJlZCwgZ3JlZW4sIGJsdWUpID0+CiAgZ2V0QW5zaVN0eWxlcygpCiAgdmFsdWU6IChyZWQsIGdyZWVuLCBibHVlKSA9PgogIGMgPT4KICB2YWx1ZTogaGV4ID0+CiAgY2hhcmFjdGVyID0+CiAgdmFsdWU6IGhleCA9PgogIHZhbHVlOiBjb2RlID0+CiAgdmFsdWU6IChyZWQsIGdyZWVuLCBibHVlKSA9PgogIHZhbHVlOiBoZXggPT4KICByYW5kSW50KC4uLmFyZ3MpCiAgcmFuZEZsb2F0KG1pbiwgbWF4LCBybmcgPSBNYXRoLnJhbmRvbSkKICByYW5kU3RyKG4sIHNldCA9ICdfMDEyMzQ1Njc4OUFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonLCBybmcgPSBNYXRoLnJhbmRvbSkKICB0b0JpZ0ludChhcmcpCiAgbGF6eVByb3BlcnR5KG9iaiwgbmFtZSwgZ2V0dGVyLCBvcHRzID0ge30pCiAgZnVuY3Rpb24oKQogIGZ1bmN0aW9uKCkKICB2ID0+CiAgcmVwbGFjZVByb3BlcnR5KHZhbHVlKQogIGxhenlQcm9wZXJ0aWVzKG9iaiwgZ2V0dGVyc09iaiwgb3B0cyA9IHt9KQogIG9ic2VydmVQcm9wZXJ0aWVzKHRhcmdldCA9IHt9LCBvYmosIGZuID0gKHByb3AsIHZhbHVlKSA9PiB7fSwgb3B0cyA9IHt9KQogIGdldDogKCkgPT4KICBzZXQ6IHZhbHVlID0+CiAgZ2V0T3B0KG9wdGlvbnMgPSB7fSwgYXJncykKICBmaW5kT3B0ID0gYXJnID0+Cihbb3B0bmFtZSwgb3B0aW9uXSkgPT4KICBvcHQgPT4KKGFjYywgYXJnKSA9PgogIHRvVW5peFRpbWUoZGF0ZU9iaiwgdXRjID0gZmFsc2UpCiAgdW5peFRpbWUodXRjID0gZmFsc2UpCiAgZnJvbVVuaXhUaW1lKGVwb2NoLCB1dGMgPSBmYWxzZSkKICByYW5nZSguLi5hcmdzKQogICh2LCBrKSA9PgogIG4gPT4KICBjaHVua0FycmF5KGFyciwgc2l6ZSkKICBmbiA9IChhLCB2LCBpKSA9PgogIGNhbWVsaXplKHN0ciwgZGVsaW0gPSAnJykKICAobWF0Y2gsIHAxLCBwMiwgb2Zmc2V0KSA9PgogIGRlY2FtZWxpemUoc3RyLCBkZWxpbSA9ICctJykKICBzaG9ydGVuKHN0ciwgbWF4ID0gNDAsIHN1ZmZpeCA9ICcuLi4nKQogIGFycmF5c0luQ29tbW9uKGEpCihpdG0sIGluZHgpID0+CiAgYXJyID0+CiAgYXJyYXlGYWNhZGUocHJvdG8sIGl0ZW1GbiA9IChjb250YWluZXIsIGkpID0+IGNvbnRhaW5lci4KKGkpKQoqa2V5cygpCiplbnRyaWVzKCkKKnZhbHVlcygpCiAgZm9yRWFjaChjYWxsYmFjaywgdGhpc0FyZykKICByZWR1Y2UoY2FsbGJhY2ssIGFjY3UsIHRoaXNBcmcpCiAgbW9kKGEsIGIpCiAgYiA6IG4gPT4KICBwdXNoVW5pcXVlKGFyciwgLi4uYXJncykKICBpbnRlcnNlY3QoYSwgYikKICBzeW1tZXRyaWNEaWZmZXJlbmNlKGEsIGIpCiAgcGFydGl0aW9uKGEsIHNpemUpCiAgZGlmZmVyZW5jZShhLCBiLCBpbmNsdWRlcykKICB4ID0+CiAgeCA9PgogIHggPT4KICB4ID0+CiAgaW50ZXJzZWN0aW9uKGEsIGIpCiAgeCA9PgogIHVuaW9uKGEsIGIsIGVxdWFsaXR5KQogIHB1c2gob2JqLCAuLi52YWx1ZXMpCiAgdiA9PgogIHJlcGVhdGVyKG4sIHdoYXQpCiAgbiA9ICgpID0+CigpCigpCiAgcmVwZWF0KG4sIHdoYXQpCiAgZnVuY3Rpb25OYW1lKGZuKQogIGNsYXNzTmFtZShvYmopCiAgaXNBcnJvd0Z1bmN0aW9uID0gZm4gPT4KICBpbW11dGFibGVDbGFzcyhvcmlnLCAuLi5wcm90bykKICBwID0+CiAgY3RvciA9PgogIGN0b3IKICBpbW0gPSBiYXNlID0+CiAgY29uc3RydWN0b3IoLi4uYXJncykKICBpbnN0cnVtZW50KCBmbiwgbG9nID0gKGR1cmF0aW9uLCBuYW1lLCBhcmdzLCByZXQpID0+IGNvbnNvbGUubG9nKCBgZnVuY3Rpb24gJyR7bmFtZX0nYCArIChyZXQgIT09IHVuZGVmaW5lZCA/IGAgez0gJHtlc2NhcGUocmV0ICsgJycpLgooMCwgMTAwKSArICcuLi4nfX1gIDogJycpICsgYCB0aW1pbmc6ICR7ZHVyYXRpb24uCigzKX1tc2AgKSwgbG9nSW50ZXJ2YWwgPSAwIC8vMTAwMCApCihhcmdzLCByZXQpID0+CiAgKGFyZ3MsIHJldCkgPT4KICBmdW5jdGlvbiguLi5hcmdzKQogIGZ1bmN0aW9uKC4uLmFyZ3MpCiAgbmV3TWFwID0gKCkgPT4KKC4uLmFyZ3MpID0+CiAgZ2V0KHBhdGgpCiAgc2V0KHBhdGgsIHZhbHVlKQogIGNhdGNoYWJsZSA9IGZ1bmN0aW9uIENhdGNoYWJsZShzZWxmKQogIGNhdGNoYWJsZQooKQogIHRoZW4oZm4pCiguLi5hcmdzKSA9PgooLi4uYXJncykgPT4KICBpc051bWVyaWModmFsdWUpCiAgdiA9PgogIGlzSW5kZXgodmFsdWUpCiAgbnVtZXJpY0luZGV4KHZhbHVlKQogIGhpc3RvZ3JhbShhcnIsIG91dCA9IAooKSkKICBpbmNyID0ga2V5ID0+CiAgcHJvcGVydHlMb29rdXBIYW5kbGVycyhoYW5kbGVyID0ga2V5ID0+IG51bGwpCiAgZ2V0KHRhcmdldCwga2V5LCByZWNlaXZlcikKICAub3duS2V5cyA9IGZ1bmN0aW9uKHRhcmdldCkKICBwcm9wZXJ0eUxvb2t1cCguLi5hcmdzKQogIGhhbmRsZXIgPSBrZXkgPT4KKC4uLmFyZ3MpCiAgYWJicmV2aWF0ZShzdHIsIG1heCA9IDQwLCBzdWZmaXggPSAnLi4uJykAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					197,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/geom/point.js",
						"symkeys":
						[
							[
								66,
								73
							],
							[
								82,
								90
							],
							[
								113,
								126
							],
							[
								289,
								313
							],
							[
								1667,
								1691
							],
							[
								1825,
								1830
							],
							[
								1855,
								1860
							],
							[
								1906,
								1911
							],
							[
								1950,
								1987
							],
							[
								2038,
								2077
							],
							[
								2126,
								2164
							],
							[
								2213,
								2247
							],
							[
								2374,
								2408
							],
							[
								2533,
								2572
							],
							[
								2698,
								2737
							],
							[
								2836,
								2872
							],
							[
								2904,
								2924
							],
							[
								3028,
								3067
							],
							[
								3166,
								3200
							],
							[
								3299,
								3332
							],
							[
								3432,
								3470
							],
							[
								3591,
								3628
							],
							[
								3750,
								3783
							],
							[
								3837,
								3869
							],
							[
								3922,
								3988
							],
							[
								4086,
								4145
							],
							[
								4167,
								4172
							],
							[
								4229,
								4269
							],
							[
								4341,
								4406
							],
							[
								4632,
								4665
							],
							[
								4759,
								4793
							],
							[
								4890,
								4927
							],
							[
								4980,
								5015
							],
							[
								5048,
								5103
							],
							[
								5194,
								5241
							],
							[
								5312,
								5364
							],
							[
								5411,
								5416
							],
							[
								5467,
								5532
							],
							[
								5777,
								5782
							],
							[
								5810,
								5821
							],
							[
								5909,
								5953
							],
							[
								6066,
								6112
							],
							[
								6577,
								6582
							],
							[
								6624,
								6670
							],
							[
								6718,
								6728
							],
							[
								6842,
								6850
							],
							[
								7248,
								7308
							],
							[
								7414,
								7490
							],
							[
								7623,
								7665
							],
							[
								7741,
								7776
							],
							[
								7819,
								7858
							],
							[
								7976,
								8029
							],
							[
								8349,
								8354
							],
							[
								8413,
								8455
							],
							[
								8597,
								8635
							],
							[
								8648,
								8653
							],
							[
								8694,
								8699
							],
							[
								8745,
								8780
							],
							[
								8793,
								8798
							],
							[
								8888,
								8913
							],
							[
								8955,
								8959
							],
							[
								8966,
								8995
							],
							[
								8996,
								9001
							],
							[
								9036,
								9080
							],
							[
								9081,
								9086
							],
							[
								9128,
								9159
							],
							[
								9160,
								9165
							],
							[
								9202,
								9231
							],
							[
								9232,
								9237
							],
							[
								9272,
								9294
							],
							[
								9295,
								9300
							],
							[
								9328,
								9350
							],
							[
								9351,
								9356
							],
							[
								9384,
								9408
							],
							[
								9409,
								9414
							],
							[
								9444,
								9488
							],
							[
								9489,
								9494
							],
							[
								9544,
								9575
							],
							[
								9795,
								9815
							],
							[
								9816,
								9821
							],
							[
								9869,
								9903
							],
							[
								10015,
								10091
							],
							[
								10186,
								10200
							],
							[
								10469,
								10474
							],
							[
								10506,
								10531
							],
							[
								10630,
								10658
							],
							[
								10712,
								10726
							],
							[
								10826,
								10843
							],
							[
								10956,
								10961
							],
							[
								11041,
								11052
							],
							[
								11182,
								11188
							]
						],
						"symlist":
						[
							" () =>",
							" sym =>",
							"CTOR = obj =>",
							" function Point(...args)",
							"Point.getOther = args =>",
							"Point",
							"get()",
							"get()",
							"Point.prototype.move = function(x, y)",
							"Point.prototype.moveTo = function(x, y)",
							"Point.prototype.clear = function(x, y)",
							"Point.prototype.set = function(fn)",
							"Point.prototype.clone = function()",
							"Point.prototype.sum = function(...args)",
							"Point.prototype.add = function(...args)",
							"Point.prototype.diff = function(arg)",
							"fn = function(other)",
							"Point.prototype.sub = function(...args)",
							"Point.prototype.prod = function(f)",
							"Point.prototype.mul = function(f)",
							"Point.prototype.quot = function(other)",
							"Point.prototype.div = function(other)",
							"Point.prototype.comp = function()",
							"Point.prototype.neg = function()",
							"Point.prototype.distanceSquared = function(other = { x: 0, y: 0 })",
							"Point.prototype.distance = function(other = { x: 0, y: 0 })",
							"Point",
							"Point.prototype.equals = function(other)",
							"Point.prototype.round = function(precision = 0.001, digits, type)",
							"Point.prototype.ceil = function()",
							"Point.prototype.floor = function()",
							"Point.prototype.dot = function(other)",
							"Point.prototype.values = function()",
							"Point.prototype.fromAngle = function(angle, dist = 1.0)",
							"Point.prototype.toAngle = function(deg = false)",
							"Point.prototype.angle = function(other, deg = false)",
							"Point",
							"Point.prototype.rotate = function(angle, origin = { x: 0, y: 0 })",
							"Point",
							" function()",
							"Point.prototype.valueOf = function(shl = 16)",
							"Point.prototype.toString = function(opts = {})",
							"Point",
							"Point.prototype.toSource = function(opts = {})",
							"pad = a =>",
							"c = t =>",
							"Point.prototype.toObject = function(proto = Point.prototype)",
							"Point.prototype.toCSS = function(precision = 0.001, edges = ['left', 'top'])",
							"Point.prototype.toFixed = function(digits)",
							"Point.prototype.isNull = function()",
							"Point.prototype.inside = function(rect)",
							"Point.prototype.transform = function(m, round = true)",
							"Point",
							"Point.prototype.scaleTo = function(minmax)",
							"Point.prototype.normalize = function()",
							"Point",
							"Point",
							"Point.prototype.normal = function()",
							"Point",
							"Point.fromString = str =>",
							"n =>",
							"Point.move = (point, x, y) =>",
							"Point",
							"Point.angle = (point, other, deg = false) =>",
							"Point",
							"Point.inside = (point, rect) =>",
							"Point",
							"Point.sub = (point, other) =>",
							"Point",
							"Point.prod = (a, b) =>",
							"Point",
							"Point.quot = (a, b) =>",
							"Point",
							"Point.equals = (a, b) =>",
							"Point",
							"Point.round = (point, prec, digits, type) =>",
							"Point",
							"Point.fromAngle = (angle, f) =>",
							" (point, ...args) =>",
							"Point",
							"Point.interpolate = (p1, p2, a) =>",
							"Point.toSource = (point, { space = ' ', padding = ' ', separator = ',' }) =>",
							"isPoint = o =>",
							"Point",
							" function(depth, options)",
							"Point.bind = (o, keys, g) =>",
							" k => value =>",
							"(acc, name, i) =>",
							"Point",
							" function()",
							" () =>"
						]
					},
					"AQAAAAAAAAAAAAAACwoAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					198,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAALCgAAICAoKSA9PgogIHN5bSA9PgpDVE9SID0gb2JqID0+ClBvaW50KC4uLmFyZ3MpClBvaW50LmdldE90aGVyID0gYXJncyA9PgpQb2ludAogIGdldCgpCiAgZ2V0KCkKUG9pbnQucHJvdG90eXBlLm1vdmUgPSBmdW5jdGlvbih4LCB5KQpQb2ludC5wcm90b3R5cGUubW92ZVRvID0gZnVuY3Rpb24oeCwgeSkKUG9pbnQucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24oeCwgeSkKUG9pbnQucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKGZuKQpQb2ludC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpClBvaW50LnByb3RvdHlwZS5zdW0gPSBmdW5jdGlvbiguLi5hcmdzKQpQb2ludC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24oLi4uYXJncykKUG9pbnQucHJvdG90eXBlLmRpZmYgPSBmdW5jdGlvbihhcmcpCiAgZm4gPSBmdW5jdGlvbihvdGhlcikKUG9pbnQucHJvdG90eXBlLnN1YiA9IGZ1bmN0aW9uKC4uLmFyZ3MpClBvaW50LnByb3RvdHlwZS5wcm9kID0gZnVuY3Rpb24oZikKUG9pbnQucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uKGYpClBvaW50LnByb3RvdHlwZS5xdW90ID0gZnVuY3Rpb24ob3RoZXIpClBvaW50LnByb3RvdHlwZS5kaXYgPSBmdW5jdGlvbihvdGhlcikKUG9pbnQucHJvdG90eXBlLmNvbXAgPSBmdW5jdGlvbigpClBvaW50LnByb3RvdHlwZS5uZWcgPSBmdW5jdGlvbigpClBvaW50LnByb3RvdHlwZS5kaXN0YW5jZVNxdWFyZWQgPSBmdW5jdGlvbihvdGhlciA9IHsgeDogMCwgeTogMCB9KQpQb2ludC5wcm90b3R5cGUuZGlzdGFuY2UgPSBmdW5jdGlvbihvdGhlciA9IHsgeDogMCwgeTogMCB9KQpQb2ludApQb2ludC5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24ob3RoZXIpClBvaW50LnByb3RvdHlwZS5yb3VuZCA9IGZ1bmN0aW9uKHByZWNpc2lvbiA9IDAuMDAxLCBkaWdpdHMsIHR5cGUpClBvaW50LnByb3RvdHlwZS5jZWlsID0gZnVuY3Rpb24oKQpQb2ludC5wcm90b3R5cGUuZmxvb3IgPSBmdW5jdGlvbigpClBvaW50LnByb3RvdHlwZS5kb3QgPSBmdW5jdGlvbihvdGhlcikKUG9pbnQucHJvdG90eXBlLnZhbHVlcyA9IGZ1bmN0aW9uKCkKUG9pbnQucHJvdG90eXBlLmZyb21BbmdsZSA9IGZ1bmN0aW9uKGFuZ2xlLCBkaXN0ID0gMS4wKQpQb2ludC5wcm90b3R5cGUudG9BbmdsZSA9IGZ1bmN0aW9uKGRlZyA9IGZhbHNlKQpQb2ludC5wcm90b3R5cGUuYW5nbGUgPSBmdW5jdGlvbihvdGhlciwgZGVnID0gZmFsc2UpClBvaW50ClBvaW50LnByb3RvdHlwZS5yb3RhdGUgPSBmdW5jdGlvbihhbmdsZSwgb3JpZ2luID0geyB4OiAwLCB5OiAwIH0pClBvaW50CiAgZnVuY3Rpb24oKQpQb2ludC5wcm90b3R5cGUudmFsdWVPZiA9IGZ1bmN0aW9uKHNobCA9IDE2KQpQb2ludC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbihvcHRzID0ge30pClBvaW50ClBvaW50LnByb3RvdHlwZS50b1NvdXJjZSA9IGZ1bmN0aW9uKG9wdHMgPSB7fSkKICBwYWQgPSBhID0+CiAgYyA9IHQgPT4KUG9pbnQucHJvdG90eXBlLnRvT2JqZWN0ID0gZnVuY3Rpb24ocHJvdG8gPSBQb2ludC5wcm90b3R5cGUpClBvaW50LnByb3RvdHlwZS50b0NTUyA9IGZ1bmN0aW9uKHByZWNpc2lvbiA9IDAuMDAxLCBlZGdlcyA9IFsnbGVmdCcsICd0b3AnXSkKUG9pbnQucHJvdG90eXBlLnRvRml4ZWQgPSBmdW5jdGlvbihkaWdpdHMpClBvaW50LnByb3RvdHlwZS5pc051bGwgPSBmdW5jdGlvbigpClBvaW50LnByb3RvdHlwZS5pbnNpZGUgPSBmdW5jdGlvbihyZWN0KQpQb2ludC5wcm90b3R5cGUudHJhbnNmb3JtID0gZnVuY3Rpb24obSwgcm91bmQgPSB0cnVlKQpQb2ludApQb2ludC5wcm90b3R5cGUuc2NhbGVUbyA9IGZ1bmN0aW9uKG1pbm1heCkKUG9pbnQucHJvdG90eXBlLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uKCkKUG9pbnQKUG9pbnQKUG9pbnQucHJvdG90eXBlLm5vcm1hbCA9IGZ1bmN0aW9uKCkKUG9pbnQKUG9pbnQuZnJvbVN0cmluZyA9IHN0ciA9PgogIG4gPT4KUG9pbnQubW92ZSA9IChwb2ludCwgeCwgeSkgPT4KUG9pbnQKUG9pbnQuYW5nbGUgPSAocG9pbnQsIG90aGVyLCBkZWcgPSBmYWxzZSkgPT4KUG9pbnQKUG9pbnQuaW5zaWRlID0gKHBvaW50LCByZWN0KSA9PgpQb2ludApQb2ludC5zdWIgPSAocG9pbnQsIG90aGVyKSA9PgpQb2ludApQb2ludC5wcm9kID0gKGEsIGIpID0+ClBvaW50ClBvaW50LnF1b3QgPSAoYSwgYikgPT4KUG9pbnQKUG9pbnQuZXF1YWxzID0gKGEsIGIpID0+ClBvaW50ClBvaW50LnJvdW5kID0gKHBvaW50LCBwcmVjLCBkaWdpdHMsIHR5cGUpID0+ClBvaW50ClBvaW50LmZyb21BbmdsZSA9IChhbmdsZSwgZikgPT4KICAocG9pbnQsIC4uLmFyZ3MpID0+ClBvaW50ClBvaW50LmludGVycG9sYXRlID0gKHAxLCBwMiwgYSkgPT4KUG9pbnQudG9Tb3VyY2UgPSAocG9pbnQsIHsgc3BhY2UgPSAnICcsIHBhZGRpbmcgPSAnICcsIHNlcGFyYXRvciA9ICcsJyB9KSA9PgogIGlzUG9pbnQgPSBvID0+ClBvaW50CiAgZnVuY3Rpb24oZGVwdGgsIG9wdGlvbnMpClBvaW50LmJpbmQgPSAobywga2V5cywgZykgPT4KICBrID0+IHZhbHVlID0+CihhY2MsIG5hbWUsIGkpID0+ClBvaW50CiAgZnVuY3Rpb24oKQogICgpID0+AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					199,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					200,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					201,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					202,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					203,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					204,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					205,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					206,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/color/rgba.js",
						"symkeys":
						[
							[
								272,
								295
							],
							[
								1573,
								1577
							],
							[
								2363,
								2378
							],
							[
								2401,
								2408
							],
							[
								2437,
								2461
							],
							[
								2489,
								2498
							],
							[
								2514,
								2522
							],
							[
								2535,
								2544
							],
							[
								2592,
								2603
							],
							[
								2619,
								2629
							],
							[
								2633,
								2644
							],
							[
								2766,
								2771
							],
							[
								2882,
								2887
							],
							[
								2998,
								3003
							],
							[
								3114,
								3119
							],
							[
								3248,
								3268
							],
							[
								3286,
								3290
							],
							[
								3356,
								3376
							],
							[
								3394,
								3398
							],
							[
								3464,
								3484
							],
							[
								3502,
								3506
							],
							[
								3572,
								3592
							],
							[
								3610,
								3614
							],
							[
								3684,
								3705
							],
							[
								3720,
								3741
							],
							[
								3756,
								3777
							],
							[
								3792,
								3813
							],
							[
								3852,
								3873
							],
							[
								3911,
								3932
							],
							[
								3970,
								3991
							],
							[
								4029,
								4050
							],
							[
								4091,
								4124
							],
							[
								4241,
								4289
							],
							[
								4378,
								4411
							],
							[
								4473,
								4477
							],
							[
								4546,
								4588
							],
							[
								4601,
								4605
							],
							[
								4642,
								4646
							],
							[
								4721,
								4774
							],
							[
								4985,
								5021
							],
							[
								5427,
								5431
							],
							[
								5596,
								5636
							],
							[
								6049,
								6082
							],
							[
								6150,
								6170
							],
							[
								6171,
								6175
							],
							[
								6203,
								6223
							],
							[
								6396,
								6416
							],
							[
								6417,
								6421
							],
							[
								6451,
								6484
							],
							[
								6545,
								6549
							],
							[
								6703,
								6742
							],
							[
								6803,
								6856
							],
							[
								6993,
								7027
							],
							[
								7149,
								7199
							],
							[
								7206,
								7210
							],
							[
								7448,
								7488
							],
							[
								7500,
								7504
							],
							[
								7558,
								7562
							],
							[
								7593,
								7604
							],
							[
								7688,
								7692
							],
							[
								7724,
								7739
							],
							[
								7818,
								7822
							],
							[
								7897,
								7901
							],
							[
								7964,
								7968
							],
							[
								8015,
								8032
							],
							[
								8091,
								8136
							],
							[
								8393,
								8450
							],
							[
								8564,
								8595
							],
							[
								8827,
								8831
							],
							[
								8863,
								8879
							],
							[
								10111,
								10144
							],
							[
								10260,
								10294
							],
							[
								10354,
								10388
							],
							[
								11212,
								11246
							],
							[
								11285,
								11289
							],
							[
								11655,
								11688
							],
							[
								11711,
								11715
							],
							[
								12412,
								12440
							],
							[
								13338,
								13372
							],
							[
								13395,
								13399
							],
							[
								13628,
								13665
							],
							[
								13680,
								13684
							],
							[
								13852,
								13886
							],
							[
								13984,
								14032
							],
							[
								14127,
								14168
							],
							[
								14330,
								14368
							],
							[
								14393,
								14397
							],
							[
								14459,
								14463
							],
							[
								14589,
								14639
							],
							[
								14687,
								14691
							],
							[
								14855,
								14917
							],
							[
								15075,
								15085
							],
							[
								15166,
								15176
							],
							[
								15545,
								15584
							],
							[
								15634,
								15673
							],
							[
								15781,
								15817
							],
							[
								15891,
								15926
							],
							[
								15964,
								16016
							],
							[
								16122,
								16152
							],
							[
								16300,
								16304
							],
							[
								16484,
								16488
							],
							[
								16658,
								16662
							],
							[
								16760,
								16778
							],
							[
								17446,
								17501
							],
							[
								17765,
								17787
							],
							[
								18089,
								18123
							],
							[
								18243,
								18247
							],
							[
								18276,
								18289
							],
							[
								18369,
								18373
							],
							[
								18427,
								18438
							],
							[
								18731,
								18735
							],
							[
								18913,
								18928
							],
							[
								19529,
								19545
							],
							[
								22146,
								22150
							],
							[
								22202,
								22301
							],
							[
								22550,
								22563
							],
							[
								22564,
								22568
							],
							[
								22783,
								22794
							],
							[
								22920,
								22926
							]
						],
						"symlist":
						[
							" function RGBA(...args)",
							"x =>",
							"isRGBA = obj =>",
							"prop =>",
							"RGBA.fromString = str =>",
							" () =>",
							" c =>",
							" () =>",
							" () =>",
							" c =>",
							" () =>",
							" n =>",
							" n =>",
							" n =>",
							" n =>",
							" ({ r, g, b, a }) =>",
							"n =>",
							" ({ r, g, b, a }) =>",
							"n =>",
							" ({ r, g, b, a }) =>",
							"n =>",
							" ({ r, g, b, a }) =>",
							"n =>",
							" ({ r, g, b, a }) =>",
							" ({ b, g, r, a }) =>",
							" ({ a, r, g, b }) =>",
							" ({ a, b, g, r }) =>",
							" ({ r, g, b, a }) =>",
							" ({ b, g, r, a }) =>",
							" ({ a, r, g, b }) =>",
							" ({ a, b, g, r }) =>",
							"RGBA.prototype.clone = function()",
							"RGBA.prototype.binaryValue = function(order = 0)",
							"RGBA.prototype.valid = function()",
							"n =>",
							"RGBA.prototype.compareTo = function(other)",
							"RGBA",
							"RGBA",
							"RGBA.prototype.interpolate = function(other, a = 0.5)",
							"RGBA.fromHex = (hex, alpha = 255) =>",
							"x =>",
							"RGBA.prototype.hex = function(opts = {})",
							"RGBA.prototype.toRGB = function()",
							"RGBA.toHex = rgba =>",
							"RGBA",
							"RGBA.clamp = rgba =>",
							"RGBA.round = rgba =>",
							"RGBA",
							"RGBA.prototype.round = function()",
							"n =>",
							"RGBA.prototype.setOpacity = function(a)",
							"RGBA.normalize = function(rgba, src = 255, dst = 1.0)",
							"RGBA.prototype.css = () => prop =>",
							"RGBA.prototype.toCSS = function(fmt = num => +num.",
							"(3))",
							"RGBA.prototype.toString = function(opts)",
							"RGBA",
							"RGBA",
							" function()",
							"RGBA",
							" function(hint)",
							"RGBA",
							"RGBA",
							"RGBA",
							"function toHex(n)",
							"RGBA.prototype.toSource = function(sep = ',')",
							"RGBA.prototype.normalize = function(src = 255, dst = 1.0)",
							"RGBA.blend = (a, b, o = 0.5) =>",
							"RGBA",
							"function (other)",
							"RGBA.prototype.toRGB = function()",
							"RGBA.prototype.toBGRA = function()",
							"RGBA.prototype.toHSLA = function()",
							"RGBA.prototype.toCMYK = function()",
							"RGBA",
							"RGBA.prototype.toLAB = function()",
							"RGBA",
							"RGBA.fromLAB = function(lab)",
							"RGBA.prototype.linear = function()",
							"RGBA",
							"RGBA.prototype.luminance = function()",
							"RGBA",
							"RGBA.prototype.invert = function()",
							"RGBA.prototype.blackwhite = function(a = this.a)",
							"RGBA.prototype.distance = function(other)",
							"RGBA.prototype.luminanace = function()",
							"RGBA",
							"v =>",
							"RGBA.prototype.contrast = function contrast(other)",
							"RGBA",
							"RGBA.prototype.toConsole = function(fn = 'toString', css = [])",
							"fn = () =>",
							"fn = () =>",
							"RGBA.prototype.dump = function(...args)",
							"RGBA.prototype.equals = function(other)",
							"RGBA.prototype.toObject = function()",
							"RGBA.prototype.toArray = function()",
							"RGBA.prototype.toAnsi = function(background = false)",
							"RGBA.fromAnsi256 = function(n)",
							"v =>",
							"n =>",
							"n =>",
							"distFn = (a, b) =>",
							"RGBA.prototype.toAnsi256 = function(background = false)",
							"fromRGB = (r, g, b) =>",
							"toString = (background = false) =>",
							"RGBA",
							" function* ()",
							"RGBA",
							" function()",
							"n =>",
							"get palette16()",
							"get palette256()",
							"n =>",
							"RGBA.random = function(r = [0, 255], g = [0, 255], b = [0, 255], a = [255, 255], rng = Math.random)",
							" (...args) =>",
							"RGBA",
							" function()",
							" () =>"
						]
					},
					"AQAAAAAAAAAAAAAAFQoAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					207,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/geom/point.js",
						"symkeys":
						[
							[
								66,
								73
							],
							[
								82,
								90
							],
							[
								113,
								126
							],
							[
								289,
								313
							],
							[
								1667,
								1691
							],
							[
								1825,
								1830
							],
							[
								1855,
								1860
							],
							[
								1906,
								1911
							],
							[
								1950,
								1987
							],
							[
								2038,
								2077
							],
							[
								2126,
								2164
							],
							[
								2213,
								2247
							],
							[
								2374,
								2408
							],
							[
								2533,
								2572
							],
							[
								2698,
								2737
							],
							[
								2836,
								2872
							],
							[
								2904,
								2924
							],
							[
								3028,
								3067
							],
							[
								3166,
								3200
							],
							[
								3299,
								3332
							],
							[
								3432,
								3470
							],
							[
								3591,
								3628
							],
							[
								3750,
								3783
							],
							[
								3837,
								3869
							],
							[
								3922,
								3988
							],
							[
								4086,
								4145
							],
							[
								4167,
								4172
							],
							[
								4229,
								4269
							],
							[
								4341,
								4406
							],
							[
								4632,
								4665
							],
							[
								4759,
								4793
							],
							[
								4890,
								4927
							],
							[
								4980,
								5015
							],
							[
								5048,
								5103
							],
							[
								5194,
								5241
							],
							[
								5312,
								5364
							],
							[
								5411,
								5416
							],
							[
								5467,
								5532
							],
							[
								5777,
								5782
							],
							[
								5810,
								5821
							],
							[
								5909,
								5953
							],
							[
								6066,
								6112
							],
							[
								6577,
								6582
							],
							[
								6624,
								6670
							],
							[
								6718,
								6728
							],
							[
								6842,
								6850
							],
							[
								7248,
								7308
							],
							[
								7414,
								7490
							],
							[
								7623,
								7665
							],
							[
								7741,
								7776
							],
							[
								7819,
								7858
							],
							[
								7976,
								8029
							],
							[
								8349,
								8354
							],
							[
								8413,
								8455
							],
							[
								8597,
								8635
							],
							[
								8648,
								8653
							],
							[
								8694,
								8699
							],
							[
								8745,
								8780
							],
							[
								8793,
								8798
							],
							[
								8888,
								8913
							],
							[
								8955,
								8959
							],
							[
								8966,
								8995
							],
							[
								8996,
								9001
							],
							[
								9036,
								9080
							],
							[
								9081,
								9086
							],
							[
								9128,
								9159
							],
							[
								9160,
								9165
							],
							[
								9202,
								9231
							],
							[
								9232,
								9237
							],
							[
								9272,
								9294
							],
							[
								9295,
								9300
							],
							[
								9328,
								9350
							],
							[
								9351,
								9356
							],
							[
								9384,
								9408
							],
							[
								9409,
								9414
							],
							[
								9444,
								9488
							],
							[
								9489,
								9494
							],
							[
								9544,
								9575
							],
							[
								9795,
								9815
							],
							[
								9816,
								9821
							],
							[
								9869,
								9903
							],
							[
								10015,
								10091
							],
							[
								10186,
								10200
							],
							[
								10469,
								10474
							],
							[
								10506,
								10531
							],
							[
								10630,
								10658
							],
							[
								10712,
								10726
							],
							[
								10826,
								10843
							],
							[
								10956,
								10961
							],
							[
								11041,
								11052
							],
							[
								11182,
								11188
							]
						],
						"symlist":
						[
							" () =>",
							" sym =>",
							"CTOR = obj =>",
							" function Point(...args)",
							"Point.getOther = args =>",
							"Point",
							"get()",
							"get()",
							"Point.prototype.move = function(x, y)",
							"Point.prototype.moveTo = function(x, y)",
							"Point.prototype.clear = function(x, y)",
							"Point.prototype.set = function(fn)",
							"Point.prototype.clone = function()",
							"Point.prototype.sum = function(...args)",
							"Point.prototype.add = function(...args)",
							"Point.prototype.diff = function(arg)",
							"fn = function(other)",
							"Point.prototype.sub = function(...args)",
							"Point.prototype.prod = function(f)",
							"Point.prototype.mul = function(f)",
							"Point.prototype.quot = function(other)",
							"Point.prototype.div = function(other)",
							"Point.prototype.comp = function()",
							"Point.prototype.neg = function()",
							"Point.prototype.distanceSquared = function(other = { x: 0, y: 0 })",
							"Point.prototype.distance = function(other = { x: 0, y: 0 })",
							"Point",
							"Point.prototype.equals = function(other)",
							"Point.prototype.round = function(precision = 0.001, digits, type)",
							"Point.prototype.ceil = function()",
							"Point.prototype.floor = function()",
							"Point.prototype.dot = function(other)",
							"Point.prototype.values = function()",
							"Point.prototype.fromAngle = function(angle, dist = 1.0)",
							"Point.prototype.toAngle = function(deg = false)",
							"Point.prototype.angle = function(other, deg = false)",
							"Point",
							"Point.prototype.rotate = function(angle, origin = { x: 0, y: 0 })",
							"Point",
							" function()",
							"Point.prototype.valueOf = function(shl = 16)",
							"Point.prototype.toString = function(opts = {})",
							"Point",
							"Point.prototype.toSource = function(opts = {})",
							"pad = a =>",
							"c = t =>",
							"Point.prototype.toObject = function(proto = Point.prototype)",
							"Point.prototype.toCSS = function(precision = 0.001, edges = ['left', 'top'])",
							"Point.prototype.toFixed = function(digits)",
							"Point.prototype.isNull = function()",
							"Point.prototype.inside = function(rect)",
							"Point.prototype.transform = function(m, round = true)",
							"Point",
							"Point.prototype.scaleTo = function(minmax)",
							"Point.prototype.normalize = function()",
							"Point",
							"Point",
							"Point.prototype.normal = function()",
							"Point",
							"Point.fromString = str =>",
							"n =>",
							"Point.move = (point, x, y) =>",
							"Point",
							"Point.angle = (point, other, deg = false) =>",
							"Point",
							"Point.inside = (point, rect) =>",
							"Point",
							"Point.sub = (point, other) =>",
							"Point",
							"Point.prod = (a, b) =>",
							"Point",
							"Point.quot = (a, b) =>",
							"Point",
							"Point.equals = (a, b) =>",
							"Point",
							"Point.round = (point, prec, digits, type) =>",
							"Point",
							"Point.fromAngle = (angle, f) =>",
							" (point, ...args) =>",
							"Point",
							"Point.interpolate = (p1, p2, a) =>",
							"Point.toSource = (point, { space = ' ', padding = ' ', separator = ',' }) =>",
							"isPoint = o =>",
							"Point",
							" function(depth, options)",
							"Point.bind = (o, keys, g) =>",
							" k => value =>",
							"(acc, name, i) =>",
							"Point",
							" function()",
							" () =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAVCgAAUkdCQSguLi5hcmdzKQogIHggPT4KICBpc1JHQkEgPSBvYmogPT4KICBwcm9wID0+ClJHQkEuZnJvbVN0cmluZyA9IHN0ciA9PgogICgpID0+CiAgYyA9PgogICgpID0+CiAgKCkgPT4KICBjID0+CiAgKCkgPT4KICBuID0+CiAgbiA9PgogIG4gPT4KICBuID0+CiAgKHsgciwgZywgYiwgYSB9KSA9PgogIG4gPT4KICAoeyByLCBnLCBiLCBhIH0pID0+CiAgbiA9PgogICh7IHIsIGcsIGIsIGEgfSkgPT4KICBuID0+CiAgKHsgciwgZywgYiwgYSB9KSA9PgogIG4gPT4KICAoeyByLCBnLCBiLCBhIH0pID0+CiAgKHsgYiwgZywgciwgYSB9KSA9PgogICh7IGEsIHIsIGcsIGIgfSkgPT4KICAoeyBhLCBiLCBnLCByIH0pID0+CiAgKHsgciwgZywgYiwgYSB9KSA9PgogICh7IGIsIGcsIHIsIGEgfSkgPT4KICAoeyBhLCByLCBnLCBiIH0pID0+CiAgKHsgYSwgYiwgZywgciB9KSA9PgpSR0JBLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkKUkdCQS5wcm90b3R5cGUuYmluYXJ5VmFsdWUgPSBmdW5jdGlvbihvcmRlciA9IDApClJHQkEucHJvdG90eXBlLnZhbGlkID0gZnVuY3Rpb24oKQogIG4gPT4KUkdCQS5wcm90b3R5cGUuY29tcGFyZVRvID0gZnVuY3Rpb24ob3RoZXIpClJHQkEKUkdCQQpSR0JBLnByb3RvdHlwZS5pbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uKG90aGVyLCBhID0gMC41KQpSR0JBLmZyb21IZXggPSAoaGV4LCBhbHBoYSA9IDI1NSkgPT4KICB4ID0+ClJHQkEucHJvdG90eXBlLmhleCA9IGZ1bmN0aW9uKG9wdHMgPSB7fSkKUkdCQS5wcm90b3R5cGUudG9SR0IgPSBmdW5jdGlvbigpClJHQkEudG9IZXggPSByZ2JhID0+ClJHQkEKUkdCQS5jbGFtcCA9IHJnYmEgPT4KUkdCQS5yb3VuZCA9IHJnYmEgPT4KUkdCQQpSR0JBLnByb3RvdHlwZS5yb3VuZCA9IGZ1bmN0aW9uKCkKICBuID0+ClJHQkEucHJvdG90eXBlLnNldE9wYWNpdHkgPSBmdW5jdGlvbihhKQpSR0JBLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uKHJnYmEsIHNyYyA9IDI1NSwgZHN0ID0gMS4wKQpSR0JBLnByb3RvdHlwZS5jc3MgPSAoKSA9PiBwcm9wID0+ClJHQkEucHJvdG90eXBlLnRvQ1NTID0gZnVuY3Rpb24oZm10ID0gbnVtID0+ICtudW0uCigzKSkKUkdCQS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbihvcHRzKQpSR0JBClJHQkEKICBmdW5jdGlvbigpClJHQkEKICBmdW5jdGlvbihoaW50KQpSR0JBClJHQkEKUkdCQQogIHRvSGV4KG4pClJHQkEucHJvdG90eXBlLnRvU291cmNlID0gZnVuY3Rpb24oc2VwID0gJywnKQpSR0JBLnByb3RvdHlwZS5ub3JtYWxpemUgPSBmdW5jdGlvbihzcmMgPSAyNTUsIGRzdCA9IDEuMCkKUkdCQS5ibGVuZCA9IChhLCBiLCBvID0gMC41KSA9PgpSR0JBCihvdGhlcikKUkdCQS5wcm90b3R5cGUudG9SR0IgPSBmdW5jdGlvbigpClJHQkEucHJvdG90eXBlLnRvQkdSQSA9IGZ1bmN0aW9uKCkKUkdCQS5wcm90b3R5cGUudG9IU0xBID0gZnVuY3Rpb24oKQpSR0JBLnByb3RvdHlwZS50b0NNWUsgPSBmdW5jdGlvbigpClJHQkEKUkdCQS5wcm90b3R5cGUudG9MQUIgPSBmdW5jdGlvbigpClJHQkEKUkdCQS5mcm9tTEFCID0gZnVuY3Rpb24obGFiKQpSR0JBLnByb3RvdHlwZS5saW5lYXIgPSBmdW5jdGlvbigpClJHQkEKUkdCQS5wcm90b3R5cGUubHVtaW5hbmNlID0gZnVuY3Rpb24oKQpSR0JBClJHQkEucHJvdG90eXBlLmludmVydCA9IGZ1bmN0aW9uKCkKUkdCQS5wcm90b3R5cGUuYmxhY2t3aGl0ZSA9IGZ1bmN0aW9uKGEgPSB0aGlzLmEpClJHQkEucHJvdG90eXBlLmRpc3RhbmNlID0gZnVuY3Rpb24ob3RoZXIpClJHQkEucHJvdG90eXBlLmx1bWluYW5hY2UgPSBmdW5jdGlvbigpClJHQkEKICB2ID0+ClJHQkEucHJvdG90eXBlLmNvbnRyYXN0ID0gZnVuY3Rpb24gY29udHJhc3Qob3RoZXIpClJHQkEKUkdCQS5wcm90b3R5cGUudG9Db25zb2xlID0gZnVuY3Rpb24oZm4gPSAndG9TdHJpbmcnLCBjc3MgPSBbXSkKICBmbiA9ICgpID0+CiAgZm4gPSAoKSA9PgpSR0JBLnByb3RvdHlwZS5kdW1wID0gZnVuY3Rpb24oLi4uYXJncykKUkdCQS5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24ob3RoZXIpClJHQkEucHJvdG90eXBlLnRvT2JqZWN0ID0gZnVuY3Rpb24oKQpSR0JBLnByb3RvdHlwZS50b0FycmF5ID0gZnVuY3Rpb24oKQpSR0JBLnByb3RvdHlwZS50b0Fuc2kgPSBmdW5jdGlvbihiYWNrZ3JvdW5kID0gZmFsc2UpClJHQkEuZnJvbUFuc2kyNTYgPSBmdW5jdGlvbihuKQogIHYgPT4KICBuID0+CiAgbiA9PgogIGRpc3RGbiA9IChhLCBiKSA9PgpSR0JBLnByb3RvdHlwZS50b0Fuc2kyNTYgPSBmdW5jdGlvbihiYWNrZ3JvdW5kID0gZmFsc2UpCiAgZnJvbVJHQiA9IChyLCBnLCBiKSA9PgogIHRvU3RyaW5nID0gKGJhY2tncm91bmQgPSBmYWxzZSkgPT4KUkdCQQooKQpSR0JBCiAgZnVuY3Rpb24oKQogIG4gPT4KICBnZXQgcGFsZXR0ZTE2KCkKICBnZXQgcGFsZXR0ZTI1NigpCiAgbiA9PgpSR0JBLnJhbmRvbSA9IGZ1bmN0aW9uKHIgPSBbMCwgMjU1XSwgZyA9IFswLCAyNTVdLCBiID0gWzAsIDI1NV0sIGEgPSBbMjU1LCAyNTVdLCBybmcgPSBNYXRoLnJhbmRvbSkKICAoLi4uYXJncykgPT4KUkdCQQogIGZ1bmN0aW9uKCkKICAoKSA9PgAAAAAAAAAACwoAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					208,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAALCgAAICAoKSA9PgogIHN5bSA9PgpDVE9SID0gb2JqID0+ClBvaW50KC4uLmFyZ3MpClBvaW50LmdldE90aGVyID0gYXJncyA9PgpQb2ludAogIGdldCgpCiAgZ2V0KCkKUG9pbnQucHJvdG90eXBlLm1vdmUgPSBmdW5jdGlvbih4LCB5KQpQb2ludC5wcm90b3R5cGUubW92ZVRvID0gZnVuY3Rpb24oeCwgeSkKUG9pbnQucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24oeCwgeSkKUG9pbnQucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKGZuKQpQb2ludC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpClBvaW50LnByb3RvdHlwZS5zdW0gPSBmdW5jdGlvbiguLi5hcmdzKQpQb2ludC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24oLi4uYXJncykKUG9pbnQucHJvdG90eXBlLmRpZmYgPSBmdW5jdGlvbihhcmcpCiAgZm4gPSBmdW5jdGlvbihvdGhlcikKUG9pbnQucHJvdG90eXBlLnN1YiA9IGZ1bmN0aW9uKC4uLmFyZ3MpClBvaW50LnByb3RvdHlwZS5wcm9kID0gZnVuY3Rpb24oZikKUG9pbnQucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uKGYpClBvaW50LnByb3RvdHlwZS5xdW90ID0gZnVuY3Rpb24ob3RoZXIpClBvaW50LnByb3RvdHlwZS5kaXYgPSBmdW5jdGlvbihvdGhlcikKUG9pbnQucHJvdG90eXBlLmNvbXAgPSBmdW5jdGlvbigpClBvaW50LnByb3RvdHlwZS5uZWcgPSBmdW5jdGlvbigpClBvaW50LnByb3RvdHlwZS5kaXN0YW5jZVNxdWFyZWQgPSBmdW5jdGlvbihvdGhlciA9IHsgeDogMCwgeTogMCB9KQpQb2ludC5wcm90b3R5cGUuZGlzdGFuY2UgPSBmdW5jdGlvbihvdGhlciA9IHsgeDogMCwgeTogMCB9KQpQb2ludApQb2ludC5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24ob3RoZXIpClBvaW50LnByb3RvdHlwZS5yb3VuZCA9IGZ1bmN0aW9uKHByZWNpc2lvbiA9IDAuMDAxLCBkaWdpdHMsIHR5cGUpClBvaW50LnByb3RvdHlwZS5jZWlsID0gZnVuY3Rpb24oKQpQb2ludC5wcm90b3R5cGUuZmxvb3IgPSBmdW5jdGlvbigpClBvaW50LnByb3RvdHlwZS5kb3QgPSBmdW5jdGlvbihvdGhlcikKUG9pbnQucHJvdG90eXBlLnZhbHVlcyA9IGZ1bmN0aW9uKCkKUG9pbnQucHJvdG90eXBlLmZyb21BbmdsZSA9IGZ1bmN0aW9uKGFuZ2xlLCBkaXN0ID0gMS4wKQpQb2ludC5wcm90b3R5cGUudG9BbmdsZSA9IGZ1bmN0aW9uKGRlZyA9IGZhbHNlKQpQb2ludC5wcm90b3R5cGUuYW5nbGUgPSBmdW5jdGlvbihvdGhlciwgZGVnID0gZmFsc2UpClBvaW50ClBvaW50LnByb3RvdHlwZS5yb3RhdGUgPSBmdW5jdGlvbihhbmdsZSwgb3JpZ2luID0geyB4OiAwLCB5OiAwIH0pClBvaW50CiAgZnVuY3Rpb24oKQpQb2ludC5wcm90b3R5cGUudmFsdWVPZiA9IGZ1bmN0aW9uKHNobCA9IDE2KQpQb2ludC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbihvcHRzID0ge30pClBvaW50ClBvaW50LnByb3RvdHlwZS50b1NvdXJjZSA9IGZ1bmN0aW9uKG9wdHMgPSB7fSkKICBwYWQgPSBhID0+CiAgYyA9IHQgPT4KUG9pbnQucHJvdG90eXBlLnRvT2JqZWN0ID0gZnVuY3Rpb24ocHJvdG8gPSBQb2ludC5wcm90b3R5cGUpClBvaW50LnByb3RvdHlwZS50b0NTUyA9IGZ1bmN0aW9uKHByZWNpc2lvbiA9IDAuMDAxLCBlZGdlcyA9IFsnbGVmdCcsICd0b3AnXSkKUG9pbnQucHJvdG90eXBlLnRvRml4ZWQgPSBmdW5jdGlvbihkaWdpdHMpClBvaW50LnByb3RvdHlwZS5pc051bGwgPSBmdW5jdGlvbigpClBvaW50LnByb3RvdHlwZS5pbnNpZGUgPSBmdW5jdGlvbihyZWN0KQpQb2ludC5wcm90b3R5cGUudHJhbnNmb3JtID0gZnVuY3Rpb24obSwgcm91bmQgPSB0cnVlKQpQb2ludApQb2ludC5wcm90b3R5cGUuc2NhbGVUbyA9IGZ1bmN0aW9uKG1pbm1heCkKUG9pbnQucHJvdG90eXBlLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uKCkKUG9pbnQKUG9pbnQKUG9pbnQucHJvdG90eXBlLm5vcm1hbCA9IGZ1bmN0aW9uKCkKUG9pbnQKUG9pbnQuZnJvbVN0cmluZyA9IHN0ciA9PgogIG4gPT4KUG9pbnQubW92ZSA9IChwb2ludCwgeCwgeSkgPT4KUG9pbnQKUG9pbnQuYW5nbGUgPSAocG9pbnQsIG90aGVyLCBkZWcgPSBmYWxzZSkgPT4KUG9pbnQKUG9pbnQuaW5zaWRlID0gKHBvaW50LCByZWN0KSA9PgpQb2ludApQb2ludC5zdWIgPSAocG9pbnQsIG90aGVyKSA9PgpQb2ludApQb2ludC5wcm9kID0gKGEsIGIpID0+ClBvaW50ClBvaW50LnF1b3QgPSAoYSwgYikgPT4KUG9pbnQKUG9pbnQuZXF1YWxzID0gKGEsIGIpID0+ClBvaW50ClBvaW50LnJvdW5kID0gKHBvaW50LCBwcmVjLCBkaWdpdHMsIHR5cGUpID0+ClBvaW50ClBvaW50LmZyb21BbmdsZSA9IChhbmdsZSwgZikgPT4KICAocG9pbnQsIC4uLmFyZ3MpID0+ClBvaW50ClBvaW50LmludGVycG9sYXRlID0gKHAxLCBwMiwgYSkgPT4KUG9pbnQudG9Tb3VyY2UgPSAocG9pbnQsIHsgc3BhY2UgPSAnICcsIHBhZGRpbmcgPSAnICcsIHNlcGFyYXRvciA9ICcsJyB9KSA9PgogIGlzUG9pbnQgPSBvID0+ClBvaW50CiAgZnVuY3Rpb24oZGVwdGgsIG9wdGlvbnMpClBvaW50LmJpbmQgPSAobywga2V5cywgZykgPT4KICBrID0+IHZhbHVlID0+CihhY2MsIG5hbWUsIGkpID0+ClBvaW50CiAgZnVuY3Rpb24oKQogICgpID0+AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					209,
					3,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					210,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					211,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					213,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								2010,
								2018
							],
							[
								2034,
								2054
							],
							[
								2625,
								2658
							],
							[
								2748,
								2779
							],
							[
								3105,
								3127
							],
							[
								3341,
								3382
							],
							[
								3393,
								3406
							],
							[
								3484,
								3519
							],
							[
								3564,
								3582
							],
							[
								3618,
								3660
							],
							[
								3726,
								3759
							],
							[
								3781,
								3785
							],
							[
								4174,
								4179
							],
							[
								4229,
								4233
							],
							[
								4260,
								4264
							],
							[
								4292,
								4296
							],
							[
								4319,
								4339
							],
							[
								4393,
								4397
							],
							[
								4467,
								4489
							],
							[
								4579,
								4584
							],
							[
								4616,
								4638
							],
							[
								4832,
								4854
							],
							[
								5277,
								5343
							],
							[
								5689,
								5698
							],
							[
								5803,
								5833
							],
							[
								6194,
								6229
							],
							[
								6261,
								6302
							],
							[
								6334,
								6400
							],
							[
								6433,
								6467
							],
							[
								6538,
								6585
							],
							[
								7121,
								7157
							],
							[
								7270,
								7279
							],
							[
								7515,
								7523
							],
							[
								7629,
								7636
							],
							[
								7686,
								7710
							],
							[
								8091,
								8102
							],
							[
								8192,
								8203
							],
							[
								8267,
								8278
							],
							[
								8332,
								8341
							],
							[
								8379,
								8390
							],
							[
								8478,
								8505
							],
							[
								8643,
								8647
							],
							[
								8671,
								8678
							],
							[
								8711,
								8727
							],
							[
								8856,
								8901
							],
							[
								9117,
								9175
							],
							[
								9487,
								9509
							],
							[
								9858,
								9868
							],
							[
								10112,
								10126
							],
							[
								11079,
								11103
							],
							[
								11229,
								11233
							],
							[
								11325,
								11339
							],
							[
								11439,
								11455
							],
							[
								11809,
								11822
							],
							[
								11840,
								11845
							],
							[
								11927,
								11934
							],
							[
								11962,
								11967
							],
							[
								12089,
								12114
							],
							[
								12289,
								12328
							],
							[
								12405,
								12416
							],
							[
								13983,
								14014
							],
							[
								14677,
								14710
							],
							[
								14982,
								15017
							],
							[
								15102,
								15135
							],
							[
								15895,
								15901
							],
							[
								16071,
								16077
							],
							[
								16847,
								16851
							],
							[
								17294,
								17301
							],
							[
								17694,
								17730
							],
							[
								18142,
								18174
							],
							[
								18777,
								18781
							],
							[
								19302,
								19319
							],
							[
								19621,
								19656
							],
							[
								20504,
								20509
							],
							[
								21236,
								21240
							],
							[
								21334,
								21338
							],
							[
								21458,
								21467
							],
							[
								21597,
								21604
							],
							[
								21885,
								21892
							],
							[
								21973,
								21980
							],
							[
								22044,
								22060
							],
							[
								22125,
								22145
							],
							[
								22844,
								22856
							],
							[
								22955,
								22967
							],
							[
								23169,
								23185
							],
							[
								23279,
								23292
							],
							[
								23568,
								23586
							],
							[
								23776,
								23805
							],
							[
								24213,
								24232
							],
							[
								24665,
								24686
							],
							[
								25707,
								25729
							],
							[
								26202,
								26223
							],
							[
								26774,
								26793
							],
							[
								27227,
								27235
							],
							[
								29938,
								29950
							],
							[
								31651,
								31686
							],
							[
								32357,
								32376
							],
							[
								32484,
								32500
							],
							[
								32635,
								32652
							],
							[
								32697,
								32710
							],
							[
								32746,
								32756
							],
							[
								33610,
								33626
							],
							[
								33715,
								33734
							],
							[
								33745,
								33764
							],
							[
								33790,
								33810
							]
						],
						"symlist":
						[
							"value =>",
							" (level, message) =>",
							"async function AsyncCollect(iter)",
							"function ExecTool(cmd, ...args)",
							"function GetMime(file)",
							"function Matcher(pattern, t = arg => arg)",
							" (...args) =>",
							"function KeyOrValueMatcher(pattern)",
							" ([key, value]) =>",
							"function GetRootDirectories(pattern = '*')",
							"MakeUUID = (rng = Math.random) =>",
							"n =>",
							"dd =>",
							"d =>",
							"d =>",
							"d =>",
							"function GetDir(dir)",
							"n =>",
							"function DirName(name)",
							"it =>",
							"function DateStr(date)",
							"function ModeStr(mode)",
							"HTMLPage = ({ title, style, scripts = [], children, ...props }) =>",
							"script =>",
							"FilterForm = ({ ...props }) =>",
							"HTMLTable = ({ rows, ...props }) =>",
							"HTMLTableRow = ({ columns, ...props }) =>",
							"HTMLTableColumn = ({ columns, children, tag = 'td', ...props }) =>",
							"FileLink = ({ file, ...props }) =>",
							"FileObject = ({ file, stat = {}, ...props }) =>",
							"FileTable = ({ files, ...props }) =>",
							"(a, b) =>",
							"field =>",
							"file =>",
							"function ReadExiv2(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function ReadExiftool(file)",
							"l =>",
							"line =>",
							"([line, idx]) =>",
							"function HeifConvert(src, dst, quality = 100)",
							"function MagickResize(src, dst, rotate = 0, width, height)",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							" function ParseBody(gen)",
							".createWS = (url, callbacks, listen) =>",
							".out = s =>",
							"async function* test(req, resp)",
							" function proxy(req, resp)",
							" function* config(req, resp)",
							" function* file(req, resp)",
							"dir =>",
							"dir =>",
							"f =>",
							"file =>",
							" function* uploads(req, resp)",
							"async function* files(req, resp)",
							"n =>",
							"([name, type]) =>",
							" function* files2(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file, rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"({ name }) =>",
							"onConnect(ws, req)",
							".sendCommand = function(data)",
							"onClose(ws, reason)",
							"onHttp(ws, req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name, file)",
							"f = x =>",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"onFd(fd, rd, wr)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"AQAAAAAAAAAAAAAAmwcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "eagle-query.js",
			"settings":
			{
				"buffer_size": 3358,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					2,
					1,
					"left_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAAABAAAAZw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAABAAAAAAAAAAEAAAAAAAAAAAAAAAAA8L8"
				],
				[
					20,
					1,
					"cut",
					null,
					"AQAAAC8FAAAAAAAALwUAAAAAAAAgAAAAICAgIGNvbnNvbGUubG9nKCdtYWluOicsIG1haW4pOwo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAvBQAAAAAAAE8FAAAAAAAAAAAAAAAA8L8"
				],
				[
					21,
					2,
					"paste",
					null,
					"AgAAAC8FAAAAAAAATwUAAAAAAAAAAAAATwUAAAAAAABvBQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAvBQAAAAAAAC8FAAAAAAAAAAAAAAAA8L8"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "dio"
					},
					"BAAAAGAFAAAAAAAAYQUAAAAAAAAAAAAAYQUAAAAAAABhBQAAAAAAAAQAAABtYWluYQUAAAAAAABiBQAAAAAAAAAAAABiBQAAAAAAAGMFAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABgBQAAAAAAAGQFAAAAAAAAAAAAAAAA8L8"
				],
				[
					26,
					2,
					"left_delete",
					null,
					"AgAAAGIFAAAAAAAAYgUAAAAAAAABAAAAb2EFAAAAAAAAYQUAAAAAAAABAAAAaQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABjBQAAAAAAAGMFAAAAAAAAAAAAAAAA8L8"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "oc"
					},
					"AgAAAGEFAAAAAAAAYgUAAAAAAAAAAAAAYgUAAAAAAABjBQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABhBQAAAAAAAGEFAAAAAAAAAAAAAAAA8L8"
				],
				[
					35,
					1,
					"paste",
					null,
					"AgAAAGcFAAAAAAAAagUAAAAAAAAAAAAAagUAAAAAAABqBQAAAAAAAAQAAABtYWlu",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABnBQAAAAAAAGsFAAAAAAAAAAAAAAAA8L8"
				],
				[
					50,
					1,
					"paste",
					null,
					"AgAAAIIFAAAAAAAAhQUAAAAAAAAAAAAAhQUAAAAAAACFBQAAAAAAAAQAAABtYWlu",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACCBQAAAAAAAIYFAAAAAAAAAAAAAAAA8L8"
				],
				[
					54,
					1,
					"paste",
					null,
					"AgAAAJIFAAAAAAAAlQUAAAAAAAAAAAAAlQUAAAAAAACVBQAAAAAAAAQAAABtYWlu",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACSBQAAAAAAAJYFAAAAAAAAAAAAAAAA8L8"
				],
				[
					62,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAE8FAAAAAAAAUAUAAAAAAAAAAAAAUAUAAAAAAABQBQAAAAAAAB4AAAAgICAgY29uc29sZS5sb2coJ2RvYzonLCBkb2MpOwo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABPBQAAAAAAAG0FAAAAAAAAAAAAAAAA8L8"
				],
				[
					65,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAE4FAAAAAAAAUAUAAAAAAAAAAAAAEgUAAAAAAAAUBQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAASBQAAAAAAAE4FAAAAAAAAAAAAAAAA8L8"
				],
				[
					74,
					1,
					"cut",
					null,
					"AQAAAFAFAAAAAAAAUAUAAAAAAAACAAAAKi8",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABQBQAAAAAAAFIFAAAAAAAAAAAAAAAA8L8"
				],
				[
					77,
					1,
					"paste",
					null,
					"AQAAADAFAAAAAAAAMgUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAwBQAAAAAAADAFAAAAAAAAAAAAAAAA8L8"
				],
				[
					84,
					1,
					"paste",
					null,
					"AgAAAEwFAAAAAAAAZwUAAAAAAAAAAAAAZwUAAAAAAABnBQAAAAAAAAQAAABtYWlu",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABMBQAAAAAAAFAFAAAAAAAAAAAAAAAA8L8"
				],
				[
					98,
					1,
					"insert",
					{
						"characters": "dioc"
					},
					"BQAAAEwFAAAAAAAATQUAAAAAAAAAAAAATQUAAAAAAABNBQAAAAAAABsAAAAoZG9jLmVsZW1lbnRzIHx8IGRvYy5wYXJ0cylNBQAAAAAAAE4FAAAAAAAAAAAAAE4FAAAAAAAATwUAAAAAAAAAAAAATwUAAAAAAABQBQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABMBQAAAAAAAGcFAAAAAAAAAAAAAAAA8L8"
				],
				[
					99,
					3,
					"left_delete",
					null,
					"AwAAAE8FAAAAAAAATwUAAAAAAAABAAAAY04FAAAAAAAATgUAAAAAAAABAAAAb00FAAAAAAAATQUAAAAAAAABAAAAaQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABQBQAAAAAAAFAFAAAAAAAAAAAAAAAA8L8"
				],
				[
					100,
					1,
					"insert",
					{
						"characters": "oc"
					},
					"AgAAAE0FAAAAAAAATgUAAAAAAAAAAAAATgUAAAAAAABPBQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABNBQAAAAAAAE0FAAAAAAAAAAAAAAAA8L8"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAGILAAAAAAAAYwsAAAAAAAAAAAAAYwsAAAAAAABkCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYgsAAAAAAABiCwAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AQAAAGQLAAAAAAAAZQsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZAsAAAAAAABkCwAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"left_delete",
					null,
					"AQAAAGQLAAAAAAAAZAsAAAAAAAABAAAAZg",
					"AQAAAAAAAAABAAAAZQsAAAAAAABlCwAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAP4FAAAAAAAA/wUAAAAAAAAAAAAA/wUAAAAAAAAABgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/gUAAAAAAAD+BQAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAADcFAAAAAAAAOAUAAAAAAAAAAAAAOAUAAAAAAAA5BQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANwUAAAAAAAA3BQAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"left_delete",
					null,
					"AQAAABIFAAAAAAAAEgUAAAAAAAAkAAAALyogbGV0IG1haW4gPSBkb2MubWFpbkVsZW1lbnQ7Ki8KICAg",
					"AQAAAAAAAAABAAAAEgUAAAAAAAA2BQAAAAAAAAAAAAAAAD5A"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAJkJAAAAAAAAmgkAAAAAAAAAAAAAmgkAAAAAAACbCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmQkAAAAAAACZCQAAAAAAAAAAAAAAAPC/"
				],
				[
					80,
					1,
					"cut",
					null,
					"AQAAACwIAAAAAAAALAgAAAAAAAAtAAAALnJlcGxhY2UoL1tcdTAwMDAtXHUwMDFGXHUwMDdGLVx1RkZGRl0vZywgJycp",
					"AQAAAAAAAAABAAAALAgAAAAAAABZCAAAAAAAAAAAAAAAAPC/"
				],
				[
					81,
					2,
					"paste",
					null,
					"AgAAACwIAAAAAAAAWQgAAAAAAAAAAAAAWQgAAAAAAACGCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALAgAAAAAAAAsCAAAAAAAAAAAAAAAAPC/"
				],
				[
					84,
					1,
					"left_delete",
					null,
					"AQAAAEQIAAAAAAAARAgAAAAAAAANAAAAXHUwMDdGLVx1RkZGRg",
					"AQAAAAAAAAABAAAARAgAAAAAAABRCAAAAAAAAAAAAAAAAPC/"
				],
				[
					87,
					1,
					"left_delete",
					null,
					"AQAAAFcIAAAAAAAAVwgAAAAAAAANAAAAXHUwMDAwLVx1MDAxRg",
					"AQAAAAAAAAABAAAAVwgAAAAAAABkCAAAAAAAAAAAAAAAAPC/"
				],
				[
					90,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAGwIAAAAAAAAbggAAAAAAAAAAAAATAgAAAAAAABOCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATAgAAAAAAABsCAAAAAAAAAAAAAAAAPC/"
				],
				[
					103,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD4DwAAaW1wb3J0IHsgdW5pcXVlIH0gZnJvbSAnLi9saWIvbWlzYy5qcyc7CmltcG9ydCB7IEVhZ2xlRG9jdW1lbnQgfSBmcm9tICcuL2xpYi9lYWdsZS5qcyc7CmltcG9ydCB7IHRvWE1MIH0gZnJvbSAnLi9saWIvanNvbi5qcyc7CmltcG9ydCBmcyBmcm9tICdmcyc7CmltcG9ydCBVdGlsIGZyb20gJy4vbGliL3V0aWwuanMnOwppbXBvcnQgeyBDb25zb2xlIH0gZnJvbSAnY29uc29sZSc7CmltcG9ydCB7IGRpZ2l0MmNvbG9yLCBHZXRDb2xvckJhbmRzLCBWYWx1ZVRvTnVtYmVyLCBOdW1iZXJUb1ZhbHVlLCBQYXJ0U2NhbGVzIH0gZnJvbSAnLi9saWIvZWRhL2NvbG9yQ29kaW5nLmpzJzsKaW1wb3J0IHsgVW5pdEZvck5hbWUgfSBmcm9tICcuL2xpYi9lZGEvdW5pdHMuanMnOwppbXBvcnQgeyBudW0yY29sb3IsIHNjaWVudGlmaWMgfSBmcm9tICcuL2VhZ2xlLWNvbW1hbmRzLmpzJzsKCmxldCBkb2N1bWVudHMgPSBbXTsKCmZ1bmN0aW9uIHhtbGl6ZShvYmosIGRlcHRoID0gMikgewogIHJldHVybiBvYmoudG9YTUwgPyBvYmoudG9YTUwoKS5yZXBsYWNlKC8+XHMqPC9nLCAnPlxuICAgIDwnKSA6IEVhZ2xlRG9jdW1lbnQudG9YTUwob2JqLCBkZXB0aCkuc3BsaXQoL1xuL2cpWzBdOwp9Cgpjb25zdCBTdWJzdENoYXJzID0gc3RyID0+IHN0ci5yZXBsYWNlKC9ceENFXHhCQy9nLCAnXHUwMEI1JykucmVwbGFjZSgvXHhDRVx4QTkvZywgJ1x1MjEyNicpOwoKYXN5bmMgZnVuY3Rpb24gbWFpbiguLi5hcmdzKSB7CiAgZ2xvYmFsVGhpcy5jb25zb2xlID0gbmV3IENvbnNvbGUoewogICAgaW5zcGVjdE9wdGlvbnM6IHsgYnJlYWtMZW5ndGg6IDEwMCwgY29sb3JzOiB0cnVlLCBkZXB0aDogSW5maW5pdHksIGNvbXBhY3Q6IDIsIGN1c3RvbUluc3BlY3Q6IHRydWUgfQogIH0pOwogIGlmKGFyZ3MubGVuZ3RoID09IDApIGFyZ3MudW5zaGlmdCgnLi4vYW4tdHJvbmljcy9lYWdsZS9IZWFkcGhvbmUtQW1wbGlmaWVyLUNsYXNzQUItYWx0Mi5icmQnKTsKICBhcmdzID0gdW5pcXVlKGFyZ3MpOwogIGZvcihsZXQgYXJnIG9mIGFyZ3MpIHsKICAgIGxldCBkYXRhID0gZnMucmVhZEZpbGVTeW5jKGFyZyk7CiAgICBjb25zb2xlLmxvZyhgbG9hZGVkICcke2FyZ30nIGxlbmd0aDogJHtkYXRhLmxlbmd0aH1gKTsKICAgIGxldCBkb2MgPSBuZXcgRWFnbGVEb2N1bWVudChkYXRhLCBudWxsLCBhcmcpOwogICAgZG9jdW1lbnRzLnB1c2goZG9jKTsKICB9CiAgbGV0IGNvbXBvbmVudHMgPSB7CiAgICBDOiBbXSwKICAgIEw6IFtdLAogICAgUjogW10KICB9OwogIGZvcihsZXQgZG9jIG9mIGRvY3VtZW50cykgewogICAgLy9jb25zb2xlLmxvZygnbWFpbjonLCBkb2MpOwogICAgIGxldCBwYXJ0cyA9IFsuLi4oZG9jLmVsZW1lbnRzIHx8IGRvYy5wYXJ0cyldLm1hcCgoW25hbWUsIGVsZW1dKSA9PiBbCiAgICAgIG5hbWUsCiAgICAgIHR5cGVvZiBlbGVtLnZhbHVlID09ICdzdHJpbmcnID8gU3Vic3RDaGFycyhlbGVtLnZhbHVlKSA6IGVsZW0udmFsdWUKICAgIF0pOwogICAgLy9jb25zb2xlLmxvZygncGFydHMnLCBjb25zb2xlLmNvbmZpZyh7IGNvbXBhY3Q6IGZhbHNlIH0pLCBPYmplY3QuZnJvbUVudHJpZXMocGFydHMpKTsKICAgIGxldCBtYXRjaGVycyA9IFsKICAgICAgWy9eUi8sIC9eWzAtOS5dKyhba0ttTV1bzqlcdTAzQTldP3xbzqlcdTAzQTldPykofFwvWzAtOS5dK1cpL10sCiAgICAgIFsvXkMvLCAvXlswLTkuXSsoW3Budc68XHUwM2JjbV1GP3xGPykofFwvWzAtOS5dK1YpL10sCiAgICAgIFsvXkwvLCAvXlswLTkuXSsoW251zrxcdTAzYmNtXUg/fEg/KS9dCiAgICBdOwoKICAgIGxldCBuYW1lVmFsdWVNYXAgPSBuZXcgTWFwKAogICAgICBwYXJ0cy5maWx0ZXIoKFtuYW1lLCB2YWx1ZV0pID0+IG1hdGNoZXJzLnNvbWUobSA9PiBtWzBdLnRlc3QobmFtZSkgJiYgbVsxXS50ZXN0KHZhbHVlKSkpCiAgICApOwogICAgLy9jb25zb2xlLmxvZygnbmFtZVZhbHVlTWFwJywgbmV3IE1hcChbLi4ubmFtZVZhbHVlTWFwXS5tYXAoKFtuLCB2XSkgPT4gW24sIHZdKSkpOwogICAgZm9yKGxldCBbbmFtZSwgdmFsdWVdIG9mIG5hbWVWYWx1ZU1hcCkgewogICAgICB2YWx1ZSA9ICh2YWx1ZSA/ICcnICsgdmFsdWUgOiAnJykucmVwbGFjZSgvW1x1MDAwMC1cdTAwMUZdL2csICcnKS8qLnJlcGxhY2UoL1tcdTAwN0YtXHVGRkZGXS9nLCAnJykqLzsKICAgICAgY29tcG9uZW50c1tuYW1lWzBdXS5wdXNoKHZhbHVlLnJlcGxhY2UoL1vOqUZIXSQvLCAnJykucmVwbGFjZSgvXlwuLywgJzAuJykpOwogICAgfQogIH0KICBsZXQgaGlzdG9ncmFtcyA9IHt9OwogIGxldCB2YWx1ZXMgPSB7fTsKICAvLwogIC8qIGZvcihsZXQgdmFsdWUgb2YgWzIuMiwgNC43ZTNdKSB7CiAgICBjb25zb2xlLmxvZyhgR2V0Q29sb3JCYW5kcygke3ZhbHVlfSwgMylgLCBHZXRDb2xvckJhbmRzKHZhbHVlLCAyKSk7CiAgfSovCiAgZm9yKGxldCBrZXkgaW4gY29tcG9uZW50cykgewogICAgY29tcG9uZW50c1trZXldLnNvcnQoKTsKICAgIC8vY29uc29sZS5sb2coYGNvbXBvbmVudCAke2tleX1gLCBjb21wb25lbnRzW2tleV0pOwogICAgbGV0IGhpc3QgPSBVdGlsLmhpc3RvZ3JhbShjb21wb25lbnRzW2tleV0sIG5ldyBNYXAoKSk7CgogICAgaGlzdG9ncmFtc1trZXldID0gbmV3IE1hcChbLi4uaGlzdF0uc29ydCgoYSwgYikgPT4gYlsxXSAtIGFbMV0pKTsKICAgIHZhbHVlc1trZXldID0gWy4uLmhpc3RvZ3JhbXNba2V5XV0KICAgICAgLm1hcCgoW3ZhbHVlLCBjb3VudF0pID0+IHsKICAgICAgICByZXR1cm4gW3ZhbHVlIHx8IHNjaWVudGlmaWModmFsdWUpLnRvU3RyaW5nKCksIFZhbHVlVG9OdW1iZXIodmFsdWUpLCBjb3VudF07CiAgICAgIH0pCiAgICAgIC5zb3J0KChhLCBiKSA9PiBhWzFdIC0gYlsxXSkKICAgICAgLm1hcCgoW3ZhbCwgcmF0LCBjb3VudF0pID0+IHsKICAgICAgICAvL2NvbnNvbGUubG9nKCdjJywgeyB2YWwsIHJhdCwgY291bnQgfSk7CiAgICAgICAgY29uc3Qgc2NhbCA9IFBhcnRTY2FsZXNba2V5WzBdXTsKCiAgICAgICAgbGV0IGJhbmRzID0KICAgICAgICAgIGtleVswXSA9PSAnQycgPyBbJyAnXSAvKj8/IEdldENvbG9yQmFuZHMocmF0ICogc2NhbCwgMikubWFwKGIgPT4gYFske2J9XWApKi8gOiBbbnVtMmNvbG9yKHJhdCAqIHNjYWwpXTsKICAgICAgICAvLyAgY29uc29sZS5sb2coJ2MnLCB7IGJhbmRzIH0pOwoKICAgICAgICByZXR1cm4gWwogICAgICAgICAga2V5LAogICAgICAgICAgKHZhbCArICcnKS5zdWJzdHJpbmcoMCwgMTApLnBhZFN0YXJ0KDEwLCAnICcpICsgVW5pdEZvck5hbWUoa2V5KSwKICAgICAgICAgIGJhbmRzLmpvaW4oJyAnKSwKICAgICAgICAgIGAgIMOXICR7Y291bnR9YAogICAgICAgIF0uam9pbignICcpOwogICAgICB9KTsKICB9CiAgLy8gY29uc29sZS5sb2coJ2NvbXBvbmVudHM6JywgY29tcG9uZW50cyk7CgogIGNvbnNvbGUubG9nKAogICAgJ3ZhbHVlczpcbiAgICcgKwogICAgICBPYmplY3QuZW50cmllcyh2YWx1ZXMpCiAgICAgICAgLm1hcCgoW2tleSwgbGlzdF0pID0+IGAke2tleX06XG5cdCR7bGlzdC5qb2luKCdcblxuXHQnKX1gKQogICAgICAgIC5qb2luKCdcbiAgICcpCiAgKTsKICBjb25zb2xlLmxvZyhgXHJcbkZpbmlzaGVkIHF1ZXJ5aW5nYCwgLi4uYXJncyk7CgogIHJldHVybjsKICAvKiBjb25zb2xlLmxvZygnZGlnaXQyY29sb3I6JywgZGlnaXQyY29sb3IpOwogIGZvcihsZXQgdmFsdWUgb2YgWzMzMDAwLCAxODAwLCA0NzAsIDFlNiwgNC43ZTNdKSB7CiAgICBjb25zb2xlLmxvZygnR2V0Q29sb3JCYW5kcycsIEdldENvbG9yQmFuZHModmFsdWUsIDMpKTsKICAgIGNvbnNvbGUubG9nKCdHZXRDb2xvckJhbmRzJywgR2V0Q29sb3JCYW5kcyh2YWx1ZSwgMikpOwogICAgY29uc29sZS5sb2coJ051bWJlclRvVmFsdWUnLCBOdW1iZXJUb1ZhbHVlKHZhbHVlKSk7CiAgfQogIGZvcihsZXQgdmFsdWUgb2YgWyczM2snLCAnMS44aycsICc0NzAnLCAnMS44aycsICc0N2snLCAnMTBNJywgJzQuN2snXSkgewogICAgY29uc29sZS5sb2coYFZhbHVlVG9OdW1iZXIoJHt2YWx1ZX0pYCwgVmFsdWVUb051bWJlcih2YWx1ZSkpOwogIH0qLwp9CgpVdGlsLmNhbGxNYWluKG1haW4sIHRydWUpOwoAAAAAAAAAAN8LAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4AkAAAAAAADgCQAAAAAAAAAAAAAAAPC/"
				],
				[
					115,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAMILAAAAAAAAwwsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwgsAAAAAAADCCwAAAAAAAAAAAAAAAPC/"
				],
				[
					159,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAB4KAAAAAAAAHwoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHgoAAAAAAAAeCgAAAAAAAAAAAAAAAPC/"
				],
				[
					160,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAB8KAAAAAAAAIAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHwoAAAAAAAAfCgAAAAAAAAAAAAAAAPC/"
				],
				[
					161,
					1,
					"paste",
					null,
					"AQAAACAKAAAAAAAALQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIAoAAAAAAAAgCgAAAAAAAAAAAAAAAPC/"
				],
				[
					162,
					1,
					"insert",
					{
						"characters": " ?"
					},
					"AgAAAC0KAAAAAAAALgoAAAAAAAAAAAAALgoAAAAAAAAvCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALQoAAAAAAAAtCgAAAAAAAAAAAAAAAPC/"
				],
				[
					163,
					1,
					"insert",
					{
						"characters": " undefined"
					},
					"CgAAAC8KAAAAAAAAMAoAAAAAAAAAAAAAMAoAAAAAAAAxCgAAAAAAAAAAAAAxCgAAAAAAADIKAAAAAAAAAAAAADIKAAAAAAAAMwoAAAAAAAAAAAAAMwoAAAAAAAA0CgAAAAAAAAAAAAA0CgAAAAAAADUKAAAAAAAAAAAAADUKAAAAAAAANgoAAAAAAAAAAAAANgoAAAAAAAA3CgAAAAAAAAAAAAA3CgAAAAAAADgKAAAAAAAAAAAAADgKAAAAAAAAOQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALwoAAAAAAAAvCgAAAAAAAAAAAAAAAPC/"
				],
				[
					164,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAADkKAAAAAAAAOgoAAAAAAAAAAAAAOgoAAAAAAAA7CgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOQoAAAAAAAA5CgAAAAAAAAAAAAAAAPC/"
				],
				[
					165,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADsKAAAAAAAAPAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOwoAAAAAAAA7CgAAAAAAAAAAAAAAAPC/"
				],
				[
					166,
					1,
					"paste",
					null,
					"AQAAADwKAAAAAAAAfQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPAoAAAAAAAA8CgAAAAAAAAAAAAAAAPC/"
				],
				[
					170,
					1,
					"insert",
					{
						"characters": "90"
					},
					"AwAAAE4KAAAAAAAATwoAAAAAAAAAAAAATwoAAAAAAABPCgAAAAAAAAIAAAA0OE8KAAAAAAAAUAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATgoAAAAAAABQCgAAAAAAAAAAAAAAAPC/"
				],
				[
					177,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAALkBAAAAAAAAugEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuQEAAAAAAAC5AQAAAAAAAAAAAAAAAAAA"
				],
				[
					179,
					1,
					"paste",
					null,
					"AQAAALkBAAAAAAAA4wEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuQEAAAAAAAC5AQAAAAAAAAAAAAAAAAAA"
				],
				[
					183,
					1,
					"left_delete",
					null,
					"AQAAANYBAAAAAAAA1gEAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAA1wEAAAAAAADXAQAAAAAAAAAAAAAAAPC/"
				],
				[
					185,
					1,
					"insert",
					{
						"characters": "lib/"
					},
					"BAAAANcBAAAAAAAA2AEAAAAAAAAAAAAA2AEAAAAAAADZAQAAAAAAAAAAAADZAQAAAAAAANoBAAAAAAAAAAAAANoBAAAAAAAA2wEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1wEAAAAAAADXAQAAAAAAAAAAAAAAAPC/"
				],
				[
					231,
					1,
					"insert",
					{
						"characters": "L"
					},
					"AgAAAFkKAAAAAAAAWgoAAAAAAAAAAAAAWgoAAAAAAABaCgAAAAAAAAEAAABD",
					"AQAAAAAAAAABAAAAWQoAAAAAAABaCgAAAAAAAAAAAAAAAPC/"
				],
				[
					234,
					1,
					"cut",
					null,
					"AQAAAF4KAAAAAAAAXgoAAAAAAAALAAAAdW5kZWZpbmVkIDo",
					"AQAAAAAAAAABAAAAXgoAAAAAAABpCgAAAAAAAAAAAAAAAPC/"
				],
				[
					237,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAAKAKAAAAAAAAoQoAAAAAAAAAAAAAoQoAAAAAAACiCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoAoAAAAAAACgCgAAAAAAAAAAAAAAAPC/"
				],
				[
					238,
					1,
					"insert",
					{
						"characters": " undefined"
					},
					"CgAAAKIKAAAAAAAAowoAAAAAAAAAAAAAowoAAAAAAACkCgAAAAAAAAAAAACkCgAAAAAAAKUKAAAAAAAAAAAAAKUKAAAAAAAApgoAAAAAAAAAAAAApgoAAAAAAACnCgAAAAAAAAAAAACnCgAAAAAAAKgKAAAAAAAAAAAAAKgKAAAAAAAAqQoAAAAAAAAAAAAAqQoAAAAAAACqCgAAAAAAAAAAAACqCgAAAAAAAKsKAAAAAAAAAAAAAKsKAAAAAAAArAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAogoAAAAAAACiCgAAAAAAAAAAAAAAAPC/"
				],
				[
					244,
					1,
					"insert",
					{
						"characters": "72"
					},
					"AwAAAHgKAAAAAAAAeQoAAAAAAAAAAAAAeQoAAAAAAAB5CgAAAAAAAAIAAAA0OXkKAAAAAAAAegoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeAoAAAAAAAB6CgAAAAAAAAAAAAAAAPC/"
				],
				[
					252,
					1,
					"insert",
					{
						"characters": "100"
					},
					"BAAAAHgKAAAAAAAAeQoAAAAAAAAAAAAAeQoAAAAAAAB5CgAAAAAAAAIAAAA3MnkKAAAAAAAAegoAAAAAAAAAAAAAegoAAAAAAAB7CgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeAoAAAAAAAB6CgAAAAAAAAAAAAAAAPC/"
				],
				[
					259,
					1,
					"cut",
					null,
					"AQAAAGMKAAAAAAAAYwoAAAAAAAAxAAAAbmV3IEhTTEEoeyBoOiA5MCwgczogMTAwLCBsOiA2NSwgYTogMSB9KS50b1JHQkEoKQ",
					"AQAAAAAAAAABAAAAYwoAAAAAAACUCgAAAAAAAAAAAAAAAPC/"
				],
				[
					266,
					1,
					"insert",
					{
						"characters": "ket"
					},
					"AwAAAP8JAAAAAAAAAAoAAAAAAAAAAAAAAAoAAAAAAAABCgAAAAAAAAAAAAABCgAAAAAAAAIKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/wkAAAAAAAD/CQAAAAAAAAAAAAAAAPC/"
				],
				[
					267,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAIKAAAAAAAAAwoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAgoAAAAAAAACCgAAAAAAAAAAAAAAAPC/"
				],
				[
					268,
					4,
					"left_delete",
					null,
					"BAAAAAIKAAAAAAAAAgoAAAAAAAABAAAAIAEKAAAAAAAAAQoAAAAAAAABAAAAdAAKAAAAAAAAAAoAAAAAAAABAAAAZf8JAAAAAAAA/wkAAAAAAAABAAAAaw",
					"AQAAAAAAAAABAAAAAwoAAAAAAAADCgAAAAAAAAAAAAAAAPC/"
				],
				[
					269,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAAP8JAAAAAAAAAAoAAAAAAAAAAAAAAAoAAAAAAAABCgAAAAAAAAAAAAABCgAAAAAAAAIKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/wkAAAAAAAD/CQAAAAAAAAAAAAAAAPC/"
				],
				[
					270,
					1,
					"insert",
					{
						"characters": " inductorColor="
					},
					"DwAAAAIKAAAAAAAAAwoAAAAAAAAAAAAAAwoAAAAAAAAECgAAAAAAAAAAAAAECgAAAAAAAAUKAAAAAAAAAAAAAAUKAAAAAAAABgoAAAAAAAAAAAAABgoAAAAAAAAHCgAAAAAAAAAAAAAHCgAAAAAAAAgKAAAAAAAAAAAAAAgKAAAAAAAACQoAAAAAAAAAAAAACQoAAAAAAAAKCgAAAAAAAAAAAAAKCgAAAAAAAAsKAAAAAAAAAAAAAAsKAAAAAAAADAoAAAAAAAAAAAAADAoAAAAAAAANCgAAAAAAAAAAAAANCgAAAAAAAA4KAAAAAAAAAAAAAA4KAAAAAAAADwoAAAAAAAAAAAAADwoAAAAAAAAQCgAAAAAAAAAAAAAQCgAAAAAAABEKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAgoAAAAAAAACCgAAAAAAAAAAAAAAAPC/"
				],
				[
					271,
					1,
					"paste",
					null,
					"AQAAABEKAAAAAAAAQgoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEQoAAAAAAAARCgAAAAAAAAAAAAAAAPC/"
				],
				[
					272,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAEIKAAAAAAAAQwoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQgoAAAAAAABCCgAAAAAAAAAAAAAAAPC/"
				],
				[
					281,
					1,
					"paste",
					null,
					"AQAAAKcKAAAAAAAAtAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApwoAAAAAAACnCgAAAAAAAAAAAAAAAPC/"
				],
				[
					286,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAEMKAAAAAAAARAoAAAAAAAAAAAAARAoAAAAAAABFCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQwoAAAAAAABDCgAAAAAAAAAAAAAAAPC/"
				],
				[
					290,
					1,
					"cut",
					null,
					"AQAAAAIKAAAAAAAAAgoAAAAAAABCAAAAIGluZHVjdG9yQ29sb3I9bmV3IEhTTEEoeyBoOiA5MCwgczogMTAwLCBsOiA2NSwgYTogMSB9KS50b1JHQkEoKTsK",
					"AQAAAAAAAAABAAAAAgoAAAAAAABECgAAAAAAAAAAAAAAAD5A"
				],
				[
					291,
					2,
					"paste",
					null,
					"AgAAAAIKAAAAAAAARAoAAAAAAAAAAAAARAoAAAAAAACGCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAgoAAAAAAAACCgAAAAAAAAAAAAAAAPC/"
				],
				[
					297,
					1,
					"insert",
					{
						"characters": "161"
					},
					"BAAAAGEKAAAAAAAAYgoAAAAAAAAAAAAAYgoAAAAAAABiCgAAAAAAAAIAAAA5MGIKAAAAAAAAYwoAAAAAAAAAAAAAYwoAAAAAAABkCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYQoAAAAAAABjCgAAAAAAAAAAAAAAAPC/"
				],
				[
					299,
					2,
					"right_delete",
					null,
					"AgAAAGkKAAAAAAAAaQoAAAAAAAABAAAAMWkKAAAAAAAAaQoAAAAAAAABAAAAMA",
					"AQAAAAAAAAABAAAAaQoAAAAAAABpCgAAAAAAAAAAAAAAAPC/"
				],
				[
					300,
					1,
					"insert",
					{
						"characters": "6"
					},
					"AQAAAGkKAAAAAAAAagoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaQoAAAAAAABpCgAAAAAAAAAAAAAAAPC/"
				],
				[
					302,
					2,
					"right_delete",
					null,
					"AgAAAHEKAAAAAAAAcQoAAAAAAAABAAAANXEKAAAAAAAAcQoAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAcQoAAAAAAABxCgAAAAAAAAAAAAAAAPC/"
				],
				[
					303,
					1,
					"left_delete",
					null,
					"AQAAAHAKAAAAAAAAcAoAAAAAAAABAAAANg",
					"AQAAAAAAAAABAAAAcQoAAAAAAABxCgAAAAAAAAAAAAAAAPC/"
				],
				[
					304,
					1,
					"insert",
					{
						"characters": "50,"
					},
					"AwAAAHAKAAAAAAAAcQoAAAAAAAAAAAAAcQoAAAAAAAByCgAAAAAAAAAAAAByCgAAAAAAAHMKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcAoAAAAAAABwCgAAAAAAAAAAAAAAAPC/"
				],
				[
					319,
					1,
					"cut",
					null,
					"AQAAAEQKAAAAAAAARAoAAAAAAABCAAAAIGluZHVjdG9yQ29sb3I9bmV3IEhTTEEoeyBoOiAxNjEsIHM6IDYwLCBsOiA1MCwgYTogMSB9KS50b1JHQkEoKTsK",
					"AQAAAAAAAAABAAAARAoAAAAAAACGCgAAAAAAAAAAAAAAAPC/"
				],
				[
					320,
					2,
					"paste",
					null,
					"AgAAAEQKAAAAAAAAhgoAAAAAAAAAAAAAhgoAAAAAAADICgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARAoAAAAAAABECgAAAAAAAAAAAAAAAPC/"
				],
				[
					324,
					1,
					"insert",
					{
						"characters": "90"
					},
					"AwAAAKMKAAAAAAAApAoAAAAAAAAAAAAApAoAAAAAAACkCgAAAAAAAAMAAAAxNjGkCgAAAAAAAKUKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAowoAAAAAAACmCgAAAAAAAAAAAAAAAPC/"
				],
				[
					330,
					1,
					"insert",
					{
						"characters": "90"
					},
					"AwAAAKoKAAAAAAAAqwoAAAAAAAAAAAAAqwoAAAAAAACrCgAAAAAAAAIAAAA2MKsKAAAAAAAArAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqgoAAAAAAACsCgAAAAAAAAAAAAAAAPC/"
				],
				[
					336,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAIcKAAAAAAAAiAoAAAAAAAAAAAAAiAoAAAAAAACJCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhwoAAAAAAACHCgAAAAAAAAAAAAAAACRA"
				],
				[
					345,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAAMKAAAAAAAABAoAAAAAAAAAAAAABAoAAAAAAAAECgAAAAAAAEIAAABpbmR1Y3RvckNvbG9yPW5ldyBIU0xBKHsgaDogOTAsIHM6IDEwMCwgbDogNjUsIGE6IDEgfSkudG9SR0JBKCk7CiA",
					"AQAAAAAAAAABAAAAAwoAAAAAAABFCgAAAAAAAAAAAAAAAPC/"
				],
				[
					360,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADbDAAAaW1wb3J0IHsgdW5pcXVlIH0gZnJvbSAnLi9saWIvbWlzYy5qcyc7CmltcG9ydCB7IEVhZ2xlRG9jdW1lbnQgfSBmcm9tICcuL2xpYi9lYWdsZS5qcyc7CmltcG9ydCB7IHRvWE1MIH0gZnJvbSAnLi9saWIvanNvbi5qcyc7CmltcG9ydCBmcyBmcm9tICdmcyc7CmltcG9ydCBVdGlsIGZyb20gJy4vbGliL3V0aWwuanMnOwppbXBvcnQgeyBDb25zb2xlIH0gZnJvbSAnY29uc29sZSc7CmltcG9ydCB7IGRpZ2l0MmNvbG9yLCBHZXRDb2xvckJhbmRzLCBWYWx1ZVRvTnVtYmVyLCBOdW1iZXJUb1ZhbHVlLCBQYXJ0U2NhbGVzIH0gZnJvbSAnLi9saWIvZWRhL2NvbG9yQ29kaW5nLmpzJzsKaW1wb3J0IHsgVW5pdEZvck5hbWUgfSBmcm9tICcuL2xpYi9lZGEvdW5pdHMuanMnOwppbXBvcnQgeyBudW0yY29sb3IsIHNjaWVudGlmaWMgfSBmcm9tICcuL2VhZ2xlLWNvbW1hbmRzLmpzJzsKaW1wb3J0IHsgUkdCQSwgSFNMQSB9IGZyb20gJy4vbGliL2NvbG9yLmpzJzsKCmxldCBkb2N1bWVudHMgPSBbXTsKCmZ1bmN0aW9uIHhtbGl6ZShvYmosIGRlcHRoID0gMikgewogIHJldHVybiBvYmoudG9YTUwgPyBvYmoudG9YTUwoKS5yZXBsYWNlKC8+XHMqPC9nLCAnPlxuICAgIDwnKSA6IEVhZ2xlRG9jdW1lbnQudG9YTUwob2JqLCBkZXB0aCkuc3BsaXQoL1xuL2cpWzBdOwp9CmNvbnN0IFN1YnN0Q2hhcnMgPSBzdHIgPT4gc3RyLnJlcGxhY2UoL1x4Q0VceEJDL2csICdcdTAwQjUnKS5yZXBsYWNlKC9ceENFXHhBOS9nLCAnXHUyMTI2Jyk7Cgphc3luYyBmdW5jdGlvbiBtYWluKC4uLmFyZ3MpIHsKICBnbG9iYWxUaGlzLmNvbnNvbGUgPSBuZXcgQ29uc29sZSh7CiAgICBpbnNwZWN0T3B0aW9uczogeyBicmVha0xlbmd0aDogMTAwLCBjb2xvcnM6IHRydWUsIGRlcHRoOiBJbmZpbml0eSwgY29tcGFjdDogMiwgY3VzdG9tSW5zcGVjdDogdHJ1ZSB9CiAgfSk7CiAgaWYoYXJncy5sZW5ndGggPT0gMCkgYXJncy51bnNoaWZ0KCcuLi9hbi10cm9uaWNzL2VhZ2xlL0hlYWRwaG9uZS1BbXBsaWZpZXItQ2xhc3NBQi1hbHQyLmJyZCcpOwogIGFyZ3MgPSB1bmlxdWUoYXJncyk7CiAgZm9yKGxldCBhcmcgb2YgYXJncykgewogICAgbGV0IGRhdGEgPSBmcy5yZWFkRmlsZVN5bmMoYXJnKTsKICAgIGNvbnNvbGUubG9nKGBsb2FkZWQgJyR7YXJnfScgbGVuZ3RoOiAke2RhdGEubGVuZ3RofWApOwogICAgbGV0IGRvYyA9IG5ldyBFYWdsZURvY3VtZW50KGRhdGEsIG51bGwsIGFyZyk7CiAgICBkb2N1bWVudHMucHVzaChkb2MpOwogIH0KICBsZXQgY29tcG9uZW50cyA9IHsKICAgIEM6IFtdLAogICAgTDogW10sCiAgICBSOiBbXQogIH07CiAgZm9yKGxldCBkb2Mgb2YgZG9jdW1lbnRzKSB7CiAgICAgbGV0IHBhcnRzID0gWy4uLihkb2MuZWxlbWVudHMgfHwgZG9jLnBhcnRzKV0ubWFwKChbbmFtZSwgZWxlbV0pID0+IFsKICAgICAgbmFtZSwKICAgICAgdHlwZW9mIGVsZW0udmFsdWUgPT0gJ3N0cmluZycgPyBTdWJzdENoYXJzKGVsZW0udmFsdWUpIDogZWxlbS52YWx1ZQogICAgXSk7CiAgICBsZXQgbWF0Y2hlcnMgPSBbCiAgICAgIFsvXlIvLCAvXlswLTkuXSsoW2tLbU1dW86pXHUwM0E5XT98W86pXHUwM0E5XT8pKHxcL1swLTkuXStXKS9dLAogICAgICBbL15DLywgL15bMC05Ll0rKFtwbnXOvFx1MDNiY21dRj98Rj8pKHxcL1swLTkuXStWKS9dLAogICAgICBbL15MLywgL15bMC05Ll0rKFtudc68XHUwM2JjbV1IP3xIPykvXQogICAgXTsKICAgIGxldCBuYW1lVmFsdWVNYXAgPSBuZXcgTWFwKAogICAgICBwYXJ0cy5maWx0ZXIoKFtuYW1lLCB2YWx1ZV0pID0+IG1hdGNoZXJzLnNvbWUobSA9PiBtWzBdLnRlc3QobmFtZSkgJiYgbVsxXS50ZXN0KHZhbHVlKSkpCiAgICApOwogICAgZm9yKGxldCBbbmFtZSwgdmFsdWVdIG9mIG5hbWVWYWx1ZU1hcCkgewogICAgICB2YWx1ZSA9ICh2YWx1ZSA/ICcnICsgdmFsdWUgOiAnJykucmVwbGFjZSgvW1x1MDAwMC1cdTAwMUZdL2csICcnKTsKICAgICAgY29tcG9uZW50c1tuYW1lWzBdXS5wdXNoKHZhbHVlLnJlcGxhY2UoL1vOqUZIXSQvLCAnJykucmVwbGFjZSgvXlwuLywgJzAuJykpOwogICAgfQogIH0KICBsZXQgaGlzdG9ncmFtcyA9IHt9OwogIGxldCB2YWx1ZXMgPSB7fTsKICBmb3IobGV0IGtleSBpbiBjb21wb25lbnRzKSB7CiAgICBjb21wb25lbnRzW2tleV0uc29ydCgpOwogICAgbGV0IGhpc3QgPSBVdGlsLmhpc3RvZ3JhbShjb21wb25lbnRzW2tleV0sIG5ldyBNYXAoKSk7CgogICAgaGlzdG9ncmFtc1trZXldID0gbmV3IE1hcChbLi4uaGlzdF0uc29ydCgoYSwgYikgPT4gYlsxXSAtIGFbMV0pKTsKICAgIHZhbHVlc1trZXldID0gWy4uLmhpc3RvZ3JhbXNba2V5XV0KICAgICAgLm1hcCgoW3ZhbHVlLCBjb3VudF0pID0+IHsKICAgICAgICByZXR1cm4gW3ZhbHVlIHx8IHNjaWVudGlmaWModmFsdWUpLnRvU3RyaW5nKCksIFZhbHVlVG9OdW1iZXIodmFsdWUpLCBjb3VudF07CiAgICAgIH0pCiAgICAgIC5zb3J0KChhLCBiKSA9PiBhWzFdIC0gYlsxXSkKICAgICAgLm1hcCgoW3ZhbCwgcmF0LCBjb3VudF0pID0+IHsKICAgICAgICBjb25zdCBzY2FsID0gUGFydFNjYWxlc1trZXlbMF1dOwpsZXQgIGluZHVjdG9yQ29sb3I9bmV3IEhTTEEoeyBoOiAxNjEsIHM6IDYwLCBsOiA1MCwgYTogMSB9KS50b1JHQkEoKTsKIC8vaW5kdWN0b3JDb2xvcj1uZXcgSFNMQSh7IGg6IDkwLCBzOiA5MCwgbDogNTAsIGE6IDEgfSkudG9SR0JBKCk7CgoKICAgICAgICBsZXQgYmFuZHMgPQogICAgICAgICAga2V5WzBdID09ICdDJyA/IFsnICddICA6IFtudW0yY29sb3IocmF0ICogc2NhbCwga2V5WzBdID09ICdMJyA/ICBbLi4uaW5kdWN0b3JDb2xvcl0uc2xpY2UoMCwgMykgOiB1bmRlZmluZWQpXTsKICAgICAgICByZXR1cm4gWwogICAgICAgICAga2V5LAogICAgICAgICAgKHZhbCArICcnKS5zdWJzdHJpbmcoMCwgMTApLnBhZFN0YXJ0KDEwLCAnICcpICsgVW5pdEZvck5hbWUoa2V5KSwKICAgICAgICAgIGJhbmRzLmpvaW4oJyAnKSwKICAgICAgICAgIGAgIMOXICR7Y291bnR9YAogICAgICAgIF0uam9pbignICcpOwogICAgICB9KTsKICB9CiAgY29uc29sZS5sb2coCiAgICAndmFsdWVzOlxuICAgJyArCiAgICAgIE9iamVjdC5lbnRyaWVzKHZhbHVlcykKICAgICAgICAubWFwKChba2V5LCBsaXN0XSkgPT4gYCR7a2V5fTpcblx0JHtsaXN0LmpvaW4oJ1xuXG5cdCcpfWApCiAgICAgICAgLmpvaW4oJ1xuICAgJykKICApOwogIGNvbnNvbGUubG9nKGBcclxuRmluaXNoZWQgcXVlcnlpbmdgLCAuLi5hcmdzKTsKICByZXR1cm47Cgp9CgpVdGlsLmNhbGxNYWluKG1haW4sIHRydWUpOwoKAAAAAAAAAADfDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHgoAAAAAAAAgCgAAAAAAAAAAAAAAAPC/"
				],
				[
					363,
					1,
					"cut",
					null,
					"AQAAAFcKAAAAAAAAVwoAAAAAAABAAAAAaW5kdWN0b3JDb2xvcj1uZXcgSFNMQSh7IGg6IDkwLCBzOiA5MCwgbDogNTAsIGE6IDEgfSkudG9SR0JBKCk7Cg",
					"AQAAAAAAAAABAAAAVwoAAAAAAACXCgAAAAAAAAAAAAAAAPC/"
				],
				[
					364,
					2,
					"paste",
					null,
					"AgAAAFcKAAAAAAAAlwoAAAAAAAAAAAAAlwoAAAAAAADXCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVwoAAAAAAABXCgAAAAAAAAAAAAAAAPC/"
				],
				[
					368,
					1,
					"insert",
					{
						"characters": "1127"
					},
					"BQAAALMKAAAAAAAAtAoAAAAAAAAAAAAAtAoAAAAAAAC0CgAAAAAAAAIAAAA5MLQKAAAAAAAAtQoAAAAAAAAAAAAAtQoAAAAAAAC2CgAAAAAAAAAAAAC2CgAAAAAAALcKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAswoAAAAAAAC1CgAAAAAAAAAAAAAAAPC/"
				],
				[
					369,
					2,
					"left_delete",
					null,
					"AgAAALYKAAAAAAAAtgoAAAAAAAABAAAAN7UKAAAAAAAAtQoAAAAAAAABAAAAMg",
					"AQAAAAAAAAABAAAAtwoAAAAAAAC3CgAAAAAAAAAAAAAAAPC/"
				],
				[
					370,
					1,
					"insert",
					{
						"characters": "7"
					},
					"AQAAALUKAAAAAAAAtgoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtQoAAAAAAAC1CgAAAAAAAAAAAAAAAPC/"
				],
				[
					376,
					1,
					"insert",
					{
						"characters": "70"
					},
					"AwAAALsKAAAAAAAAvAoAAAAAAAAAAAAAvAoAAAAAAAC8CgAAAAAAAAIAAAA5MLwKAAAAAAAAvQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuwoAAAAAAAC9CgAAAAAAAAAAAAAAAPC/"
				],
				[
					380,
					1,
					"insert",
					{
						"characters": "60"
					},
					"AwAAAMIKAAAAAAAAwwoAAAAAAAAAAAAAwwoAAAAAAADDCgAAAAAAAAIAAAA1MMMKAAAAAAAAxAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwgoAAAAAAADECgAAAAAAAAAAAAAAAPC/"
				],
				[
					384,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAJcKAAAAAAAAmAoAAAAAAAAAAAAAmAoAAAAAAACZCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlwoAAAAAAACXCgAAAAAAAAAAAAAAAAAA"
				],
				[
					389,
					3,
					"right_delete",
					null,
					"AwAAAFQKAAAAAAAAVAoAAAAAAAABAAAAIFQKAAAAAAAAVAoAAAAAAAABAAAAL1QKAAAAAAAAVAoAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAAVAoAAAAAAABUCgAAAAAAAAAAAAAAAPC/"
				],
				[
					392,
					1,
					"insert",
					{
						"characters": "&&"
					},
					"AgAAAFQKAAAAAAAAVQoAAAAAAAAAAAAAVQoAAAAAAABWCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVAoAAAAAAABUCgAAAAAAAAAAAAAAAPC/"
				],
				[
					395,
					2,
					"left_delete",
					null,
					"AgAAAFUKAAAAAAAAVQoAAAAAAAABAAAAJlQKAAAAAAAAVAoAAAAAAAABAAAAJg",
					"AQAAAAAAAAABAAAAVgoAAAAAAABWCgAAAAAAAAAAAAAAAPC/"
				],
				[
					396,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAFQKAAAAAAAAVQoAAAAAAAAAAAAAVQoAAAAAAABWCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVAoAAAAAAABUCgAAAAAAAAAAAAAAAPC/"
				],
				[
					401,
					2,
					"right_delete",
					null,
					"AgAAAJYKAAAAAAAAlgoAAAAAAAABAAAAL5YKAAAAAAAAlgoAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAAlgoAAAAAAACWCgAAAAAAAAAAAAAAAAAA"
				],
				[
					407,
					1,
					"insert",
					{
						"characters": "70"
					},
					"AwAAAMEKAAAAAAAAwgoAAAAAAAAAAAAAwgoAAAAAAADCCgAAAAAAAAIAAAA2MMIKAAAAAAAAwwoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwQoAAAAAAADDCgAAAAAAAAAAAAAAAPC/"
				],
				[
					410,
					2,
					"left_delete",
					null,
					"AgAAAMIKAAAAAAAAwgoAAAAAAAABAAAAMMEKAAAAAAAAwQoAAAAAAAABAAAANw",
					"AQAAAAAAAAABAAAAwwoAAAAAAADDCgAAAAAAAAAAAAAAAPC/"
				],
				[
					411,
					1,
					"insert",
					{
						"characters": "60"
					},
					"AgAAAMEKAAAAAAAAwgoAAAAAAAAAAAAAwgoAAAAAAADDCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwQoAAAAAAADBCgAAAAAAAAAAAAAAAPC/"
				],
				[
					415,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAJYKAAAAAAAAlwoAAAAAAAAAAAAAlwoAAAAAAACYCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlgoAAAAAAACWCgAAAAAAAAAAAAAAAAAA"
				],
				[
					431,
					2,
					"left_delete",
					null,
					"AgAAAHoEAAAAAAAAegQAAAAAAAAWAAAAbGVuZ3RoOiAke2RhdGEubGVuZ3RofXkEAAAAAAAAeQQAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAegQAAAAAAACQBAAAAAAAAAAAAAAAAPC/"
				],
				[
					449,
					1,
					"insert",
					{
						"characters": "'+'"
					},
					"AwAAAC4MAAAAAAAALwwAAAAAAAAAAAAALwwAAAAAAAAwDAAAAAAAAAAAAAAwDAAAAAAAADEMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALgwAAAAAAAAuDAAAAAAAAAAAAAAAAPC/"
				],
				[
					456,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAATDQAAaW1wb3J0IHsgdW5pcXVlIH0gZnJvbSAnLi9saWIvbWlzYy5qcyc7CmltcG9ydCB7IEVhZ2xlRG9jdW1lbnQgfSBmcm9tICcuL2xpYi9lYWdsZS5qcyc7CmltcG9ydCB7IHRvWE1MIH0gZnJvbSAnLi9saWIvanNvbi5qcyc7CmltcG9ydCBmcyBmcm9tICdmcyc7CmltcG9ydCBVdGlsIGZyb20gJy4vbGliL3V0aWwuanMnOwppbXBvcnQgeyBDb25zb2xlIH0gZnJvbSAnY29uc29sZSc7CmltcG9ydCB7IGRpZ2l0MmNvbG9yLCBHZXRDb2xvckJhbmRzLCBWYWx1ZVRvTnVtYmVyLCBOdW1iZXJUb1ZhbHVlLCBQYXJ0U2NhbGVzIH0gZnJvbSAnLi9saWIvZWRhL2NvbG9yQ29kaW5nLmpzJzsKaW1wb3J0IHsgVW5pdEZvck5hbWUgfSBmcm9tICcuL2xpYi9lZGEvdW5pdHMuanMnOwppbXBvcnQgeyBudW0yY29sb3IsIHNjaWVudGlmaWMgfSBmcm9tICcuL2VhZ2xlLWNvbW1hbmRzLmpzJzsKaW1wb3J0IHsgUkdCQSwgSFNMQSB9IGZyb20gJy4vbGliL2NvbG9yLmpzJzsKCmxldCBkb2N1bWVudHMgPSBbXTsKCmZ1bmN0aW9uIHhtbGl6ZShvYmosIGRlcHRoID0gMikgewogIHJldHVybiBvYmoudG9YTUwgPyBvYmoudG9YTUwoKS5yZXBsYWNlKC8+XHMqPC9nLCAnPlxuICAgIDwnKSA6IEVhZ2xlRG9jdW1lbnQudG9YTUwob2JqLCBkZXB0aCkuc3BsaXQoL1xuL2cpWzBdOwp9CmNvbnN0IFN1YnN0Q2hhcnMgPSBzdHIgPT4gc3RyLnJlcGxhY2UoL1x4Q0VceEJDL2csICdcdTAwQjUnKS5yZXBsYWNlKC9ceENFXHhBOS9nLCAnXHUyMTI2Jyk7Cgphc3luYyBmdW5jdGlvbiBtYWluKC4uLmFyZ3MpIHsKICBnbG9iYWxUaGlzLmNvbnNvbGUgPSBuZXcgQ29uc29sZSh7CiAgICBpbnNwZWN0T3B0aW9uczogeyBicmVha0xlbmd0aDogMTAwLCBjb2xvcnM6IHRydWUsIGRlcHRoOiBJbmZpbml0eSwgY29tcGFjdDogMiwgY3VzdG9tSW5zcGVjdDogdHJ1ZSB9CiAgfSk7CiAgaWYoYXJncy5sZW5ndGggPT0gMCkgYXJncy51bnNoaWZ0KCcuLi9hbi10cm9uaWNzL2VhZ2xlL0hlYWRwaG9uZS1BbXBsaWZpZXItQ2xhc3NBQi1hbHQyLmJyZCcpOwogIGFyZ3MgPSB1bmlxdWUoYXJncyk7CiAgZm9yKGxldCBhcmcgb2YgYXJncykgewogICAgbGV0IGRhdGEgPSBmcy5yZWFkRmlsZVN5bmMoYXJnKTsKICAgIGNvbnNvbGUubG9nKGBsb2FkZWQgJyR7YXJnfSdgKTsKICAgIGxldCBkb2MgPSBuZXcgRWFnbGVEb2N1bWVudChkYXRhLCBudWxsLCBhcmcpOwogICAgZG9jdW1lbnRzLnB1c2goZG9jKTsKICB9CiAgbGV0IGNvbXBvbmVudHMgPSB7CiAgICBDOiBbXSwKICAgIEw6IFtdLAogICAgUjogW10KICB9OwogIGZvcihsZXQgZG9jIG9mIGRvY3VtZW50cykgewogICAgbGV0IHBhcnRzID0gWy4uLihkb2MuZWxlbWVudHMgfHwgZG9jLnBhcnRzKV0ubWFwKChbbmFtZSwgZWxlbV0pID0+IFsKICAgICAgbmFtZSwKICAgICAgdHlwZW9mIGVsZW0udmFsdWUgPT0gJ3N0cmluZycgPyBTdWJzdENoYXJzKGVsZW0udmFsdWUpIDogZWxlbS52YWx1ZQogICAgXSk7CiAgICBsZXQgbWF0Y2hlcnMgPSBbCiAgICAgIFsvXlIvLCAvXlswLTkuXSsoW2tLbU1dW86pXHUwM0E5XT98W86pXHUwM0E5XT8pKHxcL1swLTkuXStXKS9dLAogICAgICBbL15DLywgL15bMC05Ll0rKFtwbnXOvFx1MDNiY21dRj98Rj8pKHxcL1swLTkuXStWKS9dLAogICAgICBbL15MLywgL15bMC05Ll0rKFtudc68XHUwM2JjbV1IP3xIPykvXQogICAgXTsKICAgIGxldCBuYW1lVmFsdWVNYXAgPSBuZXcgTWFwKAogICAgICBwYXJ0cy5maWx0ZXIoKFtuYW1lLCB2YWx1ZV0pID0+IG1hdGNoZXJzLnNvbWUobSA9PiBtWzBdLnRlc3QobmFtZSkgJiYgbVsxXS50ZXN0KHZhbHVlKSkpCiAgICApOwogICAgZm9yKGxldCBbbmFtZSwgdmFsdWVdIG9mIG5hbWVWYWx1ZU1hcCkgewogICAgICB2YWx1ZSA9ICh2YWx1ZSA/ICcnICsgdmFsdWUgOiAnJykucmVwbGFjZSgvW1x1MDAwMC1cdTAwMUZdL2csICcnKTsKICAgICAgY29tcG9uZW50c1tuYW1lWzBdXS5wdXNoKHZhbHVlLnJlcGxhY2UoL1vOqUZIXSQvLCAnJykucmVwbGFjZSgvXlwuLywgJzAuJykpOwogICAgfQogIH0KICBsZXQgaGlzdG9ncmFtcyA9IHt9OwogIGxldCB2YWx1ZXMgPSB7fTsKICBmb3IobGV0IGtleSBpbiBjb21wb25lbnRzKSB7CiAgICBjb21wb25lbnRzW2tleV0uc29ydCgpOwogICAgbGV0IGhpc3QgPSBVdGlsLmhpc3RvZ3JhbShjb21wb25lbnRzW2tleV0sIG5ldyBNYXAoKSk7CgogICAgaGlzdG9ncmFtc1trZXldID0gbmV3IE1hcChbLi4uaGlzdF0uc29ydCgoYSwgYikgPT4gYlsxXSAtIGFbMV0pKTsKICAgIHZhbHVlc1trZXldID0gWy4uLmhpc3RvZ3JhbXNba2V5XV0KICAgICAgLm1hcCgoW3ZhbHVlLCBjb3VudF0pID0+IHsKICAgICAgICByZXR1cm4gW3ZhbHVlIHx8IHNjaWVudGlmaWModmFsdWUpLnRvU3RyaW5nKCksIFZhbHVlVG9OdW1iZXIodmFsdWUpLCBjb3VudF07CiAgICAgIH0pCiAgICAgIC5zb3J0KChhLCBiKSA9PiBhWzFdIC0gYlsxXSkKICAgICAgLm1hcCgoW3ZhbCwgcmF0LCBjb3VudF0pID0+IHsKICAgICAgICBjb25zdCBzY2FsID0gUGFydFNjYWxlc1trZXlbMF1dOwogICAgICAgIGxldCBpbmR1Y3RvckNvbG9yID0gbmV3IEhTTEEoeyBoOiAxNjEsIHM6IDYwLCBsOiA1MCwgYTogMSB9KS50b1JHQkEoKTsKICAgICAgIC8vaW5kdWN0b3JDb2xvcj1uZXcgSFNMQSh7IGg6IDkwLCBzOiA5MCwgbDogNTAsIGE6IDEgfSkudG9SR0JBKCk7Ci8vaW5kdWN0b3JDb2xvcj1uZXcgSFNMQSh7IGg6IDExNywgczogNzAsIGw6IDYwLCBhOiAxIH0pLnRvUkdCQSgpOwoKICAgICAgICBsZXQgYmFuZHMgPQogICAgICAgICAga2V5WzBdID09ICdDJyA/IFsnICddIDogW251bTJjb2xvcihyYXQgKiBzY2FsLCBrZXlbMF0gPT0gJ0wnID8gWy4uLmluZHVjdG9yQ29sb3JdLnNsaWNlKDAsIDMpIDogdW5kZWZpbmVkKV07CiAgICAgICAgcmV0dXJuIFsKICAgICAgICAgIGtleSwKICAgICAgICAgICh2YWwgKyAnJykuc3Vic3RyaW5nKDAsIDEwKS5wYWRTdGFydCgxMCwgJyAnKSArIFVuaXRGb3JOYW1lKGtleSksCiAgICAgICAgICBiYW5kcy5qb2luKCcgJyksCiAgICAgICAgICBgICDDlyAke2NvdW50fWAKICAgICAgICBdLmpvaW4oJyAnKTsKICAgICAgfSk7CiAgfQogIGNvbnNvbGUubG9nKAogICAgJ3ZhbHVlczpcbicrJyAgICcgKwogICAgICBPYmplY3QuZW50cmllcyh2YWx1ZXMpCiAgICAgICAgLm1hcCgoW2tleSwgbGlzdF0pID0+IGAke2tleX06XG5cdCR7bGlzdC5qb2luKCdcblxuXHQnKX1gKQogICAgICAgIC5qb2luKCdcbiAgICcpCiAgKTsKICBjb25zb2xlLmxvZyhgXHJcbkZpbmlzaGVkIHF1ZXJ5aW5nYCwgLi4uYXJncyk7CiAgcmV0dXJuOwp9CgpVdGlsLmNhbGxNYWluKG1haW4sIHRydWUpOwoAAAAAAAAAAB4NAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMAwAAAAAAAAwDAAAAAAAAAAAAAAAAPC/"
				],
				[
					460,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAC0MAAAAAAAALgwAAAAAAAAAAAAALgwAAAAAAAAvDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALQwAAAAAAAAtDAAAAAAAAAAAAAAAAERA"
				],
				[
					463,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAmDQAAaW1wb3J0IHsgdW5pcXVlIH0gZnJvbSAnLi9saWIvbWlzYy5qcyc7CmltcG9ydCB7IEVhZ2xlRG9jdW1lbnQgfSBmcm9tICcuL2xpYi9lYWdsZS5qcyc7CmltcG9ydCB7IHRvWE1MIH0gZnJvbSAnLi9saWIvanNvbi5qcyc7CmltcG9ydCBmcyBmcm9tICdmcyc7CmltcG9ydCBVdGlsIGZyb20gJy4vbGliL3V0aWwuanMnOwppbXBvcnQgeyBDb25zb2xlIH0gZnJvbSAnY29uc29sZSc7CmltcG9ydCB7IGRpZ2l0MmNvbG9yLCBHZXRDb2xvckJhbmRzLCBWYWx1ZVRvTnVtYmVyLCBOdW1iZXJUb1ZhbHVlLCBQYXJ0U2NhbGVzIH0gZnJvbSAnLi9saWIvZWRhL2NvbG9yQ29kaW5nLmpzJzsKaW1wb3J0IHsgVW5pdEZvck5hbWUgfSBmcm9tICcuL2xpYi9lZGEvdW5pdHMuanMnOwppbXBvcnQgeyBudW0yY29sb3IsIHNjaWVudGlmaWMgfSBmcm9tICcuL2VhZ2xlLWNvbW1hbmRzLmpzJzsKaW1wb3J0IHsgUkdCQSwgSFNMQSB9IGZyb20gJy4vbGliL2NvbG9yLmpzJzsKCmxldCBkb2N1bWVudHMgPSBbXTsKCmZ1bmN0aW9uIHhtbGl6ZShvYmosIGRlcHRoID0gMikgewogIHJldHVybiBvYmoudG9YTUwgPyBvYmoudG9YTUwoKS5yZXBsYWNlKC8+XHMqPC9nLCAnPlxuICAgIDwnKSA6IEVhZ2xlRG9jdW1lbnQudG9YTUwob2JqLCBkZXB0aCkuc3BsaXQoL1xuL2cpWzBdOwp9CmNvbnN0IFN1YnN0Q2hhcnMgPSBzdHIgPT4gc3RyLnJlcGxhY2UoL1x4Q0VceEJDL2csICdcdTAwQjUnKS5yZXBsYWNlKC9ceENFXHhBOS9nLCAnXHUyMTI2Jyk7Cgphc3luYyBmdW5jdGlvbiBtYWluKC4uLmFyZ3MpIHsKICBnbG9iYWxUaGlzLmNvbnNvbGUgPSBuZXcgQ29uc29sZSh7CiAgICBpbnNwZWN0T3B0aW9uczogeyBicmVha0xlbmd0aDogMTAwLCBjb2xvcnM6IHRydWUsIGRlcHRoOiBJbmZpbml0eSwgY29tcGFjdDogMiwgY3VzdG9tSW5zcGVjdDogdHJ1ZSB9CiAgfSk7CiAgaWYoYXJncy5sZW5ndGggPT0gMCkgYXJncy51bnNoaWZ0KCcuLi9hbi10cm9uaWNzL2VhZ2xlL0hlYWRwaG9uZS1BbXBsaWZpZXItQ2xhc3NBQi1hbHQyLmJyZCcpOwogIGFyZ3MgPSB1bmlxdWUoYXJncyk7CiAgZm9yKGxldCBhcmcgb2YgYXJncykgewogICAgbGV0IGRhdGEgPSBmcy5yZWFkRmlsZVN5bmMoYXJnKTsKICAgIGNvbnNvbGUubG9nKGBsb2FkZWQgJyR7YXJnfSdgKTsKICAgIGxldCBkb2MgPSBuZXcgRWFnbGVEb2N1bWVudChkYXRhLCBudWxsLCBhcmcpOwogICAgZG9jdW1lbnRzLnB1c2goZG9jKTsKICB9CiAgbGV0IGNvbXBvbmVudHMgPSB7CiAgICBDOiBbXSwKICAgIEw6IFtdLAogICAgUjogW10KICB9OwogIGZvcihsZXQgZG9jIG9mIGRvY3VtZW50cykgewogICAgbGV0IHBhcnRzID0gWy4uLihkb2MuZWxlbWVudHMgfHwgZG9jLnBhcnRzKV0ubWFwKChbbmFtZSwgZWxlbV0pID0+IFsKICAgICAgbmFtZSwKICAgICAgdHlwZW9mIGVsZW0udmFsdWUgPT0gJ3N0cmluZycgPyBTdWJzdENoYXJzKGVsZW0udmFsdWUpIDogZWxlbS52YWx1ZQogICAgXSk7CiAgICBsZXQgbWF0Y2hlcnMgPSBbCiAgICAgIFsvXlIvLCAvXlswLTkuXSsoW2tLbU1dW86pXHUwM0E5XT98W86pXHUwM0E5XT8pKHxcL1swLTkuXStXKS9dLAogICAgICBbL15DLywgL15bMC05Ll0rKFtwbnXOvFx1MDNiY21dRj98Rj8pKHxcL1swLTkuXStWKS9dLAogICAgICBbL15MLywgL15bMC05Ll0rKFtudc68XHUwM2JjbV1IP3xIPykvXQogICAgXTsKICAgIGxldCBuYW1lVmFsdWVNYXAgPSBuZXcgTWFwKAogICAgICBwYXJ0cy5maWx0ZXIoKFtuYW1lLCB2YWx1ZV0pID0+IG1hdGNoZXJzLnNvbWUobSA9PiBtWzBdLnRlc3QobmFtZSkgJiYgbVsxXS50ZXN0KHZhbHVlKSkpCiAgICApOwogICAgZm9yKGxldCBbbmFtZSwgdmFsdWVdIG9mIG5hbWVWYWx1ZU1hcCkgewogICAgICB2YWx1ZSA9ICh2YWx1ZSA/ICcnICsgdmFsdWUgOiAnJykucmVwbGFjZSgvW1x1MDAwMC1cdTAwMUZdL2csICcnKTsKICAgICAgY29tcG9uZW50c1tuYW1lWzBdXS5wdXNoKHZhbHVlLnJlcGxhY2UoL1vOqUZIXSQvLCAnJykucmVwbGFjZSgvXlwuLywgJzAuJykpOwogICAgfQogIH0KICBsZXQgaGlzdG9ncmFtcyA9IHt9OwogIGxldCB2YWx1ZXMgPSB7fTsKICBmb3IobGV0IGtleSBpbiBjb21wb25lbnRzKSB7CiAgICBjb21wb25lbnRzW2tleV0uc29ydCgpOwogICAgbGV0IGhpc3QgPSBVdGlsLmhpc3RvZ3JhbShjb21wb25lbnRzW2tleV0sIG5ldyBNYXAoKSk7CgogICAgaGlzdG9ncmFtc1trZXldID0gbmV3IE1hcChbLi4uaGlzdF0uc29ydCgoYSwgYikgPT4gYlsxXSAtIGFbMV0pKTsKICAgIHZhbHVlc1trZXldID0gWy4uLmhpc3RvZ3JhbXNba2V5XV0KICAgICAgLm1hcCgoW3ZhbHVlLCBjb3VudF0pID0+IHsKICAgICAgICByZXR1cm4gW3ZhbHVlIHx8IHNjaWVudGlmaWModmFsdWUpLnRvU3RyaW5nKCksIFZhbHVlVG9OdW1iZXIodmFsdWUpLCBjb3VudF07CiAgICAgIH0pCiAgICAgIC5zb3J0KChhLCBiKSA9PiBhWzFdIC0gYlsxXSkKICAgICAgLm1hcCgoW3ZhbCwgcmF0LCBjb3VudF0pID0+IHsKICAgICAgICBjb25zdCBzY2FsID0gUGFydFNjYWxlc1trZXlbMF1dOwogICAgICAgIGxldCBpbmR1Y3RvckNvbG9yID0gbmV3IEhTTEEoeyBoOiAxNjEsIHM6IDYwLCBsOiA1MCwgYTogMSB9KS50b1JHQkEoKTsKICAgICAgICAvL2luZHVjdG9yQ29sb3I9bmV3IEhTTEEoeyBoOiA5MCwgczogOTAsIGw6IDUwLCBhOiAxIH0pLnRvUkdCQSgpOwogICAgICAgIC8vaW5kdWN0b3JDb2xvcj1uZXcgSFNMQSh7IGg6IDExNywgczogNzAsIGw6IDYwLCBhOiAxIH0pLnRvUkdCQSgpOwoKICAgICAgICBsZXQgYmFuZHMgPQogICAgICAgICAga2V5WzBdID09ICdDJyA/IFsnICddIDogW251bTJjb2xvcihyYXQgKiBzY2FsLCBrZXlbMF0gPT0gJ0wnID8gWy4uLmluZHVjdG9yQ29sb3JdLnNsaWNlKDAsIDMpIDogdW5kZWZpbmVkKV07CiAgICAgICAgcmV0dXJuIFsKICAgICAgICAgIGtleSwKICAgICAgICAgICh2YWwgKyAnJykuc3Vic3RyaW5nKDAsIDEwKS5wYWRTdGFydCgxMCwgJyAnKSArIFVuaXRGb3JOYW1lKGtleSksCiAgICAgICAgICBiYW5kcy5qb2luKCcgJyksCiAgICAgICAgICBgICDDlyAke2NvdW50fWAKICAgICAgICBdLmpvaW4oJyAnKTsKICAgICAgfSk7CiAgfQogIGNvbnNvbGUubG9nKAogICAgLy8ndmFsdWVzOlxuJyArCiAgICAgICcgICAnICsKICAgICAgT2JqZWN0LmVudHJpZXModmFsdWVzKQogICAgICAgIC5tYXAoKFtrZXksIGxpc3RdKSA9PiBgJHtrZXl9OlxuXHQke2xpc3Quam9pbignXG5cblx0Jyl9YCkKICAgICAgICAuam9pbignXG4gICAnKQogICk7CiAgY29uc29sZS5sb2coYFxyXG5GaW5pc2hlZCBxdWVyeWluZ2AsIC4uLmFyZ3MpOwogIHJldHVybjsKfQoKVXRpbC5jYWxsTWFpbihtYWluLCB0cnVlKTsKAAAAAAAAAAAeDQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALwwAAAAAAAAvDAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "quickjs/qjs-modules/lib/util.js",
			"settings":
			{
				"buffer_size": 48119,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "lib/delegate.js",
			"settings":
			{
				"buffer_size": 505,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/color/rgba.js",
			"settings":
			{
				"buffer_size": 22965,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					29,
					1,
					"cut",
					null,
					"AQAAAMERAAAAAAAAwREAAAAAAACvAAAAClJHQkEucHJvdG90eXBlLmNvbXBhcmVUbyA9IGZ1bmN0aW9uKG90aGVyKSB7CiAgbGV0IGQgPSBSR0JBLnByb3RvdHlwZS5iaW5hcnlWYWx1ZS5jYWxsKG90aGVyKSAtIFJHQkEucHJvdG90eXBlLmJpbmFyeVZhbHVlLmNhbGwodGhpcyk7CiAgcmV0dXJuIGQgPCAwID8gLTEgOiBkID4gMCA/IDEgOiAwOwp9Ow",
					"AQAAAAAAAAABAAAAwREAAAAAAABwEgAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					2,
					"paste",
					null,
					"AgAAAMERAAAAAAAAcBIAAAAAAAAAAAAAcBIAAAAAAAAfEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwREAAAAAAADBEQAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": "intger"
					},
					"BwAAAIASAAAAAAAAgRIAAAAAAAAAAAAAgRIAAAAAAACBEgAAAAAAAAkAAABjb21wYXJlVG+BEgAAAAAAAIISAAAAAAAAAAAAAIISAAAAAAAAgxIAAAAAAAAAAAAAgxIAAAAAAACEEgAAAAAAAAAAAACEEgAAAAAAAIUSAAAAAAAAAAAAAIUSAAAAAAAAhhIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiRIAAAAAAACAEgAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					3,
					"left_delete",
					null,
					"AwAAAIUSAAAAAAAAhRIAAAAAAAABAAAAcoQSAAAAAAAAhBIAAAAAAAABAAAAZYMSAAAAAAAAgxIAAAAAAAABAAAAZw",
					"AQAAAAAAAAABAAAAhhIAAAAAAACGEgAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "erpolate"
					},
					"CAAAAIMSAAAAAAAAhBIAAAAAAAAAAAAAhBIAAAAAAACFEgAAAAAAAAAAAACFEgAAAAAAAIYSAAAAAAAAAAAAAIYSAAAAAAAAhxIAAAAAAAAAAAAAhxIAAAAAAACIEgAAAAAAAAAAAACIEgAAAAAAAIkSAAAAAAAAAAAAAIkSAAAAAAAAihIAAAAAAAAAAAAAihIAAAAAAACLEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgxIAAAAAAACDEgAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJwSAAAAAAAAnRIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnBIAAAAAAACcEgAAAAAAAAAAAAAAAPC/"
				],
				[
					52,
					1,
					"left_delete",
					null,
					"AQAAAJwSAAAAAAAAnBIAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAnRIAAAAAAACdEgAAAAAAAAAAAAAAAPC/"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAJwSAAAAAAAAnRIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnBIAAAAAAACcEgAAAAAAAAAAAAAAAPC/"
				],
				[
					54,
					1,
					"insert",
					{
						"characters": " a=.0"
					},
					"BQAAAJ0SAAAAAAAAnhIAAAAAAAAAAAAAnhIAAAAAAACfEgAAAAAAAAAAAACfEgAAAAAAAKASAAAAAAAAAAAAAKASAAAAAAAAoRIAAAAAAAAAAAAAoRIAAAAAAACiEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnRIAAAAAAACdEgAAAAAAAAAAAAAAAPC/"
				],
				[
					55,
					2,
					"left_delete",
					null,
					"AgAAAKESAAAAAAAAoRIAAAAAAAABAAAAMKASAAAAAAAAoBIAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAAohIAAAAAAACiEgAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": "0.5"
					},
					"AwAAAKASAAAAAAAAoRIAAAAAAAAAAAAAoRIAAAAAAACiEgAAAAAAAAAAAACiEgAAAAAAAKMSAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoBIAAAAAAACgEgAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAKYSAAAAAAAApxIAAAAAAAAAAAAApxIAAAAAAACpEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAphIAAAAAAACmEgAAAAAAAAAAAAAAAPC/"
				],
				[
					59,
					1,
					"paste",
					null,
					"AQAAAKkSAAAAAAAAyxIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqRIAAAAAAACpEgAAAAAAAAAAAAAAAPC/"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAMoSAAAAAAAAyxIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyhIAAAAAAADKEgAAAAAAAAAAAAAAAPC/"
				],
				[
					62,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAMsSAAAAAAAAzBIAAAAAAAAAAAAAzBIAAAAAAADQEgAAAAAAAAAAAADQEgAAAAAAANESAAAAAAAAAAAAANESAAAAAAAA1RIAAAAAAAAAAAAAzBIAAAAAAADMEgAAAAAAAAQAAAAgICAg",
					"AQAAAAAAAAABAAAAyxIAAAAAAADLEgAAAAAAAAAAAAAAAPC/"
				],
				[
					63,
					1,
					"insert",
					{
						"characters": "return"
					},
					"BgAAANESAAAAAAAA0hIAAAAAAAAAAAAA0hIAAAAAAADTEgAAAAAAAAAAAADTEgAAAAAAANQSAAAAAAAAAAAAANQSAAAAAAAA1RIAAAAAAAAAAAAA1RIAAAAAAADWEgAAAAAAAAAAAADWEgAAAAAAANcSAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0RIAAAAAAADREgAAAAAAAAAAAAAAAPC/"
				],
				[
					64,
					1,
					"insert",
					{
						"characters": " new"
					},
					"BAAAANcSAAAAAAAA2BIAAAAAAAAAAAAA2BIAAAAAAADZEgAAAAAAAAAAAADZEgAAAAAAANoSAAAAAAAAAAAAANoSAAAAAAAA2xIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1xIAAAAAAADXEgAAAAAAAAAAAAAAAPC/"
				],
				[
					65,
					1,
					"insert",
					{
						"characters": " RGBA"
					},
					"BQAAANsSAAAAAAAA3BIAAAAAAAAAAAAA3BIAAAAAAADdEgAAAAAAAAAAAADdEgAAAAAAAN4SAAAAAAAAAAAAAN4SAAAAAAAA3xIAAAAAAAAAAAAA3xIAAAAAAADgEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2xIAAAAAAADbEgAAAAAAAAAAAAAAAPC/"
				],
				[
					66,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAOASAAAAAAAA4hIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4BIAAAAAAADgEgAAAAAAAAAAAAAAAPC/"
				],
				[
					67,
					1,
					"insert",
					{
						"characters": "this.r*"
					},
					"BwAAAOESAAAAAAAA4hIAAAAAAAAAAAAA4hIAAAAAAADjEgAAAAAAAAAAAADjEgAAAAAAAOQSAAAAAAAAAAAAAOQSAAAAAAAA5RIAAAAAAAAAAAAA5RIAAAAAAADmEgAAAAAAAAAAAADmEgAAAAAAAOcSAAAAAAAAAAAAAOcSAAAAAAAA6BIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4RIAAAAAAADhEgAAAAAAAAAAAAAAAPC/"
				],
				[
					68,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAOgSAAAAAAAA6hIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6BIAAAAAAADoEgAAAAAAAAAAAAAAAPC/"
				],
				[
					69,
					1,
					"insert",
					{
						"characters": "1.0,"
					},
					"BAAAAOkSAAAAAAAA6hIAAAAAAAAAAAAA6hIAAAAAAADrEgAAAAAAAAAAAADrEgAAAAAAAOwSAAAAAAAAAAAAAOwSAAAAAAAA7RIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6RIAAAAAAADpEgAAAAAAAAAAAAAAAPC/"
				],
				[
					70,
					3,
					"left_delete",
					null,
					"AwAAAOwSAAAAAAAA7BIAAAAAAAABAAAALOsSAAAAAAAA6xIAAAAAAAABAAAAMOoSAAAAAAAA6hIAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAA7RIAAAAAAADtEgAAAAAAAAAAAAAAAPC/"
				],
				[
					71,
					1,
					"insert",
					{
						"characters": "-a"
					},
					"AgAAAOoSAAAAAAAA6xIAAAAAAAAAAAAA6xIAAAAAAADsEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6hIAAAAAAADqEgAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": "+"
					},
					"AQAAAO0SAAAAAAAA7hIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7RIAAAAAAADtEgAAAAAAAAAAAAAAAPC/"
				],
				[
					74,
					1,
					"insert",
					{
						"characters": " other.r"
					},
					"CAAAAO4SAAAAAAAA7xIAAAAAAAAAAAAA7xIAAAAAAADwEgAAAAAAAAAAAADwEgAAAAAAAPESAAAAAAAAAAAAAPESAAAAAAAA8hIAAAAAAAAAAAAA8hIAAAAAAADzEgAAAAAAAAAAAADzEgAAAAAAAPQSAAAAAAAAAAAAAPQSAAAAAAAA9RIAAAAAAAAAAAAA9RIAAAAAAAD2EgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7hIAAAAAAADuEgAAAAAAAAAAAAAAAPC/"
				],
				[
					75,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAPYSAAAAAAAA+BIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9hIAAAAAAAD2EgAAAAAAAAAAAAAAAPC/"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAAPcSAAAAAAAA+BIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9xIAAAAAAAD3EgAAAAAAAAAAAAAAAPC/"
				],
				[
					77,
					1,
					"left_delete",
					null,
					"AQAAAPcSAAAAAAAA9xIAAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAA+BIAAAAAAAD4EgAAAAAAAAAAAAAAAPC/"
				],
				[
					78,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAPYSAAAAAAAA9hIAAAAAAAABAAAAKPYSAAAAAAAA9hIAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAA9xIAAAAAAAD3EgAAAAAAAAAAAAAAAPC/"
				],
				[
					79,
					1,
					"insert",
					{
						"characters": "*a,"
					},
					"AwAAAPYSAAAAAAAA9xIAAAAAAAAAAAAA9xIAAAAAAAD4EgAAAAAAAAAAAAD4EgAAAAAAAPkSAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9hIAAAAAAAD2EgAAAAAAAAAAAAAAAPC/"
				],
				[
					80,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAAPkSAAAAAAAA+hIAAAAAAAAAAAAA+hIAAAAAAAD+EgAAAAAAAAAAAAD6EgAAAAAAAPoSAAAAAAAABAAAACAgICD6EgAAAAAAAAATAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+RIAAAAAAAD5EgAAAAAAAAAAAAAAAPC/"
				],
				[
					86,
					1,
					"cut",
					null,
					"AQAAAOESAAAAAAAA4RIAAAAAAAAfAAAAdGhpcy5yKigxLWEpKyBvdGhlci5yKmEsCiAgICAgIA",
					"AQAAAAAAAAABAAAA4RIAAAAAAAAAEwAAAAAAAAAAAAAAAPC/"
				],
				[
					87,
					4,
					"paste",
					null,
					"BAAAAOESAAAAAAAAABMAAAAAAAAAAAAAABMAAAAAAAAfEwAAAAAAAAAAAAAfEwAAAAAAAD4TAAAAAAAAAAAAAD4TAAAAAAAAXRMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4RIAAAAAAADhEgAAAAAAAAAAAAAAAPC/"
				],
				[
					93,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AgAAAAUTAAAAAAAABhMAAAAAAAAAAAAABhMAAAAAAAAGEwAAAAAAAAEAAABy",
					"AQAAAAAAAAABAAAABRMAAAAAAAAGEwAAAAAAAAAAAAAAAPC/"
				],
				[
					97,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AgAAABQTAAAAAAAAFRMAAAAAAAAAAAAAFRMAAAAAAAAVEwAAAAAAAAEAAABy",
					"AQAAAAAAAAABAAAAFBMAAAAAAAAVEwAAAAAAAAAAAAAAAPC/"
				],
				[
					103,
					1,
					"insert",
					{
						"characters": "b"
					},
					"AgAAACQTAAAAAAAAJRMAAAAAAAAAAAAAJRMAAAAAAAAlEwAAAAAAAAEAAABy",
					"AQAAAAAAAAABAAAAJBMAAAAAAAAlEwAAAAAAAAAAAAAAAPC/"
				],
				[
					107,
					1,
					"insert",
					{
						"characters": "b"
					},
					"AgAAADMTAAAAAAAANBMAAAAAAAAAAAAANBMAAAAAAAA0EwAAAAAAAAEAAABy",
					"AQAAAAAAAAABAAAAMxMAAAAAAAA0EwAAAAAAAAAAAAAAAPC/"
				],
				[
					111,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AgAAAEMTAAAAAAAARBMAAAAAAAAAAAAARBMAAAAAAABEEwAAAAAAAAEAAABy",
					"AQAAAAAAAAABAAAAQxMAAAAAAABEEwAAAAAAAAAAAAAAAPC/"
				],
				[
					115,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AgAAAFITAAAAAAAAUxMAAAAAAAAAAAAAUxMAAAAAAABTEwAAAAAAAAEAAABy",
					"AQAAAAAAAAABAAAAUhMAAAAAAABTEwAAAAAAAAAAAAAAAPC/"
				],
				[
					119,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAF4TAAAAAAAAXxMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXhMAAAAAAABeEwAAAAAAAAAAAAAAAPC/"
				],
				[
					121,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AgAAAF8TAAAAAAAAYBMAAAAAAAAAAAAAYBMAAAAAAABgEwAAAAAAAGQAAAAKCiAgbGV0IGQgPSBSR0JBLnByb3RvdHlwZS5iaW5hcnlWYWx1ZS5jYWxsKG90aGVyKSAtIFJHQkEucHJvdG90eXBlLmJpbmFyeVZhbHVlLmNhbGwodGhpcyk7CiAgcmV0dXJu",
					"AQAAAAAAAAABAAAAXxMAAAAAAADDEwAAAAAAAAAAAAAAAFRA"
				],
				[
					124,
					1,
					"cut",
					null,
					"AQAAAF8TAAAAAAAAXxMAAAAAAAAdAAAAMSBkIDwgMCA/IC0xIDogZCA+IDAgPyAxIDogMDs",
					"AQAAAAAAAAABAAAAXxMAAAAAAAB8EwAAAAAAAP///////+9/"
				],
				[
					127,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAXxMAAAAAAABfEwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"contents": "import Util from '../util.js';\n\nconst SymSpecies = Util.tryCatch(\n  () => Symbol,\n  sym => sym.species\n);\n\nconst CTOR = obj => {\n  if(obj[SymSpecies]) return obj[SymSpecies];\n  let p = Object.getPrototypeOf(obj);\n  if(p[SymSpecies]) return p[SymSpecies];\n  return p.constructor;\n};\n\nexport function Point(...args) {\n  let isNew = this instanceof Point;\n  args = args[0] instanceof Array ? args.shift() : args;\n  let p = isNew ? this : new Point(...args);\n  let arg = args.shift();\n\n  if(!new.target) if (arg instanceof Point) return arg;\n\n  if(typeof arg === 'undefined') {\n    p.x = arg;\n    p.y = args.shift();\n  } else if(typeof arg === 'number') {\n    p.x = parseFloat(arg);\n    p.y = parseFloat(args.shift());\n  } else if(typeof arg === 'string') {\n    const matches = [...arg.matchAll(/([-+]?d*.?d+)(?:[eE]([-+]?d+))?/g)];\n\n    p.x = parseFloat(matches[0]);\n    p.y = parseFloat(matches[1]);\n  } else if(typeof arg == 'object' && arg !== null && (arg.x !== undefined || arg.y !== undefined)) {\n    p.x = arg.x;\n    p.y = arg.y;\n  } else if(typeof arg == 'object' && arg !== null && arg.length > 0 && x !== undefined && y !== undefined) {\n    p.x = parseFloat(arg.shift());\n    p.y = parseFloat(arg.shift());\n  } else if(typeof args[0] === 'number' && typeof args[1] === 'number') {\n    p.x = args[0];\n    p.y = args[1];\n    args.shift(2);\n  } else {\n    p.x = 0;\n    p.y = 0;\n  }\n  if(p.x === undefined) p.x = 0;\n  if(p.y === undefined) p.y = 0;\n  if(isNaN(p.x)) p.x = undefined;\n  if(isNaN(p.y)) p.y = undefined;\n\n  if(!isNew) {\n    /* if(p.prototype == Object) p.prototype = Point.prototype;\n    else Object.assign(p, Point.prototype);*/\n    return p;\n  }\n}\n\nPoint.getOther = args => (\n  console.debug('getOther', ...args), typeof args[0] == 'number' ? [{ x: args[0], y: args[1] }] : args\n);\n\nObject.defineProperties(Point.prototype, {\n  X: {\n    get() {\n      return this.x;\n    }\n  },\n  Y: {\n    get() {\n      return this.y;\n    }\n  }\n});\n\nPoint.prototype.move = function(x, y) {\n  this.x += x;\n  this.y += y;\n  return this;\n};\nPoint.prototype.moveTo = function(x, y) {\n  this.x = x;\n  this.y = y;\n  return this;\n};\nPoint.prototype.clear = function(x, y) {\n  this.x = 0;\n  this.y = 0;\n  return this;\n};\nPoint.prototype.set = function(fn) {\n  if(typeof fn != 'function') {\n    Point.apply(this, [...arguments]);\n    return this;\n  }\n  return fn(this.x, this.y);\n};\nPoint.prototype.clone = function() {\n  const ctor = this[Symbol.species] || this.constructor[Symbol.species];\n\n  return new ctor({ x: this.x, y: this.y });\n};\nPoint.prototype.sum = function(...args) {\n  const p = new Point(...args);\n  let r = new this.constructor(this.x, this.y);\n  r.x += p.x;\n  r.y += p.y;\n  return r;\n};\nPoint.prototype.add = function(...args) {\n  const other = new Point(...args);\n  this.x += other.x;\n  this.y += other.y;\n  return this;\n};\nPoint.prototype.diff = function(arg) {\n  let { x, y } = this;\n  let fn = function(other) {\n    let r = new Point(x, y);\n    return r.sub(other);\n  };\n  if(arg) return fn(arg);\n  return fn;\n};\nPoint.prototype.sub = function(...args) {\n  const other = new Point(...args);\n  this.x -= other.x;\n  this.y -= other.y;\n  return this;\n};\nPoint.prototype.prod = function(f) {\n  const o = isPoint(f) ? f : { x: f, y: f };\n  return new Point(this.x * o.x, this.y * o.y);\n};\nPoint.prototype.mul = function(f) {\n  const o = isPoint(f) ? f : { x: f, y: f };\n  this.x *= o.x;\n  this.y *= o.y;\n  return this;\n};\nPoint.prototype.quot = function(other) {\n  other = isPoint(other) ? other : { x: other, y: other };\n  return new Point(this.x / other.x, this.y / other.y);\n};\nPoint.prototype.div = function(other) {\n  other = isPoint(other) ? other : { x: other, y: other };\n  this.x /= other.x;\n  this.y /= other.y;\n  return this;\n};\nPoint.prototype.comp = function() {\n  return new Point({ x: -this.x, y: -this.y });\n};\nPoint.prototype.neg = function() {\n  this.x *= -1;\n  this.y *= -1;\n  return this;\n};\nPoint.prototype.distanceSquared = function(other = { x: 0, y: 0 }) {\n  return (other.y - this.y) * (other.y - this.y) + (other.x - this.x) * (other.x - this.x);\n};\nPoint.prototype.distance = function(other = { x: 0, y: 0 }) {\n  return Math.sqrt(Point.prototype.distanceSquared.call(this, Point(other)));\n};\nPoint.prototype.equals = function(other) {\n  let { x, y } = this;\n  return +x == +other.x && +y == +other.y;\n};\nPoint.prototype.round = function(precision = 0.001, digits, type) {\n  let { x, y } = this;\n  digits = digits || Util.roundDigits(precision);\n  type = type || 'round';\n  this.x = Util.roundTo(x, precision, digits, type);\n  this.y = Util.roundTo(y, precision, digits, type);\n  return this;\n};\nPoint.prototype.ceil = function() {\n  let { x, y } = this;\n  this.x = Math.ceil(x);\n  this.y = Math.ceil(y);\n  return this;\n};\nPoint.prototype.floor = function() {\n  let { x, y } = this;\n  this.x = Math.floor(x);\n  this.y = Math.floor(y);\n  return this;\n};\n\nPoint.prototype.dot = function(other) {\n  return this.x * other.x + this.y * other.y;\n};\n\nPoint.prototype.values = function() {\n  return [this.x, this.y];\n};\nPoint.prototype.fromAngle = function(angle, dist = 1.0) {\n  this.x = Math.cos(angle) * dist;\n  this.y = Math.sin(angle) * dist;\n  return this;\n};\nPoint.prototype.toAngle = function(deg = false) {\n  return Math.atan2(this.x, this.y) * (deg ? 180 / Math.PI : 1);\n};\nPoint.prototype.angle = function(other, deg = false) {\n  other = other || { x: 0, y: 0 };\n  return Point.prototype.diff.call(this, other).toAngle(deg);\n};\nPoint.prototype.rotate = function(angle, origin = { x: 0, y: 0 }) {\n  this.x -= origin.x;\n  this.y -= origin.y;\n  let c = Math.cos(angle),\n    s = Math.sin(angle);\n  let xnew = this.x * c - this.y * s;\n  let ynew = this.x * s + this.y * c;\n  this.x = xnew;\n  this.y = ynew;\n  return this;\n};\nUtil.defineGetter(Point.prototype, Symbol.iterator, function() {\n  const { x, y } = this;\n  let a = [x, y];\n  return a[Symbol.iterator].bind(a);\n});\n\nPoint.prototype.valueOf = function(shl = 16) {\n  const { x, y } = this;\n\n  if(shl < 0) return x * (1 << Math.abs(shl)) + y;\n\n  return x + y * (1 << shl);\n};\nPoint.prototype.toString = function(opts = {}) {\n  const { precision = 0.001, unit = '', separator = ',', left = '', right = '', pad = 0 } = opts;\n  let x = Util.roundTo(this.x, precision);\n  let y = Util.roundTo(this.y, precision);\n  if(pad > 0) {\n    x = x + '';\n    y = y + '';\n    if(y[0] != '-') y = ' ' + y;\n    if(x[0] != '-') x = ' ' + x;\n  }\n  //console.debug(\"toString\", {x,y}, {pad});\n  return `${left}${(x + '').padStart(pad, ' ')}${unit}${separator}${(y + '').padEnd(pad, ' ')}${unit}${right}`;\n};\nPoint.prototype[Symbol.toStringTag] = 'Point';\nPoint.prototype.toSource = function(opts = {}) {\n  const { asArray = false, plainObj = false, pad = a => a /*a.padStart(4, ' ')*/, showNew = true } = opts;\n  let x = pad(this.x + '');\n  let y = pad(this.y + '');\n  let c = t => t;\n  if(typeof this != 'object' || this === null) return '';\n  if(asArray) return `[${x},${y}]`;\n  if(plainObj) return `{x:${x},y:${y}}`;\n\n  return `${c(showNew ? 'new ' : '', 1, 31)}${c('Point', 1, 33)}${c('(', 1, 36)}${c(x, 1, 32)}${c(',', 1, 36)}${c(\n    y,\n    1,\n    32\n  )}${c(')', 1, 36)}`;\n};\n\n/*Point.prototype.toSource = function() {\n  return '{x:' + this.x + ',y:' + this.y + '}';\n};*/\nPoint.prototype.toObject = function(proto = Point.prototype) {\n  const { x, y } = this;\n  const obj = { x, y };\n  Object.setPrototypeOf(obj, proto);\n  return obj;\n};\nPoint.prototype.toCSS = function(precision = 0.001, edges = ['left', 'top']) {\n  return {\n    [edges[0]]: Util.roundTo(this.x, precision) + 'px',\n    [edges[1]]: Util.roundTo(this.y, precision) + 'px'\n  };\n};\nPoint.prototype.toFixed = function(digits) {\n  return new Point(+this.x.toFixed(digits), +this.y.toFixed(digits));\n};\nPoint.prototype.isNull = function() {\n  return this.x == 0 && this.y == 0;\n};\nPoint.prototype.inside = function(rect) {\n  return this.x >= rect.x && this.x < rect.x + rect.width && this.y >= rect.y && this.y < rect.y + rect.height;\n};\nPoint.prototype.transform = function(m, round = true) {\n  if(Util.isObject(m) && typeof m.toMatrix == 'function') m = m.toMatrix();\n  //if(Util.isObject(m) && typeof m.transform_point == 'function') return m.transform_point(this);\n\n  const x = m[0] * this.x + m[1] * this.y + m[2];\n  const y = m[3] * this.x + m[4] * this.y + m[5];\n\n  this.x = x;\n  this.y = y;\n  if(round) Point.prototype.round.call(this, 1e-13, 13);\n\n  return this;\n};\nPoint.prototype.scaleTo = function(minmax) {\n  return new Point({\n    x: (this.x - minmax.x1) / (minmax.x2 - minmax.x1),\n    y: (this.y - minmax.y1) / (minmax.y2 - minmax.y1)\n  });\n};\nPoint.prototype.normalize = function() {\n  let d = Point.prototype.distance.call(this);\n  return Point.prototype.div.call(this, { x: d, y: d });\n};\nPoint.prototype.normal = function() {\n  let d = Point.prototype.distance.call(this);\n  return new Point({ x: this.x / d, y: this.y / d });\n};\n\nPoint.fromString = str => new Point(...str.split(/[^-.0-9]+/g).map(n => +n));\nPoint.move = (point, x, y) => Point.prototype.move.call(point, x, y);\nPoint.angle = (point, other, deg = false) => Point.prototype.angle.call(point, other, deg);\nPoint.inside = (point, rect) => Point.prototype.inside.call(point, rect);\nPoint.sub = (point, other) => Point.prototype.sub.call(point, other);\nPoint.prod = (a, b) => Point.prototype.prod.call(a, b);\nPoint.quot = (a, b) => Point.prototype.quot.call(a, b);\nPoint.equals = (a, b) => Point.prototype.equals.call(a, b);\nPoint.round = (point, prec, digits, type) => Point.prototype.round.call(point, prec, digits, type);\nPoint.fromAngle = (angle, f) => new Point().fromAngle(angle, f);\n\nfor(let name of [\n  'clone',\n  'comp',\n  'neg',\n  'sides',\n  'dimension',\n  'toString',\n  //'toSource',\n  'toCSS',\n  'sub',\n  'diff',\n  'add',\n  'sum',\n  'distance'\n]) {\n  Point[name] = (point, ...args) => Point.prototype[name].call(Point(point), ...args);\n}\nPoint.interpolate = (p1, p2, a) => {\n  a = Util.clamp(0, 1, a);\n  return new Point(p1.x * (1.0 - a) + p2.x * a, p1.y * (1.0 - a) + p2.y * a);\n};\n\nPoint.toSource = (point, { space = ' ', padding = ' ', separator = ',' }) =>\n  `{${padding}x:${space}${point.x}${separator}y:${space}${point.y}${padding}}`;\n\nexport const isPoint = o =>\n  o &&\n  ((o.x !== undefined && o.y !== undefined) ||\n    ((o.left !== undefined || o.right !== undefined) && (o.top !== undefined || o.bottom !== undefined)) ||\n    o instanceof Point ||\n    Object.getPrototypeOf(o).constructor === Point);\n\nPoint.isPoint = isPoint;\n\nPoint.prototype[Util.inspectSymbol] = function(depth, options) {\n  const { x, y } = this;\n  return /*Object.setPrototypeOf*/ { x, y } /*, Point.prototype*/;\n};\n\nPoint.bind = (o, keys, g) => {\n  keys ??= ['x', 'y'];\n  o ??= new Point();\n  g ??= k => value => value !== undefined ? (o[k] = value) : o[k];\n\n  const { x, y } = Array.isArray(keys) ? keys.reduce((acc, name, i) => ({ ...acc, [keys[i]]: name }), {}) : keys;\n  return Object.setPrototypeOf(Util.bindProperties({}, o, { x, y }), Point.prototype);\n};\n\nexport default Point;\n\nUtil.defineGetter(Point, Symbol.species, function() {\n  return this;\n});\n\nexport const ImmutablePoint = Util.immutableClass(Point);\nUtil.defineGetter(ImmutablePoint, Symbol.species, () => ImmutablePoint);\n",
			"file": "lib/geom/point.js",
			"file_size": 11206,
			"file_write_time": 133122640037086168,
			"settings":
			{
				"buffer_size": 11206,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					10,
					1,
					"insert",
					{
						"characters": "\na="
					},
					"BAAAALEmAAAAAAAAsiYAAAAAAAAAAAAAsiYAAAAAAAC0JgAAAAAAAAAAAAC0JgAAAAAAALUmAAAAAAAAAAAAALUmAAAAAAAAtiYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsSYAAAAAAACxJgAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"paste",
					null,
					"AQAAALYmAAAAAAAA0yYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtiYAAAAAAAC2JgAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"cut",
					null,
					"AQAAALImAAAAAAAAsiYAAAAAAAAiAAAAICBhPU1hdGgubWF4KDAsIE1hdGgubWluKDEsIDAuNSkpCg",
					"AQAAAAAAAAABAAAAsiYAAAAAAADUJgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "upload-server.js",
			"settings":
			{
				"buffer_size": 34145,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "eagle-commands.js",
			"settings":
			{
				"buffer_size": 3884,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					10,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAjEAAAaW1wb3J0IHsgTGluZUxpc3QsIFJlY3QsIFBvaW50IH0gZnJvbSAnLi9saWIvZ2VvbS5qcyc7CmltcG9ydCBVdGlsIGZyb20gJy4vbGliL3V0aWwuanMnOwppbXBvcnQgeyBCRywgZGlnaXQyY29sb3IsIEdldENvbG9yQmFuZHMsIFBhcnRTY2FsZXMgfSBmcm9tICcuL2xpYi9lZGEvY29sb3JDb2RpbmcuanMnOwpleHBvcnQgeyBHZXRDb2xvckJhbmRzIH0gZnJvbSAnLi9saWIvZWRhL2NvbG9yQ29kaW5nLmpzJzsKaW1wb3J0IHsgbWFwLCBjb25zdW1lLCByZWR1Y2UgfSBmcm9tICcuL2xpYi9pdGVyYWJsZS5qcyc7CgpleHBvcnQgZnVuY3Rpb24gR2V0UGFydHMoc2NoZW1hdGljLCB0ID0gZW50cmllcyA9PiBPYmplY3QuZnJvbUVudHJpZXMoZW50cmllcykpIHsKICByZXR1cm4gdChtYXAoc2NoZW1hdGljLmdldEFsbCgncGFydCcpLCBlbGVtID0+IFtlbGVtLm5hbWUsIGVsZW1dKSk7Cn0KCmV4cG9ydCBmdW5jdGlvbiBHZXRFbGVtZW50cyhib2FyZCwgdCA9IGVudHJpZXMgPT4gT2JqZWN0LmZyb21FbnRyaWVzKGVudHJpZXMpKSB7CiAgcmV0dXJuIHQobWFwKGJvYXJkLmdldEFsbCgnZWxlbWVudCcpLCBlbGVtID0+IFtlbGVtLm5hbWUsIGVsZW1dKSk7Cn0KCmV4cG9ydCBmdW5jdGlvbiBHZXRJbnN0YW5jZXMoc2NoZW1hdGljLCB0ID0gZW50cmllcyA9PiAvKk9iamVjdC5mcm9tRW50cmllcyovIGVudHJpZXMpIHsKICBsZXQgZW50cmllcyA9IE9iamVjdC5lbnRyaWVzKAogICAgcmVkdWNlKAogICAgICBzY2hlbWF0aWMuZ2V0QWxsKCdpbnN0YW5jZScpLAogICAgICAoYWNjdSwgZWxlbSkgPT4gewogICAgICAgIGNvbnN0IHsgbmFtZSB9ID0gZWxlbS5wYXJ0OwogICAgICAgIGlmKCEobmFtZSBpbiBhY2N1KSkgYWNjdVtuYW1lXSA9IFtdOwoKICAgICAgICBhY2N1W25hbWVdLnB1c2goZWxlbSk7CiAgICAgICAgcmV0dXJuIGFjY3U7CiAgICAgIH0sCiAgICAgIHt9CiAgICApCiAgKTsKCiAgcmV0dXJuIHQoZW50cmllcyk7Cn0KCmV4cG9ydCBmdW5jdGlvbiBHZXRQb3NpdGlvbnMoZG9jKSB7CiAgbGV0IGVudHJpZXMgPSB7IHNjaDogZCA9PiBHZXRJbnN0YW5jZXMoZCksIGJyZDogZCA9PiBHZXRFbGVtZW50cyhkLCBlID0+IGUpLm1hcCgoW25hbWUsIGVsZW1dKSA9PiBbbmFtZSwgW2VsZW1dXSkgfVsKICAgIGRvYy50eXBlCiAgXShkb2MpOwoKICByZXR1cm4gZW50cmllcy5tYXAoKFtuYW1lLCBhcnJdKSA9PiBbbmFtZSwgYXJyLm1hcCgoeyB4LCB5IH0pID0+IG5ldyBQb2ludCh4LCB5KSldKTsKfQoKZXhwb3J0IGZ1bmN0aW9uIFVwZGF0ZU1lYXN1cmVzKGJvYXJkKSB7CiAgaWYoIWJvYXJkKSByZXR1cm4gZmFsc2U7CiAgbGV0IGJvdW5kcyA9IGJvYXJkLmdldEJvdW5kcygpOwogIGxldCBtZWFzdXJlcyA9IGJvYXJkLmdldE1lYXN1cmVzKCk7CiAgaWYobWVhc3VyZXMpIHsKICAgIGNvbnNvbGUubG9nKCdnb3QgbWVhc3VyZXM6JywgbWVhc3VyZXMpOwogIH0gZWxzZSB7CiAgICBsZXQgcmVjdCA9IG5ldyBSZWN0KGJvdW5kcy5yZWN0KTsKICAgIGxldCBsaW5lcyA9IHJlY3QudG9MaW5lcyhsaW5lcyA9PiBuZXcgTGluZUxpc3QobGluZXMpKTsKICAgIGxldCB7IHBsYWluIH0gPSBib2FyZDsKICAgIHBsYWluLnJlbW92ZShlID0+IGUudGFnTmFtZSA9PSAnd2lyZScgJiYgZS5hdHRyaWJ1dGVzLmxheWVyID09ICc0NycpOwogICAgcGxhaW4uYXBwZW5kKAogICAgICAuLi5saW5lcy5tYXAobGluZSA9PiAoewogICAgICAgIHRhZ05hbWU6ICd3aXJlJywKICAgICAgICBhdHRyaWJ1dGVzOiB7IC4uLmxpbmUudG9PYmplY3QoKSwgbGF5ZXI6IDQ3LCB3aWR0aDogMCB9CiAgICAgIH0pKQogICAgKTsKICB9CiAgcmV0dXJuICFtZWFzdXJlczsKfQoKZXhwb3J0IGZ1bmN0aW9uIEFsaWduSXRlbShpdGVtKSB7CiAgY29uc29sZS5kZWJ1ZygnQWxpZ25JdGVtJywgaXRlbSk7CiAgbGV0IGdlb21ldHJ5ID0gaXRlbS5nZW9tZXRyeTsKICBsZXQgb2xkUG9zID0gZ2VvbWV0cnkuY2xvbmUoKTsKICBsZXQgbmV3UG9zID0gZ2VvbWV0cnkuY2xvbmUoKS5yb3VuZCgxLjI3LCAyKTsKICBsZXQgZGlmZiA9IG5ld1Bvcy5kaWZmKG9sZFBvcykucm91bmQoMC4wMDAxLCA1KTsKICBsZXQgYmVmb3JlID0gaXRlbS5wYXJlbnROb2RlLnRvWE1MKCk7CiAgZ2VvbWV0cnkuYWRkKGRpZmYpOwogIGxldCBjaGFuZ2VkID0gIWRpZmYuaXNOdWxsKCk7CiAgaWYoY2hhbmdlZCkgewogICAgY29uc29sZS5sb2coJ2JlZm9yZTonLCBVdGlsLmFiYnJldmlhdGUoYmVmb3JlKSk7CiAgICBjb25zb2xlLmxvZygnYWZ0ZXI6JywgVXRpbC5hYmJyZXZpYXRlKGl0ZW0ucGFyZW50Tm9kZS50b1hNTCgpKSk7CiAgICBjb25zb2xlLmxvZygnYWxpZ25cbicsIGl0ZW0ueHBhdGgoKSwgJ1xuIG5ld1BvczonLCBuZXdQb3MsICdcbiBkaWZmOicsIGRpZmYsICdcbiBhdHRyOicsIGl0ZW0ucmF3LmF0dHJpYnV0ZXMpOwogIH0KICByZXR1cm4gY2hhbmdlZDsKfQoKZXhwb3J0IGZ1bmN0aW9uIEFsaWduQWxsKGRvYykgewogIGlmKCFkb2MpIHJldHVybiBmYWxzZTsKICBsZXQgaXRlbXMgPSBkb2MuZ2V0QWxsKGRvYy50eXBlID09ICdicmQnID8gJ2VsZW1lbnQnIDogJ2luc3RhbmNlJyk7CiAgbGV0IGNoYW5nZWQgPSBmYWxzZTsKICBmb3IobGV0IGl0ZW0gb2YgaXRlbXMpIGNoYW5nZWQgfD0gQWxpZ25JdGVtKGl0ZW0pOwogIGxldCBzaWduYWxzX25ldHMgPSBkb2MuZ2V0QWxsKC8oc2lnbmFsc3xuZXRzKS8pOwoKICBmb3IobGV0IG5ldCBvZiBzaWduYWxzX25ldHMpIGZvciAobGV0IGl0ZW0gb2YgbmV0LmdldEFsbCgnd2lyZScpKSBjaGFuZ2VkIHw9IEFsaWduSXRlbShpdGVtKTsKICByZXR1cm4gISFjaGFuZ2VkOwp9CgpleHBvcnQgZnVuY3Rpb24gc2NpZW50aWZpYyh2YWx1ZSkgewogIGxldCBzY2kgPSBbR2V0TWFudGlzc2EodmFsdWUpLCBHZXRFeHBvbmVudCh2YWx1ZSldOwoKICBkZWZpbmUoc2NpLCB7CiAgICB0b1N0cmluZygpIHsKICAgICAgbGV0IHNpZ24gPSBNYXRoLnNpZ24odGhpc1sxXSkgPCAwID8gJy0nIDogJysnOwogICAgICByZXR1cm4gYCR7dGhpc1swXX1lJHtzaWdufSR7KE1hdGguYWJzKHRoaXNbMV0pICsgJycpLnBhZFN0YXJ0KDIsICcwJyl9YDsKICAgIH0KICB9KTsKICByZXR1cm4gc2NpOwp9CmNvbnN0IHRleHQgPSAoKCkgPT4gewogIGNvbnN0IGFuc2kgPSBVdGlsLmNvbG9yaW5nKHRydWUpOwogIHJldHVybiAoLi4uYXJncykgPT4gYW5zaS50ZXh0KC4uLmFyZ3MpOwp9KSgpOwoKY29uc3QgdmVydGljYWxSZWN0YW5nbGVzID0gWyfilognLCAn4pahJywgJ1x1MjU4OFx1MjU4ZCcgLyonXHUyNTg5JyovIC8qJ+KWricqLywgJ+KWoScsICfilq8nXTsKY29uc3QgbGFyZ2VTcXVhcmVzID0gWyfilqAnLCAn4pahJ107CgpleHBvcnQgZnVuY3Rpb24gbnVtMmNvbG9yKG51bSwgc3F1YXJlID0gZmFsc2UpIHsKICBsZXQgc3ltID0gc3F1YXJlID8gbGFyZ2VTcXVhcmVzIDogdmVydGljYWxSZWN0YW5nbGVzOwogIGxldCBiYW5kcyA9IHR5cGVvZiBudW0gPT0gJ251bWJlcicgPyBHZXRDb2xvckJhbmRzKG51bSkgOiBudW07CiAgY29uc3QgeyBhbnNpLCByZ2IgfSA9IGRpZ2l0MmNvbG9yOwogIGxldCBhID0gbiA9PiBhbnNpW25dPy5zbGljZSgxKSA/PyBbXTsKICBsZXQgcmV0ID0gW107IC8vYmFuZHMubWFwKG4gPT4gKTsKICAvL3JldC5wdXNoKHRleHQoJ1x1MjU5NScsIDM4LCAyLCAuLi5kaWdpdDJjb2xvci5yZ2JbQkddKSk7CgogIGZvcihsZXQgYmFuZCBvZiBiYW5kcykgewogICAgaWYocmV0Lmxlbmd0aCkgcmV0LnB1c2godGV4dCgnICcsIDQ4LCAyLCAuLi5yZ2JbQkddKSk7CiAgICAvLwogICAgLy8gIHJldC5wdXNoKHRleHQoc3ltWzBdLCAzOCkpOwogICAgaWYoYmFuZCkgewogICAgICBiYW5kID0gdGV4dChzeW1bMF0sIDM4LCAuLi5hKGJhbmQpKTsKICAgICAgYmFuZCA9IHRleHQoYmFuZCwgNDgsIDIsIC4uLnJnYltCR10pOwogICAgfSBlbHNlIHsKICAgICAgYmFuZCA9IHRleHQoc3ltWzFdLCAzOCwgMiwgMjU1LCAyNTUsIDI1NSk7CiAgICB9CiAgICByZXQucHVzaChiYW5kKTsgLy8KICB9CiAgcmV0LnB1c2godGV4dCgnICcsIDQ4LCAyLCAuLi5yZ2JbQkddKSk7CiAgLy9jb25zb2xlLmxvZygnbnVtMmNvbG9yJywgeyBiYW5kcywgcmV0IH0pOwogIHJldHVybiByZXQuam9pbignJyk7Cn0KAAAAAAAAAAAvDwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADg4AAAAAAAATDgAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"",
					null,
					"CAAAAP0LAAAAAAAAAQwAAAAAAAADAAAAfQpj4goAAAAAAADmCgAAAAAAAAMAAAB9CmVuCQAAAAAAAHIJAAAAAAAAAwAAAH0KZREHAAAAAAAAFQcAAAAAAAADAAAAfQplwwQAAAAAAADHBAAAAAAAAAMAAAB9CmW4AwAAAAAAALwDAAAAAAAAAwAAAH0KZVQCAAAAAAAAWAIAAAAAAAADAAAAfQplvAEAAAAAAADAAQAAAAAAAAMAAAB9CmU",
					"AQAAAAAAAAABAAAA4goAAAAAAADlCgAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAACMBAAAAAAAAJAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIwEAAAAAAAAjAQAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAHEMAAAAAAAAcgwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcQwAAAAAAABxDAAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAANYMAAAAAAAA1wwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1gwAAAAAAADWDAAAAAAAAAAAAAAAAPC/"
				],
				[
					84,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAA0OAAAAAAAADw4AAAAAAAAAAAAA/Q0AAAAAAAD/DQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/Q0AAAAAAAANDgAAAAAAAAAAAAAAAPC/"
				],
				[
					111,
					1,
					"insert",
					{
						"characters": "true"
					},
					"BAAAAEAOAAAAAAAAQQ4AAAAAAAAAAAAAQQ4AAAAAAABCDgAAAAAAAAAAAABCDgAAAAAAAEMOAAAAAAAAAAAAAEMOAAAAAAAARA4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQA4AAAAAAABADgAAAAAAAAAAAAAAAPC/"
				],
				[
					112,
					1,
					"insert",
					{
						"characters": " ||"
					},
					"AwAAAEQOAAAAAAAARQ4AAAAAAAAAAAAARQ4AAAAAAABGDgAAAAAAAAAAAABGDgAAAAAAAEcOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARA4AAAAAAABEDgAAAAAAAAAAAAAAAPC/"
				],
				[
					113,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEcOAAAAAAAASA4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARw4AAAAAAABHDgAAAAAAAAAAAAAAAPC/"
				],
				[
					125,
					1,
					"insert",
					{
						"characters": "'"
					},
					"AQAAAI8MAAAAAAAAkAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjwwAAAAAAACPDAAAAAAAAAAAAAAAAPC/"
				],
				[
					126,
					1,
					"paste",
					null,
					"AQAAAJAMAAAAAAAAkQwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkAwAAAAAAACQDAAAAAAAAAAAAAAAAPC/"
				],
				[
					127,
					2,
					"left_delete",
					null,
					"AgAAAJAMAAAAAAAAkAwAAAAAAAADAAAA4paIjwwAAAAAAACPDAAAAAAAAAEAAAAn",
					"AQAAAAAAAAABAAAAkQwAAAAAAACRDAAAAAAAAAAAAAAAAPC/"
				],
				[
					160,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAAUNAAAAAAAABg0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABQ0AAAAAAAAFDQAAAAAAAAAAAAAAAPC/"
				],
				[
					161,
					1,
					"insert",
					{
						"characters": " bg"
					},
					"AwAAAAYNAAAAAAAABw0AAAAAAAAAAAAABw0AAAAAAAAIDQAAAAAAAAAAAAAIDQAAAAAAAAkNAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABg0AAAAAAAAGDQAAAAAAAAAAAAAAAPC/"
				],
				[
					162,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAAkNAAAAAAAACg0AAAAAAAAAAAAACg0AAAAAAAALDQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACQ0AAAAAAAAJDQAAAAAAAAAAAAAAAPC/"
				],
				[
					163,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAsNAAAAAAAADA0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACw0AAAAAAAALDQAAAAAAAAAAAAAAAPC/"
				],
				[
					164,
					3,
					"left_delete",
					null,
					"AwAAAAsNAAAAAAAACw0AAAAAAAABAAAAIAoNAAAAAAAACg0AAAAAAAABAAAAPQkNAAAAAAAACQ0AAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAADA0AAAAAAAAMDQAAAAAAAAAAAAAAAPC/"
				],
				[
					167,
					1,
					"insert",
					{
						"characters": "\nlet"
					},
					"BQAAAOINAAAAAAAA4w0AAAAAAAAAAAAA4w0AAAAAAADlDQAAAAAAAAAAAADlDQAAAAAAAOYNAAAAAAAAAAAAAOYNAAAAAAAA5w0AAAAAAAAAAAAA5w0AAAAAAADoDQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4g0AAAAAAADiDQAAAAAAAAAAAAAAAPC/"
				],
				[
					168,
					1,
					"insert",
					{
						"characters": " b"
					},
					"AgAAAOgNAAAAAAAA6Q0AAAAAAAAAAAAA6Q0AAAAAAADqDQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6A0AAAAAAADoDQAAAAAAAAAAAAAAAPC/"
				],
				[
					169,
					5,
					"left_delete",
					null,
					"BQAAAOkNAAAAAAAA6Q0AAAAAAAABAAAAYugNAAAAAAAA6A0AAAAAAAABAAAAIOcNAAAAAAAA5w0AAAAAAAABAAAAdOYNAAAAAAAA5g0AAAAAAAABAAAAZeUNAAAAAAAA5Q0AAAAAAAABAAAAbA",
					"AQAAAAAAAAABAAAA6g0AAAAAAADqDQAAAAAAAAAAAAAAAPC/"
				],
				[
					170,
					1,
					"insert",
					{
						"characters": "bg??="
					},
					"BQAAAOUNAAAAAAAA5g0AAAAAAAAAAAAA5g0AAAAAAADnDQAAAAAAAAAAAADnDQAAAAAAAOgNAAAAAAAAAAAAAOgNAAAAAAAA6Q0AAAAAAAAAAAAA6Q0AAAAAAADqDQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5Q0AAAAAAADlDQAAAAAAAAAAAAAAAPC/"
				],
				[
					171,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOoNAAAAAAAA6w0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6g0AAAAAAADqDQAAAAAAAAAAAAAAAPC/"
				],
				[
					172,
					1,
					"paste",
					null,
					"AQAAAOsNAAAAAAAALA4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6w0AAAAAAADrDQAAAAAAAAAAAAAAAPC/"
				],
				[
					173,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAACwOAAAAAAAALQ4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALA4AAAAAAAAsDgAAAAAAAAAAAAAAAPC/"
				],
				[
					185,
					1,
					"paste",
					null,
					"AQAAAOsNAAAAAAAA8g0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6w0AAAAAAADrDQAAAAAAAAAAAAAAAPC/"
				],
				[
					186,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAPINAAAAAAAA8w0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8g0AAAAAAADyDQAAAAAAAAAAAAAAAPC/"
				],
				[
					188,
					1,
					"cut",
					null,
					"AQAAAPMNAAAAAAAA8w0AAAAAAABCAAAAWy4uLm5ldyBIU0xBKHsgaDogNDgsIHM6IDQ5LCBsOiA2NSwgYTogMSB9KS50b1JHQkEoKV0uc2xpY2UoMCwgMyk7",
					"AQAAAAAAAAABAAAA8w0AAAAAAAA1DgAAAAAAAP///////+9/"
				],
				[
					193,
					1,
					"insert",
					{
						"characters": "bg"
					},
					"AwAAALIOAAAAAAAAsw4AAAAAAAAAAAAAsw4AAAAAAACzDgAAAAAAAAcAAAByZ2JbQkddsw4AAAAAAAC0DgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsg4AAAAAAAC5DgAAAAAAAAAAAAAAAPC/"
				],
				[
					205,
					1,
					"cut",
					null,
					"AQAAAPUMAAAAAAAA9QwAAAAAAAAQAAAALCBzcXVhcmUgPSBmYWxzZQ",
					"AQAAAAAAAAABAAAA9QwAAAAAAAAFDQAAAAAAAAAAAAAAAPC/"
				],
				[
					208,
					1,
					"paste",
					null,
					"AQAAAPkMAAAAAAAACQ0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+QwAAAAAAAD5DAAAAAAAAAAAAAAAAPC/"
				],
				[
					243,
					1,
					"insert",
					{
						"characters": "bg"
					},
					"AwAAAEMOAAAAAAAARA4AAAAAAAAAAAAARA4AAAAAAABEDgAAAAAAAAcAAAByZ2JbQkddRA4AAAAAAABFDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQw4AAAAAAABKDgAAAAAAAAAAAAAAAPC/"
				],
				[
					252,
					1,
					"insert",
					{
						"characters": "bg"
					},
					"AwAAAC0PAAAAAAAALg8AAAAAAAAAAAAALg8AAAAAAAAuDwAAAAAAAAcAAAByZ2JbQkddLg8AAAAAAAAvDwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALQ8AAAAAAAA0DwAAAAAAAAAAAAAAAPC/"
				],
				[
					257,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABYDwAAaW1wb3J0IHsgTGluZUxpc3QsIFJlY3QsIFBvaW50IH0gZnJvbSAnLi9saWIvZ2VvbS5qcyc7CmltcG9ydCBVdGlsIGZyb20gJy4vbGliL3V0aWwuanMnOwppbXBvcnQgeyBCRywgZGlnaXQyY29sb3IsIEdldENvbG9yQmFuZHMsIFBhcnRTY2FsZXMgfSBmcm9tICcuL2xpYi9lZGEvY29sb3JDb2RpbmcuanMnOwpleHBvcnQgeyBHZXRDb2xvckJhbmRzIH0gZnJvbSAnLi9saWIvZWRhL2NvbG9yQ29kaW5nLmpzJzsKaW1wb3J0IHsgbWFwLCBjb25zdW1lLCByZWR1Y2UgfSBmcm9tICcuL2xpYi9pdGVyYWJsZS5qcyc7CgpleHBvcnQgZnVuY3Rpb24gR2V0UGFydHMoc2NoZW1hdGljLCB0ID0gZW50cmllcyA9PiBPYmplY3QuZnJvbUVudHJpZXMoZW50cmllcykpIHsKICByZXR1cm4gdChtYXAoc2NoZW1hdGljLmdldEFsbCgncGFydCcpLCBlbGVtID0+IFtlbGVtLm5hbWUsIGVsZW1dKSk7Cn0KCmV4cG9ydCBmdW5jdGlvbiBHZXRFbGVtZW50cyhib2FyZCwgdCA9IGVudHJpZXMgPT4gT2JqZWN0LmZyb21FbnRyaWVzKGVudHJpZXMpKSB7CiAgcmV0dXJuIHQobWFwKGJvYXJkLmdldEFsbCgnZWxlbWVudCcpLCBlbGVtID0+IFtlbGVtLm5hbWUsIGVsZW1dKSk7Cn0KCmV4cG9ydCBmdW5jdGlvbiBHZXRJbnN0YW5jZXMoc2NoZW1hdGljLCB0ID0gZW50cmllcyA9PiAgZW50cmllcykgewogIGxldCBlbnRyaWVzID0gT2JqZWN0LmVudHJpZXMoCiAgICByZWR1Y2UoCiAgICAgIHNjaGVtYXRpYy5nZXRBbGwoJ2luc3RhbmNlJyksCiAgICAgIChhY2N1LCBlbGVtKSA9PiB7CiAgICAgICAgY29uc3QgeyBuYW1lIH0gPSBlbGVtLnBhcnQ7CiAgICAgICAgaWYoIShuYW1lIGluIGFjY3UpKSBhY2N1W25hbWVdID0gW107CiAgICAgICAgYWNjdVtuYW1lXS5wdXNoKGVsZW0pOwogICAgICAgIHJldHVybiBhY2N1OwogICAgICB9LAogICAgICB7fQogICAgKQogICk7CiAgcmV0dXJuIHQoZW50cmllcyk7Cn0KCmV4cG9ydCBmdW5jdGlvbiBHZXRQb3NpdGlvbnMoZG9jKSB7CiAgbGV0IGVudHJpZXMgPSB7IHNjaDogZCA9PiBHZXRJbnN0YW5jZXMoZCksIGJyZDogZCA9PiBHZXRFbGVtZW50cyhkLCBlID0+IGUpLm1hcCgoW25hbWUsIGVsZW1dKSA9PiBbbmFtZSwgW2VsZW1dXSkgfVsKICAgIGRvYy50eXBlCiAgXShkb2MpOwogIHJldHVybiBlbnRyaWVzLm1hcCgoW25hbWUsIGFycl0pID0+IFtuYW1lLCBhcnIubWFwKCh7IHgsIHkgfSkgPT4gbmV3IFBvaW50KHgsIHkpKV0pOwp9CgpleHBvcnQgZnVuY3Rpb24gVXBkYXRlTWVhc3VyZXMoYm9hcmQpIHsKICBpZighYm9hcmQpIHJldHVybiBmYWxzZTsKICBsZXQgYm91bmRzID0gYm9hcmQuZ2V0Qm91bmRzKCk7CiAgbGV0IG1lYXN1cmVzID0gYm9hcmQuZ2V0TWVhc3VyZXMoKTsKICBpZihtZWFzdXJlcykgewogICAgY29uc29sZS5sb2coJ2dvdCBtZWFzdXJlczonLCBtZWFzdXJlcyk7CiAgfSBlbHNlIHsKICAgIGxldCByZWN0ID0gbmV3IFJlY3QoYm91bmRzLnJlY3QpOwogICAgbGV0IGxpbmVzID0gcmVjdC50b0xpbmVzKGxpbmVzID0+IG5ldyBMaW5lTGlzdChsaW5lcykpOwogICAgbGV0IHsgcGxhaW4gfSA9IGJvYXJkOwogICAgcGxhaW4ucmVtb3ZlKGUgPT4gZS50YWdOYW1lID09ICd3aXJlJyAmJiBlLmF0dHJpYnV0ZXMubGF5ZXIgPT0gJzQ3Jyk7CiAgICBwbGFpbi5hcHBlbmQoCiAgICAgIC4uLmxpbmVzLm1hcChsaW5lID0+ICh7CiAgICAgICAgdGFnTmFtZTogJ3dpcmUnLAogICAgICAgIGF0dHJpYnV0ZXM6IHsgLi4ubGluZS50b09iamVjdCgpLCBsYXllcjogNDcsIHdpZHRoOiAwIH0KICAgICAgfSkpCiAgICApOwogIH0KICByZXR1cm4gIW1lYXN1cmVzOwp9CgpleHBvcnQgZnVuY3Rpb24gQWxpZ25JdGVtKGl0ZW0pIHsKICBjb25zb2xlLmRlYnVnKCdBbGlnbkl0ZW0nLCBpdGVtKTsKICBsZXQgZ2VvbWV0cnkgPSBpdGVtLmdlb21ldHJ5OwogIGxldCBvbGRQb3MgPSBnZW9tZXRyeS5jbG9uZSgpOwogIGxldCBuZXdQb3MgPSBnZW9tZXRyeS5jbG9uZSgpLnJvdW5kKDEuMjcsIDIpOwogIGxldCBkaWZmID0gbmV3UG9zLmRpZmYob2xkUG9zKS5yb3VuZCgwLjAwMDEsIDUpOwogIGxldCBiZWZvcmUgPSBpdGVtLnBhcmVudE5vZGUudG9YTUwoKTsKICBnZW9tZXRyeS5hZGQoZGlmZik7CiAgbGV0IGNoYW5nZWQgPSAhZGlmZi5pc051bGwoKTsKICBpZihjaGFuZ2VkKSB7CiAgICBjb25zb2xlLmxvZygnYmVmb3JlOicsIFV0aWwuYWJicmV2aWF0ZShiZWZvcmUpKTsKICAgIGNvbnNvbGUubG9nKCdhZnRlcjonLCBVdGlsLmFiYnJldmlhdGUoaXRlbS5wYXJlbnROb2RlLnRvWE1MKCkpKTsKICAgIGNvbnNvbGUubG9nKCdhbGlnblxuJywgaXRlbS54cGF0aCgpLCAnXG4gbmV3UG9zOicsIG5ld1BvcywgJ1xuIGRpZmY6JywgZGlmZiwgJ1xuIGF0dHI6JywgaXRlbS5yYXcuYXR0cmlidXRlcyk7CiAgfQogIHJldHVybiBjaGFuZ2VkOwp9CgpleHBvcnQgZnVuY3Rpb24gQWxpZ25BbGwoZG9jKSB7CiAgaWYoIWRvYykgcmV0dXJuIGZhbHNlOwogIGxldCBpdGVtcyA9IGRvYy5nZXRBbGwoZG9jLnR5cGUgPT0gJ2JyZCcgPyAnZWxlbWVudCcgOiAnaW5zdGFuY2UnKTsKICBsZXQgY2hhbmdlZCA9IGZhbHNlOwogIGZvcihsZXQgaXRlbSBvZiBpdGVtcykgY2hhbmdlZCB8PSBBbGlnbkl0ZW0oaXRlbSk7CiAgbGV0IHNpZ25hbHNfbmV0cyA9IGRvYy5nZXRBbGwoLyhzaWduYWxzfG5ldHMpLyk7CiAgZm9yKGxldCBuZXQgb2Ygc2lnbmFsc19uZXRzKSBmb3IgKGxldCBpdGVtIG9mIG5ldC5nZXRBbGwoJ3dpcmUnKSkgY2hhbmdlZCB8PSBBbGlnbkl0ZW0oaXRlbSk7CiAgcmV0dXJuICEhY2hhbmdlZDsKfQoKZXhwb3J0IGZ1bmN0aW9uIHNjaWVudGlmaWModmFsdWUpIHsKICBsZXQgc2NpID0gW0dldE1hbnRpc3NhKHZhbHVlKSwgR2V0RXhwb25lbnQodmFsdWUpXTsKICBkZWZpbmUoc2NpLCB7CiAgICB0b1N0cmluZygpIHsKICAgICAgbGV0IHNpZ24gPSBNYXRoLnNpZ24odGhpc1sxXSkgPCAwID8gJy0nIDogJysnOwogICAgICByZXR1cm4gYCR7dGhpc1swXX1lJHtzaWdufSR7KE1hdGguYWJzKHRoaXNbMV0pICsgJycpLnBhZFN0YXJ0KDIsICcwJyl9YDsKICAgIH0KICB9KTsKICByZXR1cm4gc2NpOwp9Cgpjb25zdCB0ZXh0ID0gKCgpID0+IHsKICBjb25zdCBhbnNpID0gVXRpbC5jb2xvcmluZyh0cnVlKTsKICByZXR1cm4gKC4uLmFyZ3MpID0+IGFuc2kudGV4dCguLi5hcmdzKTsKfSkoKTsKCmNvbnN0IHZlcnRpY2FsUmVjdGFuZ2xlcyA9IFsn4paIJywgJ+KWoScsICdcdTI1ODhcdTI1OGQnICAsICfilqEnLCAn4pavJ107CmNvbnN0IGxhcmdlU3F1YXJlcyA9IFsn4pagJywgJ+KWoSddOwoKZXhwb3J0IGZ1bmN0aW9uIG51bTJjb2xvcihudW0sIGJnLCBzcXVhcmUgPSBmYWxzZSkgewogIGxldCBzeW0gPSBzcXVhcmUgPyBsYXJnZVNxdWFyZXMgOiB2ZXJ0aWNhbFJlY3RhbmdsZXM7CiAgbGV0IGJhbmRzID0gdHlwZW9mIG51bSA9PSAnbnVtYmVyJyA/IEdldENvbG9yQmFuZHMobnVtKSA6IG51bTsKICBjb25zdCB7IGFuc2ksIHJnYiB9ID0gZGlnaXQyY29sb3I7CiAgbGV0IGEgPSBuID0+IGFuc2lbbl0/LnNsaWNlKDEpID8/IFtdOwogIGxldCByZXQgPSBbXTsKICBiZz8/PSByZ2JbQkddOwogIGZvcihsZXQgYmFuZCBvZiBiYW5kcykgewogICAvKiBpZihyZXQubGVuZ3RoKSAqL3JldC5wdXNoKHRleHQoJyAnLCA0OCwgMiwgLi4uYmcpKTsKICAgIGlmKHRydWUgfHwgYmFuZCkgewogICAgICBiYW5kID0gdGV4dChzeW1bMF0sIDM4LCAuLi5hKGJhbmQpKTsKICAgICAgYmFuZCA9IHRleHQoYmFuZCwgNDgsIDIsIC4uLmJnKTsKICAgIH0gZWxzZSB7CiAgICAgIGJhbmQgPSB0ZXh0KHN5bVsxXSwgMzgsIDIsIDI1NSwgMjU1LCAyNTUpOwogICAgfQogICAgcmV0LnB1c2goYmFuZCk7CiAgfQogIHJldC5wdXNoKHRleHQoJyAnLCA0OCwgMiwgLi4uYmcpKTsKICByZXR1cm4gcmV0LmpvaW4oJycpOwp9CgAAAAAAAAAALQ8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALw8AAAAAAAAvDwAAAAAAAAAAAAAAAPC/"
				],
				[
					258,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA5DwAAaW1wb3J0IHsgTGluZUxpc3QsIFJlY3QsIFBvaW50IH0gZnJvbSAnLi9saWIvZ2VvbS5qcyc7CmltcG9ydCBVdGlsIGZyb20gJy4vbGliL3V0aWwuanMnOwppbXBvcnQgeyBCRywgZGlnaXQyY29sb3IsIEdldENvbG9yQmFuZHMsIFBhcnRTY2FsZXMgfSBmcm9tICcuL2xpYi9lZGEvY29sb3JDb2RpbmcuanMnOwpleHBvcnQgeyBHZXRDb2xvckJhbmRzIH0gZnJvbSAnLi9saWIvZWRhL2NvbG9yQ29kaW5nLmpzJzsKaW1wb3J0IHsgbWFwLCBjb25zdW1lLCByZWR1Y2UgfSBmcm9tICcuL2xpYi9pdGVyYWJsZS5qcyc7CmV4cG9ydCBmdW5jdGlvbiBHZXRQYXJ0cyhzY2hlbWF0aWMsIHQgPSBlbnRyaWVzID0+IE9iamVjdC5mcm9tRW50cmllcyhlbnRyaWVzKSkgewogIHJldHVybiB0KG1hcChzY2hlbWF0aWMuZ2V0QWxsKCdwYXJ0JyksIGVsZW0gPT4gW2VsZW0ubmFtZSwgZWxlbV0pKTsKfQpleHBvcnQgZnVuY3Rpb24gR2V0RWxlbWVudHMoYm9hcmQsIHQgPSBlbnRyaWVzID0+IE9iamVjdC5mcm9tRW50cmllcyhlbnRyaWVzKSkgewogIHJldHVybiB0KG1hcChib2FyZC5nZXRBbGwoJ2VsZW1lbnQnKSwgZWxlbSA9PiBbZWxlbS5uYW1lLCBlbGVtXSkpOwp9CmV4cG9ydCBmdW5jdGlvbiBHZXRJbnN0YW5jZXMoc2NoZW1hdGljLCB0ID0gZW50cmllcyA9PiAgZW50cmllcykgewogIGxldCBlbnRyaWVzID0gT2JqZWN0LmVudHJpZXMoCiAgICByZWR1Y2UoCiAgICAgIHNjaGVtYXRpYy5nZXRBbGwoJ2luc3RhbmNlJyksCiAgICAgIChhY2N1LCBlbGVtKSA9PiB7CiAgICAgICAgY29uc3QgeyBuYW1lIH0gPSBlbGVtLnBhcnQ7CiAgICAgICAgaWYoIShuYW1lIGluIGFjY3UpKSBhY2N1W25hbWVdID0gW107CiAgICAgICAgYWNjdVtuYW1lXS5wdXNoKGVsZW0pOwogICAgICAgIHJldHVybiBhY2N1OwogICAgICB9LAogICAgICB7fQogICAgKQogICk7CiAgcmV0dXJuIHQoZW50cmllcyk7Cn0KZXhwb3J0IGZ1bmN0aW9uIEdldFBvc2l0aW9ucyhkb2MpIHsKICBsZXQgZW50cmllcyA9IHsgc2NoOiBkID0+IEdldEluc3RhbmNlcyhkKSwgYnJkOiBkID0+IEdldEVsZW1lbnRzKGQsIGUgPT4gZSkubWFwKChbbmFtZSwgZWxlbV0pID0+IFtuYW1lLCBbZWxlbV1dKSB9WwogICAgZG9jLnR5cGUKICBdKGRvYyk7CiAgcmV0dXJuIGVudHJpZXMubWFwKChbbmFtZSwgYXJyXSkgPT4gW25hbWUsIGFyci5tYXAoKHsgeCwgeSB9KSA9PiBuZXcgUG9pbnQoeCwgeSkpXSk7Cn0KZXhwb3J0IGZ1bmN0aW9uIFVwZGF0ZU1lYXN1cmVzKGJvYXJkKSB7CiAgaWYoIWJvYXJkKSByZXR1cm4gZmFsc2U7CiAgbGV0IGJvdW5kcyA9IGJvYXJkLmdldEJvdW5kcygpOwogIGxldCBtZWFzdXJlcyA9IGJvYXJkLmdldE1lYXN1cmVzKCk7CiAgaWYobWVhc3VyZXMpIHsKICAgIGNvbnNvbGUubG9nKCdnb3QgbWVhc3VyZXM6JywgbWVhc3VyZXMpOwogIH0gZWxzZSB7CiAgICBsZXQgcmVjdCA9IG5ldyBSZWN0KGJvdW5kcy5yZWN0KTsKICAgIGxldCBsaW5lcyA9IHJlY3QudG9MaW5lcyhsaW5lcyA9PiBuZXcgTGluZUxpc3QobGluZXMpKTsKICAgIGxldCB7IHBsYWluIH0gPSBib2FyZDsKICAgIHBsYWluLnJlbW92ZShlID0+IGUudGFnTmFtZSA9PSAnd2lyZScgJiYgZS5hdHRyaWJ1dGVzLmxheWVyID09ICc0NycpOwogICAgcGxhaW4uYXBwZW5kKAogICAgICAuLi5saW5lcy5tYXAobGluZSA9PiAoewogICAgICAgIHRhZ05hbWU6ICd3aXJlJywKICAgICAgICBhdHRyaWJ1dGVzOiB7IC4uLmxpbmUudG9PYmplY3QoKSwgbGF5ZXI6IDQ3LCB3aWR0aDogMCB9CiAgICAgIH0pKQogICAgKTsKICB9CiAgcmV0dXJuICFtZWFzdXJlczsKfQpleHBvcnQgZnVuY3Rpb24gQWxpZ25JdGVtKGl0ZW0pIHsKICBjb25zb2xlLmRlYnVnKCdBbGlnbkl0ZW0nLCBpdGVtKTsKICBsZXQgZ2VvbWV0cnkgPSBpdGVtLmdlb21ldHJ5OwogIGxldCBvbGRQb3MgPSBnZW9tZXRyeS5jbG9uZSgpOwogIGxldCBuZXdQb3MgPSBnZW9tZXRyeS5jbG9uZSgpLnJvdW5kKDEuMjcsIDIpOwogIGxldCBkaWZmID0gbmV3UG9zLmRpZmYob2xkUG9zKS5yb3VuZCgwLjAwMDEsIDUpOwogIGxldCBiZWZvcmUgPSBpdGVtLnBhcmVudE5vZGUudG9YTUwoKTsKICBnZW9tZXRyeS5hZGQoZGlmZik7CiAgbGV0IGNoYW5nZWQgPSAhZGlmZi5pc051bGwoKTsKICBpZihjaGFuZ2VkKSB7CiAgICBjb25zb2xlLmxvZygnYmVmb3JlOicsIFV0aWwuYWJicmV2aWF0ZShiZWZvcmUpKTsKICAgIGNvbnNvbGUubG9nKCdhZnRlcjonLCBVdGlsLmFiYnJldmlhdGUoaXRlbS5wYXJlbnROb2RlLnRvWE1MKCkpKTsKICAgIGNvbnNvbGUubG9nKCdhbGlnblxuJywgaXRlbS54cGF0aCgpLCAnXG4gbmV3UG9zOicsIG5ld1BvcywgJ1xuIGRpZmY6JywgZGlmZiwgJ1xuIGF0dHI6JywgaXRlbS5yYXcuYXR0cmlidXRlcyk7CiAgfQogIHJldHVybiBjaGFuZ2VkOwp9CmV4cG9ydCBmdW5jdGlvbiBBbGlnbkFsbChkb2MpIHsKICBpZighZG9jKSByZXR1cm4gZmFsc2U7CiAgbGV0IGl0ZW1zID0gZG9jLmdldEFsbChkb2MudHlwZSA9PSAnYnJkJyA/ICdlbGVtZW50JyA6ICdpbnN0YW5jZScpOwogIGxldCBjaGFuZ2VkID0gZmFsc2U7CiAgZm9yKGxldCBpdGVtIG9mIGl0ZW1zKSBjaGFuZ2VkIHw9IEFsaWduSXRlbShpdGVtKTsKICBsZXQgc2lnbmFsc19uZXRzID0gZG9jLmdldEFsbCgvKHNpZ25hbHN8bmV0cykvKTsKICBmb3IobGV0IG5ldCBvZiBzaWduYWxzX25ldHMpIGZvciAobGV0IGl0ZW0gb2YgbmV0LmdldEFsbCgnd2lyZScpKSBjaGFuZ2VkIHw9IEFsaWduSXRlbShpdGVtKTsKICByZXR1cm4gISFjaGFuZ2VkOwp9CmV4cG9ydCBmdW5jdGlvbiBzY2llbnRpZmljKHZhbHVlKSB7CiAgbGV0IHNjaSA9IFtHZXRNYW50aXNzYSh2YWx1ZSksIEdldEV4cG9uZW50KHZhbHVlKV07CiAgZGVmaW5lKHNjaSwgewogICAgdG9TdHJpbmcoKSB7CiAgICAgIGxldCBzaWduID0gTWF0aC5zaWduKHRoaXNbMV0pIDwgMCA/ICctJyA6ICcrJzsKICAgICAgcmV0dXJuIGAke3RoaXNbMF19ZSR7c2lnbn0keyhNYXRoLmFicyh0aGlzWzFdKSArICcnKS5wYWRTdGFydCgyLCAnMCcpfWA7CiAgICB9CiAgfSk7CiAgcmV0dXJuIHNjaTsKfQpjb25zdCB0ZXh0ID0gKCgpID0+IHsKICBjb25zdCBhbnNpID0gVXRpbC5jb2xvcmluZyh0cnVlKTsKICByZXR1cm4gKC4uLmFyZ3MpID0+IGFuc2kudGV4dCguLi5hcmdzKTsKfSkoKTsKY29uc3QgdmVydGljYWxSZWN0YW5nbGVzID0gWyfilognLCAn4pahJywgJ1x1MjU4OFx1MjU4ZCcgICwgJ+KWoScsICfilq8nXTsKY29uc3QgbGFyZ2VTcXVhcmVzID0gWyfilqAnLCAn4pahJ107CmV4cG9ydCBmdW5jdGlvbiBudW0yY29sb3IobnVtLCBiZywgc3F1YXJlID0gZmFsc2UpIHsKICBsZXQgc3ltID0gc3F1YXJlID8gbGFyZ2VTcXVhcmVzIDogdmVydGljYWxSZWN0YW5nbGVzOwogIGxldCBiYW5kcyA9IHR5cGVvZiBudW0gPT0gJ251bWJlcicgPyBHZXRDb2xvckJhbmRzKG51bSkgOiBudW07CiAgY29uc3QgeyBhbnNpLCByZ2IgfSA9IGRpZ2l0MmNvbG9yOwogIGxldCBhID0gbiA9PiBhbnNpW25dPy5zbGljZSgxKSA/PyBbXTsKICBsZXQgcmV0ID0gW107CiAgYmc/Pz0gcmdiW0JHXTsKICBmb3IobGV0IGJhbmQgb2YgYmFuZHMpIHsKICAgcmV0LnB1c2godGV4dCgnICcsIDQ4LCAyLCAuLi5iZykpOwogICAgaWYodHJ1ZSB8fCBiYW5kKSB7CiAgICAgIGJhbmQgPSB0ZXh0KHN5bVswXSwgMzgsIC4uLmEoYmFuZCkpOwogICAgICBiYW5kID0gdGV4dChiYW5kLCA0OCwgMiwgLi4uYmcpOwogICAgfSBlbHNlIHsKICAgICAgYmFuZCA9IHRleHQoc3ltWzFdLCAzOCwgMiwgMjU1LCAyNTUsIDI1NSk7CiAgICB9CiAgICByZXQucHVzaChiYW5kKTsKICB9CiAgcmV0LnB1c2godGV4dCgnICcsIDQ4LCAyLCAuLi5iZykpOwogIHJldHVybiByZXQuam9pbignJyk7Cn0KAAAAAAAAAAAsDwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALQ8AAAAAAAAtDwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/eda/colorCoding.js",
			"settings":
			{
				"buffer_size": 2400,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					13,
					1,
					"left_delete",
					null,
					"AQAAADQFAAAAAAAANAUAAAAAAAABAAAANg",
					"AQAAAAAAAAABAAAANQUAAAAAAAA1BQAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "3"
					},
					"AQAAADQFAAAAAAAANQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANAUAAAAAAAA0BQAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"left_delete",
					null,
					"AQAAADQFAAAAAAAANAUAAAAAAAABAAAAMw",
					"AQAAAAAAAAABAAAANQUAAAAAAAA1BQAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAADQFAAAAAAAANQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANAUAAAAAAAA0BQAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": "50"
					},
					"AwAAAEEGAAAAAAAAQgYAAAAAAAAAAAAAQgYAAAAAAABCBgAAAAAAAAEAAAAwQgYAAAAAAABDBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQQYAAAAAAABCBgAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					1,
					"left_delete",
					null,
					"AQAAAEEGAAAAAAAAQQYAAAAAAAABAAAANQ",
					"AQAAAAAAAAABAAAAQgYAAAAAAABCBgAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": "4"
					},
					"AQAAAEEGAAAAAAAAQgYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQQYAAAAAAABBBgAAAAAAAAAAAAAAAPC/"
				],
				[
					53,
					1,
					"left_delete",
					null,
					"AQAAAEEGAAAAAAAAQQYAAAAAAAABAAAANA",
					"AQAAAAAAAAABAAAAQgYAAAAAAABCBgAAAAAAAAAAAAAAAPC/"
				],
				[
					54,
					1,
					"insert",
					{
						"characters": "6"
					},
					"AQAAAEEGAAAAAAAAQgYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQQYAAAAAAABBBgAAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					1,
					"left_delete",
					null,
					"AQAAAEEGAAAAAAAAQQYAAAAAAAABAAAANg",
					"AQAAAAAAAAABAAAAQgYAAAAAAABCBgAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": "76"
					},
					"AgAAAEEGAAAAAAAAQgYAAAAAAAAAAAAAQgYAAAAAAABDBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQQYAAAAAAABBBgAAAAAAAAAAAAAAAPC/"
				],
				[
					61,
					1,
					"left_delete",
					null,
					"AQAAAEIGAAAAAAAAQgYAAAAAAAABAAAANg",
					"AQAAAAAAAAABAAAAQwYAAAAAAABDBgAAAAAAAAAAAAAAAPC/"
				],
				[
					65,
					2,
					"left_delete",
					null,
					"AgAAAEIGAAAAAAAAQgYAAAAAAAABAAAAMEEGAAAAAAAAQQYAAAAAAAABAAAANw",
					"AQAAAAAAAAABAAAAQwYAAAAAAABDBgAAAAAAAAAAAAAAAPC/"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": "665"
					},
					"AwAAAEEGAAAAAAAAQgYAAAAAAAAAAAAAQgYAAAAAAABDBgAAAAAAAAAAAABDBgAAAAAAAEQGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQQYAAAAAAABBBgAAAAAAAAAAAAAAAPC/"
				],
				[
					67,
					1,
					"left_delete",
					null,
					"AQAAAEMGAAAAAAAAQwYAAAAAAAABAAAANQ",
					"AQAAAAAAAAABAAAARAYAAAAAAABEBgAAAAAAAAAAAAAAAPC/"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": "5"
					},
					"AQAAAEMGAAAAAAAARAYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQwYAAAAAAABDBgAAAAAAAAAAAAAAAPC/"
				],
				[
					71,
					2,
					"left_delete",
					null,
					"AgAAAEMGAAAAAAAAQwYAAAAAAAABAAAANUIGAAAAAAAAQgYAAAAAAAABAAAANg",
					"AQAAAAAAAAABAAAARAYAAAAAAABEBgAAAAAAAAAAAAAAAPC/"
				],
				[
					72,
					1,
					"insert",
					{
						"characters": "5"
					},
					"AQAAAEIGAAAAAAAAQwYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQgYAAAAAAABCBgAAAAAAAAAAAAAAAPC/"
				],
				[
					77,
					1,
					"unindent",
					null,
					"AQAAABcGAAAAAAAAFwYAAAAAAAACAAAAICA",
					"AQAAAAAAAAABAAAAQwYAAAAAAABDBgAAAAAAAAAAAAAAAPC/"
				],
				[
					135,
					1,
					"insert",
					{
						"characters": "30o"
					},
					"BAAAADEGAAAAAAAAMgYAAAAAAAAAAAAAMgYAAAAAAAAyBgAAAAAAAAIAAAA0ODIGAAAAAAAAMwYAAAAAAAAAAAAAMwYAAAAAAAA0BgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMQYAAAAAAAAzBgAAAAAAAAAAAAAAAPC/"
				],
				[
					136,
					2,
					"left_delete",
					null,
					"AgAAADMGAAAAAAAAMwYAAAAAAAABAAAAbzIGAAAAAAAAMgYAAAAAAAABAAAAMA",
					"AQAAAAAAAAABAAAANAYAAAAAAAA0BgAAAAAAAAAAAAAAAPC/"
				],
				[
					137,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAADIGAAAAAAAAMwYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMgYAAAAAAAAyBgAAAAAAAAAAAAAAAPC/"
				],
				[
					140,
					2,
					"left_delete",
					null,
					"AgAAADkGAAAAAAAAOQYAAAAAAAABAAAAOTgGAAAAAAAAOAYAAAAAAAABAAAANA",
					"AQAAAAAAAAABAAAAOgYAAAAAAAA6BgAAAAAAAAAAAAAAAPC/"
				],
				[
					141,
					1,
					"insert",
					{
						"characters": "66"
					},
					"AgAAADgGAAAAAAAAOQYAAAAAAAAAAAAAOQYAAAAAAAA6BgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOAYAAAAAAAA4BgAAAAAAAAAAAAAAAPC/"
				],
				[
					146,
					2,
					"left_delete",
					null,
					"AgAAAEAGAAAAAAAAQAYAAAAAAAABAAAANT8GAAAAAAAAPwYAAAAAAAABAAAANg",
					"AQAAAAAAAAABAAAAQQYAAAAAAABBBgAAAAAAAAAAAAAAAPC/"
				],
				[
					147,
					1,
					"insert",
					{
						"characters": "782"
					},
					"AwAAAD8GAAAAAAAAQAYAAAAAAAAAAAAAQAYAAAAAAABBBgAAAAAAAAAAAABBBgAAAAAAAEIGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPwYAAAAAAAA/BgAAAAAAAAAAAAAAAPC/"
				],
				[
					148,
					2,
					"left_delete",
					null,
					"AgAAAEEGAAAAAAAAQQYAAAAAAAABAAAAMkAGAAAAAAAAQAYAAAAAAAABAAAAOA",
					"AQAAAAAAAAABAAAAQgYAAAAAAABCBgAAAAAAAAAAAAAAAPC/"
				],
				[
					149,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AQAAAEAGAAAAAAAAQQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQAYAAAAAAABABgAAAAAAAAAAAAAAAPC/"
				],
				[
					152,
					2,
					"left_delete",
					null,
					"AgAAAEAGAAAAAAAAQAYAAAAAAAABAAAAMj8GAAAAAAAAPwYAAAAAAAABAAAANw",
					"AQAAAAAAAAABAAAAQQYAAAAAAABBBgAAAAAAAAAAAAAAAPC/"
				],
				[
					153,
					1,
					"insert",
					{
						"characters": "80"
					},
					"AgAAAD8GAAAAAAAAQAYAAAAAAAAAAAAAQAYAAAAAAABBBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPwYAAAAAAAA/BgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "eagle-shell.js",
			"settings":
			{
				"buffer_size": 37905,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"prettier",
				"JsPrettier: Format Code"
			],
			[
				"pre",
				"Project: Edit Project"
			],
			[
				"prett",
				"JsPrettier: Format Code"
			],
			[
				"",
				"Auto indent"
			],
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"list pack",
				"Package Control: List Packages"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"edit ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"edit",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"outli",
				"Browse Mode: Outline (Right)"
			],
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"debugger",
				"Preferences: Debugger Settings"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"scheme",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"INSTALL",
				"Package Control: Install Package"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"adap",
				"Debugger: Install Adapters"
			],
			[
				"install ada",
				"Debugger: Install Adapters"
			],
			[
				"adapter",
				"Debugger: Install Adapters"
			],
			[
				"debug",
				"Debugger: Install Adapters"
			],
			[
				"Package Control: remove",
				"Package Control: Remove Package"
			],
			[
				"debu",
				"Debugger: Install Adapters"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 289.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/lib/eagle/element.js",
		"/home/roman/Projects/plot-cv/lib/eagle/node.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/xpath.js",
		"/home/roman/Projects/plot-cv/lib/eagle/document.js",
		"/home/roman/Dokumente/Electronics/example.circuit",
		"/home/roman/Projects/plot-cv/circuit.js",
		"/home/roman/Projects/pictest/eagle/OpenProg-18F2550.brd",
		"/home/roman/Projects/plot-cv/OpenProg-18F2550.circuit",
		"/home/roman/Projects/plot-cv/read.hex",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/eagle-shell.js",
		"/home/roman/Projects/plot-cv/test-bitset.js",
		"/home/roman/Projects/plot-cv/example.circuit",
		"/home/roman/Projects/plot-cv/test-circuit.js",
		"/home/roman/Projects/plot-cv/OProg-18F2550.hex",
		"/home/roman/Projects/plot-cv/lib/async/events.js",
		"/home/roman/Projects/plot-cv/lib/async/websocket.js",
		"/home/roman/Projects/plot-cv/lib/repeater/repeater.js",
		"/home/roman/Projects/plot-cv/eagle2gerber.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_treewalker.js",
		"/home/roman/Projects/plot-cv/lib/geom/bbox.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fs.js",
		"/home/roman/Projects/plot-cv/svg-crop-pad.js",
		"/home/roman/Projects/plot-cv/fire.js",
		"/home/roman/Projects/plot-cv/lib/geom/matrix.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/src/plugins/mirror.c",
		"/home/roman/Projects/plot-cv/fire.html",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/list-exports.js",
		"/home/roman/Projects/plot-cv/lib/stream/utils.js",
		"/home/roman/Projects/plot-cv/string-helpers.js",
		"/home/roman/Projects/plot-cv/test-bjson.js",
		"/home/roman/Projects/plot-cv/bjson.js",
		"/home/roman/Projects/plot-cv/upload-server.js",
		"/home/roman/Projects/plot-cv/clang-ast.js",
		"/home/roman/Projects/plot-cv/ast-shell.js",
		"/home/roman/Projects/plot-cv/openlayers/examples/wms-tiled-wrap-180.html",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-pointer.c",
		"/home/roman/Projects/plot-cv/plot-cv.sublime-project",
		"/home/roman/Projects/plot-cv/lib/misc.js",
		"/home/roman/Projects/plot-cv/test-debuggerprotocol.js",
		"/home/roman/Projects/plot-cv/lib/iterator/helpers.js",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/lib/stream.js",
		"/home/roman/Projects/plot-cv/filelist.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-server-ws.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-server-http.c",
		"/home/roman/Projects/plot-cv/lib/hooks/useAsyncIterator.js",
		"/home/roman/Projects/plot-cv/lib/hooks/useAsyncGenerator.js",
		"/home/roman/Projects/plot-cv/filelist.html",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/extendGenerator.js",
		"/home/roman/Projects/plot-cv/main.js",
		"/home/roman/Projects/plot-cv/index.html",
		"/home/roman/Projects/plot-cv/test-gpio.js",
		"/home/roman/Projects/plot-cv/upload.js",
		"/home/roman/Projects/plot-cv/upload.html",
		"/home/roman/Projects/pic-programmer/a-p-prog/fw/pp/pp.ino",
		"/home/roman/Projects/plot-cv/fontsample.js",
		"/home/roman/Projects/plot-cv/test-opencv.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/xml-shell.js",
		"/home/roman/Projects/pictest/7seg-2.54-new-boards.svg",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.c",
		"/home/roman/Projects/plot-cv/eagle-server.js",
		"/home/roman/Projects/plot-cv/debugger-server.js",
		"/home/roman/Projects/plot-cv/cv-shell.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/qjsm.c",
		"/home/roman/Projects/plot-cv/adsb-server.js",
		"/home/roman/Projects/plot-cv/test-rpc.js",
		"/home/roman/Projects/plot-cv/test-repl.js",
		"/home/roman/Projects/plot-cv/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/repl.js",
		"/home/roman/Projects/plot-cv/lib/geom/transformation.js",
		"/home/roman/Projects/plot-cv/lib/async/helpers.js",
		"/home/roman/Projects/plot-cv/draw.js",
		"/home/roman/Projects/plot-cv/lib/async.js",
		"/home/roman/Projects/plot-cv/test-minnet.js",
		"/home/roman/Projects/plot-cv/list-directory.js",
		"/home/roman/Projects/plot-cv/list.html",
		"/home/roman/Projects/plot-cv/lib/crosskit.js",
		"/home/roman/Projects/plot-cv/fire-es.html",
		"/home/roman/Projects/plot-cv/fire-es.js",
		"/home/roman/Projects/plot-cv/lib/async/timer.js",
		"/home/roman/Projects/plot-cv/lib/dom/element.js",
		"/home/roman/Projects/plot-cv/test-worker.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
		"/home/roman/Projects/plot-cv/promise-worker.js",
		"/home/roman/Projects/plot-cv/workerScript.js",
		"/home/roman/Projects/plot-cv/resolve-imports.js",
		"/home/roman/Projects/plot-cv/fire.es",
		"/home/roman/Projects/plot-cv/process-pool.js",
		"/home/roman/Projects/plot-cv/worker.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/console.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/vector.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/streams.js",
		"/home/roman/Projects/plot-cv/test-stream.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/cmake/QuickJSModule.cmake",
		"/home/roman/Projects/plot-cv/test-worker2.js",
		"/home/roman/Projects/quickjs.c",
		"/home/roman/Projects/plot-cv/static/css/upload.css",
		"/home/roman/Projects/plot-cv/object-helpers.js",
		"/home/roman/Projects/plot-cv/lib/eagle/boardRenderer.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/pad.js",
		"/home/roman/Projects/plot-cv/src/matrix.cpp",
		"/home/roman/Projects/plot-cv/lib/eagle/renderUtils.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/text.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/package.js",
		"/home/roman/Projects/plot-cv/lib/eagle/libraryRenderer.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/board.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/frame.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/element.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/pin.js",
		"/home/roman/Projects/an-tronics/eagle/AGC-Amplifier-LM13600-Stereo.sch",
		"/home/roman/Projects/plot-cv/lib/eagle/components/textElement.js",
		"/home/roman/Projects/plot-cv/ws-worker.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/symbol.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/instance.js",
		"/home/roman/Projects/plot-cv/lib/eagle/schematicRenderer.js",
		"/home/roman/Projects/plot-cv/AGC-Amplifier-LM13600-Stereo-schematic.svg",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_childprocess.js",
		"/home/roman/Projects/plot-cv/test-childprocess.js",
		"/home/roman/Projects/plot-cv/ol-helpers.js",
		"/home/roman/Projects/plot-cv/ol-map.js",
		"/home/roman/Projects/plot-cv/map.html",
		"/home/roman/Projects/plot-cv/os-helpers.js",
		"/home/roman/Projects/plot-cv/debugger.js",
		"/home/roman/Projects/plot-cv/static/css/draw.css",
		"/home/roman/Projects/plot-cv/lib/geom/point.js",
		"/home/roman/Projects/plot-cv/lib/geom/rect.js"
	],
	"find":
	{
		"height": 40.0
	},
	"find_in_files":
	{
		"height": 146.0,
		"where_history":
		[
			"<open files>,/home/roman/Projects/plot-cv,*.js,-*/build/*,-*/inst/*",
			"/home/roman/Projects/plot-cv,*.js,-*/build/*,-*/inst/*",
			"/home/roman/Projects/plot-cv,*.js,-*/build/*",
			"/home/roman/Projects/plot-cv,*.js",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"new Proxy",
			"length:",
			"interpol",
			"mix",
			"digit2color",
			"^}\\n([^\\n])",
			"num2co",
			"num2color",
			"ColorBa",
			"Util\\.",
			"component",
			"'compon",
			"args",
			"Package2Cir",
			"\\.rot",
			"function Get",
			"Package2Circuit",
			"do34",
			"Elements2Circuit",
			"Signal2C",
			"Package2Circuit",
			"signals",
			"Eagle2Circuit",
			"Elements2Circ",
			"Package2C",
			"GetNames",
			"'children'",
			"get children",
			"children",
			"packageToPosMap",
			"parsePac",
			"class Connect",
			"chan8",
			"class Pack",
			"return true",
			"parseDont",
			"new Com",
			"parseComm",
			"return true",
			"new Board",
			"Layout",
			"this.layout.circuit",
			"Layout",
			"class Lay",
			"packageToPosMap",
			"board",
			"new Console",
			"fs\\.",
			"} else ",
			"^(\\s*)console",
			"parseCompon",
			"componentNameToComponentMap",
			"^(\\s*)console",
			"packageToPosMap",
			"PackageToPosMap",
			"\\(parse",
			"lineStr",
			"gets",
			"Line",
			"readFile",
			"toString",
			"SVG",
			"+|[-+.",
			"');",
			"getOpt",
			"Blaze",
			"MouseIterator\\(",
			"matrix",
			"rect",
			"MouseHandler",
			"Blaze",
			"init_scale",
			"prototype.scale",
			"\\.scale =",
			"scale =",
			"or,",
			"translate",
			"Rect,",
			"ProcessPosition",
			"rect",
			"EventPositions,",
			"width",
			"streamify",
			"CreateWebSocket",
			"Reconnecting",
			"Socket",
			"\\* files",
			"setLog",
			"setLogf",
			"';'",
			"location",
			"Attr\\(",
			"params\\.",
			"ReadBJSON",
			"Util\\.",
			"WriteFile",
			"ReadJSON",
			"null",
			"opaque_value_expr",
			",\n",
			" Location,",
			"Location,",
			" ;",
			"class Loc",
			"CompleteRa",
			"set end",
			"class Locat",
			"class Range",
			"class Loc",
			"^(|export )function",
			"Range",
			"GetRa",
			"NodeErr",
			"       ",
			"this.json'",
			"this.json",
			"PrintAst",
			"Call",
			"Printer",
			"^\\sR",
			"Printer",
			"getLoc",
			"class Lo",
			"class Loc",
			"PrintRange",
			"CompleteLoc",
			"class Location",
			"Location"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"}\\n\\n\\1",
			"this.circuit",
			"",
			"\\1//console",
			"packageToPosMap",
			"(this.parse",
			"line",
			"maxDepthOrPred",
			"define",
			"isObject",
			"\\1//\\2",
			""
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1947,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": "/home/roman/Projects/plot-cv/upload-server.js",
							"function_name_status_row": -1,
							"outline_rename_mode": false,
							"symkeys":
							[
								[
									2010,
									2018
								],
								[
									2034,
									2054
								],
								[
									2625,
									2658
								],
								[
									2748,
									2779
								],
								[
									3105,
									3127
								],
								[
									3341,
									3382
								],
								[
									3393,
									3406
								],
								[
									3484,
									3519
								],
								[
									3564,
									3582
								],
								[
									3618,
									3660
								],
								[
									3726,
									3759
								],
								[
									3781,
									3785
								],
								[
									4174,
									4179
								],
								[
									4229,
									4233
								],
								[
									4260,
									4264
								],
								[
									4292,
									4296
								],
								[
									4319,
									4339
								],
								[
									4393,
									4397
								],
								[
									4467,
									4489
								],
								[
									4579,
									4584
								],
								[
									4616,
									4638
								],
								[
									4832,
									4854
								],
								[
									5277,
									5343
								],
								[
									5689,
									5698
								],
								[
									5803,
									5833
								],
								[
									6194,
									6229
								],
								[
									6261,
									6302
								],
								[
									6334,
									6400
								],
								[
									6433,
									6467
								],
								[
									6538,
									6585
								],
								[
									7121,
									7157
								],
								[
									7270,
									7279
								],
								[
									7515,
									7523
								],
								[
									7629,
									7636
								],
								[
									7686,
									7710
								],
								[
									8091,
									8102
								],
								[
									8192,
									8203
								],
								[
									8267,
									8278
								],
								[
									8332,
									8341
								],
								[
									8379,
									8390
								],
								[
									8478,
									8505
								],
								[
									8643,
									8647
								],
								[
									8671,
									8678
								],
								[
									8711,
									8727
								],
								[
									8856,
									8901
								],
								[
									9117,
									9175
								],
								[
									9487,
									9509
								],
								[
									9858,
									9868
								],
								[
									10112,
									10126
								],
								[
									11079,
									11103
								],
								[
									11229,
									11233
								],
								[
									11325,
									11339
								],
								[
									11439,
									11455
								],
								[
									11809,
									11822
								],
								[
									11840,
									11845
								],
								[
									11927,
									11934
								],
								[
									11962,
									11967
								],
								[
									12089,
									12114
								],
								[
									12289,
									12328
								],
								[
									12405,
									12416
								],
								[
									13983,
									14014
								],
								[
									14677,
									14710
								],
								[
									14982,
									15017
								],
								[
									15102,
									15135
								],
								[
									15895,
									15901
								],
								[
									16071,
									16077
								],
								[
									16847,
									16851
								],
								[
									17294,
									17301
								],
								[
									17694,
									17730
								],
								[
									18142,
									18174
								],
								[
									18777,
									18781
								],
								[
									19302,
									19319
								],
								[
									19621,
									19656
								],
								[
									20504,
									20509
								],
								[
									21236,
									21240
								],
								[
									21334,
									21338
								],
								[
									21458,
									21467
								],
								[
									21597,
									21604
								],
								[
									21885,
									21892
								],
								[
									21973,
									21980
								],
								[
									22044,
									22060
								],
								[
									22125,
									22145
								],
								[
									22844,
									22856
								],
								[
									22955,
									22967
								],
								[
									23169,
									23185
								],
								[
									23279,
									23292
								],
								[
									23568,
									23586
								],
								[
									23776,
									23805
								],
								[
									24213,
									24232
								],
								[
									24665,
									24686
								],
								[
									25707,
									25729
								],
								[
									26202,
									26223
								],
								[
									26774,
									26793
								],
								[
									27227,
									27235
								],
								[
									29938,
									29950
								],
								[
									31651,
									31686
								],
								[
									32357,
									32376
								],
								[
									32484,
									32500
								],
								[
									32635,
									32652
								],
								[
									32697,
									32710
								],
								[
									32746,
									32756
								],
								[
									33610,
									33626
								],
								[
									33715,
									33734
								],
								[
									33745,
									33764
								],
								[
									33790,
									33810
								]
							],
							"symlist":
							[
								"  value =>",
								"\t(level, message) =>",
								"AsyncCollect(iter)",
								"ExecTool(cmd, ...args)",
								"GetMime(file)",
								"Matcher(pattern, t = arg => arg)",
								"\t(...args) =>",
								"KeyOrValueMatcher(pattern)",
								"\t([key, value]) =>",
								"GetRootDirectories(pattern = '*')",
								"MakeUUID = (rng = Math.random) =>",
								"  n =>",
								"  dd =>",
								"  d =>",
								"  d =>",
								"  d =>",
								"GetDir(dir)",
								"  n =>",
								"DirName(name)",
								"  it =>",
								"DateStr(date)",
								"ModeStr(mode)",
								"HTMLPage = ({ title, style, scripts = [], children, ...props }) =>",
								"  script =>",
								"FilterForm = ({ ...props }) =>",
								"HTMLTable = ({ rows, ...props }) =>",
								"HTMLTableRow = ({ columns, ...props }) =>",
								"HTMLTableColumn = ({ columns, children, tag = 'td', ...props }) =>",
								"FileLink = ({ file, ...props }) =>",
								"FileObject = ({ file, stat = {}, ...props }) =>",
								"FileTable = ({ files, ...props }) =>",
								"(a, b) =>",
								"  field =>",
								"  file =>",
								"ReadExiv2(file)",
								"([k, v]) =>",
								"([k, v]) =>",
								"([k, v]) =>",
								"(a, b) =>",
								"([k, v]) =>",
								"ReadExiftool(file)",
								"  l =>",
								"  line =>",
								"([line, idx]) =>",
								"HeifConvert(src, dst, quality = 100)",
								"MagickResize(src, dst, rotate = 0, width, height)",
								"  main(...args)",
								"\t(a, v) =>",
								"\t(v, pv, o) =>",
								"\t(module, ...args) =>",
								"  m =>",
								"  .show = arg =>",
								"  .cleanup = () =>",
								"\t(...args) =>",
								"() =>",
								"  puts(s)",
								"() =>",
								"ParseBody(gen)",
								"  .createWS = (url, callbacks, listen) =>",
								"  .out = s =>",
								"  test(req, resp)",
								"  proxy(req, resp)",
								"  config(req, resp)",
								"  file(req, resp)",
								"  dir =>",
								"  dir =>",
								"  f =>",
								"  file =>",
								"  uploads(req, resp)",
								"  files(req, resp)",
								"  n =>",
								"([name, type]) =>",
								"  files2(req, resp)",
								"\tn =>",
								"  n =>",
								"  n =>",
								"(a, b) =>",
								"  name =>",
								"  file =>",
								"  file =>",
								"([file, rel]) =>",
								"(acc, [file, st]) =>",
								"  string(a, b)",
								"  number(a, b)",
								"([name, obj]) =>",
								"({ name }) =>",
								"  onConnect(ws, req)",
								"  .sendCommand = function(data)",
								"  onClose(ws, reason)",
								"  onHttp(ws, req, resp)",
								"  onOpen(name, filename)",
								"  onContent(name, data)",
								"  onClose(name, file)",
								"  f = x =>",
								"  onFinalize()",
								"\t(match, p1, p0, p2, p3, offset) =>",
								"  onMessage(ws, data)",
								"  onFd(fd, rd, wr)",
								"  get connections()",
								"  get by_uuid()",
								"  uuid(data)",
								"  onFd(fd, rd, wr)",
								"  onClose(ws, reason)",
								"  onMessage(ws, data)",
								"  quit(why)"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1676837655.66,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "eagle-query.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3358,
						"regions":
						{
						},
						"selection":
						[
							[
								3119,
								3119
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 82,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1676837501.65,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1142.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "quickjs/qjs-modules/lib/util.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 48119,
						"regions":
						{
						},
						"selection":
						[
							[
								17959,
								17959
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 565,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1676838139.72,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 9920.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "lib/delegate.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 505,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1676837604.78,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "lib/color/rgba.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 22965,
						"regions":
						{
						},
						"selection":
						[
							[
								4839,
								4839
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 172,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1676852570.27,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2964.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "lib/geom/point.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11206,
						"regions":
						{
						},
						"selection":
						[
							[
								10469,
								10534
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 360,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1676865320.72,
							"tabs_extra_last_activated_sheet_index": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6068.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "upload-server.js",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 34145,
						"regions":
						{
							"col_0087FFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										23703,
										23716
									],
									[
										31410,
										31423
									]
								],
								"scope": "col_0087FFFF"
							},
							"col_0087FFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_0087FFFF_circle.png",
								"regions":
								[
									[
										23682,
										23682
									],
									[
										31385,
										31385
									]
								],
								"scope": "col_gutter"
							},
							"col_00AFFFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										10907,
										10920
									]
								],
								"scope": "col_00AFFFFF"
							},
							"col_00AFFFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_00AFFFFF_circle.png",
								"regions":
								[
									[
										10860,
										10860
									]
								],
								"scope": "col_gutter"
							},
							"col_D700FFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										10883,
										10897
									]
								],
								"scope": "col_D700FFFF"
							},
							"col_D700FFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_D700FFFF_circle.png",
								"regions":
								[
									[
										10860,
										10860
									]
								],
								"scope": "col_gutter"
							},
							"col_FF87D7FF":
							{
								"flags": 16,
								"regions":
								[
									[
										32266,
										32280
									]
								],
								"scope": "col_FF87D7FF"
							},
							"col_FF87D7FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FF87D7FF_circle.png",
								"regions":
								[
									[
										32243,
										32243
									]
								],
								"scope": "col_gutter"
							},
							"col_FFAF00FF":
							{
								"flags": 16,
								"regions":
								[
									[
										31210,
										31224
									]
								],
								"scope": "col_FFAF00FF"
							},
							"col_FFAF00FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FFAF00FF_circle.png",
								"regions":
								[
									[
										31181,
										31181
									]
								],
								"scope": "col_gutter"
							},
							"col_FFD700FF":
							{
								"flags": 16,
								"regions":
								[
									[
										24813,
										24827
									]
								],
								"scope": "col_FFD700FF"
							},
							"col_FFD700FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FFD700FF_circle.png",
								"regions":
								[
									[
										24787,
										24787
									]
								],
								"scope": "col_gutter"
							}
						},
						"selection":
						[
							[
								12035,
								12035
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 394,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1677150861.24,
							"tabs_extra_last_activated_sheet_index": 5,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6825.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "eagle-commands.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3884,
						"regions":
						{
						},
						"selection":
						[
							[
								3884,
								3884
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 121,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1676828472.9,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1767.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "lib/eda/colorCoding.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2400,
						"regions":
						{
						},
						"selection":
						[
							[
								1601,
								1601
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 65,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1676828555.19,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1026.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "eagle-shell.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 37905,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1676828475.28,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 855.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 28.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.709075530278,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 0.0
	},
	"output.Debugger Console":
	{
		"height": 0.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "plot-cv.sublime-project",
	"replace":
	{
		"height": 72.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"server.js",
				"upload-server.js"
			],
			[
				"point.js",
				"lib/geom/point.js"
			],
			[
				"delega",
				"lib/delegate.js"
			],
			[
				"util.js",
				"quickjs/qjs-modules/lib/util.js"
			],
			[
				"rgba",
				"lib/color/rgba.js"
			],
			[
				"eagle-com",
				"eagle-commands.js"
			],
			[
				"colorCod",
				"lib/eda/colorCoding.js"
			],
			[
				"eagle-she",
				"eagle-shell.js"
			],
			[
				"eagle-qu",
				"eagle-query.js"
			],
			[
				"eagle-q",
				"eagle-query.js"
			],
			[
				"read.hex",
				"read.hex"
			],
			[
				"exam",
				"example.circuit"
			],
			[
				"elemen",
				"lib/eagle/element.js"
			],
			[
				"xpath.js",
				"quickjs/qjs-modules/lib/xpath.js"
			],
			[
				"node.js",
				"lib/eagle/node.js"
			],
			[
				"Document",
				"lib/eagle/document.js"
			],
			[
				"test-",
				"test-bitset.js"
			],
			[
				"circuit",
				"circuit.js"
			],
			[
				"fs.js",
				"quickjs/qjs-modules/lib/fs.js"
			],
			[
				"eagle2ger",
				"eagle2gerber.js"
			],
			[
				"repeater.js",
				"lib/repeater/repeater.js"
			],
			[
				"websock",
				"lib/async/websocket.js"
			],
			[
				"fire.js",
				"fire.js"
			],
			[
				"matrix.js",
				"lib/geom/matrix.js"
			],
			[
				"websocket.js",
				"lib/async/websocket.js"
			],
			[
				"upload-server",
				"upload-server.js"
			],
			[
				"test-bj",
				"test-bjson.js"
			],
			[
				"bjson",
				"bjson.js"
			],
			[
				"string-he",
				"string-helpers.js"
			],
			[
				"quickjs-po",
				"quickjs/qjs-modules/quickjs-pointer.c"
			],
			[
				"list-exp",
				"quickjs/qjs-modules/list-exports.js"
			],
			[
				"clang-ast",
				"clang-ast.js"
			],
			[
				"clang-as",
				"clang-ast.js"
			],
			[
				"ast-she",
				"ast-shell.js"
			],
			[
				"misc.js",
				"lib/misc.js"
			],
			[
				"utils.js",
				"lib/stream/utils.js"
			],
			[
				"upload-ser",
				"upload-server.js"
			],
			[
				"mirror",
				"quickjs/qjs-net/src/plugins/mirror.c"
			],
			[
				"list-ex",
				"quickjs/qjs-modules/list-exports.js"
			],
			[
				"fire.html",
				"fire.html"
			],
			[
				"server-htt",
				"quickjs/qjs-net/minnet-server-http.c"
			],
			[
				"-ws.c",
				"quickjs/qjs-net/minnet-server-ws.c"
			],
			[
				"filelist",
				"filelist.js"
			],
			[
				"filelist.js",
				"filelist.js"
			],
			[
				"extendGe",
				"quickjs/qjs-modules/lib/extendGenerator.js"
			],
			[
				"test-debugger",
				"test-debuggerprotocol.js"
			],
			[
				"fire.htm",
				"fire.html"
			],
			[
				"fire",
				"fire.js"
			],
			[
				"test-opencv",
				"test-opencv.js"
			],
			[
				"fontsample",
				"fontsample.js"
			],
			[
				"upload.js",
				"upload.js"
			],
			[
				"upload.htm",
				"upload.html"
			],
			[
				"main.js",
				"main.js"
			],
			[
				"test-gpio",
				"test-gpio.js"
			],
			[
				"index.html",
				"index.html"
			],
			[
				"quickjs.h",
				"quickjs/quickjs.h"
			],
			[
				"quickjs.c",
				"quickjs/quickjs.c"
			],
			[
				"xml-shell",
				"quickjs/qjs-modules/xml-shell.js"
			],
			[
				"qjsm.c",
				"quickjs/qjs-modules/src/qjsm.c"
			],
			[
				"repl.js",
				"quickjs/qjs-modules/lib/repl.js"
			],
			[
				"eagle-shell",
				"eagle-shell.js"
			],
			[
				"repl",
				"repl.js"
			],
			[
				"test-minnet",
				"test-minnet.js"
			],
			[
				"list-dir",
				"list-directory.js"
			],
			[
				"list.ht",
				"list.html"
			],
			[
				"draw.js",
				"draw.js"
			],
			[
				"transformation",
				"lib/geom/transformation.js"
			],
			[
				"element.",
				"lib/dom/element.js"
			],
			[
				"crosskit",
				"lib/crosskit.js"
			],
			[
				"fire-es",
				"fire-es.html"
			],
			[
				"lib/util.js",
				"quickjs/qjs-modules/lib/util.js"
			],
			[
				"resolve-im",
				"quickjs/qjs-modules/resolve-imports.js"
			],
			[
				"resolve",
				"resolve-imports.js"
			],
			[
				"fire-es.h",
				"fire-es.html"
			],
			[
				"fire-es.js",
				"fire-es.js"
			],
			[
				"fire.es",
				"fire.es"
			],
			[
				"",
				"test-worker.js"
			],
			[
				"quickjs",
				"qjs-opencv/cmake/QuickJSModule.cmake"
			],
			[
				"test-strea",
				"test-stream.js"
			],
			[
				"worker.js",
				"worker.js"
			],
			[
				"vector.h",
				"quickjs/qjs-modules/include/vector.h"
			],
			[
				"quickjs-misc",
				"quickjs/qjs-modules/quickjs-misc.c"
			],
			[
				"console.js",
				"quickjs/qjs-modules/lib/console.js"
			],
			[
				"test-work",
				"test-worker.js"
			],
			[
				"worker",
				"worker.js"
			],
			[
				"workerSc",
				"workerScript.js"
			],
			[
				"wworker",
				"ws-worker.js"
			],
			[
				"matrix",
				"src/matrix.cpp"
			],
			[
				"test_chil",
				"quickjs/qjs-modules/tests/test_childprocess.js"
			],
			[
				"test-child",
				"test-childprocess.js"
			],
			[
				"os-help",
				"os-helpers.js"
			],
			[
				"object-help",
				"object-helpers.js"
			],
			[
				"ol-help",
				"ol-helpers.js"
			],
			[
				"ol-map",
				"ol-map.js"
			],
			[
				"map.html",
				"map.html"
			],
			[
				"upload.css",
				"static/css/upload.css"
			],
			[
				"debugger-ser",
				"debugger-server.js"
			],
			[
				"test-debu",
				"test-debuggerprotocol.js"
			],
			[
				"misc.",
				"lib/misc.js"
			],
			[
				"draw.css",
				"static/css/draw.css"
			],
			[
				"rect.js",
				"lib/geom/rect.js"
			],
			[
				"svg.js",
				"lib/dom/svg.js"
			],
			[
				"lscache",
				"lib/lscache.js"
			],
			[
				"autoStore",
				"lib/autoStore.js"
			],
			[
				"preactCom",
				"lib/dom/preactComponent.js"
			],
			[
				"draw.html",
				"draw.html"
			],
			[
				"test-dom",
				"test-dom.js"
			],
			[
				"eagle-shel",
				"eagle-shell.js"
			],
			[
				"io-help",
				"io-helpers.js"
			],
			[
				"test-mmap",
				"test-mmap.js"
			],
			[
				"list.cs",
				"static/css/list.css"
			],
			[
				"test-rend",
				"test-renderer.js"
			],
			[
				"list-dire",
				"list-directory.js"
			],
			[
				"list.html",
				"list.html"
			],
			[
				"drawin",
				"lib/eagle/components/drawing.js"
			],
			[
				"wire.js",
				"lib/eagle/components/wire.js"
			],
			[
				"io-he",
				"io-helpers.js"
			],
			[
				"circui",
				"lib/eda/circuitjs.js"
			],
			[
				"document",
				"lib/eagle/document.js"
			],
			[
				"upload",
				"upload.js"
			],
			[
				"io-helper",
				"io-helpers.js"
			],
			[
				"quickjs-pa",
				"quickjs/qjs-modules/quickjs-path.c"
			],
			[
				"quickjs-path",
				"quickjs/qjs-modules/quickjs-path.c"
			],
			[
				"bbox",
				"lib/geom/bbox.js"
			],
			[
				"eagle2sv",
				"eagle2svg.js"
			],
			[
				"bbox.js",
				"lib/geom/bbox.js"
			],
			[
				"eagle2svg",
				"eagle2svg.js"
			],
			[
				"object-he",
				"object-helpers.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/plot-cv.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 370.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"WS"
			]
		],
		"width": 970.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 248.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
