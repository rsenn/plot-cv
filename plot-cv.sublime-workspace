{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"asy",
				"asyncIterator"
			],
			[
				"getOwn",
				"getOwnPropertyNames(...)"
			],
			[
				"Array",
				"ArrayBufferToString"
			],
			[
				"Connect",
				"ConnectDebugger"
			],
			[
				"var",
				"variablesReference"
			],
			[
				"varia",
				"variablesReference"
			],
			[
				"Tra",
				"TransformMultiply"
			],
			[
				"JS_Set",
				"JS_SetPropertyUint32"
			],
			[
				"OPE",
				"OPENGL_FORWARD_COMPAT"
			],
			[
				"JS_Fre",
				"JS_FreeCString"
			],
			[
				"COLOR_",
				"COLOR_GRAY2BGR"
			],
			[
				"B",
				"BOOL"
			],
			[
				"Asyn",
				"AsyncIterator"
			],
			[
				"ret",
				"return_flag"
			],
			[
				"ImportID",
				"ImportIdMap"
			],
			[
				"Num",
				"NumericRange"
			],
			[
				"define",
				"defineProperty(...)"
			],
			[
				"dbuf_",
				"dbuf_init2"
			],
			[
				"has_",
				"has_dot_or_slash"
			],
			[
				"My",
				"MySQLResult"
			],
			[
				"JS_ToCS",
				"JS_ToCStringLen"
			],
			[
				"CF",
				"CFunctionClosureRecord"
			],
			[
				"js_",
				"js_mysqlresult_class_id"
			],
			[
				"extendA",
				"extendAsyncGenerator"
			],
			[
				"JS_SetPr",
				"JS_SetPropertyStr"
			],
			[
				"MYSQL_TYPE_NEW",
				"MYSQL_TYPE_NEWDECIMAL"
			],
			[
				"JS_CF",
				"JS_CFUNC_MAGIC_DEF"
			],
			[
				"js_mysqlresult_fun",
				"js_mysqlresult_functions"
			],
			[
				"JS_ToCSt",
				"JS_ToCStringLen"
			],
			[
				"js_mysql_f",
				"js_mysql_functions"
			],
			[
				"MARIA",
				"MARIADBCLIENT_LIBRARY"
			],
			[
				"depe",
				"dependencyMap"
			],
			[
				"depden",
				"dependencyTree"
			],
			[
				"add_",
				"add_dependencies"
			],
			[
				"ch",
				"chunks_written"
			],
			[
				"defineP",
				"defineProperties(...)"
			],
			[
				"CMAKE_CURR",
				"CMAKE_CURRENT_BINARY_DIR"
			],
			[
				"gener",
				"generate_module_header"
			],
			[
				"RINGBUFFER_C",
				"RINGBUFFER_CONSUMERANGE"
			],
			[
				"RINGBUFFER_CONSU",
				"RINGBUFFER_CONSUMERANGE"
			],
			[
				"JS_NewArra",
				"JS_NewArrayBufferCopy"
			],
			[
				"RINGBU",
				"RINGBUFFER_INSERT"
			],
			[
				"hea",
				"headers_sent"
			],
			[
				"PR",
				"PRIi64"
			],
			[
				"db",
				"dbuf_init2"
			],
			[
				"JS_Get",
				"JS_GetProperty"
			],
			[
				"Ret",
				"ReturnValuePathFunction"
			],
			[
				"cFunc",
				"cFuncListObjects"
			],
			[
				"isC",
				"isCFuncCall"
			],
			[
				"En",
				"EntityNames"
			],
			[
				"parseFrom",
				"parseFromString"
			],
			[
				"pseu",
				"pseudoClassArg"
			],
			[
				"pseudoC",
				"pseudoClassName"
			],
			[
				"Key",
				"KeyboardEvent"
			],
			[
				"getOp",
				"getOptionEntries"
			],
			[
				"setProp",
				"setPropertyValue"
			],
			[
				"parse",
				"parseSelectors"
			],
			[
				"jsm_buil",
				"jsm_builtin_init"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"JS_New",
				"JS_NewObject"
			],
			[
				"ide",
				"importIdentifiers"
			],
			[
				"iden",
				"importIdentifiers"
			],
			[
				"import",
				"importIdentifiers"
			],
			[
				"ident",
				"identifierSets"
			],
			[
				"path_is",
				"path_is_absolute"
			],
			[
				"js_is_",
				"js_is_null_or_undefined"
			],
			[
				"path_skip_se",
				"path_skip_separator_s"
			],
			[
				"WRITABLE_METHO",
				"WRITABLE_METHOD_CLOSE"
			],
			[
				"list_fo",
				"list_for_each_prev"
			],
			[
				"JS_Th",
				"JS_ThrowOutOfMemory"
			],
			[
				"JS_",
				"JS_ThrowOutOfMemory"
			],
			[
				"underly",
				"underlying_source"
			],
			[
				"Tok",
				"TokenSequence"
			],
			[
				"JS_GetPr",
				"JS_GetPropertyStr"
			],
			[
				"JS_Thro",
				"JS_ThrowOutOfMemory"
			],
			[
				"getAt",
				"getAttributeNames"
			],
			[
				"self",
				"self_closing_tags"
			],
			[
				"self_",
				"self_closing_tags"
			],
			[
				"JS_PROP",
				"JS_PROP_ENUMERABLE"
			],
			[
				"de",
				"dependencyMap"
			],
			[
				"dep",
				"dependencyMap"
			],
			[
				"js_is_null",
				"js_is_null_or_undefined"
			],
			[
				"JS_P",
				"JS_PROP_ENUMERABLE"
			],
			[
				"JS_SetP",
				"JS_SetPropertyUint32"
			],
			[
				"spec",
				"specifiers"
			],
			[
				"token_r",
				"token_release_rt"
			],
			[
				"JS_Thr",
				"JS_ThrowTypeError"
			],
			[
				"debug_js_mall",
				"debug_js_malloc_usable_size"
			],
			[
				"repl",
				"replaceRange"
			],
			[
				"js_malloc_u",
				"js_malloc_usable_size_rt"
			],
			[
				"malloc",
				"malloc_usable_size"
			],
			[
				"all",
				"alloc_block_list"
			],
			[
				"alloc",
				"alloc_block_list"
			],
			[
				"path_skip",
				"path_skip_component"
			],
			[
				"jsm_mo",
				"jsm_module_loader"
			],
			[
				"JS_Throw",
				"JS_ThrowInternalError"
			],
			[
				"JS_AtomTo",
				"JS_AtomToValue"
			],
			[
				"inspect",
				"inspectSymbol"
			],
			[
				"at",
				"attributes"
			],
			[
				"parent",
				"parentElement"
			],
			[
				"owner",
				"ownerElement"
			],
			[
				"get",
				"getPrototypeOf"
			],
			[
				"child",
				"childElementCount"
			],
			[
				"getO",
				"getOwnPropertyNames"
			],
			[
				"js_misc_im",
				"js_misc_immutable_constructor"
			],
			[
				"obj",
				"object_tostring"
			],
			[
				"js_misc_immu",
				"js_misc_immutable_free"
			],
			[
				"js_misc_imm",
				"js_misc_immutable_constructor"
			],
			[
				"CMAKE_IMPORT",
				"CMAKE_IMPORT_LIBRARY_SUFFIX"
			],
			[
				"CMAKE_CUR",
				"CMAKE_CURRENT_BINARY_DIR"
			],
			[
				"js_is",
				"js_is_null_or_undefined"
			],
			[
				"js_asy",
				"js_async_socket_class_id"
			],
			[
				"JS_NewObj",
				"JS_NewObjectProtoClass"
			],
			[
				"async_",
				"async_socket_proto"
			],
			[
				"js_socket_class",
				"js_socket_class_id"
			],
			[
				"g",
				"getOwnPropertyNames(...)"
			],
			[
				"js_sockaddr_cl",
				"js_sockaddr_class_id"
			],
			[
				"js_so",
				"js_sockaddr_constructor"
			],
			[
				"js_sys",
				"js_syscallerror_class_id"
			],
			[
				"js_string",
				"js_stringdecoder_class_id"
			],
			[
				"js_pred",
				"js_predicate_class_id"
			],
			[
				"js_syn",
				"js_syntaxerror_class"
			],
			[
				"js_child",
				"js_child_process_class_id"
			],
			[
				"js_b",
				"js_blob_class_id"
			],
			[
				"js_loca",
				"js_location_class_id"
			],
			[
				"js_token_in",
				"js_token_inspect_funcs"
			],
			[
				"set",
				"setReadHandler"
			],
			[
				"js_get_",
				"js_get_propertystr_bool"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "  sliceFn = x =>\nArrayBuffer(start, end)\nSharedArrayBuffer\nUint8ClampedArray\nInt8Array\nUint8Array\nInt16Array\nUint16Array\nInt32Array\nUint32Array\nBigInt64Array\nBigUint64Array\nFloat32Array\nFloat64Array\n  slice = (x, s, e) =>\n  objectToString = o =>\n  stringify = v =>\n  formatNumber = n =>\n  isNative = fn =>\nAsyncFunction = function x()\nGeneratorFunction = function*()\nAsyncGeneratorFunction = function*()\n  isAnyArrayBuffer(v)\n  isArrayBuffer(v)\n  isBigInt64Array(v)\n  isBigUint64Array(v)\n  isDate(v)\n  isFloat32Array(v)\n  isFloat64Array(v)\n  isInt8Array(v)\n  isInt16Array(v)\n  isInt32Array(v)\n  isMap(v)\n  isPromise(v)\n  isProxy(v)\n  isRegExp(v)\n  isSet(v)\n  isSharedArrayBuffer(v)\n  isUint8Array(v)\n  isUint8ClampedArray(v)\n  isUint16Array(v)\n  isUint32Array(v)\n  isWeakMap(v)\n  isWeakSet(v)\n  isDataView(v)\n  isBooleanObject(v)\n  isAsyncFunction(v)\n  isGeneratorFunction(v)\n  isAsyncGeneratorFunction(v)\n  isNumberObject(v)\n  isBigIntObject(v)\n  isSymbolObject(v)\n  isNativeError(v)\n  isMapIterator(v)\n  isSetIterator(v)\n  isStringObject(v)\n  isArrayBufferView(v)\n  isArgumentsObject(v)\n  isBoxedPrimitive(v)\n  ctor =>\n  isGeneratorObject(v)\n  isTypedArray(v)\n  isModuleNamespaceObject(v)\n  isConstructor(v)\n  isIterable(v)\n  isAsyncIterable(v)\n  isIterator(v)\n  isArrayLike(v)\n  hasBuiltIn(o, m)\n  isAsync(fn)\n  format(...args)\n  formatWithOptions(opts, ...args)\n  formatWithOptionsInternal(o, v)\n  assert(actual, expected, message)\n  setInterval(callback, ms)\n  start()\n() =>\n  clearInterval(id)\n  inherits(ctor, superCtor)\n  ctor\n  ctor\n  superCtor\n  getConstructor(obj)\n  memoize(fn, cache)\nMemoize(n, ...rest)\n  chain(first, ...fns)\n(acc, fn) =>\nfunction(...args)\n  chainRight(first, ...fns)\n(acc, fn) =>\nfunction(...args)\n  chainArray(tmp, ...fns)\n  tmp = function(...args)\n  getset(target, ...args)\nkey =>\n([k, v]) =>\n(key, value) =>\n([k, v]) =>\n  key =>\n(key, value) =>\n() =>\nvalue =>\n  methods(obj)\n  bind(...args)\n  fn =>\n  transform(read, write)\n  key =>\n(key, value) =>\n  modifier(...args)\nfn =>\nnewValue =>\n  getter(target, ...args)\n  ret = (...argv) =>\n  ret = (...argv) =>\n  ret = (...argv) =>\n  setter(target, ...args)\n(...argv) =>\n  ret = (key, value) =>\n  ret = (...argv) =>\n  gettersetter(target, ...args)\n  fn = (...args) =>\n(...args2) =>\n  fn = (...args) =>\n  fn = (...args) =>\n  fn = (...args) =>\n  fn = (...args) =>\n(...args2) =>\n  hasFn(target)\nkey =>\nkey =>\n  remover(target)\nkey =>\nkey =>\n  getOrCreate(target, create = () => ({}), set)\nkey =>\n  hasGetSet(obj)\n  m =>\n  getSetArgument(get, set)\n(...args) =>\n  wrapGetSet(getter, setter, ...args)\nprop =>\n(prop, value) =>\n  weakGetSet(...args)\nwref =>\nvalue =>\n  addremovehas(target, ...args)\n  n =>\n  el =>\nel =>\nel =>\nel =>\nel =>\n  has = el =>\n  lookupObject(getset, instance = {}, handlers = {})\n  get(target, prop)\n  set(target, prop, value)\n  mapObject(target)\n  set: (key, value) =>\n  get: key =>\n  once(fn, thisArg, memoFn)\nfunction(...args)\n  waitFor(ms)\n  resolve =>\n  waitCancellable(ms)\n  resolve =>\n() =>\n  cancel: () =>\n  define(obj, ...args)\n  defineGetter(obj, key, fn, enumerable = false)\n  defineGetterSetter(obj, key, g, s, enumerable = false)\n  defineGettersSetters(obj, gettersSetters)\n  prototypeIterator(obj, pred = (obj, depth) => true)\n  pick(obj, keys)\n  omit(obj, keys)\n  keys(obj, start = 0, end = obj => obj === Object.prototype)\n  pred = (obj, depth) =>\n  end = () =>\n  pred = (obj, depth) =>\n  entries(obj, start = 0, end = obj => obj === Object.prototype)\n  values(obj, start = 0, end = obj => obj === Object.prototype)\n  getMethodNames(obj, depth = 1, start = 0)\n  getMethods(obj, depth = 1, start = 0)\n  bindMethods(obj, methods, target)\n  properties(obj, options = { enumerable: true })\nfn =>\nfn =>\n  weakDefine(obj, ...args)\n  getConstructorChain(obj, ...range)\n  hasPrototype(obj, proto)\n  filter(seq, pred, thisArg)\n  pred = (el, i) =>\n  filterKeys(r, needles, keep = true)\n  pred = key =>\n(obj, key) =>\n  curry = (f, arr = [], length = f.length) =>\nfunction(...args)\n  a =>\n(min, max, value) =>\n  generate = (fn, add) =>\n  add = (item, gen) =>\nfunction(...args)\nfunction(...args)\n  split(buf, ...points)\n  splitAt = (b, pos, len) =>\n  uniquePred(cmp = null)\n(el, i, arr) =>\n  item =>\n(el, i, arr) =>\n  unique = (...args) =>\n(arr, cmp) =>\n  unique(seq)\n  getFunctionArguments = fn =>\n(offset = 0) =>\ncode =>\n(offset = 0) =>\ncode =>\n(offset = 0) =>\n(red, green, blue) =>\n  getAnsiStyles()\n  value: (red, green, blue) =>\n  c =>\n  value: hex =>\n  character =>\n  value: hex =>\n  value: code =>\n  value: (red, green, blue) =>\n  value: hex =>\n  stripAnsi(str)\n  padAnsi(str, n, s = ' ')\n  padStartAnsi(str, n, s = ' ')\n  padEndAnsi(str, n, s = ' ')\n  mapFunctional(fn)\n(arg)\n  map(...args)\n  ret = a =>\n()\n  ret = a =>\n()\n  randInt(...args)\n  randFloat(min, max, rng = Math.random)\n  randStr(n, set = '_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', rng = Math.random)\n  toBigInt(arg)\n  roundDigits(precision)\n  roundTo(value, prec, digits, type = 'round')\n  lazyProperty(obj, name, getter, opts = {})\n  function()\nfunction()\n  v =>\n  replaceProperty(value)\n  lazyProperties(obj, gettersObj, opts = {})\n  observeProperties(target = {}, obj, fn = (prop, value) => {}, opts = {})\n  get: () =>\n  set: value =>\n  decorate(decorators, obj, ...args)\n  getOpt(options = {}, args)\n  findOpt = arg =>\n([optname, option]) =>\n  opt =>\n(acc, arg) =>\n  showHelp(opts, exitCode = 0)\n(acc, [name]) =>\n(acc, [name, [hasArg, fn, shortOpt]]) =>\n  isoDate(d)\n  toUnixTime(dateObj, utc = false)\n  unixTime(utc = false)\n  fromUnixTime(epoch, utc = false)\n  range(...args)\n(v, k) =>\n  n =>\n  chunkArray(arr, size)\n  fn = (a, v, i) =>\n  decodeHTMLEntities(text)\n(match, entity) =>\n  ucfirst(str)\n  lcfirst(str)\n  camelize(str, delim = '')\n(match, p1, p2, offset) =>\n  decamelize(str, delim = '-')\n  shorten(str, max = 40, suffix = '...')\n  bytesToUTF8(bytes)\n  codePointsToString(codePoints)\n  bufferToString(b)\n  arraysInCommon(a)\n(itm, indx) =>\n  arr =>\n  arrayFacade(proto, itemFn = (container, i) => container.\n(i))\n*keys()\n*entries()\n*values()\n  forEach(callback, thisArg)\n  reduce(callback, accu, thisArg)\n  mod(a, b)\n  b : n =>\n  pushUnique(arr, ...args)\n  inserter(dest, next = (k, v) => {})\n(k, v) =>\n(k, v) =>\n(k, v) =>\n  fn = function(key, value)\n  intersect(a, b)\n  symmetricDifference(a, b)\n  partitionArray(a, size)\n  difference(a, b, includes)\n  x =>\n  x =>\n  x =>\n  x =>\n  intersection(a, b)\n  x =>\n  union(a, b, equality)\n  partition(array, callback)\n  push(obj, ...values)\n  v =>\n  repeater(n, what)\n  n = () =>\n()\n()\n  repeat(n, what)\n  functionName(fn)\n  className(obj)\n  isArrowFunction = fn =>\n  instrument( fn, log = (duration, name, args, ret) => console.log( `function '${name}'` + (ret !== undefined ? ` {= ${escape(ret + '').\n(0, 100) + '...'}}` : '') + ` timing: ${duration.\n(3)}ms` ), logInterval = 0 //1000 )\n(args, ret) =>\n(args, ret) =>\n  function(...args)\nfunction(...args)\n  newMap = () =>\n(...args) =>\n  get(path)\n  set(path, value)\n  catchable = function Catchable(self)\n  catchable\n()\n  then(fn)\n(...args) =>\n(...args) =>\n  isNumeric(value)\n  v =>\n  isIndex(value)\n  numericIndex(value)\n  histogram(arr, out = \n())\n  incr = key =>\n  propertyLookupHandlers(getter = key => null, setter, thisObj)\n  get(target, key, receiver)\n  .set = function(target, key, value)\n  .ownKeys = function(target)\n  propertyLookup(...args)\n  abbreviate(str, max = 40, suffix = '...')\n  tryFunction(fn, resolve = a => a, reject = () => null)\n  resolve = () =>\n  reject = () =>\n  function(...args)\nfunction(...args)\n  tryCatch(fn, resolve = a => a, reject = () => null, ...args)\n  mapAdapter(fn)\n  get(key)\n  set(key, value)\n  .keys = () =>\n  .entries = () =>\n  mapFunction(map)\n  fn = function(...args)\n  m =>\n  .set = (key, value) =>\n(k, v) =>\n  .get = key =>\n  .set = (key, value) =>\n(k, v) =>\n  .get = key =>\n  .set = (key, value) =>\n(k, v) =>\n  .get = key =>\n  .set = (key, value) =>\n(k, v) =>\n  .get = key =>\n  .update = function(key, fn = (k, v) => v)\n  .entries = function*()\n  .values = function*()\n  .keys = function*()\nfunction()\n([key, value]) =>\n  .keys = () =>\n  .entries = () =>\n  .values = () =>\n  .keys = function*()\n  .entries = function*()\n  .values = function*()\n  .filter = function(pred)\n()\n  .map = function(t)\n()\n  .forEach = function(fn)\n  .delete = key =>\n  .has = key =>\n  mapWrapper(map, toKey = key => key, fromKey = key => key)\n  .set = (key, value) =>\n(k, v) =>\n  .get = key =>\n  .keys = () =>\n  .entries = function*()\n  .values = function*()\n  .has = key =>\n  .delete = key =>\n  m =>\n  weakMapper(createFn, map = \n(), hitFn)\n  self = function(obj, ...args)\n  .set = (k, v) =>\n  .get = k =>\n  wrapGenerator(fn)\nfunction(...args)\n  wrapGeneratorMethods(obj)\n  isBrowser()\n() =>\nw =>\n() =>\n() =>\nd =>\n() =>\n  startInteractive()\n(re, str)\n  indexOf(...args)\n(what, offset = 0) =>\n(what, offset = 0) =>\n  searchAll(haystack, needle, offset = 0)\n  bindProperties(obj, target, props, gen)\n  name =>\n(acc, name) =>\np => v =>\n  k =>\n(a, [k, v]) =>\n(...args) =>\n(...args) =>\n(a, k) =>\n  predicate(fn_or_regex, pred)\n  fn = arg =>\n  .valueOf = function()\narg =>\n  transformer(a, ...l)\n(acc, fn) =>\nfunction(...v)",
			"settings":
			{
				"buffer_size": 9149,
				"line_ending": "Unix",
				"name": "𝌆 Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					2744,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/test-nanovg.js",
						"symkeys":
						[
							[
								633,
								660
							],
							[
								663,
								673
							],
							[
								831,
								853
							],
							[
								1495,
								1502
							],
							[
								1513,
								1518
							],
							[
								1593,
								1626
							],
							[
								1793,
								1818
							],
							[
								1887,
								1905
							],
							[
								2184,
								2197
							],
							[
								2217,
								2225
							],
							[
								2299,
								2325
							],
							[
								2398,
								2437
							],
							[
								2523,
								2544
							],
							[
								3721,
								3739
							],
							[
								3837,
								3844
							],
							[
								5275,
								5279
							],
							[
								5974,
								5981
							],
							[
								6086,
								6093
							],
							[
								6196,
								6203
							]
						],
						"symlist":
						[
							"function Clear(color = nvg.",
							"(0, 0, 0))",
							"function main(...args)",
							"begin()",
							"end()",
							".handleCharMods = (char, mods) =>",
							"handleSize(width, height)",
							"handleKey(keyCode)",
							"'\\x00': () =>",
							"Q: () =>",
							"handleCharMods(char, mods)",
							"handleMouseButton(button, action, mods)",
							"handleCursorPos(x, y)",
							"ticks(rate = 1000)",
							"frame()",
							"n =>",
							" val =>",
							" val =>",
							" val =>"
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				],
				[
					2745,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
						"symkeys":
						[
							[
								952,
								966
							],
							[
								1046,
								1069
							],
							[
								1207,
								1224
							],
							[
								1265,
								1282
							],
							[
								1315,
								1324
							],
							[
								1358,
								1368
							],
							[
								1402,
								1412
							],
							[
								1447,
								1458
							],
							[
								1492,
								1502
							],
							[
								1537,
								1548
							],
							[
								1585,
								1598
							],
							[
								1636,
								1650
							],
							[
								1686,
								1698
							],
							[
								1734,
								1746
							],
							[
								1799,
								1819
							],
							[
								1866,
								1887
							],
							[
								1929,
								1945
							],
							[
								1999,
								2018
							],
							[
								2053,
								2069
							],
							[
								2193,
								2227
							],
							[
								2250,
								2282
							],
							[
								2305,
								2348
							],
							[
								4177,
								4196
							],
							[
								4294,
								4310
							],
							[
								4372,
								4390
							],
							[
								4454,
								4473
							],
							[
								4538,
								4547
							],
							[
								4602,
								4619
							],
							[
								4682,
								4699
							],
							[
								4762,
								4776
							],
							[
								4836,
								4851
							],
							[
								4912,
								4927
							],
							[
								4988,
								4996
							],
							[
								5050,
								5062
							],
							[
								5120,
								5130
							],
							[
								5186,
								5197
							],
							[
								5254,
								5262
							],
							[
								5316,
								5338
							],
							[
								5406,
								5421
							],
							[
								5482,
								5504
							],
							[
								5572,
								5588
							],
							[
								5650,
								5666
							],
							[
								5728,
								5740
							],
							[
								5798,
								5810
							],
							[
								5868,
								5881
							],
							[
								5940,
								5958
							],
							[
								6016,
								6034
							],
							[
								6098,
								6120
							],
							[
								6188,
								6215
							],
							[
								6288,
								6305
							],
							[
								6362,
								6379
							],
							[
								6436,
								6453
							],
							[
								6500,
								6516
							],
							[
								6599,
								6615
							],
							[
								6687,
								6703
							],
							[
								6775,
								6792
							],
							[
								6849,
								6869
							],
							[
								6928,
								6948
							],
							[
								7091,
								7110
							],
							[
								7186,
								7193
							],
							[
								7222,
								7242
							],
							[
								7321,
								7336
							],
							[
								7397,
								7423
							],
							[
								7494,
								7510
							],
							[
								7566,
								7579
							],
							[
								7647,
								7665
							],
							[
								7738,
								7751
							],
							[
								7807,
								7821
							],
							[
								7923,
								7949
							],
							[
								7995,
								8016
							],
							[
								8175,
								8200
							],
							[
								8285,
								8327
							],
							[
								8461,
								8501
							],
							[
								11421,
								11464
							],
							[
								11863,
								11898
							],
							[
								12054,
								12072
							],
							[
								12102,
								12107
							],
							[
								12197,
								12224
							],
							[
								12343,
								12378
							],
							[
								12439,
								12443
							],
							[
								12459,
								12463
							],
							[
								12490,
								12499
							],
							[
								12662,
								12691
							],
							[
								12771,
								12799
							],
							[
								12928,
								12960
							],
							[
								13202,
								13232
							],
							[
								13256,
								13272
							],
							[
								13273,
								13296
							],
							[
								13393,
								13428
							],
							[
								13452,
								13468
							],
							[
								13469,
								13492
							],
							[
								13589,
								13622
							],
							[
								13672,
								13695
							],
							[
								13789,
								13822
							],
							[
								14354,
								14366
							],
							[
								14401,
								14412
							],
							[
								14479,
								14500
							],
							[
								14536,
								14547
							],
							[
								14793,
								14799
							],
							[
								14812,
								14828
							],
							[
								15028,
								15033
							],
							[
								15047,
								15056
							],
							[
								15083,
								15106
							],
							[
								15140,
								15153
							],
							[
								15180,
								15185
							],
							[
								15226,
								15248
							],
							[
								15306,
								15312
							],
							[
								15328,
								15344
							],
							[
								15423,
								15450
							],
							[
								15495,
								15501
							],
							[
								15546,
								15558
							],
							[
								15588,
								15621
							],
							[
								15805,
								15823
							],
							[
								15906,
								15924
							],
							[
								16043,
								16061
							],
							[
								16236,
								16269
							],
							[
								16402,
								16415
							],
							[
								16535,
								16556
							],
							[
								16626,
								16644
							],
							[
								17087,
								17126
							],
							[
								17203,
								17220
							],
							[
								17343,
								17357
							],
							[
								17519,
								17536
							],
							[
								17677,
								17694
							],
							[
								17725,
								17742
							],
							[
								17842,
								17859
							],
							[
								18151,
								18165
							],
							[
								18211,
								18234
							],
							[
								18291,
								18298
							],
							[
								18316,
								18323
							],
							[
								18348,
								18373
							],
							[
								18433,
								18440
							],
							[
								18461,
								18468
							],
							[
								18498,
								18553
							],
							[
								18658,
								18665
							],
							[
								18819,
								18843
							],
							[
								18893,
								18897
							],
							[
								18928,
								18962
							],
							[
								18973,
								18986
							],
							[
								19045,
								19090
							],
							[
								19155,
								19166
							],
							[
								19186,
								19206
							],
							[
								19246,
								19275
							],
							[
								19299,
								19310
							],
							[
								19325,
								19337
							],
							[
								19384,
								19423
							],
							[
								19524,
								19528
							],
							[
								19567,
								19572
							],
							[
								19598,
								19604
							],
							[
								19633,
								19639
							],
							[
								19732,
								19745
							],
							[
								19773,
								19786
							],
							[
								19912,
								19923
							],
							[
								20003,
								20063
							],
							[
								20133,
								20150
							],
							[
								20211,
								20235
							],
							[
								20310,
								20337
							],
							[
								20558,
								20578
							],
							[
								20608,
								20619
							],
							[
								20718,
								20753
							],
							[
								20793,
								20811
							],
							[
								20989,
								21010
							],
							[
								21034,
								21044
							],
							[
								21080,
								21109
							],
							[
								21165,
								21175
							],
							[
								21226,
								21231
							],
							[
								21288,
								21301
							],
							[
								21374,
								21404
							],
							[
								21943,
								21999
							],
							[
								22160,
								22224
							],
							[
								22372,
								22423
							],
							[
								23090,
								23152
							],
							[
								23334,
								23359
							],
							[
								23456,
								23481
							],
							[
								23594,
								23663
							],
							[
								23752,
								23774
							],
							[
								23808,
								23819
							],
							[
								23842,
								23864
							],
							[
								24106,
								24178
							],
							[
								24281,
								24352
							],
							[
								24448,
								24499
							],
							[
								24671,
								24718
							],
							[
								24785,
								24828
							],
							[
								24958,
								25015
							],
							[
								25109,
								25115
							],
							[
								25129,
								25135
							],
							[
								25439,
								25473
							],
							[
								25780,
								25824
							],
							[
								25991,
								26025
							],
							[
								26091,
								26127
							],
							[
								26202,
								26219
							],
							[
								26540,
								26585
							],
							[
								26719,
								26732
							],
							[
								26830,
								26843
							],
							[
								26917,
								26960
							],
							[
								26961,
								26980
							],
							[
								26995,
								26999
							],
							[
								27122,
								27142
							],
							[
								27195,
								27218
							],
							[
								27298,
								27318
							],
							[
								27400,
								27418
							],
							[
								27561,
								27579
							],
							[
								27652,
								27684
							],
							[
								27712,
								27738
							],
							[
								28056,
								28088
							],
							[
								28121,
								28137
							],
							[
								28152,
								28159
							],
							[
								28185,
								28201
							],
							[
								28240,
								28261
							],
							[
								28301,
								28314
							],
							[
								28365,
								28386
							],
							[
								28555,
								28583
							],
							[
								28802,
								28819
							],
							[
								28820,
								28829
							],
							[
								28881,
								28898
							],
							[
								28899,
								28908
							],
							[
								28968,
								28985
							],
							[
								28986,
								29009
							],
							[
								29065,
								29089
							],
							[
								31716,
								31744
							],
							[
								32175,
								32179
							],
							[
								32307,
								32320
							],
							[
								32636,
								32648
							],
							[
								32911,
								32924
							],
							[
								33029,
								33043
							],
							[
								33936,
								33964
							],
							[
								34080,
								34093
							],
							[
								34205,
								34229
							],
							[
								34322,
								34356
							],
							[
								34477,
								34516
							],
							[
								34563,
								34600
							],
							[
								34647,
								34674
							],
							[
								34685,
								34701
							],
							[
								34759,
								34781
							],
							[
								34814,
								34824
							],
							[
								34873,
								34885
							],
							[
								35167,
								35177
							],
							[
								35252,
								35264
							],
							[
								35542,
								35568
							],
							[
								35818,
								35866
							],
							[
								35914,
								36026
							],
							[
								36131,
								36154
							],
							[
								36293,
								36325
							],
							[
								36638,
								36692
							],
							[
								37050,
								37102
							],
							[
								37244,
								37260
							],
							[
								37367,
								37378
							],
							[
								37536,
								37540
							],
							[
								37774,
								37807
							],
							[
								37921,
								37973
							],
							[
								38167,
								38249
							],
							[
								38409,
								38419
							],
							[
								38437,
								38450
							],
							[
								38627,
								38671
							],
							[
								38987,
								39023
							],
							[
								39180,
								39196
							],
							[
								39214,
								39236
							],
							[
								39349,
								39355
							],
							[
								39459,
								39472
							],
							[
								41111,
								41149
							],
							[
								41249,
								41265
							],
							[
								41338,
								41382
							],
							[
								41741,
								41761
							],
							[
								41961,
								42003
							],
							[
								42198,
								42229
							],
							[
								42279,
								42321
							],
							[
								42441,
								42465
							],
							[
								42723,
								42733
							],
							[
								42786,
								42790
							],
							[
								42829,
								42860
							],
							[
								42871,
								42888
							],
							[
								43029,
								43063
							],
							[
								43301,
								43320
							],
							[
								43358,
								43380
							],
							[
								43492,
								43514
							],
							[
								43626,
								43661
							],
							[
								43709,
								43736
							],
							[
								43827,
								43865
							],
							[
								44074,
								44122
							],
							[
								44702,
								44731
							],
							[
								45178,
								45218
							],
							[
								45313,
								45340
							],
							[
								45397,
								45424
							],
							[
								45627,
								45641
							],
							[
								45690,
								45696
							],
							[
								45737,
								45803
							],
							[
								45805,
								45809
							],
							[
								45967,
								45974
							],
							[
								46066,
								46076
							],
							[
								46187,
								46196
							],
							[
								46302,
								46328
							],
							[
								46461,
								46492
							],
							[
								46667,
								46686
							],
							[
								46728,
								46736
							],
							[
								46765,
								46799
							],
							[
								46943,
								46988
							],
							[
								47064,
								47074
							],
							[
								47125,
								47135
							],
							[
								47161,
								47171
							],
							[
								47199,
								47224
							],
							[
								47355,
								47380
							],
							[
								47478,
								47513
							],
							[
								47566,
								47600
							],
							[
								47682,
								47718
							],
							[
								47839,
								47843
							],
							[
								47870,
								47874
							],
							[
								47913,
								47917
							],
							[
								47945,
								47949
							],
							[
								47978,
								48006
							],
							[
								48136,
								48140
							],
							[
								48197,
								48228
							],
							[
								48567,
								48603
							],
							[
								48852,
								48882
							],
							[
								49018,
								49022
							],
							[
								49306,
								49333
							],
							[
								49377,
								49386
							],
							[
								49438,
								49450
							],
							[
								49592,
								49604
							],
							[
								49731,
								49756
							],
							[
								49796,
								49822
							],
							[
								50074,
								50098
							],
							[
								50291,
								50314
							],
							[
								50440,
								50606
							],
							[
								50615,
								50672
							],
							[
								50679,
								50720
							],
							[
								50969,
								50989
							],
							[
								51191,
								51206
							],
							[
								51492,
								51515
							],
							[
								51720,
								51738
							],
							[
								51951,
								51965
							],
							[
								52026,
								52038
							],
							[
								52136,
								52145
							],
							[
								52421,
								52437
							],
							[
								52872,
								52908
							],
							[
								53003,
								53012
							],
							[
								53188,
								53199
							],
							[
								53210,
								53218
							],
							[
								53267,
								53279
							],
							[
								53524,
								53536
							],
							[
								53717,
								53743
							],
							[
								53762,
								53766
							],
							[
								53853,
								53877
							],
							[
								53955,
								53984
							],
							[
								54038,
								54069
							],
							[
								54076,
								54079
							],
							[
								54123,
								54136
							],
							[
								54236,
								54307
							],
							[
								54333,
								54359
							],
							[
								54505,
								54540
							],
							[
								54730,
								54757
							],
							[
								54867,
								54900
							],
							[
								55057,
								55108
							],
							[
								55478,
								55542
							],
							[
								55602,
								55617
							],
							[
								55683,
								55697
							],
							[
								55735,
								55758
							],
							[
								55950,
								55968
							],
							[
								56159,
								56229
							],
							[
								56378,
								56402
							],
							[
								56421,
								56429
							],
							[
								56465,
								56480
							],
							[
								56606,
								56619
							],
							[
								56774,
								56790
							],
							[
								56985,
								57011
							],
							[
								57026,
								57048
							],
							[
								57264,
								57268
							],
							[
								57454,
								57476
							],
							[
								57498,
								57508
							],
							[
								57526,
								57539
							],
							[
								57663,
								57685
							],
							[
								57707,
								57717
							],
							[
								57735,
								57748
							],
							[
								57854,
								57876
							],
							[
								57902,
								57912
							],
							[
								57930,
								57943
							],
							[
								57979,
								58001
							],
							[
								58022,
								58032
							],
							[
								58050,
								58063
							],
							[
								58083,
								58124
							],
							[
								58413,
								58436
							],
							[
								58517,
								58539
							],
							[
								58613,
								58633
							],
							[
								58760,
								58771
							],
							[
								58804,
								58821
							],
							[
								58985,
								59004
							],
							[
								59039,
								59061
							],
							[
								59193,
								59214
							],
							[
								59352,
								59372
							],
							[
								59439,
								59462
							],
							[
								59538,
								59560
							],
							[
								59669,
								59693
							],
							[
								59750,
								59762
							],
							[
								59933,
								59951
							],
							[
								60008,
								60020
							],
							[
								60172,
								60195
							],
							[
								60327,
								60343
							],
							[
								60390,
								60403
							],
							[
								60440,
								60507
							],
							[
								60543,
								60565
							],
							[
								60594,
								60604
							],
							[
								60620,
								60633
							],
							[
								60684,
								60697
							],
							[
								60764,
								60787
							],
							[
								60906,
								60928
							],
							[
								61016,
								61029
							],
							[
								61082,
								61098
							],
							[
								61136,
								61140
							],
							[
								61250,
								61287
							],
							[
								61298,
								61308
							],
							[
								61317,
								61346
							],
							[
								61563,
								61579
							],
							[
								61601,
								61612
							],
							[
								61667,
								61694
							],
							[
								61741,
								61759
							],
							[
								61833,
								61868
							],
							[
								61994,
								62015
							],
							[
								62049,
								62058
							],
							[
								62067,
								62075
							],
							[
								62118,
								62127
							],
							[
								62148,
								62157
							],
							[
								62168,
								62176
							],
							[
								62243,
								62252
							],
							[
								62284,
								62312
							],
							[
								62381,
								62400
							],
							[
								62607,
								62633
							],
							[
								62921,
								62943
							],
							[
								63088,
								63110
							],
							[
								63622,
								63672
							],
							[
								63836,
								63885
							],
							[
								63954,
								63961
							],
							[
								64050,
								64064
							],
							[
								64149,
								64159
							],
							[
								64265,
								64269
							],
							[
								64300,
								64320
							],
							[
								64376,
								64389
							],
							[
								64449,
								64461
							],
							[
								64601,
								64616
							],
							[
								65027,
								65065
							],
							[
								65247,
								65258
							],
							[
								65293,
								65314
							],
							[
								65383,
								65390
							],
							[
								65428,
								65458
							],
							[
								65480,
								65496
							],
							[
								65497,
								65517
							]
						],
						"symlist":
						[
							"sliceFn = x =>",
							"ArrayBuffer(start, end)",
							"SharedArrayBuffer",
							"Uint8ClampedArray",
							"Int8Array",
							"Uint8Array",
							"Int16Array",
							"Uint16Array",
							"Int32Array",
							"Uint32Array",
							"BigInt64Array",
							"BigUint64Array",
							"Float32Array",
							"Float64Array",
							"slice = (x, s, e) =>",
							"objectToString = o =>",
							"stringify = v =>",
							"formatNumber = n =>",
							"isNative = fn =>",
							"AsyncFunction = async function x()",
							"GeneratorFunction = function* ()",
							"AsyncGeneratorFunction = async function* ()",
							"isAnyArrayBuffer(v)",
							"isArrayBuffer(v)",
							"isBigInt64Array(v)",
							"isBigUint64Array(v)",
							"isDate(v)",
							"isFloat32Array(v)",
							"isFloat64Array(v)",
							"isInt8Array(v)",
							"isInt16Array(v)",
							"isInt32Array(v)",
							"isMap(v)",
							"isPromise(v)",
							"isProxy(v)",
							"isRegExp(v)",
							"isSet(v)",
							"isSharedArrayBuffer(v)",
							"isUint8Array(v)",
							"isUint8ClampedArray(v)",
							"isUint16Array(v)",
							"isUint32Array(v)",
							"isWeakMap(v)",
							"isWeakSet(v)",
							"isDataView(v)",
							"isBooleanObject(v)",
							"isAsyncFunction(v)",
							"isGeneratorFunction(v)",
							"isAsyncGeneratorFunction(v)",
							"isNumberObject(v)",
							"isBigIntObject(v)",
							"isSymbolObject(v)",
							"isNativeError(v)",
							"isMapIterator(v)",
							"isSetIterator(v)",
							"isStringObject(v)",
							"isArrayBufferView(v)",
							"isArgumentsObject(v)",
							"isBoxedPrimitive(v)",
							"ctor =>",
							"isGeneratorObject(v)",
							"isTypedArray(v)",
							"isModuleNamespaceObject(v)",
							"isConstructor(v)",
							"isIterable(v)",
							"isAsyncIterable(v)",
							"isIterator(v)",
							"isArrayLike(v)",
							" function hasBuiltIn(o, m)",
							" function isAsync(fn)",
							" function format(...args)",
							" function formatWithOptions(opts, ...args)",
							"function formatWithOptionsInternal(o, v)",
							" function assert(actual, expected, message)",
							" function setInterval(callback, ms)",
							" function start()",
							"() =>",
							" function clearInterval(id)",
							" function inherits(ctor, superCtor)",
							"ctor",
							"ctor",
							"superCtor",
							" function getConstructor(obj)",
							" function memoize(fn, cache)",
							" function Memoize(n, ...rest)",
							" function chain(first, ...fns)",
							" (acc, fn) =>",
							" function(...args)",
							" function chainRight(first, ...fns)",
							" (acc, fn) =>",
							" function(...args)",
							" function chainArray(tmp, ...fns)",
							"tmp = function(...args)",
							" function getset(target, ...args)",
							" key =>",
							"([k, v]) =>",
							" (key, value) =>",
							"([k, v]) =>",
							"key =>",
							" (key, value) =>",
							"() =>",
							" value =>",
							" function methods(obj)",
							"bind(...args)",
							"fn =>",
							"transform(read, write)",
							"key =>",
							" (key, value) =>",
							" function modifier(...args)",
							" fn =>",
							" newValue =>",
							" function getter(target, ...args)",
							"ret = (...argv) =>",
							"ret = (...argv) =>",
							"ret = (...argv) =>",
							" function setter(target, ...args)",
							" (...argv) =>",
							"ret = (key, value) =>",
							"ret = (...argv) =>",
							" function gettersetter(target, ...args)",
							"fn = (...args) =>",
							" (...args2) =>",
							"fn = (...args) =>",
							"fn = (...args) =>",
							"fn = (...args) =>",
							"fn = (...args) =>",
							" (...args2) =>",
							" function hasFn(target)",
							" key =>",
							" key =>",
							" function remover(target)",
							" key =>",
							" key =>",
							" function getOrCreate(target, create = () => ({}), set)",
							" key =>",
							" function hasGetSet(obj)",
							"m =>",
							" function getSetArgument(get, set)",
							" (...args) =>",
							" function wrapGetSet(getter, setter, ...args)",
							" prop =>",
							" (prop, value) =>",
							" function weakGetSet(...args)",
							" wref =>",
							" value =>",
							" function addremovehas(target, ...args)",
							"n =>",
							"el =>",
							" el =>",
							" el =>",
							" el =>",
							" el =>",
							"has = el =>",
							" function lookupObject(getset, instance = {}, handlers = {})",
							"get(target, prop)",
							"set(target, prop, value)",
							" function mapObject(target)",
							"set: (key, value) =>",
							"get: key =>",
							" function once(fn, thisArg, memoFn)",
							" function(...args)",
							" function waitFor(ms)",
							"resolve =>",
							" function waitCancellable(ms)",
							"resolve =>",
							"() =>",
							"cancel: () =>",
							" function define(obj, ...args)",
							" function defineGetter(obj, key, fn, enumerable = false)",
							" function defineGetterSetter(obj, key, g, s, enumerable = false)",
							" function defineGettersSetters(obj, gettersSetters)",
							" function* prototypeIterator(obj, pred = (obj, depth) => true)",
							" function pick(obj, keys)",
							" function omit(obj, keys)",
							" function keys(obj, start = 0, end = obj => obj === Object.prototype)",
							"pred = (obj, depth) =>",
							"end = () =>",
							"pred = (obj, depth) =>",
							" function entries(obj, start = 0, end = obj => obj === Object.prototype)",
							" function values(obj, start = 0, end = obj => obj === Object.prototype)",
							" function getMethodNames(obj, depth = 1, start = 0)",
							" function getMethods(obj, depth = 1, start = 0)",
							" function bindMethods(obj, methods, target)",
							" function properties(obj, options = { enumerable: true })",
							" fn =>",
							" fn =>",
							" function weakDefine(obj, ...args)",
							" function getConstructorChain(obj, ...range)",
							" function hasPrototype(obj, proto)",
							" function filter(seq, pred, thisArg)",
							"pred = (el, i) =>",
							" function filterKeys(r, needles, keep = true)",
							"pred = key =>",
							"(obj, key) =>",
							"curry = (f, arr = [], length = f.length) =>",
							" function(...args)",
							"a =>",
							"(min, max, value) =>",
							"generate = (fn, add) =>",
							"add = (item, gen) =>",
							" function(...args)",
							" function(...args)",
							" function* split(buf, ...points)",
							"splitAt = (b, pos, len) =>",
							" function uniquePred(cmp = null)",
							" (el, i, arr) =>",
							"item =>",
							" (el, i, arr) =>",
							"unique = (...args) =>",
							"(arr, cmp) =>",
							"function* unique(seq)",
							"getFunctionArguments = fn =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" (red, green, blue) =>",
							"function getAnsiStyles()",
							"value: (red, green, blue) =>",
							"c =>",
							"value: hex =>",
							"character =>",
							"value: hex =>",
							"value: code =>",
							"value: (red, green, blue) =>",
							"value: hex =>",
							" function stripAnsi(str)",
							" function padAnsi(str, n, s = ' ')",
							" function padStartAnsi(str, n, s = ' ')",
							" function padEndAnsi(str, n, s = ' ')",
							" function mapFunctional(fn)",
							" function* (arg)",
							" function map(...args)",
							"ret = a =>",
							"function* ()",
							"ret = a =>",
							"function* ()",
							" function randInt(...args)",
							" function randFloat(min, max, rng = Math.random)",
							" function randStr(n, set = '_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', rng = Math.random)",
							" function toBigInt(arg)",
							" function roundDigits(precision)",
							" function roundTo(value, prec, digits, type = 'round')",
							" function lazyProperty(obj, name, getter, opts = {})",
							"async function()",
							" function()",
							"v =>",
							" function replaceProperty(value)",
							" function lazyProperties(obj, gettersObj, opts = {})",
							" function observeProperties(target = {}, obj, fn = (prop, value) => {}, opts = {})",
							"get: () =>",
							"set: value =>",
							" function decorate(decorators, obj, ...args)",
							" function getOpt(options = {}, args)",
							"findOpt = arg =>",
							"([optname, option]) =>",
							"opt =>",
							"(acc, arg) =>",
							" function showHelp(opts, exitCode = 0)",
							"(acc, [name]) =>",
							" (acc, [name, [hasArg, fn, shortOpt]]) =>",
							" function isoDate(d)",
							" function toUnixTime(dateObj, utc = false)",
							" function unixTime(utc = false)",
							" function fromUnixTime(epoch, utc = false)",
							" function range(...args)",
							" (v, k) =>",
							"n =>",
							" function chunkArray(arr, size)",
							"fn = (a, v, i) =>",
							" function decodeHTMLEntities(text)",
							" (match, entity) =>",
							" function ucfirst(str)",
							" function lcfirst(str)",
							" function camelize(str, delim = '')",
							" (match, p1, p2, offset) =>",
							" function decamelize(str, delim = '-')",
							" function shorten(str, max = 40, suffix = '...')",
							" function* bytesToUTF8(bytes)",
							" function codePointsToString(codePoints)",
							" function bufferToString(b)",
							" function arraysInCommon(a)",
							"(itm, indx) =>",
							"arr =>",
							" function arrayFacade(proto, itemFn = (container, i) => container.",
							"(i))",
							"*keys()",
							"*entries()",
							"*values()",
							"forEach(callback, thisArg)",
							"reduce(callback, accu, thisArg)",
							" function mod(a, b)",
							"b : n =>",
							" function pushUnique(arr, ...args)",
							" function inserter(dest, next = (k, v) => {})",
							" (k, v) =>",
							" (k, v) =>",
							" (k, v) =>",
							"fn = function(key, value)",
							" function intersect(a, b)",
							" function symmetricDifference(a, b)",
							" function* partitionArray(a, size)",
							" function difference(a, b, includes)",
							"x =>",
							"x =>",
							"x =>",
							"x =>",
							" function intersection(a, b)",
							"x =>",
							" function union(a, b, equality)",
							" function partition(array, callback)",
							" function push(obj, ...values)",
							"v =>",
							" function repeater(n, what)",
							"n = () =>",
							"function* ()",
							"function* ()",
							" function repeat(n, what)",
							" function functionName(fn)",
							" function className(obj)",
							"isArrowFunction = fn =>",
							" function instrument( fn, log = (duration, name, args, ret) => console.log( `function '${name}'` + (ret !== undefined ? ` {= ${escape(ret + '').",
							"(0, 100) + '...'}}` : '') + ` timing: ${duration.",
							"(3)}ms` ), logInterval = 0 //1000 )",
							"async (args, ret) =>",
							" (args, ret) =>",
							"async function(...args)",
							" function(...args)",
							"newMap = () =>",
							"(...args) =>",
							"get(path)",
							"set(path, value)",
							"catchable = function Catchable(self)",
							"catchable",
							"function ()",
							"then(fn)",
							"(...args) =>",
							"(...args) =>",
							" function isNumeric(value)",
							"v =>",
							" function isIndex(value)",
							" function numericIndex(value)",
							" function histogram(arr, out = ",
							"())",
							"incr = key =>",
							" function propertyLookupHandlers(getter = key => null, setter, thisObj)",
							"get(target, key, receiver)",
							".set = function(target, key, value)",
							".ownKeys = function(target)",
							" function propertyLookup(...args)",
							" function abbreviate(str, max = 40, suffix = '...')",
							" function tryFunction(fn, resolve = a => a, reject = () => null)",
							"resolve = () =>",
							"reject = () =>",
							"async function(...args)",
							" function(...args)",
							" function tryCatch(fn, resolve = a => a, reject = () => null, ...args)",
							" function mapAdapter(fn)",
							"get(key)",
							"set(key, value)",
							".keys = () =>",
							".entries = () =>",
							" function mapFunction(map)",
							"fn = function(...args)",
							"m =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".update = function(key, fn = (k, v) => v)",
							".entries = function* ()",
							".values = function* ()",
							".keys = function* ()",
							" function()",
							"([key, value]) =>",
							".keys = async () =>",
							".entries = async () =>",
							".values = async () =>",
							".keys = function* ()",
							".entries = function* ()",
							".values = function* ()",
							".filter = function(pred)",
							"function* ()",
							".map = function(t)",
							"function* ()",
							".forEach = function(fn)",
							".delete = key =>",
							".has = key =>",
							" function mapWrapper(map, toKey = key => key, fromKey = key => key)",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".keys = () =>",
							".entries = function* ()",
							".values = function* ()",
							".has = key =>",
							".delete = key =>",
							"m =>",
							" function weakMapper(createFn, map = ",
							"(), hitFn)",
							"self = function(obj, ...args)",
							".set = (k, v) =>",
							".get = k =>",
							" function wrapGenerator(fn)",
							" function(...args)",
							" function wrapGeneratorMethods(obj)",
							" function isBrowser()",
							" () =>",
							" w =>",
							" () =>",
							" () =>",
							" d =>",
							" () =>",
							" function startInteractive()",
							"function* (re, str)",
							" function indexOf(...args)",
							" (what, offset = 0) =>",
							" (what, offset = 0) =>",
							" function* searchAll(haystack, needle, offset = 0)",
							" function bindProperties(obj, target, props, gen)",
							"name =>",
							"(acc, name) =>",
							" p => v =>",
							"k =>",
							" (a, [k, v]) =>",
							" (...args) =>",
							"(...args) =>",
							" (a, k) =>",
							" function predicate(fn_or_regex, pred)",
							"fn = arg =>",
							".valueOf = function()",
							" arg =>",
							" function transformer(a, ...l)",
							" (acc, fn) =>",
							" function(...v)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABFAQAAQ2xlYXIoY29sb3IgPSBudmcuCigwLCAwLCAwKSkKICBtYWluKC4uLmFyZ3MpCiAgYmVnaW4oKQogIGVuZCgpCiAgLmhhbmRsZUNoYXJNb2RzID0gKGNoYXIsIG1vZHMpID0+CiAgaGFuZGxlU2l6ZSh3aWR0aCwgaGVpZ2h0KQogIGhhbmRsZUtleShrZXlDb2RlKQonXHgwMCc6ICgpID0+ClE6ICgpID0+CiAgaGFuZGxlQ2hhck1vZHMoY2hhciwgbW9kcykKICBoYW5kbGVNb3VzZUJ1dHRvbihidXR0b24sIGFjdGlvbiwgbW9kcykKICBoYW5kbGVDdXJzb3JQb3MoeCwgeSkKICB0aWNrcyhyYXRlID0gMTAwMCkKICBmcmFtZSgpCiAgbiA9Pgp2YWwgPT4KdmFsID0+CnZhbCA9PgAAAAAAAAAAvSMAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					2746,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/io-helpers.js",
						"symkeys":
						[
							[
								444,
								448
							],
							[
								469,
								474
							],
							[
								513,
								517
							],
							[
								537,
								542
							],
							[
								579,
								583
							],
							[
								602,
								607
							],
							[
								620,
								644
							],
							[
								838,
								875
							],
							[
								906,
								912
							],
							[
								978,
								991
							],
							[
								1022,
								1050
							],
							[
								1295,
								1317
							],
							[
								1400,
								1433
							],
							[
								1515,
								1527
							],
							[
								1895,
								1927
							],
							[
								2245,
								2275
							],
							[
								2378,
								2409
							],
							[
								2477,
								2490
							],
							[
								2710,
								2718
							],
							[
								2803,
								2831
							],
							[
								3000,
								3027
							],
							[
								3212,
								3239
							],
							[
								3475,
								3506
							],
							[
								3819,
								3862
							],
							[
								3999,
								4047
							],
							[
								4360,
								4392
							],
							[
								4499,
								4539
							],
							[
								4701,
								4740
							],
							[
								4803,
								4832
							],
							[
								5162,
								5194
							],
							[
								5433,
								5469
							],
							[
								5537,
								5564
							],
							[
								5617,
								5658
							],
							[
								5684,
								5693
							],
							[
								5735,
								5760
							],
							[
								5882,
								5892
							],
							[
								6008,
								6013
							],
							[
								6113,
								6123
							],
							[
								6200,
								6215
							],
							[
								6286,
								6300
							],
							[
								6418,
								6465
							],
							[
								6883,
								6914
							],
							[
								7331,
								7374
							],
							[
								7432,
								7438
							],
							[
								7651,
								7681
							],
							[
								7713,
								7731
							],
							[
								7850,
								7856
							],
							[
								7961,
								8002
							],
							[
								8739,
								8750
							],
							[
								8792,
								8804
							],
							[
								8846,
								8858
							],
							[
								8900,
								8913
							],
							[
								9027,
								9033
							],
							[
								9780,
								9817
							],
							[
								9998,
								10014
							],
							[
								10890,
								10898
							],
							[
								10986,
								10994
							],
							[
								11294,
								11314
							]
						],
						"symlist":
						[
							"m =>",
							"() =>",
							"m =>",
							"() =>",
							"m =>",
							"() =>",
							" function IfDebug(token)",
							" function LogIfDebug(token, loggerFn)",
							" () =>",
							" (...args) =>",
							" function ReadFd(fd, binary)",
							" function IsStdio(obj)",
							" function ReadClose(file, binary)",
							"function* ()",
							" function ReadFile(name, binary)",
							" function ReadAny(obj, binary)",
							" function LoadHistory(filename)",
							"parse = () =>",
							"entry =>",
							" function ReadJSON(filename)",
							" function ReadXML(filename)",
							" function MapFile(filename)",
							" function WriteFile(file, data)",
							" function WriteFd(fd, data, offset, length)",
							" function WriteClose(file, data, offset, length)",
							" function WriteAny(obj, ...args)",
							" function WriteJSON(name, data, ...args)",
							" function WriteXML(name, data, ...args)",
							" function ReadBJSON(filename)",
							" function WriteBJSON(name, data)",
							" function* Filter(gen, regEx = /.*/)",
							" function FilterImages(gen)",
							" function SortFiles(arr, field = 'ctime')",
							"(a, b) =>",
							" function* StatFiles(gen)",
							"toString()",
							"() =>",
							"toString()",
							"get landscape()",
							"get portrait()",
							"async function* FdReader(fd, bufferSize = 1024)",
							" function CopyToClipboard(text)",
							" function ReadCallback(fd, fn = data => {})",
							" () =>",
							" function LogCall(fn, thisObj)",
							" function(...args)",
							"arg =>",
							" function Spawn(file, args, options = {})",
							"get stdin()",
							"get stdout()",
							"get stderr()",
							"get waiting()",
							"wait()",
							" function FetchURL(url, options = {})",
							"(acc, [k, v]) =>",
							" data =>",
							" data =>",
							" function Shell(cmd)"
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				],
				[
					2747,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
						"symkeys":
						[
							[
								952,
								966
							],
							[
								1046,
								1069
							],
							[
								1207,
								1224
							],
							[
								1265,
								1282
							],
							[
								1315,
								1324
							],
							[
								1358,
								1368
							],
							[
								1402,
								1412
							],
							[
								1447,
								1458
							],
							[
								1492,
								1502
							],
							[
								1537,
								1548
							],
							[
								1585,
								1598
							],
							[
								1636,
								1650
							],
							[
								1686,
								1698
							],
							[
								1734,
								1746
							],
							[
								1799,
								1819
							],
							[
								1866,
								1887
							],
							[
								1929,
								1945
							],
							[
								1999,
								2018
							],
							[
								2053,
								2069
							],
							[
								2193,
								2227
							],
							[
								2250,
								2282
							],
							[
								2305,
								2348
							],
							[
								4177,
								4196
							],
							[
								4294,
								4310
							],
							[
								4372,
								4390
							],
							[
								4454,
								4473
							],
							[
								4538,
								4547
							],
							[
								4602,
								4619
							],
							[
								4682,
								4699
							],
							[
								4762,
								4776
							],
							[
								4836,
								4851
							],
							[
								4912,
								4927
							],
							[
								4988,
								4996
							],
							[
								5050,
								5062
							],
							[
								5120,
								5130
							],
							[
								5186,
								5197
							],
							[
								5254,
								5262
							],
							[
								5316,
								5338
							],
							[
								5406,
								5421
							],
							[
								5482,
								5504
							],
							[
								5572,
								5588
							],
							[
								5650,
								5666
							],
							[
								5728,
								5740
							],
							[
								5798,
								5810
							],
							[
								5868,
								5881
							],
							[
								5940,
								5958
							],
							[
								6016,
								6034
							],
							[
								6098,
								6120
							],
							[
								6188,
								6215
							],
							[
								6288,
								6305
							],
							[
								6362,
								6379
							],
							[
								6436,
								6453
							],
							[
								6500,
								6516
							],
							[
								6599,
								6615
							],
							[
								6687,
								6703
							],
							[
								6775,
								6792
							],
							[
								6849,
								6869
							],
							[
								6928,
								6948
							],
							[
								7091,
								7110
							],
							[
								7186,
								7193
							],
							[
								7222,
								7242
							],
							[
								7321,
								7336
							],
							[
								7397,
								7423
							],
							[
								7494,
								7510
							],
							[
								7566,
								7579
							],
							[
								7647,
								7665
							],
							[
								7738,
								7751
							],
							[
								7807,
								7821
							],
							[
								7923,
								7949
							],
							[
								7995,
								8016
							],
							[
								8175,
								8200
							],
							[
								8285,
								8327
							],
							[
								8461,
								8501
							],
							[
								11421,
								11464
							],
							[
								11863,
								11898
							],
							[
								12054,
								12072
							],
							[
								12102,
								12107
							],
							[
								12197,
								12224
							],
							[
								12343,
								12378
							],
							[
								12439,
								12443
							],
							[
								12459,
								12463
							],
							[
								12490,
								12499
							],
							[
								12662,
								12691
							],
							[
								12771,
								12799
							],
							[
								12928,
								12960
							],
							[
								13202,
								13232
							],
							[
								13256,
								13272
							],
							[
								13273,
								13296
							],
							[
								13393,
								13428
							],
							[
								13452,
								13468
							],
							[
								13469,
								13492
							],
							[
								13589,
								13622
							],
							[
								13672,
								13695
							],
							[
								13789,
								13822
							],
							[
								14354,
								14366
							],
							[
								14401,
								14412
							],
							[
								14479,
								14500
							],
							[
								14536,
								14547
							],
							[
								14793,
								14799
							],
							[
								14812,
								14828
							],
							[
								15028,
								15033
							],
							[
								15047,
								15056
							],
							[
								15083,
								15106
							],
							[
								15140,
								15153
							],
							[
								15180,
								15185
							],
							[
								15226,
								15248
							],
							[
								15306,
								15312
							],
							[
								15328,
								15344
							],
							[
								15423,
								15450
							],
							[
								15495,
								15501
							],
							[
								15546,
								15558
							],
							[
								15588,
								15621
							],
							[
								15805,
								15823
							],
							[
								15906,
								15924
							],
							[
								16043,
								16061
							],
							[
								16236,
								16269
							],
							[
								16402,
								16415
							],
							[
								16535,
								16556
							],
							[
								16626,
								16644
							],
							[
								17087,
								17126
							],
							[
								17203,
								17220
							],
							[
								17343,
								17357
							],
							[
								17519,
								17536
							],
							[
								17677,
								17694
							],
							[
								17725,
								17742
							],
							[
								17842,
								17859
							],
							[
								18151,
								18165
							],
							[
								18211,
								18234
							],
							[
								18291,
								18298
							],
							[
								18316,
								18323
							],
							[
								18348,
								18373
							],
							[
								18433,
								18440
							],
							[
								18461,
								18468
							],
							[
								18498,
								18553
							],
							[
								18658,
								18665
							],
							[
								18819,
								18843
							],
							[
								18893,
								18897
							],
							[
								18928,
								18962
							],
							[
								18973,
								18986
							],
							[
								19045,
								19090
							],
							[
								19155,
								19166
							],
							[
								19186,
								19206
							],
							[
								19246,
								19275
							],
							[
								19299,
								19310
							],
							[
								19325,
								19337
							],
							[
								19384,
								19423
							],
							[
								19524,
								19528
							],
							[
								19567,
								19572
							],
							[
								19598,
								19604
							],
							[
								19633,
								19639
							],
							[
								19732,
								19745
							],
							[
								19773,
								19786
							],
							[
								19912,
								19923
							],
							[
								20003,
								20063
							],
							[
								20133,
								20150
							],
							[
								20211,
								20235
							],
							[
								20310,
								20337
							],
							[
								20558,
								20578
							],
							[
								20608,
								20619
							],
							[
								20718,
								20753
							],
							[
								20793,
								20811
							],
							[
								20989,
								21010
							],
							[
								21034,
								21044
							],
							[
								21080,
								21109
							],
							[
								21165,
								21175
							],
							[
								21226,
								21231
							],
							[
								21288,
								21301
							],
							[
								21374,
								21404
							],
							[
								21943,
								21999
							],
							[
								22160,
								22224
							],
							[
								22372,
								22423
							],
							[
								23090,
								23152
							],
							[
								23334,
								23359
							],
							[
								23456,
								23481
							],
							[
								23594,
								23663
							],
							[
								23752,
								23774
							],
							[
								23808,
								23819
							],
							[
								23842,
								23864
							],
							[
								24106,
								24178
							],
							[
								24281,
								24352
							],
							[
								24448,
								24499
							],
							[
								24671,
								24718
							],
							[
								24785,
								24828
							],
							[
								24958,
								25015
							],
							[
								25109,
								25115
							],
							[
								25129,
								25135
							],
							[
								25439,
								25473
							],
							[
								25780,
								25824
							],
							[
								25991,
								26025
							],
							[
								26091,
								26127
							],
							[
								26202,
								26219
							],
							[
								26540,
								26585
							],
							[
								26719,
								26732
							],
							[
								26830,
								26843
							],
							[
								26917,
								26960
							],
							[
								26961,
								26980
							],
							[
								26995,
								26999
							],
							[
								27122,
								27142
							],
							[
								27195,
								27218
							],
							[
								27298,
								27318
							],
							[
								27400,
								27418
							],
							[
								27561,
								27579
							],
							[
								27652,
								27684
							],
							[
								27712,
								27738
							],
							[
								28056,
								28088
							],
							[
								28121,
								28137
							],
							[
								28152,
								28159
							],
							[
								28185,
								28201
							],
							[
								28240,
								28261
							],
							[
								28301,
								28314
							],
							[
								28365,
								28386
							],
							[
								28555,
								28583
							],
							[
								28802,
								28819
							],
							[
								28820,
								28829
							],
							[
								28881,
								28898
							],
							[
								28899,
								28908
							],
							[
								28968,
								28985
							],
							[
								28986,
								29009
							],
							[
								29065,
								29089
							],
							[
								31716,
								31744
							],
							[
								32175,
								32179
							],
							[
								32307,
								32320
							],
							[
								32636,
								32648
							],
							[
								32911,
								32924
							],
							[
								33029,
								33043
							],
							[
								33936,
								33964
							],
							[
								34080,
								34093
							],
							[
								34205,
								34229
							],
							[
								34322,
								34356
							],
							[
								34477,
								34516
							],
							[
								34563,
								34600
							],
							[
								34647,
								34674
							],
							[
								34685,
								34701
							],
							[
								34759,
								34781
							],
							[
								34814,
								34824
							],
							[
								34873,
								34885
							],
							[
								35167,
								35177
							],
							[
								35252,
								35264
							],
							[
								35542,
								35568
							],
							[
								35818,
								35866
							],
							[
								35914,
								36026
							],
							[
								36131,
								36154
							],
							[
								36293,
								36325
							],
							[
								36638,
								36692
							],
							[
								37050,
								37102
							],
							[
								37244,
								37260
							],
							[
								37367,
								37378
							],
							[
								37536,
								37540
							],
							[
								37774,
								37807
							],
							[
								37921,
								37973
							],
							[
								38167,
								38249
							],
							[
								38409,
								38419
							],
							[
								38437,
								38450
							],
							[
								38627,
								38671
							],
							[
								38987,
								39023
							],
							[
								39180,
								39196
							],
							[
								39214,
								39236
							],
							[
								39349,
								39355
							],
							[
								39459,
								39472
							],
							[
								41111,
								41149
							],
							[
								41249,
								41265
							],
							[
								41338,
								41382
							],
							[
								41741,
								41761
							],
							[
								41961,
								42003
							],
							[
								42198,
								42229
							],
							[
								42279,
								42321
							],
							[
								42441,
								42465
							],
							[
								42723,
								42733
							],
							[
								42786,
								42790
							],
							[
								42829,
								42860
							],
							[
								42871,
								42888
							],
							[
								43029,
								43063
							],
							[
								43301,
								43320
							],
							[
								43358,
								43380
							],
							[
								43492,
								43514
							],
							[
								43626,
								43661
							],
							[
								43709,
								43736
							],
							[
								43827,
								43865
							],
							[
								44074,
								44122
							],
							[
								44702,
								44731
							],
							[
								45178,
								45218
							],
							[
								45313,
								45340
							],
							[
								45397,
								45424
							],
							[
								45627,
								45641
							],
							[
								45690,
								45696
							],
							[
								45737,
								45803
							],
							[
								45805,
								45809
							],
							[
								45967,
								45974
							],
							[
								46066,
								46076
							],
							[
								46187,
								46196
							],
							[
								46302,
								46328
							],
							[
								46461,
								46492
							],
							[
								46667,
								46686
							],
							[
								46728,
								46736
							],
							[
								46765,
								46799
							],
							[
								46943,
								46988
							],
							[
								47064,
								47074
							],
							[
								47125,
								47135
							],
							[
								47161,
								47171
							],
							[
								47199,
								47224
							],
							[
								47355,
								47380
							],
							[
								47478,
								47513
							],
							[
								47566,
								47600
							],
							[
								47682,
								47718
							],
							[
								47839,
								47843
							],
							[
								47870,
								47874
							],
							[
								47913,
								47917
							],
							[
								47945,
								47949
							],
							[
								47978,
								48006
							],
							[
								48136,
								48140
							],
							[
								48197,
								48228
							],
							[
								48567,
								48603
							],
							[
								48852,
								48882
							],
							[
								49018,
								49022
							],
							[
								49306,
								49333
							],
							[
								49377,
								49386
							],
							[
								49438,
								49450
							],
							[
								49592,
								49604
							],
							[
								49731,
								49756
							],
							[
								49796,
								49822
							],
							[
								50074,
								50098
							],
							[
								50291,
								50314
							],
							[
								50440,
								50606
							],
							[
								50615,
								50672
							],
							[
								50679,
								50720
							],
							[
								50969,
								50989
							],
							[
								51191,
								51206
							],
							[
								51492,
								51515
							],
							[
								51720,
								51738
							],
							[
								51951,
								51965
							],
							[
								52026,
								52038
							],
							[
								52136,
								52145
							],
							[
								52421,
								52437
							],
							[
								52872,
								52908
							],
							[
								53003,
								53012
							],
							[
								53188,
								53199
							],
							[
								53210,
								53218
							],
							[
								53267,
								53279
							],
							[
								53524,
								53536
							],
							[
								53717,
								53743
							],
							[
								53762,
								53766
							],
							[
								53853,
								53877
							],
							[
								53955,
								53984
							],
							[
								54038,
								54069
							],
							[
								54076,
								54079
							],
							[
								54123,
								54136
							],
							[
								54236,
								54307
							],
							[
								54333,
								54359
							],
							[
								54505,
								54540
							],
							[
								54730,
								54757
							],
							[
								54867,
								54900
							],
							[
								55057,
								55108
							],
							[
								55478,
								55542
							],
							[
								55602,
								55617
							],
							[
								55683,
								55697
							],
							[
								55735,
								55758
							],
							[
								55950,
								55968
							],
							[
								56159,
								56229
							],
							[
								56378,
								56402
							],
							[
								56421,
								56429
							],
							[
								56465,
								56480
							],
							[
								56606,
								56619
							],
							[
								56774,
								56790
							],
							[
								56985,
								57011
							],
							[
								57026,
								57048
							],
							[
								57264,
								57268
							],
							[
								57454,
								57476
							],
							[
								57498,
								57508
							],
							[
								57526,
								57539
							],
							[
								57663,
								57685
							],
							[
								57707,
								57717
							],
							[
								57735,
								57748
							],
							[
								57854,
								57876
							],
							[
								57902,
								57912
							],
							[
								57930,
								57943
							],
							[
								57979,
								58001
							],
							[
								58022,
								58032
							],
							[
								58050,
								58063
							],
							[
								58083,
								58124
							],
							[
								58413,
								58436
							],
							[
								58517,
								58539
							],
							[
								58613,
								58633
							],
							[
								58760,
								58771
							],
							[
								58804,
								58821
							],
							[
								58985,
								59004
							],
							[
								59039,
								59061
							],
							[
								59193,
								59214
							],
							[
								59352,
								59372
							],
							[
								59439,
								59462
							],
							[
								59538,
								59560
							],
							[
								59669,
								59693
							],
							[
								59750,
								59762
							],
							[
								59933,
								59951
							],
							[
								60008,
								60020
							],
							[
								60172,
								60195
							],
							[
								60327,
								60343
							],
							[
								60390,
								60403
							],
							[
								60440,
								60507
							],
							[
								60543,
								60565
							],
							[
								60594,
								60604
							],
							[
								60620,
								60633
							],
							[
								60684,
								60697
							],
							[
								60764,
								60787
							],
							[
								60906,
								60928
							],
							[
								61016,
								61029
							],
							[
								61082,
								61098
							],
							[
								61136,
								61140
							],
							[
								61250,
								61287
							],
							[
								61298,
								61308
							],
							[
								61317,
								61346
							],
							[
								61563,
								61579
							],
							[
								61601,
								61612
							],
							[
								61667,
								61694
							],
							[
								61741,
								61759
							],
							[
								61833,
								61868
							],
							[
								61994,
								62015
							],
							[
								62049,
								62058
							],
							[
								62067,
								62075
							],
							[
								62118,
								62127
							],
							[
								62148,
								62157
							],
							[
								62168,
								62176
							],
							[
								62243,
								62252
							],
							[
								62284,
								62312
							],
							[
								62381,
								62400
							],
							[
								62607,
								62633
							],
							[
								62921,
								62943
							],
							[
								63088,
								63110
							],
							[
								63622,
								63672
							],
							[
								63836,
								63885
							],
							[
								63954,
								63961
							],
							[
								64050,
								64064
							],
							[
								64149,
								64159
							],
							[
								64265,
								64269
							],
							[
								64300,
								64320
							],
							[
								64376,
								64389
							],
							[
								64449,
								64461
							],
							[
								64601,
								64616
							],
							[
								65027,
								65065
							],
							[
								65247,
								65258
							],
							[
								65293,
								65314
							],
							[
								65383,
								65390
							],
							[
								65428,
								65458
							],
							[
								65480,
								65496
							],
							[
								65497,
								65517
							]
						],
						"symlist":
						[
							"sliceFn = x =>",
							"ArrayBuffer(start, end)",
							"SharedArrayBuffer",
							"Uint8ClampedArray",
							"Int8Array",
							"Uint8Array",
							"Int16Array",
							"Uint16Array",
							"Int32Array",
							"Uint32Array",
							"BigInt64Array",
							"BigUint64Array",
							"Float32Array",
							"Float64Array",
							"slice = (x, s, e) =>",
							"objectToString = o =>",
							"stringify = v =>",
							"formatNumber = n =>",
							"isNative = fn =>",
							"AsyncFunction = async function x()",
							"GeneratorFunction = function* ()",
							"AsyncGeneratorFunction = async function* ()",
							"isAnyArrayBuffer(v)",
							"isArrayBuffer(v)",
							"isBigInt64Array(v)",
							"isBigUint64Array(v)",
							"isDate(v)",
							"isFloat32Array(v)",
							"isFloat64Array(v)",
							"isInt8Array(v)",
							"isInt16Array(v)",
							"isInt32Array(v)",
							"isMap(v)",
							"isPromise(v)",
							"isProxy(v)",
							"isRegExp(v)",
							"isSet(v)",
							"isSharedArrayBuffer(v)",
							"isUint8Array(v)",
							"isUint8ClampedArray(v)",
							"isUint16Array(v)",
							"isUint32Array(v)",
							"isWeakMap(v)",
							"isWeakSet(v)",
							"isDataView(v)",
							"isBooleanObject(v)",
							"isAsyncFunction(v)",
							"isGeneratorFunction(v)",
							"isAsyncGeneratorFunction(v)",
							"isNumberObject(v)",
							"isBigIntObject(v)",
							"isSymbolObject(v)",
							"isNativeError(v)",
							"isMapIterator(v)",
							"isSetIterator(v)",
							"isStringObject(v)",
							"isArrayBufferView(v)",
							"isArgumentsObject(v)",
							"isBoxedPrimitive(v)",
							"ctor =>",
							"isGeneratorObject(v)",
							"isTypedArray(v)",
							"isModuleNamespaceObject(v)",
							"isConstructor(v)",
							"isIterable(v)",
							"isAsyncIterable(v)",
							"isIterator(v)",
							"isArrayLike(v)",
							" function hasBuiltIn(o, m)",
							" function isAsync(fn)",
							" function format(...args)",
							" function formatWithOptions(opts, ...args)",
							"function formatWithOptionsInternal(o, v)",
							" function assert(actual, expected, message)",
							" function setInterval(callback, ms)",
							" function start()",
							"() =>",
							" function clearInterval(id)",
							" function inherits(ctor, superCtor)",
							"ctor",
							"ctor",
							"superCtor",
							" function getConstructor(obj)",
							" function memoize(fn, cache)",
							" function Memoize(n, ...rest)",
							" function chain(first, ...fns)",
							" (acc, fn) =>",
							" function(...args)",
							" function chainRight(first, ...fns)",
							" (acc, fn) =>",
							" function(...args)",
							" function chainArray(tmp, ...fns)",
							"tmp = function(...args)",
							" function getset(target, ...args)",
							" key =>",
							"([k, v]) =>",
							" (key, value) =>",
							"([k, v]) =>",
							"key =>",
							" (key, value) =>",
							"() =>",
							" value =>",
							" function methods(obj)",
							"bind(...args)",
							"fn =>",
							"transform(read, write)",
							"key =>",
							" (key, value) =>",
							" function modifier(...args)",
							" fn =>",
							" newValue =>",
							" function getter(target, ...args)",
							"ret = (...argv) =>",
							"ret = (...argv) =>",
							"ret = (...argv) =>",
							" function setter(target, ...args)",
							" (...argv) =>",
							"ret = (key, value) =>",
							"ret = (...argv) =>",
							" function gettersetter(target, ...args)",
							"fn = (...args) =>",
							" (...args2) =>",
							"fn = (...args) =>",
							"fn = (...args) =>",
							"fn = (...args) =>",
							"fn = (...args) =>",
							" (...args2) =>",
							" function hasFn(target)",
							" key =>",
							" key =>",
							" function remover(target)",
							" key =>",
							" key =>",
							" function getOrCreate(target, create = () => ({}), set)",
							" key =>",
							" function hasGetSet(obj)",
							"m =>",
							" function getSetArgument(get, set)",
							" (...args) =>",
							" function wrapGetSet(getter, setter, ...args)",
							" prop =>",
							" (prop, value) =>",
							" function weakGetSet(...args)",
							" wref =>",
							" value =>",
							" function addremovehas(target, ...args)",
							"n =>",
							"el =>",
							" el =>",
							" el =>",
							" el =>",
							" el =>",
							"has = el =>",
							" function lookupObject(getset, instance = {}, handlers = {})",
							"get(target, prop)",
							"set(target, prop, value)",
							" function mapObject(target)",
							"set: (key, value) =>",
							"get: key =>",
							" function once(fn, thisArg, memoFn)",
							" function(...args)",
							" function waitFor(ms)",
							"resolve =>",
							" function waitCancellable(ms)",
							"resolve =>",
							"() =>",
							"cancel: () =>",
							" function define(obj, ...args)",
							" function defineGetter(obj, key, fn, enumerable = false)",
							" function defineGetterSetter(obj, key, g, s, enumerable = false)",
							" function defineGettersSetters(obj, gettersSetters)",
							" function* prototypeIterator(obj, pred = (obj, depth) => true)",
							" function pick(obj, keys)",
							" function omit(obj, keys)",
							" function keys(obj, start = 0, end = obj => obj === Object.prototype)",
							"pred = (obj, depth) =>",
							"end = () =>",
							"pred = (obj, depth) =>",
							" function entries(obj, start = 0, end = obj => obj === Object.prototype)",
							" function values(obj, start = 0, end = obj => obj === Object.prototype)",
							" function getMethodNames(obj, depth = 1, start = 0)",
							" function getMethods(obj, depth = 1, start = 0)",
							" function bindMethods(obj, methods, target)",
							" function properties(obj, options = { enumerable: true })",
							" fn =>",
							" fn =>",
							" function weakDefine(obj, ...args)",
							" function getConstructorChain(obj, ...range)",
							" function hasPrototype(obj, proto)",
							" function filter(seq, pred, thisArg)",
							"pred = (el, i) =>",
							" function filterKeys(r, needles, keep = true)",
							"pred = key =>",
							"(obj, key) =>",
							"curry = (f, arr = [], length = f.length) =>",
							" function(...args)",
							"a =>",
							"(min, max, value) =>",
							"generate = (fn, add) =>",
							"add = (item, gen) =>",
							" function(...args)",
							" function(...args)",
							" function* split(buf, ...points)",
							"splitAt = (b, pos, len) =>",
							" function uniquePred(cmp = null)",
							" (el, i, arr) =>",
							"item =>",
							" (el, i, arr) =>",
							"unique = (...args) =>",
							"(arr, cmp) =>",
							"function* unique(seq)",
							"getFunctionArguments = fn =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" (red, green, blue) =>",
							"function getAnsiStyles()",
							"value: (red, green, blue) =>",
							"c =>",
							"value: hex =>",
							"character =>",
							"value: hex =>",
							"value: code =>",
							"value: (red, green, blue) =>",
							"value: hex =>",
							" function stripAnsi(str)",
							" function padAnsi(str, n, s = ' ')",
							" function padStartAnsi(str, n, s = ' ')",
							" function padEndAnsi(str, n, s = ' ')",
							" function mapFunctional(fn)",
							" function* (arg)",
							" function map(...args)",
							"ret = a =>",
							"function* ()",
							"ret = a =>",
							"function* ()",
							" function randInt(...args)",
							" function randFloat(min, max, rng = Math.random)",
							" function randStr(n, set = '_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', rng = Math.random)",
							" function toBigInt(arg)",
							" function roundDigits(precision)",
							" function roundTo(value, prec, digits, type = 'round')",
							" function lazyProperty(obj, name, getter, opts = {})",
							"async function()",
							" function()",
							"v =>",
							" function replaceProperty(value)",
							" function lazyProperties(obj, gettersObj, opts = {})",
							" function observeProperties(target = {}, obj, fn = (prop, value) => {}, opts = {})",
							"get: () =>",
							"set: value =>",
							" function decorate(decorators, obj, ...args)",
							" function getOpt(options = {}, args)",
							"findOpt = arg =>",
							"([optname, option]) =>",
							"opt =>",
							"(acc, arg) =>",
							" function showHelp(opts, exitCode = 0)",
							"(acc, [name]) =>",
							" (acc, [name, [hasArg, fn, shortOpt]]) =>",
							" function isoDate(d)",
							" function toUnixTime(dateObj, utc = false)",
							" function unixTime(utc = false)",
							" function fromUnixTime(epoch, utc = false)",
							" function range(...args)",
							" (v, k) =>",
							"n =>",
							" function chunkArray(arr, size)",
							"fn = (a, v, i) =>",
							" function decodeHTMLEntities(text)",
							" (match, entity) =>",
							" function ucfirst(str)",
							" function lcfirst(str)",
							" function camelize(str, delim = '')",
							" (match, p1, p2, offset) =>",
							" function decamelize(str, delim = '-')",
							" function shorten(str, max = 40, suffix = '...')",
							" function* bytesToUTF8(bytes)",
							" function codePointsToString(codePoints)",
							" function bufferToString(b)",
							" function arraysInCommon(a)",
							"(itm, indx) =>",
							"arr =>",
							" function arrayFacade(proto, itemFn = (container, i) => container.",
							"(i))",
							"*keys()",
							"*entries()",
							"*values()",
							"forEach(callback, thisArg)",
							"reduce(callback, accu, thisArg)",
							" function mod(a, b)",
							"b : n =>",
							" function pushUnique(arr, ...args)",
							" function inserter(dest, next = (k, v) => {})",
							" (k, v) =>",
							" (k, v) =>",
							" (k, v) =>",
							"fn = function(key, value)",
							" function intersect(a, b)",
							" function symmetricDifference(a, b)",
							" function* partitionArray(a, size)",
							" function difference(a, b, includes)",
							"x =>",
							"x =>",
							"x =>",
							"x =>",
							" function intersection(a, b)",
							"x =>",
							" function union(a, b, equality)",
							" function partition(array, callback)",
							" function push(obj, ...values)",
							"v =>",
							" function repeater(n, what)",
							"n = () =>",
							"function* ()",
							"function* ()",
							" function repeat(n, what)",
							" function functionName(fn)",
							" function className(obj)",
							"isArrowFunction = fn =>",
							" function instrument( fn, log = (duration, name, args, ret) => console.log( `function '${name}'` + (ret !== undefined ? ` {= ${escape(ret + '').",
							"(0, 100) + '...'}}` : '') + ` timing: ${duration.",
							"(3)}ms` ), logInterval = 0 //1000 )",
							"async (args, ret) =>",
							" (args, ret) =>",
							"async function(...args)",
							" function(...args)",
							"newMap = () =>",
							"(...args) =>",
							"get(path)",
							"set(path, value)",
							"catchable = function Catchable(self)",
							"catchable",
							"function ()",
							"then(fn)",
							"(...args) =>",
							"(...args) =>",
							" function isNumeric(value)",
							"v =>",
							" function isIndex(value)",
							" function numericIndex(value)",
							" function histogram(arr, out = ",
							"())",
							"incr = key =>",
							" function propertyLookupHandlers(getter = key => null, setter, thisObj)",
							"get(target, key, receiver)",
							".set = function(target, key, value)",
							".ownKeys = function(target)",
							" function propertyLookup(...args)",
							" function abbreviate(str, max = 40, suffix = '...')",
							" function tryFunction(fn, resolve = a => a, reject = () => null)",
							"resolve = () =>",
							"reject = () =>",
							"async function(...args)",
							" function(...args)",
							" function tryCatch(fn, resolve = a => a, reject = () => null, ...args)",
							" function mapAdapter(fn)",
							"get(key)",
							"set(key, value)",
							".keys = () =>",
							".entries = () =>",
							" function mapFunction(map)",
							"fn = function(...args)",
							"m =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".update = function(key, fn = (k, v) => v)",
							".entries = function* ()",
							".values = function* ()",
							".keys = function* ()",
							" function()",
							"([key, value]) =>",
							".keys = async () =>",
							".entries = async () =>",
							".values = async () =>",
							".keys = function* ()",
							".entries = function* ()",
							".values = function* ()",
							".filter = function(pred)",
							"function* ()",
							".map = function(t)",
							"function* ()",
							".forEach = function(fn)",
							".delete = key =>",
							".has = key =>",
							" function mapWrapper(map, toKey = key => key, fromKey = key => key)",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".keys = () =>",
							".entries = function* ()",
							".values = function* ()",
							".has = key =>",
							".delete = key =>",
							"m =>",
							" function weakMapper(createFn, map = ",
							"(), hitFn)",
							"self = function(obj, ...args)",
							".set = (k, v) =>",
							".get = k =>",
							" function wrapGenerator(fn)",
							" function(...args)",
							" function wrapGeneratorMethods(obj)",
							" function isBrowser()",
							" () =>",
							" w =>",
							" () =>",
							" () =>",
							" d =>",
							" () =>",
							" function startInteractive()",
							"function* (re, str)",
							" function indexOf(...args)",
							" (what, offset = 0) =>",
							" (what, offset = 0) =>",
							" function* searchAll(haystack, needle, offset = 0)",
							" function bindProperties(obj, target, props, gen)",
							"name =>",
							"(acc, name) =>",
							" p => v =>",
							"k =>",
							" (a, [k, v]) =>",
							" (...args) =>",
							"(...args) =>",
							" (a, k) =>",
							" function predicate(fn_or_regex, pred)",
							"fn = arg =>",
							".valueOf = function()",
							" arg =>",
							" function transformer(a, ...l)",
							" (acc, fn) =>",
							" function(...v)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD0AwAAICBtID0+CigpID0+CiAgbSA9PgooKSA9PgogIG0gPT4KKCkgPT4KSWZEZWJ1Zyh0b2tlbikKTG9nSWZEZWJ1Zyh0b2tlbiwgbG9nZ2VyRm4pCigpID0+CiguLi5hcmdzKSA9PgpSZWFkRmQoZmQsIGJpbmFyeSkKSXNTdGRpbyhvYmopClJlYWRDbG9zZShmaWxlLCBiaW5hcnkpCigpClJlYWRGaWxlKG5hbWUsIGJpbmFyeSkKUmVhZEFueShvYmosIGJpbmFyeSkKTG9hZEhpc3RvcnkoZmlsZW5hbWUpCiAgcGFyc2UgPSAoKSA9PgogIGVudHJ5ID0+ClJlYWRKU09OKGZpbGVuYW1lKQpSZWFkWE1MKGZpbGVuYW1lKQpNYXBGaWxlKGZpbGVuYW1lKQpXcml0ZUZpbGUoZmlsZSwgZGF0YSkKV3JpdGVGZChmZCwgZGF0YSwgb2Zmc2V0LCBsZW5ndGgpCldyaXRlQ2xvc2UoZmlsZSwgZGF0YSwgb2Zmc2V0LCBsZW5ndGgpCldyaXRlQW55KG9iaiwgLi4uYXJncykKV3JpdGVKU09OKG5hbWUsIGRhdGEsIC4uLmFyZ3MpCldyaXRlWE1MKG5hbWUsIGRhdGEsIC4uLmFyZ3MpClJlYWRCSlNPTihmaWxlbmFtZSkKV3JpdGVCSlNPTihuYW1lLCBkYXRhKQpGaWx0ZXIoZ2VuLCByZWdFeCA9IC8uKi8pCkZpbHRlckltYWdlcyhnZW4pClNvcnRGaWxlcyhhcnIsIGZpZWxkID0gJ2N0aW1lJykKKGEsIGIpID0+ClN0YXRGaWxlcyhnZW4pCiAgdG9TdHJpbmcoKQooKSA9PgogIHRvU3RyaW5nKCkKICBnZXQgbGFuZHNjYXBlKCkKICBnZXQgcG9ydHJhaXQoKQpGZFJlYWRlcihmZCwgYnVmZmVyU2l6ZSA9IDEwMjQpCkNvcHlUb0NsaXBib2FyZCh0ZXh0KQpSZWFkQ2FsbGJhY2soZmQsIGZuID0gZGF0YSA9PiB7fSkKKCkgPT4KTG9nQ2FsbChmbiwgdGhpc09iaikKZnVuY3Rpb24oLi4uYXJncykKICBhcmcgPT4KU3Bhd24oZmlsZSwgYXJncywgb3B0aW9ucyA9IHt9KQogIGdldCBzdGRpbigpCiAgZ2V0IHN0ZG91dCgpCiAgZ2V0IHN0ZGVycigpCiAgZ2V0IHdhaXRpbmcoKQogIHdhaXQoKQpGZXRjaFVSTCh1cmwsIG9wdGlvbnMgPSB7fSkKKGFjYywgW2ssIHZdKSA9PgpkYXRhID0+CmRhdGEgPT4KU2hlbGwoY21kKQAAAAAAAAAAvSMAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					2748,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/os-helpers.js",
						"symkeys":
						[
							[
								340,
								372
							],
							[
								795,
								821
							],
							[
								1151,
								1178
							],
							[
								1189,
								1203
							],
							[
								1420,
								1435
							],
							[
								1461,
								1480
							]
						],
						"symlist":
						[
							" function ExecTool(cmd, ...args)",
							" function Execute(...args)",
							" function URLWorker(script)",
							"dataURL = s =>",
							"(push, stop) =>",
							"postMessage: msg =>"
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				],
				[
					2749,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
						"symkeys":
						[
							[
								952,
								966
							],
							[
								1046,
								1069
							],
							[
								1207,
								1224
							],
							[
								1265,
								1282
							],
							[
								1315,
								1324
							],
							[
								1358,
								1368
							],
							[
								1402,
								1412
							],
							[
								1447,
								1458
							],
							[
								1492,
								1502
							],
							[
								1537,
								1548
							],
							[
								1585,
								1598
							],
							[
								1636,
								1650
							],
							[
								1686,
								1698
							],
							[
								1734,
								1746
							],
							[
								1799,
								1819
							],
							[
								1866,
								1887
							],
							[
								1929,
								1945
							],
							[
								1999,
								2018
							],
							[
								2053,
								2069
							],
							[
								2193,
								2227
							],
							[
								2250,
								2282
							],
							[
								2305,
								2348
							],
							[
								4177,
								4196
							],
							[
								4294,
								4310
							],
							[
								4372,
								4390
							],
							[
								4454,
								4473
							],
							[
								4538,
								4547
							],
							[
								4602,
								4619
							],
							[
								4682,
								4699
							],
							[
								4762,
								4776
							],
							[
								4836,
								4851
							],
							[
								4912,
								4927
							],
							[
								4988,
								4996
							],
							[
								5050,
								5062
							],
							[
								5120,
								5130
							],
							[
								5186,
								5197
							],
							[
								5254,
								5262
							],
							[
								5316,
								5338
							],
							[
								5406,
								5421
							],
							[
								5482,
								5504
							],
							[
								5572,
								5588
							],
							[
								5650,
								5666
							],
							[
								5728,
								5740
							],
							[
								5798,
								5810
							],
							[
								5868,
								5881
							],
							[
								5940,
								5958
							],
							[
								6016,
								6034
							],
							[
								6098,
								6120
							],
							[
								6188,
								6215
							],
							[
								6288,
								6305
							],
							[
								6362,
								6379
							],
							[
								6436,
								6453
							],
							[
								6500,
								6516
							],
							[
								6599,
								6615
							],
							[
								6687,
								6703
							],
							[
								6775,
								6792
							],
							[
								6849,
								6869
							],
							[
								6928,
								6948
							],
							[
								7091,
								7110
							],
							[
								7186,
								7193
							],
							[
								7222,
								7242
							],
							[
								7321,
								7336
							],
							[
								7397,
								7423
							],
							[
								7494,
								7510
							],
							[
								7566,
								7579
							],
							[
								7647,
								7665
							],
							[
								7738,
								7751
							],
							[
								7807,
								7821
							],
							[
								7923,
								7949
							],
							[
								7995,
								8016
							],
							[
								8175,
								8200
							],
							[
								8285,
								8327
							],
							[
								8461,
								8501
							],
							[
								11421,
								11464
							],
							[
								11863,
								11898
							],
							[
								12054,
								12072
							],
							[
								12102,
								12107
							],
							[
								12197,
								12224
							],
							[
								12343,
								12378
							],
							[
								12439,
								12443
							],
							[
								12459,
								12463
							],
							[
								12490,
								12499
							],
							[
								12662,
								12691
							],
							[
								12771,
								12799
							],
							[
								12928,
								12960
							],
							[
								13202,
								13232
							],
							[
								13256,
								13272
							],
							[
								13273,
								13296
							],
							[
								13393,
								13428
							],
							[
								13452,
								13468
							],
							[
								13469,
								13492
							],
							[
								13589,
								13622
							],
							[
								13672,
								13695
							],
							[
								13789,
								13822
							],
							[
								14354,
								14366
							],
							[
								14401,
								14412
							],
							[
								14479,
								14500
							],
							[
								14536,
								14547
							],
							[
								14793,
								14799
							],
							[
								14812,
								14828
							],
							[
								15028,
								15033
							],
							[
								15047,
								15056
							],
							[
								15083,
								15106
							],
							[
								15140,
								15153
							],
							[
								15180,
								15185
							],
							[
								15226,
								15248
							],
							[
								15306,
								15312
							],
							[
								15328,
								15344
							],
							[
								15423,
								15450
							],
							[
								15495,
								15501
							],
							[
								15546,
								15558
							],
							[
								15588,
								15621
							],
							[
								15805,
								15823
							],
							[
								15906,
								15924
							],
							[
								16043,
								16061
							],
							[
								16236,
								16269
							],
							[
								16402,
								16415
							],
							[
								16535,
								16556
							],
							[
								16626,
								16644
							],
							[
								17087,
								17126
							],
							[
								17203,
								17220
							],
							[
								17343,
								17357
							],
							[
								17519,
								17536
							],
							[
								17677,
								17694
							],
							[
								17725,
								17742
							],
							[
								17842,
								17859
							],
							[
								18151,
								18165
							],
							[
								18211,
								18234
							],
							[
								18291,
								18298
							],
							[
								18316,
								18323
							],
							[
								18348,
								18373
							],
							[
								18433,
								18440
							],
							[
								18461,
								18468
							],
							[
								18498,
								18553
							],
							[
								18658,
								18665
							],
							[
								18819,
								18843
							],
							[
								18893,
								18897
							],
							[
								18928,
								18962
							],
							[
								18973,
								18986
							],
							[
								19045,
								19090
							],
							[
								19155,
								19166
							],
							[
								19186,
								19206
							],
							[
								19246,
								19275
							],
							[
								19299,
								19310
							],
							[
								19325,
								19337
							],
							[
								19384,
								19423
							],
							[
								19524,
								19528
							],
							[
								19567,
								19572
							],
							[
								19598,
								19604
							],
							[
								19633,
								19639
							],
							[
								19732,
								19745
							],
							[
								19773,
								19786
							],
							[
								19912,
								19923
							],
							[
								20003,
								20063
							],
							[
								20133,
								20150
							],
							[
								20211,
								20235
							],
							[
								20310,
								20337
							],
							[
								20558,
								20578
							],
							[
								20608,
								20619
							],
							[
								20718,
								20753
							],
							[
								20793,
								20811
							],
							[
								20989,
								21010
							],
							[
								21034,
								21044
							],
							[
								21080,
								21109
							],
							[
								21165,
								21175
							],
							[
								21226,
								21231
							],
							[
								21288,
								21301
							],
							[
								21374,
								21404
							],
							[
								21943,
								21999
							],
							[
								22160,
								22224
							],
							[
								22372,
								22423
							],
							[
								23090,
								23152
							],
							[
								23334,
								23359
							],
							[
								23456,
								23481
							],
							[
								23594,
								23663
							],
							[
								23752,
								23774
							],
							[
								23808,
								23819
							],
							[
								23842,
								23864
							],
							[
								24106,
								24178
							],
							[
								24281,
								24352
							],
							[
								24448,
								24499
							],
							[
								24671,
								24718
							],
							[
								24785,
								24828
							],
							[
								24958,
								25015
							],
							[
								25109,
								25115
							],
							[
								25129,
								25135
							],
							[
								25439,
								25473
							],
							[
								25780,
								25824
							],
							[
								25991,
								26025
							],
							[
								26091,
								26127
							],
							[
								26202,
								26219
							],
							[
								26540,
								26585
							],
							[
								26719,
								26732
							],
							[
								26830,
								26843
							],
							[
								26917,
								26960
							],
							[
								26961,
								26980
							],
							[
								26995,
								26999
							],
							[
								27122,
								27142
							],
							[
								27195,
								27218
							],
							[
								27298,
								27318
							],
							[
								27400,
								27418
							],
							[
								27561,
								27579
							],
							[
								27652,
								27684
							],
							[
								27712,
								27738
							],
							[
								28056,
								28088
							],
							[
								28121,
								28137
							],
							[
								28152,
								28159
							],
							[
								28185,
								28201
							],
							[
								28240,
								28261
							],
							[
								28301,
								28314
							],
							[
								28365,
								28386
							],
							[
								28555,
								28583
							],
							[
								28802,
								28819
							],
							[
								28820,
								28829
							],
							[
								28881,
								28898
							],
							[
								28899,
								28908
							],
							[
								28968,
								28985
							],
							[
								28986,
								29009
							],
							[
								29065,
								29089
							],
							[
								31716,
								31744
							],
							[
								32175,
								32179
							],
							[
								32307,
								32320
							],
							[
								32636,
								32648
							],
							[
								32911,
								32924
							],
							[
								33029,
								33043
							],
							[
								33936,
								33964
							],
							[
								34080,
								34093
							],
							[
								34205,
								34229
							],
							[
								34322,
								34356
							],
							[
								34477,
								34516
							],
							[
								34563,
								34600
							],
							[
								34647,
								34674
							],
							[
								34685,
								34701
							],
							[
								34759,
								34781
							],
							[
								34814,
								34824
							],
							[
								34873,
								34885
							],
							[
								35167,
								35177
							],
							[
								35252,
								35264
							],
							[
								35542,
								35568
							],
							[
								35818,
								35866
							],
							[
								35914,
								36026
							],
							[
								36131,
								36154
							],
							[
								36293,
								36325
							],
							[
								36638,
								36692
							],
							[
								37050,
								37102
							],
							[
								37244,
								37260
							],
							[
								37367,
								37378
							],
							[
								37536,
								37540
							],
							[
								37774,
								37807
							],
							[
								37921,
								37973
							],
							[
								38167,
								38249
							],
							[
								38409,
								38419
							],
							[
								38437,
								38450
							],
							[
								38627,
								38671
							],
							[
								38987,
								39023
							],
							[
								39180,
								39196
							],
							[
								39214,
								39236
							],
							[
								39349,
								39355
							],
							[
								39459,
								39472
							],
							[
								41111,
								41149
							],
							[
								41249,
								41265
							],
							[
								41338,
								41382
							],
							[
								41741,
								41761
							],
							[
								41961,
								42003
							],
							[
								42198,
								42229
							],
							[
								42279,
								42321
							],
							[
								42441,
								42465
							],
							[
								42723,
								42733
							],
							[
								42786,
								42790
							],
							[
								42829,
								42860
							],
							[
								42871,
								42888
							],
							[
								43029,
								43063
							],
							[
								43301,
								43320
							],
							[
								43358,
								43380
							],
							[
								43492,
								43514
							],
							[
								43626,
								43661
							],
							[
								43709,
								43736
							],
							[
								43827,
								43865
							],
							[
								44074,
								44122
							],
							[
								44702,
								44731
							],
							[
								45178,
								45218
							],
							[
								45313,
								45340
							],
							[
								45397,
								45424
							],
							[
								45627,
								45641
							],
							[
								45690,
								45696
							],
							[
								45737,
								45803
							],
							[
								45805,
								45809
							],
							[
								45967,
								45974
							],
							[
								46066,
								46076
							],
							[
								46187,
								46196
							],
							[
								46302,
								46328
							],
							[
								46461,
								46492
							],
							[
								46667,
								46686
							],
							[
								46728,
								46736
							],
							[
								46765,
								46799
							],
							[
								46943,
								46988
							],
							[
								47064,
								47074
							],
							[
								47125,
								47135
							],
							[
								47161,
								47171
							],
							[
								47199,
								47224
							],
							[
								47355,
								47380
							],
							[
								47478,
								47513
							],
							[
								47566,
								47600
							],
							[
								47682,
								47718
							],
							[
								47839,
								47843
							],
							[
								47870,
								47874
							],
							[
								47913,
								47917
							],
							[
								47945,
								47949
							],
							[
								47978,
								48006
							],
							[
								48136,
								48140
							],
							[
								48197,
								48228
							],
							[
								48567,
								48603
							],
							[
								48852,
								48882
							],
							[
								49018,
								49022
							],
							[
								49306,
								49333
							],
							[
								49377,
								49386
							],
							[
								49438,
								49450
							],
							[
								49592,
								49604
							],
							[
								49731,
								49756
							],
							[
								49796,
								49822
							],
							[
								50074,
								50098
							],
							[
								50291,
								50314
							],
							[
								50440,
								50606
							],
							[
								50615,
								50672
							],
							[
								50679,
								50720
							],
							[
								50969,
								50989
							],
							[
								51191,
								51206
							],
							[
								51492,
								51515
							],
							[
								51720,
								51738
							],
							[
								51951,
								51965
							],
							[
								52026,
								52038
							],
							[
								52136,
								52145
							],
							[
								52421,
								52437
							],
							[
								52872,
								52908
							],
							[
								53003,
								53012
							],
							[
								53188,
								53199
							],
							[
								53210,
								53218
							],
							[
								53267,
								53279
							],
							[
								53524,
								53536
							],
							[
								53717,
								53743
							],
							[
								53762,
								53766
							],
							[
								53853,
								53877
							],
							[
								53955,
								53984
							],
							[
								54038,
								54069
							],
							[
								54076,
								54079
							],
							[
								54123,
								54136
							],
							[
								54236,
								54307
							],
							[
								54333,
								54359
							],
							[
								54505,
								54540
							],
							[
								54730,
								54757
							],
							[
								54867,
								54900
							],
							[
								55057,
								55108
							],
							[
								55478,
								55542
							],
							[
								55602,
								55617
							],
							[
								55683,
								55697
							],
							[
								55735,
								55758
							],
							[
								55950,
								55968
							],
							[
								56159,
								56229
							],
							[
								56378,
								56402
							],
							[
								56421,
								56429
							],
							[
								56465,
								56480
							],
							[
								56606,
								56619
							],
							[
								56774,
								56790
							],
							[
								56985,
								57011
							],
							[
								57026,
								57048
							],
							[
								57264,
								57268
							],
							[
								57454,
								57476
							],
							[
								57498,
								57508
							],
							[
								57526,
								57539
							],
							[
								57663,
								57685
							],
							[
								57707,
								57717
							],
							[
								57735,
								57748
							],
							[
								57854,
								57876
							],
							[
								57902,
								57912
							],
							[
								57930,
								57943
							],
							[
								57979,
								58001
							],
							[
								58022,
								58032
							],
							[
								58050,
								58063
							],
							[
								58083,
								58124
							],
							[
								58413,
								58436
							],
							[
								58517,
								58539
							],
							[
								58613,
								58633
							],
							[
								58760,
								58771
							],
							[
								58804,
								58821
							],
							[
								58985,
								59004
							],
							[
								59039,
								59061
							],
							[
								59193,
								59214
							],
							[
								59352,
								59372
							],
							[
								59439,
								59462
							],
							[
								59538,
								59560
							],
							[
								59669,
								59693
							],
							[
								59750,
								59762
							],
							[
								59933,
								59951
							],
							[
								60008,
								60020
							],
							[
								60172,
								60195
							],
							[
								60327,
								60343
							],
							[
								60390,
								60403
							],
							[
								60440,
								60507
							],
							[
								60543,
								60565
							],
							[
								60594,
								60604
							],
							[
								60620,
								60633
							],
							[
								60684,
								60697
							],
							[
								60764,
								60787
							],
							[
								60906,
								60928
							],
							[
								61016,
								61029
							],
							[
								61082,
								61098
							],
							[
								61136,
								61140
							],
							[
								61250,
								61287
							],
							[
								61298,
								61308
							],
							[
								61317,
								61346
							],
							[
								61563,
								61579
							],
							[
								61601,
								61612
							],
							[
								61667,
								61694
							],
							[
								61741,
								61759
							],
							[
								61833,
								61868
							],
							[
								61994,
								62015
							],
							[
								62049,
								62058
							],
							[
								62067,
								62075
							],
							[
								62118,
								62127
							],
							[
								62148,
								62157
							],
							[
								62168,
								62176
							],
							[
								62243,
								62252
							],
							[
								62284,
								62312
							],
							[
								62381,
								62400
							],
							[
								62607,
								62633
							],
							[
								62921,
								62943
							],
							[
								63088,
								63110
							],
							[
								63622,
								63672
							],
							[
								63836,
								63885
							],
							[
								63954,
								63961
							],
							[
								64050,
								64064
							],
							[
								64149,
								64159
							],
							[
								64265,
								64269
							],
							[
								64300,
								64320
							],
							[
								64376,
								64389
							],
							[
								64449,
								64461
							],
							[
								64601,
								64616
							],
							[
								65027,
								65065
							],
							[
								65247,
								65258
							],
							[
								65293,
								65314
							],
							[
								65383,
								65390
							],
							[
								65428,
								65458
							],
							[
								65480,
								65496
							],
							[
								65497,
								65517
							]
						],
						"symlist":
						[
							"sliceFn = x =>",
							"ArrayBuffer(start, end)",
							"SharedArrayBuffer",
							"Uint8ClampedArray",
							"Int8Array",
							"Uint8Array",
							"Int16Array",
							"Uint16Array",
							"Int32Array",
							"Uint32Array",
							"BigInt64Array",
							"BigUint64Array",
							"Float32Array",
							"Float64Array",
							"slice = (x, s, e) =>",
							"objectToString = o =>",
							"stringify = v =>",
							"formatNumber = n =>",
							"isNative = fn =>",
							"AsyncFunction = async function x()",
							"GeneratorFunction = function* ()",
							"AsyncGeneratorFunction = async function* ()",
							"isAnyArrayBuffer(v)",
							"isArrayBuffer(v)",
							"isBigInt64Array(v)",
							"isBigUint64Array(v)",
							"isDate(v)",
							"isFloat32Array(v)",
							"isFloat64Array(v)",
							"isInt8Array(v)",
							"isInt16Array(v)",
							"isInt32Array(v)",
							"isMap(v)",
							"isPromise(v)",
							"isProxy(v)",
							"isRegExp(v)",
							"isSet(v)",
							"isSharedArrayBuffer(v)",
							"isUint8Array(v)",
							"isUint8ClampedArray(v)",
							"isUint16Array(v)",
							"isUint32Array(v)",
							"isWeakMap(v)",
							"isWeakSet(v)",
							"isDataView(v)",
							"isBooleanObject(v)",
							"isAsyncFunction(v)",
							"isGeneratorFunction(v)",
							"isAsyncGeneratorFunction(v)",
							"isNumberObject(v)",
							"isBigIntObject(v)",
							"isSymbolObject(v)",
							"isNativeError(v)",
							"isMapIterator(v)",
							"isSetIterator(v)",
							"isStringObject(v)",
							"isArrayBufferView(v)",
							"isArgumentsObject(v)",
							"isBoxedPrimitive(v)",
							"ctor =>",
							"isGeneratorObject(v)",
							"isTypedArray(v)",
							"isModuleNamespaceObject(v)",
							"isConstructor(v)",
							"isIterable(v)",
							"isAsyncIterable(v)",
							"isIterator(v)",
							"isArrayLike(v)",
							" function hasBuiltIn(o, m)",
							" function isAsync(fn)",
							" function format(...args)",
							" function formatWithOptions(opts, ...args)",
							"function formatWithOptionsInternal(o, v)",
							" function assert(actual, expected, message)",
							" function setInterval(callback, ms)",
							" function start()",
							"() =>",
							" function clearInterval(id)",
							" function inherits(ctor, superCtor)",
							"ctor",
							"ctor",
							"superCtor",
							" function getConstructor(obj)",
							" function memoize(fn, cache)",
							" function Memoize(n, ...rest)",
							" function chain(first, ...fns)",
							" (acc, fn) =>",
							" function(...args)",
							" function chainRight(first, ...fns)",
							" (acc, fn) =>",
							" function(...args)",
							" function chainArray(tmp, ...fns)",
							"tmp = function(...args)",
							" function getset(target, ...args)",
							" key =>",
							"([k, v]) =>",
							" (key, value) =>",
							"([k, v]) =>",
							"key =>",
							" (key, value) =>",
							"() =>",
							" value =>",
							" function methods(obj)",
							"bind(...args)",
							"fn =>",
							"transform(read, write)",
							"key =>",
							" (key, value) =>",
							" function modifier(...args)",
							" fn =>",
							" newValue =>",
							" function getter(target, ...args)",
							"ret = (...argv) =>",
							"ret = (...argv) =>",
							"ret = (...argv) =>",
							" function setter(target, ...args)",
							" (...argv) =>",
							"ret = (key, value) =>",
							"ret = (...argv) =>",
							" function gettersetter(target, ...args)",
							"fn = (...args) =>",
							" (...args2) =>",
							"fn = (...args) =>",
							"fn = (...args) =>",
							"fn = (...args) =>",
							"fn = (...args) =>",
							" (...args2) =>",
							" function hasFn(target)",
							" key =>",
							" key =>",
							" function remover(target)",
							" key =>",
							" key =>",
							" function getOrCreate(target, create = () => ({}), set)",
							" key =>",
							" function hasGetSet(obj)",
							"m =>",
							" function getSetArgument(get, set)",
							" (...args) =>",
							" function wrapGetSet(getter, setter, ...args)",
							" prop =>",
							" (prop, value) =>",
							" function weakGetSet(...args)",
							" wref =>",
							" value =>",
							" function addremovehas(target, ...args)",
							"n =>",
							"el =>",
							" el =>",
							" el =>",
							" el =>",
							" el =>",
							"has = el =>",
							" function lookupObject(getset, instance = {}, handlers = {})",
							"get(target, prop)",
							"set(target, prop, value)",
							" function mapObject(target)",
							"set: (key, value) =>",
							"get: key =>",
							" function once(fn, thisArg, memoFn)",
							" function(...args)",
							" function waitFor(ms)",
							"resolve =>",
							" function waitCancellable(ms)",
							"resolve =>",
							"() =>",
							"cancel: () =>",
							" function define(obj, ...args)",
							" function defineGetter(obj, key, fn, enumerable = false)",
							" function defineGetterSetter(obj, key, g, s, enumerable = false)",
							" function defineGettersSetters(obj, gettersSetters)",
							" function* prototypeIterator(obj, pred = (obj, depth) => true)",
							" function pick(obj, keys)",
							" function omit(obj, keys)",
							" function keys(obj, start = 0, end = obj => obj === Object.prototype)",
							"pred = (obj, depth) =>",
							"end = () =>",
							"pred = (obj, depth) =>",
							" function entries(obj, start = 0, end = obj => obj === Object.prototype)",
							" function values(obj, start = 0, end = obj => obj === Object.prototype)",
							" function getMethodNames(obj, depth = 1, start = 0)",
							" function getMethods(obj, depth = 1, start = 0)",
							" function bindMethods(obj, methods, target)",
							" function properties(obj, options = { enumerable: true })",
							" fn =>",
							" fn =>",
							" function weakDefine(obj, ...args)",
							" function getConstructorChain(obj, ...range)",
							" function hasPrototype(obj, proto)",
							" function filter(seq, pred, thisArg)",
							"pred = (el, i) =>",
							" function filterKeys(r, needles, keep = true)",
							"pred = key =>",
							"(obj, key) =>",
							"curry = (f, arr = [], length = f.length) =>",
							" function(...args)",
							"a =>",
							"(min, max, value) =>",
							"generate = (fn, add) =>",
							"add = (item, gen) =>",
							" function(...args)",
							" function(...args)",
							" function* split(buf, ...points)",
							"splitAt = (b, pos, len) =>",
							" function uniquePred(cmp = null)",
							" (el, i, arr) =>",
							"item =>",
							" (el, i, arr) =>",
							"unique = (...args) =>",
							"(arr, cmp) =>",
							"function* unique(seq)",
							"getFunctionArguments = fn =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" (red, green, blue) =>",
							"function getAnsiStyles()",
							"value: (red, green, blue) =>",
							"c =>",
							"value: hex =>",
							"character =>",
							"value: hex =>",
							"value: code =>",
							"value: (red, green, blue) =>",
							"value: hex =>",
							" function stripAnsi(str)",
							" function padAnsi(str, n, s = ' ')",
							" function padStartAnsi(str, n, s = ' ')",
							" function padEndAnsi(str, n, s = ' ')",
							" function mapFunctional(fn)",
							" function* (arg)",
							" function map(...args)",
							"ret = a =>",
							"function* ()",
							"ret = a =>",
							"function* ()",
							" function randInt(...args)",
							" function randFloat(min, max, rng = Math.random)",
							" function randStr(n, set = '_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', rng = Math.random)",
							" function toBigInt(arg)",
							" function roundDigits(precision)",
							" function roundTo(value, prec, digits, type = 'round')",
							" function lazyProperty(obj, name, getter, opts = {})",
							"async function()",
							" function()",
							"v =>",
							" function replaceProperty(value)",
							" function lazyProperties(obj, gettersObj, opts = {})",
							" function observeProperties(target = {}, obj, fn = (prop, value) => {}, opts = {})",
							"get: () =>",
							"set: value =>",
							" function decorate(decorators, obj, ...args)",
							" function getOpt(options = {}, args)",
							"findOpt = arg =>",
							"([optname, option]) =>",
							"opt =>",
							"(acc, arg) =>",
							" function showHelp(opts, exitCode = 0)",
							"(acc, [name]) =>",
							" (acc, [name, [hasArg, fn, shortOpt]]) =>",
							" function isoDate(d)",
							" function toUnixTime(dateObj, utc = false)",
							" function unixTime(utc = false)",
							" function fromUnixTime(epoch, utc = false)",
							" function range(...args)",
							" (v, k) =>",
							"n =>",
							" function chunkArray(arr, size)",
							"fn = (a, v, i) =>",
							" function decodeHTMLEntities(text)",
							" (match, entity) =>",
							" function ucfirst(str)",
							" function lcfirst(str)",
							" function camelize(str, delim = '')",
							" (match, p1, p2, offset) =>",
							" function decamelize(str, delim = '-')",
							" function shorten(str, max = 40, suffix = '...')",
							" function* bytesToUTF8(bytes)",
							" function codePointsToString(codePoints)",
							" function bufferToString(b)",
							" function arraysInCommon(a)",
							"(itm, indx) =>",
							"arr =>",
							" function arrayFacade(proto, itemFn = (container, i) => container.",
							"(i))",
							"*keys()",
							"*entries()",
							"*values()",
							"forEach(callback, thisArg)",
							"reduce(callback, accu, thisArg)",
							" function mod(a, b)",
							"b : n =>",
							" function pushUnique(arr, ...args)",
							" function inserter(dest, next = (k, v) => {})",
							" (k, v) =>",
							" (k, v) =>",
							" (k, v) =>",
							"fn = function(key, value)",
							" function intersect(a, b)",
							" function symmetricDifference(a, b)",
							" function* partitionArray(a, size)",
							" function difference(a, b, includes)",
							"x =>",
							"x =>",
							"x =>",
							"x =>",
							" function intersection(a, b)",
							"x =>",
							" function union(a, b, equality)",
							" function partition(array, callback)",
							" function push(obj, ...values)",
							"v =>",
							" function repeater(n, what)",
							"n = () =>",
							"function* ()",
							"function* ()",
							" function repeat(n, what)",
							" function functionName(fn)",
							" function className(obj)",
							"isArrowFunction = fn =>",
							" function instrument( fn, log = (duration, name, args, ret) => console.log( `function '${name}'` + (ret !== undefined ? ` {= ${escape(ret + '').",
							"(0, 100) + '...'}}` : '') + ` timing: ${duration.",
							"(3)}ms` ), logInterval = 0 //1000 )",
							"async (args, ret) =>",
							" (args, ret) =>",
							"async function(...args)",
							" function(...args)",
							"newMap = () =>",
							"(...args) =>",
							"get(path)",
							"set(path, value)",
							"catchable = function Catchable(self)",
							"catchable",
							"function ()",
							"then(fn)",
							"(...args) =>",
							"(...args) =>",
							" function isNumeric(value)",
							"v =>",
							" function isIndex(value)",
							" function numericIndex(value)",
							" function histogram(arr, out = ",
							"())",
							"incr = key =>",
							" function propertyLookupHandlers(getter = key => null, setter, thisObj)",
							"get(target, key, receiver)",
							".set = function(target, key, value)",
							".ownKeys = function(target)",
							" function propertyLookup(...args)",
							" function abbreviate(str, max = 40, suffix = '...')",
							" function tryFunction(fn, resolve = a => a, reject = () => null)",
							"resolve = () =>",
							"reject = () =>",
							"async function(...args)",
							" function(...args)",
							" function tryCatch(fn, resolve = a => a, reject = () => null, ...args)",
							" function mapAdapter(fn)",
							"get(key)",
							"set(key, value)",
							".keys = () =>",
							".entries = () =>",
							" function mapFunction(map)",
							"fn = function(...args)",
							"m =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".update = function(key, fn = (k, v) => v)",
							".entries = function* ()",
							".values = function* ()",
							".keys = function* ()",
							" function()",
							"([key, value]) =>",
							".keys = async () =>",
							".entries = async () =>",
							".values = async () =>",
							".keys = function* ()",
							".entries = function* ()",
							".values = function* ()",
							".filter = function(pred)",
							"function* ()",
							".map = function(t)",
							"function* ()",
							".forEach = function(fn)",
							".delete = key =>",
							".has = key =>",
							" function mapWrapper(map, toKey = key => key, fromKey = key => key)",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".keys = () =>",
							".entries = function* ()",
							".values = function* ()",
							".has = key =>",
							".delete = key =>",
							"m =>",
							" function weakMapper(createFn, map = ",
							"(), hitFn)",
							"self = function(obj, ...args)",
							".set = (k, v) =>",
							".get = k =>",
							" function wrapGenerator(fn)",
							" function(...args)",
							" function wrapGeneratorMethods(obj)",
							" function isBrowser()",
							" () =>",
							" w =>",
							" () =>",
							" () =>",
							" d =>",
							" () =>",
							" function startInteractive()",
							"function* (re, str)",
							" function indexOf(...args)",
							" (what, offset = 0) =>",
							" (what, offset = 0) =>",
							" function* searchAll(haystack, needle, offset = 0)",
							" function bindProperties(obj, target, props, gen)",
							"name =>",
							"(acc, name) =>",
							" p => v =>",
							"k =>",
							" (a, [k, v]) =>",
							" (...args) =>",
							"(...args) =>",
							" (a, k) =>",
							" function predicate(fn_or_regex, pred)",
							"fn = arg =>",
							".valueOf = function()",
							" arg =>",
							" function transformer(a, ...l)",
							" (acc, fn) =>",
							" function(...v)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABwAAAARXhlY1Rvb2woY21kLCAuLi5hcmdzKQpFeGVjdXRlKC4uLmFyZ3MpClVSTFdvcmtlcihzY3JpcHQpCiAgZGF0YVVSTCA9IHMgPT4KKHB1c2gsIHN0b3ApID0+CiAgcG9zdE1lc3NhZ2U6IG1zZyA9PgAAAAAAAAAAvSMAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					2750,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				],
				[
					2751,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/misc.js",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					2752,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
						"symkeys":
						[
							[
								952,
								966
							],
							[
								1046,
								1069
							],
							[
								1207,
								1224
							],
							[
								1265,
								1282
							],
							[
								1315,
								1324
							],
							[
								1358,
								1368
							],
							[
								1402,
								1412
							],
							[
								1447,
								1458
							],
							[
								1492,
								1502
							],
							[
								1537,
								1548
							],
							[
								1585,
								1598
							],
							[
								1636,
								1650
							],
							[
								1686,
								1698
							],
							[
								1734,
								1746
							],
							[
								1799,
								1819
							],
							[
								1866,
								1887
							],
							[
								1929,
								1945
							],
							[
								1999,
								2018
							],
							[
								2053,
								2069
							],
							[
								2193,
								2227
							],
							[
								2250,
								2282
							],
							[
								2305,
								2348
							],
							[
								4177,
								4196
							],
							[
								4294,
								4310
							],
							[
								4372,
								4390
							],
							[
								4454,
								4473
							],
							[
								4538,
								4547
							],
							[
								4602,
								4619
							],
							[
								4682,
								4699
							],
							[
								4762,
								4776
							],
							[
								4836,
								4851
							],
							[
								4912,
								4927
							],
							[
								4988,
								4996
							],
							[
								5050,
								5062
							],
							[
								5120,
								5130
							],
							[
								5186,
								5197
							],
							[
								5254,
								5262
							],
							[
								5316,
								5338
							],
							[
								5406,
								5421
							],
							[
								5482,
								5504
							],
							[
								5572,
								5588
							],
							[
								5650,
								5666
							],
							[
								5728,
								5740
							],
							[
								5798,
								5810
							],
							[
								5868,
								5881
							],
							[
								5940,
								5958
							],
							[
								6016,
								6034
							],
							[
								6098,
								6120
							],
							[
								6188,
								6215
							],
							[
								6288,
								6305
							],
							[
								6362,
								6379
							],
							[
								6436,
								6453
							],
							[
								6500,
								6516
							],
							[
								6599,
								6615
							],
							[
								6687,
								6703
							],
							[
								6775,
								6792
							],
							[
								6849,
								6869
							],
							[
								6928,
								6948
							],
							[
								7091,
								7110
							],
							[
								7186,
								7193
							],
							[
								7222,
								7242
							],
							[
								7321,
								7336
							],
							[
								7397,
								7423
							],
							[
								7494,
								7510
							],
							[
								7566,
								7579
							],
							[
								7647,
								7665
							],
							[
								7738,
								7751
							],
							[
								7807,
								7821
							],
							[
								7923,
								7949
							],
							[
								7995,
								8016
							],
							[
								8175,
								8200
							],
							[
								8285,
								8327
							],
							[
								8461,
								8501
							],
							[
								11421,
								11464
							],
							[
								11863,
								11898
							],
							[
								12054,
								12072
							],
							[
								12102,
								12107
							],
							[
								12197,
								12224
							],
							[
								12343,
								12378
							],
							[
								12439,
								12443
							],
							[
								12459,
								12463
							],
							[
								12490,
								12499
							],
							[
								12662,
								12691
							],
							[
								12771,
								12799
							],
							[
								12928,
								12960
							],
							[
								13202,
								13232
							],
							[
								13256,
								13272
							],
							[
								13273,
								13296
							],
							[
								13393,
								13428
							],
							[
								13452,
								13468
							],
							[
								13469,
								13492
							],
							[
								13589,
								13622
							],
							[
								13672,
								13695
							],
							[
								13789,
								13822
							],
							[
								14354,
								14366
							],
							[
								14401,
								14412
							],
							[
								14479,
								14500
							],
							[
								14536,
								14547
							],
							[
								14793,
								14799
							],
							[
								14812,
								14828
							],
							[
								15028,
								15033
							],
							[
								15047,
								15056
							],
							[
								15083,
								15106
							],
							[
								15140,
								15153
							],
							[
								15180,
								15185
							],
							[
								15226,
								15248
							],
							[
								15306,
								15312
							],
							[
								15328,
								15344
							],
							[
								15423,
								15450
							],
							[
								15495,
								15501
							],
							[
								15546,
								15558
							],
							[
								15588,
								15621
							],
							[
								15805,
								15823
							],
							[
								15906,
								15924
							],
							[
								16043,
								16061
							],
							[
								16236,
								16269
							],
							[
								16402,
								16415
							],
							[
								16535,
								16556
							],
							[
								16626,
								16644
							],
							[
								17087,
								17126
							],
							[
								17203,
								17220
							],
							[
								17343,
								17357
							],
							[
								17519,
								17536
							],
							[
								17677,
								17694
							],
							[
								17725,
								17742
							],
							[
								17842,
								17859
							],
							[
								18151,
								18165
							],
							[
								18211,
								18234
							],
							[
								18291,
								18298
							],
							[
								18316,
								18323
							],
							[
								18348,
								18373
							],
							[
								18433,
								18440
							],
							[
								18461,
								18468
							],
							[
								18498,
								18553
							],
							[
								18658,
								18665
							],
							[
								18819,
								18843
							],
							[
								18893,
								18897
							],
							[
								18928,
								18962
							],
							[
								18973,
								18986
							],
							[
								19045,
								19090
							],
							[
								19155,
								19166
							],
							[
								19186,
								19206
							],
							[
								19246,
								19275
							],
							[
								19299,
								19310
							],
							[
								19325,
								19337
							],
							[
								19384,
								19423
							],
							[
								19524,
								19528
							],
							[
								19567,
								19572
							],
							[
								19598,
								19604
							],
							[
								19633,
								19639
							],
							[
								19732,
								19745
							],
							[
								19773,
								19786
							],
							[
								19912,
								19923
							],
							[
								20003,
								20063
							],
							[
								20133,
								20150
							],
							[
								20211,
								20235
							],
							[
								20310,
								20337
							],
							[
								20558,
								20578
							],
							[
								20608,
								20619
							],
							[
								20718,
								20753
							],
							[
								20793,
								20811
							],
							[
								20989,
								21010
							],
							[
								21034,
								21044
							],
							[
								21080,
								21109
							],
							[
								21165,
								21175
							],
							[
								21226,
								21231
							],
							[
								21288,
								21301
							],
							[
								21374,
								21404
							],
							[
								21943,
								21999
							],
							[
								22160,
								22224
							],
							[
								22372,
								22423
							],
							[
								23090,
								23152
							],
							[
								23334,
								23359
							],
							[
								23456,
								23481
							],
							[
								23594,
								23663
							],
							[
								23752,
								23774
							],
							[
								23808,
								23819
							],
							[
								23842,
								23864
							],
							[
								24106,
								24178
							],
							[
								24281,
								24352
							],
							[
								24448,
								24499
							],
							[
								24671,
								24718
							],
							[
								24785,
								24828
							],
							[
								24958,
								25015
							],
							[
								25109,
								25115
							],
							[
								25129,
								25135
							],
							[
								25439,
								25473
							],
							[
								25780,
								25824
							],
							[
								25991,
								26025
							],
							[
								26091,
								26127
							],
							[
								26202,
								26219
							],
							[
								26540,
								26585
							],
							[
								26719,
								26732
							],
							[
								26830,
								26843
							],
							[
								26917,
								26960
							],
							[
								26961,
								26980
							],
							[
								26995,
								26999
							],
							[
								27122,
								27142
							],
							[
								27195,
								27218
							],
							[
								27298,
								27318
							],
							[
								27400,
								27418
							],
							[
								27561,
								27579
							],
							[
								27652,
								27684
							],
							[
								27712,
								27738
							],
							[
								28056,
								28088
							],
							[
								28121,
								28137
							],
							[
								28152,
								28159
							],
							[
								28185,
								28201
							],
							[
								28240,
								28261
							],
							[
								28301,
								28314
							],
							[
								28365,
								28386
							],
							[
								28555,
								28583
							],
							[
								28802,
								28819
							],
							[
								28820,
								28829
							],
							[
								28881,
								28898
							],
							[
								28899,
								28908
							],
							[
								28968,
								28985
							],
							[
								28986,
								29009
							],
							[
								29065,
								29089
							],
							[
								31716,
								31744
							],
							[
								32175,
								32179
							],
							[
								32307,
								32320
							],
							[
								32636,
								32648
							],
							[
								32911,
								32924
							],
							[
								33029,
								33043
							],
							[
								33936,
								33964
							],
							[
								34080,
								34093
							],
							[
								34205,
								34229
							],
							[
								34322,
								34356
							],
							[
								34477,
								34516
							],
							[
								34563,
								34600
							],
							[
								34647,
								34674
							],
							[
								34685,
								34701
							],
							[
								34759,
								34781
							],
							[
								34814,
								34824
							],
							[
								34873,
								34885
							],
							[
								35167,
								35177
							],
							[
								35252,
								35264
							],
							[
								35542,
								35568
							],
							[
								35818,
								35866
							],
							[
								35914,
								36026
							],
							[
								36131,
								36154
							],
							[
								36293,
								36325
							],
							[
								36638,
								36692
							],
							[
								37050,
								37102
							],
							[
								37244,
								37260
							],
							[
								37367,
								37378
							],
							[
								37536,
								37540
							],
							[
								37774,
								37807
							],
							[
								37921,
								37973
							],
							[
								38167,
								38249
							],
							[
								38409,
								38419
							],
							[
								38437,
								38450
							],
							[
								38627,
								38671
							],
							[
								38987,
								39023
							],
							[
								39180,
								39196
							],
							[
								39214,
								39236
							],
							[
								39349,
								39355
							],
							[
								39459,
								39472
							],
							[
								41111,
								41149
							],
							[
								41249,
								41265
							],
							[
								41338,
								41382
							],
							[
								41741,
								41761
							],
							[
								41961,
								42003
							],
							[
								42198,
								42229
							],
							[
								42279,
								42321
							],
							[
								42441,
								42465
							],
							[
								42723,
								42733
							],
							[
								42786,
								42790
							],
							[
								42829,
								42860
							],
							[
								42871,
								42888
							],
							[
								43029,
								43063
							],
							[
								43301,
								43320
							],
							[
								43358,
								43380
							],
							[
								43492,
								43514
							],
							[
								43626,
								43661
							],
							[
								43709,
								43736
							],
							[
								43827,
								43865
							],
							[
								44074,
								44122
							],
							[
								44702,
								44731
							],
							[
								45178,
								45218
							],
							[
								45313,
								45340
							],
							[
								45397,
								45424
							],
							[
								45627,
								45641
							],
							[
								45690,
								45696
							],
							[
								45737,
								45803
							],
							[
								45805,
								45809
							],
							[
								45967,
								45974
							],
							[
								46066,
								46076
							],
							[
								46187,
								46196
							],
							[
								46302,
								46328
							],
							[
								46461,
								46492
							],
							[
								46667,
								46686
							],
							[
								46728,
								46736
							],
							[
								46765,
								46799
							],
							[
								46943,
								46988
							],
							[
								47064,
								47074
							],
							[
								47125,
								47135
							],
							[
								47161,
								47171
							],
							[
								47199,
								47224
							],
							[
								47355,
								47380
							],
							[
								47478,
								47513
							],
							[
								47566,
								47600
							],
							[
								47682,
								47718
							],
							[
								47839,
								47843
							],
							[
								47870,
								47874
							],
							[
								47913,
								47917
							],
							[
								47945,
								47949
							],
							[
								47978,
								48006
							],
							[
								48136,
								48140
							],
							[
								48197,
								48228
							],
							[
								48567,
								48603
							],
							[
								48852,
								48882
							],
							[
								49018,
								49022
							],
							[
								49306,
								49333
							],
							[
								49377,
								49386
							],
							[
								49438,
								49450
							],
							[
								49592,
								49604
							],
							[
								49731,
								49756
							],
							[
								49796,
								49822
							],
							[
								50074,
								50098
							],
							[
								50291,
								50314
							],
							[
								50440,
								50606
							],
							[
								50615,
								50672
							],
							[
								50679,
								50720
							],
							[
								50969,
								50989
							],
							[
								51191,
								51206
							],
							[
								51492,
								51515
							],
							[
								51720,
								51738
							],
							[
								51951,
								51965
							],
							[
								52026,
								52038
							],
							[
								52136,
								52145
							],
							[
								52421,
								52437
							],
							[
								52872,
								52908
							],
							[
								53003,
								53012
							],
							[
								53188,
								53199
							],
							[
								53210,
								53218
							],
							[
								53267,
								53279
							],
							[
								53524,
								53536
							],
							[
								53717,
								53743
							],
							[
								53762,
								53766
							],
							[
								53853,
								53877
							],
							[
								53955,
								53984
							],
							[
								54038,
								54069
							],
							[
								54076,
								54079
							],
							[
								54123,
								54136
							],
							[
								54236,
								54307
							],
							[
								54333,
								54359
							],
							[
								54505,
								54540
							],
							[
								54730,
								54757
							],
							[
								54867,
								54900
							],
							[
								55057,
								55108
							],
							[
								55478,
								55542
							],
							[
								55602,
								55617
							],
							[
								55683,
								55697
							],
							[
								55735,
								55758
							],
							[
								55950,
								55968
							],
							[
								56159,
								56229
							],
							[
								56378,
								56402
							],
							[
								56421,
								56429
							],
							[
								56465,
								56480
							],
							[
								56606,
								56619
							],
							[
								56774,
								56790
							],
							[
								56985,
								57011
							],
							[
								57026,
								57048
							],
							[
								57264,
								57268
							],
							[
								57454,
								57476
							],
							[
								57498,
								57508
							],
							[
								57526,
								57539
							],
							[
								57663,
								57685
							],
							[
								57707,
								57717
							],
							[
								57735,
								57748
							],
							[
								57854,
								57876
							],
							[
								57902,
								57912
							],
							[
								57930,
								57943
							],
							[
								57979,
								58001
							],
							[
								58022,
								58032
							],
							[
								58050,
								58063
							],
							[
								58083,
								58124
							],
							[
								58413,
								58436
							],
							[
								58517,
								58539
							],
							[
								58613,
								58633
							],
							[
								58760,
								58771
							],
							[
								58804,
								58821
							],
							[
								58985,
								59004
							],
							[
								59039,
								59061
							],
							[
								59193,
								59214
							],
							[
								59352,
								59372
							],
							[
								59439,
								59462
							],
							[
								59538,
								59560
							],
							[
								59669,
								59693
							],
							[
								59750,
								59762
							],
							[
								59933,
								59951
							],
							[
								60008,
								60020
							],
							[
								60172,
								60195
							],
							[
								60327,
								60343
							],
							[
								60390,
								60403
							],
							[
								60440,
								60507
							],
							[
								60543,
								60565
							],
							[
								60594,
								60604
							],
							[
								60620,
								60633
							],
							[
								60684,
								60697
							],
							[
								60764,
								60787
							],
							[
								60906,
								60928
							],
							[
								61016,
								61029
							],
							[
								61082,
								61098
							],
							[
								61136,
								61140
							],
							[
								61250,
								61287
							],
							[
								61298,
								61308
							],
							[
								61317,
								61346
							],
							[
								61563,
								61579
							],
							[
								61601,
								61612
							],
							[
								61667,
								61694
							],
							[
								61741,
								61759
							],
							[
								61833,
								61868
							],
							[
								61994,
								62015
							],
							[
								62049,
								62058
							],
							[
								62067,
								62075
							],
							[
								62118,
								62127
							],
							[
								62148,
								62157
							],
							[
								62168,
								62176
							],
							[
								62243,
								62252
							],
							[
								62284,
								62312
							],
							[
								62381,
								62400
							],
							[
								62607,
								62633
							],
							[
								62921,
								62943
							],
							[
								63088,
								63110
							],
							[
								63622,
								63672
							],
							[
								63836,
								63885
							],
							[
								63954,
								63961
							],
							[
								64050,
								64064
							],
							[
								64149,
								64159
							],
							[
								64265,
								64269
							],
							[
								64300,
								64320
							],
							[
								64376,
								64389
							],
							[
								64449,
								64461
							],
							[
								64601,
								64616
							],
							[
								65027,
								65065
							],
							[
								65247,
								65258
							],
							[
								65293,
								65314
							],
							[
								65383,
								65390
							],
							[
								65428,
								65458
							],
							[
								65480,
								65496
							],
							[
								65497,
								65517
							]
						],
						"symlist":
						[
							"sliceFn = x =>",
							"ArrayBuffer(start, end)",
							"SharedArrayBuffer",
							"Uint8ClampedArray",
							"Int8Array",
							"Uint8Array",
							"Int16Array",
							"Uint16Array",
							"Int32Array",
							"Uint32Array",
							"BigInt64Array",
							"BigUint64Array",
							"Float32Array",
							"Float64Array",
							"slice = (x, s, e) =>",
							"objectToString = o =>",
							"stringify = v =>",
							"formatNumber = n =>",
							"isNative = fn =>",
							"AsyncFunction = async function x()",
							"GeneratorFunction = function* ()",
							"AsyncGeneratorFunction = async function* ()",
							"isAnyArrayBuffer(v)",
							"isArrayBuffer(v)",
							"isBigInt64Array(v)",
							"isBigUint64Array(v)",
							"isDate(v)",
							"isFloat32Array(v)",
							"isFloat64Array(v)",
							"isInt8Array(v)",
							"isInt16Array(v)",
							"isInt32Array(v)",
							"isMap(v)",
							"isPromise(v)",
							"isProxy(v)",
							"isRegExp(v)",
							"isSet(v)",
							"isSharedArrayBuffer(v)",
							"isUint8Array(v)",
							"isUint8ClampedArray(v)",
							"isUint16Array(v)",
							"isUint32Array(v)",
							"isWeakMap(v)",
							"isWeakSet(v)",
							"isDataView(v)",
							"isBooleanObject(v)",
							"isAsyncFunction(v)",
							"isGeneratorFunction(v)",
							"isAsyncGeneratorFunction(v)",
							"isNumberObject(v)",
							"isBigIntObject(v)",
							"isSymbolObject(v)",
							"isNativeError(v)",
							"isMapIterator(v)",
							"isSetIterator(v)",
							"isStringObject(v)",
							"isArrayBufferView(v)",
							"isArgumentsObject(v)",
							"isBoxedPrimitive(v)",
							"ctor =>",
							"isGeneratorObject(v)",
							"isTypedArray(v)",
							"isModuleNamespaceObject(v)",
							"isConstructor(v)",
							"isIterable(v)",
							"isAsyncIterable(v)",
							"isIterator(v)",
							"isArrayLike(v)",
							" function hasBuiltIn(o, m)",
							" function isAsync(fn)",
							" function format(...args)",
							" function formatWithOptions(opts, ...args)",
							"function formatWithOptionsInternal(o, v)",
							" function assert(actual, expected, message)",
							" function setInterval(callback, ms)",
							" function start()",
							"() =>",
							" function clearInterval(id)",
							" function inherits(ctor, superCtor)",
							"ctor",
							"ctor",
							"superCtor",
							" function getConstructor(obj)",
							" function memoize(fn, cache)",
							" function Memoize(n, ...rest)",
							" function chain(first, ...fns)",
							" (acc, fn) =>",
							" function(...args)",
							" function chainRight(first, ...fns)",
							" (acc, fn) =>",
							" function(...args)",
							" function chainArray(tmp, ...fns)",
							"tmp = function(...args)",
							" function getset(target, ...args)",
							" key =>",
							"([k, v]) =>",
							" (key, value) =>",
							"([k, v]) =>",
							"key =>",
							" (key, value) =>",
							"() =>",
							" value =>",
							" function methods(obj)",
							"bind(...args)",
							"fn =>",
							"transform(read, write)",
							"key =>",
							" (key, value) =>",
							" function modifier(...args)",
							" fn =>",
							" newValue =>",
							" function getter(target, ...args)",
							"ret = (...argv) =>",
							"ret = (...argv) =>",
							"ret = (...argv) =>",
							" function setter(target, ...args)",
							" (...argv) =>",
							"ret = (key, value) =>",
							"ret = (...argv) =>",
							" function gettersetter(target, ...args)",
							"fn = (...args) =>",
							" (...args2) =>",
							"fn = (...args) =>",
							"fn = (...args) =>",
							"fn = (...args) =>",
							"fn = (...args) =>",
							" (...args2) =>",
							" function hasFn(target)",
							" key =>",
							" key =>",
							" function remover(target)",
							" key =>",
							" key =>",
							" function getOrCreate(target, create = () => ({}), set)",
							" key =>",
							" function hasGetSet(obj)",
							"m =>",
							" function getSetArgument(get, set)",
							" (...args) =>",
							" function wrapGetSet(getter, setter, ...args)",
							" prop =>",
							" (prop, value) =>",
							" function weakGetSet(...args)",
							" wref =>",
							" value =>",
							" function addremovehas(target, ...args)",
							"n =>",
							"el =>",
							" el =>",
							" el =>",
							" el =>",
							" el =>",
							"has = el =>",
							" function lookupObject(getset, instance = {}, handlers = {})",
							"get(target, prop)",
							"set(target, prop, value)",
							" function mapObject(target)",
							"set: (key, value) =>",
							"get: key =>",
							" function once(fn, thisArg, memoFn)",
							" function(...args)",
							" function waitFor(ms)",
							"resolve =>",
							" function waitCancellable(ms)",
							"resolve =>",
							"() =>",
							"cancel: () =>",
							" function define(obj, ...args)",
							" function defineGetter(obj, key, fn, enumerable = false)",
							" function defineGetterSetter(obj, key, g, s, enumerable = false)",
							" function defineGettersSetters(obj, gettersSetters)",
							" function* prototypeIterator(obj, pred = (obj, depth) => true)",
							" function pick(obj, keys)",
							" function omit(obj, keys)",
							" function keys(obj, start = 0, end = obj => obj === Object.prototype)",
							"pred = (obj, depth) =>",
							"end = () =>",
							"pred = (obj, depth) =>",
							" function entries(obj, start = 0, end = obj => obj === Object.prototype)",
							" function values(obj, start = 0, end = obj => obj === Object.prototype)",
							" function getMethodNames(obj, depth = 1, start = 0)",
							" function getMethods(obj, depth = 1, start = 0)",
							" function bindMethods(obj, methods, target)",
							" function properties(obj, options = { enumerable: true })",
							" fn =>",
							" fn =>",
							" function weakDefine(obj, ...args)",
							" function getConstructorChain(obj, ...range)",
							" function hasPrototype(obj, proto)",
							" function filter(seq, pred, thisArg)",
							"pred = (el, i) =>",
							" function filterKeys(r, needles, keep = true)",
							"pred = key =>",
							"(obj, key) =>",
							"curry = (f, arr = [], length = f.length) =>",
							" function(...args)",
							"a =>",
							"(min, max, value) =>",
							"generate = (fn, add) =>",
							"add = (item, gen) =>",
							" function(...args)",
							" function(...args)",
							" function* split(buf, ...points)",
							"splitAt = (b, pos, len) =>",
							" function uniquePred(cmp = null)",
							" (el, i, arr) =>",
							"item =>",
							" (el, i, arr) =>",
							"unique = (...args) =>",
							"(arr, cmp) =>",
							"function* unique(seq)",
							"getFunctionArguments = fn =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" (red, green, blue) =>",
							"function getAnsiStyles()",
							"value: (red, green, blue) =>",
							"c =>",
							"value: hex =>",
							"character =>",
							"value: hex =>",
							"value: code =>",
							"value: (red, green, blue) =>",
							"value: hex =>",
							" function stripAnsi(str)",
							" function padAnsi(str, n, s = ' ')",
							" function padStartAnsi(str, n, s = ' ')",
							" function padEndAnsi(str, n, s = ' ')",
							" function mapFunctional(fn)",
							" function* (arg)",
							" function map(...args)",
							"ret = a =>",
							"function* ()",
							"ret = a =>",
							"function* ()",
							" function randInt(...args)",
							" function randFloat(min, max, rng = Math.random)",
							" function randStr(n, set = '_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', rng = Math.random)",
							" function toBigInt(arg)",
							" function roundDigits(precision)",
							" function roundTo(value, prec, digits, type = 'round')",
							" function lazyProperty(obj, name, getter, opts = {})",
							"async function()",
							" function()",
							"v =>",
							" function replaceProperty(value)",
							" function lazyProperties(obj, gettersObj, opts = {})",
							" function observeProperties(target = {}, obj, fn = (prop, value) => {}, opts = {})",
							"get: () =>",
							"set: value =>",
							" function decorate(decorators, obj, ...args)",
							" function getOpt(options = {}, args)",
							"findOpt = arg =>",
							"([optname, option]) =>",
							"opt =>",
							"(acc, arg) =>",
							" function showHelp(opts, exitCode = 0)",
							"(acc, [name]) =>",
							" (acc, [name, [hasArg, fn, shortOpt]]) =>",
							" function isoDate(d)",
							" function toUnixTime(dateObj, utc = false)",
							" function unixTime(utc = false)",
							" function fromUnixTime(epoch, utc = false)",
							" function range(...args)",
							" (v, k) =>",
							"n =>",
							" function chunkArray(arr, size)",
							"fn = (a, v, i) =>",
							" function decodeHTMLEntities(text)",
							" (match, entity) =>",
							" function ucfirst(str)",
							" function lcfirst(str)",
							" function camelize(str, delim = '')",
							" (match, p1, p2, offset) =>",
							" function decamelize(str, delim = '-')",
							" function shorten(str, max = 40, suffix = '...')",
							" function* bytesToUTF8(bytes)",
							" function codePointsToString(codePoints)",
							" function bufferToString(b)",
							" function arraysInCommon(a)",
							"(itm, indx) =>",
							"arr =>",
							" function arrayFacade(proto, itemFn = (container, i) => container.",
							"(i))",
							"*keys()",
							"*entries()",
							"*values()",
							"forEach(callback, thisArg)",
							"reduce(callback, accu, thisArg)",
							" function mod(a, b)",
							"b : n =>",
							" function pushUnique(arr, ...args)",
							" function inserter(dest, next = (k, v) => {})",
							" (k, v) =>",
							" (k, v) =>",
							" (k, v) =>",
							"fn = function(key, value)",
							" function intersect(a, b)",
							" function symmetricDifference(a, b)",
							" function* partitionArray(a, size)",
							" function difference(a, b, includes)",
							"x =>",
							"x =>",
							"x =>",
							"x =>",
							" function intersection(a, b)",
							"x =>",
							" function union(a, b, equality)",
							" function partition(array, callback)",
							" function push(obj, ...values)",
							"v =>",
							" function repeater(n, what)",
							"n = () =>",
							"function* ()",
							"function* ()",
							" function repeat(n, what)",
							" function functionName(fn)",
							" function className(obj)",
							"isArrowFunction = fn =>",
							" function instrument( fn, log = (duration, name, args, ret) => console.log( `function '${name}'` + (ret !== undefined ? ` {= ${escape(ret + '').",
							"(0, 100) + '...'}}` : '') + ` timing: ${duration.",
							"(3)}ms` ), logInterval = 0 //1000 )",
							"async (args, ret) =>",
							" (args, ret) =>",
							"async function(...args)",
							" function(...args)",
							"newMap = () =>",
							"(...args) =>",
							"get(path)",
							"set(path, value)",
							"catchable = function Catchable(self)",
							"catchable",
							"function ()",
							"then(fn)",
							"(...args) =>",
							"(...args) =>",
							" function isNumeric(value)",
							"v =>",
							" function isIndex(value)",
							" function numericIndex(value)",
							" function histogram(arr, out = ",
							"())",
							"incr = key =>",
							" function propertyLookupHandlers(getter = key => null, setter, thisObj)",
							"get(target, key, receiver)",
							".set = function(target, key, value)",
							".ownKeys = function(target)",
							" function propertyLookup(...args)",
							" function abbreviate(str, max = 40, suffix = '...')",
							" function tryFunction(fn, resolve = a => a, reject = () => null)",
							"resolve = () =>",
							"reject = () =>",
							"async function(...args)",
							" function(...args)",
							" function tryCatch(fn, resolve = a => a, reject = () => null, ...args)",
							" function mapAdapter(fn)",
							"get(key)",
							"set(key, value)",
							".keys = () =>",
							".entries = () =>",
							" function mapFunction(map)",
							"fn = function(...args)",
							"m =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".update = function(key, fn = (k, v) => v)",
							".entries = function* ()",
							".values = function* ()",
							".keys = function* ()",
							" function()",
							"([key, value]) =>",
							".keys = async () =>",
							".entries = async () =>",
							".values = async () =>",
							".keys = function* ()",
							".entries = function* ()",
							".values = function* ()",
							".filter = function(pred)",
							"function* ()",
							".map = function(t)",
							"function* ()",
							".forEach = function(fn)",
							".delete = key =>",
							".has = key =>",
							" function mapWrapper(map, toKey = key => key, fromKey = key => key)",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".keys = () =>",
							".entries = function* ()",
							".values = function* ()",
							".has = key =>",
							".delete = key =>",
							"m =>",
							" function weakMapper(createFn, map = ",
							"(), hitFn)",
							"self = function(obj, ...args)",
							".set = (k, v) =>",
							".get = k =>",
							" function wrapGenerator(fn)",
							" function(...args)",
							" function wrapGeneratorMethods(obj)",
							" function isBrowser()",
							" () =>",
							" w =>",
							" () =>",
							" () =>",
							" d =>",
							" () =>",
							" function startInteractive()",
							"function* (re, str)",
							" function indexOf(...args)",
							" (what, offset = 0) =>",
							" (what, offset = 0) =>",
							" function* searchAll(haystack, needle, offset = 0)",
							" function bindProperties(obj, target, props, gen)",
							"name =>",
							"(acc, name) =>",
							" p => v =>",
							"k =>",
							" (a, [k, v]) =>",
							" (...args) =>",
							"(...args) =>",
							" (a, k) =>",
							" function predicate(fn_or_regex, pred)",
							"fn = arg =>",
							".valueOf = function()",
							" arg =>",
							" function transformer(a, ...l)",
							" (acc, fn) =>",
							" function(...v)"
						]
					},
					"AQAAAAAAAAAAAAAAvSMAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "quickjs/qjs-modules/lib/util.js",
			"settings":
			{
				"buffer_size": 65970,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					45,
					1,
					"insert",
					{
						"characters": "(opts.asyncc"
					},
					"DAAAADqRAAAAAAAAO5EAAAAAAAAAAAAAO5EAAAAAAAA8kQAAAAAAAAAAAAA8kQAAAAAAAD2RAAAAAAAAAAAAAD2RAAAAAAAAPpEAAAAAAAAAAAAAPpEAAAAAAAA/kQAAAAAAAAAAAAA/kQAAAAAAAECRAAAAAAAAAAAAAECRAAAAAAAAQZEAAAAAAAAAAAAAQZEAAAAAAABCkQAAAAAAAAAAAABCkQAAAAAAAEORAAAAAAAAAAAAAEORAAAAAAAARJEAAAAAAAAAAAAARJEAAAAAAABFkQAAAAAAAAAAAABFkQAAAAAAAEaRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOpEAAAAAAAA6kQAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEaRAAAAAAAAR5EAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARpEAAAAAAABGkQAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					2,
					"left_delete",
					null,
					"AgAAAEaRAAAAAAAARpEAAAAAAAABAAAAIEWRAAAAAAAARZEAAAAAAAABAAAAYw",
					"AQAAAAAAAAABAAAAR5EAAAAAAABHkQAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": " !=="
					},
					"BAAAAEWRAAAAAAAARpEAAAAAAAAAAAAARpEAAAAAAABHkQAAAAAAAAAAAABHkQAAAAAAAEiRAAAAAAAAAAAAAEiRAAAAAAAASZEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARZEAAAAAAABFkQAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": " false)"
					},
					"BwAAAEmRAAAAAAAASpEAAAAAAAAAAAAASpEAAAAAAABLkQAAAAAAAAAAAABLkQAAAAAAAEyRAAAAAAAAAAAAAEyRAAAAAAAATZEAAAAAAAAAAAAATZEAAAAAAABOkQAAAAAAAAAAAABOkQAAAAAAAE+RAAAAAAAAAAAAAE+RAAAAAAAAUJEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASZEAAAAAAABJkQAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": " &"
					},
					"AgAAAFCRAAAAAAAAUZEAAAAAAAAAAAAAUZEAAAAAAABSkQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUJEAAAAAAABQkQAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					3,
					"left_delete",
					null,
					"AwAAAFGRAAAAAAAAUZEAAAAAAAABAAAAJlCRAAAAAAAAUJEAAAAAAAABAAAAIE+RAAAAAAAAT5EAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAUpEAAAAAAABSkQAAAAAAAAAAAAAAAPC/"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": " //"
					},
					"AwAAAE+RAAAAAAAAUJEAAAAAAAAAAAAAUJEAAAAAAABRkQAAAAAAAAAAAABRkQAAAAAAAFKRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAT5EAAAAAAABPkQAAAAAAAAAAAAAAAPC/"
				],
				[
					53,
					2,
					"left_delete",
					null,
					"AgAAAFGRAAAAAAAAUZEAAAAAAAABAAAAL1CRAAAAAAAAUJEAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAAUpEAAAAAAABSkQAAAAAAAAAAAAAAAPC/"
				],
				[
					54,
					1,
					"insert",
					{
						"characters": "&&"
					},
					"AgAAAFCRAAAAAAAAUZEAAAAAAAAAAAAAUZEAAAAAAABSkQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUJEAAAAAAABQkQAAAAAAAAAAAAAAAPC/"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFKRAAAAAAAAU5EAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUpEAAAAAAABSkQAAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAHCRAAAAAAAAcZEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcJEAAAAAAABwkQAAAAAAAP///////+9/"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"color",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"prett",
				"JsPrettier: Format Code"
			],
			[
				"json",
				"Pretty JSON: Minify JSON"
			],
			[
				"jspr",
				"JsPrettier: Format Code"
			],
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"scheme",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"edit cu",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"install pac",
				"Package Control: Install Package"
			],
			[
				"prettier",
				"JsPrettier: Format Code"
			],
			[
				"list pack",
				"Package Control: List Packages"
			],
			[
				"edit ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"edit",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"outli",
				"Browse Mode: Outline (Right)"
			],
			[
				"debugger",
				"Preferences: Debugger Settings"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"INSTALL",
				"Package Control: Install Package"
			],
			[
				"",
				"Arithmetic"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"adap",
				"Debugger: Install Adapters"
			],
			[
				"install ada",
				"Debugger: Install Adapters"
			],
			[
				"adapter",
				"Debugger: Install Adapters"
			],
			[
				"debug",
				"Debugger: Install Adapters"
			],
			[
				"Package Control: remove",
				"Package Control: Remove Package"
			],
			[
				"debu",
				"Debugger: Install Adapters"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 289.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/lib/misc.js",
		"/home/roman/Projects/plot-cv/os-helpers.js",
		"/home/roman/Projects/plot-cv/io-helpers.js",
		"/home/roman/Projects/plot-cv/test-nanovg.js",
		"/home/roman/Projects/plot-cv/debugger.js",
		"/home/roman/Projects/plot-cv/debuggerprotocol.js",
		"/home/roman/Projects/plot-cv/debugger-client.js",
		"/home/roman/Projects/plot-cv/lib/async/helpers.js",
		"/home/roman/Projects/plot-cv/debugger-server.js",
		"/home/roman/Projects/plot-cv/ws-worker.js",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-debugger.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fs.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/process.js",
		"/home/roman/Projects/plot-cv/worker.js",
		"/home/roman/Projects/plot-cv/promise-worker.js",
		"/home/roman/Projects/plot-cv/test-worker.js",
		"/home/roman/Projects/plot-cv/workerScript.js",
		"/home/roman/Projects/plot-cv/load-ast.js",
		"/home/roman/Projects/plot-cv/test-worker2.js",
		"/home/roman/Projects/plot-cv/test-rpc.js",
		"/home/roman/Projects/plot-cv/myworker.js",
		"/home/roman/Projects/plot-cv/workertest.js",
		"/home/roman/Projects/plot-cv/httpd.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/qjsm.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/repl.js",
		"/home/roman/Projects/plot-cv/debugger.html",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-debugger-transport-unix.c",
		"/home/roman/Projects/plot-cv/lib/async/events.js",
		"/home/roman/Projects/plot-cv/lib/async/iterify.js",
		"/home/roman/Projects/plot-cv/lib/iterable.js",
		"/home/roman/Projects/plot-cv/lib/iterator.js",
		"/home/roman/Projects/plot-cv/fire.js",
		"/home/roman/Projects/plot-cv/lib/path.js",
		"/home/roman/Projects/plot-cv/lib/lexer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/defines.h",
		"/home/roman/Projects/c-utils/lib/http/http_read.c",
		"/home/roman/Projects/plot-cv/test-opencv.js",
		"/home/roman/Projects/plot-cv/ast-shell.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/cmake/FindLibwebsockets.cmake",
		"/home/roman/Projects/plot-cv/cli-helpers.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/extendMath.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/js/cvHighGUI.js",
		"/home/roman/Projects/plot-cv/lib/util.js",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/path.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/path.c",
		"/home/roman/Projects/plot-cv/test-video.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/extendArray.js",
		"/home/roman/Projects/plot-cv/test-image.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-nanovg/nanovg-qjs.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-imgui/imgui/imgui_widgets.cpp",
		"/home/roman/Projects/plot-cv/quickjs/qjs-nanovg/nanovg/src/nanovg.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-imgui/test-imgui.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-imgui/quickjs-imgui.cpp",
		"/home/roman/Projects/plot-cv/upload-server.js",
		"/home/roman/Projects/plot-cv/lib/repeater/repeater.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-nanovg/nanovg/obsolete/nanovg_gl3.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-nanovg/nanovg/src/nanovg_gl.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-nanovg/nanovg/src/nanovg.c",
		"/home/roman/Projects/plot-cv/draw-utils.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-imgui/imgui/imgui.cpp",
		"/home/roman/Projects/plot-cv/quickjs/qjs-imgui/imgui/backends/imgui_impl_glfw.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-imgui/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-imgui/imgui/imconfig.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-imgui/imgui/imgui.h",
		"/home/roman/Projects/plot-cv/qjs-opencv/js/cvUtils.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/js/cvVideo.js",
		"/home/roman/Projects/plot-cv/config.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/utils.h",
		"/home/roman/Projects/plot-cv/imgui/imconfig.h",
		"/home/roman/Projects/plot-cv/imgui/imgui_impl_glfw.h",
		"/home/roman/.config/sublime-text/Packages/User/Themes/ES6 Next.tmTheme",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/TODO",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-xml.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_dom.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/queue.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/getdents.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-blob.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/console.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/modules.sublime-project",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-mysql.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/property-enumeration.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/vector.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/vector.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-tree-walker.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-deep.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/property-enumeration.c",
		"/home/roman/Projects/assemblyscript/butterchurn/src/utils.js",
		"/home/roman/Projects/plot-cv/fire.es",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/src/minnet-client.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/asynciterator.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/src/minnet-asynciterator.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/remove-functions.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/src/minnet.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/jsutils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/jsutils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/src/minnet-asynciterator.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/src/minnet-client.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/session.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/buffer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/generator.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/wscli.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/js/rpc.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/tests/server.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/include/libwebsockets/lws-ws-state.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/minimal-examples/ws-client/minimal-ws-client-spam-tx-rx/minimal-ws-client.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/src/minnet-server-ws.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/src/minnet-request.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/src/minnet-response.c",
		"/home/roman/Projects/plot-cv/fire/.prettierrc",
		"/home/roman/Projects/plot-cv/fire/asconfig.json",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/misc.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/require.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/lexer/c.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/lexer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.h"
	],
	"find":
	{
		"height": 40.0
	},
	"find_in_files":
	{
		"height": 146.0,
		"where_history":
		[
			"/home/roman/Projects/plot-cv,*.js,*.c,*.h,CMakeLists.txt",
			"/home/roman/Projects/plot-cv/quickjs,*.c,*.h,CMakeLists.txt",
			"/home/roman/Projects/plot-cv/quickjs/qjs-nanovg,*.c,*.h,CMakeLists.txt",
			"/home/roman/Projects/plot-cv/quickjs/qjs-nanovg,*.c,*.h",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"breakpoints",
			"URLWork",
			"JS_NewCFunction",
			"AsyncSocket",
			"sck",
			"AsyncSocket",
			"ConnectDebugger",
			"consume",
			"Socket",
			"DebuggerProtocol",
			"dbg",
			"DebuggerProtocol.read",
			"read",
			"EventEmitter",
			"DebuggerProto",
			"DebuggerProtocol.read",
			"['\"]ws.send",
			"ws.send",
			"ws.sedn",
			"Initiate",
			"rand\\(",
			"\\bdbg\\b",
			"dbg =",
			"child =",
			"ws\\.child",
			"ws\\.",
			"iter",
			"StartDebugger",
			"ws\\.",
			"DebuggerProtocol",
			"Util",
			"makeURL",
			"TokenizeJS",
			"randInt",
			"waitpid",
			"port",
			"lsgs",
			"lstore",
			"id",
			"uuid",
			"save",
			"config\\b",
			"config",
			"181",
			"assert",
			"exited",
			"signalled",
			"checkChildExit",
			"signal",
			"signalName",
			"checkChildExit",
			"checkChild",
			"checkChildExited",
			"reader",
			"wait\\(",
			"\\.wait\\(",
			"wait",
			"waitpid",
			"WNOHANG",
			"Spawn",
			"strerror",
			"Spawn",
			"waitpid",
			"exited",
			"checkChildExited",
			"Exited",
			"Spawn",
			"StartDebugger",
			"reader",
			"fs\\.",
			"WebSocket",
			"checkChildExited",
			"StartDebugger",
			"Spawn\\(",
			"pipe\\(",
			"NewDebugger",
			"StartDebugger",
			"Spawn",
			"StartDebugger",
			"'start'",
			"Initiate",
			"9901",
			"js_debugger_wait_connection",
			"WebSocket",
			"onmessage",
			"\\bcwd\\b",
			"['\"`]Exception[ '\"`]",
			"\\bException\\b",
			"['\"`]Exception['\"`]",
			"\\bcwd\\b",
			"['\"`]Exception['\"`]",
			"'Exception'",
			"'Exception",
			"E",
			"'Exception",
			"Exception",
			"start",
			"ReadFile",
			"debugger",
			"createWS",
			"createServer",
			"'quit'",
			"LoadAS",
			"Worker",
			"Woriker",
			"os\\.",
			"worker.onmess",
			"keys\\(",
			"worker'",
			"createWS",
			"createServer",
			"server",
			"Wrote",
			"true",
			" printCsi",
			"printCsi",
			"'K'",
			"reader",
			"readerSync",
			"\\bWorker\\b",
			"Worker",
			"JS_Eval\\(",
			"LoadAST",
			"readAllSync",
			"enerator",
			"iterator",
			"ite",
			"terator"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"",
			"fopen",
			"stdout",
			"",
			"js_set_transform(ctx, argv[0],  t);",
			"for\\(uint32_t i",
			"",
			"JS_SetPropertyUint32(ctx, argv[0], i",
			"update"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9149,
						"regions":
						{
							"col_0000FFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										4375,
										4379
									],
									[
										4424,
										4428
									],
									[
										4526,
										4530
									]
								],
								"scope": "col_0000FFFF"
							},
							"col_0000FFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_0000FFFF_circle.png",
								"regions":
								[
									[
										4362,
										4362
									],
									[
										4402,
										4402
									],
									[
										4504,
										4504
									]
								],
								"scope": "col_gutter"
							},
							"col_008000FF":
							{
								"flags": 16,
								"regions":
								[
									[
										4368,
										4373
									],
									[
										4417,
										4422
									],
									[
										4519,
										4524
									]
								],
								"scope": "col_008000FF"
							},
							"col_008000FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_008000FF_circle.png",
								"regions":
								[
									[
										4362,
										4362
									],
									[
										4402,
										4402
									],
									[
										4504,
										4504
									]
								],
								"scope": "col_gutter"
							},
							"col_FF0000FF":
							{
								"flags": 16,
								"regions":
								[
									[
										4363,
										4366
									],
									[
										4412,
										4415
									],
									[
										4514,
										4517
									]
								],
								"scope": "col_FF0000FF"
							},
							"col_FF0000FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FF0000FF_circle.png",
								"regions":
								[
									[
										4362,
										4362
									],
									[
										4402,
										4402
									],
									[
										4504,
										4504
									]
								],
								"scope": "col_gutter"
							}
						},
						"selection":
						[
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"color_scheme": "Packages/Outline/outline-Dark.hidden-tmTheme",
							"current_file": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
							"function_name_status_row": 25,
							"outline_rename_mode": false,
							"symkeys":
							[
								[
									952,
									966
								],
								[
									1046,
									1069
								],
								[
									1207,
									1224
								],
								[
									1265,
									1282
								],
								[
									1315,
									1324
								],
								[
									1358,
									1368
								],
								[
									1402,
									1412
								],
								[
									1447,
									1458
								],
								[
									1492,
									1502
								],
								[
									1537,
									1548
								],
								[
									1585,
									1598
								],
								[
									1636,
									1650
								],
								[
									1686,
									1698
								],
								[
									1734,
									1746
								],
								[
									1799,
									1819
								],
								[
									1866,
									1887
								],
								[
									1929,
									1945
								],
								[
									1999,
									2018
								],
								[
									2053,
									2069
								],
								[
									2193,
									2227
								],
								[
									2250,
									2282
								],
								[
									2305,
									2348
								],
								[
									4177,
									4196
								],
								[
									4294,
									4310
								],
								[
									4372,
									4390
								],
								[
									4454,
									4473
								],
								[
									4538,
									4547
								],
								[
									4602,
									4619
								],
								[
									4682,
									4699
								],
								[
									4762,
									4776
								],
								[
									4836,
									4851
								],
								[
									4912,
									4927
								],
								[
									4988,
									4996
								],
								[
									5050,
									5062
								],
								[
									5120,
									5130
								],
								[
									5186,
									5197
								],
								[
									5254,
									5262
								],
								[
									5316,
									5338
								],
								[
									5406,
									5421
								],
								[
									5482,
									5504
								],
								[
									5572,
									5588
								],
								[
									5650,
									5666
								],
								[
									5728,
									5740
								],
								[
									5798,
									5810
								],
								[
									5868,
									5881
								],
								[
									5940,
									5958
								],
								[
									6016,
									6034
								],
								[
									6098,
									6120
								],
								[
									6188,
									6215
								],
								[
									6288,
									6305
								],
								[
									6362,
									6379
								],
								[
									6436,
									6453
								],
								[
									6500,
									6516
								],
								[
									6599,
									6615
								],
								[
									6687,
									6703
								],
								[
									6775,
									6792
								],
								[
									6849,
									6869
								],
								[
									6928,
									6948
								],
								[
									7091,
									7110
								],
								[
									7186,
									7193
								],
								[
									7222,
									7242
								],
								[
									7321,
									7336
								],
								[
									7397,
									7423
								],
								[
									7494,
									7510
								],
								[
									7566,
									7579
								],
								[
									7647,
									7665
								],
								[
									7738,
									7751
								],
								[
									7807,
									7821
								],
								[
									7923,
									7949
								],
								[
									7995,
									8016
								],
								[
									8175,
									8200
								],
								[
									8285,
									8327
								],
								[
									8461,
									8501
								],
								[
									11421,
									11464
								],
								[
									11863,
									11898
								],
								[
									12054,
									12072
								],
								[
									12102,
									12107
								],
								[
									12197,
									12224
								],
								[
									12343,
									12378
								],
								[
									12439,
									12443
								],
								[
									12459,
									12463
								],
								[
									12490,
									12499
								],
								[
									12662,
									12691
								],
								[
									12771,
									12799
								],
								[
									12928,
									12960
								],
								[
									13202,
									13232
								],
								[
									13256,
									13272
								],
								[
									13273,
									13296
								],
								[
									13393,
									13428
								],
								[
									13452,
									13468
								],
								[
									13469,
									13492
								],
								[
									13589,
									13622
								],
								[
									13672,
									13695
								],
								[
									13789,
									13822
								],
								[
									14354,
									14366
								],
								[
									14401,
									14412
								],
								[
									14479,
									14500
								],
								[
									14536,
									14547
								],
								[
									14793,
									14799
								],
								[
									14812,
									14828
								],
								[
									15028,
									15033
								],
								[
									15047,
									15056
								],
								[
									15083,
									15106
								],
								[
									15140,
									15153
								],
								[
									15180,
									15185
								],
								[
									15226,
									15248
								],
								[
									15306,
									15312
								],
								[
									15328,
									15344
								],
								[
									15423,
									15450
								],
								[
									15495,
									15501
								],
								[
									15546,
									15558
								],
								[
									15588,
									15621
								],
								[
									15805,
									15823
								],
								[
									15906,
									15924
								],
								[
									16043,
									16061
								],
								[
									16236,
									16269
								],
								[
									16402,
									16415
								],
								[
									16535,
									16556
								],
								[
									16626,
									16644
								],
								[
									17087,
									17126
								],
								[
									17203,
									17220
								],
								[
									17343,
									17357
								],
								[
									17519,
									17536
								],
								[
									17677,
									17694
								],
								[
									17725,
									17742
								],
								[
									17842,
									17859
								],
								[
									18151,
									18165
								],
								[
									18211,
									18234
								],
								[
									18291,
									18298
								],
								[
									18316,
									18323
								],
								[
									18348,
									18373
								],
								[
									18433,
									18440
								],
								[
									18461,
									18468
								],
								[
									18498,
									18553
								],
								[
									18658,
									18665
								],
								[
									18819,
									18843
								],
								[
									18893,
									18897
								],
								[
									18928,
									18962
								],
								[
									18973,
									18986
								],
								[
									19045,
									19090
								],
								[
									19155,
									19166
								],
								[
									19186,
									19206
								],
								[
									19246,
									19275
								],
								[
									19299,
									19310
								],
								[
									19325,
									19337
								],
								[
									19384,
									19423
								],
								[
									19524,
									19528
								],
								[
									19567,
									19572
								],
								[
									19598,
									19604
								],
								[
									19633,
									19639
								],
								[
									19732,
									19745
								],
								[
									19773,
									19786
								],
								[
									19912,
									19923
								],
								[
									20003,
									20063
								],
								[
									20133,
									20150
								],
								[
									20211,
									20235
								],
								[
									20310,
									20337
								],
								[
									20558,
									20578
								],
								[
									20608,
									20619
								],
								[
									20718,
									20753
								],
								[
									20793,
									20811
								],
								[
									20989,
									21010
								],
								[
									21034,
									21044
								],
								[
									21080,
									21109
								],
								[
									21165,
									21175
								],
								[
									21226,
									21231
								],
								[
									21288,
									21301
								],
								[
									21374,
									21404
								],
								[
									21943,
									21999
								],
								[
									22160,
									22224
								],
								[
									22372,
									22423
								],
								[
									23090,
									23152
								],
								[
									23334,
									23359
								],
								[
									23456,
									23481
								],
								[
									23594,
									23663
								],
								[
									23752,
									23774
								],
								[
									23808,
									23819
								],
								[
									23842,
									23864
								],
								[
									24106,
									24178
								],
								[
									24281,
									24352
								],
								[
									24448,
									24499
								],
								[
									24671,
									24718
								],
								[
									24785,
									24828
								],
								[
									24958,
									25015
								],
								[
									25109,
									25115
								],
								[
									25129,
									25135
								],
								[
									25439,
									25473
								],
								[
									25780,
									25824
								],
								[
									25991,
									26025
								],
								[
									26091,
									26127
								],
								[
									26202,
									26219
								],
								[
									26540,
									26585
								],
								[
									26719,
									26732
								],
								[
									26830,
									26843
								],
								[
									26917,
									26960
								],
								[
									26961,
									26980
								],
								[
									26995,
									26999
								],
								[
									27122,
									27142
								],
								[
									27195,
									27218
								],
								[
									27298,
									27318
								],
								[
									27400,
									27418
								],
								[
									27561,
									27579
								],
								[
									27652,
									27684
								],
								[
									27712,
									27738
								],
								[
									28056,
									28088
								],
								[
									28121,
									28137
								],
								[
									28152,
									28159
								],
								[
									28185,
									28201
								],
								[
									28240,
									28261
								],
								[
									28301,
									28314
								],
								[
									28365,
									28386
								],
								[
									28555,
									28583
								],
								[
									28802,
									28819
								],
								[
									28820,
									28829
								],
								[
									28881,
									28898
								],
								[
									28899,
									28908
								],
								[
									28968,
									28985
								],
								[
									28986,
									29009
								],
								[
									29065,
									29089
								],
								[
									31716,
									31744
								],
								[
									32175,
									32179
								],
								[
									32307,
									32320
								],
								[
									32636,
									32648
								],
								[
									32911,
									32924
								],
								[
									33029,
									33043
								],
								[
									33936,
									33964
								],
								[
									34080,
									34093
								],
								[
									34205,
									34229
								],
								[
									34322,
									34356
								],
								[
									34477,
									34516
								],
								[
									34563,
									34600
								],
								[
									34647,
									34674
								],
								[
									34685,
									34701
								],
								[
									34759,
									34781
								],
								[
									34814,
									34824
								],
								[
									34873,
									34885
								],
								[
									35167,
									35177
								],
								[
									35252,
									35264
								],
								[
									35542,
									35568
								],
								[
									35818,
									35866
								],
								[
									35914,
									36026
								],
								[
									36131,
									36154
								],
								[
									36293,
									36325
								],
								[
									36638,
									36692
								],
								[
									37050,
									37102
								],
								[
									37244,
									37260
								],
								[
									37367,
									37378
								],
								[
									37536,
									37540
								],
								[
									37774,
									37807
								],
								[
									37921,
									37973
								],
								[
									38167,
									38249
								],
								[
									38409,
									38419
								],
								[
									38437,
									38450
								],
								[
									38627,
									38671
								],
								[
									38987,
									39023
								],
								[
									39180,
									39196
								],
								[
									39214,
									39236
								],
								[
									39349,
									39355
								],
								[
									39459,
									39472
								],
								[
									41111,
									41149
								],
								[
									41249,
									41265
								],
								[
									41338,
									41382
								],
								[
									41741,
									41761
								],
								[
									41961,
									42003
								],
								[
									42198,
									42229
								],
								[
									42279,
									42321
								],
								[
									42441,
									42465
								],
								[
									42723,
									42733
								],
								[
									42786,
									42790
								],
								[
									42829,
									42860
								],
								[
									42871,
									42888
								],
								[
									43029,
									43063
								],
								[
									43301,
									43320
								],
								[
									43358,
									43380
								],
								[
									43492,
									43514
								],
								[
									43626,
									43661
								],
								[
									43709,
									43736
								],
								[
									43827,
									43865
								],
								[
									44074,
									44122
								],
								[
									44702,
									44731
								],
								[
									45178,
									45218
								],
								[
									45313,
									45340
								],
								[
									45397,
									45424
								],
								[
									45627,
									45641
								],
								[
									45690,
									45696
								],
								[
									45737,
									45803
								],
								[
									45805,
									45809
								],
								[
									45967,
									45974
								],
								[
									46066,
									46076
								],
								[
									46187,
									46196
								],
								[
									46302,
									46328
								],
								[
									46461,
									46492
								],
								[
									46667,
									46686
								],
								[
									46728,
									46736
								],
								[
									46765,
									46799
								],
								[
									46943,
									46988
								],
								[
									47064,
									47074
								],
								[
									47125,
									47135
								],
								[
									47161,
									47171
								],
								[
									47199,
									47224
								],
								[
									47355,
									47380
								],
								[
									47478,
									47513
								],
								[
									47566,
									47600
								],
								[
									47682,
									47718
								],
								[
									47839,
									47843
								],
								[
									47870,
									47874
								],
								[
									47913,
									47917
								],
								[
									47945,
									47949
								],
								[
									47978,
									48006
								],
								[
									48136,
									48140
								],
								[
									48197,
									48228
								],
								[
									48567,
									48603
								],
								[
									48852,
									48882
								],
								[
									49018,
									49022
								],
								[
									49306,
									49333
								],
								[
									49377,
									49386
								],
								[
									49438,
									49450
								],
								[
									49592,
									49604
								],
								[
									49731,
									49756
								],
								[
									49796,
									49822
								],
								[
									50074,
									50098
								],
								[
									50291,
									50314
								],
								[
									50440,
									50606
								],
								[
									50615,
									50672
								],
								[
									50679,
									50720
								],
								[
									50969,
									50989
								],
								[
									51191,
									51206
								],
								[
									51492,
									51515
								],
								[
									51720,
									51738
								],
								[
									51951,
									51965
								],
								[
									52026,
									52038
								],
								[
									52136,
									52145
								],
								[
									52421,
									52437
								],
								[
									52872,
									52908
								],
								[
									53003,
									53012
								],
								[
									53188,
									53199
								],
								[
									53210,
									53218
								],
								[
									53267,
									53279
								],
								[
									53524,
									53536
								],
								[
									53717,
									53743
								],
								[
									53762,
									53766
								],
								[
									53853,
									53877
								],
								[
									53955,
									53984
								],
								[
									54038,
									54069
								],
								[
									54076,
									54079
								],
								[
									54123,
									54136
								],
								[
									54236,
									54307
								],
								[
									54333,
									54359
								],
								[
									54505,
									54540
								],
								[
									54730,
									54757
								],
								[
									54867,
									54900
								],
								[
									55057,
									55108
								],
								[
									55478,
									55542
								],
								[
									55602,
									55617
								],
								[
									55683,
									55697
								],
								[
									55735,
									55758
								],
								[
									55950,
									55968
								],
								[
									56159,
									56229
								],
								[
									56378,
									56402
								],
								[
									56421,
									56429
								],
								[
									56465,
									56480
								],
								[
									56606,
									56619
								],
								[
									56774,
									56790
								],
								[
									56985,
									57011
								],
								[
									57026,
									57048
								],
								[
									57264,
									57268
								],
								[
									57454,
									57476
								],
								[
									57498,
									57508
								],
								[
									57526,
									57539
								],
								[
									57663,
									57685
								],
								[
									57707,
									57717
								],
								[
									57735,
									57748
								],
								[
									57854,
									57876
								],
								[
									57902,
									57912
								],
								[
									57930,
									57943
								],
								[
									57979,
									58001
								],
								[
									58022,
									58032
								],
								[
									58050,
									58063
								],
								[
									58083,
									58124
								],
								[
									58413,
									58436
								],
								[
									58517,
									58539
								],
								[
									58613,
									58633
								],
								[
									58760,
									58771
								],
								[
									58804,
									58821
								],
								[
									58985,
									59004
								],
								[
									59039,
									59061
								],
								[
									59193,
									59214
								],
								[
									59352,
									59372
								],
								[
									59439,
									59462
								],
								[
									59538,
									59560
								],
								[
									59669,
									59693
								],
								[
									59750,
									59762
								],
								[
									59933,
									59951
								],
								[
									60008,
									60020
								],
								[
									60172,
									60195
								],
								[
									60327,
									60343
								],
								[
									60390,
									60403
								],
								[
									60440,
									60507
								],
								[
									60543,
									60565
								],
								[
									60594,
									60604
								],
								[
									60620,
									60633
								],
								[
									60684,
									60697
								],
								[
									60764,
									60787
								],
								[
									60906,
									60928
								],
								[
									61016,
									61029
								],
								[
									61082,
									61098
								],
								[
									61136,
									61140
								],
								[
									61250,
									61287
								],
								[
									61298,
									61308
								],
								[
									61317,
									61346
								],
								[
									61563,
									61579
								],
								[
									61601,
									61612
								],
								[
									61667,
									61694
								],
								[
									61741,
									61759
								],
								[
									61833,
									61868
								],
								[
									61994,
									62015
								],
								[
									62049,
									62058
								],
								[
									62067,
									62075
								],
								[
									62118,
									62127
								],
								[
									62148,
									62157
								],
								[
									62168,
									62176
								],
								[
									62243,
									62252
								],
								[
									62284,
									62312
								],
								[
									62381,
									62400
								],
								[
									62607,
									62633
								],
								[
									62921,
									62943
								],
								[
									63088,
									63110
								],
								[
									63622,
									63672
								],
								[
									63836,
									63885
								],
								[
									63954,
									63961
								],
								[
									64050,
									64064
								],
								[
									64149,
									64159
								],
								[
									64265,
									64269
								],
								[
									64300,
									64320
								],
								[
									64376,
									64389
								],
								[
									64449,
									64461
								],
								[
									64601,
									64616
								],
								[
									65027,
									65065
								],
								[
									65247,
									65258
								],
								[
									65293,
									65314
								],
								[
									65383,
									65390
								],
								[
									65428,
									65458
								],
								[
									65480,
									65496
								],
								[
									65497,
									65517
								]
							],
							"symlist":
							[
								"  sliceFn = x =>",
								"ArrayBuffer(start, end)",
								"SharedArrayBuffer",
								"Uint8ClampedArray",
								"Int8Array",
								"Uint8Array",
								"Int16Array",
								"Uint16Array",
								"Int32Array",
								"Uint32Array",
								"BigInt64Array",
								"BigUint64Array",
								"Float32Array",
								"Float64Array",
								"  slice = (x, s, e) =>",
								"  objectToString = o =>",
								"  stringify = v =>",
								"  formatNumber = n =>",
								"  isNative = fn =>",
								"AsyncFunction = function x()",
								"GeneratorFunction = function*()",
								"AsyncGeneratorFunction = function*()",
								"  isAnyArrayBuffer(v)",
								"  isArrayBuffer(v)",
								"  isBigInt64Array(v)",
								"  isBigUint64Array(v)",
								"  isDate(v)",
								"  isFloat32Array(v)",
								"  isFloat64Array(v)",
								"  isInt8Array(v)",
								"  isInt16Array(v)",
								"  isInt32Array(v)",
								"  isMap(v)",
								"  isPromise(v)",
								"  isProxy(v)",
								"  isRegExp(v)",
								"  isSet(v)",
								"  isSharedArrayBuffer(v)",
								"  isUint8Array(v)",
								"  isUint8ClampedArray(v)",
								"  isUint16Array(v)",
								"  isUint32Array(v)",
								"  isWeakMap(v)",
								"  isWeakSet(v)",
								"  isDataView(v)",
								"  isBooleanObject(v)",
								"  isAsyncFunction(v)",
								"  isGeneratorFunction(v)",
								"  isAsyncGeneratorFunction(v)",
								"  isNumberObject(v)",
								"  isBigIntObject(v)",
								"  isSymbolObject(v)",
								"  isNativeError(v)",
								"  isMapIterator(v)",
								"  isSetIterator(v)",
								"  isStringObject(v)",
								"  isArrayBufferView(v)",
								"  isArgumentsObject(v)",
								"  isBoxedPrimitive(v)",
								"  ctor =>",
								"  isGeneratorObject(v)",
								"  isTypedArray(v)",
								"  isModuleNamespaceObject(v)",
								"  isConstructor(v)",
								"  isIterable(v)",
								"  isAsyncIterable(v)",
								"  isIterator(v)",
								"  isArrayLike(v)",
								"  hasBuiltIn(o, m)",
								"  isAsync(fn)",
								"  format(...args)",
								"  formatWithOptions(opts, ...args)",
								"  formatWithOptionsInternal(o, v)",
								"  assert(actual, expected, message)",
								"  setInterval(callback, ms)",
								"  start()",
								"() =>",
								"  clearInterval(id)",
								"  inherits(ctor, superCtor)",
								"  ctor",
								"  ctor",
								"  superCtor",
								"  getConstructor(obj)",
								"  memoize(fn, cache)",
								"Memoize(n, ...rest)",
								"  chain(first, ...fns)",
								"(acc, fn) =>",
								"function(...args)",
								"  chainRight(first, ...fns)",
								"(acc, fn) =>",
								"function(...args)",
								"  chainArray(tmp, ...fns)",
								"  tmp = function(...args)",
								"  getset(target, ...args)",
								"key =>",
								"([k, v]) =>",
								"(key, value) =>",
								"([k, v]) =>",
								"  key =>",
								"(key, value) =>",
								"() =>",
								"value =>",
								"  methods(obj)",
								"  bind(...args)",
								"  fn =>",
								"  transform(read, write)",
								"  key =>",
								"(key, value) =>",
								"  modifier(...args)",
								"fn =>",
								"newValue =>",
								"  getter(target, ...args)",
								"  ret = (...argv) =>",
								"  ret = (...argv) =>",
								"  ret = (...argv) =>",
								"  setter(target, ...args)",
								"(...argv) =>",
								"  ret = (key, value) =>",
								"  ret = (...argv) =>",
								"  gettersetter(target, ...args)",
								"  fn = (...args) =>",
								"(...args2) =>",
								"  fn = (...args) =>",
								"  fn = (...args) =>",
								"  fn = (...args) =>",
								"  fn = (...args) =>",
								"(...args2) =>",
								"  hasFn(target)",
								"key =>",
								"key =>",
								"  remover(target)",
								"key =>",
								"key =>",
								"  getOrCreate(target, create = () => ({}), set)",
								"key =>",
								"  hasGetSet(obj)",
								"  m =>",
								"  getSetArgument(get, set)",
								"(...args) =>",
								"  wrapGetSet(getter, setter, ...args)",
								"prop =>",
								"(prop, value) =>",
								"  weakGetSet(...args)",
								"wref =>",
								"value =>",
								"  addremovehas(target, ...args)",
								"  n =>",
								"  el =>",
								"el =>",
								"el =>",
								"el =>",
								"el =>",
								"  has = el =>",
								"  lookupObject(getset, instance = {}, handlers = {})",
								"  get(target, prop)",
								"  set(target, prop, value)",
								"  mapObject(target)",
								"  set: (key, value) =>",
								"  get: key =>",
								"  once(fn, thisArg, memoFn)",
								"function(...args)",
								"  waitFor(ms)",
								"  resolve =>",
								"  waitCancellable(ms)",
								"  resolve =>",
								"() =>",
								"  cancel: () =>",
								"  define(obj, ...args)",
								"  defineGetter(obj, key, fn, enumerable = false)",
								"  defineGetterSetter(obj, key, g, s, enumerable = false)",
								"  defineGettersSetters(obj, gettersSetters)",
								"  prototypeIterator(obj, pred = (obj, depth) => true)",
								"  pick(obj, keys)",
								"  omit(obj, keys)",
								"  keys(obj, start = 0, end = obj => obj === Object.prototype)",
								"  pred = (obj, depth) =>",
								"  end = () =>",
								"  pred = (obj, depth) =>",
								"  entries(obj, start = 0, end = obj => obj === Object.prototype)",
								"  values(obj, start = 0, end = obj => obj === Object.prototype)",
								"  getMethodNames(obj, depth = 1, start = 0)",
								"  getMethods(obj, depth = 1, start = 0)",
								"  bindMethods(obj, methods, target)",
								"  properties(obj, options = { enumerable: true })",
								"fn =>",
								"fn =>",
								"  weakDefine(obj, ...args)",
								"  getConstructorChain(obj, ...range)",
								"  hasPrototype(obj, proto)",
								"  filter(seq, pred, thisArg)",
								"  pred = (el, i) =>",
								"  filterKeys(r, needles, keep = true)",
								"  pred = key =>",
								"(obj, key) =>",
								"  curry = (f, arr = [], length = f.length) =>",
								"function(...args)",
								"  a =>",
								"(min, max, value) =>",
								"  generate = (fn, add) =>",
								"  add = (item, gen) =>",
								"function(...args)",
								"function(...args)",
								"  split(buf, ...points)",
								"  splitAt = (b, pos, len) =>",
								"  uniquePred(cmp = null)",
								"(el, i, arr) =>",
								"  item =>",
								"(el, i, arr) =>",
								"  unique = (...args) =>",
								"(arr, cmp) =>",
								"  unique(seq)",
								"  getFunctionArguments = fn =>",
								"(offset = 0) =>",
								"code =>",
								"(offset = 0) =>",
								"code =>",
								"(offset = 0) =>",
								"(red, green, blue) =>",
								"  getAnsiStyles()",
								"  value: (red, green, blue) =>",
								"  c =>",
								"  value: hex =>",
								"  character =>",
								"  value: hex =>",
								"  value: code =>",
								"  value: (red, green, blue) =>",
								"  value: hex =>",
								"  stripAnsi(str)",
								"  padAnsi(str, n, s = ' ')",
								"  padStartAnsi(str, n, s = ' ')",
								"  padEndAnsi(str, n, s = ' ')",
								"  mapFunctional(fn)",
								"(arg)",
								"  map(...args)",
								"  ret = a =>",
								"()",
								"  ret = a =>",
								"()",
								"  randInt(...args)",
								"  randFloat(min, max, rng = Math.random)",
								"  randStr(n, set = '_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', rng = Math.random)",
								"  toBigInt(arg)",
								"  roundDigits(precision)",
								"  roundTo(value, prec, digits, type = 'round')",
								"  lazyProperty(obj, name, getter, opts = {})",
								"  function()",
								"function()",
								"  v =>",
								"  replaceProperty(value)",
								"  lazyProperties(obj, gettersObj, opts = {})",
								"  observeProperties(target = {}, obj, fn = (prop, value) => {}, opts = {})",
								"  get: () =>",
								"  set: value =>",
								"  decorate(decorators, obj, ...args)",
								"  getOpt(options = {}, args)",
								"  findOpt = arg =>",
								"([optname, option]) =>",
								"  opt =>",
								"(acc, arg) =>",
								"  showHelp(opts, exitCode = 0)",
								"(acc, [name]) =>",
								"(acc, [name, [hasArg, fn, shortOpt]]) =>",
								"  isoDate(d)",
								"  toUnixTime(dateObj, utc = false)",
								"  unixTime(utc = false)",
								"  fromUnixTime(epoch, utc = false)",
								"  range(...args)",
								"(v, k) =>",
								"  n =>",
								"  chunkArray(arr, size)",
								"  fn = (a, v, i) =>",
								"  decodeHTMLEntities(text)",
								"(match, entity) =>",
								"  ucfirst(str)",
								"  lcfirst(str)",
								"  camelize(str, delim = '')",
								"(match, p1, p2, offset) =>",
								"  decamelize(str, delim = '-')",
								"  shorten(str, max = 40, suffix = '...')",
								"  bytesToUTF8(bytes)",
								"  codePointsToString(codePoints)",
								"  bufferToString(b)",
								"  arraysInCommon(a)",
								"(itm, indx) =>",
								"  arr =>",
								"  arrayFacade(proto, itemFn = (container, i) => container.",
								"(i))",
								"*keys()",
								"*entries()",
								"*values()",
								"  forEach(callback, thisArg)",
								"  reduce(callback, accu, thisArg)",
								"  mod(a, b)",
								"  b : n =>",
								"  pushUnique(arr, ...args)",
								"  inserter(dest, next = (k, v) => {})",
								"(k, v) =>",
								"(k, v) =>",
								"(k, v) =>",
								"  fn = function(key, value)",
								"  intersect(a, b)",
								"  symmetricDifference(a, b)",
								"  partitionArray(a, size)",
								"  difference(a, b, includes)",
								"  x =>",
								"  x =>",
								"  x =>",
								"  x =>",
								"  intersection(a, b)",
								"  x =>",
								"  union(a, b, equality)",
								"  partition(array, callback)",
								"  push(obj, ...values)",
								"  v =>",
								"  repeater(n, what)",
								"  n = () =>",
								"()",
								"()",
								"  repeat(n, what)",
								"  functionName(fn)",
								"  className(obj)",
								"  isArrowFunction = fn =>",
								"  instrument( fn, log = (duration, name, args, ret) => console.log( `function '${name}'` + (ret !== undefined ? ` {= ${escape(ret + '').",
								"(0, 100) + '...'}}` : '') + ` timing: ${duration.",
								"(3)}ms` ), logInterval = 0 //1000 )",
								"(args, ret) =>",
								"(args, ret) =>",
								"  function(...args)",
								"function(...args)",
								"  newMap = () =>",
								"(...args) =>",
								"  get(path)",
								"  set(path, value)",
								"  catchable = function Catchable(self)",
								"  catchable",
								"()",
								"  then(fn)",
								"(...args) =>",
								"(...args) =>",
								"  isNumeric(value)",
								"  v =>",
								"  isIndex(value)",
								"  numericIndex(value)",
								"  histogram(arr, out = ",
								"())",
								"  incr = key =>",
								"  propertyLookupHandlers(getter = key => null, setter, thisObj)",
								"  get(target, key, receiver)",
								"  .set = function(target, key, value)",
								"  .ownKeys = function(target)",
								"  propertyLookup(...args)",
								"  abbreviate(str, max = 40, suffix = '...')",
								"  tryFunction(fn, resolve = a => a, reject = () => null)",
								"  resolve = () =>",
								"  reject = () =>",
								"  function(...args)",
								"function(...args)",
								"  tryCatch(fn, resolve = a => a, reject = () => null, ...args)",
								"  mapAdapter(fn)",
								"  get(key)",
								"  set(key, value)",
								"  .keys = () =>",
								"  .entries = () =>",
								"  mapFunction(map)",
								"  fn = function(...args)",
								"  m =>",
								"  .set = (key, value) =>",
								"(k, v) =>",
								"  .get = key =>",
								"  .set = (key, value) =>",
								"(k, v) =>",
								"  .get = key =>",
								"  .set = (key, value) =>",
								"(k, v) =>",
								"  .get = key =>",
								"  .set = (key, value) =>",
								"(k, v) =>",
								"  .get = key =>",
								"  .update = function(key, fn = (k, v) => v)",
								"  .entries = function*()",
								"  .values = function*()",
								"  .keys = function*()",
								"function()",
								"([key, value]) =>",
								"  .keys = () =>",
								"  .entries = () =>",
								"  .values = () =>",
								"  .keys = function*()",
								"  .entries = function*()",
								"  .values = function*()",
								"  .filter = function(pred)",
								"()",
								"  .map = function(t)",
								"()",
								"  .forEach = function(fn)",
								"  .delete = key =>",
								"  .has = key =>",
								"  mapWrapper(map, toKey = key => key, fromKey = key => key)",
								"  .set = (key, value) =>",
								"(k, v) =>",
								"  .get = key =>",
								"  .keys = () =>",
								"  .entries = function*()",
								"  .values = function*()",
								"  .has = key =>",
								"  .delete = key =>",
								"  m =>",
								"  weakMapper(createFn, map = ",
								"(), hitFn)",
								"  self = function(obj, ...args)",
								"  .set = (k, v) =>",
								"  .get = k =>",
								"  wrapGenerator(fn)",
								"function(...args)",
								"  wrapGeneratorMethods(obj)",
								"  isBrowser()",
								"() =>",
								"w =>",
								"() =>",
								"() =>",
								"d =>",
								"() =>",
								"  startInteractive()",
								"(re, str)",
								"  indexOf(...args)",
								"(what, offset = 0) =>",
								"(what, offset = 0) =>",
								"  searchAll(haystack, needle, offset = 0)",
								"  bindProperties(obj, target, props, gen)",
								"  name =>",
								"(acc, name) =>",
								"p => v =>",
								"  k =>",
								"(a, [k, v]) =>",
								"(...args) =>",
								"(...args) =>",
								"(a, k) =>",
								"  predicate(fn_or_regex, pred)",
								"  fn = arg =>",
								"  .valueOf = function()",
								"arg =>",
								"  transformer(a, ...l)",
								"(acc, fn) =>",
								"function(...v)"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1683649359.69,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "quickjs/qjs-modules/lib/util.js",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 65970,
						"regions":
						{
							"col_0000FFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										29001,
										29005
									],
									[
										29055,
										29059
									],
									[
										29546,
										29550
									],
									[
										31736,
										31740
									],
									[
										31934,
										31938
									],
									[
										32165,
										32169
									],
									[
										33225,
										33229
									],
									[
										33338,
										33342
									],
									[
										33536,
										33540
									],
									[
										33620,
										33624
									],
									[
										33729,
										33733
									],
									[
										33956,
										33960
									],
									[
										34018,
										34022
									]
								],
								"scope": "col_0000FFFF"
							},
							"col_0000FFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_0000FFFF_circle.png",
								"regions":
								[
									[
										28986,
										28986
									],
									[
										29010,
										29010
									],
									[
										29540,
										29540
									],
									[
										31710,
										31710
									],
									[
										31896,
										31896
									],
									[
										32134,
										32134
									],
									[
										33213,
										33213
									],
									[
										33328,
										33328
									],
									[
										33526,
										33526
									],
									[
										33577,
										33577
									],
									[
										33690,
										33690
									],
									[
										33930,
										33930
									]
								],
								"scope": "col_gutter"
							},
							"col_008000FF":
							{
								"flags": 16,
								"regions":
								[
									[
										28994,
										28999
									],
									[
										29046,
										29051
									],
									[
										29499,
										29504
									],
									[
										31729,
										31734
									],
									[
										31915,
										31920
									],
									[
										31924,
										31929
									],
									[
										32158,
										32163
									],
									[
										33206,
										33211
									],
									[
										33315,
										33320
									],
									[
										33485,
										33490
									],
									[
										33613,
										33618
									],
									[
										33755,
										33760
									],
									[
										33949,
										33954
									],
									[
										34011,
										34016
									]
								],
								"scope": "col_008000FF"
							},
							"col_008000FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_008000FF_circle.png",
								"regions":
								[
									[
										28986,
										28986
									],
									[
										29010,
										29010
									],
									[
										29493,
										29493
									],
									[
										31710,
										31710
									],
									[
										31896,
										31896
									],
									[
										32134,
										32134
									],
									[
										33194,
										33194
									],
									[
										33305,
										33305
									],
									[
										33475,
										33475
									],
									[
										33577,
										33577
									],
									[
										33690,
										33690
									],
									[
										33930,
										33930
									]
								],
								"scope": "col_gutter"
							},
							"col_00FFFFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										29593,
										29597
									]
								],
								"scope": "col_00FFFFFF"
							},
							"col_00FFFFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_00FFFFFF_circle.png",
								"regions":
								[
									[
										29587,
										29587
									]
								],
								"scope": "col_gutter"
							},
							"col_010101FF":
							{
								"flags": 16,
								"regions":
								[
									[
										29455,
										29460
									],
									[
										30413,
										30418
									],
									[
										31835,
										31840
									]
								],
								"scope": "col_010101FF"
							},
							"col_010101FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_010101FF_circle.png",
								"regions":
								[
									[
										29449,
										29449
									],
									[
										30395,
										30395
									],
									[
										31824,
										31824
									]
								],
								"scope": "col_gutter"
							},
							"col_808080FF":
							{
								"flags": 16,
								"regions":
								[
									[
										30422,
										30426
									],
									[
										30432,
										30436
									]
								],
								"scope": "col_808080FF"
							},
							"col_808080FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_808080FF_circle.png",
								"regions":
								[
									[
										30395,
										30395
									]
								],
								"scope": "col_gutter"
							},
							"col_FF0000FF":
							{
								"flags": 16,
								"regions":
								[
									[
										28989,
										28992
									],
									[
										29039,
										29042
									],
									[
										29478,
										29481
									],
									[
										31724,
										31727
									],
									[
										31907,
										31910
									],
									[
										31955,
										31958
									],
									[
										32015,
										32018
									],
									[
										32095,
										32098
									],
									[
										32153,
										32156
									],
									[
										33189,
										33192
									],
									[
										33268,
										33271
									],
									[
										33323,
										33326
									],
									[
										33345,
										33348
									],
									[
										33440,
										33443
									],
									[
										33608,
										33611
									],
									[
										33781,
										33784
									],
									[
										33944,
										33947
									],
									[
										34006,
										34009
									]
								],
								"scope": "col_FF0000FF"
							},
							"col_FF0000FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FF0000FF_circle.png",
								"regions":
								[
									[
										28986,
										28986
									],
									[
										29010,
										29010
									],
									[
										29472,
										29472
									],
									[
										31710,
										31710
									],
									[
										31896,
										31896
									],
									[
										31942,
										31942
									],
									[
										32002,
										32002
									],
									[
										32065,
										32065
									],
									[
										32134,
										32134
									],
									[
										33177,
										33177
									],
									[
										33258,
										33258
									],
									[
										33305,
										33305
									],
									[
										33328,
										33328
									],
									[
										33430,
										33430
									],
									[
										33577,
										33577
									],
									[
										33690,
										33690
									],
									[
										33930,
										33930
									]
								],
								"scope": "col_gutter"
							},
							"col_FF00FFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										29568,
										29575
									]
								],
								"scope": "col_FF00FFFF"
							},
							"col_FF00FFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FF00FFFF_circle.png",
								"regions":
								[
									[
										29562,
										29562
									]
								],
								"scope": "col_gutter"
							},
							"col_FFFF00FF":
							{
								"flags": 16,
								"regions":
								[
									[
										29522,
										29528
									]
								],
								"scope": "col_FFFF00FF"
							},
							"col_FFFF00FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FFFF00FF_circle.png",
								"regions":
								[
									[
										29516,
										29516
									]
								],
								"scope": "col_gutter"
							},
							"col_FFFFFFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										29615,
										29620
									]
								],
								"scope": "col_FFFFFFFF"
							},
							"col_FFFFFFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FFFFFFFF_circle.png",
								"regions":
								[
									[
										29609,
										29609
									]
								],
								"scope": "col_gutter"
							}
						},
						"selection":
						[
							[
								37730,
								37730
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 1322,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1683650811.07,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 24695.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 28.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.8,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "plot-cv.sublime-project",
	"replace":
	{
		"height": 72.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"misc.js",
				"lib/misc.js"
			],
			[
				"lib/util",
				"quickjs/qjs-modules/lib/util.js"
			],
			[
				"test-nano",
				"test-nanovg.js"
			],
			[
				"os-help",
				"os-helpers.js"
			],
			[
				"io-help",
				"io-helpers.js"
			],
			[
				"debugger.js",
				"debugger.js"
			],
			[
				"quickjs.h",
				"quickjs/quickjs.h"
			],
			[
				"debugger-ser",
				"debugger-server.js"
			],
			[
				"async/help",
				"lib/async/helpers.js"
			],
			[
				"debugger-cli",
				"debugger-client.js"
			],
			[
				"debuggerp",
				"debuggerprotocol.js"
			],
			[
				"debugger-clie",
				"debugger-client.js"
			],
			[
				"io-helper",
				"io-helpers.js"
			],
			[
				"debuggerpro",
				"debuggerprotocol.js"
			],
			[
				"lexer.js",
				"lib/lexer.js"
			],
			[
				"io-he",
				"io-helpers.js"
			],
			[
				"fire.js",
				"fire.js"
			],
			[
				"transport-un",
				"quickjs/quickjs-debugger-transport-unix.c"
			],
			[
				"quickjs-debu",
				"quickjs/quickjs-debugger.c"
			],
			[
				"async/he",
				"lib/async/helpers.js"
			],
			[
				"iter",
				"lib/async/iterify.js"
			],
			[
				"async/",
				"lib/async/events.js"
			],
			[
				"async/iter",
				"lib/async/iterify.js"
			],
			[
				"lib/async",
				"lib/async/helpers.js"
			],
			[
				"lib/iter",
				"lib/iterable.js"
			],
			[
				"lib/iterat",
				"lib/iterator.js"
			],
			[
				"debugger-server",
				"debugger-server.js"
			],
			[
				"transport-uni",
				"quickjs/quickjs-debugger-transport-unix.c"
			],
			[
				"path.js",
				"lib/path.js"
			],
			[
				"debugger.html",
				"debugger.html"
			],
			[
				"debugger",
				"debugger.js"
			],
			[
				"os-he",
				"os-helpers.js"
			],
			[
				"load-as",
				"load-ast.js"
			],
			[
				"promise-w",
				"promise-worker.js"
			],
			[
				"repl.js",
				"quickjs/qjs-modules/lib/repl.js"
			],
			[
				"test-worker2",
				"test-worker2.js"
			],
			[
				"process.js",
				"quickjs/qjs-modules/lib/process.js"
			],
			[
				"qjsm.c",
				"quickjs/qjs-modules/src/qjsm.c"
			],
			[
				"fs.js",
				"quickjs/qjs-modules/lib/fs.js"
			],
			[
				"test-work2",
				"test-worker2.js"
			],
			[
				"test-worker",
				"test-worker2.js"
			],
			[
				"test-wor",
				"test-worker.js"
			],
			[
				"workertes",
				"workertest.js"
			],
			[
				"workertest",
				"workertest.js"
			],
			[
				"test-work",
				"test-worker.js"
			],
			[
				"process",
				"quickjs/qjs-modules/lib/process.js"
			],
			[
				"lib/misc",
				"lib/misc.js"
			],
			[
				"workerScr",
				"workerScript.js"
			],
			[
				"workerSc",
				"workerScript.js"
			],
			[
				"ws-w",
				"ws-worker.js"
			],
			[
				"ws-worker",
				"ws-worker.js"
			],
			[
				"io-helpers",
				"io-helpers.js"
			],
			[
				"findlibwe",
				"quickjs/qjs-net/cmake/FindLibwebsockets.cmake"
			],
			[
				"cli-he",
				"cli-helpers.js"
			],
			[
				"test-opencv",
				"test-opencv.js"
			],
			[
				"cvHigh",
				"qjs-opencv/js/cvHighGUI.js"
			],
			[
				"quickjs-de",
				"quickjs/quickjs-debugger.c"
			],
			[
				"repl",
				"quickjs/qjs-modules/lib/repl.js"
			],
			[
				"cli-help",
				"cli-helpers.js"
			],
			[
				"repl.j",
				"quickjs/qjs-modules/lib/repl.js"
			],
			[
				"cli-helper",
				"cli-helpers.js"
			],
			[
				"ast-shel",
				"ast-shell.js"
			],
			[
				"test-open",
				"test-opencv.js"
			],
			[
				"util.js",
				"quickjs/qjs-modules/lib/util.js"
			],
			[
				"debugger-",
				"debugger-server.js"
			],
			[
				"util.",
				"quickjs/qjs-modules/lib/util.js"
			],
			[
				"repl.",
				"quickjs/qjs-modules/lib/repl.js"
			],
			[
				"define",
				"quickjs/qjs-modules/include/defines.h"
			],
			[
				"path.h",
				"quickjs/qjs-modules/include/path.h"
			],
			[
				"qjsm",
				"quickjs/qjs-modules/src/qjsm.c"
			],
			[
				"path.c",
				"quickjs/qjs-modules/src/path.c"
			],
			[
				"extendAr",
				"quickjs/qjs-modules/lib/extendArray.js"
			],
			[
				"test-vid",
				"test-video.js"
			],
			[
				"test-vi",
				"test-video.js"
			],
			[
				"test-nan",
				"test-nanovg.js"
			],
			[
				"ast-shell",
				"ast-shell.js"
			],
			[
				"test-na",
				"test-nanovg.js"
			],
			[
				"-debugger",
				"quickjs/quickjs-debugger.c"
			],
			[
				"test-nanovg",
				"test-nanovg.js"
			],
			[
				"test-im",
				"test-image.js"
			],
			[
				"quickjs-imgui.c",
				"quickjs/qjs-imgui/quickjs-imgui.cpp"
			],
			[
				"imgui_wid",
				"quickjs/qjs-imgui/imgui/imgui_widgets.cpp"
			],
			[
				"nanovg-qjs",
				"quickjs/qjs-nanovg/nanovg-qjs.c"
			],
			[
				"nanovg.h",
				"quickjs/qjs-nanovg/nanovg/src/nanovg.h"
			],
			[
				"qjs-nan",
				"quickjs/qjs-nanovg/nanovg-qjs.c"
			],
			[
				"nanovg_",
				"quickjs/qjs-nanovg/nanovg/obsolete/nanovg_gl3.h"
			],
			[
				"nanovg_gl",
				"quickjs/qjs-nanovg/nanovg/src/nanovg_gl.h"
			],
			[
				"nanovg",
				"quickjs/qjs-nanovg/nanovg/src/nanovg.c"
			],
			[
				"nanovg.c",
				"quickjs/qjs-nanovg/nanovg/src/nanovg.c"
			],
			[
				"draw-ut",
				"draw-utils.js"
			],
			[
				"utils.h",
				"quickjs/qjs-modules/include/utils.h"
			],
			[
				"quickjs-in",
				"quickjs/qjs-modules/quickjs-inspect.c"
			],
			[
				"imgui/cmake",
				"quickjs/qjs-imgui/CMakeLists.txt"
			],
			[
				"imconfig",
				"quickjs/qjs-imgui/imgui/imconfig.h"
			],
			[
				"imconfig.h",
				"imgui/imconfig.h"
			],
			[
				"imgui.cpp",
				"quickjs/qjs-imgui/imgui/imgui.cpp"
			],
			[
				"backends/imgui",
				"quickjs/qjs-imgui/imgui/backends/imgui_impl_glfw.h"
			],
			[
				"impl_glfw",
				"imgui/imgui_impl_glfw.h"
			],
			[
				"test-img",
				"quickjs/qjs-imgui/test-imgui.js"
			],
			[
				"imgui.h",
				"quickjs/qjs-imgui/imgui/imgui.h"
			],
			[
				"cvVid",
				"qjs-opencv/js/cvVideo.js"
			],
			[
				"test-video",
				"test-video.js"
			],
			[
				"cvutil",
				"qjs-opencv/js/cvUtils.js"
			],
			[
				"config.js",
				"config.js"
			],
			[
				"cvHi",
				"qjs-opencv/js/cvHighGUI.js"
			],
			[
				"draw-u",
				"draw-utils.js"
			],
			[
				"utils.c",
				"quickjs/qjs-modules/src/utils.c"
			],
			[
				"test-ope",
				"test-opencv.js"
			],
			[
				"upload-ser",
				"upload-server.js"
			],
			[
				"repeater.js",
				"lib/repeater/repeater.js"
			],
			[
				"quickjs-ins",
				"quickjs-inspect.c"
			],
			[
				"quickjs-inp",
				"quickjs-inspect.c"
			],
			[
				"quickjs-sock",
				"quickjs-sockets.c"
			],
			[
				"test_Sock",
				"tests/test_sockets.js"
			],
			[
				"resolve-impo",
				"resolve-imports.js"
			],
			[
				"",
				"src/utils.c"
			],
			[
				"console",
				"lib/console.js"
			],
			[
				"quickjs-misc",
				"quickjs-misc.c"
			],
			[
				"sockets.c",
				"quickjs-sockets.c"
			],
			[
				"quickjs-my",
				"quickjs-mysql.c"
			],
			[
				"vector.c",
				"src/vector.c"
			],
			[
				"proper",
				"src/property-enumeration.c"
			],
			[
				"deep",
				"quickjs-deep.c"
			],
			[
				"process.j",
				"lib/process.js"
			],
			[
				"vect",
				"src/vector.c"
			],
			[
				"inspect.c",
				"quickjs-inspect.c"
			],
			[
				"wscli",
				"wscli.js"
			],
			[
				"fire",
				"fire.es"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/plot-cv.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 271.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"WS"
			]
		],
		"width": 1017.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 308.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
