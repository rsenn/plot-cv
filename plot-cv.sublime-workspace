{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"pathTo",
				"pathToPointIterator"
			],
			[
				"Element",
				"ElementTransformMatrix"
			],
			[
				"Elemen",
				"ElementTransformList"
			],
			[
				"getTra",
				"getTransformationList"
			],
			[
				"serialize",
				"serializeToString"
			],
			[
				"unitConv",
				"unitConvToMM"
			],
			[
				"lazy",
				"lazyProperties"
			],
			[
				"ex",
				"expansion"
			],
			[
				"isArra",
				"isArrayBuffer"
			],
			[
				"Extra",
				"ExtractRotation"
			],
			[
				"tra",
				"transformation"
			],
			[
				"define",
				"defineProperties"
			],
			[
				"getters",
				"gettersSetters"
			],
			[
				"circui",
				"circuitFilePath"
			],
			[
				"Conn",
				"ConnectionPoint"
			],
			[
				"parseCom",
				"parseCommentOrEmpty"
			],
			[
				"circ",
				"circuitFilePath"
			],
			[
				"built",
				"builtin_attr"
			],
			[
				"dep",
				"depthOrPred"
			],
			[
				"exte",
				"extendAsyncGenerator"
			],
			[
				"extend",
				"extendArray"
			],
			[
				"allo",
				"allowedDirs"
			],
			[
				"getOwnPr",
				"getOwnPropertyNames(...)"
			],
			[
				"Prom",
				"PromiseWorker"
			],
			[
				"trans",
				"transformation"
			],
			[
				"allow",
				"allowedDirs"
			],
			[
				"Get",
				"GetElementsBySignal"
			],
			[
				"GetEle",
				"GetElementsBySignal"
			],
			[
				"getOwn",
				"getOwnPropertyNames(...)"
			],
			[
				"ColorSi",
				"ColorSignals"
			],
			[
				"HTML",
				"HTMLTableRow"
			],
			[
				"HTMLTable",
				"HTMLTableColumn"
			],
			[
				"rend",
				"renderToString"
			],
			[
				"Pack",
				"Package2Circuit"
			],
			[
				"lazyP",
				"lazyProperties"
			],
			[
				"JS_Get",
				"JS_GetProperty"
			],
			[
				"Ret",
				"ReturnValuePathFunction"
			],
			[
				"cFunc",
				"cFuncListObjects"
			],
			[
				"isC",
				"isCFuncCall"
			],
			[
				"En",
				"EntityNames"
			],
			[
				"parseFrom",
				"parseFromString"
			],
			[
				"pseu",
				"pseudoClassArg"
			],
			[
				"pseudoC",
				"pseudoClassName"
			],
			[
				"Key",
				"KeyboardEvent"
			],
			[
				"getOp",
				"getOptionEntries"
			],
			[
				"setProp",
				"setPropertyValue"
			],
			[
				"parse",
				"parseSelectors"
			],
			[
				"JS_SetPr",
				"JS_SetPropertyStr"
			],
			[
				"jsm_buil",
				"jsm_builtin_init"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"JS_Set",
				"JS_SetProperty"
			],
			[
				"JS_New",
				"JS_NewObject"
			],
			[
				"ide",
				"importIdentifiers"
			],
			[
				"iden",
				"importIdentifiers"
			],
			[
				"import",
				"importIdentifiers"
			],
			[
				"ident",
				"identifierSets"
			],
			[
				"path_is",
				"path_is_absolute"
			],
			[
				"js_is_",
				"js_is_null_or_undefined"
			],
			[
				"path_skip_se",
				"path_skip_separator_s"
			],
			[
				"WRITABLE_METHO",
				"WRITABLE_METHOD_CLOSE"
			],
			[
				"list_fo",
				"list_for_each_prev"
			],
			[
				"JS_Th",
				"JS_ThrowOutOfMemory"
			],
			[
				"JS_",
				"JS_ThrowOutOfMemory"
			],
			[
				"underly",
				"underlying_source"
			],
			[
				"Tok",
				"TokenSequence"
			],
			[
				"JS_GetPr",
				"JS_GetPropertyStr"
			],
			[
				"JS_Thro",
				"JS_ThrowOutOfMemory"
			],
			[
				"getAt",
				"getAttributeNames"
			],
			[
				"self",
				"self_closing_tags"
			],
			[
				"self_",
				"self_closing_tags"
			],
			[
				"JS_PROP",
				"JS_PROP_ENUMERABLE"
			],
			[
				"depe",
				"dependencyMap"
			],
			[
				"de",
				"dependencyMap"
			],
			[
				"js_is_null",
				"js_is_null_or_undefined"
			],
			[
				"JS_P",
				"JS_PROP_ENUMERABLE"
			],
			[
				"JS_SetP",
				"JS_SetPropertyUint32"
			],
			[
				"spec",
				"specifiers"
			],
			[
				"Num",
				"NumericRange"
			],
			[
				"token_r",
				"token_release_rt"
			],
			[
				"JS_Thr",
				"JS_ThrowTypeError"
			],
			[
				"js_",
				"js_location_data"
			],
			[
				"debug_js_mall",
				"debug_js_malloc_usable_size"
			],
			[
				"repl",
				"replaceRange"
			],
			[
				"js_malloc_u",
				"js_malloc_usable_size_rt"
			],
			[
				"malloc",
				"malloc_usable_size"
			],
			[
				"all",
				"alloc_block_list"
			],
			[
				"alloc",
				"alloc_block_list"
			],
			[
				"path_skip",
				"path_skip_component"
			],
			[
				"jsm_mo",
				"jsm_module_loader"
			],
			[
				"JS_Throw",
				"JS_ThrowInternalError"
			],
			[
				"JS_AtomTo",
				"JS_AtomToValue"
			],
			[
				"inspect",
				"inspectSymbol"
			],
			[
				"at",
				"attributes"
			],
			[
				"parent",
				"parentElement"
			],
			[
				"owner",
				"ownerElement"
			],
			[
				"get",
				"getPrototypeOf"
			],
			[
				"child",
				"childElementCount"
			],
			[
				"getO",
				"getOwnPropertyNames"
			],
			[
				"js_misc_im",
				"js_misc_immutable_constructor"
			],
			[
				"obj",
				"object_tostring"
			],
			[
				"js_misc_immu",
				"js_misc_immutable_free"
			],
			[
				"js_misc_imm",
				"js_misc_immutable_constructor"
			],
			[
				"CMAKE_IMPORT",
				"CMAKE_IMPORT_LIBRARY_SUFFIX"
			],
			[
				"CMAKE_CUR",
				"CMAKE_CURRENT_BINARY_DIR"
			],
			[
				"js_is",
				"js_is_null_or_undefined"
			],
			[
				"js_asy",
				"js_async_socket_class_id"
			],
			[
				"JS_NewObj",
				"JS_NewObjectProtoClass"
			],
			[
				"async_",
				"async_socket_proto"
			],
			[
				"js_socket_class",
				"js_socket_class_id"
			],
			[
				"g",
				"getOwnPropertyNames(...)"
			],
			[
				"js_sockaddr_cl",
				"js_sockaddr_class_id"
			],
			[
				"js_so",
				"js_sockaddr_constructor"
			],
			[
				"js_sys",
				"js_syscallerror_class_id"
			],
			[
				"js_string",
				"js_stringdecoder_class_id"
			],
			[
				"js_pred",
				"js_predicate_class_id"
			],
			[
				"js_syn",
				"js_syntaxerror_class"
			],
			[
				"js_child",
				"js_child_process_class_id"
			],
			[
				"js_b",
				"js_blob_class_id"
			],
			[
				"js_loca",
				"js_location_class_id"
			],
			[
				"js_token_in",
				"js_token_inspect_funcs"
			],
			[
				"set",
				"setReadHandler"
			],
			[
				"js_get_",
				"js_get_propertystr_bool"
			],
			[
				"js_misc_ate",
				"js_misc_atexit_functions"
			],
			[
				"isF",
				"isFunction"
			],
			[
				"tab",
				"tab_atom_len"
			],
			[
				"isARr",
				"isArrayBuffer"
			],
			[
				"BIT",
				"BITFIELD_FROMARRAY"
			],
			[
				"to",
				"toStringTag"
			]
		]
	},
	"buffers":
	[
		{
			"file": "svg-crop-pad.js",
			"settings":
			{
				"buffer_size": 15936,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					22,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAEk4AAAAAAAASjgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABJOAAAAAAAAEk4AAAAAAAAAAAAAAAA8L8"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": " unit:"
					},
					"BgAAAEo4AAAAAAAASzgAAAAAAAAAAAAASzgAAAAAAABMOAAAAAAAAAAAAABMOAAAAAAAAE04AAAAAAAAAAAAAE04AAAAAAAATjgAAAAAAAAAAAAATjgAAAAAAABPOAAAAAAAAAAAAABPOAAAAAAAAFA4AAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABKOAAAAAAAAEo4AAAAAAAAAAAAAAAA8L8"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFA4AAAAAAAAUTgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABQOAAAAAAAAFA4AAAAAAAAAAAAAAAA8L8"
				],
				[
					25,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAFE4AAAAAAAAUzgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABROAAAAAAAAFE4AAAAAAAAAAAAAAAA8L8"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": "mm"
					},
					"AgAAAFI4AAAAAAAAUzgAAAAAAAAAAAAAUzgAAAAAAABUOAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABSOAAAAAAAAFI4AAAAAAAAAAAAAAAA8L8"
				],
				[
					32,
					2,
					"left_delete",
					null,
					"AgAAABM4AAAAAAAAEzgAAAAAAAABAAAAbRI4AAAAAAAAEjgAAAAAAAABAAAAbQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAUOAAAAAAAABQ4AAAAAAAAAAAAAAAA8L8"
				],
				[
					34,
					2,
					"left_delete",
					null,
					"AgAAAA04AAAAAAAADTgAAAAAAAABAAAAbQw4AAAAAAAADDgAAAAAAAABAAAAbQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAOOAAAAAAAAA44AAAAAAAAAAAAAAAA8L8"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEI4AAAAAAAAQzgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABCOAAAAAAAAEI4AAAAAAAAAAAAAAAA8L8"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEQ4AAAAAAAARTgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABEOAAAAAAAAEQ4AAAAAAAAAAAAAAAA8L8"
				],
				[
					77,
					1,
					"insert",
					{
						"characters": ".round"
					},
					"BgAAAL84AAAAAAAAwDgAAAAAAAAAAAAAwDgAAAAAAADBOAAAAAAAAAAAAADBOAAAAAAAAMI4AAAAAAAAAAAAAMI4AAAAAAAAwzgAAAAAAAAAAAAAwzgAAAAAAADEOAAAAAAAAAAAAADEOAAAAAAAAMU4AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvzgAAAAAAAC/OAAAAAAAAAAAAAAAAPC/"
				],
				[
					78,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAMU4AAAAAAAAxzgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxTgAAAAAAADFOAAAAAAAAAAAAAAAAPC/"
				],
				[
					79,
					1,
					"insert",
					{
						"characters": "precision"
					},
					"CQAAAMY4AAAAAAAAxzgAAAAAAAAAAAAAxzgAAAAAAADIOAAAAAAAAAAAAADIOAAAAAAAAMk4AAAAAAAAAAAAAMk4AAAAAAAAyjgAAAAAAAAAAAAAyjgAAAAAAADLOAAAAAAAAAAAAADLOAAAAAAAAMw4AAAAAAAAAAAAAMw4AAAAAAAAzTgAAAAAAAAAAAAAzTgAAAAAAADOOAAAAAAAAAAAAADOOAAAAAAAAM84AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxjgAAAAAAADGOAAAAAAAAAAAAAAAAPC/"
				],
				[
					90,
					1,
					"insert",
					{
						"characters": "e-6"
					},
					"AwAAANQuAAAAAAAA1S4AAAAAAAAAAAAA1S4AAAAAAADWLgAAAAAAAAAAAADWLgAAAAAAANcuAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1C4AAAAAAADULgAAAAAAAAAAAAAAAPC/"
				],
				[
					92,
					1,
					"left_delete",
					null,
					"AQAAANYuAAAAAAAA1i4AAAAAAAABAAAANg",
					"AQAAAAAAAAABAAAA1y4AAAAAAADXLgAAAAAAAAAAAAAAAPC/"
				],
				[
					93,
					1,
					"insert",
					{
						"characters": "3"
					},
					"AQAAANYuAAAAAAAA1y4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1i4AAAAAAADWLgAAAAAAAAAAAAAAAPC/"
				],
				[
					100,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAMk4AAAAAAAAyjgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyTgAAAAAAADJOAAAAAAAAAAAAAAAAPC/"
				],
				[
					101,
					1,
					"insert",
					{
						"characters": " =>"
					},
					"AwAAAMo4AAAAAAAAyzgAAAAAAAAAAAAAyzgAAAAAAADMOAAAAAAAAAAAAADMOAAAAAAAAM04AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyjgAAAAAAADKOAAAAAAAAAAAAAAAAPC/"
				],
				[
					102,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAM04AAAAAAAAzjgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzTgAAAAAAADNOAAAAAAAAAAAAAAAAPC/"
				],
				[
					105,
					1,
					"insert",
					{
						"characters": "roundTo("
					},
					"CAAAAM44AAAAAAAAzzgAAAAAAAAAAAAAzzgAAAAAAADQOAAAAAAAAAAAAADQOAAAAAAAANE4AAAAAAAAAAAAANE4AAAAAAAA0jgAAAAAAAAAAAAA0jgAAAAAAADTOAAAAAAAAAAAAADTOAAAAAAAANQ4AAAAAAAAAAAAANQ4AAAAAAAA1TgAAAAAAAAAAAAA1TgAAAAAAADWOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzjgAAAAAAADOOAAAAAAAAAAAAAAAAPC/"
				],
				[
					109,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAOE4AAAAAAAA4jgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4TgAAAAAAADhOAAAAAAAAAAAAAAAAPC/"
				],
				[
					127,
					1,
					"insert",
					{
						"characters": ",roundTo"
					},
					"CAAAAKUAAAAAAAAApgAAAAAAAAAAAAAApgAAAAAAAACnAAAAAAAAAAAAAACnAAAAAAAAAKgAAAAAAAAAAAAAAKgAAAAAAAAAqQAAAAAAAAAAAAAAqQAAAAAAAACqAAAAAAAAAAAAAACqAAAAAAAAAKsAAAAAAAAAAAAAAKsAAAAAAAAArAAAAAAAAAAAAAAArAAAAAAAAACtAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApQAAAAAAAAClAAAAAAAAAAAAAAAAAPC/"
				],
				[
					143,
					1,
					"insert",
					{
						"characters": "nm,"
					},
					"AwAAAN44AAAAAAAA3zgAAAAAAAAAAAAA3zgAAAAAAADgOAAAAAAAAAAAAADgOAAAAAAAAOE4AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3jgAAAAAAADeOAAAAAAAAAAAAAAAAPC/"
				],
				[
					144,
					2,
					"left_delete",
					null,
					"AgAAAOA4AAAAAAAA4DgAAAAAAAABAAAALN84AAAAAAAA3zgAAAAAAAABAAAAbQ",
					"AQAAAAAAAAABAAAA4TgAAAAAAADhOAAAAAAAAAAAAAAAAPC/"
				],
				[
					145,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAN84AAAAAAAA4DgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3zgAAAAAAADfOAAAAAAAAAAAAAAAAPC/"
				],
				[
					146,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOA4AAAAAAAA4TgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4DgAAAAAAADgOAAAAAAAAAAAAAAAAPC/"
				],
				[
					188,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAPQ4AAAAAAAA9TgAAAAAAAAAAAAA9TgAAAAAAAD5OAAAAAAAAAAAAAD5OAAAAAAAAPk4AAAAAAAABwAAACBlbHNlIHs",
					"AQAAAAAAAAABAAAA9DgAAAAAAAD7OAAAAAAAAAAAAAAAAPC/"
				],
				[
					192,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BwAAAGk4AAAAAAAAajgAAAAAAAAAAAAAajgAAAAAAABuOAAAAAAAAAAAAABuOAAAAAAAAG44AAAAAAAABAAAAGVsc2X2OAAAAAAAAPY4AAAAAAAABAAAACAgICBuOAAAAAAAAG84AAAAAAAAAAAAAG84AAAAAAAAczgAAAAAAAAAAAAAajgAAAAAAABqOAAAAAAAAAQAAAAgICAg",
					"AQAAAAAAAAABAAAAaTgAAAAAAABtOAAAAAAAAAAAAAAAAPC/"
				],
				[
					206,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAIY9AAAAAAAAhz0AAAAAAAAAAAAAhz0AAAAAAACHPQAAAAAAAAIAAAB9Cg",
					"AQAAAAAAAAABAAAAhj0AAAAAAACIPQAAAAAAAAAAAAAAAPC/"
				],
				[
					208,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAhz0AAAAAAACHPQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/geom/bbox.js",
			"settings":
			{
				"buffer_size": 7020,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "eagle2svg.js",
			"redo_stack":
			[
				[
					139,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACHCQAAIyEvdXNyL2Jpbi9lbnYgcWpzbQppbXBvcnQgKiBhcyB1dGlsIGZyb20gJy4vbGliL21pc2MuanMnOwppbXBvcnQgKiBhcyBkZWVwIGZyb20gJy4vbGliL2RlZXAuanMnOwppbXBvcnQgKiBhcyBwYXRoIGZyb20gJy4vbGliL3BhdGguanMnOwppbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7CmltcG9ydCB7IGxvZywgRWFnbGVEb2N1bWVudCwgUmVuZGVyZXIsIEVhZ2xlUHJvamVjdCB9IGZyb20gJy4vbGliL2VhZ2xlLmpzJzsKaW1wb3J0IHJlcXVpcmUgZnJvbSAncmVxdWlyZSc7CmltcG9ydCB7IENvbnNvbGUgfSBmcm9tICdjb25zb2xlJzsKaW1wb3J0IHsgcmVhZCBhcyBmcm9tWE1MLCB3cml0ZSBhcyB0b1hNTCB9IGZyb20gJy4vbGliL3htbC5qcyc7CmltcG9ydCB7IFdyaXRlRmlsZSB9IGZyb20gJy4vaW8taGVscGVycy5qcyc7CmltcG9ydCB7IGdldE9wdCB9IGZyb20gJ3V0aWwnOwppbXBvcnQgeyByZWFkRmlsZVN5bmMgfSBmcm9tICdmcyc7CmltcG9ydCB7IFJlYWN0Q29tcG9uZW50LCByZW5kZXIgfSBmcm9tICcuL2xpYi9kb20vcHJlYWN0Q29tcG9uZW50LmpzJzsKaW1wb3J0IHJlbmRlclRvU3RyaW5nIGZyb20gJy4vbGliL3ByZWFjdC1yZW5kZXItdG8tc3RyaW5nLmpzJzsKaW1wb3J0IHsgUkdCQSwgaXNSR0JBLCBJbW11dGFibGVSR0JBLCBkZWZhdWx0IGFzIHJnYmEgfSBmcm9tICcuL2xpYi9jb2xvci9yZ2JhLmpzJzsKCmxldCBkZWJ1Z0ZsYWcgPSBmYWxzZTsKCmZ1bmN0aW9uIHJlbmRlcihkb2MsIGZpbGVuYW1lKSB7CiAgaWYoZG9jIGluc3RhbmNlb2YgRWFnbGVQcm9qZWN0KSB7CiAgICByZW5kZXIoZG9jLnNjaGVtYXRpYyk7CiAgICByZW5kZXIoZG9jLmJvYXJkKTsKICAgIHJldHVybjsKICB9CiAgbGV0IHJlbmRlcmVyID0gbmV3IFJlbmRlcmVyKGRvYywgUmVhY3RDb21wb25lbnQuYXBwZW5kLCBkZWJ1Z0ZsYWcpOwoKICAvKiByZW5kZXJlci5zZXRQYWxldHRlKFsKICAgIFsweGZmLCAweGZmLCAweGZmXSwKICAgIFsweDRiLCAweDRiLCAweGE1XSwKICAgIFswLCAwLCAwXSwKICAgIFsweDRiLCAweGE1LCAweGE1XSwKICAgIFswLCAwLCAwXSwKICAgIFsweGE1LCAweDRiLCAweGE1XSwKICAgIFsweGE1LCAweGE1LCAweDRiXSwKICAgIFswLCAwLCAwXSwKICAgIFsweDRiLCAweDRiLCAweGZmXSwKICAgIFsweDRiLCAweGZmLCAweDRiXSwKICAgIFsweDRiLCAweGZmLCAweGZmXSwKICAgIFsweGZmLCAweDRiLCAweDRiXSwKICAgIFsweGZmLCAweDRiLCAweGZmXSwKICAgIFsweGZmLCAweGZmLCAweDRiXSwKICAgIFsweDRiLCAweDRiLCAweDRiXSwKICAgIFsweGE1LCAweGE1LCAweGE1XSwKICAgIFswLCAwLCAwXQogIF0ubWFwKChbcixnLGJdKSA9PiBuZXcgUkdCQShyLGcsYikpKTsqLwoKICBsZXQgc3RyOwogIGxldCBzdmcgPSByZW5kZXJlci5yZW5kZXIoZG9jKTsKICB0cnkgewogICAgc3RyID0gcmVuZGVyVG9TdHJpbmcoc3ZnKTsKICB9IGNhdGNoKGUpIHsKICAgIGNvbnNvbGUubG9nKCdFUlJPUjonLCBlKTsKICAgIGNvbnNvbGUubG9nKCdTVEFDSzonLCBlLnN0YWNrKTsKICB9CiAgICBsZXQgeG1sID0gZnJvbVhNTChzdHIpOwoKICBmaWxlbmFtZSA/Pz0KICAgIHBhdGguYmFzZW5hbWUoZG9jLmZpbGVuYW1lLCAnLicgKyBkb2MudHlwZSkgKwogICAgJy0nICsKICAgIHsgc2NoOiAnc2NoZW1hdGljJywgYnJkOiAnYm9hcmQnLCBsYnI6ICdsaWJyYXJ5JyB9W2RvYy50eXBlXSArCiAgICAnLnN2Zyc7CgogIGlmKGZpbGVuYW1lKSB7CiAgICBsZXQgcmV0OwogICAgcmV0ID0gV3JpdGVGaWxlKGZpbGVuYW1lLCAoc3RyID0gdG9YTUwoeG1sKSkpOwogICAgY29uc29sZS5sb2coYFNhdmluZyB0byAnJHtmaWxlbmFtZX0nLi4uYCwgcmV0KTsKICB9CiAgcmV0dXJuIHN0cjsKfQoKZnVuY3Rpb24gbWFpbiguLi5hcmdzKSB7CiAgZ2xvYmFsVGhpcy5jb25zb2xlID0gbmV3IENvbnNvbGUoewogICAgaW5zcGVjdE9wdGlvbnM6IHsgbWF4QXJyYXlMZW5ndGg6IDEwMCwgY29sb3JzOiB0cnVlLCBkZXB0aDogMiwgY29tcGFjdDogMCwgY3VzdG9tSW5zcGVjdDogdHJ1ZSB9CiAgfSk7CiAKICBsZXQgcGFyYW1zID0gZ2V0T3B0KAogICAgewogICAgICBkZWJ1ZzogW2ZhbHNlLCB2YWx1ZSA9PiAoZGVidWdGbGFnID0gdmFsdWUpLCAneCddLAogICAgICAnb3V0cHV0LWRpcic6IFt0cnVlLCBudWxsLCAnZCddLAogICAgICAnQCc6ICdpbnB1dCcKICAgIH0sCiAgICBhcmdzCiAgKTsKICAKICBmb3IobGV0IGFyZyBvZiBhcmdzKSB7CiAgICBsZXQgZG9jID0gRWFnbGVEb2N1bWVudC5vcGVuKGFyZywgeyByZWFkRmlsZVN5bmMgfSk7CiAKICAgIHJlbmRlcihkb2MpOwogIH0KfQoKdHJ5IHsKICBtYWluKC4uLnNjcmlwdEFyZ3Muc2xpY2UoMSkpOwp9IGNhdGNoKGVycm9yKSB7CiAgY29uc29sZS5sb2coYEZBSUw6ICR7ZXJyb3IubWVzc2FnZX1cbiR7ZXJyb3Iuc3RhY2t9YCk7Cn0KAAAAAAAAAADCCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWwkAAAAAAABbCQAAAAAAAAAAAAAAAPC/"
				]
			],
			"settings":
			{
				"buffer_size": 2498,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					9,
					1,
					"cut",
					null,
					"AQAAAAQGAAAAAAAABAYAAAAAAAA1AAAAICBjb25zb2xlLmxvZygncmVuZGVyZXIucGFsZXR0ZScsIHJlbmRlcmVyLnBhbGV0dGUpOwo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAEBgAAAAAAADkGAAAAAAAAAAAAAAAAAAA"
				],
				[
					10,
					1,
					"paste",
					null,
					"AQAAAAQGAAAAAAAAOQYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAEBgAAAAAAAAQGAAAAAAAAAAAAAAAA8L8"
				],
				[
					12,
					1,
					"paste",
					null,
					"AQAAAFcGAAAAAAAAjAYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABXBgAAAAAAAFcGAAAAAAAAAAAAAAAAAAA"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "str"
					},
					"BAAAAGYGAAAAAAAAZwYAAAAAAAAAAAAAZwYAAAAAAABnBgAAAAAAABAAAAByZW5kZXJlci5wYWxldHRlZwYAAAAAAABoBgAAAAAAAAAAAABoBgAAAAAAAGkGAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABmBgAAAAAAAHYGAAAAAAAAAAAAAAAA8L8"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "str"
					},
					"BAAAAHUGAAAAAAAAdgYAAAAAAAAAAAAAdgYAAAAAAAB2BgAAAAAAAAcAAABwYWxldHRldgYAAAAAAAB3BgAAAAAAAAAAAAB3BgAAAAAAAHgGAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB1BgAAAAAAAHwGAAAAAAAAAAAAAAAA8L8"
				],
				[
					29,
					2,
					"right_delete",
					null,
					"AgAAAGwGAAAAAAAAbAYAAAAAAAAIAAAAcmVuZGVyZXJsBgAAAAAAAGwGAAAAAAAAAQAAAC4",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABsBgAAAAAAAHQGAAAAAAAAAAAAAAAA8L8"
				],
				[
					42,
					1,
					"insert_snippet",
					{
						"contents": "{${0:$SELECTION}}"
					},
					"AgAAAGwGAAAAAAAAbAYAAAAAAAADAAAAc3RybAYAAAAAAABxBgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABsBgAAAAAAAG8GAAAAAAAAAAAAAAAA8L8"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": "ßvg,m"
					},
					"BgAAAG0GAAAAAAAAbgYAAAAAAAAAAAAAbgYAAAAAAABuBgAAAAAAAAMAAABzdHJuBgAAAAAAAG8GAAAAAAAAAAAAAG8GAAAAAAAAcAYAAAAAAAAAAAAAcAYAAAAAAABxBgAAAAAAAAAAAABxBgAAAAAAAHIGAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABtBgAAAAAAAHAGAAAAAAAAAAAAAAAA8L8"
				],
				[
					44,
					5,
					"left_delete",
					null,
					"BQAAAHEGAAAAAAAAcQYAAAAAAAABAAAAbXAGAAAAAAAAcAYAAAAAAAABAAAALG8GAAAAAAAAbwYAAAAAAAABAAAAZ24GAAAAAAAAbgYAAAAAAAABAAAAdm0GAAAAAAAAbQYAAAAAAAACAAAAw58",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAByBgAAAAAAAHIGAAAAAAAAAAAAAAAA8L8"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": "svg,str"
					},
					"BwAAAG0GAAAAAAAAbgYAAAAAAAAAAAAAbgYAAAAAAABvBgAAAAAAAAAAAABvBgAAAAAAAHAGAAAAAAAAAAAAAHAGAAAAAAAAcQYAAAAAAAAAAAAAcQYAAAAAAAByBgAAAAAAAAAAAAByBgAAAAAAAHMGAAAAAAAAAAAAAHMGAAAAAAAAdAYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABtBgAAAAAAAG0GAAAAAAAAAAAAAAAA8L8"
				],
				[
					48,
					3,
					"left_delete",
					null,
					"AwAAAGgGAAAAAAAAaAYAAAAAAAABAAAAcmcGAAAAAAAAZwYAAAAAAAABAAAAdGYGAAAAAAAAZgYAAAAAAAABAAAAcw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABpBgAAAAAAAGkGAAAAAAAAAAAAAAAA8L8"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": "render"
					},
					"BgAAAGYGAAAAAAAAZwYAAAAAAAAAAAAAZwYAAAAAAABoBgAAAAAAAAAAAABoBgAAAAAAAGkGAAAAAAAAAAAAAGkGAAAAAAAAagYAAAAAAAAAAAAAagYAAAAAAABrBgAAAAAAAAAAAABrBgAAAAAAAGwGAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABmBgAAAAAAAGYGAAAAAAAAAAAAAAAA8L8"
				],
				[
					72,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AgAAADkIAAAAAAAAOggAAAAAAAAAAAAAOggAAAAAAAA6CAAAAAAAAAIAAAAxMA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA5CAAAAAAAADsIAAAAAAAAAAAAAAAA8L8"
				],
				[
					119,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAiCgAAIyEvdXNyL2Jpbi9lbnYgcWpzbQppbXBvcnQgKiBhcyB1dGlsIGZyb20gJy4vbGliL21pc2MuanMnOwppbXBvcnQgKiBhcyBkZWVwIGZyb20gJy4vbGliL2RlZXAuanMnOwppbXBvcnQgKiBhcyBwYXRoIGZyb20gJy4vbGliL3BhdGguanMnOwppbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7CmltcG9ydCB7IGxvZywgRWFnbGVEb2N1bWVudCwgUmVuZGVyZXIsIEVhZ2xlUHJvamVjdCB9IGZyb20gJy4vbGliL2VhZ2xlLmpzJzsKaW1wb3J0IHJlcXVpcmUgZnJvbSAncmVxdWlyZSc7CmltcG9ydCB7IENvbnNvbGUgfSBmcm9tICdjb25zb2xlJzsKaW1wb3J0IHsgcmVhZCBhcyBmcm9tWE1MLCB3cml0ZSBhcyB0b1hNTCB9IGZyb20gJy4vbGliL3htbC5qcyc7CmltcG9ydCB7IFdyaXRlRmlsZSB9IGZyb20gJy4vaW8taGVscGVycy5qcyc7CmltcG9ydCB7IGdldE9wdCB9IGZyb20gJ3V0aWwnOwppbXBvcnQgeyByZWFkRmlsZVN5bmMgfSBmcm9tICdmcyc7CmltcG9ydCB7IFJlYWN0Q29tcG9uZW50LCByZW5kZXIgfSBmcm9tICcuL2xpYi9kb20vcHJlYWN0Q29tcG9uZW50LmpzJzsKaW1wb3J0IHJlbmRlclRvU3RyaW5nIGZyb20gJy4vbGliL3ByZWFjdC1yZW5kZXItdG8tc3RyaW5nLmpzJzsKaW1wb3J0IHsgUkdCQSwgaXNSR0JBLCBJbW11dGFibGVSR0JBLCBkZWZhdWx0IGFzIHJnYmEgfSBmcm9tICcuL2xpYi9jb2xvci9yZ2JhLmpzJzsKCmxldCBkZWJ1Z0ZsYWcgPSBmYWxzZTsKCmZ1bmN0aW9uIHJlbmRlcihkb2MsIGZpbGVuYW1lKSB7CiAgaWYoZG9jIGluc3RhbmNlb2YgRWFnbGVQcm9qZWN0KSB7CiAgICByZW5kZXIoZG9jLnNjaGVtYXRpYyk7CiAgICByZW5kZXIoZG9jLmJvYXJkKTsKICAgIHJldHVybjsKICB9CiAgbGV0IHJlbmRlcmVyID0gbmV3IFJlbmRlcmVyKGRvYywgUmVhY3RDb21wb25lbnQuYXBwZW5kLCBkZWJ1Z0ZsYWcpOwoKICAvKiByZW5kZXJlci5zZXRQYWxldHRlKFsKICAgIFsweGZmLCAweGZmLCAweGZmXSwKICAgIFsweDRiLCAweDRiLCAweGE1XSwKICAgIFswLCAwLCAwXSwKICAgIFsweDRiLCAweGE1LCAweGE1XSwKICAgIFswLCAwLCAwXSwKICAgIFsweGE1LCAweDRiLCAweGE1XSwKICAgIFsweGE1LCAweGE1LCAweDRiXSwKICAgIFswLCAwLCAwXSwKICAgIFsweDRiLCAweDRiLCAweGZmXSwKICAgIFsweDRiLCAweGZmLCAweDRiXSwKICAgIFsweDRiLCAweGZmLCAweGZmXSwKICAgIFsweGZmLCAweDRiLCAweDRiXSwKICAgIFsweGZmLCAweDRiLCAweGZmXSwKICAgIFsweGZmLCAweGZmLCAweDRiXSwKICAgIFsweDRiLCAweDRiLCAweDRiXSwKICAgIFsweGE1LCAweGE1LCAweGE1XSwKICAgIFswLCAwLCAwXQogIF0ubWFwKChbcixnLGJdKSA9PiBuZXcgUkdCQShyLGcsYikpKTsqLwoKICBsZXQgc3RyOwogIGxldCBzdmcgPSByZW5kZXJlci5yZW5kZXIoZG9jKTsKICB0cnkgewogICAgc3RyID0gcmVuZGVyVG9TdHJpbmcoc3ZnKTsKICB9IGNhdGNoKGUpIHsKICAgIGNvbnNvbGUubG9nKCdFUlJPUjonLCBlKTsKICAgIGNvbnNvbGUubG9nKCdTVEFDSzonLCBlLnN0YWNrKTsKICB9CiAgY29uc29sZS5sb2coJ3JlbmRlcmVyLnBhbGV0dGUnLCByZW5kZXJlci5wYWxldHRlKTsKICAvL2NvbnNvbGUubG9nKCdzdHInLCBzdHIpOwoKICBjb25zb2xlLmxvZygncmVuZGVyJywge3N2ZyxzdHJ9KTsKICBsZXQgeG1sID0gZnJvbVhNTChzdHIpOwoKICBmaWxlbmFtZSA/Pz0gcGF0aC5iYXNlbmFtZShkb2MuZmlsZW5hbWUsICcuJyArIGRvYy50eXBlKSArICctJyArIHsgc2NoOiAnc2NoZW1hdGljJywgYnJkOiAnYm9hcmQnLCBsYnI6ICdsaWJyYXJ5JyB9W2RvYy50eXBlXSArICcuc3ZnJzsKCiAgaWYoZmlsZW5hbWUpIHsKICAgIGxldCByZXQ7CiAgICByZXQgPSBXcml0ZUZpbGUoZmlsZW5hbWUsIChzdHIgPSB0b1hNTCh4bWwpKSk7CiAgICBjb25zb2xlLmxvZyhgU2F2aW5nIHRvICcke2ZpbGVuYW1lfScuLi5gLCByZXQpOwogIH0KICByZXR1cm4gc3RyOwp9CgpmdW5jdGlvbiBtYWluKC4uLmFyZ3MpIHsKICBnbG9iYWxUaGlzLmNvbnNvbGUgPSBuZXcgQ29uc29sZSh7CiAgICBpbnNwZWN0T3B0aW9uczogeyBtYXhBcnJheUxlbmd0aDogMTAwLCBjb2xvcnM6IHRydWUsIGRlcHRoOiAyLCBjb21wYWN0OiAxLCBjdXN0b21JbnNwZWN0OiB0cnVlIH0KICB9KTsKICBjb25zb2xlLmxvZygnYXJncycsIGFyZ3MpOwoKICBsZXQgcGFyYW1zID0gZ2V0T3B0KAogICAgewogICAgICBkZWJ1ZzogW2ZhbHNlLCB2YWx1ZSA9PiAoZGVidWdGbGFnID0gdmFsdWUpLCAneCddLAogICAgICAnb3V0cHV0LWRpcic6IFt0cnVlLCBudWxsLCAnZCddLAogICAgICAnQCc6ICdpbnB1dCcKICAgIH0sCiAgICBhcmdzCiAgKTsKICBmb3IobGV0IGFyZyBvZiBhcmdzKSB7CiAgICBsZXQgZG9jID0gRWFnbGVEb2N1bWVudC5vcGVuKGFyZywgeyByZWFkRmlsZVN5bmMgfSk7CgogICAgY29uc29sZS5sb2coJ2RvYycsIGRvYyk7CgogICAgcmVuZGVyKGRvYyk7CiAgfQp9Cgp0cnkgewogIG1haW4oLi4uc2NyaXB0QXJncy5zbGljZSgxKSk7Cn0gY2F0Y2goZXJyb3IpIHsKICBjb25zb2xlLmxvZyhgRkFJTDogJHtlcnJvci5tZXNzYWdlfVxuJHtlcnJvci5zdGFja31gKTsKfQoAAAAAAAAAADUKAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADWCQAAAAAAAOcJAAAAAAAAAAAAAAAA8L8"
				],
				[
					139,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AgAAAFgIAAAAAAAAWQgAAAAAAAAAAAAAWQgAAAAAAABZCAAAAAAAAAEAAAAx",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABYCAAAAAAAAFkIAAAAAAAAAAAAAAAA8L8"
				],
				[
					156,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAFgGAAAAAAAAWQYAAAAAAAAAAAAAWQYAAAAAAABaBgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABYBgAAAAAAAFgGAAAAAAAAAAAAAAAA8L8"
				],
				[
					162,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAAEGAAAAAAAAAgYAAAAAAAAAAAAAAgYAAAAAAAACBgAAAAAAAH8AAAAgfQogIGNvbnNvbGUubG9nKCdyZW5kZXJlci5wYWxldHRlJywgcmVuZGVyZXIucGFsZXR0ZSk7CiAgLy9jb25zb2xlLmxvZygnc3RyJywgc3RyKTsKCiAvLyBjb25zb2xlLmxvZygncmVuZGVyJywgeyBzdmcsIHN0ciB9KTsK",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAABBgAAAAAAAIAGAAAAAAAAAAAAAAAA8L8"
				],
				[
					165,
					1,
					"insert",
					{
						"characters": "}"
					},
					"AQAAAAIGAAAAAAAAAwYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAACBgAAAAAAAAIGAAAAAAAAAAAAAAAA8L8"
				],
				[
					166,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAAMGAAAAAAAABAYAAAAAAAAAAAAABAYAAAAAAAAGBgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAADBgAAAAAAAAMGAAAAAAAAAAAAAAAA8L8"
				],
				[
					178,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAP8HAAAAAAAAAAgAAAAAAAAAAAAAAAgAAAAAAAAACAAAAAAAAB0AAAAgIGNvbnNvbGUubG9nKCdhcmdzJywgYXJncyk7Cg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD/BwAAAAAAABwIAAAAAAAAAAAAAAAA8L8"
				],
				[
					193,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAPgIAAAAAAAA+QgAAAAAAAAAAAAA+QgAAAAAAAD5CAAAAAAAAB4AAAAKICAgIGNvbnNvbGUubG9nKCdkb2MnLCBkb2MpOwo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD4CAAAAAAAABYJAAAAAAAAAAAAAAAA8L8"
				],
				[
					198,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAKUIAAAAAAAApggAAAAAAAAAAAAApggAAAAAAACoCAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAClCAAAAAAAAKUIAAAAAAAAAAAAAAAA8L8"
				],
				[
					65,
					1,
					"cut",
					null,
					"AQAAADMGAAAAAAAAMwYAAAAAAACHAAAAIHBhdGguYmFzZW5hbWUoZG9jLmZpbGVuYW1lLCAnLicgKyBkb2MudHlwZSkgKwogICAgJy0nICsKICAgIHsgc2NoOiAnc2NoZW1hdGljJywgYnJkOiAnYm9hcmQnLCBsYnI6ICdsaWJyYXJ5JyB9W2RvYy50eXBlXSArCiAgICAnLnN2Zyc7",
					"AQAAAAAAAAABAAAAMwYAAAAAAAC6BgAAAAAAAAAAAAAAAPC/"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAIQIAAAAAAAAhQgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhAgAAAAAAACECAAAAAAAAAAAAAAAAPC/"
				],
				[
					69,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIUIAAAAAAAAhggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhQgAAAAAAACFCAAAAAAAAAAAAAAAAPC/"
				],
				[
					70,
					1,
					"paste",
					null,
					"AQAAAIYIAAAAAAAADQkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhggAAAAAAACGCAAAAAAAAAAAAAAAAPC/"
				],
				[
					71,
					1,
					"left_delete",
					null,
					"AQAAAAwJAAAAAAAADAkAAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAADQkAAAAAAAANCQAAAAAAAAAAAAAAAPC/"
				],
				[
					84,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAACMGAAAAAAAAJAYAAAAAAAAAAAAAJAYAAAAAAAAkBgAAAAAAABEAAABmaWxlbmFtZSA/Pz0KICAgCg",
					"AQAAAAAAAAABAAAAIwYAAAAAAAA0BgAAAAAAAAAAAAAAAPC/"
				],
				[
					97,
					1,
					"cut",
					null,
					"AQAAAHcIAAAAAAAAdwgAAAAAAACFAAAAcGF0aC5iYXNlbmFtZShkb2MuZmlsZW5hbWUsICcuJyArIGRvYy50eXBlKSArCiAgICAnLScgKwogICAgeyBzY2g6ICdzY2hlbWF0aWMnLCBicmQ6ICdib2FyZCcsIGxicjogJ2xpYnJhcnknIH1bZG9jLnR5cGVdICsKICAgICcuc3ZnJw",
					"AQAAAAAAAAABAAAAdwgAAAAAAAD8CAAAAAAAAAAAAAAAAPC/"
				],
				[
					101,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAAGUIAAAAAAAAZggAAAAAAAAAAAAAZggAAAAAAABnCAAAAAAAAAAAAABnCAAAAAAAAGgIAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZQgAAAAAAABlCAAAAAAAAAAAAAAAwFZA"
				],
				[
					102,
					1,
					"insert",
					{
						"characters": " file="
					},
					"BgAAAGgIAAAAAAAAaQgAAAAAAAAAAAAAaQgAAAAAAABqCAAAAAAAAAAAAABqCAAAAAAAAGsIAAAAAAAAAAAAAGsIAAAAAAAAbAgAAAAAAAAAAAAAbAgAAAAAAABtCAAAAAAAAAAAAABtCAAAAAAAAG4IAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaAgAAAAAAABoCAAAAAAAAAAAAAAAAPC/"
				],
				[
					103,
					1,
					"paste",
					null,
					"AQAAAG4IAAAAAAAA8wgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbggAAAAAAABuCAAAAAAAAAAAAAAAAPC/"
				],
				[
					104,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAPMIAAAAAAAA9AgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8wgAAAAAAADzCAAAAAAAAAAAAAAAAPC/"
				],
				[
					105,
					1,
					"insert",
					{
						"characters": "\n\nif"
					},
					"BwAAAPQIAAAAAAAA9QgAAAAAAAAAAAAA9QgAAAAAAAD5CAAAAAAAAAAAAAD5CAAAAAAAAPoIAAAAAAAAAAAAAPoIAAAAAAAA/ggAAAAAAAAAAAAA9QgAAAAAAAD1CAAAAAAAAAQAAAAgICAg+ggAAAAAAAD7CAAAAAAAAAAAAAD7CAAAAAAAAPwIAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9AgAAAAAAAD0CAAAAAAAAAAAAAAAAPC/"
				],
				[
					106,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAPwIAAAAAAAA/ggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/AgAAAAAAAD8CAAAAAAAAAAAAAAAAPC/"
				],
				[
					107,
					1,
					"insert",
					{
						"characters": "params"
					},
					"BgAAAP0IAAAAAAAA/ggAAAAAAAAAAAAA/ggAAAAAAAD/CAAAAAAAAAAAAAD/CAAAAAAAAAAJAAAAAAAAAAAAAAAJAAAAAAAAAQkAAAAAAAAAAAAAAQkAAAAAAAACCQAAAAAAAAAAAAACCQAAAAAAAAMJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/QgAAAAAAAD9CAAAAAAAAAAAAAAAAPC/"
				],
				[
					108,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAAMJAAAAAAAABQkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAwkAAAAAAAADCQAAAAAAAAAAAAAAAPC/"
				],
				[
					109,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAAQJAAAAAAAABgkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABAkAAAAAAAAECQAAAAAAAAAAAAAAAPC/"
				],
				[
					110,
					1,
					"insert",
					{
						"characters": "opu"
					},
					"AwAAAAUJAAAAAAAABgkAAAAAAAAAAAAABgkAAAAAAAAHCQAAAAAAAAAAAAAHCQAAAAAAAAgJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABQkAAAAAAAAFCQAAAAAAAAAAAAAAAPC/"
				],
				[
					111,
					2,
					"left_delete",
					null,
					"AgAAAAcJAAAAAAAABwkAAAAAAAABAAAAdQYJAAAAAAAABgkAAAAAAAABAAAAcA",
					"AQAAAAAAAAABAAAACAkAAAAAAAAICQAAAAAAAAAAAAAAAPC/"
				],
				[
					112,
					1,
					"insert",
					{
						"characters": "utput-dir"
					},
					"CQAAAAYJAAAAAAAABwkAAAAAAAAAAAAABwkAAAAAAAAICQAAAAAAAAAAAAAICQAAAAAAAAkJAAAAAAAAAAAAAAkJAAAAAAAACgkAAAAAAAAAAAAACgkAAAAAAAALCQAAAAAAAAAAAAALCQAAAAAAAAwJAAAAAAAAAAAAAAwJAAAAAAAADQkAAAAAAAAAAAAADQkAAAAAAAAOCQAAAAAAAAAAAAAOCQAAAAAAAA8JAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABgkAAAAAAAAGCQAAAAAAAAAAAAAAAPC/"
				],
				[
					115,
					1,
					"insert",
					{
						"characters": "\nfile=path."
					},
					"DgAAABIJAAAAAAAAEwkAAAAAAAAAAAAAEwkAAAAAAAAXCQAAAAAAAAAAAAATCQAAAAAAABMJAAAAAAAABAAAACAgICATCQAAAAAAABkJAAAAAAAAAAAAABkJAAAAAAAAGgkAAAAAAAAAAAAAGgkAAAAAAAAbCQAAAAAAAAAAAAAbCQAAAAAAABwJAAAAAAAAAAAAABwJAAAAAAAAHQkAAAAAAAAAAAAAHQkAAAAAAAAeCQAAAAAAAAAAAAAeCQAAAAAAAB8JAAAAAAAAAAAAAB8JAAAAAAAAIAkAAAAAAAAAAAAAIAkAAAAAAAAhCQAAAAAAAAAAAAAhCQAAAAAAACIJAAAAAAAAAAAAACIJAAAAAAAAIwkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEgkAAAAAAAASCQAAAAAAAAAAAAAAAPC/"
				],
				[
					116,
					1,
					"insert",
					{
						"characters": "join"
					},
					"BAAAACMJAAAAAAAAJAkAAAAAAAAAAAAAJAkAAAAAAAAlCQAAAAAAAAAAAAAlCQAAAAAAACYJAAAAAAAAAAAAACYJAAAAAAAAJwkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIwkAAAAAAAAjCQAAAAAAAAAAAAAAAPC/"
				],
				[
					117,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAACcJAAAAAAAAKQkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJwkAAAAAAAAnCQAAAAAAAAAAAAAAAPC/"
				],
				[
					118,
					1,
					"insert",
					{
						"characters": "file"
					},
					"BAAAACgJAAAAAAAAKQkAAAAAAAAAAAAAKQkAAAAAAAAqCQAAAAAAAAAAAAAqCQAAAAAAACsJAAAAAAAAAAAAACsJAAAAAAAALAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKAkAAAAAAAAoCQAAAAAAAAAAAAAAAPC/"
				],
				[
					119,
					4,
					"left_delete",
					null,
					"BAAAACsJAAAAAAAAKwkAAAAAAAABAAAAZSoJAAAAAAAAKgkAAAAAAAABAAAAbCkJAAAAAAAAKQkAAAAAAAABAAAAaSgJAAAAAAAAKAkAAAAAAAABAAAAZg",
					"AQAAAAAAAAABAAAALAkAAAAAAAAsCQAAAAAAAAAAAAAAAPC/"
				],
				[
					120,
					1,
					"insert",
					{
						"characters": "params"
					},
					"BgAAACgJAAAAAAAAKQkAAAAAAAAAAAAAKQkAAAAAAAAqCQAAAAAAAAAAAAAqCQAAAAAAACsJAAAAAAAAAAAAACsJAAAAAAAALAkAAAAAAAAAAAAALAkAAAAAAAAtCQAAAAAAAAAAAAAtCQAAAAAAAC4JAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKAkAAAAAAAAoCQAAAAAAAAAAAAAAAPC/"
				],
				[
					121,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAC4JAAAAAAAAMAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALgkAAAAAAAAuCQAAAAAAAAAAAAAAAPC/"
				],
				[
					122,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAC8JAAAAAAAAMQkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALwkAAAAAAAAvCQAAAAAAAAAAAAAAAPC/"
				],
				[
					123,
					1,
					"insert",
					{
						"characters": "output-dir"
					},
					"CgAAADAJAAAAAAAAMQkAAAAAAAAAAAAAMQkAAAAAAAAyCQAAAAAAAAAAAAAyCQAAAAAAADMJAAAAAAAAAAAAADMJAAAAAAAANAkAAAAAAAAAAAAANAkAAAAAAAA1CQAAAAAAAAAAAAA1CQAAAAAAADYJAAAAAAAAAAAAADYJAAAAAAAANwkAAAAAAAAAAAAANwkAAAAAAAA4CQAAAAAAAAAAAAA4CQAAAAAAADkJAAAAAAAAAAAAADkJAAAAAAAAOgkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMAkAAAAAAAAwCQAAAAAAAAAAAAAAAPC/"
				],
				[
					125,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAADwJAAAAAAAAPQkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPAkAAAAAAAA8CQAAAAAAAAAAAAAAAPC/"
				],
				[
					126,
					1,
					"insert",
					{
						"characters": " fiole"
					},
					"BgAAAD0JAAAAAAAAPgkAAAAAAAAAAAAAPgkAAAAAAAA/CQAAAAAAAAAAAAA/CQAAAAAAAEAJAAAAAAAAAAAAAEAJAAAAAAAAQQkAAAAAAAAAAAAAQQkAAAAAAABCCQAAAAAAAAAAAABCCQAAAAAAAEMJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPQkAAAAAAAA9CQAAAAAAAAAAAAAAAPC/"
				],
				[
					127,
					3,
					"left_delete",
					null,
					"AwAAAEIJAAAAAAAAQgkAAAAAAAABAAAAZUEJAAAAAAAAQQkAAAAAAAABAAAAbEAJAAAAAAAAQAkAAAAAAAABAAAAbw",
					"AQAAAAAAAAABAAAAQwkAAAAAAABDCQAAAAAAAAAAAAAAAPC/"
				],
				[
					128,
					1,
					"insert",
					{
						"characters": "le"
					},
					"AgAAAEAJAAAAAAAAQQkAAAAAAAAAAAAAQQkAAAAAAABCCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQAkAAAAAAABACQAAAAAAAAAAAAAAAPC/"
				],
				[
					130,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAEMJAAAAAAAARAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQwkAAAAAAABDCQAAAAAAAAAAAAAAAPC/"
				],
				[
					131,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAAEQJAAAAAAAARQkAAAAAAAAAAAAARQkAAAAAAABLCQAAAAAAAAAAAABFCQAAAAAAAEUJAAAAAAAABgAAACAgICAgIEUJAAAAAAAASQkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARAkAAAAAAABECQAAAAAAAAAAAAAAAPC/"
				],
				[
					135,
					1,
					"insert",
					{
						"characters": "file"
					},
					"BQAAAFsJAAAAAAAAXAkAAAAAAAAAAAAARQkAAAAAAABFCQAAAAAAAAQAAAAgICAgWAkAAAAAAABZCQAAAAAAAAAAAABZCQAAAAAAAFoJAAAAAAAAAAAAAFoJAAAAAAAAWwkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWwkAAAAAAABbCQAAAAAAAAAAAAAAAPC/"
				],
				[
					138,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADXCQAAIyEvdXNyL2Jpbi9lbnYgcWpzbQppbXBvcnQgKiBhcyB1dGlsIGZyb20gJy4vbGliL21pc2MuanMnOwppbXBvcnQgKiBhcyBkZWVwIGZyb20gJy4vbGliL2RlZXAuanMnOwppbXBvcnQgKiBhcyBwYXRoIGZyb20gJy4vbGliL3BhdGguanMnOwppbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7CmltcG9ydCB7IGxvZywgRWFnbGVEb2N1bWVudCwgUmVuZGVyZXIsIEVhZ2xlUHJvamVjdCB9IGZyb20gJy4vbGliL2VhZ2xlLmpzJzsKaW1wb3J0IHJlcXVpcmUgZnJvbSAncmVxdWlyZSc7CmltcG9ydCB7IENvbnNvbGUgfSBmcm9tICdjb25zb2xlJzsKaW1wb3J0IHsgcmVhZCBhcyBmcm9tWE1MLCB3cml0ZSBhcyB0b1hNTCB9IGZyb20gJy4vbGliL3htbC5qcyc7CmltcG9ydCB7IFdyaXRlRmlsZSB9IGZyb20gJy4vaW8taGVscGVycy5qcyc7CmltcG9ydCB7IGdldE9wdCB9IGZyb20gJ3V0aWwnOwppbXBvcnQgeyByZWFkRmlsZVN5bmMgfSBmcm9tICdmcyc7CmltcG9ydCB7IFJlYWN0Q29tcG9uZW50LCByZW5kZXIgfSBmcm9tICcuL2xpYi9kb20vcHJlYWN0Q29tcG9uZW50LmpzJzsKaW1wb3J0IHJlbmRlclRvU3RyaW5nIGZyb20gJy4vbGliL3ByZWFjdC1yZW5kZXItdG8tc3RyaW5nLmpzJzsKaW1wb3J0IHsgUkdCQSwgaXNSR0JBLCBJbW11dGFibGVSR0JBLCBkZWZhdWx0IGFzIHJnYmEgfSBmcm9tICcuL2xpYi9jb2xvci9yZ2JhLmpzJzsKCmxldCBkZWJ1Z0ZsYWcgPSBmYWxzZTsKCmZ1bmN0aW9uIHJlbmRlcihkb2MsIGZpbGVuYW1lKSB7CiAgaWYoZG9jIGluc3RhbmNlb2YgRWFnbGVQcm9qZWN0KSB7CiAgICByZW5kZXIoZG9jLnNjaGVtYXRpYyk7CiAgICByZW5kZXIoZG9jLmJvYXJkKTsKICAgIHJldHVybjsKICB9CiAgbGV0IHJlbmRlcmVyID0gbmV3IFJlbmRlcmVyKGRvYywgUmVhY3RDb21wb25lbnQuYXBwZW5kLCBkZWJ1Z0ZsYWcpOwoKICAvKiByZW5kZXJlci5zZXRQYWxldHRlKFsKICAgIFsweGZmLCAweGZmLCAweGZmXSwKICAgIFsweDRiLCAweDRiLCAweGE1XSwKICAgIFswLCAwLCAwXSwKICAgIFsweDRiLCAweGE1LCAweGE1XSwKICAgIFswLCAwLCAwXSwKICAgIFsweGE1LCAweDRiLCAweGE1XSwKICAgIFsweGE1LCAweGE1LCAweDRiXSwKICAgIFswLCAwLCAwXSwKICAgIFsweDRiLCAweDRiLCAweGZmXSwKICAgIFsweDRiLCAweGZmLCAweDRiXSwKICAgIFsweDRiLCAweGZmLCAweGZmXSwKICAgIFsweGZmLCAweDRiLCAweDRiXSwKICAgIFsweGZmLCAweDRiLCAweGZmXSwKICAgIFsweGZmLCAweGZmLCAweDRiXSwKICAgIFsweDRiLCAweDRiLCAweDRiXSwKICAgIFsweGE1LCAweGE1LCAweGE1XSwKICAgIFswLCAwLCAwXQogIF0ubWFwKChbcixnLGJdKSA9PiBuZXcgUkdCQShyLGcsYikpKTsqLwoKICBsZXQgc3RyOwogIGxldCBzdmcgPSByZW5kZXJlci5yZW5kZXIoZG9jKTsKICB0cnkgewogICAgc3RyID0gcmVuZGVyVG9TdHJpbmcoc3ZnKTsKICB9IGNhdGNoKGUpIHsKICAgIGNvbnNvbGUubG9nKCdFUlJPUjonLCBlKTsKICAgIGNvbnNvbGUubG9nKCdTVEFDSzonLCBlLnN0YWNrKTsKICB9CiAgICBsZXQgeG1sID0gZnJvbVhNTChzdHIpOwoKICAgCiAgaWYoZmlsZW5hbWUpIHsKICAgIGxldCByZXQ7CiAgICByZXQgPSBXcml0ZUZpbGUoZmlsZW5hbWUsIChzdHIgPSB0b1hNTCh4bWwpKSk7CiAgICBjb25zb2xlLmxvZyhgU2F2aW5nIHRvICcke2ZpbGVuYW1lfScuLi5gLCByZXQpOwogIH0KICByZXR1cm4gc3RyOwp9CgpmdW5jdGlvbiBtYWluKC4uLmFyZ3MpIHsKICBnbG9iYWxUaGlzLmNvbnNvbGUgPSBuZXcgQ29uc29sZSh7CiAgICBpbnNwZWN0T3B0aW9uczogeyBtYXhBcnJheUxlbmd0aDogMTAwLCBjb2xvcnM6IHRydWUsIGRlcHRoOiAyLCBjb21wYWN0OiAwLCBjdXN0b21JbnNwZWN0OiB0cnVlIH0KICB9KTsKIAogIGxldCBwYXJhbXMgPSBnZXRPcHQoCiAgICB7CiAgICAgIGRlYnVnOiBbZmFsc2UsIHZhbHVlID0+IChkZWJ1Z0ZsYWcgPSB2YWx1ZSksICd4J10sCiAgICAgICdvdXRwdXQtZGlyJzogW3RydWUsIG51bGwsICdkJ10sCiAgICAgICdAJzogJ2lucHV0JwogICAgfSwKICAgIGFyZ3MKICApOwogIAogIGZvcihsZXQgYXJnIG9mIGFyZ3MpIHsKICAgIGxldCBkb2MgPSBFYWdsZURvY3VtZW50Lm9wZW4oYXJnLCB7IHJlYWRGaWxlU3luYyB9KTsKIGxldCBmaWxlPXBhdGguYmFzZW5hbWUoZG9jLmZpbGVuYW1lLCAnLicgKyBkb2MudHlwZSkgKwogICAgJy0nICsKICAgIHsgc2NoOiAnc2NoZW1hdGljJywgYnJkOiAnYm9hcmQnLCBsYnI6ICdsaWJyYXJ5JyB9W2RvYy50eXBlXSArCiAgICAnLnN2Zyc7CgogICAgaWYocGFyYW1zWydvdXRwdXQtZGlyJ10pCiAgICAgIGZpbGU9cGF0aC5qb2luKHBhcmFtc1snb3V0cHV0LWRpciddLCBmaWxlKTsKCiAgICByZW5kZXIoZG9jLCAgZmlsZSk7CiAgfQp9Cgp0cnkgewogIG1haW4oLi4uc2NyaXB0QXJncy5zbGljZSgxKSk7Cn0gY2F0Y2goZXJyb3IpIHsKICBjb25zb2xlLmxvZyhgRkFJTDogJHtlcnJvci5tZXNzYWdlfVxuJHtlcnJvci5zdGFja31gKTsKfQoAAAAAAAAAAMIJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWwkAAAAAAABbCQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "quickjs/qjs-modules/src/qjsm.c",
			"settings":
			{
				"buffer_size": 46181,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/eagle/svgRenderer.js",
			"settings":
			{
				"buffer_size": 11951,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					13,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAOsIAAAAAAAA7AgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADrCAAAAAAAAOsIAAAAAAAAAAAAAAAAAAA"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAKYIAAAAAAAApwgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACmCAAAAAAAAKYIAAAAAAAAAAAAAAAAAAA"
				],
				[
					17,
					3,
					"right_delete",
					null,
					"AwAAAK4IAAAAAAAArggAAAAAAAABAAAAIK4IAAAAAAAArggAAAAAAAABAAAAL64IAAAAAAAArggAAAAAAAABAAAALw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACuCAAAAAAAAK4IAAAAAAAAAAAAAAAA8L8"
				],
				[
					20,
					9,
					"left_delete",
					null,
					"CQAAAOQIAAAAAAAA5AgAAAAAAAABAAAAIOMIAAAAAAAA4wgAAAAAAAABAAAAL+IIAAAAAAAA4ggAAAAAAAABAAAAKuEIAAAAAAAA4QgAAAAAAAABAAAAZuAIAAAAAAAA4AgAAAAAAAABAAAAZd8IAAAAAAAA3wgAAAAAAAABAAAAct4IAAAAAAAA3ggAAAAAAAABAAAALN0IAAAAAAAA3QgAAAAAAAABAAAAKtwIAAAAAAAA3AgAAAAAAAABAAAALw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADlCAAAAAAAAOUIAAAAAAAAAAAAAAAA8L8"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAN0IAAAAAAAA3ggAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADdCAAAAAAAAN0IAAAAAAAAAAAAAAAA8L8"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": " path.pa"
					},
					"CAAAAN4IAAAAAAAA3wgAAAAAAAAAAAAA3wgAAAAAAADgCAAAAAAAAAAAAADgCAAAAAAAAOEIAAAAAAAAAAAAAOEIAAAAAAAA4ggAAAAAAAAAAAAA4ggAAAAAAADjCAAAAAAAAAAAAADjCAAAAAAAAOQIAAAAAAAAAAAAAOQIAAAAAAAA5QgAAAAAAAAAAAAA5QgAAAAAAADmCAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADeCAAAAAAAAN4IAAAAAAAAAAAAAAAA8L8"
				],
				[
					28,
					2,
					"left_delete",
					null,
					"AgAAAOUIAAAAAAAA5QgAAAAAAAABAAAAYeQIAAAAAAAA5AgAAAAAAAABAAAAcA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADmCAAAAAAAAOYIAAAAAAAAAAAAAAAA8L8"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": "apply"
					},
					"BQAAAOQIAAAAAAAA5QgAAAAAAAAAAAAA5QgAAAAAAADmCAAAAAAAAAAAAADmCAAAAAAAAOcIAAAAAAAAAAAAAOcIAAAAAAAA6AgAAAAAAAAAAAAA6AgAAAAAAADpCAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADkCAAAAAAAAOQIAAAAAAAAAAAAAAAA8L8"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "m"
					},
					"AQAAAOkIAAAAAAAA6ggAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADpCAAAAAAAAOkIAAAAAAAAAAAAAAAA8L8"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOoIAAAAAAAA6wgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADqCAAAAAAAAOoIAAAAAAAAAAAAAAAA8L8"
				],
				[
					34,
					2,
					"left_delete",
					null,
					"AgAAAOoIAAAAAAAA6ggAAAAAAAABAAAAIOkIAAAAAAAA6QgAAAAAAAABAAAAbQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADrCAAAAAAAAOsIAAAAAAAAAAAAAAAA8L8"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAOkIAAAAAAAA6ggAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADpCAAAAAAAAOkIAAAAAAAAAAAAAAAA8L8"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": " util:"
					},
					"BgAAAOoIAAAAAAAA6wgAAAAAAAAAAAAA6wgAAAAAAADsCAAAAAAAAAAAAADsCAAAAAAAAO0IAAAAAAAAAAAAAO0IAAAAAAAA7ggAAAAAAAAAAAAA7ggAAAAAAADvCAAAAAAAAAAAAADvCAAAAAAAAPAIAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADqCAAAAAAAAOoIAAAAAAAAAAAAAAAA8L8"
				],
				[
					37,
					1,
					"left_delete",
					null,
					"AQAAAO8IAAAAAAAA7wgAAAAAAAABAAAAOg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADwCAAAAAAAAPAIAAAAAAAAAAAAAAAA8L8"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": ".getMethodNames"
					},
					"DwAAAO8IAAAAAAAA8AgAAAAAAAAAAAAA8AgAAAAAAADxCAAAAAAAAAAAAADxCAAAAAAAAPIIAAAAAAAAAAAAAPIIAAAAAAAA8wgAAAAAAAAAAAAA8wgAAAAAAAD0CAAAAAAAAAAAAAD0CAAAAAAAAPUIAAAAAAAAAAAAAPUIAAAAAAAA9ggAAAAAAAAAAAAA9ggAAAAAAAD3CAAAAAAAAAAAAAD3CAAAAAAAAPgIAAAAAAAAAAAAAPgIAAAAAAAA+QgAAAAAAAAAAAAA+QgAAAAAAAD6CAAAAAAAAAAAAAD6CAAAAAAAAPsIAAAAAAAAAAAAAPsIAAAAAAAA/AgAAAAAAAAAAAAA/AgAAAAAAAD9CAAAAAAAAAAAAAD9CAAAAAAAAP4IAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADvCAAAAAAAAO8IAAAAAAAAAAAAAAAA8L8"
				],
				[
					39,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAP4IAAAAAAAAAAkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD+CAAAAAAAAP4IAAAAAAAAAAAAAAAA8L8"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": "path"
					},
					"BAAAAP8IAAAAAAAAAAkAAAAAAAAAAAAAAAkAAAAAAAABCQAAAAAAAAAAAAABCQAAAAAAAAIJAAAAAAAAAAAAAAIJAAAAAAAAAwkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD/CAAAAAAAAP8IAAAAAAAAAAAAAAAA8L8"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAAMJAAAAAAAABAkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAADCQAAAAAAAAMJAAAAAAAAAAAAAAAA8L8"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": " 2,0"
					},
					"BAAAAAQJAAAAAAAABQkAAAAAAAAAAAAABQkAAAAAAAAGCQAAAAAAAAAAAAAGCQAAAAAAAAcJAAAAAAAAAAAAAAcJAAAAAAAACAkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAECQAAAAAAAAQJAAAAAAAAAAAAAAAA8L8"
				],
				[
					50,
					1,
					"left_delete",
					null,
					"AQAAAAUJAAAAAAAABQkAAAAAAAABAAAAMg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAGCQAAAAAAAAYJAAAAAAAAAAAAAAAA8L8"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAAAUJAAAAAAAABgkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAFCQAAAAAAAAUJAAAAAAAAAAAAAAAA8L8"
				],
				[
					54,
					1,
					"left_delete",
					null,
					"AQAAAAUJAAAAAAAABQkAAAAAAAABAAAAMQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAGCQAAAAAAAAYJAAAAAAAAAAAAAAAA8L8"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AQAAAAUJAAAAAAAABgkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAFCQAAAAAAAAUJAAAAAAAAAAAAAAAA8L8"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": "deref"
					},
					"BgAAADIJAAAAAAAAMwkAAAAAAAAAAAAAMwkAAAAAAAAzCQAAAAAAAAUAAABhcHBseTMJAAAAAAAANAkAAAAAAAAAAAAANAkAAAAAAAA1CQAAAAAAAAAAAAA1CQAAAAAAADYJAAAAAAAAAAAAADYJAAAAAAAANwkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAyCQAAAAAAADcJAAAAAAAAAAAAAAAA8L8"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAK4IAAAAAAAArwgAAAAAAAAAAAAArwgAAAAAAACwCAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACuCAAAAAAAAK4IAAAAAAAAAAAAAACASEA"
				],
				[
					82,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAJcJAAAAAAAAmAkAAAAAAAAAAAAAmAkAAAAAAACgCQAAAAAAAAAAAACgCQAAAAAAAKEJAAAAAAAAAAAAAKEJAAAAAAAAqQkAAAAAAAAAAAAAmAkAAAAAAACYCQAAAAAAAAgAAAAgICAgICAgIJgJAAAAAAAAogkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACXCQAAAAAAAJcJAAAAAAAAAAAAAAAA8L8"
				],
				[
					85,
					1,
					"paste",
					null,
					"AQAAAKIJAAAAAAAA2wkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACiCQAAAAAAAKIJAAAAAAAAAAAAAAAA8L8"
				],
				[
					107,
					1,
					"paste",
					null,
					"AgAAALEJAAAAAAAAyQkAAAAAAAAAAAAAyQkAAAAAAADJCQAAAAAAAAQAAABGQUlM",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACxCQAAAAAAALUJAAAAAAAAAAAAAAAA8L8"
				],
				[
					108,
					6,
					"left_delete",
					null,
					"BgAAAMgJAAAAAAAAyAkAAAAAAAABAAAAJ8cJAAAAAAAAxwkAAAAAAAABAAAAZcYJAAAAAAAAxgkAAAAAAAABAAAAdMUJAAAAAAAAxQkAAAAAAAABAAAAYcQJAAAAAAAAxAkAAAAAAAABAAAAZcMJAAAAAAAAwwkAAAAAAAABAAAAcg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADJCQAAAAAAAMkJAAAAAAAAAAAAAAAA8L8"
				],
				[
					109,
					1,
					"insert",
					{
						"characters": "onstructor"
					},
					"CgAAAMMJAAAAAAAAxAkAAAAAAAAAAAAAxAkAAAAAAADFCQAAAAAAAAAAAADFCQAAAAAAAMYJAAAAAAAAAAAAAMYJAAAAAAAAxwkAAAAAAAAAAAAAxwkAAAAAAADICQAAAAAAAAAAAADICQAAAAAAAMkJAAAAAAAAAAAAAMkJAAAAAAAAygkAAAAAAAAAAAAAygkAAAAAAADLCQAAAAAAAAAAAADLCQAAAAAAAMwJAAAAAAAAAAAAAMwJAAAAAAAAzQkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADDCQAAAAAAAMMJAAAAAAAAAAAAAAAA8L8"
				],
				[
					110,
					1,
					"insert",
					{
						"characters": " ERROR:"
					},
					"BwAAAM0JAAAAAAAAzgkAAAAAAAAAAAAAzgkAAAAAAADPCQAAAAAAAAAAAADPCQAAAAAAANAJAAAAAAAAAAAAANAJAAAAAAAA0QkAAAAAAAAAAAAA0QkAAAAAAADSCQAAAAAAAAAAAADSCQAAAAAAANMJAAAAAAAAAAAAANMJAAAAAAAA1AkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADNCQAAAAAAAM0JAAAAAAAAAAAAAAAA8L8"
				],
				[
					111,
					1,
					"right_delete",
					null,
					"AQAAANQJAAAAAAAA1AkAAAAAAAABAAAAOg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADUCQAAAAAAANQJAAAAAAAAAAAAAAAA8L8"
				],
				[
					115,
					1,
					"left_delete",
					null,
					"AQAAAPgJAAAAAAAA+AkAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD5CQAAAAAAAPkJAAAAAAAAAAAAAABAekA"
				],
				[
					121,
					1,
					"insert",
					{
						"characters": "er"
					},
					"AgAAAJQJAAAAAAAAlQkAAAAAAAAAAAAAlQkAAAAAAACWCQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACUCQAAAAAAAJQJAAAAAAAAAAAAAAAA8L8"
				],
				[
					122,
					2,
					"left_delete",
					null,
					"AgAAAJUJAAAAAAAAlQkAAAAAAAABAAAAcpQJAAAAAAAAlAkAAAAAAAABAAAAZQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACWCQAAAAAAAJYJAAAAAAAAAAAAAAAA8L8"
				],
				[
					123,
					1,
					"insert",
					{
						"characters": "rror"
					},
					"BAAAAJQJAAAAAAAAlQkAAAAAAAAAAAAAlQkAAAAAAACWCQAAAAAAAAAAAACWCQAAAAAAAJcJAAAAAAAAAAAAAJcJAAAAAAAAmAkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACUCQAAAAAAAJQJAAAAAAAAAAAAAAAA8L8"
				],
				[
					150,
					1,
					"insert",
					{
						"characters": " patrh"
					},
					"BgAAAC4JAAAAAAAALwkAAAAAAAAAAAAALwkAAAAAAAAwCQAAAAAAAAAAAAAwCQAAAAAAADEJAAAAAAAAAAAAADEJAAAAAAAAMgkAAAAAAAAAAAAAMgkAAAAAAAAzCQAAAAAAAAAAAAAzCQAAAAAAADQJAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAuCQAAAAAAAC4JAAAAAAAAAAAAAAAA8L8"
				],
				[
					151,
					2,
					"left_delete",
					null,
					"AgAAADMJAAAAAAAAMwkAAAAAAAABAAAAaDIJAAAAAAAAMgkAAAAAAAABAAAAcg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA0CQAAAAAAADQJAAAAAAAAAAAAAAAA8L8"
				],
				[
					152,
					1,
					"insert",
					{
						"characters": "h.reduce"
					},
					"CAAAADIJAAAAAAAAMwkAAAAAAAAAAAAAMwkAAAAAAAA0CQAAAAAAAAAAAAA0CQAAAAAAADUJAAAAAAAAAAAAADUJAAAAAAAANgkAAAAAAAAAAAAANgkAAAAAAAA3CQAAAAAAAAAAAAA3CQAAAAAAADgJAAAAAAAAAAAAADgJAAAAAAAAOQkAAAAAAAAAAAAAOQkAAAAAAAA6CQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAyCQAAAAAAADIJAAAAAAAAAAAAAAAA8L8"
				],
				[
					153,
					2,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AgAAADoJAAAAAAAAPAkAAAAAAAAAAAAAOwkAAAAAAAA9CQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA6CQAAAAAAADoJAAAAAAAAAAAAAAAA8L8"
				],
				[
					154,
					1,
					"insert",
					{
						"characters": "acc,p"
					},
					"BQAAADwJAAAAAAAAPQkAAAAAAAAAAAAAPQkAAAAAAAA+CQAAAAAAAAAAAAA+CQAAAAAAAD8JAAAAAAAAAAAAAD8JAAAAAAAAQAkAAAAAAAAAAAAAQAkAAAAAAABBCQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA8CQAAAAAAADwJAAAAAAAAAAAAAAAA8L8"
				],
				[
					156,
					1,
					"insert",
					{
						"characters": " =>"
					},
					"AwAAAEIJAAAAAAAAQwkAAAAAAAAAAAAAQwkAAAAAAABECQAAAAAAAAAAAABECQAAAAAAAEUJAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABCCQAAAAAAAEIJAAAAAAAAAAAAAAAA8L8"
				],
				[
					157,
					1,
					"insert",
					{
						"characters": "  "
					},
					"AgAAAEUJAAAAAAAARgkAAAAAAAAAAAAARgkAAAAAAABHCQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABFCQAAAAAAAEUJAAAAAAAAAAAAAAAA8L8"
				],
				[
					158,
					1,
					"insert",
					{
						"characters": "acc"
					},
					"AwAAAEcJAAAAAAAASAkAAAAAAAAAAAAASAkAAAAAAABJCQAAAAAAAAAAAABJCQAAAAAAAEoJAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABHCQAAAAAAAEcJAAAAAAAAAAAAAAAA8L8"
				],
				[
					159,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAEoJAAAAAAAATAkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABKCQAAAAAAAEoJAAAAAAAAAAAAAAAA8L8"
				],
				[
					160,
					1,
					"insert",
					{
						"characters": "op"
					},
					"AgAAAEsJAAAAAAAATAkAAAAAAAAAAAAATAkAAAAAAABNCQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABLCQAAAAAAAEsJAAAAAAAAAAAAAAAA8L8"
				],
				[
					161,
					2,
					"left_delete",
					null,
					"AgAAAEwJAAAAAAAATAkAAAAAAAABAAAAcEsJAAAAAAAASwkAAAAAAAABAAAAbw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABNCQAAAAAAAE0JAAAAAAAAAAAAAAAA8L8"
				],
				[
					162,
					1,
					"insert",
					{
						"characters": "p"
					},
					"AQAAAEsJAAAAAAAATAkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABLCQAAAAAAAEsJAAAAAAAAAAAAAAAA8L8"
				],
				[
					164,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAE0JAAAAAAAATgkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABNCQAAAAAAAE0JAAAAAAAAAAAAAAAA8L8"
				],
				[
					165,
					1,
					"insert",
					{
						"characters": " doc"
					},
					"BAAAAE4JAAAAAAAATwkAAAAAAAAAAAAATwkAAAAAAABQCQAAAAAAAAAAAABQCQAAAAAAAFEJAAAAAAAAAAAAAFEJAAAAAAAAUgkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABOCQAAAAAAAE4JAAAAAAAAAAAAAAAA8L8"
				],
				[
					167,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAFMJAAAAAAAAVAkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABTCQAAAAAAAFMJAAAAAAAAAAAAAAAA8L8"
				],
				[
					168,
					1,
					"insert",
					{
						"characters": " &//"
					},
					"BAAAAFQJAAAAAAAAVQkAAAAAAAAAAAAAVQkAAAAAAABWCQAAAAAAAAAAAABWCQAAAAAAAFcJAAAAAAAAAAAAAFcJAAAAAAAAWAkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABUCQAAAAAAAFQJAAAAAAAAAAAAAAAA8L8"
				],
				[
					169,
					3,
					"left_delete",
					null,
					"AwAAAFcJAAAAAAAAVwkAAAAAAAABAAAAL1YJAAAAAAAAVgkAAAAAAAABAAAAL1UJAAAAAAAAVQkAAAAAAAABAAAAJg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABYCQAAAAAAAFgJAAAAAAAAAAAAAAAA8L8"
				],
				[
					170,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAFUJAAAAAAAAVgkAAAAAAAAAAAAAVgkAAAAAAABXCQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABVCQAAAAAAAFUJAAAAAAAAAAAAAAAA8L8"
				],
				[
					192,
					1,
					"insert",
					{
						"characters": "[..."
					},
					"BAAAAC8JAAAAAAAAMAkAAAAAAAAAAAAAMAkAAAAAAAAxCQAAAAAAAAAAAAAxCQAAAAAAADIJAAAAAAAAAAAAADIJAAAAAAAAMwkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAvCQAAAAAAAC8JAAAAAAAAAAAAAAAA8L8"
				],
				[
					194,
					1,
					"insert",
					{
						"characters": "]"
					},
					"AQAAADcJAAAAAAAAOAkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA3CQAAAAAAADcJAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "quickjs/qjs-modules/lib/util.js",
			"settings":
			{
				"buffer_size": 63358,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "quickjs/qjs-modules/quickjs-misc.c",
			"settings":
			{
				"buffer_size": 73446,
				"line_ending": "Unix"
			}
		},
		{
			"file": "quickjs/qjs-modules/resolve-imports.js",
			"settings":
			{
				"buffer_size": 54817,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/geom/graph.js",
			"settings":
			{
				"buffer_size": 11141,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "lib/json/path.js",
			"settings":
			{
				"buffer_size": 18898,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "quickjs/qjs-modules/lib/extendArray.js",
			"settings":
			{
				"buffer_size": 4304,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/xml/parse.js",
			"settings":
			{
				"buffer_size": 7066,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					15,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAH0bAAAAAAAAfxsAAAAAAAAAAAAA2RoAAAAAAADbGgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB9GwAAAAAAANkaAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "lib/json/util.js",
			"settings":
			{
				"buffer_size": 2514,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					14,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAM0JAAAAAAAAzwkAAAAAAAAAAAAA5AgAAAAAAADmCAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADNCQAAAAAAAOQIAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "quickjs/qjs-modules/src/utils.c",
			"settings":
			{
				"buffer_size": 93358,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					19,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAGv8AAAAAAAAbPwAAAAAAAAAAAAAbPwAAAAAAABu/AAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABr/AAAAAAAAGv8AAAAAAAAAAAAAABgYkA"
				],
				[
					37,
					1,
					"left_delete",
					null,
					"AgAAAK/6AAAAAAAAr/oAAAAAAAABAAAAL2v8AAAAAAAAa/wAAAAAAAACAAAAICA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACw+gAAAAAAALD6AAAAAAAAAAAAAAAA8L8"
				],
				[
					38,
					1,
					"right_delete",
					null,
					"AQAAAK/6AAAAAAAAr/oAAAAAAAABAAAALw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACv+gAAAAAAAK/6AAAAAAAAAAAAAAAA8L8"
				],
				[
					40,
					1,
					"right_delete",
					null,
					"AQAAAMb6AAAAAAAAxvoAAAAAAAABAAAAXA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADG+gAAAAAAAMb6AAAAAAAAAAAAAAAA8L8"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMb6AAAAAAAAx/oAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADG+gAAAAAAAMb6AAAAAAAAAAAAAAAA8L8"
				],
				[
					42,
					1,
					"right_delete",
					null,
					"AQAAAMf6AAAAAAAAx/oAAAAAAAABAAAAbg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADH+gAAAAAAAMf6AAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "lib/geom/transformation.js",
			"settings":
			{
				"buffer_size": 21591,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					10,
					1,
					"insert",
					{
						"characters": "matrix="
					},
					"BwAAANgVAAAAAAAA2RUAAAAAAAAAAAAA2RUAAAAAAADaFQAAAAAAAAAAAADaFQAAAAAAANsVAAAAAAAAAAAAANsVAAAAAAAA3BUAAAAAAAAAAAAA3BUAAAAAAADdFQAAAAAAAAAAAADdFQAAAAAAAN4VAAAAAAAAAAAAAN4VAAAAAAAA3xUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADYFQAAAAAAANgVAAAAAAAAAAAAAAAA8L8"
				],
				[
					12,
					6,
					"right_delete",
					null,
					"BgAAAOwVAAAAAAAA7BUAAAAAAAABAAAAdOwVAAAAAAAA7BUAAAAAAAABAAAAZewVAAAAAAAA7BUAAAAAAAABAAAAU+wVAAAAAAAA7BUAAAAAAAABAAAAZewVAAAAAAAA7BUAAAAAAAABAAAAbOwVAAAAAAAA7BUAAAAAAAABAAAAZg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADsFQAAAAAAAOwVAAAAAAAAAAAAAAAA8L8"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "te"
					},
					"AgAAAOwVAAAAAAAA7RUAAAAAAAAAAAAA7RUAAAAAAADuFQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADsFQAAAAAAAOwVAAAAAAAAAAAAAAAA8L8"
				],
				[
					24,
					4,
					"right_delete",
					null,
					"BAAAAEgWAAAAAAAASBYAAAAAAAABAAAAU0gWAAAAAAAASBYAAAAAAAABAAAAZUgWAAAAAAAASBYAAAAAAAABAAAAbEgWAAAAAAAASBYAAAAAAAABAAAAZg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABIFgAAAAAAAEgWAAAAAAAAAAAAAAAA8L8"
				],
				[
					29,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABIFgAAAAAAAEgWAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					4,
					"right_delete",
					null,
					"BAAAAHEiAAAAAAAAcSIAAAAAAAABAAAAU3EiAAAAAAAAcSIAAAAAAAABAAAAZXEiAAAAAAAAcSIAAAAAAAABAAAAbHEiAAAAAAAAcSIAAAAAAAABAAAAZg",
					"AQAAAAAAAAABAAAAcSIAAAAAAABxIgAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": "matrix="
					},
					"BwAAAM0VAAAAAAAAzhUAAAAAAAAAAAAAzhUAAAAAAADPFQAAAAAAAAAAAADPFQAAAAAAANAVAAAAAAAAAAAAANAVAAAAAAAA0RUAAAAAAAAAAAAA0RUAAAAAAADSFQAAAAAAAAAAAADSFQAAAAAAANMVAAAAAAAAAAAAANMVAAAAAAAA1BUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzRUAAAAAAADNFQAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					4,
					"right_delete",
					null,
					"BAAAAOQVAAAAAAAA5BUAAAAAAAABAAAAU+QVAAAAAAAA5BUAAAAAAAABAAAAZeQVAAAAAAAA5BUAAAAAAAABAAAAbOQVAAAAAAAA5BUAAAAAAAABAAAAZg",
					"AQAAAAAAAAABAAAA5BUAAAAAAADkFQAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": "matrix="
					},
					"BwAAAEcWAAAAAAAASBYAAAAAAAAAAAAASBYAAAAAAABJFgAAAAAAAAAAAABJFgAAAAAAAEoWAAAAAAAAAAAAAEoWAAAAAAAASxYAAAAAAAAAAAAASxYAAAAAAABMFgAAAAAAAAAAAABMFgAAAAAAAE0WAAAAAAAAAAAAAE0WAAAAAAAAThYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARxYAAAAAAABHFgAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					4,
					"right_delete",
					null,
					"BAAAAF4WAAAAAAAAXhYAAAAAAAABAAAAU14WAAAAAAAAXhYAAAAAAAABAAAAZV4WAAAAAAAAXhYAAAAAAAABAAAAbF4WAAAAAAAAXhYAAAAAAAABAAAAZg",
					"AQAAAAAAAAABAAAAXhYAAAAAAABeFgAAAAAAAAAAAAAAAPC/"
				],
				[
					62,
					4,
					"right_delete",
					null,
					"BAAAAPUnAAAAAAAA9ScAAAAAAAABAAAAU/UnAAAAAAAA9ScAAAAAAAABAAAAZfUnAAAAAAAA9ScAAAAAAAABAAAAbPUnAAAAAAAA9ScAAAAAAAABAAAAZg",
					"AQAAAAAAAAABAAAA9ScAAAAAAAD1JwAAAAAAAAAAAAAAAPC/"
				],
				[
					71,
					1,
					"insert",
					{
						"characters": "Self"
					},
					"BAAAAPUnAAAAAAAA9icAAAAAAAAAAAAA9icAAAAAAAD3JwAAAAAAAAAAAAD3JwAAAAAAAPgnAAAAAAAAAAAAAPgnAAAAAAAA+ScAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9ScAAAAAAAD1JwAAAAAAAAAAAAAAAPC/"
				],
				[
					78,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA+ScAAAAAAAD5JwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/eagle/node.js",
			"settings":
			{
				"buffer_size": 16500,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					13,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAALUpAAAAAAAAtikAAAAAAAAAAAAAtikAAAAAAAC6KQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtSkAAAAAAAC1KQAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": " this.constructor"
					},
					"EgAAAKcpAAAAAAAAqCkAAAAAAAAAAAAAtykAAAAAAAC3KQAAAAAAAAQAAAAgICAgqCkAAAAAAACpKQAAAAAAAAAAAACpKQAAAAAAAKopAAAAAAAAAAAAAKopAAAAAAAAqykAAAAAAAAAAAAAqykAAAAAAACsKQAAAAAAAAAAAACsKQAAAAAAAK0pAAAAAAAAAAAAAK0pAAAAAAAArikAAAAAAAAAAAAArikAAAAAAACvKQAAAAAAAAAAAACvKQAAAAAAALApAAAAAAAAAAAAALApAAAAAAAAsSkAAAAAAAAAAAAAsSkAAAAAAACyKQAAAAAAAAAAAACyKQAAAAAAALMpAAAAAAAAAAAAALMpAAAAAAAAtCkAAAAAAAAAAAAAtCkAAAAAAAC1KQAAAAAAAAAAAAC1KQAAAAAAALYpAAAAAAAAAAAAALYpAAAAAAAAtykAAAAAAAAAAAAAtykAAAAAAAC4KQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApykAAAAAAACnKQAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAALgpAAAAAAAAuSkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuCkAAAAAAAC4KQAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": " //"
					},
					"AwAAALkpAAAAAAAAuikAAAAAAAAAAAAAuikAAAAAAAC7KQAAAAAAAAAAAAC7KQAAAAAAALwpAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuSkAAAAAAAC5KQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/eagle/element.js",
			"settings":
			{
				"buffer_size": 33225,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "lib/geom/matrix.js",
			"settings":
			{
				"buffer_size": 20683,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "lib/eagle/components/text.js",
			"settings":
			{
				"buffer_size": 2589,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					18,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAI4BAAAAAAAAjwEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACOAQAAAAAAAI4BAAAAAAAAAAAAAAAA8L8"
				],
				[
					42,
					2,
					"right_delete",
					null,
					"AgAAACAGAAAAAAAAIAYAAAAAAAAHAAAAY29uc29sZSAGAAAAAAAAIAYAAAAAAAABAAAALg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAgBgAAAAAAACcGAAAAAAAAAAAAAAAA8L8"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAACAGAAAAAAAAIQYAAAAAAAAAAAAAIQYAAAAAAAAjBgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAgBgAAAAAAACAGAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "lib/eagle/renderUtils.js",
			"redo_stack":
			[
				[
					13,
					1,
					"insert",
					{
						"characters": "g1"
					},
					"AwAAAPoCAAAAAAAA+gIAAAAAAAABAAAAMfoCAAAAAAAA/QIAAAAAAAAAAAAA+QIAAAAAAAD5AgAAAAAAAAEAAABn",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD7AgAAAAAAAPsCAAAAAAAAAAAAAAAA8L8"
				]
			],
			"settings":
			{
				"buffer_size": 15996,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/eagle/renderer.js",
			"settings":
			{
				"buffer_size": 893,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					28,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAFcDAAAAAAAAWAMAAAAAAAAAAAAAWAMAAAAAAABYAwAAAAAAADsAAAAgIGNvbnNvbGUubG9nKCdERUJVRzonLCBERUJVRyk7CiAgY29uc29sZS5sb2coJ2xvZzonLCBsb2cpOw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABXAwAAAAAAAJIDAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "lib/geom/size.js",
			"settings":
			{
				"buffer_size": 9300,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"prettier",
				"JsPrettier: Format Code"
			],
			[
				"pre",
				"Project: Edit Project"
			],
			[
				"prett",
				"JsPrettier: Format Code"
			],
			[
				"",
				"Auto indent"
			],
			[
				"list pack",
				"Package Control: List Packages"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"edit ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"edit",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"outli",
				"Browse Mode: Outline (Right)"
			],
			[
				"debugger",
				"Preferences: Debugger Settings"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"scheme",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"INSTALL",
				"Package Control: Install Package"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"adap",
				"Debugger: Install Adapters"
			],
			[
				"install ada",
				"Debugger: Install Adapters"
			],
			[
				"adapter",
				"Debugger: Install Adapters"
			],
			[
				"debug",
				"Debugger: Install Adapters"
			],
			[
				"Package Control: remove",
				"Package Control: Remove Package"
			],
			[
				"debu",
				"Debugger: Install Adapters"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 289.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv",
		"/home/roman/Projects/plot-cv/imgui",
		"/home/roman/Projects/plot-cv/lib",
		"/home/roman/Projects/plot-cv/lib/dsp",
		"/home/roman/Projects/plot-cv/lib/eagle"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/quickjs-misc.c.ast.bjson",
		"/home/roman/Projects/plot-cv/resolve-imports.js",
		"/home/roman/Projects/plot-cv/lib/util.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/dom.js",
		"/home/roman/Projects/plot-cv/lib/geom/bbox.js",
		"/home/roman/Projects/plot-cv/lib/geom/transformation.js",
		"/home/roman/Projects/plot-cv/lib/geom/matrix.js",
		"/home/roman/Projects/plot-cv/lib/geom/point.js",
		"/home/roman/Projects/plot-cv/package.json",
		"/home/roman/Projects/plot-cv/io-helpers.js",
		"/home/roman/Projects/plot-cv/lib/geom/pointList.js",
		"/home/roman/Projects/plot-cv/lib/misc.js",
		"/home/roman/.config/sublime-text/Packages/User/Themes/Luscious.tmTheme",
		"/home/roman/Projects/plot-cv/lib/dom/svg.js",
		"/home/roman/mnt/samsung-roman/Projects/an-tronics/Mind-Synchronizing-Generator-PinHdrPotX.svg",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/location.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
		"/home/roman/Projects/plot-cv/svg-crop-pad.js",
		"/home/roman/Projects/plot-cv/40106-4069-Synth.cropped.svg",
		"/home/roman/mnt/samsung-roman/Projects/an-tronics/40106-4069-Synth.svg",
		"/home/roman/Projects/plot-cv/lib/eagle/element.js",
		"/home/roman/Projects/plot-cv/lib/svg/path.js",
		"/home/roman/Projects/plot-cv/lib/geom/size.js",
		"/home/roman/Projects/plot-cv/lib/eda/units.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/css3-selectors.js",
		"/home/roman/mnt/samsung-roman/Projects/an-tronics/StyroCutter-556-heatsink-5V.svg",
		"/home/roman/Projects/plot-cv/plot-cv.sublime-project",
		"/home/roman/Projects/plot-cv/os-helpers.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/eagle-commands.js",
		"/home/roman/Projects/plot-cv/lib/eagle/document.js",
		"/home/roman/Projects/plot-cv/lib/geom/trbl.js",
		"/home/roman/Projects/plot-cv/lib/geom/line.js",
		"/home/roman/Projects/plot-cv/lib/geom/rect.js",
		"/home/roman/Projects/plot-cv/lib/dom.js",
		"/home/roman/Projects/plot-cv/lib/grammars/ebnf.ebnf",
		"/home/roman/Projects/plot-cv/cli-helpers.js",
		"/home/roman/Projects/plot-cv/eagle-shell.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/repl.js",
		"/home/roman/Projects/plot-cv/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/lexer.c",
		"/home/roman/Projects/plot-cv/draw.js",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_lexer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/jsutils.c",
		"/home/roman/Projects/plot-cv/draw.html",
		"/home/roman/Projects/plot-cv/debugger-client.js",
		"/home/roman/Projects/plot-cv/debugger-server.js",
		"/home/roman/Projects/plot-cv/lib/dom/element.js",
		"/home/roman/Projects/plot-cv/fire.js",
		"/home/roman/Projects/plot-cv/upload-server.js",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-libc.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.c",
		"/home/roman/Projects/plot-cv/quickjs/qjscalc.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/list-exports.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/buffer-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/lexer.h",
		"/home/roman/Projects/plot-cv/lib/ecmascript.js",
		"/home/roman/Projects/plot-cv/getModuleProps.js",
		"/home/roman/Projects/plot-cv/test-operators.js",
		"/home/roman/Projects/plot-cv/data/test-websocket.functions.js",
		"/home/roman/Projects/plot-cv/test-nanovg.js",
		"/home/roman/Projects/plot-cv/lib/alea.js",
		"/home/roman/Projects/plot-cv/upload.js",
		"/usr/include/sqlite3.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/js-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-internal.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/qjsm.c",
		"/home/roman/Projects/plot-cv/test-sqlite3.js",
		"/home/roman/Projects/plot-cv/sqlite3.js",
		"/home/roman/Projects/plot-cv/ast-shell.js",
		"/home/roman/Projects/plot-cv/clang-ast.js",
		"/home/roman/Projects/mariadb-10.3-10.3.38/scripts/mysql_system_tables.sql",
		"/home/roman/Projects/plot-cv/test-bjson.js",
		"/home/roman/Projects/mariadb-10.3-10.3.38/scripts/fill_help_tables.sql",
		"/home/roman/Projects/plot-cv/quickjs/run-test262.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/build-libwebsockets.sh",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/build/build.ninja",
		"/home/roman/Projects/plot-cv/lib/fd-graph.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/textElement.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/symbol.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/pin.js",
		"/home/roman/Projects/plot-cv/555-PWM-Motor-Speed-Controller-alt-schematic.svg",
		"/home/roman/Projects/plot-cv/555-PWM-Motor-Speed-Controller-alt-board.svg",
		"/home/roman/Projects/an-tronics/eagle/555-PWM-Motor-Speed-Controller-alt.brd",
		"/home/roman/Projects/an-tronics/eagle/555-PWM-Motor-Speed-Controller-alt.sch",
		"/home/roman/Projects/plot-cv/lib/eagle/renderUtils.js",
		"/home/roman/Projects/plot-cv/lib/dsp/util.js",
		"/home/roman/Projects/plot-cv/Zeichnung.svg",
		"/home/roman/Projects/plot-cv/lib/eagle/svg/ZoomRedraw.svg",
		"/home/roman/Projects/plot-cv/lib/eagle/components/text.js",
		"/home/roman/Projects/plot-cv/lib/eagle/schematicRenderer.js",
		"/home/roman/Projects/plot-cv/lib/eagle/svgRenderer.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/line.js",
		"/home/roman/Projects/plot-cv/lib/eagle/boardRenderer.js",
		"/home/roman/Projects/plot-cv/eagle2svg.js",
		"/home/roman/Projects/plot-cv/lib/eagle/project.js",
		"/home/roman/Projects/plot-cv/lib/eagle/nodeList.js",
		"/home/roman/Projects/plot-cv/lib/eagle/common.js",
		"/home/roman/Projects/plot-cv/lib/dom/preactComponent.js",
		"/home/roman/Projects/plot-cv/lib/eagle/node.js",
		"/home/roman/Projects/plot-cv/lib/eagle/ref.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/grid.js",
		"/home/roman/Projects/plot-cv/lib/eagle/elementProxy.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/smd.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/wirePath.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/wire.js",
		"/home/roman/Projects/plot-cv/lib/eagle/nodeMap.js",
		"/home/roman/Projects/plot-cv/lib/eagle/renderer.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/circle.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/pad.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/via.js",
		"/home/roman/Projects/plot-cv/lib/eagle/libraryRenderer.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components.js",
		"/home/roman/Projects/plot-cv/quickjs/cmake/functions.cmake",
		"/home/roman/Projects/plot-cv/qjs-opencv/cmake/functions.cmake",
		"/home/roman/Projects/plot-cv/cmake/functions.cmake",
		"/home/roman/Projects/plot-cv/lib/container/spatial-hash.js",
		"/home/roman/Projects/plot-cv/lib/container/Hash-Multimap.js",
		"/home/roman/Projects/plot-cv/lib/container/componentMap.js",
		"/home/roman/Projects/plot-cv/lib/container/multikeymap.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/drawing.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/util-w-2.diff",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/new.diff",
		"/home/roman/Projects/plot-cv/lib/eda/colorCoding.js"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 142.0,
		"where_history":
		[
			"/home/roman/Projects/plot-cv,*.c,*.h,*.js",
			"/home/roman/Projects/plot-cv,*.js",
			"/home/roman/Projects/plot-cv,*.c,*.h,*.js",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"GetBounds",
			"precision",
			"getWidthHeight",
			"output-dir",
			"attributeLists",
			"translateSelf",
			"getprototypechain",
			"\"getPrototypeCha",
			"getPrototypeChain",
			"isObject",
			"ion isObject",
			"isObject",
			"getCallers",
			"getCalles",
			"Util\\.",
			"== last",
			"last",
			"Searching",
			"if\\(.*Util.getPlatform",
			"getPlatform",
			"Util.getPlatform\\(",
			"Util.getPlatform",
			"^js_error",
			"getPlatf",
			"Util.getPlat",
			"^js[^ ]*error",
			"^jsm_.*error",
			"_error",
			"'doc'",
			"reduce",
			"'args'",
			"'args",
			"DEBUG:",
			"Text.render.2",
			"Text.render",
			"renderer.palette",
			"'render'",
			"'render",
			"([Ss]tack|[Ee]rror)",
			"[Ss]tack",
			"[Ee]rror",
			"Saving to",
			"D",
			"setDebug\\(",
			"DEBUG =",
			"DEBUG",
			"log",
			"debugFlag",
			"Renderer",
			"Text.render",
			"toString =",
			"toString",
			"'mm'",
			"size.*unit",
			"debug",
			"clip-path",
			"AllPar",
			"clip-path",
			"xref",
			"clip-path",
			"clip3",
			"#clip3",
			"M 27\\.199933 474\\.158751 L 27\\.199933 486\\.086916 ",
			"M 27.199933 474.158751 L 27.199933 486.086916 ",
			"Positioned",
			"<clipPath",
			"clip.*path",
			"clip.*path\n",
			"clip.*path",
			"clip-path",
			"serialize",
			"FileWriter",
			"FileWriterw",
			"FileWriter",
			"open\\(",
			"written",
			"WriteFile",
			"\\, \\{mode\\:0o755\\}",
			"WriteFile",
			"verb",
			"WriteFile",
			"GetB",
			"ERROR",
			"GetPoints",
			"new Point",
			"pathToPoints",
			"GetPoints",
			"pathToPoints",
			"GetPoints",
			"map =",
			"filter =",
			"'z'",
			"filter =",
			"GetPoints",
			"roundTo",
			"round =",
			"at =",
			"deref =",
			"deref",
			"GetPoints",
			"GetTransformedPoints",
			"GetBounds",
			"pointsToAbsolute",
			"splitPath",
			"Element",
			"ELement",
			"parseValues",
			"parse",
			"parseS",
			"parseSVG",
			"parseSVGPath",
			"path293",
			"GetBounds",
			"GetPoints",
			"formMatrix",
			"ElementTransform",
			"AllTra",
			"AllTransforms",
			"GetTransform",
			"getTransformationMatrix",
			"AllTransforms",
			"Symbol.iterator",
			"'multiply'",
			"Matrix.multiply",
			"multiply'",
			"Util\\.",
			"Util.inherit",
			"Util\\.extend"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"MakePoint",
			"",
			"define",
			"PointList\\.prototype",
			"};\\n\nPointList.",
			"}\\n\nfunction",
			"",
			"isObject",
			"roundTo",
			"define",
			"padding"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "svg-crop-pad.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15936,
						"regions":
						{
						},
						"selection":
						[
							[
								9189,
								9198
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 440,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680972776.15,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4493.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "lib/geom/bbox.js",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7020,
						"regions":
						{
						},
						"selection":
						[
							[
								3715,
								3719
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1420.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "eagle2svg.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2498,
						"regions":
						{
						},
						"selection":
						[
							[
								2395,
								2395
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 89,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680972947.11,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 714.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "quickjs/qjs-modules/src/qjsm.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 46181,
						"regions":
						{
						},
						"selection":
						[
							[
								5227,
								5227
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 215,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680890674.74,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2267.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "lib/eagle/svgRenderer.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11951,
						"regions":
						{
							"col_0000AAFF":
							{
								"flags": 16,
								"regions":
								[
									[
										11011,
										11018
									]
								],
								"scope": "col_0000AAFF"
							},
							"col_0000AAFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_0000AAFF_circle.png",
								"regions":
								[
									[
										10995,
										10995
									]
								],
								"scope": "col_gutter"
							},
							"col_4BA54BFF":
							{
								"flags": 16,
								"regions":
								[
									[
										11522,
										11529
									]
								],
								"scope": "col_4BA54BFF"
							},
							"col_4BA54BFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_4BA54BFF_circle.png",
								"regions":
								[
									[
										11498,
										11498
									]
								],
								"scope": "col_gutter"
							},
							"col_A5A5A5FF":
							{
								"flags": 16,
								"regions":
								[
									[
										5217,
										5233
									]
								],
								"scope": "col_A5A5A5FF"
							},
							"col_A5A5A5FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_A5A5A5FF_circle.png",
								"regions":
								[
									[
										5154,
										5154
									]
								],
								"scope": "col_gutter"
							},
							"col_FF00FFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										7783,
										7787
									]
								],
								"scope": "col_FF00FFFF"
							},
							"col_FF00FFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FF00FFFF_circle.png",
								"regions":
								[
									[
										7764,
										7764
									]
								],
								"scope": "col_gutter"
							},
							"col_FF33FFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										11566,
										11573
									]
								],
								"scope": "col_FF33FFFF"
							},
							"col_FF33FFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FF33FFFF_circle.png",
								"regions":
								[
									[
										11535,
										11535
									]
								],
								"scope": "col_gutter"
							},
							"col_FFFFFFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										10948,
										10955
									]
								],
								"scope": "col_FFFFFFFF"
							},
							"col_FFFFFFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FFFFFFFF_circle.png",
								"regions":
								[
									[
										10923,
										10923
									]
								],
								"scope": "col_gutter"
							}
						},
						"selection":
						[
							[
								2360,
								2360
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 54,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680972952.23,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 293.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "quickjs/qjs-modules/lib/util.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 63358,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680972954.08,
							"tabs_extra_last_activated_sheet_index": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 32061.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "quickjs/qjs-modules/quickjs-misc.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 73446,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680936590.27,
							"tabs_extra_last_activated_sheet_index": 5,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8357.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "quickjs/qjs-modules/resolve-imports.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 54817,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 1487,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680892453.82,
							"tabs_extra_last_activated_sheet_index": 5,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 20593.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "lib/geom/graph.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11141,
						"regions":
						{
						},
						"selection":
						[
							[
								1600,
								1600
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 56,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680974866.03,
							"tabs_extra_last_activated_sheet_index": 7,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "lib/json/path.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18898,
						"regions":
						{
						},
						"selection":
						[
							[
								987,
								992
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 311,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680892721.8,
							"tabs_extra_last_activated_sheet_index": 7,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "quickjs/qjs-modules/lib/extendArray.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4304,
						"regions":
						{
						},
						"selection":
						[
							[
								333,
								339
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 14,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680972955.7,
							"tabs_extra_last_activated_sheet_index": 9,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "lib/xml/parse.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7066,
						"regions":
						{
						},
						"selection":
						[
							[
								7043,
								7043
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 273,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680891492.58,
							"tabs_extra_last_activated_sheet_index": 7,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3079.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "lib/json/util.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2514,
						"regions":
						{
						},
						"selection":
						[
							[
								2511,
								2278
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 71,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680891020.74,
							"tabs_extra_last_activated_sheet_index": 7,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 461.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "quickjs/qjs-modules/src/utils.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 93358,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 2467,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680891370.52,
							"tabs_extra_last_activated_sheet_index": 8,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 34131.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "lib/geom/transformation.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21591,
						"regions":
						{
						},
						"selection":
						[
							[
								10233,
								10233
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 379,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680936773.19,
							"tabs_extra_last_activated_sheet_index": 13,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4927.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "lib/eagle/node.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16500,
						"regions":
						{
						},
						"selection":
						[
							[
								10684,
								10684
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 351,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680937112.11,
							"tabs_extra_last_activated_sheet_index": 14,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4535.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "lib/eagle/element.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 33225,
						"regions":
						{
						},
						"selection":
						[
							[
								30299,
								30865
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 863,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680936825.86,
							"tabs_extra_last_activated_sheet_index": 15,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 11801.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "lib/geom/matrix.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20683,
						"regions":
						{
						},
						"selection":
						[
							[
								4253,
								4253
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 150,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680936718.48,
							"tabs_extra_last_activated_sheet_index": 14,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1735.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "lib/eagle/components/text.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2589,
						"regions":
						{
						},
						"selection":
						[
							[
								2422,
								2422
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 57,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680890271.68,
							"tabs_extra_last_activated_sheet_index": 7,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 83.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "lib/eagle/renderUtils.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15996,
						"regions":
						{
						},
						"selection":
						[
							[
								1474,
								1474
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 45,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680889686.37,
							"tabs_extra_last_activated_sheet_index": 5,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "lib/eagle/renderer.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 893,
						"regions":
						{
						},
						"selection":
						[
							[
								34,
								35
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680890270.93,
							"tabs_extra_last_activated_sheet_index": 9,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "lib/geom/size.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9300,
						"regions":
						{
						},
						"selection":
						[
							[
								7062,
								7072
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 207,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1680889297.92,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2519.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.8,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Run with qjsm",
	"project": "plot-cv.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"bbox",
				"lib/geom/bbox.js"
			],
			[
				"svg-cr",
				"svg-crop-pad.js"
			],
			[
				"eagle2",
				"eagle2svg.js"
			],
			[
				"node.js",
				"lib/eagle/node.js"
			],
			[
				"matrix.js",
				"lib/geom/matrix.js"
			],
			[
				"transform",
				"lib/geom/transformation.js"
			],
			[
				"eagle2sv",
				"eagle2svg.js"
			],
			[
				"misc.c",
				"quickjs/qjs-modules/quickjs-misc.c"
			],
			[
				"quickjs-misc.c",
				"quickjs-misc.c.ast.bjson"
			],
			[
				"modules/lib/util.js",
				"quickjs/qjs-modules/lib/util.js"
			],
			[
				"json/path",
				"lib/json/path.js"
			],
			[
				"geom/grap",
				"lib/geom/graph.js"
			],
			[
				"extendArra",
				"quickjs/qjs-modules/lib/extendArray.js"
			],
			[
				"resolve-im",
				"quickjs/qjs-modules/resolve-imports.js"
			],
			[
				"xml/parse",
				"lib/xml/parse.js"
			],
			[
				"util.js",
				"lib/util.js"
			],
			[
				"utils.c",
				"quickjs/qjs-modules/src/utils.c"
			],
			[
				"json/util",
				"lib/json/util.js"
			],
			[
				"qjsm",
				"quickjs/qjs-modules/src/qjsm.c"
			],
			[
				"lib/util.js",
				"quickjs/qjs-modules/lib/util.js"
			],
			[
				"svgRen",
				"lib/eagle/svgRenderer.js"
			],
			[
				"eagle/ren",
				"lib/eagle/renderer.js"
			],
			[
				"text.js",
				"lib/eagle/components/text.js"
			],
			[
				"transforma",
				"lib/geom/transformation.js"
			],
			[
				"size.js",
				"lib/geom/size.js"
			],
			[
				"svg-cro",
				"svg-crop-pad.js"
			],
			[
				"-lexer",
				"quickjs/qjs-modules/quickjs-lexer.c"
			],
			[
				"location.h",
				"quickjs/qjs-modules/include/location.h"
			],
			[
				"res",
				"quickjs/qjs-modules/resolve-imports.js"
			],
			[
				"io-help",
				"io-helpers.js"
			],
			[
				"pointList",
				"lib/geom/pointList.js"
			],
			[
				"PointList",
				"lib/geom/pointList.js"
			],
			[
				"point.js",
				"lib/geom/point.js"
			],
			[
				"svg.js",
				"lib/dom/svg.js"
			],
			[
				"matrix",
				"lib/geom/matrix.js"
			],
			[
				"trans",
				"lib/geom/transformation.js"
			],
			[
				"misc",
				"lib/misc.js"
			],
			[
				"util",
				"lib/util.js"
			],
			[
				"misc.js",
				"lib/misc.js"
			],
			[
				"io-he",
				"io-helpers.js"
			],
			[
				"package.js",
				"package.json"
			],
			[
				"bbox.js",
				"lib/geom/bbox.js"
			],
			[
				"svg/path.js",
				"lib/svg/path.js"
			],
			[
				"units",
				"lib/eda/units.js"
			],
			[
				"rect.js",
				"lib/geom/rect.js"
			],
			[
				"lib/ut",
				"lib/util.js"
			],
			[
				"trbl",
				"lib/geom/trbl.js"
			],
			[
				"point",
				"lib/geom/point.js"
			],
			[
				"point.j",
				"lib/geom/point.js"
			],
			[
				"line.js",
				"lib/geom/line.js"
			],
			[
				"dom.js",
				"lib/dom.js"
			],
			[
				"bbox.j",
				"lib/geom/bbox.js"
			],
			[
				"repl.js",
				"quickjs/qjs-modules/lib/repl.js"
			],
			[
				"svg-crop",
				"svg-crop-pad.js"
			],
			[
				"cli-help",
				"cli-helpers.js"
			],
			[
				"project",
				"lib/eagle/project.js"
			],
			[
				"eagle-comm",
				"eagle-commands.js"
			],
			[
				"lib/util",
				"quickjs/qjs-modules/lib/util.js"
			],
			[
				"eagle-shell",
				"eagle-shell.js"
			],
			[
				"io-helper",
				"io-helpers.js"
			],
			[
				"os-helper",
				"os-helpers.js"
			],
			[
				"cmakelists",
				"CMakeLists.txt"
			],
			[
				"lexer.c",
				"quickjs/qjs-modules/src/lexer.c"
			],
			[
				"-lexer.c",
				"quickjs/qjs-modules/quickjs-lexer.c"
			],
			[
				"ecma",
				"lib/ecmascript.js"
			],
			[
				"lexer.c ",
				"quickjs/qjs-modules/src/lexer.c"
			],
			[
				"lexer.h",
				"quickjs/qjs-modules/include/lexer.h"
			],
			[
				"quickjs-lex",
				"quickjs/qjs-modules/quickjs-lexer.c"
			],
			[
				"test_lexer",
				"quickjs/qjs-modules/tests/test_lexer.js"
			],
			[
				"buffer-u",
				"quickjs/qjs-modules/src/buffer-utils.c"
			],
			[
				"upload-server",
				"upload-server.js"
			],
			[
				"fire.js",
				"fire.js"
			],
			[
				"debugger-cli",
				"debugger-client.js"
			],
			[
				"debugger-ser",
				"debugger-server.js"
			],
			[
				"upload-ser",
				"upload-server.js"
			],
			[
				"debugger-server",
				"debugger-server.js"
			],
			[
				"quickjs-libc",
				"quickjs/quickjs-libc.c"
			],
			[
				"quickjs.c",
				"quickjs/quickjs.c"
			],
			[
				"quickjs-lib",
				"quickjs/quickjs-libc.c"
			],
			[
				"list-ex",
				"quickjs/qjs-modules/list-exports.js"
			],
			[
				"draw.js",
				"draw.js"
			],
			[
				"draw.html",
				"draw.html"
			],
			[
				"getMod",
				"getModuleProps.js"
			],
			[
				"test-op",
				"test-operators.js"
			],
			[
				"nanovg",
				"test-nanovg.js"
			],
			[
				"alea",
				"lib/alea.js"
			],
			[
				"upload.js",
				"upload.js"
			],
			[
				"fire",
				"fire.js"
			],
			[
				"clang-as",
				"clang-ast.js"
			],
			[
				"jsut",
				"quickjs/qjs-modules/src/js-utils.c"
			],
			[
				"qjsm.c",
				"quickjs/qjs-modules/src/qjsm.c"
			],
			[
				"ast-shell",
				"ast-shell.js"
			],
			[
				"quickjs-in",
				"quickjs/qjs-modules/quickjs-internal.h"
			],
			[
				"run-test",
				"quickjs/run-test262.c"
			],
			[
				"quickjs.h",
				"quickjs/quickjs.h"
			],
			[
				"build-libwe",
				"quickjs/qjs-net/build-libwebsockets.sh"
			],
			[
				"ast-she",
				"ast-shell.js"
			],
			[
				"eagle-she",
				"eagle-shell.js"
			],
			[
				"pin.js",
				"lib/eagle/components/pin.js"
			],
			[
				"",
				"~/Projects/an-tronics/eagle/555-PWM-Motor-Speed-Controller-alt.sch"
			],
			[
				"preactCom",
				"lib/dom/preactComponent.js"
			],
			[
				"symb",
				"lib/eagle/components/symbol.js"
			],
			[
				"schematicren",
				"lib/eagle/schematicRenderer.js"
			],
			[
				"svgre",
				"lib/eagle/svgRenderer.js"
			],
			[
				"boardren",
				"lib/eagle/boardRenderer.js"
			],
			[
				"element",
				"lib/eagle/element.js"
			],
			[
				"svgRend",
				"lib/eagle/svgRenderer.js"
			],
			[
				"boardRen",
				"lib/eagle/boardRenderer.js"
			],
			[
				"document",
				"lib/eagle/document.js"
			],
			[
				"boardRe",
				"lib/eagle/boardRenderer.js"
			],
			[
				"renderUtil",
				"lib/eagle/renderUtils.js"
			],
			[
				"project.js",
				"lib/eagle/project.js"
			],
			[
				"nodeList",
				"lib/eagle/nodeList.js"
			],
			[
				"elemen",
				"lib/eagle/element.js"
			],
			[
				"svgRe",
				"lib/eagle/svgRenderer.js"
			],
			[
				"common",
				"lib/eagle/common.js"
			],
			[
				"ref.js",
				"lib/eagle/ref.js"
			],
			[
				"element.js",
				"lib/eagle/element.js"
			],
			[
				"common.j",
				"lib/eagle/common.js"
			],
			[
				"nodeLi",
				"lib/eagle/nodeList.js"
			],
			[
				"common.js",
				"lib/eagle/common.js"
			],
			[
				"elementP",
				"lib/eagle/elementProxy.js"
			],
			[
				"smd.js",
				"lib/eagle/components/smd.js"
			],
			[
				"wirePa",
				"lib/eagle/components/wirePath.js"
			],
			[
				"wire.js",
				"lib/eagle/components/wire.js"
			],
			[
				"nodeMap",
				"lib/eagle/nodeMap.js"
			],
			[
				"renderer.js",
				"lib/eagle/renderer.js"
			],
			[
				"functions.cmake",
				"qjs-opencv/cmake/functions.cmake"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/plot-cv.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 309.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"WS"
			]
		],
		"width": 784.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 248.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
