{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"onRe",
				"onReceiveClientHttpRead"
			],
			[
				"JS_Set",
				"JS_SetPropertyUint32"
			],
			[
				"JS_GetP",
				"JS_GetPropertyUint32"
			],
			[
				"lws_pr",
				"lws_process_html_args"
			],
			[
				"ioha",
				"iohandler_functions"
			],
			[
				"JS_Sert",
				"JS_SetPropertyUint32"
			],
			[
				"lwsjs",
				"lwsjs_loglevel"
			],
			[
				"lwsjs_clear",
				"lwsjs_clear_all_handlers"
			],
			[
				"js_is",
				"js_is_null_or_undefined"
			],
			[
				"lws_",
				"lws_context_class_id"
			],
			[
				"callba",
				"callback_names"
			],
			[
				"JS_Get",
				"JS_GetPropertyStr"
			],
			[
				"call",
				"callback_names"
			],
			[
				"FUNCTION_GET_",
				"FUNCTION_GET_CALLBACK_NUMBER"
			],
			[
				"PROP_PE",
				"PROP_PEER_WRITE_ALLOWANCE"
			],
			[
				"PROP_PEE",
				"PROP_PEER_WRITE_ALLOWANCE"
			],
			[
				"lws_callback",
				"lws_callback_names"
			],
			[
				"jsm_start_",
				"jsm_start_interactive3"
			],
			[
				"by",
				"byobRequest"
			],
			[
				"Read",
				"ReadableStreamBYOBRequest"
			],
			[
				"js_by",
				"js_readable_byob_request"
			],
			[
				"BY",
				"BYOB_REQUEST_METHOD_RESPONDWITHNEWVIEW"
			],
			[
				"JS_",
				"JS_NewObjectProtoClass"
			],
			[
				"define",
				"defineProperty(...)"
			],
			[
				"is_",
				"is_exception"
			],
			[
				"JS_T",
				"JS_ThrowInternalError"
			],
			[
				"Repe",
				"RepeaterItem"
			],
			[
				"WRITER_PROP",
				"WRITER_PROP_READY"
			],
			[
				"JS_Throw",
				"JS_ThrowInternalError"
			],
			[
				"to",
				"toStringTag"
			],
			[
				"Der",
				"DereferenceError"
			],
			[
				"Dere",
				"DereferenceError"
			],
			[
				"Is",
				"IsPunctuator"
			],
			[
				"js_magic_fun",
				"js_magic_function"
			],
			[
				"js_queue_iter",
				"js_queue_iterator_class_id"
			],
			[
				"js_queue_itreat",
				"js_queue_iterator_class_id"
			],
			[
				"js_",
				"js_archive_mode"
			],
			[
				"ENTRY_IS",
				"ENTRY_ISDATAENCRYPTED"
			],
			[
				"js_archivema",
				"js_archivematch_class_id"
			],
			[
				"JS_NewObjec",
				"JS_NewObjectProtoClass"
			],
			[
				"Module",
				"ModuleLoaderContext"
			],
			[
				"JS_Th",
				"JS_ThrowTypeError"
			],
			[
				"ModuleLo",
				"ModuleLoaderContext"
			],
			[
				"escape",
				"escape_noquote_tab"
			],
			[
				"max",
				"max_array_length"
			],
			[
				"tty",
				"tty_set_raw"
			],
			[
				"getOwnPrope",
				"getOwnPropertyDescriptor"
			],
			[
				"PATH_SKIP",
				"PATH_SKIP_SEPARATOR"
			],
			[
				"ListIterat",
				"ListIteratorKind"
			],
			[
				"_f",
				"_wfindnext64"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"JS_PROP_",
				"JS_PROP_CONFIGURABLE"
			],
			[
				"JS_GetPr",
				"JS_GetPropertyStr"
			],
			[
				"js_sock",
				"js_sockaddr_data"
			],
			[
				"SET_",
				"SET_CONSOLE_MODE"
			],
			[
				"ERA",
				"ERASE_IN_LINE"
			],
			[
				"js_misc_set",
				"js_misc_settextattr"
			],
			[
				"dw",
				"dwCursorPosition"
			],
			[
				"prop",
				"property_recursion_top"
			],
			[
				"property_enumer",
				"property_enumeration_index"
			],
			[
				"INT",
				"INSPECT_INT32T_INRANGE"
			],
			[
				"js_inspect_print_arra",
				"js_inspect_print_arraybuffer2"
			],
			[
				"is_a",
				"is_arraybuffer"
			],
			[
				"fmt",
				"fmt_ulong"
			],
			[
				"inspec",
				"inspect_newline2"
			],
			[
				"property_",
				"property_recursion_top"
			],
			[
				"js_inspec",
				"js_inspect_print_value"
			],
			[
				"JS_Atom",
				"JS_AtomToValue"
			],
			[
				"mysql_op",
				"mysql_optionsv"
			],
			[
				"MY",
				"MYSQLConnectParameters"
			],
			[
				"js_connect",
				"js_connectparams_class_id"
			],
			[
				"js_conn",
				"js_connectparams_from"
			],
			[
				"MYSQL",
				"MYSQLConnectParameters"
			],
			[
				"mysql_get",
				"mysql_get_socket"
			],
			[
				"async",
				"asyncclosure_resolve"
			],
			[
				"res",
				"resolving_funcs"
			],
			[
				"HAVE_LIB",
				"HAVE_LIBMARIADBCLIENT"
			],
			[
				"js_is_null",
				"js_is_null_or_undefined"
			],
			[
				"FileDesc",
				"FileDescriptorHandlers"
			],
			[
				"js_generat",
				"js_generator_prototype"
			],
			[
				"tab_",
				"tab_atom_len"
			],
			[
				"proper",
				"property_recursion_pop"
			],
			[
				"property_rec",
				"property_recursion_top"
			],
			[
				"property",
				"property_recursion_top"
			],
			[
				"RETURN",
				"deep.RETURN_VALUE_PATH"
			],
			[
				"LIBS",
				"LIBSERIALPORT_LIBRARY_DIR"
			],
			[
				"js_misc_atexit_",
				"js_misc_atexit_called"
			],
			[
				"getO",
				"getOwnPropertyNames(...)"
			],
			[
				"Res",
				"ResolveAlias"
			],
			[
				"relati",
				"relativePath"
			],
			[
				"js_syscla",
				"js_syscallerror_defines"
			],
			[
				"get",
				"getOwnPropertyDescriptor(...)"
			],
			[
				"resol",
				"resolving_funcs"
			],
			[
				"set",
				"set_handler"
			],
			[
				"Async",
				"AsyncSocketClosure"
			],
			[
				"Asy",
				"AsyncSocketClosure"
			],
			[
				"js_socket_async_",
				"js_socket_async_resolver"
			],
			[
				"js_socket_asyc",
				"js_socket_async_closure_free"
			],
			[
				"JS_EV",
				"JS_EVAL_FLAG_COMPILE_ONLY"
			],
			[
				"check_",
				"check_function_and_include"
			],
			[
				"PGCon",
				"PGConnectParameters"
			],
			[
				"PGC",
				"PGConnectParameters"
			],
			[
				"connect",
				"connectparams_parse"
			],
			[
				"Nam",
				"FieldNameFunc"
			],
			[
				"PG",
				"PGSQLResult"
			],
			[
				"js",
				"js_pgresult_class_id"
			],
			[
				"PGSQ",
				"PGSQResultIterator"
			],
			[
				"js_misc_getopa",
				"js_misc_getopaque"
			],
			[
				"js_pgrequ",
				"js_pgresult_opaque"
			],
			[
				"PGRES_PO",
				"PGRES_POLLING_READING"
			],
			[
				"PROP_PRO",
				"PROP_PROTOCOL_VERSION"
			],
			[
				"B",
				"BOOL"
			],
			[
				"Asyn",
				"AsyncIterator"
			],
			[
				"ret",
				"return_flag"
			],
			[
				"ImportID",
				"ImportIdMap"
			],
			[
				"Num",
				"NumericRange"
			],
			[
				"dbuf_",
				"dbuf_init2"
			],
			[
				"getOwn",
				"getOwnPropertyNames(...)"
			],
			[
				"has_",
				"has_dot_or_slash"
			],
			[
				"My",
				"MySQLResult"
			],
			[
				"JS_ToCS",
				"JS_ToCStringLen"
			],
			[
				"CF",
				"CFunctionClosureRecord"
			],
			[
				"extendA",
				"extendAsyncGenerator"
			],
			[
				"JS_SetPr",
				"JS_SetPropertyStr"
			],
			[
				"MYSQL_TYPE_NEW",
				"MYSQL_TYPE_NEWDECIMAL"
			],
			[
				"JS_CF",
				"JS_CFUNC_MAGIC_DEF"
			],
			[
				"js_mysqlresult_fun",
				"js_mysqlresult_functions"
			],
			[
				"JS_ToCSt",
				"JS_ToCStringLen"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "  findLastIndex(predicate)\n  tail()\n  startsWith(start)\n  main(...args)\n(a, p) =>\n(a, p) =>\n  d =>\n  v =>\n  processFiles(...files)\nReadAST(outfile, load = f => \n(f), save = WriteFile, parse = JSON.parse)\n  name =>\n  stat =>\n() =>\na =>\n() =>\n() =>\n() =>\n() =>\n  err =>\n(v, p) =>\n  toString()\n  toString()\nv =>\nListNodes(sysinc = false)\nNoSystemIncludes = ([p, n, l]) =>\n([path, decl]) =>\n  names = decls =>\n([path, decl]) =>\n  declarations = decls =>\n([path, decl, loc]) =>\n([p, n]) =>\n(a, b) =>\n([p, n]) =>\n([p]) =>\n([p]) =>\n  p =>\n([p, n]) =>\n([p, n]) =>\n(a, b) =>\n([p, n]) =>\n([p, n, l]) =>\n  k =>\n([path, node, id, name, type, kind]) =>\n(field, i) =>\n  writeOutput(name, data)\nGetLibraryFor(symbolName)",
			"settings":
			{
				"buffer_size": 705,
				"line_ending": "Unix",
				"name": "ùåÜ Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					62,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/clang-ast.js",
						"symkeys":
						[
							[
								848,
								861
							],
							[
								940,
								996
							],
							[
								1441,
								1500
							],
							[
								2039,
								2076
							],
							[
								2295,
								2327
							],
							[
								2429,
								2466
							],
							[
								2620,
								2647
							],
							[
								2729,
								2759
							],
							[
								2826,
								2834
							],
							[
								2873,
								2900
							],
							[
								2949,
								2976
							],
							[
								3053,
								3057
							],
							[
								3080,
								3113
							],
							[
								3293,
								3336
							],
							[
								3621,
								3629
							],
							[
								4021,
								4025
							],
							[
								4044,
								4064
							],
							[
								4215,
								4247
							],
							[
								4409,
								4427
							],
							[
								4680,
								4697
							],
							[
								5004,
								5015
							],
							[
								5035,
								5042
							],
							[
								5069,
								5078
							],
							[
								5198,
								5204
							],
							[
								5316,
								5324
							],
							[
								5439,
								5448
							],
							[
								5474,
								5483
							],
							[
								5514,
								5518
							],
							[
								5579,
								5583
							],
							[
								5659,
								5675
							],
							[
								5932,
								5947
							],
							[
								6014,
								6023
							],
							[
								6084,
								6092
							],
							[
								6141,
								6150
							],
							[
								6197,
								6207
							],
							[
								6260,
								6270
							],
							[
								6301,
								6311
							],
							[
								6399,
								6410
							],
							[
								6616,
								6620
							],
							[
								6801,
								6812
							],
							[
								7043,
								7047
							],
							[
								7099,
								7113
							],
							[
								7163,
								7213
							],
							[
								7283,
								7338
							],
							[
								7343,
								7377
							],
							[
								7556,
								7560
							],
							[
								7641,
								7656
							],
							[
								7744,
								7800
							],
							[
								7874,
								7884
							],
							[
								8088,
								8095
							],
							[
								8212,
								8223
							],
							[
								8260,
								8289
							],
							[
								8350,
								8381
							],
							[
								8583,
								8593
							],
							[
								8648,
								8661
							],
							[
								8698,
								8727
							],
							[
								8788,
								8819
							],
							[
								9023,
								9033
							],
							[
								9088,
								9092
							],
							[
								9190,
								9216
							],
							[
								12079,
								12083
							],
							[
								13098,
								13110
							],
							[
								13233,
								13241
							],
							[
								13327,
								13338
							],
							[
								13461,
								13474
							],
							[
								13597,
								13609
							],
							[
								13703,
								13712
							],
							[
								13764,
								13775
							],
							[
								13864,
								13874
							],
							[
								13917,
								13926
							],
							[
								13968,
								13977
							],
							[
								14097,
								14113
							],
							[
								14171,
								14187
							],
							[
								14235,
								14248
							],
							[
								14395,
								14410
							],
							[
								14557,
								14572
							],
							[
								14829,
								14843
							],
							[
								14929,
								14941
							],
							[
								15008,
								15020
							],
							[
								15126,
								15143
							],
							[
								15229,
								15240
							],
							[
								15300,
								15313
							],
							[
								15456,
								15464
							],
							[
								15572,
								15582
							],
							[
								15763,
								15772
							],
							[
								17578,
								17588
							],
							[
								19667,
								19673
							],
							[
								19959,
								19970
							],
							[
								20071,
								20121
							],
							[
								20207,
								20215
							],
							[
								20275,
								20283
							],
							[
								22090,
								22120
							],
							[
								22199,
								22209
							],
							[
								22227,
								22253
							],
							[
								22382,
								22390
							],
							[
								22473,
								22481
							],
							[
								22659,
								22664
							],
							[
								22702,
								22709
							],
							[
								22793,
								22807
							],
							[
								23400,
								23404
							],
							[
								23485,
								23490
							],
							[
								25024,
								25028
							],
							[
								25928,
								25942
							],
							[
								26006,
								26016
							],
							[
								26101,
								26123
							],
							[
								26345,
								26353
							],
							[
								26475,
								26494
							],
							[
								26592,
								26600
							],
							[
								26618,
								26640
							],
							[
								26761,
								26769
							],
							[
								26874,
								26900
							],
							[
								27255,
								27263
							],
							[
								27378,
								27389
							],
							[
								27407,
								27433
							],
							[
								27505,
								27509
							],
							[
								27614,
								27624
							],
							[
								27684,
								27688
							],
							[
								27751,
								27755
							],
							[
								27805,
								27809
							],
							[
								28219,
								28229
							],
							[
								28261,
								28269
							],
							[
								28366,
								28375
							],
							[
								28393,
								28415
							],
							[
								28633,
								28645
							],
							[
								28663,
								28689
							],
							[
								28924,
								28932
							],
							[
								28995,
								29003
							],
							[
								30070,
								30089
							],
							[
								30205,
								30215
							],
							[
								30270,
								30278
							],
							[
								30387,
								30394
							],
							[
								30412,
								30434
							],
							[
								30779,
								30787
							],
							[
								30884,
								30893
							],
							[
								30917,
								30939
							],
							[
								31044,
								31055
							],
							[
								31073,
								31095
							],
							[
								31472,
								31489
							],
							[
								31507,
								31529
							],
							[
								31785,
								31793
							],
							[
								31904,
								31909
							],
							[
								31957,
								31980
							],
							[
								32102,
								32113
							],
							[
								32162,
								32174
							],
							[
								32236,
								32245
							],
							[
								32292,
								32302
							],
							[
								32340,
								32376
							],
							[
								33031,
								33043
							],
							[
								33089,
								33098
							],
							[
								33145,
								33155
							],
							[
								33335,
								33340
							],
							[
								33396,
								33404
							],
							[
								33497,
								33520
							],
							[
								33779,
								33795
							],
							[
								34014,
								34030
							],
							[
								34441,
								34454
							],
							[
								34600,
								34610
							],
							[
								34658,
								34669
							],
							[
								34761,
								34773
							],
							[
								34823,
								34836
							],
							[
								34884,
								34896
							],
							[
								34946,
								34959
							],
							[
								35207,
								35220
							],
							[
								35255,
								35270
							],
							[
								35350,
								35405
							],
							[
								35949,
								35959
							],
							[
								36202,
								36222
							],
							[
								36305,
								36351
							],
							[
								37850,
								37915
							],
							[
								38225,
								38229
							],
							[
								38490,
								38494
							],
							[
								39219,
								39226
							],
							[
								39280,
								39287
							],
							[
								39371,
								39378
							],
							[
								39555,
								39590
							],
							[
								39629,
								39649
							],
							[
								39679,
								39685
							],
							[
								39706,
								39714
							],
							[
								39821,
								39854
							],
							[
								40119,
								40144
							],
							[
								40485,
								40527
							],
							[
								41059,
								41112
							],
							[
								42522,
								42528
							],
							[
								42578,
								42584
							],
							[
								42749,
								42755
							],
							[
								42897,
								42913
							],
							[
								43458,
								43465
							],
							[
								43508,
								43512
							],
							[
								43532,
								43539
							],
							[
								43660,
								43687
							],
							[
								43746,
								43761
							],
							[
								44066,
								44073
							],
							[
								44133,
								44147
							],
							[
								44192,
								44207
							],
							[
								44233,
								44237
							],
							[
								44269,
								44280
							],
							[
								44313,
								44325
							],
							[
								44359,
								44372
							],
							[
								44448,
								44453
							],
							[
								44533,
								44537
							],
							[
								44561,
								44573
							],
							[
								44636,
								44641
							],
							[
								44671,
								44675
							],
							[
								44699,
								44708
							],
							[
								44721,
								44737
							],
							[
								45079,
								45083
							],
							[
								45107,
								45118
							],
							[
								45177,
								45181
							],
							[
								45219,
								45223
							],
							[
								45255,
								45271
							],
							[
								45310,
								45314
							],
							[
								45332,
								45336
							],
							[
								45380,
								45432
							],
							[
								45620,
								45636
							],
							[
								45996,
								46017
							],
							[
								46043,
								46047
							],
							[
								46489,
								46494
							],
							[
								46529,
								46556
							],
							[
								46750,
								46778
							],
							[
								46959,
								46984
							],
							[
								47059,
								47091
							],
							[
								47222,
								47226
							],
							[
								47363,
								47392
							],
							[
								47502,
								47506
							],
							[
								47800,
								47822
							],
							[
								48861,
								48916
							],
							[
								48996,
								49003
							],
							[
								49069,
								49076
							],
							[
								49113,
								49139
							],
							[
								49233,
								49241
							],
							[
								49307,
								49315
							],
							[
								49377,
								49388
							],
							[
								49542,
								49551
							],
							[
								49570,
								49596
							],
							[
								49649,
								49658
							],
							[
								49711,
								49737
							],
							[
								49789,
								49808
							],
							[
								49884,
								49901
							],
							[
								49936,
								49960
							],
							[
								50219,
								50224
							],
							[
								50282,
								50289
							],
							[
								50371,
								50382
							],
							[
								51090,
								51100
							],
							[
								51148,
								51152
							],
							[
								51343,
								51354
							],
							[
								51365,
								51389
							],
							[
								51457,
								51489
							],
							[
								51645,
								51670
							],
							[
								51734,
								51770
							],
							[
								51840,
								51880
							],
							[
								52132,
								52160
							],
							[
								52207,
								52238
							],
							[
								52467,
								52509
							],
							[
								52712,
								52737
							],
							[
								52895,
								52916
							],
							[
								52961,
								52980
							],
							[
								53314,
								53341
							],
							[
								53409,
								53428
							],
							[
								53633,
								53668
							],
							[
								53786,
								53834
							],
							[
								54080,
								54107
							],
							[
								54725,
								54766
							],
							[
								55004,
								55031
							],
							[
								55174,
								55195
							],
							[
								55256,
								55283
							],
							[
								55328,
								55360
							],
							[
								55610,
								55636
							],
							[
								55830,
								55849
							],
							[
								56511,
								56536
							],
							[
								56584,
								56615
							],
							[
								56682,
								56697
							],
							[
								56892,
								56913
							],
							[
								57030,
								57066
							],
							[
								57286,
								57305
							],
							[
								57709,
								57730
							],
							[
								57947,
								57980
							],
							[
								58040,
								58063
							],
							[
								58126,
								58143
							],
							[
								58263,
								58267
							],
							[
								59094,
								59119
							],
							[
								59326,
								59353
							],
							[
								59818,
								59822
							],
							[
								60032,
								60036
							],
							[
								60235,
								60254
							],
							[
								60375,
								60380
							],
							[
								60718,
								60757
							],
							[
								60856,
								60899
							],
							[
								61109,
								61124
							],
							[
								61390,
								61426
							],
							[
								61522,
								61550
							],
							[
								61820,
								61864
							],
							[
								61926,
								61957
							],
							[
								62016,
								62037
							],
							[
								62096,
								62119
							],
							[
								62555,
								62581
							],
							[
								62649,
								62675
							],
							[
								62739,
								62758
							],
							[
								62800,
								62835
							],
							[
								63009,
								63051
							],
							[
								63236,
								63257
							],
							[
								63433,
								63463
							],
							[
								63683,
								63709
							],
							[
								64138,
								64157
							],
							[
								64218,
								64241
							],
							[
								64776,
								64803
							],
							[
								64853,
								64876
							],
							[
								65033,
								65069
							],
							[
								65139,
								65168
							],
							[
								65226,
								65249
							],
							[
								65427,
								65452
							],
							[
								65536,
								65578
							],
							[
								65677,
								65702
							],
							[
								66006,
								66061
							],
							[
								66303,
								66332
							],
							[
								66583,
								66627
							],
							[
								66759,
								66803
							],
							[
								66890,
								66918
							],
							[
								67062,
								67086
							],
							[
								67334,
								67378
							],
							[
								67700,
								67753
							],
							[
								67852,
								67897
							],
							[
								67972,
								67991
							],
							[
								68052,
								68073
							],
							[
								68250,
								68277
							],
							[
								68326,
								68356
							],
							[
								68368,
								68389
							],
							[
								68401,
								68433
							],
							[
								68575,
								68605
							],
							[
								68617,
								68658
							],
							[
								68670,
								68709
							],
							[
								68721,
								68744
							],
							[
								68756,
								68779
							],
							[
								68791,
								68810
							],
							[
								68822,
								68864
							],
							[
								68876,
								68901
							],
							[
								68913,
								68940
							],
							[
								68952,
								68990
							],
							[
								69002,
								69084
							],
							[
								69096,
								69163
							],
							[
								69175,
								69200
							],
							[
								69212,
								69254
							],
							[
								69439,
								69477
							],
							[
								69489,
								69546
							],
							[
								69558,
								69596
							],
							[
								69608,
								69633
							],
							[
								69645,
								69672
							],
							[
								69684,
								69722
							],
							[
								69734,
								69790
							],
							[
								69884,
								69935
							],
							[
								69947,
								70022
							],
							[
								70034,
								70065
							],
							[
								70077,
								70096
							],
							[
								70108,
								70144
							],
							[
								70240,
								70261
							],
							[
								70273,
								70303
							],
							[
								70315,
								70338
							],
							[
								70350,
								70393
							],
							[
								70405,
								70443
							],
							[
								70455,
								70499
							],
							[
								70511,
								70535
							],
							[
								70652,
								70682
							],
							[
								70694,
								70720
							],
							[
								70764,
								70811
							],
							[
								70823,
								70865
							],
							[
								70877,
								70915
							],
							[
								70927,
								70963
							],
							[
								70975,
								71022
							],
							[
								71034,
								71057
							],
							[
								71069,
								71103
							],
							[
								71311,
								71354
							],
							[
								71366,
								71418
							],
							[
								71522,
								71569
							],
							[
								71581,
								71609
							],
							[
								71621,
								71659
							],
							[
								71671,
								71712
							],
							[
								71724,
								71743
							],
							[
								71755,
								71784
							],
							[
								71796,
								71822
							],
							[
								71834,
								71862
							],
							[
								71874,
								71926
							],
							[
								71938,
								71966
							],
							[
								71978,
								72012
							],
							[
								72144,
								72165
							],
							[
								72177,
								72200
							],
							[
								72212,
								72250
							],
							[
								72262,
								72300
							],
							[
								72312,
								72333
							],
							[
								72345,
								72370
							],
							[
								72382,
								72407
							],
							[
								72419,
								72450
							],
							[
								72537,
								72556
							],
							[
								72568,
								72591
							],
							[
								72603,
								72644
							],
							[
								72656,
								72699
							],
							[
								72711,
								72738
							],
							[
								72750,
								72788
							],
							[
								72800,
								72833
							],
							[
								72845,
								72881
							],
							[
								72893,
								72912
							],
							[
								72978,
								73041
							],
							[
								73053,
								73109
							],
							[
								73121,
								73144
							],
							[
								73156,
								73191
							],
							[
								73203,
								73259
							],
							[
								73271,
								73324
							],
							[
								73336,
								73381
							],
							[
								73393,
								73438
							],
							[
								73450,
								73495
							],
							[
								73507,
								73537
							],
							[
								73549,
								73596
							],
							[
								73608,
								73633
							],
							[
								73645,
								73678
							],
							[
								73690,
								73720
							],
							[
								73732,
								73772
							],
							[
								73784,
								73837
							],
							[
								73849,
								73872
							],
							[
								73884,
								73905
							],
							[
								73917,
								73957
							],
							[
								73969,
								74003
							],
							[
								74015,
								74037
							],
							[
								74049,
								74083
							],
							[
								74095,
								74118
							],
							[
								74130,
								74172
							],
							[
								74184,
								74215
							],
							[
								74227,
								74253
							],
							[
								74266,
								74296
							],
							[
								74870,
								74910
							],
							[
								75120,
								75124
							],
							[
								76265,
								76305
							],
							[
								76688,
								76748
							],
							[
								77184,
								77210
							],
							[
								77318,
								77356
							],
							[
								77552,
								77556
							],
							[
								77843,
								77873
							],
							[
								78332,
								78336
							],
							[
								78988,
								79027
							],
							[
								79691,
								79748
							],
							[
								80069,
								80093
							],
							[
								80566,
								80596
							],
							[
								80860,
								80901
							],
							[
								81036,
								81075
							],
							[
								81087,
								81132
							],
							[
								81144,
								81172
							],
							[
								81184,
								81220
							],
							[
								81364,
								81402
							],
							[
								81414,
								81453
							],
							[
								81465,
								81506
							],
							[
								81518,
								81553
							],
							[
								81565,
								81612
							],
							[
								81624,
								81663
							],
							[
								81676,
								81710
							],
							[
								81722,
								81770
							],
							[
								81782,
								81825
							],
							[
								81837,
								81886
							],
							[
								81898,
								81948
							],
							[
								81960,
								82009
							],
							[
								82263,
								82287
							],
							[
								82344,
								82369
							],
							[
								82748,
								82777
							],
							[
								82970,
								82975
							],
							[
								83250,
								83271
							],
							[
								83338,
								83396
							],
							[
								83542,
								83546
							],
							[
								84131,
								84139
							],
							[
								84191,
								84199
							],
							[
								84311,
								84315
							],
							[
								84568,
								84626
							],
							[
								84728,
								84733
							],
							[
								85082,
								85089
							],
							[
								85278,
								85331
							],
							[
								85568,
								85629
							],
							[
								85939,
								86019
							],
							[
								86140,
								86145
							],
							[
								86483,
								86544
							],
							[
								86886,
								86896
							],
							[
								86962,
								86987
							],
							[
								87025,
								87035
							],
							[
								87100,
								87111
							],
							[
								87185,
								87200
							],
							[
								87239,
								87243
							],
							[
								87323,
								87348
							],
							[
								87387,
								87395
							],
							[
								87437,
								87466
							],
							[
								87496,
								87500
							]
						],
						"symlist":
						[
							" (ast, r) =>",
							" function DeepFind(ast, pred, flags = deep.RETURN_VALUE)",
							" function* DeepSelect(ast, pred, flags = deep.RETURN_VALUE)",
							" function DeepCachePath(ast, path, m)",
							" function DeepPathOf(ast, value)",
							" function DeepGet(ast, path, ...args)",
							"function FileTime(filename)",
							"function Newer(file, ...other)",
							"other =>",
							"function Older(file, other)",
							"function GetSubscripts(str)",
							"m =>",
							"function TrimSubscripts(str, sub)",
							" function nameOrIdPred(name_or_id, ...args)",
							" node =>",
							"List",
							"constructor(...args)",
							"filter(callback, thisArg = null)",
							"callback = elem =>",
							"slice(start, end)",
							"get first()",
							"elem =>",
							"entries()",
							"keys()",
							"values()",
							"toArray()",
							"(a, n) =>",
							"List",
							"Node",
							"constructor(ast)",
							"static get(ast)",
							"get ast()",
							"get id()",
							"get loc()",
							"get file()",
							" (v, k) =>",
							" (v, k) =>",
							"get range()",
							"r =>",
							"toJSON(obj)",
							"Node",
							"(node, ast) =>",
							" function PathOf(node, ast = globalThis['$'].data)",
							" function* Hier(node_or_path, t = (p, ast, abort) => p.",
							"(ast), ast = globalThis['$'].data)",
							"p =>",
							"abortFn = () =>",
							" function FindType(typeName, ast = globalThis['$'].data)",
							"([tok]) =>",
							"node =>",
							"PointerType",
							"constructor(pointee, ast, ns)",
							"static fromString(str, ast, ns)",
							"toString()",
							"ReferenceType",
							"constructor(pointee, ast, ns)",
							"static fromString(str, ast, ns)",
							"toString()",
							"Type",
							"constructor(node, ast, ns)",
							"n =>",
							"get regExp()",
							"isEnum()",
							"isPointer()",
							"isReference()",
							"isFunction()",
							"isArray()",
							"isInteger()",
							"isStruct()",
							"isClass()",
							"arrayOf()",
							"get subscripts()",
							"trimSubscripts()",
							"get pointer()",
							"get reference()",
							"getPointer(ast)",
							"get unsigned()",
							"get signed()",
							"isCompound()",
							"isFloatingPoint()",
							"get alias()",
							"get aliases()",
							"isEnum()",
							"isString()",
							"get ffi()",
							"get size()",
							"toJS()",
							"toJSON(obj)",
							"static get(name_or_id, ast = globalThis['$'].data)",
							" node =>",
							" node =>",
							"function RoundTo(value, align)",
							"RecordDecl",
							"constructor(node, ast, ns)",
							"child =>",
							"child =>",
							"() =>",
							"node =>",
							"(acc, node) =>",
							"i =>",
							" n =>",
							"n =>",
							"([name, t]) =>",
							"get size()",
							"(acc, [name, type]) =>",
							"toJSON()",
							"([name, member]) =>",
							"EnumDecl",
							"constructor(node, ast)",
							"child =>",
							"({ name, type, inner }) =>",
							"toJSON()",
							"TypedefDecl",
							"constructor(node, ast, ns)",
							"n =>",
							" (v, k) =>",
							"n =>",
							"n =>",
							"n =>",
							"get size()",
							"toJSON()",
							"FieldDecl",
							"constructor(node, ast)",
							"FunctionDecl",
							"constructor(node, ast, ns)",
							"child =>",
							"child =>",
							"({ name, type }) =>",
							"isMethod()",
							"toJSON()",
							"VarDecl",
							"constructor(node, ast)",
							"toJSON()",
							"ClassDecl",
							"constructor(node, ast)",
							"BuiltinType",
							"constructor(node, ast)",
							"ConstantArrayType",
							"constructor(node, ast)",
							"toJSON()",
							"Range",
							"constructor(begin, end)",
							"get begin()",
							"set begin(v)",
							"get end()",
							"set end(v)",
							"toString(opts = { printFile: true })",
							"get length()",
							"toArray()",
							"toObject()",
							"Range",
							"Location",
							"static at(file, offset)",
							"static from(loc)",
							"constructor(loc)",
							"update(other)",
							"get line()",
							"set line(v)",
							"get column()",
							"set column(v)",
							"get offset()",
							"set offset(v)",
							" (t, ...c) =>",
							"'\\x1b[m' : t =>",
							"toString(opts = { printFile: true, onlyOffset: false })",
							"toObject()",
							"localeCompare(other)",
							" function TypeFactory(node, ast, cache = true)",
							"async function SpawnCompiler(compiler, input, outfile, args = [])",
							"p =>",
							"p =>",
							"line =>",
							"line =>",
							"line =>",
							" function PipeReader(fd, callback)",
							"(resolve, reject) =>",
							" () =>",
							" data =>",
							" function ReadPipe(fd, callback)",
							" function ReadOutput(fd)",
							"async function SourceDependencies(...args)",
							"async function AstDump(compiler, source, args, force)",
							"size()",
							"json()",
							"data()",
							"SetFile = loc =>",
							"files()",
							"n =>",
							"file =>",
							"pred2 = (used, implicit) =>",
							" node =>",
							"types()",
							" n =>",
							" () =>",
							"List",
							"functions()",
							" n =>",
							" () =>",
							" n =>",
							"List",
							"namespaces()",
							" n =>",
							"List",
							"classes()",
							"predicate = n =>",
							"List",
							"variables()",
							"n =>",
							"List",
							"names(depth = 1)",
							"n =>",
							"n =>",
							" function NameFor(decl, ast = globalThis['$']?.data)",
							" (value, key) =>",
							" function NodeType(n)",
							"t =>",
							" n =>",
							" function NodeName(n, name)",
							" function* RawLocation(path)",
							" function* RawRange(path)",
							" function CompleteLocation(path)",
							"l =>",
							" function CompleteRange(path)",
							"l =>",
							" function GetLoc(node)",
							" function GetTypeNode(node, ast = globalThis['$'].data)",
							"node =>",
							"node =>",
							" function GetTypeStr(node)",
							"inner =>",
							"inner =>",
							"([n, t]) =>",
							"NodeError",
							"constructor(message, node)",
							"NodeError",
							" function NodePrinter(ast)",
							" function put(str)",
							" function trim()",
							"printer = function(node)",
							"get()",
							"value()",
							"value(node)",
							"toString()",
							"i =>",
							"NodePrinter",
							"AbiTagAttr(abi_tag_attr)",
							"AccessSpecDecl(access_spec_decl)",
							"AlignedAttr(aligned_attr)",
							"AlwaysInlineAttr(always_inline_attr)",
							"ArraySubscriptExpr(array_subscript_expr)",
							"AsmLabelAttr(asm_label_attr)",
							"BinaryOperator(binary_operator)",
							"BlockCommandComment(block_command_comment)",
							"BuiltinAttr(builtin_attr)",
							"BreakStmt(break_stmt)",
							"CallExpr(call_expr)",
							"RecoveryExpr(recovery_expr)",
							"CaseStmt(case_stmt)",
							"CharacterLiteral(character_literal)",
							"CompoundAssignOperator(compound_assign_operator)",
							"CompoundStmt(compound_stmt)",
							"ConditionalOperator(conditional_operator)",
							"ConstantExpr(constant_expr)",
							"ConstAttr(const_attr)",
							"ContinueStmt(continue_stmt)",
							"CStyleCastExpr(cstyle_cast_expr)",
							"DeclRefExpr(decl_ref_expr)",
							"DeclStmt(decl_stmt)",
							"DefaultStmt(default_stmt)",
							"DeprecatedAttr(deprecated_attr)",
							"DoStmt(do_stmt)",
							"EmptyDecl(empty_decl)",
							"EnumConstantDecl(enum_constant_decl)",
							"EnumDecl(enum_decl)",
							"FieldDecl(field_decl)",
							"FloatingLiteral(floating_literal)",
							"FormatAttr(format_attr)",
							"ForStmt(for_stmt)",
							"n =>",
							"FullComment(full_comment)",
							"FunctionDecl(function_decl)",
							"n =>",
							"n =>",
							"GotoStmt(goto_stmt)",
							" n =>",
							"HTMLEndTagComment(html_end_tag_comment)",
							"HTMLStartTagComment(html_start_tag_comment)",
							"IfStmt(if_stmt)",
							"ImplicitCastExpr(implicit_cast_expr)",
							"InitListExpr(init_list_expr)",
							"InlineCommandComment(inline_command_comment)",
							"IntegerLiteral(integer_literal)",
							"LabelStmt(label_stmt)",
							"MemberExpr(member_expr)",
							"NonNullAttr(non_null_attr)",
							"NoThrowAttr(no_throw_attr)",
							"NullStmt(null_stmt)",
							"ParagraphComment(paragraph_comment)",
							"ParamCommandComment(param_command_comment)",
							"ParenExpr(paren_expr)",
							"ParenListExpr(paren_list_expr)",
							"ParmVarDecl(parm_var_decl)",
							"PureAttr(pure_attr)",
							"RecordDecl(record_decl)",
							"RestrictAttr(restrict_attr)",
							"ReturnStmt(return_stmt)",
							"ReturnsTwiceAttr(returns_twice_attr)",
							"StringLiteral(string_literal)",
							"SwitchStmt(switch_stmt)",
							"TextComment(text_comment)",
							"TranslationUnitDecl(translation_unit_decl)",
							"TypedefDecl(typedef_decl)",
							"UnaryExprOrTypeTraitExpr(unary_expr_or_type_trait_expr)",
							"UnaryOperator(unary_operator)",
							"UnresolvedLookupExpr(unresolved_lookup_expr)",
							"UnresolvedMemberExpr(unresolved_member_expr)",
							"VarDecl(var_decl, base_type)",
							"([offset, subscript]) =>",
							"VerbatimBlockComment(verbatim_block_comment)",
							"VerbatimBlockLineComment(verbatim_block_line_comment)",
							"WarnUnusedResultAttr(warn_unused_result_attr)",
							"WeakAttr(weak_attr)",
							"WhileStmt(while_stmt)",
							"OverrideAttr(override_attr)",
							"AddrLabelExpr(addr_label_expr)",
							"AliasAttr(alias_attr)",
							"AlignValueAttr(align_value_attr)",
							"AllocSizeAttr(alloc_size_attr)",
							"ArrayInitIndexExpr(array_init_index_expr)",
							"ArrayInitLoopExpr(array_init_loop_expr)",
							"AtomicExpr(atomic_expr)",
							"AtomicType(atomic_type)",
							"AutoType(auto_type)",
							"BuiltinTemplateDecl(builtin_template_decl)",
							"BuiltinType(builtin_type)",
							"CallbackAttr(callback_attr)",
							"ClassTemplateDecl(class_template_decl)",
							"ClassTemplatePartialSpecializationDecl(class_template_partial_specialization_decl)",
							"ClassTemplateSpecializationDecl(class_template_specialization_decl)",
							"ComplexType(complex_type)",
							"CompoundLiteralExpr(compound_literal_expr)",
							"ConstantArrayType(constant_array_type)",
							"ConstructorUsingShadowDecl(constructor_using_shadow_decl)",
							"ConvertVectorExpr(convert_vector_expr)",
							"DecayedType(decayed_type)",
							"DecltypeType(decltype_type)",
							"DependentNameType(dependent_name_type)",
							"DependentScopeDeclRefExpr(dependent_scope_decl_ref_expr)",
							"DependentSizedArrayType(dependent_sized_array_type)",
							"DependentTemplateSpecializationType(dependent_template_specialization_type)",
							"ElaboratedType(elaborated_type)",
							"EnumType(enum_type)",
							"ExprWithCleanups(expr_with_cleanups)",
							"FinalAttr(final_attr)",
							"FormatArgAttr(format_arg_attr)",
							"FriendDecl(friend_decl)",
							"FunctionNoProtoType(function_no_proto_type)",
							"FunctionProtoType(function_proto_type)",
							"FunctionTemplateDecl(function_template_decl)",
							"GCCAsmStmt(gcc_asm_stmt)",
							"GNUInlineAttr(gnu_inline_attr)",
							"GNUNullExpr(gnu_null_expr)",
							"ImplicitValueInitExpr(implicit_value_init_expr)",
							"IncompleteArrayType(incomplete_array_type)",
							"IndirectFieldDecl(indirect_field_decl)",
							"IndirectGotoStmt(indirect_goto_stmt)",
							"InjectedClassNameType(injected_class_name_type)",
							"LambdaExpr(lambda_expr)",
							"LinkageSpecDecl(linkage_spec_decl)",
							"LValueReferenceType(l_value_reference_type)",
							"MaterializeTemporaryExpr(materialize_temporary_expr)",
							"MaxFieldAlignmentAttr(max_field_alignment_attr)",
							"MayAliasAttr(may_alias_attr)",
							"MemberPointerType(member_pointer_type)",
							"MinVectorWidthAttr(min_vector_width_attr)",
							"ModeAttr(mode_attr)",
							"NamespaceDecl(namespace_decl)",
							"NoDebugAttr(no_debug_attr)",
							"NoInlineAttr(no_inline_attr)",
							"NonTypeTemplateParmDecl(non_type_template_parm_decl)",
							"OffsetOfExpr(offset_of_expr)",
							"OpaqueValueExpr(opaque_value_expr)",
							"OwnerAttr(owner_attr)",
							"PackedAttr(packed_attr)",
							"PackExpansionExpr(pack_expansion_expr)",
							"PackExpansionType(pack_expansion_type)",
							"ParenType(paren_type)",
							"PointerAttr(pointer_attr)",
							"PointerType(pointer_type)",
							"PredefinedExpr(predefined_expr)",
							"QualType(qual_type)",
							"RecordType(record_type)",
							"ReturnsNonNullAttr(returns_non_null_attr)",
							"RValueReferenceType(r_value_reference_type)",
							"SentinelAttr(sentinel_attr)",
							"ShuffleVectorExpr(shuffle_vector_expr)",
							"SizeOfPackExpr(size_of_pack_expr)",
							"StaticAssertDecl(static_assert_decl)",
							"StmtExpr(stmt_expr)",
							"SubstNonTypeTemplateParmExpr(subst_non_type_template_parm_expr)",
							"SubstTemplateTypeParmType(subst_template_type_parm_type)",
							"TargetAttr(target_attr)",
							"TemplateArgument(template_argument)",
							"TemplateSpecializationType(template_specialization_type)",
							"TemplateTemplateParmDecl(template_template_parm_decl)",
							"TemplateTypeParmDecl(template_type_parm_decl)",
							"TemplateTypeParmType(template_type_parm_type)",
							"TParamCommandComment(t_param_command_comment)",
							"TypeAliasDecl(type_alias_decl)",
							"TypeAliasTemplateDecl(type_alias_template_decl)",
							"TypedefType(typedef_type)",
							"TypeOfExprType(type_of_expr_type)",
							"TypeTraitExpr(type_trait_expr)",
							"UnaryTransformType(unary_transform_type)",
							"UnresolvedUsingValueDecl(unresolved_using_value_decl)",
							"UnusedAttr(unused_attr)",
							"UsingDecl(using_decl)",
							"UsingDirectiveDecl(using_directive_decl)",
							"UsingShadowDecl(using_shadow_decl)",
							"VAArgExpr(va_arg_expr)",
							"VarTemplateDecl(var_template_decl)",
							"VectorType(vector_type)",
							"VerbatimLineComment(verbatim_line_comment)",
							"VisibilityAttr(visibility_attr)",
							"WeakRefAttr(weak_ref_attr)",
							"CXXRecordDecl(cxx_record_decl)",
							"CXXConstructorDecl(cxx_constructor_decl)",
							"n =>",
							"CXXCtorInitializer(cxx_ctor_initializer)",
							"CXXDependentScopeMemberExpr(cxx_dependent_scope_member_expr)",
							"CXXThisExpr(cxx_this_expr)",
							"CXXDestructorDecl(cxx_destructor_decl)",
							"n =>",
							"CXXMethodDecl(cxx_method_decl)",
							"n =>",
							"CXXStaticCastExpr(cxx_static_cast_expr)",
							"CXXUnresolvedConstructExpr(cxx_unresolved_construct_expr)",
							"CXXNewExpr(cxx_new_expr)",
							"CXXDeleteExpr(cxx_delete_expr)",
							"CXXBoolLiteralExpr(cxx_bool_literal_expr)",
							"CXX11NoReturnAttr(cxx11_no_return_attr)",
							"CXXBindTemporaryExpr(cxx_bind_temporary_expr)",
							"CXXCatchStmt(cxx_catch_stmt)",
							"CXXConstructExpr(cxx_construct_expr)",
							"CXXConversionDecl(cxx_conversion_decl)",
							"CXXDefaultArgExpr(cxx_default_arg_expr)",
							"CXXDefaultInitExpr(cxx_default_init_expr)",
							"CXXForRangeStmt(cxx_for_range_stmt)",
							"CXXFunctionalCastExpr(cxx_functional_cast_expr)",
							"CXXMemberCallExpr(cxx_member_call_expr)",
							"CXXNoexceptExpr(cxx_noexcept_expr)",
							"CXXNullPtrLiteralExpr(cxx_null_ptr_literal_expr)",
							"CXXOperatorCallExpr(cxx_operator_call_expr)",
							"CXXReinterpretCastExpr(cxx_reinterpret_cast_expr)",
							"CXXScalarValueInitExpr(cxx_scalar_value_init_expr)",
							"CXXTemporaryObjectExpr(cxx_temporary_object_expr)",
							"CXXTryStmt(cxx_try_stmt)",
							" function PrintNode(node)",
							" function PrintAst(node, ast)",
							"get()",
							" function isNode(obj)",
							" function GetType(name_or_id, ast = globalThis['$']?.data)",
							"n =>",
							" node =>",
							" node =>",
							"r =>",
							" function GetClass(name_or_id, ast = globalThis['$'].data)",
							" n =>",
							"bases()",
							" function* GetBases(node, ast = globalThis['$'].data)",
							" function GetByName(arg, ast = globalThis['$'].data, ...args)",
							" function GetNamespace(arg, root = globalThis['$'].data, predicate = () => true)",
							" n =>",
							" function NamespaceOf(node, path, ast = globalThis['$'].data)",
							"toString()",
							" function GetFields(node)",
							" (v, k) =>",
							"([v, p]) =>",
							"([loc, ptr]) =>",
							"i =>",
							" function GetParams(node)",
							"child =>",
							" function PathRemoveLoc(path)",
							"p =>"
						]
					},
					"AQAAAAAAAAAAAAAATi0AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					63,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					64,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					65,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					1,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/clang-ast.js",
						"symkeys":
						[
							[
								848,
								861
							],
							[
								940,
								996
							],
							[
								1441,
								1500
							],
							[
								2039,
								2076
							],
							[
								2295,
								2327
							],
							[
								2429,
								2466
							],
							[
								2620,
								2647
							],
							[
								2729,
								2759
							],
							[
								2826,
								2834
							],
							[
								2873,
								2900
							],
							[
								2949,
								2976
							],
							[
								3053,
								3057
							],
							[
								3080,
								3113
							],
							[
								3293,
								3336
							],
							[
								3621,
								3629
							],
							[
								4021,
								4025
							],
							[
								4044,
								4064
							],
							[
								4215,
								4247
							],
							[
								4409,
								4427
							],
							[
								4680,
								4697
							],
							[
								5004,
								5015
							],
							[
								5035,
								5042
							],
							[
								5069,
								5078
							],
							[
								5198,
								5204
							],
							[
								5316,
								5324
							],
							[
								5439,
								5448
							],
							[
								5474,
								5483
							],
							[
								5514,
								5518
							],
							[
								5579,
								5583
							],
							[
								5659,
								5675
							],
							[
								5932,
								5947
							],
							[
								6014,
								6023
							],
							[
								6084,
								6092
							],
							[
								6141,
								6150
							],
							[
								6197,
								6207
							],
							[
								6260,
								6270
							],
							[
								6301,
								6311
							],
							[
								6399,
								6410
							],
							[
								6616,
								6620
							],
							[
								6801,
								6812
							],
							[
								7043,
								7047
							],
							[
								7099,
								7113
							],
							[
								7163,
								7213
							],
							[
								7283,
								7338
							],
							[
								7343,
								7377
							],
							[
								7556,
								7560
							],
							[
								7641,
								7656
							],
							[
								7744,
								7800
							],
							[
								7874,
								7884
							],
							[
								8088,
								8095
							],
							[
								8212,
								8223
							],
							[
								8260,
								8289
							],
							[
								8350,
								8381
							],
							[
								8583,
								8593
							],
							[
								8648,
								8661
							],
							[
								8698,
								8727
							],
							[
								8788,
								8819
							],
							[
								9023,
								9033
							],
							[
								9088,
								9092
							],
							[
								9190,
								9216
							],
							[
								12075,
								12079
							],
							[
								13094,
								13106
							],
							[
								13229,
								13237
							],
							[
								13323,
								13334
							],
							[
								13457,
								13470
							],
							[
								13593,
								13605
							],
							[
								13699,
								13708
							],
							[
								13760,
								13771
							],
							[
								13860,
								13870
							],
							[
								13913,
								13922
							],
							[
								13964,
								13973
							],
							[
								14093,
								14109
							],
							[
								14167,
								14183
							],
							[
								14231,
								14244
							],
							[
								14391,
								14406
							],
							[
								14553,
								14568
							],
							[
								14825,
								14839
							],
							[
								14925,
								14937
							],
							[
								15004,
								15016
							],
							[
								15122,
								15139
							],
							[
								15225,
								15236
							],
							[
								15296,
								15309
							],
							[
								15452,
								15460
							],
							[
								15568,
								15578
							],
							[
								15759,
								15768
							],
							[
								17574,
								17584
							],
							[
								19663,
								19669
							],
							[
								19955,
								19966
							],
							[
								20067,
								20117
							],
							[
								20203,
								20211
							],
							[
								20271,
								20279
							],
							[
								22086,
								22116
							],
							[
								22195,
								22205
							],
							[
								22223,
								22249
							],
							[
								22378,
								22386
							],
							[
								22469,
								22477
							],
							[
								22655,
								22660
							],
							[
								22698,
								22705
							],
							[
								22789,
								22803
							],
							[
								23396,
								23400
							],
							[
								23481,
								23486
							],
							[
								25020,
								25024
							],
							[
								25924,
								25938
							],
							[
								26002,
								26012
							],
							[
								26097,
								26119
							],
							[
								26341,
								26349
							],
							[
								26471,
								26490
							],
							[
								26588,
								26596
							],
							[
								26614,
								26636
							],
							[
								26757,
								26765
							],
							[
								26870,
								26896
							],
							[
								27251,
								27259
							],
							[
								27374,
								27385
							],
							[
								27403,
								27429
							],
							[
								27501,
								27505
							],
							[
								27610,
								27620
							],
							[
								27680,
								27684
							],
							[
								27747,
								27751
							],
							[
								27801,
								27805
							],
							[
								28215,
								28225
							],
							[
								28257,
								28265
							],
							[
								28362,
								28371
							],
							[
								28389,
								28411
							],
							[
								28629,
								28641
							],
							[
								28659,
								28685
							],
							[
								28920,
								28928
							],
							[
								28991,
								28999
							],
							[
								30066,
								30085
							],
							[
								30201,
								30211
							],
							[
								30266,
								30274
							],
							[
								30383,
								30390
							],
							[
								30408,
								30430
							],
							[
								30775,
								30783
							],
							[
								30880,
								30889
							],
							[
								30913,
								30935
							],
							[
								31040,
								31051
							],
							[
								31069,
								31091
							],
							[
								31468,
								31485
							],
							[
								31503,
								31525
							],
							[
								31781,
								31789
							],
							[
								31900,
								31905
							],
							[
								31953,
								31976
							],
							[
								32098,
								32109
							],
							[
								32158,
								32170
							],
							[
								32232,
								32241
							],
							[
								32288,
								32298
							],
							[
								32336,
								32372
							],
							[
								33027,
								33039
							],
							[
								33085,
								33094
							],
							[
								33141,
								33151
							],
							[
								33331,
								33336
							],
							[
								33392,
								33400
							],
							[
								33493,
								33516
							],
							[
								33775,
								33791
							],
							[
								34010,
								34026
							],
							[
								34437,
								34450
							],
							[
								34596,
								34606
							],
							[
								34654,
								34665
							],
							[
								34757,
								34769
							],
							[
								34819,
								34832
							],
							[
								34880,
								34892
							],
							[
								34942,
								34955
							],
							[
								35203,
								35216
							],
							[
								35251,
								35266
							],
							[
								35346,
								35401
							],
							[
								35945,
								35955
							],
							[
								36198,
								36218
							],
							[
								36301,
								36347
							],
							[
								37846,
								37911
							],
							[
								38221,
								38225
							],
							[
								38486,
								38490
							],
							[
								39215,
								39222
							],
							[
								39276,
								39283
							],
							[
								39367,
								39374
							],
							[
								39551,
								39586
							],
							[
								39625,
								39645
							],
							[
								39675,
								39681
							],
							[
								39702,
								39710
							],
							[
								39817,
								39850
							],
							[
								40115,
								40140
							],
							[
								40481,
								40523
							],
							[
								41055,
								41108
							],
							[
								42518,
								42524
							],
							[
								42574,
								42580
							],
							[
								42745,
								42751
							],
							[
								42893,
								42909
							],
							[
								43454,
								43461
							],
							[
								43504,
								43508
							],
							[
								43528,
								43535
							],
							[
								43656,
								43683
							],
							[
								43742,
								43757
							],
							[
								44062,
								44069
							],
							[
								44129,
								44143
							],
							[
								44188,
								44203
							],
							[
								44229,
								44233
							],
							[
								44265,
								44276
							],
							[
								44309,
								44321
							],
							[
								44355,
								44368
							],
							[
								44444,
								44449
							],
							[
								44529,
								44533
							],
							[
								44557,
								44569
							],
							[
								44632,
								44637
							],
							[
								44667,
								44671
							],
							[
								44695,
								44704
							],
							[
								44717,
								44733
							],
							[
								45075,
								45079
							],
							[
								45103,
								45114
							],
							[
								45173,
								45177
							],
							[
								45215,
								45219
							],
							[
								45251,
								45267
							],
							[
								45306,
								45310
							],
							[
								45328,
								45332
							],
							[
								45376,
								45428
							],
							[
								45616,
								45632
							],
							[
								45992,
								46013
							],
							[
								46039,
								46043
							],
							[
								46485,
								46490
							],
							[
								46525,
								46552
							],
							[
								46746,
								46774
							],
							[
								46955,
								46980
							],
							[
								47055,
								47087
							],
							[
								47218,
								47222
							],
							[
								47359,
								47388
							],
							[
								47498,
								47502
							],
							[
								47796,
								47818
							],
							[
								48857,
								48912
							],
							[
								48992,
								48999
							],
							[
								49065,
								49072
							],
							[
								49109,
								49135
							],
							[
								49229,
								49237
							],
							[
								49303,
								49311
							],
							[
								49373,
								49384
							],
							[
								49538,
								49547
							],
							[
								49566,
								49592
							],
							[
								49645,
								49654
							],
							[
								49707,
								49733
							],
							[
								49785,
								49804
							],
							[
								49880,
								49897
							],
							[
								49932,
								49956
							],
							[
								50215,
								50220
							],
							[
								50278,
								50285
							],
							[
								50367,
								50378
							],
							[
								51086,
								51096
							],
							[
								51144,
								51148
							],
							[
								51339,
								51350
							],
							[
								51361,
								51385
							],
							[
								51453,
								51485
							],
							[
								51641,
								51666
							],
							[
								51730,
								51766
							],
							[
								51836,
								51876
							],
							[
								52128,
								52156
							],
							[
								52203,
								52234
							],
							[
								52463,
								52505
							],
							[
								52708,
								52733
							],
							[
								52891,
								52912
							],
							[
								52957,
								52976
							],
							[
								53310,
								53337
							],
							[
								53405,
								53424
							],
							[
								53629,
								53664
							],
							[
								53782,
								53830
							],
							[
								54076,
								54103
							],
							[
								54721,
								54762
							],
							[
								55000,
								55027
							],
							[
								55170,
								55191
							],
							[
								55252,
								55279
							],
							[
								55324,
								55356
							],
							[
								55606,
								55632
							],
							[
								55826,
								55845
							],
							[
								56507,
								56532
							],
							[
								56580,
								56611
							],
							[
								56678,
								56693
							],
							[
								56888,
								56909
							],
							[
								57026,
								57062
							],
							[
								57282,
								57301
							],
							[
								57705,
								57726
							],
							[
								57943,
								57976
							],
							[
								58036,
								58059
							],
							[
								58122,
								58139
							],
							[
								58259,
								58263
							],
							[
								59090,
								59115
							],
							[
								59322,
								59349
							],
							[
								59814,
								59818
							],
							[
								60028,
								60032
							],
							[
								60231,
								60250
							],
							[
								60371,
								60376
							],
							[
								60714,
								60753
							],
							[
								60852,
								60895
							],
							[
								61105,
								61120
							],
							[
								61386,
								61422
							],
							[
								61518,
								61546
							],
							[
								61816,
								61860
							],
							[
								61922,
								61953
							],
							[
								62012,
								62033
							],
							[
								62092,
								62115
							],
							[
								62551,
								62577
							],
							[
								62645,
								62671
							],
							[
								62735,
								62754
							],
							[
								62796,
								62831
							],
							[
								63005,
								63047
							],
							[
								63232,
								63253
							],
							[
								63429,
								63459
							],
							[
								63679,
								63705
							],
							[
								64134,
								64153
							],
							[
								64214,
								64237
							],
							[
								64772,
								64799
							],
							[
								64849,
								64872
							],
							[
								65029,
								65065
							],
							[
								65135,
								65164
							],
							[
								65222,
								65245
							],
							[
								65423,
								65448
							],
							[
								65532,
								65574
							],
							[
								65673,
								65698
							],
							[
								66002,
								66057
							],
							[
								66299,
								66328
							],
							[
								66579,
								66623
							],
							[
								66755,
								66799
							],
							[
								66886,
								66914
							],
							[
								67058,
								67082
							],
							[
								67330,
								67374
							],
							[
								67696,
								67749
							],
							[
								67848,
								67893
							],
							[
								67968,
								67987
							],
							[
								68048,
								68069
							],
							[
								68246,
								68273
							],
							[
								68322,
								68352
							],
							[
								68364,
								68385
							],
							[
								68397,
								68429
							],
							[
								68571,
								68601
							],
							[
								68613,
								68654
							],
							[
								68666,
								68705
							],
							[
								68717,
								68740
							],
							[
								68752,
								68775
							],
							[
								68787,
								68806
							],
							[
								68818,
								68860
							],
							[
								68872,
								68897
							],
							[
								68909,
								68936
							],
							[
								68948,
								68986
							],
							[
								68998,
								69080
							],
							[
								69092,
								69159
							],
							[
								69171,
								69196
							],
							[
								69208,
								69250
							],
							[
								69435,
								69473
							],
							[
								69485,
								69542
							],
							[
								69554,
								69592
							],
							[
								69604,
								69629
							],
							[
								69641,
								69668
							],
							[
								69680,
								69718
							],
							[
								69730,
								69786
							],
							[
								69880,
								69931
							],
							[
								69943,
								70018
							],
							[
								70030,
								70061
							],
							[
								70073,
								70092
							],
							[
								70104,
								70140
							],
							[
								70236,
								70257
							],
							[
								70269,
								70299
							],
							[
								70311,
								70334
							],
							[
								70346,
								70389
							],
							[
								70401,
								70439
							],
							[
								70451,
								70495
							],
							[
								70507,
								70531
							],
							[
								70648,
								70678
							],
							[
								70690,
								70716
							],
							[
								70760,
								70807
							],
							[
								70819,
								70861
							],
							[
								70873,
								70911
							],
							[
								70923,
								70959
							],
							[
								70971,
								71018
							],
							[
								71030,
								71053
							],
							[
								71065,
								71099
							],
							[
								71307,
								71350
							],
							[
								71362,
								71414
							],
							[
								71518,
								71565
							],
							[
								71577,
								71605
							],
							[
								71617,
								71655
							],
							[
								71667,
								71708
							],
							[
								71720,
								71739
							],
							[
								71751,
								71780
							],
							[
								71792,
								71818
							],
							[
								71830,
								71858
							],
							[
								71870,
								71922
							],
							[
								71934,
								71962
							],
							[
								71974,
								72008
							],
							[
								72140,
								72161
							],
							[
								72173,
								72196
							],
							[
								72208,
								72246
							],
							[
								72258,
								72296
							],
							[
								72308,
								72329
							],
							[
								72341,
								72366
							],
							[
								72378,
								72403
							],
							[
								72415,
								72446
							],
							[
								72533,
								72552
							],
							[
								72564,
								72587
							],
							[
								72599,
								72640
							],
							[
								72652,
								72695
							],
							[
								72707,
								72734
							],
							[
								72746,
								72784
							],
							[
								72796,
								72829
							],
							[
								72841,
								72877
							],
							[
								72889,
								72908
							],
							[
								72974,
								73037
							],
							[
								73049,
								73105
							],
							[
								73117,
								73140
							],
							[
								73152,
								73187
							],
							[
								73199,
								73255
							],
							[
								73267,
								73320
							],
							[
								73332,
								73377
							],
							[
								73389,
								73434
							],
							[
								73446,
								73491
							],
							[
								73503,
								73533
							],
							[
								73545,
								73592
							],
							[
								73604,
								73629
							],
							[
								73641,
								73674
							],
							[
								73686,
								73716
							],
							[
								73728,
								73768
							],
							[
								73780,
								73833
							],
							[
								73845,
								73868
							],
							[
								73880,
								73901
							],
							[
								73913,
								73953
							],
							[
								73965,
								73999
							],
							[
								74011,
								74033
							],
							[
								74045,
								74079
							],
							[
								74091,
								74114
							],
							[
								74126,
								74168
							],
							[
								74180,
								74211
							],
							[
								74223,
								74249
							],
							[
								74262,
								74292
							],
							[
								74866,
								74906
							],
							[
								75116,
								75120
							],
							[
								76261,
								76301
							],
							[
								76684,
								76744
							],
							[
								77180,
								77206
							],
							[
								77314,
								77352
							],
							[
								77548,
								77552
							],
							[
								77839,
								77869
							],
							[
								78328,
								78332
							],
							[
								78984,
								79023
							],
							[
								79687,
								79744
							],
							[
								80065,
								80089
							],
							[
								80562,
								80592
							],
							[
								80856,
								80897
							],
							[
								81032,
								81071
							],
							[
								81083,
								81128
							],
							[
								81140,
								81168
							],
							[
								81180,
								81216
							],
							[
								81360,
								81398
							],
							[
								81410,
								81449
							],
							[
								81461,
								81502
							],
							[
								81514,
								81549
							],
							[
								81561,
								81608
							],
							[
								81620,
								81659
							],
							[
								81672,
								81706
							],
							[
								81718,
								81766
							],
							[
								81778,
								81821
							],
							[
								81833,
								81882
							],
							[
								81894,
								81944
							],
							[
								81956,
								82005
							],
							[
								82259,
								82283
							],
							[
								82340,
								82365
							],
							[
								82744,
								82773
							],
							[
								82966,
								82971
							],
							[
								83246,
								83267
							],
							[
								83334,
								83392
							],
							[
								83538,
								83542
							],
							[
								84127,
								84135
							],
							[
								84187,
								84195
							],
							[
								84307,
								84311
							],
							[
								84564,
								84622
							],
							[
								84724,
								84729
							],
							[
								85078,
								85085
							],
							[
								85274,
								85327
							],
							[
								85564,
								85625
							],
							[
								85935,
								86015
							],
							[
								86136,
								86141
							],
							[
								86479,
								86540
							],
							[
								86882,
								86892
							],
							[
								86958,
								86983
							],
							[
								87021,
								87031
							],
							[
								87096,
								87107
							],
							[
								87181,
								87196
							],
							[
								87235,
								87239
							],
							[
								87319,
								87344
							],
							[
								87383,
								87391
							],
							[
								87433,
								87462
							],
							[
								87492,
								87496
							]
						],
						"symlist":
						[
							" (ast, r) =>",
							" function DeepFind(ast, pred, flags = deep.RETURN_VALUE)",
							" function* DeepSelect(ast, pred, flags = deep.RETURN_VALUE)",
							" function DeepCachePath(ast, path, m)",
							" function DeepPathOf(ast, value)",
							" function DeepGet(ast, path, ...args)",
							"function FileTime(filename)",
							"function Newer(file, ...other)",
							"other =>",
							"function Older(file, other)",
							"function GetSubscripts(str)",
							"m =>",
							"function TrimSubscripts(str, sub)",
							" function nameOrIdPred(name_or_id, ...args)",
							" node =>",
							"List",
							"constructor(...args)",
							"filter(callback, thisArg = null)",
							"callback = elem =>",
							"slice(start, end)",
							"get first()",
							"elem =>",
							"entries()",
							"keys()",
							"values()",
							"toArray()",
							"(a, n) =>",
							"List",
							"Node",
							"constructor(ast)",
							"static get(ast)",
							"get ast()",
							"get id()",
							"get loc()",
							"get file()",
							" (v, k) =>",
							" (v, k) =>",
							"get range()",
							"r =>",
							"toJSON(obj)",
							"Node",
							"(node, ast) =>",
							" function PathOf(node, ast = globalThis['$'].data)",
							" function* Hier(node_or_path, t = (p, ast, abort) => p.",
							"(ast), ast = globalThis['$'].data)",
							"p =>",
							"abortFn = () =>",
							" function FindType(typeName, ast = globalThis['$'].data)",
							"([tok]) =>",
							"node =>",
							"PointerType",
							"constructor(pointee, ast, ns)",
							"static fromString(str, ast, ns)",
							"toString()",
							"ReferenceType",
							"constructor(pointee, ast, ns)",
							"static fromString(str, ast, ns)",
							"toString()",
							"Type",
							"constructor(node, ast, ns)",
							"n =>",
							"get regExp()",
							"isEnum()",
							"isPointer()",
							"isReference()",
							"isFunction()",
							"isArray()",
							"isInteger()",
							"isStruct()",
							"isClass()",
							"arrayOf()",
							"get subscripts()",
							"trimSubscripts()",
							"get pointer()",
							"get reference()",
							"getPointer(ast)",
							"get unsigned()",
							"get signed()",
							"isCompound()",
							"isFloatingPoint()",
							"get alias()",
							"get aliases()",
							"isEnum()",
							"isString()",
							"get ffi()",
							"get size()",
							"toJS()",
							"toJSON(obj)",
							"static get(name_or_id, ast = globalThis['$'].data)",
							" node =>",
							" node =>",
							"function RoundTo(value, align)",
							"RecordDecl",
							"constructor(node, ast, ns)",
							"child =>",
							"child =>",
							"() =>",
							"node =>",
							"(acc, node) =>",
							"i =>",
							" n =>",
							"n =>",
							"([name, t]) =>",
							"get size()",
							"(acc, [name, type]) =>",
							"toJSON()",
							"([name, member]) =>",
							"EnumDecl",
							"constructor(node, ast)",
							"child =>",
							"({ name, type, inner }) =>",
							"toJSON()",
							"TypedefDecl",
							"constructor(node, ast, ns)",
							"n =>",
							" (v, k) =>",
							"n =>",
							"n =>",
							"n =>",
							"get size()",
							"toJSON()",
							"FieldDecl",
							"constructor(node, ast)",
							"FunctionDecl",
							"constructor(node, ast, ns)",
							"child =>",
							"child =>",
							"({ name, type }) =>",
							"isMethod()",
							"toJSON()",
							"VarDecl",
							"constructor(node, ast)",
							"toJSON()",
							"ClassDecl",
							"constructor(node, ast)",
							"BuiltinType",
							"constructor(node, ast)",
							"ConstantArrayType",
							"constructor(node, ast)",
							"toJSON()",
							"Range",
							"constructor(begin, end)",
							"get begin()",
							"set begin(v)",
							"get end()",
							"set end(v)",
							"toString(opts = { printFile: true })",
							"get length()",
							"toArray()",
							"toObject()",
							"Range",
							"Location",
							"static at(file, offset)",
							"static from(loc)",
							"constructor(loc)",
							"update(other)",
							"get line()",
							"set line(v)",
							"get column()",
							"set column(v)",
							"get offset()",
							"set offset(v)",
							" (t, ...c) =>",
							"'\\x1b[m' : t =>",
							"toString(opts = { printFile: true, onlyOffset: false })",
							"toObject()",
							"localeCompare(other)",
							" function TypeFactory(node, ast, cache = true)",
							"async function SpawnCompiler(compiler, input, outfile, args = [])",
							"p =>",
							"p =>",
							"line =>",
							"line =>",
							"line =>",
							" function PipeReader(fd, callback)",
							"(resolve, reject) =>",
							" () =>",
							" data =>",
							" function ReadPipe(fd, callback)",
							" function ReadOutput(fd)",
							"async function SourceDependencies(...args)",
							"async function AstDump(compiler, source, args, force)",
							"size()",
							"json()",
							"data()",
							"SetFile = loc =>",
							"files()",
							"n =>",
							"file =>",
							"pred2 = (used, implicit) =>",
							" node =>",
							"types()",
							" n =>",
							" () =>",
							"List",
							"functions()",
							" n =>",
							" () =>",
							" n =>",
							"List",
							"namespaces()",
							" n =>",
							"List",
							"classes()",
							"predicate = n =>",
							"List",
							"variables()",
							"n =>",
							"List",
							"names(depth = 1)",
							"n =>",
							"n =>",
							" function NameFor(decl, ast = globalThis['$']?.data)",
							" (value, key) =>",
							" function NodeType(n)",
							"t =>",
							" n =>",
							" function NodeName(n, name)",
							" function* RawLocation(path)",
							" function* RawRange(path)",
							" function CompleteLocation(path)",
							"l =>",
							" function CompleteRange(path)",
							"l =>",
							" function GetLoc(node)",
							" function GetTypeNode(node, ast = globalThis['$'].data)",
							"node =>",
							"node =>",
							" function GetTypeStr(node)",
							"inner =>",
							"inner =>",
							"([n, t]) =>",
							"NodeError",
							"constructor(message, node)",
							"NodeError",
							" function NodePrinter(ast)",
							" function put(str)",
							" function trim()",
							"printer = function(node)",
							"get()",
							"value()",
							"value(node)",
							"toString()",
							"i =>",
							"NodePrinter",
							"AbiTagAttr(abi_tag_attr)",
							"AccessSpecDecl(access_spec_decl)",
							"AlignedAttr(aligned_attr)",
							"AlwaysInlineAttr(always_inline_attr)",
							"ArraySubscriptExpr(array_subscript_expr)",
							"AsmLabelAttr(asm_label_attr)",
							"BinaryOperator(binary_operator)",
							"BlockCommandComment(block_command_comment)",
							"BuiltinAttr(builtin_attr)",
							"BreakStmt(break_stmt)",
							"CallExpr(call_expr)",
							"RecoveryExpr(recovery_expr)",
							"CaseStmt(case_stmt)",
							"CharacterLiteral(character_literal)",
							"CompoundAssignOperator(compound_assign_operator)",
							"CompoundStmt(compound_stmt)",
							"ConditionalOperator(conditional_operator)",
							"ConstantExpr(constant_expr)",
							"ConstAttr(const_attr)",
							"ContinueStmt(continue_stmt)",
							"CStyleCastExpr(cstyle_cast_expr)",
							"DeclRefExpr(decl_ref_expr)",
							"DeclStmt(decl_stmt)",
							"DefaultStmt(default_stmt)",
							"DeprecatedAttr(deprecated_attr)",
							"DoStmt(do_stmt)",
							"EmptyDecl(empty_decl)",
							"EnumConstantDecl(enum_constant_decl)",
							"EnumDecl(enum_decl)",
							"FieldDecl(field_decl)",
							"FloatingLiteral(floating_literal)",
							"FormatAttr(format_attr)",
							"ForStmt(for_stmt)",
							"n =>",
							"FullComment(full_comment)",
							"FunctionDecl(function_decl)",
							"n =>",
							"n =>",
							"GotoStmt(goto_stmt)",
							" n =>",
							"HTMLEndTagComment(html_end_tag_comment)",
							"HTMLStartTagComment(html_start_tag_comment)",
							"IfStmt(if_stmt)",
							"ImplicitCastExpr(implicit_cast_expr)",
							"InitListExpr(init_list_expr)",
							"InlineCommandComment(inline_command_comment)",
							"IntegerLiteral(integer_literal)",
							"LabelStmt(label_stmt)",
							"MemberExpr(member_expr)",
							"NonNullAttr(non_null_attr)",
							"NoThrowAttr(no_throw_attr)",
							"NullStmt(null_stmt)",
							"ParagraphComment(paragraph_comment)",
							"ParamCommandComment(param_command_comment)",
							"ParenExpr(paren_expr)",
							"ParenListExpr(paren_list_expr)",
							"ParmVarDecl(parm_var_decl)",
							"PureAttr(pure_attr)",
							"RecordDecl(record_decl)",
							"RestrictAttr(restrict_attr)",
							"ReturnStmt(return_stmt)",
							"ReturnsTwiceAttr(returns_twice_attr)",
							"StringLiteral(string_literal)",
							"SwitchStmt(switch_stmt)",
							"TextComment(text_comment)",
							"TranslationUnitDecl(translation_unit_decl)",
							"TypedefDecl(typedef_decl)",
							"UnaryExprOrTypeTraitExpr(unary_expr_or_type_trait_expr)",
							"UnaryOperator(unary_operator)",
							"UnresolvedLookupExpr(unresolved_lookup_expr)",
							"UnresolvedMemberExpr(unresolved_member_expr)",
							"VarDecl(var_decl, base_type)",
							"([offset, subscript]) =>",
							"VerbatimBlockComment(verbatim_block_comment)",
							"VerbatimBlockLineComment(verbatim_block_line_comment)",
							"WarnUnusedResultAttr(warn_unused_result_attr)",
							"WeakAttr(weak_attr)",
							"WhileStmt(while_stmt)",
							"OverrideAttr(override_attr)",
							"AddrLabelExpr(addr_label_expr)",
							"AliasAttr(alias_attr)",
							"AlignValueAttr(align_value_attr)",
							"AllocSizeAttr(alloc_size_attr)",
							"ArrayInitIndexExpr(array_init_index_expr)",
							"ArrayInitLoopExpr(array_init_loop_expr)",
							"AtomicExpr(atomic_expr)",
							"AtomicType(atomic_type)",
							"AutoType(auto_type)",
							"BuiltinTemplateDecl(builtin_template_decl)",
							"BuiltinType(builtin_type)",
							"CallbackAttr(callback_attr)",
							"ClassTemplateDecl(class_template_decl)",
							"ClassTemplatePartialSpecializationDecl(class_template_partial_specialization_decl)",
							"ClassTemplateSpecializationDecl(class_template_specialization_decl)",
							"ComplexType(complex_type)",
							"CompoundLiteralExpr(compound_literal_expr)",
							"ConstantArrayType(constant_array_type)",
							"ConstructorUsingShadowDecl(constructor_using_shadow_decl)",
							"ConvertVectorExpr(convert_vector_expr)",
							"DecayedType(decayed_type)",
							"DecltypeType(decltype_type)",
							"DependentNameType(dependent_name_type)",
							"DependentScopeDeclRefExpr(dependent_scope_decl_ref_expr)",
							"DependentSizedArrayType(dependent_sized_array_type)",
							"DependentTemplateSpecializationType(dependent_template_specialization_type)",
							"ElaboratedType(elaborated_type)",
							"EnumType(enum_type)",
							"ExprWithCleanups(expr_with_cleanups)",
							"FinalAttr(final_attr)",
							"FormatArgAttr(format_arg_attr)",
							"FriendDecl(friend_decl)",
							"FunctionNoProtoType(function_no_proto_type)",
							"FunctionProtoType(function_proto_type)",
							"FunctionTemplateDecl(function_template_decl)",
							"GCCAsmStmt(gcc_asm_stmt)",
							"GNUInlineAttr(gnu_inline_attr)",
							"GNUNullExpr(gnu_null_expr)",
							"ImplicitValueInitExpr(implicit_value_init_expr)",
							"IncompleteArrayType(incomplete_array_type)",
							"IndirectFieldDecl(indirect_field_decl)",
							"IndirectGotoStmt(indirect_goto_stmt)",
							"InjectedClassNameType(injected_class_name_type)",
							"LambdaExpr(lambda_expr)",
							"LinkageSpecDecl(linkage_spec_decl)",
							"LValueReferenceType(l_value_reference_type)",
							"MaterializeTemporaryExpr(materialize_temporary_expr)",
							"MaxFieldAlignmentAttr(max_field_alignment_attr)",
							"MayAliasAttr(may_alias_attr)",
							"MemberPointerType(member_pointer_type)",
							"MinVectorWidthAttr(min_vector_width_attr)",
							"ModeAttr(mode_attr)",
							"NamespaceDecl(namespace_decl)",
							"NoDebugAttr(no_debug_attr)",
							"NoInlineAttr(no_inline_attr)",
							"NonTypeTemplateParmDecl(non_type_template_parm_decl)",
							"OffsetOfExpr(offset_of_expr)",
							"OpaqueValueExpr(opaque_value_expr)",
							"OwnerAttr(owner_attr)",
							"PackedAttr(packed_attr)",
							"PackExpansionExpr(pack_expansion_expr)",
							"PackExpansionType(pack_expansion_type)",
							"ParenType(paren_type)",
							"PointerAttr(pointer_attr)",
							"PointerType(pointer_type)",
							"PredefinedExpr(predefined_expr)",
							"QualType(qual_type)",
							"RecordType(record_type)",
							"ReturnsNonNullAttr(returns_non_null_attr)",
							"RValueReferenceType(r_value_reference_type)",
							"SentinelAttr(sentinel_attr)",
							"ShuffleVectorExpr(shuffle_vector_expr)",
							"SizeOfPackExpr(size_of_pack_expr)",
							"StaticAssertDecl(static_assert_decl)",
							"StmtExpr(stmt_expr)",
							"SubstNonTypeTemplateParmExpr(subst_non_type_template_parm_expr)",
							"SubstTemplateTypeParmType(subst_template_type_parm_type)",
							"TargetAttr(target_attr)",
							"TemplateArgument(template_argument)",
							"TemplateSpecializationType(template_specialization_type)",
							"TemplateTemplateParmDecl(template_template_parm_decl)",
							"TemplateTypeParmDecl(template_type_parm_decl)",
							"TemplateTypeParmType(template_type_parm_type)",
							"TParamCommandComment(t_param_command_comment)",
							"TypeAliasDecl(type_alias_decl)",
							"TypeAliasTemplateDecl(type_alias_template_decl)",
							"TypedefType(typedef_type)",
							"TypeOfExprType(type_of_expr_type)",
							"TypeTraitExpr(type_trait_expr)",
							"UnaryTransformType(unary_transform_type)",
							"UnresolvedUsingValueDecl(unresolved_using_value_decl)",
							"UnusedAttr(unused_attr)",
							"UsingDecl(using_decl)",
							"UsingDirectiveDecl(using_directive_decl)",
							"UsingShadowDecl(using_shadow_decl)",
							"VAArgExpr(va_arg_expr)",
							"VarTemplateDecl(var_template_decl)",
							"VectorType(vector_type)",
							"VerbatimLineComment(verbatim_line_comment)",
							"VisibilityAttr(visibility_attr)",
							"WeakRefAttr(weak_ref_attr)",
							"CXXRecordDecl(cxx_record_decl)",
							"CXXConstructorDecl(cxx_constructor_decl)",
							"n =>",
							"CXXCtorInitializer(cxx_ctor_initializer)",
							"CXXDependentScopeMemberExpr(cxx_dependent_scope_member_expr)",
							"CXXThisExpr(cxx_this_expr)",
							"CXXDestructorDecl(cxx_destructor_decl)",
							"n =>",
							"CXXMethodDecl(cxx_method_decl)",
							"n =>",
							"CXXStaticCastExpr(cxx_static_cast_expr)",
							"CXXUnresolvedConstructExpr(cxx_unresolved_construct_expr)",
							"CXXNewExpr(cxx_new_expr)",
							"CXXDeleteExpr(cxx_delete_expr)",
							"CXXBoolLiteralExpr(cxx_bool_literal_expr)",
							"CXX11NoReturnAttr(cxx11_no_return_attr)",
							"CXXBindTemporaryExpr(cxx_bind_temporary_expr)",
							"CXXCatchStmt(cxx_catch_stmt)",
							"CXXConstructExpr(cxx_construct_expr)",
							"CXXConversionDecl(cxx_conversion_decl)",
							"CXXDefaultArgExpr(cxx_default_arg_expr)",
							"CXXDefaultInitExpr(cxx_default_init_expr)",
							"CXXForRangeStmt(cxx_for_range_stmt)",
							"CXXFunctionalCastExpr(cxx_functional_cast_expr)",
							"CXXMemberCallExpr(cxx_member_call_expr)",
							"CXXNoexceptExpr(cxx_noexcept_expr)",
							"CXXNullPtrLiteralExpr(cxx_null_ptr_literal_expr)",
							"CXXOperatorCallExpr(cxx_operator_call_expr)",
							"CXXReinterpretCastExpr(cxx_reinterpret_cast_expr)",
							"CXXScalarValueInitExpr(cxx_scalar_value_init_expr)",
							"CXXTemporaryObjectExpr(cxx_temporary_object_expr)",
							"CXXTryStmt(cxx_try_stmt)",
							" function PrintNode(node)",
							" function PrintAst(node, ast)",
							"get()",
							" function isNode(obj)",
							" function GetType(name_or_id, ast = globalThis['$']?.data)",
							"n =>",
							" node =>",
							" node =>",
							"r =>",
							" function GetClass(name_or_id, ast = globalThis['$'].data)",
							" n =>",
							"bases()",
							" function* GetBases(node, ast = globalThis['$'].data)",
							" function GetByName(arg, ast = globalThis['$'].data, ...args)",
							" function GetNamespace(arg, root = globalThis['$'].data, predicate = () => true)",
							" n =>",
							" function NamespaceOf(node, path, ast = globalThis['$'].data)",
							"toString()",
							" function GetFields(node)",
							" (v, k) =>",
							"([v, p]) =>",
							"([loc, ptr]) =>",
							"i =>",
							" function GetParams(node)",
							"child =>",
							" function PathRemoveLoc(path)",
							"p =>"
						]
					},
					"AQAAAAAAAAAAAAAATi0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					2,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/clang-list.js",
						"symkeys":
						[
							[
								341,
								365
							],
							[
								529,
								535
							],
							[
								579,
								596
							],
							[
								707,
								735
							],
							[
								921,
								931
							],
							[
								981,
								991
							],
							[
								1927,
								1931
							],
							[
								1978,
								1982
							],
							[
								2080,
								2117
							],
							[
								2402,
								2446
							],
							[
								2454,
								2496
							],
							[
								2536,
								2543
							],
							[
								2587,
								2594
							],
							[
								3005,
								3016
							],
							[
								3063,
								3068
							],
							[
								3078,
								3083
							],
							[
								3096,
								3107
							],
							[
								3137,
								3142
							],
							[
								3155,
								3166
							],
							[
								3324,
								3330
							],
							[
								3731,
								3741
							],
							[
								3903,
								3913
							],
							[
								4210,
								4220
							],
							[
								4777,
								4782
							],
							[
								4925,
								4965
							],
							[
								5017,
								5050
							],
							[
								5235,
								5253
							],
							[
								5299,
								5315
							],
							[
								5331,
								5348
							],
							[
								5375,
								5398
							],
							[
								5414,
								5436
							],
							[
								5536,
								5547
							],
							[
								5670,
								5679
							],
							[
								5749,
								5760
							],
							[
								5978,
								5986
							],
							[
								6016,
								6024
							],
							[
								6043,
								6047
							],
							[
								6214,
								6225
							],
							[
								6280,
								6291
							],
							[
								6323,
								6332
							],
							[
								6482,
								6493
							],
							[
								6544,
								6558
							],
							[
								6697,
								6701
							],
							[
								6971,
								7010
							],
							[
								7104,
								7117
							],
							[
								7574,
								7606
							],
							[
								7770,
								7804
							]
						],
						"symlist":
						[
							"findLastIndex(predicate)",
							"tail()",
							"startsWith(start)",
							"async function main(...args)",
							" (a, p) =>",
							" (a, p) =>",
							"d =>",
							"v =>",
							"async function processFiles(...files)",
							"async function ReadAST(outfile, load = f => ",
							"(f), save = WriteFile, parse = JSON.parse)",
							"name =>",
							"stat =>",
							"async () =>",
							" a =>",
							"() =>",
							"async () =>",
							"() =>",
							"async () =>",
							"err =>",
							" (v, p) =>",
							"toString()",
							"toString()",
							" v =>",
							" function ListNodes(sysinc = false)",
							"NoSystemIncludes = ([p, n, l]) =>",
							" ([path, decl]) =>",
							"names = decls =>",
							"([path, decl]) =>",
							"declarations = decls =>",
							"([path, decl, loc]) =>",
							"([p, n]) =>",
							"(a, b) =>",
							"([p, n]) =>",
							"([p]) =>",
							"([p]) =>",
							"p =>",
							"([p, n]) =>",
							"([p, n]) =>",
							"(a, b) =>",
							"([p, n]) =>",
							"([p, n, l]) =>",
							"k =>",
							"([path, node, id, name, type, kind]) =>",
							"(field, i) =>",
							"function writeOutput(name, data)",
							"function GetLibraryFor(symbolName)"
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				],
				[
					3,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/clang-ast.js",
						"symkeys":
						[
							[
								848,
								861
							],
							[
								940,
								996
							],
							[
								1441,
								1500
							],
							[
								2039,
								2076
							],
							[
								2295,
								2327
							],
							[
								2429,
								2466
							],
							[
								2620,
								2647
							],
							[
								2729,
								2759
							],
							[
								2826,
								2834
							],
							[
								2873,
								2900
							],
							[
								2949,
								2976
							],
							[
								3053,
								3057
							],
							[
								3080,
								3113
							],
							[
								3293,
								3336
							],
							[
								3621,
								3629
							],
							[
								4021,
								4025
							],
							[
								4044,
								4064
							],
							[
								4215,
								4247
							],
							[
								4409,
								4427
							],
							[
								4680,
								4697
							],
							[
								5004,
								5015
							],
							[
								5035,
								5042
							],
							[
								5069,
								5078
							],
							[
								5198,
								5204
							],
							[
								5316,
								5324
							],
							[
								5439,
								5448
							],
							[
								5474,
								5483
							],
							[
								5514,
								5518
							],
							[
								5579,
								5583
							],
							[
								5659,
								5675
							],
							[
								5932,
								5947
							],
							[
								6014,
								6023
							],
							[
								6084,
								6092
							],
							[
								6141,
								6150
							],
							[
								6197,
								6207
							],
							[
								6260,
								6270
							],
							[
								6301,
								6311
							],
							[
								6399,
								6410
							],
							[
								6616,
								6620
							],
							[
								6801,
								6812
							],
							[
								7043,
								7047
							],
							[
								7099,
								7113
							],
							[
								7163,
								7213
							],
							[
								7283,
								7338
							],
							[
								7343,
								7377
							],
							[
								7556,
								7560
							],
							[
								7641,
								7656
							],
							[
								7744,
								7800
							],
							[
								7874,
								7884
							],
							[
								8088,
								8095
							],
							[
								8212,
								8223
							],
							[
								8260,
								8289
							],
							[
								8350,
								8381
							],
							[
								8583,
								8593
							],
							[
								8648,
								8661
							],
							[
								8698,
								8727
							],
							[
								8788,
								8819
							],
							[
								9023,
								9033
							],
							[
								9088,
								9092
							],
							[
								9190,
								9216
							],
							[
								12075,
								12079
							],
							[
								13094,
								13106
							],
							[
								13229,
								13237
							],
							[
								13323,
								13334
							],
							[
								13457,
								13470
							],
							[
								13593,
								13605
							],
							[
								13699,
								13708
							],
							[
								13760,
								13771
							],
							[
								13860,
								13870
							],
							[
								13913,
								13922
							],
							[
								13964,
								13973
							],
							[
								14093,
								14109
							],
							[
								14167,
								14183
							],
							[
								14231,
								14244
							],
							[
								14391,
								14406
							],
							[
								14553,
								14568
							],
							[
								14825,
								14839
							],
							[
								14925,
								14937
							],
							[
								15004,
								15016
							],
							[
								15122,
								15139
							],
							[
								15225,
								15236
							],
							[
								15296,
								15309
							],
							[
								15452,
								15460
							],
							[
								15568,
								15578
							],
							[
								15759,
								15768
							],
							[
								17574,
								17584
							],
							[
								19663,
								19669
							],
							[
								19955,
								19966
							],
							[
								20067,
								20117
							],
							[
								20203,
								20211
							],
							[
								20271,
								20279
							],
							[
								22086,
								22116
							],
							[
								22195,
								22205
							],
							[
								22223,
								22249
							],
							[
								22378,
								22386
							],
							[
								22469,
								22477
							],
							[
								22655,
								22660
							],
							[
								22698,
								22705
							],
							[
								22789,
								22803
							],
							[
								23396,
								23400
							],
							[
								23481,
								23486
							],
							[
								25020,
								25024
							],
							[
								25924,
								25938
							],
							[
								26002,
								26012
							],
							[
								26097,
								26119
							],
							[
								26341,
								26349
							],
							[
								26471,
								26490
							],
							[
								26588,
								26596
							],
							[
								26614,
								26636
							],
							[
								26757,
								26765
							],
							[
								26870,
								26896
							],
							[
								27251,
								27259
							],
							[
								27374,
								27385
							],
							[
								27403,
								27429
							],
							[
								27501,
								27505
							],
							[
								27610,
								27620
							],
							[
								27680,
								27684
							],
							[
								27747,
								27751
							],
							[
								27801,
								27805
							],
							[
								28215,
								28225
							],
							[
								28257,
								28265
							],
							[
								28362,
								28371
							],
							[
								28389,
								28411
							],
							[
								28629,
								28641
							],
							[
								28659,
								28685
							],
							[
								28920,
								28928
							],
							[
								28991,
								28999
							],
							[
								30066,
								30085
							],
							[
								30201,
								30211
							],
							[
								30266,
								30274
							],
							[
								30383,
								30390
							],
							[
								30408,
								30430
							],
							[
								30775,
								30783
							],
							[
								30880,
								30889
							],
							[
								30913,
								30935
							],
							[
								31040,
								31051
							],
							[
								31069,
								31091
							],
							[
								31468,
								31485
							],
							[
								31503,
								31525
							],
							[
								31781,
								31789
							],
							[
								31900,
								31905
							],
							[
								31953,
								31976
							],
							[
								32098,
								32109
							],
							[
								32158,
								32170
							],
							[
								32232,
								32241
							],
							[
								32288,
								32298
							],
							[
								32336,
								32372
							],
							[
								33027,
								33039
							],
							[
								33085,
								33094
							],
							[
								33141,
								33151
							],
							[
								33331,
								33336
							],
							[
								33392,
								33400
							],
							[
								33493,
								33516
							],
							[
								33775,
								33791
							],
							[
								34010,
								34026
							],
							[
								34437,
								34450
							],
							[
								34596,
								34606
							],
							[
								34654,
								34665
							],
							[
								34757,
								34769
							],
							[
								34819,
								34832
							],
							[
								34880,
								34892
							],
							[
								34942,
								34955
							],
							[
								35203,
								35216
							],
							[
								35251,
								35266
							],
							[
								35346,
								35401
							],
							[
								35945,
								35955
							],
							[
								36198,
								36218
							],
							[
								36301,
								36347
							],
							[
								37846,
								37911
							],
							[
								38221,
								38225
							],
							[
								38486,
								38490
							],
							[
								39215,
								39222
							],
							[
								39276,
								39283
							],
							[
								39367,
								39374
							],
							[
								39551,
								39586
							],
							[
								39625,
								39645
							],
							[
								39675,
								39681
							],
							[
								39702,
								39710
							],
							[
								39817,
								39850
							],
							[
								40115,
								40140
							],
							[
								40481,
								40523
							],
							[
								41055,
								41108
							],
							[
								42518,
								42524
							],
							[
								42574,
								42580
							],
							[
								42745,
								42751
							],
							[
								42893,
								42909
							],
							[
								43454,
								43461
							],
							[
								43504,
								43508
							],
							[
								43528,
								43535
							],
							[
								43656,
								43683
							],
							[
								43742,
								43757
							],
							[
								44062,
								44069
							],
							[
								44129,
								44143
							],
							[
								44188,
								44203
							],
							[
								44229,
								44233
							],
							[
								44265,
								44276
							],
							[
								44309,
								44321
							],
							[
								44355,
								44368
							],
							[
								44444,
								44449
							],
							[
								44529,
								44533
							],
							[
								44557,
								44569
							],
							[
								44632,
								44637
							],
							[
								44667,
								44671
							],
							[
								44695,
								44704
							],
							[
								44717,
								44733
							],
							[
								45075,
								45079
							],
							[
								45103,
								45114
							],
							[
								45173,
								45177
							],
							[
								45215,
								45219
							],
							[
								45251,
								45267
							],
							[
								45306,
								45310
							],
							[
								45328,
								45332
							],
							[
								45376,
								45428
							],
							[
								45616,
								45632
							],
							[
								45992,
								46013
							],
							[
								46039,
								46043
							],
							[
								46485,
								46490
							],
							[
								46525,
								46552
							],
							[
								46746,
								46774
							],
							[
								46955,
								46980
							],
							[
								47055,
								47087
							],
							[
								47218,
								47222
							],
							[
								47359,
								47388
							],
							[
								47498,
								47502
							],
							[
								47796,
								47818
							],
							[
								48857,
								48912
							],
							[
								48992,
								48999
							],
							[
								49065,
								49072
							],
							[
								49109,
								49135
							],
							[
								49229,
								49237
							],
							[
								49303,
								49311
							],
							[
								49373,
								49384
							],
							[
								49538,
								49547
							],
							[
								49566,
								49592
							],
							[
								49645,
								49654
							],
							[
								49707,
								49733
							],
							[
								49785,
								49804
							],
							[
								49880,
								49897
							],
							[
								49932,
								49956
							],
							[
								50215,
								50220
							],
							[
								50278,
								50285
							],
							[
								50367,
								50378
							],
							[
								51086,
								51096
							],
							[
								51144,
								51148
							],
							[
								51339,
								51350
							],
							[
								51361,
								51385
							],
							[
								51453,
								51485
							],
							[
								51641,
								51666
							],
							[
								51730,
								51766
							],
							[
								51836,
								51876
							],
							[
								52128,
								52156
							],
							[
								52203,
								52234
							],
							[
								52463,
								52505
							],
							[
								52708,
								52733
							],
							[
								52891,
								52912
							],
							[
								52957,
								52976
							],
							[
								53310,
								53337
							],
							[
								53405,
								53424
							],
							[
								53629,
								53664
							],
							[
								53782,
								53830
							],
							[
								54076,
								54103
							],
							[
								54721,
								54762
							],
							[
								55000,
								55027
							],
							[
								55170,
								55191
							],
							[
								55252,
								55279
							],
							[
								55324,
								55356
							],
							[
								55606,
								55632
							],
							[
								55826,
								55845
							],
							[
								56507,
								56532
							],
							[
								56580,
								56611
							],
							[
								56678,
								56693
							],
							[
								56888,
								56909
							],
							[
								57026,
								57062
							],
							[
								57282,
								57301
							],
							[
								57705,
								57726
							],
							[
								57943,
								57976
							],
							[
								58036,
								58059
							],
							[
								58122,
								58139
							],
							[
								58259,
								58263
							],
							[
								59090,
								59115
							],
							[
								59322,
								59349
							],
							[
								59814,
								59818
							],
							[
								60028,
								60032
							],
							[
								60231,
								60250
							],
							[
								60371,
								60376
							],
							[
								60714,
								60753
							],
							[
								60852,
								60895
							],
							[
								61105,
								61120
							],
							[
								61386,
								61422
							],
							[
								61518,
								61546
							],
							[
								61816,
								61860
							],
							[
								61922,
								61953
							],
							[
								62012,
								62033
							],
							[
								62092,
								62115
							],
							[
								62551,
								62577
							],
							[
								62645,
								62671
							],
							[
								62735,
								62754
							],
							[
								62796,
								62831
							],
							[
								63005,
								63047
							],
							[
								63232,
								63253
							],
							[
								63429,
								63459
							],
							[
								63679,
								63705
							],
							[
								64134,
								64153
							],
							[
								64214,
								64237
							],
							[
								64772,
								64799
							],
							[
								64849,
								64872
							],
							[
								65029,
								65065
							],
							[
								65135,
								65164
							],
							[
								65222,
								65245
							],
							[
								65423,
								65448
							],
							[
								65532,
								65574
							],
							[
								65673,
								65698
							],
							[
								66002,
								66057
							],
							[
								66299,
								66328
							],
							[
								66579,
								66623
							],
							[
								66755,
								66799
							],
							[
								66886,
								66914
							],
							[
								67058,
								67082
							],
							[
								67330,
								67374
							],
							[
								67696,
								67749
							],
							[
								67848,
								67893
							],
							[
								67968,
								67987
							],
							[
								68048,
								68069
							],
							[
								68246,
								68273
							],
							[
								68322,
								68352
							],
							[
								68364,
								68385
							],
							[
								68397,
								68429
							],
							[
								68571,
								68601
							],
							[
								68613,
								68654
							],
							[
								68666,
								68705
							],
							[
								68717,
								68740
							],
							[
								68752,
								68775
							],
							[
								68787,
								68806
							],
							[
								68818,
								68860
							],
							[
								68872,
								68897
							],
							[
								68909,
								68936
							],
							[
								68948,
								68986
							],
							[
								68998,
								69080
							],
							[
								69092,
								69159
							],
							[
								69171,
								69196
							],
							[
								69208,
								69250
							],
							[
								69435,
								69473
							],
							[
								69485,
								69542
							],
							[
								69554,
								69592
							],
							[
								69604,
								69629
							],
							[
								69641,
								69668
							],
							[
								69680,
								69718
							],
							[
								69730,
								69786
							],
							[
								69880,
								69931
							],
							[
								69943,
								70018
							],
							[
								70030,
								70061
							],
							[
								70073,
								70092
							],
							[
								70104,
								70140
							],
							[
								70236,
								70257
							],
							[
								70269,
								70299
							],
							[
								70311,
								70334
							],
							[
								70346,
								70389
							],
							[
								70401,
								70439
							],
							[
								70451,
								70495
							],
							[
								70507,
								70531
							],
							[
								70648,
								70678
							],
							[
								70690,
								70716
							],
							[
								70760,
								70807
							],
							[
								70819,
								70861
							],
							[
								70873,
								70911
							],
							[
								70923,
								70959
							],
							[
								70971,
								71018
							],
							[
								71030,
								71053
							],
							[
								71065,
								71099
							],
							[
								71307,
								71350
							],
							[
								71362,
								71414
							],
							[
								71518,
								71565
							],
							[
								71577,
								71605
							],
							[
								71617,
								71655
							],
							[
								71667,
								71708
							],
							[
								71720,
								71739
							],
							[
								71751,
								71780
							],
							[
								71792,
								71818
							],
							[
								71830,
								71858
							],
							[
								71870,
								71922
							],
							[
								71934,
								71962
							],
							[
								71974,
								72008
							],
							[
								72140,
								72161
							],
							[
								72173,
								72196
							],
							[
								72208,
								72246
							],
							[
								72258,
								72296
							],
							[
								72308,
								72329
							],
							[
								72341,
								72366
							],
							[
								72378,
								72403
							],
							[
								72415,
								72446
							],
							[
								72533,
								72552
							],
							[
								72564,
								72587
							],
							[
								72599,
								72640
							],
							[
								72652,
								72695
							],
							[
								72707,
								72734
							],
							[
								72746,
								72784
							],
							[
								72796,
								72829
							],
							[
								72841,
								72877
							],
							[
								72889,
								72908
							],
							[
								72974,
								73037
							],
							[
								73049,
								73105
							],
							[
								73117,
								73140
							],
							[
								73152,
								73187
							],
							[
								73199,
								73255
							],
							[
								73267,
								73320
							],
							[
								73332,
								73377
							],
							[
								73389,
								73434
							],
							[
								73446,
								73491
							],
							[
								73503,
								73533
							],
							[
								73545,
								73592
							],
							[
								73604,
								73629
							],
							[
								73641,
								73674
							],
							[
								73686,
								73716
							],
							[
								73728,
								73768
							],
							[
								73780,
								73833
							],
							[
								73845,
								73868
							],
							[
								73880,
								73901
							],
							[
								73913,
								73953
							],
							[
								73965,
								73999
							],
							[
								74011,
								74033
							],
							[
								74045,
								74079
							],
							[
								74091,
								74114
							],
							[
								74126,
								74168
							],
							[
								74180,
								74211
							],
							[
								74223,
								74249
							],
							[
								74262,
								74292
							],
							[
								74866,
								74906
							],
							[
								75116,
								75120
							],
							[
								76261,
								76301
							],
							[
								76684,
								76744
							],
							[
								77180,
								77206
							],
							[
								77314,
								77352
							],
							[
								77548,
								77552
							],
							[
								77839,
								77869
							],
							[
								78328,
								78332
							],
							[
								78984,
								79023
							],
							[
								79687,
								79744
							],
							[
								80065,
								80089
							],
							[
								80562,
								80592
							],
							[
								80856,
								80897
							],
							[
								81032,
								81071
							],
							[
								81083,
								81128
							],
							[
								81140,
								81168
							],
							[
								81180,
								81216
							],
							[
								81360,
								81398
							],
							[
								81410,
								81449
							],
							[
								81461,
								81502
							],
							[
								81514,
								81549
							],
							[
								81561,
								81608
							],
							[
								81620,
								81659
							],
							[
								81672,
								81706
							],
							[
								81718,
								81766
							],
							[
								81778,
								81821
							],
							[
								81833,
								81882
							],
							[
								81894,
								81944
							],
							[
								81956,
								82005
							],
							[
								82259,
								82283
							],
							[
								82340,
								82365
							],
							[
								82744,
								82773
							],
							[
								82966,
								82971
							],
							[
								83246,
								83267
							],
							[
								83334,
								83392
							],
							[
								83538,
								83542
							],
							[
								84127,
								84135
							],
							[
								84187,
								84195
							],
							[
								84307,
								84311
							],
							[
								84564,
								84622
							],
							[
								84724,
								84729
							],
							[
								85078,
								85085
							],
							[
								85274,
								85327
							],
							[
								85564,
								85625
							],
							[
								85935,
								86015
							],
							[
								86136,
								86141
							],
							[
								86479,
								86540
							],
							[
								86882,
								86892
							],
							[
								86958,
								86983
							],
							[
								87021,
								87031
							],
							[
								87096,
								87107
							],
							[
								87181,
								87196
							],
							[
								87235,
								87239
							],
							[
								87319,
								87344
							],
							[
								87383,
								87391
							],
							[
								87433,
								87462
							],
							[
								87492,
								87496
							]
						],
						"symlist":
						[
							" (ast, r) =>",
							" function DeepFind(ast, pred, flags = deep.RETURN_VALUE)",
							" function* DeepSelect(ast, pred, flags = deep.RETURN_VALUE)",
							" function DeepCachePath(ast, path, m)",
							" function DeepPathOf(ast, value)",
							" function DeepGet(ast, path, ...args)",
							"function FileTime(filename)",
							"function Newer(file, ...other)",
							"other =>",
							"function Older(file, other)",
							"function GetSubscripts(str)",
							"m =>",
							"function TrimSubscripts(str, sub)",
							" function nameOrIdPred(name_or_id, ...args)",
							" node =>",
							"List",
							"constructor(...args)",
							"filter(callback, thisArg = null)",
							"callback = elem =>",
							"slice(start, end)",
							"get first()",
							"elem =>",
							"entries()",
							"keys()",
							"values()",
							"toArray()",
							"(a, n) =>",
							"List",
							"Node",
							"constructor(ast)",
							"static get(ast)",
							"get ast()",
							"get id()",
							"get loc()",
							"get file()",
							" (v, k) =>",
							" (v, k) =>",
							"get range()",
							"r =>",
							"toJSON(obj)",
							"Node",
							"(node, ast) =>",
							" function PathOf(node, ast = globalThis['$'].data)",
							" function* Hier(node_or_path, t = (p, ast, abort) => p.",
							"(ast), ast = globalThis['$'].data)",
							"p =>",
							"abortFn = () =>",
							" function FindType(typeName, ast = globalThis['$'].data)",
							"([tok]) =>",
							"node =>",
							"PointerType",
							"constructor(pointee, ast, ns)",
							"static fromString(str, ast, ns)",
							"toString()",
							"ReferenceType",
							"constructor(pointee, ast, ns)",
							"static fromString(str, ast, ns)",
							"toString()",
							"Type",
							"constructor(node, ast, ns)",
							"n =>",
							"get regExp()",
							"isEnum()",
							"isPointer()",
							"isReference()",
							"isFunction()",
							"isArray()",
							"isInteger()",
							"isStruct()",
							"isClass()",
							"arrayOf()",
							"get subscripts()",
							"trimSubscripts()",
							"get pointer()",
							"get reference()",
							"getPointer(ast)",
							"get unsigned()",
							"get signed()",
							"isCompound()",
							"isFloatingPoint()",
							"get alias()",
							"get aliases()",
							"isEnum()",
							"isString()",
							"get ffi()",
							"get size()",
							"toJS()",
							"toJSON(obj)",
							"static get(name_or_id, ast = globalThis['$'].data)",
							" node =>",
							" node =>",
							"function RoundTo(value, align)",
							"RecordDecl",
							"constructor(node, ast, ns)",
							"child =>",
							"child =>",
							"() =>",
							"node =>",
							"(acc, node) =>",
							"i =>",
							" n =>",
							"n =>",
							"([name, t]) =>",
							"get size()",
							"(acc, [name, type]) =>",
							"toJSON()",
							"([name, member]) =>",
							"EnumDecl",
							"constructor(node, ast)",
							"child =>",
							"({ name, type, inner }) =>",
							"toJSON()",
							"TypedefDecl",
							"constructor(node, ast, ns)",
							"n =>",
							" (v, k) =>",
							"n =>",
							"n =>",
							"n =>",
							"get size()",
							"toJSON()",
							"FieldDecl",
							"constructor(node, ast)",
							"FunctionDecl",
							"constructor(node, ast, ns)",
							"child =>",
							"child =>",
							"({ name, type }) =>",
							"isMethod()",
							"toJSON()",
							"VarDecl",
							"constructor(node, ast)",
							"toJSON()",
							"ClassDecl",
							"constructor(node, ast)",
							"BuiltinType",
							"constructor(node, ast)",
							"ConstantArrayType",
							"constructor(node, ast)",
							"toJSON()",
							"Range",
							"constructor(begin, end)",
							"get begin()",
							"set begin(v)",
							"get end()",
							"set end(v)",
							"toString(opts = { printFile: true })",
							"get length()",
							"toArray()",
							"toObject()",
							"Range",
							"Location",
							"static at(file, offset)",
							"static from(loc)",
							"constructor(loc)",
							"update(other)",
							"get line()",
							"set line(v)",
							"get column()",
							"set column(v)",
							"get offset()",
							"set offset(v)",
							" (t, ...c) =>",
							"'\\x1b[m' : t =>",
							"toString(opts = { printFile: true, onlyOffset: false })",
							"toObject()",
							"localeCompare(other)",
							" function TypeFactory(node, ast, cache = true)",
							"async function SpawnCompiler(compiler, input, outfile, args = [])",
							"p =>",
							"p =>",
							"line =>",
							"line =>",
							"line =>",
							" function PipeReader(fd, callback)",
							"(resolve, reject) =>",
							" () =>",
							" data =>",
							" function ReadPipe(fd, callback)",
							" function ReadOutput(fd)",
							"async function SourceDependencies(...args)",
							"async function AstDump(compiler, source, args, force)",
							"size()",
							"json()",
							"data()",
							"SetFile = loc =>",
							"files()",
							"n =>",
							"file =>",
							"pred2 = (used, implicit) =>",
							" node =>",
							"types()",
							" n =>",
							" () =>",
							"List",
							"functions()",
							" n =>",
							" () =>",
							" n =>",
							"List",
							"namespaces()",
							" n =>",
							"List",
							"classes()",
							"predicate = n =>",
							"List",
							"variables()",
							"n =>",
							"List",
							"names(depth = 1)",
							"n =>",
							"n =>",
							" function NameFor(decl, ast = globalThis['$']?.data)",
							" (value, key) =>",
							" function NodeType(n)",
							"t =>",
							" n =>",
							" function NodeName(n, name)",
							" function* RawLocation(path)",
							" function* RawRange(path)",
							" function CompleteLocation(path)",
							"l =>",
							" function CompleteRange(path)",
							"l =>",
							" function GetLoc(node)",
							" function GetTypeNode(node, ast = globalThis['$'].data)",
							"node =>",
							"node =>",
							" function GetTypeStr(node)",
							"inner =>",
							"inner =>",
							"([n, t]) =>",
							"NodeError",
							"constructor(message, node)",
							"NodeError",
							" function NodePrinter(ast)",
							" function put(str)",
							" function trim()",
							"printer = function(node)",
							"get()",
							"value()",
							"value(node)",
							"toString()",
							"i =>",
							"NodePrinter",
							"AbiTagAttr(abi_tag_attr)",
							"AccessSpecDecl(access_spec_decl)",
							"AlignedAttr(aligned_attr)",
							"AlwaysInlineAttr(always_inline_attr)",
							"ArraySubscriptExpr(array_subscript_expr)",
							"AsmLabelAttr(asm_label_attr)",
							"BinaryOperator(binary_operator)",
							"BlockCommandComment(block_command_comment)",
							"BuiltinAttr(builtin_attr)",
							"BreakStmt(break_stmt)",
							"CallExpr(call_expr)",
							"RecoveryExpr(recovery_expr)",
							"CaseStmt(case_stmt)",
							"CharacterLiteral(character_literal)",
							"CompoundAssignOperator(compound_assign_operator)",
							"CompoundStmt(compound_stmt)",
							"ConditionalOperator(conditional_operator)",
							"ConstantExpr(constant_expr)",
							"ConstAttr(const_attr)",
							"ContinueStmt(continue_stmt)",
							"CStyleCastExpr(cstyle_cast_expr)",
							"DeclRefExpr(decl_ref_expr)",
							"DeclStmt(decl_stmt)",
							"DefaultStmt(default_stmt)",
							"DeprecatedAttr(deprecated_attr)",
							"DoStmt(do_stmt)",
							"EmptyDecl(empty_decl)",
							"EnumConstantDecl(enum_constant_decl)",
							"EnumDecl(enum_decl)",
							"FieldDecl(field_decl)",
							"FloatingLiteral(floating_literal)",
							"FormatAttr(format_attr)",
							"ForStmt(for_stmt)",
							"n =>",
							"FullComment(full_comment)",
							"FunctionDecl(function_decl)",
							"n =>",
							"n =>",
							"GotoStmt(goto_stmt)",
							" n =>",
							"HTMLEndTagComment(html_end_tag_comment)",
							"HTMLStartTagComment(html_start_tag_comment)",
							"IfStmt(if_stmt)",
							"ImplicitCastExpr(implicit_cast_expr)",
							"InitListExpr(init_list_expr)",
							"InlineCommandComment(inline_command_comment)",
							"IntegerLiteral(integer_literal)",
							"LabelStmt(label_stmt)",
							"MemberExpr(member_expr)",
							"NonNullAttr(non_null_attr)",
							"NoThrowAttr(no_throw_attr)",
							"NullStmt(null_stmt)",
							"ParagraphComment(paragraph_comment)",
							"ParamCommandComment(param_command_comment)",
							"ParenExpr(paren_expr)",
							"ParenListExpr(paren_list_expr)",
							"ParmVarDecl(parm_var_decl)",
							"PureAttr(pure_attr)",
							"RecordDecl(record_decl)",
							"RestrictAttr(restrict_attr)",
							"ReturnStmt(return_stmt)",
							"ReturnsTwiceAttr(returns_twice_attr)",
							"StringLiteral(string_literal)",
							"SwitchStmt(switch_stmt)",
							"TextComment(text_comment)",
							"TranslationUnitDecl(translation_unit_decl)",
							"TypedefDecl(typedef_decl)",
							"UnaryExprOrTypeTraitExpr(unary_expr_or_type_trait_expr)",
							"UnaryOperator(unary_operator)",
							"UnresolvedLookupExpr(unresolved_lookup_expr)",
							"UnresolvedMemberExpr(unresolved_member_expr)",
							"VarDecl(var_decl, base_type)",
							"([offset, subscript]) =>",
							"VerbatimBlockComment(verbatim_block_comment)",
							"VerbatimBlockLineComment(verbatim_block_line_comment)",
							"WarnUnusedResultAttr(warn_unused_result_attr)",
							"WeakAttr(weak_attr)",
							"WhileStmt(while_stmt)",
							"OverrideAttr(override_attr)",
							"AddrLabelExpr(addr_label_expr)",
							"AliasAttr(alias_attr)",
							"AlignValueAttr(align_value_attr)",
							"AllocSizeAttr(alloc_size_attr)",
							"ArrayInitIndexExpr(array_init_index_expr)",
							"ArrayInitLoopExpr(array_init_loop_expr)",
							"AtomicExpr(atomic_expr)",
							"AtomicType(atomic_type)",
							"AutoType(auto_type)",
							"BuiltinTemplateDecl(builtin_template_decl)",
							"BuiltinType(builtin_type)",
							"CallbackAttr(callback_attr)",
							"ClassTemplateDecl(class_template_decl)",
							"ClassTemplatePartialSpecializationDecl(class_template_partial_specialization_decl)",
							"ClassTemplateSpecializationDecl(class_template_specialization_decl)",
							"ComplexType(complex_type)",
							"CompoundLiteralExpr(compound_literal_expr)",
							"ConstantArrayType(constant_array_type)",
							"ConstructorUsingShadowDecl(constructor_using_shadow_decl)",
							"ConvertVectorExpr(convert_vector_expr)",
							"DecayedType(decayed_type)",
							"DecltypeType(decltype_type)",
							"DependentNameType(dependent_name_type)",
							"DependentScopeDeclRefExpr(dependent_scope_decl_ref_expr)",
							"DependentSizedArrayType(dependent_sized_array_type)",
							"DependentTemplateSpecializationType(dependent_template_specialization_type)",
							"ElaboratedType(elaborated_type)",
							"EnumType(enum_type)",
							"ExprWithCleanups(expr_with_cleanups)",
							"FinalAttr(final_attr)",
							"FormatArgAttr(format_arg_attr)",
							"FriendDecl(friend_decl)",
							"FunctionNoProtoType(function_no_proto_type)",
							"FunctionProtoType(function_proto_type)",
							"FunctionTemplateDecl(function_template_decl)",
							"GCCAsmStmt(gcc_asm_stmt)",
							"GNUInlineAttr(gnu_inline_attr)",
							"GNUNullExpr(gnu_null_expr)",
							"ImplicitValueInitExpr(implicit_value_init_expr)",
							"IncompleteArrayType(incomplete_array_type)",
							"IndirectFieldDecl(indirect_field_decl)",
							"IndirectGotoStmt(indirect_goto_stmt)",
							"InjectedClassNameType(injected_class_name_type)",
							"LambdaExpr(lambda_expr)",
							"LinkageSpecDecl(linkage_spec_decl)",
							"LValueReferenceType(l_value_reference_type)",
							"MaterializeTemporaryExpr(materialize_temporary_expr)",
							"MaxFieldAlignmentAttr(max_field_alignment_attr)",
							"MayAliasAttr(may_alias_attr)",
							"MemberPointerType(member_pointer_type)",
							"MinVectorWidthAttr(min_vector_width_attr)",
							"ModeAttr(mode_attr)",
							"NamespaceDecl(namespace_decl)",
							"NoDebugAttr(no_debug_attr)",
							"NoInlineAttr(no_inline_attr)",
							"NonTypeTemplateParmDecl(non_type_template_parm_decl)",
							"OffsetOfExpr(offset_of_expr)",
							"OpaqueValueExpr(opaque_value_expr)",
							"OwnerAttr(owner_attr)",
							"PackedAttr(packed_attr)",
							"PackExpansionExpr(pack_expansion_expr)",
							"PackExpansionType(pack_expansion_type)",
							"ParenType(paren_type)",
							"PointerAttr(pointer_attr)",
							"PointerType(pointer_type)",
							"PredefinedExpr(predefined_expr)",
							"QualType(qual_type)",
							"RecordType(record_type)",
							"ReturnsNonNullAttr(returns_non_null_attr)",
							"RValueReferenceType(r_value_reference_type)",
							"SentinelAttr(sentinel_attr)",
							"ShuffleVectorExpr(shuffle_vector_expr)",
							"SizeOfPackExpr(size_of_pack_expr)",
							"StaticAssertDecl(static_assert_decl)",
							"StmtExpr(stmt_expr)",
							"SubstNonTypeTemplateParmExpr(subst_non_type_template_parm_expr)",
							"SubstTemplateTypeParmType(subst_template_type_parm_type)",
							"TargetAttr(target_attr)",
							"TemplateArgument(template_argument)",
							"TemplateSpecializationType(template_specialization_type)",
							"TemplateTemplateParmDecl(template_template_parm_decl)",
							"TemplateTypeParmDecl(template_type_parm_decl)",
							"TemplateTypeParmType(template_type_parm_type)",
							"TParamCommandComment(t_param_command_comment)",
							"TypeAliasDecl(type_alias_decl)",
							"TypeAliasTemplateDecl(type_alias_template_decl)",
							"TypedefType(typedef_type)",
							"TypeOfExprType(type_of_expr_type)",
							"TypeTraitExpr(type_trait_expr)",
							"UnaryTransformType(unary_transform_type)",
							"UnresolvedUsingValueDecl(unresolved_using_value_decl)",
							"UnusedAttr(unused_attr)",
							"UsingDecl(using_decl)",
							"UsingDirectiveDecl(using_directive_decl)",
							"UsingShadowDecl(using_shadow_decl)",
							"VAArgExpr(va_arg_expr)",
							"VarTemplateDecl(var_template_decl)",
							"VectorType(vector_type)",
							"VerbatimLineComment(verbatim_line_comment)",
							"VisibilityAttr(visibility_attr)",
							"WeakRefAttr(weak_ref_attr)",
							"CXXRecordDecl(cxx_record_decl)",
							"CXXConstructorDecl(cxx_constructor_decl)",
							"n =>",
							"CXXCtorInitializer(cxx_ctor_initializer)",
							"CXXDependentScopeMemberExpr(cxx_dependent_scope_member_expr)",
							"CXXThisExpr(cxx_this_expr)",
							"CXXDestructorDecl(cxx_destructor_decl)",
							"n =>",
							"CXXMethodDecl(cxx_method_decl)",
							"n =>",
							"CXXStaticCastExpr(cxx_static_cast_expr)",
							"CXXUnresolvedConstructExpr(cxx_unresolved_construct_expr)",
							"CXXNewExpr(cxx_new_expr)",
							"CXXDeleteExpr(cxx_delete_expr)",
							"CXXBoolLiteralExpr(cxx_bool_literal_expr)",
							"CXX11NoReturnAttr(cxx11_no_return_attr)",
							"CXXBindTemporaryExpr(cxx_bind_temporary_expr)",
							"CXXCatchStmt(cxx_catch_stmt)",
							"CXXConstructExpr(cxx_construct_expr)",
							"CXXConversionDecl(cxx_conversion_decl)",
							"CXXDefaultArgExpr(cxx_default_arg_expr)",
							"CXXDefaultInitExpr(cxx_default_init_expr)",
							"CXXForRangeStmt(cxx_for_range_stmt)",
							"CXXFunctionalCastExpr(cxx_functional_cast_expr)",
							"CXXMemberCallExpr(cxx_member_call_expr)",
							"CXXNoexceptExpr(cxx_noexcept_expr)",
							"CXXNullPtrLiteralExpr(cxx_null_ptr_literal_expr)",
							"CXXOperatorCallExpr(cxx_operator_call_expr)",
							"CXXReinterpretCastExpr(cxx_reinterpret_cast_expr)",
							"CXXScalarValueInitExpr(cxx_scalar_value_init_expr)",
							"CXXTemporaryObjectExpr(cxx_temporary_object_expr)",
							"CXXTryStmt(cxx_try_stmt)",
							" function PrintNode(node)",
							" function PrintAst(node, ast)",
							"get()",
							" function isNode(obj)",
							" function GetType(name_or_id, ast = globalThis['$']?.data)",
							"n =>",
							" node =>",
							" node =>",
							"r =>",
							" function GetClass(name_or_id, ast = globalThis['$'].data)",
							" n =>",
							"bases()",
							" function* GetBases(node, ast = globalThis['$'].data)",
							" function GetByName(arg, ast = globalThis['$'].data, ...args)",
							" function GetNamespace(arg, root = globalThis['$'].data, predicate = () => true)",
							" n =>",
							" function NamespaceOf(node, path, ast = globalThis['$'].data)",
							"toString()",
							" function GetFields(node)",
							" (v, k) =>",
							"([v, p]) =>",
							"([loc, ptr]) =>",
							"i =>",
							" function GetParams(node)",
							"child =>",
							" function PathRemoveLoc(path)",
							"p =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADBAgAAICBmaW5kTGFzdEluZGV4KHByZWRpY2F0ZSkKICB0YWlsKCkKICBzdGFydHNXaXRoKHN0YXJ0KQogIG1haW4oLi4uYXJncykKKGEsIHApID0+CihhLCBwKSA9PgogIGQgPT4KICB2ID0+CiAgcHJvY2Vzc0ZpbGVzKC4uLmZpbGVzKQpSZWFkQVNUKG91dGZpbGUsIGxvYWQgPSBmID0+IAooZiksIHNhdmUgPSBXcml0ZUZpbGUsIHBhcnNlID0gSlNPTi5wYXJzZSkKICBuYW1lID0+CiAgc3RhdCA9PgooKSA9PgphID0+CigpID0+CigpID0+CigpID0+CigpID0+CiAgZXJyID0+Cih2LCBwKSA9PgogIHRvU3RyaW5nKCkKICB0b1N0cmluZygpCnYgPT4KTGlzdE5vZGVzKHN5c2luYyA9IGZhbHNlKQpOb1N5c3RlbUluY2x1ZGVzID0gKFtwLCBuLCBsXSkgPT4KKFtwYXRoLCBkZWNsXSkgPT4KICBuYW1lcyA9IGRlY2xzID0+CihbcGF0aCwgZGVjbF0pID0+CiAgZGVjbGFyYXRpb25zID0gZGVjbHMgPT4KKFtwYXRoLCBkZWNsLCBsb2NdKSA9PgooW3AsIG5dKSA9PgooYSwgYikgPT4KKFtwLCBuXSkgPT4KKFtwXSkgPT4KKFtwXSkgPT4KICBwID0+CihbcCwgbl0pID0+CihbcCwgbl0pID0+CihhLCBiKSA9PgooW3AsIG5dKSA9PgooW3AsIG4sIGxdKSA9PgogIGsgPT4KKFtwYXRoLCBub2RlLCBpZCwgbmFtZSwgdHlwZSwga2luZF0pID0+CihmaWVsZCwgaSkgPT4KICB3cml0ZU91dHB1dChuYW1lLCBkYXRhKQpHZXRMaWJyYXJ5Rm9yKHN5bWJvbE5hbWUpAAAAAAAAAABOLQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					4,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/debugger-server.js",
						"symkeys":
						[
							[
								1632,
								1675
							],
							[
								2024,
								2061
							],
							[
								2128,
								2133
							],
							[
								2422,
								2439
							],
							[
								2836,
								2868
							],
							[
								3031,
								3052
							],
							[
								3245,
								3275
							],
							[
								3646,
								3674
							],
							[
								3686,
								3700
							],
							[
								3959,
								3973
							],
							[
								4455,
								4459
							],
							[
								4506,
								4510
							],
							[
								4707,
								4714
							],
							[
								4741,
								4758
							],
							[
								5032,
								5079
							],
							[
								5604,
								5672
							],
							[
								6222,
								6245
							],
							[
								7392,
								7414
							],
							[
								7859,
								7906
							],
							[
								8072,
								8090
							],
							[
								8586,
								8597
							],
							[
								8921,
								8939
							],
							[
								9040,
								9057
							],
							[
								9231,
								9235
							],
							[
								9311,
								9348
							],
							[
								9508,
								9512
							],
							[
								9857,
								9889
							],
							[
								10058,
								10082
							],
							[
								10096,
								10122
							],
							[
								10417,
								10421
							],
							[
								10755,
								10778
							],
							[
								10836,
								10844
							],
							[
								11024,
								11039
							],
							[
								11403,
								11418
							],
							[
								11801,
								11830
							],
							[
								11920,
								11933
							],
							[
								12634,
								12644
							],
							[
								12789,
								12807
							],
							[
								12840,
								12858
							],
							[
								12859,
								12866
							],
							[
								12899,
								12960
							],
							[
								13227,
								13238
							],
							[
								13388,
								13417
							],
							[
								13635,
								13661
							],
							[
								13672,
								13686
							],
							[
								13903,
								13918
							],
							[
								13948,
								13967
							],
							[
								13997,
								14019
							],
							[
								14333,
								14343
							],
							[
								14551,
								14565
							],
							[
								14619,
								14633
							],
							[
								15744,
								15787
							],
							[
								15981,
								15987
							],
							[
								16000,
								16016
							],
							[
								17592,
								17628
							],
							[
								17816,
								17851
							],
							[
								17991,
								17995
							],
							[
								18123,
								18141
							],
							[
								18295,
								18333
							],
							[
								18722,
								18733
							],
							[
								18888,
								18899
							],
							[
								18959,
								18979
							],
							[
								19568,
								19603
							],
							[
								20006,
								20025
							],
							[
								20133,
								20171
							],
							[
								21123,
								21146
							],
							[
								21184,
								21191
							],
							[
								21772,
								21777
							],
							[
								22997,
								23012
							],
							[
								25025,
								25033
							],
							[
								25973,
								25979
							],
							[
								26384,
								26409
							],
							[
								26732,
								26749
							],
							[
								26793,
								26798
							],
							[
								26823,
								26837
							],
							[
								27183,
								27193
							],
							[
								27317,
								27334
							],
							[
								27366,
								27381
							],
							[
								27424,
								27438
							],
							[
								27442,
								27457
							],
							[
								27601,
								27605
							],
							[
								27683,
								27693
							],
							[
								28181,
								28190
							],
							[
								28306,
								28312
							],
							[
								28370,
								28383
							],
							[
								28601,
								28618
							],
							[
								28735,
								28777
							],
							[
								29149,
								29180
							],
							[
								29262,
								29278
							],
							[
								29462,
								29482
							]
						],
						"symlist":
						[
							"function decorate(decorators, obj, ...args)",
							"scriptName = (arg = scriptArgs[0]) =>",
							"() =>",
							"signalName = n =>",
							"function checkChildExited(child)",
							"function GetLoc(node)",
							"async function LoadAST(source)",
							"function StartREPL(prefix = ",
							", suffix = '')",
							".show = arg =>",
							"k =>",
							"k =>",
							"item =>",
							"(acc, keys, i) =>",
							" function StartDebugger(args, connect, address)",
							"async function ConnectDebugger(address, skipToMain = true, callback)",
							"async process(callback)",
							"async sendMessage(msg)",
							"function LaunchDebugger(dbg, skipToMain = true)",
							"async (...args) =>",
							"async () =>",
							"DebuggerDispatcher",
							"async value(name)",
							"v =>",
							"async function PrintStackFrame(frame)",
							"f =>",
							"async function PrintStack(stack)",
							" (member, obj, prop) =>",
							"async breakpoints(...args)",
							"b =>",
							"async stackTrace(frame)",
							"frame =>",
							"async scopes(n)",
							"async waitRun()",
							"async variables(n, depth = 0)",
							"add = item =>",
							"toString()",
							"DebuggerDispatcher",
							" (port = 8777) =>",
							" () =>",
							"async function NewDebugger(args, skipToMain = false, address)",
							"kill: () =>",
							"async function OnStopped(msg)",
							"function URLWorker(script)",
							"dataURL = s =>",
							"(push, stop) =>",
							"postMessage: msg =>",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (v, pv, o) =>",
							" function createWS(url, callbacks, listen)",
							" () =>",
							" (level, str) =>",
							" function* config(req, res)",
							" function* files(req, res)",
							"f =>",
							"onConnect(ws, req)",
							"value: async function sendMessage(msg)",
							"onClose(ws)",
							"onError(ws)",
							"onRequest(req, resp)",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"async function handleCommand(ws, data)",
							"forward = (fd, name) =>",
							" buf =>",
							"() =>",
							" (dbg, sock) =>",
							"frame =>",
							" () =>",
							" function showSessions()",
							"get connections()",
							"ws =>",
							"get socklist()",
							"get file()",
							"(file, source) =>",
							" () =>",
							" s =>",
							" () =>",
							"m =>",
							"line(i, j)",
							"match(re)",
							"fns =>",
							"({ name }) =>",
							"async functions()",
							"([name, loc, params, expression, path]) =>",
							"async repeat(cond, fn, ...args)",
							"cond = (r, i) =>",
							" function quit(why)"
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				],
				[
					5,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/clang-list.js",
						"symkeys":
						[
							[
								341,
								365
							],
							[
								529,
								535
							],
							[
								579,
								596
							],
							[
								707,
								735
							],
							[
								921,
								931
							],
							[
								981,
								991
							],
							[
								1927,
								1931
							],
							[
								1978,
								1982
							],
							[
								2080,
								2117
							],
							[
								2402,
								2446
							],
							[
								2454,
								2496
							],
							[
								2536,
								2543
							],
							[
								2587,
								2594
							],
							[
								3005,
								3016
							],
							[
								3063,
								3068
							],
							[
								3078,
								3083
							],
							[
								3096,
								3107
							],
							[
								3137,
								3142
							],
							[
								3155,
								3166
							],
							[
								3324,
								3330
							],
							[
								3731,
								3741
							],
							[
								3903,
								3913
							],
							[
								4210,
								4220
							],
							[
								4777,
								4782
							],
							[
								4925,
								4965
							],
							[
								5017,
								5050
							],
							[
								5235,
								5253
							],
							[
								5299,
								5315
							],
							[
								5331,
								5348
							],
							[
								5375,
								5398
							],
							[
								5414,
								5436
							],
							[
								5536,
								5547
							],
							[
								5670,
								5679
							],
							[
								5749,
								5760
							],
							[
								5978,
								5986
							],
							[
								6016,
								6024
							],
							[
								6043,
								6047
							],
							[
								6214,
								6225
							],
							[
								6280,
								6291
							],
							[
								6323,
								6332
							],
							[
								6482,
								6493
							],
							[
								6544,
								6558
							],
							[
								6697,
								6701
							],
							[
								6971,
								7010
							],
							[
								7104,
								7117
							],
							[
								7574,
								7606
							],
							[
								7770,
								7804
							]
						],
						"symlist":
						[
							"findLastIndex(predicate)",
							"tail()",
							"startsWith(start)",
							"async function main(...args)",
							" (a, p) =>",
							" (a, p) =>",
							"d =>",
							"v =>",
							"async function processFiles(...files)",
							"async function ReadAST(outfile, load = f => ",
							"(f), save = WriteFile, parse = JSON.parse)",
							"name =>",
							"stat =>",
							"async () =>",
							" a =>",
							"() =>",
							"async () =>",
							"() =>",
							"async () =>",
							"err =>",
							" (v, p) =>",
							"toString()",
							"toString()",
							" v =>",
							" function ListNodes(sysinc = false)",
							"NoSystemIncludes = ([p, n, l]) =>",
							" ([path, decl]) =>",
							"names = decls =>",
							"([path, decl]) =>",
							"declarations = decls =>",
							"([path, decl, loc]) =>",
							"([p, n]) =>",
							"(a, b) =>",
							"([p, n]) =>",
							"([p]) =>",
							"([p]) =>",
							"p =>",
							"([p, n]) =>",
							"([p, n]) =>",
							"(a, b) =>",
							"([p, n]) =>",
							"([p, n, l]) =>",
							"k =>",
							"([path, node, id, name, type, kind]) =>",
							"(field, i) =>",
							"function writeOutput(name, data)",
							"function GetLibraryFor(symbolName)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAArBgAAICBkZWNvcmF0ZShkZWNvcmF0b3JzLCBvYmosIC4uLmFyZ3MpCiAgc2NyaXB0TmFtZSA9IChhcmcgPSBzY3JpcHRBcmdzWzBdKSA9PgooKSA9PgogIHNpZ25hbE5hbWUgPSBuID0+CiAgY2hlY2tDaGlsZEV4aXRlZChjaGlsZCkKR2V0TG9jKG5vZGUpCkxvYWRBU1Qoc291cmNlKQpTdGFydFJFUEwocHJlZml4ID0gCiwgc3VmZml4ID0gJycpCiAgLnNob3cgPSBhcmcgPT4KICBrID0+CiAgayA9PgogIGl0ZW0gPT4KKGFjYywga2V5cywgaSkgPT4KU3RhcnREZWJ1Z2dlcihhcmdzLCBjb25uZWN0LCBhZGRyZXNzKQpDb25uZWN0RGVidWdnZXIoYWRkcmVzcywgc2tpcFRvTWFpbiA9IHRydWUsIGNhbGxiYWNrKQogIHByb2Nlc3MoY2FsbGJhY2spCiAgc2VuZE1lc3NhZ2UobXNnKQpMYXVuY2hEZWJ1Z2dlcihkYmcsIHNraXBUb01haW4gPSB0cnVlKQooLi4uYXJncykgPT4KKCkgPT4KRGVidWdnZXJEaXNwYXRjaGVyCiAgdmFsdWUobmFtZSkKICB2ID0+ClByaW50U3RhY2tGcmFtZShmcmFtZSkKICBmID0+ClByaW50U3RhY2soc3RhY2spCihtZW1iZXIsIG9iaiwgcHJvcCkgPT4KICBicmVha3BvaW50cyguLi5hcmdzKQogIGIgPT4KICBzdGFja1RyYWNlKGZyYW1lKQogIGZyYW1lID0+CiAgc2NvcGVzKG4pCiAgd2FpdFJ1bigpCiAgdmFyaWFibGVzKG4sIGRlcHRoID0gMCkKICBhZGQgPSBpdGVtID0+CiAgdG9TdHJpbmcoKQpEZWJ1Z2dlckRpc3BhdGNoZXIKKHBvcnQgPSA4Nzc3KSA9PgooKSA9PgpOZXdEZWJ1Z2dlcihhcmdzLCBza2lwVG9NYWluID0gZmFsc2UsIGFkZHJlc3MpCiAga2lsbDogKCkgPT4KT25TdG9wcGVkKG1zZykKVVJMV29ya2VyKHNjcmlwdCkKICBkYXRhVVJMID0gcyA9PgoocHVzaCwgc3RvcCkgPT4KICBwb3N0TWVzc2FnZTogbXNnID0+CiAgbWFpbiguLi5hcmdzKQooYSwgdikgPT4KKHYsIHB2LCBvKSA9PgoodiwgcHYsIG8pID0+CiAgY3JlYXRlV1ModXJsLCBjYWxsYmFja3MsIGxpc3RlbikKKCkgPT4KKGxldmVsLCBzdHIpID0+CiAgY29uZmlnKHJlcSwgcmVzKQogIGZpbGVzKHJlcSwgcmVzKQogIGYgPT4KICBvbkNvbm5lY3Qod3MsIHJlcSkKICB2YWx1ZTogZnVuY3Rpb24gc2VuZE1lc3NhZ2UobXNnKQogIG9uQ2xvc2Uod3MpCiAgb25FcnJvcih3cykKICBvblJlcXVlc3QocmVxLCByZXNwKQoobWF0Y2gsIHAxLCBwMCwgcDIsIHAzLCBvZmZzZXQpID0+CiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIGhhbmRsZUNvbW1hbmQod3MsIGRhdGEpCiAgZm9yd2FyZCA9IChmZCwgbmFtZSkgPT4KYnVmID0+CigpID0+CihkYmcsIHNvY2spID0+CiAgZnJhbWUgPT4KKCkgPT4KICBzaG93U2Vzc2lvbnMoKQogIGdldCBjb25uZWN0aW9ucygpCiAgd3MgPT4KICBnZXQgc29ja2xpc3QoKQogIGdldCBmaWxlKCkKKGZpbGUsIHNvdXJjZSkgPT4KKCkgPT4KcyA9PgooKSA9PgogIG0gPT4KICBsaW5lKGksIGopCiAgbWF0Y2gocmUpCiAgZm5zID0+Cih7IG5hbWUgfSkgPT4KICBmdW5jdGlvbnMoKQooW25hbWUsIGxvYywgcGFyYW1zLCBleHByZXNzaW9uLCBwYXRoXSkgPT4KICByZXBlYXQoY29uZCwgZm4sIC4uLmFyZ3MpCiAgY29uZCA9IChyLCBpKSA9PgogIHF1aXQod2h5KQAAAAAAAAAAwQIAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "upload-server.js",
			"settings":
			{
				"buffer_size": 36201,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					26,
					1,
					"insert",
					{
						"characters": "\nif"
					},
					"BQAAAN+BAAAAAAAA4IEAAAAAAAAAAAAA4IEAAAAAAADmgQAAAAAAAAAAAADmgQAAAAAAAOiBAAAAAAAAAAAAAOiBAAAAAAAA6YEAAAAAAAAAAAAA6YEAAAAAAADqgQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA34EAAAAAAADfgQAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAOqBAAAAAAAA7IEAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6oEAAAAAAADqgQAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": "typeof"
					},
					"BgAAAOuBAAAAAAAA7IEAAAAAAAAAAAAA7IEAAAAAAADtgQAAAAAAAAAAAADtgQAAAAAAAO6BAAAAAAAAAAAAAO6BAAAAAAAA74EAAAAAAAAAAAAA74EAAAAAAADwgQAAAAAAAAAAAADwgQAAAAAAAPGBAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA64EAAAAAAADrgQAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": " data"
					},
					"BQAAAPGBAAAAAAAA8oEAAAAAAAAAAAAA8oEAAAAAAADzgQAAAAAAAAAAAADzgQAAAAAAAPSBAAAAAAAAAAAAAPSBAAAAAAAA9YEAAAAAAAAAAAAA9YEAAAAAAAD2gQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA8YEAAAAAAADxgQAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": " !="
					},
					"AwAAAPaBAAAAAAAA94EAAAAAAAAAAAAA94EAAAAAAAD4gQAAAAAAAAAAAAD4gQAAAAAAAPmBAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9oEAAAAAAAD2gQAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPmBAAAAAAAA+oEAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+YEAAAAAAAD5gQAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAPqBAAAAAAAA/IEAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+oEAAAAAAAD6gQAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": "strien"
					},
					"BgAAAPuBAAAAAAAA/IEAAAAAAAAAAAAA/IEAAAAAAAD9gQAAAAAAAAAAAAD9gQAAAAAAAP6BAAAAAAAAAAAAAP6BAAAAAAAA/4EAAAAAAAAAAAAA/4EAAAAAAAAAggAAAAAAAAAAAAAAggAAAAAAAAGCAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+4EAAAAAAAD7gQAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					2,
					"left_delete",
					null,
					"AgAAAACCAAAAAAAAAIIAAAAAAAABAAAAbv+BAAAAAAAA/4EAAAAAAAABAAAAZQ",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAYIAAAAAAAABggAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "ng"
					},
					"AgAAAP+BAAAAAAAAAIIAAAAAAAAAAAAAAIIAAAAAAAABggAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/4EAAAAAAAD/gQAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": "\ntoString"
					},
					"DAAAAAOCAAAAAAAABIIAAAAAAAAAAAAABIIAAAAAAAAMggAAAAAAAAAAAAAEggAAAAAAAASCAAAAAAAACAAAACAgICAgICAgBIIAAAAAAAAOggAAAAAAAAAAAAAOggAAAAAAAA+CAAAAAAAAAAAAAA+CAAAAAAAAEIIAAAAAAAAAAAAAEIIAAAAAAAARggAAAAAAAAAAAAARggAAAAAAABKCAAAAAAAAAAAAABKCAAAAAAAAE4IAAAAAAAAAAAAAE4IAAAAAAAAUggAAAAAAAAAAAAAUggAAAAAAABWCAAAAAAAAAAAAABWCAAAAAAAAFoIAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAA4IAAAAAAAADggAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAABaCAAAAAAAAGIIAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFoIAAAAAAAAWggAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": "data"
					},
					"BAAAABeCAAAAAAAAGIIAAAAAAAAAAAAAGIIAAAAAAAAZggAAAAAAAAAAAAAZggAAAAAAABqCAAAAAAAAAAAAABqCAAAAAAAAG4IAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAF4IAAAAAAAAXggAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAByCAAAAAAAAHYIAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHIIAAAAAAAAcggAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": "data="
					},
					"BQAAAA6CAAAAAAAAD4IAAAAAAAAAAAAAD4IAAAAAAAAQggAAAAAAAAAAAAAQggAAAAAAABGCAAAAAAAAAAAAABGCAAAAAAAAEoIAAAAAAAAAAAAAEoIAAAAAAAATggAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADoIAAAAAAAAOggAAAAAAAAAAAAAAgFZA"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAACKCAAAAAAAAI4IAAAAAAAAAAAAAI4IAAAAAAAAtggAAAAAAAAAAAAAjggAAAAAAACOCAAAAAAAACgAAACAgICAgICAgICAjggAAAAAAACuCAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIoIAAAAAAAAiggAAAAAAAP///////+9/"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAABKCAAAAAAAAE4IAAAAAAAAAAAAAJIIAAAAAAAAkggAAAAAAAAgAAAAgICAgICAgIA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEoIAAAAAAAASggAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABSCAAAAAAAAFYIAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFIIAAAAAAAAUggAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"insert_snippet",
					{
						"contents": "`$0`"
					},
					"AQAAAFKCAAAAAAAAVIIAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUoIAAAAAAABSggAAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAFOCAAAAAAAAVIIAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAU4IAAAAAAABTggAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": " data"
					},
					"BQAAAFSCAAAAAAAAVYIAAAAAAAAAAAAAVYIAAAAAAABWggAAAAAAAAAAAABWggAAAAAAAFeCAAAAAAAAAAAAAFeCAAAAAAAAWIIAAAAAAAAAAAAAWIIAAAAAAABZggAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVIIAAAAAAABUggAAAAAAAAAAAAAAAPC/"
				],
				[
					61,
					1,
					"left_delete",
					null,
					"AQAAAFmCAAAAAAAAWYIAAAAAAAAKAAAAYCAke2RhdGF9YA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWYIAAAAAAABjggAAAAAAAAAAAAAAAPC/"
				],
				[
					65,
					12,
					"right_delete",
					null,
					"DAAAAAOCAAAAAAAAA4IAAAAAAAABAAAACgOCAAAAAAAAA4IAAAAAAAABAAAAIAOCAAAAAAAAA4IAAAAAAAABAAAAIAOCAAAAAAAAA4IAAAAAAAABAAAAIAOCAAAAAAAAA4IAAAAAAAABAAAAIAOCAAAAAAAAA4IAAAAAAAABAAAAIAOCAAAAAAAAA4IAAAAAAAABAAAAIAOCAAAAAAAAA4IAAAAAAAABAAAAIAOCAAAAAAAAA4IAAAAAAAABAAAAIAOCAAAAAAAAA4IAAAAAAAABAAAAIAOCAAAAAAAAA4IAAAAAAAABAAAAIAOCAAAAAAAAA4IAAAAAAAABAAAAZA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAA4IAAAAAAAADggAAAAAAAAAAAAAAsHxA"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": " d"
					},
					"AgAAAAOCAAAAAAAABIIAAAAAAAAAAAAABIIAAAAAAAAFggAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAA4IAAAAAAAADggAAAAAAAAAAAAAAAPC/"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAOiBAAAAAAAA6YEAAAAAAAAAAAAA6YEAAAAAAADqgQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6IEAAAAAAADogQAAAAAAAAAAAAAAAFJA"
				],
				[
					86,
					1,
					"paste",
					null,
					"AQAAAKVhAAAAAAAA/WEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKVhAAAAAAAApWEAAAAAAAAAAAAAAADwvw"
				],
				[
					91,
					1,
					"insert",
					{
						"characters": "Close"
					},
					"BgAAAMlhAAAAAAAAymEAAAAAAAAAAAAAymEAAAAAAADKYQAAAAAAAAcAAABDb25uZWN0ymEAAAAAAADLYQAAAAAAAAAAAADLYQAAAAAAAMxhAAAAAAAAAAAAAMxhAAAAAAAAzWEAAAAAAAAAAAAAzWEAAAAAAADOYQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMlhAAAAAAAA0GEAAAAAAAAAAAAAAADwvw"
				],
				[
					93,
					5,
					"left_delete",
					null,
					"BQAAAMRhAAAAAAAAxGEAAAAAAAABAAAAM8NhAAAAAAAAw2EAAAAAAAABAAAAO8JhAAAAAAAAwmEAAAAAAAABAAAANcFhAAAAAAAAwWEAAAAAAAABAAAAO8BhAAAAAAAAwGEAAAAAAAABAAAAOA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMVhAAAAAAAAxWEAAAAAAAAAAAAAAADwvw"
				],
				[
					94,
					1,
					"insert",
					{
						"characters": "1;"
					},
					"AgAAAMBhAAAAAAAAwWEAAAAAAAAAAAAAwWEAAAAAAADCYQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMBhAAAAAAAAwGEAAAAAAAAAAAAAAADwvw"
				],
				[
					95,
					1,
					"left_delete",
					null,
					"AQAAAMFhAAAAAAAAwWEAAAAAAAABAAAAOw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMJhAAAAAAAAwmEAAAAAAAAAAAAAAADwvw"
				],
				[
					96,
					1,
					"right_delete",
					null,
					"AQAAAMFhAAAAAAAAwWEAAAAAAAABAAAAMw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMFhAAAAAAAAwWEAAAAAAAAAAAAAAADwvw"
				],
				[
					98,
					1,
					"insert",
					{
						"characters": "1M;"
					},
					"AwAAAL9hAAAAAAAAwGEAAAAAAAAAAAAAwGEAAAAAAADBYQAAAAAAAAAAAADBYQAAAAAAAMJhAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL9hAAAAAAAAv2EAAAAAAAAAAAAAAADwvw"
				],
				[
					99,
					2,
					"left_delete",
					null,
					"AgAAAMFhAAAAAAAAwWEAAAAAAAABAAAAO8BhAAAAAAAAwGEAAAAAAAABAAAATQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMJhAAAAAAAAwmEAAAAAAAAAAAAAAADwvw"
				],
				[
					100,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAMBhAAAAAAAAwWEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMBhAAAAAAAAwGEAAAAAAAAAAAAAAADwvw"
				],
				[
					109,
					1,
					"insert",
					{
						"characters": "code,reason"
					},
					"DAAAANdhAAAAAAAA2GEAAAAAAAAAAAAA2GEAAAAAAADYYQAAAAAAAB0AAABhZGRyZXNzLCBwb3J0LCBwcm90b2NvbCwgdGxzINhhAAAAAAAA2WEAAAAAAAAAAAAA2WEAAAAAAADaYQAAAAAAAAAAAADaYQAAAAAAANthAAAAAAAAAAAAANthAAAAAAAA3GEAAAAAAAAAAAAA3GEAAAAAAADdYQAAAAAAAAAAAADdYQAAAAAAAN5hAAAAAAAAAAAAAN5hAAAAAAAA32EAAAAAAAAAAAAA32EAAAAAAADgYQAAAAAAAAAAAADgYQAAAAAAAOFhAAAAAAAAAAAAAOFhAAAAAAAA4mEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANdhAAAAAAAA9GEAAAAAAAAAAAAAAADwvw"
				],
				[
					112,
					1,
					"insert",
					{
						"characters": "code,"
					},
					"BQAAAJZhAAAAAAAAl2EAAAAAAAAAAAAAl2EAAAAAAACYYQAAAAAAAAAAAACYYQAAAAAAAJlhAAAAAAAAAAAAAJlhAAAAAAAAmmEAAAAAAAAAAAAAmmEAAAAAAACbYQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJZhAAAAAAAAlmEAAAAAAAAAAAAAAADwvw"
				],
				[
					120,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAOphAAAAAAAA62EAAAAAAAAAAAAA62EAAAAAAAD3YQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOphAAAAAAAA6mEAAAAAAAD////////vfw"
				],
				[
					125,
					1,
					"revert",
					null,
					"BAAAAAAAAAAAAAAAAAAAAAAAAAAcjQAAaW1wb3J0ICogYXMgc3RkIGZyb20gJ3N0ZCc7CmltcG9ydCAqIGFzIG9zIGZyb20gJ29zJzsKaW1wb3J0ICogYXMgZGVlcCBmcm9tICdkZWVwJzsKaW1wb3J0ICogYXMgeG1sIGZyb20gJ3htbCc7CmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7CmltcG9ydCB7IENvbnNvbGUgfSBmcm9tICdjb25zb2xlJzsKaW1wb3J0IHsgRGlyZWN0b3J5LCBOQU1FLCBCT1RILCBUWVBFX0RJUiwgVFlQRV9NQVNLLCBUWVBFX0xOSywgVFlQRV9SRUcgfSBmcm9tICdkaXJlY3RvcnknOwppbXBvcnQgeyBSRVBMIH0gZnJvbSAncmVwbCc7CmltcG9ydCBpbnNwZWN0IGZyb20gJ2luc3BlY3QnOwppbXBvcnQgKiBhcyBUZXJtaW5hbCBmcm9tICd0ZXJtaW5hbCc7CmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJzsKaW1wb3J0IHsgdW5saW5rLCBlcnJvciwgZm5tYXRjaCB9IGZyb20gJ21pc2MnOwppbXBvcnQgeyBrZXlzLCB0b1N0cmluZywgZGVmaW5lLCB0b1VuaXhUaW1lLCBnZXRPcHQsIHJhbmRTdHIsIGlzT2JqZWN0LCBpc0FycmF5QnVmZmVyLCBnbG9iLCBHTE9CX0JSQUNFLCB3YWl0Rm9yIH0gZnJvbSAndXRpbCc7CmltcG9ydCB7IGNyZWF0ZVNlcnZlciwgc2V0TG9nLCBMTExfVVNFUiwgTExMX05PVElDRSwgTExMX1dBUk4sIExMTF9JTkZPLCBsb2dMZXZlbHMsIEZvcm1QYXJzZXIsIEhhc2gsIFJlc3BvbnNlLCBTb2NrZXQgfSBmcm9tICduZXQnOwppbXBvcnQgeyBwYXJzZURhdGUsIGRhdGVUb09iamVjdCB9IGZyb20gJy4vZGF0ZS1oZWxwZXJzLmpzJzsKaW1wb3J0IHsgUmVhZEZpbGUsIFJlYWRKU09OLCBXcml0ZUZpbGUsIFdyaXRlSlNPTiwgUmVhZEJKU09OLCBXcml0ZUJKU09OIH0gZnJvbSAnLi9pby1oZWxwZXJzLmpzJzsKaW1wb3J0IHsgRXhlY1Rvb2wgfSBmcm9tICcuL29zLWhlbHBlcnMuanMnOwppbXBvcnQgeyBoIH0gZnJvbSAnLi9saWIvcHJlYWN0Lm1qcyc7CmltcG9ydCByZW5kZXJUb1N0cmluZyBmcm9tICcuL2xpYi9wcmVhY3QtcmVuZGVyLXRvLXN0cmluZy5qcyc7CmltcG9ydCB7IHNwYXduIH0gZnJvbSAnY2hpbGRfcHJvY2Vzcyc7CmltcG9ydCB0cmtsIGZyb20gJy4vbGliL3Rya2wuanMnOwppbXBvcnQgZXh0ZW5kQXJyYXkgZnJvbSAnZXh0ZW5kQXJyYXknOwppbXBvcnQgZXh0ZW5kR2VuZXJhdG9yIGZyb20gJ2V4dGVuZEdlbmVyYXRvcic7CmltcG9ydCBleHRlbmRBc3luY0dlbmVyYXRvciBmcm9tICdleHRlbmRBc3luY0dlbmVyYXRvcic7CmltcG9ydCB7IFJlY3Vyc2l2ZURpckl0ZXJhdG9yIH0gZnJvbSAnLi9kaXItaGVscGVycy5qcyc7CmltcG9ydCB7IE1lc3NhZ2VSZWNlaXZlciwgTWVzc2FnZVRyYW5zbWl0dGVyLCBNZXNzYWdlVHJhbnNjZWl2ZXIsIGNvZGVjcywgUlBDQXBpLCBSUENQcm94eSwgUlBDT2JqZWN0LCBSUENGYWN0b3J5LCBDb25uZWN0aW9uLCBSUENfUEFSU0VfRVJST1IsIFJQQ19JTlZBTElEX1JFUVVFU1QsIFJQQ19NRVRIT0RfTk9UX0ZPVU5ELCBSUENfSU5WQUxJRF9QQVJBTVMsIFJQQ19JTlRFUk5BTF9FUlJPUiwgUlBDX1NFUlZFUl9FUlJPUl9CQVNFLCBGYWN0b3J5RW5kcG9pbnQsIFJQQ1NlcnZlciwgUlBDQ2xpZW50LCBGYWN0b3J5Q2xpZW50LCBSUENTb2NrZXQsIEdldFByb3BlcnRpZXMsIEdldEtleXMsIFNlcmlhbGl6ZVZhbHVlLCBEZXNlcmlhbGl6ZVN5bWJvbHMsIERlc2VyaWFsaXplVmFsdWUsIFJQQ0Nvbm5lY3QsIFJQQ0xpc3RlbiB9IGZyb20gJy4vcXVpY2tqcy9xanMtbmV0L2pzL3JwYy5qcyc7CmltcG9ydCB7IFByb21pc2VXb3JrZXIgfSBmcm9tICcuL3Byb21pc2Utd29ya2VyLmpzJzsKCmNvbnN0IERFQlVHID0gZmFsc2U7CmNvbnN0IGlzaW4gPSAob3RoZXIsIHApID0+IHBhdGguc2xpY2Uob3RoZXIsIDAsIHBhdGgubGVuZ3RoKHApKSA9PSBwOwoKZXh0ZW5kQXJyYXkoKTsKZXh0ZW5kR2VuZXJhdG9yKCk7CmV4dGVuZEdlbmVyYXRvcihPYmplY3QuZ2V0UHJvdG90eXBlT2YobmV3IE1hcCgpLmtleXMoKSkpOwovL2V4dGVuZEdlbmVyYXRvcihPYmplY3QuZ2V0UHJvdG90eXBlT2YobmV3IERpcmVjdG9yeSgnLicpKSk7CmV4dGVuZEFzeW5jR2VuZXJhdG9yKCk7CgpjbGFzcyBNYXRjaCB7CiAgY29uc3RydWN0b3IocGF0dGVybikgewogICAgdGhpcy5wYXR0ZXJuID0gcGF0dGVybjsKICB9CgogIGFwcGx5KCkgewogICAgcmV0dXJuIGdsb2IodGhpcy5wYXR0ZXJuKS5tYXAobmFtZSA9PiB7CiAgICAgIHJldHVybiBbbmFtZSwgUmVhZEZpbGUobmFtZSldOwogICAgfSk7CiAgfQp9CgpnbG9iYWxUaGlzLndvcmtlciA9IG5ldyBQcm9taXNlV29ya2VyKG5ldyBvcy5Xb3JrZXIoJy4vdXBsb2FkLXdvcmtlci5qcycpKTsKCmdsb2JhbFRoaXMuZnMgPSBmczsKZ2xvYmFsVGhpcy5sb2dGaWx0ZXIgPSAvKHdzX3NldF90aW1lb3V0OiBvbiBpbW1vcnRhbCBzdHJlYW18VW5oYW5kbGVkfFBST1hZLXxWSE9TVF9DRVJUX0FHSU5HfEJJTkR8RVZFTlRfV0FJVHxXUklUQUJMRSkvOwoKdHJrbC5wcm9wZXJ0eShnbG9iYWxUaGlzLCAnbG9nTGV2ZWwnKS5zdWJzY3JpYmUodmFsdWUgPT4gewogIHNldExvZyh2YWx1ZSwgKGxldmVsLCBtZXNzYWdlKSA9PiB7CiAgICBpZigvX19sd3N8c2VydmVfKHJlc29sdmVkfHhnZW5lcmF0b3J8cHJvbWlzZXxyZXNwb25zZSl8WFhibChcKFsxMjNdXCkuKndyaXRhYmxlfHhcKFsvXVwpLipXUklURUFCTEUpfGx3c18vLnRlc3QobWVzc2FnZSkpIHJldHVybjsKICAgIGlmKGxldmVsID09IExMTF9JTkZPICYmICEvcHJveHkvLnRlc3QobWVzc2FnZSkpIHJldHVybjsKICAgIGlmKGxvZ0ZpbHRlci50ZXN0KG1lc3NhZ2UpKSByZXR1cm47CgogICAgb3V0KGxvZ0xldmVsc1tsZXZlbF0ucGFkRW5kKDgpICsgbWVzc2FnZS5yZXBsYWNlKC9cbi9nLCAnXFxuJykucmVwbGFjZSgvXHIvZywgJ1xccicpKTsKICB9KTsKfSk7Cgphc3luYyBmdW5jdGlvbiBBc3luY0NvbGxlY3QoaXRlcikgewogIGxldCByZXQgPSBbXTsKICBmb3IgYXdhaXQobGV0IGNodW5rIG9mIGF3YWl0IGl0ZXIpIHJldC5wdXNoKGNodW5rKTsKICByZXR1cm4gcmV0Owp9CgpmdW5jdGlvbiBHZXRNaW1lKGZpbGUpIHsKICBsZXQgb3V0cHV0ID0gRXhlY1Rvb2woJ2ZpbGUnLCAnLWknLCBmaWxlKTsKICBvdXRwdXQgPSBvdXRwdXQucmVwbGFjZSgvW1xyXG5dKiQvZywgJycpOwogIG91dHB1dCA9IG91dHB1dC5yZXBsYWNlKG5ldyBSZWdFeHAoZmlsZSArICc6XFxzKycpLCAnJyk7CiAgb3V0cHV0ID0gb3V0cHV0LnJlcGxhY2UoL1w7XHMqLiovZywgJycpOwogIHJldHVybiBvdXRwdXQ7Cn0KCmZ1bmN0aW9uIE1hdGNoZXIocGF0dGVybiwgdCA9IGFyZyA9PiBhcmcpIHsKICByZXR1cm4gKC4uLmFyZ3MpID0+IHBhdHRlcm4gPT0gdCguLi5hcmdzKSB8fCAwID09IGZubWF0Y2gocGF0dGVybiwgdCguLi5hcmdzKSwgMCk7Cn0KCmZ1bmN0aW9uIEtleU9yVmFsdWVNYXRjaGVyKHBhdHRlcm4pIHsKICBsZXQgbWF0Y2hlciA9IE1hdGNoZXIocGF0dGVybik7CiAgcmV0dXJuIChba2V5LCB2YWx1ZV0pID0+IG1hdGNoZXIoa2V5KSB8fCBtYXRjaGVyKHZhbHVlKTsKfQoKZnVuY3Rpb24gR2V0Um9vdERpcmVjdG9yaWVzKHBhdHRlcm4gPSAnKicpIHsKICByZXR1cm4gYWxsb3dlZERpcnMua2V5cygpLmZpbHRlcihNYXRjaGVyKHBhdHRlcm4pKTsKfQoKY29uc3QgTWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+IFs4LCA0LCA0LCA0LCAxMl0ubWFwKG4gPT4gcmFuZFN0cihuLCAnMDEyMzQ1Njc4OWFiY2RlZicpLCBybmcpLmpvaW4oJy0nKTsKCmNvbnN0IGRlZmF1bHREaXJzID0gKGdsb2JhbFRoaXMuZGVmYXVsdERpcnMgPSBbCiAgJy4nLAogIC4uLmdsb2IoJy4uLyovZWFnbGUnKSwKICAnLi91cGxvYWRzLyoue3NjaCxicmQsbGJyfScsCiAgJy9tbnQvZXh0ZXh0L1Bob3Rvcy8qQVBQTEUvKi57SlBHLFBORyxHSUYsQUFFLE1PVixIRUlDLE1QNCxXRUJQfScsCiAgWycvaG9tZS9yb21hbi9CaWxkZXInLCBuZXcgUmVnRXhwKCcuKGpwZ3xqcGVnfHBuZ3xoZWljfHRpZnx0aWZmKSQnLCAnaScpXQpdKTsKCmNvbnN0IGFsbG93ZWREaXJzID0gKGdsb2JhbFRoaXMuYWxsb3dlZERpcnMgPSBuZXcgTWFwKAogIGRlZmF1bHREaXJzCiAgICAubWFwKGRkID0+IEdldERpcihBcnJheS5pc0FycmF5KGRkKSA/IGRkWzBdIDogZGQpKQogICAgLm1hcChkID0+IHBhdGgucmVzb2x2ZShkKSkKICAgIC5tYXAoZCA9PiBwYXRoLnJlbGF0aXZlKGQpKQogICAgLm1hcChkID0+IFtEaXJOYW1lKGQpLCBkXSkKKSk7CgpmdW5jdGlvbiBHZXREaXIoZGlyKSB7CiAgbGV0IGEgPSBkaXIuc3BsaXQobmV3IFJlZ0V4cChwYXRoLnNlcCArICcrJywgJ2cnKSk7CiAgbGV0IGkgPSBhLmZpbmRJbmRleChuID0+IC9bKnt9XS8udGVzdChuKSk7CiAgcmV0dXJuIGkgIT0gLTEgPyBwYXRoLnNsaWNlKGRpciwgMCwgaSkgOiBkaXI7Cn0KCmZ1bmN0aW9uIERpck5hbWUobmFtZSkgewogIGxldCBwID0gcGF0aC5yZWxhdGl2ZShuYW1lKTsKCiAgcCA9IHBhdGguc2xpY2UoCiAgICBwLAogICAgcC5zcGxpdChuZXcgUmVnRXhwKHBhdGguc2VwICsgJysnLCAnZycpKS5maW5kSW5kZXgoaXQgPT4gaXQgIT0gJy4uJykKICApOwogIHJldHVybiBwOwp9CgpmdW5jdGlvbiBEYXRlU3RyKGRhdGUpIHsKICBsZXQgc3RyID0gZGF0ZS50b0lTT1N0cmluZygpOwogIGxldCB0aSA9IHN0ci5pbmRleE9mKCdUJyk7CiAgcmV0dXJuICgKICAgIHN0ci5zdWJzdHJpbmcoMCwgdGkpIC8qLnJlcGxhY2UoLy0vZywgJycpKi8gKyAnICcgKyBzdHIuc3Vic3RyaW5nKHRpICsgMSwgdGkgKyAxICsgOCkgLy8ucmVwbGFjZSgvOi9nLCAnJykKICApOwp9CgpmdW5jdGlvbiBNb2RlU3RyKG1vZGUpIHsKICByZXR1cm4gKAogICAgKG1vZGUgJiAoMG8xMjAwMDAgPT0gMG8xMjAwMDApID8gJ2wnIDogbW9kZSAmIDBvNDAwMDAgPyAnZCcgOiAnLScpICsKICAgIChtb2RlICYgMGIxMDAwMDAwMDAgPyAncicgOiAnLScpICsKICAgIChtb2RlICYgMGIwMTAwMDAwMDAgPyAndycgOiAnLScpICsKICAgIChtb2RlICYgMGIwMDEwMDAwMDAgPyAneCcgOiAnLScpICsKICAgIChtb2RlICYgMGIxMDAwMDAgPyAncicgOiAnLScpICsKICAgIChtb2RlICYgMGIwMTAwMDAgPyAndycgOiAnLScpICsKICAgIChtb2RlICYgMGIwMDEwMDAgPyAneCcgOiAnLScpICsKICAgIChtb2RlICYgMGIxMDAgPyAncicgOiAnLScpICsKICAgIChtb2RlICYgMGIwMTAgPyAndycgOiAnLScpICsKICAgIChtb2RlICYgMGIwMDEgPyAneCcgOiAnLScpCiAgKTsKfQoKY29uc3QgSFRNTFBhZ2UgPSAoeyB0aXRsZSwgc3R5bGUsIHNjcmlwdHMgPSBbXSwgY2hpbGRyZW4sIC4uLnByb3BzIH0pID0+IHsKICByZXR1cm4gaCgnaHRtbCcsIHt9LCBbCiAgICBoKAogICAgICAnaGVhZCcsCiAgICAgIHt9LAogICAgICBbCiAgICAgICAgaCgndGl0bGUnLCB7fSwgW3RpdGxlXSksCiAgICAgICAgLi4uKHN0eWxlID8gW2goJ3N0eWxlJywgeyB0eXBlOiAndGV4dC9jc3MnIH0sIFtzdHlsZV0pXSA6IFtdKSwKICAgICAgICBoKAogICAgICAgICAgJ2xpbmsnLAogICAgICAgICAgewogICAgICAgICAgICByZWw6ICdzdHlsZXNoZWV0JywKICAgICAgICAgICAgaHJlZjogJ3N0YXRpYy9jc3MvbGlzdC5jc3MnCiAgICAgICAgICB9LAogICAgICAgICAgW10KICAgICAgICApCiAgICAgIF0uY29uY2F0KHNjcmlwdHMubWFwKHNjcmlwdCA9PiBoKCdzY3JpcHQnLCB7IHR5cGU6ICdtb2R1bGUnLCBzcmM6IHNjcmlwdCB9KSkpCiAgICApLAogICAgaCgnYm9keScsIHt9LCBjaGlsZHJlbiA/PyBbXSkKICBdKTsKfTsKCmNvbnN0IEZpbHRlckZvcm0gPSAoeyAuLi5wcm9wcyB9KSA9PgogIGgoJ2Zvcm0nLCB7IGFjdGlvbjogJ2ZpbGUnLCBtZXRob2Q6ICdQT1NUJyB9LCBbCiAgICBoKAogICAgICAnaW5wdXQnLAogICAgICB7CiAgICAgICAgdHlwZTogJ3RleHQnLAogICAgICAgIHNpemU6IDIwLAogICAgICAgIG5hbWU6ICdmaWx0ZXInLAogICAgICAgIHZhbHVlOiAnLionIC8qLAogICAgICAgICAgb25jaGFuZ2U6IGUgPT4gewogICAgICAgICAgICBjb25zb2xlLmxvZygnb25jaGFuZ2UnLCBlKTsKICAgICAgICAgIH0qLwogICAgICB9LAogICAgICBbXQogICAgKSwKICAgIGgoJ2lucHV0JywgeyB0eXBlOiAnc3VibWl0JywgdmFsdWU6ICdTdWJtaXQnLCBjbGFzczogJ2hpZGRlbicgfSwgW10pCiAgXSk7Cgpjb25zdCBIVE1MVGFibGUgPSAoeyByb3dzLCAuLi5wcm9wcyB9KSA9PiBoKCd0YWJsZScsIHByb3BzLCByb3dzKTsKY29uc3QgSFRNTFRhYmxlUm93ID0gKHsgY29sdW1ucywgLi4ucHJvcHMgfSkgPT4gaCgndHInLCBwcm9wcywgY29sdW1ucyk7CmNvbnN0IEhUTUxUYWJsZUNvbHVtbiA9ICh7IGNvbHVtbnMsIGNoaWxkcmVuLCB0YWcgPSAndGQnLCAuLi5wcm9wcyB9KSA9PiBoKHRhZywgcHJvcHMsIGNoaWxkcmVuKTsKCmNvbnN0IEZpbGVMaW5rID0gKHsgZmlsZSwgLi4ucHJvcHMgfSkgPT4gewogIHJldHVybiBoKCdhJywgeyBocmVmOiAndXBsb2Fkcy8nICsgZmlsZSB9LCBbZmlsZV0pOwp9Owpjb25zdCBGaWxlT2JqZWN0ID0gKHsgZmlsZSwgc3RhdCA9IHt9LCAuLi5wcm9wcyB9KSA9PiB7CiAgc3RhdCA/Pz0gZnMubHN0YXRTeW5jKCd1cGxvYWRzLycgKyBmaWxlKTsKICAvLyBjb25zb2xlLmxvZygnRmlsZU9iamVjdCcsIHsgZmlsZSwgc3RhdCB9KTsKICBsZXQgaXNEaXIgPSBzdGF0LmlzRGlyZWN0b3J5KCk7CgogIHJldHVybiBoKEhUTUxUYWJsZVJvdywge30sIFsKICAgIGgoSFRNTFRhYmxlQ29sdW1uLCB7IGNsYXNzOiAnbW9kZScgfSwgWwogICAgICAvLyhzdGF0Lm1vZGUgJiAwYjExMTExMTExMSkudG9TdHJpbmcoOCksCiAgICAgIE1vZGVTdHIoc3RhdC5tb2RlKQogICAgXSksCiAgICBoKEhUTUxUYWJsZUNvbHVtbiwgeyBjbGFzczogJ2ZpbGUnIH0sIFtoKEZpbGVMaW5rLCB7IGZpbGU6IGZpbGUgKyAoaXNEaXIgPyAnLycgOiAnJykgfSwgW10pXSksCiAgICBoKEhUTUxUYWJsZUNvbHVtbiwgeyBjbGFzczogJ3NpemUnIH0sIFtzdGF0LnNpemUgKyAnJ10pLAogICAgaChIVE1MVGFibGVDb2x1bW4sIHsgY2xhc3M6ICdkYXRlJyB9LCBbRGF0ZVN0cihuZXcgRGF0ZShzdGF0LmF0aW1lKSldKQogIF0pOwp9OwoKY29uc3QgRmlsZVRhYmxlID0gKHsgZmlsZXMsIC4uLnByb3BzIH0pID0+IHsKICAvL2NvbnNvbGUubG9nKCdGaWxlVGFibGUnLCBmaWxlcyk7CgogIGxldCBmaWVsZHMgPSBbJ21vZGUnLCAnZmlsZScsICdzaXplJywgJ2F0aW1lJ107CgogIGZpbGVzID0gZmlsZXMuc29ydCgoYSwgYikgPT4gYS5maWxlLmxvY2FsZUNvbXBhcmUoYi5maWxlKSk7CgogIHJldHVybiBoKAogICAgSFRNTFRhYmxlLAogICAgewogICAgICAuLi5wcm9wcywKICAgICAgY2VsbHNwYWNpbmc6IDAsCiAgICAgIGNlbGxwYWRkaW5nOiAwLAogICAgICBib3JkZXI6IDAsCiAgICAgIHJvd3M6IFsKICAgICAgICBoKAogICAgICAgICAgSFRNTFRhYmxlUm93LAogICAgICAgICAgewogICAgICAgICAgICBjb2x1bW5zOiBmaWVsZHMubWFwKGZpZWxkID0+IGgoSFRNTFRhYmxlQ29sdW1uLCB7IHRhZzogJ3RoJyB9LCBbZmllbGRdKSkKICAgICAgICAgIH0sCiAgICAgICAgICBbXQogICAgICAgICkKICAgICAgXS5jb25jYXQoZmlsZXMubWFwKGZpbGUgPT4gaChGaWxlT2JqZWN0LCBmaWxlLCBbXSkpKQogICAgfSwKICAgIFtdCiAgKTsKfTsKCmZ1bmN0aW9uIFJlYWRFeGl2MihmaWxlKSB7CiAgY29uc29sZS5sb2coJ1JlYWRFeGl2MicsIGZpbGUpOwogIGxldCB4bXBkYXQgPSBFeGVjVG9vbCgnZXhpdjInLCAnLWUnLCAnWC0nLCAnZXgnLCBmaWxlKTsKCiAgLy8gY29uc29sZS5sb2coJ3htcGRhdCcsIHhtcGRhdCk7CiAgbGV0IHhtcCA9IHhtbC5yZWFkKHhtcGRhdCk7CiAgLy8gY29uc29sZS5sb2coJ3htcCcsIHhtcCk7CiAgbGV0IGZsYXQgPSBPYmplY3QuZnJvbUVudHJpZXMoCiAgICBkZWVwCiAgICAgIC5mbGF0dGVuKHhtcCwgW10pCiAgICAgIC5maWx0ZXIoKFtrLCB2XSkgPT4gdiAhPT0gJycgJiYgL2F0dHJpYnV0ZXMuKjovLnRlc3QoaykgJiYgIS9cLnhtbG5zLy50ZXN0KGspICYmICFpc09iamVjdCh2KSkKICAgICAgLmZpbHRlcigoW2ssIHZdKSA9PiAvKEdQU3xbWFldRGltfFtYWV1SZXN8RGF0ZSR8TWFrZSR8TW9kZWwkKS8udGVzdChrKSkKICAgICAgLm1hcCgoW2ssIHZdKSA9PiBbay5yZXBsYWNlKC8uKlwuYXR0cmlidXRlc1wuL2csICcnKSwgdl0pCiAgICAgIC5zb3J0KChhLCBiKSA9PiBhWzBdLmxvY2FsZUNvbXBhcmUoYlswXSkpCiAgICAgIC5tYXAoKFtrLCB2XSkgPT4gW2ssIGlzTmFOKCt2KSA/IChpc05hTihEYXRlLnBhcnNlKHYpKSA/IHYgOiBuZXcgRGF0ZSh2KSkgOiArdl0pCiAgKTsKICByZXR1cm4gZmxhdDsKfQoKZnVuY3Rpb24gUmVhZEV4aWZ0b29sKGZpbGUpIHsKICBjb25zb2xlLmxvZygnUmVhZEV4aWZ0b29sJywgZmlsZSk7CgogIGxldCBvdXQgPSBFeGVjVG9vbCgnZXhpZnRvb2wnLCAnLVMnLCAnLWVlJywgZmlsZSk7CgogIGxldCBhID0gb3V0LnNwbGl0KC9ccj9cbi9nKS5maWx0ZXIobCA9PiBsICE9ICcnKTsKCiAgYSA9IGEubWFwKGxpbmUgPT4gW2xpbmUsIGxpbmUuaW5kZXhPZignOiAnKV0pLm1hcCgoW2xpbmUsIGlkeF0pID0+IFtsaW5lLnNsaWNlKDAsIGlkeCksIGxpbmUuc2xpY2UoaWR4ICsgMildKTsKICBsZXQgbyA9IE9iamVjdC5mcm9tRW50cmllcyhhKTsKCiAgLy9jb25zb2xlLmxvZygnUmVhZEV4aWZ0b29sJyxvKTsKICByZXR1cm4gbzsKfQoKZnVuY3Rpb24gSGVpZkNvbnZlcnQoc3JjLCBkc3QsIHF1YWxpdHkgPSAxMDApIHsKICBjb25zb2xlLmxvZygnSGVpZkNvbnZlcnQnLCBzcmMsIGRzdCk7CiAgbGV0IGNoaWxkID0gc3Bhd24oJ2hlaWYtY29udmVydCcsIFsnLXEnLCBxdWFsaXR5ICsgJycsIHNyYywgZHN0XSwgewogICAgYmxvY2s6IGZhbHNlLAogICAgc3RkaW86IFsnaW5oZXJpdCcsICdpbmhlcml0JywgJ2luaGVyaXQnXQogIH0pOwoKICBjb25zb2xlLmxvZygnSGVpZkNvbnZlcnQnLCBjaGlsZCk7CiAgY2hpbGQud2FpdCgpOwp9CgpmdW5jdGlvbiBNYWdpY2tSZXNpemUoc3JjLCBkc3QsIHJvdGF0ZSA9IDAsIHdpZHRoLCBoZWlnaHQpIHsKICBjb25zb2xlLmxvZygnTWFnaWNrUmVzaXplJywgewogICAgd2lkdGgsCiAgICBoZWlnaHQsCiAgICBkc3QsCiAgICByb3RhdGUKICB9KTsKICBsZXQgY2hpbGQgPSBzcGF3bignY29udmVydCcsIFtzcmMsICctcmVzaXplJywgd2lkdGggKyAneCcgKyBoZWlnaHQsIC4uLihyb3RhdGUgPyBbJy1yb3RhdGUnLCAnLScgKyByb3RhdGVdIDogW10pLCBkc3RdLCB7IGJsb2NrOiBmYWxzZSwgc3RkaW86IFsnaW5oZXJpdCcsICdpbmhlcml0JywgJ2luaGVyaXQnXSB9KTsKCiAgY29uc29sZS5sb2coJ01hZ2lja1Jlc2l6ZScsIHsgY2hpbGQgfSk7CiAgY2hpbGQud2FpdCgpOwp9CgpmdW5jdGlvbiBtYWluKC4uLmFyZ3MpIHsKICBjb25zdCBiYXNlID0gcGF0aC5iYXNlbmFtZShzY3JpcHRBcmdzWzBdLCAnLmpzJykucmVwbGFjZSgvXC5bYS16XSokLywgJycpOwogIGNvbnN0IGNvbmZpZyA9IFJlYWRKU09OKGAuJHtiYXNlfS1jb25maWdgKSA/PyB7fTsKCiAgZ2xvYmFsVGhpcy5jb25zb2xlID0gbmV3IENvbnNvbGUoewogICAgaW5zcGVjdE9wdGlvbnM6IHsKICAgICAgY29tcGFjdDogMiwKICAgICAgZGVwdGg6IEluZmluaXR5LAogICAgICBjdXN0b21JbnNwZWN0OiB0cnVlLAogICAgICBtYXhBcnJheUxlbmd0aDogMjAwLAogICAgICBwcm90b0NoYWluOiB0cnVlCiAgICB9CiAgfSk7CiAgbGV0IHBhcmFtcyA9IGdldE9wdCgKICAgIHsKICAgICAgdmVyYm9zZTogW2ZhbHNlLCAoYSwgdikgPT4gKHYgfCAwKSArIDEsICd2J10sCiAgICAgIGxpc3RlbjogW2ZhbHNlLCBudWxsLCAnbCddLAogICAgICBjb25uZWN0OiBbZmFsc2UsIG51bGwsICdjJ10sCiAgICAgIGNsaWVudDogW2ZhbHNlLCBudWxsLCAnQyddLAogICAgICBzZXJ2ZXI6IFtmYWxzZSwgbnVsbCwgJ1MnXSwKICAgICAgZGVidWc6IFtmYWxzZSwgbnVsbCwgJ3gnXSwKICAgICAgdGxzOiBbZmFsc2UsIG51bGwsICd0J10sCiAgICAgICduby10bHMnOiBbZmFsc2UsICh2LCBwdiwgbykgPT4gKChvLnRscyA9IGZhbHNlKSwgdHJ1ZSksICdUJ10sCiAgICAgIGFkZHJlc3M6IFt0cnVlLCBudWxsLCAnYSddLAogICAgICBwb3J0OiBbdHJ1ZSwgbnVsbCwgJ3AnXSwKICAgICAgJ3NzbC1jZXJ0JzogW3RydWUsIG51bGxdLAogICAgICAnc3NsLXByaXZhdGUta2V5JzogW3RydWUsIG51bGxdLAogICAgICAnQCc6ICdhZGRyZXNzLHBvcnQnCiAgICB9LAogICAgYXJncwogICk7CiAgaWYocGFyYW1zWyduby10bHMnXSA9PT0gdHJ1ZSkgcGFyYW1zLnRscyA9IGZhbHNlOwoKICBjb25zdCB7IGFkZHJlc3MgPSAnMC4wLjAuMCcsIHBvcnQgPSA4OTk5LCAnc3NsLWNlcnQnOiBzc2xDZXJ0ID0gJ2xvY2FsaG9zdC5jcnQnLCAnc3NsLXByaXZhdGUta2V5Jzogc3NsUHJpdmF0ZUtleSA9ICdsb2NhbGhvc3Qua2V5JyB9ID0gcGFyYW1zOwogIGNvbnN0IGxpc3RlbiA9IHBhcmFtcy5jb25uZWN0ICYmICFwYXJhbXMubGlzdGVuID8gZmFsc2UgOiB0cnVlOwogIGNvbnN0IGlzX3NlcnZlciA9ICFwYXJhbXMuY2xpZW50IHx8IHBhcmFtcy5zZXJ2ZXI7CgogIGxldCBuYW1lID0gcHJvY2Vzcy5lbnZbJ05BTUUnXSA/PyBiYXNlOwoKICBuYW1lID0gbmFtZQogICAgLnJlcGxhY2UoLy4qXC8vLCAnJykKICAgIC5yZXBsYWNlKC8tL2csICcgJykKICAgIC5yZXBsYWNlKC9cLlteXC8uXSokLywgJycpOwoKICBsZXQgW3ByZWZpeCwgc3VmZml4XSA9IG5hbWUuc3BsaXQoJyAnKTsKCiAgbGV0IHJlcGwgPSBuZXcgUkVQTChgXHgxYlszODs1OzE2NW0ke3ByZWZpeH0gXHgxYlszODs1OzM5bSR7c3VmZml4fVx4MWJbMG1gLCBmYWxzZSk7CiAgY29uc3QgaGlzdGZpbGUgPSAnLnVwbG9hZC1zZXJ2ZXItaGlzdG9yeSc7CiAgcmVwbC5oaXN0b3J5TG9hZChoaXN0ZmlsZSwgZmFsc2UpOwogIHJlcGwubG9hZFNhdmVPcHRpb25zKCk7CiAgcmVwbC5kaXJlY3RpdmVzLmkgPSBbCiAgICAobW9kdWxlLCAuLi5hcmdzKSA9PiB7CiAgICAgIGNvbnNvbGUubG9nKCdhcmdzJywgYXJncyk7CiAgICAgIHRyeSB7CiAgICAgICAgcmV0dXJuIHJlcXVpcmUobW9kdWxlKTsKICAgICAgfSBjYXRjaChlKSB7fQogICAgICBpbXBvcnQobW9kdWxlKS50aGVuKG0gPT4gKGdsb2JhbFRoaXNbbW9kdWxlXSA9IG0pKTsKICAgIH0sCiAgICAnaW1wb3J0IG1vZHVsZScKICBdOwoKICBsZXQgeyBsb2cgfSA9IGNvbnNvbGU7CiAgcmVwbC5zaG93ID0gYXJnID0+ICh0eXBlb2YgYXJnID09ICdzdHJpbmcnID8gYXJnIDogaW5zcGVjdChhcmcsIGdsb2JhbFRoaXMuY29uc29sZS5vcHRpb25zKSArICdcbicpOwoKICByZXBsLmNsZWFudXAgPSAoKSA9PiB7CiAgICByZXBsLnJlYWRsaW5lUmVtb3ZlUHJvbXB0KCk7CiAgICBUZXJtaW5hbC5tb3VzZXRyYWNraW5nRGlzYWJsZSgpOwogICAgbGV0IG51bUxpbmVzID0gcmVwbC5oaXN0b3J5U2F2ZShoaXN0ZmlsZSk7CgogICAgcmVwbC5wcmludFN0YXR1cyhgRVhJVCAod3JvdGUgJHtudW1MaW5lc30gaGlzdG9yeSBlbnRyaWVzKWAsIGZhbHNlKTsKCiAgICBzdGQuZXhpdCgwKTsKICB9OwoKICBjb25zb2xlLm9wdGlvbnMgPSBPYmplY3QuYXNzaWduKAogICAgcmVwbC5pbnNwZWN0T3B0aW9ucywKICAgIHsgLi4uY29uc29sZS5vcHRpb25zIH0sCiAgICB7CiAgICAgIGRlcHRoOiBJbmZpbml0eSwKICAgICAgY29tcGFjdDogMQogICAgfQogICk7CiAgcmVwbC5pbnNwZWN0T3B0aW9ucy5oaWRlS2V5cy5wdXNoKFN5bWJvbC5pbnNwZWN0KTsKCiAgY29uc29sZS5sb2cgPSAoLi4uYXJncykgPT4gcmVwbC5wcmludFN0YXR1cygoKSA9PiBsb2coY29uc29sZS5jb25maWcocmVwbC5pbnNwZWN0T3B0aW9ucyksIC4uLmFyZ3MpKTsKCiAgbGV0IGxvZ0ZpbGUgPQogICAgewogICAgICBwdXRzKHMpIHsKICAgICAgICByZXBsLnByaW50U3RhdHVzKCgpID0+IHN0ZC5wdXRzKHMpKTsKICAgICAgfQogICAgfSA/PyBzdGQub3BlbigndXBsb2FkLXNlcnZlci5sb2cnLCAndysnKTsKCiAgbGV0IGNvbm5lY3Rpb25zID0gbmV3IFNldCgpOwogIGxldCBieV91dWlkID0gKGdsb2JhbFRoaXMuYnlfdXVpZCA9IHt9KTsKCiAgZnVuY3Rpb24gUGFyc2VCb2R5KGdlbikgewogICAgbGV0IHByb20sCiAgICAgIG8gPSAnJywKICAgICAgeDsKCiAgICB3aGlsZSgoeCA9IGdlbi5uZXh0KCkpKSB7CiAgICAgIGxldCB7IHZhbHVlLCBkb25lIH0gPSB4OwogICAgICBvICs9IHZhbHVlOwogICAgfQogICAgcmV0dXJuIG87CiAgfQoKICBjb25zdCBjcmVhdGVXUyA9IChnbG9iYWxUaGlzLmNyZWF0ZVdTID0gKHVybCwgY2FsbGJhY2tzKSA9PiB7CiAgICAvL2NvbnNvbGUubG9nKCdjcmVhdGVXUycsIHsgdXJsLCBjYWxsYmFja3MsIGxpc3RlbiB9KTsKCiAgICBnbG9iYWxUaGlzLm91dCA9IHMgPT4gbG9nRmlsZS5wdXRzKHMgKyAnXG4nKTsKCiAgICBsb2dMZXZlbCA9IHBhcmFtcy5kZWJ1ZyA/IExMTF9VU0VSIDogMCAvKnwgKCgocGFyYW1zLmRlYnVnID8gTExMX0lORk8gOiBMTExfV0FSTikgPDwgMSkgLSAxKSovOwogICAgY29uc29sZS5sb2coJ2NyZWF0ZVdTJywgeyBsb2dMZXZlbCB9LCBjcmVhdGVTZXJ2ZXIpOwoKICAgIHJldHVybiBjcmVhdGVTZXJ2ZXIoewogICAgICBibG9jazogZmFsc2UsCiAgICAgIHRsczogcGFyYW1zLnRscywKICAgICAgc3NsQ2VydCwKICAgICAgc3NsUHJpdmF0ZUtleSwKICAgICAgbWltZXR5cGVzOiBbCiAgICAgICAgWycuc3ZneicsICdhcHBsaWNhdGlvbi9nemlwJ10sCiAgICAgICAgWycubWpzJywgJ2FwcGxpY2F0aW9uL2phdmFzY3JpcHQnXSwKICAgICAgICBbJy5qcycsICdhcHBsaWNhdGlvbi9qYXZhc2NyaXB0J10sCiAgICAgICAgWycud2FzbScsICdhcHBsaWNhdGlvbi93YXNtJ10sCiAgICAgICAgWycuZW90JywgJ2FwcGxpY2F0aW9uL3ZuZC5tcy1mb250b2JqZWN0J10sCiAgICAgICAgWycubGliJywgJ2FwcGxpY2F0aW9uL3gtYXJjaGl2ZSddLAogICAgICAgIFsnLmJ6MicsICdhcHBsaWNhdGlvbi94LWJ6aXAyJ10sCiAgICAgICAgWycuZ2l0aWdub3JlJywgJ3RleHQvcGxhaW4nXSwKICAgICAgICBbJy5jbWFrZScsICd0ZXh0L3BsYWluJ10sCiAgICAgICAgWycuaGV4JywgJ3RleHQvcGxhaW4nXSwKICAgICAgICBbJy5tZCcsICd0ZXh0L3BsYWluJ10sCiAgICAgICAgWycucGJ4cHJvaicsICd0ZXh0L3BsYWluJ10sCiAgICAgICAgWycud2F0JywgJ3RleHQvcGxhaW4nXSwKICAgICAgICBbJy5jJywgJ3RleHQveC1jJ10sCiAgICAgICAgWycuaCcsICd0ZXh0L3gtYyddLAogICAgICAgIFsnLmNwcCcsICd0ZXh0L3gtYysrJ10sCiAgICAgICAgWycuaHBwJywgJ3RleHQveC1jKysnXSwKICAgICAgICBbJy5maWx0ZXJzJywgJ3RleHQveG1sJ10sCiAgICAgICAgWycucGxpc3QnLCAndGV4dC94bWwnXSwKICAgICAgICBbJy5zdG9yeWJvYXJkJywgJ3RleHQveG1sJ10sCiAgICAgICAgWycudmN4cHJvaicsICd0ZXh0L3htbCddLAogICAgICAgIFsnLmJhdCcsICd0ZXh0L3gtbXNkb3MtYmF0Y2gnXSwKICAgICAgICBbJy5tbScsICd0ZXh0L3gtb2JqZWN0aXZlLWMnXSwKICAgICAgICBbJy5tJywgJ3RleHQveC1vYmplY3RpdmUtYyddLAogICAgICAgIFsnLnNoJywgJ3RleHQveC1zaGVsbHNjcmlwdCddCiAgICAgIF0sCiAgICAgIG1vdW50czogWwogICAgICAgIFsnLycsICcuJywgJ2RpcmVjdG9yeS5odG1sJ10sCiAgICAgICAgWycvZ2V0JywgJy4vdXBsb2FkcycsICcnXSwKICAgICAgICBbJy93YXJtY2F0JywgJ2h0dHBzOi8vd2FybWNhdC5jb20vJywgJ2luZGV4Lmh0bWwnXSwKICAgICAgICBbJy9kaXN0cmVsZWMnLCAnaHR0cHM6Ly93d3cuZGlzdHJlbGVjLmNoLycsICdsb2dpbiddLAogICAgICAgIFsnL2hhc3VyYScsICdodHRwOi8vd2lsZC1iZWF1dHkuaGVyb2t1YXBwLmNvbS92MS8nLCAnZ3JhcGhxbCddLAogICAgICAgIC8vIFsnL3VwbG9hZCcsICdsd3MtZGVhZGRyb3AnLCBudWxsLCAnbHdzLWRlYWRkcm9wJ10sCiAgICAgICAgYXN5bmMgZnVuY3Rpb24qIHRlc3QocmVxLCByZXNwKSB7CiAgICAgICAgICByZXNwLnR5cGUgPSAndGV4dC9wbGFpbic7CgogICAgICAgICAgY29uc29sZS5sb2coJyp0ZXN0JywgeyByZXEsIHJlc3AgfSk7CgogICAgICAgICAgbGV0IGJvZHlTdHIgPSAnJzsKICAgICAgICAgIGlmKHJlcS5tZXRob2QgPT0gJ1BPU1QnKSB7CiAgICAgICAgICAgIGZvciBhd2FpdChsZXQgY2h1bmsgb2YgYXdhaXQgcmVxLmJvZHkpIHsKICAgICAgICAgICAgICBjb25zb2xlLmxvZygnY2h1bmsnLCBjaHVuayk7CiAgICAgICAgICAgICAgYm9keVN0ciArPSB0b1N0cmluZyhjaHVuayk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGNvbnNvbGUubG9nKCdib2R5U3RyJywgYm9keVN0cik7CgogICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IDEwOyBpKyspIHsKICAgICAgICAgICAgeWllbGQgYGxpbmUgIyR7aX1cbmA7CiAgICAgICAgICAgIGF3YWl0IHdhaXRGb3IoKDEwIC0gaSArIDEpICogMTApOwogICAgICAgICAgfQoKICAgICAgICAgIHlpZWxkICdkb25lISc7CiAgICAgICAgfSwKICAgICAgICBmdW5jdGlvbiBwcm94eShyZXEsIHJlc3ApIHsKICAgICAgICAgIGNvbnNvbGUubG9nKCdwcm94eScsIHsgcmVxLCByZXNwIH0pOwogICAgICAgICAgY29uc3QgeyB1cmwsIG1ldGhvZCwgaGVhZGVycyB9ID0gcmVxOwogICAgICAgICAgY29uc29sZS5sb2coJ3Byb3h5JywgeyB1cmwsIG1ldGhvZCwgaGVhZGVycyB9KTsKICAgICAgICAgIGNvbnN0IHsgc3RhdHVzLCBvaywgdHlwZSB9ID0gcmVzcDsKCiAgICAgICAgICBjb25zb2xlLmxvZygncHJveHknLCB7IHN0YXR1cywgb2ssIHVybCwgdHlwZSB9KTsKICAgICAgICB9LAogICAgICAgIGZ1bmN0aW9uKiBjb25maWcocmVxLCByZXNwKSB7CiAgICAgICAgICBjb25zb2xlLmxvZygnKmNvbmZpZycsIHsgcmVxLCByZXNwIH0pOwogICAgICAgICAgeWllbGQgJ3t9JzsKICAgICAgICB9LAogICAgICAgIGZ1bmN0aW9uKiBmaWxlKHJlcSwgcmVzcCkgewogICAgICAgICAgbGV0IHsgYm9keSwgaGVhZGVycywganNvbiwgdXJsIH0gPSByZXE7CiAgICAgICAgICBsZXQgeyBxdWVyeSB9ID0gdXJsOwogICAgICAgICAgY29uc29sZS5sb2coJypmaWxlJywgeyByZXEsIHJlc3AgfSk7CgogICAgICAgICAgaWYodHlwZW9mIGJvZHkgPT0gJ3N0cmluZycpCiAgICAgICAgICAgIHF1ZXJ5ID0gewogICAgICAgICAgICAgIC4uLnF1ZXJ5LAogICAgICAgICAgICAgIC4uLihKU09OLnBhcnNlKGJvZHkpID8/IHt9KQogICAgICAgICAgICB9OwoKICAgICAgICAgIGxldCB7IGFjdGlvbiA9ICdsaXN0JywgY2hhcnNldCA9ICd1dGYtOCcsIGJpbmFyeSA9IGZhbHNlLCBmaWxlLCBjb250ZW50cyB9ID0gcXVlcnkgPz8ge307CgogICAgICAgICAgaWYoL15cL2ZpbGVcLy4vLnRlc3QodXJsLnBhdGgpKSB7CiAgICAgICAgICAgIGZpbGUgPSB1cmwucGF0aC5yZXBsYWNlKC9eXC9maWxlXC8vLCAnJyk7CiAgICAgICAgICAgIGFjdGlvbiA9ICdsb2FkJzsKICAgICAgICAgIH0KICAgICAgICAgIGNvbnNvbGUubG9nKCcqZmlsZScsIHsgcXVlcnksIGJvZHksIGZpbGUgfSk7CgogICAgICAgICAgY29uc29sZS5sb2coYCpmaWxlYCwgeyBhY3Rpb24sIGZpbGUgfSk7CgogICAgICAgICAgaWYoZmlsZSkgewogICAgICAgICAgICBmaWxlID0gcGF0aC5hYnNvbHV0ZShmaWxlKTsKICAgICAgICAgICAgZmlsZSA9IHBhdGgubm9ybWFsaXplKGZpbGUpOwogICAgICAgICAgICBjb25zb2xlLmxvZygKICAgICAgICAgICAgICBgYWxsb3dlZERpcnM6YCwKICAgICAgICAgICAgICBhbGxvd2VkRGlycyAvLy5tYXAoZGlyID0+IHBhdGgubm9ybWFsaXplKGRpcikpCiAgICAgICAgICAgICk7CgogICAgICAgICAgICBsZXQgYWxsb3dlZCA9IFsuLi5hbGxvd2VkRGlycy52YWx1ZXMoKV0ubWFwKHBhdGguYWJzb2x1dGUpLnNvbWUoZGlyID0+IGlzaW4oZmlsZSwgZGlyKSk7CgogICAgICAgICAgICBpZighYWxsb3dlZCkgewogICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBOb3QgYWxsb3dlZDogJyR7ZmlsZX0nYCk7CiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBOb3QgYWxsb3dlZDogJyR7ZmlsZX0nYCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICBzd2l0Y2ggKGFjdGlvbikgewogICAgICAgICAgICBjYXNlICdsb2FkJzoKICAgICAgICAgICAgICBsZXQgbWltZSA9IEdldE1pbWUoZmlsZSk7CgogICAgICAgICAgICAgIGxldCBkYXRhID0gUmVhZEZpbGUoZmlsZSwgdHJ1ZSk7CgogICAgICAgICAgICAgIGNvbnNvbGUubG9nKGAqZmlsZS5sb2FkYCwgeyBkYXRhLCBtaW1lIH0pOwoKICAgICAgICAgICAgICB5aWVsZCBkYXRhOwoKICAgICAgICAgICAgICAvKiAgICAgICAgICAgICAgaWYocmVzcCkgewogICAgICAgICAgICAgICAgcmVzcC50eXBlID0gbWltZTsKICAgICAgICAgICAgICAgIHJlc3AuaGVhZGVycyA9IHsgJ2NvbnRlbnQtdHlwZSc6IG1pbWUgfTsKICAgICAgICAgICAgICAgIHJlc3AuYm9keSA9IGRhdGE7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHlpZWxkIG5ldyBSZXNwb25zZShkYXRhLCB7IHR5cGU6IG1pbWUsIGhlYWRlcnM6IHsgJ2NvbnRlbnQtdHlwZSc6IG1pbWUgfSB9KTsKICAgICAgICAgICAgICB9Ki8KCiAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICBjYXNlICdzYXZlJzoKICAgICAgICAgICAgICBXcml0ZUZpbGUoZmlsZSwgY29udGVudHMpOwogICAgICAgICAgICAgIHlpZWxkICdkb25lIVxyXG4nOwogICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgY2FzZSAnbGlzdCc6CiAgICAgICAgICAgICAgY29uc3QgeyBkaXIgPSAndXBsb2FkcycsIG1hc2sgPSBUWVBFX01BU0ssIGZpbHRlciA9ICcqJyB9ID0gcXVlcnkgPz8ge307CiAgICAgICAgICAgICAgY29uc3QgZCA9IHBhdGguYWJzb2x1dGUoZGlyKTsKICAgICAgICAgICAgICBjb25zdCBhbGxvd2VkID0gcGF0aC5pc1JlbGF0aXZlKGRpcikgJiYgWy4uLmFsbG93ZWREaXJzLnZhbHVlcygpXS5tYXAocGF0aC5hYnNvbHV0ZSkuc29tZSh4ID0+IGlzaW4oZCwgeCkpOwoKICAgICAgICAgICAgICBpZighYWxsb3dlZCkgewogICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ05PVCBBTExPV0VEJyk7CgogICAgICAgICAgICAgICAgaWYocmVzcCkgcmVzcC5zdGF0dXMgPSA0MDM7CgogICAgICAgICAgICAgICAgeWllbGQgJ0VSUk9SXHJcbic7CgogICAgICAgICAgICAgICAgLy95aWVsZCBnbG9iYWxUaGlzLnJlc3AgPSBuZXcgUmVzcG9uc2UoJ0VSUk9SJywgeyBzdGF0dXM6IDQwMyB9KTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgY29uc3QgaXQgPSBuZXcgRGlyZWN0b3J5KGRpciwgQk9USCwgK21hc2spOwoKICAgICAgICAgICAgICBmb3IobGV0IFtmaWxlLCB0eXBlXSBvZiBpdCkgaWYoMCA9PSBwYXRoLmZubWF0Y2goZmlsdGVyLCBmaWxlKSkgeWllbGQgYCR7ZmlsZX0ke3R5cGUgPT0gVFlQRV9ESVIgPyAnLycgOiAnJ31cbmA7CgogICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBsZXQgY29tcG9uZW50ID0gaCgKICAgICAgICAgICAgICAgIEhUTUxQYWdlLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICB0aXRsZTogJ0ZpbGUgbGlzdCcsCiAgICAgICAgICAgICAgICAgIHN0eWxlOiBgYm9keSwgKiB7IGZvbnQtZmFtaWx5OiBNaXNjRml4ZWRTQzYxMyxGaXhlZCwiQ291cmllciBOZXciOyB9YCwKICAgICAgICAgICAgICAgICAgc2NyaXB0czogWydmaWxlbGlzdC5qcyddCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBoKEZpbHRlckZvcm0sIHt9LCBbXSksCiAgICAgICAgICAgICAgICAgIGgoRmlsZVRhYmxlLCB7CiAgICAgICAgICAgICAgICAgICAgZmlsZXM6IGZpbGVzLm1hcChmaWxlID0+ICh7CiAgICAgICAgICAgICAgICAgICAgICBmaWxlLAogICAgICAgICAgICAgICAgICAgICAgc3RhdDogZnMuc3RhdFN5bmMoZmlsZSkKICAgICAgICAgICAgICAgICAgICB9KSkKICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICApOwogICAgICAgICAgICAgIHlpZWxkIHJlbmRlclRvU3RyaW5nKGNvbXBvbmVudCk7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgeWllbGQgZmlsZXMuam9pbignXG4nKTsKCiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyBzdWNoIGNvbW1hbmQ6ICcke2FjdGlvbn0nYCk7CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAvKiBmdW5jdGlvbiogdXBsb2FkcyhyZXEsIHJlc3ApIHsKICAgICAgICAgIGlmKHJlc3AgJiYgcmVzcD8udHlwZSkgcmVzcC50eXBlID0gJ2FwcGxpY2F0aW9uL2pzb24nOwoKICAgICAgICAgIGNvbnNvbGUubG9nKCd1cGxvYWRzJywgcmVxLCByZXNwKTsKICAgICAgICAgIGNvbnN0IHsgbGltaXQgPSAnMCwxMDAnLCBwcmV0dHkgPSAwIH0gPSByZXEudXJsLnF1ZXJ5ID8/IHt9OwogICAgICAgICAgbGV0IFtzdGFydCwgZW5kXSA9IGxpbWl0LnNwbGl0KC8sL2cpLm1hcChzID0+ICtzKTsKICAgICAgICAgIGNvbnNvbGUubG9nKCd1cGxvYWRzJywgeyBzdGFydCwgZW5kIH0pOwogICAgICAgICAgbGV0IHJlc3VsdCA9IFtdLAogICAgICAgICAgICBlbnRyaWVzID0gZ2xvYigndXBsb2Fkcy8qLmpzb24nKTsKICAgICAgICAgIGZvcihsZXQgZW50cnkgb2YgKEFycmF5LmlzQXJyYXkoZW50cmllcykgPyBlbnRyaWVzIDogW10pLnNsaWNlKHN0YXJ0LCBlbmQpKSB7CiAgICAgICAgICAgIGxldCBqc29uID0gUmVhZEpTT04oZW50cnkpOwogICAgICAgICAgICBjb25zdCB7IHN0b3JhZ2UsIGZpbGVuYW1lLCB1cGxvYWRlZCwgYWRkcmVzcywgZXhpZiwgdGh1bWJuYWlsIH0gPSBqc29uOwogICAgICAgICAgICBqc29uLnNpemUgPSBmcy5zaXplU3luYyhzdG9yYWdlKTsKICAgICAgICAgICAgcmVzdWx0LnB1c2goanNvbik7CiAgICAgICAgICB9CgogICAgICAgICAgY29uc29sZS5sb2coJ3VwbG9hZHMnLCBjb25zb2xlLmNvbmZpZyh7IGRlcHRoOiAxLCBjb21wYWN0OiAyLCBtYXhBcnJheUxlbmd0aDogMTAgfSksIHJlc3VsdCk7CiAgICAgICAgICB5aWVsZCBKU09OLnN0cmluZ2lmeShyZXN1bHQsIC4uLigrcHJldHR5ID8gW251bGwsIDJdIDogW10pKTsKICAgICAgICB9LCovCiAgICAgICAgYXN5bmMgZnVuY3Rpb24qIGZpbGVzKHJlcSwgcmVzcCkgewogICAgICAgICAgY29uc3QgeyB1cmwsIG1ldGhvZCwgYm9keSB9ID0gcmVxOwogICAgICAgICAgY29uc29sZS5sb2coJypmaWxlcycsIHsgYm9keSB9KTsKICAgICAgICAgIGNvbnNvbGUubG9nKCcqZmlsZXMgcXVlcnkgPScsIHVybC5xdWVyeSk7CiAgICAgICAgICBjb25zdCB7IGZpbHRlciA9ICcqJywgcm9vdCwgdHlwZSA9IFRZUEVfRElSIHwgVFlQRV9SRUcgfCBUWVBFX0xOSywgbGltaXQgPSAnMCcgfSA9IHVybC5xdWVyeSA/PyB7fTsKCiAgICAgICAgICBjb25zb2xlLmxvZygnKmZpbGVzJywgeyByb290LCBmaWx0ZXIsIHR5cGUgfSk7CgogICAgICAgICAgY29uc3QgW29mZnNldCA9IDAsIHNpemUgPSBJbmZpbml0eV0gPSBsaW1pdC5zcGxpdCgnLCcpLm1hcChuID0+ICtuKTsKCiAgICAgICAgICBjb25zb2xlLmxvZygnKmZpbGVzJywgeyBvZmZzZXQsIHNpemUgfSk7CiAgICAgICAgICBsZXQgaSA9IDA7CiAgICAgICAgICBsZXQgZiA9IE1hdGNoZXIoZmlsdGVyKTsKICAgICAgICAgIGlmKCFyb290KSB7CiAgICAgICAgICAgIGZvcihsZXQgbmFtZSBvZiBhbGxvd2VkRGlycy5rZXlzKCkuZmlsdGVyKGYpKSB5aWVsZCBuYW1lICsgJy9cclxuJzsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGZvcihsZXQgW2tleSwgdmFsdWVdIG9mIGFsbG93ZWREaXJzLmVudHJpZXMoKS5maWx0ZXIoS2V5T3JWYWx1ZU1hdGNoZXIocm9vdCkpKSB7CiAgICAgICAgICAgICAgbGV0IGRpciA9IG5ldyBEaXJlY3RvcnkodmFsdWUsIEJPVEgsICt0eXBlKTsKICAgICAgICAgICAgICB5aWVsZCBrZXkgKyAnOlxyXG4nOwoKICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZGlyJywgZGlyLCBrZXlzKGRpciwgMCwgMiksIGRpciArICcnKTsKCiAgICAgICAgICAgICAgZm9yKGxldCBbbmFtZSwgdHlwZV0gb2YgZGlyKSBpZihmKG5hbWUpKSB5aWVsZCBuYW1lICsgKCt0eXBlID09IFRZUEVfRElSID8gJy8nIDogJycpICsgJ1xyXG4nOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBjb25zb2xlLmxvZygnKmZpbGVzJywgeyBpLCBmIH0pOwogICAgICAgIH0sCiAgICAgICAgZnVuY3Rpb24qIGZpbGVzMihyZXEsIHJlc3ApIHsKICAgICAgICAgIGxldCB7IGJvZHksIGhlYWRlcnMsIGpzb24sIHVybCB9ID0gcmVxOwogICAgICAgICAgbGV0IHsgcXVlcnkgfSA9IHVybDsKICAgICAgICAgIGRlZmluZShnbG9iYWxUaGlzLCB7IGZpbGVzUmVxdWVzdDogeyByZXEsIHJlc3AsIGJvZHksIHF1ZXJ5IH0gfSk7CiAgICAgICAgICBjb25zb2xlLmxvZygnKmZpbGVzJywgeyByZXEsIHJlc3AsIGJvZHksIHF1ZXJ5IH0pOwogICAgICAgICAgY29uc3QgZGF0YSA9IHF1ZXJ5ID8/IHt9OwogICAgICAgICAgLy8gWFhYOiByZXNwLnR5cGUgPSAnYXBwbGljYXRpb24vanNvbic7CiAgICAgICAgICBsZXQgeyBkaXJzID0gZGVmYXVsdERpcnMsIGZpbHRlciA9ICdbXi5dLionID8/ICcuKGJyZHxzY2h8R1tBLVpdW0EtWl0pJCcsIHZlcmJvc2UgPSBmYWxzZSwgb2JqZWN0cyA9IHRydWUsIGtleSA9ICdtdGltZScsIGxpbWl0ID0gbnVsbCwgZmxhdCA9IGZhbHNlIH0gPSBkYXRhID8/IHt9OwogICAgICAgICAgbGV0IHJlc3VsdHMgPSBbXTsKICAgICAgICAgIGZvcihsZXQgZGlyIG9mIGRpcnMpIHsKICAgICAgICAgICAgbGV0IHN0LAogICAgICAgICAgICAgIG5hbWVzID0gW107CiAgICAgICAgICAgIGlmKEFycmF5LmlzQXJyYXkoZGlyKSkgewogICAgICAgICAgICAgIGxldCBbLCByZV0gPSBkaXI7CiAgICAgICAgICAgICAgbGV0IGFic2RpciA9IHBhdGgucmVhbHBhdGgoZGlyWzBdKTsKICAgICAgICAgICAgICBuYW1lcyA9IFsuLi5SZWN1cnNpdmVEaXJJdGVyYXRvcihhYnNkaXIsIG4gPT4gcmUudGVzdChuKSldOwogICAgICAgICAgICAgIGRpciA9IHBhdGgucmVsYXRpdmUoYWJzZGlyLCBwYXRoLmdldGN3ZCgpKTsKICAgICAgICAgICAgfSBlbHNlIGlmKChzdCA9IGZzLnN0YXRTeW5jKGRpcikpICYmIHN0LmlzRGlyZWN0b3J5KCkpIHsKICAgICAgICAgICAgICBsZXQgYWJzZGlyID0gcGF0aC5yZWFscGF0aChkaXIpOwogICAgICAgICAgICAgIGxldCBjb21wb25lbnRzID0gYWJzZGlyLnNwbGl0KHBhdGguc2VwKTsKICAgICAgICAgICAgICBpZihjb21wb25lbnRzLmxlbmd0aCAmJiBjb21wb25lbnRzWzBdID09PSAnJykgY29tcG9uZW50cy5zaGlmdCgpOwogICAgICAgICAgICAgIGlmKGNvbXBvbmVudHMubGVuZ3RoIDwgMiB8fCBjb21wb25lbnRzWzBdICE9ICdob21lJykgdGhyb3cgbmV3IEVycm9yKGBBY2Nlc3MgZXJyb3JgKTsKICAgICAgICAgICAgICBuYW1lcyA9IGZzLnJlYWRkaXJTeW5jKGFic2RpcikgPz8gW107CiAgICAgICAgICAgICAgZGlyID0gcGF0aC5yZWxhdGl2ZShhYnNkaXIsIHBhdGguZ2V0Y3dkKCkpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIG5hbWVzID0gZ2xvYihkaXIsIEdMT0JfQlJBQ0UpOwogICAgICAgICAgICAgIGlmKCFBcnJheS5pc0FycmF5KG5hbWVzKSkgbmFtZXMgPSBbXTsKICAgICAgICAgICAgICBsZXQgYSA9IHBhdGgudG9BcnJheShkaXIpOwogICAgICAgICAgICAgIGxldCBpID0gYS5maW5kSW5kZXgobiA9PiAvWyp7fV0vLnRlc3QobikpOwogICAgICAgICAgICAgIGRpciA9IHBhdGguc2xpY2UoZGlyLCAwLCBpKTsKICAgICAgICAgICAgICBuYW1lcyA9IG5hbWVzLm1hcChuID0+IG4uc2xpY2UoZGlyLmxlbmd0aCArIDEpKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZighQXJyYXkuaXNBcnJheShuYW1lcykpIGNvbnRpbnVlOwogICAgICAgICAgICBuYW1lcyA9IG5hbWVzLnNvcnQoKGEsIGIpID0+ICcnICsgYiA8ICcnICsgYSk7CiAgICAgICAgICAgIGlmKGZpbHRlcikgewogICAgICAgICAgICAgIGNvbnN0IHJlID0gbmV3IFJlZ0V4cChmaWx0ZXIsICdnaScpOwogICAgICAgICAgICAgIG5hbWVzID0gbmFtZXMuZmlsdGVyKG5hbWUgPT4gcmUudGVzdChuYW1lKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYobGltaXQpIHsKICAgICAgICAgICAgICBsZXQgW29mZnNldCA9IDBdID0gbGltaXQ7CiAgICAgICAgICAgICAgbGV0IFssIGxlbmd0aCA9IG5hbWVzLmxlbmd0aCAtIHN0YXJ0XSA9IGxpbWl0OwogICAgICAgICAgICAgIG5hbWVzID0gbmFtZXMuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyBsZW5ndGgpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGxldCBlbnRyaWVzID0gbmFtZXMKICAgICAgICAgICAgICAubWFwKGZpbGUgPT4gKGZzLmV4aXN0c1N5bmMoYCR7ZGlyfS8ke2ZpbGV9YCkgPyBgJHtkaXJ9LyR7ZmlsZX1gIDogZmlsZSkpCiAgICAgICAgICAgICAgLm1hcChmaWxlID0+IFtmaWxlLCBwYXRoLnJlbGF0aXZlKGZpbGUsIHBhdGguZ2V0Y3dkKCkpXSkKICAgICAgICAgICAgICAubWFwKChbZmlsZSwgcmVsXSkgPT4gW2ZpbGUsIGZzLnN0YXRTeW5jKHJlbCldKTsKICAgICAgICAgICAgZW50cmllcyA9IGVudHJpZXMucmVkdWNlKChhY2MsIFtmaWxlLCBzdF0pID0+IHsKICAgICAgICAgICAgICBsZXQgbmFtZSA9IGZpbGUgKyAoc3QgJiYgc3QuaXNEaXJlY3RvcnkoKSA/ICcvJyA6ICcnKTsKICAgICAgICAgICAgICBsZXQgb2JqID0gewogICAgICAgICAgICAgICAgbmFtZQogICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgYWNjLnB1c2goWwogICAgICAgICAgICAgICAgbmFtZSwKICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oCiAgICAgICAgICAgICAgICAgIG9iaiwKICAgICAgICAgICAgICAgICAgc3QKICAgICAgICAgICAgICAgICAgICA/IHsKICAgICAgICAgICAgICAgICAgICAgICAgbXRpbWU6IHRvVW5peFRpbWUoc3QubXRpbWUpLAogICAgICAgICAgICAgICAgICAgICAgICB0aW1lOiB0b1VuaXhUaW1lKHN0LmN0aW1lKSwKICAgICAgICAgICAgICAgICAgICAgICAgbW9kZTogYDAkeyhzdC5tb2RlICYgMHgwOWZmKS50b1N0cmluZyg4KX1gLAogICAgICAgICAgICAgICAgICAgICAgICBzaXplOiBzdC5zaXplCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgOiB7fQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pOwogICAgICAgICAgICAgIHJldHVybiBhY2M7CiAgICAgICAgICAgIH0sIFtdKTsKICAgICAgICAgICAgaWYoZW50cmllcy5sZW5ndGgpIHsKICAgICAgICAgICAgICBsZXQgY21wID0gewogICAgICAgICAgICAgICAgc3RyaW5nKGEsIGIpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIGFbMV1ba2V5XS5sb2NhbGVDb21wYXJlKGJbMV1ba2V5XSk7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgbnVtYmVyKGEsIGIpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIGFbMV1ba2V5XSAtIGJbMV1ba2V5XTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9W3R5cGVvZiBlbnRyaWVzWzBdWzFdW2tleV1dOwogICAgICAgICAgICAgIGVudHJpZXMgPSBlbnRyaWVzLnNvcnQoY21wKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBuYW1lcyA9IGVudHJpZXMubWFwKChbbmFtZSwgb2JqXSkgPT4gKG9iamVjdHMgPyBvYmogOiBuYW1lKSk7CiAgICAgICAgICAgIGlmKG5hbWVzLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICBpZihmbGF0KSBuYW1lcy5tYXAoKHsgbmFtZSB9KSA9PiByZXN1bHRzLnB1c2goeyBuYW1lOiBwYXRoLm5vcm1hbGl6ZShwYXRoLmpvaW4oZGlyLCBuYW1lKSkgfSkpOwogICAgICAgICAgICAgIGVsc2UgcmVzdWx0cy5wdXNoKHsgZGlyLCBuYW1lcyB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgY29uc3QgcyA9IEpTT04uc3RyaW5naWZ5KC4uLltyZXN1bHRzLCAuLi4odmVyYm9zZSA/IFtudWxsLCAyXSA6IFtdKV0pOwogICAgICAgICAgY29uc29sZS5sb2coJ2ZpbGVzMiByZXBseSBsZW5ndGg6Jywgcy5sZW5ndGgpOwogICAgICAgICAgY29uc29sZS5sb2coJ2ZpbGVzMiByZXBseTonLCBzLnNsaWNlKC0xMDApKTsKICAgICAgICAgIHlpZWxkIHM7CiAgICAgICAgfQogICAgICBdLAogICAgICAuLi51cmwsCgogICAgICAuLi5jYWxsYmFja3MsCiAgICAgIG9uQ29ubmVjdCh3cywgcmVxKSB7CiAgICAgICAgY29uc3QgeyBwZWVyLCBhZGRyZXNzLCBwb3J0LCBwcm90b2NvbCwgdGxzIH0gPSB3czsKCiAgICAgICAgY29uc29sZS5sb2coJ1x4MWJbMzg7NTszM21vbkNvbm5lY3RceDFiWzBtJywgeyBhZGRyZXNzLCBwb3J0LCBwcm90b2NvbCwgdGxzIH0pOwogICAgICAgIGRlZmluZSh3cywgewogICAgICAgICAgc2VuZENvbW1hbmQoZGF0YSkgewogICAgICAgICAgICBpZighaXNBcnJheUJ1ZmZlcihkYXRhKSAvKiYmIGlzT2JqZWN0KGRhdGEpKi8pIGRhdGEgPSBKU09OLnN0cmluZ2lmeShkYXRhKTsKCiAgICAgICAgICAgIHJldHVybiB0aGlzLnNlbmQoZGF0YSk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CgogICAgICAgIGlmKCF3cy51dWlkKSB7CiAgICAgICAgICBsZXQgZGF0YSA9ICh3cy51dWlkID0gTWFrZVVVSUQoKSk7CgogICAgICAgICAgd3Muc2VuZENvbW1hbmQoeyB0eXBlOiAndXVpZCcsIGRhdGEgfSk7CiAgICAgICAgICBieV91dWlkW2RhdGFdID0gd3M7CiAgICAgICAgfQogICAgICAgIGNvbm5lY3Rpb25zLmFkZCh3cyk7CgogICAgICAgIGlmKGNhbGxiYWNrcy5vbkNvbm5lY3QpIHJldHVybiBjYWxsYmFja3Mub25Db25uZWN0KHdzLCByZXEpOwogICAgICB9LAogICAgICBvbkNsb3NlKHdzLGNvZGUsIHJlYXNvbikgewogICAgICAgICAgICBjb25zb2xlLmxvZygnXHgxYlsxOzMxbW9uQ2xvc2VceDFiWzBtJywgeyBjb2RlLHJlYXNvbn0pOwogICAgICAgICAgICAKICAgIGNvbm5lY3Rpb25zLmRlbGV0ZSh3cyk7CgogICAgICAgIHJldHVybiBjYWxsYmFja3Mub25DbG9zZSh3cywgcmVhc29uKTsKICAgICAgfSwKCiAgICAgIG9uUmVxdWVzdChyZXEsIHJlc3ApIHsKICAgICAgICBpZihERUJVRykgY29uc29sZS5sb2coJ29uUmVxdWVzdCcsIGNvbnNvbGUuY29uZmlnKHsgY29tcGFjdDogMCB9KSwgcmVxLCByZXNwKTsKICAgICAgICBjb25zdCB3cyA9IHRoaXM7CgogICAgICAgIGNvbnN0IHsgYWRkcmVzcyB9ID0gd3M7CgogICAgICAgIGRlZmluZShnbG9iYWxUaGlzLCB7IHJlcSwgcmVzcCwgYWRkcmVzcyB9KTsKCiAgICAgICAgY29uc3QgeyBtZXRob2QsIGhlYWRlcnMgfSA9IHJlcTsKICAgICAgICBpZihyZXNwICYmIHJlc3AuaGVhZGVycykgcmVzcC5oZWFkZXJzWydTZXJ2ZXInXSA9ICd1cGxvYWQtc2VydmVyJzsKCiAgICAgICAgaWYoREVCVUcpIGNvbnNvbGUubG9nKCdvblJlcXVlc3QnLCB7IGhlYWRlcnM6IE9iamVjdC5mcm9tRW50cmllcyhoZWFkZXJzLmVudHJpZXMoKSkgfSk7CgogICAgICAgIC8vCiAgICAgICAgaWYoZ2xvYmFsVGhpcy5vblJlcXVlc3QpIGdsb2JhbFRoaXMub25SZXF1ZXN0KHJlcSwgcmVzcCk7CgogICAgICAgIGlmKChyZXEudXJsLnBhdGggPz8gJycpLmVuZHNXaXRoKCdmaWxlcycpKSB7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgICAvL3Jlc3AudHlwZSA9ICdhcHBsaWNhdGlvbi9qc29uJzsKICAgICAgICB9IGVsc2UgaWYocmVxLm1ldGhvZCAhPSAnR0VUJyAmJiAocmVxLmhlYWRlcnMuZ2V0KCdjb250ZW50LXR5cGUnKSA9PSAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyB8fCAocmVxLmhlYWRlcnMuZ2V0KCdjb250ZW50LXR5cGUnKSA/PyAnJykuc3RhcnRzV2l0aCgnbXVsdGlwYXJ0L2Zvcm0tZGF0YScpKSkgewogICAgICAgICAgbGV0IGZwLAogICAgICAgICAgICBoYXNoLAogICAgICAgICAgICB0bXBuYW0sCiAgICAgICAgICAgIGV4dCwKICAgICAgICAgICAgcHJvZ3Jlc3MgPSAwOwogICAgICAgICAgaWYocmVxLnVybC5wYXRoLmVuZHNXaXRoKCd1cGxvYWQnKSkgcmVzcC5zdGF0dXMgPSAyMDA7CgogICAgICAgICAgcmVzcC5oZWFkZXJzWydjb250ZW50LXR5cGUnXSA9ICd0ZXh0L3Jhdyc7CgogICAgICAgICAgY29uc29sZS5sb2cocmVxLm1ldGhvZCwgaGVhZGVycyk7CgogICAgICAgICAgY29uc3Qgd3MgPSAoZ2xvYmFsVGhpcy53cyA9IHRoaXMpOwogICAgICAgICAgZnAgPSBuZXcgRm9ybVBhcnNlcih3cywgWydmaWxlcycsICd1dWlkJ10sIHsKICAgICAgICAgICAgY2h1bmtTaXplOiA4MTkyIC8qKiAyNTYqLywKICAgICAgICAgICAgb25PcGVuKG5hbWUsIGZpbGVuYW1lKSB7CiAgICAgICAgICAgICAgY29uc29sZS5sb2coYG9uT3Blbigke25hbWV9LCAke2ZpbGVuYW1lfSlgKTsKICAgICAgICAgICAgICBpZih0aGlzLmZpbGUpIHsKICAgICAgICAgICAgICAgIHRoaXMub25jbG9zZS5jYWxsKHRoaXMsIG5hbWUpOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgdGhpcy5uYW1lID0gbmFtZTsKICAgICAgICAgICAgICB0aGlzLmZpbGVuYW1lID0gZmlsZW5hbWU7CiAgICAgICAgICAgICAgZXh0ID0gcGF0aC5leHRuYW1lKGZpbGVuYW1lKS50b0xvd2VyQ2FzZSgpOwoKICAgICAgICAgICAgICB0aGlzLmZpbGUgPSBmcy5vcGVuU3luYygodGhpcy50ZW1wID0gJ3VwbG9hZHMvJyArICh0bXBuYW0gPSByYW5kU3RyKDIwKSArICcudG1wJykpLCAndysnLCAwbzY0NCk7CiAgICAgICAgICAgICAgaGFzaCA9IG5ldyBIYXNoKEhhc2guVFlQRV9TSEExKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgb25Db250ZW50KG5hbWUsIGRhdGEpIHsKICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhgb25Db250ZW50KCR7dGhpcy5maWxlbmFtZX0pYCxkYXRhLmJ5dGVMZW5ndGgpOwogICAgICAgICAgICAgIHByb2dyZXNzICs9IGRhdGEuYnl0ZUxlbmd0aDsKCiAgICAgICAgICAgICAgbGV0IHdzMiA9IGJ5X3V1aWRbd3MudXVpZCA/PyB0aGlzLnV1aWRdOwoKICAgICAgICAgICAgICBmcy53cml0ZVN5bmModGhpcy5maWxlLCBkYXRhKTsKICAgICAgICAgICAgICBoYXNoLnVwZGF0ZShkYXRhKTsKICAgICAgICAgICAgICBpZih3czIpCiAgICAgICAgICAgICAgICB3czIuc2VuZENvbW1hbmQoewogICAgICAgICAgICAgICAgICB0eXBlOiAncHJvZ3Jlc3MnLAogICAgICAgICAgICAgICAgICBkb25lOiBwcm9ncmVzcywKICAgICAgICAgICAgICAgICAgbmFtZSwKICAgICAgICAgICAgICAgICAgZmlsZW5hbWU6IHRoaXMuZmlsZW5hbWUsCiAgICAgICAgICAgICAgICAgIHRvdGFsOiAraGVhZGVyc1snY29udGVudC1sZW5ndGgnXQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBvbkNsb3NlKG5hbWUsIGZpbGUpIHsKICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgY29uc29sZS5sb2coYG9uQ2xvc2VbMV0oJHtuYW1lfSwgJHtmaWxlfSlgLCB0aGlzLnV1aWQpOwogICAgICAgICAgICAgICAgbGV0IGV4aWYsIGNhY2hlLCBzaGExOwogICAgICAgICAgICAgICAgaWYoaGFzaCkgewogICAgICAgICAgICAgICAgICBoYXNoLmZpbmFsaXplKCk7CiAgICAgICAgICAgICAgICAgIHNoYTEgPSBoYXNoLnRvU3RyaW5nKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZih0aGlzLmZpbGUpIHsKICAgICAgICAgICAgICAgICAgZnMuY2xvc2VTeW5jKHRoaXMuZmlsZSk7CiAgICAgICAgICAgICAgICAgIHRoaXMuZmlsZSA9IG51bGw7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZihzaGExKSB7CiAgICAgICAgICAgICAgICAgIGxldCBmID0geCA9PiAndXBsb2Fkcy8nICsgc2hhMSArIHg7CiAgICAgICAgICAgICAgICAgIGxldCByZXQgPSBvcy5yZW5hbWUodGhpcy50ZW1wLCAodGhpcy50ZW1wID0gZihleHQpKSk7CiAgICAgICAgICAgICAgICAgIGxldCB7IGVycm5vIH0gPSBlcnJvcigpOwogICAgICAgICAgICAgICAgICBsZXQganNvbiA9IGYoJy5qc29uJyk7CgogICAgICAgICAgICAgICAgICBpZihmcy5leGlzdHNTeW5jKGpzb24pICYmIChjYWNoZSA9IFJlYWRKU09OKGpzb24pKSkgewogICAgICAgICAgICAgICAgICAgIGV4aWYgPSBjYWNoZS5leGlmOwogICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHdvcmtlci5wb3N0TWVzc2FnZSh7IGNvbW1hbmQ6ICdQb3N0VXBsb2FkJywgYXJnczogW3NoYTEsIHRoaXMuZmlsZW5hbWUsIHRoaXMudGVtcCwgYWRkcmVzc10gfSkudGhlbihyZXN1bHQgPT4gewogICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1Bvc3RVcGxvYWQnLCB7IHdzLCByZXN1bHQgfSk7CiAgICAgICAgICAgICAgICAgICAgICBpZihjb25uZWN0aW9uc1swXSkgY29ubmVjdGlvbnNbMF0uc2VuZENvbW1hbmQoeyB0eXBlOiAndXBsb2FkJywgLi4ucmVzdWx0IH0pOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIHJldHVybjsKCiAgICAgICAgICAgICAgICAgICAgLyogaWYoIS8ocG5nfHN2Z3xnaWZ8dGdhKSQvaS50ZXN0KGV4dCkpIHsKICAgICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGV4aWYgPSBSZWFkRXhpZnRvb2woZihleHQpKTsKICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2goZSkgewogICAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgIGV4aWYgPSBSZWFkRXhpZnRvb2wodGhpcy50ZW1wKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaChlKSB7fQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgbGV0IG9iaiA9IHsKICAgICAgICAgICAgICAgICAgICAgIGZpbGVuYW1lOiB0aGlzLmZpbGVuYW1lLAogICAgICAgICAgICAgICAgICAgICAgc3RvcmFnZTogZihleHQpLAogICAgICAgICAgICAgICAgICAgICAgdXBsb2FkZWQ6IERhdGUubm93KCksCiAgICAgICAgICAgICAgICAgICAgICBhZGRyZXNzLAogICAgICAgICAgICAgICAgICAgICAgZXhpZgogICAgICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgICAgIGlmKC9cLmhlaVtmY10kL2dpLnRlc3QoZXh0KSkgewogICAgICAgICAgICAgICAgICAgICAgSGVpZkNvbnZlcnQoZihleHQpLCBmKCcuanBnJykpOwogICAgICAgICAgICAgICAgICAgICAgaWYoZnMuZXhpc3RzU3luYyhmKCcuanBnJykpKSBvYmouanBnID0gZignLmpwZycpOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgbGV0IHdpZHRoID0gJycsCiAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSAnMjU2JzsKCiAgICAgICAgICAgICAgICAgICAgaWYoZXhpZikgewogICAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBJbWFnZVNpemUsIEltYWdlSGVpZ2h0LCBJbWFnZVdpZHRoIH0gPSBleGlmOwogICAgICAgICAgICAgICAgICAgICAgbGV0IGFzcGVjdCA9IEltYWdlV2lkdGggLyBJbWFnZUhlaWdodDsKICAgICAgICAgICAgICAgICAgICAgIGlmKGFzcGVjdCA+PSAxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoID0gMjU2OwogICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSB3aWR0aCAvIGFzcGVjdDsKICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSAyNTY7CiAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGggPSBoZWlnaHQgKiBhc3BlY3Q7CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBNYWdpY2tSZXNpemUob2JqLmpwZyA/PyBmKGV4dCksIGYoJy50aHVtYi5qcGcnKSwgb2JqLmV4aWY/LlJvdGF0aW9uID8/IDAsIHdpZHRoLCBoZWlnaHQpOwoKICAgICAgICAgICAgICAgICAgICBpZihmcy5leGlzdHNTeW5jKGYoJy50aHVtYi5qcGcnKSkpIG9iai50aHVtYm5haWwgPSBmKCcudGh1bWIuanBnJyk7CgogICAgICAgICAgICAgICAgICAgIFdyaXRlSlNPTihqc29uLCBvYmopOwogCiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYHV1aWRgLCB3cy51dWlkID8/IHRoaXMudXVpZCk7CiAgICAgICAgICAgICAgICAgICAgY2FjaGUgPSBvYmo7Ki8KICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgaWYocmV0ID09IDAgfHwgZXJybm8gPT0gMTcpIHsKICAgICAgICAgICAgICAgICAgICB1bmxpbmsodGhpcy50ZW1wKTsKICAgICAgICAgICAgICAgICAgICB0aGlzLnRlbXAgPSBudWxsOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgY29uc3QgeyBmaWxlbmFtZSB9ID0gdGhpczsKICAgICAgICAgICAgICAgIGxldCB3czIgPSBieV91dWlkW3dzLnV1aWQgPz8gdGhpcy51dWlkXTsKCiAgICAgICAgICAgICAgICBpZih3czIpIHdzMi5zZW5kQ29tbWFuZCh7IHR5cGU6ICd1cGxvYWQnLCAuLi4oY2FjaGUgPz8ge30pLCBmaWxlbmFtZSwgZXhpZiB9KTsKCiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKGBvbkNsb3NlWzJdKCR7bmFtZX0sICR7ZmlsZX0pYCk7CiAgICAgICAgICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgb25DbG9zZSBFUlJPUjpgLCBlLm1lc3NhZ2UpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgb25GaW5hbGl6ZSgpIHsKICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgb25GaW5hbGl6ZSgpIGZvcm0gcGFyc2VyYCwgdGhpcy51dWlkKTsKICAgICAgICAgICAgICByZXNwLndyaXRlKGBkb25lOiAke3Byb2dyZXNzfSBieXRlcyByZWFkXHJcbmApOwogICAgICAgICAgICAgIHJlc3AuZmluaXNoKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgLy90aHJvdyBuZXcgRXJyb3IoYGh0dHAgJHttZXRob2R9IHJlcXVlc3RgKTsKCiAgICAgICAgaWYoIXJlcS5oZWFkZXJzIHx8IHR5cGVvZiByZXEuaGVhZGVycyAhPSAnb2JqZWN0JykgY29uc29sZS5sb2coJ05vIGhlYWRlcnMnLCByZXEpOwoKICAgICAgICBjb25zdCB7IGJvZHksIHVybCB9ID0gcmVzcCA/PyB7fTsKICAgICAgICBjb25zdCB7IHJlZmVyZXIgfSA9IHJlcS5oZWFkZXJzOwoKICAgICAgICBpZih1cmwpIHsKICAgICAgICAgIGxldCBmaWxlID0gdXJsLnBhdGguc2xpY2UoMSk7CiAgICAgICAgICBjb25zdCBkaXIgPSBwYXRoLmRpcm5hbWUoZmlsZSk7CgogICAgICAgICAgaWYoZmlsZS5lbmRzV2l0aCgnLnR4dCcpIHx8IGZpbGUuZW5kc1dpdGgoJy5odG1sJykgfHwgZmlsZS5lbmRzV2l0aCgnLmNzcycpKSB7CiAgICAgICAgICAgIHJlc3AuYm9keSA9IFJlYWRGaWxlKGZpbGUpOwogICAgICAgICAgfSBlbHNlIGlmKGZpbGUuZW5kc1dpdGgoJy5qcycpKSB7CiAgICAgICAgICAgIGxldCBmaWxlMSA9IGZpbGU7CiAgICAgICAgICAgIGlmKC9xanMtbW9kdWxlc1wvbGliLy50ZXN0KGZpbGUpICYmICEvKGRvbXx1dGlsKVwuanMvLnRlc3QoZmlsZSkpIHsKICAgICAgICAgICAgICBsZXQgZmlsZTIgPSBmaWxlLnJlcGxhY2UoLy4qcWpzLW1vZHVsZXNcLy9nLCAnJyk7CiAgICAgICAgICAgICAgaWYoZnMuZXhpc3RzU3luYyhmaWxlMikpIHsKICAgICAgICAgICAgICAgIGZpbGUgPSBmaWxlMjsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSBpZighZnMuZXhpc3RzU3luYyhmaWxlKSkgewogICAgICAgICAgICAgIGZvcihsZXQgZGlyIG9mIFsncXVpY2tqcy9xanMtbW9kdWxlcycsICdxdWlja2pzL3Fqcy1tb2R1bGVzL2xpYicsICcuJywgJ2xpYiddKSB7CiAgICAgICAgICAgICAgICBsZXQgZmlsZTIgPSBkaXIgKyAnLycgKyBmaWxlOwogICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2luZXhpc3RlbnQgZmlsZScsIGZpbGUsIGZpbGUyLCBmcy5leGlzdHNTeW5jKGZpbGUyKSwgcmVmZXJlcik7CiAgICAgICAgICAgICAgICBpZihmcy5leGlzdHNTeW5jKGZpbGUyKSkgewogICAgICAgICAgICAgICAgICBmaWxlID0gZmlsZTI7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYoZmlsZTEgIT0gZmlsZSkgewogICAgICAgICAgICAgIC8vICBjb25zb2xlLmxvZygnXHgxYlszODs1OzIxNG1vblJlcXVlc3RceDFiWzBtJywgZmlsZTEsICctPicsIGZpbGUpOwogICAgICAgICAgICAgIHJlc3Auc3RhdHVzID0gMzAyOwogICAgICAgICAgICAgIHJlc3AuaGVhZGVycyA9IHsgWydMb2NhdGlvbiddOiAnLycgKyBmaWxlIH07CiAgICAgICAgICAgICAgcmV0dXJuIHJlc3A7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnXHgxYlszODs1OzMzbW9uUmVxdWVzdFx4MWJbMG0nLCBmaWxlMSwgZmlsZSk7CgogICAgICAgICAgICAvLwogICAgICAgICAgICBsZXQgYm9keSA9IFJlYWRGaWxlKGZpbGUpOwoKICAgICAgICAgICAgY29uc3QgcmUgPSAvXihccyooaW18ZXgpcG9ydFteXG5dKmZyb20gWyciXSkoW14uLyciXSopKFsnIl1ccyo7W1x0IF0qXG4/KS9nbTsKCiAgICAgICAgICAgIHJlc3AuYm9keSA9IChib2R5ID8/ICcnKS5yZXBsYWNlQWxsKHJlLCAobWF0Y2gsIHAxLCBwMCwgcDIsIHAzLCBvZmZzZXQpID0+IHsKICAgICAgICAgICAgICBpZighL1tcL1wuXS8udGVzdChwMikpIHsKICAgICAgICAgICAgICAgIGxldCBmbmFtZSA9IGAke3AyfS5qc2A7CiAgICAgICAgICAgICAgICBsZXQgcmVsID0gcGF0aC5yZWxhdGl2ZShmbmFtZSwgZGlyKTsKICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ29uUmVxdWVzdCcsIHsgbWF0Y2gsIGZuYW1lIH0sIHJlbCk7CgogICAgICAgICAgICAgICAgLy8gaWYoIWZzLmV4aXN0c1N5bmMoICByZWwpKSByZXR1cm4gYGA7CgogICAgICAgICAgICAgICAgbWF0Y2ggPSBbcDEsIHJlbCwgcDNdLmpvaW4oJycpOwoKICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ2FyZ3MnLCB7IG1hdGNoLCBwMSwgcDIsIHAzLCBvZmZzZXQgfSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiBtYXRjaDsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gcmVzcDsKICAgICAgfSwKICAgICAgb25NZXNzYWdlKHdzLCBkYXRhKSB7CiAgICAgICAgLy9pZih0eXBlb2YgZGF0YSAhPSAnc3RyaW5nJykgZGF0YSA9IHRvU3RyaW5nKGRhdGEpOwoKICAgICAgICBjb25zb2xlLmxvZyhgb25NZXNzYWdlIFske3dzLnV1aWR9XTpgLCBkYXRhKTsKICAgICAgICByZXR1cm4gY2FsbGJhY2tzLm9uTWVzc2FnZSh3cywgZGF0YSk7CiAgICAgIH0sCiAgICAgIC4uLih1cmwgJiYgdXJsLmhvc3QgPyB1cmwgOiB7fSkKICAgIH0pOwogIH0pOwoKICBkZWZpbmUoZ2xvYmFsVGhpcywgewogICAgZ2V0IGNvbm5lY3Rpb25zKCkgewogICAgICByZXR1cm4gWy4uLmNvbm5lY3Rpb25zXTsKICAgIH0sCiAgICBnZXQgYnlfdXVpZCgpIHsKICAgICAgcmV0dXJuIGJ5X3V1aWQ7CiAgICB9LAogICAgdXVpZChkYXRhKSB7CiAgICAgIHJldHVybiBieV91dWlkW2RhdGFdOwogICAgfQogIH0pOwoKICBnbG9iYWxUaGlzLnNlcnYgPSBuZXcgUlBDU2VydmVyKAogICAgRmFjdG9yeUVuZHBvaW50KAogICAgICB7CiAgICAgICAgRGlyZWN0b3J5LAogICAgICAgIE1hdGNoCiAgICAgIH0sCiAgICAgIHBhcmFtcy52ZXJib3NlCiAgICApLAogICAgcGFyYW1zLnZlcmJvc2UKICApOwoKICBPYmplY3QuYXNzaWduKGdsb2JhbFRoaXMsIHsKICAgIHJwYzogewogICAgICBNZXNzYWdlUmVjZWl2ZXIsCiAgICAgIE1lc3NhZ2VUcmFuc21pdHRlciwKICAgICAgTWVzc2FnZVRyYW5zY2VpdmVyLAogICAgICBjb2RlY3MsCiAgICAgIFJQQ0FwaSwKICAgICAgUlBDUHJveHksCiAgICAgIFJQQ09iamVjdCwKICAgICAgUlBDRmFjdG9yeSwKICAgICAgQ29ubmVjdGlvbiwKICAgICAgUlBDX1BBUlNFX0VSUk9SLAogICAgICBSUENfSU5WQUxJRF9SRVFVRVNULAogICAgICBSUENfTUVUSE9EX05PVF9GT1VORCwKICAgICAgUlBDX0lOVkFMSURfUEFSQU1TLAogICAgICBSUENfSU5URVJOQUxfRVJST1IsCiAgICAgIFJQQ19TRVJWRVJfRVJST1JfQkFTRSwKICAgICAgRmFjdG9yeUVuZHBvaW50LAogICAgICBSUENTZXJ2ZXIsCiAgICAgIFJQQ0NsaWVudCwKICAgICAgRmFjdG9yeUNsaWVudCwKICAgICAgUlBDU29ja2V0LAogICAgICBHZXRQcm9wZXJ0aWVzLAogICAgICBHZXRLZXlzLAogICAgICBTZXJpYWxpemVWYWx1ZSwKICAgICAgRGVzZXJpYWxpemVTeW1ib2xzLAogICAgICBEZXNlcmlhbGl6ZVZhbHVlLAogICAgICBSUENDb25uZWN0LAogICAgICBSUENMaXN0ZW4KICAgIH0sCiAgICByZXBsLAogICAgcXVpdCwKICAgIGV4aXQ6IHF1aXQsCiAgICBzdGQsCiAgICBvcywKICAgIGRlZXAsCiAgICBmcywKICAgIHBhdGgsCiAgICBSZWFkSlNPTiwKICAgIFdyaXRlSlNPTiwKICAgIFJlYWRGaWxlLAogICAgV3JpdGVGaWxlLAogICAgUmVhZEJKU09OLAogICAgV3JpdGVCSlNPTiwKICAgIHBhcnNlRGF0ZSwKICAgIGRhdGVUb09iamVjdCwKICAgIEhhc2gsCiAgICBGb3JtUGFyc2VyLAogICAgRXhlY1Rvb2wsCiAgICBleHRlbmRHZW5lcmF0b3IsCiAgICBleHRlbmRBcnJheSwKICAgIGV4dGVuZEFzeW5jR2VuZXJhdG9yLAogICAgTWF0Y2hlciwKICAgIEV4ZWNUb29sLAogICAgR2V0TWltZSwKICAgIE1hdGNoZXIsCiAgICBLZXlPclZhbHVlTWF0Y2hlciwKICAgIEdldFJvb3REaXJlY3RvcmllcywKICAgIEdldERpciwKICAgIERpck5hbWUsCiAgICBEYXRlU3RyLAogICAgTW9kZVN0ciwKICAgIFJlYWRFeGl2MiwKICAgIFJlYWRFeGlmdG9vbCwKICAgIEhlaWZDb252ZXJ0LAogICAgTWFnaWNrUmVzaXplLAogICAgRGlyZWN0b3J5CiAgfSk7CgogIGRlbGV0ZSBnbG9iYWxUaGlzLkRFQlVHOwoKICBjcmVhdGVXUygKICAgIHsgcHJvdG9jb2w6ICd3cycsIGhvc3Q6ICcwLjAuMC4wJywgcG9ydDogODk5OSB9LAogICAgewogICAgICBvbkZkKGZkLCByZCwgd3IpIHsKICAgICAgICAvL2NvbnNvbGUubG9nKCdvbkZkJywgZmQsIHJkLCB3cik7CiAgICAgICAgb3Muc2V0UmVhZEhhbmRsZXIoZmQsIHJkKTsKICAgICAgICBvcy5zZXRXcml0ZUhhbmRsZXIoZmQsIHdyKTsKICAgICAgfSwKICAgICAgb25DbG9zZSh3cywgcmVhc29uKSB7fSwKICAgICAgb25NZXNzYWdlKHdzLCBkYXRhKSB7CiAgICAgICAgY29uc3QgbXNnID0gSlNPTi5wYXJzZShkYXRhKTsKCiAgICAgICAgY29uc29sZS5sb2coJ29uTWVzc2FnZScsIG1zZyk7CgogICAgICAgIHN3aXRjaCAobXNnLnR5cGUpIHsKICAgICAgICAgIGNhc2UgJ3V1aWQnOgogICAgICAgICAgICBicmVhazsKCiAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICBjb25zdCByZXN1bHQgPSBzZXJ2LnByb2Nlc3NNZXNzYWdlKG1zZyk7CiAgICAgICAgICAgIHJlc3VsdC50eXBlID0gbXNnLnR5cGU7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdzZW5kJywgcmVzdWx0KTsKICAgICAgICAgICAgd3Muc2VuZChKU09OLnN0cmluZ2lmeShyZXN1bHQpKTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgdHJ1ZQogICk7CgogIGZ1bmN0aW9uIHF1aXQod2h5KSB7CiAgICBjb25zb2xlLmxvZyhgcXVpdCgnJHt3aHl9JylgKTsKCiAgICBsZXQgY2ZnID0geyBpbnNwZWN0T3B0aW9uczogY29uc29sZS5vcHRpb25zIH07CiAgICBXcml0ZUpTT04oYC4ke2Jhc2V9LWNvbmZpZ2AsIGNmZyk7CiAgICByZXBsLmNsZWFudXAod2h5KTsKICB9CgogIHJlcGwucnVuKCk7Cn0KCnRyeSB7CiAgbWFpbiguLi5zY3JpcHRBcmdzLnNsaWNlKDEpKTsKfSBjYXRjaChlcnJvcikgewogIGNvbnNvbGUubG9nKGBGQUlMOiAke2Vycm9yPy5tZXNzYWdlID8/IGVycm9yfVxuJHtlcnJvcj8uc3RhY2t9YCk7CgogIHN0ZC5leGl0KDEpOwp9IGZpbmFsbHkgewp9CgAAAAAAAAAAS40AAAAAAAAAAAAAAAAAAAAAAABLjQAAAAAAAAAAAAAAAAAAAAAAAEuNAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPdhAAAAAAAA92EAAAAAAAAAAAAAAADwvw"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "globalThis."
					},
					"CwAAAAsmAAAAAAAADCYAAAAAAAAAAAAADCYAAAAAAAANJgAAAAAAAAAAAAANJgAAAAAAAA4mAAAAAAAAAAAAAA4mAAAAAAAADyYAAAAAAAAAAAAADyYAAAAAAAAQJgAAAAAAAAAAAAAQJgAAAAAAABEmAAAAAAAAAAAAABEmAAAAAAAAEiYAAAAAAAAAAAAAEiYAAAAAAAATJgAAAAAAAAAAAAATJgAAAAAAABQmAAAAAAAAAAAAABQmAAAAAAAAFSYAAAAAAAAAAAAAFSYAAAAAAAAWJgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAACyYAAAAAAAALJgAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "params"
					},
					"BgAAABYmAAAAAAAAFyYAAAAAAAAAAAAAFyYAAAAAAAAYJgAAAAAAAAAAAAAYJgAAAAAAABkmAAAAAAAAAAAAABkmAAAAAAAAGiYAAAAAAAAAAAAAGiYAAAAAAAAbJgAAAAAAAAAAAAAbJgAAAAAAABwmAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFiYAAAAAAAAWJgAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAABwmAAAAAAAAHSYAAAAAAAAAAAAAHSYAAAAAAAAeJgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHCYAAAAAAAAcJgAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAB4mAAAAAAAAHyYAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHiYAAAAAAAAeJgAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAPQnAAAAAAAA9ScAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9CcAAAAAAAD0JwAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPUnAAAAAAAA9icAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9ScAAAAAAAD1JwAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAPYnAAAAAAAA+CcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9icAAAAAAAD2JwAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": "k"
					},
					"AQAAAPcnAAAAAAAA+CcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9ycAAAAAAAD3JwAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAM0nAAAAAAAAzicAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAzScAAAAAAADNJwAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAM4nAAAAAAAAzycAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAzicAAAAAAADOJwAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAM8nAAAAAAAA0ScAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAzycAAAAAAADPJwAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAANAnAAAAAAAA0ScAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0CcAAAAAAADQJwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "clang-ast.js",
			"settings":
			{
				"buffer_size": 87613,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					11,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAK0sAAAAAAAAriwAAAAAAAAAAAAAriwAAAAAAACyLAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACtLAAAAAAAAK0sAAAAAAAAAAAAAAAA8L8"
				],
				[
					27,
					1,
					"cut",
					null,
					"AQAAACMsAAAAAAAAIywAAAAAAAACAAAALyo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAlLAAAAAAAACMsAAAAAAAAAAAAAAAA8L8"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAACMsAAAAAAAAJCwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAjLAAAAAAAACMsAAAAAAAAAAAAAAAA8L8"
				],
				[
					31,
					1,
					"left_delete",
					null,
					"AQAAACMsAAAAAAAAIywAAAAAAAABAAAAKA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAkLAAAAAAAACQsAAAAAAAAAAAAAAAA8L8"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "/T"
					},
					"AgAAACMsAAAAAAAAJCwAAAAAAAAAAAAAJCwAAAAAAAAlLAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAjLAAAAAAAACMsAAAAAAAAAAAAAAAA8L8"
				],
				[
					33,
					1,
					"left_delete",
					null,
					"AQAAACQsAAAAAAAAJCwAAAAAAAABAAAAVA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAlLAAAAAAAACUsAAAAAAAAAAAAAAAA8L8"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": "Typedef"
					},
					"BwAAACQsAAAAAAAAJSwAAAAAAAAAAAAAJSwAAAAAAAAmLAAAAAAAAAAAAAAmLAAAAAAAACcsAAAAAAAAAAAAACcsAAAAAAAAKCwAAAAAAAAAAAAAKCwAAAAAAAApLAAAAAAAAAAAAAApLAAAAAAAACosAAAAAAAAAAAAACosAAAAAAAAKywAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAkLAAAAAAAACQsAAAAAAAAAAAAAAAA8L8"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "|Record/.t"
					},
					"CgAAACssAAAAAAAALCwAAAAAAAAAAAAALCwAAAAAAAAtLAAAAAAAAAAAAAAtLAAAAAAAAC4sAAAAAAAAAAAAAC4sAAAAAAAALywAAAAAAAAAAAAALywAAAAAAAAwLAAAAAAAAAAAAAAwLAAAAAAAADEsAAAAAAAAAAAAADEsAAAAAAAAMiwAAAAAAAAAAAAAMiwAAAAAAAAzLAAAAAAAAAAAAAAzLAAAAAAAADQsAAAAAAAAAAAAADQsAAAAAAAANSwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAArLAAAAAAAACssAAAAAAAAAAAAAAAA8L8"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "est(&"
					},
					"BQAAADUsAAAAAAAANiwAAAAAAAAAAAAANiwAAAAAAAA3LAAAAAAAAAAAAAA3LAAAAAAAADgsAAAAAAAAAAAAADgsAAAAAAAAOSwAAAAAAAAAAAAAOSwAAAAAAAA6LAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA1LAAAAAAAADUsAAAAAAAAAAAAAAAA8L8"
				],
				[
					37,
					1,
					"left_delete",
					null,
					"AQAAADksAAAAAAAAOSwAAAAAAAABAAAAJg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA6LAAAAAAAADosAAAAAAAAAAAAAAAA8L8"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAEMsAAAAAAAARCwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABDLAAAAAAAAEMsAAAAAAAAAAAAAAAA8L8"
				],
				[
					42,
					1,
					"right_delete",
					null,
					"AQAAAEQsAAAAAAAARCwAAAAAAAARAAAAID09ICdUeXBlZGVmRGVjbCc",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABELAAAAAAAAFUsAAAAAAAAAAAAAAAA8L8"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": "^"
					},
					"AQAAACQsAAAAAAAAJSwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAkLAAAAAAAACQsAAAAAAAAAAAAAAAA8L8"
				],
				[
					47,
					1,
					"left_delete",
					null,
					"AQAAAFMsAAAAAAAAUywAAAAAAAABAAAAKg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABULAAAAAAAAFQsAAAAAAAAAAAAAAAA8L8"
				],
				[
					48,
					1,
					"right_delete",
					null,
					"AQAAAFMsAAAAAAAAUywAAAAAAAABAAAALw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABTLAAAAAAAAFMsAAAAAAAAAAAAAAAA8L8"
				],
				[
					52,
					2,
					"left_delete",
					null,
					"AgAAACAsAAAAAAAAICwAAAAAAAABAAAAPx8sAAAAAAAAHywAAAAAAAABAAAAPw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAhLAAAAAAAACEsAAAAAAAAAAAAAAAA8L8"
				],
				[
					74,
					1,
					"cut",
					null,
					"AQAAAJIrAAAAAAAAkisAAAAAAABLAAAAICAgIGlmKG5vZGU/LmtpbmQgJiYgbm9kZS5raW5kLnN0YXJ0c1dpdGgoJ0VudW0nKSkgbmFtZSA9ICdlbnVtICcgKyBuYW1lOwoK",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACSKwAAAAAAAN0rAAAAAAAAAAAAAAAAAAA"
				],
				[
					75,
					1,
					"paste",
					null,
					"AQAAAJIrAAAAAAAA3SsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACSKwAAAAAAAJIrAAAAAAAAAAAAAAAA8L8"
				],
				[
					157,
					1,
					"revert",
					null,
					"AwAAAAAAAAAAAAAAAAAAAAAAAABBVgEAaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnOwppbXBvcnQgeyBSZWFkRmlsZSwgUmVhZEJKU09OLCBXcml0ZUJKU09OIH0gZnJvbSAnLi9pby1oZWxwZXJzLmpzJzsKaW1wb3J0ICogYXMgZGVlcCBmcm9tICcuL2xpYi9kZWVwLmpzJzsKaW1wb3J0IHsgYXNzZXJ0LCBiaXRzLCBjbGFzc05hbWUsIGRlZmluZSwgbm9uZW51bWVyYWJsZSwgcHJvcGVydGllcywgZW50cmllcywgZXJyb3JzLCBmaWx0ZXIsIGlzQXJyYXksIGlzRnVuY3Rpb24sIGlzT2JqZWN0LCBpc1N0cmluZywga2V5cywgbGF6eVByb3BlcnRpZXMsIG1hdGNoQWxsLCBtZW1vaXplLCBwcmVkaWNhdGUsIHJhbmdlLCByZXBlYXQsIHNwbGl0LCB0b1N0cmluZywgdHlwZXMsIHVuaXF1ZSwgdmFsdWVzLCB3ZWFrRGVmaW5lLCB9IGZyb20gJy4vbGliL21pc2MuanMnOwppbXBvcnQgKiBhcyBwYXRoIGZyb20gJy4vbGliL3BhdGguanMnOwppbXBvcnQgeyBQb2ludGVyIH0gZnJvbSAnLi9saWIvcG9pbnRlci5qcyc7CmltcG9ydCB7IFNwYXduIH0gZnJvbSAnLi9vcy1oZWxwZXJzLmpzJzsKaW1wb3J0IHsgY291bnRTdWJzdHJpbmcgfSBmcm9tICcuL3N0cmluZy1oZWxwZXJzLmpzJzsKaW1wb3J0IHsgaW5zcGVjdCB9IGZyb20gJ2luc3BlY3QnOwppbXBvcnQgeyByZWFkT2JqZWN0LCBtYXBGdW5jdGlvbiB9IGZyb20gJ3V0aWwnOwppbXBvcnQgeyBzdHJpbmcsIHByb3BlcnR5LCBzaGlmdCwgYW5kLCByZWdleHAsIG5vdG5vdCB9IGZyb20gJ3ByZWRpY2F0ZSc7CgpleHBvcnQgbGV0IFNJWkVPRl9QT0lOVEVSID0gODsKZXhwb3J0IGxldCBTSVpFT0ZfSU5UID0gNDsKCmNvbnN0IGFzdDJucCA9ICgKICAod20gPSBuZXcgV2Vha01hcCgpKSA9PgogIChhc3QsIHIpID0+CiAgICAociA9IHdtLmdldChhc3QpKSA/IHIgOiAod20uc2V0KGFzdCwgKHIgPSBuZXcgV2Vha01hcCgpKSksIHIpCikoKTsKCmV4cG9ydCBmdW5jdGlvbiBEZWVwRmluZChhc3QsIHByZWQsIGZsYWdzID0gZGVlcC5SRVRVUk5fVkFMVUUpIHsKICBpZihpc1N0cmluZyhwcmVkKSkgcHJlZCA9IHByb3BlcnR5KCduYW1lJywgc3RyaW5nKHByZWQpKTsKCiAgY29uc3QgcmVzdWx0ID0gZGVlcC5maW5kKGFzdCwgcHJlZCwgZGVlcC5SRVRVUk5fVkFMVUVfUEFUSCwgZGVlcC5UWVBFX09CSkVDVCwgWydpbm5lciddKTsKCiAgaWYocmVzdWx0KSB7CiAgICBjb25zdCBbdmFsdWUsIHBhdGhdID0gcmVzdWx0OwoKICAgIERlZXBDYWNoZVBhdGgoYXN0LCBwYXRoKTsKCiAgICBzd2l0Y2ggKGZsYWdzKSB7CiAgICAgIGNhc2UgZGVlcC5SRVRVUk5fVkFMVUVfUEFUSDoKICAgICAgICByZXR1cm4gW3ZhbHVlLCBwYXRoXTsKICAgICAgY2FzZSBkZWVwLlJFVFVSTl9QQVRIOgogICAgICAgIHJldHVybiBwYXRoOwogICAgICBjYXNlIGRlZXAuUkVUVVJOX1ZBTFVFOgogICAgICAgIHJldHVybiB2YWx1ZTsKICAgIH0KICB9Cn0KCmV4cG9ydCBmdW5jdGlvbiogRGVlcFNlbGVjdChhc3QsIHByZWQsIGZsYWdzID0gZGVlcC5SRVRVUk5fVkFMVUUpIHsKICBsZXQgbSA9IGFzdDJucChhc3QpOwoKICBpZihpc1N0cmluZyhwcmVkKSkgcHJlZCA9IHByb3BlcnR5KCduYW1lJywgc3RyaW5nKHByZWQpKTsKCiAgZm9yKGxldCBbdmFsdWUsIHBhdGhdIG9mIGRlZXAuaXRlcmF0ZShhc3QsIHByZWQsIGRlZXAuUkVUVVJOX1ZBTFVFX1BBVEggfCAoZmxhZ3MgJiB+ZGVlcC5SRVRVUk5fUEFUSF9WQUxVRSksIGRlZXAuVFlQRV9PQkpFQ1QsIFsnaW5uZXInXSkpIHsKICAgIERlZXBDYWNoZVBhdGgoYXN0LCBwYXRoLCBtKTsKCiAgICBzd2l0Y2ggKGZsYWdzICYgZGVlcC5SRVRVUk5fUEFUSF9WQUxVRSkgewogICAgICBjYXNlIGRlZXAuUkVUVVJOX1ZBTFVFX1BBVEg6CiAgICAgICAgeWllbGQgW3ZhbHVlLCBwYXRoXTsKICAgICAgICBicmVhazsKICAgICAgY2FzZSBkZWVwLlJFVFVSTl9QQVRIOgogICAgICAgIHlpZWxkIHBhdGg7CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgZGVlcC5SRVRVUk5fVkFMVUU6CiAgICAgICAgeWllbGQgdmFsdWU7CiAgICAgICAgYnJlYWs7CiAgICB9CiAgfQp9CgpleHBvcnQgZnVuY3Rpb24gRGVlcENhY2hlUGF0aChhc3QsIHBhdGgsIG0pIHsKICBtID8/PSBhc3QybnAoYXN0KTsKICBjb25zdCBsID0gcGF0aC5sZW5ndGg7CiAgbGV0IG4gPSBhc3Q7CgogIGZvcihsZXQgaSA9IDA7IGkgPCBsOyArK2kpIHsKICAgIG4gPSBuW3BhdGhbaV1dOwoKICAgIGlmKHR5cGVvZiBuID09ICdvYmplY3QnKSB7CiAgICAgIGlmKCFtLmdldChuKSkgbS5zZXQobiwgcGF0aC5zbGljZSgwLCBpICsgMSkpOwogICAgfQogIH0KfQoKZXhwb3J0IGZ1bmN0aW9uIERlZXBQYXRoT2YoYXN0LCB2YWx1ZSkgewogIGxldCBwOwoKICBpZigocCA9IGFzdDJucChhc3QpLmdldCh2YWx1ZSkpKSByZXR1cm4gcDsKCiAgcmV0dXJuIGRlZXAucGF0aE9mKGFzdCwgdmFsdWUpOwp9CgpleHBvcnQgZnVuY3Rpb24gRGVlcEdldChhc3QsIHBhdGgsIC4uLmFyZ3MpIHsKICBjb25zdCB2YWx1ZSA9IGRlZXAuZ2V0KGFzdCwgcGF0aCwgLi4uYXJncyk7CgogIGlmKHZhbHVlKSBEZWVwQ2FjaGVQYXRoKGFzdCwgcGF0aCk7CgogIHJldHVybiB2YWx1ZTsKfQoKY29uc3QgQyA9IGNvbnNvbGUuY29uZmlnKHsgY29tcGFjdDogdHJ1ZSB9KTsKCmZ1bmN0aW9uIEZpbGVUaW1lKGZpbGVuYW1lKSB7CiAgbGV0IHN0ID0gZnMuc3RhdFN5bmMoZmlsZW5hbWUpOwogIHJldHVybiBzdCA/IChzdC5tdGltZSA/PyBzdC50aW1lKSA6IC0xOwp9CgpmdW5jdGlvbiBOZXdlcihmaWxlLCAuLi5vdGhlcikgewogIC8vY29uc29sZS5sb2coJ05ld2VyJywgeyBmaWxlLCBvdGhlciB9KTsKICByZXR1cm4gb3RoZXIuZXZlcnkob3RoZXIgPT4gRmlsZVRpbWUoZmlsZSkgPiBGaWxlVGltZShvdGhlcikpOwp9CgpmdW5jdGlvbiBPbGRlcihmaWxlLCBvdGhlcikgewogIHJldHVybiBGaWxlVGltZShmaWxlKSA8IEZpbGVUaW1lKG90aGVyKTsKfQoKZnVuY3Rpb24gR2V0U3Vic2NyaXB0cyhzdHIpIHsKICBsZXQgbWF0Y2hlcyA9IFsuLi5tYXRjaEFsbCgvXFsoWzAtOV0qKVxdL2csIHN0cildOwogIHJldHVybiBtYXRjaGVzLm1hcChtID0+IFttLmluZGV4LCArbVsxXV0pOwp9CgpmdW5jdGlvbiBUcmltU3Vic2NyaXB0cyhzdHIsIHN1YikgewogIGxldCBbc3Vic2NyaXB0ID0gW3N0ci5sZW5ndGhdXSA9IHN1YiA/PyBHZXRTdWJzY3JpcHRzKHN0cikgPz8gW1tzdHIubGVuZ3RoXV07CiAgLy9jb25zb2xlLmxvZygic3Vic2NyaXB0OiIsc3Vic2NyaXB0KTsKICByZXR1cm4gc3RyLnNsaWNlKDAsIHN1YnNjcmlwdFswXSkudHJpbUVuZCgpOwp9CgpleHBvcnQgZnVuY3Rpb24gbmFtZU9ySWRQcmVkKG5hbWVfb3JfaWQsIC4uLmFyZ3MpIHsKICBpZigvXihzdHJ1Y3R8dW5pb24pXHMvLnRlc3QobmFtZV9vcl9pZCkpIHsKICAgIGNvbnN0IGlkeCA9IG5hbWVfb3JfaWQuaW5kZXhPZignICcpOwogICAgY29uc3QgdGFnID0gbmFtZV9vcl9pZC5zdWJzdHJpbmcoMCwgaWR4KTsKICAgIGNvbnN0IG5hbWUgPSBuYW1lX29yX2lkLnN1YnN0cmluZyhpZHggKyAxKTsKCiAgICByZXR1cm4gYW5kKHByb3BlcnR5KCduYW1lJywgc3RyaW5nKG5hbWUpKSwgcHJvcGVydHkoJ3RhZ1VzZWQnLCBzdHJpbmcodGFnKSksIC4uLmFyZ3MpOwogICAgcmV0dXJuIG5vZGUgPT4gbm9kZS5uYW1lID09IG5hbWUgJiYgbm9kZS50YWdVc2VkID09IHRhZzsKICB9CgogIGlmKHR5cGVvZiBuYW1lX29yX2lkID09ICdudW1iZXInKSBuYW1lX29yX2lkID0gJzB4JyArIG5hbWVfb3JfaWQudG9TdHJpbmcoMTYpOwoKICByZXR1cm4gbmFtZV9vcl9pZCBpbnN0YW5jZW9mIFJlZ0V4cAogICAgPyBhbmQocHJvcGVydHkoJ25hbWUnLCByZWdleHAobmFtZV9vcl9pZCkpLCAuLi5hcmdzKQogICAgOiBuYW1lX29yX2lkLnN0YXJ0c1dpdGgoJzB4JykKICAgICAgPyBhbmQocHJvcGVydHkoJ2lkJywgc3RyaW5nKG5hbWVfb3JfaWQpKSwgLi4uYXJncykKICAgICAgOiBhbmQocHJvcGVydHkoJ25hbWUnLCBzdHJpbmcobmFtZV9vcl9pZCkpLCAuLi5hcmdzKTsKfQoKZXhwb3J0IGNsYXNzIExpc3QgZXh0ZW5kcyBBcnJheSB7CiAgY29uc3RydWN0b3IoLi4uYXJncykgewogICAgc3VwZXIoLi4uYXJncyk7CiAgfQoKICBzdGF0aWMgZ2V0IFtTeW1ib2wuc3BlY2llc10oKSB7CiAgICByZXR1cm4gTGlzdDsKICB9CgogIC8qIHByZXR0aWVyLWlnbm9yZSAqLyBnZXQgW1N5bWJvbC5zcGVjaWVzXSgpIHsgcmV0dXJuIExpc3Q7IH0KCiAgZmlsdGVyKGNhbGxiYWNrLCB0aGlzQXJnID0gbnVsbCkgewogICAgbGV0IHJldCA9IG5ldyBMaXN0KCksCiAgICAgIGkgPSAwOwoKICAgIGlmKHR5cGVvZiBjYWxsYmFjayA9PSAnb2JqZWN0JyAmJiBjYWxsYmFjayAhPSBudWxsICYmIGNhbGxiYWNrIGluc3RhbmNlb2YgUmVnRXhwKSB7CiAgICAgIHZhciByZSA9IGNhbGxiYWNrOwogICAgICBjYWxsYmFjayA9IGVsZW0gPT4gdHlwZW9mIGVsZW0gPT0gJ29iamVjdCcgJiYgZWxlbSAhPSBudWxsICYmIChyZS50ZXN0KGVsZW0ubmFtZSkgfHwgKEdldExvYyhlbGVtKSAmJiByZS50ZXN0KEdldExvYyhlbGVtKS5maWxlKSkpOwogICAgfQoKICAgIGZvcihsZXQgZWxlbSBvZiB0aGlzKSB7CiAgICAgIGlmKGNhbGxiYWNrLmNhbGwodGhpc0FyZywgZWxlbSwgaSwgdGhpcykpIHJldFtpXSA9IGVsZW07CiAgICAgIGkrKzsKICAgIH0KCiAgICByZXR1cm4gcmV0OwogIH0KCiAgc2xpY2Uoc3RhcnQsIGVuZCkgewogICAgbGV0IHJldCA9IG5ldyBMaXN0KCksCiAgICAgIGkgPSAwOwoKICAgIGlmKHN0YXJ0IDwgMCkgc3RhcnQgPSAoc3RhcnQgJSB0aGlzLmxlbmd0aCkgKyB0aGlzLmxlbmd0aDsKICAgIHN0YXJ0ID8/PSAwOwogICAgaWYoZW5kIDwgMCkgZW5kID0gKGVuZCAlIHRoaXMubGVuZ3RoKSArIHRoaXMubGVuZ3RoOwogICAgZW5kID8/PSB0aGlzLmxlbmd0aDsKCiAgICBmb3IobGV0IGkgPSBzdGFydDsgaSA8IGVuZDsgaSsrKSByZXRbaV0gPSB0aGlzW2ldOwoKICAgIHJldHVybiByZXQ7CiAgfQoKICAvKiBwcmV0dGllci1pZ25vcmUgKi8gZ2V0IGZpcnN0KCkgeyByZXR1cm4gdGhpcy5maW5kKGVsZW0gPT4gZWxlbSAhPT0gdW5kZWZpbmVkKTsgfQoKICBlbnRyaWVzKCkgewogICAgY29uc3QgcmV0ID0gW107CgogICAgZm9yKGxldCBbaSwgZWxlbV0gb2Ygc3VwZXIuZW50cmllcygpKSBpZihlbGVtKSByZXQucHVzaChbaSwgZWxlbV0pOwoKICAgIHJldHVybiByZXQ7CiAgfQoKICBrZXlzKCkgewogICAgY29uc3QgcmV0ID0gW107CgogICAgZm9yKGxldCBbaSwgZWxlbV0gb2Ygc3VwZXIuZW50cmllcygpKSBpZihlbGVtKSByZXQucHVzaChpKTsKCiAgICByZXR1cm4gcmV0OwogIH0KCiAgdmFsdWVzKCkgewogICAgY29uc3QgcmV0ID0gW107CgogICAgZm9yKGxldCBbaSwgZWxlbV0gb2Ygc3VwZXIuZW50cmllcygpKSBpZihlbGVtKSByZXQucHVzaChlbGVtKTsKCiAgICByZXR1cm4gcmV0OwogIH0KCiAgdG9BcnJheSgpIHsKICAgIHJldHVybiB0aGlzLnJlZHVjZSgoYSwgbikgPT4gWy4uLmEsIG5dLCBbXSk7CiAgfQp9CgpkZWZpbmUoTGlzdC5wcm90b3R5cGUsIHsgW1N5bWJvbC50b1N0cmluZ1RhZ106ICdMaXN0JyB9KTsKCmV4cG9ydCBjbGFzcyBOb2RlIHsKICBzdGF0aWMgYXN0Mm5vZGUgPSBuZXcgV2Vha01hcCgpOwogIHN0YXRpYyBub2RlMmFzdCA9IG5ldyBXZWFrTWFwKCk7CgogIGNvbnN0cnVjdG9yKGFzdCkgewogICAgaWYodHlwZW9mIGFzdCA9PSAnb2JqZWN0JyAmJiBhc3QgIT0gbnVsbCkgewogICAgICBpZigncGF0aCcgaW4gYXN0ICYmICd2YWx1ZScgaW4gYXN0KSBhc3QgPSBhc3QudmFsdWU7CgogICAgICAvL3Rocm93IG5ldyBFcnJvcihgTm9kZSBjb25zdHJ1Y3RvciAke2luc3BlY3QoYXN0KX1gKTsKICAgICAgTm9kZS5hc3Qybm9kZS5zZXQoYXN0LCB0aGlzKTsKICAgICAgTm9kZS5ub2RlMmFzdC5zZXQodGhpcywgYXN0KTsKICAgIH0KICB9CgogIHN0YXRpYyBnZXQoYXN0KSB7CiAgICByZXR1cm4gTm9kZS5hc3Qybm9kZS5nZXQoYXN0KTsKICB9CgogIC8qIHByZXR0aWVyLWlnbm9yZSAqLyBnZXQgYXN0KCkgeyByZXR1cm4gTm9kZS5ub2RlMmFzdC5nZXQodGhpcyk7IH0KICAvKiBwcmV0dGllci1pZ25vcmUgKi8gZ2V0IGlkKCkgeyByZXR1cm4gdGhpcy5hc3QuaWQ7IH0KICAvKiBwcmV0dGllci1pZ25vcmUgKi8gZ2V0IGxvYygpIHsgcmV0dXJuIG5ldyBMb2NhdGlvbihHZXRMb2ModGhpcy5hc3QpKTsgfQoKICBnZXQgZmlsZSgpIHsKICAgIGNvbnN0IGxvYyA9IHRoaXMuYXN0LmxvYyA/PyBEZWVwRmluZCh0aGlzLmFzdCwgKHYsIGspID0+IGsgPT0gJ2xvYycpID8/IERlZXBGaW5kKHQuYXN0LCAodiwgaykgPT4gdHlwZW9mIHYgPT0gJ29iamVjdCcgJiYgdiAhPSBudWxsICYmICdmaWxlJyBpbiB2KTsKICAgIGlmKGxvYykgcmV0dXJuIGxvYy5maWxlOwogIH0KCiAgZ2V0IHJhbmdlKCkgewogICAgY29uc3QgeyByYW5nZSB9ID0gdGhpcy5hc3Q7CiAgICBsZXQgbG9jLCBmaWxlOwoKICAgIGlmKHJhbmdlKSB7CiAgICAgIGNvbnN0IHsgYmVnaW4sIGVuZCB9ID0gcmFuZ2U7CgogICAgICBpZighKCdsaW5lJyBpbiBiZWdpbikpIGJlZ2luLmxpbmUgPSAobG9jID8/PSB0aGlzLmxvYykubGluZTsKCiAgICAgIHJldHVybiBbYmVnaW4sIGVuZF0ubWFwKHIgPT4gewogICAgICAgIGlmKCEoJ2ZpbGUnIGluIHIpKSByLmZpbGUgPSBmaWxlID8/PSB0aGlzLmZpbGU7CgogICAgICAgIHJldHVybiBuZXcgTG9jYXRpb24ocik7CiAgICAgIH0pOwogICAgfQoKICAgIHJldHVybiBbbmV3IExvY2F0aW9uKHJhbmdlLmJlZ2luKSwgbmV3IExvY2F0aW9uKHJhbmdlLmVuZCldOwogIH0KCiAgdG9KU09OKG9iaikgewogICAgY29uc3QgeyBraW5kIH0gPSB0aGlzOwogICAgb2JqID8/PSB7IGtpbmQgfTsKCiAgICBpZighb2JqLmtpbmQpIG9iai5raW5kID0gY2xhc3NOYW1lKHRoaXMpOwoKICAgIHJldHVybiBvYmo7CiAgfQoKICAvKiBwcmV0dGllci1pZ25vcmUgKi8gZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkgeyByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lOyB9Cn0KCk9iamVjdC5zZXRQcm90b3R5cGVPZihOb2RlLnByb3RvdHlwZSwgbnVsbCk7Cgpjb25zdCBnZXRUeXBlRnJvbU5vZGUgPSBtZW1vaXplKChub2RlLCBhc3QpID0+IG5ldyBUeXBlKG5vZGUudHlwZSwgYXN0KSwgbmV3IFdlYWtNYXAoKSk7CgpleHBvcnQgZnVuY3Rpb24gUGF0aE9mKG5vZGUsIGFzdCA9IGdsb2JhbFRoaXNbJyQnXS5kYXRhKSB7CiAgcmV0dXJuIG5ldyBQb2ludGVyKERlZXBQYXRoT2YoYXN0LCBub2RlPy5hc3QgPz8gbm9kZSkpOwp9CgpleHBvcnQgZnVuY3Rpb24qIEhpZXIobm9kZV9vcl9wYXRoLCB0ID0gKHAsIGFzdCwgYWJvcnQpID0+IHAuZGVyZWYoYXN0KSwgYXN0ID0gZ2xvYmFsVGhpc1snJCddLmRhdGEpIHsKICBsZXQgcDsKCiAgaWYobm9kZV9vcl9wYXRoICYmIG5vZGVfb3JfcGF0aC5raW5kKSBwID0gUGF0aE9mKG5vZGVfb3JfcGF0aCwgYXN0KTsKICBlbHNlIHAgPSBuZXcgUG9pbnRlcihub2RlX29yX3BhdGgpOwoKICBjb25zdCBoaWVyID0gcAogICAgLmhpZXIoKQogICAgLnJldmVyc2UoKQogICAgLmZpbHRlcihwID0+IHAuYXQoLTEpICE9ICdpbm5lcicpOwoKICBmb3IobGV0IHBwIG9mIGhpZXIpIHsKICAgIGNvbnN0IGRvQWJvcnQgPSBmYWxzZSwKICAgICAgYWJvcnRGbiA9ICgpID0+IChkb0Fib3J0ID0gdHJ1ZSk7CgogICAgeWllbGQgdChwcCwgYXN0LCBhYm9ydEZuKTsKCiAgICBpZihkb0Fib3J0KSBicmVhazsKICB9Cn0KCmV4cG9ydCBmdW5jdGlvbiBGaW5kVHlwZSh0eXBlTmFtZSwgYXN0ID0gZ2xvYmFsVGhpc1snJCddLmRhdGEpIHsKICBjb25zdCB0b2tlbnMgPSBbLi4udHlwZU5hbWUubWF0Y2hBbGwoL1tBLVphLXpfXVtBLVphLXowLTlfXSsvZyldLm1hcCgoW3Rva10pID0+IHRvayk7CgogIHdoaWxlKFsnY29uc3QnXS5pbmRleE9mKHRva2Vuc1swXSkgIT0gLTEpIHsKICAgIHRva2Vucy5zaGlmdCgpOwogICAgdHlwZU5hbWUgPSB0eXBlTmFtZS5yZXBsYWNlKG5ldyBSZWdFeHAoJ14nICsgdG9rZW5zWzBdICsgJ1xccyonKSwgJycpOwogIH0KCiAgY29uc3Qgbm9kZXMgPSBEZWVwU2VsZWN0KGFzdCwgdG9rZW5zWzBdKS5maWx0ZXIobm9kZSA9PiBub2RlLmlubmVyICYmIG5vZGUuaW5uZXIubGVuZ3RoKTsKICBjb25zb2xlLmxvZygnbm9kZXMnLCBub2Rlcyk7CgogIHJldHVybiBuZXcgVHlwZSh0eXBlTmFtZSwgYXN0KTsKfQoKZXhwb3J0IGNsYXNzIFBvaW50ZXJUeXBlIGV4dGVuZHMgTm9kZSB7CiAgcG9pbnRlZSA9IG51bGw7CgogIGNvbnN0cnVjdG9yKHBvaW50ZWUsIGFzdCwgbnMpIHsKICAgIHN1cGVyKGFzdCwgbnMpOwogICAgZGVmaW5lKHRoaXMsIHsgcG9pbnRlZSB9KTsKICB9CgogIHN0YXRpYyBmcm9tU3RyaW5nKHN0ciwgYXN0LCBucykgewogICAgY29uc3QgdCA9IHN0ci5yZXBsYWNlKC9eKC4qKVxzKlwqXHMqJC9nLCAnJDEnKTsKCiAgICBpZih0ICE9IHN0cikgewogICAgICBjb25zdCB0eXBlID0gVHlwZS5kZWNsYXJhdGlvbnMuZ2V0KHQpID8/IG5ldyBUeXBlKHQsIGFzdCwgbnMpOwogICAgICByZXR1cm4gbmV3IFBvaW50ZXJUeXBlKHR5cGUsIGFzdCwgbnMpOwogICAgfQogIH0KCiAgdG9TdHJpbmcoKSB7CiAgICByZXR1cm4gdGhpcy5wb2ludGVlICsgYCAqYDsKICB9Cn0KCmV4cG9ydCBjbGFzcyBSZWZlcmVuY2VUeXBlIGV4dGVuZHMgTm9kZSB7CiAgcG9pbnRlZSA9IG51bGw7CgogIGNvbnN0cnVjdG9yKHBvaW50ZWUsIGFzdCwgbnMpIHsKICAgIHN1cGVyKGFzdCwgbnMpOwogICAgZGVmaW5lKHRoaXMsIHsgcG9pbnRlZSB9KTsKICB9CgogIHN0YXRpYyBmcm9tU3RyaW5nKHN0ciwgYXN0LCBucykgewogICAgY29uc3QgdCA9IHN0ci5yZXBsYWNlKC9eKC4qKVxzKlwmXHMqJC9nLCAnJDEnKTsKCiAgICBpZih0ICE9IHN0cikgewogICAgICBjb25zdCB0eXBlID0gVHlwZS5kZWNsYXJhdGlvbnMuZ2V0KHQpID8/IG5ldyBUeXBlKHQsIGFzdCwgbnMpOwogICAgICByZXR1cm4gbmV3IFJlZmVyZW5jZVR5cGUodHlwZSwgYXN0LCBucyk7CiAgICB9CiAgfQoKICB0b1N0cmluZygpIHsKICAgIHJldHVybiB0aGlzLnBvaW50ZWUgKyBgICZgOwogIH0KfQoKZXhwb3J0IGNsYXNzIFR5cGUgZXh0ZW5kcyBOb2RlIHsKICBzdGF0aWMgZGVjbGFyYXRpb25zID0gbmV3IE1hcCgpOwogIHN0YXRpYyBub2RlMnR5cGUgPSBnZXRUeXBlRnJvbU5vZGUuY2FjaGU7CgogIGNvbnN0cnVjdG9yKG5vZGUsIGFzdCwgbnMpIHsKICAgIGxldCBuYW1lLCBkZXN1Z2FyZWQsIHR5cGVBbGlhcywgcXVhbFR5cGU7CgogICAgLy8gY29uc29sZS5sb2coJ1R5cGUuY29uc3RydWN0b3InLCBDLCB7IG5vZGUsIGFzdCB9KTsKCiAgICBhc3QgPz89IGdsb2JhbFRoaXNbJyQnXT8uZGF0YTsKCiAgICBpZihBcnJheS5pc0FycmF5KG5vZGUpKSB7CiAgICAgIHRocm93IG5ldyBFcnJvcihgTm9kZSBpcyBhcnJheSFgKTsKICAgIH0KCiAgICBpZihub2RlLmtpbmQpIHsKICAgICAgbmFtZSA9IE5hbWVGb3Iobm9kZSwgYXN0KTsKICAgICAgaWYoVHlwZS5kZWNsYXJhdGlvbnMuaGFzKG5hbWUpKSByZXR1cm4gVHlwZS5kZWNsYXJhdGlvbnMuZ2V0KG5hbWUpOwogICAgfQoKICAgIGlmKG5vZGUucXVhbFR5cGUgJiYgVHlwZS5kZWNsYXJhdGlvbnMuaGFzKG5vZGUucXVhbFR5cGUpKSByZXR1cm4gVHlwZS5kZWNsYXJhdGlvbnMuZ2V0KG5vZGUucXVhbFR5cGUpOwoKICAgIGlmKHR5cGVvZiBub2RlID09ICdzdHJpbmcnKSB7CiAgICAgIGxldCB0bXA7CgogICAgICBuYW1lID0gbm9kZS50cmltKCkucmVwbGFjZUFsbCgvXihjb25zdFxzK3x2b2xhdGlsZVxzK3wpKi9nLCAnJyk7CiAgICAgIHF1YWxUeXBlID0gbm9kZTsKICAgICAgbm9kZSA9IG51bGw7CgogICAgICBpZihUeXBlLmRlY2xhcmF0aW9ucy5oYXMobmFtZSkpIHJldHVybiBUeXBlLmRlY2xhcmF0aW9ucy5nZXQobmFtZSk7CgogICAgICBpZihhc3QgJiYgdHlwZW9mICh0bXAgPSBEZWVwRmluZChhc3QsIG5hbWUpKSA9PSAnb2JqZWN0JyAmJiB0bXAgIT0gbnVsbCkgewogICAgICAgIHRtcCA9ICdraW5kJyBpbiB0bXAgPyBUeXBlRmFjdG9yeSh0bXAsIGFzdCkgOiBuZXcgVHlwZSh0bXAsIGFzdCk7CgogICAgICAgIGlmKHRtcCkgbm9kZSA9ICdhc3QnIGluIHRtcCA/IHRtcC5hc3QgOiB0bXA7CiAgICAgIH0KCiAgICAgIGNvbnN0IGlzUG9pbnRlciA9IG5hbWUuZW5kc1dpdGgoJyonKTsKICAgICAgY29uc3QgaXNSZWZlcmVuY2UgPSBuYW1lLmVuZHNXaXRoKCcmJyk7CgogICAgICBpZihpc1BvaW50ZXIpIHsKICAgICAgICBub2RlID0gewogICAgICAgICAga2luZDogJ0N1c3RvbVR5cGUnLAogICAgICAgICAgcXVhbFR5cGU6IG5hbWUsCiAgICAgICAgICBkZXN1Z2FyZWRRdWFsVHlwZTogJ3ZvaWQgKicsCiAgICAgICAgfTsKICAgICAgfQoKICAgICAgaWYoIWlzUG9pbnRlciAmJiAhaXNSZWZlcmVuY2UgJiYgIW5vZGUpIHsKICAgICAgICBjb25zdCBzdWJzY3JpcHRzID0gR2V0U3Vic2NyaXB0cyhuYW1lKTsKICAgICAgICBuYW1lID8/PSBUcmltU3Vic2NyaXB0cyhuYW1lLCBzdWJzY3JpcHRzKTsKICAgICAgICAvL2NvbnNvbGUubG9nKCdUeXBlJywgeyBuYW1lLCBzdWJzY3JpcHRzIH0pOwoKICAgICAgICBpZihhc3QpIHsKICAgICAgICAgIG5vZGUgPSBHZXRUeXBlKG5hbWUsIGFzdCkgPz8gR2V0Q2xhc3MobmFtZSwgYXN0KTsKCiAgICAgICAgICAvL2lmKG5vZGUpIGNvbnNvbGUubG9nKGBGb3VuZCB0eXBlICR7bmFtZX1gLCBub2RlKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIGNvbnN0IHQgPSBub2RlPy5xdWFsVHlwZTsKCiAgICAgIGlmKC9cKlxzKiQvLnRlc3QodCkpIHJldHVybiBQb2ludGVyVHlwZS5mcm9tU3RyaW5nKHQsIGFzdCwgbnMpOwogICAgICBpZigvXCZccyokLy50ZXN0KHQpKSByZXR1cm4gUmVmZXJlbmNlVHlwZS5mcm9tU3RyaW5nKHQsIGFzdCwgbnMpOwoKICAgICAgaWYoJ3BhdGgnIGluIG5vZGUgJiYgJ3ZhbHVlJyBpbiBub2RlKSBub2RlID0gbm9kZS52YWx1ZTsKICAgIH0KCiAgICBpZihub2RlIGluc3RhbmNlb2YgTm9kZSkgewogICAgICByZXR1cm4gbm9kZTsKCiAgICAgIGNvbnNvbGUubG9nKCdub2RlJywgY2xhc3NOYW1lKG5vZGUpLCBub2RlKTsKCiAgICAgIHRocm93IG5ldyBFcnJvcigpOwogICAgfQoKICAgIHN1cGVyKG5vZGUpOwoKICAgIGlmKG5vZGU/LmtpbmQgJiYgbm9kZS5raW5kLnN0YXJ0c1dpdGgoJ0VudW0nKSkgbmFtZSA9ICdlbnVtICcgKyBuYW1lOwoKICAgIGxldCB0eXBlID0gLyondHlwZScgaW4gbm9kZSA/Ki8gbm9kZT8udHlwZSA/PyBub2RlOwoKICAgIG5hbWUgPSAvXlR5cGVkZWZ8UmVjb3JkLy50ZXN0KG5vZGU/LmtpbmQpID8gbm9kZS5uYW1lIDogKG5vZGU/LmFzdCA/PyBub2RlKT8ua2luZCA/IE5hbWVzcGFjZU9mKG5vZGU/LmFzdCA/PyBub2RlLCBhc3QpICsgJycgOiBub2RlPy5xdWFsVHlwZTsgICAgICAKICAgICBpZihub2RlPy50YWdVc2VkICYmIG5hbWUpIG5hbWUgPSAobm9kZS50YWdVc2VkID8gbm9kZS50YWdVc2VkICsgJyAnIDogJycpICsgbmFtZTsKIHF1YWxUeXBlID0gdHlwZT8ucXVhbFR5cGUgPz8gbm9kZT8ucXVhbFR5cGU7CgogICAgaWYoVHlwZS5kZWNsYXJhdGlvbnMuaGFzKG5hbWUpKSByZXR1cm4gVHlwZS5kZWNsYXJhdGlvbnMuZ2V0KG5hbWUpOwoKICAgIC8vY29uc29sZS5sb2coJ1R5cGUuY29uc3RydWN0b3InLCBjb25zb2xlLmNvbmZpZyh7IGRlcHRoOiAyIH0pLCB7IG5hbWUsIG5vZGUgfSk7CgogICAgZGVzdWdhcmVkID0gdHlwZT8uZGVzdWdhcmVkUXVhbFR5cGUgPz8gbm9kZT8uZGVzdWdhcmVkUXVhbFR5cGU7CiAgICB0eXBlQWxpYXMgPSB0eXBlPy50eXBlQWxpYXNEZWNsSWQgPz8gbm9kZT8udHlwZUFsaWFzRGVjbElkOwoKICAgIGlmKG5vZGU/LmlubmVyICYmIG5vZGUuaW5uZXJbMF0gJiYgbm9kZS5pbm5lclswXS5raW5kID09ICdFbGFib3JhdGVkVHlwZScpIHsKICAgICAgdHlwZUFsaWFzID8/PSBub2RlLmlubmVyWzBdPy5vd25lZFRhZ0RlY2w/LmlkOwoKICAgICAgaWYodHlwZUFsaWFzKSB7CiAgICAgICAgY29uc3QgYWxpYXMgPSBuZXcgVHlwZSgKICAgICAgICAgIGFzdC5pbm5lci5maW5kKG4gPT4gbi5pZCA9PSB0eXBlQWxpYXMpLAogICAgICAgICAgYXN0LAogICAgICAgICk7CgogICAgICAgIGlmKG5hbWUpIGFsaWFzLm5hbWUgPSBuYW1lOwogICAgICAgIGlmKHF1YWxUeXBlKSBhbGlhcy5xdWFsVHlwZSA9IHF1YWxUeXBlOwogICAgICAgIGlmKGRlc3VnYXJlZCkgYWxpYXMuZGVzdWdhcmVkID0gZGVzdWdhcmVkOwogICAgICB9CiAgICB9CgogICAgaWYoZGVzdWdhcmVkID09PSBxdWFsVHlwZSkgZGVzdWdhcmVkID0gdW5kZWZpbmVkOwogICAgaWYobmFtZSA9PSAnJykgbmFtZSA9IHVuZGVmaW5lZDsKCiAgICAvL2NvbnNvbGUubG9nKCdUeXBlLmNvbnN0cnVjdG9yJyxDLCB7bmFtZSxxdWFsVHlwZX0pOwoKICAgIGlmKG5zKSB7CiAgICAgIGlmKCFUeXBlLmRlY2xhcmF0aW9ucy5oYXMobmFtZSkpIFR5cGUuZGVjbGFyYXRpb25zLnNldChucywgdGhpcyk7CiAgICB9IGVsc2UgaWYobmFtZSkgewogICAgICBpZighVHlwZS5kZWNsYXJhdGlvbnMuaGFzKG5hbWUpKSBUeXBlLmRlY2xhcmF0aW9ucy5zZXQobmFtZSwgdGhpcyk7CiAgICB9IGVsc2UgaWYocXVhbFR5cGUpIHsKICAgICAgaWYoIVR5cGUuZGVjbGFyYXRpb25zLmhhcyhxdWFsVHlwZSkpIFR5cGUuZGVjbGFyYXRpb25zLnNldChxdWFsVHlwZSwgdGhpcyk7CiAgICB9CgogICAgaWYodHlwZUFsaWFzKSB0eXBlQWxpYXMgPSArdHlwZUFsaWFzOwoKICAgIGlmKG5hbWUpIHdlYWtEZWZpbmUodGhpcywgeyBuYW1lIH0pOwogICAgaWYocXVhbFR5cGUpIHdlYWtEZWZpbmUodGhpcywgeyBxdWFsVHlwZSB9KTsKICAgIGlmKGRlc3VnYXJlZCkgd2Vha0RlZmluZSh0aGlzLCB7IGRlc3VnYXJlZCB9KTsKICAgIGlmKHR5cGVBbGlhcykgZGVmaW5lKHRoaXMsIG5vbmVudW1lcmFibGUoeyB0eXBlQWxpYXMgfSkpOwoKICAgIGlmKHRoaXMuaXNQb2ludGVyKCkpIHsKICAgIH0gZWxzZSBpZih0aGlzLmlzRW51bSgpKSB7CiAgICAgIHRoaXMuZGVzdWdhcmVkID0gJ2ludCc7CiAgICB9CiAgfQoKICAvKiBwcmV0dGllci1pZ25vcmUgKi8gZ2V0IHJlZ0V4cCgpIHsgcmV0dXJuIG5ldyBSZWdFeHAoYCg/OiR7dGhpcy5xdWFsVHlwZX0ke3RoaXMudHlwZUFsaWFzID8gJ3wnICsgdGhpcy50eXBlQWxpYXMgOiAnJ30pYC5yZXBsYWNlKC9cKi9nLCAnXFwqJyksICdnJyk7IH0KCiAgaXNFbnVtKCkgewogICAgY29uc3Qgc3RyID0gdGhpcy5xdWFsVHlwZSB8fCB0aGlzICsgJyc7CiAgICByZXR1cm4gL15lbnVtXHMvLnRlc3Qoc3RyKTsKICB9CgogIGlzUG9pbnRlcigpIHsKICAgIGNvbnN0IHsgZGVzdWdhcmVkLCBxdWFsVHlwZSB9ID0gdGhpczsKICAgIHJldHVybiAvKD86XChcKlwpXCh8XCokKS8udGVzdChkZXN1Z2FyZWQpIHx8IC9cKiQvLnRlc3QocXVhbFR5cGUpOwogIH0KCiAgaXNSZWZlcmVuY2UoKSB7CiAgICBjb25zdCB7IGRlc3VnYXJlZCwgcXVhbFR5cGUgfSA9IHRoaXM7CiAgICByZXR1cm4gLyg/OlwoXCZcKVwofFwmJCkvLnRlc3QoZGVzdWdhcmVkKSB8fCAvXCYkLy50ZXN0KHF1YWxUeXBlKTsKICB9CgogIGlzRnVuY3Rpb24oKSB7CiAgICBjb25zdCBzdHIgPSB0aGlzICsgJyc7CiAgICByZXR1cm4gL1woLipcKSQvLnRlc3Qoc3RyKSAmJiAhL1woXCpcKVwoLy50ZXN0KHN0cik7CiAgfQoKICBpc0FycmF5KCkgewogICAgcmV0dXJuIC9cW1swLTldKlxdJC8udGVzdCh0aGlzICsgJycpOwogIH0KCiAgaXNJbnRlZ2VyKCkgewogICAgcmV0dXJuICF0aGlzLmlzUG9pbnRlcigpICYmICF0aGlzLmlzQ29tcG91bmQoKSAmJiAhdGhpcy5pc0Zsb2F0aW5nUG9pbnQoKTsKICB9CgogIGlzU3RydWN0KCkgewogICAgcmV0dXJuIHRoaXMudGFnID09ICdzdHJ1Y3QnOwogIH0KCiAgaXNDbGFzcygpIHsKICAgIHJldHVybiB0aGlzLnRhZyA9PSAnY2xhc3MnOwogIH0KCiAgYXJyYXlPZigpIHsKICAgIGNvbnN0IHR5cGVOYW1lID0gdGhpcy50cmltU3Vic2NyaXB0cygpOwogICAgcmV0dXJuIFR5cGUuZGVjbGFyYXRpb25zLmdldCh0eXBlTmFtZSk7CiAgfQoKICAvKiBwcmV0dGllci1pZ25vcmUgKi8gZ2V0IHN1YnNjcmlwdHMoKSB7IGlmKHRoaXMuaXNBcnJheSgpKSByZXR1cm4gR2V0U3Vic2NyaXB0cyh0aGlzKycnKTsgfQoKICB0cmltU3Vic2NyaXB0cygpIHsKICAgIHJldHVybiBUcmltU3Vic2NyaXB0cyh0aGlzICsgJycpOwogIH0KCiAgZ2V0IHBvaW50ZXIoKSB7CiAgICBjb25zdCBzdHIgPSB0aGlzICsgJyc7CiAgICBjb25zdCBuYW1lID0gc3RyLnJlcGxhY2UoL1xzKihcKiR8XChcKlwpKS8sICcnKTsKCiAgICBpZihuYW1lID09IHN0cikgcmV0dXJuIHVuZGVmaW5lZDsKCiAgICByZXR1cm4gbmFtZTsKICB9CgogIGdldCByZWZlcmVuY2UoKSB7CiAgICBjb25zdCBzdHIgPSB0aGlzICsgJyc7CiAgICBjb25zdCBuYW1lID0gc3RyLnJlcGxhY2UoL1xzKihcJiR8XChcJlwpKS8sICcnKTsKCiAgICBpZihuYW1lID09IHN0cikgcmV0dXJuIHVuZGVmaW5lZDsKCiAgICByZXR1cm4gbmFtZTsKICB9CgogIGdldFBvaW50ZXIoYXN0KSB7CiAgICBjb25zdCB0YXJnZXQgPSB0aGlzLnBvaW50ZXI7CgogICAgaWYodGFyZ2V0KSB7CiAgICAgIGNvbnN0IG5vZGUgPSBEZWVwRmluZChhc3QsIHRhcmdldCk7CgogICAgICBpZihub2RlKSByZXR1cm4gVHlwZUZhY3Rvcnkobm9kZSwgYXN0KTsKCiAgICAgIGlmKFR5cGUuZGVjbGFyYXRpb25zLmhhcyh0YXJnZXQpKSByZXR1cm4gVHlwZS5kZWNsYXJhdGlvbnMuZ2V0KHRhcmdldCk7CiAgICB9CiAgfQoKICAvKiBwcmV0dGllci1pZ25vcmUgKi8gZ2V0IHVuc2lnbmVkKCkgeyByZXR1cm4gLyg/OnVuc2lnbmVkfHVzaG9ydHx1aW50fHVsb25nKS8udGVzdCh0aGlzICsgJycpOyB9CiAgLyogcHJldHRpZXItaWdub3JlICovIGdldCBzaWduZWQoKSB7IHJldHVybiAvKD86XnxbXm5dKXNpZ25lZC8udGVzdCh0aGlzKycnKSB8fCAhdGhpcy51bnNpZ25lZDsgfQoKICBpc0NvbXBvdW5kKCkgewogICAgcmV0dXJuIC9eKGNsYXNzfHN0cnVjdHxlbnVtKSQvLnRlc3QodGhpcy50YWcgKyAnJykgfHwgLyg/OnN0cnVjdHx1bmlvbilccy8udGVzdCh0aGlzICsgJycpOwogIH0KCiAgaXNGbG9hdGluZ1BvaW50KCkgewogICAgcmV0dXJuIC8oPzpcIHxeKShmbG9hdHxkb3VibGUpJC8udGVzdCh0aGlzICsgJycpOwogIH0KCiAgLyogcHJldHRpZXItaWdub3JlICovIGdldCBhbGlhcygpIHsgaWYodGhpcy50eXBlQWxpYXMpIHJldHVybiBUeXBlLmdldCh0aGlzLnR5cGVBbGlhcyk7IH0KCiAgZ2V0IGFsaWFzZXMoKSB7CiAgICBjb25zdCBsaXN0ID0gW107CiAgICBsZXQgdHlwZSA9IHRoaXM7CgogICAgd2hpbGUodHlwZSkgewogICAgICBsaXN0LnB1c2godHlwZSk7CiAgICAgIHR5cGUgPSB0eXBlLmFsaWFzOwogICAgfQoKICAgIHJldHVybiBsaXN0OwogIH0KCiAgaXNFbnVtKCkgewogICAgZm9yKGxldCBhbGlhcyBvZiB0aGlzLmFsaWFzZXMpIGlmKC9eZW51bVxzLy50ZXN0KGFsaWFzICsgJycpKSByZXR1cm4gdHJ1ZTsKCiAgICByZXR1cm4gZmFsc2U7CiAgfQoKICBpc1N0cmluZygpIHsKICAgIGNvbnN0IHsgZGVzdWdhcmVkLCBxdWFsVHlwZSB9ID0gdGhpczsKCiAgICByZXR1cm4gL14oY29uc3QgfCljaGFyIFwqJC8udGVzdChkZXN1Z2FyZWQpIHx8IC9eKGNvbnN0IHwpY2hhciBcKiQvLnRlc3QocXVhbFR5cGUpIHx8IC9eKGNvbnN0IHwpY2hhciQvLnRlc3QodGhpcy5wb2ludGVyKTsKICB9CgogIGdldCBmZmkoKSB7CiAgICBjb25zdCB7IGRlc3VnYXJlZCwgcXVhbFR5cGUgfSA9IHRoaXM7CgogICAgbGV0IHN0ciA9IHRoaXMgKyAnJzsKICAgIGlmKHN0ci5zdGFydHNXaXRoKCdjb25zdCAnKSkgc3RyID0gc3RyLnN1YnN0cmluZyg2KTsKICAgIGlmKC9eY2hhclxzKlwqJC8udGVzdChzdHIpIHx8IHRoaXMuaXNTdHJpbmcoKSkgcmV0dXJuICdjaGFyIConOwoKICAgIGZvcihjb25zdCB0eXBlIG9mIFtzdHIsIGRlc3VnYXJlZF0pCiAgICAgIGlmKAogICAgICAgIFsKICAgICAgICAgICd2b2lkJywKICAgICAgICAgICdzaW50OCcsCiAgICAgICAgICAnc2ludDE2JywKICAgICAgICAgICdzaW50MzInLAogICAgICAgICAgJ3NpbnQ2NCcsCiAgICAgICAgICAndWludDgnLAogICAgICAgICAgJ3VpbnQxNicsCiAgICAgICAgICAndWludDMyJywKICAgICAgICAgICd1aW50NjQnLAogICAgICAgICAgJ2Zsb2F0JywKICAgICAgICAgICdkb3VibGUnLAogICAgICAgICAgJ3NjaGFyJywKICAgICAgICAgICd1Y2hhcicsCiAgICAgICAgICAnc3Nob3J0JywKICAgICAgICAgICd1c2hvcnQnLAogICAgICAgICAgJ3NpbnQnLAogICAgICAgICAgJ3VpbnQnLAogICAgICAgICAgJ3Nsb25nJywKICAgICAgICAgICd1bG9uZycsCiAgICAgICAgICAnbG9uZ2RvdWJsZScsCiAgICAgICAgICAncG9pbnRlcicsCiAgICAgICAgICAnaW50JywKICAgICAgICAgICdsb25nJywKICAgICAgICAgICdzaG9ydCcsCiAgICAgICAgICAnY2hhcicsCiAgICAgICAgICAnc2l6ZV90JywKICAgICAgICAgICd1bnNpZ25lZCBjaGFyJywKICAgICAgICAgICd1bnNpZ25lZCBpbnQnLAogICAgICAgICAgJ3Vuc2lnbmVkIGxvbmcnLAogICAgICAgICAgJ3ZvaWQgKicsCiAgICAgICAgICAnY2hhciAqJywKICAgICAgICAgICdzdHJpbmcnLAogICAgICAgIF0uaW5kZXhPZih0eXBlKSAhPSAtMQogICAgICApCiAgICAgICAgcmV0dXJuIHR5cGU7CgogICAgY29uc3QgeyBzaXplLCB1bnNpZ25lZCB9ID0gdGhpczsKCiAgICBpZihzaXplID09IFNJWkVPRl9QT0lOVEVSICYmICF0aGlzLmlzUG9pbnRlcigpKSByZXR1cm4gWycnLCAndW5zaWduZWQgJ11bdW5zaWduZWQgfCAwXSArICdsb25nJzsKCiAgICAvL2lmKHNpemUgPT0gU0laRU9GX1BPSU5URVIgJiYgdW5zaWduZWQpIHJldHVybiAnc2l6ZV90JzsKICAgIGlmKHNpemUgPT0gU0laRU9GX1BPSU5URVIgLyAyICYmICF1bnNpZ25lZCkgcmV0dXJuICdpbnQnOwogICAgaWYoc2l6ZSA9PSA0KSByZXR1cm4gWydzJywgJ3UnXVt1bnNpZ25lZCB8IDBdICsgJ2ludDMyJzsKICAgIGlmKHNpemUgPT0gMikgcmV0dXJuIFsncycsICd1J11bdW5zaWduZWQgfCAwXSArICdpbnQxNic7CiAgICBpZihzaXplID09IDEpIHJldHVybiBbJ3MnLCAndSddW3Vuc2lnbmVkIHwgMF0gKyAnaW50OCc7CgogICAgaWYodGhpcy5pc1BvaW50ZXIoKSkgcmV0dXJuICd2b2lkIConOwogICAgaWYoc2l6ZSA+IFNJWkVPRl9QT0lOVEVSKSByZXR1cm4gJ3ZvaWQgKic7CiAgICBpZihzaXplID09PSAwKSByZXR1cm4gJ3ZvaWQnOwoKICAgIHN0ciA/Pz0gdGhpcyArICcnOwoKICAgIGlmKFR5cGUuZGVjbGFyYXRpb25zLmhhcyhzdHIpKSB7CiAgICAgIGNvbnN0IGRlY2wgPSBUeXBlLmRlY2xhcmF0aW9ucy5nZXQoc3RyKTsKCiAgICAgIGlmKGRlY2wua2luZCA9PSAnRW51bURlY2wnKSByZXR1cm4gJ2ludCc7CiAgICB9IGVsc2UgewogICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIGZmaSB0eXBlICcke3N0cn0nICR7c2l6ZX0gJHtjbGFzc05hbWUodGhpcyl9ICR7dGhpcy5hc3Qua2luZH1gKTsKICAgIH0KICB9CgogIGdldCBzaXplKCkgewogICAgaWYodGhpcy5pc1BvaW50ZXIoKSkgcmV0dXJuIFNJWkVPRl9QT0lOVEVSOwogICAgaWYodGhpcy5pc0VudW0oKSkgcmV0dXJuIFNJWkVPRl9JTlQ7CiAgICBpZih0aGlzLmlzQ29tcG91bmQoKSkgewogICAgICBjb25zdCBub2RlID0gVHlwZS5nZXQodGhpcyArICcnKTsKCiAgICAgIGlmKG5vZGUgJiYgbm9kZSAhPT0gdGhpcykgcmV0dXJuIG5vZGUuc2l6ZTsKICAgIH0KICAgIGNvbnN0IGRlc3VnYXJlZCA9IHRoaXMuZGVzdWdhcmVkIHx8IHRoaXMgKyAnJyB8fCB0aGlzLm5hbWU7CgogICAgaWYoZGVzdWdhcmVkID09ICdjaGFyJykgcmV0dXJuIDE7CiAgICBjb25zdCByZSA9IC8oPzpefFxzKV8qdT9pbnQoWzAtOV0rKShfdHwpJC87CgogICAgbGV0IHNpemUsIG1hdGNoOwoKICAgIGlmKHRoaXMuaXNBcnJheSgpKSB7CiAgICAgIHNpemUgPz89IHRoaXMuYXJyYXlPZigpPy5zaXplOwogICAgICBmb3IobGV0IFtpbmRleCwgc3Vic2NyaXB0XSBvZiB0aGlzLnN1YnNjcmlwdHMpIHNpemUgKj0gc3Vic2NyaXB0OwogICAgfQoKICAgIGlmKChtYXRjaCA9IHJlLmV4ZWMoZGVzdWdhcmVkKSkpIHsKICAgICAgY29uc3QgWywgYml0c10gPSBtYXRjaDsKICAgICAgaWYoIWlzTmFOKCtiaXRzKSkgcmV0dXJuICtiaXRzIC8gODsKICAgIH0KCiAgICBpZigobWF0Y2ggPSAvXlteXChdKlwoKFteXCldKilcKS4qLy5leGVjKGRlc3VnYXJlZCkpKSBpZiAobWF0Y2hbMV0gPT0gJyonKSByZXR1cm4gU0laRU9GX1BPSU5URVI7CgogICAgbWF0Y2ggPSAvXih1bnNpZ25lZFxzK3xzaWduZWRccyt8Y29uc3Rccyt8dm9sYXRpbGVccyt8bG9uZ1xzK3xzaG9ydFxzKykqKFteXFtdKlteIFxbXF1dKSAqXFs/KFteXF1dKikuKiQvZy5leGVjKGRlc3VnYXJlZCk7CgogICAgaWYobWF0Y2gpIHsKICAgICAgc3dpdGNoIChtYXRjaFsyXSkgewogICAgICAgIGNhc2UgJ2NoYXInOgogICAgICAgICAgc2l6ZSA9IDE7CiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSAnaW50OF90JzoKICAgICAgICBjYXNlICd1aW50OF90JzoKICAgICAgICBjYXNlICdib29sJzoKICAgICAgICAgIHNpemUgPSAxOwogICAgICAgICAgYnJlYWs7CgogICAgICAgIGNhc2UgJ3NpemVfdCc6CiAgICAgICAgY2FzZSAncHRyZGlmZl90JzoKICAgICAgICBjYXNlICd2b2lkIConOgogICAgICAgIGNhc2UgJ2xvbmcnOgogICAgICAgICAgc2l6ZSA9IFNJWkVPRl9QT0lOVEVSOwogICAgICAgICAgYnJlYWs7CgogICAgICAgIGNhc2UgJ2ludDE2X3QnOgogICAgICAgIGNhc2UgJ3VpbnQxNl90JzoKICAgICAgICBjYXNlICdzaG9ydCc6CiAgICAgICAgICBzaXplID0gMjsKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlICdpbnQzMl90JzoKICAgICAgICBjYXNlICd1aW50MzJfdCc6CiAgICAgICAgY2FzZSAndW5zaWduZWQgaW50JzoKICAgICAgICBjYXNlICdpbnQnOgogICAgICAgICAgc2l6ZSA9IDQ7CiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSAnbG9uZyBkb3VibGUnOgogICAgICAgICAgc2l6ZSA9IDE2OwogICAgICAgICAgYnJlYWs7CgogICAgICAgIGNhc2UgJ2ludDY0X3QnOgogICAgICAgIGNhc2UgJ3VpbnQ2NF90JzoKICAgICAgICBjYXNlICdsb25nIGxvbmcnOgogICAgICAgICAgc2l6ZSA9IDg7CiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSAnZmxvYXQnOgogICAgICAgICAgc2l6ZSA9IDQ7CiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSAnZG91YmxlJzoKICAgICAgICAgIHNpemUgPSA4OwogICAgICAgICAgYnJlYWs7CgogICAgICAgIGNhc2UgJ3ZvaWQnOgogICAgICAgICAgc2l6ZSA9IDA7CiAgICAgICAgICBicmVhazsKICAgICAgfQoKICAgICAgaWYoc2l6ZSA9PT0gdW5kZWZpbmVkICYmIG1hdGNoWzJdLmVuZHNXaXRoKCcqJykpIHNpemUgPSBTSVpFT0ZfUE9JTlRFUjsKICAgICAgaWYoc2l6ZSA9PT0gdW5kZWZpbmVkICYmICh0aGlzLnF1YWxUeXBlIHx8ICcnKS5zdGFydHNXaXRoKCdlbnVtICcpKSBzaXplID0gNDsKICAgIH0KCiAgICBpZihzaXplID09PSB1bmRlZmluZWQpIHNpemUgPSBOYU47CgogICAgcmV0dXJuIHNpemU7CiAgfQoKICB0b0pTKCkgewogICAgaWYodGhpcy5pc1N0cmluZygpKSByZXR1cm4gJ1N0cmluZyc7CgogICAgcmV0dXJuICdOdW1iZXInOwogIH0KCiAgW1N5bWJvbC50b1ByaW1pdGl2ZV0oaGludCkgewogICAgaWYoaGludCA9PSAnZGVmYXVsdCcgfHwgaGludCA9PSAnc3RyaW5nJykgcmV0dXJuICh0aGlzLnF1YWxUeXBlID8/IHRoaXMuZGVzdWdhcmVkUXVhbFR5cGUgPz8gdGhpcz8uYXN0Py5uYW1lID8/ICcnKS5yZXBsYWNlKC9ccysoXCorKSQvLCAnJDEnKTsgLy90aGlzKycnOwoKICAgIHJldHVybiB0aGlzOwogIH0KCiAgdG9KU09OKG9iaikgewogICAgY29uc3QgeyBxdWFsVHlwZSwgc2l6ZSB9ID0gdGhpczsKCiAgICByZXR1cm4gc3VwZXIudG9KU09OKHsgLi4ub2JqLCBxdWFsVHlwZSwgc2l6ZSB9KTsKICB9CgogIHN0YXRpYyBnZXQobmFtZV9vcl9pZCwgYXN0ID0gZ2xvYmFsVGhpc1snJCddLmRhdGEpIHsKICAgIGxldCB0eXBlOwogICAgY29uc3Qgbm9kZSA9CiAgICAgIGFzdC5pbm5lci5maW5kKHR5cGVvZiBuYW1lX29yX2lkID09ICdudW1iZXInID8gbm9kZSA9PiAvKD86RGVjbHxUeXBlKS8udGVzdChub2RlLmtpbmQpICYmICtub2RlLmlkID09IG5hbWVfb3JfaWQgOiBub2RlID0+IC8oPzpEZWNsfFR5cGUpLy50ZXN0KG5vZGUua2luZCkgJiYgbm9kZS5uYW1lID09IG5hbWVfb3JfaWQpID8/CiAgICAgIEdldFR5cGUobmFtZV9vcl9pZCwgYXN0KTsKCiAgICBpZihub2RlKSB7CiAgICAgIGlmKG5vZGUudHlwZSkgdHlwZSA9IGdldFR5cGVGcm9tTm9kZShub2RlLCBhc3QpOwogICAgICBlbHNlIHR5cGUgPSBUeXBlRmFjdG9yeShub2RlLCBhc3QpOwogICAgICBpZihub2RlLm5hbWUgJiYgdHlwZW9mIG5hbWVfb3JfaWQgIT0gJ3N0cmluZycpIG5hbWVfb3JfaWQgPSBub2RlLm5hbWU7CiAgICB9CgogICAgaWYodHlwZW9mIG5hbWVfb3JfaWQgPT0gJ3N0cmluZycgJiYgIVR5cGUuZGVjbGFyYXRpb25zLmhhcyhuYW1lX29yX2lkKSkgVHlwZS5kZWNsYXJhdGlvbnMuc2V0KG5hbWVfb3JfaWQsIHR5cGUpOwoKICAgIHJldHVybiB0eXBlOwogIH0KfQoKVHlwZS5kZWNsYXJhdGlvbnMuc2V0KCd2b2lkJywgbmV3IFR5cGUoeyBxdWFsVHlwZTogJ3ZvaWQnIH0pKTsKVHlwZS5kZWNsYXJhdGlvbnMuc2V0KCdjaGFyJywgbmV3IFR5cGUoeyBxdWFsVHlwZTogJ2NoYXInIH0pKTsKVHlwZS5kZWNsYXJhdGlvbnMuc2V0KCdpbnQnLCBuZXcgVHlwZSh7IHF1YWxUeXBlOiAnaW50JyB9KSk7ClR5cGUuZGVjbGFyYXRpb25zLnNldCgnc2hvcnQnLCBuZXcgVHlwZSh7IHF1YWxUeXBlOiAnc2hvcnQnIH0pKTsKVHlwZS5kZWNsYXJhdGlvbnMuc2V0KCdsb25nJywgbmV3IFR5cGUoeyBxdWFsVHlwZTogJ2xvbmcnIH0pKTsKVHlwZS5kZWNsYXJhdGlvbnMuc2V0KCdsb25nIGxvbmcnLCBuZXcgVHlwZSh7IHF1YWxUeXBlOiAnbG9uZyBsb25nJyB9KSk7ClR5cGUuZGVjbGFyYXRpb25zLnNldCgnX19pbnQxMjgnLCBuZXcgVHlwZSh7IHF1YWxUeXBlOiAnX19pbnQxMjgnIH0pKTsKVHlwZS5kZWNsYXJhdGlvbnMuc2V0KCd1bnNpZ25lZCBjaGFyJywgbmV3IFR5cGUoeyBxdWFsVHlwZTogJ3Vuc2lnbmVkIGNoYXInIH0pKTsKVHlwZS5kZWNsYXJhdGlvbnMuc2V0KCd1bnNpZ25lZCBpbnQnLCBuZXcgVHlwZSh7IHF1YWxUeXBlOiAndW5zaWduZWQgaW50JyB9KSk7ClR5cGUuZGVjbGFyYXRpb25zLnNldCgndW5zaWduZWQgc2hvcnQnLCBuZXcgVHlwZSh7IHF1YWxUeXBlOiAndW5zaWduZWQgc2hvcnQnIH0pKTsKVHlwZS5kZWNsYXJhdGlvbnMuc2V0KCd1bnNpZ25lZCBsb25nJywgbmV3IFR5cGUoeyBxdWFsVHlwZTogJ3Vuc2lnbmVkIGxvbmcnIH0pKTsKVHlwZS5kZWNsYXJhdGlvbnMuc2V0KCd1bnNpZ25lZCBsb25nIGxvbmcnLCBuZXcgVHlwZSh7IHF1YWxUeXBlOiAndW5zaWduZWQgbG9uZyBsb25nJyB9KSk7ClR5cGUuZGVjbGFyYXRpb25zLnNldCgndW5zaWduZWQgX19pbnQxMjgnLCBuZXcgVHlwZSh7IHF1YWxUeXBlOiAndW5zaWduZWQgX19pbnQxMjgnIH0pKTsKVHlwZS5kZWNsYXJhdGlvbnMuc2V0KCdmbG9hdCcsIG5ldyBUeXBlKHsgcXVhbFR5cGU6ICdmbG9hdCcgfSkpOwpUeXBlLmRlY2xhcmF0aW9ucy5zZXQoJ2RvdWJsZScsIG5ldyBUeXBlKHsgcXVhbFR5cGU6ICdkb3VibGUnIH0pKTsKVHlwZS5kZWNsYXJhdGlvbnMuc2V0KCd2b2lkIConLCBuZXcgVHlwZSh7IHF1YWxUeXBlOiAndm9pZCAqJyB9KSk7ClR5cGUuZGVjbGFyYXRpb25zLnNldCgnY2hhciAqJywgbmV3IFR5cGUoeyBxdWFsVHlwZTogJ2NoYXIgKicgfSkpOwpUeXBlLmRlY2xhcmF0aW9ucy5zZXQoJ2NvbnN0IGNoYXIgKicsIG5ldyBUeXBlKHsgcXVhbFR5cGU6ICdjb25zdCBjaGFyIConIH0pKTsKVHlwZS5kZWNsYXJhdGlvbnMuc2V0KCdib29sJywgbmV3IFR5cGUoeyBxdWFsVHlwZTogJ2Jvb2wnIH0pKTsKCmZ1bmN0aW9uIFJvdW5kVG8odmFsdWUsIGFsaWduKSB7CiAgcmV0dXJuIE1hdGguZmxvb3IoKHZhbHVlICsgKGFsaWduIC0gMSkpIC8gYWxpZ24pICogYWxpZ247Cn0KCmV4cG9ydCBjbGFzcyBSZWNvcmREZWNsIGV4dGVuZHMgVHlwZSB7CiAgY29uc3RydWN0b3Iobm9kZSwgYXN0LCBucykgewogICAgc3VwZXIobm9kZSwgYXN0KTsKICAgIGNvbnN0IHsgaWQsIHRhZ1VzZWQsIGlubmVyIH0gPSBub2RlOwoKICAgIHRoaXMubmFtZSA/Pz0gTmFtZUZvcihub2RlLCBhc3QsIG5zKTsKCiAgICBpZihpbm5lcj8uZmluZChjaGlsZCA9PiBjaGlsZC5raW5kID09ICdQYWNrZWRBdHRyJykpIHRoaXMucGFja2VkID0gdHJ1ZTsKICAgIGNvbnN0IGZpZWxkcyA9IGlubmVyPy5maWx0ZXIoY2hpbGQgPT4gY2hpbGQua2luZC5lbmRzV2l0aCgnRGVjbCcpKTsKCiAgICBpZih0YWdVc2VkKSB0aGlzLnRhZyA9IHRhZ1VzZWQ7CgogICAgaWYoZmllbGRzKSB7CiAgICAgIGxldCB0YWcsIGFjY2VzczsKCiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnbWVtYmVycycsIHsKICAgICAgICBnZXQ6IG1lbW9pemUoKCkgPT4KICAgICAgICAgIGZpZWxkcwogICAgICAgICAgICAuZmlsdGVyKG5vZGUgPT4gISgncGFyZW50RGVjbENvbnRleHRJZCcgaW4gbm9kZSkgJiYgbm9kZS5raW5kICE9ICdGcmllbmREZWNsJykKICAgICAgICAgICAgLnJlZHVjZSgoYWNjLCBub2RlKSA9PiB7CiAgICAgICAgICAgICAgbGV0IHsgbmFtZSwga2luZCB9ID0gbm9kZTsKICAgICAgICAgICAgICBsZXQgdHlwZTsKCiAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnbWVtYmVycycsIGNvbnNvbGUuY29uZmlnKHsgY29tcGFjdDogdHJ1ZSB9KSwgeyBuYW1lLCBraW5kIH0pOwoKICAgICAgICAgICAgICBpZihub2RlLmlzQml0ZmllbGQpIG5hbWUgKz0gJzonICsgbm9kZS5pbm5lclswXS5pbm5lclswXS52YWx1ZTsKCiAgICAgICAgICAgICAgaWYoa2luZC5lbmRzV2l0aCgnRGVjbCcpKSB7CiAgICAgICAgICAgICAgICBpZihraW5kLnN0YXJ0c1dpdGgoJ0luZGlyZWN0JykpIHsKICAgICAgICAgICAgICAgICAgdHlwZSA9IG51bGw7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYobm9kZT8udHlwZT8ucXVhbFR5cGUgJiYgLyggYXQgKS8udGVzdChub2RlLnR5cGUucXVhbFR5cGUpKSB7CiAgICAgICAgICAgICAgICAgIGxldCBsb2MgPSBub2RlLnR5cGUucXVhbFR5cGUuc3BsaXQoLyg/OlxzKlsoKV18IGF0ICkvZylbMl07CiAgICAgICAgICAgICAgICAgIGxldCBbZmlsZSwgbGluZSwgY29sdW1uXSA9IGxvYy5zcGxpdCgvOi9nKS5tYXAoaSA9PiAoIWlzTmFOKCtpKSA/ICtpIDogaSkpOwoKICAgICAgICAgICAgICAgICAgbGV0IHR5cGVQYXRocyA9IFsuLi5EZWVwU2VsZWN0KGlubmVyLCBuID0+IG4ubGluZSA9PSBsaW5lLCBkZWVwLlJFVFVSTl9QQVRIKV07CiAgICAgICAgICAgICAgICAgIGxldCB0eXBlUGF0aCA9IFBhdGhSZW1vdmVMb2ModHlwZVBhdGhzWzBdKTsKICAgICAgICAgICAgICAgICAgbGV0IHR5cGVOb2RlID0gRGVlcEdldChpbm5lciwgdHlwZVBhdGgpOwogICAgICAgICAgICAgICAgICB0eXBlID0gVHlwZUZhY3RvcnkodHlwZU5vZGUsIGFzdCwgbnMpOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmKGtpbmQgPT0gJ0VudW1EZWNsJykgewogICAgICAgICAgICAgICAgICAvKmxldCBlbnRyaWVzID0gbm9kZS5pbm5lci5tYXAoKHsgaWQsIGtpbmQsIG5hbWUsIHR5cGUgfSkgPT4gW25hbWUsIHR5cGVdKTsKCiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0VudW1EZWNsJywgY29uc29sZS5jb25maWcoeyBjb21wYWN0OiB0cnVlIH0pLCB7IG5hbWUsIGtpbmQsIGVudHJpZXMgfSk7Ki8KICAgICAgICAgICAgICAgICAgLypmb3IobGV0IFtuYW1lLCB2YWx1ZV0gb2YgZW50cmllcykgYWNjLnB1c2goW25hbWUsIHZhbHVlXSk7Ki8KICAgICAgICAgICAgICAgIH0gZWxzZSBpZigvKE1ldGhvZHxGcmllbmQpLy50ZXN0KGtpbmQpKSB7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYoa2luZC5zdGFydHNXaXRoKCdBY2Nlc3MnKSkgewogICAgICAgICAgICAgICAgICBhY2Nlc3MgPSBub2RlLmFjY2VzczsKCiAgICAgICAgICAgICAgICAgIHJldHVybiBhY2M7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYoa2luZC5zdGFydHNXaXRoKCdDWFhSZWNvcmQnKSkgewogICAgICAgICAgICAgICAgICB0YWcgPSBub2RlLnRhZ1VzZWQ7CiAgICAgICAgICAgICAgICAgIGlmKHRhZyA9PSAnY2xhc3MnKSBhY2Nlc3MgPSAncHJpdmF0ZSc7CgogICAgICAgICAgICAgICAgICByZXR1cm4gYWNjOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmKGtpbmQuc3RhcnRzV2l0aCgnQ1hYJykpIHsKICAgICAgICAgICAgICAgICAgdHlwZSA9IFR5cGVGYWN0b3J5KG5vZGUsIGFzdCwgbnMpOwoKICAgICAgICAgICAgICAgICAgaWYoL3N0cnVjdG9yLy50ZXN0KGtpbmQpKSBkZWZpbmUodHlwZSwgbm9uZW51bWVyYWJsZSh7IGN0b3JkdG9yOiAvQ29uc3RydWN0b3IvLnRlc3Qoa2luZCkgPyAnY29uc3RydWN0b3InIDogJ2Rlc3RydWN0b3InIH0pKTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZihraW5kLnN0YXJ0c1dpdGgoJ0ZpZWxkJykgJiYgIVsncHJvdGVjdGVkJywgJ3ByaXZhdGUnXS5pbmNsdWRlcyhub2RlLmFjY2VzcykpIHsKICAgICAgICAgICAgICAgICAgdHlwZSA9IFR5cGVGYWN0b3J5KG5vZGUsIGFzdCwgbnMpOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmKG5vZGUudHlwZSkgewogICAgICAgICAgICAgICAgICB0eXBlID0gbmV3IFR5cGUobm9kZS50eXBlLCBhc3QsIG5zKTsKICAgICAgICAgICAgICAgICAgaWYodHlwZS5kZXN1Z2FyZWQgJiYgdHlwZS5kZXN1Z2FyZWQuc3RhcnRzV2l0aCgnc3RydWN0ICcpKSB7CiAgICAgICAgICAgICAgICAgICAgbGV0IHRtcCA9IGFzdC5pbm5lci5maW5kKG4gPT4gbi5raW5kID09ICdSZWNvcmREZWNsJyAmJiBuLm5hbWUgPT0gL15zdHJ1Y3QuLy50ZXN0KG4ubmFtZSkpOwogICAgICAgICAgICAgICAgICAgIGlmKHRtcCkgdHlwZSA9IFR5cGVGYWN0b3J5KHRtcC52YWx1ZSwgYXN0LCBucyk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gZWxzZSBpZihub2RlLmtpbmQuc3RhcnRzV2l0aCgnUmVjb3JkJykpIHsKICAgICAgICAgICAgICAgICAgdHlwZSA9IG5ldyBSZWNvcmREZWNsKG5vZGUsIGFzdCwgbnMpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBub2RlLmtpbmQ9JHtub2RlLmtpbmR9IGApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgaWYodHlwZT8uYXN0Py5pc0ltcGxpY2l0KSByZXR1cm4gYWNjOwoKICAgICAgICAgICAgICBpZighdHlwZSkgdHlwZSA9IG5vZGUua2luZC5zdGFydHNXaXRoKCdJbmRpcmVjdCcpID8gbnVsbCA6IFR5cGVGYWN0b3J5KG5vZGUsIGFzdCwgbnMpOwoKICAgICAgICAgICAgICBpZih0eXBlICYmIGFjY2VzcykgZGVmaW5lKHR5cGUsIG5vbmVudW1lcmFibGUoeyBhY2Nlc3MgfSkpOwoKICAgICAgICAgICAgICAvKiAgICAgICAgICBpZih0eXBlIGluc3RhbmNlb2YgRW51bURlY2wpIHsKICAgICAgICAgICAgZm9yKGxldCBbbmFtZSxbLHZhbHVlXV0gb2YgdHlwZS5tZW1iZXJzKSB7CiAgICAgICAgICBhY2MucHVzaChbbmFtZSwgdHlwZV0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgKi8KICAgICAgICAgICAgICBhY2MucHVzaChbbmFtZSwgdHlwZV0pOwoKICAgICAgICAgICAgICByZXR1cm4gYWNjOwogICAgICAgICAgICB9LCBbXSkKICAgICAgICAgICAgLm1hcCgoW25hbWUsIHRdKSA9PiBPYmplY3QuYXNzaWduKHQsIHsgbmFtZSB9KSksCiAgICAgICAgKSwKICAgICAgfSk7CiAgICB9CiAgfQoKICBnZXQgc2l6ZSgpIHsKICAgIGNvbnN0IHsgbWVtYmVycyA9IFtdIH0gPSB0aGlzOwoKICAgIHJldHVybiBSb3VuZFRvKAogICAgICBbLi4ubWVtYmVyc10ucmVkdWNlKChhY2MsIFtuYW1lLCB0eXBlXSkgPT4gewogICAgICAgIGlmKE51bWJlci5pc0Zpbml0ZSh0eXBlPy5zaXplKSkgewogICAgICAgICAgaWYodHlwZS5zaXplID09IDgpIGFjYyA9IFJvdW5kVG8oYWNjLCA4KTsKICAgICAgICAgIHJldHVybiBhY2MgKyBSb3VuZFRvKHR5cGUuc2l6ZSwgNCk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBhY2M7CiAgICAgIH0sIDApLAogICAgICBTSVpFT0ZfUE9JTlRFUiwKICAgICk7CiAgfQoKICB0b0pTT04oKSB7CiAgICBjb25zdCB7IG5hbWUsIHNpemUsIG1lbWJlcnMgfSA9IHRoaXM7CiAgICByZXR1cm4gc3VwZXIudG9KU09OKHsKICAgICAgbmFtZSwKICAgICAgc2l6ZSwKICAgICAgbWVtYmVyczogbWVtYmVycy5tYXAoKFtuYW1lLCBtZW1iZXJdKSA9PiBbbmFtZSwgbWVtYmVyICE9IG51bGwgJiYgbWVtYmVyLnRvSlNPTiA/IG1lbWJlci50b0pTT04oKSA6IG1lbWJlcl0pLAogICAgfSk7CiAgfQp9CgpleHBvcnQgY2xhc3MgRW51bURlY2wgZXh0ZW5kcyBUeXBlIHsKICBjb25zdHJ1Y3Rvcihub2RlLCBhc3QpIHsKICAgIHN1cGVyKG5vZGUsIGFzdCk7CgogICAgLy8vaWYobm9kZS5uYW1lKSB0aGlzLm5hbWUgPSBgZW51bSAke25vZGUubmFtZX1gOwoKICAgIGNvbnN0IGNvbnN0YW50cyA9IG5vZGUuaW5uZXIuZmlsdGVyKGNoaWxkID0+IGNoaWxkLmtpbmQgPT0gJ0VudW1Db25zdGFudERlY2wnKTsKICAgIGxldCBudW1iZXIgPSAxOwoKICAgIHRoaXMubWVtYmVycyA9IG5ldyBNYXAoCiAgICAgIGNvbnN0YW50cy5tYXAoKHsgbmFtZSwgdHlwZSwgaW5uZXIgfSkgPT4gewogICAgICAgIGxldCB2YWx1ZSA9IGlubmVyID8gUHJpbnROb2RlKGlubmVyWzBdKSA6IHVuZGVmaW5lZDsKCiAgICAgICAgaWYodmFsdWUgIT09ICcnICYmIHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyAmJiAhaXNOYU4oK3ZhbHVlKSkgewogICAgICAgICAgdmFsdWUgPSArdmFsdWU7CiAgICAgICAgfQoKICAgICAgICBpZih0eXBlb2YgdmFsdWUgIT0gJ251bWJlcicpIHZhbHVlID0gbnVtYmVyOwoKICAgICAgICBudW1iZXIgPSB2YWx1ZSArIDE7CiAgICAgICAgcmV0dXJuIFtuYW1lLCB0aGlzLm5hbWUgKyBuYW1lXTsgLy9bbmV3IFR5cGUodHlwZSwgYXN0KSwgdmFsdWVdXTsKICAgICAgfSksCiAgICApOwogIH0KCiAgdG9KU09OKCkgewogICAgY29uc3QgeyBuYW1lLCBzaXplLCBtZW1iZXJzIH0gPSB0aGlzOwogICAgcmV0dXJuIHN1cGVyLnRvSlNPTih7IG5hbWUsIHNpemUsIG1lbWJlcnMgfSk7CiAgfQp9CgpleHBvcnQgY2xhc3MgVHlwZWRlZkRlY2wgZXh0ZW5kcyBUeXBlIHsKICBjb25zdHJ1Y3Rvcihub2RlLCBhc3QsIG5zKSB7CiAgICBzdXBlcihub2RlLCBhc3QsIG5zKTsKCiAgICBsZXQgaW5uZXIgPSAobm9kZS5pbm5lciA/PyBbXSkuZmlsdGVyKG4gPT4gIS9Db21tZW50Ly50ZXN0KG4ua2luZCkpOwogICAgbGV0IHR5cGU7CgogICAgbGV0IHsgdHlwZUFsaWFzIH0gPSBub2RlOwoKICAgIGxldCB0eXBlSWQgPSBEZWVwRmluZChpbm5lciwgKHYsIGspID0+IGsgPT0gJ2RlY2wnKT8uaWQ7CgogICAgaWYodHlwZUFsaWFzKSB0eXBlID0gYXN0LmlubmVyLmZpbmQobiA9PiBuLmlkID09IHR5cGVBbGlhcyk7CiAgICBlbHNlIGlmKHR5cGVJZCkgdHlwZSA9IGFzdC5pbm5lci5maW5kKG4gPT4gbi5pZCA9PSB0eXBlSWQpOwogICAgZWxzZSB0eXBlID0gbm9kZS5pbm5lci5maW5kKG4gPT4gL1R5cGUvLnRlc3Qobi5raW5kKSk7CgogICAgLy90eXBlID8/PSBHZXRUeXBlKG5vZGUsIGFzdCk7CiAgICBhc3NlcnQoaW5uZXIubGVuZ3RoLCAxKTsKCiAgICBpZih0eXBlPy5kZWNsKSB0eXBlID0gdHlwZS5kZWNsOwogICAgaWYodHlwZT8ua2luZCAmJiB0eXBlLmtpbmQuZW5kc1dpdGgoJ1R5cGUnKSkgdHlwZSA9IHR5cGUudHlwZTsKCiAgICAvL2NvbnNvbGUubG9nKCdUeXBlZGVmRGVjbC5jb25zdHJ1Y3RvcicsIHsgbmFtZTogbm9kZS5uYW1lLCB0eXBlICB9KTsKCiAgICB0aGlzLm5hbWUgPSBub2RlLm5hbWU7CiAgICB0aGlzLnR5cGUgPSB0eXBlLmtpbmQgPyBUeXBlRmFjdG9yeSh0eXBlLCBhc3QsIGZhbHNlKSA6IG5ldyBUeXBlKHR5cGUsIGFzdCwgbnMpOwogIH0KCiAgLyogcHJldHRpZXItaWdub3JlICovIGdldCBzaXplKCkgeyByZXR1cm4gdGhpcy50eXBlPy5zaXplOyB9CgogIHRvSlNPTigpIHsKICAgIGNvbnN0IHsgbmFtZSwgc2l6ZSB9ID0gdGhpczsKICAgIHJldHVybiBzdXBlci50b0pTT04oeyBuYW1lLCBzaXplIH0pOwogIH0KfQoKZXhwb3J0IGNsYXNzIEZpZWxkRGVjbCBleHRlbmRzIE5vZGUgewogIGNvbnN0cnVjdG9yKG5vZGUsIGFzdCkgewogICAgc3VwZXIobm9kZSwgYXN0KTsKCiAgICBsZXQgdHlwZSA9IG5vZGUudHlwZSA/PyBHZXRUeXBlKG5vZGUsIGFzdCk7CgogICAgdGhpcy5uYW1lID0gbm9kZS5uYW1lOwogICAgdGhpcy50eXBlID0gVHlwZS5kZWNsYXJhdGlvbnMuZ2V0KHR5cGU/LnF1YWxUeXBlKSA/PyBuZXcgVHlwZSh0eXBlPy5xdWFsVHlwZSA/PyB0eXBlLCBhc3QpOwogIH0KfQoKZXhwb3J0IGNsYXNzIEZ1bmN0aW9uRGVjbCBleHRlbmRzIE5vZGUgewogIGNvbnN0cnVjdG9yKG5vZGUsIGFzdCwgbnMpIHsKICAgIHN1cGVyKG5vZGUsIGFzdCwgbnMpOwoKICAgIHRoaXMubmFtZSA9IG5vZGUubmFtZTsKCiAgICBpZihub2RlLm1hbmdsZWROYW1lICYmIG5vZGUubWFuZ2xlZE5hbWUgIT0gbm9kZS5uYW1lKSB7CiAgICAgIGRlZmluZSh0aGlzLCBub25lbnVtZXJhYmxlKHsgbWFuZ2xlZE5hbWU6IG5vZGUubWFuZ2xlZE5hbWUgfSkpOwogICAgfQoKICAgIGxldCBwYXJhbWV0ZXJzID0gbm9kZS5pbm5lcj8uZmlsdGVyKGNoaWxkID0+IGNoaWxkLmtpbmQgPT0gJ1Bhcm1WYXJEZWNsJyk7CiAgICBsZXQgYm9keSA9IG5vZGUuaW5uZXI/LmZpbmQoY2hpbGQgPT4gY2hpbGQua2luZCAhPSAnUGFybVZhckRlY2wnKTsKICAgIGxldCB0eXBlID0gbm9kZS50eXBlPy5xdWFsVHlwZTsKICAgIGxldCByZXR1cm5UeXBlID0gdHlwZS5yZXBsYWNlKC9ccypcKC4qLywgJycpOwoKICAgIGxldCBzdG9yYWdlQ2xhc3MgPSBub2RlLnN0b3JhZ2VDbGFzczsKCiAgICAvL2NvbnNvbGUubG9nKCdGdW5jdGlvbkRlY2wuY29uc3RydWN0b3InLCB7IG5hbWU6IHRoaXMubmFtZSwgdHlwZSwgcmV0dXJuVHlwZSB9KTsKCiAgICBpZihUeXBlLmRlY2xhcmF0aW9ucy5oYXMocmV0dXJuVHlwZSkpIHJldHVyblR5cGUgPSBUeXBlLmRlY2xhcmF0aW9ucy5nZXQocmV0dXJuVHlwZSk7CgogICAgbGV0IHQ7CgogICAgaWYodHlwZW9mIHJldHVyblR5cGUgPT0gJ3N0cmluZycgJiYgcmV0dXJuVHlwZS5lbmRzV2l0aCgnJicpKSB7CiAgICAgIHRoaXMucmV0dXJuVHlwZSA9IFJlZmVyZW5jZVR5cGUuZnJvbVN0cmluZyhyZXR1cm5UeXBlLCBhc3QsIG5zKTsKICAgIH0gZWxzZSBpZih0eXBlb2YgcmV0dXJuVHlwZSA9PSAnc3RyaW5nJyAmJiByZXR1cm5UeXBlLmVuZHNXaXRoKCcqJykpIHsKICAgICAgdGhpcy5yZXR1cm5UeXBlID0gUG9pbnRlclR5cGUuZnJvbVN0cmluZyhyZXR1cm5UeXBlLCBhc3QsIG5zKTsKICAgIH0gZWxzZSBpZih0eXBlb2YgcmV0dXJuVHlwZSA9PSAnc3RyaW5nJyAmJiAodCA9IEdldE5hbWVzcGFjZShyZXR1cm5UeXBlLCBhc3QpKSkgewogICAgICAvL2NvbnNvbGUubG9nKCdGdW5jdGlvbkRlY2wuY29uc3RydWN0b3InLCBDLCB7IHJldHVyblR5cGUsIHQgfSk7CiAgICAgIHRoaXMucmV0dXJuVHlwZSA9IG5ldyBUeXBlKHQsIGFzdCwgTmFtZXNwYWNlT2YodCwgYXN0KSk7CiAgICB9IGVsc2UgdGhpcy5yZXR1cm5UeXBlID0gcmV0dXJuVHlwZSBpbnN0YW5jZW9mIE5vZGUgPyByZXR1cm5UeXBlIDogdHlwZW9mIHJldHVyblR5cGUgIT0gJ3N0cmluZycgPyBUeXBlRmFjdG9yeShyZXR1cm5UeXBlLCBhc3QpIDogbmV3IFR5cGUocmV0dXJuVHlwZSwgYXN0KTsKCiAgICB0aGlzLnBhcmFtZXRlcnMgPSBwYXJhbWV0ZXJzICYmIHBhcmFtZXRlcnMubWFwKCh7IG5hbWUsIHR5cGUgfSkgPT4gW25hbWUsIG5ldyBUeXBlKHR5cGUsIGFzdCldKTsKICAgIHRoaXMuYm9keSA9IGJvZHk7CgogICAgaWYoc3RvcmFnZUNsYXNzKSB0aGlzLnN0b3JhZ2VDbGFzcyA9IHN0b3JhZ2VDbGFzczsKICB9CgogIGlzTWV0aG9kKCkgewogICAgcmV0dXJuIHRoaXMuYXN0LmtpbmQgPT0gJ0NYWE1ldGhvZERlY2wnOwogIH0KCiAgdG9KU09OKCkgewogICAgY29uc3QgeyBuYW1lLCBwYXJhbWV0ZXJzIH0gPSB0aGlzOwogICAgcmV0dXJuIHN1cGVyLnRvSlNPTih7IG5hbWUsIHBhcmFtZXRlcnMgfSk7CiAgfQp9CgpleHBvcnQgY2xhc3MgVmFyRGVjbCBleHRlbmRzIE5vZGUgewogIGNvbnN0cnVjdG9yKG5vZGUsIGFzdCkgewogICAgc3VwZXIobm9kZSwgYXN0KTsKCiAgICB0aGlzLm5hbWUgPSBub2RlLm5hbWU7CgogICAgaWYobm9kZS5tYW5nbGVkTmFtZSAmJiBub2RlLm1hbmdsZWROYW1lICE9IG5vZGUubmFtZSkgdGhpcy5tYW5nbGVkTmFtZSA9IG5vZGUubWFuZ2xlZE5hbWU7CgogICAgbGV0IHR5cGUgPSBub2RlLnR5cGU/LnF1YWxUeXBlOwogICAgLy9jb25zb2xlLmxvZygnVmFyRGVjbCcsIHsgdHlwZSB9KTsKCiAgICB0aGlzLnR5cGUgPSB0eXBlLmtpbmQgPyBUeXBlRmFjdG9yeSh0eXBlLCBhc3QpIDogbmV3IFR5cGUodHlwZSwgYXN0KTsKCiAgICAvL2NvbnNvbGUubG9nKCdWYXJEZWNsJywgdGhpcyk7CiAgfQoKICB0b0pTT04oKSB7CiAgICBjb25zdCB7IG5hbWUsIHR5cGUgfSA9IHRoaXM7CiAgICByZXR1cm4gc3VwZXIudG9KU09OKHsgbmFtZSwgdHlwZSB9KTsKICB9Cn0KCmV4cG9ydCBjbGFzcyBDbGFzc0RlY2wgZXh0ZW5kcyBSZWNvcmREZWNsIHsKICBjb25zdHJ1Y3Rvcihub2RlLCBhc3QpIHsKICAgIHN1cGVyKG5vZGUsIGFzdCk7CgogICAgLy9jb25zb2xlLmxvZygnQ2xhc3NEZWNsLmNvbnN0cnVjdG9yJywgeyBub2RlLCBhc3QgfSk7CiAgfQp9CgpleHBvcnQgY2xhc3MgQnVpbHRpblR5cGUgZXh0ZW5kcyBUeXBlIHsKICBjb25zdHJ1Y3Rvcihub2RlLCBhc3QpIHsKICAgIHN1cGVyKG5vZGUudHlwZSwgYXN0KTsKICB9Cn0KCi8qZXhwb3J0IGNsYXNzIFBvaW50ZXJUeXBlIGV4dGVuZHMgTm9kZSB7CiAgY29uc3RydWN0b3Iobm9kZSwgYXN0KSB7CiAgICBzdXBlcihub2RlLCBhc3QpOwogICAgYXNzZXJ0KG5vZGUuaW5uZXIubGVuZ3RoLCAxKTsKCiAgICB0aGlzLnR5cGUgPSBuZXcgVHlwZShub2RlLnR5cGUsIGFzdCk7CiAgICB0aGlzLnBvaW50ZWUgPSBUeXBlRmFjdG9yeShub2RlLmlubmVyWzBdLCBhc3QpOwogIH0KCiAgdG9KU09OKCkgewogICAgY29uc3QgeyBwb2ludGVlLCB0eXBlIH0gPSB0aGlzOwogICAgcmV0dXJuIHN1cGVyLnRvSlNPTih7IHBvaW50ZWUsIHR5cGUgfSk7CiAgfQp9Ki8KCmV4cG9ydCBjbGFzcyBDb25zdGFudEFycmF5VHlwZSBleHRlbmRzIE5vZGUgewogIGNvbnN0cnVjdG9yKG5vZGUsIGFzdCkgewogICAgc3VwZXIobm9kZSwgYXN0KTsKICAgIGxldCBlbGVtZW50VHlwZSA9IG5vZGUuaW5uZXJbMF07CiAgICBhc3NlcnQobm9kZS5pbm5lci5sZW5ndGgsIDEpOwogICAgaWYoZWxlbWVudFR5cGUuZGVjbCkgZWxlbWVudFR5cGUgPSBlbGVtZW50VHlwZS5kZWNsOwogICAgdGhpcy50eXBlID0gbmV3IFR5cGUobm9kZS50eXBlLCBhc3QpOwogICAgdGhpcy5lbGVtZW50VHlwZSA9IFR5cGVGYWN0b3J5KGVsZW1lbnRUeXBlLCBhc3QpOwogIH0KCiAgdG9KU09OKCkgewogICAgY29uc3QgeyB0eXBlLCBlbGVtZW50VHlwZSB9ID0gdGhpczsKICAgIHJldHVybiBzdXBlci50b0pTT04oeyB0eXBlLCBlbGVtZW50VHlwZSB9KTsKICB9Cn0KCmV4cG9ydCBjbGFzcyBSYW5nZSB7CiAgI2JlZ2luID0gdW5kZWZpbmVkOwogICNlbmQgPSB1bmRlZmluZWQ7CgogIGNvbnN0cnVjdG9yKGJlZ2luLCBlbmQpIHsKICAgIGlmKGJlZ2luICE9PSB1bmRlZmluZWQpIHRoaXMuYmVnaW4gPSBiZWdpbjsKICAgIGlmKGVuZCAhPT0gdW5kZWZpbmVkKSB0aGlzLmVuZCA9IGVuZDsKICB9CgogIC8qIHByZXR0aWVyLWlnbm9yZSAqLyBnZXQgYmVnaW4oKSB7IHJldHVybiB0aGlzLiNiZWdpbjsgfQogIC8qIHByZXR0aWVyLWlnbm9yZSAqLyBzZXQgYmVnaW4odikgeyB0aGlzLiNiZWdpbiA9IExvY2F0aW9uLmZyb20odik7IH0KCiAgLyogcHJldHRpZXItaWdub3JlICovIGdldCBlbmQoKSB7IHJldHVybiB0aGlzLiNlbmQ7IH0KICAvKiBwcmV0dGllci1pZ25vcmUgKi8gc2V0IGVuZCh2KSB7IHRoaXMuI2VuZCA9IExvY2F0aW9uLmZyb20odik7IH0KCiAgdG9TdHJpbmcob3B0cyA9IHsgcHJpbnRGaWxlOiB0cnVlIH0pIHsKICAgIG9wdHMub25seU9mZnNldCA9IHRydWU7CiAgICByZXR1cm4gdGhpcy4jYmVnaW4udG9TdHJpbmcob3B0cykgKyAnLScgKyB0aGlzLiNlbmQudG9TdHJpbmcoeyAuLi5vcHRzLCBwcmludEZpbGU6IGZhbHNlIH0pOwogIH0KCiAgW1N5bWJvbC5pbnNwZWN0XShkZXB0aCwgb3B0cykgewogICAgY29uc3QgeyBiZWdpbiwgZW5kIH0gPSB0aGlzOwogICAgcmV0dXJuIGluc3BlY3QoCiAgICAgIHsKICAgICAgICBmaWxlOiBiZWdpbi5maWxlID8/IGVuZC5maWxlLAogICAgICAgIGJlZ2luOiBuZXcgTG9jYXRpb24oewogICAgICAgICAgLi4uYmVnaW4udG9PYmplY3QoKSwKICAgICAgICAgIGZpbGU6IHVuZGVmaW5lZCwKICAgICAgICAgIGxpbmU6IHVuZGVmaW5lZCwKICAgICAgICAgIGNvbDogdW5kZWZpbmVkLAogICAgICAgIH0pLAogICAgICAgIGVuZDogbmV3IExvY2F0aW9uKHsgLi4uZW5kLnRvT2JqZWN0KCksIGZpbGU6IHVuZGVmaW5lZCwgbGluZTogdW5kZWZpbmVkLCBjb2w6IHVuZGVmaW5lZCB9KSwKICAgICAgICBbU3ltYm9sLnRvU3RyaW5nVGFnXTogJ1JhbmdlJywKICAgICAgfSwKICAgICAgeyAuLi5vcHRzLCBjb21wYWN0OiBmYWxzZSwgY3VzdG9tSW5zcGVjdDogdHJ1ZSwgb25seU9mZnNldDogdHJ1ZSB9LAogICAgKTsKICB9CgogIGdldCBsZW5ndGgoKSB7CiAgICByZXR1cm4gdGhpcy4jZW5kIC0gdGhpcy4jYmVnaW47CiAgfQoKICB0b0FycmF5KCkgewogICAgcmV0dXJuIFt0aGlzLiNiZWdpbiwgdGhpcy4jZW5kXTsKICB9CgogIHRvT2JqZWN0KCkgewogICAgY29uc3QgeyBiZWdpbiwgZW5kIH0gPSB0aGlzOwogICAgcmV0dXJuIHsgYmVnaW46IGJlZ2luLnRvT2JqZWN0KCksIGVuZDogZW5kLnRvT2JqZWN0KCkgfTsKICB9CgogICpbU3ltYm9sLml0ZXJhdG9yXSgpIHsKICAgIHlpZWxkICt0aGlzLiNiZWdpbjsKICAgIHlpZWxkICt0aGlzLiNlbmQ7CiAgfQp9CgpSYW5nZS5wcm90b3R5cGVbU3ltYm9sLnRvU3RyaW5nVGFnXSA9ICdSYW5nZSc7CgpleHBvcnQgY2xhc3MgTG9jYXRpb24gewogICNsaW5lID0gdW5kZWZpbmVkOwogICNjb2x1bW4gPSB1bmRlZmluZWQ7CiAgI29mZnNldCA9IHVuZGVmaW5lZDsKICBmaWxlID0gdW5kZWZpbmVkOwoKICBzdGF0aWMgYXQoZmlsZSwgb2Zmc2V0KSB7CiAgICBsZXQgZGF0YSA9IFJlYWRGaWxlKGZpbGUsICd1dGYtOCcpLnNsaWNlKDAsIG9mZnNldCk7CiAgICBsZXQgbGFzdExpbmUgPSBkYXRhLnNsaWNlKGRhdGEubGFzdEluZGV4T2YoJ1xuJykgKyAxKTsKCiAgICByZXR1cm4gbmV3IHRoaXMoewogICAgICBsaW5lOiBjb3VudFN1YnN0cmluZyhkYXRhLCAnXG4nKSArIDEsCiAgICAgIGNvbDogbGFzdExpbmUubGVuZ3RoICsgMSwKICAgICAgZmlsZSwKICAgICAgb2Zmc2V0LAogICAgfSk7CiAgfQoKICBzdGF0aWMgZnJvbShsb2MpIHsKICAgIGlmKHR5cGVvZiBsb2MgPT0gJ29iamVjdCcgJiYgbG9jICE9IG51bGwgJiYgbG9jIGluc3RhbmNlb2YgTG9jYXRpb24pIHJldHVybiBsb2M7CiAgICB0cnkgewogICAgICByZXR1cm4gbmV3IExvY2F0aW9uKGxvYyk7CiAgICB9IGNhdGNoKGUpIHsKICAgICAgY29uc29sZS5sb2coJ0VSUk9SJywgZS5tZXNzYWdlLCBsb2MpOwogICAgICB0aHJvdyBlOwogICAgfQogIH0KCiAgY29uc3RydWN0b3IobG9jKSB7CiAgICBjb25zdCB7IGxpbmUsIGNvbCwgZmlsZSwgb2Zmc2V0IH0gPSBsb2M7CgogICAgaWYoJ2xpbmUnIGluIGxvYykgdGhpcy4jbGluZSA9IGxvYy5saW5lOwogICAgaWYoJ2NvbCcgaW4gbG9jKSB0aGlzLiNjb2x1bW4gPSBsb2MuY29sOwogICAgaWYoJ29mZnNldCcgaW4gbG9jKSB0aGlzLiNvZmZzZXQgPSBsb2Mub2Zmc2V0OwogICAgaWYoJ2ZpbGUnIGluIGxvYykgewogICAgICBjb25zdCBoYXZlRmlsZW5hbWUgPSB0eXBlb2YgbG9jLmZpbGUgPT0gJ3N0cmluZyc7CgogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2ZpbGUnLCB7IHZhbHVlOiBsb2MuZmlsZSwgZW51bWVyYWJsZTogdHJ1ZSwgd3JpdGFibGU6ICFoYXZlRmlsZW5hbWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTsKICAgIH0KICB9CgogIHVwZGF0ZShvdGhlcikgewogICAgZm9yKGxldCBwcm9wIG9mIFsnZmlsZScsICdvZmZzZXQnLCAnbGluZScsICdjb2x1bW4nXSkgewogICAgICBpZihvdGhlcltwcm9wXSkgdGhpc1twcm9wXSA9IG90aGVyW3Byb3BdOwogICAgfQogIH0KCiAgLyogcHJldHRpZXItaWdub3JlICovIGdldCBsaW5lKCkgeyByZXR1cm4gdGhpcy4jbGluZTsgfQogIC8qIHByZXR0aWVyLWlnbm9yZSAqLyBzZXQgbGluZSh2KSB7IGlmKHYgIT0gdGhpcy4jbGluZSkgdGhpcy4jY29sdW1uID0gdW5kZWZpbmVkOyB0aGlzLiNsaW5lID0gdjsgfQoKICAvKiBwcmV0dGllci1pZ25vcmUgKi8gZ2V0IGNvbHVtbigpIHsgcmV0dXJuIHRoaXMuI2NvbHVtbjsgfQogIC8qIHByZXR0aWVyLWlnbm9yZSAqLyBzZXQgY29sdW1uKHYpIHsgdGhpcy4jY29sdW1uID0gdjsgfQoKICAvKiBwcmV0dGllci1pZ25vcmUgKi8gZ2V0IG9mZnNldCgpIHsgcmV0dXJuIHRoaXMuI29mZnNldDsgfQogIC8qIHByZXR0aWVyLWlnbm9yZSAqLyBzZXQgb2Zmc2V0KHYpIHsgaWYodGhpcy4jb2Zmc2V0IC0gdiA8IHRoaXMuI2NvbHVtbikgdGhpcy4jY29sdW1uIC09IHRoaXMuI29mZnNldCAtIHY7IGVsc2UgeyB0aGlzLiNjb2x1bW4gPSB1bmRlZmluZWQ7IHRoaXMuI2xpbmUgPSB1bmRlZmluZWQ7IH0gdGhpcy4jb2Zmc2V0ID0gdjsgfQoKICBbU3ltYm9sLmZvcignbm9kZWpzLnV0aWwuaW5zcGVjdC5jdXN0b20nKV0oZGVwdGgsIG9wdHMgPSB7fSkgewogICAgY29uc3QgdGV4dCA9IG9wdHMuY29sb3JzID8gKHQsIC4uLmMpID0+ICdceDFiWycgKyBjLmpvaW4oJzsnKSArICdtJyArIHQgKyAnXHgxYlttJyA6IHQgPT4gdDsKICAgIHJldHVybiB0ZXh0KCdMb2NhdGlvbicsIDM4LCA1LCAxMTEpICsgJyAnICsgdGhpcy50b1N0cmluZyhvcHRzKTsKICB9CgogIHRvU3RyaW5nKG9wdHMgPSB7IHByaW50RmlsZTogdHJ1ZSwgb25seU9mZnNldDogZmFsc2UgfSkgewogICAgbGV0IGZpbGUgPSB0aGlzLmZpbGUsCiAgICAgIGNvbCA9IHRoaXMuI2NvbHVtbiwKICAgICAgbGluZSA9IHRoaXMuI2xpbmU7CiAgICBjb25zdCB7IHByaW50RmlsZSA9IHRydWUsIG9ubHlPZmZzZXQgPSBmYWxzZSB9ID0gb3B0czsKCiAgICBpZihsaW5lICE9PSB1bmRlZmluZWQgJiYgIW9ubHlPZmZzZXQpIHJldHVybiBbZmlsZSA/PyAnPGJ1aWx0aW4+JywgbGluZSwgLi4uKGNvbCAhPT0gdW5kZWZpbmVkID8gW2NvbF0gOiBbXSldLnNsaWNlKHByaW50RmlsZSA/IDAgOiAxKS5qb2luKCc6Jyk7CiAgICByZXR1cm4gYCR7cHJpbnRGaWxlICYmIGZpbGUgPyBmaWxlICsgJ0AnIDogJyd9JHt0aGlzLiNvZmZzZXR9YDsKICB9CgogIFtTeW1ib2wudG9QcmltaXRpdmVdKGhpbnQpIHsKICAgIHN3aXRjaCAoaGludCkgewogICAgICBjYXNlICdudW1iZXInOgogICAgICAgIHJldHVybiB0aGlzLm9mZnNldDsKICAgICAgY2FzZSAnc3RyaW5nJzoKICAgICAgZGVmYXVsdDoKICAgICAgICByZXR1cm4gdGhpcy50b1N0cmluZygpOwogICAgfQogIH0KCiAgdG9PYmplY3QoKSB7CiAgICBsZXQgcmV0ID0ge307CiAgICBpZih0aGlzLmZpbGUpIHJldC5maWxlID0gdGhpcy5maWxlOwogICAgaWYodGhpcy4jY29sdW1uKSByZXQuY29sID0gdGhpcy4jY29sdW1uOwogICAgaWYodGhpcy4jbGluZSkgcmV0LmxpbmUgPSB0aGlzLiNsaW5lOwogICAgLyppZih0eXBlb2YgdGhpcy4jb2Zmc2V0ID09ICdudW1iZXInKSovIHJldC5vZmZzZXQgPSB0aGlzLiNvZmZzZXQ7CgogICAgcmV0dXJuIHJldDsKICB9CgogIGxvY2FsZUNvbXBhcmUob3RoZXIpIHsKICAgIGxldCBzdHIgPSB0aGlzICsgJyc7CiAgICByZXR1cm4gc3RyLmxvY2FsZUNvbXBhcmUob3RoZXIgKyAnJyk7CiAgfQp9CgpleHBvcnQgZnVuY3Rpb24gVHlwZUZhY3Rvcnkobm9kZSwgYXN0LCBjYWNoZSA9IHRydWUpIHsKICBsZXQgb2JqOwoKICBsZXQgbnMgPSBOYW1lc3BhY2VPZihub2RlLCBhc3QpICsgJyc7CiAgLy9jb25zb2xlLmxvZygnVHlwZUZhY3Rvcnk6JywgeyBuYW1lLG5vZGUgfSk7CgogIGFzc2VydCgKICAgIG5vZGU/LmtpbmQsCiAgICBgTm90IGFuIEFTVCBub2RlOiAke2luc3BlY3Qobm9kZSwgewogICAgICBjb2xvcnM6IGZhbHNlLAogICAgICBjb21wYWN0OiAwLAogICAgICBkZXB0aDogSW5maW5pdHksCiAgICB9KX1gLAogICk7CgogIGlmKGNhY2hlICYmIChvYmogPSBUeXBlLmFzdDJub2RlLmdldChub2RlKSkpIHJldHVybiBvYmo7CgogIHN3aXRjaCAobm9kZS5raW5kKSB7CiAgICBjYXNlICdFbnVtRGVjbCc6CiAgICAgIG9iaiA9IG5ldyBFbnVtRGVjbChub2RlLCBhc3QpOwogICAgICBicmVhazsKICAgIGNhc2UgJ1JlY29yZERlY2wnOgogICAgICBvYmogPSBuZXcgUmVjb3JkRGVjbChub2RlLCBhc3QpOwogICAgICBicmVhazsKICAgIGNhc2UgJ0ZpZWxkRGVjbCc6CiAgICAgIG9iaiA9IG5ldyBGaWVsZERlY2wobm9kZSwgYXN0KTsKICAgICAgYnJlYWs7CiAgICBjYXNlICdUeXBlZGVmRGVjbCc6CiAgICAgIG9iaiA9IG5ldyBUeXBlZGVmRGVjbChub2RlLCBhc3QsIG5zKTsKICAgICAgYnJlYWs7CiAgICBjYXNlICdDWFhDb25zdHJ1Y3RvckRlY2wnOgogICAgY2FzZSAnQ1hYTWV0aG9kRGVjbCc6CiAgICBjYXNlICdDWFhEZXN0cnVjdG9yRGVjbCc6CiAgICBjYXNlICdGdW5jdGlvbkRlY2wnOgogICAgICBvYmogPSBuZXcgRnVuY3Rpb25EZWNsKG5vZGUsIGFzdCk7CiAgICAgIGJyZWFrOwogICAgY2FzZSAnQnVpbHRpblR5cGUnOgogICAgICBvYmogPSBuZXcgQnVpbHRpblR5cGUobm9kZSwgYXN0KTsKICAgICAgYnJlYWs7CiAgICBjYXNlICdQb2ludGVyVHlwZSc6CiAgICAgIG9iaiA9IG5ldyBQb2ludGVyVHlwZShub2RlLCBhc3QpOwogICAgICBicmVhazsKICAgIGNhc2UgJ0NvbnN0YW50QXJyYXlUeXBlJzoKICAgICAgb2JqID0gbmV3IENvbnN0YW50QXJyYXlUeXBlKG5vZGUsIGFzdCk7CiAgICAgIGJyZWFrOwogICAgY2FzZSAnQ1hYUmVjb3JkRGVjbCc6CiAgICAgIG9iaiA9IG5ldyBDbGFzc0RlY2wobm9kZSwgYXN0KTsKICAgICAgYnJlYWs7CiAgICBjYXNlICdWYXJEZWNsJzoKICAgICAgb2JqID0gbmV3IFZhckRlY2wobm9kZSwgYXN0KTsKICAgICAgYnJlYWs7CiAgICBjYXNlIHVuZGVmaW5lZDoKICAgICAgdGhyb3cgbmV3IEVycm9yKGBOb3QgYW4gQVNUIG5vZGU6ICR7aW5zcGVjdChub2RlLCB7IGNvbG9yczogZmFsc2UsIGNvbXBhY3Q6IDAgfSl9YCk7CiAgICAgIGJyZWFrOwoKICAgIGRlZmF1bHQ6CiAgICAgIGNvbnNvbGUubG9nKCdub2RlOicsIG5vZGUpOwogICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIHN1Y2gga2luZCBvZiBBU1Qgbm9kZTogJHtub2RlLmtpbmR9YCk7CiAgICAgIC8vb2JqID0gbmV3IFR5cGUobm9kZSwgYXN0KTsKICAgICAgYnJlYWs7CiAgfQogIHJldHVybiBvYmo7Cn0KCmV4cG9ydCBhc3luYyBmdW5jdGlvbiBTcGF3bkNvbXBpbGVyKGNvbXBpbGVyLCBpbnB1dCwgb3V0ZmlsZSwgYXJncyA9IFtdKSB7CiAgLy9jb25zb2xlLmxvZyhgU3Bhd25Db21waWxlcmAsIG5ldyBFcnJvcigpLnN0YWNrLnNwbGl0KC9cbi9nKS5zbGljZSgwLCAyKSk7CgogIGxldCBiYXNlID0gcGF0aC5iYXNlbmFtZShpbnB1dCwgcGF0aC5leHRuYW1lKGlucHV0KSk7CgogIGFyZ3MucHVzaChpbnB1dCk7CgogIGlmKGFyZ3MuaW5kZXhPZignLWFzdC1kdW1wPWpzb24nKSAhPSAtMSkgewogICAgYXJncy51bnNoaWZ0KGNvbXBpbGVyID8/ICdjbGFuZycpOwogICAgYXJncyA9IFtwcm9jZXNzPy5lbnY/LlNIRUxMID8/ICdzaCcsICctYycsICdleGVjICcgKyBhcmdzLm1hcChwID0+IChwLmluZGV4T2YoJyAnKSAhPSAtMSA/IGAnJHtwfSdgIDogcCkpLmpvaW4oJyAnKSArIChvdXRmaWxlID8gYCAxPiR7b3V0ZmlsZX1gIDogJycpXTsKICB9IGVsc2UgewogICAgaWYob3V0ZmlsZSkgewogICAgICBhcmdzLnVuc2hpZnQob3V0ZmlsZSk7CiAgICAgIGFyZ3MudW5zaGlmdCgnLW8nKTsKICAgIH0KICAgIGFyZ3MudW5zaGlmdChjb21waWxlciA/PyAnY2xhbmcnKTsKICB9CgogIGNvbnNvbGUubG9nKCdTcGF3bkNvbXBpbGVyJywgYXJncy5tYXAocCA9PiAocC5pbmRleE9mKCcgJykgIT0gLTEgPyBgJyR7cH0nYCA6IHApKS5qb2luKCcgJykgKyAob3V0ZmlsZSA/IGAgMT4ke291dGZpbGV9YCA6ICcnKSk7CgogIGxldCBjaGlsZCA9IFNwYXduKGFyZ3Muc2hpZnQoKSwgYXJncywgewogICAgYmxvY2s6IGZhbHNlLAogICAgc3RkaW86IFsnaW5oZXJpdCcsIG91dGZpbGUgPyAnaW5oZXJpdCcgOiAncGlwZScsICdwaXBlJ10sCiAgfSk7CgogIGxldCBqc29uID0gJycsCiAgICBlcnJvcnMgPSAnJywKICAgIG91dHB1dCA9ICcnOwogIGxldCBkb25lID0gZmFsc2U7CgogIGlmKGNoaWxkLnN0ZG91dCkgZm9yKGxldCBjaHVuayBvZiBmcy5yZWFkZXJTeW5jKGNoaWxkLnN0ZG91dCkpIG91dHB1dCArPSB0b1N0cmluZyhjaHVuayk7CgogIGZvcihsZXQgY2h1bmsgb2YgZnMucmVhZGVyU3luYyhjaGlsZC5zdGRlcnIpKSBlcnJvcnMgKz0gdG9TdHJpbmcoY2h1bmspOwoKICBsZXQgcGlkID0gYXdhaXQgY2hpbGQud2FpdCgpOwoKICBsZXQgeyBleGl0Y29kZSwgdGVybXNpZywgZXhpdGVkLCBzaWduYWxlZCwgc3RvcHBlZCwgY29udGludWVkIH0gPSBjaGlsZDsKCiAgLy9jb25zb2xlLmxvZygnU3Bhd25Db21waWxlcicsIGNvbnNvbGUuY29uZmlnKHsgY29tcGFjdDogdHJ1ZSB9KSwgeyBwaWQsIGV4aXRlZCwgZXhpdGNvZGUgfSk7CgogIGRvbmUgPSB0cnVlOwogIGxldCBlcnJvckxpbmVzID0gZXJyb3JzLnNwbGl0KC9cbi9nKS5maWx0ZXIobGluZSA9PiBsaW5lLnRyaW0oKSAhPSAnJyk7CiAgZXJyb3JMaW5lcyA9IGVycm9yTGluZXMuZmlsdGVyKGxpbmUgPT4gL2Vycm9yOi8udGVzdChsaW5lKSk7CiAgY29uc3QgbnVtRXJyb3JzID0gWy4uLigvXihbMC05XSspXHMvZy5leGVjKGVycm9yTGluZXMuZmluZChsaW5lID0+IC9lcnJvcnNcc2dlbmVyYXRlZC8udGVzdChsaW5lKSkgfHwgJzAnKSB8fCBbXSldWzBdIHx8IGVycm9yTGluZXMubGVuZ3RoOwogIGlmKG51bUVycm9ycykgewogICAgY29uc29sZS5sb2coJ2Vycm9yczonLCBlcnJvcnMpOwogICAgdGhyb3cgbmV3IEVycm9yKGVycm9yTGluZXMuam9pbignXG4nKSk7CiAgfQoKICBmdW5jdGlvbiBQaXBlUmVhZGVyKGZkLCBjYWxsYmFjaykgewogICAgbGV0IHJldDsKICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7CiAgICAgIG9zLnNldFJlYWRIYW5kbGVyKGZkLCAoKSA9PgogICAgICAgIFJlYWRQaXBlKGZkLCBkYXRhID0+IHsKICAgICAgICAgIGlmKGRhdGEpIHJldCA9IGNhbGxiYWNrKGRhdGEpOwogICAgICAgICAgZWxzZSByZXNvbHZlKHJldCk7CiAgICAgICAgfSksCiAgICAgICk7CiAgICB9KTsKICB9CgogIGZ1bmN0aW9uIFJlYWRQaXBlKGZkLCBjYWxsYmFjaykgewogICAgbGV0IGJ1ZiA9IG5ldyBBcnJheUJ1ZmZlcigxMDI0KTsKICAgIGxldCByID0gb3MucmVhZChmZCwgYnVmLCAwLCBidWYuYnl0ZUxlbmd0aCk7CiAgICBsZXQgZGF0YTsKICAgIGlmKHIgPiAwKSB7CiAgICAgIGRhdGEgPSBmcy5idWZmZXJUb1N0cmluZyhidWYuc2xpY2UoMCwgcikpOwogICAgfSBlbHNlIHsKICAgICAgb3Muc2V0UmVhZEhhbmRsZXIoZmQsIG51bGwpOwogICAgICBkYXRhID0gbnVsbDsKICAgIH0KICAgIGNhbGxiYWNrKGRhdGEpOwogIH0KICBmdW5jdGlvbiBSZWFkT3V0cHV0KGZkKSB7CiAgICBsZXQgYnVmID0gbmV3IEFycmF5QnVmZmVyKDEwMjQpOwogICAgbGV0IHIgPSBvcy5yZWFkKGZkLCBidWYsIDAsIGJ1Zi5ieXRlTGVuZ3RoKTsKICAgIGlmKHIgPiAwKSB7CiAgICAgIG91dHB1dCArPSBmcy5idWZmZXJUb1N0cmluZyhidWYuc2xpY2UoMCwgcikpOwogICAgfSBlbHNlIHsKICAgICAgb3Muc2V0UmVhZEhhbmRsZXIoZmQsIG51bGwpOwogICAgfQogIH0KICBsZXQgcmV0ID0geyBvdXRwdXQsIGV4aXRjb2RlLCBlcnJvcnM6IGVycm9yTGluZXMgfTsKICAvLyBjb25zb2xlLmxvZygnU3Bhd25Db21waWxlciByZXR1cm4nLCByZXQpOwoKICByZXR1cm4gcmV0Owp9CgpleHBvcnQgYXN5bmMgZnVuY3Rpb24gU291cmNlRGVwZW5kZW5jaWVzKC4uLmFyZ3MpIHsKICBpZihhcmdzLmxlbmd0aCA8IDMpIGFyZ3MudW5zaGlmdChwYXJhbXMuY29tcGlsZXIpOwoKICBsZXQgW2NvbXBpbGVyLCBzb3VyY2UsIGZsYWdzID0gW11dID0gYXJnczsKCiAgbGV0IHIgPSBhd2FpdCBTcGF3bkNvbXBpbGVyKGNvbXBpbGVyLCBzb3VyY2UsIG51bGwsIFsnLU1NJywgJy1JLicsIC4uLmZsYWdzXSk7CiAgbGV0IHsgb3V0cHV0LCByZXN1bHQsIGVycm9ycyB9ID0gKGdsb2JhbFRoaXMucmVzcG9uc2UgPSByKTsKICBvdXRwdXQgPSBvdXRwdXQucmVwbGFjZSgvXHMqXFxcblxzKi9nLCAnICcpOwogIGxldCBbb2JqZWN0LCBzb3VyY2VzXSA9IG91dHB1dC5zcGxpdCgvOlxzKy8pOwoKICBzb3VyY2VzID0gKHNvdXJjZXMgPz8gJycpLnRyaW0oKS5zcGxpdCgvIC9nKTsKICBsZXQgW2NvbXBpbGF0aW9uX3VuaXQsIC4uLmluY2x1ZGVzXSA9IHNvdXJjZXM7CgogIC8vY29uc29sZS5sb2coJ291dHB1dFsxXTonLCB7IGNvbXBpbGF0aW9uX3VuaXQsIGluY2x1ZGVzIH0pOwoKICByZXR1cm4gc291cmNlczsKfQoKZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIEFzdER1bXAoY29tcGlsZXIsIHNvdXJjZSwgYXJncywgZm9yY2UpIHsKICBjb21waWxlciA/Pz0gJ2NsYW5nJzsKICAvLyBjb25zb2xlLmxvZygnQXN0RHVtcCcsIHsgY29tcGlsZXIsIHNvdXJjZSwgYXJncywgZm9yY2UgfSk7CiAgbGV0IG91dHB1dCA9IHBhdGguYmFzZW5hbWUoc291cmNlLCBwYXRoLmV4dG5hbWUoc291cmNlKSkgKyAnLmFzdC5qc29uJzsKICBsZXQgYmpzb24gPSBwYXRoLmJhc2VuYW1lKG91dHB1dCwgJy5qc29uJykgKyAnLmJqc29uJzsKICBjb25zdCBwYXRocyA9IFtvdXRwdXQsIGJqc29uXTsKICBsZXQgcjsKICBsZXQgc291cmNlcyA9IGF3YWl0IFNvdXJjZURlcGVuZGVuY2llcyhjb21waWxlciwgc291cmNlLCBhcmdzKTsKICBsZXQgbmV3ZXI7CgogIGZvcihsZXQgcCBvZiBwYXRocykgewogICAgaWYoIWZzLmV4aXN0c1N5bmMocCkpIGNvbnRpbnVlOwoKICAgIGNvbnN0IGV4aXN0c0FuZE5vdEVtcHR5ID0gZnMuc2l6ZVN5bmMocCkgPiAwOwoKICAgIGlmKGV4aXN0c0FuZE5vdEVtcHR5KSBuZXdlciA9IE5ld2VyKHAsIC4uLnNvdXJjZXMpOwoKICAgIGlmKG5ld2VyKSBvdXRwdXQgPSBwOwogIH0KCiAgLy9jb25zb2xlLmxvZygnQXN0RHVtcCcsIGNvbnNvbGUuY29uZmlnKHtjb21wYWN0OiB0cnVlIH0pLCB7IGJqc29uLCBvdXRwdXQsIG5ld2VyLCBmb3JjZSwgcGF0aHMgfSk7CgogIGlmKCFmb3JjZSAmJiBuZXdlcikgewogICAgY29uc29sZS5sb2coYExvYWRpbmcgY2FjaGVkICcke291dHB1dH0nLi4uYCk7CiAgfSBlbHNlIHsKICAgIGNvbnNvbGUubG9nKGBDb21waWxpbmcgJyR7c291cmNlfScgdG8gJyR7b3V0cHV0fScuLi5gKTsKCiAgICB0cnkgewogICAgICBpZihmcy5leGlzdHNTeW5jKG91dHB1dCkpIGZzLnVubGlua1N5bmMob3V0cHV0KTsKICAgIH0gY2F0Y2goZSkge30KCiAgICBjb25zb2xlLmxvZyhgQ29tcGlsaW5nLi4uYCwgY29uc29sZS5jb25maWcoeyBjb21wYWN0OiBJbmZpbml0eSwgZGVwdGg6IDAgfSksIHsgc291cmNlLCBjb21waWxlciB9KTsKCiAgICBjb25zdCBjaGlsZCA9IGF3YWl0IFNwYXduQ29tcGlsZXIoY29tcGlsZXIsIHNvdXJjZSwgcGF0aHNbMF0sIFsnLVhjbGFuZycsICctYXN0LWR1bXA9anNvbicsICctZnN5bnRheC1vbmx5JywgJy1JLicsIC4uLmFyZ3NdKTsKCiAgICBsZXQgeyBleGl0Y29kZSwgZXJyb3JzLCAuLi5yZXN1bHQgfSA9IGNoaWxkOwoKICAgIC8vY29uc29sZS5sb2coYENvbXBpbGluZyAnJHtzb3VyY2V9Jy4uLmAsIGNvbnNvbGUuY29uZmlnKHtjb21wYWN0OiB0cnVlIH0pLCB7IG91dHB1dCwgZXhpdGNvZGUsIC4uLnJlc3VsdCB9KTsKICB9CiAgciA9IHsgZmlsZTogb3V0cHV0IH07CgogIC8vY29uc29sZS5sb2coJ0FzdER1bXAnLCBjb25zb2xlLmNvbmZpZyh7Y29tcGFjdDogdHJ1ZSB9KSwgeyAuLi5yIH0pOwoKICByID0gbGF6eVByb3BlcnRpZXMociwgewogICAgc2l6ZSgpIHsKICAgICAgcmV0dXJuIGZzLnN0YXQob3V0cHV0KT8uc2l6ZTsKICAgIH0sCiAgICBqc29uKCkgewogICAgICBjb25zdCBiaW5hcnkgPSAvXC5ianNvbiQvaS50ZXN0KHRoaXMuZmlsZSk7CgogICAgICByZXR1cm4gYmluYXJ5ID8gUmVhZEJKU09OKHRoaXMuZmlsZSwgbnVsbCkgOiBKU09OLnBhcnNlKGZzLnJlYWRGaWxlU3luYyh0aGlzLmZpbGUsICd1dGYtOCcpKTsKICAgIH0sCiAgICBkYXRhKCkgewogICAgICBsZXQgZGF0YSA9IHRoaXMuanNvbjsKICAgICAgbGV0IGZpbGU7CiAgICAgIGxldCBtYXhEZXB0aCA9IDA7CgogICAgICBmb3IobGV0IG5vZGUgb2YgZGF0YS5pbm5lcikgewogICAgICAgIGxldCByYW5nZTsKCiAgICAgICAgY29uc3QgU2V0RmlsZSA9IGxvYyA9PiB7CiAgICAgICAgICB0cnkgewogICAgICAgICAgICBpZihsb2MpIHsKICAgICAgICAgICAgICBpZihsb2MuZmlsZSkgZmlsZSA9IGxvYy5maWxlOwogICAgICAgICAgICAgIGVsc2UgbG9jLmZpbGUgPSBmaWxlOwogICAgICAgICAgICB9CiAgICAgICAgICB9IGNhdGNoKGUpIHt9CiAgICAgICAgfTsKICAgICAgICBTZXRGaWxlKG5vZGUubG9jKTsKICAgICAgICBTZXRGaWxlKG5vZGUucmFuZ2U/LmJlZ2luKTsKICAgICAgICBTZXRGaWxlKG5vZGUucmFuZ2U/LmVuZCk7CiAgICAgIH0KICAgICAgaWYoIS9cLmJqc29uJC9pLnRlc3QodGhpcy5maWxlKSkgewogICAgICAgIGNvbnNvbGUubG9nKGBXcml0aW5nICcke2Jqc29ufScuLi5gKTsKICAgICAgICBXcml0ZUJKU09OKGJqc29uLCBkYXRhKTsKICAgICAgICBjb25zb2xlLmxvZyhgRGVsZXRpbmcgJyR7dGhpcy5maWxlfScuLi5gKTsKICAgICAgICBmcy51bmxpbmtTeW5jKHRoaXMuZmlsZSk7CiAgICAgICAgdGhpcy5maWxlID0gYmpzb247CiAgICAgIH0KICAgICAgcmV0dXJuIGRhdGE7CiAgICB9LAogICAgZmlsZXMoKSB7CiAgICAgIHJldHVybiB1bmlxdWUodGhpcy5kYXRhLmlubmVyLm1hcChuID0+IG4ubG9jLmZpbGUpLmZpbHRlcihmaWxlID0+IGZpbGUgIT0gdW5kZWZpbmVkKSk7CiAgICB9LAogIH0pOwoKICByID0gZGVmaW5lKHIsIHsKICAgIG1hdGNoRmlsZXM6IG51bGwsCiAgICBub21hdGNoRmlsZXM6IC9eXC91c3IvLAogICAgZmlsdGVyKHByZWQsIHByZWQyID0gKHVzZWQsIGltcGxpY2l0KSA9PiB1c2VkICYmICFpbXBsaWNpdCkgewogICAgICByZXR1cm4gdGhpcy5kYXRhLmlubmVyLmZpbHRlcigKICAgICAgICBub2RlID0+CiAgICAgICAgICAoKG5vZGUubG9jLmZpbGUgIT09IHVuZGVmaW5lZCAmJiAoKHRoaXMubWF0Y2hGaWxlcyAmJiB0aGlzLm1hdGNoRmlsZXMudGVzdChub2RlLmxvYy5maWxlID8/ICcnKSkgfHwgIXRoaXMubm9tYXRjaEZpbGVzLnRlc3Qobm9kZS5sb2MuZmlsZSA/PyAnJykpKSB8fAogICAgICAgICAgICAocHJlZDIgPyBwcmVkMihub2RlLmlzVXNlZCwgbm9kZS5pc0ltcGxpY2l0KSA6IGZhbHNlKSkgJiYKICAgICAgICAgIHByZWQobm9kZSksCiAgICAgICk7CiAgICB9LAogIH0pOwogIHIgPSBsYXp5UHJvcGVydGllcyhyLCB7CiAgICB0eXBlcygpIHsKICAgICAgcmV0dXJuIE9iamVjdC5zZXRQcm90b3R5cGVPZigKICAgICAgICB0aGlzLmZpbHRlcigKICAgICAgICAgIG4gPT4gLyg/OlJlY29yZHxUeXBlZGVmfEVudW0pRGVjbC8udGVzdChuLmtpbmQpLAogICAgICAgICAgKCkgPT4gdHJ1ZSwKICAgICAgICApLAogICAgICAgIExpc3QucHJvdG90eXBlLAogICAgICApOwogICAgfSwKICAgIGZ1bmN0aW9ucygpIHsKICAgICAgbGV0IGxpc3QgPSB0aGlzLmZpbHRlcigKICAgICAgICBuID0+IC8oPzpGdW5jdGlvbilEZWNsLy50ZXN0KG4ua2luZCksCiAgICAgICAgKCkgPT4gdHJ1ZSwKICAgICAgKTsKCiAgICAgIGlmKGxpc3QubGVuZ3RoID09IDApIGxpc3QgPSBbLi4uRGVlcFNlbGVjdCh0aGlzLmRhdGEsIG4gPT4gbi5raW5kLnN0YXJ0c1dpdGgoJ0Z1bmN0aW9uRGVjbCcpKV07CgogICAgICByZXR1cm4gT2JqZWN0LnNldFByb3RvdHlwZU9mKGxpc3QsIExpc3QucHJvdG90eXBlKTsKICAgIH0sCiAgICBuYW1lc3BhY2VzKCkgewogICAgICByZXR1cm4gT2JqZWN0LnNldFByb3RvdHlwZU9mKFsuLi5EZWVwU2VsZWN0KHRoaXMuZGF0YSwgbiA9PiAnTmFtZXNwYWNlRGVjbCcgPT0gbi5raW5kKV0sIExpc3QucHJvdG90eXBlKTsKICAgIH0sCiAgICBjbGFzc2VzKCkgewogICAgICBsZXQgcHJlZGljYXRlID0gbiA9PiBuLmtpbmQgPT0gJ0NYWFJlY29yZERlY2wnICYmICFuLmlzSW1wbGljaXQ7CiAgICAgIC8qKFByZWRpY2F0ZS5wcm9wZXJ0eSgna2luZCcsIFByZWRpY2F0ZS5lcXVhbCgnQ1hYUmVjb3JkRGVjbCcpKSwKICAgICAgICBQcmVkaWNhdGUubm90KFByZWRpY2F0ZS5wcm9wZXJ0eSgnaXNJbXBsaWNpdCcsIFByZWRpY2F0ZS5lcXVhbCh0cnVlKSkpKTsqLwogICAgICAvL3ByZWRpY2F0ZSA9IG4gPT4gJ0NYWFJlY29yZERlY2wnID09IG4ua2luZCAmJiAhbi5pc0ltcGxpY2l0OwogICAgICByZXR1cm4gT2JqZWN0LnNldFByb3RvdHlwZU9mKFsuLi5EZWVwU2VsZWN0KHRoaXMuZGF0YSwgcHJlZGljYXRlKV0sIExpc3QucHJvdG90eXBlKTsKICAgIH0sCiAgICB2YXJpYWJsZXMoKSB7CiAgICAgIHJldHVybiBPYmplY3Quc2V0UHJvdG90eXBlT2YoCiAgICAgICAgdGhpcy5maWx0ZXIobiA9PiAvKD86VmFyKURlY2wvLnRlc3Qobi5raW5kKSksCiAgICAgICAgTGlzdC5wcm90b3R5cGUsCiAgICAgICk7CiAgICB9LAogICAgbmFtZXMoZGVwdGggPSAxKSB7CiAgICAgIHJldHVybiB0aGlzLmRhdGEuaW5uZXIuZmlsdGVyKG4gPT4gJ25hbWUnIGluIG4pLm1hcChuID0+IG4ubmFtZSk7CiAgICB9LAogIH0pOwogIHJldHVybiByOwp9CgpleHBvcnQgZnVuY3Rpb24gTmFtZUZvcihkZWNsLCBhc3QgPSBnbG9iYWxUaGlzWyckJ10/LmRhdGEpIHsKICBjb25zdCB7IGlkIH0gPSBkZWNsOwogIGxldCBwOwoKICBpZihpc09iamVjdChkZWNsKSAmJiBkZWNsLmFzdCkgZGVjbCA9IGRlY2wuYXN0OwoKICBpZihkZWNsLmtpbmQgJiYgL0NYWC8udGVzdChkZWNsLmtpbmQpKSByZXR1cm4gTmFtZXNwYWNlT2YoZGVjbCwgYXN0KSArICcnOwoKICBpZigocCA9IERlZXBGaW5kKGFzdCwgKHZhbHVlLCBrZXkpID0+IGtleSA9PSAnb3duZWRUYWdEZWNsJyAmJiB2YWx1ZS5pZCA9PSBpZCwgZGVlcC5SRVRVUk5fUEFUSCkpKSB7CiAgICBwID0gcC5zbGljZSgwLCAtMSk7CgogICAgbGV0IG5vZGUgPSBEZWVwR2V0KGFzdCwgcCk7CiAgICBsZXQgcGFyZW50ID0gRGVlcEdldChhc3QsIHAuc2xpY2UoMCwgLTIpKTsKCiAgICBpZihwYXJlbnQua2luZCA9PSAnVHlwZWRlZkRlY2wnICYmIHBhcmVudC5uYW1lKSByZXR1cm4gcGFyZW50Lm5hbWU7CgogICAgLy9jb25zb2xlLmxvZygncDonLCBwLCAnbm9kZTonLCBub2RlLCAncGFyZW50OicsIHBhcmVudCk7CgogICAgcmV0dXJuIG5vZGU/LnR5cGU/LmRlc3VnYXJlZFF1YWxUeXBlOwogIH0KfQoKZXhwb3J0IGZ1bmN0aW9uIE5vZGVUeXBlKG4pIHsKICByZXR1cm4gbi50eXBlCiAgICA/ICh0ID0+IHsKICAgICAgICBsZXQgeyB0eXBlQWxpYXNEZWNsSWQsIC4uLnR5cGUgfSA9IHQ7CiAgICAgICAgaWYodHlwZW9mIHR5cGVBbGlhc0RlY2xJZCA9PSAnc3RyaW5nJykgdHlwZS50eXBlQWxpYXNEZWNsID0gaWROb2Rlcy5nZXQodHlwZUFsaWFzRGVjbElkKTsKCiAgICAgICAgaWYoVHlwZS5kZWNsYXJhdGlvbnMgJiYgVHlwZS5kZWNsYXJhdGlvbnMuaGFzKHQuZGVzdWdhcmVkUXVhbFR5cGUpKSB7CiAgICAgICAgICB0eXBlID0gVHlwZS5kZWNsYXJhdGlvbnMuZ2V0KHQuZGVzdWdhcmVkUXVhbFR5cGUpOwogICAgICAgIH0KCiAgICAgICAgaWYoaXNPYmplY3QodHlwZSkgJiYgaXNPYmplY3QodHlwZS50eXBlKSkgdHlwZSA9IHR5cGUudHlwZTsKICAgICAgICByZXR1cm4gbmV3IFR5cGUodHlwZSk7CiAgICAgIH0pKG4udHlwZSkKICAgIDogTm9kZVR5cGUoRGVlcEZpbmQoYXN0LCBuID0+IGlzT2JqZWN0KG4pICYmIG4udHlwZSkpOwp9CgpleHBvcnQgZnVuY3Rpb24gTm9kZU5hbWUobiwgbmFtZSkgewogIGlmKHR5cGVvZiBuYW1lICE9ICdzdHJpbmcnKSBuYW1lID0gJyc7CiAgaWYobmFtZSA9PSAnJyAmJiBuLm5hbWUpIG5hbWUgPSBuLm5hbWU7CiAgaWYodHlwZW9mIG4gPT0gJ29iamVjdCcgJiYgbiAhPSBudWxsICYmIG4udGFnVXNlZCkgbmFtZSA9IG4udGFnVXNlZCArICcgJyArIG5hbWU7CiAgcmV0dXJuIG5hbWU7Cn0KCmV4cG9ydCBmdW5jdGlvbiogUmF3TG9jYXRpb24ocGF0aCkgewogIGZvcihsZXQgbm9kZSBvZiBIaWVyKHBhdGgpKSB7CiAgICBpZihub2RlLmxvYykgewogICAgICB5aWVsZCBub2RlLmxvYzsKICAgIH0gZWxzZSBpZihub2RlLnJhbmdlKSB7CiAgICAgIHlpZWxkIG5vZGUucmFuZ2UuYmVnaW47CiAgICAgIHlpZWxkIG5vZGUucmFuZ2UuZW5kOwogICAgfQogIH0KfQoKZXhwb3J0IGZ1bmN0aW9uKiBSYXdSYW5nZShwYXRoKSB7CiAgZm9yKGxldCBub2RlIG9mIEhpZXIocGF0aCkpIGlmKG5vZGUucmFuZ2UpIHlpZWxkIG5vZGUucmFuZ2U7Cn0KCmV4cG9ydCBmdW5jdGlvbiBDb21wbGV0ZUxvY2F0aW9uKHBhdGgpIHsKICBsZXQgYSA9IFtdOwogIGZvcihsZXQgcmF3IG9mIFJhd0xvY2F0aW9uKHBhdGgpKSB7CiAgICBhLnB1c2gocmF3KTsKICAgIGlmKHJhdy5maWxlKSBicmVhazsKICB9CiAgaWYoYVswXS5vZmZzZXQpIGEgPSBhLmZpbHRlcihsID0+ICEobC5vZmZzZXQgPiBhWzBdLm9mZnNldCkpOwogIGxldCBsb2MgPSB7fTsKICBmb3IobGV0IHJhdyBvZiBhLnJldmVyc2UoKSkgT2JqZWN0LmFzc2lnbihsb2MsIHJhdyk7CiAgcmV0dXJuIG5ldyBMb2NhdGlvbihsb2MpOwp9CgpleHBvcnQgZnVuY3Rpb24gQ29tcGxldGVSYW5nZShwYXRoKSB7CiAgbGV0IGEgPSBbXTsKICBmb3IobGV0IHJhdyBvZiBSYXdSYW5nZShwYXRoKSkgewogICAgYS5wdXNoKHJhdyk7CiAgfQogIGlmKGFbMF0uYmVnaW4ub2Zmc2V0KSBhID0gYS5maWx0ZXIobCA9PiAhKGwuYmVnaW4ub2Zmc2V0ID4gYVswXS5iZWdpbi5vZmZzZXQpKTsKICBsZXQgcmFuZ2UgPSB7IGJlZ2luOiB7fSwgZW5kOiB7fSB9OwogIGZvcihsZXQgeyBiZWdpbiwgZW5kIH0gb2YgYS5yZXZlcnNlKCkpIHsKICAgIE9iamVjdC5hc3NpZ24ocmFuZ2UuYmVnaW4sIGJlZ2luKTsKICAgIE9iamVjdC5hc3NpZ24ocmFuZ2UuZW5kLCBlbmQpOwogICAgLy9jb25zb2xlLmxvZygnQ29tcGxldGVSYW5nZScscmFuZ2UpCiAgfQogIHJldHVybiBuZXcgUmFuZ2UocmFuZ2UuYmVnaW4sIHJhbmdlLmVuZCk7Cn0KCmV4cG9ydCBmdW5jdGlvbiBHZXRMb2Mobm9kZSkgewogIGxldCBsb2MsIHJldDsKICBpZignbG9jJyBpbiBub2RlKSBsb2MgPSBub2RlLmxvYzsKICBlbHNlIGlmKCdyYW5nZScgaW4gbm9kZSkgbG9jID0gbm9kZS5yYW5nZTsKICBlbHNlIHJldHVybiBudWxsOwogIGlmKCdiZWdpbicgaW4gbG9jKSBsb2MgPSBsb2MuYmVnaW47CiAgaWYoJ2V4cGFuc2lvbkxvYycgaW4gbG9jKSBsb2MgPSBsb2MuZXhwYW5zaW9uTG9jOwoKICAvLyBpZighKCdvZmZzZXQnIGluIGxvYykpIHJldHVybiBudWxsOwoKICByZXQgPSBuZXcgTG9jYXRpb24obG9jKTsKCiAgcmV0dXJuIHJldDsKfQoKLypleHBvcnQgZnVuY3Rpb24gR2V0VHlwZShub2RlLCBhc3QpIHsKICBsZXQgdHlwZSwgZWxhYm9yYXRlZDsKCiAgLy8gIGNvbnNvbGUubG9nKCdHZXRUeXBlJywgbm9kZSk7CgogIGlmKChlbGFib3JhdGVkID0gbm9kZS5pbm5lcj8uZmluZChuID0+IG4ua2luZC5lbmRzV2l0aCgnVHlwZScpKSkpIHsKICAgIGlmKCh0eXBlID0gKGVsYWJvcmF0ZWQuaW5uZXIgPz8gW10pLmZpbmQobiA9PiBuLmRlY2wpKSkgdHlwZSA9IHR5cGUuZGVjbDsKICAgIGVsc2UgdHlwZSA9IGVsYWJvcmF0ZWQub3duZWRUYWdEZWNsOwogICAgaWYodHlwZSkgewogICAgICAvL2NvbnNvbGUubG9nKCdHZXRUeXBlJywgeyB0eXBlLCBpZDogdHlwZS5pZCB9KTsKICAgICAgbGV0IGRlY2xUeXBlID0gYXN0LmlubmVyLmZpbmQobiA9PiBuLmlkID09IHR5cGUuaWQpOwogICAgICBpZighZGVjbFR5cGUpIHRocm93IG5ldyBFcnJvcihgVHlwZSAke3R5cGUuaWR9IG5vdCBmb3VuZGApOwogICAgICB0eXBlID0gZGVjbFR5cGU7CiAgICB9CiAgfSBlbHNlIGlmKG5vZGUub3duZWRUYWdEZWNsKSB7CiAgICB0eXBlID0gbm9kZS5vd25lZFRhZ0RlY2w7CiAgfSBlbHNlIGlmKG5vZGUuaW5uZXIgJiYgbm9kZS5pbm5lci5sZW5ndGggPT0gMSAmJiBub2RlLmlubmVyWzBdLmtpbmQuZW5kc1dpdGgoJ1R5cGUnKSkKICAgIHR5cGUgPSBub2RlLmlubmVyWzBdOwoKICB0eXBlID8/PSBub2RlLnR5cGU7CiAgcmV0dXJuIHR5cGU7Cn0qLwoKZXhwb3J0IGZ1bmN0aW9uIEdldFR5cGVOb2RlKG5vZGUsIGFzdCA9IGdsb2JhbFRoaXNbJyQnXS5kYXRhKSB7CiAgZm9yKGxldCBuID0gW25vZGVdOyBuWzBdOyBuID0gblswXS5pbm5lcikgewogICAgbGV0IGk7CgogICAgaWYoKGkgPSBuLmZpbmQobm9kZSA9PiAvVHlwZS8udGVzdChub2RlLmtpbmQpKSkpIGlmIChpPy5kZWNsPy5pZCkgcmV0dXJuIGFzdC5pbm5lci5maW5kKG5vZGUgPT4gbm9kZS5pZCA9PSBpLmRlY2wuaWQpOwogIH0KfQoKZXhwb3J0IGZ1bmN0aW9uIEdldFR5cGVTdHIobm9kZSkgewogIGxldCB0eXBlOwogIGlmKG5vZGUudHlwZSkgdHlwZSA9IG5vZGUudHlwZTsKICBlbHNlIGlmKCdpbm5lcicgaW4gbm9kZSAmJiBub2RlLmlubmVyLnNvbWUoaW5uZXIgPT4gJ25hbWUnIGluIGlubmVyIHx8ICd0eXBlJyBpbiBpbm5lcikpIHsKICAgIHR5cGUgPSBub2RlLmlubmVyLm1hcChpbm5lciA9PiBbaW5uZXIubmFtZSwgR2V0VHlwZVN0cihpbm5lcildKTsKICAgIHJldHVybiAneyAnICsgdHlwZS5tYXAoKFtuLCB0XSkgPT4gYCR7dH0gJHtufTtgKS5qb2luKCcgJykgKyAnIH0nOwogIH0KICBpZih0eXBlb2YgdHlwZSAhPSAnb2JqZWN0JykgcmV0dXJuIHR5cGU7CgogIGlmKHR5cGUucXVhbFR5cGUpIHR5cGUgPSB0eXBlLnF1YWxUeXBlOwogIHJldHVybiB0eXBlOwp9CgpleHBvcnQgY2xhc3MgTm9kZUVycm9yIGV4dGVuZHMgRXJyb3IgewogIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIG5vZGUpIHsKICAgIHN1cGVyKG1lc3NhZ2UpOwoKICAgIHRoaXMubm9kZSA9IG5vZGU7CiAgfQp9CgpOb2RlRXJyb3IucHJvdG90eXBlW1N5bWJvbC50b1N0cmluZ1RhZ10gPSAnTm9kZUVycm9yJzsKCmV4cG9ydCBmdW5jdGlvbiBOb2RlUHJpbnRlcihhc3QpIHsKICBsZXQgb3V0ID0gJyc7CiAgbGV0IGRlcHRoID0gMDsKICBsZXQgcHJpbnRlcjsKCiAgZnVuY3Rpb24gcHV0KHN0cikgewogICAgb3V0ICs9IChzdHIgPz8gJycpLnJlcGxhY2VBbGwoJ1xuJywgJ1xuJyArICcgICcucmVwZWF0KGRlcHRoKSk7CiAgfQoKICBmdW5jdGlvbiB0cmltKCkgewogICAgb3V0ID0gb3V0LnRyaW1FbmQoKTsKICB9CgogIHByaW50ZXIgPSBmdW5jdGlvbihub2RlKSB7CiAgICBwcmludGVyLm5vZGVQcmludGVyLmFzdCA/Pz0gcHJpbnRlci5hc3Q7CgogICAgLy8gIGNvbnNvbGUubG9nKCdwcmludGVyKCknLCBpbnNwZWN0KHsgbm9kZSB9LCB7IGRlcHRoOiAxIH0pKTsKICAgIGNvbnNvbGUubG9nKHByaW50ZXIucHJpbnQobm9kZSkpOwoKICAgIHJldHVybiBwcmludGVyOwogIH07CiAgcHJpbnRlci5hc3QgPSBhc3Q7CgogIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHByaW50ZXIsIHsKICAgIG91dHB1dDogewogICAgICBnZXQoKSB7CiAgICAgICAgcmV0dXJuIG91dDsKICAgICAgfSwKICAgIH0sCiAgICBjbGVhcjogewogICAgICB2YWx1ZSgpIHsKICAgICAgICBvdXQgPSAnJzsKICAgICAgfSwKICAgIH0sCiAgICBwdXQ6IHsgdmFsdWU6IHB1dCB9LAoKICAgIHByaW50OiB7CiAgICAgIHZhbHVlKG5vZGUpIHsKICAgICAgICBsZXQgZm4gPSB0aGlzLm5vZGVQcmludGVyW25vZGUua2luZF07CiAgICAgICAgbGV0IG9sZGxlbiA9IG91dC5sZW5ndGg7CiAgICAgICAgaWYoIWZuKSB0aHJvdyAodGhpcy5lcnJvciA9IG5ldyBOb2RlRXJyb3IoYE5vIHN1Y2ggcHJpbnRlciBmb3IgJHtub2RlLmtpbmR9YCwgbm9kZSkpOwogICAgICAgIHRoaXMubm9kZSA9IG5vZGU7CgogICAgICAgIGxldCBzdWNjZXNzID0gZm4uY2FsbCh0aGlzLm5vZGVQcmludGVyLCBub2RlLCB0aGlzLmFzdCk7CgogICAgICAgIGlmKG91dC5sZW5ndGggPT0gb2xkbGVuKSB7CiAgICAgICAgICBjb25zb2xlLmxvZyhgcHJpbnRlciBlcnJvciBhdCAke2xvY31gLCBub2RlKTsKICAgICAgICAgIHRocm93ICh0aGlzLmVycm9yID0gbmV3IE5vZGVFcnJvcihgTm9kZSBwcmludGVyIGZvciAke25vZGUua2luZH0gKCR7dGhpcy5sb2N9KSBmYWlsZWRcbmAsIG5vZGUpKTsKICAgICAgICAgIHRoaXMubm9kZVByaW50ZXIuZXJyb3JOb2RlID0gbm9kZTsKCiAgICAgICAgICBsZXQgeyBsb2MgfSA9IG5vZGU7CgogICAgICAgICAgaWYobG9jPy5saW5lICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgY29uc3QgeyBsaW5lLCBjb2x1bW4gfSA9IGxvYzsKICAgICAgICAgICAgdGhpcy5sb2MgPSB7CiAgICAgICAgICAgICAgbGluZSwKICAgICAgICAgICAgICBjb2x1bW4sCiAgICAgICAgICAgICAgdG9TdHJpbmcoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gW2xpbmUsIGNvbHVtbl0uZmlsdGVyKGkgPT4gaSkuam9pbignOicpOwogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIC8vIGVsc2UgY29uc29sZS5sb2coJ291dDonLCBvdXQpOwogICAgICAgIHJldHVybiBvdXQ7CiAgICAgIH0sCiAgICB9LAoKICAgIG5vZGVQcmludGVyOiB7CiAgICAgIHZhbHVlOiBuZXcgKGNsYXNzIE5vZGVQcmludGVyIHsKICAgICAgICBBYmlUYWdBdHRyKGFiaV90YWdfYXR0cikgewogICAgICAgICAgcHV0KCdfX2F0dHJpYnV0ZV9fKChfX2FiaV90YWdfXykpJyk7CiAgICAgICAgfQogICAgICAgIEFjY2Vzc1NwZWNEZWNsKGFjY2Vzc19zcGVjX2RlY2wpIHsKICAgICAgICAgIGNvbnN0IHsgYWNjZXNzIH0gPSBhY2Nlc3Nfc3BlY19kZWNsOwogICAgICAgICAgLy9jb25zb2xlLmxvZygiQWNjZXNzU3BlY0RlY2wiLGFjY2Vzc19zcGVjX2RlY2wpCiAgICAgICAgICBwdXQoYWNjZXNzICsgJzonKTsKICAgICAgICB9CiAgICAgICAgQWxpZ25lZEF0dHIoYWxpZ25lZF9hdHRyKSB7CiAgICAgICAgICBwdXQoJ19fYXR0cmlidXRlX18oKGFsaWduZWQpKScpOwogICAgICAgIH0KICAgICAgICBBbHdheXNJbmxpbmVBdHRyKGFsd2F5c19pbmxpbmVfYXR0cikgewogICAgICAgICAgcHV0KCdfX2F0dHJpYnV0ZV9fKChhbHdheXNfaW5saW5lKSknKTsKICAgICAgICB9CiAgICAgICAgQXJyYXlTdWJzY3JpcHRFeHByKGFycmF5X3N1YnNjcmlwdF9leHByKSB7CiAgICAgICAgICBjb25zdCB7IHZhbHVlQ2F0ZWdvcnkgfSA9IGFycmF5X3N1YnNjcmlwdF9leHByOwogICAgICAgICAgY29uc3QgW2FycmF5LCBzdWJzY3JpcHRdID0gYXJyYXlfc3Vic2NyaXB0X2V4cHIuaW5uZXI7CiAgICAgICAgICBwcmludGVyLnByaW50KGFycmF5KTsKICAgICAgICAgIHB1dCgnWycpOwogICAgICAgICAgcHJpbnRlci5wcmludChzdWJzY3JpcHQpOwogICAgICAgICAgcHV0KCddJyk7CiAgICAgICAgfQogICAgICAgIEFzbUxhYmVsQXR0cihhc21fbGFiZWxfYXR0cikgewogICAgICAgICAgcHV0KCdfX2FzbV9fJyk7CiAgICAgICAgfQogICAgICAgIEJpbmFyeU9wZXJhdG9yKGJpbmFyeV9vcGVyYXRvcikgewogICAgICAgICAgY29uc3QgeyB2YWx1ZUNhdGVnb3J5LCBvcGNvZGUgfSA9IGJpbmFyeV9vcGVyYXRvcjsKICAgICAgICAgIGxldCBbbGVmdCwgcmlnaHRdID0gYmluYXJ5X29wZXJhdG9yLmlubmVyOwoKICAgICAgICAgIHByaW50ZXIucHJpbnQobGVmdCk7CiAgICAgICAgICBwdXQoYCAke29wY29kZX0gYCk7CiAgICAgICAgICBwcmludGVyLnByaW50KHJpZ2h0KTsKICAgICAgICB9CiAgICAgICAgQmxvY2tDb21tYW5kQ29tbWVudChibG9ja19jb21tYW5kX2NvbW1lbnQpIHsKICAgICAgICAgIGNvbnN0IHsgbmFtZSB9ID0gYmxvY2tfY29tbWFuZF9jb21tZW50OwoKICAgICAgICAgIHB1dChgXFwke25hbWV9YCk7CiAgICAgICAgICBmb3IobGV0IGlubmVyIG9mIGJsb2NrX2NvbW1hbmRfY29tbWVudC5pbm5lcikgcHJpbnRlci5wcmludChpbm5lcik7CgogICAgICAgICAgLy8gICAgdHJpbSgpOwogICAgICAgIH0KICAgICAgICBCdWlsdGluQXR0cihidWlsdGluX2F0dHIpIHsKICAgICAgICAgIGNvbnN0IHsgaW1wbGljaXQgfSA9IGJ1aWx0aW5fYXR0cjsKICAgICAgICAgIC8vY29uc29sZS5sb2coJ0J1aWx0aW5BdHRyJywgYnVpbHRpbl9hdHRyKTsKICAgICAgICAgIHB1dChgLyoqKkJ1aWx0aW5BdHRyKioqL2ApOwogICAgICAgIH0KICAgICAgICBCcmVha1N0bXQoYnJlYWtfc3RtdCkgewogICAgICAgICAgcHV0KCdicmVhaycpOwogICAgICAgIH0KICAgICAgICBDYWxsRXhwcihjYWxsX2V4cHIpIHsKICAgICAgICAgIC8vY29uc29sZS5sb2coJ0NhbGxFeHByJywgY2FsbF9leHByKTsKICAgICAgICAgIGxldCBbZnVuYywgLi4uYXJnc10gPSBjYWxsX2V4cHIuaW5uZXIgPz8gW107CgogICAgICAgICAgcHJpbnRlci5wcmludChmdW5jKTsKCiAgICAgICAgICBwdXQoJygnKTsKICAgICAgICAgIGxldCBpID0gMDsKICAgICAgICAgIGZvcihsZXQgaW5uZXIgb2YgYXJncykgewogICAgICAgICAgICBpZihpKysgPiAwKSBwdXQoJywgJyk7CiAgICAgICAgICAgIHByaW50ZXIucHJpbnQoaW5uZXIpOwogICAgICAgICAgfQogICAgICAgICAgcHV0KCcpJyk7CiAgICAgICAgfQogICAgICAgIFJlY292ZXJ5RXhwcihyZWNvdmVyeV9leHByKSB7CiAgICAgICAgICByZXR1cm4gdGhpcy5DYWxsRXhwcihyZWNvdmVyeV9leHByKTsKICAgICAgICB9CiAgICAgICAgQ2FzZVN0bXQoY2FzZV9zdG10KSB7CiAgICAgICAgICBwdXQoYGNhc2UgYCk7CiAgICAgICAgICBjb25zdCBbdmFsdWUsIC4uLnJlc3RdID0gY2FzZV9zdG10LmlubmVyOwoKICAgICAgICAgIHByaW50ZXIucHJpbnQodmFsdWUpOwogICAgICAgICAgcHV0KCc6ICcpOwoKICAgICAgICAgIGZvcihsZXQgbm9kZSBvZiByZXN0KSBwcmludGVyLnByaW50KG5vZGUpOwogICAgICAgIH0KICAgICAgICBDaGFyYWN0ZXJMaXRlcmFsKGNoYXJhY3Rlcl9saXRlcmFsKSB7CiAgICAgICAgICBjb25zdCB7IHZhbHVlIH0gPSBjaGFyYWN0ZXJfbGl0ZXJhbDsKICAgICAgICAgIHB1dChgJyR7U3RyaW5nLmZyb21DaGFyQ29kZSh2YWx1ZSl9J2ApOwogICAgICAgIH0KICAgICAgICBDb21wb3VuZEFzc2lnbk9wZXJhdG9yKGNvbXBvdW5kX2Fzc2lnbl9vcGVyYXRvcikgewogICAgICAgICAgY29uc3QgeyB2YWx1ZUNhdGVnb3J5LCBvcGNvZGUgfSA9IGNvbXBvdW5kX2Fzc2lnbl9vcGVyYXRvcjsKICAgICAgICAgIGxldCBbbGVmdCwgcmlnaHRdID0gY29tcG91bmRfYXNzaWduX29wZXJhdG9yLmlubmVyOwogICAgICAgICAgcHJpbnRlci5wcmludChsZWZ0KTsKICAgICAgICAgIHB1dChgICR7b3Bjb2RlfSBgKTsKICAgICAgICAgIHByaW50ZXIucHJpbnQocmlnaHQpOwogICAgICAgIH0KICAgICAgICBDb21wb3VuZFN0bXQoY29tcG91bmRfc3RtdCkgewogICAgICAgICAgZGVwdGgrKzsKICAgICAgICAgIHB1dCgneycpOwogICAgICAgICAgbGV0IGkgPSAwOwogICAgICAgICAgbGV0IG9mZnNldCA9IG91dC5sZW5ndGg7CiAgICAgICAgICBpZihjb21wb3VuZF9zdG10Py5pbm5lcj8ubGVuZ3RoKSBwdXQoJ1xuJyk7CgogICAgICAgICAgZm9yKGxldCBpbm5lciBvZiBjb21wb3VuZF9zdG10LmlubmVyID8/IFtdKSB7CiAgICAgICAgICAgIGlmKGkrKyA+IDApIHB1dCgnfTsgXHRcbicuaW5kZXhPZihvdXRbb3V0Lmxlbmd0aCAtIDFdKSAhPSAtMSA/ICdcbicgOiAnO1xuJyk7CiAgICAgICAgICAgIHByaW50ZXIucHJpbnQoaW5uZXIpOwogICAgICAgICAgfQogICAgICAgICAgLy9jb25zb2xlLmxvZygnQ29tcG91bmRTdG10JywgeyBvdXQgfSk7CiAgICAgICAgICBpZihvdXQubGVuZ3RoID4gb2Zmc2V0ICYmIG91dFtvdXQubGVuZ3RoIC0gMV0gIT0gJzsnKSBwdXQoJzsnKTsKICAgICAgICAgIGRlcHRoLS07CiAgICAgICAgICAvL2lmKG91dC5sZW5ndGggPiBvZmZzZXQpCiAgICAgICAgICBpZihjb21wb3VuZF9zdG10Py5pbm5lcj8ubGVuZ3RoKSBwdXQoJ1xuJyk7CiAgICAgICAgICBwdXQoJ31cbicpOwogICAgICAgIH0KICAgICAgICBDb25kaXRpb25hbE9wZXJhdG9yKGNvbmRpdGlvbmFsX29wZXJhdG9yKSB7CiAgICAgICAgICBjb25zdCBbY29uZCwgaWZfdHJ1ZSwgaWZfZmFsc2VdID0gY29uZGl0aW9uYWxfb3BlcmF0b3IuaW5uZXI7CgogICAgICAgICAgcHJpbnRlci5wcmludChjb25kKTsKICAgICAgICAgIHB1dCgnID8gJyk7CiAgICAgICAgICBwcmludGVyLnByaW50KGlmX3RydWUpOwogICAgICAgICAgcHV0KCcgOiAnKTsKICAgICAgICAgIHByaW50ZXIucHJpbnQoaWZfZmFsc2UpOwogICAgICAgIH0KICAgICAgICBDb25zdGFudEV4cHIoY29uc3RhbnRfZXhwcikgewogICAgICAgICAgY29uc3QgeyB2YWx1ZUNhdGVnb3J5IH0gPSBjb25zdGFudF9leHByOwoKICAgICAgICAgIGZvcihsZXQgaW5uZXIgb2YgY29uc3RhbnRfZXhwci5pbm5lcikgcHJpbnRlci5wcmludChpbm5lcik7CiAgICAgICAgfQogICAgICAgIENvbnN0QXR0cihjb25zdF9hdHRyKSB7CiAgICAgICAgICBwdXQoJ19fYXR0cmlidXRlX18oKGNvbnN0KScpOwogICAgICAgIH0KICAgICAgICBDb250aW51ZVN0bXQoY29udGludWVfc3RtdCkgewogICAgICAgICAgcHV0KCdicmVhaycpOwogICAgICAgIH0KICAgICAgICBDU3R5bGVDYXN0RXhwcihjc3R5bGVfY2FzdF9leHByKSB7CiAgICAgICAgICBsZXQgdHlwZSA9IG5ldyBUeXBlKGNzdHlsZV9jYXN0X2V4cHIudHlwZSwgdGhpcy5hc3QpOwogICAgICAgICAgY29uc3QgeyB2YWx1ZUNhdGVnb3J5LCBjYXN0S2luZCB9ID0gY3N0eWxlX2Nhc3RfZXhwcjsKICAgICAgICAgIHB1dChgKCR7dHlwZX0pYCk7CiAgICAgICAgICBmb3IobGV0IGlubmVyIG9mIGNzdHlsZV9jYXN0X2V4cHIuaW5uZXIpIHByaW50ZXIucHJpbnQoaW5uZXIpOwogICAgICAgIH0KICAgICAgICBEZWNsUmVmRXhwcihkZWNsX3JlZl9leHByKSB7CiAgICAgICAgICBjb25zdCB7IHR5cGUsIHZhbHVlQ2F0ZWdvcnksIHJlZmVyZW5jZWREZWNsIH0gPSBkZWNsX3JlZl9leHByOwogICAgICAgICAgcHV0KHJlZmVyZW5jZWREZWNsLm5hbWUgPz8gJzxEZWNsUmVmRXhwcj4nKTsKCiAgICAgICAgICAvLyBwcmludGVyLnByaW50KHJlZmVyZW5jZWREZWNsKTsKICAgICAgICB9CiAgICAgICAgRGVjbFN0bXQoZGVjbF9zdG10KSB7CiAgICAgICAgICBsZXQgaSA9IDA7CiAgICAgICAgICBsZXQgdHlwZSwgYmFzZVR5cGU7CiAgICAgICAgICBmb3IobGV0IGlubmVyIG9mIGRlY2xfc3RtdC5pbm5lcikgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgIGlmKCF0eXBlICYmIGlubmVyLnR5cGUpIHsKICAgICAgICAgICAgICAgIHR5cGUgPSBuZXcgVHlwZShpbm5lci50eXBlLCB0aGlzLmFzdCk7CiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCd0eXBlOicsIHR5cGUpOwogICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygndHlwZS50eXBlQWxpYXM6JywgdHlwZS50eXBlQWxpYXMpOwogICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygndHlwZS50cmltU3Vic2NyaXB0cygpOicsIHR5cGUudHJpbVN1YnNjcmlwdHMoKSk7CiAgICAgICAgICAgICAgICBiYXNlVHlwZSA9IHR5cGUudHJpbVN1YnNjcmlwdHMoKSA/PyB0eXBlLnF1YWxUeXBlOwogICAgICAgICAgICAgICAgcHV0KGAke2Jhc2VUeXBlfSBgKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gY2F0Y2goZXJyKSB7fQogICAgICAgICAgICBpZihpKysgPiAwKSBwdXQoJywgJyk7CiAgICAgICAgICAgIHByaW50ZXIucHJpbnQoaW5uZXIsIGJhc2VUeXBlKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgRGVmYXVsdFN0bXQoZGVmYXVsdF9zdG10KSB7CiAgICAgICAgICBwdXQoJ2RlZmF1bHQ6Jyk7CiAgICAgICAgfQogICAgICAgIERlcHJlY2F0ZWRBdHRyKGRlcHJlY2F0ZWRfYXR0cikgewogICAgICAgICAgcHV0KCdfX2F0dHJpYnV0ZV9fKChkZXByZWNhdGVkKSknKTsKICAgICAgICB9CiAgICAgICAgRG9TdG10KGRvX3N0bXQpIHsKICAgICAgICAgIGxldCBbYm9keSwgY29uZF0gPSBkb19zdG10LmlubmVyOwogICAgICAgICAgcHV0KGBkbyBgKTsKICAgICAgICAgIHByaW50ZXIucHJpbnQoYm9keSk7CiAgICAgICAgICBwdXQoYCB3aGlsZShgKTsKICAgICAgICAgIHByaW50ZXIucHJpbnQoY29uZCk7CiAgICAgICAgICBwdXQoYClgKTsKICAgICAgICB9CiAgICAgICAgRW1wdHlEZWNsKGVtcHR5X2RlY2wpIHsKICAgICAgICAgIHB1dCgnXG4nKTsKICAgICAgICAgIC8vIGlmKCc7fScuaW5kZXhPZihvdXRbb3V0Lmxlbmd0aCAtIDFdID8/ICdcbicpID09IC0xKSBwdXQoJzsnKTsKICAgICAgICB9CiAgICAgICAgRW51bUNvbnN0YW50RGVjbChlbnVtX2NvbnN0YW50X2RlY2wpIHsKICAgICAgICAgIGNvbnN0IHsgbmFtZSwgaW5uZXIgfSA9IGVudW1fY29uc3RhbnRfZGVjbDsKICAgICAgICAgIGxldCB2YWx1ZSA9IGlubmVyWzBdOwogICAgICAgICAgcHV0KG5hbWUpOwogICAgICAgICAgaWYodmFsdWUpIHsKICAgICAgICAgICAgcHV0KCcgPSAnKTsKICAgICAgICAgICAgcHJpbnRlci5wcmludCh2YWx1ZSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIEVudW1EZWNsKGVudW1fZGVjbCkgewogICAgICAgICAgY29uc3QgeyBuYW1lIH0gPSBlbnVtX2RlY2w7CiAgICAgICAgICAvL2NvbnNvbGUubG9nKCdSZWNvcmREZWNsJywgcmVjb3JkX2RlY2wpOwogICAgICAgICAgcHV0KCdlbnVtJyk7CiAgICAgICAgICBpZihuYW1lKSB7CiAgICAgICAgICAgIHB1dCgnICcpOwogICAgICAgICAgICBwdXQobmFtZSk7CiAgICAgICAgICB9CiAgICAgICAgICBwdXQoJyAnKTsKICAgICAgICAgIHB1dCgne1xuJyk7CiAgICAgICAgICBsZXQgaSA9IDA7CiAgICAgICAgICBmb3IobGV0IGZpZWxkIG9mIGVudW1fZGVjbC5pbm5lciA/PyBbXSkgewogICAgICAgICAgICBwcmludGVyLnByaW50KGZpZWxkLCB0aGlzLmFzdCk7CiAgICAgICAgICB9CiAgICAgICAgICBwdXQoJ307Jyk7CiAgICAgICAgfQogICAgICAgIEZpZWxkRGVjbChmaWVsZF9kZWNsKSB7CiAgICAgICAgICBsZXQgeyBpc1JlZmVyZW5jZWQsIG5hbWUgfSA9IGZpZWxkX2RlY2w7CiAgICAgICAgICBsZXQgdHlwZSA9IG5ldyBUeXBlKGZpZWxkX2RlY2wudHlwZSwgdGhpcy5hc3QpOwogICAgICAgICAgcHV0KHR5cGUgKyAnJyk7CiAgICAgICAgICBwdXQoJyAnKTsKICAgICAgICAgIHB1dChuYW1lKTsKICAgICAgICAgIHB1dCgnOycpOwogICAgICAgIH0KICAgICAgICBGbG9hdGluZ0xpdGVyYWwoZmxvYXRpbmdfbGl0ZXJhbCkgewogICAgICAgICAgcHV0KGZsb2F0aW5nX2xpdGVyYWwudmFsdWUpOwogICAgICAgIH0KICAgICAgICBGb3JtYXRBdHRyKGZvcm1hdF9hdHRyKSB7CiAgICAgICAgICBwdXQoJ19fYXR0cmlidXRlX18oKGZvcm1hdCkpJyk7CiAgICAgICAgfQogICAgICAgIEZvclN0bXQoZm9yX3N0bXQpIHsKICAgICAgICAgIGxldCBpbm5lciA9IFsuLi5mb3Jfc3RtdC5pbm5lcl07CiAgICAgICAgICBsZXQgYm9keSA9IGlubmVyLnBvcCgpOwogICAgICAgICAgbGV0IG51bUluaXQgPSBpbm5lci5maW5kSW5kZXgobiA9PiBuLmtpbmQgPT0gdW5kZWZpbmVkKTsKICAgICAgICAgIGxldCBpbml0ID0gaW5uZXIuc3BsaWNlKDAsIG51bUluaXQpOwogICAgICAgICAgaWYoaW5uZXIubGVuZ3RoICYmIGlubmVyW2lubmVyLmxlbmd0aCAtIDFdLmtpbmQgPT0gdW5kZWZpbmVkKSBpbm5lci5wb3AoKTsKICAgICAgICAgIGxldCBpbmNyID0gaW5uZXIucG9wKCk7CiAgICAgICAgICBsZXQgY29uZCA9IGlubmVyLnBvcCgpOwogICAgICAgICAgLy9jb25zb2xlLmxvZygnRm9yU3RtdCcsIGNvbnNvbGUuY29uZmlnKHtkZXB0aDogNCwgY29tcGFjdDogZmFsc2UsIG1heEFycmF5TGVuZ3RoOiA1LCBoaWRlS2V5czogWydyYW5nZScsICdsb2MnXSB9KSwgeyBib2R5LCBpbml0LCBjb25kLCBpbmNyIH0pOwogICAgICAgICAgcHV0KCdmb3IoJyk7CiAgICAgICAgICBsZXQgaSA9IDA7CiAgICAgICAgICBmb3IobGV0IG4gb2YgaW5pdCkgewogICAgICAgICAgICBpZihpKysgPiAwKSBwdXQoJywgJyk7CiAgICAgICAgICAgIHByaW50ZXIucHJpbnQobik7CiAgICAgICAgICB9CiAgICAgICAgICBwdXQoJzsnKTsKICAgICAgICAgIGlmKGNvbmQua2luZCkgewogICAgICAgICAgICBwdXQoJyAnKTsKICAgICAgICAgICAgcHJpbnRlci5wcmludChjb25kKTsKICAgICAgICAgIH0KICAgICAgICAgIHB1dCgnOycpOwogICAgICAgICAgaWYoaW5jci5raW5kKSB7CiAgICAgICAgICAgIHB1dCgnICcpOwogICAgICAgICAgICBwcmludGVyLnByaW50KGluY3IpOwogICAgICAgICAgfQogICAgICAgICAgcHV0KCcpICcpOwogICAgICAgICAgcHJpbnRlci5wcmludChib2R5KTsKICAgICAgICB9CiAgICAgICAgRnVsbENvbW1lbnQoZnVsbF9jb21tZW50KSB7CiAgICAgICAgICBwdXQoJy8qJyk7CgogICAgICAgICAgZm9yKGxldCBpbm5lciBvZiBmdWxsX2NvbW1lbnQuaW5uZXIpIHsKICAgICAgICAgICAgcHJpbnRlci5wcmludChpbm5lcik7CiAgICAgICAgICAgIC8vICBwdXQoJ1xuJyk7CiAgICAgICAgICB9CiAgICAgICAgICBwdXQoJyovJyk7CiAgICAgICAgICBwdXQoJ1xuJyk7CiAgICAgICAgfQogICAgICAgIEZ1bmN0aW9uRGVjbChmdW5jdGlvbl9kZWNsKSB7CiAgICAgICAgICBjb25zdCB7IHN0b3JhZ2VDbGFzcywgbWFuZ2xlZE5hbWUsIGlzSW1wbGljaXQsIGlzVXNlZCB9ID0gZnVuY3Rpb25fZGVjbDsKICAgICAgICAgIGxldCBpID0gMDsKICAgICAgICAgIGlmKHN0b3JhZ2VDbGFzcykgcHV0KHN0b3JhZ2VDbGFzcyArICcgJyk7CiAgICAgICAgICBsZXQgbm9kZSA9IG5ldyBGdW5jdGlvbkRlY2woZnVuY3Rpb25fZGVjbCwgdGhpcy5hc3QpOwogICAgICAgICAgLy9jb25zb2xlLmxvZygnRnVuY3Rpb25EZWNsJywgbm9kZS5yZXR1cm5UeXBlKTsKICAgICAgICAgIGxldCByZXR1cm5UeXBlID0gbm9kZS5yZXR1cm5UeXBlOwogICAgICAgICAgcHV0KHJldHVyblR5cGUgKyAnXG4nICsgZnVuY3Rpb25fZGVjbC5uYW1lICsgJygnKTsKICAgICAgICAgIGkgPSAwOwogICAgICAgICAgZm9yKGxldCBpbm5lciBvZiAoZnVuY3Rpb25fZGVjbC5pbm5lciA/PyBbXSkuZmlsdGVyKG4gPT4gbi5raW5kID09ICdQYXJtVmFyRGVjbCcpKSB7CiAgICAgICAgICAgIGlmKGkrKyA+IDApIHB1dCgnLCAnKTsKICAgICAgICAgICAgcHJpbnRlci5wcmludChpbm5lcik7CiAgICAgICAgICB9CiAgICAgICAgICBwdXQoJykgJyk7CiAgICAgICAgICBpID0gMDsKICAgICAgICAgIGZvcihsZXQgaW5uZXIgb2YgKGZ1bmN0aW9uX2RlY2wuaW5uZXIgPz8gW10pLmZpbHRlcihuID0+IG4ua2luZCAhPSAnUGFybVZhckRlY2wnICYmICEvQ29tbWVudC8udGVzdChuLmtpbmQpKSkgewogICAgICAgICAgICBpZihpKysgPiAwKSBwdXQoJyAnKTsKICAgICAgICAgICAgcHJpbnRlci5wcmludChpbm5lcik7CiAgICAgICAgICB9CiAgICAgICAgICAvLyBwdXQoJycpOwogICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgICAgIEdvdG9TdG10KGdvdG9fc3RtdCkgewogICAgICAgICAgY29uc3QgeyB0YXJnZXRMYWJlbERlY2xJZCB9ID0gZ290b19zdG10OwogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgbGV0IHRhcmdldCA9IERlZXBGaW5kKHRoaXMuYXN0ID8/IHRoaXMsIG4gPT4gdHlwZW9mIG4gPT0gJ29iamVjdCcgJiYgbiAmJiBuLmRlY2xJZCA9PSB0YXJnZXRMYWJlbERlY2xJZCk7CiAgICAgICAgICAgIGNvbnN0IHsgbmFtZSB9ID0gdGFyZ2V0OwoKICAgICAgICAgICAgcHV0KGBnb3RvICR7bmFtZX1gKTsKICAgICAgICAgIH0gY2F0Y2goZSkgewogICAgICAgICAgICBjb25zb2xlLmxvZygnR290b1N0bXQnLCB7IGdvdG9fc3RtdCB9KTsKICAgICAgICAgICAgZ2xvYmFsVGhpcy5nb3RvX3N0bXQgPSBnb3RvX3N0bXQ7CgogICAgICAgICAgICBzdGFydEludGVyYWN0aXZlKCk7CiAgICAgICAgICAgIHRocm93IGU7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIEhUTUxFbmRUYWdDb21tZW50KGh0bWxfZW5kX3RhZ19jb21tZW50KSB7CiAgICAgICAgICBjb25zdCB7IG5hbWUgfSA9IGh0bWxfZW5kX3RhZ19jb21tZW50OwogICAgICAgICAgcHV0KGA8LyR7bmFtZX0+YCk7CiAgICAgICAgfQogICAgICAgIEhUTUxTdGFydFRhZ0NvbW1lbnQoaHRtbF9zdGFydF90YWdfY29tbWVudCkgewogICAgICAgICAgY29uc3QgeyBuYW1lLCBhdHRycyB9ID0gaHRtbF9zdGFydF90YWdfY29tbWVudDsKCiAgICAgICAgICBwdXQoYDwke25hbWV9YCk7CgogICAgICAgICAgZm9yKGxldCBbaywgdl0gb2YgYXR0cnMpIHsKICAgICAgICAgICAgcHV0KGAgJHtrfT0iJHt2fSJgKTsKICAgICAgICAgIH0KICAgICAgICAgIHB1dChgPmApOwogICAgICAgIH0KICAgICAgICBJZlN0bXQoaWZfc3RtdCkgewogICAgICAgICAgbGV0IFtjb25kLCBib2R5LCBhbHRdID0gaWZfc3RtdC5pbm5lcjsKICAgICAgICAgIHB1dChgaWYoYCk7CiAgICAgICAgICBwcmludGVyLnByaW50KGNvbmQpOwogICAgICAgICAgcHV0KGApIGApOwogICAgICAgICAgcHJpbnRlci5wcmludChib2R5KTsKICAgICAgICAgIGlmKGFsdCkgewogICAgICAgICAgICBwdXQoYCBlbHNlIGApOwogICAgICAgICAgICBwcmludGVyLnByaW50KGFsdCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIEltcGxpY2l0Q2FzdEV4cHIoaW1wbGljaXRfY2FzdF9leHByKSB7CiAgICAgICAgICBmb3IobGV0IGlubmVyIG9mIGltcGxpY2l0X2Nhc3RfZXhwci5pbm5lcikgcHJpbnRlci5wcmludChpbm5lcik7CiAgICAgICAgfQogICAgICAgIEluaXRMaXN0RXhwcihpbml0X2xpc3RfZXhwcikgewogICAgICAgICAgY29uc3QgeyB2YWx1ZUNhdGVnb3J5IH0gPSBpbml0X2xpc3RfZXhwcjsKCiAgICAgICAgICBwdXQoJ3sgJyk7CiAgICAgICAgICBsZXQgaSA9IDA7CiAgICAgICAgICBmb3IobGV0IGlubmVyIG9mIGluaXRfbGlzdF9leHByLmlubmVyKSB7CiAgICAgICAgICAgIGlmKGkrKyA+IDApIHB1dCgnLCAnKTsKCiAgICAgICAgICAgIHByaW50ZXIucHJpbnQoaW5uZXIpOwogICAgICAgICAgfQogICAgICAgICAgcHV0KCcgfScpOwogICAgICAgIH0KICAgICAgICBJbmxpbmVDb21tYW5kQ29tbWVudChpbmxpbmVfY29tbWFuZF9jb21tZW50KSB7CiAgICAgICAgICBwdXQoJyBJbmxpbmVDb21tYW5kQ29tbWVudCAnKTsKICAgICAgICB9CiAgICAgICAgSW50ZWdlckxpdGVyYWwoaW50ZWdlcl9saXRlcmFsKSB7CiAgICAgICAgICBwdXQoaW50ZWdlcl9saXRlcmFsLnZhbHVlKTsKICAgICAgICB9CiAgICAgICAgTGFiZWxTdG10KGxhYmVsX3N0bXQpIHsKICAgICAgICAgIHB1dChgJHtsYWJlbF9zdG10Lm5hbWV9OmApOwogICAgICAgIH0KICAgICAgICBNZW1iZXJFeHByKG1lbWJlcl9leHByKSB7CiAgICAgICAgICBjb25zdCB7IHZhbHVlQ2F0ZWdvcnksIG5hbWUsIGlzQXJyYXksIHJlZmVyZW5jZWRNZW1iZXJEZWNsIH0gPSBtZW1iZXJfZXhwcjsKCiAgICAgICAgICBmb3IobGV0IGlubmVyIG9mIG1lbWJlcl9leHByLmlubmVyKSB7CiAgICAgICAgICAgIGxldCB7IHF1YWxUeXBlIH0gPSBpbm5lci50eXBlOwoKICAgICAgICAgICAgY29uc3QgaXNQb2ludGVyID0gcXVhbFR5cGUuZW5kc1dpdGgoJyonKTsKCiAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ01lbWJlckV4cHInLCB7IG5hbWUsIHF1YWxUeXBlLCBpc1BvaW50ZXIgfSk7CgogICAgICAgICAgICBwcmludGVyLnByaW50KGlubmVyKTsKICAgICAgICAgICAgcHV0KGlzUG9pbnRlciA/ICctPicgOiAnLicpOwogICAgICAgICAgfQogICAgICAgICAgcHV0KG5hbWUpOwogICAgICAgIH0KICAgICAgICBOb25OdWxsQXR0cihub25fbnVsbF9hdHRyKSB7CiAgICAgICAgICBwdXQoJ19fYXR0cmlidXRlX18oKF9fbm9ubnVsbF9fKSknKTsKICAgICAgICB9CiAgICAgICAgTm9UaHJvd0F0dHIobm9fdGhyb3dfYXR0cikgewogICAgICAgICAgcHV0KCdfX2F0dHJpYnV0ZV9fKChub3Rocm93KSknKTsKICAgICAgICB9CiAgICAgICAgTnVsbFN0bXQobnVsbF9zdG10KSB7CiAgICAgICAgICBwdXQoJzsnKTsKICAgICAgICB9CgogICAgICAgIFBhcmFncmFwaENvbW1lbnQocGFyYWdyYXBoX2NvbW1lbnQpIHsKICAgICAgICAgIGZvcihsZXQgaW5uZXIgb2YgcGFyYWdyYXBoX2NvbW1lbnQuaW5uZXIpIHsKICAgICAgICAgICAgcHJpbnRlci5wcmludChpbm5lcik7CiAgICAgICAgICAgIC8vICAgICAgIHB1dCgnXG4nKTsKICAgICAgICAgIH0KICAgICAgICAgIHB1dCgnXG4nKTsKICAgICAgICB9CiAgICAgICAgUGFyYW1Db21tYW5kQ29tbWVudChwYXJhbV9jb21tYW5kX2NvbW1lbnQpIHsKICAgICAgICAgIGNvbnN0IHsgcGFyYW0gfSA9IHBhcmFtX2NvbW1hbmRfY29tbWVudDsKICAgICAgICAgIHB1dChgXFxwYXJhbSAke3BhcmFtfWApOwogICAgICAgICAgZm9yKGxldCBpbm5lciBvZiBwYXJhbV9jb21tYW5kX2NvbW1lbnQuaW5uZXIpIHByaW50ZXIucHJpbnQoaW5uZXIpOwogICAgICAgIH0KICAgICAgICBQYXJlbkV4cHIocGFyZW5fZXhwcikgewogICAgICAgICAgY29uc3QgeyB2YWx1ZUNhdGVnb3J5IH0gPSBwYXJlbl9leHByOwogICAgICAgICAgcHV0KCcoJyk7CiAgICAgICAgICBmb3IobGV0IGlubmVyIG9mIHBhcmVuX2V4cHIuaW5uZXIpIHByaW50ZXIucHJpbnQoaW5uZXIpOwogICAgICAgICAgcHV0KCcpJyk7CiAgICAgICAgfQogICAgICAgIFBhcmVuTGlzdEV4cHIocGFyZW5fbGlzdF9leHByKSB7CiAgICAgICAgICBjb25zdCB7IHR5cGUsIHZhbHVlQ2F0ZWdvcnkgfSA9IHBhcmVuX2xpc3RfZXhwcjsKCiAgICAgICAgICBwdXQoYChgKTsKCiAgICAgICAgICBpZihwYXJlbl9saXN0X2V4cHIuaW5uZXIpIGZvcihsZXQgaW5uZXIgb2YgcGFyZW5fbGlzdF9leHByLmlubmVyKSBwcmludGVyLnByaW50KGlubmVyKTsKICAgICAgICAgIHB1dChgKWApOwogICAgICAgIH0KICAgICAgICBQYXJtVmFyRGVjbChwYXJtX3Zhcl9kZWNsKSB7CiAgICAgICAgICBsZXQgewogICAgICAgICAgICBuYW1lLAogICAgICAgICAgICB0eXBlOiB7IHF1YWxUeXBlOiB0eXBlIH0sCiAgICAgICAgICB9ID0gcGFybV92YXJfZGVjbDsKCiAgICAgICAgICBwdXQoKHR5cGUgKyAnJykucmVwbGFjZSgvXHMrXCovZywgJyonKSk7CgogICAgICAgICAgaWYobmFtZSkgewogICAgICAgICAgICBpZihvdXRbb3V0Lmxlbmd0aCAtIDFdICE9ICcgJykgcHV0KCcgJyk7CiAgICAgICAgICAgIHB1dChuYW1lKTsKICAgICAgICAgIH0KCiAgICAgICAgICBpZihwYXJtX3Zhcl9kZWNsLmlubmVyKSB7CiAgICAgICAgICAgIHB1dChgID0gYCk7CiAgICAgICAgICAgIGZvcihsZXQgaW5uZXIgb2YgcGFybV92YXJfZGVjbC5pbm5lcikgcHJpbnRlci5wcmludChpbm5lcik7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIFB1cmVBdHRyKHB1cmVfYXR0cikgewogICAgICAgICAgcHV0KCdfX2F0dHJpYnV0ZV9fKChwdXJlKSknKTsKICAgICAgICB9CiAgICAgICAgUmVjb3JkRGVjbChyZWNvcmRfZGVjbCkgewogICAgICAgICAgY29uc3QgeyB0YWdVc2VkLCBuYW1lLCBjb21wbGV0ZURlZmluaXRpb24sIHBhcmVudERlY2xDb250ZXh0SWQgfSA9IHJlY29yZF9kZWNsOwogICAgICAgICAgLy9jb25zb2xlLmxvZygnUmVjb3JkRGVjbCcsIHJlY29yZF9kZWNsKTsKICAgICAgICAgIHB1dCh0YWdVc2VkKTsKICAgICAgICAgIGlmKG5hbWUpIHsKICAgICAgICAgICAgcHV0KCcgJyk7CiAgICAgICAgICAgIHB1dChuYW1lKTsKICAgICAgICAgIH0KICAgICAgICAgIHB1dCgnICcpOwoKICAgICAgICAgIGlmKHJlY29yZF9kZWNsLmlubmVyKSB7CiAgICAgICAgICAgIHB1dCgne1xuJyk7CiAgICAgICAgICAgIGZvcihsZXQgZmllbGQgb2YgcmVjb3JkX2RlY2wuaW5uZXIgPz8gW10pIHsKICAgICAgICAgICAgICBwdXQoJyAgJyk7CiAgICAgICAgICAgICAgcHJpbnRlci5wcmludChmaWVsZCk7CiAgICAgICAgICAgICAgcHV0KCdcbicpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHB1dCgnfTsnKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgUmVzdHJpY3RBdHRyKHJlc3RyaWN0X2F0dHIpIHsKICAgICAgICAgIHB1dCgnX19yZXN0cmljdCcpOwogICAgICAgIH0KICAgICAgICBSZXR1cm5TdG10KHJldHVybl9zdG10KSB7CiAgICAgICAgICBwdXQoJ3JldHVybiAnKTsKICAgICAgICAgIGlmKHJldHVybl9zdG10LmlubmVyKSBmb3IobGV0IGlubmVyIG9mIHJldHVybl9zdG10LmlubmVyKSBwcmludGVyLnByaW50KGlubmVyKTsKICAgICAgICAgIHB1dCgnOycpOwogICAgICAgIH0KICAgICAgICBSZXR1cm5zVHdpY2VBdHRyKHJldHVybnNfdHdpY2VfYXR0cikgewogICAgICAgICAgcHV0KCdfX2F0dHJpYnV0ZV9fKChyZXR1cm5zX3R3aWNlKSknKTsKICAgICAgICB9CiAgICAgICAgU3RyaW5nTGl0ZXJhbChzdHJpbmdfbGl0ZXJhbCkgewogICAgICAgICAgcHV0KHN0cmluZ19saXRlcmFsLnZhbHVlKTsKICAgICAgICB9CiAgICAgICAgU3dpdGNoU3RtdChzd2l0Y2hfc3RtdCkgewogICAgICAgICAgbGV0IFtjb25kLCBib2R5XSA9IHN3aXRjaF9zdG10LmlubmVyOwogICAgICAgICAgcHV0KGBzd2l0Y2goYCk7CiAgICAgICAgICBwcmludGVyLnByaW50KGNvbmQpOwogICAgICAgICAgcHV0KGApIGApOwogICAgICAgICAgcHJpbnRlci5wcmludChib2R5KTsKICAgICAgICB9CiAgICAgICAgVGV4dENvbW1lbnQodGV4dF9jb21tZW50KSB7CiAgICAgICAgICBjb25zdCB7IHRleHQgfSA9IHRleHRfY29tbWVudDsKCiAgICAgICAgICBwdXQodGV4dCk7CiAgICAgICAgfQogICAgICAgIFRyYW5zbGF0aW9uVW5pdERlY2wodHJhbnNsYXRpb25fdW5pdF9kZWNsKSB7CiAgICAgICAgICBmb3IobGV0IGlubmVyIG9mIHRyYW5zbGF0aW9uX3VuaXRfZGVjbC5pbm5lcikgcHJpbnRlci5wcmludChpbm5lcik7CiAgICAgICAgfQogICAgICAgIFR5cGVkZWZEZWNsKHR5cGVkZWZfZGVjbCkgewogICAgICAgICAgY29uc3QgeyBuYW1lIH0gPSB0eXBlZGVmX2RlY2w7CgogICAgICAgICAgLy9jb25zb2xlLmxvZyhgVHlwZWRlZkRlY2xgLCB0eXBlZGVmX2RlY2wpOwoKICAgICAgICAgIGxldCB0eXBlID0gbmV3IFR5cGUodHlwZWRlZl9kZWNsLmlubmVyWzBdLnR5cGUsIHRoaXMuYXN0KTsKCiAgICAgICAgICBwdXQoJ3R5cGVkZWYgJyk7CiAgICAgICAgICBwdXQodHlwZSArICcnKTsKICAgICAgICAgIHB1dCgnICcpOwogICAgICAgICAgcHV0KG5hbWUpOwogICAgICAgICAgcHV0KCc7XG4nKTsKICAgICAgICB9CiAgICAgICAgVW5hcnlFeHByT3JUeXBlVHJhaXRFeHByKHVuYXJ5X2V4cHJfb3JfdHlwZV90cmFpdF9leHByKSB7CiAgICAgICAgICBjb25zdCB7IHZhbHVlQ2F0ZWdvcnksIG5hbWUgfSA9IHVuYXJ5X2V4cHJfb3JfdHlwZV90cmFpdF9leHByOwoKICAgICAgICAgIHB1dChuYW1lKTsKICAgICAgICAgIGlmKHVuYXJ5X2V4cHJfb3JfdHlwZV90cmFpdF9leHByLmlubmVyKSBmb3IobGV0IGlubmVyIG9mIHVuYXJ5X2V4cHJfb3JfdHlwZV90cmFpdF9leHByLmlubmVyKSBwcmludGVyLnByaW50KGlubmVyKTsKICAgICAgICB9CiAgICAgICAgVW5hcnlPcGVyYXRvcih1bmFyeV9vcGVyYXRvcikgewogICAgICAgICAgY29uc3QgeyB2YWx1ZUNhdGVnb3J5LCBpc1Bvc3RmaXgsIG9wY29kZSwgY2FuT3ZlcmZsb3cgfSA9IHVuYXJ5X29wZXJhdG9yOwogICAgICAgICAgaWYoIWlzUG9zdGZpeCkgcHV0KG9wY29kZSk7CiAgICAgICAgICBmb3IobGV0IGlubmVyIG9mIHVuYXJ5X29wZXJhdG9yLmlubmVyKSBwcmludGVyLnByaW50KGlubmVyKTsKICAgICAgICAgIGlmKGlzUG9zdGZpeCkgcHV0KG9wY29kZSk7CiAgICAgICAgfQogICAgICAgIFVucmVzb2x2ZWRMb29rdXBFeHByKHVucmVzb2x2ZWRfbG9va3VwX2V4cHIpIHsKICAgICAgICAgIGNvbnN0IHsgdHlwZSwgdmFsdWVDYXRlZ29yeSwgdXNlc0FETCwgbmFtZSwgbG9va3VwcyB9ID0gdW5yZXNvbHZlZF9sb29rdXBfZXhwcjsKICAgICAgICAgIHB1dChuYW1lKTsKICAgICAgICB9CiAgICAgICAgVW5yZXNvbHZlZE1lbWJlckV4cHIodW5yZXNvbHZlZF9tZW1iZXJfZXhwcikgewogICAgICAgICAgY29uc3QgeyB0eXBlLCB2YWx1ZUNhdGVnb3J5IH0gPSB1bnJlc29sdmVkX21lbWJlcl9leHByOwogICAgICAgIH0KICAgICAgICBWYXJEZWNsKHZhcl9kZWNsLCBiYXNlX3R5cGUpIHsKICAgICAgICAgIGxldCB0eXBlID0gbmV3IFR5cGUodmFyX2RlY2wudHlwZSwgdGhpcy5hc3QpOwogICAgICAgICAgcHV0KHZhcl9kZWNsLm5hbWUpOwogICAgICAgICAgbGV0IHN1YnNjcmlwdHMgPSAodHlwZS5zdWJzY3JpcHRzID8/IFtdKS5tYXAoKFtvZmZzZXQsIHN1YnNjcmlwdF0pID0+IGBbJHtzdWJzY3JpcHR9XWApLmpvaW4oJycpOwogICAgICAgICAgaWYoc3Vic2NyaXB0cykgcHV0KHN1YnNjcmlwdHMpOwogICAgICAgICAgaWYodmFyX2RlY2wuaW5uZXIgJiYgdmFyX2RlY2wuaW5uZXIubGVuZ3RoKSB7CiAgICAgICAgICAgIHB1dCgnID0gJyk7CiAgICAgICAgICAgIGZvcihsZXQgaW5uZXIgb2YgdmFyX2RlY2wuaW5uZXIpIHByaW50ZXIucHJpbnQoaW5uZXIpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBWZXJiYXRpbUJsb2NrQ29tbWVudCh2ZXJiYXRpbV9ibG9ja19jb21tZW50KSB7CiAgICAgICAgICBjb25zdCB7IG5hbWUsIGNsb3NlTmFtZSB9ID0gdmVyYmF0aW1fYmxvY2tfY29tbWVudDsKICAgICAgICAgIC8vY29uc29sZS5sb2coJ1ZlcmJhdGltQmxvY2tDb21tZW50JywgdmVyYmF0aW1fYmxvY2tfY29tbWVudCk7CiAgICAgICAgICBwdXQoYFxcJHtuYW1lfWApOwogICAgICAgICAgZm9yKGxldCBpbm5lciBvZiB2ZXJiYXRpbV9ibG9ja19jb21tZW50LmlubmVyKSB7CiAgICAgICAgICAgIHByaW50ZXIucHJpbnQoaW5uZXIpOwogICAgICAgICAgfQogICAgICAgICAgcHV0KGBcXCR7Y2xvc2VOYW1lfWApOwogICAgICAgIH0KICAgICAgICBWZXJiYXRpbUJsb2NrTGluZUNvbW1lbnQodmVyYmF0aW1fYmxvY2tfbGluZV9jb21tZW50KSB7CiAgICAgICAgICBjb25zdCB7IHRleHQgfSA9IHZlcmJhdGltX2Jsb2NrX2xpbmVfY29tbWVudDsKICAgICAgICAgIHB1dCh0ZXh0KTsKICAgICAgICB9CgogICAgICAgIFdhcm5VbnVzZWRSZXN1bHRBdHRyKHdhcm5fdW51c2VkX3Jlc3VsdF9hdHRyKSB7CiAgICAgICAgICBwdXQoJ19fYXR0cmlidXRlX18oKHdhcm5fdW51c2VkX3Jlc3VsdCkpJyk7CiAgICAgICAgfQogICAgICAgIFdlYWtBdHRyKHdlYWtfYXR0cikgewogICAgICAgICAgcHV0KCdfX2F0dHJpYnV0ZV9fKCh3ZWFrKSknKTsKICAgICAgICB9CiAgICAgICAgV2hpbGVTdG10KHdoaWxlX3N0bXQpIHsKICAgICAgICAgIGxldCBbY29uZCwgYm9keV0gPSB3aGlsZV9zdG10LmlubmVyOwogICAgICAgICAgcHV0KGB3aGlsZShgKTsKICAgICAgICAgIHByaW50ZXIucHJpbnQoY29uZCk7CiAgICAgICAgICBwdXQoYCkgYCk7CiAgICAgICAgICBwcmludGVyLnByaW50KGJvZHkpOwogICAgICAgIH0KCiAgICAgICAgT3ZlcnJpZGVBdHRyKG92ZXJyaWRlX2F0dHIpIHsKICAgICAgICAgIHB1dCgnb3ZlcnJpZGUnKTsKICAgICAgICB9CgogICAgICAgIEFkZHJMYWJlbEV4cHIoYWRkcl9sYWJlbF9leHByKSB7fQogICAgICAgIEFsaWFzQXR0cihhbGlhc19hdHRyKSB7fQogICAgICAgIEFsaWduVmFsdWVBdHRyKGFsaWduX3ZhbHVlX2F0dHIpIHsKICAgICAgICAgIHB1dChgX19hdHRyaWJ1dGVfXygoYWxpZ25fdmFsdWUoYCk7CiAgICAgICAgICBwcmludGVyLnByaW50KGFsaWduX3ZhbHVlX2F0dHIuaW5uZXJbMF0pOwoKICAgICAgICAgIHB1dChgKSkpYCk7CiAgICAgICAgfQogICAgICAgIEFsbG9jU2l6ZUF0dHIoYWxsb2Nfc2l6ZV9hdHRyKSB7fQogICAgICAgIEFycmF5SW5pdEluZGV4RXhwcihhcnJheV9pbml0X2luZGV4X2V4cHIpIHt9CiAgICAgICAgQXJyYXlJbml0TG9vcEV4cHIoYXJyYXlfaW5pdF9sb29wX2V4cHIpIHt9CiAgICAgICAgQXRvbWljRXhwcihhdG9taWNfZXhwcikge30KICAgICAgICBBdG9taWNUeXBlKGF0b21pY190eXBlKSB7fQogICAgICAgIEF1dG9UeXBlKGF1dG9fdHlwZSkge30KICAgICAgICBCdWlsdGluVGVtcGxhdGVEZWNsKGJ1aWx0aW5fdGVtcGxhdGVfZGVjbCkge30KICAgICAgICBCdWlsdGluVHlwZShidWlsdGluX3R5cGUpIHt9CiAgICAgICAgQ2FsbGJhY2tBdHRyKGNhbGxiYWNrX2F0dHIpIHt9CiAgICAgICAgQ2xhc3NUZW1wbGF0ZURlY2woY2xhc3NfdGVtcGxhdGVfZGVjbCkge30KICAgICAgICBDbGFzc1RlbXBsYXRlUGFydGlhbFNwZWNpYWxpemF0aW9uRGVjbChjbGFzc190ZW1wbGF0ZV9wYXJ0aWFsX3NwZWNpYWxpemF0aW9uX2RlY2wpIHt9CiAgICAgICAgQ2xhc3NUZW1wbGF0ZVNwZWNpYWxpemF0aW9uRGVjbChjbGFzc190ZW1wbGF0ZV9zcGVjaWFsaXphdGlvbl9kZWNsKSB7fQogICAgICAgIENvbXBsZXhUeXBlKGNvbXBsZXhfdHlwZSkge30KICAgICAgICBDb21wb3VuZExpdGVyYWxFeHByKGNvbXBvdW5kX2xpdGVyYWxfZXhwcikgewogICAgICAgICAgY29uc3QgeyB0eXBlIH0gPSBjb21wb3VuZF9saXRlcmFsX2V4cHI7CgogICAgICAgICAgaWYodHlwZS5xdWFsVHlwZSkgcHV0KGAoJHt0eXBlLnF1YWxUeXBlfSlgKTsKCiAgICAgICAgICBwcmludGVyLnByaW50KGNvbXBvdW5kX2xpdGVyYWxfZXhwci5pbm5lclswXSk7CiAgICAgICAgfQogICAgICAgIENvbnN0YW50QXJyYXlUeXBlKGNvbnN0YW50X2FycmF5X3R5cGUpIHt9CiAgICAgICAgQ29uc3RydWN0b3JVc2luZ1NoYWRvd0RlY2woY29uc3RydWN0b3JfdXNpbmdfc2hhZG93X2RlY2wpIHt9CiAgICAgICAgQ29udmVydFZlY3RvckV4cHIoY29udmVydF92ZWN0b3JfZXhwcikge30KICAgICAgICBEZWNheWVkVHlwZShkZWNheWVkX3R5cGUpIHt9CiAgICAgICAgRGVjbHR5cGVUeXBlKGRlY2x0eXBlX3R5cGUpIHt9CiAgICAgICAgRGVwZW5kZW50TmFtZVR5cGUoZGVwZW5kZW50X25hbWVfdHlwZSkge30KICAgICAgICBEZXBlbmRlbnRTY29wZURlY2xSZWZFeHByKGRlcGVuZGVudF9zY29wZV9kZWNsX3JlZl9leHByKSB7CiAgICAgICAgICBjb25zdCB7IHR5cGUsIHZhbHVlQ2F0ZWdvcnkgfSA9IGRlcGVuZGVudF9zY29wZV9kZWNsX3JlZl9leHByOwogICAgICAgIH0KICAgICAgICBEZXBlbmRlbnRTaXplZEFycmF5VHlwZShkZXBlbmRlbnRfc2l6ZWRfYXJyYXlfdHlwZSkge30KICAgICAgICBEZXBlbmRlbnRUZW1wbGF0ZVNwZWNpYWxpemF0aW9uVHlwZShkZXBlbmRlbnRfdGVtcGxhdGVfc3BlY2lhbGl6YXRpb25fdHlwZSkge30KICAgICAgICBFbGFib3JhdGVkVHlwZShlbGFib3JhdGVkX3R5cGUpIHt9CiAgICAgICAgRW51bVR5cGUoZW51bV90eXBlKSB7fQogICAgICAgIEV4cHJXaXRoQ2xlYW51cHMoZXhwcl93aXRoX2NsZWFudXBzKSB7CiAgICAgICAgICBmb3IobGV0IGlubmVyIG9mIGV4cHJfd2l0aF9jbGVhbnVwcy5pbm5lcikgcHJpbnRlci5wcmludChpbm5lcik7CiAgICAgICAgfQogICAgICAgIEZpbmFsQXR0cihmaW5hbF9hdHRyKSB7fQogICAgICAgIEZvcm1hdEFyZ0F0dHIoZm9ybWF0X2FyZ19hdHRyKSB7fQogICAgICAgIEZyaWVuZERlY2woZnJpZW5kX2RlY2wpIHt9CiAgICAgICAgRnVuY3Rpb25Ob1Byb3RvVHlwZShmdW5jdGlvbl9ub19wcm90b190eXBlKSB7fQogICAgICAgIEZ1bmN0aW9uUHJvdG9UeXBlKGZ1bmN0aW9uX3Byb3RvX3R5cGUpIHt9CiAgICAgICAgRnVuY3Rpb25UZW1wbGF0ZURlY2woZnVuY3Rpb25fdGVtcGxhdGVfZGVjbCkge30KICAgICAgICBHQ0NBc21TdG10KGdjY19hc21fc3RtdCkgewogICAgICAgICAgcHV0KCdfX2FzbV9fICcpOwogICAgICAgICAgZm9yKGxldCBpbm5lciBvZiBnY2NfYXNtX3N0bXQuaW5uZXIpIHByaW50ZXIucHJpbnQoaW5uZXIpOwogICAgICAgIH0KICAgICAgICBHTlVJbmxpbmVBdHRyKGdudV9pbmxpbmVfYXR0cikge30KICAgICAgICBHTlVOdWxsRXhwcihnbnVfbnVsbF9leHByKSB7CiAgICAgICAgICBwdXQoYE5VTExgKTsKICAgICAgICB9CiAgICAgICAgSW1wbGljaXRWYWx1ZUluaXRFeHByKGltcGxpY2l0X3ZhbHVlX2luaXRfZXhwcikge30KICAgICAgICBJbmNvbXBsZXRlQXJyYXlUeXBlKGluY29tcGxldGVfYXJyYXlfdHlwZSkge30KICAgICAgICBJbmRpcmVjdEZpZWxkRGVjbChpbmRpcmVjdF9maWVsZF9kZWNsKSB7fQogICAgICAgIEluZGlyZWN0R290b1N0bXQoaW5kaXJlY3RfZ290b19zdG10KSB7fQogICAgICAgIEluamVjdGVkQ2xhc3NOYW1lVHlwZShpbmplY3RlZF9jbGFzc19uYW1lX3R5cGUpIHt9CiAgICAgICAgTGFtYmRhRXhwcihsYW1iZGFfZXhwcikge30KICAgICAgICBMaW5rYWdlU3BlY0RlY2wobGlua2FnZV9zcGVjX2RlY2wpIHsKICAgICAgICAgIGNvbnN0IHsgbGFuZ3VhZ2UgfSA9IGxpbmthZ2Vfc3BlY19kZWNsOwogICAgICAgICAgcHV0KGxhbmd1YWdlID8gYGV4dGVybiAiJHtsYW5ndWFnZX0iIGAgOiBgZXh0ZXJuIGApOwogICAgICAgICAgZm9yKGxldCBpbm5lciBvZiBsaW5rYWdlX3NwZWNfZGVjbC5pbm5lcikgcHJpbnRlci5wcmludChpbm5lcik7CiAgICAgICAgfQogICAgICAgIExWYWx1ZVJlZmVyZW5jZVR5cGUobF92YWx1ZV9yZWZlcmVuY2VfdHlwZSkge30KICAgICAgICBNYXRlcmlhbGl6ZVRlbXBvcmFyeUV4cHIobWF0ZXJpYWxpemVfdGVtcG9yYXJ5X2V4cHIpIHsKICAgICAgICAgIGZvcihsZXQgaW5uZXIgb2YgbWF0ZXJpYWxpemVfdGVtcG9yYXJ5X2V4cHIuaW5uZXIpIHByaW50ZXIucHJpbnQoaW5uZXIpOwogICAgICAgIH0KICAgICAgICBNYXhGaWVsZEFsaWdubWVudEF0dHIobWF4X2ZpZWxkX2FsaWdubWVudF9hdHRyKSB7fQogICAgICAgIE1heUFsaWFzQXR0cihtYXlfYWxpYXNfYXR0cikge30KICAgICAgICBNZW1iZXJQb2ludGVyVHlwZShtZW1iZXJfcG9pbnRlcl90eXBlKSB7fQogICAgICAgIE1pblZlY3RvcldpZHRoQXR0cihtaW5fdmVjdG9yX3dpZHRoX2F0dHIpIHt9CiAgICAgICAgTW9kZUF0dHIobW9kZV9hdHRyKSB7fQogICAgICAgIE5hbWVzcGFjZURlY2wobmFtZXNwYWNlX2RlY2wpIHt9CiAgICAgICAgTm9EZWJ1Z0F0dHIobm9fZGVidWdfYXR0cikge30KICAgICAgICBOb0lubGluZUF0dHIobm9faW5saW5lX2F0dHIpIHt9CiAgICAgICAgTm9uVHlwZVRlbXBsYXRlUGFybURlY2wobm9uX3R5cGVfdGVtcGxhdGVfcGFybV9kZWNsKSB7fQogICAgICAgIE9mZnNldE9mRXhwcihvZmZzZXRfb2ZfZXhwcikge30KICAgICAgICBPcGFxdWVWYWx1ZUV4cHIob3BhcXVlX3ZhbHVlX2V4cHIpIHsKICAgICAgICAgIC8vY29uc29sZS5sb2coJ09wYXF1ZVZhbHVlRXhwcicsb3BhcXVlX3ZhbHVlX2V4cHIpOwogICAgICAgICAgcHV0KGAvKioqRklYTUU6IE9wYXF1ZVZhbHVlRXhwcioqKi9gKTsKICAgICAgICB9CiAgICAgICAgT3duZXJBdHRyKG93bmVyX2F0dHIpIHt9CiAgICAgICAgUGFja2VkQXR0cihwYWNrZWRfYXR0cikge30KICAgICAgICBQYWNrRXhwYW5zaW9uRXhwcihwYWNrX2V4cGFuc2lvbl9leHByKSB7fQogICAgICAgIFBhY2tFeHBhbnNpb25UeXBlKHBhY2tfZXhwYW5zaW9uX3R5cGUpIHt9CiAgICAgICAgUGFyZW5UeXBlKHBhcmVuX3R5cGUpIHt9CiAgICAgICAgUG9pbnRlckF0dHIocG9pbnRlcl9hdHRyKSB7fQogICAgICAgIFBvaW50ZXJUeXBlKHBvaW50ZXJfdHlwZSkge30KICAgICAgICBQcmVkZWZpbmVkRXhwcihwcmVkZWZpbmVkX2V4cHIpIHsKICAgICAgICAgIGNvbnN0IHsgbmFtZSB9ID0gcHJlZGVmaW5lZF9leHByOwoKICAgICAgICAgIHB1dChuYW1lKTsKICAgICAgICB9CiAgICAgICAgUXVhbFR5cGUocXVhbF90eXBlKSB7fQogICAgICAgIFJlY29yZFR5cGUocmVjb3JkX3R5cGUpIHt9CiAgICAgICAgUmV0dXJuc05vbk51bGxBdHRyKHJldHVybnNfbm9uX251bGxfYXR0cikge30KICAgICAgICBSVmFsdWVSZWZlcmVuY2VUeXBlKHJfdmFsdWVfcmVmZXJlbmNlX3R5cGUpIHt9CiAgICAgICAgU2VudGluZWxBdHRyKHNlbnRpbmVsX2F0dHIpIHt9CiAgICAgICAgU2h1ZmZsZVZlY3RvckV4cHIoc2h1ZmZsZV92ZWN0b3JfZXhwcikge30KICAgICAgICBTaXplT2ZQYWNrRXhwcihzaXplX29mX3BhY2tfZXhwcikge30KICAgICAgICBTdGF0aWNBc3NlcnREZWNsKHN0YXRpY19hc3NlcnRfZGVjbCkge30KICAgICAgICBTdG10RXhwcihzdG10X2V4cHIpIHsKICAgICAgICAgIHByaW50ZXIucHJpbnQoc3RtdF9leHByLmlubmVyWzBdKTsKICAgICAgICB9CiAgICAgICAgU3Vic3ROb25UeXBlVGVtcGxhdGVQYXJtRXhwcihzdWJzdF9ub25fdHlwZV90ZW1wbGF0ZV9wYXJtX2V4cHIpIHt9CiAgICAgICAgU3Vic3RUZW1wbGF0ZVR5cGVQYXJtVHlwZShzdWJzdF90ZW1wbGF0ZV90eXBlX3Bhcm1fdHlwZSkge30KICAgICAgICBUYXJnZXRBdHRyKHRhcmdldF9hdHRyKSB7fQogICAgICAgIFRlbXBsYXRlQXJndW1lbnQodGVtcGxhdGVfYXJndW1lbnQpIHt9CiAgICAgICAgVGVtcGxhdGVTcGVjaWFsaXphdGlvblR5cGUodGVtcGxhdGVfc3BlY2lhbGl6YXRpb25fdHlwZSkge30KICAgICAgICBUZW1wbGF0ZVRlbXBsYXRlUGFybURlY2wodGVtcGxhdGVfdGVtcGxhdGVfcGFybV9kZWNsKSB7fQogICAgICAgIFRlbXBsYXRlVHlwZVBhcm1EZWNsKHRlbXBsYXRlX3R5cGVfcGFybV9kZWNsKSB7fQogICAgICAgIFRlbXBsYXRlVHlwZVBhcm1UeXBlKHRlbXBsYXRlX3R5cGVfcGFybV90eXBlKSB7fQogICAgICAgIFRQYXJhbUNvbW1hbmRDb21tZW50KHRfcGFyYW1fY29tbWFuZF9jb21tZW50KSB7fQogICAgICAgIFR5cGVBbGlhc0RlY2wodHlwZV9hbGlhc19kZWNsKSB7fQogICAgICAgIFR5cGVBbGlhc1RlbXBsYXRlRGVjbCh0eXBlX2FsaWFzX3RlbXBsYXRlX2RlY2wpIHt9CiAgICAgICAgVHlwZWRlZlR5cGUodHlwZWRlZl90eXBlKSB7fQogICAgICAgIFR5cGVPZkV4cHJUeXBlKHR5cGVfb2ZfZXhwcl90eXBlKSB7fQogICAgICAgIFR5cGVUcmFpdEV4cHIodHlwZV90cmFpdF9leHByKSB7fQogICAgICAgIFVuYXJ5VHJhbnNmb3JtVHlwZSh1bmFyeV90cmFuc2Zvcm1fdHlwZSkge30KICAgICAgICBVbnJlc29sdmVkVXNpbmdWYWx1ZURlY2wodW5yZXNvbHZlZF91c2luZ192YWx1ZV9kZWNsKSB7fQogICAgICAgIFVudXNlZEF0dHIodW51c2VkX2F0dHIpIHt9CiAgICAgICAgVXNpbmdEZWNsKHVzaW5nX2RlY2wpIHt9CiAgICAgICAgVXNpbmdEaXJlY3RpdmVEZWNsKHVzaW5nX2RpcmVjdGl2ZV9kZWNsKSB7fQogICAgICAgIFVzaW5nU2hhZG93RGVjbCh1c2luZ19zaGFkb3dfZGVjbCkge30KICAgICAgICBWQUFyZ0V4cHIodmFfYXJnX2V4cHIpIHt9CiAgICAgICAgVmFyVGVtcGxhdGVEZWNsKHZhcl90ZW1wbGF0ZV9kZWNsKSB7fQogICAgICAgIFZlY3RvclR5cGUodmVjdG9yX3R5cGUpIHt9CiAgICAgICAgVmVyYmF0aW1MaW5lQ29tbWVudCh2ZXJiYXRpbV9saW5lX2NvbW1lbnQpIHt9CiAgICAgICAgVmlzaWJpbGl0eUF0dHIodmlzaWJpbGl0eV9hdHRyKSB7fQogICAgICAgIFdlYWtSZWZBdHRyKHdlYWtfcmVmX2F0dHIpIHt9CgogICAgICAgIENYWFJlY29yZERlY2woY3h4X3JlY29yZF9kZWNsKSB7CiAgICAgICAgICBjb25zdCB7IG5hbWUsIHRhZ1VzZWQgfSA9IGN4eF9yZWNvcmRfZGVjbDsKICAgICAgICAgIGRlcHRoKys7CgogICAgICAgICAgcHV0KGAke3RhZ1VzZWR9ICR7bmFtZX0ge1xuYCk7CgogICAgICAgICAgaWYoY3h4X3JlY29yZF9kZWNsLmlubmVyKSB7CiAgICAgICAgICAgIGxldCBpID0gLTE7CiAgICAgICAgICAgIGZvcihsZXQgaW5uZXIgb2YgY3h4X3JlY29yZF9kZWNsLmlubmVyKSB7CiAgICAgICAgICAgICAgaSsrOwogICAgICAgICAgICAgIGlmKGlubmVyLmtpbmQgJiYgKGlubmVyLmtpbmQuZW5kc1dpdGgoJ0NvbW1lbnQnKSB8fCBpbm5lci5raW5kID09ICdDWFhSZWNvcmREZWNsJykpIGNvbnRpbnVlOwogICAgICAgICAgICAgIC8vICBjb25zb2xlLmxvZyhgQ1hYUmVjb3JkRGVjbCBpbm5lclske2l9XWAsIGlubmVyKTsKICAgICAgICAgICAgICBwcmludGVyLnByaW50KGlubmVyKTsKICAgICAgICAgICAgICBwdXQoYFxuYCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGRlcHRoLS07CiAgICAgICAgICBwdXQoYFxufWApOwogICAgICAgIH0KICAgICAgICBDWFhDb25zdHJ1Y3RvckRlY2woY3h4X2NvbnN0cnVjdG9yX2RlY2wpIHsKICAgICAgICAgIGNvbnN0IHsgbmFtZSwgdHlwZSB9ID0gY3h4X2NvbnN0cnVjdG9yX2RlY2w7CiAgICAgICAgICBsZXQgaSA9IDAsCiAgICAgICAgICAgIHBhcmFtLAogICAgICAgICAgICBpbml0aWFsaXplcjsKICAgICAgICAgIGxldCBsID0gY3h4X2NvbnN0cnVjdG9yX2RlY2w/LmlubmVyID8gWy4uLmN4eF9jb25zdHJ1Y3Rvcl9kZWNsLmlubmVyXS5maWx0ZXIobiA9PiBuLmtpbmQgJiYgIW4ua2luZC5lbmRzV2l0aCgnQ29tbWVudCcpKSA6IFtdOwogICAgICAgICAgcHV0KGAke25hbWV9KGApOwogICAgICAgICAgd2hpbGUobC5sZW5ndGggJiYgbFswXS5raW5kID09ICdQYXJtVmFyRGVjbCcgJiYgKHBhcmFtID0gbC5zaGlmdCgpKSkgewogICAgICAgICAgICAvKmlmKHBhcmFtLm5hbWUpKi8gewogICAgICAgICAgICAgIGlmKGkgPiAwKSBwdXQoJywgJyk7CiAgICAgICAgICAgICAgcHJpbnRlci5wcmludChwYXJhbSk7CiAgICAgICAgICAgICAgaSsrOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBwdXQoYClgKTsKICAgICAgICAgIGRlcHRoKys7CiAgICAgICAgICBpZihsLmxlbmd0aCAmJiBsWzBdLmtpbmQgPT0gJ0NYWEN0b3JJbml0aWFsaXplcicpIHsKICAgICAgICAgICAgcHV0KGBcbjogYCk7CiAgICAgICAgICAgIGkgPSAwOwogICAgICAgICAgICB3aGlsZShsLmxlbmd0aCAmJiBsWzBdLmtpbmQgPT0gJ0NYWEN0b3JJbml0aWFsaXplcicgJiYgKGluaXRpYWxpemVyID0gbC5zaGlmdCgpKSkgewogICAgICAgICAgICAgIGlmKGkrKyA+IDApIHB1dCgnXG4sICcpOwogICAgICAgICAgICAgIGxldCBpbXBsaWNpdF9jYXN0ID0gaW5pdGlhbGl6ZXIuaW5uZXJbMF07CiAgICAgICAgICAgICAgaWYoaW1wbGljaXRfY2FzdD8uaW5uZXIpIHsKICAgICAgICAgICAgICAgIGxldCBtZW1iZXJfZXhwciA9IGltcGxpY2l0X2Nhc3QuaW5uZXJbMF07CgogICAgICAgICAgICAgICAgcHV0KG1lbWJlcl9leHByLm5hbWUgKyBgKGApOwogICAgICAgICAgICAgICAgaWYobWVtYmVyX2V4cHI/LmlubmVyKSBwcmludGVyLnByaW50KG1lbWJlcl9leHByLmlubmVyWzBdKTsKCiAgICAgICAgICAgICAgICBwdXQoYClgKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGRlcHRoLS07CiAgICAgICAgICBpZihsLmxlbmd0aCkgewogICAgICAgICAgICBwdXQoYFxuYCk7CiAgICAgICAgICAgIGZvcihsZXQgbm9kZSBvZiBsKSBwcmludGVyLnByaW50KG5vZGUpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcHV0KGA7YCk7CiAgICAgICAgICB9CiAgICAgICAgICBwdXQoYFxuYCk7CiAgICAgICAgfQoKICAgICAgICBDWFhDdG9ySW5pdGlhbGl6ZXIoY3h4X2N0b3JfaW5pdGlhbGl6ZXIpIHsKICAgICAgICAgIGNvbnN0IHsKICAgICAgICAgICAgYW55SW5pdDogeyBuYW1lIH0sCiAgICAgICAgICB9ID0gY3h4X2N0b3JfaW5pdGlhbGl6ZXI7CgogICAgICAgICAgcHV0KG5hbWUpOwogICAgICAgICAgcHV0KGAoYCk7CiAgICAgICAgICBpZihjeHhfY3Rvcl9pbml0aWFsaXplci5pbm5lcikKICAgICAgICAgICAgZm9yKGxldCBpbm5lciBvZiBjeHhfY3Rvcl9pbml0aWFsaXplci5pbm5lcikgewogICAgICAgICAgICAgIGlmKGlubmVyLmtpbmQuZW5kc1dpdGgoJ0NvbW1lbnQnKSkgY29udGludWU7CiAgICAgICAgICAgICAgcHJpbnRlci5wcmludChpbm5lciA/PyAnJyk7CiAgICAgICAgICAgIH0KICAgICAgICAgIHB1dChgKWApOwogICAgICAgIH0KICAgICAgICBDWFhEZXBlbmRlbnRTY29wZU1lbWJlckV4cHIoY3h4X2RlcGVuZGVudF9zY29wZV9tZW1iZXJfZXhwcikgewogICAgICAgICAgY29uc3QgeyB0eXBlLCB2YWx1ZUNhdGVnb3J5LCBpc0Fycm93LCBtZW1iZXIgfSA9IGN4eF9kZXBlbmRlbnRfc2NvcGVfbWVtYmVyX2V4cHI7CgogICAgICAgICAgLy8gaWYoY3h4X2RlcGVuZGVudF9zY29wZV9tZW1iZXJfZXhwci5pbm5lcikKICAgICAgICAgIGZvcihsZXQgaW5uZXIgb2YgY3h4X2RlcGVuZGVudF9zY29wZV9tZW1iZXJfZXhwci5pbm5lcikgewogICAgICAgICAgICBpZihpbm5lci5raW5kLmVuZHNXaXRoKCdDb21tZW50JykpIGNvbnRpbnVlOwogICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnQ1hYRGVwZW5kZW50U2NvcGVNZW1iZXJFeHByJywgaW5uZXIpOwogICAgICAgICAgICBwcmludGVyLnByaW50KGlubmVyKTsKICAgICAgICAgIH0KCiAgICAgICAgICBwdXQoYC4ke21lbWJlcn1gKTsKICAgICAgICB9CiAgICAgICAgQ1hYVGhpc0V4cHIoY3h4X3RoaXNfZXhwcikgewogICAgICAgICAgY29uc3QgeyB2YWx1ZUNhdGVnb3J5LCBpc0ltcGxpY2l0IH0gPSBjeHhfdGhpc19leHByOwoKICAgICAgICAgIHB1dCgndGhpcycpOwogICAgICAgIH0KICAgICAgICBDWFhEZXN0cnVjdG9yRGVjbChjeHhfZGVzdHJ1Y3Rvcl9kZWNsKSB7CiAgICAgICAgICBjb25zdCB7IGlzSW1wbGljaXQsIG5hbWUsIG1hbmdsZWROYW1lLCB0eXBlLCBpbmxpbmUsIGV4cGxpY2l0bHlEZWZhdWx0ZWQgfSA9IGN4eF9kZXN0cnVjdG9yX2RlY2w7CgogICAgICAgICAgbGV0IGwgPSBjeHhfZGVzdHJ1Y3Rvcl9kZWNsLmlubmVyID8gWy4uLmN4eF9kZXN0cnVjdG9yX2RlY2wuaW5uZXJdLmZpbHRlcihuID0+IG4ua2luZCAmJiAhbi5raW5kLmVuZHNXaXRoKCdDb21tZW50JykpIDogW107CiAgICAgICAgICBwdXQoYCR7bmFtZX0oYCk7CgogICAgICAgICAgcHV0KGApYCk7CgogICAgICAgICAgaWYobC5sZW5ndGgpIHsKICAgICAgICAgICAgcHV0KGBcbmApOwogICAgICAgICAgICBmb3IobGV0IG5vZGUgb2YgbCkgcHJpbnRlci5wcmludChub2RlKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHB1dChgO2ApOwogICAgICAgICAgfQogICAgICAgICAgcHV0KGBcbmApOwogICAgICAgIH0KICAgICAgICBDWFhNZXRob2REZWNsKGN4eF9tZXRob2RfZGVjbCkgewogICAgICAgICAgY29uc3QgewogICAgICAgICAgICBuYW1lLAogICAgICAgICAgICB0eXBlOiB7IHF1YWxUeXBlOiBmdW5jdGlvblR5cGUgfSwKICAgICAgICAgICAgc3RvcmFnZUNsYXNzLAogICAgICAgICAgfSA9IGN4eF9tZXRob2RfZGVjbDsKICAgICAgICAgIGNvbnN0IHJldHVyblR5cGUgPSBmdW5jdGlvblR5cGUuc2xpY2UoMCwgZnVuY3Rpb25UeXBlLmluZGV4T2YoJygnKSk7CgogICAgICAgICAgLy8gIGNvbnNvbGUubG9nKCdDWFhNZXRob2REZWNsJywgY29uc29sZS5jb25maWcoeyBkZXB0aDogMTAgfSksIGN4eF9tZXRob2RfZGVjbCk7CiAgICAgICAgICBsZXQgaSA9IDAsCiAgICAgICAgICAgIHBhcmFtLAogICAgICAgICAgICBpbml0aWFsaXplcjsKICAgICAgICAgIGxldCBpbm5lciA9IGN4eF9tZXRob2RfZGVjbC5pbm5lciA/IFsuLi5jeHhfbWV0aG9kX2RlY2wuaW5uZXJdLmZpbHRlcihuID0+IG4ua2luZCAmJiAhbi5raW5kLmVuZHNXaXRoKCdDb21tZW50JykpIDogW107CiAgICAgICAgICBpZihzdG9yYWdlQ2xhc3MpIHB1dChgJHtzdG9yYWdlQ2xhc3N9IGApOwogICAgICAgICAgcHV0KGAke3JldHVyblR5cGV9XG5gKTsKICAgICAgICAgIHB1dChgJHtuYW1lfShgKTsKICAgICAgICAgIHdoaWxlKGlubmVyLmxlbmd0aCAmJiBpbm5lclswXS5raW5kID09ICdQYXJtVmFyRGVjbCcgJiYgKHBhcmFtID0gaW5uZXIuc2hpZnQoKSkpIHsKICAgICAgICAgICAgaWYoaSsrID4gMCkgcHV0KCcsICcpOwogICAgICAgICAgICBwcmludGVyLnByaW50KHBhcmFtKTsKICAgICAgICAgIH0KICAgICAgICAgIHB1dChgKWApOwogICAgICAgICAgLy9jb25zb2xlLmxvZygnQ1hYTWV0aG9kRGVjbCcsIHsgaW5uZXIgfSk7CiAgICAgICAgICBpZihpbm5lci5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgIHB1dChgIGApOwogICAgICAgICAgICBkZXB0aCsrOwogICAgICAgICAgICBmb3IobGV0IG5vZGUgb2YgaW5uZXIpIHByaW50ZXIucHJpbnQobm9kZSk7CiAgICAgICAgICAgIGRlcHRoLS07CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBwdXQoYDtgKTsKICAgICAgICAgIH0KICAgICAgICAgIHB1dChgXG5gKTsKICAgICAgICB9CgogICAgICAgIENYWFN0YXRpY0Nhc3RFeHByKGN4eF9zdGF0aWNfY2FzdF9leHByKSB7CiAgICAgICAgICBjb25zdCB7CiAgICAgICAgICAgIHR5cGU6IHsgcXVhbFR5cGU6IHR5cGVOYW1lIH0sCiAgICAgICAgICAgIHZhbHVlQ2F0ZWdvcnksCiAgICAgICAgICAgIGNhc3RLaW5kLAogICAgICAgICAgfSA9IGN4eF9zdGF0aWNfY2FzdF9leHByOwoKICAgICAgICAgIGlmKGNhc3RLaW5kID09ICdOb09wJykgewogICAgICAgICAgICBwdXQoYDBgKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgfQogICAgICAgICAgLy9jb25zb2xlLmxvZygnQ1hYU3RhdGljQ2FzdEV4cHInLCBjeHhfc3RhdGljX2Nhc3RfZXhwcik7CiAgICAgICAgICBwdXQoYHN0YXRpY19jYXN0PGApOwogICAgICAgICAgcHV0KHR5cGVOYW1lKTsKICAgICAgICAgIHB1dChgPihgKTsKCiAgICAgICAgICBpZihjeHhfc3RhdGljX2Nhc3RfZXhwci5pbm5lcikKICAgICAgICAgICAgZm9yKGxldCBpbm5lciBvZiBjeHhfc3RhdGljX2Nhc3RfZXhwci5pbm5lcikgewogICAgICAgICAgICAgIGlmKGlubmVyLmtpbmQgPT0gJ0RlY2xSZWZFeHByJyAmJiBpbm5lci5yZWZlcmVuY2VkRGVjbC5uYW1lID09ICcnKSBjb250aW51ZTsKICAgICAgICAgICAgICBwcmludGVyLnByaW50KGlubmVyKTsKICAgICAgICAgICAgfQogICAgICAgICAgcHV0KGApYCk7CiAgICAgICAgfQoKICAgICAgICBDWFhVbnJlc29sdmVkQ29uc3RydWN0RXhwcihjeHhfdW5yZXNvbHZlZF9jb25zdHJ1Y3RfZXhwcikgewogICAgICAgICAgY29uc3QgeyB0eXBlLCB2YWx1ZUNhdGVnb3J5IH0gPSBjeHhfdW5yZXNvbHZlZF9jb25zdHJ1Y3RfZXhwcjsKICAgICAgICAgIGlmKGN4eF91bnJlc29sdmVkX2NvbnN0cnVjdF9leHByLmlubmVyKQogICAgICAgICAgICBmb3IobGV0IGlubmVyIG9mIGN4eF91bnJlc29sdmVkX2NvbnN0cnVjdF9leHByLmlubmVyKSB7CiAgICAgICAgICAgICAgaWYoaW5uZXIua2luZC5lbmRzV2l0aCgnQ29tbWVudCcpKSBjb250aW51ZTsKICAgICAgICAgICAgICBwcmludGVyLnByaW50KGlubmVyKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBDWFhOZXdFeHByKGN4eF9uZXdfZXhwcikgewogICAgICAgICAgY29uc3QgewogICAgICAgICAgICB0eXBlOiB7IHF1YWxUeXBlOiB0eXBlIH0sCiAgICAgICAgICAgIHZhbHVlQ2F0ZWdvcnksCiAgICAgICAgICAgIGlzQXJyYXksCiAgICAgICAgICB9ID0gY3h4X25ld19leHByOwogICAgICAgICAgLy9jb25zb2xlLmxvZygnQ1hYTmV3RXhwcicsIGN4eF9uZXdfZXhwcik7CiAgICAgICAgICB0eXBlID0gdHlwZS50cmltKCk7CiAgICAgICAgICBpZihpc0FycmF5KSB7CiAgICAgICAgICAgIHB1dCgnbmV3ICcgKyB0eXBlICsgJ1snKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHB1dCgnbmV3ICcgKyB0eXBlICsgJygnKTsKICAgICAgICAgIH0KICAgICAgICAgIHByaW50ZXIucHJpbnQoY3h4X25ld19leHByLmlubmVyWzBdKTsKCiAgICAgICAgICBpZihpc0FycmF5KSBwdXQoYF1gKTsKICAgICAgICAgIGVsc2UgcHV0KGApYCk7CiAgICAgICAgfQogICAgICAgIENYWERlbGV0ZUV4cHIoY3h4X2RlbGV0ZV9leHByKSB7CiAgICAgICAgICBjb25zdCB7CiAgICAgICAgICAgIHR5cGU6IHsgcXVhbFR5cGU6IHR5cGUgfSwKICAgICAgICAgICAgdmFsdWVDYXRlZ29yeSwKICAgICAgICAgICAgaXNBcnJheSwKICAgICAgICAgICAgaXNBcnJheUFzV3JpdHRlbiwKICAgICAgICAgIH0gPSBjeHhfZGVsZXRlX2V4cHI7CiAgICAgICAgICBwdXQoYGRlbGV0ZSBgKTsKCiAgICAgICAgICBwcmludGVyLnByaW50KGN4eF9kZWxldGVfZXhwci5pbm5lclswXSk7CiAgICAgICAgfQogICAgICAgIENYWEJvb2xMaXRlcmFsRXhwcihjeHhfYm9vbF9saXRlcmFsX2V4cHIpIHsKICAgICAgICAgIGNvbnN0IHsgdHlwZSwgdmFsdWVDYXRlZ29yeSwgdmFsdWUgfSA9IGN4eF9ib29sX2xpdGVyYWxfZXhwcjsKCiAgICAgICAgICBwdXQodmFsdWUgPyAndHJ1ZScgOiAnZmFsc2UnKTsKICAgICAgICB9CiAgICAgICAgQ1hYMTFOb1JldHVybkF0dHIoY3h4MTFfbm9fcmV0dXJuX2F0dHIpIHt9CiAgICAgICAgQ1hYQmluZFRlbXBvcmFyeUV4cHIoY3h4X2JpbmRfdGVtcG9yYXJ5X2V4cHIpIHt9CiAgICAgICAgQ1hYQ2F0Y2hTdG10KGN4eF9jYXRjaF9zdG10KSB7fQogICAgICAgIENYWENvbnN0cnVjdEV4cHIoY3h4X2NvbnN0cnVjdF9leHByKSB7CiAgICAgICAgICBjb25zdCB7IHR5cGUgfSA9IGN4eF9jb25zdHJ1Y3RfZXhwcjsKCiAgICAgICAgICBmb3IobGV0IGlubmVyIG9mIGN4eF9jb25zdHJ1Y3RfZXhwci5pbm5lcikgcHJpbnRlci5wcmludChpbm5lcik7CiAgICAgICAgfQogICAgICAgIENYWENvbnZlcnNpb25EZWNsKGN4eF9jb252ZXJzaW9uX2RlY2wpIHt9CiAgICAgICAgQ1hYRGVmYXVsdEFyZ0V4cHIoY3h4X2RlZmF1bHRfYXJnX2V4cHIpIHt9CiAgICAgICAgQ1hYRGVmYXVsdEluaXRFeHByKGN4eF9kZWZhdWx0X2luaXRfZXhwcikge30KICAgICAgICBDWFhGb3JSYW5nZVN0bXQoY3h4X2Zvcl9yYW5nZV9zdG10KSB7fQogICAgICAgIENYWEZ1bmN0aW9uYWxDYXN0RXhwcihjeHhfZnVuY3Rpb25hbF9jYXN0X2V4cHIpIHt9CiAgICAgICAgQ1hYTWVtYmVyQ2FsbEV4cHIoY3h4X21lbWJlcl9jYWxsX2V4cHIpIHt9CgogICAgICAgIENYWE5vZXhjZXB0RXhwcihjeHhfbm9leGNlcHRfZXhwcikge30KICAgICAgICBDWFhOdWxsUHRyTGl0ZXJhbEV4cHIoY3h4X251bGxfcHRyX2xpdGVyYWxfZXhwcikge30KICAgICAgICBDWFhPcGVyYXRvckNhbGxFeHByKGN4eF9vcGVyYXRvcl9jYWxsX2V4cHIpIHt9CiAgICAgICAgQ1hYUmVpbnRlcnByZXRDYXN0RXhwcihjeHhfcmVpbnRlcnByZXRfY2FzdF9leHByKSB7fQogICAgICAgIENYWFNjYWxhclZhbHVlSW5pdEV4cHIoY3h4X3NjYWxhcl92YWx1ZV9pbml0X2V4cHIpIHt9CiAgICAgICAgQ1hYVGVtcG9yYXJ5T2JqZWN0RXhwcihjeHhfdGVtcG9yYXJ5X29iamVjdF9leHByKSB7CiAgICAgICAgICBjb25zdCB7IHR5cGUgfSA9IGN4eF90ZW1wb3Jhcnlfb2JqZWN0X2V4cHI7CgogICAgICAgICAgcHV0KHR5cGUucXVhbFR5cGUpOwogICAgICAgICAgcHV0KGAoYCk7CiAgICAgICAgICBmb3IobGV0IGlubmVyIG9mIGN4eF90ZW1wb3Jhcnlfb2JqZWN0X2V4cHIuaW5uZXIpIHsKICAgICAgICAgICAgcHJpbnRlci5wcmludChpbm5lcik7CiAgICAgICAgICB9CiAgICAgICAgICBwdXQoYClgKTsKICAgICAgICB9CiAgICAgICAgQ1hYVHJ5U3RtdChjeHhfdHJ5X3N0bXQpIHt9CiAgICAgIH0pKCksCiAgICB9LAogIH0pOwoKICByZXR1cm4gcHJpbnRlcjsKfQoKZXhwb3J0IGZ1bmN0aW9uIFByaW50Tm9kZShub2RlKSB7CiAgbGV0IG91dCwKICAgIHNlcCA9ICcgJzsKCiAgc3dpdGNoIChub2RlLmtpbmQpIHsKICAgIGNhc2UgJ0NvbnN0YW50RXhwcic6CiAgICAgIG91dCA9IG5vZGUuaW5uZXIubWFwKFByaW50Tm9kZSk7CiAgICAgIGJyZWFrOwogICAgY2FzZSAnSW50ZWdlckxpdGVyYWwnOgogICAgICBvdXQgPSBub2RlLnZhbHVlOwogICAgICBicmVhazsKICAgIGNhc2UgJ0JpbmFyeU9wZXJhdG9yJzoKICAgICAgb3V0ID0gbm9kZS5pbm5lci5tYXAoUHJpbnROb2RlKTsKICAgICAgc2VwID0gYCAke25vZGUub3Bjb2RlfSBgOwogICAgICBicmVhazsKICB9CgogIGlmKEFycmF5LmlzQXJyYXkob3V0KSkgb3V0ID0gb3V0LmpvaW4oc2VwKTsKICByZXR1cm4gb3V0Owp9CgpleHBvcnQgZnVuY3Rpb24gUHJpbnRBc3Qobm9kZSwgYXN0KSB7CiAgaWYoJ2FzdCcgaW4gbm9kZSkgbm9kZSA9IG5vZGUuYXN0OwogIGFzdCA/Pz0gZ2xvYmFsVGhpc1snJCddLmRhdGE7CiAgbGV0IHByaW50ZXIgPSBOb2RlUHJpbnRlcihhc3QpOwogIGdsb2JhbFRoaXMucHJpbnRlciA9IHByaW50ZXI7CiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMocHJpbnRlciwgewogICAgcGF0aDogewogICAgICBnZXQoKSB7CiAgICAgICAgcmV0dXJuIERlZXBQYXRoT2YoYXN0LCB0aGlzLm5vZGUpOwogICAgICB9LAogICAgfSwKICB9KTsKCiAgaWYoQXJyYXkuaXNBcnJheShub2RlKSkgewogICAgZm9yKGxldCBlbGVtIG9mIG5vZGUpIHsKICAgICAgaWYocHJpbnRlci5vdXRwdXQpIHByaW50ZXIucHV0KCdcbicpOwogICAgICBwcmludGVyKGVsZW0sIGFzdCk7CiAgICB9CiAgfSBlbHNlIHsKICAgIHByaW50ZXIobm9kZSwgYXN0KTsKICB9CgogIHJldHVybiBwcmludGVyLm91dHB1dDsKfQoKZXhwb3J0IGZ1bmN0aW9uIGlzTm9kZShvYmopIHsKICByZXR1cm4gaXNPYmplY3Qob2JqKSAmJiB0eXBlb2Ygb2JqLmtpbmQgPT0gJ3N0cmluZyc7Cn0KCmV4cG9ydCBmdW5jdGlvbiBHZXRUeXBlKG5hbWVfb3JfaWQsIGFzdCA9IGdsb2JhbFRoaXNbJyQnXT8uZGF0YSkgewogIGxldCByZXN1bHQsIGlkeDsKCiAgaWYodHlwZW9mIG5hbWVfb3JfaWQgPT0gJ29iamVjdCcgJiYgbmFtZV9vcl9pZCkgewogICAgcmVzdWx0ID0gbmFtZV9vcl9pZDsKICB9IGVsc2UgewogICAgY29uc3QgdHlwZXMgPSBhc3QuaW5uZXIuZmlsdGVyKG4gPT4gLyg/OlJlY29yZERlY2x8VHlwZWRlZkRlY2x8RW51bURlY2wpLy50ZXN0KG4ua2luZCkpOwoKICAgIGlmKHR5cGVvZiBuYW1lX29yX2lkID09ICdzdHJpbmcnKSB7CiAgICAgIGxldCB0YWdVc2VkLAogICAgICAgIHdhbnRLaW5kID0gL14uKi87CgogICAgICBpZigvXig/OnN0cnVjdHx1bmlvbnxlbnVtKVxzLy50ZXN0KG5hbWVfb3JfaWQpKSB7CiAgICAgICAgdGFnVXNlZCA9IG5hbWVfb3JfaWQucmVwbGFjZSgvXHMuKi9nLCAnJyk7CiAgICAgICAgbmFtZV9vcl9pZCA9IG5hbWVfb3JfaWQuc3Vic3RyaW5nKHRhZ1VzZWQubGVuZ3RoICsgMSk7CiAgICAgIH0KCiAgICAgIHN3aXRjaCAodGFnVXNlZCkgewogICAgICAgIGNhc2UgJ3N0cnVjdCc6CiAgICAgICAgY2FzZSAndW5pb24nOgogICAgICAgICAgd2FudEtpbmQgPSAvXlJlY29yZERlY2wvOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAnZW51bSc6CiAgICAgICAgICB3YW50S2luZCA9IC9eRW51bURlY2wvOwogICAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgICAgbGV0IHJlc3VsdHMgPSB0eXBlcy5maWx0ZXIobmFtZV9vcl9pZC5zdGFydHNXaXRoKCcweCcpID8gbm9kZSA9PiBub2RlLmlkID09IG5hbWVfb3JfaWQgJiYgd2FudEtpbmQudGVzdChub2RlLmtpbmQpIDogbm9kZSA9PiBub2RlLm5hbWUgPT0gbmFtZV9vcl9pZCAmJiB3YW50S2luZC50ZXN0KG5vZGUua2luZCkpOwogICAgICBpZihyZXN1bHRzLmxlbmd0aCA8PSAxIHx8IChpZHggPSByZXN1bHRzLmZpbmRJbmRleChyID0+IHIuY29tcGxldGVEZWZpbml0aW9uKSkgPT0gLTEpIGlkeCA9IDA7CiAgICAgIHJlc3VsdCA9IHJlc3VsdHNbaWR4XTsKCiAgICAgIGlmKCFyZXN1bHQgJiYgVHlwZS5kZWNsYXJhdGlvbnMuaGFzKG5hbWVfb3JfaWQpKSByZXN1bHQgPSBUeXBlLmRlY2xhcmF0aW9ucy5nZXQobmFtZV9vcl9pZCk7CiAgICB9IGVsc2UgewogICAgICByZXN1bHQgPSB0eXBlc1tuYW1lX29yX2lkXTsKICAgIH0KICB9CgogIHJldHVybiByZXN1bHQ7Cn0KCmV4cG9ydCBmdW5jdGlvbiBHZXRDbGFzcyhuYW1lX29yX2lkLCBhc3QgPSBnbG9iYWxUaGlzWyckJ10uZGF0YSkgewogIGxldCByZXN1bHQgPQogICAgaXNTdHJpbmcobmFtZV9vcl9pZCkgJiYgLzo6Ly50ZXN0KG5hbWVfb3JfaWQpCiAgICAgID8gR2V0QnlOYW1lKG5hbWVfb3JfaWQsIGFzdCwgbiA9PiAvUmVjb3JkRGVjbC8udGVzdChuLmtpbmQpICYmIG4uY29tcGxldGVEZWZpbml0aW9uKQogICAgICA6IERlZXBGaW5kKGFzdCwgbmFtZU9ySWRQcmVkKG5hbWVfb3JfaWQsIHByb3BlcnR5KCdraW5kJywgcmVnZXhwKC9SZWNvcmREZWNsLykpLCBwcm9wZXJ0eSgnY29tcGxldGVEZWZpbml0aW9uJykpLCBkZWVwLlJFVFVSTl9WQUxVRSk7CgogIGlmKHJlc3VsdCkgewogICAgbGV0IHR5cGUgPSBUeXBlRmFjdG9yeShyZXN1bHQsIGFzdCk7CiAgICBpZih0eXBlKSByZXN1bHQgPSB0eXBlOwoKICAgIHJldHVybiBkZWZpbmUoCiAgICAgIHJlc3VsdCwKICAgICAgcHJvcGVydGllcygKICAgICAgICB7CiAgICAgICAgICBiYXNlcygpIHsKICAgICAgICAgICAgY29uc3QgYSA9IFsuLi5HZXRCYXNlcyh0aGlzLCBhc3QpXTsKICAgICAgICAgICAgaWYoYS5sZW5ndGggPiAwKSByZXR1cm4gYTsKICAgICAgICAgIH0sCiAgICAgICAgfSwKICAgICAgICB7IGVudW1lcmFibGU6IGZhbHNlLCBtZW1vaXplOiB0cnVlIH0sCiAgICAgICksCiAgICApOwogIH0KfQoKZXhwb3J0IGZ1bmN0aW9uKiBHZXRCYXNlcyhub2RlLCBhc3QgPSBnbG9iYWxUaGlzWyckJ10uZGF0YSkgewogIGlmKG5vZGU/LmFzdCkgbm9kZSA9IG5vZGUuYXN0OwogIGlmKG5vZGU/LmtpbmQgIT0gJ0NYWFJlY29yZERlY2wnKSB0aHJvdyBuZXcgVHlwZUVycm9yKGBhcmd1bWVudCAxIG11c3QgYmUgQ2xhc3NEZWNsIC8gQ1hYUmVjb3JkRGVjbGApOwogIGlmKG5vZGU/LmJhc2VzKSBmb3IobGV0IGJhc2Ugb2Ygbm9kZS5iYXNlcykgeWllbGQgR2V0Q2xhc3MoYmFzZS50eXBlLnF1YWxUeXBlLCBhc3QpOwp9CgpleHBvcnQgZnVuY3Rpb24gR2V0QnlOYW1lKGFyZywgYXN0ID0gZ2xvYmFsVGhpc1snJCddLmRhdGEsIC4uLmFyZ3MpIHsKICBjb25zdCBucyA9IGlzU3RyaW5nKGFyZykgPyBhcmcuc3BsaXQoJzo6JykgOiBhcmc7CiAgbGV0IG5vZGUgPSBhc3Q7CgogIHdoaWxlKG5zLmxlbmd0aCA+PSAxKSB7CiAgICBjb25zdCBhcmcgPSBucy5zaGlmdCgpOwoKICAgIGZvcihsZXQgdiBvZiBEZWVwU2VsZWN0KG5vZGUsIG5hbWVPcklkUHJlZChhcmcsIC4uLmFyZ3MpKSkgewogICAgICBpZihucy5sZW5ndGggPT0gMCkgcmV0dXJuIHY7CgogICAgICBsZXQgcjsKICAgICAgaWYoKHIgPSBHZXRCeU5hbWUoWy4uLm5zXSwgdikpKSByZXR1cm4gcjsKICAgIH0KICB9Cn0KCmV4cG9ydCBmdW5jdGlvbiBHZXROYW1lc3BhY2UoYXJnLCByb290ID0gZ2xvYmFsVGhpc1snJCddLmRhdGEsIHByZWRpY2F0ZSA9ICgpID0+IHRydWUpIHsKICBjb25zdCBhID0gQXJyYXkuaXNBcnJheShhcmcpID8gYXJnIDogYXJnLnNwbGl0KCc6OicpOwoKICBsZXQgW25hbWVdID0gYTsKCiAgZm9yKGxldCBbbm9kZSwgcGF0aF0gb2YgRGVlcFNlbGVjdChyb290LCBuID0+ICh0eXBlb2YgbiA9PSAnb2JqZWN0JyA/IChuLm5hbWUgPT0gbmFtZSA/IGRlZXAuWUlFTERfTk9fUkVDVVJTRSA6IG4ubmFtZSA/IGRlZXAuTk9fUkVDVVJTRSA6IGRlZXAuUkVDVVJTRSkgOiAwKSwgZGVlcC5SRVRVUk5fVkFMVUVfUEFUSCkpIHsKICAgIGlmKGEubGVuZ3RoIDw9IDEpIHsKICAgICAgaWYoIXByZWRpY2F0ZShub2RlLCBwYXRoKSkgY29udGludWU7CiAgICAgIHJldHVybiBub2RlOwogICAgfQoKICAgIGxldCByZXN1bHQgPSBHZXROYW1lc3BhY2UoYS5zbGljZSgxKSwgbm9kZSwgcHJlZGljYXRlKTsKCiAgICBpZihyZXN1bHQpIHJldHVybiByZXN1bHQ7CiAgfQp9CgpleHBvcnQgZnVuY3Rpb24gTmFtZXNwYWNlT2Yobm9kZSwgcGF0aCwgYXN0ID0gZ2xvYmFsVGhpc1snJCddLmRhdGEpIHsKICBpZihpc09iamVjdChub2RlKSAmJiBub2RlLmFzdCkgbm9kZSA9IG5vZGUuYXN0OwoKICBsZXQgcCA9IHBhdGggPz8gRGVlcFBhdGhPZihhc3QsIG5vZGUpLAogICAgciA9IFtdLAogICAgaSA9IDA7CgogIHdoaWxlKHA/Lmxlbmd0aCA+IDApIHsKICAgIGxldCBuID0gRGVlcEdldChhc3QsIHApOwoKICAgIGlmKGkgPT0gMCB8fCBuLmtpbmQgPT0gJ05hbWVzcGFjZURlY2wnIHx8IG4ubmFtZSkgci5wdXNoKG4ubmFtZSk7CiAgICBwID0gcC5zbGljZSgwLCAtMik7CiAgICArK2k7CiAgfQoKICByZXR1cm4gZGVmaW5lKAogICAgci5yZXZlcnNlKCksCiAgICBub25lbnVtZXJhYmxlKHsKICAgICAgdG9TdHJpbmcoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuam9pbignOjonKTsKICAgICAgfSwKICAgIH0pLAogICk7Cn0KCmV4cG9ydCBmdW5jdGlvbiBHZXRGaWVsZHMobm9kZSkgewogIGxldCBmaWVsZHMgPSBbLi4uRGVlcFNlbGVjdChub2RlLCAodiwgaykgPT4gLyBhdCAvLnRlc3QodikgJiYgayA9PSAncXVhbFR5cGUnLCBkZWVwLlJFVFVSTl9WQUxVRV9QQVRIKV0ubWFwKChbdiwgcF0pID0+IFt2LnNwbGl0KC8oPzpccypbKCldfCBhdCApL2cpWzJdLCBwLnNsaWNlKDAsIC0yKV0pOwoKICByZXR1cm4gZmllbGRzLm1hcCgoW2xvYywgcHRyXSkgPT4KICAgIGxvYwogICAgICAuc3BsaXQoLzovZykKICAgICAgLm1hcChpID0+ICghaXNOYU4oK2kpID8gK2kgOiBpKSkKICAgICAgLmNvbmNhdChbRGVlcEdldChub2RlLCBwdHIpLm5hbWVdKSwKICApOwp9CgpleHBvcnQgZnVuY3Rpb24gR2V0UGFyYW1zKG5vZGUpIHsKICByZXR1cm4gKG5vZGU/LmlubmVyID8/IFtdKS5maWx0ZXIoY2hpbGQgPT4gY2hpbGQua2luZC5zdGFydHNXaXRoKCdQYXJtJykpOwp9CgpleHBvcnQgZnVuY3Rpb24gUGF0aFJlbW92ZUxvYyhwYXRoKSB7CiAgbGV0IGlkeCA9IHBhdGguZmluZEluZGV4KHAgPT4gcCA9PSAnbG9jJyB8fCBwID09ICdyYW5nZScpOwogIGlmKGlkeCAhPSAtMSkgcGF0aCA9IHBhdGguc2xpY2UoMCwgaWR4KTsKICByZXR1cm4gcGF0aDsKfQoKLy9leHBvcnQgZGVmYXVsdCBBc3REdW1wOwoAAAAAAAAAAD1WAQAAAAAAAAAAAAAAAAAAAAAAPVYBAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABt4QAAAAAAAHbhAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "clang-list.js",
			"settings":
			{
				"buffer_size": 8043,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"camel",
				"Convert Case: camelCase"
			],
			[
				"came",
				"Convert Case: camelCase"
			],
			[
				"case ",
				"Convert Case: camelCase"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"doxy",
				"DoxyDoxygen: Comment All"
			],
			[
				"",
				":$ - EOF"
			],
			[
				"format",
				"JsPrettier: Format Code"
			],
			[
				"prett",
				"JsPrettier: Format Code"
			],
			[
				"ou",
				"Browse Mode: Outline (Right)"
			],
			[
				"instga",
				"Package Control: Install Package"
			],
			[
				"prettier",
				"JsPrettier: Format Code"
			],
			[
				"json",
				"Pretty JSON: Minify JSON"
			],
			[
				"jspr",
				"JsPrettier: Format Code"
			],
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"color",
				"Color Highlight: Reset"
			],
			[
				"scheme",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"edit cu",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"install pac",
				"Package Control: Install Package"
			],
			[
				"list pack",
				"Package Control: List Packages"
			],
			[
				"edit ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"edit",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"outli",
				"Browse Mode: Outline (Right)"
			],
			[
				"debugger",
				"Preferences: Debugger Settings"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"INSTALL",
				"Package Control: Install Package"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"adap",
				"Debugger: Install Adapters"
			],
			[
				"install ada",
				"Debugger: Install Adapters"
			],
			[
				"adapter",
				"Debugger: Install Adapters"
			],
			[
				"debug",
				"Debugger: Install Adapters"
			],
			[
				"Package Control: remove",
				"Package Control: Remove Package"
			],
			[
				"debu",
				"Debugger: Install Adapters"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 289.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/debugger-server.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/web-platform-tests/trusted-types/block-string-assignment-to-HTMLElement-generic.tentative.html",
		"/home/roman/Projects/plot-cv/clang-ast.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/qjs-lws.sublime-project",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-x509.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-purify.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-writeable.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-ws-state.h",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lws.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lws-socket.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lws-socket.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/test.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lws-context.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-client.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-http.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/core/context.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/roles/http/server/server.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-callbacks.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-misc.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lws.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/test-client.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lws-context.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-html.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/roles/ws/server-ws.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/README.md",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-logs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lws-spa.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/list.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-lwsac.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/roles/http/server/lws-spa.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-spa.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-context-vhost.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/system/async-dns/async-dns.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/misc/base64-decode.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/minimal-examples-lowlevel/ws-server/minimal-ws-raw-proxy/minimal-ws-raw-proxy.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/minimal-examples-lowlevel/http-client/minimal-http-client/minimal-http-client.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/plugins/acme-client/protocol_lws_acme_client.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/tls/openssl/openssl-client.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/tls/private-network.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/tls/tls-client.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/core-net/vhost.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/minimal-examples-lowlevel/http-client/minimal-http-client-post/minimal-http-client-post.c",
		"/home/roman/Projects/plot-cv/quickjs/list.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/localhost.key",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/minimal-examples-lowlevel/ws-server/minimal-ws-server-threadpool/minimal-ws-server-threadpool.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/minimal-examples-lowlevel/http-client/minimal-http-client-h2-rxflow/minimal-http-client.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/core-net/private-lib-core-net.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/roles/http/client/client-http.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/minimal-examples-lowlevel/raw/minimal-raw-fallback-http-server/localhost-100y.key",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/minimal-examples-lowlevel/raw/minimal-raw-fallback-http-server/README.md",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/minimal-examples-lowlevel/raw/minimal-raw-fallback-http-server/minimal-raw-fallback-http-server.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/minimal-examples-lowlevel/http-client/minimal-http-client-certinfo/README.md",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/minimal-examples-lowlevel/http-client/minimal-http-client/README.md",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/minimal-examples-lowlevel/crypto/minimal-crypto-jws/README.md",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/minimal-examples-lowlevel/client-server/README.md",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/minimal-examples-lowlevel/raw/minimal-raw-file/README.md",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-libc.cx",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-state.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/minimal-examples-lowlevel/http-client/minimal-http-client-captive-portal/minimal-http-client-captive-portal.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/roles/ws/ops-ws.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-write.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-protocols-plugins.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/secure-streams/protocols/ss-h1.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/roles/h1/ops-h1.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-ws-close.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-eventlib-exports.h",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-libc.c",
		"/home/roman/main.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-network-helper.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/core-net/wsi.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/gmon.out",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/minimal-examples-lowlevel/http-server/minimal-http-server-form-post-file/minimal-http-server-form-post-file.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/minimal-examples-lowlevel/http-server/minimal-http-server-dynamic/minimal-http-server-dynamic.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/plugins/deaddrop/protocol_lws_deaddrop.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-adopt.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-async-dns.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/roles/ws/private-lib-roles-ws.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/minimal-examples-lowlevel/http-server/minimal-http-server-sse-ring/minimal-http-server-sse-ring.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-netdev.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-system.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/events.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/web-platform-tests-streams/shared-storage/resources/util.sub.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/console.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-repeater.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/property-enumeration.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/buffer-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/qjsm.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/io.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/js-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/stream-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/queue.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-mysql.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-blob.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fs.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/async-closure.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/misc.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/xpath.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/xml.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-textcode.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/ringbuffer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/inotify.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/extendObject.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/ringbuffer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/js-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/streams.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake/functions.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/defines.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/async-closure.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/buffer-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fsPromises.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-syscallerror.c"
	],
	"find":
	{
		"height": 26.0
	},
	"find_in_files":
	{
		"height": 138.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"FieldDecl",
			"TypeFactory",
			"FieldDecl",
			"ion TypeFactory",
			"TypeFactory",
			"name \\?\\?=",
			"name =",
			"Found type",
			"isCompound",
			"isEnum",
			"getOpt",
			"getOpd",
			"peer, add",
			"onConnect",
			"[`'\"]onMessage",
			"'onMessage",
			"onMessage",
			"onConnect",
			"onClose",
			"onMessage",
			"rpc"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 705,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": "/home/roman/Projects/plot-cv/clang-list.js",
							"function_name_status_row": 16,
							"outline_rename_mode": false,
							"show_line_column": "disabled",
							"symkeys":
							[
								[
									341,
									365
								],
								[
									529,
									535
								],
								[
									579,
									596
								],
								[
									707,
									735
								],
								[
									921,
									931
								],
								[
									981,
									991
								],
								[
									1927,
									1931
								],
								[
									1978,
									1982
								],
								[
									2080,
									2117
								],
								[
									2402,
									2446
								],
								[
									2454,
									2496
								],
								[
									2536,
									2543
								],
								[
									2587,
									2594
								],
								[
									3005,
									3016
								],
								[
									3063,
									3068
								],
								[
									3078,
									3083
								],
								[
									3096,
									3107
								],
								[
									3137,
									3142
								],
								[
									3155,
									3166
								],
								[
									3324,
									3330
								],
								[
									3731,
									3741
								],
								[
									3903,
									3913
								],
								[
									4210,
									4220
								],
								[
									4777,
									4782
								],
								[
									4925,
									4965
								],
								[
									5017,
									5050
								],
								[
									5235,
									5253
								],
								[
									5299,
									5315
								],
								[
									5331,
									5348
								],
								[
									5375,
									5398
								],
								[
									5414,
									5436
								],
								[
									5536,
									5547
								],
								[
									5670,
									5679
								],
								[
									5749,
									5760
								],
								[
									5978,
									5986
								],
								[
									6016,
									6024
								],
								[
									6043,
									6047
								],
								[
									6214,
									6225
								],
								[
									6280,
									6291
								],
								[
									6323,
									6332
								],
								[
									6482,
									6493
								],
								[
									6544,
									6558
								],
								[
									6697,
									6701
								],
								[
									6971,
									7010
								],
								[
									7104,
									7117
								],
								[
									7574,
									7606
								],
								[
									7770,
									7804
								]
							],
							"symlist":
							[
								"  findLastIndex(predicate)",
								"  tail()",
								"  startsWith(start)",
								"  main(...args)",
								"(a, p) =>",
								"(a, p) =>",
								"  d =>",
								"  v =>",
								"  processFiles(...files)",
								"ReadAST(outfile, load = f => ",
								"(f), save = WriteFile, parse = JSON.parse)",
								"  name =>",
								"  stat =>",
								"() =>",
								"a =>",
								"() =>",
								"() =>",
								"() =>",
								"() =>",
								"  err =>",
								"(v, p) =>",
								"  toString()",
								"  toString()",
								"v =>",
								"ListNodes(sysinc = false)",
								"NoSystemIncludes = ([p, n, l]) =>",
								"([path, decl]) =>",
								"  names = decls =>",
								"([path, decl]) =>",
								"  declarations = decls =>",
								"([path, decl, loc]) =>",
								"([p, n]) =>",
								"(a, b) =>",
								"([p, n]) =>",
								"([p]) =>",
								"([p]) =>",
								"  p =>",
								"([p, n]) =>",
								"([p, n]) =>",
								"(a, b) =>",
								"([p, n]) =>",
								"([p, n, l]) =>",
								"  k =>",
								"([path, node, id, name, type, kind]) =>",
								"(field, i) =>",
								"  writeOutput(name, data)",
								"GetLibraryFor(symbolName)"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1754205264.16,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "upload-server.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 36201,
						"regions":
						{
						},
						"selection":
						[
							[
								10177,
								10177
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 676,
							"show_line_column": "disabled",
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1755127569.41,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 11852.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "clang-ast.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 87613,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"show_line_column": "disabled",
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1755186792.59,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 34280.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "clang-list.js",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8043,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"show_line_column": "disabled",
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1755187289.75,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2708.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 43.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.8,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "plot-cv.sublime-project",
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"clang-",
				"clang-list.js"
			],
			[
				"clang-as",
				"clang-ast.js"
			],
			[
				"clang-asst",
				"quickjs/qjs-modules/web-platform-tests/trusted-types/block-string-assignment-to-HTMLElement-generic.tentative.html"
			],
			[
				"debugger-ser",
				"debugger-server.js"
			],
			[
				"upload-ser",
				"upload-server.js"
			],
			[
				"mirror",
				"libwebsockets/plugins/protocol_lws_mirror.c"
			],
			[
				"otocol_lws_raw_proxy.c",
				"libwebsockets/plugins/raw-proxy/protocol_lws_raw_proxy.c"
			],
			[
				"test-cli",
				"test-client.js"
			],
			[
				"lws-con",
				"lws-context.c"
			],
			[
				"test.js",
				"test.js"
			],
			[
				"lws-call",
				"libwebsockets/include/libwebsockets/lws-callbacks.h"
			],
			[
				"lws-sock",
				"lws-socket.c"
			],
			[
				"lws-ca",
				"libwebsockets/include/libwebsockets/lws-callbacks.h"
			],
			[
				"test-clie",
				"test-client.js"
			],
			[
				"lws-misc",
				"libwebsockets/include/libwebsockets/lws-misc.h"
			],
			[
				"lws-html",
				"libwebsockets/include/libwebsockets/lws-html.h"
			],
			[
				"lws-c",
				"libwebsockets/include/libwebsockets/lws-callbacks.h"
			],
			[
				"lws-soc",
				"lws-socket.c"
			],
			[
				"lws.h",
				"lws.h"
			],
			[
				"context.c",
				"libwebsockets/lib/core/context.c"
			],
			[
				"lws-conte",
				"lws-context.c"
			],
			[
				"lws-spa",
				"libwebsockets/lib/roles/http/server/lws-spa.c"
			],
			[
				"lws-sp",
				"libwebsockets/lib/roles/http/server/lws-spa.c"
			],
			[
				"lws.c",
				"lws.c"
			],
			[
				"quickj",
				"~/Projects/plot-cv/quickjs/quickjs.h"
			],
			[
				"lws-http",
				"libwebsockets/include/libwebsockets/lws-http.h"
			],
			[
				"spa.c",
				"lws-spa.c"
			],
			[
				"lws-so",
				"lws-socket.c"
			],
			[
				"lws-htt",
				"libwebsockets/include/libwebsockets/lws-http.h"
			],
			[
				"lws-client",
				"libwebsockets/include/libwebsockets/lws-client.h"
			],
			[
				"wsi-http",
				"libwebsockets/include/libwebsockets/lws-http.h"
			],
			[
				"quickjs.h",
				"~/Projects/plot-cv/quickjs/quickjs.h"
			],
			[
				"context",
				"libwebsockets/lib/core/context.c"
			],
			[
				"vhost",
				"libwebsockets/lib/core-net/vhost.c"
			],
			[
				"tls-clie",
				"libwebsockets/lib/tls/tls-client.c"
			],
			[
				"conte",
				"libwebsockets/lib/core/context.c"
			],
			[
				"context.",
				"libwebsockets/lib/core/context.c"
			],
			[
				"raw-fall",
				"libwebsockets/minimal-examples-lowlevel/raw/minimal-raw-fallback-http-server/minimal-raw-fallback-http-server.c"
			],
			[
				"lws-clie",
				"libwebsockets/include/libwebsockets/lws-client.h"
			],
			[
				"test-cl",
				"test-client.js"
			],
			[
				"lws-",
				"libwebsockets/include/libwebsockets/lws-state.h"
			],
			[
				"socket.h",
				"lws-socket.h"
			],
			[
				"lws-log",
				"libwebsockets/include/libwebsockets/lws-logs.h"
			],
			[
				"spa.h",
				"libwebsockets/include/libwebsockets/lws-spa.h"
			],
			[
				"server.c",
				"libwebsockets/lib/roles/http/server/server.c"
			],
			[
				"wsi.c",
				"libwebsockets/lib/core-net/wsi.c"
			],
			[
				"lws-vho",
				"libwebsockets/include/libwebsockets/lws-context-vhost.h"
			],
			[
				"lws-context-v",
				"libwebsockets/include/libwebsockets/lws-context-vhost.h"
			],
			[
				"util.js",
				"lib/util.js"
			],
			[
				"buffer-ut",
				"src/buffer-utils.c"
			],
			[
				"repl",
				"lib/repl.js"
			],
			[
				"utils.c",
				"src/utils.c"
			],
			[
				"console.js",
				"lib/console.js"
			],
			[
				"qjsm.c",
				"src/qjsm.c"
			],
			[
				"",
				"include/utils.h"
			],
			[
				"utils.h",
				"include/utils.h"
			],
			[
				"quickjs-inspec",
				"quickjs-inspect.c"
			],
			[
				"io.js",
				"lib/io.js"
			],
			[
				"repl.js",
				"lib/repl.js"
			],
			[
				"util.sj",
				"web-platform-tests-streams/shared-storage/resources/util.sub.js"
			],
			[
				"quickjs.c",
				"~/Projects/plot-cv/quickjs/quickjs.c"
			],
			[
				"js-utils.c",
				"src/js-utils.c"
			],
			[
				"quickjs-strea",
				"quickjs-stream.h"
			],
			[
				"quickjs-st",
				"quickjs-stream.c"
			],
			[
				"quickjs-stream.h",
				"quickjs-stream.h"
			],
			[
				"quickjs-ins",
				"quickjs-inspect.c"
			],
			[
				"fs.js",
				"lib/fs.js"
			],
			[
				"ringbuffer.c",
				"src/ringbuffer.c"
			],
			[
				"ringbuf",
				"include/ringbuffer.h"
			],
			[
				"ringbuffer.h",
				"include/ringbuffer.h"
			],
			[
				"textcode.c",
				"quickjs-textcode.c"
			],
			[
				"quickjs-text",
				"quickjs-textcode.c"
			],
			[
				"stream.c",
				"quickjs-stream.c"
			],
			[
				"quickjs-stre",
				"quickjs-stream.c"
			],
			[
				"textcode",
				"quickjs-textcode.c"
			],
			[
				"quickjs-misc",
				"quickjs-misc.c"
			],
			[
				"function",
				"cmake/functions.cmake"
			],
			[
				"CMakeLIsts",
				"CMakeLists.txt"
			],
			[
				"quickjs-mis",
				"quickjs-misc.c"
			],
			[
				"fsProm",
				"lib/fsPromises.js"
			],
			[
				"CMake",
				"CMakeLists.txt"
			],
			[
				"cmakeli",
				"CMakeLists.txt"
			],
			[
				"cmakelists",
				"CMakeLists.txt"
			],
			[
				"CMakeLists",
				"CMakeLists.txt"
			],
			[
				"cmakelsits",
				"web-platform-tests-streams/editing/crashtests/make-editable-div-inline-and-set-contenteditable-of-input-to-false.html"
			],
			[
				"cmakeLists",
				"CMakeLists.txt"
			],
			[
				"js-util",
				"src/js-utils.c"
			],
			[
				"js-ut",
				"include/js-utils.h"
			],
			[
				"buffer-",
				"include/buffer-utils.h"
			],
			[
				"js-utils",
				"include/js-utils.h"
			],
			[
				"quickjs-sys",
				"quickjs-syscallerror.c"
			],
			[
				"js-u",
				"include/js-utils.h"
			],
			[
				"quickjs-socket",
				"quickjs-sockets.c"
			],
			[
				"async-cl",
				"src/async-closure.c"
			],
			[
				"utilsc",
				"src/utils.c"
			],
			[
				"quickjs-sock",
				"quickjs-sockets.h"
			],
			[
				"child",
				"src/child-process.c"
			],
			[
				"quickjs-child",
				"quickjs-child-process.c"
			],
			[
				"cmake",
				"CMakeLists.txt"
			],
			[
				"process.js",
				"lib/process.js"
			],
			[
				"quickjs-repea",
				"quickjs-repeater.c"
			],
			[
				"quickjs-repe",
				"quickjs-repeater.c"
			],
			[
				"quickjs-repeater",
				"quickjs-repeater.c"
			],
			[
				"test_repe",
				"tests/test_repeater.js"
			],
			[
				"quickjs-mysq",
				"quickjs-mysql.c"
			],
			[
				"quickjs-ser",
				"quickjs-serial.c"
			],
			[
				"quickjs-stream",
				"quickjs-stream.h"
			],
			[
				"quickjs-lex",
				"quickjs-lexer.c"
			],
			[
				"quickjs-list",
				"quickjs-list.c"
			],
			[
				"quickjs-list.c",
				"quickjs-list.c"
			],
			[
				"testhar",
				"lib/testharness.js"
			],
			[
				"qjsm",
				"src/qjsm.c"
			],
			[
				"test_repea",
				"tests/test_repeater.js"
			],
			[
				"test_socket",
				"tests/test_sockets.js"
			],
			[
				"test_sock",
				"tests/test_sockets.js"
			],
			[
				"textcod",
				"quickjs-textcode.c"
			],
			[
				"test_text",
				"tests/test_textcode.js"
			],
			[
				"stack.js",
				"lib/stack.js"
			],
			[
				"ebnf",
				"lib/parser/ebnf.js"
			],
			[
				"arser.",
				"lib/parser.js"
			],
			[
				"bnf.",
				"lib/lexer/bnf.js"
			],
			[
				"quickjs-my",
				"quickjs-mysql.c"
			],
			[
				"quickjs-blob",
				"quickjs-blob.c"
			],
			[
				"quickjs-bl",
				"quickjs-blob.c"
			],
			[
				"queue.c",
				"src/queue.c"
			],
			[
				"queue.h",
				"include/queue.h"
			],
			[
				"mysql",
				"tests/test_mysql.js"
			],
			[
				"child-",
				"src/child-process.c"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/plot-cv.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 309.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"WS"
			]
		],
		"width": 1059.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 353.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
