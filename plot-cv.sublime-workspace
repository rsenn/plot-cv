{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"define",
				"defineProperty"
			],
			[
				"exists",
				"existsAndNotEmpty"
			],
			[
				"RETURN_",
				"RETURN_VALUE_PATH"
			],
			[
				"constr",
				"constructor"
			],
			[
				"RE",
				"deep.RETURN_VALUE_PATH"
			],
			[
				"CXXRec",
				"CXXRecordDecl"
			],
			[
				"CXXReco",
				"CXXRecordDecl"
			],
			[
				"des",
				"desugared"
			],
			[
				"con",
				"constructor"
			],
			[
				"jsm_start_",
				"jsm_start_interactive3"
			],
			[
				"by",
				"byobRequest"
			],
			[
				"Read",
				"ReadableStreamBYOBRequest"
			],
			[
				"js_by",
				"js_readable_byob_request"
			],
			[
				"BY",
				"BYOB_REQUEST_METHOD_RESPONDWITHNEWVIEW"
			],
			[
				"JS_",
				"JS_NewObjectProtoClass"
			],
			[
				"JS_Get",
				"JS_GetPropertyUint32"
			],
			[
				"is_",
				"is_exception"
			],
			[
				"JS_T",
				"JS_ThrowInternalError"
			],
			[
				"Repe",
				"RepeaterItem"
			],
			[
				"WRITER_PROP",
				"WRITER_PROP_READY"
			],
			[
				"JS_Throw",
				"JS_ThrowInternalError"
			],
			[
				"to",
				"toStringTag"
			],
			[
				"Der",
				"DereferenceError"
			],
			[
				"Dere",
				"DereferenceError"
			],
			[
				"Is",
				"IsPunctuator"
			],
			[
				"js_magic_fun",
				"js_magic_function"
			],
			[
				"js_queue_iter",
				"js_queue_iterator_class_id"
			],
			[
				"js_queue_itreat",
				"js_queue_iterator_class_id"
			],
			[
				"js_",
				"js_archive_mode"
			],
			[
				"JS_GetP",
				"JS_GetPropertyStr"
			],
			[
				"JS_Set",
				"JS_SetPropertyUint32"
			],
			[
				"ENTRY_IS",
				"ENTRY_ISDATAENCRYPTED"
			],
			[
				"js_archivema",
				"js_archivematch_class_id"
			],
			[
				"JS_NewObjec",
				"JS_NewObjectProtoClass"
			],
			[
				"Module",
				"ModuleLoaderContext"
			],
			[
				"JS_Th",
				"JS_ThrowTypeError"
			],
			[
				"ModuleLo",
				"ModuleLoaderContext"
			],
			[
				"escape",
				"escape_noquote_tab"
			],
			[
				"max",
				"max_array_length"
			],
			[
				"tty",
				"tty_set_raw"
			],
			[
				"getOwnPrope",
				"getOwnPropertyDescriptor"
			],
			[
				"PATH_SKIP",
				"PATH_SKIP_SEPARATOR"
			],
			[
				"ListIterat",
				"ListIteratorKind"
			],
			[
				"_f",
				"_wfindnext64"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"JS_PROP_",
				"JS_PROP_CONFIGURABLE"
			],
			[
				"JS_GetPr",
				"JS_GetPropertyStr"
			],
			[
				"js_sock",
				"js_sockaddr_data"
			],
			[
				"SET_",
				"SET_CONSOLE_MODE"
			],
			[
				"ERA",
				"ERASE_IN_LINE"
			],
			[
				"js_misc_set",
				"js_misc_settextattr"
			],
			[
				"dw",
				"dwCursorPosition"
			],
			[
				"prop",
				"property_recursion_top"
			],
			[
				"property_enumer",
				"property_enumeration_index"
			],
			[
				"INT",
				"INSPECT_INT32T_INRANGE"
			],
			[
				"js_inspect_print_arra",
				"js_inspect_print_arraybuffer2"
			],
			[
				"is_a",
				"is_arraybuffer"
			],
			[
				"fmt",
				"fmt_ulong"
			],
			[
				"inspec",
				"inspect_newline2"
			],
			[
				"property_",
				"property_recursion_top"
			],
			[
				"js_inspec",
				"js_inspect_print_value"
			],
			[
				"JS_Atom",
				"JS_AtomToValue"
			],
			[
				"mysql_op",
				"mysql_optionsv"
			],
			[
				"MY",
				"MYSQLConnectParameters"
			],
			[
				"js_connect",
				"js_connectparams_class_id"
			],
			[
				"js_conn",
				"js_connectparams_from"
			],
			[
				"MYSQL",
				"MYSQLConnectParameters"
			],
			[
				"mysql_get",
				"mysql_get_socket"
			],
			[
				"async",
				"asyncclosure_resolve"
			],
			[
				"res",
				"resolving_funcs"
			],
			[
				"HAVE_LIB",
				"HAVE_LIBMARIADBCLIENT"
			],
			[
				"js_is_null",
				"js_is_null_or_undefined"
			],
			[
				"FileDesc",
				"FileDescriptorHandlers"
			],
			[
				"js_generat",
				"js_generator_prototype"
			],
			[
				"tab_",
				"tab_atom_len"
			],
			[
				"proper",
				"property_recursion_pop"
			],
			[
				"property_rec",
				"property_recursion_top"
			],
			[
				"property",
				"property_recursion_top"
			],
			[
				"RETURN",
				"deep.RETURN_VALUE_PATH"
			],
			[
				"LIBS",
				"LIBSERIALPORT_LIBRARY_DIR"
			],
			[
				"js_misc_atexit_",
				"js_misc_atexit_called"
			],
			[
				"getO",
				"getOwnPropertyNames(...)"
			],
			[
				"Res",
				"ResolveAlias"
			],
			[
				"relati",
				"relativePath"
			],
			[
				"js_syscla",
				"js_syscallerror_defines"
			],
			[
				"get",
				"getOwnPropertyDescriptor(...)"
			],
			[
				"resol",
				"resolving_funcs"
			],
			[
				"set",
				"set_handler"
			],
			[
				"Async",
				"AsyncSocketClosure"
			],
			[
				"Asy",
				"AsyncSocketClosure"
			],
			[
				"js_socket_async_",
				"js_socket_async_resolver"
			],
			[
				"js_socket_asyc",
				"js_socket_async_closure_free"
			],
			[
				"JS_EV",
				"JS_EVAL_FLAG_COMPILE_ONLY"
			],
			[
				"check_",
				"check_function_and_include"
			],
			[
				"PGCon",
				"PGConnectParameters"
			],
			[
				"PGC",
				"PGConnectParameters"
			],
			[
				"connect",
				"connectparams_parse"
			],
			[
				"Nam",
				"FieldNameFunc"
			],
			[
				"PG",
				"PGSQLResult"
			],
			[
				"js",
				"js_pgresult_class_id"
			],
			[
				"PGSQ",
				"PGSQResultIterator"
			],
			[
				"js_misc_getopa",
				"js_misc_getopaque"
			],
			[
				"js_pgrequ",
				"js_pgresult_opaque"
			],
			[
				"PGRES_PO",
				"PGRES_POLLING_READING"
			],
			[
				"PROP_PRO",
				"PROP_PROTOCOL_VERSION"
			],
			[
				"B",
				"BOOL"
			],
			[
				"Asyn",
				"AsyncIterator"
			],
			[
				"ret",
				"return_flag"
			],
			[
				"ImportID",
				"ImportIdMap"
			],
			[
				"Num",
				"NumericRange"
			],
			[
				"dbuf_",
				"dbuf_init2"
			],
			[
				"getOwn",
				"getOwnPropertyNames(...)"
			],
			[
				"has_",
				"has_dot_or_slash"
			],
			[
				"My",
				"MySQLResult"
			],
			[
				"JS_ToCS",
				"JS_ToCStringLen"
			],
			[
				"CF",
				"CFunctionClosureRecord"
			],
			[
				"extendA",
				"extendAsyncGenerator"
			],
			[
				"JS_SetPr",
				"JS_SetPropertyStr"
			],
			[
				"MYSQL_TYPE_NEW",
				"MYSQL_TYPE_NEWDECIMAL"
			],
			[
				"JS_CF",
				"JS_CFUNC_MAGIC_DEF"
			],
			[
				"js_mysqlresult_fun",
				"js_mysqlresult_functions"
			],
			[
				"JS_ToCSt",
				"JS_ToCStringLen"
			],
			[
				"js_mysql_f",
				"js_mysql_functions"
			],
			[
				"MARIA",
				"MARIADBCLIENT_LIBRARY"
			],
			[
				"depe",
				"dependencyMap"
			],
			[
				"depden",
				"dependencyTree"
			],
			[
				"add_",
				"add_dependencies"
			],
			[
				"ch",
				"chunks_written"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "FetchClass(url)\n  e =>\n  simplifyList = list =>\n([a, b]) =>\n([a]) =>\n  summaryList = summary =>\n  e =>\n([name]) =>\n(a, e) =>\n  makeURL = p =>\n  getURL(name)\n  entry =>\n*keys()\n*values()\n*entries()\n  pred = (k, v) =>\n  pred = (key, value) =>\n  get name()",
			"settings":
			{
				"buffer_size": 253,
				"line_ending": "Unix",
				"name": "𝌆 Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					20,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/mozdev.js",
						"symkeys":
						[
							[
								137,
								162
							],
							[
								660,
								664
							],
							[
								696,
								718
							],
							[
								739,
								750
							],
							[
								807,
								815
							],
							[
								861,
								885
							],
							[
								955,
								959
							],
							[
								1041,
								1052
							],
							[
								1128,
								1137
							],
							[
								1245,
								1259
							],
							[
								1332,
								1344
							],
							[
								1506,
								1514
							],
							[
								1834,
								1841
							],
							[
								1903,
								1912
							],
							[
								1980,
								1990
							],
							[
								2082,
								2098
							],
							[
								2179,
								2201
							],
							[
								2368,
								2378
							]
						],
						"symlist":
						[
							" function FetchClass(url)",
							"e =>",
							"simplifyList = list =>",
							"([a, b]) =>",
							"([a]) =>",
							"summaryList = summary =>",
							"e =>",
							"([name]) =>",
							"(a, e) =>",
							"makeURL = p =>",
							"getURL(name)",
							"entry =>",
							"*keys()",
							"*values()",
							"*entries()",
							"pred = (k, v) =>",
							"pred = (key, value) =>",
							"get name()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADBAgAAICBmaW5kTGFzdEluZGV4KHByZWRpY2F0ZSkKICB0YWlsKCkKICBzdGFydHNXaXRoKHN0YXJ0KQogIG1haW4oLi4uYXJncykKKGEsIHApID0+CihhLCBwKSA9PgogIGQgPT4KICB2ID0+CiAgcHJvY2Vzc0ZpbGVzKC4uLmZpbGVzKQpSZWFkQVNUKG91dGZpbGUsIGxvYWQgPSBmID0+IAooZiksIHNhdmUgPSBXcml0ZUZpbGUsIHBhcnNlID0gSlNPTi5wYXJzZSkKICBuYW1lID0+CiAgc3RhdCA9PgooKSA9PgphID0+CigpID0+CigpID0+CigpID0+CigpID0+CiAgZXJyID0+Cih2LCBwKSA9PgogIHRvU3RyaW5nKCkKICB0b1N0cmluZygpCnYgPT4KTGlzdE5vZGVzKHN5c2luYyA9IGZhbHNlKQpOb1N5c3RlbUluY2x1ZGVzID0gKFtwLCBuLCBsXSkgPT4KKFtwYXRoLCBkZWNsXSkgPT4KICBuYW1lcyA9IGRlY2xzID0+CihbcGF0aCwgZGVjbF0pID0+CiAgZGVjbGFyYXRpb25zID0gZGVjbHMgPT4KKFtwYXRoLCBkZWNsLCBsb2NdKSA9PgooW3AsIG5dKSA9PgooYSwgYikgPT4KKFtwLCBuXSkgPT4KKFtwXSkgPT4KKFtwXSkgPT4KICBwID0+CihbcCwgbl0pID0+CihbcCwgbl0pID0+CihhLCBiKSA9PgooW3AsIG5dKSA9PgooW3AsIG4sIGxdKSA9PgogIGsgPT4KKFtwYXRoLCBub2RlLCBpZCwgbmFtZSwgdHlwZSwga2luZF0pID0+CihmaWVsZCwgaSkgPT4KICB3cml0ZU91dHB1dChuYW1lLCBkYXRhKQpHZXRMaWJyYXJ5Rm9yKHN5bWJvbE5hbWUpAAAAAAAAAAD9AAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					21,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD9AAAARmV0Y2hDbGFzcyh1cmwpCiAgZSA9PgogIHNpbXBsaWZ5TGlzdCA9IGxpc3QgPT4KKFthLCBiXSkgPT4KKFthXSkgPT4KICBzdW1tYXJ5TGlzdCA9IHN1bW1hcnkgPT4KICBlID0+CihbbmFtZV0pID0+CihhLCBlKSA9PgogIG1ha2VVUkwgPSBwID0+CiAgZ2V0VVJMKG5hbWUpCiAgZW50cnkgPT4KKmtleXMoKQoqdmFsdWVzKCkKKmVudHJpZXMoKQogIHByZWQgPSAoaywgdikgPT4KICBwcmVkID0gKGtleSwgdmFsdWUpID0+CiAgZ2V0IG5hbWUoKQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					22,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/mozdev.js",
						"symkeys":
						[
							[
								137,
								162
							],
							[
								660,
								664
							],
							[
								696,
								718
							],
							[
								739,
								750
							],
							[
								807,
								815
							],
							[
								861,
								885
							],
							[
								955,
								959
							],
							[
								1041,
								1052
							],
							[
								1128,
								1137
							],
							[
								1245,
								1259
							],
							[
								1332,
								1344
							],
							[
								1506,
								1514
							],
							[
								1834,
								1841
							],
							[
								1903,
								1912
							],
							[
								1980,
								1990
							],
							[
								2082,
								2098
							],
							[
								2179,
								2201
							],
							[
								2368,
								2378
							]
						],
						"symlist":
						[
							" function FetchClass(url)",
							"e =>",
							"simplifyList = list =>",
							"([a, b]) =>",
							"([a]) =>",
							"summaryList = summary =>",
							"e =>",
							"([name]) =>",
							"(a, e) =>",
							"makeURL = p =>",
							"getURL(name)",
							"entry =>",
							"*keys()",
							"*values()",
							"*entries()",
							"pred = (k, v) =>",
							"pred = (key, value) =>",
							"get name()"
						]
					},
					"AwAAAAAAAAAAAAAA/QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP0AAABGZXRjaENsYXNzKHVybCkKICBlID0+CiAgc2ltcGxpZnlMaXN0ID0gbGlzdCA9PgooW2EsIGJdKSA9PgooW2FdKSA9PgogIHN1bW1hcnlMaXN0ID0gc3VtbWFyeSA9PgogIGUgPT4KKFtuYW1lXSkgPT4KKGEsIGUpID0+CiAgbWFrZVVSTCA9IHAgPT4KICBnZXRVUkwobmFtZSkKICBlbnRyeSA9Pgoqa2V5cygpCip2YWx1ZXMoKQoqZW50cmllcygpCiAgcHJlZCA9IChrLCB2KSA9PgogIHByZWQgPSAoa2V5LCB2YWx1ZSkgPT4KICBnZXQgbmFtZSgpAAAAAAAAAAD9AAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					23,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/clang-ast.js",
						"symkeys":
						[
							[
								848,
								861
							],
							[
								940,
								996
							],
							[
								1441,
								1500
							],
							[
								1979,
								2016
							],
							[
								2235,
								2267
							],
							[
								2369,
								2406
							],
							[
								2560,
								2587
							],
							[
								2669,
								2699
							],
							[
								2766,
								2774
							],
							[
								2813,
								2840
							],
							[
								2889,
								2916
							],
							[
								2993,
								2997
							],
							[
								3020,
								3053
							],
							[
								3233,
								3276
							],
							[
								3561,
								3569
							],
							[
								3961,
								3965
							],
							[
								3984,
								4004
							],
							[
								4155,
								4187
							],
							[
								4349,
								4367
							],
							[
								4620,
								4637
							],
							[
								4944,
								4955
							],
							[
								4975,
								4982
							],
							[
								5009,
								5018
							],
							[
								5138,
								5144
							],
							[
								5256,
								5264
							],
							[
								5379,
								5388
							],
							[
								5414,
								5423
							],
							[
								5454,
								5458
							],
							[
								5519,
								5523
							],
							[
								5599,
								5615
							],
							[
								5872,
								5887
							],
							[
								5954,
								5963
							],
							[
								6024,
								6032
							],
							[
								6081,
								6090
							],
							[
								6137,
								6147
							],
							[
								6200,
								6210
							],
							[
								6241,
								6251
							],
							[
								6339,
								6350
							],
							[
								6556,
								6560
							],
							[
								6741,
								6752
							],
							[
								6983,
								6987
							],
							[
								7039,
								7053
							],
							[
								7103,
								7153
							],
							[
								7223,
								7278
							],
							[
								7283,
								7317
							],
							[
								7496,
								7500
							],
							[
								7581,
								7596
							],
							[
								7684,
								7740
							],
							[
								7814,
								7824
							],
							[
								8028,
								8035
							],
							[
								8152,
								8163
							],
							[
								8200,
								8229
							],
							[
								8290,
								8321
							],
							[
								8523,
								8533
							],
							[
								8588,
								8601
							],
							[
								8638,
								8667
							],
							[
								8728,
								8759
							],
							[
								8963,
								8973
							],
							[
								9028,
								9032
							],
							[
								9130,
								9156
							],
							[
								12136,
								12140
							],
							[
								13155,
								13167
							],
							[
								13290,
								13298
							],
							[
								13384,
								13395
							],
							[
								13518,
								13531
							],
							[
								13654,
								13666
							],
							[
								13760,
								13769
							],
							[
								13821,
								13832
							],
							[
								13921,
								13930
							],
							[
								14050,
								14066
							],
							[
								14124,
								14140
							],
							[
								14188,
								14201
							],
							[
								14348,
								14363
							],
							[
								14510,
								14525
							],
							[
								14782,
								14796
							],
							[
								14882,
								14894
							],
							[
								14961,
								14973
							],
							[
								15079,
								15096
							],
							[
								15182,
								15193
							],
							[
								15253,
								15266
							],
							[
								15409,
								15417
							],
							[
								15525,
								15535
							],
							[
								15716,
								15725
							],
							[
								17531,
								17541
							],
							[
								19620,
								19626
							],
							[
								19912,
								19923
							],
							[
								20024,
								20074
							],
							[
								20160,
								20168
							],
							[
								20228,
								20236
							],
							[
								22043,
								22073
							],
							[
								22152,
								22162
							],
							[
								22180,
								22206
							],
							[
								22335,
								22343
							],
							[
								22426,
								22434
							],
							[
								22612,
								22617
							],
							[
								22655,
								22662
							],
							[
								22746,
								22760
							],
							[
								23353,
								23357
							],
							[
								23438,
								23443
							],
							[
								24977,
								24981
							],
							[
								25883,
								25897
							],
							[
								25961,
								25971
							],
							[
								26056,
								26078
							],
							[
								26300,
								26308
							],
							[
								26430,
								26449
							],
							[
								26547,
								26555
							],
							[
								26573,
								26595
							],
							[
								26716,
								26724
							],
							[
								26829,
								26855
							],
							[
								27210,
								27218
							],
							[
								27333,
								27344
							],
							[
								27362,
								27388
							],
							[
								27460,
								27464
							],
							[
								27569,
								27579
							],
							[
								27639,
								27643
							],
							[
								27706,
								27710
							],
							[
								27760,
								27764
							],
							[
								28174,
								28184
							],
							[
								28216,
								28224
							],
							[
								28321,
								28330
							],
							[
								28348,
								28370
							],
							[
								28588,
								28600
							],
							[
								28618,
								28644
							],
							[
								28879,
								28887
							],
							[
								28950,
								28958
							],
							[
								30025,
								30044
							],
							[
								30160,
								30170
							],
							[
								30225,
								30233
							],
							[
								30342,
								30349
							],
							[
								30367,
								30389
							],
							[
								30734,
								30742
							],
							[
								30839,
								30848
							],
							[
								30872,
								30894
							],
							[
								30999,
								31010
							],
							[
								31028,
								31050
							],
							[
								31427,
								31444
							],
							[
								31462,
								31484
							],
							[
								31740,
								31748
							],
							[
								31859,
								31864
							],
							[
								31912,
								31935
							],
							[
								32057,
								32068
							],
							[
								32117,
								32129
							],
							[
								32191,
								32200
							],
							[
								32247,
								32257
							],
							[
								32295,
								32331
							],
							[
								32986,
								32998
							],
							[
								33044,
								33053
							],
							[
								33100,
								33110
							],
							[
								33290,
								33295
							],
							[
								33351,
								33359
							],
							[
								33452,
								33475
							],
							[
								33734,
								33750
							],
							[
								33969,
								33985
							],
							[
								34396,
								34409
							],
							[
								34555,
								34565
							],
							[
								34613,
								34624
							],
							[
								34716,
								34728
							],
							[
								34778,
								34791
							],
							[
								34839,
								34851
							],
							[
								34901,
								34914
							],
							[
								35162,
								35175
							],
							[
								35210,
								35225
							],
							[
								35305,
								35360
							],
							[
								35904,
								35914
							],
							[
								36157,
								36177
							],
							[
								36260,
								36306
							],
							[
								37805,
								37870
							],
							[
								38180,
								38184
							],
							[
								38445,
								38449
							],
							[
								39174,
								39181
							],
							[
								39235,
								39242
							],
							[
								39326,
								39333
							],
							[
								39510,
								39545
							],
							[
								39584,
								39604
							],
							[
								39634,
								39640
							],
							[
								39661,
								39669
							],
							[
								39776,
								39809
							],
							[
								40074,
								40099
							],
							[
								40440,
								40482
							],
							[
								41014,
								41067
							],
							[
								42477,
								42483
							],
							[
								42533,
								42539
							],
							[
								42704,
								42710
							],
							[
								42852,
								42868
							],
							[
								43413,
								43420
							],
							[
								43463,
								43467
							],
							[
								43487,
								43494
							],
							[
								43615,
								43642
							],
							[
								43701,
								43716
							],
							[
								44021,
								44028
							],
							[
								44088,
								44102
							],
							[
								44147,
								44162
							],
							[
								44188,
								44192
							],
							[
								44224,
								44235
							],
							[
								44268,
								44280
							],
							[
								44314,
								44327
							],
							[
								44403,
								44408
							],
							[
								44488,
								44492
							],
							[
								44516,
								44528
							],
							[
								44591,
								44596
							],
							[
								44626,
								44630
							],
							[
								44654,
								44663
							],
							[
								44676,
								44692
							],
							[
								45034,
								45038
							],
							[
								45062,
								45073
							],
							[
								45132,
								45136
							],
							[
								45174,
								45178
							],
							[
								45210,
								45226
							],
							[
								45265,
								45269
							],
							[
								45287,
								45291
							],
							[
								45335,
								45387
							],
							[
								45575,
								45591
							],
							[
								45951,
								45972
							],
							[
								45998,
								46002
							],
							[
								46444,
								46449
							],
							[
								46484,
								46511
							],
							[
								46705,
								46733
							],
							[
								46914,
								46939
							],
							[
								47014,
								47046
							],
							[
								47177,
								47181
							],
							[
								47318,
								47347
							],
							[
								47457,
								47461
							],
							[
								47755,
								47777
							],
							[
								48816,
								48871
							],
							[
								48951,
								48958
							],
							[
								49024,
								49031
							],
							[
								49068,
								49094
							],
							[
								49188,
								49196
							],
							[
								49262,
								49270
							],
							[
								49332,
								49343
							],
							[
								49497,
								49506
							],
							[
								49525,
								49551
							],
							[
								49604,
								49613
							],
							[
								49666,
								49692
							],
							[
								49744,
								49763
							],
							[
								49839,
								49856
							],
							[
								49891,
								49915
							],
							[
								50174,
								50179
							],
							[
								50237,
								50244
							],
							[
								50326,
								50337
							],
							[
								51045,
								51055
							],
							[
								51103,
								51107
							],
							[
								51298,
								51309
							],
							[
								51320,
								51344
							],
							[
								51412,
								51444
							],
							[
								51600,
								51625
							],
							[
								51689,
								51725
							],
							[
								51795,
								51835
							],
							[
								52087,
								52115
							],
							[
								52162,
								52193
							],
							[
								52422,
								52464
							],
							[
								52667,
								52692
							],
							[
								52850,
								52871
							],
							[
								52916,
								52935
							],
							[
								53269,
								53296
							],
							[
								53364,
								53383
							],
							[
								53587,
								53622
							],
							[
								53740,
								53788
							],
							[
								54034,
								54061
							],
							[
								54679,
								54720
							],
							[
								54958,
								54985
							],
							[
								55128,
								55149
							],
							[
								55210,
								55237
							],
							[
								55282,
								55314
							],
							[
								55564,
								55590
							],
							[
								55784,
								55803
							],
							[
								56465,
								56490
							],
							[
								56538,
								56569
							],
							[
								56636,
								56651
							],
							[
								56846,
								56867
							],
							[
								56984,
								57020
							],
							[
								57240,
								57259
							],
							[
								57663,
								57684
							],
							[
								57901,
								57934
							],
							[
								57994,
								58017
							],
							[
								58080,
								58097
							],
							[
								58217,
								58221
							],
							[
								59048,
								59073
							],
							[
								59280,
								59307
							],
							[
								59772,
								59776
							],
							[
								59986,
								59990
							],
							[
								60189,
								60208
							],
							[
								60329,
								60334
							],
							[
								60672,
								60711
							],
							[
								60810,
								60853
							],
							[
								61063,
								61078
							],
							[
								61344,
								61380
							],
							[
								61476,
								61504
							],
							[
								61774,
								61818
							],
							[
								61880,
								61911
							],
							[
								61970,
								61991
							],
							[
								62050,
								62073
							],
							[
								62496,
								62522
							],
							[
								62590,
								62616
							],
							[
								62680,
								62699
							],
							[
								62741,
								62776
							],
							[
								62950,
								62992
							],
							[
								63177,
								63198
							],
							[
								63374,
								63404
							],
							[
								63624,
								63650
							],
							[
								64079,
								64098
							],
							[
								64159,
								64182
							],
							[
								64717,
								64744
							],
							[
								64794,
								64817
							],
							[
								64974,
								65010
							],
							[
								65080,
								65109
							],
							[
								65167,
								65190
							],
							[
								65368,
								65393
							],
							[
								65477,
								65519
							],
							[
								65618,
								65643
							],
							[
								65947,
								66002
							],
							[
								66244,
								66273
							],
							[
								66524,
								66568
							],
							[
								66700,
								66744
							],
							[
								66831,
								66859
							],
							[
								67003,
								67027
							],
							[
								67275,
								67319
							],
							[
								67641,
								67694
							],
							[
								67793,
								67838
							],
							[
								67913,
								67932
							],
							[
								67993,
								68014
							],
							[
								68191,
								68218
							],
							[
								68267,
								68297
							],
							[
								68309,
								68330
							],
							[
								68342,
								68374
							],
							[
								68516,
								68546
							],
							[
								68558,
								68599
							],
							[
								68611,
								68650
							],
							[
								68662,
								68685
							],
							[
								68697,
								68720
							],
							[
								68732,
								68751
							],
							[
								68763,
								68805
							],
							[
								68817,
								68842
							],
							[
								68854,
								68881
							],
							[
								68893,
								68931
							],
							[
								68943,
								69025
							],
							[
								69037,
								69104
							],
							[
								69116,
								69141
							],
							[
								69153,
								69195
							],
							[
								69380,
								69418
							],
							[
								69430,
								69487
							],
							[
								69499,
								69537
							],
							[
								69549,
								69574
							],
							[
								69586,
								69613
							],
							[
								69625,
								69663
							],
							[
								69675,
								69731
							],
							[
								69825,
								69876
							],
							[
								69888,
								69963
							],
							[
								69975,
								70006
							],
							[
								70018,
								70037
							],
							[
								70049,
								70085
							],
							[
								70181,
								70202
							],
							[
								70214,
								70244
							],
							[
								70256,
								70279
							],
							[
								70291,
								70334
							],
							[
								70346,
								70384
							],
							[
								70396,
								70440
							],
							[
								70452,
								70476
							],
							[
								70593,
								70623
							],
							[
								70635,
								70661
							],
							[
								70705,
								70752
							],
							[
								70764,
								70806
							],
							[
								70818,
								70856
							],
							[
								70868,
								70904
							],
							[
								70916,
								70963
							],
							[
								70975,
								70998
							],
							[
								71010,
								71044
							],
							[
								71252,
								71295
							],
							[
								71307,
								71359
							],
							[
								71463,
								71510
							],
							[
								71522,
								71550
							],
							[
								71562,
								71600
							],
							[
								71612,
								71653
							],
							[
								71665,
								71684
							],
							[
								71696,
								71725
							],
							[
								71737,
								71763
							],
							[
								71775,
								71803
							],
							[
								71815,
								71867
							],
							[
								71879,
								71907
							],
							[
								71919,
								71953
							],
							[
								72085,
								72106
							],
							[
								72118,
								72141
							],
							[
								72153,
								72191
							],
							[
								72203,
								72241
							],
							[
								72253,
								72274
							],
							[
								72286,
								72311
							],
							[
								72323,
								72348
							],
							[
								72360,
								72391
							],
							[
								72478,
								72497
							],
							[
								72509,
								72532
							],
							[
								72544,
								72585
							],
							[
								72597,
								72640
							],
							[
								72652,
								72679
							],
							[
								72691,
								72729
							],
							[
								72741,
								72774
							],
							[
								72786,
								72822
							],
							[
								72834,
								72853
							],
							[
								72919,
								72982
							],
							[
								72994,
								73050
							],
							[
								73062,
								73085
							],
							[
								73097,
								73132
							],
							[
								73144,
								73200
							],
							[
								73212,
								73265
							],
							[
								73277,
								73322
							],
							[
								73334,
								73379
							],
							[
								73391,
								73436
							],
							[
								73448,
								73478
							],
							[
								73490,
								73537
							],
							[
								73549,
								73574
							],
							[
								73586,
								73619
							],
							[
								73631,
								73661
							],
							[
								73673,
								73713
							],
							[
								73725,
								73778
							],
							[
								73790,
								73813
							],
							[
								73825,
								73846
							],
							[
								73858,
								73898
							],
							[
								73910,
								73944
							],
							[
								73956,
								73978
							],
							[
								73990,
								74024
							],
							[
								74036,
								74059
							],
							[
								74071,
								74113
							],
							[
								74125,
								74156
							],
							[
								74168,
								74194
							],
							[
								74207,
								74237
							],
							[
								74811,
								74851
							],
							[
								75061,
								75065
							],
							[
								76206,
								76246
							],
							[
								76629,
								76689
							],
							[
								77125,
								77151
							],
							[
								77259,
								77297
							],
							[
								77493,
								77497
							],
							[
								77784,
								77814
							],
							[
								78273,
								78277
							],
							[
								78929,
								78968
							],
							[
								79632,
								79689
							],
							[
								80010,
								80034
							],
							[
								80507,
								80537
							],
							[
								80801,
								80842
							],
							[
								80977,
								81016
							],
							[
								81028,
								81073
							],
							[
								81085,
								81113
							],
							[
								81125,
								81161
							],
							[
								81305,
								81343
							],
							[
								81355,
								81394
							],
							[
								81406,
								81447
							],
							[
								81459,
								81494
							],
							[
								81506,
								81553
							],
							[
								81565,
								81604
							],
							[
								81617,
								81651
							],
							[
								81663,
								81711
							],
							[
								81723,
								81766
							],
							[
								81778,
								81827
							],
							[
								81839,
								81889
							],
							[
								81901,
								81950
							],
							[
								82204,
								82228
							],
							[
								82285,
								82310
							],
							[
								82689,
								82718
							],
							[
								82911,
								82916
							],
							[
								83191,
								83212
							],
							[
								83279,
								83337
							],
							[
								83483,
								83487
							],
							[
								84072,
								84080
							],
							[
								84132,
								84140
							],
							[
								84252,
								84256
							],
							[
								84509,
								84567
							],
							[
								84669,
								84674
							],
							[
								85023,
								85030
							],
							[
								85219,
								85272
							],
							[
								85509,
								85570
							],
							[
								85880,
								85960
							],
							[
								86081,
								86086
							],
							[
								86424,
								86485
							],
							[
								86827,
								86837
							],
							[
								86903,
								86928
							],
							[
								86966,
								86976
							],
							[
								87041,
								87052
							],
							[
								87126,
								87141
							],
							[
								87180,
								87184
							],
							[
								87264,
								87289
							],
							[
								87328,
								87336
							],
							[
								87378,
								87407
							],
							[
								87437,
								87441
							]
						],
						"symlist":
						[
							" (ast, r) =>",
							" function DeepFind(ast, pred, flags = deep.RETURN_VALUE)",
							" function* DeepSelect(ast, pred, flags = deep.RETURN_VALUE)",
							" function DeepCachePath(ast, path, m)",
							" function DeepPathOf(ast, value)",
							" function DeepGet(ast, path, ...args)",
							"function FileTime(filename)",
							"function Newer(file, ...other)",
							"other =>",
							"function Older(file, other)",
							"function GetSubscripts(str)",
							"m =>",
							"function TrimSubscripts(str, sub)",
							" function nameOrIdPred(name_or_id, ...args)",
							" node =>",
							"List",
							"constructor(...args)",
							"filter(callback, thisArg = null)",
							"callback = elem =>",
							"slice(start, end)",
							"get first()",
							"elem =>",
							"entries()",
							"keys()",
							"values()",
							"toArray()",
							"(a, n) =>",
							"List",
							"Node",
							"constructor(ast)",
							"static get(ast)",
							"get ast()",
							"get id()",
							"get loc()",
							"get file()",
							" (v, k) =>",
							" (v, k) =>",
							"get range()",
							"r =>",
							"toJSON(obj)",
							"Node",
							"(node, ast) =>",
							" function PathOf(node, ast = globalThis['$'].data)",
							" function* Hier(node_or_path, t = (p, ast, abort) => p.",
							"(ast), ast = globalThis['$'].data)",
							"p =>",
							"abortFn = () =>",
							" function FindType(typeName, ast = globalThis['$'].data)",
							"([tok]) =>",
							"node =>",
							"PointerType",
							"constructor(pointee, ast, ns)",
							"static fromString(str, ast, ns)",
							"toString()",
							"ReferenceType",
							"constructor(pointee, ast, ns)",
							"static fromString(str, ast, ns)",
							"toString()",
							"Type",
							"constructor(node, ast, ns)",
							"n =>",
							"get regExp()",
							"isEnum()",
							"isPointer()",
							"isReference()",
							"isFunction()",
							"isArray()",
							"isInteger()",
							"arrayOf()",
							"get subscripts()",
							"trimSubscripts()",
							"get pointer()",
							"get reference()",
							"getPointer(ast)",
							"get unsigned()",
							"get signed()",
							"isCompound()",
							"isFloatingPoint()",
							"get alias()",
							"get aliases()",
							"isEnum()",
							"isString()",
							"get ffi()",
							"get size()",
							"toJS()",
							"toJSON(obj)",
							"static get(name_or_id, ast = globalThis['$'].data)",
							" node =>",
							" node =>",
							"function RoundTo(value, align)",
							"RecordDecl",
							"constructor(node, ast, ns)",
							"child =>",
							"child =>",
							"() =>",
							"node =>",
							"(acc, node) =>",
							"i =>",
							" n =>",
							"n =>",
							"([name, t]) =>",
							"get size()",
							"(acc, [name, type]) =>",
							"toJSON()",
							"([name, member]) =>",
							"EnumDecl",
							"constructor(node, ast)",
							"child =>",
							"({ name, type, inner }) =>",
							"toJSON()",
							"TypedefDecl",
							"constructor(node, ast, ns)",
							"n =>",
							" (v, k) =>",
							"n =>",
							"n =>",
							"n =>",
							"get size()",
							"toJSON()",
							"FieldDecl",
							"constructor(node, ast)",
							"FunctionDecl",
							"constructor(node, ast, ns)",
							"child =>",
							"child =>",
							"({ name, type }) =>",
							"isMethod()",
							"toJSON()",
							"VarDecl",
							"constructor(node, ast)",
							"toJSON()",
							"ClassDecl",
							"constructor(node, ast)",
							"BuiltinType",
							"constructor(node, ast)",
							"ConstantArrayType",
							"constructor(node, ast)",
							"toJSON()",
							"Range",
							"constructor(begin, end)",
							"get begin()",
							"set begin(v)",
							"get end()",
							"set end(v)",
							"toString(opts = { printFile: true })",
							"get length()",
							"toArray()",
							"toObject()",
							"Range",
							"Location",
							"static at(file, offset)",
							"static from(loc)",
							"constructor(loc)",
							"update(other)",
							"get line()",
							"set line(v)",
							"get column()",
							"set column(v)",
							"get offset()",
							"set offset(v)",
							" (t, ...c) =>",
							"'\\x1b[m' : t =>",
							"toString(opts = { printFile: true, onlyOffset: false })",
							"toObject()",
							"localeCompare(other)",
							" function TypeFactory(node, ast, cache = true)",
							"async function SpawnCompiler(compiler, input, outfile, args = [])",
							"p =>",
							"p =>",
							"line =>",
							"line =>",
							"line =>",
							" function PipeReader(fd, callback)",
							"(resolve, reject) =>",
							" () =>",
							" data =>",
							" function ReadPipe(fd, callback)",
							" function ReadOutput(fd)",
							"async function SourceDependencies(...args)",
							"async function AstDump(compiler, source, args, force)",
							"size()",
							"json()",
							"data()",
							"SetFile = loc =>",
							"files()",
							"n =>",
							"file =>",
							"pred2 = (used, implicit) =>",
							" node =>",
							"types()",
							" n =>",
							" () =>",
							"List",
							"functions()",
							" n =>",
							" () =>",
							" n =>",
							"List",
							"namespaces()",
							" n =>",
							"List",
							"classes()",
							"predicate = n =>",
							"List",
							"variables()",
							"n =>",
							"List",
							"names(depth = 1)",
							"n =>",
							"n =>",
							" function NameFor(decl, ast = globalThis['$']?.data)",
							" (value, key) =>",
							" function NodeType(n)",
							"t =>",
							" n =>",
							" function NodeName(n, name)",
							" function* RawLocation(path)",
							" function* RawRange(path)",
							" function CompleteLocation(path)",
							"l =>",
							" function CompleteRange(path)",
							"l =>",
							" function GetLoc(node)",
							" function GetTypeNode(node, ast = globalThis['$'].data)",
							"node =>",
							"node =>",
							" function GetTypeStr(node)",
							"inner =>",
							"inner =>",
							"([n, t]) =>",
							"NodeError",
							"constructor(message, node)",
							"NodeError",
							" function NodePrinter(ast)",
							" function put(str)",
							" function trim()",
							"printer = function(node)",
							"get()",
							"value()",
							"value(node)",
							"toString()",
							"i =>",
							"NodePrinter",
							"AbiTagAttr(abi_tag_attr)",
							"AccessSpecDecl(access_spec_decl)",
							"AlignedAttr(aligned_attr)",
							"AlwaysInlineAttr(always_inline_attr)",
							"ArraySubscriptExpr(array_subscript_expr)",
							"AsmLabelAttr(asm_label_attr)",
							"BinaryOperator(binary_operator)",
							"BlockCommandComment(block_command_comment)",
							"BuiltinAttr(builtin_attr)",
							"BreakStmt(break_stmt)",
							"CallExpr(call_expr)",
							"RecoveryExpr(recovery_expr)",
							"CaseStmt(case_stmt)",
							"CharacterLiteral(character_literal)",
							"CompoundAssignOperator(compound_assign_operator)",
							"CompoundStmt(compound_stmt)",
							"ConditionalOperator(conditional_operator)",
							"ConstantExpr(constant_expr)",
							"ConstAttr(const_attr)",
							"ContinueStmt(continue_stmt)",
							"CStyleCastExpr(cstyle_cast_expr)",
							"DeclRefExpr(decl_ref_expr)",
							"DeclStmt(decl_stmt)",
							"DefaultStmt(default_stmt)",
							"DeprecatedAttr(deprecated_attr)",
							"DoStmt(do_stmt)",
							"EmptyDecl(empty_decl)",
							"EnumConstantDecl(enum_constant_decl)",
							"EnumDecl(enum_decl)",
							"FieldDecl(field_decl)",
							"FloatingLiteral(floating_literal)",
							"FormatAttr(format_attr)",
							"ForStmt(for_stmt)",
							"n =>",
							"FullComment(full_comment)",
							"FunctionDecl(function_decl)",
							"n =>",
							"n =>",
							"GotoStmt(goto_stmt)",
							" n =>",
							"HTMLEndTagComment(html_end_tag_comment)",
							"HTMLStartTagComment(html_start_tag_comment)",
							"IfStmt(if_stmt)",
							"ImplicitCastExpr(implicit_cast_expr)",
							"InitListExpr(init_list_expr)",
							"InlineCommandComment(inline_command_comment)",
							"IntegerLiteral(integer_literal)",
							"LabelStmt(label_stmt)",
							"MemberExpr(member_expr)",
							"NonNullAttr(non_null_attr)",
							"NoThrowAttr(no_throw_attr)",
							"NullStmt(null_stmt)",
							"ParagraphComment(paragraph_comment)",
							"ParamCommandComment(param_command_comment)",
							"ParenExpr(paren_expr)",
							"ParenListExpr(paren_list_expr)",
							"ParmVarDecl(parm_var_decl)",
							"PureAttr(pure_attr)",
							"RecordDecl(record_decl)",
							"RestrictAttr(restrict_attr)",
							"ReturnStmt(return_stmt)",
							"ReturnsTwiceAttr(returns_twice_attr)",
							"StringLiteral(string_literal)",
							"SwitchStmt(switch_stmt)",
							"TextComment(text_comment)",
							"TranslationUnitDecl(translation_unit_decl)",
							"TypedefDecl(typedef_decl)",
							"UnaryExprOrTypeTraitExpr(unary_expr_or_type_trait_expr)",
							"UnaryOperator(unary_operator)",
							"UnresolvedLookupExpr(unresolved_lookup_expr)",
							"UnresolvedMemberExpr(unresolved_member_expr)",
							"VarDecl(var_decl, base_type)",
							"([offset, subscript]) =>",
							"VerbatimBlockComment(verbatim_block_comment)",
							"VerbatimBlockLineComment(verbatim_block_line_comment)",
							"WarnUnusedResultAttr(warn_unused_result_attr)",
							"WeakAttr(weak_attr)",
							"WhileStmt(while_stmt)",
							"OverrideAttr(override_attr)",
							"AddrLabelExpr(addr_label_expr)",
							"AliasAttr(alias_attr)",
							"AlignValueAttr(align_value_attr)",
							"AllocSizeAttr(alloc_size_attr)",
							"ArrayInitIndexExpr(array_init_index_expr)",
							"ArrayInitLoopExpr(array_init_loop_expr)",
							"AtomicExpr(atomic_expr)",
							"AtomicType(atomic_type)",
							"AutoType(auto_type)",
							"BuiltinTemplateDecl(builtin_template_decl)",
							"BuiltinType(builtin_type)",
							"CallbackAttr(callback_attr)",
							"ClassTemplateDecl(class_template_decl)",
							"ClassTemplatePartialSpecializationDecl(class_template_partial_specialization_decl)",
							"ClassTemplateSpecializationDecl(class_template_specialization_decl)",
							"ComplexType(complex_type)",
							"CompoundLiteralExpr(compound_literal_expr)",
							"ConstantArrayType(constant_array_type)",
							"ConstructorUsingShadowDecl(constructor_using_shadow_decl)",
							"ConvertVectorExpr(convert_vector_expr)",
							"DecayedType(decayed_type)",
							"DecltypeType(decltype_type)",
							"DependentNameType(dependent_name_type)",
							"DependentScopeDeclRefExpr(dependent_scope_decl_ref_expr)",
							"DependentSizedArrayType(dependent_sized_array_type)",
							"DependentTemplateSpecializationType(dependent_template_specialization_type)",
							"ElaboratedType(elaborated_type)",
							"EnumType(enum_type)",
							"ExprWithCleanups(expr_with_cleanups)",
							"FinalAttr(final_attr)",
							"FormatArgAttr(format_arg_attr)",
							"FriendDecl(friend_decl)",
							"FunctionNoProtoType(function_no_proto_type)",
							"FunctionProtoType(function_proto_type)",
							"FunctionTemplateDecl(function_template_decl)",
							"GCCAsmStmt(gcc_asm_stmt)",
							"GNUInlineAttr(gnu_inline_attr)",
							"GNUNullExpr(gnu_null_expr)",
							"ImplicitValueInitExpr(implicit_value_init_expr)",
							"IncompleteArrayType(incomplete_array_type)",
							"IndirectFieldDecl(indirect_field_decl)",
							"IndirectGotoStmt(indirect_goto_stmt)",
							"InjectedClassNameType(injected_class_name_type)",
							"LambdaExpr(lambda_expr)",
							"LinkageSpecDecl(linkage_spec_decl)",
							"LValueReferenceType(l_value_reference_type)",
							"MaterializeTemporaryExpr(materialize_temporary_expr)",
							"MaxFieldAlignmentAttr(max_field_alignment_attr)",
							"MayAliasAttr(may_alias_attr)",
							"MemberPointerType(member_pointer_type)",
							"MinVectorWidthAttr(min_vector_width_attr)",
							"ModeAttr(mode_attr)",
							"NamespaceDecl(namespace_decl)",
							"NoDebugAttr(no_debug_attr)",
							"NoInlineAttr(no_inline_attr)",
							"NonTypeTemplateParmDecl(non_type_template_parm_decl)",
							"OffsetOfExpr(offset_of_expr)",
							"OpaqueValueExpr(opaque_value_expr)",
							"OwnerAttr(owner_attr)",
							"PackedAttr(packed_attr)",
							"PackExpansionExpr(pack_expansion_expr)",
							"PackExpansionType(pack_expansion_type)",
							"ParenType(paren_type)",
							"PointerAttr(pointer_attr)",
							"PointerType(pointer_type)",
							"PredefinedExpr(predefined_expr)",
							"QualType(qual_type)",
							"RecordType(record_type)",
							"ReturnsNonNullAttr(returns_non_null_attr)",
							"RValueReferenceType(r_value_reference_type)",
							"SentinelAttr(sentinel_attr)",
							"ShuffleVectorExpr(shuffle_vector_expr)",
							"SizeOfPackExpr(size_of_pack_expr)",
							"StaticAssertDecl(static_assert_decl)",
							"StmtExpr(stmt_expr)",
							"SubstNonTypeTemplateParmExpr(subst_non_type_template_parm_expr)",
							"SubstTemplateTypeParmType(subst_template_type_parm_type)",
							"TargetAttr(target_attr)",
							"TemplateArgument(template_argument)",
							"TemplateSpecializationType(template_specialization_type)",
							"TemplateTemplateParmDecl(template_template_parm_decl)",
							"TemplateTypeParmDecl(template_type_parm_decl)",
							"TemplateTypeParmType(template_type_parm_type)",
							"TParamCommandComment(t_param_command_comment)",
							"TypeAliasDecl(type_alias_decl)",
							"TypeAliasTemplateDecl(type_alias_template_decl)",
							"TypedefType(typedef_type)",
							"TypeOfExprType(type_of_expr_type)",
							"TypeTraitExpr(type_trait_expr)",
							"UnaryTransformType(unary_transform_type)",
							"UnresolvedUsingValueDecl(unresolved_using_value_decl)",
							"UnusedAttr(unused_attr)",
							"UsingDecl(using_decl)",
							"UsingDirectiveDecl(using_directive_decl)",
							"UsingShadowDecl(using_shadow_decl)",
							"VAArgExpr(va_arg_expr)",
							"VarTemplateDecl(var_template_decl)",
							"VectorType(vector_type)",
							"VerbatimLineComment(verbatim_line_comment)",
							"VisibilityAttr(visibility_attr)",
							"WeakRefAttr(weak_ref_attr)",
							"CXXRecordDecl(cxx_record_decl)",
							"CXXConstructorDecl(cxx_constructor_decl)",
							"n =>",
							"CXXCtorInitializer(cxx_ctor_initializer)",
							"CXXDependentScopeMemberExpr(cxx_dependent_scope_member_expr)",
							"CXXThisExpr(cxx_this_expr)",
							"CXXDestructorDecl(cxx_destructor_decl)",
							"n =>",
							"CXXMethodDecl(cxx_method_decl)",
							"n =>",
							"CXXStaticCastExpr(cxx_static_cast_expr)",
							"CXXUnresolvedConstructExpr(cxx_unresolved_construct_expr)",
							"CXXNewExpr(cxx_new_expr)",
							"CXXDeleteExpr(cxx_delete_expr)",
							"CXXBoolLiteralExpr(cxx_bool_literal_expr)",
							"CXX11NoReturnAttr(cxx11_no_return_attr)",
							"CXXBindTemporaryExpr(cxx_bind_temporary_expr)",
							"CXXCatchStmt(cxx_catch_stmt)",
							"CXXConstructExpr(cxx_construct_expr)",
							"CXXConversionDecl(cxx_conversion_decl)",
							"CXXDefaultArgExpr(cxx_default_arg_expr)",
							"CXXDefaultInitExpr(cxx_default_init_expr)",
							"CXXForRangeStmt(cxx_for_range_stmt)",
							"CXXFunctionalCastExpr(cxx_functional_cast_expr)",
							"CXXMemberCallExpr(cxx_member_call_expr)",
							"CXXNoexceptExpr(cxx_noexcept_expr)",
							"CXXNullPtrLiteralExpr(cxx_null_ptr_literal_expr)",
							"CXXOperatorCallExpr(cxx_operator_call_expr)",
							"CXXReinterpretCastExpr(cxx_reinterpret_cast_expr)",
							"CXXScalarValueInitExpr(cxx_scalar_value_init_expr)",
							"CXXTemporaryObjectExpr(cxx_temporary_object_expr)",
							"CXXTryStmt(cxx_try_stmt)",
							" function PrintNode(node)",
							" function PrintAst(node, ast)",
							"get()",
							" function isNode(obj)",
							" function GetType(name_or_id, ast = globalThis['$']?.data)",
							"n =>",
							" node =>",
							" node =>",
							"r =>",
							" function GetClass(name_or_id, ast = globalThis['$'].data)",
							" n =>",
							"bases()",
							" function* GetBases(node, ast = globalThis['$'].data)",
							" function GetByName(arg, ast = globalThis['$'].data, ...args)",
							" function GetNamespace(arg, root = globalThis['$'].data, predicate = () => true)",
							" n =>",
							" function NamespaceOf(node, path, ast = globalThis['$'].data)",
							"toString()",
							" function GetFields(node)",
							" (v, k) =>",
							"([v, p]) =>",
							"([loc, ptr]) =>",
							"i =>",
							" function GetParams(node)",
							"child =>",
							" function PathRemoveLoc(path)",
							"p =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD9AAAARmV0Y2hDbGFzcyh1cmwpCiAgZSA9PgogIHNpbXBsaWZ5TGlzdCA9IGxpc3QgPT4KKFthLCBiXSkgPT4KKFthXSkgPT4KICBzdW1tYXJ5TGlzdCA9IHN1bW1hcnkgPT4KICBlID0+CihbbmFtZV0pID0+CihhLCBlKSA9PgogIG1ha2VVUkwgPSBwID0+CiAgZ2V0VVJMKG5hbWUpCiAgZW50cnkgPT4KKmtleXMoKQoqdmFsdWVzKCkKKmVudHJpZXMoKQogIHByZWQgPSAoaywgdikgPT4KICBwcmVkID0gKGtleSwgdmFsdWUpID0+CiAgZ2V0IG5hbWUoKQAAAAAAAAAANS0AAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					24,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/clang-list.js",
						"symkeys":
						[
							[
								341,
								365
							],
							[
								529,
								535
							],
							[
								579,
								596
							],
							[
								707,
								735
							],
							[
								921,
								931
							],
							[
								981,
								991
							],
							[
								1927,
								1931
							],
							[
								1978,
								1982
							],
							[
								2080,
								2117
							],
							[
								2402,
								2446
							],
							[
								2454,
								2496
							],
							[
								2536,
								2543
							],
							[
								2587,
								2594
							],
							[
								3005,
								3016
							],
							[
								3063,
								3068
							],
							[
								3078,
								3083
							],
							[
								3096,
								3107
							],
							[
								3137,
								3142
							],
							[
								3155,
								3166
							],
							[
								3324,
								3330
							],
							[
								3731,
								3741
							],
							[
								3903,
								3913
							],
							[
								4210,
								4220
							],
							[
								4777,
								4782
							],
							[
								4925,
								4965
							],
							[
								5017,
								5050
							],
							[
								5235,
								5253
							],
							[
								5299,
								5315
							],
							[
								5331,
								5348
							],
							[
								5375,
								5398
							],
							[
								5414,
								5436
							],
							[
								5536,
								5547
							],
							[
								5670,
								5679
							],
							[
								5749,
								5760
							],
							[
								5978,
								5986
							],
							[
								6016,
								6024
							],
							[
								6043,
								6047
							],
							[
								6214,
								6225
							],
							[
								6280,
								6291
							],
							[
								6323,
								6332
							],
							[
								6482,
								6493
							],
							[
								6544,
								6558
							],
							[
								6697,
								6701
							],
							[
								6971,
								7010
							],
							[
								7104,
								7117
							],
							[
								7574,
								7606
							],
							[
								7770,
								7804
							]
						],
						"symlist":
						[
							"findLastIndex(predicate)",
							"tail()",
							"startsWith(start)",
							"async function main(...args)",
							" (a, p) =>",
							" (a, p) =>",
							"d =>",
							"v =>",
							"async function processFiles(...files)",
							"async function ReadAST(outfile, load = f => ",
							"(f), save = WriteFile, parse = JSON.parse)",
							"name =>",
							"stat =>",
							"async () =>",
							" a =>",
							"() =>",
							"async () =>",
							"() =>",
							"async () =>",
							"err =>",
							" (v, p) =>",
							"toString()",
							"toString()",
							" v =>",
							" function ListNodes(sysinc = false)",
							"NoSystemIncludes = ([p, n, l]) =>",
							" ([path, decl]) =>",
							"names = decls =>",
							"([path, decl]) =>",
							"declarations = decls =>",
							"([path, decl, loc]) =>",
							"([p, n]) =>",
							"(a, b) =>",
							"([p, n]) =>",
							"([p]) =>",
							"([p]) =>",
							"p =>",
							"([p, n]) =>",
							"([p, n]) =>",
							"(a, b) =>",
							"([p, n]) =>",
							"([p, n, l]) =>",
							"k =>",
							"([path, node, id, name, type, kind]) =>",
							"(field, i) =>",
							"function writeOutput(name, data)",
							"function GetLibraryFor(symbolName)"
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				],
				[
					25,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/clang-ast.js",
						"symkeys":
						[
							[
								848,
								861
							],
							[
								940,
								996
							],
							[
								1441,
								1500
							],
							[
								1979,
								2016
							],
							[
								2235,
								2267
							],
							[
								2369,
								2406
							],
							[
								2560,
								2587
							],
							[
								2669,
								2699
							],
							[
								2766,
								2774
							],
							[
								2813,
								2840
							],
							[
								2889,
								2916
							],
							[
								2993,
								2997
							],
							[
								3020,
								3053
							],
							[
								3233,
								3276
							],
							[
								3561,
								3569
							],
							[
								3961,
								3965
							],
							[
								3984,
								4004
							],
							[
								4155,
								4187
							],
							[
								4349,
								4367
							],
							[
								4620,
								4637
							],
							[
								4944,
								4955
							],
							[
								4975,
								4982
							],
							[
								5009,
								5018
							],
							[
								5138,
								5144
							],
							[
								5256,
								5264
							],
							[
								5379,
								5388
							],
							[
								5414,
								5423
							],
							[
								5454,
								5458
							],
							[
								5519,
								5523
							],
							[
								5599,
								5615
							],
							[
								5872,
								5887
							],
							[
								5954,
								5963
							],
							[
								6024,
								6032
							],
							[
								6081,
								6090
							],
							[
								6137,
								6147
							],
							[
								6200,
								6210
							],
							[
								6241,
								6251
							],
							[
								6339,
								6350
							],
							[
								6556,
								6560
							],
							[
								6741,
								6752
							],
							[
								6983,
								6987
							],
							[
								7039,
								7053
							],
							[
								7103,
								7153
							],
							[
								7223,
								7278
							],
							[
								7283,
								7317
							],
							[
								7496,
								7500
							],
							[
								7581,
								7596
							],
							[
								7684,
								7740
							],
							[
								7814,
								7824
							],
							[
								8028,
								8035
							],
							[
								8152,
								8163
							],
							[
								8200,
								8229
							],
							[
								8290,
								8321
							],
							[
								8523,
								8533
							],
							[
								8588,
								8601
							],
							[
								8638,
								8667
							],
							[
								8728,
								8759
							],
							[
								8963,
								8973
							],
							[
								9028,
								9032
							],
							[
								9130,
								9156
							],
							[
								12136,
								12140
							],
							[
								13155,
								13167
							],
							[
								13290,
								13298
							],
							[
								13384,
								13395
							],
							[
								13518,
								13531
							],
							[
								13654,
								13666
							],
							[
								13760,
								13769
							],
							[
								13821,
								13832
							],
							[
								13921,
								13930
							],
							[
								14050,
								14066
							],
							[
								14124,
								14140
							],
							[
								14188,
								14201
							],
							[
								14348,
								14363
							],
							[
								14510,
								14525
							],
							[
								14782,
								14796
							],
							[
								14882,
								14894
							],
							[
								14961,
								14973
							],
							[
								15079,
								15096
							],
							[
								15182,
								15193
							],
							[
								15253,
								15266
							],
							[
								15409,
								15417
							],
							[
								15525,
								15535
							],
							[
								15716,
								15725
							],
							[
								17531,
								17541
							],
							[
								19620,
								19626
							],
							[
								19912,
								19923
							],
							[
								20024,
								20074
							],
							[
								20160,
								20168
							],
							[
								20228,
								20236
							],
							[
								22043,
								22073
							],
							[
								22152,
								22162
							],
							[
								22180,
								22206
							],
							[
								22335,
								22343
							],
							[
								22426,
								22434
							],
							[
								22612,
								22617
							],
							[
								22655,
								22662
							],
							[
								22746,
								22760
							],
							[
								23353,
								23357
							],
							[
								23438,
								23443
							],
							[
								24977,
								24981
							],
							[
								25883,
								25897
							],
							[
								25961,
								25971
							],
							[
								26056,
								26078
							],
							[
								26300,
								26308
							],
							[
								26430,
								26449
							],
							[
								26547,
								26555
							],
							[
								26573,
								26595
							],
							[
								26716,
								26724
							],
							[
								26829,
								26855
							],
							[
								27210,
								27218
							],
							[
								27333,
								27344
							],
							[
								27362,
								27388
							],
							[
								27460,
								27464
							],
							[
								27569,
								27579
							],
							[
								27639,
								27643
							],
							[
								27706,
								27710
							],
							[
								27760,
								27764
							],
							[
								28174,
								28184
							],
							[
								28216,
								28224
							],
							[
								28321,
								28330
							],
							[
								28348,
								28370
							],
							[
								28588,
								28600
							],
							[
								28618,
								28644
							],
							[
								28879,
								28887
							],
							[
								28950,
								28958
							],
							[
								30025,
								30044
							],
							[
								30160,
								30170
							],
							[
								30225,
								30233
							],
							[
								30342,
								30349
							],
							[
								30367,
								30389
							],
							[
								30734,
								30742
							],
							[
								30839,
								30848
							],
							[
								30872,
								30894
							],
							[
								30999,
								31010
							],
							[
								31028,
								31050
							],
							[
								31427,
								31444
							],
							[
								31462,
								31484
							],
							[
								31740,
								31748
							],
							[
								31859,
								31864
							],
							[
								31912,
								31935
							],
							[
								32057,
								32068
							],
							[
								32117,
								32129
							],
							[
								32191,
								32200
							],
							[
								32247,
								32257
							],
							[
								32295,
								32331
							],
							[
								32986,
								32998
							],
							[
								33044,
								33053
							],
							[
								33100,
								33110
							],
							[
								33290,
								33295
							],
							[
								33351,
								33359
							],
							[
								33452,
								33475
							],
							[
								33734,
								33750
							],
							[
								33969,
								33985
							],
							[
								34396,
								34409
							],
							[
								34555,
								34565
							],
							[
								34613,
								34624
							],
							[
								34716,
								34728
							],
							[
								34778,
								34791
							],
							[
								34839,
								34851
							],
							[
								34901,
								34914
							],
							[
								35162,
								35175
							],
							[
								35210,
								35225
							],
							[
								35305,
								35360
							],
							[
								35904,
								35914
							],
							[
								36157,
								36177
							],
							[
								36260,
								36306
							],
							[
								37805,
								37870
							],
							[
								38180,
								38184
							],
							[
								38445,
								38449
							],
							[
								39174,
								39181
							],
							[
								39235,
								39242
							],
							[
								39326,
								39333
							],
							[
								39510,
								39545
							],
							[
								39584,
								39604
							],
							[
								39634,
								39640
							],
							[
								39661,
								39669
							],
							[
								39776,
								39809
							],
							[
								40074,
								40099
							],
							[
								40440,
								40482
							],
							[
								41014,
								41067
							],
							[
								42477,
								42483
							],
							[
								42533,
								42539
							],
							[
								42704,
								42710
							],
							[
								42852,
								42868
							],
							[
								43413,
								43420
							],
							[
								43463,
								43467
							],
							[
								43487,
								43494
							],
							[
								43615,
								43642
							],
							[
								43701,
								43716
							],
							[
								44021,
								44028
							],
							[
								44088,
								44102
							],
							[
								44147,
								44162
							],
							[
								44188,
								44192
							],
							[
								44224,
								44235
							],
							[
								44268,
								44280
							],
							[
								44314,
								44327
							],
							[
								44403,
								44408
							],
							[
								44488,
								44492
							],
							[
								44516,
								44528
							],
							[
								44591,
								44596
							],
							[
								44626,
								44630
							],
							[
								44654,
								44663
							],
							[
								44676,
								44692
							],
							[
								45034,
								45038
							],
							[
								45062,
								45073
							],
							[
								45132,
								45136
							],
							[
								45174,
								45178
							],
							[
								45210,
								45226
							],
							[
								45265,
								45269
							],
							[
								45287,
								45291
							],
							[
								45335,
								45387
							],
							[
								45575,
								45591
							],
							[
								45951,
								45972
							],
							[
								45998,
								46002
							],
							[
								46444,
								46449
							],
							[
								46484,
								46511
							],
							[
								46705,
								46733
							],
							[
								46914,
								46939
							],
							[
								47014,
								47046
							],
							[
								47177,
								47181
							],
							[
								47318,
								47347
							],
							[
								47457,
								47461
							],
							[
								47755,
								47777
							],
							[
								48816,
								48871
							],
							[
								48951,
								48958
							],
							[
								49024,
								49031
							],
							[
								49068,
								49094
							],
							[
								49188,
								49196
							],
							[
								49262,
								49270
							],
							[
								49332,
								49343
							],
							[
								49497,
								49506
							],
							[
								49525,
								49551
							],
							[
								49604,
								49613
							],
							[
								49666,
								49692
							],
							[
								49744,
								49763
							],
							[
								49839,
								49856
							],
							[
								49891,
								49915
							],
							[
								50174,
								50179
							],
							[
								50237,
								50244
							],
							[
								50326,
								50337
							],
							[
								51045,
								51055
							],
							[
								51103,
								51107
							],
							[
								51298,
								51309
							],
							[
								51320,
								51344
							],
							[
								51412,
								51444
							],
							[
								51600,
								51625
							],
							[
								51689,
								51725
							],
							[
								51795,
								51835
							],
							[
								52087,
								52115
							],
							[
								52162,
								52193
							],
							[
								52422,
								52464
							],
							[
								52667,
								52692
							],
							[
								52850,
								52871
							],
							[
								52916,
								52935
							],
							[
								53269,
								53296
							],
							[
								53364,
								53383
							],
							[
								53587,
								53622
							],
							[
								53740,
								53788
							],
							[
								54034,
								54061
							],
							[
								54679,
								54720
							],
							[
								54958,
								54985
							],
							[
								55128,
								55149
							],
							[
								55210,
								55237
							],
							[
								55282,
								55314
							],
							[
								55564,
								55590
							],
							[
								55784,
								55803
							],
							[
								56465,
								56490
							],
							[
								56538,
								56569
							],
							[
								56636,
								56651
							],
							[
								56846,
								56867
							],
							[
								56984,
								57020
							],
							[
								57240,
								57259
							],
							[
								57663,
								57684
							],
							[
								57901,
								57934
							],
							[
								57994,
								58017
							],
							[
								58080,
								58097
							],
							[
								58217,
								58221
							],
							[
								59048,
								59073
							],
							[
								59280,
								59307
							],
							[
								59772,
								59776
							],
							[
								59986,
								59990
							],
							[
								60189,
								60208
							],
							[
								60329,
								60334
							],
							[
								60672,
								60711
							],
							[
								60810,
								60853
							],
							[
								61063,
								61078
							],
							[
								61344,
								61380
							],
							[
								61476,
								61504
							],
							[
								61774,
								61818
							],
							[
								61880,
								61911
							],
							[
								61970,
								61991
							],
							[
								62050,
								62073
							],
							[
								62496,
								62522
							],
							[
								62590,
								62616
							],
							[
								62680,
								62699
							],
							[
								62741,
								62776
							],
							[
								62950,
								62992
							],
							[
								63177,
								63198
							],
							[
								63374,
								63404
							],
							[
								63624,
								63650
							],
							[
								64079,
								64098
							],
							[
								64159,
								64182
							],
							[
								64717,
								64744
							],
							[
								64794,
								64817
							],
							[
								64974,
								65010
							],
							[
								65080,
								65109
							],
							[
								65167,
								65190
							],
							[
								65368,
								65393
							],
							[
								65477,
								65519
							],
							[
								65618,
								65643
							],
							[
								65947,
								66002
							],
							[
								66244,
								66273
							],
							[
								66524,
								66568
							],
							[
								66700,
								66744
							],
							[
								66831,
								66859
							],
							[
								67003,
								67027
							],
							[
								67275,
								67319
							],
							[
								67641,
								67694
							],
							[
								67793,
								67838
							],
							[
								67913,
								67932
							],
							[
								67993,
								68014
							],
							[
								68191,
								68218
							],
							[
								68267,
								68297
							],
							[
								68309,
								68330
							],
							[
								68342,
								68374
							],
							[
								68516,
								68546
							],
							[
								68558,
								68599
							],
							[
								68611,
								68650
							],
							[
								68662,
								68685
							],
							[
								68697,
								68720
							],
							[
								68732,
								68751
							],
							[
								68763,
								68805
							],
							[
								68817,
								68842
							],
							[
								68854,
								68881
							],
							[
								68893,
								68931
							],
							[
								68943,
								69025
							],
							[
								69037,
								69104
							],
							[
								69116,
								69141
							],
							[
								69153,
								69195
							],
							[
								69380,
								69418
							],
							[
								69430,
								69487
							],
							[
								69499,
								69537
							],
							[
								69549,
								69574
							],
							[
								69586,
								69613
							],
							[
								69625,
								69663
							],
							[
								69675,
								69731
							],
							[
								69825,
								69876
							],
							[
								69888,
								69963
							],
							[
								69975,
								70006
							],
							[
								70018,
								70037
							],
							[
								70049,
								70085
							],
							[
								70181,
								70202
							],
							[
								70214,
								70244
							],
							[
								70256,
								70279
							],
							[
								70291,
								70334
							],
							[
								70346,
								70384
							],
							[
								70396,
								70440
							],
							[
								70452,
								70476
							],
							[
								70593,
								70623
							],
							[
								70635,
								70661
							],
							[
								70705,
								70752
							],
							[
								70764,
								70806
							],
							[
								70818,
								70856
							],
							[
								70868,
								70904
							],
							[
								70916,
								70963
							],
							[
								70975,
								70998
							],
							[
								71010,
								71044
							],
							[
								71252,
								71295
							],
							[
								71307,
								71359
							],
							[
								71463,
								71510
							],
							[
								71522,
								71550
							],
							[
								71562,
								71600
							],
							[
								71612,
								71653
							],
							[
								71665,
								71684
							],
							[
								71696,
								71725
							],
							[
								71737,
								71763
							],
							[
								71775,
								71803
							],
							[
								71815,
								71867
							],
							[
								71879,
								71907
							],
							[
								71919,
								71953
							],
							[
								72085,
								72106
							],
							[
								72118,
								72141
							],
							[
								72153,
								72191
							],
							[
								72203,
								72241
							],
							[
								72253,
								72274
							],
							[
								72286,
								72311
							],
							[
								72323,
								72348
							],
							[
								72360,
								72391
							],
							[
								72478,
								72497
							],
							[
								72509,
								72532
							],
							[
								72544,
								72585
							],
							[
								72597,
								72640
							],
							[
								72652,
								72679
							],
							[
								72691,
								72729
							],
							[
								72741,
								72774
							],
							[
								72786,
								72822
							],
							[
								72834,
								72853
							],
							[
								72919,
								72982
							],
							[
								72994,
								73050
							],
							[
								73062,
								73085
							],
							[
								73097,
								73132
							],
							[
								73144,
								73200
							],
							[
								73212,
								73265
							],
							[
								73277,
								73322
							],
							[
								73334,
								73379
							],
							[
								73391,
								73436
							],
							[
								73448,
								73478
							],
							[
								73490,
								73537
							],
							[
								73549,
								73574
							],
							[
								73586,
								73619
							],
							[
								73631,
								73661
							],
							[
								73673,
								73713
							],
							[
								73725,
								73778
							],
							[
								73790,
								73813
							],
							[
								73825,
								73846
							],
							[
								73858,
								73898
							],
							[
								73910,
								73944
							],
							[
								73956,
								73978
							],
							[
								73990,
								74024
							],
							[
								74036,
								74059
							],
							[
								74071,
								74113
							],
							[
								74125,
								74156
							],
							[
								74168,
								74194
							],
							[
								74207,
								74237
							],
							[
								74811,
								74851
							],
							[
								75061,
								75065
							],
							[
								76206,
								76246
							],
							[
								76629,
								76689
							],
							[
								77125,
								77151
							],
							[
								77259,
								77297
							],
							[
								77493,
								77497
							],
							[
								77784,
								77814
							],
							[
								78273,
								78277
							],
							[
								78929,
								78968
							],
							[
								79632,
								79689
							],
							[
								80010,
								80034
							],
							[
								80507,
								80537
							],
							[
								80801,
								80842
							],
							[
								80977,
								81016
							],
							[
								81028,
								81073
							],
							[
								81085,
								81113
							],
							[
								81125,
								81161
							],
							[
								81305,
								81343
							],
							[
								81355,
								81394
							],
							[
								81406,
								81447
							],
							[
								81459,
								81494
							],
							[
								81506,
								81553
							],
							[
								81565,
								81604
							],
							[
								81617,
								81651
							],
							[
								81663,
								81711
							],
							[
								81723,
								81766
							],
							[
								81778,
								81827
							],
							[
								81839,
								81889
							],
							[
								81901,
								81950
							],
							[
								82204,
								82228
							],
							[
								82285,
								82310
							],
							[
								82689,
								82718
							],
							[
								82911,
								82916
							],
							[
								83191,
								83212
							],
							[
								83279,
								83337
							],
							[
								83483,
								83487
							],
							[
								84072,
								84080
							],
							[
								84132,
								84140
							],
							[
								84252,
								84256
							],
							[
								84509,
								84567
							],
							[
								84669,
								84674
							],
							[
								85023,
								85030
							],
							[
								85219,
								85272
							],
							[
								85509,
								85570
							],
							[
								85880,
								85960
							],
							[
								86081,
								86086
							],
							[
								86424,
								86485
							],
							[
								86827,
								86837
							],
							[
								86903,
								86928
							],
							[
								86966,
								86976
							],
							[
								87041,
								87052
							],
							[
								87126,
								87141
							],
							[
								87180,
								87184
							],
							[
								87264,
								87289
							],
							[
								87328,
								87336
							],
							[
								87378,
								87407
							],
							[
								87437,
								87441
							]
						],
						"symlist":
						[
							" (ast, r) =>",
							" function DeepFind(ast, pred, flags = deep.RETURN_VALUE)",
							" function* DeepSelect(ast, pred, flags = deep.RETURN_VALUE)",
							" function DeepCachePath(ast, path, m)",
							" function DeepPathOf(ast, value)",
							" function DeepGet(ast, path, ...args)",
							"function FileTime(filename)",
							"function Newer(file, ...other)",
							"other =>",
							"function Older(file, other)",
							"function GetSubscripts(str)",
							"m =>",
							"function TrimSubscripts(str, sub)",
							" function nameOrIdPred(name_or_id, ...args)",
							" node =>",
							"List",
							"constructor(...args)",
							"filter(callback, thisArg = null)",
							"callback = elem =>",
							"slice(start, end)",
							"get first()",
							"elem =>",
							"entries()",
							"keys()",
							"values()",
							"toArray()",
							"(a, n) =>",
							"List",
							"Node",
							"constructor(ast)",
							"static get(ast)",
							"get ast()",
							"get id()",
							"get loc()",
							"get file()",
							" (v, k) =>",
							" (v, k) =>",
							"get range()",
							"r =>",
							"toJSON(obj)",
							"Node",
							"(node, ast) =>",
							" function PathOf(node, ast = globalThis['$'].data)",
							" function* Hier(node_or_path, t = (p, ast, abort) => p.",
							"(ast), ast = globalThis['$'].data)",
							"p =>",
							"abortFn = () =>",
							" function FindType(typeName, ast = globalThis['$'].data)",
							"([tok]) =>",
							"node =>",
							"PointerType",
							"constructor(pointee, ast, ns)",
							"static fromString(str, ast, ns)",
							"toString()",
							"ReferenceType",
							"constructor(pointee, ast, ns)",
							"static fromString(str, ast, ns)",
							"toString()",
							"Type",
							"constructor(node, ast, ns)",
							"n =>",
							"get regExp()",
							"isEnum()",
							"isPointer()",
							"isReference()",
							"isFunction()",
							"isArray()",
							"isInteger()",
							"arrayOf()",
							"get subscripts()",
							"trimSubscripts()",
							"get pointer()",
							"get reference()",
							"getPointer(ast)",
							"get unsigned()",
							"get signed()",
							"isCompound()",
							"isFloatingPoint()",
							"get alias()",
							"get aliases()",
							"isEnum()",
							"isString()",
							"get ffi()",
							"get size()",
							"toJS()",
							"toJSON(obj)",
							"static get(name_or_id, ast = globalThis['$'].data)",
							" node =>",
							" node =>",
							"function RoundTo(value, align)",
							"RecordDecl",
							"constructor(node, ast, ns)",
							"child =>",
							"child =>",
							"() =>",
							"node =>",
							"(acc, node) =>",
							"i =>",
							" n =>",
							"n =>",
							"([name, t]) =>",
							"get size()",
							"(acc, [name, type]) =>",
							"toJSON()",
							"([name, member]) =>",
							"EnumDecl",
							"constructor(node, ast)",
							"child =>",
							"({ name, type, inner }) =>",
							"toJSON()",
							"TypedefDecl",
							"constructor(node, ast, ns)",
							"n =>",
							" (v, k) =>",
							"n =>",
							"n =>",
							"n =>",
							"get size()",
							"toJSON()",
							"FieldDecl",
							"constructor(node, ast)",
							"FunctionDecl",
							"constructor(node, ast, ns)",
							"child =>",
							"child =>",
							"({ name, type }) =>",
							"isMethod()",
							"toJSON()",
							"VarDecl",
							"constructor(node, ast)",
							"toJSON()",
							"ClassDecl",
							"constructor(node, ast)",
							"BuiltinType",
							"constructor(node, ast)",
							"ConstantArrayType",
							"constructor(node, ast)",
							"toJSON()",
							"Range",
							"constructor(begin, end)",
							"get begin()",
							"set begin(v)",
							"get end()",
							"set end(v)",
							"toString(opts = { printFile: true })",
							"get length()",
							"toArray()",
							"toObject()",
							"Range",
							"Location",
							"static at(file, offset)",
							"static from(loc)",
							"constructor(loc)",
							"update(other)",
							"get line()",
							"set line(v)",
							"get column()",
							"set column(v)",
							"get offset()",
							"set offset(v)",
							" (t, ...c) =>",
							"'\\x1b[m' : t =>",
							"toString(opts = { printFile: true, onlyOffset: false })",
							"toObject()",
							"localeCompare(other)",
							" function TypeFactory(node, ast, cache = true)",
							"async function SpawnCompiler(compiler, input, outfile, args = [])",
							"p =>",
							"p =>",
							"line =>",
							"line =>",
							"line =>",
							" function PipeReader(fd, callback)",
							"(resolve, reject) =>",
							" () =>",
							" data =>",
							" function ReadPipe(fd, callback)",
							" function ReadOutput(fd)",
							"async function SourceDependencies(...args)",
							"async function AstDump(compiler, source, args, force)",
							"size()",
							"json()",
							"data()",
							"SetFile = loc =>",
							"files()",
							"n =>",
							"file =>",
							"pred2 = (used, implicit) =>",
							" node =>",
							"types()",
							" n =>",
							" () =>",
							"List",
							"functions()",
							" n =>",
							" () =>",
							" n =>",
							"List",
							"namespaces()",
							" n =>",
							"List",
							"classes()",
							"predicate = n =>",
							"List",
							"variables()",
							"n =>",
							"List",
							"names(depth = 1)",
							"n =>",
							"n =>",
							" function NameFor(decl, ast = globalThis['$']?.data)",
							" (value, key) =>",
							" function NodeType(n)",
							"t =>",
							" n =>",
							" function NodeName(n, name)",
							" function* RawLocation(path)",
							" function* RawRange(path)",
							" function CompleteLocation(path)",
							"l =>",
							" function CompleteRange(path)",
							"l =>",
							" function GetLoc(node)",
							" function GetTypeNode(node, ast = globalThis['$'].data)",
							"node =>",
							"node =>",
							" function GetTypeStr(node)",
							"inner =>",
							"inner =>",
							"([n, t]) =>",
							"NodeError",
							"constructor(message, node)",
							"NodeError",
							" function NodePrinter(ast)",
							" function put(str)",
							" function trim()",
							"printer = function(node)",
							"get()",
							"value()",
							"value(node)",
							"toString()",
							"i =>",
							"NodePrinter",
							"AbiTagAttr(abi_tag_attr)",
							"AccessSpecDecl(access_spec_decl)",
							"AlignedAttr(aligned_attr)",
							"AlwaysInlineAttr(always_inline_attr)",
							"ArraySubscriptExpr(array_subscript_expr)",
							"AsmLabelAttr(asm_label_attr)",
							"BinaryOperator(binary_operator)",
							"BlockCommandComment(block_command_comment)",
							"BuiltinAttr(builtin_attr)",
							"BreakStmt(break_stmt)",
							"CallExpr(call_expr)",
							"RecoveryExpr(recovery_expr)",
							"CaseStmt(case_stmt)",
							"CharacterLiteral(character_literal)",
							"CompoundAssignOperator(compound_assign_operator)",
							"CompoundStmt(compound_stmt)",
							"ConditionalOperator(conditional_operator)",
							"ConstantExpr(constant_expr)",
							"ConstAttr(const_attr)",
							"ContinueStmt(continue_stmt)",
							"CStyleCastExpr(cstyle_cast_expr)",
							"DeclRefExpr(decl_ref_expr)",
							"DeclStmt(decl_stmt)",
							"DefaultStmt(default_stmt)",
							"DeprecatedAttr(deprecated_attr)",
							"DoStmt(do_stmt)",
							"EmptyDecl(empty_decl)",
							"EnumConstantDecl(enum_constant_decl)",
							"EnumDecl(enum_decl)",
							"FieldDecl(field_decl)",
							"FloatingLiteral(floating_literal)",
							"FormatAttr(format_attr)",
							"ForStmt(for_stmt)",
							"n =>",
							"FullComment(full_comment)",
							"FunctionDecl(function_decl)",
							"n =>",
							"n =>",
							"GotoStmt(goto_stmt)",
							" n =>",
							"HTMLEndTagComment(html_end_tag_comment)",
							"HTMLStartTagComment(html_start_tag_comment)",
							"IfStmt(if_stmt)",
							"ImplicitCastExpr(implicit_cast_expr)",
							"InitListExpr(init_list_expr)",
							"InlineCommandComment(inline_command_comment)",
							"IntegerLiteral(integer_literal)",
							"LabelStmt(label_stmt)",
							"MemberExpr(member_expr)",
							"NonNullAttr(non_null_attr)",
							"NoThrowAttr(no_throw_attr)",
							"NullStmt(null_stmt)",
							"ParagraphComment(paragraph_comment)",
							"ParamCommandComment(param_command_comment)",
							"ParenExpr(paren_expr)",
							"ParenListExpr(paren_list_expr)",
							"ParmVarDecl(parm_var_decl)",
							"PureAttr(pure_attr)",
							"RecordDecl(record_decl)",
							"RestrictAttr(restrict_attr)",
							"ReturnStmt(return_stmt)",
							"ReturnsTwiceAttr(returns_twice_attr)",
							"StringLiteral(string_literal)",
							"SwitchStmt(switch_stmt)",
							"TextComment(text_comment)",
							"TranslationUnitDecl(translation_unit_decl)",
							"TypedefDecl(typedef_decl)",
							"UnaryExprOrTypeTraitExpr(unary_expr_or_type_trait_expr)",
							"UnaryOperator(unary_operator)",
							"UnresolvedLookupExpr(unresolved_lookup_expr)",
							"UnresolvedMemberExpr(unresolved_member_expr)",
							"VarDecl(var_decl, base_type)",
							"([offset, subscript]) =>",
							"VerbatimBlockComment(verbatim_block_comment)",
							"VerbatimBlockLineComment(verbatim_block_line_comment)",
							"WarnUnusedResultAttr(warn_unused_result_attr)",
							"WeakAttr(weak_attr)",
							"WhileStmt(while_stmt)",
							"OverrideAttr(override_attr)",
							"AddrLabelExpr(addr_label_expr)",
							"AliasAttr(alias_attr)",
							"AlignValueAttr(align_value_attr)",
							"AllocSizeAttr(alloc_size_attr)",
							"ArrayInitIndexExpr(array_init_index_expr)",
							"ArrayInitLoopExpr(array_init_loop_expr)",
							"AtomicExpr(atomic_expr)",
							"AtomicType(atomic_type)",
							"AutoType(auto_type)",
							"BuiltinTemplateDecl(builtin_template_decl)",
							"BuiltinType(builtin_type)",
							"CallbackAttr(callback_attr)",
							"ClassTemplateDecl(class_template_decl)",
							"ClassTemplatePartialSpecializationDecl(class_template_partial_specialization_decl)",
							"ClassTemplateSpecializationDecl(class_template_specialization_decl)",
							"ComplexType(complex_type)",
							"CompoundLiteralExpr(compound_literal_expr)",
							"ConstantArrayType(constant_array_type)",
							"ConstructorUsingShadowDecl(constructor_using_shadow_decl)",
							"ConvertVectorExpr(convert_vector_expr)",
							"DecayedType(decayed_type)",
							"DecltypeType(decltype_type)",
							"DependentNameType(dependent_name_type)",
							"DependentScopeDeclRefExpr(dependent_scope_decl_ref_expr)",
							"DependentSizedArrayType(dependent_sized_array_type)",
							"DependentTemplateSpecializationType(dependent_template_specialization_type)",
							"ElaboratedType(elaborated_type)",
							"EnumType(enum_type)",
							"ExprWithCleanups(expr_with_cleanups)",
							"FinalAttr(final_attr)",
							"FormatArgAttr(format_arg_attr)",
							"FriendDecl(friend_decl)",
							"FunctionNoProtoType(function_no_proto_type)",
							"FunctionProtoType(function_proto_type)",
							"FunctionTemplateDecl(function_template_decl)",
							"GCCAsmStmt(gcc_asm_stmt)",
							"GNUInlineAttr(gnu_inline_attr)",
							"GNUNullExpr(gnu_null_expr)",
							"ImplicitValueInitExpr(implicit_value_init_expr)",
							"IncompleteArrayType(incomplete_array_type)",
							"IndirectFieldDecl(indirect_field_decl)",
							"IndirectGotoStmt(indirect_goto_stmt)",
							"InjectedClassNameType(injected_class_name_type)",
							"LambdaExpr(lambda_expr)",
							"LinkageSpecDecl(linkage_spec_decl)",
							"LValueReferenceType(l_value_reference_type)",
							"MaterializeTemporaryExpr(materialize_temporary_expr)",
							"MaxFieldAlignmentAttr(max_field_alignment_attr)",
							"MayAliasAttr(may_alias_attr)",
							"MemberPointerType(member_pointer_type)",
							"MinVectorWidthAttr(min_vector_width_attr)",
							"ModeAttr(mode_attr)",
							"NamespaceDecl(namespace_decl)",
							"NoDebugAttr(no_debug_attr)",
							"NoInlineAttr(no_inline_attr)",
							"NonTypeTemplateParmDecl(non_type_template_parm_decl)",
							"OffsetOfExpr(offset_of_expr)",
							"OpaqueValueExpr(opaque_value_expr)",
							"OwnerAttr(owner_attr)",
							"PackedAttr(packed_attr)",
							"PackExpansionExpr(pack_expansion_expr)",
							"PackExpansionType(pack_expansion_type)",
							"ParenType(paren_type)",
							"PointerAttr(pointer_attr)",
							"PointerType(pointer_type)",
							"PredefinedExpr(predefined_expr)",
							"QualType(qual_type)",
							"RecordType(record_type)",
							"ReturnsNonNullAttr(returns_non_null_attr)",
							"RValueReferenceType(r_value_reference_type)",
							"SentinelAttr(sentinel_attr)",
							"ShuffleVectorExpr(shuffle_vector_expr)",
							"SizeOfPackExpr(size_of_pack_expr)",
							"StaticAssertDecl(static_assert_decl)",
							"StmtExpr(stmt_expr)",
							"SubstNonTypeTemplateParmExpr(subst_non_type_template_parm_expr)",
							"SubstTemplateTypeParmType(subst_template_type_parm_type)",
							"TargetAttr(target_attr)",
							"TemplateArgument(template_argument)",
							"TemplateSpecializationType(template_specialization_type)",
							"TemplateTemplateParmDecl(template_template_parm_decl)",
							"TemplateTypeParmDecl(template_type_parm_decl)",
							"TemplateTypeParmType(template_type_parm_type)",
							"TParamCommandComment(t_param_command_comment)",
							"TypeAliasDecl(type_alias_decl)",
							"TypeAliasTemplateDecl(type_alias_template_decl)",
							"TypedefType(typedef_type)",
							"TypeOfExprType(type_of_expr_type)",
							"TypeTraitExpr(type_trait_expr)",
							"UnaryTransformType(unary_transform_type)",
							"UnresolvedUsingValueDecl(unresolved_using_value_decl)",
							"UnusedAttr(unused_attr)",
							"UsingDecl(using_decl)",
							"UsingDirectiveDecl(using_directive_decl)",
							"UsingShadowDecl(using_shadow_decl)",
							"VAArgExpr(va_arg_expr)",
							"VarTemplateDecl(var_template_decl)",
							"VectorType(vector_type)",
							"VerbatimLineComment(verbatim_line_comment)",
							"VisibilityAttr(visibility_attr)",
							"WeakRefAttr(weak_ref_attr)",
							"CXXRecordDecl(cxx_record_decl)",
							"CXXConstructorDecl(cxx_constructor_decl)",
							"n =>",
							"CXXCtorInitializer(cxx_ctor_initializer)",
							"CXXDependentScopeMemberExpr(cxx_dependent_scope_member_expr)",
							"CXXThisExpr(cxx_this_expr)",
							"CXXDestructorDecl(cxx_destructor_decl)",
							"n =>",
							"CXXMethodDecl(cxx_method_decl)",
							"n =>",
							"CXXStaticCastExpr(cxx_static_cast_expr)",
							"CXXUnresolvedConstructExpr(cxx_unresolved_construct_expr)",
							"CXXNewExpr(cxx_new_expr)",
							"CXXDeleteExpr(cxx_delete_expr)",
							"CXXBoolLiteralExpr(cxx_bool_literal_expr)",
							"CXX11NoReturnAttr(cxx11_no_return_attr)",
							"CXXBindTemporaryExpr(cxx_bind_temporary_expr)",
							"CXXCatchStmt(cxx_catch_stmt)",
							"CXXConstructExpr(cxx_construct_expr)",
							"CXXConversionDecl(cxx_conversion_decl)",
							"CXXDefaultArgExpr(cxx_default_arg_expr)",
							"CXXDefaultInitExpr(cxx_default_init_expr)",
							"CXXForRangeStmt(cxx_for_range_stmt)",
							"CXXFunctionalCastExpr(cxx_functional_cast_expr)",
							"CXXMemberCallExpr(cxx_member_call_expr)",
							"CXXNoexceptExpr(cxx_noexcept_expr)",
							"CXXNullPtrLiteralExpr(cxx_null_ptr_literal_expr)",
							"CXXOperatorCallExpr(cxx_operator_call_expr)",
							"CXXReinterpretCastExpr(cxx_reinterpret_cast_expr)",
							"CXXScalarValueInitExpr(cxx_scalar_value_init_expr)",
							"CXXTemporaryObjectExpr(cxx_temporary_object_expr)",
							"CXXTryStmt(cxx_try_stmt)",
							" function PrintNode(node)",
							" function PrintAst(node, ast)",
							"get()",
							" function isNode(obj)",
							" function GetType(name_or_id, ast = globalThis['$']?.data)",
							"n =>",
							" node =>",
							" node =>",
							"r =>",
							" function GetClass(name_or_id, ast = globalThis['$'].data)",
							" n =>",
							"bases()",
							" function* GetBases(node, ast = globalThis['$'].data)",
							" function GetByName(arg, ast = globalThis['$'].data, ...args)",
							" function GetNamespace(arg, root = globalThis['$'].data, predicate = () => true)",
							" n =>",
							" function NamespaceOf(node, path, ast = globalThis['$'].data)",
							"toString()",
							" function GetFields(node)",
							" (v, k) =>",
							"([v, p]) =>",
							"([loc, ptr]) =>",
							"i =>",
							" function GetParams(node)",
							"child =>",
							" function PathRemoveLoc(path)",
							"p =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADBAgAAICBmaW5kTGFzdEluZGV4KHByZWRpY2F0ZSkKICB0YWlsKCkKICBzdGFydHNXaXRoKHN0YXJ0KQogIG1haW4oLi4uYXJncykKKGEsIHApID0+CihhLCBwKSA9PgogIGQgPT4KICB2ID0+CiAgcHJvY2Vzc0ZpbGVzKC4uLmZpbGVzKQpSZWFkQVNUKG91dGZpbGUsIGxvYWQgPSBmID0+IAooZiksIHNhdmUgPSBXcml0ZUZpbGUsIHBhcnNlID0gSlNPTi5wYXJzZSkKICBuYW1lID0+CiAgc3RhdCA9PgooKSA9PgphID0+CigpID0+CigpID0+CigpID0+CigpID0+CiAgZXJyID0+Cih2LCBwKSA9PgogIHRvU3RyaW5nKCkKICB0b1N0cmluZygpCnYgPT4KTGlzdE5vZGVzKHN5c2luYyA9IGZhbHNlKQpOb1N5c3RlbUluY2x1ZGVzID0gKFtwLCBuLCBsXSkgPT4KKFtwYXRoLCBkZWNsXSkgPT4KICBuYW1lcyA9IGRlY2xzID0+CihbcGF0aCwgZGVjbF0pID0+CiAgZGVjbGFyYXRpb25zID0gZGVjbHMgPT4KKFtwYXRoLCBkZWNsLCBsb2NdKSA9PgooW3AsIG5dKSA9PgooYSwgYikgPT4KKFtwLCBuXSkgPT4KKFtwXSkgPT4KKFtwXSkgPT4KICBwID0+CihbcCwgbl0pID0+CihbcCwgbl0pID0+CihhLCBiKSA9PgooW3AsIG5dKSA9PgooW3AsIG4sIGxdKSA9PgogIGsgPT4KKFtwYXRoLCBub2RlLCBpZCwgbmFtZSwgdHlwZSwga2luZF0pID0+CihmaWVsZCwgaSkgPT4KICB3cml0ZU91dHB1dChuYW1lLCBkYXRhKQpHZXRMaWJyYXJ5Rm9yKHN5bWJvbE5hbWUpAAAAAAAAAAA1LQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					26,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/mozdev.js",
						"symkeys":
						[
							[
								137,
								162
							],
							[
								660,
								664
							],
							[
								696,
								718
							],
							[
								739,
								750
							],
							[
								807,
								815
							],
							[
								861,
								885
							],
							[
								955,
								959
							],
							[
								1041,
								1052
							],
							[
								1128,
								1137
							],
							[
								1245,
								1259
							],
							[
								1332,
								1344
							],
							[
								1506,
								1514
							],
							[
								1834,
								1841
							],
							[
								1903,
								1912
							],
							[
								1980,
								1990
							],
							[
								2082,
								2098
							],
							[
								2179,
								2201
							],
							[
								2368,
								2378
							]
						],
						"symlist":
						[
							" function FetchClass(url)",
							"e =>",
							"simplifyList = list =>",
							"([a, b]) =>",
							"([a]) =>",
							"summaryList = summary =>",
							"e =>",
							"([name]) =>",
							"(a, e) =>",
							"makeURL = p =>",
							"getURL(name)",
							"entry =>",
							"*keys()",
							"*values()",
							"*entries()",
							"pred = (k, v) =>",
							"pred = (key, value) =>",
							"get name()"
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				],
				[
					27,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/clang-ast.js",
						"symkeys":
						[
							[
								848,
								861
							],
							[
								940,
								996
							],
							[
								1441,
								1500
							],
							[
								1979,
								2016
							],
							[
								2235,
								2267
							],
							[
								2369,
								2406
							],
							[
								2560,
								2587
							],
							[
								2669,
								2699
							],
							[
								2766,
								2774
							],
							[
								2813,
								2840
							],
							[
								2889,
								2916
							],
							[
								2993,
								2997
							],
							[
								3020,
								3053
							],
							[
								3233,
								3276
							],
							[
								3561,
								3569
							],
							[
								3961,
								3965
							],
							[
								3984,
								4004
							],
							[
								4155,
								4187
							],
							[
								4349,
								4367
							],
							[
								4620,
								4637
							],
							[
								4944,
								4955
							],
							[
								4975,
								4982
							],
							[
								5009,
								5018
							],
							[
								5138,
								5144
							],
							[
								5256,
								5264
							],
							[
								5379,
								5388
							],
							[
								5414,
								5423
							],
							[
								5454,
								5458
							],
							[
								5519,
								5523
							],
							[
								5599,
								5615
							],
							[
								5872,
								5887
							],
							[
								5954,
								5963
							],
							[
								6024,
								6032
							],
							[
								6081,
								6090
							],
							[
								6137,
								6147
							],
							[
								6200,
								6210
							],
							[
								6241,
								6251
							],
							[
								6339,
								6350
							],
							[
								6556,
								6560
							],
							[
								6741,
								6752
							],
							[
								6983,
								6987
							],
							[
								7039,
								7053
							],
							[
								7103,
								7153
							],
							[
								7223,
								7278
							],
							[
								7283,
								7317
							],
							[
								7496,
								7500
							],
							[
								7581,
								7596
							],
							[
								7684,
								7740
							],
							[
								7814,
								7824
							],
							[
								8028,
								8035
							],
							[
								8152,
								8163
							],
							[
								8200,
								8229
							],
							[
								8290,
								8321
							],
							[
								8523,
								8533
							],
							[
								8588,
								8601
							],
							[
								8638,
								8667
							],
							[
								8728,
								8759
							],
							[
								8963,
								8973
							],
							[
								9028,
								9032
							],
							[
								9130,
								9156
							],
							[
								12136,
								12140
							],
							[
								13155,
								13167
							],
							[
								13290,
								13298
							],
							[
								13384,
								13395
							],
							[
								13518,
								13531
							],
							[
								13654,
								13666
							],
							[
								13760,
								13769
							],
							[
								13821,
								13832
							],
							[
								13921,
								13930
							],
							[
								14050,
								14066
							],
							[
								14124,
								14140
							],
							[
								14188,
								14201
							],
							[
								14348,
								14363
							],
							[
								14510,
								14525
							],
							[
								14782,
								14796
							],
							[
								14882,
								14894
							],
							[
								14961,
								14973
							],
							[
								15079,
								15096
							],
							[
								15182,
								15193
							],
							[
								15253,
								15266
							],
							[
								15409,
								15417
							],
							[
								15525,
								15535
							],
							[
								15716,
								15725
							],
							[
								17531,
								17541
							],
							[
								19620,
								19626
							],
							[
								19912,
								19923
							],
							[
								20024,
								20074
							],
							[
								20160,
								20168
							],
							[
								20228,
								20236
							],
							[
								22043,
								22073
							],
							[
								22152,
								22162
							],
							[
								22180,
								22206
							],
							[
								22335,
								22343
							],
							[
								22426,
								22434
							],
							[
								22612,
								22617
							],
							[
								22655,
								22662
							],
							[
								22746,
								22760
							],
							[
								23353,
								23357
							],
							[
								23438,
								23443
							],
							[
								24977,
								24981
							],
							[
								25883,
								25897
							],
							[
								25961,
								25971
							],
							[
								26056,
								26078
							],
							[
								26300,
								26308
							],
							[
								26430,
								26449
							],
							[
								26547,
								26555
							],
							[
								26573,
								26595
							],
							[
								26716,
								26724
							],
							[
								26829,
								26855
							],
							[
								27210,
								27218
							],
							[
								27333,
								27344
							],
							[
								27362,
								27388
							],
							[
								27460,
								27464
							],
							[
								27569,
								27579
							],
							[
								27639,
								27643
							],
							[
								27706,
								27710
							],
							[
								27760,
								27764
							],
							[
								28174,
								28184
							],
							[
								28216,
								28224
							],
							[
								28321,
								28330
							],
							[
								28348,
								28370
							],
							[
								28588,
								28600
							],
							[
								28618,
								28644
							],
							[
								28879,
								28887
							],
							[
								28950,
								28958
							],
							[
								30025,
								30044
							],
							[
								30160,
								30170
							],
							[
								30225,
								30233
							],
							[
								30342,
								30349
							],
							[
								30367,
								30389
							],
							[
								30734,
								30742
							],
							[
								30839,
								30848
							],
							[
								30872,
								30894
							],
							[
								30999,
								31010
							],
							[
								31028,
								31050
							],
							[
								31427,
								31444
							],
							[
								31462,
								31484
							],
							[
								31740,
								31748
							],
							[
								31859,
								31864
							],
							[
								31912,
								31935
							],
							[
								32057,
								32068
							],
							[
								32117,
								32129
							],
							[
								32191,
								32200
							],
							[
								32247,
								32257
							],
							[
								32295,
								32331
							],
							[
								32986,
								32998
							],
							[
								33044,
								33053
							],
							[
								33100,
								33110
							],
							[
								33290,
								33295
							],
							[
								33351,
								33359
							],
							[
								33452,
								33475
							],
							[
								33734,
								33750
							],
							[
								33969,
								33985
							],
							[
								34396,
								34409
							],
							[
								34555,
								34565
							],
							[
								34613,
								34624
							],
							[
								34716,
								34728
							],
							[
								34778,
								34791
							],
							[
								34839,
								34851
							],
							[
								34901,
								34914
							],
							[
								35162,
								35175
							],
							[
								35210,
								35225
							],
							[
								35305,
								35360
							],
							[
								35904,
								35914
							],
							[
								36157,
								36177
							],
							[
								36260,
								36306
							],
							[
								37805,
								37870
							],
							[
								38180,
								38184
							],
							[
								38445,
								38449
							],
							[
								39174,
								39181
							],
							[
								39235,
								39242
							],
							[
								39326,
								39333
							],
							[
								39510,
								39545
							],
							[
								39584,
								39604
							],
							[
								39634,
								39640
							],
							[
								39661,
								39669
							],
							[
								39776,
								39809
							],
							[
								40074,
								40099
							],
							[
								40440,
								40482
							],
							[
								41014,
								41067
							],
							[
								42477,
								42483
							],
							[
								42533,
								42539
							],
							[
								42704,
								42710
							],
							[
								42852,
								42868
							],
							[
								43413,
								43420
							],
							[
								43463,
								43467
							],
							[
								43487,
								43494
							],
							[
								43615,
								43642
							],
							[
								43701,
								43716
							],
							[
								44021,
								44028
							],
							[
								44088,
								44102
							],
							[
								44147,
								44162
							],
							[
								44188,
								44192
							],
							[
								44224,
								44235
							],
							[
								44268,
								44280
							],
							[
								44314,
								44327
							],
							[
								44403,
								44408
							],
							[
								44488,
								44492
							],
							[
								44516,
								44528
							],
							[
								44591,
								44596
							],
							[
								44626,
								44630
							],
							[
								44654,
								44663
							],
							[
								44676,
								44692
							],
							[
								45034,
								45038
							],
							[
								45062,
								45073
							],
							[
								45132,
								45136
							],
							[
								45174,
								45178
							],
							[
								45210,
								45226
							],
							[
								45265,
								45269
							],
							[
								45287,
								45291
							],
							[
								45335,
								45387
							],
							[
								45575,
								45591
							],
							[
								45951,
								45972
							],
							[
								45998,
								46002
							],
							[
								46444,
								46449
							],
							[
								46484,
								46511
							],
							[
								46705,
								46733
							],
							[
								46914,
								46939
							],
							[
								47014,
								47046
							],
							[
								47177,
								47181
							],
							[
								47318,
								47347
							],
							[
								47457,
								47461
							],
							[
								47755,
								47777
							],
							[
								48816,
								48871
							],
							[
								48951,
								48958
							],
							[
								49024,
								49031
							],
							[
								49068,
								49094
							],
							[
								49188,
								49196
							],
							[
								49262,
								49270
							],
							[
								49332,
								49343
							],
							[
								49497,
								49506
							],
							[
								49525,
								49551
							],
							[
								49604,
								49613
							],
							[
								49666,
								49692
							],
							[
								49744,
								49763
							],
							[
								49839,
								49856
							],
							[
								49891,
								49915
							],
							[
								50174,
								50179
							],
							[
								50237,
								50244
							],
							[
								50326,
								50337
							],
							[
								51045,
								51055
							],
							[
								51103,
								51107
							],
							[
								51298,
								51309
							],
							[
								51320,
								51344
							],
							[
								51412,
								51444
							],
							[
								51600,
								51625
							],
							[
								51689,
								51725
							],
							[
								51795,
								51835
							],
							[
								52087,
								52115
							],
							[
								52162,
								52193
							],
							[
								52422,
								52464
							],
							[
								52667,
								52692
							],
							[
								52850,
								52871
							],
							[
								52916,
								52935
							],
							[
								53269,
								53296
							],
							[
								53364,
								53383
							],
							[
								53587,
								53622
							],
							[
								53740,
								53788
							],
							[
								54034,
								54061
							],
							[
								54679,
								54720
							],
							[
								54958,
								54985
							],
							[
								55128,
								55149
							],
							[
								55210,
								55237
							],
							[
								55282,
								55314
							],
							[
								55564,
								55590
							],
							[
								55784,
								55803
							],
							[
								56465,
								56490
							],
							[
								56538,
								56569
							],
							[
								56636,
								56651
							],
							[
								56846,
								56867
							],
							[
								56984,
								57020
							],
							[
								57240,
								57259
							],
							[
								57663,
								57684
							],
							[
								57901,
								57934
							],
							[
								57994,
								58017
							],
							[
								58080,
								58097
							],
							[
								58217,
								58221
							],
							[
								59048,
								59073
							],
							[
								59280,
								59307
							],
							[
								59772,
								59776
							],
							[
								59986,
								59990
							],
							[
								60189,
								60208
							],
							[
								60329,
								60334
							],
							[
								60672,
								60711
							],
							[
								60810,
								60853
							],
							[
								61063,
								61078
							],
							[
								61344,
								61380
							],
							[
								61476,
								61504
							],
							[
								61774,
								61818
							],
							[
								61880,
								61911
							],
							[
								61970,
								61991
							],
							[
								62050,
								62073
							],
							[
								62496,
								62522
							],
							[
								62590,
								62616
							],
							[
								62680,
								62699
							],
							[
								62741,
								62776
							],
							[
								62950,
								62992
							],
							[
								63177,
								63198
							],
							[
								63374,
								63404
							],
							[
								63624,
								63650
							],
							[
								64079,
								64098
							],
							[
								64159,
								64182
							],
							[
								64717,
								64744
							],
							[
								64794,
								64817
							],
							[
								64974,
								65010
							],
							[
								65080,
								65109
							],
							[
								65167,
								65190
							],
							[
								65368,
								65393
							],
							[
								65477,
								65519
							],
							[
								65618,
								65643
							],
							[
								65947,
								66002
							],
							[
								66244,
								66273
							],
							[
								66524,
								66568
							],
							[
								66700,
								66744
							],
							[
								66831,
								66859
							],
							[
								67003,
								67027
							],
							[
								67275,
								67319
							],
							[
								67641,
								67694
							],
							[
								67793,
								67838
							],
							[
								67913,
								67932
							],
							[
								67993,
								68014
							],
							[
								68191,
								68218
							],
							[
								68267,
								68297
							],
							[
								68309,
								68330
							],
							[
								68342,
								68374
							],
							[
								68516,
								68546
							],
							[
								68558,
								68599
							],
							[
								68611,
								68650
							],
							[
								68662,
								68685
							],
							[
								68697,
								68720
							],
							[
								68732,
								68751
							],
							[
								68763,
								68805
							],
							[
								68817,
								68842
							],
							[
								68854,
								68881
							],
							[
								68893,
								68931
							],
							[
								68943,
								69025
							],
							[
								69037,
								69104
							],
							[
								69116,
								69141
							],
							[
								69153,
								69195
							],
							[
								69380,
								69418
							],
							[
								69430,
								69487
							],
							[
								69499,
								69537
							],
							[
								69549,
								69574
							],
							[
								69586,
								69613
							],
							[
								69625,
								69663
							],
							[
								69675,
								69731
							],
							[
								69825,
								69876
							],
							[
								69888,
								69963
							],
							[
								69975,
								70006
							],
							[
								70018,
								70037
							],
							[
								70049,
								70085
							],
							[
								70181,
								70202
							],
							[
								70214,
								70244
							],
							[
								70256,
								70279
							],
							[
								70291,
								70334
							],
							[
								70346,
								70384
							],
							[
								70396,
								70440
							],
							[
								70452,
								70476
							],
							[
								70593,
								70623
							],
							[
								70635,
								70661
							],
							[
								70705,
								70752
							],
							[
								70764,
								70806
							],
							[
								70818,
								70856
							],
							[
								70868,
								70904
							],
							[
								70916,
								70963
							],
							[
								70975,
								70998
							],
							[
								71010,
								71044
							],
							[
								71252,
								71295
							],
							[
								71307,
								71359
							],
							[
								71463,
								71510
							],
							[
								71522,
								71550
							],
							[
								71562,
								71600
							],
							[
								71612,
								71653
							],
							[
								71665,
								71684
							],
							[
								71696,
								71725
							],
							[
								71737,
								71763
							],
							[
								71775,
								71803
							],
							[
								71815,
								71867
							],
							[
								71879,
								71907
							],
							[
								71919,
								71953
							],
							[
								72085,
								72106
							],
							[
								72118,
								72141
							],
							[
								72153,
								72191
							],
							[
								72203,
								72241
							],
							[
								72253,
								72274
							],
							[
								72286,
								72311
							],
							[
								72323,
								72348
							],
							[
								72360,
								72391
							],
							[
								72478,
								72497
							],
							[
								72509,
								72532
							],
							[
								72544,
								72585
							],
							[
								72597,
								72640
							],
							[
								72652,
								72679
							],
							[
								72691,
								72729
							],
							[
								72741,
								72774
							],
							[
								72786,
								72822
							],
							[
								72834,
								72853
							],
							[
								72919,
								72982
							],
							[
								72994,
								73050
							],
							[
								73062,
								73085
							],
							[
								73097,
								73132
							],
							[
								73144,
								73200
							],
							[
								73212,
								73265
							],
							[
								73277,
								73322
							],
							[
								73334,
								73379
							],
							[
								73391,
								73436
							],
							[
								73448,
								73478
							],
							[
								73490,
								73537
							],
							[
								73549,
								73574
							],
							[
								73586,
								73619
							],
							[
								73631,
								73661
							],
							[
								73673,
								73713
							],
							[
								73725,
								73778
							],
							[
								73790,
								73813
							],
							[
								73825,
								73846
							],
							[
								73858,
								73898
							],
							[
								73910,
								73944
							],
							[
								73956,
								73978
							],
							[
								73990,
								74024
							],
							[
								74036,
								74059
							],
							[
								74071,
								74113
							],
							[
								74125,
								74156
							],
							[
								74168,
								74194
							],
							[
								74207,
								74237
							],
							[
								74811,
								74851
							],
							[
								75061,
								75065
							],
							[
								76206,
								76246
							],
							[
								76629,
								76689
							],
							[
								77125,
								77151
							],
							[
								77259,
								77297
							],
							[
								77493,
								77497
							],
							[
								77784,
								77814
							],
							[
								78273,
								78277
							],
							[
								78929,
								78968
							],
							[
								79632,
								79689
							],
							[
								80010,
								80034
							],
							[
								80507,
								80537
							],
							[
								80801,
								80842
							],
							[
								80977,
								81016
							],
							[
								81028,
								81073
							],
							[
								81085,
								81113
							],
							[
								81125,
								81161
							],
							[
								81305,
								81343
							],
							[
								81355,
								81394
							],
							[
								81406,
								81447
							],
							[
								81459,
								81494
							],
							[
								81506,
								81553
							],
							[
								81565,
								81604
							],
							[
								81617,
								81651
							],
							[
								81663,
								81711
							],
							[
								81723,
								81766
							],
							[
								81778,
								81827
							],
							[
								81839,
								81889
							],
							[
								81901,
								81950
							],
							[
								82204,
								82228
							],
							[
								82285,
								82310
							],
							[
								82689,
								82718
							],
							[
								82911,
								82916
							],
							[
								83191,
								83212
							],
							[
								83279,
								83337
							],
							[
								83483,
								83487
							],
							[
								84072,
								84080
							],
							[
								84132,
								84140
							],
							[
								84252,
								84256
							],
							[
								84509,
								84567
							],
							[
								84669,
								84674
							],
							[
								85023,
								85030
							],
							[
								85219,
								85272
							],
							[
								85509,
								85570
							],
							[
								85880,
								85960
							],
							[
								86081,
								86086
							],
							[
								86424,
								86485
							],
							[
								86827,
								86837
							],
							[
								86903,
								86928
							],
							[
								86966,
								86976
							],
							[
								87041,
								87052
							],
							[
								87126,
								87141
							],
							[
								87180,
								87184
							],
							[
								87264,
								87289
							],
							[
								87328,
								87336
							],
							[
								87378,
								87407
							],
							[
								87437,
								87441
							]
						],
						"symlist":
						[
							" (ast, r) =>",
							" function DeepFind(ast, pred, flags = deep.RETURN_VALUE)",
							" function* DeepSelect(ast, pred, flags = deep.RETURN_VALUE)",
							" function DeepCachePath(ast, path, m)",
							" function DeepPathOf(ast, value)",
							" function DeepGet(ast, path, ...args)",
							"function FileTime(filename)",
							"function Newer(file, ...other)",
							"other =>",
							"function Older(file, other)",
							"function GetSubscripts(str)",
							"m =>",
							"function TrimSubscripts(str, sub)",
							" function nameOrIdPred(name_or_id, ...args)",
							" node =>",
							"List",
							"constructor(...args)",
							"filter(callback, thisArg = null)",
							"callback = elem =>",
							"slice(start, end)",
							"get first()",
							"elem =>",
							"entries()",
							"keys()",
							"values()",
							"toArray()",
							"(a, n) =>",
							"List",
							"Node",
							"constructor(ast)",
							"static get(ast)",
							"get ast()",
							"get id()",
							"get loc()",
							"get file()",
							" (v, k) =>",
							" (v, k) =>",
							"get range()",
							"r =>",
							"toJSON(obj)",
							"Node",
							"(node, ast) =>",
							" function PathOf(node, ast = globalThis['$'].data)",
							" function* Hier(node_or_path, t = (p, ast, abort) => p.",
							"(ast), ast = globalThis['$'].data)",
							"p =>",
							"abortFn = () =>",
							" function FindType(typeName, ast = globalThis['$'].data)",
							"([tok]) =>",
							"node =>",
							"PointerType",
							"constructor(pointee, ast, ns)",
							"static fromString(str, ast, ns)",
							"toString()",
							"ReferenceType",
							"constructor(pointee, ast, ns)",
							"static fromString(str, ast, ns)",
							"toString()",
							"Type",
							"constructor(node, ast, ns)",
							"n =>",
							"get regExp()",
							"isEnum()",
							"isPointer()",
							"isReference()",
							"isFunction()",
							"isArray()",
							"isInteger()",
							"arrayOf()",
							"get subscripts()",
							"trimSubscripts()",
							"get pointer()",
							"get reference()",
							"getPointer(ast)",
							"get unsigned()",
							"get signed()",
							"isCompound()",
							"isFloatingPoint()",
							"get alias()",
							"get aliases()",
							"isEnum()",
							"isString()",
							"get ffi()",
							"get size()",
							"toJS()",
							"toJSON(obj)",
							"static get(name_or_id, ast = globalThis['$'].data)",
							" node =>",
							" node =>",
							"function RoundTo(value, align)",
							"RecordDecl",
							"constructor(node, ast, ns)",
							"child =>",
							"child =>",
							"() =>",
							"node =>",
							"(acc, node) =>",
							"i =>",
							" n =>",
							"n =>",
							"([name, t]) =>",
							"get size()",
							"(acc, [name, type]) =>",
							"toJSON()",
							"([name, member]) =>",
							"EnumDecl",
							"constructor(node, ast)",
							"child =>",
							"({ name, type, inner }) =>",
							"toJSON()",
							"TypedefDecl",
							"constructor(node, ast, ns)",
							"n =>",
							" (v, k) =>",
							"n =>",
							"n =>",
							"n =>",
							"get size()",
							"toJSON()",
							"FieldDecl",
							"constructor(node, ast)",
							"FunctionDecl",
							"constructor(node, ast, ns)",
							"child =>",
							"child =>",
							"({ name, type }) =>",
							"isMethod()",
							"toJSON()",
							"VarDecl",
							"constructor(node, ast)",
							"toJSON()",
							"ClassDecl",
							"constructor(node, ast)",
							"BuiltinType",
							"constructor(node, ast)",
							"ConstantArrayType",
							"constructor(node, ast)",
							"toJSON()",
							"Range",
							"constructor(begin, end)",
							"get begin()",
							"set begin(v)",
							"get end()",
							"set end(v)",
							"toString(opts = { printFile: true })",
							"get length()",
							"toArray()",
							"toObject()",
							"Range",
							"Location",
							"static at(file, offset)",
							"static from(loc)",
							"constructor(loc)",
							"update(other)",
							"get line()",
							"set line(v)",
							"get column()",
							"set column(v)",
							"get offset()",
							"set offset(v)",
							" (t, ...c) =>",
							"'\\x1b[m' : t =>",
							"toString(opts = { printFile: true, onlyOffset: false })",
							"toObject()",
							"localeCompare(other)",
							" function TypeFactory(node, ast, cache = true)",
							"async function SpawnCompiler(compiler, input, outfile, args = [])",
							"p =>",
							"p =>",
							"line =>",
							"line =>",
							"line =>",
							" function PipeReader(fd, callback)",
							"(resolve, reject) =>",
							" () =>",
							" data =>",
							" function ReadPipe(fd, callback)",
							" function ReadOutput(fd)",
							"async function SourceDependencies(...args)",
							"async function AstDump(compiler, source, args, force)",
							"size()",
							"json()",
							"data()",
							"SetFile = loc =>",
							"files()",
							"n =>",
							"file =>",
							"pred2 = (used, implicit) =>",
							" node =>",
							"types()",
							" n =>",
							" () =>",
							"List",
							"functions()",
							" n =>",
							" () =>",
							" n =>",
							"List",
							"namespaces()",
							" n =>",
							"List",
							"classes()",
							"predicate = n =>",
							"List",
							"variables()",
							"n =>",
							"List",
							"names(depth = 1)",
							"n =>",
							"n =>",
							" function NameFor(decl, ast = globalThis['$']?.data)",
							" (value, key) =>",
							" function NodeType(n)",
							"t =>",
							" n =>",
							" function NodeName(n, name)",
							" function* RawLocation(path)",
							" function* RawRange(path)",
							" function CompleteLocation(path)",
							"l =>",
							" function CompleteRange(path)",
							"l =>",
							" function GetLoc(node)",
							" function GetTypeNode(node, ast = globalThis['$'].data)",
							"node =>",
							"node =>",
							" function GetTypeStr(node)",
							"inner =>",
							"inner =>",
							"([n, t]) =>",
							"NodeError",
							"constructor(message, node)",
							"NodeError",
							" function NodePrinter(ast)",
							" function put(str)",
							" function trim()",
							"printer = function(node)",
							"get()",
							"value()",
							"value(node)",
							"toString()",
							"i =>",
							"NodePrinter",
							"AbiTagAttr(abi_tag_attr)",
							"AccessSpecDecl(access_spec_decl)",
							"AlignedAttr(aligned_attr)",
							"AlwaysInlineAttr(always_inline_attr)",
							"ArraySubscriptExpr(array_subscript_expr)",
							"AsmLabelAttr(asm_label_attr)",
							"BinaryOperator(binary_operator)",
							"BlockCommandComment(block_command_comment)",
							"BuiltinAttr(builtin_attr)",
							"BreakStmt(break_stmt)",
							"CallExpr(call_expr)",
							"RecoveryExpr(recovery_expr)",
							"CaseStmt(case_stmt)",
							"CharacterLiteral(character_literal)",
							"CompoundAssignOperator(compound_assign_operator)",
							"CompoundStmt(compound_stmt)",
							"ConditionalOperator(conditional_operator)",
							"ConstantExpr(constant_expr)",
							"ConstAttr(const_attr)",
							"ContinueStmt(continue_stmt)",
							"CStyleCastExpr(cstyle_cast_expr)",
							"DeclRefExpr(decl_ref_expr)",
							"DeclStmt(decl_stmt)",
							"DefaultStmt(default_stmt)",
							"DeprecatedAttr(deprecated_attr)",
							"DoStmt(do_stmt)",
							"EmptyDecl(empty_decl)",
							"EnumConstantDecl(enum_constant_decl)",
							"EnumDecl(enum_decl)",
							"FieldDecl(field_decl)",
							"FloatingLiteral(floating_literal)",
							"FormatAttr(format_attr)",
							"ForStmt(for_stmt)",
							"n =>",
							"FullComment(full_comment)",
							"FunctionDecl(function_decl)",
							"n =>",
							"n =>",
							"GotoStmt(goto_stmt)",
							" n =>",
							"HTMLEndTagComment(html_end_tag_comment)",
							"HTMLStartTagComment(html_start_tag_comment)",
							"IfStmt(if_stmt)",
							"ImplicitCastExpr(implicit_cast_expr)",
							"InitListExpr(init_list_expr)",
							"InlineCommandComment(inline_command_comment)",
							"IntegerLiteral(integer_literal)",
							"LabelStmt(label_stmt)",
							"MemberExpr(member_expr)",
							"NonNullAttr(non_null_attr)",
							"NoThrowAttr(no_throw_attr)",
							"NullStmt(null_stmt)",
							"ParagraphComment(paragraph_comment)",
							"ParamCommandComment(param_command_comment)",
							"ParenExpr(paren_expr)",
							"ParenListExpr(paren_list_expr)",
							"ParmVarDecl(parm_var_decl)",
							"PureAttr(pure_attr)",
							"RecordDecl(record_decl)",
							"RestrictAttr(restrict_attr)",
							"ReturnStmt(return_stmt)",
							"ReturnsTwiceAttr(returns_twice_attr)",
							"StringLiteral(string_literal)",
							"SwitchStmt(switch_stmt)",
							"TextComment(text_comment)",
							"TranslationUnitDecl(translation_unit_decl)",
							"TypedefDecl(typedef_decl)",
							"UnaryExprOrTypeTraitExpr(unary_expr_or_type_trait_expr)",
							"UnaryOperator(unary_operator)",
							"UnresolvedLookupExpr(unresolved_lookup_expr)",
							"UnresolvedMemberExpr(unresolved_member_expr)",
							"VarDecl(var_decl, base_type)",
							"([offset, subscript]) =>",
							"VerbatimBlockComment(verbatim_block_comment)",
							"VerbatimBlockLineComment(verbatim_block_line_comment)",
							"WarnUnusedResultAttr(warn_unused_result_attr)",
							"WeakAttr(weak_attr)",
							"WhileStmt(while_stmt)",
							"OverrideAttr(override_attr)",
							"AddrLabelExpr(addr_label_expr)",
							"AliasAttr(alias_attr)",
							"AlignValueAttr(align_value_attr)",
							"AllocSizeAttr(alloc_size_attr)",
							"ArrayInitIndexExpr(array_init_index_expr)",
							"ArrayInitLoopExpr(array_init_loop_expr)",
							"AtomicExpr(atomic_expr)",
							"AtomicType(atomic_type)",
							"AutoType(auto_type)",
							"BuiltinTemplateDecl(builtin_template_decl)",
							"BuiltinType(builtin_type)",
							"CallbackAttr(callback_attr)",
							"ClassTemplateDecl(class_template_decl)",
							"ClassTemplatePartialSpecializationDecl(class_template_partial_specialization_decl)",
							"ClassTemplateSpecializationDecl(class_template_specialization_decl)",
							"ComplexType(complex_type)",
							"CompoundLiteralExpr(compound_literal_expr)",
							"ConstantArrayType(constant_array_type)",
							"ConstructorUsingShadowDecl(constructor_using_shadow_decl)",
							"ConvertVectorExpr(convert_vector_expr)",
							"DecayedType(decayed_type)",
							"DecltypeType(decltype_type)",
							"DependentNameType(dependent_name_type)",
							"DependentScopeDeclRefExpr(dependent_scope_decl_ref_expr)",
							"DependentSizedArrayType(dependent_sized_array_type)",
							"DependentTemplateSpecializationType(dependent_template_specialization_type)",
							"ElaboratedType(elaborated_type)",
							"EnumType(enum_type)",
							"ExprWithCleanups(expr_with_cleanups)",
							"FinalAttr(final_attr)",
							"FormatArgAttr(format_arg_attr)",
							"FriendDecl(friend_decl)",
							"FunctionNoProtoType(function_no_proto_type)",
							"FunctionProtoType(function_proto_type)",
							"FunctionTemplateDecl(function_template_decl)",
							"GCCAsmStmt(gcc_asm_stmt)",
							"GNUInlineAttr(gnu_inline_attr)",
							"GNUNullExpr(gnu_null_expr)",
							"ImplicitValueInitExpr(implicit_value_init_expr)",
							"IncompleteArrayType(incomplete_array_type)",
							"IndirectFieldDecl(indirect_field_decl)",
							"IndirectGotoStmt(indirect_goto_stmt)",
							"InjectedClassNameType(injected_class_name_type)",
							"LambdaExpr(lambda_expr)",
							"LinkageSpecDecl(linkage_spec_decl)",
							"LValueReferenceType(l_value_reference_type)",
							"MaterializeTemporaryExpr(materialize_temporary_expr)",
							"MaxFieldAlignmentAttr(max_field_alignment_attr)",
							"MayAliasAttr(may_alias_attr)",
							"MemberPointerType(member_pointer_type)",
							"MinVectorWidthAttr(min_vector_width_attr)",
							"ModeAttr(mode_attr)",
							"NamespaceDecl(namespace_decl)",
							"NoDebugAttr(no_debug_attr)",
							"NoInlineAttr(no_inline_attr)",
							"NonTypeTemplateParmDecl(non_type_template_parm_decl)",
							"OffsetOfExpr(offset_of_expr)",
							"OpaqueValueExpr(opaque_value_expr)",
							"OwnerAttr(owner_attr)",
							"PackedAttr(packed_attr)",
							"PackExpansionExpr(pack_expansion_expr)",
							"PackExpansionType(pack_expansion_type)",
							"ParenType(paren_type)",
							"PointerAttr(pointer_attr)",
							"PointerType(pointer_type)",
							"PredefinedExpr(predefined_expr)",
							"QualType(qual_type)",
							"RecordType(record_type)",
							"ReturnsNonNullAttr(returns_non_null_attr)",
							"RValueReferenceType(r_value_reference_type)",
							"SentinelAttr(sentinel_attr)",
							"ShuffleVectorExpr(shuffle_vector_expr)",
							"SizeOfPackExpr(size_of_pack_expr)",
							"StaticAssertDecl(static_assert_decl)",
							"StmtExpr(stmt_expr)",
							"SubstNonTypeTemplateParmExpr(subst_non_type_template_parm_expr)",
							"SubstTemplateTypeParmType(subst_template_type_parm_type)",
							"TargetAttr(target_attr)",
							"TemplateArgument(template_argument)",
							"TemplateSpecializationType(template_specialization_type)",
							"TemplateTemplateParmDecl(template_template_parm_decl)",
							"TemplateTypeParmDecl(template_type_parm_decl)",
							"TemplateTypeParmType(template_type_parm_type)",
							"TParamCommandComment(t_param_command_comment)",
							"TypeAliasDecl(type_alias_decl)",
							"TypeAliasTemplateDecl(type_alias_template_decl)",
							"TypedefType(typedef_type)",
							"TypeOfExprType(type_of_expr_type)",
							"TypeTraitExpr(type_trait_expr)",
							"UnaryTransformType(unary_transform_type)",
							"UnresolvedUsingValueDecl(unresolved_using_value_decl)",
							"UnusedAttr(unused_attr)",
							"UsingDecl(using_decl)",
							"UsingDirectiveDecl(using_directive_decl)",
							"UsingShadowDecl(using_shadow_decl)",
							"VAArgExpr(va_arg_expr)",
							"VarTemplateDecl(var_template_decl)",
							"VectorType(vector_type)",
							"VerbatimLineComment(verbatim_line_comment)",
							"VisibilityAttr(visibility_attr)",
							"WeakRefAttr(weak_ref_attr)",
							"CXXRecordDecl(cxx_record_decl)",
							"CXXConstructorDecl(cxx_constructor_decl)",
							"n =>",
							"CXXCtorInitializer(cxx_ctor_initializer)",
							"CXXDependentScopeMemberExpr(cxx_dependent_scope_member_expr)",
							"CXXThisExpr(cxx_this_expr)",
							"CXXDestructorDecl(cxx_destructor_decl)",
							"n =>",
							"CXXMethodDecl(cxx_method_decl)",
							"n =>",
							"CXXStaticCastExpr(cxx_static_cast_expr)",
							"CXXUnresolvedConstructExpr(cxx_unresolved_construct_expr)",
							"CXXNewExpr(cxx_new_expr)",
							"CXXDeleteExpr(cxx_delete_expr)",
							"CXXBoolLiteralExpr(cxx_bool_literal_expr)",
							"CXX11NoReturnAttr(cxx11_no_return_attr)",
							"CXXBindTemporaryExpr(cxx_bind_temporary_expr)",
							"CXXCatchStmt(cxx_catch_stmt)",
							"CXXConstructExpr(cxx_construct_expr)",
							"CXXConversionDecl(cxx_conversion_decl)",
							"CXXDefaultArgExpr(cxx_default_arg_expr)",
							"CXXDefaultInitExpr(cxx_default_init_expr)",
							"CXXForRangeStmt(cxx_for_range_stmt)",
							"CXXFunctionalCastExpr(cxx_functional_cast_expr)",
							"CXXMemberCallExpr(cxx_member_call_expr)",
							"CXXNoexceptExpr(cxx_noexcept_expr)",
							"CXXNullPtrLiteralExpr(cxx_null_ptr_literal_expr)",
							"CXXOperatorCallExpr(cxx_operator_call_expr)",
							"CXXReinterpretCastExpr(cxx_reinterpret_cast_expr)",
							"CXXScalarValueInitExpr(cxx_scalar_value_init_expr)",
							"CXXTemporaryObjectExpr(cxx_temporary_object_expr)",
							"CXXTryStmt(cxx_try_stmt)",
							" function PrintNode(node)",
							" function PrintAst(node, ast)",
							"get()",
							" function isNode(obj)",
							" function GetType(name_or_id, ast = globalThis['$']?.data)",
							"n =>",
							" node =>",
							" node =>",
							"r =>",
							" function GetClass(name_or_id, ast = globalThis['$'].data)",
							" n =>",
							"bases()",
							" function* GetBases(node, ast = globalThis['$'].data)",
							" function GetByName(arg, ast = globalThis['$'].data, ...args)",
							" function GetNamespace(arg, root = globalThis['$'].data, predicate = () => true)",
							" n =>",
							" function NamespaceOf(node, path, ast = globalThis['$'].data)",
							"toString()",
							" function GetFields(node)",
							" (v, k) =>",
							"([v, p]) =>",
							"([loc, ptr]) =>",
							"i =>",
							" function GetParams(node)",
							"child =>",
							" function PathRemoveLoc(path)",
							"p =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD9AAAARmV0Y2hDbGFzcyh1cmwpCiAgZSA9PgogIHNpbXBsaWZ5TGlzdCA9IGxpc3QgPT4KKFthLCBiXSkgPT4KKFthXSkgPT4KICBzdW1tYXJ5TGlzdCA9IHN1bW1hcnkgPT4KICBlID0+CihbbmFtZV0pID0+CihhLCBlKSA9PgogIG1ha2VVUkwgPSBwID0+CiAgZ2V0VVJMKG5hbWUpCiAgZW50cnkgPT4KKmtleXMoKQoqdmFsdWVzKCkKKmVudHJpZXMoKQogIHByZWQgPSAoaywgdikgPT4KICBwcmVkID0gKGtleSwgdmFsdWUpID0+CiAgZ2V0IG5hbWUoKQAAAAAAAAAANS0AAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					28,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				],
				[
					29,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/mozdev.js",
						"symkeys":
						[
							[
								137,
								162
							],
							[
								660,
								664
							],
							[
								696,
								718
							],
							[
								739,
								750
							],
							[
								807,
								815
							],
							[
								861,
								885
							],
							[
								955,
								959
							],
							[
								1041,
								1052
							],
							[
								1128,
								1137
							],
							[
								1245,
								1259
							],
							[
								1332,
								1344
							],
							[
								1506,
								1514
							],
							[
								1834,
								1841
							],
							[
								1903,
								1912
							],
							[
								1980,
								1990
							],
							[
								2082,
								2098
							],
							[
								2179,
								2201
							],
							[
								2368,
								2378
							]
						],
						"symlist":
						[
							" function FetchClass(url)",
							"e =>",
							"simplifyList = list =>",
							"([a, b]) =>",
							"([a]) =>",
							"summaryList = summary =>",
							"e =>",
							"([name]) =>",
							"(a, e) =>",
							"makeURL = p =>",
							"getURL(name)",
							"entry =>",
							"*keys()",
							"*values()",
							"*entries()",
							"pred = (k, v) =>",
							"pred = (key, value) =>",
							"get name()"
						]
					},
					"AQAAAAAAAAAAAAAA/QAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "clang-ast.js",
			"settings":
			{
				"buffer_size": 87558,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					10,
					1,
					"cut",
					null,
					"AQAAAHIEAAAAAAAAcgQAAAAAAAAVAAAAIHwgZGVlcC5UWVBFX0ZVTkNUSU9O",
					"AQAAAAAAAAABAAAAcgQAAAAAAACHBAAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAHIEAAAAAAAAcwQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcgQAAAAAAAByBAAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHMEAAAAAAAAdAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcwQAAAAAAABzBAAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAHQEAAAAAAAAdgQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdAQAAAAAAAB0BAAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAHUEAAAAAAAAdwQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdQQAAAAAAAB1BAAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "children"
					},
					"CAAAAHYEAAAAAAAAdwQAAAAAAAAAAAAAdwQAAAAAAAB4BAAAAAAAAAAAAAB4BAAAAAAAAHkEAAAAAAAAAAAAAHkEAAAAAAAAegQAAAAAAAAAAAAAegQAAAAAAAB7BAAAAAAAAAAAAAB7BAAAAAAAAHwEAAAAAAAAAAAAAHwEAAAAAAAAfQQAAAAAAAAAAAAAfQQAAAAAAAB+BAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdgQAAAAAAAB2BAAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					8,
					"left_delete",
					null,
					"CAAAAH0EAAAAAAAAfQQAAAAAAAABAAAAbnwEAAAAAAAAfAQAAAAAAAABAAAAZXsEAAAAAAAAewQAAAAAAAABAAAAcnoEAAAAAAAAegQAAAAAAAABAAAAZHkEAAAAAAAAeQQAAAAAAAABAAAAbHgEAAAAAAAAeAQAAAAAAAABAAAAaXcEAAAAAAAAdwQAAAAAAAABAAAAaHYEAAAAAAAAdgQAAAAAAAABAAAAYw",
					"AQAAAAAAAAABAAAAfgQAAAAAAAB+BAAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": "iner"
					},
					"BAAAAHYEAAAAAAAAdwQAAAAAAAAAAAAAdwQAAAAAAAB4BAAAAAAAAAAAAAB4BAAAAAAAAHkEAAAAAAAAAAAAAHkEAAAAAAAAegQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdgQAAAAAAAB2BAAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					2,
					"left_delete",
					null,
					"AgAAAHkEAAAAAAAAeQQAAAAAAAABAAAAcngEAAAAAAAAeAQAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAegQAAAAAAAB6BAAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": "ner"
					},
					"AwAAAHgEAAAAAAAAeQQAAAAAAAAAAAAAeQQAAAAAAAB6BAAAAAAAAAAAAAB6BAAAAAAAAHsEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeAQAAAAAAAB4BAAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"left_delete",
					null,
					"AQAAAJAGAAAAAAAAkAYAAAAAAAAUAAAAfCBkZWVwLlRZUEVfRlVOQ1RJT04",
					"AQAAAAAAAAABAAAApAYAAAAAAACQBgAAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAJAGAAAAAAAAkQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkAYAAAAAAACQBgAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJEGAAAAAAAAkgYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkQYAAAAAAACRBgAAAAAAAAAAAAAAAPC/"
				],
				[
					59,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAJIGAAAAAAAAlAYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkgYAAAAAAACSBgAAAAAAAAAAAAAAAPC/"
				],
				[
					60,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAJMGAAAAAAAAlQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkwYAAAAAAACTBgAAAAAAAAAAAAAAAPC/"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": "chilsd"
					},
					"BgAAAJQGAAAAAAAAlQYAAAAAAAAAAAAAlQYAAAAAAACWBgAAAAAAAAAAAACWBgAAAAAAAJcGAAAAAAAAAAAAAJcGAAAAAAAAmAYAAAAAAAAAAAAAmAYAAAAAAACZBgAAAAAAAAAAAACZBgAAAAAAAJoGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlAYAAAAAAACUBgAAAAAAAAAAAAAAAPC/"
				],
				[
					62,
					2,
					"left_delete",
					null,
					"AgAAAJkGAAAAAAAAmQYAAAAAAAABAAAAZJgGAAAAAAAAmAYAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAmgYAAAAAAACaBgAAAAAAAAAAAAAAAPC/"
				],
				[
					63,
					1,
					"insert",
					{
						"characters": "dre"
					},
					"AwAAAJgGAAAAAAAAmQYAAAAAAAAAAAAAmQYAAAAAAACaBgAAAAAAAAAAAACaBgAAAAAAAJsGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmAYAAAAAAACYBgAAAAAAAAAAAAAAAPC/"
				],
				[
					64,
					7,
					"left_delete",
					null,
					"BwAAAJoGAAAAAAAAmgYAAAAAAAABAAAAZZkGAAAAAAAAmQYAAAAAAAABAAAAcpgGAAAAAAAAmAYAAAAAAAABAAAAZJcGAAAAAAAAlwYAAAAAAAABAAAAbJYGAAAAAAAAlgYAAAAAAAABAAAAaZUGAAAAAAAAlQYAAAAAAAABAAAAaJQGAAAAAAAAlAYAAAAAAAABAAAAYw",
					"AQAAAAAAAAABAAAAmwYAAAAAAACbBgAAAAAAAAAAAAAAAPC/"
				],
				[
					65,
					2,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"BAAAAJMGAAAAAAAAkwYAAAAAAAABAAAAJ5MGAAAAAAAAkwYAAAAAAAABAAAAJ5IGAAAAAAAAkgYAAAAAAAABAAAAW5IGAAAAAAAAkgYAAAAAAAABAAAAXQ",
					"AQAAAAAAAAABAAAAlAYAAAAAAACUBgAAAAAAAAAAAAAAAPC/"
				],
				[
					66,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAJIGAAAAAAAAlAYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkgYAAAAAAACSBgAAAAAAAAAAAAAAAPC/"
				],
				[
					67,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAJMGAAAAAAAAlQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkwYAAAAAAACTBgAAAAAAAAAAAAAAAPC/"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": "inner"
					},
					"BQAAAJQGAAAAAAAAlQYAAAAAAAAAAAAAlQYAAAAAAACWBgAAAAAAAAAAAACWBgAAAAAAAJcGAAAAAAAAAAAAAJcGAAAAAAAAmAYAAAAAAAAAAAAAmAYAAAAAAACZBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlAYAAAAAAACUBgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "mozdev.js",
			"settings":
			{
				"buffer_size": 2495,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "clang-list.js",
			"settings":
			{
				"buffer_size": 8043,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"doxy",
				"DoxyDoxygen: Comment All"
			],
			[
				"",
				":$ - EOF"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"format",
				"JsPrettier: Format Code"
			],
			[
				"prett",
				"JsPrettier: Format Code"
			],
			[
				"ou",
				"Browse Mode: Outline (Right)"
			],
			[
				"instga",
				"Package Control: Install Package"
			],
			[
				"prettier",
				"JsPrettier: Format Code"
			],
			[
				"json",
				"Pretty JSON: Minify JSON"
			],
			[
				"jspr",
				"JsPrettier: Format Code"
			],
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"color",
				"Color Highlight: Reset"
			],
			[
				"scheme",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"edit cu",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"install pac",
				"Package Control: Install Package"
			],
			[
				"list pack",
				"Package Control: List Packages"
			],
			[
				"edit ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"edit",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"outli",
				"Browse Mode: Outline (Right)"
			],
			[
				"debugger",
				"Preferences: Debugger Settings"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"INSTALL",
				"Package Control: Install Package"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"adap",
				"Debugger: Install Adapters"
			],
			[
				"install ada",
				"Debugger: Install Adapters"
			],
			[
				"adapter",
				"Debugger: Install Adapters"
			],
			[
				"debug",
				"Debugger: Install Adapters"
			],
			[
				"Package Control: remove",
				"Package Control: Remove Package"
			],
			[
				"debu",
				"Debugger: Install Adapters"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 289.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/mozdev.js",
		"/home/roman/Projects/plot-cv/ast-shell.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/io-helpers.js",
		"/home/roman/Projects/plot-cv/lib/net/webSocketStream.js",
		"/home/roman/Projects/plot-cv/lib/container/weakStackFrame.js",
		"/home/roman/Projects/plot-cv/lib/compileCommand.js",
		"/home/roman/Projects/plot-cv/compile_commands.js",
		"/home/roman/Projects/plot-cv/clang-ast.js",
		"/home/roman/Projects/plot-cv/clang-list.js",
		"/home/roman/Projects/plot-cv/quickjs2/cmake/functions.cmake",
		"/home/roman/Projects/plot-cv/soundcloud-tracks.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/console.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fs.js",
		"/home/roman/Projects/plot-cv/lib/deep.js",
		"/home/roman/Projects/plot-cv/os-helpers.js",
		"/home/janos/Projects/plot-cv/out.gz",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-context-vhost.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/test.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lws-context.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/events.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/web-platform-tests-streams/shared-storage/resources/util.sub.js",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-repeater.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/property-enumeration.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/buffer-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/qjsm.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/io.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/js-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/stream-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/queue.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-mysql.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-blob.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/async-closure.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/misc.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/xpath.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/xml.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-textcode.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/ringbuffer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/inotify.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/extendObject.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/ringbuffer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/js-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/streams.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake/functions.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/defines.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/async-closure.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/buffer-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fsPromises.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-syscallerror.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-syscallerror.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/web-platform-tests-streams/editing/crashtests/make-editable-div-inline-and-set-contenteditable-of-input-to-false.html",
		"/home/roman/Projects/plot-cv/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/process.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-magic.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_repeater.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-child-process.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/virtual-properties.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/child-process.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-predicate.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-pointer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-pgsql.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-path.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-mmap.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-location.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-list.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-internal.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-gpio.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/list-exports.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-serial.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-tree-walker.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-directory.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-deep.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/char-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-bjson.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-blob.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-queue.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-xml.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/path.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-archive.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/vector.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/predicate.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/inet_pton.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/path.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/xml-shell.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/testharnessreport.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/web-platform-tests-streams/streams/readable-streams/async-iterator.any.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_streams.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_stream.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/testharness.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/strverscmp.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/queue.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/mmap-win32.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/memmem.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/location.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/inet_ntop.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/getdents.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/debug.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/clock_gettime.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_sockets.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_pgsql.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_childprocess.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-llvm/usr/local/lib/quickjs/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-release/usr/local/lib/quickjs/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-clang/usr/local/lib/quickjs/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/parser/ebnf.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/lexer/bnf.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_inotify.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_deep.js"
	],
	"find":
	{
		"height": 44.0
	},
	"find_in_files":
	{
		"height": 138.0,
		"where_history":
		[
			"/home/roman/Projects/plot-cv,*.js,*.cmake,CMakeLists.txt,-*/inst/*",
			"/home/roman/Projects/plot-cv,*.js,-*/inst/*",
			"/home/roman/Projects/plot-cv,*.js",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"deep\\.",
			"try_run",
			"run\\b",
			"GetClass",
			"ast2np",
			"NamespaceOf",
			"GetClass",
			"DeepSelect",
			"nameOrIdPred",
			"GetByName",
			"nameOrIdPred",
			"DeepFind",
			"members",
			"\\bmembers\\b",
			"get members",
			"getType",
			"\\bimport\\b[^\\n]*\\bTree(Iterator|Walker)\\b[^\\n]*\\bfrom\\b",
			"\\bTree(Iterator|Walker)\\b.*\\bfrom\\b",
			"Tree(Iterator|Walker)",
			"isMap",
			"}\n",
			"WriteJS",
			"ReadJSON",
			"WriteJS",
			"ReadJSON",
			"class Location",
			"Location",
			"Location\\b",
			"TYPE_BIG_INT",
			"fs\\.",
			"fs'",
			"Symbol.for",
			"Newer",
			"remove",
			"fs\\.",
			"Writing",
			"base =",
			"unithist",
			"'FunctionDecl",
			"No such",
			"'Type.cons",
			"GetClass",
			"getClass",
			"nameOrIdPred",
			"Deep(Find|Select)\\(",
			"Deep(Find|Select).*name ==",
			"DeepFind.*name ==",
			"DeepFind",
			"decl\\(",
			"\n        ",
			"EnumDecl",
			"class EnumDecl",
			"EnumDecl",
			"ions.get",
			"ions.set",
			"GetClass",
			"getClass",
			"'Type.cons",
			"completeDef",
			"MakeId",
			"cid =",
			"GetByName",
			"GetClass",
			"getClass",
			"GetByName",
			"GetBasese",
			"GetByName",
			"Object.assign",
			"mapFunction\\b",
			"function Get",
			"NameFor",
			"DeepPathOf",
			"deep.pathOf",
			"NamespaceOf",
			"function NamespaceOf",
			"node2path",
			"deep\\.",
			"deep\\.get",
			"deep\\..get",
			"deep\\.",
			"deep\\.get",
			"deep.get",
			"deep\\.",
			"deep\\.select",
			"deep\\.",
			"deep\\.pathOf",
			"deep.pathOf",
			"export const ([\\w]+) = (\\(?)(.*[^)])(\\)?) => {",
			"export const ([\\w]+) = (\\(?)(.*)(\\)?) => {",
			"export const ([\\w]+) = (\\(?)(.*)(\\)?) => {\n",
			"pathOf",
			"deep\\.",
			"deep\\.find",
			"\n      ",
			"deep\\.find",
			"DeepFind",
			"DeepFind.*RETURN_",
			"deep\\.find",
			"deep.find",
			"DeepFind",
			"deep.find",
			"DeepFind.*RETURN",
			"DeepFind",
			"deep\\.find",
			"\\= \\$\\.data",
			"class Type\\b",
			"RecordDecl",
			"new RecordDecl",
			"= \\$\\.data",
			"NamespaceOf",
			"new RecordDecl",
			"NameFor",
			"class RecordDecl",
			"NameFor",
			"RecordDecl",
			"NamespaceOf",
			"class FunctionDecl",
			"new FunctionDecl",
			"GetClass",
			"class Type\\b",
			"'Access'",
			"storageClass",
			"new Type\\b",
			"WeakMap",
			"'CXX",
			"class FieldDecl",
			"class PointerType",
			"FieldDecl"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"DeepGet",
			"DeepPathOf",
			"export function \\1(\\3) {",
			"DeepFind",
			"= globalThis['\\$'].data",
			"= globalThis['$'].data",
			"namespaceOf"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 253,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": "/home/roman/Projects/plot-cv/mozdev.js",
							"function_name_status_row": 0,
							"outline_rename_mode": false,
							"symkeys":
							[
								[
									137,
									162
								],
								[
									660,
									664
								],
								[
									696,
									718
								],
								[
									739,
									750
								],
								[
									807,
									815
								],
								[
									861,
									885
								],
								[
									955,
									959
								],
								[
									1041,
									1052
								],
								[
									1128,
									1137
								],
								[
									1245,
									1259
								],
								[
									1332,
									1344
								],
								[
									1506,
									1514
								],
								[
									1834,
									1841
								],
								[
									1903,
									1912
								],
								[
									1980,
									1990
								],
								[
									2082,
									2098
								],
								[
									2179,
									2201
								],
								[
									2368,
									2378
								]
							],
							"symlist":
							[
								"FetchClass(url)",
								"  e =>",
								"  simplifyList = list =>",
								"([a, b]) =>",
								"([a]) =>",
								"  summaryList = summary =>",
								"  e =>",
								"([name]) =>",
								"(a, e) =>",
								"  makeURL = p =>",
								"  getURL(name)",
								"  entry =>",
								"*keys()",
								"*values()",
								"*entries()",
								"  pred = (k, v) =>",
								"  pred = (key, value) =>",
								"  get name()"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1747920899.14,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "clang-ast.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 87558,
						"regions":
						{
						},
						"selection":
						[
							[
								1526,
								1526
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 44,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1747925586.78,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 690.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "mozdev.js",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2495,
						"regions":
						{
						},
						"selection":
						[
							[
								432,
								432
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 12,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1748049279.58,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "clang-list.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8043,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1747925584.66,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 33.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.764828128058,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.coffeecompile_output":
	{
		"height": 150.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "plot-cv.sublime-project",
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"mozdev",
				"mozdev.js"
			],
			[
				"clang-list",
				"clang-list.js"
			],
			[
				"clang-ast",
				"clang-ast.js"
			],
			[
				"",
				"compile_commands.js"
			],
			[
				"compileCommand",
				"lib/compileCommand.js"
			],
			[
				"command",
				"compile_commands.js"
			],
			[
				"lib/util.js",
				"quickjs/qjs-modules/lib/util.js"
			],
			[
				"io-he",
				"io-helpers.js"
			],
			[
				"clang-as",
				"clang-ast.js"
			],
			[
				"util.js",
				"quickjs/qjs-modules/lib/util.js"
			],
			[
				"console.js",
				"quickjs/qjs-modules/lib/console.js"
			],
			[
				"fs.js",
				"quickjs/qjs-modules/lib/fs.js"
			],
			[
				"deep.js",
				"lib/deep.js"
			],
			[
				"lib/deep",
				"lib/deep.js"
			],
			[
				"ast-shel",
				"ast-shell.js"
			],
			[
				"os-help",
				"os-helpers.js"
			],
			[
				"ast-she",
				"ast-shell.js"
			],
			[
				"clang-",
				"clang-list.js"
			],
			[
				"sound",
				"soundcloud-tracks.js"
			],
			[
				"out",
				"out.gz"
			],
			[
				"lws-context-v",
				"libwebsockets/include/libwebsockets/lws-context-vhost.h"
			],
			[
				"buffer-ut",
				"src/buffer-utils.c"
			],
			[
				"repl",
				"lib/repl.js"
			],
			[
				"utils.c",
				"src/utils.c"
			],
			[
				"qjsm.c",
				"src/qjsm.c"
			],
			[
				"utils.h",
				"include/utils.h"
			],
			[
				"quickjs-inspec",
				"quickjs-inspect.c"
			],
			[
				"io.js",
				"lib/io.js"
			],
			[
				"repl.js",
				"lib/repl.js"
			],
			[
				"util.sj",
				"web-platform-tests-streams/shared-storage/resources/util.sub.js"
			],
			[
				"quickjs.c",
				"~/Projects/plot-cv/quickjs/quickjs.c"
			],
			[
				"quickjs.h",
				"~/Projects/plot-cv/quickjs/quickjs.h"
			],
			[
				"js-utils.c",
				"src/js-utils.c"
			],
			[
				"quickjs-strea",
				"quickjs-stream.h"
			],
			[
				"quickjs-st",
				"quickjs-stream.c"
			],
			[
				"quickjs-stream.h",
				"quickjs-stream.h"
			],
			[
				"quickjs-ins",
				"quickjs-inspect.c"
			],
			[
				"ringbuffer.c",
				"src/ringbuffer.c"
			],
			[
				"ringbuf",
				"include/ringbuffer.h"
			],
			[
				"ringbuffer.h",
				"include/ringbuffer.h"
			],
			[
				"textcode.c",
				"quickjs-textcode.c"
			],
			[
				"quickjs-text",
				"quickjs-textcode.c"
			],
			[
				"stream.c",
				"quickjs-stream.c"
			],
			[
				"quickjs-stre",
				"quickjs-stream.c"
			],
			[
				"textcode",
				"quickjs-textcode.c"
			],
			[
				"quickjs-misc",
				"quickjs-misc.c"
			],
			[
				"function",
				"cmake/functions.cmake"
			],
			[
				"CMakeLIsts",
				"CMakeLists.txt"
			],
			[
				"quickjs-mis",
				"quickjs-misc.c"
			],
			[
				"fsProm",
				"lib/fsPromises.js"
			],
			[
				"CMake",
				"CMakeLists.txt"
			],
			[
				"cmakeli",
				"CMakeLists.txt"
			],
			[
				"cmakelists",
				"CMakeLists.txt"
			],
			[
				"CMakeLists",
				"CMakeLists.txt"
			],
			[
				"cmakelsits",
				"web-platform-tests-streams/editing/crashtests/make-editable-div-inline-and-set-contenteditable-of-input-to-false.html"
			],
			[
				"cmakeLists",
				"CMakeLists.txt"
			],
			[
				"js-util",
				"src/js-utils.c"
			],
			[
				"js-ut",
				"include/js-utils.h"
			],
			[
				"buffer-",
				"include/buffer-utils.h"
			],
			[
				"js-utils",
				"include/js-utils.h"
			],
			[
				"quickjs-sys",
				"quickjs-syscallerror.c"
			],
			[
				"js-u",
				"include/js-utils.h"
			],
			[
				"quickjs-socket",
				"quickjs-sockets.c"
			],
			[
				"async-cl",
				"src/async-closure.c"
			],
			[
				"utilsc",
				"src/utils.c"
			],
			[
				"quickjs-sock",
				"quickjs-sockets.h"
			],
			[
				"child",
				"src/child-process.c"
			],
			[
				"quickjs-child",
				"quickjs-child-process.c"
			],
			[
				"cmake",
				"CMakeLists.txt"
			],
			[
				"process.js",
				"lib/process.js"
			],
			[
				"quickjs-repea",
				"quickjs-repeater.c"
			],
			[
				"quickjs-repe",
				"quickjs-repeater.c"
			],
			[
				"quickjs-repeater",
				"quickjs-repeater.c"
			],
			[
				"test_repe",
				"tests/test_repeater.js"
			],
			[
				"quickjs-mysq",
				"quickjs-mysql.c"
			],
			[
				"quickjs-ser",
				"quickjs-serial.c"
			],
			[
				"quickjs-stream",
				"quickjs-stream.h"
			],
			[
				"quickjs-lex",
				"quickjs-lexer.c"
			],
			[
				"quickjs-list",
				"quickjs-list.c"
			],
			[
				"quickjs-list.c",
				"quickjs-list.c"
			],
			[
				"testhar",
				"lib/testharness.js"
			],
			[
				"qjsm",
				"src/qjsm.c"
			],
			[
				"test_repea",
				"tests/test_repeater.js"
			],
			[
				"test_socket",
				"tests/test_sockets.js"
			],
			[
				"test_sock",
				"tests/test_sockets.js"
			],
			[
				"textcod",
				"quickjs-textcode.c"
			],
			[
				"test_text",
				"tests/test_textcode.js"
			],
			[
				"stack.js",
				"lib/stack.js"
			],
			[
				"ebnf",
				"lib/parser/ebnf.js"
			],
			[
				"arser.",
				"lib/parser.js"
			],
			[
				"bnf.",
				"lib/lexer/bnf.js"
			],
			[
				"quickjs-my",
				"quickjs-mysql.c"
			],
			[
				"quickjs-blob",
				"quickjs-blob.c"
			],
			[
				"quickjs-bl",
				"quickjs-blob.c"
			],
			[
				"queue.c",
				"src/queue.c"
			],
			[
				"queue.h",
				"include/queue.h"
			],
			[
				"mysql",
				"tests/test_mysql.js"
			],
			[
				"child-",
				"src/child-process.c"
			],
			[
				"quickjs-chil",
				"quickjs-child-process.c"
			],
			[
				"xpath",
				"lib/xpath.js"
			],
			[
				"xpath.js",
				"lib/xpath.js"
			],
			[
				"pointer",
				"lib/pointer.js"
			],
			[
				"predicate.c",
				"src/predicate.c"
			],
			[
				"quickjs-pre",
				"quickjs-predicate.c"
			],
			[
				"dom.js",
				"lib/dom.js"
			],
			[
				"misc.js",
				"lib/misc.js"
			],
			[
				"char-ut",
				"include/char-utils.h"
			],
			[
				"quickjs-in",
				"quickjs-inspect.c"
			],
			[
				"css3",
				"lib/css3-selectors.js"
			],
			[
				"inspect.c",
				"quickjs-inspect.c"
			],
			[
				"quickjs-lexe",
				"quickjs-lexer.c"
			],
			[
				"test_lexer",
				"tests/test_lexer.js"
			],
			[
				"resolve-im",
				"resolve-imports.js"
			],
			[
				"pointer.js",
				"lib/pointer.js"
			],
			[
				"extendArra",
				"lib/extendArray.js"
			],
			[
				"list-ex",
				"list-exports.js"
			],
			[
				"xml-shell",
				"xml-shell.js"
			],
			[
				"cmake/",
				"cmake/QuickJSModule.cmake"
			],
			[
				"quickjs-arc",
				"quickjs-archive.c"
			],
			[
				"cmakelist",
				"CMakeLists.txt"
			],
			[
				"vfs",
				"lib/vfs.js"
			],
			[
				"quickjs-que",
				"quickjs-queue.c"
			],
			[
				"archive.h",
				"libarchive/libarchive/archive.h"
			],
			[
				"sz",
				"/tmp/sz.js"
			],
			[
				"archive_en",
				"libarchive/libarchive/archive_entry.h"
			],
			[
				"quickjs-ar",
				"quickjs-archive.c"
			],
			[
				"archive_write_open_fil",
				"libarchive/libarchive/archive_write_open_filename.c"
			],
			[
				"vfs.j",
				"lib/vfs.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/plot-cv.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 309.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"WS"
			]
		],
		"width": 1059.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 253.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
