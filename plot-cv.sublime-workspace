{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"contents": "  add = (arr, ...items) =>\nParser\ntokens =>\n  tok =>\ntokens =>\n  tok =>\n  constructor(sourceText, fileName, debug)\n(c, s, e) =>\nkey =>\nfunction(...args)\n  .callback = (...args) =>\n  error(errorMessage, astNode)\n  handleComment(comment, start, end)\n() =>\nfunction(ctor, args, instance)\n  onNewNode(node)\n  onReturnNode(node, stackEntry, stack)\n  get()\n  addCommentsToNodes(root)\nn =>\n  tokensForNode(root)\nn =>\n(a, b) =>\n  range =>\n  next()\n  lookahead(offset = 0)\n  consume()\n  state()\nfunction()\n  printtoks()\n  log()\n  a =>\n  st =>\n  position(tok = null)\n  addNode(ctor, ...args)\n  getFn(name)\n  isLiteral({ type })\n  isTemplateLiteral({ type })\n  backTrace()\n  line =>\nParser\n  e =>\n  e =>\n  toStr(a)\n  stackFunc = (name, fn) =>\nECMAScriptParser\n  expectIdentifier(no_keyword = false)\n  expectKeywords(keywords)\n  expectPunctuators(punctuators, ast)\n  expectLiteral()\n  parseTemplateLiteral()\n  matchKeywords(keywords)\n  matchPunctuators(punctuators)\n  matchIdentifier(no_keyword = false)\n  matchLiteral()\n  matchTemplateLiteral()\n  matchStatement()\n  matchPrimaryExpression()\n  matchUnaryExpression()\n  matchAssignmentExpression()\n  matchFunctionExpression()\n  matchMemberExpression()\n  matchLeftHandSideExpression()\n  parsePrimaryExpression()\n  parseArguments()\n  checkRestOf = parser =>\n  parseRemainingMemberExpression(object)\n  parseArrowFunction(args, is_= false)\n  arg =>\n  parseRemainingCallExpression(object, is_= false)\n  parseNewOrCallOrMemberExpression(couldBeNewExpression, couldBeCallExpression)\n  parseLeftHandSideExpression()\n  parsePostfixExpression()\n  parseUnaryExpression()\n  parseBinaryExpression(minPrecedence)\n  parseConditionalExpression()\n  parseAssignmentExpression()\n  parseExpression(optional, sequence = true)\n  parseBindingPattern()\n  parseVariableDeclaration()\n  parseVariableDeclarationList(kind = 'var', exported = false)\n  parseBlock(insideIteration, insideFunction, ctor = BlockStatement)\n  parseList(insideIteration = false, insideFunction = false, check = p => false)\n  parseObject(isClass = false, args = [])\n  memberCtor = (id, value, _, kind) =>\n  memberCtor = (id, value, element) =>\n  memberCtor = (id, value, _, kind) =>\n([key, value]) =>\nBindingProperty(property, id, initializer)\n  parseArray()\n  parseJSXTag()\n([name, value]) =>\n  parseJSX(depth = 0)\n  parseVariableStatement(exported = false)\n  parseImportDeclaration(toplevel = false)\n  parseImportSpecifier(default_specifier = false)\n  parseModuleItems(method = 'parseImportSpecifier')\n  parseExportSpecifier()\n  parseExportDeclaration()\n  parseDecoratorStatement()\n  parseExpressionStatement()\n  parseIfStatement(insideIteration, insideFunction)\n  parseWhileStatement(insideFunction)\n  parseDoWhileStatement(insideFunction)\n  parseForStatement(insideFunction)\n  parseIterationStatement(insideFunction)\n  parseSwitchStatement(insideFunction)\np =>\n  parseTryStatement(insideIteration, insideFunction)\n  parseWithStatement(insideIteration, insideFunction)\n  parseThrowStatement()\n  parseYieldStatement()\n  parseContinueStatement()\n  parseBreakStatement()\n  parseReturnStatement()\n  parseStatement(insideIteration, insideFunction, exported)\n  parseClass(exported = false)\n  parseParameters()\n  checkRestOf = (parser, match) =>\n  parseFunction(exported = false, isAsync = false)\n  parseFunctionParametersAndBody(identifier, isAsync = false, isGenerator = false)\n  parseSourceElement()\n  parseProgram()\nECMAScriptParser\n  quoteArray = arr =>\n  quoteList = (l, delim = ' ') =>\n  t =>\n  quoteToks = l =>\n  t =>\n  quoteObj = i =>\n  quoteArg = a =>\n  i =>\n  quoteStr = s =>\nParser.prototype.trace = function()\nframe =>\nParser.prototype.onToken = function(tok)\n  instrumentate = (methodName, fn = methods[methodName]) =>\n  esfactory = function(...args)\nn =>\n  t =>\n  instrumentateParser()\nECMAScriptParser\n  name =>\n(acc, methodName) =>\nECMAScriptParser\n  timeout = ms =>\n(resolve, reject) =>\n() =>\nParser.parse = function parse(sourceText, prefix)",
			"settings":
			{
				"buffer_size": 3940,
				"line_ending": "Unix",
				"name": "𝌆 Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					13,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/components/wire.js",
						"symkeys":
						[
							[
								250,
								267
							],
							[
								311,
								359
							],
							[
								388,
								406
							],
							[
								630,
								635
							]
						],
						"symlist":
						[
							"RoundToMil = n =>",
							"Wire = ({ data, opts = {}, color, ...props }) =>",
							"async function* ()",
							" i =>"
						]
					},
					"AQAAAAAAAAAAAAAASgAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					14,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/components/grid.js",
						"symkeys":
						[
							[
								331,
								348
							],
							[
								400,
								427
							],
							[
								940,
								1032
							],
							[
								1545,
								1550
							],
							[
								1582,
								1603
							],
							[
								1714,
								1727
							],
							[
								1775,
								1793
							],
							[
								2452,
								2530
							]
						],
						"symlist":
						[
							"useGrid = data =>",
							"calcDist = (value, unit) =>",
							"Pattern = ({ data, id = 'pattern', attrs = { color: '#0000aa', width: 0.01 }, ...props }) =>",
							"() =>",
							"ret = function(value)",
							"get current()",
							"set current(value)",
							"Grid = ({ data, rect, id, attrs = { visible: true }, opts = {}, ...props }) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABKAAAAUm91bmRUb01pbCA9IG4gPT4KV2lyZSA9ICh7IGRhdGEsIG9wdHMgPSB7fSwgY29sb3IsIC4uLnByb3BzIH0pID0+CigpCmkgPT4AAAAAAAAAACABAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					15,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/an-tronics/eagle/RX-FM-Radio-1.5V-dip.brd",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAgAQAAICB1c2VHcmlkID0gZGF0YSA9PgogIGNhbGNEaXN0ID0gKHZhbHVlLCB1bml0KSA9PgpQYXR0ZXJuID0gKHsgZGF0YSwgaWQgPSAncGF0dGVybicsIGF0dHJzID0geyBjb2xvcjogJyMwMDAwYWEnLCB3aWR0aDogMC4wMSB9LCAuLi5wcm9wcyB9KSA9PgooKSA9PgogIHJldCA9IGZ1bmN0aW9uKHZhbHVlKQogIGdldCBjdXJyZW50KCkKICBzZXQgY3VycmVudCh2YWx1ZSkKR3JpZCA9ICh7IGRhdGEsIHJlY3QsIGlkLCBhdHRycyA9IHsgdmlzaWJsZTogdHJ1ZSB9LCBvcHRzID0ge30sIC4uLnByb3BzIH0pID0+AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					16,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/schematicRenderer.js",
						"symkeys":
						[
							[
								400,
								417
							],
							[
								565,
								577
							],
							[
								601,
								626
							],
							[
								776,
								818
							],
							[
								950,
								957
							],
							[
								1116,
								1123
							],
							[
								1386,
								1424
							],
							[
								1629,
								1634
							],
							[
								1850,
								1879
							],
							[
								4231,
								4253
							],
							[
								4565,
								4591
							],
							[
								5112,
								5119
							],
							[
								5258,
								5313
							],
							[
								5507,
								5511
							]
						],
						"symlist":
						[
							"SchematicRenderer",
							"(r, g, b) =>",
							"constructor(doc, factory)",
							"renderCollection(collection, parent, opts)",
							"item =>",
							"item =>",
							"renderItem(item, parent, options = {})",
							" i =>",
							"svg = (elem, attr, parent) =>",
							"renderNet(net, parent)",
							"renderSheet(sheet, parent)",
							"data =>",
							"render(doc = this.doc, parent, props = {}, sheetNo = 0)",
							"Rect"
						]
					},
					"AQAAAAAAAAAAAAAASAEAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					17,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/an-tronics/eagle/RX-FM-Radio-1.5V-dip.brd",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABIAQAAU2NoZW1hdGljUmVuZGVyZXIKKHIsIGcsIGIpID0+CiAgY29uc3RydWN0b3IoZG9jLCBmYWN0b3J5KQogIHJlbmRlckNvbGxlY3Rpb24oY29sbGVjdGlvbiwgcGFyZW50LCBvcHRzKQogIGl0ZW0gPT4KICBpdGVtID0+CiAgcmVuZGVySXRlbShpdGVtLCBwYXJlbnQsIG9wdGlvbnMgPSB7fSkKaSA9PgogIHN2ZyA9IChlbGVtLCBhdHRyLCBwYXJlbnQpID0+CiAgcmVuZGVyTmV0KG5ldCwgcGFyZW50KQogIHJlbmRlclNoZWV0KHNoZWV0LCBwYXJlbnQpCiAgZGF0YSA9PgogIHJlbmRlcihkb2MgPSB0aGlzLmRvYywgcGFyZW50LCBwcm9wcyA9IHt9LCBzaGVldE5vID0gMCkKUmVjdAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					18,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/components/wire.js",
						"symkeys":
						[
							[
								250,
								267
							],
							[
								311,
								359
							],
							[
								388,
								406
							],
							[
								630,
								635
							]
						],
						"symlist":
						[
							"RoundToMil = n =>",
							"Wire = ({ data, opts = {}, color, ...props }) =>",
							"async function* ()",
							" i =>"
						]
					},
					"AQAAAAAAAAAAAAAASgAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					19,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/geom/line.js",
						"symkeys":
						[
							[
								155,
								178
							],
							[
								345,
								351
							],
							[
								586,
								590
							],
							[
								640,
								644
							],
							[
								683,
								687
							],
							[
								1117,
								1121
							],
							[
								1303,
								1309
							],
							[
								1364,
								1368
							],
							[
								1902,
								1909
							],
							[
								1998,
								2013
							],
							[
								2063,
								2070
							],
							[
								2117,
								2124
							],
							[
								2326,
								2368
							],
							[
								2776,
								2780
							],
							[
								2801,
								2806
							],
							[
								2856,
								2866
							],
							[
								3022,
								3026
							],
							[
								3047,
								3052
							],
							[
								3102,
								3112
							],
							[
								3269,
								3273
							],
							[
								3292,
								3297
							],
							[
								3326,
								3332
							],
							[
								3402,
								3406
							],
							[
								3425,
								3430
							],
							[
								3459,
								3465
							],
							[
								4383,
								4420
							],
							[
								4436,
								4441
							],
							[
								4492,
								4497
							],
							[
								4518,
								4522
							],
							[
								4564,
								4601
							],
							[
								4686,
								4690
							],
							[
								4721,
								4725
							],
							[
								4750,
								4786
							],
							[
								4866,
								4870
							],
							[
								4895,
								4900
							],
							[
								4971,
								5009
							],
							[
								5022,
								5026
							],
							[
								5165,
								5203
							],
							[
								5216,
								5220
							],
							[
								5359,
								5399
							],
							[
								5411,
								5415
							],
							[
								5459,
								5497
							],
							[
								5509,
								5513
							],
							[
								5558,
								5592
							],
							[
								5669,
								5706
							],
							[
								5736,
								5740
							],
							[
								5781,
								5785
							],
							[
								6104,
								6141
							],
							[
								6179,
								6183
							],
							[
								6250,
								6259
							],
							[
								6369,
								6373
							],
							[
								6440,
								6449
							],
							[
								6576,
								6609
							],
							[
								6621,
								6626
							],
							[
								6648,
								6652
							],
							[
								6689,
								6726
							],
							[
								6900,
								6905
							],
							[
								6940,
								6985
							],
							[
								7058,
								7103
							],
							[
								7167,
								7190
							],
							[
								7198,
								7202
							],
							[
								7252,
								7257
							],
							[
								7299,
								7304
							],
							[
								7346,
								7351
							],
							[
								7393,
								7398
							],
							[
								7447,
								7498
							],
							[
								7537,
								7542
							],
							[
								7603,
								7608
							],
							[
								7763,
								7768
							],
							[
								7864,
								7908
							],
							[
								7930,
								7934
							],
							[
								8010,
								8014
							],
							[
								8042,
								8046
							],
							[
								8093,
								8097
							],
							[
								8122,
								8127
							],
							[
								8227,
								8231
							],
							[
								8254,
								8259
							],
							[
								8338,
								8376
							],
							[
								8532,
								8570
							],
							[
								8650,
								8654
							],
							[
								8713,
								8769
							],
							[
								8870,
								8904
							],
							[
								8953,
								8998
							],
							[
								9125,
								9130
							],
							[
								9143,
								9148
							],
							[
								9479,
								9515
							],
							[
								9608,
								9643
							],
							[
								9830,
								9880
							],
							[
								10045,
								10078
							],
							[
								10278,
								10342
							],
							[
								10597,
								10639
							],
							[
								10770,
								10808
							],
							[
								10849,
								10853
							],
							[
								10889,
								10927
							],
							[
								11233,
								11272
							],
							[
								11313,
								11317
							],
							[
								11353,
								11391
							],
							[
								11697,
								11736
							],
							[
								11777,
								11781
							],
							[
								11817,
								11855
							],
							[
								12058,
								12097
							],
							[
								12138,
								12142
							],
							[
								12178,
								12216
							],
							[
								12419,
								12455
							],
							[
								12500,
								12537
							],
							[
								12582,
								12623
							],
							[
								12635,
								12640
							],
							[
								12681,
								12686
							],
							[
								12728,
								12769
							],
							[
								12975,
								13015
							],
							[
								13073,
								13078
							],
							[
								13151,
								13195
							],
							[
								13253,
								13258
							],
							[
								13331,
								13364
							],
							[
								13498,
								13532
							],
							[
								13705,
								13756
							],
							[
								13848,
								13852
							],
							[
								13881,
								13892
							],
							[
								14153,
								14172
							],
							[
								14173,
								14177
							],
							[
								14253,
								14260
							],
							[
								14326,
								14333
							],
							[
								14383,
								14401
							],
							[
								14642,
								14668
							],
							[
								14740,
								14755
							],
							[
								14959,
								14963
							],
							[
								15014,
								15025
							],
							[
								15142,
								15148
							]
						],
						"symlist":
						[
							" function Line(...args)",
							"arg =>",
							"Line",
							"Line",
							"Line",
							"a =>",
							"arg =>",
							"a =>",
							"prop =>",
							"isLine = obj =>",
							"prop =>",
							"prop =>",
							"Line.prototype.intersect = function(other)",
							"Line",
							"get()",
							"set(value)",
							"Line",
							"get()",
							"set(value)",
							"Line",
							"get()",
							"set(v)",
							"Line",
							"get()",
							"set(v)",
							"Line.prototype.direction = function()",
							"Point",
							"Point",
							"Line",
							"Line.prototype.getVector = function()",
							"Line",
							"Line",
							"Line.prototype.getSlope = function()",
							"Line",
							"get()",
							"Line.prototype.yIntercept = function()",
							"Line",
							"Line.prototype.xIntercept = function()",
							"Line",
							"Line.prototype.isHorizontal = function()",
							"Line",
							"Line.prototype.isVertical = function()",
							"Line",
							"Line.prototype.isNull = function()",
							"Line.prototype.equations = function()",
							"Line",
							"Line",
							"Line.prototype.functions = function()",
							"Line",
							".y = x =>",
							"Line",
							".x = y =>",
							"Line.prototype.angle = function()",
							"Point",
							"Line",
							"Line.prototype.getLength = function()",
							"Point",
							"Line.prototype.endpointDist = function(point)",
							"Line.prototype.matchEndpoints = function(arr)",
							" ([i, otherLine]) =>",
							"Line",
							"Point",
							"Point",
							"Point",
							"Point",
							"Line.prototype.distanceToPointSquared = function(p)",
							"Point",
							"Point",
							"Point",
							"Line.prototype.distanceToPoint = function(p)",
							"Line",
							"Line",
							"Line",
							"Line",
							"get()",
							"Line",
							"get()",
							"Line.prototype.pointAt = function(pos)",
							"Line.prototype.transform = function(m)",
							"Line",
							"Line.prototype.bbox = function(proto = Object.prototype)",
							"Line.prototype.points = function()",
							"Line.prototype.toString = function(opts = {})",
							" s =>",
							" s =>",
							"Line.prototype.toSource = function()",
							"Line.prototype.reverse = function()",
							"Line.prototype.toObject = function(t = num => num)",
							"Line.prototype.clone = function()",
							"Line.prototype.round = function(precision = 0.001, digits, type)",
							"Line.prototype.roundTo = function(...args)",
							"Line.prototype.sum = function(...args)",
							"Line",
							"Line.prototype.add = function(...args)",
							"Line.prototype.diff = function(...args)",
							"Line",
							"Line.prototype.sub = function(...args)",
							"Line.prototype.prod = function(...args)",
							"Line",
							"Line.prototype.mul = function(...args)",
							"Line.prototype.quot = function(...args)",
							"Line",
							"Line.prototype.div = function(...args)",
							"Line.prototype.some = function(pred)",
							"Line.prototype.every = function(pred)",
							"Line.prototype.includes = function(point)",
							"Point",
							"Point",
							"Line.prototype.equals = function(...args)",
							"Line.prototype.indexOf = function(point)",
							"Point",
							"Line.prototype.lastIndexOf = function(point)",
							"Point",
							"Line.prototype.map = function(fn)",
							"Line.prototype.swap = function(fn)",
							"Line.prototype.toPoints = function(ctor = Array.of)",
							"Line",
							" function()",
							" (line, ...args) =>",
							"Line",
							"line =>",
							"line =>",
							"Line.from = obj =>",
							"Line.bind = (o, p, gen) =>",
							"gen = k => v =>",
							"Line",
							" function()",
							" () =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABKAAAAUm91bmRUb01pbCA9IG4gPT4KV2lyZSA9ICh7IGRhdGEsIG9wdHMgPSB7fSwgY29sb3IsIC4uLnByb3BzIH0pID0+CigpCmkgPT4AAAAAAAAAALcJAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					20,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/repl.js",
						"symkeys":
						[
							[
								2878,
								2883
							],
							[
								2905,
								2910
							],
							[
								3642,
								3647
							],
							[
								3685,
								3690
							],
							[
								3769,
								3773
							],
							[
								4287,
								4323
							],
							[
								7667,
								7673
							],
							[
								8221,
								8242
							],
							[
								8288,
								8293
							],
							[
								8341,
								8357
							],
							[
								8489,
								8507
							],
							[
								8620,
								8627
							],
							[
								8695,
								8707
							],
							[
								8748,
								8755
							],
							[
								8762,
								8776
							],
							[
								8929,
								8949
							],
							[
								8987,
								9005
							],
							[
								9059,
								9077
							],
							[
								9167,
								9181
							],
							[
								9251,
								9268
							],
							[
								9302,
								9328
							],
							[
								10256,
								10280
							],
							[
								10568,
								10586
							],
							[
								10677,
								10704
							],
							[
								11055,
								11070
							],
							[
								11232,
								11257
							],
							[
								11284,
								11309
							],
							[
								11366,
								11390
							],
							[
								11495,
								11527
							],
							[
								11744,
								11775
							],
							[
								11903,
								11934
							],
							[
								12272,
								12297
							],
							[
								13012,
								13038
							],
							[
								13763,
								13793
							],
							[
								14348,
								14379
							],
							[
								16167,
								16179
							],
							[
								17288,
								17308
							],
							[
								17919,
								17929
							],
							[
								18222,
								18232
							],
							[
								18393,
								18403
							],
							[
								18602,
								18614
							],
							[
								18651,
								18669
							],
							[
								19199,
								19210
							],
							[
								19332,
								19346
							],
							[
								19544,
								19562
							],
							[
								19641,
								19652
							],
							[
								19700,
								19722
							],
							[
								19863,
								19882
							],
							[
								20203,
								20336
							],
							[
								20454,
								20462
							],
							[
								20613,
								20621
							],
							[
								20752,
								20757
							],
							[
								20811,
								20829
							],
							[
								21919,
								21938
							],
							[
								22115,
								22128
							],
							[
								22295,
								22308
							],
							[
								22377,
								22402
							],
							[
								23637,
								23666
							],
							[
								24208,
								24235
							],
							[
								25249,
								25274
							],
							[
								25404,
								25417
							],
							[
								25880,
								25894
							],
							[
								27273,
								27290
							],
							[
								27413,
								27417
							],
							[
								27428,
								27432
							],
							[
								27549,
								27564
							],
							[
								28453,
								28470
							],
							[
								28548,
								28565
							],
							[
								28641,
								28667
							],
							[
								32026,
								32041
							],
							[
								34072,
								34078
							],
							[
								34107,
								34117
							],
							[
								34145,
								34159
							],
							[
								35626,
								35656
							],
							[
								35836,
								35849
							],
							[
								35900,
								35917
							],
							[
								36019,
								36024
							],
							[
								36287,
								36323
							],
							[
								36405,
								36411
							],
							[
								36659,
								36682
							],
							[
								36838,
								36845
							],
							[
								36921,
								36926
							],
							[
								37098,
								37103
							],
							[
								37184,
								37201
							],
							[
								37352,
								37366
							],
							[
								37485,
								37500
							],
							[
								37684,
								37702
							],
							[
								38077,
								38100
							],
							[
								38145,
								38167
							],
							[
								38211,
								38228
							],
							[
								38506,
								38519
							],
							[
								38726,
								38737
							],
							[
								38902,
								38912
							],
							[
								38979,
								39006
							],
							[
								39428,
								39438
							],
							[
								39526,
								39543
							],
							[
								40348,
								40372
							],
							[
								40887,
								40895
							],
							[
								40919,
								40943
							],
							[
								43093,
								43105
							],
							[
								43815,
								43848
							],
							[
								44184,
								44227
							],
							[
								44240,
								44254
							],
							[
								44388,
								44398
							],
							[
								44506,
								44516
							],
							[
								44561,
								44573
							],
							[
								44646,
								44660
							],
							[
								45065,
								45085
							],
							[
								45098,
								45111
							],
							[
								45129,
								45134
							],
							[
								45159,
								45173
							],
							[
								45210,
								45225
							],
							[
								45476,
								45491
							],
							[
								45702,
								45719
							],
							[
								46063,
								46086
							],
							[
								46202,
								46223
							],
							[
								46451,
								46476
							],
							[
								47193,
								47200
							],
							[
								47253,
								47276
							],
							[
								47863,
								47878
							],
							[
								47946,
								47967
							],
							[
								48118,
								48138
							],
							[
								48309,
								48319
							],
							[
								48740,
								48747
							],
							[
								48843,
								48849
							],
							[
								48882,
								48910
							],
							[
								48999,
								49019
							],
							[
								49080,
								49085
							],
							[
								49182,
								49199
							],
							[
								49364,
								49380
							],
							[
								49688,
								49704
							],
							[
								50138,
								50150
							],
							[
								50348,
								50356
							],
							[
								50976,
								50987
							],
							[
								53697,
								53703
							],
							[
								53741,
								53749
							],
							[
								53770,
								53774
							],
							[
								53835,
								53839
							],
							[
								53910,
								53933
							],
							[
								54281,
								54300
							],
							[
								54392,
								54411
							],
							[
								54473,
								54491
							],
							[
								54583,
								54606
							],
							[
								55005,
								55034
							],
							[
								55093,
								55124
							],
							[
								55281,
								55306
							],
							[
								55415,
								55462
							],
							[
								56034,
								56079
							],
							[
								56903,
								56923
							],
							[
								57037,
								57057
							],
							[
								57575,
								57608
							],
							[
								57730,
								57811
							],
							[
								57971,
								57981
							],
							[
								57999,
								58012
							],
							[
								58192,
								58238
							],
							[
								58419,
								58463
							],
							[
								58594,
								58615
							],
							[
								58639,
								58649
							],
							[
								58668,
								58674
							],
							[
								58721,
								58750
							],
							[
								59033,
								59067
							],
							[
								59107,
								59125
							],
							[
								59313,
								59350
							],
							[
								59436,
								59440
							],
							[
								59920,
								59930
							],
							[
								59968,
								59993
							],
							[
								60185,
								60225
							],
							[
								60288,
								60317
							],
							[
								60365,
								60387
							],
							[
								60429,
								60464
							]
						],
						"symlist":
						[
							" n =>",
							" n =>",
							"fd =>",
							"() =>",
							"REPL",
							"constructor(name, showBanner = true)",
							" () =>",
							"addCleanupHandler(fn)",
							"() =>",
							".cleanup = () =>",
							"exit(exitCode = 0)",
							"abort()",
							"acceptLine()",
							"alert()",
							"backwardChar()",
							"backwardDeleteChar()",
							"backwardKillLine()",
							"backwardKillWord()",
							"backwardWord()",
							"beginningOfLine()",
							"bigfloatToString(a, radix)",
							"bigintToString(a, radix)",
							"cmdReadlineStart()",
							"cmdStart(showBanner = true)",
							"colorizeJs(str)",
							" function pushState(c)",
							" function lastState(c)",
							" function popState(c)",
							" function parseBlockComment()",
							" function parseLineComment()",
							" function parseString(delim)",
							" function parseRegex()",
							" function parseNumber()",
							" function parseIdentifier()",
							" function setStyle(from, to)",
							"completion()",
							"showCompletions(tab)",
							"controlC()",
							"controlD()",
							"controlL()",
							"deleteChar()",
							"deleteCharDir(dir)",
							"deleteAll()",
							"downcaseWord()",
							"dupstr(str, count)",
							"endOfLine()",
							"readlineRemovePrompt()",
							"printResult(result)",
							"printPromise(result, fmt = id => `${colors.gray}<${colors.red}result${colors.gray}#${colors.cyan}${id}${colors.gray}>${colors.none}`)",
							"value =>",
							"value =>",
							"() =>",
							"evalAndPrint(expr)",
							"extractDirective(a)",
							"forwardChar()",
							"forwardWord()",
							"getCompletions(line, pos)",
							" function symcmp(a, b)",
							"getContextObject(line, pos)",
							"getContextWord(line, pos)",
							"handleByte(c)",
							"handleChar(c1)",
							"handleMouse(keys)",
							"p =>",
							"p =>",
							"handleCmd(expr)",
							"hasDirective(cmd)",
							"getDirective(cmd)",
							"handleDirective(cmd, expr)",
							"handleKey(keys)",
							"help()",
							"sel = n =>",
							"putline = s =>",
							"makeFilename(type = 'history')",
							"historyFile()",
							"historyLoad(file)",
							"() =>",
							"historySave(file, maxEntries = 1000)",
							"cmd =>",
							"async modulesLoad(file)",
							"line =>",
							"() =>",
							"() =>",
							"modulesSave(file)",
							"historyClear()",
							"historyAdd(str)",
							"historySearch(dir)",
							"historySearchBackward()",
							"historySearchForward()",
							"historyPrevious()",
							"historyNext()",
							"insert(str)",
							"killLine()",
							"killRegion(start, end, dir)",
							"killWord()",
							"moveCursor(delta)",
							"numberToString(a, radix)",
							"print(a)",
							" function printRec(a)",
							"show(result)",
							" function LinesAndColumns(str)",
							"printStatus(fn, prompt = !this.evalRunning)",
							"print = str =>",
							"fn = () =>",
							"fn = () =>",
							"(item, i) =>",
							"(acc, item) =>",
							"printFunction(logFn)",
							" (...args) =>",
							"() =>",
							"quotedInsert()",
							"reverseSearch()",
							"forwardSearch()",
							"searchCb(pattern)",
							"readlineHandleCmd(expr)",
							"readlinePrintPrompt()",
							"readlineStart(defstr, cb)",
							"reset()",
							"async run(inputHandler)",
							"sigintHandler()",
							"skipWordBackward(pos)",
							"skipWordForward(pos)",
							"termInit()",
							" arg =>",
							" () =>",
							"mouseTracking(enable = true)",
							"setupMouseTracking()",
							"() =>",
							"termReadHandler()",
							"transposeChars()",
							"transposeWords()",
							"upcaseWord()",
							"update()",
							"([i, c]) =>",
							"yank()",
							"escape()",
							"REPL",
							"REPL",
							" function i(m)",
							"function isAlpha(c)",
							"function isDigit(c)",
							"function isWord(c)",
							"function ucsLength(str)",
							"function rotateLeft(array, n)",
							"function isTrailingSurrogate(c)",
							"function isBalanced(a, b)",
							"function printColorText(str, start, styleNames)",
							"function printPaged(str, numLines = Infinity)",
							" function getbyte()",
							" function waitkey()",
							"function saveFile(filename, data)",
							"function observeProperties(target = {}, obj, fn = (prop, value) => {}, opts = {})",
							"get: () =>",
							"set: value =>",
							"function loadSaveObject(parent, key, filename)",
							" (prop, value, obj) => (prop, value, obj) =>",
							"function waitRead(fd)",
							"resolve =>",
							" () =>",
							"function define(obj, ...args)",
							"function once(fn, thisArg, memoFn)",
							" function(...args)",
							"async function loadModule(moduleName)",
							"m =>",
							"REPLServer",
							"constructor(options = {})",
							"defineCommand(keyword, { help, action })",
							"displayPrompt(preserveCursor)",
							"clearBufferedCommand()",
							"setupHistory(historyPath, callback)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC3CQAATGluZSguLi5hcmdzKQogIGFyZyA9PgpMaW5lCkxpbmUKTGluZQogIGEgPT4KICBhcmcgPT4KICBhID0+CiAgcHJvcCA9PgogIGlzTGluZSA9IG9iaiA9PgogIHByb3AgPT4KICBwcm9wID0+CkxpbmUucHJvdG90eXBlLmludGVyc2VjdCA9IGZ1bmN0aW9uKG90aGVyKQpMaW5lCiAgZ2V0KCkKICBzZXQodmFsdWUpCkxpbmUKICBnZXQoKQogIHNldCh2YWx1ZSkKTGluZQogIGdldCgpCiAgc2V0KHYpCkxpbmUKICBnZXQoKQogIHNldCh2KQpMaW5lLnByb3RvdHlwZS5kaXJlY3Rpb24gPSBmdW5jdGlvbigpClBvaW50ClBvaW50CkxpbmUKTGluZS5wcm90b3R5cGUuZ2V0VmVjdG9yID0gZnVuY3Rpb24oKQpMaW5lCkxpbmUKTGluZS5wcm90b3R5cGUuZ2V0U2xvcGUgPSBmdW5jdGlvbigpCkxpbmUKICBnZXQoKQpMaW5lLnByb3RvdHlwZS55SW50ZXJjZXB0ID0gZnVuY3Rpb24oKQpMaW5lCkxpbmUucHJvdG90eXBlLnhJbnRlcmNlcHQgPSBmdW5jdGlvbigpCkxpbmUKTGluZS5wcm90b3R5cGUuaXNIb3Jpem9udGFsID0gZnVuY3Rpb24oKQpMaW5lCkxpbmUucHJvdG90eXBlLmlzVmVydGljYWwgPSBmdW5jdGlvbigpCkxpbmUKTGluZS5wcm90b3R5cGUuaXNOdWxsID0gZnVuY3Rpb24oKQpMaW5lLnByb3RvdHlwZS5lcXVhdGlvbnMgPSBmdW5jdGlvbigpCkxpbmUKTGluZQpMaW5lLnByb3RvdHlwZS5mdW5jdGlvbnMgPSBmdW5jdGlvbigpCkxpbmUKICAueSA9IHggPT4KTGluZQogIC54ID0geSA9PgpMaW5lLnByb3RvdHlwZS5hbmdsZSA9IGZ1bmN0aW9uKCkKUG9pbnQKTGluZQpMaW5lLnByb3RvdHlwZS5nZXRMZW5ndGggPSBmdW5jdGlvbigpClBvaW50CkxpbmUucHJvdG90eXBlLmVuZHBvaW50RGlzdCA9IGZ1bmN0aW9uKHBvaW50KQpMaW5lLnByb3RvdHlwZS5tYXRjaEVuZHBvaW50cyA9IGZ1bmN0aW9uKGFycikKKFtpLCBvdGhlckxpbmVdKSA9PgpMaW5lClBvaW50ClBvaW50ClBvaW50ClBvaW50CkxpbmUucHJvdG90eXBlLmRpc3RhbmNlVG9Qb2ludFNxdWFyZWQgPSBmdW5jdGlvbihwKQpQb2ludApQb2ludApQb2ludApMaW5lLnByb3RvdHlwZS5kaXN0YW5jZVRvUG9pbnQgPSBmdW5jdGlvbihwKQpMaW5lCkxpbmUKTGluZQpMaW5lCiAgZ2V0KCkKTGluZQogIGdldCgpCkxpbmUucHJvdG90eXBlLnBvaW50QXQgPSBmdW5jdGlvbihwb3MpCkxpbmUucHJvdG90eXBlLnRyYW5zZm9ybSA9IGZ1bmN0aW9uKG0pCkxpbmUKTGluZS5wcm90b3R5cGUuYmJveCA9IGZ1bmN0aW9uKHByb3RvID0gT2JqZWN0LnByb3RvdHlwZSkKTGluZS5wcm90b3R5cGUucG9pbnRzID0gZnVuY3Rpb24oKQpMaW5lLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKG9wdHMgPSB7fSkKcyA9PgpzID0+CkxpbmUucHJvdG90eXBlLnRvU291cmNlID0gZnVuY3Rpb24oKQpMaW5lLnByb3RvdHlwZS5yZXZlcnNlID0gZnVuY3Rpb24oKQpMaW5lLnByb3RvdHlwZS50b09iamVjdCA9IGZ1bmN0aW9uKHQgPSBudW0gPT4gbnVtKQpMaW5lLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkKTGluZS5wcm90b3R5cGUucm91bmQgPSBmdW5jdGlvbihwcmVjaXNpb24gPSAwLjAwMSwgZGlnaXRzLCB0eXBlKQpMaW5lLnByb3RvdHlwZS5yb3VuZFRvID0gZnVuY3Rpb24oLi4uYXJncykKTGluZS5wcm90b3R5cGUuc3VtID0gZnVuY3Rpb24oLi4uYXJncykKTGluZQpMaW5lLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiguLi5hcmdzKQpMaW5lLnByb3RvdHlwZS5kaWZmID0gZnVuY3Rpb24oLi4uYXJncykKTGluZQpMaW5lLnByb3RvdHlwZS5zdWIgPSBmdW5jdGlvbiguLi5hcmdzKQpMaW5lLnByb3RvdHlwZS5wcm9kID0gZnVuY3Rpb24oLi4uYXJncykKTGluZQpMaW5lLnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiguLi5hcmdzKQpMaW5lLnByb3RvdHlwZS5xdW90ID0gZnVuY3Rpb24oLi4uYXJncykKTGluZQpMaW5lLnByb3RvdHlwZS5kaXYgPSBmdW5jdGlvbiguLi5hcmdzKQpMaW5lLnByb3RvdHlwZS5zb21lID0gZnVuY3Rpb24ocHJlZCkKTGluZS5wcm90b3R5cGUuZXZlcnkgPSBmdW5jdGlvbihwcmVkKQpMaW5lLnByb3RvdHlwZS5pbmNsdWRlcyA9IGZ1bmN0aW9uKHBvaW50KQpQb2ludApQb2ludApMaW5lLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiguLi5hcmdzKQpMaW5lLnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24ocG9pbnQpClBvaW50CkxpbmUucHJvdG90eXBlLmxhc3RJbmRleE9mID0gZnVuY3Rpb24ocG9pbnQpClBvaW50CkxpbmUucHJvdG90eXBlLm1hcCA9IGZ1bmN0aW9uKGZuKQpMaW5lLnByb3RvdHlwZS5zd2FwID0gZnVuY3Rpb24oZm4pCkxpbmUucHJvdG90eXBlLnRvUG9pbnRzID0gZnVuY3Rpb24oY3RvciA9IEFycmF5Lm9mKQpMaW5lCmZ1bmN0aW9uKCkKKGxpbmUsIC4uLmFyZ3MpID0+CkxpbmUKICBsaW5lID0+CiAgbGluZSA9PgpMaW5lLmZyb20gPSBvYmogPT4KTGluZS5iaW5kID0gKG8sIHAsIGdlbikgPT4KICBnZW4gPSBrID0+IHYgPT4KTGluZQpmdW5jdGlvbigpCigpID0+AAAAAAAAAAC+DAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					21,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/components/via.js",
						"symkeys":
						[
							[
								352,
								392
							],
							[
								534,
								552
							],
							[
								760,
								765
							]
						],
						"symlist":
						[
							"Via = ({ data, opts = {}, ...props }) =>",
							"async function* ()",
							" i =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC+DAAAbiA9PgpuID0+CiAgZmQgPT4KKCkgPT4KUkVQTAogIGNvbnN0cnVjdG9yKG5hbWUsIHNob3dCYW5uZXIgPSB0cnVlKQooKSA9PgogIGFkZENsZWFudXBIYW5kbGVyKGZuKQooKSA9PgogIC5jbGVhbnVwID0gKCkgPT4KICBleGl0KGV4aXRDb2RlID0gMCkKICBhYm9ydCgpCiAgYWNjZXB0TGluZSgpCiAgYWxlcnQoKQogIGJhY2t3YXJkQ2hhcigpCiAgYmFja3dhcmREZWxldGVDaGFyKCkKICBiYWNrd2FyZEtpbGxMaW5lKCkKICBiYWNrd2FyZEtpbGxXb3JkKCkKICBiYWNrd2FyZFdvcmQoKQogIGJlZ2lubmluZ09mTGluZSgpCiAgYmlnZmxvYXRUb1N0cmluZyhhLCByYWRpeCkKICBiaWdpbnRUb1N0cmluZyhhLCByYWRpeCkKICBjbWRSZWFkbGluZVN0YXJ0KCkKICBjbWRTdGFydChzaG93QmFubmVyID0gdHJ1ZSkKICBjb2xvcml6ZUpzKHN0cikKICBwdXNoU3RhdGUoYykKICBsYXN0U3RhdGUoYykKICBwb3BTdGF0ZShjKQogIHBhcnNlQmxvY2tDb21tZW50KCkKICBwYXJzZUxpbmVDb21tZW50KCkKICBwYXJzZVN0cmluZyhkZWxpbSkKICBwYXJzZVJlZ2V4KCkKICBwYXJzZU51bWJlcigpCiAgcGFyc2VJZGVudGlmaWVyKCkKICBzZXRTdHlsZShmcm9tLCB0bykKICBjb21wbGV0aW9uKCkKICBzaG93Q29tcGxldGlvbnModGFiKQogIGNvbnRyb2xDKCkKICBjb250cm9sRCgpCiAgY29udHJvbEwoKQogIGRlbGV0ZUNoYXIoKQogIGRlbGV0ZUNoYXJEaXIoZGlyKQogIGRlbGV0ZUFsbCgpCiAgZG93bmNhc2VXb3JkKCkKICBkdXBzdHIoc3RyLCBjb3VudCkKICBlbmRPZkxpbmUoKQogIHJlYWRsaW5lUmVtb3ZlUHJvbXB0KCkKICBwcmludFJlc3VsdChyZXN1bHQpCiAgcHJpbnRQcm9taXNlKHJlc3VsdCwgZm10ID0gaWQgPT4gYCR7Y29sb3JzLmdyYXl9PCR7Y29sb3JzLnJlZH1yZXN1bHQke2NvbG9ycy5ncmF5fSMke2NvbG9ycy5jeWFufSR7aWR9JHtjb2xvcnMuZ3JheX0+JHtjb2xvcnMubm9uZX1gKQogIHZhbHVlID0+CiAgdmFsdWUgPT4KKCkgPT4KICBldmFsQW5kUHJpbnQoZXhwcikKICBleHRyYWN0RGlyZWN0aXZlKGEpCiAgZm9yd2FyZENoYXIoKQogIGZvcndhcmRXb3JkKCkKICBnZXRDb21wbGV0aW9ucyhsaW5lLCBwb3MpCiAgc3ltY21wKGEsIGIpCiAgZ2V0Q29udGV4dE9iamVjdChsaW5lLCBwb3MpCiAgZ2V0Q29udGV4dFdvcmQobGluZSwgcG9zKQogIGhhbmRsZUJ5dGUoYykKICBoYW5kbGVDaGFyKGMxKQogIGhhbmRsZU1vdXNlKGtleXMpCiAgcCA9PgogIHAgPT4KICBoYW5kbGVDbWQoZXhwcikKICBoYXNEaXJlY3RpdmUoY21kKQogIGdldERpcmVjdGl2ZShjbWQpCiAgaGFuZGxlRGlyZWN0aXZlKGNtZCwgZXhwcikKICBoYW5kbGVLZXkoa2V5cykKICBoZWxwKCkKICBzZWwgPSBuID0+CiAgcHV0bGluZSA9IHMgPT4KICBtYWtlRmlsZW5hbWUodHlwZSA9ICdoaXN0b3J5JykKICBoaXN0b3J5RmlsZSgpCiAgaGlzdG9yeUxvYWQoZmlsZSkKKCkgPT4KICBoaXN0b3J5U2F2ZShmaWxlLCBtYXhFbnRyaWVzID0gMTAwMCkKICBjbWQgPT4KICBtb2R1bGVzTG9hZChmaWxlKQogIGxpbmUgPT4KKCkgPT4KKCkgPT4KICBtb2R1bGVzU2F2ZShmaWxlKQogIGhpc3RvcnlDbGVhcigpCiAgaGlzdG9yeUFkZChzdHIpCiAgaGlzdG9yeVNlYXJjaChkaXIpCiAgaGlzdG9yeVNlYXJjaEJhY2t3YXJkKCkKICBoaXN0b3J5U2VhcmNoRm9yd2FyZCgpCiAgaGlzdG9yeVByZXZpb3VzKCkKICBoaXN0b3J5TmV4dCgpCiAgaW5zZXJ0KHN0cikKICBraWxsTGluZSgpCiAga2lsbFJlZ2lvbihzdGFydCwgZW5kLCBkaXIpCiAga2lsbFdvcmQoKQogIG1vdmVDdXJzb3IoZGVsdGEpCiAgbnVtYmVyVG9TdHJpbmcoYSwgcmFkaXgpCiAgcHJpbnQoYSkKICBwcmludFJlYyhhKQogIHNob3cocmVzdWx0KQpMaW5lc0FuZENvbHVtbnMoc3RyKQogIHByaW50U3RhdHVzKGZuLCBwcm9tcHQgPSAhdGhpcy5ldmFsUnVubmluZykKICBwcmludCA9IHN0ciA9PgogIGZuID0gKCkgPT4KICBmbiA9ICgpID0+CihpdGVtLCBpKSA9PgooYWNjLCBpdGVtKSA9PgogIHByaW50RnVuY3Rpb24obG9nRm4pCiguLi5hcmdzKSA9PgooKSA9PgogIHF1b3RlZEluc2VydCgpCiAgcmV2ZXJzZVNlYXJjaCgpCiAgZm9yd2FyZFNlYXJjaCgpCiAgc2VhcmNoQ2IocGF0dGVybikKICByZWFkbGluZUhhbmRsZUNtZChleHByKQogIHJlYWRsaW5lUHJpbnRQcm9tcHQoKQogIHJlYWRsaW5lU3RhcnQoZGVmc3RyLCBjYikKICByZXNldCgpCiAgcnVuKGlucHV0SGFuZGxlcikKICBzaWdpbnRIYW5kbGVyKCkKICBza2lwV29yZEJhY2t3YXJkKHBvcykKICBza2lwV29yZEZvcndhcmQocG9zKQogIHRlcm1Jbml0KCkKYXJnID0+CigpID0+CiAgbW91c2VUcmFja2luZyhlbmFibGUgPSB0cnVlKQogIHNldHVwTW91c2VUcmFja2luZygpCigpID0+CiAgdGVybVJlYWRIYW5kbGVyKCkKICB0cmFuc3Bvc2VDaGFycygpCiAgdHJhbnNwb3NlV29yZHMoKQogIHVwY2FzZVdvcmQoKQogIHVwZGF0ZSgpCihbaSwgY10pID0+CiAgeWFuaygpCiAgZXNjYXBlKCkKUkVQTApSRVBMCiAgaShtKQogIGlzQWxwaGEoYykKICBpc0RpZ2l0KGMpCiAgaXNXb3JkKGMpCiAgdWNzTGVuZ3RoKHN0cikKICByb3RhdGVMZWZ0KGFycmF5LCBuKQogIGlzVHJhaWxpbmdTdXJyb2dhdGUoYykKICBpc0JhbGFuY2VkKGEsIGIpCiAgcHJpbnRDb2xvclRleHQoc3RyLCBzdGFydCwgc3R5bGVOYW1lcykKICBwcmludFBhZ2VkKHN0ciwgbnVtTGluZXMgPSBJbmZpbml0eSkKICBnZXRieXRlKCkKICB3YWl0a2V5KCkKICBzYXZlRmlsZShmaWxlbmFtZSwgZGF0YSkKICBvYnNlcnZlUHJvcGVydGllcyh0YXJnZXQgPSB7fSwgb2JqLCBmbiA9IChwcm9wLCB2YWx1ZSkgPT4ge30sIG9wdHMgPSB7fSkKICBnZXQ6ICgpID0+CiAgc2V0OiB2YWx1ZSA9PgogIGxvYWRTYXZlT2JqZWN0KHBhcmVudCwga2V5LCBmaWxlbmFtZSkKKHByb3AsIHZhbHVlLCBvYmopID0+IChwcm9wLCB2YWx1ZSwgb2JqKSA9PgogIHdhaXRSZWFkKGZkKQogIHJlc29sdmUgPT4KKCkgPT4KICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIG9uY2UoZm4sIHRoaXNBcmcsIG1lbW9GbikKZnVuY3Rpb24oLi4uYXJncykKICBsb2FkTW9kdWxlKG1vZHVsZU5hbWUpCiAgbSA9PgpSRVBMU2VydmVyCiAgY29uc3RydWN0b3Iob3B0aW9ucyA9IHt9KQogIGRlZmluZUNvbW1hbmQoa2V5d29yZCwgeyBoZWxwLCBhY3Rpb24gfSkKICBkaXNwbGF5UHJvbXB0KHByZXNlcnZlQ3Vyc29yKQogIGNsZWFyQnVmZmVyZWRDb21tYW5kKCkKICBzZXR1cEhpc3RvcnkoaGlzdG9yeVBhdGgsIGNhbGxiYWNrKQAAAAAAAAAAMAAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					1,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle2svg.js",
						"symkeys":
						[
							[
								526,
								556
							],
							[
								1508,
								1530
							],
							[
								1731,
								1740
							],
							[
								1910,
								1915
							]
						],
						"symlist":
						[
							"function render(doc, filename)",
							"function main(...args)",
							" value =>",
							" f =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAVmlhID0gKHsgZGF0YSwgb3B0cyA9IHt9LCAuLi5wcm9wcyB9KSA9PgooKQppID0+AAAAAAAAAAA1AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					2,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-shell.js",
						"symkeys":
						[
							[
								3134,
								3139
							],
							[
								3202,
								3208
							],
							[
								3310,
								3329
							],
							[
								3351,
								3356
							],
							[
								3459,
								3490
							],
							[
								3541,
								3584
							],
							[
								3629,
								3636
							],
							[
								3737,
								3822
							],
							[
								3974,
								3979
							],
							[
								4024,
								4042
							],
							[
								4081,
								4088
							],
							[
								4137,
								4144
							],
							[
								4183,
								4200
							],
							[
								4247,
								4254
							],
							[
								4291,
								4309
							],
							[
								4332,
								4341
							],
							[
								4364,
								4382
							],
							[
								4393,
								4454
							],
							[
								4574,
								4583
							],
							[
								4620,
								4631
							],
							[
								4642,
								4666
							],
							[
								4747,
								4755
							],
							[
								4938,
								4992
							],
							[
								5211,
								5241
							],
							[
								5893,
								5939
							],
							[
								5979,
								5983
							],
							[
								6010,
								6017
							],
							[
								6103,
								6142
							],
							[
								6227,
								6272
							],
							[
								6310,
								6314
							],
							[
								6338,
								6381
							],
							[
								6460,
								6505
							],
							[
								6550,
								6554
							],
							[
								6604,
								6608
							],
							[
								6615,
								6619
							],
							[
								6651,
								6684
							],
							[
								6716,
								6759
							],
							[
								6834,
								6838
							],
							[
								6877,
								6916
							],
							[
								6962,
								7005
							],
							[
								7050,
								7089
							],
							[
								7185,
								7218
							],
							[
								7250,
								7270
							],
							[
								7517,
								7539
							],
							[
								9831,
								9842
							],
							[
								10945,
								10958
							],
							[
								11338,
								11372
							],
							[
								11874,
								11918
							],
							[
								12037,
								12057
							],
							[
								12372,
								12382
							],
							[
								12410,
								12420
							],
							[
								12456,
								12469
							],
							[
								12719,
								12733
							],
							[
								13625,
								13634
							],
							[
								13875,
								13894
							],
							[
								14436,
								14449
							],
							[
								14467,
								14472
							],
							[
								14523,
								14536
							],
							[
								14587,
								14608
							],
							[
								15005,
								15021
							],
							[
								15409,
								15414
							],
							[
								15452,
								15467
							],
							[
								15614,
								15622
							],
							[
								15663,
								15671
							],
							[
								15948,
								15976
							],
							[
								16043,
								16077
							],
							[
								16111,
								16116
							],
							[
								16138,
								16168
							],
							[
								16410,
								16418
							],
							[
								16485,
								16489
							],
							[
								16579,
								16586
							],
							[
								16926,
								16950
							],
							[
								17195,
								17200
							],
							[
								18930,
								18974
							],
							[
								19421,
								19447
							],
							[
								20149,
								20172
							],
							[
								20292,
								20314
							],
							[
								20565,
								20569
							],
							[
								21057,
								21061
							],
							[
								21678,
								21707
							],
							[
								21732,
								21736
							],
							[
								21812,
								21835
							],
							[
								21879,
								21885
							],
							[
								21913,
								21917
							],
							[
								21933,
								21970
							],
							[
								21992,
								22008
							],
							[
								22028,
								22035
							],
							[
								22092,
								22120
							],
							[
								22174,
								22185
							],
							[
								22268,
								22276
							],
							[
								22372,
								22376
							],
							[
								22526,
								22530
							],
							[
								22628,
								22633
							],
							[
								22693,
								22704
							],
							[
								22776,
								22787
							],
							[
								22874,
								22879
							],
							[
								22929,
								22935
							],
							[
								23032,
								23040
							],
							[
								23215,
								23244
							],
							[
								23337,
								23390
							],
							[
								23543,
								23547
							],
							[
								23601,
								23605
							],
							[
								23881,
								23888
							],
							[
								23910,
								23916
							],
							[
								23945,
								23976
							],
							[
								24110,
								24134
							],
							[
								24260,
								24271
							],
							[
								24289,
								24305
							],
							[
								24464,
								24469
							],
							[
								24493,
								24497
							],
							[
								24545,
								24554
							],
							[
								24622,
								24627
							],
							[
								24765,
								24770
							],
							[
								24892,
								24903
							],
							[
								24992,
								24999
							],
							[
								25645,
								25661
							],
							[
								27715,
								27749
							],
							[
								28088,
								28102
							],
							[
								28197,
								28201
							],
							[
								28223,
								28237
							],
							[
								28268,
								28272
							],
							[
								29572,
								29588
							],
							[
								29638,
								29653
							],
							[
								29712,
								29731
							],
							[
								29754,
								29766
							],
							[
								29855,
								29859
							],
							[
								29958,
								29962
							],
							[
								30181,
								30187
							],
							[
								30277,
								30291
							],
							[
								30320,
								30338
							],
							[
								30475,
								30487
							],
							[
								30517,
								30582
							],
							[
								30611,
								30616
							],
							[
								30755,
								30793
							],
							[
								30818,
								30838
							],
							[
								30867,
								30916
							],
							[
								30963,
								30973
							],
							[
								31146,
								31156
							],
							[
								31229,
								31239
							],
							[
								31310,
								31320
							],
							[
								31847,
								31928
							],
							[
								31939,
								31962
							],
							[
								32180,
								32185
							],
							[
								32268,
								32277
							],
							[
								32307,
								32313
							],
							[
								32329,
								32358
							],
							[
								32394,
								32407
							],
							[
								32638,
								32644
							],
							[
								32653,
								32664
							],
							[
								32732,
								32754
							],
							[
								32971,
								32994
							],
							[
								33406,
								33435
							],
							[
								33757,
								33784
							],
							[
								33818,
								33831
							],
							[
								33858,
								33863
							],
							[
								33887,
								33892
							],
							[
								33937,
								33947
							],
							[
								33977,
								33987
							],
							[
								34073,
								34078
							],
							[
								34198,
								34203
							],
							[
								34217,
								34225
							],
							[
								34447,
								34451
							],
							[
								34504,
								34508
							],
							[
								34596,
								34609
							],
							[
								34710,
								34723
							],
							[
								34984,
								35017
							],
							[
								35071,
								35075
							],
							[
								35189,
								35215
							],
							[
								35558,
								35591
							],
							[
								35938,
								35983
							],
							[
								36024,
								36028
							],
							[
								36045,
								36074
							],
							[
								36110,
								36116
							],
							[
								36500,
								36570
							],
							[
								37170,
								37242
							],
							[
								37475,
								37480
							],
							[
								38202,
								38206
							]
						],
						"symlist":
						[
							"() =>",
							" () =>",
							"function toXML(obj)",
							" a =>",
							"function renderToXML(component)",
							"function GetFiletime(file, field = 'mtime')",
							"file =>",
							"function FindProjects(dirPtn = '../*/eagle', sortDirection = -1, sortField = 'mtime')",
							"fn =>",
							"minIndex = name =>",
							"file =>",
							"file =>",
							"hasBoth = name =>",
							"name =>",
							"([name, index]) =>",
							"(a, b) =>",
							"([name, index]) =>",
							"function SortFiles(files, direction = 1, statField = 'mtime')",
							"(a, b) =>",
							"([file]) =>",
							"function pick(it, n = 1)",
							"n = i =>",
							"function append(tag, attrs, children, parent, element)",
							"function render(doc, filename)",
							"function CollectParts(doc = project.schematic)",
							"e =>",
							"attr =>",
							"({ name, deviceset, device, value }) =>",
							"function CollectElements(doc = project.board)",
							"e =>",
							"({ name, library, package: pkg, value }) =>",
							"function CollectPartsElements(proj = project)",
							"e =>",
							"a =>",
							"e =>",
							"([{ x, y, ...element }, part]) =>",
							"function ListParts(doc = project.schematic)",
							"p =>",
							"({ name, deviceset, device, value }) =>",
							"function ShowParts(doc = project.schematic)",
							"({ name, deviceset, device, value }) =>",
							"function EaglePrint(file, output)",
							" (dir, base, ext) =>",
							"function main(...args)",
							"toNumber(n)",
							"wire(...args)",
							"coil({ rect, n, diameter, width })",
							"load(filename, project = globalThis.project)",
							"newProject(filename)",
							"sch: () =>",
							"brd: () =>",
							"nextProject()",
							"projectNames()",
							"quit(arg)",
							"renderToString(arg)",
							" (...args) =>",
							"() =>",
							".exit = () =>",
							".debug = (...args) =>",
							".show = value =>",
							"() =>",
							"(item, i, a) =>",
							"entry =>",
							"entry =>",
							"function Terminate(exitCode)",
							"function xml(strings, expressions)",
							" e =>",
							"function UpdateMeasures(board)",
							"lines =>",
							"e =>",
							"line =>",
							"function AlignItem(item)",
							"tr =>",
							"function AlignAll(doc = globalThis.document)",
							"function fixValue(element)",
							"function fixValues(doc)",
							"function coordMap(doc)",
							"p =>",
							"t =>",
							"function GetPolygons(d = doc)",
							"e =>",
							"function FindPolygons()",
							"doc =>",
							"e =>",
							"function RemovePolygons(p = polygons)",
							"([doc, list]) =>",
							"path =>",
							"function GetNames(doc, pred)",
							"pred = e =>",
							"sheet =>",
							"e =>",
							"e =>",
							" e =>",
							"([v, p]) =>",
							"([v, p]) =>",
							"() =>",
							"doc =>",
							"sheet =>",
							"function GetByName(doc, name)",
							"function CorrelateSchematicAndBoard(schematic, board)",
							"d =>",
							"n =>",
							"name =>",
							"doc =>",
							"function GetSheets(doc_or_proj)",
							"function SaveLibraries()",
							"([n, e]) =>",
							"(acc, [n, e]) =>",
							" e =>",
							"e =>",
							"(a, b) =>",
							"id =>",
							"id =>",
							"([n, e]) =>",
							"name =>",
							"(acc, [n, e]) =>",
							"async function testEagle(filename)",
							"([name, e]) =>",
							"e =>",
							"([name, i]) =>",
							"p =>",
							"(child, i, a) =>",
							"(child2, i2) =>",
							"([index, equal]) =>",
							"([index]) =>",
							"i =>",
							"i =>",
							"doc =>",
							"([file, e]) =>",
							"([file, xpath]) =>",
							" ([k, v]) =>",
							"function ModifyPath(p, fn = (dir, base, ext) => [dir, base, ext])",
							"() =>",
							"function AppendToFilename(p, str = '')",
							" (dir, base, ext) =>",
							"function SetSVGBackground(xml, color = '#ffffff')",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							"FileFunction = (fn, rfn = ReadFile, wfn = WriteFile, namefn = n => n, ...args) =>",
							" (filename, ...args) =>",
							" n =>",
							" data =>",
							" n =>",
							"function PutRowsColumns(rows)",
							"(acc, row) =>",
							"row =>",
							"(col, i) =>",
							"function GetLibrary(e)",
							"function ElementName(e)",
							"function GetRotation(element)",
							"function Package2Circuit(p)",
							"({ x, y }) =>",
							"pt =>",
							"pt =>",
							"({ x }) =>",
							"({ y }) =>",
							"pt =>",
							"pt =>",
							"coord =>",
							"x =>",
							"y =>",
							"({ x, y }) =>",
							"({ x, y }) =>",
							"function Contactref2Circuit(cref)",
							"e =>",
							"function Signal2Circuit(s)",
							"function Element2Circuit(element)",
							"function GetUsedPackages(doc = project.board)",
							"e =>",
							"function GetPackagePitch(pkg)",
							"pad =>",
							"function Eagle2Circuit(doc = project.board, width = 100, height = 100)",
							"function Eagle2CircuitJS(doc = project.schematic, scale = 50, sheet = 0)",
							" n =>",
							"e =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA1AAAAICByZW5kZXIoZG9jLCBmaWxlbmFtZSkKICBtYWluKC4uLmFyZ3MpCnZhbHVlID0+CmYgPT4AAAAAAAAAAAYMAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					3,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/common.js",
						"symkeys":
						[
							[
								101,
								118
							],
							[
								235,
								255
							],
							[
								277,
								287
							],
							[
								308,
								328
							],
							[
								350,
								371
							],
							[
								536,
								558
							],
							[
								694,
								710
							],
							[
								1180,
								1184
							],
							[
								1209,
								1225
							],
							[
								1625,
								1629
							],
							[
								1656,
								1699
							],
							[
								1710,
								1726
							],
							[
								2253,
								2272
							],
							[
								2484,
								2502
							],
							[
								3280,
								3297
							],
							[
								3369,
								3386
							],
							[
								3448,
								3490
							]
						],
						"symlist":
						[
							"isBrowser = () =>",
							"concat: (...args) =>",
							"text: t =>",
							"concat: (...args) =>",
							"text: (t, ...ansi) =>",
							"dingbatCode = digit =>",
							"m = (r, g, b) =>",
							"c =>",
							"m = (r, g, b) =>",
							"c =>",
							"dump = (o, depth = 2, breakLength = 400) =>",
							"isElement = o =>",
							"parseArgs = args =>",
							".predicate = it =>",
							".predicate = v =>",
							".predicate = v =>",
							"traverse = function* (obj, path = [], doc)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAGDAAAKCkgPT4KKCkgPT4KICB0b1hNTChvYmopCmEgPT4KICByZW5kZXJUb1hNTChjb21wb25lbnQpCkdldEZpbGV0aW1lKGZpbGUsIGZpZWxkID0gJ210aW1lJykKICBmaWxlID0+CkZpbmRQcm9qZWN0cyhkaXJQdG4gPSAnLi4vKi9lYWdsZScsIHNvcnREaXJlY3Rpb24gPSAtMSwgc29ydEZpZWxkID0gJ210aW1lJykKICBmbiA9PgogIG1pbkluZGV4ID0gbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CiAgaGFzQm90aCA9IG5hbWUgPT4KICBuYW1lID0+CihbbmFtZSwgaW5kZXhdKSA9PgooYSwgYikgPT4KKFtuYW1lLCBpbmRleF0pID0+ClNvcnRGaWxlcyhmaWxlcywgZGlyZWN0aW9uID0gMSwgc3RhdEZpZWxkID0gJ210aW1lJykKKGEsIGIpID0+CihbZmlsZV0pID0+CiAgcGljayhpdCwgbiA9IDEpCiAgbiA9IGkgPT4KICBhcHBlbmQodGFnLCBhdHRycywgY2hpbGRyZW4sIHBhcmVudCwgZWxlbWVudCkKICByZW5kZXIoZG9jLCBmaWxlbmFtZSkKQ29sbGVjdFBhcnRzKGRvYyA9IHByb2plY3Quc2NoZW1hdGljKQogIGUgPT4KICBhdHRyID0+Cih7IG5hbWUsIGRldmljZXNldCwgZGV2aWNlLCB2YWx1ZSB9KSA9PgpDb2xsZWN0RWxlbWVudHMoZG9jID0gcHJvamVjdC5ib2FyZCkKICBlID0+Cih7IG5hbWUsIGxpYnJhcnksIHBhY2thZ2U6IHBrZywgdmFsdWUgfSkgPT4KQ29sbGVjdFBhcnRzRWxlbWVudHMocHJvaiA9IHByb2plY3QpCiAgZSA9PgogIGEgPT4KICBlID0+CihbeyB4LCB5LCAuLi5lbGVtZW50IH0sIHBhcnRdKSA9PgpMaXN0UGFydHMoZG9jID0gcHJvamVjdC5zY2hlbWF0aWMpCiAgcCA9PgooeyBuYW1lLCBkZXZpY2VzZXQsIGRldmljZSwgdmFsdWUgfSkgPT4KU2hvd1BhcnRzKGRvYyA9IHByb2plY3Quc2NoZW1hdGljKQooeyBuYW1lLCBkZXZpY2VzZXQsIGRldmljZSwgdmFsdWUgfSkgPT4KRWFnbGVQcmludChmaWxlLCBvdXRwdXQpCihkaXIsIGJhc2UsIGV4dCkgPT4KICBtYWluKC4uLmFyZ3MpCiAgdG9OdW1iZXIobikKICB3aXJlKC4uLmFyZ3MpCiAgY29pbCh7IHJlY3QsIG4sIGRpYW1ldGVyLCB3aWR0aCB9KQogIGxvYWQoZmlsZW5hbWUsIHByb2plY3QgPSBnbG9iYWxUaGlzLnByb2plY3QpCiAgbmV3UHJvamVjdChmaWxlbmFtZSkKICBzY2g6ICgpID0+CiAgYnJkOiAoKSA9PgogIG5leHRQcm9qZWN0KCkKICBwcm9qZWN0TmFtZXMoKQogIHF1aXQoYXJnKQogIHJlbmRlclRvU3RyaW5nKGFyZykKKC4uLmFyZ3MpID0+CigpID0+CiAgLmV4aXQgPSAoKSA9PgogIC5kZWJ1ZyA9ICguLi5hcmdzKSA9PgogIC5zaG93ID0gdmFsdWUgPT4KKCkgPT4KKGl0ZW0sIGksIGEpID0+CiAgZW50cnkgPT4KICBlbnRyeSA9PgpUZXJtaW5hdGUoZXhpdENvZGUpCiAgeG1sKHN0cmluZ3MsIGV4cHJlc3Npb25zKQplID0+ClVwZGF0ZU1lYXN1cmVzKGJvYXJkKQogIGxpbmVzID0+CiAgZSA9PgogIGxpbmUgPT4KQWxpZ25JdGVtKGl0ZW0pCiAgdHIgPT4KQWxpZ25BbGwoZG9jID0gZ2xvYmFsVGhpcy5kb2N1bWVudCkKICBmaXhWYWx1ZShlbGVtZW50KQogIGZpeFZhbHVlcyhkb2MpCiAgY29vcmRNYXAoZG9jKQogIHAgPT4KICB0ID0+CkdldFBvbHlnb25zKGQgPSBkb2MpCiAgZSA9PgpGaW5kUG9seWdvbnMoKQogIGRvYyA9PgogIGUgPT4KUmVtb3ZlUG9seWdvbnMocCA9IHBvbHlnb25zKQooW2RvYywgbGlzdF0pID0+CiAgcGF0aCA9PgpHZXROYW1lcyhkb2MsIHByZWQpCiAgcHJlZCA9IGUgPT4KICBzaGVldCA9PgogIGUgPT4KICBlID0+CmUgPT4KKFt2LCBwXSkgPT4KKFt2LCBwXSkgPT4KKCkgPT4KICBkb2MgPT4KICBzaGVldCA9PgpHZXRCeU5hbWUoZG9jLCBuYW1lKQpDb3JyZWxhdGVTY2hlbWF0aWNBbmRCb2FyZChzY2hlbWF0aWMsIGJvYXJkKQogIGQgPT4KICBuID0+CiAgbmFtZSA9PgogIGRvYyA9PgpHZXRTaGVldHMoZG9jX29yX3Byb2opClNhdmVMaWJyYXJpZXMoKQooW24sIGVdKSA9PgooYWNjLCBbbiwgZV0pID0+CmUgPT4KICBlID0+CihhLCBiKSA9PgogIGlkID0+CiAgaWQgPT4KKFtuLCBlXSkgPT4KICBuYW1lID0+CihhY2MsIFtuLCBlXSkgPT4KICB0ZXN0RWFnbGUoZmlsZW5hbWUpCihbbmFtZSwgZV0pID0+CiAgZSA9PgooW25hbWUsIGldKSA9PgogIHAgPT4KKGNoaWxkLCBpLCBhKSA9PgooY2hpbGQyLCBpMikgPT4KKFtpbmRleCwgZXF1YWxdKSA9PgooW2luZGV4XSkgPT4KICBpID0+CiAgaSA9PgogIGRvYyA9PgooW2ZpbGUsIGVdKSA9PgooW2ZpbGUsIHhwYXRoXSkgPT4KKFtrLCB2XSkgPT4KTW9kaWZ5UGF0aChwLCBmbiA9IChkaXIsIGJhc2UsIGV4dCkgPT4gW2RpciwgYmFzZSwgZXh0XSkKKCkgPT4KQXBwZW5kVG9GaWxlbmFtZShwLCBzdHIgPSAnJykKKGRpciwgYmFzZSwgZXh0KSA9PgpTZXRTVkdCYWNrZ3JvdW5kKHhtbCwgY29sb3IgPSAnI2ZmZmZmZicpCihlLCBuKSA9PgooZSwgbikgPT4KKGUsIG4pID0+CihlLCBuKSA9PgpGaWxlRnVuY3Rpb24gPSAoZm4sIHJmbiA9IFJlYWRGaWxlLCB3Zm4gPSBXcml0ZUZpbGUsIG5hbWVmbiA9IG4gPT4gbiwgLi4uYXJncykgPT4KKGZpbGVuYW1lLCAuLi5hcmdzKSA9PgpuID0+CmRhdGEgPT4KbiA9PgpQdXRSb3dzQ29sdW1ucyhyb3dzKQooYWNjLCByb3cpID0+CiAgcm93ID0+Cihjb2wsIGkpID0+CkdldExpYnJhcnkoZSkKRWxlbWVudE5hbWUoZSkKR2V0Um90YXRpb24oZWxlbWVudCkKUGFja2FnZTJDaXJjdWl0KHApCih7IHgsIHkgfSkgPT4KICBwdCA9PgogIHB0ID0+Cih7IHggfSkgPT4KKHsgeSB9KSA9PgogIHB0ID0+CiAgcHQgPT4KICBjb29yZCA9PgogIHggPT4KICB5ID0+Cih7IHgsIHkgfSkgPT4KKHsgeCwgeSB9KSA9PgpDb250YWN0cmVmMkNpcmN1aXQoY3JlZikKICBlID0+ClNpZ25hbDJDaXJjdWl0KHMpCkVsZW1lbnQyQ2lyY3VpdChlbGVtZW50KQpHZXRVc2VkUGFja2FnZXMoZG9jID0gcHJvamVjdC5ib2FyZCkKICBlID0+CkdldFBhY2thZ2VQaXRjaChwa2cpCiAgcGFkID0+CkVhZ2xlMkNpcmN1aXQoZG9jID0gcHJvamVjdC5ib2FyZCwgd2lkdGggPSAxMDAsIGhlaWdodCA9IDEwMCkKRWFnbGUyQ2lyY3VpdEpTKGRvYyA9IHByb2plY3Quc2NoZW1hdGljLCBzY2FsZSA9IDUwLCBzaGVldCA9IDApCm4gPT4KICBlID0+AAAAAAAAAABzAQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					4,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/an-tronics/eagle/lbr/l.lbr",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABzAQAAICBpc0Jyb3dzZXIgPSAoKSA9PgogIGNvbmNhdDogKC4uLmFyZ3MpID0+CiAgdGV4dDogdCA9PgogIGNvbmNhdDogKC4uLmFyZ3MpID0+CiAgdGV4dDogKHQsIC4uLmFuc2kpID0+CiAgZGluZ2JhdENvZGUgPSBkaWdpdCA9PgogIG0gPSAociwgZywgYikgPT4KICBjID0+CiAgbSA9IChyLCBnLCBiKSA9PgogIGMgPT4KICBkdW1wID0gKG8sIGRlcHRoID0gMiwgYnJlYWtMZW5ndGggPSA0MDApID0+CiAgaXNFbGVtZW50ID0gbyA9PgogIHBhcnNlQXJncyA9IGFyZ3MgPT4KICAucHJlZGljYXRlID0gaXQgPT4KICAucHJlZGljYXRlID0gdiA9PgogIC5wcmVkaWNhdGUgPSB2ID0+CiAgdHJhdmVyc2UgPSBmdW5jdGlvbioob2JqLCBwYXRoID0gW10sIGRvYykAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					5,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/geom/rect.js",
						"symkeys":
						[
							[
								318,
								337
							],
							[
								623,
								631
							],
							[
								1495,
								1501
							],
							[
								1932,
								1938
							],
							[
								3039,
								3063
							],
							[
								3149,
								3153
							],
							[
								3166,
								3170
							],
							[
								3212,
								3247
							],
							[
								3418,
								3453
							],
							[
								3673,
								3677
							],
							[
								3716,
								3752
							],
							[
								3814,
								3818
							],
							[
								3849,
								3884
							],
							[
								3925,
								3970
							],
							[
								4014,
								4022
							],
							[
								4209,
								4213
							],
							[
								4235,
								4240
							],
							[
								4269,
								4279
							],
							[
								4415,
								4419
							],
							[
								4441,
								4446
							],
							[
								4488,
								4498
							],
							[
								4584,
								4588
							],
							[
								4610,
								4615
							],
							[
								4644,
								4654
							],
							[
								4771,
								4775
							],
							[
								4797,
								4802
							],
							[
								4845,
								4855
							],
							[
								4922,
								4926
							],
							[
								4950,
								4955
							],
							[
								4969,
								4973
							],
							[
								5034,
								5038
							],
							[
								5067,
								5072
							],
							[
								5143,
								5147
							],
							[
								5177,
								5182
							],
							[
								5258,
								5265
							],
							[
								5325,
								5330
							],
							[
								5377,
								5382
							],
							[
								5482,
								5489
							],
							[
								5539,
								5549
							],
							[
								5618,
								5622
							],
							[
								5648,
								5653
							],
							[
								5694,
								5698
							],
							[
								5750,
								5754
							],
							[
								5778,
								5783
							],
							[
								5901,
								5905
							],
							[
								5930,
								5935
							],
							[
								6595,
								6650
							],
							[
								6654,
								6662
							],
							[
								6714,
								6718
							],
							[
								6749,
								6790
							],
							[
								6802,
								6807
							],
							[
								6848,
								6852
							],
							[
								6894,
								6933
							],
							[
								7151,
								7189
							],
							[
								7194,
								7199
							],
							[
								7237,
								7241
							],
							[
								7296,
								7334
							],
							[
								7339,
								7344
							],
							[
								7382,
								7386
							],
							[
								7440,
								7479
							],
							[
								7508,
								7513
							],
							[
								7548,
								7552
							],
							[
								7600,
								7639
							],
							[
								7668,
								7673
							],
							[
								7708,
								7712
							],
							[
								7760,
								7798
							],
							[
								8039,
								8076
							],
							[
								8393,
								8432
							],
							[
								8510,
								8598
							],
							[
								8690,
								8694
							],
							[
								8738,
								8747
							],
							[
								8872,
								8888
							],
							[
								9141,
								9189
							],
							[
								9194,
								9199
							],
							[
								9310,
								9343
							],
							[
								9364,
								9369
							],
							[
								9405,
								9409
							],
							[
								9446,
								9622
							],
							[
								9740,
								9774
							],
							[
								9896,
								9931
							],
							[
								10009,
								10052
							],
							[
								10098,
								10103
							],
							[
								10152,
								10162
							],
							[
								10196,
								10206
							],
							[
								10526,
								10582
							],
							[
								10586,
								10604
							],
							[
								10612,
								10625
							],
							[
								10649,
								10653
							],
							[
								10757,
								10805
							],
							[
								11539,
								11581
							],
							[
								11717,
								11781
							],
							[
								12276,
								12322
							],
							[
								12485,
								12517
							],
							[
								12554,
								12592
							],
							[
								12769,
								12773
							],
							[
								12802,
								12815
							],
							[
								12912,
								12916
							],
							[
								12943,
								12968
							],
							[
								13078,
								13099
							],
							[
								13158,
								13165
							],
							[
								13181,
								13208
							],
							[
								13270,
								13309
							],
							[
								13310,
								13314
							],
							[
								13356,
								13376
							],
							[
								13377,
								13381
							],
							[
								13411,
								13442
							],
							[
								13493,
								13521
							],
							[
								13569,
								13598
							],
							[
								13648,
								13669
							],
							[
								13732,
								13751
							],
							[
								13782,
								13812
							],
							[
								13922,
								13947
							],
							[
								13991,
								14007
							],
							[
								14244,
								14279
							],
							[
								14598,
								14617
							],
							[
								14618,
								14622
							],
							[
								14681,
								14717
							],
							[
								15005,
								15031
							],
							[
								15338,
								15355
							],
							[
								15419,
								15443
							],
							[
								15534,
								15549
							],
							[
								15647,
								15651
							],
							[
								15666,
								15684
							],
							[
								15751,
								15755
							],
							[
								15767,
								15771
							],
							[
								15783,
								15788
							],
							[
								15831,
								15860
							],
							[
								15931,
								15935
							],
							[
								15998,
								16009
							],
							[
								16166,
								16172
							],
							[
								16190,
								16235
							],
							[
								16486,
								16490
							]
						],
						"symlist":
						[
							" function Rect(arg)",
							"field =>",
							"arg =>",
							"arg =>",
							"Rect.fromString = str =>",
							"m =>",
							"Rect",
							"Rect.prototype.clone = function(fn)",
							"Rect.prototype.corners = function()",
							"Rect",
							"Rect.prototype.isSquare = function()",
							"Rect",
							"Rect.prototype.getArea = function()",
							"Rect.prototype.toSource = function(opts = {})",
							"c = t =>",
							"Rect",
							"get()",
							"set(value)",
							"Rect",
							"get()",
							"set(value)",
							"Rect",
							"get()",
							"set(value)",
							"Rect",
							"get()",
							"set(value)",
							"Rect",
							"get()",
							"Rect",
							"Rect",
							"get()",
							"Rect",
							"get()",
							"rect =>",
							" k =>",
							" v =>",
							"rect =>",
							" k => v =>",
							"Rect",
							"get()",
							"Rect",
							"Rect",
							"get()",
							"Rect",
							"get()",
							"Rect.prototype.points = function(ctor = items => Array.",
							"(items))",
							"Rect",
							"Rect.prototype.equals = function(...args)",
							"Point",
							"Size",
							"Rect.prototype.scale = function(factor)",
							"Rect.prototype.mul = function(...args)",
							"Point",
							"Size",
							"Rect.prototype.div = function(...args)",
							"Point",
							"Size",
							"Rect.prototype.quot = function(...args)",
							"Point",
							"Size",
							"Rect.prototype.prod = function(...args)",
							"Point",
							"Size",
							"Rect.prototype.outset = function(...a)",
							"Rect.prototype.inset = function(...a)",
							"Rect.prototype.inside = function(point)",
							"Rect.prototype.fit = function(other, align = Align.CENTER | Align.MIDDLE | Rect.CONTAIN)",
							"Size",
							"(a, b) =>",
							"(acc, factor) =>",
							"Rect.prototype.pointFromCenter = function(point)",
							"Point",
							"Rect.prototype.toCSS = function()",
							"Point",
							"Size",
							"Rect.prototype.toSVG = function(factory = (tagName, attributes, children) => ({ tagName, attributes, children }), attrs = { stroke: '#000', fill: 'none' }, parent = null, prec)",
							"Rect.prototype.toTRBL = function()",
							"Rect.prototype.toArray = function()",
							"Rect.prototype.toPoints = function(...args)",
							"() =>",
							" points =>",
							" points =>",
							"Rect.prototype.toLines = function(ctor = lines => Array.",
							"(lines, points => ",
							"(...points)))",
							"Rect",
							"Rect.prototype.align = function(align_to, a = 0)",
							"Rect.prototype.roundTo = function(...args)",
							"Rect.prototype.round = function(precision = 0.001, digits, type)",
							"Rect.prototype.toObject = function(bb = false)",
							"Rect.prototype.bbox = function()",
							"Rect.prototype.transform = function(m)",
							"Rect",
							" function* ()",
							"Rect",
							" function(depth, options)",
							"Rect.isBBox = rect =>",
							"prop =>",
							"Rect.assign = (to, rect) =>",
							"Rect.align = (rect, align_to, a = 0) =>",
							"Rect",
							"Rect.toCSS = rect =>",
							"Rect",
							"Rect.round = (rect, ...args) =>",
							"Rect.inset = (rect, trbl) =>",
							"Rect.outset = (rect, trbl) =>",
							"Rect.center = rect =>",
							"Rect.bind = rect =>",
							"Rect.inside = (rect, point) =>",
							"Rect.from = function(obj)",
							"fn = (v1, v2) =>",
							"Rect.fromCircle = function(...args)",
							" (rect, ...args) =>",
							"Rect",
							"Rect.toSource = (rect, opts = {}) =>",
							"Rect.bind = (o, p, gen) =>",
							"(rect, sx, sy) =>",
							"(rect, width, height) =>",
							"(rect, x, y) =>",
							"Rect",
							" function(...args)",
							"Rect",
							"Size",
							"Point",
							"testFn = (prop, name, obj) =>",
							"n =>",
							" function()",
							" () =>",
							"Rect.prototype.toString = function(opts = {})",
							"p =>"
						]
					},
					"AQAAAAAAAAAAAAAAPAoAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					6,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/an-tronics/eagle/RX-FM-Radio-1.5V-dip.brd",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA8CgAAUmVjdChhcmcpCiAgZmllbGQgPT4KICBhcmcgPT4KICBhcmcgPT4KUmVjdC5mcm9tU3RyaW5nID0gc3RyID0+CiAgbSA9PgpSZWN0ClJlY3QucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oZm4pClJlY3QucHJvdG90eXBlLmNvcm5lcnMgPSBmdW5jdGlvbigpClJlY3QKUmVjdC5wcm90b3R5cGUuaXNTcXVhcmUgPSBmdW5jdGlvbigpClJlY3QKUmVjdC5wcm90b3R5cGUuZ2V0QXJlYSA9IGZ1bmN0aW9uKCkKUmVjdC5wcm90b3R5cGUudG9Tb3VyY2UgPSBmdW5jdGlvbihvcHRzID0ge30pCiAgYyA9IHQgPT4KUmVjdAogIGdldCgpCiAgc2V0KHZhbHVlKQpSZWN0CiAgZ2V0KCkKICBzZXQodmFsdWUpClJlY3QKICBnZXQoKQogIHNldCh2YWx1ZSkKUmVjdAogIGdldCgpCiAgc2V0KHZhbHVlKQpSZWN0CiAgZ2V0KCkKUmVjdApSZWN0CiAgZ2V0KCkKUmVjdAogIGdldCgpCiAgcmVjdCA9PgprID0+CnYgPT4KICByZWN0ID0+CmsgPT4gdiA9PgpSZWN0CiAgZ2V0KCkKUmVjdApSZWN0CiAgZ2V0KCkKUmVjdAogIGdldCgpClJlY3QucHJvdG90eXBlLnBvaW50cyA9IGZ1bmN0aW9uKGN0b3IgPSBpdGVtcyA9PiBBcnJheS4KKGl0ZW1zKSkKUmVjdApSZWN0LnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiguLi5hcmdzKQpQb2ludApTaXplClJlY3QucHJvdG90eXBlLnNjYWxlID0gZnVuY3Rpb24oZmFjdG9yKQpSZWN0LnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiguLi5hcmdzKQpQb2ludApTaXplClJlY3QucHJvdG90eXBlLmRpdiA9IGZ1bmN0aW9uKC4uLmFyZ3MpClBvaW50ClNpemUKUmVjdC5wcm90b3R5cGUucXVvdCA9IGZ1bmN0aW9uKC4uLmFyZ3MpClBvaW50ClNpemUKUmVjdC5wcm90b3R5cGUucHJvZCA9IGZ1bmN0aW9uKC4uLmFyZ3MpClBvaW50ClNpemUKUmVjdC5wcm90b3R5cGUub3V0c2V0ID0gZnVuY3Rpb24oLi4uYSkKUmVjdC5wcm90b3R5cGUuaW5zZXQgPSBmdW5jdGlvbiguLi5hKQpSZWN0LnByb3RvdHlwZS5pbnNpZGUgPSBmdW5jdGlvbihwb2ludCkKUmVjdC5wcm90b3R5cGUuZml0ID0gZnVuY3Rpb24ob3RoZXIsIGFsaWduID0gQWxpZ24uQ0VOVEVSIHwgQWxpZ24uTUlERExFIHwgUmVjdC5DT05UQUlOKQpTaXplCihhLCBiKSA9PgooYWNjLCBmYWN0b3IpID0+ClJlY3QucHJvdG90eXBlLnBvaW50RnJvbUNlbnRlciA9IGZ1bmN0aW9uKHBvaW50KQpQb2ludApSZWN0LnByb3RvdHlwZS50b0NTUyA9IGZ1bmN0aW9uKCkKUG9pbnQKU2l6ZQpSZWN0LnByb3RvdHlwZS50b1NWRyA9IGZ1bmN0aW9uKGZhY3RvcnkgPSAodGFnTmFtZSwgYXR0cmlidXRlcywgY2hpbGRyZW4pID0+ICh7IHRhZ05hbWUsIGF0dHJpYnV0ZXMsIGNoaWxkcmVuIH0pLCBhdHRycyA9IHsgc3Ryb2tlOiAnIzAwMCcsIGZpbGw6ICdub25lJyB9LCBwYXJlbnQgPSBudWxsLCBwcmVjKQpSZWN0LnByb3RvdHlwZS50b1RSQkwgPSBmdW5jdGlvbigpClJlY3QucHJvdG90eXBlLnRvQXJyYXkgPSBmdW5jdGlvbigpClJlY3QucHJvdG90eXBlLnRvUG9pbnRzID0gZnVuY3Rpb24oLi4uYXJncykKKCkgPT4KcG9pbnRzID0+CnBvaW50cyA9PgpSZWN0LnByb3RvdHlwZS50b0xpbmVzID0gZnVuY3Rpb24oY3RvciA9IGxpbmVzID0+IEFycmF5LgoobGluZXMsIHBvaW50cyA9PiAKKC4uLnBvaW50cykpKQpSZWN0ClJlY3QucHJvdG90eXBlLmFsaWduID0gZnVuY3Rpb24oYWxpZ25fdG8sIGEgPSAwKQpSZWN0LnByb3RvdHlwZS5yb3VuZFRvID0gZnVuY3Rpb24oLi4uYXJncykKUmVjdC5wcm90b3R5cGUucm91bmQgPSBmdW5jdGlvbihwcmVjaXNpb24gPSAwLjAwMSwgZGlnaXRzLCB0eXBlKQpSZWN0LnByb3RvdHlwZS50b09iamVjdCA9IGZ1bmN0aW9uKGJiID0gZmFsc2UpClJlY3QucHJvdG90eXBlLmJib3ggPSBmdW5jdGlvbigpClJlY3QucHJvdG90eXBlLnRyYW5zZm9ybSA9IGZ1bmN0aW9uKG0pClJlY3QKKCkKUmVjdApmdW5jdGlvbihkZXB0aCwgb3B0aW9ucykKUmVjdC5pc0JCb3ggPSByZWN0ID0+CiAgcHJvcCA9PgpSZWN0LmFzc2lnbiA9ICh0bywgcmVjdCkgPT4KUmVjdC5hbGlnbiA9IChyZWN0LCBhbGlnbl90bywgYSA9IDApID0+ClJlY3QKUmVjdC50b0NTUyA9IHJlY3QgPT4KUmVjdApSZWN0LnJvdW5kID0gKHJlY3QsIC4uLmFyZ3MpID0+ClJlY3QuaW5zZXQgPSAocmVjdCwgdHJibCkgPT4KUmVjdC5vdXRzZXQgPSAocmVjdCwgdHJibCkgPT4KUmVjdC5jZW50ZXIgPSByZWN0ID0+ClJlY3QuYmluZCA9IHJlY3QgPT4KUmVjdC5pbnNpZGUgPSAocmVjdCwgcG9pbnQpID0+ClJlY3QuZnJvbSA9IGZ1bmN0aW9uKG9iaikKICBmbiA9ICh2MSwgdjIpID0+ClJlY3QuZnJvbUNpcmNsZSA9IGZ1bmN0aW9uKC4uLmFyZ3MpCihyZWN0LCAuLi5hcmdzKSA9PgpSZWN0ClJlY3QudG9Tb3VyY2UgPSAocmVjdCwgb3B0cyA9IHt9KSA9PgpSZWN0LmJpbmQgPSAobywgcCwgZ2VuKSA9PgoocmVjdCwgc3gsIHN5KSA9PgoocmVjdCwgd2lkdGgsIGhlaWdodCkgPT4KKHJlY3QsIHgsIHkpID0+ClJlY3QKZnVuY3Rpb24oLi4uYXJncykKUmVjdApTaXplClBvaW50CiAgdGVzdEZuID0gKHByb3AsIG5hbWUsIG9iaikgPT4KICBuID0+CmZ1bmN0aW9uKCkKKCkgPT4KUmVjdC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbihvcHRzID0ge30pCiAgcCA9PgAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					1,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					2,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					3,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					4,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/an-tronics/eagle/github-userscript.js",
						"symkeys":
						[
							[
								322,
								332
							],
							[
								365,
								380
							],
							[
								490,
								494
							]
						],
						"symlist":
						[
							"function()",
							".getRepos=() =>",
							"e =>"
						]
					},
					"AQAAAAAAAAAAAAAAJQAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					5,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/an-tronics/eagle/RX-FM-Radio-1.5V-dip.brd",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAlAAAAICBmdW5jdGlvbigpCiAgLmdldFJlcG9zPSgpID0+CiAgZSA9PgAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					1,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					2,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/github-userscript.js",
						"symkeys":
						[
							[
								322,
								332
							],
							[
								365,
								380
							],
							[
								490,
								494
							]
						],
						"symlist":
						[
							"function()",
							".getRepos=() =>",
							"e =>"
						]
					},
					"AQAAAAAAAAAAAAAAJQAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					3,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAlAAAAICBmdW5jdGlvbigpCiAgLmdldFJlcG9zPSgpID0+CiAgZSA9PgAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					4,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/github-userscript.js",
						"symkeys":
						[
							[
								322,
								332
							],
							[
								365,
								380
							],
							[
								490,
								494
							]
						],
						"symlist":
						[
							"function()",
							".getRepos=() =>",
							"e =>"
						]
					},
					"AQAAAAAAAAAAAAAAJQAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					5,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/github-userscript.js",
						"symkeys":
						[
							[
								322,
								332
							],
							[
								365,
								380
							],
							[
								490,
								494
							],
							[
								599,
								617
							]
						],
						"symlist":
						[
							"function()",
							".getRepos=() =>",
							"e =>",
							".parseXML=xmlStr=>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAlAAAAICBmdW5jdGlvbigpCiAgLmdldFJlcG9zPSgpID0+CiAgZSA9PgAAAAAAAAAAOgAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					6,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/github-userscript.js",
						"symkeys":
						[
							[
								322,
								333
							],
							[
								361,
								378
							],
							[
								492,
								496
							],
							[
								621,
								642
							],
							[
								752,
								770
							],
							[
								1474,
								1478
							]
						],
						"symlist":
						[
							"function ()",
							".getRepos = () =>",
							"e =>",
							".parseXML = xmlStr =>",
							".fetchURL = url =>",
							"r =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA6AAAAICBmdW5jdGlvbigpCiAgLmdldFJlcG9zPSgpID0+CiAgZSA9PgogIC5wYXJzZVhNTD14bWxTdHI9PgAAAAAAAAAAUQAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					7,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/github-userscript.js",
						"symkeys":
						[
							[
								322,
								333
							],
							[
								361,
								378
							],
							[
								492,
								496
							],
							[
								621,
								642
							],
							[
								750,
								768
							],
							[
								1486,
								1490
							],
							[
								1513,
								1546
							],
							[
								1686,
								1696
							]
						],
						"symlist":
						[
							"function ()",
							".getRepos = () =>",
							"e =>",
							".parseXML = xmlStr =>",
							".fetchURL = url =>",
							"r =>",
							".getPage = (url = window.href) =>",
							"get: () =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABRAAAAKCkKICAuZ2V0UmVwb3MgPSAoKSA9PgogIGUgPT4KICAucGFyc2VYTUwgPSB4bWxTdHIgPT4KICAuZmV0Y2hVUkwgPSB1cmwgPT4KICByID0+AAAAAAAAAACCAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					8,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/github-userscript.js",
						"symkeys":
						[
							[
								331,
								348
							],
							[
								462,
								466
							],
							[
								591,
								612
							],
							[
								720,
								738
							],
							[
								1456,
								1460
							],
							[
								1481,
								1514
							],
							[
								1667,
								1677
							]
						],
						"symlist":
						[
							".getRepos = () =>",
							"e =>",
							".parseXML = xmlStr =>",
							".fetchURL = url =>",
							"r =>",
							".getPage = (url = window.href) =>",
							"get: () =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACCAAAAKCkKICAuZ2V0UmVwb3MgPSAoKSA9PgogIGUgPT4KICAucGFyc2VYTUwgPSB4bWxTdHIgPT4KICAuZmV0Y2hVUkwgPSB1cmwgPT4KICByID0+CiAgLmdldFBhZ2UgPSAodXJsID0gd2luZG93LmhyZWYpID0+CiAgZ2V0OiAoKSA9PgAAAAAAAAAAfwAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					9,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/github-userscript.js",
						"symkeys":
						[
							[
								327,
								344
							],
							[
								456,
								460
							],
							[
								577,
								598
							],
							[
								698,
								716
							],
							[
								1392,
								1396
							],
							[
								1415,
								1448
							],
							[
								1593,
								1603
							]
						],
						"symlist":
						[
							".getRepos = () =>",
							"e =>",
							".parseXML = xmlStr =>",
							".fetchURL = url =>",
							"r =>",
							".getPage = (url = window.href) =>",
							"get: () =>"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAAB/AAAAICAuZ2V0UmVwb3MgPSAoKSA9PgogIGUgPT4KICAucGFyc2VYTUwgPSB4bWxTdHIgPT4KICAuZmV0Y2hVUkwgPSB1cmwgPT4KICByID0+CiAgLmdldFBhZ2UgPSAodXJsID0gd2luZG93LmhyZWYpID0+CiAgZ2V0OiAoKSA9PgAAAAAAAAAAfwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH8AAAAgIC5nZXRSZXBvcyA9ICgpID0+CiAgZSA9PgogIC5wYXJzZVhNTCA9IHhtbFN0ciA9PgogIC5mZXRjaFVSTCA9IHVybCA9PgogIHIgPT4KICAuZ2V0UGFnZSA9ICh1cmwgPSB3aW5kb3cuaHJlZikgPT4KICBnZXQ6ICgpID0+AAAAAAAAAAB/AAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					10,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/github-userscript.js",
						"symkeys":
						[
							[
								322,
								351
							],
							[
								358,
								361
							],
							[
								415,
								447
							],
							[
								689,
								706
							],
							[
								818,
								822
							],
							[
								939,
								960
							],
							[
								1060,
								1078
							],
							[
								1754,
								1758
							],
							[
								1777,
								1810
							],
							[
								1968,
								1973
							]
						],
						"symlist":
						[
							"function memoize(fn, cache = ",
							"())",
							" function Memoize(n, ...rest)",
							".getRepos = () =>",
							"e =>",
							".parseXML = xmlStr =>",
							".fetchURL = url =>",
							"r =>",
							".getPage = (url = window.href) =>",
							"() =>"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAAB/AAAAICAuZ2V0UmVwb3MgPSAoKSA9PgogIGUgPT4KICAucGFyc2VYTUwgPSB4bWxTdHIgPT4KICAuZmV0Y2hVUkwgPSB1cmwgPT4KICByID0+CiAgLmdldFBhZ2UgPSAodXJsID0gd2luZG93LmhyZWYpID0+CiAgZ2V0OiAoKSA9PgAAAAAAAAAApwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKcAAAAgIG1lbW9pemUoZm4sIGNhY2hlID0gCigpKQpNZW1vaXplKG4sIC4uLnJlc3QpCiAgLmdldFJlcG9zID0gKCkgPT4KICBlID0+CiAgLnBhcnNlWE1MID0geG1sU3RyID0+CiAgLmZldGNoVVJMID0gdXJsID0+CiAgciA9PgogIC5nZXRQYWdlID0gKHVybCA9IHdpbmRvdy5ocmVmKSA9PgooKSA9PgAAAAAAAAAApwAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					11,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/github-userscript.js",
						"symkeys":
						[
							[
								321,
								352
							],
							[
								763,
								792
							],
							[
								799,
								802
							],
							[
								823,
								855
							],
							[
								1023,
								1040
							],
							[
								1152,
								1156
							],
							[
								1273,
								1294
							],
							[
								1394,
								1412
							],
							[
								2088,
								2092
							],
							[
								2111,
								2144
							],
							[
								2302,
								2307
							]
						],
						"symlist":
						[
							" function define(obj, ...args)",
							"function memoize(fn, cache = ",
							"())",
							" function Memoize(n, ...rest)",
							".getRepos = () =>",
							"e =>",
							".parseXML = xmlStr =>",
							".fetchURL = url =>",
							"r =>",
							".getPage = (url = window.href) =>",
							"() =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACnAAAAICBtZW1vaXplKGZuLCBjYWNoZSA9IAooKSkKTWVtb2l6ZShuLCAuLi5yZXN0KQogIC5nZXRSZXBvcyA9ICgpID0+CiAgZSA9PgogIC5wYXJzZVhNTCA9IHhtbFN0ciA9PgogIC5mZXRjaFVSTCA9IHVybCA9PgogIHIgPT4KICAuZ2V0UGFnZSA9ICh1cmwgPSB3aW5kb3cuaHJlZikgPT4KKCkgPT4AAAAAAAAAAL4AAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					12,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/github-userscript.js",
						"symkeys":
						[
							[
								321,
								350
							],
							[
								761,
								790
							],
							[
								797,
								800
							],
							[
								820,
								852
							],
							[
								1018,
								1035
							],
							[
								1147,
								1151
							],
							[
								1268,
								1289
							],
							[
								1389,
								1407
							],
							[
								2083,
								2087
							],
							[
								2106,
								2139
							],
							[
								2297,
								2302
							]
						],
						"symlist":
						[
							"function define(obj, ...args)",
							"function memoize(fn, cache = ",
							"())",
							" function Memoize(n, ...rest)",
							".getRepos = () =>",
							"e =>",
							".parseXML = xmlStr =>",
							".fetchURL = url =>",
							"r =>",
							".getPage = (url = window.href) =>",
							"() =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC+AAAAICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIG1lbW9pemUoZm4sIGNhY2hlID0gCigpKQpNZW1vaXplKG4sIC4uLnJlc3QpCiAgLmdldFJlcG9zID0gKCkgPT4KICBlID0+CiAgLnBhcnNlWE1MID0geG1sU3RyID0+CiAgLmZldGNoVVJMID0gdXJsID0+CiAgciA9PgogIC5nZXRQYWdlID0gKHVybCA9IHdpbmRvdy5ocmVmKSA9PgooKSA9PgAAAAAAAAAAvgAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					13,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/github-userscript.js",
						"symkeys":
						[
							[
								321,
								350
							],
							[
								761,
								790
							],
							[
								797,
								800
							],
							[
								820,
								852
							],
							[
								1018,
								1035
							],
							[
								1147,
								1151
							],
							[
								1268,
								1289
							],
							[
								1389,
								1407
							],
							[
								2083,
								2087
							],
							[
								2106,
								2139
							],
							[
								2297,
								2302
							],
							[
								2400,
								2405
							]
						],
						"symlist":
						[
							"function define(obj, ...args)",
							"function memoize(fn, cache = ",
							"())",
							" function Memoize(n, ...rest)",
							".getRepos = () =>",
							"e =>",
							".parseXML = xmlStr =>",
							".fetchURL = url =>",
							"r =>",
							".getPage = (url = window.href) =>",
							"() =>",
							"() =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC+AAAAICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIG1lbW9pemUoZm4sIGNhY2hlID0gCigpKQpNZW1vaXplKG4sIC4uLnJlc3QpCiAgLmdldFJlcG9zID0gKCkgPT4KICBlID0+CiAgLnBhcnNlWE1MID0geG1sU3RyID0+CiAgLmZldGNoVVJMID0gdXJsID0+CiAgciA9PgogIC5nZXRQYWdlID0gKHVybCA9IHdpbmRvdy5ocmVmKSA9PgooKSA9PgAAAAAAAAAAxAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					14,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/github-userscript.js",
						"symkeys":
						[
							[
								321,
								350
							],
							[
								761,
								790
							],
							[
								797,
								800
							],
							[
								820,
								852
							],
							[
								1018,
								1035
							],
							[
								1147,
								1151
							],
							[
								1268,
								1289
							],
							[
								1389,
								1407
							],
							[
								2083,
								2087
							],
							[
								2106,
								2139
							],
							[
								2297,
								2302
							],
							[
								2400,
								2411
							]
						],
						"symlist":
						[
							"function define(obj, ...args)",
							"function memoize(fn, cache = ",
							"())",
							" function Memoize(n, ...rest)",
							".getRepos = () =>",
							"e =>",
							".parseXML = xmlStr =>",
							".fetchURL = url =>",
							"r =>",
							".getPage = (url = window.href) =>",
							"() =>",
							"function ()"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAADEAAAAICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIG1lbW9pemUoZm4sIGNhY2hlID0gCigpKQpNZW1vaXplKG4sIC4uLnJlc3QpCiAgLmdldFJlcG9zID0gKCkgPT4KICBlID0+CiAgLnBhcnNlWE1MID0geG1sU3RyID0+CiAgLmZldGNoVVJMID0gdXJsID0+CiAgciA9PgogIC5nZXRQYWdlID0gKHVybCA9IHdpbmRvdy5ocmVmKSA9PgooKSA9PgooKSA9PgAAAAAAAAAAwQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMEAAAAgIGRlZmluZShvYmosIC4uLmFyZ3MpCiAgbWVtb2l6ZShmbiwgY2FjaGUgPSAKKCkpCk1lbW9pemUobiwgLi4ucmVzdCkKICAuZ2V0UmVwb3MgPSAoKSA9PgogIGUgPT4KICAucGFyc2VYTUwgPSB4bWxTdHIgPT4KICAuZmV0Y2hVUkwgPSB1cmwgPT4KICByID0+CiAgLmdldFBhZ2UgPSAodXJsID0gd2luZG93LmhyZWYpID0+CigpID0+CigpAAAAAAAAAADBAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					15,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/github-userscript.js",
						"symkeys":
						[
							[
								321,
								350
							],
							[
								761,
								790
							],
							[
								797,
								800
							],
							[
								820,
								852
							],
							[
								1018,
								1035
							],
							[
								1147,
								1151
							],
							[
								1268,
								1289
							],
							[
								1389,
								1407
							],
							[
								2083,
								2087
							],
							[
								2106,
								2139
							],
							[
								2299,
								2304
							],
							[
								2415,
								2426
							]
						],
						"symlist":
						[
							"function define(obj, ...args)",
							"function memoize(fn, cache = ",
							"())",
							" function Memoize(n, ...rest)",
							".getRepos = () =>",
							"e =>",
							".parseXML = xmlStr =>",
							".fetchURL = url =>",
							"r =>",
							".getPage = (url = window.href) =>",
							"() =>",
							"function ()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADBAAAAICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIG1lbW9pemUoZm4sIGNhY2hlID0gCigpKQpNZW1vaXplKG4sIC4uLnJlc3QpCiAgLmdldFJlcG9zID0gKCkgPT4KICBlID0+CiAgLnBhcnNlWE1MID0geG1sU3RyID0+CiAgLmZldGNoVVJMID0gdXJsID0+CiAgciA9PgogIC5nZXRQYWdlID0gKHVybCA9IHdpbmRvdy5ocmVmKSA9PgooKSA9PgooKQAAAAAAAAAAwQAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					16,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/github-userscript.js",
						"symkeys":
						[
							[
								321,
								350
							],
							[
								761,
								790
							],
							[
								797,
								800
							],
							[
								820,
								852
							],
							[
								1018,
								1035
							],
							[
								1147,
								1151
							],
							[
								1268,
								1289
							],
							[
								1389,
								1407
							],
							[
								2083,
								2087
							],
							[
								2106,
								2139
							],
							[
								2299,
								2304
							],
							[
								2415,
								2426
							]
						],
						"symlist":
						[
							"function define(obj, ...args)",
							"function memoize(fn, cache = ",
							"())",
							" function Memoize(n, ...rest)",
							".getRepos = () =>",
							"e =>",
							".parseXML = xmlStr =>",
							".fetchURL = url =>",
							"r =>",
							".getPage = (url = window.href) =>",
							"() =>",
							"function ()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADBAAAAICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIG1lbW9pemUoZm4sIGNhY2hlID0gCigpKQpNZW1vaXplKG4sIC4uLnJlc3QpCiAgLmdldFJlcG9zID0gKCkgPT4KICBlID0+CiAgLnBhcnNlWE1MID0geG1sU3RyID0+CiAgLmZldGNoVVJMID0gdXJsID0+CiAgciA9PgogIC5nZXRQYWdlID0gKHVybCA9IHdpbmRvdy5ocmVmKSA9PgooKSA9PgooKQAAAAAAAAAAwQAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					17,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/github-userscript.js",
						"symkeys":
						[
							[
								321,
								350
							],
							[
								761,
								790
							],
							[
								797,
								800
							],
							[
								820,
								852
							],
							[
								1018,
								1035
							],
							[
								1147,
								1151
							],
							[
								1268,
								1289
							],
							[
								1389,
								1407
							],
							[
								2083,
								2087
							],
							[
								2106,
								2139
							],
							[
								2299,
								2304
							],
							[
								2415,
								2426
							],
							[
								2537,
								2556
							],
							[
								2584,
								2599
							]
						],
						"symlist":
						[
							"function define(obj, ...args)",
							"function memoize(fn, cache = ",
							"())",
							" function Memoize(n, ...rest)",
							".getRepos = () =>",
							"e =>",
							".parseXML = xmlStr =>",
							".fetchURL = url =>",
							"r =>",
							".getPage = (url = window.href) =>",
							"() =>",
							"function ()",
							".makeQuery = obj =>",
							"(s,[n,v], i) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADBAAAAICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIG1lbW9pemUoZm4sIGNhY2hlID0gCigpKQpNZW1vaXplKG4sIC4uLnJlc3QpCiAgLmdldFJlcG9zID0gKCkgPT4KICBlID0+CiAgLnBhcnNlWE1MID0geG1sU3RyID0+CiAgLmZldGNoVVJMID0gdXJsID0+CiAgciA9PgogIC5nZXRQYWdlID0gKHVybCA9IHdpbmRvdy5ocmVmKSA9PgooKSA9PgooKQAAAAAAAAAA5wAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					18,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/github-userscript.js",
						"symkeys":
						[
							[
								321,
								350
							],
							[
								761,
								790
							],
							[
								797,
								800
							],
							[
								820,
								852
							],
							[
								1018,
								1035
							],
							[
								1147,
								1151
							],
							[
								1268,
								1289
							],
							[
								1389,
								1407
							],
							[
								2083,
								2087
							],
							[
								2106,
								2139
							],
							[
								2299,
								2304
							],
							[
								2415,
								2426
							],
							[
								2537,
								2556
							],
							[
								2584,
								2599
							]
						],
						"symlist":
						[
							"function define(obj, ...args)",
							"function memoize(fn, cache = ",
							"())",
							" function Memoize(n, ...rest)",
							".getRepos = () =>",
							"e =>",
							".parseXML = xmlStr =>",
							".fetchURL = url =>",
							"r =>",
							".getPage = (url = window.href) =>",
							"() =>",
							"function ()",
							".makeQuery = obj =>",
							"(s,[n,v], i) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADnAAAAICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIG1lbW9pemUoZm4sIGNhY2hlID0gCigpKQpNZW1vaXplKG4sIC4uLnJlc3QpCiAgLmdldFJlcG9zID0gKCkgPT4KICBlID0+CiAgLnBhcnNlWE1MID0geG1sU3RyID0+CiAgLmZldGNoVVJMID0gdXJsID0+CiAgciA9PgogIC5nZXRQYWdlID0gKHVybCA9IHdpbmRvdy5ocmVmKSA9PgooKSA9PgooKQogIC5tYWtlUXVlcnkgPSBvYmogPT4KKHMsW24sdl0sIGkpID0+AAAAAAAAAADnAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					19,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/github-userscript.js",
						"symkeys":
						[
							[
								321,
								350
							],
							[
								761,
								790
							],
							[
								797,
								800
							],
							[
								820,
								852
							],
							[
								1018,
								1035
							],
							[
								1147,
								1151
							],
							[
								1268,
								1289
							],
							[
								1389,
								1407
							],
							[
								2083,
								2087
							],
							[
								2106,
								2139
							],
							[
								2299,
								2304
							],
							[
								2415,
								2426
							],
							[
								2537,
								2556
							],
							[
								2584,
								2599
							]
						],
						"symlist":
						[
							"function define(obj, ...args)",
							"function memoize(fn, cache = ",
							"())",
							" function Memoize(n, ...rest)",
							".getRepos = () =>",
							"e =>",
							".parseXML = xmlStr =>",
							".fetchURL = url =>",
							"r =>",
							".getPage = (url = window.href) =>",
							"() =>",
							"function ()",
							".makeQuery = obj =>",
							"(s,[n,v], i) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADnAAAAICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIG1lbW9pemUoZm4sIGNhY2hlID0gCigpKQpNZW1vaXplKG4sIC4uLnJlc3QpCiAgLmdldFJlcG9zID0gKCkgPT4KICBlID0+CiAgLnBhcnNlWE1MID0geG1sU3RyID0+CiAgLmZldGNoVVJMID0gdXJsID0+CiAgciA9PgogIC5nZXRQYWdlID0gKHVybCA9IHdpbmRvdy5ocmVmKSA9PgooKSA9PgooKQogIC5tYWtlUXVlcnkgPSBvYmogPT4KKHMsW24sdl0sIGkpID0+AAAAAAAAAADnAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					20,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/github-userscript.js",
						"symkeys":
						[
							[
								321,
								350
							],
							[
								761,
								790
							],
							[
								797,
								800
							],
							[
								820,
								852
							],
							[
								1018,
								1035
							],
							[
								1147,
								1151
							],
							[
								1268,
								1289
							],
							[
								1389,
								1407
							],
							[
								2083,
								2087
							],
							[
								2106,
								2139
							],
							[
								2299,
								2304
							],
							[
								2415,
								2426
							],
							[
								2537,
								2556
							],
							[
								2584,
								2601
							],
							[
								2653,
								2682
							]
						],
						"symlist":
						[
							"function define(obj, ...args)",
							"function memoize(fn, cache = ",
							"())",
							" function Memoize(n, ...rest)",
							".getRepos = () =>",
							"e =>",
							".parseXML = xmlStr =>",
							".fetchURL = url =>",
							"r =>",
							".getPage = (url = window.href) =>",
							"() =>",
							"function ()",
							".makeQuery = obj =>",
							"(s, [n, v], i) =>",
							".makeURL = (base,query={}) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADnAAAAICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIG1lbW9pemUoZm4sIGNhY2hlID0gCigpKQpNZW1vaXplKG4sIC4uLnJlc3QpCiAgLmdldFJlcG9zID0gKCkgPT4KICBlID0+CiAgLnBhcnNlWE1MID0geG1sU3RyID0+CiAgLmZldGNoVVJMID0gdXJsID0+CiAgciA9PgogIC5nZXRQYWdlID0gKHVybCA9IHdpbmRvdy5ocmVmKSA9PgooKSA9PgooKQogIC5tYWtlUXVlcnkgPSBvYmogPT4KKHMsW24sdl0sIGkpID0+AAAAAAAAAAAJAQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					21,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/github-userscript.js",
						"symkeys":
						[
							[
								321,
								350
							],
							[
								761,
								790
							],
							[
								797,
								800
							],
							[
								820,
								852
							],
							[
								1018,
								1035
							],
							[
								1147,
								1151
							],
							[
								1268,
								1289
							],
							[
								1389,
								1407
							],
							[
								2083,
								2087
							],
							[
								2106,
								2139
							],
							[
								2299,
								2304
							],
							[
								2415,
								2426
							],
							[
								2537,
								2556
							],
							[
								2584,
								2601
							],
							[
								2653,
								2682
							]
						],
						"symlist":
						[
							"function define(obj, ...args)",
							"function memoize(fn, cache = ",
							"())",
							" function Memoize(n, ...rest)",
							".getRepos = () =>",
							"e =>",
							".parseXML = xmlStr =>",
							".fetchURL = url =>",
							"r =>",
							".getPage = (url = window.href) =>",
							"() =>",
							"function ()",
							".makeQuery = obj =>",
							"(s, [n, v], i) =>",
							".makeURL = (base,query={}) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAJAQAAICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIG1lbW9pemUoZm4sIGNhY2hlID0gCigpKQpNZW1vaXplKG4sIC4uLnJlc3QpCiAgLmdldFJlcG9zID0gKCkgPT4KICBlID0+CiAgLnBhcnNlWE1MID0geG1sU3RyID0+CiAgLmZldGNoVVJMID0gdXJsID0+CiAgciA9PgogIC5nZXRQYWdlID0gKHVybCA9IHdpbmRvdy5ocmVmKSA9PgooKSA9PgooKQogIC5tYWtlUXVlcnkgPSBvYmogPT4KKHMsIFtuLCB2XSwgaSkgPT4KICAubWFrZVVSTCA9IChiYXNlLHF1ZXJ5PXt9KSA9PgAAAAAAAAAACQEAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					22,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/github-userscript.js",
						"symkeys":
						[
							[
								321,
								350
							],
							[
								761,
								790
							],
							[
								797,
								800
							],
							[
								820,
								852
							],
							[
								1018,
								1035
							],
							[
								1147,
								1151
							],
							[
								1268,
								1289
							],
							[
								1389,
								1407
							],
							[
								2083,
								2087
							],
							[
								2106,
								2139
							],
							[
								2299,
								2304
							],
							[
								2415,
								2426
							],
							[
								2537,
								2556
							],
							[
								2584,
								2601
							],
							[
								2653,
								2682
							]
						],
						"symlist":
						[
							"function define(obj, ...args)",
							"function memoize(fn, cache = ",
							"())",
							" function Memoize(n, ...rest)",
							".getRepos = () =>",
							"e =>",
							".parseXML = xmlStr =>",
							".fetchURL = url =>",
							"r =>",
							".getPage = (url = window.href) =>",
							"() =>",
							"function ()",
							".makeQuery = obj =>",
							"(s, [n, v], i) =>",
							".makeURL = (base,query={}) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAJAQAAICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIG1lbW9pemUoZm4sIGNhY2hlID0gCigpKQpNZW1vaXplKG4sIC4uLnJlc3QpCiAgLmdldFJlcG9zID0gKCkgPT4KICBlID0+CiAgLnBhcnNlWE1MID0geG1sU3RyID0+CiAgLmZldGNoVVJMID0gdXJsID0+CiAgciA9PgogIC5nZXRQYWdlID0gKHVybCA9IHdpbmRvdy5ocmVmKSA9PgooKSA9PgooKQogIC5tYWtlUXVlcnkgPSBvYmogPT4KKHMsIFtuLCB2XSwgaSkgPT4KICAubWFrZVVSTCA9IChiYXNlLHF1ZXJ5PXt9KSA9PgAAAAAAAAAACQEAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					23,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/github-userscript.js",
						"symkeys":
						[
							[
								321,
								350
							],
							[
								761,
								790
							],
							[
								797,
								800
							],
							[
								820,
								852
							],
							[
								1018,
								1035
							],
							[
								1147,
								1151
							],
							[
								1268,
								1289
							],
							[
								1389,
								1407
							],
							[
								2083,
								2087
							],
							[
								2106,
								2139
							],
							[
								2299,
								2304
							],
							[
								2415,
								2426
							],
							[
								2537,
								2556
							],
							[
								2584,
								2601
							],
							[
								2653,
								2690
							],
							[
								2748,
								2780
							]
						],
						"symlist":
						[
							"function define(obj, ...args)",
							"function memoize(fn, cache = ",
							"())",
							" function Memoize(n, ...rest)",
							".getRepos = () =>",
							"e =>",
							".parseXML = xmlStr =>",
							".fetchURL = url =>",
							"r =>",
							".getPage = (url = window.href) =>",
							"() =>",
							"function ()",
							".makeQuery = obj =>",
							"(s, [n, v], i) =>",
							".makeURL = (base=href, query = {}) =>",
							".nextURL = (base, query = {}) =>"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAAAJAQAAICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIG1lbW9pemUoZm4sIGNhY2hlID0gCigpKQpNZW1vaXplKG4sIC4uLnJlc3QpCiAgLmdldFJlcG9zID0gKCkgPT4KICBlID0+CiAgLnBhcnNlWE1MID0geG1sU3RyID0+CiAgLmZldGNoVVJMID0gdXJsID0+CiAgciA9PgogIC5nZXRQYWdlID0gKHVybCA9IHdpbmRvdy5ocmVmKSA9PgooKSA9PgooKQogIC5tYWtlUXVlcnkgPSBvYmogPT4KKHMsIFtuLCB2XSwgaSkgPT4KICAubWFrZVVSTCA9IChiYXNlLHF1ZXJ5PXt9KSA9PgAAAAAAAAAANAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADQBAAAgIGRlZmluZShvYmosIC4uLmFyZ3MpCiAgbWVtb2l6ZShmbiwgY2FjaGUgPSAKKCkpCk1lbW9pemUobiwgLi4ucmVzdCkKICAuZ2V0UmVwb3MgPSAoKSA9PgogIGUgPT4KICAucGFyc2VYTUwgPSB4bWxTdHIgPT4KICAuZmV0Y2hVUkwgPSB1cmwgPT4KICByID0+CiAgLmdldFBhZ2UgPSAodXJsID0gd2luZG93LmhyZWYpID0+CigpID0+CigpCiAgLm1ha2VRdWVyeSA9IG9iaiA9PgoocywgW24sIHZdLCBpKSA9PgogIC5tYWtlVVJMID0gKGJhc2U9aHJlZiwgcXVlcnkgPSB7fSkgPT4KICAubmV4dFVSTCA9IChiYXNlLCBxdWVyeSA9IHt9KSA9PgAAAAAAAAAANAEAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					24,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/github-userscript.js",
						"symkeys":
						[
							[
								321,
								350
							],
							[
								761,
								790
							],
							[
								797,
								800
							],
							[
								820,
								852
							],
							[
								1018,
								1035
							],
							[
								1147,
								1151
							],
							[
								1268,
								1289
							],
							[
								1389,
								1407
							],
							[
								2083,
								2087
							],
							[
								2106,
								2139
							],
							[
								2299,
								2304
							],
							[
								2415,
								2426
							],
							[
								2537,
								2556
							],
							[
								2584,
								2601
							],
							[
								2653,
								2690
							],
							[
								2748,
								2770
							]
						],
						"symlist":
						[
							"function define(obj, ...args)",
							"function memoize(fn, cache = ",
							"())",
							" function Memoize(n, ...rest)",
							".getRepos = () =>",
							"e =>",
							".parseXML = xmlStr =>",
							".fetchURL = url =>",
							"r =>",
							".getPage = (url = window.href) =>",
							"() =>",
							"function ()",
							".makeQuery = obj =>",
							"(s, [n, v], i) =>",
							".makeURL = (base=href, query = {}) =>",
							".nextURL = (u=href) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA0AQAAICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIG1lbW9pemUoZm4sIGNhY2hlID0gCigpKQpNZW1vaXplKG4sIC4uLnJlc3QpCiAgLmdldFJlcG9zID0gKCkgPT4KICBlID0+CiAgLnBhcnNlWE1MID0geG1sU3RyID0+CiAgLmZldGNoVVJMID0gdXJsID0+CiAgciA9PgogIC5nZXRQYWdlID0gKHVybCA9IHdpbmRvdy5ocmVmKSA9PgooKSA9PgooKQogIC5tYWtlUXVlcnkgPSBvYmogPT4KKHMsIFtuLCB2XSwgaSkgPT4KICAubWFrZVVSTCA9IChiYXNlPWhyZWYsIHF1ZXJ5ID0ge30pID0+CiAgLm5leHRVUkwgPSAoYmFzZSwgcXVlcnkgPSB7fSkgPT4AAAAAAAAAACoBAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					25,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAqAQAAICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIG1lbW9pemUoZm4sIGNhY2hlID0gCigpKQpNZW1vaXplKG4sIC4uLnJlc3QpCiAgLmdldFJlcG9zID0gKCkgPT4KICBlID0+CiAgLnBhcnNlWE1MID0geG1sU3RyID0+CiAgLmZldGNoVVJMID0gdXJsID0+CiAgciA9PgogIC5nZXRQYWdlID0gKHVybCA9IHdpbmRvdy5ocmVmKSA9PgooKSA9PgooKQogIC5tYWtlUXVlcnkgPSBvYmogPT4KKHMsIFtuLCB2XSwgaSkgPT4KICAubWFrZVVSTCA9IChiYXNlPWhyZWYsIHF1ZXJ5ID0ge30pID0+CiAgLm5leHRVUkwgPSAodT1ocmVmKSA9PgAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					26,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/github-userscript.js",
						"symkeys":
						[
							[
								321,
								350
							],
							[
								761,
								790
							],
							[
								797,
								800
							],
							[
								820,
								852
							],
							[
								1018,
								1035
							],
							[
								1147,
								1151
							],
							[
								1268,
								1289
							],
							[
								1389,
								1407
							],
							[
								2083,
								2087
							],
							[
								2106,
								2139
							],
							[
								2299,
								2304
							],
							[
								2415,
								2426
							],
							[
								2537,
								2556
							],
							[
								2584,
								2601
							],
							[
								2653,
								2692
							],
							[
								2752,
								2776
							],
							[
								2832,
								2854
							]
						],
						"symlist":
						[
							"function define(obj, ...args)",
							"function memoize(fn, cache = ",
							"())",
							" function Memoize(n, ...rest)",
							".getRepos = () =>",
							"e =>",
							".parseXML = xmlStr =>",
							".fetchURL = url =>",
							"r =>",
							".getPage = (url = window.href) =>",
							"() =>",
							"function ()",
							".makeQuery = obj =>",
							"(s, [n, v], i) =>",
							".makeURL = (base = href, query = {}) =>",
							".nextURL = (u = href) =>",
							".fetch = (u = href) =>"
						]
					},
					"AQAAAAAAAAAAAAAARwEAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					27,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/github-userscript.js",
						"symkeys":
						[
							[
								321,
								350
							],
							[
								761,
								790
							],
							[
								797,
								800
							],
							[
								820,
								852
							],
							[
								1018,
								1035
							],
							[
								1147,
								1151
							],
							[
								1268,
								1289
							],
							[
								1389,
								1407
							],
							[
								2083,
								2087
							],
							[
								2106,
								2139
							],
							[
								2299,
								2304
							],
							[
								2415,
								2426
							],
							[
								2537,
								2556
							],
							[
								2584,
								2601
							],
							[
								2653,
								2692
							],
							[
								2752,
								2776
							],
							[
								2832,
								2858
							]
						],
						"symlist":
						[
							"function define(obj, ...args)",
							"function memoize(fn, cache = ",
							"())",
							" function Memoize(n, ...rest)",
							".getRepos = () =>",
							"e =>",
							".parseXML = xmlStr =>",
							".fetchURL = url =>",
							"r =>",
							".getPage = (url = window.href) =>",
							"() =>",
							"function ()",
							".makeQuery = obj =>",
							"(s, [n, v], i) =>",
							".makeURL = (base = href, query = {}) =>",
							".nextURL = (u = href) =>",
							".fetchNext = (u = href) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABHAQAAICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIG1lbW9pemUoZm4sIGNhY2hlID0gCigpKQpNZW1vaXplKG4sIC4uLnJlc3QpCiAgLmdldFJlcG9zID0gKCkgPT4KICBlID0+CiAgLnBhcnNlWE1MID0geG1sU3RyID0+CiAgLmZldGNoVVJMID0gdXJsID0+CiAgciA9PgogIC5nZXRQYWdlID0gKHVybCA9IHdpbmRvdy5ocmVmKSA9PgooKSA9PgooKQogIC5tYWtlUXVlcnkgPSBvYmogPT4KKHMsIFtuLCB2XSwgaSkgPT4KICAubWFrZVVSTCA9IChiYXNlID0gaHJlZiwgcXVlcnkgPSB7fSkgPT4KICAubmV4dFVSTCA9ICh1ID0gaHJlZikgPT4KICAuZmV0Y2ggPSAodSA9IGhyZWYpID0+AAAAAAAAAABLAQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					28,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/github-userscript.js",
						"symkeys":
						[
							[
								321,
								350
							],
							[
								761,
								790
							],
							[
								797,
								800
							],
							[
								820,
								852
							],
							[
								1018,
								1035
							],
							[
								1147,
								1151
							],
							[
								1268,
								1289
							],
							[
								1351,
								1369
							],
							[
								2045,
								2049
							],
							[
								2068,
								2101
							],
							[
								2261,
								2266
							],
							[
								2377,
								2388
							],
							[
								2499,
								2518
							],
							[
								2546,
								2563
							],
							[
								2615,
								2654
							],
							[
								2714,
								2738
							],
							[
								2794,
								2820
							]
						],
						"symlist":
						[
							"function define(obj, ...args)",
							"function memoize(fn, cache = ",
							"())",
							" function Memoize(n, ...rest)",
							".getRepos = () =>",
							"e =>",
							".parseXML = xmlStr =>",
							".fetchURL = url =>",
							"r =>",
							".getPage = (url = window.href) =>",
							"() =>",
							"function ()",
							".makeQuery = obj =>",
							"(s, [n, v], i) =>",
							".makeURL = (base = href, query = {}) =>",
							".nextURL = (u = href) =>",
							".fetchNext = (u = href) =>"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAABLAQAAICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIG1lbW9pemUoZm4sIGNhY2hlID0gCigpKQpNZW1vaXplKG4sIC4uLnJlc3QpCiAgLmdldFJlcG9zID0gKCkgPT4KICBlID0+CiAgLnBhcnNlWE1MID0geG1sU3RyID0+CiAgLmZldGNoVVJMID0gdXJsID0+CiAgciA9PgogIC5nZXRQYWdlID0gKHVybCA9IHdpbmRvdy5ocmVmKSA9PgooKSA9PgooKQogIC5tYWtlUXVlcnkgPSBvYmogPT4KKHMsIFtuLCB2XSwgaSkgPT4KICAubWFrZVVSTCA9IChiYXNlID0gaHJlZiwgcXVlcnkgPSB7fSkgPT4KICAubmV4dFVSTCA9ICh1ID0gaHJlZikgPT4KICAuZmV0Y2hOZXh0ID0gKHUgPSBocmVmKSA9PgAAAAAAAAAASwEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEsBAAAgIGRlZmluZShvYmosIC4uLmFyZ3MpCiAgbWVtb2l6ZShmbiwgY2FjaGUgPSAKKCkpCk1lbW9pemUobiwgLi4ucmVzdCkKICAuZ2V0UmVwb3MgPSAoKSA9PgogIGUgPT4KICAucGFyc2VYTUwgPSB4bWxTdHIgPT4KICAuZmV0Y2hVUkwgPSB1cmwgPT4KICByID0+CiAgLmdldFBhZ2UgPSAodXJsID0gd2luZG93LmhyZWYpID0+CigpID0+CigpCiAgLm1ha2VRdWVyeSA9IG9iaiA9PgoocywgW24sIHZdLCBpKSA9PgogIC5tYWtlVVJMID0gKGJhc2UgPSBocmVmLCBxdWVyeSA9IHt9KSA9PgogIC5uZXh0VVJMID0gKHUgPSBocmVmKSA9PgogIC5mZXRjaE5leHQgPSAodSA9IGhyZWYpID0+AAAAAAAAAABLAQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					29,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/github-userscript.js",
						"symkeys":
						[
							[
								321,
								350
							],
							[
								761,
								790
							],
							[
								797,
								800
							],
							[
								820,
								852
							],
							[
								1018,
								1035
							],
							[
								1147,
								1151
							],
							[
								1268,
								1289
							],
							[
								1351,
								1369
							],
							[
								2045,
								2049
							],
							[
								2068,
								2101
							],
							[
								2261,
								2266
							],
							[
								2377,
								2388
							],
							[
								2499,
								2518
							],
							[
								2546,
								2563
							],
							[
								2615,
								2654
							],
							[
								2714,
								2738
							],
							[
								2794,
								2820
							]
						],
						"symlist":
						[
							"function define(obj, ...args)",
							"function memoize(fn, cache = ",
							"())",
							" function Memoize(n, ...rest)",
							".getRepos = () =>",
							"e =>",
							".parseXML = xmlStr =>",
							".fetchURL = url =>",
							"r =>",
							".getPage = (url = window.href) =>",
							"() =>",
							"function ()",
							".makeQuery = obj =>",
							"(s, [n, v], i) =>",
							".makeURL = (base = href, query = {}) =>",
							".nextURL = (u = href) =>",
							".fetchNext = (u = href) =>"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAABLAQAAICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIG1lbW9pemUoZm4sIGNhY2hlID0gCigpKQpNZW1vaXplKG4sIC4uLnJlc3QpCiAgLmdldFJlcG9zID0gKCkgPT4KICBlID0+CiAgLnBhcnNlWE1MID0geG1sU3RyID0+CiAgLmZldGNoVVJMID0gdXJsID0+CiAgciA9PgogIC5nZXRQYWdlID0gKHVybCA9IHdpbmRvdy5ocmVmKSA9PgooKSA9PgooKQogIC5tYWtlUXVlcnkgPSBvYmogPT4KKHMsIFtuLCB2XSwgaSkgPT4KICAubWFrZVVSTCA9IChiYXNlID0gaHJlZiwgcXVlcnkgPSB7fSkgPT4KICAubmV4dFVSTCA9ICh1ID0gaHJlZikgPT4KICAuZmV0Y2hOZXh0ID0gKHUgPSBocmVmKSA9PgAAAAAAAAAASwEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEsBAAAgIGRlZmluZShvYmosIC4uLmFyZ3MpCiAgbWVtb2l6ZShmbiwgY2FjaGUgPSAKKCkpCk1lbW9pemUobiwgLi4ucmVzdCkKICAuZ2V0UmVwb3MgPSAoKSA9PgogIGUgPT4KICAucGFyc2VYTUwgPSB4bWxTdHIgPT4KICAuZmV0Y2hVUkwgPSB1cmwgPT4KICByID0+CiAgLmdldFBhZ2UgPSAodXJsID0gd2luZG93LmhyZWYpID0+CigpID0+CigpCiAgLm1ha2VRdWVyeSA9IG9iaiA9PgoocywgW24sIHZdLCBpKSA9PgogIC5tYWtlVVJMID0gKGJhc2UgPSBocmVmLCBxdWVyeSA9IHt9KSA9PgogIC5uZXh0VVJMID0gKHUgPSBocmVmKSA9PgogIC5mZXRjaE5leHQgPSAodSA9IGhyZWYpID0+AAAAAAAAAABLAQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					30,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/github-userscript.js",
						"symkeys":
						[
							[
								321,
								350
							],
							[
								761,
								790
							],
							[
								797,
								800
							],
							[
								820,
								852
							],
							[
								1018,
								1035
							],
							[
								1147,
								1151
							],
							[
								1268,
								1289
							],
							[
								1351,
								1369
							],
							[
								2045,
								2049
							],
							[
								2068,
								2101
							],
							[
								2261,
								2266
							],
							[
								2377,
								2388
							],
							[
								2499,
								2518
							],
							[
								2546,
								2563
							],
							[
								2615,
								2654
							],
							[
								2714,
								2738
							],
							[
								2794,
								2820
							]
						],
						"symlist":
						[
							"function define(obj, ...args)",
							"function memoize(fn, cache = ",
							"())",
							" function Memoize(n, ...rest)",
							".getRepos = () =>",
							"e =>",
							".parseXML = xmlStr =>",
							".fetchURL = url =>",
							"r =>",
							".getPage = (url = window.href) =>",
							"() =>",
							"function ()",
							".makeQuery = obj =>",
							"(s, [n, v], i) =>",
							".makeURL = (base = href, query = {}) =>",
							".nextURL = (u = href) =>",
							".fetchNext = (u = href) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABLAQAAICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIG1lbW9pemUoZm4sIGNhY2hlID0gCigpKQpNZW1vaXplKG4sIC4uLnJlc3QpCiAgLmdldFJlcG9zID0gKCkgPT4KICBlID0+CiAgLnBhcnNlWE1MID0geG1sU3RyID0+CiAgLmZldGNoVVJMID0gdXJsID0+CiAgciA9PgogIC5nZXRQYWdlID0gKHVybCA9IHdpbmRvdy5ocmVmKSA9PgooKSA9PgooKQogIC5tYWtlUXVlcnkgPSBvYmogPT4KKHMsIFtuLCB2XSwgaSkgPT4KICAubWFrZVVSTCA9IChiYXNlID0gaHJlZiwgcXVlcnkgPSB7fSkgPT4KICAubmV4dFVSTCA9ICh1ID0gaHJlZikgPT4KICAuZmV0Y2hOZXh0ID0gKHUgPSBocmVmKSA9PgAAAAAAAAAASwEAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					31,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/github-userscript.js",
						"symkeys":
						[
							[
								321,
								350
							],
							[
								761,
								790
							],
							[
								797,
								800
							],
							[
								820,
								852
							],
							[
								1018,
								1035
							],
							[
								1147,
								1151
							],
							[
								1268,
								1289
							],
							[
								1350,
								1368
							],
							[
								2044,
								2048
							],
							[
								2067,
								2100
							],
							[
								2260,
								2265
							],
							[
								2376,
								2387
							],
							[
								2498,
								2517
							],
							[
								2545,
								2562
							],
							[
								2614,
								2660
							],
							[
								2720,
								2751
							],
							[
								2807,
								2840
							]
						],
						"symlist":
						[
							"function define(obj, ...args)",
							"function memoize(fn, cache = ",
							"())",
							" function Memoize(n, ...rest)",
							".getRepos = () =>",
							"e =>",
							".parseXML = xmlStr =>",
							".fetchURL = url =>",
							"r =>",
							".getPage = (url = window.href) =>",
							"() =>",
							"function ()",
							".makeQuery = obj =>",
							"(s, [n, v], i) =>",
							".makeURL = (base = window.href, query = {}) =>",
							".nextURL = (u = window.href) =>",
							".fetchNext = (u = window.href) =>"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAABLAQAAICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIG1lbW9pemUoZm4sIGNhY2hlID0gCigpKQpNZW1vaXplKG4sIC4uLnJlc3QpCiAgLmdldFJlcG9zID0gKCkgPT4KICBlID0+CiAgLnBhcnNlWE1MID0geG1sU3RyID0+CiAgLmZldGNoVVJMID0gdXJsID0+CiAgciA9PgogIC5nZXRQYWdlID0gKHVybCA9IHdpbmRvdy5ocmVmKSA9PgooKSA9PgooKQogIC5tYWtlUXVlcnkgPSBvYmogPT4KKHMsIFtuLCB2XSwgaSkgPT4KICAubWFrZVVSTCA9IChiYXNlID0gaHJlZiwgcXVlcnkgPSB7fSkgPT4KICAubmV4dFVSTCA9ICh1ID0gaHJlZikgPT4KICAuZmV0Y2hOZXh0ID0gKHUgPSBocmVmKSA9PgAAAAAAAAAAYAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGABAAAgIGRlZmluZShvYmosIC4uLmFyZ3MpCiAgbWVtb2l6ZShmbiwgY2FjaGUgPSAKKCkpCk1lbW9pemUobiwgLi4ucmVzdCkKICAuZ2V0UmVwb3MgPSAoKSA9PgogIGUgPT4KICAucGFyc2VYTUwgPSB4bWxTdHIgPT4KICAuZmV0Y2hVUkwgPSB1cmwgPT4KICByID0+CiAgLmdldFBhZ2UgPSAodXJsID0gd2luZG93LmhyZWYpID0+CigpID0+CigpCiAgLm1ha2VRdWVyeSA9IG9iaiA9PgoocywgW24sIHZdLCBpKSA9PgogIC5tYWtlVVJMID0gKGJhc2UgPSB3aW5kb3cuaHJlZiwgcXVlcnkgPSB7fSkgPT4KICAubmV4dFVSTCA9ICh1ID0gd2luZG93LmhyZWYpID0+CiAgLmZldGNoTmV4dCA9ICh1ID0gd2luZG93LmhyZWYpID0+AAAAAAAAAABgAQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					32,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/github-userscript.js",
						"symkeys":
						[
							[
								321,
								350
							],
							[
								761,
								790
							],
							[
								797,
								800
							],
							[
								820,
								852
							],
							[
								1018,
								1035
							],
							[
								1147,
								1151
							],
							[
								1268,
								1289
							],
							[
								1350,
								1368
							],
							[
								2044,
								2048
							],
							[
								2067,
								2100
							],
							[
								2260,
								2265
							],
							[
								2376,
								2387
							],
							[
								2513,
								2532
							],
							[
								2560,
								2577
							],
							[
								2629,
								2675
							],
							[
								2735,
								2766
							],
							[
								2822,
								2855
							]
						],
						"symlist":
						[
							"function define(obj, ...args)",
							"function memoize(fn, cache = ",
							"())",
							" function Memoize(n, ...rest)",
							".getRepos = () =>",
							"e =>",
							".parseXML = xmlStr =>",
							".fetchURL = url =>",
							"r =>",
							".getPage = (url = window.href) =>",
							"() =>",
							"function ()",
							".makeQuery = obj =>",
							"(s, [n, v], i) =>",
							".makeURL = (base = window.href, query = {}) =>",
							".nextURL = (u = window.href) =>",
							".fetchNext = (u = window.href) =>"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAABgAQAAICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIG1lbW9pemUoZm4sIGNhY2hlID0gCigpKQpNZW1vaXplKG4sIC4uLnJlc3QpCiAgLmdldFJlcG9zID0gKCkgPT4KICBlID0+CiAgLnBhcnNlWE1MID0geG1sU3RyID0+CiAgLmZldGNoVVJMID0gdXJsID0+CiAgciA9PgogIC5nZXRQYWdlID0gKHVybCA9IHdpbmRvdy5ocmVmKSA9PgooKSA9PgooKQogIC5tYWtlUXVlcnkgPSBvYmogPT4KKHMsIFtuLCB2XSwgaSkgPT4KICAubWFrZVVSTCA9IChiYXNlID0gd2luZG93LmhyZWYsIHF1ZXJ5ID0ge30pID0+CiAgLm5leHRVUkwgPSAodSA9IHdpbmRvdy5ocmVmKSA9PgogIC5mZXRjaE5leHQgPSAodSA9IHdpbmRvdy5ocmVmKSA9PgAAAAAAAAAAYAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGABAAAgIGRlZmluZShvYmosIC4uLmFyZ3MpCiAgbWVtb2l6ZShmbiwgY2FjaGUgPSAKKCkpCk1lbW9pemUobiwgLi4ucmVzdCkKICAuZ2V0UmVwb3MgPSAoKSA9PgogIGUgPT4KICAucGFyc2VYTUwgPSB4bWxTdHIgPT4KICAuZmV0Y2hVUkwgPSB1cmwgPT4KICByID0+CiAgLmdldFBhZ2UgPSAodXJsID0gd2luZG93LmhyZWYpID0+CigpID0+CigpCiAgLm1ha2VRdWVyeSA9IG9iaiA9PgoocywgW24sIHZdLCBpKSA9PgogIC5tYWtlVVJMID0gKGJhc2UgPSB3aW5kb3cuaHJlZiwgcXVlcnkgPSB7fSkgPT4KICAubmV4dFVSTCA9ICh1ID0gd2luZG93LmhyZWYpID0+CiAgLmZldGNoTmV4dCA9ICh1ID0gd2luZG93LmhyZWYpID0+AAAAAAAAAABgAQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					33,
					3,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/github-userscript.js",
						"symkeys":
						[
							[
								321,
								350
							],
							[
								761,
								790
							],
							[
								797,
								800
							],
							[
								820,
								852
							],
							[
								1018,
								1035
							],
							[
								1147,
								1151
							],
							[
								1268,
								1289
							],
							[
								1350,
								1368
							],
							[
								2044,
								2048
							],
							[
								2067,
								2100
							],
							[
								2260,
								2265
							],
							[
								2376,
								2387
							],
							[
								2532,
								2551
							],
							[
								2579,
								2596
							],
							[
								2648,
								2694
							],
							[
								2754,
								2785
							],
							[
								2841,
								2874
							]
						],
						"symlist":
						[
							"function define(obj, ...args)",
							"function memoize(fn, cache = ",
							"())",
							" function Memoize(n, ...rest)",
							".getRepos = () =>",
							"e =>",
							".parseXML = xmlStr =>",
							".fetchURL = url =>",
							"r =>",
							".getPage = (url = window.href) =>",
							"() =>",
							"function ()",
							".makeQuery = obj =>",
							"(s, [n, v], i) =>",
							".makeURL = (base = window.href, query = {}) =>",
							".nextURL = (u = window.href) =>",
							".fetchNext = (u = window.href) =>"
						]
					},
					"BgAAAAAAAAAAAAAAAAAAAAAAAABgAQAAICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIG1lbW9pemUoZm4sIGNhY2hlID0gCigpKQpNZW1vaXplKG4sIC4uLnJlc3QpCiAgLmdldFJlcG9zID0gKCkgPT4KICBlID0+CiAgLnBhcnNlWE1MID0geG1sU3RyID0+CiAgLmZldGNoVVJMID0gdXJsID0+CiAgciA9PgogIC5nZXRQYWdlID0gKHVybCA9IHdpbmRvdy5ocmVmKSA9PgooKSA9PgooKQogIC5tYWtlUXVlcnkgPSBvYmogPT4KKHMsIFtuLCB2XSwgaSkgPT4KICAubWFrZVVSTCA9IChiYXNlID0gd2luZG93LmhyZWYsIHF1ZXJ5ID0ge30pID0+CiAgLm5leHRVUkwgPSAodSA9IHdpbmRvdy5ocmVmKSA9PgogIC5mZXRjaE5leHQgPSAodSA9IHdpbmRvdy5ocmVmKSA9PgAAAAAAAAAAYAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGABAAAgIGRlZmluZShvYmosIC4uLmFyZ3MpCiAgbWVtb2l6ZShmbiwgY2FjaGUgPSAKKCkpCk1lbW9pemUobiwgLi4ucmVzdCkKICAuZ2V0UmVwb3MgPSAoKSA9PgogIGUgPT4KICAucGFyc2VYTUwgPSB4bWxTdHIgPT4KICAuZmV0Y2hVUkwgPSB1cmwgPT4KICByID0+CiAgLmdldFBhZ2UgPSAodXJsID0gd2luZG93LmhyZWYpID0+CigpID0+CigpCiAgLm1ha2VRdWVyeSA9IG9iaiA9PgoocywgW24sIHZdLCBpKSA9PgogIC5tYWtlVVJMID0gKGJhc2UgPSB3aW5kb3cuaHJlZiwgcXVlcnkgPSB7fSkgPT4KICAubmV4dFVSTCA9ICh1ID0gd2luZG93LmhyZWYpID0+CiAgLmZldGNoTmV4dCA9ICh1ID0gd2luZG93LmhyZWYpID0+AAAAAAAAAABgAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYAEAACAgZGVmaW5lKG9iaiwgLi4uYXJncykKICBtZW1vaXplKGZuLCBjYWNoZSA9IAooKSkKTWVtb2l6ZShuLCAuLi5yZXN0KQogIC5nZXRSZXBvcyA9ICgpID0+CiAgZSA9PgogIC5wYXJzZVhNTCA9IHhtbFN0ciA9PgogIC5mZXRjaFVSTCA9IHVybCA9PgogIHIgPT4KICAuZ2V0UGFnZSA9ICh1cmwgPSB3aW5kb3cuaHJlZikgPT4KKCkgPT4KKCkKICAubWFrZVF1ZXJ5ID0gb2JqID0+CihzLCBbbiwgdl0sIGkpID0+CiAgLm1ha2VVUkwgPSAoYmFzZSA9IHdpbmRvdy5ocmVmLCBxdWVyeSA9IHt9KSA9PgogIC5uZXh0VVJMID0gKHUgPSB3aW5kb3cuaHJlZikgPT4KICAuZmV0Y2hOZXh0ID0gKHUgPSB3aW5kb3cuaHJlZikgPT4AAAAAAAAAAGABAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					34,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/github-userscript.js",
						"symkeys":
						[
							[
								321,
								350
							],
							[
								761,
								790
							],
							[
								797,
								800
							],
							[
								820,
								852
							],
							[
								1018,
								1035
							],
							[
								1147,
								1151
							],
							[
								1268,
								1289
							],
							[
								1350,
								1368
							],
							[
								2044,
								2048
							],
							[
								2067,
								2100
							],
							[
								2260,
								2265
							],
							[
								2376,
								2387
							],
							[
								2532,
								2551
							],
							[
								2579,
								2596
							],
							[
								2648,
								2694
							],
							[
								2754,
								2785
							],
							[
								2841,
								2874
							]
						],
						"symlist":
						[
							"function define(obj, ...args)",
							"function memoize(fn, cache = ",
							"())",
							" function Memoize(n, ...rest)",
							".getRepos = () =>",
							"e =>",
							".parseXML = xmlStr =>",
							".fetchURL = url =>",
							"r =>",
							".getPage = (url = window.href) =>",
							"() =>",
							"function ()",
							".makeQuery = obj =>",
							"(s, [n, v], i) =>",
							".makeURL = (base = window.href, query = {}) =>",
							".nextURL = (u = window.href) =>",
							".fetchNext = (u = window.href) =>"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAABgAQAAICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIG1lbW9pemUoZm4sIGNhY2hlID0gCigpKQpNZW1vaXplKG4sIC4uLnJlc3QpCiAgLmdldFJlcG9zID0gKCkgPT4KICBlID0+CiAgLnBhcnNlWE1MID0geG1sU3RyID0+CiAgLmZldGNoVVJMID0gdXJsID0+CiAgciA9PgogIC5nZXRQYWdlID0gKHVybCA9IHdpbmRvdy5ocmVmKSA9PgooKSA9PgooKQogIC5tYWtlUXVlcnkgPSBvYmogPT4KKHMsIFtuLCB2XSwgaSkgPT4KICAubWFrZVVSTCA9IChiYXNlID0gd2luZG93LmhyZWYsIHF1ZXJ5ID0ge30pID0+CiAgLm5leHRVUkwgPSAodSA9IHdpbmRvdy5ocmVmKSA9PgogIC5mZXRjaE5leHQgPSAodSA9IHdpbmRvdy5ocmVmKSA9PgAAAAAAAAAAYAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGABAAAgIGRlZmluZShvYmosIC4uLmFyZ3MpCiAgbWVtb2l6ZShmbiwgY2FjaGUgPSAKKCkpCk1lbW9pemUobiwgLi4ucmVzdCkKICAuZ2V0UmVwb3MgPSAoKSA9PgogIGUgPT4KICAucGFyc2VYTUwgPSB4bWxTdHIgPT4KICAuZmV0Y2hVUkwgPSB1cmwgPT4KICByID0+CiAgLmdldFBhZ2UgPSAodXJsID0gd2luZG93LmhyZWYpID0+CigpID0+CigpCiAgLm1ha2VRdWVyeSA9IG9iaiA9PgoocywgW24sIHZdLCBpKSA9PgogIC5tYWtlVVJMID0gKGJhc2UgPSB3aW5kb3cuaHJlZiwgcXVlcnkgPSB7fSkgPT4KICAubmV4dFVSTCA9ICh1ID0gd2luZG93LmhyZWYpID0+CiAgLmZldGNoTmV4dCA9ICh1ID0gd2luZG93LmhyZWYpID0+AAAAAAAAAABgAQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					35,
					3,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/github-userscript.js",
						"symkeys":
						[
							[
								321,
								350
							],
							[
								761,
								790
							],
							[
								797,
								800
							],
							[
								820,
								852
							],
							[
								1018,
								1035
							],
							[
								1147,
								1151
							],
							[
								1268,
								1289
							],
							[
								1350,
								1368
							],
							[
								2044,
								2048
							],
							[
								2067,
								2100
							],
							[
								2260,
								2265
							],
							[
								2376,
								2387
							],
							[
								2546,
								2565
							],
							[
								2593,
								2610
							],
							[
								2662,
								2708
							],
							[
								2768,
								2799
							],
							[
								2855,
								2888
							]
						],
						"symlist":
						[
							"function define(obj, ...args)",
							"function memoize(fn, cache = ",
							"())",
							" function Memoize(n, ...rest)",
							".getRepos = () =>",
							"e =>",
							".parseXML = xmlStr =>",
							".fetchURL = url =>",
							"r =>",
							".getPage = (url = window.href) =>",
							"() =>",
							"function ()",
							".makeQuery = obj =>",
							"(s, [n, v], i) =>",
							".makeURL = (base = window.href, query = {}) =>",
							".nextURL = (u = window.href) =>",
							".fetchNext = (u = window.href) =>"
						]
					},
					"BgAAAAAAAAAAAAAAAAAAAAAAAABgAQAAICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIG1lbW9pemUoZm4sIGNhY2hlID0gCigpKQpNZW1vaXplKG4sIC4uLnJlc3QpCiAgLmdldFJlcG9zID0gKCkgPT4KICBlID0+CiAgLnBhcnNlWE1MID0geG1sU3RyID0+CiAgLmZldGNoVVJMID0gdXJsID0+CiAgciA9PgogIC5nZXRQYWdlID0gKHVybCA9IHdpbmRvdy5ocmVmKSA9PgooKSA9PgooKQogIC5tYWtlUXVlcnkgPSBvYmogPT4KKHMsIFtuLCB2XSwgaSkgPT4KICAubWFrZVVSTCA9IChiYXNlID0gd2luZG93LmhyZWYsIHF1ZXJ5ID0ge30pID0+CiAgLm5leHRVUkwgPSAodSA9IHdpbmRvdy5ocmVmKSA9PgogIC5mZXRjaE5leHQgPSAodSA9IHdpbmRvdy5ocmVmKSA9PgAAAAAAAAAAYAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGABAAAgIGRlZmluZShvYmosIC4uLmFyZ3MpCiAgbWVtb2l6ZShmbiwgY2FjaGUgPSAKKCkpCk1lbW9pemUobiwgLi4ucmVzdCkKICAuZ2V0UmVwb3MgPSAoKSA9PgogIGUgPT4KICAucGFyc2VYTUwgPSB4bWxTdHIgPT4KICAuZmV0Y2hVUkwgPSB1cmwgPT4KICByID0+CiAgLmdldFBhZ2UgPSAodXJsID0gd2luZG93LmhyZWYpID0+CigpID0+CigpCiAgLm1ha2VRdWVyeSA9IG9iaiA9PgoocywgW24sIHZdLCBpKSA9PgogIC5tYWtlVVJMID0gKGJhc2UgPSB3aW5kb3cuaHJlZiwgcXVlcnkgPSB7fSkgPT4KICAubmV4dFVSTCA9ICh1ID0gd2luZG93LmhyZWYpID0+CiAgLmZldGNoTmV4dCA9ICh1ID0gd2luZG93LmhyZWYpID0+AAAAAAAAAABgAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYAEAACAgZGVmaW5lKG9iaiwgLi4uYXJncykKICBtZW1vaXplKGZuLCBjYWNoZSA9IAooKSkKTWVtb2l6ZShuLCAuLi5yZXN0KQogIC5nZXRSZXBvcyA9ICgpID0+CiAgZSA9PgogIC5wYXJzZVhNTCA9IHhtbFN0ciA9PgogIC5mZXRjaFVSTCA9IHVybCA9PgogIHIgPT4KICAuZ2V0UGFnZSA9ICh1cmwgPSB3aW5kb3cuaHJlZikgPT4KKCkgPT4KKCkKICAubWFrZVF1ZXJ5ID0gb2JqID0+CihzLCBbbiwgdl0sIGkpID0+CiAgLm1ha2VVUkwgPSAoYmFzZSA9IHdpbmRvdy5ocmVmLCBxdWVyeSA9IHt9KSA9PgogIC5uZXh0VVJMID0gKHUgPSB3aW5kb3cuaHJlZikgPT4KICAuZmV0Y2hOZXh0ID0gKHUgPSB3aW5kb3cuaHJlZikgPT4AAAAAAAAAAGABAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					36,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/github-userscript.js",
						"symkeys":
						[
							[
								321,
								350
							],
							[
								761,
								790
							],
							[
								797,
								800
							],
							[
								820,
								852
							],
							[
								1018,
								1035
							],
							[
								1147,
								1151
							],
							[
								1268,
								1289
							],
							[
								1350,
								1368
							],
							[
								2044,
								2048
							],
							[
								2067,
								2100
							],
							[
								2260,
								2265
							],
							[
								2376,
								2387
							],
							[
								2521,
								2540
							],
							[
								2568,
								2585
							],
							[
								2637,
								2683
							],
							[
								2743,
								2774
							],
							[
								2830,
								2863
							]
						],
						"symlist":
						[
							"function define(obj, ...args)",
							"function memoize(fn, cache = ",
							"())",
							" function Memoize(n, ...rest)",
							".getRepos = () =>",
							"e =>",
							".parseXML = xmlStr =>",
							".fetchURL = url =>",
							"r =>",
							".getPage = (url = window.href) =>",
							"() =>",
							"function ()",
							".makeQuery = obj =>",
							"(s, [n, v], i) =>",
							".makeURL = (base = window.href, query = {}) =>",
							".nextURL = (u = window.href) =>",
							".fetchNext = (u = window.href) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABgAQAAICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIG1lbW9pemUoZm4sIGNhY2hlID0gCigpKQpNZW1vaXplKG4sIC4uLnJlc3QpCiAgLmdldFJlcG9zID0gKCkgPT4KICBlID0+CiAgLnBhcnNlWE1MID0geG1sU3RyID0+CiAgLmZldGNoVVJMID0gdXJsID0+CiAgciA9PgogIC5nZXRQYWdlID0gKHVybCA9IHdpbmRvdy5ocmVmKSA9PgooKSA9PgooKQogIC5tYWtlUXVlcnkgPSBvYmogPT4KKHMsIFtuLCB2XSwgaSkgPT4KICAubWFrZVVSTCA9IChiYXNlID0gd2luZG93LmhyZWYsIHF1ZXJ5ID0ge30pID0+CiAgLm5leHRVUkwgPSAodSA9IHdpbmRvdy5ocmVmKSA9PgogIC5mZXRjaE5leHQgPSAodSA9IHdpbmRvdy5ocmVmKSA9PgAAAAAAAAAAYAEAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					37,
					3,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/github-userscript.js",
						"symkeys":
						[
							[
								321,
								350
							],
							[
								761,
								790
							],
							[
								797,
								800
							],
							[
								820,
								852
							],
							[
								1018,
								1035
							],
							[
								1147,
								1151
							],
							[
								1268,
								1289
							],
							[
								1350,
								1368
							],
							[
								2044,
								2048
							],
							[
								2067,
								2100
							],
							[
								2260,
								2265
							],
							[
								2376,
								2387
							],
							[
								2521,
								2540
							],
							[
								2568,
								2585
							],
							[
								2637,
								2683
							],
							[
								2743,
								2784
							],
							[
								2845,
								2888
							]
						],
						"symlist":
						[
							"function define(obj, ...args)",
							"function memoize(fn, cache = ",
							"())",
							" function Memoize(n, ...rest)",
							".getRepos = () =>",
							"e =>",
							".parseXML = xmlStr =>",
							".fetchURL = url =>",
							"r =>",
							".getPage = (url = window.href) =>",
							"() =>",
							"function ()",
							".makeQuery = obj =>",
							"(s, [n, v], i) =>",
							".makeURL = (base = window.href, query = {}) =>",
							".nextURL = (u = window.href, offset=1) =>",
							".fetchNext = (u = window.href, offset=1) =>"
						]
					},
					"BgAAAAAAAAAAAAAAAAAAAAAAAABgAQAAICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIG1lbW9pemUoZm4sIGNhY2hlID0gCigpKQpNZW1vaXplKG4sIC4uLnJlc3QpCiAgLmdldFJlcG9zID0gKCkgPT4KICBlID0+CiAgLnBhcnNlWE1MID0geG1sU3RyID0+CiAgLmZldGNoVVJMID0gdXJsID0+CiAgciA9PgogIC5nZXRQYWdlID0gKHVybCA9IHdpbmRvdy5ocmVmKSA9PgooKSA9PgooKQogIC5tYWtlUXVlcnkgPSBvYmogPT4KKHMsIFtuLCB2XSwgaSkgPT4KICAubWFrZVVSTCA9IChiYXNlID0gd2luZG93LmhyZWYsIHF1ZXJ5ID0ge30pID0+CiAgLm5leHRVUkwgPSAodSA9IHdpbmRvdy5ocmVmKSA9PgogIC5mZXRjaE5leHQgPSAodSA9IHdpbmRvdy5ocmVmKSA9PgAAAAAAAAAAdAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHQBAAAgIGRlZmluZShvYmosIC4uLmFyZ3MpCiAgbWVtb2l6ZShmbiwgY2FjaGUgPSAKKCkpCk1lbW9pemUobiwgLi4ucmVzdCkKICAuZ2V0UmVwb3MgPSAoKSA9PgogIGUgPT4KICAucGFyc2VYTUwgPSB4bWxTdHIgPT4KICAuZmV0Y2hVUkwgPSB1cmwgPT4KICByID0+CiAgLmdldFBhZ2UgPSAodXJsID0gd2luZG93LmhyZWYpID0+CigpID0+CigpCiAgLm1ha2VRdWVyeSA9IG9iaiA9PgoocywgW24sIHZdLCBpKSA9PgogIC5tYWtlVVJMID0gKGJhc2UgPSB3aW5kb3cuaHJlZiwgcXVlcnkgPSB7fSkgPT4KICAubmV4dFVSTCA9ICh1ID0gd2luZG93LmhyZWYsIG9mZnNldD0xKSA9PgogIC5mZXRjaE5leHQgPSAodSA9IHdpbmRvdy5ocmVmLCBvZmZzZXQ9MSkgPT4AAAAAAAAAAHQBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB0AQAAICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIG1lbW9pemUoZm4sIGNhY2hlID0gCigpKQpNZW1vaXplKG4sIC4uLnJlc3QpCiAgLmdldFJlcG9zID0gKCkgPT4KICBlID0+CiAgLnBhcnNlWE1MID0geG1sU3RyID0+CiAgLmZldGNoVVJMID0gdXJsID0+CiAgciA9PgogIC5nZXRQYWdlID0gKHVybCA9IHdpbmRvdy5ocmVmKSA9PgooKSA9PgooKQogIC5tYWtlUXVlcnkgPSBvYmogPT4KKHMsIFtuLCB2XSwgaSkgPT4KICAubWFrZVVSTCA9IChiYXNlID0gd2luZG93LmhyZWYsIHF1ZXJ5ID0ge30pID0+CiAgLm5leHRVUkwgPSAodSA9IHdpbmRvdy5ocmVmLCBvZmZzZXQ9MSkgPT4KICAuZmV0Y2hOZXh0ID0gKHUgPSB3aW5kb3cuaHJlZiwgb2Zmc2V0PTEpID0+AAAAAAAAAAB0AQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					38,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/github-userscript.js",
						"symkeys":
						[
							[
								321,
								350
							],
							[
								761,
								790
							],
							[
								797,
								800
							],
							[
								820,
								852
							],
							[
								1018,
								1035
							],
							[
								1147,
								1151
							],
							[
								1268,
								1289
							],
							[
								1350,
								1368
							],
							[
								2044,
								2048
							],
							[
								2067,
								2100
							],
							[
								2260,
								2265
							],
							[
								2376,
								2387
							],
							[
								2521,
								2540
							],
							[
								2568,
								2585
							],
							[
								2637,
								2683
							],
							[
								2743,
								2784
							],
							[
								2863,
								2906
							]
						],
						"symlist":
						[
							"function define(obj, ...args)",
							"function memoize(fn, cache = ",
							"())",
							" function Memoize(n, ...rest)",
							".getRepos = () =>",
							"e =>",
							".parseXML = xmlStr =>",
							".fetchURL = url =>",
							"r =>",
							".getPage = (url = window.href) =>",
							"() =>",
							"function ()",
							".makeQuery = obj =>",
							"(s, [n, v], i) =>",
							".makeURL = (base = window.href, query = {}) =>",
							".nextURL = (u = window.href, offset=1) =>",
							".fetchNext = (u = window.href, offset=1) =>"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAAB0AQAAICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIG1lbW9pemUoZm4sIGNhY2hlID0gCigpKQpNZW1vaXplKG4sIC4uLnJlc3QpCiAgLmdldFJlcG9zID0gKCkgPT4KICBlID0+CiAgLnBhcnNlWE1MID0geG1sU3RyID0+CiAgLmZldGNoVVJMID0gdXJsID0+CiAgciA9PgogIC5nZXRQYWdlID0gKHVybCA9IHdpbmRvdy5ocmVmKSA9PgooKSA9PgooKQogIC5tYWtlUXVlcnkgPSBvYmogPT4KKHMsIFtuLCB2XSwgaSkgPT4KICAubWFrZVVSTCA9IChiYXNlID0gd2luZG93LmhyZWYsIHF1ZXJ5ID0ge30pID0+CiAgLm5leHRVUkwgPSAodSA9IHdpbmRvdy5ocmVmLCBvZmZzZXQ9MSkgPT4KICAuZmV0Y2hOZXh0ID0gKHUgPSB3aW5kb3cuaHJlZiwgb2Zmc2V0PTEpID0+AAAAAAAAAAB0AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdAEAACAgZGVmaW5lKG9iaiwgLi4uYXJncykKICBtZW1vaXplKGZuLCBjYWNoZSA9IAooKSkKTWVtb2l6ZShuLCAuLi5yZXN0KQogIC5nZXRSZXBvcyA9ICgpID0+CiAgZSA9PgogIC5wYXJzZVhNTCA9IHhtbFN0ciA9PgogIC5mZXRjaFVSTCA9IHVybCA9PgogIHIgPT4KICAuZ2V0UGFnZSA9ICh1cmwgPSB3aW5kb3cuaHJlZikgPT4KKCkgPT4KKCkKICAubWFrZVF1ZXJ5ID0gb2JqID0+CihzLCBbbiwgdl0sIGkpID0+CiAgLm1ha2VVUkwgPSAoYmFzZSA9IHdpbmRvdy5ocmVmLCBxdWVyeSA9IHt9KSA9PgogIC5uZXh0VVJMID0gKHUgPSB3aW5kb3cuaHJlZiwgb2Zmc2V0PTEpID0+CiAgLmZldGNoTmV4dCA9ICh1ID0gd2luZG93LmhyZWYsIG9mZnNldD0xKSA9PgAAAAAAAAAAdAEAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					39,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/github-userscript.js",
						"symkeys":
						[
							[
								321,
								350
							],
							[
								761,
								790
							],
							[
								797,
								800
							],
							[
								820,
								852
							],
							[
								1018,
								1035
							],
							[
								1147,
								1151
							],
							[
								1268,
								1289
							],
							[
								1350,
								1368
							],
							[
								2044,
								2048
							],
							[
								2067,
								2100
							],
							[
								2260,
								2265
							],
							[
								2376,
								2387
							],
							[
								2521,
								2540
							],
							[
								2568,
								2585
							],
							[
								2637,
								2683
							],
							[
								2743,
								2784
							],
							[
								2863,
								2906
							]
						],
						"symlist":
						[
							"function define(obj, ...args)",
							"function memoize(fn, cache = ",
							"())",
							" function Memoize(n, ...rest)",
							".getRepos = () =>",
							"e =>",
							".parseXML = xmlStr =>",
							".fetchURL = url =>",
							"r =>",
							".getPage = (url = window.href) =>",
							"() =>",
							"function ()",
							".makeQuery = obj =>",
							"(s, [n, v], i) =>",
							".makeURL = (base = window.href, query = {}) =>",
							".nextURL = (u = window.href, offset=1) =>",
							".fetchNext = (u = window.href, offset=1) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB0AQAAICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIG1lbW9pemUoZm4sIGNhY2hlID0gCigpKQpNZW1vaXplKG4sIC4uLnJlc3QpCiAgLmdldFJlcG9zID0gKCkgPT4KICBlID0+CiAgLnBhcnNlWE1MID0geG1sU3RyID0+CiAgLmZldGNoVVJMID0gdXJsID0+CiAgciA9PgogIC5nZXRQYWdlID0gKHVybCA9IHdpbmRvdy5ocmVmKSA9PgooKSA9PgooKQogIC5tYWtlUXVlcnkgPSBvYmogPT4KKHMsIFtuLCB2XSwgaSkgPT4KICAubWFrZVVSTCA9IChiYXNlID0gd2luZG93LmhyZWYsIHF1ZXJ5ID0ge30pID0+CiAgLm5leHRVUkwgPSAodSA9IHdpbmRvdy5ocmVmLCBvZmZzZXQ9MSkgPT4KICAuZmV0Y2hOZXh0ID0gKHUgPSB3aW5kb3cuaHJlZiwgb2Zmc2V0PTEpID0+AAAAAAAAAAB0AQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					40,
					4,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/github-userscript.js",
						"symkeys":
						[
							[
								321,
								350
							],
							[
								761,
								790
							],
							[
								797,
								800
							],
							[
								820,
								852
							],
							[
								1018,
								1035
							],
							[
								1147,
								1151
							],
							[
								1268,
								1289
							],
							[
								1350,
								1368
							],
							[
								2044,
								2048
							],
							[
								2067,
								2100
							],
							[
								2260,
								2265
							],
							[
								2376,
								2387
							],
							[
								2521,
								2540
							],
							[
								2568,
								2585
							],
							[
								2637,
								2683
							],
							[
								2743,
								2784
							],
							[
								2845,
								2888
							]
						],
						"symlist":
						[
							"function define(obj, ...args)",
							"function memoize(fn, cache = ",
							"())",
							" function Memoize(n, ...rest)",
							".getRepos = () =>",
							"e =>",
							".parseXML = xmlStr =>",
							".fetchURL = url =>",
							"r =>",
							".getPage = (url = window.href) =>",
							"() =>",
							"function ()",
							".makeQuery = obj =>",
							"(s, [n, v], i) =>",
							".makeURL = (base = window.href, query = {}) =>",
							".nextURL = (u = window.href, offset=1) =>",
							".fetchNext = (u = window.href, offset=1) =>"
						]
					},
					"CAAAAAAAAAAAAAAAAAAAAAAAAAB0AQAAICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIG1lbW9pemUoZm4sIGNhY2hlID0gCigpKQpNZW1vaXplKG4sIC4uLnJlc3QpCiAgLmdldFJlcG9zID0gKCkgPT4KICBlID0+CiAgLnBhcnNlWE1MID0geG1sU3RyID0+CiAgLmZldGNoVVJMID0gdXJsID0+CiAgciA9PgogIC5nZXRQYWdlID0gKHVybCA9IHdpbmRvdy5ocmVmKSA9PgooKSA9PgooKQogIC5tYWtlUXVlcnkgPSBvYmogPT4KKHMsIFtuLCB2XSwgaSkgPT4KICAubWFrZVVSTCA9IChiYXNlID0gd2luZG93LmhyZWYsIHF1ZXJ5ID0ge30pID0+CiAgLm5leHRVUkwgPSAodSA9IHdpbmRvdy5ocmVmLCBvZmZzZXQ9MSkgPT4KICAuZmV0Y2hOZXh0ID0gKHUgPSB3aW5kb3cuaHJlZiwgb2Zmc2V0PTEpID0+AAAAAAAAAAB0AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdAEAACAgZGVmaW5lKG9iaiwgLi4uYXJncykKICBtZW1vaXplKGZuLCBjYWNoZSA9IAooKSkKTWVtb2l6ZShuLCAuLi5yZXN0KQogIC5nZXRSZXBvcyA9ICgpID0+CiAgZSA9PgogIC5wYXJzZVhNTCA9IHhtbFN0ciA9PgogIC5mZXRjaFVSTCA9IHVybCA9PgogIHIgPT4KICAuZ2V0UGFnZSA9ICh1cmwgPSB3aW5kb3cuaHJlZikgPT4KKCkgPT4KKCkKICAubWFrZVF1ZXJ5ID0gb2JqID0+CihzLCBbbiwgdl0sIGkpID0+CiAgLm1ha2VVUkwgPSAoYmFzZSA9IHdpbmRvdy5ocmVmLCBxdWVyeSA9IHt9KSA9PgogIC5uZXh0VVJMID0gKHUgPSB3aW5kb3cuaHJlZiwgb2Zmc2V0PTEpID0+CiAgLmZldGNoTmV4dCA9ICh1ID0gd2luZG93LmhyZWYsIG9mZnNldD0xKSA9PgAAAAAAAAAAdAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHQBAAAgIGRlZmluZShvYmosIC4uLmFyZ3MpCiAgbWVtb2l6ZShmbiwgY2FjaGUgPSAKKCkpCk1lbW9pemUobiwgLi4ucmVzdCkKICAuZ2V0UmVwb3MgPSAoKSA9PgogIGUgPT4KICAucGFyc2VYTUwgPSB4bWxTdHIgPT4KICAuZmV0Y2hVUkwgPSB1cmwgPT4KICByID0+CiAgLmdldFBhZ2UgPSAodXJsID0gd2luZG93LmhyZWYpID0+CigpID0+CigpCiAgLm1ha2VRdWVyeSA9IG9iaiA9PgoocywgW24sIHZdLCBpKSA9PgogIC5tYWtlVVJMID0gKGJhc2UgPSB3aW5kb3cuaHJlZiwgcXVlcnkgPSB7fSkgPT4KICAubmV4dFVSTCA9ICh1ID0gd2luZG93LmhyZWYsIG9mZnNldD0xKSA9PgogIC5mZXRjaE5leHQgPSAodSA9IHdpbmRvdy5ocmVmLCBvZmZzZXQ9MSkgPT4AAAAAAAAAAHQBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB0AQAAICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIG1lbW9pemUoZm4sIGNhY2hlID0gCigpKQpNZW1vaXplKG4sIC4uLnJlc3QpCiAgLmdldFJlcG9zID0gKCkgPT4KICBlID0+CiAgLnBhcnNlWE1MID0geG1sU3RyID0+CiAgLmZldGNoVVJMID0gdXJsID0+CiAgciA9PgogIC5nZXRQYWdlID0gKHVybCA9IHdpbmRvdy5ocmVmKSA9PgooKSA9PgooKQogIC5tYWtlUXVlcnkgPSBvYmogPT4KKHMsIFtuLCB2XSwgaSkgPT4KICAubWFrZVVSTCA9IChiYXNlID0gd2luZG93LmhyZWYsIHF1ZXJ5ID0ge30pID0+CiAgLm5leHRVUkwgPSAodSA9IHdpbmRvdy5ocmVmLCBvZmZzZXQ9MSkgPT4KICAuZmV0Y2hOZXh0ID0gKHUgPSB3aW5kb3cuaHJlZiwgb2Zmc2V0PTEpID0+AAAAAAAAAAB0AQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					41,
					3,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/github-userscript.js",
						"symkeys":
						[
							[
								321,
								350
							],
							[
								761,
								790
							],
							[
								797,
								800
							],
							[
								820,
								852
							],
							[
								1018,
								1035
							],
							[
								1147,
								1151
							],
							[
								1268,
								1289
							],
							[
								1350,
								1368
							],
							[
								2044,
								2048
							],
							[
								2067,
								2100
							],
							[
								2260,
								2265
							],
							[
								2376,
								2387
							],
							[
								2521,
								2540
							],
							[
								2568,
								2585
							],
							[
								2637,
								2683
							],
							[
								2743,
								2784
							],
							[
								2845,
								2905
							]
						],
						"symlist":
						[
							"function define(obj, ...args)",
							"function memoize(fn, cache = ",
							"())",
							" function Memoize(n, ...rest)",
							".getRepos = () =>",
							"e =>",
							".parseXML = xmlStr =>",
							".fetchURL = url =>",
							"r =>",
							".getPage = (url = window.href) =>",
							"() =>",
							"function ()",
							".makeQuery = obj =>",
							"(s, [n, v], i) =>",
							".makeURL = (base = window.href, query = {}) =>",
							".nextURL = (u = window.href, offset=1) =>",
							".fetchNext = (u = window.href, offset=window.offset ?? 1) =>"
						]
					},
					"BgAAAAAAAAAAAAAAAAAAAAAAAAB0AQAAICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIG1lbW9pemUoZm4sIGNhY2hlID0gCigpKQpNZW1vaXplKG4sIC4uLnJlc3QpCiAgLmdldFJlcG9zID0gKCkgPT4KICBlID0+CiAgLnBhcnNlWE1MID0geG1sU3RyID0+CiAgLmZldGNoVVJMID0gdXJsID0+CiAgciA9PgogIC5nZXRQYWdlID0gKHVybCA9IHdpbmRvdy5ocmVmKSA9PgooKSA9PgooKQogIC5tYWtlUXVlcnkgPSBvYmogPT4KKHMsIFtuLCB2XSwgaSkgPT4KICAubWFrZVVSTCA9IChiYXNlID0gd2luZG93LmhyZWYsIHF1ZXJ5ID0ge30pID0+CiAgLm5leHRVUkwgPSAodSA9IHdpbmRvdy5ocmVmLCBvZmZzZXQ9MSkgPT4KICAuZmV0Y2hOZXh0ID0gKHUgPSB3aW5kb3cuaHJlZiwgb2Zmc2V0PTEpID0+AAAAAAAAAACFAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhQEAACAgZGVmaW5lKG9iaiwgLi4uYXJncykKICBtZW1vaXplKGZuLCBjYWNoZSA9IAooKSkKTWVtb2l6ZShuLCAuLi5yZXN0KQogIC5nZXRSZXBvcyA9ICgpID0+CiAgZSA9PgogIC5wYXJzZVhNTCA9IHhtbFN0ciA9PgogIC5mZXRjaFVSTCA9IHVybCA9PgogIHIgPT4KICAuZ2V0UGFnZSA9ICh1cmwgPSB3aW5kb3cuaHJlZikgPT4KKCkgPT4KKCkKICAubWFrZVF1ZXJ5ID0gb2JqID0+CihzLCBbbiwgdl0sIGkpID0+CiAgLm1ha2VVUkwgPSAoYmFzZSA9IHdpbmRvdy5ocmVmLCBxdWVyeSA9IHt9KSA9PgogIC5uZXh0VVJMID0gKHUgPSB3aW5kb3cuaHJlZiwgb2Zmc2V0PTEpID0+CiAgLmZldGNoTmV4dCA9ICh1ID0gd2luZG93LmhyZWYsIG9mZnNldD13aW5kb3cub2Zmc2V0ID8/IDEpID0+AAAAAAAAAACFAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhQEAACAgZGVmaW5lKG9iaiwgLi4uYXJncykKICBtZW1vaXplKGZuLCBjYWNoZSA9IAooKSkKTWVtb2l6ZShuLCAuLi5yZXN0KQogIC5nZXRSZXBvcyA9ICgpID0+CiAgZSA9PgogIC5wYXJzZVhNTCA9IHhtbFN0ciA9PgogIC5mZXRjaFVSTCA9IHVybCA9PgogIHIgPT4KICAuZ2V0UGFnZSA9ICh1cmwgPSB3aW5kb3cuaHJlZikgPT4KKCkgPT4KKCkKICAubWFrZVF1ZXJ5ID0gb2JqID0+CihzLCBbbiwgdl0sIGkpID0+CiAgLm1ha2VVUkwgPSAoYmFzZSA9IHdpbmRvdy5ocmVmLCBxdWVyeSA9IHt9KSA9PgogIC5uZXh0VVJMID0gKHUgPSB3aW5kb3cuaHJlZiwgb2Zmc2V0PTEpID0+CiAgLmZldGNoTmV4dCA9ICh1ID0gd2luZG93LmhyZWYsIG9mZnNldD13aW5kb3cub2Zmc2V0ID8/IDEpID0+AAAAAAAAAACFAQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					42,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/github-userscript.js",
						"symkeys":
						[
							[
								321,
								350
							],
							[
								761,
								790
							],
							[
								797,
								800
							],
							[
								820,
								852
							],
							[
								1018,
								1035
							],
							[
								1147,
								1151
							],
							[
								1268,
								1289
							],
							[
								1350,
								1368
							],
							[
								2044,
								2048
							],
							[
								2067,
								2100
							],
							[
								2260,
								2265
							],
							[
								2376,
								2387
							],
							[
								2521,
								2540
							],
							[
								2568,
								2585
							],
							[
								2637,
								2683
							],
							[
								2743,
								2784
							],
							[
								2845,
								2905
							]
						],
						"symlist":
						[
							"function define(obj, ...args)",
							"function memoize(fn, cache = ",
							"())",
							" function Memoize(n, ...rest)",
							".getRepos = () =>",
							"e =>",
							".parseXML = xmlStr =>",
							".fetchURL = url =>",
							"r =>",
							".getPage = (url = window.href) =>",
							"() =>",
							"function ()",
							".makeQuery = obj =>",
							"(s, [n, v], i) =>",
							".makeURL = (base = window.href, query = {}) =>",
							".nextURL = (u = window.href, offset=1) =>",
							".fetchNext = (u = window.href, offset=window.offset ?? 1) =>"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAACFAQAAICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIG1lbW9pemUoZm4sIGNhY2hlID0gCigpKQpNZW1vaXplKG4sIC4uLnJlc3QpCiAgLmdldFJlcG9zID0gKCkgPT4KICBlID0+CiAgLnBhcnNlWE1MID0geG1sU3RyID0+CiAgLmZldGNoVVJMID0gdXJsID0+CiAgciA9PgogIC5nZXRQYWdlID0gKHVybCA9IHdpbmRvdy5ocmVmKSA9PgooKSA9PgooKQogIC5tYWtlUXVlcnkgPSBvYmogPT4KKHMsIFtuLCB2XSwgaSkgPT4KICAubWFrZVVSTCA9IChiYXNlID0gd2luZG93LmhyZWYsIHF1ZXJ5ID0ge30pID0+CiAgLm5leHRVUkwgPSAodSA9IHdpbmRvdy5ocmVmLCBvZmZzZXQ9MSkgPT4KICAuZmV0Y2hOZXh0ID0gKHUgPSB3aW5kb3cuaHJlZiwgb2Zmc2V0PXdpbmRvdy5vZmZzZXQgPz8gMSkgPT4AAAAAAAAAAIUBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACFAQAAICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIG1lbW9pemUoZm4sIGNhY2hlID0gCigpKQpNZW1vaXplKG4sIC4uLnJlc3QpCiAgLmdldFJlcG9zID0gKCkgPT4KICBlID0+CiAgLnBhcnNlWE1MID0geG1sU3RyID0+CiAgLmZldGNoVVJMID0gdXJsID0+CiAgciA9PgogIC5nZXRQYWdlID0gKHVybCA9IHdpbmRvdy5ocmVmKSA9PgooKSA9PgooKQogIC5tYWtlUXVlcnkgPSBvYmogPT4KKHMsIFtuLCB2XSwgaSkgPT4KICAubWFrZVVSTCA9IChiYXNlID0gd2luZG93LmhyZWYsIHF1ZXJ5ID0ge30pID0+CiAgLm5leHRVUkwgPSAodSA9IHdpbmRvdy5ocmVmLCBvZmZzZXQ9MSkgPT4KICAuZmV0Y2hOZXh0ID0gKHUgPSB3aW5kb3cuaHJlZiwgb2Zmc2V0PXdpbmRvdy5vZmZzZXQgPz8gMSkgPT4AAAAAAAAAAIUBAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					43,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/github-userscript.js",
						"symkeys":
						[
							[
								321,
								350
							],
							[
								761,
								790
							],
							[
								797,
								800
							],
							[
								820,
								852
							],
							[
								1018,
								1035
							],
							[
								1147,
								1151
							],
							[
								1268,
								1289
							],
							[
								1350,
								1368
							],
							[
								2044,
								2048
							],
							[
								2067,
								2100
							],
							[
								2260,
								2265
							],
							[
								2376,
								2387
							],
							[
								2521,
								2540
							],
							[
								2568,
								2585
							],
							[
								2637,
								2683
							],
							[
								2743,
								2784
							],
							[
								2845,
								2905
							]
						],
						"symlist":
						[
							"function define(obj, ...args)",
							"function memoize(fn, cache = ",
							"())",
							" function Memoize(n, ...rest)",
							".getRepos = () =>",
							"e =>",
							".parseXML = xmlStr =>",
							".fetchURL = url =>",
							"r =>",
							".getPage = (url = window.href) =>",
							"() =>",
							"function ()",
							".makeQuery = obj =>",
							"(s, [n, v], i) =>",
							".makeURL = (base = window.href, query = {}) =>",
							".nextURL = (u = window.href, offset=1) =>",
							".fetchNext = (u = window.href, offset=window.offset ?? 1) =>"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAACFAQAAICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIG1lbW9pemUoZm4sIGNhY2hlID0gCigpKQpNZW1vaXplKG4sIC4uLnJlc3QpCiAgLmdldFJlcG9zID0gKCkgPT4KICBlID0+CiAgLnBhcnNlWE1MID0geG1sU3RyID0+CiAgLmZldGNoVVJMID0gdXJsID0+CiAgciA9PgogIC5nZXRQYWdlID0gKHVybCA9IHdpbmRvdy5ocmVmKSA9PgooKSA9PgooKQogIC5tYWtlUXVlcnkgPSBvYmogPT4KKHMsIFtuLCB2XSwgaSkgPT4KICAubWFrZVVSTCA9IChiYXNlID0gd2luZG93LmhyZWYsIHF1ZXJ5ID0ge30pID0+CiAgLm5leHRVUkwgPSAodSA9IHdpbmRvdy5ocmVmLCBvZmZzZXQ9MSkgPT4KICAuZmV0Y2hOZXh0ID0gKHUgPSB3aW5kb3cuaHJlZiwgb2Zmc2V0PXdpbmRvdy5vZmZzZXQgPz8gMSkgPT4AAAAAAAAAAIUBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACFAQAAICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIG1lbW9pemUoZm4sIGNhY2hlID0gCigpKQpNZW1vaXplKG4sIC4uLnJlc3QpCiAgLmdldFJlcG9zID0gKCkgPT4KICBlID0+CiAgLnBhcnNlWE1MID0geG1sU3RyID0+CiAgLmZldGNoVVJMID0gdXJsID0+CiAgciA9PgogIC5nZXRQYWdlID0gKHVybCA9IHdpbmRvdy5ocmVmKSA9PgooKSA9PgooKQogIC5tYWtlUXVlcnkgPSBvYmogPT4KKHMsIFtuLCB2XSwgaSkgPT4KICAubWFrZVVSTCA9IChiYXNlID0gd2luZG93LmhyZWYsIHF1ZXJ5ID0ge30pID0+CiAgLm5leHRVUkwgPSAodSA9IHdpbmRvdy5ocmVmLCBvZmZzZXQ9MSkgPT4KICAuZmV0Y2hOZXh0ID0gKHUgPSB3aW5kb3cuaHJlZiwgb2Zmc2V0PXdpbmRvdy5vZmZzZXQgPz8gMSkgPT4AAAAAAAAAAIUBAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					44,
					3,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/github-userscript.js",
						"symkeys":
						[
							[
								321,
								350
							],
							[
								761,
								790
							],
							[
								797,
								800
							],
							[
								820,
								852
							],
							[
								1018,
								1035
							],
							[
								1147,
								1151
							],
							[
								1268,
								1289
							],
							[
								1350,
								1368
							],
							[
								2044,
								2048
							],
							[
								2067,
								2100
							],
							[
								2260,
								2265
							],
							[
								2376,
								2387
							],
							[
								2521,
								2540
							],
							[
								2568,
								2585
							],
							[
								2637,
								2683
							],
							[
								2743,
								2784
							],
							[
								2845,
								2905
							]
						],
						"symlist":
						[
							"function define(obj, ...args)",
							"function memoize(fn, cache = ",
							"())",
							" function Memoize(n, ...rest)",
							".getRepos = () =>",
							"e =>",
							".parseXML = xmlStr =>",
							".fetchURL = url =>",
							"r =>",
							".getPage = (url = window.href) =>",
							"() =>",
							"function ()",
							".makeQuery = obj =>",
							"(s, [n, v], i) =>",
							".makeURL = (base = window.href, query = {}) =>",
							".nextURL = (u = window.href, offset=1) =>",
							".fetchNext = (u = window.href, offset=window.offset ?? 1) =>"
						]
					},
					"BgAAAAAAAAAAAAAAAAAAAAAAAACFAQAAICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIG1lbW9pemUoZm4sIGNhY2hlID0gCigpKQpNZW1vaXplKG4sIC4uLnJlc3QpCiAgLmdldFJlcG9zID0gKCkgPT4KICBlID0+CiAgLnBhcnNlWE1MID0geG1sU3RyID0+CiAgLmZldGNoVVJMID0gdXJsID0+CiAgciA9PgogIC5nZXRQYWdlID0gKHVybCA9IHdpbmRvdy5ocmVmKSA9PgooKSA9PgooKQogIC5tYWtlUXVlcnkgPSBvYmogPT4KKHMsIFtuLCB2XSwgaSkgPT4KICAubWFrZVVSTCA9IChiYXNlID0gd2luZG93LmhyZWYsIHF1ZXJ5ID0ge30pID0+CiAgLm5leHRVUkwgPSAodSA9IHdpbmRvdy5ocmVmLCBvZmZzZXQ9MSkgPT4KICAuZmV0Y2hOZXh0ID0gKHUgPSB3aW5kb3cuaHJlZiwgb2Zmc2V0PXdpbmRvdy5vZmZzZXQgPz8gMSkgPT4AAAAAAAAAAIUBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACFAQAAICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIG1lbW9pemUoZm4sIGNhY2hlID0gCigpKQpNZW1vaXplKG4sIC4uLnJlc3QpCiAgLmdldFJlcG9zID0gKCkgPT4KICBlID0+CiAgLnBhcnNlWE1MID0geG1sU3RyID0+CiAgLmZldGNoVVJMID0gdXJsID0+CiAgciA9PgogIC5nZXRQYWdlID0gKHVybCA9IHdpbmRvdy5ocmVmKSA9PgooKSA9PgooKQogIC5tYWtlUXVlcnkgPSBvYmogPT4KKHMsIFtuLCB2XSwgaSkgPT4KICAubWFrZVVSTCA9IChiYXNlID0gd2luZG93LmhyZWYsIHF1ZXJ5ID0ge30pID0+CiAgLm5leHRVUkwgPSAodSA9IHdpbmRvdy5ocmVmLCBvZmZzZXQ9MSkgPT4KICAuZmV0Y2hOZXh0ID0gKHUgPSB3aW5kb3cuaHJlZiwgb2Zmc2V0PXdpbmRvdy5vZmZzZXQgPz8gMSkgPT4AAAAAAAAAAIUBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACFAQAAICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIG1lbW9pemUoZm4sIGNhY2hlID0gCigpKQpNZW1vaXplKG4sIC4uLnJlc3QpCiAgLmdldFJlcG9zID0gKCkgPT4KICBlID0+CiAgLnBhcnNlWE1MID0geG1sU3RyID0+CiAgLmZldGNoVVJMID0gdXJsID0+CiAgciA9PgogIC5nZXRQYWdlID0gKHVybCA9IHdpbmRvdy5ocmVmKSA9PgooKSA9PgooKQogIC5tYWtlUXVlcnkgPSBvYmogPT4KKHMsIFtuLCB2XSwgaSkgPT4KICAubWFrZVVSTCA9IChiYXNlID0gd2luZG93LmhyZWYsIHF1ZXJ5ID0ge30pID0+CiAgLm5leHRVUkwgPSAodSA9IHdpbmRvdy5ocmVmLCBvZmZzZXQ9MSkgPT4KICAuZmV0Y2hOZXh0ID0gKHUgPSB3aW5kb3cuaHJlZiwgb2Zmc2V0PXdpbmRvdy5vZmZzZXQgPz8gMSkgPT4AAAAAAAAAAIUBAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					45,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/github-userscript.js",
						"symkeys":
						[
							[
								321,
								350
							],
							[
								761,
								790
							],
							[
								797,
								800
							],
							[
								820,
								852
							],
							[
								1018,
								1035
							],
							[
								1147,
								1151
							],
							[
								1268,
								1289
							],
							[
								1350,
								1368
							],
							[
								2044,
								2048
							],
							[
								2067,
								2100
							],
							[
								2260,
								2265
							],
							[
								2376,
								2387
							],
							[
								2520,
								2539
							],
							[
								2567,
								2584
							],
							[
								2636,
								2682
							],
							[
								2749,
								2792
							],
							[
								2867,
								2929
							]
						],
						"symlist":
						[
							"function define(obj, ...args)",
							"function memoize(fn, cache = ",
							"())",
							" function Memoize(n, ...rest)",
							".getRepos = () =>",
							"e =>",
							".parseXML = xmlStr =>",
							".fetchURL = url =>",
							"r =>",
							".getPage = (url = window.href) =>",
							"() =>",
							"function ()",
							".makeQuery = obj =>",
							"(s, [n, v], i) =>",
							".makeURL = (base = window.href, query = {}) =>",
							".nextURL = (u = window.href, offset = 1) =>",
							".fetchNext = (u = window.href, offset = window.offset ?? 1) =>"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAACFAQAAICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIG1lbW9pemUoZm4sIGNhY2hlID0gCigpKQpNZW1vaXplKG4sIC4uLnJlc3QpCiAgLmdldFJlcG9zID0gKCkgPT4KICBlID0+CiAgLnBhcnNlWE1MID0geG1sU3RyID0+CiAgLmZldGNoVVJMID0gdXJsID0+CiAgciA9PgogIC5nZXRQYWdlID0gKHVybCA9IHdpbmRvdy5ocmVmKSA9PgooKSA9PgooKQogIC5tYWtlUXVlcnkgPSBvYmogPT4KKHMsIFtuLCB2XSwgaSkgPT4KICAubWFrZVVSTCA9IChiYXNlID0gd2luZG93LmhyZWYsIHF1ZXJ5ID0ge30pID0+CiAgLm5leHRVUkwgPSAodSA9IHdpbmRvdy5ocmVmLCBvZmZzZXQ9MSkgPT4KICAuZmV0Y2hOZXh0ID0gKHUgPSB3aW5kb3cuaHJlZiwgb2Zmc2V0PXdpbmRvdy5vZmZzZXQgPz8gMSkgPT4AAAAAAAAAAIkBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACJAQAAICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIG1lbW9pemUoZm4sIGNhY2hlID0gCigpKQpNZW1vaXplKG4sIC4uLnJlc3QpCiAgLmdldFJlcG9zID0gKCkgPT4KICBlID0+CiAgLnBhcnNlWE1MID0geG1sU3RyID0+CiAgLmZldGNoVVJMID0gdXJsID0+CiAgciA9PgogIC5nZXRQYWdlID0gKHVybCA9IHdpbmRvdy5ocmVmKSA9PgooKSA9PgooKQogIC5tYWtlUXVlcnkgPSBvYmogPT4KKHMsIFtuLCB2XSwgaSkgPT4KICAubWFrZVVSTCA9IChiYXNlID0gd2luZG93LmhyZWYsIHF1ZXJ5ID0ge30pID0+CiAgLm5leHRVUkwgPSAodSA9IHdpbmRvdy5ocmVmLCBvZmZzZXQgPSAxKSA9PgogIC5mZXRjaE5leHQgPSAodSA9IHdpbmRvdy5ocmVmLCBvZmZzZXQgPSB3aW5kb3cub2Zmc2V0ID8/IDEpID0+AAAAAAAAAACJAQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					46,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/github-userscript.js",
						"symkeys":
						[
							[
								321,
								350
							],
							[
								761,
								790
							],
							[
								797,
								800
							],
							[
								820,
								852
							],
							[
								1018,
								1035
							],
							[
								1147,
								1151
							],
							[
								1268,
								1289
							],
							[
								1350,
								1368
							],
							[
								2044,
								2048
							],
							[
								2067,
								2100
							],
							[
								2260,
								2265
							],
							[
								2376,
								2387
							],
							[
								2520,
								2539
							],
							[
								2567,
								2584
							],
							[
								2636,
								2682
							],
							[
								2749,
								2792
							],
							[
								2867,
								2929
							]
						],
						"symlist":
						[
							"function define(obj, ...args)",
							"function memoize(fn, cache = ",
							"())",
							" function Memoize(n, ...rest)",
							".getRepos = () =>",
							"e =>",
							".parseXML = xmlStr =>",
							".fetchURL = url =>",
							"r =>",
							".getPage = (url = window.href) =>",
							"() =>",
							"function ()",
							".makeQuery = obj =>",
							"(s, [n, v], i) =>",
							".makeURL = (base = window.href, query = {}) =>",
							".nextURL = (u = window.href, offset = 1) =>",
							".fetchNext = (u = window.href, offset = window.offset ?? 1) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACJAQAAICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIG1lbW9pemUoZm4sIGNhY2hlID0gCigpKQpNZW1vaXplKG4sIC4uLnJlc3QpCiAgLmdldFJlcG9zID0gKCkgPT4KICBlID0+CiAgLnBhcnNlWE1MID0geG1sU3RyID0+CiAgLmZldGNoVVJMID0gdXJsID0+CiAgciA9PgogIC5nZXRQYWdlID0gKHVybCA9IHdpbmRvdy5ocmVmKSA9PgooKSA9PgooKQogIC5tYWtlUXVlcnkgPSBvYmogPT4KKHMsIFtuLCB2XSwgaSkgPT4KICAubWFrZVVSTCA9IChiYXNlID0gd2luZG93LmhyZWYsIHF1ZXJ5ID0ge30pID0+CiAgLm5leHRVUkwgPSAodSA9IHdpbmRvdy5ocmVmLCBvZmZzZXQgPSAxKSA9PgogIC5mZXRjaE5leHQgPSAodSA9IHdpbmRvdy5ocmVmLCBvZmZzZXQgPSB3aW5kb3cub2Zmc2V0ID8/IDEpID0+AAAAAAAAAACJAQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					47,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/github-userscript.js",
						"symkeys":
						[
							[
								321,
								350
							],
							[
								761,
								790
							],
							[
								797,
								800
							],
							[
								820,
								852
							],
							[
								1018,
								1035
							],
							[
								1147,
								1151
							],
							[
								1268,
								1289
							],
							[
								1350,
								1368
							],
							[
								2044,
								2048
							],
							[
								2067,
								2100
							],
							[
								2260,
								2265
							],
							[
								2376,
								2387
							],
							[
								2520,
								2539
							],
							[
								2567,
								2584
							],
							[
								2636,
								2682
							],
							[
								2749,
								2792
							],
							[
								2867,
								2929
							]
						],
						"symlist":
						[
							"function define(obj, ...args)",
							"function memoize(fn, cache = ",
							"())",
							" function Memoize(n, ...rest)",
							".getRepos = () =>",
							"e =>",
							".parseXML = xmlStr =>",
							".fetchURL = url =>",
							"r =>",
							".getPage = (url = window.href) =>",
							"() =>",
							"function ()",
							".makeQuery = obj =>",
							"(s, [n, v], i) =>",
							".makeURL = (base = window.href, query = {}) =>",
							".nextURL = (u = window.href, offset = 1) =>",
							".fetchNext = (u = window.href, offset = window.offset ?? 1) =>"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAACJAQAAICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIG1lbW9pemUoZm4sIGNhY2hlID0gCigpKQpNZW1vaXplKG4sIC4uLnJlc3QpCiAgLmdldFJlcG9zID0gKCkgPT4KICBlID0+CiAgLnBhcnNlWE1MID0geG1sU3RyID0+CiAgLmZldGNoVVJMID0gdXJsID0+CiAgciA9PgogIC5nZXRQYWdlID0gKHVybCA9IHdpbmRvdy5ocmVmKSA9PgooKSA9PgooKQogIC5tYWtlUXVlcnkgPSBvYmogPT4KKHMsIFtuLCB2XSwgaSkgPT4KICAubWFrZVVSTCA9IChiYXNlID0gd2luZG93LmhyZWYsIHF1ZXJ5ID0ge30pID0+CiAgLm5leHRVUkwgPSAodSA9IHdpbmRvdy5ocmVmLCBvZmZzZXQgPSAxKSA9PgogIC5mZXRjaE5leHQgPSAodSA9IHdpbmRvdy5ocmVmLCBvZmZzZXQgPSB3aW5kb3cub2Zmc2V0ID8/IDEpID0+AAAAAAAAAACJAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAiQEAACAgZGVmaW5lKG9iaiwgLi4uYXJncykKICBtZW1vaXplKGZuLCBjYWNoZSA9IAooKSkKTWVtb2l6ZShuLCAuLi5yZXN0KQogIC5nZXRSZXBvcyA9ICgpID0+CiAgZSA9PgogIC5wYXJzZVhNTCA9IHhtbFN0ciA9PgogIC5mZXRjaFVSTCA9IHVybCA9PgogIHIgPT4KICAuZ2V0UGFnZSA9ICh1cmwgPSB3aW5kb3cuaHJlZikgPT4KKCkgPT4KKCkKICAubWFrZVF1ZXJ5ID0gb2JqID0+CihzLCBbbiwgdl0sIGkpID0+CiAgLm1ha2VVUkwgPSAoYmFzZSA9IHdpbmRvdy5ocmVmLCBxdWVyeSA9IHt9KSA9PgogIC5uZXh0VVJMID0gKHUgPSB3aW5kb3cuaHJlZiwgb2Zmc2V0ID0gMSkgPT4KICAuZmV0Y2hOZXh0ID0gKHUgPSB3aW5kb3cuaHJlZiwgb2Zmc2V0ID0gd2luZG93Lm9mZnNldCA/PyAxKSA9PgAAAAAAAAAAiQEAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					48,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/github-userscript.js",
						"symkeys":
						[
							[
								321,
								350
							],
							[
								761,
								790
							],
							[
								797,
								800
							],
							[
								820,
								852
							],
							[
								1018,
								1035
							],
							[
								1147,
								1151
							],
							[
								1268,
								1289
							],
							[
								1350,
								1368
							],
							[
								2044,
								2048
							],
							[
								2067,
								2100
							],
							[
								2260,
								2265
							],
							[
								2376,
								2387
							],
							[
								2520,
								2539
							],
							[
								2567,
								2584
							],
							[
								2636,
								2682
							],
							[
								2749,
								2792
							],
							[
								2867,
								2935
							]
						],
						"symlist":
						[
							"function define(obj, ...args)",
							"function memoize(fn, cache = ",
							"())",
							" function Memoize(n, ...rest)",
							".getRepos = () =>",
							"e =>",
							".parseXML = xmlStr =>",
							".fetchURL = url =>",
							"r =>",
							".getPage = (url = window.href) =>",
							"() =>",
							"function ()",
							".makeQuery = obj =>",
							"(s, [n, v], i) =>",
							".makeURL = (base = window.href, query = {}) =>",
							".nextURL = (u = window.href, offset = 1) =>",
							".fetchNext = async (u = window.href, offset = window.offset ?? 1) =>"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAACJAQAAICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIG1lbW9pemUoZm4sIGNhY2hlID0gCigpKQpNZW1vaXplKG4sIC4uLnJlc3QpCiAgLmdldFJlcG9zID0gKCkgPT4KICBlID0+CiAgLnBhcnNlWE1MID0geG1sU3RyID0+CiAgLmZldGNoVVJMID0gdXJsID0+CiAgciA9PgogIC5nZXRQYWdlID0gKHVybCA9IHdpbmRvdy5ocmVmKSA9PgooKSA9PgooKQogIC5tYWtlUXVlcnkgPSBvYmogPT4KKHMsIFtuLCB2XSwgaSkgPT4KICAubWFrZVVSTCA9IChiYXNlID0gd2luZG93LmhyZWYsIHF1ZXJ5ID0ge30pID0+CiAgLm5leHRVUkwgPSAodSA9IHdpbmRvdy5ocmVmLCBvZmZzZXQgPSAxKSA9PgogIC5mZXRjaE5leHQgPSAodSA9IHdpbmRvdy5ocmVmLCBvZmZzZXQgPSB3aW5kb3cub2Zmc2V0ID8/IDEpID0+AAAAAAAAAACJAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAiQEAACAgZGVmaW5lKG9iaiwgLi4uYXJncykKICBtZW1vaXplKGZuLCBjYWNoZSA9IAooKSkKTWVtb2l6ZShuLCAuLi5yZXN0KQogIC5nZXRSZXBvcyA9ICgpID0+CiAgZSA9PgogIC5wYXJzZVhNTCA9IHhtbFN0ciA9PgogIC5mZXRjaFVSTCA9IHVybCA9PgogIHIgPT4KICAuZ2V0UGFnZSA9ICh1cmwgPSB3aW5kb3cuaHJlZikgPT4KKCkgPT4KKCkKICAubWFrZVF1ZXJ5ID0gb2JqID0+CihzLCBbbiwgdl0sIGkpID0+CiAgLm1ha2VVUkwgPSAoYmFzZSA9IHdpbmRvdy5ocmVmLCBxdWVyeSA9IHt9KSA9PgogIC5uZXh0VVJMID0gKHUgPSB3aW5kb3cuaHJlZiwgb2Zmc2V0ID0gMSkgPT4KICAuZmV0Y2hOZXh0ID0gKHUgPSB3aW5kb3cuaHJlZiwgb2Zmc2V0ID0gd2luZG93Lm9mZnNldCA/PyAxKSA9PgAAAAAAAAAAiQEAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					49,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/github-userscript.js",
						"symkeys":
						[
							[
								321,
								350
							],
							[
								761,
								790
							],
							[
								797,
								800
							],
							[
								820,
								852
							],
							[
								1012,
								1037
							],
							[
								1074,
								1099
							],
							[
								1150,
								1167
							],
							[
								1251,
								1255
							],
							[
								1348,
								1369
							],
							[
								1430,
								1448
							],
							[
								2124,
								2128
							],
							[
								2147,
								2180
							],
							[
								2340,
								2345
							],
							[
								2456,
								2467
							],
							[
								2600,
								2619
							],
							[
								2647,
								2664
							],
							[
								2716,
								2762
							],
							[
								2829,
								2872
							],
							[
								2947,
								3015
							]
						],
						"symlist":
						[
							"function define(obj, ...args)",
							"function memoize(fn, cache = ",
							"())",
							" function Memoize(n, ...rest)",
							"function q(s, e=document)",
							"function qa(s,e=document)",
							".getRepos = () =>",
							"e =>",
							".parseXML = xmlStr =>",
							".fetchURL = url =>",
							"r =>",
							".getPage = (url = window.href) =>",
							"() =>",
							"function ()",
							".makeQuery = obj =>",
							"(s, [n, v], i) =>",
							".makeURL = (base = window.href, query = {}) =>",
							".nextURL = (u = window.href, offset = 1) =>",
							".fetchNext = async (u = window.href, offset = window.offset ?? 1) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACJAQAAICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIG1lbW9pemUoZm4sIGNhY2hlID0gCigpKQpNZW1vaXplKG4sIC4uLnJlc3QpCiAgLmdldFJlcG9zID0gKCkgPT4KICBlID0+CiAgLnBhcnNlWE1MID0geG1sU3RyID0+CiAgLmZldGNoVVJMID0gdXJsID0+CiAgciA9PgogIC5nZXRQYWdlID0gKHVybCA9IHdpbmRvdy5ocmVmKSA9PgooKSA9PgooKQogIC5tYWtlUXVlcnkgPSBvYmogPT4KKHMsIFtuLCB2XSwgaSkgPT4KICAubWFrZVVSTCA9IChiYXNlID0gd2luZG93LmhyZWYsIHF1ZXJ5ID0ge30pID0+CiAgLm5leHRVUkwgPSAodSA9IHdpbmRvdy5ocmVmLCBvZmZzZXQgPSAxKSA9PgogIC5mZXRjaE5leHQgPSAodSA9IHdpbmRvdy5ocmVmLCBvZmZzZXQgPSB3aW5kb3cub2Zmc2V0ID8/IDEpID0+AAAAAAAAAACvAQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					50,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACvAQAAICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIG1lbW9pemUoZm4sIGNhY2hlID0gCigpKQpNZW1vaXplKG4sIC4uLnJlc3QpCiAgcShzLCBlPWRvY3VtZW50KQogIHFhKHMsZT1kb2N1bWVudCkKICAuZ2V0UmVwb3MgPSAoKSA9PgogIGUgPT4KICAucGFyc2VYTUwgPSB4bWxTdHIgPT4KICAuZmV0Y2hVUkwgPSB1cmwgPT4KICByID0+CiAgLmdldFBhZ2UgPSAodXJsID0gd2luZG93LmhyZWYpID0+CigpID0+CigpCiAgLm1ha2VRdWVyeSA9IG9iaiA9PgoocywgW24sIHZdLCBpKSA9PgogIC5tYWtlVVJMID0gKGJhc2UgPSB3aW5kb3cuaHJlZiwgcXVlcnkgPSB7fSkgPT4KICAubmV4dFVSTCA9ICh1ID0gd2luZG93LmhyZWYsIG9mZnNldCA9IDEpID0+CiAgLmZldGNoTmV4dCA9ICh1ID0gd2luZG93LmhyZWYsIG9mZnNldCA9IHdpbmRvdy5vZmZzZXQgPz8gMSkgPT4AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					51,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/github-userscript.js",
						"symkeys":
						[
							[
								321,
								350
							],
							[
								761,
								790
							],
							[
								797,
								800
							],
							[
								820,
								852
							],
							[
								1012,
								1037
							],
							[
								1074,
								1099
							],
							[
								1150,
								1167
							],
							[
								1251,
								1255
							],
							[
								1348,
								1369
							],
							[
								1430,
								1448
							],
							[
								2124,
								2128
							],
							[
								2147,
								2180
							],
							[
								2340,
								2345
							],
							[
								2456,
								2467
							],
							[
								2600,
								2619
							],
							[
								2647,
								2664
							],
							[
								2716,
								2762
							],
							[
								2829,
								2872
							],
							[
								2947,
								3015
							]
						],
						"symlist":
						[
							"function define(obj, ...args)",
							"function memoize(fn, cache = ",
							"())",
							" function Memoize(n, ...rest)",
							"function q(s, e=document)",
							"function qa(s,e=document)",
							".getRepos = () =>",
							"e =>",
							".parseXML = xmlStr =>",
							".fetchURL = url =>",
							"r =>",
							".getPage = (url = window.href) =>",
							"() =>",
							"function ()",
							".makeQuery = obj =>",
							"(s, [n, v], i) =>",
							".makeURL = (base = window.href, query = {}) =>",
							".nextURL = (u = window.href, offset = 1) =>",
							".fetchNext = async (u = window.href, offset = window.offset ?? 1) =>"
						]
					},
					"AQAAAAAAAAAAAAAArwEAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					52,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/github-userscript.js",
						"symkeys":
						[
							[
								321,
								350
							],
							[
								761,
								790
							],
							[
								797,
								800
							],
							[
								820,
								852
							],
							[
								1012,
								1037
							],
							[
								1074,
								1099
							],
							[
								1150,
								1167
							],
							[
								1251,
								1255
							],
							[
								1348,
								1369
							],
							[
								1430,
								1448
							],
							[
								2124,
								2128
							],
							[
								2147,
								2180
							],
							[
								2340,
								2345
							],
							[
								2456,
								2467
							],
							[
								2600,
								2619
							],
							[
								2647,
								2664
							],
							[
								2716,
								2762
							],
							[
								2829,
								2872
							],
							[
								2947,
								3015
							]
						],
						"symlist":
						[
							"function define(obj, ...args)",
							"function memoize(fn, cache = ",
							"())",
							" function Memoize(n, ...rest)",
							"function q(s, e=document)",
							"function qa(s,e=document)",
							".getRepos = () =>",
							"e =>",
							".parseXML = xmlStr =>",
							".fetchURL = url =>",
							"r =>",
							".getPage = (url = window.href) =>",
							"() =>",
							"function ()",
							".makeQuery = obj =>",
							"(s, [n, v], i) =>",
							".makeURL = (base = window.href, query = {}) =>",
							".nextURL = (u = window.href, offset = 1) =>",
							".fetchNext = async (u = window.href, offset = window.offset ?? 1) =>"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAACvAQAAICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIG1lbW9pemUoZm4sIGNhY2hlID0gCigpKQpNZW1vaXplKG4sIC4uLnJlc3QpCiAgcShzLCBlPWRvY3VtZW50KQogIHFhKHMsZT1kb2N1bWVudCkKICAuZ2V0UmVwb3MgPSAoKSA9PgogIGUgPT4KICAucGFyc2VYTUwgPSB4bWxTdHIgPT4KICAuZmV0Y2hVUkwgPSB1cmwgPT4KICByID0+CiAgLmdldFBhZ2UgPSAodXJsID0gd2luZG93LmhyZWYpID0+CigpID0+CigpCiAgLm1ha2VRdWVyeSA9IG9iaiA9PgoocywgW24sIHZdLCBpKSA9PgogIC5tYWtlVVJMID0gKGJhc2UgPSB3aW5kb3cuaHJlZiwgcXVlcnkgPSB7fSkgPT4KICAubmV4dFVSTCA9ICh1ID0gd2luZG93LmhyZWYsIG9mZnNldCA9IDEpID0+CiAgLmZldGNoTmV4dCA9ICh1ID0gd2luZG93LmhyZWYsIG9mZnNldCA9IHdpbmRvdy5vZmZzZXQgPz8gMSkgPT4AAAAAAAAAAK8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACvAQAAICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIG1lbW9pemUoZm4sIGNhY2hlID0gCigpKQpNZW1vaXplKG4sIC4uLnJlc3QpCiAgcShzLCBlPWRvY3VtZW50KQogIHFhKHMsZT1kb2N1bWVudCkKICAuZ2V0UmVwb3MgPSAoKSA9PgogIGUgPT4KICAucGFyc2VYTUwgPSB4bWxTdHIgPT4KICAuZmV0Y2hVUkwgPSB1cmwgPT4KICByID0+CiAgLmdldFBhZ2UgPSAodXJsID0gd2luZG93LmhyZWYpID0+CigpID0+CigpCiAgLm1ha2VRdWVyeSA9IG9iaiA9PgoocywgW24sIHZdLCBpKSA9PgogIC5tYWtlVVJMID0gKGJhc2UgPSB3aW5kb3cuaHJlZiwgcXVlcnkgPSB7fSkgPT4KICAubmV4dFVSTCA9ICh1ID0gd2luZG93LmhyZWYsIG9mZnNldCA9IDEpID0+CiAgLmZldGNoTmV4dCA9ICh1ID0gd2luZG93LmhyZWYsIG9mZnNldCA9IHdpbmRvdy5vZmZzZXQgPz8gMSkgPT4AAAAAAAAAAK8BAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					53,
					3,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/github-userscript.js",
						"symkeys":
						[
							[
								321,
								350
							],
							[
								761,
								790
							],
							[
								797,
								800
							],
							[
								820,
								852
							],
							[
								1012,
								1037
							],
							[
								1074,
								1099
							],
							[
								1150,
								1167
							],
							[
								1251,
								1255
							],
							[
								1348,
								1369
							],
							[
								1430,
								1448
							],
							[
								2124,
								2128
							],
							[
								2147,
								2180
							],
							[
								2340,
								2345
							],
							[
								2456,
								2467
							],
							[
								2600,
								2619
							],
							[
								2647,
								2664
							],
							[
								2716,
								2762
							],
							[
								2829,
								2872
							],
							[
								2947,
								3015
							]
						],
						"symlist":
						[
							"function define(obj, ...args)",
							"function memoize(fn, cache = ",
							"())",
							" function Memoize(n, ...rest)",
							"function q(s, e=document)",
							"function qa(s,e=document)",
							".getRepos = () =>",
							"e =>",
							".parseXML = xmlStr =>",
							".fetchURL = url =>",
							"r =>",
							".getPage = (url = window.href) =>",
							"() =>",
							"function ()",
							".makeQuery = obj =>",
							"(s, [n, v], i) =>",
							".makeURL = (base = window.href, query = {}) =>",
							".nextURL = (u = window.href, offset = 1) =>",
							".fetchNext = async (u = window.href, offset = window.offset ?? 1) =>"
						]
					},
					"BgAAAAAAAAAAAAAAAAAAAAAAAACvAQAAICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIG1lbW9pemUoZm4sIGNhY2hlID0gCigpKQpNZW1vaXplKG4sIC4uLnJlc3QpCiAgcShzLCBlPWRvY3VtZW50KQogIHFhKHMsZT1kb2N1bWVudCkKICAuZ2V0UmVwb3MgPSAoKSA9PgogIGUgPT4KICAucGFyc2VYTUwgPSB4bWxTdHIgPT4KICAuZmV0Y2hVUkwgPSB1cmwgPT4KICByID0+CiAgLmdldFBhZ2UgPSAodXJsID0gd2luZG93LmhyZWYpID0+CigpID0+CigpCiAgLm1ha2VRdWVyeSA9IG9iaiA9PgoocywgW24sIHZdLCBpKSA9PgogIC5tYWtlVVJMID0gKGJhc2UgPSB3aW5kb3cuaHJlZiwgcXVlcnkgPSB7fSkgPT4KICAubmV4dFVSTCA9ICh1ID0gd2luZG93LmhyZWYsIG9mZnNldCA9IDEpID0+CiAgLmZldGNoTmV4dCA9ICh1ID0gd2luZG93LmhyZWYsIG9mZnNldCA9IHdpbmRvdy5vZmZzZXQgPz8gMSkgPT4AAAAAAAAAAK8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACvAQAAICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIG1lbW9pemUoZm4sIGNhY2hlID0gCigpKQpNZW1vaXplKG4sIC4uLnJlc3QpCiAgcShzLCBlPWRvY3VtZW50KQogIHFhKHMsZT1kb2N1bWVudCkKICAuZ2V0UmVwb3MgPSAoKSA9PgogIGUgPT4KICAucGFyc2VYTUwgPSB4bWxTdHIgPT4KICAuZmV0Y2hVUkwgPSB1cmwgPT4KICByID0+CiAgLmdldFBhZ2UgPSAodXJsID0gd2luZG93LmhyZWYpID0+CigpID0+CigpCiAgLm1ha2VRdWVyeSA9IG9iaiA9PgoocywgW24sIHZdLCBpKSA9PgogIC5tYWtlVVJMID0gKGJhc2UgPSB3aW5kb3cuaHJlZiwgcXVlcnkgPSB7fSkgPT4KICAubmV4dFVSTCA9ICh1ID0gd2luZG93LmhyZWYsIG9mZnNldCA9IDEpID0+CiAgLmZldGNoTmV4dCA9ICh1ID0gd2luZG93LmhyZWYsIG9mZnNldCA9IHdpbmRvdy5vZmZzZXQgPz8gMSkgPT4AAAAAAAAAAK8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACvAQAAICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIG1lbW9pemUoZm4sIGNhY2hlID0gCigpKQpNZW1vaXplKG4sIC4uLnJlc3QpCiAgcShzLCBlPWRvY3VtZW50KQogIHFhKHMsZT1kb2N1bWVudCkKICAuZ2V0UmVwb3MgPSAoKSA9PgogIGUgPT4KICAucGFyc2VYTUwgPSB4bWxTdHIgPT4KICAuZmV0Y2hVUkwgPSB1cmwgPT4KICByID0+CiAgLmdldFBhZ2UgPSAodXJsID0gd2luZG93LmhyZWYpID0+CigpID0+CigpCiAgLm1ha2VRdWVyeSA9IG9iaiA9PgoocywgW24sIHZdLCBpKSA9PgogIC5tYWtlVVJMID0gKGJhc2UgPSB3aW5kb3cuaHJlZiwgcXVlcnkgPSB7fSkgPT4KICAubmV4dFVSTCA9ICh1ID0gd2luZG93LmhyZWYsIG9mZnNldCA9IDEpID0+CiAgLmZldGNoTmV4dCA9ICh1ID0gd2luZG93LmhyZWYsIG9mZnNldCA9IHdpbmRvdy5vZmZzZXQgPz8gMSkgPT4AAAAAAAAAAK8BAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					54,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/github-userscript.js",
						"symkeys":
						[
							[
								321,
								350
							],
							[
								761,
								790
							],
							[
								797,
								800
							],
							[
								820,
								852
							],
							[
								1012,
								1039
							],
							[
								1074,
								1102
							],
							[
								1151,
								1168
							],
							[
								1250,
								1254
							],
							[
								1337,
								1358
							],
							[
								1419,
								1437
							],
							[
								2113,
								2117
							],
							[
								2136,
								2169
							],
							[
								2329,
								2334
							],
							[
								2445,
								2456
							],
							[
								2589,
								2608
							],
							[
								2636,
								2653
							],
							[
								2705,
								2751
							],
							[
								2818,
								2861
							],
							[
								2936,
								3004
							]
						],
						"symlist":
						[
							"function define(obj, ...args)",
							"function memoize(fn, cache = ",
							"())",
							" function Memoize(n, ...rest)",
							"function q(s, e = document)",
							"function qa(s, e = document)",
							".getRepos = () =>",
							"e =>",
							".parseXML = xmlStr =>",
							".fetchURL = url =>",
							"r =>",
							".getPage = (url = window.href) =>",
							"() =>",
							"function ()",
							".makeQuery = obj =>",
							"(s, [n, v], i) =>",
							".makeURL = (base = window.href, query = {}) =>",
							".nextURL = (u = window.href, offset = 1) =>",
							".fetchNext = async (u = window.href, offset = window.offset ?? 1) =>"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAACvAQAAICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIG1lbW9pemUoZm4sIGNhY2hlID0gCigpKQpNZW1vaXplKG4sIC4uLnJlc3QpCiAgcShzLCBlPWRvY3VtZW50KQogIHFhKHMsZT1kb2N1bWVudCkKICAuZ2V0UmVwb3MgPSAoKSA9PgogIGUgPT4KICAucGFyc2VYTUwgPSB4bWxTdHIgPT4KICAuZmV0Y2hVUkwgPSB1cmwgPT4KICByID0+CiAgLmdldFBhZ2UgPSAodXJsID0gd2luZG93LmhyZWYpID0+CigpID0+CigpCiAgLm1ha2VRdWVyeSA9IG9iaiA9PgoocywgW24sIHZdLCBpKSA9PgogIC5tYWtlVVJMID0gKGJhc2UgPSB3aW5kb3cuaHJlZiwgcXVlcnkgPSB7fSkgPT4KICAubmV4dFVSTCA9ICh1ID0gd2luZG93LmhyZWYsIG9mZnNldCA9IDEpID0+CiAgLmZldGNoTmV4dCA9ICh1ID0gd2luZG93LmhyZWYsIG9mZnNldCA9IHdpbmRvdy5vZmZzZXQgPz8gMSkgPT4AAAAAAAAAALQBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC0AQAAICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIG1lbW9pemUoZm4sIGNhY2hlID0gCigpKQpNZW1vaXplKG4sIC4uLnJlc3QpCiAgcShzLCBlID0gZG9jdW1lbnQpCiAgcWEocywgZSA9IGRvY3VtZW50KQogIC5nZXRSZXBvcyA9ICgpID0+CiAgZSA9PgogIC5wYXJzZVhNTCA9IHhtbFN0ciA9PgogIC5mZXRjaFVSTCA9IHVybCA9PgogIHIgPT4KICAuZ2V0UGFnZSA9ICh1cmwgPSB3aW5kb3cuaHJlZikgPT4KKCkgPT4KKCkKICAubWFrZVF1ZXJ5ID0gb2JqID0+CihzLCBbbiwgdl0sIGkpID0+CiAgLm1ha2VVUkwgPSAoYmFzZSA9IHdpbmRvdy5ocmVmLCBxdWVyeSA9IHt9KSA9PgogIC5uZXh0VVJMID0gKHUgPSB3aW5kb3cuaHJlZiwgb2Zmc2V0ID0gMSkgPT4KICAuZmV0Y2hOZXh0ID0gKHUgPSB3aW5kb3cuaHJlZiwgb2Zmc2V0ID0gd2luZG93Lm9mZnNldCA/PyAxKSA9PgAAAAAAAAAAtAEAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					55,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/ecmascript/parser.js",
						"symkeys":
						[
							[
								1630,
								1654
							],
							[
								1697,
								1703
							],
							[
								1806,
								1816
							],
							[
								1828,
								1834
							],
							[
								1971,
								1981
							],
							[
								1993,
								1999
							],
							[
								2015,
								2055
							],
							[
								2153,
								2166
							],
							[
								2480,
								2492
							],
							[
								2493,
								2518
							],
							[
								2684,
								2708
							],
							[
								2803,
								2831
							],
							[
								3011,
								3045
							],
							[
								3341,
								3346
							],
							[
								3359,
								3390
							],
							[
								3834,
								3849
							],
							[
								3953,
								3990
							],
							[
								4389,
								4394
							],
							[
								5319,
								5343
							],
							[
								5461,
								5466
							],
							[
								6450,
								6469
							],
							[
								6539,
								6544
							],
							[
								6672,
								6681
							],
							[
								6759,
								6767
							],
							[
								6918,
								6924
							],
							[
								7243,
								7264
							],
							[
								7411,
								7420
							],
							[
								7719,
								7726
							],
							[
								7797,
								7808
							],
							[
								7910,
								7921
							],
							[
								8310,
								8315
							],
							[
								8386,
								8390
							],
							[
								8596,
								8601
							],
							[
								8925,
								8945
							],
							[
								9074,
								9096
							],
							[
								9406,
								9426
							],
							[
								9502,
								9530
							],
							[
								9803,
								9839
							],
							[
								9892,
								9912
							],
							[
								10061,
								10068
							],
							[
								10559,
								10565
							],
							[
								10861,
								10865
							],
							[
								10886,
								10890
							],
							[
								11145,
								11162
							],
							[
								11642,
								11667
							],
							[
								11994,
								12010
							],
							[
								12064,
								12100
							],
							[
								12609,
								12633
							],
							[
								13229,
								13264
							],
							[
								13872,
								13887
							],
							[
								14641,
								14663
							],
							[
								15648,
								15671
							],
							[
								15919,
								15948
							],
							[
								16170,
								16205
							],
							[
								16469,
								16483
							],
							[
								16613,
								16635
							],
							[
								16760,
								16776
							],
							[
								17065,
								17089
							],
							[
								17261,
								17283
							],
							[
								17436,
								17463
							],
							[
								17618,
								17643
							],
							[
								17840,
								17863
							],
							[
								17974,
								18003
							],
							[
								18123,
								18147
							],
							[
								21452,
								21468
							],
							[
								21527,
								21550
							],
							[
								22186,
								22224
							],
							[
								23278,
								23320
							],
							[
								23697,
								23703
							],
							[
								23851,
								23905
							],
							[
								25090,
								25167
							],
							[
								26599,
								26628
							],
							[
								26799,
								26823
							],
							[
								27234,
								27256
							],
							[
								28590,
								28626
							],
							[
								30667,
								30695
							],
							[
								31707,
								31734
							],
							[
								33115,
								33157
							],
							[
								34532,
								34553
							],
							[
								36771,
								36797
							],
							[
								37399,
								37459
							],
							[
								38185,
								38251
							],
							[
								38676,
								38754
							],
							[
								39010,
								39049
							],
							[
								42333,
								42369
							],
							[
								42513,
								42549
							],
							[
								42664,
								42700
							],
							[
								43265,
								43282
							],
							[
								43583,
								43638
							],
							[
								43838,
								43850
							],
							[
								44697,
								44710
							],
							[
								46205,
								46223
							],
							[
								46483,
								46502
							],
							[
								48327,
								48367
							],
							[
								48751,
								48791
							],
							[
								49764,
								49811
							],
							[
								50328,
								50377
							],
							[
								50780,
								50802
							],
							[
								51070,
								51094
							],
							[
								52806,
								52831
							],
							[
								53190,
								53216
							],
							[
								53431,
								53480
							],
							[
								54174,
								54209
							],
							[
								54592,
								54629
							],
							[
								55055,
								55088
							],
							[
								57882,
								57921
							],
							[
								58223,
								58259
							],
							[
								58697,
								58702
							],
							[
								58921,
								58971
							],
							[
								60006,
								60057
							],
							[
								60448,
								60469
							],
							[
								60602,
								60623
							],
							[
								60919,
								60943
							],
							[
								61135,
								61156
							],
							[
								61342,
								61364
							],
							[
								61715,
								61772
							],
							[
								65847,
								65875
							],
							[
								66548,
								66565
							],
							[
								66648,
								66680
							],
							[
								67750,
								67798
							],
							[
								68692,
								68772
							],
							[
								69110,
								69130
							],
							[
								69593,
								69607
							],
							[
								70388,
								70404
							],
							[
								70443,
								70462
							],
							[
								70532,
								70563
							],
							[
								70575,
								70579
							],
							[
								70650,
								70666
							],
							[
								70683,
								70687
							],
							[
								70705,
								70720
							],
							[
								70867,
								70882
							],
							[
								70889,
								70893
							],
							[
								70970,
								70985
							],
							[
								71012,
								71047
							],
							[
								71080,
								71094
							],
							[
								71346,
								71386
							],
							[
								71642,
								71699
							],
							[
								71770,
								71799
							],
							[
								73268,
								73273
							],
							[
								73836,
								73840
							],
							[
								74220,
								74250
							],
							[
								74274,
								74290
							],
							[
								74367,
								74374
							],
							[
								74419,
								74439
							],
							[
								74459,
								74475
							],
							[
								74633,
								74648
							],
							[
								74663,
								74683
							],
							[
								74701,
								74706
							],
							[
								74730,
								74779
							]
						],
						"symlist":
						[
							"add = (arr, ...items) =>",
							"Parser",
							" tokens =>",
							"tok =>",
							" tokens =>",
							"tok =>",
							"constructor(sourceText, fileName, debug)",
							" (c, s, e) =>",
							" key =>",
							" function(...args)",
							".callback = (...args) =>",
							"error(errorMessage, astNode)",
							"handleComment(comment, start, end)",
							"() =>",
							" function(ctor, args, instance)",
							"onNewNode(node)",
							"onReturnNode(node, stackEntry, stack)",
							"get()",
							"addCommentsToNodes(root)",
							" n =>",
							"tokensForNode(root)",
							" n =>",
							"(a, b) =>",
							"range =>",
							"next()",
							"lookahead(offset = 0)",
							"consume()",
							"state()",
							" function()",
							"printtoks()",
							"log()",
							"a =>",
							"st =>",
							"position(tok = null)",
							"addNode(ctor, ...args)",
							"function getFn(name)",
							"function isLiteral({ type })",
							"function isTemplateLiteral({ type })",
							"function backTrace()",
							"line =>",
							"Parser",
							"e =>",
							"e =>",
							"function toStr(a)",
							"stackFunc = (name, fn) =>",
							"ECMAScriptParser",
							"expectIdentifier(no_keyword = false)",
							"expectKeywords(keywords)",
							"expectPunctuators(punctuators, ast)",
							"expectLiteral()",
							"parseTemplateLiteral()",
							"matchKeywords(keywords)",
							"matchPunctuators(punctuators)",
							"matchIdentifier(no_keyword = false)",
							"matchLiteral()",
							"matchTemplateLiteral()",
							"matchStatement()",
							"matchPrimaryExpression()",
							"matchUnaryExpression()",
							"matchAssignmentExpression()",
							"matchFunctionExpression()",
							"matchMemberExpression()",
							"matchLeftHandSideExpression()",
							"parsePrimaryExpression()",
							"parseArguments()",
							"checkRestOf = parser =>",
							"parseRemainingMemberExpression(object)",
							"parseArrowFunction(args, is_async = false)",
							"arg =>",
							"parseRemainingCallExpression(object, is_async = false)",
							"parseNewOrCallOrMemberExpression(couldBeNewExpression, couldBeCallExpression)",
							"parseLeftHandSideExpression()",
							"parsePostfixExpression()",
							"parseUnaryExpression()",
							"parseBinaryExpression(minPrecedence)",
							"parseConditionalExpression()",
							"parseAssignmentExpression()",
							"parseExpression(optional, sequence = true)",
							"parseBindingPattern()",
							"parseVariableDeclaration()",
							"parseVariableDeclarationList(kind = 'var', exported = false)",
							"parseBlock(insideIteration, insideFunction, ctor = BlockStatement)",
							"parseList(insideIteration = false, insideFunction = false, check = p => false)",
							"parseObject(isClass = false, args = [])",
							"memberCtor = (id, value, _, kind) =>",
							"memberCtor = (id, value, element) =>",
							"memberCtor = (id, value, _, kind) =>",
							"([key, value]) =>",
							" function BindingProperty(property, id, initializer)",
							"parseArray()",
							"parseJSXTag()",
							"([name, value]) =>",
							"parseJSX(depth = 0)",
							"parseVariableStatement(exported = false)",
							"parseImportDeclaration(toplevel = false)",
							"parseImportSpecifier(default_specifier = false)",
							"parseModuleItems(method = 'parseImportSpecifier')",
							"parseExportSpecifier()",
							"parseExportDeclaration()",
							"parseDecoratorStatement()",
							"parseExpressionStatement()",
							"parseIfStatement(insideIteration, insideFunction)",
							"parseWhileStatement(insideFunction)",
							"parseDoWhileStatement(insideFunction)",
							"parseForStatement(insideFunction)",
							"parseIterationStatement(insideFunction)",
							"parseSwitchStatement(insideFunction)",
							" p =>",
							"parseTryStatement(insideIteration, insideFunction)",
							"parseWithStatement(insideIteration, insideFunction)",
							"parseThrowStatement()",
							"parseYieldStatement()",
							"parseContinueStatement()",
							"parseBreakStatement()",
							"parseReturnStatement()",
							"parseStatement(insideIteration, insideFunction, exported)",
							"parseClass(exported = false)",
							"parseParameters()",
							"checkRestOf = (parser, match) =>",
							"parseFunction(exported = false, isAsync = false)",
							"parseFunctionParametersAndBody(identifier, isAsync = false, isGenerator = false)",
							"parseSourceElement()",
							"parseProgram()",
							"ECMAScriptParser",
							"quoteArray = arr =>",
							"quoteList = (l, delim = ' ') =>",
							"t =>",
							"quoteToks = l =>",
							"t =>",
							"quoteObj = i =>",
							"quoteArg = a =>",
							"i =>",
							"quoteStr = s =>",
							"Parser.prototype.trace = function()",
							" frame =>",
							"Parser.prototype.onToken = function(tok)",
							"instrumentate = (methodName, fn = methods[methodName]) =>",
							"esfactory = function(...args)",
							" n =>",
							"t =>",
							"function instrumentateParser()",
							"ECMAScriptParser",
							"name =>",
							"(acc, methodName) =>",
							"ECMAScriptParser",
							"timeout = ms =>",
							"(resolve, reject) =>",
							"() =>",
							"Parser.parse = function parse(sourceText, prefix)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC0AQAAICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIG1lbW9pemUoZm4sIGNhY2hlID0gCigpKQpNZW1vaXplKG4sIC4uLnJlc3QpCiAgcShzLCBlID0gZG9jdW1lbnQpCiAgcWEocywgZSA9IGRvY3VtZW50KQogIC5nZXRSZXBvcyA9ICgpID0+CiAgZSA9PgogIC5wYXJzZVhNTCA9IHhtbFN0ciA9PgogIC5mZXRjaFVSTCA9IHVybCA9PgogIHIgPT4KICAuZ2V0UGFnZSA9ICh1cmwgPSB3aW5kb3cuaHJlZikgPT4KKCkgPT4KKCkKICAubWFrZVF1ZXJ5ID0gb2JqID0+CihzLCBbbiwgdl0sIGkpID0+CiAgLm1ha2VVUkwgPSAoYmFzZSA9IHdpbmRvdy5ocmVmLCBxdWVyeSA9IHt9KSA9PgogIC5uZXh0VVJMID0gKHUgPSB3aW5kb3cuaHJlZiwgb2Zmc2V0ID0gMSkgPT4KICAuZmV0Y2hOZXh0ID0gKHUgPSB3aW5kb3cuaHJlZiwgb2Zmc2V0ID0gd2luZG93Lm9mZnNldCA/PyAxKSA9PgAAAAAAAAAAZA8AAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "eagle2svg.js",
			"settings":
			{
				"buffer_size": 2302,
				"line_ending": "Unix"
			}
		},
		{
			"file": "eagle-shell.js",
			"settings":
			{
				"buffer_size": 38946,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1174,
					1,
					"insert",
					{
						"characters": "+"
					},
					"AQAAANcsAAAAAAAA2CwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1ywAAAAAAADXLAAAAAAAAAAAAAAAAPC/"
				],
				[
					1175,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAANgsAAAAAAAA2iwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2CwAAAAAAADYLAAAAAAAAAAAAAAAAPC/"
				],
				[
					1176,
					1,
					"insert",
					{
						"characters": "2*width"
					},
					"BwAAANksAAAAAAAA2iwAAAAAAAAAAAAA2iwAAAAAAADbLAAAAAAAAAAAAADbLAAAAAAAANwsAAAAAAAAAAAAANwsAAAAAAAA3SwAAAAAAAAAAAAA3SwAAAAAAADeLAAAAAAAAAAAAADeLAAAAAAAAN8sAAAAAAAAAAAAAN8sAAAAAAAA4CwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2SwAAAAAAADZLAAAAAAAAAAAAAAAAPC/"
				],
				[
					1182,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOEsAAAAAAAA4iwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4SwAAAAAAADhLAAAAAAAAAAAAAAAAPC/"
				],
				[
					1185,
					1,
					"left_delete",
					null,
					"AQAAAOEsAAAAAAAA4SwAAAAAAAABAAAAIA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4iwAAAAAAADiLAAAAAAAAAAAAAAAAPC/"
				],
				[
					1186,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAOEsAAAAAAAA4iwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4SwAAAAAAADhLAAAAAAAAAAAAAAAAPC/"
				],
				[
					1187,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOIsAAAAAAAA4ywAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4iwAAAAAAADiLAAAAAAAAAAAAAAAAPC/"
				],
				[
					1188,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAOMsAAAAAAAA5SwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4ywAAAAAAADjLAAAAAAAAAAAAAAAAPC/"
				],
				[
					1189,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAOMsAAAAAAAA4ywAAAAAAAABAAAAJ+MsAAAAAAAA4ywAAAAAAAABAAAAJw",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5CwAAAAAAADkLAAAAAAAAAAAAAAAAPC/"
				],
				[
					1190,
					1,
					"insert",
					{
						"characters": "width*n"
					},
					"BwAAAOMsAAAAAAAA5CwAAAAAAAAAAAAA5CwAAAAAAADlLAAAAAAAAAAAAADlLAAAAAAAAOYsAAAAAAAAAAAAAOYsAAAAAAAA5ywAAAAAAAAAAAAA5ywAAAAAAADoLAAAAAAAAAAAAADoLAAAAAAAAOksAAAAAAAAAAAAAOksAAAAAAAA6iwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4ywAAAAAAADjLAAAAAAAAAAAAAAAAPC/"
				],
				[
					1192,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAOssAAAAAAAA7CwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6ywAAAAAAADrLAAAAAAAAAAAAAAAAPC/"
				],
				[
					1221,
					1,
					"insert",
					{
						"characters": "rect"
					},
					"BQAAACAtAAAAAAAAIS0AAAAAAAAAAAAAIS0AAAAAAAAhLQAAAAAAAAEAAAByIS0AAAAAAAAiLQAAAAAAAAAAAAAiLQAAAAAAACMtAAAAAAAAAAAAACMtAAAAAAAAJC0AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIC0AAAAAAAAhLQAAAAAAAAAAAAAAAPC/"
				],
				[
					1228,
					1,
					"insert",
					{
						"characters": "rect"
					},
					"BQAAAJktAAAAAAAAmi0AAAAAAAAAAAAAmi0AAAAAAACaLQAAAAAAAAEAAABymi0AAAAAAACbLQAAAAAAAAAAAACbLQAAAAAAAJwtAAAAAAAAAAAAAJwtAAAAAAAAnS0AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmS0AAAAAAACaLQAAAAAAAAAAAAAAAPC/"
				],
				[
					1233,
					1,
					"insert",
					{
						"characters": "rect"
					},
					"BQAAAJAtAAAAAAAAkS0AAAAAAAAAAAAAkS0AAAAAAACRLQAAAAAAAAEAAABykS0AAAAAAACSLQAAAAAAAAAAAACSLQAAAAAAAJMtAAAAAAAAAAAAAJMtAAAAAAAAlC0AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAkC0AAAAAAACRLQAAAAAAAAAAAAAAAPC/"
				],
				[
					1239,
					1,
					"insert",
					{
						"characters": "rect"
					},
					"BQAAAHUtAAAAAAAAdi0AAAAAAAAAAAAAdi0AAAAAAAB2LQAAAAAAAAEAAABydi0AAAAAAAB3LQAAAAAAAAAAAAB3LQAAAAAAAHgtAAAAAAAAAAAAAHgtAAAAAAAAeS0AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAdS0AAAAAAAB2LQAAAAAAAAAAAAAAAPC/"
				],
				[
					1252,
					1,
					"insert",
					{
						"characters": "\n\nrect.align"
					},
					"DwAAAPIsAAAAAAAA8ywAAAAAAAAAAAAA8ywAAAAAAAD3LAAAAAAAAAAAAAD3LAAAAAAAAPgsAAAAAAAAAAAAAPgsAAAAAAAA/CwAAAAAAAAAAAAA8ywAAAAAAADzLAAAAAAAAAQAAAAgICAg+CwAAAAAAAD5LAAAAAAAAAAAAAD5LAAAAAAAAPosAAAAAAAAAAAAAPosAAAAAAAA+ywAAAAAAAAAAAAA+ywAAAAAAAD8LAAAAAAAAAAAAAD8LAAAAAAAAP0sAAAAAAAAAAAAAP0sAAAAAAAA/iwAAAAAAAAAAAAA/iwAAAAAAAD/LAAAAAAAAAAAAAD/LAAAAAAAAAAtAAAAAAAAAAAAAAAtAAAAAAAAAS0AAAAAAAAAAAAAAS0AAAAAAAACLQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA8iwAAAAAAADyLAAAAAAAAAAAAAAAAPC/"
				],
				[
					1253,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAAItAAAAAAAABC0AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAi0AAAAAAAACLQAAAAAAAAAAAAAAAPC/"
				],
				[
					1254,
					1,
					"insert",
					{
						"characters": "new"
					},
					"AwAAAAMtAAAAAAAABC0AAAAAAAAAAAAABC0AAAAAAAAFLQAAAAAAAAAAAAAFLQAAAAAAAAYtAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAy0AAAAAAAADLQAAAAAAAAAAAAAAAPC/"
				],
				[
					1255,
					1,
					"insert",
					{
						"characters": " Point"
					},
					"BgAAAAYtAAAAAAAABy0AAAAAAAAAAAAABy0AAAAAAAAILQAAAAAAAAAAAAAILQAAAAAAAAktAAAAAAAAAAAAAAktAAAAAAAACi0AAAAAAAAAAAAACi0AAAAAAAALLQAAAAAAAAAAAAALLQAAAAAAAAwtAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABi0AAAAAAAAGLQAAAAAAAAAAAAAAAPC/"
				],
				[
					1256,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAAwtAAAAAAAADi0AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADC0AAAAAAAAMLQAAAAAAAAAAAAAAAPC/"
				],
				[
					1257,
					1,
					"insert",
					{
						"characters": "0,0"
					},
					"AwAAAA0tAAAAAAAADi0AAAAAAAAAAAAADi0AAAAAAAAPLQAAAAAAAAAAAAAPLQAAAAAAABAtAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADS0AAAAAAAANLQAAAAAAAAAAAAAAAPC/"
				],
				[
					1259,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAABItAAAAAAAAEy0AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEi0AAAAAAAASLQAAAAAAAAAAAAAAAPC/"
				],
				[
					1270,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAAM0tAAAAAAAAzi0AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAzS0AAAAAAADNLQAAAAAAAAAAAAAAAPC/"
				],
				[
					1272,
					1,
					"insert",
					{
						"characters": "/2)"
					},
					"AwAAANItAAAAAAAA0y0AAAAAAAAAAAAA0y0AAAAAAADULQAAAAAAAAAAAADULQAAAAAAANUtAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0i0AAAAAAADSLQAAAAAAAAAAAAAAAPC/"
				],
				[
					1333,
					1,
					"insert",
					{
						"characters": "\nelt"
					},
					"BgAAAG4sAAAAAAAAbywAAAAAAAAAAAAAbywAAAAAAABzLAAAAAAAAAAAAABzLAAAAAAAAHUsAAAAAAAAAAAAAHUsAAAAAAAAdiwAAAAAAAAAAAAAdiwAAAAAAAB3LAAAAAAAAAAAAAB3LAAAAAAAAHgsAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbiwAAAAAAABuLAAAAAAAAAAAAAAAAPC/"
				],
				[
					1334,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHgsAAAAAAAAeSwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAeCwAAAAAAAB4LAAAAAAAAAAAAAAAAPC/"
				],
				[
					1335,
					4,
					"left_delete",
					null,
					"BAAAAHgsAAAAAAAAeCwAAAAAAAABAAAAIHcsAAAAAAAAdywAAAAAAAABAAAAdHYsAAAAAAAAdiwAAAAAAAABAAAAbHUsAAAAAAAAdSwAAAAAAAABAAAAZQ",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAeSwAAAAAAAB5LAAAAAAAAAAAAAAAAPC/"
				],
				[
					1336,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAAHUsAAAAAAAAdiwAAAAAAAAAAAAAdiwAAAAAAAB3LAAAAAAAAAAAAAB3LAAAAAAAAHgsAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAdSwAAAAAAAB1LAAAAAAAAAAAAAAAAPC/"
				],
				[
					1337,
					1,
					"insert",
					{
						"characters": " width;"
					},
					"BwAAAHgsAAAAAAAAeSwAAAAAAAAAAAAAeSwAAAAAAAB6LAAAAAAAAAAAAAB6LAAAAAAAAHssAAAAAAAAAAAAAHssAAAAAAAAfCwAAAAAAAAAAAAAfCwAAAAAAAB9LAAAAAAAAAAAAAB9LAAAAAAAAH4sAAAAAAAAAAAAAH4sAAAAAAAAfywAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAeCwAAAAAAAB4LAAAAAAAAAAAAAAAAPC/"
				],
				[
					1338,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAH8sAAAAAAAAgCwAAAAAAAAAAAAAgCwAAAAAAACGLAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAfywAAAAAAAB/LAAAAAAAAAAAAAAAAPC/"
				],
				[
					1345,
					1,
					"cut",
					null,
					"AQAAAG8sAAAAAAAAbywAAAAAAAARAAAAICAgICAgbGV0IHdpZHRoOwo",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbywAAAAAAACALAAAAAAAAAAAAAAAAAAA"
				],
				[
					1349,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAJIsAAAAAAAAkywAAAAAAAAAAAAAbywAAAAAAABvLAAAAAAAAAYAAAAgICAgICA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAkiwAAAAAAACSLAAAAAAAAAAAAAAAAPC/"
				],
				[
					1350,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAI0sAAAAAAAAjywAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjSwAAAAAAACNLAAAAAAAAAAAAAAAAPC/"
				],
				[
					1351,
					1,
					"right_delete",
					null,
					"AQAAAI4sAAAAAAAAjiwAAAAAAAABAAAAfQ",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjiwAAAAAAACOLAAAAAAAAAAAAAAAAPC/"
				],
				[
					1356,
					1,
					"left_delete",
					null,
					"AQAAAI0sAAAAAAAAjSwAAAAAAAABAAAAew",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjiwAAAAAAACOLAAAAAAAAP///////+9/"
				],
				[
					1366,
					1,
					"insert",
					{
						"characters": "width"
					},
					"BgAAAN0tAAAAAAAA3i0AAAAAAAAAAAAA3i0AAAAAAADeLQAAAAAAAAQAAABzdGVw3i0AAAAAAADfLQAAAAAAAAAAAADfLQAAAAAAAOAtAAAAAAAAAAAAAOAtAAAAAAAA4S0AAAAAAAAAAAAA4S0AAAAAAADiLQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3S0AAAAAAADhLQAAAAAAAAAAAAAAAPC/"
				],
				[
					1404,
					1,
					"revert",
					null,
					"",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3S0AAAAAAADiLQAAAAAAAAAAAAAAAPC/"
				],
				[
					1407,
					1,
					"insert",
					{
						"characters": " /"
					},
					"AgAAAOItAAAAAAAA4y0AAAAAAAAAAAAA4y0AAAAAAADkLQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4i0AAAAAAADiLQAAAAAAAAAAAAAAAPC/"
				],
				[
					1408,
					1,
					"insert",
					{
						"characters": " 2"
					},
					"AgAAAOQtAAAAAAAA5S0AAAAAAAAAAAAA5S0AAAAAAADmLQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5C0AAAAAAADkLQAAAAAAAAAAAAAAAPC/"
				],
				[
					1460,
					1,
					"insert",
					{
						"characters": "rect"
					},
					"BAAAAP8sAAAAAAAAAC0AAAAAAAAAAAAAAC0AAAAAAAABLQAAAAAAAAAAAAABLQAAAAAAAAItAAAAAAAAAAAAAAItAAAAAAAAAy0AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/ywAAAAAAAD/LAAAAAAAAAAAAAAAAPC/"
				],
				[
					1461,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAAMtAAAAAAAABC0AAAAAAAAAAAAABC0AAAAAAAAFLQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAy0AAAAAAAADLQAAAAAAAAAAAAAAAPC/"
				],
				[
					1462,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAUtAAAAAAAABi0AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABS0AAAAAAAAFLQAAAAAAAAAAAAAAAPC/"
				],
				[
					1487,
					1,
					"insert",
					{
						"characters": "4"
					},
					"AgAAAN0tAAAAAAAA3i0AAAAAAAAAAAAA3i0AAAAAAADeLQAAAAAAAAEAAAAy",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3S0AAAAAAADeLQAAAAAAAAAAAAAAAPC/"
				],
				[
					1490,
					1,
					"cut",
					null,
					"AQAAANMtAAAAAAAA0y0AAAAAAAALAAAAICsgc3RlcCAvIDQ",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3i0AAAAAAADTLQAAAAAAAAAAAAAAAPC/"
				],
				[
					1491,
					1,
					"paste",
					null,
					"AQAAANMtAAAAAAAA3i0AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0y0AAAAAAADTLQAAAAAAAAAAAAAAAPC/"
				],
				[
					1496,
					1,
					"paste",
					null,
					"AQAAAMctAAAAAAAA0i0AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxy0AAAAAAADHLQAAAAAAAAAAAAAAAPC/"
				],
				[
					1499,
					1,
					"insert",
					{
						"characters": "-"
					},
					"AgAAAMgtAAAAAAAAyS0AAAAAAAAAAAAAyS0AAAAAAADJLQAAAAAAAAEAAAAr",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAyS0AAAAAAADILQAAAAAAAAAAAAAAAPC/"
				],
				[
					1523,
					2,
					"left_delete",
					null,
					"AgAAAFgtAAAAAAAAWC0AAAAAAAABAAAAKlctAAAAAAAAVy0AAAAAAAABAAAALw",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWS0AAAAAAABZLQAAAAAAAAAAAAAAAPC/"
				],
				[
					1525,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAAFUtAAAAAAAAVi0AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVS0AAAAAAABVLQAAAAAAAAAAAAAAAPC/"
				],
				[
					1528,
					2,
					"left_delete",
					null,
					"AgAAAFwtAAAAAAAAXC0AAAAAAAABAAAAL1stAAAAAAAAWy0AAAAAAAABAAAAKg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXS0AAAAAAABdLQAAAAAAAAAAAAAAAPC/"
				],
				[
					1529,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAFstAAAAAAAAXS0AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWy0AAAAAAABbLQAAAAAAAAAAAAAAAPC/"
				],
				[
					1531,
					2,
					"left_delete",
					null,
					"AgAAAFwtAAAAAAAAXC0AAAAAAAABAAAAKVstAAAAAAAAWy0AAAAAAAABAAAAKA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXS0AAAAAAABdLQAAAAAAAAAAAAAAAPC/"
				],
				[
					1532,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAFstAAAAAAAAXC0AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWy0AAAAAAABbLQAAAAAAAAAAAAAAAPC/"
				],
				[
					1548,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAF0tAAAAAAAAXi0AAAAAAAAAAAAAXi0AAAAAAABkLQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXS0AAAAAAABdLQAAAAAAAAAAAAAAAPC/"
				],
				[
					1551,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAAGQtAAAAAAAAZS0AAAAAAAAAAAAAZS0AAAAAAABmLQAAAAAAAAAAAABmLQAAAAAAAGctAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZC0AAAAAAABkLQAAAAAAAAAAAAAAAPC/"
				],
				[
					1552,
					1,
					"insert",
					{
						"characters": " slope="
					},
					"BwAAAGctAAAAAAAAaC0AAAAAAAAAAAAAaC0AAAAAAABpLQAAAAAAAAAAAABpLQAAAAAAAGotAAAAAAAAAAAAAGotAAAAAAAAay0AAAAAAAAAAAAAay0AAAAAAABsLQAAAAAAAAAAAABsLQAAAAAAAG0tAAAAAAAAAAAAAG0tAAAAAAAAbi0AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZy0AAAAAAABnLQAAAAAAAAAAAAAAAPC/"
				],
				[
					1553,
					1,
					"paste",
					null,
					"AQAAAG4tAAAAAAAAdi0AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbi0AAAAAAABuLQAAAAAAAAAAAAAAAPC/"
				],
				[
					1554,
					1,
					"left_delete",
					null,
					"AQAAAHUtAAAAAAAAdS0AAAAAAAABAAAANA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAdi0AAAAAAAB2LQAAAAAAAAAAAAAAAPC/"
				],
				[
					1555,
					1,
					"insert",
					{
						"characters": "2;"
					},
					"AgAAAHUtAAAAAAAAdi0AAAAAAAAAAAAAdi0AAAAAAAB3LQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAdS0AAAAAAAB1LQAAAAAAAAAAAAAAAPC/"
				],
				[
					1565,
					1,
					"paste",
					null,
					"AgAAAOItAAAAAAAA5y0AAAAAAAAAAAAA5y0AAAAAAADnLQAAAAAAAAQAAABzdGVw",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4i0AAAAAAADmLQAAAAAAAAAAAAAAAPC/"
				],
				[
					1570,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AgAAAOotAAAAAAAA6y0AAAAAAAAAAAAA6y0AAAAAAADrLQAAAAAAAAEAAAA0",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6i0AAAAAAADrLQAAAAAAAAAAAAAAAPC/"
				],
				[
					1575,
					1,
					"paste",
					null,
					"AgAAAPotAAAAAAAA/y0AAAAAAAAAAAAA/y0AAAAAAAD/LQAAAAAAAAQAAABzdGVw",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+i0AAAAAAAD+LQAAAAAAAAAAAAAAAPC/"
				],
				[
					1580,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AgAAAAIuAAAAAAAAAy4AAAAAAAAAAAAAAy4AAAAAAAADLgAAAAAAAAEAAAA0",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAi4AAAAAAAADLgAAAAAAAAAAAAAAAPC/"
				],
				[
					1592,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAHYtAAAAAAAAeC0AAAAAAAAAAAAAcy0AAAAAAAB1LQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAcy0AAAAAAAB2LQAAAAAAAAAAAAAAAPC/"
				],
				[
					1,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "/home/roman/Projects/an-tronics/eagle/lbr/l.lbr",
			"settings":
			{
				"buffer_size": 112388,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/geom/rect.js",
			"settings":
			{
				"buffer_size": 16523,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/geom/line.js",
			"settings":
			{
				"buffer_size": 15165,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					16,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAGMpAAAAAAAAZCkAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAYykAAAAAAABjKQAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"paste",
					null,
					"AQAAAGQpAAAAAAAAFSoAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZCkAAAAAAABkKQAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"paste",
					null,
					"AgAAAGUpAAAAAAAAaSkAAAAAAAAAAAAAaSkAAAAAAABpKQAAAAAAAAQAAABSZWN0",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZSkAAAAAAABpKQAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"paste",
					null,
					"AgAAAKIpAAAAAAAApikAAAAAAAAAAAAApikAAAAAAACmKQAAAAAAAAQAAABSZWN0",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAoikAAAAAAACmKQAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAAL8pAAAAAAAAwCkAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvykAAAAAAAC/KQAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAAMUpAAAAAAAAxikAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxSkAAAAAAADFKQAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": "x2"
					},
					"AwAAAMopAAAAAAAAyykAAAAAAAAAAAAAyykAAAAAAADLKQAAAAAAAAUAAAB3aWR0aMspAAAAAAAAzCkAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAyikAAAAAAADPKQAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": "y2"
					},
					"AwAAANApAAAAAAAA0SkAAAAAAAAAAAAA0SkAAAAAAADRKQAAAAAAAAYAAABoZWlnaHTRKQAAAAAAANIpAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0CkAAAAAAADWKQAAAAAAAAAAAAAAAPC/"
				],
				[
					69,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAABAqAAAAAAAAESoAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAECoAAAAAAAAQKgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "quickjs/qjs-modules/lib/repl.js",
			"settings":
			{
				"buffer_size": 60514,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/eagle/components/via.js",
			"settings":
			{
				"buffer_size": 2696,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/eagle/components/wire.js",
			"settings":
			{
				"buffer_size": 1800,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					13,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAALYGAAAAAAAAtwYAAAAAAAAAAAAAtwYAAAAAAAC3BgAAAAAAAAsAAAAgZWxzZSB7CiAgfQ",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtgYAAAAAAADBBgAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAP0FAAAAAAAA/gUAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/QUAAAAAAAD9BQAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAP4FAAAAAAAA/wUAAAAAAAAAAAAA/wUAAAAAAAACBgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/gUAAAAAAAD+BQAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAD8EAAAAAAAAQAQAAAAAAAAAAAAAQAQAAAAAAABBBAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPwQAAAAAAAA/BAAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAOUDAAAAAAAA5gMAAAAAAAAAAAAA5gMAAAAAAADnAwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5QMAAAAAAADlAwAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAKEDAAAAAAAAogMAAAAAAAAAAAAAogMAAAAAAACjAwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAoQMAAAAAAAChAwAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAIMDAAAAAAAAhAMAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgwMAAAAAAACDAwAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAFoDAAAAAAAAWwMAAAAAAAAAAAAAWwMAAAAAAABcAwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWgMAAAAAAABaAwAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJwFAAAAAAAAnQUAAAAAAAAAAAAAnQUAAAAAAACfBQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnAUAAAAAAACcBQAAAAAAAAAAAAAAAPC/"
				],
				[
					82,
					1,
					"revert",
					null,
					"CAAAAAAAAAAAAAAAAAAAAAAAAAATBwAAaW1wb3J0IHsgQXJjVG8sIFRyYW5zZm9ybWF0aW9uTGlzdCB9IGZyb20gJy4uLy4uL2dlb20uanMnOwppbXBvcnQgeyBoIH0gZnJvbSAnLi4vLi4vcHJlYWN0Lm1qcyc7CmltcG9ydCB7IHVzZVZhbHVlIH0gZnJvbSAnLi4vLi4vcmVwZWF0ZXIvcmVhY3QtaG9va3MuanMnOwppbXBvcnQgeyBFbGVtZW50VG9DbGFzcywgbG9nLCBNYWtlQ29vcmRUcmFuc2Zvcm1lciwgdXNlVHJrbCB9IGZyb20gJy4uL3JlbmRlclV0aWxzLmpzJzsKCmNvbnN0IFJvdW5kVG9NaWwgPSBuID0+IE1hdGgucm91bmQobiAqIDEwMDApIC8gMTAwMDsKCmV4cG9ydCBjb25zdCBXaXJlID0gKHsgZGF0YSwgb3B0cyA9IHt9LCBjb2xvciwgLi4ucHJvcHMgfSkgPT4gewogIGxldCB3aXJlID0KICAgIHVzZVZhbHVlKGFzeW5jIGZ1bmN0aW9uKiAoKSB7CiAgICAgIGZvciBhd2FpdChsZXQgY2hhbmdlIG9mIGRhdGEucmVwZWF0ZXIpIHsKICAgICAgICB5aWVsZCBjaGFuZ2U7CiAgICAgIH0KICAgIH0pIHx8IGRhdGE7CiAgbGV0IHsgbGFiZWxUZXh0LCB0cmFuc2Zvcm0gPSBuZXcgVHJhbnNmb3JtYXRpb25MaXN0KCkgfSA9IG9wdHM7CgogIGxldCBjb29yZEZuID0gdHJhbnNmb3JtID8gTWFrZUNvb3JkVHJhbnNmb3JtZXIodHJhbnNmb3JtKSA6IGkgPT4gaTsKICBsZXQgeyB3aWR0aCwgY3VydmUgPSAnJywgeDEsIHkxLCB4MiwgeTIgfSA9IGNvb3JkRm4od2lyZSk7CiAgbGV0IGxheWVySWQgPSBpc05hTigrd2lyZS5hdHRyaWJ1dGVzLmxheWVyKSA/IHdpcmUuYXR0cmlidXRlcy5sYXllciA6ICt3aXJlLmF0dHJpYnV0ZXMubGF5ZXI7CiAgbGV0IGxheWVyID0gd2lyZS5kb2N1bWVudC5nZXRMYXllcihsYXllcklkKSA/PyB3aXJlLmxheWVyOwogCiAgbG9nKCdXaXJlLnJlbmRlciAnLCB7IGxheWVySWQsIHdpcmUgfSk7CgogIGNvbG9yID8/PSB3aXJlLmdldENvbG9yKCk7CiAKICBsZXQgdmlzaWJsZSA9ICFsYXllciB8fCAneWVzJyA9PSB1c2VUcmtsKGxheWVyLmhhbmRsZXJzLnZpc2libGUpOwogCiAgY29uc3QgZXh0cmFTdHlsZSA9IHsKICAgICdzdHJva2UtbGluZWNhcCc6ICdyb3VuZCcsCiAgICAnc3Ryb2tlLWxpbmVqb2luJzogJ3JvdW5kJwogIH07CiAKICBsZXQgZXh0cmFQcm9wcyA9IHsKICAgIGNsYXNzOiBFbGVtZW50VG9DbGFzcyh3aXJlLCBsYXllci5uYW1lKSwKICAgIHN0cm9rZTogY29sb3IsCiAgICAnc3Ryb2tlLXdpZHRoJzogKyh3aWR0aCA9PSAwID8gMC4xIDogd2lkdGggKiAxKS50b0ZpeGVkKDMpLAogICAgLi4uKGN1cnZlID8geyAnZGF0YS1jdXJ2ZSc6IGN1cnZlIH0gOiB7fSksCiAgICAnZGF0YS1sYXllcic6IGAke2xheWVyLm51bWJlcn0gJHtsYXllci5uYW1lfWAsCiAgICBzdHlsZTogdmlzaWJsZSA/IHsgLi4uZXh0cmFTdHlsZSB9IDogeyAuLi5leHRyYVN0eWxlLCBkaXNwbGF5OiAnbm9uZScgfSwKICAgIC4uLnByb3BzCiAgfTsKICAKICBpZih0cmFuc2Zvcm0ubGVuZ3RoID4gMCkgZXh0cmFQcm9wcy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07CgogIGxldCBkID0gYE0gJHt4MX0gJHt5MX0gTCAke3gyfSAke3kyfWA7CiAgIAogICBpZighaXNOYU4oK2N1cnZlKSAmJiBNYXRoLmFicygrY3VydmUpID4gMCkgewogICAgbGV0IHhkaWZmID0geDIgLSB4MSwKICAgICAgeWRpZmYgPSB5MiAtIHkxOwogICAgZCA9IGBNICR7eDF9ICR7eTF9IGA7CgogICAgZCArPSBBcmNUbyhSb3VuZFRvTWlsKHhkaWZmKSwgUm91bmRUb01pbCh5ZGlmZiksIC1jdXJ2ZSk7CiAgfSAKCiAgcmV0dXJuIGgoJ3BhdGgnLCB7CiAgICBkLAogICAgZmlsbDogJ25vbmUnLAogICAgLi4uZXh0cmFQcm9wcwogIH0pOwp9OwoAAAAAAAAAAAgHAAAAAAAAAAAAAAAAAAAAAAAACAcAAAAAAAAAAAAAAAAAAAAAAAAIBwAAAAAAAAAAAAAAAAAAAAAAAAgHAAAAAAAAAAAAAAAAAAAAAAAACAcAAAAAAAAAAAAAAAAAAAAAAAAIBwAAAAAAAAAAAAAAAAAAAAAAAAgHAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAfwIAAAAAAAC8AgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "/home/roman/Projects/an-tronics/eagle/RX-FM-Radio-1.5V-dip.brd",
			"settings":
			{
				"buffer_size": 56743,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "github-userscript.js",
			"settings":
			{
				"buffer_size": 3195,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					2,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAABIAAAAAAAAAFgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEgAAAAAAAAASAAAAAAAAAAAAAAAAAAAA"
				],
				[
					3,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB2AgAALy8gPT1Vc2VyU2NyaXB0PT0KICAgIC8vIEBuYW1lICAgICAgICAgR2l0SHViCi8vIEBuYW1lc3BhY2UgICAgaHR0cHM6Ly9naXRodWIuY29tLwovLyBAdmVyc2lvbiAgICAgIDAuMQovLyBAZGVzY3JpcHRpb24gIHRyeSB0byB0YWtlIG92ZXIgdGhlIHdvcmxkIQovLyBAYXV0aG9yICAgICAgIFlvdQovLyBAbWF0Y2ggICAgICAgIGh0dHBzOi8vZ2l0aHViLmNvbS8KLy8gQGljb24gICAgICAgICBodHRwczovL3d3dy5nb29nbGUuY29tL3MyL2Zhdmljb25zP3N6PTY0JmRvbWFpbj1naXRodWIuY29tCi8vIEBncmFudCAgICAgICAgbm9uZQovLyA9PS9Vc2VyU2NyaXB0PT0KCihmdW5jdGlvbigpIHsKICAgICd1c2Ugc3RyaWN0JzsKCgogICAgd2luZG93LmdldFJlcG9zPSgpID0+IFsuLi5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCIjdXNlci1yZXBvc2l0b3JpZXMtbGlzdCA+IHVsID4gbGkgPiBkaXYuY29sLTEwLmNvbC1sZy05LmQtaW5saW5lLWJsb2NrIildLm1hcChlID0+IFtlLnF1ZXJ5U2VsZWN0b3IoJ2EnKS5ocmVmLCBlLnF1ZXJ5U2VsZWN0b3IoJ2gzJykubmV4dEVsZW1lbnRTaWJsaW5nPy5xdWVyeVNlbGVjdG9yKCdhJyk/LmhyZWZdKTsKCgogICAgLy8gWW91ciBjb2RlIGhlcmUuLi4KfSkoKTsKAAAAAAAAAACDAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFgAAAAAAAAAWAAAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAAHwCAAAAAAAAfQIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfAIAAAAAAAB8AgAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"",
					null,
					"AgAAAAAAAAAAAAAA6wIAAAAAAAAAAAAA6wIAAAAAAADrAgAAAAAAAIQCAAAvLyA9PVVzZXJTY3JpcHQ9PQovLyBAbmFtZSAgICAgICAgIEdpdEh1YgovLyBAbmFtZXNwYWNlICAgIGh0dHBzOi8vZ2l0aHViLmNvbS8KLy8gQHZlcnNpb24gICAgICAwLjEKLy8gQGRlc2NyaXB0aW9uICB0cnkgdG8gdGFrZSBvdmVyIHRoZSB3b3JsZCEKLy8gQGF1dGhvciAgICAgICBZb3UKLy8gQG1hdGNoICAgICAgICBodHRwczovL2dpdGh1Yi5jb20vCi8vIEBpY29uICAgICAgICAgaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9zMi9mYXZpY29ucz9zej02NCZkb21haW49Z2l0aHViLmNvbQovLyBAZ3JhbnQgICAgICAgIG5vbmUKLy8gPT0vVXNlclNjcmlwdD09CgooZnVuY3Rpb24gKCkgewogICd1c2Ugc3RyaWN0JzsKCiAgd2luZG93LmdldFJlcG9zID0gKCkgPT4KICAgIFsuLi5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcjdXNlci1yZXBvc2l0b3JpZXMtbGlzdCA+IHVsID4gbGkgPiBkaXYuY29sLTEwLmNvbC1sZy05LmQtaW5saW5lLWJsb2NrJyldLm1hcChlID0+IFsKICAgICAgZS5xdWVyeVNlbGVjdG9yKCdhJykuaHJlZiwKICAgICAgZS5xdWVyeVNlbGVjdG9yKCdoMycpLm5leHRFbGVtZW50U2libGluZz8ucXVlcnlTZWxlY3RvcignYScpPy5ocmVmCiAgICBdKTsKCiAgLy8gWW91ciBjb2RlIGhlcmUuLi5hCn0pKCk7Cg",
					"AQAAAAAAAAABAAAAAAAAAAAAAACEAgAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"ensure_newline_at_eof",
					null,
					"AQAAAOsCAAAAAAAA7AIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6wIAAAAAAADrAgAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADsAgAALy8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBHaXRIdWIKLy8gQG5hbWVzcGFjZSAgICBodHRwczovL2dpdGh1Yi5jb20vCi8vIEB2ZXJzaW9uICAgICAgMC4xCi8vIEBkZXNjcmlwdGlvbiAgdHJ5IHRvIHRha2Ugb3ZlciB0aGUgd29ybGQhCi8vIEBhdXRob3IgICAgICAgWW91Ci8vIEBtYXRjaCAgICAgICAgaHR0cHM6Ly9naXRodWIuY29tLwovLyBAaWNvbiAgICAgICAgIGh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vczIvZmF2aWNvbnM/c3o9NjQmZG9tYWluPWdpdGh1Yi5jb20KLy8gQGdyYW50ICAgICAgICBub25lCi8vID09L1VzZXJTY3JpcHQ9PQoKKGZ1bmN0aW9uKCkgewogICAgJ3VzZSBzdHJpY3QnOwoKCiAgICB3aW5kb3cuZ2V0UmVwb3M9KCkgPT4gWy4uLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoIiN1c2VyLXJlcG9zaXRvcmllcy1saXN0ID4gdWwgPiBsaSA+IGRpdi5jb2wtMTAuY29sLWxnLTkuZC1pbmxpbmUtYmxvY2siKV0ubWFwKGUgPT4gW2UucXVlcnlTZWxlY3RvcignYScpLmhyZWYsIGUucXVlcnlTZWxlY3RvcignaDMnKS5uZXh0RWxlbWVudFNpYmxpbmc/LnF1ZXJ5U2VsZWN0b3IoJ2EnKT8uaHJlZl0pOwp3aW5kb3cucGFyc2VYTUw9eG1sU3RyPT4gewogICAgY29uc3QgcGFyc2VyID0gbmV3IERPTVBhcnNlcigpOwpyZXR1cm4gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyh4bWxTdHIsICJhcHBsaWNhdGlvbi94bWwiKTsKfQoKICAgIC8vIFlvdXIgY29kZSBoZXJlLi4uCn0pKCk7CgAAAAAAAAAACgMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6wIAAAAAAADrAgAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"",
					null,
					"AgAAAAAAAAAAAAAA9AUAAAAAAAAAAAAA9AUAAAAAAAD0BQAAAAAAAAoDAAAvLyA9PVVzZXJTY3JpcHQ9PQovLyBAbmFtZSAgICAgICAgIEdpdEh1YgovLyBAbmFtZXNwYWNlICAgIGh0dHBzOi8vZ2l0aHViLmNvbS8KLy8gQHZlcnNpb24gICAgICAwLjEKLy8gQGRlc2NyaXB0aW9uICB0cnkgdG8gdGFrZSBvdmVyIHRoZSB3b3JsZCEKLy8gQGF1dGhvciAgICAgICBZb3UKLy8gQG1hdGNoICAgICAgICBodHRwczovL2dpdGh1Yi5jb20vCi8vIEBpY29uICAgICAgICAgaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9zMi9mYXZpY29ucz9zej02NCZkb21haW49Z2l0aHViLmNvbQovLyBAZ3JhbnQgICAgICAgIG5vbmUKLy8gPT0vVXNlclNjcmlwdD09CgooZnVuY3Rpb24gKCkgewogICd1c2Ugc3RyaWN0JzsKCiAgd2luZG93LmdldFJlcG9zID0gKCkgPT4KICAgIFsuLi5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcjdXNlci1yZXBvc2l0b3JpZXMtbGlzdCA+IHVsID4gbGkgPiBkaXYuY29sLTEwLmNvbC1sZy05LmQtaW5saW5lLWJsb2NrJyldLm1hcChlID0+IFsKICAgICAgZS5xdWVyeVNlbGVjdG9yKCdhJykuaHJlZiwKICAgICAgZS5xdWVyeVNlbGVjdG9yKCdoMycpLm5leHRFbGVtZW50U2libGluZz8ucXVlcnlTZWxlY3RvcignYScpPy5ocmVmCiAgICBdKTsKICB3aW5kb3cucGFyc2VYTUwgPSB4bWxTdHIgPT4gewogICAgY29uc3QgcGFyc2VyID0gbmV3IERPTVBhcnNlcigpOwogICAgcmV0dXJuIHBhcnNlci5wYXJzZUZyb21TdHJpbmcoeG1sU3RyLCAnYXBwbGljYXRpb24veG1sJyk7CiAgfTsKCiAgLy8gWW91ciBjb2RlIGhlcmUuLi4KfSkoKTsK",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAKAwAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD0BQAALy8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBHaXRIdWIKLy8gQG5hbWVzcGFjZSAgICBodHRwczovL2dpdGh1Yi5jb20vCi8vIEB2ZXJzaW9uICAgICAgMC4xCi8vIEBkZXNjcmlwdGlvbiAgdHJ5IHRvIHRha2Ugb3ZlciB0aGUgd29ybGQhCi8vIEBhdXRob3IgICAgICAgWW91Ci8vIEBtYXRjaCAgICAgICAgaHR0cHM6Ly9naXRodWIuY29tLwovLyBAaWNvbiAgICAgICAgIGh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vczIvZmF2aWNvbnM/c3o9NjQmZG9tYWluPWdpdGh1Yi5jb20KLy8gQGdyYW50ICAgICAgICBub25lCi8vID09L1VzZXJTY3JpcHQ9PQoKKGZ1bmN0aW9uICgpIHsKICAndXNlIHN0cmljdCc7CgogIHdpbmRvdy5nZXRSZXBvcyA9ICgpID0+CiAgICBbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnI3VzZXItcmVwb3NpdG9yaWVzLWxpc3QgPiB1bCA+IGxpID4gZGl2LmNvbC0xMC5jb2wtbGctOS5kLWlubGluZS1ibG9jaycpXS5tYXAoZSA9PiBbCiAgICAgIGUucXVlcnlTZWxlY3RvcignYScpLmhyZWYsCiAgICAgIGUucXVlcnlTZWxlY3RvcignaDMnKS5uZXh0RWxlbWVudFNpYmxpbmc/LnF1ZXJ5U2VsZWN0b3IoJ2EnKT8uaHJlZgogICAgXSk7CiAgd2luZG93LnBhcnNlWE1MID0geG1sU3RyID0+IHsKICAgIGNvbnN0IHBhcnNlciA9IG5ldyBET01QYXJzZXIoKTsKICAgIHJldHVybiBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKHhtbFN0ciwgJ3RleHQvaHRtbCcpOwogIH07CiAgICB3aW5kb3cuZmV0Y2hVUkwgPSB1cmwgPT4gIGZldGNoKHVybCwgewogICJoZWFkZXJzIjogewogICAgImFjY2VwdCI6ICJ0ZXh0L2h0bWwsIGFwcGxpY2F0aW9uL3hodG1sK3htbCIsCiAgICAiYWNjZXB0LWxhbmd1YWdlIjogImVuLVVTLGVuO3E9MC45IiwKICAgICJjYWNoZS1jb250cm9sIjogIm5vLWNhY2hlIiwKICAgICJwcmFnbWEiOiAibm8tY2FjaGUiLAogICAgInNlYy1jaC11YSI6ICJcIkNocm9taXVtXCI7dj1cIjExOFwiLCBcIkJyYXZlXCI7dj1cIjExOFwiLCBcIk5vdD1BP0JyYW5kXCI7dj1cIjk5XCIiLAogICAgInNlYy1jaC11YS1tb2JpbGUiOiAiPzAiLAogICAgInNlYy1jaC11YS1wbGF0Zm9ybSI6ICJcIkxpbnV4XCIiLAogICAgInNlYy1mZXRjaC1kZXN0IjogImVtcHR5IiwKICAgICJzZWMtZmV0Y2gtbW9kZSI6ICJjb3JzIiwKICAgICJzZWMtZmV0Y2gtc2l0ZSI6ICJzYW1lLW9yaWdpbiIsCiAgICAic2VjLWdwYyI6ICIxIiwKICAgICJ0dXJiby1mcmFtZSI6ICJ1c2VyLXByb2ZpbGUtZnJhbWUiCiAgfSwKICAicmVmZXJyZXIiOiAiaHR0cHM6Ly9naXRodWIuY29tL3JzZW5uP3RhYj1yZXBvc2l0b3JpZXMiLAogICJyZWZlcnJlclBvbGljeSI6ICJzdHJpY3Qtb3JpZ2luLXdoZW4tY3Jvc3Mtb3JpZ2luIiwKICAiYm9keSI6IG51bGwsCiAgIm1ldGhvZCI6ICJHRVQiLAogICJtb2RlIjogImNvcnMiLAogICJjcmVkZW50aWFscyI6ICJpbmNsdWRlIgp9KS50aGVuKHIgPT4gci50ZXh0KCkpOwogICAgCiAgLy8gWW91ciBjb2RlIGhlcmUuLi4KfSkoKTsKAAAAAAAAAAAlBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9AUAAAAAAAD0BQAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"",
					null,
					"AgAAAAAAAAAAAAAAyAYAAAAAAAAAAAAAyAYAAAAAAADIBgAAAAAAACUGAAAvLyA9PVVzZXJTY3JpcHQ9PQovLyBAbmFtZSAgICAgICAgIEdpdEh1YgovLyBAbmFtZXNwYWNlICAgIGh0dHBzOi8vZ2l0aHViLmNvbS8KLy8gQHZlcnNpb24gICAgICAwLjEKLy8gQGRlc2NyaXB0aW9uICB0cnkgdG8gdGFrZSBvdmVyIHRoZSB3b3JsZCEKLy8gQGF1dGhvciAgICAgICBZb3UKLy8gQG1hdGNoICAgICAgICBodHRwczovL2dpdGh1Yi5jb20vCi8vIEBpY29uICAgICAgICAgaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9zMi9mYXZpY29ucz9zej02NCZkb21haW49Z2l0aHViLmNvbQovLyBAZ3JhbnQgICAgICAgIG5vbmUKLy8gPT0vVXNlclNjcmlwdD09CgooZnVuY3Rpb24gKCkgewogICd1c2Ugc3RyaWN0JzsKCiAgd2luZG93LmdldFJlcG9zID0gKCkgPT4KICAgIFsuLi5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcjdXNlci1yZXBvc2l0b3JpZXMtbGlzdCA+IHVsID4gbGkgPiBkaXYuY29sLTEwLmNvbC1sZy05LmQtaW5saW5lLWJsb2NrJyldLm1hcChlID0+IFsKICAgICAgZS5xdWVyeVNlbGVjdG9yKCdhJykuaHJlZiwKICAgICAgZS5xdWVyeVNlbGVjdG9yKCdoMycpLm5leHRFbGVtZW50U2libGluZz8ucXVlcnlTZWxlY3RvcignYScpPy5ocmVmCiAgICBdKTsKICB3aW5kb3cucGFyc2VYTUwgPSB4bWxTdHIgPT4gewogICAgY29uc3QgcGFyc2VyID0gbmV3IERPTVBhcnNlcigpOwogICAgcmV0dXJuIHBhcnNlci5wYXJzZUZyb21TdHJpbmcoeG1sU3RyLCAndGV4dC9odG1sJyk7CiAgfTsKICB3aW5kb3cuZmV0Y2hVUkwgPSB1cmwgPT4KICAgIGZldGNoKHVybCwgewogICAgICBoZWFkZXJzOiB7CiAgICAgICAgYWNjZXB0OiAndGV4dC9odG1sLCBhcHBsaWNhdGlvbi94aHRtbCt4bWwnLAogICAgICAgICdhY2NlcHQtbGFuZ3VhZ2UnOiAnZW4tVVMsZW47cT0wLjknLAogICAgICAgICdjYWNoZS1jb250cm9sJzogJ25vLWNhY2hlJywKICAgICAgICBwcmFnbWE6ICduby1jYWNoZScsCiAgICAgICAgJ3NlYy1jaC11YSc6ICciQ2hyb21pdW0iO3Y9IjExOCIsICJCcmF2ZSI7dj0iMTE4IiwgIk5vdD1BP0JyYW5kIjt2PSI5OSInLAogICAgICAgICdzZWMtY2gtdWEtbW9iaWxlJzogJz8wJywKICAgICAgICAnc2VjLWNoLXVhLXBsYXRmb3JtJzogJyJMaW51eCInLAogICAgICAgICdzZWMtZmV0Y2gtZGVzdCc6ICdlbXB0eScsCiAgICAgICAgJ3NlYy1mZXRjaC1tb2RlJzogJ2NvcnMnLAogICAgICAgICdzZWMtZmV0Y2gtc2l0ZSc6ICdzYW1lLW9yaWdpbicsCiAgICAgICAgJ3NlYy1ncGMnOiAnMScsCiAgICAgICAgJ3R1cmJvLWZyYW1lJzogJ3VzZXItcHJvZmlsZS1mcmFtZScKICAgICAgfSwKICAgICAgcmVmZXJyZXI6ICdodHRwczovL2dpdGh1Yi5jb20vcnNlbm4/dGFiPXJlcG9zaXRvcmllcycsCiAgICAgIHJlZmVycmVyUG9saWN5OiAnc3RyaWN0LW9yaWdpbi13aGVuLWNyb3NzLW9yaWdpbicsCiAgICAgIGJvZHk6IG51bGwsCiAgICAgIG1ldGhvZDogJ0dFVCcsCiAgICAgIG1vZGU6ICdjb3JzJywKICAgICAgY3JlZGVudGlhbHM6ICdpbmNsdWRlJwogICAgfSkudGhlbihyID0+IHIudGV4dCgpKTsKCiAgLy8gWW91ciBjb2RlIGhlcmUuLi4KfSkoKTsK",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAlBgAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADIBgAALy8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBHaXRIdWIKLy8gQG5hbWVzcGFjZSAgICBodHRwczovL2dpdGh1Yi5jb20vCi8vIEB2ZXJzaW9uICAgICAgMC4xCi8vIEBkZXNjcmlwdGlvbiAgdHJ5IHRvIHRha2Ugb3ZlciB0aGUgd29ybGQhCi8vIEBhdXRob3IgICAgICAgWW91Ci8vIEBtYXRjaCAgICAgICAgaHR0cHM6Ly9naXRodWIuY29tLwovLyBAaWNvbiAgICAgICAgIGh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vczIvZmF2aWNvbnM/c3o9NjQmZG9tYWluPWdpdGh1Yi5jb20KLy8gQGdyYW50ICAgICAgICBub25lCi8vID09L1VzZXJTY3JpcHQ9PQoKKGZ1bmN0aW9uICgpIHsKICAndXNlIHN0cmljdCc7CgogIHdpbmRvdy5nZXRSZXBvcyA9ICgpID0+CiAgICBbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnI3VzZXItcmVwb3NpdG9yaWVzLWxpc3QgPiB1bCA+IGxpID4gZGl2LmNvbC0xMC5jb2wtbGctOS5kLWlubGluZS1ibG9jaycpXS5tYXAoZSA9PiBbCiAgICAgIGUucXVlcnlTZWxlY3RvcignYScpLmhyZWYsCiAgICAgIGUucXVlcnlTZWxlY3RvcignaDMnKS5uZXh0RWxlbWVudFNpYmxpbmc/LnF1ZXJ5U2VsZWN0b3IoJ2EnKT8uaHJlZgogICAgXSk7CiAgd2luZG93LnBhcnNlWE1MID0geG1sU3RyID0+IHsKICAgIGNvbnN0IHBhcnNlciA9IG5ldyBET01QYXJzZXIoKTsKICAgIHJldHVybiBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKHhtbFN0ciwgJ3RleHQvaHRtbCcpOwogIH07CiAgd2luZG93LmZldGNoVVJMID0gdXJsID0+CiAgICBmZXRjaCh1cmwsIHsKICAgICAgaGVhZGVyczogewogICAgICAgIGFjY2VwdDogJ3RleHQvaHRtbCwgYXBwbGljYXRpb24veGh0bWwreG1sJywKICAgICAgICAnYWNjZXB0LWxhbmd1YWdlJzogJ2VuLVVTLGVuO3E9MC45JywKICAgICAgICAnY2FjaGUtY29udHJvbCc6ICduby1jYWNoZScsCiAgICAgICAgcHJhZ21hOiAnbm8tY2FjaGUnLAogICAgICAgICdzZWMtY2gtdWEnOiAnIkNocm9taXVtIjt2PSIxMTgiLCAiQnJhdmUiO3Y9IjExOCIsICJOb3Q9QT9CcmFuZCI7dj0iOTkiJywKICAgICAgICAnc2VjLWNoLXVhLW1vYmlsZSc6ICc/MCcsCiAgICAgICAgJ3NlYy1jaC11YS1wbGF0Zm9ybSc6ICciTGludXgiJywKICAgICAgICAnc2VjLWZldGNoLWRlc3QnOiAnZW1wdHknLAogICAgICAgICdzZWMtZmV0Y2gtbW9kZSc6ICdjb3JzJywKICAgICAgICAnc2VjLWZldGNoLXNpdGUnOiAnc2FtZS1vcmlnaW4nLAogICAgICAgICdzZWMtZ3BjJzogJzEnLAogICAgICAgICd0dXJiby1mcmFtZSc6ICd1c2VyLXByb2ZpbGUtZnJhbWUnCiAgICAgIH0sCiAgICAgIHJlZmVycmVyOiB3aW5kb3cubG9jYXRpb24uaHJlZiwKICAgICAgcmVmZXJyZXJQb2xpY3k6ICdzdHJpY3Qtb3JpZ2luLXdoZW4tY3Jvc3Mtb3JpZ2luJywKICAgICAgbWV0aG9kOiAnR0VUJywKICAgICAgbW9kZTogJ2NvcnMnLAogICAgICBjcmVkZW50aWFsczogJ2luY2x1ZGUnCiAgICB9KS50aGVuKHIgPT4gci50ZXh0KCkpOwoKICAgIHdpbmRvdy5nZXRQYWdlID0gKHVybCA9IHdpbmRvdy5ocmVmKSA9PiB7IGNvbnN0IHtwYWdlfT1PYmplY3QuZnJvbUVudHJpZXMoWy4uLm5ldyBVUkwodXJsKS5zZWFyY2hQYXJhbXNdKTsgcmV0dXJuIHBhZ2UgPyArcGFnZSA6IDE7IH0KCiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LCAnaHJlZicsIHsgZ2V0OiAoKSA9PiBuZXcgVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKSB9KQp9KSgpOwoAAAAAAAAAANQGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyAYAAAAAAADIBgAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"",
					null,
					"AgAAAAAAAAAAAAAAsQYAAAAAAAAAAAAAsQYAAAAAAACxBgAAAAAAANQGAAAvLyA9PVVzZXJTY3JpcHQ9PQovLyBAbmFtZSAgICAgICAgIEdpdEh1YgovLyBAbmFtZXNwYWNlICAgIGh0dHBzOi8vZ2l0aHViLmNvbS8KLy8gQHZlcnNpb24gICAgICAwLjEKLy8gQGRlc2NyaXB0aW9uICB0cnkgdG8gdGFrZSBvdmVyIHRoZSB3b3JsZCEKLy8gQGF1dGhvciAgICAgICBZb3UKLy8gQG1hdGNoICAgICAgICBodHRwczovL2dpdGh1Yi5jb20vCi8vIEBpY29uICAgICAgICAgaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9zMi9mYXZpY29ucz9zej02NCZkb21haW49Z2l0aHViLmNvbQovLyBAZ3JhbnQgICAgICAgIG5vbmUKLy8gPT0vVXNlclNjcmlwdD09CgooZnVuY3Rpb24gKCkgewogICd1c2Ugc3RyaWN0JzsKCiAgd2luZG93LmdldFJlcG9zID0gKCkgPT4KICAgIFsuLi5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcjdXNlci1yZXBvc2l0b3JpZXMtbGlzdCA+IHVsID4gbGkgPiBkaXYuY29sLTEwLmNvbC1sZy05LmQtaW5saW5lLWJsb2NrJyldLm1hcChlID0+IFsKICAgICAgZS5xdWVyeVNlbGVjdG9yKCdhJykuaHJlZiwKICAgICAgZS5xdWVyeVNlbGVjdG9yKCdoMycpLm5leHRFbGVtZW50U2libGluZz8ucXVlcnlTZWxlY3RvcignYScpPy5ocmVmCiAgICBdKTsKICB3aW5kb3cucGFyc2VYTUwgPSB4bWxTdHIgPT4gewogICAgY29uc3QgcGFyc2VyID0gbmV3IERPTVBhcnNlcigpOwogICAgcmV0dXJuIHBhcnNlci5wYXJzZUZyb21TdHJpbmcoeG1sU3RyLCAndGV4dC9odG1sJyk7CiAgfTsKICB3aW5kb3cuZmV0Y2hVUkwgPSB1cmwgPT4KICAgIGZldGNoKHVybCwgewogICAgICBoZWFkZXJzOiB7CiAgICAgICAgYWNjZXB0OiAndGV4dC9odG1sLCBhcHBsaWNhdGlvbi94aHRtbCt4bWwnLAogICAgICAgICdhY2NlcHQtbGFuZ3VhZ2UnOiAnZW4tVVMsZW47cT0wLjknLAogICAgICAgICdjYWNoZS1jb250cm9sJzogJ25vLWNhY2hlJywKICAgICAgICBwcmFnbWE6ICduby1jYWNoZScsCiAgICAgICAgJ3NlYy1jaC11YSc6ICciQ2hyb21pdW0iO3Y9IjExOCIsICJCcmF2ZSI7dj0iMTE4IiwgIk5vdD1BP0JyYW5kIjt2PSI5OSInLAogICAgICAgICdzZWMtY2gtdWEtbW9iaWxlJzogJz8wJywKICAgICAgICAnc2VjLWNoLXVhLXBsYXRmb3JtJzogJyJMaW51eCInLAogICAgICAgICdzZWMtZmV0Y2gtZGVzdCc6ICdlbXB0eScsCiAgICAgICAgJ3NlYy1mZXRjaC1tb2RlJzogJ2NvcnMnLAogICAgICAgICdzZWMtZmV0Y2gtc2l0ZSc6ICdzYW1lLW9yaWdpbicsCiAgICAgICAgJ3NlYy1ncGMnOiAnMScsCiAgICAgICAgJ3R1cmJvLWZyYW1lJzogJ3VzZXItcHJvZmlsZS1mcmFtZScKICAgICAgfSwKICAgICAgcmVmZXJyZXI6IHdpbmRvdy5sb2NhdGlvbi5ocmVmLAogICAgICByZWZlcnJlclBvbGljeTogJ3N0cmljdC1vcmlnaW4td2hlbi1jcm9zcy1vcmlnaW4nLAogICAgICBtZXRob2Q6ICdHRVQnLAogICAgICBtb2RlOiAnY29ycycsCiAgICAgIGNyZWRlbnRpYWxzOiAnaW5jbHVkZScKICAgIH0pLnRoZW4ociA9PiByLnRleHQoKSk7CgogIHdpbmRvdy5nZXRQYWdlID0gKHVybCA9IHdpbmRvdy5ocmVmKSA9PiB7CiAgICBjb25zdCB7IHBhZ2UgfSA9IE9iamVjdC5mcm9tRW50cmllcyhbLi4ubmV3IFVSTCh1cmwpLnNlYXJjaFBhcmFtc10pOwogICAgcmV0dXJuIHBhZ2UgPyArcGFnZSA6IDE7CiAgfTsKCiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ2hyZWYnLCB7IGdldDogKCkgPT4gbmV3IFVSTCh3aW5kb3cubG9jYXRpb24uaHJlZikgfSk7Cn0pKCk7Cg",
					"AQAAAAAAAAABAAAAAAAAAAAAAADUBgAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					1,
					"ensure_newline_at_eof",
					null,
					"AQAAALEGAAAAAAAAsgYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsQYAAAAAAACxBgAAAAAAAAAAAAAAAPC/"
				],
				[
					53,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACyBgAALy8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBHaXRIdWIKLy8gQG5hbWVzcGFjZSAgICBodHRwczovL2dpdGh1Yi5jb20vCi8vIEB2ZXJzaW9uICAgICAgMC4xCi8vIEBkZXNjcmlwdGlvbiAgdHJ5IHRvIHRha2Ugb3ZlciB0aGUgd29ybGQhCi8vIEBhdXRob3IgICAgICAgWW91Ci8vIEBtYXRjaCAgICAgICAgaHR0cHM6Ly9naXRodWIuY29tLwovLyBAaWNvbiAgICAgICAgIGh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vczIvZmF2aWNvbnM/c3o9NjQmZG9tYWluPWdpdGh1Yi5jb20KLy8gQGdyYW50ICAgICAgICBub25lCi8vID09L1VzZXJTY3JpcHQ9PQogCgogIHdpbmRvdy5nZXRSZXBvcyA9ICgpID0+CiAgICBbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnI3VzZXItcmVwb3NpdG9yaWVzLWxpc3QgPiB1bCA+IGxpID4gZGl2LmNvbC0xMC5jb2wtbGctOS5kLWlubGluZS1ibG9jaycpXS5tYXAoZSA9PiBbCiAgICAgIGUucXVlcnlTZWxlY3RvcignYScpLmhyZWYsCiAgICAgIGUucXVlcnlTZWxlY3RvcignaDMnKS5uZXh0RWxlbWVudFNpYmxpbmc/LnF1ZXJ5U2VsZWN0b3IoJ2EnKT8uaHJlZgogICAgXSk7CiAgd2luZG93LnBhcnNlWE1MID0geG1sU3RyID0+IHsKICAgIGNvbnN0IHBhcnNlciA9IG5ldyBET01QYXJzZXIoKTsKICAgIHJldHVybiBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKHhtbFN0ciwgJ3RleHQvaHRtbCcpOwogIH07CiAgd2luZG93LmZldGNoVVJMID0gdXJsID0+CiAgICBmZXRjaCh1cmwsIHsKICAgICAgaGVhZGVyczogewogICAgICAgIGFjY2VwdDogJ3RleHQvaHRtbCwgYXBwbGljYXRpb24veGh0bWwreG1sJywKICAgICAgICAnYWNjZXB0LWxhbmd1YWdlJzogJ2VuLVVTLGVuO3E9MC45JywKICAgICAgICAnY2FjaGUtY29udHJvbCc6ICduby1jYWNoZScsCiAgICAgICAgcHJhZ21hOiAnbm8tY2FjaGUnLAogICAgICAgICdzZWMtY2gtdWEnOiAnIkNocm9taXVtIjt2PSIxMTgiLCAiQnJhdmUiO3Y9IjExOCIsICJOb3Q9QT9CcmFuZCI7dj0iOTkiJywKICAgICAgICAnc2VjLWNoLXVhLW1vYmlsZSc6ICc/MCcsCiAgICAgICAgJ3NlYy1jaC11YS1wbGF0Zm9ybSc6ICciTGludXgiJywKICAgICAgICAnc2VjLWZldGNoLWRlc3QnOiAnZW1wdHknLAogICAgICAgICdzZWMtZmV0Y2gtbW9kZSc6ICdjb3JzJywKICAgICAgICAnc2VjLWZldGNoLXNpdGUnOiAnc2FtZS1vcmlnaW4nLAogICAgICAgICdzZWMtZ3BjJzogJzEnLAogICAgICAgICd0dXJiby1mcmFtZSc6ICd1c2VyLXByb2ZpbGUtZnJhbWUnCiAgICAgIH0sCiAgICAgIHJlZmVycmVyOiB3aW5kb3cubG9jYXRpb24uaHJlZiwKICAgICAgcmVmZXJyZXJQb2xpY3k6ICdzdHJpY3Qtb3JpZ2luLXdoZW4tY3Jvc3Mtb3JpZ2luJywKICAgICAgbWV0aG9kOiAnR0VUJywKICAgICAgbW9kZTogJ2NvcnMnLAogICAgICBjcmVkZW50aWFsczogJ2luY2x1ZGUnCiAgICB9KS50aGVuKHIgPT4gci50ZXh0KCkpOwoKICB3aW5kb3cuZ2V0UGFnZSA9ICh1cmwgPSB3aW5kb3cuaHJlZikgPT4gewogICAgY29uc3QgeyBwYWdlIH0gPSBPYmplY3QuZnJvbUVudHJpZXMoWy4uLm5ldyBVUkwodXJsKS5zZWFyY2hQYXJhbXNdKTsKICAgIHJldHVybiBwYWdlID8gK3BhZ2UgOiAxOwogIH07CgogIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3csICdocmVmJywgeyBnZXQ6ICgpID0+IG5ldyBVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpIH0pOwogCgAAAAAAAAAAZgYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsQYAAAAAAACxBgAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					1,
					"paste",
					null,
					"AQAAAEABAAAAAAAApwIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQAEAAAAAAABAAQAAAAAAAAAAAAAAAPC/"
				],
				[
					74,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAKcCAAAAAAAAqAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApwIAAAAAAACnAgAAAAAAAAAAAAAAAPC/"
				],
				[
					77,
					1,
					"insert_snippet",
					{
						"contents": "\n${TM_CURRENT_LINE/^\\s*((?:#|\\/\\/[\\/!]?)\\s*).*/$1/}"
					},
					"AQAAAD8BAAAAAAAAQwEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPwEAAAAAAAA/AQAAAAAAAAAAAAAAAPC/"
				],
				[
					90,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAEABAAAAAAAAQQEAAAAAAAAAAAAAQQEAAAAAAABBAQAAAAAAAAMAAAAvLyA",
					"AQAAAAAAAAABAAAAQwEAAAAAAABAAQAAAAAAAAAAAAAAAPC/"
				],
				[
					100,
					1,
					"paste",
					null,
					"AQAAAKgHAAAAAAAArwcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqAcAAAAAAACoBwAAAAAAAAAAAAAAAPC/"
				],
				[
					101,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAAK8HAAAAAAAAsAcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArwcAAAAAAACvBwAAAAAAAAAAAAAAAPC/"
				],
				[
					104,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAANYHAAAAAAAA1wcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1gcAAAAAAADWBwAAAAAAAAAAAAAAAPC/"
				],
				[
					105,
					1,
					"left_delete",
					null,
					"AQAAANYHAAAAAAAA1gcAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAA1wcAAAAAAADXBwAAAAAAAAAAAAAAAPC/"
				],
				[
					107,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAANMHAAAAAAAA1AcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0wcAAAAAAADTBwAAAAAAAAAAAAAAAPC/"
				],
				[
					126,
					1,
					"",
					null,
					"AgAAAAAAAAAAAAAAJwkAAAAAAAAAAAAAJwkAAAAAAAAnCQAAAAAAANkHAAAvLyA9PVVzZXJTY3JpcHQ9PQovLyBAbmFtZSAgICAgICAgIEdpdEh1YgovLyBAbmFtZXNwYWNlICAgIGh0dHBzOi8vZ2l0aHViLmNvbS8KLy8gQHZlcnNpb24gICAgICAwLjEKLy8gQGRlc2NyaXB0aW9uICB0cnkgdG8gdGFrZSBvdmVyIHRoZSB3b3JsZCEKLy8gQGF1dGhvciAgICAgICBZb3UKLy8gQG1hdGNoICAgICAgICBodHRwczovL2dpdGh1Yi5jb20vCi8vIEBpY29uICAgICAgICAgaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9zMi9mYXZpY29ucz9zej02NCZkb21haW49Z2l0aHViLmNvbQovLyBAZ3JhbnQgICAgICAgIG5vbmUKLy8gPT0vVXNlclNjcmlwdD09CiAKZnVuY3Rpb24gbWVtb2l6ZShmbiwgY2FjaGUgPSBuZXcgTWFwKCkpIHsKICBsZXQgW2dldCwgc2V0XSA9IGdldHNldChjYWNoZSk7CiAgcmV0dXJuIGRlZmluZSgKICAgIGZ1bmN0aW9uIE1lbW9pemUobiwgLi4ucmVzdCkgewogICAgICBsZXQgcjsKICAgICAgZ2V0ID8/PSBnZXR0ZXIodGhpcyk7CiAgICAgIGlmKChyID0gZ2V0LmNhbGwodGhpcywgbikpKSByZXR1cm4gcjsKICAgICAgciA9IGZuLmNhbGwodGhpcywgbiwgLi4ucmVzdCk7CiAgICAgIHNldCA/Pz0gc2V0dGVyKHRoaXMpOwogICAgICBzZXQuY2FsbCh0aGlzLCBuLCByKTsKICAgICAgcmV0dXJuIHI7CiAgICB9LAogICAgeyBjYWNoZSwgZ2V0LCBzZXQgfQogICk7Cn0KCndpbmRvdy5nZXRSZXBvcyA9ICgpID0+CiAgWy4uLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJyN1c2VyLXJlcG9zaXRvcmllcy1saXN0ID4gdWwgPiBsaSA+IGRpdi5jb2wtMTAuY29sLWxnLTkuZC1pbmxpbmUtYmxvY2snKV0ubWFwKGUgPT4gWwogICAgZS5xdWVyeVNlbGVjdG9yKCdhJykuaHJlZiwKICAgIGUucXVlcnlTZWxlY3RvcignaDMnKS5uZXh0RWxlbWVudFNpYmxpbmc/LnF1ZXJ5U2VsZWN0b3IoJ2EnKT8uaHJlZgogIF0pOwp3aW5kb3cucGFyc2VYTUwgPSB4bWxTdHIgPT4gewogIGNvbnN0IHBhcnNlciA9IG5ldyBET01QYXJzZXIoKTsKICByZXR1cm4gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyh4bWxTdHIsICd0ZXh0L2h0bWwnKTsKfTsKd2luZG93LmZldGNoVVJMID0gdXJsID0+CiAgZmV0Y2godXJsLCB7CiAgICBoZWFkZXJzOiB7CiAgICAgIGFjY2VwdDogJ3RleHQvaHRtbCwgYXBwbGljYXRpb24veGh0bWwreG1sJywKICAgICAgJ2FjY2VwdC1sYW5ndWFnZSc6ICdlbi1VUyxlbjtxPTAuOScsCiAgICAgICdjYWNoZS1jb250cm9sJzogJ25vLWNhY2hlJywKICAgICAgcHJhZ21hOiAnbm8tY2FjaGUnLAogICAgICAnc2VjLWNoLXVhJzogJyJDaHJvbWl1bSI7dj0iMTE4IiwgIkJyYXZlIjt2PSIxMTgiLCAiTm90PUE/QnJhbmQiO3Y9Ijk5IicsCiAgICAgICdzZWMtY2gtdWEtbW9iaWxlJzogJz8wJywKICAgICAgJ3NlYy1jaC11YS1wbGF0Zm9ybSc6ICciTGludXgiJywKICAgICAgJ3NlYy1mZXRjaC1kZXN0JzogJ2VtcHR5JywKICAgICAgJ3NlYy1mZXRjaC1tb2RlJzogJ2NvcnMnLAogICAgICAnc2VjLWZldGNoLXNpdGUnOiAnc2FtZS1vcmlnaW4nLAogICAgICAnc2VjLWdwYyc6ICcxJywKICAgICAgJ3R1cmJvLWZyYW1lJzogJ3VzZXItcHJvZmlsZS1mcmFtZScKICAgIH0sCiAgICByZWZlcnJlcjogd2luZG93LmxvY2F0aW9uLmhyZWYsCiAgICByZWZlcnJlclBvbGljeTogJ3N0cmljdC1vcmlnaW4td2hlbi1jcm9zcy1vcmlnaW4nLAogICAgbWV0aG9kOiAnR0VUJywKICAgIG1vZGU6ICdjb3JzJywKICAgIGNyZWRlbnRpYWxzOiAnaW5jbHVkZScKICB9KS50aGVuKHIgPT4gci50ZXh0KCkpOwoKd2luZG93LmdldFBhZ2UgPSAodXJsID0gd2luZG93LmhyZWYpID0+IHsKICBjb25zdCB7IHBhZ2UgfSA9IE9iamVjdC5mcm9tRW50cmllcyhbLi4ubmV3IFVSTCh1cmwpLnNlYXJjaFBhcmFtc10pOwogIHJldHVybiBwYWdlID8gK3BhZ2UgOiAxOwp9OwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ2hyZWYnLCB7IGdldDogbWVtb2l6ZSgoKSA9PiBuZXcgVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKSkgfSk7Cg",
					"AQAAAAAAAAABAAAAAAAAAAAAAADZBwAAAAAAAAAAAAAAAPC/"
				],
				[
					129,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAnCQAALy8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBHaXRIdWIKLy8gQG5hbWVzcGFjZSAgICBodHRwczovL2dpdGh1Yi5jb20vCi8vIEB2ZXJzaW9uICAgICAgMC4xCi8vIEBkZXNjcmlwdGlvbiAgdHJ5IHRvIHRha2Ugb3ZlciB0aGUgd29ybGQhCi8vIEBhdXRob3IgICAgICAgWW91Ci8vIEBtYXRjaCAgICAgICAgaHR0cHM6Ly9naXRodWIuY29tLwovLyBAaWNvbiAgICAgICAgIGh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vczIvZmF2aWNvbnM/c3o9NjQmZG9tYWluPWdpdGh1Yi5jb20KLy8gQGdyYW50ICAgICAgICBub25lCi8vID09L1VzZXJTY3JpcHQ9PQoKICBmdW5jdGlvbiBkZWZpbmUob2JqLCAuLi5hcmdzKSB7CiAgZm9yKGxldCBwcm9wcyBvZiBhcmdzKSB7CiAgICBjb25zdCBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMocHJvcHMpOwoKICAgIGZvcihsZXQgcHJvcCBpbiBkZXNjKSB7CiAgICAgIGNvbnN0IHsgZW51bWVyYWJsZSwgLi4uZCB9ID0gZGVzY1twcm9wXTsKCiAgICAgIHRyeSB7CiAgICAgICAgZGVsZXRlIG9ialtwcm9wXTsKICAgICAgfSBjYXRjaChlKSB7fQoKICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgcHJvcCwgeyAuLi5kLCBlbnVtZXJhYmxlOiBmYWxzZSB9KTsKICAgIH0KICB9CiAgLy8gb2JqID0gZXh0ZW5kKG9iaiwgcHJvcHMsIGRlc2MgPT4gKGRlbGV0ZSBkZXNjLmNvbmZpZ3VyYWJsZSwgZGVsZXRlIGRlc2MuZW51bWVyYWJsZSkpOwoKICByZXR1cm4gb2JqOwp9CmZ1bmN0aW9uIG1lbW9pemUoZm4sIGNhY2hlID0gbmV3IE1hcCgpKSB7CiAgIHJldHVybiBkZWZpbmUoCiAgICBmdW5jdGlvbiBNZW1vaXplKG4sIC4uLnJlc3QpIHsKICAgICAgICBsZXQgcjsKICAgICAgaWYoKHIgPSBjYWNoZS5nZXQobikpKSByZXR1cm4gcjsKICAgICAgciA9IGZuLmNhbGwodGhpcywgbiwgLi4ucmVzdCk7CiAgICAgIGNhY2hlLnNldChuLCByKTsKICAgICAgcmV0dXJuIHI7CiAgICB9LAogICAgeyBjYWNoZSB9CiAgKTsKfQoKd2luZG93LmdldFJlcG9zID0gKCkgPT4KICBbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnI3VzZXItcmVwb3NpdG9yaWVzLWxpc3QgPiB1bCA+IGxpID4gZGl2LmNvbC0xMC5jb2wtbGctOS5kLWlubGluZS1ibG9jaycpXS5tYXAoZSA9PiBbCiAgICBlLnF1ZXJ5U2VsZWN0b3IoJ2EnKS5ocmVmLAogICAgZS5xdWVyeVNlbGVjdG9yKCdoMycpLm5leHRFbGVtZW50U2libGluZz8ucXVlcnlTZWxlY3RvcignYScpPy5ocmVmCiAgXSk7CndpbmRvdy5wYXJzZVhNTCA9IHhtbFN0ciA9PiB7CiAgY29uc3QgcGFyc2VyID0gbmV3IERPTVBhcnNlcigpOwogIHJldHVybiBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKHhtbFN0ciwgJ3RleHQvaHRtbCcpOwp9Owp3aW5kb3cuZmV0Y2hVUkwgPSB1cmwgPT4KICBmZXRjaCh1cmwsIHsKICAgIGhlYWRlcnM6IHsKICAgICAgYWNjZXB0OiAndGV4dC9odG1sLCBhcHBsaWNhdGlvbi94aHRtbCt4bWwnLAogICAgICAnYWNjZXB0LWxhbmd1YWdlJzogJ2VuLVVTLGVuO3E9MC45JywKICAgICAgJ2NhY2hlLWNvbnRyb2wnOiAnbm8tY2FjaGUnLAogICAgICBwcmFnbWE6ICduby1jYWNoZScsCiAgICAgICdzZWMtY2gtdWEnOiAnIkNocm9taXVtIjt2PSIxMTgiLCAiQnJhdmUiO3Y9IjExOCIsICJOb3Q9QT9CcmFuZCI7dj0iOTkiJywKICAgICAgJ3NlYy1jaC11YS1tb2JpbGUnOiAnPzAnLAogICAgICAnc2VjLWNoLXVhLXBsYXRmb3JtJzogJyJMaW51eCInLAogICAgICAnc2VjLWZldGNoLWRlc3QnOiAnZW1wdHknLAogICAgICAnc2VjLWZldGNoLW1vZGUnOiAnY29ycycsCiAgICAgICdzZWMtZmV0Y2gtc2l0ZSc6ICdzYW1lLW9yaWdpbicsCiAgICAgICdzZWMtZ3BjJzogJzEnLAogICAgICAndHVyYm8tZnJhbWUnOiAndXNlci1wcm9maWxlLWZyYW1lJwogICAgfSwKICAgIHJlZmVycmVyOiB3aW5kb3cubG9jYXRpb24uaHJlZiwKICAgIHJlZmVycmVyUG9saWN5OiAnc3RyaWN0LW9yaWdpbi13aGVuLWNyb3NzLW9yaWdpbicsCiAgICBtZXRob2Q6ICdHRVQnLAogICAgbW9kZTogJ2NvcnMnLAogICAgY3JlZGVudGlhbHM6ICdpbmNsdWRlJwogIH0pLnRoZW4ociA9PiByLnRleHQoKSk7Cgp3aW5kb3cuZ2V0UGFnZSA9ICh1cmwgPSB3aW5kb3cuaHJlZikgPT4gewogIGNvbnN0IHsgcGFnZSB9ID0gT2JqZWN0LmZyb21FbnRyaWVzKFsuLi5uZXcgVVJMKHVybCkuc2VhcmNoUGFyYW1zXSk7CiAgcmV0dXJuIHBhZ2UgPyArcGFnZSA6IDE7Cn07CgpPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LCAnaHJlZicsIHsgZ2V0OiBtZW1vaXplKCgpID0+IG5ldyBVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpKSB9KTsKAAAAAAAAAAAiCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJwkAAAAAAAAnCQAAAAAAAAAAAAAAAPC/"
				],
				[
					141,
					1,
					"insert",
					{
						"characters": "{"
					},
					"AQAAAP8IAAAAAAAAAAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/wgAAAAAAAD/CAAAAAAAAAAAAAAAAPC/"
				],
				[
					142,
					1,
					"insert",
					{
						"characters": "\nconst"
					},
					"BwAAAAAJAAAAAAAAAQkAAAAAAAAAAAAAAQkAAAAAAAAFCQAAAAAAAAAAAAAFCQAAAAAAAAYJAAAAAAAAAAAAAAYJAAAAAAAABwkAAAAAAAAAAAAABwkAAAAAAAAICQAAAAAAAAAAAAAICQAAAAAAAAkJAAAAAAAAAAAAAAkJAAAAAAAACgkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAkAAAAAAAAACQAAAAAAAAAAAAAAAPC/"
				],
				[
					143,
					1,
					"insert",
					{
						"characters": " url="
					},
					"BQAAAAoJAAAAAAAACwkAAAAAAAAAAAAACwkAAAAAAAAMCQAAAAAAAAAAAAAMCQAAAAAAAA0JAAAAAAAAAAAAAA0JAAAAAAAADgkAAAAAAAAAAAAADgkAAAAAAAAPCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACgkAAAAAAAAKCQAAAAAAAAAAAAAAAPC/"
				],
				[
					146,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAC0JAAAAAAAALgkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALQkAAAAAAAAtCQAAAAAAAAAAAAAAAPC/"
				],
				[
					147,
					1,
					"left_delete",
					null,
					"AQAAAC0JAAAAAAAALQkAAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAALgkAAAAAAAAuCQAAAAAAAAAAAAAAAPC/"
				],
				[
					149,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAACwJAAAAAAAALQkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALAkAAAAAAAAsCQAAAAAAAAAAAAAAAPC/"
				],
				[
					150,
					1,
					"insert",
					{
						"characters": "\n\nret"
					},
					"CAAAAC0JAAAAAAAALgkAAAAAAAAAAAAALgkAAAAAAAAyCQAAAAAAAAAAAAAyCQAAAAAAADMJAAAAAAAAAAAAADMJAAAAAAAANwkAAAAAAAAAAAAALgkAAAAAAAAuCQAAAAAAAAQAAAAgICAgMwkAAAAAAAA0CQAAAAAAAAAAAAA0CQAAAAAAADUJAAAAAAAAAAAAADUJAAAAAAAANgkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALQkAAAAAAAAtCQAAAAAAAAAAAAAAAPC/"
				],
				[
					151,
					1,
					"insert",
					{
						"characters": "urn"
					},
					"AwAAADYJAAAAAAAANwkAAAAAAAAAAAAANwkAAAAAAAA4CQAAAAAAAAAAAAA4CQAAAAAAADkJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANgkAAAAAAAA2CQAAAAAAAAAAAAAAAPC/"
				],
				[
					152,
					1,
					"insert",
					{
						"characters": " url;}"
					},
					"BgAAADkJAAAAAAAAOgkAAAAAAAAAAAAAOgkAAAAAAAA7CQAAAAAAAAAAAAA7CQAAAAAAADwJAAAAAAAAAAAAADwJAAAAAAAAPQkAAAAAAAAAAAAAPQkAAAAAAAA+CQAAAAAAAAAAAAA+CQAAAAAAAD8JAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOQkAAAAAAAA5CQAAAAAAAAAAAAAAAPC/"
				],
				[
					153,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAD8JAAAAAAAAQAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPwkAAAAAAAA/CQAAAAAAAAAAAAAAAPC/"
				],
				[
					165,
					1,
					"insert",
					{
						"characters": "url.que"
					},
					"BwAAAC4JAAAAAAAALwkAAAAAAAAAAAAALwkAAAAAAAAwCQAAAAAAAAAAAAAwCQAAAAAAADEJAAAAAAAAAAAAADEJAAAAAAAAMgkAAAAAAAAAAAAAMgkAAAAAAAAzCQAAAAAAAAAAAAAzCQAAAAAAADQJAAAAAAAAAAAAADQJAAAAAAAANQkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALgkAAAAAAAAuCQAAAAAAAAAAAAAAAPC/"
				],
				[
					166,
					1,
					"insert",
					{
						"characters": "ry"
					},
					"AgAAADUJAAAAAAAANgkAAAAAAAAAAAAANgkAAAAAAAA3CQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANQkAAAAAAAA1CQAAAAAAAAAAAAAAAPC/"
				],
				[
					167,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAADcJAAAAAAAAOAkAAAAAAAAAAAAAOAkAAAAAAAA5CQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANwkAAAAAAAA3CQAAAAAAAAAAAAAAAPC/"
				],
				[
					168,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADkJAAAAAAAAOgkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOQkAAAAAAAA5CQAAAAAAAAAAAAAAAPC/"
				],
				[
					169,
					3,
					"left_delete",
					null,
					"AwAAADkJAAAAAAAAOQkAAAAAAAABAAAAIDgJAAAAAAAAOAkAAAAAAAABAAAAPTcJAAAAAAAANwkAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAOgkAAAAAAAA6CQAAAAAAAAAAAAAAAPC/"
				],
				[
					171,
					1,
					"insert",
					{
						"characters": "Object.defineProperty"
					},
					"FgAAAC4JAAAAAAAALwkAAAAAAAAAAAAALwkAAAAAAAAvCQAAAAAAAAkAAAB1cmwucXVlcnkvCQAAAAAAADAJAAAAAAAAAAAAADAJAAAAAAAAMQkAAAAAAAAAAAAAMQkAAAAAAAAyCQAAAAAAAAAAAAAyCQAAAAAAADMJAAAAAAAAAAAAADMJAAAAAAAANAkAAAAAAAAAAAAANAkAAAAAAAA1CQAAAAAAAAAAAAA1CQAAAAAAADYJAAAAAAAAAAAAADYJAAAAAAAANwkAAAAAAAAAAAAANwkAAAAAAAA4CQAAAAAAAAAAAAA4CQAAAAAAADkJAAAAAAAAAAAAADkJAAAAAAAAOgkAAAAAAAAAAAAAOgkAAAAAAAA7CQAAAAAAAAAAAAA7CQAAAAAAADwJAAAAAAAAAAAAADwJAAAAAAAAPQkAAAAAAAAAAAAAPQkAAAAAAAA+CQAAAAAAAAAAAAA+CQAAAAAAAD8JAAAAAAAAAAAAAD8JAAAAAAAAQAkAAAAAAAAAAAAAQAkAAAAAAABBCQAAAAAAAAAAAABBCQAAAAAAAEIJAAAAAAAAAAAAAEIJAAAAAAAAQwkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANwkAAAAAAAAuCQAAAAAAAAAAAAAAAAAA"
				],
				[
					172,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAEMJAAAAAAAARQkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQwkAAAAAAABDCQAAAAAAAAAAAAAAAPC/"
				],
				[
					173,
					1,
					"insert",
					{
						"characters": "url,."
					},
					"BQAAAEQJAAAAAAAARQkAAAAAAAAAAAAARQkAAAAAAABGCQAAAAAAAAAAAABGCQAAAAAAAEcJAAAAAAAAAAAAAEcJAAAAAAAASAkAAAAAAAAAAAAASAkAAAAAAABJCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARAkAAAAAAABECQAAAAAAAAAAAAAAAPC/"
				],
				[
					174,
					1,
					"left_delete",
					null,
					"AQAAAEgJAAAAAAAASAkAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAASQkAAAAAAABJCQAAAAAAAAAAAAAAAPC/"
				],
				[
					175,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAEgJAAAAAAAASgkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASAkAAAAAAABICQAAAAAAAAAAAAAAAPC/"
				],
				[
					176,
					1,
					"insert",
					{
						"characters": "query"
					},
					"BQAAAEkJAAAAAAAASgkAAAAAAAAAAAAASgkAAAAAAABLCQAAAAAAAAAAAABLCQAAAAAAAEwJAAAAAAAAAAAAAEwJAAAAAAAATQkAAAAAAAAAAAAATQkAAAAAAABOCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASQkAAAAAAABJCQAAAAAAAAAAAAAAAPC/"
				],
				[
					178,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAE8JAAAAAAAAUAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATwkAAAAAAABPCQAAAAAAAAAAAAAAAPC/"
				],
				[
					179,
					1,
					"left_delete",
					null,
					"AQAAAE8JAAAAAAAATwkAAAAAAAABAAAAMA",
					"AQAAAAAAAAABAAAAUAkAAAAAAABQCQAAAAAAAAAAAAAAAPC/"
				],
				[
					180,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAE8JAAAAAAAAUAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATwkAAAAAAABPCQAAAAAAAAAAAAAAAPC/"
				],
				[
					181,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFAJAAAAAAAAUQkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUAkAAAAAAABQCQAAAAAAAAAAAAAAAPC/"
				],
				[
					182,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAFEJAAAAAAAAUwkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUQkAAAAAAABRCQAAAAAAAAAAAAAAAPC/"
				],
				[
					183,
					1,
					"insert",
					{
						"characters": " get:"
					},
					"BQAAAFIJAAAAAAAAUwkAAAAAAAAAAAAAUwkAAAAAAABUCQAAAAAAAAAAAABUCQAAAAAAAFUJAAAAAAAAAAAAAFUJAAAAAAAAVgkAAAAAAAAAAAAAVgkAAAAAAABXCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUgkAAAAAAABSCQAAAAAAAAAAAAAAAPC/"
				],
				[
					184,
					1,
					"insert",
					{
						"characters": "  "
					},
					"AgAAAFcJAAAAAAAAWAkAAAAAAAAAAAAAWAkAAAAAAABZCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVwkAAAAAAABXCQAAAAAAAAAAAAAAAPC/"
				],
				[
					186,
					1,
					"insert",
					{
						"characters": " e"
					},
					"AgAAAFcJAAAAAAAAWAkAAAAAAAAAAAAAWAkAAAAAAABZCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVwkAAAAAAABXCQAAAAAAAAAAAAAAAPC/"
				],
				[
					187,
					1,
					"left_delete",
					null,
					"AQAAAFgJAAAAAAAAWAkAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAWQkAAAAAAABZCQAAAAAAAAAAAAAAAPC/"
				],
				[
					188,
					1,
					"insert",
					{
						"characters": "memoize"
					},
					"BwAAAFgJAAAAAAAAWQkAAAAAAAAAAAAAWQkAAAAAAABaCQAAAAAAAAAAAABaCQAAAAAAAFsJAAAAAAAAAAAAAFsJAAAAAAAAXAkAAAAAAAAAAAAAXAkAAAAAAABdCQAAAAAAAAAAAABdCQAAAAAAAF4JAAAAAAAAAAAAAF4JAAAAAAAAXwkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWAkAAAAAAABYCQAAAAAAAAAAAAAAAPC/"
				],
				[
					189,
					2,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AgAAAF8JAAAAAAAAYQkAAAAAAAAAAAAAYAkAAAAAAABiCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXwkAAAAAAABfCQAAAAAAAAAAAAAAAPC/"
				],
				[
					191,
					1,
					"insert",
					{
						"characters": " =>"
					},
					"AwAAAGIJAAAAAAAAYwkAAAAAAAAAAAAAYwkAAAAAAABkCQAAAAAAAAAAAABkCQAAAAAAAGUJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYgkAAAAAAABiCQAAAAAAAAAAAAAAAPC/"
				],
				[
					192,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGUJAAAAAAAAZgkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZQkAAAAAAABlCQAAAAAAAAAAAAAAAPC/"
				],
				[
					193,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAGYJAAAAAAAAaAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZgkAAAAAAABmCQAAAAAAAAAAAAAAAPC/"
				],
				[
					196,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAAGcJAAAAAAAAaAkAAAAAAAAAAAAAaAkAAAAAAABpCQAAAAAAAAAAAABoCQAAAAAAAGwJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZwkAAAAAAABnCQAAAAAAAAAAAAAAAPC/"
				],
				[
					203,
					1,
					"insert",
					{
						"characters": "function"
					},
					"CQAAAGAJAAAAAAAAYQkAAAAAAAAAAAAAaQkAAAAAAABpCQAAAAAAAAQAAAAgICAgYQkAAAAAAABiCQAAAAAAAAAAAABiCQAAAAAAAGMJAAAAAAAAAAAAAGMJAAAAAAAAZAkAAAAAAAAAAAAAZAkAAAAAAABlCQAAAAAAAAAAAABlCQAAAAAAAGYJAAAAAAAAAAAAAGYJAAAAAAAAZwkAAAAAAAAAAAAAZwkAAAAAAABoCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYAkAAAAAAABgCQAAAAAAAAAAAAAAAPC/"
				],
				[
					204,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGgJAAAAAAAAaQkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaAkAAAAAAABoCQAAAAAAAAAAAAAAAPC/"
				],
				[
					206,
					2,
					"right_delete",
					null,
					"AgAAAGwJAAAAAAAAbAkAAAAAAAABAAAAPWwJAAAAAAAAbAkAAAAAAAABAAAAPg",
					"AQAAAAAAAAABAAAAbAkAAAAAAABsCQAAAAAAAAAAAAAAAPC/"
				],
				[
					208,
					1,
					"insert",
					{
						"characters": "\nreturn"
					},
					"BwAAAG8JAAAAAAAAcAkAAAAAAAAAAAAAcAkAAAAAAABxCQAAAAAAAAAAAABxCQAAAAAAAHIJAAAAAAAAAAAAAHIJAAAAAAAAcwkAAAAAAAAAAAAAcwkAAAAAAAB0CQAAAAAAAAAAAAB0CQAAAAAAAHUJAAAAAAAAAAAAAHUJAAAAAAAAdgkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbwkAAAAAAABvCQAAAAAAAAAAAAAAYINA"
				],
				[
					209,
					1,
					"insert",
					{
						"characters": " this.search"
					},
					"DAAAAHYJAAAAAAAAdwkAAAAAAAAAAAAAdwkAAAAAAAB4CQAAAAAAAAAAAAB4CQAAAAAAAHkJAAAAAAAAAAAAAHkJAAAAAAAAegkAAAAAAAAAAAAAegkAAAAAAAB7CQAAAAAAAAAAAAB7CQAAAAAAAHwJAAAAAAAAAAAAAHwJAAAAAAAAfQkAAAAAAAAAAAAAfQkAAAAAAAB+CQAAAAAAAAAAAAB+CQAAAAAAAH8JAAAAAAAAAAAAAH8JAAAAAAAAgAkAAAAAAAAAAAAAgAkAAAAAAACBCQAAAAAAAAAAAACBCQAAAAAAAIIJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdgkAAAAAAAB2CQAAAAAAAAAAAAAAAPC/"
				],
				[
					210,
					1,
					"insert",
					{
						"characters": "Params"
					},
					"BgAAAIIJAAAAAAAAgwkAAAAAAAAAAAAAgwkAAAAAAACECQAAAAAAAAAAAACECQAAAAAAAIUJAAAAAAAAAAAAAIUJAAAAAAAAhgkAAAAAAAAAAAAAhgkAAAAAAACHCQAAAAAAAAAAAACHCQAAAAAAAIgJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAggkAAAAAAACCCQAAAAAAAAAAAAAAAPC/"
				],
				[
					212,
					1,
					"insert",
					{
						"characters": "[..."
					},
					"BAAAAHcJAAAAAAAAeAkAAAAAAAAAAAAAeAkAAAAAAAB5CQAAAAAAAAAAAAB5CQAAAAAAAHoJAAAAAAAAAAAAAHoJAAAAAAAAewkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdwkAAAAAAAB3CQAAAAAAAAAAAAAAAPC/"
				],
				[
					214,
					1,
					"insert",
					{
						"characters": "];"
					},
					"AgAAAIwJAAAAAAAAjQkAAAAAAAAAAAAAjQkAAAAAAACOCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjAkAAAAAAACMCQAAAAAAAP///////+9/"
				],
				[
					217,
					1,
					"insert",
					{
						"characters": "Object.frome"
					},
					"DAAAAHcJAAAAAAAAeAkAAAAAAAAAAAAAeAkAAAAAAAB5CQAAAAAAAAAAAAB5CQAAAAAAAHoJAAAAAAAAAAAAAHoJAAAAAAAAewkAAAAAAAAAAAAAewkAAAAAAAB8CQAAAAAAAAAAAAB8CQAAAAAAAH0JAAAAAAAAAAAAAH0JAAAAAAAAfgkAAAAAAAAAAAAAfgkAAAAAAAB/CQAAAAAAAAAAAAB/CQAAAAAAAIAJAAAAAAAAAAAAAIAJAAAAAAAAgQkAAAAAAAAAAAAAgQkAAAAAAACCCQAAAAAAAAAAAACCCQAAAAAAAIMJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdwkAAAAAAAB3CQAAAAAAAAAAAAAAAPC/"
				],
				[
					218,
					1,
					"left_delete",
					null,
					"AQAAAIIJAAAAAAAAggkAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAgwkAAAAAAACDCQAAAAAAAAAAAAAAAPC/"
				],
				[
					219,
					1,
					"insert",
					{
						"characters": "E"
					},
					"AQAAAIIJAAAAAAAAgwkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAggkAAAAAAACCCQAAAAAAAAAAAAAAAPC/"
				],
				[
					220,
					1,
					"insert_completion",
					{
						"completion": "fromEntries",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "fromEntries"
					},
					"AgAAAH4JAAAAAAAAfgkAAAAAAAAFAAAAZnJvbUV+CQAAAAAAAIkJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgwkAAAAAAACDCQAAAAAAAAAAAAAAAPC/"
				],
				[
					221,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAAIkJAAAAAAAAigkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiQkAAAAAAACJCQAAAAAAAAAAAAAAAPC/"
				],
				[
					223,
					1,
					"left_delete",
					null,
					"AQAAAKAJAAAAAAAAoAkAAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAAoQkAAAAAAAChCQAAAAAAAP///////+9/"
				],
				[
					224,
					1,
					"insert",
					{
						"characters": ");"
					},
					"AgAAAKAJAAAAAAAAoQkAAAAAAAAAAAAAoQkAAAAAAACiCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoAkAAAAAAACgCQAAAAAAAAAAAAAAAPC/"
				],
				[
					226,
					1,
					"left_delete",
					null,
					"AQAAAG4JAAAAAAAAbgkAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAbwkAAAAAAABvCQAAAAAAAAAAAAAAQH9A"
				],
				[
					231,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADACQAALy8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBHaXRIdWIKLy8gQG5hbWVzcGFjZSAgICBodHRwczovL2dpdGh1Yi5jb20vCi8vIEB2ZXJzaW9uICAgICAgMC4xCi8vIEBkZXNjcmlwdGlvbiAgdHJ5IHRvIHRha2Ugb3ZlciB0aGUgd29ybGQhCi8vIEBhdXRob3IgICAgICAgWW91Ci8vIEBtYXRjaCAgICAgICAgaHR0cHM6Ly9naXRodWIuY29tLwovLyBAaWNvbiAgICAgICAgIGh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vczIvZmF2aWNvbnM/c3o9NjQmZG9tYWluPWdpdGh1Yi5jb20KLy8gQGdyYW50ICAgICAgICBub25lCi8vID09L1VzZXJTY3JpcHQ9PQoKZnVuY3Rpb24gZGVmaW5lKG9iaiwgLi4uYXJncykgewogIGZvcihsZXQgcHJvcHMgb2YgYXJncykgewogICAgY29uc3QgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHByb3BzKTsKCiAgICBmb3IobGV0IHByb3AgaW4gZGVzYykgewogICAgICBjb25zdCB7IGVudW1lcmFibGUsIC4uLmQgfSA9IGRlc2NbcHJvcF07CgogICAgICB0cnkgewogICAgICAgIGRlbGV0ZSBvYmpbcHJvcF07CiAgICAgIH0gY2F0Y2goZSkge30KCiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIHByb3AsIHsgLi4uZCwgZW51bWVyYWJsZTogZmFsc2UgfSk7CiAgICB9CiAgfQogIC8vIG9iaiA9IGV4dGVuZChvYmosIHByb3BzLCBkZXNjID0+IChkZWxldGUgZGVzYy5jb25maWd1cmFibGUsIGRlbGV0ZSBkZXNjLmVudW1lcmFibGUpKTsKCiAgcmV0dXJuIG9iajsKfQpmdW5jdGlvbiBtZW1vaXplKGZuLCBjYWNoZSA9IG5ldyBNYXAoKSkgewogIHJldHVybiBkZWZpbmUoCiAgICBmdW5jdGlvbiBNZW1vaXplKG4sIC4uLnJlc3QpIHsKICAgICAgbGV0IHI7CiAgICAgIGlmKChyID0gY2FjaGUuZ2V0KG4pKSkgcmV0dXJuIHI7CiAgICAgIHIgPSBmbi5jYWxsKHRoaXMsIG4sIC4uLnJlc3QpOwogICAgICBjYWNoZS5zZXQobiwgcik7CiAgICAgIHJldHVybiByOwogICAgfSwKICAgIHsgY2FjaGUgfQogICk7Cn0KCndpbmRvdy5nZXRSZXBvcyA9ICgpID0+CiAgWy4uLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJyN1c2VyLXJlcG9zaXRvcmllcy1saXN0ID4gdWwgPiBsaSA+IGRpdi5jb2wtMTAuY29sLWxnLTkuZC1pbmxpbmUtYmxvY2snKV0ubWFwKGUgPT4gWwogICAgZS5xdWVyeVNlbGVjdG9yKCdhJykuaHJlZiwKICAgIGUucXVlcnlTZWxlY3RvcignaDMnKS5uZXh0RWxlbWVudFNpYmxpbmc/LnF1ZXJ5U2VsZWN0b3IoJ2EnKT8uaHJlZgogIF0pOwp3aW5kb3cucGFyc2VYTUwgPSB4bWxTdHIgPT4gewogIGNvbnN0IHBhcnNlciA9IG5ldyBET01QYXJzZXIoKTsKICByZXR1cm4gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyh4bWxTdHIsICd0ZXh0L2h0bWwnKTsKfTsKd2luZG93LmZldGNoVVJMID0gdXJsID0+CiAgZmV0Y2godXJsLCB7CiAgICBoZWFkZXJzOiB7CiAgICAgIGFjY2VwdDogJ3RleHQvaHRtbCwgYXBwbGljYXRpb24veGh0bWwreG1sJywKICAgICAgJ2FjY2VwdC1sYW5ndWFnZSc6ICdlbi1VUyxlbjtxPTAuOScsCiAgICAgICdjYWNoZS1jb250cm9sJzogJ25vLWNhY2hlJywKICAgICAgcHJhZ21hOiAnbm8tY2FjaGUnLAogICAgICAnc2VjLWNoLXVhJzogJyJDaHJvbWl1bSI7dj0iMTE4IiwgIkJyYXZlIjt2PSIxMTgiLCAiTm90PUE/QnJhbmQiO3Y9Ijk5IicsCiAgICAgICdzZWMtY2gtdWEtbW9iaWxlJzogJz8wJywKICAgICAgJ3NlYy1jaC11YS1wbGF0Zm9ybSc6ICciTGludXgiJywKICAgICAgJ3NlYy1mZXRjaC1kZXN0JzogJ2VtcHR5JywKICAgICAgJ3NlYy1mZXRjaC1tb2RlJzogJ2NvcnMnLAogICAgICAnc2VjLWZldGNoLXNpdGUnOiAnc2FtZS1vcmlnaW4nLAogICAgICAnc2VjLWdwYyc6ICcxJywKICAgICAgJ3R1cmJvLWZyYW1lJzogJ3VzZXItcHJvZmlsZS1mcmFtZScKICAgIH0sCiAgICByZWZlcnJlcjogd2luZG93LmxvY2F0aW9uLmhyZWYsCiAgICByZWZlcnJlclBvbGljeTogJ3N0cmljdC1vcmlnaW4td2hlbi1jcm9zcy1vcmlnaW4nLAogICAgbWV0aG9kOiAnR0VUJywKICAgIG1vZGU6ICdjb3JzJywKICAgIGNyZWRlbnRpYWxzOiAnaW5jbHVkZScKICB9KS50aGVuKHIgPT4gci50ZXh0KCkpOwoKd2luZG93LmdldFBhZ2UgPSAodXJsID0gd2luZG93LmhyZWYpID0+IHsKICBjb25zdCB7IHBhZ2UgfSA9IE9iamVjdC5mcm9tRW50cmllcyhbLi4ubmV3IFVSTCh1cmwpLnNlYXJjaFBhcmFtc10pOwogIHJldHVybiBwYWdlID8gK3BhZ2UgOiAxOwp9OwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ2hyZWYnLCB7IGdldDogbWVtb2l6ZSgoKSA9PiB7CiAgICBjb25zdCB1cmw9bmV3IFVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7Ck9iamVjdC5kZWZpbmVQcm9wZXJ0eSh1cmwsJ3F1ZXJ5JywgeyBnZXQ6IG1lbW9pemUoZnVuY3Rpb24gKCkgIHsKcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhbLi4udGhpcy5zZWFyY2hQYXJhbXNdKTsKfSkgIH0pCiAgICByZXR1cm4gdXJsO30gKSB9KTsKAAAAAAAAAADiCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbgkAAAAAAABuCQAAAAAAAAAAAAAAAPC/"
				],
				[
					282,
					1,
					"paste",
					null,
					"AQAAAOIJAAAAAAAAcgoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4gkAAAAAAADiCQAAAAAAAAAAAAAAAPC/"
				],
				[
					287,
					1,
					"insert",
					{
						"characters": "makeQuery"
					},
					"CgAAAOoJAAAAAAAA6wkAAAAAAAAAAAAA6wkAAAAAAADrCQAAAAAAAAcAAABnZXRQYWdl6wkAAAAAAADsCQAAAAAAAAAAAADsCQAAAAAAAO0JAAAAAAAAAAAAAO0JAAAAAAAA7gkAAAAAAAAAAAAA7gkAAAAAAADvCQAAAAAAAAAAAADvCQAAAAAAAPAJAAAAAAAAAAAAAPAJAAAAAAAA8QkAAAAAAAAAAAAA8QkAAAAAAADyCQAAAAAAAAAAAADyCQAAAAAAAPMJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6gkAAAAAAADxCQAAAAAAAAAAAAAAAPC/"
				],
				[
					292,
					1,
					"insert",
					{
						"characters": "obj"
					},
					"BAAAAPcJAAAAAAAA+AkAAAAAAAAAAAAA+AkAAAAAAAD4CQAAAAAAABEAAAB1cmwgPSB3aW5kb3cuaHJlZvgJAAAAAAAA+QkAAAAAAAAAAAAA+QkAAAAAAAD6CQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9wkAAAAAAAAICgAAAAAAAAAAAAAAAPC/"
				],
				[
					293,
					3,
					"left_delete",
					null,
					"AwAAAPkJAAAAAAAA+QkAAAAAAAABAAAAavgJAAAAAAAA+AkAAAAAAAABAAAAYvcJAAAAAAAA9wkAAAAAAAABAAAAbw",
					"AQAAAAAAAAABAAAA+gkAAAAAAAD6CQAAAAAAAAAAAAAAAPC/"
				],
				[
					294,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAPYJAAAAAAAA9gkAAAAAAAABAAAAKPYJAAAAAAAA9gkAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAA9wkAAAAAAAD3CQAAAAAAAAAAAAAAAPC/"
				],
				[
					295,
					1,
					"insert",
					{
						"characters": "obj"
					},
					"AwAAAPYJAAAAAAAA9wkAAAAAAAAAAAAA9wkAAAAAAAD4CQAAAAAAAAAAAAD4CQAAAAAAAPkJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9gkAAAAAAAD2CQAAAAAAAAAAAAAAAPC/"
				],
				[
					299,
					5,
					"right_delete",
					null,
					"BQAAABkKAAAAAAAAGQoAAAAAAAABAAAAZhkKAAAAAAAAGQoAAAAAAAABAAAAchkKAAAAAAAAGQoAAAAAAAABAAAAbxkKAAAAAAAAGQoAAAAAAAABAAAAbRkKAAAAAAAAGQoAAAAAAAABAAAARQ",
					"AQAAAAAAAAABAAAAGQoAAAAAAAAZCgAAAAAAAAAAAAAAAPC/"
				],
				[
					300,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAABkKAAAAAAAAGgoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGQoAAAAAAAAZCgAAAAAAAAAAAAAAAPC/"
				],
				[
					305,
					1,
					"insert",
					{
						"characters": "ojb"
					},
					"BAAAACEKAAAAAAAAIgoAAAAAAAAAAAAAIgoAAAAAAAAiCgAAAAAAAB4AAABbLi4ubmV3IFVSTCh1cmwpLnNlYXJjaFBhcmFtc10iCgAAAAAAACMKAAAAAAAAAAAAACMKAAAAAAAAJAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIQoAAAAAAAA/CgAAAAAAAAAAAAAAAPC/"
				],
				[
					306,
					2,
					"left_delete",
					null,
					"AgAAACMKAAAAAAAAIwoAAAAAAAABAAAAYiIKAAAAAAAAIgoAAAAAAAABAAAAag",
					"AQAAAAAAAAABAAAAJAoAAAAAAAAkCgAAAAAAAAAAAAAAAPC/"
				],
				[
					307,
					1,
					"insert",
					{
						"characters": "bj"
					},
					"AgAAACIKAAAAAAAAIwoAAAAAAAAAAAAAIwoAAAAAAAAkCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIgoAAAAAAAAiCgAAAAAAAAAAAAAAAPC/"
				],
				[
					309,
					1,
					"left_delete",
					null,
					"AQAAAP0JAAAAAAAA/QkAAAAAAAABAAAAew",
					"AQAAAAAAAAABAAAA/gkAAAAAAAD+CQAAAAAAAAAAAAAAIHdA"
				],
				[
					310,
					19,
					"right_delete",
					null,
					"EwAAAP0JAAAAAAAA/QkAAAAAAAABAAAACv0JAAAAAAAA/QkAAAAAAAABAAAAIP0JAAAAAAAA/QkAAAAAAAABAAAAIP0JAAAAAAAA/QkAAAAAAAABAAAAY/0JAAAAAAAA/QkAAAAAAAABAAAAb/0JAAAAAAAA/QkAAAAAAAABAAAAbv0JAAAAAAAA/QkAAAAAAAABAAAAc/0JAAAAAAAA/QkAAAAAAAABAAAAdP0JAAAAAAAA/QkAAAAAAAABAAAAIP0JAAAAAAAA/QkAAAAAAAABAAAAe/0JAAAAAAAA/QkAAAAAAAABAAAAIP0JAAAAAAAA/QkAAAAAAAABAAAAcP0JAAAAAAAA/QkAAAAAAAABAAAAYf0JAAAAAAAA/QkAAAAAAAABAAAAZ/0JAAAAAAAA/QkAAAAAAAABAAAAZf0JAAAAAAAA/QkAAAAAAAABAAAAIP0JAAAAAAAA/QkAAAAAAAABAAAAff0JAAAAAAAA/QkAAAAAAAABAAAAIP0JAAAAAAAA/QkAAAAAAAABAAAAPQ",
					"AQAAAAAAAAABAAAA/QkAAAAAAAD9CQAAAAAAAAAAAAAAAPC/"
				],
				[
					311,
					1,
					"right_delete",
					null,
					"AQAAAP0JAAAAAAAA/QkAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAA/QkAAAAAAAD9CQAAAAAAAAAAAAAAAPC/"
				],
				[
					313,
					1,
					"left_delete",
					null,
					"AQAAABAKAAAAAAAAEAoAAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAAEQoAAAAAAAARCgAAAAAAAP///////+9/"
				],
				[
					314,
					1,
					"insert",
					{
						"characters": ".ap"
					},
					"AwAAABAKAAAAAAAAEQoAAAAAAAAAAAAAEQoAAAAAAAASCgAAAAAAAAAAAAASCgAAAAAAABMKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEAoAAAAAAAAQCgAAAAAAAAAAAAAAAPC/"
				],
				[
					315,
					2,
					"left_delete",
					null,
					"AgAAABIKAAAAAAAAEgoAAAAAAAABAAAAcBEKAAAAAAAAEQoAAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAAEwoAAAAAAAATCgAAAAAAAAAAAAAAAPC/"
				],
				[
					316,
					1,
					"insert",
					{
						"characters": "reduce"
					},
					"BgAAABEKAAAAAAAAEgoAAAAAAAAAAAAAEgoAAAAAAAATCgAAAAAAAAAAAAATCgAAAAAAABQKAAAAAAAAAAAAABQKAAAAAAAAFQoAAAAAAAAAAAAAFQoAAAAAAAAWCgAAAAAAAAAAAAAWCgAAAAAAABcKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEQoAAAAAAAARCgAAAAAAAAAAAAAAAPC/"
				],
				[
					317,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAABcKAAAAAAAAGQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFwoAAAAAAAAXCgAAAAAAAAAAAAAAAPC/"
				],
				[
					318,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAABgKAAAAAAAAGQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGAoAAAAAAAAYCgAAAAAAAAAAAAAAAPC/"
				],
				[
					319,
					1,
					"left_delete",
					null,
					"AQAAABgKAAAAAAAAGAoAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAAGQoAAAAAAAAZCgAAAAAAAAAAAAAAAPC/"
				],
				[
					320,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAABgKAAAAAAAAGgoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGAoAAAAAAAAYCgAAAAAAAAAAAAAAAPC/"
				],
				[
					321,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAABkKAAAAAAAAGwoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGQoAAAAAAAAZCgAAAAAAAAAAAAAAAPC/"
				],
				[
					322,
					1,
					"insert",
					{
						"characters": "n,v"
					},
					"AwAAABoKAAAAAAAAGwoAAAAAAAAAAAAAGwoAAAAAAAAcCgAAAAAAAAAAAAAcCgAAAAAAAB0KAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGgoAAAAAAAAaCgAAAAAAAAAAAAAAAPC/"
				],
				[
					324,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAB4KAAAAAAAAHwoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHgoAAAAAAAAeCgAAAAAAAAAAAAAAAPC/"
				],
				[
					325,
					1,
					"insert",
					{
						"characters": " i"
					},
					"AgAAAB8KAAAAAAAAIAoAAAAAAAAAAAAAIAoAAAAAAAAhCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHwoAAAAAAAAfCgAAAAAAAAAAAAAAAPC/"
				],
				[
					327,
					1,
					"insert",
					{
						"characters": " =>"
					},
					"AwAAACIKAAAAAAAAIwoAAAAAAAAAAAAAIwoAAAAAAAAkCgAAAAAAAAAAAAAkCgAAAAAAACUKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIgoAAAAAAAAiCgAAAAAAAAAAAAAAAPC/"
				],
				[
					328,
					1,
					"insert",
					{
						"characters": "  "
					},
					"AgAAACUKAAAAAAAAJgoAAAAAAAAAAAAAJgoAAAAAAAAnCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJQoAAAAAAAAlCgAAAAAAAAAAAAAAAPC/"
				],
				[
					331,
					1,
					"insert",
					{
						"characters": "s,"
					},
					"AgAAABkKAAAAAAAAGgoAAAAAAAAAAAAAGgoAAAAAAAAbCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGQoAAAAAAAAZCgAAAAAAAAAAAAAAAPC/"
				],
				[
					334,
					1,
					"insert",
					{
						"characters": "s+"
					},
					"AgAAACkKAAAAAAAAKgoAAAAAAAAAAAAAKgoAAAAAAAArCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKQoAAAAAAAApCgAAAAAAAAAAAAAAAPC/"
				],
				[
					335,
					1,
					"insert_snippet",
					{
						"contents": "`$0`"
					},
					"AQAAACsKAAAAAAAALQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKwoAAAAAAAArCgAAAAAAAAAAAAAAAPC/"
				],
				[
					336,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACwKAAAAAAAALQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALAoAAAAAAAAsCgAAAAAAAAAAAAAAAPC/"
				],
				[
					338,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACsKAAAAAAAALAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKwoAAAAAAAArCgAAAAAAAAAAAAAAAPC/"
				],
				[
					340,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAACsKAAAAAAAALQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKwoAAAAAAAArCgAAAAAAAAAAAAAAAPC/"
				],
				[
					341,
					1,
					"insert",
					{
						"characters": "i==0?"
					},
					"BQAAACwKAAAAAAAALQoAAAAAAAAAAAAALQoAAAAAAAAuCgAAAAAAAAAAAAAuCgAAAAAAAC8KAAAAAAAAAAAAAC8KAAAAAAAAMAoAAAAAAAAAAAAAMAoAAAAAAAAxCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALAoAAAAAAAAsCgAAAAAAAAAAAAAAAPC/"
				],
				[
					342,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAADEKAAAAAAAAMwoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMQoAAAAAAAAxCgAAAAAAAAAAAAAAAPC/"
				],
				[
					343,
					1,
					"insert",
					{
						"characters": "?"
					},
					"AQAAADIKAAAAAAAAMwoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMgoAAAAAAAAyCgAAAAAAAAAAAAAAAPC/"
				],
				[
					345,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAADQKAAAAAAAANQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANAoAAAAAAAA0CgAAAAAAAAAAAAAAAPC/"
				],
				[
					346,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAADUKAAAAAAAANwoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANQoAAAAAAAA1CgAAAAAAAAAAAAAAAPC/"
				],
				[
					347,
					1,
					"insert",
					{
						"characters": "&"
					},
					"AQAAADYKAAAAAAAANwoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANgoAAAAAAAA2CgAAAAAAAAAAAAAAAPC/"
				],
				[
					349,
					1,
					"insert",
					{
						"characters": "+"
					},
					"AQAAADkKAAAAAAAAOgoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOQoAAAAAAAA5CgAAAAAAAAAAAAAAAPC/"
				],
				[
					351,
					1,
					"left_delete",
					null,
					"AQAAADsKAAAAAAAAOwoAAAAAAAABAAAAYA",
					"AQAAAAAAAAABAAAAPAoAAAAAAAA8CgAAAAAAAAAAAAAAAPC/"
				],
				[
					352,
					1,
					"insert",
					{
						"characters": "n+="
					},
					"AwAAADsKAAAAAAAAPAoAAAAAAAAAAAAAPAoAAAAAAAA9CgAAAAAAAAAAAAA9CgAAAAAAAD4KAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOwoAAAAAAAA7CgAAAAAAAAAAAAAAAPC/"
				],
				[
					353,
					1,
					"left_delete",
					null,
					"AQAAAD0KAAAAAAAAPQoAAAAAAAABAAAAPQ",
					"AQAAAAAAAAABAAAAPgoAAAAAAAA+CgAAAAAAAAAAAAAAAPC/"
				],
				[
					354,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAD0KAAAAAAAAPwoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPQoAAAAAAAA9CgAAAAAAAAAAAAAAAPC/"
				],
				[
					355,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAD4KAAAAAAAAPwoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPgoAAAAAAAA+CgAAAAAAAAAAAAAAAPC/"
				],
				[
					357,
					1,
					"insert",
					{
						"characters": "+v"
					},
					"AgAAAEAKAAAAAAAAQQoAAAAAAAAAAAAAQQoAAAAAAABCCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQAoAAAAAAABACgAAAAAAAAAAAAAAAPC/"
				],
				[
					358,
					2,
					"right_delete",
					null,
					"AgAAAEIKAAAAAAAAQgoAAAAAAAABAAAAIEIKAAAAAAAAQgoAAAAAAAABAAAAYA",
					"AQAAAAAAAAABAAAAQgoAAAAAAABCCgAAAAAAAAAAAAAAAPC/"
				],
				[
					360,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAEMKAAAAAAAARAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQwoAAAAAAABDCgAAAAAAAAAAAAAAAPC/"
				],
				[
					361,
					1,
					"left_delete",
					null,
					"AQAAAEMKAAAAAAAAQwoAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAARAoAAAAAAABECgAAAAAAAAAAAAAAAPC/"
				],
				[
					362,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAEMKAAAAAAAARAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQwoAAAAAAABDCgAAAAAAAAAAAAAAAPC/"
				],
				[
					365,
					1,
					"left_delete",
					null,
					"AQAAAEUKAAAAAAAARQoAAAAAAAAeAAAAICByZXR1cm4gcGFnZSA/ICtwYWdlIDogMTsKfTsK",
					"AQAAAAAAAAABAAAARQoAAAAAAABjCgAAAAAAAAAAAAAAAAAA"
				],
				[
					381,
					1,
					"insert",
					{
						"characters": ",s"
					},
					"AgAAAEIKAAAAAAAAQwoAAAAAAAAAAAAAQwoAAAAAAABECgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQgoAAAAAAABCCgAAAAAAAAAAAAAAAPC/"
				],
				[
					382,
					1,
					"left_delete",
					null,
					"AQAAAEMKAAAAAAAAQwoAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAARAoAAAAAAABECgAAAAAAAAAAAAAAAPC/"
				],
				[
					383,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAEMKAAAAAAAARQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQwoAAAAAAABDCgAAAAAAAAAAAAAAAPC/"
				],
				[
					401,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABICgAALy8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBHaXRIdWIKLy8gQG5hbWVzcGFjZSAgICBodHRwczovL2dpdGh1Yi5jb20vCi8vIEB2ZXJzaW9uICAgICAgMC4xCi8vIEBkZXNjcmlwdGlvbiAgdHJ5IHRvIHRha2Ugb3ZlciB0aGUgd29ybGQhCi8vIEBhdXRob3IgICAgICAgWW91Ci8vIEBtYXRjaCAgICAgICAgaHR0cHM6Ly9naXRodWIuY29tLwovLyBAaWNvbiAgICAgICAgIGh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vczIvZmF2aWNvbnM/c3o9NjQmZG9tYWluPWdpdGh1Yi5jb20KLy8gQGdyYW50ICAgICAgICBub25lCi8vID09L1VzZXJTY3JpcHQ9PQoKZnVuY3Rpb24gZGVmaW5lKG9iaiwgLi4uYXJncykgewogIGZvcihsZXQgcHJvcHMgb2YgYXJncykgewogICAgY29uc3QgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHByb3BzKTsKCiAgICBmb3IobGV0IHByb3AgaW4gZGVzYykgewogICAgICBjb25zdCB7IGVudW1lcmFibGUsIC4uLmQgfSA9IGRlc2NbcHJvcF07CgogICAgICB0cnkgewogICAgICAgIGRlbGV0ZSBvYmpbcHJvcF07CiAgICAgIH0gY2F0Y2goZSkge30KCiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIHByb3AsIHsgLi4uZCwgZW51bWVyYWJsZTogZmFsc2UgfSk7CiAgICB9CiAgfQogIC8vIG9iaiA9IGV4dGVuZChvYmosIHByb3BzLCBkZXNjID0+IChkZWxldGUgZGVzYy5jb25maWd1cmFibGUsIGRlbGV0ZSBkZXNjLmVudW1lcmFibGUpKTsKCiAgcmV0dXJuIG9iajsKfQpmdW5jdGlvbiBtZW1vaXplKGZuLCBjYWNoZSA9IG5ldyBNYXAoKSkgewogIHJldHVybiBkZWZpbmUoCiAgICBmdW5jdGlvbiBNZW1vaXplKG4sIC4uLnJlc3QpIHsKICAgICAgbGV0IHI7CiAgICAgIGlmKChyID0gY2FjaGUuZ2V0KG4pKSkgcmV0dXJuIHI7CiAgICAgIHIgPSBmbi5jYWxsKHRoaXMsIG4sIC4uLnJlc3QpOwogICAgICBjYWNoZS5zZXQobiwgcik7CiAgICAgIHJldHVybiByOwogICAgfSwKICAgIHsgY2FjaGUgfQogICk7Cn0KCndpbmRvdy5nZXRSZXBvcyA9ICgpID0+CiAgWy4uLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJyN1c2VyLXJlcG9zaXRvcmllcy1saXN0ID4gdWwgPiBsaSA+IGRpdi5jb2wtMTAuY29sLWxnLTkuZC1pbmxpbmUtYmxvY2snKV0ubWFwKGUgPT4gWwogICAgZS5xdWVyeVNlbGVjdG9yKCdhJykuaHJlZiwKICAgIGUucXVlcnlTZWxlY3RvcignaDMnKS5uZXh0RWxlbWVudFNpYmxpbmc/LnF1ZXJ5U2VsZWN0b3IoJ2EnKT8uaHJlZgogIF0pOwp3aW5kb3cucGFyc2VYTUwgPSB4bWxTdHIgPT4gewogIGNvbnN0IHBhcnNlciA9IG5ldyBET01QYXJzZXIoKTsKICByZXR1cm4gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyh4bWxTdHIsICd0ZXh0L2h0bWwnKTsKfTsKd2luZG93LmZldGNoVVJMID0gdXJsID0+CiAgZmV0Y2godXJsLCB7CiAgICBoZWFkZXJzOiB7CiAgICAgIGFjY2VwdDogJ3RleHQvaHRtbCwgYXBwbGljYXRpb24veGh0bWwreG1sJywKICAgICAgJ2FjY2VwdC1sYW5ndWFnZSc6ICdlbi1VUyxlbjtxPTAuOScsCiAgICAgICdjYWNoZS1jb250cm9sJzogJ25vLWNhY2hlJywKICAgICAgcHJhZ21hOiAnbm8tY2FjaGUnLAogICAgICAnc2VjLWNoLXVhJzogJyJDaHJvbWl1bSI7dj0iMTE4IiwgIkJyYXZlIjt2PSIxMTgiLCAiTm90PUE/QnJhbmQiO3Y9Ijk5IicsCiAgICAgICdzZWMtY2gtdWEtbW9iaWxlJzogJz8wJywKICAgICAgJ3NlYy1jaC11YS1wbGF0Zm9ybSc6ICciTGludXgiJywKICAgICAgJ3NlYy1mZXRjaC1kZXN0JzogJ2VtcHR5JywKICAgICAgJ3NlYy1mZXRjaC1tb2RlJzogJ2NvcnMnLAogICAgICAnc2VjLWZldGNoLXNpdGUnOiAnc2FtZS1vcmlnaW4nLAogICAgICAnc2VjLWdwYyc6ICcxJywKICAgICAgJ3R1cmJvLWZyYW1lJzogJ3VzZXItcHJvZmlsZS1mcmFtZScKICAgIH0sCiAgICByZWZlcnJlcjogd2luZG93LmxvY2F0aW9uLmhyZWYsCiAgICByZWZlcnJlclBvbGljeTogJ3N0cmljdC1vcmlnaW4td2hlbi1jcm9zcy1vcmlnaW4nLAogICAgbWV0aG9kOiAnR0VUJywKICAgIG1vZGU6ICdjb3JzJywKICAgIGNyZWRlbnRpYWxzOiAnaW5jbHVkZScKICB9KS50aGVuKHIgPT4gci50ZXh0KCkpOwoKd2luZG93LmdldFBhZ2UgPSAodXJsID0gd2luZG93LmhyZWYpID0+IHsKICBjb25zdCB7IHBhZ2UgfSA9IE9iamVjdC5mcm9tRW50cmllcyhbLi4ubmV3IFVSTCh1cmwpLnNlYXJjaFBhcmFtc10pOwogIHJldHVybiBwYWdlID8gK3BhZ2UgOiAxOwp9OwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ2hyZWYnLCB7CiAgZ2V0OiBtZW1vaXplKCgpID0+IHsKICAgIGNvbnN0IHVybCA9IG5ldyBVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpOwogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHVybCwgJ3F1ZXJ5JywgewogICAgICBnZXQ6IG1lbW9pemUoZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoWy4uLnRoaXMuc2VhcmNoUGFyYW1zXSk7CiAgICAgIH0pCiAgICB9KTsKICAgIHJldHVybiB1cmw7CiAgfSkKfSk7Cgp3aW5kb3cubWFrZVF1ZXJ5ID0gb2JqID0+IE9iamVjdC5lbnRyaWVzKG9iaikucmVkdWNlKChzLFtuLHZdLCBpKSA9PiAgcysoaT09MD8nPyc6JyYnKSsgbisnPScrdiwnJyk7CgAAAAAAAAAAVwoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6wkAAAAAAADrCQAAAAAAAAAAAAAAAPC/"
				],
				[
					415,
					1,
					"cut",
					null,
					"AQAAAOMJAAAAAAAA4wkAAAAAAAB0AAAAd2luZG93Lm1ha2VRdWVyeSA9IG9iaiA9PiBPYmplY3QuZW50cmllcyhvYmopLnJlZHVjZSgocywgW24sIHZdLCBpKSA9PiBzICsgKGkgPT0gMCA/ICc/JyA6ICcmJykgKyBuICsgJz0nICsgdiwgJycpOwo",
					"AQAAAAAAAAABAAAA4wkAAAAAAABXCgAAAAAAAAAAAAAAAPC/"
				],
				[
					416,
					2,
					"paste",
					null,
					"AgAAAOMJAAAAAAAAVwoAAAAAAAAAAAAAVwoAAAAAAADLCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4wkAAAAAAADjCQAAAAAAAAAAAAAAAPC/"
				],
				[
					421,
					1,
					"insert",
					{
						"characters": "makeURL"
					},
					"CAAAAF4KAAAAAAAAXwoAAAAAAAAAAAAAXwoAAAAAAABfCgAAAAAAAAkAAABtYWtlUXVlcnlfCgAAAAAAAGAKAAAAAAAAAAAAAGAKAAAAAAAAYQoAAAAAAAAAAAAAYQoAAAAAAABiCgAAAAAAAAAAAABiCgAAAAAAAGMKAAAAAAAAAAAAAGMKAAAAAAAAZAoAAAAAAAAAAAAAZAoAAAAAAABlCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXgoAAAAAAABnCgAAAAAAAAAAAAAAAPC/"
				],
				[
					423,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAAGgKAAAAAAAAaQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaAoAAAAAAABoCgAAAAAAAAAAAAAAAPC/"
				],
				[
					425,
					1,
					"insert",
					{
						"characters": "base,query)"
					},
					"DAAAAGkKAAAAAAAAagoAAAAAAAAAAAAAagoAAAAAAABqCgAAAAAAAGAAAABvYmogPT4gT2JqZWN0LmVudHJpZXMob2JqKS5yZWR1Y2UoKHMsIFtuLCB2XSwgaSkgPT4gcyArIChpID09IDAgPyAnPycgOiAnJicpICsgbiArICc9JyArIHYsICcnKTtqCgAAAAAAAGsKAAAAAAAAAAAAAGsKAAAAAAAAbAoAAAAAAAAAAAAAbAoAAAAAAABtCgAAAAAAAAAAAABtCgAAAAAAAG4KAAAAAAAAAAAAAG4KAAAAAAAAbwoAAAAAAAAAAAAAbwoAAAAAAABwCgAAAAAAAAAAAABwCgAAAAAAAHEKAAAAAAAAAAAAAHEKAAAAAAAAcgoAAAAAAAAAAAAAcgoAAAAAAABzCgAAAAAAAAAAAABzCgAAAAAAAHQKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaQoAAAAAAADJCgAAAAAAAP///////+9/"
				],
				[
					426,
					1,
					"left_delete",
					null,
					"AQAAAHMKAAAAAAAAcwoAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAdAoAAAAAAAB0CgAAAAAAAAAAAAAAAPC/"
				],
				[
					427,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAHMKAAAAAAAAdAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcwoAAAAAAABzCgAAAAAAAAAAAAAAAPC/"
				],
				[
					428,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAHQKAAAAAAAAdgoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdAoAAAAAAAB0CgAAAAAAAAAAAAAAAPC/"
				],
				[
					430,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAHYKAAAAAAAAdwoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdgoAAAAAAAB2CgAAAAAAAAAAAAAAAPC/"
				],
				[
					431,
					1,
					"insert",
					{
						"characters": " =>"
					},
					"AwAAAHcKAAAAAAAAeAoAAAAAAAAAAAAAeAoAAAAAAAB5CgAAAAAAAAAAAAB5CgAAAAAAAHoKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdwoAAAAAAAB3CgAAAAAAAAAAAAAAAPC/"
				],
				[
					432,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHoKAAAAAAAAewoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAegoAAAAAAAB6CgAAAAAAAAAAAAAAAPC/"
				],
				[
					435,
					1,
					"insert",
					{
						"characters": "base+"
					},
					"BQAAAHsKAAAAAAAAfAoAAAAAAAAAAAAAfAoAAAAAAAB9CgAAAAAAAAAAAAB9CgAAAAAAAH4KAAAAAAAAAAAAAH4KAAAAAAAAfwoAAAAAAAAAAAAAfwoAAAAAAACACgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAewoAAAAAAAB7CgAAAAAAAAAAAAAAAPC/"
				],
				[
					436,
					1,
					"insert",
					{
						"characters": "makeQuery"
					},
					"CQAAAIAKAAAAAAAAgQoAAAAAAAAAAAAAgQoAAAAAAACCCgAAAAAAAAAAAACCCgAAAAAAAIMKAAAAAAAAAAAAAIMKAAAAAAAAhAoAAAAAAAAAAAAAhAoAAAAAAACFCgAAAAAAAAAAAACFCgAAAAAAAIYKAAAAAAAAAAAAAIYKAAAAAAAAhwoAAAAAAAAAAAAAhwoAAAAAAACICgAAAAAAAAAAAACICgAAAAAAAIkKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgAoAAAAAAACACgAAAAAAAAAAAAAAAPC/"
				],
				[
					437,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAIkKAAAAAAAAiwoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiQoAAAAAAACJCgAAAAAAAAAAAAAAAPC/"
				],
				[
					438,
					1,
					"insert",
					{
						"characters": "query"
					},
					"BQAAAIoKAAAAAAAAiwoAAAAAAAAAAAAAiwoAAAAAAACMCgAAAAAAAAAAAACMCgAAAAAAAI0KAAAAAAAAAAAAAI0KAAAAAAAAjgoAAAAAAAAAAAAAjgoAAAAAAACPCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAigoAAAAAAACKCgAAAAAAAAAAAAAAAPC/"
				],
				[
					440,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAJAKAAAAAAAAkQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkAoAAAAAAACQCgAAAAAAAAAAAAAAAPC/"
				],
				[
					441,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAJEKAAAAAAAAkgoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkQoAAAAAAACRCgAAAAAAAAAAAAAAAPC/"
				],
				[
					445,
					1,
					"insert",
					{
						"characters": ".replace(&/"
					},
					"CwAAAH8KAAAAAAAAgAoAAAAAAAAAAAAAgAoAAAAAAACBCgAAAAAAAAAAAACBCgAAAAAAAIIKAAAAAAAAAAAAAIIKAAAAAAAAgwoAAAAAAAAAAAAAgwoAAAAAAACECgAAAAAAAAAAAACECgAAAAAAAIUKAAAAAAAAAAAAAIUKAAAAAAAAhgoAAAAAAAAAAAAAhgoAAAAAAACHCgAAAAAAAAAAAACHCgAAAAAAAIgKAAAAAAAAAAAAAIgKAAAAAAAAiQoAAAAAAAAAAAAAiQoAAAAAAACKCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfwoAAAAAAAB/CgAAAAAAAAAAAAAAAPC/"
				],
				[
					446,
					2,
					"left_delete",
					null,
					"AgAAAIkKAAAAAAAAiQoAAAAAAAABAAAAL4gKAAAAAAAAiAoAAAAAAAABAAAAJg",
					"AQAAAAAAAAABAAAAigoAAAAAAACKCgAAAAAAAAAAAAAAAPC/"
				],
				[
					447,
					1,
					"insert",
					{
						"characters": "/<?"
					},
					"AwAAAIgKAAAAAAAAiQoAAAAAAAAAAAAAiQoAAAAAAACKCgAAAAAAAAAAAACKCgAAAAAAAIsKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiAoAAAAAAACICgAAAAAAAAAAAAAAAPC/"
				],
				[
					448,
					2,
					"left_delete",
					null,
					"AgAAAIoKAAAAAAAAigoAAAAAAAABAAAAP4kKAAAAAAAAiQoAAAAAAAABAAAAPA",
					"AQAAAAAAAAABAAAAiwoAAAAAAACLCgAAAAAAAAAAAAAAAPC/"
				],
				[
					449,
					1,
					"insert",
					{
						"characters": "\\?.*/g"
					},
					"BgAAAIkKAAAAAAAAigoAAAAAAAAAAAAAigoAAAAAAACLCgAAAAAAAAAAAACLCgAAAAAAAIwKAAAAAAAAAAAAAIwKAAAAAAAAjQoAAAAAAAAAAAAAjQoAAAAAAACOCgAAAAAAAAAAAACOCgAAAAAAAI8KAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiQoAAAAAAACJCgAAAAAAAAAAAAAAAPC/"
				],
				[
					450,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAI8KAAAAAAAAkAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjwoAAAAAAACPCgAAAAAAAAAAAAAAAPC/"
				],
				[
					451,
					1,
					"insert",
					{
						"characters": " '')"
					},
					"BAAAAJAKAAAAAAAAkQoAAAAAAAAAAAAAkQoAAAAAAACSCgAAAAAAAAAAAACSCgAAAAAAAJMKAAAAAAAAAAAAAJMKAAAAAAAAlAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkAoAAAAAAACQCgAAAAAAAAAAAAAAAPC/"
				],
				[
					462,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACoCgAALy8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBHaXRIdWIKLy8gQG5hbWVzcGFjZSAgICBodHRwczovL2dpdGh1Yi5jb20vCi8vIEB2ZXJzaW9uICAgICAgMC4xCi8vIEBkZXNjcmlwdGlvbiAgdHJ5IHRvIHRha2Ugb3ZlciB0aGUgd29ybGQhCi8vIEBhdXRob3IgICAgICAgWW91Ci8vIEBtYXRjaCAgICAgICAgaHR0cHM6Ly9naXRodWIuY29tLwovLyBAaWNvbiAgICAgICAgIGh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vczIvZmF2aWNvbnM/c3o9NjQmZG9tYWluPWdpdGh1Yi5jb20KLy8gQGdyYW50ICAgICAgICBub25lCi8vID09L1VzZXJTY3JpcHQ9PQoKZnVuY3Rpb24gZGVmaW5lKG9iaiwgLi4uYXJncykgewogIGZvcihsZXQgcHJvcHMgb2YgYXJncykgewogICAgY29uc3QgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHByb3BzKTsKCiAgICBmb3IobGV0IHByb3AgaW4gZGVzYykgewogICAgICBjb25zdCB7IGVudW1lcmFibGUsIC4uLmQgfSA9IGRlc2NbcHJvcF07CgogICAgICB0cnkgewogICAgICAgIGRlbGV0ZSBvYmpbcHJvcF07CiAgICAgIH0gY2F0Y2goZSkge30KCiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIHByb3AsIHsgLi4uZCwgZW51bWVyYWJsZTogZmFsc2UgfSk7CiAgICB9CiAgfQogIC8vIG9iaiA9IGV4dGVuZChvYmosIHByb3BzLCBkZXNjID0+IChkZWxldGUgZGVzYy5jb25maWd1cmFibGUsIGRlbGV0ZSBkZXNjLmVudW1lcmFibGUpKTsKCiAgcmV0dXJuIG9iajsKfQpmdW5jdGlvbiBtZW1vaXplKGZuLCBjYWNoZSA9IG5ldyBNYXAoKSkgewogIHJldHVybiBkZWZpbmUoCiAgICBmdW5jdGlvbiBNZW1vaXplKG4sIC4uLnJlc3QpIHsKICAgICAgbGV0IHI7CiAgICAgIGlmKChyID0gY2FjaGUuZ2V0KG4pKSkgcmV0dXJuIHI7CiAgICAgIHIgPSBmbi5jYWxsKHRoaXMsIG4sIC4uLnJlc3QpOwogICAgICBjYWNoZS5zZXQobiwgcik7CiAgICAgIHJldHVybiByOwogICAgfSwKICAgIHsgY2FjaGUgfQogICk7Cn0KCndpbmRvdy5nZXRSZXBvcyA9ICgpID0+CiAgWy4uLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJyN1c2VyLXJlcG9zaXRvcmllcy1saXN0ID4gdWwgPiBsaSA+IGRpdi5jb2wtMTAuY29sLWxnLTkuZC1pbmxpbmUtYmxvY2snKV0ubWFwKGUgPT4gWwogICAgZS5xdWVyeVNlbGVjdG9yKCdhJykuaHJlZiwKICAgIGUucXVlcnlTZWxlY3RvcignaDMnKS5uZXh0RWxlbWVudFNpYmxpbmc/LnF1ZXJ5U2VsZWN0b3IoJ2EnKT8uaHJlZgogIF0pOwp3aW5kb3cucGFyc2VYTUwgPSB4bWxTdHIgPT4gewogIGNvbnN0IHBhcnNlciA9IG5ldyBET01QYXJzZXIoKTsKICByZXR1cm4gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyh4bWxTdHIsICd0ZXh0L2h0bWwnKTsKfTsKd2luZG93LmZldGNoVVJMID0gdXJsID0+CiAgZmV0Y2godXJsLCB7CiAgICBoZWFkZXJzOiB7CiAgICAgIGFjY2VwdDogJ3RleHQvaHRtbCwgYXBwbGljYXRpb24veGh0bWwreG1sJywKICAgICAgJ2FjY2VwdC1sYW5ndWFnZSc6ICdlbi1VUyxlbjtxPTAuOScsCiAgICAgICdjYWNoZS1jb250cm9sJzogJ25vLWNhY2hlJywKICAgICAgcHJhZ21hOiAnbm8tY2FjaGUnLAogICAgICAnc2VjLWNoLXVhJzogJyJDaHJvbWl1bSI7dj0iMTE4IiwgIkJyYXZlIjt2PSIxMTgiLCAiTm90PUE/QnJhbmQiO3Y9Ijk5IicsCiAgICAgICdzZWMtY2gtdWEtbW9iaWxlJzogJz8wJywKICAgICAgJ3NlYy1jaC11YS1wbGF0Zm9ybSc6ICciTGludXgiJywKICAgICAgJ3NlYy1mZXRjaC1kZXN0JzogJ2VtcHR5JywKICAgICAgJ3NlYy1mZXRjaC1tb2RlJzogJ2NvcnMnLAogICAgICAnc2VjLWZldGNoLXNpdGUnOiAnc2FtZS1vcmlnaW4nLAogICAgICAnc2VjLWdwYyc6ICcxJywKICAgICAgJ3R1cmJvLWZyYW1lJzogJ3VzZXItcHJvZmlsZS1mcmFtZScKICAgIH0sCiAgICByZWZlcnJlcjogd2luZG93LmxvY2F0aW9uLmhyZWYsCiAgICByZWZlcnJlclBvbGljeTogJ3N0cmljdC1vcmlnaW4td2hlbi1jcm9zcy1vcmlnaW4nLAogICAgbWV0aG9kOiAnR0VUJywKICAgIG1vZGU6ICdjb3JzJywKICAgIGNyZWRlbnRpYWxzOiAnaW5jbHVkZScKICB9KS50aGVuKHIgPT4gci50ZXh0KCkpOwoKd2luZG93LmdldFBhZ2UgPSAodXJsID0gd2luZG93LmhyZWYpID0+IHsKICBjb25zdCB7IHBhZ2UgfSA9IE9iamVjdC5mcm9tRW50cmllcyhbLi4ubmV3IFVSTCh1cmwpLnNlYXJjaFBhcmFtc10pOwogIHJldHVybiBwYWdlID8gK3BhZ2UgOiAxOwp9OwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ2hyZWYnLCB7CiAgZ2V0OiBtZW1vaXplKCgpID0+IHsKICAgIGNvbnN0IHVybCA9IG5ldyBVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpOwogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHVybCwgJ3F1ZXJ5JywgewogICAgICBnZXQ6IG1lbW9pemUoZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoWy4uLnRoaXMuc2VhcmNoUGFyYW1zXSk7CiAgICAgIH0pCiAgICB9KTsKICAgIHJldHVybiB1cmw7CiAgfSkKfSk7Cgp3aW5kb3cubWFrZVF1ZXJ5ID0gb2JqID0+IE9iamVjdC5lbnRyaWVzKG9iaikucmVkdWNlKChzLCBbbiwgdl0sIGkpID0+IHMgKyAoaSA9PSAwID8gJz8nIDogJyYnKSArIG4gKyAnPScgKyB2LCAnJyk7CndpbmRvdy5tYWtlVVJMID0gKGJhc2UscXVlcnk9e30pID0+IGJhc2UucmVwbGFjZSgvXD8uKi9nLCAnJykrbWFrZVF1ZXJ5KHF1ZXJ5KTsKCgAAAAAAAAAArAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4wkAAAAAAACnCgAAAAAAAAAAAAAAAAAA"
				],
				[
					472,
					1,
					"cut",
					null,
					"AQAAAFcKAAAAAAAAVwoAAAAAAABVAAAAd2luZG93Lm1ha2VVUkwgPSAoYmFzZSwgcXVlcnkgPSB7fSkgPT4gYmFzZS5yZXBsYWNlKC9cPy4qL2csICcnKSArIG1ha2VRdWVyeShxdWVyeSk7Cg",
					"AQAAAAAAAAABAAAAVwoAAAAAAACsCgAAAAAAAAAAAAAAAPC/"
				],
				[
					473,
					2,
					"paste",
					null,
					"AgAAAFcKAAAAAAAArAoAAAAAAAAAAAAArAoAAAAAAAABCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVwoAAAAAAABXCgAAAAAAAAAAAAAAAPC/"
				],
				[
					478,
					1,
					"insert",
					{
						"characters": "nextURL"
					},
					"CAAAALMKAAAAAAAAtAoAAAAAAAAAAAAAtAoAAAAAAAC0CgAAAAAAAAcAAABtYWtlVVJMtAoAAAAAAAC1CgAAAAAAAAAAAAC1CgAAAAAAALYKAAAAAAAAAAAAALYKAAAAAAAAtwoAAAAAAAAAAAAAtwoAAAAAAAC4CgAAAAAAAAAAAAC4CgAAAAAAALkKAAAAAAAAAAAAALkKAAAAAAAAugoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAswoAAAAAAAC6CgAAAAAAAAAAAAAAAPC/"
				],
				[
					481,
					1,
					"insert",
					{
						"characters": "=wi"
					},
					"AwAAAG0KAAAAAAAAbgoAAAAAAAAAAAAAbgoAAAAAAABvCgAAAAAAAAAAAABvCgAAAAAAAHAKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbQoAAAAAAABtCgAAAAAAAAAAAAAAgGtA"
				],
				[
					482,
					2,
					"left_delete",
					null,
					"AgAAAG8KAAAAAAAAbwoAAAAAAAABAAAAaW4KAAAAAAAAbgoAAAAAAAABAAAAdw",
					"AQAAAAAAAAABAAAAcAoAAAAAAABwCgAAAAAAAAAAAAAAAPC/"
				],
				[
					483,
					1,
					"insert",
					{
						"characters": "h"
					},
					"AQAAAG4KAAAAAAAAbwoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbgoAAAAAAABuCgAAAAAAAAAAAAAAAPC/"
				],
				[
					484,
					1,
					"left_delete",
					null,
					"AQAAAG4KAAAAAAAAbgoAAAAAAAABAAAAaA",
					"AQAAAAAAAAABAAAAbwoAAAAAAABvCgAAAAAAAAAAAAAAAPC/"
				],
				[
					485,
					1,
					"insert",
					{
						"characters": "href"
					},
					"BAAAAG4KAAAAAAAAbwoAAAAAAAAAAAAAbwoAAAAAAABwCgAAAAAAAAAAAABwCgAAAAAAAHEKAAAAAAAAAAAAAHEKAAAAAAAAcgoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbgoAAAAAAABuCgAAAAAAAAAAAAAAAPC/"
				],
				[
					487,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAIMKAAAAAAAAhAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgwoAAAAAAACDCgAAAAAAAAAAAAAAAPC/"
				],
				[
					488,
					1,
					"left_delete",
					null,
					"AQAAAIMKAAAAAAAAgwoAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAhAoAAAAAAACECgAAAAAAAAAAAAAAAPC/"
				],
				[
					489,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAAIMKAAAAAAAAhAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgwoAAAAAAACDCgAAAAAAAAAAAAAAAPC/"
				],
				[
					491,
					1,
					"insert",
					{
						"characters": "+'')"
					},
					"BAAAAIgKAAAAAAAAiQoAAAAAAAAAAAAAiQoAAAAAAACKCgAAAAAAAAAAAACKCgAAAAAAAIsKAAAAAAAAAAAAAIsKAAAAAAAAjAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiAoAAAAAAACICgAAAAAAAAAAAAAAAPC/"
				],
				[
					498,
					4,
					"left_delete",
					null,
					"BAAAAMsKAAAAAAAAywoAAAAAAAABAAAAZcoKAAAAAAAAygoAAAAAAAABAAAAc8kKAAAAAAAAyQoAAAAAAAABAAAAYcgKAAAAAAAAyAoAAAAAAAABAAAAYg",
					"AQAAAAAAAAABAAAAzAoAAAAAAADMCgAAAAAAAAAAAAAAAPC/"
				],
				[
					499,
					2,
					"right_delete",
					null,
					"AgAAAMgKAAAAAAAAyAoAAAAAAAABAAAALMgKAAAAAAAAyAoAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAyAoAAAAAAADICgAAAAAAAAAAAAAAAPC/"
				],
				[
					504,
					1,
					"right_delete",
					null,
					"AQAAAMgKAAAAAAAAyAoAAAAAAAAKAAAAcXVlcnkgPSB7fQ",
					"AQAAAAAAAAABAAAAyAoAAAAAAADSCgAAAAAAAAAAAAAAAPC/"
				],
				[
					507,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAM0KAAAAAAAAzgoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzQoAAAAAAADNCgAAAAAAAAAAAAAAAPC/"
				],
				[
					510,
					1,
					"cut",
					null,
					"AQAAAM0KAAAAAAAAzQoAAAAAAAAuAAAAIGJhc2UucmVwbGFjZSgvXD8uKi9nLCAnJykgKyBtYWtlUXVlcnkocXVlcnkpOw",
					"AQAAAAAAAAABAAAAzQoAAAAAAAD7CgAAAAAAAP///////+9/"
				],
				[
					511,
					1,
					"insert",
					{
						"characters": "makeURL"
					},
					"BwAAAM0KAAAAAAAAzgoAAAAAAAAAAAAAzgoAAAAAAADPCgAAAAAAAAAAAADPCgAAAAAAANAKAAAAAAAAAAAAANAKAAAAAAAA0QoAAAAAAAAAAAAA0QoAAAAAAADSCgAAAAAAAAAAAADSCgAAAAAAANMKAAAAAAAAAAAAANMKAAAAAAAA1AoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzQoAAAAAAADNCgAAAAAAAAAAAAAAAPC/"
				],
				[
					512,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAANQKAAAAAAAA1goAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1AoAAAAAAADUCgAAAAAAAAAAAAAAAPC/"
				],
				[
					513,
					1,
					"insert",
					{
						"characters": "window.l"
					},
					"CAAAANUKAAAAAAAA1goAAAAAAAAAAAAA1goAAAAAAADXCgAAAAAAAAAAAADXCgAAAAAAANgKAAAAAAAAAAAAANgKAAAAAAAA2QoAAAAAAAAAAAAA2QoAAAAAAADaCgAAAAAAAAAAAADaCgAAAAAAANsKAAAAAAAAAAAAANsKAAAAAAAA3AoAAAAAAAAAAAAA3AoAAAAAAADdCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1QoAAAAAAADVCgAAAAAAAAAAAAAAAPC/"
				],
				[
					514,
					8,
					"left_delete",
					null,
					"CAAAANwKAAAAAAAA3AoAAAAAAAABAAAAbNsKAAAAAAAA2woAAAAAAAABAAAALtoKAAAAAAAA2goAAAAAAAABAAAAd9kKAAAAAAAA2QoAAAAAAAABAAAAb9gKAAAAAAAA2AoAAAAAAAABAAAAZNcKAAAAAAAA1woAAAAAAAABAAAAbtYKAAAAAAAA1goAAAAAAAABAAAAadUKAAAAAAAA1QoAAAAAAAABAAAAdw",
					"AQAAAAAAAAABAAAA3QoAAAAAAADdCgAAAAAAAAAAAAAAAPC/"
				],
				[
					515,
					1,
					"insert",
					{
						"characters": "href,"
					},
					"BQAAANUKAAAAAAAA1goAAAAAAAAAAAAA1goAAAAAAADXCgAAAAAAAAAAAADXCgAAAAAAANgKAAAAAAAAAAAAANgKAAAAAAAA2QoAAAAAAAAAAAAA2QoAAAAAAADaCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1QoAAAAAAADVCgAAAAAAAAAAAAAAAPC/"
				],
				[
					516,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANoKAAAAAAAA2woAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2goAAAAAAADaCgAAAAAAAAAAAAAAAPC/"
				],
				[
					517,
					1,
					"insert",
					{
						"characters": "href.query"
					},
					"CgAAANsKAAAAAAAA3AoAAAAAAAAAAAAA3AoAAAAAAADdCgAAAAAAAAAAAADdCgAAAAAAAN4KAAAAAAAAAAAAAN4KAAAAAAAA3woAAAAAAAAAAAAA3woAAAAAAADgCgAAAAAAAAAAAADgCgAAAAAAAOEKAAAAAAAAAAAAAOEKAAAAAAAA4goAAAAAAAAAAAAA4goAAAAAAADjCgAAAAAAAAAAAADjCgAAAAAAAOQKAAAAAAAAAAAAAOQKAAAAAAAA5QoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2woAAAAAAADbCgAAAAAAAAAAAAAAAPC/"
				],
				[
					519,
					1,
					"insert",
					{
						"characters": "u=href"
					},
					"BgAAAMgKAAAAAAAAyQoAAAAAAAAAAAAAyQoAAAAAAADKCgAAAAAAAAAAAADKCgAAAAAAAMsKAAAAAAAAAAAAAMsKAAAAAAAAzAoAAAAAAAAAAAAAzAoAAAAAAADNCgAAAAAAAAAAAADNCgAAAAAAAM4KAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyAoAAAAAAADICgAAAAAAAAAAAAAAAPC/"
				],
				[
					521,
					4,
					"right_delete",
					null,
					"BAAAANsKAAAAAAAA2woAAAAAAAABAAAAaNsKAAAAAAAA2woAAAAAAAABAAAActsKAAAAAAAA2woAAAAAAAABAAAAZdsKAAAAAAAA2woAAAAAAAABAAAAZg",
					"AQAAAAAAAAABAAAA2woAAAAAAADbCgAAAAAAAAAAAAAAAPC/"
				],
				[
					522,
					1,
					"insert",
					{
						"characters": "u"
					},
					"AQAAANsKAAAAAAAA3AoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2woAAAAAAADbCgAAAAAAAAAAAAAAAPC/"
				],
				[
					525,
					4,
					"right_delete",
					null,
					"BAAAAN4KAAAAAAAA3goAAAAAAAABAAAAaN4KAAAAAAAA3goAAAAAAAABAAAAct4KAAAAAAAA3goAAAAAAAABAAAAZd4KAAAAAAAA3goAAAAAAAABAAAAZg",
					"AQAAAAAAAAABAAAA3goAAAAAAADeCgAAAAAAAAAAAAAAAPC/"
				],
				[
					526,
					1,
					"insert",
					{
						"characters": "u"
					},
					"AQAAAN4KAAAAAAAA3woAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3goAAAAAAADeCgAAAAAAAAAAAAAAAPC/"
				],
				[
					529,
					1,
					"insert",
					{
						"characters": "{"
					},
					"AQAAAN4KAAAAAAAA3woAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3goAAAAAAADeCgAAAAAAAAAAAAAAAPC/"
				],
				[
					530,
					1,
					"insert",
					{
						"characters": " ..."
					},
					"BAAAAN8KAAAAAAAA4AoAAAAAAAAAAAAA4AoAAAAAAADhCgAAAAAAAAAAAADhCgAAAAAAAOIKAAAAAAAAAAAAAOIKAAAAAAAA4woAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3woAAAAAAADfCgAAAAAAAAAAAAAAAPC/"
				],
				[
					533,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAOoKAAAAAAAA6woAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6goAAAAAAADqCgAAAAAAAAAAAAAAAPC/"
				],
				[
					534,
					1,
					"insert",
					{
						"characters": "  "
					},
					"AgAAAOsKAAAAAAAA7AoAAAAAAAAAAAAA7AoAAAAAAADtCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6woAAAAAAADrCgAAAAAAAAAAAAAAAPC/"
				],
				[
					535,
					3,
					"left_delete",
					null,
					"AwAAAOwKAAAAAAAA7AoAAAAAAAABAAAAIOsKAAAAAAAA6woAAAAAAAABAAAAIOoKAAAAAAAA6goAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAA7QoAAAAAAADtCgAAAAAAAAAAAAAAAPC/"
				],
				[
					536,
					1,
					"insert",
					{
						"characters": ",m"
					},
					"AgAAAOoKAAAAAAAA6woAAAAAAAAAAAAA6woAAAAAAADsCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6goAAAAAAADqCgAAAAAAAAAAAAAAAPC/"
				],
				[
					537,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOwKAAAAAAAA7QoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7AoAAAAAAADsCgAAAAAAAAAAAAAAAPC/"
				],
				[
					538,
					2,
					"left_delete",
					null,
					"AgAAAOwKAAAAAAAA7AoAAAAAAAABAAAAIOsKAAAAAAAA6woAAAAAAAABAAAAbQ",
					"AQAAAAAAAAABAAAA7QoAAAAAAADtCgAAAAAAAAAAAAAAAPC/"
				],
				[
					539,
					1,
					"insert",
					{
						"characters": " page:"
					},
					"BgAAAOsKAAAAAAAA7AoAAAAAAAAAAAAA7AoAAAAAAADtCgAAAAAAAAAAAADtCgAAAAAAAO4KAAAAAAAAAAAAAO4KAAAAAAAA7woAAAAAAAAAAAAA7woAAAAAAADwCgAAAAAAAAAAAADwCgAAAAAAAPEKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6woAAAAAAADrCgAAAAAAAAAAAAAAAPC/"
				],
				[
					540,
					1,
					"insert",
					{
						"characters": " getPage"
					},
					"CAAAAPEKAAAAAAAA8goAAAAAAAAAAAAA8goAAAAAAADzCgAAAAAAAAAAAADzCgAAAAAAAPQKAAAAAAAAAAAAAPQKAAAAAAAA9QoAAAAAAAAAAAAA9QoAAAAAAAD2CgAAAAAAAAAAAAD2CgAAAAAAAPcKAAAAAAAAAAAAAPcKAAAAAAAA+AoAAAAAAAAAAAAA+AoAAAAAAAD5CgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8QoAAAAAAADxCgAAAAAAAAAAAAAAAPC/"
				],
				[
					541,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPkKAAAAAAAA+goAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+QoAAAAAAAD5CgAAAAAAAAAAAAAAAPC/"
				],
				[
					542,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAPoKAAAAAAAA/AoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+goAAAAAAAD6CgAAAAAAAAAAAAAAAPC/"
				],
				[
					544,
					1,
					"insert",
					{
						"characters": "+1"
					},
					"AgAAAPwKAAAAAAAA/QoAAAAAAAAAAAAA/QoAAAAAAAD+CgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/AoAAAAAAAD8CgAAAAAAAAAAAAAAAPC/"
				],
				[
					545,
					1,
					"insert",
					{
						"characters": " }"
					},
					"AgAAAP4KAAAAAAAA/woAAAAAAAAAAAAA/woAAAAAAAAACwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/goAAAAAAAD+CgAAAAAAAAAAAAAAAPC/"
				],
				[
					547,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAAELAAAAAAAAAgsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAQsAAAAAAAABCwAAAAAAAAAAAAAAAPC/"
				],
				[
					550,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAADCwAALy8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBHaXRIdWIKLy8gQG5hbWVzcGFjZSAgICBodHRwczovL2dpdGh1Yi5jb20vCi8vIEB2ZXJzaW9uICAgICAgMC4xCi8vIEBkZXNjcmlwdGlvbiAgdHJ5IHRvIHRha2Ugb3ZlciB0aGUgd29ybGQhCi8vIEBhdXRob3IgICAgICAgWW91Ci8vIEBtYXRjaCAgICAgICAgaHR0cHM6Ly9naXRodWIuY29tLwovLyBAaWNvbiAgICAgICAgIGh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vczIvZmF2aWNvbnM/c3o9NjQmZG9tYWluPWdpdGh1Yi5jb20KLy8gQGdyYW50ICAgICAgICBub25lCi8vID09L1VzZXJTY3JpcHQ9PQoKZnVuY3Rpb24gZGVmaW5lKG9iaiwgLi4uYXJncykgewogIGZvcihsZXQgcHJvcHMgb2YgYXJncykgewogICAgY29uc3QgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHByb3BzKTsKCiAgICBmb3IobGV0IHByb3AgaW4gZGVzYykgewogICAgICBjb25zdCB7IGVudW1lcmFibGUsIC4uLmQgfSA9IGRlc2NbcHJvcF07CgogICAgICB0cnkgewogICAgICAgIGRlbGV0ZSBvYmpbcHJvcF07CiAgICAgIH0gY2F0Y2goZSkge30KCiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIHByb3AsIHsgLi4uZCwgZW51bWVyYWJsZTogZmFsc2UgfSk7CiAgICB9CiAgfQogIC8vIG9iaiA9IGV4dGVuZChvYmosIHByb3BzLCBkZXNjID0+IChkZWxldGUgZGVzYy5jb25maWd1cmFibGUsIGRlbGV0ZSBkZXNjLmVudW1lcmFibGUpKTsKCiAgcmV0dXJuIG9iajsKfQpmdW5jdGlvbiBtZW1vaXplKGZuLCBjYWNoZSA9IG5ldyBNYXAoKSkgewogIHJldHVybiBkZWZpbmUoCiAgICBmdW5jdGlvbiBNZW1vaXplKG4sIC4uLnJlc3QpIHsKICAgICAgbGV0IHI7CiAgICAgIGlmKChyID0gY2FjaGUuZ2V0KG4pKSkgcmV0dXJuIHI7CiAgICAgIHIgPSBmbi5jYWxsKHRoaXMsIG4sIC4uLnJlc3QpOwogICAgICBjYWNoZS5zZXQobiwgcik7CiAgICAgIHJldHVybiByOwogICAgfSwKICAgIHsgY2FjaGUgfQogICk7Cn0KCndpbmRvdy5nZXRSZXBvcyA9ICgpID0+CiAgWy4uLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJyN1c2VyLXJlcG9zaXRvcmllcy1saXN0ID4gdWwgPiBsaSA+IGRpdi5jb2wtMTAuY29sLWxnLTkuZC1pbmxpbmUtYmxvY2snKV0ubWFwKGUgPT4gWwogICAgZS5xdWVyeVNlbGVjdG9yKCdhJykuaHJlZiwKICAgIGUucXVlcnlTZWxlY3RvcignaDMnKS5uZXh0RWxlbWVudFNpYmxpbmc/LnF1ZXJ5U2VsZWN0b3IoJ2EnKT8uaHJlZgogIF0pOwp3aW5kb3cucGFyc2VYTUwgPSB4bWxTdHIgPT4gewogIGNvbnN0IHBhcnNlciA9IG5ldyBET01QYXJzZXIoKTsKICByZXR1cm4gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyh4bWxTdHIsICd0ZXh0L2h0bWwnKTsKfTsKd2luZG93LmZldGNoVVJMID0gdXJsID0+CiAgZmV0Y2godXJsLCB7CiAgICBoZWFkZXJzOiB7CiAgICAgIGFjY2VwdDogJ3RleHQvaHRtbCwgYXBwbGljYXRpb24veGh0bWwreG1sJywKICAgICAgJ2FjY2VwdC1sYW5ndWFnZSc6ICdlbi1VUyxlbjtxPTAuOScsCiAgICAgICdjYWNoZS1jb250cm9sJzogJ25vLWNhY2hlJywKICAgICAgcHJhZ21hOiAnbm8tY2FjaGUnLAogICAgICAnc2VjLWNoLXVhJzogJyJDaHJvbWl1bSI7dj0iMTE4IiwgIkJyYXZlIjt2PSIxMTgiLCAiTm90PUE/QnJhbmQiO3Y9Ijk5IicsCiAgICAgICdzZWMtY2gtdWEtbW9iaWxlJzogJz8wJywKICAgICAgJ3NlYy1jaC11YS1wbGF0Zm9ybSc6ICciTGludXgiJywKICAgICAgJ3NlYy1mZXRjaC1kZXN0JzogJ2VtcHR5JywKICAgICAgJ3NlYy1mZXRjaC1tb2RlJzogJ2NvcnMnLAogICAgICAnc2VjLWZldGNoLXNpdGUnOiAnc2FtZS1vcmlnaW4nLAogICAgICAnc2VjLWdwYyc6ICcxJywKICAgICAgJ3R1cmJvLWZyYW1lJzogJ3VzZXItcHJvZmlsZS1mcmFtZScKICAgIH0sCiAgICByZWZlcnJlcjogd2luZG93LmxvY2F0aW9uLmhyZWYsCiAgICByZWZlcnJlclBvbGljeTogJ3N0cmljdC1vcmlnaW4td2hlbi1jcm9zcy1vcmlnaW4nLAogICAgbWV0aG9kOiAnR0VUJywKICAgIG1vZGU6ICdjb3JzJywKICAgIGNyZWRlbnRpYWxzOiAnaW5jbHVkZScKICB9KS50aGVuKHIgPT4gci50ZXh0KCkpOwoKd2luZG93LmdldFBhZ2UgPSAodXJsID0gd2luZG93LmhyZWYpID0+IHsKICBjb25zdCB7IHBhZ2UgfSA9IE9iamVjdC5mcm9tRW50cmllcyhbLi4ubmV3IFVSTCh1cmwpLnNlYXJjaFBhcmFtc10pOwogIHJldHVybiBwYWdlID8gK3BhZ2UgOiAxOwp9OwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ2hyZWYnLCB7CiAgZ2V0OiBtZW1vaXplKCgpID0+IHsKICAgIGNvbnN0IHVybCA9IG5ldyBVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpOwogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHVybCwgJ3F1ZXJ5JywgewogICAgICBnZXQ6IG1lbW9pemUoZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoWy4uLnRoaXMuc2VhcmNoUGFyYW1zXSk7CiAgICAgIH0pCiAgICB9KTsKICAgIHJldHVybiB1cmw7CiAgfSkKfSk7Cgp3aW5kb3cubWFrZVF1ZXJ5ID0gb2JqID0+IE9iamVjdC5lbnRyaWVzKG9iaikucmVkdWNlKChzLCBbbiwgdl0sIGkpID0+IHMgKyAoaSA9PSAwID8gJz8nIDogJyYnKSArIG4gKyAnPScgKyB2LCAnJyk7CndpbmRvdy5tYWtlVVJMID0gKGJhc2U9aHJlZiwgcXVlcnkgPSB7fSkgPT4gKGJhc2UrJycpLnJlcGxhY2UoL1w/LiovZywgJycpICsgbWFrZVF1ZXJ5KHF1ZXJ5KTsKd2luZG93Lm5leHRVUkwgPSAodT1ocmVmKSA9PiBtYWtlVVJMKHUsIHsgLi4udS5xdWVyeSwgcGFnZTogZ2V0UGFnZSAoKSsxIH0pOwoAAAAAAAAAAAoLAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAgsAAAAAAAACCwAAAAAAAAAAAAAAAPC/"
				],
				[
					565,
					1,
					"cut",
					null,
					"AQAAALoKAAAAAAAAugoAAAAAAABQAAAAd2luZG93Lm5leHRVUkwgPSAodSA9IGhyZWYpID0+IG1ha2VVUkwodSwgeyAuLi51LnF1ZXJ5LCBwYWdlOiBnZXRQYWdlKCkgKyAxIH0pOwo",
					"AQAAAAAAAAABAAAAugoAAAAAAAAKCwAAAAAAAAAAAAAAAPC/"
				],
				[
					566,
					2,
					"paste",
					null,
					"AgAAALoKAAAAAAAACgsAAAAAAAAAAAAACgsAAAAAAABaCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAugoAAAAAAAC6CgAAAAAAAAAAAAAAAPC/"
				],
				[
					571,
					1,
					"insert",
					{
						"characters": "fetch"
					},
					"BgAAABELAAAAAAAAEgsAAAAAAAAAAAAAEgsAAAAAAAASCwAAAAAAAAcAAABuZXh0VVJMEgsAAAAAAAATCwAAAAAAAAAAAAATCwAAAAAAABQLAAAAAAAAAAAAABQLAAAAAAAAFQsAAAAAAAAAAAAAFQsAAAAAAAAWCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEQsAAAAAAAAYCwAAAAAAAAAAAAAAAPC/"
				],
				[
					572,
					1,
					"insert",
					{
						"characters": "Next"
					},
					"BAAAABYLAAAAAAAAFwsAAAAAAAAAAAAAFwsAAAAAAAAYCwAAAAAAAAAAAAAYCwAAAAAAABkLAAAAAAAAAAAAABkLAAAAAAAAGgsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFgsAAAAAAAAWCwAAAAAAAAAAAAAAAPC/"
				],
				[
					576,
					1,
					"insert",
					{
						"characters": "fetchURL"
					},
					"CQAAACsLAAAAAAAALAsAAAAAAAAAAAAALAsAAAAAAAAsCwAAAAAAADAAAABtYWtlVVJMKHUsIHsgLi4udS5xdWVyeSwgcGFnZTogZ2V0UGFnZSgpICsgMSB9KTssCwAAAAAAAC0LAAAAAAAAAAAAAC0LAAAAAAAALgsAAAAAAAAAAAAALgsAAAAAAAAvCwAAAAAAAAAAAAAvCwAAAAAAADALAAAAAAAAAAAAADALAAAAAAAAMQsAAAAAAAAAAAAAMQsAAAAAAAAyCwAAAAAAAAAAAAAyCwAAAAAAADMLAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKwsAAAAAAABbCwAAAAAAAP///////+9/"
				],
				[
					577,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADMLAAAAAAAANQsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMwsAAAAAAAAzCwAAAAAAAAAAAAAAAPC/"
				],
				[
					578,
					1,
					"insert",
					{
						"characters": "nextURL"
					},
					"BwAAADQLAAAAAAAANQsAAAAAAAAAAAAANQsAAAAAAAA2CwAAAAAAAAAAAAA2CwAAAAAAADcLAAAAAAAAAAAAADcLAAAAAAAAOAsAAAAAAAAAAAAAOAsAAAAAAAA5CwAAAAAAAAAAAAA5CwAAAAAAADoLAAAAAAAAAAAAADoLAAAAAAAAOwsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANAsAAAAAAAA0CwAAAAAAAAAAAAAAAPC/"
				],
				[
					579,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADsLAAAAAAAAPQsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOwsAAAAAAAA7CwAAAAAAAAAAAAAAAPC/"
				],
				[
					580,
					1,
					"insert",
					{
						"characters": "u"
					},
					"AQAAADwLAAAAAAAAPQsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPAsAAAAAAAA8CwAAAAAAAAAAAAAAAPC/"
				],
				[
					582,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAD8LAAAAAAAAQAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPwsAAAAAAAA/CwAAAAAAAAAAAAAAAPC/"
				],
				[
					597,
					1,
					"cut",
					null,
					"AQAAAB0FAAAAAAAAHQUAAAAAAAAPAAAAbmV3IERPTVBhcnNlcigp",
					"AQAAAAAAAAABAAAAHQUAAAAAAAAsBQAAAAAAAAAAAAAAAPC/"
				],
				[
					598,
					1,
					"paste",
					null,
					"AQAAAB0FAAAAAAAALAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHQUAAAAAAAAdBQAAAAAAAAAAAAAAAPC/"
				],
				[
					603,
					1,
					"paste",
					null,
					"AgAAADcFAAAAAAAARgUAAAAAAAAAAAAARgUAAAAAAABGBQAAAAAAAAYAAABwYXJzZXI",
					"AQAAAAAAAAABAAAANwUAAAAAAAA9BQAAAAAAAAAAAAAAAPC/"
				],
				[
					606,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAAkFAAAAAAAACgUAAAAAAAAAAAAACgUAAAAAAAAKBQAAAAAAAC4AAAAgewogIGNvbnN0IHBhcnNlciA9IG5ldyBET01QYXJzZXIoKTsKICByZXR1cm4g",
					"AQAAAAAAAAABAAAACQUAAAAAAAA3BQAAAAAAAAAAAAAAAPC/"
				],
				[
					613,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAD8FAAAAAAAAQAUAAAAAAAAAAAAAQAUAAAAAAABABQAAAAAAAAMAAAAKfTs",
					"AQAAAAAAAAABAAAAPwUAAAAAAABCBQAAAAAAAAAAAAAAAPC/"
				],
				[
					647,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAbCwAALy8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBHaXRIdWIKLy8gQG5hbWVzcGFjZSAgICBodHRwczovL2dpdGh1Yi5jb20vCi8vIEB2ZXJzaW9uICAgICAgMC4xCi8vIEBkZXNjcmlwdGlvbiAgdHJ5IHRvIHRha2Ugb3ZlciB0aGUgd29ybGQhCi8vIEBhdXRob3IgICAgICAgWW91Ci8vIEBtYXRjaCAgICAgICAgaHR0cHM6Ly9naXRodWIuY29tLwovLyBAaWNvbiAgICAgICAgIGh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vczIvZmF2aWNvbnM/c3o9NjQmZG9tYWluPWdpdGh1Yi5jb20KLy8gQGdyYW50ICAgICAgICBub25lCi8vID09L1VzZXJTY3JpcHQ9PQoKZnVuY3Rpb24gZGVmaW5lKG9iaiwgLi4uYXJncykgewogIGZvcihsZXQgcHJvcHMgb2YgYXJncykgewogICAgY29uc3QgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHByb3BzKTsKCiAgICBmb3IobGV0IHByb3AgaW4gZGVzYykgewogICAgICBjb25zdCB7IGVudW1lcmFibGUsIC4uLmQgfSA9IGRlc2NbcHJvcF07CgogICAgICB0cnkgewogICAgICAgIGRlbGV0ZSBvYmpbcHJvcF07CiAgICAgIH0gY2F0Y2goZSkge30KCiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIHByb3AsIHsgLi4uZCwgZW51bWVyYWJsZTogZmFsc2UgfSk7CiAgICB9CiAgfQogIC8vIG9iaiA9IGV4dGVuZChvYmosIHByb3BzLCBkZXNjID0+IChkZWxldGUgZGVzYy5jb25maWd1cmFibGUsIGRlbGV0ZSBkZXNjLmVudW1lcmFibGUpKTsKCiAgcmV0dXJuIG9iajsKfQpmdW5jdGlvbiBtZW1vaXplKGZuLCBjYWNoZSA9IG5ldyBNYXAoKSkgewogIHJldHVybiBkZWZpbmUoCiAgICBmdW5jdGlvbiBNZW1vaXplKG4sIC4uLnJlc3QpIHsKICAgICAgbGV0IHI7CiAgICAgIGlmKChyID0gY2FjaGUuZ2V0KG4pKSkgcmV0dXJuIHI7CiAgICAgIHIgPSBmbi5jYWxsKHRoaXMsIG4sIC4uLnJlc3QpOwogICAgICBjYWNoZS5zZXQobiwgcik7CiAgICAgIHJldHVybiByOwogICAgfSwKICAgIHsgY2FjaGUgfQogICk7Cn0KCndpbmRvdy5nZXRSZXBvcyA9ICgpID0+CiAgWy4uLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJyN1c2VyLXJlcG9zaXRvcmllcy1saXN0ID4gdWwgPiBsaSA+IGRpdi5jb2wtMTAuY29sLWxnLTkuZC1pbmxpbmUtYmxvY2snKV0ubWFwKGUgPT4gWwogICAgZS5xdWVyeVNlbGVjdG9yKCdhJykuaHJlZiwKICAgIGUucXVlcnlTZWxlY3RvcignaDMnKS5uZXh0RWxlbWVudFNpYmxpbmc/LnF1ZXJ5U2VsZWN0b3IoJ2EnKT8uaHJlZgogIF0pOwp3aW5kb3cucGFyc2VYTUwgPSB4bWxTdHIgPT4gbmV3IERPTVBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyh4bWxTdHIsICd0ZXh0L2h0bWwnKTsgCndpbmRvdy5mZXRjaFVSTCA9IHVybCA9PgogIGZldGNoKHVybCwgewogICAgaGVhZGVyczogewogICAgICBhY2NlcHQ6ICd0ZXh0L2h0bWwsIGFwcGxpY2F0aW9uL3hodG1sK3htbCcsCiAgICAgICdhY2NlcHQtbGFuZ3VhZ2UnOiAnZW4tVVMsZW47cT0wLjknLAogICAgICAnY2FjaGUtY29udHJvbCc6ICduby1jYWNoZScsCiAgICAgIHByYWdtYTogJ25vLWNhY2hlJywKICAgICAgJ3NlYy1jaC11YSc6ICciQ2hyb21pdW0iO3Y9IjExOCIsICJCcmF2ZSI7dj0iMTE4IiwgIk5vdD1BP0JyYW5kIjt2PSI5OSInLAogICAgICAnc2VjLWNoLXVhLW1vYmlsZSc6ICc/MCcsCiAgICAgICdzZWMtY2gtdWEtcGxhdGZvcm0nOiAnIkxpbnV4IicsCiAgICAgICdzZWMtZmV0Y2gtZGVzdCc6ICdlbXB0eScsCiAgICAgICdzZWMtZmV0Y2gtbW9kZSc6ICdjb3JzJywKICAgICAgJ3NlYy1mZXRjaC1zaXRlJzogJ3NhbWUtb3JpZ2luJywKICAgICAgJ3NlYy1ncGMnOiAnMScsCiAgICAgICd0dXJiby1mcmFtZSc6ICd1c2VyLXByb2ZpbGUtZnJhbWUnCiAgICB9LAogICAgcmVmZXJyZXI6IHdpbmRvdy5sb2NhdGlvbi5ocmVmLAogICAgcmVmZXJyZXJQb2xpY3k6ICdzdHJpY3Qtb3JpZ2luLXdoZW4tY3Jvc3Mtb3JpZ2luJywKICAgIG1ldGhvZDogJ0dFVCcsCiAgICBtb2RlOiAnY29ycycsCiAgICBjcmVkZW50aWFsczogJ2luY2x1ZGUnCiAgfSkudGhlbihyID0+IHIudGV4dCgpKTsKCndpbmRvdy5nZXRQYWdlID0gKHVybCA9IHdpbmRvdy5ocmVmKSA9PiB7CiAgY29uc3QgeyBwYWdlIH0gPSBPYmplY3QuZnJvbUVudHJpZXMoWy4uLm5ldyBVUkwodXJsKS5zZWFyY2hQYXJhbXNdKTsKICByZXR1cm4gcGFnZSA/ICtwYWdlIDogMTsKfTsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3csICdocmVmJywgewogIGdldDogbWVtb2l6ZSgoKSA9PiB7CiAgICBjb25zdCB1cmwgPSBuZXcgVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh1cmwsICdxdWVyeScsIHsKICAgICAgZ2V0OiBtZW1vaXplKGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKFsuLi50aGlzLnNlYXJjaFBhcmFtc10pOwogICAgICB9KQogICAgfSk7CiAgICByZXR1cm4gdXJsOwogIH0pCn0pOwoKd2luZG93Lm1ha2VRdWVyeSA9IG9iaiA9PiBPYmplY3QuZW50cmllcyhvYmopLnJlZHVjZSgocywgW24sIHZdLCBpKSA9PiBzICsgKGkgPT0gMCA/ICc/JyA6ICcmJykgKyBuICsgJz0nICsgdiwgJycpOwp3aW5kb3cubWFrZVVSTCA9IChiYXNlID0gaHJlZiwgcXVlcnkgPSB7fSkgPT4gKGJhc2UgKyAnJykucmVwbGFjZSgvXD8uKi9nLCAnJykgKyBtYWtlUXVlcnkocXVlcnkpOwp3aW5kb3cubmV4dFVSTCA9ICh1ID0gaHJlZikgPT4gbWFrZVVSTCh1LCB7IC4uLnUucXVlcnksIHBhZ2U6IGdldFBhZ2UoKSArIDEgfSk7CndpbmRvdy5mZXRjaE5leHQgPSAodSA9IGhyZWYpID0+IGZldGNoVVJMKG5leHRVUkwodSkpOwoAAAAAAAAAABoLAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGwsAAAAAAAAbCwAAAAAAAAAAAAAAAPC/"
				],
				[
					654,
					1,
					"",
					null,
					"AgAAAAAAAAAAAAAALwsAAAAAAAAAAAAALwsAAAAAAAAvCwAAAAAAABoLAAAvLyA9PVVzZXJTY3JpcHQ9PQovLyBAbmFtZSAgICAgICAgIEdpdEh1YgovLyBAbmFtZXNwYWNlICAgIGh0dHBzOi8vZ2l0aHViLmNvbS8KLy8gQHZlcnNpb24gICAgICAwLjEKLy8gQGRlc2NyaXB0aW9uICB0cnkgdG8gdGFrZSBvdmVyIHRoZSB3b3JsZCEKLy8gQGF1dGhvciAgICAgICBZb3UKLy8gQG1hdGNoICAgICAgICBodHRwczovL2dpdGh1Yi5jb20vCi8vIEBpY29uICAgICAgICAgaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9zMi9mYXZpY29ucz9zej02NCZkb21haW49Z2l0aHViLmNvbQovLyBAZ3JhbnQgICAgICAgIG5vbmUKLy8gPT0vVXNlclNjcmlwdD09CgpmdW5jdGlvbiBkZWZpbmUob2JqLCAuLi5hcmdzKSB7CiAgZm9yKGxldCBwcm9wcyBvZiBhcmdzKSB7CiAgICBjb25zdCBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMocHJvcHMpOwoKICAgIGZvcihsZXQgcHJvcCBpbiBkZXNjKSB7CiAgICAgIGNvbnN0IHsgZW51bWVyYWJsZSwgLi4uZCB9ID0gZGVzY1twcm9wXTsKCiAgICAgIHRyeSB7CiAgICAgICAgZGVsZXRlIG9ialtwcm9wXTsKICAgICAgfSBjYXRjaChlKSB7fQoKICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgcHJvcCwgeyAuLi5kLCBlbnVtZXJhYmxlOiBmYWxzZSB9KTsKICAgIH0KICB9CiAgLy8gb2JqID0gZXh0ZW5kKG9iaiwgcHJvcHMsIGRlc2MgPT4gKGRlbGV0ZSBkZXNjLmNvbmZpZ3VyYWJsZSwgZGVsZXRlIGRlc2MuZW51bWVyYWJsZSkpOwoKICByZXR1cm4gb2JqOwp9CmZ1bmN0aW9uIG1lbW9pemUoZm4sIGNhY2hlID0gbmV3IE1hcCgpKSB7CiAgcmV0dXJuIGRlZmluZSgKICAgIGZ1bmN0aW9uIE1lbW9pemUobiwgLi4ucmVzdCkgewogICAgICBsZXQgcjsKICAgICAgaWYoKHIgPSBjYWNoZS5nZXQobikpKSByZXR1cm4gcjsKICAgICAgciA9IGZuLmNhbGwodGhpcywgbiwgLi4ucmVzdCk7CiAgICAgIGNhY2hlLnNldChuLCByKTsKICAgICAgcmV0dXJuIHI7CiAgICB9LAogICAgeyBjYWNoZSB9CiAgKTsKfQoKd2luZG93LmdldFJlcG9zID0gKCkgPT4KICBbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnI3VzZXItcmVwb3NpdG9yaWVzLWxpc3QgPiB1bCA+IGxpID4gZGl2LmNvbC0xMC5jb2wtbGctOS5kLWlubGluZS1ibG9jaycpXS5tYXAoZSA9PiBbCiAgICBlLnF1ZXJ5U2VsZWN0b3IoJ2EnKS5ocmVmLAogICAgZS5xdWVyeVNlbGVjdG9yKCdoMycpLm5leHRFbGVtZW50U2libGluZz8ucXVlcnlTZWxlY3RvcignYScpPy5ocmVmCiAgXSk7CndpbmRvdy5wYXJzZVhNTCA9IHhtbFN0ciA9PiBuZXcgRE9NUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKHhtbFN0ciwgJ3RleHQvaHRtbCcpOwp3aW5kb3cuZmV0Y2hVUkwgPSB1cmwgPT4KICBmZXRjaCh1cmwsIHsKICAgIGhlYWRlcnM6IHsKICAgICAgYWNjZXB0OiAndGV4dC9odG1sLCBhcHBsaWNhdGlvbi94aHRtbCt4bWwnLAogICAgICAnYWNjZXB0LWxhbmd1YWdlJzogJ2VuLVVTLGVuO3E9MC45JywKICAgICAgJ2NhY2hlLWNvbnRyb2wnOiAnbm8tY2FjaGUnLAogICAgICBwcmFnbWE6ICduby1jYWNoZScsCiAgICAgICdzZWMtY2gtdWEnOiAnIkNocm9taXVtIjt2PSIxMTgiLCAiQnJhdmUiO3Y9IjExOCIsICJOb3Q9QT9CcmFuZCI7dj0iOTkiJywKICAgICAgJ3NlYy1jaC11YS1tb2JpbGUnOiAnPzAnLAogICAgICAnc2VjLWNoLXVhLXBsYXRmb3JtJzogJyJMaW51eCInLAogICAgICAnc2VjLWZldGNoLWRlc3QnOiAnZW1wdHknLAogICAgICAnc2VjLWZldGNoLW1vZGUnOiAnY29ycycsCiAgICAgICdzZWMtZmV0Y2gtc2l0ZSc6ICdzYW1lLW9yaWdpbicsCiAgICAgICdzZWMtZ3BjJzogJzEnLAogICAgICAndHVyYm8tZnJhbWUnOiAndXNlci1wcm9maWxlLWZyYW1lJwogICAgfSwKICAgIHJlZmVycmVyOiB3aW5kb3cubG9jYXRpb24uaHJlZiwKICAgIHJlZmVycmVyUG9saWN5OiAnc3RyaWN0LW9yaWdpbi13aGVuLWNyb3NzLW9yaWdpbicsCiAgICBtZXRob2Q6ICdHRVQnLAogICAgbW9kZTogJ2NvcnMnLAogICAgY3JlZGVudGlhbHM6ICdpbmNsdWRlJwogIH0pLnRoZW4ociA9PiByLnRleHQoKSk7Cgp3aW5kb3cuZ2V0UGFnZSA9ICh1cmwgPSB3aW5kb3cuaHJlZikgPT4gewogIGNvbnN0IHsgcGFnZSB9ID0gT2JqZWN0LmZyb21FbnRyaWVzKFsuLi5uZXcgVVJMKHVybCkuc2VhcmNoUGFyYW1zXSk7CiAgcmV0dXJuIHBhZ2UgPyArcGFnZSA6IDE7Cn07CgpPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LCAnaHJlZicsIHsKICBnZXQ6IG1lbW9pemUoKCkgPT4gewogICAgY29uc3QgdXJsID0gbmV3IFVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodXJsLCAncXVlcnknLCB7CiAgICAgIGdldDogbWVtb2l6ZShmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhbLi4udGhpcy5zZWFyY2hQYXJhbXNdKTsKICAgICAgfSkKICAgIH0pOwogICAgcmV0dXJuIHVybDsKICB9KQp9KTsKCndpbmRvdy5tYWtlUXVlcnkgPSBvYmogPT4gT2JqZWN0LmVudHJpZXMob2JqKS5yZWR1Y2UoKHMsIFtuLCB2XSwgaSkgPT4gcyArIChpID09IDAgPyAnPycgOiAnJicpICsgbiArICc9JyArIHYsICcnKTsKd2luZG93Lm1ha2VVUkwgPSAoYmFzZSA9IGhyZWYsIHF1ZXJ5ID0ge30pID0+IChiYXNlICsgJycpLnJlcGxhY2UoL1w/LiovZywgJycpICsgbWFrZVF1ZXJ5KHF1ZXJ5KTsKd2luZG93Lm5leHRVUkwgPSAodSA9IGhyZWYpID0+IG1ha2VVUkwodSwgeyAuLi51LnF1ZXJ5LCBwYWdlOiBnZXRQYWdlKCkgKyAxIH0pOwp3aW5kb3cuZmV0Y2hOZXh0ID0gKHUgPSBocmVmKSA9PiBmZXRjaFVSTChuZXh0VVJMKHUpKTsK",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAaCwAAAAAAAAAAAAAAAPC/"
				],
				[
					661,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAJkJAAAAAAAAmgkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmQkAAAAAAACZCQAAAAAAAAAAAAAAAPC/"
				],
				[
					662,
					1,
					"insert",
					{
						"characters": " writable:true"
					},
					"DgAAAJoJAAAAAAAAmwkAAAAAAAAAAAAAmwkAAAAAAACcCQAAAAAAAAAAAACcCQAAAAAAAJ0JAAAAAAAAAAAAAJ0JAAAAAAAAngkAAAAAAAAAAAAAngkAAAAAAACfCQAAAAAAAAAAAACfCQAAAAAAAKAJAAAAAAAAAAAAAKAJAAAAAAAAoQkAAAAAAAAAAAAAoQkAAAAAAACiCQAAAAAAAAAAAACiCQAAAAAAAKMJAAAAAAAAAAAAAKMJAAAAAAAApAkAAAAAAAAAAAAApAkAAAAAAAClCQAAAAAAAAAAAAClCQAAAAAAAKYJAAAAAAAAAAAAAKYJAAAAAAAApwkAAAAAAAAAAAAApwkAAAAAAACoCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmgkAAAAAAACaCQAAAAAAAAAAAAAAAPC/"
				],
				[
					672,
					1,
					"cut",
					null,
					"AQAAAJkJAAAAAAAAmQkAAAAAAAAPAAAALCB3cml0YWJsZTp0cnVl",
					"AQAAAAAAAAABAAAAmQkAAAAAAACoCQAAAAAAAP///////+9/"
				],
				[
					673,
					2,
					"paste",
					null,
					"AgAAAJkJAAAAAAAAqAkAAAAAAAAAAAAAqAkAAAAAAAC3CQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmQkAAAAAAACZCQAAAAAAAAAAAAAAAPC/"
				],
				[
					678,
					1,
					"insert",
					{
						"characters": "configurable"
					},
					"DQAAAJsJAAAAAAAAnAkAAAAAAAAAAAAAnAkAAAAAAACcCQAAAAAAAAgAAAB3cml0YWJsZZwJAAAAAAAAnQkAAAAAAAAAAAAAnQkAAAAAAACeCQAAAAAAAAAAAACeCQAAAAAAAJ8JAAAAAAAAAAAAAJ8JAAAAAAAAoAkAAAAAAAAAAAAAoAkAAAAAAAChCQAAAAAAAAAAAAChCQAAAAAAAKIJAAAAAAAAAAAAAKIJAAAAAAAAowkAAAAAAAAAAAAAowkAAAAAAACkCQAAAAAAAAAAAACkCQAAAAAAAKUJAAAAAAAAAAAAAKUJAAAAAAAApgkAAAAAAAAAAAAApgkAAAAAAACnCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmwkAAAAAAACjCQAAAAAAAAAAAAAAAPC/"
				],
				[
					694,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABRCwAALy8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBHaXRIdWIKLy8gQG5hbWVzcGFjZSAgICBodHRwczovL2dpdGh1Yi5jb20vCi8vIEB2ZXJzaW9uICAgICAgMC4xCi8vIEBkZXNjcmlwdGlvbiAgdHJ5IHRvIHRha2Ugb3ZlciB0aGUgd29ybGQhCi8vIEBhdXRob3IgICAgICAgWW91Ci8vIEBtYXRjaCAgICAgICAgaHR0cHM6Ly9naXRodWIuY29tLwovLyBAaWNvbiAgICAgICAgIGh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vczIvZmF2aWNvbnM/c3o9NjQmZG9tYWluPWdpdGh1Yi5jb20KLy8gQGdyYW50ICAgICAgICBub25lCi8vID09L1VzZXJTY3JpcHQ9PQoKZnVuY3Rpb24gZGVmaW5lKG9iaiwgLi4uYXJncykgewogIGZvcihsZXQgcHJvcHMgb2YgYXJncykgewogICAgY29uc3QgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHByb3BzKTsKCiAgICBmb3IobGV0IHByb3AgaW4gZGVzYykgewogICAgICBjb25zdCB7IGVudW1lcmFibGUsIC4uLmQgfSA9IGRlc2NbcHJvcF07CgogICAgICB0cnkgewogICAgICAgIGRlbGV0ZSBvYmpbcHJvcF07CiAgICAgIH0gY2F0Y2goZSkge30KCiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIHByb3AsIHsgLi4uZCwgZW51bWVyYWJsZTogZmFsc2UgfSk7CiAgICB9CiAgfQogIC8vIG9iaiA9IGV4dGVuZChvYmosIHByb3BzLCBkZXNjID0+IChkZWxldGUgZGVzYy5jb25maWd1cmFibGUsIGRlbGV0ZSBkZXNjLmVudW1lcmFibGUpKTsKCiAgcmV0dXJuIG9iajsKfQpmdW5jdGlvbiBtZW1vaXplKGZuLCBjYWNoZSA9IG5ldyBNYXAoKSkgewogIHJldHVybiBkZWZpbmUoCiAgICBmdW5jdGlvbiBNZW1vaXplKG4sIC4uLnJlc3QpIHsKICAgICAgbGV0IHI7CiAgICAgIGlmKChyID0gY2FjaGUuZ2V0KG4pKSkgcmV0dXJuIHI7CiAgICAgIHIgPSBmbi5jYWxsKHRoaXMsIG4sIC4uLnJlc3QpOwogICAgICBjYWNoZS5zZXQobiwgcik7CiAgICAgIHJldHVybiByOwogICAgfSwKICAgIHsgY2FjaGUgfQogICk7Cn0KCndpbmRvdy5nZXRSZXBvcyA9ICgpID0+CiAgWy4uLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJyN1c2VyLXJlcG9zaXRvcmllcy1saXN0ID4gdWwgPiBsaSA+IGRpdi5jb2wtMTAuY29sLWxnLTkuZC1pbmxpbmUtYmxvY2snKV0ubWFwKGUgPT4gWwogICAgZS5xdWVyeVNlbGVjdG9yKCdhJykuaHJlZiwKICAgIGUucXVlcnlTZWxlY3RvcignaDMnKS5uZXh0RWxlbWVudFNpYmxpbmc/LnF1ZXJ5U2VsZWN0b3IoJ2EnKT8uaHJlZgogIF0pOwp3aW5kb3cucGFyc2VYTUwgPSB4bWxTdHIgPT4gbmV3IERPTVBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyh4bWxTdHIsICd0ZXh0L2h0bWwnKTsKd2luZG93LmZldGNoVVJMID0gdXJsID0+CiAgZmV0Y2godXJsLCB7CiAgICBoZWFkZXJzOiB7CiAgICAgIGFjY2VwdDogJ3RleHQvaHRtbCwgYXBwbGljYXRpb24veGh0bWwreG1sJywKICAgICAgJ2FjY2VwdC1sYW5ndWFnZSc6ICdlbi1VUyxlbjtxPTAuOScsCiAgICAgICdjYWNoZS1jb250cm9sJzogJ25vLWNhY2hlJywKICAgICAgcHJhZ21hOiAnbm8tY2FjaGUnLAogICAgICAnc2VjLWNoLXVhJzogJyJDaHJvbWl1bSI7dj0iMTE4IiwgIkJyYXZlIjt2PSIxMTgiLCAiTm90PUE/QnJhbmQiO3Y9Ijk5IicsCiAgICAgICdzZWMtY2gtdWEtbW9iaWxlJzogJz8wJywKICAgICAgJ3NlYy1jaC11YS1wbGF0Zm9ybSc6ICciTGludXgiJywKICAgICAgJ3NlYy1mZXRjaC1kZXN0JzogJ2VtcHR5JywKICAgICAgJ3NlYy1mZXRjaC1tb2RlJzogJ2NvcnMnLAogICAgICAnc2VjLWZldGNoLXNpdGUnOiAnc2FtZS1vcmlnaW4nLAogICAgICAnc2VjLWdwYyc6ICcxJywKICAgICAgJ3R1cmJvLWZyYW1lJzogJ3VzZXItcHJvZmlsZS1mcmFtZScKICAgIH0sCiAgICByZWZlcnJlcjogd2luZG93LmxvY2F0aW9uLmhyZWYsCiAgICByZWZlcnJlclBvbGljeTogJ3N0cmljdC1vcmlnaW4td2hlbi1jcm9zcy1vcmlnaW4nLAogICAgbWV0aG9kOiAnR0VUJywKICAgIG1vZGU6ICdjb3JzJywKICAgIGNyZWRlbnRpYWxzOiAnaW5jbHVkZScKICB9KS50aGVuKHIgPT4gci50ZXh0KCkpOwoKd2luZG93LmdldFBhZ2UgPSAodXJsID0gd2luZG93LmhyZWYpID0+IHsKICBjb25zdCB7IHBhZ2UgfSA9IE9iamVjdC5mcm9tRW50cmllcyhbLi4ubmV3IFVSTCh1cmwpLnNlYXJjaFBhcmFtc10pOwogIHJldHVybiBwYWdlID8gK3BhZ2UgOiAxOwp9OwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ2hyZWYnLCB7CiAgZ2V0OiBtZW1vaXplKCgpID0+IHsKICAgIGNvbnN0IHVybCA9IG5ldyBVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpOwogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHVybCwgJ3F1ZXJ5JywgewogICAgICBnZXQ6IG1lbW9pemUoZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoWy4uLnRoaXMuc2VhcmNoUGFyYW1zXSk7CiAgICAgIH0pLCBjb25maWd1cmFibGU6dHJ1ZSwgd3JpdGFibGU6dHJ1ZQogICAgfSk7CiAgICByZXR1cm4gdXJsOwogIH0pCn0pOwoKd2luZG93Lm1ha2VRdWVyeSA9IG9iaiA9PiBPYmplY3QuZW50cmllcyhvYmopLnJlZHVjZSgocywgW24sIHZdLCBpKSA9PiBzICsgKGkgPT0gMCA/ICc/JyA6ICcmJykgKyBuICsgJz0nICsgdiwgJycpOwp3aW5kb3cubWFrZVVSTCA9IChiYXNlID0gd2luZG93LmhyZWYsIHF1ZXJ5ID0ge30pID0+IChiYXNlICsgJycpLnJlcGxhY2UoL1w/LiovZywgJycpICsgbWFrZVF1ZXJ5KHF1ZXJ5KTsKd2luZG93Lm5leHRVUkwgPSAodSA9IHdpbmRvdy5ocmVmKSA9PiBtYWtlVVJMKHUsIHsgLi4udS5xdWVyeSwgcGFnZTogZ2V0UGFnZSgpICsgMSB9KTsKd2luZG93LmZldGNoTmV4dCA9ICh1ID0gd2luZG93LmhyZWYpID0+IGZldGNoVVJMKG5leHRVUkwodSkpOwoAAAAAAAAAAF8LAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArQkAAAAAAACtCQAAAAAAAAAAAAAAAPC/"
				],
				[
					710,
					1,
					"cut",
					null,
					"AQAAAJkJAAAAAAAAmQkAAAAAAAAwAAAALAogICAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICAgIHdyaXRhYmxlOiB0cnVl",
					"AQAAAAAAAAABAAAAmQkAAAAAAADJCQAAAAAAAAAAAAAAAPC/"
				],
				[
					713,
					1,
					"paste",
					null,
					"AQAAALYJAAAAAAAA5gkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtgkAAAAAAAC2CQAAAAAAAAAAAAAAAPC/"
				],
				[
					720,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABfCwAALy8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBHaXRIdWIKLy8gQG5hbWVzcGFjZSAgICBodHRwczovL2dpdGh1Yi5jb20vCi8vIEB2ZXJzaW9uICAgICAgMC4xCi8vIEBkZXNjcmlwdGlvbiAgdHJ5IHRvIHRha2Ugb3ZlciB0aGUgd29ybGQhCi8vIEBhdXRob3IgICAgICAgWW91Ci8vIEBtYXRjaCAgICAgICAgaHR0cHM6Ly9naXRodWIuY29tLwovLyBAaWNvbiAgICAgICAgIGh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vczIvZmF2aWNvbnM/c3o9NjQmZG9tYWluPWdpdGh1Yi5jb20KLy8gQGdyYW50ICAgICAgICBub25lCi8vID09L1VzZXJTY3JpcHQ9PQoKZnVuY3Rpb24gZGVmaW5lKG9iaiwgLi4uYXJncykgewogIGZvcihsZXQgcHJvcHMgb2YgYXJncykgewogICAgY29uc3QgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHByb3BzKTsKCiAgICBmb3IobGV0IHByb3AgaW4gZGVzYykgewogICAgICBjb25zdCB7IGVudW1lcmFibGUsIC4uLmQgfSA9IGRlc2NbcHJvcF07CgogICAgICB0cnkgewogICAgICAgIGRlbGV0ZSBvYmpbcHJvcF07CiAgICAgIH0gY2F0Y2goZSkge30KCiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIHByb3AsIHsgLi4uZCwgZW51bWVyYWJsZTogZmFsc2UgfSk7CiAgICB9CiAgfQogIC8vIG9iaiA9IGV4dGVuZChvYmosIHByb3BzLCBkZXNjID0+IChkZWxldGUgZGVzYy5jb25maWd1cmFibGUsIGRlbGV0ZSBkZXNjLmVudW1lcmFibGUpKTsKCiAgcmV0dXJuIG9iajsKfQpmdW5jdGlvbiBtZW1vaXplKGZuLCBjYWNoZSA9IG5ldyBNYXAoKSkgewogIHJldHVybiBkZWZpbmUoCiAgICBmdW5jdGlvbiBNZW1vaXplKG4sIC4uLnJlc3QpIHsKICAgICAgbGV0IHI7CiAgICAgIGlmKChyID0gY2FjaGUuZ2V0KG4pKSkgcmV0dXJuIHI7CiAgICAgIHIgPSBmbi5jYWxsKHRoaXMsIG4sIC4uLnJlc3QpOwogICAgICBjYWNoZS5zZXQobiwgcik7CiAgICAgIHJldHVybiByOwogICAgfSwKICAgIHsgY2FjaGUgfQogICk7Cn0KCndpbmRvdy5nZXRSZXBvcyA9ICgpID0+CiAgWy4uLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJyN1c2VyLXJlcG9zaXRvcmllcy1saXN0ID4gdWwgPiBsaSA+IGRpdi5jb2wtMTAuY29sLWxnLTkuZC1pbmxpbmUtYmxvY2snKV0ubWFwKGUgPT4gWwogICAgZS5xdWVyeVNlbGVjdG9yKCdhJykuaHJlZiwKICAgIGUucXVlcnlTZWxlY3RvcignaDMnKS5uZXh0RWxlbWVudFNpYmxpbmc/LnF1ZXJ5U2VsZWN0b3IoJ2EnKT8uaHJlZgogIF0pOwp3aW5kb3cucGFyc2VYTUwgPSB4bWxTdHIgPT4gbmV3IERPTVBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyh4bWxTdHIsICd0ZXh0L2h0bWwnKTsKd2luZG93LmZldGNoVVJMID0gdXJsID0+CiAgZmV0Y2godXJsLCB7CiAgICBoZWFkZXJzOiB7CiAgICAgIGFjY2VwdDogJ3RleHQvaHRtbCwgYXBwbGljYXRpb24veGh0bWwreG1sJywKICAgICAgJ2FjY2VwdC1sYW5ndWFnZSc6ICdlbi1VUyxlbjtxPTAuOScsCiAgICAgICdjYWNoZS1jb250cm9sJzogJ25vLWNhY2hlJywKICAgICAgcHJhZ21hOiAnbm8tY2FjaGUnLAogICAgICAnc2VjLWNoLXVhJzogJyJDaHJvbWl1bSI7dj0iMTE4IiwgIkJyYXZlIjt2PSIxMTgiLCAiTm90PUE/QnJhbmQiO3Y9Ijk5IicsCiAgICAgICdzZWMtY2gtdWEtbW9iaWxlJzogJz8wJywKICAgICAgJ3NlYy1jaC11YS1wbGF0Zm9ybSc6ICciTGludXgiJywKICAgICAgJ3NlYy1mZXRjaC1kZXN0JzogJ2VtcHR5JywKICAgICAgJ3NlYy1mZXRjaC1tb2RlJzogJ2NvcnMnLAogICAgICAnc2VjLWZldGNoLXNpdGUnOiAnc2FtZS1vcmlnaW4nLAogICAgICAnc2VjLWdwYyc6ICcxJywKICAgICAgJ3R1cmJvLWZyYW1lJzogJ3VzZXItcHJvZmlsZS1mcmFtZScKICAgIH0sCiAgICByZWZlcnJlcjogd2luZG93LmxvY2F0aW9uLmhyZWYsCiAgICByZWZlcnJlclBvbGljeTogJ3N0cmljdC1vcmlnaW4td2hlbi1jcm9zcy1vcmlnaW4nLAogICAgbWV0aG9kOiAnR0VUJywKICAgIG1vZGU6ICdjb3JzJywKICAgIGNyZWRlbnRpYWxzOiAnaW5jbHVkZScKICB9KS50aGVuKHIgPT4gci50ZXh0KCkpOwoKd2luZG93LmdldFBhZ2UgPSAodXJsID0gd2luZG93LmhyZWYpID0+IHsKICBjb25zdCB7IHBhZ2UgfSA9IE9iamVjdC5mcm9tRW50cmllcyhbLi4ubmV3IFVSTCh1cmwpLnNlYXJjaFBhcmFtc10pOwogIHJldHVybiBwYWdlID8gK3BhZ2UgOiAxOwp9OwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ2hyZWYnLCB7CiAgZ2V0OiBtZW1vaXplKCgpID0+IHsKICAgIGNvbnN0IHVybCA9IG5ldyBVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpOwogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHVybCwgJ3F1ZXJ5JywgewogICAgICBnZXQ6IG1lbW9pemUoZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoWy4uLnRoaXMuc2VhcmNoUGFyYW1zXSk7CiAgICAgIH0pCiAgICB9KTsKICAgIHJldHVybiB1cmw7CiAgfSksCiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgICAgd3JpdGFibGU6IHRydWUKfSk7Cgp3aW5kb3cubWFrZVF1ZXJ5ID0gb2JqID0+IE9iamVjdC5lbnRyaWVzKG9iaikucmVkdWNlKChzLCBbbiwgdl0sIGkpID0+IHMgKyAoaSA9PSAwID8gJz8nIDogJyYnKSArIG4gKyAnPScgKyB2LCAnJyk7CndpbmRvdy5tYWtlVVJMID0gKGJhc2UgPSB3aW5kb3cuaHJlZiwgcXVlcnkgPSB7fSkgPT4gKGJhc2UgKyAnJykucmVwbGFjZSgvXD8uKi9nLCAnJykgKyBtYWtlUXVlcnkocXVlcnkpOwp3aW5kb3cubmV4dFVSTCA9ICh1ID0gd2luZG93LmhyZWYpID0+IG1ha2VVUkwodSwgeyAuLi51LnF1ZXJ5LCBwYWdlOiBnZXRQYWdlKCkgKyAxIH0pOwp3aW5kb3cuZmV0Y2hOZXh0ID0gKHUgPSB3aW5kb3cuaHJlZikgPT4gZmV0Y2hVUkwobmV4dFVSTCh1KSk7CgAAAAAAAAAAVwsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5gkAAAAAAADmCQAAAAAAAAAAAAAAAPC/"
				],
				[
					728,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAMwJAAAAAAAAzQkAAAAAAAAAAAAAzQkAAAAAAADNCQAAAAAAABIAAAAsCiAgd3JpdGFibGU6IHRydWU",
					"AQAAAAAAAAABAAAAzAkAAAAAAADeCQAAAAAAAAAAAAAAAPC/"
				],
				[
					764,
					1,
					"insert",
					{
						"characters": "m,"
					},
					"AgAAANIKAAAAAAAA0woAAAAAAAAAAAAA0woAAAAAAADUCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0goAAAAAAADSCgAAAAAAAAAAAAAAAPC/"
				],
				[
					765,
					2,
					"left_delete",
					null,
					"AgAAANMKAAAAAAAA0woAAAAAAAABAAAALNIKAAAAAAAA0goAAAAAAAABAAAAbQ",
					"AQAAAAAAAAABAAAA1AoAAAAAAADUCgAAAAAAAAAAAAAAAPC/"
				],
				[
					766,
					1,
					"insert",
					{
						"characters": "m,"
					},
					"AgAAANIKAAAAAAAA0woAAAAAAAAAAAAA0woAAAAAAADUCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0goAAAAAAADSCgAAAAAAAAAAAAAAAPC/"
				],
				[
					767,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANQKAAAAAAAA1QoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1AoAAAAAAADUCgAAAAAAAAAAAAAAAPC/"
				],
				[
					768,
					3,
					"left_delete",
					null,
					"AwAAANQKAAAAAAAA1AoAAAAAAAABAAAAINMKAAAAAAAA0woAAAAAAAABAAAALNIKAAAAAAAA0goAAAAAAAABAAAAbQ",
					"AQAAAAAAAAABAAAA1QoAAAAAAADVCgAAAAAAAAAAAAAAAPC/"
				],
				[
					769,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAANIKAAAAAAAA0woAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0goAAAAAAADSCgAAAAAAAAAAAAAAAPC/"
				],
				[
					770,
					1,
					"insert",
					{
						"characters": " offset=1"
					},
					"CQAAANMKAAAAAAAA1AoAAAAAAAAAAAAA1AoAAAAAAADVCgAAAAAAAAAAAADVCgAAAAAAANYKAAAAAAAAAAAAANYKAAAAAAAA1woAAAAAAAAAAAAA1woAAAAAAADYCgAAAAAAAAAAAADYCgAAAAAAANkKAAAAAAAAAAAAANkKAAAAAAAA2goAAAAAAAAAAAAA2goAAAAAAADbCgAAAAAAAAAAAADbCgAAAAAAANwKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0woAAAAAAADTCgAAAAAAAAAAAAAAAPC/"
				],
				[
					773,
					1,
					"left_delete",
					null,
					"AQAAAAwLAAAAAAAADAsAAAAAAAABAAAAMQ",
					"AQAAAAAAAAABAAAADQsAAAAAAAANCwAAAAAAAAAAAAAAAPC/"
				],
				[
					774,
					1,
					"insert",
					{
						"characters": "offset"
					},
					"BgAAAAwLAAAAAAAADQsAAAAAAAAAAAAADQsAAAAAAAAOCwAAAAAAAAAAAAAOCwAAAAAAAA8LAAAAAAAAAAAAAA8LAAAAAAAAEAsAAAAAAAAAAAAAEAsAAAAAAAARCwAAAAAAAAAAAAARCwAAAAAAABILAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADAsAAAAAAAAMCwAAAAAAAAAAAAAAAPC/"
				],
				[
					779,
					1,
					"insert",
					{
						"characters": ",offset"
					},
					"BwAAAFELAAAAAAAAUgsAAAAAAAAAAAAAUgsAAAAAAABTCwAAAAAAAAAAAABTCwAAAAAAAFQLAAAAAAAAAAAAAFQLAAAAAAAAVQsAAAAAAAAAAAAAVQsAAAAAAABWCwAAAAAAAAAAAABWCwAAAAAAAFcLAAAAAAAAAAAAAFcLAAAAAAAAWAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUQsAAAAAAABRCwAAAAAAAAAAAAAAAPC/"
				],
				[
					787,
					1,
					"paste",
					null,
					"AQAAADoLAAAAAAAARAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOgsAAAAAAAA6CwAAAAAAAAAAAAAAAPC/"
				],
				[
					818,
					1,
					"paste",
					null,
					"AgAAAFwLAAAAAAAAdgsAAAAAAAAAAAAAdgsAAAAAAAB2CwAAAAAAAAYAAABvZmZzZXQ",
					"AQAAAAAAAAABAAAAXAsAAAAAAABiCwAAAAAAAAAAAAAAAPC/"
				],
				[
					832,
					1,
					"insert",
					{
						"characters": "window.offset"
					},
					"DQAAANsKAAAAAAAA3AoAAAAAAAAAAAAA3AoAAAAAAADdCgAAAAAAAAAAAADdCgAAAAAAAN4KAAAAAAAAAAAAAN4KAAAAAAAA3woAAAAAAAAAAAAA3woAAAAAAADgCgAAAAAAAAAAAADgCgAAAAAAAOEKAAAAAAAAAAAAAOEKAAAAAAAA4goAAAAAAAAAAAAA4goAAAAAAADjCgAAAAAAAAAAAADjCgAAAAAAAOQKAAAAAAAAAAAAAOQKAAAAAAAA5QoAAAAAAAAAAAAA5QoAAAAAAADmCgAAAAAAAAAAAADmCgAAAAAAAOcKAAAAAAAAAAAAAOcKAAAAAAAA6AoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2woAAAAAAADbCgAAAAAAAAAAAAAAAPC/"
				],
				[
					833,
					1,
					"insert",
					{
						"characters": " ??"
					},
					"AwAAAOgKAAAAAAAA6QoAAAAAAAAAAAAA6QoAAAAAAADqCgAAAAAAAAAAAADqCgAAAAAAAOsKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6AoAAAAAAADoCgAAAAAAAAAAAAAAAPC/"
				],
				[
					834,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOsKAAAAAAAA7AoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6woAAAAAAADrCgAAAAAAAAAAAAAAAPC/"
				],
				[
					837,
					1,
					"cut",
					null,
					"AQAAANsKAAAAAAAA2woAAAAAAAARAAAAd2luZG93Lm9mZnNldCA/PyA",
					"AQAAAAAAAAABAAAA7AoAAAAAAADbCgAAAAAAAAAAAAAAAPC/"
				],
				[
					842,
					1,
					"paste",
					null,
					"AQAAAEMLAAAAAAAAVAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQwsAAAAAAABDCwAAAAAAAAAAAAAAAPC/"
				],
				[
					854,
					1,
					"insert",
					{
						"characters": "+1"
					},
					"AgAAAIYLAAAAAAAAhwsAAAAAAAAAAAAAhwsAAAAAAACICwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhgsAAAAAAACGCwAAAAAAAAAAAAAAAPC/"
				],
				[
					861,
					1,
					"insert",
					{
						"characters": "-1"
					},
					"AgAAAIkLAAAAAAAAigsAAAAAAAAAAAAAigsAAAAAAACLCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiQsAAAAAAACJCwAAAAAAAAAAAAAAAPC/"
				],
				[
					866,
					1,
					"left_delete",
					null,
					"AQAAAG0LAAAAAAAAbQsAAAAAAAABAAAAKw",
					"AQAAAAAAAAABAAAAbgsAAAAAAABuCwAAAAAAAAAAAAAAAPC/"
				],
				[
					881,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACOCwAALy8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBHaXRIdWIKLy8gQG5hbWVzcGFjZSAgICBodHRwczovL2dpdGh1Yi5jb20vCi8vIEB2ZXJzaW9uICAgICAgMC4xCi8vIEBkZXNjcmlwdGlvbiAgdHJ5IHRvIHRha2Ugb3ZlciB0aGUgd29ybGQhCi8vIEBhdXRob3IgICAgICAgWW91Ci8vIEBtYXRjaCAgICAgICAgaHR0cHM6Ly9naXRodWIuY29tLwovLyBAaWNvbiAgICAgICAgIGh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vczIvZmF2aWNvbnM/c3o9NjQmZG9tYWluPWdpdGh1Yi5jb20KLy8gQGdyYW50ICAgICAgICBub25lCi8vID09L1VzZXJTY3JpcHQ9PQoKZnVuY3Rpb24gZGVmaW5lKG9iaiwgLi4uYXJncykgewogIGZvcihsZXQgcHJvcHMgb2YgYXJncykgewogICAgY29uc3QgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHByb3BzKTsKCiAgICBmb3IobGV0IHByb3AgaW4gZGVzYykgewogICAgICBjb25zdCB7IGVudW1lcmFibGUsIC4uLmQgfSA9IGRlc2NbcHJvcF07CgogICAgICB0cnkgewogICAgICAgIGRlbGV0ZSBvYmpbcHJvcF07CiAgICAgIH0gY2F0Y2goZSkge30KCiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIHByb3AsIHsgLi4uZCwgZW51bWVyYWJsZTogZmFsc2UgfSk7CiAgICB9CiAgfQogIC8vIG9iaiA9IGV4dGVuZChvYmosIHByb3BzLCBkZXNjID0+IChkZWxldGUgZGVzYy5jb25maWd1cmFibGUsIGRlbGV0ZSBkZXNjLmVudW1lcmFibGUpKTsKCiAgcmV0dXJuIG9iajsKfQpmdW5jdGlvbiBtZW1vaXplKGZuLCBjYWNoZSA9IG5ldyBNYXAoKSkgewogIHJldHVybiBkZWZpbmUoCiAgICBmdW5jdGlvbiBNZW1vaXplKG4sIC4uLnJlc3QpIHsKICAgICAgbGV0IHI7CiAgICAgIGlmKChyID0gY2FjaGUuZ2V0KG4pKSkgcmV0dXJuIHI7CiAgICAgIHIgPSBmbi5jYWxsKHRoaXMsIG4sIC4uLnJlc3QpOwogICAgICBjYWNoZS5zZXQobiwgcik7CiAgICAgIHJldHVybiByOwogICAgfSwKICAgIHsgY2FjaGUgfQogICk7Cn0KCndpbmRvdy5nZXRSZXBvcyA9ICgpID0+CiAgWy4uLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJyN1c2VyLXJlcG9zaXRvcmllcy1saXN0ID4gdWwgPiBsaSA+IGRpdi5jb2wtMTAuY29sLWxnLTkuZC1pbmxpbmUtYmxvY2snKV0ubWFwKGUgPT4gWwogICAgZS5xdWVyeVNlbGVjdG9yKCdhJykuaHJlZiwKICAgIGUucXVlcnlTZWxlY3RvcignaDMnKS5uZXh0RWxlbWVudFNpYmxpbmc/LnF1ZXJ5U2VsZWN0b3IoJ2EnKT8uaHJlZgogIF0pOwp3aW5kb3cucGFyc2VYTUwgPSB4bWxTdHIgPT4gbmV3IERPTVBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyh4bWxTdHIsICd0ZXh0L2h0bWwnKTsKd2luZG93LmZldGNoVVJMID0gdXJsID0+CiAgZmV0Y2godXJsLCB7CiAgICBoZWFkZXJzOiB7CiAgICAgIGFjY2VwdDogJ3RleHQvaHRtbCwgYXBwbGljYXRpb24veGh0bWwreG1sJywKICAgICAgJ2FjY2VwdC1sYW5ndWFnZSc6ICdlbi1VUyxlbjtxPTAuOScsCiAgICAgICdjYWNoZS1jb250cm9sJzogJ25vLWNhY2hlJywKICAgICAgcHJhZ21hOiAnbm8tY2FjaGUnLAogICAgICAnc2VjLWNoLXVhJzogJyJDaHJvbWl1bSI7dj0iMTE4IiwgIkJyYXZlIjt2PSIxMTgiLCAiTm90PUE/QnJhbmQiO3Y9Ijk5IicsCiAgICAgICdzZWMtY2gtdWEtbW9iaWxlJzogJz8wJywKICAgICAgJ3NlYy1jaC11YS1wbGF0Zm9ybSc6ICciTGludXgiJywKICAgICAgJ3NlYy1mZXRjaC1kZXN0JzogJ2VtcHR5JywKICAgICAgJ3NlYy1mZXRjaC1tb2RlJzogJ2NvcnMnLAogICAgICAnc2VjLWZldGNoLXNpdGUnOiAnc2FtZS1vcmlnaW4nLAogICAgICAnc2VjLWdwYyc6ICcxJywKICAgICAgJ3R1cmJvLWZyYW1lJzogJ3VzZXItcHJvZmlsZS1mcmFtZScKICAgIH0sCiAgICByZWZlcnJlcjogd2luZG93LmxvY2F0aW9uLmhyZWYsCiAgICByZWZlcnJlclBvbGljeTogJ3N0cmljdC1vcmlnaW4td2hlbi1jcm9zcy1vcmlnaW4nLAogICAgbWV0aG9kOiAnR0VUJywKICAgIG1vZGU6ICdjb3JzJywKICAgIGNyZWRlbnRpYWxzOiAnaW5jbHVkZScKICB9KS50aGVuKHIgPT4gci50ZXh0KCkpOwoKd2luZG93LmdldFBhZ2UgPSAodXJsID0gd2luZG93LmhyZWYpID0+IHsKICBjb25zdCB7IHBhZ2UgfSA9IE9iamVjdC5mcm9tRW50cmllcyhbLi4ubmV3IFVSTCh1cmwpLnNlYXJjaFBhcmFtc10pOwogIHJldHVybiBwYWdlID8gK3BhZ2UgOiAxOwp9OwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ2hyZWYnLCB7CiAgZ2V0OiBtZW1vaXplKCgpID0+IHsKICAgIGNvbnN0IHVybCA9IG5ldyBVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpOwogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHVybCwgJ3F1ZXJ5JywgewogICAgICBnZXQ6IG1lbW9pemUoZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoWy4uLnRoaXMuc2VhcmNoUGFyYW1zXSk7CiAgICAgIH0pCiAgICB9KTsKICAgIHJldHVybiB1cmw7CiAgfSksCiAgY29uZmlndXJhYmxlOiB0cnVlIAp9KTsKCndpbmRvdy5tYWtlUXVlcnkgPSBvYmogPT4gT2JqZWN0LmVudHJpZXMob2JqKS5yZWR1Y2UoKHMsIFtuLCB2XSwgaSkgPT4gcyArIChpID09IDAgPyAnPycgOiAnJicpICsgbiArICc9JyArIHYsICcnKTsKd2luZG93Lm1ha2VVUkwgPSAoYmFzZSA9IHdpbmRvdy5ocmVmLCBxdWVyeSA9IHt9KSA9PiAoYmFzZSArICcnKS5yZXBsYWNlKC9cPy4qL2csICcnKSArIG1ha2VRdWVyeShxdWVyeSk7CndpbmRvdy5uZXh0VVJMID0gKHUgPSB3aW5kb3cuaHJlZiwgb2Zmc2V0PTEpID0+IG1ha2VVUkwodSwgeyAuLi51LnF1ZXJ5LCBwYWdlOiBnZXRQYWdlKCkgKyBvZmZzZXQgfSk7CndpbmRvdy5mZXRjaE5leHQgPSAodSA9IHdpbmRvdy5ocmVmLCBvZmZzZXQ9d2luZG93Lm9mZnNldCA/PyAxKSA9PiBmZXRjaFVSTChuZXh0VVJMKHUsICh3aW5kb3cub2Zmc2V0ID0gb2Zmc2V0KzEpLTEpKTsKAAAAAAAAAACVCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjQsAAAAAAACNCwAAAAAAAP///////+9/"
				],
				[
					889,
					1,
					"",
					null,
					"AgAAAAAAAAAAAAAAuAsAAAAAAAAAAAAAuAsAAAAAAAC4CwAAAAAAAJULAAAvLyA9PVVzZXJTY3JpcHQ9PQovLyBAbmFtZSAgICAgICAgIEdpdEh1YgovLyBAbmFtZXNwYWNlICAgIGh0dHBzOi8vZ2l0aHViLmNvbS8KLy8gQHZlcnNpb24gICAgICAwLjEKLy8gQGRlc2NyaXB0aW9uICB0cnkgdG8gdGFrZSBvdmVyIHRoZSB3b3JsZCEKLy8gQGF1dGhvciAgICAgICBZb3UKLy8gQG1hdGNoICAgICAgICBodHRwczovL2dpdGh1Yi5jb20vCi8vIEBpY29uICAgICAgICAgaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9zMi9mYXZpY29ucz9zej02NCZkb21haW49Z2l0aHViLmNvbQovLyBAZ3JhbnQgICAgICAgIG5vbmUKLy8gPT0vVXNlclNjcmlwdD09CgpmdW5jdGlvbiBkZWZpbmUob2JqLCAuLi5hcmdzKSB7CiAgZm9yKGxldCBwcm9wcyBvZiBhcmdzKSB7CiAgICBjb25zdCBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMocHJvcHMpOwoKICAgIGZvcihsZXQgcHJvcCBpbiBkZXNjKSB7CiAgICAgIGNvbnN0IHsgZW51bWVyYWJsZSwgLi4uZCB9ID0gZGVzY1twcm9wXTsKCiAgICAgIHRyeSB7CiAgICAgICAgZGVsZXRlIG9ialtwcm9wXTsKICAgICAgfSBjYXRjaChlKSB7fQoKICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgcHJvcCwgeyAuLi5kLCBlbnVtZXJhYmxlOiBmYWxzZSB9KTsKICAgIH0KICB9CiAgLy8gb2JqID0gZXh0ZW5kKG9iaiwgcHJvcHMsIGRlc2MgPT4gKGRlbGV0ZSBkZXNjLmNvbmZpZ3VyYWJsZSwgZGVsZXRlIGRlc2MuZW51bWVyYWJsZSkpOwoKICByZXR1cm4gb2JqOwp9CmZ1bmN0aW9uIG1lbW9pemUoZm4sIGNhY2hlID0gbmV3IE1hcCgpKSB7CiAgcmV0dXJuIGRlZmluZSgKICAgIGZ1bmN0aW9uIE1lbW9pemUobiwgLi4ucmVzdCkgewogICAgICBsZXQgcjsKICAgICAgaWYoKHIgPSBjYWNoZS5nZXQobikpKSByZXR1cm4gcjsKICAgICAgciA9IGZuLmNhbGwodGhpcywgbiwgLi4ucmVzdCk7CiAgICAgIGNhY2hlLnNldChuLCByKTsKICAgICAgcmV0dXJuIHI7CiAgICB9LAogICAgeyBjYWNoZSB9CiAgKTsKfQoKd2luZG93LmdldFJlcG9zID0gKCkgPT4KICBbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnI3VzZXItcmVwb3NpdG9yaWVzLWxpc3QgPiB1bCA+IGxpID4gZGl2LmNvbC0xMC5jb2wtbGctOS5kLWlubGluZS1ibG9jaycpXS5tYXAoZSA9PiBbCiAgICBlLnF1ZXJ5U2VsZWN0b3IoJ2EnKS5ocmVmLAogICAgZS5xdWVyeVNlbGVjdG9yKCdoMycpLm5leHRFbGVtZW50U2libGluZz8ucXVlcnlTZWxlY3RvcignYScpPy5ocmVmCiAgXSk7CndpbmRvdy5wYXJzZVhNTCA9IHhtbFN0ciA9PiBuZXcgRE9NUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKHhtbFN0ciwgJ3RleHQvaHRtbCcpOwp3aW5kb3cuZmV0Y2hVUkwgPSB1cmwgPT4KICBmZXRjaCh1cmwsIHsKICAgIGhlYWRlcnM6IHsKICAgICAgYWNjZXB0OiAndGV4dC9odG1sLCBhcHBsaWNhdGlvbi94aHRtbCt4bWwnLAogICAgICAnYWNjZXB0LWxhbmd1YWdlJzogJ2VuLVVTLGVuO3E9MC45JywKICAgICAgJ2NhY2hlLWNvbnRyb2wnOiAnbm8tY2FjaGUnLAogICAgICBwcmFnbWE6ICduby1jYWNoZScsCiAgICAgICdzZWMtY2gtdWEnOiAnIkNocm9taXVtIjt2PSIxMTgiLCAiQnJhdmUiO3Y9IjExOCIsICJOb3Q9QT9CcmFuZCI7dj0iOTkiJywKICAgICAgJ3NlYy1jaC11YS1tb2JpbGUnOiAnPzAnLAogICAgICAnc2VjLWNoLXVhLXBsYXRmb3JtJzogJyJMaW51eCInLAogICAgICAnc2VjLWZldGNoLWRlc3QnOiAnZW1wdHknLAogICAgICAnc2VjLWZldGNoLW1vZGUnOiAnY29ycycsCiAgICAgICdzZWMtZmV0Y2gtc2l0ZSc6ICdzYW1lLW9yaWdpbicsCiAgICAgICdzZWMtZ3BjJzogJzEnLAogICAgICAndHVyYm8tZnJhbWUnOiAndXNlci1wcm9maWxlLWZyYW1lJwogICAgfSwKICAgIHJlZmVycmVyOiB3aW5kb3cubG9jYXRpb24uaHJlZiwKICAgIHJlZmVycmVyUG9saWN5OiAnc3RyaWN0LW9yaWdpbi13aGVuLWNyb3NzLW9yaWdpbicsCiAgICBtZXRob2Q6ICdHRVQnLAogICAgbW9kZTogJ2NvcnMnLAogICAgY3JlZGVudGlhbHM6ICdpbmNsdWRlJwogIH0pLnRoZW4ociA9PiByLnRleHQoKSk7Cgp3aW5kb3cuZ2V0UGFnZSA9ICh1cmwgPSB3aW5kb3cuaHJlZikgPT4gewogIGNvbnN0IHsgcGFnZSB9ID0gT2JqZWN0LmZyb21FbnRyaWVzKFsuLi5uZXcgVVJMKHVybCkuc2VhcmNoUGFyYW1zXSk7CiAgcmV0dXJuIHBhZ2UgPyArcGFnZSA6IDE7Cn07CgpPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LCAnaHJlZicsIHsKICBnZXQ6IG1lbW9pemUoKCkgPT4gewogICAgY29uc3QgdXJsID0gbmV3IFVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodXJsLCAncXVlcnknLCB7CiAgICAgIGdldDogbWVtb2l6ZShmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhbLi4udGhpcy5zZWFyY2hQYXJhbXNdKTsKICAgICAgfSkKICAgIH0pOwogICAgcmV0dXJuIHVybDsKICB9KSwKICBjb25maWd1cmFibGU6IHRydWUKfSk7Cgp3aW5kb3cubWFrZVF1ZXJ5ID0gb2JqID0+IE9iamVjdC5lbnRyaWVzKG9iaikucmVkdWNlKChzLCBbbiwgdl0sIGkpID0+IHMgKyAoaSA9PSAwID8gJz8nIDogJyYnKSArIG4gKyAnPScgKyB2LCAnJyk7CndpbmRvdy5tYWtlVVJMID0gKGJhc2UgPSB3aW5kb3cuaHJlZiwgcXVlcnkgPSB7fSkgPT4gKGJhc2UgKyAnJykucmVwbGFjZSgvXD8uKi9nLCAnJykgKyBtYWtlUXVlcnkocXVlcnkpOwp3aW5kb3cubmV4dFVSTCA9ICh1ID0gd2luZG93LmhyZWYsIG9mZnNldCA9IDEpID0+IG1ha2VVUkwodSwgeyAuLi51LnF1ZXJ5LCBwYWdlOiBnZXRQYWdlKCkgKyBvZmZzZXQgfSk7CndpbmRvdy5mZXRjaE5leHQgPSAodSA9IHdpbmRvdy5ocmVmLCBvZmZzZXQgPSB3aW5kb3cub2Zmc2V0ID8/IDEpID0+IGZldGNoVVJMKG5leHRVUkwodSwgKHdpbmRvdy5vZmZzZXQgPSBvZmZzZXQgKyAxKSAtIDEpKTsK",
					"AQAAAAAAAAABAAAAAAAAAAAAAACVCwAAAAAAAAAAAAAAAPC/"
				],
				[
					909,
					1,
					"insert",
					{
						"characters": "{"
					},
					"AQAAAHILAAAAAAAAcwsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcgsAAAAAAAByCwAAAAAAAAAAAAAAAPC/"
				],
				[
					910,
					1,
					"insert",
					{
						"characters": "\nelt"
					},
					"BQAAAHMLAAAAAAAAdAsAAAAAAAAAAAAAdAsAAAAAAAB4CwAAAAAAAAAAAAB4CwAAAAAAAHkLAAAAAAAAAAAAAHkLAAAAAAAAegsAAAAAAAAAAAAAegsAAAAAAAB7CwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcwsAAAAAAABzCwAAAAAAAAAAAAAAAPC/"
				],
				[
					911,
					3,
					"left_delete",
					null,
					"AwAAAHoLAAAAAAAAegsAAAAAAAABAAAAdHkLAAAAAAAAeQsAAAAAAAABAAAAbHgLAAAAAAAAeAsAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAewsAAAAAAAB7CwAAAAAAAAAAAAAAAPC/"
				],
				[
					912,
					1,
					"insert",
					{
						"characters": "const"
					},
					"BQAAAHgLAAAAAAAAeQsAAAAAAAAAAAAAeQsAAAAAAAB6CwAAAAAAAAAAAAB6CwAAAAAAAHsLAAAAAAAAAAAAAHsLAAAAAAAAfAsAAAAAAAAAAAAAfAsAAAAAAAB9CwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeAsAAAAAAAB4CwAAAAAAAAAAAAAAAPC/"
				],
				[
					913,
					1,
					"insert",
					{
						"characters": " t="
					},
					"AwAAAH0LAAAAAAAAfgsAAAAAAAAAAAAAfgsAAAAAAAB/CwAAAAAAAAAAAAB/CwAAAAAAAIALAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfQsAAAAAAAB9CwAAAAAAAAAAAAAAAPC/"
				],
				[
					915,
					1,
					"insert",
					{
						"characters": "\n\nconst"
					},
					"CgAAAMULAAAAAAAAxgsAAAAAAAAAAAAAxgsAAAAAAADKCwAAAAAAAAAAAADKCwAAAAAAAMsLAAAAAAAAAAAAAMsLAAAAAAAAzwsAAAAAAAAAAAAAxgsAAAAAAADGCwAAAAAAAAQAAAAgICAgywsAAAAAAADMCwAAAAAAAAAAAADMCwAAAAAAAM0LAAAAAAAAAAAAAM0LAAAAAAAAzgsAAAAAAAAAAAAAzgsAAAAAAADPCwAAAAAAAAAAAADPCwAAAAAAANALAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxQsAAAAAAADFCwAAAAAAAP///////+9/"
				],
				[
					916,
					1,
					"insert",
					{
						"characters": " d=parseXML"
					},
					"CwAAANALAAAAAAAA0QsAAAAAAAAAAAAA0QsAAAAAAADSCwAAAAAAAAAAAADSCwAAAAAAANMLAAAAAAAAAAAAANMLAAAAAAAA1AsAAAAAAAAAAAAA1AsAAAAAAADVCwAAAAAAAAAAAADVCwAAAAAAANYLAAAAAAAAAAAAANYLAAAAAAAA1wsAAAAAAAAAAAAA1wsAAAAAAADYCwAAAAAAAAAAAADYCwAAAAAAANkLAAAAAAAAAAAAANkLAAAAAAAA2gsAAAAAAAAAAAAA2gsAAAAAAADbCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0AsAAAAAAADQCwAAAAAAAAAAAAAAAPC/"
				],
				[
					917,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAANsLAAAAAAAA3QsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2wsAAAAAAADbCwAAAAAAAAAAAAAAAPC/"
				],
				[
					918,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAANwLAAAAAAAA3QsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3AsAAAAAAADcCwAAAAAAAAAAAAAAAPC/"
				],
				[
					920,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAN4LAAAAAAAA3wsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3gsAAAAAAADeCwAAAAAAAAAAAAAAAPC/"
				],
				[
					921,
					1,
					"insert",
					{
						"characters": "\n\nreturn"
					},
					"CwAAAN8LAAAAAAAA4AsAAAAAAAAAAAAA4AsAAAAAAADkCwAAAAAAAAAAAADkCwAAAAAAAOULAAAAAAAAAAAAAOULAAAAAAAA6QsAAAAAAAAAAAAA4AsAAAAAAADgCwAAAAAAAAQAAAAgICAg5QsAAAAAAADmCwAAAAAAAAAAAADmCwAAAAAAAOcLAAAAAAAAAAAAAOcLAAAAAAAA6AsAAAAAAAAAAAAA6AsAAAAAAADpCwAAAAAAAAAAAADpCwAAAAAAAOoLAAAAAAAAAAAAAOoLAAAAAAAA6wsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3wsAAAAAAADfCwAAAAAAAAAAAAAAAPC/"
				],
				[
					922,
					1,
					"insert",
					{
						"characters": " t;"
					},
					"AwAAAOsLAAAAAAAA7AsAAAAAAAAAAAAA7AsAAAAAAADtCwAAAAAAAAAAAADtCwAAAAAAAO4LAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6wsAAAAAAADrCwAAAAAAAAAAAAAAAPC/"
				],
				[
					923,
					1,
					"insert",
					{
						"characters": "\n};"
					},
					"BgAAAO4LAAAAAAAA7wsAAAAAAAAAAAAA7wsAAAAAAADzCwAAAAAAAAAAAADzCwAAAAAAAPQLAAAAAAAAAAAAAO8LAAAAAAAA7wsAAAAAAAAEAAAAICAgIO8LAAAAAAAA7wsAAAAAAAAAAAAA8AsAAAAAAADxCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7gsAAAAAAADuCwAAAAAAAAAAAAAAAPC/"
				],
				[
					928,
					1,
					"",
					null,
					"AQAAAOALAAAAAAAAHAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4AsAAAAAAADgCwAAAAAAAAAAAAAAADRA"
				],
				[
					929,
					1,
					"insert",
					{
						"characters": ";M"
					},
					"AgAAABwMAAAAAAAAHQwAAAAAAAAAAAAAHQwAAAAAAAAeDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHAwAAAAAAAAcDAAAAAAAAAAAAAAAAPC/"
				],
				[
					930,
					1,
					"left_delete",
					null,
					"AQAAAB0MAAAAAAAAHQwAAAAAAAABAAAATQ",
					"AQAAAAAAAAABAAAAHgwAAAAAAAAeDAAAAAAAAAAAAAAAAPC/"
				],
				[
					935,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAvDAAALy8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBHaXRIdWIKLy8gQG5hbWVzcGFjZSAgICBodHRwczovL2dpdGh1Yi5jb20vCi8vIEB2ZXJzaW9uICAgICAgMC4xCi8vIEBkZXNjcmlwdGlvbiAgdHJ5IHRvIHRha2Ugb3ZlciB0aGUgd29ybGQhCi8vIEBhdXRob3IgICAgICAgWW91Ci8vIEBtYXRjaCAgICAgICAgaHR0cHM6Ly9naXRodWIuY29tLwovLyBAaWNvbiAgICAgICAgIGh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vczIvZmF2aWNvbnM/c3o9NjQmZG9tYWluPWdpdGh1Yi5jb20KLy8gQGdyYW50ICAgICAgICBub25lCi8vID09L1VzZXJTY3JpcHQ9PQoKZnVuY3Rpb24gZGVmaW5lKG9iaiwgLi4uYXJncykgewogIGZvcihsZXQgcHJvcHMgb2YgYXJncykgewogICAgY29uc3QgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHByb3BzKTsKCiAgICBmb3IobGV0IHByb3AgaW4gZGVzYykgewogICAgICBjb25zdCB7IGVudW1lcmFibGUsIC4uLmQgfSA9IGRlc2NbcHJvcF07CgogICAgICB0cnkgewogICAgICAgIGRlbGV0ZSBvYmpbcHJvcF07CiAgICAgIH0gY2F0Y2goZSkge30KCiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIHByb3AsIHsgLi4uZCwgZW51bWVyYWJsZTogZmFsc2UgfSk7CiAgICB9CiAgfQogIC8vIG9iaiA9IGV4dGVuZChvYmosIHByb3BzLCBkZXNjID0+IChkZWxldGUgZGVzYy5jb25maWd1cmFibGUsIGRlbGV0ZSBkZXNjLmVudW1lcmFibGUpKTsKCiAgcmV0dXJuIG9iajsKfQpmdW5jdGlvbiBtZW1vaXplKGZuLCBjYWNoZSA9IG5ldyBNYXAoKSkgewogIHJldHVybiBkZWZpbmUoCiAgICBmdW5jdGlvbiBNZW1vaXplKG4sIC4uLnJlc3QpIHsKICAgICAgbGV0IHI7CiAgICAgIGlmKChyID0gY2FjaGUuZ2V0KG4pKSkgcmV0dXJuIHI7CiAgICAgIHIgPSBmbi5jYWxsKHRoaXMsIG4sIC4uLnJlc3QpOwogICAgICBjYWNoZS5zZXQobiwgcik7CiAgICAgIHJldHVybiByOwogICAgfSwKICAgIHsgY2FjaGUgfQogICk7Cn0KCndpbmRvdy5nZXRSZXBvcyA9ICgpID0+CiAgWy4uLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJyN1c2VyLXJlcG9zaXRvcmllcy1saXN0ID4gdWwgPiBsaSA+IGRpdi5jb2wtMTAuY29sLWxnLTkuZC1pbmxpbmUtYmxvY2snKV0ubWFwKGUgPT4gWwogICAgZS5xdWVyeVNlbGVjdG9yKCdhJykuaHJlZiwKICAgIGUucXVlcnlTZWxlY3RvcignaDMnKS5uZXh0RWxlbWVudFNpYmxpbmc/LnF1ZXJ5U2VsZWN0b3IoJ2EnKT8uaHJlZgogIF0pOwp3aW5kb3cucGFyc2VYTUwgPSB4bWxTdHIgPT4gbmV3IERPTVBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyh4bWxTdHIsICd0ZXh0L2h0bWwnKTsKd2luZG93LmZldGNoVVJMID0gdXJsID0+CiAgZmV0Y2godXJsLCB7CiAgICBoZWFkZXJzOiB7CiAgICAgIGFjY2VwdDogJ3RleHQvaHRtbCwgYXBwbGljYXRpb24veGh0bWwreG1sJywKICAgICAgJ2FjY2VwdC1sYW5ndWFnZSc6ICdlbi1VUyxlbjtxPTAuOScsCiAgICAgICdjYWNoZS1jb250cm9sJzogJ25vLWNhY2hlJywKICAgICAgcHJhZ21hOiAnbm8tY2FjaGUnLAogICAgICAnc2VjLWNoLXVhJzogJyJDaHJvbWl1bSI7dj0iMTE4IiwgIkJyYXZlIjt2PSIxMTgiLCAiTm90PUE/QnJhbmQiO3Y9Ijk5IicsCiAgICAgICdzZWMtY2gtdWEtbW9iaWxlJzogJz8wJywKICAgICAgJ3NlYy1jaC11YS1wbGF0Zm9ybSc6ICciTGludXgiJywKICAgICAgJ3NlYy1mZXRjaC1kZXN0JzogJ2VtcHR5JywKICAgICAgJ3NlYy1mZXRjaC1tb2RlJzogJ2NvcnMnLAogICAgICAnc2VjLWZldGNoLXNpdGUnOiAnc2FtZS1vcmlnaW4nLAogICAgICAnc2VjLWdwYyc6ICcxJywKICAgICAgJ3R1cmJvLWZyYW1lJzogJ3VzZXItcHJvZmlsZS1mcmFtZScKICAgIH0sCiAgICByZWZlcnJlcjogd2luZG93LmxvY2F0aW9uLmhyZWYsCiAgICByZWZlcnJlclBvbGljeTogJ3N0cmljdC1vcmlnaW4td2hlbi1jcm9zcy1vcmlnaW4nLAogICAgbWV0aG9kOiAnR0VUJywKICAgIG1vZGU6ICdjb3JzJywKICAgIGNyZWRlbnRpYWxzOiAnaW5jbHVkZScKICB9KS50aGVuKHIgPT4gci50ZXh0KCkpOwoKd2luZG93LmdldFBhZ2UgPSAodXJsID0gd2luZG93LmhyZWYpID0+IHsKICBjb25zdCB7IHBhZ2UgfSA9IE9iamVjdC5mcm9tRW50cmllcyhbLi4ubmV3IFVSTCh1cmwpLnNlYXJjaFBhcmFtc10pOwogIHJldHVybiBwYWdlID8gK3BhZ2UgOiAxOwp9OwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ2hyZWYnLCB7CiAgZ2V0OiBtZW1vaXplKCgpID0+IHsKICAgIGNvbnN0IHVybCA9IG5ldyBVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpOwogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHVybCwgJ3F1ZXJ5JywgewogICAgICBnZXQ6IG1lbW9pemUoZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoWy4uLnRoaXMuc2VhcmNoUGFyYW1zXSk7CiAgICAgIH0pCiAgICB9KTsKICAgIHJldHVybiB1cmw7CiAgfSksCiAgY29uZmlndXJhYmxlOiB0cnVlCn0pOwoKd2luZG93Lm1ha2VRdWVyeSA9IG9iaiA9PiBPYmplY3QuZW50cmllcyhvYmopLnJlZHVjZSgocywgW24sIHZdLCBpKSA9PiBzICsgKGkgPT0gMCA/ICc/JyA6ICcmJykgKyBuICsgJz0nICsgdiwgJycpOwp3aW5kb3cubWFrZVVSTCA9IChiYXNlID0gd2luZG93LmhyZWYsIHF1ZXJ5ID0ge30pID0+IChiYXNlICsgJycpLnJlcGxhY2UoL1w/LiovZywgJycpICsgd2luZG93Lm1ha2VRdWVyeShxdWVyeSk7CndpbmRvdy5uZXh0VVJMID0gKHUgPSB3aW5kb3cuaHJlZiwgb2Zmc2V0ID0gMSkgPT4gd2luZG93Lm1ha2VVUkwodSwgeyAuLi51LnF1ZXJ5LCBwYWdlOiB3aW5kb3cuZ2V0UGFnZSgpICsgb2Zmc2V0IH0pOwp3aW5kb3cuZmV0Y2hOZXh0ID0gKHUgPSB3aW5kb3cuaHJlZiwgb2Zmc2V0ID0gd2luZG93Lm9mZnNldCA/PyAxKSA9PiB7CiAgICBjb25zdCB0PXdpbmRvdy5mZXRjaFVSTCh3aW5kb3cubmV4dFVSTCh1LCAod2luZG93Lm9mZnNldCA9IG9mZnNldCArIDEpIC0gMSkpOwoKICAgIGNvbnN0IGQ9cGFyc2VYTUwodCk7CmRvY3VtZW50LmJvZHkuaW5uZXJIVE1MICs9IGQucXVlcnlTZWxlY3RvcignYm9keScpLmlubmVySFRNTDsKICAgIHJldHVybiB0Owp9OwoAAAAAAAAAAC8MAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHQwAAAAAAAAdDAAAAAAAAAAAAAAAAPC/"
				],
				[
					954,
					1,
					"insert",
					{
						"characters": "await"
					},
					"BQAAAIALAAAAAAAAgQsAAAAAAAAAAAAAgQsAAAAAAACCCwAAAAAAAAAAAACCCwAAAAAAAIMLAAAAAAAAAAAAAIMLAAAAAAAAhAsAAAAAAAAAAAAAhAsAAAAAAACFCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgAsAAAAAAACACwAAAAAAAAAAAAAAAPC/"
				],
				[
					955,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIULAAAAAAAAhgsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhQsAAAAAAACFCwAAAAAAAAAAAAAAAPC/"
				],
				[
					958,
					1,
					"insert",
					{
						"characters": " async"
					},
					"BgAAAD8LAAAAAAAAQAsAAAAAAAAAAAAAQAsAAAAAAABBCwAAAAAAAAAAAABBCwAAAAAAAEILAAAAAAAAAAAAAEILAAAAAAAAQwsAAAAAAAAAAAAAQwsAAAAAAABECwAAAAAAAAAAAABECwAAAAAAAEULAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPwsAAAAAAAA/CwAAAAAAAAAAAAAAAPC/"
				],
				[
					979,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAPMDAAAAAAAA9AMAAAAAAAAAAAAA9AMAAAAAAAD1AwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8wMAAAAAAADzAwAAAAAAAAAAAAAAACRA"
				],
				[
					981,
					1,
					"insert",
					{
						"characters": "function"
					},
					"CAAAAPQDAAAAAAAA9QMAAAAAAAAAAAAA9QMAAAAAAAD2AwAAAAAAAAAAAAD2AwAAAAAAAPcDAAAAAAAAAAAAAPcDAAAAAAAA+AMAAAAAAAAAAAAA+AMAAAAAAAD5AwAAAAAAAAAAAAD5AwAAAAAAAPoDAAAAAAAAAAAAAPoDAAAAAAAA+wMAAAAAAAAAAAAA+wMAAAAAAAD8AwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9AMAAAAAAAD0AwAAAAAAAAAAAAAAAAAA"
				],
				[
					982,
					1,
					"insert",
					{
						"characters": " a"
					},
					"AgAAAPwDAAAAAAAA/QMAAAAAAAAAAAAA/QMAAAAAAAD+AwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/AMAAAAAAAD8AwAAAAAAAAAAAAAAAPC/"
				],
				[
					983,
					1,
					"left_delete",
					null,
					"AQAAAP0DAAAAAAAA/QMAAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAA/gMAAAAAAAD+AwAAAAAAAAAAAAAAAPC/"
				],
				[
					984,
					1,
					"insert",
					{
						"characters": "q"
					},
					"AQAAAP0DAAAAAAAA/gMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/QMAAAAAAAD9AwAAAAAAAAAAAAAAAPC/"
				],
				[
					985,
					1,
					"left_delete",
					null,
					"AQAAAP0DAAAAAAAA/QMAAAAAAAABAAAAcQ",
					"AQAAAAAAAAABAAAA/gMAAAAAAAD+AwAAAAAAAAAAAAAAAPC/"
				],
				[
					986,
					1,
					"insert",
					{
						"characters": "qa"
					},
					"AgAAAP0DAAAAAAAA/gMAAAAAAAAAAAAA/gMAAAAAAAD/AwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/QMAAAAAAAD9AwAAAAAAAAAAAAAAAPC/"
				],
				[
					987,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAP8DAAAAAAAAAQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/wMAAAAAAAD/AwAAAAAAAAAAAAAAAPC/"
				],
				[
					988,
					1,
					"insert",
					{
						"characters": "q"
					},
					"AQAAAAAEAAAAAAAAAQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAQAAAAAAAAABAAAAAAAAAAAAAAAAPC/"
				],
				[
					989,
					1,
					"left_delete",
					null,
					"AQAAAAAEAAAAAAAAAAQAAAAAAAABAAAAcQ",
					"AQAAAAAAAAABAAAAAQQAAAAAAAABBAAAAAAAAAAAAAAAAPC/"
				],
				[
					990,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAAAEAAAAAAAAAQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAQAAAAAAAAABAAAAAAAAAAAAAAAAPC/"
				],
				[
					992,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAIEAAAAAAAAAwQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAgQAAAAAAAACBAAAAAAAAAAAAAAAAPC/"
				],
				[
					993,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAAMEAAAAAAAABQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAwQAAAAAAAADBAAAAAAAAAAAAAAAAPC/"
				],
				[
					994,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAAAQEAAAAAAAABQQAAAAAAAAAAAAABQQAAAAAAAAGBAAAAAAAAAAAAAAFBAAAAAAAAAkEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABAQAAAAAAAAEBAAAAAAAAAAAAAAAAPC/"
				],
				[
					995,
					1,
					"insert",
					{
						"characters": "return"
					},
					"BgAAAAkEAAAAAAAACgQAAAAAAAAAAAAACgQAAAAAAAALBAAAAAAAAAAAAAALBAAAAAAAAAwEAAAAAAAAAAAAAAwEAAAAAAAADQQAAAAAAAAAAAAADQQAAAAAAAAOBAAAAAAAAAAAAAAOBAAAAAAAAA8EAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACQQAAAAAAAAJBAAAAAAAAAAAAAAAAPC/"
				],
				[
					996,
					1,
					"insert",
					{
						"characters": " document.queryS"
					},
					"EAAAAA8EAAAAAAAAEAQAAAAAAAAAAAAAEAQAAAAAAAARBAAAAAAAAAAAAAARBAAAAAAAABIEAAAAAAAAAAAAABIEAAAAAAAAEwQAAAAAAAAAAAAAEwQAAAAAAAAUBAAAAAAAAAAAAAAUBAAAAAAAABUEAAAAAAAAAAAAABUEAAAAAAAAFgQAAAAAAAAAAAAAFgQAAAAAAAAXBAAAAAAAAAAAAAAXBAAAAAAAABgEAAAAAAAAAAAAABgEAAAAAAAAGQQAAAAAAAAAAAAAGQQAAAAAAAAaBAAAAAAAAAAAAAAaBAAAAAAAABsEAAAAAAAAAAAAABsEAAAAAAAAHAQAAAAAAAAAAAAAHAQAAAAAAAAdBAAAAAAAAAAAAAAdBAAAAAAAAB4EAAAAAAAAAAAAAB4EAAAAAAAAHwQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADwQAAAAAAAAPBAAAAAAAAAAAAAAAAPC/"
				],
				[
					997,
					1,
					"insert_completion",
					{
						"completion": "querySelectorAll",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "querySelectorAll"
					},
					"AgAAABkEAAAAAAAAGQQAAAAAAAAGAAAAcXVlcnlTGQQAAAAAAAApBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHwQAAAAAAAAfBAAAAAAAAAAAAAAAAPC/"
				],
				[
					998,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAACkEAAAAAAAAKwQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKQQAAAAAAAApBAAAAAAAAAAAAAAAAPC/"
				],
				[
					999,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAACoEAAAAAAAAKwQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKgQAAAAAAAAqBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1001,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAACwEAAAAAAAALQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALAQAAAAAAAAsBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1005,
					1,
					"insert",
					{
						"characters": "[..."
					},
					"BAAAABAEAAAAAAAAEQQAAAAAAAAAAAAAEQQAAAAAAAASBAAAAAAAAAAAAAASBAAAAAAAABMEAAAAAAAAAAAAABMEAAAAAAAAFAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEAQAAAAAAAAQBAAAAAAAAAAAAAAAgFtA"
				],
				[
					1008,
					1,
					"insert",
					{
						"characters": "]"
					},
					"AQAAADAEAAAAAAAAMQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMAQAAAAAAAAwBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1015,
					1,
					"cut",
					null,
					"AQAAAPQDAAAAAAAA9AMAAAAAAABCAAAAZnVuY3Rpb24gcWEocykgewogICAgcmV0dXJuIFsuLi5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHMpXTsKfQoK",
					"AQAAAAAAAAABAAAA9AMAAAAAAAA2BAAAAAAAAAAAAAAAAAAA"
				],
				[
					1016,
					2,
					"paste",
					null,
					"AgAAAPQDAAAAAAAANgQAAAAAAAAAAAAANgQAAAAAAAB4BAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9AMAAAAAAAD0AwAAAAAAAAAAAAAAAPC/"
				],
				[
					1020,
					1,
					"left_delete",
					null,
					"AQAAAP4DAAAAAAAA/gMAAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAA/wMAAAAAAAD/AwAAAAAAAAAAAAAAgFtA"
				],
				[
					1023,
					4,
					"right_delete",
					null,
					"BAAAAA8EAAAAAAAADwQAAAAAAAABAAAAWw8EAAAAAAAADwQAAAAAAAABAAAALg8EAAAAAAAADwQAAAAAAAABAAAALg8EAAAAAAAADwQAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAADwQAAAAAAAAPBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1025,
					3,
					"right_delete",
					null,
					"AwAAACUEAAAAAAAAJQQAAAAAAAABAAAAQSUEAAAAAAAAJQQAAAAAAAABAAAAbCUEAAAAAAAAJQQAAAAAAAABAAAAbA",
					"AQAAAAAAAAABAAAAJQQAAAAAAAAlBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1027,
					2,
					"left_delete",
					null,
					"AgAAACkEAAAAAAAAKQQAAAAAAAABAAAAOygEAAAAAAAAKAQAAAAAAAABAAAAXQ",
					"AQAAAAAAAAABAAAAKgQAAAAAAAAqBAAAAAAAAP///////+9/"
				],
				[
					1028,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAACgEAAAAAAAAKQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKAQAAAAAAAAoBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1035,
					5,
					"left_delete",
					null,
					"BQAAAI0EAAAAAAAAjQQAAAAAAAAYAAAAZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsjAQAAAAAAACMBAAAAAAAAAEAAAAuiwQAAAAAAACLBAAAAAAAAAEAAAAuigQAAAAAAACKBAAAAAAAAAEAAAAuiQQAAAAAAACJBAAAAAAAAAEAAABb",
					"AQAAAAAAAAABAAAAjQQAAAAAAAClBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1036,
					1,
					"insert",
					{
						"characters": "qa"
					},
					"AgAAAIkEAAAAAAAAigQAAAAAAAAAAAAAigQAAAAAAACLBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiQQAAAAAAACJBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1037,
					1,
					"right_delete",
					null,
					"AQAAAIsEAAAAAAAAiwQAAAAAAAABAAAAbA",
					"AQAAAAAAAAABAAAAiwQAAAAAAACLBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1040,
					1,
					"left_delete",
					null,
					"AQAAANUEAAAAAAAA1QQAAAAAAAABAAAAXQ",
					"AQAAAAAAAAABAAAA1gQAAAAAAADWBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1050,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAAEAAAAAAAAAQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAQAAAAAAAAABAAAAAAAAAAAAAAAAPC/"
				],
				[
					1051,
					1,
					"left_delete",
					null,
					"AQAAAAAEAAAAAAAAAAQAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAAQQAAAAAAAABBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1052,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAAAEAAAAAAAAAQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAQAAAAAAAAABAAAAAAAAAAAAAAAAPC/"
				],
				[
					1053,
					1,
					"insert",
					{
						"characters": " e=document"
					},
					"CwAAAAEEAAAAAAAAAgQAAAAAAAAAAAAAAgQAAAAAAAADBAAAAAAAAAAAAAADBAAAAAAAAAQEAAAAAAAAAAAAAAQEAAAAAAAABQQAAAAAAAAAAAAABQQAAAAAAAAGBAAAAAAAAAAAAAAGBAAAAAAAAAcEAAAAAAAAAAAAAAcEAAAAAAAACAQAAAAAAAAAAAAACAQAAAAAAAAJBAAAAAAAAAAAAAAJBAAAAAAAAAoEAAAAAAAAAAAAAAoEAAAAAAAACwQAAAAAAAAAAAAACwQAAAAAAAAMBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAQQAAAAAAAABBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1055,
					7,
					"right_delete",
					null,
					"BwAAABwEAAAAAAAAHAQAAAAAAAABAAAAbxwEAAAAAAAAHAQAAAAAAAABAAAAYxwEAAAAAAAAHAQAAAAAAAABAAAAdRwEAAAAAAAAHAQAAAAAAAABAAAAbRwEAAAAAAAAHAQAAAAAAAABAAAAZRwEAAAAAAAAHAQAAAAAAAABAAAAbhwEAAAAAAAAHAQAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAAHAQAAAAAAAAcBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1056,
					1,
					"left_delete",
					null,
					"AQAAABsEAAAAAAAAGwQAAAAAAAABAAAAZA",
					"AQAAAAAAAAABAAAAHAQAAAAAAAAcBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1057,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAABsEAAAAAAAAHAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGwQAAAAAAAAbBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1060,
					1,
					"insert",
					{
						"characters": ",e=document"
					},
					"CwAAAD8EAAAAAAAAQAQAAAAAAAAAAAAAQAQAAAAAAABBBAAAAAAAAAAAAABBBAAAAAAAAEIEAAAAAAAAAAAAAEIEAAAAAAAAQwQAAAAAAAAAAAAAQwQAAAAAAABEBAAAAAAAAAAAAABEBAAAAAAAAEUEAAAAAAAAAAAAAEUEAAAAAAAARgQAAAAAAAAAAAAARgQAAAAAAABHBAAAAAAAAAAAAABHBAAAAAAAAEgEAAAAAAAAAAAAAEgEAAAAAAAASQQAAAAAAAAAAAAASQQAAAAAAABKBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPwQAAAAAAAA/BAAAAAAAAAAAAAAAQGBA"
				],
				[
					1063,
					8,
					"left_delete",
					null,
					"CAAAAGQEAAAAAAAAZAQAAAAAAAABAAAAdGMEAAAAAAAAYwQAAAAAAAABAAAAbmIEAAAAAAAAYgQAAAAAAAABAAAAZWEEAAAAAAAAYQQAAAAAAAABAAAAbWAEAAAAAAAAYAQAAAAAAAABAAAAdV8EAAAAAAAAXwQAAAAAAAABAAAAY14EAAAAAAAAXgQAAAAAAAABAAAAb10EAAAAAAAAXQQAAAAAAAABAAAAZA",
					"AQAAAAAAAAABAAAAZQQAAAAAAABlBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1064,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAF0EAAAAAAAAXgQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXQQAAAAAAABdBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1073,
					1,
					"insert",
					{
						"characters": "q"
					},
					"AgAAAO4EAAAAAAAA7wQAAAAAAAAAAAAA7wQAAAAAAADvBAAAAAAAAA8AAABlLnF1ZXJ5U2VsZWN0b3I",
					"AQAAAAAAAAABAAAA/QQAAAAAAADuBAAAAAAAAAAAAAAAAERA"
				],
				[
					1075,
					1,
					"insert",
					{
						"characters": ",e"
					},
					"AgAAAPMEAAAAAAAA9AQAAAAAAAAAAAAA9AQAAAAAAAD1BAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8wQAAAAAAADzBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1081,
					1,
					"insert",
					{
						"characters": "q"
					},
					"AQAAAAEFAAAAAAAAAgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAQUAAAAAAAABBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1082,
					15,
					"right_delete",
					null,
					"DwAAAAIFAAAAAAAAAgUAAAAAAAABAAAAZQIFAAAAAAAAAgUAAAAAAAABAAAALgIFAAAAAAAAAgUAAAAAAAABAAAAcQIFAAAAAAAAAgUAAAAAAAABAAAAdQIFAAAAAAAAAgUAAAAAAAABAAAAZQIFAAAAAAAAAgUAAAAAAAABAAAAcgIFAAAAAAAAAgUAAAAAAAABAAAAeQIFAAAAAAAAAgUAAAAAAAABAAAAUwIFAAAAAAAAAgUAAAAAAAABAAAAZQIFAAAAAAAAAgUAAAAAAAABAAAAbAIFAAAAAAAAAgUAAAAAAAABAAAAZQIFAAAAAAAAAgUAAAAAAAABAAAAYwIFAAAAAAAAAgUAAAAAAAABAAAAdAIFAAAAAAAAAgUAAAAAAAABAAAAbwIFAAAAAAAAAgUAAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAAAgUAAAAAAAACBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1084,
					1,
					"insert",
					{
						"characters": ",e"
					},
					"AgAAAAcFAAAAAAAACAUAAAAAAAAAAAAACAUAAAAAAAAJBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABwUAAAAAAAAHBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1107,
					1,
					"insert",
					{
						"characters": "q"
					},
					"AgAAAFkMAAAAAAAAWgwAAAAAAAAAAAAAWgwAAAAAAABaDAAAAAAAAA8AAABkLnF1ZXJ5U2VsZWN0b3I",
					"AQAAAAAAAAABAAAAWQwAAAAAAABoDAAAAAAAAAAAAAAAAPC/"
				],
				[
					1109,
					1,
					"insert",
					{
						"characters": ",d"
					},
					"AgAAAGEMAAAAAAAAYgwAAAAAAAAAAAAAYgwAAAAAAABjDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYQwAAAAAAABhDAAAAAAAAAAAAAAAAPC/"
				],
				[
					1117,
					1,
					"left_delete",
					null,
					"AQAAACEMAAAAAAAAIQwAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAIgwAAAAAAAAiDAAAAAAAAAAAAAAAAAAA"
				],
				[
					1124,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB+DAAALy8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBHaXRIdWIKLy8gQG5hbWVzcGFjZSAgICBodHRwczovL2dpdGh1Yi5jb20vCi8vIEB2ZXJzaW9uICAgICAgMC4xCi8vIEBkZXNjcmlwdGlvbiAgdHJ5IHRvIHRha2Ugb3ZlciB0aGUgd29ybGQhCi8vIEBhdXRob3IgICAgICAgWW91Ci8vIEBtYXRjaCAgICAgICAgaHR0cHM6Ly9naXRodWIuY29tLwovLyBAaWNvbiAgICAgICAgIGh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vczIvZmF2aWNvbnM/c3o9NjQmZG9tYWluPWdpdGh1Yi5jb20KLy8gQGdyYW50ICAgICAgICBub25lCi8vID09L1VzZXJTY3JpcHQ9PQoKZnVuY3Rpb24gZGVmaW5lKG9iaiwgLi4uYXJncykgewogIGZvcihsZXQgcHJvcHMgb2YgYXJncykgewogICAgY29uc3QgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHByb3BzKTsKCiAgICBmb3IobGV0IHByb3AgaW4gZGVzYykgewogICAgICBjb25zdCB7IGVudW1lcmFibGUsIC4uLmQgfSA9IGRlc2NbcHJvcF07CgogICAgICB0cnkgewogICAgICAgIGRlbGV0ZSBvYmpbcHJvcF07CiAgICAgIH0gY2F0Y2goZSkge30KCiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIHByb3AsIHsgLi4uZCwgZW51bWVyYWJsZTogZmFsc2UgfSk7CiAgICB9CiAgfQogIC8vIG9iaiA9IGV4dGVuZChvYmosIHByb3BzLCBkZXNjID0+IChkZWxldGUgZGVzYy5jb25maWd1cmFibGUsIGRlbGV0ZSBkZXNjLmVudW1lcmFibGUpKTsKCiAgcmV0dXJuIG9iajsKfQpmdW5jdGlvbiBtZW1vaXplKGZuLCBjYWNoZSA9IG5ldyBNYXAoKSkgewogIHJldHVybiBkZWZpbmUoCiAgICBmdW5jdGlvbiBNZW1vaXplKG4sIC4uLnJlc3QpIHsKICAgICAgbGV0IHI7CiAgICAgIGlmKChyID0gY2FjaGUuZ2V0KG4pKSkgcmV0dXJuIHI7CiAgICAgIHIgPSBmbi5jYWxsKHRoaXMsIG4sIC4uLnJlc3QpOwogICAgICBjYWNoZS5zZXQobiwgcik7CiAgICAgIHJldHVybiByOwogICAgfSwKICAgIHsgY2FjaGUgfQogICk7Cn0KCmZ1bmN0aW9uIHEocywgZT1kb2N1bWVudCkgewogICAgcmV0dXJuIGUucXVlcnlTZWxlY3RvcihzKTsKfQoKZnVuY3Rpb24gcWEocyxlPWRvY3VtZW50KSB7CiAgICByZXR1cm4gWy4uLmUucXVlcnlTZWxlY3RvckFsbChzKV07Cn0KCndpbmRvdy5nZXRSZXBvcyA9ICgpID0+CiAgcWEoJyN1c2VyLXJlcG9zaXRvcmllcy1saXN0ID4gdWwgPiBsaSA+IGRpdi5jb2wtMTAuY29sLWxnLTkuZC1pbmxpbmUtYmxvY2snKS5tYXAoZSA9PiBbCiAgICBxKCdhJyxlKS5ocmVmLAogICAgcSgnaDMnLGUpLm5leHRFbGVtZW50U2libGluZz8ucXVlcnlTZWxlY3RvcignYScpPy5ocmVmCiAgXSk7CndpbmRvdy5wYXJzZVhNTCA9IHhtbFN0ciA9PiBuZXcgRE9NUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKHhtbFN0ciwgJ3RleHQvaHRtbCcpOwp3aW5kb3cuZmV0Y2hVUkwgPSB1cmwgPT4KICBmZXRjaCh1cmwsIHsKICAgIGhlYWRlcnM6IHsKICAgICAgYWNjZXB0OiAndGV4dC9odG1sLCBhcHBsaWNhdGlvbi94aHRtbCt4bWwnLAogICAgICAnYWNjZXB0LWxhbmd1YWdlJzogJ2VuLVVTLGVuO3E9MC45JywKICAgICAgJ2NhY2hlLWNvbnRyb2wnOiAnbm8tY2FjaGUnLAogICAgICBwcmFnbWE6ICduby1jYWNoZScsCiAgICAgICdzZWMtY2gtdWEnOiAnIkNocm9taXVtIjt2PSIxMTgiLCAiQnJhdmUiO3Y9IjExOCIsICJOb3Q9QT9CcmFuZCI7dj0iOTkiJywKICAgICAgJ3NlYy1jaC11YS1tb2JpbGUnOiAnPzAnLAogICAgICAnc2VjLWNoLXVhLXBsYXRmb3JtJzogJyJMaW51eCInLAogICAgICAnc2VjLWZldGNoLWRlc3QnOiAnZW1wdHknLAogICAgICAnc2VjLWZldGNoLW1vZGUnOiAnY29ycycsCiAgICAgICdzZWMtZmV0Y2gtc2l0ZSc6ICdzYW1lLW9yaWdpbicsCiAgICAgICdzZWMtZ3BjJzogJzEnLAogICAgICAndHVyYm8tZnJhbWUnOiAndXNlci1wcm9maWxlLWZyYW1lJwogICAgfSwKICAgIHJlZmVycmVyOiB3aW5kb3cubG9jYXRpb24uaHJlZiwKICAgIHJlZmVycmVyUG9saWN5OiAnc3RyaWN0LW9yaWdpbi13aGVuLWNyb3NzLW9yaWdpbicsCiAgICBtZXRob2Q6ICdHRVQnLAogICAgbW9kZTogJ2NvcnMnLAogICAgY3JlZGVudGlhbHM6ICdpbmNsdWRlJwogIH0pLnRoZW4ociA9PiByLnRleHQoKSk7Cgp3aW5kb3cuZ2V0UGFnZSA9ICh1cmwgPSB3aW5kb3cuaHJlZikgPT4gewogIGNvbnN0IHsgcGFnZSB9ID0gT2JqZWN0LmZyb21FbnRyaWVzKFsuLi5uZXcgVVJMKHVybCkuc2VhcmNoUGFyYW1zXSk7CiAgcmV0dXJuIHBhZ2UgPyArcGFnZSA6IDE7Cn07CgpPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LCAnaHJlZicsIHsKICBnZXQ6IG1lbW9pemUoKCkgPT4gewogICAgY29uc3QgdXJsID0gbmV3IFVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodXJsLCAncXVlcnknLCB7CiAgICAgIGdldDogbWVtb2l6ZShmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhbLi4udGhpcy5zZWFyY2hQYXJhbXNdKTsKICAgICAgfSkKICAgIH0pOwogICAgcmV0dXJuIHVybDsKICB9KSwKICBjb25maWd1cmFibGU6IHRydWUKfSk7Cgp3aW5kb3cubWFrZVF1ZXJ5ID0gb2JqID0+IE9iamVjdC5lbnRyaWVzKG9iaikucmVkdWNlKChzLCBbbiwgdl0sIGkpID0+IHMgKyAoaSA9PSAwID8gJz8nIDogJyYnKSArIG4gKyAnPScgKyB2LCAnJyk7CndpbmRvdy5tYWtlVVJMID0gKGJhc2UgPSB3aW5kb3cuaHJlZiwgcXVlcnkgPSB7fSkgPT4gKGJhc2UgKyAnJykucmVwbGFjZSgvXD8uKi9nLCAnJykgKyB3aW5kb3cubWFrZVF1ZXJ5KHF1ZXJ5KTsKd2luZG93Lm5leHRVUkwgPSAodSA9IHdpbmRvdy5ocmVmLCBvZmZzZXQgPSAxKSA9PiB3aW5kb3cubWFrZVVSTCh1LCB7IC4uLnUucXVlcnksIHBhZ2U6IHdpbmRvdy5nZXRQYWdlKCkgKyBvZmZzZXQgfSk7CndpbmRvdy5mZXRjaE5leHQgPSBhc3luYyAodSA9IHdpbmRvdy5ocmVmLCBvZmZzZXQgPSB3aW5kb3cub2Zmc2V0ID8/IDEpID0+IHsKICBjb25zdCB0ID0gYXdhaXQgd2luZG93LmZldGNoVVJMKHdpbmRvdy5uZXh0VVJMKHUsICh3aW5kb3cub2Zmc2V0ID0gb2Zmc2V0ICsgMSkgLSAxKSk7CiAgY29uc3QgZCA9IHBhcnNlWE1MKHQpOwogIGRvY3VtZW50LmJvZHkuaW5uZXJIVE1MICs9IHEoJ2JvZHknLGQpLmlubmVySFRNTDsKICByZXR1cm4gdDsKfTsKAAAAAAAAAAB0DAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIQwAAAAAAAAhDAAAAAAAAAAAAAAAAPC/"
				],
				[
					1131,
					1,
					"",
					null,
					"AgAAAAAAAAAAAAAAewwAAAAAAAAAAAAAewwAAAAAAAB7DAAAAAAAAHQMAAAvLyA9PVVzZXJTY3JpcHQ9PQovLyBAbmFtZSAgICAgICAgIEdpdEh1YgovLyBAbmFtZXNwYWNlICAgIGh0dHBzOi8vZ2l0aHViLmNvbS8KLy8gQHZlcnNpb24gICAgICAwLjEKLy8gQGRlc2NyaXB0aW9uICB0cnkgdG8gdGFrZSBvdmVyIHRoZSB3b3JsZCEKLy8gQGF1dGhvciAgICAgICBZb3UKLy8gQG1hdGNoICAgICAgICBodHRwczovL2dpdGh1Yi5jb20vCi8vIEBpY29uICAgICAgICAgaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9zMi9mYXZpY29ucz9zej02NCZkb21haW49Z2l0aHViLmNvbQovLyBAZ3JhbnQgICAgICAgIG5vbmUKLy8gPT0vVXNlclNjcmlwdD09CgpmdW5jdGlvbiBkZWZpbmUob2JqLCAuLi5hcmdzKSB7CiAgZm9yKGxldCBwcm9wcyBvZiBhcmdzKSB7CiAgICBjb25zdCBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMocHJvcHMpOwoKICAgIGZvcihsZXQgcHJvcCBpbiBkZXNjKSB7CiAgICAgIGNvbnN0IHsgZW51bWVyYWJsZSwgLi4uZCB9ID0gZGVzY1twcm9wXTsKCiAgICAgIHRyeSB7CiAgICAgICAgZGVsZXRlIG9ialtwcm9wXTsKICAgICAgfSBjYXRjaChlKSB7fQoKICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgcHJvcCwgeyAuLi5kLCBlbnVtZXJhYmxlOiBmYWxzZSB9KTsKICAgIH0KICB9CiAgLy8gb2JqID0gZXh0ZW5kKG9iaiwgcHJvcHMsIGRlc2MgPT4gKGRlbGV0ZSBkZXNjLmNvbmZpZ3VyYWJsZSwgZGVsZXRlIGRlc2MuZW51bWVyYWJsZSkpOwoKICByZXR1cm4gb2JqOwp9CmZ1bmN0aW9uIG1lbW9pemUoZm4sIGNhY2hlID0gbmV3IE1hcCgpKSB7CiAgcmV0dXJuIGRlZmluZSgKICAgIGZ1bmN0aW9uIE1lbW9pemUobiwgLi4ucmVzdCkgewogICAgICBsZXQgcjsKICAgICAgaWYoKHIgPSBjYWNoZS5nZXQobikpKSByZXR1cm4gcjsKICAgICAgciA9IGZuLmNhbGwodGhpcywgbiwgLi4ucmVzdCk7CiAgICAgIGNhY2hlLnNldChuLCByKTsKICAgICAgcmV0dXJuIHI7CiAgICB9LAogICAgeyBjYWNoZSB9CiAgKTsKfQoKZnVuY3Rpb24gcShzLCBlID0gZG9jdW1lbnQpIHsKICByZXR1cm4gZS5xdWVyeVNlbGVjdG9yKHMpOwp9CgpmdW5jdGlvbiBxYShzLCBlID0gZG9jdW1lbnQpIHsKICByZXR1cm4gWy4uLmUucXVlcnlTZWxlY3RvckFsbChzKV07Cn0KCndpbmRvdy5nZXRSZXBvcyA9ICgpID0+IHFhKCcjdXNlci1yZXBvc2l0b3JpZXMtbGlzdCA+IHVsID4gbGkgPiBkaXYuY29sLTEwLmNvbC1sZy05LmQtaW5saW5lLWJsb2NrJykubWFwKGUgPT4gW3EoJ2EnLCBlKS5ocmVmLCBxKCdoMycsIGUpLm5leHRFbGVtZW50U2libGluZz8ucXVlcnlTZWxlY3RvcignYScpPy5ocmVmXSk7CndpbmRvdy5wYXJzZVhNTCA9IHhtbFN0ciA9PiBuZXcgRE9NUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKHhtbFN0ciwgJ3RleHQvaHRtbCcpOwp3aW5kb3cuZmV0Y2hVUkwgPSB1cmwgPT4KICBmZXRjaCh1cmwsIHsKICAgIGhlYWRlcnM6IHsKICAgICAgYWNjZXB0OiAndGV4dC9odG1sLCBhcHBsaWNhdGlvbi94aHRtbCt4bWwnLAogICAgICAnYWNjZXB0LWxhbmd1YWdlJzogJ2VuLVVTLGVuO3E9MC45JywKICAgICAgJ2NhY2hlLWNvbnRyb2wnOiAnbm8tY2FjaGUnLAogICAgICBwcmFnbWE6ICduby1jYWNoZScsCiAgICAgICdzZWMtY2gtdWEnOiAnIkNocm9taXVtIjt2PSIxMTgiLCAiQnJhdmUiO3Y9IjExOCIsICJOb3Q9QT9CcmFuZCI7dj0iOTkiJywKICAgICAgJ3NlYy1jaC11YS1tb2JpbGUnOiAnPzAnLAogICAgICAnc2VjLWNoLXVhLXBsYXRmb3JtJzogJyJMaW51eCInLAogICAgICAnc2VjLWZldGNoLWRlc3QnOiAnZW1wdHknLAogICAgICAnc2VjLWZldGNoLW1vZGUnOiAnY29ycycsCiAgICAgICdzZWMtZmV0Y2gtc2l0ZSc6ICdzYW1lLW9yaWdpbicsCiAgICAgICdzZWMtZ3BjJzogJzEnLAogICAgICAndHVyYm8tZnJhbWUnOiAndXNlci1wcm9maWxlLWZyYW1lJwogICAgfSwKICAgIHJlZmVycmVyOiB3aW5kb3cubG9jYXRpb24uaHJlZiwKICAgIHJlZmVycmVyUG9saWN5OiAnc3RyaWN0LW9yaWdpbi13aGVuLWNyb3NzLW9yaWdpbicsCiAgICBtZXRob2Q6ICdHRVQnLAogICAgbW9kZTogJ2NvcnMnLAogICAgY3JlZGVudGlhbHM6ICdpbmNsdWRlJwogIH0pLnRoZW4ociA9PiByLnRleHQoKSk7Cgp3aW5kb3cuZ2V0UGFnZSA9ICh1cmwgPSB3aW5kb3cuaHJlZikgPT4gewogIGNvbnN0IHsgcGFnZSB9ID0gT2JqZWN0LmZyb21FbnRyaWVzKFsuLi5uZXcgVVJMKHVybCkuc2VhcmNoUGFyYW1zXSk7CiAgcmV0dXJuIHBhZ2UgPyArcGFnZSA6IDE7Cn07CgpPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LCAnaHJlZicsIHsKICBnZXQ6IG1lbW9pemUoKCkgPT4gewogICAgY29uc3QgdXJsID0gbmV3IFVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodXJsLCAncXVlcnknLCB7CiAgICAgIGdldDogbWVtb2l6ZShmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhbLi4udGhpcy5zZWFyY2hQYXJhbXNdKTsKICAgICAgfSkKICAgIH0pOwogICAgcmV0dXJuIHVybDsKICB9KSwKICBjb25maWd1cmFibGU6IHRydWUKfSk7Cgp3aW5kb3cubWFrZVF1ZXJ5ID0gb2JqID0+IE9iamVjdC5lbnRyaWVzKG9iaikucmVkdWNlKChzLCBbbiwgdl0sIGkpID0+IHMgKyAoaSA9PSAwID8gJz8nIDogJyYnKSArIG4gKyAnPScgKyB2LCAnJyk7CndpbmRvdy5tYWtlVVJMID0gKGJhc2UgPSB3aW5kb3cuaHJlZiwgcXVlcnkgPSB7fSkgPT4gKGJhc2UgKyAnJykucmVwbGFjZSgvXD8uKi9nLCAnJykgKyB3aW5kb3cubWFrZVF1ZXJ5KHF1ZXJ5KTsKd2luZG93Lm5leHRVUkwgPSAodSA9IHdpbmRvdy5ocmVmLCBvZmZzZXQgPSAxKSA9PiB3aW5kb3cubWFrZVVSTCh1LCB7IC4uLnUucXVlcnksIHBhZ2U6IHdpbmRvdy5nZXRQYWdlKCkgKyBvZmZzZXQgfSk7CndpbmRvdy5mZXRjaE5leHQgPSBhc3luYyAodSA9IHdpbmRvdy5ocmVmLCBvZmZzZXQgPSB3aW5kb3cub2Zmc2V0ID8/IDEpID0+IHsKICBjb25zdCB0ID0gYXdhaXQgd2luZG93LmZldGNoVVJMKHdpbmRvdy5uZXh0VVJMKHUsICh3aW5kb3cub2Zmc2V0ID0gb2Zmc2V0ICsgMSkgLSAxKSk7CiAgY29uc3QgZCA9IHBhcnNlWE1MKHQpOwogIGRvY3VtZW50LmJvZHkuaW5uZXJIVE1MICs9IHEoJ2JvZHknLCBkKS5pbm5lckhUTUw7CiAgcmV0dXJuIHQ7Cn07Cg",
					"AQAAAAAAAAABAAAAAAAAAAAAAAB0DAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"contents": "  import deep from '../deep.js';\nimport { abbreviate, className, fnName, getCallerStack, getMethodNames, isObject, once, pad, propertyLookup, tail, trim } from '../misc.js';\nimport { AnonymousDefaultExportedClassDeclaration, AnonymousDefaultExportedFunctionDeclaration, ArrayExpression, ArrayPattern, ArrowFunctionExpression, AssignmentExpression, AssignmentPattern, AssignmentProperty, AwaitExpression, BinaryExpression, BlockStatement, BreakStatement, CallExpression, CatchClause, ClassBody, ClassDeclaration, ConditionalExpression, ContinueStatement, DoWhileStatement, EmptyStatement, ESNode, ExportDefaultDeclaration, ExportNamedDeclaration, ExportSpecifier, ExpressionStatement, Factory, ForInStatement, ForOfStatement, ForStatement, FunctionBody, FunctionDeclaration, FunctionLiteral, Identifier, IfStatement, ImportDeclaration, ImportDefaultSpecifier, ImportNamespaceSpecifier, ImportSpecifier, JSXLiteral, LabeledStatement, Literal, LogicalExpression, MemberExpression, MetaProperty, MethodDefinition, NewExpression, ObjectExpression, ObjectPattern, Program, Property, RegExpLiteral, RestElement, ReturnStatement, SequenceExpression, SpreadElement, StatementList, Super, SwitchCase, SwitchStatement, TemplateElement, TemplateLiteral, ThisExpression, ThrowStatement, TryStatement, UnaryExpression, UpdateExpression, VariableDeclaration, VariableDeclarator, WhileStatement, WithStatement, YieldExpression } from './estree.js';\nimport { Lexer, Location, Token } from './lexer.js';\nimport { Printer } from './printer.js';\nimport inspect from 'inspect';\n\nexport { Lexer, Location, Token, PathReplacer } from './lexer.js';\n\nconst add = (arr, ...items) => [...(arr || []), ...items];\n\nexport class Parser {\n  lastPos = new Location(1, 1);\n  lastTok = 0;\n  nodeTokenMap = new WeakMap();\n\n  static printToks = tokens => tokens.map(tok => (/(literal|identifier)/i.test(tok.type) && /^[^'\"]/.test(tok.value) ? '‹' + tok.value + '›' : tok.value)).join(' ');\n  static tokArray = tokens => tokens.map(tok => tok.value);\n\n  constructor(sourceText, fileName, debug) {\n    this.tokens = [];\n    this.processed = [];\n    this.lexer = new Lexer(sourceText, fileName, (c, s, e) => this.handleComment(c, s, e));\n    this.stack = [];\n    this.prefix = fileName ? ` ${fileName}: ` : '';\n    if(debug) this.debug = debug;\n\n    this.comments = [];\n    this.factory = new Factory();\n    let classes = this.factory.classes;\n    let parser = this;\n    this.estree = Util.propertyLookup(\n      classes,\n      key =>\n        function(...args) {\n          let node = /*new.target ||*/ classes[key](...args);\n\n          parser.onNewNode(node);\n\n          return node;\n        }\n    );\n\n    //\n\n    this.factory.callback = (...args) => this.handleConstruct(...args);\n\n    //\n    if(debug) ECMAScriptParser.instrumentate();\n  }\n\n  error(errorMessage, astNode) {\n    const pos = this.position();\n    console.error('error: ' + errorMessage);\n\n    return new SyntaxError(pos.toString() + ': parse ' + errorMessage /*, astNode, pos*/);\n  }\n\n  handleComment(comment, start, end) {\n    //console.log('handleComment:', { comment, start, end });\n    if(comment.startsWith('//')) comment += '\\n';\n    let token = new Token('comment', comment, start /*new Range(start, comment.length)*/, start.valueOf());\n    this.comments = add(this.comments, token);\n  }\n\n  handleConstruct = (() => {\n    return function(ctor, args, instance) {\n      let assoc = ESNode.assoc(instance, {});\n      let pos = assoc && assoc.position;\n      /* || this.position()*/ let position;\n      if(this && this.stack && this.stack[0]) {\n        assoc.position = this.stack[0].position;\n        this.lastPos = this.stack[0].position;\n      }\n      //this.lastTok = this.processed.length;\n      this.nodes = add(this.nodes, instance);\n      let index = this.nodes.indexOf(instance);\n    };\n  })();\n\n  onNewNode(node) {\n    const range = [this.lastTok, this.processed.length];\n    this.nodeTokenMap[node] = range;\n  }\n\n  onReturnNode(node, stackEntry, stack) {\n    const { tokenIndex } = this.lexer;\n    const { methodName } = stackEntry;\n    const range = [stackEntry.start, stackEntry.end];\n    let obj = ESNode.assoc(node, {});\n\n    if(obj.object !== undefined) {\n      do {\n        if(obj.tokenRange && obj.tokenRange[0] < range[0]) range[0] = obj.tokenRange[0];\n      } while((obj = obj.object));\n    }\n    Object.defineProperty(range, 'size', {\n      get() {\n        return this[1] - this[0];\n      },\n      enumerable: false,\n      writeable: false\n    });\n    if(range[0] == range[1]) return;\n    if(this.nodeTokenMap[node] === undefined) {\n      this.nodeTokenMap[node] = range;\n      this.lastTok = range[1];\n    }\n    let tokens = /*new TokenList*/ [...this.processed, ...this.tokens].slice(...range);\n    if(!tokens || tokens.length == 0 || tokens[0] === undefined) return;\n    let last = Util.tail(tokens);\n    let positions = [tokens[0].offset, last.end];\n    let comments = [];\n    //let assoc = ESNode.assoc(node, { range: positions, tokenRange: range, tokens, comments });\n    Object.assign(obj, {\n      range: positions,\n      tokenRange: range,\n      tokens,\n      comments\n    });\n\n    /*    console.log(\"tokens:\", tokens);\n    console.log(\"lexer.position:\", this.lexer.position);*/\n\n    if(tokens[0].position) {\n      obj.position = tokens[0].position;\n    }\n  }\n\n  addCommentsToNodes(root) {\n    if(this.comments.length == 0) return;\n    let nodes = new Map();\n    for(let [node, path] of deep.iterate(root, n => n instanceof ESNode)) {\n      let assoc = ESNode.assoc(node);\n      let { tokenRange, tokens, source } = assoc;\n      if(tokens) nodes.set(tokens, assoc);\n    }\n    for(let [tokens, assoc] of nodes) {\n      let { position } = tokens[0];\n      while(this.comments.length > 0 && +position >= +this.comments[0].offset) {\n        let maxLen = position - this.comments[0].position;\n\n        let comment = this.comments.shift();\n\n        /*if(comment.value.length > maxLen) {\n        let trail = comment.value.substring(maxLen, comment.value.length);\n        throw new Error(`Comment ${comment.position} '${comment.value.replace(/\\n/g, \"\\\\n\")}' length (${comment.value.length}) > ${maxLen}: ${trail.replace(/\\n/g, \"\\\\n\")}\\nNext token: ${tokens[0]}\\nLast token: ${tokens[tokens.length-1]}`);\n      }*/\n\n        assoc.comments = add(assoc.comments, comment);\n        //console.log('addCommentsToNodes', comment.position.toString(), comment.value.replace(/\\n/g, '\\\\n'));\n      }\n    }\n  }\n\n  tokensForNode(root) {\n    let tokens = [];\n    for(let [node, path] of deep.iterate(root, n => n instanceof ESNode)) {\n      const token = this.nodeTokenMap[node];\n      tokens.push({ token, path });\n    }\n    tokens.sort((a, b) => a.token[1] - b.token[1]);\n    let range = [tokens[0], Util.tail(tokens)].map(range => range.token[1]);\n    return [...this.processed, ...this.tokens].slice(...range);\n  }\n\n  /*\n   * Lexer Interactions\n   */\n  //Returns the next token\n  next() {\n    let token;\n    if(this.tokens.length > 0) {\n      token = this.tokens[0];\n    } else {\n      token = this.lexer.lex();\n      this.tokens.push(token);\n    }\n    this.pos = this.position(token);\n    this.token = this.tokens[0];\n    //console.debug(\"token:\", this.token, \"pos:\", this.pos);\n    return token;\n  }\n\n  lookahead(offset = 0) {\n    let token;\n    while(this.tokens.length <= offset) {\n      this.tokens.push(this.lexer.lex());\n    }\n    return this.tokens[offset];\n  }\n\n  consume() {\n    if(this.tokens.length === 0) this.next();\n    const token = this.tokens.shift();\n    if(this.tokens.length == 0) this.next();\n\n    this.processed.push(token);\n\n    if(typeof Parser.onToken == 'function') Parser.onToken(token);\n\n    return token;\n    //parseRemainingMemberExpression2;\n  }\n\n  state() {\n    let n = this.processed.length;\n    let parser = this;\n    return function() {\n      parser.tokens.unshift(...parser.processed.splice(n, parser.processed.length));\n    };\n  }\n\n  printtoks() {\n    let token = this.token;\n    let pos = token && token.pos ? token.pos.toString() : '';\n    let buf = '';\n\n    if(token) {\n      buf = this.lexer.source\n        .substring(token.from, Math.min(token.to, token.from + 6))\n        .replace(/\\n/g, '\\\\n')\n        .substring(0, 6);\n    }\n    if(token) return `\"${buf}\"${Util.pad(buf, 6)} ${pos}${Util.pad(pos, 10)}`;\n    return '';\n  }\n\n  log() {\n    return;\n    const width = 72;\n    let args = [...arguments].map(a => (typeof a === 'string' ? `\"${a}\"` : toStr(a)).replace(new RegExp('[\\n\\r\\t ]+', 'g'), ''));\n    let name = Util.abbreviate(Util.trim(args.join(''), '\\'\"'), width);\n    let stack = Util.getCallerStack().map(st => st.getFunctionName());\n\n    /*this.stack.map((name, i) => `${i}:${name}`).join(\", \");*/\n\n    const posstr = this.prefix + String(this.pos);\n    console.log.apply(console, [posstr + Util.pad(posstr, this.prefix.length + 8), name + Util.pad(name, width), this.printtoks(), 'stack: ' + stack.indexOf('parseProgram')]);\n  }\n\n  position(tok = null) {\n    let pos = tok?.position ?? this.lexer.pos;\n    //console.log(\"position\",pos);\n    return this.lexer.position(pos);\n  }\n\n  addNode(ctor, ...args) {\n    let node = new ctor(...args);\n    /*let { processedIndex = 0 } = this;\n    console.log('node:',\n      Util.className(node).padEnd(30),\n      'processed:',\n      this.processed.slice(processedIndex).map(tok => tok.lexeme)\n    );\n    this.processedIndex = this.processed.length;*/\n    return node;\n  }\n}\n\nfunction getFn(name) {\n  let fn;\n  try {\n    fn = eval(name);\n  } catch(err) {}\n  return fn;\n}\n\nfunction isLiteral({ type }) {\n  return (\n    type === Token.types.stringLiteral ||\n    type === Token.types.numericLiteral ||\n    type === Token.types.regexpLiteral ||\n    type === Token.types.nullLiteral ||\n    type === Token.types.booleanLiteral ||\n    type === Token.types.templateLiteral\n  );\n}\n\nfunction isTemplateLiteral({ type }) {\n  return type === Token.types.templateLiteral;\n}\n\nfunction backTrace() {\n  const stack = new Error().stack;\n  const str = stack.toString().replace(/\\n\\s*at /g, '\\n');\n  let arr = str.split(/\\n/g);\n\n  arr = arr\n    .map(line => {\n      let matches = /^(.*)\\s\\((.*):([0-9]*):([0-9]*)\\)$/.exec(line);\n      if(matches && !/estree/.test(line)) {\n        let name = matches[1].replace(/Parser\\./, 'Parser.prototype.');\n        let r = {\n          name: name.replace(/.*\\.prototype\\./, ''),\n          file: matches[2].replace(new RegExp('/.*lotto//'), ''),\n          line: parseInt(matches[3]),\n          column: parseInt(matches[4])\n        };\n        let fn = getFn(name);\n        let caller = fn ? (fn ? Util.fnName(fn, Parser.prototype) : fn) : undefined;\n        //this.log(\"name: '\" +name+\"'\");\n        if(typeof fn === 'function') {\n          //this.log(\"fn: \", Util.fnName(fn, Parser.prototype, Parser));\n          //this.log(\"fn: \", caller);\n        }\n        return r;\n      }\n      return null;\n    })\n    .filter(e => e != null)\n    .map(e => ` ${e.file}:${e.line}:${e.column} ${e.name} `);\n\n  //console.log(\"STACK: \", arr.join(\"\\n\"));\n\n  /*\n  let bt = [];\n  let fn = backTrace;\n\n  while(fn) {\n    const name = Util.fnName(fn);\n\n    bt.push(fn);\n\n    fn = fn;\n  }\n  consnole.log(\"bt: \", bt);*/\n}\n\nfunction toStr(a) {\n  if(a && a.toString !== undefined) return a.toString();\n  return typeof a === 'object' ? JSON.toString(a).substring(0, 20) : String(a);\n}\n\n/*const stackFunc = (name, fn) =>\n  function() {\n    const args = [...arguments];\n    const len = this.stack.length;\n    this.stack.push(name);\n    this.log('' + name + '(' + args.map(a => toStr(a)).join(', ') + ')');\n    let ret = fn.apply(this, args);\n    while(this.stack.length > len) this.stack.pop();\n    return ret;\n  };\n*/\nconst stackFunc = (name, fn) => fn;\n\nconst operatorPrecedence = {\n  '??': 0,\n  '||': 1,\n  '&&': 2,\n  '|': 3,\n  '^': 4,\n  '&': 5,\n  '==': 6,\n  '!=': 6,\n  '===': 6,\n  '!==': 6,\n  '<': 7,\n  '>': 7,\n  '<=': 7,\n  '>=': 7,\n  in: 7,\n  instanceof: 7,\n  '<<': 8,\n  '>>': 8,\n  '>>>': 8,\n  '+': 9,\n  '-': 9,\n  '*': 10,\n  '%': 10,\n  '/': 10,\n  '**': 11\n};\n\nexport class ECMAScriptParser extends Parser {\n  /*\n   * Helper Functions\n   */\n\n  expectIdentifier(no_keyword = false) {\n    this.log(`expectIdentifier(no_keyword=${no_keyword})`);\n    const token = this.consume();\n\n    if(token.type != Token.types.nullLiteral)\n      if(!(token.type === Token.types.identifier || (no_keyword && token.type == Token.types.keyword))) {\n        throw this.error(`Expecting <Identifier> but got <${token.type}> with value '${token.value}'`);\n      }\n    this.log(`expectIdentifier2(no_keyword=${no_keyword})`);\n\n    //backTrace(p.expectIdentifier);\n\n    return new Identifier(token.value);\n  }\n\n  expectKeywords(keywords) {\n    this.log(`expectKeywords(${keywords}) `);\n    const token = this.consume();\n    if(token.type !== Token.types.keyword) {\n      throw this.error(` Expecting Keyword(${keywords}), but got ${token.type} with value '${token.value}'`);\n    }\n    if(Array.isArray(keywords)) {\n      if(keywords.indexOf(token.value) < 0) {\n        throw this.error(`Expected: ${keywords.join(' ')}    Actual: ${token.value || token.type}`);\n      }\n    } else if(keywords !== token.value) {\n      throw this.error(` Expected: ${keywords}    Actual: ${token.value || token.type}`);\n    }\n    return token;\n  }\n\n  expectPunctuators(punctuators, ast) {\n    this.log(`expectPunctuators(${punctuators}) `);\n    const token = this.consume();\n    if(token.type !== Token.types.punctuator) {\n      throw this.error(`Expecting Punctuator(${punctuators}), but got ${token.type} with value '${token.value}'`, ast);\n    }\n    if(Array.isArray(punctuators)) {\n      if(punctuators.indexOf(token.value) < 0) {\n        throw this.error(`Expected: ${punctuators.join(' ')}    Actual: ${token.value}`, ast);\n      }\n    } else if(punctuators !== token.value) {\n      throw this.error(`Expected: ${punctuators} Actual: ${token.value}`, ast);\n    }\n    return token;\n  }\n\n  expectLiteral() {\n    this.log('expectLiteral() ');\n    if(this.matchTemplateLiteral()) return this.parseTemplateLiteral();\n\n    let token = this.consume();\n    if(!isLiteral(token)) {\n      throw this.error(`Expecting Literal, but got ${token.type} with value '${token.value}'`);\n    }\n\n    let value = token.value;\n    if(token.type == 'regexpLiteral') {\n      const [match, pattern, flags] = /^\\/(.*)\\/([a-z]*)$/.exec(token.value);\n      return new RegExpLiteral(pattern, flags);\n    }\n\n    return new Literal(\n      value,\n      {\n        stringLiteral: 'string',\n        templateLiteral: 'string',\n        numericLiteral: 'number',\n        booleanLiteral: 'boolean',\n        nullLiteral: 'object',\n        regexpLiteral: 'regexp'\n      }[token.type]\n    );\n  }\n\n  parseTemplateLiteral() {\n    let i = 0,\n      expressions = [],\n      quasis = [];\n\n    this.templateLevel = this.templateLevel || 0;\n    this.templateLevel++;\n    while(true) {\n      let token = this.consume();\n      //console.log('token:', token);\n      //const head = i == 0 && token.value.startsWith('`');\n      const tail = (i > 0 || token.value.length > 1) && token.value.endsWith('`');\n      const raw = token.value.slice(1, -1);\n      const cooked = raw.replace(/\\\\n/g, '\\n');\n      quasis.push(new TemplateElement(tail, raw, cooked));\n      if(tail) break;\n      expressions.push(this.parseAssignmentExpression());\n      const { lexer } = this;\n      let { stateFn, inSubst } = lexer;\n      lexer.stateFn = this.lexer.lexTemplate(true);\n      let literal = (this.matchLiteral() ? this.expectLiteral() : this.expectPunctuators('}')).value;\n      i++;\n    }\n    this.templateLevel--;\n\n    let node = new TemplateLiteral(quasis, expressions);\n    //console.log('node:', node);\n    return node;\n  }\n\n  matchKeywords(keywords) {\n    const token = this.next();\n    let ret;\n\n    if(token.type !== Token.types.keyword) ret = false;\n    else if(Array.isArray(keywords)) ret = keywords.indexOf(token.value) >= 0;\n    else ret = keywords === token.value;\n\n    return ret;\n  }\n\n  matchPunctuators(punctuators) {\n    const token = this.next();\n    if(token.type !== Token.types.punctuator) return false;\n    if(Array.isArray(punctuators)) return punctuators.indexOf(token.value) >= 0;\n    return punctuators === token.value;\n  }\n\n  matchIdentifier(no_keyword = false) {\n    const token = this.next();\n\n    if(no_keyword) {\n      //console.debug('matchIdentifier', { token });\n    }\n    //this.log('matchIdentifier() ');\n    return token.type === Token.types.identifier || (no_keyword && token.type === Token.types.keyword);\n  }\n\n  matchLiteral() {\n    const token = this.next();\n    //console.log(`matchLiteral() token='${token.value}'`);\n    return isLiteral(token);\n  }\n\n  matchTemplateLiteral() {\n    //if(this.templateLevel > 0) return false;\n    const token = this.next();\n    return isTemplateLiteral(token);\n  }\n\n  matchStatement() {\n    return (\n      this.matchPunctuators(';') ||\n      this.matchKeywords(['if', 'var', 'let', 'const', 'with', 'while', 'do', 'for', 'continue', 'break', 'return', 'switch', 'import', 'export', 'try', 'throw', 'class', 'yield']) ||\n      this.matchAssignmentExpression()\n    );\n  }\n\n  matchPrimaryExpression() {\n    return this.matchKeywords(['this', 'async', 'super']) || this.matchPunctuators(['(', '[', '{', '<', '...']) || this.matchLiteral() || this.matchIdentifier();\n  }\n\n  matchUnaryExpression() {\n    return this.matchKeywords(['delete', 'void', 'typeof', 'await' /*, 'yield'*/]) || this.matchPunctuators(['++', '--', '+', '-', '~', '!']);\n  }\n\n  matchAssignmentExpression() {\n    return this.matchUnaryExpression() || this.matchLeftHandSideExpression() || this.matchFunctionExpression() || this.matchKeywords(['class']);\n  }\n\n  matchFunctionExpression() {\n    const is_async = this.lookahead(0).value == 'async';\n    const token = this.lookahead(is_async ? 1 : 0);\n    return this.matchKeywords('function') || (token && token.value == 'get');\n  }\n\n  matchMemberExpression() {\n    return this.matchPrimaryExpression() || this.matchKeywords('new') || this.matchKeywords('this');\n  }\n\n  matchLeftHandSideExpression() {\n    return this.matchMemberExpression(...arguments);\n  }\n\n  /*\n   * Actual recursive descent part of things\n   */\n\n  parsePrimaryExpression() {\n    this.trace('parsePrimaryExpression');\n    let is_async = false,\n      rest_of = false;\n    let expr = null;\n    if(this.matchKeywords('async')) {\n      is_async = true;\n      this.expectKeywords('async');\n    } else if(this.matchIdentifier() && this.token.value == 'async') {\n      is_async = true;\n      this.expectIdentifier();\n    } else if(this.matchPunctuators(['...'])) {\n      rest_of = true;\n      this.expectPunctuators(['...']);\n    }\n\n    if(!is_async && this.matchKeywords('this')) {\n      this.expectKeywords('this');\n      expr = this.addNode(ThisExpression);\n    } else if(this.matchKeywords('class')) {\n      expr = this.parseClass();\n    } else if(/*is_async && */ this.matchKeywords('function')) {\n      expr = this.parseFunction(false, is_async);\n    } else if(this.matchPunctuators(['{'])) {\n      expr = this.parseObject();\n    } else if(this.matchPunctuators(['['])) {\n      expr = this.parseArray();\n    } else if(!is_async && this.matchPunctuators(['<'])) {\n      expr = this.parseJSX();\n    } else if(!is_async && (this.matchLiteral() || this.matchTemplateLiteral())) {\n      if(this.matchTemplateLiteral()) expr = this.parseTemplateLiteral();\n      else expr = this.expectLiteral();\n    } else if(this.matchKeywords('super')) {\n      this.expectKeywords('super');\n      expr = this.addNode(Super);\n    } else if(this.matchKeywords('import')) {\n      expr = this.parseImportDeclaration(false);\n    } else if(this.matchPunctuators(['('])) {\n      this.expectPunctuators(['(']);\n\n      let expression = [];\n      let parentheses = this.matchPunctuators(['(']);\n\n      if(!this.matchPunctuators([')'])) expression = this.parseExpression(false, true);\n      //console.log('expression:', expression);\n      //console.log('this.next():', this.next());\n\n      this.expectPunctuators([')']);\n\n      if(this.matchPunctuators(['=>'])) {\n        //console.debug('expression args:', expression);\n        let args = expression.expressions || expression || [];\n        for(let i = 0; i < args.length; i++) {\n          let e = args[i];\n          if(e instanceof AssignmentExpression) {\n            if(e.right instanceof SequenceExpression) {\n              let seq = e.right.expressions;\n              e.right = seq.shift();\n              args.splice(i + 1, 0, ...seq);\n            }\n          }\n        }\n\n        //console.debug(`${this.position()} args:`, expression);\n        expression = this.parseArrowFunction(args, is_async);\n        //expression = this.addNode(SequenceExpression, [expression]);\n      } else if(!(expression instanceof SequenceExpression)) expression = this.addNode(SequenceExpression, [expression]);\n\n      expr = expression;\n    } else if(this.matchIdentifier(true)) {\n      let id = this.expectIdentifier(true);\n\n      if(this.matchPunctuators(['=>'])) {\n        id = this.parseArrowFunction([id], is_async);\n        id = this.addNode(SequenceExpression, [id]);\n      }\n\n      expr = id;\n    } else if(is_async) {\n      expr = new Identifier('async');\n    } else {\n      //console.log('parsePrimaryExpression', this.tokens.map(tok => tok + ''));\n\n      throw new Error(`${this.token.loc ?? this.position ?? this.lexer.loc}: Unexpected token '${this.token}'`);\n    }\n    if(rest_of) {\n      expr = this.addNode(RestElement, expr);\n    }\n    return expr;\n  }\n\n  parseArguments() {\n    const args = [];\n    let rest_of = false;\n    const checkRestOf = parser => {\n      if(parser.matchPunctuators('...')) {\n        parser.expectPunctuators('...');\n        rest_of = true;\n      }\n    };\n    this.expectPunctuators('(');\n    while(true) {\n      checkRestOf(this);\n      if(!this.matchAssignmentExpression()) break;\n      let arg = this.parseAssignmentExpression();\n      if(rest_of) arg = new RestElement(arg);\n      args.push(arg);\n      //if(rest_of) break;\n      if(this.matchPunctuators(',')) {\n        this.expectPunctuators(',');\n        continue;\n      }\n      break;\n    }\n    //console.log(\"this.processed:\", this.processed);\n    this.expectPunctuators(')', args);\n    return args;\n  }\n\n  parseRemainingMemberExpression(object) {\n    while(this.matchPunctuators(['.', '[', '?.'])) {\n      if(this.matchPunctuators(['.', '?.'])) {\n        const optional = this.matchPunctuators('?.');\n\n        this.expectPunctuators(['.', '?.']);\n        const identifier = this.expectIdentifier(true);\n\n        /* console.log('object:', object);\n        console.log('identifier:', identifier);*/\n\n        if(object === null) throw this.error('Object ' + object);\n\n        if(object instanceof Identifier && (object.name == 'new' || object.name == 'import')) object = new MetaProperty(object, identifier);\n        else object = new MemberExpression(object, identifier, false, optional);\n\n        //this.log('parseRemainingMemberExpression2(', object.toString(), ')', Util.fnName(this.parseRemainingMemberExpression));\n      } else if(this.matchPunctuators('[')) {\n        this.expectPunctuators('[');\n        const expression = this.parseExpression(true);\n        this.expectPunctuators(']');\n        object = new MemberExpression(object, expression, true);\n      }\n    }\n    return object;\n  }\n\n  parseArrowFunction(args, is_async = false) {\n    this.expectPunctuators('=>');\n    let body;\n\n    if(this.matchPunctuators('{')) body = this.parseBlock(false, true);\n    else body = this.parseAssignmentExpression();\n\n    //console.log(\"body:\",body);\n    //&', args);\n\n    //parseArrow\n    if(args instanceof SequenceExpression) args = args.expressions;\n\n    if(!Array.isArray(args)) args = [args];\n\n    args = args.map(arg => {\n      if(arg instanceof ObjectPattern) {\n      }\n      return arg;\n    });\n\n    return new ArrowFunctionExpression(args, body, is_async);\n  }\n\n  parseRemainingCallExpression(object, is_async = false) {\n    /* let args = this.parseArguments();\n\n*/\n    while(this.matchTemplateLiteral() || this.matchPunctuators(['.', '[', '('])) {\n      if(this.matchPunctuators(['.', '?.'])) {\n        this.expectPunctuators(['.', '?.']);\n        const identifier = this.expectIdentifier(true);\n        const optional = this.matchPunctuators('?.');\n        object = new MemberExpression(object, new Literal(identifier.toString()), false, optional);\n      } else if(this.matchPunctuators('[')) {\n        this.expectPunctuators('[');\n        const expression = this.parseExpression();\n        this.expectPunctuators(']');\n        object = new MemberExpression(object, expression, true);\n      } else if(this.matchPunctuators('(')) {\n        let args = this.parseArguments();\n        if(this.matchPunctuators('=>')) object = this.parseArrowFunction(args, is_async);\n        else object = new CallExpression(object, args);\n      } else if(this.matchTemplateLiteral()) {\n        //console.log(\"Template call\", this.token);\n        let arg = this.parseTemplateLiteral();\n\n        //console.log(\"Template call\", arg);\n        object = new CallExpression(object, arg);\n      }\n    }\n    return object;\n  }\n\n  parseNewOrCallOrMemberExpression(couldBeNewExpression, couldBeCallExpression) {\n    let do_await = false,\n      is_async = false;\n    if(this.matchKeywords('await')) {\n      do_await = true;\n      this.expectKeywords('await');\n    }\n    this.log(`parseNewOrCallOrMemberExpression(${couldBeNewExpression}, ${couldBeCallExpression})`);\n    let object = null;\n    if(!is_async && this.matchKeywords('new') && couldBeNewExpression) {\n      this.expectKeywords('new');\n      if(this.matchPunctuators('.')) {\n        object = new Identifier('new');\n      } else {\n        const result = this.parseNewOrCallOrMemberExpression(true, false);\n        //console.log('result:', result);\n        couldBeNewExpression = result.couldBeNewExpression;\n        let args = [];\n        if(!couldBeNewExpression || this.matchPunctuators('(')) {\n          args = this.parseArguments();\n          couldBeNewExpression = false;\n        }\n        object = new NewExpression(result.object, args);\n      }\n    } else {\n      object = this.parsePrimaryExpression();\n    }\n    //console.debug(\"\\x1b[1;31mobject:\",object, \"\\x1b[0m\");\n    object = this.parseRemainingMemberExpression(object);\n    let id = object;\n    if((this.matchPunctuators('(') || this.matchTemplateLiteral()) && couldBeCallExpression) {\n      couldBeNewExpression = false;\n      object = this.parseRemainingCallExpression(object, is_async);\n    }\n    if(do_await) {\n      object = new AwaitExpression(object);\n    }\n    return { object, couldBeNewExpression };\n  }\n\n  parseLeftHandSideExpression() {\n    this.log(`parseLeftHandSideExpression()`);\n    let { object, couldBeNewExpression } = this.parseNewOrCallOrMemberExpression(true, true);\n\n    return object;\n  }\n\n  parsePostfixExpression() {\n    this.log(`parsePostfixExpression()`);\n    let lhs = true;\n    let expression = this.parseLeftHandSideExpression();\n\n    //TODO: Deny line terminator here\n    if(this.matchPunctuators(['++', '--'])) {\n      lhs = false;\n      let operator = this.expectPunctuators(['++', '--']);\n      expression = new UpdateExpression(operator.value, expression, false);\n    }\n    return { ast: expression, lhs };\n  }\n\n  parseUnaryExpression() {\n    this.log(`parseUnaryExpression()`);\n    const unaryKeywords = ['delete', 'void', 'typeof', 'await'];\n    const unaryPunctuators = ['++', '--', '+', '-', '~', '!'];\n    /*   if(this.matchKeywords('await')) {\n      this.expectKeywords('await');\n      const argument = this.parseAssignmentExpression();\n\n      return new AwaitExpression((argument.ast && argument.ast) || argument);\n    } else*/ if(this.matchKeywords(unaryKeywords)) {\n      const operatorToken = this.expectKeywords(unaryKeywords);\n      const argument = this.parseUnaryExpression();\n      return {\n        ast: new UnaryExpression(operatorToken.value, argument.ast, true),\n        lhs: false\n      };\n    } else if(this.matchPunctuators(unaryPunctuators)) {\n      const operatorToken = this.expectPunctuators(unaryPunctuators);\n      const argument = this.parseUnaryExpression();\n      let ast;\n      /*if(operatorToken.value === \"++\" || operatorToken.value === \"--\") {\n        ast = new UpdateExpression(operatorToken.value, argument.ast, true);\n      } else*/ {\n        ast = new UnaryExpression(operatorToken.value, argument.ast, true);\n      }\n      return { ast, lhs: false };\n    }\n    return this.parsePostfixExpression();\n  }\n\n  //Uses precedence climbing to deal with binary expressions, all of which have\n  //left-to-right associtivity in this case.\n  parseBinaryExpression(minPrecedence) {\n    this.log(`parseBinaryExpression()`);\n\n    const punctuators = ['||', '&&', '|', '^', '&', '===', '==', '!==', '!=', '<', '>', '<=', '>=', '<<', '>>', '>>>', '-->>', '+', '-', '*', '/', '%', '??'];\n    const result = this.parseUnaryExpression();\n    //console.log('binary:', result);\n\n    if(result.ast == null) {\n      if(!this.matchPunctuators('}')) return result;\n      throw new Error(`${this.position()} ${this.token}`);\n    }\n    let { ast, lhs } = result;\n\n    this.matchPunctuators(punctuators);\n\n    let tok = this.token;\n    let value = tok.value;\n    //if(tok.value == 'instanceof')\n    //this.log('TOKEN: ', tok);\n    while(\n      (this.matchKeywords(['instanceof', 'in']) || this.matchPunctuators(punctuators) || ['instanceof', 'in'].includes(tok.value)) &&\n      operatorPrecedence[(tok = this.next()).value] >= minPrecedence\n    ) {\n      //this.log('VALUE: ', value);\n      //If any operator is encountered, then the result cannot be\n      //LeftHandSideExpression anymore\n      lhs = false;\n      const precedenceLevel = operatorPrecedence[this.next().value];\n      const operatorToken = ['instanceof', 'in'].includes(tok.value) ? this.expectKeywords(['instanceof', 'in']) : this.expectPunctuators(punctuators);\n\n      const right = this.parseBinaryExpression(precedenceLevel + 1);\n\n      //console.log(`parseBinaryExpression(${precedenceLevel})`, {operator: operatorToken.value, ast, right });\n\n      if(right.ast == null) right.ast = this.parseFunction();\n\n      if(right.ast == null) return { ast, lhs };\n\n      if(operatorToken.value === '||' || operatorToken.value === '&&') {\n        /*if(operatorToken.value === '||')\n          console.log('LogicalExpression', {\n            operator: operatorToken.value,\n            right,\n            ast,\n            token: this.token.value\n          });*/\n\n        ast = new LogicalExpression(operatorToken.value, ast, right.ast);\n      } else {\n        ast = new BinaryExpression(operatorToken.value, ast, right.ast);\n      }\n    }\n    return { ast, lhs };\n  }\n  grep;\n\n  parseConditionalExpression() {\n    this.log(`parseConditionalExpression()`);\n    let result = this.parseBinaryExpression(0);\n    //console.log('parseConditionalExpression result:', result); //  if(result.ast == undefined) result = { ast: result, lhs: false };\n    let ast = result.ast;\n    let lhs = result.lhs;\n    if(!ast) {\n      //console.log('ast lhs:', { result, token: this.token.value, pos: [...this.position()].join(':') });\n      //console.log(\"lhs:\", Util.className(lhs));\n      //console.log(\"line:\", this.lexer.currentLine());\n      ast = new Identifier('undefined');\n      //throw this.error(`ConditionalExpression no ast`);\n    }\n\n    if(this.matchPunctuators('?')) {\n      this.expectPunctuators('?');\n      const consequent = this.parseAssignmentExpression();\n      //this.log('consequent: ', consequent);\n      this.expectPunctuators(':');\n      const alternate = this.parseAssignmentExpression();\n      ast = new ConditionalExpression(ast, consequent, alternate);\n      lhs = false;\n    }\n    return { ast, lhs };\n  }\n\n  parseAssignmentExpression() {\n    this.trace('parseAssignmentExpression');\n    //console.log(`parseAssignmentExpression`, {tokens: this.tokens.map(t => t + '') });\n\n    if(this.matchPunctuators(['{'])) {\n      return this.parseObject();\n    }\n    //Won't know immediately whether to parse as ConditionalExpression or\n    //LeftHandSideExpression. We'll only know later on during parsing if we\n    //come across things that cannot be in LeftHandSideExpression.\n    const result = this.parseConditionalExpression();\n    const end = this.matchPunctuators(['}']);\n\n    if(!end) {\n      if(result.lhs) {\n        //Once it is determined that the parse result yielded\n        //LeftHandSideExpression though, then we can parse the remaining\n        //AssignmentExpression with that knowledge\n        const assignmentOperators = ['=', '*=', '/=', '%=', '+=', '-=', '<<=', '>>=', '>>>=', '-->>=', '&=', '^=', '|=', '??=', '||=', '&&='];\n        if(this.matchPunctuators(assignmentOperators) || assignmentOperators.indexOf(this.token.value) != -1) {\n          const left = result.ast;\n          const operatorToken = this.expectPunctuators(assignmentOperators);\n          const right = this.parseExpression();\n          result.ast = this.addNode(AssignmentExpression, operatorToken.value, left, right);\n        }\n      }\n    }\n\n    //console.log(`parseAssignmentExpression`, { result });\n    return result.ast;\n  }\n\n  parseExpression(optional, sequence = true) {\n    //this.log(`parseExpression()`);\n\n    const expressions = [];\n    let expression = this.parseAssignmentExpression();\n\n    //console.log('parseExpression', { expression });\n\n    if(expression !== null) {\n      expressions.push(expression);\n    } else if(!optional) {\n      const token = this.next();\n      throw this.error(`Expecting AssignmentExpression, but got ${token.type} with value '${token.value}'`);\n    }\n    // console.log(\"expression: \", expression);\n    let i = 0;\n    // console.log(`expression ${i} ${Util.getCallerStack().length}`, expression);\n\n    if(sequence)\n      while(this.matchPunctuators(',')) {\n        this.expectPunctuators(',');\n        expression = this.parseAssignmentExpression();\n        //  console.log(`expression ${++i} ${Util.getCallerStack().length}`, expression);\n        if(expression !== null) {\n          expressions.push(expression);\n        } else if(!optional) {\n          const token = this.next();\n          throw this.error(`Expecting AssignmentExpression, but got ${token.type} with value '${token.value}'`);\n        }\n      }\n    if(/*sequence || */ expressions.length > 1) {\n      return new SequenceExpression(expressions);\n    } else if(expressions.length === 1) {\n      return expressions[0];\n    } else if(optional) {\n      return null;\n    }\n    throw new Error(`Shouldn't ever be here`, this.position());\n  }\n\n  parseBindingPattern() {\n    let tok = this.expectPunctuators(['{', '[']);\n    let is_array = tok.value == '[';\n    let ctor = is_array ? ArrayPattern : ObjectPattern;\n    let props = [];\n\n    while(true) {\n      let rest,\n        property,\n        element,\n        initializer,\n        computed = false,\n        shorthand = false;\n      if(this.matchPunctuators(['{', '['])) {\n        property = this.parseBindingPattern();\n      } else {\n        if((rest = this.matchPunctuators('...'))) this.expectPunctuators('...');\n\n        if(!is_array && this.matchPunctuators('[')) {\n          this.expectPunctuators('[');\n          property = element = this.parseAssignmentExpression();\n          computed = true;\n\n          this.expectPunctuators(']');\n        } else {\n          if(this.matchIdentifier(true)) property = element = this.expectIdentifier(true);\n        }\n\n        if(rest) {\n          property = new RestElement(property);\n        } else {\n          if(this.matchPunctuators(':')) {\n            this.expectPunctuators(':');\n\n            if(this.matchPunctuators(['{', '['])) element = this.parseBindingPattern();\n            else element = this.expectIdentifier();\n          } else if(this.matchKeywords('as')) {\n            this.expectKeywords('as');\n            element = this.expectIdentifier();\n          }\n\n          if(this.matchPunctuators('=')) {\n            this.expectPunctuators('=');\n            element = new AssignmentPattern(element, this.parseAssignmentExpression());\n          }\n\n          //console.log(\"element:\", element, this.token.position);\n\n          if(element) if (property.name == (element instanceof AssignmentPattern ? element.left : element).name) shorthand = true;\n\n          // console.log('parseBindingPattern', { property, element, initializer });\n          property = new AssignmentProperty(property, element, shorthand, computed);\n        }\n      }\n\n      props.push(property);\n      //console.log(\"this.token\", this.token);\n\n      if(this.expectPunctuators(['}', ']', ',']).value != ',') break;\n    }\n\n    return new ctor(props);\n  }\n\n  /*\n   * VariableDeclaration\n   *    | BindingIdentifier[?Yield]Initializer[?In, ?Yield]opt\n   *    | BindingPattern[?Yield]Initializer[?In, ?Yield]\n   */\n  parseVariableDeclaration() {\n    let identifier = null;\n\n    this.log(`parseVariableDeclaration()`);\n\n    if(this.matchPunctuators(['{', '['])) identifier = this.parseBindingPattern();\n    else identifier = this.expectIdentifier(true);\n\n    let assignment = null;\n\n    if(this.matchPunctuators('=')) {\n      this.expectPunctuators('=');\n      assignment = this.parseAssignmentExpression();\n      if(assignment === null) {\n        const token = this.next();\n        throw this.error(`Expecting AssignmentExpression, but got ${token.type} with value '${token.value}'`);\n      }\n    }\n    return { identifier, assignment };\n  }\n\n  parseVariableDeclarationList(kind = 'var', exported = false) {\n    this.log(`parseVariableDeclarationList()`);\n    const declarations = []; //Destructuring not yet on by default in nodejs\n    let declarator = this.parseVariableDeclaration();\n    let identifier = declarator.identifier;\n    let assignment = declarator.assignment;\n    declarations.push(new VariableDeclarator(identifier, assignment));\n    while(this.matchPunctuators(',')) {\n      this.expectPunctuators(',');\n      declarator = this.parseVariableDeclaration();\n      identifier = declarator.identifier;\n      assignment = declarator.assignment;\n      declarations.push(new VariableDeclarator(identifier, assignment));\n    }\n    let decl = new VariableDeclaration(declarations, kind, exported);\n\n    return decl;\n  }\n\n  parseBlock(insideIteration, insideFunction, ctor = BlockStatement) {\n    this.log(`parseBlock()`);\n    const statements = [];\n    this.expectPunctuators('{');\n    do {\n      if(this.matchStatement()) {\n        let stmt;\n\n        stmt = this.parseStatement(insideIteration, insideFunction);\n        statements.push(stmt);\n      }\n    } while(!this.matchPunctuators('}'));\n    this.expectPunctuators('}');\n    //console.log(\"statements:\", statements);\n\n    return new ctor(statements);\n  }\n\n  parseList(insideIteration = false, insideFunction = false, check = p => false) {\n    this.log(`parseList()`);\n\n    const statements = [];\n    while(this.matchStatement()) {\n      statements.push(this.parseStatement(insideIteration, insideFunction));\n      if(check(this)) break;\n    }\n    return new StatementList(statements);\n  }\n\n  parseObject(isClass = false, args = []) {\n    //let ctor = ObjectExpression;\n    let ctor = isClass ? ClassDeclaration : ObjectExpression;\n    //console.log('parseObject', ctor, isClass);\n    this.log(`parseObject()`);\n    let properties = [];\n    this.expectPunctuators('{');\n    while(!this.matchPunctuators('}')) {\n      let kind = 'init';\n      let _static = false;\n      let spread = false;\n      let member = null,\n        value = null;\n      let is_async = false,\n        is_generator = false,\n        computed = false;\n      //let isGenerator = false;\n      if(this.matchPunctuators('...')) {\n        this.expectPunctuators('...');\n        spread = true;\n      }\n      if(spread) {\n        value = this.parseAssignmentExpression();\n        value = new SpreadElement(value);\n        //console.log('value:', value);\n        properties.push(value);\n      } else {\n        if(this.matchKeywords('async')) {\n          this.expectKeywords('async');\n          is_async = true;\n        }\n        if(isClass && this.matchKeywords('static')) {\n          this.expectKeywords('static');\n          _static = true;\n        }\n        if(this.matchIdentifier() && ['get', 'set'].indexOf(this.token.value) != -1) {\n          let getOrSet = this.token.value;\n          member = this.expectIdentifier();\n          if(!this.matchPunctuators('(')) {\n            member = null;\n            kind = getOrSet;\n          }\n        }\n        if(this.matchPunctuators('*')) {\n          this.expectPunctuators('*');\n          is_generator = true;\n        }\n        if(!member) {\n          if(this.matchIdentifier(true)) {\n            member = this.expectIdentifier(true);\n          } else if(this.matchPunctuators('[')) {\n            this.expectPunctuators('[');\n            member = this.parseAssignmentExpression();\n            computed = true;\n            this.expectPunctuators(']');\n          } else if(this.matchPunctuators([':'])) {\n            if(kind == 'get') {\n              member = new Identifier('get');\n              kind = 'method';\n            }\n          } else if(this.matchLiteral()) {\n            member = this.expectLiteral();\n          }\n        }\n        if(this.matchPunctuators([',', '}'])) {\n          value = member;\n        } else if(this.matchPunctuators('(')) {\n          value = this.parseFunctionParametersAndBody(member, is_async, is_generator);\n          if(value.id) member = value.id;\n        } else if(this.matchPunctuators('=')) {\n          this.expectPunctuators('=');\n          value = this.parseAssignmentExpression();\n          if(this.matchPunctuators(';')) this.expectPunctuators(';');\n          if(!isClass) ctor = ObjectPattern;\n        } else if(this.matchPunctuators(':')) {\n          this.expectPunctuators(':');\n          if(!this.matchAssignmentExpression()) break;\n          value = this.parseAssignmentExpression();\n          if(!isClass) ctor = ObjectExpression;\n        } else if(typeof member == 'object' && member !== null && 'value' in member) {\n          //ctor = ObjectPattern;\n        }\n        if(member == null && (kind == 'get' || kind == 'set')) {\n          member = new Identifier(kind);\n          kind = 'method';\n        }\n        if(member instanceof Identifier && member.name == 'constructor') {\n          kind = member.name;\n          member = null;\n        }\n        let memberCtor = (id, value, _, kind) => new Property(id, value, kind, value instanceof FunctionLiteral, id === value, !(id instanceof Identifier));\n        if(ctor === ObjectPattern) memberCtor = (id, value, element) => new BindingProperty(id, element, value);\n        else if(/*!(value instanceof FunctionDeclaration) && */ isClass) memberCtor = (id, value, _, kind) => new MethodDefinition(id, value, kind, false, _static);\n        if(spread) member = new SpreadElement(value);\n        else if((value !== null && member != null && member.id === undefined) || kind != 'method') member = memberCtor(member, value, null, kind);\n        properties.push(member);\n      }\n      if(this.matchPunctuators('}')) break;\n      if(this.matchPunctuators(',')) this.expectPunctuators(',');\n    }\n    this.expectPunctuators('}');\n    if(ctor === ObjectPattern) {\n      if(!(properties instanceof Array)) properties = Object.entries(properties).map(([key, value]) => new BindingProperty(new Identifier(key), value ? new Identifier(value) : new Identifier(key)));\n    }\n    let ret = new ctor(...[...args, ctor === ClassDeclaration ? new ClassBody(properties) : properties]);\n    if(this.matchPunctuators(['?.', '.'])) ret = this.parseRemainingMemberExpression(ret);\n\n    function BindingProperty(property, id, initializer) {\n      let shorthand = id === property;\n      if(initializer) id = new AssignmentPattern(id, initializer);\n      return new AssignmentProperty(property, id, shorthand);\n    }\n    return ret;\n  }\n\n  parseArray() {\n    this.log(`parseArray()`);\n    let object,\n      members = [];\n    this.expectPunctuators('[');\n\n    while(!this.matchPunctuators(']')) {\n      let spread = false,\n        element;\n\n      if(this.matchPunctuators('...')) {\n        this.expectPunctuators('...');\n        spread = true;\n      }\n\n      //if(this.matchAssignmentExpression()) {\n      element = this.parseAssignmentExpression();\n      //}\n      //console.log(\"array element:\", element);\n\n      if(spread) {\n        element = new SpreadElement(element);\n      }\n\n      members.push(element);\n\n      if(this.matchPunctuators(',')) this.expectPunctuators(',');\n    }\n    this.expectPunctuators(']');\n    object = new ArrayExpression(members);\n\n    /*\n    if(this.matchPunctuators(\".\")) {\n      object = this.parseRemainingMemberExpression(object);\n    }*/\n    return object;\n  }\n\n  parseJSXTag() {\n    let closed = false,\n      selfClosing = false,\n      name,\n      value,\n      tag,\n      attrs = {},\n      spread = null;\n    this.lexer.noRegex = true;\n\n    this.expectPunctuators('<');\n\n    if(this.matchPunctuators('/')) {\n      this.expectPunctuators('/');\n      closed = true;\n    }\n    if(this.matchIdentifier()) {\n      tag = this.expectIdentifier();\n      //console.log('tag:', tag);\n\n      if(this.matchPunctuators(['.', '['])) tag = this.parseRemainingMemberExpression(tag);\n      //console.log('token:', this.token);\n    }\n    for(;;) {\n      if(this.matchPunctuators('{')) {\n        this.expectPunctuators('{');\n        this.expectPunctuators('...');\n\n        spread = this.parseAssignmentExpression();\n\n        this.expectPunctuators('}');\n        continue;\n      } else if(this.matchIdentifier()) name = this.expectIdentifier().value;\n      else break;\n\n      if(this.matchPunctuators('=')) {\n        this.expectPunctuators('=');\n        if(this.matchPunctuators('{')) {\n          this.expectPunctuators('{');\n          value = this.parseExpression();\n          this.expectPunctuators('}');\n        } else {\n          value = this.expectLiteral();\n        }\n      } else {\n        value = new Literal(true);\n      }\n      attrs[name] = value;\n    }\n    if(this.matchPunctuators('/')) {\n      this.expectPunctuators('/');\n      selfClosing = true;\n    }\n    this.expectPunctuators('>');\n    this.lexer.noRegex = false;\n\n    let attributeStr = Object.entries(attrs)\n      .map(([name, value]) => ` ${name}=\"${value.value}\"`)\n      .join('')\n      .substring(0, 100);\n\n    //console.log(`JSX <${closed ? \"/\" : \"\"}${tag.value}${attributeStr}... ${selfClosing ? \"/\" : \"\"}>`);\n\n    return new JSXLiteral(tag.value, attrs, closed, selfClosing, spread);\n  }\n\n  parseJSX(depth = 0) {\n    let tok2, tok3;\n    this.log(`parseJSX(${depth})`);\n    let members = [];\n    for(;;) {\n      this.lexer.noRegex = true;\n      if(!this.matchPunctuators('<')) break;\n      tok2 = this.lookahead(1);\n      if(tok2.value == '/') break;\n      let tag = this.parseJSXTag();\n      members.push(tag);\n      let jsx = members[members.length - 1];\n      jsx.children = [];\n      if(jsx.selfClosing && depth == 0) break;\n      if(this.matchPunctuators('{')) {\n        this.expectPunctuators('{');\n        let obj;\n        if(this.matchLiteral()) obj = this.expectLiteral();\n        else obj = this.parseAssignmentExpression();\n        //console.log('obj', obj);\n        jsx.children.push(obj);\n        this.expectPunctuators('}');\n      }\n      if(!tag.closing && !tag.selfClosing) {\n        let toks = [];\n        while(!this.matchPunctuators('<')) {\n          let tok = this.consume();\n          toks.push(tok.value);\n          //console.log('tok:', tok);\n        }\n        let text = toks.join(' ');\n        if(text != '') jsx.children.push(new Literal(text));\n      }\n      if(jsx.selfClosing) continue;\n      this.lexer.noRegex = true;\n\n      if(this.matchPunctuators('<')) {\n        tok2 = this.lookahead(1);\n        if(tok2.value != '/' && !jsx.closing && !jsx.selfClosing) {\n          jsx.children = jsx.children.concat(this.parseJSX(depth + 1));\n        }\n      }\n\n      if(this.matchPunctuators('<')) {\n        tok2 = this.lookahead(1);\n        tok3 = this.lookahead(2);\n        if(tok2.value == '/' && tok3.value == tag.tag) {\n          this.tokens = [];\n          this.expectPunctuators('>');\n          //console.log('end tok:', { depth });\n          depth--;\n          //break;\n        }\n      }\n    }\n    if(depth == 0) {\n      this.lexer.noRegex = false;\n      return members[0];\n    }\n    return members;\n  }\n\n  parseVariableStatement(exported = false) {\n    this.log(`parseVariableStatement()`);\n    let keyw = this.expectKeywords(['var', 'let', 'const']);\n    let decl = this.parseVariableDeclarationList(keyw.value, exported);\n    if(this.matchPunctuators(';')) this.expectPunctuators(';');\n    //console.log(\"ast:\",ast);\n\n    if(exported) {\n      decl = new ExportNamedDeclaration(decl, null);\n    }\n\n    //\n    return decl;\n  }\n\n  parseImportDeclaration(toplevel = false) {\n    //this.log('parseImportDeclaration()');\n    this.expectKeywords('import');\n    let items = [];\n\n    if(toplevel) {\n      let item;\n      if(this.matchLiteral()) {\n        return new ImportDeclaration(null, this.expectLiteral());\n      }\n      while(true) {\n        if(this.matchPunctuators('{')) {\n          items = items.concat(this.parseModuleItems());\n        } else if(this.matchIdentifier() || this.matchPunctuators('*')) {\n          item = this.parseImportSpecifier(this.matchIdentifier());\n          items.push(item);\n        }\n        if(this.matchPunctuators(',')) {\n          this.expectPunctuators(',');\n          continue;\n        }\n        break;\n      }\n      this.expectIdentifier('from');\n      const sourceFile = this.parseExpression(false, false);\n      this.expectPunctuators(';');\n      return new ImportDeclaration(items, sourceFile);\n    }\n    let object = new Identifier('import');\n    return this.parseRemainingCallExpression(object);\n  }\n\n  parseImportSpecifier(default_specifier = false) {\n    let name;\n    let decl;\n    if(this.matchPunctuators('*')) {\n      this.expectPunctuators('*');\n      this.expectKeywords('as');\n      name = this.expectIdentifier();\n\n      return new ImportNamespaceSpecifier(name);\n    }\n    name = this.expectIdentifier();\n\n    if(this.matchKeywords('as')) {\n      this.expectKeywords('as');\n      decl = this.expectIdentifier();\n    } else {\n      decl = name;\n    }\n    return default_specifier ? new ImportDefaultSpecifier(decl) : new ImportSpecifier(name, decl);\n  }\n\n  parseModuleItems(method = 'parseImportSpecifier') {\n    // console.debug(\"parseModuleItems\",{method});\n    this.expectPunctuators('{');\n    let items = [];\n    1;\n    while(!this.matchPunctuators('}')) {\n      let item;\n      item = this[method]();\n      items.push(item);\n      if(this.matchPunctuators(',')) {\n        this.expectPunctuators(',');\n        continue;\n      }\n      break;\n    }\n    this.expectPunctuators('}');\n    return items;\n  }\n\n  parseExportSpecifier() {\n    let name;\n    let decl;\n\n    name = this.expectIdentifier(true);\n\n    if(this.matchKeywords('as')) {\n      this.expectKeywords('as');\n      decl = this.expectIdentifier();\n    } else {\n      decl = name;\n    }\n    return new ExportSpecifier(name, decl);\n  }\n\n  parseExportDeclaration() {\n    let stmt,\n      is_async = false;\n    this.log('parseExportDeclaration()');\n    if(this.matchKeywords('export')) this.expectKeywords('export');\n    if(this.matchKeywords('async')) {\n      this.expectKeywords('async');\n      is_async = true;\n    }\n\n    if(this.matchKeywords('default')) {\n      this.expectKeywords('default');\n      stmt = this.parseAssignmentExpression();\n      //console.log(\"default export:\", stmt);\n\n      stmt = new ExportDefaultDeclaration(stmt);\n    } else if(this.matchKeywords('class')) {\n      stmt = this.parseClass(true);\n    } else if(this.matchKeywords('function')) {\n      stmt = this.parseFunction(true, is_async);\n    } else if(this.matchKeywords(['var', 'let', 'const'])) {\n      stmt = this.parseVariableStatement(true);\n    } else if(this.matchIdentifier(true)) {\n      const id = this.expectIdentifier();\n\n      stmt = new ExportNamedDeclaration(this.parseAssignmentExpression(), null);\n    } else if(this.matchPunctuators('{')) {\n      let items = this.parseModuleItems('parseExportSpecifier');\n\n      let source;\n\n      if(this.matchKeywords('from')) {\n        this.expectKeywords('from');\n        //console.log('export from!');\n        source = this.expectLiteral();\n      } else if(this.matchIdentifier('from')) {\n        this.expectIdentifier('from');\n        //console.log('export from!');\n        source = this.expectLiteral();\n      }\n      stmt = new ExportNamedDeclaration(null, items, source);\n\n      //this.expectPunctuators('}');\n    }\n\n    if(this.matchPunctuators(';')) this.expectPunctuators(';');\n\n    //console.log('parseExportDeclaration', { stmt, token: this.token.value });\n\n    return stmt;\n    //return this.parseVariableStatement(true);\n  }\n\n  parseDecoratorStatement() {\n    this.log('parseDecoratorStatement()');\n    let st = null;\n\n    while(true) {\n      this.expectPunctuators('@');\n      let id = this;\n      let call = this.parseNewOrCallOrMemberExpression(false, true);\n      let identifier = this.expectIdentifier();\n\n      st = this.parseRemainingCallExpression(identifier);\n\n      break;\n    }\n\n    return st;\n  }\n\n  parseExpressionStatement() {\n    this.log(`parseExpressionStatement()`);\n\n    const expression = this.parseExpression();\n\n    if(this.matchPunctuators(';')) this.expectPunctuators(';');\n    return new ExpressionStatement(expression);\n  }\n\n  parseIfStatement(insideIteration, insideFunction) {\n    this.expectKeywords('if');\n    this.expectPunctuators('(');\n    const test = this.parseExpression();\n    this.expectPunctuators(')');\n    const consequent = this.parseStatement(insideIteration, insideFunction);\n    if(consequent === null) {\n      throw this.error('Expecting statement for if-statement', this.position());\n    }\n    let alternate = null;\n    if(this.matchKeywords('else')) {\n      this.expectKeywords('else');\n      alternate = this.parseStatement(insideIteration, insideFunction);\n      if(alternate === null) {\n        throw this.error('Expecting statement for else block in if-statement');\n      }\n    }\n    return new IfStatement(test, consequent, alternate);\n  }\n\n  parseWhileStatement(insideFunction) {\n    this.expectKeywords('while');\n    this.expectPunctuators('(');\n    const test = this.parseExpression();\n    this.expectPunctuators(')');\n    const statement = this.parseStatement(true, insideFunction);\n    if(statement === null) {\n      throw this.error('Expecting statement for while-statement', this.position());\n    }\n    return new WhileStatement(test, statement);\n  }\n\n  parseDoWhileStatement(insideFunction) {\n    this.expectKeywords('do');\n    const statement = this.parseStatement(true, insideFunction, false);\n    if(statement === null) {\n      throw this.error('Expecting statement for do-while-statement', this.position());\n    }\n    this.expectKeywords('while');\n    this.expectPunctuators('(');\n    const test = this.parseExpression();\n    this.expectPunctuators(')');\n    return new DoWhileStatement(test, statement);\n  }\n\n  parseForStatement(insideFunction) {\n    let async = false;\n    this.expectKeywords('for');\n    if(this.matchKeywords('await')) {\n      this.expectKeywords('await');\n      async = true;\n    }\n    this.expectPunctuators('(');\n    let isForInStatement = false;\n    let operator = null;\n    let left = null;\n    let right = null;\n    let init = null;\n    let test = null;\n    let update = null;\n    if(this.matchKeywords(['var', 'let', 'const'])) {\n      //Can be either of the following forms:\n      //for( var VariableDeclarationList ; Expression(opt) ; Expression(opt) )\n      //Statement for( var Identifier Initializer(opt) in Expression ) Statement\n      let keyw = this.expectKeywords(['var', 'let', 'const']);\n      const ast = this.parseVariableDeclarationList(keyw.value, false);\n      if((keyw = this.matchKeywords(['in', 'of']))) {\n        isForInStatement = true;\n        left = ast;\n        //Make sure the ast contains only one identifier and at most one\n        //initializer\n        if(ast.declarations.length !== 1) {\n          throw this.error(`Expecting only one Identifier and at most one Initializer in a ForIn statement`);\n        }\n        operator = this.expectKeywords(['in', 'of']).value;\n        right = this.parseExpression();\n      } else {\n        init = ast;\n        this.expectPunctuators(';');\n        test = this.parseExpression(true);\n        this.expectPunctuators(';');\n        update = this.parseExpression(true);\n      }\n    } else {\n      //Can be either of the following forms:\n      //for( Expression(opt) ; Expression(opt) ; Expression(opt) ) Statement\n      //for( LeftHandSideExpression in Expression ) Statement\n      init = left = this.matchPunctuators(';') ? null : this.parseExpression(true);\n\n      if(this.matchPunctuators(';')) {\n        this.expectPunctuators(';');\n        test = this.matchPunctuators(';') ? null : this.parseExpression(true);\n        this.expectPunctuators(';');\n        update = this.matchPunctuators(')') ? null : this.parseExpression(true);\n      } else {\n        isForInStatement = true;\n\n        if(left instanceof BinaryExpression && left.operator == 'in') {\n          right = left.right;\n          left = left.left;\n          operator = left.operator;\n        } else {\n          operator = this.expectKeywords(['in', 'of']).value;\n          right = this.parseExpression();\n        }\n      }\n    }\n    this.expectPunctuators(')');\n    const statement = this.parseStatement(true, insideFunction);\n    if(statement === null) {\n      throw this.error('Expecting statement for for-statement', this.position());\n    }\n    //console.log(\"for..in operator:\", operator);\n\n    if(isForInStatement) return new (operator == 'in' ? ForInStatement : ForOfStatement)(left, right, statement, async);\n    return new ForStatement(init, test, update, statement);\n  }\n\n  parseIterationStatement(insideFunction) {\n    this.log(`parseIterationStatement()`);\n    if(this.matchKeywords('while')) {\n      return this.parseWhileStatement(insideFunction);\n    } else if(this.matchKeywords('do')) {\n      return this.parseDoWhileStatement(insideFunction);\n    }\n    return this.parseForStatement(insideFunction);\n  }\n\n  parseSwitchStatement(insideFunction) {\n    let kw, sv, cv, stmt;\n    this.expectKeywords('switch');\n    this.expectPunctuators('(');\n    sv = this.parseExpression();\n    this.expectPunctuators(')');\n    this.expectPunctuators('{');\n    let cases = [];\n    while(true) {\n      kw = this.expectKeywords(['case', 'default']);\n      cv = kw.value == 'default' ? null : this.parseExpression();\n      this.expectPunctuators(':');\n\n      stmt = this.parseList(true, insideFunction, p => p.matchKeywords(['case', 'default']));\n\n      cases.push(new SwitchCase(cv, stmt));\n\n      if(this.matchPunctuators('}')) break;\n    }\n    this.expectPunctuators('}');\n    return new SwitchStatement(sv, cases);\n  }\n\n  parseTryStatement(insideIteration, insideFunction) {\n    let body,\n      parameter = null,\n      catch_block,\n      finally_block;\n    this.expectKeywords('try');\n    //this.expectPunctuators(\"{\");\n    body = this.parseBlock(insideIteration, insideFunction);\n\n    if(this.matchKeywords('catch')) {\n      this.expectKeywords('catch');\n      parameter = [];\n\n      if(this.matchPunctuators('(')) {\n        this.expectPunctuators('(');\n        //Parse optional parameter list\n        if(this.matchIdentifier()) parameter = this.expectIdentifier();\n        this.expectPunctuators(')');\n      }\n\n      //Parse function body\n      catch_block = this.parseStatement(insideIteration, insideFunction);\n    }\n    if(this.matchKeywords('finally')) {\n      this.expectKeywords('finally');\n\n      finally_block = this.parseStatement(insideIteration, insideFunction);\n    }\n\n    let object = new TryStatement(body, new CatchClause(parameter, catch_block), finally_block);\n\n    if(this.matchPunctuators('(')) {\n      return this.parseRemainingCallExpression(object);\n    }\n\n    return object;\n  }\n\n  parseWithStatement(insideIteration, insideFunction) {\n    this.expectKeywords('with');\n    this.expectPunctuators('(');\n    const test = this.parseExpression();\n    this.expectPunctuators(')');\n    const statement = this.parseStatement(insideIteration, insideFunction);\n    if(statement === null) {\n      throw this.error('Expecting statement for with-statement', this.position());\n    }\n    return new WithStatement(test, statement);\n  }\n\n  parseThrowStatement() {\n    this.expectKeywords('throw');\n    const expression = this.parseExpression();\n    return new ThrowStatement(expression);\n  }\n  parseYieldStatement() {\n    let yield_generator = false;\n\n    this.expectKeywords('yield');\n\n    if(this.matchPunctuators('*')) {\n      this.expectPunctuators('*');\n      yield_generator = true;\n    }\n\n    const expression = this.parseExpression();\n    return new YieldExpression(expression, yield_generator);\n  }\n\n  parseContinueStatement() {\n    this.expectKeywords('continue');\n    let id;\n    if(this.matchIdentifier()) id = this.expectIdentifier();\n\n    this.expectPunctuators(';');\n    return new ContinueStatement(id);\n  }\n\n  parseBreakStatement() {\n    this.expectKeywords('break');\n    let id;\n    if(this.matchIdentifier()) id = this.expectIdentifier();\n\n    this.expectPunctuators(';');\n    return new BreakStatement(id);\n  }\n\n  parseReturnStatement() {\n    this.log(`parseReturnStatement()`);\n    this.expectKeywords('return');\n    let expression = null;\n\n    if(!this.matchPunctuators(';')) expression = this.parseAssignmentExpression();\n    // console.log('expression:', expression);\n    if(this.matchPunctuators(';')) this.expectPunctuators(';');\n    return new ReturnStatement(expression);\n  }\n\n  parseStatement(insideIteration, insideFunction, exported) {\n    this.log(`parseStatement()`, inspect(this.token));\n    //Parse Block\n    let t = this.token || this.lexer.tokens[this.lexer.tokenIndex];\n    let defaultExport = false;\n\n    if(exported) {\n      if(this.matchKeywords('default')) defaultExport = this.expectKeywords('default');\n    }\n\n    if(this.matchPunctuators('{')) {\n      return this.parseBlock(insideIteration, insideFunction);\n    } else if(this.matchPunctuators('@')) {\n      return this.parseDecorator();\n\n      //Parse constructor() super[.method](calls)\n      /* } else if(insideFunction && (this.matchKeywords(\"super\") || this.matchIdentifier(\"super\"))) {\n      return this.parseNewOrCallOrMemberExpression(false, true);\n*/\n      //Parse Variable Statement\n    } else if(this.matchKeywords(['var', 'let', 'const'])) {\n      let stmt = this.parseVariableStatement();\n\n      if(exported) {\n        stmt = new ExportNamedDeclaration(stmt, null);\n      }\n      return stmt;\n    } else if(this.matchKeywords('import')) {\n      //this.log(`parseStatement()`, inspect(this.token));\n      return this.parseImportDeclaration(!insideIteration && !insideFunction);\n      //Parse Empty Statement\n    } else if(this.matchKeywords('class')) {\n      return this.parseClass();\n    } else if(this.matchPunctuators(';')) {\n      this.expectPunctuators(';');\n      return new EmptyStatement();\n    }\n\n    //Parse If Statement\n    else if(this.matchKeywords('if')) {\n      return this.parseIfStatement(insideIteration, insideFunction);\n\n      //Parse Iteration Statement\n    } else if(this.matchKeywords(['while', 'for', 'do'])) {\n      return this.parseIterationStatement(insideFunction);\n\n      //Parse Switch Statement\n    } else if(this.matchKeywords('switch')) {\n      return this.parseSwitchStatement(insideFunction);\n    } else if(this.matchKeywords('try')) {\n      return this.parseTryStatement(insideIteration, insideFunction);\n\n      //Parse With Statement\n    } else if(this.matchKeywords('throw')) {\n      return this.parseThrowStatement();\n    } else if(this.matchKeywords('yield')) {\n      return this.parseYieldStatement();\n    } else if(this.matchKeywords('with')) {\n      return this.parseWithStatement(insideIteration, insideFunction);\n    } else if(this.matchKeywords('continue')) {\n      if(insideIteration) {\n        return this.parseContinueStatement();\n      }\n      throw this.error(`continue; statement can only be inside an iteration`);\n    } else if(this.matchKeywords('break')) {\n      let brk = this.parseBreakStatement();\n      if(!insideIteration && brk.label === undefined) throw this.error(`break; statement can only be inside an iteration or with a label`, this.position());\n      return brk;\n    } else if(this.matchKeywords('return')) {\n      if(insideFunction) {\n        return this.parseReturnStatement();\n      }\n      throw this.error(`return statement can only be inside a function`, this.position());\n    } /*if(this.matchAssignmentExpression())*/ //Parse Expression Statement\n    else {\n      let stmt = this.parseExpressionStatement();\n      if(stmt instanceof Identifier && this.matchPunctuators(':')) {\n        this.expectPunctuators(':');\n        stmt = new LabeledStatement(stmt, this.parseStatement(insideIteration, insideFunction, exported));\n\n        //console.debug('ExpressionStatement:', stmt);\n      }\n      if(!stmt) throw this.error('No expression statement');\n\n      if(defaultExport) {\n        if(stmt instanceof ClassDeclaration) stmt = new AnonymousDefaultExportedClassDeclaration(stmt.id, stmt.superClass, stmt.body);\n        else if(stmt instanceof FunctionLiteral) stmt = new AnonymousDefaultExportedFunctionDeclaration(stmt.id, stmt.params, stmt.body, stmt.async, stmt.generator);\n        else stmt = new ExportDefaultDeclaration(stmt);\n      }\n      return stmt;\n    }\n\n    /* else {\n      const { column, line } = this.lexer;\n      const tok = t;  //this.token;\n      let m = this.matchKeywords('super');\n      const { type, value } = tok; //lexer.tokens[0];\n      throw this.error(`Unexpected ${type}-token \"${value}\" ${m} `, this.position());\n    }*/\n  }\n\n  parseClass(exported = false) {\n    this.expectKeywords('class');\n    //Parse name of the function\n    let identifier = null;\n    let extending = null;\n\n    if(this.matchIdentifier()) identifier = this.expectIdentifier();\n\n    if(this.matchKeywords('extends')) {\n      this.expectKeywords('extends');\n      extending = this.parseExpression();\n    }\n\n    //Parse class body\n    let decl = this.parseObject(true, [identifier, extending]);\n\n    //console.log(\"parseClass decl=\", decl);\n    if(this.matchPunctuators(';')) this.expectPunctuators(';');\n    //let decl = new ClassDeclaration(identifier, extending, members);\n\n    if(exported) decl = new ExportNamedDeclaration(decl);\n\n    return decl;\n  }\n\n  parseParameters() {\n    const params = [];\n    let rest_of = false,\n      parens = false;\n    const checkRestOf = (parser, match) => {\n      if(parser.matchPunctuators('...')) {\n        parser.expectPunctuators('...');\n        rest_of = true;\n      }\n      parser.matchIdentifier(true);\n      return parser.matchAssignmentExpression();\n    };\n    if(this.matchPunctuators('(')) {\n      this.expectPunctuators('(');\n      parens = true;\n    }\n    while(checkRestOf(this)) {\n      let param, defaultValue;\n\n      if(!rest_of && this.matchPunctuators(['{', '['])) param = this.parseBindingPattern();\n      else param = this.expectIdentifier();\n\n      if(!rest_of && this.matchPunctuators('=')) {\n        this.expectPunctuators('=');\n        defaultValue = this.parseExpression(false, false);\n      }\n\n      if(rest_of) param = new RestElement(param);\n      else if(defaultValue) param = new AssignmentPattern(param, defaultValue);\n\n      params.push(param);\n      if(rest_of) break;\n      if(rest_of || !this.matchPunctuators(',')) break;\n      this.expectPunctuators(',');\n    }\n    // console.log('parseParameters', params);\n    if(parens) this.expectPunctuators(')', params);\n    return params;\n  }\n\n  parseFunction(exported = false, isAsync = false) {\n    let isGenerator = false;\n    let hasKeyword = false,\n      hasIdentifier = false;\n\n    if(this.matchKeywords('async')) {\n      this.expectKeywords('async');\n      isAsync = true;\n    }\n\n    if(this.matchKeywords('function')) {\n      hasKeyword = true;\n      this.expectKeywords('function');\n    }\n\n    if(this.matchPunctuators('*')) {\n      this.expectPunctuators('*');\n      isGenerator = true;\n    }\n\n    //Parse name of the function\n    let identifier = null;\n    if(this.matchIdentifier(true)) {\n      hasIdentifier = true;\n      identifier = this.expectIdentifier(true);\n    }\n\n    if(isAsync && !hasKeyword && !hasIdentifier) {\n      //  if(this.matchPunctuators())\n      return new Identifier('async');\n    }\n\n    let func = this.parseFunctionParametersAndBody(identifier, isAsync, isGenerator);\n\n    if(exported) func = new ExportNamedDeclaration(func);\n\n    return func;\n  }\n\n  parseFunctionParametersAndBody(identifier, isAsync = false, isGenerator = false) {\n    let parameters = this.parseParameters();\n\n    //Parse function body\n    const body = this.parseBlock(false, true, FunctionBody);\n\n    let func = new FunctionDeclaration(identifier, parameters, body, isAsync, isGenerator);\n\n    if(this.matchPunctuators('(')) return this.parseRemainingCallExpression(func);\n\n    return func;\n  }\n\n  parseSourceElement() {\n    let exported = false;\n    if(this.matchKeywords('export')) {\n      /*      this.expectKeywords('export');\n      exported = true;\n\n      if(this.matchKeywords('default')) */ return this.parseExportDeclaration();\n    } else if(this.matchKeywords('class')) {\n      return this.parseClass(exported);\n    } else if(this.matchKeywords('function')) {\n      return this.parseFunction(exported);\n    }\n    return this.parseStatement(false, false, exported);\n  }\n\n  parseProgram() {\n    const body = [];\n\n    body.push(this.parseSourceElement());\n\n    //Check to see if there are more SourceElement\n    while(this.matchStatement() || this.matchKeywords('function')) {\n      let sourceElement = this.parseSourceElement();\n\n      //console.log(\"Source element: \", sourceElement);\n      body.push(sourceElement);\n    }\n\n    if(this.tokens.length >= 1 && this.tokens[0].type !== Token.types.eof) {\n      throw this.error(`Didn't consume all tokens: ${inspect(this.tokens[0])}`);\n    }\n\n    return new Program('module', body);\n  }\n\n  static instrumentate = Util.once(instrumentateParser);\n}\n\nlet depth = 0;\nlet newNodes = [];\nlet nodes = [];\nlet diff = [];\nlet fns = [];\n//var stack = [{methodName: 'parse', tokens:[]}];\n\nconst methodNames = [...Util.getMethodNames(ECMAScriptParser.prototype)];\nlet methods = {};\n\nconst quoteArray = arr => (arr.length < 5 ? `[${arr.join(', ')}]` : `[${arr.length}]`);\n\nconst quoteList = (l, delim = ' ') => '' + l.map(t => id(typeof t == 'string' ? `'${t}'` : '' + t)).join(delim) + '';\nconst quoteToks = l => quoteList(l.map(t => t.value));\nconst quoteObj = i => (i instanceof Array ? quoteArg(i) : Util.className(i) == 'Object' ? Object.keys(i) : typeof i == 'object' ? Util.className(i) : `'${i}'`);\n\nconst quoteArg = a => a.map(i => (Util.isObject(i) && i.value !== undefined ? i.value : quoteObj(i)));\nconst quoteStr = s => s.replace(/\\n/g, '\\\\n');\n\nParser.prototype.trace = function() {\n  return this.stack\n    .map(\n      frame =>\n        `${(frame.tokenIndex + '').padStart(5)} ${frame.position.toString().padStart(6)} ${(frame.methodName + '(' + quoteList(frame.args || [], ',') + ')').padEnd(50)} ${(frame.tokens || []).join(\n          ' '\n        )}`\n    )\n    .join('\\n');\n};\n\nParser.prototype.onToken = function(tok) {\n  let i = 0;\n  while(i < this.stack.length && !/parse/.test(this.stack[i].methodName)) i++;\n  let frame = this.stack[0];\n  let str = tok.value.trim();\n  //console.log(`${frame.methodName} consumed '${str}'`);\n  this.stack[i].tokens.push(str);\n};\n\nconst instrumentate = (methodName, fn = methods[methodName]) => {\n  const { loc } = Factory;\n\n  const printer = new Printer();\n\n  let esfactory = function(...args) {\n    let { lexer, stack } = this;\n    let { tokenIndex } = lexer;\n\n    //console.log(\"esfactory instrumentate tokens.length=\",this.tokens.length);\n\n    ///parse/.test(methodName) &&\n    let position = this.position() || this.lexer.position();\n    let depth = this.stack.length;\n    let entry = {\n      methodName,\n      start: tokenIndex - this.tokens.length,\n      /*args,*/ position,\n      depth\n    };\n    this.stack.unshift(entry);\n\n    let s = ('' + position.toString(false)).padEnd((position.file || '').length + 6) + ` ${(depth + '').padStart(4)} ${this.stack[0].methodName}`;\n    let msg = s + ` ${quoteList(this.stack[depth].tokens || [])}` + `  ${quoteArg(args)}`;\n\n    //if(!/match/.test(methodName)) console.log(msg);\n    //console.log('methodName:', methodName);\n\n    let ret = methods[methodName].call(this, ...args);\n    let { token } = this;\n    let start = this.consumed || 0;\n    let firstTok = this.numToks || 0;\n    let end = (token && token.pos) || lexer.pos;\n    let lastTok = lexer.tokenIndex - this.tokens.length;\n\n    //msg = s + ` ${quoteList(this.stack[depth].tokens)}`;\n    entry.end = lastTok;\n\n    if(ret instanceof ESNode) this.onReturnNode(ret, entry, this.stack);\n\n    let tmp = this.stack[0].tokens || [];\n    while(this.stack.length > depth) this.stack.shift();\n    //if(this.stack[0]) this.stack[0].tokens = this.stack[0].tokens || tmp;\n\n    //if(token) lastTok--;\n    newNodes = [];\n    for(let [node, path] of deep.iterate(nodes, n => n instanceof ESNode)) {\n      const name = Util.className(node);\n      newNodes.push(name);\n    }\n\n    let parsed = lexer.source.substring(start, end);\n    this.consumed = end;\n\n    if(parsed.length) parsed = parsed.replace(/\\n/g, '\\\\n');\n\n    let lexed = lexer.tokens.slice(firstTok /*, lastTok*/);\n    this.numToks = lastTok;\n    let annotate = [];\n\n    const objectStr = typeof ret == 'object' ? Util.className(ret) /* + `{ ${printer.print(ret)} }`*/ : ret;\n\n    annotate.push(`returned: ${objectStr}`);\n\n    if(lexed.length) annotate.push(`lexed[${lexed.map(t => Util.abbreviate(quoteStr(t.value), 40)).join(', ')}]`);\n    if(nodes.length) annotate.push(`yielded: ` + quoteArray(newNodes));\n    nodes.splice(0, nodes.length);\n    depth--;\n\n    if(annotate.length) {\n      msg = msg + '    ' + annotate.join(', ');\n    }\n\n    if(this.debug) if (ret || !/match/.test(methodName)) console.log(msg);\n\n    return ret;\n  };\n  return esfactory;\n};\n\nfunction instrumentateParser() {\n  Object.assign(\n    ECMAScriptParser.prototype,\n    Util.getMethodNames(new ECMAScriptParser(), 2)\n      .filter(name => /^(expect|parse)/.test(name))\n      .reduce((acc, methodName) => {\n        let fn = ECMAScriptParser.prototype[methodName];\n        methods[methodName] = fn;\n\n        return { ...acc, [methodName]: instrumentate(methodName, fn) };\n      }, {})\n  );\n}\n\nconst timeout = ms =>\n  new Promise((resolve, reject) => {\n    setTimeout(() => resolve(), ms);\n  });\n\nParser.parse = function parse(sourceText, prefix) {\n  const parser = new ECMAScriptParser(sourceText, prefix);\n  //Parser.instance = parser;\n  //await timeout(1000).catch(e => console.log(\"timeout error:\",e));\n  return parser.parseProgram();\n};\n//console.log(\"methods:\", methodNames);\n//console.log(\"fn:\" + ECMAScriptParser.prototype.parseProgram);\n\nexport default Parser;",
			"file": "lib/ecmascript/parser.js",
			"file_size": 75106,
			"file_write_time": 133367917789355794,
			"settings":
			{
				"buffer_size": 75104,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAAAAAAAAAAAAAgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/eagle/components/grid.js",
			"settings":
			{
				"buffer_size": 3017,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					20,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAOoEAAAAAAAA7AQAAAAAAAAAAAAAQgQAAAAAAABEBAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQgQAAAAAAADqBAAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"revert",
					null,
					"CAAAAAAAAAAAAAAAAAAAAAAAAADICwAAaW1wb3J0IHsgVHJhbnNmb3JtYXRpb25MaXN0IH0gZnJvbSAnLi4vLi4vZ2VvbS90cmFuc2Zvcm1hdGlvbi5qcyc7CmltcG9ydCB7IHVzZVRya2wgfSBmcm9tICcuLi8uLi9ob29rcy91c2VUcmtsLmpzJzsKaW1wb3J0IHsgZGVmaW5lIH0gZnJvbSAnLi4vLi4vbWlzYy5qcyc7CmltcG9ydCB7IGgsIHVzZVJlZiB9IGZyb20gJy4uLy4uL3ByZWFjdC5tanMnOwppbXBvcnQgeyB1c2VWYWx1ZSB9IGZyb20gJy4uLy4uL3JlcGVhdGVyL3JlYWN0LWhvb2tzLmpzJzsKaW1wb3J0IHsgbG9nLCB1c2VBdHRyaWJ1dGVzIH0gZnJvbSAnLi4vcmVuZGVyVXRpbHMuanMnOwoKZXhwb3J0IGNvbnN0IHVzZUdyaWQgPSBkYXRhID0+IHsKICBjb25zdCBmYWN0b3JzID0geyBpbmNoOiAyNS40LCBtbTogMSB9OwogIGNvbnN0IGNhbGNEaXN0ID0gKHZhbHVlLCB1bml0KSA9PiB7CiAgICAvLyBsb2coJ2NhbGNEaXN0OicsIHsgdmFsdWUsIHVuaXQgfSk7CiAgICBjb25zdCBmID0gZmFjdG9yc1t1bml0XTsKICAgIHJldHVybiB2YWx1ZSAqIGY7CiAgfTsKICBjb25zdCB7IGRpc3RhbmNlLCB1bml0ZGlzdCwgdW5pdCwgc3R5bGUsIG11bHRpcGxlLCBkaXNwbGF5LCBhbHRkaXN0YW5jZSwgYWx0dW5pdGRpc3QsIGFsdHVuaXQgfSA9IHVzZUF0dHJpYnV0ZXMoZGF0YSk7CiAgLy9sb2coJ3VzZUdyaWQ6JywgeyBkaXN0YW5jZSwgdW5pdGRpc3QsIHVuaXQgfSk7CiAgbGV0IHJlc3VsdCA9IHsKICAgIGRpc3RhbmNlOiBjYWxjRGlzdCgrZGlzdGFuY2UsIHVuaXRkaXN0IHx8IHVuaXQpLAogICAgYWx0ZGlzdGFuY2U6IGNhbGNEaXN0KCthbHRkaXN0YW5jZSwgYWx0dW5pdGRpc3QgfHwgYWx0dW5pdCksCiAgICBkaXNwbGF5OiBkaXNwbGF5ID09ICd5ZXMnLAogICAgc3R5bGUsCiAgICBtdWx0aXBsZTogK211bHRpcGxlCiAgfTsKICByZXR1cm4gcmVzdWx0Owp9OwoKZXhwb3J0IGNvbnN0IFBhdHRlcm4gPSAoeyBkYXRhLCBpZCA9ICdwYXR0ZXJuJywgYXR0cnMgPSB7IGNvbG9yOiAnIzAwMDBhYScsIHdpZHRoOiAwLjAxIH0sIC4uLnByb3BzIH0pID0+IHsKICBsb2coJ1BhdHRlcm4ucmVuZGVyICcsIHsgZGF0YSwgaWQsIGF0dHJzLCBwcm9wcyB9KTsKIC8qIGRhdGEgPQogICAgdXNlVmFsdWUoYXN5bmMgZnVuY3Rpb24qICgpIHsKICAgICAgZm9yIGF3YWl0KGxldCBjaGFuZ2Ugb2YgZGF0YS5yZXBlYXRlcikgewogICAgICAgIC8vbG9nKCdjaGFuZ2U6JywgY2hhbmdlKTsKICAgICAgICB5aWVsZCBjaGFuZ2U7CiAgICAgIH0KICAgIH0pIHx8IGRhdGE7Ki8KICBjb25zdCB7IGRpc3RhbmNlID0gMC4xLCBzdHlsZSwgbXVsdGlwbGUgPSAxLCBkaXNwbGF5LCBhbHRkaXN0YW5jZSB9ID0gdXNlR3JpZChkYXRhKTsKCiAgLy9sb2coJ1BhdHRlcm4ucmVuZGVyOicsIHsgZGlzdGFuY2UsIHN0eWxlLCBtdWx0aXBsZSwgZGlzcGxheSwgYWx0ZGlzdGFuY2UgfSk7CiAgbGV0IHBhdHRlcm4gPSB1c2VUcmtsKGF0dHJzKTsKCiAgbGV0IHsgd2lkdGgsIGNvbG9yID0gJyMwMDAwYWEnIH0gPSBwYXR0ZXJuOwogIGxldCByZWYgPQogICAgdXNlUmVmKCkgfHwKICAgICgoKSA9PiB7CiAgICAgIGxldCBjdXJyZW50OwogICAgICBsZXQgcmV0ID0gZnVuY3Rpb24odmFsdWUpIHsKICAgICAgICBsb2coJ1BhdHRlcm4ucmVuZGVyIHZhbHVlID0nLCB2YWx1ZSk7CiAgICAgICAgY3VycmVudCA9IHZhbHVlOwogICAgICB9OwogICAgICBkZWZpbmUocmV0LCB7CiAgICAgICAgZ2V0IGN1cnJlbnQoKSB7CiAgICAgICAgICByZXR1cm4gY3VycmVudDsKICAgICAgICB9LAogICAgICAgIHNldCBjdXJyZW50KHZhbHVlKSB7CiAgICAgICAgICByZXQodmFsdWUpOwogICAgICAgIH0KICAgICAgfSk7CiAgICAgIHJldHVybiByZXQ7CiAgICB9KSgpOwoKICBpZihyZWYuY3VycmVudCkgbG9nKCdQYXR0ZXJuLnJlbmRlciByZWYuY3VycmVudCA9JywgcmVmLmN1cnJlbnQpOwoKICBjb25zdCBzaXplID0gZGlzdGFuY2UgKiBtdWx0aXBsZTsKICBsb2coJ1BhdHRlcm4ucmVuZGVyICcsIHsgd2lkdGgsIGNvbG9yLCBzaXplIH0pOwoKICByZXR1cm4gaCgKICAgICdwYXR0ZXJuJywKICAgIHsgaWQsIHdpZHRoOiBzaXplLCBoZWlnaHQ6IHNpemUsIHBhdHRlcm5Vbml0czogJ3VzZXJTcGFjZU9uVXNlJyB9LAogICAgaCgncGF0aCcsIHsKICAgICAgcmVmLAogICAgICBkOiBgTSAke3NpemV9LDAgTCAwLDAgTCAwLCR7c2l6ZX1gLAogICAgICBmaWxsOiAnbm9uZScsCiAgICAgIHN0cm9rZTogY29sb3IsCiAgICAgIC8vICAndmVjdG9yLWVmZmVjdCc6ICdub24tc2NhbGluZy1zdHJva2UnLAogICAgICAnc3Ryb2tlLXdpZHRoJzogc3R5bGUgPT0gJ2RvdHMnID8gd2lkdGggKiAyIDogd2lkdGgsCiAgICAgICdzdHJva2UtZGFzaGFycmF5Jzogc3R5bGUgPT0gJ2RvdHMnID8gYCR7d2lkdGh9ICAke3NpemUgKiA0fWAgOiBgJHtzaXplICogMn1gCiAgICB9KQogICk7Cn07CgpleHBvcnQgY29uc3QgR3JpZCA9ICh7IGRhdGEsIHJlY3QsIGlkLCBhdHRycyA9IHsgdmlzaWJsZTogdHJ1ZSB9LCBvcHRzID0ge30sIC4uLnByb3BzIH0pID0+IHsKICBsZXQgeyB0cmFuc2Zvcm0gPSBuZXcgVHJhbnNmb3JtYXRpb25MaXN0KCkgfSA9IG9wdHM7CiAgY29uc3QgeyBkaXN0YW5jZSwgc3R5bGUsIG11bHRpcGxlLCBkaXNwbGF5LCBhbHRkaXN0YW5jZSB9ID0gdXNlR3JpZChkYXRhKTsKICBsb2coJ0dyaWQucmVuZGVyOicsIHsgZGF0YSwgcmVjdCwgYXR0cnMsIG9wdHMsIHByb3BzIH0pOwoKICBsZXQgZ3JpZCA9IHR5cGVvZiBhdHRycyA9PSAnZnVuY3Rpb24nID8gYXR0cnMoKSA6IGF0dHJzOwogIC8vbGV0IHJlZiA9IHVzZVJlZigpOwogIGxvZygnR3JpZC5yZW5kZXIgJywgeyBncmlkIH0pOwogIHJldHVybiBoKCdyZWN0JywgewogICAgLy9yZWYsCiAgICBzdHJva2U6ICdub25lJywKICAgIGZpbGw6IGB1cmwoIyR7aWR9KWAsCiAgICBzdHlsZTogZ3JpZC52aXNpYmxlID8ge30gOiB7IGRpc3BsYXk6ICdub25lJyB9LAogICAgLi4ucmVjdC50b09iamVjdCgpLAogICAgdHJhbnNmb3JtCiAgfSk7Cn07CgAAAAAAAAAAyQsAAAAAAAAAAAAAAAAAAAAAAADJCwAAAAAAAAAAAAAAAAAAAAAAAMkLAAAAAAAAAAAAAAAAAAAAAAAAyQsAAAAAAAAAAAAAAAAAAAAAAADJCwAAAAAAAAAAAAAAAAAAAAAAAMkLAAAAAAAAAAAAAAAAAAAAAAAAyQsAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARAQAAAAAAADsBAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/eagle/schematicRenderer.js",
			"settings":
			{
				"buffer_size": 6156,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					6,
					1,
					"right_delete",
					null,
					"AQAAAD0UAAAAAAAAPRQAAAAAAAACAAAAICA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPRQAAAAAAAA9FAAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": "  "
					},
					"AgAAAD0UAAAAAAAAPhQAAAAAAAAAAAAAPhQAAAAAAAA/FAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPRQAAAAAAAA9FAAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAD8UAAAAAAAAQBQAAAAAAAAAAAAAQBQAAAAAAABCFAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPxQAAAAAAAA/FAAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"ensure_newline_at_eof",
					null,
					"AQAAAAwYAAAAAAAADRgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQhQAAAAAAABCFAAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					2,
					"left_delete",
					null,
					"AgAAAF4UAAAAAAAAXhQAAAAAAAAEAAAAbGlzdF0UAAAAAAAAXRQAAAAAAAABAAAALg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXhQAAAAAAABiFAAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "()"
					},
					"AgAAAFMUAAAAAAAAVBQAAAAAAAAAAAAAVBQAAAAAAABVFAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUxQAAAAAAABTFAAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"left_delete",
					null,
					"AQAAAFQUAAAAAAAAVBQAAAAAAAABAAAAKQ",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVRQAAAAAAABVFAAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": " ??"
					},
					"AwAAAF4UAAAAAAAAXxQAAAAAAAAAAAAAXxQAAAAAAABgFAAAAAAAAAAAAABgFAAAAAAAAGEUAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXhQAAAAAAABeFAAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGEUAAAAAAAAYhQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAYRQAAAAAAABhFAAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAGIUAAAAAAAAZBQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAYhQAAAAAAABiFAAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAGUUAAAAAAAAZhQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZRQAAAAAAABlFAAAAAAAAAAAAAAAAPC/"
				],
				[
					55,
					1,
					"revert",
					null,
					"",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPRQAAAAAAAA9FAAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"prettier",
				"Build With: prettier"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"prett",
				"Pretty Shell: Minify"
			],
			[
				"OUTLIN",
				"Browse Mode: Outline (Right)"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 142.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv",
		"/home/roman/Projects/plot-cv/lib",
		"/home/roman/Projects/plot-cv/lib/ecmascript"
	],
	"file_history":
	[
		"/home/roman/Projects/an-tronics/eagle/github-userscript.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-internal.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/src/minnet-client.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/lib/core-net/close.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/wscli.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/callback.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/qjsm.c",
		"/home/roman/Projects/plot-cv/upload-server.js",
		"/home/janos/Projects/plot-cv/test-sourcemap.js",
		"/home/janos/Projects/plot-cv/ws-worker.js",
		"/home/janos/Projects/plot-cv/tokmap.c",
		"/home/janos/Projects/plot-cv/count-neighbours.js",
		"/home/janos/Projects/plot-cv/findsig.c",
		"/home/janos/Projects/plot-cv/getModuleProps.js",
		"/home/janos/Projects/plot-cv/midi-tcp.js",
		"/home/janos/Projects/plot-cv/portal.js",
		"/home/janos/Projects/plot-cv/resolve-imports.js",
		"/home/janos/Projects/plot-cv/palette.css",
		"/home/janos/Projects/plot-cv/get-res.c",
		"/home/janos/Projects/plot-cv/get-msys-packages.js",
		"/home/janos/Projects/plot-cv/gerber2gcode.js",
		"/home/janos/Projects/plot-cv/ftrace.js",
		"/home/janos/Projects/plot-cv/filelist.js",
		"/home/janos/Projects/plot-cv/coil.js",
		"/home/janos/Projects/plot-cv/eagle-server.js",
		"/home/janos/Projects/plot-cv/eagle-query.js",
		"/home/janos/Projects/plot-cv/dump-structs.js",
		"/home/janos/Projects/plot-cv/doc-scanner.js",
		"/home/janos/Projects/plot-cv/config.js",
		"/home/janos/Projects/plot-cv/deconflict.js",
		"/home/janos/Projects/plot-cv/debuggerprotocol.js",
		"/home/janos/Projects/plot-cv/debugger.js",
		"/home/janos/Projects/plot-cv/convert-imports.js",
		"/home/janos/Projects/plot-cv/esparse.js",
		"/home/janos/Projects/plot-cv/extract-structs.js",
		"/home/janos/Projects/plot-cv/fetch-post-prices.js",
		"/home/janos/Projects/plot-cv/ffi.js",
		"/home/janos/Projects/plot-cv/fontsample.js",
		"/home/janos/Projects/plot-cv/grammar-arith.js",
		"/home/janos/Projects/plot-cv/grammar-C.js",
		"/home/janos/Projects/plot-cv/grammar-c.js",
		"/home/janos/Projects/plot-cv/grammar-css3.js",
		"/home/janos/Projects/plot-cv/grammar-geda-netlist.js",
		"/home/janos/Projects/plot-cv/grammar-INI.js",
		"/home/janos/Projects/plot-cv/httpd.js",
		"/home/janos/Projects/plot-cv/ini-grammar.js",
		"/home/janos/Projects/plot-cv/io-helpers.js",
		"/home/janos/Projects/plot-cv/list-directory.js",
		"/home/janos/Projects/plot-cv/list-exports.js",
		"/home/janos/Projects/plot-cv/list-exports2.js",
		"/home/janos/Projects/plot-cv/load-ast.js",
		"/home/janos/Projects/plot-cv/meriyah.js",
		"/home/janos/Projects/plot-cv/workertest.js",
		"/home/janos/Projects/plot-cv/worker.js",
		"/home/janos/Projects/plot-cv/userscript-test.js",
		"/home/janos/Projects/plot-cv/upload.html",
		"/home/janos/Projects/plot-cv/upload-server.js",
		"/home/janos/Projects/plot-cv/untar.c",
		"/home/janos/Projects/plot-cv/tmpx.js",
		"/home/janos/Projects/plot-cv/test-xml.js",
		"/home/janos/Projects/plot-cv/test-wru.js",
		"/home/janos/Projects/plot-cv/test-websocket.js",
		"/home/janos/Projects/plot-cv/test-voronoi.js",
		"/home/janos/Projects/plot-cv/test-video.js",
		"/home/janos/Projects/plot-cv/test-util.js",
		"/home/janos/Projects/plot-cv/test-utf8.js",
		"/home/janos/Projects/plot-cv/test-umat.js",
		"/home/janos/Projects/plot-cv/test-trkl.js",
		"/home/janos/Projects/plot-cv/test-sqlite3.js",
		"/home/janos/Projects/plot-cv/test-spawn.js",
		"/home/janos/Projects/plot-cv/test-sockets.js",
		"/home/janos/Projects/plot-cv/test-shparse.js",
		"/home/janos/Projects/plot-cv/test-rpc.js",
		"/home/janos/Projects/plot-cv/test-repl.js",
		"/home/janos/Projects/plot-cv/test-renderer.js",
		"/home/janos/Projects/plot-cv/test-readline.js",
		"/home/janos/Projects/plot-cv/test-readdir.js",
		"/home/janos/Projects/plot-cv/test-quickjs.js",
		"/home/janos/Projects/plot-cv/test-proxy.js",
		"/home/janos/Projects/plot-cv/test-pointlist.js",
		"/home/janos/Projects/plot-cv/test-pointer.js",
		"/home/janos/Projects/plot-cv/test-path.js",
		"/home/janos/Projects/plot-cv/test-parsexml.js",
		"/home/janos/Projects/plot-cv/test-parse.js",
		"/home/janos/Projects/plot-cv/test-opencv.js",
		"/home/janos/Projects/plot-cv/test-octagon.js",
		"/home/janos/Projects/plot-cv/test-ngql.js",
		"/home/janos/Projects/plot-cv/test-net.js",
		"/home/janos/Projects/plot-cv/test-mmap.js",
		"/home/janos/Projects/plot-cv/test-minnet.js",
		"/home/janos/Projects/plot-cv/test-meriyah.js",
		"/home/janos/Projects/plot-cv/ol-marker.js",
		"/home/janos/Projects/plot-cv/ol-map.js",
		"/home/janos/Projects/plot-cv/make-bitmap.js",
		"/home/janos/Projects/plot-cv/list-proxies.js",
		"/home/janos/Projects/plot-cv/eagle2gerber.js",
		"/home/janos/Projects/plot-cv/test-exception.js",
		"/home/janos/Projects/plot-cv/test-childprocess.js",
		"/home/janos/Projects/plot-cv/test-bjson.js",
		"/home/janos/Projects/plot-cv/test-ansitrunc.c",
		"/home/janos/Projects/plot-cv/svg-scale.js",
		"/home/janos/Projects/plot-cv/server.js",
		"/home/janos/Projects/plot-cv/search-engine.js",
		"/home/janos/Projects/plot-cv/resolve-imports2.js",
		"/home/janos/Projects/plot-cv/readfile.js",
		"/home/janos/Projects/plot-cv/read-deps.js",
		"/home/janos/Projects/plot-cv/react-simple-code-editor.js",
		"/home/janos/Projects/plot-cv/pcb-conversion.js",
		"/home/janos/Projects/plot-cv/knopf-schwarz-o12mm-cliff-cl178862.html",
		"/home/janos/Projects/plot-cv/dom-helpers.js",
		"/home/janos/Projects/pictest/traced_back.svg",
		"/home/janos/Projects/plot-cv/param.js",
		"/home/janos/Projects/plot-cv/qjs-opencv/output.js",
		"/home/janos/Projects/plot-cv/qjs-opencv/tests/test_freetype.js",
		"/home/janos/Projects/plot-cv/lib/stream/utils.js",
		"/home/janos/Projects/plot-cv/svg-crop-pad.js",
		"/home/janos/Projects/plot-cv/qjs-opencv/tests/test_png.js"
	],
	"find":
	{
		"height": 41.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"querySele",
			"align = ",
			"align",
			"round",
			"roun",
			"round",
			"<wire",
			"Line",
			"\\bLine\\b",
			"loadSaveOptions",
			"new REPL",
			"config",
			"width?=\"0\\.0",
			"width?=\"",
			"useValue",
			"await ",
			"client_finalize",
			"onClose",
			"exception",
			"current_exce",
			"}\\n\n",
			"}\\n\n([^\\n])",
			"}\\n([^\\n])",
			"}\\n\n([^\\n])",
			"remove",
			"ZipFolder",
			"<<<<",
			"ExecTool",
			"outdir",
			"'str'",
			"optionsArray",
			"Bottom",
			"compact",
			"boxes",
			"join",
			"\nfunction outputBytes(mat) {\n  return '['+[...rowIterator(mat)].map(a => '[ '+[...a].map(n => '0x'+n.toString(16).padStart(2, \n'0')).join(',')+' ],').join('\\n')+']';\n}",
			"cv\\.",
			"writeROI",
			"cvtColor",
			"g",
			"=> ",
			"));",
			"mod\\(",
			"toMap",
			"Util\\."
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"}\\n\\n",
			"}\\n\\n\\1",
			"",
			"\n      t = 'l';"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3940,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": "/home/roman/Projects/plot-cv/lib/ecmascript/parser.js",
							"function_name_status_row": 9,
							"outline_rename_mode": false,
							"show_line_column": "disabled",
							"symkeys":
							[
								[
									1630,
									1654
								],
								[
									1697,
									1703
								],
								[
									1806,
									1816
								],
								[
									1828,
									1834
								],
								[
									1971,
									1981
								],
								[
									1993,
									1999
								],
								[
									2015,
									2055
								],
								[
									2153,
									2166
								],
								[
									2480,
									2492
								],
								[
									2493,
									2518
								],
								[
									2684,
									2708
								],
								[
									2803,
									2831
								],
								[
									3011,
									3045
								],
								[
									3341,
									3346
								],
								[
									3359,
									3390
								],
								[
									3834,
									3849
								],
								[
									3953,
									3990
								],
								[
									4389,
									4394
								],
								[
									5319,
									5343
								],
								[
									5461,
									5466
								],
								[
									6450,
									6469
								],
								[
									6539,
									6544
								],
								[
									6672,
									6681
								],
								[
									6759,
									6767
								],
								[
									6918,
									6924
								],
								[
									7243,
									7264
								],
								[
									7411,
									7420
								],
								[
									7719,
									7726
								],
								[
									7797,
									7808
								],
								[
									7910,
									7921
								],
								[
									8310,
									8315
								],
								[
									8386,
									8390
								],
								[
									8596,
									8601
								],
								[
									8925,
									8945
								],
								[
									9074,
									9096
								],
								[
									9406,
									9426
								],
								[
									9502,
									9530
								],
								[
									9803,
									9839
								],
								[
									9892,
									9912
								],
								[
									10061,
									10068
								],
								[
									10559,
									10565
								],
								[
									10861,
									10865
								],
								[
									10886,
									10890
								],
								[
									11145,
									11162
								],
								[
									11642,
									11667
								],
								[
									11994,
									12010
								],
								[
									12064,
									12100
								],
								[
									12609,
									12633
								],
								[
									13229,
									13264
								],
								[
									13872,
									13887
								],
								[
									14641,
									14663
								],
								[
									15648,
									15671
								],
								[
									15919,
									15948
								],
								[
									16170,
									16205
								],
								[
									16469,
									16483
								],
								[
									16613,
									16635
								],
								[
									16760,
									16776
								],
								[
									17065,
									17089
								],
								[
									17261,
									17283
								],
								[
									17436,
									17463
								],
								[
									17618,
									17643
								],
								[
									17840,
									17863
								],
								[
									17974,
									18003
								],
								[
									18123,
									18147
								],
								[
									21452,
									21468
								],
								[
									21527,
									21550
								],
								[
									22186,
									22224
								],
								[
									23278,
									23320
								],
								[
									23697,
									23703
								],
								[
									23851,
									23905
								],
								[
									25090,
									25167
								],
								[
									26599,
									26628
								],
								[
									26799,
									26823
								],
								[
									27234,
									27256
								],
								[
									28590,
									28626
								],
								[
									30667,
									30695
								],
								[
									31707,
									31734
								],
								[
									33115,
									33157
								],
								[
									34532,
									34553
								],
								[
									36771,
									36797
								],
								[
									37399,
									37459
								],
								[
									38185,
									38251
								],
								[
									38676,
									38754
								],
								[
									39010,
									39049
								],
								[
									42333,
									42369
								],
								[
									42513,
									42549
								],
								[
									42664,
									42700
								],
								[
									43265,
									43282
								],
								[
									43583,
									43638
								],
								[
									43838,
									43850
								],
								[
									44697,
									44710
								],
								[
									46205,
									46223
								],
								[
									46483,
									46502
								],
								[
									48327,
									48367
								],
								[
									48751,
									48791
								],
								[
									49764,
									49811
								],
								[
									50328,
									50377
								],
								[
									50780,
									50802
								],
								[
									51070,
									51094
								],
								[
									52806,
									52831
								],
								[
									53190,
									53216
								],
								[
									53431,
									53480
								],
								[
									54174,
									54209
								],
								[
									54592,
									54629
								],
								[
									55055,
									55088
								],
								[
									57882,
									57921
								],
								[
									58223,
									58259
								],
								[
									58697,
									58702
								],
								[
									58921,
									58971
								],
								[
									60006,
									60057
								],
								[
									60448,
									60469
								],
								[
									60602,
									60623
								],
								[
									60919,
									60943
								],
								[
									61135,
									61156
								],
								[
									61342,
									61364
								],
								[
									61715,
									61772
								],
								[
									65847,
									65875
								],
								[
									66548,
									66565
								],
								[
									66648,
									66680
								],
								[
									67750,
									67798
								],
								[
									68692,
									68772
								],
								[
									69110,
									69130
								],
								[
									69593,
									69607
								],
								[
									70388,
									70404
								],
								[
									70443,
									70462
								],
								[
									70532,
									70563
								],
								[
									70575,
									70579
								],
								[
									70650,
									70666
								],
								[
									70683,
									70687
								],
								[
									70705,
									70720
								],
								[
									70867,
									70882
								],
								[
									70889,
									70893
								],
								[
									70970,
									70985
								],
								[
									71012,
									71047
								],
								[
									71080,
									71094
								],
								[
									71346,
									71386
								],
								[
									71642,
									71699
								],
								[
									71770,
									71799
								],
								[
									73268,
									73273
								],
								[
									73836,
									73840
								],
								[
									74220,
									74250
								],
								[
									74274,
									74290
								],
								[
									74367,
									74374
								],
								[
									74419,
									74439
								],
								[
									74459,
									74475
								],
								[
									74633,
									74648
								],
								[
									74663,
									74683
								],
								[
									74701,
									74706
								],
								[
									74730,
									74779
								]
							],
							"symlist":
							[
								"  add = (arr, ...items) =>",
								"Parser",
								"tokens =>",
								"  tok =>",
								"tokens =>",
								"  tok =>",
								"  constructor(sourceText, fileName, debug)",
								"(c, s, e) =>",
								"key =>",
								"function(...args)",
								"  .callback = (...args) =>",
								"  error(errorMessage, astNode)",
								"  handleComment(comment, start, end)",
								"() =>",
								"function(ctor, args, instance)",
								"  onNewNode(node)",
								"  onReturnNode(node, stackEntry, stack)",
								"  get()",
								"  addCommentsToNodes(root)",
								"n =>",
								"  tokensForNode(root)",
								"n =>",
								"(a, b) =>",
								"  range =>",
								"  next()",
								"  lookahead(offset = 0)",
								"  consume()",
								"  state()",
								"function()",
								"  printtoks()",
								"  log()",
								"  a =>",
								"  st =>",
								"  position(tok = null)",
								"  addNode(ctor, ...args)",
								"  getFn(name)",
								"  isLiteral({ type })",
								"  isTemplateLiteral({ type })",
								"  backTrace()",
								"  line =>",
								"Parser",
								"  e =>",
								"  e =>",
								"  toStr(a)",
								"  stackFunc = (name, fn) =>",
								"ECMAScriptParser",
								"  expectIdentifier(no_keyword = false)",
								"  expectKeywords(keywords)",
								"  expectPunctuators(punctuators, ast)",
								"  expectLiteral()",
								"  parseTemplateLiteral()",
								"  matchKeywords(keywords)",
								"  matchPunctuators(punctuators)",
								"  matchIdentifier(no_keyword = false)",
								"  matchLiteral()",
								"  matchTemplateLiteral()",
								"  matchStatement()",
								"  matchPrimaryExpression()",
								"  matchUnaryExpression()",
								"  matchAssignmentExpression()",
								"  matchFunctionExpression()",
								"  matchMemberExpression()",
								"  matchLeftHandSideExpression()",
								"  parsePrimaryExpression()",
								"  parseArguments()",
								"  checkRestOf = parser =>",
								"  parseRemainingMemberExpression(object)",
								"  parseArrowFunction(args, is_= false)",
								"  arg =>",
								"  parseRemainingCallExpression(object, is_= false)",
								"  parseNewOrCallOrMemberExpression(couldBeNewExpression, couldBeCallExpression)",
								"  parseLeftHandSideExpression()",
								"  parsePostfixExpression()",
								"  parseUnaryExpression()",
								"  parseBinaryExpression(minPrecedence)",
								"  parseConditionalExpression()",
								"  parseAssignmentExpression()",
								"  parseExpression(optional, sequence = true)",
								"  parseBindingPattern()",
								"  parseVariableDeclaration()",
								"  parseVariableDeclarationList(kind = 'var', exported = false)",
								"  parseBlock(insideIteration, insideFunction, ctor = BlockStatement)",
								"  parseList(insideIteration = false, insideFunction = false, check = p => false)",
								"  parseObject(isClass = false, args = [])",
								"  memberCtor = (id, value, _, kind) =>",
								"  memberCtor = (id, value, element) =>",
								"  memberCtor = (id, value, _, kind) =>",
								"([key, value]) =>",
								"BindingProperty(property, id, initializer)",
								"  parseArray()",
								"  parseJSXTag()",
								"([name, value]) =>",
								"  parseJSX(depth = 0)",
								"  parseVariableStatement(exported = false)",
								"  parseImportDeclaration(toplevel = false)",
								"  parseImportSpecifier(default_specifier = false)",
								"  parseModuleItems(method = 'parseImportSpecifier')",
								"  parseExportSpecifier()",
								"  parseExportDeclaration()",
								"  parseDecoratorStatement()",
								"  parseExpressionStatement()",
								"  parseIfStatement(insideIteration, insideFunction)",
								"  parseWhileStatement(insideFunction)",
								"  parseDoWhileStatement(insideFunction)",
								"  parseForStatement(insideFunction)",
								"  parseIterationStatement(insideFunction)",
								"  parseSwitchStatement(insideFunction)",
								"p =>",
								"  parseTryStatement(insideIteration, insideFunction)",
								"  parseWithStatement(insideIteration, insideFunction)",
								"  parseThrowStatement()",
								"  parseYieldStatement()",
								"  parseContinueStatement()",
								"  parseBreakStatement()",
								"  parseReturnStatement()",
								"  parseStatement(insideIteration, insideFunction, exported)",
								"  parseClass(exported = false)",
								"  parseParameters()",
								"  checkRestOf = (parser, match) =>",
								"  parseFunction(exported = false, isAsync = false)",
								"  parseFunctionParametersAndBody(identifier, isAsync = false, isGenerator = false)",
								"  parseSourceElement()",
								"  parseProgram()",
								"ECMAScriptParser",
								"  quoteArray = arr =>",
								"  quoteList = (l, delim = ' ') =>",
								"  t =>",
								"  quoteToks = l =>",
								"  t =>",
								"  quoteObj = i =>",
								"  quoteArg = a =>",
								"  i =>",
								"  quoteStr = s =>",
								"Parser.prototype.trace = function()",
								"frame =>",
								"Parser.prototype.onToken = function(tok)",
								"  instrumentate = (methodName, fn = methods[methodName]) =>",
								"  esfactory = function(...args)",
								"n =>",
								"  t =>",
								"  instrumentateParser()",
								"ECMAScriptParser",
								"  name =>",
								"(acc, methodName) =>",
								"ECMAScriptParser",
								"  timeout = ms =>",
								"(resolve, reject) =>",
								"() =>",
								"Parser.parse = function parse(sourceText, prefix)"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1698828353.71,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "eagle2svg.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2302,
						"regions":
						{
						},
						"selection":
						[
							[
								1040,
								1040
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 36,
							"show_line_column": "disabled",
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1699633131.49,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 110.0,
						"translation.y": 730.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "eagle-shell.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 38946,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"show_line_column": "disabled",
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1699633134.11,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 10.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/home/roman/Projects/an-tronics/eagle/lbr/l.lbr",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 112388,
						"regions":
						{
						},
						"selection":
						[
							[
								84799,
								84799
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 1118,
							"show_line_column": "disabled",
							"syntax": "Packages/XML/XML.sublime-syntax",
							"tabs_extra_last_activated": 1699633137.91,
							"tabs_extra_last_activated_sheet_index": 3
						},
						"translation.x": 0.0,
						"translation.y": 1673610.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "lib/geom/rect.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16523,
						"regions":
						{
							"col_010101FF":
							{
								"flags": 16,
								"regions":
								[
									[
										9579,
										9583
									]
								],
								"scope": "col_010101FF"
							},
							"col_010101FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_010101FF_circle.png",
								"regions":
								[
									[
										9446,
										9446
									]
								],
								"scope": "col_gutter"
							}
						},
						"selection":
						[
							[
								10772,
								10777
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 375,
							"show_line_column": "disabled",
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1699633139.54,
							"tabs_extra_last_activated_sheet_index": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 150.0,
						"translation.y": 7510.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "lib/geom/line.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15165,
						"regions":
						{
						},
						"selection":
						[
							[
								10452,
								10461
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 337,
							"show_line_column": "disabled",
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1698866506.22,
							"tabs_extra_last_activated_sheet_index": 5,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 240.0,
						"translation.y": 6750.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "quickjs/qjs-modules/lib/repl.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 60514,
						"regions":
						{
						},
						"selection":
						[
							[
								7767,
								7782
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 241,
							"show_line_column": "disabled",
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1698866506.68,
							"tabs_extra_last_activated_sheet_index": 6,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 20.0,
						"translation.y": 4830.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "lib/eagle/components/via.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2696,
						"regions":
						{
						},
						"selection":
						[
							[
								857,
								857
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 20,
							"show_line_column": "disabled",
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1698971429.65,
							"tabs_extra_last_activated_sheet_index": 7,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 410.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "lib/eagle/components/wire.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1800,
						"regions":
						{
						},
						"selection":
						[
							[
								639,
								700
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 17,
							"show_line_column": "disabled",
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1698866505.57,
							"tabs_extra_last_activated_sheet_index": 8,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 350.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "/home/roman/Projects/an-tronics/eagle/RX-FM-Radio-1.5V-dip.brd",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 56743,
						"regions":
						{
						},
						"selection":
						[
							[
								20699,
								20798
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 220,
							"show_line_column": "disabled",
							"syntax": "Packages/XML/XML.sublime-syntax",
							"tabs_extra_last_activated": 1699975186.47,
							"tabs_extra_last_activated_sheet_index": 9
						},
						"translation.x": 0.0,
						"translation.y": 5337.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "github-userscript.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3195,
						"regions":
						{
						},
						"selection":
						[
							[
								3195,
								3195
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 102,
							"show_line_column": "disabled",
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 4,
							"tabs_extra_last_activated": 1699991196.46,
							"tabs_extra_last_activated_sheet_index": 10,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1321.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "lib/ecmascript/parser.js",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 75104,
						"regions":
						{
						},
						"selection":
						[
							[
								2,
								2
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"show_line_column": "disabled",
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1700005241.76,
							"tabs_extra_last_activated_sheet_index": 10,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "lib/eagle/components/grid.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3017,
						"regions":
						{
						},
						"selection":
						[
							[
								1092,
								1260
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 28,
							"show_line_column": "disabled",
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1698866502.92,
							"tabs_extra_last_activated_sheet_index": 10,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 30.0,
						"translation.y": 570.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "lib/eagle/schematicRenderer.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6156,
						"regions":
						{
						},
						"selection":
						[
							[
								5181,
								5181
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 165,
							"show_line_column": "disabled",
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1698866503.92,
							"tabs_extra_last_activated_sheet_index": 11,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3310.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 29.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.8,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 0.0
	},
	"output.Debugger Console":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 138.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "plot-cv.sublime-project",
	"replace":
	{
		"height": 54.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"github-user",
				"github-userscript.js"
			],
			[
				"line.js",
				"lib/geom/line.js"
			],
			[
				"rect.",
				"lib/geom/rect.js"
			],
			[
				"repl.js",
				"quickjs/qjs-modules/lib/repl.js"
			],
			[
				"eagle-she",
				"eagle-shell.js"
			],
			[
				"eagle2sv",
				"eagle2svg.js"
			],
			[
				"wscli.js",
				"quickjs/qjs-net/wscli.js"
			],
			[
				"minnet-clie",
				"quickjs/qjs-net/src/minnet-client.c"
			],
			[
				"callbaCK.C",
				"quickjs/qjs-net/lib/callback.c"
			],
			[
				"internal",
				"quickjs/qjs-modules/quickjs-internal.h"
			],
			[
				"utils.c",
				"quickjs/qjs-modules/src/utils.c"
			],
			[
				"qjsm.c",
				"quickjs/qjs-modules/src/qjsm.c"
			],
			[
				"eagle2",
				"eagle2gerber.js"
			],
			[
				"pcb-con",
				"pcb-conversion.js"
			],
			[
				"test_free",
				"qjs-opencv/tests/test_freetype.js"
			],
			[
				"param.js",
				"param.js"
			],
			[
				"make",
				"make-bitmap.js"
			],
			[
				"test_png",
				"qjs-opencv/tests/test_png.js"
			],
			[
				"stream/utils",
				"lib/stream/utils.js"
			],
			[
				"svg-cr",
				"svg-crop-pad.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 330.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
