{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"contents": "  value =>\n  (level, message) =>\nAsyncCollect(iter)\nGetMime(file)\nMatcher(pattern, t = arg => arg)\n  (...args) =>\nKeyOrValueMatcher(pattern)\n  ([key, value]) =>\nGetRootDirectories(pattern = '*')\nMakeUUID = (rng = Math.random) =>\n  n =>\n  dd =>\n  d =>\n  d =>\n  d =>\nGetDir(dir)\n  n =>\nDirName(name)\n  it =>\nDateStr(date)\nModeStr(mode)\nHTMLPage = ({ title, style, scripts = [], children, ...props }) =>\n  script =>\nFilterForm = ({ ...props }) =>\nHTMLTable = ({ rows, ...props }) =>\nHTMLTableRow = ({ columns, ...props }) =>\nHTMLTableColumn = ({ columns, children, tag = 'td', ...props }) =>\nFileLink = ({ file, ...props }) =>\nFileObject = ({ file, stat = {}, ...props }) =>\nFileTable = ({ files, ...props }) =>\n(a, b) =>\n  field =>\n  file =>\nReadExiv2(file)\n([k, v]) =>\n([k, v]) =>\n([k, v]) =>\n(a, b) =>\n([k, v]) =>\nReadExiftool(file)\n  l =>\n  line =>\n([line, idx]) =>\nHeifConvert(src, dst, quality = 100)\nMagickResize(src, dst, rotate = 0, width, height)\n  main(...args)\n  (a, v) =>\n  (v, pv, o) =>\n  (module, ...args) =>\n  m =>\n  .show = arg =>\n  .cleanup = () =>\n  (...args) =>\n() =>\n  puts(s)\n() =>\nParseBody(gen)\n  .createWS = (url, callbacks) =>\n  .out = s =>\n  test(req, resp)\n  proxy(req, resp)\n  config(req, resp)\n  file(req, resp)\n([dir]) =>\n  f =>\n  file =>\n  uploads(req, resp)\n  s =>\n  files(req, resp)\n  n =>\n  files2(req, resp)\n  n =>\n  n =>\n  n =>\n(a, b) =>\n  name =>\n  file =>\n  file =>\n([file, rel]) =>\n(acc, [file, st]) =>\n  string(a, b)\n  number(a, b)\n([name, obj]) =>\n({ name }) =>\n  onConnect(ws, req)\n  sendCommand(data)\n  onClose(ws, reason)\n  onRequest(req, resp)\n  onOpen(name, filename)\n  onContent(name, data)\n  onClose(name, file)\n  f = x =>\n  onFinalize()\n  (match, p1, p0, p2, p3, offset) =>\n  onMessage(ws, data)\n  get connections()\n  get by_uuid()\n  uuid(data)\n  onFd(fd, rd, wr)\n  onClose(ws, reason)\n  onMessage(ws, data)\n  quit(why)",
			"settings":
			{
				"buffer_size": 1866,
				"line_ending": "Unix",
				"name": "ùåÜ Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					87,
					1,
					"outline_refresh",
					{
						"path": "/home/janos/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
						"symkeys":
						[
							[
								469,
								483
							],
							[
								563,
								586
							],
							[
								724,
								741
							],
							[
								782,
								799
							],
							[
								832,
								841
							],
							[
								875,
								885
							],
							[
								919,
								929
							],
							[
								964,
								975
							],
							[
								1009,
								1019
							],
							[
								1054,
								1065
							],
							[
								1102,
								1115
							],
							[
								1153,
								1167
							],
							[
								1203,
								1215
							],
							[
								1251,
								1263
							],
							[
								1316,
								1336
							],
							[
								1389,
								1402
							],
							[
								1462,
								1483
							],
							[
								1525,
								1541
							],
							[
								1595,
								1614
							],
							[
								1649,
								1665
							],
							[
								1789,
								1823
							],
							[
								1846,
								1878
							],
							[
								1901,
								1944
							],
							[
								3773,
								3792
							],
							[
								3890,
								3906
							],
							[
								3968,
								3986
							],
							[
								4050,
								4069
							],
							[
								4134,
								4143
							],
							[
								4198,
								4215
							],
							[
								4278,
								4295
							],
							[
								4358,
								4372
							],
							[
								4432,
								4447
							],
							[
								4508,
								4523
							],
							[
								4584,
								4592
							],
							[
								4646,
								4658
							],
							[
								4716,
								4726
							],
							[
								4782,
								4793
							],
							[
								4850,
								4858
							],
							[
								4912,
								4934
							],
							[
								5002,
								5017
							],
							[
								5078,
								5100
							],
							[
								5168,
								5184
							],
							[
								5246,
								5262
							],
							[
								5324,
								5336
							],
							[
								5394,
								5406
							],
							[
								5464,
								5477
							],
							[
								5536,
								5554
							],
							[
								5612,
								5630
							],
							[
								5694,
								5716
							],
							[
								5784,
								5811
							],
							[
								5884,
								5901
							],
							[
								5958,
								5975
							],
							[
								6032,
								6049
							],
							[
								6096,
								6112
							],
							[
								6195,
								6211
							],
							[
								6283,
								6299
							],
							[
								6371,
								6388
							],
							[
								6445,
								6465
							],
							[
								6524,
								6544
							],
							[
								6687,
								6706
							],
							[
								6782,
								6789
							],
							[
								6818,
								6838
							],
							[
								6917,
								6932
							],
							[
								6993,
								7019
							],
							[
								7090,
								7106
							],
							[
								7162,
								7175
							],
							[
								7243,
								7261
							],
							[
								7334,
								7347
							],
							[
								7403,
								7417
							],
							[
								7519,
								7545
							],
							[
								7591,
								7612
							],
							[
								7771,
								7796
							],
							[
								7881,
								7923
							],
							[
								8057,
								8097
							],
							[
								11017,
								11042
							],
							[
								11258,
								11306
							],
							[
								11623,
								11658
							],
							[
								11814,
								11832
							],
							[
								11862,
								11867
							],
							[
								11957,
								11984
							],
							[
								12103,
								12138
							],
							[
								12199,
								12203
							],
							[
								12219,
								12223
							],
							[
								12250,
								12259
							],
							[
								12422,
								12451
							],
							[
								12531,
								12561
							],
							[
								12568,
								12571
							],
							[
								12625,
								12657
							],
							[
								12899,
								12929
							],
							[
								12953,
								12969
							],
							[
								12970,
								12993
							],
							[
								13090,
								13125
							],
							[
								13149,
								13165
							],
							[
								13166,
								13189
							],
							[
								13286,
								13319
							],
							[
								13369,
								13392
							],
							[
								13486,
								13519
							],
							[
								13977,
								13983
							],
							[
								14000,
								14016
							],
							[
								14091,
								14103
							],
							[
								14138,
								14149
							],
							[
								14216,
								14237
							],
							[
								14273,
								14284
							],
							[
								14530,
								14536
							],
							[
								14549,
								14565
							],
							[
								14765,
								14770
							],
							[
								14784,
								14793
							],
							[
								14820,
								14843
							],
							[
								14877,
								14890
							],
							[
								14917,
								14922
							],
							[
								14963,
								14985
							],
							[
								15043,
								15049
							],
							[
								15065,
								15081
							],
							[
								15160,
								15187
							],
							[
								15232,
								15238
							],
							[
								15283,
								15295
							],
							[
								15325,
								15358
							],
							[
								15536,
								15554
							],
							[
								15637,
								15655
							],
							[
								15774,
								15792
							],
							[
								15967,
								16000
							],
							[
								16133,
								16146
							],
							[
								16266,
								16287
							],
							[
								16357,
								16375
							],
							[
								16818,
								16857
							],
							[
								16934,
								16951
							],
							[
								17074,
								17088
							],
							[
								17250,
								17267
							],
							[
								17408,
								17425
							],
							[
								17456,
								17473
							],
							[
								17573,
								17590
							],
							[
								17882,
								17896
							],
							[
								17942,
								17965
							],
							[
								18022,
								18029
							],
							[
								18047,
								18054
							],
							[
								18079,
								18104
							],
							[
								18164,
								18171
							],
							[
								18192,
								18199
							],
							[
								18229,
								18284
							],
							[
								18389,
								18396
							],
							[
								18534,
								18558
							],
							[
								18608,
								18612
							],
							[
								18643,
								18677
							],
							[
								18688,
								18701
							],
							[
								18760,
								18805
							],
							[
								18870,
								18881
							],
							[
								18901,
								18921
							],
							[
								18961,
								18990
							],
							[
								19014,
								19025
							],
							[
								19040,
								19052
							],
							[
								19099,
								19138
							],
							[
								19239,
								19243
							],
							[
								19276,
								19281
							],
							[
								19307,
								19313
							],
							[
								19342,
								19348
							],
							[
								19441,
								19454
							],
							[
								19482,
								19495
							],
							[
								19621,
								19632
							],
							[
								19712,
								19772
							],
							[
								19842,
								19859
							],
							[
								19920,
								19944
							],
							[
								20019,
								20046
							],
							[
								20267,
								20287
							],
							[
								20317,
								20328
							],
							[
								20427,
								20462
							],
							[
								20502,
								20520
							],
							[
								20698,
								20719
							],
							[
								20743,
								20753
							],
							[
								20789,
								20818
							],
							[
								20874,
								20884
							],
							[
								20935,
								20940
							],
							[
								20997,
								21010
							],
							[
								21083,
								21142
							],
							[
								21209,
								21234
							],
							[
								21614,
								21644
							],
							[
								22062,
								22102
							],
							[
								22196,
								22206
							],
							[
								22252,
								22308
							],
							[
								22469,
								22533
							],
							[
								22681,
								22732
							],
							[
								23399,
								23461
							],
							[
								23643,
								23668
							],
							[
								23765,
								23790
							],
							[
								23903,
								23972
							],
							[
								24061,
								24083
							],
							[
								24117,
								24128
							],
							[
								24151,
								24173
							],
							[
								24415,
								24487
							],
							[
								24590,
								24661
							],
							[
								24757,
								24808
							],
							[
								24980,
								25027
							],
							[
								25094,
								25137
							],
							[
								25267,
								25324
							],
							[
								25418,
								25424
							],
							[
								25438,
								25444
							],
							[
								25748,
								25782
							],
							[
								26083,
								26107
							],
							[
								26176,
								26181
							],
							[
								26210,
								26215
							],
							[
								26505,
								26518
							],
							[
								26574,
								26626
							],
							[
								26632,
								26649
							],
							[
								26677,
								26686
							],
							[
								26702,
								26712
							],
							[
								26724,
								26741
							],
							[
								26764,
								26773
							],
							[
								26774,
								26797
							],
							[
								26838,
								26862
							],
							[
								26987,
								27031
							],
							[
								27198,
								27232
							],
							[
								27298,
								27334
							],
							[
								27389,
								27406
							],
							[
								27728,
								27773
							],
							[
								27880,
								27893
							],
							[
								27984,
								27997
							],
							[
								28096,
								28109
							],
							[
								28183,
								28226
							],
							[
								28227,
								28246
							],
							[
								28261,
								28265
							],
							[
								28388,
								28408
							],
							[
								28461,
								28484
							],
							[
								28564,
								28584
							],
							[
								28666,
								28684
							],
							[
								28827,
								28845
							],
							[
								28918,
								28950
							],
							[
								28961,
								28987
							],
							[
								29096,
								29105
							],
							[
								29308,
								29340
							],
							[
								29369,
								29385
							],
							[
								29400,
								29407
							],
							[
								29426,
								29445
							],
							[
								29484,
								29505
							],
							[
								29545,
								29558
							],
							[
								29609,
								29630
							],
							[
								29799,
								29827
							],
							[
								30046,
								30063
							],
							[
								30064,
								30078
							],
							[
								30100,
								30107
							],
							[
								30158,
								30175
							],
							[
								30176,
								30185
							],
							[
								30245,
								30262
							],
							[
								30263,
								30286
							],
							[
								30342,
								30366
							],
							[
								33025,
								33053
							],
							[
								33484,
								33488
							],
							[
								33616,
								33629
							],
							[
								33945,
								33957
							],
							[
								34220,
								34233
							],
							[
								34338,
								34352
							],
							[
								35245,
								35273
							],
							[
								35389,
								35402
							],
							[
								35514,
								35538
							],
							[
								35631,
								35665
							],
							[
								35786,
								35825
							],
							[
								35872,
								35909
							],
							[
								35956,
								35983
							],
							[
								35994,
								36010
							],
							[
								36068,
								36090
							],
							[
								36123,
								36133
							],
							[
								36182,
								36194
							],
							[
								36476,
								36486
							],
							[
								36561,
								36573
							],
							[
								36851,
								36877
							],
							[
								37127,
								37175
							],
							[
								37223,
								37335
							],
							[
								37440,
								37463
							],
							[
								37602,
								37634
							],
							[
								37947,
								38001
							],
							[
								38359,
								38411
							],
							[
								38550,
								38576
							],
							[
								38860,
								38876
							],
							[
								39043,
								39054
							],
							[
								39255,
								39307
							],
							[
								39481,
								39563
							],
							[
								39723,
								39733
							],
							[
								39751,
								39764
							],
							[
								39941,
								39985
							],
							[
								40146,
								40205
							],
							[
								40481,
								40517
							],
							[
								40676,
								40692
							],
							[
								40706,
								40728
							],
							[
								40842,
								40848
							],
							[
								40954,
								40967
							],
							[
								42574,
								42612
							],
							[
								42712,
								42728
							],
							[
								42801,
								42845
							],
							[
								43160,
								43180
							],
							[
								43380,
								43422
							],
							[
								43617,
								43648
							],
							[
								43698,
								43740
							],
							[
								43860,
								43884
							],
							[
								44142,
								44152
							],
							[
								44205,
								44209
							],
							[
								44248,
								44279
							],
							[
								44290,
								44307
							],
							[
								44448,
								44482
							],
							[
								44720,
								44739
							],
							[
								44777,
								44799
							],
							[
								44911,
								44933
							],
							[
								45045,
								45080
							],
							[
								45128,
								45155
							],
							[
								45246,
								45284
							],
							[
								45493,
								45541
							],
							[
								46121,
								46150
							],
							[
								46597,
								46637
							],
							[
								46732,
								46759
							],
							[
								46816,
								46843
							],
							[
								47046,
								47060
							],
							[
								47109,
								47115
							],
							[
								47156,
								47222
							],
							[
								47224,
								47228
							],
							[
								47386,
								47393
							],
							[
								47485,
								47495
							],
							[
								47606,
								47615
							],
							[
								47721,
								47747
							],
							[
								47880,
								47911
							],
							[
								48086,
								48105
							],
							[
								48147,
								48155
							],
							[
								48203,
								48212
							],
							[
								48246,
								48255
							],
							[
								48289,
								48298
							],
							[
								48332,
								48341
							],
							[
								48375,
								48384
							],
							[
								48417,
								48426
							],
							[
								48460,
								48469
							],
							[
								48503,
								48512
							],
							[
								48537,
								48571
							],
							[
								48715,
								48760
							],
							[
								48826,
								48836
							],
							[
								48875,
								48885
							],
							[
								48905,
								48915
							],
							[
								48943,
								48968
							],
							[
								49099,
								49124
							],
							[
								49222,
								49257
							],
							[
								49310,
								49344
							],
							[
								49426,
								49462
							],
							[
								49591,
								49595
							],
							[
								49626,
								49630
							],
							[
								49673,
								49677
							],
							[
								49705,
								49709
							],
							[
								49738,
								49766
							],
							[
								49896,
								49900
							],
							[
								49957,
								49988
							],
							[
								50327,
								50363
							],
							[
								50612,
								50642
							],
							[
								50810,
								50814
							],
							[
								51098,
								51125
							],
							[
								51169,
								51178
							],
							[
								51230,
								51242
							],
							[
								51384,
								51396
							],
							[
								51523,
								51548
							],
							[
								51588,
								51614
							],
							[
								51866,
								51890
							],
							[
								52083,
								52106
							],
							[
								52230,
								52377
							],
							[
								52386,
								52467
							],
							[
								52508,
								52519
							],
							[
								52521,
								52533
							],
							[
								52758,
								52778
							],
							[
								52995,
								53010
							],
							[
								53291,
								53314
							],
							[
								53519,
								53537
							],
							[
								53750,
								53764
							],
							[
								53825,
								53837
							],
							[
								53935,
								53944
							],
							[
								54220,
								54236
							],
							[
								54671,
								54707
							],
							[
								54835,
								54844
							],
							[
								55020,
								55031
							],
							[
								55042,
								55050
							],
							[
								55099,
								55111
							],
							[
								55356,
								55368
							],
							[
								55549,
								55575
							],
							[
								55594,
								55598
							],
							[
								55685,
								55709
							],
							[
								55787,
								55816
							],
							[
								55870,
								55901
							],
							[
								55908,
								55911
							],
							[
								55955,
								55968
							],
							[
								56068,
								56139
							],
							[
								56165,
								56191
							],
							[
								56337,
								56372
							],
							[
								56562,
								56589
							],
							[
								56699,
								56732
							],
							[
								56889,
								56945
							],
							[
								56956,
								56972
							],
							[
								57113,
								57144
							],
							[
								57184,
								57235
							],
							[
								57605,
								57633
							],
							[
								57787,
								57851
							],
							[
								57911,
								57926
							],
							[
								57992,
								58006
							],
							[
								58044,
								58067
							],
							[
								58259,
								58277
							],
							[
								58468,
								58538
							],
							[
								58687,
								58711
							],
							[
								58730,
								58738
							],
							[
								58774,
								58789
							],
							[
								58915,
								58928
							],
							[
								59083,
								59099
							],
							[
								59294,
								59320
							],
							[
								59335,
								59357
							],
							[
								59619,
								59623
							],
							[
								59809,
								59831
							],
							[
								59853,
								59863
							],
							[
								59881,
								59894
							],
							[
								60018,
								60040
							],
							[
								60062,
								60072
							],
							[
								60090,
								60103
							],
							[
								60209,
								60231
							],
							[
								60257,
								60267
							],
							[
								60285,
								60298
							],
							[
								60334,
								60356
							],
							[
								60377,
								60387
							],
							[
								60405,
								60418
							],
							[
								60438,
								60479
							],
							[
								60768,
								60791
							],
							[
								60872,
								60894
							],
							[
								60968,
								60988
							],
							[
								61115,
								61126
							],
							[
								61159,
								61176
							],
							[
								61340,
								61359
							],
							[
								61394,
								61416
							],
							[
								61548,
								61569
							],
							[
								61707,
								61727
							],
							[
								61794,
								61817
							],
							[
								61893,
								61915
							],
							[
								62024,
								62048
							],
							[
								62105,
								62117
							],
							[
								62288,
								62306
							],
							[
								62363,
								62375
							],
							[
								62527,
								62550
							],
							[
								62682,
								62698
							],
							[
								62745,
								62758
							],
							[
								62795,
								62862
							],
							[
								62898,
								62920
							],
							[
								62949,
								62959
							],
							[
								62975,
								62988
							],
							[
								63039,
								63052
							],
							[
								63119,
								63142
							],
							[
								63261,
								63283
							],
							[
								63371,
								63384
							],
							[
								63437,
								63453
							],
							[
								63491,
								63495
							],
							[
								63605,
								63642
							],
							[
								63653,
								63663
							],
							[
								63672,
								63701
							],
							[
								63918,
								63934
							],
							[
								63956,
								63967
							],
							[
								64022,
								64049
							],
							[
								64096,
								64114
							],
							[
								64188,
								64223
							],
							[
								64349,
								64370
							],
							[
								64404,
								64413
							],
							[
								64422,
								64430
							],
							[
								64473,
								64482
							],
							[
								64503,
								64512
							],
							[
								64523,
								64531
							],
							[
								64598,
								64607
							],
							[
								64639,
								64667
							],
							[
								64736,
								64755
							],
							[
								64962,
								64988
							],
							[
								65276,
								65298
							],
							[
								65443,
								65465
							],
							[
								65977,
								66027
							],
							[
								66191,
								66240
							],
							[
								66309,
								66316
							],
							[
								66401,
								66415
							],
							[
								66496,
								66506
							],
							[
								66612,
								66616
							],
							[
								66647,
								66667
							],
							[
								66713,
								66726
							],
							[
								66776,
								66788
							],
							[
								66928,
								66943
							],
							[
								67354,
								67392
							],
							[
								67574,
								67585
							],
							[
								67620,
								67641
							],
							[
								67710,
								67717
							],
							[
								67755,
								67785
							],
							[
								67807,
								67823
							],
							[
								67824,
								67844
							],
							[
								67934,
								67969
							],
							[
								68058,
								68063
							],
							[
								68086,
								68103
							]
						],
						"symlist":
						[
							"sliceFn = x =>",
							"ArrayBuffer(start, end)",
							"SharedArrayBuffer",
							"Uint8ClampedArray",
							"Int8Array",
							"Uint8Array",
							"Int16Array",
							"Uint16Array",
							"Int32Array",
							"Uint32Array",
							"BigInt64Array",
							"BigUint64Array",
							"Float32Array",
							"Float64Array",
							"slice = (x, s, e) =>",
							"length = x =>",
							"objectToString = o =>",
							"stringify = v =>",
							"formatNumber = n =>",
							"isNative = fn =>",
							"AsyncFunction = async function x()",
							"GeneratorFunction = function* ()",
							"AsyncGeneratorFunction = async function* ()",
							"isAnyArrayBuffer(v)",
							"isArrayBuffer(v)",
							"isBigInt64Array(v)",
							"isBigUint64Array(v)",
							"isDate(v)",
							"isFloat32Array(v)",
							"isFloat64Array(v)",
							"isInt8Array(v)",
							"isInt16Array(v)",
							"isInt32Array(v)",
							"isMap(v)",
							"isPromise(v)",
							"isProxy(v)",
							"isRegExp(v)",
							"isSet(v)",
							"isSharedArrayBuffer(v)",
							"isUint8Array(v)",
							"isUint8ClampedArray(v)",
							"isUint16Array(v)",
							"isUint32Array(v)",
							"isWeakMap(v)",
							"isWeakSet(v)",
							"isDataView(v)",
							"isBooleanObject(v)",
							"isAsyncFunction(v)",
							"isGeneratorFunction(v)",
							"isAsyncGeneratorFunction(v)",
							"isNumberObject(v)",
							"isBigIntObject(v)",
							"isSymbolObject(v)",
							"isNativeError(v)",
							"isMapIterator(v)",
							"isSetIterator(v)",
							"isStringObject(v)",
							"isArrayBufferView(v)",
							"isArgumentsObject(v)",
							"isBoxedPrimitive(v)",
							"ctor =>",
							"isGeneratorObject(v)",
							"isTypedArray(v)",
							"isModuleNamespaceObject(v)",
							"isConstructor(v)",
							"isIterable(v)",
							"isAsyncIterable(v)",
							"isIterator(v)",
							"isArrayLike(v)",
							" function hasBuiltIn(o, m)",
							" function isAsync(fn)",
							" function format(...args)",
							" function formatWithOptions(opts, ...args)",
							"function formatWithOptionsInternal(o, v)",
							" function assert(...args)",
							" function assertEqual(actual, expected, message)",
							" function setInterval(callback, ms)",
							" function start()",
							"() =>",
							" function clearInterval(id)",
							" function inherits(ctor, superCtor)",
							"ctor",
							"ctor",
							"superCtor",
							" function getConstructor(obj)",
							" function memoize(fn, cache = ",
							"())",
							" function Memoize(n, ...rest)",
							" function chain(first, ...fns)",
							" (acc, fn) =>",
							" function(...args)",
							" function chainRight(first, ...fns)",
							" (acc, fn) =>",
							" function(...args)",
							" function chainArray(tmp, ...fns)",
							"tmp = function(...args)",
							" function getset(target, ...args)",
							"key =>",
							" (key, value) =>",
							" key =>",
							"([k, v]) =>",
							" (key, value) =>",
							"([k, v]) =>",
							"key =>",
							" (key, value) =>",
							"() =>",
							" value =>",
							" function methods(obj)",
							"bind(...args)",
							"fn =>",
							"transform(read, write)",
							"key =>",
							" (key, value) =>",
							" function modifier(...args)",
							" fn =>",
							" newValue =>",
							" function getter(target, ...args)",
							"ret = (...argv) =>",
							"ret = (...argv) =>",
							"ret = (...argv) =>",
							" function setter(target, ...args)",
							" (...argv) =>",
							"ret = (key, value) =>",
							"ret = (...argv) =>",
							" function gettersetter(target, ...args)",
							"fn = (...args) =>",
							" (...args2) =>",
							"fn = (...args) =>",
							"fn = (...args) =>",
							"fn = (...args) =>",
							"fn = (...args) =>",
							" (...args2) =>",
							" function hasFn(target)",
							" key =>",
							" key =>",
							" function remover(target)",
							" key =>",
							" key =>",
							" function getOrCreate(target, create = () => ({}), set)",
							" key =>",
							" function hasGetSet(obj)",
							"m =>",
							" function getSetArgument(get, set)",
							" (...args) =>",
							" function wrapGetSet(getter, setter, ...args)",
							" prop =>",
							" (prop, value) =>",
							" function weakGetSet(...args)",
							" wref =>",
							" value =>",
							" function addremovehas(target, ...args)",
							"n =>",
							"el =>",
							" el =>",
							" el =>",
							" el =>",
							" el =>",
							"has = el =>",
							" function lookupObject(getset, instance = {}, handlers = {})",
							"get(target, prop)",
							"set(target, prop, value)",
							" function mapObject(target)",
							"set: (key, value) =>",
							"get: key =>",
							" function once(fn, thisArg, memoFn)",
							" function(...args)",
							" function waitFor(ms)",
							"resolve =>",
							" function waitCancellable(ms)",
							"resolve =>",
							"() =>",
							"cancel: () =>",
							" function extend(dst, src, options = { enumerable: false })",
							"options = (desc, prop) =>",
							" function define(obj, ...args)",
							" function nonenumerable(props, obj = {})",
							" (k, v) =>",
							" function defineGetter(obj, key, fn, enumerable = false)",
							" function defineGetterSetter(obj, key, g, s, enumerable = false)",
							" function defineGettersSetters(obj, gettersSetters)",
							" function* prototypeIterator(obj, pred = (obj, depth) => true)",
							" function pick(obj, keys)",
							" function omit(obj, keys)",
							" function keys(obj, start = 0, end = obj => obj === Object.prototype)",
							"pred = (obj, depth) =>",
							"end = () =>",
							"pred = (obj, depth) =>",
							" function entries(obj, start = 0, end = obj => obj === Object.prototype)",
							" function values(obj, start = 0, end = obj => obj === Object.prototype)",
							" function getMethodNames(obj, depth = 1, start = 0)",
							" function getMethods(obj, depth = 1, start = 0)",
							" function bindMethods(obj, methods, target)",
							" function properties(obj, options = { enumerable: true })",
							" fn =>",
							" fn =>",
							" function weakDefine(obj, ...args)",
							" function merge(...args)",
							" a =>",
							" a =>",
							"(acc, arg) =>",
							" function weakAssoc(fn = (value, ...args) => Object.",
							"(value, ...args))",
							" () =>",
							" map =>",
							"(obj, ...args) =>",
							" () =>",
							" (obj, ...args) =>",
							"self = (obj, ...args) =>",
							" function getConstructorChain(obj, ...range)",
							" function hasPrototype(obj, proto)",
							" function filter(seq, pred, thisArg)",
							"pred = (el, i) =>",
							" function filterKeys(r, needles, keep = true)",
							"pred = key =>",
							"pred = key =>",
							"(obj, key) =>",
							"curry = (f, arr = [], length = f.length) =>",
							" function(...args)",
							"a =>",
							"(min, max, value) =>",
							"generate = (fn, add) =>",
							"add = (item, gen) =>",
							" function(...args)",
							" function(...args)",
							" function* split(buf, ...points)",
							"splitAt = (b, pos, len) =>",
							"(a, b) =>",
							" function uniquePred(cmp = null)",
							" (el, i, arr) =>",
							"item =>",
							"i : (el, i, arr) =>",
							"unique = (...args) =>",
							"(arr, cmp) =>",
							"function* unique(seq)",
							"getFunctionArguments = fn =>",
							" (offset = 0) =>",
							" (...args) =>",
							"code =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" (red, green, blue) =>",
							"function getAnsiStyles()",
							"value: (red, green, blue) =>",
							"c =>",
							"value: hex =>",
							"character =>",
							"value: hex =>",
							"value: code =>",
							"value: (red, green, blue) =>",
							"value: hex =>",
							" function stripAnsi(str)",
							" function padAnsi(str, n, s = ' ')",
							" function padStartAnsi(str, n, s = ' ')",
							" function padEndAnsi(str, n, s = ' ')",
							" function mapFunctional(fn)",
							" function* (arg)",
							" function map(...args)",
							"ret = a =>",
							"function* ()",
							"ret = a =>",
							"function* ()",
							" function randInt(...args)",
							" function randFloat(min, max, rng = Math.random)",
							" function randStr(n, set = '_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', rng = Math.random)",
							" function toBigInt(arg)",
							" function roundDigits(precision)",
							" function roundTo(value, prec, digits, type = 'round')",
							" function lazyProperty(obj, name, getter, opts = {})",
							"replaceProperty = value =>",
							"async function()",
							" function()",
							" function lazyProperties(obj, gettersObj, opts = {})",
							" function observeProperties(target = {}, obj, fn = (prop, value) => {}, opts = {})",
							"get: () =>",
							"set: value =>",
							" function decorate(decorators, obj, ...args)",
							" function decorateProperty(target, property, ...decorators)",
							" function getOpt(options = {}, args)",
							"findOpt = arg =>",
							"([optname, option]) =>",
							"opt =>",
							"(acc, arg) =>",
							" function showHelp(opts, exitCode = 0)",
							"(acc, [name]) =>",
							" (acc, [name, [hasArg, fn, shortOpt]]) =>",
							" function isoDate(d)",
							" function toUnixTime(dateObj, utc = false)",
							" function unixTime(utc = false)",
							" function fromUnixTime(epoch, utc = false)",
							" function range(...args)",
							" (v, k) =>",
							"n =>",
							" function chunkArray(arr, size)",
							"fn = (a, v, i) =>",
							" function decodeHTMLEntities(text)",
							" (match, entity) =>",
							" function ucfirst(str)",
							" function lcfirst(str)",
							" function camelize(str, delim = '')",
							" (match, p1, p2, offset) =>",
							" function decamelize(str, delim = '-')",
							" function shorten(str, max = 40, suffix = '...')",
							" function* bytesToUTF8(bytes)",
							" function codePointsToString(codePoints)",
							" function bufferToString(b)",
							" function arraysInCommon(a)",
							"(itm, indx) =>",
							"arr =>",
							" function arrayFacade(proto, itemFn = (container, i) => container.",
							"(i))",
							"*keys()",
							"*entries()",
							"*values()",
							"forEach(callback, thisArg)",
							"reduce(callback, accu, thisArg)",
							" function mod(a, b)",
							"b : n =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							" function pushUnique(arr, ...args)",
							" function inserter(dest, next = (k, v) => {})",
							" (k, v) =>",
							" (k, v) =>",
							" (k, v) =>",
							"fn = function(key, value)",
							" function intersect(a, b)",
							" function symmetricDifference(a, b)",
							" function* partitionArray(a, size)",
							" function difference(a, b, includes)",
							"x =>",
							"x =>",
							"x =>",
							"x =>",
							" function intersection(a, b)",
							"x =>",
							" function union(a, b, equality)",
							" function partition(array, callback)",
							" function push(obj, ...values)",
							"v =>",
							" function repeater(n, what)",
							"n = () =>",
							"function* ()",
							"function* ()",
							" function repeat(n, what)",
							" function functionName(fn)",
							" function className(obj)",
							"isArrowFunction = fn =>",
							" function instrument( fn, log = (duration, name, args, ret) => console.log(`function '${name}'` + (ret !== undefined ? ` {= ${escape(ret + '').",
							"(0, 100) + '...'}}` : '') + ` timing: ${duration}ms`), logInterval = 0 //1000 )",
							"now = () =>",
							"([s, ns]) =>",
							"async (args, ret) =>",
							" (args, ret) =>",
							"async function(...args)",
							" function(...args)",
							"newMap = () =>",
							"(...args) =>",
							"get(path)",
							"set(path, value)",
							"catchable = function Catchable(self)",
							"catchable",
							"function ()",
							"then(fn)",
							"(...args) =>",
							"(...args) =>",
							" function isNumeric(value)",
							"v =>",
							" function isIndex(value)",
							" function numericIndex(value)",
							" function histogram(arr, out = ",
							"())",
							"incr = key =>",
							" function propertyLookupHandlers(getter = key => null, setter, thisObj)",
							"get(target, key, receiver)",
							".set = function(target, key, value)",
							".ownKeys = function(target)",
							" function propertyLookup(...args)",
							" function padFn(len, char = ' ', fn = (str, pad) => pad)",
							" (s, n = len) =>",
							" function pad(s, n, char = ' ')",
							" function abbreviate(str, max = 40, suffix = '...')",
							" function trim(str, charset)",
							" function tryFunction(fn, resolve = a => a, reject = () => null)",
							"resolve = () =>",
							"reject = () =>",
							"async function(...args)",
							" function(...args)",
							" function tryCatch(fn, resolve = a => a, reject = () => null, ...args)",
							" function mapAdapter(fn)",
							"get(key)",
							"set(key, value)",
							".keys = () =>",
							".entries = () =>",
							" function mapFunction(map)",
							"fn = function(...args)",
							"m =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".update = function(key, fn = (k, v) => v)",
							".entries = function* ()",
							".values = function* ()",
							".keys = function* ()",
							" function()",
							"([key, value]) =>",
							".keys = async () =>",
							".entries = async () =>",
							".values = async () =>",
							".keys = function* ()",
							".entries = function* ()",
							".values = function* ()",
							".filter = function(pred)",
							"function* ()",
							".map = function(t)",
							"function* ()",
							".forEach = function(fn)",
							".delete = key =>",
							".has = key =>",
							" function mapWrapper(map, toKey = key => key, fromKey = key => key)",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".keys = () =>",
							".entries = function* ()",
							".values = function* ()",
							".has = key =>",
							".delete = key =>",
							"m =>",
							" function weakMapper(createFn, map = ",
							"(), hitFn)",
							"self = function(obj, ...args)",
							".set = (k, v) =>",
							".get = k =>",
							" function wrapGenerator(fn)",
							" function(...args)",
							" function wrapGeneratorMethods(obj)",
							" function isBrowser()",
							" () =>",
							" w =>",
							" () =>",
							" () =>",
							" d =>",
							" () =>",
							" function startInteractive()",
							"function* (re, str)",
							" function indexOf(...args)",
							" (what, offset = 0) =>",
							" (what, offset = 0) =>",
							" function* searchAll(haystack, needle, offset = 0)",
							" function bindProperties(obj, target, props, gen)",
							"name =>",
							"(acc, name) =>",
							" p => v =>",
							"k =>",
							" (a, [k, v]) =>",
							" (...args) =>",
							"(...args) =>",
							" (a, k) =>",
							" function predicate(fn_or_regex, pred)",
							"fn = arg =>",
							".valueOf = function()",
							" arg =>",
							" function transformer(a, ...l)",
							" (acc, fn) =>",
							" function(...v)",
							" function getSystemErrorName(errno)",
							"() =>",
							"(acc, name, i) =>"
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				],
				[
					88,
					1,
					"outline_refresh",
					{
						"path": "/home/janos/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
						"symkeys":
						[
							[
								469,
								483
							],
							[
								563,
								586
							],
							[
								724,
								741
							],
							[
								782,
								799
							],
							[
								832,
								841
							],
							[
								875,
								885
							],
							[
								919,
								929
							],
							[
								964,
								975
							],
							[
								1009,
								1019
							],
							[
								1054,
								1065
							],
							[
								1102,
								1115
							],
							[
								1153,
								1167
							],
							[
								1203,
								1215
							],
							[
								1251,
								1263
							],
							[
								1316,
								1336
							],
							[
								1389,
								1402
							],
							[
								1462,
								1483
							],
							[
								1525,
								1541
							],
							[
								1595,
								1614
							],
							[
								1649,
								1665
							],
							[
								1789,
								1823
							],
							[
								1846,
								1878
							],
							[
								1901,
								1944
							],
							[
								3773,
								3792
							],
							[
								3890,
								3906
							],
							[
								3968,
								3986
							],
							[
								4050,
								4069
							],
							[
								4134,
								4143
							],
							[
								4198,
								4215
							],
							[
								4278,
								4295
							],
							[
								4358,
								4372
							],
							[
								4432,
								4447
							],
							[
								4508,
								4523
							],
							[
								4584,
								4592
							],
							[
								4646,
								4658
							],
							[
								4716,
								4726
							],
							[
								4782,
								4793
							],
							[
								4850,
								4858
							],
							[
								4912,
								4934
							],
							[
								5002,
								5017
							],
							[
								5078,
								5100
							],
							[
								5168,
								5184
							],
							[
								5246,
								5262
							],
							[
								5324,
								5336
							],
							[
								5394,
								5406
							],
							[
								5464,
								5477
							],
							[
								5536,
								5554
							],
							[
								5612,
								5630
							],
							[
								5694,
								5716
							],
							[
								5784,
								5811
							],
							[
								5884,
								5901
							],
							[
								5958,
								5975
							],
							[
								6032,
								6049
							],
							[
								6096,
								6112
							],
							[
								6195,
								6211
							],
							[
								6283,
								6299
							],
							[
								6371,
								6388
							],
							[
								6445,
								6465
							],
							[
								6524,
								6544
							],
							[
								6687,
								6706
							],
							[
								6782,
								6789
							],
							[
								6818,
								6838
							],
							[
								6917,
								6932
							],
							[
								6993,
								7019
							],
							[
								7090,
								7106
							],
							[
								7162,
								7175
							],
							[
								7243,
								7261
							],
							[
								7334,
								7347
							],
							[
								7403,
								7417
							],
							[
								7519,
								7545
							],
							[
								7591,
								7612
							],
							[
								7771,
								7796
							],
							[
								7881,
								7923
							],
							[
								8057,
								8097
							],
							[
								11017,
								11042
							],
							[
								11258,
								11306
							],
							[
								11623,
								11658
							],
							[
								11814,
								11832
							],
							[
								11862,
								11867
							],
							[
								11957,
								11984
							],
							[
								12103,
								12138
							],
							[
								12199,
								12203
							],
							[
								12219,
								12223
							],
							[
								12250,
								12259
							],
							[
								12422,
								12451
							],
							[
								12531,
								12561
							],
							[
								12568,
								12571
							],
							[
								12625,
								12657
							],
							[
								12899,
								12929
							],
							[
								12953,
								12969
							],
							[
								12970,
								12993
							],
							[
								13090,
								13125
							],
							[
								13149,
								13165
							],
							[
								13166,
								13189
							],
							[
								13286,
								13319
							],
							[
								13369,
								13392
							],
							[
								13486,
								13519
							],
							[
								13977,
								13983
							],
							[
								14000,
								14016
							],
							[
								14091,
								14103
							],
							[
								14138,
								14149
							],
							[
								14216,
								14237
							],
							[
								14273,
								14284
							],
							[
								14530,
								14536
							],
							[
								14549,
								14565
							],
							[
								14765,
								14770
							],
							[
								14784,
								14793
							],
							[
								14820,
								14843
							],
							[
								14877,
								14890
							],
							[
								14917,
								14922
							],
							[
								14963,
								14985
							],
							[
								15043,
								15049
							],
							[
								15065,
								15081
							],
							[
								15160,
								15187
							],
							[
								15232,
								15238
							],
							[
								15283,
								15295
							],
							[
								15325,
								15358
							],
							[
								15536,
								15554
							],
							[
								15637,
								15655
							],
							[
								15774,
								15792
							],
							[
								15967,
								16000
							],
							[
								16133,
								16146
							],
							[
								16266,
								16287
							],
							[
								16357,
								16375
							],
							[
								16818,
								16857
							],
							[
								16934,
								16951
							],
							[
								17074,
								17088
							],
							[
								17250,
								17267
							],
							[
								17408,
								17425
							],
							[
								17456,
								17473
							],
							[
								17573,
								17590
							],
							[
								17882,
								17896
							],
							[
								17942,
								17965
							],
							[
								18022,
								18029
							],
							[
								18047,
								18054
							],
							[
								18079,
								18104
							],
							[
								18164,
								18171
							],
							[
								18192,
								18199
							],
							[
								18229,
								18284
							],
							[
								18389,
								18396
							],
							[
								18534,
								18558
							],
							[
								18608,
								18612
							],
							[
								18643,
								18677
							],
							[
								18688,
								18701
							],
							[
								18760,
								18805
							],
							[
								18870,
								18881
							],
							[
								18901,
								18921
							],
							[
								18961,
								18990
							],
							[
								19014,
								19025
							],
							[
								19040,
								19052
							],
							[
								19099,
								19138
							],
							[
								19239,
								19243
							],
							[
								19276,
								19281
							],
							[
								19307,
								19313
							],
							[
								19342,
								19348
							],
							[
								19441,
								19454
							],
							[
								19482,
								19495
							],
							[
								19621,
								19632
							],
							[
								19712,
								19772
							],
							[
								19842,
								19859
							],
							[
								19920,
								19944
							],
							[
								20019,
								20046
							],
							[
								20267,
								20287
							],
							[
								20317,
								20328
							],
							[
								20427,
								20462
							],
							[
								20502,
								20520
							],
							[
								20698,
								20719
							],
							[
								20743,
								20753
							],
							[
								20789,
								20818
							],
							[
								20874,
								20884
							],
							[
								20935,
								20940
							],
							[
								20997,
								21010
							],
							[
								21083,
								21142
							],
							[
								21209,
								21234
							],
							[
								21614,
								21644
							],
							[
								22062,
								22102
							],
							[
								22196,
								22206
							],
							[
								22252,
								22308
							],
							[
								22469,
								22533
							],
							[
								22681,
								22732
							],
							[
								23399,
								23461
							],
							[
								23643,
								23668
							],
							[
								23765,
								23790
							],
							[
								23903,
								23972
							],
							[
								24061,
								24083
							],
							[
								24117,
								24128
							],
							[
								24151,
								24173
							],
							[
								24415,
								24487
							],
							[
								24590,
								24661
							],
							[
								24757,
								24808
							],
							[
								24980,
								25027
							],
							[
								25094,
								25137
							],
							[
								25267,
								25324
							],
							[
								25418,
								25424
							],
							[
								25438,
								25444
							],
							[
								25748,
								25782
							],
							[
								26083,
								26107
							],
							[
								26176,
								26181
							],
							[
								26210,
								26215
							],
							[
								26505,
								26518
							],
							[
								26574,
								26626
							],
							[
								26632,
								26649
							],
							[
								26677,
								26686
							],
							[
								26702,
								26712
							],
							[
								26724,
								26741
							],
							[
								26764,
								26773
							],
							[
								26774,
								26797
							],
							[
								26838,
								26862
							],
							[
								26987,
								27031
							],
							[
								27198,
								27232
							],
							[
								27298,
								27334
							],
							[
								27389,
								27406
							],
							[
								27728,
								27773
							],
							[
								27880,
								27893
							],
							[
								27984,
								27997
							],
							[
								28096,
								28109
							],
							[
								28183,
								28226
							],
							[
								28227,
								28246
							],
							[
								28261,
								28265
							],
							[
								28388,
								28408
							],
							[
								28461,
								28484
							],
							[
								28564,
								28584
							],
							[
								28666,
								28684
							],
							[
								28827,
								28845
							],
							[
								28918,
								28950
							],
							[
								28961,
								28987
							],
							[
								29096,
								29105
							],
							[
								29308,
								29340
							],
							[
								29369,
								29385
							],
							[
								29400,
								29407
							],
							[
								29426,
								29445
							],
							[
								29484,
								29505
							],
							[
								29545,
								29558
							],
							[
								29609,
								29630
							],
							[
								29799,
								29827
							],
							[
								30046,
								30063
							],
							[
								30064,
								30078
							],
							[
								30100,
								30107
							],
							[
								30158,
								30175
							],
							[
								30176,
								30185
							],
							[
								30245,
								30262
							],
							[
								30263,
								30286
							],
							[
								30342,
								30366
							],
							[
								33025,
								33053
							],
							[
								33484,
								33488
							],
							[
								33616,
								33629
							],
							[
								33945,
								33957
							],
							[
								34220,
								34233
							],
							[
								34338,
								34352
							],
							[
								35245,
								35273
							],
							[
								35389,
								35402
							],
							[
								35514,
								35538
							],
							[
								35631,
								35665
							],
							[
								35786,
								35825
							],
							[
								35872,
								35909
							],
							[
								35956,
								35983
							],
							[
								35994,
								36010
							],
							[
								36068,
								36090
							],
							[
								36123,
								36133
							],
							[
								36182,
								36194
							],
							[
								36476,
								36486
							],
							[
								36561,
								36573
							],
							[
								36851,
								36877
							],
							[
								37127,
								37175
							],
							[
								37223,
								37335
							],
							[
								37440,
								37463
							],
							[
								37602,
								37634
							],
							[
								37947,
								38001
							],
							[
								38359,
								38411
							],
							[
								38550,
								38576
							],
							[
								38860,
								38876
							],
							[
								39043,
								39054
							],
							[
								39255,
								39307
							],
							[
								39481,
								39563
							],
							[
								39723,
								39733
							],
							[
								39751,
								39764
							],
							[
								39941,
								39985
							],
							[
								40146,
								40205
							],
							[
								40481,
								40517
							],
							[
								40676,
								40692
							],
							[
								40706,
								40728
							],
							[
								40842,
								40848
							],
							[
								40954,
								40967
							],
							[
								42574,
								42612
							],
							[
								42712,
								42728
							],
							[
								42801,
								42845
							],
							[
								43160,
								43180
							],
							[
								43380,
								43422
							],
							[
								43617,
								43648
							],
							[
								43698,
								43740
							],
							[
								43860,
								43884
							],
							[
								44142,
								44152
							],
							[
								44205,
								44209
							],
							[
								44248,
								44279
							],
							[
								44290,
								44307
							],
							[
								44448,
								44482
							],
							[
								44720,
								44739
							],
							[
								44777,
								44799
							],
							[
								44911,
								44933
							],
							[
								45045,
								45080
							],
							[
								45128,
								45155
							],
							[
								45246,
								45284
							],
							[
								45493,
								45541
							],
							[
								46121,
								46150
							],
							[
								46597,
								46637
							],
							[
								46732,
								46759
							],
							[
								46816,
								46843
							],
							[
								47046,
								47060
							],
							[
								47109,
								47115
							],
							[
								47156,
								47222
							],
							[
								47224,
								47228
							],
							[
								47386,
								47393
							],
							[
								47485,
								47495
							],
							[
								47606,
								47615
							],
							[
								47721,
								47747
							],
							[
								47880,
								47911
							],
							[
								48086,
								48105
							],
							[
								48147,
								48155
							],
							[
								48203,
								48212
							],
							[
								48246,
								48255
							],
							[
								48289,
								48298
							],
							[
								48332,
								48341
							],
							[
								48375,
								48384
							],
							[
								48417,
								48426
							],
							[
								48460,
								48469
							],
							[
								48503,
								48512
							],
							[
								48537,
								48571
							],
							[
								48715,
								48760
							],
							[
								48826,
								48836
							],
							[
								48875,
								48885
							],
							[
								48905,
								48915
							],
							[
								48943,
								48968
							],
							[
								49099,
								49124
							],
							[
								49222,
								49257
							],
							[
								49310,
								49344
							],
							[
								49426,
								49462
							],
							[
								49591,
								49595
							],
							[
								49626,
								49630
							],
							[
								49673,
								49677
							],
							[
								49705,
								49709
							],
							[
								49738,
								49766
							],
							[
								49896,
								49900
							],
							[
								49957,
								49988
							],
							[
								50327,
								50363
							],
							[
								50612,
								50642
							],
							[
								50810,
								50814
							],
							[
								51098,
								51125
							],
							[
								51169,
								51178
							],
							[
								51230,
								51242
							],
							[
								51384,
								51396
							],
							[
								51523,
								51548
							],
							[
								51588,
								51614
							],
							[
								51866,
								51890
							],
							[
								52083,
								52106
							],
							[
								52230,
								52377
							],
							[
								52386,
								52467
							],
							[
								52508,
								52519
							],
							[
								52521,
								52533
							],
							[
								52758,
								52778
							],
							[
								52995,
								53010
							],
							[
								53291,
								53314
							],
							[
								53519,
								53537
							],
							[
								53750,
								53764
							],
							[
								53825,
								53837
							],
							[
								53935,
								53944
							],
							[
								54220,
								54236
							],
							[
								54671,
								54707
							],
							[
								54835,
								54844
							],
							[
								55020,
								55031
							],
							[
								55042,
								55050
							],
							[
								55099,
								55111
							],
							[
								55356,
								55368
							],
							[
								55549,
								55575
							],
							[
								55594,
								55598
							],
							[
								55685,
								55709
							],
							[
								55787,
								55816
							],
							[
								55870,
								55901
							],
							[
								55908,
								55911
							],
							[
								55955,
								55968
							],
							[
								56068,
								56139
							],
							[
								56165,
								56191
							],
							[
								56337,
								56372
							],
							[
								56562,
								56589
							],
							[
								56699,
								56732
							],
							[
								56889,
								56945
							],
							[
								56956,
								56972
							],
							[
								57113,
								57144
							],
							[
								57184,
								57235
							],
							[
								57605,
								57633
							],
							[
								57787,
								57851
							],
							[
								57911,
								57926
							],
							[
								57992,
								58006
							],
							[
								58044,
								58067
							],
							[
								58259,
								58277
							],
							[
								58468,
								58538
							],
							[
								58687,
								58711
							],
							[
								58730,
								58738
							],
							[
								58774,
								58789
							],
							[
								58915,
								58928
							],
							[
								59083,
								59099
							],
							[
								59294,
								59320
							],
							[
								59335,
								59357
							],
							[
								59619,
								59623
							],
							[
								59809,
								59831
							],
							[
								59853,
								59863
							],
							[
								59881,
								59894
							],
							[
								60018,
								60040
							],
							[
								60062,
								60072
							],
							[
								60090,
								60103
							],
							[
								60209,
								60231
							],
							[
								60257,
								60267
							],
							[
								60285,
								60298
							],
							[
								60334,
								60356
							],
							[
								60377,
								60387
							],
							[
								60405,
								60418
							],
							[
								60438,
								60479
							],
							[
								60768,
								60791
							],
							[
								60872,
								60894
							],
							[
								60968,
								60988
							],
							[
								61115,
								61126
							],
							[
								61159,
								61176
							],
							[
								61340,
								61359
							],
							[
								61394,
								61416
							],
							[
								61548,
								61569
							],
							[
								61707,
								61727
							],
							[
								61794,
								61817
							],
							[
								61893,
								61915
							],
							[
								62024,
								62048
							],
							[
								62105,
								62117
							],
							[
								62288,
								62306
							],
							[
								62363,
								62375
							],
							[
								62527,
								62550
							],
							[
								62682,
								62698
							],
							[
								62745,
								62758
							],
							[
								62795,
								62862
							],
							[
								62898,
								62920
							],
							[
								62949,
								62959
							],
							[
								62975,
								62988
							],
							[
								63039,
								63052
							],
							[
								63119,
								63142
							],
							[
								63261,
								63283
							],
							[
								63371,
								63384
							],
							[
								63437,
								63453
							],
							[
								63491,
								63495
							],
							[
								63605,
								63642
							],
							[
								63653,
								63663
							],
							[
								63672,
								63701
							],
							[
								63918,
								63934
							],
							[
								63956,
								63967
							],
							[
								64022,
								64049
							],
							[
								64096,
								64114
							],
							[
								64188,
								64223
							],
							[
								64349,
								64370
							],
							[
								64404,
								64413
							],
							[
								64422,
								64430
							],
							[
								64473,
								64482
							],
							[
								64503,
								64512
							],
							[
								64523,
								64531
							],
							[
								64598,
								64607
							],
							[
								64639,
								64667
							],
							[
								64736,
								64755
							],
							[
								64962,
								64988
							],
							[
								65276,
								65298
							],
							[
								65443,
								65465
							],
							[
								65977,
								66027
							],
							[
								66191,
								66240
							],
							[
								66309,
								66316
							],
							[
								66401,
								66415
							],
							[
								66496,
								66506
							],
							[
								66612,
								66616
							],
							[
								66647,
								66667
							],
							[
								66713,
								66726
							],
							[
								66776,
								66788
							],
							[
								66928,
								66943
							],
							[
								67354,
								67392
							],
							[
								67574,
								67585
							],
							[
								67620,
								67641
							],
							[
								67710,
								67717
							],
							[
								67755,
								67785
							],
							[
								67807,
								67823
							],
							[
								67824,
								67844
							],
							[
								67934,
								67969
							],
							[
								68058,
								68063
							],
							[
								68086,
								68103
							]
						],
						"symlist":
						[
							"sliceFn = x =>",
							"ArrayBuffer(start, end)",
							"SharedArrayBuffer",
							"Uint8ClampedArray",
							"Int8Array",
							"Uint8Array",
							"Int16Array",
							"Uint16Array",
							"Int32Array",
							"Uint32Array",
							"BigInt64Array",
							"BigUint64Array",
							"Float32Array",
							"Float64Array",
							"slice = (x, s, e) =>",
							"length = x =>",
							"objectToString = o =>",
							"stringify = v =>",
							"formatNumber = n =>",
							"isNative = fn =>",
							"AsyncFunction = async function x()",
							"GeneratorFunction = function* ()",
							"AsyncGeneratorFunction = async function* ()",
							"isAnyArrayBuffer(v)",
							"isArrayBuffer(v)",
							"isBigInt64Array(v)",
							"isBigUint64Array(v)",
							"isDate(v)",
							"isFloat32Array(v)",
							"isFloat64Array(v)",
							"isInt8Array(v)",
							"isInt16Array(v)",
							"isInt32Array(v)",
							"isMap(v)",
							"isPromise(v)",
							"isProxy(v)",
							"isRegExp(v)",
							"isSet(v)",
							"isSharedArrayBuffer(v)",
							"isUint8Array(v)",
							"isUint8ClampedArray(v)",
							"isUint16Array(v)",
							"isUint32Array(v)",
							"isWeakMap(v)",
							"isWeakSet(v)",
							"isDataView(v)",
							"isBooleanObject(v)",
							"isAsyncFunction(v)",
							"isGeneratorFunction(v)",
							"isAsyncGeneratorFunction(v)",
							"isNumberObject(v)",
							"isBigIntObject(v)",
							"isSymbolObject(v)",
							"isNativeError(v)",
							"isMapIterator(v)",
							"isSetIterator(v)",
							"isStringObject(v)",
							"isArrayBufferView(v)",
							"isArgumentsObject(v)",
							"isBoxedPrimitive(v)",
							"ctor =>",
							"isGeneratorObject(v)",
							"isTypedArray(v)",
							"isModuleNamespaceObject(v)",
							"isConstructor(v)",
							"isIterable(v)",
							"isAsyncIterable(v)",
							"isIterator(v)",
							"isArrayLike(v)",
							" function hasBuiltIn(o, m)",
							" function isAsync(fn)",
							" function format(...args)",
							" function formatWithOptions(opts, ...args)",
							"function formatWithOptionsInternal(o, v)",
							" function assert(...args)",
							" function assertEqual(actual, expected, message)",
							" function setInterval(callback, ms)",
							" function start()",
							"() =>",
							" function clearInterval(id)",
							" function inherits(ctor, superCtor)",
							"ctor",
							"ctor",
							"superCtor",
							" function getConstructor(obj)",
							" function memoize(fn, cache = ",
							"())",
							" function Memoize(n, ...rest)",
							" function chain(first, ...fns)",
							" (acc, fn) =>",
							" function(...args)",
							" function chainRight(first, ...fns)",
							" (acc, fn) =>",
							" function(...args)",
							" function chainArray(tmp, ...fns)",
							"tmp = function(...args)",
							" function getset(target, ...args)",
							"key =>",
							" (key, value) =>",
							" key =>",
							"([k, v]) =>",
							" (key, value) =>",
							"([k, v]) =>",
							"key =>",
							" (key, value) =>",
							"() =>",
							" value =>",
							" function methods(obj)",
							"bind(...args)",
							"fn =>",
							"transform(read, write)",
							"key =>",
							" (key, value) =>",
							" function modifier(...args)",
							" fn =>",
							" newValue =>",
							" function getter(target, ...args)",
							"ret = (...argv) =>",
							"ret = (...argv) =>",
							"ret = (...argv) =>",
							" function setter(target, ...args)",
							" (...argv) =>",
							"ret = (key, value) =>",
							"ret = (...argv) =>",
							" function gettersetter(target, ...args)",
							"fn = (...args) =>",
							" (...args2) =>",
							"fn = (...args) =>",
							"fn = (...args) =>",
							"fn = (...args) =>",
							"fn = (...args) =>",
							" (...args2) =>",
							" function hasFn(target)",
							" key =>",
							" key =>",
							" function remover(target)",
							" key =>",
							" key =>",
							" function getOrCreate(target, create = () => ({}), set)",
							" key =>",
							" function hasGetSet(obj)",
							"m =>",
							" function getSetArgument(get, set)",
							" (...args) =>",
							" function wrapGetSet(getter, setter, ...args)",
							" prop =>",
							" (prop, value) =>",
							" function weakGetSet(...args)",
							" wref =>",
							" value =>",
							" function addremovehas(target, ...args)",
							"n =>",
							"el =>",
							" el =>",
							" el =>",
							" el =>",
							" el =>",
							"has = el =>",
							" function lookupObject(getset, instance = {}, handlers = {})",
							"get(target, prop)",
							"set(target, prop, value)",
							" function mapObject(target)",
							"set: (key, value) =>",
							"get: key =>",
							" function once(fn, thisArg, memoFn)",
							" function(...args)",
							" function waitFor(ms)",
							"resolve =>",
							" function waitCancellable(ms)",
							"resolve =>",
							"() =>",
							"cancel: () =>",
							" function extend(dst, src, options = { enumerable: false })",
							"options = (desc, prop) =>",
							" function define(obj, ...args)",
							" function nonenumerable(props, obj = {})",
							" (k, v) =>",
							" function defineGetter(obj, key, fn, enumerable = false)",
							" function defineGetterSetter(obj, key, g, s, enumerable = false)",
							" function defineGettersSetters(obj, gettersSetters)",
							" function* prototypeIterator(obj, pred = (obj, depth) => true)",
							" function pick(obj, keys)",
							" function omit(obj, keys)",
							" function keys(obj, start = 0, end = obj => obj === Object.prototype)",
							"pred = (obj, depth) =>",
							"end = () =>",
							"pred = (obj, depth) =>",
							" function entries(obj, start = 0, end = obj => obj === Object.prototype)",
							" function values(obj, start = 0, end = obj => obj === Object.prototype)",
							" function getMethodNames(obj, depth = 1, start = 0)",
							" function getMethods(obj, depth = 1, start = 0)",
							" function bindMethods(obj, methods, target)",
							" function properties(obj, options = { enumerable: true })",
							" fn =>",
							" fn =>",
							" function weakDefine(obj, ...args)",
							" function merge(...args)",
							" a =>",
							" a =>",
							"(acc, arg) =>",
							" function weakAssoc(fn = (value, ...args) => Object.",
							"(value, ...args))",
							" () =>",
							" map =>",
							"(obj, ...args) =>",
							" () =>",
							" (obj, ...args) =>",
							"self = (obj, ...args) =>",
							" function getConstructorChain(obj, ...range)",
							" function hasPrototype(obj, proto)",
							" function filter(seq, pred, thisArg)",
							"pred = (el, i) =>",
							" function filterKeys(r, needles, keep = true)",
							"pred = key =>",
							"pred = key =>",
							"(obj, key) =>",
							"curry = (f, arr = [], length = f.length) =>",
							" function(...args)",
							"a =>",
							"(min, max, value) =>",
							"generate = (fn, add) =>",
							"add = (item, gen) =>",
							" function(...args)",
							" function(...args)",
							" function* split(buf, ...points)",
							"splitAt = (b, pos, len) =>",
							"(a, b) =>",
							" function uniquePred(cmp = null)",
							" (el, i, arr) =>",
							"item =>",
							"i : (el, i, arr) =>",
							"unique = (...args) =>",
							"(arr, cmp) =>",
							"function* unique(seq)",
							"getFunctionArguments = fn =>",
							" (offset = 0) =>",
							" (...args) =>",
							"code =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" (red, green, blue) =>",
							"function getAnsiStyles()",
							"value: (red, green, blue) =>",
							"c =>",
							"value: hex =>",
							"character =>",
							"value: hex =>",
							"value: code =>",
							"value: (red, green, blue) =>",
							"value: hex =>",
							" function stripAnsi(str)",
							" function padAnsi(str, n, s = ' ')",
							" function padStartAnsi(str, n, s = ' ')",
							" function padEndAnsi(str, n, s = ' ')",
							" function mapFunctional(fn)",
							" function* (arg)",
							" function map(...args)",
							"ret = a =>",
							"function* ()",
							"ret = a =>",
							"function* ()",
							" function randInt(...args)",
							" function randFloat(min, max, rng = Math.random)",
							" function randStr(n, set = '_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', rng = Math.random)",
							" function toBigInt(arg)",
							" function roundDigits(precision)",
							" function roundTo(value, prec, digits, type = 'round')",
							" function lazyProperty(obj, name, getter, opts = {})",
							"replaceProperty = value =>",
							"async function()",
							" function()",
							" function lazyProperties(obj, gettersObj, opts = {})",
							" function observeProperties(target = {}, obj, fn = (prop, value) => {}, opts = {})",
							"get: () =>",
							"set: value =>",
							" function decorate(decorators, obj, ...args)",
							" function decorateProperty(target, property, ...decorators)",
							" function getOpt(options = {}, args)",
							"findOpt = arg =>",
							"([optname, option]) =>",
							"opt =>",
							"(acc, arg) =>",
							" function showHelp(opts, exitCode = 0)",
							"(acc, [name]) =>",
							" (acc, [name, [hasArg, fn, shortOpt]]) =>",
							" function isoDate(d)",
							" function toUnixTime(dateObj, utc = false)",
							" function unixTime(utc = false)",
							" function fromUnixTime(epoch, utc = false)",
							" function range(...args)",
							" (v, k) =>",
							"n =>",
							" function chunkArray(arr, size)",
							"fn = (a, v, i) =>",
							" function decodeHTMLEntities(text)",
							" (match, entity) =>",
							" function ucfirst(str)",
							" function lcfirst(str)",
							" function camelize(str, delim = '')",
							" (match, p1, p2, offset) =>",
							" function decamelize(str, delim = '-')",
							" function shorten(str, max = 40, suffix = '...')",
							" function* bytesToUTF8(bytes)",
							" function codePointsToString(codePoints)",
							" function bufferToString(b)",
							" function arraysInCommon(a)",
							"(itm, indx) =>",
							"arr =>",
							" function arrayFacade(proto, itemFn = (container, i) => container.",
							"(i))",
							"*keys()",
							"*entries()",
							"*values()",
							"forEach(callback, thisArg)",
							"reduce(callback, accu, thisArg)",
							" function mod(a, b)",
							"b : n =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							" function pushUnique(arr, ...args)",
							" function inserter(dest, next = (k, v) => {})",
							" (k, v) =>",
							" (k, v) =>",
							" (k, v) =>",
							"fn = function(key, value)",
							" function intersect(a, b)",
							" function symmetricDifference(a, b)",
							" function* partitionArray(a, size)",
							" function difference(a, b, includes)",
							"x =>",
							"x =>",
							"x =>",
							"x =>",
							" function intersection(a, b)",
							"x =>",
							" function union(a, b, equality)",
							" function partition(array, callback)",
							" function push(obj, ...values)",
							"v =>",
							" function repeater(n, what)",
							"n = () =>",
							"function* ()",
							"function* ()",
							" function repeat(n, what)",
							" function functionName(fn)",
							" function className(obj)",
							"isArrowFunction = fn =>",
							" function instrument( fn, log = (duration, name, args, ret) => console.log(`function '${name}'` + (ret !== undefined ? ` {= ${escape(ret + '').",
							"(0, 100) + '...'}}` : '') + ` timing: ${duration}ms`), logInterval = 0 //1000 )",
							"now = () =>",
							"([s, ns]) =>",
							"async (args, ret) =>",
							" (args, ret) =>",
							"async function(...args)",
							" function(...args)",
							"newMap = () =>",
							"(...args) =>",
							"get(path)",
							"set(path, value)",
							"catchable = function Catchable(self)",
							"catchable",
							"function ()",
							"then(fn)",
							"(...args) =>",
							"(...args) =>",
							" function isNumeric(value)",
							"v =>",
							" function isIndex(value)",
							" function numericIndex(value)",
							" function histogram(arr, out = ",
							"())",
							"incr = key =>",
							" function propertyLookupHandlers(getter = key => null, setter, thisObj)",
							"get(target, key, receiver)",
							".set = function(target, key, value)",
							".ownKeys = function(target)",
							" function propertyLookup(...args)",
							" function padFn(len, char = ' ', fn = (str, pad) => pad)",
							" (s, n = len) =>",
							" function pad(s, n, char = ' ')",
							" function abbreviate(str, max = 40, suffix = '...')",
							" function trim(str, charset)",
							" function tryFunction(fn, resolve = a => a, reject = () => null)",
							"resolve = () =>",
							"reject = () =>",
							"async function(...args)",
							" function(...args)",
							" function tryCatch(fn, resolve = a => a, reject = () => null, ...args)",
							" function mapAdapter(fn)",
							"get(key)",
							"set(key, value)",
							".keys = () =>",
							".entries = () =>",
							" function mapFunction(map)",
							"fn = function(...args)",
							"m =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".update = function(key, fn = (k, v) => v)",
							".entries = function* ()",
							".values = function* ()",
							".keys = function* ()",
							" function()",
							"([key, value]) =>",
							".keys = async () =>",
							".entries = async () =>",
							".values = async () =>",
							".keys = function* ()",
							".entries = function* ()",
							".values = function* ()",
							".filter = function(pred)",
							"function* ()",
							".map = function(t)",
							"function* ()",
							".forEach = function(fn)",
							".delete = key =>",
							".has = key =>",
							" function mapWrapper(map, toKey = key => key, fromKey = key => key)",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".keys = () =>",
							".entries = function* ()",
							".values = function* ()",
							".has = key =>",
							".delete = key =>",
							"m =>",
							" function weakMapper(createFn, map = ",
							"(), hitFn)",
							"self = function(obj, ...args)",
							".set = (k, v) =>",
							".get = k =>",
							" function wrapGenerator(fn)",
							" function(...args)",
							" function wrapGeneratorMethods(obj)",
							" function isBrowser()",
							" () =>",
							" w =>",
							" () =>",
							" () =>",
							" d =>",
							" () =>",
							" function startInteractive()",
							"function* (re, str)",
							" function indexOf(...args)",
							" (what, offset = 0) =>",
							" (what, offset = 0) =>",
							" function* searchAll(haystack, needle, offset = 0)",
							" function bindProperties(obj, target, props, gen)",
							"name =>",
							"(acc, name) =>",
							" p => v =>",
							"k =>",
							" (a, [k, v]) =>",
							" (...args) =>",
							"(...args) =>",
							" (a, k) =>",
							" function predicate(fn_or_regex, pred)",
							"fn = arg =>",
							".valueOf = function()",
							" arg =>",
							" function transformer(a, ...l)",
							" (acc, fn) =>",
							" function(...v)",
							" function getSystemErrorName(errno)",
							"() =>",
							"(acc, name, i) =>"
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				],
				[
					89,
					1,
					"outline_refresh",
					{
						"path": "/home/janos/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
						"symkeys":
						[
							[
								469,
								483
							],
							[
								563,
								586
							],
							[
								724,
								741
							],
							[
								782,
								799
							],
							[
								832,
								841
							],
							[
								875,
								885
							],
							[
								919,
								929
							],
							[
								964,
								975
							],
							[
								1009,
								1019
							],
							[
								1054,
								1065
							],
							[
								1102,
								1115
							],
							[
								1153,
								1167
							],
							[
								1203,
								1215
							],
							[
								1251,
								1263
							],
							[
								1316,
								1336
							],
							[
								1389,
								1402
							],
							[
								1462,
								1483
							],
							[
								1525,
								1541
							],
							[
								1595,
								1614
							],
							[
								1649,
								1665
							],
							[
								1789,
								1823
							],
							[
								1846,
								1878
							],
							[
								1901,
								1944
							],
							[
								3773,
								3792
							],
							[
								3890,
								3906
							],
							[
								3968,
								3986
							],
							[
								4050,
								4069
							],
							[
								4134,
								4143
							],
							[
								4198,
								4215
							],
							[
								4278,
								4295
							],
							[
								4358,
								4372
							],
							[
								4432,
								4447
							],
							[
								4508,
								4523
							],
							[
								4584,
								4592
							],
							[
								4646,
								4658
							],
							[
								4716,
								4726
							],
							[
								4782,
								4793
							],
							[
								4850,
								4858
							],
							[
								4912,
								4934
							],
							[
								5002,
								5017
							],
							[
								5078,
								5100
							],
							[
								5168,
								5184
							],
							[
								5246,
								5262
							],
							[
								5324,
								5336
							],
							[
								5394,
								5406
							],
							[
								5464,
								5477
							],
							[
								5536,
								5554
							],
							[
								5612,
								5630
							],
							[
								5694,
								5716
							],
							[
								5784,
								5811
							],
							[
								5884,
								5901
							],
							[
								5958,
								5975
							],
							[
								6032,
								6049
							],
							[
								6096,
								6112
							],
							[
								6195,
								6211
							],
							[
								6283,
								6299
							],
							[
								6371,
								6388
							],
							[
								6445,
								6465
							],
							[
								6524,
								6544
							],
							[
								6687,
								6706
							],
							[
								6782,
								6789
							],
							[
								6818,
								6838
							],
							[
								6917,
								6932
							],
							[
								6993,
								7019
							],
							[
								7090,
								7106
							],
							[
								7162,
								7175
							],
							[
								7243,
								7261
							],
							[
								7334,
								7347
							],
							[
								7403,
								7417
							],
							[
								7519,
								7545
							],
							[
								7591,
								7612
							],
							[
								7771,
								7796
							],
							[
								7881,
								7923
							],
							[
								8057,
								8097
							],
							[
								11017,
								11042
							],
							[
								11258,
								11306
							],
							[
								11623,
								11658
							],
							[
								11814,
								11832
							],
							[
								11862,
								11867
							],
							[
								11957,
								11984
							],
							[
								12103,
								12138
							],
							[
								12199,
								12203
							],
							[
								12219,
								12223
							],
							[
								12250,
								12259
							],
							[
								12422,
								12451
							],
							[
								12531,
								12561
							],
							[
								12568,
								12571
							],
							[
								12625,
								12657
							],
							[
								12899,
								12929
							],
							[
								12953,
								12969
							],
							[
								12970,
								12993
							],
							[
								13090,
								13125
							],
							[
								13149,
								13165
							],
							[
								13166,
								13189
							],
							[
								13286,
								13319
							],
							[
								13369,
								13392
							],
							[
								13486,
								13519
							],
							[
								13977,
								13983
							],
							[
								14000,
								14016
							],
							[
								14091,
								14103
							],
							[
								14138,
								14149
							],
							[
								14216,
								14237
							],
							[
								14273,
								14284
							],
							[
								14530,
								14536
							],
							[
								14549,
								14565
							],
							[
								14765,
								14770
							],
							[
								14784,
								14793
							],
							[
								14820,
								14843
							],
							[
								14877,
								14890
							],
							[
								14917,
								14922
							],
							[
								14963,
								14985
							],
							[
								15043,
								15049
							],
							[
								15065,
								15081
							],
							[
								15160,
								15187
							],
							[
								15232,
								15238
							],
							[
								15283,
								15295
							],
							[
								15325,
								15358
							],
							[
								15536,
								15554
							],
							[
								15637,
								15655
							],
							[
								15774,
								15792
							],
							[
								15967,
								16000
							],
							[
								16133,
								16146
							],
							[
								16266,
								16287
							],
							[
								16357,
								16375
							],
							[
								16818,
								16857
							],
							[
								16934,
								16951
							],
							[
								17074,
								17088
							],
							[
								17250,
								17267
							],
							[
								17408,
								17425
							],
							[
								17456,
								17473
							],
							[
								17573,
								17590
							],
							[
								17882,
								17896
							],
							[
								17942,
								17965
							],
							[
								18022,
								18029
							],
							[
								18047,
								18054
							],
							[
								18079,
								18104
							],
							[
								18164,
								18171
							],
							[
								18192,
								18199
							],
							[
								18229,
								18284
							],
							[
								18389,
								18396
							],
							[
								18534,
								18558
							],
							[
								18608,
								18612
							],
							[
								18643,
								18677
							],
							[
								18688,
								18701
							],
							[
								18760,
								18805
							],
							[
								18870,
								18881
							],
							[
								18901,
								18921
							],
							[
								18961,
								18990
							],
							[
								19014,
								19025
							],
							[
								19040,
								19052
							],
							[
								19099,
								19138
							],
							[
								19239,
								19243
							],
							[
								19276,
								19281
							],
							[
								19307,
								19313
							],
							[
								19342,
								19348
							],
							[
								19441,
								19454
							],
							[
								19482,
								19495
							],
							[
								19621,
								19632
							],
							[
								19712,
								19772
							],
							[
								19842,
								19859
							],
							[
								19920,
								19944
							],
							[
								20019,
								20046
							],
							[
								20267,
								20287
							],
							[
								20317,
								20328
							],
							[
								20427,
								20462
							],
							[
								20502,
								20520
							],
							[
								20698,
								20719
							],
							[
								20743,
								20753
							],
							[
								20789,
								20818
							],
							[
								20874,
								20884
							],
							[
								20935,
								20940
							],
							[
								20997,
								21010
							],
							[
								21083,
								21142
							],
							[
								21209,
								21234
							],
							[
								21614,
								21644
							],
							[
								22062,
								22102
							],
							[
								22196,
								22206
							],
							[
								22252,
								22308
							],
							[
								22469,
								22533
							],
							[
								22681,
								22732
							],
							[
								23399,
								23461
							],
							[
								23643,
								23668
							],
							[
								23765,
								23790
							],
							[
								23903,
								23972
							],
							[
								24061,
								24083
							],
							[
								24117,
								24128
							],
							[
								24151,
								24173
							],
							[
								24415,
								24487
							],
							[
								24590,
								24661
							],
							[
								24757,
								24808
							],
							[
								24980,
								25027
							],
							[
								25094,
								25137
							],
							[
								25267,
								25324
							],
							[
								25418,
								25424
							],
							[
								25438,
								25444
							],
							[
								25748,
								25782
							],
							[
								26083,
								26107
							],
							[
								26176,
								26181
							],
							[
								26210,
								26215
							],
							[
								26505,
								26518
							],
							[
								26574,
								26626
							],
							[
								26632,
								26649
							],
							[
								26677,
								26686
							],
							[
								26702,
								26712
							],
							[
								26724,
								26741
							],
							[
								26764,
								26773
							],
							[
								26774,
								26797
							],
							[
								26838,
								26862
							],
							[
								26987,
								27031
							],
							[
								27198,
								27232
							],
							[
								27298,
								27334
							],
							[
								27389,
								27406
							],
							[
								27728,
								27773
							],
							[
								27880,
								27893
							],
							[
								27984,
								27997
							],
							[
								28096,
								28109
							],
							[
								28183,
								28226
							],
							[
								28227,
								28246
							],
							[
								28261,
								28265
							],
							[
								28388,
								28408
							],
							[
								28461,
								28484
							],
							[
								28564,
								28584
							],
							[
								28666,
								28684
							],
							[
								28827,
								28845
							],
							[
								28918,
								28950
							],
							[
								28961,
								28987
							],
							[
								29096,
								29105
							],
							[
								29308,
								29340
							],
							[
								29369,
								29385
							],
							[
								29400,
								29407
							],
							[
								29426,
								29445
							],
							[
								29484,
								29505
							],
							[
								29545,
								29558
							],
							[
								29609,
								29630
							],
							[
								29799,
								29827
							],
							[
								30046,
								30063
							],
							[
								30064,
								30078
							],
							[
								30100,
								30107
							],
							[
								30158,
								30175
							],
							[
								30176,
								30185
							],
							[
								30245,
								30262
							],
							[
								30263,
								30286
							],
							[
								30342,
								30366
							],
							[
								33025,
								33053
							],
							[
								33484,
								33488
							],
							[
								33616,
								33629
							],
							[
								33945,
								33957
							],
							[
								34220,
								34233
							],
							[
								34338,
								34352
							],
							[
								35245,
								35273
							],
							[
								35389,
								35402
							],
							[
								35514,
								35538
							],
							[
								35631,
								35665
							],
							[
								35786,
								35825
							],
							[
								35872,
								35909
							],
							[
								35956,
								35983
							],
							[
								35994,
								36010
							],
							[
								36068,
								36090
							],
							[
								36123,
								36133
							],
							[
								36182,
								36194
							],
							[
								36476,
								36486
							],
							[
								36561,
								36573
							],
							[
								36851,
								36877
							],
							[
								37127,
								37175
							],
							[
								37223,
								37335
							],
							[
								37440,
								37463
							],
							[
								37602,
								37634
							],
							[
								37947,
								38001
							],
							[
								38359,
								38411
							],
							[
								38550,
								38576
							],
							[
								38860,
								38876
							],
							[
								39043,
								39054
							],
							[
								39255,
								39307
							],
							[
								39481,
								39563
							],
							[
								39723,
								39733
							],
							[
								39751,
								39764
							],
							[
								39941,
								39985
							],
							[
								40146,
								40205
							],
							[
								40481,
								40517
							],
							[
								40676,
								40692
							],
							[
								40706,
								40728
							],
							[
								40842,
								40848
							],
							[
								40954,
								40967
							],
							[
								42574,
								42612
							],
							[
								42712,
								42728
							],
							[
								42801,
								42845
							],
							[
								43160,
								43180
							],
							[
								43380,
								43422
							],
							[
								43617,
								43648
							],
							[
								43698,
								43740
							],
							[
								43860,
								43884
							],
							[
								44142,
								44152
							],
							[
								44205,
								44209
							],
							[
								44248,
								44279
							],
							[
								44290,
								44307
							],
							[
								44448,
								44482
							],
							[
								44720,
								44739
							],
							[
								44777,
								44799
							],
							[
								44911,
								44933
							],
							[
								45045,
								45080
							],
							[
								45128,
								45155
							],
							[
								45246,
								45284
							],
							[
								45493,
								45541
							],
							[
								46121,
								46150
							],
							[
								46597,
								46637
							],
							[
								46732,
								46759
							],
							[
								46816,
								46843
							],
							[
								47046,
								47060
							],
							[
								47109,
								47115
							],
							[
								47156,
								47222
							],
							[
								47224,
								47228
							],
							[
								47386,
								47393
							],
							[
								47485,
								47495
							],
							[
								47606,
								47615
							],
							[
								47721,
								47747
							],
							[
								47880,
								47911
							],
							[
								48086,
								48105
							],
							[
								48147,
								48155
							],
							[
								48203,
								48212
							],
							[
								48246,
								48255
							],
							[
								48289,
								48298
							],
							[
								48332,
								48341
							],
							[
								48375,
								48384
							],
							[
								48417,
								48426
							],
							[
								48460,
								48469
							],
							[
								48503,
								48512
							],
							[
								48537,
								48571
							],
							[
								48715,
								48760
							],
							[
								48826,
								48836
							],
							[
								48875,
								48885
							],
							[
								48905,
								48915
							],
							[
								48943,
								48968
							],
							[
								49099,
								49124
							],
							[
								49222,
								49257
							],
							[
								49310,
								49344
							],
							[
								49426,
								49462
							],
							[
								49591,
								49595
							],
							[
								49626,
								49630
							],
							[
								49673,
								49677
							],
							[
								49705,
								49709
							],
							[
								49738,
								49766
							],
							[
								49896,
								49900
							],
							[
								49957,
								49988
							],
							[
								50327,
								50363
							],
							[
								50612,
								50642
							],
							[
								50810,
								50814
							],
							[
								51098,
								51125
							],
							[
								51169,
								51178
							],
							[
								51230,
								51242
							],
							[
								51384,
								51396
							],
							[
								51523,
								51548
							],
							[
								51588,
								51614
							],
							[
								51866,
								51890
							],
							[
								52083,
								52106
							],
							[
								52230,
								52377
							],
							[
								52386,
								52467
							],
							[
								52508,
								52519
							],
							[
								52521,
								52533
							],
							[
								52758,
								52778
							],
							[
								52995,
								53010
							],
							[
								53291,
								53314
							],
							[
								53519,
								53537
							],
							[
								53750,
								53764
							],
							[
								53825,
								53837
							],
							[
								53935,
								53944
							],
							[
								54220,
								54236
							],
							[
								54671,
								54707
							],
							[
								54835,
								54844
							],
							[
								55020,
								55031
							],
							[
								55042,
								55050
							],
							[
								55099,
								55111
							],
							[
								55356,
								55368
							],
							[
								55549,
								55575
							],
							[
								55594,
								55598
							],
							[
								55685,
								55709
							],
							[
								55787,
								55816
							],
							[
								55870,
								55901
							],
							[
								55908,
								55911
							],
							[
								55955,
								55968
							],
							[
								56068,
								56139
							],
							[
								56165,
								56191
							],
							[
								56337,
								56372
							],
							[
								56562,
								56589
							],
							[
								56699,
								56732
							],
							[
								56889,
								56945
							],
							[
								56956,
								56972
							],
							[
								57113,
								57144
							],
							[
								57184,
								57235
							],
							[
								57605,
								57633
							],
							[
								57787,
								57851
							],
							[
								57911,
								57926
							],
							[
								57992,
								58006
							],
							[
								58044,
								58067
							],
							[
								58259,
								58277
							],
							[
								58468,
								58538
							],
							[
								58687,
								58711
							],
							[
								58730,
								58738
							],
							[
								58774,
								58789
							],
							[
								58915,
								58928
							],
							[
								59083,
								59099
							],
							[
								59294,
								59320
							],
							[
								59335,
								59357
							],
							[
								59619,
								59623
							],
							[
								59809,
								59831
							],
							[
								59853,
								59863
							],
							[
								59881,
								59894
							],
							[
								60018,
								60040
							],
							[
								60062,
								60072
							],
							[
								60090,
								60103
							],
							[
								60209,
								60231
							],
							[
								60257,
								60267
							],
							[
								60285,
								60298
							],
							[
								60334,
								60356
							],
							[
								60377,
								60387
							],
							[
								60405,
								60418
							],
							[
								60438,
								60479
							],
							[
								60768,
								60791
							],
							[
								60872,
								60894
							],
							[
								60968,
								60988
							],
							[
								61115,
								61126
							],
							[
								61159,
								61176
							],
							[
								61340,
								61359
							],
							[
								61394,
								61416
							],
							[
								61548,
								61569
							],
							[
								61707,
								61727
							],
							[
								61794,
								61817
							],
							[
								61893,
								61915
							],
							[
								62024,
								62048
							],
							[
								62105,
								62117
							],
							[
								62288,
								62306
							],
							[
								62363,
								62375
							],
							[
								62527,
								62550
							],
							[
								62682,
								62698
							],
							[
								62745,
								62758
							],
							[
								62795,
								62862
							],
							[
								62898,
								62920
							],
							[
								62949,
								62959
							],
							[
								62975,
								62988
							],
							[
								63039,
								63052
							],
							[
								63119,
								63142
							],
							[
								63261,
								63283
							],
							[
								63371,
								63384
							],
							[
								63437,
								63453
							],
							[
								63491,
								63495
							],
							[
								63605,
								63642
							],
							[
								63653,
								63663
							],
							[
								63672,
								63701
							],
							[
								63918,
								63934
							],
							[
								63956,
								63967
							],
							[
								64022,
								64049
							],
							[
								64096,
								64114
							],
							[
								64188,
								64223
							],
							[
								64349,
								64370
							],
							[
								64404,
								64413
							],
							[
								64422,
								64430
							],
							[
								64473,
								64482
							],
							[
								64503,
								64512
							],
							[
								64523,
								64531
							],
							[
								64598,
								64607
							],
							[
								64639,
								64667
							],
							[
								64736,
								64755
							],
							[
								64962,
								64988
							],
							[
								65276,
								65298
							],
							[
								65443,
								65465
							],
							[
								65977,
								66027
							],
							[
								66191,
								66240
							],
							[
								66309,
								66316
							],
							[
								66401,
								66415
							],
							[
								66496,
								66506
							],
							[
								66612,
								66616
							],
							[
								66647,
								66667
							],
							[
								66713,
								66726
							],
							[
								66776,
								66788
							],
							[
								66928,
								66943
							],
							[
								67354,
								67392
							],
							[
								67574,
								67585
							],
							[
								67620,
								67641
							],
							[
								67710,
								67717
							],
							[
								67755,
								67785
							],
							[
								67807,
								67823
							],
							[
								67824,
								67844
							],
							[
								67934,
								67969
							],
							[
								68058,
								68063
							],
							[
								68086,
								68103
							]
						],
						"symlist":
						[
							"sliceFn = x =>",
							"ArrayBuffer(start, end)",
							"SharedArrayBuffer",
							"Uint8ClampedArray",
							"Int8Array",
							"Uint8Array",
							"Int16Array",
							"Uint16Array",
							"Int32Array",
							"Uint32Array",
							"BigInt64Array",
							"BigUint64Array",
							"Float32Array",
							"Float64Array",
							"slice = (x, s, e) =>",
							"length = x =>",
							"objectToString = o =>",
							"stringify = v =>",
							"formatNumber = n =>",
							"isNative = fn =>",
							"AsyncFunction = async function x()",
							"GeneratorFunction = function* ()",
							"AsyncGeneratorFunction = async function* ()",
							"isAnyArrayBuffer(v)",
							"isArrayBuffer(v)",
							"isBigInt64Array(v)",
							"isBigUint64Array(v)",
							"isDate(v)",
							"isFloat32Array(v)",
							"isFloat64Array(v)",
							"isInt8Array(v)",
							"isInt16Array(v)",
							"isInt32Array(v)",
							"isMap(v)",
							"isPromise(v)",
							"isProxy(v)",
							"isRegExp(v)",
							"isSet(v)",
							"isSharedArrayBuffer(v)",
							"isUint8Array(v)",
							"isUint8ClampedArray(v)",
							"isUint16Array(v)",
							"isUint32Array(v)",
							"isWeakMap(v)",
							"isWeakSet(v)",
							"isDataView(v)",
							"isBooleanObject(v)",
							"isAsyncFunction(v)",
							"isGeneratorFunction(v)",
							"isAsyncGeneratorFunction(v)",
							"isNumberObject(v)",
							"isBigIntObject(v)",
							"isSymbolObject(v)",
							"isNativeError(v)",
							"isMapIterator(v)",
							"isSetIterator(v)",
							"isStringObject(v)",
							"isArrayBufferView(v)",
							"isArgumentsObject(v)",
							"isBoxedPrimitive(v)",
							"ctor =>",
							"isGeneratorObject(v)",
							"isTypedArray(v)",
							"isModuleNamespaceObject(v)",
							"isConstructor(v)",
							"isIterable(v)",
							"isAsyncIterable(v)",
							"isIterator(v)",
							"isArrayLike(v)",
							" function hasBuiltIn(o, m)",
							" function isAsync(fn)",
							" function format(...args)",
							" function formatWithOptions(opts, ...args)",
							"function formatWithOptionsInternal(o, v)",
							" function assert(...args)",
							" function assertEqual(actual, expected, message)",
							" function setInterval(callback, ms)",
							" function start()",
							"() =>",
							" function clearInterval(id)",
							" function inherits(ctor, superCtor)",
							"ctor",
							"ctor",
							"superCtor",
							" function getConstructor(obj)",
							" function memoize(fn, cache = ",
							"())",
							" function Memoize(n, ...rest)",
							" function chain(first, ...fns)",
							" (acc, fn) =>",
							" function(...args)",
							" function chainRight(first, ...fns)",
							" (acc, fn) =>",
							" function(...args)",
							" function chainArray(tmp, ...fns)",
							"tmp = function(...args)",
							" function getset(target, ...args)",
							"key =>",
							" (key, value) =>",
							" key =>",
							"([k, v]) =>",
							" (key, value) =>",
							"([k, v]) =>",
							"key =>",
							" (key, value) =>",
							"() =>",
							" value =>",
							" function methods(obj)",
							"bind(...args)",
							"fn =>",
							"transform(read, write)",
							"key =>",
							" (key, value) =>",
							" function modifier(...args)",
							" fn =>",
							" newValue =>",
							" function getter(target, ...args)",
							"ret = (...argv) =>",
							"ret = (...argv) =>",
							"ret = (...argv) =>",
							" function setter(target, ...args)",
							" (...argv) =>",
							"ret = (key, value) =>",
							"ret = (...argv) =>",
							" function gettersetter(target, ...args)",
							"fn = (...args) =>",
							" (...args2) =>",
							"fn = (...args) =>",
							"fn = (...args) =>",
							"fn = (...args) =>",
							"fn = (...args) =>",
							" (...args2) =>",
							" function hasFn(target)",
							" key =>",
							" key =>",
							" function remover(target)",
							" key =>",
							" key =>",
							" function getOrCreate(target, create = () => ({}), set)",
							" key =>",
							" function hasGetSet(obj)",
							"m =>",
							" function getSetArgument(get, set)",
							" (...args) =>",
							" function wrapGetSet(getter, setter, ...args)",
							" prop =>",
							" (prop, value) =>",
							" function weakGetSet(...args)",
							" wref =>",
							" value =>",
							" function addremovehas(target, ...args)",
							"n =>",
							"el =>",
							" el =>",
							" el =>",
							" el =>",
							" el =>",
							"has = el =>",
							" function lookupObject(getset, instance = {}, handlers = {})",
							"get(target, prop)",
							"set(target, prop, value)",
							" function mapObject(target)",
							"set: (key, value) =>",
							"get: key =>",
							" function once(fn, thisArg, memoFn)",
							" function(...args)",
							" function waitFor(ms)",
							"resolve =>",
							" function waitCancellable(ms)",
							"resolve =>",
							"() =>",
							"cancel: () =>",
							" function extend(dst, src, options = { enumerable: false })",
							"options = (desc, prop) =>",
							" function define(obj, ...args)",
							" function nonenumerable(props, obj = {})",
							" (k, v) =>",
							" function defineGetter(obj, key, fn, enumerable = false)",
							" function defineGetterSetter(obj, key, g, s, enumerable = false)",
							" function defineGettersSetters(obj, gettersSetters)",
							" function* prototypeIterator(obj, pred = (obj, depth) => true)",
							" function pick(obj, keys)",
							" function omit(obj, keys)",
							" function keys(obj, start = 0, end = obj => obj === Object.prototype)",
							"pred = (obj, depth) =>",
							"end = () =>",
							"pred = (obj, depth) =>",
							" function entries(obj, start = 0, end = obj => obj === Object.prototype)",
							" function values(obj, start = 0, end = obj => obj === Object.prototype)",
							" function getMethodNames(obj, depth = 1, start = 0)",
							" function getMethods(obj, depth = 1, start = 0)",
							" function bindMethods(obj, methods, target)",
							" function properties(obj, options = { enumerable: true })",
							" fn =>",
							" fn =>",
							" function weakDefine(obj, ...args)",
							" function merge(...args)",
							" a =>",
							" a =>",
							"(acc, arg) =>",
							" function weakAssoc(fn = (value, ...args) => Object.",
							"(value, ...args))",
							" () =>",
							" map =>",
							"(obj, ...args) =>",
							" () =>",
							" (obj, ...args) =>",
							"self = (obj, ...args) =>",
							" function getConstructorChain(obj, ...range)",
							" function hasPrototype(obj, proto)",
							" function filter(seq, pred, thisArg)",
							"pred = (el, i) =>",
							" function filterKeys(r, needles, keep = true)",
							"pred = key =>",
							"pred = key =>",
							"(obj, key) =>",
							"curry = (f, arr = [], length = f.length) =>",
							" function(...args)",
							"a =>",
							"(min, max, value) =>",
							"generate = (fn, add) =>",
							"add = (item, gen) =>",
							" function(...args)",
							" function(...args)",
							" function* split(buf, ...points)",
							"splitAt = (b, pos, len) =>",
							"(a, b) =>",
							" function uniquePred(cmp = null)",
							" (el, i, arr) =>",
							"item =>",
							"i : (el, i, arr) =>",
							"unique = (...args) =>",
							"(arr, cmp) =>",
							"function* unique(seq)",
							"getFunctionArguments = fn =>",
							" (offset = 0) =>",
							" (...args) =>",
							"code =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" (red, green, blue) =>",
							"function getAnsiStyles()",
							"value: (red, green, blue) =>",
							"c =>",
							"value: hex =>",
							"character =>",
							"value: hex =>",
							"value: code =>",
							"value: (red, green, blue) =>",
							"value: hex =>",
							" function stripAnsi(str)",
							" function padAnsi(str, n, s = ' ')",
							" function padStartAnsi(str, n, s = ' ')",
							" function padEndAnsi(str, n, s = ' ')",
							" function mapFunctional(fn)",
							" function* (arg)",
							" function map(...args)",
							"ret = a =>",
							"function* ()",
							"ret = a =>",
							"function* ()",
							" function randInt(...args)",
							" function randFloat(min, max, rng = Math.random)",
							" function randStr(n, set = '_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', rng = Math.random)",
							" function toBigInt(arg)",
							" function roundDigits(precision)",
							" function roundTo(value, prec, digits, type = 'round')",
							" function lazyProperty(obj, name, getter, opts = {})",
							"replaceProperty = value =>",
							"async function()",
							" function()",
							" function lazyProperties(obj, gettersObj, opts = {})",
							" function observeProperties(target = {}, obj, fn = (prop, value) => {}, opts = {})",
							"get: () =>",
							"set: value =>",
							" function decorate(decorators, obj, ...args)",
							" function decorateProperty(target, property, ...decorators)",
							" function getOpt(options = {}, args)",
							"findOpt = arg =>",
							"([optname, option]) =>",
							"opt =>",
							"(acc, arg) =>",
							" function showHelp(opts, exitCode = 0)",
							"(acc, [name]) =>",
							" (acc, [name, [hasArg, fn, shortOpt]]) =>",
							" function isoDate(d)",
							" function toUnixTime(dateObj, utc = false)",
							" function unixTime(utc = false)",
							" function fromUnixTime(epoch, utc = false)",
							" function range(...args)",
							" (v, k) =>",
							"n =>",
							" function chunkArray(arr, size)",
							"fn = (a, v, i) =>",
							" function decodeHTMLEntities(text)",
							" (match, entity) =>",
							" function ucfirst(str)",
							" function lcfirst(str)",
							" function camelize(str, delim = '')",
							" (match, p1, p2, offset) =>",
							" function decamelize(str, delim = '-')",
							" function shorten(str, max = 40, suffix = '...')",
							" function* bytesToUTF8(bytes)",
							" function codePointsToString(codePoints)",
							" function bufferToString(b)",
							" function arraysInCommon(a)",
							"(itm, indx) =>",
							"arr =>",
							" function arrayFacade(proto, itemFn = (container, i) => container.",
							"(i))",
							"*keys()",
							"*entries()",
							"*values()",
							"forEach(callback, thisArg)",
							"reduce(callback, accu, thisArg)",
							" function mod(a, b)",
							"b : n =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							" function pushUnique(arr, ...args)",
							" function inserter(dest, next = (k, v) => {})",
							" (k, v) =>",
							" (k, v) =>",
							" (k, v) =>",
							"fn = function(key, value)",
							" function intersect(a, b)",
							" function symmetricDifference(a, b)",
							" function* partitionArray(a, size)",
							" function difference(a, b, includes)",
							"x =>",
							"x =>",
							"x =>",
							"x =>",
							" function intersection(a, b)",
							"x =>",
							" function union(a, b, equality)",
							" function partition(array, callback)",
							" function push(obj, ...values)",
							"v =>",
							" function repeater(n, what)",
							"n = () =>",
							"function* ()",
							"function* ()",
							" function repeat(n, what)",
							" function functionName(fn)",
							" function className(obj)",
							"isArrowFunction = fn =>",
							" function instrument( fn, log = (duration, name, args, ret) => console.log(`function '${name}'` + (ret !== undefined ? ` {= ${escape(ret + '').",
							"(0, 100) + '...'}}` : '') + ` timing: ${duration}ms`), logInterval = 0 //1000 )",
							"now = () =>",
							"([s, ns]) =>",
							"async (args, ret) =>",
							" (args, ret) =>",
							"async function(...args)",
							" function(...args)",
							"newMap = () =>",
							"(...args) =>",
							"get(path)",
							"set(path, value)",
							"catchable = function Catchable(self)",
							"catchable",
							"function ()",
							"then(fn)",
							"(...args) =>",
							"(...args) =>",
							" function isNumeric(value)",
							"v =>",
							" function isIndex(value)",
							" function numericIndex(value)",
							" function histogram(arr, out = ",
							"())",
							"incr = key =>",
							" function propertyLookupHandlers(getter = key => null, setter, thisObj)",
							"get(target, key, receiver)",
							".set = function(target, key, value)",
							".ownKeys = function(target)",
							" function propertyLookup(...args)",
							" function padFn(len, char = ' ', fn = (str, pad) => pad)",
							" (s, n = len) =>",
							" function pad(s, n, char = ' ')",
							" function abbreviate(str, max = 40, suffix = '...')",
							" function trim(str, charset)",
							" function tryFunction(fn, resolve = a => a, reject = () => null)",
							"resolve = () =>",
							"reject = () =>",
							"async function(...args)",
							" function(...args)",
							" function tryCatch(fn, resolve = a => a, reject = () => null, ...args)",
							" function mapAdapter(fn)",
							"get(key)",
							"set(key, value)",
							".keys = () =>",
							".entries = () =>",
							" function mapFunction(map)",
							"fn = function(...args)",
							"m =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".update = function(key, fn = (k, v) => v)",
							".entries = function* ()",
							".values = function* ()",
							".keys = function* ()",
							" function()",
							"([key, value]) =>",
							".keys = async () =>",
							".entries = async () =>",
							".values = async () =>",
							".keys = function* ()",
							".entries = function* ()",
							".values = function* ()",
							".filter = function(pred)",
							"function* ()",
							".map = function(t)",
							"function* ()",
							".forEach = function(fn)",
							".delete = key =>",
							".has = key =>",
							" function mapWrapper(map, toKey = key => key, fromKey = key => key)",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".keys = () =>",
							".entries = function* ()",
							".values = function* ()",
							".has = key =>",
							".delete = key =>",
							"m =>",
							" function weakMapper(createFn, map = ",
							"(), hitFn)",
							"self = function(obj, ...args)",
							".set = (k, v) =>",
							".get = k =>",
							" function wrapGenerator(fn)",
							" function(...args)",
							" function wrapGeneratorMethods(obj)",
							" function isBrowser()",
							" () =>",
							" w =>",
							" () =>",
							" () =>",
							" d =>",
							" () =>",
							" function startInteractive()",
							"function* (re, str)",
							" function indexOf(...args)",
							" (what, offset = 0) =>",
							" (what, offset = 0) =>",
							" function* searchAll(haystack, needle, offset = 0)",
							" function bindProperties(obj, target, props, gen)",
							"name =>",
							"(acc, name) =>",
							" p => v =>",
							"k =>",
							" (a, [k, v]) =>",
							" (...args) =>",
							"(...args) =>",
							" (a, k) =>",
							" function predicate(fn_or_regex, pred)",
							"fn = arg =>",
							".valueOf = function()",
							" arg =>",
							" function transformer(a, ...l)",
							" (acc, fn) =>",
							" function(...v)",
							" function getSystemErrorName(errno)",
							"() =>",
							"(acc, name, i) =>"
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				],
				[
					90,
					1,
					"outline_refresh",
					{
						"path": "/home/janos/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1622,
								1630
							],
							[
								1646,
								1666
							],
							[
								2195,
								2228
							],
							[
								2318,
								2340
							],
							[
								2554,
								2595
							],
							[
								2606,
								2619
							],
							[
								2686,
								2721
							],
							[
								2766,
								2784
							],
							[
								2820,
								2862
							],
							[
								2928,
								2961
							],
							[
								2983,
								2987
							],
							[
								3376,
								3381
							],
							[
								3431,
								3435
							],
							[
								3462,
								3466
							],
							[
								3494,
								3498
							],
							[
								3521,
								3541
							],
							[
								3620,
								3624
							],
							[
								3694,
								3716
							],
							[
								3831,
								3836
							],
							[
								3869,
								3891
							],
							[
								4085,
								4107
							],
							[
								4530,
								4596
							],
							[
								4942,
								4951
							],
							[
								5056,
								5086
							],
							[
								5447,
								5482
							],
							[
								5514,
								5555
							],
							[
								5587,
								5653
							],
							[
								5686,
								5720
							],
							[
								5791,
								5838
							],
							[
								6374,
								6410
							],
							[
								6523,
								6532
							],
							[
								6768,
								6776
							],
							[
								6882,
								6889
							],
							[
								6939,
								6963
							],
							[
								7235,
								7246
							],
							[
								7336,
								7347
							],
							[
								7411,
								7422
							],
							[
								7476,
								7485
							],
							[
								7523,
								7534
							],
							[
								7622,
								7649
							],
							[
								7781,
								7785
							],
							[
								7809,
								7816
							],
							[
								7849,
								7865
							],
							[
								7994,
								8039
							],
							[
								8278,
								8336
							],
							[
								8623,
								8645
							],
							[
								9018,
								9028
							],
							[
								9272,
								9286
							],
							[
								10221,
								10245
							],
							[
								10371,
								10375
							],
							[
								10467,
								10481
							],
							[
								10571,
								10587
							],
							[
								11019,
								11032
							],
							[
								11050,
								11055
							],
							[
								11137,
								11144
							],
							[
								11172,
								11177
							],
							[
								11299,
								11324
							],
							[
								11499,
								11530
							],
							[
								11607,
								11618
							],
							[
								13198,
								13229
							],
							[
								13759,
								13792
							],
							[
								14064,
								14099
							],
							[
								14184,
								14217
							],
							[
								15162,
								15172
							],
							[
								15966,
								15970
							],
							[
								16386,
								16393
							],
							[
								16786,
								16822
							],
							[
								17058,
								17062
							],
							[
								17687,
								17719
							],
							[
								18100,
								18104
							],
							[
								18783,
								18818
							],
							[
								19580,
								19585
							],
							[
								20312,
								20316
							],
							[
								20410,
								20414
							],
							[
								20534,
								20543
							],
							[
								20673,
								20680
							],
							[
								20961,
								20968
							],
							[
								21049,
								21056
							],
							[
								21120,
								21136
							],
							[
								21201,
								21221
							],
							[
								21920,
								21932
							],
							[
								22031,
								22043
							],
							[
								22245,
								22261
							],
							[
								22355,
								22368
							],
							[
								22779,
								22797
							],
							[
								22979,
								22996
							],
							[
								23422,
								23441
							],
							[
								23874,
								23894
							],
							[
								25455,
								25477
							],
							[
								25950,
								25971
							],
							[
								26522,
								26541
							],
							[
								26975,
								26983
							],
							[
								29705,
								29717
							],
							[
								31626,
								31661
							],
							[
								32159,
								32178
							],
							[
								32364,
								32381
							],
							[
								32426,
								32439
							],
							[
								32475,
								32485
							],
							[
								33388,
								33404
							],
							[
								33536,
								33555
							],
							[
								33566,
								33585
							],
							[
								33611,
								33631
							]
						],
						"symlist":
						[
							"value =>",
							" (level, message) =>",
							"async function AsyncCollect(iter)",
							"function GetMime(file)",
							"function Matcher(pattern, t = arg => arg)",
							" (...args) =>",
							"function KeyOrValueMatcher(pattern)",
							" ([key, value]) =>",
							"function GetRootDirectories(pattern = '*')",
							"MakeUUID = (rng = Math.random) =>",
							"n =>",
							"dd =>",
							"d =>",
							"d =>",
							"d =>",
							"function GetDir(dir)",
							"n =>",
							"function DirName(name)",
							"it =>",
							"function DateStr(date)",
							"function ModeStr(mode)",
							"HTMLPage = ({ title, style, scripts = [], children, ...props }) =>",
							"script =>",
							"FilterForm = ({ ...props }) =>",
							"HTMLTable = ({ rows, ...props }) =>",
							"HTMLTableRow = ({ columns, ...props }) =>",
							"HTMLTableColumn = ({ columns, children, tag = 'td', ...props }) =>",
							"FileLink = ({ file, ...props }) =>",
							"FileObject = ({ file, stat = {}, ...props }) =>",
							"FileTable = ({ files, ...props }) =>",
							"(a, b) =>",
							"field =>",
							"file =>",
							"function ReadExiv2(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function ReadExiftool(file)",
							"l =>",
							"line =>",
							"([line, idx]) =>",
							"function HeifConvert(src, dst, quality = 100)",
							"function MagickResize(src, dst, rotate = 0, width, height)",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							" function ParseBody(gen)",
							".createWS = (url, callbacks) =>",
							".out = s =>",
							"async function* test(req, resp)",
							" function proxy(req, resp)",
							" function* config(req, resp)",
							" function* file(req, resp)",
							"([dir]) =>",
							"f =>",
							"file =>",
							" function* uploads(req, resp)",
							"s =>",
							"async function* files(req, resp)",
							"n =>",
							" function* files2(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file, rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"({ name }) =>",
							"onConnect(ws, req)",
							"sendCommand(data)",
							"onClose(ws, reason)",
							"onRequest(req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name, file)",
							"f = x =>",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "upload-server.js",
			"settings":
			{
				"buffer_size": 33962,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					8,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAANlBAAAAAAAA2kEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADZQQAAAAAAANlBAAAAAAAAAAAAAAAAAAA"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAALlBAAAAAAAAukEAAAAAAAAAAAAAukEAAAAAAADEQQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC5QQAAAAAAALlBAAAAAAAAAAAAAAAA8L8"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AgAAALlBAAAAAAAAukEAAAAAAAAAAAAAukEAAAAAAAC7QQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC5QQAAAAAAALlBAAAAAAAAAAAAAAAAVEA"
				],
				[
					17,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAALtBAAAAAAAAvUEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC7QQAAAAAAALtBAAAAAAAAAAAAAAAA8L8"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "resp"
					},
					"BAAAALxBAAAAAAAAvUEAAAAAAAAAAAAAvUEAAAAAAAC+QQAAAAAAAAAAAAC+QQAAAAAAAL9BAAAAAAAAAAAAAL9BAAAAAAAAwEEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC8QQAAAAAAALxBAAAAAAAAAAAAAAAA8L8"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": " &&"
					},
					"AwAAAMBBAAAAAAAAwUEAAAAAAAAAAAAAwUEAAAAAAADCQQAAAAAAAAAAAADCQQAAAAAAAMNBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADAQQAAAAAAAMBBAAAAAAAAAAAAAAAA8L8"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": " resp?.type"
					},
					"CwAAAMNBAAAAAAAAxEEAAAAAAAAAAAAAxEEAAAAAAADFQQAAAAAAAAAAAADFQQAAAAAAAMZBAAAAAAAAAAAAAMZBAAAAAAAAx0EAAAAAAAAAAAAAx0EAAAAAAADIQQAAAAAAAAAAAADIQQAAAAAAAMlBAAAAAAAAAAAAAMlBAAAAAAAAykEAAAAAAAAAAAAAykEAAAAAAADLQQAAAAAAAAAAAADLQQAAAAAAAMxBAAAAAAAAAAAAAMxBAAAAAAAAzUEAAAAAAAAAAAAAzUEAAAAAAADOQQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADDQQAAAAAAAMNBAAAAAAAAAAAAAAAA8L8"
				],
				[
					32,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD6QQAAAAAAAPpBAAAAAAAAAAAAAAAA8L8"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAANBZAAAAAAAA0VkAAAAAAAAAAAAA0VkAAAAAAADRWQAAAAAAACYAAAAgICAgICAgIGNvbnNvbGUubG9nKCdvbkNvbm5lY3RceDFiJyk7Cg",
					"AQAAAAAAAAABAAAA0FkAAAAAAAD2WQAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": ",.ws"
					},
					"BAAAAFZaAAAAAAAAV1oAAAAAAAAAAAAAV1oAAAAAAABYWgAAAAAAAAAAAABYWgAAAAAAAFlaAAAAAAAAAAAAAFlaAAAAAAAAWloAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVloAAAAAAABWWgAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					3,
					"left_delete",
					null,
					"AwAAAFlaAAAAAAAAWVoAAAAAAAABAAAAc1haAAAAAAAAWFoAAAAAAAABAAAAd1daAAAAAAAAV1oAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAAWloAAAAAAABaWgAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": ",ws"
					},
					"AwAAAFdaAAAAAAAAWFoAAAAAAAAAAAAAWFoAAAAAAABZWgAAAAAAAAAAAABZWgAAAAAAAFpaAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAV1oAAAAAAABXWgAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					3,
					"left_delete",
					null,
					"AwAAAFlaAAAAAAAAWVoAAAAAAAABAAAAc1haAAAAAAAAWFoAAAAAAAABAAAAd1daAAAAAAAAV1oAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAWloAAAAAAABaWgAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": "ws"
					},
					"AgAAAFdaAAAAAAAAWFoAAAAAAAAAAAAAWFoAAAAAAABZWgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAV1oAAAAAAABXWgAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": ",tls"
					},
					"BAAAAP5ZAAAAAAAA/1kAAAAAAAAAAAAA/1kAAAAAAAAAWgAAAAAAAAAAAAAAWgAAAAAAAAFaAAAAAAAAAAAAAAFaAAAAAAAAAloAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/lkAAAAAAAD+WQAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					2,
					"left_delete",
					null,
					"AgAAAFxaAAAAAAAAXFoAAAAAAAABAAAAc1taAAAAAAAAW1oAAAAAAAABAAAAdw",
					"AQAAAAAAAAABAAAAXVoAAAAAAABdWgAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": " tls"
					},
					"BAAAAFtaAAAAAAAAXFoAAAAAAAAAAAAAXFoAAAAAAABdWgAAAAAAAAAAAABdWgAAAAAAAF5aAAAAAAAAAAAAAF5aAAAAAAAAX1oAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAW1oAAAAAAABbWgAAAAAAAAAAAAAAAPC/"
				],
				[
					91,
					1,
					"insert",
					{
						"characters": "{data,"
					},
					"BgAAAKZ+AAAAAAAAp34AAAAAAAAAAAAAp34AAAAAAACofgAAAAAAAAAAAACofgAAAAAAAKl+AAAAAAAAAAAAAKl+AAAAAAAAqn4AAAAAAAAAAAAAqn4AAAAAAACrfgAAAAAAAAAAAACrfgAAAAAAAKx+AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApn4AAAAAAACmfgAAAAAAAAAAAAAAAPC/"
				],
				[
					93,
					5,
					"right_delete",
					null,
					"BQAAAK9+AAAAAAAAr34AAAAAAAABAAAAIK9+AAAAAAAAr34AAAAAAAABAAAAZK9+AAAAAAAAr34AAAAAAAABAAAAYa9+AAAAAAAAr34AAAAAAAABAAAAdK9+AAAAAAAAr34AAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAAr34AAAAAAACvfgAAAAAAAAAAAAAAAPC/"
				],
				[
					94,
					1,
					"insert",
					{
						"characters": "}"
					},
					"AQAAAK9+AAAAAAAAsH4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAr34AAAAAAACvfgAAAAAAAAAAAAAAAPC/"
				],
				[
					98,
					1,
					"left_delete",
					null,
					"AQAAAK5+AAAAAAAArn4AAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAr34AAAAAAACvfgAAAAAAAAAAAAAAAPC/"
				],
				[
					140,
					1,
					"insert",
					{
						"characters": "define"
					},
					"BgAAAGRaAAAAAAAAZVoAAAAAAAAAAAAAZVoAAAAAAABmWgAAAAAAAAAAAABmWgAAAAAAAGdaAAAAAAAAAAAAAGdaAAAAAAAAaFoAAAAAAAAAAAAAaFoAAAAAAABpWgAAAAAAAAAAAABpWgAAAAAAAGpaAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZFoAAAAAAABkWgAAAAAAAAAAAAAAAPC/"
				],
				[
					141,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAGpaAAAAAAAAbFoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaloAAAAAAABqWgAAAAAAAAAAAAAAAPC/"
				],
				[
					142,
					1,
					"insert",
					{
						"characters": "ws,"
					},
					"AwAAAGtaAAAAAAAAbFoAAAAAAAAAAAAAbFoAAAAAAABtWgAAAAAAAAAAAABtWgAAAAAAAG5aAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAa1oAAAAAAABrWgAAAAAAAAAAAAAAAPC/"
				],
				[
					143,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAG5aAAAAAAAAb1oAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbloAAAAAAABuWgAAAAAAAAAAAAAAAPC/"
				],
				[
					144,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAG9aAAAAAAAAcVoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAb1oAAAAAAABvWgAAAAAAAAAAAAAAAPC/"
				],
				[
					145,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHBaAAAAAAAAcVoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcFoAAAAAAABwWgAAAAAAAAAAAAAAAPC/"
				],
				[
					146,
					3,
					"right_delete",
					null,
					"AwAAAHFaAAAAAAAAcVoAAAAAAAABAAAAfXFaAAAAAAAAcVoAAAAAAAABAAAAKXFaAAAAAAAAcVoAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAcVoAAAAAAABxWgAAAAAAAAAAAAAAAPC/"
				],
				[
					147,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHFaAAAAAAAAcloAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcVoAAAAAAABxWgAAAAAAAAAAAAAAAPC/"
				],
				[
					148,
					11,
					"right_delete",
					null,
					"CwAAAHJaAAAAAAAAcloAAAAAAAABAAAAIHJaAAAAAAAAcloAAAAAAAABAAAAIHJaAAAAAAAAcloAAAAAAAABAAAAIHJaAAAAAAAAcloAAAAAAAABAAAAIHJaAAAAAAAAcloAAAAAAAABAAAAIHJaAAAAAAAAcloAAAAAAAABAAAAIHJaAAAAAAAAcloAAAAAAAABAAAAIHJaAAAAAAAAcloAAAAAAAABAAAAIHJaAAAAAAAAcloAAAAAAAABAAAAd3JaAAAAAAAAcloAAAAAAAABAAAAc3JaAAAAAAAAcloAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAAcloAAAAAAAByWgAAAAAAAAAAAAAAAPC/"
				],
				[
					150,
					10,
					"right_delete",
					null,
					"CgAAAH5aAAAAAAAAfloAAAAAAAABAAAAPX5aAAAAAAAAfloAAAAAAAABAAAAIH5aAAAAAAAAfloAAAAAAAABAAAAZn5aAAAAAAAAfloAAAAAAAABAAAAdX5aAAAAAAAAfloAAAAAAAABAAAAbn5aAAAAAAAAfloAAAAAAAABAAAAY35aAAAAAAAAfloAAAAAAAABAAAAdH5aAAAAAAAAfloAAAAAAAABAAAAaX5aAAAAAAAAfloAAAAAAAABAAAAb35aAAAAAAAAfloAAAAAAAABAAAAbg",
					"AQAAAAAAAAABAAAAfloAAAAAAAB+WgAAAAAAAAAAAAAAAPC/"
				],
				[
					153,
					1,
					"left_delete",
					null,
					"AQAAAAlbAAAAAAAACVsAAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAAClsAAAAAAAAKWwAAAAAAAAAAAAAAwGZA"
				],
				[
					154,
					1,
					"insert",
					{
						"characters": "});"
					},
					"AwAAAAlbAAAAAAAAClsAAAAAAAAAAAAAClsAAAAAAAALWwAAAAAAAAAAAAALWwAAAAAAAAxbAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACVsAAAAAAAAJWwAAAAAAAAAAAAAAAPC/"
				],
				[
					155,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAAxbAAAAAAAADVsAAAAAAAAAAAAADVsAAAAAAAAVWwAAAAAAAAAAAAANWwAAAAAAAA1bAAAAAAAACAAAACAgICAgICAgDVsAAAAAAAANWwAAAAAAAAAAAAANWwAAAAAAAA5bAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADFsAAAAAAAAMWwAAAAAAAAAAAAAAAPC/"
				],
				[
					161,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAABzhQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "quickjs/qjs-modules/lib/util.js",
			"settings":
			{
				"buffer_size": 68538,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					69,
					1,
					"insert",
					{
						"characters": "{"
					},
					"AQAAAJNVAAAAAAAAlFUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAk1UAAAAAAACTVQAAAAAAAAAAAAAAAPC/"
				],
				[
					70,
					1,
					"insert",
					{
						"characters": " ..."
					},
					"BAAAAJRVAAAAAAAAlVUAAAAAAAAAAAAAlVUAAAAAAACWVQAAAAAAAAAAAACWVQAAAAAAAJdVAAAAAAAAAAAAAJdVAAAAAAAAmFUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlFUAAAAAAACUVQAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAJlVAAAAAAAAmlUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmVUAAAAAAACZVQAAAAAAAAAAAAAAAPC/"
				],
				[
					74,
					1,
					"insert",
					{
						"characters": " enumerable:"
					},
					"DAAAAJpVAAAAAAAAm1UAAAAAAAAAAAAAm1UAAAAAAACcVQAAAAAAAAAAAACcVQAAAAAAAJ1VAAAAAAAAAAAAAJ1VAAAAAAAAnlUAAAAAAAAAAAAAnlUAAAAAAACfVQAAAAAAAAAAAACfVQAAAAAAAKBVAAAAAAAAAAAAAKBVAAAAAAAAoVUAAAAAAAAAAAAAoVUAAAAAAACiVQAAAAAAAAAAAACiVQAAAAAAAKNVAAAAAAAAAAAAAKNVAAAAAAAApFUAAAAAAAAAAAAApFUAAAAAAAClVQAAAAAAAAAAAAClVQAAAAAAAKZVAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmlUAAAAAAACaVQAAAAAAAAAAAAAAAPC/"
				],
				[
					75,
					1,
					"insert",
					{
						"characters": " false"
					},
					"BgAAAKZVAAAAAAAAp1UAAAAAAAAAAAAAp1UAAAAAAACoVQAAAAAAAAAAAACoVQAAAAAAAKlVAAAAAAAAAAAAAKlVAAAAAAAAqlUAAAAAAAAAAAAAqlUAAAAAAACrVQAAAAAAAAAAAACrVQAAAAAAAKxVAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAplUAAAAAAACmVQAAAAAAAAAAAAAAAPC/"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": " }"
					},
					"AgAAAKxVAAAAAAAArVUAAAAAAAAAAAAArVUAAAAAAACuVQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArFUAAAAAAACsVQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "quickjs/qjs-net/src/minnet-websocket.c",
			"settings":
			{
				"buffer_size": 18999,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					17,
					1,
					"cut",
					null,
					"AQAAADgyAAAAAAAAODIAAAAAAABCAAAAICAgIEpTX0NHRVRTRVRfTUFHSUNfREVGKCJzc2wiLCBtaW5uZXRfd3NfZ2V0LCAwLCBXRUJTT0NLRVRfU1NMKSwK",
					"AQAAAAAAAAABAAAAODIAAAAAAAB6MgAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					2,
					"paste",
					null,
					"AgAAADgyAAAAAAAAejIAAAAAAAAAAAAAejIAAAAAAAC8MgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAODIAAAAAAAA4MgAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": "tls"
					},
					"BAAAAJQyAAAAAAAAlTIAAAAAAAAAAAAAlTIAAAAAAACVMgAAAAAAAAMAAABzc2yVMgAAAAAAAJYyAAAAAAAAAAAAAJYyAAAAAAAAlzIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlDIAAAAAAACXMgAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAAJgyAAAAAAAAmTIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmDIAAAAAAACYMgAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"left_delete",
					null,
					"AQAAAJgyAAAAAAAAmDIAAAAAAAABAAAAMQ",
					"AQAAAAAAAAABAAAAmTIAAAAAAACZMgAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"cut",
					null,
					"AQAAAMAyAAAAAAAAwDIAAAAAAAAgAAAASlNfQUxJQVNfREVGKCJ0bHMiLCAic3NsIiksCiAgICA",
					"AQAAAAAAAAABAAAAwDIAAAAAAADgMgAAAAAAAAAAAAAAADxA"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAADgyAAAAAAAAOTIAAAAAAAAAAAAAOTIAAAAAAAA5MgAAAAAAAEIAAAAgICAgSlNfQ0dFVFNFVF9NQUdJQ19ERUYoInNzbCIsIG1pbm5ldF93c19nZXQsIDAsIFdFQlNPQ0tFVF9TU0wpLAo",
					"AQAAAAAAAAABAAAAODIAAAAAAAB6MgAAAAAAAAAAAAAAAPC/"
				],
				[
					67,
					1,
					"",
					null,
					"AwAAAGsyAAAAAAAAeDIAAAAAAAANAAAAV0VCU09DS0VUX1NTTKYiAAAAAAAAsyIAAAAAAAANAAAAV0VCU09DS0VUX1NTTDkCAAAAAAAARgIAAAAAAAANAAAAV0VCU09DS0VUX1NTTA",
					"AQAAAAAAAAABAAAAazIAAAAAAAB4MgAAAAAAAAAAAAAAAPC/"
				],
				[
					86,
					1,
					"left_delete",
					null,
					"AQAAAH0yAAAAAAAAfTIAAAAAAAACAAAAICA",
					"AQAAAAAAAAABAAAAfzIAAAAAAAB/MgAAAAAAAAAAAAAAADxA"
				],
				[
					88,
					2,
					"right_delete",
					null,
					"AgAAADoyAAAAAAAAOjIAAAAAAAACAAAAICA6MgAAAAAAADoyAAAAAAAAAQAAACA",
					"AQAAAAAAAAABAAAAOjIAAAAAAAA6MgAAAAAAAAAAAAAAACxA"
				],
				[
					91,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAOjIAAAAAAAA6MgAAAAAAAAAAAAAAAPC/"
				],
				[
					92,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAOjIAAAAAAAA6MgAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"prett",
				"Pretty Shell: Minify"
			],
			[
				"OUTLIN",
				"Browse Mode: Outline (Right)"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/janos/Projects/plot-cv"
	],
	"file_history":
	[
		"/home/janos/Projects/plot-cv/quickjs/qjs-net/wscli.js",
		"/home/janos/Projects/plot-cv/quickjs/qjs-modules/src/utils.c",
		"/home/janos/Projects/plot-cv/quickjs/qjs-modules/quickjs-internal.h",
		"/home/janos/Projects/plot-cv/quickjs/qjs-net/src/minnet-client.c",
		"/home/janos/Projects/plot-cv/quickjs/qjs-net/libwebsockets/lib/core-net/close.c",
		"/home/janos/Projects/plot-cv/quickjs/qjs-net/lib/callback.c",
		"/home/janos/Projects/plot-cv/quickjs/qjs-modules/src/qjsm.c",
		"/home/janos/Projects/plot-cv/test-sourcemap.js",
		"/home/janos/Projects/plot-cv/ws-worker.js",
		"/home/janos/Projects/plot-cv/tokmap.c",
		"/home/janos/Projects/plot-cv/count-neighbours.js",
		"/home/janos/Projects/plot-cv/findsig.c",
		"/home/janos/Projects/plot-cv/getModuleProps.js",
		"/home/janos/Projects/plot-cv/midi-tcp.js",
		"/home/janos/Projects/plot-cv/portal.js",
		"/home/janos/Projects/plot-cv/resolve-imports.js",
		"/home/janos/Projects/plot-cv/palette.css",
		"/home/janos/Projects/plot-cv/get-res.c",
		"/home/janos/Projects/plot-cv/get-msys-packages.js",
		"/home/janos/Projects/plot-cv/gerber2gcode.js",
		"/home/janos/Projects/plot-cv/ftrace.js",
		"/home/janos/Projects/plot-cv/filelist.js",
		"/home/janos/Projects/plot-cv/coil.js",
		"/home/janos/Projects/plot-cv/eagle-server.js",
		"/home/janos/Projects/plot-cv/eagle-query.js",
		"/home/janos/Projects/plot-cv/dump-structs.js",
		"/home/janos/Projects/plot-cv/doc-scanner.js",
		"/home/janos/Projects/plot-cv/config.js",
		"/home/janos/Projects/plot-cv/deconflict.js",
		"/home/janos/Projects/plot-cv/debuggerprotocol.js",
		"/home/janos/Projects/plot-cv/debugger.js",
		"/home/janos/Projects/plot-cv/convert-imports.js",
		"/home/janos/Projects/plot-cv/esparse.js",
		"/home/janos/Projects/plot-cv/extract-structs.js",
		"/home/janos/Projects/plot-cv/fetch-post-prices.js",
		"/home/janos/Projects/plot-cv/ffi.js",
		"/home/janos/Projects/plot-cv/fontsample.js",
		"/home/janos/Projects/plot-cv/grammar-arith.js",
		"/home/janos/Projects/plot-cv/grammar-C.js",
		"/home/janos/Projects/plot-cv/grammar-c.js",
		"/home/janos/Projects/plot-cv/grammar-css3.js",
		"/home/janos/Projects/plot-cv/grammar-geda-netlist.js",
		"/home/janos/Projects/plot-cv/grammar-INI.js",
		"/home/janos/Projects/plot-cv/httpd.js",
		"/home/janos/Projects/plot-cv/ini-grammar.js",
		"/home/janos/Projects/plot-cv/io-helpers.js",
		"/home/janos/Projects/plot-cv/list-directory.js",
		"/home/janos/Projects/plot-cv/list-exports.js",
		"/home/janos/Projects/plot-cv/list-exports2.js",
		"/home/janos/Projects/plot-cv/load-ast.js",
		"/home/janos/Projects/plot-cv/meriyah.js",
		"/home/janos/Projects/plot-cv/workertest.js",
		"/home/janos/Projects/plot-cv/worker.js",
		"/home/janos/Projects/plot-cv/userscript-test.js",
		"/home/janos/Projects/plot-cv/upload.html",
		"/home/janos/Projects/plot-cv/upload-server.js",
		"/home/janos/Projects/plot-cv/untar.c",
		"/home/janos/Projects/plot-cv/tmpx.js",
		"/home/janos/Projects/plot-cv/test-xml.js",
		"/home/janos/Projects/plot-cv/test-wru.js",
		"/home/janos/Projects/plot-cv/test-websocket.js",
		"/home/janos/Projects/plot-cv/test-voronoi.js",
		"/home/janos/Projects/plot-cv/test-video.js",
		"/home/janos/Projects/plot-cv/test-util.js",
		"/home/janos/Projects/plot-cv/test-utf8.js",
		"/home/janos/Projects/plot-cv/test-umat.js",
		"/home/janos/Projects/plot-cv/test-trkl.js",
		"/home/janos/Projects/plot-cv/test-sqlite3.js",
		"/home/janos/Projects/plot-cv/test-spawn.js",
		"/home/janos/Projects/plot-cv/test-sockets.js",
		"/home/janos/Projects/plot-cv/test-shparse.js",
		"/home/janos/Projects/plot-cv/test-rpc.js",
		"/home/janos/Projects/plot-cv/test-repl.js",
		"/home/janos/Projects/plot-cv/test-renderer.js",
		"/home/janos/Projects/plot-cv/test-readline.js",
		"/home/janos/Projects/plot-cv/test-readdir.js",
		"/home/janos/Projects/plot-cv/test-quickjs.js",
		"/home/janos/Projects/plot-cv/test-proxy.js",
		"/home/janos/Projects/plot-cv/test-pointlist.js",
		"/home/janos/Projects/plot-cv/test-pointer.js",
		"/home/janos/Projects/plot-cv/test-path.js",
		"/home/janos/Projects/plot-cv/test-parsexml.js",
		"/home/janos/Projects/plot-cv/test-parse.js",
		"/home/janos/Projects/plot-cv/test-opencv.js",
		"/home/janos/Projects/plot-cv/test-octagon.js",
		"/home/janos/Projects/plot-cv/test-ngql.js",
		"/home/janos/Projects/plot-cv/test-net.js",
		"/home/janos/Projects/plot-cv/test-mmap.js",
		"/home/janos/Projects/plot-cv/test-minnet.js",
		"/home/janos/Projects/plot-cv/test-meriyah.js",
		"/home/janos/Projects/plot-cv/ol-marker.js",
		"/home/janos/Projects/plot-cv/ol-map.js",
		"/home/janos/Projects/plot-cv/make-bitmap.js",
		"/home/janos/Projects/plot-cv/list-proxies.js",
		"/home/janos/Projects/plot-cv/eagle2gerber.js",
		"/home/janos/Projects/plot-cv/test-exception.js",
		"/home/janos/Projects/plot-cv/test-childprocess.js",
		"/home/janos/Projects/plot-cv/test-bjson.js",
		"/home/janos/Projects/plot-cv/test-ansitrunc.c",
		"/home/janos/Projects/plot-cv/svg-scale.js",
		"/home/janos/Projects/plot-cv/server.js",
		"/home/janos/Projects/plot-cv/search-engine.js",
		"/home/janos/Projects/plot-cv/resolve-imports2.js",
		"/home/janos/Projects/plot-cv/readfile.js",
		"/home/janos/Projects/plot-cv/read-deps.js",
		"/home/janos/Projects/plot-cv/react-simple-code-editor.js",
		"/home/janos/Projects/plot-cv/pcb-conversion.js",
		"/home/janos/Projects/plot-cv/knopf-schwarz-o12mm-cliff-cl178862.html",
		"/home/janos/Projects/plot-cv/dom-helpers.js",
		"/home/janos/Projects/pictest/traced_back.svg",
		"/home/janos/Projects/plot-cv/param.js",
		"/home/janos/Projects/plot-cv/qjs-opencv/output.js",
		"/home/janos/Projects/plot-cv/qjs-opencv/tests/test_freetype.js",
		"/home/janos/Projects/plot-cv/lib/stream/utils.js",
		"/home/janos/Projects/plot-cv/svg-crop-pad.js",
		"/home/janos/Projects/plot-cv/qjs-opencv/tests/test_png.js"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 98.0,
		"where_history":
		[
			"/home/janos/Projects/plot-cv/quickjs/qjs-net,*.c,*.h,-*/libwebsockets/*",
			"/home/janos/Projects/plot-cv/quickjs/qjs-net/src"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"lib",
			"define\\(",
			"define\\b",
			"sendCommand",
			"define",
			"'onMessage'",
			"WEBSOCKET_SSL\\b",
			"WEBSOCKET_SSL",
			"tls",
			"         ",
			"onConnect",
			"await ",
			"client_finalize",
			"onClose",
			"exception",
			"current_exce",
			"}\\n\n",
			"}\\n\n([^\\n])",
			"}\\n([^\\n])",
			"}\\n\n([^\\n])",
			"remove",
			"ZipFolder",
			"<<<<",
			"ExecTool",
			"outdir",
			"'str'",
			"optionsArray",
			"Bottom",
			"compact",
			"boxes",
			"join",
			"\nfunction outputBytes(mat) {\n  return '['+[...rowIterator(mat)].map(a => '[ '+[...a].map(n => '0x'+n.toString(16).padStart(2, \n'0')).join(',')+' ],').join('\\n')+']';\n}",
			"cv\\.",
			"writeROI",
			"cvtColor",
			"g",
			"=> ",
			"));",
			"mod\\(",
			"toMap",
			"Util\\."
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"WEBSOCKET_TLS",
			"}\\n\\n",
			"}\\n\\n\\1",
			"",
			"\n      t = 'l';"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1866,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": "/home/janos/Projects/plot-cv/upload-server.js",
							"function_name_status_row": 23,
							"outline_rename_mode": false,
							"show_line_column": "disabled",
							"symkeys":
							[
								[
									1622,
									1630
								],
								[
									1646,
									1666
								],
								[
									2195,
									2228
								],
								[
									2318,
									2340
								],
								[
									2554,
									2595
								],
								[
									2606,
									2619
								],
								[
									2686,
									2721
								],
								[
									2766,
									2784
								],
								[
									2820,
									2862
								],
								[
									2928,
									2961
								],
								[
									2983,
									2987
								],
								[
									3376,
									3381
								],
								[
									3431,
									3435
								],
								[
									3462,
									3466
								],
								[
									3494,
									3498
								],
								[
									3521,
									3541
								],
								[
									3620,
									3624
								],
								[
									3694,
									3716
								],
								[
									3831,
									3836
								],
								[
									3869,
									3891
								],
								[
									4085,
									4107
								],
								[
									4530,
									4596
								],
								[
									4942,
									4951
								],
								[
									5056,
									5086
								],
								[
									5447,
									5482
								],
								[
									5514,
									5555
								],
								[
									5587,
									5653
								],
								[
									5686,
									5720
								],
								[
									5791,
									5838
								],
								[
									6374,
									6410
								],
								[
									6523,
									6532
								],
								[
									6768,
									6776
								],
								[
									6882,
									6889
								],
								[
									6939,
									6963
								],
								[
									7235,
									7246
								],
								[
									7336,
									7347
								],
								[
									7411,
									7422
								],
								[
									7476,
									7485
								],
								[
									7523,
									7534
								],
								[
									7622,
									7649
								],
								[
									7781,
									7785
								],
								[
									7809,
									7816
								],
								[
									7849,
									7865
								],
								[
									7994,
									8039
								],
								[
									8278,
									8336
								],
								[
									8623,
									8645
								],
								[
									9018,
									9028
								],
								[
									9272,
									9286
								],
								[
									10221,
									10245
								],
								[
									10371,
									10375
								],
								[
									10467,
									10481
								],
								[
									10571,
									10587
								],
								[
									11019,
									11032
								],
								[
									11050,
									11055
								],
								[
									11137,
									11144
								],
								[
									11172,
									11177
								],
								[
									11299,
									11324
								],
								[
									11499,
									11530
								],
								[
									11607,
									11618
								],
								[
									13198,
									13229
								],
								[
									13759,
									13792
								],
								[
									14064,
									14099
								],
								[
									14184,
									14217
								],
								[
									15162,
									15172
								],
								[
									15966,
									15970
								],
								[
									16386,
									16393
								],
								[
									16786,
									16822
								],
								[
									17058,
									17062
								],
								[
									17687,
									17719
								],
								[
									18100,
									18104
								],
								[
									18783,
									18818
								],
								[
									19580,
									19585
								],
								[
									20312,
									20316
								],
								[
									20410,
									20414
								],
								[
									20534,
									20543
								],
								[
									20673,
									20680
								],
								[
									20961,
									20968
								],
								[
									21049,
									21056
								],
								[
									21120,
									21136
								],
								[
									21201,
									21221
								],
								[
									21920,
									21932
								],
								[
									22031,
									22043
								],
								[
									22245,
									22261
								],
								[
									22355,
									22368
								],
								[
									22779,
									22797
								],
								[
									22979,
									22996
								],
								[
									23422,
									23441
								],
								[
									23874,
									23894
								],
								[
									25455,
									25477
								],
								[
									25950,
									25971
								],
								[
									26522,
									26541
								],
								[
									26975,
									26983
								],
								[
									29705,
									29717
								],
								[
									31626,
									31661
								],
								[
									32159,
									32178
								],
								[
									32364,
									32381
								],
								[
									32426,
									32439
								],
								[
									32475,
									32485
								],
								[
									33388,
									33404
								],
								[
									33536,
									33555
								],
								[
									33566,
									33585
								],
								[
									33611,
									33631
								]
							],
							"symlist":
							[
								"  value =>",
								"\t(level, message) =>",
								"AsyncCollect(iter)",
								"GetMime(file)",
								"Matcher(pattern, t = arg => arg)",
								"\t(...args) =>",
								"KeyOrValueMatcher(pattern)",
								"\t([key, value]) =>",
								"GetRootDirectories(pattern = '*')",
								"MakeUUID = (rng = Math.random) =>",
								"  n =>",
								"  dd =>",
								"  d =>",
								"  d =>",
								"  d =>",
								"GetDir(dir)",
								"  n =>",
								"DirName(name)",
								"  it =>",
								"DateStr(date)",
								"ModeStr(mode)",
								"HTMLPage = ({ title, style, scripts = [], children, ...props }) =>",
								"  script =>",
								"FilterForm = ({ ...props }) =>",
								"HTMLTable = ({ rows, ...props }) =>",
								"HTMLTableRow = ({ columns, ...props }) =>",
								"HTMLTableColumn = ({ columns, children, tag = 'td', ...props }) =>",
								"FileLink = ({ file, ...props }) =>",
								"FileObject = ({ file, stat = {}, ...props }) =>",
								"FileTable = ({ files, ...props }) =>",
								"(a, b) =>",
								"  field =>",
								"  file =>",
								"ReadExiv2(file)",
								"([k, v]) =>",
								"([k, v]) =>",
								"([k, v]) =>",
								"(a, b) =>",
								"([k, v]) =>",
								"ReadExiftool(file)",
								"  l =>",
								"  line =>",
								"([line, idx]) =>",
								"HeifConvert(src, dst, quality = 100)",
								"MagickResize(src, dst, rotate = 0, width, height)",
								"  main(...args)",
								"\t(a, v) =>",
								"\t(v, pv, o) =>",
								"\t(module, ...args) =>",
								"  m =>",
								"  .show = arg =>",
								"  .cleanup = () =>",
								"\t(...args) =>",
								"() =>",
								"  puts(s)",
								"() =>",
								"ParseBody(gen)",
								"  .createWS = (url, callbacks) =>",
								"  .out = s =>",
								"  test(req, resp)",
								"  proxy(req, resp)",
								"  config(req, resp)",
								"  file(req, resp)",
								"([dir]) =>",
								"  f =>",
								"  file =>",
								"  uploads(req, resp)",
								"  s =>",
								"  files(req, resp)",
								"  n =>",
								"  files2(req, resp)",
								"\tn =>",
								"  n =>",
								"  n =>",
								"(a, b) =>",
								"  name =>",
								"  file =>",
								"  file =>",
								"([file, rel]) =>",
								"(acc, [file, st]) =>",
								"  string(a, b)",
								"  number(a, b)",
								"([name, obj]) =>",
								"({ name }) =>",
								"  onConnect(ws, req)",
								"  sendCommand(data)",
								"  onClose(ws, reason)",
								"  onRequest(req, resp)",
								"  onOpen(name, filename)",
								"  onContent(name, data)",
								"  onClose(name, file)",
								"  f = x =>",
								"  onFinalize()",
								"\t(match, p1, p0, p2, p3, offset) =>",
								"  onMessage(ws, data)",
								"  get connections()",
								"  get by_uuid()",
								"  uuid(data)",
								"  onFd(fd, rd, wr)",
								"  onClose(ws, reason)",
								"  onMessage(ws, data)",
								"  quit(why)"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1681502964.68,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "upload-server.js",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 33962,
						"regions":
						{
						},
						"selection":
						[
							[
								945,
								948
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 18,
							"show_line_column": "disabled",
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1697964153.55,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 252.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "quickjs/qjs-modules/lib/util.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 68538,
						"regions":
						{
						},
						"selection":
						[
							[
								21760,
								21732
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 705,
							"show_line_column": "disabled",
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1697955546.1,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 9475.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "quickjs/qjs-net/src/minnet-websocket.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18999,
						"regions":
						{
						},
						"selection":
						[
							[
								12858,
								12858
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 495,
							"show_line_column": "disabled",
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1697955175.64,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6507.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 24.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.8,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "plot-cv.sublime-project",
	"replace":
	{
		"height": 68.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"/util.js",
				"quickjs/qjs-modules/lib/util.js"
			],
			[
				"minnet-we",
				"quickjs/qjs-net/src/minnet-websocket.c"
			],
			[
				"wscli.js",
				"quickjs/qjs-net/wscli.js"
			],
			[
				"minnet-clie",
				"quickjs/qjs-net/src/minnet-client.c"
			],
			[
				"callbaCK.C",
				"quickjs/qjs-net/lib/callback.c"
			],
			[
				"internal",
				"quickjs/qjs-modules/quickjs-internal.h"
			],
			[
				"utils.c",
				"quickjs/qjs-modules/src/utils.c"
			],
			[
				"qjsm.c",
				"quickjs/qjs-modules/src/qjsm.c"
			],
			[
				"eagle2",
				"eagle2gerber.js"
			],
			[
				"pcb-con",
				"pcb-conversion.js"
			],
			[
				"test_free",
				"qjs-opencv/tests/test_freetype.js"
			],
			[
				"param.js",
				"param.js"
			],
			[
				"make",
				"make-bitmap.js"
			],
			[
				"test_png",
				"qjs-opencv/tests/test_png.js"
			],
			[
				"stream/utils",
				"lib/stream/utils.js"
			],
			[
				"svg-cr",
				"svg-crop-pad.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 330.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
