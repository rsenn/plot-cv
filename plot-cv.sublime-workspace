{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"contents": "EagleElement\n(raw, owner, ref) =>\nget\ncreate\nconstructor\nEagleNode\nv =>\nv =>\nv =>\nv =>\nv =>\nv =>\nvalue =>\nv =>\nname =>\nfn\n() =>\nfn\nfn\nfn\nfn\nfn\n() =>\n() =>\n() =>\n() =>\n() =>\ntext\nattributes\nAttributes\nEagleAttributes\nconstructor\nEagleAttributes\nentries: ()\nkey =>\nkeys: ()\nhas: key\nvalues: ()\nkey =>\n(acc, key) =>\n(acc, key) =>\ngetLayer\nlookup\n(o, p, v) =>\ngetBounds\ne =>\nv =>\ne =>\ne =>\ntransformation\ngeometry\nmakeGetterSetter\nv =>\nprop =>\nprop =>\nprop =>\nisRelation\nelementChain\nchain\nnames\n(acc, entry) =>\nkeys\nvalues\nentries\ntoObject\nchild =>\nchild =>\ntoArray\ntoString\ngetAll\n(v, l, p) =>\nfind\n(v, l, p) =>\nsetAttribute\nremoveAttribute\npos\nmakeEagleElement",
			"settings":
			{
				"buffer_size": 659,
				"line_ending": "Unix",
				"name": "𝌆 Outline",
				"scratch": true
			}
		},
		{
			"file": "lib/util.js",
			"settings":
			{
				"buffer_size": 83771,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "import { toXML, ImmutablePath } from '../json.js';\nimport { ImmutableXPath } from '../xml.js';\n//  import { EagleElement } from \"./element.js\";\nimport Util from '../util.js';\nimport deep from '../deep.js';\nimport { BBox, TransformationList } from '../geom.js';\n\nconst pathPadding = Util.isBrowser() ? 0 : 40;\n\nexport const coloring = Util.coloring(false);\n//console.log('coloring: ', coloring);\nexport const ansi = coloring.code.bind(coloring); //Util.isBrowser() ? () => '' : (...args) => `\\u001b[${[...args].join(';')}m`;\n\nexport const text = coloring.text.bind(coloring); //? (text, ...color) => (color.indexOf(1) != -1 ? `${text}` : text) : (text, ...color) => ansi(...color) + text + ansi(0);\nexport const concat = coloring.concat.bind(coloring); //? (text, ...color) => (color.indexOf(1) != -1 ? `${text}` : text) : (text, ...color) => ansi(...color) + text + ansi(0);\n\nexport const dingbatCode = digit => (digit % 10 == 0 ? circles[0] : String.fromCharCode((digit % 10) + circles[1].charCodeAt(0) - 1));\n\nexport const Palette = {\n  board: (m = (r, g, b) => [r, g, b]) =>\n    [\n      [255, 255, 255],\n      [75, 75, 165],\n      [75, 165, 75],\n      [75, 165, 165],\n      [165, 75, 75],\n      [165, 75, 165],\n      [165, 165, 75],\n      [175, 175, 175],\n      [75, 75, 255],\n      [75, 255, 75],\n      [75, 255, 255],\n      [255, 75, 75],\n      [255, 75, 255],\n      [255, 255, 75],\n      [75, 75, 75],\n      [165, 165, 165]\n    ].map(c => m(...c)),\n  schematic: (m = (r, g, b) => [r, g, b]) =>\n    [\n      [255, 255, 255],\n      [75, 75, 165],\n      [75, 165, 75],\n      [75, 165, 165],\n      [165, 75, 75],\n      [165, 75, 165],\n      [165, 165, 75],\n      [175, 175, 175],\n      [75, 75, 255],\n      [75, 255, 75],\n      [75, 255, 255],\n      [255, 75, 75],\n      [255, 75, 255],\n      [255, 255, 75],\n      [75, 75, 75],\n      [165, 165, 165]\n    ].map(c => m(...c))\n};\n\nexport const dump = (o, depth = 2, breakLength = 400) => {\n  const isElement = o => Util.isObject(o) && ['EagleElement', 'EagleNode', 'EagleDocument'].indexOf(Util.className(o)) != -1;\n  let s;\n  if(o instanceof Array) {\n    s = '';\n    for(let i of o) {\n      if(s.length > 0) s += isElement(i) ? ',\\n' : ', ';\n      s += dump(i, depth - 1, breakLength);\n    }\n  } else if(isElement(o)) {\n    s = EagleInterface.inspect(o, undefined, { depth, path: false });\n    depth * 4;\n  } else\n    s = Util.inspect(o, {\n      depth,\n      newline: '',\n      colors: !Util.isBrowser(),\n      breakLength\n    });\n  return s;\n};\n\nexport const parseArgs = args => {\n  let ret = { path: [] };\n\n  while(args.length > 0) {\n    if(args[0] instanceof ImmutablePath) {\n      ret.path = args.shift();\n    } else if(args[0] instanceof Array) {\n      ret.path = new ImmutablePath(args.shift());\n    } else if(typeof args[0] == 'function') {\n      if(ret.predicate === undefined) ret.predicate = args.shift();\n      else ret.transform = args.shift();\n    } else if(typeof args[0] == 'string') {\n      if(ret.element === undefined) ret.element = args.shift();\n      else ret.name = args.shift();\n    } else if(typeof args[0] == 'object') {\n      const { predicate, transform, element, name } = args.shift();\n      Object.assign(ret, { predicate, transform, element, name });\n    } else {\n      throw new Error('unhandled: ' + typeof args[0] + dump(args[0]));\n    }\n  }\n  if(typeof ret.predicate != 'function' && (ret.element || ret.name)) {\n    if(ret.name) ret.predicate = v => v.tagName == ret.element && v.attributes.name == ret.name;\n    else ret.predicate = v => v.tagName == ret.element;\n  }\n  return ret;\n};\n\nexport const traverse = function*(obj, path = [], doc) {\n  if(!(path instanceof ImmutablePath)) path = new ImmutablePath(path);\n  yield [obj, path, doc];\n  if(typeof obj == 'object') {\n    if(Util.isArray(obj)) {\n      for(let i = 0; i < obj.length; i++) yield* traverse(obj[i], path.concat([i]), doc);\n    } else if('children' in obj && Util.isArray(obj.children)) {\n      for(let i = 0; i < obj.children.length; i++) yield* traverse(obj.children[i], path.concat(['children', i]), doc);\n    }\n  }\n};\n\nexport const Rotation = (rot, f = 1) => {\n  let mirror, angle;\n  if(!rot) {\n    mirror = 0;\n    angle = 0;\n  } else {\n    mirror = /M/.test(rot) ? 1 : 0;\n    angle = +(rot || '').replace(/M?R/, '') || 0;\n  }\n  let transformations = new TransformationList();\n  if(angle !== 0) transformations.rotate(-angle);\n  if(mirror !== 0) transformations.scale(-1, 1);\n\n  return transformations;\n};\n\nexport class EagleInterface {\n  static inspect = (e, d, c = { depth: 0, breakLength: 400, path: true }) => {\n    const { depth, breakLength } = c;\n    let o = e;\n    let r = (e && e.raw) || e;\n    if(typeof r == 'string') return text(r, 1, 36);\n    let x = '';\n    try {\n      x = Util.inspect(r, {\n        depth: depth * 2,\n        breakLength,\n        colors: !Util.isBrowser()\n      });\n    } catch(err) {}\n    let s = '⏐';\n    x = x.substring(x.indexOf('tagName') + 14);\n    x = Object.entries((r && r.attributes) || {}).map(([key, value]) => text(key, 33) + text(s, 0, 37) + text(value, 1, 36));\n    x.unshift(r.tagName);\n    let [p, ...arr] = x;\n    p = text(`〔`, 1, 37) + text(p, 38, 5, 199);\n    let l = e.path + '';\n    let type = (e.nodeType || (d && d.type)) + '';\n    let ret = [text(type, 38, 5, 219), p, text('⧃❋⭗', 38, 5, 112), arr.join(' ').trimRight(), text(`〕`, 1, 37)];\n\n    return (c.path ? l + '\\n  ' : '') + ret.join(' ');\n  };\n\n  constructor(owner) {\n    Util.define(this, { owner });\n\n    /*    Util.defineGetter(\n      this,\n      'children',\n      function() {\n        return this.root.children;\n      },\n      true\n    );*/\n  }\n\n  *findAll(...args) {\n    let { path, predicate, transform } = parseArgs(args);\n    for(let [v, l, d] of this.iterator(\n      e => true,\n      [],\n      arg => arg\n    )) {\n      if(!d) d = this;\n      if(predicate(v, l, d)) {\n        if(transform) v = transform([v, l, d]);\n        yield v;\n      }\n    }\n  }\n\n  find(...args) {\n    let { path, predicate, transform } = parseArgs([...arguments]);\n    if(!transform) transform = ([v, l, d]) => (typeof v == 'object' && v !== null && 'tagName' in v ? new EagleElement(d, l, v) : v);\n    for(let [v, p, d] of this.iterator()) {\n      if(typeof v == 'string') continue;\n      if(predicate(v, p, d)) return transform([v, p, d]);\n    }\n    return transform([null, [], []]);\n  }\n\n  lookup(xpath, t = (o, p, v) => [o, p]) {\n    console.log('lookup(', ...arguments, ')');\n\n    const { tagName, owner, raw, document } = this;\n    if(typeof xpath == 'string') xpath = xpath.split(/\\//g);\n\n    if(!(xpath instanceof ImmutableXPath)) xpath = new ImmutableXPath(xpath);\n\n    console.log('lookup:', { xpath });\n    let path = new ImmutablePath(xpath.toArray().reduce((acc, p) => [...acc, 'children', p], []));\n    let value = this.path.concat(path).apply(raw, true);\n\n    //  path = this.path.concat(path);\n    //  value = path.apply(this.raw,true);\n    console.log('lookup:', { tagName, owner, path, value });\n\n    let ret = t(this  , path, value);\n    //console.log('lookup =', ret);\n    return ret;\n  }\n\n  getBounds(pred = e => true) {\n    let bb = new BBox();\n\n    if(this.children && this.children.length) {\n      for(let element of this.getAll(e => e.tagName !== undefined && pred(e))) {\n        let g = element.geometry();\n        if(g) {\n          let bound = typeof g.bbox == 'function' ? g.bbox() : g;\n          bb.update(bound, 0, element);\n        }\n      }\n    }\n    let g = this.geometry();\n\n    if(g) bb.update(g);\n\n    return bb;\n  }\n\n  geometry() {\n    const { attributes } = this.raw;\n    const keys = Object.keys(attributes);\n    const makeGetterSetter = k => v => (v === undefined ? this[k] : (this[k] = v));\n    if(['x1', 'y1', 'x2', 'y2'].every(prop => keys.includes(prop))) {\n      return Line.bind(this, null, makeGetterSetter);\n    } else if(['x', 'y'].every(prop => keys.includes(prop))) {\n      const { x, y } = Point(this);\n      if(keys.includes('radius')) return Circle.bind(this, null, makeGetterSetter);\n      if(['width', 'height'].every(prop => keys.includes(prop))) return Rect.bind(this, null, makeGetterSetter);\n      return Point.bind(this, null, makeGetterSetter);\n    }\n  }\n\n  /*\n  locate(...args) {\n    let { element, path, predicate, transform } = parseArgs(args);\n    //console.log(\"locate\", {element,path,predicate});\n    return predicate(this.find((v, l, d) => v === element, path));\n  }*/\n\n  getDocument() {\n    let o = this;\n    while(o.owner) {\n      if(o.xml !== undefined) break;\n      o = o.owner;\n    }\n    return o;\n  }\n\n  xpath() {\n    const { ref, owner } = this;\n    let x = ImmutableXPath.from(ref.path, owner.raw);\n    //console.log('PATH', ref.path);\n    //console.log('ARRAY', [...x]);\n    //console.log('XPATH', x.toString());\n    return x;\n  }\n\n  get nodeType() {\n    if(typeof this.tagName == 'string') return 'EagleElement';\n    else if(typeof this.xml != 'undefined') return 'EagleDocument';\n    return Util.className(this);\n  }\n\n  entries(t = ([v, l, d]) => [l[l.length - 1], EagleElement.get(d, l)]) {\n    return this.iterator([], t);\n  }\n\n  *iterator(...args) {\n    let predicate = typeof args[0] == 'function' ? args.shift() : arg => true;\n    let path = (Util.isArray(args[0]) && args.shift()) || [];\n    let t = typeof args[0] == 'function' ? args.shift() : ([v, l, d]) => [typeof v == 'object' && v !== null && 'tagName' in v ? new this.constructor(d, l) : v, l, d];\n    let owner = Util.isObject(this) && 'owner' in this ? this.owner : this;\n    let root = this.root || (owner.xml && owner.xml[0]);\n    let node = root;\n    if(path.length > 0) node = deep.get(node, path);\n    for(let [v, l] of deep.iterate(node, (v, p) => (predicate(v, p) ? -1 : p.length > 1 ? p[p.length - 2] == 'children' : true))) {\n      if(!(l instanceof ImmutablePath)) l = new ImmutablePath(l);\n      if(typeof v == 'object' && v !== null && 'tagName' in v) if (predicate(v, l, owner)) yield t([v, l, owner]);\n    }\n  }\n\n  [Symbol.iterator]() {\n    return this.iterator(a => a);\n  }\n\n  static name(e, l) {\n    let out = '';\n    let d = e.document || e.ownerDocument;\n    if(!l) l = e.path;\n    do {\n      let str = e.tagName || '';\n      let key = l && l.length > 0 ? l[l.length - 1] : [];\n      let parent = d.index(l.slice(0, -2));\n      let numSiblings = parent ? parent.children.length : 0;\n      if(!str.startsWith('?')) {\n        if(typeof e == 'object' && e.tagName && 'children' in e && parent && parent.children.filter(child => (typeof child.tagName == 'string' && child.tagName.length > 0 ? child.tagName == e.tagName : false)).length == 1) {\n        } else if(typeof e == 'object' && 'attributes' in e && 'name' in e.attributes) {\n          let cmp = Object.keys(e.attributes)\n            .filter(k => k == 'name')\n            .map(key => `@${key}=\"${e.attributes[key]}\"`)\n            .join(',');\n          if(cmp != '') str += `[${cmp}]`;\n        } else if(typeof key == 'number' && numSiblings > 1) {\n          str += `[${key}]`;\n        }\n        if(out.length > 0) str += '/';\n        out = str + out;\n      }\n      if(l.length <= 0) break;\n      l = l.slice(0, -2);\n      e = parent;\n    } while(true);\n    return out;\n  }\n\n  static toString(e) {\n    return dump(e);\n  }\n\n  toXML(depth = Number.MAX_SAFE_INTEGER) {\n    return toXML(this.raw, depth);\n  }\n}\n",
			"file": "lib/eagle/common.js",
			"file_size": 11283,
			"file_write_time": 132392256882246054,
			"settings":
			{
				"buffer_size": 11273,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/xml/xpath.js",
			"settings":
			{
				"buffer_size": 10125,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/roman/.config/sublime-text-3/Packages/User/SchemeEditorTemp/Next Bold.tmTheme",
			"settings":
			{
				"buffer_size": 53611,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/roman/Sources/plot-cv/lib/eagle/schematicRenderer.js",
			"settings":
			{
				"buffer_size": 7769,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/roman/Sources/plot-cv/lib/eagle/document.js",
			"settings":
			{
				"buffer_size": 5762,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/eagle/element.js",
			"settings":
			{
				"buffer_size": 16348,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/eagle/svgRenderer.js",
			"settings":
			{
				"buffer_size": 12970,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/json/path.js",
			"settings":
			{
				"buffer_size": 15649,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 208 files for \"\\\\[\" (regex)\n\nCharacter set declaration starting with [ terminated prematurely - either no ] was found or the set had no content.  The error occurred while parsing the regular expression: '\\\\[>>>HERE>>>'. in regular expression \\\\[\n\n0 matches\n\nSearching 208 files for \"\\\\[\" (regex)\n\nCharacter set declaration starting with [ terminated prematurely - either no ] was found or the set had no content.  The error occurred while parsing the regular expression: '\\\\[>>>HERE>>>'. in regular expression \\\\[\n\n0 matches\n\nSearching 209 files for \" xpath\\(\" (regex)\n\n/home/roman/Dokumente/Sources/plot-cv/lib/eagle/common.js:\n  271    }\n  272  \n  273:   xpath() {\n  274      const { ref, owner } = this;\n  275      let x = ImmutableXPath.from(ref.path, owner.raw);\n\n/home/roman/Sources/plot-cv/lib/dom/element.js:\n  542    }\n  543  \n  544:   static xpath(elt, relative_to = null) {\n  545      let path = '';\n  546      for(let e of this.skip(elt, (e, next) => next(e.parentElement !== relative_to && e.parentElement))) path = '/' + Element.unique(e) + path;\n\n/home/roman/Sources/plot-cv/lib/eagle/common.js:\n  271    }\n  272  \n  273:   xpath() {\n  274      const { ref, owner } = this;\n  275      let x = ImmutableXPath.from(ref.path, owner.raw);\n\n/home/roman/Sources/plot-cv/lib/json/pathMapper.js:\n   14    }\n   15    /*\n   16:   xpath(obj) {\n   17      let path = this.get(obj);\n   18      return path ? ImmutableXPath.from(path, this.root) : null;\n\n4 matches across 4 files\n",
			"settings":
			{
				"buffer_size": 1491,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "/home/roman/Sources/plot-cv/lib/eagle/common.js",
			"settings":
			{
				"buffer_size": 11271,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/eagle/renderer.js",
			"settings":
			{
				"buffer_size": 6606,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "import { Point, Line } from '../geom.js';\nimport { TransformationList } from '../geom/transformation.js';\nimport { EagleElement } from './element.js';\nimport { Util } from '../util.js';\nimport { RGBA } from '../color.js';\nimport { Rotation, Palette } from './common.js';\nimport { VERTICAL, HORIZONTAL, RotateTransformation, LayerAttributes, LinesToPath, MakeCoordTransformer } from './renderUtils.js';\nimport { EagleSVGRenderer } from './svgRenderer.js';\n\nexport class BoardRenderer extends EagleSVGRenderer {\n  \n  static palette = Palette.board((r, g, b) => new RGBA(r, g, b));\n\n  constructor(obj, factory) {\n    super(obj, factory);\n    const { layers, elements, signals, sheets } = obj;\n\n    let board = obj;\n\n    this.elements = elements;\n    this.signals = signals;\n    // this.plain = board.plain; //get('plain', (v, l) => EagleElement.get(board, l));\n    this.layers = layers;\n    this.sheets = sheets;\n\n    this.setPalette(BoardRenderer.palette);\n  }\n\n  renderItem(item, parent, opts = {}) {\n    const layer = item.layer;\n    const color = layer ? this.getColor(layer.color) : BoardRenderer.palette[2];\n    const svg = (elem, attr, parent) =>\n      this.create(\n        elem,\n        {\n          className: item.tagName, //...LayerAttributes(layer),\n          ...attr\n        },\n        parent\n      );\n    const { coordFn = i => i } = opts;\n    switch (item.tagName) {\n      case 'via':\n      case 'pad': {\n        const { name, drill, diameter, shape } = item;\n        const { x, y } = coordFn(item);\n\n        const ro = +((diameter || 1.5) / 2.54).toFixed(3);\n        const ri = +(drill / 3).toFixed(3);\n        let data = '';\n        const transform = `translate(${x},${y})`;\n\n        switch (shape) {\n          case 'long': {\n            const w = ro * 0.75;\n            data = `M 0 ${-ro} l ${w} 0 A ${ro} ${ro} 0 0 1 ${w} ${ro} l ${-w * 2} 0 A ${ro} ${ro} 0 0 1 ${-w} ${-ro}`;\n            break;\n          }\n          case 'square': {\n            const points = [new Point(-1, -1), new Point(1, -1), new Point(1, 1), new Point(-1, 1)].map(p => p.prod(ro * 1.27));\n\n            data = points.map((p, i) => `${i == 0 ? 'M' : 'L'} ${p.x} ${p.y}`).join(' ');\n\n            break;\n          }\n          case 'octagon': {\n            const points = Util.range(0, 7).map(i => Point.fromAngle((Math.PI * i) / 4 + Math.PI / 8, ro * 1.4));\n\n            data = points.map((p, i) => `${i == 0 ? 'M' : 'L'} ${p.x} ${p.y}`).join(' ');\n            break;\n          }\n          default: {\n            data = `M 0 ${-ro} A ${ro} ${ro} 0 0 1 0 ${ro} A ${ro} ${ro} 0 0 1 0 ${-ro}`;\n            break;\n          }\n        }\n\n        svg(\n          'path',\n          {\n            fill: this.colors.Pads || this.palette[2],\n            d: data + ` M 0 ${ri} A ${ri} ${ri} 180 0 0 0 ${-ri} A ${ri} ${ri} 180 0 0 0 ${ri}`,\n            transform\n          },\n          parent\n        );\n\n        this.debug('name:', name);\n        if(name) {\n          svg(\n            'tspan',\n            {\n              children: name,\n              ...EagleSVGRenderer.alignmentAttrs('center', HORIZONTAL)\n            },\n            svg(\n              'text',\n              {\n                fill: 'hsl(180,100%,60%)',\n                stroke: 'black',\n                'stroke-width': 0.01,\n                x: 0.04,\n                y: -0.04,\n                filter: 'url(#shadow)',\n                ...EagleSVGRenderer.alignmentAttrs('center', VERTICAL),\n                'font-size': 0.9,\n                fontStyle: 'bold',\n                'font-family': 'Fixed',\n                transform: `${transform} ${RotateTransformation(opts.rot, -1)} scale(1,-1)`\n              },\n              parent\n            )\n          );\n        }\n        break;\n      }\n      default: {\n        super.renderItem(item, parent, { ...opts, color });\n        break;\n      }\n    }\n  }\n\n  renderCollection(coll, parent, opts = {}) {\n    const { predicate = i => true, transform, pos, rot } = opts;\n    this.debug(`BoardRenderer.renderCollection`, { transform, pos, rot });\n\n    let coordFn = transform ? MakeCoordTransformer(transform) : i => i;\n\n    let wireMap = new Map(),\n      other = [];\n    let layers = {},\n      widths = {};\n\n    for(let item of coll) {\n      if(item.tagName === 'wire') {\n        const layerId = item.attributes.layer;\n        layers[layerId] = item.layer;\n        if('width' in item) widths[layerId] = item.width;\n        if(wireMap.has(layerId)) wireMap.get(layerId).push(item);\n        else wireMap.set(layerId, [item]);\n      } else {\n        other.push(item);\n      }\n    }\n\n    for(let item of other) if(predicate(item) && item.tagName == 'pad') this.renderItem(item, parent, { ...opts });\n\n    for(let item of other) if(predicate(item) && item.tagName != 'pad') this.renderItem(item, parent, { ...opts });\n\n    for(let [layerId, wires] of wireMap) {\n      let classList = (parent && parent.classList) || [];\n      if([...classList].indexOf('plain') != -1) continue;\n\n      const lines = wires.map(wire => {\n        let line = new Line(coordFn(wire));\n        if('curve' in wire) line.curve = wire.curve;\n        return line;\n      });\n\n      this.debug('Lines:', [...lines]);\n\n      const path = LinesToPath(lines);\n      const layer = layers[layerId];\n      const width = widths[layerId];\n\n      this.debug('layerId:', layerId);\n      this.debug('layers:', layers);\n      const color = layer.color;\n\n      this.create(\n        'path',\n        {\n          className: 'wire',\n          //  ...LayerAttributes(layer),\n          d: path,\n          stroke: color,\n          'stroke-width': +(width == 0 ? 0.1 : width * 1).toFixed(3),\n          fill: 'none',\n          'stroke-linecap': 'round',\n          'stroke-linejoin': 'round',\n          'data-layer': layer.name\n        },\n        parent\n      );\n    }\n  }\n\n  renderElement(element, parent) {\n    const { name, library, value, x, y, rot } = element;\n\n    this.debug(`BoardRenderer.renderElement`, { name, library, value, x, y, rot });\n\n    let transform = new TransformationList();\n    let rotation = Rotation(rot);\n\n    transform.translate(x, y);\n\n    const g = this.create(\n      'g',\n      {\n        id: `element.${name}`,\n        className: `element ${name}`,\n        'data-name': name,\n        'data-value': value,\n        'data-library': library.name,\n        'data-package': element.package.name,\n        transform: transform.concat(rotation)\n      },\n      parent\n    );\n    this.renderCollection(element.package.children, g, {\n      name,\n      value,\n      rot,\n      transform: rotation.slice()\n    });\n  }\n\n  renderSignal(signal, parent, options = {}) {\n    let signalGroup = this.create('g', { id: `signal.${signal.name}`, className: `signal ${signal.name}` }, parent);\n\n    this.debug(`BoardRenderer.renderSignal`, signal.name);\n\n    return this.renderCollection(signal.children, signalGroup, options);\n  }\n\n  render(doc = this.doc, parent, props = {}) {\n    /* let bounds = doc.getBounds();\n    let rect = bounds.rect;\n\n    this.bounds = bounds;\n    this.rect = rect;\n\n    rect.outset(1.27);\n    rect.round(2.54);\n*/\n    parent = super.render(doc, parent, props);\n\n    const { bounds, rect } = this;\n\n    this.debug(`BoardRenderer.render`, { bounds, rect });\n\n    //  this.renderLayers(parent);\n\n    let transform = this.transform + '';\n\n    let plainGroup = this.create('g', { className: 'plain', transform }, parent);\n\n    let signalsGroup = this.create('g', { className: 'signals', strokeLinecap: 'round', transform }, parent);\n    let elementsGroup = this.create('g', { className: 'elements', transform }, parent);\n\n    this.debug('bounds: ', bounds);\n\n    for(let signal of this.signals.list)\n      this.renderSignal(signal, signalsGroup, {\n        predicate: i => i.attributes.layer == '16'\n      });\n    for(let signal of this.signals.list)\n      this.renderSignal(signal, signalsGroup, {\n        predicate: i => i.attributes.layer == '1'\n      });\n    for(let signal of this.signals.list)\n      this.renderSignal(signal, signalsGroup, {\n        predicate: i => i.attributes.layer === undefined\n      });\n\n    for(let element of this.elements.list) this.renderElement(element, elementsGroup);\n\n    let plain = [...this.doc.plain];\n\n    this.renderCollection(plain, plainGroup);\n    this.bounds = bounds;\n    this.rect = bounds.rect;\n    return parent;\n  }\n}\n\nEagleSVGRenderer.rendererTypes.brd = BoardRenderer;\n",
			"file": "lib/eagle/boardRenderer.js",
			"file_size": 8369,
			"file_write_time": 132392177284124868,
			"settings":
			{
				"buffer_size": 8372,
				"line_ending": "Unix"
			}
		},
		{
			"file": "test-renderer.js",
			"settings":
			{
				"buffer_size": 1294,
				"line_ending": "Unix"
			}
		},
		{
			"file": "main.js",
			"settings":
			{
				"buffer_size": 20799,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/eagle/node.js",
			"settings":
			{
				"buffer_size": 9156,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"scheme",
				"SchemeEditor: Edit Current Scheme"
			],
			[
				"schemeed",
				"SchemeEditor: Edit Current Scheme"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"",
				"Preferences: Package Control Settings – Default"
			],
			[
				"package",
				"Preferences: Browse Packages"
			],
			[
				"cscope",
				"Cscope: Rebuild database"
			],
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"advan",
				"Package Control: Advanced Install Package"
			],
			[
				"install p",
				"Package Control: Install Package"
			],
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"remove",
				"Package Control: Remove Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 205.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Dokumente/Sources/plot-cv",
		"/home/roman/Dokumente/Sources/plot-cv/Javascript_Clipper_6.4.2.2",
		"/home/roman/Dokumente/Sources/plot-cv/lib",
		"/home/roman/Dokumente/Sources/plot-cv/lib/eagle",
		"/home/roman/Dokumente/Sources/plot-cv/opencv"
	],
	"file_history":
	[
		"/home/roman/Dokumente/Sources/plot-cv/lib/json/path.js",
		"/home/roman/Dokumente/Sources/plot-cv/main.js",
		"/usr/lib/node_modules/npm/node_modules/figgy-pudding/index.js",
		"/home/roman/Dokumente/Sources/plot-cv/lib/json/util.js",
		"/home/roman/Dokumente/Sources/plot-cv/lib/alea.js",
		"/home/roman/Dokumente/Sources/plot-cv/lib/draw/colorMap.js",
		"/home/roman/Dokumente/Sources/plot-cv/test-xml.js",
		"/home/roman/Sources/plot-cv/lib/devtools.js",
		"/home/roman/Dokumente/Sources/plot-cv/lib/color/hsla.js",
		"/home/roman/Dokumente/Sources/plot-cv/lib/deep.js",
		"/home/roman/Dokumente/Sources/plot-cv/lib/eagle/node.js",
		"/home/roman/Dokumente/Sources/plot-cv/lib/eagle/common.js",
		"/home/roman/Dokumente/Sources/plot-cv/lib/eagle/document.js",
		"/home/roman/Sources/plot-cv/lib/dom/preactComponent.js",
		"/home/roman/Dokumente/Sources/plot-cv/lib/xml/xpath.js",
		"/home/roman/Dokumente/Sources/plot-cv/lib/KolorWheel.js",
		"/home/roman/Dokumente/Sources/plot-cv/test-kolorwheel.js",
		"/home/roman/.config/sublime-text-3/Packages/User/SchemeEditorTemp/Next Modified.tmTheme",
		"/home/roman/Dokumente/Sources/plot-cv/lib/eagle/nodeMap.js",
		"/home/roman/Dokumente/Sources/plot-cv/test-eagle.js",
		"/home/roman/Sources/plot-cv/lib/eagle/node.js",
		"/home/roman/Dokumente/Sources/plot-cv/lib/xml/util.js",
		"/home/roman/Dokumente/Sources/plot-cv/lib/util.js",
		"/home/roman/Dokumente/Sources/plot-cv/lib/eagle/ref.js",
		"/home/roman/Sources/plot-cv/lib/eagle/renderer.js",
		"/home/roman/Dokumente/Sources/plot-cv/Next.xml",
		"/home/roman/Sources/plot-cv/lib/alea.js",
		"/home/roman/.config/sublime-text-3/Packages/Babel/Next.tmTheme",
		"/home/roman/Dokumente/Sources/plot-cv/Next.json",
		"/home/roman/.config/sublime-text-3/Packages/User/SchemeEditorTemp/Next Other.tmTheme",
		"/home/roman/Dokumente/Sources/plot-cv/lib/color/rgba.js",
		"/home/roman/Dokumente/Sources/plot-cv/index.html",
		"/home/roman/Dokumente/Sources/pictest/src/pictest.h",
		"/opt/microchip/xc8/v1.45/include/pic16f876a.h",
		"/opt/microchip/xc8/v1.45/include/as16f876a.h",
		"/opt/microchip/xc8/v1.45/include/pic18f14k50.h",
		"/opt/microchip/xc8/v1.45/include/pic16f1947.h",
		"/home/roman/Dokumente/Sources/pictest/lib/device.h",
		"/home/roman/Dokumente/Sources/pictest/obj/xc8-18f14k50/debug_20mhz_38kbps/pictest/ledsense.c",
		"/home/roman/Dokumente/Sources/pictest/pictest.c",
		"/opt/microchip/xc8/v1.45/sources/pic/eewrite.c",
		"/opt/microchip/xc8/v1.45/include/eeprom_routines.h",
		"/home/roman/Dokumente/Sources/pictest/lib/eeprom.h",
		"/home/roman/Dokumente/Sources/pictest/lib/eeprom.c",
		"/home/roman/Dokumente/Sources/pictest/lib/interrupt.h",
		"/home/roman/Dokumente/Sources/pictest/batterycharger-code/src/eeprom.h",
		"/home/roman/Dokumente/Sources/pictest/lib/extra/ledsense.h",
		"/home/roman/Sources/plot-cv/lib/color/rgba.js",
		"/home/roman/Sources/plot-cv/lib/draw/colorMap.js",
		"/home/roman/Dokumente/Sources/pictest/lib/extra/ledsense.c",
		"/home/roman/Dokumente/Sources/pictest/ringtone.c",
		"/opt/microchip/xc8/v1.45/include/pic18f252.h",
		"/home/roman/Dokumente/Sources/pictest/build/sdcc.mk",
		"/opt/microchip/xc8/v1.45/include/p18f14k50.h",
		"/home/roman/Dokumente/Sources/eagle/eagle2svg-seymar/index.js",
		"/opt/microchip/xc8/v1.45/include/pic18f25k50.h",
		"/opt/microchip/xc8/v1.45/sources/pic/eeread.c",
		"/opt/microchip/xc8/v1.45/sources/pic/eeprom.c",
		"/home/roman/Dokumente/Sources/pictest/batterycharger-code/src/eeprom.c",
		"/home/roman/Dokumente/Sources/pictest/obj/xc8-18f14k50/debug_20mhz_38kbps/ringtone/ringtone.c",
		"/home/roman/Dokumente/Sources/plot-cv/lib/eagle/svgRenderer.js",
		"/home/roman/Dokumente/Sources/plot-cv/test-matrix.js",
		"/home/roman/Dokumente/Sources/plot-cv/test-membrane.js",
		"/home/roman/Dokumente/Sources/plot-cv/test-pointlist.js",
		"/home/roman/Sources/plot-cv/lib/xml/xpath.js",
		"/home/roman/Dokumente/Sources/plot-cv/lib/iterator.js",
		"/home/roman/Dokumente/Sources/plot-cv/test-moon.js",
		"/home/roman/Sources/plot-cv/lib/json/util.js",
		"/home/roman/Dokumente/Sources/plot-cv/lib/proxy/deepProxy.js",
		"/home/roman/Dokumente/Sources/plot-cv/lib/eagle/schematicRenderer.js",
		"/home/roman/Dokumente/Sources/plot-cv/lib/json/pathMapper.js",
		"/home/roman/Dokumente/Sources/plot-cv/lib/ecmascript/es6.grammar",
		"/home/roman/Dokumente/Sources/plot-cv/lib/eagle/element.js",
		"/home/roman/Dokumente/Sources/plot-cv/lib/dom/preactComponent.js",
		"/home/roman/Dokumente/Sources/plot-cv/test-cli.js",
		"/home/roman/Dokumente/Sources/plot-cv/HoerMalWerDaHaemmert.html",
		"/home/roman/Dokumente/Sources/plot-cv/lib/tosource.js",
		"/home/roman/Dokumente/Sources/plot-cv/HoerMalWerDaHaemmert.json2",
		"/home/roman/Dokumente/Sources/plot-cv/HoerMalWerDaHaemmert.json",
		"/home/roman/Sources/plot-cv/lib/eagle/common.js",
		"/home/roman/Dokumente/Sources/plot-cv/lib/xml.js",
		"/home/roman/Sources/plot-cv/lib/json/treeObserver.js",
		"/home/roman/Dokumente/Sources/plot-cv/server.js",
		"/home/roman/Dokumente/Sources/plot-cv/lib/eagle/renderUtils.js",
		"/home/roman/Dokumente/Sources/plot-cv/lib/dom/element.js",
		"/home/roman/Sources/plot-cv/lib/eagle/schematicRenderer.js",
		"/home/roman/Dokumente/Sources/plot-cv/lib/eagle/renderer.js",
		"/home/roman/Dokumente/Sources/plot-cv/components.js",
		"/home/roman/Dokumente/Sources/plot-cv/style.css",
		"/home/roman/Dokumente/Sources/an-tronics/eagle/Headphone-Amplifier-ClassAB-alt2.brd",
		"/home/roman/Dokumente/Sources/plot-cv/lib/geom/line.js",
		"/home/roman/Dokumente/Sources/plot-cv/lib/geom/point.js",
		"/home/roman/Dokumente/Sources/plot-cv/lib/geom/rect.js",
		"/home/roman/Dokumente/Sources/plot-cv/lib/dom/node.js",
		"/home/roman/Dokumente/Sources/plot-cv/lib/crosstab.js",
		"/home/roman/Dokumente/Sources/plot-cv/lib/autoStore.js",
		"/home/roman/Dokumente/Sources/plot-cv/lib/dom/reactComponent.js",
		"/home/roman/Dokumente/Sources/plot-cv/lib/dom/keysim.js",
		"/home/roman/Dokumente/Sources/plot-cv/lib/dom/svg.js",
		"/home/roman/Dokumente/Sources/plot-cv/lib/dom/event.js",
		"/home/roman/Dokumente/Sources/plot-cv/lib/dom/container.js",
		"/home/roman/Dokumente/Sources/plot-cv/lib/dom.js",
		"/home/roman/Dokumente/Sources/plot-cv/tmp/Super-Regenerative-VHF-2Transistor-RickAndersen-October2006.brd",
		"/home/roman/Dokumente/Sources/plot-cv/lib/eagle/project.js",
		"/home/roman/Dokumente/Sources/plot-cv/lib/eagle/boardRenderer.js",
		"/home/roman/Dokumente/Sources/plot-cv/lib/eagle/nodeList.js",
		"/home/roman/Sources/plot-cv/main.js",
		"/home/roman/Sources/plot-cv/lib/eagle.js",
		"/home/roman/Sources/plot-cv/lib/eagle/project.js",
		"/home/roman/Dokumente/Sources/plot-cv/tmp/VCF-LM324-Mono.brd",
		"/home/roman/Sources/plot-cv/lib/eagle/document.js",
		"/home/roman/Dokumente/Sources/plot-cv/lib/eagle.js",
		"/home/roman/Sources/plot-cv/lib/eagle/nodeMap.js",
		"/home/roman/Sources/plot-cv/lib/eagle/element.js",
		"/home/roman/Sources/plot-cv/lib/eagle/nodeList.js",
		"/home/roman/Dokumente/Sources/plot-cv/lib/geom/lineList.js",
		"/home/roman/Dokumente/Sources/plot-cv/test-line.js",
		"/home/roman/Dokumente/Sources/plot-cv/lib/geom/pointList.js",
		"/home/roman/Sources/plot-cv/lib/geom/point.js",
		"/home/roman/Sources/plot-cv/lib/util.js",
		"/home/roman/Dokumente/Sources/plot-cv/lib/geom/bbox.js",
		"/home/roman/Dokumente/Sources/an-tronics/eagle/VCF-LM358-Stereo.sch",
		"/home/roman/Dokumente/Sources/an-tronics/eagle/VCF-LM358-Stereo.brd",
		"/home/roman/Dokumente/Sources/plot-cv/test-color.js",
		"/home/roman/Dokumente/Sources/plot-cv/test.js",
		"/home/roman/Dokumente/Sources/plot-cv/lib/devpane.js",
		"/home/roman/Dokumente/Sources/plot-cv/lib/devtools.js",
		"/home/roman/Dokumente/Sources/plot-cv/lib/colorscheme.js"
	],
	"find":
	{
		"height": 39.0
	},
	"find_in_files":
	{
		"height": 137.0,
		"where_history":
		[
			"/home/roman/Sources/plot-cv/lib,*.js,<open files>",
			"/home/roman/Sources/plot-cv,*.js,<open files>",
			"/home/roman/Sources/plot-cv/lib,*.js",
			"/home/roman/Sources/plot-cv,*.js",
			"/home/roman/Sources/plot-cv,**.js",
			"/home/roman/Sources/plot-cv,*.js",
			"/home/roman/Sources/plot-cv/lib,*.js",
			"/home/roman/Sources/plot-cv/lib/geom,*.js",
			"/home/roman/Sources/plot-cv/lib,*.js",
			"/home/roman/Dokumente/Sources/plot-cv,*.js",
			"\\\\u200a",
			"/home/roman/Sources/plot-cv/lib,*.js,<open files>",
			"/home/roman/Sources/plot-cv/lib/eagle,*.js,<open files>",
			"/home/roman/Dokumente/Sources/plot-cv/lib/eagle,*.js,<open files>",
			"/home/roman/Dokumente/Sources/plot-cv/lib/eagle,*.js,<current file>,<open files>",
			"/home/roman/Dokumente/Sources/plot-cv/lib/eagle,*enderer*.js"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			" xpath\\(",
			"'packages'",
			"'package'",
			"'library'",
			"\\\\[",
			"elementChain",
			" elementChain",
			"1.*35",
			"'instances'",
			"instances'",
			"setPale",
			"setPal",
			"\n  static compare(a, b) {\n    if(a.length != b.length) return a.length - b.length;\n    for(let i = 0, len = a.length; i < len; i++) {\n      if(a[i] < b[i]) return -1;\n      if(a[i] > b[i]) return 1;\n    }\n    return 0;\n  }",
			"compare",
			"[^a-zA-Z]Path\\.",
			"compare",
			"^\\s*lookup\\(",
			"renderer",
			"attrs:",
			"attrs",
			"console.log..attrs:",
			"^\\s*console.log..attrs:",
			"log..attrs:",
			"^\\s*//\\s*",
			"log..path:",
			"colors:",
			"flat\\.",
			"log..flat",
			"pad🕈",
			"'\\.'",
			"toString",
			"flat",
			"flqt",
			"flat 0",
			"        \n",
			"}\n",
			"\\.map\\(",
			"  if(value.tagName == 'key' && i > 0 )  { prev = p; return p.up(2); }\n               if(value.tagName == 'string')  { prev = p; return p.left(1); }",
			"log..path:",
			"log..paths:",
			"log..patns:",
			"//  ",
			"Map\\.create\\(",
			"\\.create\\(",
			"\\.create\\8",
			"EagleNodeMap\\(",
			"EagleNodeMap\\/",
			"EagleNodeMap",
			"Ctor",
			"EagleNodeMap",
			" {};",
			"lookup",
			"xml",
			"apply\\(",
			"filterOutKeys",
			"            \n",
			"const add =",
			"add =",
			"addd =",
			"paths:",
			"ctor",
			"ftor",
			"shuffle = ",
			"randInt",
			"Kolo",
			"walk",
			"toXML",
			"DOCTYPE",
			"new Alea",
			"plist",
			"\\.\\.\\.args",
			"RGBA",
			"random",
			"rand",
			"random",
			"colormap",
			" ${",
			"34m",
			"34",
			"34m",
			" \\",
			"CHILDREN_GLYPH",
			"CHILDREN_SPACE",
			"CHILDREN_GLYPH",
			"CHILDREN_GYLPH",
			"CHILDREN_SYM",
			"CHILDREN_STR",
			"Util.entries =",
			"entries =",
			"CMCON",
			"eeprom_",
			"eeprom_write",
			"EEDAT",
			"EEDATA",
			"EEDATAbis",
			"EE",
			"EEDA",
			"EEDAT",
			"EEDATA",
			"EECON",
			"CFG",
			"CFGS",
			"\\.C",
			"EE",
			"EECON",
			"CFGS",
			"EEDAT",
			"CFGS",
			"DATL",
			"EEADRL",
			"_NVMREG_EEPROM_READ",
			"_EEREG_EEPROM_READ",
			"eeprom",
			"INTERRUPT",
			"TRISBbi",
			"line.*ringtone.c",
			"TRISAbi",
			"14k50",
			"line 17",
			"TRISA1",
			"bits ",
			"nRBPU",
			" left\\(",
			");\n",
			" splice",
			"inspect",
			"toLAB",
			"toLAB ="
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"//",
			"ee_",
			"ee_write",
			"EEPROM",
			" Util.curry(",
			"",
			"XPath.parse",
			"w.",
			"makePredicate",
			"EagleNodeMap.create",
			"EagleNodeList.create",
			"\\\\u200a",
			""
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 659,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"color_scheme": "Packages/User/SchemeEditorTemp/Next Bold.tmTheme",
							"current_file": "/home/roman/Dokumente/Sources/plot-cv/lib/eagle/element.js",
							"outline_rename_mode": false,
							"symkeys":
							[
								[
									424,
									436
								],
								[
									505,
									525
								],
								[
									614,
									617
								],
								[
									1054,
									1060
								],
								[
									1309,
									1320
								],
								[
									2051,
									2060
								],
								[
									2542,
									2546
								],
								[
									2578,
									2582
								],
								[
									2611,
									2615
								],
								[
									2685,
									2689
								],
								[
									2721,
									2725
								],
								[
									2749,
									2753
								],
								[
									2885,
									2893
								],
								[
									3144,
									3148
								],
								[
									3170,
									3177
								],
								[
									3315,
									3324
								],
								[
									4037,
									4042
								],
								[
									4376,
									4389
								],
								[
									4783,
									4796
								],
								[
									5210,
									5223
								],
								[
									5824,
									5834
								],
								[
									5963,
									5973
								],
								[
									6573,
									6578
								],
								[
									7420,
									7425
								],
								[
									8274,
									8279
								],
								[
									8361,
									8366
								],
								[
									8459,
									8464
								],
								[
									8700,
									8704
								],
								[
									8827,
									8837
								],
								[
									8952,
									8970
								],
								[
									8985,
									9000
								],
								[
									9011,
									9022
								],
								[
									9241,
									9256
								],
								[
									9278,
									9292
								],
								[
									9312,
									9318
								],
								[
									9361,
									9372
								],
								[
									9397,
									9408
								],
								[
									9447,
									9460
								],
								[
									9480,
									9486
								],
								[
									9770,
									9783
								],
								[
									10022,
									10035
								],
								[
									10117,
									10125
								],
								[
									10315,
									10321
								],
								[
									10431,
									10443
								],
								[
									10695,
									10704
								],
								[
									10712,
									10716
								],
								[
									11177,
									11181
								],
								[
									11516,
									11520
								],
								[
									11836,
									11840
								],
								[
									12434,
									12448
								],
								[
									12813,
									12821
								],
								[
									12908,
									12931
								],
								[
									12932,
									12936
								],
								[
									13047,
									13054
								],
								[
									13164,
									13171
								],
								[
									13351,
									13358
								],
								[
									13504,
									13514
								],
								[
									13716,
									13728
								],
								[
									14062,
									14067
								],
								[
									14111,
									14116
								],
								[
									14175,
									14190
								],
								[
									14262,
									14266
								],
								[
									14345,
									14351
								],
								[
									14432,
									14439
								],
								[
									14522,
									14530
								],
								[
									14898,
									14906
								],
								[
									14967,
									14975
								],
								[
									15253,
									15260
								],
								[
									15366,
									15374
								],
								[
									15486,
									15492
								],
								[
									15556,
									15568
								],
								[
									15614,
									15618
								],
								[
									15680,
									15692
								],
								[
									15738,
									15750
								],
								[
									15893,
									15908
								],
								[
									15966,
									15969
								],
								[
									16273,
									16312
								]
							],
							"symlist":
							[
								"EagleElement",
								"(raw, owner, ref) =>",
								"get",
								"create",
								"constructor",
								"EagleNode",
								"v =>",
								"v =>",
								"v =>",
								"v =>",
								"v =>",
								"v =>",
								"value =>",
								"v =>",
								"name =>",
								"fn",
								"() =>",
								"fn",
								"fn",
								"fn",
								"fn",
								"fn",
								"() =>",
								"() =>",
								"() =>",
								"() =>",
								"() =>",
								"text",
								"attributes",
								"Attributes",
								"EagleAttributes",
								"constructor",
								"EagleAttributes",
								"entries: ()",
								"key =>",
								"keys: ()",
								"has: key",
								"values: ()",
								"key =>",
								"(acc, key) =>",
								"(acc, key) =>",
								"getLayer",
								"lookup",
								"(o, p, v) =>",
								"getBounds",
								"e =>",
								"v =>",
								"e =>",
								"e =>",
								"transformation",
								"geometry",
								"makeGetterSetter",
								"v =>",
								"prop =>",
								"prop =>",
								"prop =>",
								"isRelation",
								"elementChain",
								"chain",
								"names",
								"(acc, entry) =>",
								"keys",
								"values",
								"entries",
								"toObject",
								"child =>",
								"child =>",
								"toArray",
								"toString",
								"getAll",
								"(v, l, p) =>",
								"find",
								"(v, l, p) =>",
								"setAttribute",
								"removeAttribute",
								"pos",
								"makeEagleElement"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				}
			]
		},
		{
			"selected": 6,
			"sheets":
			[
				{
					"buffer": 1,
					"file": "lib/util.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 83771,
						"regions":
						{
						},
						"selection":
						[
							[
								550,
								550
							]
						],
						"settings":
						{
							"syntax": "Packages/Babel/JavaScript (Babel).sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "lib/eagle/common.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11273,
						"regions":
						{
						},
						"selection":
						[
							[
								6986,
								6986
							]
						],
						"settings":
						{
							"syntax": "Packages/Babel/JavaScript (Babel).sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3513.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "lib/xml/xpath.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10125,
						"regions":
						{
						},
						"selection":
						[
							[
								985,
								985
							]
						],
						"settings":
						{
							"syntax": "Packages/Babel/JavaScript (Babel).sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/home/roman/.config/sublime-text-3/Packages/User/SchemeEditorTemp/Next Bold.tmTheme",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 53611,
						"regions":
						{
						},
						"selection":
						[
							[
								705,
								705
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/home/roman/Sources/plot-cv/lib/eagle/schematicRenderer.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7769,
						"regions":
						{
						},
						"selection":
						[
							[
								4838,
								4838
							]
						],
						"settings":
						{
							"syntax": "Packages/Babel/JavaScript (Babel).sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3796.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/home/roman/Sources/plot-cv/lib/eagle/document.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5762,
						"regions":
						{
						},
						"selection":
						[
							[
								4319,
								4319
							]
						],
						"settings":
						{
							"syntax": "Packages/Babel/JavaScript (Babel).sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1790.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "lib/eagle/element.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16348,
						"regions":
						{
						},
						"selection":
						[
							[
								9922,
								9922
							]
						],
						"settings":
						{
							"syntax": "Packages/Babel/JavaScript (Babel).sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3779.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "lib/eagle/svgRenderer.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12970,
						"regions":
						{
						},
						"selection":
						[
							[
								11385,
								11385
							]
						],
						"settings":
						{
							"syntax": "Packages/Babel/JavaScript (Babel).sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6073.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "lib/json/path.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15649,
						"regions":
						{
						},
						"selection":
						[
							[
								9652,
								9652
							]
						],
						"settings":
						{
							"syntax": "Packages/Babel/JavaScript (Babel).sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5036.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 10,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1491,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										666,
										673
									],
									[
										861,
										868
									],
									[
										1148,
										1155
									],
									[
										1344,
										1351
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								1154,
								1154
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 3,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 234.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "/home/roman/Sources/plot-cv/lib/eagle/common.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11271,
						"regions":
						{
						},
						"selection":
						[
							[
								8620,
								8620
							]
						],
						"settings":
						{
							"syntax": "Packages/Babel/JavaScript (Babel).sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4466.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "lib/eagle/renderer.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6606,
						"regions":
						{
						},
						"selection":
						[
							[
								851,
								851
							]
						],
						"settings":
						{
							"syntax": "Packages/Babel/JavaScript (Babel).sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "lib/eagle/boardRenderer.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8372,
						"regions":
						{
						},
						"selection":
						[
							[
								926,
								926
							]
						],
						"settings":
						{
							"syntax": "Packages/Babel/JavaScript (Babel).sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "test-renderer.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1294,
						"regions":
						{
						},
						"selection":
						[
							[
								537,
								537
							]
						],
						"settings":
						{
							"syntax": "Packages/Babel/JavaScript (Babel).sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "main.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20799,
						"regions":
						{
						},
						"selection":
						[
							[
								7176,
								7176
							]
						],
						"settings":
						{
							"syntax": "Packages/Babel/JavaScript (Babel).sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5670.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "lib/eagle/node.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9156,
						"regions":
						{
						},
						"selection":
						[
							[
								2415,
								2415
							]
						],
						"settings":
						{
							"syntax": "Packages/Babel/JavaScript (Babel).sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 41.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.8,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "plot-cv.sublime-project",
	"replace":
	{
		"height": 74.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"xpath",
				"lib/xml/xpath.js"
			],
			[
				"path.",
				"lib/json/path.js"
			],
			[
				"test-render",
				"test-renderer.js"
			],
			[
				"render",
				"lib/eagle/renderer.js"
			],
			[
				"main.j",
				"main.js"
			],
			[
				"ele",
				"lib/eagle/element.js"
			],
			[
				"path.j",
				"lib/json/path.js"
			],
			[
				"common",
				"lib/eagle/common.js"
			],
			[
				"main",
				"main.js"
			],
			[
				"node",
				"lib/eagle/node.js"
			],
			[
				"util",
				"lib/json/util.js"
			],
			[
				"util.j",
				"lib/util.js"
			],
			[
				"test-xml",
				"test-xml.js"
			],
			[
				"colormap",
				"lib/draw/colorMap.js"
			],
			[
				"test-xm",
				"test-xml.js"
			],
			[
				"path.js",
				"lib/json/path.js"
			],
			[
				"nodeMap",
				"lib/eagle/nodeMap.js"
			],
			[
				"deep",
				"lib/deep.js"
			],
			[
				"nodema",
				"lib/eagle/nodeMap.js"
			],
			[
				"comm",
				"lib/eagle/common.js"
			],
			[
				"path",
				"lib/json/path.js"
			],
			[
				"docu",
				"lib/eagle/document.js"
			],
			[
				"test-eagle",
				"test-eagle.js"
			],
			[
				"ref",
				"lib/eagle/ref.js"
			],
			[
				"xpah",
				"lib/xml/xpath.js"
			],
			[
				"test-eag",
				"test-eagle.js"
			],
			[
				"Util.js",
				"lib/util.js"
			],
			[
				"util.",
				"lib/util.js"
			],
			[
				"Util",
				"lib/util.js"
			],
			[
				"test-ko",
				"test-kolorwheel.js"
			],
			[
				"kolo",
				"lib/KolorWheel.js"
			],
			[
				"Next.js",
				"Next.json"
			],
			[
				"next.xml",
				"Next.xml"
			],
			[
				"rgba",
				"lib/color/rgba.js"
			],
			[
				"util.js",
				"lib/util.js"
			],
			[
				"index.",
				"index.html"
			],
			[
				"rington",
				"~/Dokumente/Sources/pictest/ringtone.c"
			],
			[
				"eeprom",
				"~/Dokumente/Sources/pictest/lib/eeprom.c"
			],
			[
				"eeprom.h",
				"~/Dokumente/Sources/pictest/lib/eeprom.h"
			],
			[
				"pic18f",
				"/opt/microchip/xc8/v1.45/include/pic18f14k50.h"
			],
			[
				"eep",
				"~/Dokumente/Sources/pictest/lib/eeprom.c"
			],
			[
				"device",
				"~/Dokumente/Sources/pictest/lib/device.h"
			],
			[
				"ring",
				"~/Dokumente/Sources/pictest/ringtone.c"
			],
			[
				"ledsen",
				"~/Dokumente/Sources/pictest/lib/extra/ledsense.c"
			],
			[
				"svg",
				"lib/eagle/svgRenderer.js"
			],
			[
				"test-poin",
				"test-pointlist.js"
			],
			[
				"test-mem",
				"test-membrane.js"
			],
			[
				"test-matr",
				"test-matrix.js"
			],
			[
				"iterator",
				"lib/iterator.js"
			],
			[
				"test-pointl",
				"test-pointlist.js"
			],
			[
				"test-mo",
				"test-moon.js"
			],
			[
				"test-ea",
				"test-eagle.js"
			],
			[
				"iterat",
				"lib/iterator.js"
			],
			[
				"Hoer",
				"HoerMalWerDaHaemmert.html"
			],
			[
				"tosou",
				"lib/tosource.js"
			],
			[
				"tosour",
				"lib/tosource.js"
			],
			[
				"test-x",
				"test-xml.js"
			],
			[
				"xml.j",
				"lib/xml.js"
			],
			[
				"test-",
				"test-cli.js"
			],
			[
				"preact",
				"lib/dom/preactComponent.js"
			],
			[
				"svgRE",
				"lib/eagle/svgRenderer.js"
			],
			[
				"elemen",
				"lib/eagle/element.js"
			],
			[
				"mai",
				"main.js"
			],
			[
				"itera",
				"lib/iterator.js"
			],
			[
				"server",
				"server.js"
			],
			[
				"svgRe",
				"lib/eagle/svgRenderer.js"
			],
			[
				"preactCom",
				"lib/dom/preactComponent.js"
			],
			[
				"element.",
				"lib/eagle/element.js"
			],
			[
				"document",
				"lib/eagle/document.js"
			],
			[
				"point.",
				"lib/geom/point.js"
			],
			[
				"line",
				"lib/geom/line.js"
			],
			[
				"eleme",
				"lib/eagle/element.js"
			],
			[
				"rect.",
				"lib/geom/rect.js"
			],
			[
				"line.",
				"lib/geom/line.js"
			],
			[
				"point.j",
				"lib/geom/point.js"
			],
			[
				"autoS",
				"lib/autoStore.js"
			],
			[
				"cross",
				"lib/crosstab.js"
			],
			[
				"autoSt",
				"lib/autoStore.js"
			],
			[
				"element",
				"lib/eagle/element.js"
			],
			[
				"style.cs",
				"style.css"
			],
			[
				"c",
				"components.js"
			],
			[
				"copon",
				"components.js"
			],
			[
				"keysim",
				"lib/dom/keysim.js"
			],
			[
				"svg.j",
				"lib/dom/svg.js"
			],
			[
				"dom.js",
				"lib/dom.js"
			],
			[
				"style",
				"style.css"
			],
			[
				"compon",
				"components.js"
			],
			[
				"main.js",
				"main.js"
			],
			[
				"rect.j",
				"lib/geom/rect.js"
			],
			[
				"reactCom",
				"lib/dom/reactComponent.js"
			],
			[
				"rect.js",
				"lib/geom/rect.js"
			],
			[
				"compo",
				"components.js"
			],
			[
				"comp",
				"components.js"
			],
			[
				"schema",
				"lib/eagle/schematicRenderer.js"
			],
			[
				"renderer",
				"lib/eagle/renderer.js"
			],
			[
				"project",
				"lib/eagle/project.js"
			],
			[
				"main.",
				"main.js"
			],
			[
				"ref.",
				"lib/eagle/ref.js"
			],
			[
				"eagle.js",
				"lib/eagle.js"
			],
			[
				"line.j",
				"lib/geom/line.js"
			],
			[
				"point",
				"lib/geom/point.js"
			],
			[
				"pointLis",
				"lib/geom/pointList.js"
			],
			[
				"lineLi",
				"lib/geom/lineList.js"
			],
			[
				"bbox",
				"lib/geom/bbox.js"
			],
			[
				"dom.",
				"lib/dom.js"
			],
			[
				"inde.",
				"index.html"
			],
			[
				"hsla",
				"lib/dom/hsla.js"
			],
			[
				"nodeList",
				"lib/eagle/nodeList.js"
			],
			[
				"obser",
				"lib/proxy/observableMembrane.js"
			],
			[
				"json.j",
				"lib/json.js"
			],
			[
				"index.html",
				"index.html"
			],
			[
				"node.j",
				"lib/eagle/node.js"
			],
			[
				"json",
				"lib/json.js"
			],
			[
				"matrix",
				"lib/geom/matrix.js"
			],
			[
				"transform",
				"lib/geom/transformation.js"
			],
			[
				"xmljs",
				"lib/xml.js"
			],
			[
				"serevr.j",
				"server.js"
			],
			[
				"board",
				"lib/eagle/boardRenderer.js"
			],
			[
				"schemt",
				"lib/eagle/schematicRenderer.js"
			],
			[
				"freq",
				"Freq-meter.c"
			],
			[
				"cap-me",
				"Cap-meter.c"
			],
			[
				"lc-me",
				"LC-meter.c"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 306.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
