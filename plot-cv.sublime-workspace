{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"RE",
				"deep.RETURN_VALUE_PATH"
			],
			[
				"CXXRec",
				"CXXRecordDecl"
			],
			[
				"CXXReco",
				"CXXRecordDecl"
			],
			[
				"des",
				"desugared"
			],
			[
				"con",
				"constructor"
			],
			[
				"jsm_start_",
				"jsm_start_interactive3"
			],
			[
				"by",
				"byobRequest"
			],
			[
				"Read",
				"ReadableStreamBYOBRequest"
			],
			[
				"js_by",
				"js_readable_byob_request"
			],
			[
				"BY",
				"BYOB_REQUEST_METHOD_RESPONDWITHNEWVIEW"
			],
			[
				"JS_",
				"JS_NewObjectProtoClass"
			],
			[
				"define",
				"defineProperty(...)"
			],
			[
				"JS_Get",
				"JS_GetPropertyUint32"
			],
			[
				"is_",
				"is_exception"
			],
			[
				"JS_T",
				"JS_ThrowInternalError"
			],
			[
				"Repe",
				"RepeaterItem"
			],
			[
				"WRITER_PROP",
				"WRITER_PROP_READY"
			],
			[
				"JS_Throw",
				"JS_ThrowInternalError"
			],
			[
				"to",
				"toStringTag"
			],
			[
				"Der",
				"DereferenceError"
			],
			[
				"Dere",
				"DereferenceError"
			],
			[
				"Is",
				"IsPunctuator"
			],
			[
				"js_magic_fun",
				"js_magic_function"
			],
			[
				"js_queue_iter",
				"js_queue_iterator_class_id"
			],
			[
				"js_queue_itreat",
				"js_queue_iterator_class_id"
			],
			[
				"js_",
				"js_archive_mode"
			],
			[
				"JS_GetP",
				"JS_GetPropertyStr"
			],
			[
				"JS_Set",
				"JS_SetPropertyUint32"
			],
			[
				"ENTRY_IS",
				"ENTRY_ISDATAENCRYPTED"
			],
			[
				"js_archivema",
				"js_archivematch_class_id"
			],
			[
				"JS_NewObjec",
				"JS_NewObjectProtoClass"
			],
			[
				"Module",
				"ModuleLoaderContext"
			],
			[
				"JS_Th",
				"JS_ThrowTypeError"
			],
			[
				"ModuleLo",
				"ModuleLoaderContext"
			],
			[
				"escape",
				"escape_noquote_tab"
			],
			[
				"max",
				"max_array_length"
			],
			[
				"tty",
				"tty_set_raw"
			],
			[
				"getOwnPrope",
				"getOwnPropertyDescriptor"
			],
			[
				"PATH_SKIP",
				"PATH_SKIP_SEPARATOR"
			],
			[
				"ListIterat",
				"ListIteratorKind"
			],
			[
				"_f",
				"_wfindnext64"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"JS_PROP_",
				"JS_PROP_CONFIGURABLE"
			],
			[
				"JS_GetPr",
				"JS_GetPropertyStr"
			],
			[
				"js_sock",
				"js_sockaddr_data"
			],
			[
				"SET_",
				"SET_CONSOLE_MODE"
			],
			[
				"ERA",
				"ERASE_IN_LINE"
			],
			[
				"js_misc_set",
				"js_misc_settextattr"
			],
			[
				"dw",
				"dwCursorPosition"
			],
			[
				"prop",
				"property_recursion_top"
			],
			[
				"property_enumer",
				"property_enumeration_index"
			],
			[
				"INT",
				"INSPECT_INT32T_INRANGE"
			],
			[
				"js_inspect_print_arra",
				"js_inspect_print_arraybuffer2"
			],
			[
				"is_a",
				"is_arraybuffer"
			],
			[
				"fmt",
				"fmt_ulong"
			],
			[
				"inspec",
				"inspect_newline2"
			],
			[
				"property_",
				"property_recursion_top"
			],
			[
				"js_inspec",
				"js_inspect_print_value"
			],
			[
				"JS_Atom",
				"JS_AtomToValue"
			],
			[
				"mysql_op",
				"mysql_optionsv"
			],
			[
				"MY",
				"MYSQLConnectParameters"
			],
			[
				"js_connect",
				"js_connectparams_class_id"
			],
			[
				"js_conn",
				"js_connectparams_from"
			],
			[
				"MYSQL",
				"MYSQLConnectParameters"
			],
			[
				"mysql_get",
				"mysql_get_socket"
			],
			[
				"async",
				"asyncclosure_resolve"
			],
			[
				"res",
				"resolving_funcs"
			],
			[
				"HAVE_LIB",
				"HAVE_LIBMARIADBCLIENT"
			],
			[
				"js_is_null",
				"js_is_null_or_undefined"
			],
			[
				"FileDesc",
				"FileDescriptorHandlers"
			],
			[
				"js_generat",
				"js_generator_prototype"
			],
			[
				"tab_",
				"tab_atom_len"
			],
			[
				"proper",
				"property_recursion_pop"
			],
			[
				"property_rec",
				"property_recursion_top"
			],
			[
				"property",
				"property_recursion_top"
			],
			[
				"RETURN",
				"deep.RETURN_VALUE_PATH"
			],
			[
				"LIBS",
				"LIBSERIALPORT_LIBRARY_DIR"
			],
			[
				"js_misc_atexit_",
				"js_misc_atexit_called"
			],
			[
				"getO",
				"getOwnPropertyNames(...)"
			],
			[
				"Res",
				"ResolveAlias"
			],
			[
				"relati",
				"relativePath"
			],
			[
				"js_syscla",
				"js_syscallerror_defines"
			],
			[
				"get",
				"getOwnPropertyDescriptor(...)"
			],
			[
				"resol",
				"resolving_funcs"
			],
			[
				"set",
				"set_handler"
			],
			[
				"Async",
				"AsyncSocketClosure"
			],
			[
				"Asy",
				"AsyncSocketClosure"
			],
			[
				"js_socket_async_",
				"js_socket_async_resolver"
			],
			[
				"js_socket_asyc",
				"js_socket_async_closure_free"
			],
			[
				"JS_EV",
				"JS_EVAL_FLAG_COMPILE_ONLY"
			],
			[
				"check_",
				"check_function_and_include"
			],
			[
				"PGCon",
				"PGConnectParameters"
			],
			[
				"PGC",
				"PGConnectParameters"
			],
			[
				"connect",
				"connectparams_parse"
			],
			[
				"Nam",
				"FieldNameFunc"
			],
			[
				"PG",
				"PGSQLResult"
			],
			[
				"js",
				"js_pgresult_class_id"
			],
			[
				"PGSQ",
				"PGSQResultIterator"
			],
			[
				"js_misc_getopa",
				"js_misc_getopaque"
			],
			[
				"js_pgrequ",
				"js_pgresult_opaque"
			],
			[
				"PGRES_PO",
				"PGRES_POLLING_READING"
			],
			[
				"PROP_PRO",
				"PROP_PROTOCOL_VERSION"
			],
			[
				"B",
				"BOOL"
			],
			[
				"Asyn",
				"AsyncIterator"
			],
			[
				"ret",
				"return_flag"
			],
			[
				"ImportID",
				"ImportIdMap"
			],
			[
				"Num",
				"NumericRange"
			],
			[
				"dbuf_",
				"dbuf_init2"
			],
			[
				"getOwn",
				"getOwnPropertyNames(...)"
			],
			[
				"has_",
				"has_dot_or_slash"
			],
			[
				"My",
				"MySQLResult"
			],
			[
				"JS_ToCS",
				"JS_ToCStringLen"
			],
			[
				"CF",
				"CFunctionClosureRecord"
			],
			[
				"extendA",
				"extendAsyncGenerator"
			],
			[
				"JS_SetPr",
				"JS_SetPropertyStr"
			],
			[
				"MYSQL_TYPE_NEW",
				"MYSQL_TYPE_NEWDECIMAL"
			],
			[
				"JS_CF",
				"JS_CFUNC_MAGIC_DEF"
			],
			[
				"js_mysqlresult_fun",
				"js_mysqlresult_functions"
			],
			[
				"JS_ToCSt",
				"JS_ToCStringLen"
			],
			[
				"js_mysql_f",
				"js_mysql_functions"
			],
			[
				"MARIA",
				"MARIADBCLIENT_LIBRARY"
			],
			[
				"depe",
				"dependencyMap"
			],
			[
				"depden",
				"dependencyTree"
			],
			[
				"add_",
				"add_dependencies"
			],
			[
				"ch",
				"chunks_written"
			],
			[
				"defineP",
				"defineProperties(...)"
			],
			[
				"CMAKE_CURR",
				"CMAKE_CURRENT_BINARY_DIR"
			],
			[
				"gener",
				"generate_module_header"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "  d =>\n  d =>\n  traceProxy = (obj, handler) =>\nfunction(name, args)\n  get(target, key, receiver)\n  member = function()\nConcatIterator = iterator =>\ngen =>\n(...args) =>\n  toString()\nImportModule(modulePath, ...args)\n  module =>\n(acc, item) =>\nCommandLine()\n(...args) =>\n(...args) =>\n(module, ...args) =>\n  m =>\n  .show = value =>\n  .printNode = arg =>\n() =>\n(item, i, a) =>\n  entry =>\n  entry =>\nIncludeAll(dir, maxDepth = Infinity, pred = entry => /\\.[ch]$/.\n(entry))\nSelectLocations(node)\nn =>\n  prop =>\nLocationString(loc)\n  node =>\nStructs(nodes)\n  node =>\n  field =>\n  node =>\n(field, i) =>\nTable(list, pred = (n, l) => true)\n(n, i) =>\n  e =>\n  k =>\n([i, l, n]) =>\n  returnType(n)\n  numArgs(n)\nParams(n)\n  p =>\n  k =>\n([i, l, n]) =>\n(k, j) =>\n(acc, name) =>\n  padTrunc(len, pad = ' ')\ns =>\n(name, i) =>\n  pad = (cols, pad, sep) =>\n(key, i) =>\n(s, col) =>\n(acc, n) =>\n(acc, row) =>\nPrintRange(range, file)\nOverlapRange(r1, r2)\nGetRange = r =>\nInRange = (i, r) =>\nParentNode(node, ast = $.data)\nNextSibling(node, ast = $.data)\nPreviousSibling(node, ast = $.data)\nFirstChild(node, ast = $.data)\nLastChild(node, ast = $.data)\nTerminate(exitCode)\nParseStructs(text)\n(decl, includes)\n  name =>\nInspectStruct(decl, includes, compiler = 'clang')\n  line =>\n  line =>\n(col, i) =>\n([field, offset, size]) =>\n(acc, line) =>\n  toString(sep = ' ')\n  line =>\nRoundTo(value, align)\nMakeStructClass(decl, filename)\nGenerateStructClass(decl, ffiPrefix = '')\n  line =>\n([field, member]) =>\nGenerateGetSet(name, offset, type, ffiPrefix)\n  toHex = v =>\n  toHex = v =>\nByteLength2TypedArray(byteLength, signed, floating)\nByteLength2Value(byteLength, signed, floating)\nFFI_Function\n  constructor(node, prefix = '')\n([name, type], idx) =>\n  generateDefine(fp, lib)\n(name, lib) =>\n  colorText = x =>\n  generateDoc()\n  push = (...args) =>\n  field =>\n(field, col) =>\n  js = type =>\n  generateCall()\n([name, type]) =>\n  generate(fp, lib, exp)\n  generateFunction(fp, lib)\n([name, type]) =>\n  p =>\n  p =>\n  compileFunction(fp, lib)\nFdReader(fd, bufferSize = 1024)\n(push, stop) =>\nCommandRead(args)\n  reader =>\nReadOutput(fd)\nLibraryExports(file)\n  line =>\n  line =>\n  column =>\n(a, b) =>\n  entry =>\nSaveLibraries()\n(acc, [n, e]) =>\nProcessFile(file, debug = true)\nParseECMAScript(file, params = {})\n(fr, i) =>\nPrintECMAScript(ast, comments, printer = \n({ indent: 4 }, comments))\nPrintCArray(strings)\nNamespaces(nodePath, ast = $.data)\n  p =>\n  n =>\nConstants(node, t = (name, value) => [name, !isNaN(+value) ? +value : value])\nGetImports(ast = $.data)\nn =>\nGetIdentifiers(nodes, key = null)\n(n, k) =>\nMemberNames(members, flags = 0)\nn =>\n  path =>\n  p =>\n  p =>\n  name =>\nn =>\n([node, ptr]) =>\n  path =>\n  p =>\n  name =>\n  name =>\nUnsetLoc(node, pred = (v, p) => true)\n(v, k) =>\nMakeFFI(node, lib, exp, fp)\n()\nMakeId(name)\nMakeQuickJSClass(node, ast = $)\n  n =>\n  n =>\n  n =>\n  n =>\nASTShell(...args)\n(a, p) =>\n(a, p) =>\n(a, p) =>\n  get flags()\n  v =>\n  v =>\n  d =>\n  l =>\nCompile(file, ...args)\n  select(name_or_id, pred = n => true)\n  getByIdOrName(name_or_id, pred = n => true)\n  getType(name_or_id)\nn =>\n  getNamespace(name, root = this.data)\nn =>\n  namespaceOf(node)\n  toString()\n  getClass(name_or_id)\n  getFunction(name_or_id)\nn =>\n  getVariable(name_or_id)\nn =>\n  getLoc(node)\n() =>\n  pathOf(needle, maxDepth = 10)\nn =>\nPointer.prototype.chain = function(step, limit = Infinity)\n  .F = arg =>\n  .T = arg =>\n() =>\nnode =>\n  s =>\nfr =>",
			"settings":
			{
				"buffer_size": 3415,
				"line_ending": "Unix",
				"name": "𝌆 Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					1462,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/ast-shell.js",
						"symkeys":
						[
							[
								1970,
								1974
							],
							[
								2033,
								2037
							],
							[
								2073,
								2103
							],
							[
								2146,
								2167
							],
							[
								2316,
								2342
							],
							[
								2500,
								2519
							],
							[
								2848,
								2876
							],
							[
								3166,
								3174
							],
							[
								3175,
								3189
							],
							[
								3271,
								3281
							],
							[
								3344,
								3392
							],
							[
								3506,
								3515
							],
							[
								3625,
								3647
							],
							[
								4109,
								4131
							],
							[
								4495,
								4513
							],
							[
								4613,
								4631
							],
							[
								4737,
								4763
							],
							[
								4899,
								4903
							],
							[
								4982,
								4998
							],
							[
								5484,
								5503
							],
							[
								6002,
								6007
							],
							[
								6082,
								6097
							],
							[
								6182,
								6190
							],
							[
								6231,
								6239
							],
							[
								6611,
								6684
							],
							[
								6688,
								6696
							],
							[
								6793,
								6823
							],
							[
								6852,
								6857
							],
							[
								6890,
								6897
							],
							[
								6926,
								6954
							],
							[
								7291,
								7298
							],
							[
								7317,
								7340
							],
							[
								7370,
								7377
							],
							[
								7408,
								7416
							],
							[
								7454,
								7461
							],
							[
								7661,
								7674
							],
							[
								7855,
								7898
							],
							[
								7931,
								7940
							],
							[
								8001,
								8005
							],
							[
								8107,
								8111
							],
							[
								8147,
								8161
							],
							[
								8273,
								8301
							],
							[
								8506,
								8531
							],
							[
								8629,
								8653
							],
							[
								8726,
								8730
							],
							[
								8849,
								8853
							],
							[
								8917,
								8931
							],
							[
								8987,
								8996
							],
							[
								9294,
								9308
							],
							[
								9431,
								9466
							],
							[
								9555,
								9560
							],
							[
								9683,
								9695
							],
							[
								9748,
								9773
							],
							[
								9822,
								9833
							],
							[
								9873,
								9884
							],
							[
								10022,
								10033
							],
							[
								10121,
								10134
							],
							[
								10215,
								10247
							],
							[
								10485,
								10514
							],
							[
								10525,
								10540
							],
							[
								10602,
								10621
							],
							[
								10829,
								10868
							],
							[
								10933,
								10973
							],
							[
								11056,
								11100
							],
							[
								11182,
								11221
							],
							[
								11283,
								11321
							],
							[
								11407,
								11435
							],
							[
								11498,
								11525
							],
							[
								12076,
								12102
							],
							[
								12369,
								12376
							],
							[
								14292,
								14350
							],
							[
								15386,
								15393
							],
							[
								15457,
								15464
							],
							[
								15474,
								15485
							],
							[
								15526,
								15552
							],
							[
								15668,
								15682
							],
							[
								15979,
								15998
							],
							[
								16025,
								16032
							],
							[
								16121,
								16151
							],
							[
								16217,
								16257
							],
							[
								16433,
								16484
							],
							[
								17473,
								17480
							],
							[
								17887,
								17907
							],
							[
								18083,
								18137
							],
							[
								18326,
								18338
							],
							[
								18366,
								18378
							],
							[
								18995,
								19055
							],
							[
								19666,
								19721
							],
							[
								19817,
								19829
							],
							[
								19834,
								19864
							],
							[
								20145,
								20167
							],
							[
								20213,
								20236
							],
							[
								20308,
								20323
							],
							[
								20458,
								20474
							],
							[
								20878,
								20891
							],
							[
								21016,
								21035
							],
							[
								21087,
								21095
							],
							[
								21152,
								21167
							],
							[
								21327,
								21339
							],
							[
								21684,
								21698
							],
							[
								21798,
								21815
							],
							[
								22042,
								22064
							],
							[
								22181,
								22206
							],
							[
								22306,
								22323
							],
							[
								22378,
								22382
							],
							[
								22470,
								22474
							],
							[
								22526,
								22550
							],
							[
								22666,
								22706
							],
							[
								22767,
								22788
							],
							[
								23072,
								23104
							],
							[
								23589,
								23604
							],
							[
								23715,
								23740
							],
							[
								23909,
								23944
							],
							[
								24164,
								24171
							],
							[
								24260,
								24267
							],
							[
								24296,
								24305
							],
							[
								24342,
								24351
							],
							[
								24401,
								24409
							],
							[
								24451,
								24475
							],
							[
								24571,
								24587
							],
							[
								24623,
								24663
							],
							[
								24961,
								25004
							],
							[
								25947,
								25958
							],
							[
								26703,
								26753
							],
							[
								26775,
								26801
							],
							[
								26836,
								26865
							],
							[
								27209,
								27252
							],
							[
								27365,
								27369
							],
							[
								27385,
								27389
							],
							[
								27434,
								27521
							],
							[
								27688,
								27721
							],
							[
								27780,
								27785
							],
							[
								27855,
								27897
							],
							[
								27973,
								27983
							],
							[
								28102,
								28142
							],
							[
								28283,
								28288
							],
							[
								28346,
								28353
							],
							[
								28470,
								28474
							],
							[
								28553,
								28557
							],
							[
								28711,
								28718
							],
							[
								28805,
								28810
							],
							[
								28918,
								28934
							],
							[
								29045,
								29052
							],
							[
								29131,
								29135
							],
							[
								29196,
								29203
							],
							[
								29279,
								29286
							],
							[
								29343,
								29389
							],
							[
								29429,
								29439
							],
							[
								29592,
								29628
							],
							[
								29669,
								29681
							],
							[
								31324,
								31345
							],
							[
								31544,
								31584
							],
							[
								31739,
								31743
							],
							[
								31855,
								31859
							],
							[
								31928,
								31932
							],
							[
								32000,
								32004
							],
							[
								36643,
								36675
							],
							[
								37162,
								37172
							],
							[
								37222,
								37232
							],
							[
								37280,
								37290
							],
							[
								37868,
								37879
							],
							[
								37973,
								37977
							],
							[
								38004,
								38008
							],
							[
								38032,
								38036
							],
							[
								38060,
								38064
							],
							[
								38093,
								38130
							],
							[
								38569,
								38605
							],
							[
								38694,
								38737
							],
							[
								39024,
								39043
							],
							[
								39097,
								39102
							],
							[
								39369,
								39405
							],
							[
								39644,
								39649
							],
							[
								40409,
								40426
							],
							[
								40779,
								40789
							],
							[
								40885,
								40905
							],
							[
								40971,
								40994
							],
							[
								41082,
								41087
							],
							[
								41199,
								41222
							],
							[
								41310,
								41315
							],
							[
								41417,
								41429
							],
							[
								41544,
								41549
							],
							[
								41605,
								41634
							],
							[
								41813,
								41818
							],
							[
								42789,
								42847
							],
							[
								43811,
								43822
							],
							[
								43855,
								43866
							],
							[
								43915,
								43921
							],
							[
								43974,
								43982
							],
							[
								44280,
								44284
							],
							[
								44976,
								44982
							]
						],
						"symlist":
						[
							"d =>",
							"d =>",
							"traceProxy = (obj, handler) =>",
							" function(name, args)",
							"get(target, key, receiver)",
							"member = function()",
							"ConcatIterator = iterator =>",
							" gen =>",
							" (...args) =>",
							"toString()",
							"async function ImportModule(modulePath, ...args)",
							"module =>",
							" (acc, item) =>",
							"function CommandLine()",
							" (...args) =>",
							" (...args) =>",
							" (module, ...args) =>",
							"m =>",
							".show = value =>",
							".printNode = arg =>",
							"() =>",
							"(item, i, a) =>",
							"entry =>",
							"entry =>",
							"function* IncludeAll(dir, maxDepth = Infinity, pred = entry => /\\.[ch]$/.",
							"(entry))",
							"function SelectLocations(node)",
							" n =>",
							"prop =>",
							"function LocationString(loc)",
							"node =>",
							"function Structs(nodes)",
							"node =>",
							"field =>",
							"node =>",
							"(field, i) =>",
							"function Table(list, pred = (n, l) => true)",
							"(n, i) =>",
							"e =>",
							"k =>",
							"([i, l, n]) =>",
							" function returnType(n)",
							" function numArgs(n)",
							" function Params(n)",
							"p =>",
							"k =>",
							"([i, l, n]) =>",
							"(k, j) =>",
							"(acc, name) =>",
							" function padTrunc(len, pad = ' ')",
							" s =>",
							"(name, i) =>",
							"pad = (cols, pad, sep) =>",
							"(key, i) =>",
							"(s, col) =>",
							"(acc, n) =>",
							"(acc, row) =>",
							"function PrintRange(range, file)",
							"function OverlapRange(r1, r2)",
							"GetRange = r =>",
							"InRange = (i, r) =>",
							"function ParentNode(node, ast = $.data)",
							"function NextSibling(node, ast = $.data)",
							"function PreviousSibling(node, ast = $.data)",
							"function FirstChild(node, ast = $.data)",
							"function LastChild(node, ast = $.data)",
							"function Terminate(exitCode)",
							"function ParseStructs(text)",
							"function* (decl, includes)",
							"name =>",
							"function InspectStruct(decl, includes, compiler = 'clang')",
							"line =>",
							"line =>",
							"(col, i) =>",
							"([field, offset, size]) =>",
							"(acc, line) =>",
							"toString(sep = ' ')",
							"line =>",
							"function RoundTo(value, align)",
							"function MakeStructClass(decl, filename)",
							"function* GenerateStructClass(decl, ffiPrefix = '')",
							"line =>",
							"([field, member]) =>",
							"function GenerateGetSet(name, offset, type, ffiPrefix)",
							"toHex = v =>",
							"toHex = v =>",
							"function ByteLength2TypedArray(byteLength, signed, floating)",
							"function ByteLength2Value(byteLength, signed, floating)",
							"FFI_Function",
							"constructor(node, prefix = '')",
							"([name, type], idx) =>",
							"generateDefine(fp, lib)",
							" (name, lib) =>",
							"colorText = x =>",
							"generateDoc()",
							"push = (...args) =>",
							"field =>",
							"(field, col) =>",
							"js = type =>",
							"generateCall()",
							"([name, type]) =>",
							"generate(fp, lib, exp)",
							"generateFunction(fp, lib)",
							"([name, type]) =>",
							"p =>",
							"p =>",
							"compileFunction(fp, lib)",
							"function FdReader(fd, bufferSize = 1024)",
							"async (push, stop) =>",
							"async function CommandRead(args)",
							"async reader =>",
							" function ReadOutput(fd)",
							"async function LibraryExports(file)",
							"line =>",
							"line =>",
							"column =>",
							"(a, b) =>",
							"entry =>",
							"function SaveLibraries()",
							"(acc, [n, e]) =>",
							"function ProcessFile(file, debug = true)",
							"function ParseECMAScript(file, params = {})",
							" (fr, i) =>",
							"function PrintECMAScript(ast, comments, printer = ",
							"({ indent: 4 }, comments))",
							"function PrintCArray(strings)",
							"function Namespaces(nodePath, ast = $.data)",
							"p =>",
							"n =>",
							"function* Constants(node, t = (name, value) => [name, !isNaN(+value) ? +value : value])",
							"function GetImports(ast = $.data)",
							" n =>",
							"function GetIdentifiers(nodes, key = null)",
							" (n, k) =>",
							"function MemberNames(members, flags = 0)",
							" n =>",
							"path =>",
							"p =>",
							"p =>",
							"name =>",
							" n =>",
							"([node, ptr]) =>",
							"path =>",
							"p =>",
							"name =>",
							"name =>",
							"function UnsetLoc(node, pred = (v, p) => true)",
							" (v, k) =>",
							"function MakeFFI(node, lib, exp, fp)",
							"function* ()",
							"function MakeId(name)",
							"function MakeQuickJSClass(node, ast = $)",
							"n =>",
							"n =>",
							"n =>",
							"n =>",
							"async function ASTShell(...args)",
							" (a, p) =>",
							" (a, p) =>",
							" (a, p) =>",
							"get flags()",
							"v =>",
							"v =>",
							"d =>",
							"l =>",
							"async function Compile(file, ...args)",
							"select(name_or_id, pred = n => true)",
							"getByIdOrName(name_or_id, pred = n => true)",
							"getType(name_or_id)",
							" n =>",
							"getNamespace(name, root = this.data)",
							" n =>",
							"namespaceOf(node)",
							"toString()",
							"getClass(name_or_id)",
							"getFunction(name_or_id)",
							" n =>",
							"getVariable(name_or_id)",
							" n =>",
							"getLoc(node)",
							"() =>",
							"pathOf(needle, maxDepth = 10)",
							" n =>",
							"Pointer.prototype.chain = function(step, limit = Infinity)",
							".F = arg =>",
							".T = arg =>",
							" () =>",
							" node =>",
							"s =>",
							" fr =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABXDQAAICBkID0+CiAgZCA9PgogIHRyYWNlUHJveHkgPSAob2JqLCBoYW5kbGVyKSA9PgpmdW5jdGlvbihuYW1lLCBhcmdzKQogIGdldCh0YXJnZXQsIGtleSwgcmVjZWl2ZXIpCiAgbWVtYmVyID0gZnVuY3Rpb24oKQpDb25jYXRJdGVyYXRvciA9IGl0ZXJhdG9yID0+CmdlbiA9PgooLi4uYXJncykgPT4KICB0b1N0cmluZygpCkltcG9ydE1vZHVsZShtb2R1bGVQYXRoLCAuLi5hcmdzKQogIG1vZHVsZSA9PgooYWNjLCBpdGVtKSA9PgpDb21tYW5kTGluZSgpCiguLi5hcmdzKSA9PgooLi4uYXJncykgPT4KKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSB2YWx1ZSA9PgogIC5wcmludE5vZGUgPSBhcmcgPT4KKCkgPT4KKGl0ZW0sIGksIGEpID0+CiAgZW50cnkgPT4KICBlbnRyeSA9PgpJbmNsdWRlQWxsKGRpciwgbWF4RGVwdGggPSBJbmZpbml0eSwgcHJlZCA9IGVudHJ5ID0+IC9cLltjaF0kLy4KKGVudHJ5KSkKU2VsZWN0TG9jYXRpb25zKG5vZGUpCm4gPT4KICBwcm9wID0+CkxvY2F0aW9uU3RyaW5nKGxvYykKICBub2RlID0+ClN0cnVjdHMobm9kZXMpCiAgbm9kZSA9PgogIGZpZWxkID0+CiAgbm9kZSA9PgooZmllbGQsIGkpID0+ClRhYmxlKGxpc3QsIHByZWQgPSAobiwgbCkgPT4gdHJ1ZSkKKG4sIGkpID0+CiAgZSA9PgogIGsgPT4KKFtpLCBsLCBuXSkgPT4KICByZXR1cm5UeXBlKG4pCiAgbnVtQXJncyhuKQpQYXJhbXMobikKICBwID0+CiAgayA9PgooW2ksIGwsIG5dKSA9PgooaywgaikgPT4KKGFjYywgbmFtZSkgPT4KICBwYWRUcnVuYyhsZW4sIHBhZCA9ICcgJykKcyA9PgoobmFtZSwgaSkgPT4KICBwYWQgPSAoY29scywgcGFkLCBzZXApID0+CihrZXksIGkpID0+CihzLCBjb2wpID0+CihhY2MsIG4pID0+CihhY2MsIHJvdykgPT4KUHJpbnRSYW5nZShyYW5nZSwgZmlsZSkKT3ZlcmxhcFJhbmdlKHIxLCByMikKR2V0UmFuZ2UgPSByID0+CkluUmFuZ2UgPSAoaSwgcikgPT4KUGFyZW50Tm9kZShub2RlLCBhc3QgPSAkLmRhdGEpCk5leHRTaWJsaW5nKG5vZGUsIGFzdCA9ICQuZGF0YSkKUHJldmlvdXNTaWJsaW5nKG5vZGUsIGFzdCA9ICQuZGF0YSkKRmlyc3RDaGlsZChub2RlLCBhc3QgPSAkLmRhdGEpCkxhc3RDaGlsZChub2RlLCBhc3QgPSAkLmRhdGEpClRlcm1pbmF0ZShleGl0Q29kZSkKUGFyc2VTdHJ1Y3RzKHRleHQpCihkZWNsLCBpbmNsdWRlcykKICBuYW1lID0+Ckluc3BlY3RTdHJ1Y3QoZGVjbCwgaW5jbHVkZXMsIGNvbXBpbGVyID0gJ2NsYW5nJykKICBsaW5lID0+CiAgbGluZSA9PgooY29sLCBpKSA9PgooW2ZpZWxkLCBvZmZzZXQsIHNpemVdKSA9PgooYWNjLCBsaW5lKSA9PgogIHRvU3RyaW5nKHNlcCA9ICcgJykKICBsaW5lID0+ClJvdW5kVG8odmFsdWUsIGFsaWduKQpNYWtlU3RydWN0Q2xhc3MoZGVjbCwgZmlsZW5hbWUpCkdlbmVyYXRlU3RydWN0Q2xhc3MoZGVjbCwgZmZpUHJlZml4ID0gJycpCiAgbGluZSA9PgooW2ZpZWxkLCBtZW1iZXJdKSA9PgpHZW5lcmF0ZUdldFNldChuYW1lLCBvZmZzZXQsIHR5cGUsIGZmaVByZWZpeCkKICB0b0hleCA9IHYgPT4KICB0b0hleCA9IHYgPT4KQnl0ZUxlbmd0aDJUeXBlZEFycmF5KGJ5dGVMZW5ndGgsIHNpZ25lZCwgZmxvYXRpbmcpCkJ5dGVMZW5ndGgyVmFsdWUoYnl0ZUxlbmd0aCwgc2lnbmVkLCBmbG9hdGluZykKRkZJX0Z1bmN0aW9uCiAgY29uc3RydWN0b3Iobm9kZSwgcHJlZml4ID0gJycpCihbbmFtZSwgdHlwZV0sIGlkeCkgPT4KICBnZW5lcmF0ZURlZmluZShmcCwgbGliKQoobmFtZSwgbGliKSA9PgogIGNvbG9yVGV4dCA9IHggPT4KICBnZW5lcmF0ZURvYygpCiAgcHVzaCA9ICguLi5hcmdzKSA9PgogIGZpZWxkID0+CihmaWVsZCwgY29sKSA9PgogIGpzID0gdHlwZSA9PgogIGdlbmVyYXRlQ2FsbCgpCihbbmFtZSwgdHlwZV0pID0+CiAgZ2VuZXJhdGUoZnAsIGxpYiwgZXhwKQogIGdlbmVyYXRlRnVuY3Rpb24oZnAsIGxpYikKKFtuYW1lLCB0eXBlXSkgPT4KICBwID0+CiAgcCA9PgogIGNvbXBpbGVGdW5jdGlvbihmcCwgbGliKQpGZFJlYWRlcihmZCwgYnVmZmVyU2l6ZSA9IDEwMjQpCihwdXNoLCBzdG9wKSA9PgpDb21tYW5kUmVhZChhcmdzKQogIHJlYWRlciA9PgpSZWFkT3V0cHV0KGZkKQpMaWJyYXJ5RXhwb3J0cyhmaWxlKQogIGxpbmUgPT4KICBsaW5lID0+CiAgY29sdW1uID0+CihhLCBiKSA9PgogIGVudHJ5ID0+ClNhdmVMaWJyYXJpZXMoKQooYWNjLCBbbiwgZV0pID0+ClByb2Nlc3NGaWxlKGZpbGUsIGRlYnVnID0gdHJ1ZSkKUGFyc2VFQ01BU2NyaXB0KGZpbGUsIHBhcmFtcyA9IHt9KQooZnIsIGkpID0+ClByaW50RUNNQVNjcmlwdChhc3QsIGNvbW1lbnRzLCBwcmludGVyID0gCih7IGluZGVudDogNCB9LCBjb21tZW50cykpClByaW50Q0FycmF5KHN0cmluZ3MpCk5hbWVzcGFjZXMobm9kZVBhdGgsIGFzdCA9ICQuZGF0YSkKICBwID0+CiAgbiA9PgpDb25zdGFudHMobm9kZSwgdCA9IChuYW1lLCB2YWx1ZSkgPT4gW25hbWUsICFpc05hTigrdmFsdWUpID8gK3ZhbHVlIDogdmFsdWVdKQpHZXRJbXBvcnRzKGFzdCA9ICQuZGF0YSkKbiA9PgpHZXRJZGVudGlmaWVycyhub2Rlcywga2V5ID0gbnVsbCkKKG4sIGspID0+Ck1lbWJlck5hbWVzKG1lbWJlcnMsIGZsYWdzID0gMCkKbiA9PgogIHBhdGggPT4KICBwID0+CiAgcCA9PgogIG5hbWUgPT4KbiA9PgooW25vZGUsIHB0cl0pID0+CiAgcGF0aCA9PgogIHAgPT4KICBuYW1lID0+CiAgbmFtZSA9PgpVbnNldExvYyhub2RlLCBwcmVkID0gKHYsIHApID0+IHRydWUpCih2LCBrKSA9PgpNYWtlRkZJKG5vZGUsIGxpYiwgZXhwLCBmcCkKKCkKTWFrZUlkKG5hbWUpCk1ha2VRdWlja0pTQ2xhc3Mobm9kZSwgYXN0ID0gJCkKICBuID0+CiAgbiA9PgogIG4gPT4KICBuID0+CkFTVFNoZWxsKC4uLmFyZ3MpCihhLCBwKSA9PgooYSwgcCkgPT4KKGEsIHApID0+CiAgZ2V0IGZsYWdzKCkKICB2ID0+CiAgdiA9PgogIGQgPT4KICBsID0+CkNvbXBpbGUoZmlsZSwgLi4uYXJncykKICBzZWxlY3QobmFtZV9vcl9pZCwgcHJlZCA9IG4gPT4gdHJ1ZSkKICBnZXRCeUlkT3JOYW1lKG5hbWVfb3JfaWQsIHByZWQgPSBuID0+IHRydWUpCiAgZ2V0VHlwZShuYW1lX29yX2lkKQpuID0+CiAgZ2V0TmFtZXNwYWNlKG5hbWUsIHJvb3QgPSB0aGlzLmRhdGEpCm4gPT4KICBuYW1lc3BhY2VPZihub2RlKQogIHRvU3RyaW5nKCkKICBnZXRDbGFzcyhuYW1lX29yX2lkKQogIGdldEZ1bmN0aW9uKG5hbWVfb3JfaWQpCm4gPT4KICBnZXRWYXJpYWJsZShuYW1lX29yX2lkKQpuID0+CiAgZ2V0TG9jKG5vZGUpCigpID0+CiAgcGF0aE9mKG5lZWRsZSwgbWF4RGVwdGggPSAxMCkKbiA9PgpQb2ludGVyLnByb3RvdHlwZS5jaGFpbiA9IGZ1bmN0aW9uKHN0ZXAsIGxpbWl0ID0gSW5maW5pdHkpCiAgLkYgPSBhcmcgPT4KICAuVCA9IGFyZyA9PgooKSA9Pgpub2RlID0+CiAgcyA9PgpmciA9PgAAAAAAAAAAVw0AAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					1463,
					4,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/ast-shell.js",
						"symkeys":
						[
							[
								1970,
								1974
							],
							[
								2033,
								2037
							],
							[
								2073,
								2103
							],
							[
								2146,
								2167
							],
							[
								2316,
								2342
							],
							[
								2500,
								2519
							],
							[
								2848,
								2876
							],
							[
								3166,
								3174
							],
							[
								3175,
								3189
							],
							[
								3271,
								3281
							],
							[
								3344,
								3392
							],
							[
								3506,
								3515
							],
							[
								3625,
								3647
							],
							[
								4109,
								4131
							],
							[
								4495,
								4513
							],
							[
								4613,
								4631
							],
							[
								4737,
								4763
							],
							[
								4899,
								4903
							],
							[
								4982,
								4998
							],
							[
								5484,
								5503
							],
							[
								6002,
								6007
							],
							[
								6082,
								6097
							],
							[
								6182,
								6190
							],
							[
								6231,
								6239
							],
							[
								6611,
								6684
							],
							[
								6688,
								6696
							],
							[
								6793,
								6823
							],
							[
								6852,
								6857
							],
							[
								6890,
								6897
							],
							[
								6926,
								6954
							],
							[
								7291,
								7298
							],
							[
								7317,
								7340
							],
							[
								7370,
								7377
							],
							[
								7408,
								7416
							],
							[
								7454,
								7461
							],
							[
								7661,
								7674
							],
							[
								7855,
								7898
							],
							[
								7931,
								7940
							],
							[
								8001,
								8005
							],
							[
								8107,
								8111
							],
							[
								8147,
								8161
							],
							[
								8273,
								8301
							],
							[
								8506,
								8531
							],
							[
								8629,
								8653
							],
							[
								8726,
								8730
							],
							[
								8849,
								8853
							],
							[
								8917,
								8931
							],
							[
								8987,
								8996
							],
							[
								9294,
								9308
							],
							[
								9431,
								9466
							],
							[
								9555,
								9560
							],
							[
								9683,
								9695
							],
							[
								9748,
								9773
							],
							[
								9822,
								9833
							],
							[
								9873,
								9884
							],
							[
								10022,
								10033
							],
							[
								10121,
								10134
							],
							[
								10215,
								10247
							],
							[
								10485,
								10514
							],
							[
								10525,
								10540
							],
							[
								10602,
								10621
							],
							[
								10829,
								10868
							],
							[
								10933,
								10973
							],
							[
								11056,
								11100
							],
							[
								11182,
								11221
							],
							[
								11283,
								11321
							],
							[
								11407,
								11435
							],
							[
								11498,
								11525
							],
							[
								12076,
								12102
							],
							[
								12369,
								12376
							],
							[
								14292,
								14350
							],
							[
								15386,
								15393
							],
							[
								15457,
								15464
							],
							[
								15474,
								15485
							],
							[
								15526,
								15552
							],
							[
								15668,
								15682
							],
							[
								15979,
								15998
							],
							[
								16025,
								16032
							],
							[
								16121,
								16151
							],
							[
								16217,
								16257
							],
							[
								16433,
								16484
							],
							[
								17473,
								17480
							],
							[
								17887,
								17907
							],
							[
								18083,
								18137
							],
							[
								18326,
								18338
							],
							[
								18366,
								18378
							],
							[
								18995,
								19055
							],
							[
								19666,
								19721
							],
							[
								19817,
								19829
							],
							[
								19834,
								19864
							],
							[
								20145,
								20167
							],
							[
								20213,
								20236
							],
							[
								20308,
								20323
							],
							[
								20458,
								20474
							],
							[
								20878,
								20891
							],
							[
								21016,
								21035
							],
							[
								21087,
								21095
							],
							[
								21152,
								21167
							],
							[
								21327,
								21339
							],
							[
								21684,
								21698
							],
							[
								21798,
								21815
							],
							[
								22042,
								22064
							],
							[
								22181,
								22206
							],
							[
								22306,
								22323
							],
							[
								22378,
								22382
							],
							[
								22470,
								22474
							],
							[
								22526,
								22550
							],
							[
								22666,
								22706
							],
							[
								22767,
								22788
							],
							[
								23072,
								23104
							],
							[
								23589,
								23604
							],
							[
								23715,
								23740
							],
							[
								23909,
								23944
							],
							[
								24164,
								24171
							],
							[
								24260,
								24267
							],
							[
								24296,
								24305
							],
							[
								24342,
								24351
							],
							[
								24401,
								24409
							],
							[
								24451,
								24475
							],
							[
								24571,
								24587
							],
							[
								24623,
								24663
							],
							[
								24961,
								25004
							],
							[
								25947,
								25958
							],
							[
								26703,
								26753
							],
							[
								26775,
								26801
							],
							[
								26836,
								26865
							],
							[
								27209,
								27252
							],
							[
								27365,
								27369
							],
							[
								27385,
								27389
							],
							[
								27434,
								27521
							],
							[
								27688,
								27721
							],
							[
								27780,
								27785
							],
							[
								27855,
								27897
							],
							[
								27973,
								27983
							],
							[
								28102,
								28142
							],
							[
								28283,
								28288
							],
							[
								28346,
								28353
							],
							[
								28470,
								28474
							],
							[
								28553,
								28557
							],
							[
								28711,
								28718
							],
							[
								28805,
								28810
							],
							[
								28918,
								28934
							],
							[
								29045,
								29052
							],
							[
								29131,
								29135
							],
							[
								29196,
								29203
							],
							[
								29279,
								29286
							],
							[
								29343,
								29389
							],
							[
								29429,
								29439
							],
							[
								29592,
								29628
							],
							[
								29669,
								29681
							],
							[
								31324,
								31345
							],
							[
								31544,
								31584
							],
							[
								31739,
								31743
							],
							[
								31855,
								31859
							],
							[
								31928,
								31932
							],
							[
								32000,
								32004
							],
							[
								36643,
								36675
							],
							[
								37162,
								37172
							],
							[
								37222,
								37232
							],
							[
								37280,
								37290
							],
							[
								37868,
								37879
							],
							[
								37973,
								37977
							],
							[
								38004,
								38008
							],
							[
								38032,
								38036
							],
							[
								38060,
								38064
							],
							[
								38093,
								38130
							],
							[
								38569,
								38605
							],
							[
								38694,
								38737
							],
							[
								39024,
								39043
							],
							[
								39097,
								39102
							],
							[
								39369,
								39405
							],
							[
								39644,
								39649
							],
							[
								40409,
								40426
							],
							[
								40779,
								40789
							],
							[
								40885,
								40905
							],
							[
								40971,
								40994
							],
							[
								41082,
								41087
							],
							[
								41199,
								41222
							],
							[
								41310,
								41315
							],
							[
								41417,
								41429
							],
							[
								41544,
								41549
							],
							[
								41605,
								41634
							],
							[
								41813,
								41818
							],
							[
								42789,
								42847
							],
							[
								43811,
								43822
							],
							[
								43855,
								43866
							],
							[
								43915,
								43921
							],
							[
								43974,
								43982
							],
							[
								44280,
								44284
							],
							[
								44976,
								44982
							]
						],
						"symlist":
						[
							"d =>",
							"d =>",
							"traceProxy = (obj, handler) =>",
							" function(name, args)",
							"get(target, key, receiver)",
							"member = function()",
							"ConcatIterator = iterator =>",
							" gen =>",
							" (...args) =>",
							"toString()",
							"async function ImportModule(modulePath, ...args)",
							"module =>",
							" (acc, item) =>",
							"function CommandLine()",
							" (...args) =>",
							" (...args) =>",
							" (module, ...args) =>",
							"m =>",
							".show = value =>",
							".printNode = arg =>",
							"() =>",
							"(item, i, a) =>",
							"entry =>",
							"entry =>",
							"function* IncludeAll(dir, maxDepth = Infinity, pred = entry => /\\.[ch]$/.",
							"(entry))",
							"function SelectLocations(node)",
							" n =>",
							"prop =>",
							"function LocationString(loc)",
							"node =>",
							"function Structs(nodes)",
							"node =>",
							"field =>",
							"node =>",
							"(field, i) =>",
							"function Table(list, pred = (n, l) => true)",
							"(n, i) =>",
							"e =>",
							"k =>",
							"([i, l, n]) =>",
							" function returnType(n)",
							" function numArgs(n)",
							" function Params(n)",
							"p =>",
							"k =>",
							"([i, l, n]) =>",
							"(k, j) =>",
							"(acc, name) =>",
							" function padTrunc(len, pad = ' ')",
							" s =>",
							"(name, i) =>",
							"pad = (cols, pad, sep) =>",
							"(key, i) =>",
							"(s, col) =>",
							"(acc, n) =>",
							"(acc, row) =>",
							"function PrintRange(range, file)",
							"function OverlapRange(r1, r2)",
							"GetRange = r =>",
							"InRange = (i, r) =>",
							"function ParentNode(node, ast = $.data)",
							"function NextSibling(node, ast = $.data)",
							"function PreviousSibling(node, ast = $.data)",
							"function FirstChild(node, ast = $.data)",
							"function LastChild(node, ast = $.data)",
							"function Terminate(exitCode)",
							"function ParseStructs(text)",
							"function* (decl, includes)",
							"name =>",
							"function InspectStruct(decl, includes, compiler = 'clang')",
							"line =>",
							"line =>",
							"(col, i) =>",
							"([field, offset, size]) =>",
							"(acc, line) =>",
							"toString(sep = ' ')",
							"line =>",
							"function RoundTo(value, align)",
							"function MakeStructClass(decl, filename)",
							"function* GenerateStructClass(decl, ffiPrefix = '')",
							"line =>",
							"([field, member]) =>",
							"function GenerateGetSet(name, offset, type, ffiPrefix)",
							"toHex = v =>",
							"toHex = v =>",
							"function ByteLength2TypedArray(byteLength, signed, floating)",
							"function ByteLength2Value(byteLength, signed, floating)",
							"FFI_Function",
							"constructor(node, prefix = '')",
							"([name, type], idx) =>",
							"generateDefine(fp, lib)",
							" (name, lib) =>",
							"colorText = x =>",
							"generateDoc()",
							"push = (...args) =>",
							"field =>",
							"(field, col) =>",
							"js = type =>",
							"generateCall()",
							"([name, type]) =>",
							"generate(fp, lib, exp)",
							"generateFunction(fp, lib)",
							"([name, type]) =>",
							"p =>",
							"p =>",
							"compileFunction(fp, lib)",
							"function FdReader(fd, bufferSize = 1024)",
							"async (push, stop) =>",
							"async function CommandRead(args)",
							"async reader =>",
							" function ReadOutput(fd)",
							"async function LibraryExports(file)",
							"line =>",
							"line =>",
							"column =>",
							"(a, b) =>",
							"entry =>",
							"function SaveLibraries()",
							"(acc, [n, e]) =>",
							"function ProcessFile(file, debug = true)",
							"function ParseECMAScript(file, params = {})",
							" (fr, i) =>",
							"function PrintECMAScript(ast, comments, printer = ",
							"({ indent: 4 }, comments))",
							"function PrintCArray(strings)",
							"function Namespaces(nodePath, ast = $.data)",
							"p =>",
							"n =>",
							"function* Constants(node, t = (name, value) => [name, !isNaN(+value) ? +value : value])",
							"function GetImports(ast = $.data)",
							" n =>",
							"function GetIdentifiers(nodes, key = null)",
							" (n, k) =>",
							"function MemberNames(members, flags = 0)",
							" n =>",
							"path =>",
							"p =>",
							"p =>",
							"name =>",
							" n =>",
							"([node, ptr]) =>",
							"path =>",
							"p =>",
							"name =>",
							"name =>",
							"function UnsetLoc(node, pred = (v, p) => true)",
							" (v, k) =>",
							"function MakeFFI(node, lib, exp, fp)",
							"function* ()",
							"function MakeId(name)",
							"function MakeQuickJSClass(node, ast = $)",
							"n =>",
							"n =>",
							"n =>",
							"n =>",
							"async function ASTShell(...args)",
							" (a, p) =>",
							" (a, p) =>",
							" (a, p) =>",
							"get flags()",
							"v =>",
							"v =>",
							"d =>",
							"l =>",
							"async function Compile(file, ...args)",
							"select(name_or_id, pred = n => true)",
							"getByIdOrName(name_or_id, pred = n => true)",
							"getType(name_or_id)",
							" n =>",
							"getNamespace(name, root = this.data)",
							" n =>",
							"namespaceOf(node)",
							"toString()",
							"getClass(name_or_id)",
							"getFunction(name_or_id)",
							" n =>",
							"getVariable(name_or_id)",
							" n =>",
							"getLoc(node)",
							"() =>",
							"pathOf(needle, maxDepth = 10)",
							" n =>",
							"Pointer.prototype.chain = function(step, limit = Infinity)",
							".F = arg =>",
							".T = arg =>",
							" () =>",
							" node =>",
							"s =>",
							" fr =>"
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				],
				[
					1464,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/ast-shell.js",
						"symkeys":
						[
							[
								1970,
								1974
							],
							[
								2033,
								2037
							],
							[
								2073,
								2103
							],
							[
								2146,
								2167
							],
							[
								2316,
								2342
							],
							[
								2500,
								2519
							],
							[
								2848,
								2876
							],
							[
								3166,
								3174
							],
							[
								3175,
								3189
							],
							[
								3271,
								3281
							],
							[
								3344,
								3392
							],
							[
								3506,
								3515
							],
							[
								3625,
								3647
							],
							[
								4109,
								4131
							],
							[
								4495,
								4513
							],
							[
								4613,
								4631
							],
							[
								4737,
								4763
							],
							[
								4899,
								4903
							],
							[
								4982,
								4998
							],
							[
								5484,
								5503
							],
							[
								6002,
								6007
							],
							[
								6082,
								6097
							],
							[
								6182,
								6190
							],
							[
								6231,
								6239
							],
							[
								6611,
								6684
							],
							[
								6688,
								6696
							],
							[
								6793,
								6823
							],
							[
								6852,
								6857
							],
							[
								6890,
								6897
							],
							[
								6926,
								6954
							],
							[
								7291,
								7298
							],
							[
								7317,
								7340
							],
							[
								7370,
								7377
							],
							[
								7408,
								7416
							],
							[
								7454,
								7461
							],
							[
								7661,
								7674
							],
							[
								7855,
								7898
							],
							[
								7931,
								7940
							],
							[
								8001,
								8005
							],
							[
								8107,
								8111
							],
							[
								8147,
								8161
							],
							[
								8273,
								8301
							],
							[
								8506,
								8531
							],
							[
								8629,
								8653
							],
							[
								8726,
								8730
							],
							[
								8849,
								8853
							],
							[
								8917,
								8931
							],
							[
								8987,
								8996
							],
							[
								9294,
								9308
							],
							[
								9431,
								9466
							],
							[
								9555,
								9560
							],
							[
								9683,
								9695
							],
							[
								9748,
								9773
							],
							[
								9822,
								9833
							],
							[
								9873,
								9884
							],
							[
								10022,
								10033
							],
							[
								10121,
								10134
							],
							[
								10215,
								10247
							],
							[
								10485,
								10514
							],
							[
								10525,
								10540
							],
							[
								10602,
								10621
							],
							[
								10829,
								10868
							],
							[
								10933,
								10973
							],
							[
								11056,
								11100
							],
							[
								11182,
								11221
							],
							[
								11283,
								11321
							],
							[
								11407,
								11435
							],
							[
								11498,
								11525
							],
							[
								12076,
								12102
							],
							[
								12369,
								12376
							],
							[
								14292,
								14350
							],
							[
								15386,
								15393
							],
							[
								15457,
								15464
							],
							[
								15474,
								15485
							],
							[
								15526,
								15552
							],
							[
								15668,
								15682
							],
							[
								15979,
								15998
							],
							[
								16025,
								16032
							],
							[
								16121,
								16151
							],
							[
								16217,
								16257
							],
							[
								16433,
								16484
							],
							[
								17473,
								17480
							],
							[
								17887,
								17907
							],
							[
								18083,
								18137
							],
							[
								18326,
								18338
							],
							[
								18366,
								18378
							],
							[
								18995,
								19055
							],
							[
								19666,
								19721
							],
							[
								19817,
								19829
							],
							[
								19834,
								19864
							],
							[
								20145,
								20167
							],
							[
								20213,
								20236
							],
							[
								20308,
								20323
							],
							[
								20458,
								20474
							],
							[
								20878,
								20891
							],
							[
								21016,
								21035
							],
							[
								21087,
								21095
							],
							[
								21152,
								21167
							],
							[
								21327,
								21339
							],
							[
								21684,
								21698
							],
							[
								21798,
								21815
							],
							[
								22042,
								22064
							],
							[
								22181,
								22206
							],
							[
								22306,
								22323
							],
							[
								22378,
								22382
							],
							[
								22470,
								22474
							],
							[
								22526,
								22550
							],
							[
								22666,
								22706
							],
							[
								22767,
								22788
							],
							[
								23072,
								23104
							],
							[
								23589,
								23604
							],
							[
								23715,
								23740
							],
							[
								23909,
								23944
							],
							[
								24164,
								24171
							],
							[
								24260,
								24267
							],
							[
								24296,
								24305
							],
							[
								24342,
								24351
							],
							[
								24401,
								24409
							],
							[
								24451,
								24475
							],
							[
								24571,
								24587
							],
							[
								24623,
								24663
							],
							[
								24961,
								25004
							],
							[
								25947,
								25958
							],
							[
								26703,
								26753
							],
							[
								26775,
								26801
							],
							[
								26836,
								26865
							],
							[
								27209,
								27252
							],
							[
								27365,
								27369
							],
							[
								27385,
								27389
							],
							[
								27434,
								27521
							],
							[
								27688,
								27721
							],
							[
								27780,
								27785
							],
							[
								27855,
								27897
							],
							[
								27973,
								27983
							],
							[
								28102,
								28142
							],
							[
								28283,
								28288
							],
							[
								28346,
								28353
							],
							[
								28470,
								28474
							],
							[
								28553,
								28557
							],
							[
								28711,
								28718
							],
							[
								28805,
								28810
							],
							[
								28918,
								28934
							],
							[
								29045,
								29052
							],
							[
								29131,
								29135
							],
							[
								29196,
								29203
							],
							[
								29279,
								29286
							],
							[
								29343,
								29389
							],
							[
								29429,
								29439
							],
							[
								29592,
								29628
							],
							[
								29669,
								29681
							],
							[
								31324,
								31345
							],
							[
								31544,
								31584
							],
							[
								31739,
								31743
							],
							[
								31855,
								31859
							],
							[
								31928,
								31932
							],
							[
								32000,
								32004
							],
							[
								36643,
								36675
							],
							[
								37162,
								37172
							],
							[
								37222,
								37232
							],
							[
								37280,
								37290
							],
							[
								37868,
								37879
							],
							[
								37973,
								37977
							],
							[
								38004,
								38008
							],
							[
								38032,
								38036
							],
							[
								38060,
								38064
							],
							[
								38093,
								38130
							],
							[
								38569,
								38605
							],
							[
								38694,
								38737
							],
							[
								39024,
								39043
							],
							[
								39097,
								39102
							],
							[
								39369,
								39405
							],
							[
								39644,
								39649
							],
							[
								40409,
								40426
							],
							[
								40779,
								40789
							],
							[
								40885,
								40905
							],
							[
								40971,
								40994
							],
							[
								41082,
								41087
							],
							[
								41199,
								41222
							],
							[
								41310,
								41315
							],
							[
								41417,
								41429
							],
							[
								41544,
								41549
							],
							[
								41605,
								41634
							],
							[
								41813,
								41818
							],
							[
								42789,
								42847
							],
							[
								43811,
								43822
							],
							[
								43855,
								43866
							],
							[
								43915,
								43921
							],
							[
								43974,
								43982
							],
							[
								44280,
								44284
							],
							[
								44976,
								44982
							]
						],
						"symlist":
						[
							"d =>",
							"d =>",
							"traceProxy = (obj, handler) =>",
							" function(name, args)",
							"get(target, key, receiver)",
							"member = function()",
							"ConcatIterator = iterator =>",
							" gen =>",
							" (...args) =>",
							"toString()",
							"async function ImportModule(modulePath, ...args)",
							"module =>",
							" (acc, item) =>",
							"function CommandLine()",
							" (...args) =>",
							" (...args) =>",
							" (module, ...args) =>",
							"m =>",
							".show = value =>",
							".printNode = arg =>",
							"() =>",
							"(item, i, a) =>",
							"entry =>",
							"entry =>",
							"function* IncludeAll(dir, maxDepth = Infinity, pred = entry => /\\.[ch]$/.",
							"(entry))",
							"function SelectLocations(node)",
							" n =>",
							"prop =>",
							"function LocationString(loc)",
							"node =>",
							"function Structs(nodes)",
							"node =>",
							"field =>",
							"node =>",
							"(field, i) =>",
							"function Table(list, pred = (n, l) => true)",
							"(n, i) =>",
							"e =>",
							"k =>",
							"([i, l, n]) =>",
							" function returnType(n)",
							" function numArgs(n)",
							" function Params(n)",
							"p =>",
							"k =>",
							"([i, l, n]) =>",
							"(k, j) =>",
							"(acc, name) =>",
							" function padTrunc(len, pad = ' ')",
							" s =>",
							"(name, i) =>",
							"pad = (cols, pad, sep) =>",
							"(key, i) =>",
							"(s, col) =>",
							"(acc, n) =>",
							"(acc, row) =>",
							"function PrintRange(range, file)",
							"function OverlapRange(r1, r2)",
							"GetRange = r =>",
							"InRange = (i, r) =>",
							"function ParentNode(node, ast = $.data)",
							"function NextSibling(node, ast = $.data)",
							"function PreviousSibling(node, ast = $.data)",
							"function FirstChild(node, ast = $.data)",
							"function LastChild(node, ast = $.data)",
							"function Terminate(exitCode)",
							"function ParseStructs(text)",
							"function* (decl, includes)",
							"name =>",
							"function InspectStruct(decl, includes, compiler = 'clang')",
							"line =>",
							"line =>",
							"(col, i) =>",
							"([field, offset, size]) =>",
							"(acc, line) =>",
							"toString(sep = ' ')",
							"line =>",
							"function RoundTo(value, align)",
							"function MakeStructClass(decl, filename)",
							"function* GenerateStructClass(decl, ffiPrefix = '')",
							"line =>",
							"([field, member]) =>",
							"function GenerateGetSet(name, offset, type, ffiPrefix)",
							"toHex = v =>",
							"toHex = v =>",
							"function ByteLength2TypedArray(byteLength, signed, floating)",
							"function ByteLength2Value(byteLength, signed, floating)",
							"FFI_Function",
							"constructor(node, prefix = '')",
							"([name, type], idx) =>",
							"generateDefine(fp, lib)",
							" (name, lib) =>",
							"colorText = x =>",
							"generateDoc()",
							"push = (...args) =>",
							"field =>",
							"(field, col) =>",
							"js = type =>",
							"generateCall()",
							"([name, type]) =>",
							"generate(fp, lib, exp)",
							"generateFunction(fp, lib)",
							"([name, type]) =>",
							"p =>",
							"p =>",
							"compileFunction(fp, lib)",
							"function FdReader(fd, bufferSize = 1024)",
							"async (push, stop) =>",
							"async function CommandRead(args)",
							"async reader =>",
							" function ReadOutput(fd)",
							"async function LibraryExports(file)",
							"line =>",
							"line =>",
							"column =>",
							"(a, b) =>",
							"entry =>",
							"function SaveLibraries()",
							"(acc, [n, e]) =>",
							"function ProcessFile(file, debug = true)",
							"function ParseECMAScript(file, params = {})",
							" (fr, i) =>",
							"function PrintECMAScript(ast, comments, printer = ",
							"({ indent: 4 }, comments))",
							"function PrintCArray(strings)",
							"function Namespaces(nodePath, ast = $.data)",
							"p =>",
							"n =>",
							"function* Constants(node, t = (name, value) => [name, !isNaN(+value) ? +value : value])",
							"function GetImports(ast = $.data)",
							" n =>",
							"function GetIdentifiers(nodes, key = null)",
							" (n, k) =>",
							"function MemberNames(members, flags = 0)",
							" n =>",
							"path =>",
							"p =>",
							"p =>",
							"name =>",
							" n =>",
							"([node, ptr]) =>",
							"path =>",
							"p =>",
							"name =>",
							"name =>",
							"function UnsetLoc(node, pred = (v, p) => true)",
							" (v, k) =>",
							"function MakeFFI(node, lib, exp, fp)",
							"function* ()",
							"function MakeId(name)",
							"function MakeQuickJSClass(node, ast = $)",
							"n =>",
							"n =>",
							"n =>",
							"n =>",
							"async function ASTShell(...args)",
							" (a, p) =>",
							" (a, p) =>",
							" (a, p) =>",
							"get flags()",
							"v =>",
							"v =>",
							"d =>",
							"l =>",
							"async function Compile(file, ...args)",
							"select(name_or_id, pred = n => true)",
							"getByIdOrName(name_or_id, pred = n => true)",
							"getType(name_or_id)",
							" n =>",
							"getNamespace(name, root = this.data)",
							" n =>",
							"namespaceOf(node)",
							"toString()",
							"getClass(name_or_id)",
							"getFunction(name_or_id)",
							" n =>",
							"getVariable(name_or_id)",
							" n =>",
							"getLoc(node)",
							"() =>",
							"pathOf(needle, maxDepth = 10)",
							" n =>",
							"Pointer.prototype.chain = function(step, limit = Infinity)",
							".F = arg =>",
							".T = arg =>",
							" () =>",
							" node =>",
							"s =>",
							" fr =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABXDQAAICBkID0+CiAgZCA9PgogIHRyYWNlUHJveHkgPSAob2JqLCBoYW5kbGVyKSA9PgpmdW5jdGlvbihuYW1lLCBhcmdzKQogIGdldCh0YXJnZXQsIGtleSwgcmVjZWl2ZXIpCiAgbWVtYmVyID0gZnVuY3Rpb24oKQpDb25jYXRJdGVyYXRvciA9IGl0ZXJhdG9yID0+CmdlbiA9PgooLi4uYXJncykgPT4KICB0b1N0cmluZygpCkltcG9ydE1vZHVsZShtb2R1bGVQYXRoLCAuLi5hcmdzKQogIG1vZHVsZSA9PgooYWNjLCBpdGVtKSA9PgpDb21tYW5kTGluZSgpCiguLi5hcmdzKSA9PgooLi4uYXJncykgPT4KKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSB2YWx1ZSA9PgogIC5wcmludE5vZGUgPSBhcmcgPT4KKCkgPT4KKGl0ZW0sIGksIGEpID0+CiAgZW50cnkgPT4KICBlbnRyeSA9PgpJbmNsdWRlQWxsKGRpciwgbWF4RGVwdGggPSBJbmZpbml0eSwgcHJlZCA9IGVudHJ5ID0+IC9cLltjaF0kLy4KKGVudHJ5KSkKU2VsZWN0TG9jYXRpb25zKG5vZGUpCm4gPT4KICBwcm9wID0+CkxvY2F0aW9uU3RyaW5nKGxvYykKICBub2RlID0+ClN0cnVjdHMobm9kZXMpCiAgbm9kZSA9PgogIGZpZWxkID0+CiAgbm9kZSA9PgooZmllbGQsIGkpID0+ClRhYmxlKGxpc3QsIHByZWQgPSAobiwgbCkgPT4gdHJ1ZSkKKG4sIGkpID0+CiAgZSA9PgogIGsgPT4KKFtpLCBsLCBuXSkgPT4KICByZXR1cm5UeXBlKG4pCiAgbnVtQXJncyhuKQpQYXJhbXMobikKICBwID0+CiAgayA9PgooW2ksIGwsIG5dKSA9PgooaywgaikgPT4KKGFjYywgbmFtZSkgPT4KICBwYWRUcnVuYyhsZW4sIHBhZCA9ICcgJykKcyA9PgoobmFtZSwgaSkgPT4KICBwYWQgPSAoY29scywgcGFkLCBzZXApID0+CihrZXksIGkpID0+CihzLCBjb2wpID0+CihhY2MsIG4pID0+CihhY2MsIHJvdykgPT4KUHJpbnRSYW5nZShyYW5nZSwgZmlsZSkKT3ZlcmxhcFJhbmdlKHIxLCByMikKR2V0UmFuZ2UgPSByID0+CkluUmFuZ2UgPSAoaSwgcikgPT4KUGFyZW50Tm9kZShub2RlLCBhc3QgPSAkLmRhdGEpCk5leHRTaWJsaW5nKG5vZGUsIGFzdCA9ICQuZGF0YSkKUHJldmlvdXNTaWJsaW5nKG5vZGUsIGFzdCA9ICQuZGF0YSkKRmlyc3RDaGlsZChub2RlLCBhc3QgPSAkLmRhdGEpCkxhc3RDaGlsZChub2RlLCBhc3QgPSAkLmRhdGEpClRlcm1pbmF0ZShleGl0Q29kZSkKUGFyc2VTdHJ1Y3RzKHRleHQpCihkZWNsLCBpbmNsdWRlcykKICBuYW1lID0+Ckluc3BlY3RTdHJ1Y3QoZGVjbCwgaW5jbHVkZXMsIGNvbXBpbGVyID0gJ2NsYW5nJykKICBsaW5lID0+CiAgbGluZSA9PgooY29sLCBpKSA9PgooW2ZpZWxkLCBvZmZzZXQsIHNpemVdKSA9PgooYWNjLCBsaW5lKSA9PgogIHRvU3RyaW5nKHNlcCA9ICcgJykKICBsaW5lID0+ClJvdW5kVG8odmFsdWUsIGFsaWduKQpNYWtlU3RydWN0Q2xhc3MoZGVjbCwgZmlsZW5hbWUpCkdlbmVyYXRlU3RydWN0Q2xhc3MoZGVjbCwgZmZpUHJlZml4ID0gJycpCiAgbGluZSA9PgooW2ZpZWxkLCBtZW1iZXJdKSA9PgpHZW5lcmF0ZUdldFNldChuYW1lLCBvZmZzZXQsIHR5cGUsIGZmaVByZWZpeCkKICB0b0hleCA9IHYgPT4KICB0b0hleCA9IHYgPT4KQnl0ZUxlbmd0aDJUeXBlZEFycmF5KGJ5dGVMZW5ndGgsIHNpZ25lZCwgZmxvYXRpbmcpCkJ5dGVMZW5ndGgyVmFsdWUoYnl0ZUxlbmd0aCwgc2lnbmVkLCBmbG9hdGluZykKRkZJX0Z1bmN0aW9uCiAgY29uc3RydWN0b3Iobm9kZSwgcHJlZml4ID0gJycpCihbbmFtZSwgdHlwZV0sIGlkeCkgPT4KICBnZW5lcmF0ZURlZmluZShmcCwgbGliKQoobmFtZSwgbGliKSA9PgogIGNvbG9yVGV4dCA9IHggPT4KICBnZW5lcmF0ZURvYygpCiAgcHVzaCA9ICguLi5hcmdzKSA9PgogIGZpZWxkID0+CihmaWVsZCwgY29sKSA9PgogIGpzID0gdHlwZSA9PgogIGdlbmVyYXRlQ2FsbCgpCihbbmFtZSwgdHlwZV0pID0+CiAgZ2VuZXJhdGUoZnAsIGxpYiwgZXhwKQogIGdlbmVyYXRlRnVuY3Rpb24oZnAsIGxpYikKKFtuYW1lLCB0eXBlXSkgPT4KICBwID0+CiAgcCA9PgogIGNvbXBpbGVGdW5jdGlvbihmcCwgbGliKQpGZFJlYWRlcihmZCwgYnVmZmVyU2l6ZSA9IDEwMjQpCihwdXNoLCBzdG9wKSA9PgpDb21tYW5kUmVhZChhcmdzKQogIHJlYWRlciA9PgpSZWFkT3V0cHV0KGZkKQpMaWJyYXJ5RXhwb3J0cyhmaWxlKQogIGxpbmUgPT4KICBsaW5lID0+CiAgY29sdW1uID0+CihhLCBiKSA9PgogIGVudHJ5ID0+ClNhdmVMaWJyYXJpZXMoKQooYWNjLCBbbiwgZV0pID0+ClByb2Nlc3NGaWxlKGZpbGUsIGRlYnVnID0gdHJ1ZSkKUGFyc2VFQ01BU2NyaXB0KGZpbGUsIHBhcmFtcyA9IHt9KQooZnIsIGkpID0+ClByaW50RUNNQVNjcmlwdChhc3QsIGNvbW1lbnRzLCBwcmludGVyID0gCih7IGluZGVudDogNCB9LCBjb21tZW50cykpClByaW50Q0FycmF5KHN0cmluZ3MpCk5hbWVzcGFjZXMobm9kZVBhdGgsIGFzdCA9ICQuZGF0YSkKICBwID0+CiAgbiA9PgpDb25zdGFudHMobm9kZSwgdCA9IChuYW1lLCB2YWx1ZSkgPT4gW25hbWUsICFpc05hTigrdmFsdWUpID8gK3ZhbHVlIDogdmFsdWVdKQpHZXRJbXBvcnRzKGFzdCA9ICQuZGF0YSkKbiA9PgpHZXRJZGVudGlmaWVycyhub2Rlcywga2V5ID0gbnVsbCkKKG4sIGspID0+Ck1lbWJlck5hbWVzKG1lbWJlcnMsIGZsYWdzID0gMCkKbiA9PgogIHBhdGggPT4KICBwID0+CiAgcCA9PgogIG5hbWUgPT4KbiA9PgooW25vZGUsIHB0cl0pID0+CiAgcGF0aCA9PgogIHAgPT4KICBuYW1lID0+CiAgbmFtZSA9PgpVbnNldExvYyhub2RlLCBwcmVkID0gKHYsIHApID0+IHRydWUpCih2LCBrKSA9PgpNYWtlRkZJKG5vZGUsIGxpYiwgZXhwLCBmcCkKKCkKTWFrZUlkKG5hbWUpCk1ha2VRdWlja0pTQ2xhc3Mobm9kZSwgYXN0ID0gJCkKICBuID0+CiAgbiA9PgogIG4gPT4KICBuID0+CkFTVFNoZWxsKC4uLmFyZ3MpCihhLCBwKSA9PgooYSwgcCkgPT4KKGEsIHApID0+CiAgZ2V0IGZsYWdzKCkKICB2ID0+CiAgdiA9PgogIGQgPT4KICBsID0+CkNvbXBpbGUoZmlsZSwgLi4uYXJncykKICBzZWxlY3QobmFtZV9vcl9pZCwgcHJlZCA9IG4gPT4gdHJ1ZSkKICBnZXRCeUlkT3JOYW1lKG5hbWVfb3JfaWQsIHByZWQgPSBuID0+IHRydWUpCiAgZ2V0VHlwZShuYW1lX29yX2lkKQpuID0+CiAgZ2V0TmFtZXNwYWNlKG5hbWUsIHJvb3QgPSB0aGlzLmRhdGEpCm4gPT4KICBuYW1lc3BhY2VPZihub2RlKQogIHRvU3RyaW5nKCkKICBnZXRDbGFzcyhuYW1lX29yX2lkKQogIGdldEZ1bmN0aW9uKG5hbWVfb3JfaWQpCm4gPT4KICBnZXRWYXJpYWJsZShuYW1lX29yX2lkKQpuID0+CiAgZ2V0TG9jKG5vZGUpCigpID0+CiAgcGF0aE9mKG5lZWRsZSwgbWF4RGVwdGggPSAxMCkKbiA9PgpQb2ludGVyLnByb3RvdHlwZS5jaGFpbiA9IGZ1bmN0aW9uKHN0ZXAsIGxpbWl0ID0gSW5maW5pdHkpCiAgLkYgPSBhcmcgPT4KICAuVCA9IGFyZyA9PgooKSA9Pgpub2RlID0+CiAgcyA9PgpmciA9PgAAAAAAAAAAVw0AAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					1465,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/ast-shell.js",
						"symkeys":
						[
							[
								1970,
								1974
							],
							[
								2033,
								2037
							],
							[
								2073,
								2103
							],
							[
								2146,
								2167
							],
							[
								2316,
								2342
							],
							[
								2500,
								2519
							],
							[
								2848,
								2876
							],
							[
								3166,
								3174
							],
							[
								3175,
								3189
							],
							[
								3271,
								3281
							],
							[
								3344,
								3392
							],
							[
								3506,
								3515
							],
							[
								3625,
								3647
							],
							[
								4109,
								4131
							],
							[
								4495,
								4513
							],
							[
								4613,
								4631
							],
							[
								4737,
								4763
							],
							[
								4899,
								4903
							],
							[
								4982,
								4998
							],
							[
								5484,
								5503
							],
							[
								6002,
								6007
							],
							[
								6082,
								6097
							],
							[
								6182,
								6190
							],
							[
								6231,
								6239
							],
							[
								6611,
								6684
							],
							[
								6688,
								6696
							],
							[
								6793,
								6823
							],
							[
								6852,
								6857
							],
							[
								6890,
								6897
							],
							[
								6926,
								6954
							],
							[
								7291,
								7298
							],
							[
								7317,
								7340
							],
							[
								7370,
								7377
							],
							[
								7408,
								7416
							],
							[
								7454,
								7461
							],
							[
								7661,
								7674
							],
							[
								7855,
								7898
							],
							[
								7931,
								7940
							],
							[
								8001,
								8005
							],
							[
								8107,
								8111
							],
							[
								8147,
								8161
							],
							[
								8273,
								8301
							],
							[
								8506,
								8531
							],
							[
								8629,
								8653
							],
							[
								8726,
								8730
							],
							[
								8849,
								8853
							],
							[
								8917,
								8931
							],
							[
								8987,
								8996
							],
							[
								9294,
								9308
							],
							[
								9431,
								9466
							],
							[
								9555,
								9560
							],
							[
								9683,
								9695
							],
							[
								9748,
								9773
							],
							[
								9822,
								9833
							],
							[
								9873,
								9884
							],
							[
								10022,
								10033
							],
							[
								10121,
								10134
							],
							[
								10215,
								10247
							],
							[
								10485,
								10514
							],
							[
								10525,
								10540
							],
							[
								10602,
								10621
							],
							[
								10829,
								10868
							],
							[
								10933,
								10973
							],
							[
								11056,
								11100
							],
							[
								11182,
								11221
							],
							[
								11283,
								11321
							],
							[
								11407,
								11435
							],
							[
								11498,
								11525
							],
							[
								12076,
								12102
							],
							[
								12369,
								12376
							],
							[
								14292,
								14350
							],
							[
								15386,
								15393
							],
							[
								15457,
								15464
							],
							[
								15474,
								15485
							],
							[
								15526,
								15552
							],
							[
								15668,
								15682
							],
							[
								15979,
								15998
							],
							[
								16025,
								16032
							],
							[
								16121,
								16151
							],
							[
								16217,
								16257
							],
							[
								16433,
								16484
							],
							[
								17473,
								17480
							],
							[
								17887,
								17907
							],
							[
								18083,
								18137
							],
							[
								18326,
								18338
							],
							[
								18366,
								18378
							],
							[
								18995,
								19055
							],
							[
								19666,
								19721
							],
							[
								19817,
								19829
							],
							[
								19834,
								19864
							],
							[
								20145,
								20167
							],
							[
								20213,
								20236
							],
							[
								20308,
								20323
							],
							[
								20458,
								20474
							],
							[
								20878,
								20891
							],
							[
								21016,
								21035
							],
							[
								21087,
								21095
							],
							[
								21152,
								21167
							],
							[
								21327,
								21339
							],
							[
								21684,
								21698
							],
							[
								21798,
								21815
							],
							[
								22042,
								22064
							],
							[
								22181,
								22206
							],
							[
								22306,
								22323
							],
							[
								22378,
								22382
							],
							[
								22470,
								22474
							],
							[
								22526,
								22550
							],
							[
								22666,
								22706
							],
							[
								22767,
								22788
							],
							[
								23072,
								23104
							],
							[
								23589,
								23604
							],
							[
								23715,
								23740
							],
							[
								23909,
								23944
							],
							[
								24164,
								24171
							],
							[
								24260,
								24267
							],
							[
								24296,
								24305
							],
							[
								24342,
								24351
							],
							[
								24401,
								24409
							],
							[
								24451,
								24475
							],
							[
								24571,
								24587
							],
							[
								24623,
								24663
							],
							[
								24961,
								25004
							],
							[
								25947,
								25958
							],
							[
								26703,
								26753
							],
							[
								26775,
								26801
							],
							[
								26836,
								26865
							],
							[
								27209,
								27252
							],
							[
								27365,
								27369
							],
							[
								27385,
								27389
							],
							[
								27434,
								27521
							],
							[
								27688,
								27721
							],
							[
								27780,
								27785
							],
							[
								27855,
								27897
							],
							[
								27973,
								27983
							],
							[
								28102,
								28142
							],
							[
								28283,
								28288
							],
							[
								28346,
								28353
							],
							[
								28470,
								28474
							],
							[
								28553,
								28557
							],
							[
								28711,
								28718
							],
							[
								28805,
								28810
							],
							[
								28918,
								28934
							],
							[
								29045,
								29052
							],
							[
								29131,
								29135
							],
							[
								29196,
								29203
							],
							[
								29279,
								29286
							],
							[
								29343,
								29389
							],
							[
								29429,
								29439
							],
							[
								29592,
								29628
							],
							[
								29669,
								29681
							],
							[
								31324,
								31345
							],
							[
								31544,
								31584
							],
							[
								31739,
								31743
							],
							[
								31855,
								31859
							],
							[
								31928,
								31932
							],
							[
								32000,
								32004
							],
							[
								36643,
								36675
							],
							[
								37162,
								37172
							],
							[
								37222,
								37232
							],
							[
								37280,
								37290
							],
							[
								37868,
								37879
							],
							[
								37973,
								37977
							],
							[
								38004,
								38008
							],
							[
								38032,
								38036
							],
							[
								38060,
								38064
							],
							[
								38093,
								38130
							],
							[
								38569,
								38605
							],
							[
								38694,
								38737
							],
							[
								39024,
								39043
							],
							[
								39097,
								39102
							],
							[
								39369,
								39405
							],
							[
								39644,
								39649
							],
							[
								40409,
								40426
							],
							[
								40779,
								40789
							],
							[
								40885,
								40905
							],
							[
								40971,
								40994
							],
							[
								41082,
								41087
							],
							[
								41199,
								41222
							],
							[
								41310,
								41315
							],
							[
								41417,
								41429
							],
							[
								41544,
								41549
							],
							[
								41605,
								41634
							],
							[
								41813,
								41818
							],
							[
								42789,
								42847
							],
							[
								43811,
								43822
							],
							[
								43855,
								43866
							],
							[
								43915,
								43921
							],
							[
								43974,
								43982
							],
							[
								44280,
								44284
							],
							[
								44976,
								44982
							]
						],
						"symlist":
						[
							"d =>",
							"d =>",
							"traceProxy = (obj, handler) =>",
							" function(name, args)",
							"get(target, key, receiver)",
							"member = function()",
							"ConcatIterator = iterator =>",
							" gen =>",
							" (...args) =>",
							"toString()",
							"async function ImportModule(modulePath, ...args)",
							"module =>",
							" (acc, item) =>",
							"function CommandLine()",
							" (...args) =>",
							" (...args) =>",
							" (module, ...args) =>",
							"m =>",
							".show = value =>",
							".printNode = arg =>",
							"() =>",
							"(item, i, a) =>",
							"entry =>",
							"entry =>",
							"function* IncludeAll(dir, maxDepth = Infinity, pred = entry => /\\.[ch]$/.",
							"(entry))",
							"function SelectLocations(node)",
							" n =>",
							"prop =>",
							"function LocationString(loc)",
							"node =>",
							"function Structs(nodes)",
							"node =>",
							"field =>",
							"node =>",
							"(field, i) =>",
							"function Table(list, pred = (n, l) => true)",
							"(n, i) =>",
							"e =>",
							"k =>",
							"([i, l, n]) =>",
							" function returnType(n)",
							" function numArgs(n)",
							" function Params(n)",
							"p =>",
							"k =>",
							"([i, l, n]) =>",
							"(k, j) =>",
							"(acc, name) =>",
							" function padTrunc(len, pad = ' ')",
							" s =>",
							"(name, i) =>",
							"pad = (cols, pad, sep) =>",
							"(key, i) =>",
							"(s, col) =>",
							"(acc, n) =>",
							"(acc, row) =>",
							"function PrintRange(range, file)",
							"function OverlapRange(r1, r2)",
							"GetRange = r =>",
							"InRange = (i, r) =>",
							"function ParentNode(node, ast = $.data)",
							"function NextSibling(node, ast = $.data)",
							"function PreviousSibling(node, ast = $.data)",
							"function FirstChild(node, ast = $.data)",
							"function LastChild(node, ast = $.data)",
							"function Terminate(exitCode)",
							"function ParseStructs(text)",
							"function* (decl, includes)",
							"name =>",
							"function InspectStruct(decl, includes, compiler = 'clang')",
							"line =>",
							"line =>",
							"(col, i) =>",
							"([field, offset, size]) =>",
							"(acc, line) =>",
							"toString(sep = ' ')",
							"line =>",
							"function RoundTo(value, align)",
							"function MakeStructClass(decl, filename)",
							"function* GenerateStructClass(decl, ffiPrefix = '')",
							"line =>",
							"([field, member]) =>",
							"function GenerateGetSet(name, offset, type, ffiPrefix)",
							"toHex = v =>",
							"toHex = v =>",
							"function ByteLength2TypedArray(byteLength, signed, floating)",
							"function ByteLength2Value(byteLength, signed, floating)",
							"FFI_Function",
							"constructor(node, prefix = '')",
							"([name, type], idx) =>",
							"generateDefine(fp, lib)",
							" (name, lib) =>",
							"colorText = x =>",
							"generateDoc()",
							"push = (...args) =>",
							"field =>",
							"(field, col) =>",
							"js = type =>",
							"generateCall()",
							"([name, type]) =>",
							"generate(fp, lib, exp)",
							"generateFunction(fp, lib)",
							"([name, type]) =>",
							"p =>",
							"p =>",
							"compileFunction(fp, lib)",
							"function FdReader(fd, bufferSize = 1024)",
							"async (push, stop) =>",
							"async function CommandRead(args)",
							"async reader =>",
							" function ReadOutput(fd)",
							"async function LibraryExports(file)",
							"line =>",
							"line =>",
							"column =>",
							"(a, b) =>",
							"entry =>",
							"function SaveLibraries()",
							"(acc, [n, e]) =>",
							"function ProcessFile(file, debug = true)",
							"function ParseECMAScript(file, params = {})",
							" (fr, i) =>",
							"function PrintECMAScript(ast, comments, printer = ",
							"({ indent: 4 }, comments))",
							"function PrintCArray(strings)",
							"function Namespaces(nodePath, ast = $.data)",
							"p =>",
							"n =>",
							"function* Constants(node, t = (name, value) => [name, !isNaN(+value) ? +value : value])",
							"function GetImports(ast = $.data)",
							" n =>",
							"function GetIdentifiers(nodes, key = null)",
							" (n, k) =>",
							"function MemberNames(members, flags = 0)",
							" n =>",
							"path =>",
							"p =>",
							"p =>",
							"name =>",
							" n =>",
							"([node, ptr]) =>",
							"path =>",
							"p =>",
							"name =>",
							"name =>",
							"function UnsetLoc(node, pred = (v, p) => true)",
							" (v, k) =>",
							"function MakeFFI(node, lib, exp, fp)",
							"function* ()",
							"function MakeId(name)",
							"function MakeQuickJSClass(node, ast = $)",
							"n =>",
							"n =>",
							"n =>",
							"n =>",
							"async function ASTShell(...args)",
							" (a, p) =>",
							" (a, p) =>",
							" (a, p) =>",
							"get flags()",
							"v =>",
							"v =>",
							"d =>",
							"l =>",
							"async function Compile(file, ...args)",
							"select(name_or_id, pred = n => true)",
							"getByIdOrName(name_or_id, pred = n => true)",
							"getType(name_or_id)",
							" n =>",
							"getNamespace(name, root = this.data)",
							" n =>",
							"namespaceOf(node)",
							"toString()",
							"getClass(name_or_id)",
							"getFunction(name_or_id)",
							" n =>",
							"getVariable(name_or_id)",
							" n =>",
							"getLoc(node)",
							"() =>",
							"pathOf(needle, maxDepth = 10)",
							" n =>",
							"Pointer.prototype.chain = function(step, limit = Infinity)",
							".F = arg =>",
							".T = arg =>",
							" () =>",
							" node =>",
							"s =>",
							" fr =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABXDQAAICBkID0+CiAgZCA9PgogIHRyYWNlUHJveHkgPSAob2JqLCBoYW5kbGVyKSA9PgpmdW5jdGlvbihuYW1lLCBhcmdzKQogIGdldCh0YXJnZXQsIGtleSwgcmVjZWl2ZXIpCiAgbWVtYmVyID0gZnVuY3Rpb24oKQpDb25jYXRJdGVyYXRvciA9IGl0ZXJhdG9yID0+CmdlbiA9PgooLi4uYXJncykgPT4KICB0b1N0cmluZygpCkltcG9ydE1vZHVsZShtb2R1bGVQYXRoLCAuLi5hcmdzKQogIG1vZHVsZSA9PgooYWNjLCBpdGVtKSA9PgpDb21tYW5kTGluZSgpCiguLi5hcmdzKSA9PgooLi4uYXJncykgPT4KKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSB2YWx1ZSA9PgogIC5wcmludE5vZGUgPSBhcmcgPT4KKCkgPT4KKGl0ZW0sIGksIGEpID0+CiAgZW50cnkgPT4KICBlbnRyeSA9PgpJbmNsdWRlQWxsKGRpciwgbWF4RGVwdGggPSBJbmZpbml0eSwgcHJlZCA9IGVudHJ5ID0+IC9cLltjaF0kLy4KKGVudHJ5KSkKU2VsZWN0TG9jYXRpb25zKG5vZGUpCm4gPT4KICBwcm9wID0+CkxvY2F0aW9uU3RyaW5nKGxvYykKICBub2RlID0+ClN0cnVjdHMobm9kZXMpCiAgbm9kZSA9PgogIGZpZWxkID0+CiAgbm9kZSA9PgooZmllbGQsIGkpID0+ClRhYmxlKGxpc3QsIHByZWQgPSAobiwgbCkgPT4gdHJ1ZSkKKG4sIGkpID0+CiAgZSA9PgogIGsgPT4KKFtpLCBsLCBuXSkgPT4KICByZXR1cm5UeXBlKG4pCiAgbnVtQXJncyhuKQpQYXJhbXMobikKICBwID0+CiAgayA9PgooW2ksIGwsIG5dKSA9PgooaywgaikgPT4KKGFjYywgbmFtZSkgPT4KICBwYWRUcnVuYyhsZW4sIHBhZCA9ICcgJykKcyA9PgoobmFtZSwgaSkgPT4KICBwYWQgPSAoY29scywgcGFkLCBzZXApID0+CihrZXksIGkpID0+CihzLCBjb2wpID0+CihhY2MsIG4pID0+CihhY2MsIHJvdykgPT4KUHJpbnRSYW5nZShyYW5nZSwgZmlsZSkKT3ZlcmxhcFJhbmdlKHIxLCByMikKR2V0UmFuZ2UgPSByID0+CkluUmFuZ2UgPSAoaSwgcikgPT4KUGFyZW50Tm9kZShub2RlLCBhc3QgPSAkLmRhdGEpCk5leHRTaWJsaW5nKG5vZGUsIGFzdCA9ICQuZGF0YSkKUHJldmlvdXNTaWJsaW5nKG5vZGUsIGFzdCA9ICQuZGF0YSkKRmlyc3RDaGlsZChub2RlLCBhc3QgPSAkLmRhdGEpCkxhc3RDaGlsZChub2RlLCBhc3QgPSAkLmRhdGEpClRlcm1pbmF0ZShleGl0Q29kZSkKUGFyc2VTdHJ1Y3RzKHRleHQpCihkZWNsLCBpbmNsdWRlcykKICBuYW1lID0+Ckluc3BlY3RTdHJ1Y3QoZGVjbCwgaW5jbHVkZXMsIGNvbXBpbGVyID0gJ2NsYW5nJykKICBsaW5lID0+CiAgbGluZSA9PgooY29sLCBpKSA9PgooW2ZpZWxkLCBvZmZzZXQsIHNpemVdKSA9PgooYWNjLCBsaW5lKSA9PgogIHRvU3RyaW5nKHNlcCA9ICcgJykKICBsaW5lID0+ClJvdW5kVG8odmFsdWUsIGFsaWduKQpNYWtlU3RydWN0Q2xhc3MoZGVjbCwgZmlsZW5hbWUpCkdlbmVyYXRlU3RydWN0Q2xhc3MoZGVjbCwgZmZpUHJlZml4ID0gJycpCiAgbGluZSA9PgooW2ZpZWxkLCBtZW1iZXJdKSA9PgpHZW5lcmF0ZUdldFNldChuYW1lLCBvZmZzZXQsIHR5cGUsIGZmaVByZWZpeCkKICB0b0hleCA9IHYgPT4KICB0b0hleCA9IHYgPT4KQnl0ZUxlbmd0aDJUeXBlZEFycmF5KGJ5dGVMZW5ndGgsIHNpZ25lZCwgZmxvYXRpbmcpCkJ5dGVMZW5ndGgyVmFsdWUoYnl0ZUxlbmd0aCwgc2lnbmVkLCBmbG9hdGluZykKRkZJX0Z1bmN0aW9uCiAgY29uc3RydWN0b3Iobm9kZSwgcHJlZml4ID0gJycpCihbbmFtZSwgdHlwZV0sIGlkeCkgPT4KICBnZW5lcmF0ZURlZmluZShmcCwgbGliKQoobmFtZSwgbGliKSA9PgogIGNvbG9yVGV4dCA9IHggPT4KICBnZW5lcmF0ZURvYygpCiAgcHVzaCA9ICguLi5hcmdzKSA9PgogIGZpZWxkID0+CihmaWVsZCwgY29sKSA9PgogIGpzID0gdHlwZSA9PgogIGdlbmVyYXRlQ2FsbCgpCihbbmFtZSwgdHlwZV0pID0+CiAgZ2VuZXJhdGUoZnAsIGxpYiwgZXhwKQogIGdlbmVyYXRlRnVuY3Rpb24oZnAsIGxpYikKKFtuYW1lLCB0eXBlXSkgPT4KICBwID0+CiAgcCA9PgogIGNvbXBpbGVGdW5jdGlvbihmcCwgbGliKQpGZFJlYWRlcihmZCwgYnVmZmVyU2l6ZSA9IDEwMjQpCihwdXNoLCBzdG9wKSA9PgpDb21tYW5kUmVhZChhcmdzKQogIHJlYWRlciA9PgpSZWFkT3V0cHV0KGZkKQpMaWJyYXJ5RXhwb3J0cyhmaWxlKQogIGxpbmUgPT4KICBsaW5lID0+CiAgY29sdW1uID0+CihhLCBiKSA9PgogIGVudHJ5ID0+ClNhdmVMaWJyYXJpZXMoKQooYWNjLCBbbiwgZV0pID0+ClByb2Nlc3NGaWxlKGZpbGUsIGRlYnVnID0gdHJ1ZSkKUGFyc2VFQ01BU2NyaXB0KGZpbGUsIHBhcmFtcyA9IHt9KQooZnIsIGkpID0+ClByaW50RUNNQVNjcmlwdChhc3QsIGNvbW1lbnRzLCBwcmludGVyID0gCih7IGluZGVudDogNCB9LCBjb21tZW50cykpClByaW50Q0FycmF5KHN0cmluZ3MpCk5hbWVzcGFjZXMobm9kZVBhdGgsIGFzdCA9ICQuZGF0YSkKICBwID0+CiAgbiA9PgpDb25zdGFudHMobm9kZSwgdCA9IChuYW1lLCB2YWx1ZSkgPT4gW25hbWUsICFpc05hTigrdmFsdWUpID8gK3ZhbHVlIDogdmFsdWVdKQpHZXRJbXBvcnRzKGFzdCA9ICQuZGF0YSkKbiA9PgpHZXRJZGVudGlmaWVycyhub2Rlcywga2V5ID0gbnVsbCkKKG4sIGspID0+Ck1lbWJlck5hbWVzKG1lbWJlcnMsIGZsYWdzID0gMCkKbiA9PgogIHBhdGggPT4KICBwID0+CiAgcCA9PgogIG5hbWUgPT4KbiA9PgooW25vZGUsIHB0cl0pID0+CiAgcGF0aCA9PgogIHAgPT4KICBuYW1lID0+CiAgbmFtZSA9PgpVbnNldExvYyhub2RlLCBwcmVkID0gKHYsIHApID0+IHRydWUpCih2LCBrKSA9PgpNYWtlRkZJKG5vZGUsIGxpYiwgZXhwLCBmcCkKKCkKTWFrZUlkKG5hbWUpCk1ha2VRdWlja0pTQ2xhc3Mobm9kZSwgYXN0ID0gJCkKICBuID0+CiAgbiA9PgogIG4gPT4KICBuID0+CkFTVFNoZWxsKC4uLmFyZ3MpCihhLCBwKSA9PgooYSwgcCkgPT4KKGEsIHApID0+CiAgZ2V0IGZsYWdzKCkKICB2ID0+CiAgdiA9PgogIGQgPT4KICBsID0+CkNvbXBpbGUoZmlsZSwgLi4uYXJncykKICBzZWxlY3QobmFtZV9vcl9pZCwgcHJlZCA9IG4gPT4gdHJ1ZSkKICBnZXRCeUlkT3JOYW1lKG5hbWVfb3JfaWQsIHByZWQgPSBuID0+IHRydWUpCiAgZ2V0VHlwZShuYW1lX29yX2lkKQpuID0+CiAgZ2V0TmFtZXNwYWNlKG5hbWUsIHJvb3QgPSB0aGlzLmRhdGEpCm4gPT4KICBuYW1lc3BhY2VPZihub2RlKQogIHRvU3RyaW5nKCkKICBnZXRDbGFzcyhuYW1lX29yX2lkKQogIGdldEZ1bmN0aW9uKG5hbWVfb3JfaWQpCm4gPT4KICBnZXRWYXJpYWJsZShuYW1lX29yX2lkKQpuID0+CiAgZ2V0TG9jKG5vZGUpCigpID0+CiAgcGF0aE9mKG5lZWRsZSwgbWF4RGVwdGggPSAxMCkKbiA9PgpQb2ludGVyLnByb3RvdHlwZS5jaGFpbiA9IGZ1bmN0aW9uKHN0ZXAsIGxpbWl0ID0gSW5maW5pdHkpCiAgLkYgPSBhcmcgPT4KICAuVCA9IGFyZyA9PgooKSA9Pgpub2RlID0+CiAgcyA9PgpmciA9PgAAAAAAAAAAVw0AAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					1466,
					3,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/ast-shell.js",
						"symkeys":
						[
							[
								1970,
								1974
							],
							[
								2033,
								2037
							],
							[
								2073,
								2103
							],
							[
								2146,
								2167
							],
							[
								2316,
								2342
							],
							[
								2500,
								2519
							],
							[
								2848,
								2876
							],
							[
								3166,
								3174
							],
							[
								3175,
								3189
							],
							[
								3271,
								3281
							],
							[
								3344,
								3392
							],
							[
								3506,
								3515
							],
							[
								3625,
								3647
							],
							[
								4109,
								4131
							],
							[
								4495,
								4513
							],
							[
								4613,
								4631
							],
							[
								4737,
								4763
							],
							[
								4899,
								4903
							],
							[
								4982,
								4998
							],
							[
								5484,
								5503
							],
							[
								6002,
								6007
							],
							[
								6082,
								6097
							],
							[
								6182,
								6190
							],
							[
								6231,
								6239
							],
							[
								6611,
								6684
							],
							[
								6688,
								6696
							],
							[
								6793,
								6823
							],
							[
								6852,
								6857
							],
							[
								6890,
								6897
							],
							[
								6926,
								6954
							],
							[
								7291,
								7298
							],
							[
								7317,
								7340
							],
							[
								7370,
								7377
							],
							[
								7408,
								7416
							],
							[
								7454,
								7461
							],
							[
								7661,
								7674
							],
							[
								7855,
								7898
							],
							[
								7931,
								7940
							],
							[
								8001,
								8005
							],
							[
								8107,
								8111
							],
							[
								8147,
								8161
							],
							[
								8273,
								8301
							],
							[
								8506,
								8531
							],
							[
								8629,
								8653
							],
							[
								8726,
								8730
							],
							[
								8849,
								8853
							],
							[
								8917,
								8931
							],
							[
								8987,
								8996
							],
							[
								9294,
								9308
							],
							[
								9431,
								9466
							],
							[
								9555,
								9560
							],
							[
								9683,
								9695
							],
							[
								9748,
								9773
							],
							[
								9822,
								9833
							],
							[
								9873,
								9884
							],
							[
								10022,
								10033
							],
							[
								10121,
								10134
							],
							[
								10215,
								10247
							],
							[
								10485,
								10514
							],
							[
								10525,
								10540
							],
							[
								10602,
								10621
							],
							[
								10829,
								10868
							],
							[
								10933,
								10973
							],
							[
								11056,
								11100
							],
							[
								11182,
								11221
							],
							[
								11283,
								11321
							],
							[
								11407,
								11435
							],
							[
								11498,
								11525
							],
							[
								12076,
								12102
							],
							[
								12369,
								12376
							],
							[
								14292,
								14350
							],
							[
								15386,
								15393
							],
							[
								15457,
								15464
							],
							[
								15474,
								15485
							],
							[
								15526,
								15552
							],
							[
								15668,
								15682
							],
							[
								15979,
								15998
							],
							[
								16025,
								16032
							],
							[
								16121,
								16151
							],
							[
								16217,
								16257
							],
							[
								16433,
								16484
							],
							[
								17473,
								17480
							],
							[
								17887,
								17907
							],
							[
								18083,
								18137
							],
							[
								18326,
								18338
							],
							[
								18366,
								18378
							],
							[
								18995,
								19055
							],
							[
								19666,
								19721
							],
							[
								19817,
								19829
							],
							[
								19834,
								19864
							],
							[
								20145,
								20167
							],
							[
								20213,
								20236
							],
							[
								20308,
								20323
							],
							[
								20458,
								20474
							],
							[
								20878,
								20891
							],
							[
								21016,
								21035
							],
							[
								21087,
								21095
							],
							[
								21152,
								21167
							],
							[
								21327,
								21339
							],
							[
								21684,
								21698
							],
							[
								21798,
								21815
							],
							[
								22042,
								22064
							],
							[
								22181,
								22206
							],
							[
								22306,
								22323
							],
							[
								22378,
								22382
							],
							[
								22470,
								22474
							],
							[
								22526,
								22550
							],
							[
								22666,
								22706
							],
							[
								22767,
								22788
							],
							[
								23072,
								23104
							],
							[
								23589,
								23604
							],
							[
								23715,
								23740
							],
							[
								23909,
								23944
							],
							[
								24164,
								24171
							],
							[
								24260,
								24267
							],
							[
								24296,
								24305
							],
							[
								24342,
								24351
							],
							[
								24401,
								24409
							],
							[
								24451,
								24475
							],
							[
								24571,
								24587
							],
							[
								24623,
								24663
							],
							[
								24961,
								25004
							],
							[
								25947,
								25958
							],
							[
								26703,
								26753
							],
							[
								26775,
								26801
							],
							[
								26836,
								26865
							],
							[
								27209,
								27252
							],
							[
								27365,
								27369
							],
							[
								27385,
								27389
							],
							[
								27434,
								27521
							],
							[
								27688,
								27721
							],
							[
								27780,
								27785
							],
							[
								27855,
								27897
							],
							[
								27973,
								27983
							],
							[
								28102,
								28142
							],
							[
								28283,
								28288
							],
							[
								28346,
								28353
							],
							[
								28470,
								28474
							],
							[
								28553,
								28557
							],
							[
								28711,
								28718
							],
							[
								28805,
								28810
							],
							[
								28918,
								28934
							],
							[
								29045,
								29052
							],
							[
								29131,
								29135
							],
							[
								29196,
								29203
							],
							[
								29279,
								29286
							],
							[
								29343,
								29389
							],
							[
								29429,
								29439
							],
							[
								29592,
								29628
							],
							[
								29669,
								29681
							],
							[
								31324,
								31345
							],
							[
								31544,
								31584
							],
							[
								31739,
								31743
							],
							[
								31855,
								31859
							],
							[
								31928,
								31932
							],
							[
								32000,
								32004
							],
							[
								36643,
								36675
							],
							[
								37162,
								37172
							],
							[
								37222,
								37232
							],
							[
								37280,
								37290
							],
							[
								37868,
								37879
							],
							[
								37973,
								37977
							],
							[
								38004,
								38008
							],
							[
								38032,
								38036
							],
							[
								38060,
								38064
							],
							[
								38093,
								38130
							],
							[
								38569,
								38605
							],
							[
								38694,
								38737
							],
							[
								39024,
								39043
							],
							[
								39097,
								39102
							],
							[
								39369,
								39405
							],
							[
								39644,
								39649
							],
							[
								40409,
								40426
							],
							[
								40779,
								40789
							],
							[
								40885,
								40905
							],
							[
								40971,
								40994
							],
							[
								41082,
								41087
							],
							[
								41199,
								41222
							],
							[
								41310,
								41315
							],
							[
								41417,
								41429
							],
							[
								41544,
								41549
							],
							[
								41605,
								41634
							],
							[
								41813,
								41818
							],
							[
								42789,
								42847
							],
							[
								43811,
								43822
							],
							[
								43855,
								43866
							],
							[
								43915,
								43921
							],
							[
								43974,
								43982
							],
							[
								44280,
								44284
							],
							[
								44976,
								44982
							]
						],
						"symlist":
						[
							"d =>",
							"d =>",
							"traceProxy = (obj, handler) =>",
							" function(name, args)",
							"get(target, key, receiver)",
							"member = function()",
							"ConcatIterator = iterator =>",
							" gen =>",
							" (...args) =>",
							"toString()",
							"async function ImportModule(modulePath, ...args)",
							"module =>",
							" (acc, item) =>",
							"function CommandLine()",
							" (...args) =>",
							" (...args) =>",
							" (module, ...args) =>",
							"m =>",
							".show = value =>",
							".printNode = arg =>",
							"() =>",
							"(item, i, a) =>",
							"entry =>",
							"entry =>",
							"function* IncludeAll(dir, maxDepth = Infinity, pred = entry => /\\.[ch]$/.",
							"(entry))",
							"function SelectLocations(node)",
							" n =>",
							"prop =>",
							"function LocationString(loc)",
							"node =>",
							"function Structs(nodes)",
							"node =>",
							"field =>",
							"node =>",
							"(field, i) =>",
							"function Table(list, pred = (n, l) => true)",
							"(n, i) =>",
							"e =>",
							"k =>",
							"([i, l, n]) =>",
							" function returnType(n)",
							" function numArgs(n)",
							" function Params(n)",
							"p =>",
							"k =>",
							"([i, l, n]) =>",
							"(k, j) =>",
							"(acc, name) =>",
							" function padTrunc(len, pad = ' ')",
							" s =>",
							"(name, i) =>",
							"pad = (cols, pad, sep) =>",
							"(key, i) =>",
							"(s, col) =>",
							"(acc, n) =>",
							"(acc, row) =>",
							"function PrintRange(range, file)",
							"function OverlapRange(r1, r2)",
							"GetRange = r =>",
							"InRange = (i, r) =>",
							"function ParentNode(node, ast = $.data)",
							"function NextSibling(node, ast = $.data)",
							"function PreviousSibling(node, ast = $.data)",
							"function FirstChild(node, ast = $.data)",
							"function LastChild(node, ast = $.data)",
							"function Terminate(exitCode)",
							"function ParseStructs(text)",
							"function* (decl, includes)",
							"name =>",
							"function InspectStruct(decl, includes, compiler = 'clang')",
							"line =>",
							"line =>",
							"(col, i) =>",
							"([field, offset, size]) =>",
							"(acc, line) =>",
							"toString(sep = ' ')",
							"line =>",
							"function RoundTo(value, align)",
							"function MakeStructClass(decl, filename)",
							"function* GenerateStructClass(decl, ffiPrefix = '')",
							"line =>",
							"([field, member]) =>",
							"function GenerateGetSet(name, offset, type, ffiPrefix)",
							"toHex = v =>",
							"toHex = v =>",
							"function ByteLength2TypedArray(byteLength, signed, floating)",
							"function ByteLength2Value(byteLength, signed, floating)",
							"FFI_Function",
							"constructor(node, prefix = '')",
							"([name, type], idx) =>",
							"generateDefine(fp, lib)",
							" (name, lib) =>",
							"colorText = x =>",
							"generateDoc()",
							"push = (...args) =>",
							"field =>",
							"(field, col) =>",
							"js = type =>",
							"generateCall()",
							"([name, type]) =>",
							"generate(fp, lib, exp)",
							"generateFunction(fp, lib)",
							"([name, type]) =>",
							"p =>",
							"p =>",
							"compileFunction(fp, lib)",
							"function FdReader(fd, bufferSize = 1024)",
							"async (push, stop) =>",
							"async function CommandRead(args)",
							"async reader =>",
							" function ReadOutput(fd)",
							"async function LibraryExports(file)",
							"line =>",
							"line =>",
							"column =>",
							"(a, b) =>",
							"entry =>",
							"function SaveLibraries()",
							"(acc, [n, e]) =>",
							"function ProcessFile(file, debug = true)",
							"function ParseECMAScript(file, params = {})",
							" (fr, i) =>",
							"function PrintECMAScript(ast, comments, printer = ",
							"({ indent: 4 }, comments))",
							"function PrintCArray(strings)",
							"function Namespaces(nodePath, ast = $.data)",
							"p =>",
							"n =>",
							"function* Constants(node, t = (name, value) => [name, !isNaN(+value) ? +value : value])",
							"function GetImports(ast = $.data)",
							" n =>",
							"function GetIdentifiers(nodes, key = null)",
							" (n, k) =>",
							"function MemberNames(members, flags = 0)",
							" n =>",
							"path =>",
							"p =>",
							"p =>",
							"name =>",
							" n =>",
							"([node, ptr]) =>",
							"path =>",
							"p =>",
							"name =>",
							"name =>",
							"function UnsetLoc(node, pred = (v, p) => true)",
							" (v, k) =>",
							"function MakeFFI(node, lib, exp, fp)",
							"function* ()",
							"function MakeId(name)",
							"function MakeQuickJSClass(node, ast = $)",
							"n =>",
							"n =>",
							"n =>",
							"n =>",
							"async function ASTShell(...args)",
							" (a, p) =>",
							" (a, p) =>",
							" (a, p) =>",
							"get flags()",
							"v =>",
							"v =>",
							"d =>",
							"l =>",
							"async function Compile(file, ...args)",
							"select(name_or_id, pred = n => true)",
							"getByIdOrName(name_or_id, pred = n => true)",
							"getType(name_or_id)",
							" n =>",
							"getNamespace(name, root = this.data)",
							" n =>",
							"namespaceOf(node)",
							"toString()",
							"getClass(name_or_id)",
							"getFunction(name_or_id)",
							" n =>",
							"getVariable(name_or_id)",
							" n =>",
							"getLoc(node)",
							"() =>",
							"pathOf(needle, maxDepth = 10)",
							" n =>",
							"Pointer.prototype.chain = function(step, limit = Infinity)",
							".F = arg =>",
							".T = arg =>",
							" () =>",
							" node =>",
							"s =>",
							" fr =>"
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				],
				[
					1467,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/ast-shell.js",
						"symkeys":
						[
							[
								1970,
								1974
							],
							[
								2033,
								2037
							],
							[
								2073,
								2103
							],
							[
								2146,
								2167
							],
							[
								2316,
								2342
							],
							[
								2500,
								2519
							],
							[
								2848,
								2876
							],
							[
								3166,
								3174
							],
							[
								3175,
								3189
							],
							[
								3271,
								3281
							],
							[
								3344,
								3392
							],
							[
								3506,
								3515
							],
							[
								3625,
								3647
							],
							[
								4109,
								4131
							],
							[
								4495,
								4513
							],
							[
								4613,
								4631
							],
							[
								4737,
								4763
							],
							[
								4899,
								4903
							],
							[
								4982,
								4998
							],
							[
								5484,
								5503
							],
							[
								6002,
								6007
							],
							[
								6082,
								6097
							],
							[
								6182,
								6190
							],
							[
								6231,
								6239
							],
							[
								6611,
								6684
							],
							[
								6688,
								6696
							],
							[
								6793,
								6823
							],
							[
								6852,
								6857
							],
							[
								6890,
								6897
							],
							[
								6926,
								6954
							],
							[
								7291,
								7298
							],
							[
								7317,
								7340
							],
							[
								7370,
								7377
							],
							[
								7408,
								7416
							],
							[
								7454,
								7461
							],
							[
								7661,
								7674
							],
							[
								7855,
								7898
							],
							[
								7931,
								7940
							],
							[
								8001,
								8005
							],
							[
								8107,
								8111
							],
							[
								8147,
								8161
							],
							[
								8273,
								8301
							],
							[
								8506,
								8531
							],
							[
								8629,
								8653
							],
							[
								8726,
								8730
							],
							[
								8849,
								8853
							],
							[
								8917,
								8931
							],
							[
								8987,
								8996
							],
							[
								9294,
								9308
							],
							[
								9431,
								9466
							],
							[
								9555,
								9560
							],
							[
								9683,
								9695
							],
							[
								9748,
								9773
							],
							[
								9822,
								9833
							],
							[
								9873,
								9884
							],
							[
								10022,
								10033
							],
							[
								10121,
								10134
							],
							[
								10215,
								10247
							],
							[
								10485,
								10514
							],
							[
								10525,
								10540
							],
							[
								10602,
								10621
							],
							[
								10829,
								10868
							],
							[
								10933,
								10973
							],
							[
								11056,
								11100
							],
							[
								11182,
								11221
							],
							[
								11283,
								11321
							],
							[
								11407,
								11435
							],
							[
								11498,
								11525
							],
							[
								12076,
								12102
							],
							[
								12369,
								12376
							],
							[
								14292,
								14350
							],
							[
								15386,
								15393
							],
							[
								15457,
								15464
							],
							[
								15474,
								15485
							],
							[
								15526,
								15552
							],
							[
								15668,
								15682
							],
							[
								15979,
								15998
							],
							[
								16025,
								16032
							],
							[
								16121,
								16151
							],
							[
								16217,
								16257
							],
							[
								16433,
								16484
							],
							[
								17473,
								17480
							],
							[
								17887,
								17907
							],
							[
								18083,
								18137
							],
							[
								18326,
								18338
							],
							[
								18366,
								18378
							],
							[
								18995,
								19055
							],
							[
								19666,
								19721
							],
							[
								19817,
								19829
							],
							[
								19834,
								19864
							],
							[
								20145,
								20167
							],
							[
								20213,
								20236
							],
							[
								20308,
								20323
							],
							[
								20458,
								20474
							],
							[
								20878,
								20891
							],
							[
								21016,
								21035
							],
							[
								21087,
								21095
							],
							[
								21152,
								21167
							],
							[
								21327,
								21339
							],
							[
								21684,
								21698
							],
							[
								21798,
								21815
							],
							[
								22042,
								22064
							],
							[
								22181,
								22206
							],
							[
								22306,
								22323
							],
							[
								22378,
								22382
							],
							[
								22470,
								22474
							],
							[
								22526,
								22550
							],
							[
								22666,
								22706
							],
							[
								22767,
								22788
							],
							[
								23072,
								23104
							],
							[
								23589,
								23604
							],
							[
								23715,
								23740
							],
							[
								23909,
								23944
							],
							[
								24164,
								24171
							],
							[
								24260,
								24267
							],
							[
								24296,
								24305
							],
							[
								24342,
								24351
							],
							[
								24401,
								24409
							],
							[
								24451,
								24475
							],
							[
								24571,
								24587
							],
							[
								24623,
								24663
							],
							[
								24961,
								25004
							],
							[
								25947,
								25958
							],
							[
								26703,
								26753
							],
							[
								26775,
								26801
							],
							[
								26836,
								26865
							],
							[
								27209,
								27252
							],
							[
								27365,
								27369
							],
							[
								27385,
								27389
							],
							[
								27434,
								27521
							],
							[
								27688,
								27721
							],
							[
								27780,
								27785
							],
							[
								27855,
								27897
							],
							[
								27973,
								27983
							],
							[
								28102,
								28142
							],
							[
								28283,
								28288
							],
							[
								28346,
								28353
							],
							[
								28470,
								28474
							],
							[
								28553,
								28557
							],
							[
								28711,
								28718
							],
							[
								28805,
								28810
							],
							[
								28918,
								28934
							],
							[
								29045,
								29052
							],
							[
								29131,
								29135
							],
							[
								29196,
								29203
							],
							[
								29279,
								29286
							],
							[
								29343,
								29389
							],
							[
								29429,
								29439
							],
							[
								29592,
								29628
							],
							[
								29669,
								29681
							],
							[
								31324,
								31345
							],
							[
								31544,
								31584
							],
							[
								31739,
								31743
							],
							[
								31855,
								31859
							],
							[
								31928,
								31932
							],
							[
								32000,
								32004
							],
							[
								36643,
								36675
							],
							[
								37162,
								37172
							],
							[
								37222,
								37232
							],
							[
								37280,
								37290
							],
							[
								37868,
								37879
							],
							[
								37973,
								37977
							],
							[
								38004,
								38008
							],
							[
								38032,
								38036
							],
							[
								38060,
								38064
							],
							[
								38093,
								38130
							],
							[
								38569,
								38605
							],
							[
								38694,
								38737
							],
							[
								39024,
								39043
							],
							[
								39097,
								39102
							],
							[
								39369,
								39405
							],
							[
								39644,
								39649
							],
							[
								40409,
								40426
							],
							[
								40779,
								40789
							],
							[
								40885,
								40905
							],
							[
								40971,
								40994
							],
							[
								41082,
								41087
							],
							[
								41199,
								41222
							],
							[
								41310,
								41315
							],
							[
								41417,
								41429
							],
							[
								41544,
								41549
							],
							[
								41605,
								41634
							],
							[
								41813,
								41818
							],
							[
								42789,
								42847
							],
							[
								43811,
								43822
							],
							[
								43855,
								43866
							],
							[
								43915,
								43921
							],
							[
								43974,
								43982
							],
							[
								44280,
								44284
							],
							[
								44976,
								44982
							]
						],
						"symlist":
						[
							"d =>",
							"d =>",
							"traceProxy = (obj, handler) =>",
							" function(name, args)",
							"get(target, key, receiver)",
							"member = function()",
							"ConcatIterator = iterator =>",
							" gen =>",
							" (...args) =>",
							"toString()",
							"async function ImportModule(modulePath, ...args)",
							"module =>",
							" (acc, item) =>",
							"function CommandLine()",
							" (...args) =>",
							" (...args) =>",
							" (module, ...args) =>",
							"m =>",
							".show = value =>",
							".printNode = arg =>",
							"() =>",
							"(item, i, a) =>",
							"entry =>",
							"entry =>",
							"function* IncludeAll(dir, maxDepth = Infinity, pred = entry => /\\.[ch]$/.",
							"(entry))",
							"function SelectLocations(node)",
							" n =>",
							"prop =>",
							"function LocationString(loc)",
							"node =>",
							"function Structs(nodes)",
							"node =>",
							"field =>",
							"node =>",
							"(field, i) =>",
							"function Table(list, pred = (n, l) => true)",
							"(n, i) =>",
							"e =>",
							"k =>",
							"([i, l, n]) =>",
							" function returnType(n)",
							" function numArgs(n)",
							" function Params(n)",
							"p =>",
							"k =>",
							"([i, l, n]) =>",
							"(k, j) =>",
							"(acc, name) =>",
							" function padTrunc(len, pad = ' ')",
							" s =>",
							"(name, i) =>",
							"pad = (cols, pad, sep) =>",
							"(key, i) =>",
							"(s, col) =>",
							"(acc, n) =>",
							"(acc, row) =>",
							"function PrintRange(range, file)",
							"function OverlapRange(r1, r2)",
							"GetRange = r =>",
							"InRange = (i, r) =>",
							"function ParentNode(node, ast = $.data)",
							"function NextSibling(node, ast = $.data)",
							"function PreviousSibling(node, ast = $.data)",
							"function FirstChild(node, ast = $.data)",
							"function LastChild(node, ast = $.data)",
							"function Terminate(exitCode)",
							"function ParseStructs(text)",
							"function* (decl, includes)",
							"name =>",
							"function InspectStruct(decl, includes, compiler = 'clang')",
							"line =>",
							"line =>",
							"(col, i) =>",
							"([field, offset, size]) =>",
							"(acc, line) =>",
							"toString(sep = ' ')",
							"line =>",
							"function RoundTo(value, align)",
							"function MakeStructClass(decl, filename)",
							"function* GenerateStructClass(decl, ffiPrefix = '')",
							"line =>",
							"([field, member]) =>",
							"function GenerateGetSet(name, offset, type, ffiPrefix)",
							"toHex = v =>",
							"toHex = v =>",
							"function ByteLength2TypedArray(byteLength, signed, floating)",
							"function ByteLength2Value(byteLength, signed, floating)",
							"FFI_Function",
							"constructor(node, prefix = '')",
							"([name, type], idx) =>",
							"generateDefine(fp, lib)",
							" (name, lib) =>",
							"colorText = x =>",
							"generateDoc()",
							"push = (...args) =>",
							"field =>",
							"(field, col) =>",
							"js = type =>",
							"generateCall()",
							"([name, type]) =>",
							"generate(fp, lib, exp)",
							"generateFunction(fp, lib)",
							"([name, type]) =>",
							"p =>",
							"p =>",
							"compileFunction(fp, lib)",
							"function FdReader(fd, bufferSize = 1024)",
							"async (push, stop) =>",
							"async function CommandRead(args)",
							"async reader =>",
							" function ReadOutput(fd)",
							"async function LibraryExports(file)",
							"line =>",
							"line =>",
							"column =>",
							"(a, b) =>",
							"entry =>",
							"function SaveLibraries()",
							"(acc, [n, e]) =>",
							"function ProcessFile(file, debug = true)",
							"function ParseECMAScript(file, params = {})",
							" (fr, i) =>",
							"function PrintECMAScript(ast, comments, printer = ",
							"({ indent: 4 }, comments))",
							"function PrintCArray(strings)",
							"function Namespaces(nodePath, ast = $.data)",
							"p =>",
							"n =>",
							"function* Constants(node, t = (name, value) => [name, !isNaN(+value) ? +value : value])",
							"function GetImports(ast = $.data)",
							" n =>",
							"function GetIdentifiers(nodes, key = null)",
							" (n, k) =>",
							"function MemberNames(members, flags = 0)",
							" n =>",
							"path =>",
							"p =>",
							"p =>",
							"name =>",
							" n =>",
							"([node, ptr]) =>",
							"path =>",
							"p =>",
							"name =>",
							"name =>",
							"function UnsetLoc(node, pred = (v, p) => true)",
							" (v, k) =>",
							"function MakeFFI(node, lib, exp, fp)",
							"function* ()",
							"function MakeId(name)",
							"function MakeQuickJSClass(node, ast = $)",
							"n =>",
							"n =>",
							"n =>",
							"n =>",
							"async function ASTShell(...args)",
							" (a, p) =>",
							" (a, p) =>",
							" (a, p) =>",
							"get flags()",
							"v =>",
							"v =>",
							"d =>",
							"l =>",
							"async function Compile(file, ...args)",
							"select(name_or_id, pred = n => true)",
							"getByIdOrName(name_or_id, pred = n => true)",
							"getType(name_or_id)",
							" n =>",
							"getNamespace(name, root = this.data)",
							" n =>",
							"namespaceOf(node)",
							"toString()",
							"getClass(name_or_id)",
							"getFunction(name_or_id)",
							" n =>",
							"getVariable(name_or_id)",
							" n =>",
							"getLoc(node)",
							"() =>",
							"pathOf(needle, maxDepth = 10)",
							" n =>",
							"Pointer.prototype.chain = function(step, limit = Infinity)",
							".F = arg =>",
							".T = arg =>",
							" () =>",
							" node =>",
							"s =>",
							" fr =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABXDQAAICBkID0+CiAgZCA9PgogIHRyYWNlUHJveHkgPSAob2JqLCBoYW5kbGVyKSA9PgpmdW5jdGlvbihuYW1lLCBhcmdzKQogIGdldCh0YXJnZXQsIGtleSwgcmVjZWl2ZXIpCiAgbWVtYmVyID0gZnVuY3Rpb24oKQpDb25jYXRJdGVyYXRvciA9IGl0ZXJhdG9yID0+CmdlbiA9PgooLi4uYXJncykgPT4KICB0b1N0cmluZygpCkltcG9ydE1vZHVsZShtb2R1bGVQYXRoLCAuLi5hcmdzKQogIG1vZHVsZSA9PgooYWNjLCBpdGVtKSA9PgpDb21tYW5kTGluZSgpCiguLi5hcmdzKSA9PgooLi4uYXJncykgPT4KKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSB2YWx1ZSA9PgogIC5wcmludE5vZGUgPSBhcmcgPT4KKCkgPT4KKGl0ZW0sIGksIGEpID0+CiAgZW50cnkgPT4KICBlbnRyeSA9PgpJbmNsdWRlQWxsKGRpciwgbWF4RGVwdGggPSBJbmZpbml0eSwgcHJlZCA9IGVudHJ5ID0+IC9cLltjaF0kLy4KKGVudHJ5KSkKU2VsZWN0TG9jYXRpb25zKG5vZGUpCm4gPT4KICBwcm9wID0+CkxvY2F0aW9uU3RyaW5nKGxvYykKICBub2RlID0+ClN0cnVjdHMobm9kZXMpCiAgbm9kZSA9PgogIGZpZWxkID0+CiAgbm9kZSA9PgooZmllbGQsIGkpID0+ClRhYmxlKGxpc3QsIHByZWQgPSAobiwgbCkgPT4gdHJ1ZSkKKG4sIGkpID0+CiAgZSA9PgogIGsgPT4KKFtpLCBsLCBuXSkgPT4KICByZXR1cm5UeXBlKG4pCiAgbnVtQXJncyhuKQpQYXJhbXMobikKICBwID0+CiAgayA9PgooW2ksIGwsIG5dKSA9PgooaywgaikgPT4KKGFjYywgbmFtZSkgPT4KICBwYWRUcnVuYyhsZW4sIHBhZCA9ICcgJykKcyA9PgoobmFtZSwgaSkgPT4KICBwYWQgPSAoY29scywgcGFkLCBzZXApID0+CihrZXksIGkpID0+CihzLCBjb2wpID0+CihhY2MsIG4pID0+CihhY2MsIHJvdykgPT4KUHJpbnRSYW5nZShyYW5nZSwgZmlsZSkKT3ZlcmxhcFJhbmdlKHIxLCByMikKR2V0UmFuZ2UgPSByID0+CkluUmFuZ2UgPSAoaSwgcikgPT4KUGFyZW50Tm9kZShub2RlLCBhc3QgPSAkLmRhdGEpCk5leHRTaWJsaW5nKG5vZGUsIGFzdCA9ICQuZGF0YSkKUHJldmlvdXNTaWJsaW5nKG5vZGUsIGFzdCA9ICQuZGF0YSkKRmlyc3RDaGlsZChub2RlLCBhc3QgPSAkLmRhdGEpCkxhc3RDaGlsZChub2RlLCBhc3QgPSAkLmRhdGEpClRlcm1pbmF0ZShleGl0Q29kZSkKUGFyc2VTdHJ1Y3RzKHRleHQpCihkZWNsLCBpbmNsdWRlcykKICBuYW1lID0+Ckluc3BlY3RTdHJ1Y3QoZGVjbCwgaW5jbHVkZXMsIGNvbXBpbGVyID0gJ2NsYW5nJykKICBsaW5lID0+CiAgbGluZSA9PgooY29sLCBpKSA9PgooW2ZpZWxkLCBvZmZzZXQsIHNpemVdKSA9PgooYWNjLCBsaW5lKSA9PgogIHRvU3RyaW5nKHNlcCA9ICcgJykKICBsaW5lID0+ClJvdW5kVG8odmFsdWUsIGFsaWduKQpNYWtlU3RydWN0Q2xhc3MoZGVjbCwgZmlsZW5hbWUpCkdlbmVyYXRlU3RydWN0Q2xhc3MoZGVjbCwgZmZpUHJlZml4ID0gJycpCiAgbGluZSA9PgooW2ZpZWxkLCBtZW1iZXJdKSA9PgpHZW5lcmF0ZUdldFNldChuYW1lLCBvZmZzZXQsIHR5cGUsIGZmaVByZWZpeCkKICB0b0hleCA9IHYgPT4KICB0b0hleCA9IHYgPT4KQnl0ZUxlbmd0aDJUeXBlZEFycmF5KGJ5dGVMZW5ndGgsIHNpZ25lZCwgZmxvYXRpbmcpCkJ5dGVMZW5ndGgyVmFsdWUoYnl0ZUxlbmd0aCwgc2lnbmVkLCBmbG9hdGluZykKRkZJX0Z1bmN0aW9uCiAgY29uc3RydWN0b3Iobm9kZSwgcHJlZml4ID0gJycpCihbbmFtZSwgdHlwZV0sIGlkeCkgPT4KICBnZW5lcmF0ZURlZmluZShmcCwgbGliKQoobmFtZSwgbGliKSA9PgogIGNvbG9yVGV4dCA9IHggPT4KICBnZW5lcmF0ZURvYygpCiAgcHVzaCA9ICguLi5hcmdzKSA9PgogIGZpZWxkID0+CihmaWVsZCwgY29sKSA9PgogIGpzID0gdHlwZSA9PgogIGdlbmVyYXRlQ2FsbCgpCihbbmFtZSwgdHlwZV0pID0+CiAgZ2VuZXJhdGUoZnAsIGxpYiwgZXhwKQogIGdlbmVyYXRlRnVuY3Rpb24oZnAsIGxpYikKKFtuYW1lLCB0eXBlXSkgPT4KICBwID0+CiAgcCA9PgogIGNvbXBpbGVGdW5jdGlvbihmcCwgbGliKQpGZFJlYWRlcihmZCwgYnVmZmVyU2l6ZSA9IDEwMjQpCihwdXNoLCBzdG9wKSA9PgpDb21tYW5kUmVhZChhcmdzKQogIHJlYWRlciA9PgpSZWFkT3V0cHV0KGZkKQpMaWJyYXJ5RXhwb3J0cyhmaWxlKQogIGxpbmUgPT4KICBsaW5lID0+CiAgY29sdW1uID0+CihhLCBiKSA9PgogIGVudHJ5ID0+ClNhdmVMaWJyYXJpZXMoKQooYWNjLCBbbiwgZV0pID0+ClByb2Nlc3NGaWxlKGZpbGUsIGRlYnVnID0gdHJ1ZSkKUGFyc2VFQ01BU2NyaXB0KGZpbGUsIHBhcmFtcyA9IHt9KQooZnIsIGkpID0+ClByaW50RUNNQVNjcmlwdChhc3QsIGNvbW1lbnRzLCBwcmludGVyID0gCih7IGluZGVudDogNCB9LCBjb21tZW50cykpClByaW50Q0FycmF5KHN0cmluZ3MpCk5hbWVzcGFjZXMobm9kZVBhdGgsIGFzdCA9ICQuZGF0YSkKICBwID0+CiAgbiA9PgpDb25zdGFudHMobm9kZSwgdCA9IChuYW1lLCB2YWx1ZSkgPT4gW25hbWUsICFpc05hTigrdmFsdWUpID8gK3ZhbHVlIDogdmFsdWVdKQpHZXRJbXBvcnRzKGFzdCA9ICQuZGF0YSkKbiA9PgpHZXRJZGVudGlmaWVycyhub2Rlcywga2V5ID0gbnVsbCkKKG4sIGspID0+Ck1lbWJlck5hbWVzKG1lbWJlcnMsIGZsYWdzID0gMCkKbiA9PgogIHBhdGggPT4KICBwID0+CiAgcCA9PgogIG5hbWUgPT4KbiA9PgooW25vZGUsIHB0cl0pID0+CiAgcGF0aCA9PgogIHAgPT4KICBuYW1lID0+CiAgbmFtZSA9PgpVbnNldExvYyhub2RlLCBwcmVkID0gKHYsIHApID0+IHRydWUpCih2LCBrKSA9PgpNYWtlRkZJKG5vZGUsIGxpYiwgZXhwLCBmcCkKKCkKTWFrZUlkKG5hbWUpCk1ha2VRdWlja0pTQ2xhc3Mobm9kZSwgYXN0ID0gJCkKICBuID0+CiAgbiA9PgogIG4gPT4KICBuID0+CkFTVFNoZWxsKC4uLmFyZ3MpCihhLCBwKSA9PgooYSwgcCkgPT4KKGEsIHApID0+CiAgZ2V0IGZsYWdzKCkKICB2ID0+CiAgdiA9PgogIGQgPT4KICBsID0+CkNvbXBpbGUoZmlsZSwgLi4uYXJncykKICBzZWxlY3QobmFtZV9vcl9pZCwgcHJlZCA9IG4gPT4gdHJ1ZSkKICBnZXRCeUlkT3JOYW1lKG5hbWVfb3JfaWQsIHByZWQgPSBuID0+IHRydWUpCiAgZ2V0VHlwZShuYW1lX29yX2lkKQpuID0+CiAgZ2V0TmFtZXNwYWNlKG5hbWUsIHJvb3QgPSB0aGlzLmRhdGEpCm4gPT4KICBuYW1lc3BhY2VPZihub2RlKQogIHRvU3RyaW5nKCkKICBnZXRDbGFzcyhuYW1lX29yX2lkKQogIGdldEZ1bmN0aW9uKG5hbWVfb3JfaWQpCm4gPT4KICBnZXRWYXJpYWJsZShuYW1lX29yX2lkKQpuID0+CiAgZ2V0TG9jKG5vZGUpCigpID0+CiAgcGF0aE9mKG5lZWRsZSwgbWF4RGVwdGggPSAxMCkKbiA9PgpQb2ludGVyLnByb3RvdHlwZS5jaGFpbiA9IGZ1bmN0aW9uKHN0ZXAsIGxpbWl0ID0gSW5maW5pdHkpCiAgLkYgPSBhcmcgPT4KICAuVCA9IGFyZyA9PgooKSA9Pgpub2RlID0+CiAgcyA9PgpmciA9PgAAAAAAAAAAVw0AAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					1468,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/ast-shell.js",
						"symkeys":
						[
							[
								1970,
								1974
							],
							[
								2033,
								2037
							],
							[
								2073,
								2103
							],
							[
								2146,
								2167
							],
							[
								2316,
								2342
							],
							[
								2500,
								2519
							],
							[
								2848,
								2876
							],
							[
								3166,
								3174
							],
							[
								3175,
								3189
							],
							[
								3271,
								3281
							],
							[
								3344,
								3392
							],
							[
								3506,
								3515
							],
							[
								3625,
								3647
							],
							[
								4109,
								4131
							],
							[
								4495,
								4513
							],
							[
								4613,
								4631
							],
							[
								4737,
								4763
							],
							[
								4899,
								4903
							],
							[
								4982,
								4998
							],
							[
								5484,
								5503
							],
							[
								6002,
								6007
							],
							[
								6082,
								6097
							],
							[
								6182,
								6190
							],
							[
								6231,
								6239
							],
							[
								6611,
								6684
							],
							[
								6688,
								6696
							],
							[
								6793,
								6823
							],
							[
								6852,
								6857
							],
							[
								6890,
								6897
							],
							[
								6926,
								6954
							],
							[
								7291,
								7298
							],
							[
								7317,
								7340
							],
							[
								7370,
								7377
							],
							[
								7408,
								7416
							],
							[
								7454,
								7461
							],
							[
								7661,
								7674
							],
							[
								7855,
								7898
							],
							[
								7931,
								7940
							],
							[
								8001,
								8005
							],
							[
								8107,
								8111
							],
							[
								8147,
								8161
							],
							[
								8273,
								8301
							],
							[
								8506,
								8531
							],
							[
								8629,
								8653
							],
							[
								8726,
								8730
							],
							[
								8849,
								8853
							],
							[
								8917,
								8931
							],
							[
								8987,
								8996
							],
							[
								9294,
								9308
							],
							[
								9431,
								9466
							],
							[
								9555,
								9560
							],
							[
								9683,
								9695
							],
							[
								9748,
								9773
							],
							[
								9822,
								9833
							],
							[
								9873,
								9884
							],
							[
								10022,
								10033
							],
							[
								10121,
								10134
							],
							[
								10215,
								10247
							],
							[
								10485,
								10514
							],
							[
								10525,
								10540
							],
							[
								10602,
								10621
							],
							[
								10829,
								10868
							],
							[
								10933,
								10973
							],
							[
								11056,
								11100
							],
							[
								11182,
								11221
							],
							[
								11283,
								11321
							],
							[
								11407,
								11435
							],
							[
								11498,
								11525
							],
							[
								12076,
								12102
							],
							[
								12369,
								12376
							],
							[
								14292,
								14350
							],
							[
								15386,
								15393
							],
							[
								15457,
								15464
							],
							[
								15474,
								15485
							],
							[
								15526,
								15552
							],
							[
								15668,
								15682
							],
							[
								15979,
								15998
							],
							[
								16025,
								16032
							],
							[
								16121,
								16151
							],
							[
								16217,
								16257
							],
							[
								16433,
								16484
							],
							[
								17473,
								17480
							],
							[
								17887,
								17907
							],
							[
								18083,
								18137
							],
							[
								18326,
								18338
							],
							[
								18366,
								18378
							],
							[
								18995,
								19055
							],
							[
								19666,
								19721
							],
							[
								19817,
								19829
							],
							[
								19834,
								19864
							],
							[
								20145,
								20167
							],
							[
								20213,
								20236
							],
							[
								20308,
								20323
							],
							[
								20458,
								20474
							],
							[
								20878,
								20891
							],
							[
								21016,
								21035
							],
							[
								21087,
								21095
							],
							[
								21152,
								21167
							],
							[
								21327,
								21339
							],
							[
								21684,
								21698
							],
							[
								21798,
								21815
							],
							[
								22042,
								22064
							],
							[
								22181,
								22206
							],
							[
								22306,
								22323
							],
							[
								22378,
								22382
							],
							[
								22470,
								22474
							],
							[
								22526,
								22550
							],
							[
								22666,
								22706
							],
							[
								22767,
								22788
							],
							[
								23072,
								23104
							],
							[
								23589,
								23604
							],
							[
								23715,
								23740
							],
							[
								23909,
								23944
							],
							[
								24164,
								24171
							],
							[
								24260,
								24267
							],
							[
								24296,
								24305
							],
							[
								24342,
								24351
							],
							[
								24401,
								24409
							],
							[
								24451,
								24475
							],
							[
								24571,
								24587
							],
							[
								24623,
								24663
							],
							[
								24961,
								25004
							],
							[
								25947,
								25958
							],
							[
								26703,
								26753
							],
							[
								26775,
								26801
							],
							[
								26836,
								26865
							],
							[
								27209,
								27252
							],
							[
								27365,
								27369
							],
							[
								27385,
								27389
							],
							[
								27434,
								27521
							],
							[
								27688,
								27721
							],
							[
								27780,
								27785
							],
							[
								27855,
								27897
							],
							[
								27973,
								27983
							],
							[
								28102,
								28142
							],
							[
								28283,
								28288
							],
							[
								28346,
								28353
							],
							[
								28470,
								28474
							],
							[
								28553,
								28557
							],
							[
								28711,
								28718
							],
							[
								28805,
								28810
							],
							[
								28918,
								28934
							],
							[
								29045,
								29052
							],
							[
								29131,
								29135
							],
							[
								29196,
								29203
							],
							[
								29279,
								29286
							],
							[
								29343,
								29389
							],
							[
								29429,
								29439
							],
							[
								29592,
								29628
							],
							[
								29669,
								29681
							],
							[
								31324,
								31345
							],
							[
								31544,
								31584
							],
							[
								31739,
								31743
							],
							[
								31855,
								31859
							],
							[
								31928,
								31932
							],
							[
								32000,
								32004
							],
							[
								36643,
								36675
							],
							[
								37162,
								37172
							],
							[
								37222,
								37232
							],
							[
								37280,
								37290
							],
							[
								37868,
								37879
							],
							[
								37973,
								37977
							],
							[
								38004,
								38008
							],
							[
								38032,
								38036
							],
							[
								38060,
								38064
							],
							[
								38093,
								38130
							],
							[
								38569,
								38605
							],
							[
								38694,
								38737
							],
							[
								39024,
								39043
							],
							[
								39097,
								39102
							],
							[
								39369,
								39405
							],
							[
								39644,
								39649
							],
							[
								40409,
								40426
							],
							[
								40779,
								40789
							],
							[
								40885,
								40905
							],
							[
								40971,
								40994
							],
							[
								41082,
								41087
							],
							[
								41199,
								41222
							],
							[
								41310,
								41315
							],
							[
								41417,
								41429
							],
							[
								41544,
								41549
							],
							[
								41605,
								41634
							],
							[
								41813,
								41818
							],
							[
								42789,
								42847
							],
							[
								43811,
								43822
							],
							[
								43855,
								43866
							],
							[
								43915,
								43921
							],
							[
								43974,
								43982
							],
							[
								44280,
								44284
							],
							[
								44976,
								44982
							]
						],
						"symlist":
						[
							"d =>",
							"d =>",
							"traceProxy = (obj, handler) =>",
							" function(name, args)",
							"get(target, key, receiver)",
							"member = function()",
							"ConcatIterator = iterator =>",
							" gen =>",
							" (...args) =>",
							"toString()",
							"async function ImportModule(modulePath, ...args)",
							"module =>",
							" (acc, item) =>",
							"function CommandLine()",
							" (...args) =>",
							" (...args) =>",
							" (module, ...args) =>",
							"m =>",
							".show = value =>",
							".printNode = arg =>",
							"() =>",
							"(item, i, a) =>",
							"entry =>",
							"entry =>",
							"function* IncludeAll(dir, maxDepth = Infinity, pred = entry => /\\.[ch]$/.",
							"(entry))",
							"function SelectLocations(node)",
							" n =>",
							"prop =>",
							"function LocationString(loc)",
							"node =>",
							"function Structs(nodes)",
							"node =>",
							"field =>",
							"node =>",
							"(field, i) =>",
							"function Table(list, pred = (n, l) => true)",
							"(n, i) =>",
							"e =>",
							"k =>",
							"([i, l, n]) =>",
							" function returnType(n)",
							" function numArgs(n)",
							" function Params(n)",
							"p =>",
							"k =>",
							"([i, l, n]) =>",
							"(k, j) =>",
							"(acc, name) =>",
							" function padTrunc(len, pad = ' ')",
							" s =>",
							"(name, i) =>",
							"pad = (cols, pad, sep) =>",
							"(key, i) =>",
							"(s, col) =>",
							"(acc, n) =>",
							"(acc, row) =>",
							"function PrintRange(range, file)",
							"function OverlapRange(r1, r2)",
							"GetRange = r =>",
							"InRange = (i, r) =>",
							"function ParentNode(node, ast = $.data)",
							"function NextSibling(node, ast = $.data)",
							"function PreviousSibling(node, ast = $.data)",
							"function FirstChild(node, ast = $.data)",
							"function LastChild(node, ast = $.data)",
							"function Terminate(exitCode)",
							"function ParseStructs(text)",
							"function* (decl, includes)",
							"name =>",
							"function InspectStruct(decl, includes, compiler = 'clang')",
							"line =>",
							"line =>",
							"(col, i) =>",
							"([field, offset, size]) =>",
							"(acc, line) =>",
							"toString(sep = ' ')",
							"line =>",
							"function RoundTo(value, align)",
							"function MakeStructClass(decl, filename)",
							"function* GenerateStructClass(decl, ffiPrefix = '')",
							"line =>",
							"([field, member]) =>",
							"function GenerateGetSet(name, offset, type, ffiPrefix)",
							"toHex = v =>",
							"toHex = v =>",
							"function ByteLength2TypedArray(byteLength, signed, floating)",
							"function ByteLength2Value(byteLength, signed, floating)",
							"FFI_Function",
							"constructor(node, prefix = '')",
							"([name, type], idx) =>",
							"generateDefine(fp, lib)",
							" (name, lib) =>",
							"colorText = x =>",
							"generateDoc()",
							"push = (...args) =>",
							"field =>",
							"(field, col) =>",
							"js = type =>",
							"generateCall()",
							"([name, type]) =>",
							"generate(fp, lib, exp)",
							"generateFunction(fp, lib)",
							"([name, type]) =>",
							"p =>",
							"p =>",
							"compileFunction(fp, lib)",
							"function FdReader(fd, bufferSize = 1024)",
							"async (push, stop) =>",
							"async function CommandRead(args)",
							"async reader =>",
							" function ReadOutput(fd)",
							"async function LibraryExports(file)",
							"line =>",
							"line =>",
							"column =>",
							"(a, b) =>",
							"entry =>",
							"function SaveLibraries()",
							"(acc, [n, e]) =>",
							"function ProcessFile(file, debug = true)",
							"function ParseECMAScript(file, params = {})",
							" (fr, i) =>",
							"function PrintECMAScript(ast, comments, printer = ",
							"({ indent: 4 }, comments))",
							"function PrintCArray(strings)",
							"function Namespaces(nodePath, ast = $.data)",
							"p =>",
							"n =>",
							"function* Constants(node, t = (name, value) => [name, !isNaN(+value) ? +value : value])",
							"function GetImports(ast = $.data)",
							" n =>",
							"function GetIdentifiers(nodes, key = null)",
							" (n, k) =>",
							"function MemberNames(members, flags = 0)",
							" n =>",
							"path =>",
							"p =>",
							"p =>",
							"name =>",
							" n =>",
							"([node, ptr]) =>",
							"path =>",
							"p =>",
							"name =>",
							"name =>",
							"function UnsetLoc(node, pred = (v, p) => true)",
							" (v, k) =>",
							"function MakeFFI(node, lib, exp, fp)",
							"function* ()",
							"function MakeId(name)",
							"function MakeQuickJSClass(node, ast = $)",
							"n =>",
							"n =>",
							"n =>",
							"n =>",
							"async function ASTShell(...args)",
							" (a, p) =>",
							" (a, p) =>",
							" (a, p) =>",
							"get flags()",
							"v =>",
							"v =>",
							"d =>",
							"l =>",
							"async function Compile(file, ...args)",
							"select(name_or_id, pred = n => true)",
							"getByIdOrName(name_or_id, pred = n => true)",
							"getType(name_or_id)",
							" n =>",
							"getNamespace(name, root = this.data)",
							" n =>",
							"namespaceOf(node)",
							"toString()",
							"getClass(name_or_id)",
							"getFunction(name_or_id)",
							" n =>",
							"getVariable(name_or_id)",
							" n =>",
							"getLoc(node)",
							"() =>",
							"pathOf(needle, maxDepth = 10)",
							" n =>",
							"Pointer.prototype.chain = function(step, limit = Infinity)",
							".F = arg =>",
							".T = arg =>",
							" () =>",
							" node =>",
							"s =>",
							" fr =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABXDQAAICBkID0+CiAgZCA9PgogIHRyYWNlUHJveHkgPSAob2JqLCBoYW5kbGVyKSA9PgpmdW5jdGlvbihuYW1lLCBhcmdzKQogIGdldCh0YXJnZXQsIGtleSwgcmVjZWl2ZXIpCiAgbWVtYmVyID0gZnVuY3Rpb24oKQpDb25jYXRJdGVyYXRvciA9IGl0ZXJhdG9yID0+CmdlbiA9PgooLi4uYXJncykgPT4KICB0b1N0cmluZygpCkltcG9ydE1vZHVsZShtb2R1bGVQYXRoLCAuLi5hcmdzKQogIG1vZHVsZSA9PgooYWNjLCBpdGVtKSA9PgpDb21tYW5kTGluZSgpCiguLi5hcmdzKSA9PgooLi4uYXJncykgPT4KKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSB2YWx1ZSA9PgogIC5wcmludE5vZGUgPSBhcmcgPT4KKCkgPT4KKGl0ZW0sIGksIGEpID0+CiAgZW50cnkgPT4KICBlbnRyeSA9PgpJbmNsdWRlQWxsKGRpciwgbWF4RGVwdGggPSBJbmZpbml0eSwgcHJlZCA9IGVudHJ5ID0+IC9cLltjaF0kLy4KKGVudHJ5KSkKU2VsZWN0TG9jYXRpb25zKG5vZGUpCm4gPT4KICBwcm9wID0+CkxvY2F0aW9uU3RyaW5nKGxvYykKICBub2RlID0+ClN0cnVjdHMobm9kZXMpCiAgbm9kZSA9PgogIGZpZWxkID0+CiAgbm9kZSA9PgooZmllbGQsIGkpID0+ClRhYmxlKGxpc3QsIHByZWQgPSAobiwgbCkgPT4gdHJ1ZSkKKG4sIGkpID0+CiAgZSA9PgogIGsgPT4KKFtpLCBsLCBuXSkgPT4KICByZXR1cm5UeXBlKG4pCiAgbnVtQXJncyhuKQpQYXJhbXMobikKICBwID0+CiAgayA9PgooW2ksIGwsIG5dKSA9PgooaywgaikgPT4KKGFjYywgbmFtZSkgPT4KICBwYWRUcnVuYyhsZW4sIHBhZCA9ICcgJykKcyA9PgoobmFtZSwgaSkgPT4KICBwYWQgPSAoY29scywgcGFkLCBzZXApID0+CihrZXksIGkpID0+CihzLCBjb2wpID0+CihhY2MsIG4pID0+CihhY2MsIHJvdykgPT4KUHJpbnRSYW5nZShyYW5nZSwgZmlsZSkKT3ZlcmxhcFJhbmdlKHIxLCByMikKR2V0UmFuZ2UgPSByID0+CkluUmFuZ2UgPSAoaSwgcikgPT4KUGFyZW50Tm9kZShub2RlLCBhc3QgPSAkLmRhdGEpCk5leHRTaWJsaW5nKG5vZGUsIGFzdCA9ICQuZGF0YSkKUHJldmlvdXNTaWJsaW5nKG5vZGUsIGFzdCA9ICQuZGF0YSkKRmlyc3RDaGlsZChub2RlLCBhc3QgPSAkLmRhdGEpCkxhc3RDaGlsZChub2RlLCBhc3QgPSAkLmRhdGEpClRlcm1pbmF0ZShleGl0Q29kZSkKUGFyc2VTdHJ1Y3RzKHRleHQpCihkZWNsLCBpbmNsdWRlcykKICBuYW1lID0+Ckluc3BlY3RTdHJ1Y3QoZGVjbCwgaW5jbHVkZXMsIGNvbXBpbGVyID0gJ2NsYW5nJykKICBsaW5lID0+CiAgbGluZSA9PgooY29sLCBpKSA9PgooW2ZpZWxkLCBvZmZzZXQsIHNpemVdKSA9PgooYWNjLCBsaW5lKSA9PgogIHRvU3RyaW5nKHNlcCA9ICcgJykKICBsaW5lID0+ClJvdW5kVG8odmFsdWUsIGFsaWduKQpNYWtlU3RydWN0Q2xhc3MoZGVjbCwgZmlsZW5hbWUpCkdlbmVyYXRlU3RydWN0Q2xhc3MoZGVjbCwgZmZpUHJlZml4ID0gJycpCiAgbGluZSA9PgooW2ZpZWxkLCBtZW1iZXJdKSA9PgpHZW5lcmF0ZUdldFNldChuYW1lLCBvZmZzZXQsIHR5cGUsIGZmaVByZWZpeCkKICB0b0hleCA9IHYgPT4KICB0b0hleCA9IHYgPT4KQnl0ZUxlbmd0aDJUeXBlZEFycmF5KGJ5dGVMZW5ndGgsIHNpZ25lZCwgZmxvYXRpbmcpCkJ5dGVMZW5ndGgyVmFsdWUoYnl0ZUxlbmd0aCwgc2lnbmVkLCBmbG9hdGluZykKRkZJX0Z1bmN0aW9uCiAgY29uc3RydWN0b3Iobm9kZSwgcHJlZml4ID0gJycpCihbbmFtZSwgdHlwZV0sIGlkeCkgPT4KICBnZW5lcmF0ZURlZmluZShmcCwgbGliKQoobmFtZSwgbGliKSA9PgogIGNvbG9yVGV4dCA9IHggPT4KICBnZW5lcmF0ZURvYygpCiAgcHVzaCA9ICguLi5hcmdzKSA9PgogIGZpZWxkID0+CihmaWVsZCwgY29sKSA9PgogIGpzID0gdHlwZSA9PgogIGdlbmVyYXRlQ2FsbCgpCihbbmFtZSwgdHlwZV0pID0+CiAgZ2VuZXJhdGUoZnAsIGxpYiwgZXhwKQogIGdlbmVyYXRlRnVuY3Rpb24oZnAsIGxpYikKKFtuYW1lLCB0eXBlXSkgPT4KICBwID0+CiAgcCA9PgogIGNvbXBpbGVGdW5jdGlvbihmcCwgbGliKQpGZFJlYWRlcihmZCwgYnVmZmVyU2l6ZSA9IDEwMjQpCihwdXNoLCBzdG9wKSA9PgpDb21tYW5kUmVhZChhcmdzKQogIHJlYWRlciA9PgpSZWFkT3V0cHV0KGZkKQpMaWJyYXJ5RXhwb3J0cyhmaWxlKQogIGxpbmUgPT4KICBsaW5lID0+CiAgY29sdW1uID0+CihhLCBiKSA9PgogIGVudHJ5ID0+ClNhdmVMaWJyYXJpZXMoKQooYWNjLCBbbiwgZV0pID0+ClByb2Nlc3NGaWxlKGZpbGUsIGRlYnVnID0gdHJ1ZSkKUGFyc2VFQ01BU2NyaXB0KGZpbGUsIHBhcmFtcyA9IHt9KQooZnIsIGkpID0+ClByaW50RUNNQVNjcmlwdChhc3QsIGNvbW1lbnRzLCBwcmludGVyID0gCih7IGluZGVudDogNCB9LCBjb21tZW50cykpClByaW50Q0FycmF5KHN0cmluZ3MpCk5hbWVzcGFjZXMobm9kZVBhdGgsIGFzdCA9ICQuZGF0YSkKICBwID0+CiAgbiA9PgpDb25zdGFudHMobm9kZSwgdCA9IChuYW1lLCB2YWx1ZSkgPT4gW25hbWUsICFpc05hTigrdmFsdWUpID8gK3ZhbHVlIDogdmFsdWVdKQpHZXRJbXBvcnRzKGFzdCA9ICQuZGF0YSkKbiA9PgpHZXRJZGVudGlmaWVycyhub2Rlcywga2V5ID0gbnVsbCkKKG4sIGspID0+Ck1lbWJlck5hbWVzKG1lbWJlcnMsIGZsYWdzID0gMCkKbiA9PgogIHBhdGggPT4KICBwID0+CiAgcCA9PgogIG5hbWUgPT4KbiA9PgooW25vZGUsIHB0cl0pID0+CiAgcGF0aCA9PgogIHAgPT4KICBuYW1lID0+CiAgbmFtZSA9PgpVbnNldExvYyhub2RlLCBwcmVkID0gKHYsIHApID0+IHRydWUpCih2LCBrKSA9PgpNYWtlRkZJKG5vZGUsIGxpYiwgZXhwLCBmcCkKKCkKTWFrZUlkKG5hbWUpCk1ha2VRdWlja0pTQ2xhc3Mobm9kZSwgYXN0ID0gJCkKICBuID0+CiAgbiA9PgogIG4gPT4KICBuID0+CkFTVFNoZWxsKC4uLmFyZ3MpCihhLCBwKSA9PgooYSwgcCkgPT4KKGEsIHApID0+CiAgZ2V0IGZsYWdzKCkKICB2ID0+CiAgdiA9PgogIGQgPT4KICBsID0+CkNvbXBpbGUoZmlsZSwgLi4uYXJncykKICBzZWxlY3QobmFtZV9vcl9pZCwgcHJlZCA9IG4gPT4gdHJ1ZSkKICBnZXRCeUlkT3JOYW1lKG5hbWVfb3JfaWQsIHByZWQgPSBuID0+IHRydWUpCiAgZ2V0VHlwZShuYW1lX29yX2lkKQpuID0+CiAgZ2V0TmFtZXNwYWNlKG5hbWUsIHJvb3QgPSB0aGlzLmRhdGEpCm4gPT4KICBuYW1lc3BhY2VPZihub2RlKQogIHRvU3RyaW5nKCkKICBnZXRDbGFzcyhuYW1lX29yX2lkKQogIGdldEZ1bmN0aW9uKG5hbWVfb3JfaWQpCm4gPT4KICBnZXRWYXJpYWJsZShuYW1lX29yX2lkKQpuID0+CiAgZ2V0TG9jKG5vZGUpCigpID0+CiAgcGF0aE9mKG5lZWRsZSwgbWF4RGVwdGggPSAxMCkKbiA9PgpQb2ludGVyLnByb3RvdHlwZS5jaGFpbiA9IGZ1bmN0aW9uKHN0ZXAsIGxpbWl0ID0gSW5maW5pdHkpCiAgLkYgPSBhcmcgPT4KICAuVCA9IGFyZyA9PgooKSA9Pgpub2RlID0+CiAgcyA9PgpmciA9PgAAAAAAAAAAVw0AAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					1469,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/ast-shell.js",
						"symkeys":
						[
							[
								1970,
								1974
							],
							[
								2033,
								2037
							],
							[
								2073,
								2103
							],
							[
								2146,
								2167
							],
							[
								2316,
								2342
							],
							[
								2500,
								2519
							],
							[
								2848,
								2876
							],
							[
								3166,
								3174
							],
							[
								3175,
								3189
							],
							[
								3271,
								3281
							],
							[
								3344,
								3392
							],
							[
								3506,
								3515
							],
							[
								3625,
								3647
							],
							[
								4109,
								4131
							],
							[
								4495,
								4513
							],
							[
								4613,
								4631
							],
							[
								4737,
								4763
							],
							[
								4899,
								4903
							],
							[
								4982,
								4998
							],
							[
								5484,
								5503
							],
							[
								6002,
								6007
							],
							[
								6082,
								6097
							],
							[
								6182,
								6190
							],
							[
								6231,
								6239
							],
							[
								6611,
								6684
							],
							[
								6688,
								6696
							],
							[
								6793,
								6823
							],
							[
								6852,
								6857
							],
							[
								6890,
								6897
							],
							[
								6926,
								6954
							],
							[
								7291,
								7298
							],
							[
								7317,
								7340
							],
							[
								7370,
								7377
							],
							[
								7408,
								7416
							],
							[
								7454,
								7461
							],
							[
								7661,
								7674
							],
							[
								7855,
								7898
							],
							[
								7931,
								7940
							],
							[
								8001,
								8005
							],
							[
								8107,
								8111
							],
							[
								8147,
								8161
							],
							[
								8273,
								8301
							],
							[
								8506,
								8531
							],
							[
								8629,
								8653
							],
							[
								8726,
								8730
							],
							[
								8849,
								8853
							],
							[
								8917,
								8931
							],
							[
								8987,
								8996
							],
							[
								9294,
								9308
							],
							[
								9431,
								9466
							],
							[
								9555,
								9560
							],
							[
								9683,
								9695
							],
							[
								9748,
								9773
							],
							[
								9822,
								9833
							],
							[
								9873,
								9884
							],
							[
								10022,
								10033
							],
							[
								10121,
								10134
							],
							[
								10215,
								10247
							],
							[
								10485,
								10514
							],
							[
								10525,
								10540
							],
							[
								10602,
								10621
							],
							[
								10829,
								10868
							],
							[
								10933,
								10973
							],
							[
								11056,
								11100
							],
							[
								11182,
								11221
							],
							[
								11283,
								11321
							],
							[
								11407,
								11435
							],
							[
								11498,
								11525
							],
							[
								12076,
								12102
							],
							[
								12369,
								12376
							],
							[
								14292,
								14350
							],
							[
								15386,
								15393
							],
							[
								15457,
								15464
							],
							[
								15474,
								15485
							],
							[
								15526,
								15552
							],
							[
								15668,
								15682
							],
							[
								15979,
								15998
							],
							[
								16025,
								16032
							],
							[
								16121,
								16151
							],
							[
								16217,
								16257
							],
							[
								16433,
								16484
							],
							[
								17473,
								17480
							],
							[
								17887,
								17907
							],
							[
								18083,
								18137
							],
							[
								18326,
								18338
							],
							[
								18366,
								18378
							],
							[
								18995,
								19055
							],
							[
								19666,
								19721
							],
							[
								19817,
								19829
							],
							[
								19834,
								19864
							],
							[
								20145,
								20167
							],
							[
								20213,
								20236
							],
							[
								20308,
								20323
							],
							[
								20458,
								20474
							],
							[
								20878,
								20891
							],
							[
								21016,
								21035
							],
							[
								21087,
								21095
							],
							[
								21152,
								21167
							],
							[
								21327,
								21339
							],
							[
								21684,
								21698
							],
							[
								21798,
								21815
							],
							[
								22042,
								22064
							],
							[
								22181,
								22206
							],
							[
								22306,
								22323
							],
							[
								22378,
								22382
							],
							[
								22470,
								22474
							],
							[
								22526,
								22550
							],
							[
								22666,
								22706
							],
							[
								22767,
								22788
							],
							[
								23072,
								23104
							],
							[
								23589,
								23604
							],
							[
								23715,
								23740
							],
							[
								23909,
								23944
							],
							[
								24164,
								24171
							],
							[
								24260,
								24267
							],
							[
								24296,
								24305
							],
							[
								24342,
								24351
							],
							[
								24401,
								24409
							],
							[
								24451,
								24475
							],
							[
								24571,
								24587
							],
							[
								24623,
								24663
							],
							[
								24961,
								25004
							],
							[
								25947,
								25958
							],
							[
								26703,
								26753
							],
							[
								26775,
								26801
							],
							[
								26836,
								26865
							],
							[
								27209,
								27252
							],
							[
								27365,
								27369
							],
							[
								27385,
								27389
							],
							[
								27434,
								27521
							],
							[
								27688,
								27721
							],
							[
								27780,
								27785
							],
							[
								27855,
								27897
							],
							[
								27973,
								27983
							],
							[
								28102,
								28142
							],
							[
								28283,
								28288
							],
							[
								28346,
								28353
							],
							[
								28470,
								28474
							],
							[
								28553,
								28557
							],
							[
								28711,
								28718
							],
							[
								28805,
								28810
							],
							[
								28918,
								28934
							],
							[
								29045,
								29052
							],
							[
								29131,
								29135
							],
							[
								29196,
								29203
							],
							[
								29279,
								29286
							],
							[
								29343,
								29389
							],
							[
								29429,
								29439
							],
							[
								29592,
								29628
							],
							[
								29669,
								29681
							],
							[
								31324,
								31345
							],
							[
								31544,
								31584
							],
							[
								31739,
								31743
							],
							[
								31855,
								31859
							],
							[
								31928,
								31932
							],
							[
								32000,
								32004
							],
							[
								36643,
								36675
							],
							[
								37162,
								37172
							],
							[
								37222,
								37232
							],
							[
								37280,
								37290
							],
							[
								37868,
								37879
							],
							[
								37973,
								37977
							],
							[
								38004,
								38008
							],
							[
								38032,
								38036
							],
							[
								38060,
								38064
							],
							[
								38093,
								38130
							],
							[
								38569,
								38605
							],
							[
								38694,
								38737
							],
							[
								39024,
								39043
							],
							[
								39097,
								39102
							],
							[
								39369,
								39405
							],
							[
								39644,
								39649
							],
							[
								40409,
								40426
							],
							[
								40779,
								40789
							],
							[
								40885,
								40905
							],
							[
								40971,
								40994
							],
							[
								41082,
								41087
							],
							[
								41199,
								41222
							],
							[
								41310,
								41315
							],
							[
								41417,
								41429
							],
							[
								41544,
								41549
							],
							[
								41605,
								41634
							],
							[
								41813,
								41818
							],
							[
								42789,
								42847
							],
							[
								43811,
								43822
							],
							[
								43855,
								43866
							],
							[
								43915,
								43921
							],
							[
								43974,
								43982
							],
							[
								44280,
								44284
							],
							[
								44976,
								44982
							]
						],
						"symlist":
						[
							"d =>",
							"d =>",
							"traceProxy = (obj, handler) =>",
							" function(name, args)",
							"get(target, key, receiver)",
							"member = function()",
							"ConcatIterator = iterator =>",
							" gen =>",
							" (...args) =>",
							"toString()",
							"async function ImportModule(modulePath, ...args)",
							"module =>",
							" (acc, item) =>",
							"function CommandLine()",
							" (...args) =>",
							" (...args) =>",
							" (module, ...args) =>",
							"m =>",
							".show = value =>",
							".printNode = arg =>",
							"() =>",
							"(item, i, a) =>",
							"entry =>",
							"entry =>",
							"function* IncludeAll(dir, maxDepth = Infinity, pred = entry => /\\.[ch]$/.",
							"(entry))",
							"function SelectLocations(node)",
							" n =>",
							"prop =>",
							"function LocationString(loc)",
							"node =>",
							"function Structs(nodes)",
							"node =>",
							"field =>",
							"node =>",
							"(field, i) =>",
							"function Table(list, pred = (n, l) => true)",
							"(n, i) =>",
							"e =>",
							"k =>",
							"([i, l, n]) =>",
							" function returnType(n)",
							" function numArgs(n)",
							" function Params(n)",
							"p =>",
							"k =>",
							"([i, l, n]) =>",
							"(k, j) =>",
							"(acc, name) =>",
							" function padTrunc(len, pad = ' ')",
							" s =>",
							"(name, i) =>",
							"pad = (cols, pad, sep) =>",
							"(key, i) =>",
							"(s, col) =>",
							"(acc, n) =>",
							"(acc, row) =>",
							"function PrintRange(range, file)",
							"function OverlapRange(r1, r2)",
							"GetRange = r =>",
							"InRange = (i, r) =>",
							"function ParentNode(node, ast = $.data)",
							"function NextSibling(node, ast = $.data)",
							"function PreviousSibling(node, ast = $.data)",
							"function FirstChild(node, ast = $.data)",
							"function LastChild(node, ast = $.data)",
							"function Terminate(exitCode)",
							"function ParseStructs(text)",
							"function* (decl, includes)",
							"name =>",
							"function InspectStruct(decl, includes, compiler = 'clang')",
							"line =>",
							"line =>",
							"(col, i) =>",
							"([field, offset, size]) =>",
							"(acc, line) =>",
							"toString(sep = ' ')",
							"line =>",
							"function RoundTo(value, align)",
							"function MakeStructClass(decl, filename)",
							"function* GenerateStructClass(decl, ffiPrefix = '')",
							"line =>",
							"([field, member]) =>",
							"function GenerateGetSet(name, offset, type, ffiPrefix)",
							"toHex = v =>",
							"toHex = v =>",
							"function ByteLength2TypedArray(byteLength, signed, floating)",
							"function ByteLength2Value(byteLength, signed, floating)",
							"FFI_Function",
							"constructor(node, prefix = '')",
							"([name, type], idx) =>",
							"generateDefine(fp, lib)",
							" (name, lib) =>",
							"colorText = x =>",
							"generateDoc()",
							"push = (...args) =>",
							"field =>",
							"(field, col) =>",
							"js = type =>",
							"generateCall()",
							"([name, type]) =>",
							"generate(fp, lib, exp)",
							"generateFunction(fp, lib)",
							"([name, type]) =>",
							"p =>",
							"p =>",
							"compileFunction(fp, lib)",
							"function FdReader(fd, bufferSize = 1024)",
							"async (push, stop) =>",
							"async function CommandRead(args)",
							"async reader =>",
							" function ReadOutput(fd)",
							"async function LibraryExports(file)",
							"line =>",
							"line =>",
							"column =>",
							"(a, b) =>",
							"entry =>",
							"function SaveLibraries()",
							"(acc, [n, e]) =>",
							"function ProcessFile(file, debug = true)",
							"function ParseECMAScript(file, params = {})",
							" (fr, i) =>",
							"function PrintECMAScript(ast, comments, printer = ",
							"({ indent: 4 }, comments))",
							"function PrintCArray(strings)",
							"function Namespaces(nodePath, ast = $.data)",
							"p =>",
							"n =>",
							"function* Constants(node, t = (name, value) => [name, !isNaN(+value) ? +value : value])",
							"function GetImports(ast = $.data)",
							" n =>",
							"function GetIdentifiers(nodes, key = null)",
							" (n, k) =>",
							"function MemberNames(members, flags = 0)",
							" n =>",
							"path =>",
							"p =>",
							"p =>",
							"name =>",
							" n =>",
							"([node, ptr]) =>",
							"path =>",
							"p =>",
							"name =>",
							"name =>",
							"function UnsetLoc(node, pred = (v, p) => true)",
							" (v, k) =>",
							"function MakeFFI(node, lib, exp, fp)",
							"function* ()",
							"function MakeId(name)",
							"function MakeQuickJSClass(node, ast = $)",
							"n =>",
							"n =>",
							"n =>",
							"n =>",
							"async function ASTShell(...args)",
							" (a, p) =>",
							" (a, p) =>",
							" (a, p) =>",
							"get flags()",
							"v =>",
							"v =>",
							"d =>",
							"l =>",
							"async function Compile(file, ...args)",
							"select(name_or_id, pred = n => true)",
							"getByIdOrName(name_or_id, pred = n => true)",
							"getType(name_or_id)",
							" n =>",
							"getNamespace(name, root = this.data)",
							" n =>",
							"namespaceOf(node)",
							"toString()",
							"getClass(name_or_id)",
							"getFunction(name_or_id)",
							" n =>",
							"getVariable(name_or_id)",
							" n =>",
							"getLoc(node)",
							"() =>",
							"pathOf(needle, maxDepth = 10)",
							" n =>",
							"Pointer.prototype.chain = function(step, limit = Infinity)",
							".F = arg =>",
							".T = arg =>",
							" () =>",
							" node =>",
							"s =>",
							" fr =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABXDQAAICBkID0+CiAgZCA9PgogIHRyYWNlUHJveHkgPSAob2JqLCBoYW5kbGVyKSA9PgpmdW5jdGlvbihuYW1lLCBhcmdzKQogIGdldCh0YXJnZXQsIGtleSwgcmVjZWl2ZXIpCiAgbWVtYmVyID0gZnVuY3Rpb24oKQpDb25jYXRJdGVyYXRvciA9IGl0ZXJhdG9yID0+CmdlbiA9PgooLi4uYXJncykgPT4KICB0b1N0cmluZygpCkltcG9ydE1vZHVsZShtb2R1bGVQYXRoLCAuLi5hcmdzKQogIG1vZHVsZSA9PgooYWNjLCBpdGVtKSA9PgpDb21tYW5kTGluZSgpCiguLi5hcmdzKSA9PgooLi4uYXJncykgPT4KKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSB2YWx1ZSA9PgogIC5wcmludE5vZGUgPSBhcmcgPT4KKCkgPT4KKGl0ZW0sIGksIGEpID0+CiAgZW50cnkgPT4KICBlbnRyeSA9PgpJbmNsdWRlQWxsKGRpciwgbWF4RGVwdGggPSBJbmZpbml0eSwgcHJlZCA9IGVudHJ5ID0+IC9cLltjaF0kLy4KKGVudHJ5KSkKU2VsZWN0TG9jYXRpb25zKG5vZGUpCm4gPT4KICBwcm9wID0+CkxvY2F0aW9uU3RyaW5nKGxvYykKICBub2RlID0+ClN0cnVjdHMobm9kZXMpCiAgbm9kZSA9PgogIGZpZWxkID0+CiAgbm9kZSA9PgooZmllbGQsIGkpID0+ClRhYmxlKGxpc3QsIHByZWQgPSAobiwgbCkgPT4gdHJ1ZSkKKG4sIGkpID0+CiAgZSA9PgogIGsgPT4KKFtpLCBsLCBuXSkgPT4KICByZXR1cm5UeXBlKG4pCiAgbnVtQXJncyhuKQpQYXJhbXMobikKICBwID0+CiAgayA9PgooW2ksIGwsIG5dKSA9PgooaywgaikgPT4KKGFjYywgbmFtZSkgPT4KICBwYWRUcnVuYyhsZW4sIHBhZCA9ICcgJykKcyA9PgoobmFtZSwgaSkgPT4KICBwYWQgPSAoY29scywgcGFkLCBzZXApID0+CihrZXksIGkpID0+CihzLCBjb2wpID0+CihhY2MsIG4pID0+CihhY2MsIHJvdykgPT4KUHJpbnRSYW5nZShyYW5nZSwgZmlsZSkKT3ZlcmxhcFJhbmdlKHIxLCByMikKR2V0UmFuZ2UgPSByID0+CkluUmFuZ2UgPSAoaSwgcikgPT4KUGFyZW50Tm9kZShub2RlLCBhc3QgPSAkLmRhdGEpCk5leHRTaWJsaW5nKG5vZGUsIGFzdCA9ICQuZGF0YSkKUHJldmlvdXNTaWJsaW5nKG5vZGUsIGFzdCA9ICQuZGF0YSkKRmlyc3RDaGlsZChub2RlLCBhc3QgPSAkLmRhdGEpCkxhc3RDaGlsZChub2RlLCBhc3QgPSAkLmRhdGEpClRlcm1pbmF0ZShleGl0Q29kZSkKUGFyc2VTdHJ1Y3RzKHRleHQpCihkZWNsLCBpbmNsdWRlcykKICBuYW1lID0+Ckluc3BlY3RTdHJ1Y3QoZGVjbCwgaW5jbHVkZXMsIGNvbXBpbGVyID0gJ2NsYW5nJykKICBsaW5lID0+CiAgbGluZSA9PgooY29sLCBpKSA9PgooW2ZpZWxkLCBvZmZzZXQsIHNpemVdKSA9PgooYWNjLCBsaW5lKSA9PgogIHRvU3RyaW5nKHNlcCA9ICcgJykKICBsaW5lID0+ClJvdW5kVG8odmFsdWUsIGFsaWduKQpNYWtlU3RydWN0Q2xhc3MoZGVjbCwgZmlsZW5hbWUpCkdlbmVyYXRlU3RydWN0Q2xhc3MoZGVjbCwgZmZpUHJlZml4ID0gJycpCiAgbGluZSA9PgooW2ZpZWxkLCBtZW1iZXJdKSA9PgpHZW5lcmF0ZUdldFNldChuYW1lLCBvZmZzZXQsIHR5cGUsIGZmaVByZWZpeCkKICB0b0hleCA9IHYgPT4KICB0b0hleCA9IHYgPT4KQnl0ZUxlbmd0aDJUeXBlZEFycmF5KGJ5dGVMZW5ndGgsIHNpZ25lZCwgZmxvYXRpbmcpCkJ5dGVMZW5ndGgyVmFsdWUoYnl0ZUxlbmd0aCwgc2lnbmVkLCBmbG9hdGluZykKRkZJX0Z1bmN0aW9uCiAgY29uc3RydWN0b3Iobm9kZSwgcHJlZml4ID0gJycpCihbbmFtZSwgdHlwZV0sIGlkeCkgPT4KICBnZW5lcmF0ZURlZmluZShmcCwgbGliKQoobmFtZSwgbGliKSA9PgogIGNvbG9yVGV4dCA9IHggPT4KICBnZW5lcmF0ZURvYygpCiAgcHVzaCA9ICguLi5hcmdzKSA9PgogIGZpZWxkID0+CihmaWVsZCwgY29sKSA9PgogIGpzID0gdHlwZSA9PgogIGdlbmVyYXRlQ2FsbCgpCihbbmFtZSwgdHlwZV0pID0+CiAgZ2VuZXJhdGUoZnAsIGxpYiwgZXhwKQogIGdlbmVyYXRlRnVuY3Rpb24oZnAsIGxpYikKKFtuYW1lLCB0eXBlXSkgPT4KICBwID0+CiAgcCA9PgogIGNvbXBpbGVGdW5jdGlvbihmcCwgbGliKQpGZFJlYWRlcihmZCwgYnVmZmVyU2l6ZSA9IDEwMjQpCihwdXNoLCBzdG9wKSA9PgpDb21tYW5kUmVhZChhcmdzKQogIHJlYWRlciA9PgpSZWFkT3V0cHV0KGZkKQpMaWJyYXJ5RXhwb3J0cyhmaWxlKQogIGxpbmUgPT4KICBsaW5lID0+CiAgY29sdW1uID0+CihhLCBiKSA9PgogIGVudHJ5ID0+ClNhdmVMaWJyYXJpZXMoKQooYWNjLCBbbiwgZV0pID0+ClByb2Nlc3NGaWxlKGZpbGUsIGRlYnVnID0gdHJ1ZSkKUGFyc2VFQ01BU2NyaXB0KGZpbGUsIHBhcmFtcyA9IHt9KQooZnIsIGkpID0+ClByaW50RUNNQVNjcmlwdChhc3QsIGNvbW1lbnRzLCBwcmludGVyID0gCih7IGluZGVudDogNCB9LCBjb21tZW50cykpClByaW50Q0FycmF5KHN0cmluZ3MpCk5hbWVzcGFjZXMobm9kZVBhdGgsIGFzdCA9ICQuZGF0YSkKICBwID0+CiAgbiA9PgpDb25zdGFudHMobm9kZSwgdCA9IChuYW1lLCB2YWx1ZSkgPT4gW25hbWUsICFpc05hTigrdmFsdWUpID8gK3ZhbHVlIDogdmFsdWVdKQpHZXRJbXBvcnRzKGFzdCA9ICQuZGF0YSkKbiA9PgpHZXRJZGVudGlmaWVycyhub2Rlcywga2V5ID0gbnVsbCkKKG4sIGspID0+Ck1lbWJlck5hbWVzKG1lbWJlcnMsIGZsYWdzID0gMCkKbiA9PgogIHBhdGggPT4KICBwID0+CiAgcCA9PgogIG5hbWUgPT4KbiA9PgooW25vZGUsIHB0cl0pID0+CiAgcGF0aCA9PgogIHAgPT4KICBuYW1lID0+CiAgbmFtZSA9PgpVbnNldExvYyhub2RlLCBwcmVkID0gKHYsIHApID0+IHRydWUpCih2LCBrKSA9PgpNYWtlRkZJKG5vZGUsIGxpYiwgZXhwLCBmcCkKKCkKTWFrZUlkKG5hbWUpCk1ha2VRdWlja0pTQ2xhc3Mobm9kZSwgYXN0ID0gJCkKICBuID0+CiAgbiA9PgogIG4gPT4KICBuID0+CkFTVFNoZWxsKC4uLmFyZ3MpCihhLCBwKSA9PgooYSwgcCkgPT4KKGEsIHApID0+CiAgZ2V0IGZsYWdzKCkKICB2ID0+CiAgdiA9PgogIGQgPT4KICBsID0+CkNvbXBpbGUoZmlsZSwgLi4uYXJncykKICBzZWxlY3QobmFtZV9vcl9pZCwgcHJlZCA9IG4gPT4gdHJ1ZSkKICBnZXRCeUlkT3JOYW1lKG5hbWVfb3JfaWQsIHByZWQgPSBuID0+IHRydWUpCiAgZ2V0VHlwZShuYW1lX29yX2lkKQpuID0+CiAgZ2V0TmFtZXNwYWNlKG5hbWUsIHJvb3QgPSB0aGlzLmRhdGEpCm4gPT4KICBuYW1lc3BhY2VPZihub2RlKQogIHRvU3RyaW5nKCkKICBnZXRDbGFzcyhuYW1lX29yX2lkKQogIGdldEZ1bmN0aW9uKG5hbWVfb3JfaWQpCm4gPT4KICBnZXRWYXJpYWJsZShuYW1lX29yX2lkKQpuID0+CiAgZ2V0TG9jKG5vZGUpCigpID0+CiAgcGF0aE9mKG5lZWRsZSwgbWF4RGVwdGggPSAxMCkKbiA9PgpQb2ludGVyLnByb3RvdHlwZS5jaGFpbiA9IGZ1bmN0aW9uKHN0ZXAsIGxpbWl0ID0gSW5maW5pdHkpCiAgLkYgPSBhcmcgPT4KICAuVCA9IGFyZyA9PgooKSA9Pgpub2RlID0+CiAgcyA9PgpmciA9PgAAAAAAAAAAVw0AAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "soundcloud-tracks.js",
			"settings":
			{
				"buffer_size": 1609,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABGBgAALy8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBTb3VuZENsb3VkIGdyYWJiZXIKLy8gQG5hbWVzcGFjZSAgICBodHRwOi8vc291bmRjbG91ZC5jb20vCi8vIEB2ZXJzaW9uICAgICAgMjAyNS0wNC0xMgovLyBAZGVzY3JpcHRpb24gIEdldCB0cmFja3MgZnJvbSBzb3VuZGNsb3VkCi8vIEBhdXRob3IgICAgICAgUm9tYW4gU2VubiA8cm9tYW4ubC5zZW5uQGdtYWlsLmNvbT4KLy8gQG1hdGNoICAgICAgICBodHRwczovL3NvdW5kY2xvdWQuY29tLyoKLy8gQG1hdGNoICAgICAgICBodHRwczovL3d3dy55b3V0dWJlLmNvbS8qCi8vIEBpY29uICAgICAgICAgaHR0cHM6Ly9zb3VuZGNsb3VkLmNvbS9mYXZpY29uLmljbwovLyBAZ3JhbnQgICAgICAgIG5vbmUKLy8gPT0vVXNlclNjcmlwdD09CgooZnVuY3Rpb24gKCkgewogICd1c2Ugc3RyaWN0JzsKCiAgY29uc29sZS5sb2coJ1NvdW5kQ2xvdWQgZ3JhYmJlciBsb2FkZWQnKTsKCiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBlID0+IHsKICAgIHdpbmRvdy5hID0gR2V0VHJhY2tzKCk7CiAgfSk7Cn0pKCk7CgpPYmplY3QuYXNzaWduKHdpbmRvdywgewogIEdldFRyYWNrcwp9KTsKCmZ1bmN0aW9uIEdldFRyYWNrcygpIHsKICBjb25zdCByZSA9IC9eW146XSo6XC9cL1teL10qXC8vZzsKICBjb25zdCB5dCA9IC95b3V0dWJlLy50ZXN0KHdpbmRvdy5sb2NhdGlvbiArICcnKTsKCiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oCiAgICBbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnYS5zb3VuZFRpdGxlX190aXRsZSwgYS55dGQtdmlkZW8tcmVuZGVyZXInKV0KICAgICAgLm1hcCh5dCA/IGUgPT4gW2UuaHJlZiwgZS5pbm5lclRleHQsIGVdIDogZSA9PiBbZS5ocmVmLCBlLmlubmVyVGV4dF0pCiAgICAgIC5maWx0ZXIoeXQgPyAoW3VybCwgdGl0bGUsIGVdKSA9PiAvd2F0Y2gvLnRlc3QodXJsKSAmJiAhLzxkaXZccy8udGVzdChlLmlubmVySFRNTCkgOiAoW3VybCwgdGl0bGVdKSA9PiB1cmwgIT0gJycpCiAgICAgIC5tYXAoeXQgPyAoW3VybCwgLi4ucmVzdF0pID0+IFsnd2F0Y2g/dj0nICsgdXJsLnJlcGxhY2UoLy4qdj0vZywgJycpLnJlcGxhY2UoL1tcJiY/XS4qL2csICcnKSwgLi4ucmVzdF0gOiAoW3VybCwgLi4ucmVzdF0pID0+IFt1cmwucmVwbGFjZShyZSwgJycpLCAuLi5yZXN0XSkKICAgICAgLmZpbHRlcigoW3VybCwgdGl0bGVdKSA9PiB1cmwgIT0gJycgJiYgdGl0bGUgIT0gJycpLAogICAgewogICAgICB0b1N0cmluZyhwYWQgPSBmYWxzZSkgewogICAgICAgIGxldCBtYXhsZW4gPSAwOwogICAgICAgIGlmKHBhZCkgewogICAgICAgICAgY29uc3QgeyBsZW5ndGggfSA9IHRoaXM7CiAgICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgICAgICAgICAgY29uc3QgbGVuID0gdGhpc1tpXVswXS5sZW5ndGg7CiAgICAgICAgICAgIGlmKGxlbiA+IG1heGxlbikgbWF4bGVuID0gbGVuOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gdGhpcy5tYXAoKFt1cmwsIHRpdGxlXSkgPT4gdXJsLnBhZEVuZChtYXhsZW4pICsgJyAnICsgdGl0bGUpLmpvaW4oJ1xuJyk7CiAgICAgIH0KICAgIH0KICApOwp9CgAAAAAAAAAASQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAABGBgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "clang-ast.js",
			"settings":
			{
				"buffer_size": 81273,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					455,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAADViAAAAAAAANmIAAAAAAAAAAAAANmIAAAAAAAA3YgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANWIAAAAAAAA1YgAAAAAAAAAAAAAAAAAA"
				],
				[
					457,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAADZiAAAAAAAAN2IAAAAAAAAAAAAAN2IAAAAAAAA4YgAAAAAAAAAAAAA4YgAAAAAAADliAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANmIAAAAAAAA2YgAAAAAAAAAAAAAAAAAA"
				],
				[
					458,
					1,
					"insert",
					{
						"characters": " storageClass="
					},
					"DgAAADliAAAAAAAAOmIAAAAAAAAAAAAAOmIAAAAAAAA7YgAAAAAAAAAAAAA7YgAAAAAAADxiAAAAAAAAAAAAADxiAAAAAAAAPWIAAAAAAAAAAAAAPWIAAAAAAAA+YgAAAAAAAAAAAAA+YgAAAAAAAD9iAAAAAAAAAAAAAD9iAAAAAAAAQGIAAAAAAAAAAAAAQGIAAAAAAABBYgAAAAAAAAAAAABBYgAAAAAAAEJiAAAAAAAAAAAAAEJiAAAAAAAAQ2IAAAAAAAAAAAAAQ2IAAAAAAABEYgAAAAAAAAAAAABEYgAAAAAAAEViAAAAAAAAAAAAAEViAAAAAAAARmIAAAAAAAAAAAAARmIAAAAAAABHYgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOWIAAAAAAAA5YgAAAAAAAAAAAAAAAPC/"
				],
				[
					459,
					1,
					"insert",
					{
						"characters": "node.storage"
					},
					"DAAAAEdiAAAAAAAASGIAAAAAAAAAAAAASGIAAAAAAABJYgAAAAAAAAAAAABJYgAAAAAAAEpiAAAAAAAAAAAAAEpiAAAAAAAAS2IAAAAAAAAAAAAAS2IAAAAAAABMYgAAAAAAAAAAAABMYgAAAAAAAE1iAAAAAAAAAAAAAE1iAAAAAAAATmIAAAAAAAAAAAAATmIAAAAAAABPYgAAAAAAAAAAAABPYgAAAAAAAFBiAAAAAAAAAAAAAFBiAAAAAAAAUWIAAAAAAAAAAAAAUWIAAAAAAABSYgAAAAAAAAAAAABSYgAAAAAAAFNiAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAR2IAAAAAAABHYgAAAAAAAAAAAAAAAPC/"
				],
				[
					460,
					1,
					"insert",
					{
						"characters": "Class;"
					},
					"BgAAAFNiAAAAAAAAVGIAAAAAAAAAAAAAVGIAAAAAAABVYgAAAAAAAAAAAABVYgAAAAAAAFZiAAAAAAAAAAAAAFZiAAAAAAAAV2IAAAAAAAAAAAAAV2IAAAAAAABYYgAAAAAAAAAAAABYYgAAAAAAAFliAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAU2IAAAAAAABTYgAAAAAAAAAAAAAAAPC/"
				],
				[
					461,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAFliAAAAAAAAWmIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWWIAAAAAAABZYgAAAAAAAAAAAAAAAPC/"
				],
				[
					467,
					1,
					"insert",
					{
						"characters": "\n\niuf"
					},
					"CAAAAOxkAAAAAAAA7WQAAAAAAAAAAAAA7WQAAAAAAADxZAAAAAAAAAAAAADxZAAAAAAAAPJkAAAAAAAAAAAAAPJkAAAAAAAA9mQAAAAAAAAAAAAA7WQAAAAAAADtZAAAAAAAAAQAAAAgICAg8mQAAAAAAADzZAAAAAAAAAAAAADzZAAAAAAAAPRkAAAAAAAAAAAAAPRkAAAAAAAA9WQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7GQAAAAAAADsZAAAAAAAAAAAAAAAAPC/"
				],
				[
					468,
					2,
					"left_delete",
					null,
					"AgAAAPRkAAAAAAAA9GQAAAAAAAABAAAAZvNkAAAAAAAA82QAAAAAAAABAAAAdQ",
					"AQAAAAAAAAABAAAA9WQAAAAAAAD1ZAAAAAAAAAAAAAAAAPC/"
				],
				[
					469,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AQAAAPNkAAAAAAAA9GQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA82QAAAAAAADzZAAAAAAAAAAAAAAAAPC/"
				],
				[
					470,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAPRkAAAAAAAA9mQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9GQAAAAAAAD0ZAAAAAAAAAAAAAAAAPC/"
				],
				[
					471,
					1,
					"insert",
					{
						"characters": "storageClass"
					},
					"DAAAAPVkAAAAAAAA9mQAAAAAAAAAAAAA9mQAAAAAAAD3ZAAAAAAAAAAAAAD3ZAAAAAAAAPhkAAAAAAAAAAAAAPhkAAAAAAAA+WQAAAAAAAAAAAAA+WQAAAAAAAD6ZAAAAAAAAAAAAAD6ZAAAAAAAAPtkAAAAAAAAAAAAAPtkAAAAAAAA/GQAAAAAAAAAAAAA/GQAAAAAAAD9ZAAAAAAAAAAAAAD9ZAAAAAAAAP5kAAAAAAAAAAAAAP5kAAAAAAAA/2QAAAAAAAAAAAAA/2QAAAAAAAAAZQAAAAAAAAAAAAAAZQAAAAAAAAFlAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9WQAAAAAAAD1ZAAAAAAAAAAAAAAAAPC/"
				],
				[
					473,
					1,
					"insert",
					{
						"characters": "this.storageClass="
					},
					"EgAAAAJlAAAAAAAAA2UAAAAAAAAAAAAAA2UAAAAAAAAEZQAAAAAAAAAAAAAEZQAAAAAAAAVlAAAAAAAAAAAAAAVlAAAAAAAABmUAAAAAAAAAAAAABmUAAAAAAAAHZQAAAAAAAAAAAAAHZQAAAAAAAAhlAAAAAAAAAAAAAAhlAAAAAAAACWUAAAAAAAAAAAAACWUAAAAAAAAKZQAAAAAAAAAAAAAKZQAAAAAAAAtlAAAAAAAAAAAAAAtlAAAAAAAADGUAAAAAAAAAAAAADGUAAAAAAAANZQAAAAAAAAAAAAANZQAAAAAAAA5lAAAAAAAAAAAAAA5lAAAAAAAAD2UAAAAAAAAAAAAAD2UAAAAAAAAQZQAAAAAAAAAAAAAQZQAAAAAAABFlAAAAAAAAAAAAABFlAAAAAAAAEmUAAAAAAAAAAAAAEmUAAAAAAAATZQAAAAAAAAAAAAATZQAAAAAAABRlAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAmUAAAAAAAACZQAAAAAAAAAAAAAAAPC/"
				],
				[
					474,
					1,
					"insert",
					{
						"characters": "stro"
					},
					"BAAAABRlAAAAAAAAFWUAAAAAAAAAAAAAFWUAAAAAAAAWZQAAAAAAAAAAAAAWZQAAAAAAABdlAAAAAAAAAAAAABdlAAAAAAAAGGUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFGUAAAAAAAAUZQAAAAAAAAAAAAAAAPC/"
				],
				[
					475,
					2,
					"left_delete",
					null,
					"AgAAABdlAAAAAAAAF2UAAAAAAAABAAAAbxZlAAAAAAAAFmUAAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAAGGUAAAAAAAAYZQAAAAAAAAAAAAAAAPC/"
				],
				[
					476,
					1,
					"insert",
					{
						"characters": "orageClass;"
					},
					"CwAAABZlAAAAAAAAF2UAAAAAAAAAAAAAF2UAAAAAAAAYZQAAAAAAAAAAAAAYZQAAAAAAABllAAAAAAAAAAAAABllAAAAAAAAGmUAAAAAAAAAAAAAGmUAAAAAAAAbZQAAAAAAAAAAAAAbZQAAAAAAABxlAAAAAAAAAAAAABxlAAAAAAAAHWUAAAAAAAAAAAAAHWUAAAAAAAAeZQAAAAAAAAAAAAAeZQAAAAAAAB9lAAAAAAAAAAAAAB9lAAAAAAAAIGUAAAAAAAAAAAAAIGUAAAAAAAAhZQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFmUAAAAAAAAWZQAAAAAAAAAAAAAAAPC/"
				],
				[
					479,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAIWUAAAAAAAAhZQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "os-helpers.js",
			"settings":
			{
				"buffer_size": 2475,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					15,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAIcGAAAAAAAAiAYAAAAAAAAAAAAAiAYAAAAAAACIBgAAAAAAAB8AAAAgIGNvbnNvbGUubG9nKCdjaGlsZCcsIGNoaWxkKTsK",
					"AQAAAAAAAAABAAAAhwYAAAAAAACmBgAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					2,
					"left_delete",
					null,
					"AgAAAIkGAAAAAAAAiQYAAAAAAACMAAAAICAvL2RlZmluZShjaGlsZCwgeyBnZXQgc3RkaW4oKSB7IHJldHVybiB0aGlzLnN0ZGlvWzBdOyB9LGdldCBzdGRvdXQoKSB7IHJldHVybiB0aGlzLnN0ZGlvWzFdOyB9LGdldCBzdGRlcnIoKSB7IHJldHVybiB0aGlzLnN0ZGlvWzJdOyB9IH0pOwqIBgAAAAAAAIgGAAAAAAAAAQAAAAo",
					"AQAAAAAAAAABAAAAiQYAAAAAAAAVBwAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACnCQAAaW1wb3J0IHsgc3Bhd24gfSBmcm9tICdjaGlsZF9wcm9jZXNzJzsKaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnOwppbXBvcnQgeyBjbG9zZSwgZXhlYywgcGlwZSwgd2FpdHBpZCwgV29ya2VyIH0gZnJvbSAnb3MnOwppbXBvcnQgeyBidG9hLCBkZWZpbmUsIHByb3BlcnRpZXMgfSBmcm9tICd1dGlsJzsKaW1wb3J0IHsgUmVwZWF0ZXIgfSBmcm9tICcuL2xpYi9yZXBlYXRlci9yZXBlYXRlci5qcyc7CmltcG9ydCB7IGZkb3BlbiwgcG9wZW4gfSBmcm9tICdzdGQnOwpleHBvcnQgeyBXTk9IQU5HIH0gZnJvbSAnY2hpbGRfcHJvY2Vzcyc7CgovKmV4cG9ydCBmdW5jdGlvbiBFeGVjVG9vbChjbWQsIC4uLmFyZ3MpIHsKICBsZXQgY2hpbGQgPSBTcGF3bihjbWQsIGFyZ3MsIHsgc3RkaW86IFswLCAncGlwZScsIDJdIH0pOwogIGxldCBbc3RkaW4sIHN0ZG91dCwgc3RkZXJyXSA9IGNoaWxkLnN0ZGlvOwogIGxldCByOwogIGxldCBiID0gbmV3IEFycmF5QnVmZmVyKDEwMjQpOwogIHIgPSBjaGlsZC53YWl0KCk7CgogIGxldCBscE51bWJlck9mQnl0ZXNSZWFkID0gbmV3IFVpbnQzMkFycmF5KDIpOwogIGxldCBzdHIgPSAnJzsKICBmb3IoOzspIHsKICAgIGxldCByID0gUmVhZEZpbGUoc3Rkb3V0LCBiLCAxMDI0LCBscE51bWJlck9mQnl0ZXNSZWFkLmJ1ZmZlciwgMCk7CiAgICBpZihscE51bWJlck9mQnl0ZXNSZWFkWzBdID4gMCkgewogICAgICBsZXQgZGF0YSA9IGIuc2xpY2UoMCwgbHBOdW1iZXJPZkJ5dGVzUmVhZFswXSk7CiAgICAgIHN0ciArPSB0b1N0cmluZyhkYXRhKTsKICAgICAgY29uc29sZS5sb2coJ3N0cicsIHN0cik7CiAgICB9CiAgICBpZihyID09IDApIGJyZWFrOwogIH0KCiAgcmV0dXJuIHN0cjsKICByZXR1cm4gcGFyc2VJbnQoc3RyKTsKfSovCgpleHBvcnQgZnVuY3Rpb24gRXhlY3V0ZSguLi5hcmdzKSB7CiAgbGV0IFtyZCwgc3Rkb3V0XSA9IHBpcGUoKTsKICBsZXQgcGlkID0gZXhlYyhhcmdzLCB7CiAgICBibG9jazogZmFsc2UsCiAgICBzdGRvdXQsCiAgICBzdGRlcnI6IHN0ZG91dAogIH0pOwogIGNsb3NlKHN0ZG91dCk7CgogIGxldCBbcmV0LCBzdGF0dXNdID0gd2FpdHBpZChwaWQsIDEpOwoKICBsZXQgb3V0ID0gZnMucmVhZEFsbFN5bmMocmQpOwogIGZzLmNsb3NlU3luYyhyZCk7CgogIGlmKHJldCAhPSBwaWQpIFtyZXQsIHN0YXR1c10gPSB3YWl0cGlkKHBpZCwgMCk7CgogIHJldHVybiBbKHN0YXR1cyAmIDB4ZmYwMCkgLyAyNTYsIG91dF07Cn0KCmV4cG9ydCBmdW5jdGlvbiBVUkxXb3JrZXIoc2NyaXB0KSB7CiAgY29uc3QgZGF0YVVSTCA9IHMgPT4gYGRhdGE6YXBwbGljYXRpb24vamF2YXNjcmlwdDtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxgICsgYnRvYShzKS5yZXBsYWNlQWxsKCcrJywgJy0nKS5yZXBsYWNlQWxsKCcvJywgJ18nKS5yZXBsYWNlQWxsKCc9JywgJycpOwoKICBjb25zdCB1cmwgPSBkYXRhVVJMKHNjcmlwdCk7CiAgY29uc3QgdyA9IG5ldyBXb3JrZXIodXJsKTsKCiAgcmV0dXJuIGRlZmluZShuZXcgUmVwZWF0ZXIoKHB1c2gsIHN0b3ApID0+ICh3Lm9ubWVzc2FnZSA9IHB1c2gpKSwgewogICAgcG9zdE1lc3NhZ2U6IG1zZyA9PiB3LnBvc3RNZXNzYWdlKG1zZykKICB9KTsKfQoKZXhwb3J0IGZ1bmN0aW9uIFNwYXduKC4uLmFyZ3MpIHsKICBjb25zdCBjaGlsZCA9IHNwYXduKC4uLmFyZ3MpOwoKICAgZGVmaW5lKAogICAgY2hpbGQsCiAgICBwcm9wZXJ0aWVzKAogICAgICB7CiAgICAgICAgc3RkaW4oKSB7CiAgICAgICAgICByZXR1cm4gdGhpcy5zdGRpb1swXSA+PSAwID8gZmRvcGVuKHRoaXMuc3RkaW9bMF0sICd3JykgOiBudWxsOwogICAgICAgIH0sCiAgICAgICAgc3Rkb3V0KCkgewogICAgICAgICAgcmV0dXJuIHRoaXMuc3RkaW9bMV0gPj0gMCA/IGZkb3Blbih0aGlzLnN0ZGlvWzFdLCAncicpIDogbnVsbDsKICAgICAgICB9LAogICAgICAgIHN0ZGVycigpIHsKICAgICAgICAgIHJldHVybiB0aGlzLnN0ZGlvWzJdID49IDAgPyBmZG9wZW4odGhpcy5zdGRpb1syXSwgJ3InKSA6IG51bGw7CiAgICAgICAgfQogICAgICB9LAogICAgICB7IG1lbW9pemU6IHRydWUgfQogICAgKQogICk7CgogIHJldHVybiBjaGlsZDsKfQoKZXhwb3J0IGZ1bmN0aW9uIFNoZWxsKGNtZCkgewogIGxldCBmID0gcG9wZW4oY21kLCAncicpOwogIGxldCBzID0gJyc7CgogIHdoaWxlKCFmLmVvZigpICYmICFmLmVycm9yKCkpIHMgKz0gZi5yZWFkQXNTdHJpbmcoKTsKCiAgZi5jbG9zZSgpOwogIHJldHVybiBzOwp9CgpleHBvcnQgZnVuY3Rpb24gRXhlY1Rvb2woY21kLCAuLi5hcmdzKSB7CiAgbGV0IGYgPSBwb3BlbihbY21kLCAuLi5hcmdzXS5qb2luKCcgJyksICdyJyk7CiAgbGV0IHMgPSAnJzsKCiAgZm9yKDs7KSB7CiAgICBsZXQgbGluZSA9IGYuZ2V0bGluZSgpOwoKICAgIGlmKGxpbmUgPT09IG51bGwpIGJyZWFrOwogICAgcyArPSBsaW5lICsgJ1xuJzsKICB9CgogIGYuY2xvc2UoKTsKICByZXR1cm4gczsKfQoAAAAAAAAAAKsJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiAYAAAAAAACIBgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "clang-list.js",
			"settings":
			{
				"buffer_size": 8033,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "ast-shell.js",
			"settings":
			{
				"buffer_size": 45099,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					8091,
					1,
					"delete_blank_lines",
					{
						"surplus": false
					},
					"AQAAAC+aAAAAAAAAu5sAAAAAAACSAQAACiAgICAgICAgbGV0IFtmaXJzdCwgbmV4dF0gPSBhLnNwbGljZSgwLCAyKTsKCiAgICAgICAgZm9yKGxldCBpIGluIHJvb3QuaW5uZXIpIHsKICAgICAgICAgIGxldCBub2RlID0gcm9vdC5pbm5lcltpXSwKICAgICAgICAgICAgcGF0aCA9IFsnaW5uZXInLCAraV07CgogICAgICAgICAgaWYobm9kZS5uYW1lICE9IGZpcnN0KSBjb250aW51ZTsKCiAgICAgICAgICBsZXQgW2NoaWxkLCBwXSA9IGRlZXAuZmluZChub2RlLCBuID0+IG4ubmFtZSA9PSBuZXh0LCBkZWVwLlJFVFVSTl9WQUxVRV9QQVRIKSA/PyBbXTsKCiAgICAgICAgICBpZihjaGlsZCkgewogICAgICAgICAgICBhc3QycGF0aChjaGlsZCwgWydpbm5lcicsICtpLCAuLi5wXSk7CgogICAgICAgICAgICByZXR1cm4gY2hpbGQ7CiAgICAgICAgICB9",
					"AQAAAAAAAAABAAAAL5oAAAAAAADBmwAAAAAAAAAAAAAAAPC/"
				],
				[
					8096,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAMWbAAAAAAAAx5sAAAAAAAAAAAAA+JkAAAAAAAD6mQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+JkAAAAAAADFmwAAAAAAAAAAAAAAAPC/"
				],
				[
					8145,
					1,
					"insert",
					{
						"characters": "\ndeep.iterate"
					},
					"DwAAAO+ZAAAAAAAA8JkAAAAAAAAAAAAA8JkAAAAAAAD2mQAAAAAAAAAAAAD2mQAAAAAAAPiZAAAAAAAAAAAAAPiZAAAAAAAA+ZkAAAAAAAAAAAAA+ZkAAAAAAAD6mQAAAAAAAAAAAAD6mQAAAAAAAPuZAAAAAAAAAAAAAPuZAAAAAAAA/JkAAAAAAAAAAAAA/JkAAAAAAAD9mQAAAAAAAAAAAAD9mQAAAAAAAP6ZAAAAAAAAAAAAAP6ZAAAAAAAA/5kAAAAAAAAAAAAA/5kAAAAAAAAAmgAAAAAAAAAAAAAAmgAAAAAAAAGaAAAAAAAAAAAAAAGaAAAAAAAAApoAAAAAAAAAAAAAApoAAAAAAAADmgAAAAAAAAAAAAADmgAAAAAAAASaAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA75kAAAAAAADvmQAAAAAAAAAAAAAAAPC/"
				],
				[
					8146,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAASaAAAAAAAABpoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABJoAAAAAAAAEmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8147,
					1,
					"insert",
					{
						"characters": "root,"
					},
					"BQAAAAWaAAAAAAAABpoAAAAAAAAAAAAABpoAAAAAAAAHmgAAAAAAAAAAAAAHmgAAAAAAAAiaAAAAAAAAAAAAAAiaAAAAAAAACZoAAAAAAAAAAAAACZoAAAAAAAAKmgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABZoAAAAAAAAFmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8148,
					1,
					"insert",
					{
						"characters": " n=>"
					},
					"BAAAAAqaAAAAAAAAC5oAAAAAAAAAAAAAC5oAAAAAAAAMmgAAAAAAAAAAAAAMmgAAAAAAAA2aAAAAAAAAAAAAAA2aAAAAAAAADpoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACpoAAAAAAAAKmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8149,
					1,
					"insert",
					{
						"characters": " n.name"
					},
					"BwAAAA6aAAAAAAAAD5oAAAAAAAAAAAAAD5oAAAAAAAAQmgAAAAAAAAAAAAAQmgAAAAAAABGaAAAAAAAAAAAAABGaAAAAAAAAEpoAAAAAAAAAAAAAEpoAAAAAAAATmgAAAAAAAAAAAAATmgAAAAAAABSaAAAAAAAAAAAAABSaAAAAAAAAFZoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADpoAAAAAAAAOmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8150,
					1,
					"insert",
					{
						"characters": " =="
					},
					"AwAAABWaAAAAAAAAFpoAAAAAAAAAAAAAFpoAAAAAAAAXmgAAAAAAAAAAAAAXmgAAAAAAABiaAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFZoAAAAAAAAVmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8151,
					1,
					"insert",
					{
						"characters": " name"
					},
					"BQAAABiaAAAAAAAAGZoAAAAAAAAAAAAAGZoAAAAAAAAamgAAAAAAAAAAAAAamgAAAAAAABuaAAAAAAAAAAAAABuaAAAAAAAAHJoAAAAAAAAAAAAAHJoAAAAAAAAdmgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGJoAAAAAAAAYmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8152,
					1,
					"insert",
					{
						"characters": " ?"
					},
					"AgAAAB2aAAAAAAAAHpoAAAAAAAAAAAAAHpoAAAAAAAAfmgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHZoAAAAAAAAdmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8153,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAB+aAAAAAAAAIJoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAH5oAAAAAAAAfmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8154,
					1,
					"insert",
					{
						"characters": "deep."
					},
					"BQAAACCaAAAAAAAAIZoAAAAAAAAAAAAAIZoAAAAAAAAimgAAAAAAAAAAAAAimgAAAAAAACOaAAAAAAAAAAAAACOaAAAAAAAAJJoAAAAAAAAAAAAAJJoAAAAAAAAlmgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIJoAAAAAAAAgmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8155,
					1,
					"insert",
					{
						"characters": "YIELD_NO_RECURSE"
					},
					"EAAAACWaAAAAAAAAJpoAAAAAAAAAAAAAJpoAAAAAAAAnmgAAAAAAAAAAAAAnmgAAAAAAACiaAAAAAAAAAAAAACiaAAAAAAAAKZoAAAAAAAAAAAAAKZoAAAAAAAAqmgAAAAAAAAAAAAAqmgAAAAAAACuaAAAAAAAAAAAAACuaAAAAAAAALJoAAAAAAAAAAAAALJoAAAAAAAAtmgAAAAAAAAAAAAAtmgAAAAAAAC6aAAAAAAAAAAAAAC6aAAAAAAAAL5oAAAAAAAAAAAAAL5oAAAAAAAAwmgAAAAAAAAAAAAAwmgAAAAAAADGaAAAAAAAAAAAAADGaAAAAAAAAMpoAAAAAAAAAAAAAMpoAAAAAAAAzmgAAAAAAAAAAAAAzmgAAAAAAADSaAAAAAAAAAAAAADSaAAAAAAAANZoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJZoAAAAAAAAlmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8156,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAADWaAAAAAAAANpoAAAAAAAAAAAAANpoAAAAAAAA3mgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANZoAAAAAAAA1mgAAAAAAAAAAAAAAAPC/"
				],
				[
					8157,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADeaAAAAAAAAOJoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAN5oAAAAAAAA3mgAAAAAAAAAAAAAAAPC/"
				],
				[
					8158,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAADiaAAAAAAAAOpoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOJoAAAAAAAA4mgAAAAAAAAAAAAAAAPC/"
				],
				[
					8159,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAADiaAAAAAAAAOJoAAAAAAAABAAAAJziaAAAAAAAAOJoAAAAAAAABAAAAJw",
					"AQAAAAAAAAABAAAAOZoAAAAAAAA5mgAAAAAAAAAAAAAAAPC/"
				],
				[
					8160,
					1,
					"insert",
					{
						"characters": "^n.na"
					},
					"BQAAADiaAAAAAAAAOZoAAAAAAAAAAAAAOZoAAAAAAAA6mgAAAAAAAAAAAAA6mgAAAAAAADuaAAAAAAAAAAAAADuaAAAAAAAAPJoAAAAAAAAAAAAAPJoAAAAAAAA9mgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOJoAAAAAAAA4mgAAAAAAAAAAAAAAAPC/"
				],
				[
					8161,
					5,
					"left_delete",
					null,
					"BQAAADyaAAAAAAAAPJoAAAAAAAABAAAAYTuaAAAAAAAAO5oAAAAAAAABAAAAbjqaAAAAAAAAOpoAAAAAAAABAAAALjmaAAAAAAAAOZoAAAAAAAABAAAAbjiaAAAAAAAAOJoAAAAAAAABAAAAXg",
					"AQAAAAAAAAABAAAAPZoAAAAAAAA9mgAAAAAAAAAAAAAAAPC/"
				],
				[
					8162,
					1,
					"insert",
					{
						"characters": "n.name"
					},
					"BgAAADiaAAAAAAAAOZoAAAAAAAAAAAAAOZoAAAAAAAA6mgAAAAAAAAAAAAA6mgAAAAAAADuaAAAAAAAAAAAAADuaAAAAAAAAPJoAAAAAAAAAAAAAPJoAAAAAAAA9mgAAAAAAAAAAAAA9mgAAAAAAAD6aAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOJoAAAAAAAA4mgAAAAAAAAAAAAAAAPC/"
				],
				[
					8163,
					1,
					"insert",
					{
						"characters": " ?"
					},
					"AgAAAD6aAAAAAAAAP5oAAAAAAAAAAAAAP5oAAAAAAABAmgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPpoAAAAAAAA+mgAAAAAAAAAAAAAAAPC/"
				],
				[
					8164,
					1,
					"insert",
					{
						"characters": "  deep."
					},
					"BwAAAECaAAAAAAAAQZoAAAAAAAAAAAAAQZoAAAAAAABCmgAAAAAAAAAAAABCmgAAAAAAAEOaAAAAAAAAAAAAAEOaAAAAAAAARJoAAAAAAAAAAAAARJoAAAAAAABFmgAAAAAAAAAAAABFmgAAAAAAAEaaAAAAAAAAAAAAAEaaAAAAAAAAR5oAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQJoAAAAAAABAmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8165,
					1,
					"insert",
					{
						"characters": "NO_RECUIRS"
					},
					"CgAAAEeaAAAAAAAASJoAAAAAAAAAAAAASJoAAAAAAABJmgAAAAAAAAAAAABJmgAAAAAAAEqaAAAAAAAAAAAAAEqaAAAAAAAAS5oAAAAAAAAAAAAAS5oAAAAAAABMmgAAAAAAAAAAAABMmgAAAAAAAE2aAAAAAAAAAAAAAE2aAAAAAAAATpoAAAAAAAAAAAAATpoAAAAAAABPmgAAAAAAAAAAAABPmgAAAAAAAFCaAAAAAAAAAAAAAFCaAAAAAAAAUZoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAR5oAAAAAAABHmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8166,
					3,
					"left_delete",
					null,
					"AwAAAFCaAAAAAAAAUJoAAAAAAAABAAAAU0+aAAAAAAAAT5oAAAAAAAABAAAAUk6aAAAAAAAATpoAAAAAAAABAAAASQ",
					"AQAAAAAAAAABAAAAUZoAAAAAAABRmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8167,
					1,
					"insert",
					{
						"characters": "RSE"
					},
					"AwAAAE6aAAAAAAAAT5oAAAAAAAAAAAAAT5oAAAAAAABQmgAAAAAAAAAAAABQmgAAAAAAAFGaAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATpoAAAAAAABOmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8168,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAAFGaAAAAAAAAUpoAAAAAAAAAAAAAUpoAAAAAAABTmgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUZoAAAAAAABRmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8169,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFOaAAAAAAAAVJoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAU5oAAAAAAABTmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8174,
					1,
					"insert",
					{
						"characters": "deep.RECURSE"
					},
					"DAAAAFSaAAAAAAAAVZoAAAAAAAAAAAAAVZoAAAAAAABWmgAAAAAAAAAAAABWmgAAAAAAAFeaAAAAAAAAAAAAAFeaAAAAAAAAWJoAAAAAAAAAAAAAWJoAAAAAAABZmgAAAAAAAAAAAABZmgAAAAAAAFqaAAAAAAAAAAAAAFqaAAAAAAAAW5oAAAAAAAAAAAAAW5oAAAAAAABcmgAAAAAAAAAAAABcmgAAAAAAAF2aAAAAAAAAAAAAAF2aAAAAAAAAXpoAAAAAAAAAAAAAXpoAAAAAAABfmgAAAAAAAAAAAABfmgAAAAAAAGCaAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVJoAAAAAAABUmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8175,
					1,
					"left_delete",
					null,
					"AQAAAF+aAAAAAAAAX5oAAAAAAAABAAAARQ",
					"AQAAAAAAAAABAAAAYJoAAAAAAABgmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8176,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAF+aAAAAAAAAYJoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAX5oAAAAAAABfmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8177,
					1,
					"left_delete",
					null,
					"AQAAAF+aAAAAAAAAX5oAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAYJoAAAAAAABgmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8178,
					1,
					"insert",
					{
						"characters": "E,"
					},
					"AgAAAF+aAAAAAAAAYJoAAAAAAAAAAAAAYJoAAAAAAABhmgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAX5oAAAAAAABfmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8179,
					1,
					"insert",
					{
						"characters": " deep.RETUR"
					},
					"CwAAAGGaAAAAAAAAYpoAAAAAAAAAAAAAYpoAAAAAAABjmgAAAAAAAAAAAABjmgAAAAAAAGSaAAAAAAAAAAAAAGSaAAAAAAAAZZoAAAAAAAAAAAAAZZoAAAAAAABmmgAAAAAAAAAAAABmmgAAAAAAAGeaAAAAAAAAAAAAAGeaAAAAAAAAaJoAAAAAAAAAAAAAaJoAAAAAAABpmgAAAAAAAAAAAABpmgAAAAAAAGqaAAAAAAAAAAAAAGqaAAAAAAAAa5oAAAAAAAAAAAAAa5oAAAAAAABsmgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYZoAAAAAAABhmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8180,
					1,
					"insert_completion",
					{
						"completion": "deep.RETURN_VALUE_PATH",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "deep.RETURN_VALUE_PATH"
					},
					"AgAAAGKaAAAAAAAAYpoAAAAAAAAKAAAAZGVlcC5SRVRVUmKaAAAAAAAAeJoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbJoAAAAAAABsmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8183,
					1,
					"insert",
					{
						"characters": " for(let"
					},
					"CAAAAPiZAAAAAAAA+ZkAAAAAAAAAAAAA+ZkAAAAAAAD6mQAAAAAAAAAAAAD6mQAAAAAAAPuZAAAAAAAAAAAAAPuZAAAAAAAA/JkAAAAAAAAAAAAA/JkAAAAAAAD9mQAAAAAAAAAAAAD9mQAAAAAAAP6ZAAAAAAAAAAAAAP6ZAAAAAAAA/5kAAAAAAAAAAAAA/5kAAAAAAAAAmgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+JkAAAAAAAD4mQAAAAAAAAAAAAAAAFJA"
				],
				[
					8184,
					1,
					"insert",
					{
						"characters": " ["
					},
					"AgAAAACaAAAAAAAAAZoAAAAAAAAAAAAAAZoAAAAAAAACmgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAJoAAAAAAAAAmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8185,
					1,
					"insert",
					{
						"characters": "node,p"
					},
					"BgAAAAKaAAAAAAAAA5oAAAAAAAAAAAAAA5oAAAAAAAAEmgAAAAAAAAAAAAAEmgAAAAAAAAWaAAAAAAAAAAAAAAWaAAAAAAAABpoAAAAAAAAAAAAABpoAAAAAAAAHmgAAAAAAAAAAAAAHmgAAAAAAAAiaAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAApoAAAAAAAACmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8186,
					1,
					"insert",
					{
						"characters": "ath]"
					},
					"BAAAAAiaAAAAAAAACZoAAAAAAAAAAAAACZoAAAAAAAAKmgAAAAAAAAAAAAAKmgAAAAAAAAuaAAAAAAAAAAAAAAuaAAAAAAAADJoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACJoAAAAAAAAImgAAAAAAAAAAAAAAAPC/"
				],
				[
					8187,
					1,
					"insert",
					{
						"characters": " in"
					},
					"AwAAAAyaAAAAAAAADZoAAAAAAAAAAAAADZoAAAAAAAAOmgAAAAAAAAAAAAAOmgAAAAAAAA+aAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADJoAAAAAAAAMmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8188,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAA+aAAAAAAAAEJoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAD5oAAAAAAAAPmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8189,
					3,
					"left_delete",
					null,
					"AwAAAA+aAAAAAAAAD5oAAAAAAAABAAAAIA6aAAAAAAAADpoAAAAAAAABAAAAbg2aAAAAAAAADZoAAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAAEJoAAAAAAAAQmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8190,
					1,
					"insert",
					{
						"characters": "of"
					},
					"AgAAAA2aAAAAAAAADpoAAAAAAAAAAAAADpoAAAAAAAAPmgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADZoAAAAAAAANmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8191,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAA+aAAAAAAAAEJoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAD5oAAAAAAAAPmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8193,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAJGaAAAAAAAAkpoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkZoAAAAAAACRmgAAAAAAAP///////+9/"
				],
				[
					8194,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJKaAAAAAAAAk5oAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkpoAAAAAAACSmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8195,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAJOaAAAAAAAAlZoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAk5oAAAAAAACTmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8196,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAJSaAAAAAAAAlZoAAAAAAAAAAAAAlZoAAAAAAACemgAAAAAAAAAAAACemgAAAAAAAJ+aAAAAAAAAAAAAAJ+aAAAAAAAAqJoAAAAAAAAAAAAAlZoAAAAAAACVmgAAAAAAAAkAAAAgICAgICAgICCVmgAAAAAAAJ+aAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlJoAAAAAAACUmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8197,
					1,
					"insert",
					{
						"characters": "\nconsole.log"
					},
					"DgAAAJ+aAAAAAAAAoJoAAAAAAAAAAAAAoJoAAAAAAACqmgAAAAAAAAAAAACVmgAAAAAAAJWaAAAAAAAACgAAACAgICAgICAgICCgmgAAAAAAAKGaAAAAAAAAAAAAAKGaAAAAAAAAopoAAAAAAAAAAAAAopoAAAAAAACjmgAAAAAAAAAAAACjmgAAAAAAAKSaAAAAAAAAAAAAAKSaAAAAAAAApZoAAAAAAAAAAAAApZoAAAAAAACmmgAAAAAAAAAAAACmmgAAAAAAAKeaAAAAAAAAAAAAAKeaAAAAAAAAqJoAAAAAAAAAAAAAqJoAAAAAAACpmgAAAAAAAAAAAACpmgAAAAAAAKqaAAAAAAAAAAAAAKqaAAAAAAAAq5oAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAn5oAAAAAAACfmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8198,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAKuaAAAAAAAArZoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAq5oAAAAAAACrmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8199,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAKyaAAAAAAAArpoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArJoAAAAAAACsmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8200,
					1,
					"insert",
					{
						"characters": "getNameps"
					},
					"CQAAAK2aAAAAAAAArpoAAAAAAAAAAAAArpoAAAAAAACvmgAAAAAAAAAAAACvmgAAAAAAALCaAAAAAAAAAAAAALCaAAAAAAAAsZoAAAAAAAAAAAAAsZoAAAAAAACymgAAAAAAAAAAAACymgAAAAAAALOaAAAAAAAAAAAAALOaAAAAAAAAtJoAAAAAAAAAAAAAtJoAAAAAAAC1mgAAAAAAAAAAAAC1mgAAAAAAALaaAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArZoAAAAAAACtmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8201,
					2,
					"left_delete",
					null,
					"AgAAALWaAAAAAAAAtZoAAAAAAAABAAAAc7SaAAAAAAAAtJoAAAAAAAABAAAAcA",
					"AQAAAAAAAAABAAAAtpoAAAAAAAC2mgAAAAAAAAAAAAAAAPC/"
				],
				[
					8202,
					1,
					"insert",
					{
						"characters": "space"
					},
					"BQAAALSaAAAAAAAAtZoAAAAAAAAAAAAAtZoAAAAAAAC2mgAAAAAAAAAAAAC2mgAAAAAAALeaAAAAAAAAAAAAALeaAAAAAAAAuJoAAAAAAAAAAAAAuJoAAAAAAAC5mgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtJoAAAAAAAC0mgAAAAAAAAAAAAAAAPC/"
				],
				[
					8204,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAALqaAAAAAAAAu5oAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAupoAAAAAAAC6mgAAAAAAAAAAAAAAAPC/"
				],
				[
					8205,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALuaAAAAAAAAvJoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAu5oAAAAAAAC7mgAAAAAAAAAAAAAAAPC/"
				],
				[
					8206,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAALyaAAAAAAAAvpoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvJoAAAAAAAC8mgAAAAAAAAAAAAAAAPC/"
				],
				[
					8207,
					1,
					"insert",
					{
						"characters": "name,node3"
					},
					"CgAAAL2aAAAAAAAAvpoAAAAAAAAAAAAAvpoAAAAAAAC/mgAAAAAAAAAAAAC/mgAAAAAAAMCaAAAAAAAAAAAAAMCaAAAAAAAAwZoAAAAAAAAAAAAAwZoAAAAAAADCmgAAAAAAAAAAAADCmgAAAAAAAMOaAAAAAAAAAAAAAMOaAAAAAAAAxJoAAAAAAAAAAAAAxJoAAAAAAADFmgAAAAAAAAAAAADFmgAAAAAAAMaaAAAAAAAAAAAAAMaaAAAAAAAAx5oAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvZoAAAAAAAC9mgAAAAAAAAAAAAAAAPC/"
				],
				[
					8208,
					1,
					"left_delete",
					null,
					"AQAAAMaaAAAAAAAAxpoAAAAAAAABAAAAMw",
					"AQAAAAAAAAABAAAAx5oAAAAAAADHmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8210,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAMiaAAAAAAAAyZoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyJoAAAAAAADImgAAAAAAAAAAAAAAAPC/"
				],
				[
					8211,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAMmaAAAAAAAAypoAAAAAAAAAAAAAypoAAAAAAADUmgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyZoAAAAAAADJmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8216,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAANSaAAAAAAAA1ZoAAAAAAAAAAAAA1ZoAAAAAAADfmgAAAAAAAAAAAADKmgAAAAAAAMqaAAAAAAAACgAAACAgICAgICAgICA",
					"AQAAAAAAAAABAAAA1JoAAAAAAADUmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8219,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BgAAAPmZAAAAAAAA+pkAAAAAAAAAAAAA+pkAAAAAAAADmgAAAAAAAAAAAADVmgAAAAAAANWaAAAAAAAACgAAACAgICAgICAgICADmgAAAAAAAASaAAAAAAAAAAAAAASaAAAAAAAADZoAAAAAAAAAAAAA+pkAAAAAAAD6mQAAAAAAAAkAAAAgICAgICAgICA",
					"AQAAAAAAAAABAAAA+ZkAAAAAAAD5mQAAAAAAAAAAAAAAAPC/"
				],
				[
					8221,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAAPmZAAAAAAAA+pkAAAAAAAAAAAAA+pkAAAAAAAD7mQAAAAAAAAAAAAD7mQAAAAAAAPyZAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+ZkAAAAAAAD5mQAAAAAAAAAAAAAAQFRA"
				],
				[
					8222,
					1,
					"insert",
					{
						"characters": " a="
					},
					"AwAAAPyZAAAAAAAA/ZkAAAAAAAAAAAAA/ZkAAAAAAAD+mQAAAAAAAAAAAAD+mQAAAAAAAP+ZAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/JkAAAAAAAD8mQAAAAAAAAAAAAAAAPC/"
				],
				[
					8223,
					5,
					"left_delete",
					null,
					"BQAAAP6ZAAAAAAAA/pkAAAAAAAABAAAAPf2ZAAAAAAAA/ZkAAAAAAAABAAAAYfyZAAAAAAAA/JkAAAAAAAABAAAAIPuZAAAAAAAA+5kAAAAAAAABAAAAdPqZAAAAAAAA+pkAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAA/5kAAAAAAAD/mQAAAAAAAAAAAAAAAPC/"
				],
				[
					8231,
					1,
					"left_delete",
					null,
					"AQAAAPmZAAAAAAAA+ZkAAAAAAAABAAAAbA",
					"AQAAAAAAAAABAAAA+pkAAAAAAAD6mQAAAAAAAAAAAAAAgFZA"
				],
				[
					8232,
					1,
					"paste",
					null,
					"AQAAAPmZAAAAAAAAL5oAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+ZkAAAAAAAD5mQAAAAAAAAAAAAAAAPC/"
				],
				[
					8235,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAC+aAAAAAAAAMJoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAL5oAAAAAAAAvmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8236,
					1,
					"left_delete",
					null,
					"AQAAAC+aAAAAAAAAL5oAAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAAMJoAAAAAAAAwmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8252,
					1,
					"insert",
					{
						"characters": "\n\n\n"
					},
					"CAAAAC+aAAAAAAAAMJoAAAAAAAAAAAAAMJoAAAAAAAA5mgAAAAAAAAAAAAA5mgAAAAAAADqaAAAAAAAAAAAAADqaAAAAAAAAQ5oAAAAAAAAAAAAAMJoAAAAAAAAwmgAAAAAAAAkAAAAgICAgICAgICA6mgAAAAAAADuaAAAAAAAAAAAAADuaAAAAAAAARJoAAAAAAAAAAAAAMZoAAAAAAAAxmgAAAAAAAAkAAAAgICAgICAgICA",
					"AQAAAAAAAAABAAAAL5oAAAAAAAAvmgAAAAAAAP///////+9/"
				],
				[
					8257,
					1,
					"insert",
					{
						"characters": "while"
					},
					"BQAAADuaAAAAAAAAPJoAAAAAAAAAAAAAPJoAAAAAAAA9mgAAAAAAAAAAAAA9mgAAAAAAAD6aAAAAAAAAAAAAAD6aAAAAAAAAP5oAAAAAAAAAAAAAP5oAAAAAAABAmgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAO5oAAAAAAAA7mgAAAAAAAAAAAAAAAPC/"
				],
				[
					8258,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAECaAAAAAAAAQpoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQJoAAAAAAABAmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8259,
					1,
					"insert",
					{
						"characters": "a.length"
					},
					"CAAAAEGaAAAAAAAAQpoAAAAAAAAAAAAAQpoAAAAAAABDmgAAAAAAAAAAAABDmgAAAAAAAESaAAAAAAAAAAAAAESaAAAAAAAARZoAAAAAAAAAAAAARZoAAAAAAABGmgAAAAAAAAAAAABGmgAAAAAAAEeaAAAAAAAAAAAAAEeaAAAAAAAASJoAAAAAAAAAAAAASJoAAAAAAABJmgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQZoAAAAAAABBmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8260,
					1,
					"insert",
					{
						"characters": " >"
					},
					"AgAAAEmaAAAAAAAASpoAAAAAAAAAAAAASpoAAAAAAABLmgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASZoAAAAAAABJmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8261,
					1,
					"insert",
					{
						"characters": " 0"
					},
					"AgAAAEuaAAAAAAAATJoAAAAAAAAAAAAATJoAAAAAAABNmgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAS5oAAAAAAABLmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8263,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAE6aAAAAAAAAT5oAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATpoAAAAAAABOmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8264,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAE+aAAAAAAAAUZoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAT5oAAAAAAABPmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8265,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAFCaAAAAAAAAUZoAAAAAAAAAAAAAUZoAAAAAAABamgAAAAAAAAAAAABamgAAAAAAAFuaAAAAAAAAAAAAAFuaAAAAAAAAZJoAAAAAAAAAAAAAUZoAAAAAAABRmgAAAAAAAAkAAAAgICAgICAgICBRmgAAAAAAAFuaAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUJoAAAAAAABQmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8266,
					7,
					"right_delete",
					null,
					"BwAAAFuaAAAAAAAAW5oAAAAAAAABAAAACluaAAAAAAAAW5oAAAAAAAACAAAAICBbmgAAAAAAAFuaAAAAAAAAAgAAACAgW5oAAAAAAABbmgAAAAAAAAIAAAAgIFuaAAAAAAAAW5oAAAAAAAACAAAAICBbmgAAAAAAAFuaAAAAAAAAAQAAACBbmgAAAAAAAFuaAAAAAAAAAQAAAH0",
					"AQAAAAAAAAABAAAAW5oAAAAAAABbmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8267,
					1,
					"insert",
					{
						"characters": " const"
					},
					"BgAAAFuaAAAAAAAAXJoAAAAAAAAAAAAAXJoAAAAAAABdmgAAAAAAAAAAAABdmgAAAAAAAF6aAAAAAAAAAAAAAF6aAAAAAAAAX5oAAAAAAAAAAAAAX5oAAAAAAABgmgAAAAAAAAAAAABgmgAAAAAAAGGaAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAW5oAAAAAAABbmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8268,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGGaAAAAAAAAYpoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYZoAAAAAAABhmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8271,
					1,
					"insert",
					{
						"characters": "first=a.sli"
					},
					"CwAAAGKaAAAAAAAAY5oAAAAAAAAAAAAAY5oAAAAAAABkmgAAAAAAAAAAAABkmgAAAAAAAGWaAAAAAAAAAAAAAGWaAAAAAAAAZpoAAAAAAAAAAAAAZpoAAAAAAABnmgAAAAAAAAAAAABnmgAAAAAAAGiaAAAAAAAAAAAAAGiaAAAAAAAAaZoAAAAAAAAAAAAAaZoAAAAAAABqmgAAAAAAAAAAAABqmgAAAAAAAGuaAAAAAAAAAAAAAGuaAAAAAAAAbJoAAAAAAAAAAAAAbJoAAAAAAABtmgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYpoAAAAAAABimgAAAAAAAAAAAAAAAPC/"
				],
				[
					8272,
					3,
					"left_delete",
					null,
					"AwAAAGyaAAAAAAAAbJoAAAAAAAABAAAAaWuaAAAAAAAAa5oAAAAAAAABAAAAbGqaAAAAAAAAapoAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAbZoAAAAAAABtmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8273,
					1,
					"insert",
					{
						"characters": "splice"
					},
					"BgAAAGqaAAAAAAAAa5oAAAAAAAAAAAAAa5oAAAAAAABsmgAAAAAAAAAAAABsmgAAAAAAAG2aAAAAAAAAAAAAAG2aAAAAAAAAbpoAAAAAAAAAAAAAbpoAAAAAAABvmgAAAAAAAAAAAABvmgAAAAAAAHCaAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAapoAAAAAAABqmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8274,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAHCaAAAAAAAAcpoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcJoAAAAAAABwmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8275,
					1,
					"insert",
					{
						"characters": "0,1"
					},
					"AwAAAHGaAAAAAAAAcpoAAAAAAAAAAAAAcpoAAAAAAABzmgAAAAAAAAAAAABzmgAAAAAAAHSaAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcZoAAAAAAABxmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8277,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAHWaAAAAAAAAdpoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdZoAAAAAAAB1mgAAAAAAAAAAAAAAAPC/"
				],
				[
					8291,
					1,
					"paste",
					null,
					"AgAAALmaAAAAAAAAvpoAAAAAAAAAAAAAvpoAAAAAAAC+mgAAAAAAAAQAAABuYW1l",
					"AQAAAAAAAAABAAAAuZoAAAAAAAC9mgAAAAAAAAAAAAAAAPC/"
				],
				[
					8298,
					1,
					"insert",
					{
						"characters": "\n\n}"
					},
					"CAAAAF+bAAAAAAAAYJsAAAAAAAAAAAAAYJsAAAAAAABpmwAAAAAAAAAAAABpmwAAAAAAAGqbAAAAAAAAAAAAAGqbAAAAAAAAc5sAAAAAAAAAAAAAYJsAAAAAAABgmwAAAAAAAAkAAAAgICAgICAgICBqmwAAAAAAAGubAAAAAAAAAAAAAGGbAAAAAAAAYZsAAAAAAAAJAAAAICAgICAgICAgYZsAAAAAAABomwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAX5sAAAAAAABfmwAAAAAAAAAAAAAAAPC/"
				],
				[
					8305,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAADqaAAAAAAAAO5oAAAAAAAAAAAAAO5oAAAAAAAA8mgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOpoAAAAAAAA6mgAAAAAAAAAAAAAAAFJA"
				],
				[
					8314,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AgAAAFabAAAAAAAAV5sAAAAAAAAAAAAAV5sAAAAAAABYmwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVpsAAAAAAABWmwAAAAAAAAAAAAAAgFZA"
				],
				[
					8315,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAFibAAAAAAAAWpsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWJsAAAAAAABYmwAAAAAAAAAAAAAAAPC/"
				],
				[
					8316,
					1,
					"insert",
					{
						"characters": "a.sl"
					},
					"BAAAAFmbAAAAAAAAWpsAAAAAAAAAAAAAWpsAAAAAAABbmwAAAAAAAAAAAABbmwAAAAAAAFybAAAAAAAAAAAAAFybAAAAAAAAXZsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWZsAAAAAAABZmwAAAAAAAAAAAAAAAPC/"
				],
				[
					8317,
					2,
					"left_delete",
					null,
					"AgAAAFybAAAAAAAAXJsAAAAAAAABAAAAbFubAAAAAAAAW5sAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAXZsAAAAAAABdmwAAAAAAAAAAAAAAAPC/"
				],
				[
					8318,
					1,
					"insert",
					{
						"characters": "length=="
					},
					"CAAAAFubAAAAAAAAXJsAAAAAAAAAAAAAXJsAAAAAAABdmwAAAAAAAAAAAABdmwAAAAAAAF6bAAAAAAAAAAAAAF6bAAAAAAAAX5sAAAAAAAAAAAAAX5sAAAAAAABgmwAAAAAAAAAAAABgmwAAAAAAAGGbAAAAAAAAAAAAAGGbAAAAAAAAYpsAAAAAAAAAAAAAYpsAAAAAAABjmwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAW5sAAAAAAABbmwAAAAAAAAAAAAAAAPC/"
				],
				[
					8320,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGSbAAAAAAAAZZsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZJsAAAAAAABkmwAAAAAAAAAAAAAAAPC/"
				],
				[
					8321,
					2,
					"left_delete",
					null,
					"AgAAAGSbAAAAAAAAZJsAAAAAAAABAAAAIGObAAAAAAAAY5sAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAZZsAAAAAAABlmwAAAAAAAAAAAAAAAPC/"
				],
				[
					8322,
					1,
					"insert",
					{
						"characters": "0)r"
					},
					"AwAAAGObAAAAAAAAZJsAAAAAAAAAAAAAZJsAAAAAAABlmwAAAAAAAAAAAABlmwAAAAAAAGabAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAY5sAAAAAAABjmwAAAAAAAAAAAAAAAPC/"
				],
				[
					8323,
					1,
					"left_delete",
					null,
					"AQAAAGWbAAAAAAAAZZsAAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAAZpsAAAAAAABmmwAAAAAAAAAAAAAAAPC/"
				],
				[
					8324,
					1,
					"insert",
					{
						"characters": " reu"
					},
					"BAAAAGWbAAAAAAAAZpsAAAAAAAAAAAAAZpsAAAAAAABnmwAAAAAAAAAAAABnmwAAAAAAAGibAAAAAAAAAAAAAGibAAAAAAAAaZsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZZsAAAAAAABlmwAAAAAAAAAAAAAAAPC/"
				],
				[
					8325,
					1,
					"left_delete",
					null,
					"AQAAAGibAAAAAAAAaJsAAAAAAAABAAAAdQ",
					"AQAAAAAAAAABAAAAaZsAAAAAAABpmwAAAAAAAAAAAAAAAPC/"
				],
				[
					8326,
					1,
					"insert",
					{
						"characters": "turn"
					},
					"BAAAAGibAAAAAAAAaZsAAAAAAAAAAAAAaZsAAAAAAABqmwAAAAAAAAAAAABqmwAAAAAAAGubAAAAAAAAAAAAAGubAAAAAAAAbJsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaJsAAAAAAABomwAAAAAAAAAAAAAAAPC/"
				],
				[
					8327,
					1,
					"insert",
					{
						"characters": " node;"
					},
					"BgAAAGybAAAAAAAAbZsAAAAAAAAAAAAAbZsAAAAAAABumwAAAAAAAAAAAABumwAAAAAAAG+bAAAAAAAAAAAAAG+bAAAAAAAAcJsAAAAAAAAAAAAAcJsAAAAAAABxmwAAAAAAAAAAAABxmwAAAAAAAHKbAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbJsAAAAAAABsmwAAAAAAAAAAAAAAAPC/"
				],
				[
					8328,
					1,
					"insert",
					{
						"characters": "\n\nreturn"
					},
					"CAAAAHKbAAAAAAAAc5sAAAAAAAAAAAAAc5sAAAAAAAB0mwAAAAAAAAAAAAB0mwAAAAAAAHWbAAAAAAAAAAAAAHWbAAAAAAAAdpsAAAAAAAAAAAAAdpsAAAAAAAB3mwAAAAAAAAAAAAB3mwAAAAAAAHibAAAAAAAAAAAAAHibAAAAAAAAeZsAAAAAAAAAAAAAeZsAAAAAAAB6mwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcpsAAAAAAABymwAAAAAAAAAAAAAAAPC/"
				],
				[
					8329,
					1,
					"insert",
					{
						"characters": " this.getNam"
					},
					"DAAAAHqbAAAAAAAAe5sAAAAAAAAAAAAAe5sAAAAAAAB8mwAAAAAAAAAAAAB8mwAAAAAAAH2bAAAAAAAAAAAAAH2bAAAAAAAAfpsAAAAAAAAAAAAAfpsAAAAAAAB/mwAAAAAAAAAAAAB/mwAAAAAAAICbAAAAAAAAAAAAAICbAAAAAAAAgZsAAAAAAAAAAAAAgZsAAAAAAACCmwAAAAAAAAAAAACCmwAAAAAAAIObAAAAAAAAAAAAAIObAAAAAAAAhJsAAAAAAAAAAAAAhJsAAAAAAACFmwAAAAAAAAAAAACFmwAAAAAAAIabAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAepsAAAAAAAB6mwAAAAAAAAAAAAAAAPC/"
				],
				[
					8330,
					1,
					"insert",
					{
						"characters": "espace"
					},
					"BgAAAIabAAAAAAAAh5sAAAAAAAAAAAAAh5sAAAAAAACImwAAAAAAAAAAAACImwAAAAAAAImbAAAAAAAAAAAAAImbAAAAAAAAipsAAAAAAAAAAAAAipsAAAAAAACLmwAAAAAAAAAAAACLmwAAAAAAAIybAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhpsAAAAAAACGmwAAAAAAAAAAAAAAAPC/"
				],
				[
					8331,
					5,
					"left_delete",
					null,
					"BQAAAIubAAAAAAAAi5sAAAAAAAABAAAAZYqbAAAAAAAAipsAAAAAAAABAAAAY4mbAAAAAAAAiZsAAAAAAAABAAAAYYibAAAAAAAAiJsAAAAAAAABAAAAcIebAAAAAAAAh5sAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAjJsAAAAAAACMmwAAAAAAAAAAAAAAAPC/"
				],
				[
					8332,
					1,
					"insert",
					{
						"characters": "space"
					},
					"BQAAAIebAAAAAAAAiJsAAAAAAAAAAAAAiJsAAAAAAACJmwAAAAAAAAAAAACJmwAAAAAAAIqbAAAAAAAAAAAAAIqbAAAAAAAAi5sAAAAAAAAAAAAAi5sAAAAAAACMmwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAh5sAAAAAAACHmwAAAAAAAAAAAAAAAPC/"
				],
				[
					8333,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAIybAAAAAAAAjpsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjJsAAAAAAACMmwAAAAAAAAAAAAAAAPC/"
				],
				[
					8334,
					1,
					"insert",
					{
						"characters": "a,"
					},
					"AgAAAI2bAAAAAAAAjpsAAAAAAAAAAAAAjpsAAAAAAACPmwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjZsAAAAAAACNmwAAAAAAAAAAAAAAAPC/"
				],
				[
					8335,
					1,
					"insert",
					{
						"characters": " node"
					},
					"BQAAAI+bAAAAAAAAkJsAAAAAAAAAAAAAkJsAAAAAAACRmwAAAAAAAAAAAACRmwAAAAAAAJKbAAAAAAAAAAAAAJKbAAAAAAAAk5sAAAAAAAAAAAAAk5sAAAAAAACUmwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAj5sAAAAAAACPmwAAAAAAAAAAAAAAAPC/"
				],
				[
					8337,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAJWbAAAAAAAAlpsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlZsAAAAAAACVmwAAAAAAAAAAAAAAAPC/"
				],
				[
					8350,
					1,
					"left_delete",
					null,
					"AQAAAKqbAAAAAAAAqpsAAAAAAAABAAAAfQ",
					"AQAAAAAAAAABAAAAq5sAAAAAAACrmwAAAAAAAAAAAAAAIHNA"
				],
				[
					8353,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAqpsAAAAAAACqmwAAAAAAAAAAAAAAAPC/"
				],
				[
					8358,
					1,
					"insert",
					{
						"characters": "first"
					},
					"BgAAAEibAAAAAAAASZsAAAAAAAAAAAAASZsAAAAAAABJmwAAAAAAAAQAAABuYW1lSZsAAAAAAABKmwAAAAAAAAAAAABKmwAAAAAAAEubAAAAAAAAAAAAAEubAAAAAAAATJsAAAAAAAAAAAAATJsAAAAAAABNmwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASJsAAAAAAABMmwAAAAAAAAAAAAAAAPC/"
				],
				[
					8369,
					1,
					"cut",
					null,
					"AQAAACqbAAAAAAAAKpsAAAAAAAAuAAAAY29uc29sZS5sb2coJ2dldE5hbWVzcGFjZScsIHsgZmlyc3QsIG5vZGUgfSk7Cg",
					"AQAAAAAAAAABAAAAKpsAAAAAAABYmwAAAAAAAAAAAAAAgFZA"
				],
				[
					8370,
					1,
					"paste",
					null,
					"AQAAACqbAAAAAAAAWJsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKpsAAAAAAAAqmwAAAAAAAAAAAAAAAPC/"
				],
				[
					8372,
					1,
					"paste",
					null,
					"AQAAAPCZAAAAAAAAHpoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8JkAAAAAAADwmQAAAAAAAAAAAAAAAAAA"
				],
				[
					8376,
					1,
					"insert",
					{
						"characters": "name,root"
					},
					"CgAAAA6aAAAAAAAAD5oAAAAAAAAAAAAAD5oAAAAAAAAPmgAAAAAAAAsAAABmaXJzdCwgbm9kZQ+aAAAAAAAAEJoAAAAAAAAAAAAAEJoAAAAAAAARmgAAAAAAAAAAAAARmgAAAAAAABKaAAAAAAAAAAAAABKaAAAAAAAAE5oAAAAAAAAAAAAAE5oAAAAAAAAUmgAAAAAAAAAAAAAUmgAAAAAAABWaAAAAAAAAAAAAABWaAAAAAAAAFpoAAAAAAAAAAAAAFpoAAAAAAAAXmgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADpoAAAAAAAAZmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8418,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAABuaAAAAAAAAHJoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAG5oAAAAAAAAbmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8450,
					1,
					"insert",
					{
						"characters": "(/"
					},
					"AgAAAAmaAAAAAAAACpoAAAAAAAAAAAAACpoAAAAAAAALmgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACZoAAAAAAAAJmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8451,
					1,
					"left_delete",
					null,
					"AQAAAAqaAAAAAAAACpoAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAAC5oAAAAAAAALmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8452,
					1,
					"insert",
					{
						"characters": "1)"
					},
					"AgAAAAqaAAAAAAAAC5oAAAAAAAAAAAAAC5oAAAAAAAAMmgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACpoAAAAAAAAKmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8458,
					1,
					"paste",
					null,
					"AQAAAHObAAAAAAAAdpsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAc5sAAAAAAABzmwAAAAAAAAAAAAAAAPC/"
				],
				[
					8460,
					1,
					"left_delete",
					null,
					"AQAAAHSbAAAAAAAAdJsAAAAAAAABAAAAMQ",
					"AQAAAAAAAAABAAAAdZsAAAAAAAB1mwAAAAAAAAAAAAAAAPC/"
				],
				[
					8461,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AQAAAHSbAAAAAAAAdZsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdJsAAAAAAAB0mwAAAAAAAAAAAAAAAPC/"
				],
				[
					8466,
					1,
					"insert",
					{
						"characters": "["
					},
					"AQAAAI+aAAAAAAAAkJoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAj5oAAAAAAACPmgAAAAAAAAAAAAAAAPC/"
				],
				[
					8468,
					1,
					"insert",
					{
						"characters": "]"
					},
					"AQAAAJWaAAAAAAAAlpoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlZoAAAAAAACVmgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "quickjs/qjs-modules/lib/util.js",
			"settings":
			{
				"buffer_size": 70163,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"contents": "Searching 35281 files for \"apper.*WeakMap\" (regex, case sensitive)\n\n~/Projects/plot-cv/debugger-server.es:\n 6206  \n 6207    let protocol = new WeakMap();\n 6208:   let ws2dbg =globalThis.ws2dbg =mapWrapper(new WeakMap());\n 6209  \n 6210    let sockets = (globalThis.sockets ??= new Set());\n\n~/Projects/plot-cv/debugger-server.js:\n  525  \n  526    let protocol = new WeakMap();\n  527:   let ws2dbg = (globalThis.ws2dbg = mapWrapper(new WeakMap()));\n  528:   let dbg2ws = (globalThis.dbg2ws = mapWrapper(new WeakMap()));\n  529  \n  530    let sockets = (globalThis.sockets ??= new Set());\n\n~/Projects/plot-cv/fire.es:\n 6813  Util.assignGlobal = () => Util.weakAssign(Util.getGlobalObject(), Util);\n 6814  \n 6815: Util.weakMapper = function(createFn, map = new WeakMap(), hitFn) {\n 6816    let self = function(obj, ...args) {\n 6817      let ret;\n\n~/Projects/plot-cv/meriyah:\n    <binary>\n\n~/Projects/plot-cv/svg-crop-pad.es:\n 6627  Util.assignGlobal = () => Util.weakAssign(Util.getGlobalObject(), Util);\n 6628  \n 6629: Util.weakMapper = function(createFn, map = new WeakMap(), hitFn) {\n 6630    let self = function(obj, ...args) {\n 6631      let ret;\n\n~/Projects/plot-cv/svg-crop-pad.js:\n  405  \n  406  let positioned = (globalThis.positioned = new Set());\n  407: let positionedProps = (globalThis.positionedProps = mapWrapper(new WeakMap()));\n  408  \n  409  function GetBounds(svgElem = svg) {\n\n~/Projects/plot-cv/video.mp4:\n    File too large, skipping\n\n~/Projects/plot-cv/lib/misc.js:\n 1494  }\n 1495  \n 1496: export function weakMapper(createFn, map = new WeakMap(), hitFn) {\n 1497    let self = function(obj, ...args) {\n 1498      let ret;\n\n~/Projects/plot-cv/lib/util.js:\n 4798  Util.assignGlobal = () => Util.weakDefine(Util.getGlobalObject(), Util);\n 4799  \n 4800: Util.weakMapper = function(createFn, map = new WeakMap(), hitFn) {\n 4801    let self = function(obj, ...args) {\n 4802      let ret;\n\n~/Projects/plot-cv/lib/ecmascript/parser2.js:\n  263      const range = [stackEntry.start, stackEntry.end];\n  264  \n  265:     if(!this.assoc) this.assoc = weakMapper(() => ({}), new WeakMap());\n  266  \n  267      let obj = this.assoc(node /*, {}*/);\n\n~/Projects/plot-cv/lib/json/pathMapper.js:\n  103  \n  104  export class WrapperMapper {\n  105:   obj2wrapper = new WeakMap();\n  106    ctor = null;\n  107  \n\n~/Projects/plot-cv/lib/whatwg/abort-controller.js:\n   37   * @private\n   38   */\n   39: const wrappers = new WeakMap();\n   40  \n   41  /**\n\n~/Projects/plot-cv/qjs-opencv/js/cvPipeline.js:\n  133  export function Processor(fn, ...args) {\n  134    let self;\n  135:   let mapper = WeakMapper((fn, ...args) => {\n  136      let mat = new Mat();\n  137      // console.log('new Mat(', ...args, ')');\n\n~/Projects/plot-cv/qjs-opencv/js/cvUtils.js:\n    1  export const Modulo = (a, b) => ((a % b) + b) % b;\n    2  \n    3: export const WeakMapper = (createFn, map = new WeakMap(), hitFn) => {\n    4    let self = function(obj, ...args) {\n    5      let ret;\n\n~/Projects/plot-cv/qjs-opencv/js/cvVideo.js:\n   14  \n   15  const Crop = (() => {\n   16:   const mapper = WeakMapper(() => new Mat());\n   17    return function Crop(mat, rect) {\n   18      let tmp = mapper(mat);\n\n~/Projects/plot-cv/quickjs/qjs-modules/lib/util.js:\n 2454  }\n 2455  \n 2456: export function weakMapper(createFn, map = new WeakMap(), hitFn) {\n 2457    let self = function(obj, ...args) {\n 2458      let ret;\n\n~/Projects/plot-cv/r/lib/misc.js:\n 1475  }\n 1476  \n 1477: export function weakMapper(createFn, map = new WeakMap(), hitFn) {\n 1478    let self = function(obj, ...args) {\n 1479      let ret;\n\n~/Projects/plot-cv/r/lib/util.js:\n 4798  Util.assignGlobal = () => Util.weakDefine(Util.getGlobalObject(), Util);\n 4799  \n 4800: Util.weakMapper = function(createFn, map = new WeakMap(), hitFn) {\n 4801    let self = function(obj, ...args) {\n 4802      let ret;\n\n~/Projects/plot-cv/r/lib/ecmascript/parser2.js:\n  263      const range = [stackEntry.start, stackEntry.end];\n  264  \n  265:     if(!this.assoc) this.assoc = weakMapper(() => ({}), new WeakMap());\n  266  \n  267      let obj = this.assoc(node /*, {}*/);\n\n~/Projects/plot-cv/r/lib/json/pathMapper.js:\n  103  \n  104  export class WrapperMapper {\n  105:   obj2wrapper = new WeakMap();\n  106    ctor = null;\n  107  \n\n~/Projects/plot-cv/r/lib/whatwg/abort-controller.js:\n   37   * @private\n   38   */\n   39: const wrappers = new WeakMap();\n   40  \n   41  /**\n\n~/Projects/plot-cv/webakeit/lib/misc.js:\n 1475  }\n 1476  \n 1477: export function weakMapper(createFn, map = new WeakMap(), hitFn) {\n 1478    let self = function(obj, ...args) {\n 1479      let ret;\n\n~/Projects/plot-cv/webakeit/lib/util.js:\n 4798  Util.assignGlobal = () => Util.weakDefine(Util.getGlobalObject(), Util);\n 4799  \n 4800: Util.weakMapper = function(createFn, map = new WeakMap(), hitFn) {\n 4801    let self = function(obj, ...args) {\n 4802      let ret;\n\n~/Projects/plot-cv/webakeit/lib/ecmascript/parser2.js:\n  263      const range = [stackEntry.start, stackEntry.end];\n  264  \n  265:     if(!this.assoc) this.assoc = weakMapper(() => ({}), new WeakMap());\n  266  \n  267      let obj = this.assoc(node /*, {}*/);\n\n~/Projects/plot-cv/webakeit/lib/json/pathMapper.js:\n  103  \n  104  export class WrapperMapper {\n  105:   obj2wrapper = new WeakMap();\n  106    ctor = null;\n  107  \n\n~/Projects/plot-cv/webakeit/lib/whatwg/abort-controller.js:\n   37   * @private\n   38   */\n   39: const wrappers = new WeakMap();\n   40  \n   41  /**\n\n26 matches across 25 files\n",
			"settings":
			{
				"buffer_size": 5450,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "lib/deep.js",
			"settings":
			{
				"buffer_size": 7536,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"doxy",
				"DoxyDoxygen: Comment All"
			],
			[
				"",
				":$ - EOF"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"format",
				"JsPrettier: Format Code"
			],
			[
				"prett",
				"JsPrettier: Format Code"
			],
			[
				"ou",
				"Browse Mode: Outline (Right)"
			],
			[
				"instga",
				"Package Control: Install Package"
			],
			[
				"prettier",
				"JsPrettier: Format Code"
			],
			[
				"json",
				"Pretty JSON: Minify JSON"
			],
			[
				"jspr",
				"JsPrettier: Format Code"
			],
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"color",
				"Color Highlight: Reset"
			],
			[
				"scheme",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"edit cu",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"install pac",
				"Package Control: Install Package"
			],
			[
				"list pack",
				"Package Control: List Packages"
			],
			[
				"edit ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"edit",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"outli",
				"Browse Mode: Outline (Right)"
			],
			[
				"debugger",
				"Preferences: Debugger Settings"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"INSTALL",
				"Package Control: Install Package"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"adap",
				"Debugger: Install Adapters"
			],
			[
				"install ada",
				"Debugger: Install Adapters"
			],
			[
				"adapter",
				"Debugger: Install Adapters"
			],
			[
				"debug",
				"Debugger: Install Adapters"
			],
			[
				"Package Control: remove",
				"Package Control: Remove Package"
			],
			[
				"debu",
				"Debugger: Install Adapters"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 289.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/clang-ast.js",
		"/home/janos/Projects/plot-cv/out.gz",
		"/home/roman/Projects/plot-cv/soundcloud-tracks.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-context-vhost.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/test.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lws-context.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/events.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/web-platform-tests-streams/shared-storage/resources/util.sub.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/console.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-repeater.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/property-enumeration.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/buffer-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/qjsm.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/io.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/js-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/stream-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/queue.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-mysql.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-blob.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fs.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/async-closure.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/misc.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/xpath.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/xml.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-textcode.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/ringbuffer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/inotify.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/extendObject.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/ringbuffer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/js-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/streams.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake/functions.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/defines.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/async-closure.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/buffer-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fsPromises.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-syscallerror.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-syscallerror.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/web-platform-tests-streams/editing/crashtests/make-editable-div-inline-and-set-contenteditable-of-input-to-false.html",
		"/home/roman/Projects/plot-cv/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/process.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-magic.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_repeater.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-child-process.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/virtual-properties.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/child-process.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-predicate.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-pointer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-pgsql.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-path.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-mmap.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-location.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-list.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-internal.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-gpio.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/list-exports.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-serial.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-tree-walker.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-directory.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-deep.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/char-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-bjson.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-blob.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-queue.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-xml.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/path.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-archive.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/vector.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/predicate.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/inet_pton.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/path.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/xml-shell.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/testharnessreport.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/web-platform-tests-streams/streams/readable-streams/async-iterator.any.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_streams.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_stream.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/testharness.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/strverscmp.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/queue.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/mmap-win32.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/memmem.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/location.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/inet_ntop.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/getdents.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/debug.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/clock_gettime.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_sockets.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_pgsql.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_childprocess.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-llvm/usr/local/lib/quickjs/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-release/usr/local/lib/quickjs/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-clang/usr/local/lib/quickjs/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/parser/ebnf.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/lexer/bnf.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_inotify.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_deep.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_blob.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_predicate.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_treewalker.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_pointer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_op_overloading.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_xml.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-profile/usr/local/bin/list-exports.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-clang/usr/local/bin/resolve-imports.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-clang/usr/local/bin/list-exports.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-release/usr/local/bin/resolve-imports.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-release/usr/local/bin/list-exports.js"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 138.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"namespaceOf",
			"mapWrapper",
			"apper.*WeakMap",
			"mapper",
			"ion getset\\b",
			"gettersetter",
			"WeakMap",
			"select\\b",
			"getNamespace",
			"storageClass",
			"EnumDecl'",
			"EnumDecl",
			"QuickJS",
			"'Enum",
			"members =",
			"MethodDecl'",
			"MethodDecl",
			"'CXXRecordDec",
			"'CXX",
			"['\"`]SpawnCompiler",
			"SpawnCompiler",
			"Loading history",
			"debugLog",
			"debug.log",
			"bases",
			"GetBases",
			"GetClass",
			"memoize",
			"Decl.constr",
			"properties",
			"memoize",
			"nonen",
			"nonenum",
			"GetClass",
			"prettier\\-ignore",
			"prettier-ignore",
			";\n",
			"GetType,",
			"GetClass",
			"ast2path",
			"TypeFactory",
			"nameOrIdPred",
			"ion GetType\\b",
			"ion GetType",
			"GetType",
			"getClass",
			"node2ast.set",
			"class Node ",
			"class RecordDecl",
			"bases",
			"ion TypeFactor",
			"TypeFactor",
			"'membere'",
			"'members'",
			"bases",
			"'member",
			"'child'",
			"SpawnComp",
			"\\bchild\\b",
			"SpawnComp",
			"'child'",
			"returnType = ",
			"ClassDecl",
			"class Node ",
			"\\bClassDecl\\b",
			"class ClassDecl",
			"QuickJS",
			"FunctionDecl.cons",
			"class Type ",
			"true",
			"members =",
			"getType",
			"class Type ",
			"getClass",
			"returnType\\b",
			"MakeQuickJSClass",
			"QuickJS",
			"pathOf",
			"WeakMap",
			"getClass",
			"decamelize",
			"QuickJS",
			"class FunctionDecl",
			"FunctionDecl",
			"ctordtor",
			"'CXXRecord",
			"\\bClassDecl",
			"\\bClassDercl",
			"desugared\\b",
			"desugared",
			"typeAlias\\b",
			"typeAlias",
			"typeAlias =",
			"mangledName = ",
			"mangledName",
			"class FunctionDecl ",
			"/Constructor/",
			"/Construct",
			"= true",
			"constructor = true",
			"constructor",
			"CXXConstructorDecl",
			"members =",
			"'Access'",
			"\\bTypeFactory\\(",
			"ion TypeFactory",
			"TypeFactory",
			"members`",
			"[`'\"]members",
			"'members",
			"'cfg",
			"cfg",
			"ClassDecl",
			"getType",
			"json\\(\\)",
			"getType"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"namespaceOf"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3415,
						"regions":
						{
						},
						"selection":
						[
							[
								241,
								241
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": "/home/roman/Projects/plot-cv/ast-shell.js",
							"function_name_status_row": 12,
							"outline_rename_mode": false,
							"symkeys":
							[
								[
									1970,
									1974
								],
								[
									2033,
									2037
								],
								[
									2073,
									2103
								],
								[
									2146,
									2167
								],
								[
									2316,
									2342
								],
								[
									2500,
									2519
								],
								[
									2848,
									2876
								],
								[
									3166,
									3174
								],
								[
									3175,
									3189
								],
								[
									3271,
									3281
								],
								[
									3344,
									3392
								],
								[
									3506,
									3515
								],
								[
									3625,
									3647
								],
								[
									4109,
									4131
								],
								[
									4495,
									4513
								],
								[
									4613,
									4631
								],
								[
									4737,
									4763
								],
								[
									4899,
									4903
								],
								[
									4982,
									4998
								],
								[
									5484,
									5503
								],
								[
									6002,
									6007
								],
								[
									6082,
									6097
								],
								[
									6182,
									6190
								],
								[
									6231,
									6239
								],
								[
									6611,
									6684
								],
								[
									6688,
									6696
								],
								[
									6793,
									6823
								],
								[
									6852,
									6857
								],
								[
									6890,
									6897
								],
								[
									6926,
									6954
								],
								[
									7291,
									7298
								],
								[
									7317,
									7340
								],
								[
									7370,
									7377
								],
								[
									7408,
									7416
								],
								[
									7454,
									7461
								],
								[
									7661,
									7674
								],
								[
									7855,
									7898
								],
								[
									7931,
									7940
								],
								[
									8001,
									8005
								],
								[
									8107,
									8111
								],
								[
									8147,
									8161
								],
								[
									8273,
									8301
								],
								[
									8506,
									8531
								],
								[
									8629,
									8653
								],
								[
									8726,
									8730
								],
								[
									8849,
									8853
								],
								[
									8917,
									8931
								],
								[
									8987,
									8996
								],
								[
									9294,
									9308
								],
								[
									9431,
									9466
								],
								[
									9555,
									9560
								],
								[
									9683,
									9695
								],
								[
									9748,
									9773
								],
								[
									9822,
									9833
								],
								[
									9873,
									9884
								],
								[
									10022,
									10033
								],
								[
									10121,
									10134
								],
								[
									10215,
									10247
								],
								[
									10485,
									10514
								],
								[
									10525,
									10540
								],
								[
									10602,
									10621
								],
								[
									10829,
									10868
								],
								[
									10933,
									10973
								],
								[
									11056,
									11100
								],
								[
									11182,
									11221
								],
								[
									11283,
									11321
								],
								[
									11407,
									11435
								],
								[
									11498,
									11525
								],
								[
									12076,
									12102
								],
								[
									12369,
									12376
								],
								[
									14292,
									14350
								],
								[
									15386,
									15393
								],
								[
									15457,
									15464
								],
								[
									15474,
									15485
								],
								[
									15526,
									15552
								],
								[
									15668,
									15682
								],
								[
									15979,
									15998
								],
								[
									16025,
									16032
								],
								[
									16121,
									16151
								],
								[
									16217,
									16257
								],
								[
									16433,
									16484
								],
								[
									17473,
									17480
								],
								[
									17887,
									17907
								],
								[
									18083,
									18137
								],
								[
									18326,
									18338
								],
								[
									18366,
									18378
								],
								[
									18995,
									19055
								],
								[
									19666,
									19721
								],
								[
									19817,
									19829
								],
								[
									19834,
									19864
								],
								[
									20145,
									20167
								],
								[
									20213,
									20236
								],
								[
									20308,
									20323
								],
								[
									20458,
									20474
								],
								[
									20878,
									20891
								],
								[
									21016,
									21035
								],
								[
									21087,
									21095
								],
								[
									21152,
									21167
								],
								[
									21327,
									21339
								],
								[
									21684,
									21698
								],
								[
									21798,
									21815
								],
								[
									22042,
									22064
								],
								[
									22181,
									22206
								],
								[
									22306,
									22323
								],
								[
									22378,
									22382
								],
								[
									22470,
									22474
								],
								[
									22526,
									22550
								],
								[
									22666,
									22706
								],
								[
									22767,
									22788
								],
								[
									23072,
									23104
								],
								[
									23589,
									23604
								],
								[
									23715,
									23740
								],
								[
									23909,
									23944
								],
								[
									24164,
									24171
								],
								[
									24260,
									24267
								],
								[
									24296,
									24305
								],
								[
									24342,
									24351
								],
								[
									24401,
									24409
								],
								[
									24451,
									24475
								],
								[
									24571,
									24587
								],
								[
									24623,
									24663
								],
								[
									24961,
									25004
								],
								[
									25947,
									25958
								],
								[
									26703,
									26753
								],
								[
									26775,
									26801
								],
								[
									26836,
									26865
								],
								[
									27209,
									27252
								],
								[
									27365,
									27369
								],
								[
									27385,
									27389
								],
								[
									27434,
									27521
								],
								[
									27688,
									27721
								],
								[
									27780,
									27785
								],
								[
									27855,
									27897
								],
								[
									27973,
									27983
								],
								[
									28102,
									28142
								],
								[
									28283,
									28288
								],
								[
									28346,
									28353
								],
								[
									28470,
									28474
								],
								[
									28553,
									28557
								],
								[
									28711,
									28718
								],
								[
									28805,
									28810
								],
								[
									28918,
									28934
								],
								[
									29045,
									29052
								],
								[
									29131,
									29135
								],
								[
									29196,
									29203
								],
								[
									29279,
									29286
								],
								[
									29343,
									29389
								],
								[
									29429,
									29439
								],
								[
									29592,
									29628
								],
								[
									29669,
									29681
								],
								[
									31324,
									31345
								],
								[
									31544,
									31584
								],
								[
									31739,
									31743
								],
								[
									31855,
									31859
								],
								[
									31928,
									31932
								],
								[
									32000,
									32004
								],
								[
									36643,
									36675
								],
								[
									37162,
									37172
								],
								[
									37222,
									37232
								],
								[
									37280,
									37290
								],
								[
									37868,
									37879
								],
								[
									37973,
									37977
								],
								[
									38004,
									38008
								],
								[
									38032,
									38036
								],
								[
									38060,
									38064
								],
								[
									38093,
									38130
								],
								[
									38569,
									38605
								],
								[
									38694,
									38737
								],
								[
									39024,
									39043
								],
								[
									39097,
									39102
								],
								[
									39369,
									39405
								],
								[
									39644,
									39649
								],
								[
									40409,
									40426
								],
								[
									40779,
									40789
								],
								[
									40885,
									40905
								],
								[
									40971,
									40994
								],
								[
									41082,
									41087
								],
								[
									41199,
									41222
								],
								[
									41310,
									41315
								],
								[
									41417,
									41429
								],
								[
									41544,
									41549
								],
								[
									41605,
									41634
								],
								[
									41813,
									41818
								],
								[
									42789,
									42847
								],
								[
									43811,
									43822
								],
								[
									43855,
									43866
								],
								[
									43915,
									43921
								],
								[
									43974,
									43982
								],
								[
									44280,
									44284
								],
								[
									44976,
									44982
								]
							],
							"symlist":
							[
								"  d =>",
								"  d =>",
								"  traceProxy = (obj, handler) =>",
								"function(name, args)",
								"  get(target, key, receiver)",
								"  member = function()",
								"ConcatIterator = iterator =>",
								"gen =>",
								"(...args) =>",
								"  toString()",
								"ImportModule(modulePath, ...args)",
								"  module =>",
								"(acc, item) =>",
								"CommandLine()",
								"(...args) =>",
								"(...args) =>",
								"(module, ...args) =>",
								"  m =>",
								"  .show = value =>",
								"  .printNode = arg =>",
								"() =>",
								"(item, i, a) =>",
								"  entry =>",
								"  entry =>",
								"IncludeAll(dir, maxDepth = Infinity, pred = entry => /\\.[ch]$/.",
								"(entry))",
								"SelectLocations(node)",
								"n =>",
								"  prop =>",
								"LocationString(loc)",
								"  node =>",
								"Structs(nodes)",
								"  node =>",
								"  field =>",
								"  node =>",
								"(field, i) =>",
								"Table(list, pred = (n, l) => true)",
								"(n, i) =>",
								"  e =>",
								"  k =>",
								"([i, l, n]) =>",
								"  returnType(n)",
								"  numArgs(n)",
								"Params(n)",
								"  p =>",
								"  k =>",
								"([i, l, n]) =>",
								"(k, j) =>",
								"(acc, name) =>",
								"  padTrunc(len, pad = ' ')",
								"s =>",
								"(name, i) =>",
								"  pad = (cols, pad, sep) =>",
								"(key, i) =>",
								"(s, col) =>",
								"(acc, n) =>",
								"(acc, row) =>",
								"PrintRange(range, file)",
								"OverlapRange(r1, r2)",
								"GetRange = r =>",
								"InRange = (i, r) =>",
								"ParentNode(node, ast = $.data)",
								"NextSibling(node, ast = $.data)",
								"PreviousSibling(node, ast = $.data)",
								"FirstChild(node, ast = $.data)",
								"LastChild(node, ast = $.data)",
								"Terminate(exitCode)",
								"ParseStructs(text)",
								"(decl, includes)",
								"  name =>",
								"InspectStruct(decl, includes, compiler = 'clang')",
								"  line =>",
								"  line =>",
								"(col, i) =>",
								"([field, offset, size]) =>",
								"(acc, line) =>",
								"  toString(sep = ' ')",
								"  line =>",
								"RoundTo(value, align)",
								"MakeStructClass(decl, filename)",
								"GenerateStructClass(decl, ffiPrefix = '')",
								"  line =>",
								"([field, member]) =>",
								"GenerateGetSet(name, offset, type, ffiPrefix)",
								"  toHex = v =>",
								"  toHex = v =>",
								"ByteLength2TypedArray(byteLength, signed, floating)",
								"ByteLength2Value(byteLength, signed, floating)",
								"FFI_Function",
								"  constructor(node, prefix = '')",
								"([name, type], idx) =>",
								"  generateDefine(fp, lib)",
								"(name, lib) =>",
								"  colorText = x =>",
								"  generateDoc()",
								"  push = (...args) =>",
								"  field =>",
								"(field, col) =>",
								"  js = type =>",
								"  generateCall()",
								"([name, type]) =>",
								"  generate(fp, lib, exp)",
								"  generateFunction(fp, lib)",
								"([name, type]) =>",
								"  p =>",
								"  p =>",
								"  compileFunction(fp, lib)",
								"FdReader(fd, bufferSize = 1024)",
								"(push, stop) =>",
								"CommandRead(args)",
								"  reader =>",
								"ReadOutput(fd)",
								"LibraryExports(file)",
								"  line =>",
								"  line =>",
								"  column =>",
								"(a, b) =>",
								"  entry =>",
								"SaveLibraries()",
								"(acc, [n, e]) =>",
								"ProcessFile(file, debug = true)",
								"ParseECMAScript(file, params = {})",
								"(fr, i) =>",
								"PrintECMAScript(ast, comments, printer = ",
								"({ indent: 4 }, comments))",
								"PrintCArray(strings)",
								"Namespaces(nodePath, ast = $.data)",
								"  p =>",
								"  n =>",
								"Constants(node, t = (name, value) => [name, !isNaN(+value) ? +value : value])",
								"GetImports(ast = $.data)",
								"n =>",
								"GetIdentifiers(nodes, key = null)",
								"(n, k) =>",
								"MemberNames(members, flags = 0)",
								"n =>",
								"  path =>",
								"  p =>",
								"  p =>",
								"  name =>",
								"n =>",
								"([node, ptr]) =>",
								"  path =>",
								"  p =>",
								"  name =>",
								"  name =>",
								"UnsetLoc(node, pred = (v, p) => true)",
								"(v, k) =>",
								"MakeFFI(node, lib, exp, fp)",
								"()",
								"MakeId(name)",
								"MakeQuickJSClass(node, ast = $)",
								"  n =>",
								"  n =>",
								"  n =>",
								"  n =>",
								"ASTShell(...args)",
								"(a, p) =>",
								"(a, p) =>",
								"(a, p) =>",
								"  get flags()",
								"  v =>",
								"  v =>",
								"  d =>",
								"  l =>",
								"Compile(file, ...args)",
								"  select(name_or_id, pred = n => true)",
								"  getByIdOrName(name_or_id, pred = n => true)",
								"  getType(name_or_id)",
								"n =>",
								"  getNamespace(name, root = this.data)",
								"n =>",
								"  namespaceOf(node)",
								"  toString()",
								"  getClass(name_or_id)",
								"  getFunction(name_or_id)",
								"n =>",
								"  getVariable(name_or_id)",
								"n =>",
								"  getLoc(node)",
								"() =>",
								"  pathOf(needle, maxDepth = 10)",
								"n =>",
								"Pointer.prototype.chain = function(step, limit = Infinity)",
								"  .F = arg =>",
								"  .T = arg =>",
								"() =>",
								"node =>",
								"  s =>",
								"fr =>"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tabs_extra_last_activated": 1745072040.63,
							"tabs_extra_last_activated_sheet_index": 0
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "soundcloud-tracks.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1609,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								1606
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1745067546.34,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "clang-ast.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 81273,
						"regions":
						{
						},
						"selection":
						[
							[
								3608,
								3615
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 133,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1745068332.96,
							"tabs_extra_last_activated_sheet_index": 1,
							"tabs_extra_moving":
							[
								8,
								1
							],
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1867.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "os-helpers.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2475,
						"regions":
						{
						},
						"selection":
						[
							[
								1672,
								1672
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 63,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1745067546.71,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 969.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "clang-list.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8033,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1745067547.07,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "ast-shell.js",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 45099,
						"regions":
						{
						},
						"selection":
						[
							[
								3625,
								3647
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 109,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1745072040.64,
							"tabs_extra_last_activated_sheet_index": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 72.0,
						"translation.y": 1409.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "quickjs/qjs-modules/lib/util.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 70163,
						"regions":
						{
						},
						"selection":
						[
							[
								64543,
								64550
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 2455,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1745068331.8,
							"tabs_extra_last_activated_sheet_index": 5,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 41341.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5450,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										199,
										216
									],
									[
										423,
										440
									],
									[
										494,
										511
									],
									[
										718,
										762
									],
									[
										1024,
										1068
									],
									[
										1316,
										1333
									],
									[
										1528,
										1561
									],
									[
										1777,
										1821
									],
									[
										2060,
										2089
									],
									[
										2253,
										2272
									],
									[
										2403,
										2423
									],
									[
										2576,
										2591
									],
									[
										2836,
										2872
									],
									[
										3052,
										3067
									],
									[
										3264,
										3297
									],
									[
										3455,
										3488
									],
									[
										3706,
										3750
									],
									[
										3991,
										4020
									],
									[
										4186,
										4205
									],
									[
										4338,
										4358
									],
									[
										4468,
										4501
									],
									[
										4726,
										4770
									],
									[
										5018,
										5047
									],
									[
										5220,
										5239
									],
									[
										5379,
										5399
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"detect_indentation": false,
							"function_name_status_row": 0,
							"line_numbers": false,
							"output_tag": 1,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage",
							"tabs_extra_last_activated": 1745068330.75,
							"tabs_extra_last_activated_sheet_index": 6,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "lib/deep.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7536,
						"regions":
						{
						},
						"selection":
						[
							[
								2976,
								2982
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 109,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1745068222.84,
							"tabs_extra_last_activated_sheet_index": 6,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1255.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.764828128058,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.coffeecompile_output":
	{
		"height": 150.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "plot-cv.sublime-project",
	"replace":
	{
		"height": 68.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"lib/deep",
				"lib/deep.js"
			],
			[
				"clang-as",
				"clang-ast.js"
			],
			[
				"ast-shel",
				"ast-shell.js"
			],
			[
				"os-help",
				"os-helpers.js"
			],
			[
				"clang-ast",
				"clang-ast.js"
			],
			[
				"util.js",
				"quickjs/qjs-modules/lib/util.js"
			],
			[
				"",
				"clang-list.js"
			],
			[
				"ast-she",
				"ast-shell.js"
			],
			[
				"clang-",
				"clang-list.js"
			],
			[
				"sound",
				"soundcloud-tracks.js"
			],
			[
				"out",
				"out.gz"
			],
			[
				"lws-context-v",
				"libwebsockets/include/libwebsockets/lws-context-vhost.h"
			],
			[
				"buffer-ut",
				"src/buffer-utils.c"
			],
			[
				"repl",
				"lib/repl.js"
			],
			[
				"utils.c",
				"src/utils.c"
			],
			[
				"console.js",
				"lib/console.js"
			],
			[
				"qjsm.c",
				"src/qjsm.c"
			],
			[
				"utils.h",
				"include/utils.h"
			],
			[
				"quickjs-inspec",
				"quickjs-inspect.c"
			],
			[
				"io.js",
				"lib/io.js"
			],
			[
				"repl.js",
				"lib/repl.js"
			],
			[
				"util.sj",
				"web-platform-tests-streams/shared-storage/resources/util.sub.js"
			],
			[
				"quickjs.c",
				"~/Projects/plot-cv/quickjs/quickjs.c"
			],
			[
				"quickjs.h",
				"~/Projects/plot-cv/quickjs/quickjs.h"
			],
			[
				"js-utils.c",
				"src/js-utils.c"
			],
			[
				"quickjs-strea",
				"quickjs-stream.h"
			],
			[
				"quickjs-st",
				"quickjs-stream.c"
			],
			[
				"quickjs-stream.h",
				"quickjs-stream.h"
			],
			[
				"quickjs-ins",
				"quickjs-inspect.c"
			],
			[
				"fs.js",
				"lib/fs.js"
			],
			[
				"ringbuffer.c",
				"src/ringbuffer.c"
			],
			[
				"ringbuf",
				"include/ringbuffer.h"
			],
			[
				"ringbuffer.h",
				"include/ringbuffer.h"
			],
			[
				"textcode.c",
				"quickjs-textcode.c"
			],
			[
				"quickjs-text",
				"quickjs-textcode.c"
			],
			[
				"stream.c",
				"quickjs-stream.c"
			],
			[
				"quickjs-stre",
				"quickjs-stream.c"
			],
			[
				"textcode",
				"quickjs-textcode.c"
			],
			[
				"quickjs-misc",
				"quickjs-misc.c"
			],
			[
				"function",
				"cmake/functions.cmake"
			],
			[
				"CMakeLIsts",
				"CMakeLists.txt"
			],
			[
				"quickjs-mis",
				"quickjs-misc.c"
			],
			[
				"fsProm",
				"lib/fsPromises.js"
			],
			[
				"CMake",
				"CMakeLists.txt"
			],
			[
				"cmakeli",
				"CMakeLists.txt"
			],
			[
				"cmakelists",
				"CMakeLists.txt"
			],
			[
				"CMakeLists",
				"CMakeLists.txt"
			],
			[
				"cmakelsits",
				"web-platform-tests-streams/editing/crashtests/make-editable-div-inline-and-set-contenteditable-of-input-to-false.html"
			],
			[
				"cmakeLists",
				"CMakeLists.txt"
			],
			[
				"js-util",
				"src/js-utils.c"
			],
			[
				"js-ut",
				"include/js-utils.h"
			],
			[
				"buffer-",
				"include/buffer-utils.h"
			],
			[
				"js-utils",
				"include/js-utils.h"
			],
			[
				"quickjs-sys",
				"quickjs-syscallerror.c"
			],
			[
				"js-u",
				"include/js-utils.h"
			],
			[
				"quickjs-socket",
				"quickjs-sockets.c"
			],
			[
				"async-cl",
				"src/async-closure.c"
			],
			[
				"utilsc",
				"src/utils.c"
			],
			[
				"quickjs-sock",
				"quickjs-sockets.h"
			],
			[
				"child",
				"src/child-process.c"
			],
			[
				"quickjs-child",
				"quickjs-child-process.c"
			],
			[
				"cmake",
				"CMakeLists.txt"
			],
			[
				"process.js",
				"lib/process.js"
			],
			[
				"quickjs-repea",
				"quickjs-repeater.c"
			],
			[
				"quickjs-repe",
				"quickjs-repeater.c"
			],
			[
				"quickjs-repeater",
				"quickjs-repeater.c"
			],
			[
				"test_repe",
				"tests/test_repeater.js"
			],
			[
				"quickjs-mysq",
				"quickjs-mysql.c"
			],
			[
				"quickjs-ser",
				"quickjs-serial.c"
			],
			[
				"quickjs-stream",
				"quickjs-stream.h"
			],
			[
				"quickjs-lex",
				"quickjs-lexer.c"
			],
			[
				"quickjs-list",
				"quickjs-list.c"
			],
			[
				"quickjs-list.c",
				"quickjs-list.c"
			],
			[
				"testhar",
				"lib/testharness.js"
			],
			[
				"qjsm",
				"src/qjsm.c"
			],
			[
				"test_repea",
				"tests/test_repeater.js"
			],
			[
				"test_socket",
				"tests/test_sockets.js"
			],
			[
				"test_sock",
				"tests/test_sockets.js"
			],
			[
				"textcod",
				"quickjs-textcode.c"
			],
			[
				"test_text",
				"tests/test_textcode.js"
			],
			[
				"stack.js",
				"lib/stack.js"
			],
			[
				"ebnf",
				"lib/parser/ebnf.js"
			],
			[
				"arser.",
				"lib/parser.js"
			],
			[
				"bnf.",
				"lib/lexer/bnf.js"
			],
			[
				"quickjs-my",
				"quickjs-mysql.c"
			],
			[
				"quickjs-blob",
				"quickjs-blob.c"
			],
			[
				"quickjs-bl",
				"quickjs-blob.c"
			],
			[
				"queue.c",
				"src/queue.c"
			],
			[
				"queue.h",
				"include/queue.h"
			],
			[
				"mysql",
				"tests/test_mysql.js"
			],
			[
				"child-",
				"src/child-process.c"
			],
			[
				"quickjs-chil",
				"quickjs-child-process.c"
			],
			[
				"xpath",
				"lib/xpath.js"
			],
			[
				"xpath.js",
				"lib/xpath.js"
			],
			[
				"pointer",
				"lib/pointer.js"
			],
			[
				"predicate.c",
				"src/predicate.c"
			],
			[
				"quickjs-pre",
				"quickjs-predicate.c"
			],
			[
				"dom.js",
				"lib/dom.js"
			],
			[
				"misc.js",
				"lib/misc.js"
			],
			[
				"char-ut",
				"include/char-utils.h"
			],
			[
				"quickjs-in",
				"quickjs-inspect.c"
			],
			[
				"css3",
				"lib/css3-selectors.js"
			],
			[
				"inspect.c",
				"quickjs-inspect.c"
			],
			[
				"quickjs-lexe",
				"quickjs-lexer.c"
			],
			[
				"test_lexer",
				"tests/test_lexer.js"
			],
			[
				"resolve-im",
				"resolve-imports.js"
			],
			[
				"pointer.js",
				"lib/pointer.js"
			],
			[
				"extendArra",
				"lib/extendArray.js"
			],
			[
				"list-ex",
				"list-exports.js"
			],
			[
				"xml-shell",
				"xml-shell.js"
			],
			[
				"cmake/",
				"cmake/QuickJSModule.cmake"
			],
			[
				"quickjs-arc",
				"quickjs-archive.c"
			],
			[
				"cmakelist",
				"CMakeLists.txt"
			],
			[
				"vfs",
				"lib/vfs.js"
			],
			[
				"quickjs-que",
				"quickjs-queue.c"
			],
			[
				"archive.h",
				"libarchive/libarchive/archive.h"
			],
			[
				"sz",
				"/tmp/sz.js"
			],
			[
				"archive_en",
				"libarchive/libarchive/archive_entry.h"
			],
			[
				"quickjs-ar",
				"quickjs-archive.c"
			],
			[
				"archive_write_open_fil",
				"libarchive/libarchive/archive_write_open_filename.c"
			],
			[
				"vfs.j",
				"lib/vfs.js"
			],
			[
				"cutils",
				"~/Projects/plot-cv/quickjs/cutils.c"
			],
			[
				"quickjs-pat",
				"quickjs-path.c"
			],
			[
				"extendArray",
				"lib/extendArray.js"
			],
			[
				"quickjs-path",
				"quickjs-path.c"
			],
			[
				"console",
				"lib/console.js"
			],
			[
				"quickjs-ch",
				"quickjs-child-process.c"
			],
			[
				"token",
				"src/token.c"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/plot-cv.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 309.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"WS"
			]
		],
		"width": 1059.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 253.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
