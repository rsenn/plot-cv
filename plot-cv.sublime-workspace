{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"getOwn",
				"getOwnPropertyNames(...)"
			],
			[
				"skel",
				"skeletonization"
			],
			[
				"Debugger",
				"DebuggerDispatcher"
			],
			[
				"JSInput",
				"JSInputOutputArray"
			],
			[
				"B",
				"BOOL"
			],
			[
				"JS_Set",
				"JS_SetPropertyUint32"
			],
			[
				"Asyn",
				"AsyncIterator"
			],
			[
				"ret",
				"return_flag"
			],
			[
				"ImportID",
				"ImportIdMap"
			],
			[
				"Num",
				"NumericRange"
			],
			[
				"define",
				"defineProperty(...)"
			],
			[
				"dbuf_",
				"dbuf_init2"
			],
			[
				"has_",
				"has_dot_or_slash"
			],
			[
				"My",
				"MySQLResult"
			],
			[
				"JS_ToCS",
				"JS_ToCStringLen"
			],
			[
				"CF",
				"CFunctionClosureRecord"
			],
			[
				"js_",
				"js_mysqlresult_class_id"
			],
			[
				"extendA",
				"extendAsyncGenerator"
			],
			[
				"JS_SetPr",
				"JS_SetPropertyStr"
			],
			[
				"MYSQL_TYPE_NEW",
				"MYSQL_TYPE_NEWDECIMAL"
			],
			[
				"JS_CF",
				"JS_CFUNC_MAGIC_DEF"
			],
			[
				"js_mysqlresult_fun",
				"js_mysqlresult_functions"
			],
			[
				"JS_ToCSt",
				"JS_ToCStringLen"
			],
			[
				"js_mysql_f",
				"js_mysql_functions"
			],
			[
				"MARIA",
				"MARIADBCLIENT_LIBRARY"
			],
			[
				"depe",
				"dependencyMap"
			],
			[
				"depden",
				"dependencyTree"
			],
			[
				"add_",
				"add_dependencies"
			],
			[
				"ch",
				"chunks_written"
			],
			[
				"defineP",
				"defineProperties(...)"
			],
			[
				"CMAKE_CURR",
				"CMAKE_CURRENT_BINARY_DIR"
			],
			[
				"gener",
				"generate_module_header"
			],
			[
				"RINGBUFFER_C",
				"RINGBUFFER_CONSUMERANGE"
			],
			[
				"RINGBUFFER_CONSU",
				"RINGBUFFER_CONSUMERANGE"
			],
			[
				"JS_NewArra",
				"JS_NewArrayBufferCopy"
			],
			[
				"RINGBU",
				"RINGBUFFER_INSERT"
			],
			[
				"hea",
				"headers_sent"
			],
			[
				"PR",
				"PRIi64"
			],
			[
				"db",
				"dbuf_init2"
			],
			[
				"JS_Get",
				"JS_GetProperty"
			],
			[
				"Ret",
				"ReturnValuePathFunction"
			],
			[
				"cFunc",
				"cFuncListObjects"
			],
			[
				"isC",
				"isCFuncCall"
			],
			[
				"En",
				"EntityNames"
			],
			[
				"parseFrom",
				"parseFromString"
			],
			[
				"pseu",
				"pseudoClassArg"
			],
			[
				"pseudoC",
				"pseudoClassName"
			],
			[
				"Key",
				"KeyboardEvent"
			],
			[
				"getOp",
				"getOptionEntries"
			],
			[
				"setProp",
				"setPropertyValue"
			],
			[
				"parse",
				"parseSelectors"
			],
			[
				"jsm_buil",
				"jsm_builtin_init"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"JS_New",
				"JS_NewObject"
			],
			[
				"ide",
				"importIdentifiers"
			],
			[
				"iden",
				"importIdentifiers"
			],
			[
				"import",
				"importIdentifiers"
			],
			[
				"ident",
				"identifierSets"
			],
			[
				"path_is",
				"path_is_absolute"
			],
			[
				"js_is_",
				"js_is_null_or_undefined"
			],
			[
				"path_skip_se",
				"path_skip_separator_s"
			],
			[
				"WRITABLE_METHO",
				"WRITABLE_METHOD_CLOSE"
			],
			[
				"list_fo",
				"list_for_each_prev"
			],
			[
				"JS_Th",
				"JS_ThrowOutOfMemory"
			],
			[
				"JS_",
				"JS_ThrowOutOfMemory"
			],
			[
				"underly",
				"underlying_source"
			],
			[
				"Tok",
				"TokenSequence"
			],
			[
				"JS_GetPr",
				"JS_GetPropertyStr"
			],
			[
				"JS_Thro",
				"JS_ThrowOutOfMemory"
			],
			[
				"getAt",
				"getAttributeNames"
			],
			[
				"self",
				"self_closing_tags"
			],
			[
				"self_",
				"self_closing_tags"
			],
			[
				"JS_PROP",
				"JS_PROP_ENUMERABLE"
			],
			[
				"de",
				"dependencyMap"
			],
			[
				"dep",
				"dependencyMap"
			],
			[
				"js_is_null",
				"js_is_null_or_undefined"
			],
			[
				"JS_P",
				"JS_PROP_ENUMERABLE"
			],
			[
				"JS_SetP",
				"JS_SetPropertyUint32"
			],
			[
				"spec",
				"specifiers"
			],
			[
				"token_r",
				"token_release_rt"
			],
			[
				"JS_Thr",
				"JS_ThrowTypeError"
			],
			[
				"debug_js_mall",
				"debug_js_malloc_usable_size"
			],
			[
				"repl",
				"replaceRange"
			],
			[
				"js_malloc_u",
				"js_malloc_usable_size_rt"
			],
			[
				"malloc",
				"malloc_usable_size"
			],
			[
				"all",
				"alloc_block_list"
			],
			[
				"alloc",
				"alloc_block_list"
			],
			[
				"path_skip",
				"path_skip_component"
			],
			[
				"jsm_mo",
				"jsm_module_loader"
			],
			[
				"JS_Throw",
				"JS_ThrowInternalError"
			],
			[
				"JS_AtomTo",
				"JS_AtomToValue"
			],
			[
				"inspect",
				"inspectSymbol"
			],
			[
				"at",
				"attributes"
			],
			[
				"parent",
				"parentElement"
			],
			[
				"owner",
				"ownerElement"
			],
			[
				"get",
				"getPrototypeOf"
			],
			[
				"child",
				"childElementCount"
			],
			[
				"getO",
				"getOwnPropertyNames"
			],
			[
				"js_misc_im",
				"js_misc_immutable_constructor"
			],
			[
				"obj",
				"object_tostring"
			],
			[
				"js_misc_immu",
				"js_misc_immutable_free"
			],
			[
				"js_misc_imm",
				"js_misc_immutable_constructor"
			],
			[
				"CMAKE_IMPORT",
				"CMAKE_IMPORT_LIBRARY_SUFFIX"
			],
			[
				"CMAKE_CUR",
				"CMAKE_CURRENT_BINARY_DIR"
			],
			[
				"js_is",
				"js_is_null_or_undefined"
			],
			[
				"js_asy",
				"js_async_socket_class_id"
			],
			[
				"JS_NewObj",
				"JS_NewObjectProtoClass"
			],
			[
				"async_",
				"async_socket_proto"
			],
			[
				"js_socket_class",
				"js_socket_class_id"
			],
			[
				"g",
				"getOwnPropertyNames(...)"
			],
			[
				"js_sockaddr_cl",
				"js_sockaddr_class_id"
			],
			[
				"js_so",
				"js_sockaddr_constructor"
			],
			[
				"js_sys",
				"js_syscallerror_class_id"
			],
			[
				"js_string",
				"js_stringdecoder_class_id"
			],
			[
				"js_pred",
				"js_predicate_class_id"
			],
			[
				"js_syn",
				"js_syntaxerror_class"
			],
			[
				"js_child",
				"js_child_process_class_id"
			],
			[
				"js_b",
				"js_blob_class_id"
			],
			[
				"js_loca",
				"js_location_class_id"
			],
			[
				"js_token_in",
				"js_token_inspect_funcs"
			],
			[
				"set",
				"setReadHandler"
			],
			[
				"js_get_",
				"js_get_propertystr_bool"
			],
			[
				"js_misc_ate",
				"js_misc_atexit_functions"
			],
			[
				"isF",
				"isFunction"
			],
			[
				"tab",
				"tab_atom_len"
			],
			[
				"isARr",
				"isArrayBuffer"
			],
			[
				"BIT",
				"BITFIELD_FROMARRAY"
			],
			[
				"to",
				"toStringTag"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "SetFenceColor(color)\nFlyTo(location, done = () => {})\n  callback(complete)\nGet(feature)\nCreateMap()\n  a =>\nfunction(e)\n([name, geometry]) =>\n  get()\n  set(value)\nfunction(evt)\n  response =>\n  u =>\n  u =>",
			"settings":
			{
				"buffer_size": 203,
				"line_ending": "Unix",
				"name": "ùåÜ Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					2,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/debugger-server.js",
						"symkeys":
						[
							[
								1513,
								1550
							],
							[
								1626,
								1631
							],
							[
								1754,
								1771
							],
							[
								2167,
								2205
							],
							[
								2437,
								2458
							],
							[
								2658,
								2688
							],
							[
								4247,
								4251
							],
							[
								4270,
								4298
							],
							[
								4310,
								4324
							],
							[
								4647,
								4661
							],
							[
								5143,
								5147
							],
							[
								5207,
								5211
							],
							[
								5439,
								5446
							],
							[
								5488,
								5505
							],
							[
								5745,
								5792
							],
							[
								6279,
								6342
							],
							[
								6852,
								6875
							],
							[
								7815,
								7834
							],
							[
								8000,
								8047
							],
							[
								8094,
								8105
							],
							[
								8697,
								8715
							],
							[
								8816,
								8833
							],
							[
								9007,
								9011
							],
							[
								9086,
								9123
							],
							[
								9282,
								9286
							],
							[
								9626,
								9658
							],
							[
								9827,
								9851
							],
							[
								9865,
								9891
							],
							[
								10198,
								10202
							],
							[
								10322,
								10345
							],
							[
								10401,
								10419
							],
							[
								10596,
								10611
							],
							[
								11054,
								11069
							],
							[
								11453,
								11482
							],
							[
								11572,
								11585
							],
							[
								12304,
								12314
							],
							[
								12457,
								12475
							],
							[
								12956,
								12974
							],
							[
								12975,
								12982
							],
							[
								13015,
								13070
							],
							[
								13370,
								13381
							],
							[
								13515,
								13544
							],
							[
								13762,
								13788
							],
							[
								13799,
								13813
							],
							[
								14033,
								14048
							],
							[
								14078,
								14097
							],
							[
								14126,
								14148
							],
							[
								14462,
								14472
							],
							[
								14680,
								14694
							],
							[
								14748,
								14762
							],
							[
								15780,
								15823
							],
							[
								16009,
								16015
							],
							[
								16028,
								16044
							],
							[
								17618,
								17654
							],
							[
								17842,
								17877
							],
							[
								18017,
								18021
							],
							[
								18148,
								18166
							],
							[
								18320,
								18352
							],
							[
								18701,
								18712
							],
							[
								18867,
								18878
							],
							[
								18938,
								18958
							],
							[
								19547,
								19582
							],
							[
								19985,
								20004
							],
							[
								20105,
								20147
							],
							[
								20976,
								20999
							],
							[
								21037,
								21044
							],
							[
								22069,
								22074
							],
							[
								23265,
								23280
							],
							[
								23606,
								23612
							],
							[
								26778,
								26794
							],
							[
								27121,
								27127
							],
							[
								27532,
								27557
							],
							[
								27904,
								27921
							],
							[
								27973,
								27987
							],
							[
								28333,
								28343
							],
							[
								28467,
								28484
							],
							[
								28516,
								28531
							],
							[
								28574,
								28588
							],
							[
								28592,
								28607
							],
							[
								28750,
								28754
							],
							[
								28831,
								28838
							],
							[
								29264,
								29273
							],
							[
								29389,
								29395
							],
							[
								29453,
								29466
							],
							[
								29681,
								29698
							],
							[
								29851,
								29893
							],
							[
								30258,
								30289
							],
							[
								30371,
								30387
							],
							[
								30712,
								30732
							]
						],
						"symlist":
						[
							"scriptName = (arg = scriptArgs[0]) =>",
							"() =>",
							"signalName = n =>",
							"function checkChildExited(pid, status)",
							"function GetLoc(node)",
							"async function LoadAST(source)",
							"a =>",
							"function StartREPL(prefix = ",
							", suffix = '')",
							".show = arg =>",
							"k =>",
							"k =>",
							"item =>",
							"(acc, keys, i) =>",
							" function StartDebugger(args, connect, address)",
							" function ConnectDebugger(address, skipToMain = true, callback)",
							"async process(callback)",
							"sendMessage: msg =>",
							"function LaunchDebugger(dbg, skipToMain = true)",
							"async () =>",
							"DebuggerDispatcher",
							"async value(name)",
							"v =>",
							"async function PrintStackFrame(frame)",
							"f =>",
							"async function PrintStack(stack)",
							" (member, obj, prop) =>",
							"async breakpoints(...args)",
							"b =>",
							"async stackTrace(frame)",
							" frame =>",
							"async scopes(n)",
							"async waitRun()",
							"async variables(n, depth = 0)",
							"add = item =>",
							"toString()",
							"DebuggerDispatcher",
							" (port = 8777) =>",
							" () =>",
							"function NewDebugger(args, skipToMain = false, address)",
							"kill: () =>",
							"async function OnStopped(msg)",
							"function URLWorker(script)",
							"dataURL = s =>",
							"(push, stop) =>",
							"postMessage: msg =>",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (v, pv, o) =>",
							" function createWS(url, callbacks, listen)",
							" () =>",
							" (level, str) =>",
							" function* config(req, res)",
							" function* files(req, res)",
							"f =>",
							"onConnect(ws, req)",
							"value: function sendMessage(msg)",
							"onClose(ws)",
							"onError(ws)",
							"onRequest(req, resp)",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							" function handleCommand(ws, data)",
							"forward = (fd, name) =>",
							" buf =>",
							"() =>",
							" (dbg, sock) =>",
							"msg =>",
							"onFd(fd, rd, wr)",
							" () =>",
							" function showSessions()",
							"get connections()",
							"get socklist()",
							"get file()",
							"(file, source) =>",
							" () =>",
							" s =>",
							" () =>",
							"m =>",
							"line(i)",
							"match(re)",
							"fns =>",
							"({ name }) =>",
							"async functions()",
							"([name, loc, params, expression, path]) =>",
							"async repeat(cond, fn, ...args)",
							"cond = (r, i) =>",
							" function quit(why)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABEBwAAICB2YWx1ZSA9PgoobGV2ZWwsIG1lc3NhZ2UpID0+CkFzeW5jQ29sbGVjdChpdGVyKQpHZXRNaW1lKGZpbGUpCk1hdGNoZXIocGF0dGVybiwgdCA9IGFyZyA9PiBhcmcpCiguLi5hcmdzKSA9PgpLZXlPclZhbHVlTWF0Y2hlcihwYXR0ZXJuKQooW2tleSwgdmFsdWVdKSA9PgpHZXRSb290RGlyZWN0b3JpZXMocGF0dGVybiA9ICcqJykKTWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+CiAgbiA9PgogIGRkID0+CiAgZCA9PgogIGQgPT4KICBkID0+CkdldERpcihkaXIpCiAgbiA9PgpEaXJOYW1lKG5hbWUpCiAgaXQgPT4KRGF0ZVN0cihkYXRlKQpNb2RlU3RyKG1vZGUpCkhUTUxQYWdlID0gKHsgdGl0bGUsIHN0eWxlLCBzY3JpcHRzID0gW10sIGNoaWxkcmVuLCAuLi5wcm9wcyB9KSA9PgogIHNjcmlwdCA9PgpGaWx0ZXJGb3JtID0gKHsgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlID0gKHsgcm93cywgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlUm93ID0gKHsgY29sdW1ucywgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlQ29sdW1uID0gKHsgY29sdW1ucywgY2hpbGRyZW4sIHRhZyA9ICd0ZCcsIC4uLnByb3BzIH0pID0+CkZpbGVMaW5rID0gKHsgZmlsZSwgLi4ucHJvcHMgfSkgPT4KRmlsZU9iamVjdCA9ICh7IGZpbGUsIHN0YXQgPSB7fSwgLi4ucHJvcHMgfSkgPT4KRmlsZVRhYmxlID0gKHsgZmlsZXMsIC4uLnByb3BzIH0pID0+CihhLCBiKSA9PgogIGZpZWxkID0+CiAgZmlsZSA9PgpSZWFkRXhpdjIoZmlsZSkKKFtrLCB2XSkgPT4KKFtrLCB2XSkgPT4KKFtrLCB2XSkgPT4KKGEsIGIpID0+Cihbaywgdl0pID0+ClJlYWRFeGlmdG9vbChmaWxlKQogIGwgPT4KICBsaW5lID0+CihbbGluZSwgaWR4XSkgPT4KSGVpZkNvbnZlcnQoc3JjLCBkc3QsIHF1YWxpdHkgPSAxMDApCk1hZ2lja1Jlc2l6ZShzcmMsIGRzdCwgcm90YXRlID0gMCwgd2lkdGgsIGhlaWdodCkKICBtYWluKC4uLmFyZ3MpCihhLCB2KSA9PgoodiwgcHYsIG8pID0+Cihtb2R1bGUsIC4uLmFyZ3MpID0+CiAgbSA9PgogIC5zaG93ID0gYXJnID0+CiAgLmNsZWFudXAgPSAoKSA9PgooLi4uYXJncykgPT4KKCkgPT4KICBwdXRzKHMpCigpID0+ClBhcnNlQm9keShnZW4pCiAgLmNyZWF0ZVdTID0gKHVybCwgY2FsbGJhY2tzKSA9PgogIC5vdXQgPSBzID0+CiAgdGVzdChyZXEsIHJlc3ApCiAgcHJveHkocmVxLCByZXNwKQogIGNvbmZpZyhyZXEsIHJlc3ApCiAgZmlsZShyZXEsIHJlc3ApCihbZGlyXSkgPT4KICBmID0+CiAgZmlsZSA9PgogIHVwbG9hZHMocmVxLCByZXNwKQogIHMgPT4KICBmaWxlcyhyZXEsIHJlc3ApCiAgbiA9PgogIGZpbGVzMihyZXEsIHJlc3ApCm4gPT4KICBuID0+CiAgbiA9PgooYSwgYikgPT4KICBuYW1lID0+CiAgZmlsZSA9PgogIGZpbGUgPT4KKFtmaWxlLCByZWxdKSA9PgooYWNjLCBbZmlsZSwgc3RdKSA9PgogIHN0cmluZyhhLCBiKQogIG51bWJlcihhLCBiKQooW25hbWUsIG9ial0pID0+Cih7IG5hbWUgfSkgPT4KICBvbkNvbm5lY3Qod3MsIHJlcSkKICAuc2VuZENvbW1hbmQgPSBmdW5jdGlvbihkYXRhKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvblJlcXVlc3QocmVxLCByZXNwKQogIG9uT3BlbihuYW1lLCBmaWxlbmFtZSkKICBvbkNvbnRlbnQobmFtZSwgZGF0YSkKICBvbkNsb3NlKG5hbWUsIGZpbGUpCiAgZiA9IHggPT4KICBvbkZpbmFsaXplKCkKKG1hdGNoLCBwMSwgcDAsIHAyLCBwMywgb2Zmc2V0KSA9PgogIG9uTWVzc2FnZSh3cywgZGF0YSkKICBnZXQgY29ubmVjdGlvbnMoKQogIGdldCBieV91dWlkKCkKICB1dWlkKGRhdGEpCiAgb25GZChmZCwgcmQsIHdyKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgcXVpdCh3aHkpAAAAAAAAAAANBgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					3,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/project.js",
						"symkeys":
						[
							[
								332,
								344
							],
							[
								349,
								370
							],
							[
								585,
								603
							],
							[
								1293,
								1319
							],
							[
								1467,
								1481
							],
							[
								1621,
								1632
							],
							[
								1876,
								1880
							],
							[
								1982,
								1993
							],
							[
								2198,
								2208
							],
							[
								2286,
								2304
							],
							[
								2629,
								2639
							],
							[
								3239,
								3268
							],
							[
								3726,
								3744
							],
							[
								3907,
								3921
							],
							[
								4080,
								4096
							],
							[
								4151,
								4166
							],
							[
								4198,
								4205
							],
							[
								4235,
								4246
							],
							[
								4278,
								4285
							],
							[
								4315,
								4330
							],
							[
								4361,
								4367
							],
							[
								4394,
								4404
							],
							[
								4468,
								4482
							],
							[
								4553,
								4571
							],
							[
								4787,
								4813
							],
							[
								4884,
								4905
							],
							[
								5110,
								5134
							],
							[
								5174,
								5181
							],
							[
								5211,
								5227
							],
							[
								5322,
								5328
							],
							[
								5428,
								5445
							],
							[
								5490,
								5501
							],
							[
								5535,
								5549
							],
							[
								5615,
								5626
							],
							[
								5656,
								5670
							],
							[
								5763,
								5805
							],
							[
								5991,
								6010
							],
							[
								6289,
								6306
							],
							[
								6906,
								6914
							],
							[
								7459,
								7495
							],
							[
								7521,
								7541
							],
							[
								7579,
								7585
							],
							[
								7707,
								7716
							],
							[
								7789,
								7801
							]
						],
						"symlist":
						[
							"EagleProject",
							"constructor(file, fs)",
							"loadFile = file =>",
							"load(name = this.basename)",
							"lazyOpen(file)",
							" () =>",
							"l =>",
							"close(file)",
							"closeAll()",
							"addLibraries(libs)",
							"open(file)",
							"static determineEaglePath(fs)",
							"findDocument(pred)",
							"pred = name =>",
							"getLibrary(name)",
							"get schematic()",
							"name =>",
							"get board()",
							"name =>",
							"get libraries()",
							"doc =>",
							"get root()",
							"get children()",
							"t = ([v, l, d]) =>",
							"static documentLocation(d)",
							"static documentKey(d)",
							"getDocumentDirectories()",
							"file =>",
							"getLibraryPath()",
							"dir =>",
							"getLibraryNames()",
							" () =>",
							" names =>",
							" () =>",
							" names =>",
							"findLibrary(name, dirs = this.libraryPath)",
							"updateLibrary(name)",
							"libProps = lib =>",
							"index(l)",
							"saveTo(dir = '.', overwrite = false)",
							"(resolve, reject) =>",
							"doc =>",
							"result =>",
							"EagleProject"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAANBgAAICBzY3JpcHROYW1lID0gKGFyZyA9IHNjcmlwdEFyZ3NbMF0pID0+CigpID0+CiAgc2lnbmFsTmFtZSA9IG4gPT4KICBjaGVja0NoaWxkRXhpdGVkKHBpZCwgc3RhdHVzKQpHZXRMb2Mobm9kZSkKTG9hZEFTVChzb3VyY2UpCiAgYSA9PgpTdGFydFJFUEwocHJlZml4ID0gCiwgc3VmZml4ID0gJycpCiAgLnNob3cgPSBhcmcgPT4KICBrID0+CiAgayA9PgogIGl0ZW0gPT4KKGFjYywga2V5cywgaSkgPT4KU3RhcnREZWJ1Z2dlcihhcmdzLCBjb25uZWN0LCBhZGRyZXNzKQpDb25uZWN0RGVidWdnZXIoYWRkcmVzcywgc2tpcFRvTWFpbiA9IHRydWUsIGNhbGxiYWNrKQogIHByb2Nlc3MoY2FsbGJhY2spCiAgc2VuZE1lc3NhZ2U6IG1zZyA9PgpMYXVuY2hEZWJ1Z2dlcihkYmcsIHNraXBUb01haW4gPSB0cnVlKQooKSA9PgpEZWJ1Z2dlckRpc3BhdGNoZXIKICB2YWx1ZShuYW1lKQogIHYgPT4KUHJpbnRTdGFja0ZyYW1lKGZyYW1lKQogIGYgPT4KUHJpbnRTdGFjayhzdGFjaykKKG1lbWJlciwgb2JqLCBwcm9wKSA9PgogIGJyZWFrcG9pbnRzKC4uLmFyZ3MpCiAgYiA9PgogIHN0YWNrVHJhY2UoZnJhbWUpCmZyYW1lID0+CiAgc2NvcGVzKG4pCiAgd2FpdFJ1bigpCiAgdmFyaWFibGVzKG4sIGRlcHRoID0gMCkKICBhZGQgPSBpdGVtID0+CiAgdG9TdHJpbmcoKQpEZWJ1Z2dlckRpc3BhdGNoZXIKKHBvcnQgPSA4Nzc3KSA9PgooKSA9PgpOZXdEZWJ1Z2dlcihhcmdzLCBza2lwVG9NYWluID0gZmFsc2UsIGFkZHJlc3MpCiAga2lsbDogKCkgPT4KT25TdG9wcGVkKG1zZykKVVJMV29ya2VyKHNjcmlwdCkKICBkYXRhVVJMID0gcyA9PgoocHVzaCwgc3RvcCkgPT4KICBwb3N0TWVzc2FnZTogbXNnID0+CiAgbWFpbiguLi5hcmdzKQooYSwgdikgPT4KKHYsIHB2LCBvKSA9PgoodiwgcHYsIG8pID0+CiAgY3JlYXRlV1ModXJsLCBjYWxsYmFja3MsIGxpc3RlbikKKCkgPT4KKGxldmVsLCBzdHIpID0+CiAgY29uZmlnKHJlcSwgcmVzKQogIGZpbGVzKHJlcSwgcmVzKQogIGYgPT4KICBvbkNvbm5lY3Qod3MsIHJlcSkKICB2YWx1ZTogZnVuY3Rpb24gc2VuZE1lc3NhZ2UobXNnKQogIG9uQ2xvc2Uod3MpCiAgb25FcnJvcih3cykKICBvblJlcXVlc3QocmVxLCByZXNwKQoobWF0Y2gsIHAxLCBwMCwgcDIsIHAzLCBvZmZzZXQpID0+CiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIGhhbmRsZUNvbW1hbmQod3MsIGRhdGEpCiAgZm9yd2FyZCA9IChmZCwgbmFtZSkgPT4KYnVmID0+CigpID0+CihkYmcsIHNvY2spID0+CiAgbXNnID0+CiAgb25GZChmZCwgcmQsIHdyKQooKSA9PgogIHNob3dTZXNzaW9ucygpCiAgZ2V0IGNvbm5lY3Rpb25zKCkKICBnZXQgc29ja2xpc3QoKQogIGdldCBmaWxlKCkKKGZpbGUsIHNvdXJjZSkgPT4KKCkgPT4KcyA9PgooKSA9PgogIG0gPT4KICBsaW5lKGkpCiAgbWF0Y2gocmUpCiAgZm5zID0+Cih7IG5hbWUgfSkgPT4KICBmdW5jdGlvbnMoKQooW25hbWUsIGxvYywgcGFyYW1zLCBleHByZXNzaW9uLCBwYXRoXSkgPT4KICByZXBlYXQoY29uZCwgZm4sIC4uLmFyZ3MpCiAgY29uZCA9IChyLCBpKSA9PgogIHF1aXQod2h5KQAAAAAAAAAA9AIAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					4,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/misc.js",
						"symkeys":
						[
							[
								106,
								126
							],
							[
								346,
								362
							],
							[
								416,
								435
							],
							[
								470,
								486
							],
							[
								546,
								562
							],
							[
								583,
								587
							],
							[
								625,
								659
							],
							[
								682,
								714
							],
							[
								737,
								780
							],
							[
								2609,
								2628
							],
							[
								2726,
								2742
							],
							[
								2804,
								2822
							],
							[
								2886,
								2905
							],
							[
								2970,
								2979
							],
							[
								3034,
								3051
							],
							[
								3114,
								3131
							],
							[
								3194,
								3208
							],
							[
								3268,
								3283
							],
							[
								3344,
								3359
							],
							[
								3420,
								3428
							],
							[
								3482,
								3494
							],
							[
								3552,
								3562
							],
							[
								3618,
								3629
							],
							[
								3686,
								3694
							],
							[
								3748,
								3770
							],
							[
								3838,
								3853
							],
							[
								3914,
								3936
							],
							[
								4004,
								4020
							],
							[
								4082,
								4098
							],
							[
								4160,
								4172
							],
							[
								4230,
								4242
							],
							[
								4300,
								4313
							],
							[
								4372,
								4390
							],
							[
								4448,
								4466
							],
							[
								4530,
								4552
							],
							[
								4620,
								4647
							],
							[
								4720,
								4737
							],
							[
								4794,
								4811
							],
							[
								4868,
								4885
							],
							[
								4932,
								4948
							],
							[
								5031,
								5047
							],
							[
								5119,
								5135
							],
							[
								5207,
								5224
							],
							[
								5281,
								5301
							],
							[
								5360,
								5380
							],
							[
								5460,
								5479
							],
							[
								5555,
								5562
							],
							[
								5590,
								5610
							],
							[
								5680,
								5695
							],
							[
								5756,
								5782
							],
							[
								5853,
								5869
							],
							[
								5925,
								5938
							],
							[
								6006,
								6024
							],
							[
								6097,
								6110
							],
							[
								6166,
								6180
							],
							[
								6282,
								6305
							],
							[
								6366,
								6387
							],
							[
								8271,
								8310
							],
							[
								8732,
								8744
							],
							[
								8778,
								8790
							],
							[
								8806,
								8819
							],
							[
								9001,
								9049
							],
							[
								11383,
								11387
							],
							[
								11418,
								11427
							],
							[
								11565,
								11584
							],
							[
								12152,
								12171
							],
							[
								12842,
								12885
							],
							[
								13338,
								13371
							],
							[
								13649,
								13678
							],
							[
								13725,
								13746
							],
							[
								13775,
								13791
							],
							[
								13884,
								13914
							],
							[
								13938,
								13954
							],
							[
								13955,
								13978
							],
							[
								14075,
								14110
							],
							[
								14134,
								14150
							],
							[
								14151,
								14174
							],
							[
								14271,
								14304
							],
							[
								14354,
								14377
							],
							[
								14471,
								14504
							],
							[
								14758,
								14779
							],
							[
								14857,
								14863
							],
							[
								14880,
								14896
							],
							[
								15048,
								15060
							],
							[
								15073,
								15084
							],
							[
								15097,
								15118
							],
							[
								15154,
								15165
							],
							[
								15411,
								15417
							],
							[
								15430,
								15446
							],
							[
								15619,
								15624
							],
							[
								15638,
								15647
							],
							[
								15710,
								15716
							],
							[
								15764,
								15770
							],
							[
								15788,
								15801
							],
							[
								15857,
								15862
							],
							[
								15896,
								15902
							],
							[
								15933,
								15955
							],
							[
								16034,
								16040
							],
							[
								16056,
								16072
							],
							[
								16106,
								16112
							],
							[
								16139,
								16160
							],
							[
								16266,
								16278
							],
							[
								16379,
								16406
							],
							[
								16451,
								16457
							],
							[
								16502,
								16514
							],
							[
								16544,
								16577
							],
							[
								16710,
								16716
							],
							[
								16827,
								16839
							],
							[
								16893,
								16905
							],
							[
								17053,
								17064
							],
							[
								17106,
								17139
							],
							[
								17272,
								17281
							],
							[
								17399,
								17420
							],
							[
								17481,
								17502
							],
							[
								17660,
								17674
							],
							[
								17723,
								17762
							],
							[
								17839,
								17856
							],
							[
								17979,
								17993
							],
							[
								18155,
								18172
							],
							[
								18313,
								18330
							],
							[
								18361,
								18378
							],
							[
								18478,
								18495
							],
							[
								18787,
								18801
							],
							[
								18847,
								18870
							],
							[
								18931,
								18938
							],
							[
								18956,
								18963
							],
							[
								18988,
								19013
							],
							[
								19077,
								19084
							],
							[
								19105,
								19112
							],
							[
								19142,
								19197
							],
							[
								19302,
								19309
							],
							[
								19463,
								19487
							],
							[
								19537,
								19541
							],
							[
								19581,
								19608
							],
							[
								19838,
								19858
							],
							[
								19888,
								19899
							],
							[
								19998,
								20033
							],
							[
								20073,
								20091
							],
							[
								20329,
								20340
							],
							[
								20591,
								20602
							],
							[
								20705,
								20716
							],
							[
								20867,
								20879
							],
							[
								20989,
								21009
							],
							[
								21107,
								21112
							],
							[
								21180,
								21201
							],
							[
								21225,
								21235
							],
							[
								21271,
								21330
							],
							[
								21397,
								21422
							],
							[
								21802,
								21832
							],
							[
								21888,
								21896
							],
							[
								21974,
								22030
							],
							[
								22191,
								22255
							],
							[
								22403,
								22454
							],
							[
								23125,
								23187
							],
							[
								23369,
								23394
							],
							[
								23491,
								23516
							],
							[
								23629,
								23698
							],
							[
								23787,
								23809
							],
							[
								23843,
								23854
							],
							[
								23877,
								23899
							],
							[
								24141,
								24213
							],
							[
								24316,
								24387
							],
							[
								24483,
								24534
							],
							[
								24706,
								24753
							],
							[
								24820,
								24863
							],
							[
								24993,
								25050
							],
							[
								25144,
								25150
							],
							[
								25164,
								25170
							],
							[
								25474,
								25508
							],
							[
								25823,
								25878
							],
							[
								26154,
								26198
							],
							[
								26365,
								26399
							],
							[
								26465,
								26501
							],
							[
								26576,
								26593
							],
							[
								26914,
								26959
							],
							[
								27093,
								27106
							],
							[
								27204,
								27217
							],
							[
								27291,
								27334
							],
							[
								27335,
								27354
							],
							[
								27369,
								27373
							],
							[
								27514,
								27534
							],
							[
								27580,
								27612
							],
							[
								27640,
								27666
							],
							[
								28008,
								28027
							],
							[
								28238,
								28287
							],
							[
								28356,
								28363
							],
							[
								28452,
								28466
							],
							[
								28551,
								28561
							],
							[
								28667,
								28671
							],
							[
								28702,
								28722
							],
							[
								28778,
								28791
							],
							[
								28851,
								28863
							],
							[
								29003,
								29018
							],
							[
								29429,
								29469
							],
							[
								29618,
								29622
							],
							[
								29655,
								29663
							],
							[
								29692,
								29696
							],
							[
								30033,
								30046
							],
							[
								30099,
								30119
							],
							[
								30332,
								30498
							],
							[
								30507,
								30564
							],
							[
								30571,
								30612
							],
							[
								30861,
								30881
							],
							[
								31083,
								31098
							],
							[
								31384,
								31407
							],
							[
								31612,
								31630
							],
							[
								31843,
								31857
							],
							[
								31918,
								31930
							],
							[
								32028,
								32037
							],
							[
								32313,
								32329
							],
							[
								32764,
								32800
							],
							[
								32895,
								32904
							],
							[
								33080,
								33091
							],
							[
								33102,
								33110
							],
							[
								33159,
								33171
							],
							[
								33416,
								33428
							],
							[
								33609,
								33635
							],
							[
								33654,
								33658
							],
							[
								33745,
								33769
							],
							[
								33847,
								33876
							],
							[
								33930,
								33961
							],
							[
								33968,
								33971
							],
							[
								34015,
								34028
							],
							[
								34128,
								34199
							],
							[
								34225,
								34251
							],
							[
								34396,
								34431
							],
							[
								34621,
								34648
							],
							[
								34758,
								34791
							],
							[
								34948,
								34999
							],
							[
								35369,
								35433
							],
							[
								35493,
								35508
							],
							[
								35574,
								35588
							],
							[
								35626,
								35649
							],
							[
								35841,
								35859
							],
							[
								36050,
								36120
							],
							[
								36269,
								36293
							],
							[
								36312,
								36320
							],
							[
								36356,
								36371
							],
							[
								36497,
								36510
							],
							[
								36665,
								36681
							],
							[
								36876,
								36902
							],
							[
								36917,
								36939
							],
							[
								37155,
								37159
							],
							[
								37345,
								37367
							],
							[
								37389,
								37399
							],
							[
								37417,
								37430
							],
							[
								37528,
								37550
							],
							[
								37572,
								37582
							],
							[
								37600,
								37613
							],
							[
								37719,
								37741
							],
							[
								37767,
								37777
							],
							[
								37795,
								37808
							],
							[
								37844,
								37866
							],
							[
								37887,
								37897
							],
							[
								37915,
								37928
							],
							[
								37948,
								37989
							],
							[
								38278,
								38301
							],
							[
								38382,
								38404
							],
							[
								38478,
								38498
							],
							[
								38625,
								38636
							],
							[
								38669,
								38686
							],
							[
								38850,
								38869
							],
							[
								38904,
								38926
							],
							[
								39058,
								39079
							],
							[
								39217,
								39237
							],
							[
								39304,
								39327
							],
							[
								39403,
								39425
							],
							[
								39534,
								39558
							],
							[
								39615,
								39627
							],
							[
								39798,
								39816
							],
							[
								39873,
								39885
							],
							[
								40037,
								40060
							],
							[
								40192,
								40208
							],
							[
								40255,
								40268
							],
							[
								40305,
								40372
							],
							[
								40408,
								40430
							],
							[
								40459,
								40469
							],
							[
								40485,
								40498
							],
							[
								40549,
								40562
							],
							[
								40629,
								40652
							],
							[
								40771,
								40793
							],
							[
								40881,
								40894
							],
							[
								40947,
								40963
							],
							[
								41001,
								41005
							],
							[
								41115,
								41152
							],
							[
								41163,
								41173
							],
							[
								41182,
								41211
							],
							[
								41428,
								41444
							],
							[
								41466,
								41477
							],
							[
								41532,
								41559
							],
							[
								41606,
								41624
							],
							[
								41698,
								41733
							],
							[
								41866,
								41888
							],
							[
								41939,
								41955
							],
							[
								41970,
								41977
							],
							[
								42005,
								42021
							],
							[
								42062,
								42090
							],
							[
								42309,
								42326
							],
							[
								42327,
								42336
							],
							[
								42388,
								42405
							],
							[
								42406,
								42415
							],
							[
								42475,
								42492
							],
							[
								42493,
								42516
							],
							[
								42572,
								42596
							],
							[
								45255,
								45283
							],
							[
								45714,
								45718
							],
							[
								45846,
								45859
							],
							[
								46175,
								46187
							],
							[
								46450,
								46463
							],
							[
								46568,
								46582
							],
							[
								47475,
								47503
							],
							[
								47619,
								47632
							],
							[
								47788,
								47812
							],
							[
								47905,
								47939
							],
							[
								48060,
								48099
							],
							[
								48146,
								48183
							],
							[
								48230,
								48256
							],
							[
								48446,
								48494
							],
							[
								48542,
								48586
							],
							[
								48767,
								48790
							],
							[
								48934,
								48966
							],
							[
								49279,
								49333
							],
							[
								49691,
								49743
							],
							[
								49842,
								49871
							],
							[
								50191,
								50207
							],
							[
								50374,
								50385
							],
							[
								50586,
								50638
							],
							[
								50816,
								50860
							],
							[
								51176,
								51212
							],
							[
								51369,
								51385
							],
							[
								51404,
								51432
							],
							[
								51558,
								51564
							],
							[
								51668,
								51681
							],
							[
								53320,
								53358
							],
							[
								53458,
								53474
							],
							[
								53547,
								53591
							],
							[
								54012,
								54032
							],
							[
								54232,
								54274
							],
							[
								54469,
								54500
							],
							[
								54550,
								54592
							],
							[
								54712,
								54736
							],
							[
								54994,
								55004
							],
							[
								55057,
								55061
							],
							[
								55100,
								55127
							],
							[
								55174,
								55186
							],
							[
								55256,
								55268
							],
							[
								55331,
								55356
							],
							[
								55401,
								55432
							],
							[
								55443,
								55460
							],
							[
								55601,
								55623
							],
							[
								55743,
								55765
							],
							[
								55885,
								55920
							],
							[
								55968,
								55995
							],
							[
								56086,
								56124
							],
							[
								56333,
								56381
							],
							[
								56973,
								57000
							],
							[
								57203,
								57217
							],
							[
								57266,
								57272
							],
							[
								57313,
								57379
							],
							[
								57381,
								57385
							],
							[
								57543,
								57550
							],
							[
								57642,
								57652
							],
							[
								57763,
								57772
							],
							[
								57878,
								57904
							],
							[
								58037,
								58068
							],
							[
								58251,
								58270
							],
							[
								58321,
								58329
							],
							[
								58358,
								58392
							],
							[
								58536,
								58581
							],
							[
								58657,
								58667
							],
							[
								58718,
								58728
							],
							[
								58754,
								58764
							],
							[
								58792,
								58817
							],
							[
								58948,
								58973
							],
							[
								59071,
								59106
							],
							[
								59159,
								59193
							],
							[
								59275,
								59311
							],
							[
								59436,
								59440
							],
							[
								59471,
								59475
							],
							[
								59518,
								59522
							],
							[
								59550,
								59554
							],
							[
								59583,
								59611
							],
							[
								59741,
								59745
							],
							[
								59802,
								59833
							],
							[
								60172,
								60208
							],
							[
								60457,
								60515
							],
							[
								60781,
								60789
							],
							[
								60888,
								60913
							],
							[
								60998,
								61040
							],
							[
								61174,
								61214
							],
							[
								64171,
								64197
							],
							[
								64431,
								64455
							],
							[
								64648,
								64671
							],
							[
								64772,
								64810
							],
							[
								64992,
								65003
							],
							[
								65038,
								65059
							],
							[
								65128,
								65135
							],
							[
								65180,
								65194
							],
							[
								65227,
								65238
							],
							[
								65360,
								65367
							],
							[
								65450,
								65460
							],
							[
								65562,
								65571
							],
							[
								65668,
								65694
							],
							[
								65818,
								65849
							],
							[
								66145,
								66167
							],
							[
								66432,
								66476
							],
							[
								66567,
								66591
							],
							[
								66622,
								66650
							],
							[
								66716,
								66743
							],
							[
								66835,
								66860
							],
							[
								66948,
								66971
							],
							[
								67057,
								67080
							],
							[
								67128,
								67154
							],
							[
								67208,
								67233
							],
							[
								67286,
								67313
							],
							[
								67380,
								67410
							],
							[
								67445,
								67469
							],
							[
								67561,
								67589
							],
							[
								67617,
								67646
							],
							[
								67741,
								67768
							],
							[
								67817,
								67843
							],
							[
								67871,
								67906
							],
							[
								68077,
								68103
							],
							[
								68150,
								68176
							],
							[
								68204,
								68231
							],
							[
								68258,
								68281
							],
							[
								68318,
								68343
							],
							[
								68390,
								68418
							],
							[
								68468,
								68493
							],
							[
								68540,
								68572
							],
							[
								68600,
								68625
							],
							[
								68713,
								68748
							],
							[
								68776,
								68807
							],
							[
								68835,
								68851
							],
							[
								68897,
								68914
							],
							[
								68953,
								68970
							],
							[
								69006,
								69027
							],
							[
								69038,
								69068
							],
							[
								69383,
								69400
							],
							[
								69429,
								69501
							],
							[
								69630,
								69638
							],
							[
								69684,
								69692
							],
							[
								69721,
								69734
							],
							[
								69845,
								69894
							],
							[
								69996,
								70035
							],
							[
								70060,
								70068
							],
							[
								70100,
								70115
							],
							[
								70208,
								70216
							],
							[
								70270,
								70288
							],
							[
								70508,
								70516
							],
							[
								70554,
								70566
							]
						],
						"symlist":
						[
							"slice = (x, s, e) =>",
							"stringify = v =>",
							"formatNumber = n =>",
							"isNative = fn =>",
							" function util()",
							"util",
							"AsyncFunction = async function x()",
							"GeneratorFunction = function* ()",
							"AsyncGeneratorFunction = async function* ()",
							"isAnyArrayBuffer(v)",
							"isArrayBuffer(v)",
							"isBigInt64Array(v)",
							"isBigUint64Array(v)",
							"isDate(v)",
							"isFloat32Array(v)",
							"isFloat64Array(v)",
							"isInt8Array(v)",
							"isInt16Array(v)",
							"isInt32Array(v)",
							"isMap(v)",
							"isPromise(v)",
							"isProxy(v)",
							"isRegExp(v)",
							"isSet(v)",
							"isSharedArrayBuffer(v)",
							"isUint8Array(v)",
							"isUint8ClampedArray(v)",
							"isUint16Array(v)",
							"isUint32Array(v)",
							"isWeakMap(v)",
							"isWeakSet(v)",
							"isDataView(v)",
							"isBooleanObject(v)",
							"isAsyncFunction(v)",
							"isGeneratorFunction(v)",
							"isAsyncGeneratorFunction(v)",
							"isNumberObject(v)",
							"isBigIntObject(v)",
							"isSymbolObject(v)",
							"isNativeError(v)",
							"isMapIterator(v)",
							"isSetIterator(v)",
							"isStringObject(v)",
							"isArrayBufferView(v)",
							"isArgumentsObject(v)",
							"isBoxedPrimitive(v)",
							"ctor =>",
							"isGeneratorObject(v)",
							"isTypedArray(v)",
							"isModuleNamespaceObject(v)",
							"isConstructor(v)",
							"isIterable(v)",
							"isAsyncIterable(v)",
							"isIterator(v)",
							"isArrayLike(v)",
							" function isObject(arg)",
							" function isAsync(fn)",
							" function SyscallError(syscall, errnum)",
							"SyscallError",
							"SyscallError",
							"get message()",
							" function toString(arrayBuf, encoding = 'utf-8')",
							"a =>",
							"(c, i) =>",
							" function btoa(bin)",
							" function atob(asc)",
							" function assert(actual, expected, message)",
							" function escape(str, chars = [])",
							" function quote(str, q = '\"')",
							" function memoize(fn)",
							" (n, ...rest) =>",
							" function chain(first, ...fns)",
							" (acc, fn) =>",
							" function(...args)",
							" function chainRight(first, ...fns)",
							" (acc, fn) =>",
							" function(...args)",
							" function chainArray(tmp, ...fns)",
							"tmp = function(...args)",
							" function getset(target, ...args)",
							"GetSet = (...args) =>",
							"key =>",
							" (key, value) =>",
							" key =>",
							"([k, v]) =>",
							" (key, value) =>",
							"([k, v]) =>",
							"key =>",
							" (key, value) =>",
							"() =>",
							" value =>",
							"getset",
							"getset",
							"bind(...args)",
							"fn =>",
							"getset",
							"transform(read, write)",
							"key =>",
							" (key, value) =>",
							"getset",
							" function(...args)",
							"get object()",
							" function modifier(...args)",
							" fn =>",
							" newValue =>",
							" function getter(target, ...args)",
							" () =>",
							"ret = key =>",
							"ret = key =>",
							"ret = () =>",
							" function setter(target, ...args)",
							" value =>",
							"ret = (key, value) =>",
							"ret = (key, value) =>",
							"ret = value =>",
							" function gettersetter(target, ...args)",
							"fn = (...args) =>",
							" (...args2) =>",
							"fn = (...args) =>",
							"fn = (...args) =>",
							"fn = (...args) =>",
							"fn = (...args) =>",
							" (...args2) =>",
							" function hasFn(target)",
							" key =>",
							" key =>",
							" function remover(target)",
							" key =>",
							" key =>",
							" function getOrCreate(target, create = () => ({}), set)",
							" key =>",
							" function hasGetSet(obj)",
							"m =>",
							" function mapObject(target)",
							"set: (key, value) =>",
							"get: key =>",
							" function once(fn, thisArg, memoFn)",
							" function(...args)",
							"callback =>",
							" function()",
							" function()",
							" function(e)",
							" function atexit(fn)",
							"() =>",
							" function waitFor(ms)",
							"resolve =>",
							" function extend(dst, src, options = { enumerable: false })",
							"options = (desc, prop) =>",
							" function define(obj, ...args)",
							" desc =>",
							" function defineGetter(obj, key, fn, enumerable = false)",
							" function defineGetterSetter(obj, key, g, s, enumerable = false)",
							" function defineGettersSetters(obj, gettersSetters)",
							" function* prototypeIterator(obj, pred = (obj, depth) => true)",
							" function pick(obj, keys)",
							" function omit(obj, keys)",
							" function keys(obj, start = 0, end = obj => obj === Object.prototype)",
							"pred = (obj, depth) =>",
							"end = () =>",
							"pred = (obj, depth) =>",
							" function entries(obj, start = 0, end = obj => obj === Object.prototype)",
							" function values(obj, start = 0, end = obj => obj === Object.prototype)",
							" function getMethodNames(obj, depth = 1, start = 0)",
							" function getMethods(obj, depth = 1, start = 0)",
							" function bindMethods(obj, methods, target)",
							" function properties(obj, options = { enumerable: true })",
							" fn =>",
							" fn =>",
							" function weakDefine(obj, ...args)",
							" function getPrototypeChain(obj, limit = -1, start = 0)",
							" function getConstructorChain(obj, ...range)",
							" function hasPrototype(obj, proto)",
							" function filter(seq, pred, thisArg)",
							"pred = (el, i) =>",
							" function filterKeys(r, needles, keep = true)",
							"pred = key =>",
							"(obj, key) =>",
							"curry = (f, arr = [], length = f.length) =>",
							" function(...args)",
							"a =>",
							"(min, max, value) =>",
							" function* split(buf, ...points)",
							"splitAt = (b, pos, len) =>",
							"function* (re, str)",
							" function bindProperties(obj, target, props, gen)",
							"name =>",
							"(acc, name) =>",
							" p => v =>",
							"k =>",
							" (a, [k, v]) =>",
							" (...args) =>",
							"(...args) =>",
							" (a, k) =>",
							" function immutableClass(orig, ...proto)",
							"p =>",
							" ctor =>",
							"ctor",
							"imm = base =>",
							"constructor(...args)",
							" function instrument( fn, log = (duration, name, args, ret) => console.log( `function '${name}'` + (ret !== undefined ? ` {= ${escape(ret + '').",
							"(0, 100) + '...'}}` : '') + ` timing: ${duration.",
							"(3)}ms` ), logInterval = 0 //1000 )",
							"async (args, ret) =>",
							" (args, ret) =>",
							"async function(...args)",
							" function(...args)",
							"newMap = () =>",
							"(...args) =>",
							"get(path)",
							"set(path, value)",
							"catchable = function Catchable(self)",
							"catchable",
							"function ()",
							"then(fn)",
							"(...args) =>",
							"(...args) =>",
							" function isNumeric(value)",
							"v =>",
							" function isIndex(value)",
							" function numericIndex(value)",
							" function histogram(arr, out = ",
							"())",
							"incr = key =>",
							" function propertyLookupHandlers(getter = key => null, setter, thisObj)",
							"get(target, key, receiver)",
							".set = function(target, key, value)",
							".ownKeys = function(target)",
							" function propertyLookup(...args)",
							" function abbreviate(str, max = 40, suffix = '...')",
							" function tryFunction(fn, resolve = a => a, reject = () => null)",
							"resolve = () =>",
							"reject = () =>",
							"async function(...args)",
							" function(...args)",
							" function tryCatch(fn, resolve = a => a, reject = () => null, ...args)",
							" function mapAdapter(fn)",
							"get(key)",
							"set(key, value)",
							".keys = () =>",
							".entries = () =>",
							" function mapFunction(map)",
							"fn = function(...args)",
							"m =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".update = function(key, fn = (k, v) => v)",
							".entries = function* ()",
							".values = function* ()",
							".keys = function* ()",
							" function()",
							"([key, value]) =>",
							".keys = async () =>",
							".entries = async () =>",
							".values = async () =>",
							".keys = function* ()",
							".entries = function* ()",
							".values = function* ()",
							".filter = function(pred)",
							"function* ()",
							".map = function(t)",
							"function* ()",
							".forEach = function(fn)",
							".delete = key =>",
							".has = key =>",
							" function mapWrapper(map, toKey = key => key, fromKey = key => key)",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".keys = () =>",
							".entries = function* ()",
							".values = function* ()",
							".has = key =>",
							".delete = key =>",
							"m =>",
							" function weakMapper(createFn, map = ",
							"(), hitFn)",
							"self = function(obj, ...args)",
							".set = (k, v) =>",
							".get = k =>",
							" function wrapGenerator(fn)",
							" function(...args)",
							" function wrapGeneratorMethods(obj)",
							"unique = (arr, cmp) =>",
							" (el, i, arr) =>",
							"item =>",
							" (el, i, arr) =>",
							"getFunctionArguments = fn =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" (red, green, blue) =>",
							"function getAnsiStyles()",
							"value: (red, green, blue) =>",
							"c =>",
							"value: hex =>",
							"character =>",
							"value: hex =>",
							"value: code =>",
							"value: (red, green, blue) =>",
							"value: hex =>",
							" function stripAnsi(str)",
							" function padAnsi(str, n, s = ' ')",
							" function padStartAnsi(str, n, s = ' ')",
							" function padEndAnsi(str, n, s = ' ')",
							" function randInt(...args)",
							" function randFloat(min, max, rng = Math.random)",
							" function randStr(n, set, rng = Math.random)",
							" function toBigInt(arg)",
							" function roundDigits(precision)",
							" function roundTo(value, prec, digits, type = 'round')",
							" function lazyProperty(obj, name, getter, opts = {})",
							"replaceProperty = newValue =>",
							"async function()",
							" function()",
							" function lazyProperties(obj, gettersObj, opts = {})",
							" function decorate(decorators, obj, ...args)",
							" function getOpt(options = {}, args)",
							"findOpt = arg =>",
							" ([optname, option]) =>",
							"opt =>",
							"(acc, arg) =>",
							" function showHelp(opts, exitCode = 0)",
							"(acc, [name]) =>",
							" (acc, [name, [hasArg, fn, shortOpt]]) =>",
							" function isoDate(d)",
							" function toUnixTime(dateObj, utc = false)",
							" function unixTime(utc = false)",
							" function fromUnixTime(epoch, utc = false)",
							" function range(...args)",
							" (v, k) =>",
							"n =>",
							" function repeater(n, what)",
							"function* ()",
							"function* ()",
							" function repeat(n, what)",
							" function chunkArray(arr, size)",
							"fn = (a, v, i) =>",
							" function ucfirst(str)",
							" function lcfirst(str)",
							" function camelize(str, delim = '')",
							" (match, p1, p2, offset) =>",
							" function decamelize(str, delim = '-')",
							" function shorten(str, max = 40, suffix = '...')",
							" function arraysInCommon(a)",
							"(itm, indx) =>",
							"arr =>",
							" function arrayFacade(proto, itemFn = (container, i) => container.",
							"(i))",
							"*keys()",
							"*entries()",
							"*values()",
							"forEach(callback, thisArg)",
							"reduce(callback, accu, thisArg)",
							" function mod(a, b)",
							"b : n =>",
							" function pushUnique(arr, ...args)",
							" function inserter(dest, next = (k, v) => {})",
							" (k, v) =>",
							" (k, v) =>",
							" (k, v) =>",
							"fn = function(key, value)",
							" function intersect(a, b)",
							" function symmetricDifference(a, b)",
							" function* partitionArray(a, size)",
							" function difference(a, b, includes)",
							"x =>",
							"x =>",
							"x =>",
							"x =>",
							" function intersection(a, b)",
							"x =>",
							" function union(a, b, equality)",
							" function partition(array, callback)",
							" function Location(line, column, pos, file, freeze = true)",
							"Location",
							" function format(...args)",
							" function formatWithOptions(opts, ...args)",
							"function formatWithOptionsInternal(o, v)",
							" function functionName(fn)",
							" function className(obj)",
							"isArrowFunction = fn =>",
							" function predicate(fn_or_regex, pred)",
							"fn = arg =>",
							".valueOf = function()",
							" arg =>",
							"isArray = a =>",
							"ArrayFacade",
							"*keys()",
							"*entries()",
							"*values()",
							"forEach(callback, thisArg)",
							"reduce(callback, accu, thisArg)",
							" function bits(buffer)",
							" function dupArrayBuffer(buf, start, length)",
							" function getTypeName(v)",
							" function isArrayBuffer(buf)",
							" function isBigDecimal(num)",
							" function isBigFloat(num)",
							" function isBigInt(num)",
							" function isBool(value)",
							" function isJSFunction(fn)",
							" function isCFunction(fn)",
							" function isConstructor(fn)",
							" function isEmptyString(value)",
							" function isError(value)",
							" function isException(value)",
							" function isExtensible(value)",
							" function isFunction(value)",
							" function isHTMLDDA(value)",
							" function isInstanceOf(value, ctor)",
							" function isInteger(value)",
							" function isJobPending(id)",
							" function isLiveObject(obj)",
							" function isNull(value)",
							" function isNumber(value)",
							" function isUndefined(value)",
							" function isString(value)",
							" function isUninitialized(value)",
							" function isSymbol(value)",
							" function isUncatchableError(value)",
							" function isRegisteredClass(id)",
							" function rand()",
							" function randi()",
							" function randf()",
							" function srand(seed)",
							" function toArrayBuffer(value)",
							" function error()",
							"Location.prototype.clone = function(freeze = false, withFilename = true)",
							"Location",
							"Location",
							" function* ()",
							"Location.prototype.toString = function(opts = {})",
							"Location.prototype.valueOf = function()",
							"Location",
							" function(hint)",
							"Location",
							" function(n, opts)",
							"Location",
							"get offset()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD0AgAARWFnbGVQcm9qZWN0CiAgY29uc3RydWN0b3IoZmlsZSwgZnMpCiAgbG9hZEZpbGUgPSBmaWxlID0+CiAgbG9hZChuYW1lID0gdGhpcy5iYXNlbmFtZSkKICBsYXp5T3BlbihmaWxlKQooKSA9PgogIGwgPT4KICBjbG9zZShmaWxlKQogIGNsb3NlQWxsKCkKICBhZGRMaWJyYXJpZXMobGlicykKICBvcGVuKGZpbGUpCiAgc3RhdGljIGRldGVybWluZUVhZ2xlUGF0aChmcykKICBmaW5kRG9jdW1lbnQocHJlZCkKICBwcmVkID0gbmFtZSA9PgogIGdldExpYnJhcnkobmFtZSkKICBnZXQgc2NoZW1hdGljKCkKICBuYW1lID0+CiAgZ2V0IGJvYXJkKCkKICBuYW1lID0+CiAgZ2V0IGxpYnJhcmllcygpCiAgZG9jID0+CiAgZ2V0IHJvb3QoKQogIGdldCBjaGlsZHJlbigpCiAgdCA9IChbdiwgbCwgZF0pID0+CiAgc3RhdGljIGRvY3VtZW50TG9jYXRpb24oZCkKICBzdGF0aWMgZG9jdW1lbnRLZXkoZCkKICBnZXREb2N1bWVudERpcmVjdG9yaWVzKCkKICBmaWxlID0+CiAgZ2V0TGlicmFyeVBhdGgoKQogIGRpciA9PgogIGdldExpYnJhcnlOYW1lcygpCigpID0+Cm5hbWVzID0+CigpID0+Cm5hbWVzID0+CiAgZmluZExpYnJhcnkobmFtZSwgZGlycyA9IHRoaXMubGlicmFyeVBhdGgpCiAgdXBkYXRlTGlicmFyeShuYW1lKQogIGxpYlByb3BzID0gbGliID0+CiAgaW5kZXgobCkKICBzYXZlVG8oZGlyID0gJy4nLCBvdmVyd3JpdGUgPSBmYWxzZSkKKHJlc29sdmUsIHJlamVjdCkgPT4KICBkb2MgPT4KICByZXN1bHQgPT4KRWFnbGVQcm9qZWN0AAAAAAAAAACBJAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					5,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/document.js",
						"symkeys":
						[
							[
								918,
								979
							],
							[
								1022,
								1049
							],
							[
								1162,
								1175
							],
							[
								1305,
								1319
							],
							[
								1425,
								1455
							],
							[
								1565,
								1588
							],
							[
								1652,
								1675
							],
							[
								1842,
								1856
							],
							[
								2027,
								2075
							],
							[
								2404,
								2424
							],
							[
								2657,
								2672
							],
							[
								2805,
								2820
							],
							[
								2906,
								2921
							],
							[
								3740,
								3752
							],
							[
								4298,
								4311
							],
							[
								4384,
								4396
							],
							[
								4515,
								4531
							],
							[
								4888,
								4902
							],
							[
								4958,
								4970
							],
							[
								5041,
								5056
							],
							[
								5113,
								5129
							],
							[
								5229,
								5235
							],
							[
								5555,
								5569
							],
							[
								5585,
								5598
							],
							[
								5681,
								5690
							],
							[
								5876,
								5890
							],
							[
								5977,
								5990
							],
							[
								6117,
								6131
							],
							[
								6237,
								6250
							],
							[
								6302,
								6315
							],
							[
								7640,
								7675
							],
							[
								8127,
								8162
							],
							[
								8285,
								8309
							],
							[
								8356,
								8368
							],
							[
								8408,
								8428
							],
							[
								8472,
								8484
							],
							[
								8524,
								8545
							],
							[
								8590,
								8602
							],
							[
								8642,
								8655
							],
							[
								8708,
								8721
							],
							[
								8867,
								8889
							],
							[
								9049,
								9053
							],
							[
								9336,
								9342
							],
							[
								9398,
								9402
							],
							[
								9470,
								9474
							],
							[
								9504,
								9508
							],
							[
								9673,
								9698
							],
							[
								10002,
								10006
							],
							[
								10178,
								10192
							],
							[
								10283,
								10299
							],
							[
								10420,
								10431
							],
							[
								10482,
								10501
							],
							[
								10562,
								10570
							],
							[
								10614,
								10636
							],
							[
								10697,
								10719
							],
							[
								10784,
								10796
							],
							[
								11115,
								11127
							],
							[
								11327,
								11343
							],
							[
								11366,
								11370
							],
							[
								11457,
								11468
							],
							[
								11780,
								11797
							],
							[
								11848,
								11861
							]
						],
						"symlist":
						[
							"function GetProxy(fn = (prop, target) => null, handlers = {})",
							"get(target, prop, receiver)",
							"EagleDocument",
							"get typeName()",
							"static typeName(fileExtension)",
							"static baseOf(filename)",
							"static typeOf(filename)",
							"readFn = fn =>",
							"constructor(xmlStr, project, filename, type, fs)",
							"(raw, owner, ref) =>",
							"(key, value) =>",
							"(key, value) =>",
							"(key, value) =>",
							"(r, g, b) =>",
							"sheets: () =>",
							"parts: () =>",
							"libraries: () =>",
							"signals: () =>",
							"plain: () =>",
							"elements: () =>",
							"libraries: () =>",
							" () =>",
							"drawing: () =>",
							"layers: () =>",
							"get raw()",
							"get filename()",
							"get dirname()",
							"get basename()",
							"get changes()",
							"cacheFields()",
							"saveTo(file, overwrite = false, fs)",
							"index(path, transform = arg => arg)",
							"*getAll(pred, transform)",
							"(v, p, o) =>",
							"get(pred, transform)",
							"(v, p, o) =>",
							"find(pred, transform)",
							"(v, p, o) =>",
							"lookup(xpath)",
							" (o, p, v) =>",
							"getBounds(sheetNo = 0)",
							"v =>",
							"sig =>",
							"c =>",
							"e =>",
							"Rect",
							"getMeasures(options = {})",
							"e =>",
							"get measures()",
							"get dimensions()",
							"signalMap()",
							"([name, signal]) =>",
							"child =>",
							"([child, geometry]) =>",
							"([child, geometry]) =>",
							"getLayer(id)",
							"getSheet(id)",
							"getLibrary(name)",
							"e =>",
							"function ()",
							"get mainElement()",
							"EagleDocument"
						]
					},
					"",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					6,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/element.js",
						"symkeys":
						[
							[
								851,
								888
							],
							[
								941,
								965
							],
							[
								1001,
								1026
							],
							[
								1075,
								1097
							],
							[
								1335,
								1359
							],
							[
								1448,
								1460
							],
							[
								1525,
								1542
							],
							[
								2017,
								2029
							],
							[
								2168,
								2195
							],
							[
								4060,
								4114
							],
							[
								4321,
								4349
							],
							[
								5162,
								5171
							],
							[
								5373,
								5378
							],
							[
								5699,
								5713
							],
							[
								5830,
								5840
							],
							[
								6198,
								6212
							],
							[
								6324,
								6329
							],
							[
								6560,
								6578
							],
							[
								6616,
								6630
							],
							[
								6724,
								6738
							],
							[
								6813,
								6818
							],
							[
								7031,
								7039
							],
							[
								7153,
								7161
							],
							[
								7486,
								7491
							],
							[
								7513,
								7520
							],
							[
								7672,
								7677
							],
							[
								8335,
								8346
							],
							[
								8795,
								8809
							],
							[
								9285,
								9296
							],
							[
								9383,
								9394
							],
							[
								9502,
								9513
							],
							[
								9628,
								9639
							],
							[
								9750,
								9761
							],
							[
								10479,
								10490
							],
							[
								10509,
								10513
							],
							[
								10642,
								10653
							],
							[
								10766,
								10777
							],
							[
								10861,
								10872
							],
							[
								11028,
								11039
							],
							[
								11166,
								11177
							],
							[
								11306,
								11317
							],
							[
								12404,
								12410
							],
							[
								12555,
								12561
							],
							[
								12779,
								12785
							],
							[
								12795,
								12799
							],
							[
								12894,
								12900
							],
							[
								12986,
								12992
							],
							[
								13079,
								13085
							],
							[
								13169,
								13175
							],
							[
								13258,
								13264
							],
							[
								13352,
								13358
							],
							[
								13548,
								13554
							],
							[
								13642,
								13648
							],
							[
								13700,
								13706
							],
							[
								13798,
								13804
							],
							[
								14338,
								14344
							],
							[
								14420,
								14425
							],
							[
								14679,
								14685
							],
							[
								14802,
								14820
							],
							[
								14839,
								14865
							],
							[
								15073,
								15079
							],
							[
								15269,
								15276
							],
							[
								15366,
								15372
							],
							[
								15562,
								15569
							],
							[
								15741,
								15747
							],
							[
								15802,
								15807
							],
							[
								15906,
								15912
							],
							[
								15967,
								15972
							],
							[
								16027,
								16033
							],
							[
								16109,
								16114
							],
							[
								16229,
								16235
							],
							[
								16290,
								16295
							],
							[
								16365,
								16387
							],
							[
								16484,
								16507
							],
							[
								16606,
								16628
							],
							[
								16754,
								16771
							],
							[
								16804,
								16812
							],
							[
								17011,
								17033
							],
							[
								17441,
								17450
							],
							[
								17499,
								17503
							],
							[
								17911,
								17925
							],
							[
								17990,
								18011
							],
							[
								18132,
								18152
							],
							[
								18197,
								18227
							],
							[
								18444,
								18451
							],
							[
								18556,
								18567
							],
							[
								18763,
								18781
							],
							[
								18866,
								18886
							],
							[
								18936,
								18940
							],
							[
								18983,
								18993
							],
							[
								19184,
								19200
							],
							[
								19235,
								19245
							],
							[
								19508,
								19529
							],
							[
								19718,
								19731
							],
							[
								20162,
								20188
							],
							[
								20285,
								20296
							],
							[
								20716,
								20720
							],
							[
								22058,
								22062
							],
							[
								22498,
								22502
							],
							[
								22737,
								22741
							],
							[
								22896,
								22900
							],
							[
								22929,
								22933
							],
							[
								23127,
								23131
							],
							[
								23931,
								23935
							],
							[
								24226,
								24238
							],
							[
								24277,
								24293
							],
							[
								24656,
								24670
							],
							[
								24814,
								24842
							],
							[
								25069,
								25073
							],
							[
								25164,
								25171
							],
							[
								25234,
								25244
							],
							[
								25473,
								25480
							],
							[
								25725,
								25732
							],
							[
								25912,
								25919
							],
							[
								26303,
								26309
							],
							[
								26570,
								26574
							],
							[
								26679,
								26702
							],
							[
								26762,
								26790
							],
							[
								26878,
								26885
							],
							[
								27048,
								27071
							],
							[
								27273,
								27289
							],
							[
								27330,
								27338
							],
							[
								27400,
								27408
							],
							[
								27625,
								27636
							],
							[
								27746,
								27764
							],
							[
								27875,
								27886
							],
							[
								27931,
								27948
							],
							[
								28057,
								28064
							],
							[
								28115,
								28136
							],
							[
								28234,
								28253
							],
							[
								28317,
								28338
							],
							[
								28404,
								28426
							],
							[
								28494,
								28512
							],
							[
								28877,
								28885
							],
							[
								28946,
								28954
							],
							[
								29225,
								29242
							],
							[
								29345,
								29355
							],
							[
								29465,
								29498
							],
							[
								29531,
								29549
							],
							[
								29629,
								29650
							],
							[
								29676,
								29687
							],
							[
								29802,
								29814
							],
							[
								29900,
								29929
							],
							[
								29957,
								29969
							],
							[
								30121,
								30151
							],
							[
								30184,
								30202
							],
							[
								30241,
								30262
							],
							[
								30283,
								30294
							],
							[
								30354,
								30379
							],
							[
								30509,
								30530
							],
							[
								30578,
								30587
							],
							[
								33643,
								33655
							],
							[
								33724,
								33763
							]
						],
						"symlist":
						[
							"lazyProperty = (obj, name, getter) =>",
							"add = (arr, ...items) =>",
							"decodeHTMLEntities = s =>",
							" (match, entity) =>",
							"TList = (child, elem) =>",
							"round = n =>",
							"get(target, prop)",
							"EagleElement",
							"static get(owner, ref, raw)",
							"static create(tagName, attributes = {}, children = [])",
							"constructor(owner, ref, raw)",
							"EagleNode",
							"get()",
							"element: () =>",
							"pad: () =>",
							"handler = v =>",
							"() =>",
							"getDiameter = v =>",
							"handler = v =>",
							"handler = v =>",
							"() =>",
							"value =>",
							"value =>",
							" v =>",
							"name =>",
							" v =>",
							"get color()",
							"hfn = value =>",
							"hfn = () =>",
							"hfn = () =>",
							"hfn = () =>",
							"hfn = () =>",
							"hfn = () =>",
							"hfn = () =>",
							"e =>",
							"hfn = () =>",
							"hfn = () =>",
							"hfn = () =>",
							"get layer()",
							"hfn = () =>",
							"hfn = () =>",
							" () =>",
							" () =>",
							" () =>",
							"e =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" e =>",
							" () =>",
							" e =>",
							" (o, p, r) =>",
							" () =>",
							"cref =>",
							" () =>",
							"cref =>",
							" () =>",
							" e =>",
							" () =>",
							" e =>",
							" () =>",
							" e =>",
							" () =>",
							" e =>",
							".getColor = element =>",
							".isVisible = element =>",
							".setVisible = value =>",
							".subscribe = f =>",
							"value =>",
							".getColor = function()",
							" value =>",
							"n =>",
							"get repeater()",
							"async (push, stop) =>",
							"({ value, done }) =>",
							".pushEvent = function(...args)",
							"elem =>",
							"event(name)",
							"subscribe(handler)",
							"unsubscribe(handler)",
							"h =>",
							"get text()",
							"get attributes()",
							"getLayer()",
							"lookup(xpath, create)",
							" (o, p, v) =>",
							"getBounds(pred, opts = {})",
							"pred = e =>",
							"e =>",
							"e =>",
							"e =>",
							"e =>",
							"b =>",
							"r =>",
							"e =>",
							"n =>",
							"get bounds()",
							"transformation()",
							"get geometry()",
							"makeGetterSetter = k => v =>",
							"p =>",
							"prop =>",
							" k => v =>",
							"prop =>",
							"prop =>",
							"prop =>",
							" () =>",
							"g =>",
							"position(offset = null)",
							"makeGetterSetter = k => v =>",
							"prop =>",
							"static isRelation(name)",
							"t = (o, p, v) =>",
							"r = e =>",
							"scope2()",
							"get chain()",
							"getParent(tagName)",
							"get sheet()",
							"get sheetNumber()",
							"names()",
							" (acc, entry) =>",
							"static keys(entity)",
							"static values(entity)",
							"static entries(entity)",
							"static toObject(e)",
							"child =>",
							"child =>",
							"static toArray(e)",
							"toString()",
							"*getAll(pred, transform = a => a)",
							" (v, p, o) =>",
							" (r, v, p, o) =>",
							" () =>",
							"(v, p, o) =>",
							"get(pred, transform = a => a)",
							"(v, p, o) =>",
							"find(pred, transform = a => a)",
							" (v, p, o) =>",
							" (r, v, p, o) =>",
							" () =>",
							"setAttribute(name, value)",
							"removeAttribute(name)",
							"get pos()",
							"EagleElement",
							"makeEagleElement = (owner, ref, raw) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABrBAAAR2V0UHJveHkoZm4gPSAocHJvcCwgdGFyZ2V0KSA9PiBudWxsLCBoYW5kbGVycyA9IHt9KQogIGdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKQpFYWdsZURvY3VtZW50CiAgZ2V0IHR5cGVOYW1lKCkKICBzdGF0aWMgdHlwZU5hbWUoZmlsZUV4dGVuc2lvbikKICBzdGF0aWMgYmFzZU9mKGZpbGVuYW1lKQogIHN0YXRpYyB0eXBlT2YoZmlsZW5hbWUpCiAgcmVhZEZuID0gZm4gPT4KICBjb25zdHJ1Y3Rvcih4bWxTdHIsIHByb2plY3QsIGZpbGVuYW1lLCB0eXBlLCBmcykKKHJhdywgb3duZXIsIHJlZikgPT4KKGtleSwgdmFsdWUpID0+CihrZXksIHZhbHVlKSA9Pgooa2V5LCB2YWx1ZSkgPT4KKHIsIGcsIGIpID0+CiAgc2hlZXRzOiAoKSA9PgogIHBhcnRzOiAoKSA9PgogIGxpYnJhcmllczogKCkgPT4KICBzaWduYWxzOiAoKSA9PgogIHBsYWluOiAoKSA9PgogIGVsZW1lbnRzOiAoKSA9PgogIGxpYnJhcmllczogKCkgPT4KKCkgPT4KICBkcmF3aW5nOiAoKSA9PgogIGxheWVyczogKCkgPT4KICBnZXQgcmF3KCkKICBnZXQgZmlsZW5hbWUoKQogIGdldCBkaXJuYW1lKCkKICBnZXQgYmFzZW5hbWUoKQogIGdldCBjaGFuZ2VzKCkKICBjYWNoZUZpZWxkcygpCiAgc2F2ZVRvKGZpbGUsIG92ZXJ3cml0ZSA9IGZhbHNlLCBmcykKICBpbmRleChwYXRoLCB0cmFuc2Zvcm0gPSBhcmcgPT4gYXJnKQoqZ2V0QWxsKHByZWQsIHRyYW5zZm9ybSkKKHYsIHAsIG8pID0+CiAgZ2V0KHByZWQsIHRyYW5zZm9ybSkKKHYsIHAsIG8pID0+CiAgZmluZChwcmVkLCB0cmFuc2Zvcm0pCih2LCBwLCBvKSA9PgogIGxvb2t1cCh4cGF0aCkKKG8sIHAsIHYpID0+CiAgZ2V0Qm91bmRzKHNoZWV0Tm8gPSAwKQogIHYgPT4KICBzaWcgPT4KICBjID0+CiAgZSA9PgpSZWN0CiAgZ2V0TWVhc3VyZXMob3B0aW9ucyA9IHt9KQogIGUgPT4KICBnZXQgbWVhc3VyZXMoKQogIGdldCBkaW1lbnNpb25zKCkKICBzaWduYWxNYXAoKQooW25hbWUsIHNpZ25hbF0pID0+CiAgY2hpbGQgPT4KKFtjaGlsZCwgZ2VvbWV0cnldKSA9PgooW2NoaWxkLCBnZW9tZXRyeV0pID0+CiAgZ2V0TGF5ZXIoaWQpCiAgZ2V0U2hlZXQoaWQpCiAgZ2V0TGlicmFyeShuYW1lKQogIGUgPT4KKCkKICBnZXQgbWFpbkVsZW1lbnQoKQpFYWdsZURvY3VtZW50AAAAAAAAAAClCAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					7,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/ref.js",
						"symkeys":
						[
							[
								348,
								362
							],
							[
								367,
								404
							],
							[
								1033,
								1043
							],
							[
								1116,
								1129
							],
							[
								1327,
								1347
							],
							[
								1673,
								1687
							],
							[
								1796,
								1803
							],
							[
								2013,
								2025
							],
							[
								2091,
								2108
							],
							[
								2172,
								2189
							],
							[
								2254,
								2270
							],
							[
								2333,
								2348
							],
							[
								2411,
								2424
							],
							[
								2561,
								2570
							],
							[
								2827,
								2839
							],
							[
								3278,
								3287
							],
							[
								3383,
								3423
							],
							[
								3687,
								3701
							],
							[
								3722,
								3736
							]
						],
						"symlist":
						[
							"EagleReference",
							"constructor(root, path, check = true)",
							"get type()",
							"getPath(root)",
							"dereference(noThrow)",
							"replace(value)",
							"entry()",
							"get parent()",
							"get prevSibling()",
							"get nextSibling()",
							"get firstChild()",
							"get lastChild()",
							"down(...args)",
							"up(n = 1)",
							"shift(n = 1)",
							"inspect()",
							"EagleRef = function EagleRef(root, path)",
							"EagleReference",
							"EagleReference"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAClCAAAICBsYXp5UHJvcGVydHkgPSAob2JqLCBuYW1lLCBnZXR0ZXIpID0+CiAgYWRkID0gKGFyciwgLi4uaXRlbXMpID0+CiAgZGVjb2RlSFRNTEVudGl0aWVzID0gcyA9PgoobWF0Y2gsIGVudGl0eSkgPT4KVExpc3QgPSAoY2hpbGQsIGVsZW0pID0+CiAgcm91bmQgPSBuID0+CiAgZ2V0KHRhcmdldCwgcHJvcCkKRWFnbGVFbGVtZW50CiAgc3RhdGljIGdldChvd25lciwgcmVmLCByYXcpCiAgc3RhdGljIGNyZWF0ZSh0YWdOYW1lLCBhdHRyaWJ1dGVzID0ge30sIGNoaWxkcmVuID0gW10pCiAgY29uc3RydWN0b3Iob3duZXIsIHJlZiwgcmF3KQpFYWdsZU5vZGUKICBnZXQoKQogIGVsZW1lbnQ6ICgpID0+CiAgcGFkOiAoKSA9PgogIGhhbmRsZXIgPSB2ID0+CigpID0+CiAgZ2V0RGlhbWV0ZXIgPSB2ID0+CiAgaGFuZGxlciA9IHYgPT4KICBoYW5kbGVyID0gdiA9PgooKSA9PgogIHZhbHVlID0+CiAgdmFsdWUgPT4KdiA9PgogIG5hbWUgPT4KdiA9PgogIGdldCBjb2xvcigpCiAgaGZuID0gdmFsdWUgPT4KICBoZm4gPSAoKSA9PgogIGhmbiA9ICgpID0+CiAgaGZuID0gKCkgPT4KICBoZm4gPSAoKSA9PgogIGhmbiA9ICgpID0+CiAgaGZuID0gKCkgPT4KICBlID0+CiAgaGZuID0gKCkgPT4KICBoZm4gPSAoKSA9PgogIGhmbiA9ICgpID0+CiAgZ2V0IGxheWVyKCkKICBoZm4gPSAoKSA9PgogIGhmbiA9ICgpID0+CigpID0+CigpID0+CigpID0+CiAgZSA9PgooKSA9PgooKSA9PgooKSA9PgooKSA9PgooKSA9PgooKSA9PgooKSA9PgooKSA9PgooKSA9PgooKSA9PgooKSA9PgplID0+CigpID0+CmUgPT4KKG8sIHAsIHIpID0+CigpID0+CiAgY3JlZiA9PgooKSA9PgogIGNyZWYgPT4KKCkgPT4KZSA9PgooKSA9PgplID0+CigpID0+CmUgPT4KKCkgPT4KZSA9PgogIC5nZXRDb2xvciA9IGVsZW1lbnQgPT4KICAuaXNWaXNpYmxlID0gZWxlbWVudCA9PgogIC5zZXRWaXNpYmxlID0gdmFsdWUgPT4KICAuc3Vic2NyaWJlID0gZiA9PgogIHZhbHVlID0+CiAgLmdldENvbG9yID0gZnVuY3Rpb24oKQp2YWx1ZSA9PgogIG4gPT4KICBnZXQgcmVwZWF0ZXIoKQoocHVzaCwgc3RvcCkgPT4KKHsgdmFsdWUsIGRvbmUgfSkgPT4KICAucHVzaEV2ZW50ID0gZnVuY3Rpb24oLi4uYXJncykKICBlbGVtID0+CiAgZXZlbnQobmFtZSkKICBzdWJzY3JpYmUoaGFuZGxlcikKICB1bnN1YnNjcmliZShoYW5kbGVyKQogIGggPT4KICBnZXQgdGV4dCgpCiAgZ2V0IGF0dHJpYnV0ZXMoKQogIGdldExheWVyKCkKICBsb29rdXAoeHBhdGgsIGNyZWF0ZSkKKG8sIHAsIHYpID0+CiAgZ2V0Qm91bmRzKHByZWQsIG9wdHMgPSB7fSkKICBwcmVkID0gZSA9PgogIGUgPT4KICBlID0+CiAgZSA9PgogIGUgPT4KICBiID0+CiAgciA9PgogIGUgPT4KICBuID0+CiAgZ2V0IGJvdW5kcygpCiAgdHJhbnNmb3JtYXRpb24oKQogIGdldCBnZW9tZXRyeSgpCiAgbWFrZUdldHRlclNldHRlciA9IGsgPT4gdiA9PgogIHAgPT4KICBwcm9wID0+CmsgPT4gdiA9PgogIHByb3AgPT4KICBwcm9wID0+CiAgcHJvcCA9PgooKSA9PgogIGcgPT4KICBwb3NpdGlvbihvZmZzZXQgPSBudWxsKQogIG1ha2VHZXR0ZXJTZXR0ZXIgPSBrID0+IHYgPT4KICBwcm9wID0+CiAgc3RhdGljIGlzUmVsYXRpb24obmFtZSkKICB0ID0gKG8sIHAsIHYpID0+CiAgciA9IGUgPT4KICBzY29wZTIoKQogIGdldCBjaGFpbigpCiAgZ2V0UGFyZW50KHRhZ05hbWUpCiAgZ2V0IHNoZWV0KCkKICBnZXQgc2hlZXROdW1iZXIoKQogIG5hbWVzKCkKKGFjYywgZW50cnkpID0+CiAgc3RhdGljIGtleXMoZW50aXR5KQogIHN0YXRpYyB2YWx1ZXMoZW50aXR5KQogIHN0YXRpYyBlbnRyaWVzKGVudGl0eSkKICBzdGF0aWMgdG9PYmplY3QoZSkKICBjaGlsZCA9PgogIGNoaWxkID0+CiAgc3RhdGljIHRvQXJyYXkoZSkKICB0b1N0cmluZygpCipnZXRBbGwocHJlZCwgdHJhbnNmb3JtID0gYSA9PiBhKQoodiwgcCwgbykgPT4KKHIsIHYsIHAsIG8pID0+CigpID0+Cih2LCBwLCBvKSA9PgogIGdldChwcmVkLCB0cmFuc2Zvcm0gPSBhID0+IGEpCih2LCBwLCBvKSA9PgogIGZpbmQocHJlZCwgdHJhbnNmb3JtID0gYSA9PiBhKQoodiwgcCwgbykgPT4KKHIsIHYsIHAsIG8pID0+CigpID0+CiAgc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKQogIHJlbW92ZUF0dHJpYnV0ZShuYW1lKQogIGdldCBwb3MoKQpFYWdsZUVsZW1lbnQKICBtYWtlRWFnbGVFbGVtZW50ID0gKG93bmVyLCByZWYsIHJhdykgPT4AAAAAAAAAAF8BAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					8,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/element.js",
						"symkeys":
						[
							[
								851,
								888
							],
							[
								941,
								965
							],
							[
								1001,
								1026
							],
							[
								1075,
								1097
							],
							[
								1335,
								1359
							],
							[
								1448,
								1460
							],
							[
								1525,
								1542
							],
							[
								2017,
								2029
							],
							[
								2168,
								2195
							],
							[
								4060,
								4114
							],
							[
								4321,
								4349
							],
							[
								5162,
								5171
							],
							[
								5373,
								5378
							],
							[
								5699,
								5713
							],
							[
								5830,
								5840
							],
							[
								6198,
								6212
							],
							[
								6324,
								6329
							],
							[
								6560,
								6578
							],
							[
								6616,
								6630
							],
							[
								6724,
								6738
							],
							[
								6813,
								6818
							],
							[
								7031,
								7039
							],
							[
								7153,
								7161
							],
							[
								7486,
								7491
							],
							[
								7513,
								7520
							],
							[
								7672,
								7677
							],
							[
								8335,
								8346
							],
							[
								8795,
								8809
							],
							[
								9285,
								9296
							],
							[
								9383,
								9394
							],
							[
								9502,
								9513
							],
							[
								9628,
								9639
							],
							[
								9750,
								9761
							],
							[
								10479,
								10490
							],
							[
								10509,
								10513
							],
							[
								10642,
								10653
							],
							[
								10766,
								10777
							],
							[
								10861,
								10872
							],
							[
								11028,
								11039
							],
							[
								11166,
								11177
							],
							[
								11306,
								11317
							],
							[
								12404,
								12410
							],
							[
								12555,
								12561
							],
							[
								12779,
								12785
							],
							[
								12795,
								12799
							],
							[
								12894,
								12900
							],
							[
								12986,
								12992
							],
							[
								13079,
								13085
							],
							[
								13169,
								13175
							],
							[
								13258,
								13264
							],
							[
								13352,
								13358
							],
							[
								13548,
								13554
							],
							[
								13642,
								13648
							],
							[
								13700,
								13706
							],
							[
								13798,
								13804
							],
							[
								14338,
								14344
							],
							[
								14420,
								14425
							],
							[
								14679,
								14685
							],
							[
								14802,
								14820
							],
							[
								14839,
								14865
							],
							[
								15073,
								15079
							],
							[
								15269,
								15276
							],
							[
								15366,
								15372
							],
							[
								15562,
								15569
							],
							[
								15741,
								15747
							],
							[
								15802,
								15807
							],
							[
								15906,
								15912
							],
							[
								15967,
								15972
							],
							[
								16027,
								16033
							],
							[
								16109,
								16114
							],
							[
								16229,
								16235
							],
							[
								16290,
								16295
							],
							[
								16365,
								16387
							],
							[
								16484,
								16507
							],
							[
								16606,
								16628
							],
							[
								16754,
								16771
							],
							[
								16804,
								16812
							],
							[
								17011,
								17033
							],
							[
								17441,
								17450
							],
							[
								17499,
								17503
							],
							[
								17911,
								17925
							],
							[
								17990,
								18011
							],
							[
								18132,
								18152
							],
							[
								18197,
								18227
							],
							[
								18444,
								18451
							],
							[
								18556,
								18567
							],
							[
								18763,
								18781
							],
							[
								18866,
								18886
							],
							[
								18936,
								18940
							],
							[
								18983,
								18993
							],
							[
								19184,
								19200
							],
							[
								19235,
								19245
							],
							[
								19508,
								19529
							],
							[
								19718,
								19731
							],
							[
								20162,
								20188
							],
							[
								20285,
								20296
							],
							[
								20716,
								20720
							],
							[
								22058,
								22062
							],
							[
								22498,
								22502
							],
							[
								22737,
								22741
							],
							[
								22896,
								22900
							],
							[
								22929,
								22933
							],
							[
								23127,
								23131
							],
							[
								23931,
								23935
							],
							[
								24226,
								24238
							],
							[
								24277,
								24293
							],
							[
								24656,
								24670
							],
							[
								24814,
								24842
							],
							[
								25069,
								25073
							],
							[
								25164,
								25171
							],
							[
								25234,
								25244
							],
							[
								25473,
								25480
							],
							[
								25725,
								25732
							],
							[
								25912,
								25919
							],
							[
								26303,
								26309
							],
							[
								26570,
								26574
							],
							[
								26679,
								26702
							],
							[
								26762,
								26790
							],
							[
								26878,
								26885
							],
							[
								27048,
								27071
							],
							[
								27273,
								27289
							],
							[
								27330,
								27338
							],
							[
								27400,
								27408
							],
							[
								27625,
								27636
							],
							[
								27746,
								27764
							],
							[
								27875,
								27886
							],
							[
								27931,
								27948
							],
							[
								28057,
								28064
							],
							[
								28115,
								28136
							],
							[
								28234,
								28253
							],
							[
								28317,
								28338
							],
							[
								28404,
								28426
							],
							[
								28494,
								28512
							],
							[
								28877,
								28885
							],
							[
								28946,
								28954
							],
							[
								29225,
								29242
							],
							[
								29345,
								29355
							],
							[
								29465,
								29498
							],
							[
								29531,
								29549
							],
							[
								29629,
								29650
							],
							[
								29676,
								29687
							],
							[
								29802,
								29814
							],
							[
								29900,
								29929
							],
							[
								29957,
								29969
							],
							[
								30121,
								30151
							],
							[
								30184,
								30202
							],
							[
								30241,
								30262
							],
							[
								30283,
								30294
							],
							[
								30354,
								30379
							],
							[
								30509,
								30530
							],
							[
								30578,
								30587
							],
							[
								33643,
								33655
							],
							[
								33724,
								33763
							]
						],
						"symlist":
						[
							"lazyProperty = (obj, name, getter) =>",
							"add = (arr, ...items) =>",
							"decodeHTMLEntities = s =>",
							" (match, entity) =>",
							"TList = (child, elem) =>",
							"round = n =>",
							"get(target, prop)",
							"EagleElement",
							"static get(owner, ref, raw)",
							"static create(tagName, attributes = {}, children = [])",
							"constructor(owner, ref, raw)",
							"EagleNode",
							"get()",
							"element: () =>",
							"pad: () =>",
							"handler = v =>",
							"() =>",
							"getDiameter = v =>",
							"handler = v =>",
							"handler = v =>",
							"() =>",
							"value =>",
							"value =>",
							" v =>",
							"name =>",
							" v =>",
							"get color()",
							"hfn = value =>",
							"hfn = () =>",
							"hfn = () =>",
							"hfn = () =>",
							"hfn = () =>",
							"hfn = () =>",
							"hfn = () =>",
							"e =>",
							"hfn = () =>",
							"hfn = () =>",
							"hfn = () =>",
							"get layer()",
							"hfn = () =>",
							"hfn = () =>",
							" () =>",
							" () =>",
							" () =>",
							"e =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" e =>",
							" () =>",
							" e =>",
							" (o, p, r) =>",
							" () =>",
							"cref =>",
							" () =>",
							"cref =>",
							" () =>",
							" e =>",
							" () =>",
							" e =>",
							" () =>",
							" e =>",
							" () =>",
							" e =>",
							".getColor = element =>",
							".isVisible = element =>",
							".setVisible = value =>",
							".subscribe = f =>",
							"value =>",
							".getColor = function()",
							" value =>",
							"n =>",
							"get repeater()",
							"async (push, stop) =>",
							"({ value, done }) =>",
							".pushEvent = function(...args)",
							"elem =>",
							"event(name)",
							"subscribe(handler)",
							"unsubscribe(handler)",
							"h =>",
							"get text()",
							"get attributes()",
							"getLayer()",
							"lookup(xpath, create)",
							" (o, p, v) =>",
							"getBounds(pred, opts = {})",
							"pred = e =>",
							"e =>",
							"e =>",
							"e =>",
							"e =>",
							"b =>",
							"r =>",
							"e =>",
							"n =>",
							"get bounds()",
							"transformation()",
							"get geometry()",
							"makeGetterSetter = k => v =>",
							"p =>",
							"prop =>",
							" k => v =>",
							"prop =>",
							"prop =>",
							"prop =>",
							" () =>",
							"g =>",
							"position(offset = null)",
							"makeGetterSetter = k => v =>",
							"prop =>",
							"static isRelation(name)",
							"t = (o, p, v) =>",
							"r = e =>",
							"scope2()",
							"get chain()",
							"getParent(tagName)",
							"get sheet()",
							"get sheetNumber()",
							"names()",
							" (acc, entry) =>",
							"static keys(entity)",
							"static values(entity)",
							"static entries(entity)",
							"static toObject(e)",
							"child =>",
							"child =>",
							"static toArray(e)",
							"toString()",
							"*getAll(pred, transform = a => a)",
							" (v, p, o) =>",
							" (r, v, p, o) =>",
							" () =>",
							"(v, p, o) =>",
							"get(pred, transform = a => a)",
							"(v, p, o) =>",
							"find(pred, transform = a => a)",
							" (v, p, o) =>",
							" (r, v, p, o) =>",
							" () =>",
							"setAttribute(name, value)",
							"removeAttribute(name)",
							"get pos()",
							"EagleElement",
							"makeEagleElement = (owner, ref, raw) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABfAQAARWFnbGVSZWZlcmVuY2UKICBjb25zdHJ1Y3Rvcihyb290LCBwYXRoLCBjaGVjayA9IHRydWUpCiAgZ2V0IHR5cGUoKQogIGdldFBhdGgocm9vdCkKICBkZXJlZmVyZW5jZShub1Rocm93KQogIHJlcGxhY2UodmFsdWUpCiAgZW50cnkoKQogIGdldCBwYXJlbnQoKQogIGdldCBwcmV2U2libGluZygpCiAgZ2V0IG5leHRTaWJsaW5nKCkKICBnZXQgZmlyc3RDaGlsZCgpCiAgZ2V0IGxhc3RDaGlsZCgpCiAgZG93biguLi5hcmdzKQogIHVwKG4gPSAxKQogIHNoaWZ0KG4gPSAxKQogIGluc3BlY3QoKQpFYWdsZVJlZiA9IGZ1bmN0aW9uIEVhZ2xlUmVmKHJvb3QsIHBhdGgpCkVhZ2xlUmVmZXJlbmNlCkVhZ2xlUmVmZXJlbmNlAAAAAAAAAAClCAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					9,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/os-helpers.js",
						"symkeys":
						[
							[
								986,
								1012
							],
							[
								1336,
								1363
							],
							[
								1374,
								1388
							],
							[
								1605,
								1620
							],
							[
								1650,
								1669
							]
						],
						"symlist":
						[
							" function Execute(...args)",
							" function URLWorker(script)",
							"dataURL = s =>",
							"(push, stop) =>",
							"postMessage: msg =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAClCAAAICBsYXp5UHJvcGVydHkgPSAob2JqLCBuYW1lLCBnZXR0ZXIpID0+CiAgYWRkID0gKGFyciwgLi4uaXRlbXMpID0+CiAgZGVjb2RlSFRNTEVudGl0aWVzID0gcyA9PgoobWF0Y2gsIGVudGl0eSkgPT4KVExpc3QgPSAoY2hpbGQsIGVsZW0pID0+CiAgcm91bmQgPSBuID0+CiAgZ2V0KHRhcmdldCwgcHJvcCkKRWFnbGVFbGVtZW50CiAgc3RhdGljIGdldChvd25lciwgcmVmLCByYXcpCiAgc3RhdGljIGNyZWF0ZSh0YWdOYW1lLCBhdHRyaWJ1dGVzID0ge30sIGNoaWxkcmVuID0gW10pCiAgY29uc3RydWN0b3Iob3duZXIsIHJlZiwgcmF3KQpFYWdsZU5vZGUKICBnZXQoKQogIGVsZW1lbnQ6ICgpID0+CiAgcGFkOiAoKSA9PgogIGhhbmRsZXIgPSB2ID0+CigpID0+CiAgZ2V0RGlhbWV0ZXIgPSB2ID0+CiAgaGFuZGxlciA9IHYgPT4KICBoYW5kbGVyID0gdiA9PgooKSA9PgogIHZhbHVlID0+CiAgdmFsdWUgPT4KdiA9PgogIG5hbWUgPT4KdiA9PgogIGdldCBjb2xvcigpCiAgaGZuID0gdmFsdWUgPT4KICBoZm4gPSAoKSA9PgogIGhmbiA9ICgpID0+CiAgaGZuID0gKCkgPT4KICBoZm4gPSAoKSA9PgogIGhmbiA9ICgpID0+CiAgaGZuID0gKCkgPT4KICBlID0+CiAgaGZuID0gKCkgPT4KICBoZm4gPSAoKSA9PgogIGhmbiA9ICgpID0+CiAgZ2V0IGxheWVyKCkKICBoZm4gPSAoKSA9PgogIGhmbiA9ICgpID0+CigpID0+CigpID0+CigpID0+CiAgZSA9PgooKSA9PgooKSA9PgooKSA9PgooKSA9PgooKSA9PgooKSA9PgooKSA9PgooKSA9PgooKSA9PgooKSA9PgooKSA9PgplID0+CigpID0+CmUgPT4KKG8sIHAsIHIpID0+CigpID0+CiAgY3JlZiA9PgooKSA9PgogIGNyZWYgPT4KKCkgPT4KZSA9PgooKSA9PgplID0+CigpID0+CmUgPT4KKCkgPT4KZSA9PgogIC5nZXRDb2xvciA9IGVsZW1lbnQgPT4KICAuaXNWaXNpYmxlID0gZWxlbWVudCA9PgogIC5zZXRWaXNpYmxlID0gdmFsdWUgPT4KICAuc3Vic2NyaWJlID0gZiA9PgogIHZhbHVlID0+CiAgLmdldENvbG9yID0gZnVuY3Rpb24oKQp2YWx1ZSA9PgogIG4gPT4KICBnZXQgcmVwZWF0ZXIoKQoocHVzaCwgc3RvcCkgPT4KKHsgdmFsdWUsIGRvbmUgfSkgPT4KICAucHVzaEV2ZW50ID0gZnVuY3Rpb24oLi4uYXJncykKICBlbGVtID0+CiAgZXZlbnQobmFtZSkKICBzdWJzY3JpYmUoaGFuZGxlcikKICB1bnN1YnNjcmliZShoYW5kbGVyKQogIGggPT4KICBnZXQgdGV4dCgpCiAgZ2V0IGF0dHJpYnV0ZXMoKQogIGdldExheWVyKCkKICBsb29rdXAoeHBhdGgsIGNyZWF0ZSkKKG8sIHAsIHYpID0+CiAgZ2V0Qm91bmRzKHByZWQsIG9wdHMgPSB7fSkKICBwcmVkID0gZSA9PgogIGUgPT4KICBlID0+CiAgZSA9PgogIGUgPT4KICBiID0+CiAgciA9PgogIGUgPT4KICBuID0+CiAgZ2V0IGJvdW5kcygpCiAgdHJhbnNmb3JtYXRpb24oKQogIGdldCBnZW9tZXRyeSgpCiAgbWFrZUdldHRlclNldHRlciA9IGsgPT4gdiA9PgogIHAgPT4KICBwcm9wID0+CmsgPT4gdiA9PgogIHByb3AgPT4KICBwcm9wID0+CiAgcHJvcCA9PgooKSA9PgogIGcgPT4KICBwb3NpdGlvbihvZmZzZXQgPSBudWxsKQogIG1ha2VHZXR0ZXJTZXR0ZXIgPSBrID0+IHYgPT4KICBwcm9wID0+CiAgc3RhdGljIGlzUmVsYXRpb24obmFtZSkKICB0ID0gKG8sIHAsIHYpID0+CiAgciA9IGUgPT4KICBzY29wZTIoKQogIGdldCBjaGFpbigpCiAgZ2V0UGFyZW50KHRhZ05hbWUpCiAgZ2V0IHNoZWV0KCkKICBnZXQgc2hlZXROdW1iZXIoKQogIG5hbWVzKCkKKGFjYywgZW50cnkpID0+CiAgc3RhdGljIGtleXMoZW50aXR5KQogIHN0YXRpYyB2YWx1ZXMoZW50aXR5KQogIHN0YXRpYyBlbnRyaWVzKGVudGl0eSkKICBzdGF0aWMgdG9PYmplY3QoZSkKICBjaGlsZCA9PgogIGNoaWxkID0+CiAgc3RhdGljIHRvQXJyYXkoZSkKICB0b1N0cmluZygpCipnZXRBbGwocHJlZCwgdHJhbnNmb3JtID0gYSA9PiBhKQoodiwgcCwgbykgPT4KKHIsIHYsIHAsIG8pID0+CigpID0+Cih2LCBwLCBvKSA9PgogIGdldChwcmVkLCB0cmFuc2Zvcm0gPSBhID0+IGEpCih2LCBwLCBvKSA9PgogIGZpbmQocHJlZCwgdHJhbnNmb3JtID0gYSA9PiBhKQoodiwgcCwgbykgPT4KKHIsIHYsIHAsIG8pID0+CigpID0+CiAgc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKQogIHJlbW92ZUF0dHJpYnV0ZShuYW1lKQogIGdldCBwb3MoKQpFYWdsZUVsZW1lbnQKICBtYWtlRWFnbGVFbGVtZW50ID0gKG93bmVyLCByZWYsIHJhdykgPT4AAAAAAAAAAFkAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					10,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/element.js",
						"symkeys":
						[
							[
								851,
								888
							],
							[
								941,
								965
							],
							[
								1001,
								1026
							],
							[
								1075,
								1097
							],
							[
								1335,
								1359
							],
							[
								1448,
								1460
							],
							[
								1525,
								1542
							],
							[
								2017,
								2029
							],
							[
								2168,
								2195
							],
							[
								4060,
								4114
							],
							[
								4321,
								4349
							],
							[
								5162,
								5171
							],
							[
								5373,
								5378
							],
							[
								5699,
								5713
							],
							[
								5830,
								5840
							],
							[
								6198,
								6212
							],
							[
								6324,
								6329
							],
							[
								6560,
								6578
							],
							[
								6616,
								6630
							],
							[
								6724,
								6738
							],
							[
								6813,
								6818
							],
							[
								7031,
								7039
							],
							[
								7153,
								7161
							],
							[
								7486,
								7491
							],
							[
								7513,
								7520
							],
							[
								7672,
								7677
							],
							[
								8335,
								8346
							],
							[
								8795,
								8809
							],
							[
								9285,
								9296
							],
							[
								9383,
								9394
							],
							[
								9502,
								9513
							],
							[
								9628,
								9639
							],
							[
								9750,
								9761
							],
							[
								10479,
								10490
							],
							[
								10509,
								10513
							],
							[
								10642,
								10653
							],
							[
								10766,
								10777
							],
							[
								10861,
								10872
							],
							[
								11028,
								11039
							],
							[
								11166,
								11177
							],
							[
								11306,
								11317
							],
							[
								12404,
								12410
							],
							[
								12555,
								12561
							],
							[
								12779,
								12785
							],
							[
								12795,
								12799
							],
							[
								12894,
								12900
							],
							[
								12986,
								12992
							],
							[
								13079,
								13085
							],
							[
								13169,
								13175
							],
							[
								13258,
								13264
							],
							[
								13352,
								13358
							],
							[
								13548,
								13554
							],
							[
								13642,
								13648
							],
							[
								13700,
								13706
							],
							[
								13798,
								13804
							],
							[
								14338,
								14344
							],
							[
								14420,
								14425
							],
							[
								14679,
								14685
							],
							[
								14802,
								14820
							],
							[
								14839,
								14865
							],
							[
								15073,
								15079
							],
							[
								15269,
								15276
							],
							[
								15366,
								15372
							],
							[
								15562,
								15569
							],
							[
								15741,
								15747
							],
							[
								15802,
								15807
							],
							[
								15906,
								15912
							],
							[
								15967,
								15972
							],
							[
								16027,
								16033
							],
							[
								16109,
								16114
							],
							[
								16229,
								16235
							],
							[
								16290,
								16295
							],
							[
								16365,
								16387
							],
							[
								16484,
								16507
							],
							[
								16606,
								16628
							],
							[
								16754,
								16771
							],
							[
								16804,
								16812
							],
							[
								17011,
								17033
							],
							[
								17441,
								17450
							],
							[
								17499,
								17503
							],
							[
								17911,
								17925
							],
							[
								17990,
								18011
							],
							[
								18132,
								18152
							],
							[
								18197,
								18227
							],
							[
								18444,
								18451
							],
							[
								18556,
								18567
							],
							[
								18763,
								18781
							],
							[
								18866,
								18886
							],
							[
								18936,
								18940
							],
							[
								18983,
								18993
							],
							[
								19184,
								19200
							],
							[
								19235,
								19245
							],
							[
								19508,
								19529
							],
							[
								19718,
								19731
							],
							[
								20162,
								20188
							],
							[
								20285,
								20296
							],
							[
								20716,
								20720
							],
							[
								22058,
								22062
							],
							[
								22498,
								22502
							],
							[
								22737,
								22741
							],
							[
								22896,
								22900
							],
							[
								22929,
								22933
							],
							[
								23127,
								23131
							],
							[
								23931,
								23935
							],
							[
								24226,
								24238
							],
							[
								24277,
								24293
							],
							[
								24656,
								24670
							],
							[
								24814,
								24842
							],
							[
								25069,
								25073
							],
							[
								25164,
								25171
							],
							[
								25234,
								25244
							],
							[
								25473,
								25480
							],
							[
								25725,
								25732
							],
							[
								25912,
								25919
							],
							[
								26303,
								26309
							],
							[
								26570,
								26574
							],
							[
								26679,
								26702
							],
							[
								26762,
								26790
							],
							[
								26878,
								26885
							],
							[
								27048,
								27071
							],
							[
								27273,
								27289
							],
							[
								27330,
								27338
							],
							[
								27400,
								27408
							],
							[
								27625,
								27636
							],
							[
								27746,
								27764
							],
							[
								27875,
								27886
							],
							[
								27931,
								27948
							],
							[
								28057,
								28064
							],
							[
								28115,
								28136
							],
							[
								28234,
								28253
							],
							[
								28317,
								28338
							],
							[
								28404,
								28426
							],
							[
								28494,
								28512
							],
							[
								28877,
								28885
							],
							[
								28946,
								28954
							],
							[
								29225,
								29242
							],
							[
								29345,
								29355
							],
							[
								29465,
								29498
							],
							[
								29531,
								29549
							],
							[
								29629,
								29650
							],
							[
								29676,
								29687
							],
							[
								29802,
								29814
							],
							[
								29900,
								29929
							],
							[
								29957,
								29969
							],
							[
								30121,
								30151
							],
							[
								30184,
								30202
							],
							[
								30241,
								30262
							],
							[
								30283,
								30294
							],
							[
								30354,
								30379
							],
							[
								30509,
								30530
							],
							[
								30578,
								30587
							],
							[
								33643,
								33655
							],
							[
								33724,
								33763
							]
						],
						"symlist":
						[
							"lazyProperty = (obj, name, getter) =>",
							"add = (arr, ...items) =>",
							"decodeHTMLEntities = s =>",
							" (match, entity) =>",
							"TList = (child, elem) =>",
							"round = n =>",
							"get(target, prop)",
							"EagleElement",
							"static get(owner, ref, raw)",
							"static create(tagName, attributes = {}, children = [])",
							"constructor(owner, ref, raw)",
							"EagleNode",
							"get()",
							"element: () =>",
							"pad: () =>",
							"handler = v =>",
							"() =>",
							"getDiameter = v =>",
							"handler = v =>",
							"handler = v =>",
							"() =>",
							"value =>",
							"value =>",
							" v =>",
							"name =>",
							" v =>",
							"get color()",
							"hfn = value =>",
							"hfn = () =>",
							"hfn = () =>",
							"hfn = () =>",
							"hfn = () =>",
							"hfn = () =>",
							"hfn = () =>",
							"e =>",
							"hfn = () =>",
							"hfn = () =>",
							"hfn = () =>",
							"get layer()",
							"hfn = () =>",
							"hfn = () =>",
							" () =>",
							" () =>",
							" () =>",
							"e =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" e =>",
							" () =>",
							" e =>",
							" (o, p, r) =>",
							" () =>",
							"cref =>",
							" () =>",
							"cref =>",
							" () =>",
							" e =>",
							" () =>",
							" e =>",
							" () =>",
							" e =>",
							" () =>",
							" e =>",
							".getColor = element =>",
							".isVisible = element =>",
							".setVisible = value =>",
							".subscribe = f =>",
							"value =>",
							".getColor = function()",
							" value =>",
							"n =>",
							"get repeater()",
							"async (push, stop) =>",
							"({ value, done }) =>",
							".pushEvent = function(...args)",
							"elem =>",
							"event(name)",
							"subscribe(handler)",
							"unsubscribe(handler)",
							"h =>",
							"get text()",
							"get attributes()",
							"getLayer()",
							"lookup(xpath, create)",
							" (o, p, v) =>",
							"getBounds(pred, opts = {})",
							"pred = e =>",
							"e =>",
							"e =>",
							"e =>",
							"e =>",
							"b =>",
							"r =>",
							"e =>",
							"n =>",
							"get bounds()",
							"transformation()",
							"get geometry()",
							"makeGetterSetter = k => v =>",
							"p =>",
							"prop =>",
							" k => v =>",
							"prop =>",
							"prop =>",
							"prop =>",
							" () =>",
							"g =>",
							"position(offset = null)",
							"makeGetterSetter = k => v =>",
							"prop =>",
							"static isRelation(name)",
							"t = (o, p, v) =>",
							"r = e =>",
							"scope2()",
							"get chain()",
							"getParent(tagName)",
							"get sheet()",
							"get sheetNumber()",
							"names()",
							" (acc, entry) =>",
							"static keys(entity)",
							"static values(entity)",
							"static entries(entity)",
							"static toObject(e)",
							"child =>",
							"child =>",
							"static toArray(e)",
							"toString()",
							"*getAll(pred, transform = a => a)",
							" (v, p, o) =>",
							" (r, v, p, o) =>",
							" () =>",
							"(v, p, o) =>",
							"get(pred, transform = a => a)",
							"(v, p, o) =>",
							"find(pred, transform = a => a)",
							" (v, p, o) =>",
							" (r, v, p, o) =>",
							" () =>",
							"setAttribute(name, value)",
							"removeAttribute(name)",
							"get pos()",
							"EagleElement",
							"makeEagleElement = (owner, ref, raw) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABZAAAARXhlY3V0ZSguLi5hcmdzKQpVUkxXb3JrZXIoc2NyaXB0KQogIGRhdGFVUkwgPSBzID0+CihwdXNoLCBzdG9wKSA9PgogIHBvc3RNZXNzYWdlOiBtc2cgPT4AAAAAAAAAAKUIAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					11,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/io-helpers.js",
						"symkeys":
						[
							[
								567,
								591
							],
							[
								785,
								822
							],
							[
								853,
								859
							],
							[
								925,
								938
							],
							[
								969,
								997
							],
							[
								1242,
								1264
							],
							[
								1347,
								1380
							],
							[
								1462,
								1474
							],
							[
								1842,
								1874
							],
							[
								2192,
								2222
							],
							[
								2325,
								2356
							],
							[
								2424,
								2437
							],
							[
								2657,
								2665
							],
							[
								2750,
								2778
							],
							[
								2947,
								2974
							],
							[
								3159,
								3186
							],
							[
								3422,
								3453
							],
							[
								3766,
								3809
							],
							[
								3946,
								3994
							],
							[
								4307,
								4339
							],
							[
								4446,
								4486
							],
							[
								4648,
								4687
							],
							[
								4750,
								4779
							],
							[
								5109,
								5141
							],
							[
								5380,
								5416
							],
							[
								5484,
								5511
							],
							[
								5564,
								5605
							],
							[
								5631,
								5640
							],
							[
								5682,
								5707
							],
							[
								5829,
								5839
							],
							[
								5955,
								5960
							],
							[
								6060,
								6070
							],
							[
								6147,
								6162
							],
							[
								6233,
								6247
							],
							[
								6365,
								6412
							],
							[
								6830,
								6861
							],
							[
								7280,
								7323
							],
							[
								7381,
								7387
							],
							[
								7600,
								7630
							],
							[
								7662,
								7680
							],
							[
								7799,
								7805
							],
							[
								7910,
								7934
							],
							[
								8207,
								8214
							],
							[
								8309,
								8317
							],
							[
								8412,
								8420
							],
							[
								10463,
								10500
							],
							[
								10681,
								10697
							],
							[
								11569,
								11577
							],
							[
								11665,
								11673
							],
							[
								11973,
								11993
							],
							[
								12136,
								12168
							]
						],
						"symlist":
						[
							" function IfDebug(token)",
							" function LogIfDebug(token, loggerFn)",
							" () =>",
							" (...args) =>",
							" function ReadFd(fd, binary)",
							" function IsStdio(obj)",
							" function ReadClose(file, binary)",
							"function* ()",
							" function ReadFile(name, binary)",
							" function ReadAny(obj, binary)",
							" function LoadHistory(filename)",
							"parse = () =>",
							"entry =>",
							" function ReadJSON(filename)",
							" function ReadXML(filename)",
							" function MapFile(filename)",
							" function WriteFile(file, data)",
							" function WriteFd(fd, data, offset, length)",
							" function WriteClose(file, data, offset, length)",
							" function WriteAny(obj, ...args)",
							" function WriteJSON(name, data, ...args)",
							" function WriteXML(name, data, ...args)",
							" function ReadBJSON(filename)",
							" function WriteBJSON(name, data)",
							" function* Filter(gen, regEx = /.*/)",
							" function FilterImages(gen)",
							" function SortFiles(arr, field = 'ctime')",
							"(a, b) =>",
							" function* StatFiles(gen)",
							"toString()",
							"() =>",
							"toString()",
							"get landscape()",
							"get portrait()",
							"async function* FdReader(fd, bufferSize = 1024)",
							" function CopyToClipboard(text)",
							" function ReadCallback(fd, fn = data => {})",
							" () =>",
							" function LogCall(fn, thisObj)",
							" function(...args)",
							"arg =>",
							" function Spawn(...args)",
							"stdin()",
							"stdout()",
							"stderr()",
							" function FetchURL(url, options = {})",
							"(acc, [k, v]) =>",
							" data =>",
							" data =>",
							" function Shell(cmd)",
							" function ExecTool(cmd, ...args)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAClCAAAICBsYXp5UHJvcGVydHkgPSAob2JqLCBuYW1lLCBnZXR0ZXIpID0+CiAgYWRkID0gKGFyciwgLi4uaXRlbXMpID0+CiAgZGVjb2RlSFRNTEVudGl0aWVzID0gcyA9PgoobWF0Y2gsIGVudGl0eSkgPT4KVExpc3QgPSAoY2hpbGQsIGVsZW0pID0+CiAgcm91bmQgPSBuID0+CiAgZ2V0KHRhcmdldCwgcHJvcCkKRWFnbGVFbGVtZW50CiAgc3RhdGljIGdldChvd25lciwgcmVmLCByYXcpCiAgc3RhdGljIGNyZWF0ZSh0YWdOYW1lLCBhdHRyaWJ1dGVzID0ge30sIGNoaWxkcmVuID0gW10pCiAgY29uc3RydWN0b3Iob3duZXIsIHJlZiwgcmF3KQpFYWdsZU5vZGUKICBnZXQoKQogIGVsZW1lbnQ6ICgpID0+CiAgcGFkOiAoKSA9PgogIGhhbmRsZXIgPSB2ID0+CigpID0+CiAgZ2V0RGlhbWV0ZXIgPSB2ID0+CiAgaGFuZGxlciA9IHYgPT4KICBoYW5kbGVyID0gdiA9PgooKSA9PgogIHZhbHVlID0+CiAgdmFsdWUgPT4KdiA9PgogIG5hbWUgPT4KdiA9PgogIGdldCBjb2xvcigpCiAgaGZuID0gdmFsdWUgPT4KICBoZm4gPSAoKSA9PgogIGhmbiA9ICgpID0+CiAgaGZuID0gKCkgPT4KICBoZm4gPSAoKSA9PgogIGhmbiA9ICgpID0+CiAgaGZuID0gKCkgPT4KICBlID0+CiAgaGZuID0gKCkgPT4KICBoZm4gPSAoKSA9PgogIGhmbiA9ICgpID0+CiAgZ2V0IGxheWVyKCkKICBoZm4gPSAoKSA9PgogIGhmbiA9ICgpID0+CigpID0+CigpID0+CigpID0+CiAgZSA9PgooKSA9PgooKSA9PgooKSA9PgooKSA9PgooKSA9PgooKSA9PgooKSA9PgooKSA9PgooKSA9PgooKSA9PgooKSA9PgplID0+CigpID0+CmUgPT4KKG8sIHAsIHIpID0+CigpID0+CiAgY3JlZiA9PgooKSA9PgogIGNyZWYgPT4KKCkgPT4KZSA9PgooKSA9PgplID0+CigpID0+CmUgPT4KKCkgPT4KZSA9PgogIC5nZXRDb2xvciA9IGVsZW1lbnQgPT4KICAuaXNWaXNpYmxlID0gZWxlbWVudCA9PgogIC5zZXRWaXNpYmxlID0gdmFsdWUgPT4KICAuc3Vic2NyaWJlID0gZiA9PgogIHZhbHVlID0+CiAgLmdldENvbG9yID0gZnVuY3Rpb24oKQp2YWx1ZSA9PgogIG4gPT4KICBnZXQgcmVwZWF0ZXIoKQoocHVzaCwgc3RvcCkgPT4KKHsgdmFsdWUsIGRvbmUgfSkgPT4KICAucHVzaEV2ZW50ID0gZnVuY3Rpb24oLi4uYXJncykKICBlbGVtID0+CiAgZXZlbnQobmFtZSkKICBzdWJzY3JpYmUoaGFuZGxlcikKICB1bnN1YnNjcmliZShoYW5kbGVyKQogIGggPT4KICBnZXQgdGV4dCgpCiAgZ2V0IGF0dHJpYnV0ZXMoKQogIGdldExheWVyKCkKICBsb29rdXAoeHBhdGgsIGNyZWF0ZSkKKG8sIHAsIHYpID0+CiAgZ2V0Qm91bmRzKHByZWQsIG9wdHMgPSB7fSkKICBwcmVkID0gZSA9PgogIGUgPT4KICBlID0+CiAgZSA9PgogIGUgPT4KICBiID0+CiAgciA9PgogIGUgPT4KICBuID0+CiAgZ2V0IGJvdW5kcygpCiAgdHJhbnNmb3JtYXRpb24oKQogIGdldCBnZW9tZXRyeSgpCiAgbWFrZUdldHRlclNldHRlciA9IGsgPT4gdiA9PgogIHAgPT4KICBwcm9wID0+CmsgPT4gdiA9PgogIHByb3AgPT4KICBwcm9wID0+CiAgcHJvcCA9PgooKSA9PgogIGcgPT4KICBwb3NpdGlvbihvZmZzZXQgPSBudWxsKQogIG1ha2VHZXR0ZXJTZXR0ZXIgPSBrID0+IHYgPT4KICBwcm9wID0+CiAgc3RhdGljIGlzUmVsYXRpb24obmFtZSkKICB0ID0gKG8sIHAsIHYpID0+CiAgciA9IGUgPT4KICBzY29wZTIoKQogIGdldCBjaGFpbigpCiAgZ2V0UGFyZW50KHRhZ05hbWUpCiAgZ2V0IHNoZWV0KCkKICBnZXQgc2hlZXROdW1iZXIoKQogIG5hbWVzKCkKKGFjYywgZW50cnkpID0+CiAgc3RhdGljIGtleXMoZW50aXR5KQogIHN0YXRpYyB2YWx1ZXMoZW50aXR5KQogIHN0YXRpYyBlbnRyaWVzKGVudGl0eSkKICBzdGF0aWMgdG9PYmplY3QoZSkKICBjaGlsZCA9PgogIGNoaWxkID0+CiAgc3RhdGljIHRvQXJyYXkoZSkKICB0b1N0cmluZygpCipnZXRBbGwocHJlZCwgdHJhbnNmb3JtID0gYSA9PiBhKQoodiwgcCwgbykgPT4KKHIsIHYsIHAsIG8pID0+CigpID0+Cih2LCBwLCBvKSA9PgogIGdldChwcmVkLCB0cmFuc2Zvcm0gPSBhID0+IGEpCih2LCBwLCBvKSA9PgogIGZpbmQocHJlZCwgdHJhbnNmb3JtID0gYSA9PiBhKQoodiwgcCwgbykgPT4KKHIsIHYsIHAsIG8pID0+CigpID0+CiAgc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKQogIHJlbW92ZUF0dHJpYnV0ZShuYW1lKQogIGdldCBwb3MoKQpFYWdsZUVsZW1lbnQKICBtYWtlRWFnbGVFbGVtZW50ID0gKG93bmVyLCByZWYsIHJhdykgPT4AAAAAAAAAAK4DAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					12,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/element.js",
						"symkeys":
						[
							[
								851,
								888
							],
							[
								941,
								965
							],
							[
								1001,
								1026
							],
							[
								1075,
								1097
							],
							[
								1335,
								1359
							],
							[
								1448,
								1460
							],
							[
								1525,
								1542
							],
							[
								2017,
								2029
							],
							[
								2168,
								2195
							],
							[
								4060,
								4114
							],
							[
								4321,
								4349
							],
							[
								5162,
								5171
							],
							[
								5373,
								5378
							],
							[
								5699,
								5713
							],
							[
								5830,
								5840
							],
							[
								6198,
								6212
							],
							[
								6324,
								6329
							],
							[
								6560,
								6578
							],
							[
								6616,
								6630
							],
							[
								6724,
								6738
							],
							[
								6813,
								6818
							],
							[
								7031,
								7039
							],
							[
								7153,
								7161
							],
							[
								7486,
								7491
							],
							[
								7513,
								7520
							],
							[
								7672,
								7677
							],
							[
								8335,
								8346
							],
							[
								8795,
								8809
							],
							[
								9285,
								9296
							],
							[
								9383,
								9394
							],
							[
								9502,
								9513
							],
							[
								9628,
								9639
							],
							[
								9750,
								9761
							],
							[
								10479,
								10490
							],
							[
								10509,
								10513
							],
							[
								10642,
								10653
							],
							[
								10766,
								10777
							],
							[
								10861,
								10872
							],
							[
								11028,
								11039
							],
							[
								11166,
								11177
							],
							[
								11306,
								11317
							],
							[
								12404,
								12410
							],
							[
								12555,
								12561
							],
							[
								12779,
								12785
							],
							[
								12795,
								12799
							],
							[
								12894,
								12900
							],
							[
								12986,
								12992
							],
							[
								13079,
								13085
							],
							[
								13169,
								13175
							],
							[
								13258,
								13264
							],
							[
								13352,
								13358
							],
							[
								13548,
								13554
							],
							[
								13642,
								13648
							],
							[
								13700,
								13706
							],
							[
								13798,
								13804
							],
							[
								14338,
								14344
							],
							[
								14420,
								14425
							],
							[
								14679,
								14685
							],
							[
								14802,
								14820
							],
							[
								14839,
								14865
							],
							[
								15073,
								15079
							],
							[
								15269,
								15276
							],
							[
								15366,
								15372
							],
							[
								15562,
								15569
							],
							[
								15741,
								15747
							],
							[
								15802,
								15807
							],
							[
								15906,
								15912
							],
							[
								15967,
								15972
							],
							[
								16027,
								16033
							],
							[
								16109,
								16114
							],
							[
								16229,
								16235
							],
							[
								16290,
								16295
							],
							[
								16365,
								16387
							],
							[
								16484,
								16507
							],
							[
								16606,
								16628
							],
							[
								16754,
								16771
							],
							[
								16804,
								16812
							],
							[
								17011,
								17033
							],
							[
								17441,
								17450
							],
							[
								17499,
								17503
							],
							[
								17911,
								17925
							],
							[
								17990,
								18011
							],
							[
								18132,
								18152
							],
							[
								18197,
								18227
							],
							[
								18444,
								18451
							],
							[
								18556,
								18567
							],
							[
								18763,
								18781
							],
							[
								18866,
								18886
							],
							[
								18936,
								18940
							],
							[
								18983,
								18993
							],
							[
								19184,
								19200
							],
							[
								19235,
								19245
							],
							[
								19508,
								19529
							],
							[
								19718,
								19731
							],
							[
								20162,
								20188
							],
							[
								20285,
								20296
							],
							[
								20716,
								20720
							],
							[
								22058,
								22062
							],
							[
								22498,
								22502
							],
							[
								22737,
								22741
							],
							[
								22896,
								22900
							],
							[
								22929,
								22933
							],
							[
								23127,
								23131
							],
							[
								23931,
								23935
							],
							[
								24226,
								24238
							],
							[
								24277,
								24293
							],
							[
								24656,
								24670
							],
							[
								24814,
								24842
							],
							[
								25069,
								25073
							],
							[
								25164,
								25171
							],
							[
								25234,
								25244
							],
							[
								25473,
								25480
							],
							[
								25725,
								25732
							],
							[
								25912,
								25919
							],
							[
								26303,
								26309
							],
							[
								26570,
								26574
							],
							[
								26679,
								26702
							],
							[
								26762,
								26790
							],
							[
								26878,
								26885
							],
							[
								27048,
								27071
							],
							[
								27273,
								27289
							],
							[
								27330,
								27338
							],
							[
								27400,
								27408
							],
							[
								27625,
								27636
							],
							[
								27746,
								27764
							],
							[
								27875,
								27886
							],
							[
								27931,
								27948
							],
							[
								28057,
								28064
							],
							[
								28115,
								28136
							],
							[
								28234,
								28253
							],
							[
								28317,
								28338
							],
							[
								28404,
								28426
							],
							[
								28494,
								28512
							],
							[
								28877,
								28885
							],
							[
								28946,
								28954
							],
							[
								29225,
								29242
							],
							[
								29345,
								29355
							],
							[
								29465,
								29498
							],
							[
								29531,
								29549
							],
							[
								29629,
								29650
							],
							[
								29676,
								29687
							],
							[
								29802,
								29814
							],
							[
								29900,
								29929
							],
							[
								29957,
								29969
							],
							[
								30121,
								30151
							],
							[
								30184,
								30202
							],
							[
								30241,
								30262
							],
							[
								30283,
								30294
							],
							[
								30354,
								30379
							],
							[
								30509,
								30530
							],
							[
								30578,
								30587
							],
							[
								33643,
								33655
							],
							[
								33724,
								33763
							]
						],
						"symlist":
						[
							"lazyProperty = (obj, name, getter) =>",
							"add = (arr, ...items) =>",
							"decodeHTMLEntities = s =>",
							" (match, entity) =>",
							"TList = (child, elem) =>",
							"round = n =>",
							"get(target, prop)",
							"EagleElement",
							"static get(owner, ref, raw)",
							"static create(tagName, attributes = {}, children = [])",
							"constructor(owner, ref, raw)",
							"EagleNode",
							"get()",
							"element: () =>",
							"pad: () =>",
							"handler = v =>",
							"() =>",
							"getDiameter = v =>",
							"handler = v =>",
							"handler = v =>",
							"() =>",
							"value =>",
							"value =>",
							" v =>",
							"name =>",
							" v =>",
							"get color()",
							"hfn = value =>",
							"hfn = () =>",
							"hfn = () =>",
							"hfn = () =>",
							"hfn = () =>",
							"hfn = () =>",
							"hfn = () =>",
							"e =>",
							"hfn = () =>",
							"hfn = () =>",
							"hfn = () =>",
							"get layer()",
							"hfn = () =>",
							"hfn = () =>",
							" () =>",
							" () =>",
							" () =>",
							"e =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" e =>",
							" () =>",
							" e =>",
							" (o, p, r) =>",
							" () =>",
							"cref =>",
							" () =>",
							"cref =>",
							" () =>",
							" e =>",
							" () =>",
							" e =>",
							" () =>",
							" e =>",
							" () =>",
							" e =>",
							".getColor = element =>",
							".isVisible = element =>",
							".setVisible = value =>",
							".subscribe = f =>",
							"value =>",
							".getColor = function()",
							" value =>",
							"n =>",
							"get repeater()",
							"async (push, stop) =>",
							"({ value, done }) =>",
							".pushEvent = function(...args)",
							"elem =>",
							"event(name)",
							"subscribe(handler)",
							"unsubscribe(handler)",
							"h =>",
							"get text()",
							"get attributes()",
							"getLayer()",
							"lookup(xpath, create)",
							" (o, p, v) =>",
							"getBounds(pred, opts = {})",
							"pred = e =>",
							"e =>",
							"e =>",
							"e =>",
							"e =>",
							"b =>",
							"r =>",
							"e =>",
							"n =>",
							"get bounds()",
							"transformation()",
							"get geometry()",
							"makeGetterSetter = k => v =>",
							"p =>",
							"prop =>",
							" k => v =>",
							"prop =>",
							"prop =>",
							"prop =>",
							" () =>",
							"g =>",
							"position(offset = null)",
							"makeGetterSetter = k => v =>",
							"prop =>",
							"static isRelation(name)",
							"t = (o, p, v) =>",
							"r = e =>",
							"scope2()",
							"get chain()",
							"getParent(tagName)",
							"get sheet()",
							"get sheetNumber()",
							"names()",
							" (acc, entry) =>",
							"static keys(entity)",
							"static values(entity)",
							"static entries(entity)",
							"static toObject(e)",
							"child =>",
							"child =>",
							"static toArray(e)",
							"toString()",
							"*getAll(pred, transform = a => a)",
							" (v, p, o) =>",
							" (r, v, p, o) =>",
							" () =>",
							"(v, p, o) =>",
							"get(pred, transform = a => a)",
							"(v, p, o) =>",
							"find(pred, transform = a => a)",
							" (v, p, o) =>",
							" (r, v, p, o) =>",
							" () =>",
							"setAttribute(name, value)",
							"removeAttribute(name)",
							"get pos()",
							"EagleElement",
							"makeEagleElement = (owner, ref, raw) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACuAwAASWZEZWJ1Zyh0b2tlbikKTG9nSWZEZWJ1Zyh0b2tlbiwgbG9nZ2VyRm4pCigpID0+CiguLi5hcmdzKSA9PgpSZWFkRmQoZmQsIGJpbmFyeSkKSXNTdGRpbyhvYmopClJlYWRDbG9zZShmaWxlLCBiaW5hcnkpCigpClJlYWRGaWxlKG5hbWUsIGJpbmFyeSkKUmVhZEFueShvYmosIGJpbmFyeSkKTG9hZEhpc3RvcnkoZmlsZW5hbWUpCiAgcGFyc2UgPSAoKSA9PgogIGVudHJ5ID0+ClJlYWRKU09OKGZpbGVuYW1lKQpSZWFkWE1MKGZpbGVuYW1lKQpNYXBGaWxlKGZpbGVuYW1lKQpXcml0ZUZpbGUoZmlsZSwgZGF0YSkKV3JpdGVGZChmZCwgZGF0YSwgb2Zmc2V0LCBsZW5ndGgpCldyaXRlQ2xvc2UoZmlsZSwgZGF0YSwgb2Zmc2V0LCBsZW5ndGgpCldyaXRlQW55KG9iaiwgLi4uYXJncykKV3JpdGVKU09OKG5hbWUsIGRhdGEsIC4uLmFyZ3MpCldyaXRlWE1MKG5hbWUsIGRhdGEsIC4uLmFyZ3MpClJlYWRCSlNPTihmaWxlbmFtZSkKV3JpdGVCSlNPTihuYW1lLCBkYXRhKQpGaWx0ZXIoZ2VuLCByZWdFeCA9IC8uKi8pCkZpbHRlckltYWdlcyhnZW4pClNvcnRGaWxlcyhhcnIsIGZpZWxkID0gJ2N0aW1lJykKKGEsIGIpID0+ClN0YXRGaWxlcyhnZW4pCiAgdG9TdHJpbmcoKQooKSA9PgogIHRvU3RyaW5nKCkKICBnZXQgbGFuZHNjYXBlKCkKICBnZXQgcG9ydHJhaXQoKQpGZFJlYWRlcihmZCwgYnVmZmVyU2l6ZSA9IDEwMjQpCkNvcHlUb0NsaXBib2FyZCh0ZXh0KQpSZWFkQ2FsbGJhY2soZmQsIGZuID0gZGF0YSA9PiB7fSkKKCkgPT4KTG9nQ2FsbChmbiwgdGhpc09iaikKZnVuY3Rpb24oLi4uYXJncykKICBhcmcgPT4KU3Bhd24oLi4uYXJncykKICBzdGRpbigpCiAgc3Rkb3V0KCkKICBzdGRlcnIoKQpGZXRjaFVSTCh1cmwsIG9wdGlvbnMgPSB7fSkKKGFjYywgW2ssIHZdKSA9PgpkYXRhID0+CmRhdGEgPT4KU2hlbGwoY21kKQpFeGVjVG9vbChjbWQsIC4uLmFyZ3MpAAAAAAAAAAClCAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					1,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAClCAAAICBsYXp5UHJvcGVydHkgPSAob2JqLCBuYW1lLCBnZXR0ZXIpID0+CiAgYWRkID0gKGFyciwgLi4uaXRlbXMpID0+CiAgZGVjb2RlSFRNTEVudGl0aWVzID0gcyA9PgoobWF0Y2gsIGVudGl0eSkgPT4KVExpc3QgPSAoY2hpbGQsIGVsZW0pID0+CiAgcm91bmQgPSBuID0+CiAgZ2V0KHRhcmdldCwgcHJvcCkKRWFnbGVFbGVtZW50CiAgc3RhdGljIGdldChvd25lciwgcmVmLCByYXcpCiAgc3RhdGljIGNyZWF0ZSh0YWdOYW1lLCBhdHRyaWJ1dGVzID0ge30sIGNoaWxkcmVuID0gW10pCiAgY29uc3RydWN0b3Iob3duZXIsIHJlZiwgcmF3KQpFYWdsZU5vZGUKICBnZXQoKQogIGVsZW1lbnQ6ICgpID0+CiAgcGFkOiAoKSA9PgogIGhhbmRsZXIgPSB2ID0+CigpID0+CiAgZ2V0RGlhbWV0ZXIgPSB2ID0+CiAgaGFuZGxlciA9IHYgPT4KICBoYW5kbGVyID0gdiA9PgooKSA9PgogIHZhbHVlID0+CiAgdmFsdWUgPT4KdiA9PgogIG5hbWUgPT4KdiA9PgogIGdldCBjb2xvcigpCiAgaGZuID0gdmFsdWUgPT4KICBoZm4gPSAoKSA9PgogIGhmbiA9ICgpID0+CiAgaGZuID0gKCkgPT4KICBoZm4gPSAoKSA9PgogIGhmbiA9ICgpID0+CiAgaGZuID0gKCkgPT4KICBlID0+CiAgaGZuID0gKCkgPT4KICBoZm4gPSAoKSA9PgogIGhmbiA9ICgpID0+CiAgZ2V0IGxheWVyKCkKICBoZm4gPSAoKSA9PgogIGhmbiA9ICgpID0+CigpID0+CigpID0+CigpID0+CiAgZSA9PgooKSA9PgooKSA9PgooKSA9PgooKSA9PgooKSA9PgooKSA9PgooKSA9PgooKSA9PgooKSA9PgooKSA9PgooKSA9PgplID0+CigpID0+CmUgPT4KKG8sIHAsIHIpID0+CigpID0+CiAgY3JlZiA9PgooKSA9PgogIGNyZWYgPT4KKCkgPT4KZSA9PgooKSA9PgplID0+CigpID0+CmUgPT4KKCkgPT4KZSA9PgogIC5nZXRDb2xvciA9IGVsZW1lbnQgPT4KICAuaXNWaXNpYmxlID0gZWxlbWVudCA9PgogIC5zZXRWaXNpYmxlID0gdmFsdWUgPT4KICAuc3Vic2NyaWJlID0gZiA9PgogIHZhbHVlID0+CiAgLmdldENvbG9yID0gZnVuY3Rpb24oKQp2YWx1ZSA9PgogIG4gPT4KICBnZXQgcmVwZWF0ZXIoKQoocHVzaCwgc3RvcCkgPT4KKHsgdmFsdWUsIGRvbmUgfSkgPT4KICAucHVzaEV2ZW50ID0gZnVuY3Rpb24oLi4uYXJncykKICBlbGVtID0+CiAgZXZlbnQobmFtZSkKICBzdWJzY3JpYmUoaGFuZGxlcikKICB1bnN1YnNjcmliZShoYW5kbGVyKQogIGggPT4KICBnZXQgdGV4dCgpCiAgZ2V0IGF0dHJpYnV0ZXMoKQogIGdldExheWVyKCkKICBsb29rdXAoeHBhdGgsIGNyZWF0ZSkKKG8sIHAsIHYpID0+CiAgZ2V0Qm91bmRzKHByZWQsIG9wdHMgPSB7fSkKICBwcmVkID0gZSA9PgogIGUgPT4KICBlID0+CiAgZSA9PgogIGUgPT4KICBiID0+CiAgciA9PgogIGUgPT4KICBuID0+CiAgZ2V0IGJvdW5kcygpCiAgdHJhbnNmb3JtYXRpb24oKQogIGdldCBnZW9tZXRyeSgpCiAgbWFrZUdldHRlclNldHRlciA9IGsgPT4gdiA9PgogIHAgPT4KICBwcm9wID0+CmsgPT4gdiA9PgogIHByb3AgPT4KICBwcm9wID0+CiAgcHJvcCA9PgooKSA9PgogIGcgPT4KICBwb3NpdGlvbihvZmZzZXQgPSBudWxsKQogIG1ha2VHZXR0ZXJTZXR0ZXIgPSBrID0+IHYgPT4KICBwcm9wID0+CiAgc3RhdGljIGlzUmVsYXRpb24obmFtZSkKICB0ID0gKG8sIHAsIHYpID0+CiAgciA9IGUgPT4KICBzY29wZTIoKQogIGdldCBjaGFpbigpCiAgZ2V0UGFyZW50KHRhZ05hbWUpCiAgZ2V0IHNoZWV0KCkKICBnZXQgc2hlZXROdW1iZXIoKQogIG5hbWVzKCkKKGFjYywgZW50cnkpID0+CiAgc3RhdGljIGtleXMoZW50aXR5KQogIHN0YXRpYyB2YWx1ZXMoZW50aXR5KQogIHN0YXRpYyBlbnRyaWVzKGVudGl0eSkKICBzdGF0aWMgdG9PYmplY3QoZSkKICBjaGlsZCA9PgogIGNoaWxkID0+CiAgc3RhdGljIHRvQXJyYXkoZSkKICB0b1N0cmluZygpCipnZXRBbGwocHJlZCwgdHJhbnNmb3JtID0gYSA9PiBhKQoodiwgcCwgbykgPT4KKHIsIHYsIHAsIG8pID0+CigpID0+Cih2LCBwLCBvKSA9PgogIGdldChwcmVkLCB0cmFuc2Zvcm0gPSBhID0+IGEpCih2LCBwLCBvKSA9PgogIGZpbmQocHJlZCwgdHJhbnNmb3JtID0gYSA9PiBhKQoodiwgcCwgbykgPT4KKHIsIHYsIHAsIG8pID0+CigpID0+CiAgc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKQogIHJlbW92ZUF0dHJpYnV0ZShuYW1lKQogIGdldCBwb3MoKQpFYWdsZUVsZW1lbnQKICBtYWtlRWFnbGVFbGVtZW50ID0gKG93bmVyLCByZWYsIHJhdykgPT4AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					2,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/debugger-server.js",
						"symkeys":
						[
							[
								1513,
								1550
							],
							[
								1626,
								1631
							],
							[
								1754,
								1771
							],
							[
								2167,
								2205
							],
							[
								2437,
								2458
							],
							[
								2658,
								2688
							],
							[
								4247,
								4251
							],
							[
								4270,
								4298
							],
							[
								4310,
								4324
							],
							[
								4647,
								4661
							],
							[
								5143,
								5147
							],
							[
								5207,
								5211
							],
							[
								5439,
								5446
							],
							[
								5488,
								5505
							],
							[
								5745,
								5792
							],
							[
								6279,
								6342
							],
							[
								6852,
								6875
							],
							[
								7815,
								7834
							],
							[
								8000,
								8047
							],
							[
								8094,
								8105
							],
							[
								8697,
								8715
							],
							[
								8816,
								8833
							],
							[
								9007,
								9011
							],
							[
								9086,
								9123
							],
							[
								9282,
								9286
							],
							[
								9626,
								9658
							],
							[
								9827,
								9851
							],
							[
								9865,
								9891
							],
							[
								10198,
								10202
							],
							[
								10322,
								10345
							],
							[
								10401,
								10419
							],
							[
								10596,
								10611
							],
							[
								11054,
								11069
							],
							[
								11453,
								11482
							],
							[
								11572,
								11585
							],
							[
								12304,
								12314
							],
							[
								12457,
								12475
							],
							[
								12956,
								12974
							],
							[
								12975,
								12982
							],
							[
								13015,
								13070
							],
							[
								13370,
								13381
							],
							[
								13515,
								13544
							],
							[
								13762,
								13788
							],
							[
								13799,
								13813
							],
							[
								14033,
								14048
							],
							[
								14078,
								14097
							],
							[
								14126,
								14148
							],
							[
								14462,
								14472
							],
							[
								14680,
								14694
							],
							[
								14748,
								14762
							],
							[
								15780,
								15823
							],
							[
								16009,
								16015
							],
							[
								16028,
								16044
							],
							[
								17618,
								17654
							],
							[
								17842,
								17877
							],
							[
								18017,
								18021
							],
							[
								18148,
								18166
							],
							[
								18320,
								18352
							],
							[
								18701,
								18712
							],
							[
								18867,
								18878
							],
							[
								18938,
								18958
							],
							[
								19547,
								19582
							],
							[
								19985,
								20004
							],
							[
								20105,
								20147
							],
							[
								20976,
								20999
							],
							[
								21037,
								21044
							],
							[
								22069,
								22074
							],
							[
								23265,
								23280
							],
							[
								23606,
								23612
							],
							[
								26778,
								26794
							],
							[
								27121,
								27127
							],
							[
								27532,
								27557
							],
							[
								27904,
								27921
							],
							[
								27973,
								27987
							],
							[
								28333,
								28343
							],
							[
								28467,
								28484
							],
							[
								28516,
								28531
							],
							[
								28574,
								28588
							],
							[
								28592,
								28607
							],
							[
								28750,
								28754
							],
							[
								28831,
								28838
							],
							[
								29264,
								29273
							],
							[
								29389,
								29395
							],
							[
								29453,
								29466
							],
							[
								29681,
								29698
							],
							[
								29851,
								29893
							],
							[
								30258,
								30289
							],
							[
								30371,
								30387
							],
							[
								30712,
								30732
							]
						],
						"symlist":
						[
							"scriptName = (arg = scriptArgs[0]) =>",
							"() =>",
							"signalName = n =>",
							"function checkChildExited(pid, status)",
							"function GetLoc(node)",
							"async function LoadAST(source)",
							"a =>",
							"function StartREPL(prefix = ",
							", suffix = '')",
							".show = arg =>",
							"k =>",
							"k =>",
							"item =>",
							"(acc, keys, i) =>",
							" function StartDebugger(args, connect, address)",
							" function ConnectDebugger(address, skipToMain = true, callback)",
							"async process(callback)",
							"sendMessage: msg =>",
							"function LaunchDebugger(dbg, skipToMain = true)",
							"async () =>",
							"DebuggerDispatcher",
							"async value(name)",
							"v =>",
							"async function PrintStackFrame(frame)",
							"f =>",
							"async function PrintStack(stack)",
							" (member, obj, prop) =>",
							"async breakpoints(...args)",
							"b =>",
							"async stackTrace(frame)",
							" frame =>",
							"async scopes(n)",
							"async waitRun()",
							"async variables(n, depth = 0)",
							"add = item =>",
							"toString()",
							"DebuggerDispatcher",
							" (port = 8777) =>",
							" () =>",
							"function NewDebugger(args, skipToMain = false, address)",
							"kill: () =>",
							"async function OnStopped(msg)",
							"function URLWorker(script)",
							"dataURL = s =>",
							"(push, stop) =>",
							"postMessage: msg =>",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (v, pv, o) =>",
							" function createWS(url, callbacks, listen)",
							" () =>",
							" (level, str) =>",
							" function* config(req, res)",
							" function* files(req, res)",
							"f =>",
							"onConnect(ws, req)",
							"value: function sendMessage(msg)",
							"onClose(ws)",
							"onError(ws)",
							"onRequest(req, resp)",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							" function handleCommand(ws, data)",
							"forward = (fd, name) =>",
							" buf =>",
							"() =>",
							" (dbg, sock) =>",
							"msg =>",
							"onFd(fd, rd, wr)",
							" () =>",
							" function showSessions()",
							"get connections()",
							"get socklist()",
							"get file()",
							"(file, source) =>",
							" () =>",
							" s =>",
							" () =>",
							"m =>",
							"line(i)",
							"match(re)",
							"fns =>",
							"({ name }) =>",
							"async functions()",
							"([name, loc, params, expression, path]) =>",
							"async repeat(cond, fn, ...args)",
							"cond = (r, i) =>",
							" function quit(why)"
						]
					},
					"AQAAAAAAAAAAAAAADQYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					3,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAANBgAAICBzY3JpcHROYW1lID0gKGFyZyA9IHNjcmlwdEFyZ3NbMF0pID0+CigpID0+CiAgc2lnbmFsTmFtZSA9IG4gPT4KICBjaGVja0NoaWxkRXhpdGVkKHBpZCwgc3RhdHVzKQpHZXRMb2Mobm9kZSkKTG9hZEFTVChzb3VyY2UpCiAgYSA9PgpTdGFydFJFUEwocHJlZml4ID0gCiwgc3VmZml4ID0gJycpCiAgLnNob3cgPSBhcmcgPT4KICBrID0+CiAgayA9PgogIGl0ZW0gPT4KKGFjYywga2V5cywgaSkgPT4KU3RhcnREZWJ1Z2dlcihhcmdzLCBjb25uZWN0LCBhZGRyZXNzKQpDb25uZWN0RGVidWdnZXIoYWRkcmVzcywgc2tpcFRvTWFpbiA9IHRydWUsIGNhbGxiYWNrKQogIHByb2Nlc3MoY2FsbGJhY2spCiAgc2VuZE1lc3NhZ2U6IG1zZyA9PgpMYXVuY2hEZWJ1Z2dlcihkYmcsIHNraXBUb01haW4gPSB0cnVlKQooKSA9PgpEZWJ1Z2dlckRpc3BhdGNoZXIKICB2YWx1ZShuYW1lKQogIHYgPT4KUHJpbnRTdGFja0ZyYW1lKGZyYW1lKQogIGYgPT4KUHJpbnRTdGFjayhzdGFjaykKKG1lbWJlciwgb2JqLCBwcm9wKSA9PgogIGJyZWFrcG9pbnRzKC4uLmFyZ3MpCiAgYiA9PgogIHN0YWNrVHJhY2UoZnJhbWUpCmZyYW1lID0+CiAgc2NvcGVzKG4pCiAgd2FpdFJ1bigpCiAgdmFyaWFibGVzKG4sIGRlcHRoID0gMCkKICBhZGQgPSBpdGVtID0+CiAgdG9TdHJpbmcoKQpEZWJ1Z2dlckRpc3BhdGNoZXIKKHBvcnQgPSA4Nzc3KSA9PgooKSA9PgpOZXdEZWJ1Z2dlcihhcmdzLCBza2lwVG9NYWluID0gZmFsc2UsIGFkZHJlc3MpCiAga2lsbDogKCkgPT4KT25TdG9wcGVkKG1zZykKVVJMV29ya2VyKHNjcmlwdCkKICBkYXRhVVJMID0gcyA9PgoocHVzaCwgc3RvcCkgPT4KICBwb3N0TWVzc2FnZTogbXNnID0+CiAgbWFpbiguLi5hcmdzKQooYSwgdikgPT4KKHYsIHB2LCBvKSA9PgoodiwgcHYsIG8pID0+CiAgY3JlYXRlV1ModXJsLCBjYWxsYmFja3MsIGxpc3RlbikKKCkgPT4KKGxldmVsLCBzdHIpID0+CiAgY29uZmlnKHJlcSwgcmVzKQogIGZpbGVzKHJlcSwgcmVzKQogIGYgPT4KICBvbkNvbm5lY3Qod3MsIHJlcSkKICB2YWx1ZTogZnVuY3Rpb24gc2VuZE1lc3NhZ2UobXNnKQogIG9uQ2xvc2Uod3MpCiAgb25FcnJvcih3cykKICBvblJlcXVlc3QocmVxLCByZXNwKQoobWF0Y2gsIHAxLCBwMCwgcDIsIHAzLCBvZmZzZXQpID0+CiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIGhhbmRsZUNvbW1hbmQod3MsIGRhdGEpCiAgZm9yd2FyZCA9IChmZCwgbmFtZSkgPT4KYnVmID0+CigpID0+CihkYmcsIHNvY2spID0+CiAgbXNnID0+CiAgb25GZChmZCwgcmQsIHdyKQooKSA9PgogIHNob3dTZXNzaW9ucygpCiAgZ2V0IGNvbm5lY3Rpb25zKCkKICBnZXQgc29ja2xpc3QoKQogIGdldCBmaWxlKCkKKGZpbGUsIHNvdXJjZSkgPT4KKCkgPT4KcyA9PgooKSA9PgogIG0gPT4KICBsaW5lKGkpCiAgbWF0Y2gocmUpCiAgZm5zID0+Cih7IG5hbWUgfSkgPT4KICBmdW5jdGlvbnMoKQooW25hbWUsIGxvYywgcGFyYW1zLCBleHByZXNzaW9uLCBwYXRoXSkgPT4KICByZXBlYXQoY29uZCwgZm4sIC4uLmFyZ3MpCiAgY29uZCA9IChyLCBpKSA9PgogIHF1aXQod2h5KQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					4,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/debugger-server.js",
						"symkeys":
						[
							[
								1513,
								1550
							],
							[
								1626,
								1631
							],
							[
								1754,
								1771
							],
							[
								2167,
								2205
							],
							[
								2437,
								2458
							],
							[
								2658,
								2688
							],
							[
								4247,
								4251
							],
							[
								4270,
								4298
							],
							[
								4310,
								4324
							],
							[
								4647,
								4661
							],
							[
								5143,
								5147
							],
							[
								5207,
								5211
							],
							[
								5439,
								5446
							],
							[
								5488,
								5505
							],
							[
								5745,
								5792
							],
							[
								6279,
								6342
							],
							[
								6852,
								6875
							],
							[
								7815,
								7834
							],
							[
								8000,
								8047
							],
							[
								8094,
								8105
							],
							[
								8697,
								8715
							],
							[
								8816,
								8833
							],
							[
								9007,
								9011
							],
							[
								9086,
								9123
							],
							[
								9282,
								9286
							],
							[
								9626,
								9658
							],
							[
								9827,
								9851
							],
							[
								9865,
								9891
							],
							[
								10198,
								10202
							],
							[
								10322,
								10345
							],
							[
								10401,
								10419
							],
							[
								10596,
								10611
							],
							[
								11054,
								11069
							],
							[
								11453,
								11482
							],
							[
								11572,
								11585
							],
							[
								12304,
								12314
							],
							[
								12457,
								12475
							],
							[
								12956,
								12974
							],
							[
								12975,
								12982
							],
							[
								13015,
								13070
							],
							[
								13370,
								13381
							],
							[
								13515,
								13544
							],
							[
								13762,
								13788
							],
							[
								13799,
								13813
							],
							[
								14033,
								14048
							],
							[
								14078,
								14097
							],
							[
								14126,
								14148
							],
							[
								14462,
								14472
							],
							[
								14680,
								14694
							],
							[
								14748,
								14762
							],
							[
								15780,
								15823
							],
							[
								16009,
								16015
							],
							[
								16028,
								16044
							],
							[
								17618,
								17654
							],
							[
								17842,
								17877
							],
							[
								18017,
								18021
							],
							[
								18148,
								18166
							],
							[
								18320,
								18352
							],
							[
								18701,
								18712
							],
							[
								18867,
								18878
							],
							[
								18938,
								18958
							],
							[
								19547,
								19582
							],
							[
								19985,
								20004
							],
							[
								20105,
								20147
							],
							[
								20976,
								20999
							],
							[
								21037,
								21044
							],
							[
								22069,
								22074
							],
							[
								23265,
								23280
							],
							[
								23606,
								23612
							],
							[
								26778,
								26794
							],
							[
								27121,
								27127
							],
							[
								27532,
								27557
							],
							[
								27904,
								27921
							],
							[
								27973,
								27987
							],
							[
								28333,
								28343
							],
							[
								28467,
								28484
							],
							[
								28516,
								28531
							],
							[
								28574,
								28588
							],
							[
								28592,
								28607
							],
							[
								28750,
								28754
							],
							[
								28831,
								28838
							],
							[
								29264,
								29273
							],
							[
								29389,
								29395
							],
							[
								29453,
								29466
							],
							[
								29681,
								29698
							],
							[
								29851,
								29893
							],
							[
								30258,
								30289
							],
							[
								30371,
								30387
							],
							[
								30712,
								30732
							]
						],
						"symlist":
						[
							"scriptName = (arg = scriptArgs[0]) =>",
							"() =>",
							"signalName = n =>",
							"function checkChildExited(pid, status)",
							"function GetLoc(node)",
							"async function LoadAST(source)",
							"a =>",
							"function StartREPL(prefix = ",
							", suffix = '')",
							".show = arg =>",
							"k =>",
							"k =>",
							"item =>",
							"(acc, keys, i) =>",
							" function StartDebugger(args, connect, address)",
							" function ConnectDebugger(address, skipToMain = true, callback)",
							"async process(callback)",
							"sendMessage: msg =>",
							"function LaunchDebugger(dbg, skipToMain = true)",
							"async () =>",
							"DebuggerDispatcher",
							"async value(name)",
							"v =>",
							"async function PrintStackFrame(frame)",
							"f =>",
							"async function PrintStack(stack)",
							" (member, obj, prop) =>",
							"async breakpoints(...args)",
							"b =>",
							"async stackTrace(frame)",
							" frame =>",
							"async scopes(n)",
							"async waitRun()",
							"async variables(n, depth = 0)",
							"add = item =>",
							"toString()",
							"DebuggerDispatcher",
							" (port = 8777) =>",
							" () =>",
							"function NewDebugger(args, skipToMain = false, address)",
							"kill: () =>",
							"async function OnStopped(msg)",
							"function URLWorker(script)",
							"dataURL = s =>",
							"(push, stop) =>",
							"postMessage: msg =>",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (v, pv, o) =>",
							" function createWS(url, callbacks, listen)",
							" () =>",
							" (level, str) =>",
							" function* config(req, res)",
							" function* files(req, res)",
							"f =>",
							"onConnect(ws, req)",
							"value: function sendMessage(msg)",
							"onClose(ws)",
							"onError(ws)",
							"onRequest(req, resp)",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							" function handleCommand(ws, data)",
							"forward = (fd, name) =>",
							" buf =>",
							"() =>",
							" (dbg, sock) =>",
							"msg =>",
							"onFd(fd, rd, wr)",
							" () =>",
							" function showSessions()",
							"get connections()",
							"get socklist()",
							"get file()",
							"(file, source) =>",
							" () =>",
							" s =>",
							" () =>",
							"m =>",
							"line(i)",
							"match(re)",
							"fns =>",
							"({ name }) =>",
							"async functions()",
							"([name, loc, params, expression, path]) =>",
							"async repeat(cond, fn, ...args)",
							"cond = (r, i) =>",
							" function quit(why)"
						]
					},
					"AQAAAAAAAAAAAAAADQYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					5,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/debugger-server.js",
						"symkeys":
						[
							[
								1513,
								1550
							],
							[
								1626,
								1631
							],
							[
								1754,
								1771
							],
							[
								2167,
								2205
							],
							[
								2437,
								2458
							],
							[
								2658,
								2688
							],
							[
								4247,
								4251
							],
							[
								4270,
								4298
							],
							[
								4310,
								4324
							],
							[
								4647,
								4661
							],
							[
								5143,
								5147
							],
							[
								5207,
								5211
							],
							[
								5439,
								5446
							],
							[
								5488,
								5505
							],
							[
								5745,
								5792
							],
							[
								6279,
								6342
							],
							[
								6852,
								6875
							],
							[
								7815,
								7834
							],
							[
								8000,
								8047
							],
							[
								8094,
								8105
							],
							[
								8697,
								8715
							],
							[
								8816,
								8833
							],
							[
								9007,
								9011
							],
							[
								9086,
								9123
							],
							[
								9282,
								9286
							],
							[
								9626,
								9658
							],
							[
								9827,
								9851
							],
							[
								9865,
								9891
							],
							[
								10198,
								10202
							],
							[
								10322,
								10345
							],
							[
								10401,
								10419
							],
							[
								10596,
								10611
							],
							[
								11054,
								11069
							],
							[
								11453,
								11482
							],
							[
								11572,
								11585
							],
							[
								12304,
								12314
							],
							[
								12457,
								12475
							],
							[
								12956,
								12974
							],
							[
								12975,
								12982
							],
							[
								13015,
								13070
							],
							[
								13370,
								13381
							],
							[
								13515,
								13544
							],
							[
								13762,
								13788
							],
							[
								13799,
								13813
							],
							[
								14033,
								14048
							],
							[
								14078,
								14097
							],
							[
								14126,
								14148
							],
							[
								14462,
								14472
							],
							[
								14680,
								14694
							],
							[
								14748,
								14762
							],
							[
								15780,
								15823
							],
							[
								16009,
								16015
							],
							[
								16028,
								16044
							],
							[
								17618,
								17654
							],
							[
								17842,
								17877
							],
							[
								18017,
								18021
							],
							[
								18148,
								18166
							],
							[
								18320,
								18352
							],
							[
								18701,
								18712
							],
							[
								18867,
								18878
							],
							[
								18938,
								18958
							],
							[
								19547,
								19582
							],
							[
								19985,
								20004
							],
							[
								20105,
								20147
							],
							[
								20976,
								20999
							],
							[
								21037,
								21044
							],
							[
								22069,
								22074
							],
							[
								23265,
								23280
							],
							[
								23606,
								23612
							],
							[
								26778,
								26794
							],
							[
								27123,
								27129
							],
							[
								27534,
								27559
							],
							[
								27906,
								27923
							],
							[
								27975,
								27989
							],
							[
								28335,
								28345
							],
							[
								28469,
								28486
							],
							[
								28518,
								28533
							],
							[
								28576,
								28590
							],
							[
								28594,
								28609
							],
							[
								28752,
								28756
							],
							[
								28833,
								28840
							],
							[
								29266,
								29275
							],
							[
								29391,
								29397
							],
							[
								29455,
								29468
							],
							[
								29683,
								29700
							],
							[
								29853,
								29895
							],
							[
								30260,
								30291
							],
							[
								30373,
								30389
							],
							[
								30714,
								30734
							]
						],
						"symlist":
						[
							"scriptName = (arg = scriptArgs[0]) =>",
							"() =>",
							"signalName = n =>",
							"function checkChildExited(pid, status)",
							"function GetLoc(node)",
							"async function LoadAST(source)",
							"a =>",
							"function StartREPL(prefix = ",
							", suffix = '')",
							".show = arg =>",
							"k =>",
							"k =>",
							"item =>",
							"(acc, keys, i) =>",
							" function StartDebugger(args, connect, address)",
							" function ConnectDebugger(address, skipToMain = true, callback)",
							"async process(callback)",
							"sendMessage: msg =>",
							"function LaunchDebugger(dbg, skipToMain = true)",
							"async () =>",
							"DebuggerDispatcher",
							"async value(name)",
							"v =>",
							"async function PrintStackFrame(frame)",
							"f =>",
							"async function PrintStack(stack)",
							" (member, obj, prop) =>",
							"async breakpoints(...args)",
							"b =>",
							"async stackTrace(frame)",
							" frame =>",
							"async scopes(n)",
							"async waitRun()",
							"async variables(n, depth = 0)",
							"add = item =>",
							"toString()",
							"DebuggerDispatcher",
							" (port = 8777) =>",
							" () =>",
							"function NewDebugger(args, skipToMain = false, address)",
							"kill: () =>",
							"async function OnStopped(msg)",
							"function URLWorker(script)",
							"dataURL = s =>",
							"(push, stop) =>",
							"postMessage: msg =>",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (v, pv, o) =>",
							" function createWS(url, callbacks, listen)",
							" () =>",
							" (level, str) =>",
							" function* config(req, res)",
							" function* files(req, res)",
							"f =>",
							"onConnect(ws, req)",
							"value: function sendMessage(msg)",
							"onClose(ws)",
							"onError(ws)",
							"onRequest(req, resp)",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							" function handleCommand(ws, data)",
							"forward = (fd, name) =>",
							" buf =>",
							"() =>",
							" (dbg, sock) =>",
							"msg =>",
							"onFd(fd, rd, wr)",
							" () =>",
							" function showSessions()",
							"get connections()",
							"get socklist()",
							"get file()",
							"(file, source) =>",
							" () =>",
							" s =>",
							" () =>",
							"m =>",
							"line(i)",
							"match(re)",
							"fns =>",
							"({ name }) =>",
							"async functions()",
							"([name, loc, params, expression, path]) =>",
							"async repeat(cond, fn, ...args)",
							"cond = (r, i) =>",
							" function quit(why)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAANBgAAICBzY3JpcHROYW1lID0gKGFyZyA9IHNjcmlwdEFyZ3NbMF0pID0+CigpID0+CiAgc2lnbmFsTmFtZSA9IG4gPT4KICBjaGVja0NoaWxkRXhpdGVkKHBpZCwgc3RhdHVzKQpHZXRMb2Mobm9kZSkKTG9hZEFTVChzb3VyY2UpCiAgYSA9PgpTdGFydFJFUEwocHJlZml4ID0gCiwgc3VmZml4ID0gJycpCiAgLnNob3cgPSBhcmcgPT4KICBrID0+CiAgayA9PgogIGl0ZW0gPT4KKGFjYywga2V5cywgaSkgPT4KU3RhcnREZWJ1Z2dlcihhcmdzLCBjb25uZWN0LCBhZGRyZXNzKQpDb25uZWN0RGVidWdnZXIoYWRkcmVzcywgc2tpcFRvTWFpbiA9IHRydWUsIGNhbGxiYWNrKQogIHByb2Nlc3MoY2FsbGJhY2spCiAgc2VuZE1lc3NhZ2U6IG1zZyA9PgpMYXVuY2hEZWJ1Z2dlcihkYmcsIHNraXBUb01haW4gPSB0cnVlKQooKSA9PgpEZWJ1Z2dlckRpc3BhdGNoZXIKICB2YWx1ZShuYW1lKQogIHYgPT4KUHJpbnRTdGFja0ZyYW1lKGZyYW1lKQogIGYgPT4KUHJpbnRTdGFjayhzdGFjaykKKG1lbWJlciwgb2JqLCBwcm9wKSA9PgogIGJyZWFrcG9pbnRzKC4uLmFyZ3MpCiAgYiA9PgogIHN0YWNrVHJhY2UoZnJhbWUpCmZyYW1lID0+CiAgc2NvcGVzKG4pCiAgd2FpdFJ1bigpCiAgdmFyaWFibGVzKG4sIGRlcHRoID0gMCkKICBhZGQgPSBpdGVtID0+CiAgdG9TdHJpbmcoKQpEZWJ1Z2dlckRpc3BhdGNoZXIKKHBvcnQgPSA4Nzc3KSA9PgooKSA9PgpOZXdEZWJ1Z2dlcihhcmdzLCBza2lwVG9NYWluID0gZmFsc2UsIGFkZHJlc3MpCiAga2lsbDogKCkgPT4KT25TdG9wcGVkKG1zZykKVVJMV29ya2VyKHNjcmlwdCkKICBkYXRhVVJMID0gcyA9PgoocHVzaCwgc3RvcCkgPT4KICBwb3N0TWVzc2FnZTogbXNnID0+CiAgbWFpbiguLi5hcmdzKQooYSwgdikgPT4KKHYsIHB2LCBvKSA9PgoodiwgcHYsIG8pID0+CiAgY3JlYXRlV1ModXJsLCBjYWxsYmFja3MsIGxpc3RlbikKKCkgPT4KKGxldmVsLCBzdHIpID0+CiAgY29uZmlnKHJlcSwgcmVzKQogIGZpbGVzKHJlcSwgcmVzKQogIGYgPT4KICBvbkNvbm5lY3Qod3MsIHJlcSkKICB2YWx1ZTogZnVuY3Rpb24gc2VuZE1lc3NhZ2UobXNnKQogIG9uQ2xvc2Uod3MpCiAgb25FcnJvcih3cykKICBvblJlcXVlc3QocmVxLCByZXNwKQoobWF0Y2gsIHAxLCBwMCwgcDIsIHAzLCBvZmZzZXQpID0+CiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIGhhbmRsZUNvbW1hbmQod3MsIGRhdGEpCiAgZm9yd2FyZCA9IChmZCwgbmFtZSkgPT4KYnVmID0+CigpID0+CihkYmcsIHNvY2spID0+CiAgbXNnID0+CiAgb25GZChmZCwgcmQsIHdyKQooKSA9PgogIHNob3dTZXNzaW9ucygpCiAgZ2V0IGNvbm5lY3Rpb25zKCkKICBnZXQgc29ja2xpc3QoKQogIGdldCBmaWxlKCkKKGZpbGUsIHNvdXJjZSkgPT4KKCkgPT4KcyA9PgooKSA9PgogIG0gPT4KICBsaW5lKGkpCiAgbWF0Y2gocmUpCiAgZm5zID0+Cih7IG5hbWUgfSkgPT4KICBmdW5jdGlvbnMoKQooW25hbWUsIGxvYywgcGFyYW1zLCBleHByZXNzaW9uLCBwYXRoXSkgPT4KICByZXBlYXQoY29uZCwgZm4sIC4uLmFyZ3MpCiAgY29uZCA9IChyLCBpKSA9PgogIHF1aXQod2h5KQAAAAAAAAAADQYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					6,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAANBgAAICBzY3JpcHROYW1lID0gKGFyZyA9IHNjcmlwdEFyZ3NbMF0pID0+CigpID0+CiAgc2lnbmFsTmFtZSA9IG4gPT4KICBjaGVja0NoaWxkRXhpdGVkKHBpZCwgc3RhdHVzKQpHZXRMb2Mobm9kZSkKTG9hZEFTVChzb3VyY2UpCiAgYSA9PgpTdGFydFJFUEwocHJlZml4ID0gCiwgc3VmZml4ID0gJycpCiAgLnNob3cgPSBhcmcgPT4KICBrID0+CiAgayA9PgogIGl0ZW0gPT4KKGFjYywga2V5cywgaSkgPT4KU3RhcnREZWJ1Z2dlcihhcmdzLCBjb25uZWN0LCBhZGRyZXNzKQpDb25uZWN0RGVidWdnZXIoYWRkcmVzcywgc2tpcFRvTWFpbiA9IHRydWUsIGNhbGxiYWNrKQogIHByb2Nlc3MoY2FsbGJhY2spCiAgc2VuZE1lc3NhZ2U6IG1zZyA9PgpMYXVuY2hEZWJ1Z2dlcihkYmcsIHNraXBUb01haW4gPSB0cnVlKQooKSA9PgpEZWJ1Z2dlckRpc3BhdGNoZXIKICB2YWx1ZShuYW1lKQogIHYgPT4KUHJpbnRTdGFja0ZyYW1lKGZyYW1lKQogIGYgPT4KUHJpbnRTdGFjayhzdGFjaykKKG1lbWJlciwgb2JqLCBwcm9wKSA9PgogIGJyZWFrcG9pbnRzKC4uLmFyZ3MpCiAgYiA9PgogIHN0YWNrVHJhY2UoZnJhbWUpCmZyYW1lID0+CiAgc2NvcGVzKG4pCiAgd2FpdFJ1bigpCiAgdmFyaWFibGVzKG4sIGRlcHRoID0gMCkKICBhZGQgPSBpdGVtID0+CiAgdG9TdHJpbmcoKQpEZWJ1Z2dlckRpc3BhdGNoZXIKKHBvcnQgPSA4Nzc3KSA9PgooKSA9PgpOZXdEZWJ1Z2dlcihhcmdzLCBza2lwVG9NYWluID0gZmFsc2UsIGFkZHJlc3MpCiAga2lsbDogKCkgPT4KT25TdG9wcGVkKG1zZykKVVJMV29ya2VyKHNjcmlwdCkKICBkYXRhVVJMID0gcyA9PgoocHVzaCwgc3RvcCkgPT4KICBwb3N0TWVzc2FnZTogbXNnID0+CiAgbWFpbiguLi5hcmdzKQooYSwgdikgPT4KKHYsIHB2LCBvKSA9PgoodiwgcHYsIG8pID0+CiAgY3JlYXRlV1ModXJsLCBjYWxsYmFja3MsIGxpc3RlbikKKCkgPT4KKGxldmVsLCBzdHIpID0+CiAgY29uZmlnKHJlcSwgcmVzKQogIGZpbGVzKHJlcSwgcmVzKQogIGYgPT4KICBvbkNvbm5lY3Qod3MsIHJlcSkKICB2YWx1ZTogZnVuY3Rpb24gc2VuZE1lc3NhZ2UobXNnKQogIG9uQ2xvc2Uod3MpCiAgb25FcnJvcih3cykKICBvblJlcXVlc3QocmVxLCByZXNwKQoobWF0Y2gsIHAxLCBwMCwgcDIsIHAzLCBvZmZzZXQpID0+CiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIGhhbmRsZUNvbW1hbmQod3MsIGRhdGEpCiAgZm9yd2FyZCA9IChmZCwgbmFtZSkgPT4KYnVmID0+CigpID0+CihkYmcsIHNvY2spID0+CiAgbXNnID0+CiAgb25GZChmZCwgcmQsIHdyKQooKSA9PgogIHNob3dTZXNzaW9ucygpCiAgZ2V0IGNvbm5lY3Rpb25zKCkKICBnZXQgc29ja2xpc3QoKQogIGdldCBmaWxlKCkKKGZpbGUsIHNvdXJjZSkgPT4KKCkgPT4KcyA9PgooKSA9PgogIG0gPT4KICBsaW5lKGkpCiAgbWF0Y2gocmUpCiAgZm5zID0+Cih7IG5hbWUgfSkgPT4KICBmdW5jdGlvbnMoKQooW25hbWUsIGxvYywgcGFyYW1zLCBleHByZXNzaW9uLCBwYXRoXSkgPT4KICByZXBlYXQoY29uZCwgZm4sIC4uLmFyZ3MpCiAgY29uZCA9IChyLCBpKSA9PgogIHF1aXQod2h5KQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					7,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/debugger.html",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					8,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					9,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/debugger-client.js",
						"symkeys":
						[
							[
								2710,
								2719
							],
							[
								2788,
								2795
							],
							[
								2860,
								2867
							],
							[
								3153,
								3158
							],
							[
								3349,
								3360
							],
							[
								3496,
								3501
							],
							[
								3945,
								3997
							],
							[
								4439,
								4475
							],
							[
								4564,
								4580
							],
							[
								4738,
								4750
							],
							[
								5041,
								5059
							],
							[
								5126,
								5147
							],
							[
								5422,
								5430
							],
							[
								5996,
								6031
							],
							[
								6137,
								6166
							],
							[
								6222,
								6247
							],
							[
								6298,
								6356
							],
							[
								7140,
								7176
							],
							[
								7314,
								7337
							],
							[
								7800,
								7811
							],
							[
								8452,
								8489
							],
							[
								8598,
								8606
							],
							[
								8705,
								8713
							],
							[
								10204,
								10227
							],
							[
								10414,
								10442
							],
							[
								10763,
								10793
							],
							[
								10863,
								10894
							],
							[
								11200,
								11223
							],
							[
								11286,
								11310
							],
							[
								11374,
								11395
							],
							[
								11456,
								11481
							],
							[
								11521,
								11543
							],
							[
								11605,
								11640
							],
							[
								11696,
								11723
							],
							[
								12022,
								12062
							],
							[
								12195,
								12215
							],
							[
								12510,
								12529
							]
						],
						"symlist":
						[
							"source =>",
							"line =>",
							"line =>",
							" e =>",
							"async () =>",
							" e =>",
							"SourceLine = ({ lineno, text, active, children }) =>",
							"SourceText = ({ text, filename }) =>",
							"numDigits = n =>",
							"(line, i) =>",
							"([type, token]) =>",
							"SourceFile = props =>",
							" resp =>",
							"async function LoadSource(filename)",
							"function Start(args, address)",
							"function Connect(address)",
							"function Initiate(command, address, connect = false, args)",
							"function* TokenizeJS(data, filename)",
							" (acc, [type, c]) =>",
							"(acc, l) =>",
							"async function CreateSocket(endpoint)",
							"onOpen()",
							"get ws()",
							"async process(callback)",
							".sendMessage = function(msg)",
							"function GetVariables(ref = 0)",
							"async function UpdatePosition()",
							"async function StepIn()",
							"async function StepOut()",
							"async function Next()",
							"async function Continue()",
							"async function Pause()",
							"async function Evaluate(expression)",
							"async function StackTrace()",
							"function SendRequest(command, args = {})",
							"(resolve, reject) =>",
							"function RenderUI()"
						]
					},
					"AQAAAAAAAAAAAAAAmAIAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					10,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACYAgAAICBzb3VyY2UgPT4KICBsaW5lID0+CiAgbGluZSA9PgplID0+CigpID0+CmUgPT4KU291cmNlTGluZSA9ICh7IGxpbmVubywgdGV4dCwgYWN0aXZlLCBjaGlsZHJlbiB9KSA9PgpTb3VyY2VUZXh0ID0gKHsgdGV4dCwgZmlsZW5hbWUgfSkgPT4KICBudW1EaWdpdHMgPSBuID0+CihsaW5lLCBpKSA9PgooW3R5cGUsIHRva2VuXSkgPT4KU291cmNlRmlsZSA9IHByb3BzID0+CnJlc3AgPT4KTG9hZFNvdXJjZShmaWxlbmFtZSkKU3RhcnQoYXJncywgYWRkcmVzcykKQ29ubmVjdChhZGRyZXNzKQpJbml0aWF0ZShjb21tYW5kLCBhZGRyZXNzLCBjb25uZWN0ID0gZmFsc2UsIGFyZ3MpClRva2VuaXplSlMoZGF0YSwgZmlsZW5hbWUpCihhY2MsIFt0eXBlLCBjXSkgPT4KKGFjYywgbCkgPT4KQ3JlYXRlU29ja2V0KGVuZHBvaW50KQogIG9uT3BlbigpCiAgZ2V0IHdzKCkKICBwcm9jZXNzKGNhbGxiYWNrKQogIC5zZW5kTWVzc2FnZSA9IGZ1bmN0aW9uKG1zZykKR2V0VmFyaWFibGVzKHJlZiA9IDApClVwZGF0ZVBvc2l0aW9uKCkKU3RlcEluKCkKU3RlcE91dCgpCk5leHQoKQpDb250aW51ZSgpClBhdXNlKCkKRXZhbHVhdGUoZXhwcmVzc2lvbikKU3RhY2tUcmFjZSgpClNlbmRSZXF1ZXN0KGNvbW1hbmQsIGFyZ3MgPSB7fSkKKHJlc29sdmUsIHJlamVjdCkgPT4KUmVuZGVyVUkoKQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					11,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/debugger.js",
						"symkeys":
						[
							[
								595,
								601
							],
							[
								619,
								652
							],
							[
								1310,
								1319
							],
							[
								1575,
								1616
							],
							[
								2272,
								2281
							],
							[
								3463,
								3481
							],
							[
								3565,
								3571
							],
							[
								3606,
								3630
							],
							[
								3676,
								3693
							],
							[
								3797,
								3803
							],
							[
								4961,
								4965
							],
							[
								5334,
								5353
							],
							[
								5512,
								5520
							],
							[
								5566,
								5573
							],
							[
								5597,
								5606
							],
							[
								5653,
								5660
							],
							[
								5684,
								5690
							],
							[
								5734,
								5741
							],
							[
								5765,
								5775
							],
							[
								5823,
								5830
							],
							[
								5855,
								5870
							],
							[
								6191,
								6198
							],
							[
								6246,
								6285
							],
							[
								6370,
								6400
							],
							[
								6514,
								6518
							],
							[
								6726,
								6761
							],
							[
								6850,
								6899
							],
							[
								7145,
								7166
							],
							[
								7241,
								7259
							],
							[
								7344,
								7359
							],
							[
								7430,
								7440
							],
							[
								7461,
								7468
							],
							[
								7507,
								7538
							],
							[
								7688,
								7714
							],
							[
								7754,
								7766
							],
							[
								7884,
								7902
							],
							[
								7985,
								8003
							],
							[
								9534,
								9563
							],
							[
								9902,
								9935
							],
							[
								10006,
								10010
							],
							[
								10012,
								10016
							],
							[
								10139,
								10145
							],
							[
								10147,
								10151
							],
							[
								10251,
								10255
							],
							[
								10257,
								10261
							],
							[
								10312,
								10316
							],
							[
								10351,
								10355
							],
							[
								10746,
								10775
							],
							[
								10857,
								10862
							]
						],
						"symlist":
						[
							" c =>",
							" function TrivialTokenizer(input)",
							"(m, i) =>",
							" function TrivialSyntaxHighlighter(input)",
							"(m, i) =>",
							"DebuggerDispatcher",
							" () =>",
							" ({ errno, message }) =>",
							"constructor(conn)",
							"msg =>",
							"r =>",
							"sendMessage: msg =>",
							"stepIn()",
							"resp =>",
							"stepOut()",
							"resp =>",
							"next()",
							"resp =>",
							"continue()",
							"resp =>",
							"async waitRun()",
							"pause()",
							"stopOnException(stopOnException = true)",
							"breakpoints(path, breakpoints)",
							"n =>",
							"async evaluate(frameId, expression)",
							"async variables(variablesReference, options = {})",
							"async scopes(frameId)",
							"async stackTrace()",
							"waitEvent(name)",
							"resolve =>",
							" arg =>",
							"sendRequest(command, args = {})",
							" (resolve, reject) =>",
							" response =>",
							"DebuggerDispatcher",
							"DebuggerDispatcher",
							" function* GetArguments(node)",
							" function GetFunctionName(ast, p)",
							"p =>",
							"n =>",
							"ptr =>",
							"n =>",
							"p =>",
							"n =>",
							"s =>",
							"s =>",
							" function* FindFunctions(ast)",
							" v =>"
						]
					},
					"AQAAAAAAAAAAAAAA8wIAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					12,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADzAgAAYyA9PgpUcml2aWFsVG9rZW5pemVyKGlucHV0KQoobSwgaSkgPT4KVHJpdmlhbFN5bnRheEhpZ2hsaWdodGVyKGlucHV0KQoobSwgaSkgPT4KRGVidWdnZXJEaXNwYXRjaGVyCigpID0+Cih7IGVycm5vLCBtZXNzYWdlIH0pID0+CiAgY29uc3RydWN0b3IoY29ubikKICBtc2cgPT4KICByID0+CiAgc2VuZE1lc3NhZ2U6IG1zZyA9PgogIHN0ZXBJbigpCiAgcmVzcCA9PgogIHN0ZXBPdXQoKQogIHJlc3AgPT4KICBuZXh0KCkKICByZXNwID0+CiAgY29udGludWUoKQogIHJlc3AgPT4KICB3YWl0UnVuKCkKICBwYXVzZSgpCiAgc3RvcE9uRXhjZXB0aW9uKHN0b3BPbkV4Y2VwdGlvbiA9IHRydWUpCiAgYnJlYWtwb2ludHMocGF0aCwgYnJlYWtwb2ludHMpCiAgbiA9PgogIGV2YWx1YXRlKGZyYW1lSWQsIGV4cHJlc3Npb24pCiAgdmFyaWFibGVzKHZhcmlhYmxlc1JlZmVyZW5jZSwgb3B0aW9ucyA9IHt9KQogIHNjb3BlcyhmcmFtZUlkKQogIHN0YWNrVHJhY2UoKQogIHdhaXRFdmVudChuYW1lKQogIHJlc29sdmUgPT4KYXJnID0+CiAgc2VuZFJlcXVlc3QoY29tbWFuZCwgYXJncyA9IHt9KQoocmVzb2x2ZSwgcmVqZWN0KSA9PgpyZXNwb25zZSA9PgpEZWJ1Z2dlckRpc3BhdGNoZXIKRGVidWdnZXJEaXNwYXRjaGVyCkdldEFyZ3VtZW50cyhub2RlKQpHZXRGdW5jdGlvbk5hbWUoYXN0LCBwKQogIHAgPT4KICBuID0+CiAgcHRyID0+CiAgbiA9PgogIHAgPT4KICBuID0+CiAgcyA9PgogIHMgPT4KRmluZEZ1bmN0aW9ucyhhc3QpCnYgPT4AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					13,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					14,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					15,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/debugger.js",
						"symkeys":
						[
							[
								564,
								570
							],
							[
								588,
								621
							],
							[
								1279,
								1288
							],
							[
								1544,
								1585
							],
							[
								2241,
								2250
							],
							[
								3432,
								3450
							],
							[
								3534,
								3540
							],
							[
								3575,
								3599
							],
							[
								3645,
								3662
							],
							[
								3766,
								3772
							],
							[
								4930,
								4934
							],
							[
								5303,
								5322
							],
							[
								5481,
								5489
							],
							[
								5535,
								5542
							],
							[
								5566,
								5575
							],
							[
								5622,
								5629
							],
							[
								5653,
								5659
							],
							[
								5703,
								5710
							],
							[
								5734,
								5744
							],
							[
								5792,
								5799
							],
							[
								5824,
								5839
							],
							[
								6160,
								6167
							],
							[
								6215,
								6254
							],
							[
								6339,
								6369
							],
							[
								6483,
								6487
							],
							[
								6695,
								6730
							],
							[
								6819,
								6868
							],
							[
								7114,
								7135
							],
							[
								7210,
								7228
							],
							[
								7313,
								7328
							],
							[
								7399,
								7409
							],
							[
								7430,
								7437
							],
							[
								7476,
								7507
							],
							[
								7657,
								7683
							],
							[
								7723,
								7735
							],
							[
								7853,
								7871
							],
							[
								7954,
								7972
							],
							[
								9503,
								9532
							],
							[
								9871,
								9904
							],
							[
								9975,
								9979
							],
							[
								9981,
								9985
							],
							[
								10108,
								10114
							],
							[
								10116,
								10120
							],
							[
								10220,
								10224
							],
							[
								10226,
								10230
							],
							[
								10281,
								10285
							],
							[
								10320,
								10324
							],
							[
								10715,
								10744
							],
							[
								10826,
								10831
							]
						],
						"symlist":
						[
							" c =>",
							" function TrivialTokenizer(input)",
							"(m, i) =>",
							" function TrivialSyntaxHighlighter(input)",
							"(m, i) =>",
							"DebuggerDispatcher",
							" () =>",
							" ({ errno, message }) =>",
							"constructor(conn)",
							"msg =>",
							"r =>",
							"sendMessage: msg =>",
							"stepIn()",
							"resp =>",
							"stepOut()",
							"resp =>",
							"next()",
							"resp =>",
							"continue()",
							"resp =>",
							"async waitRun()",
							"pause()",
							"stopOnException(stopOnException = true)",
							"breakpoints(path, breakpoints)",
							"n =>",
							"async evaluate(frameId, expression)",
							"async variables(variablesReference, options = {})",
							"async scopes(frameId)",
							"async stackTrace()",
							"waitEvent(name)",
							"resolve =>",
							" arg =>",
							"sendRequest(command, args = {})",
							" (resolve, reject) =>",
							" response =>",
							"DebuggerDispatcher",
							"DebuggerDispatcher",
							" function* GetArguments(node)",
							" function GetFunctionName(ast, p)",
							"p =>",
							"n =>",
							"ptr =>",
							"n =>",
							"p =>",
							"n =>",
							"s =>",
							"s =>",
							" function* FindFunctions(ast)",
							" v =>"
						]
					},
					"AQAAAAAAAAAAAAAA8wIAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					16,
					4,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/debugger.js",
						"symkeys":
						[
							[
								601,
								607
							],
							[
								625,
								658
							],
							[
								1316,
								1325
							],
							[
								1581,
								1622
							],
							[
								2278,
								2287
							],
							[
								3469,
								3487
							],
							[
								3571,
								3577
							],
							[
								3612,
								3636
							],
							[
								3682,
								3699
							],
							[
								3803,
								3809
							],
							[
								4967,
								4971
							],
							[
								5340,
								5359
							],
							[
								5518,
								5526
							],
							[
								5572,
								5579
							],
							[
								5603,
								5612
							],
							[
								5659,
								5666
							],
							[
								5690,
								5696
							],
							[
								5740,
								5747
							],
							[
								5771,
								5781
							],
							[
								5829,
								5836
							],
							[
								5861,
								5876
							],
							[
								6197,
								6204
							],
							[
								6252,
								6291
							],
							[
								6376,
								6406
							],
							[
								6520,
								6524
							],
							[
								6732,
								6767
							],
							[
								6856,
								6905
							],
							[
								7151,
								7172
							],
							[
								7247,
								7265
							],
							[
								7350,
								7365
							],
							[
								7436,
								7446
							],
							[
								7467,
								7474
							],
							[
								7513,
								7544
							],
							[
								7694,
								7720
							],
							[
								7760,
								7772
							],
							[
								7890,
								7908
							],
							[
								7991,
								8009
							],
							[
								9540,
								9569
							],
							[
								9908,
								9941
							],
							[
								10012,
								10016
							],
							[
								10018,
								10022
							],
							[
								10145,
								10151
							],
							[
								10153,
								10157
							],
							[
								10257,
								10261
							],
							[
								10263,
								10267
							],
							[
								10318,
								10322
							],
							[
								10357,
								10361
							],
							[
								10752,
								10781
							],
							[
								10863,
								10868
							]
						],
						"symlist":
						[
							" c =>",
							" function TrivialTokenizer(input)",
							"(m, i) =>",
							" function TrivialSyntaxHighlighter(input)",
							"(m, i) =>",
							"DebuggerDispatcher",
							" () =>",
							" ({ errno, message }) =>",
							"constructor(conn)",
							"msg =>",
							"r =>",
							"sendMessage: msg =>",
							"stepIn()",
							"resp =>",
							"stepOut()",
							"resp =>",
							"next()",
							"resp =>",
							"continue()",
							"resp =>",
							"async waitRun()",
							"pause()",
							"stopOnException(stopOnException = true)",
							"breakpoints(path, breakpoints)",
							"n =>",
							"async evaluate(frameId, expression)",
							"async variables(variablesReference, options = {})",
							"async scopes(frameId)",
							"async stackTrace()",
							"waitEvent(name)",
							"resolve =>",
							" arg =>",
							"sendRequest(command, args = {})",
							" (resolve, reject) =>",
							" response =>",
							"DebuggerDispatcher",
							"DebuggerDispatcher",
							" function* GetArguments(node)",
							" function GetFunctionName(ast, p)",
							"p =>",
							"n =>",
							"ptr =>",
							"n =>",
							"p =>",
							"n =>",
							"s =>",
							"s =>",
							" function* FindFunctions(ast)",
							" v =>"
						]
					},
					"CAAAAAAAAAAAAAAAAAAAAAAAAADzAgAAYyA9PgpUcml2aWFsVG9rZW5pemVyKGlucHV0KQoobSwgaSkgPT4KVHJpdmlhbFN5bnRheEhpZ2hsaWdodGVyKGlucHV0KQoobSwgaSkgPT4KRGVidWdnZXJEaXNwYXRjaGVyCigpID0+Cih7IGVycm5vLCBtZXNzYWdlIH0pID0+CiAgY29uc3RydWN0b3IoY29ubikKICBtc2cgPT4KICByID0+CiAgc2VuZE1lc3NhZ2U6IG1zZyA9PgogIHN0ZXBJbigpCiAgcmVzcCA9PgogIHN0ZXBPdXQoKQogIHJlc3AgPT4KICBuZXh0KCkKICByZXNwID0+CiAgY29udGludWUoKQogIHJlc3AgPT4KICB3YWl0UnVuKCkKICBwYXVzZSgpCiAgc3RvcE9uRXhjZXB0aW9uKHN0b3BPbkV4Y2VwdGlvbiA9IHRydWUpCiAgYnJlYWtwb2ludHMocGF0aCwgYnJlYWtwb2ludHMpCiAgbiA9PgogIGV2YWx1YXRlKGZyYW1lSWQsIGV4cHJlc3Npb24pCiAgdmFyaWFibGVzKHZhcmlhYmxlc1JlZmVyZW5jZSwgb3B0aW9ucyA9IHt9KQogIHNjb3BlcyhmcmFtZUlkKQogIHN0YWNrVHJhY2UoKQogIHdhaXRFdmVudChuYW1lKQogIHJlc29sdmUgPT4KYXJnID0+CiAgc2VuZFJlcXVlc3QoY29tbWFuZCwgYXJncyA9IHt9KQoocmVzb2x2ZSwgcmVqZWN0KSA9PgpyZXNwb25zZSA9PgpEZWJ1Z2dlckRpc3BhdGNoZXIKRGVidWdnZXJEaXNwYXRjaGVyCkdldEFyZ3VtZW50cyhub2RlKQpHZXRGdW5jdGlvbk5hbWUoYXN0LCBwKQogIHAgPT4KICBuID0+CiAgcHRyID0+CiAgbiA9PgogIHAgPT4KICBuID0+CiAgcyA9PgogIHMgPT4KRmluZEZ1bmN0aW9ucyhhc3QpCnYgPT4AAAAAAAAAAPMCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADzAgAAYyA9PgpUcml2aWFsVG9rZW5pemVyKGlucHV0KQoobSwgaSkgPT4KVHJpdmlhbFN5bnRheEhpZ2hsaWdodGVyKGlucHV0KQoobSwgaSkgPT4KRGVidWdnZXJEaXNwYXRjaGVyCigpID0+Cih7IGVycm5vLCBtZXNzYWdlIH0pID0+CiAgY29uc3RydWN0b3IoY29ubikKICBtc2cgPT4KICByID0+CiAgc2VuZE1lc3NhZ2U6IG1zZyA9PgogIHN0ZXBJbigpCiAgcmVzcCA9PgogIHN0ZXBPdXQoKQogIHJlc3AgPT4KICBuZXh0KCkKICByZXNwID0+CiAgY29udGludWUoKQogIHJlc3AgPT4KICB3YWl0UnVuKCkKICBwYXVzZSgpCiAgc3RvcE9uRXhjZXB0aW9uKHN0b3BPbkV4Y2VwdGlvbiA9IHRydWUpCiAgYnJlYWtwb2ludHMocGF0aCwgYnJlYWtwb2ludHMpCiAgbiA9PgogIGV2YWx1YXRlKGZyYW1lSWQsIGV4cHJlc3Npb24pCiAgdmFyaWFibGVzKHZhcmlhYmxlc1JlZmVyZW5jZSwgb3B0aW9ucyA9IHt9KQogIHNjb3BlcyhmcmFtZUlkKQogIHN0YWNrVHJhY2UoKQogIHdhaXRFdmVudChuYW1lKQogIHJlc29sdmUgPT4KYXJnID0+CiAgc2VuZFJlcXVlc3QoY29tbWFuZCwgYXJncyA9IHt9KQoocmVzb2x2ZSwgcmVqZWN0KSA9PgpyZXNwb25zZSA9PgpEZWJ1Z2dlckRpc3BhdGNoZXIKRGVidWdnZXJEaXNwYXRjaGVyCkdldEFyZ3VtZW50cyhub2RlKQpHZXRGdW5jdGlvbk5hbWUoYXN0LCBwKQogIHAgPT4KICBuID0+CiAgcHRyID0+CiAgbiA9PgogIHAgPT4KICBuID0+CiAgcyA9PgogIHMgPT4KRmluZEZ1bmN0aW9ucyhhc3QpCnYgPT4AAAAAAAAAAPMCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADzAgAAYyA9PgpUcml2aWFsVG9rZW5pemVyKGlucHV0KQoobSwgaSkgPT4KVHJpdmlhbFN5bnRheEhpZ2hsaWdodGVyKGlucHV0KQoobSwgaSkgPT4KRGVidWdnZXJEaXNwYXRjaGVyCigpID0+Cih7IGVycm5vLCBtZXNzYWdlIH0pID0+CiAgY29uc3RydWN0b3IoY29ubikKICBtc2cgPT4KICByID0+CiAgc2VuZE1lc3NhZ2U6IG1zZyA9PgogIHN0ZXBJbigpCiAgcmVzcCA9PgogIHN0ZXBPdXQoKQogIHJlc3AgPT4KICBuZXh0KCkKICByZXNwID0+CiAgY29udGludWUoKQogIHJlc3AgPT4KICB3YWl0UnVuKCkKICBwYXVzZSgpCiAgc3RvcE9uRXhjZXB0aW9uKHN0b3BPbkV4Y2VwdGlvbiA9IHRydWUpCiAgYnJlYWtwb2ludHMocGF0aCwgYnJlYWtwb2ludHMpCiAgbiA9PgogIGV2YWx1YXRlKGZyYW1lSWQsIGV4cHJlc3Npb24pCiAgdmFyaWFibGVzKHZhcmlhYmxlc1JlZmVyZW5jZSwgb3B0aW9ucyA9IHt9KQogIHNjb3BlcyhmcmFtZUlkKQogIHN0YWNrVHJhY2UoKQogIHdhaXRFdmVudChuYW1lKQogIHJlc29sdmUgPT4KYXJnID0+CiAgc2VuZFJlcXVlc3QoY29tbWFuZCwgYXJncyA9IHt9KQoocmVzb2x2ZSwgcmVqZWN0KSA9PgpyZXNwb25zZSA9PgpEZWJ1Z2dlckRpc3BhdGNoZXIKRGVidWdnZXJEaXNwYXRjaGVyCkdldEFyZ3VtZW50cyhub2RlKQpHZXRGdW5jdGlvbk5hbWUoYXN0LCBwKQogIHAgPT4KICBuID0+CiAgcHRyID0+CiAgbiA9PgogIHAgPT4KICBuID0+CiAgcyA9PgogIHMgPT4KRmluZEZ1bmN0aW9ucyhhc3QpCnYgPT4AAAAAAAAAAPMCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADzAgAAYyA9PgpUcml2aWFsVG9rZW5pemVyKGlucHV0KQoobSwgaSkgPT4KVHJpdmlhbFN5bnRheEhpZ2hsaWdodGVyKGlucHV0KQoobSwgaSkgPT4KRGVidWdnZXJEaXNwYXRjaGVyCigpID0+Cih7IGVycm5vLCBtZXNzYWdlIH0pID0+CiAgY29uc3RydWN0b3IoY29ubikKICBtc2cgPT4KICByID0+CiAgc2VuZE1lc3NhZ2U6IG1zZyA9PgogIHN0ZXBJbigpCiAgcmVzcCA9PgogIHN0ZXBPdXQoKQogIHJlc3AgPT4KICBuZXh0KCkKICByZXNwID0+CiAgY29udGludWUoKQogIHJlc3AgPT4KICB3YWl0UnVuKCkKICBwYXVzZSgpCiAgc3RvcE9uRXhjZXB0aW9uKHN0b3BPbkV4Y2VwdGlvbiA9IHRydWUpCiAgYnJlYWtwb2ludHMocGF0aCwgYnJlYWtwb2ludHMpCiAgbiA9PgogIGV2YWx1YXRlKGZyYW1lSWQsIGV4cHJlc3Npb24pCiAgdmFyaWFibGVzKHZhcmlhYmxlc1JlZmVyZW5jZSwgb3B0aW9ucyA9IHt9KQogIHNjb3BlcyhmcmFtZUlkKQogIHN0YWNrVHJhY2UoKQogIHdhaXRFdmVudChuYW1lKQogIHJlc29sdmUgPT4KYXJnID0+CiAgc2VuZFJlcXVlc3QoY29tbWFuZCwgYXJncyA9IHt9KQoocmVzb2x2ZSwgcmVqZWN0KSA9PgpyZXNwb25zZSA9PgpEZWJ1Z2dlckRpc3BhdGNoZXIKRGVidWdnZXJEaXNwYXRjaGVyCkdldEFyZ3VtZW50cyhub2RlKQpHZXRGdW5jdGlvbk5hbWUoYXN0LCBwKQogIHAgPT4KICBuID0+CiAgcHRyID0+CiAgbiA9PgogIHAgPT4KICBuID0+CiAgcyA9PgogIHMgPT4KRmluZEZ1bmN0aW9ucyhhc3QpCnYgPT4AAAAAAAAAAPMCAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					17,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADzAgAAYyA9PgpUcml2aWFsVG9rZW5pemVyKGlucHV0KQoobSwgaSkgPT4KVHJpdmlhbFN5bnRheEhpZ2hsaWdodGVyKGlucHV0KQoobSwgaSkgPT4KRGVidWdnZXJEaXNwYXRjaGVyCigpID0+Cih7IGVycm5vLCBtZXNzYWdlIH0pID0+CiAgY29uc3RydWN0b3IoY29ubikKICBtc2cgPT4KICByID0+CiAgc2VuZE1lc3NhZ2U6IG1zZyA9PgogIHN0ZXBJbigpCiAgcmVzcCA9PgogIHN0ZXBPdXQoKQogIHJlc3AgPT4KICBuZXh0KCkKICByZXNwID0+CiAgY29udGludWUoKQogIHJlc3AgPT4KICB3YWl0UnVuKCkKICBwYXVzZSgpCiAgc3RvcE9uRXhjZXB0aW9uKHN0b3BPbkV4Y2VwdGlvbiA9IHRydWUpCiAgYnJlYWtwb2ludHMocGF0aCwgYnJlYWtwb2ludHMpCiAgbiA9PgogIGV2YWx1YXRlKGZyYW1lSWQsIGV4cHJlc3Npb24pCiAgdmFyaWFibGVzKHZhcmlhYmxlc1JlZmVyZW5jZSwgb3B0aW9ucyA9IHt9KQogIHNjb3BlcyhmcmFtZUlkKQogIHN0YWNrVHJhY2UoKQogIHdhaXRFdmVudChuYW1lKQogIHJlc29sdmUgPT4KYXJnID0+CiAgc2VuZFJlcXVlc3QoY29tbWFuZCwgYXJncyA9IHt9KQoocmVzb2x2ZSwgcmVqZWN0KSA9PgpyZXNwb25zZSA9PgpEZWJ1Z2dlckRpc3BhdGNoZXIKRGVidWdnZXJEaXNwYXRjaGVyCkdldEFyZ3VtZW50cyhub2RlKQpHZXRGdW5jdGlvbk5hbWUoYXN0LCBwKQogIHAgPT4KICBuID0+CiAgcHRyID0+CiAgbiA9PgogIHAgPT4KICBuID0+CiAgcyA9PgogIHMgPT4KRmluZEZ1bmN0aW9ucyhhc3QpCnYgPT4AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					18,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/map.html",
						"symkeys":
						[
							[
								712,
								721
							],
							[
								737,
								743
							],
							[
								774,
								781
							],
							[
								951,
								959
							],
							[
								1730,
								1736
							]
						],
						"symlist":
						[
							"drop-area",
							"mapdiv",
							"toolbar",
							"timeline",
							"preact"
						]
					},
					"AQAAAAAAAAAAAAAAMgAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					19,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAyAAAAICBkcm9wLWFyZWEKICBtYXBkaXYKICB0b29sYmFyCiAgdGltZWxpbmUKICBwcmVhY3QAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					20,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					21,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/ol-map.js",
						"symkeys":
						[
							[
								3208,
								3237
							],
							[
								3336,
								3377
							],
							[
								3582,
								3611
							],
							[
								3996,
								4017
							],
							[
								4085,
								4105
							],
							[
								4491,
								4495
							],
							[
								5131,
								5143
							],
							[
								5517,
								5538
							],
							[
								6229,
								6234
							],
							[
								6283,
								6293
							],
							[
								6531,
								6545
							],
							[
								7233,
								7250
							],
							[
								7335,
								7339
							],
							[
								7373,
								7377
							]
						],
						"symlist":
						[
							"function SetFenceColor(color)",
							"function FlyTo(location, done = () => {})",
							" function callback(complete)",
							"function Get(feature)",
							"function CreateMap()",
							"a =>",
							" function(e)",
							"([name, geometry]) =>",
							"get()",
							"set(value)",
							" function(evt)",
							"async response =>",
							"u =>",
							"u =>"
						]
					},
					"AQAAAAAAAAAAAAAAywAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					22,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADLAAAAU2V0RmVuY2VDb2xvcihjb2xvcikKRmx5VG8obG9jYXRpb24sIGRvbmUgPSAoKSA9PiB7fSkKICBjYWxsYmFjayhjb21wbGV0ZSkKR2V0KGZlYXR1cmUpCkNyZWF0ZU1hcCgpCiAgYSA9PgpmdW5jdGlvbihlKQooW25hbWUsIGdlb21ldHJ5XSkgPT4KICBnZXQoKQogIHNldCh2YWx1ZSkKZnVuY3Rpb24oZXZ0KQogIHJlc3BvbnNlID0+CiAgdSA9PgogIHUgPT4AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					23,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/adsb-server.js",
						"symkeys":
						[
							[
								1923,
								1960
							],
							[
								2008,
								2013
							],
							[
								2417,
								2438
							],
							[
								2602,
								2608
							],
							[
								2971,
								2976
							],
							[
								3049,
								3077
							],
							[
								3399,
								3423
							],
							[
								3582,
								3610
							],
							[
								3622,
								3636
							],
							[
								3918,
								3929
							],
							[
								3963,
								3967
							],
							[
								4041,
								4046
							],
							[
								4153,
								4158
							],
							[
								4226,
								4238
							],
							[
								4341,
								4363
							],
							[
								4698,
								4708
							],
							[
								4916,
								4930
							],
							[
								4984,
								4998
							],
							[
								6044,
								6083
							],
							[
								6250,
								6256
							],
							[
								6269,
								6285
							],
							[
								7909,
								7945
							],
							[
								8133,
								8168
							],
							[
								8308,
								8312
							],
							[
								8439,
								8457
							],
							[
								8611,
								8643
							],
							[
								8970,
								8993
							],
							[
								9117,
								9128
							],
							[
								9273,
								9284
							],
							[
								9405,
								9425
							],
							[
								9986,
								10021
							],
							[
								10530,
								10549
							],
							[
								11696,
								11703
							],
							[
								11831,
								11839
							],
							[
								12331,
								12347
							],
							[
								12752,
								12768
							],
							[
								13098,
								13104
							],
							[
								13515,
								13540
							],
							[
								13982,
								14002
							]
						],
						"symlist":
						[
							"scriptName = (arg = scriptArgs[0]) =>",
							"() =>",
							"function StartWatch()",
							" () =>",
							"ws =>",
							"function WatchFile(filename)",
							"function PeriodicCheck()",
							"function StartREPL(prefix = ",
							", suffix = '')",
							" name =>",
							"m =>",
							"() =>",
							"() =>",
							"(...args) =>",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (v, pv, o) =>",
							".createWS = (url, callbacks, listen) =>",
							" () =>",
							" (level, str) =>",
							" function* config(req, res)",
							" function* files(req, res)",
							"f =>",
							"onConnect(ws, req)",
							"value: function sendMessage(msg)",
							".sendMessage = value =>",
							"onClose(ws)",
							"onError(ws)",
							"onRequest(req, resp)",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"file =>",
							"([m]) =>",
							"([time, obj]) =>",
							"onFd(fd, rd, wr)",
							" () =>",
							" function showSessions()",
							" function quit(why)"
						]
					},
					"AQAAAAAAAAAAAAAAcQIAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					24,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABxAgAAICBzY3JpcHROYW1lID0gKGFyZyA9IHNjcmlwdEFyZ3NbMF0pID0+CigpID0+ClN0YXJ0V2F0Y2goKQooKSA9PgogIHdzID0+CldhdGNoRmlsZShmaWxlbmFtZSkKUGVyaW9kaWNDaGVjaygpClN0YXJ0UkVQTChwcmVmaXggPSAKLCBzdWZmaXggPSAnJykKbmFtZSA9PgogIG0gPT4KKCkgPT4KKCkgPT4KKC4uLmFyZ3MpID0+CiAgbWFpbiguLi5hcmdzKQooYSwgdikgPT4KKHYsIHB2LCBvKSA9PgoodiwgcHYsIG8pID0+CiAgLmNyZWF0ZVdTID0gKHVybCwgY2FsbGJhY2tzLCBsaXN0ZW4pID0+CigpID0+CihsZXZlbCwgc3RyKSA9PgogIGNvbmZpZyhyZXEsIHJlcykKICBmaWxlcyhyZXEsIHJlcykKICBmID0+CiAgb25Db25uZWN0KHdzLCByZXEpCiAgdmFsdWU6IGZ1bmN0aW9uIHNlbmRNZXNzYWdlKG1zZykKICAuc2VuZE1lc3NhZ2UgPSB2YWx1ZSA9PgogIG9uQ2xvc2Uod3MpCiAgb25FcnJvcih3cykKICBvblJlcXVlc3QocmVxLCByZXNwKQoobWF0Y2gsIHAxLCBwMCwgcDIsIHAzLCBvZmZzZXQpID0+CiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIGZpbGUgPT4KKFttXSkgPT4KKFt0aW1lLCBvYmpdKSA9PgogIG9uRmQoZmQsIHJkLCB3cikKKCkgPT4KICBzaG93U2Vzc2lvbnMoKQogIHF1aXQod2h5KQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					25,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/adsb-server.js",
						"symkeys":
						[
							[
								1923,
								1960
							],
							[
								2008,
								2013
							],
							[
								2417,
								2438
							],
							[
								2602,
								2608
							],
							[
								2971,
								2976
							],
							[
								3049,
								3077
							],
							[
								3399,
								3423
							],
							[
								3582,
								3610
							],
							[
								3622,
								3636
							],
							[
								3918,
								3929
							],
							[
								3963,
								3967
							],
							[
								4041,
								4046
							],
							[
								4153,
								4158
							],
							[
								4226,
								4238
							],
							[
								4341,
								4363
							],
							[
								4698,
								4708
							],
							[
								4916,
								4930
							],
							[
								4984,
								4998
							],
							[
								6044,
								6083
							],
							[
								6250,
								6256
							],
							[
								6269,
								6285
							],
							[
								7909,
								7945
							],
							[
								8133,
								8168
							],
							[
								8308,
								8312
							],
							[
								8439,
								8457
							],
							[
								8611,
								8643
							],
							[
								8970,
								8993
							],
							[
								9117,
								9128
							],
							[
								9273,
								9284
							],
							[
								9405,
								9425
							],
							[
								9986,
								10021
							],
							[
								10530,
								10549
							],
							[
								11696,
								11703
							],
							[
								11831,
								11839
							],
							[
								12331,
								12347
							],
							[
								12752,
								12768
							],
							[
								13098,
								13104
							],
							[
								13515,
								13540
							],
							[
								13982,
								14002
							]
						],
						"symlist":
						[
							"scriptName = (arg = scriptArgs[0]) =>",
							"() =>",
							"function StartWatch()",
							" () =>",
							"ws =>",
							"function WatchFile(filename)",
							"function PeriodicCheck()",
							"function StartREPL(prefix = ",
							", suffix = '')",
							" name =>",
							"m =>",
							"() =>",
							"() =>",
							"(...args) =>",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (v, pv, o) =>",
							".createWS = (url, callbacks, listen) =>",
							" () =>",
							" (level, str) =>",
							" function* config(req, res)",
							" function* files(req, res)",
							"f =>",
							"onConnect(ws, req)",
							"value: function sendMessage(msg)",
							".sendMessage = value =>",
							"onClose(ws)",
							"onError(ws)",
							"onRequest(req, resp)",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"file =>",
							"([m]) =>",
							"([time, obj]) =>",
							"onFd(fd, rd, wr)",
							" () =>",
							" function showSessions()",
							" function quit(why)"
						]
					},
					"AQAAAAAAAAAAAAAAcQIAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					26,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/ol-map.js",
						"symkeys":
						[
							[
								3208,
								3237
							],
							[
								3336,
								3377
							],
							[
								3582,
								3611
							],
							[
								3996,
								4017
							],
							[
								4085,
								4105
							],
							[
								4491,
								4495
							],
							[
								5131,
								5143
							],
							[
								5517,
								5538
							],
							[
								6229,
								6234
							],
							[
								6283,
								6293
							],
							[
								6531,
								6545
							],
							[
								7233,
								7250
							],
							[
								7335,
								7339
							],
							[
								7373,
								7377
							]
						],
						"symlist":
						[
							"function SetFenceColor(color)",
							"function FlyTo(location, done = () => {})",
							" function callback(complete)",
							"function Get(feature)",
							"function CreateMap()",
							"a =>",
							" function(e)",
							"([name, geometry]) =>",
							"get()",
							"set(value)",
							" function(evt)",
							"async response =>",
							"u =>",
							"u =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABxAgAAICBzY3JpcHROYW1lID0gKGFyZyA9IHNjcmlwdEFyZ3NbMF0pID0+CigpID0+ClN0YXJ0V2F0Y2goKQooKSA9PgogIHdzID0+CldhdGNoRmlsZShmaWxlbmFtZSkKUGVyaW9kaWNDaGVjaygpClN0YXJ0UkVQTChwcmVmaXggPSAKLCBzdWZmaXggPSAnJykKbmFtZSA9PgogIG0gPT4KKCkgPT4KKCkgPT4KKC4uLmFyZ3MpID0+CiAgbWFpbiguLi5hcmdzKQooYSwgdikgPT4KKHYsIHB2LCBvKSA9PgoodiwgcHYsIG8pID0+CiAgLmNyZWF0ZVdTID0gKHVybCwgY2FsbGJhY2tzLCBsaXN0ZW4pID0+CigpID0+CihsZXZlbCwgc3RyKSA9PgogIGNvbmZpZyhyZXEsIHJlcykKICBmaWxlcyhyZXEsIHJlcykKICBmID0+CiAgb25Db25uZWN0KHdzLCByZXEpCiAgdmFsdWU6IGZ1bmN0aW9uIHNlbmRNZXNzYWdlKG1zZykKICAuc2VuZE1lc3NhZ2UgPSB2YWx1ZSA9PgogIG9uQ2xvc2Uod3MpCiAgb25FcnJvcih3cykKICBvblJlcXVlc3QocmVxLCByZXNwKQoobWF0Y2gsIHAxLCBwMCwgcDIsIHAzLCBvZmZzZXQpID0+CiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIGZpbGUgPT4KKFttXSkgPT4KKFt0aW1lLCBvYmpdKSA9PgogIG9uRmQoZmQsIHJkLCB3cikKKCkgPT4KICBzaG93U2Vzc2lvbnMoKQogIHF1aXQod2h5KQAAAAAAAAAAywAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					1,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADLAAAAU2V0RmVuY2VDb2xvcihjb2xvcikKRmx5VG8obG9jYXRpb24sIGRvbmUgPSAoKSA9PiB7fSkKICBjYWxsYmFjayhjb21wbGV0ZSkKR2V0KGZlYXR1cmUpCkNyZWF0ZU1hcCgpCiAgYSA9PgpmdW5jdGlvbihlKQooW25hbWUsIGdlb21ldHJ5XSkgPT4KICBnZXQoKQogIHNldCh2YWx1ZSkKZnVuY3Rpb24oZXZ0KQogIHJlc3BvbnNlID0+CiAgdSA9PgogIHUgPT4AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADLAAAAAAAAAMsAAAAAAAAAAAAAAAAA8L8"
				],
				[
					1,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/ol-map.js",
						"symkeys":
						[
							[
								3208,
								3237
							],
							[
								3336,
								3377
							],
							[
								3582,
								3611
							],
							[
								3996,
								4017
							],
							[
								4085,
								4105
							],
							[
								4491,
								4495
							],
							[
								5131,
								5143
							],
							[
								5517,
								5538
							],
							[
								6229,
								6234
							],
							[
								6283,
								6293
							],
							[
								6531,
								6545
							],
							[
								7233,
								7250
							],
							[
								7335,
								7339
							],
							[
								7373,
								7377
							]
						],
						"symlist":
						[
							"function SetFenceColor(color)",
							"function FlyTo(location, done = () => {})",
							" function callback(complete)",
							"function Get(feature)",
							"function CreateMap()",
							"a =>",
							" function(e)",
							"([name, geometry]) =>",
							"get()",
							"set(value)",
							" function(evt)",
							"async response =>",
							"u =>",
							"u =>"
						]
					},
					"AQAAAAAAAAAAAAAAywAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/eagle/element.js",
			"settings":
			{
				"buffer_size": 33799,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					18,
					1,
					"",
					null,
					"AQAAAJYIAAAAAAAApQgAAAAAAAAPAAAAICAgIGNvbnNvbGUubG9n",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACWCAAAAAAAAKUIAAAAAAAAAAAAAAAA8L8"
				],
				[
					19,
					1,
					"",
					null,
					"AQAAAA0OAAAAAAAAHA4AAAAAAAAPAAAAICAgIGNvbnNvbGUubG9n",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAANDgAAAAAAABwOAAAAAAAAAAAAAAAA8L8"
				],
				[
					20,
					1,
					"",
					null,
					"AQAAAKkOAAAAAAAAuA4AAAAAAAAPAAAAICAgIGNvbnNvbGUubG9n",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACpDgAAAAAAALgOAAAAAAAAAAAAAAAA8L8"
				],
				[
					24,
					1,
					"",
					null,
					"AQAAAJYIAAAAAAAApwgAAAAAAAAPAAAAICAgIGNvbnNvbGUubG9n",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACWCAAAAAAAAKUIAAAAAAAAAAAAAAAA8L8"
				],
				[
					25,
					1,
					"",
					null,
					"AQAAAA8OAAAAAAAAIA4AAAAAAAAPAAAAICAgIGNvbnNvbGUubG9n",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAPDgAAAAAAAB4OAAAAAAAAAAAAAAAA8L8"
				],
				[
					26,
					1,
					"",
					null,
					"AQAAAK0OAAAAAAAAvg4AAAAAAAAPAAAAICAgIGNvbnNvbGUubG9n",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACtDgAAAAAAALwOAAAAAAAAAAAAAAAA8L8"
				],
				[
					27,
					1,
					"",
					null,
					"AQAAABZNAAAAAAAAKU0AAAAAAAARAAAAICAgICAgY29uc29sZS5sb2c",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAWTQAAAAAAACdNAAAAAAAAAAAAAAAA8L8"
				],
				[
					28,
					1,
					"",
					null,
					"AQAAAExRAAAAAAAAYVEAAAAAAAATAAAAICAgICAgICBjb25zb2xlLmxvZw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABMUQAAAAAAAF9RAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "debugger-server.js",
			"settings":
			{
				"buffer_size": 30671,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					13,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAALdoAAAAAAAAuGgAAAAAAAAAAAAAuGgAAAAAAAC5aAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALdoAAAAAAAAt2gAAAAAAAAAAAAAAADwvw"
				],
				[
					16,
					1,
					"revert",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALloAAAAAAAAuWgAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "debugger.html",
			"settings":
			{
				"buffer_size": 441,
				"line_ending": "Unix"
			}
		},
		{
			"file": "debugger-client.js",
			"settings":
			{
				"buffer_size": 13493,
				"line_ending": "Unix"
			}
		},
		{
			"file": "debugger.js",
			"settings":
			{
				"buffer_size": 11429,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					4,
					2,
					"left_delete",
					null,
					"AgAAAPAAAAAAAAAA8AAAAAAAAAAeAAAAaW1wb3J0IHByb2Nlc3MgZnJvbSAncHJvY2Vzcyc77wAAAAAAAADvAAAAAAAAAAEAAAAK",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPAAAAAAAAAADgEAAAAAAAAAAAAAAADwvw"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAPAAAAAAAAAA8QAAAAAAAAAAAAAA8QAAAAAAAADyAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPAAAAAAAAAA8AAAAAAAAAAAAAAAAAAAAA"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "globalThi."
					},
					"CgAAAPEAAAAAAAAA8gAAAAAAAAAAAAAA8gAAAAAAAADzAAAAAAAAAAAAAADzAAAAAAAAAPQAAAAAAAAAAAAAAPQAAAAAAAAA9QAAAAAAAAAAAAAA9QAAAAAAAAD2AAAAAAAAAAAAAAD2AAAAAAAAAPcAAAAAAAAAAAAAAPcAAAAAAAAA+AAAAAAAAAAAAAAA+AAAAAAAAAD5AAAAAAAAAAAAAAD5AAAAAAAAAPoAAAAAAAAAAAAAAPoAAAAAAAAA+wAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPEAAAAAAAAA8QAAAAAAAAAAAAAAAAAAAA"
				],
				[
					19,
					1,
					"left_delete",
					null,
					"AQAAAPoAAAAAAAAA+gAAAAAAAAABAAAALg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPsAAAAAAAAA+wAAAAAAAAAAAAAAAADwvw"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": "s.process"
					},
					"CQAAAPoAAAAAAAAA+wAAAAAAAAAAAAAA+wAAAAAAAAD8AAAAAAAAAAAAAAD8AAAAAAAAAP0AAAAAAAAAAAAAAP0AAAAAAAAA/gAAAAAAAAAAAAAA/gAAAAAAAAD/AAAAAAAAAAAAAAD/AAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAQEAAAAAAAAAAAAAAQEAAAAAAAACAQAAAAAAAAAAAAACAQAAAAAAAAMBAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPoAAAAAAAAA+gAAAAAAAAAAAAAAAADwvw"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": " ??="
					},
					"BAAAAAMBAAAAAAAABAEAAAAAAAAAAAAABAEAAAAAAAAFAQAAAAAAAAAAAAAFAQAAAAAAAAYBAAAAAAAAAAAAAAYBAAAAAAAABwEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAMBAAAAAAAAAwEAAAAAAAAAAAAAAADwvw"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAcBAAAAAAAACAEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAcBAAAAAAAABwEAAAAAAAAAAAAAAADwvw"
				],
				[
					23,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAAgBAAAAAAAACgEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAgBAAAAAAAACAEAAAAAAAAAAAAAAADwvw"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": " env:"
					},
					"BQAAAAkBAAAAAAAACgEAAAAAAAAAAAAACgEAAAAAAAALAQAAAAAAAAAAAAALAQAAAAAAAAwBAAAAAAAAAAAAAAwBAAAAAAAADQEAAAAAAAAAAAAADQEAAAAAAAAOAQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAkBAAAAAAAACQEAAAAAAAAAAAAAAADwvw"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAA4BAAAAAAAADwEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA4BAAAAAAAADgEAAAAAAAAAAAAAAADwvw"
				],
				[
					26,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAA8BAAAAAAAAEQEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA8BAAAAAAAADwEAAAAAAAAAAAAAAADwvw"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABEBAAAAAAAAEgEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABEBAAAAAAAAEQEAAAAAAAAAAAAAAADwvw"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "M;"
					},
					"AgAAABMBAAAAAAAAFAEAAAAAAAAAAAAAFAEAAAAAAAAVAQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABMBAAAAAAAAEwEAAAAAAAAAAAAAAADwvw"
				],
				[
					31,
					2,
					"left_delete",
					null,
					"AgAAABQBAAAAAAAAFAEAAAAAAAABAAAAOxMBAAAAAAAAEwEAAAAAAAABAAAATQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABUBAAAAAAAAFQEAAAAAAAAAAAAAAADwvw"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAABMBAAAAAAAAFAEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABMBAAAAAAAAEwEAAAAAAAAAAAAAAADwvw"
				],
				[
					43,
					1,
					"revert",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPEAAAAAAAAA8QAAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "map.html",
			"settings":
			{
				"buffer_size": 1764,
				"line_ending": "Unix"
			}
		},
		{
			"file": "ol-map.js",
			"settings":
			{
				"buffer_size": 8565,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"Arithmetic"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"prett",
				"JsPrettier: Format Code"
			],
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"book",
				"Bookmarks: Toggle"
			],
			[
				"json",
				"Pretty JSON: Minify JSON"
			],
			[
				"jspr",
				"JsPrettier: Format Code"
			],
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"color",
				"Color Highlight: Reset"
			],
			[
				"scheme",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"edit cu",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"install pac",
				"Package Control: Install Package"
			],
			[
				"prettier",
				"JsPrettier: Format Code"
			],
			[
				"list pack",
				"Package Control: List Packages"
			],
			[
				"edit ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"edit",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"outli",
				"Browse Mode: Outline (Right)"
			],
			[
				"debugger",
				"Preferences: Debugger Settings"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"INSTALL",
				"Package Control: Install Package"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"adap",
				"Debugger: Install Adapters"
			],
			[
				"install ada",
				"Debugger: Install Adapters"
			],
			[
				"adapter",
				"Debugger: Install Adapters"
			],
			[
				"debug",
				"Debugger: Install Adapters"
			],
			[
				"Package Control: remove",
				"Package Control: Remove Package"
			],
			[
				"debu",
				"Debugger: Install Adapters"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 289.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv",
		"/home/roman/Projects/plot-cv/src"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/adsb-server.js",
		"/home/roman/Projects/plot-cv/lib/misc.js",
		"/home/roman/Projects/plot-cv/io-helpers.js",
		"/home/roman/Projects/plot-cv/os-helpers.js",
		"/home/roman/Projects/plot-cv/lib/eagle/ref.js",
		"/home/roman/Projects/plot-cv/lib/eagle/document.js",
		"/home/roman/Projects/plot-cv/lib/eagle/project.js",
		"/home/roman/Projects/plot-cv/debugger-server.js",
		"/home/roman/Projects/plot-cv/upload-server.js",
		"/home/roman/Projects/plot-cv/readfile.js",
		"/home/roman/Projects/plot-cv/test-debug.js",
		"/home/roman/Projects/plot-cv/test-debuggerprotocol.js",
		"/home/roman/Projects/plot-cv/test-css3.js",
		"/home/roman/Projects/plot-cv/grammar-css3.js",
		"/home/roman/Projects/plot-cv/test-cparse.js",
		"/home/roman/Projects/plot-cv/test-coverage.js",
		"/home/roman/Projects/plot-cv/test-color.js",
		"/home/roman/Projects/plot-cv/test-clipper.js",
		"/home/roman/Projects/plot-cv/test-cli.js",
		"/home/roman/Projects/plot-cv/lib/meriyah.js",
		"/home/roman/Projects/plot-cv/lib/async/helpers.js",
		"/home/roman/Projects/plot-cv/test-opencv.js",
		"/home/roman/Projects/plot-cv/test-spawn.js",
		"/home/roman/Projects/plot-cv/test-readfile.js",
		"/home/roman/Projects/plot-cv/lib/util.js",
		"/home/roman/Projects/plot-cv/quickjs/cutils.h",
		"/usr/include/mariadb/mysql.h",
		"/home/roman/Projects/plot-cv/plot-cv.sublime-project",
		"/home/roman/Projects/plot-cv/msys2-runtime/msys2/newlib/libc/include/sys/signal.h",
		"/home/roman/Projects/plot-cv/qjs-opencv/js/cvHighGUI.js",
		"/home/roman/Projects/plot-cv/test-nanovg.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/js/cvUtils.js",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.c",
		"/home/roman/Projects/plot-cv/quickjs/libregexp.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/ringbuffer.c",
		"/home/roman/Projects/plot-cv/ast-shell.js",
		"/home/roman/Projects/plot-cv/clang-ast.js",
		"/home/roman/Projects/plot-cv/compile_commands.js",
		"/home/roman/Projects/plot-cv/count-neighbours.js",
		"/home/roman/Projects/plot-cv/test-sockets.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/msys2-runtime/msys2/winsup/cygwin/include/cygwin/signal.h",
		"/home/roman/Projects/plot-cv/msys2-runtime/msys2/winsup/cygwin/local_includes/sigproc.h",
		"/home/roman/Projects/plot-cv/msys2-runtime/msys2/winsup/cygserver/cygserver.cc",
		"/home/roman/Projects/plot-cv/msys2-runtime/msys2/winsup/cygwin/exceptions.cc",
		"/home/roman/Projects/plot-cv/msys2-runtime/msys2/winsup/cygwin/signal.cc",
		"/home/roman/Projects/plot-cv/test-minnet.js",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-libc.c",
		"/home/roman/Projects/plot-cv/test-matshared.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/js/cvVideo.js",
		"/home/roman/Projects/plot-cv/test-worker.js",
		"/home/roman/Projects/plot-cv/test-umat.js",
		"/home/roman/Projects/plot-cv/lib/iterator/helpers.js",
		"/home/roman/Projects/plot-cv/json-iterator.js",
		"/home/roman/Projects/plot-cv/lib/repeater/repeater.ts",
		"/home/roman/Projects/plot-cv/debugger.js",
		"/home/roman/Projects/plot-cv/param.js",
		"/home/roman/Projects/plot-cv/test-video.js",
		"/home/roman/Projects/plot-cv/cli-helpers.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
		"/home/roman/Projects/plot-cv/qjsval.c",
		"/home/roman/Dokumente/bookmarks_26.05.23.html",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-xml.c",
		"/home/roman/Projects/plot-cv/events.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/require.js",
		"/home/roman/Projects/plot-cv/main.js",
		"/home/roman/Projects/plot-cv/lib/iterator/event.js",
		"/home/roman/Projects/plot-cv/lib/events.js",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/test-asynciterator.js",
		"/home/roman/Projects/plot-cv/test-repeater.js",
		"/home/roman/Projects/plot-cv/lib/parse-diff.js",
		"/home/roman/Projects/plot-cv/dir-helpers.js",
		"/home/roman/Projects/plot-cv/lib/path.js",
		"/home/roman/Projects/plot-cv/lib/compileCommand.js",
		"/home/roman/Projects/plot-cv/fire.js",
		"/home/roman/Projects/plot-cv/lib/filesystem.js",
		"/home/roman/Projects/plot-cv/static/debugger.css",
		"/home/roman/Projects/plot-cv/lib/dom/preactComponent.js",
		"/home/roman/Projects/plot-cv/debugger-client.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/qjsm.c",
		"/home/roman/Projects/plot-cv/assemblyscript/util/terminal.js",
		"/home/roman/Projects/plot-cv/quickjs-misc.c.ast.bjson",
		"/home/roman/Projects/plot-cv/quickjs/qjscalc.js",
		"/home/roman/Projects/plot-cv/quickjs/core",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/console.js",
		"/home/roman/Projects/plot-cv/core.qjsm.33358.VivoBook-X512FA.1684377984",
		"/home/roman/Projects/plot-cv/core.qjsm.33302.VivoBook-X512FA.1684377956",
		"/home/roman/Projects/plot-cv/core.qjsm.33122.VivoBook-X512FA.1684377931",
		"/home/roman/Projects/plot-cv/core.qjsm.115379.VivoBook-X512FA.1684385395",
		"/home/roman/Projects/plot-cv/terminal.js",
		"/home/roman/Projects/plot-cv/quickjs/qjsc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-location.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-deep.c",
		"/home/roman/Projects/plot-cv/qjs-opencv/jsbindings.hpp",
		"/home/roman/.config/sublime-text/Packages/Outline/common.py",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_object.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_subdiv2d.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/jsbindings.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/util.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/opencv/modules/core/include/opencv2/core/mat.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_mat.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_cv.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_umat.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_rect.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_point.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_contour.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/geometry.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_point.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_array.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_line.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_line.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/line.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/trace_skeleton.hpp",
		"/opt/opencv-4.5.5-x86_64/include/opencv4/opencv2/imgproc.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_draw.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_line_segment_detector.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/lsd/src/lsd_opencv.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/line_segment_detector.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_contour.cpp",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/TODO",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_dom.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/queue.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/getdents.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/path.c"
	],
	"find":
	{
		"height": 26.0
	},
	"find_in_files":
	{
		"height": 146.0,
		"where_history":
		[
			"/home/roman/Projects/plot-cv,*.c,*.h,*.js,-*/libwebsockets/*,-*/node_modules/*",
			"/home/roman/Projects/plot-cv,*.c,*.h,*.jsx,-*/libwebsockets/*,-*/node_modules/*",
			"/home/roman/Projects/plot-cv,*.c,*.h,*.js,-*/libwebsockets/*,-*/node_modules/*",
			"/home/roman/Projects/plot-cv,*.c,*.h,*.js",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"\\bwatch\\b",
			"watch",
			"\\.js",
			"process\\.",
			"'onFd'",
			"lazyOpen",
			"lazyProperty",
			"^(\\s*)console.log",
			"onFd",
			"daemon\\(",
			"daemon",
			"URLWorker",
			"Worker",
			"URLWorker",
			"os-helper",
			"glob\\(",
			"Matcher",
			"fnmatch",
			"{\n",
			"\\blink\\b",
			"Execute\\(",
			"MagickResize",
			"Execute\\(",
			"os-helpers",
			"spawn",
			"spawn\\(",
			"HeifConvert",
			"\\bExecute\\b",
			"\\bspawn\\b",
			"\\bexec\\b",
			"\\bsocket\\b",
			"proc",
			"PortableChildProcess",
			"await",
			"readFileSync",
			"filesystem\\.",
			"filesystem",
			"\\bMat\\b",
			"Mat",
			"new Mat",
			"Execute\\(",
			"os-helpers",
			"ExecTool",
			"WNOHANG",
			"Spawn",
			"Execute",
			"WNOHANG",
			"Parser",
			"Lexer",
			"enum mysql_status",
			"status",
			"enum mysql_status",
			"mysql_status",
			"(pending|busy|idle|ready)",
			"(pending|busy)",
			"_OPT_",
			"mysql_set_",
			"mysql.*set",
			"mysql.*set.*user",
			"user",
			"opaque",
			"consume",
			"\\bdecorate\\(",
			"SpawnCompiler\\(",
			"fdopen",
			"Spawn\\(",
			"SpawnCompiler\\(",
			"SpawnCompiler",
			"SpawnCompiler\\(",
			"SpawnCompiler",
			"Spawn",
			"SIGHANDLE",
			"IGTERM",
			"sigaction",
			"\\bexec\\b",
			"path\\.",
			"child_process\\.spawn",
			"child_process",
			"\\bspawn\\b",
			"spawn",
			"WNOHANG",
			"'os'",
			"setReadHandler",
			"setReadHandler$",
			"setReadHandler",
			"poll\\(",
			"^js_os_pol",
			"js_os_pol",
			"\\balloca\\b",
			"\\balloca\\.h\\b",
			"\\balloca\\b",
			"alloca\\(",
			"alloca",
			"USE_WORKER",
			"handle_posted_message",
			"js_os_poll",
			"propId",
			"Proxy",
			"}\\n(  |)([^ ])",
			"}\\n  ([^ ])",
			"^export",
			"std\\.",
			"__filename",
			"Window.up",
			"LineSegment",
			"opts",
			"xml_read",
			"pr0n",
			"<p>",
			"new REPL",
			"m.buffer",
			"\\bdepth\\b",
			"depth",
			"delta",
			"null'",
			"nl\\(",
			"' '",
			"source",
			"LoadAST",
			"FindFunc",
			"SharedArrayBuffer",
			"process\\.",
			"prevTime",
			"Symbol.toString",
			"toStringTag",
			"new Console",
			"Console ",
			"hideKeys"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"\\1//console.log",
			"\\1console.log",
			"",
			"spawn",
			"}\\n\\n\\1\\2",
			"}\\n\\n  \\1",
			"buf",
			"\\1",
			"debug(`\\1 ${\\2}`)",
			"fs.readFileSync",
			", ",
			"strOrRegex",
			"argumentsOfType",
			"valuePointer",
			"file",
			"arrayOrString",
			"",
			"\\1//console.",
			"obj[name]"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 203,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": "/home/roman/Projects/plot-cv/ol-map.js",
							"function_name_status_row": 13,
							"outline_rename_mode": false,
							"symkeys":
							[
								[
									3208,
									3237
								],
								[
									3336,
									3377
								],
								[
									3582,
									3611
								],
								[
									3996,
									4017
								],
								[
									4085,
									4105
								],
								[
									4491,
									4495
								],
								[
									5131,
									5143
								],
								[
									5517,
									5538
								],
								[
									6229,
									6234
								],
								[
									6283,
									6293
								],
								[
									6531,
									6545
								],
								[
									7233,
									7250
								],
								[
									7335,
									7339
								],
								[
									7373,
									7377
								]
							],
							"symlist":
							[
								"SetFenceColor(color)",
								"FlyTo(location, done = () => {})",
								"  callback(complete)",
								"Get(feature)",
								"CreateMap()",
								"  a =>",
								"function(e)",
								"([name, geometry]) =>",
								"  get()",
								"  set(value)",
								"function(evt)",
								"  response =>",
								"  u =>",
								"  u =>"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1687183928.94,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "lib/eagle/element.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 33799,
						"regions":
						{
						},
						"selection":
						[
							[
								29897,
								29897
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 850,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1687182199.74,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 14059.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "debugger-server.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 30671,
						"regions":
						{
						},
						"selection":
						[
							[
								26809,
								26809
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 870,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1687182245.35,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 14550.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "debugger.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 441,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1687182249.14,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "debugger-client.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13493,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1687182275.89,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "debugger.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11429,
						"regions":
						{
						},
						"selection":
						[
							[
								352,
								398
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 9,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1687182727.71,
							"tabs_extra_last_activated_sheet_index": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "map.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1764,
						"regions":
						{
						},
						"selection":
						[
							[
								599,
								602
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 11,
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1687182738.59,
							"tabs_extra_last_activated_sheet_index": 5,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "ol-map.js",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8565,
						"regions":
						{
							"col_010101FF":
							{
								"flags": 16,
								"regions":
								[
									[
										2375,
										2380
									]
								],
								"scope": "col_010101FF"
							},
							"col_010101FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_010101FF_circle.png",
								"regions":
								[
									[
										2344,
										2344
									]
								],
								"scope": "col_gutter"
							},
							"col_3399CCFF":
							{
								"flags": 16,
								"regions":
								[
									[
										4286,
										4293
									],
									[
										5771,
										5778
									]
								],
								"scope": "col_3399CCFF"
							},
							"col_3399CCFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_3399CCFF_circle.png",
								"regions":
								[
									[
										4268,
										4268
									],
									[
										5753,
										5753
									]
								],
								"scope": "col_gutter"
							},
							"col_FFD705FF":
							{
								"flags": 16,
								"regions":
								[
									[
										4819,
										4826
									]
								],
								"scope": "col_FFD705FF"
							},
							"col_FFD705FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FFD705FF_circle.png",
								"regions":
								[
									[
										4803,
										4803
									]
								],
								"scope": "col_gutter"
							},
							"col_FFFFFFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										2336,
										2341
									],
									[
										4354,
										4358
									],
									[
										5839,
										5843
									]
								],
								"scope": "col_FFFFFFFF"
							},
							"col_FFFFFFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FFFFFFFF_circle.png",
								"regions":
								[
									[
										2311,
										2311
									],
									[
										4336,
										4336
									],
									[
										5821,
										5821
									]
								],
								"scope": "col_gutter"
							}
						},
						"selection":
						[
							[
								7827,
								7827
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 280,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1687234985.32,
							"tabs_extra_last_activated_sheet_index": 6,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4010.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.8,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 0.0
	},
	"output.Debugger Console":
	{
		"height": 0.0
	},
	"output.coffeecompile_output":
	{
		"height": 162.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "plot-cv.sublime-project",
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"adsb-ser",
				"adsb-server.js"
			],
			[
				"ol-map",
				"ol-map.js"
			],
			[
				"map.ht",
				"map.html"
			],
			[
				"debugger.js",
				"debugger.js"
			],
			[
				"debugger-clie",
				"debugger-client.js"
			],
			[
				"debugger.html",
				"debugger.html"
			],
			[
				"debugger-server",
				"debugger-server.js"
			],
			[
				"element",
				"lib/eagle/element.js"
			],
			[
				"misc.js",
				"lib/misc.js"
			],
			[
				"ref.js",
				"lib/eagle/ref.js"
			],
			[
				"document",
				"lib/eagle/document.js"
			],
			[
				"project.js",
				"lib/eagle/project.js"
			],
			[
				"os-help",
				"os-helpers.js"
			],
			[
				"io-help",
				"io-helpers.js"
			],
			[
				"upload-server",
				"upload-server.js"
			],
			[
				"test-debug.js",
				"test-debug.js"
			],
			[
				"test-debuggerpr",
				"test-debuggerprotocol.js"
			],
			[
				"test-css",
				"test-css3.js"
			],
			[
				"grammar-css",
				"grammar-css3.js"
			],
			[
				"test-cpa",
				"test-cparse.js"
			],
			[
				"test-cove",
				"test-coverage.js"
			],
			[
				"test-color",
				"test-color.js"
			],
			[
				"test-clipp",
				"test-clipper.js"
			],
			[
				"test-cli.js",
				"test-cli.js"
			],
			[
				"readfile.js",
				"readfile.js"
			],
			[
				"test-spa",
				"test-spawn.js"
			],
			[
				"util.j",
				"lib/util.js"
			],
			[
				"test-spawn",
				"test-spawn.js"
			],
			[
				"upload-ser",
				"upload-server.js"
			],
			[
				"lib/meri",
				"lib/meriyah.js"
			],
			[
				"async/help",
				"lib/async/helpers.js"
			],
			[
				"test-opencv",
				"test-opencv.js"
			],
			[
				"clang-",
				"clang-ast.js"
			],
			[
				"ast-shell",
				"ast-shell.js"
			],
			[
				"clang-as",
				"clang-ast.js"
			],
			[
				"signal.cc",
				"msys2-runtime/msys2/winsup/cygwin/signal.cc"
			],
			[
				"modules/lib/util.js",
				"quickjs/qjs-modules/lib/util.js"
			],
			[
				"compile_c",
				"compile_commands.js"
			],
			[
				"count",
				"count-neighbours.js"
			],
			[
				"test-sock",
				"test-sockets.js"
			],
			[
				"debugger-ser",
				"debugger-server.js"
			],
			[
				"test-minn",
				"test-minnet.js"
			],
			[
				"quickjs-libc.c",
				"quickjs/quickjs-libc.c"
			],
			[
				"cvutil",
				"qjs-opencv/js/cvUtils.js"
			],
			[
				"cvVide",
				"qjs-opencv/js/cvVideo.js"
			],
			[
				"test-opencv.",
				"test-opencv.js"
			],
			[
				"test-nano",
				"test-nanovg.js"
			],
			[
				"cvHi",
				"qjs-opencv/js/cvHighGUI.js"
			],
			[
				"quickjs-xml",
				"quickjs/qjs-modules/quickjs-xml.c"
			],
			[
				"qjsval.c",
				"qjsval.c"
			],
			[
				"test-mat",
				"test-matshared.js"
			],
			[
				"quickjs-misc",
				"quickjs/qjs-modules/quickjs-misc.c"
			],
			[
				"matsha",
				"test-matshared.js"
			],
			[
				"json-i",
				"json-iterator.js"
			],
			[
				"iterator/help",
				"lib/iterator/helpers.js"
			],
			[
				"repeater.ts",
				"lib/repeater/repeater.ts"
			],
			[
				"test-work",
				"test-worker.js"
			],
			[
				"test-uma",
				"test-umat.js"
			],
			[
				"param.",
				"param.js"
			],
			[
				"test-vid",
				"test-video.js"
			],
			[
				"cli-helper",
				"cli-helpers.js"
			],
			[
				"test-vide",
				"test-video.js"
			],
			[
				"test-repeat",
				"test-repeater.js"
			],
			[
				"quickjs.h",
				"quickjs/quickjs.h"
			],
			[
				"require.js",
				"quickjs/qjs-modules/lib/require.js"
			],
			[
				"main.js",
				"main.js"
			],
			[
				"events.js",
				"events.js"
			],
			[
				"lib/events",
				"lib/events.js"
			],
			[
				"dir-help",
				"dir-helpers.js"
			],
			[
				"io-helpe",
				"io-helpers.js"
			],
			[
				"lib/util",
				"lib/util.js"
			],
			[
				"path.js",
				"lib/path.js"
			],
			[
				"lib/misc",
				"lib/misc.js"
			],
			[
				"lib/filesys",
				"lib/filesystem.js"
			],
			[
				"lib/path",
				"lib/path.js"
			],
			[
				"compileComm",
				"lib/compileCommand.js"
			],
			[
				"qjsm",
				"quickjs/qjs-modules/src/qjsm.c"
			],
			[
				"io-he",
				"io-helpers.js"
			],
			[
				"fire",
				"fire.js"
			],
			[
				"debugger-cie",
				"debugger-client.js"
			],
			[
				"debugger-cli",
				"debugger-client.js"
			],
			[
				"preactC",
				"lib/dom/preactComponent.js"
			],
			[
				"debugger.css",
				"static/debugger.css"
			],
			[
				"termin",
				"assemblyscript/util/terminal.js"
			],
			[
				"util.js",
				"lib/util.js"
			],
			[
				"lib/compi",
				"lib/compileCommand.js"
			],
			[
				"compile_comm",
				"compile_commands.js"
			],
			[
				"commands",
				"lib/compileCommand.js"
			],
			[
				"dir-he",
				"dir-helpers.js"
			],
			[
				"compileCom",
				"lib/compileCommand.js"
			],
			[
				"compile_",
				"compile_commands.js"
			],
			[
				"console.js",
				"quickjs/qjs-modules/lib/console.js"
			],
			[
				"compile_com",
				"compile_commands.js"
			],
			[
				"misc",
				"lib/misc.js"
			],
			[
				"debugger",
				"debugger.js"
			],
			[
				"find-",
				"quickjs-find-module.c"
			],
			[
				"qjsc.c",
				"qjsc.c"
			],
			[
				"cmakelists",
				"CMakeLists.txt"
			],
			[
				"quickjs-lib",
				"quickjs-libc.h"
			],
			[
				"quickjs-libc",
				"quickjs-libc.c"
			],
			[
				"quickjs-loc",
				"qjs-modules/quickjs-location.c"
			],
			[
				"quickjs-deep",
				"qjs-modules/quickjs-deep.c"
			],
			[
				"quickjs.c",
				"quickjs.c"
			],
			[
				"js_img",
				"js_imgproc.cpp"
			],
			[
				"js_imgpr",
				"js_imgproc.cpp"
			],
			[
				"trace",
				"trace_skeleton.hpp"
			],
			[
				"js_imgp",
				"js_imgproc.cpp"
			],
			[
				"umat.hpp",
				"js_umat.hpp"
			],
			[
				"js_line_seg",
				"js_line_segment_detector.cpp"
			],
			[
				"js_cv",
				"js_cv.cpp"
			],
			[
				"util.hpp",
				"util.hpp"
			],
			[
				"mat.hpp",
				"opencv/modules/core/include/opencv2/core/mat.hpp"
			],
			[
				"line.hpp",
				"line.hpp"
			],
			[
				"js_Draw",
				"js_draw.cpp"
			],
			[
				"js_Dr",
				"js_draw.cpp"
			],
			[
				"",
				"js_line_segment_detector.cpp"
			],
			[
				"line_seg",
				"js_line_segment_detector.cpp"
			],
			[
				"geom",
				"geometry.hpp"
			],
			[
				"geomtry",
				"geometry.hpp"
			],
			[
				"quickjs-ins",
				"quickjs-inspect.c"
			],
			[
				"repl.j",
				"lib/repl.js"
			],
			[
				"qjsm.c",
				"src/qjsm.c"
			],
			[
				"repl.js",
				"lib/repl.js"
			],
			[
				"quickjs-inp",
				"quickjs-inspect.c"
			],
			[
				"quickjs-sock",
				"quickjs-sockets.c"
			],
			[
				"test_Sock",
				"tests/test_sockets.js"
			],
			[
				"repl",
				"lib/repl.js"
			],
			[
				"resolve-impo",
				"resolve-imports.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/plot-cv.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 271.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"WS"
			]
		],
		"width": 1017.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 293.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
