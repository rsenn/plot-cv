{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Trans",
				"TransformationList"
			],
			[
				"HAVE_",
				"HAVE_MALLOC_USABLE_SIZE_DEFINITION"
			],
			[
				"js_mat_itera",
				"js_mat_iterator_class_id"
			],
			[
				"JSMat",
				"JSMatIteratorData"
			],
			[
				"mat_iterator",
				"mat_iterator_proto"
			],
			[
				"Obj",
				"ObjectBindingPattern"
			],
			[
				"Mut",
				"MutablePath"
			],
			[
				"Conso",
				"ConsoleSetup"
			],
			[
				"ES6I",
				"ES6ImportExport.prototype"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "Proxy\n(prop) =>\n.prototype.valueOf = function ()\n.prototype.toSource = function ()\n.prototype.toString = function ()\n.prototype.check = function (url)\n.prototype.ping = function ()\n(resolve, reject) =>\n () =>\n () =>\n (err) =>\n    function finish(msg, start\n)\nmain\nasync (push, stop) =>\nasync (push, stop) =>\nasync (err, proxies) =>\nasync () =>\nasync writeResults\ntxt: (r)\n(p) =>\njson: (r)\n(p) =>",
			"settings":
			{
				"buffer_size": 395,
				"line_ending": "Unix",
				"name": "ùåÜ Outline",
				"scratch": true
			}
		},
		{
			"file": "main.js",
			"settings":
			{
				"buffer_size": 66855,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/roman/Dokumente/Sources/plot-cv/tmp/555-Synth.GTL",
			"settings":
			{
				"buffer_size": 1653,
				"line_ending": "Unix"
			}
		},
		{
			"file": "list-proxies.js",
			"settings":
			{
				"buffer_size": 5355,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/util.js",
			"settings":
			{
				"buffer_size": 132143,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/async/helpers.js",
			"settings":
			{
				"buffer_size": 2848,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/async/iterify.js",
			"settings":
			{
				"buffer_size": 1198,
				"line_ending": "Unix"
			}
		},
		{
			"file": "test-quickjs.js",
			"settings":
			{
				"buffer_size": 6634,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "// function to determine filetype from a chunk\nfunction determine(chunk, start, LIMIT) {\n  let limit = Math.min(LIMIT - start, chunk.length);\n  let current = [];\n  let filetype = null;\n  let index = -1;\n\n  while(!filetype && ++index < limit) {\n    let c = chunk[index];\n    // console.debug(\"determine\",{index,c, limit, current});\n    if(c === '%' && index == 0) {\n      if(current.length == 0) filetype = 'drill';\n    } else if(c === '\\n') {\n      if(current.length + index) {\n        filetype = 'drill';\n        current = [];\n      }\n    } else {\n      current.push(c);\n      if(c === '*' && current[0] !== ';') {\n        filetype = 'gerber';\n        current = [];\n      }\n    }\n  }\n\n  return filetype;\n}\n\n// function for getting the next block of the chunk\n// returns {next: '_', read: [chars read], lines: [lines read]}\nfunction getNext(type, chunk, start) {\n  if(type !== 'gerber' && type !== 'drill') {\n    throw new Error('filetype to get next block must be \"drill\" or \"gerber\"');\n  }\n\n  // parsing constants\n  let limit = chunk.length - start;\n  let split = type === 'gerber' ? '*' : '\\n';\n  let param = type === 'gerber' ? '%' : '';\n\n  // search flags\n  let splitFound = false;\n  let paramStarted = false;\n  let paramFound = false;\n  let blockFound = false;\n\n  // chunk results\n  let found = [];\n  let read = 0;\n  let lines = 0;\n\n  while(!blockFound && read < limit) {\n    let c = chunk[start + read];\n\n    // count newlines\n    if(c === '\\n') {\n      lines++;\n    }\n\n    // check for a param start or end\n    if(c === param) {\n      if(!paramStarted) {\n        paramStarted = true;\n        found.push(c);\n      } else {\n        paramFound = true;\n        found.pop();\n      }\n    } else if(c === split) {\n      splitFound = true;\n      if(paramStarted) {\n        found.push(c);\n      }\n    } else if(' ' <= c && c <= '~') {\n      found.push(c);\n    }\n\n    read++;\n    blockFound = splitFound && (!paramStarted || paramFound);\n  }\n\n  let block = blockFound ? found.join('').trim() : '';\n  let rem = !blockFound ? found.join('') : '';\n  return { lines, read, block, rem };\n}\n\n// factories to generate all possible parsed by a gerber command\nfunction done(line) {\n  return { type: 'done', line: line || -1 };\n}\n\nfunction set(property, value, line) {\n  return { type: 'set', line: line || -1, prop: property, value };\n}\n\nfunction level(level, value, line) {\n  return { type: 'level', line: line || -1, level, value };\n}\n\nfunction tool(code, tool, line) {\n  return { type: 'tool', line: line || -1, code, tool };\n}\n\nfunction op(operation, location, line) {\n  return { type: 'op', line: line || -1, op: operation, coord: location };\n}\n\nfunction macro(name, blocks, line) {\n  return { type: 'macro', line: line || -1, name, blocks };\n}\n\nlet commandMap = {\n  set,\n  done,\n  level,\n  tool,\n  op,\n  macro\n};\n\n// convert a decimal number or gerber/drill coordinate into an svg coordinate\n// coordinate is 1000x the gerber unit\n// function takes in the number string to be converted and the format object\nfunction normalizeCoord(number, format) {\n  // make sure we're dealing with a string\n  if(number == null) return NaN;\n\n  let numberString = '' + number;\n\n  // pull out the sign and get the before and after segments ready\n  let sign = '+';\n  if(numberString[0] === '-' || numberString[0] === '+') {\n    sign = numberString[0];\n    numberString = numberString.slice(1);\n  }\n\n  // check if the number has a decimal point or has been explicitely flagged\n  let hasDecimal = numberString.indexOf('.') !== -1;\n  if(hasDecimal || format == null || format.zero == null) {\n    return Number(sign + numberString);\n  }\n\n  // otherwise we need to use the number format to split up the string\n\n  // make sure format is valid\n  if(format.places == null || format.places.length !== 2) return NaN;\n\n  let leading = format.places[0];\n  let trailing = format.places[1];\n  if(!Number.isFinite(leading) || !Number.isFinite(trailing)) return NaN;\n\n  // pad according to trailing or leading zero suppression\n  if(format.zero === 'T') numberString = numberString.padStart(leading + trailing, '0');\n  else if(format.zero === 'L') numberString = numberString.padStart(leading + trailing, '0');\n  else return NaN;\n\n  // finally, parse the numberString\n  let before = numberString.slice(0, leading);\n  let after = numberString.slice(leading, leading + trailing);\n  return Number(sign + before + '.' + after);\n}\n\n// cordinate parser function\n// takes in a string with X_____Y_____I_____J_____ and a format object\n// returns an object of {x: number, y: number, etc} for coordinates it finds\n// convert to normalized number\nlet RE_TRAILING = /[XY]0\\d+/;\nlet RE_LEADING = /[XY]\\d+0(?=\\D|$)/;\nlet MATCH = [\n  { coord: 'x', test: /X([+-]?[\\d\\.]+)/ },\n  { coord: 'y', test: /Y([+-]?[\\d\\.]+)/ },\n  { coord: 'i', test: /I([+-]?[\\d\\.]+)/ },\n  { coord: 'j', test: /J([+-]?[\\d\\.]+)/ },\n  { coord: 'a', test: /A([\\d\\.]+)/ }\n];\n\nfunction parse$1(coord, format) {\n  if(coord == null) {\n    return {};\n  }\n\n  if(format.zero == null || format.places == null) {\n    throw new Error('cannot parse coordinate with format undefined');\n  }\n\n  // pull out the x, y, i, and j\n  let parsed = MATCH.reduce((result, matcher) => {\n    let coordMatch = coord.match(matcher.test);\n\n    if(coordMatch) {\n      result[matcher.coord] = normalizeCoord(coordMatch[1], format);\n    }\n\n    return result;\n  }, {});\n\n  return parsed;\n}\n\nfunction detectZero(coord) {\n  if(RE_LEADING.test(coord)) {\n    return 'L';\n  }\n\n  if(RE_TRAILING.test(coord)) {\n    return 'T';\n  }\n\n  return null;\n}\n\nlet parseCoord = { parse: parse$1, detectZero };\n\n// parse a macro expression and return a function that takes mods\nlet reOP$1 = /[+\\-\\/xX()]/;\nlet reNUMBER = /[$\\d.]+/;\nlet reTOKEN = new RegExp([reOP$1.source, reNUMBER.source].join('|'), 'g');\n\nfunction parseMacroExpression(parser, expr) {\n  // tokenize the expression\n  let tokens = expr.match(reTOKEN);\n\n  // forward declare parse expression\n  let parseExpression;\n\n  // primary tokens are numbers and parentheses\n  function parsePrimary() {\n    let t = tokens.shift();\n    let exp;\n\n    if(reNUMBER.test(t)) {\n      exp = { type: 'n', val: t };\n    } else {\n      exp = parseExpression();\n      tokens.shift();\n    }\n    return exp;\n  }\n\n  // parse multiplication and division tokens\n  function parseMultiplication() {\n    let exp = parsePrimary();\n    let t = tokens[0];\n\n    if(t === 'X') {\n      parser.warn(\"multiplication in macros should use 'x', not 'X'\");\n      t = 'x';\n    }\n    while(t === 'x' || t === '/') {\n      tokens.shift();\n      let right = parsePrimary();\n      exp = { type: t, left: exp, right };\n      t = tokens[0];\n    }\n    return exp;\n  }\n\n  // parse addition and subtraction tokens\n  parseExpression = function () {\n    let exp = parseMultiplication();\n    let t = tokens[0];\n    while(t === '+' || t === '-') {\n      tokens.shift();\n      let right = parseMultiplication();\n      exp = { type: t, left: exp, right };\n      t = tokens[0];\n    }\n    return exp;\n  };\n\n  // parse the expression string into a binary tree\n  let tree = parseExpression();\n\n  // evalute by recursively traversing the tree\n  function evaluate(op, mods) {\n    function getValue(t) {\n      if(t[0] === '$') {\n        return Number(mods[t]);\n      }\n      return Number(t);\n    }\n\n    let type = op.type;\n    if(type === 'n') {\n      return getValue(op.val);\n    }\n    if(type === '+') {\n      return evaluate(op.left, mods) + evaluate(op.right, mods);\n    }\n    if(type === '-') {\n      return evaluate(op.left, mods) - evaluate(op.right, mods);\n    }\n    if(type === 'x') {\n      return evaluate(op.left, mods) * evaluate(op.right, mods);\n    }\n    // else division\n    return evaluate(op.left, mods) / evaluate(op.right, mods);\n  }\n\n  // return the evaluation function bound to the parsed expression tree\n  return function (mods) {\n    return evaluate(tree, mods);\n  };\n}\n\n// function to parse a macro block into a primitive object\nlet reNUM = /^-?[\\d.]+$/;\nlet reVAR_DEF = /^(\\$[\\d+])=(.+)/;\n\nfunction parseMacroBlock(parser, block) {\n  // check first for a comment\n  if(block[0] === '0') {\n    return { type: 'comment' };\n  }\n\n  // variable definition\n  if(reVAR_DEF.test(block)) {\n    let varDefMatch = block.match(reVAR_DEF);\n    let varName = varDefMatch[1];\n    let varExpr = varDefMatch[2];\n    let evaluate = parseMacroExpression(parser, varExpr);\n\n    function setMods(mods) {\n      mods[varName] = evaluate(mods);\n\n      return mods;\n    }\n    return { type: 'variable', set: setMods };\n  }\n\n  // map a primitive param to a number or, if an expression, a function\n  function modVal(m) {\n    if(reNUM.test(m)) {\n      return Number(m);\n    }\n    return parseMacroExpression(parser, m);\n  }\n\n  let mods = block.split(',').map(modVal);\n  let code = mods[0];\n  let exp = mods[1];\n\n  // circle primitive\n  if(code === 1) {\n    return {\n      type: 'circle',\n      exp,\n      dia: mods[2],\n      cx: mods[3],\n      cy: mods[4],\n      // handle optional rotation with circle primitives\n      rot: mods[5] || 0\n    };\n  }\n\n  // vector primitive\n  if(code === 2) {\n    parser.warn('macro aperture vector primitives with code 2 are deprecated');\n  }\n\n  if(code === 2 || code === 20) {\n    return {\n      type: 'vect',\n      exp,\n      width: mods[2],\n      x1: mods[3],\n      y1: mods[4],\n      x2: mods[5],\n      y2: mods[6],\n      rot: mods[7]\n    };\n  }\n\n  // center rectangle\n  if(code === 21) {\n    return {\n      type: 'rect',\n      exp,\n      width: mods[2],\n      height: mods[3],\n      cx: mods[4],\n      cy: mods[5],\n      rot: mods[6]\n    };\n  }\n\n  if(code === 22) {\n    parser.warn('macro aperture lower-left rectangle primitives are deprecated');\n    return {\n      type: 'rectLL',\n      exp,\n      width: mods[2],\n      height: mods[3],\n      x: mods[4],\n      y: mods[5],\n      rot: mods[6]\n    };\n  }\n\n  if(code === 4) {\n    return {\n      type: 'outline',\n      exp,\n      points: mods.slice(3, -1).map(Number),\n      rot: Number(mods[mods.length - 1])\n    };\n  }\n\n  if(code === 5) {\n    return {\n      type: 'poly',\n      exp,\n      vertices: mods[2],\n      cx: mods[3],\n      cy: mods[4],\n      dia: mods[5],\n      rot: mods[6]\n    };\n  }\n\n  if(code === 6) {\n    // moire primitive always has exposure on\n    return {\n      type: 'moire',\n      exp: 1,\n      cx: mods[1],\n      cy: mods[2],\n      dia: mods[3],\n      ringThx: mods[4],\n      ringGap: mods[5],\n      maxRings: mods[6],\n      crossThx: mods[7],\n      crossLen: mods[8],\n      rot: mods[9]\n    };\n  }\n\n  if(code === 7) {\n    // thermal primitive always had exposure on\n    return {\n      type: 'thermal',\n      exp: 1,\n      cx: mods[1],\n      cy: mods[2],\n      outerDia: mods[3],\n      innerDia: mods[4],\n      gap: mods[5],\n      rot: mods[6]\n    };\n  }\n  parser.warn(code + ' is an unrecognized primitive for a macro aperture');\n}\n\n// parse gerber function\n// takes a parser transform stream and a block string\n// g-code set matchers\nlet reMODE = /^G0*([123])/;\nlet reREGION = /^G3([67])/;\nlet reARC = /^G7([45])/;\nlet reBKP_UNITS = /^G7([01])/;\nlet reBKP_NOTA = /^G9([01])/;\nlet reCOMMENT = /^G0*4/;\n\n// tool changes\nlet reTOOL = /^(?:G54)?D0*([1-9]\\d+)/;\n\n// operations\nlet reOP = /D0*([123])$/;\nlet reCOORD = /^(?:G0*[123])?((?:[XYIJ][+-]?\\d+){1,4})(?:D0*[123])?$/;\n\n// parameter code matchers\nlet reUNITS = /^%MO(IN|MM)/;\n// format spec regexp courtesy @summivox\nlet reFORMAT = /^%FS([LT]?)([AI]?)(.*)X([0-7])([0-7])Y\\4\\5/;\nlet rePOLARITY = /^%LP([CD])/;\nlet reSTEP_REP = /^%SR(?:X(\\d+)Y(\\d+)I([\\d.]+)J([\\d.]+))?/;\nlet reTOOL_DEF = /^%ADD0*(\\d{2,})([A-Za-z_\\$][\\w\\-\\.]*)(?:,((?:X?[\\d.]+)*))?/;\nlet reMACRO = /^%AM([A-Za-z_\\$][\\w\\-\\.]*)\\*?(.*)/;\n\nfunction parseToolDef(parser, block) {\n  let format = { places: parser.format.places };\n  let toolMatch = block.match(reTOOL_DEF);\n  let tool = toolMatch[1];\n  let shapeMatch = toolMatch[2];\n  let toolArgs = toolMatch[3] ? toolMatch[3].split('X') : [];\n\n  // get the shape\n  let shape;\n  let maxArgs;\n  if(shapeMatch === 'C') {\n    shape = 'circle';\n    maxArgs = 3;\n  } else if(shapeMatch === 'R') {\n    shape = 'rect';\n    maxArgs = 4;\n  } else if(shapeMatch === 'O') {\n    shape = 'obround';\n    maxArgs = 4;\n  } else if(shapeMatch === 'P') {\n    shape = 'poly';\n    maxArgs = 5;\n  } else {\n    shape = shapeMatch;\n    maxArgs = 0;\n  }\n\n  let val;\n  if(shape === 'circle') {\n    val = [normalizeCoord(toolArgs[0], format)];\n  } else if(shape === 'rect' || shape === 'obround') {\n    val = [normalizeCoord(toolArgs[0], format), normalizeCoord(toolArgs[1], format)];\n  } else if(shape === 'poly') {\n    val = [normalizeCoord(toolArgs[0], format), Number(toolArgs[1]), 0];\n    if(toolArgs[2]) {\n      val[2] = Number(toolArgs[2]);\n    }\n  } else {\n    val = toolArgs.map(Number);\n  }\n\n  let hole = [];\n  if(toolArgs[maxArgs - 1]) {\n    hole = [normalizeCoord(toolArgs[maxArgs - 2], format), normalizeCoord(toolArgs[maxArgs - 1], format)];\n  } else if(toolArgs[maxArgs - 2]) {\n    hole = [normalizeCoord(toolArgs[maxArgs - 2], format)];\n  }\n  let toolDef = { shape, params: val, hole };\n  return parser.push(commandMap.tool(tool, toolDef));\n}\n\nfunction parseMacroDef(parser, block) {\n  let macroMatch = block.match(reMACRO);\n  let name = macroMatch[1];\n  if(name.match(/\\-/)) {\n    parser.warn('hyphens in macro name are illegal: ' + name);\n  }\n  let blockMatch = macroMatch[2].length ? macroMatch[2].split('*') : [];\n  let blocks = blockMatch.filter(Boolean).map((block) => parseMacroBlock(parser, block));\n\n  return parser.push(commandMap.macro(name, blocks));\n}\n\nfunction parse(parser, block) {\n  if(reCOMMENT.test(block)) {\n    return;\n  }\n\n  if(block === 'M02') {\n    return parser.push(commandMap.done());\n  }\n\n  if(reREGION.test(block)) {\n    let regionMatch = block.match(reREGION)[1];\n    let region = regionMatch === '6';\n    return parser.push(commandMap.set('region', region));\n  }\n\n  if(reARC.test(block)) {\n    let arcMatch = block.match(reARC)[1];\n    let arc = arcMatch === '4' ? 's' : 'm';\n    return parser.push(commandMap.set('arc', arc));\n  }\n\n  if(reUNITS.test(block)) {\n    let unitsMatch = block.match(reUNITS)[1];\n    let units = unitsMatch === 'IN' ? 'in' : 'mm';\n    return parser.push(commandMap.set('units', units));\n  }\n\n  if(reBKP_UNITS.test(block)) {\n    let bkpUnitsMatch = block.match(reBKP_UNITS)[1];\n    let backupUnits = bkpUnitsMatch === '0' ? 'in' : 'mm';\n    return parser.push(commandMap.set('backupUnits', backupUnits));\n  }\n\n  if(reFORMAT.test(block)) {\n    let formatMatch = block.match(reFORMAT);\n    let zero = formatMatch[1];\n    let nota = formatMatch[2];\n    let unknown = formatMatch[3];\n    let leading = Number(formatMatch[4]);\n    let trailing = Number(formatMatch[5]);\n    let format = parser.format;\n\n    format.zero = format.zero || zero;\n    if(!format.places) {\n      format.places = [leading, trailing];\n    }\n\n    // warn if zero suppression missing or set to trailing\n    if(!format.zero) {\n      format.zero = 'L';\n      parser.warn('zero suppression missing from format; assuming leading');\n    } else if(format.zero === 'T') {\n      parser.warn('trailing zero suppression has been deprecated');\n    }\n\n    // warn if there were unknown characters in the format spec\n    if(unknown) {\n      parser.warn('unknown characters \"' + unknown + '\" in \"' + block + '\" were ignored');\n    }\n\n    let epsilon = 1.5 * Math.pow(10, -format.places[1]);\n    parser.push(commandMap.set('nota', nota));\n    parser.push(commandMap.set('epsilon', epsilon));\n    return;\n  }\n\n  if(reBKP_NOTA.test(block)) {\n    let bkpNotaMatch = block.match(reBKP_NOTA)[1];\n    let backupNota = bkpNotaMatch === '0' ? 'A' : 'I';\n    return parser.push(commandMap.set('backupNota', backupNota));\n  }\n\n  if(rePOLARITY.test(block)) {\n    let polarity = block.match(rePOLARITY)[1];\n    return parser.push(commandMap.level('polarity', polarity));\n  }\n\n  if(reSTEP_REP.test(block)) {\n    let stepRepeatMatch = block.match(reSTEP_REP);\n    let x = stepRepeatMatch[1] || 1;\n    let y = stepRepeatMatch[2] || 1;\n    let i = stepRepeatMatch[3] || 0;\n    let j = stepRepeatMatch[4] || 0;\n    let sr = { x: Number(x), y: Number(y), i: Number(i), j: Number(j) };\n    return parser.push(commandMap.level('stepRep', sr));\n  }\n\n  if(reTOOL.test(block)) {\n    let tool = block.match(reTOOL)[1];\n    return parser.push(commandMap.set('tool', tool));\n  }\n\n  if(reTOOL_DEF.test(block)) {\n    return parseToolDef(parser, block);\n  }\n\n  if(reMACRO.test(block)) {\n    return parseMacroDef(parser, block);\n  }\n\n  // finally, look for mode commands and operations\n  // they may appear in the same block\n  if(reOP.test(block) || reMODE.test(block) || reCOORD.test(block)) {\n    let opMatch = block.match(reOP);\n    let modeMatch = block.match(reMODE);\n    let coordMatch = block.match(reCOORD);\n    let mode;\n\n    if(modeMatch) {\n      if(modeMatch[1] === '1') {\n        mode = 'i';\n      } else if(modeMatch[1] === '2') {\n        mode = 'cw';\n      } else {\n        mode = 'ccw';\n      }\n\n      parser.push(commandMap.set('mode', mode));\n    }\n\n    if(opMatch || coordMatch) {\n      let opCode = opMatch ? opMatch[1] : '';\n      let coordString = coordMatch ? coordMatch[1] : '';\n      let coord = parseCoord.parse(coordString, parser.format);\n\n      let op = 'last';\n      if(opCode === '1') {\n        op = 'int';\n      } else if(opCode === '2') {\n        op = 'move';\n      } else if(opCode === '3') {\n        op = 'flash';\n      }\n\n      parser.push(commandMap.op(op, coord));\n    }\n\n    return;\n  }\n\n  // if we reach here the block was unhandled, so warn if it is not empty\n  return parser.warn('block \"' + block + '\" was not recognized and was ignored');\n}\n\n// drill parser drill and route modes\nlet drillMode = {\n  DRILL: '5',\n  MOVE: '0',\n  LINEAR: '1',\n  CW_ARC: '2',\n  CCW_ARC: '3'\n};\n\n// parse drill function\n// takes a parser transform stream and a block string\nlet reALTIUM_HINT = /;FILE_FORMAT=(\\d):(\\d)/;\nlet reKI_HINT = /;FORMAT={(.):(.)\\/ (absolute|.+)? \\/ (metric|inch) \\/.+(trailing|leading|decimal|keep)/;\n\nlet reUNITS$1 = /(INCH|METRIC)(?:,([TL])Z)?/;\nlet reTOOL_DEF$1 = /T0*(\\d+)[\\S]*C([\\d.]+)/;\nlet reTOOL_SET = /T0*(\\d+)(?![\\S]*C)/;\nlet reCOORD$1 = /((?:[XYIJA][+-]?[\\d.]+){1,4})(?:G85((?:[XY][+-]?[\\d.]+){1,2}))?/;\nlet reROUTE = /^G0([01235])/;\n\nfunction setUnits(parser, units, line) {\n  let format = units === 'in' ? [2, 4] : [3, 3];\n  if(!parser.format.places) {\n    parser.format.places = format;\n  }\n  return parser.push(commandMap.set('units', units, line));\n}\n\nfunction parseCommentForFormatHints(parser, block, line) {\n  let result = {};\n\n  if(reKI_HINT.test(block)) {\n    let kicadMatch = block.match(reKI_HINT);\n    let leading = Number(kicadMatch[1]);\n    let trailing = Number(kicadMatch[2]);\n    let absolute = kicadMatch[3];\n    let unitSet = kicadMatch[4];\n    let suppressionSet = kicadMatch[5];\n\n    // set format if we got numbers\n    if(Number.isFinite(leading) && Number.isFinite(trailing)) {\n      result.places = [leading, trailing];\n    }\n\n    // send backup notation\n    if(absolute === 'absolute') {\n      parser.push(commandMap.set('backupNota', 'A', line));\n    } else {\n      parser.push(commandMap.set('backupNota', 'I', line));\n    }\n\n    // send units\n    if(unitSet === 'metric') {\n      parser.push(commandMap.set('backupUnits', 'mm', line));\n    } else {\n      parser.push(commandMap.set('backupUnits', 'in', line));\n    }\n\n    // set zero suppression\n    if(suppressionSet === 'leading' || suppressionSet === 'keep') {\n      result.zero = 'L';\n    } else if(suppressionSet === 'trailing') {\n      result.zero = 'T';\n    } else {\n      result.zero = 'D';\n    }\n  }\n\n  // check for altium format hints if the format is not already set\n  else if(reALTIUM_HINT.test(block)) {\n    let altiumMatch = block.match(reALTIUM_HINT);\n\n    result.places = [Number(altiumMatch[1]), Number(altiumMatch[2])];\n  }\n\n  return result;\n}\n\nfunction zeroFromSupression(suppression) {\n  if(suppression === 'T') {\n    return 'L';\n  } else if(suppression === 'L') {\n    return 'T';\n  }\n}\n\nfunction parseUnits(parser, block, line) {\n  let unitsMatch = block.match(reUNITS$1);\n  let units = unitsMatch[1];\n  let suppression = unitsMatch[2];\n\n  if(units === 'METRIC') {\n    setUnits(parser, 'mm', line);\n  } else {\n    setUnits(parser, 'in', line);\n  }\n\n  if(parser.format.zero == null) {\n    parser.format.zero = zeroFromSupression(suppression);\n  }\n}\n\nfunction coordToCommand(parser, block, line) {\n  let coordMatch = block.match(reCOORD$1);\n  let coord = parseCoord.parse(coordMatch[1], parser.format);\n\n  // if there's another match, then it was a slot\n  if(coordMatch[2]) {\n    parser.push(commandMap.op('move', coord, line));\n    parser.push(commandMap.set('mode', 'i', line));\n    coord = parseCoord.parse(coordMatch[2], parser.format);\n\n    return parser.push(commandMap.op('int', coord, line));\n  }\n\n  // get the drill mode if a route command is present\n  if(reROUTE.test(block)) {\n    parser.drillMode = block.match(reROUTE)[1];\n  }\n\n  switch (parser.drillMode) {\n    case drillMode.DRILL:\n      return parser.push(commandMap.op('flash', coord, line));\n\n    case drillMode.MOVE:\n      return parser.push(commandMap.op('move', coord, line));\n\n    case drillMode.LINEAR:\n      parser.push(commandMap.set('mode', 'i', line));\n      return parser.push(commandMap.op('int', coord, line));\n\n    case drillMode.CW_ARC:\n      parser.push(commandMap.set('mode', 'cw', line));\n      return parser.push(commandMap.op('int', coord, line));\n\n    case drillMode.CCW_ARC:\n      parser.push(commandMap.set('mode', 'ccw', line));\n      return parser.push(commandMap.op('int', coord, line));\n  }\n}\n\nfunction parseBlock(parser, block, line) {\n  if(reTOOL_DEF$1.test(block)) {\n    let toolMatch = block.match(reTOOL_DEF$1);\n    let toolCode = toolMatch[1];\n    let toolDia = normalizeCoord(toolMatch[2]);\n    let toolDef = { shape: 'circle', params: [toolDia], hole: [] };\n\n    return parser.push(commandMap.tool(toolCode, toolDef, line));\n  }\n\n  // tool set\n  if(reTOOL_SET.test(block)) {\n    let toolSet = block.match(reTOOL_SET)[1];\n\n    // allow tool set to fall through because it can happen on the\n    // same line as a coordinate operation\n    parser.push(commandMap.set('tool', toolSet, line));\n  }\n\n  if(reCOORD$1.test(block)) {\n    if(!parser.format.places) {\n      parser.format.places = [2, 4];\n      parser.warn('places format missing; assuming [2, 4]');\n    }\n\n    return coordToCommand(parser, block, line);\n  }\n\n  if(block === 'M00' || block === 'M30') {\n    return parser.push(commandMap.done(line));\n  }\n\n  if(block === 'M71') {\n    return setUnits(parser, 'mm', line);\n  }\n\n  if(block === 'M72') {\n    return setUnits(parser, 'in', line);\n  }\n\n  if(block === 'G90') {\n    return parser.push(commandMap.set('nota', 'A', line));\n  }\n\n  if(block === 'G91') {\n    return parser.push(commandMap.set('nota', 'I', line));\n  }\n\n  if(reUNITS$1.test(block)) {\n    return parseUnits(parser, block, line);\n  }\n\n  return;\n}\n\nfunction flush(parser) {\n  console.debug('flush', { parser });\n  if(parser.drillStash.length) {\n    parser.drillStash.forEach((data) => {\n      if(!parser.format.zero && reCOORD$1.test(data.block)) {\n        parser.format.zero = 'T';\n        parser.warn('zero suppression missing and not detectable;' + ' assuming trailing suppression');\n      }\n      parseBlock(parser, data.block, data.line);\n    });\n    parser.drillStash = [];\n  }\n}\n\nfunction parse$2(parser, block) {\n  parser.drillStash = parser.drillStash || [];\n\n  // parse comments for formatting hints and ignore the rest\n  if(block[0] === ';') {\n    // check for kicad format hints\n    let formatHints = parseCommentForFormatHints(parser, block, parser.line);\n\n    Object.keys(formatHints).forEach((key) => {\n      if(!parser.format[key]) {\n        parser.format[key] = formatHints[key];\n      }\n    });\n\n    return;\n  }\n\n  // detect or assume zero suppression\n  if(!parser.format.zero) {\n    if(parser.drillStash.length >= 1000) {\n      flush(parser);\n      return parseBlock(parser, block, parser.line);\n    }\n    if(reCOORD$1.test(block)) {\n      parser.format.zero = parseCoord.detectZero(block);\n      if(parser.format.zero) {\n        let zero = parser.format.zero === 'L' ? 'leading' : 'trailing';\n        parser.warn('zero suppression missing; detected ' + zero + ' suppression');\n        flush(parser);\n        return parseBlock(parser, block, parser.line);\n      }\n    } else if(reUNITS$1.test(block)) {\n      let unitsMatch = block.match(reUNITS$1);\n      let suppression = unitsMatch[2];\n      parser.format.zero = zeroFromSupression(suppression);\n      if(parser.format.zero) {\n        flush(parser);\n        return parseBlock(parser, block, parser.line);\n      }\n    }\n\n    return parser.drillStash.push({ line: parser.line, block });\n  }\n\n  return parseBlock(parser, block, parser.line);\n}\n\nlet parseDrill = { parse: parse$2, flush };\n\n// simple warning class to be emitted when something questionable in the gerber is found\nfunction warning(message, line) {\n  return { message, line };\n}\n\n// generic file parser for gerber and drill files\nlet LIMIT = 65535;\n\nconst ArrayWriter = (arr) =>\n  new WritableStream({\n    write(chunk) {\n      arr.push(chunk);\n    },\n    abort(err) {\n      console.log('ArrayWriter error:', err);\n    }\n  });\n\nconst LineReader = (str, chunkEnd = (pos, str) => (1 + str.indexOf('\\n', pos)) || str.length) => {\n  let pos = 0;\n  return new ReadableStream({\n    start(controller) {\n      for(;;) {\n        if(pos < str.length) {\n          let end =chunkEnd(pos, str);\n          controller.enqueue(str.substring(pos, end));\n          pos = end;\n        } else {\n          controller.close();\n          break;\n        }\n      }\n    }\n  });\n};\n\nfunction readStream(stream, arr) {\n  const reader = stream.getReader();\n  let count = 0;\n  return new Promise((resolve, reject) => {\n    reader.read().then(function processData(res) {\n      if(res.done) {\n        resolve();\n        return;\n      }\n      count++;\n      arr.push(res.value);\n      return reader.read().then(processData);\n    });\n  });\n}\n\nexport class Parser {\n  constructor(places, zero, filetype) {\n    this.stash = '';\n    this.index = 0;\n    this.drillMode = drillMode.DRILL;\n\n    this.syncResult = null;\n    this.line = 0;\n    this.format = { places, zero, filetype };\n  }\n  start() {\n    console.debug('GerberParser start()!');\n  }\n\n  process(chunk, controller) {\n    let { filetype } = this.format;\n    this.controller = controller;\n\n    while(this.index < chunk.length) {\n      let next = getNext(filetype, chunk, this.index);\n      this.index += next.read;\n      this.line += next.lines;\n      this.stash += next.rem;\n      console.debug('process', { next, filetype });\n\n      if(next.block) {\n        if(filetype === 'gerber') {\n          parse(this, next.block);\n        } else {\n          parseDrill.parse(this, next.block);\n        }\n      }\n    }\n  }\n\n  transform(chunk, controller) {\n    let filetype = this.format.filetype;\n\n    const done = controller ? (err) => (err ? controller.error(err) : controller.terminate()) : () => {};\n    // decode buffer to string\n    //chunk = this.decoder.write(chunk);\n    // determine filetype within 65535 characters\n    if(!filetype) {\n      filetype = determine(chunk, this.index, LIMIT);\n      this.index += chunk.length;\n      if(!filetype) {\n        if(this.index >= LIMIT) {\n          return done(new Error('unable to determine filetype'));\n        }\n        this.stash += chunk;\n        return done();\n      }\n      this.format.filetype = filetype;\n      this.index = 0;\n      if(filetype == 'drill') this.drillStash = [];\n    }\n    chunk = this.stash + chunk;\n    console.debug('chunk', chunk);\n    this.stash = '';\n    this.process(chunk, controller);\n    this.index = 0;\n\n    if(chunk === null) {\n      if(controller) controller.terminate();\n      else done();\n    }\n  }\n\n  flush(controller) {\n    if(this.format.filetype === 'drill') parseDrill.flush(this);\n\n    return typeof controller == 'object' ? controller.terminate() : controller && controller();\n  }\n\n  push(data) {\n    if(data.line === -1) data.line = this.line;\n\n    if(this.syncResult) this.syncResult.push(data);\n    else if(this.controller) this.controller.enqueue(data);\n    else this.writable.write(data);\n  }\n\n  warn(message) {\n    console.warn(warning(message, this.line));\n    //  this.emit('warning', warning(message, this.line));\n  }\n\n  parseSync(file) {\n    let filetype = determine(file, this.index, 100 * LIMIT);\n    this.format.filetype = filetype;\n    this.syncResult = [];\n    this.process(file);\n    this.flush();\n\n    return this.syncResult;\n  }\n\n  static async parse(file) {\n    let ret = [];\n    let parser = new Parser();\n\n    await LineReader(file).pipeThrough(new TransformStream(parser)).pipeTo(ArrayWriter(ret));\n    // await readStream(LineReader(file).pipeThrough(new TransformStream(parser)), ret);\n    return ret;\n  }\n}\n\nexport default Parser;\n",
			"file": "lib/gerber/parser.js",
			"file_size": 28849,
			"file_write_time": 132438494447630613,
			"settings":
			{
				"buffer_size": 28825,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/roman/Dokumente/Sources/plot-cv/tmp/7seg-2.54.GBL",
			"settings":
			{
				"buffer_size": 3367,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/roman/Dokumente/Sources/plot-cv/tmp/7seg-2.54.GTL",
			"settings":
			{
				"buffer_size": 4205,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/roman/Dokumente/Sources/plot-cv/tmp/7seg-2.54.TXT",
			"settings":
			{
				"buffer_size": 984,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Run with Node.JS",
	"build_system_choices":
	[
		[
			[
				[
					"Build debug",
					""
				],
				[
					"List",
					""
				],
				[
					"Rebuild CTags",
					""
				],
				[
					"Run with Node.JS",
					""
				],
				[
					"antlr4 - Build current .g4 file",
					""
				],
				[
					"clang-format",
					""
				],
				[
					"prettier",
					""
				],
				[
					"prettier ${file_path}",
					""
				]
			],
			[
				"Run with Node.JS",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"prett",
				"SVGO: Prettify SVG"
			],
			[
				"min",
				"SVGO: Minify SVG"
			],
			[
				"remove pac",
				"Package Control: Remove Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"isntall",
				"Package Control: Install Package"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"",
				"Bookmarks: Select All"
			],
			[
				"adva",
				"Package Control: Advanced Install Package"
			],
			[
				"add ",
				"Package Control: Add Repository"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"extract pack",
				"PackageResourceViewer: Extract Package"
			],
			[
				"symbol",
				"CTags: Show Symbols (all)"
			],
			[
				"ctags",
				"CTags: Show Symbols (file)"
			],
			[
				"svgo",
				"SVGO: Prettify SVG"
			],
			[
				"install pack",
				"Package Control: Install Package"
			],
			[
				"extract fn",
				"Extract Javascript Function to Regular Function"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"add rep",
				"Package Control: Add Repository"
			],
			[
				"install pac",
				"Package Control: Install Package"
			],
			[
				"install ",
				"Package Control: Install Package"
			],
			[
				"cmake",
				"CMake Format: Format Selection"
			],
			[
				"remove ",
				"Package Control: Remove Package"
			],
			[
				"list p",
				"Package Control: List Packages"
			],
			[
				"outli",
				"Browse Mode: Outline (Right)"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"list pac",
				"Package Control: List Packages"
			],
			[
				"prettier",
				"JsPrettier: Format Code"
			],
			[
				"install pa",
				"Package Control: Install Package"
			],
			[
				"Package Control: ",
				"Package Control: Remove Package"
			],
			[
				"instalk",
				"Package Control: Install Package"
			],
			[
				"Package Control: install",
				"Package Control: Install Package"
			],
			[
				"extract",
				"Extract Sublime Package: Extract all packages"
			],
			[
				"extra",
				"Extract Sublime Package: Extract all packages"
			],
			[
				"build",
				"Build: Cancel"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 362.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Sources/plot-cv",
		"/home/roman/Sources/plot-cv/lib",
		"/home/roman/Sources/plot-cv/lib/async",
		"/home/roman/Sources/plot-cv/lib/gerber"
	],
	"file_history":
	[
		"/home/roman/Sources/plot-cv/lib/gerber/parser.js",
		"/home/roman/Dokumente/Sources/plot-cv/tmp/555-Synth.GTL",
		"/home/roman/Dokumente/Sources/plot-cv/tmp/5V-to-12V-Converter.GTL",
		"/home/roman/Dokumente/Sources/plot-cv/tmp/5V-to-12V-Converter-ManyDiodes.GTL",
		"/home/roman/Dokumente/Sources/plot-cv/tmp/7seg-2.54.GTL",
		"/home/roman/Dokumente/Sources/plot-cv/tmp/7seg-2.54.sch.GTL",
		"/home/roman/Dokumente/Sources/plot-cv/tmp/7seg.GTL",
		"/home/roman/Dokumente/Sources/plot-cv/tmp/AM-Crystal-RX-LM324.GTL",
		"/home/roman/Dokumente/Sources/plot-cv/tmp/FM Radio Circuit.GTL",
		"/home/roman/Dokumente/Sources/plot-cv/tmp/FM-Radio-Circuit.GTL",
		"/home/roman/Dokumente/Sources/plot-cv/tmp/FM Radio Simple Receiver.GTL",
		"/home/roman/Dokumente/Sources/plot-cv/tmp/FM-Radio-Simple-Receiver.GTL",
		"/home/roman/Sources/plot-cv/lib/dom/svg.js",
		"/home/roman/Dokumente/Sources/an-tronics/Makefile",
		"/home/roman/Sources/plot-cv/server.js",
		"/home/roman/Dokumente/Sources/plot-cv/tmp/7seg-2.54.TXT",
		"/home/roman/Dokumente/Sources/plot-cv/tmp/7seg-2.54_front.svg",
		"/home/roman/Sources/plot-cv/resolve-imports.js",
		"/home/roman/Sources/plot-cv/test-xml.js",
		"/home/roman/Sources/plot-cv/lib/deep.js",
		"/home/roman/Dokumente/Sources/plot-cv/tmp/FM Simple Regen.GTL",
		"/home/roman/Dokumente/Sources/plot-cv/tmp/Headphone-Amplifier-ClassAB.GTL",
		"/home/roman/Dokumente/Sources/plot-cv/tmp/Headphone-Amplifier-ClassAB-Stereo.GTL",
		"/home/roman/Dokumente/Sources/plot-cv/tmp/NE556-CD4069-Synth-Toy-CableConn.GTL",
		"/home/roman/Sources/plot-cv/lib/util.js",
		"/home/roman/Sources/plot-cv/lib/eagle/components/wire.js",
		"/home/roman/Sources/plot-cv/lib/geom/point.js",
		"/home/roman/Sources/plot-cv/lib/geom/bbox.js",
		"/home/roman/Sources/plot-cv/test-ini.js",
		"/home/roman/Sources/plot-cv/lib/json/path.js",
		"/home/roman/Sources/plot-cv/lib/geom/size.js",
		"/home/roman/Sources/plot-cv/lib/eagle/element.js",
		"/home/roman/Sources/plot-cv/lib/eagle/document.js",
		"/home/roman/Sources/plot-cv/lib/tXml.js",
		"/home/roman/Sources/plot-cv/lib/geom/rect.js",
		"/home/roman/Sources/plot-cv/lib/xml.js",
		"/home/roman/Sources/plot-cv/lib/lazyInitializer.js",
		"/home/roman/Sources/plot-cv/lib/filesystem.js",
		"/home/roman/Sources/plot-cv/lib/path.js",
		"/home/roman/Sources/plot-cv/ini-grammar.js",
		"/home/roman/Sources/plot-cv/lib/eagle/components/grid.js",
		"/home/roman/Sources/plot-cv/lib/eagle/components/rectangle.js",
		"/home/roman/Sources/plot-cv/lib/eagle/renderUtils.js",
		"/home/roman/Sources/plot-cv/main.js",
		"/home/roman/Sources/plot-cv/lib/async/debounce.js",
		"/home/roman/Sources/plot-cv/lib/dom/node.js",
		"/home/roman/Sources/plot-cv/lib/eagle/node.js",
		"/home/roman/Sources/plot-cv/lib/eagle/boardRenderer.js",
		"/home/roman/Sources/plot-cv/lib/eagle/components/textElement.js",
		"/home/roman/Sources/plot-cv/lib/eagle/components/circle.js",
		"/home/roman/Sources/plot-cv/lib/eagle/components/cross.js",
		"/home/roman/Sources/plot-cv/lib/eagle/components/instance.js",
		"/home/roman/Sources/plot-cv/lib/eagle/components/origin.js",
		"/home/roman/Sources/plot-cv/lib/eagle/svgRenderer.js",
		"/home/roman/Sources/plot-cv/lib/eagle/components/svg.js",
		"/home/roman/Sources/plot-cv/lib/eagle/components/pad.js",
		"/home/roman/Sources/plot-cv/tmp/7seg-2.54.brd",
		"/home/roman/Sources/plot-cv/src/imgui-viewer.cpp",
		"/home/roman/Sources/plot-cv/src/imgui-viewer.h",
		"/home/roman/Sources/plot-cv/useDimensions.js",
		"/home/roman/Sources/plot-cv/lib/devtools.js",
		"/home/roman/Sources/plot-cv/lib/container/hashList.js",
		"/home/roman/Sources/plot-cv/lib/eagle/components/drawing.js",
		"/home/roman/Sources/plot-cv/style.css",
		"/home/roman/Sources/plot-cv/lib/trkl.js",
		"/home/roman/Sources/plot-cv/lib/eagle/components/background.js",
		"/home/roman/Sources/plot-cv/tmp/7seg-2.54.GBL",
		"/home/roman/Sources/plot-cv/components.js",
		"/home/roman/Sources/plot-cv/lib/dom/preactComponent.js",
		"/home/roman/Dokumente/Sources/plot-cv/node_modules/htm/preact/standalone.mjs",
		"/home/roman/Dokumente/Sources/plot-cv/node_modules/htm/preact/standalone.module.js",
		"/home/roman/Sources/plot-cv/standalone.module.js",
		"/home/roman/Sources/plot-cv/lib/hooks.js",
		"/home/roman/Sources/plot-cv/imgui-viewer.cmake",
		"/home/roman/Sources/plot-cv/imgui/example_sdl_opengl3/main.cpp",
		"/home/roman/Sources/plot-cv/test-autoplacer.mjs",
		"/home/roman/.config/sublime-text-3/Packages/SideBarEnhancements/Default (Linux).sublime-keymap",
		"/home/roman/.config/sublime-text-3/Packages/Esprima/Esprima.sublime-settings",
		"/home/roman/.config/sublime-text-3/Packages/Web Inspector/swi.sublime-settings",
		"/home/roman/.config/sublime-text-3/Packages/SideBarEnhancements/Side Bar.sublime-settings",
		"/home/roman/.config/sublime-text-3/Packages/User/Side Bar.sublime-settings",
		"/home/roman/.config/sublime-text-3/Packages/MySignaturePlugin/MySignaturePlugin.sublime-settings",
		"/home/roman/Sources/plot-cv/plot-cv.sublime-project",
		"/home/roman/Sources/plot-cv/highgui-viewer.cmake",
		"/home/roman/Sources/plot-cv/src/plot-cv.h",
		"/home/roman/Sources/plot-cv/src/plot-cv.cpp",
		"/home/roman/Sources/plot-cv/quickjs/quickjs.c",
		"/home/roman/Sources/plot-cv/quickjs/quickjs.h",
		"/home/roman/Sources/plot-cv/src/js.h",
		"/home/roman/Sources/plot-cv/src/js.cpp",
		"/home/roman/Sources/plot-cv/quickjs-2020-07-05/quickjs-libc.c",
		"/home/roman/Sources/plot-cv/src/cli.cpp",
		"/home/roman/Sources/plot-cv/CMakeLists.txt",
		"/home/roman/Sources/plot-cv/src/jsbindings.h",
		"/home/roman/Sources/plot-cv/src/jsbindings.cpp",
		"/home/roman/Sources/plot-cv/test-quickjs.js",
		"/home/roman/Sources/plot-cv/imgui/imgui.cpp",
		"/home/roman/Sources/plot-cv/Euclidean_Voronoi_diagram (1).svg",
		"/home/roman/Sources/plot-cv/CMakeFiles/3.17.20200504-gd56f806/CompilerIdC/CMakeCCompilerId.c",
		"/home/roman/Sources/plot-cv/depth-perception.svg",
		"/home/roman/Sources/plot-cv/src/highgui-viewer.cpp",
		"/home/roman/Sources/plot-cv/js-bindings.cmake",
		"/home/roman/Sources/plot-cv/quickjs/CMakeLists.txt",
		"/home/roman/.config/sublime-text-3/Packages/User/NewScheme.tmTheme",
		"/home/roman/Sources/plot-cv/quickjs/qjsc.c",
		"/home/roman/Dokumente/Sources/plot-cv/sub-pkgs.tmp",
		"/home/roman/Sources/plot-cv/quickjs/qjs.c",
		"/home/roman/Dokumente/Sources/plot-cv/sdl2-config.cmake",
		"/usr/local/share/cmake-3.18/Modules/FindGLEW.cmake",
		"/home/roman/Dokumente/Sources/imgui/examples/example_glfw_vulkan/CMakeLists.txt",
		"/home/roman/Sources/plot-cv/lib/dom/cache.js",
		"/home/roman/Dokumente/Sources/inkscape-0.92.4/share/extensions/color_randomize.py",
		"/home/roman/Sources/plot-cv/lib/eagle/renderer.js",
		"/home/roman/Sources/plot-cv/lib/geom/transformation.js",
		"/home/roman/Sources/plot-cv/static/svg/cnc-frezovani.svg",
		"/home/roman/Sources/plot-cv/static/svg/cnc-obrabeni.svg",
		"/home/roman/Sources/plot-cv/Voronoi_diagram.svg",
		"/home/roman/Sources/plot-cv/static/svg/voronoi.svg",
		"/home/roman/Sources/plot-cv/static/svg/voronoi-square.svg",
		"/home/roman/Sources/plot-cv/cnc-milling.svg",
		"/home/roman/Sources/plot-cv/cnc-turning.svg",
		"/home/roman/Sources/plot-cv/3d-printers.svg",
		"/home/roman/Sources/plot-cv/cutting-machines.svg",
		"/home/roman/Sources/plot-cv/cnc-machines.svg",
		"/home/roman/Sources/plot-cv/static/svg/hide-black.svg",
		"/home/roman/Sources/plot-cv/CNC_Fraesen.svg",
		"/home/roman/Sources/plot-cv/CNC_Fraesen (1).svg",
		"/home/roman/Sources/plot-cv/cnc-obrabeni.svg"
	],
	"find":
	{
		"height": 42.0
	},
	"find_in_files":
	{
		"height": 213.0,
		"where_history":
		[
			"/home/roman/Sources/plot-cv,*.js,CMakeLists.txt,-*/node_modules/*,/home/roman/Sources/plot-cv/quickjs,*.c,*.h,/home/roman/Sources/plot-cv/src,*.cpp,*.h",
			"/home/roman/Sources/plot-cv,*.js,CMakeLists.txt,-*/node_modules/*,/home/roman/Sources/plot-cv/quickjs,*.c,*.h",
			"/home/roman/Sources/plot-cv/lib,*.js,CMakeLists.txt,-*/node_modules/*,/home/roman/Sources/plot-cv/quickjs,*.c,*.h",
			"/home/roman/Sources/plot-cv,*.js,CMakeLists.txt,-*/node_modules/*,/home/roman/Sources/plot-cv/quickjs,*.c,*.h",
			"/home/roman/Sources/plot-cv,*.js,CMakeLists.txt,-*/node_modules/*",
			"/home/roman/Sources/plot-cv,*.js,CMakeLists.txt",
			"/home/roman/Sources/plot-cv/lib,*.js,CMakeLists.txt",
			"/home/roman/Sources/plot-cv,*.js,CMakeLists.txt",
			"/home/roman/Sources/plot-cv,*.js",
			"/home/roman/Sources/plot-cv/lib",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"read",
			"chunkEnd",
			"ByteReader",
			"chunkSize",
			"ByteReader",
			"LineRea",
			"LineReader",
			"PipeTo",
			"LineReader",
			"PipeToRe",
			"RepeaterSink",
			"Repeater",
			"done",
			"if.*\\.done",
			"\\.done .*=",
			"\\.done.*=",
			"done",
			"map =",
			"async.js",
			"^var ",
			"oncePromise",
			"consume",
			"for await",
			"Repeater",
			"new Repea",
			"Gerber.*parse",
			"Gerber.parse",
			"parseBlock",
			"drillStash",
			"drill",
			"new Point\\(",
			"new Point",
			"Polygon",
			"geom",
			"geom.js",
			"svg =",
			"LineRead",
			"getNext",
			"parseDrill",
			"drill.*flush",
			"drill.*=",
			"drill",
			"parseDrill",
			"flush\\(",
			"drillStash",
			"drillStah",
			"class.*Pars",
			"drillStash",
			"determine",
			"determin",
			"determine",
			"xcellon",
			"GerberParser",
			"Parser",
			"GERBER_RS274X",
			"formatToExt",
			"BoardToGerber",
			"GPI",
			"gpi",
			"EXCELL",
			"GetLayer\\(",
			"         ",
			"GetLayer\\(",
			"element =",
			"GetLay",
			"AddLayer\\(",
			"GetLay",
			"flatten =",
			"GenerateFla",
			"flatten",
			"deep.flatten",
			"flatten",
			"svg =",
			"svg",
			".svg",
			"cachedFetch =",
			"FetchCached =",
			"printReturnValue",
			"NormalizeRes",
			"FetchCached =",
			"CachedFe",
			"NormalizeResponse",
			"CachedFe",
			"printReturn",
			"printReturnValue",
			"Util.tryFunction",
			"isAsync",
			"FetchCac",
			"toString =",
			"updateList",
			"getMeasure",
			"documentTitle",
			"Button,",
			"Button, ",
			"ResponseData",
			"svg =",
			"NormalizeResponse",
			"GerberToGcode",
			"new BBox",
			"weakAss",
			"import.*toXML",
			"toString",
			"iconFile",
			"png",
			"Icon",
			"});\n",
			"makeIDeskEntry",
			"bindProperties =",
			"getter =",
			"memoize",
			"memoize =",
			"Util.typeOf",
			"Util.type",
			"className",
			"memoize",
			"getter\\(",
			"Util.getter",
			"getter =",
			"zy",
			"lazy",
			"Util.get[^ ]*[Ss]et",
			"memoize",
			"Util.memoize =",
			"size =",
			"makeIDeskEntry",
			"split",
			"});",
			"import.*tXml"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"export const ",
			"let visible = !layer || useTrkl(layer.handlers.visible)",
			"/",
			"${TARGET_NAME}",
			"><",
			"#",
			"console.debug",
			"this.debug",
			"console.log",
			"_ref$liveMeasure",
			"liveRef",
			"refLiveMeasure",
			"GcodeParser",
			"DEPENDS ${QJSC_DEPS}",
			"#ffff4b",
			"new RGBA",
			"js_mat_vector<\\1>::get",
			"JS_PROP_ENUMERABLE",
			"JS_DefinePropertyValueStr",
			"JS_NewUint32",
			"cv::Mat* m = &js_mat_data(ctx, this_val)->mat",
			"cv::Mat* \\1 = js_mat_data",
			"Enable dump ",
			"",
			"\\1console.debug",
			"log(",
			"position",
			" ",
			"g",
			"\\1//\\2",
			"Util.log('Util.stack:'",
			"new ",
			"",
			"pathTransform",
			"",
			"(ES6Env.cwd,",
			"\\1//\\2",
			"console.log",
			"{Util.ansi.text(modulePath,1,36)}",
			"#",
			"hex",
			"obj",
			"target",
			"",
			".",
			"RAD2DEG",
			"DEG2RAD",
			"Functional._defprop",
			"return !!(this.mode & os.\\1);",
			"  console.log(`filesystem.",
			"view",
			"HAVE_LTO_FLAG",
			"${SO_NAME}",
			"${A_NAME}",
			"A_NAME",
			"//console.log",
			"console.log",
			"map().filter",
			"map()",
			"flat()",
			" \"true\"",
			"\"",
			"[-\\\\w]",
			"\\1"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 395,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"color_scheme": "Packages/Outline/outline.hidden-tmTheme",
							"current_file": "/home/roman/Sources/plot-cv/list-proxies.js",
							"outline_rename_mode": false,
							"sublime_recent_sort_is_transient": false,
							"symkeys":
							[
								[
									419,
									438
								],
								[
									959,
									968
								],
								[
									1189,
									1221
								],
								[
									1252,
									1285
								],
								[
									1455,
									1488
								],
								[
									1576,
									1609
								],
								[
									1648,
									1677
								],
								[
									1763,
									1783
								],
								[
									2004,
									2010
								],
								[
									2074,
									2080
								],
								[
									2120,
									2129
								],
								[
									2149,
									2197
								],
								[
									2202,
									2203
								],
								[
									2388,
									2403
								],
								[
									2443,
									2464
								],
								[
									2904,
									2925
								],
								[
									2964,
									2987
								],
								[
									4104,
									4115
								],
								[
									4782,
									4858
								],
								[
									5026,
									5037
								],
								[
									5044,
									5050
								],
								[
									5077,
									5089
								],
								[
									5102,
									5108
								]
							],
							"symlist":
							[
								"Proxy",
								"(prop) =>",
								".prototype.valueOf = function ()",
								".prototype.toSource = function ()",
								".prototype.toString = function ()",
								".prototype.check = function (url)",
								".prototype.ping = function ()",
								"(resolve, reject) =>",
								" () =>",
								" () =>",
								" (err) =>",
								"    function finish(msg, start",
								")",
								"main",
								"async (push, stop) =>",
								"async (push, stop) =>",
								"async (err, proxies) =>",
								"async () =>",
								"async writeResults",
								"txt: (r)",
								"(p) =>",
								"json: (r)",
								"(p) =>"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				}
			]
		},
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 1,
					"file": "main.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 66855,
						"regions":
						{
						},
						"selection":
						[
							[
								21383,
								21383
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 11422.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/home/roman/Dokumente/Sources/plot-cv/tmp/555-Synth.GTL",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1653,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "list-proxies.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5355,
						"regions":
						{
						},
						"selection":
						[
							[
								4301,
								4301
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2280.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "lib/util.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 132143,
						"regions":
						{
						},
						"selection":
						[
							[
								40237,
								40237
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 27080.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "lib/async/helpers.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2848,
						"regions":
						{
						},
						"selection":
						[
							[
								4,
								4
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "lib/async/iterify.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1198,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "test-quickjs.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6634,
						"regions":
						{
						},
						"selection":
						[
							[
								3876,
								3876
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1322.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "lib/gerber/parser.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 28825,
						"regions":
						{
						},
						"selection":
						[
							[
								25612,
								25612
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 18862.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "/home/roman/Dokumente/Sources/plot-cv/tmp/7seg-2.54.GBL",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3367,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "/home/roman/Dokumente/Sources/plot-cv/tmp/7seg-2.54.GTL",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4205,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "/home/roman/Dokumente/Sources/plot-cv/tmp/7seg-2.54.TXT",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 984,
						"regions":
						{
						},
						"selection":
						[
							[
								78,
								78
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 42.0
	},
	"input":
	{
		"height": 77.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.799193937882,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 150.0
	},
	"output.exec":
	{
		"height": 286.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Run with NVM Node.JS 14.x",
	"project": "plot-cv.sublime-project",
	"replace":
	{
		"height": 75.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"list-p",
				"list-proxies.js"
			],
			[
				"iter",
				"lib/async/iterify.js"
			],
			[
				"util",
				"lib/util.js"
			],
			[
				"gerber",
				"lib/gerber/parser.js"
			],
			[
				"main",
				"main.js"
			],
			[
				"server",
				"server.js"
			],
			[
				"svg.",
				"lib/dom/svg.js"
			],
			[
				"deep",
				"lib/deep.js"
			],
			[
				"main.js",
				"main.js"
			],
			[
				"point",
				"lib/geom/point.js"
			],
			[
				"wire.",
				"lib/eagle/components/wire.js"
			],
			[
				"util.",
				"lib/util.js"
			],
			[
				"util.j",
				"lib/util.js"
			],
			[
				"bbox",
				"lib/geom/bbox.js"
			],
			[
				"docu",
				"lib/eagle/document.js"
			],
			[
				"size.",
				"lib/geom/size.js"
			],
			[
				"elem",
				"lib/eagle/element.js"
			],
			[
				"poin",
				"lib/geom/point.js"
			],
			[
				"xml",
				"lib/tXml.js"
			],
			[
				"size",
				"lib/geom/size.js"
			],
			[
				"rect.j",
				"lib/geom/rect.js"
			],
			[
				"test-i",
				"test-ini.js"
			],
			[
				"rect",
				"lib/geom/rect.js"
			],
			[
				"lazyIni",
				"lib/lazyInitializer.js"
			],
			[
				"test-ini",
				"test-ini.js"
			],
			[
				"xml.j",
				"test-xml.js"
			],
			[
				"xml.js",
				"lib/xml.js"
			],
			[
				"ini-gr",
				"ini-grammar.js"
			],
			[
				"path.j",
				"lib/path.js"
			],
			[
				"filesys",
				"lib/filesystem.js"
			],
			[
				"ini-gra",
				"ini-grammar.js"
			],
			[
				"ini",
				"test-ini.js"
			],
			[
				"grid",
				"lib/eagle/components/grid.js"
			],
			[
				"node.j",
				"lib/eagle/node.js"
			],
			[
				"node.js",
				"lib/dom/node.js"
			],
			[
				"deboun",
				"lib/async/debounce.js"
			],
			[
				"pad.js",
				"lib/eagle/components/pad.js"
			],
			[
				"debounc",
				"lib/async/debounce.js"
			],
			[
				"7seg-",
				"tmp/7seg-2.54.brd"
			],
			[
				"renderUtil",
				"lib/eagle/renderUtils.js"
			],
			[
				"style",
				"style.css"
			],
			[
				"renderu",
				"lib/eagle/renderUtils.js"
			],
			[
				"trkl",
				"lib/trkl.js"
			],
			[
				"parser",
				"lib/gerber/parser.js"
			],
			[
				"7seg",
				"tmp/7seg-2.54.GBL"
			],
			[
				"com",
				"components.js"
			],
			[
				"stasn",
				"standalone.module.js"
			],
			[
				"preact",
				"lib/dom/preactComponent.js"
			],
			[
				"imgui-view",
				"src/imgui-viewer.h"
			],
			[
				"main.cpp",
				"imgui/example_sdl_opengl3/main.cpp"
			],
			[
				"imgui-v",
				"imgui-viewer.cmake"
			],
			[
				"highgui",
				"highgui-viewer.cmake"
			],
			[
				"imgui",
				"imgui-viewer.cmake"
			],
			[
				"test-qui",
				"test-quickjs.js"
			],
			[
				"quickjs",
				"quickjs/quickjs.c"
			],
			[
				"quickjs-li",
				"quickjs-2020-07-05/quickjs-libc.c"
			],
			[
				"cli.cp",
				"src/cli.cpp"
			],
			[
				"plot-cv.h",
				"src/plot-cv.h"
			],
			[
				"plot-cv",
				"src/plot-cv.cpp"
			],
			[
				"js.h",
				"src/js.h"
			],
			[
				"quickjs.c",
				"quickjs/quickjs.c"
			],
			[
				"quickjs.h",
				"quickjs/quickjs.h"
			],
			[
				"cli.cpp",
				"src/cli.cpp"
			],
			[
				"jsbind",
				"src/jsbindings.cpp"
			],
			[
				"js.cpp",
				"src/js.cpp"
			],
			[
				"cmake",
				"CMakeLists.txt"
			],
			[
				"cli.",
				"src/cli.cpp"
			],
			[
				"highg",
				"src/highgui-viewer.cpp"
			],
			[
				"js-bin",
				"js-bindings.cmake"
			],
			[
				"plot-cv.cpp",
				"src/plot-cv.cpp"
			],
			[
				"cmakeli",
				"quickjs/CMakeLists.txt"
			],
			[
				"qjsc.c",
				"quickjs/qjsc.c"
			],
			[
				"qjsc.",
				"quickjs/qjsc.c"
			],
			[
				"qjs.c",
				"quickjs/qjs.c"
			],
			[
				"high",
				"highgui-viewer.cmake"
			],
			[
				"cmakel",
				"CMakeLists.txt"
			],
			[
				"rect.js",
				"lib/geom/rect.js"
			],
			[
				"cache.js",
				"lib/dom/cache.js"
			],
			[
				"compo",
				"components.js"
			],
			[
				"util.js",
				"lib/util.js"
			],
			[
				"textEle",
				"lib/eagle/components/textElement.js"
			],
			[
				"compon",
				"components.js"
			],
			[
				"debounce",
				"lib/async/debounce.js"
			],
			[
				"transfor",
				"lib/geom/transformation.js"
			],
			[
				"-squa",
				"static/svg/voronoi-square.svg"
			],
			[
				"voronoi.sv",
				"static/svg/voronoi.svg"
			],
			[
				"voro",
				"Voronoi_diagram.svg"
			],
			[
				"obra",
				"static/svg/cnc-obrabeni.svg"
			],
			[
				"frezo",
				"static/svg/cnc-frezovani.svg"
			],
			[
				"transfo",
				"lib/geom/transformation.js"
			],
			[
				"board",
				"lib/eagle/boardRenderer.js"
			],
			[
				"comp",
				"components.js"
			],
			[
				"mai",
				"main.js"
			],
			[
				"cnc-fre",
				"static/svg/cnc-frezovani.svg"
			],
			[
				"rect.",
				"lib/geom/rect.js"
			],
			[
				"ser",
				"server.js"
			],
			[
				"style.cs",
				"style.css"
			],
			[
				"main.",
				"main.js"
			],
			[
				"trans",
				"lib/geom/transformation.js"
			],
			[
				"7seg-2",
				"tmp/7seg-2.54.brd"
			],
			[
				"xpath",
				"lib/xml/xpath.js"
			],
			[
				"svgre",
				"lib/eagle/svgRenderer.js"
			],
			[
				"timer",
				"lib/dom/timer.js"
			],
			[
				"dom.",
				"lib/dom.js"
			],
			[
				"eleme",
				"lib/dom/element.js"
			],
			[
				"tlite",
				"lib/tlite.js"
			],
			[
				"useDim",
				"useDimensions.js"
			],
			[
				"element",
				"lib/dom/element.js"
			],
			[
				"dom",
				"lib/dom.js"
			],
			[
				"style.css",
				"style.css"
			],
			[
				"quickjs.",
				"quickjs/quickjs.c"
			],
			[
				"cfg.",
				"quickjs/cfg.sh"
			],
			[
				"cmakelist",
				"quickjs/CMakeLists.txt"
			],
			[
				"path.",
				"lib/json/path.js"
			],
			[
				"colorDis",
				"lib/color/distanceChecker.js"
			],
			[
				"test-xml",
				"test-xml.js"
			],
			[
				"rgba",
				"lib/color/rgba.js"
			],
			[
				"resolve",
				"resolve-imports.js"
			],
			[
				"wire",
				"lib/eagle/components/wire.js"
			],
			[
				"geom",
				"lib/geom.js"
			],
			[
				"resol",
				"resolve-imports.js"
			],
			[
				"resolve-impo",
				"resolve-imports.js"
			],
			[
				"js_rect",
				"src/js_rect.cpp"
			],
			[
				"jsbin",
				"src/jsbindings.h"
			],
			[
				"cutils.h",
				"quickjs/cutils.h"
			],
			[
				"js_mat",
				"src/js_mat.cpp"
			],
			[
				"js_cont",
				"src/js_contour.cpp"
			],
			[
				"js_point",
				"src/js_point.cpp"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 1050.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 262.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
