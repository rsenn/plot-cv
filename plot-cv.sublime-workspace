{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Argu",
				"ArgumentType"
			],
			[
				"define",
				"defineProperty"
			],
			[
				"exists",
				"existsAndNotEmpty"
			],
			[
				"RETURN_",
				"RETURN_VALUE_PATH"
			],
			[
				"constr",
				"constructor"
			],
			[
				"RE",
				"deep.RETURN_VALUE_PATH"
			],
			[
				"CXXRec",
				"CXXRecordDecl"
			],
			[
				"CXXReco",
				"CXXRecordDecl"
			],
			[
				"des",
				"desugared"
			],
			[
				"con",
				"constructor"
			],
			[
				"jsm_start_",
				"jsm_start_interactive3"
			],
			[
				"by",
				"byobRequest"
			],
			[
				"Read",
				"ReadableStreamBYOBRequest"
			],
			[
				"js_by",
				"js_readable_byob_request"
			],
			[
				"BY",
				"BYOB_REQUEST_METHOD_RESPONDWITHNEWVIEW"
			],
			[
				"JS_",
				"JS_NewObjectProtoClass"
			],
			[
				"JS_Get",
				"JS_GetPropertyUint32"
			],
			[
				"is_",
				"is_exception"
			],
			[
				"JS_T",
				"JS_ThrowInternalError"
			],
			[
				"Repe",
				"RepeaterItem"
			],
			[
				"WRITER_PROP",
				"WRITER_PROP_READY"
			],
			[
				"JS_Throw",
				"JS_ThrowInternalError"
			],
			[
				"to",
				"toStringTag"
			],
			[
				"Der",
				"DereferenceError"
			],
			[
				"Dere",
				"DereferenceError"
			],
			[
				"Is",
				"IsPunctuator"
			],
			[
				"js_magic_fun",
				"js_magic_function"
			],
			[
				"js_queue_iter",
				"js_queue_iterator_class_id"
			],
			[
				"js_queue_itreat",
				"js_queue_iterator_class_id"
			],
			[
				"js_",
				"js_archive_mode"
			],
			[
				"JS_GetP",
				"JS_GetPropertyStr"
			],
			[
				"JS_Set",
				"JS_SetPropertyUint32"
			],
			[
				"ENTRY_IS",
				"ENTRY_ISDATAENCRYPTED"
			],
			[
				"js_archivema",
				"js_archivematch_class_id"
			],
			[
				"JS_NewObjec",
				"JS_NewObjectProtoClass"
			],
			[
				"Module",
				"ModuleLoaderContext"
			],
			[
				"JS_Th",
				"JS_ThrowTypeError"
			],
			[
				"ModuleLo",
				"ModuleLoaderContext"
			],
			[
				"escape",
				"escape_noquote_tab"
			],
			[
				"max",
				"max_array_length"
			],
			[
				"tty",
				"tty_set_raw"
			],
			[
				"getOwnPrope",
				"getOwnPropertyDescriptor"
			],
			[
				"PATH_SKIP",
				"PATH_SKIP_SEPARATOR"
			],
			[
				"ListIterat",
				"ListIteratorKind"
			],
			[
				"_f",
				"_wfindnext64"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"JS_PROP_",
				"JS_PROP_CONFIGURABLE"
			],
			[
				"JS_GetPr",
				"JS_GetPropertyStr"
			],
			[
				"js_sock",
				"js_sockaddr_data"
			],
			[
				"SET_",
				"SET_CONSOLE_MODE"
			],
			[
				"ERA",
				"ERASE_IN_LINE"
			],
			[
				"js_misc_set",
				"js_misc_settextattr"
			],
			[
				"dw",
				"dwCursorPosition"
			],
			[
				"prop",
				"property_recursion_top"
			],
			[
				"property_enumer",
				"property_enumeration_index"
			],
			[
				"INT",
				"INSPECT_INT32T_INRANGE"
			],
			[
				"js_inspect_print_arra",
				"js_inspect_print_arraybuffer2"
			],
			[
				"is_a",
				"is_arraybuffer"
			],
			[
				"fmt",
				"fmt_ulong"
			],
			[
				"inspec",
				"inspect_newline2"
			],
			[
				"property_",
				"property_recursion_top"
			],
			[
				"js_inspec",
				"js_inspect_print_value"
			],
			[
				"JS_Atom",
				"JS_AtomToValue"
			],
			[
				"mysql_op",
				"mysql_optionsv"
			],
			[
				"MY",
				"MYSQLConnectParameters"
			],
			[
				"js_connect",
				"js_connectparams_class_id"
			],
			[
				"js_conn",
				"js_connectparams_from"
			],
			[
				"MYSQL",
				"MYSQLConnectParameters"
			],
			[
				"mysql_get",
				"mysql_get_socket"
			],
			[
				"async",
				"asyncclosure_resolve"
			],
			[
				"res",
				"resolving_funcs"
			],
			[
				"HAVE_LIB",
				"HAVE_LIBMARIADBCLIENT"
			],
			[
				"js_is_null",
				"js_is_null_or_undefined"
			],
			[
				"FileDesc",
				"FileDescriptorHandlers"
			],
			[
				"js_generat",
				"js_generator_prototype"
			],
			[
				"tab_",
				"tab_atom_len"
			],
			[
				"proper",
				"property_recursion_pop"
			],
			[
				"property_rec",
				"property_recursion_top"
			],
			[
				"property",
				"property_recursion_top"
			],
			[
				"RETURN",
				"deep.RETURN_VALUE_PATH"
			],
			[
				"LIBS",
				"LIBSERIALPORT_LIBRARY_DIR"
			],
			[
				"js_misc_atexit_",
				"js_misc_atexit_called"
			],
			[
				"getO",
				"getOwnPropertyNames(...)"
			],
			[
				"Res",
				"ResolveAlias"
			],
			[
				"relati",
				"relativePath"
			],
			[
				"js_syscla",
				"js_syscallerror_defines"
			],
			[
				"get",
				"getOwnPropertyDescriptor(...)"
			],
			[
				"resol",
				"resolving_funcs"
			],
			[
				"set",
				"set_handler"
			],
			[
				"Async",
				"AsyncSocketClosure"
			],
			[
				"Asy",
				"AsyncSocketClosure"
			],
			[
				"js_socket_async_",
				"js_socket_async_resolver"
			],
			[
				"js_socket_asyc",
				"js_socket_async_closure_free"
			],
			[
				"JS_EV",
				"JS_EVAL_FLAG_COMPILE_ONLY"
			],
			[
				"check_",
				"check_function_and_include"
			],
			[
				"PGCon",
				"PGConnectParameters"
			],
			[
				"PGC",
				"PGConnectParameters"
			],
			[
				"connect",
				"connectparams_parse"
			],
			[
				"Nam",
				"FieldNameFunc"
			],
			[
				"PG",
				"PGSQLResult"
			],
			[
				"js",
				"js_pgresult_class_id"
			],
			[
				"PGSQ",
				"PGSQResultIterator"
			],
			[
				"js_misc_getopa",
				"js_misc_getopaque"
			],
			[
				"js_pgrequ",
				"js_pgresult_opaque"
			],
			[
				"PGRES_PO",
				"PGRES_POLLING_READING"
			],
			[
				"PROP_PRO",
				"PROP_PROTOCOL_VERSION"
			],
			[
				"B",
				"BOOL"
			],
			[
				"Asyn",
				"AsyncIterator"
			],
			[
				"ret",
				"return_flag"
			],
			[
				"ImportID",
				"ImportIdMap"
			],
			[
				"Num",
				"NumericRange"
			],
			[
				"dbuf_",
				"dbuf_init2"
			],
			[
				"getOwn",
				"getOwnPropertyNames(...)"
			],
			[
				"has_",
				"has_dot_or_slash"
			],
			[
				"My",
				"MySQLResult"
			],
			[
				"JS_ToCS",
				"JS_ToCStringLen"
			],
			[
				"CF",
				"CFunctionClosureRecord"
			],
			[
				"extendA",
				"extendAsyncGenerator"
			],
			[
				"JS_SetPr",
				"JS_SetPropertyStr"
			],
			[
				"MYSQL_TYPE_NEW",
				"MYSQL_TYPE_NEWDECIMAL"
			],
			[
				"JS_CF",
				"JS_CFUNC_MAGIC_DEF"
			],
			[
				"js_mysqlresult_fun",
				"js_mysqlresult_functions"
			],
			[
				"JS_ToCSt",
				"JS_ToCStringLen"
			],
			[
				"js_mysql_f",
				"js_mysql_functions"
			],
			[
				"MARIA",
				"MARIADBCLIENT_LIBRARY"
			],
			[
				"depe",
				"dependencyMap"
			],
			[
				"depden",
				"dependencyTree"
			],
			[
				"add_",
				"add_dependencies"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "(ast, r) =>\nDeepFind(ast, pred, flags = deep.RETURN_VALUE)\nDeepSelect(ast, pred, flags = deep.RETURN_VALUE)\nDeepCachePath(ast, path, m)\nDeepPathOf(ast, value)\nDeepGet(ast, path, ...args)\nFileTime(filename)\nNewer(file, ...other)\n  other =>\nOlder(file, other)\nGetSubscripts(str)\n  m =>\nTrimSubscripts(str, sub)\n  nameOrIdPred(name_or_id, ...args)\nnode =>\nList\n  constructor(...args)\n  filter(callback, thisArg = null)\n  callback = elem =>\n  slice(start, end)\n  get first()\n  elem =>\n  entries()\n  keys()\n  values()\n  toArray()\n(a, n) =>\nList\nNode\n  constructor(ast)\n  static get(ast)\n  get ast()\n  get id()\n  get loc()\n  get file()\n(v, k) =>\n(v, k) =>\n  get range()\n  r =>\n  toJSON(obj)\nNode\n(node, ast) =>\nPathOf(node, ast = globalThis['$'].data)\nHier(node_or_path, t = (p, ast, abort) => p.\n(ast), ast = globalThis['$'].data)\n  p =>\n  abortFn = () =>\nFindType(typeName, ast = globalThis['$'].data)\n([tok]) =>\n  node =>\nPointerType\n  constructor(pointee, ast, ns)\n  static fromString(str, ast, ns)\n  toString()\nReferenceType\n  constructor(pointee, ast, ns)\n  static fromString(str, ast, ns)\n  toString()\nType\n  constructor(node, ast, ns)\n  n =>\n  get regExp()\n  isEnum()\n  isPointer()\n  isReference()\n  isFunction()\n  isArray()\n  isInteger()\n  arrayOf()\n  get subscripts()\n  trimSubscripts()\n  get pointer()\n  get reference()\n  getPointer(ast)\n  get unsigned()\n  get signed()\n  isCompound()\n  isFloatingPoint()\n  get alias()\n  get aliases()\n  isEnum()\n  isString()\n  get ffi()\n  get size()\n  toJS()\n  toJSON(obj)\n  static get(name_or_id, ast = globalThis['$'].data)\nnode =>\nnode =>\nRoundTo(value, align)\nRecordDecl\n  constructor(node, ast, ns)\n  child =>\n  child =>\n() =>\n  node =>\n(acc, node) =>\n  i =>\nn =>\n  n =>\n([name, t]) =>\n  get size()\n(acc, [name, type]) =>\n  toJSON()\n([name, member]) =>\nEnumDecl\n  constructor(node, ast)\n  child =>\n({ name, type, inner }) =>\n  toJSON()\nTypedefDecl\n  constructor(node, ast, ns)\n  n =>\n(v, k) =>\n  n =>\n  n =>\n  n =>\n  get size()\n  toJSON()\nFieldDecl\n  constructor(node, ast)\nFunctionDecl\n  constructor(node, ast, ns)\n  child =>\n  child =>\n({ name, type }) =>\n  isMethod()\n  toJSON()\nVarDecl\n  constructor(node, ast)\n  toJSON()\nClassDecl\n  constructor(node, ast)\nBuiltinType\n  constructor(node, ast)\nConstantArrayType\n  constructor(node, ast)\n  toJSON()\nRange\n  constructor(begin, end)\n  get begin()\n  set begin(v)\n  get end()\n  set end(v)\n  toString(opts = { printFile: true })\n  get length()\n  toArray()\n  toObject()\nRange\nLocation\n  static at(file, offset)\n  static from(loc)\n  constructor(loc)\n  update(other)\n  get line()\n  set line(v)\n  get column()\n  set column(v)\n  get offset()\n  set offset(v)\n(t, ...c) =>\n'\\x1b[m' : t =>\n  toString(opts = { printFile: true, onlyOffset: false })\n  toObject()\n  localeCompare(other)\nTypeFactory(node, ast, cache = true)\nSpawnCompiler(compiler, input, outfile, args = [])\n  p =>\n  p =>\n  line =>\n  line =>\n  line =>\nPipeReader(fd, callback)\n(resolve, reject) =>\n() =>\ndata =>\nReadPipe(fd, callback)\nReadOutput(fd)\nSourceDependencies(...args)\nAstDump(compiler, source, args, force)\n  size()\n  json()\n  data()\nSetFile = loc =>\n  files()\n  n =>\n  file =>\n  pred2 = (used, implicit) =>\nnode =>\n  types()\nn =>\n() =>\nList\n  functions()\nn =>\n() =>\nn =>\nList\n  namespaces()\nn =>\nList\n  classes()\n  predicate = n =>\nList\n  variables()\n  n =>\nList\n  names(depth = 1)\n  n =>\n  n =>\nNameFor(decl, ast = globalThis['$']?.data)\n(value, key) =>\nNodeType(n)\n  t =>\nn =>\nNodeName(n, name)\nRawLocation(path)\nRawRange(path)\nCompleteLocation(path)\n  l =>\nCompleteRange(path)\n  l =>\nGetLoc(node)\nGetTypeNode(node, ast = globalThis['$'].data)\n  node =>\n  node =>\nGetTypeStr(node)\n  inner =>\n  inner =>\n([n, t]) =>\nNodeError\n  constructor(message, node)\nNodeError\nNodePrinter(ast)\n  put(str)\n  trim()\n  printer = function(node)\n  get()\n  value()\n  value(node)\n  toString()\n  i =>\nNodePrinter\nAbiTagAttr(abi_tag_attr)\nAccessSpecDecl(access_spec_decl)\nAlignedAttr(aligned_attr)\nAlwaysInlineAttr(always_inline_attr)\nArraySubscriptExpr(array_subscript_expr)\nAsmLabelAttr(asm_label_attr)\nBinaryOperator(binary_operator)\nBlockCommandComment(block_command_comment)\nBuiltinAttr(builtin_attr)\nBreakStmt(break_stmt)\nCallExpr(call_expr)\nRecoveryExpr(recovery_expr)\nCaseStmt(case_stmt)\nCharacterLiteral(character_literal)\nCompoundAssignOperator(compound_assign_operator)\nCompoundStmt(compound_stmt)\nConditionalOperator(conditional_operator)\nConstantExpr(constant_expr)\nConstAttr(const_attr)\nContinueStmt(continue_stmt)\nCStyleCastExpr(cstyle_cast_expr)\nDeclRefExpr(decl_ref_expr)\nDeclStmt(decl_stmt)\nDefaultStmt(default_stmt)\nDeprecatedAttr(deprecated_attr)\nDoStmt(do_stmt)\nEmptyDecl(empty_decl)\nEnumConstantDecl(enum_constant_decl)\nEnumDecl(enum_decl)\nFieldDecl(field_decl)\nFloatingLiteral(floating_literal)\nFormatAttr(format_attr)\nForStmt(for_stmt)\n  n =>\nFullComment(full_comment)\nFunctionDecl(function_decl)\n  n =>\n  n =>\nGotoStmt(goto_stmt)\nn =>\nHTMLEndTagComment(html_end_tag_comment)\nHTMLStartTagComment(html_start_tag_comment)\nIfStmt(if_stmt)\nImplicitCastExpr(implicit_cast_expr)\nInitListExpr(init_list_expr)\nInlineCommandComment(inline_command_comment)\nIntegerLiteral(integer_literal)\nLabelStmt(label_stmt)\nMemberExpr(member_expr)\nNonNullAttr(non_null_attr)\nNoThrowAttr(no_throw_attr)\nNullStmt(null_stmt)\nParagraphComment(paragraph_comment)\nParamCommandComment(param_command_comment)\nParenExpr(paren_expr)\nParenListExpr(paren_list_expr)\nParmVarDecl(parm_var_decl)\nPureAttr(pure_attr)\nRecordDecl(record_decl)\nRestrictAttr(restrict_attr)\nReturnStmt(return_stmt)\nReturnsTwiceAttr(returns_twice_attr)\nStringLiteral(string_literal)\nSwitchStmt(switch_stmt)\nTextComment(text_comment)\nTranslationUnitDecl(translation_unit_decl)\nTypedefDecl(typedef_decl)\nUnaryExprOrTypeTraitExpr(unary_expr_or_type_trait_expr)\nUnaryOperator(unary_operator)\nUnresolvedLookupExpr(unresolved_lookup_expr)\nUnresolvedMemberExpr(unresolved_member_expr)\nVarDecl(var_decl, base_type)\n([offset, subscript]) =>\nVerbatimBlockComment(verbatim_block_comment)\nVerbatimBlockLineComment(verbatim_block_line_comment)\nWarnUnusedResultAttr(warn_unused_result_attr)\nWeakAttr(weak_attr)\nWhileStmt(while_stmt)\nOverrideAttr(override_attr)\nAddrLabelExpr(addr_label_expr)\nAliasAttr(alias_attr)\nAlignValueAttr(align_value_attr)\nAllocSizeAttr(alloc_size_attr)\nArrayInitIndexExpr(array_init_index_expr)\nArrayInitLoopExpr(array_init_loop_expr)\nAtomicExpr(atomic_expr)\nAtomicType(atomic_type)\nAutoType(auto_type)\nBuiltinTemplateDecl(builtin_template_decl)\nBuiltinType(builtin_type)\nCallbackAttr(callback_attr)\nClassTemplateDecl(class_template_decl)\nClassTemplatePartialSpecializationDecl(class_template_partial_specialization_decl)\nClassTemplateSpecializationDecl(class_template_specialization_decl)\nComplexType(complex_type)\nCompoundLiteralExpr(compound_literal_expr)\nConstantArrayType(constant_array_type)\nConstructorUsingShadowDecl(constructor_using_shadow_decl)\nConvertVectorExpr(convert_vector_expr)\nDecayedType(decayed_type)\nDecltypeType(decltype_type)\nDependentNameType(dependent_name_type)\nDependentScopeDeclRefExpr(dependent_scope_decl_ref_expr)\nDependentSizedArrayType(dependent_sized_array_type)\nDependentTemplateSpecializationType(dependent_template_specialization_type)\nElaboratedType(elaborated_type)\nEnumType(enum_type)\nExprWithCleanups(expr_with_cleanups)\nFinalAttr(final_attr)\nFormatArgAttr(format_arg_attr)\nFriendDecl(friend_decl)\nFunctionNoProtoType(function_no_proto_type)\nFunctionProtoType(function_proto_type)\nFunctionTemplateDecl(function_template_decl)\nGCCAsmStmt(gcc_asm_stmt)\nGNUInlineAttr(gnu_inline_attr)\nGNUNullExpr(gnu_null_expr)\nImplicitValueInitExpr(implicit_value_init_expr)\nIncompleteArrayType(incomplete_array_type)\nIndirectFieldDecl(indirect_field_decl)\nIndirectGotoStmt(indirect_goto_stmt)\nInjectedClassNameType(injected_class_name_type)\nLambdaExpr(lambda_expr)\nLinkageSpecDecl(linkage_spec_decl)\nLValueReferenceType(l_value_reference_type)\nMaterializeTemporaryExpr(materialize_temporary_expr)\nMaxFieldAlignmentAttr(max_field_alignment_attr)\nMayAliasAttr(may_alias_attr)\nMemberPointerType(member_pointer_type)\nMinVectorWidthAttr(min_vector_width_attr)\nModeAttr(mode_attr)\nNamespaceDecl(namespace_decl)\nNoDebugAttr(no_debug_attr)\nNoInlineAttr(no_inline_attr)\nNonTypeTemplateParmDecl(non_type_template_parm_decl)\nOffsetOfExpr(offset_of_expr)\nOpaqueValueExpr(opaque_value_expr)\nOwnerAttr(owner_attr)\nPackedAttr(packed_attr)\nPackExpansionExpr(pack_expansion_expr)\nPackExpansionType(pack_expansion_type)\nParenType(paren_type)\nPointerAttr(pointer_attr)\nPointerType(pointer_type)\nPredefinedExpr(predefined_expr)\nQualType(qual_type)\nRecordType(record_type)\nReturnsNonNullAttr(returns_non_null_attr)\nRValueReferenceType(r_value_reference_type)\nSentinelAttr(sentinel_attr)\nShuffleVectorExpr(shuffle_vector_expr)\nSizeOfPackExpr(size_of_pack_expr)\nStaticAssertDecl(static_assert_decl)\nStmtExpr(stmt_expr)\nSubstNonTypeTemplateParmExpr(subst_non_type_template_parm_expr)\nSubstTemplateTypeParmType(subst_template_type_parm_type)\nTargetAttr(target_attr)\nTemplateArgument(template_argument)\nTemplateSpecializationType(template_specialization_type)\nTemplateTemplateParmDecl(template_template_parm_decl)\nTemplateTypeParmDecl(template_type_parm_decl)\nTemplateTypeParmType(template_type_parm_type)\nTParamCommandComment(t_param_command_comment)\nTypeAliasDecl(type_alias_decl)\nTypeAliasTemplateDecl(type_alias_template_decl)\nTypedefType(typedef_type)\nTypeOfExprType(type_of_expr_type)\nTypeTraitExpr(type_trait_expr)\nUnaryTransformType(unary_transform_type)\nUnresolvedUsingValueDecl(unresolved_using_value_decl)\nUnusedAttr(unused_attr)\nUsingDecl(using_decl)\nUsingDirectiveDecl(using_directive_decl)\nUsingShadowDecl(using_shadow_decl)\nVAArgExpr(va_arg_expr)\nVarTemplateDecl(var_template_decl)\nVectorType(vector_type)\nVerbatimLineComment(verbatim_line_comment)\nVisibilityAttr(visibility_attr)\nWeakRefAttr(weak_ref_attr)\nCXXRecordDecl(cxx_record_decl)\nCXXConstructorDecl(cxx_constructor_decl)\n  n =>\nCXXCtorInitializer(cxx_ctor_initializer)\nCXXDependentScopeMemberExpr(cxx_dependent_scope_member_expr)\nCXXThisExpr(cxx_this_expr)\nCXXDestructorDecl(cxx_destructor_decl)\n  n =>\nCXXMethodDecl(cxx_method_decl)\n  n =>\nCXXStaticCastExpr(cxx_static_cast_expr)\nCXXUnresolvedConstructExpr(cxx_unresolved_construct_expr)\nCXXNewExpr(cxx_new_expr)\nCXXDeleteExpr(cxx_delete_expr)\nCXXBoolLiteralExpr(cxx_bool_literal_expr)\nCXX11NoReturnAttr(cxx11_no_return_attr)\nCXXBindTemporaryExpr(cxx_bind_temporary_expr)\nCXXCatchStmt(cxx_catch_stmt)\nCXXConstructExpr(cxx_construct_expr)\nCXXConversionDecl(cxx_conversion_decl)\nCXXDefaultArgExpr(cxx_default_arg_expr)\nCXXDefaultInitExpr(cxx_default_init_expr)\nCXXForRangeStmt(cxx_for_range_stmt)\nCXXFunctionalCastExpr(cxx_functional_cast_expr)\nCXXMemberCallExpr(cxx_member_call_expr)\nCXXNoexceptExpr(cxx_noexcept_expr)\nCXXNullPtrLiteralExpr(cxx_null_ptr_literal_expr)\nCXXOperatorCallExpr(cxx_operator_call_expr)\nCXXReinterpretCastExpr(cxx_reinterpret_cast_expr)\nCXXScalarValueInitExpr(cxx_scalar_value_init_expr)\nCXXTemporaryObjectExpr(cxx_temporary_object_expr)\nCXXTryStmt(cxx_try_stmt)\nPrintNode(node)\nPrintAst(node, ast)\n  get()\n  isNode(obj)\nGetType(name_or_id, ast = globalThis['$']?.data)\n  n =>\nnode =>\nnode =>\n  r =>\nGetClass(name_or_id, ast = globalThis['$'].data)\nn =>\n  bases()\nGetBases(node, ast = globalThis['$'].data)\nGetByName(arg, ast = globalThis['$'].data, ...args)\nGetNamespace(arg, root = globalThis['$'].data, predicate = () => true)\nn =>\nNamespaceOf(node, path, ast = globalThis['$'].data)\n  toString()\nGetFields(node)\n(v, k) =>\n([v, p]) =>\n([loc, ptr]) =>\n  i =>\nGetParams(node)\n  child =>\nPathRemoveLoc(path)\n  p =>",
			"settings":
			{
				"buffer_size": 11573,
				"line_ending": "Unix",
				"name": "𝌆 Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					33,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/clang-ast.js",
						"symkeys":
						[
							[
								848,
								861
							],
							[
								940,
								996
							],
							[
								1441,
								1500
							],
							[
								2040,
								2077
							],
							[
								2296,
								2328
							],
							[
								2430,
								2467
							],
							[
								2621,
								2648
							],
							[
								2730,
								2760
							],
							[
								2827,
								2835
							],
							[
								2874,
								2901
							],
							[
								2950,
								2977
							],
							[
								3054,
								3058
							],
							[
								3081,
								3114
							],
							[
								3294,
								3337
							],
							[
								3622,
								3630
							],
							[
								4022,
								4026
							],
							[
								4045,
								4065
							],
							[
								4216,
								4248
							],
							[
								4410,
								4428
							],
							[
								4681,
								4698
							],
							[
								5005,
								5016
							],
							[
								5036,
								5043
							],
							[
								5070,
								5079
							],
							[
								5199,
								5205
							],
							[
								5317,
								5325
							],
							[
								5440,
								5449
							],
							[
								5475,
								5484
							],
							[
								5515,
								5519
							],
							[
								5580,
								5584
							],
							[
								5660,
								5676
							],
							[
								5933,
								5948
							],
							[
								6015,
								6024
							],
							[
								6085,
								6093
							],
							[
								6142,
								6151
							],
							[
								6198,
								6208
							],
							[
								6261,
								6271
							],
							[
								6302,
								6312
							],
							[
								6400,
								6411
							],
							[
								6617,
								6621
							],
							[
								6802,
								6813
							],
							[
								7044,
								7048
							],
							[
								7100,
								7114
							],
							[
								7164,
								7214
							],
							[
								7284,
								7339
							],
							[
								7344,
								7378
							],
							[
								7557,
								7561
							],
							[
								7642,
								7657
							],
							[
								7745,
								7801
							],
							[
								7875,
								7885
							],
							[
								8089,
								8096
							],
							[
								8213,
								8224
							],
							[
								8261,
								8290
							],
							[
								8351,
								8382
							],
							[
								8584,
								8594
							],
							[
								8649,
								8662
							],
							[
								8699,
								8728
							],
							[
								8789,
								8820
							],
							[
								9024,
								9034
							],
							[
								9089,
								9093
							],
							[
								9191,
								9217
							],
							[
								12197,
								12201
							],
							[
								13216,
								13228
							],
							[
								13351,
								13359
							],
							[
								13445,
								13456
							],
							[
								13579,
								13592
							],
							[
								13715,
								13727
							],
							[
								13821,
								13830
							],
							[
								13882,
								13893
							],
							[
								13982,
								13991
							],
							[
								14111,
								14127
							],
							[
								14185,
								14201
							],
							[
								14249,
								14262
							],
							[
								14409,
								14424
							],
							[
								14571,
								14586
							],
							[
								14843,
								14857
							],
							[
								14943,
								14955
							],
							[
								15022,
								15034
							],
							[
								15140,
								15157
							],
							[
								15243,
								15254
							],
							[
								15314,
								15327
							],
							[
								15470,
								15478
							],
							[
								15586,
								15596
							],
							[
								15777,
								15786
							],
							[
								17592,
								17602
							],
							[
								19681,
								19687
							],
							[
								19973,
								19984
							],
							[
								20085,
								20135
							],
							[
								20221,
								20229
							],
							[
								20289,
								20297
							],
							[
								22104,
								22134
							],
							[
								22213,
								22223
							],
							[
								22241,
								22267
							],
							[
								22396,
								22404
							],
							[
								22487,
								22495
							],
							[
								22673,
								22678
							],
							[
								22716,
								22723
							],
							[
								22807,
								22821
							],
							[
								23414,
								23418
							],
							[
								23499,
								23504
							],
							[
								25038,
								25042
							],
							[
								25944,
								25958
							],
							[
								26022,
								26032
							],
							[
								26117,
								26139
							],
							[
								26361,
								26369
							],
							[
								26491,
								26510
							],
							[
								26608,
								26616
							],
							[
								26634,
								26656
							],
							[
								26777,
								26785
							],
							[
								26890,
								26916
							],
							[
								27271,
								27279
							],
							[
								27394,
								27405
							],
							[
								27423,
								27449
							],
							[
								27521,
								27525
							],
							[
								27630,
								27640
							],
							[
								27700,
								27704
							],
							[
								27767,
								27771
							],
							[
								27821,
								27825
							],
							[
								28235,
								28245
							],
							[
								28277,
								28285
							],
							[
								28382,
								28391
							],
							[
								28409,
								28431
							],
							[
								28649,
								28661
							],
							[
								28679,
								28705
							],
							[
								28940,
								28948
							],
							[
								29011,
								29019
							],
							[
								30086,
								30105
							],
							[
								30221,
								30231
							],
							[
								30286,
								30294
							],
							[
								30403,
								30410
							],
							[
								30428,
								30450
							],
							[
								30795,
								30803
							],
							[
								30900,
								30909
							],
							[
								30933,
								30955
							],
							[
								31060,
								31071
							],
							[
								31089,
								31111
							],
							[
								31488,
								31505
							],
							[
								31523,
								31545
							],
							[
								31801,
								31809
							],
							[
								31920,
								31925
							],
							[
								31973,
								31996
							],
							[
								32118,
								32129
							],
							[
								32178,
								32190
							],
							[
								32252,
								32261
							],
							[
								32308,
								32318
							],
							[
								32356,
								32392
							],
							[
								33047,
								33059
							],
							[
								33105,
								33114
							],
							[
								33161,
								33171
							],
							[
								33351,
								33356
							],
							[
								33412,
								33420
							],
							[
								33513,
								33536
							],
							[
								33795,
								33811
							],
							[
								34030,
								34046
							],
							[
								34457,
								34470
							],
							[
								34616,
								34626
							],
							[
								34674,
								34685
							],
							[
								34777,
								34789
							],
							[
								34839,
								34852
							],
							[
								34900,
								34912
							],
							[
								34962,
								34975
							],
							[
								35223,
								35236
							],
							[
								35271,
								35286
							],
							[
								35366,
								35421
							],
							[
								35965,
								35975
							],
							[
								36218,
								36238
							],
							[
								36321,
								36367
							],
							[
								37866,
								37931
							],
							[
								38241,
								38245
							],
							[
								38506,
								38510
							],
							[
								39235,
								39242
							],
							[
								39296,
								39303
							],
							[
								39387,
								39394
							],
							[
								39571,
								39606
							],
							[
								39645,
								39665
							],
							[
								39695,
								39701
							],
							[
								39722,
								39730
							],
							[
								39837,
								39870
							],
							[
								40135,
								40160
							],
							[
								40501,
								40543
							],
							[
								41075,
								41128
							],
							[
								42538,
								42544
							],
							[
								42594,
								42600
							],
							[
								42765,
								42771
							],
							[
								42913,
								42929
							],
							[
								43474,
								43481
							],
							[
								43524,
								43528
							],
							[
								43548,
								43555
							],
							[
								43676,
								43703
							],
							[
								43762,
								43777
							],
							[
								44082,
								44089
							],
							[
								44149,
								44163
							],
							[
								44208,
								44223
							],
							[
								44249,
								44253
							],
							[
								44285,
								44296
							],
							[
								44329,
								44341
							],
							[
								44375,
								44388
							],
							[
								44464,
								44469
							],
							[
								44549,
								44553
							],
							[
								44577,
								44589
							],
							[
								44652,
								44657
							],
							[
								44687,
								44691
							],
							[
								44715,
								44724
							],
							[
								44737,
								44753
							],
							[
								45095,
								45099
							],
							[
								45123,
								45134
							],
							[
								45193,
								45197
							],
							[
								45235,
								45239
							],
							[
								45271,
								45287
							],
							[
								45326,
								45330
							],
							[
								45348,
								45352
							],
							[
								45396,
								45448
							],
							[
								45636,
								45652
							],
							[
								46012,
								46033
							],
							[
								46059,
								46063
							],
							[
								46505,
								46510
							],
							[
								46545,
								46572
							],
							[
								46766,
								46794
							],
							[
								46975,
								47000
							],
							[
								47075,
								47107
							],
							[
								47238,
								47242
							],
							[
								47379,
								47408
							],
							[
								47518,
								47522
							],
							[
								47816,
								47838
							],
							[
								48877,
								48932
							],
							[
								49012,
								49019
							],
							[
								49085,
								49092
							],
							[
								49129,
								49155
							],
							[
								49249,
								49257
							],
							[
								49323,
								49331
							],
							[
								49393,
								49404
							],
							[
								49558,
								49567
							],
							[
								49586,
								49612
							],
							[
								49665,
								49674
							],
							[
								49727,
								49753
							],
							[
								49805,
								49824
							],
							[
								49900,
								49917
							],
							[
								49952,
								49976
							],
							[
								50235,
								50240
							],
							[
								50298,
								50305
							],
							[
								50387,
								50398
							],
							[
								51106,
								51116
							],
							[
								51164,
								51168
							],
							[
								51359,
								51370
							],
							[
								51381,
								51405
							],
							[
								51473,
								51505
							],
							[
								51661,
								51686
							],
							[
								51750,
								51786
							],
							[
								51856,
								51896
							],
							[
								52148,
								52176
							],
							[
								52223,
								52254
							],
							[
								52483,
								52525
							],
							[
								52728,
								52753
							],
							[
								52911,
								52932
							],
							[
								52977,
								52996
							],
							[
								53330,
								53357
							],
							[
								53425,
								53444
							],
							[
								53659,
								53694
							],
							[
								53812,
								53860
							],
							[
								54106,
								54133
							],
							[
								54751,
								54792
							],
							[
								55030,
								55057
							],
							[
								55200,
								55221
							],
							[
								55282,
								55309
							],
							[
								55354,
								55386
							],
							[
								55636,
								55662
							],
							[
								55856,
								55875
							],
							[
								56537,
								56562
							],
							[
								56610,
								56641
							],
							[
								56708,
								56723
							],
							[
								56918,
								56939
							],
							[
								57056,
								57092
							],
							[
								57312,
								57331
							],
							[
								57735,
								57756
							],
							[
								57973,
								58006
							],
							[
								58066,
								58089
							],
							[
								58152,
								58169
							],
							[
								58289,
								58293
							],
							[
								59120,
								59145
							],
							[
								59352,
								59379
							],
							[
								59844,
								59848
							],
							[
								60058,
								60062
							],
							[
								60261,
								60280
							],
							[
								60401,
								60406
							],
							[
								60744,
								60783
							],
							[
								60882,
								60925
							],
							[
								61135,
								61150
							],
							[
								61416,
								61452
							],
							[
								61548,
								61576
							],
							[
								61846,
								61890
							],
							[
								61952,
								61983
							],
							[
								62042,
								62063
							],
							[
								62122,
								62145
							],
							[
								62592,
								62618
							],
							[
								62686,
								62712
							],
							[
								62776,
								62795
							],
							[
								62837,
								62872
							],
							[
								63046,
								63088
							],
							[
								63273,
								63294
							],
							[
								63470,
								63500
							],
							[
								63720,
								63746
							],
							[
								64175,
								64194
							],
							[
								64255,
								64278
							],
							[
								64813,
								64840
							],
							[
								64890,
								64913
							],
							[
								65070,
								65106
							],
							[
								65176,
								65205
							],
							[
								65263,
								65286
							],
							[
								65464,
								65489
							],
							[
								65573,
								65615
							],
							[
								65714,
								65739
							],
							[
								66043,
								66098
							],
							[
								66340,
								66369
							],
							[
								66620,
								66664
							],
							[
								66796,
								66840
							],
							[
								66927,
								66955
							],
							[
								67099,
								67123
							],
							[
								67371,
								67415
							],
							[
								67737,
								67790
							],
							[
								67889,
								67934
							],
							[
								68009,
								68028
							],
							[
								68089,
								68110
							],
							[
								68287,
								68314
							],
							[
								68363,
								68393
							],
							[
								68405,
								68426
							],
							[
								68438,
								68470
							],
							[
								68612,
								68642
							],
							[
								68654,
								68695
							],
							[
								68707,
								68746
							],
							[
								68758,
								68781
							],
							[
								68793,
								68816
							],
							[
								68828,
								68847
							],
							[
								68859,
								68901
							],
							[
								68913,
								68938
							],
							[
								68950,
								68977
							],
							[
								68989,
								69027
							],
							[
								69039,
								69121
							],
							[
								69133,
								69200
							],
							[
								69212,
								69237
							],
							[
								69249,
								69291
							],
							[
								69476,
								69514
							],
							[
								69526,
								69583
							],
							[
								69595,
								69633
							],
							[
								69645,
								69670
							],
							[
								69682,
								69709
							],
							[
								69721,
								69759
							],
							[
								69771,
								69827
							],
							[
								69921,
								69972
							],
							[
								69984,
								70059
							],
							[
								70071,
								70102
							],
							[
								70114,
								70133
							],
							[
								70145,
								70181
							],
							[
								70277,
								70298
							],
							[
								70310,
								70340
							],
							[
								70352,
								70375
							],
							[
								70387,
								70430
							],
							[
								70442,
								70480
							],
							[
								70492,
								70536
							],
							[
								70548,
								70572
							],
							[
								70689,
								70719
							],
							[
								70731,
								70757
							],
							[
								70801,
								70848
							],
							[
								70860,
								70902
							],
							[
								70914,
								70952
							],
							[
								70964,
								71000
							],
							[
								71012,
								71059
							],
							[
								71071,
								71094
							],
							[
								71106,
								71140
							],
							[
								71348,
								71391
							],
							[
								71403,
								71455
							],
							[
								71559,
								71606
							],
							[
								71618,
								71646
							],
							[
								71658,
								71696
							],
							[
								71708,
								71749
							],
							[
								71761,
								71780
							],
							[
								71792,
								71821
							],
							[
								71833,
								71859
							],
							[
								71871,
								71899
							],
							[
								71911,
								71963
							],
							[
								71975,
								72003
							],
							[
								72015,
								72049
							],
							[
								72181,
								72202
							],
							[
								72214,
								72237
							],
							[
								72249,
								72287
							],
							[
								72299,
								72337
							],
							[
								72349,
								72370
							],
							[
								72382,
								72407
							],
							[
								72419,
								72444
							],
							[
								72456,
								72487
							],
							[
								72574,
								72593
							],
							[
								72605,
								72628
							],
							[
								72640,
								72681
							],
							[
								72693,
								72736
							],
							[
								72748,
								72775
							],
							[
								72787,
								72825
							],
							[
								72837,
								72870
							],
							[
								72882,
								72918
							],
							[
								72930,
								72949
							],
							[
								73015,
								73078
							],
							[
								73090,
								73146
							],
							[
								73158,
								73181
							],
							[
								73193,
								73228
							],
							[
								73240,
								73296
							],
							[
								73308,
								73361
							],
							[
								73373,
								73418
							],
							[
								73430,
								73475
							],
							[
								73487,
								73532
							],
							[
								73544,
								73574
							],
							[
								73586,
								73633
							],
							[
								73645,
								73670
							],
							[
								73682,
								73715
							],
							[
								73727,
								73757
							],
							[
								73769,
								73809
							],
							[
								73821,
								73874
							],
							[
								73886,
								73909
							],
							[
								73921,
								73942
							],
							[
								73954,
								73994
							],
							[
								74006,
								74040
							],
							[
								74052,
								74074
							],
							[
								74086,
								74120
							],
							[
								74132,
								74155
							],
							[
								74167,
								74209
							],
							[
								74221,
								74252
							],
							[
								74264,
								74290
							],
							[
								74303,
								74333
							],
							[
								74907,
								74947
							],
							[
								75157,
								75161
							],
							[
								76302,
								76342
							],
							[
								76725,
								76785
							],
							[
								77221,
								77247
							],
							[
								77355,
								77393
							],
							[
								77589,
								77593
							],
							[
								77880,
								77910
							],
							[
								78369,
								78373
							],
							[
								79025,
								79064
							],
							[
								79728,
								79785
							],
							[
								80106,
								80130
							],
							[
								80603,
								80633
							],
							[
								80897,
								80938
							],
							[
								81073,
								81112
							],
							[
								81124,
								81169
							],
							[
								81181,
								81209
							],
							[
								81221,
								81257
							],
							[
								81401,
								81439
							],
							[
								81451,
								81490
							],
							[
								81502,
								81543
							],
							[
								81555,
								81590
							],
							[
								81602,
								81649
							],
							[
								81661,
								81700
							],
							[
								81713,
								81747
							],
							[
								81759,
								81807
							],
							[
								81819,
								81862
							],
							[
								81874,
								81923
							],
							[
								81935,
								81985
							],
							[
								81997,
								82046
							],
							[
								82300,
								82324
							],
							[
								82381,
								82406
							],
							[
								82785,
								82814
							],
							[
								83007,
								83012
							],
							[
								83287,
								83308
							],
							[
								83375,
								83433
							],
							[
								83579,
								83583
							],
							[
								84168,
								84176
							],
							[
								84228,
								84236
							],
							[
								84348,
								84352
							],
							[
								84605,
								84663
							],
							[
								84765,
								84770
							],
							[
								85119,
								85126
							],
							[
								85315,
								85368
							],
							[
								85605,
								85666
							],
							[
								85976,
								86056
							],
							[
								86177,
								86182
							],
							[
								86520,
								86581
							],
							[
								86923,
								86933
							],
							[
								86999,
								87024
							],
							[
								87062,
								87072
							],
							[
								87137,
								87148
							],
							[
								87222,
								87237
							],
							[
								87276,
								87280
							],
							[
								87360,
								87385
							],
							[
								87424,
								87432
							],
							[
								87474,
								87503
							],
							[
								87533,
								87537
							]
						],
						"symlist":
						[
							" (ast, r) =>",
							" function DeepFind(ast, pred, flags = deep.RETURN_VALUE)",
							" function* DeepSelect(ast, pred, flags = deep.RETURN_VALUE)",
							" function DeepCachePath(ast, path, m)",
							" function DeepPathOf(ast, value)",
							" function DeepGet(ast, path, ...args)",
							"function FileTime(filename)",
							"function Newer(file, ...other)",
							"other =>",
							"function Older(file, other)",
							"function GetSubscripts(str)",
							"m =>",
							"function TrimSubscripts(str, sub)",
							" function nameOrIdPred(name_or_id, ...args)",
							" node =>",
							"List",
							"constructor(...args)",
							"filter(callback, thisArg = null)",
							"callback = elem =>",
							"slice(start, end)",
							"get first()",
							"elem =>",
							"entries()",
							"keys()",
							"values()",
							"toArray()",
							"(a, n) =>",
							"List",
							"Node",
							"constructor(ast)",
							"static get(ast)",
							"get ast()",
							"get id()",
							"get loc()",
							"get file()",
							" (v, k) =>",
							" (v, k) =>",
							"get range()",
							"r =>",
							"toJSON(obj)",
							"Node",
							"(node, ast) =>",
							" function PathOf(node, ast = globalThis['$'].data)",
							" function* Hier(node_or_path, t = (p, ast, abort) => p.",
							"(ast), ast = globalThis['$'].data)",
							"p =>",
							"abortFn = () =>",
							" function FindType(typeName, ast = globalThis['$'].data)",
							"([tok]) =>",
							"node =>",
							"PointerType",
							"constructor(pointee, ast, ns)",
							"static fromString(str, ast, ns)",
							"toString()",
							"ReferenceType",
							"constructor(pointee, ast, ns)",
							"static fromString(str, ast, ns)",
							"toString()",
							"Type",
							"constructor(node, ast, ns)",
							"n =>",
							"get regExp()",
							"isEnum()",
							"isPointer()",
							"isReference()",
							"isFunction()",
							"isArray()",
							"isInteger()",
							"arrayOf()",
							"get subscripts()",
							"trimSubscripts()",
							"get pointer()",
							"get reference()",
							"getPointer(ast)",
							"get unsigned()",
							"get signed()",
							"isCompound()",
							"isFloatingPoint()",
							"get alias()",
							"get aliases()",
							"isEnum()",
							"isString()",
							"get ffi()",
							"get size()",
							"toJS()",
							"toJSON(obj)",
							"static get(name_or_id, ast = globalThis['$'].data)",
							" node =>",
							" node =>",
							"function RoundTo(value, align)",
							"RecordDecl",
							"constructor(node, ast, ns)",
							"child =>",
							"child =>",
							"() =>",
							"node =>",
							"(acc, node) =>",
							"i =>",
							" n =>",
							"n =>",
							"([name, t]) =>",
							"get size()",
							"(acc, [name, type]) =>",
							"toJSON()",
							"([name, member]) =>",
							"EnumDecl",
							"constructor(node, ast)",
							"child =>",
							"({ name, type, inner }) =>",
							"toJSON()",
							"TypedefDecl",
							"constructor(node, ast, ns)",
							"n =>",
							" (v, k) =>",
							"n =>",
							"n =>",
							"n =>",
							"get size()",
							"toJSON()",
							"FieldDecl",
							"constructor(node, ast)",
							"FunctionDecl",
							"constructor(node, ast, ns)",
							"child =>",
							"child =>",
							"({ name, type }) =>",
							"isMethod()",
							"toJSON()",
							"VarDecl",
							"constructor(node, ast)",
							"toJSON()",
							"ClassDecl",
							"constructor(node, ast)",
							"BuiltinType",
							"constructor(node, ast)",
							"ConstantArrayType",
							"constructor(node, ast)",
							"toJSON()",
							"Range",
							"constructor(begin, end)",
							"get begin()",
							"set begin(v)",
							"get end()",
							"set end(v)",
							"toString(opts = { printFile: true })",
							"get length()",
							"toArray()",
							"toObject()",
							"Range",
							"Location",
							"static at(file, offset)",
							"static from(loc)",
							"constructor(loc)",
							"update(other)",
							"get line()",
							"set line(v)",
							"get column()",
							"set column(v)",
							"get offset()",
							"set offset(v)",
							" (t, ...c) =>",
							"'\\x1b[m' : t =>",
							"toString(opts = { printFile: true, onlyOffset: false })",
							"toObject()",
							"localeCompare(other)",
							" function TypeFactory(node, ast, cache = true)",
							"async function SpawnCompiler(compiler, input, outfile, args = [])",
							"p =>",
							"p =>",
							"line =>",
							"line =>",
							"line =>",
							" function PipeReader(fd, callback)",
							"(resolve, reject) =>",
							" () =>",
							" data =>",
							" function ReadPipe(fd, callback)",
							" function ReadOutput(fd)",
							"async function SourceDependencies(...args)",
							"async function AstDump(compiler, source, args, force)",
							"size()",
							"json()",
							"data()",
							"SetFile = loc =>",
							"files()",
							"n =>",
							"file =>",
							"pred2 = (used, implicit) =>",
							" node =>",
							"types()",
							" n =>",
							" () =>",
							"List",
							"functions()",
							" n =>",
							" () =>",
							" n =>",
							"List",
							"namespaces()",
							" n =>",
							"List",
							"classes()",
							"predicate = n =>",
							"List",
							"variables()",
							"n =>",
							"List",
							"names(depth = 1)",
							"n =>",
							"n =>",
							" function NameFor(decl, ast = globalThis['$']?.data)",
							" (value, key) =>",
							" function NodeType(n)",
							"t =>",
							" n =>",
							" function NodeName(n, name)",
							" function* RawLocation(path)",
							" function* RawRange(path)",
							" function CompleteLocation(path)",
							"l =>",
							" function CompleteRange(path)",
							"l =>",
							" function GetLoc(node)",
							" function GetTypeNode(node, ast = globalThis['$'].data)",
							"node =>",
							"node =>",
							" function GetTypeStr(node)",
							"inner =>",
							"inner =>",
							"([n, t]) =>",
							"NodeError",
							"constructor(message, node)",
							"NodeError",
							" function NodePrinter(ast)",
							" function put(str)",
							" function trim()",
							"printer = function(node)",
							"get()",
							"value()",
							"value(node)",
							"toString()",
							"i =>",
							"NodePrinter",
							"AbiTagAttr(abi_tag_attr)",
							"AccessSpecDecl(access_spec_decl)",
							"AlignedAttr(aligned_attr)",
							"AlwaysInlineAttr(always_inline_attr)",
							"ArraySubscriptExpr(array_subscript_expr)",
							"AsmLabelAttr(asm_label_attr)",
							"BinaryOperator(binary_operator)",
							"BlockCommandComment(block_command_comment)",
							"BuiltinAttr(builtin_attr)",
							"BreakStmt(break_stmt)",
							"CallExpr(call_expr)",
							"RecoveryExpr(recovery_expr)",
							"CaseStmt(case_stmt)",
							"CharacterLiteral(character_literal)",
							"CompoundAssignOperator(compound_assign_operator)",
							"CompoundStmt(compound_stmt)",
							"ConditionalOperator(conditional_operator)",
							"ConstantExpr(constant_expr)",
							"ConstAttr(const_attr)",
							"ContinueStmt(continue_stmt)",
							"CStyleCastExpr(cstyle_cast_expr)",
							"DeclRefExpr(decl_ref_expr)",
							"DeclStmt(decl_stmt)",
							"DefaultStmt(default_stmt)",
							"DeprecatedAttr(deprecated_attr)",
							"DoStmt(do_stmt)",
							"EmptyDecl(empty_decl)",
							"EnumConstantDecl(enum_constant_decl)",
							"EnumDecl(enum_decl)",
							"FieldDecl(field_decl)",
							"FloatingLiteral(floating_literal)",
							"FormatAttr(format_attr)",
							"ForStmt(for_stmt)",
							"n =>",
							"FullComment(full_comment)",
							"FunctionDecl(function_decl)",
							"n =>",
							"n =>",
							"GotoStmt(goto_stmt)",
							" n =>",
							"HTMLEndTagComment(html_end_tag_comment)",
							"HTMLStartTagComment(html_start_tag_comment)",
							"IfStmt(if_stmt)",
							"ImplicitCastExpr(implicit_cast_expr)",
							"InitListExpr(init_list_expr)",
							"InlineCommandComment(inline_command_comment)",
							"IntegerLiteral(integer_literal)",
							"LabelStmt(label_stmt)",
							"MemberExpr(member_expr)",
							"NonNullAttr(non_null_attr)",
							"NoThrowAttr(no_throw_attr)",
							"NullStmt(null_stmt)",
							"ParagraphComment(paragraph_comment)",
							"ParamCommandComment(param_command_comment)",
							"ParenExpr(paren_expr)",
							"ParenListExpr(paren_list_expr)",
							"ParmVarDecl(parm_var_decl)",
							"PureAttr(pure_attr)",
							"RecordDecl(record_decl)",
							"RestrictAttr(restrict_attr)",
							"ReturnStmt(return_stmt)",
							"ReturnsTwiceAttr(returns_twice_attr)",
							"StringLiteral(string_literal)",
							"SwitchStmt(switch_stmt)",
							"TextComment(text_comment)",
							"TranslationUnitDecl(translation_unit_decl)",
							"TypedefDecl(typedef_decl)",
							"UnaryExprOrTypeTraitExpr(unary_expr_or_type_trait_expr)",
							"UnaryOperator(unary_operator)",
							"UnresolvedLookupExpr(unresolved_lookup_expr)",
							"UnresolvedMemberExpr(unresolved_member_expr)",
							"VarDecl(var_decl, base_type)",
							"([offset, subscript]) =>",
							"VerbatimBlockComment(verbatim_block_comment)",
							"VerbatimBlockLineComment(verbatim_block_line_comment)",
							"WarnUnusedResultAttr(warn_unused_result_attr)",
							"WeakAttr(weak_attr)",
							"WhileStmt(while_stmt)",
							"OverrideAttr(override_attr)",
							"AddrLabelExpr(addr_label_expr)",
							"AliasAttr(alias_attr)",
							"AlignValueAttr(align_value_attr)",
							"AllocSizeAttr(alloc_size_attr)",
							"ArrayInitIndexExpr(array_init_index_expr)",
							"ArrayInitLoopExpr(array_init_loop_expr)",
							"AtomicExpr(atomic_expr)",
							"AtomicType(atomic_type)",
							"AutoType(auto_type)",
							"BuiltinTemplateDecl(builtin_template_decl)",
							"BuiltinType(builtin_type)",
							"CallbackAttr(callback_attr)",
							"ClassTemplateDecl(class_template_decl)",
							"ClassTemplatePartialSpecializationDecl(class_template_partial_specialization_decl)",
							"ClassTemplateSpecializationDecl(class_template_specialization_decl)",
							"ComplexType(complex_type)",
							"CompoundLiteralExpr(compound_literal_expr)",
							"ConstantArrayType(constant_array_type)",
							"ConstructorUsingShadowDecl(constructor_using_shadow_decl)",
							"ConvertVectorExpr(convert_vector_expr)",
							"DecayedType(decayed_type)",
							"DecltypeType(decltype_type)",
							"DependentNameType(dependent_name_type)",
							"DependentScopeDeclRefExpr(dependent_scope_decl_ref_expr)",
							"DependentSizedArrayType(dependent_sized_array_type)",
							"DependentTemplateSpecializationType(dependent_template_specialization_type)",
							"ElaboratedType(elaborated_type)",
							"EnumType(enum_type)",
							"ExprWithCleanups(expr_with_cleanups)",
							"FinalAttr(final_attr)",
							"FormatArgAttr(format_arg_attr)",
							"FriendDecl(friend_decl)",
							"FunctionNoProtoType(function_no_proto_type)",
							"FunctionProtoType(function_proto_type)",
							"FunctionTemplateDecl(function_template_decl)",
							"GCCAsmStmt(gcc_asm_stmt)",
							"GNUInlineAttr(gnu_inline_attr)",
							"GNUNullExpr(gnu_null_expr)",
							"ImplicitValueInitExpr(implicit_value_init_expr)",
							"IncompleteArrayType(incomplete_array_type)",
							"IndirectFieldDecl(indirect_field_decl)",
							"IndirectGotoStmt(indirect_goto_stmt)",
							"InjectedClassNameType(injected_class_name_type)",
							"LambdaExpr(lambda_expr)",
							"LinkageSpecDecl(linkage_spec_decl)",
							"LValueReferenceType(l_value_reference_type)",
							"MaterializeTemporaryExpr(materialize_temporary_expr)",
							"MaxFieldAlignmentAttr(max_field_alignment_attr)",
							"MayAliasAttr(may_alias_attr)",
							"MemberPointerType(member_pointer_type)",
							"MinVectorWidthAttr(min_vector_width_attr)",
							"ModeAttr(mode_attr)",
							"NamespaceDecl(namespace_decl)",
							"NoDebugAttr(no_debug_attr)",
							"NoInlineAttr(no_inline_attr)",
							"NonTypeTemplateParmDecl(non_type_template_parm_decl)",
							"OffsetOfExpr(offset_of_expr)",
							"OpaqueValueExpr(opaque_value_expr)",
							"OwnerAttr(owner_attr)",
							"PackedAttr(packed_attr)",
							"PackExpansionExpr(pack_expansion_expr)",
							"PackExpansionType(pack_expansion_type)",
							"ParenType(paren_type)",
							"PointerAttr(pointer_attr)",
							"PointerType(pointer_type)",
							"PredefinedExpr(predefined_expr)",
							"QualType(qual_type)",
							"RecordType(record_type)",
							"ReturnsNonNullAttr(returns_non_null_attr)",
							"RValueReferenceType(r_value_reference_type)",
							"SentinelAttr(sentinel_attr)",
							"ShuffleVectorExpr(shuffle_vector_expr)",
							"SizeOfPackExpr(size_of_pack_expr)",
							"StaticAssertDecl(static_assert_decl)",
							"StmtExpr(stmt_expr)",
							"SubstNonTypeTemplateParmExpr(subst_non_type_template_parm_expr)",
							"SubstTemplateTypeParmType(subst_template_type_parm_type)",
							"TargetAttr(target_attr)",
							"TemplateArgument(template_argument)",
							"TemplateSpecializationType(template_specialization_type)",
							"TemplateTemplateParmDecl(template_template_parm_decl)",
							"TemplateTypeParmDecl(template_type_parm_decl)",
							"TemplateTypeParmType(template_type_parm_type)",
							"TParamCommandComment(t_param_command_comment)",
							"TypeAliasDecl(type_alias_decl)",
							"TypeAliasTemplateDecl(type_alias_template_decl)",
							"TypedefType(typedef_type)",
							"TypeOfExprType(type_of_expr_type)",
							"TypeTraitExpr(type_trait_expr)",
							"UnaryTransformType(unary_transform_type)",
							"UnresolvedUsingValueDecl(unresolved_using_value_decl)",
							"UnusedAttr(unused_attr)",
							"UsingDecl(using_decl)",
							"UsingDirectiveDecl(using_directive_decl)",
							"UsingShadowDecl(using_shadow_decl)",
							"VAArgExpr(va_arg_expr)",
							"VarTemplateDecl(var_template_decl)",
							"VectorType(vector_type)",
							"VerbatimLineComment(verbatim_line_comment)",
							"VisibilityAttr(visibility_attr)",
							"WeakRefAttr(weak_ref_attr)",
							"CXXRecordDecl(cxx_record_decl)",
							"CXXConstructorDecl(cxx_constructor_decl)",
							"n =>",
							"CXXCtorInitializer(cxx_ctor_initializer)",
							"CXXDependentScopeMemberExpr(cxx_dependent_scope_member_expr)",
							"CXXThisExpr(cxx_this_expr)",
							"CXXDestructorDecl(cxx_destructor_decl)",
							"n =>",
							"CXXMethodDecl(cxx_method_decl)",
							"n =>",
							"CXXStaticCastExpr(cxx_static_cast_expr)",
							"CXXUnresolvedConstructExpr(cxx_unresolved_construct_expr)",
							"CXXNewExpr(cxx_new_expr)",
							"CXXDeleteExpr(cxx_delete_expr)",
							"CXXBoolLiteralExpr(cxx_bool_literal_expr)",
							"CXX11NoReturnAttr(cxx11_no_return_attr)",
							"CXXBindTemporaryExpr(cxx_bind_temporary_expr)",
							"CXXCatchStmt(cxx_catch_stmt)",
							"CXXConstructExpr(cxx_construct_expr)",
							"CXXConversionDecl(cxx_conversion_decl)",
							"CXXDefaultArgExpr(cxx_default_arg_expr)",
							"CXXDefaultInitExpr(cxx_default_init_expr)",
							"CXXForRangeStmt(cxx_for_range_stmt)",
							"CXXFunctionalCastExpr(cxx_functional_cast_expr)",
							"CXXMemberCallExpr(cxx_member_call_expr)",
							"CXXNoexceptExpr(cxx_noexcept_expr)",
							"CXXNullPtrLiteralExpr(cxx_null_ptr_literal_expr)",
							"CXXOperatorCallExpr(cxx_operator_call_expr)",
							"CXXReinterpretCastExpr(cxx_reinterpret_cast_expr)",
							"CXXScalarValueInitExpr(cxx_scalar_value_init_expr)",
							"CXXTemporaryObjectExpr(cxx_temporary_object_expr)",
							"CXXTryStmt(cxx_try_stmt)",
							" function PrintNode(node)",
							" function PrintAst(node, ast)",
							"get()",
							" function isNode(obj)",
							" function GetType(name_or_id, ast = globalThis['$']?.data)",
							"n =>",
							" node =>",
							" node =>",
							"r =>",
							" function GetClass(name_or_id, ast = globalThis['$'].data)",
							" n =>",
							"bases()",
							" function* GetBases(node, ast = globalThis['$'].data)",
							" function GetByName(arg, ast = globalThis['$'].data, ...args)",
							" function GetNamespace(arg, root = globalThis['$'].data, predicate = () => true)",
							" n =>",
							" function NamespaceOf(node, path, ast = globalThis['$'].data)",
							"toString()",
							" function GetFields(node)",
							" (v, k) =>",
							"([v, p]) =>",
							"([loc, ptr]) =>",
							"i =>",
							" function GetParams(node)",
							"child =>",
							" function PathRemoveLoc(path)",
							"p =>"
						]
					},
					"",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					34,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/clang-ast.js",
						"symkeys":
						[
							[
								848,
								861
							],
							[
								940,
								996
							],
							[
								1441,
								1500
							],
							[
								2040,
								2077
							],
							[
								2296,
								2328
							],
							[
								2430,
								2467
							],
							[
								2621,
								2648
							],
							[
								2730,
								2760
							],
							[
								2827,
								2835
							],
							[
								2874,
								2901
							],
							[
								2950,
								2977
							],
							[
								3054,
								3058
							],
							[
								3081,
								3114
							],
							[
								3294,
								3337
							],
							[
								3622,
								3630
							],
							[
								4022,
								4026
							],
							[
								4045,
								4065
							],
							[
								4216,
								4248
							],
							[
								4410,
								4428
							],
							[
								4681,
								4698
							],
							[
								5005,
								5016
							],
							[
								5036,
								5043
							],
							[
								5070,
								5079
							],
							[
								5199,
								5205
							],
							[
								5317,
								5325
							],
							[
								5440,
								5449
							],
							[
								5475,
								5484
							],
							[
								5515,
								5519
							],
							[
								5580,
								5584
							],
							[
								5660,
								5676
							],
							[
								5933,
								5948
							],
							[
								6015,
								6024
							],
							[
								6085,
								6093
							],
							[
								6142,
								6151
							],
							[
								6198,
								6208
							],
							[
								6261,
								6271
							],
							[
								6302,
								6312
							],
							[
								6400,
								6411
							],
							[
								6617,
								6621
							],
							[
								6802,
								6813
							],
							[
								7044,
								7048
							],
							[
								7100,
								7114
							],
							[
								7164,
								7214
							],
							[
								7284,
								7339
							],
							[
								7344,
								7378
							],
							[
								7557,
								7561
							],
							[
								7642,
								7657
							],
							[
								7745,
								7801
							],
							[
								7875,
								7885
							],
							[
								8089,
								8096
							],
							[
								8213,
								8224
							],
							[
								8261,
								8290
							],
							[
								8351,
								8382
							],
							[
								8584,
								8594
							],
							[
								8649,
								8662
							],
							[
								8699,
								8728
							],
							[
								8789,
								8820
							],
							[
								9024,
								9034
							],
							[
								9089,
								9093
							],
							[
								9191,
								9217
							],
							[
								12197,
								12201
							],
							[
								13216,
								13228
							],
							[
								13351,
								13359
							],
							[
								13445,
								13456
							],
							[
								13579,
								13592
							],
							[
								13715,
								13727
							],
							[
								13821,
								13830
							],
							[
								13882,
								13893
							],
							[
								13982,
								13991
							],
							[
								14111,
								14127
							],
							[
								14185,
								14201
							],
							[
								14249,
								14262
							],
							[
								14409,
								14424
							],
							[
								14571,
								14586
							],
							[
								14843,
								14857
							],
							[
								14943,
								14955
							],
							[
								15022,
								15034
							],
							[
								15140,
								15157
							],
							[
								15243,
								15254
							],
							[
								15314,
								15327
							],
							[
								15470,
								15478
							],
							[
								15586,
								15596
							],
							[
								15777,
								15786
							],
							[
								17592,
								17602
							],
							[
								19681,
								19687
							],
							[
								19973,
								19984
							],
							[
								20085,
								20135
							],
							[
								20221,
								20229
							],
							[
								20289,
								20297
							],
							[
								22104,
								22134
							],
							[
								22213,
								22223
							],
							[
								22241,
								22267
							],
							[
								22396,
								22404
							],
							[
								22487,
								22495
							],
							[
								22673,
								22678
							],
							[
								22716,
								22723
							],
							[
								22807,
								22821
							],
							[
								23414,
								23418
							],
							[
								23499,
								23504
							],
							[
								25038,
								25042
							],
							[
								25944,
								25958
							],
							[
								26022,
								26032
							],
							[
								26117,
								26139
							],
							[
								26361,
								26369
							],
							[
								26491,
								26510
							],
							[
								26608,
								26616
							],
							[
								26634,
								26656
							],
							[
								26777,
								26785
							],
							[
								26890,
								26916
							],
							[
								27271,
								27279
							],
							[
								27394,
								27405
							],
							[
								27423,
								27449
							],
							[
								27521,
								27525
							],
							[
								27630,
								27640
							],
							[
								27700,
								27704
							],
							[
								27767,
								27771
							],
							[
								27821,
								27825
							],
							[
								28235,
								28245
							],
							[
								28277,
								28285
							],
							[
								28382,
								28391
							],
							[
								28409,
								28431
							],
							[
								28649,
								28661
							],
							[
								28679,
								28705
							],
							[
								28940,
								28948
							],
							[
								29011,
								29019
							],
							[
								30086,
								30105
							],
							[
								30221,
								30231
							],
							[
								30286,
								30294
							],
							[
								30403,
								30410
							],
							[
								30428,
								30450
							],
							[
								30795,
								30803
							],
							[
								30900,
								30909
							],
							[
								30933,
								30955
							],
							[
								31060,
								31071
							],
							[
								31089,
								31111
							],
							[
								31488,
								31505
							],
							[
								31523,
								31545
							],
							[
								31801,
								31809
							],
							[
								31920,
								31925
							],
							[
								31973,
								31996
							],
							[
								32118,
								32129
							],
							[
								32178,
								32190
							],
							[
								32252,
								32261
							],
							[
								32308,
								32318
							],
							[
								32356,
								32392
							],
							[
								33047,
								33059
							],
							[
								33105,
								33114
							],
							[
								33161,
								33171
							],
							[
								33351,
								33356
							],
							[
								33412,
								33420
							],
							[
								33513,
								33536
							],
							[
								33795,
								33811
							],
							[
								34030,
								34046
							],
							[
								34457,
								34470
							],
							[
								34616,
								34626
							],
							[
								34674,
								34685
							],
							[
								34777,
								34789
							],
							[
								34839,
								34852
							],
							[
								34900,
								34912
							],
							[
								34962,
								34975
							],
							[
								35223,
								35236
							],
							[
								35271,
								35286
							],
							[
								35366,
								35421
							],
							[
								35965,
								35975
							],
							[
								36218,
								36238
							],
							[
								36321,
								36367
							],
							[
								37866,
								37931
							],
							[
								38241,
								38245
							],
							[
								38506,
								38510
							],
							[
								39235,
								39242
							],
							[
								39296,
								39303
							],
							[
								39387,
								39394
							],
							[
								39571,
								39606
							],
							[
								39645,
								39665
							],
							[
								39695,
								39701
							],
							[
								39722,
								39730
							],
							[
								39837,
								39870
							],
							[
								40135,
								40160
							],
							[
								40501,
								40543
							],
							[
								41075,
								41128
							],
							[
								42538,
								42544
							],
							[
								42594,
								42600
							],
							[
								42765,
								42771
							],
							[
								42913,
								42929
							],
							[
								43474,
								43481
							],
							[
								43524,
								43528
							],
							[
								43548,
								43555
							],
							[
								43676,
								43703
							],
							[
								43762,
								43777
							],
							[
								44082,
								44089
							],
							[
								44149,
								44163
							],
							[
								44208,
								44223
							],
							[
								44249,
								44253
							],
							[
								44285,
								44296
							],
							[
								44329,
								44341
							],
							[
								44375,
								44388
							],
							[
								44464,
								44469
							],
							[
								44549,
								44553
							],
							[
								44577,
								44589
							],
							[
								44652,
								44657
							],
							[
								44687,
								44691
							],
							[
								44715,
								44724
							],
							[
								44737,
								44753
							],
							[
								45095,
								45099
							],
							[
								45123,
								45134
							],
							[
								45193,
								45197
							],
							[
								45235,
								45239
							],
							[
								45271,
								45287
							],
							[
								45326,
								45330
							],
							[
								45348,
								45352
							],
							[
								45396,
								45448
							],
							[
								45636,
								45652
							],
							[
								46012,
								46033
							],
							[
								46059,
								46063
							],
							[
								46505,
								46510
							],
							[
								46545,
								46572
							],
							[
								46766,
								46794
							],
							[
								46975,
								47000
							],
							[
								47075,
								47107
							],
							[
								47238,
								47242
							],
							[
								47379,
								47408
							],
							[
								47518,
								47522
							],
							[
								47816,
								47838
							],
							[
								48877,
								48932
							],
							[
								49012,
								49019
							],
							[
								49085,
								49092
							],
							[
								49129,
								49155
							],
							[
								49249,
								49257
							],
							[
								49323,
								49331
							],
							[
								49393,
								49404
							],
							[
								49558,
								49567
							],
							[
								49586,
								49612
							],
							[
								49665,
								49674
							],
							[
								49727,
								49753
							],
							[
								49805,
								49824
							],
							[
								49900,
								49917
							],
							[
								49952,
								49976
							],
							[
								50235,
								50240
							],
							[
								50298,
								50305
							],
							[
								50387,
								50398
							],
							[
								51106,
								51116
							],
							[
								51164,
								51168
							],
							[
								51359,
								51370
							],
							[
								51381,
								51405
							],
							[
								51473,
								51505
							],
							[
								51661,
								51686
							],
							[
								51750,
								51786
							],
							[
								51856,
								51896
							],
							[
								52148,
								52176
							],
							[
								52223,
								52254
							],
							[
								52483,
								52525
							],
							[
								52728,
								52753
							],
							[
								52911,
								52932
							],
							[
								52977,
								52996
							],
							[
								53330,
								53357
							],
							[
								53425,
								53444
							],
							[
								53659,
								53694
							],
							[
								53812,
								53860
							],
							[
								54106,
								54133
							],
							[
								54751,
								54792
							],
							[
								55030,
								55057
							],
							[
								55200,
								55221
							],
							[
								55282,
								55309
							],
							[
								55354,
								55386
							],
							[
								55636,
								55662
							],
							[
								55856,
								55875
							],
							[
								56537,
								56562
							],
							[
								56610,
								56641
							],
							[
								56708,
								56723
							],
							[
								56918,
								56939
							],
							[
								57056,
								57092
							],
							[
								57312,
								57331
							],
							[
								57735,
								57756
							],
							[
								57973,
								58006
							],
							[
								58066,
								58089
							],
							[
								58152,
								58169
							],
							[
								58289,
								58293
							],
							[
								59120,
								59145
							],
							[
								59352,
								59379
							],
							[
								59844,
								59848
							],
							[
								60058,
								60062
							],
							[
								60261,
								60280
							],
							[
								60401,
								60406
							],
							[
								60744,
								60783
							],
							[
								60882,
								60925
							],
							[
								61135,
								61150
							],
							[
								61416,
								61452
							],
							[
								61548,
								61576
							],
							[
								61846,
								61890
							],
							[
								61952,
								61983
							],
							[
								62042,
								62063
							],
							[
								62122,
								62145
							],
							[
								62592,
								62618
							],
							[
								62686,
								62712
							],
							[
								62776,
								62795
							],
							[
								62837,
								62872
							],
							[
								63046,
								63088
							],
							[
								63273,
								63294
							],
							[
								63470,
								63500
							],
							[
								63720,
								63746
							],
							[
								64175,
								64194
							],
							[
								64255,
								64278
							],
							[
								64813,
								64840
							],
							[
								64890,
								64913
							],
							[
								65070,
								65106
							],
							[
								65176,
								65205
							],
							[
								65263,
								65286
							],
							[
								65464,
								65489
							],
							[
								65573,
								65615
							],
							[
								65714,
								65739
							],
							[
								66043,
								66098
							],
							[
								66340,
								66369
							],
							[
								66620,
								66664
							],
							[
								66796,
								66840
							],
							[
								66927,
								66955
							],
							[
								67099,
								67123
							],
							[
								67371,
								67415
							],
							[
								67737,
								67790
							],
							[
								67889,
								67934
							],
							[
								68009,
								68028
							],
							[
								68089,
								68110
							],
							[
								68287,
								68314
							],
							[
								68363,
								68393
							],
							[
								68405,
								68426
							],
							[
								68438,
								68470
							],
							[
								68612,
								68642
							],
							[
								68654,
								68695
							],
							[
								68707,
								68746
							],
							[
								68758,
								68781
							],
							[
								68793,
								68816
							],
							[
								68828,
								68847
							],
							[
								68859,
								68901
							],
							[
								68913,
								68938
							],
							[
								68950,
								68977
							],
							[
								68989,
								69027
							],
							[
								69039,
								69121
							],
							[
								69133,
								69200
							],
							[
								69212,
								69237
							],
							[
								69249,
								69291
							],
							[
								69476,
								69514
							],
							[
								69526,
								69583
							],
							[
								69595,
								69633
							],
							[
								69645,
								69670
							],
							[
								69682,
								69709
							],
							[
								69721,
								69759
							],
							[
								69771,
								69827
							],
							[
								69921,
								69972
							],
							[
								69984,
								70059
							],
							[
								70071,
								70102
							],
							[
								70114,
								70133
							],
							[
								70145,
								70181
							],
							[
								70277,
								70298
							],
							[
								70310,
								70340
							],
							[
								70352,
								70375
							],
							[
								70387,
								70430
							],
							[
								70442,
								70480
							],
							[
								70492,
								70536
							],
							[
								70548,
								70572
							],
							[
								70689,
								70719
							],
							[
								70731,
								70757
							],
							[
								70801,
								70848
							],
							[
								70860,
								70902
							],
							[
								70914,
								70952
							],
							[
								70964,
								71000
							],
							[
								71012,
								71059
							],
							[
								71071,
								71094
							],
							[
								71106,
								71140
							],
							[
								71348,
								71391
							],
							[
								71403,
								71455
							],
							[
								71559,
								71606
							],
							[
								71618,
								71646
							],
							[
								71658,
								71696
							],
							[
								71708,
								71749
							],
							[
								71761,
								71780
							],
							[
								71792,
								71821
							],
							[
								71833,
								71859
							],
							[
								71871,
								71899
							],
							[
								71911,
								71963
							],
							[
								71975,
								72003
							],
							[
								72015,
								72049
							],
							[
								72181,
								72202
							],
							[
								72214,
								72237
							],
							[
								72249,
								72287
							],
							[
								72299,
								72337
							],
							[
								72349,
								72370
							],
							[
								72382,
								72407
							],
							[
								72419,
								72444
							],
							[
								72456,
								72487
							],
							[
								72574,
								72593
							],
							[
								72605,
								72628
							],
							[
								72640,
								72681
							],
							[
								72693,
								72736
							],
							[
								72748,
								72775
							],
							[
								72787,
								72825
							],
							[
								72837,
								72870
							],
							[
								72882,
								72918
							],
							[
								72930,
								72949
							],
							[
								73015,
								73078
							],
							[
								73090,
								73146
							],
							[
								73158,
								73181
							],
							[
								73193,
								73228
							],
							[
								73240,
								73296
							],
							[
								73308,
								73361
							],
							[
								73373,
								73418
							],
							[
								73430,
								73475
							],
							[
								73487,
								73532
							],
							[
								73544,
								73574
							],
							[
								73586,
								73633
							],
							[
								73645,
								73670
							],
							[
								73682,
								73715
							],
							[
								73727,
								73757
							],
							[
								73769,
								73809
							],
							[
								73821,
								73874
							],
							[
								73886,
								73909
							],
							[
								73921,
								73942
							],
							[
								73954,
								73994
							],
							[
								74006,
								74040
							],
							[
								74052,
								74074
							],
							[
								74086,
								74120
							],
							[
								74132,
								74155
							],
							[
								74167,
								74209
							],
							[
								74221,
								74252
							],
							[
								74264,
								74290
							],
							[
								74303,
								74333
							],
							[
								74907,
								74947
							],
							[
								75157,
								75161
							],
							[
								76302,
								76342
							],
							[
								76725,
								76785
							],
							[
								77221,
								77247
							],
							[
								77355,
								77393
							],
							[
								77589,
								77593
							],
							[
								77880,
								77910
							],
							[
								78369,
								78373
							],
							[
								79025,
								79064
							],
							[
								79728,
								79785
							],
							[
								80106,
								80130
							],
							[
								80603,
								80633
							],
							[
								80897,
								80938
							],
							[
								81073,
								81112
							],
							[
								81124,
								81169
							],
							[
								81181,
								81209
							],
							[
								81221,
								81257
							],
							[
								81401,
								81439
							],
							[
								81451,
								81490
							],
							[
								81502,
								81543
							],
							[
								81555,
								81590
							],
							[
								81602,
								81649
							],
							[
								81661,
								81700
							],
							[
								81713,
								81747
							],
							[
								81759,
								81807
							],
							[
								81819,
								81862
							],
							[
								81874,
								81923
							],
							[
								81935,
								81985
							],
							[
								81997,
								82046
							],
							[
								82300,
								82324
							],
							[
								82381,
								82406
							],
							[
								82785,
								82814
							],
							[
								83007,
								83012
							],
							[
								83287,
								83308
							],
							[
								83375,
								83433
							],
							[
								83579,
								83583
							],
							[
								84168,
								84176
							],
							[
								84228,
								84236
							],
							[
								84348,
								84352
							],
							[
								84605,
								84663
							],
							[
								84765,
								84770
							],
							[
								85119,
								85126
							],
							[
								85315,
								85368
							],
							[
								85605,
								85666
							],
							[
								85976,
								86056
							],
							[
								86177,
								86182
							],
							[
								86520,
								86581
							],
							[
								86923,
								86933
							],
							[
								86999,
								87024
							],
							[
								87062,
								87072
							],
							[
								87137,
								87148
							],
							[
								87222,
								87237
							],
							[
								87276,
								87280
							],
							[
								87360,
								87385
							],
							[
								87424,
								87432
							],
							[
								87474,
								87503
							],
							[
								87533,
								87537
							]
						],
						"symlist":
						[
							" (ast, r) =>",
							" function DeepFind(ast, pred, flags = deep.RETURN_VALUE)",
							" function* DeepSelect(ast, pred, flags = deep.RETURN_VALUE)",
							" function DeepCachePath(ast, path, m)",
							" function DeepPathOf(ast, value)",
							" function DeepGet(ast, path, ...args)",
							"function FileTime(filename)",
							"function Newer(file, ...other)",
							"other =>",
							"function Older(file, other)",
							"function GetSubscripts(str)",
							"m =>",
							"function TrimSubscripts(str, sub)",
							" function nameOrIdPred(name_or_id, ...args)",
							" node =>",
							"List",
							"constructor(...args)",
							"filter(callback, thisArg = null)",
							"callback = elem =>",
							"slice(start, end)",
							"get first()",
							"elem =>",
							"entries()",
							"keys()",
							"values()",
							"toArray()",
							"(a, n) =>",
							"List",
							"Node",
							"constructor(ast)",
							"static get(ast)",
							"get ast()",
							"get id()",
							"get loc()",
							"get file()",
							" (v, k) =>",
							" (v, k) =>",
							"get range()",
							"r =>",
							"toJSON(obj)",
							"Node",
							"(node, ast) =>",
							" function PathOf(node, ast = globalThis['$'].data)",
							" function* Hier(node_or_path, t = (p, ast, abort) => p.",
							"(ast), ast = globalThis['$'].data)",
							"p =>",
							"abortFn = () =>",
							" function FindType(typeName, ast = globalThis['$'].data)",
							"([tok]) =>",
							"node =>",
							"PointerType",
							"constructor(pointee, ast, ns)",
							"static fromString(str, ast, ns)",
							"toString()",
							"ReferenceType",
							"constructor(pointee, ast, ns)",
							"static fromString(str, ast, ns)",
							"toString()",
							"Type",
							"constructor(node, ast, ns)",
							"n =>",
							"get regExp()",
							"isEnum()",
							"isPointer()",
							"isReference()",
							"isFunction()",
							"isArray()",
							"isInteger()",
							"arrayOf()",
							"get subscripts()",
							"trimSubscripts()",
							"get pointer()",
							"get reference()",
							"getPointer(ast)",
							"get unsigned()",
							"get signed()",
							"isCompound()",
							"isFloatingPoint()",
							"get alias()",
							"get aliases()",
							"isEnum()",
							"isString()",
							"get ffi()",
							"get size()",
							"toJS()",
							"toJSON(obj)",
							"static get(name_or_id, ast = globalThis['$'].data)",
							" node =>",
							" node =>",
							"function RoundTo(value, align)",
							"RecordDecl",
							"constructor(node, ast, ns)",
							"child =>",
							"child =>",
							"() =>",
							"node =>",
							"(acc, node) =>",
							"i =>",
							" n =>",
							"n =>",
							"([name, t]) =>",
							"get size()",
							"(acc, [name, type]) =>",
							"toJSON()",
							"([name, member]) =>",
							"EnumDecl",
							"constructor(node, ast)",
							"child =>",
							"({ name, type, inner }) =>",
							"toJSON()",
							"TypedefDecl",
							"constructor(node, ast, ns)",
							"n =>",
							" (v, k) =>",
							"n =>",
							"n =>",
							"n =>",
							"get size()",
							"toJSON()",
							"FieldDecl",
							"constructor(node, ast)",
							"FunctionDecl",
							"constructor(node, ast, ns)",
							"child =>",
							"child =>",
							"({ name, type }) =>",
							"isMethod()",
							"toJSON()",
							"VarDecl",
							"constructor(node, ast)",
							"toJSON()",
							"ClassDecl",
							"constructor(node, ast)",
							"BuiltinType",
							"constructor(node, ast)",
							"ConstantArrayType",
							"constructor(node, ast)",
							"toJSON()",
							"Range",
							"constructor(begin, end)",
							"get begin()",
							"set begin(v)",
							"get end()",
							"set end(v)",
							"toString(opts = { printFile: true })",
							"get length()",
							"toArray()",
							"toObject()",
							"Range",
							"Location",
							"static at(file, offset)",
							"static from(loc)",
							"constructor(loc)",
							"update(other)",
							"get line()",
							"set line(v)",
							"get column()",
							"set column(v)",
							"get offset()",
							"set offset(v)",
							" (t, ...c) =>",
							"'\\x1b[m' : t =>",
							"toString(opts = { printFile: true, onlyOffset: false })",
							"toObject()",
							"localeCompare(other)",
							" function TypeFactory(node, ast, cache = true)",
							"async function SpawnCompiler(compiler, input, outfile, args = [])",
							"p =>",
							"p =>",
							"line =>",
							"line =>",
							"line =>",
							" function PipeReader(fd, callback)",
							"(resolve, reject) =>",
							" () =>",
							" data =>",
							" function ReadPipe(fd, callback)",
							" function ReadOutput(fd)",
							"async function SourceDependencies(...args)",
							"async function AstDump(compiler, source, args, force)",
							"size()",
							"json()",
							"data()",
							"SetFile = loc =>",
							"files()",
							"n =>",
							"file =>",
							"pred2 = (used, implicit) =>",
							" node =>",
							"types()",
							" n =>",
							" () =>",
							"List",
							"functions()",
							" n =>",
							" () =>",
							" n =>",
							"List",
							"namespaces()",
							" n =>",
							"List",
							"classes()",
							"predicate = n =>",
							"List",
							"variables()",
							"n =>",
							"List",
							"names(depth = 1)",
							"n =>",
							"n =>",
							" function NameFor(decl, ast = globalThis['$']?.data)",
							" (value, key) =>",
							" function NodeType(n)",
							"t =>",
							" n =>",
							" function NodeName(n, name)",
							" function* RawLocation(path)",
							" function* RawRange(path)",
							" function CompleteLocation(path)",
							"l =>",
							" function CompleteRange(path)",
							"l =>",
							" function GetLoc(node)",
							" function GetTypeNode(node, ast = globalThis['$'].data)",
							"node =>",
							"node =>",
							" function GetTypeStr(node)",
							"inner =>",
							"inner =>",
							"([n, t]) =>",
							"NodeError",
							"constructor(message, node)",
							"NodeError",
							" function NodePrinter(ast)",
							" function put(str)",
							" function trim()",
							"printer = function(node)",
							"get()",
							"value()",
							"value(node)",
							"toString()",
							"i =>",
							"NodePrinter",
							"AbiTagAttr(abi_tag_attr)",
							"AccessSpecDecl(access_spec_decl)",
							"AlignedAttr(aligned_attr)",
							"AlwaysInlineAttr(always_inline_attr)",
							"ArraySubscriptExpr(array_subscript_expr)",
							"AsmLabelAttr(asm_label_attr)",
							"BinaryOperator(binary_operator)",
							"BlockCommandComment(block_command_comment)",
							"BuiltinAttr(builtin_attr)",
							"BreakStmt(break_stmt)",
							"CallExpr(call_expr)",
							"RecoveryExpr(recovery_expr)",
							"CaseStmt(case_stmt)",
							"CharacterLiteral(character_literal)",
							"CompoundAssignOperator(compound_assign_operator)",
							"CompoundStmt(compound_stmt)",
							"ConditionalOperator(conditional_operator)",
							"ConstantExpr(constant_expr)",
							"ConstAttr(const_attr)",
							"ContinueStmt(continue_stmt)",
							"CStyleCastExpr(cstyle_cast_expr)",
							"DeclRefExpr(decl_ref_expr)",
							"DeclStmt(decl_stmt)",
							"DefaultStmt(default_stmt)",
							"DeprecatedAttr(deprecated_attr)",
							"DoStmt(do_stmt)",
							"EmptyDecl(empty_decl)",
							"EnumConstantDecl(enum_constant_decl)",
							"EnumDecl(enum_decl)",
							"FieldDecl(field_decl)",
							"FloatingLiteral(floating_literal)",
							"FormatAttr(format_attr)",
							"ForStmt(for_stmt)",
							"n =>",
							"FullComment(full_comment)",
							"FunctionDecl(function_decl)",
							"n =>",
							"n =>",
							"GotoStmt(goto_stmt)",
							" n =>",
							"HTMLEndTagComment(html_end_tag_comment)",
							"HTMLStartTagComment(html_start_tag_comment)",
							"IfStmt(if_stmt)",
							"ImplicitCastExpr(implicit_cast_expr)",
							"InitListExpr(init_list_expr)",
							"InlineCommandComment(inline_command_comment)",
							"IntegerLiteral(integer_literal)",
							"LabelStmt(label_stmt)",
							"MemberExpr(member_expr)",
							"NonNullAttr(non_null_attr)",
							"NoThrowAttr(no_throw_attr)",
							"NullStmt(null_stmt)",
							"ParagraphComment(paragraph_comment)",
							"ParamCommandComment(param_command_comment)",
							"ParenExpr(paren_expr)",
							"ParenListExpr(paren_list_expr)",
							"ParmVarDecl(parm_var_decl)",
							"PureAttr(pure_attr)",
							"RecordDecl(record_decl)",
							"RestrictAttr(restrict_attr)",
							"ReturnStmt(return_stmt)",
							"ReturnsTwiceAttr(returns_twice_attr)",
							"StringLiteral(string_literal)",
							"SwitchStmt(switch_stmt)",
							"TextComment(text_comment)",
							"TranslationUnitDecl(translation_unit_decl)",
							"TypedefDecl(typedef_decl)",
							"UnaryExprOrTypeTraitExpr(unary_expr_or_type_trait_expr)",
							"UnaryOperator(unary_operator)",
							"UnresolvedLookupExpr(unresolved_lookup_expr)",
							"UnresolvedMemberExpr(unresolved_member_expr)",
							"VarDecl(var_decl, base_type)",
							"([offset, subscript]) =>",
							"VerbatimBlockComment(verbatim_block_comment)",
							"VerbatimBlockLineComment(verbatim_block_line_comment)",
							"WarnUnusedResultAttr(warn_unused_result_attr)",
							"WeakAttr(weak_attr)",
							"WhileStmt(while_stmt)",
							"OverrideAttr(override_attr)",
							"AddrLabelExpr(addr_label_expr)",
							"AliasAttr(alias_attr)",
							"AlignValueAttr(align_value_attr)",
							"AllocSizeAttr(alloc_size_attr)",
							"ArrayInitIndexExpr(array_init_index_expr)",
							"ArrayInitLoopExpr(array_init_loop_expr)",
							"AtomicExpr(atomic_expr)",
							"AtomicType(atomic_type)",
							"AutoType(auto_type)",
							"BuiltinTemplateDecl(builtin_template_decl)",
							"BuiltinType(builtin_type)",
							"CallbackAttr(callback_attr)",
							"ClassTemplateDecl(class_template_decl)",
							"ClassTemplatePartialSpecializationDecl(class_template_partial_specialization_decl)",
							"ClassTemplateSpecializationDecl(class_template_specialization_decl)",
							"ComplexType(complex_type)",
							"CompoundLiteralExpr(compound_literal_expr)",
							"ConstantArrayType(constant_array_type)",
							"ConstructorUsingShadowDecl(constructor_using_shadow_decl)",
							"ConvertVectorExpr(convert_vector_expr)",
							"DecayedType(decayed_type)",
							"DecltypeType(decltype_type)",
							"DependentNameType(dependent_name_type)",
							"DependentScopeDeclRefExpr(dependent_scope_decl_ref_expr)",
							"DependentSizedArrayType(dependent_sized_array_type)",
							"DependentTemplateSpecializationType(dependent_template_specialization_type)",
							"ElaboratedType(elaborated_type)",
							"EnumType(enum_type)",
							"ExprWithCleanups(expr_with_cleanups)",
							"FinalAttr(final_attr)",
							"FormatArgAttr(format_arg_attr)",
							"FriendDecl(friend_decl)",
							"FunctionNoProtoType(function_no_proto_type)",
							"FunctionProtoType(function_proto_type)",
							"FunctionTemplateDecl(function_template_decl)",
							"GCCAsmStmt(gcc_asm_stmt)",
							"GNUInlineAttr(gnu_inline_attr)",
							"GNUNullExpr(gnu_null_expr)",
							"ImplicitValueInitExpr(implicit_value_init_expr)",
							"IncompleteArrayType(incomplete_array_type)",
							"IndirectFieldDecl(indirect_field_decl)",
							"IndirectGotoStmt(indirect_goto_stmt)",
							"InjectedClassNameType(injected_class_name_type)",
							"LambdaExpr(lambda_expr)",
							"LinkageSpecDecl(linkage_spec_decl)",
							"LValueReferenceType(l_value_reference_type)",
							"MaterializeTemporaryExpr(materialize_temporary_expr)",
							"MaxFieldAlignmentAttr(max_field_alignment_attr)",
							"MayAliasAttr(may_alias_attr)",
							"MemberPointerType(member_pointer_type)",
							"MinVectorWidthAttr(min_vector_width_attr)",
							"ModeAttr(mode_attr)",
							"NamespaceDecl(namespace_decl)",
							"NoDebugAttr(no_debug_attr)",
							"NoInlineAttr(no_inline_attr)",
							"NonTypeTemplateParmDecl(non_type_template_parm_decl)",
							"OffsetOfExpr(offset_of_expr)",
							"OpaqueValueExpr(opaque_value_expr)",
							"OwnerAttr(owner_attr)",
							"PackedAttr(packed_attr)",
							"PackExpansionExpr(pack_expansion_expr)",
							"PackExpansionType(pack_expansion_type)",
							"ParenType(paren_type)",
							"PointerAttr(pointer_attr)",
							"PointerType(pointer_type)",
							"PredefinedExpr(predefined_expr)",
							"QualType(qual_type)",
							"RecordType(record_type)",
							"ReturnsNonNullAttr(returns_non_null_attr)",
							"RValueReferenceType(r_value_reference_type)",
							"SentinelAttr(sentinel_attr)",
							"ShuffleVectorExpr(shuffle_vector_expr)",
							"SizeOfPackExpr(size_of_pack_expr)",
							"StaticAssertDecl(static_assert_decl)",
							"StmtExpr(stmt_expr)",
							"SubstNonTypeTemplateParmExpr(subst_non_type_template_parm_expr)",
							"SubstTemplateTypeParmType(subst_template_type_parm_type)",
							"TargetAttr(target_attr)",
							"TemplateArgument(template_argument)",
							"TemplateSpecializationType(template_specialization_type)",
							"TemplateTemplateParmDecl(template_template_parm_decl)",
							"TemplateTypeParmDecl(template_type_parm_decl)",
							"TemplateTypeParmType(template_type_parm_type)",
							"TParamCommandComment(t_param_command_comment)",
							"TypeAliasDecl(type_alias_decl)",
							"TypeAliasTemplateDecl(type_alias_template_decl)",
							"TypedefType(typedef_type)",
							"TypeOfExprType(type_of_expr_type)",
							"TypeTraitExpr(type_trait_expr)",
							"UnaryTransformType(unary_transform_type)",
							"UnresolvedUsingValueDecl(unresolved_using_value_decl)",
							"UnusedAttr(unused_attr)",
							"UsingDecl(using_decl)",
							"UsingDirectiveDecl(using_directive_decl)",
							"UsingShadowDecl(using_shadow_decl)",
							"VAArgExpr(va_arg_expr)",
							"VarTemplateDecl(var_template_decl)",
							"VectorType(vector_type)",
							"VerbatimLineComment(verbatim_line_comment)",
							"VisibilityAttr(visibility_attr)",
							"WeakRefAttr(weak_ref_attr)",
							"CXXRecordDecl(cxx_record_decl)",
							"CXXConstructorDecl(cxx_constructor_decl)",
							"n =>",
							"CXXCtorInitializer(cxx_ctor_initializer)",
							"CXXDependentScopeMemberExpr(cxx_dependent_scope_member_expr)",
							"CXXThisExpr(cxx_this_expr)",
							"CXXDestructorDecl(cxx_destructor_decl)",
							"n =>",
							"CXXMethodDecl(cxx_method_decl)",
							"n =>",
							"CXXStaticCastExpr(cxx_static_cast_expr)",
							"CXXUnresolvedConstructExpr(cxx_unresolved_construct_expr)",
							"CXXNewExpr(cxx_new_expr)",
							"CXXDeleteExpr(cxx_delete_expr)",
							"CXXBoolLiteralExpr(cxx_bool_literal_expr)",
							"CXX11NoReturnAttr(cxx11_no_return_attr)",
							"CXXBindTemporaryExpr(cxx_bind_temporary_expr)",
							"CXXCatchStmt(cxx_catch_stmt)",
							"CXXConstructExpr(cxx_construct_expr)",
							"CXXConversionDecl(cxx_conversion_decl)",
							"CXXDefaultArgExpr(cxx_default_arg_expr)",
							"CXXDefaultInitExpr(cxx_default_init_expr)",
							"CXXForRangeStmt(cxx_for_range_stmt)",
							"CXXFunctionalCastExpr(cxx_functional_cast_expr)",
							"CXXMemberCallExpr(cxx_member_call_expr)",
							"CXXNoexceptExpr(cxx_noexcept_expr)",
							"CXXNullPtrLiteralExpr(cxx_null_ptr_literal_expr)",
							"CXXOperatorCallExpr(cxx_operator_call_expr)",
							"CXXReinterpretCastExpr(cxx_reinterpret_cast_expr)",
							"CXXScalarValueInitExpr(cxx_scalar_value_init_expr)",
							"CXXTemporaryObjectExpr(cxx_temporary_object_expr)",
							"CXXTryStmt(cxx_try_stmt)",
							" function PrintNode(node)",
							" function PrintAst(node, ast)",
							"get()",
							" function isNode(obj)",
							" function GetType(name_or_id, ast = globalThis['$']?.data)",
							"n =>",
							" node =>",
							" node =>",
							"r =>",
							" function GetClass(name_or_id, ast = globalThis['$'].data)",
							" n =>",
							"bases()",
							" function* GetBases(node, ast = globalThis['$'].data)",
							" function GetByName(arg, ast = globalThis['$'].data, ...args)",
							" function GetNamespace(arg, root = globalThis['$'].data, predicate = () => true)",
							" n =>",
							" function NamespaceOf(node, path, ast = globalThis['$'].data)",
							"toString()",
							" function GetFields(node)",
							" (v, k) =>",
							"([v, p]) =>",
							"([loc, ptr]) =>",
							"i =>",
							" function GetParams(node)",
							"child =>",
							" function PathRemoveLoc(path)",
							"p =>"
						]
					},
					"",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					35,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/clang-ast.js",
						"symkeys":
						[
							[
								848,
								861
							],
							[
								940,
								996
							],
							[
								1441,
								1500
							],
							[
								2040,
								2077
							],
							[
								2296,
								2328
							],
							[
								2430,
								2467
							],
							[
								2621,
								2648
							],
							[
								2730,
								2760
							],
							[
								2827,
								2835
							],
							[
								2874,
								2901
							],
							[
								2950,
								2977
							],
							[
								3054,
								3058
							],
							[
								3081,
								3114
							],
							[
								3294,
								3337
							],
							[
								3622,
								3630
							],
							[
								4022,
								4026
							],
							[
								4045,
								4065
							],
							[
								4216,
								4248
							],
							[
								4410,
								4428
							],
							[
								4681,
								4698
							],
							[
								5005,
								5016
							],
							[
								5036,
								5043
							],
							[
								5070,
								5079
							],
							[
								5199,
								5205
							],
							[
								5317,
								5325
							],
							[
								5440,
								5449
							],
							[
								5475,
								5484
							],
							[
								5515,
								5519
							],
							[
								5580,
								5584
							],
							[
								5660,
								5676
							],
							[
								5933,
								5948
							],
							[
								6015,
								6024
							],
							[
								6085,
								6093
							],
							[
								6142,
								6151
							],
							[
								6198,
								6208
							],
							[
								6261,
								6271
							],
							[
								6302,
								6312
							],
							[
								6400,
								6411
							],
							[
								6617,
								6621
							],
							[
								6802,
								6813
							],
							[
								7044,
								7048
							],
							[
								7100,
								7114
							],
							[
								7164,
								7214
							],
							[
								7284,
								7339
							],
							[
								7344,
								7378
							],
							[
								7557,
								7561
							],
							[
								7642,
								7657
							],
							[
								7745,
								7801
							],
							[
								7875,
								7885
							],
							[
								8089,
								8096
							],
							[
								8213,
								8224
							],
							[
								8261,
								8290
							],
							[
								8351,
								8382
							],
							[
								8584,
								8594
							],
							[
								8649,
								8662
							],
							[
								8699,
								8728
							],
							[
								8789,
								8820
							],
							[
								9024,
								9034
							],
							[
								9089,
								9093
							],
							[
								9191,
								9217
							],
							[
								12197,
								12201
							],
							[
								13216,
								13228
							],
							[
								13351,
								13359
							],
							[
								13445,
								13456
							],
							[
								13579,
								13592
							],
							[
								13715,
								13727
							],
							[
								13821,
								13830
							],
							[
								13882,
								13893
							],
							[
								13982,
								13991
							],
							[
								14111,
								14127
							],
							[
								14185,
								14201
							],
							[
								14249,
								14262
							],
							[
								14409,
								14424
							],
							[
								14571,
								14586
							],
							[
								14843,
								14857
							],
							[
								14943,
								14955
							],
							[
								15022,
								15034
							],
							[
								15140,
								15157
							],
							[
								15243,
								15254
							],
							[
								15314,
								15327
							],
							[
								15470,
								15478
							],
							[
								15586,
								15596
							],
							[
								15777,
								15786
							],
							[
								17592,
								17602
							],
							[
								19681,
								19687
							],
							[
								19973,
								19984
							],
							[
								20085,
								20135
							],
							[
								20221,
								20229
							],
							[
								20289,
								20297
							],
							[
								22104,
								22134
							],
							[
								22213,
								22223
							],
							[
								22241,
								22267
							],
							[
								22396,
								22404
							],
							[
								22487,
								22495
							],
							[
								22673,
								22678
							],
							[
								22716,
								22723
							],
							[
								22807,
								22821
							],
							[
								23414,
								23418
							],
							[
								23499,
								23504
							],
							[
								25038,
								25042
							],
							[
								25944,
								25958
							],
							[
								26022,
								26032
							],
							[
								26117,
								26139
							],
							[
								26361,
								26369
							],
							[
								26491,
								26510
							],
							[
								26608,
								26616
							],
							[
								26634,
								26656
							],
							[
								26777,
								26785
							],
							[
								26890,
								26916
							],
							[
								27271,
								27279
							],
							[
								27394,
								27405
							],
							[
								27423,
								27449
							],
							[
								27521,
								27525
							],
							[
								27630,
								27640
							],
							[
								27700,
								27704
							],
							[
								27767,
								27771
							],
							[
								27821,
								27825
							],
							[
								28235,
								28245
							],
							[
								28277,
								28285
							],
							[
								28382,
								28391
							],
							[
								28409,
								28431
							],
							[
								28649,
								28661
							],
							[
								28679,
								28705
							],
							[
								28940,
								28948
							],
							[
								29011,
								29019
							],
							[
								30086,
								30105
							],
							[
								30221,
								30231
							],
							[
								30286,
								30294
							],
							[
								30403,
								30410
							],
							[
								30428,
								30450
							],
							[
								30795,
								30803
							],
							[
								30900,
								30909
							],
							[
								30933,
								30955
							],
							[
								31060,
								31071
							],
							[
								31089,
								31111
							],
							[
								31488,
								31505
							],
							[
								31523,
								31545
							],
							[
								31801,
								31809
							],
							[
								31920,
								31925
							],
							[
								31973,
								31996
							],
							[
								32118,
								32129
							],
							[
								32178,
								32190
							],
							[
								32252,
								32261
							],
							[
								32308,
								32318
							],
							[
								32356,
								32392
							],
							[
								33047,
								33059
							],
							[
								33105,
								33114
							],
							[
								33161,
								33171
							],
							[
								33351,
								33356
							],
							[
								33412,
								33420
							],
							[
								33513,
								33536
							],
							[
								33795,
								33811
							],
							[
								34030,
								34046
							],
							[
								34457,
								34470
							],
							[
								34616,
								34626
							],
							[
								34674,
								34685
							],
							[
								34777,
								34789
							],
							[
								34839,
								34852
							],
							[
								34900,
								34912
							],
							[
								34962,
								34975
							],
							[
								35223,
								35236
							],
							[
								35271,
								35286
							],
							[
								35366,
								35421
							],
							[
								35965,
								35975
							],
							[
								36218,
								36238
							],
							[
								36321,
								36367
							],
							[
								37866,
								37931
							],
							[
								38241,
								38245
							],
							[
								38506,
								38510
							],
							[
								39235,
								39242
							],
							[
								39296,
								39303
							],
							[
								39387,
								39394
							],
							[
								39571,
								39606
							],
							[
								39645,
								39665
							],
							[
								39695,
								39701
							],
							[
								39722,
								39730
							],
							[
								39837,
								39870
							],
							[
								40135,
								40160
							],
							[
								40501,
								40543
							],
							[
								41075,
								41128
							],
							[
								42538,
								42544
							],
							[
								42594,
								42600
							],
							[
								42765,
								42771
							],
							[
								42913,
								42929
							],
							[
								43474,
								43481
							],
							[
								43524,
								43528
							],
							[
								43548,
								43555
							],
							[
								43676,
								43703
							],
							[
								43762,
								43777
							],
							[
								44082,
								44089
							],
							[
								44149,
								44163
							],
							[
								44208,
								44223
							],
							[
								44249,
								44253
							],
							[
								44285,
								44296
							],
							[
								44329,
								44341
							],
							[
								44375,
								44388
							],
							[
								44464,
								44469
							],
							[
								44549,
								44553
							],
							[
								44577,
								44589
							],
							[
								44652,
								44657
							],
							[
								44687,
								44691
							],
							[
								44715,
								44724
							],
							[
								44737,
								44753
							],
							[
								45095,
								45099
							],
							[
								45123,
								45134
							],
							[
								45193,
								45197
							],
							[
								45235,
								45239
							],
							[
								45271,
								45287
							],
							[
								45326,
								45330
							],
							[
								45348,
								45352
							],
							[
								45396,
								45448
							],
							[
								45636,
								45652
							],
							[
								46012,
								46033
							],
							[
								46059,
								46063
							],
							[
								46505,
								46510
							],
							[
								46545,
								46572
							],
							[
								46766,
								46794
							],
							[
								46975,
								47000
							],
							[
								47075,
								47107
							],
							[
								47238,
								47242
							],
							[
								47379,
								47408
							],
							[
								47518,
								47522
							],
							[
								47816,
								47838
							],
							[
								48877,
								48932
							],
							[
								49012,
								49019
							],
							[
								49085,
								49092
							],
							[
								49129,
								49155
							],
							[
								49249,
								49257
							],
							[
								49323,
								49331
							],
							[
								49393,
								49404
							],
							[
								49558,
								49567
							],
							[
								49586,
								49612
							],
							[
								49665,
								49674
							],
							[
								49727,
								49753
							],
							[
								49805,
								49824
							],
							[
								49900,
								49917
							],
							[
								49952,
								49976
							],
							[
								50235,
								50240
							],
							[
								50298,
								50305
							],
							[
								50387,
								50398
							],
							[
								51106,
								51116
							],
							[
								51164,
								51168
							],
							[
								51359,
								51370
							],
							[
								51381,
								51405
							],
							[
								51473,
								51505
							],
							[
								51661,
								51686
							],
							[
								51750,
								51786
							],
							[
								51856,
								51896
							],
							[
								52148,
								52176
							],
							[
								52223,
								52254
							],
							[
								52483,
								52525
							],
							[
								52728,
								52753
							],
							[
								52911,
								52932
							],
							[
								52977,
								52996
							],
							[
								53330,
								53357
							],
							[
								53425,
								53444
							],
							[
								53659,
								53694
							],
							[
								53812,
								53860
							],
							[
								54106,
								54133
							],
							[
								54751,
								54792
							],
							[
								55030,
								55057
							],
							[
								55200,
								55221
							],
							[
								55282,
								55309
							],
							[
								55354,
								55386
							],
							[
								55636,
								55662
							],
							[
								55856,
								55875
							],
							[
								56537,
								56562
							],
							[
								56610,
								56641
							],
							[
								56708,
								56723
							],
							[
								56918,
								56939
							],
							[
								57056,
								57092
							],
							[
								57312,
								57331
							],
							[
								57735,
								57756
							],
							[
								57973,
								58006
							],
							[
								58066,
								58089
							],
							[
								58152,
								58169
							],
							[
								58289,
								58293
							],
							[
								59120,
								59145
							],
							[
								59352,
								59379
							],
							[
								59844,
								59848
							],
							[
								60058,
								60062
							],
							[
								60261,
								60280
							],
							[
								60401,
								60406
							],
							[
								60744,
								60783
							],
							[
								60882,
								60925
							],
							[
								61135,
								61150
							],
							[
								61416,
								61452
							],
							[
								61548,
								61576
							],
							[
								61846,
								61890
							],
							[
								61952,
								61983
							],
							[
								62042,
								62063
							],
							[
								62122,
								62145
							],
							[
								62592,
								62618
							],
							[
								62686,
								62712
							],
							[
								62776,
								62795
							],
							[
								62837,
								62872
							],
							[
								63046,
								63088
							],
							[
								63273,
								63294
							],
							[
								63470,
								63500
							],
							[
								63720,
								63746
							],
							[
								64175,
								64194
							],
							[
								64255,
								64278
							],
							[
								64813,
								64840
							],
							[
								64890,
								64913
							],
							[
								65070,
								65106
							],
							[
								65176,
								65205
							],
							[
								65263,
								65286
							],
							[
								65464,
								65489
							],
							[
								65573,
								65615
							],
							[
								65714,
								65739
							],
							[
								66043,
								66098
							],
							[
								66340,
								66369
							],
							[
								66620,
								66664
							],
							[
								66796,
								66840
							],
							[
								66927,
								66955
							],
							[
								67099,
								67123
							],
							[
								67371,
								67415
							],
							[
								67737,
								67790
							],
							[
								67889,
								67934
							],
							[
								68009,
								68028
							],
							[
								68089,
								68110
							],
							[
								68287,
								68314
							],
							[
								68363,
								68393
							],
							[
								68405,
								68426
							],
							[
								68438,
								68470
							],
							[
								68612,
								68642
							],
							[
								68654,
								68695
							],
							[
								68707,
								68746
							],
							[
								68758,
								68781
							],
							[
								68793,
								68816
							],
							[
								68828,
								68847
							],
							[
								68859,
								68901
							],
							[
								68913,
								68938
							],
							[
								68950,
								68977
							],
							[
								68989,
								69027
							],
							[
								69039,
								69121
							],
							[
								69133,
								69200
							],
							[
								69212,
								69237
							],
							[
								69249,
								69291
							],
							[
								69476,
								69514
							],
							[
								69526,
								69583
							],
							[
								69595,
								69633
							],
							[
								69645,
								69670
							],
							[
								69682,
								69709
							],
							[
								69721,
								69759
							],
							[
								69771,
								69827
							],
							[
								69921,
								69972
							],
							[
								69984,
								70059
							],
							[
								70071,
								70102
							],
							[
								70114,
								70133
							],
							[
								70145,
								70181
							],
							[
								70277,
								70298
							],
							[
								70310,
								70340
							],
							[
								70352,
								70375
							],
							[
								70387,
								70430
							],
							[
								70442,
								70480
							],
							[
								70492,
								70536
							],
							[
								70548,
								70572
							],
							[
								70689,
								70719
							],
							[
								70731,
								70757
							],
							[
								70801,
								70848
							],
							[
								70860,
								70902
							],
							[
								70914,
								70952
							],
							[
								70964,
								71000
							],
							[
								71012,
								71059
							],
							[
								71071,
								71094
							],
							[
								71106,
								71140
							],
							[
								71348,
								71391
							],
							[
								71403,
								71455
							],
							[
								71559,
								71606
							],
							[
								71618,
								71646
							],
							[
								71658,
								71696
							],
							[
								71708,
								71749
							],
							[
								71761,
								71780
							],
							[
								71792,
								71821
							],
							[
								71833,
								71859
							],
							[
								71871,
								71899
							],
							[
								71911,
								71963
							],
							[
								71975,
								72003
							],
							[
								72015,
								72049
							],
							[
								72181,
								72202
							],
							[
								72214,
								72237
							],
							[
								72249,
								72287
							],
							[
								72299,
								72337
							],
							[
								72349,
								72370
							],
							[
								72382,
								72407
							],
							[
								72419,
								72444
							],
							[
								72456,
								72487
							],
							[
								72574,
								72593
							],
							[
								72605,
								72628
							],
							[
								72640,
								72681
							],
							[
								72693,
								72736
							],
							[
								72748,
								72775
							],
							[
								72787,
								72825
							],
							[
								72837,
								72870
							],
							[
								72882,
								72918
							],
							[
								72930,
								72949
							],
							[
								73015,
								73078
							],
							[
								73090,
								73146
							],
							[
								73158,
								73181
							],
							[
								73193,
								73228
							],
							[
								73240,
								73296
							],
							[
								73308,
								73361
							],
							[
								73373,
								73418
							],
							[
								73430,
								73475
							],
							[
								73487,
								73532
							],
							[
								73544,
								73574
							],
							[
								73586,
								73633
							],
							[
								73645,
								73670
							],
							[
								73682,
								73715
							],
							[
								73727,
								73757
							],
							[
								73769,
								73809
							],
							[
								73821,
								73874
							],
							[
								73886,
								73909
							],
							[
								73921,
								73942
							],
							[
								73954,
								73994
							],
							[
								74006,
								74040
							],
							[
								74052,
								74074
							],
							[
								74086,
								74120
							],
							[
								74132,
								74155
							],
							[
								74167,
								74209
							],
							[
								74221,
								74252
							],
							[
								74264,
								74290
							],
							[
								74303,
								74333
							],
							[
								74907,
								74947
							],
							[
								75157,
								75161
							],
							[
								76302,
								76342
							],
							[
								76725,
								76785
							],
							[
								77221,
								77247
							],
							[
								77355,
								77393
							],
							[
								77589,
								77593
							],
							[
								77880,
								77910
							],
							[
								78369,
								78373
							],
							[
								79025,
								79064
							],
							[
								79728,
								79785
							],
							[
								80106,
								80130
							],
							[
								80603,
								80633
							],
							[
								80897,
								80938
							],
							[
								81073,
								81112
							],
							[
								81124,
								81169
							],
							[
								81181,
								81209
							],
							[
								81221,
								81257
							],
							[
								81401,
								81439
							],
							[
								81451,
								81490
							],
							[
								81502,
								81543
							],
							[
								81555,
								81590
							],
							[
								81602,
								81649
							],
							[
								81661,
								81700
							],
							[
								81713,
								81747
							],
							[
								81759,
								81807
							],
							[
								81819,
								81862
							],
							[
								81874,
								81923
							],
							[
								81935,
								81985
							],
							[
								81997,
								82046
							],
							[
								82300,
								82324
							],
							[
								82381,
								82406
							],
							[
								82785,
								82814
							],
							[
								83007,
								83012
							],
							[
								83287,
								83308
							],
							[
								83375,
								83433
							],
							[
								83579,
								83583
							],
							[
								84168,
								84176
							],
							[
								84228,
								84236
							],
							[
								84348,
								84352
							],
							[
								84605,
								84663
							],
							[
								84765,
								84770
							],
							[
								85119,
								85126
							],
							[
								85315,
								85368
							],
							[
								85605,
								85666
							],
							[
								85976,
								86056
							],
							[
								86177,
								86182
							],
							[
								86520,
								86581
							],
							[
								86923,
								86933
							],
							[
								86999,
								87024
							],
							[
								87062,
								87072
							],
							[
								87137,
								87148
							],
							[
								87222,
								87237
							],
							[
								87276,
								87280
							],
							[
								87360,
								87385
							],
							[
								87424,
								87432
							],
							[
								87474,
								87503
							],
							[
								87533,
								87537
							]
						],
						"symlist":
						[
							" (ast, r) =>",
							" function DeepFind(ast, pred, flags = deep.RETURN_VALUE)",
							" function* DeepSelect(ast, pred, flags = deep.RETURN_VALUE)",
							" function DeepCachePath(ast, path, m)",
							" function DeepPathOf(ast, value)",
							" function DeepGet(ast, path, ...args)",
							"function FileTime(filename)",
							"function Newer(file, ...other)",
							"other =>",
							"function Older(file, other)",
							"function GetSubscripts(str)",
							"m =>",
							"function TrimSubscripts(str, sub)",
							" function nameOrIdPred(name_or_id, ...args)",
							" node =>",
							"List",
							"constructor(...args)",
							"filter(callback, thisArg = null)",
							"callback = elem =>",
							"slice(start, end)",
							"get first()",
							"elem =>",
							"entries()",
							"keys()",
							"values()",
							"toArray()",
							"(a, n) =>",
							"List",
							"Node",
							"constructor(ast)",
							"static get(ast)",
							"get ast()",
							"get id()",
							"get loc()",
							"get file()",
							" (v, k) =>",
							" (v, k) =>",
							"get range()",
							"r =>",
							"toJSON(obj)",
							"Node",
							"(node, ast) =>",
							" function PathOf(node, ast = globalThis['$'].data)",
							" function* Hier(node_or_path, t = (p, ast, abort) => p.",
							"(ast), ast = globalThis['$'].data)",
							"p =>",
							"abortFn = () =>",
							" function FindType(typeName, ast = globalThis['$'].data)",
							"([tok]) =>",
							"node =>",
							"PointerType",
							"constructor(pointee, ast, ns)",
							"static fromString(str, ast, ns)",
							"toString()",
							"ReferenceType",
							"constructor(pointee, ast, ns)",
							"static fromString(str, ast, ns)",
							"toString()",
							"Type",
							"constructor(node, ast, ns)",
							"n =>",
							"get regExp()",
							"isEnum()",
							"isPointer()",
							"isReference()",
							"isFunction()",
							"isArray()",
							"isInteger()",
							"arrayOf()",
							"get subscripts()",
							"trimSubscripts()",
							"get pointer()",
							"get reference()",
							"getPointer(ast)",
							"get unsigned()",
							"get signed()",
							"isCompound()",
							"isFloatingPoint()",
							"get alias()",
							"get aliases()",
							"isEnum()",
							"isString()",
							"get ffi()",
							"get size()",
							"toJS()",
							"toJSON(obj)",
							"static get(name_or_id, ast = globalThis['$'].data)",
							" node =>",
							" node =>",
							"function RoundTo(value, align)",
							"RecordDecl",
							"constructor(node, ast, ns)",
							"child =>",
							"child =>",
							"() =>",
							"node =>",
							"(acc, node) =>",
							"i =>",
							" n =>",
							"n =>",
							"([name, t]) =>",
							"get size()",
							"(acc, [name, type]) =>",
							"toJSON()",
							"([name, member]) =>",
							"EnumDecl",
							"constructor(node, ast)",
							"child =>",
							"({ name, type, inner }) =>",
							"toJSON()",
							"TypedefDecl",
							"constructor(node, ast, ns)",
							"n =>",
							" (v, k) =>",
							"n =>",
							"n =>",
							"n =>",
							"get size()",
							"toJSON()",
							"FieldDecl",
							"constructor(node, ast)",
							"FunctionDecl",
							"constructor(node, ast, ns)",
							"child =>",
							"child =>",
							"({ name, type }) =>",
							"isMethod()",
							"toJSON()",
							"VarDecl",
							"constructor(node, ast)",
							"toJSON()",
							"ClassDecl",
							"constructor(node, ast)",
							"BuiltinType",
							"constructor(node, ast)",
							"ConstantArrayType",
							"constructor(node, ast)",
							"toJSON()",
							"Range",
							"constructor(begin, end)",
							"get begin()",
							"set begin(v)",
							"get end()",
							"set end(v)",
							"toString(opts = { printFile: true })",
							"get length()",
							"toArray()",
							"toObject()",
							"Range",
							"Location",
							"static at(file, offset)",
							"static from(loc)",
							"constructor(loc)",
							"update(other)",
							"get line()",
							"set line(v)",
							"get column()",
							"set column(v)",
							"get offset()",
							"set offset(v)",
							" (t, ...c) =>",
							"'\\x1b[m' : t =>",
							"toString(opts = { printFile: true, onlyOffset: false })",
							"toObject()",
							"localeCompare(other)",
							" function TypeFactory(node, ast, cache = true)",
							"async function SpawnCompiler(compiler, input, outfile, args = [])",
							"p =>",
							"p =>",
							"line =>",
							"line =>",
							"line =>",
							" function PipeReader(fd, callback)",
							"(resolve, reject) =>",
							" () =>",
							" data =>",
							" function ReadPipe(fd, callback)",
							" function ReadOutput(fd)",
							"async function SourceDependencies(...args)",
							"async function AstDump(compiler, source, args, force)",
							"size()",
							"json()",
							"data()",
							"SetFile = loc =>",
							"files()",
							"n =>",
							"file =>",
							"pred2 = (used, implicit) =>",
							" node =>",
							"types()",
							" n =>",
							" () =>",
							"List",
							"functions()",
							" n =>",
							" () =>",
							" n =>",
							"List",
							"namespaces()",
							" n =>",
							"List",
							"classes()",
							"predicate = n =>",
							"List",
							"variables()",
							"n =>",
							"List",
							"names(depth = 1)",
							"n =>",
							"n =>",
							" function NameFor(decl, ast = globalThis['$']?.data)",
							" (value, key) =>",
							" function NodeType(n)",
							"t =>",
							" n =>",
							" function NodeName(n, name)",
							" function* RawLocation(path)",
							" function* RawRange(path)",
							" function CompleteLocation(path)",
							"l =>",
							" function CompleteRange(path)",
							"l =>",
							" function GetLoc(node)",
							" function GetTypeNode(node, ast = globalThis['$'].data)",
							"node =>",
							"node =>",
							" function GetTypeStr(node)",
							"inner =>",
							"inner =>",
							"([n, t]) =>",
							"NodeError",
							"constructor(message, node)",
							"NodeError",
							" function NodePrinter(ast)",
							" function put(str)",
							" function trim()",
							"printer = function(node)",
							"get()",
							"value()",
							"value(node)",
							"toString()",
							"i =>",
							"NodePrinter",
							"AbiTagAttr(abi_tag_attr)",
							"AccessSpecDecl(access_spec_decl)",
							"AlignedAttr(aligned_attr)",
							"AlwaysInlineAttr(always_inline_attr)",
							"ArraySubscriptExpr(array_subscript_expr)",
							"AsmLabelAttr(asm_label_attr)",
							"BinaryOperator(binary_operator)",
							"BlockCommandComment(block_command_comment)",
							"BuiltinAttr(builtin_attr)",
							"BreakStmt(break_stmt)",
							"CallExpr(call_expr)",
							"RecoveryExpr(recovery_expr)",
							"CaseStmt(case_stmt)",
							"CharacterLiteral(character_literal)",
							"CompoundAssignOperator(compound_assign_operator)",
							"CompoundStmt(compound_stmt)",
							"ConditionalOperator(conditional_operator)",
							"ConstantExpr(constant_expr)",
							"ConstAttr(const_attr)",
							"ContinueStmt(continue_stmt)",
							"CStyleCastExpr(cstyle_cast_expr)",
							"DeclRefExpr(decl_ref_expr)",
							"DeclStmt(decl_stmt)",
							"DefaultStmt(default_stmt)",
							"DeprecatedAttr(deprecated_attr)",
							"DoStmt(do_stmt)",
							"EmptyDecl(empty_decl)",
							"EnumConstantDecl(enum_constant_decl)",
							"EnumDecl(enum_decl)",
							"FieldDecl(field_decl)",
							"FloatingLiteral(floating_literal)",
							"FormatAttr(format_attr)",
							"ForStmt(for_stmt)",
							"n =>",
							"FullComment(full_comment)",
							"FunctionDecl(function_decl)",
							"n =>",
							"n =>",
							"GotoStmt(goto_stmt)",
							" n =>",
							"HTMLEndTagComment(html_end_tag_comment)",
							"HTMLStartTagComment(html_start_tag_comment)",
							"IfStmt(if_stmt)",
							"ImplicitCastExpr(implicit_cast_expr)",
							"InitListExpr(init_list_expr)",
							"InlineCommandComment(inline_command_comment)",
							"IntegerLiteral(integer_literal)",
							"LabelStmt(label_stmt)",
							"MemberExpr(member_expr)",
							"NonNullAttr(non_null_attr)",
							"NoThrowAttr(no_throw_attr)",
							"NullStmt(null_stmt)",
							"ParagraphComment(paragraph_comment)",
							"ParamCommandComment(param_command_comment)",
							"ParenExpr(paren_expr)",
							"ParenListExpr(paren_list_expr)",
							"ParmVarDecl(parm_var_decl)",
							"PureAttr(pure_attr)",
							"RecordDecl(record_decl)",
							"RestrictAttr(restrict_attr)",
							"ReturnStmt(return_stmt)",
							"ReturnsTwiceAttr(returns_twice_attr)",
							"StringLiteral(string_literal)",
							"SwitchStmt(switch_stmt)",
							"TextComment(text_comment)",
							"TranslationUnitDecl(translation_unit_decl)",
							"TypedefDecl(typedef_decl)",
							"UnaryExprOrTypeTraitExpr(unary_expr_or_type_trait_expr)",
							"UnaryOperator(unary_operator)",
							"UnresolvedLookupExpr(unresolved_lookup_expr)",
							"UnresolvedMemberExpr(unresolved_member_expr)",
							"VarDecl(var_decl, base_type)",
							"([offset, subscript]) =>",
							"VerbatimBlockComment(verbatim_block_comment)",
							"VerbatimBlockLineComment(verbatim_block_line_comment)",
							"WarnUnusedResultAttr(warn_unused_result_attr)",
							"WeakAttr(weak_attr)",
							"WhileStmt(while_stmt)",
							"OverrideAttr(override_attr)",
							"AddrLabelExpr(addr_label_expr)",
							"AliasAttr(alias_attr)",
							"AlignValueAttr(align_value_attr)",
							"AllocSizeAttr(alloc_size_attr)",
							"ArrayInitIndexExpr(array_init_index_expr)",
							"ArrayInitLoopExpr(array_init_loop_expr)",
							"AtomicExpr(atomic_expr)",
							"AtomicType(atomic_type)",
							"AutoType(auto_type)",
							"BuiltinTemplateDecl(builtin_template_decl)",
							"BuiltinType(builtin_type)",
							"CallbackAttr(callback_attr)",
							"ClassTemplateDecl(class_template_decl)",
							"ClassTemplatePartialSpecializationDecl(class_template_partial_specialization_decl)",
							"ClassTemplateSpecializationDecl(class_template_specialization_decl)",
							"ComplexType(complex_type)",
							"CompoundLiteralExpr(compound_literal_expr)",
							"ConstantArrayType(constant_array_type)",
							"ConstructorUsingShadowDecl(constructor_using_shadow_decl)",
							"ConvertVectorExpr(convert_vector_expr)",
							"DecayedType(decayed_type)",
							"DecltypeType(decltype_type)",
							"DependentNameType(dependent_name_type)",
							"DependentScopeDeclRefExpr(dependent_scope_decl_ref_expr)",
							"DependentSizedArrayType(dependent_sized_array_type)",
							"DependentTemplateSpecializationType(dependent_template_specialization_type)",
							"ElaboratedType(elaborated_type)",
							"EnumType(enum_type)",
							"ExprWithCleanups(expr_with_cleanups)",
							"FinalAttr(final_attr)",
							"FormatArgAttr(format_arg_attr)",
							"FriendDecl(friend_decl)",
							"FunctionNoProtoType(function_no_proto_type)",
							"FunctionProtoType(function_proto_type)",
							"FunctionTemplateDecl(function_template_decl)",
							"GCCAsmStmt(gcc_asm_stmt)",
							"GNUInlineAttr(gnu_inline_attr)",
							"GNUNullExpr(gnu_null_expr)",
							"ImplicitValueInitExpr(implicit_value_init_expr)",
							"IncompleteArrayType(incomplete_array_type)",
							"IndirectFieldDecl(indirect_field_decl)",
							"IndirectGotoStmt(indirect_goto_stmt)",
							"InjectedClassNameType(injected_class_name_type)",
							"LambdaExpr(lambda_expr)",
							"LinkageSpecDecl(linkage_spec_decl)",
							"LValueReferenceType(l_value_reference_type)",
							"MaterializeTemporaryExpr(materialize_temporary_expr)",
							"MaxFieldAlignmentAttr(max_field_alignment_attr)",
							"MayAliasAttr(may_alias_attr)",
							"MemberPointerType(member_pointer_type)",
							"MinVectorWidthAttr(min_vector_width_attr)",
							"ModeAttr(mode_attr)",
							"NamespaceDecl(namespace_decl)",
							"NoDebugAttr(no_debug_attr)",
							"NoInlineAttr(no_inline_attr)",
							"NonTypeTemplateParmDecl(non_type_template_parm_decl)",
							"OffsetOfExpr(offset_of_expr)",
							"OpaqueValueExpr(opaque_value_expr)",
							"OwnerAttr(owner_attr)",
							"PackedAttr(packed_attr)",
							"PackExpansionExpr(pack_expansion_expr)",
							"PackExpansionType(pack_expansion_type)",
							"ParenType(paren_type)",
							"PointerAttr(pointer_attr)",
							"PointerType(pointer_type)",
							"PredefinedExpr(predefined_expr)",
							"QualType(qual_type)",
							"RecordType(record_type)",
							"ReturnsNonNullAttr(returns_non_null_attr)",
							"RValueReferenceType(r_value_reference_type)",
							"SentinelAttr(sentinel_attr)",
							"ShuffleVectorExpr(shuffle_vector_expr)",
							"SizeOfPackExpr(size_of_pack_expr)",
							"StaticAssertDecl(static_assert_decl)",
							"StmtExpr(stmt_expr)",
							"SubstNonTypeTemplateParmExpr(subst_non_type_template_parm_expr)",
							"SubstTemplateTypeParmType(subst_template_type_parm_type)",
							"TargetAttr(target_attr)",
							"TemplateArgument(template_argument)",
							"TemplateSpecializationType(template_specialization_type)",
							"TemplateTemplateParmDecl(template_template_parm_decl)",
							"TemplateTypeParmDecl(template_type_parm_decl)",
							"TemplateTypeParmType(template_type_parm_type)",
							"TParamCommandComment(t_param_command_comment)",
							"TypeAliasDecl(type_alias_decl)",
							"TypeAliasTemplateDecl(type_alias_template_decl)",
							"TypedefType(typedef_type)",
							"TypeOfExprType(type_of_expr_type)",
							"TypeTraitExpr(type_trait_expr)",
							"UnaryTransformType(unary_transform_type)",
							"UnresolvedUsingValueDecl(unresolved_using_value_decl)",
							"UnusedAttr(unused_attr)",
							"UsingDecl(using_decl)",
							"UsingDirectiveDecl(using_directive_decl)",
							"UsingShadowDecl(using_shadow_decl)",
							"VAArgExpr(va_arg_expr)",
							"VarTemplateDecl(var_template_decl)",
							"VectorType(vector_type)",
							"VerbatimLineComment(verbatim_line_comment)",
							"VisibilityAttr(visibility_attr)",
							"WeakRefAttr(weak_ref_attr)",
							"CXXRecordDecl(cxx_record_decl)",
							"CXXConstructorDecl(cxx_constructor_decl)",
							"n =>",
							"CXXCtorInitializer(cxx_ctor_initializer)",
							"CXXDependentScopeMemberExpr(cxx_dependent_scope_member_expr)",
							"CXXThisExpr(cxx_this_expr)",
							"CXXDestructorDecl(cxx_destructor_decl)",
							"n =>",
							"CXXMethodDecl(cxx_method_decl)",
							"n =>",
							"CXXStaticCastExpr(cxx_static_cast_expr)",
							"CXXUnresolvedConstructExpr(cxx_unresolved_construct_expr)",
							"CXXNewExpr(cxx_new_expr)",
							"CXXDeleteExpr(cxx_delete_expr)",
							"CXXBoolLiteralExpr(cxx_bool_literal_expr)",
							"CXX11NoReturnAttr(cxx11_no_return_attr)",
							"CXXBindTemporaryExpr(cxx_bind_temporary_expr)",
							"CXXCatchStmt(cxx_catch_stmt)",
							"CXXConstructExpr(cxx_construct_expr)",
							"CXXConversionDecl(cxx_conversion_decl)",
							"CXXDefaultArgExpr(cxx_default_arg_expr)",
							"CXXDefaultInitExpr(cxx_default_init_expr)",
							"CXXForRangeStmt(cxx_for_range_stmt)",
							"CXXFunctionalCastExpr(cxx_functional_cast_expr)",
							"CXXMemberCallExpr(cxx_member_call_expr)",
							"CXXNoexceptExpr(cxx_noexcept_expr)",
							"CXXNullPtrLiteralExpr(cxx_null_ptr_literal_expr)",
							"CXXOperatorCallExpr(cxx_operator_call_expr)",
							"CXXReinterpretCastExpr(cxx_reinterpret_cast_expr)",
							"CXXScalarValueInitExpr(cxx_scalar_value_init_expr)",
							"CXXTemporaryObjectExpr(cxx_temporary_object_expr)",
							"CXXTryStmt(cxx_try_stmt)",
							" function PrintNode(node)",
							" function PrintAst(node, ast)",
							"get()",
							" function isNode(obj)",
							" function GetType(name_or_id, ast = globalThis['$']?.data)",
							"n =>",
							" node =>",
							" node =>",
							"r =>",
							" function GetClass(name_or_id, ast = globalThis['$'].data)",
							" n =>",
							"bases()",
							" function* GetBases(node, ast = globalThis['$'].data)",
							" function GetByName(arg, ast = globalThis['$'].data, ...args)",
							" function GetNamespace(arg, root = globalThis['$'].data, predicate = () => true)",
							" n =>",
							" function NamespaceOf(node, path, ast = globalThis['$'].data)",
							"toString()",
							" function GetFields(node)",
							" (v, k) =>",
							"([v, p]) =>",
							"([loc, ptr]) =>",
							"i =>",
							" function GetParams(node)",
							"child =>",
							" function PathRemoveLoc(path)",
							"p =>"
						]
					},
					"",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				]
			]
		},
		{
			"file": "clang-ast.js",
			"settings":
			{
				"buffer_size": 87654,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					11,
					1,
					"revert",
					null,
					"",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvEMBAAAAAAC8QwEAAAAAAAAAAAAAAPC/"
				],
				[
					2,
					1,
					"insert",
					{
						"characters": "cl"
					},
					"AgAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					3,
					2,
					"left_delete",
					null,
					"AgAAAAEAAAAAAAAAAQAAAAAAAAABAAAAbAAAAAAAAAAAAAAAAAAAAAABAAAAYw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAIAAAAAAAAAAgAAAAAAAAAAAAAAAADwvw"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAAv0AAAAAAAADPQAAAAAAAAAAAAADPQAAAAAAAAM9AAAAAAAADkAAAAgICAgICAgICAgICAvL2xldCB0eXBlID0gbmV3IFR5cGUoaW5uZXIudHlwZSwgdGhpcy5hc3QpOwo",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAv0AAAAAAAARPQAAAAAAAAAAAAAAADwvw"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAANHzAAAAAAAA0vMAAAAAAAAAAAAA0vMAAAAAAADT8wAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANHzAAAAAAAA0fMAAAAAAAAAAAAAAADwvw"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAANryAAAAAAAA2/IAAAAAAAAAAAAA2/IAAAAAAADb8gAAAAAAAFcAAAAgLypjb25zdCB7IHJlZmVyZW5jZWREZWNsIH0gPSBtZW1iZXJfZXhwci5pbm5lclswXTsKICAgICAgICBwdXQocmVmZXJlbmNlZERlY2wubmFtZSk7Ki8",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANryAAAAAAAAMfMAAAAAAAAAAAAAAADwvw"
				],
				[
					84,
					1,
					"insert",
					{
						"characters": "&"
					},
					"AQAAANIGAAAAAAAA0wYAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANIGAAAAAAAA0gYAAAAAAAAAAAAAAADwvw"
				],
				[
					85,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANMGAAAAAAAA1AYAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANMGAAAAAAAA0wYAAAAAAAAAAAAAAADwvw"
				],
				[
					86,
					1,
					"paste",
					null,
					"AQAAANQGAAAAAAAA5QYAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANQGAAAAAAAA1AYAAAAAAAAAAAAAAADwvw"
				],
				[
					88,
					1,
					"insert",
					{
						"characters": "deep."
					},
					"BQAAANQGAAAAAAAA1QYAAAAAAAAAAAAA1QYAAAAAAADWBgAAAAAAAAAAAADWBgAAAAAAANcGAAAAAAAAAAAAANcGAAAAAAAA2AYAAAAAAAAAAAAA2AYAAAAAAADZBgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANQGAAAAAAAA1AYAAAAAAAAAAAAAAADwvw"
				],
				[
					104,
					1,
					"insert",
					{
						"characters": "\n\nif"
					},
					"BwAAAL8GAAAAAAAAwAYAAAAAAAAAAAAAwAYAAAAAAADEBgAAAAAAAAAAAADEBgAAAAAAAMUGAAAAAAAAAAAAAMUGAAAAAAAAyQYAAAAAAAAAAAAAwAYAAAAAAADABgAAAAAAAAQAAAAgICAgxQYAAAAAAADGBgAAAAAAAAAAAADGBgAAAAAAAMcGAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL8GAAAAAAAAvwYAAAAAAAAAAAAAAADwvw"
				],
				[
					105,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAMcGAAAAAAAAyQYAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMcGAAAAAAAAxwYAAAAAAAAAAAAAAADwvw"
				],
				[
					106,
					1,
					"insert",
					{
						"characters": "flags"
					},
					"BQAAAMgGAAAAAAAAyQYAAAAAAAAAAAAAyQYAAAAAAADKBgAAAAAAAAAAAADKBgAAAAAAAMsGAAAAAAAAAAAAAMsGAAAAAAAAzAYAAAAAAAAAAAAAzAYAAAAAAADNBgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMgGAAAAAAAAyAYAAAAAAAAAAAAAAADwvw"
				],
				[
					107,
					1,
					"insert",
					{
						"characters": " &"
					},
					"AgAAAM0GAAAAAAAAzgYAAAAAAAAAAAAAzgYAAAAAAADPBgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM0GAAAAAAAAzQYAAAAAAAAAAAAAAADwvw"
				],
				[
					108,
					1,
					"insert",
					{
						"characters": " deep.PATH_AS_P"
					},
					"DwAAAM8GAAAAAAAA0AYAAAAAAAAAAAAA0AYAAAAAAADRBgAAAAAAAAAAAADRBgAAAAAAANIGAAAAAAAAAAAAANIGAAAAAAAA0wYAAAAAAAAAAAAA0wYAAAAAAADUBgAAAAAAAAAAAADUBgAAAAAAANUGAAAAAAAAAAAAANUGAAAAAAAA1gYAAAAAAAAAAAAA1gYAAAAAAADXBgAAAAAAAAAAAADXBgAAAAAAANgGAAAAAAAAAAAAANgGAAAAAAAA2QYAAAAAAAAAAAAA2QYAAAAAAADaBgAAAAAAAAAAAADaBgAAAAAAANsGAAAAAAAAAAAAANsGAAAAAAAA3AYAAAAAAAAAAAAA3AYAAAAAAADdBgAAAAAAAAAAAADdBgAAAAAAAN4GAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM8GAAAAAAAAzwYAAAAAAAAAAAAAAADwvw"
				],
				[
					109,
					1,
					"insert",
					{
						"characters": "OINTER"
					},
					"BgAAAN4GAAAAAAAA3wYAAAAAAAAAAAAA3wYAAAAAAADgBgAAAAAAAAAAAADgBgAAAAAAAOEGAAAAAAAAAAAAAOEGAAAAAAAA4gYAAAAAAAAAAAAA4gYAAAAAAADjBgAAAAAAAAAAAADjBgAAAAAAAOQGAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN4GAAAAAAAA3gYAAAAAAAAAAAAAAADwvw"
				],
				[
					111,
					1,
					"left_delete",
					null,
					"AQAAAOQGAAAAAAAA5AYAAAAAAAABAAAAKQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOUGAAAAAAAA5QYAAAAAAAAAAAAAAADwvw"
				],
				[
					112,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAOQGAAAAAAAA5QYAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOQGAAAAAAAA5AYAAAAAAAAAAAAAAADwvw"
				],
				[
					113,
					1,
					"insert",
					{
						"characters": "\npath=new"
					},
					"DAAAAOUGAAAAAAAA5gYAAAAAAAAAAAAA5gYAAAAAAADqBgAAAAAAAAAAAADmBgAAAAAAAOYGAAAAAAAABAAAACAgICDmBgAAAAAAAOwGAAAAAAAAAAAAAOwGAAAAAAAA7QYAAAAAAAAAAAAA7QYAAAAAAADuBgAAAAAAAAAAAADuBgAAAAAAAO8GAAAAAAAAAAAAAO8GAAAAAAAA8AYAAAAAAAAAAAAA8AYAAAAAAADxBgAAAAAAAAAAAADxBgAAAAAAAPIGAAAAAAAAAAAAAPIGAAAAAAAA8wYAAAAAAAAAAAAA8wYAAAAAAAD0BgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOUGAAAAAAAA5QYAAAAAAAAAAAAAAADwvw"
				],
				[
					114,
					1,
					"insert",
					{
						"characters": " Pointer"
					},
					"CAAAAPQGAAAAAAAA9QYAAAAAAAAAAAAA9QYAAAAAAAD2BgAAAAAAAAAAAAD2BgAAAAAAAPcGAAAAAAAAAAAAAPcGAAAAAAAA+AYAAAAAAAAAAAAA+AYAAAAAAAD5BgAAAAAAAAAAAAD5BgAAAAAAAPoGAAAAAAAAAAAAAPoGAAAAAAAA+wYAAAAAAAAAAAAA+wYAAAAAAAD8BgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPQGAAAAAAAA9AYAAAAAAAAAAAAAAADwvw"
				],
				[
					115,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAPwGAAAAAAAA/gYAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPwGAAAAAAAA/AYAAAAAAAAAAAAAAADwvw"
				],
				[
					116,
					1,
					"insert",
					{
						"characters": "path"
					},
					"BAAAAP0GAAAAAAAA/gYAAAAAAAAAAAAA/gYAAAAAAAD/BgAAAAAAAAAAAAD/BgAAAAAAAAAHAAAAAAAAAAAAAAAHAAAAAAAAAQcAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP0GAAAAAAAA/QYAAAAAAAAAAAAAAADwvw"
				],
				[
					118,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAAIHAAAAAAAAAwcAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAIHAAAAAAAAAgcAAAAAAAAAAAAAAADwvw"
				],
				[
					144,
					1,
					"cut",
					null,
					"AQAAAMgGAAAAAAAAyAYAAAAAAAAcAAAAZmxhZ3MgJiBkZWVwLlBBVEhfQVNfUE9JTlRFUg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMgGAAAAAAAA5AYAAAAAAAAAAAAAAADwvw"
				],
				[
					145,
					1,
					"paste",
					null,
					"AQAAAMgGAAAAAAAA5AYAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMgGAAAAAAAAyAYAAAAAAAAAAAAAAADwvw"
				],
				[
					157,
					1,
					"insert",
					{
						"characters": " |"
					},
					"AgAAAH0GAAAAAAAAfgYAAAAAAAAAAAAAfgYAAAAAAAB/BgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH0GAAAAAAAAfQYAAAAAAAAAAAAAAADwvw"
				],
				[
					158,
					1,
					"insert",
					{
						"characters": " (d"
					},
					"AwAAAH8GAAAAAAAAgAYAAAAAAAAAAAAAgAYAAAAAAACBBgAAAAAAAAAAAACBBgAAAAAAAIIGAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH8GAAAAAAAAfwYAAAAAAAAAAAAAAADwvw"
				],
				[
					159,
					1,
					"left_delete",
					null,
					"AQAAAIEGAAAAAAAAgQYAAAAAAAABAAAAZA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIIGAAAAAAAAggYAAAAAAAAAAAAAAADwvw"
				],
				[
					160,
					1,
					"insert",
					{
						"characters": "flags"
					},
					"BQAAAIEGAAAAAAAAggYAAAAAAAAAAAAAggYAAAAAAACDBgAAAAAAAAAAAACDBgAAAAAAAIQGAAAAAAAAAAAAAIQGAAAAAAAAhQYAAAAAAAAAAAAAhQYAAAAAAACGBgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIEGAAAAAAAAgQYAAAAAAAAAAAAAAADwvw"
				],
				[
					161,
					1,
					"insert",
					{
						"characters": " &"
					},
					"AgAAAIYGAAAAAAAAhwYAAAAAAAAAAAAAhwYAAAAAAACIBgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIYGAAAAAAAAhgYAAAAAAAAAAAAAAADwvw"
				],
				[
					162,
					1,
					"insert",
					{
						"characters": " (~"
					},
					"AwAAAIgGAAAAAAAAiQYAAAAAAAAAAAAAiQYAAAAAAACKBgAAAAAAAAAAAACKBgAAAAAAAIsGAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIgGAAAAAAAAiAYAAAAAAAAAAAAAAADwvw"
				],
				[
					163,
					1,
					"paste",
					null,
					"AQAAAIsGAAAAAAAAoQYAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIsGAAAAAAAAiwYAAAAAAAAAAAAAAADwvw"
				],
				[
					164,
					1,
					"insert",
					{
						"characters": "))"
					},
					"AgAAAKEGAAAAAAAAogYAAAAAAAAAAAAAogYAAAAAAACjBgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKEGAAAAAAAAoQYAAAAAAAAAAAAAAADwvw"
				],
				[
					171,
					1,
					"cut",
					null,
					"AQAAAOcGAAAAAAAA5wYAAAAAAABEAAAAICAgIGlmKGZsYWdzICYgZGVlcC5QQVRIX0FTX1BPSU5URVIpCiAgICAgIHBhdGg9bmV3IFBvaW50ZXIocGF0aCk7Cgo",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOcGAAAAAAAAKwcAAAAAAAAAAAAAAAAAAA"
				],
				[
					197,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAEjRAAAAAAAASdEAAAAAAAAAAAAASdEAAAAAAABT0QAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEjRAAAAAAAASNEAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"contents": "Searching 1146 files for \"'Member\" (regex)\n\n0 matches\n\nSearching 1146 files for \"MemberExpr\" (regex)\n\n0 matches",
			"settings":
			{
				"buffer_size": 111,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "lib/compileCommand.js",
			"settings":
			{
				"buffer_size": 14774,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					4435,
					1,
					"insert",
					{
						"characters": "\n\nuif"
					},
					"CAAAAP8OAAAAAAAAAA8AAAAAAAAAAAAAAA8AAAAAAAAKDwAAAAAAAAAAAAAKDwAAAAAAAAsPAAAAAAAAAAAAAAsPAAAAAAAAFQ8AAAAAAAAAAAAAAA8AAAAAAAAADwAAAAAAAAoAAAAgICAgICAgICAgCw8AAAAAAAAMDwAAAAAAAAAAAAAMDwAAAAAAAA0PAAAAAAAAAAAAAA0PAAAAAAAADg8AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/w4AAAAAAAD/DgAAAAAAAP///////+9/"
				],
				[
					4436,
					3,
					"left_delete",
					null,
					"AwAAAA0PAAAAAAAADQ8AAAAAAAABAAAAZgwPAAAAAAAADA8AAAAAAAABAAAAaQsPAAAAAAAACw8AAAAAAAABAAAAdQ",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADg8AAAAAAAAODwAAAAAAAAAAAAAAAPC/"
				],
				[
					4437,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AgAAAAsPAAAAAAAADA8AAAAAAAAAAAAADA8AAAAAAAANDwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAACw8AAAAAAAALDwAAAAAAAAAAAAAAAPC/"
				],
				[
					4438,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAA0PAAAAAAAADw8AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADQ8AAAAAAAANDwAAAAAAAAAAAAAAAPC/"
				],
				[
					4439,
					1,
					"insert",
					{
						"characters": "opt.length"
					},
					"CgAAAA4PAAAAAAAADw8AAAAAAAAAAAAADw8AAAAAAAAQDwAAAAAAAAAAAAAQDwAAAAAAABEPAAAAAAAAAAAAABEPAAAAAAAAEg8AAAAAAAAAAAAAEg8AAAAAAAATDwAAAAAAAAAAAAATDwAAAAAAABQPAAAAAAAAAAAAABQPAAAAAAAAFQ8AAAAAAAAAAAAAFQ8AAAAAAAAWDwAAAAAAAAAAAAAWDwAAAAAAABcPAAAAAAAAAAAAABcPAAAAAAAAGA8AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADg8AAAAAAAAODwAAAAAAAAAAAAAAAPC/"
				],
				[
					4441,
					1,
					"insert",
					{
						"characters": "\narg="
					},
					"CAAAABkPAAAAAAAAGg8AAAAAAAAAAAAAGg8AAAAAAAAkDwAAAAAAAAAAAAAaDwAAAAAAABoPAAAAAAAACgAAACAgICAgICAgICAaDwAAAAAAACYPAAAAAAAAAAAAACYPAAAAAAAAJw8AAAAAAAAAAAAAJw8AAAAAAAAoDwAAAAAAAAAAAAAoDwAAAAAAACkPAAAAAAAAAAAAACkPAAAAAAAAKg8AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGQ8AAAAAAAAZDwAAAAAAAAAAAAAAAPC/"
				],
				[
					4442,
					1,
					"insert",
					{
						"characters": "op"
					},
					"AgAAACoPAAAAAAAAKw8AAAAAAAAAAAAAKw8AAAAAAAAsDwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKg8AAAAAAAAqDwAAAAAAAAAAAAAAAPC/"
				],
				[
					4443,
					2,
					"left_delete",
					null,
					"AgAAACsPAAAAAAAAKw8AAAAAAAABAAAAcCoPAAAAAAAAKg8AAAAAAAABAAAAbw",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALA8AAAAAAAAsDwAAAAAAAAAAAAAAAPC/"
				],
				[
					4444,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAACoPAAAAAAAALA8AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKg8AAAAAAAAqDwAAAAAAAAAAAAAAAPC/"
				],
				[
					4445,
					1,
					"insert",
					{
						"characters": "-"
					},
					"AQAAACsPAAAAAAAALA8AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKw8AAAAAAAArDwAAAAAAAAAAAAAAAPC/"
				],
				[
					4447,
					1,
					"insert",
					{
						"characters": "+opt+are"
					},
					"CAAAAC0PAAAAAAAALg8AAAAAAAAAAAAALg8AAAAAAAAvDwAAAAAAAAAAAAAvDwAAAAAAADAPAAAAAAAAAAAAADAPAAAAAAAAMQ8AAAAAAAAAAAAAMQ8AAAAAAAAyDwAAAAAAAAAAAAAyDwAAAAAAADMPAAAAAAAAAAAAADMPAAAAAAAANA8AAAAAAAAAAAAANA8AAAAAAAA1DwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALQ8AAAAAAAAtDwAAAAAAAAAAAAAAAPC/"
				],
				[
					4448,
					2,
					"left_delete",
					null,
					"AgAAADQPAAAAAAAANA8AAAAAAAABAAAAZTMPAAAAAAAAMw8AAAAAAAABAAAAcg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANQ8AAAAAAAA1DwAAAAAAAAAAAAAAAPC/"
				],
				[
					4449,
					1,
					"insert",
					{
						"characters": "g;"
					},
					"AgAAADMPAAAAAAAANA8AAAAAAAAAAAAANA8AAAAAAAA1DwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMw8AAAAAAAAzDwAAAAAAAAAAAAAAAPC/"
				],
				[
					4450,
					2,
					"left_delete",
					null,
					"AgAAADQPAAAAAAAANA8AAAAAAAABAAAAOzMPAAAAAAAAMw8AAAAAAAABAAAAZw",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANQ8AAAAAAAA1DwAAAAAAAAAAAAAAAPC/"
				],
				[
					4451,
					1,
					"insert",
					{
						"characters": "rg"
					},
					"AgAAADMPAAAAAAAANA8AAAAAAAAAAAAANA8AAAAAAAA1DwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMw8AAAAAAAAzDwAAAAAAAAAAAAAAAPC/"
				],
				[
					4452,
					1,
					"left_delete",
					null,
					"AQAAADQPAAAAAAAANA8AAAAAAAABAAAAZw",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANQ8AAAAAAAA1DwAAAAAAAAAAAAAAAPC/"
				],
				[
					4453,
					1,
					"insert",
					{
						"characters": "g;"
					},
					"AgAAADQPAAAAAAAANQ8AAAAAAAAAAAAANQ8AAAAAAAA2DwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANA8AAAAAAAA0DwAAAAAAAAAAAAAAAPC/"
				],
				[
					4457,
					9,
					"left_delete",
					null,
					"CQAAAE8PAAAAAAAATw8AAAAAAAABAAAAZ04PAAAAAAAATg8AAAAAAAABAAAAck0PAAAAAAAATQ8AAAAAAAABAAAAYUwPAAAAAAAATA8AAAAAAAABAAAAIEsPAAAAAAAASw8AAAAAAAABAAAAK0oPAAAAAAAASg8AAAAAAAABAAAAIEkPAAAAAAAASQ8AAAAAAAABAAAAdEgPAAAAAAAASA8AAAAAAAABAAAAcEcPAAAAAAAARw8AAAAAAAABAAAAbw",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUA8AAAAAAABQDwAAAAAAAAAAAAAAAPC/"
				],
				[
					4458,
					1,
					"insert",
					{
						"characters": "arg"
					},
					"AwAAAEcPAAAAAAAASA8AAAAAAAAAAAAASA8AAAAAAABJDwAAAAAAAAAAAABJDwAAAAAAAEoPAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARw8AAAAAAABHDwAAAAAAAAAAAAAAAPC/"
				],
				[
					4461,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAADYPAAAAAAAANw8AAAAAAAAAAAAANw8AAAAAAABDDwAAAAAAAAAAAAA3DwAAAAAAADcPAAAAAAAADAAAACAgICAgICAgICAgIDcPAAAAAAAAQQ8AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANg8AAAAAAAA2DwAAAAAAAP///////+9/"
				],
				[
					4464,
					1,
					"revert",
					null,
					"",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQQ8AAAAAAABBDwAAAAAAAAAAAAAAAPC/"
				],
				[
					4470,
					1,
					"insert",
					{
						"characters": "\nif"
					},
					"AwAAAAAPAAAAAAAAAQ8AAAAAAAAAAAAAAQ8AAAAAAAACDwAAAAAAAAAAAAACDwAAAAAAAAMPAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAA8AAAAAAAAADwAAAAAAAAAAAAAAYGhA"
				],
				[
					4471,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAAMPAAAAAAAABQ8AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAw8AAAAAAAADDwAAAAAAAAAAAAAAAPC/"
				],
				[
					4472,
					1,
					"insert",
					{
						"characters": "opt.length"
					},
					"CgAAAAQPAAAAAAAABQ8AAAAAAAAAAAAABQ8AAAAAAAAGDwAAAAAAAAAAAAAGDwAAAAAAAAcPAAAAAAAAAAAAAAcPAAAAAAAACA8AAAAAAAAAAAAACA8AAAAAAAAJDwAAAAAAAAAAAAAJDwAAAAAAAAoPAAAAAAAAAAAAAAoPAAAAAAAACw8AAAAAAAAAAAAACw8AAAAAAAAMDwAAAAAAAAAAAAAMDwAAAAAAAA0PAAAAAAAAAAAAAA0PAAAAAAAADg8AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABA8AAAAAAAAEDwAAAAAAAAAAAAAAAPC/"
				],
				[
					4474,
					1,
					"insert",
					{
						"characters": " yield"
					},
					"BgAAAA8PAAAAAAAAEA8AAAAAAAAAAAAAEA8AAAAAAAARDwAAAAAAAAAAAAARDwAAAAAAABIPAAAAAAAAAAAAABIPAAAAAAAAEw8AAAAAAAAAAAAAEw8AAAAAAAAUDwAAAAAAAAAAAAAUDwAAAAAAABUPAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADw8AAAAAAAAPDwAAAAAAAAAAAAAAAPC/"
				],
				[
					4475,
					1,
					"insert",
					{
						"characters": " opt;"
					},
					"BQAAABUPAAAAAAAAFg8AAAAAAAAAAAAAFg8AAAAAAAAXDwAAAAAAAAAAAAAXDwAAAAAAABgPAAAAAAAAAAAAABgPAAAAAAAAGQ8AAAAAAAAAAAAAGQ8AAAAAAAAaDwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFQ8AAAAAAAAVDwAAAAAAAAAAAAAAAPC/"
				],
				[
					4476,
					1,
					"insert",
					{
						"characters": "\nyield"
					},
					"BgAAABoPAAAAAAAAGw8AAAAAAAAAAAAAGw8AAAAAAAAcDwAAAAAAAAAAAAAcDwAAAAAAAB0PAAAAAAAAAAAAAB0PAAAAAAAAHg8AAAAAAAAAAAAAHg8AAAAAAAAfDwAAAAAAAAAAAAAfDwAAAAAAACAPAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGg8AAAAAAAAaDwAAAAAAAAAAAAAAAPC/"
				],
				[
					4477,
					1,
					"insert",
					{
						"characters": " arg;"
					},
					"BQAAACAPAAAAAAAAIQ8AAAAAAAAAAAAAIQ8AAAAAAAAiDwAAAAAAAAAAAAAiDwAAAAAAACMPAAAAAAAAAAAAACMPAAAAAAAAJA8AAAAAAAAAAAAAJA8AAAAAAAAlDwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIA8AAAAAAAAgDwAAAAAAAAAAAAAAAPC/"
				],
				[
					4483,
					1,
					"insert",
					{
						"characters": "if(arg.length"
					},
					"DQAAABsPAAAAAAAAHA8AAAAAAAAAAAAAHA8AAAAAAAAdDwAAAAAAAAAAAAAdDwAAAAAAAB4PAAAAAAAAAAAAAB4PAAAAAAAAHw8AAAAAAAAAAAAAHw8AAAAAAAAgDwAAAAAAAAAAAAAgDwAAAAAAACEPAAAAAAAAAAAAACEPAAAAAAAAIg8AAAAAAAAAAAAAIg8AAAAAAAAjDwAAAAAAAAAAAAAjDwAAAAAAACQPAAAAAAAAAAAAACQPAAAAAAAAJQ8AAAAAAAAAAAAAJQ8AAAAAAAAmDwAAAAAAAAAAAAAmDwAAAAAAACcPAAAAAAAAAAAAACcPAAAAAAAAKA8AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGw8AAAAAAAAbDwAAAAAAAAAAAAAAAAAA"
				],
				[
					4484,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACgPAAAAAAAAKQ8AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKA8AAAAAAAAoDwAAAAAAAAAAAAAAAPC/"
				],
				[
					4485,
					1,
					"left_delete",
					null,
					"AQAAACgPAAAAAAAAKA8AAAAAAAABAAAAIA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKQ8AAAAAAAApDwAAAAAAAAAAAAAAAPC/"
				],
				[
					4486,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAACgPAAAAAAAAKQ8AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKA8AAAAAAAAoDwAAAAAAAAAAAAAAAPC/"
				],
				[
					4487,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACkPAAAAAAAAKg8AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKQ8AAAAAAAApDwAAAAAAAAAAAAAAAPC/"
				],
				[
					4494,
					7,
					"left_delete",
					null,
					"BwAAAD8PAAAAAAAAPw8AAAAAAAA7AAAAaWYob3B0Lmxlbmd0aCkgYXJnID0gJy0nICsgb3B0ICsgYXJnOwoKICAgICAgICAgIHlpZWxkIGFyZzs9DwAAAAAAAD0PAAAAAAAAAgAAACAgOw8AAAAAAAA7DwAAAAAAAAIAAAAgIDkPAAAAAAAAOQ8AAAAAAAACAAAAICA3DwAAAAAAADcPAAAAAAAAAgAAACAgNQ8AAAAAAAA1DwAAAAAAAAIAAAAgIDQPAAAAAAAANA8AAAAAAAABAAAACg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPw8AAAAAAAB6DwAAAAAAAP///////+9/"
				],
				[
					4497,
					1,
					"revert",
					null,
					"",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANA8AAAAAAAA0DwAAAAAAAAAAAAAAAPC/"
				],
				[
					4502,
					1,
					"insert",
					{
						"characters": "'-'"
					},
					"AwAAACAPAAAAAAAAIQ8AAAAAAAAAAAAAIQ8AAAAAAAAiDwAAAAAAAAAAAAAiDwAAAAAAACMPAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIA8AAAAAAAAgDwAAAAAAAAAAAAAAAPC/"
				],
				[
					4503,
					1,
					"insert",
					{
						"characters": "+"
					},
					"AQAAACMPAAAAAAAAJA8AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIw8AAAAAAAAjDwAAAAAAAAAAAAAAAPC/"
				],
				[
					4510,
					1,
					"insert",
					{
						"characters": "+1"
					},
					"AgAAAPQNAAAAAAAA9Q0AAAAAAAAAAAAA9Q0AAAAAAAD2DQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9A0AAAAAAAD0DQAAAAAAAAAAAAAAAPC/"
				],
				[
					4515,
					2,
					"left_delete",
					null,
					"AgAAAPUNAAAAAAAA9Q0AAAAAAAABAAAAMfQNAAAAAAAA9A0AAAAAAAABAAAAKw",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9g0AAAAAAAD2DQAAAAAAAAAAAAAAAPC/"
				],
				[
					4520,
					1,
					"insert",
					{
						"characters": "let"
					},
					"BAAAAMsNAAAAAAAAzA0AAAAAAAAAAAAAzA0AAAAAAADMDQAAAAAAABIAAABpZihvcHQubGVuZ3RoKSBhcmfMDQAAAAAAAM0NAAAAAAAAAAAAAM0NAAAAAAAAzg0AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3Q0AAAAAAADLDQAAAAAAAAAAAAAAQGBA"
				],
				[
					4521,
					1,
					"insert",
					{
						"characters": " rest"
					},
					"BQAAAM4NAAAAAAAAzw0AAAAAAAAAAAAAzw0AAAAAAADQDQAAAAAAAAAAAADQDQAAAAAAANENAAAAAAAAAAAAANENAAAAAAAA0g0AAAAAAAAAAAAA0g0AAAAAAADTDQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAzg0AAAAAAADODQAAAAAAAAAAAAAAAPC/"
				],
				[
					4537,
					1,
					"paste",
					null,
					"AgAAAEMOAAAAAAAARw4AAAAAAAAAAAAARw4AAAAAAABHDgAAAAAAAAMAAABhcmc",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQw4AAAAAAABGDgAAAAAAAAAAAAAAAPC/"
				],
				[
					4546,
					1,
					"insert",
					{
						"characters": "arg"
					},
					"BAAAAEMOAAAAAAAARA4AAAAAAAAAAAAARA4AAAAAAABEDgAAAAAAAAQAAAByZXN0RA4AAAAAAABFDgAAAAAAAAAAAABFDgAAAAAAAEYOAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQw4AAAAAAABHDgAAAAAAAAAAAAAAAPC/"
				],
				[
					4553,
					1,
					"paste",
					null,
					"AgAAAFQOAAAAAAAAWA4AAAAAAAAAAAAAWA4AAAAAAABYDgAAAAAAAAMAAABhcmc",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVA4AAAAAAABXDgAAAAAAAAAAAAAAAPC/"
				],
				[
					4558,
					1,
					"paste",
					null,
					"AgAAAEwOAAAAAAAAUA4AAAAAAAAAAAAAUA4AAAAAAABQDgAAAAAAAAMAAABhcmc",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATA4AAAAAAABPDgAAAAAAAAAAAAAAAPC/"
				],
				[
					4563,
					1,
					"paste",
					null,
					"AgAAAC4PAAAAAAAAMg8AAAAAAAAAAAAAMg8AAAAAAAAyDwAAAAAAAAMAAABhcmc",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALg8AAAAAAAAxDwAAAAAAAAAAAAAAAPC/"
				],
				[
					4568,
					1,
					"paste",
					null,
					"AgAAAEEPAAAAAAAARQ8AAAAAAAAAAAAARQ8AAAAAAABFDwAAAAAAAAMAAABhcmc",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQQ8AAAAAAABEDwAAAAAAAAAAAAAAAPC/"
				],
				[
					4583,
					1,
					"insert",
					{
						"characters": "rest"
					},
					"BQAAABwOAAAAAAAAHQ4AAAAAAAAAAAAAHQ4AAAAAAAAdDgAAAAAAAAMAAABhcmcdDgAAAAAAAB4OAAAAAAAAAAAAAB4OAAAAAAAAHw4AAAAAAAAAAAAAHw4AAAAAAAAgDgAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHA4AAAAAAAAfDgAAAAAAAAAAAAAAAPC/"
				],
				[
					4631,
					2,
					"left_delete",
					null,
					"AgAAACArAAAAAAAAICsAAAAAAAABAAAAKh8rAAAAAAAAHysAAAAAAAABAAAALg",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAISsAAAAAAAAhKwAAAAAAAAAAAAAAAPC/"
				],
				[
					4638,
					1,
					"revert",
					null,
					"",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHysAAAAAAAAfKwAAAAAAAAAAAAAAAPC/"
				],
				[
					4648,
					1,
					"insert",
					{
						"characters": "opt"
					},
					"AwAAAMMrAAAAAAAAxCsAAAAAAAAAAAAAxCsAAAAAAADFKwAAAAAAAAAAAADFKwAAAAAAAMYrAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwysAAAAAAADDKwAAAAAAAAAAAAAAAPC/"
				],
				[
					4649,
					1,
					"insert",
					{
						"characters": " =="
					},
					"AwAAAMYrAAAAAAAAxysAAAAAAAAAAAAAxysAAAAAAADIKwAAAAAAAAAAAADIKwAAAAAAAMkrAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxisAAAAAAADGKwAAAAAAAAAAAAAAAPC/"
				],
				[
					4650,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMkrAAAAAAAAyisAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAySsAAAAAAADJKwAAAAAAAAAAAAAAAPC/"
				],
				[
					4651,
					3,
					"left_delete",
					null,
					"AwAAAMkrAAAAAAAAySsAAAAAAAABAAAAIMgrAAAAAAAAyCsAAAAAAAABAAAAPccrAAAAAAAAxysAAAAAAAABAAAAPQ",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAyisAAAAAAADKKwAAAAAAAAAAAAAAAPC/"
				],
				[
					4652,
					1,
					"insert",
					{
						"characters": "  "
					},
					"AgAAAMcrAAAAAAAAyCsAAAAAAAAAAAAAyCsAAAAAAADJKwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxysAAAAAAADHKwAAAAAAAAAAAAAAAPC/"
				],
				[
					4653,
					2,
					"left_delete",
					null,
					"AgAAAMgrAAAAAAAAyCsAAAAAAAABAAAAIMcrAAAAAAAAxysAAAAAAAABAAAAIA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAySsAAAAAAADJKwAAAAAAAAAAAAAAAPC/"
				],
				[
					4654,
					1,
					"insert",
					{
						"characters": "?"
					},
					"AQAAAMcrAAAAAAAAyCsAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxysAAAAAAADHKwAAAAAAAAAAAAAAAPC/"
				],
				[
					4655,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMgrAAAAAAAAySsAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAyCsAAAAAAADIKwAAAAAAAAAAAAAAAPC/"
				],
				[
					4658,
					1,
					"insert",
					{
						"characters": "+1"
					},
					"AgAAAN0rAAAAAAAA3isAAAAAAAAAAAAA3isAAAAAAADfKwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3SsAAAAAAADdKwAAAAAAAAAAAAAAAPC/"
				],
				[
					4660,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAAOArAAAAAAAA4SsAAAAAAAAAAAAA4SsAAAAAAADiKwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4CsAAAAAAADgKwAAAAAAAAAAAAAAAPC/"
				],
				[
					4661,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOIrAAAAAAAA4ysAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4isAAAAAAADiKwAAAAAAAAAAAAAAAPC/"
				],
				[
					4662,
					1,
					"insert",
					{
						"characters": "arg"
					},
					"AwAAAOMrAAAAAAAA5CsAAAAAAAAAAAAA5CsAAAAAAADlKwAAAAAAAAAAAADlKwAAAAAAAOYrAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4ysAAAAAAADjKwAAAAAAAAAAAAAAAPC/"
				],
				[
					4683,
					1,
					"insert",
					{
						"characters": "opt"
					},
					"AwAAANYNAAAAAAAA1w0AAAAAAAAAAAAA1w0AAAAAAADYDQAAAAAAAAAAAADYDQAAAAAAANkNAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1g0AAAAAAADWDQAAAAAAAAAAAAAAAPC/"
				],
				[
					4684,
					1,
					"insert",
					{
						"characters": " ?"
					},
					"AgAAANkNAAAAAAAA2g0AAAAAAAAAAAAA2g0AAAAAAADbDQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2Q0AAAAAAADZDQAAAAAAAAAAAAAAAPC/"
				],
				[
					4685,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANsNAAAAAAAA3A0AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2w0AAAAAAADbDQAAAAAAAAAAAAAAAPC/"
				],
				[
					4688,
					1,
					"insert",
					{
						"characters": "+1"
					},
					"AgAAAPANAAAAAAAA8Q0AAAAAAAAAAAAA8Q0AAAAAAADyDQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA8A0AAAAAAADwDQAAAAAAAAAAAAAAAPC/"
				],
				[
					4690,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAAPMNAAAAAAAA9A0AAAAAAAAAAAAA9A0AAAAAAAD1DQAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA8w0AAAAAAADzDQAAAAAAAAAAAAAAAPC/"
				],
				[
					4691,
					1,
					"insert",
					{
						"characters": " arg"
					},
					"BAAAAPUNAAAAAAAA9g0AAAAAAAAAAAAA9g0AAAAAAAD3DQAAAAAAAAAAAAD3DQAAAAAAAPgNAAAAAAAAAAAAAPgNAAAAAAAA+Q0AAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9Q0AAAAAAAD1DQAAAAAAAAAAAAAAAPC/"
				],
				[
					4707,
					1,
					"insert",
					{
						"characters": "[DIU"
					},
					"BAAAACYrAAAAAAAAJysAAAAAAAAAAAAAJysAAAAAAAAoKwAAAAAAAAAAAAAoKwAAAAAAACkrAAAAAAAAAAAAACkrAAAAAAAAKisAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJisAAAAAAAAmKwAAAAAAAAAAAAAAAPC/"
				],
				[
					4708,
					1,
					"insert",
					{
						"characters": "]"
					},
					"AQAAACorAAAAAAAAKysAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKisAAAAAAAAqKwAAAAAAAAAAAAAAAPC/"
				],
				[
					4709,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACsrAAAAAAAALCsAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKysAAAAAAAArKwAAAAAAAAAAAAAAAPC/"
				],
				[
					4711,
					1,
					"insert",
					{
						"characters": "Ll"
					},
					"AgAAACorAAAAAAAAKysAAAAAAAAAAAAAKysAAAAAAAAsKwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKisAAAAAAAAqKwAAAAAAAAAAAAAAAPC/"
				],
				[
					4713,
					1,
					"insert",
					{
						"characters": "|"
					},
					"AQAAAC0rAAAAAAAALisAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALSsAAAAAAAAtKwAAAAAAAAAAAAAAAPC/"
				],
				[
					4714,
					1,
					"right_delete",
					null,
					"AQAAAC4rAAAAAAAALisAAAAAAAABAAAAIA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALisAAAAAAAAuKwAAAAAAAAAAAAAAAPC/"
				],
				[
					4715,
					1,
					"insert",
					{
						"characters": "\\w+"
					},
					"AwAAAC4rAAAAAAAALysAAAAAAAAAAAAALysAAAAAAAAwKwAAAAAAAAAAAAAwKwAAAAAAADErAAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALisAAAAAAAAuKwAAAAAAAAAAAAAAAPC/"
				],
				[
					4718,
					1,
					"left_delete",
					null,
					"AQAAADErAAAAAAAAMSsAAAAAAAAIAAAAW0EtWmEtel0",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMSsAAAAAAAA5KwAAAAAAAAAAAAAAAPC/"
				],
				[
					4725,
					1,
					"revert",
					null,
					"",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMSsAAAAAAAAxKwAAAAAAAAAAAAAAAPC/"
				],
				[
					4727,
					1,
					"insert",
					{
						"characters": "["
					},
					"AQAAADArAAAAAAAAMSsAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMCsAAAAAAAAwKwAAAAAAAAAAAAAAAPC/"
				],
				[
					4729,
					1,
					"insert",
					{
						"characters": "=]"
					},
					"AgAAADMrAAAAAAAANCsAAAAAAAAAAAAANCsAAAAAAAA1KwAAAAAAAAAAAAA",
					"BwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMysAAAAAAAAzKwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "quickjs/qjs-modules/lib/util.js",
			"settings":
			{
				"buffer_size": 70174,
				"line_ending": "Unix"
			}
		},
		{
			"file": "quickjs/qjs-net/cmake/BuildBrotli.cmake",
			"settings":
			{
				"buffer_size": 2381,
				"line_ending": "Unix"
			}
		},
		{
			"file": "mozdev.js",
			"settings":
			{
				"buffer_size": 2552,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					20,
					1,
					"insert",
					{
						"characters": "{"
					},
					"AQAAAHIEAAAAAAAAcwQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAByBAAAAAAAAHIEAAAAAAAAAAAAAAAA8L8"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": "\n\nreturn"
					},
					"DQAAAHMEAAAAAAAAdAQAAAAAAAAAAAAAdAQAAAAAAAB2BAAAAAAAAAAAAAB0BAAAAAAAAHQEAAAAAAAAAgAAACAgdAQAAAAAAAB4BAAAAAAAAAAAAAB4BAAAAAAAAHkEAAAAAAAAAAAAAHkEAAAAAAAAfQQAAAAAAAAAAAAAdAQAAAAAAAB0BAAAAAAAAAQAAAAgICAgeQQAAAAAAAB6BAAAAAAAAAAAAAB6BAAAAAAAAHsEAAAAAAAAAAAAAHsEAAAAAAAAfAQAAAAAAAAAAAAAfAQAAAAAAAB9BAAAAAAAAAAAAAB9BAAAAAAAAH4EAAAAAAAAAAAAAH4EAAAAAAAAfwQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABzBAAAAAAAAHMEAAAAAAAAAAAAAAAA8L8"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAH8EAAAAAAAAgAQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB/BAAAAAAAAH8EAAAAAAAAAAAAAAAA8L8"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAL4EAAAAAAAAvwQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC+BAAAAAAAAL4EAAAAAAAAAAAAAAAA8L8"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "\n}"
					},
					"BQAAAL8EAAAAAAAAwAQAAAAAAAAAAAAAwAQAAAAAAADEBAAAAAAAAAAAAADEBAAAAAAAAMUEAAAAAAAAAAAAAMAEAAAAAAAAwAQAAAAAAAAEAAAAICAgIMAEAAAAAAAAwgQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC/BAAAAAAAAL8EAAAAAAAAAAAAAAAA8L8"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAHQEAAAAAAAAdQQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB0BAAAAAAAAHQEAAAAAAAAAAAAAAAAAAA"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AgAAAHUEAAAAAAAAdgQAAAAAAAAAAAAAdgQAAAAAAAB3BAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB1BAAAAAAAAHUEAAAAAAAAAAAAAAAA8L8"
				],
				[
					35,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAHcEAAAAAAAAeQQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB3BAAAAAAAAHcEAAAAAAAAAAAAAAAA8L8"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAAHgEAAAAAAAAeQQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB4BAAAAAAAAHgEAAAAAAAAAAAAAAAA8L8"
				],
				[
					37,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAHkEAAAAAAAAewQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB5BAAAAAAAAHkEAAAAAAAAAAAAAAAA8L8"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": "keys"
					},
					"BAAAAHoEAAAAAAAAewQAAAAAAAAAAAAAewQAAAAAAAB8BAAAAAAAAAAAAAB8BAAAAAAAAH0EAAAAAAAAAAAAAH0EAAAAAAAAfgQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB6BAAAAAAAAHoEAAAAAAAAAAAAAAAA8L8"
				],
				[
					39,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAH4EAAAAAAAAgAQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB+BAAAAAAAAH4EAAAAAAAAAAAAAAAA8L8"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": "e.iunn"
					},
					"BgAAAH8EAAAAAAAAgAQAAAAAAAAAAAAAgAQAAAAAAACBBAAAAAAAAAAAAACBBAAAAAAAAIIEAAAAAAAAAAAAAIIEAAAAAAAAgwQAAAAAAAAAAAAAgwQAAAAAAACEBAAAAAAAAAAAAACEBAAAAAAAAIUEAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB/BAAAAAAAAH8EAAAAAAAAAAAAAAAA8L8"
				],
				[
					41,
					6,
					"left_delete",
					null,
					"BgAAAIQEAAAAAAAAhAQAAAAAAAABAAAAboMEAAAAAAAAgwQAAAAAAAABAAAAboIEAAAAAAAAggQAAAAAAAABAAAAdYEEAAAAAAAAgQQAAAAAAAABAAAAaYAEAAAAAAAAgAQAAAAAAAABAAAALn8EAAAAAAAAfwQAAAAAAAABAAAAZQ",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACFBAAAAAAAAIUEAAAAAAAAAAAAAAAA8L8"
				],
				[
					42,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAH4EAAAAAAAAfgQAAAAAAAABAAAAW34EAAAAAAAAfgQAAAAAAAABAAAAXQ",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB/BAAAAAAAAH8EAAAAAAAAAAAAAAAA8L8"
				],
				[
					43,
					4,
					"left_delete",
					null,
					"BAAAAH0EAAAAAAAAfQQAAAAAAAABAAAAc3wEAAAAAAAAfAQAAAAAAAABAAAAeXsEAAAAAAAAewQAAAAAAAABAAAAZXoEAAAAAAAAegQAAAAAAAABAAAAaw",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB+BAAAAAAAAH4EAAAAAAAAAAAAAAAA8L8"
				],
				[
					44,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAHkEAAAAAAAAeQQAAAAAAAABAAAAW3kEAAAAAAAAeQQAAAAAAAABAAAAXQ",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB6BAAAAAAAAHoEAAAAAAAAAAAAAAAA8L8"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": "keys[e.inner"
					},
					"DAAAAHgEAAAAAAAAeQQAAAAAAAAAAAAAeQQAAAAAAAB6BAAAAAAAAAAAAAB6BAAAAAAAAHsEAAAAAAAAAAAAAHsEAAAAAAAAfAQAAAAAAAAAAAAAfAQAAAAAAAB9BAAAAAAAAAAAAAB9BAAAAAAAAH4EAAAAAAAAAAAAAH4EAAAAAAAAfwQAAAAAAAAAAAAAfwQAAAAAAACABAAAAAAAAAAAAACABAAAAAAAAIEEAAAAAAAAAAAAAIEEAAAAAAAAggQAAAAAAAAAAAAAggQAAAAAAACDBAAAAAAAAAAAAACDBAAAAAAAAIQEAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB4BAAAAAAAAHgEAAAAAAAAAAAAAAAA8L8"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": "Text]"
					},
					"BQAAAIQEAAAAAAAAhQQAAAAAAAAAAAAAhQQAAAAAAACGBAAAAAAAAAAAAACGBAAAAAAAAIcEAAAAAAAAAAAAAIcEAAAAAAAAiAQAAAAAAAAAAAAAiAQAAAAAAACJBAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACEBAAAAAAAAIQEAAAAAAAAAAAAAAAA8L8"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": "  in"
					},
					"BAAAAIkEAAAAAAAAigQAAAAAAAAAAAAAigQAAAAAAACLBAAAAAAAAAAAAACLBAAAAAAAAIwEAAAAAAAAAAAAAIwEAAAAAAAAjQQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACJBAAAAAAAAIkEAAAAAAAAAAAAAAAA8L8"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAI0EAAAAAAAAjgQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACNBAAAAAAAAI0EAAAAAAAAAAAAAAAA8L8"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": "rer"
					},
					"AwAAAJAEAAAAAAAAkQQAAAAAAAAAAAAAkQQAAAAAAACSBAAAAAAAAAAAAACSBAAAAAAAAJMEAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACQBAAAAAAAAJAEAAAAAAAAAAAAAAAA8L8"
				],
				[
					52,
					1,
					"left_delete",
					null,
					"AQAAAJIEAAAAAAAAkgQAAAAAAAABAAAAcg",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACTBAAAAAAAAJMEAAAAAAAAAAAAAAAA8L8"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": "tur"
					},
					"AwAAAJIEAAAAAAAAkwQAAAAAAAAAAAAAkwQAAAAAAACUBAAAAAAAAAAAAACUBAAAAAAAAJUEAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACSBAAAAAAAAJIEAAAAAAAAAAAAAAAA8L8"
				],
				[
					54,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJUEAAAAAAAAlgQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACVBAAAAAAAAJUEAAAAAAAAAAAAAAAA8L8"
				],
				[
					55,
					1,
					"left_delete",
					null,
					"AQAAAJUEAAAAAAAAlQQAAAAAAAABAAAAIA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACWBAAAAAAAAJYEAAAAAAAAAAAAAAAA8L8"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAJUEAAAAAAAAlgQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACVBAAAAAAAAJUEAAAAAAAAAAAAAAAA8L8"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": " a;"
					},
					"AwAAAJYEAAAAAAAAlwQAAAAAAAAAAAAAlwQAAAAAAACYBAAAAAAAAAAAAACYBAAAAAAAAJkEAAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACWBAAAAAAAAJYEAAAAAAAAAAAAAAAA8L8"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAJkEAAAAAAAAmgQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACZBAAAAAAAAJkEAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "clang-list.js",
			"settings":
			{
				"buffer_size": 8043,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"doxy",
				"DoxyDoxygen: Comment All"
			],
			[
				"",
				":$ - EOF"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"format",
				"JsPrettier: Format Code"
			],
			[
				"prett",
				"JsPrettier: Format Code"
			],
			[
				"ou",
				"Browse Mode: Outline (Right)"
			],
			[
				"instga",
				"Package Control: Install Package"
			],
			[
				"prettier",
				"JsPrettier: Format Code"
			],
			[
				"json",
				"Pretty JSON: Minify JSON"
			],
			[
				"jspr",
				"JsPrettier: Format Code"
			],
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"color",
				"Color Highlight: Reset"
			],
			[
				"scheme",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"edit cu",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"install pac",
				"Package Control: Install Package"
			],
			[
				"list pack",
				"Package Control: List Packages"
			],
			[
				"edit ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"edit",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"outli",
				"Browse Mode: Outline (Right)"
			],
			[
				"debugger",
				"Preferences: Debugger Settings"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"INSTALL",
				"Package Control: Install Package"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"adap",
				"Debugger: Install Adapters"
			],
			[
				"install ada",
				"Debugger: Install Adapters"
			],
			[
				"adapter",
				"Debugger: Install Adapters"
			],
			[
				"debug",
				"Debugger: Install Adapters"
			],
			[
				"Package Control: remove",
				"Package Control: Remove Package"
			],
			[
				"debu",
				"Debugger: Install Adapters"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 289.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/compile_commands.js",
		"/home/roman/Projects/plot-cv/quickjs/cmake/QuickJSModule.cmake",
		"/home/roman/Projects/plot-cv/mozdev.js",
		"/home/roman/Projects/plot-cv/ast-shell.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/io-helpers.js",
		"/home/roman/Projects/plot-cv/lib/net/webSocketStream.js",
		"/home/roman/Projects/plot-cv/lib/container/weakStackFrame.js",
		"/home/roman/Projects/plot-cv/lib/compileCommand.js",
		"/home/roman/Projects/plot-cv/clang-ast.js",
		"/home/roman/Projects/plot-cv/clang-list.js",
		"/home/roman/Projects/plot-cv/quickjs2/cmake/functions.cmake",
		"/home/roman/Projects/plot-cv/soundcloud-tracks.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/console.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fs.js",
		"/home/roman/Projects/plot-cv/lib/deep.js",
		"/home/roman/Projects/plot-cv/os-helpers.js",
		"/home/janos/Projects/plot-cv/out.gz",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-context-vhost.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/test.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lws-context.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/events.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/web-platform-tests-streams/shared-storage/resources/util.sub.js",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-repeater.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/property-enumeration.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/buffer-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/qjsm.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/io.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/js-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/stream-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/queue.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-mysql.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-blob.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/async-closure.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/misc.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/xpath.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/xml.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-textcode.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/ringbuffer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/inotify.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/extendObject.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/ringbuffer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/js-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/streams.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake/functions.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/defines.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/async-closure.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/buffer-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fsPromises.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-syscallerror.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-syscallerror.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/web-platform-tests-streams/editing/crashtests/make-editable-div-inline-and-set-contenteditable-of-input-to-false.html",
		"/home/roman/Projects/plot-cv/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/process.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-magic.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_repeater.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-child-process.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/virtual-properties.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/child-process.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-predicate.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-pointer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-pgsql.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-path.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-mmap.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-location.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-list.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-internal.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-gpio.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/list-exports.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-serial.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-tree-walker.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-directory.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-deep.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/char-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-bjson.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-blob.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-queue.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-xml.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/path.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-archive.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/vector.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/predicate.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/inet_pton.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/path.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/xml-shell.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/testharnessreport.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/web-platform-tests-streams/streams/readable-streams/async-iterator.any.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_streams.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_stream.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/testharness.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/strverscmp.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/queue.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/mmap-win32.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/memmem.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/location.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/inet_ntop.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/getdents.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/debug.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/clock_gettime.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_sockets.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_pgsql.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_childprocess.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-debug/usr/local/lib/quickjs/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-gnu/usr/local/lib/quickjs/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-llvm/usr/local/lib/quickjs/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-release/usr/local/lib/quickjs/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/inst/x86_64-linux-clang/usr/local/lib/quickjs/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/parser/ebnf.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/lexer/bnf.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_inotify.js"
	],
	"find":
	{
		"height": 25.0
	},
	"find_in_files":
	{
		"height": 138.0,
		"where_history":
		[
			"/home/roman/Projects/plot-cv,*.jsx,*.cmake,CMakeLists.txt,-*/inst/*",
			"/home/roman/Projects/plot-cv,*.js,*.cmake,CMakeLists.txt,-*/inst/*",
			"/home/roman/Projects/plot-cv,*.js,-*/inst/*",
			"/home/roman/Projects/plot-cv,*.js",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"CaseStmt",
			"SwitchStmt",
			"Switch",
			"MemberExpr",
			"'Member",
			"slice",
			"ArgumentOpt",
			"ArgumentOPt",
			"}}});\n",
			"transformPath",
			"assign",
			"PathTransformer",
			"pathTransformer",
			"relative",
			"pathTransformer",
			"absolute\\b",
			"absolute",
			"flags",
			"sources",
			"sources =",
			"sources",
			"ArgumentLen",
			"wrapNumericArgument",
			"argumentType\\(",
			"ArgumentOpt",
			"isystem",
			"absolute\\b",
			"default\\(",
			"ArgumentType",
			"argumentType",
			"ArgumentIs",
			"includes",
			"get sources",
			"sources",
			"\\babsolute\\b",
			"absolute\\b",
			"relative",
			"basename",
			"inspec",
			"inspect",
			"abbrevia",
			"inspect",
			"add_library.*imported",
			"\\bget[A-Za-z_]*_property",
			"_property",
			"ExternalProject_",
			"ExternalProject_Get_Property",
			"IntegerLiteral\\(",
			"IntegerLiteral",
			"deep\\.",
			"try_run",
			"run\\b",
			"GetClass",
			"ast2np",
			"NamespaceOf",
			"GetClass",
			"DeepSelect",
			"nameOrIdPred",
			"GetByName",
			"nameOrIdPred",
			"DeepFind",
			"members",
			"\\bmembers\\b",
			"get members",
			"getType",
			"\\bimport\\b[^\\n]*\\bTree(Iterator|Walker)\\b[^\\n]*\\bfrom\\b",
			"\\bTree(Iterator|Walker)\\b.*\\bfrom\\b",
			"Tree(Iterator|Walker)",
			"isMap",
			"}\n",
			"WriteJS",
			"ReadJSON",
			"WriteJS",
			"ReadJSON",
			"class Location",
			"Location",
			"Location\\b",
			"TYPE_BIG_INT",
			"fs\\.",
			"fs'",
			"Symbol.for",
			"Newer",
			"remove",
			"fs\\.",
			"Writing",
			"base =",
			"unithist",
			"'FunctionDecl",
			"No such",
			"'Type.cons",
			"GetClass",
			"getClass",
			"nameOrIdPred",
			"Deep(Find|Select)\\(",
			"Deep(Find|Select).*name ==",
			"DeepFind.*name ==",
			"DeepFind",
			"decl\\(",
			"\n        ",
			"EnumDecl",
			"class EnumDecl",
			"EnumDecl",
			"ions.get",
			"ions.set",
			"GetClass",
			"getClass",
			"'Type.cons",
			"completeDef",
			"MakeId",
			"cid =",
			"GetByName",
			"GetClass",
			"getClass",
			"GetByName",
			"GetBasese",
			"GetByName",
			"Object.assign",
			"mapFunction\\b",
			"function Get",
			"NameFor",
			"DeepPathOf",
			"deep.pathOf",
			"NamespaceOf",
			"function NamespaceOf",
			"node2path",
			"deep\\.",
			"deep\\.get",
			"deep\\..get"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"DeepGet",
			"DeepPathOf",
			"export function \\1(\\3) {",
			"DeepFind",
			"= globalThis['\\$'].data",
			"= globalThis['$'].data",
			"namespaceOf"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11573,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": "/home/roman/Projects/plot-cv/clang-ast.js",
							"function_name_status_row": 68,
							"outline_rename_mode": false,
							"symkeys":
							[
								[
									848,
									861
								],
								[
									940,
									996
								],
								[
									1441,
									1500
								],
								[
									2040,
									2077
								],
								[
									2296,
									2328
								],
								[
									2430,
									2467
								],
								[
									2621,
									2648
								],
								[
									2730,
									2760
								],
								[
									2827,
									2835
								],
								[
									2874,
									2901
								],
								[
									2950,
									2977
								],
								[
									3054,
									3058
								],
								[
									3081,
									3114
								],
								[
									3294,
									3337
								],
								[
									3622,
									3630
								],
								[
									4022,
									4026
								],
								[
									4045,
									4065
								],
								[
									4216,
									4248
								],
								[
									4410,
									4428
								],
								[
									4681,
									4698
								],
								[
									5005,
									5016
								],
								[
									5036,
									5043
								],
								[
									5070,
									5079
								],
								[
									5199,
									5205
								],
								[
									5317,
									5325
								],
								[
									5440,
									5449
								],
								[
									5475,
									5484
								],
								[
									5515,
									5519
								],
								[
									5580,
									5584
								],
								[
									5660,
									5676
								],
								[
									5933,
									5948
								],
								[
									6015,
									6024
								],
								[
									6085,
									6093
								],
								[
									6142,
									6151
								],
								[
									6198,
									6208
								],
								[
									6261,
									6271
								],
								[
									6302,
									6312
								],
								[
									6400,
									6411
								],
								[
									6617,
									6621
								],
								[
									6802,
									6813
								],
								[
									7044,
									7048
								],
								[
									7100,
									7114
								],
								[
									7164,
									7214
								],
								[
									7284,
									7339
								],
								[
									7344,
									7378
								],
								[
									7557,
									7561
								],
								[
									7642,
									7657
								],
								[
									7745,
									7801
								],
								[
									7875,
									7885
								],
								[
									8089,
									8096
								],
								[
									8213,
									8224
								],
								[
									8261,
									8290
								],
								[
									8351,
									8382
								],
								[
									8584,
									8594
								],
								[
									8649,
									8662
								],
								[
									8699,
									8728
								],
								[
									8789,
									8820
								],
								[
									9024,
									9034
								],
								[
									9089,
									9093
								],
								[
									9191,
									9217
								],
								[
									12197,
									12201
								],
								[
									13216,
									13228
								],
								[
									13351,
									13359
								],
								[
									13445,
									13456
								],
								[
									13579,
									13592
								],
								[
									13715,
									13727
								],
								[
									13821,
									13830
								],
								[
									13882,
									13893
								],
								[
									13982,
									13991
								],
								[
									14111,
									14127
								],
								[
									14185,
									14201
								],
								[
									14249,
									14262
								],
								[
									14409,
									14424
								],
								[
									14571,
									14586
								],
								[
									14843,
									14857
								],
								[
									14943,
									14955
								],
								[
									15022,
									15034
								],
								[
									15140,
									15157
								],
								[
									15243,
									15254
								],
								[
									15314,
									15327
								],
								[
									15470,
									15478
								],
								[
									15586,
									15596
								],
								[
									15777,
									15786
								],
								[
									17592,
									17602
								],
								[
									19681,
									19687
								],
								[
									19973,
									19984
								],
								[
									20085,
									20135
								],
								[
									20221,
									20229
								],
								[
									20289,
									20297
								],
								[
									22104,
									22134
								],
								[
									22213,
									22223
								],
								[
									22241,
									22267
								],
								[
									22396,
									22404
								],
								[
									22487,
									22495
								],
								[
									22673,
									22678
								],
								[
									22716,
									22723
								],
								[
									22807,
									22821
								],
								[
									23414,
									23418
								],
								[
									23499,
									23504
								],
								[
									25038,
									25042
								],
								[
									25944,
									25958
								],
								[
									26022,
									26032
								],
								[
									26117,
									26139
								],
								[
									26361,
									26369
								],
								[
									26491,
									26510
								],
								[
									26608,
									26616
								],
								[
									26634,
									26656
								],
								[
									26777,
									26785
								],
								[
									26890,
									26916
								],
								[
									27271,
									27279
								],
								[
									27394,
									27405
								],
								[
									27423,
									27449
								],
								[
									27521,
									27525
								],
								[
									27630,
									27640
								],
								[
									27700,
									27704
								],
								[
									27767,
									27771
								],
								[
									27821,
									27825
								],
								[
									28235,
									28245
								],
								[
									28277,
									28285
								],
								[
									28382,
									28391
								],
								[
									28409,
									28431
								],
								[
									28649,
									28661
								],
								[
									28679,
									28705
								],
								[
									28940,
									28948
								],
								[
									29011,
									29019
								],
								[
									30086,
									30105
								],
								[
									30221,
									30231
								],
								[
									30286,
									30294
								],
								[
									30403,
									30410
								],
								[
									30428,
									30450
								],
								[
									30795,
									30803
								],
								[
									30900,
									30909
								],
								[
									30933,
									30955
								],
								[
									31060,
									31071
								],
								[
									31089,
									31111
								],
								[
									31488,
									31505
								],
								[
									31523,
									31545
								],
								[
									31801,
									31809
								],
								[
									31920,
									31925
								],
								[
									31973,
									31996
								],
								[
									32118,
									32129
								],
								[
									32178,
									32190
								],
								[
									32252,
									32261
								],
								[
									32308,
									32318
								],
								[
									32356,
									32392
								],
								[
									33047,
									33059
								],
								[
									33105,
									33114
								],
								[
									33161,
									33171
								],
								[
									33351,
									33356
								],
								[
									33412,
									33420
								],
								[
									33513,
									33536
								],
								[
									33795,
									33811
								],
								[
									34030,
									34046
								],
								[
									34457,
									34470
								],
								[
									34616,
									34626
								],
								[
									34674,
									34685
								],
								[
									34777,
									34789
								],
								[
									34839,
									34852
								],
								[
									34900,
									34912
								],
								[
									34962,
									34975
								],
								[
									35223,
									35236
								],
								[
									35271,
									35286
								],
								[
									35366,
									35421
								],
								[
									35965,
									35975
								],
								[
									36218,
									36238
								],
								[
									36321,
									36367
								],
								[
									37866,
									37931
								],
								[
									38241,
									38245
								],
								[
									38506,
									38510
								],
								[
									39235,
									39242
								],
								[
									39296,
									39303
								],
								[
									39387,
									39394
								],
								[
									39571,
									39606
								],
								[
									39645,
									39665
								],
								[
									39695,
									39701
								],
								[
									39722,
									39730
								],
								[
									39837,
									39870
								],
								[
									40135,
									40160
								],
								[
									40501,
									40543
								],
								[
									41075,
									41128
								],
								[
									42538,
									42544
								],
								[
									42594,
									42600
								],
								[
									42765,
									42771
								],
								[
									42913,
									42929
								],
								[
									43474,
									43481
								],
								[
									43524,
									43528
								],
								[
									43548,
									43555
								],
								[
									43676,
									43703
								],
								[
									43762,
									43777
								],
								[
									44082,
									44089
								],
								[
									44149,
									44163
								],
								[
									44208,
									44223
								],
								[
									44249,
									44253
								],
								[
									44285,
									44296
								],
								[
									44329,
									44341
								],
								[
									44375,
									44388
								],
								[
									44464,
									44469
								],
								[
									44549,
									44553
								],
								[
									44577,
									44589
								],
								[
									44652,
									44657
								],
								[
									44687,
									44691
								],
								[
									44715,
									44724
								],
								[
									44737,
									44753
								],
								[
									45095,
									45099
								],
								[
									45123,
									45134
								],
								[
									45193,
									45197
								],
								[
									45235,
									45239
								],
								[
									45271,
									45287
								],
								[
									45326,
									45330
								],
								[
									45348,
									45352
								],
								[
									45396,
									45448
								],
								[
									45636,
									45652
								],
								[
									46012,
									46033
								],
								[
									46059,
									46063
								],
								[
									46505,
									46510
								],
								[
									46545,
									46572
								],
								[
									46766,
									46794
								],
								[
									46975,
									47000
								],
								[
									47075,
									47107
								],
								[
									47238,
									47242
								],
								[
									47379,
									47408
								],
								[
									47518,
									47522
								],
								[
									47816,
									47838
								],
								[
									48877,
									48932
								],
								[
									49012,
									49019
								],
								[
									49085,
									49092
								],
								[
									49129,
									49155
								],
								[
									49249,
									49257
								],
								[
									49323,
									49331
								],
								[
									49393,
									49404
								],
								[
									49558,
									49567
								],
								[
									49586,
									49612
								],
								[
									49665,
									49674
								],
								[
									49727,
									49753
								],
								[
									49805,
									49824
								],
								[
									49900,
									49917
								],
								[
									49952,
									49976
								],
								[
									50235,
									50240
								],
								[
									50298,
									50305
								],
								[
									50387,
									50398
								],
								[
									51106,
									51116
								],
								[
									51164,
									51168
								],
								[
									51359,
									51370
								],
								[
									51381,
									51405
								],
								[
									51473,
									51505
								],
								[
									51661,
									51686
								],
								[
									51750,
									51786
								],
								[
									51856,
									51896
								],
								[
									52148,
									52176
								],
								[
									52223,
									52254
								],
								[
									52483,
									52525
								],
								[
									52728,
									52753
								],
								[
									52911,
									52932
								],
								[
									52977,
									52996
								],
								[
									53330,
									53357
								],
								[
									53425,
									53444
								],
								[
									53659,
									53694
								],
								[
									53812,
									53860
								],
								[
									54106,
									54133
								],
								[
									54751,
									54792
								],
								[
									55030,
									55057
								],
								[
									55200,
									55221
								],
								[
									55282,
									55309
								],
								[
									55354,
									55386
								],
								[
									55636,
									55662
								],
								[
									55856,
									55875
								],
								[
									56537,
									56562
								],
								[
									56610,
									56641
								],
								[
									56708,
									56723
								],
								[
									56918,
									56939
								],
								[
									57056,
									57092
								],
								[
									57312,
									57331
								],
								[
									57735,
									57756
								],
								[
									57973,
									58006
								],
								[
									58066,
									58089
								],
								[
									58152,
									58169
								],
								[
									58289,
									58293
								],
								[
									59120,
									59145
								],
								[
									59352,
									59379
								],
								[
									59844,
									59848
								],
								[
									60058,
									60062
								],
								[
									60261,
									60280
								],
								[
									60401,
									60406
								],
								[
									60744,
									60783
								],
								[
									60882,
									60925
								],
								[
									61135,
									61150
								],
								[
									61416,
									61452
								],
								[
									61548,
									61576
								],
								[
									61846,
									61890
								],
								[
									61952,
									61983
								],
								[
									62042,
									62063
								],
								[
									62122,
									62145
								],
								[
									62592,
									62618
								],
								[
									62686,
									62712
								],
								[
									62776,
									62795
								],
								[
									62837,
									62872
								],
								[
									63046,
									63088
								],
								[
									63273,
									63294
								],
								[
									63470,
									63500
								],
								[
									63720,
									63746
								],
								[
									64175,
									64194
								],
								[
									64255,
									64278
								],
								[
									64813,
									64840
								],
								[
									64890,
									64913
								],
								[
									65070,
									65106
								],
								[
									65176,
									65205
								],
								[
									65263,
									65286
								],
								[
									65464,
									65489
								],
								[
									65573,
									65615
								],
								[
									65714,
									65739
								],
								[
									66043,
									66098
								],
								[
									66340,
									66369
								],
								[
									66620,
									66664
								],
								[
									66796,
									66840
								],
								[
									66927,
									66955
								],
								[
									67099,
									67123
								],
								[
									67371,
									67415
								],
								[
									67737,
									67790
								],
								[
									67889,
									67934
								],
								[
									68009,
									68028
								],
								[
									68089,
									68110
								],
								[
									68287,
									68314
								],
								[
									68363,
									68393
								],
								[
									68405,
									68426
								],
								[
									68438,
									68470
								],
								[
									68612,
									68642
								],
								[
									68654,
									68695
								],
								[
									68707,
									68746
								],
								[
									68758,
									68781
								],
								[
									68793,
									68816
								],
								[
									68828,
									68847
								],
								[
									68859,
									68901
								],
								[
									68913,
									68938
								],
								[
									68950,
									68977
								],
								[
									68989,
									69027
								],
								[
									69039,
									69121
								],
								[
									69133,
									69200
								],
								[
									69212,
									69237
								],
								[
									69249,
									69291
								],
								[
									69476,
									69514
								],
								[
									69526,
									69583
								],
								[
									69595,
									69633
								],
								[
									69645,
									69670
								],
								[
									69682,
									69709
								],
								[
									69721,
									69759
								],
								[
									69771,
									69827
								],
								[
									69921,
									69972
								],
								[
									69984,
									70059
								],
								[
									70071,
									70102
								],
								[
									70114,
									70133
								],
								[
									70145,
									70181
								],
								[
									70277,
									70298
								],
								[
									70310,
									70340
								],
								[
									70352,
									70375
								],
								[
									70387,
									70430
								],
								[
									70442,
									70480
								],
								[
									70492,
									70536
								],
								[
									70548,
									70572
								],
								[
									70689,
									70719
								],
								[
									70731,
									70757
								],
								[
									70801,
									70848
								],
								[
									70860,
									70902
								],
								[
									70914,
									70952
								],
								[
									70964,
									71000
								],
								[
									71012,
									71059
								],
								[
									71071,
									71094
								],
								[
									71106,
									71140
								],
								[
									71348,
									71391
								],
								[
									71403,
									71455
								],
								[
									71559,
									71606
								],
								[
									71618,
									71646
								],
								[
									71658,
									71696
								],
								[
									71708,
									71749
								],
								[
									71761,
									71780
								],
								[
									71792,
									71821
								],
								[
									71833,
									71859
								],
								[
									71871,
									71899
								],
								[
									71911,
									71963
								],
								[
									71975,
									72003
								],
								[
									72015,
									72049
								],
								[
									72181,
									72202
								],
								[
									72214,
									72237
								],
								[
									72249,
									72287
								],
								[
									72299,
									72337
								],
								[
									72349,
									72370
								],
								[
									72382,
									72407
								],
								[
									72419,
									72444
								],
								[
									72456,
									72487
								],
								[
									72574,
									72593
								],
								[
									72605,
									72628
								],
								[
									72640,
									72681
								],
								[
									72693,
									72736
								],
								[
									72748,
									72775
								],
								[
									72787,
									72825
								],
								[
									72837,
									72870
								],
								[
									72882,
									72918
								],
								[
									72930,
									72949
								],
								[
									73015,
									73078
								],
								[
									73090,
									73146
								],
								[
									73158,
									73181
								],
								[
									73193,
									73228
								],
								[
									73240,
									73296
								],
								[
									73308,
									73361
								],
								[
									73373,
									73418
								],
								[
									73430,
									73475
								],
								[
									73487,
									73532
								],
								[
									73544,
									73574
								],
								[
									73586,
									73633
								],
								[
									73645,
									73670
								],
								[
									73682,
									73715
								],
								[
									73727,
									73757
								],
								[
									73769,
									73809
								],
								[
									73821,
									73874
								],
								[
									73886,
									73909
								],
								[
									73921,
									73942
								],
								[
									73954,
									73994
								],
								[
									74006,
									74040
								],
								[
									74052,
									74074
								],
								[
									74086,
									74120
								],
								[
									74132,
									74155
								],
								[
									74167,
									74209
								],
								[
									74221,
									74252
								],
								[
									74264,
									74290
								],
								[
									74303,
									74333
								],
								[
									74907,
									74947
								],
								[
									75157,
									75161
								],
								[
									76302,
									76342
								],
								[
									76725,
									76785
								],
								[
									77221,
									77247
								],
								[
									77355,
									77393
								],
								[
									77589,
									77593
								],
								[
									77880,
									77910
								],
								[
									78369,
									78373
								],
								[
									79025,
									79064
								],
								[
									79728,
									79785
								],
								[
									80106,
									80130
								],
								[
									80603,
									80633
								],
								[
									80897,
									80938
								],
								[
									81073,
									81112
								],
								[
									81124,
									81169
								],
								[
									81181,
									81209
								],
								[
									81221,
									81257
								],
								[
									81401,
									81439
								],
								[
									81451,
									81490
								],
								[
									81502,
									81543
								],
								[
									81555,
									81590
								],
								[
									81602,
									81649
								],
								[
									81661,
									81700
								],
								[
									81713,
									81747
								],
								[
									81759,
									81807
								],
								[
									81819,
									81862
								],
								[
									81874,
									81923
								],
								[
									81935,
									81985
								],
								[
									81997,
									82046
								],
								[
									82300,
									82324
								],
								[
									82381,
									82406
								],
								[
									82785,
									82814
								],
								[
									83007,
									83012
								],
								[
									83287,
									83308
								],
								[
									83375,
									83433
								],
								[
									83579,
									83583
								],
								[
									84168,
									84176
								],
								[
									84228,
									84236
								],
								[
									84348,
									84352
								],
								[
									84605,
									84663
								],
								[
									84765,
									84770
								],
								[
									85119,
									85126
								],
								[
									85315,
									85368
								],
								[
									85605,
									85666
								],
								[
									85976,
									86056
								],
								[
									86177,
									86182
								],
								[
									86520,
									86581
								],
								[
									86923,
									86933
								],
								[
									86999,
									87024
								],
								[
									87062,
									87072
								],
								[
									87137,
									87148
								],
								[
									87222,
									87237
								],
								[
									87276,
									87280
								],
								[
									87360,
									87385
								],
								[
									87424,
									87432
								],
								[
									87474,
									87503
								],
								[
									87533,
									87537
								]
							],
							"symlist":
							[
								"(ast, r) =>",
								"DeepFind(ast, pred, flags = deep.RETURN_VALUE)",
								"DeepSelect(ast, pred, flags = deep.RETURN_VALUE)",
								"DeepCachePath(ast, path, m)",
								"DeepPathOf(ast, value)",
								"DeepGet(ast, path, ...args)",
								"FileTime(filename)",
								"Newer(file, ...other)",
								"  other =>",
								"Older(file, other)",
								"GetSubscripts(str)",
								"  m =>",
								"TrimSubscripts(str, sub)",
								"  nameOrIdPred(name_or_id, ...args)",
								"node =>",
								"List",
								"  constructor(...args)",
								"  filter(callback, thisArg = null)",
								"  callback = elem =>",
								"  slice(start, end)",
								"  get first()",
								"  elem =>",
								"  entries()",
								"  keys()",
								"  values()",
								"  toArray()",
								"(a, n) =>",
								"List",
								"Node",
								"  constructor(ast)",
								"  static get(ast)",
								"  get ast()",
								"  get id()",
								"  get loc()",
								"  get file()",
								"(v, k) =>",
								"(v, k) =>",
								"  get range()",
								"  r =>",
								"  toJSON(obj)",
								"Node",
								"(node, ast) =>",
								"PathOf(node, ast = globalThis['$'].data)",
								"Hier(node_or_path, t = (p, ast, abort) => p.",
								"(ast), ast = globalThis['$'].data)",
								"  p =>",
								"  abortFn = () =>",
								"FindType(typeName, ast = globalThis['$'].data)",
								"([tok]) =>",
								"  node =>",
								"PointerType",
								"  constructor(pointee, ast, ns)",
								"  static fromString(str, ast, ns)",
								"  toString()",
								"ReferenceType",
								"  constructor(pointee, ast, ns)",
								"  static fromString(str, ast, ns)",
								"  toString()",
								"Type",
								"  constructor(node, ast, ns)",
								"  n =>",
								"  get regExp()",
								"  isEnum()",
								"  isPointer()",
								"  isReference()",
								"  isFunction()",
								"  isArray()",
								"  isInteger()",
								"  arrayOf()",
								"  get subscripts()",
								"  trimSubscripts()",
								"  get pointer()",
								"  get reference()",
								"  getPointer(ast)",
								"  get unsigned()",
								"  get signed()",
								"  isCompound()",
								"  isFloatingPoint()",
								"  get alias()",
								"  get aliases()",
								"  isEnum()",
								"  isString()",
								"  get ffi()",
								"  get size()",
								"  toJS()",
								"  toJSON(obj)",
								"  static get(name_or_id, ast = globalThis['$'].data)",
								"node =>",
								"node =>",
								"RoundTo(value, align)",
								"RecordDecl",
								"  constructor(node, ast, ns)",
								"  child =>",
								"  child =>",
								"() =>",
								"  node =>",
								"(acc, node) =>",
								"  i =>",
								"n =>",
								"  n =>",
								"([name, t]) =>",
								"  get size()",
								"(acc, [name, type]) =>",
								"  toJSON()",
								"([name, member]) =>",
								"EnumDecl",
								"  constructor(node, ast)",
								"  child =>",
								"({ name, type, inner }) =>",
								"  toJSON()",
								"TypedefDecl",
								"  constructor(node, ast, ns)",
								"  n =>",
								"(v, k) =>",
								"  n =>",
								"  n =>",
								"  n =>",
								"  get size()",
								"  toJSON()",
								"FieldDecl",
								"  constructor(node, ast)",
								"FunctionDecl",
								"  constructor(node, ast, ns)",
								"  child =>",
								"  child =>",
								"({ name, type }) =>",
								"  isMethod()",
								"  toJSON()",
								"VarDecl",
								"  constructor(node, ast)",
								"  toJSON()",
								"ClassDecl",
								"  constructor(node, ast)",
								"BuiltinType",
								"  constructor(node, ast)",
								"ConstantArrayType",
								"  constructor(node, ast)",
								"  toJSON()",
								"Range",
								"  constructor(begin, end)",
								"  get begin()",
								"  set begin(v)",
								"  get end()",
								"  set end(v)",
								"  toString(opts = { printFile: true })",
								"  get length()",
								"  toArray()",
								"  toObject()",
								"Range",
								"Location",
								"  static at(file, offset)",
								"  static from(loc)",
								"  constructor(loc)",
								"  update(other)",
								"  get line()",
								"  set line(v)",
								"  get column()",
								"  set column(v)",
								"  get offset()",
								"  set offset(v)",
								"(t, ...c) =>",
								"'\\x1b[m' : t =>",
								"  toString(opts = { printFile: true, onlyOffset: false })",
								"  toObject()",
								"  localeCompare(other)",
								"TypeFactory(node, ast, cache = true)",
								"SpawnCompiler(compiler, input, outfile, args = [])",
								"  p =>",
								"  p =>",
								"  line =>",
								"  line =>",
								"  line =>",
								"PipeReader(fd, callback)",
								"(resolve, reject) =>",
								"() =>",
								"data =>",
								"ReadPipe(fd, callback)",
								"ReadOutput(fd)",
								"SourceDependencies(...args)",
								"AstDump(compiler, source, args, force)",
								"  size()",
								"  json()",
								"  data()",
								"SetFile = loc =>",
								"  files()",
								"  n =>",
								"  file =>",
								"  pred2 = (used, implicit) =>",
								"node =>",
								"  types()",
								"n =>",
								"() =>",
								"List",
								"  functions()",
								"n =>",
								"() =>",
								"n =>",
								"List",
								"  namespaces()",
								"n =>",
								"List",
								"  classes()",
								"  predicate = n =>",
								"List",
								"  variables()",
								"  n =>",
								"List",
								"  names(depth = 1)",
								"  n =>",
								"  n =>",
								"NameFor(decl, ast = globalThis['$']?.data)",
								"(value, key) =>",
								"NodeType(n)",
								"  t =>",
								"n =>",
								"NodeName(n, name)",
								"RawLocation(path)",
								"RawRange(path)",
								"CompleteLocation(path)",
								"  l =>",
								"CompleteRange(path)",
								"  l =>",
								"GetLoc(node)",
								"GetTypeNode(node, ast = globalThis['$'].data)",
								"  node =>",
								"  node =>",
								"GetTypeStr(node)",
								"  inner =>",
								"  inner =>",
								"([n, t]) =>",
								"NodeError",
								"  constructor(message, node)",
								"NodeError",
								"NodePrinter(ast)",
								"  put(str)",
								"  trim()",
								"  printer = function(node)",
								"  get()",
								"  value()",
								"  value(node)",
								"  toString()",
								"  i =>",
								"NodePrinter",
								"AbiTagAttr(abi_tag_attr)",
								"AccessSpecDecl(access_spec_decl)",
								"AlignedAttr(aligned_attr)",
								"AlwaysInlineAttr(always_inline_attr)",
								"ArraySubscriptExpr(array_subscript_expr)",
								"AsmLabelAttr(asm_label_attr)",
								"BinaryOperator(binary_operator)",
								"BlockCommandComment(block_command_comment)",
								"BuiltinAttr(builtin_attr)",
								"BreakStmt(break_stmt)",
								"CallExpr(call_expr)",
								"RecoveryExpr(recovery_expr)",
								"CaseStmt(case_stmt)",
								"CharacterLiteral(character_literal)",
								"CompoundAssignOperator(compound_assign_operator)",
								"CompoundStmt(compound_stmt)",
								"ConditionalOperator(conditional_operator)",
								"ConstantExpr(constant_expr)",
								"ConstAttr(const_attr)",
								"ContinueStmt(continue_stmt)",
								"CStyleCastExpr(cstyle_cast_expr)",
								"DeclRefExpr(decl_ref_expr)",
								"DeclStmt(decl_stmt)",
								"DefaultStmt(default_stmt)",
								"DeprecatedAttr(deprecated_attr)",
								"DoStmt(do_stmt)",
								"EmptyDecl(empty_decl)",
								"EnumConstantDecl(enum_constant_decl)",
								"EnumDecl(enum_decl)",
								"FieldDecl(field_decl)",
								"FloatingLiteral(floating_literal)",
								"FormatAttr(format_attr)",
								"ForStmt(for_stmt)",
								"  n =>",
								"FullComment(full_comment)",
								"FunctionDecl(function_decl)",
								"  n =>",
								"  n =>",
								"GotoStmt(goto_stmt)",
								"n =>",
								"HTMLEndTagComment(html_end_tag_comment)",
								"HTMLStartTagComment(html_start_tag_comment)",
								"IfStmt(if_stmt)",
								"ImplicitCastExpr(implicit_cast_expr)",
								"InitListExpr(init_list_expr)",
								"InlineCommandComment(inline_command_comment)",
								"IntegerLiteral(integer_literal)",
								"LabelStmt(label_stmt)",
								"MemberExpr(member_expr)",
								"NonNullAttr(non_null_attr)",
								"NoThrowAttr(no_throw_attr)",
								"NullStmt(null_stmt)",
								"ParagraphComment(paragraph_comment)",
								"ParamCommandComment(param_command_comment)",
								"ParenExpr(paren_expr)",
								"ParenListExpr(paren_list_expr)",
								"ParmVarDecl(parm_var_decl)",
								"PureAttr(pure_attr)",
								"RecordDecl(record_decl)",
								"RestrictAttr(restrict_attr)",
								"ReturnStmt(return_stmt)",
								"ReturnsTwiceAttr(returns_twice_attr)",
								"StringLiteral(string_literal)",
								"SwitchStmt(switch_stmt)",
								"TextComment(text_comment)",
								"TranslationUnitDecl(translation_unit_decl)",
								"TypedefDecl(typedef_decl)",
								"UnaryExprOrTypeTraitExpr(unary_expr_or_type_trait_expr)",
								"UnaryOperator(unary_operator)",
								"UnresolvedLookupExpr(unresolved_lookup_expr)",
								"UnresolvedMemberExpr(unresolved_member_expr)",
								"VarDecl(var_decl, base_type)",
								"([offset, subscript]) =>",
								"VerbatimBlockComment(verbatim_block_comment)",
								"VerbatimBlockLineComment(verbatim_block_line_comment)",
								"WarnUnusedResultAttr(warn_unused_result_attr)",
								"WeakAttr(weak_attr)",
								"WhileStmt(while_stmt)",
								"OverrideAttr(override_attr)",
								"AddrLabelExpr(addr_label_expr)",
								"AliasAttr(alias_attr)",
								"AlignValueAttr(align_value_attr)",
								"AllocSizeAttr(alloc_size_attr)",
								"ArrayInitIndexExpr(array_init_index_expr)",
								"ArrayInitLoopExpr(array_init_loop_expr)",
								"AtomicExpr(atomic_expr)",
								"AtomicType(atomic_type)",
								"AutoType(auto_type)",
								"BuiltinTemplateDecl(builtin_template_decl)",
								"BuiltinType(builtin_type)",
								"CallbackAttr(callback_attr)",
								"ClassTemplateDecl(class_template_decl)",
								"ClassTemplatePartialSpecializationDecl(class_template_partial_specialization_decl)",
								"ClassTemplateSpecializationDecl(class_template_specialization_decl)",
								"ComplexType(complex_type)",
								"CompoundLiteralExpr(compound_literal_expr)",
								"ConstantArrayType(constant_array_type)",
								"ConstructorUsingShadowDecl(constructor_using_shadow_decl)",
								"ConvertVectorExpr(convert_vector_expr)",
								"DecayedType(decayed_type)",
								"DecltypeType(decltype_type)",
								"DependentNameType(dependent_name_type)",
								"DependentScopeDeclRefExpr(dependent_scope_decl_ref_expr)",
								"DependentSizedArrayType(dependent_sized_array_type)",
								"DependentTemplateSpecializationType(dependent_template_specialization_type)",
								"ElaboratedType(elaborated_type)",
								"EnumType(enum_type)",
								"ExprWithCleanups(expr_with_cleanups)",
								"FinalAttr(final_attr)",
								"FormatArgAttr(format_arg_attr)",
								"FriendDecl(friend_decl)",
								"FunctionNoProtoType(function_no_proto_type)",
								"FunctionProtoType(function_proto_type)",
								"FunctionTemplateDecl(function_template_decl)",
								"GCCAsmStmt(gcc_asm_stmt)",
								"GNUInlineAttr(gnu_inline_attr)",
								"GNUNullExpr(gnu_null_expr)",
								"ImplicitValueInitExpr(implicit_value_init_expr)",
								"IncompleteArrayType(incomplete_array_type)",
								"IndirectFieldDecl(indirect_field_decl)",
								"IndirectGotoStmt(indirect_goto_stmt)",
								"InjectedClassNameType(injected_class_name_type)",
								"LambdaExpr(lambda_expr)",
								"LinkageSpecDecl(linkage_spec_decl)",
								"LValueReferenceType(l_value_reference_type)",
								"MaterializeTemporaryExpr(materialize_temporary_expr)",
								"MaxFieldAlignmentAttr(max_field_alignment_attr)",
								"MayAliasAttr(may_alias_attr)",
								"MemberPointerType(member_pointer_type)",
								"MinVectorWidthAttr(min_vector_width_attr)",
								"ModeAttr(mode_attr)",
								"NamespaceDecl(namespace_decl)",
								"NoDebugAttr(no_debug_attr)",
								"NoInlineAttr(no_inline_attr)",
								"NonTypeTemplateParmDecl(non_type_template_parm_decl)",
								"OffsetOfExpr(offset_of_expr)",
								"OpaqueValueExpr(opaque_value_expr)",
								"OwnerAttr(owner_attr)",
								"PackedAttr(packed_attr)",
								"PackExpansionExpr(pack_expansion_expr)",
								"PackExpansionType(pack_expansion_type)",
								"ParenType(paren_type)",
								"PointerAttr(pointer_attr)",
								"PointerType(pointer_type)",
								"PredefinedExpr(predefined_expr)",
								"QualType(qual_type)",
								"RecordType(record_type)",
								"ReturnsNonNullAttr(returns_non_null_attr)",
								"RValueReferenceType(r_value_reference_type)",
								"SentinelAttr(sentinel_attr)",
								"ShuffleVectorExpr(shuffle_vector_expr)",
								"SizeOfPackExpr(size_of_pack_expr)",
								"StaticAssertDecl(static_assert_decl)",
								"StmtExpr(stmt_expr)",
								"SubstNonTypeTemplateParmExpr(subst_non_type_template_parm_expr)",
								"SubstTemplateTypeParmType(subst_template_type_parm_type)",
								"TargetAttr(target_attr)",
								"TemplateArgument(template_argument)",
								"TemplateSpecializationType(template_specialization_type)",
								"TemplateTemplateParmDecl(template_template_parm_decl)",
								"TemplateTypeParmDecl(template_type_parm_decl)",
								"TemplateTypeParmType(template_type_parm_type)",
								"TParamCommandComment(t_param_command_comment)",
								"TypeAliasDecl(type_alias_decl)",
								"TypeAliasTemplateDecl(type_alias_template_decl)",
								"TypedefType(typedef_type)",
								"TypeOfExprType(type_of_expr_type)",
								"TypeTraitExpr(type_trait_expr)",
								"UnaryTransformType(unary_transform_type)",
								"UnresolvedUsingValueDecl(unresolved_using_value_decl)",
								"UnusedAttr(unused_attr)",
								"UsingDecl(using_decl)",
								"UsingDirectiveDecl(using_directive_decl)",
								"UsingShadowDecl(using_shadow_decl)",
								"VAArgExpr(va_arg_expr)",
								"VarTemplateDecl(var_template_decl)",
								"VectorType(vector_type)",
								"VerbatimLineComment(verbatim_line_comment)",
								"VisibilityAttr(visibility_attr)",
								"WeakRefAttr(weak_ref_attr)",
								"CXXRecordDecl(cxx_record_decl)",
								"CXXConstructorDecl(cxx_constructor_decl)",
								"  n =>",
								"CXXCtorInitializer(cxx_ctor_initializer)",
								"CXXDependentScopeMemberExpr(cxx_dependent_scope_member_expr)",
								"CXXThisExpr(cxx_this_expr)",
								"CXXDestructorDecl(cxx_destructor_decl)",
								"  n =>",
								"CXXMethodDecl(cxx_method_decl)",
								"  n =>",
								"CXXStaticCastExpr(cxx_static_cast_expr)",
								"CXXUnresolvedConstructExpr(cxx_unresolved_construct_expr)",
								"CXXNewExpr(cxx_new_expr)",
								"CXXDeleteExpr(cxx_delete_expr)",
								"CXXBoolLiteralExpr(cxx_bool_literal_expr)",
								"CXX11NoReturnAttr(cxx11_no_return_attr)",
								"CXXBindTemporaryExpr(cxx_bind_temporary_expr)",
								"CXXCatchStmt(cxx_catch_stmt)",
								"CXXConstructExpr(cxx_construct_expr)",
								"CXXConversionDecl(cxx_conversion_decl)",
								"CXXDefaultArgExpr(cxx_default_arg_expr)",
								"CXXDefaultInitExpr(cxx_default_init_expr)",
								"CXXForRangeStmt(cxx_for_range_stmt)",
								"CXXFunctionalCastExpr(cxx_functional_cast_expr)",
								"CXXMemberCallExpr(cxx_member_call_expr)",
								"CXXNoexceptExpr(cxx_noexcept_expr)",
								"CXXNullPtrLiteralExpr(cxx_null_ptr_literal_expr)",
								"CXXOperatorCallExpr(cxx_operator_call_expr)",
								"CXXReinterpretCastExpr(cxx_reinterpret_cast_expr)",
								"CXXScalarValueInitExpr(cxx_scalar_value_init_expr)",
								"CXXTemporaryObjectExpr(cxx_temporary_object_expr)",
								"CXXTryStmt(cxx_try_stmt)",
								"PrintNode(node)",
								"PrintAst(node, ast)",
								"  get()",
								"  isNode(obj)",
								"GetType(name_or_id, ast = globalThis['$']?.data)",
								"  n =>",
								"node =>",
								"node =>",
								"  r =>",
								"GetClass(name_or_id, ast = globalThis['$'].data)",
								"n =>",
								"  bases()",
								"GetBases(node, ast = globalThis['$'].data)",
								"GetByName(arg, ast = globalThis['$'].data, ...args)",
								"GetNamespace(arg, root = globalThis['$'].data, predicate = () => true)",
								"n =>",
								"NamespaceOf(node, path, ast = globalThis['$'].data)",
								"  toString()",
								"GetFields(node)",
								"(v, k) =>",
								"([v, p]) =>",
								"([loc, ptr]) =>",
								"  i =>",
								"GetParams(node)",
								"  child =>",
								"PathRemoveLoc(path)",
								"  p =>"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1748201510.93,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "clang-ast.js",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 87654,
						"regions":
						{
						},
						"selection":
						[
							[
								53587,
								53587
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 1908,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1749132003.42,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 30270.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 111,
						"regions":
						{
						},
						"selection":
						[
							[
								55,
								55
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"detect_indentation": false,
							"function_name_status_row": 4,
							"line_numbers": false,
							"output_tag": 2,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage",
							"tabs_extra_last_activated": 1748964580.82,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 60.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "lib/compileCommand.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14774,
						"regions":
						{
						},
						"selection":
						[
							[
								11061,
								11061
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 361,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1748207752.85,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 287.0,
						"translation.y": 7905.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "quickjs/qjs-modules/lib/util.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 70174,
						"regions":
						{
						},
						"selection":
						[
							[
								58137,
								58147
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 2199,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1748196011.37,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 42897.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "quickjs/qjs-net/cmake/BuildBrotli.cmake",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2381,
						"regions":
						{
						},
						"selection":
						[
							[
								1292,
								1447
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 36,
							"syntax": "Packages/User/Themes/CMake.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1748194382.97,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 569.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "mozdev.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2552,
						"regions":
						{
						},
						"selection":
						[
							[
								1141,
								1141
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 32,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1748138027.44,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 225.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "clang-list.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8043,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1748964570.65,
							"tabs_extra_last_activated_sheet_index": 5,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 25.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.764828128058,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.coffeecompile_output":
	{
		"height": 150.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "plot-cv.sublime-project",
	"replace":
	{
		"height": 46.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"clang-",
				"clang-list.js"
			],
			[
				"quickj",
				"quickjs/cmake/QuickJSModule.cmake"
			],
			[
				"util.js",
				"quickjs/qjs-modules/lib/util.js"
			],
			[
				"compileC",
				"lib/compileCommand.js"
			],
			[
				"compil",
				"compile_commands.js"
			],
			[
				"clang-as",
				"clang-ast.js"
			],
			[
				"mozdev",
				"mozdev.js"
			],
			[
				"clang-list",
				"clang-list.js"
			],
			[
				"clang-ast",
				"clang-ast.js"
			],
			[
				"",
				"compile_commands.js"
			],
			[
				"compileCommand",
				"lib/compileCommand.js"
			],
			[
				"command",
				"compile_commands.js"
			],
			[
				"lib/util.js",
				"quickjs/qjs-modules/lib/util.js"
			],
			[
				"io-he",
				"io-helpers.js"
			],
			[
				"console.js",
				"quickjs/qjs-modules/lib/console.js"
			],
			[
				"fs.js",
				"quickjs/qjs-modules/lib/fs.js"
			],
			[
				"deep.js",
				"lib/deep.js"
			],
			[
				"lib/deep",
				"lib/deep.js"
			],
			[
				"ast-shel",
				"ast-shell.js"
			],
			[
				"os-help",
				"os-helpers.js"
			],
			[
				"ast-she",
				"ast-shell.js"
			],
			[
				"sound",
				"soundcloud-tracks.js"
			],
			[
				"out",
				"out.gz"
			],
			[
				"lws-context-v",
				"libwebsockets/include/libwebsockets/lws-context-vhost.h"
			],
			[
				"buffer-ut",
				"src/buffer-utils.c"
			],
			[
				"repl",
				"lib/repl.js"
			],
			[
				"utils.c",
				"src/utils.c"
			],
			[
				"qjsm.c",
				"src/qjsm.c"
			],
			[
				"utils.h",
				"include/utils.h"
			],
			[
				"quickjs-inspec",
				"quickjs-inspect.c"
			],
			[
				"io.js",
				"lib/io.js"
			],
			[
				"repl.js",
				"lib/repl.js"
			],
			[
				"util.sj",
				"web-platform-tests-streams/shared-storage/resources/util.sub.js"
			],
			[
				"quickjs.c",
				"~/Projects/plot-cv/quickjs/quickjs.c"
			],
			[
				"quickjs.h",
				"~/Projects/plot-cv/quickjs/quickjs.h"
			],
			[
				"js-utils.c",
				"src/js-utils.c"
			],
			[
				"quickjs-strea",
				"quickjs-stream.h"
			],
			[
				"quickjs-st",
				"quickjs-stream.c"
			],
			[
				"quickjs-stream.h",
				"quickjs-stream.h"
			],
			[
				"quickjs-ins",
				"quickjs-inspect.c"
			],
			[
				"ringbuffer.c",
				"src/ringbuffer.c"
			],
			[
				"ringbuf",
				"include/ringbuffer.h"
			],
			[
				"ringbuffer.h",
				"include/ringbuffer.h"
			],
			[
				"textcode.c",
				"quickjs-textcode.c"
			],
			[
				"quickjs-text",
				"quickjs-textcode.c"
			],
			[
				"stream.c",
				"quickjs-stream.c"
			],
			[
				"quickjs-stre",
				"quickjs-stream.c"
			],
			[
				"textcode",
				"quickjs-textcode.c"
			],
			[
				"quickjs-misc",
				"quickjs-misc.c"
			],
			[
				"function",
				"cmake/functions.cmake"
			],
			[
				"CMakeLIsts",
				"CMakeLists.txt"
			],
			[
				"quickjs-mis",
				"quickjs-misc.c"
			],
			[
				"fsProm",
				"lib/fsPromises.js"
			],
			[
				"CMake",
				"CMakeLists.txt"
			],
			[
				"cmakeli",
				"CMakeLists.txt"
			],
			[
				"cmakelists",
				"CMakeLists.txt"
			],
			[
				"CMakeLists",
				"CMakeLists.txt"
			],
			[
				"cmakelsits",
				"web-platform-tests-streams/editing/crashtests/make-editable-div-inline-and-set-contenteditable-of-input-to-false.html"
			],
			[
				"cmakeLists",
				"CMakeLists.txt"
			],
			[
				"js-util",
				"src/js-utils.c"
			],
			[
				"js-ut",
				"include/js-utils.h"
			],
			[
				"buffer-",
				"include/buffer-utils.h"
			],
			[
				"js-utils",
				"include/js-utils.h"
			],
			[
				"quickjs-sys",
				"quickjs-syscallerror.c"
			],
			[
				"js-u",
				"include/js-utils.h"
			],
			[
				"quickjs-socket",
				"quickjs-sockets.c"
			],
			[
				"async-cl",
				"src/async-closure.c"
			],
			[
				"utilsc",
				"src/utils.c"
			],
			[
				"quickjs-sock",
				"quickjs-sockets.h"
			],
			[
				"child",
				"src/child-process.c"
			],
			[
				"quickjs-child",
				"quickjs-child-process.c"
			],
			[
				"cmake",
				"CMakeLists.txt"
			],
			[
				"process.js",
				"lib/process.js"
			],
			[
				"quickjs-repea",
				"quickjs-repeater.c"
			],
			[
				"quickjs-repe",
				"quickjs-repeater.c"
			],
			[
				"quickjs-repeater",
				"quickjs-repeater.c"
			],
			[
				"test_repe",
				"tests/test_repeater.js"
			],
			[
				"quickjs-mysq",
				"quickjs-mysql.c"
			],
			[
				"quickjs-ser",
				"quickjs-serial.c"
			],
			[
				"quickjs-stream",
				"quickjs-stream.h"
			],
			[
				"quickjs-lex",
				"quickjs-lexer.c"
			],
			[
				"quickjs-list",
				"quickjs-list.c"
			],
			[
				"quickjs-list.c",
				"quickjs-list.c"
			],
			[
				"testhar",
				"lib/testharness.js"
			],
			[
				"qjsm",
				"src/qjsm.c"
			],
			[
				"test_repea",
				"tests/test_repeater.js"
			],
			[
				"test_socket",
				"tests/test_sockets.js"
			],
			[
				"test_sock",
				"tests/test_sockets.js"
			],
			[
				"textcod",
				"quickjs-textcode.c"
			],
			[
				"test_text",
				"tests/test_textcode.js"
			],
			[
				"stack.js",
				"lib/stack.js"
			],
			[
				"ebnf",
				"lib/parser/ebnf.js"
			],
			[
				"arser.",
				"lib/parser.js"
			],
			[
				"bnf.",
				"lib/lexer/bnf.js"
			],
			[
				"quickjs-my",
				"quickjs-mysql.c"
			],
			[
				"quickjs-blob",
				"quickjs-blob.c"
			],
			[
				"quickjs-bl",
				"quickjs-blob.c"
			],
			[
				"queue.c",
				"src/queue.c"
			],
			[
				"queue.h",
				"include/queue.h"
			],
			[
				"mysql",
				"tests/test_mysql.js"
			],
			[
				"child-",
				"src/child-process.c"
			],
			[
				"quickjs-chil",
				"quickjs-child-process.c"
			],
			[
				"xpath",
				"lib/xpath.js"
			],
			[
				"xpath.js",
				"lib/xpath.js"
			],
			[
				"pointer",
				"lib/pointer.js"
			],
			[
				"predicate.c",
				"src/predicate.c"
			],
			[
				"quickjs-pre",
				"quickjs-predicate.c"
			],
			[
				"dom.js",
				"lib/dom.js"
			],
			[
				"misc.js",
				"lib/misc.js"
			],
			[
				"char-ut",
				"include/char-utils.h"
			],
			[
				"quickjs-in",
				"quickjs-inspect.c"
			],
			[
				"css3",
				"lib/css3-selectors.js"
			],
			[
				"inspect.c",
				"quickjs-inspect.c"
			],
			[
				"quickjs-lexe",
				"quickjs-lexer.c"
			],
			[
				"test_lexer",
				"tests/test_lexer.js"
			],
			[
				"resolve-im",
				"resolve-imports.js"
			],
			[
				"pointer.js",
				"lib/pointer.js"
			],
			[
				"extendArra",
				"lib/extendArray.js"
			],
			[
				"list-ex",
				"list-exports.js"
			],
			[
				"xml-shell",
				"xml-shell.js"
			],
			[
				"cmake/",
				"cmake/QuickJSModule.cmake"
			],
			[
				"quickjs-arc",
				"quickjs-archive.c"
			],
			[
				"cmakelist",
				"CMakeLists.txt"
			],
			[
				"vfs",
				"lib/vfs.js"
			],
			[
				"quickjs-que",
				"quickjs-queue.c"
			],
			[
				"archive.h",
				"libarchive/libarchive/archive.h"
			],
			[
				"sz",
				"/tmp/sz.js"
			],
			[
				"archive_en",
				"libarchive/libarchive/archive_entry.h"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/plot-cv.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 309.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"WS"
			]
		],
		"width": 1059.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 253.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
