{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"render",
				"renderCollection"
			],
			[
				"Imm",
				"ImmutablePath"
			],
			[
				"cons",
				"constructor"
			],
			[
				"i",
				"is_dir"
			],
			[
				"getText",
				"getTextArray"
			],
			[
				"Lin",
				"LinearTransform"
			],
			[
				"CURL_LIB",
				"CURL_LIBRARY_DEBUG"
			],
			[
				"Circ",
				"CircuitJS"
			],
			[
				"dep",
				"dependency"
			],
			[
				"opt",
				"optimization"
			],
			[
				"OPENCV_LIB",
				"OPENCV_LIBRARIES"
			],
			[
				"getOwn",
				"getOwnPropertyNames(...)"
			],
			[
				"relat",
				"relativeTo"
			],
			[
				"max",
				"maxLineGap"
			],
			[
				"Pm_Op",
				"Pm_OpenInput"
			],
			[
				"Pm_Get",
				"Pm_GetDeviceInfo"
			],
			[
				"getOwnProp",
				"getOwnPropertyDescriptors(...)"
			],
			[
				"getMem",
				"getMemberEntries"
			],
			[
				"break",
				"breakLength"
			],
			[
				"from",
				"fromCodePoint(...)"
			],
			[
				"Res",
				"ResizeHandler"
			],
			[
				"COLOR",
				"COLOR_BGR2Lab"
			],
			[
				"JS_SetP",
				"JS_SetPropertyFunctionList"
			],
			[
				"inspe",
				"inspectOptions"
			],
			[
				"Sin",
				"SingleLineComment"
			],
			[
				"use",
				"useAsyncIterator_1"
			],
			[
				"high",
				"highlight"
			],
			[
				"hig",
				"highlight"
			],
			[
				"useDe",
				"useDebouncedCallback"
			],
			[
				"preac",
				"preactComponent"
			],
			[
				"modul",
				"module_loader_func"
			],
			[
				"mod",
				"module_loader_func"
			],
			[
				"jsm_mo",
				"jsm_module_record"
			],
			[
				"jsm_mod",
				"jsm_module_record"
			],
			[
				"jsm_com",
				"jsm_compiled_modules"
			],
			[
				"QUICKJS_IN",
				"QUICKJS_INCLUDE_DIR"
			],
			[
				"QUICKJS_SOU",
				"QUICKJS_SOURCES_ROOT"
			],
			[
				"Po",
				"PortableFileSystem"
			],
			[
				"JS_EVAL",
				"JS_EVAL_TYPE_MODULE"
			],
			[
				"CPACK",
				"CPACK_PACKAGE_VERSION_MAJOR"
			],
			[
				"CPACK_PACK",
				"CPACK_PACKAGE_VERSION"
			],
			[
				"align_",
				"align_value_attr"
			],
			[
				"histo",
				"historySearch"
			],
			[
				"mouse",
				"mousetrackingDisable"
			],
			[
				"library",
				"libraryNames"
			],
			[
				"setMax",
				"setMaxListeners"
			],
			[
				"Portable",
				"PortableFileSystem"
			],
			[
				"Get",
				"GetRange"
			],
			[
				"Minn",
				"MinnetHttpRequest"
			],
			[
				"Des",
				"DeserializeEntries"
			],
			[
				"define",
				"defineProperties(...)"
			],
			[
				"Deseria",
				"DeserializeEntries"
			],
			[
				"De",
				"DeserializeEntries"
			],
			[
				"Eve",
				"EventEmitter"
			],
			[
				"PATH_",
				"PATH_FNM_NOMATCH"
			],
			[
				"PATH_FNM_NO",
				"PATH_FNM_NOESCAPE"
			],
			[
				"asyn",
				"asyncIterator"
			],
			[
				"RPC",
				"RPCClientConnection"
			],
			[
				"Const",
				"Constants"
			],
			[
				"Impo",
				"ImportSpecifier"
			],
			[
				"Export",
				"ExportNamedDeclaration"
			],
			[
				"elem",
				"elementTransform"
			],
			[
				"minn",
				"minnet_ws_class_id"
			],
			[
				"JS_Get",
				"JS_GetOpaque"
			],
			[
				"getOw",
				"getOwnPropertySymbols(...)"
			],
			[
				"Minnet",
				"MinnetWebsocket"
			],
			[
				"Message",
				"MessageTransceiver"
			],
			[
				"corr",
				"CorrelateSchematicAndBoard"
			],
			[
				"Sys",
				"SyscallError"
			],
			[
				"getProp",
				"getPropertyDescriptors"
			],
			[
				"getO",
				"getOwnPropertyDescriptors(...)"
			],
			[
				"get",
				"getOwnPropertyDescriptors(...)"
			],
			[
				"toArra",
				"toArrayBuffer"
			],
			[
				"codePo",
				"codePointAt"
			],
			[
				"print",
				"print_status"
			],
			[
				"tty",
				"ttySetRaw"
			],
			[
				"variable",
				"variablesReference"
			],
			[
				"variables",
				"variablesReference"
			],
			[
				"JSIn",
				"JSInputArray"
			],
			[
				"keypoin",
				"keypoint_proto"
			],
			[
				"lws_call",
				"lws_callback_http_dummy"
			],
			[
				"utf",
				"utf8_first_code_mask"
			],
			[
				"length",
				"history_length"
			],
			[
				"Array",
				"ArrayBufferToString"
			],
			[
				"JSMo",
				"JSModuleLoaderFunc"
			],
			[
				"JS",
				"JSVideoWriterData"
			],
			[
				"D",
				"DebuggerProtocol"
			],
			[
				"Debu",
				"DebuggerProtocol"
			],
			[
				"descripto",
				"descriptor_channels"
			],
			[
				"descript",
				"descriptorExtractor"
			],
			[
				"pattern",
				"patternScale"
			],
			[
				"n",
				"nOctaves"
			],
			[
				"nO",
				"nOctaves"
			],
			[
				"quali",
				"quality_level"
			],
			[
				"JS_P",
				"JS_PROP_ENUMERABLE"
			],
			[
				"Feat",
				"Feature2D"
			],
			[
				"PROP_DESCRIPTOR_",
				"PROP_DESCRIPTOR_TYPE"
			],
			[
				"js_feat",
				"js_feature2d_data"
			],
			[
				"js_key",
				"js_keypoint_export"
			],
			[
				"x",
				"xfeatures2d"
			],
			[
				"JSInput",
				"JSInputOutputArray"
			],
			[
				"JS_NewArray",
				"JS_NewArrayBufferCopy"
			],
			[
				"Rota",
				"RotatedRect"
			],
			[
				"js_rotated",
				"js_rotated_rect_new"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"getOwnP",
				"getOwnPropertyNames"
			],
			[
				"PROP_Y",
				"PROP_YINTERCEPT"
			],
			[
				"PROP_X",
				"PROP_XINTERCEPT"
			],
			[
				"RE",
				"RETURN_PATH"
			],
			[
				"insp",
				"inspectSymbol"
			],
			[
				"contour",
				"contour_proto"
			],
			[
				"dst",
				"dst_pts"
			],
			[
				"CXX_",
				"CXX_STANDARD_VALUE"
			],
			[
				"process",
				"processor_or_index"
			],
			[
				"proces",
				"processor_or_index"
			],
			[
				"w",
				"width"
			],
			[
				"FUNC_TO",
				"FUNC_TOARRAY"
			],
			[
				"JSInpu",
				"JSInputOutputArray"
			],
			[
				"JS_Throw",
				"JS_ThrowInternalError"
			],
			[
				"typed",
				"typedarray_ctor"
			],
			[
				"JS_GetP",
				"JS_GetPropertyStr"
			],
			[
				"depe",
				"dependent_scope_decl_ref_expr"
			],
			[
				"com",
				"compound_stmt"
			],
			[
				"CXXConstruc",
				"CXXConstructorDecl"
			],
			[
				"refere",
				"referencedDecl"
			],
			[
				"Acc",
				"AccessSpecDecl"
			],
			[
				"value",
				"valueCategory"
			],
			[
				"ini",
				"initializers"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "  slice = (x, s, e) =>\n  stringify = v =>\n  formatNumber = n =>\n  isNative = fn =>\n  util()\n  util\nAsyncFunction = function x()\nGeneratorFunction = function*()\nAsyncGeneratorFunction = function*()\n  isAnyArrayBuffer(v)\n  isArrayBuffer(v)\n  isBigInt64Array(v)\n  isBigUint64Array(v)\n  isDate(v)\n  isFloat32Array(v)\n  isFloat64Array(v)\n  isInt8Array(v)\n  isInt16Array(v)\n  isInt32Array(v)\n  isMap(v)\n  isPromise(v)\n  isProxy(v)\n  isRegExp(v)\n  isSet(v)\n  isSharedArrayBuffer(v)\n  isUint8Array(v)\n  isUint8ClampedArray(v)\n  isUint16Array(v)\n  isUint32Array(v)\n  isWeakMap(v)\n  isWeakSet(v)\n  isDataView(v)\n  isBooleanObject(v)\n  isAsyncFunction(v)\n  isGeneratorFunction(v)\n  isAsyncGeneratorFunction(v)\n  isNumberObject(v)\n  isBigIntObject(v)\n  isSymbolObject(v)\n  isNativeError(v)\n  isMapIterator(v)\n  isSetIterator(v)\n  isStringObject(v)\n  isArrayBufferView(v)\n  isArgumentsObject(v)\n  isBoxedPrimitive(v)\n  ctor =>\n  isGeneratorObject(v)\n  isTypedArray(v)\n  isModuleNamespaceObject(v)\n  isObject(arg)\nSyscallError(syscall, errnum)\nSyscallError\nSyscallError\n  get message()\n  extendArray(proto = Array.prototype)\n  get last()\n  at(index)\n  clear()\n  findLastIndex(predicate)\n  findLast(predicate)\n  unique()\n  pushUnique(...args)\n  toString(arrayBuf, encoding = 'utf-8')\n  toArrayBuffer(str, encoding = 'utf-8')\n  a =>\n(c, i) =>\n  btoa(bin)\n  atob(asc)\n  assert(actual, expected, message)\n  escape(str, chars = [])\n  quote(str, q = '\"')\n  memoize(fn)\n  (n, ...rest) =>\n  once(fn, thisArg, memoFn)\n  function(...args)\n  callback =>\n  function()\n  function()\n  function(e)\n  atexit(fn)\n() =>\n  waitFor(ms)\n  resolve =>\n  define(obj, ...args)\n  weakAssign(obj, ...args)\n  getConstructorChain(obj)\n  hasPrototype(obj, proto)\n  filter(seq, pred, thisArg)\n  pred = (el, i) =>\n  (f, arr = [], length = f.length) =>\n  (...args) =>\n  a =>\n  split(buf, ...points)\n  splitAt = (b, pos, len) =>\n  unique = (arr, cmp) =>\n  (el, i, arr) =>\n  item =>\n  (el, i, arr) =>\n  getFunctionArguments = fn =>\n  (offset = 0) =>\n  code =>\n  (offset = 0) =>\n  code =>\n  (offset = 0) =>\n  (red, green, blue) =>\n  getAnsiStyles()\n  value: (red, green, blue) =>\n  c =>\n  value: hex =>\n  character =>\n  value: hex =>\n  value: code =>\n  value: (red, green, blue) =>\n  value: hex =>\n  randInt(...args)\n  randFloat(min, max, rng = Math.random)\n  randStr(n, set = '_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', rng = Math.random)\n  toBigInt(arg)\n  lazyProperty(obj, name, getter, opts = {})\n  function()\n  function()\n  v =>\n  replaceProperty(value)\n  lazyProperties(obj, gettersObj, opts = {})\n  getOpt(options = {}, args)\n  findOpt = arg =>\n([optname, option]) =>\n  opt =>\n  toUnixTime(dateObj, utc = false)\n  unixTime(utc = false)\n  fromUnixTime(epoch, utc = false)\n  range(...args)\n  (v, k) =>\n  n =>\n  repeater(n, what)\n()\n()\n  repeat(n, what)\n  chunkArray(arr, size)\n  fn = (a, v, i) =>\n  camelize(str, delim = '')\n  (match, p1, p2, offset) =>\n  decamelize(str, delim = '-')\nLocation(line, column, pos, file, freeze = true)\nLocation\n  format(...args)\n  formatWithOptions(opts, ...args)\n  formatWithOptionsInternal(o, v)\n  isNumeric(value)\n  v =>\n  functionName(fn)\n  className(obj)\n  isArrowFunction = fn =>\n  immutableClass (orig, ...proto)\n  p =>\n  ctor =>\n  ctor\n  imm = base =>\n  constructor(...args)\n  isArray = a =>\n  arrayFacade(proto, itemFn = (container, i) => container.\n(i))\n*keys()\n*entries()\n*values()\n  forEach(callback, thisArg)\n  reduce(callback, accu, thisArg)\n  bits(buffer)\nLocation.prototype.clone = function(freeze = false, withFilename = true)\nLocation\nLocation\n()\nLocation.prototype.toString = function(opts = {})\nLocation.prototype.valueOf = function()\nLocation\n  function(hint)\nLocation\n  function(n, opts)\nLocation\n  get offset()",
			"settings":
			{
				"buffer_size": 3743,
				"line_ending": "Unix",
				"name": "𝌆 Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					112,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/misc.js",
						"symkeys":
						[
							[
								100,
								120
							],
							[
								340,
								356
							],
							[
								410,
								429
							],
							[
								464,
								480
							],
							[
								540,
								556
							],
							[
								577,
								581
							],
							[
								619,
								653
							],
							[
								676,
								708
							],
							[
								731,
								774
							],
							[
								2603,
								2622
							],
							[
								2720,
								2736
							],
							[
								2798,
								2816
							],
							[
								2880,
								2899
							],
							[
								2964,
								2973
							],
							[
								3028,
								3045
							],
							[
								3108,
								3125
							],
							[
								3188,
								3202
							],
							[
								3262,
								3277
							],
							[
								3338,
								3353
							],
							[
								3414,
								3422
							],
							[
								3476,
								3488
							],
							[
								3546,
								3556
							],
							[
								3612,
								3623
							],
							[
								3680,
								3688
							],
							[
								3742,
								3764
							],
							[
								3832,
								3847
							],
							[
								3908,
								3930
							],
							[
								3998,
								4014
							],
							[
								4076,
								4092
							],
							[
								4154,
								4166
							],
							[
								4224,
								4236
							],
							[
								4294,
								4307
							],
							[
								4366,
								4384
							],
							[
								4442,
								4460
							],
							[
								4524,
								4546
							],
							[
								4614,
								4641
							],
							[
								4714,
								4731
							],
							[
								4788,
								4805
							],
							[
								4862,
								4879
							],
							[
								4926,
								4942
							],
							[
								5025,
								5041
							],
							[
								5113,
								5129
							],
							[
								5201,
								5218
							],
							[
								5275,
								5295
							],
							[
								5354,
								5374
							],
							[
								5533,
								5552
							],
							[
								5628,
								5635
							],
							[
								5664,
								5684
							],
							[
								5754,
								5769
							],
							[
								5830,
								5856
							],
							[
								5934,
								5957
							],
							[
								7671,
								7710
							],
							[
								8132,
								8144
							],
							[
								8178,
								8190
							],
							[
								8206,
								8219
							],
							[
								8400,
								8446
							],
							[
								8471,
								8481
							],
							[
								8531,
								8540
							],
							[
								8642,
								8649
							],
							[
								8698,
								8722
							],
							[
								8882,
								8901
							],
							[
								9015,
								9023
							],
							[
								9070,
								9089
							],
							[
								9185,
								9233
							],
							[
								11447,
								11495
							],
							[
								13032,
								13036
							],
							[
								13067,
								13076
							],
							[
								13214,
								13233
							],
							[
								13753,
								13772
							],
							[
								14442,
								14485
							],
							[
								14902,
								14935
							],
							[
								15213,
								15242
							],
							[
								15289,
								15310
							],
							[
								15339,
								15355
							],
							[
								15448,
								15483
							],
							[
								15523,
								15541
							],
							[
								15779,
								15790
							],
							[
								16041,
								16052
							],
							[
								16155,
								16166
							],
							[
								16317,
								16329
							],
							[
								16439,
								16459
							],
							[
								16557,
								16562
							],
							[
								16630,
								16651
							],
							[
								16675,
								16685
							],
							[
								16724,
								16754
							],
							[
								17080,
								17114
							],
							[
								17421,
								17455
							],
							[
								17675,
								17709
							],
							[
								17775,
								17811
							],
							[
								17886,
								17903
							],
							[
								18062,
								18099
							],
							[
								18100,
								18114
							],
							[
								18120,
								18124
							],
							[
								18199,
								18231
							],
							[
								18259,
								18285
							],
							[
								18610,
								18632
							],
							[
								18683,
								18699
							],
							[
								18714,
								18721
							],
							[
								18749,
								18765
							],
							[
								18806,
								18834
							],
							[
								19053,
								19070
							],
							[
								19071,
								19080
							],
							[
								19132,
								19149
							],
							[
								19150,
								19159
							],
							[
								19219,
								19236
							],
							[
								19237,
								19260
							],
							[
								19316,
								19340
							],
							[
								21967,
								21995
							],
							[
								22426,
								22430
							],
							[
								22558,
								22571
							],
							[
								22887,
								22899
							],
							[
								23162,
								23175
							],
							[
								23280,
								23294
							],
							[
								24187,
								24215
							],
							[
								24331,
								24344
							],
							[
								24456,
								24482
							],
							[
								24677,
								24725
							],
							[
								24773,
								24885
							],
							[
								24990,
								25013
							],
							[
								25157,
								25209
							],
							[
								25303,
								25319
							],
							[
								25403,
								25414
							],
							[
								25527,
								25531
							],
							[
								25810,
								25843
							],
							[
								25957,
								26009
							],
							[
								26183,
								26219
							],
							[
								26376,
								26392
							],
							[
								26410,
								26432
							],
							[
								26545,
								26551
							],
							[
								27913,
								27955
							],
							[
								28150,
								28181
							],
							[
								28231,
								28273
							],
							[
								28393,
								28417
							],
							[
								28637,
								28647
							],
							[
								28700,
								28704
							],
							[
								28743,
								28770
							],
							[
								28817,
								28829
							],
							[
								28899,
								28911
							],
							[
								28974,
								28999
							],
							[
								29044,
								29075
							],
							[
								29086,
								29103
							],
							[
								29244,
								29279
							],
							[
								29327,
								29354
							],
							[
								29445,
								29483
							],
							[
								29692,
								29750
							],
							[
								30016,
								30024
							],
							[
								30123,
								30148
							],
							[
								30233,
								30275
							],
							[
								30409,
								30449
							],
							[
								33378,
								33404
							],
							[
								33423,
								33427
							],
							[
								33514,
								33540
							],
							[
								33774,
								33798
							],
							[
								33991,
								34014
							],
							[
								34116,
								34157
							],
							[
								34306,
								34310
							],
							[
								34351,
								34359
							],
							[
								34388,
								34392
							],
							[
								34767,
								34780
							],
							[
								34833,
								34853
							],
							[
								35049,
								35063
							],
							[
								35090,
								35156
							],
							[
								35158,
								35162
							],
							[
								35320,
								35327
							],
							[
								35419,
								35429
							],
							[
								35540,
								35549
							],
							[
								35655,
								35681
							],
							[
								35814,
								35845
							],
							[
								36014,
								36086
							],
							[
								36215,
								36223
							],
							[
								36725,
								36733
							],
							[
								36762,
								36775
							],
							[
								36886,
								36935
							],
							[
								37037,
								37076
							],
							[
								37101,
								37109
							],
							[
								37141,
								37156
							],
							[
								37249,
								37257
							],
							[
								37311,
								37329
							],
							[
								37554,
								37562
							],
							[
								37600,
								37612
							]
						],
						"symlist":
						[
							"slice = (x, s, e) =>",
							"stringify = v =>",
							"formatNumber = n =>",
							"isNative = fn =>",
							" function util()",
							"util",
							"AsyncFunction = async function x()",
							"GeneratorFunction = function* ()",
							"AsyncGeneratorFunction = async function* ()",
							"isAnyArrayBuffer(v)",
							"isArrayBuffer(v)",
							"isBigInt64Array(v)",
							"isBigUint64Array(v)",
							"isDate(v)",
							"isFloat32Array(v)",
							"isFloat64Array(v)",
							"isInt8Array(v)",
							"isInt16Array(v)",
							"isInt32Array(v)",
							"isMap(v)",
							"isPromise(v)",
							"isProxy(v)",
							"isRegExp(v)",
							"isSet(v)",
							"isSharedArrayBuffer(v)",
							"isUint8Array(v)",
							"isUint8ClampedArray(v)",
							"isUint16Array(v)",
							"isUint32Array(v)",
							"isWeakMap(v)",
							"isWeakSet(v)",
							"isDataView(v)",
							"isBooleanObject(v)",
							"isAsyncFunction(v)",
							"isGeneratorFunction(v)",
							"isAsyncGeneratorFunction(v)",
							"isNumberObject(v)",
							"isBigIntObject(v)",
							"isSymbolObject(v)",
							"isNativeError(v)",
							"isMapIterator(v)",
							"isSetIterator(v)",
							"isStringObject(v)",
							"isArrayBufferView(v)",
							"isArgumentsObject(v)",
							"isBoxedPrimitive(v)",
							"ctor =>",
							"isGeneratorObject(v)",
							"isTypedArray(v)",
							"isModuleNamespaceObject(v)",
							" function isObject(arg)",
							" function SyscallError(syscall, errnum)",
							"SyscallError",
							"SyscallError",
							"get message()",
							" function extendArray(proto = Array.prototype)",
							"get last()",
							"at(index)",
							"clear()",
							"findLastIndex(predicate)",
							"findLast(predicate)",
							"unique()",
							"pushUnique(...args)",
							" function toString(arrayBuf, encoding = 'utf-8')",
							" function toArrayBuffer(str, encoding = 'utf-8')",
							"a =>",
							"(c, i) =>",
							" function btoa(bin)",
							" function atob(asc)",
							" function assert(actual, expected, message)",
							" function escape(str, chars = [])",
							" function quote(str, q = '\"')",
							" function memoize(fn)",
							" (n, ...rest) =>",
							" function once(fn, thisArg, memoFn)",
							" function(...args)",
							"callback =>",
							" function()",
							" function()",
							" function(e)",
							" function atexit(fn)",
							"() =>",
							" function waitFor(ms)",
							"resolve =>",
							" function define(obj, ...args)",
							" function weakAssign(obj, ...args)",
							" function getConstructorChain(obj)",
							" function hasPrototype(obj, proto)",
							" function filter(seq, pred, thisArg)",
							"pred = (el, i) =>",
							" (f, arr = [], length = f.length) =>",
							" (...args) =>",
							"a =>",
							" function* split(buf, ...points)",
							"splitAt = (b, pos, len) =>",
							"unique = (arr, cmp) =>",
							" (el, i, arr) =>",
							"item =>",
							" (el, i, arr) =>",
							"getFunctionArguments = fn =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" (red, green, blue) =>",
							"function getAnsiStyles()",
							"value: (red, green, blue) =>",
							"c =>",
							"value: hex =>",
							"character =>",
							"value: hex =>",
							"value: code =>",
							"value: (red, green, blue) =>",
							"value: hex =>",
							" function randInt(...args)",
							" function randFloat(min, max, rng = Math.random)",
							" function randStr(n, set = '_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', rng = Math.random)",
							" function toBigInt(arg)",
							" function lazyProperty(obj, name, getter, opts = {})",
							"async function()",
							" function()",
							"v =>",
							" function replaceProperty(value)",
							" function lazyProperties(obj, gettersObj, opts = {})",
							" function getOpt(options = {}, args)",
							"findOpt = arg =>",
							"([optname, option]) =>",
							"opt =>",
							" function toUnixTime(dateObj, utc = false)",
							" function unixTime(utc = false)",
							" function fromUnixTime(epoch, utc = false)",
							" function range(...args)",
							" (v, k) =>",
							"n =>",
							" function repeater(n, what)",
							"function* ()",
							"function* ()",
							" function repeat(n, what)",
							" function chunkArray(arr, size)",
							"fn = (a, v, i) =>",
							" function camelize(str, delim = '')",
							" (match, p1, p2, offset) =>",
							" function decamelize(str, delim = '-')",
							" function Location(line, column, pos, file, freeze = true)",
							"Location",
							" function format(...args)",
							" function formatWithOptions(opts, ...args)",
							"function formatWithOptionsInternal(o, v)",
							" function isNumeric(value)",
							"v =>",
							" function functionName(fn)",
							" function className(obj)",
							"isArrowFunction = fn =>",
							" function immutableClass (orig, ...proto)",
							"p =>",
							" ctor =>",
							"ctor",
							"imm = base =>",
							"constructor(...args)",
							"isArray = a =>",
							" function arrayFacade(proto, itemFn = (container, i) => container.",
							"(i))",
							"*keys()",
							"*entries()",
							"*values()",
							"forEach(callback, thisArg)",
							"reduce(callback, accu, thisArg)",
							"Location.prototype.clone = function(freeze = false, withFilename = true)",
							"Location",
							"Location",
							" function* ()",
							"Location.prototype.toString = function(opts = {})",
							"Location.prototype.valueOf = function()",
							"Location",
							" function(hint)",
							"Location",
							" function(n, opts)",
							"Location",
							"get offset()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADjAgAARnJhZ21lbnQgPSBwcm9wcyA9PgogIGFkZCA9IChhcnIsIC4uLml0ZW1zKSA9PgpSZWFjdENvbXBvbmVudAogIHN0YXRpYyBjcmVhdGUoLi4uYXJncykKICBjID0+CiAgcGF0aEZuID0gcCA9PgpBcnJheTogKHAsIHYpID0+Ck1hcDogKHAsIHYpID0+Ck9iamVjdDogKHAsIHYpID0+CiAgZmxhdHRlbihvYmosIHBhdGgpCihjaGlsZCwgaSkgPT4KICBhcmdzID0+CiAgc3RhdGljIGlzQ29tcG9uZW50KG9iaikKICBwcm9wID0+CiAgc3RhdGljIGZhY3RvcnkocmVuZGVyX3RvLCByb290KQogIHJlbmRlcl90byA9IGNvbXBvbmVudCA9PgogIHJldCA9IGZ1bmN0aW9uKC4uLmFyZ3MpCiAgc3RhdGljIGFwcGVuZCguLi5hcmdzKQogIHN0YXRpYyBmcm9tT2JqZWN0KG9iaikKICBjaGlsZCA9PgogIHN0YXRpYyB0b09iamVjdCguLi5hcmdzKQogIHN0YXRpYyB0b0NoaWxkQXJyYXkoYSkKICBzdGF0aWMgdG9Tb3VyY2Uob2JqLCBvcHRzID0ge30sIGRlcHRoID0gMCkKKFtuYW1lLCB2YWx1ZV0pID0+CiAgb2JqID0+CiAgc3RhdGljIHRvU3RyaW5nKG9iaiwgb3B0cyA9IHt9KQpQb3J0YWwKICBjb21wb25lbnREaWRVcGRhdGUocHJvcHMpCiAgY29tcG9uZW50RGlkTW91bnQoKQogIGNvbXBvbmVudFdpbGxVbm1vdW50KCkKICBmaW5kTm9kZShub2RlKQogIHJlbmRlckxheWVyKHNob3cgPSB0cnVlKQogIHJlbmRlcigpClBvcnRhbFByb3h5CiAgZ2V0Q2hpbGRDb250ZXh0KCkKICByZW5kZXIoeyBjaGlsZHJlbiB9KQAAAAAAAAAAkA4AAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					113,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-hash.c",
						"symkeys":
						[
							[
								8,
								19
							],
							[
								472,
								482
							],
							[
								795,
								804
							],
							[
								1126,
								1135
							],
							[
								1296,
								1307
							],
							[
								1564,
								1575
							],
							[
								1661,
								1674
							],
							[
								2327,
								2340
							],
							[
								2584,
								2607
							],
							[
								3996,
								4014
							],
							[
								6010,
								6025
							],
							[
								6686,
								6707
							],
							[
								6876,
								6892
							],
							[
								7193,
								7221
							],
							[
								7923,
								7957
							],
							[
								8480,
								8504
							],
							[
								8827,
								8851
							]
						],
						"symlist":
						[
							" Ⓜ  _GNU_SOURCE … — macro object",
							"—Ⓕ– hash_alloc ( ) { … } — function",
							"—Ⓕ– hash_init ( ) { … } — function",
							"—Ⓕ– hash_size ( ) { … } — function",
							"—Ⓕ– hash_update ( ) { … } — function",
							"—Ⓕ– tmp_realloc ( ) { … } — function",
							"—Ⓕ– hash_tostring ( ) { … } — function",
							"—Ⓕ– hash_finalize ( ) { … } — function",
							"—Ⓕ– minnet_hash_constructor ( ) { … } — function",
							"—Ⓕ– minnet_hash_method ( ) { … } — function",
							"—Ⓕ– minnet_hash_get ( ) { … } — function",
							"—Ⓕ– minnet_hash_finalizer ( ) { … } — function",
							"—Ⓕ– minnet_hash_call ( ) { … } — function",
							"—Ⓕ– minnet_hash_get_own_property ( ) { … } — function",
							"—Ⓕ– minnet_hash_get_own_property_names ( ) { … } — function",
							"—Ⓕ– minnet_hash_has_property ( ) { … } — function",
							"—Ⓕ– minnet_hash_get_property ( ) { … } — function"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACQDgAAICBzbGljZSA9ICh4LCBzLCBlKSA9PgogIHN0cmluZ2lmeSA9IHYgPT4KICBmb3JtYXROdW1iZXIgPSBuID0+CiAgaXNOYXRpdmUgPSBmbiA9PgogIHV0aWwoKQogIHV0aWwKQXN5bmNGdW5jdGlvbiA9IGZ1bmN0aW9uIHgoKQpHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKigpCkFzeW5jR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbiooKQogIGlzQW55QXJyYXlCdWZmZXIodikKICBpc0FycmF5QnVmZmVyKHYpCiAgaXNCaWdJbnQ2NEFycmF5KHYpCiAgaXNCaWdVaW50NjRBcnJheSh2KQogIGlzRGF0ZSh2KQogIGlzRmxvYXQzMkFycmF5KHYpCiAgaXNGbG9hdDY0QXJyYXkodikKICBpc0ludDhBcnJheSh2KQogIGlzSW50MTZBcnJheSh2KQogIGlzSW50MzJBcnJheSh2KQogIGlzTWFwKHYpCiAgaXNQcm9taXNlKHYpCiAgaXNQcm94eSh2KQogIGlzUmVnRXhwKHYpCiAgaXNTZXQodikKICBpc1NoYXJlZEFycmF5QnVmZmVyKHYpCiAgaXNVaW50OEFycmF5KHYpCiAgaXNVaW50OENsYW1wZWRBcnJheSh2KQogIGlzVWludDE2QXJyYXkodikKICBpc1VpbnQzMkFycmF5KHYpCiAgaXNXZWFrTWFwKHYpCiAgaXNXZWFrU2V0KHYpCiAgaXNEYXRhVmlldyh2KQogIGlzQm9vbGVhbk9iamVjdCh2KQogIGlzQXN5bmNGdW5jdGlvbih2KQogIGlzR2VuZXJhdG9yRnVuY3Rpb24odikKICBpc0FzeW5jR2VuZXJhdG9yRnVuY3Rpb24odikKICBpc051bWJlck9iamVjdCh2KQogIGlzQmlnSW50T2JqZWN0KHYpCiAgaXNTeW1ib2xPYmplY3QodikKICBpc05hdGl2ZUVycm9yKHYpCiAgaXNNYXBJdGVyYXRvcih2KQogIGlzU2V0SXRlcmF0b3IodikKICBpc1N0cmluZ09iamVjdCh2KQogIGlzQXJyYXlCdWZmZXJWaWV3KHYpCiAgaXNBcmd1bWVudHNPYmplY3QodikKICBpc0JveGVkUHJpbWl0aXZlKHYpCiAgY3RvciA9PgogIGlzR2VuZXJhdG9yT2JqZWN0KHYpCiAgaXNUeXBlZEFycmF5KHYpCiAgaXNNb2R1bGVOYW1lc3BhY2VPYmplY3QodikKICBpc09iamVjdChhcmcpClN5c2NhbGxFcnJvcihzeXNjYWxsLCBlcnJudW0pClN5c2NhbGxFcnJvcgpTeXNjYWxsRXJyb3IKICBnZXQgbWVzc2FnZSgpCiAgZXh0ZW5kQXJyYXkocHJvdG8gPSBBcnJheS5wcm90b3R5cGUpCiAgZ2V0IGxhc3QoKQogIGF0KGluZGV4KQogIGNsZWFyKCkKICBmaW5kTGFzdEluZGV4KHByZWRpY2F0ZSkKICBmaW5kTGFzdChwcmVkaWNhdGUpCiAgdW5pcXVlKCkKICBwdXNoVW5pcXVlKC4uLmFyZ3MpCiAgdG9TdHJpbmcoYXJyYXlCdWYsIGVuY29kaW5nID0gJ3V0Zi04JykKICB0b0FycmF5QnVmZmVyKHN0ciwgZW5jb2RpbmcgPSAndXRmLTgnKQogIGEgPT4KKGMsIGkpID0+CiAgYnRvYShiaW4pCiAgYXRvYihhc2MpCiAgYXNzZXJ0KGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpCiAgZXNjYXBlKHN0ciwgY2hhcnMgPSBbXSkKICBxdW90ZShzdHIsIHEgPSAnIicpCiAgbWVtb2l6ZShmbikKICAobiwgLi4ucmVzdCkgPT4KICBvbmNlKGZuLCB0aGlzQXJnLCBtZW1vRm4pCiAgZnVuY3Rpb24oLi4uYXJncykKICBjYWxsYmFjayA9PgogIGZ1bmN0aW9uKCkKICBmdW5jdGlvbigpCiAgZnVuY3Rpb24oZSkKICBhdGV4aXQoZm4pCigpID0+CiAgd2FpdEZvcihtcykKICByZXNvbHZlID0+CiAgZGVmaW5lKG9iaiwgLi4uYXJncykKICB3ZWFrQXNzaWduKG9iaiwgLi4uYXJncykKICBnZXRDb25zdHJ1Y3RvckNoYWluKG9iaikKICBoYXNQcm90b3R5cGUob2JqLCBwcm90bykKICBmaWx0ZXIoc2VxLCBwcmVkLCB0aGlzQXJnKQogIHByZWQgPSAoZWwsIGkpID0+CiAgKGYsIGFyciA9IFtdLCBsZW5ndGggPSBmLmxlbmd0aCkgPT4KICAoLi4uYXJncykgPT4KICBhID0+CiAgc3BsaXQoYnVmLCAuLi5wb2ludHMpCiAgc3BsaXRBdCA9IChiLCBwb3MsIGxlbikgPT4KICB1bmlxdWUgPSAoYXJyLCBjbXApID0+CiAgKGVsLCBpLCBhcnIpID0+CiAgaXRlbSA9PgogIChlbCwgaSwgYXJyKSA9PgogIGdldEZ1bmN0aW9uQXJndW1lbnRzID0gZm4gPT4KICAob2Zmc2V0ID0gMCkgPT4KICBjb2RlID0+CiAgKG9mZnNldCA9IDApID0+CiAgY29kZSA9PgogIChvZmZzZXQgPSAwKSA9PgogIChyZWQsIGdyZWVuLCBibHVlKSA9PgogIGdldEFuc2lTdHlsZXMoKQogIHZhbHVlOiAocmVkLCBncmVlbiwgYmx1ZSkgPT4KICBjID0+CiAgdmFsdWU6IGhleCA9PgogIGNoYXJhY3RlciA9PgogIHZhbHVlOiBoZXggPT4KICB2YWx1ZTogY29kZSA9PgogIHZhbHVlOiAocmVkLCBncmVlbiwgYmx1ZSkgPT4KICB2YWx1ZTogaGV4ID0+CiAgcmFuZEludCguLi5hcmdzKQogIHJhbmRGbG9hdChtaW4sIG1heCwgcm5nID0gTWF0aC5yYW5kb20pCiAgcmFuZFN0cihuLCBzZXQgPSAnXzAxMjM0NTY3ODlBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6Jywgcm5nID0gTWF0aC5yYW5kb20pCiAgdG9CaWdJbnQoYXJnKQogIGxhenlQcm9wZXJ0eShvYmosIG5hbWUsIGdldHRlciwgb3B0cyA9IHt9KQogIGZ1bmN0aW9uKCkKICBmdW5jdGlvbigpCiAgdiA9PgogIHJlcGxhY2VQcm9wZXJ0eSh2YWx1ZSkKICBsYXp5UHJvcGVydGllcyhvYmosIGdldHRlcnNPYmosIG9wdHMgPSB7fSkKICBnZXRPcHQob3B0aW9ucyA9IHt9LCBhcmdzKQogIGZpbmRPcHQgPSBhcmcgPT4KKFtvcHRuYW1lLCBvcHRpb25dKSA9PgogIG9wdCA9PgogIHRvVW5peFRpbWUoZGF0ZU9iaiwgdXRjID0gZmFsc2UpCiAgdW5peFRpbWUodXRjID0gZmFsc2UpCiAgZnJvbVVuaXhUaW1lKGVwb2NoLCB1dGMgPSBmYWxzZSkKICByYW5nZSguLi5hcmdzKQogICh2LCBrKSA9PgogIG4gPT4KICByZXBlYXRlcihuLCB3aGF0KQooKQooKQogIHJlcGVhdChuLCB3aGF0KQogIGNodW5rQXJyYXkoYXJyLCBzaXplKQogIGZuID0gKGEsIHYsIGkpID0+CiAgY2FtZWxpemUoc3RyLCBkZWxpbSA9ICcnKQogIChtYXRjaCwgcDEsIHAyLCBvZmZzZXQpID0+CiAgZGVjYW1lbGl6ZShzdHIsIGRlbGltID0gJy0nKQpMb2NhdGlvbihsaW5lLCBjb2x1bW4sIHBvcywgZmlsZSwgZnJlZXplID0gdHJ1ZSkKTG9jYXRpb24KICBmb3JtYXQoLi4uYXJncykKICBmb3JtYXRXaXRoT3B0aW9ucyhvcHRzLCAuLi5hcmdzKQogIGZvcm1hdFdpdGhPcHRpb25zSW50ZXJuYWwobywgdikKICBpc051bWVyaWModmFsdWUpCiAgdiA9PgogIGZ1bmN0aW9uTmFtZShmbikKICBjbGFzc05hbWUob2JqKQogIGlzQXJyb3dGdW5jdGlvbiA9IGZuID0+CiAgaW1tdXRhYmxlQ2xhc3MgKG9yaWcsIC4uLnByb3RvKQogIHAgPT4KICBjdG9yID0+CiAgY3RvcgogIGltbSA9IGJhc2UgPT4KICBjb25zdHJ1Y3RvciguLi5hcmdzKQogIGlzQXJyYXkgPSBhID0+CiAgYXJyYXlGYWNhZGUocHJvdG8sIGl0ZW1GbiA9IChjb250YWluZXIsIGkpID0+IGNvbnRhaW5lci4KKGkpKQoqa2V5cygpCiplbnRyaWVzKCkKKnZhbHVlcygpCiAgZm9yRWFjaChjYWxsYmFjaywgdGhpc0FyZykKICByZWR1Y2UoY2FsbGJhY2ssIGFjY3UsIHRoaXNBcmcpCkxvY2F0aW9uLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKGZyZWV6ZSA9IGZhbHNlLCB3aXRoRmlsZW5hbWUgPSB0cnVlKQpMb2NhdGlvbgpMb2NhdGlvbgooKQpMb2NhdGlvbi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbihvcHRzID0ge30pCkxvY2F0aW9uLnByb3RvdHlwZS52YWx1ZU9mID0gZnVuY3Rpb24oKQpMb2NhdGlvbgogIGZ1bmN0aW9uKGhpbnQpCkxvY2F0aW9uCiAgZnVuY3Rpb24obiwgb3B0cykKTG9jYXRpb24KICBnZXQgb2Zmc2V0KCkAAAAAAAAAANgCAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					114,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/misc.js",
						"symkeys":
						[
							[
								100,
								120
							],
							[
								340,
								356
							],
							[
								410,
								429
							],
							[
								464,
								480
							],
							[
								540,
								556
							],
							[
								577,
								581
							],
							[
								619,
								653
							],
							[
								676,
								708
							],
							[
								731,
								774
							],
							[
								2603,
								2622
							],
							[
								2720,
								2736
							],
							[
								2798,
								2816
							],
							[
								2880,
								2899
							],
							[
								2964,
								2973
							],
							[
								3028,
								3045
							],
							[
								3108,
								3125
							],
							[
								3188,
								3202
							],
							[
								3262,
								3277
							],
							[
								3338,
								3353
							],
							[
								3414,
								3422
							],
							[
								3476,
								3488
							],
							[
								3546,
								3556
							],
							[
								3612,
								3623
							],
							[
								3680,
								3688
							],
							[
								3742,
								3764
							],
							[
								3832,
								3847
							],
							[
								3908,
								3930
							],
							[
								3998,
								4014
							],
							[
								4076,
								4092
							],
							[
								4154,
								4166
							],
							[
								4224,
								4236
							],
							[
								4294,
								4307
							],
							[
								4366,
								4384
							],
							[
								4442,
								4460
							],
							[
								4524,
								4546
							],
							[
								4614,
								4641
							],
							[
								4714,
								4731
							],
							[
								4788,
								4805
							],
							[
								4862,
								4879
							],
							[
								4926,
								4942
							],
							[
								5025,
								5041
							],
							[
								5113,
								5129
							],
							[
								5201,
								5218
							],
							[
								5275,
								5295
							],
							[
								5354,
								5374
							],
							[
								5533,
								5552
							],
							[
								5628,
								5635
							],
							[
								5664,
								5684
							],
							[
								5754,
								5769
							],
							[
								5830,
								5856
							],
							[
								5934,
								5957
							],
							[
								7671,
								7710
							],
							[
								8132,
								8144
							],
							[
								8178,
								8190
							],
							[
								8206,
								8219
							],
							[
								8400,
								8446
							],
							[
								8471,
								8481
							],
							[
								8531,
								8540
							],
							[
								8642,
								8649
							],
							[
								8698,
								8722
							],
							[
								8882,
								8901
							],
							[
								9015,
								9023
							],
							[
								9070,
								9089
							],
							[
								9185,
								9233
							],
							[
								11447,
								11495
							],
							[
								13032,
								13036
							],
							[
								13067,
								13076
							],
							[
								13214,
								13233
							],
							[
								13753,
								13772
							],
							[
								14442,
								14485
							],
							[
								14902,
								14935
							],
							[
								15213,
								15242
							],
							[
								15289,
								15310
							],
							[
								15339,
								15355
							],
							[
								15448,
								15483
							],
							[
								15523,
								15541
							],
							[
								15779,
								15790
							],
							[
								16041,
								16052
							],
							[
								16155,
								16166
							],
							[
								16317,
								16329
							],
							[
								16439,
								16459
							],
							[
								16557,
								16562
							],
							[
								16630,
								16651
							],
							[
								16675,
								16685
							],
							[
								16724,
								16754
							],
							[
								17080,
								17114
							],
							[
								17421,
								17455
							],
							[
								17675,
								17709
							],
							[
								17775,
								17811
							],
							[
								17886,
								17903
							],
							[
								18062,
								18099
							],
							[
								18100,
								18114
							],
							[
								18120,
								18124
							],
							[
								18199,
								18231
							],
							[
								18259,
								18285
							],
							[
								18610,
								18632
							],
							[
								18683,
								18699
							],
							[
								18714,
								18721
							],
							[
								18749,
								18765
							],
							[
								18806,
								18834
							],
							[
								19053,
								19070
							],
							[
								19071,
								19080
							],
							[
								19132,
								19149
							],
							[
								19150,
								19159
							],
							[
								19219,
								19236
							],
							[
								19237,
								19260
							],
							[
								19316,
								19340
							],
							[
								21967,
								21995
							],
							[
								22426,
								22430
							],
							[
								22558,
								22571
							],
							[
								22887,
								22899
							],
							[
								23162,
								23175
							],
							[
								23280,
								23294
							],
							[
								24187,
								24215
							],
							[
								24331,
								24344
							],
							[
								24456,
								24482
							],
							[
								24677,
								24725
							],
							[
								24773,
								24885
							],
							[
								24990,
								25013
							],
							[
								25157,
								25209
							],
							[
								25303,
								25319
							],
							[
								25403,
								25414
							],
							[
								25527,
								25531
							],
							[
								25810,
								25843
							],
							[
								25957,
								26009
							],
							[
								26183,
								26219
							],
							[
								26376,
								26392
							],
							[
								26410,
								26432
							],
							[
								26545,
								26551
							],
							[
								27913,
								27955
							],
							[
								28150,
								28181
							],
							[
								28231,
								28273
							],
							[
								28393,
								28417
							],
							[
								28637,
								28647
							],
							[
								28700,
								28704
							],
							[
								28743,
								28770
							],
							[
								28817,
								28829
							],
							[
								28899,
								28911
							],
							[
								28974,
								28999
							],
							[
								29044,
								29075
							],
							[
								29086,
								29103
							],
							[
								29244,
								29279
							],
							[
								29327,
								29354
							],
							[
								29445,
								29483
							],
							[
								29692,
								29750
							],
							[
								30016,
								30024
							],
							[
								30123,
								30148
							],
							[
								30233,
								30275
							],
							[
								30409,
								30449
							],
							[
								33378,
								33404
							],
							[
								33423,
								33427
							],
							[
								33514,
								33540
							],
							[
								33774,
								33798
							],
							[
								33991,
								34014
							],
							[
								34116,
								34157
							],
							[
								34306,
								34310
							],
							[
								34351,
								34359
							],
							[
								34388,
								34392
							],
							[
								34767,
								34780
							],
							[
								34833,
								34853
							],
							[
								35049,
								35063
							],
							[
								35090,
								35156
							],
							[
								35158,
								35162
							],
							[
								35320,
								35327
							],
							[
								35419,
								35429
							],
							[
								35540,
								35549
							],
							[
								35655,
								35681
							],
							[
								35814,
								35845
							],
							[
								36014,
								36086
							],
							[
								36215,
								36223
							],
							[
								36725,
								36733
							],
							[
								36762,
								36775
							],
							[
								36886,
								36935
							],
							[
								37037,
								37076
							],
							[
								37101,
								37109
							],
							[
								37141,
								37156
							],
							[
								37249,
								37257
							],
							[
								37311,
								37329
							],
							[
								37554,
								37562
							],
							[
								37600,
								37612
							]
						],
						"symlist":
						[
							"slice = (x, s, e) =>",
							"stringify = v =>",
							"formatNumber = n =>",
							"isNative = fn =>",
							" function util()",
							"util",
							"AsyncFunction = async function x()",
							"GeneratorFunction = function* ()",
							"AsyncGeneratorFunction = async function* ()",
							"isAnyArrayBuffer(v)",
							"isArrayBuffer(v)",
							"isBigInt64Array(v)",
							"isBigUint64Array(v)",
							"isDate(v)",
							"isFloat32Array(v)",
							"isFloat64Array(v)",
							"isInt8Array(v)",
							"isInt16Array(v)",
							"isInt32Array(v)",
							"isMap(v)",
							"isPromise(v)",
							"isProxy(v)",
							"isRegExp(v)",
							"isSet(v)",
							"isSharedArrayBuffer(v)",
							"isUint8Array(v)",
							"isUint8ClampedArray(v)",
							"isUint16Array(v)",
							"isUint32Array(v)",
							"isWeakMap(v)",
							"isWeakSet(v)",
							"isDataView(v)",
							"isBooleanObject(v)",
							"isAsyncFunction(v)",
							"isGeneratorFunction(v)",
							"isAsyncGeneratorFunction(v)",
							"isNumberObject(v)",
							"isBigIntObject(v)",
							"isSymbolObject(v)",
							"isNativeError(v)",
							"isMapIterator(v)",
							"isSetIterator(v)",
							"isStringObject(v)",
							"isArrayBufferView(v)",
							"isArgumentsObject(v)",
							"isBoxedPrimitive(v)",
							"ctor =>",
							"isGeneratorObject(v)",
							"isTypedArray(v)",
							"isModuleNamespaceObject(v)",
							" function isObject(arg)",
							" function SyscallError(syscall, errnum)",
							"SyscallError",
							"SyscallError",
							"get message()",
							" function extendArray(proto = Array.prototype)",
							"get last()",
							"at(index)",
							"clear()",
							"findLastIndex(predicate)",
							"findLast(predicate)",
							"unique()",
							"pushUnique(...args)",
							" function toString(arrayBuf, encoding = 'utf-8')",
							" function toArrayBuffer(str, encoding = 'utf-8')",
							"a =>",
							"(c, i) =>",
							" function btoa(bin)",
							" function atob(asc)",
							" function assert(actual, expected, message)",
							" function escape(str, chars = [])",
							" function quote(str, q = '\"')",
							" function memoize(fn)",
							" (n, ...rest) =>",
							" function once(fn, thisArg, memoFn)",
							" function(...args)",
							"callback =>",
							" function()",
							" function()",
							" function(e)",
							" function atexit(fn)",
							"() =>",
							" function waitFor(ms)",
							"resolve =>",
							" function define(obj, ...args)",
							" function weakAssign(obj, ...args)",
							" function getConstructorChain(obj)",
							" function hasPrototype(obj, proto)",
							" function filter(seq, pred, thisArg)",
							"pred = (el, i) =>",
							" (f, arr = [], length = f.length) =>",
							" (...args) =>",
							"a =>",
							" function* split(buf, ...points)",
							"splitAt = (b, pos, len) =>",
							"unique = (arr, cmp) =>",
							" (el, i, arr) =>",
							"item =>",
							" (el, i, arr) =>",
							"getFunctionArguments = fn =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" (red, green, blue) =>",
							"function getAnsiStyles()",
							"value: (red, green, blue) =>",
							"c =>",
							"value: hex =>",
							"character =>",
							"value: hex =>",
							"value: code =>",
							"value: (red, green, blue) =>",
							"value: hex =>",
							" function randInt(...args)",
							" function randFloat(min, max, rng = Math.random)",
							" function randStr(n, set = '_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', rng = Math.random)",
							" function toBigInt(arg)",
							" function lazyProperty(obj, name, getter, opts = {})",
							"async function()",
							" function()",
							"v =>",
							" function replaceProperty(value)",
							" function lazyProperties(obj, gettersObj, opts = {})",
							" function getOpt(options = {}, args)",
							"findOpt = arg =>",
							"([optname, option]) =>",
							"opt =>",
							" function toUnixTime(dateObj, utc = false)",
							" function unixTime(utc = false)",
							" function fromUnixTime(epoch, utc = false)",
							" function range(...args)",
							" (v, k) =>",
							"n =>",
							" function repeater(n, what)",
							"function* ()",
							"function* ()",
							" function repeat(n, what)",
							" function chunkArray(arr, size)",
							"fn = (a, v, i) =>",
							" function camelize(str, delim = '')",
							" (match, p1, p2, offset) =>",
							" function decamelize(str, delim = '-')",
							" function Location(line, column, pos, file, freeze = true)",
							"Location",
							" function format(...args)",
							" function formatWithOptions(opts, ...args)",
							"function formatWithOptionsInternal(o, v)",
							" function isNumeric(value)",
							"v =>",
							" function functionName(fn)",
							" function className(obj)",
							"isArrowFunction = fn =>",
							" function immutableClass (orig, ...proto)",
							"p =>",
							" ctor =>",
							"ctor",
							"imm = base =>",
							"constructor(...args)",
							"isArray = a =>",
							" function arrayFacade(proto, itemFn = (container, i) => container.",
							"(i))",
							"*keys()",
							"*entries()",
							"*values()",
							"forEach(callback, thisArg)",
							"reduce(callback, accu, thisArg)",
							"Location.prototype.clone = function(freeze = false, withFilename = true)",
							"Location",
							"Location",
							" function* ()",
							"Location.prototype.toString = function(opts = {})",
							"Location.prototype.valueOf = function()",
							"Location",
							" function(hint)",
							"Location",
							" function(n, opts)",
							"Location",
							"get offset()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB+AwAAICDik4IgIF9HTlVfU09VUkNFIOKApiDigJQgbWFjcm8gb2JqZWN0CuKAlOKSu+KAkyBoYXNoX2FsbG9jICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaGFzaF9pbml0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaGFzaF9zaXplICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaGFzaF91cGRhdGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB0bXBfcmVhbGxvYyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGhhc2hfdG9zdHJpbmcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBoYXNoX2ZpbmFsaXplICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgbWlubmV0X2hhc2hfY29uc3RydWN0b3IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBtaW5uZXRfaGFzaF9tZXRob2QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBtaW5uZXRfaGFzaF9nZXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBtaW5uZXRfaGFzaF9maW5hbGl6ZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBtaW5uZXRfaGFzaF9jYWxsICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgbWlubmV0X2hhc2hfZ2V0X293bl9wcm9wZXJ0eSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIG1pbm5ldF9oYXNoX2dldF9vd25fcHJvcGVydHlfbmFtZXMgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBtaW5uZXRfaGFzaF9oYXNfcHJvcGVydHkgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBtaW5uZXRfaGFzaF9nZXRfcHJvcGVydHkgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uAAAAAAAAAACQDgAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					115,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACQDgAAICBzbGljZSA9ICh4LCBzLCBlKSA9PgogIHN0cmluZ2lmeSA9IHYgPT4KICBmb3JtYXROdW1iZXIgPSBuID0+CiAgaXNOYXRpdmUgPSBmbiA9PgogIHV0aWwoKQogIHV0aWwKQXN5bmNGdW5jdGlvbiA9IGZ1bmN0aW9uIHgoKQpHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKigpCkFzeW5jR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbiooKQogIGlzQW55QXJyYXlCdWZmZXIodikKICBpc0FycmF5QnVmZmVyKHYpCiAgaXNCaWdJbnQ2NEFycmF5KHYpCiAgaXNCaWdVaW50NjRBcnJheSh2KQogIGlzRGF0ZSh2KQogIGlzRmxvYXQzMkFycmF5KHYpCiAgaXNGbG9hdDY0QXJyYXkodikKICBpc0ludDhBcnJheSh2KQogIGlzSW50MTZBcnJheSh2KQogIGlzSW50MzJBcnJheSh2KQogIGlzTWFwKHYpCiAgaXNQcm9taXNlKHYpCiAgaXNQcm94eSh2KQogIGlzUmVnRXhwKHYpCiAgaXNTZXQodikKICBpc1NoYXJlZEFycmF5QnVmZmVyKHYpCiAgaXNVaW50OEFycmF5KHYpCiAgaXNVaW50OENsYW1wZWRBcnJheSh2KQogIGlzVWludDE2QXJyYXkodikKICBpc1VpbnQzMkFycmF5KHYpCiAgaXNXZWFrTWFwKHYpCiAgaXNXZWFrU2V0KHYpCiAgaXNEYXRhVmlldyh2KQogIGlzQm9vbGVhbk9iamVjdCh2KQogIGlzQXN5bmNGdW5jdGlvbih2KQogIGlzR2VuZXJhdG9yRnVuY3Rpb24odikKICBpc0FzeW5jR2VuZXJhdG9yRnVuY3Rpb24odikKICBpc051bWJlck9iamVjdCh2KQogIGlzQmlnSW50T2JqZWN0KHYpCiAgaXNTeW1ib2xPYmplY3QodikKICBpc05hdGl2ZUVycm9yKHYpCiAgaXNNYXBJdGVyYXRvcih2KQogIGlzU2V0SXRlcmF0b3IodikKICBpc1N0cmluZ09iamVjdCh2KQogIGlzQXJyYXlCdWZmZXJWaWV3KHYpCiAgaXNBcmd1bWVudHNPYmplY3QodikKICBpc0JveGVkUHJpbWl0aXZlKHYpCiAgY3RvciA9PgogIGlzR2VuZXJhdG9yT2JqZWN0KHYpCiAgaXNUeXBlZEFycmF5KHYpCiAgaXNNb2R1bGVOYW1lc3BhY2VPYmplY3QodikKICBpc09iamVjdChhcmcpClN5c2NhbGxFcnJvcihzeXNjYWxsLCBlcnJudW0pClN5c2NhbGxFcnJvcgpTeXNjYWxsRXJyb3IKICBnZXQgbWVzc2FnZSgpCiAgZXh0ZW5kQXJyYXkocHJvdG8gPSBBcnJheS5wcm90b3R5cGUpCiAgZ2V0IGxhc3QoKQogIGF0KGluZGV4KQogIGNsZWFyKCkKICBmaW5kTGFzdEluZGV4KHByZWRpY2F0ZSkKICBmaW5kTGFzdChwcmVkaWNhdGUpCiAgdW5pcXVlKCkKICBwdXNoVW5pcXVlKC4uLmFyZ3MpCiAgdG9TdHJpbmcoYXJyYXlCdWYsIGVuY29kaW5nID0gJ3V0Zi04JykKICB0b0FycmF5QnVmZmVyKHN0ciwgZW5jb2RpbmcgPSAndXRmLTgnKQogIGEgPT4KKGMsIGkpID0+CiAgYnRvYShiaW4pCiAgYXRvYihhc2MpCiAgYXNzZXJ0KGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpCiAgZXNjYXBlKHN0ciwgY2hhcnMgPSBbXSkKICBxdW90ZShzdHIsIHEgPSAnIicpCiAgbWVtb2l6ZShmbikKICAobiwgLi4ucmVzdCkgPT4KICBvbmNlKGZuLCB0aGlzQXJnLCBtZW1vRm4pCiAgZnVuY3Rpb24oLi4uYXJncykKICBjYWxsYmFjayA9PgogIGZ1bmN0aW9uKCkKICBmdW5jdGlvbigpCiAgZnVuY3Rpb24oZSkKICBhdGV4aXQoZm4pCigpID0+CiAgd2FpdEZvcihtcykKICByZXNvbHZlID0+CiAgZGVmaW5lKG9iaiwgLi4uYXJncykKICB3ZWFrQXNzaWduKG9iaiwgLi4uYXJncykKICBnZXRDb25zdHJ1Y3RvckNoYWluKG9iaikKICBoYXNQcm90b3R5cGUob2JqLCBwcm90bykKICBmaWx0ZXIoc2VxLCBwcmVkLCB0aGlzQXJnKQogIHByZWQgPSAoZWwsIGkpID0+CiAgKGYsIGFyciA9IFtdLCBsZW5ndGggPSBmLmxlbmd0aCkgPT4KICAoLi4uYXJncykgPT4KICBhID0+CiAgc3BsaXQoYnVmLCAuLi5wb2ludHMpCiAgc3BsaXRBdCA9IChiLCBwb3MsIGxlbikgPT4KICB1bmlxdWUgPSAoYXJyLCBjbXApID0+CiAgKGVsLCBpLCBhcnIpID0+CiAgaXRlbSA9PgogIChlbCwgaSwgYXJyKSA9PgogIGdldEZ1bmN0aW9uQXJndW1lbnRzID0gZm4gPT4KICAob2Zmc2V0ID0gMCkgPT4KICBjb2RlID0+CiAgKG9mZnNldCA9IDApID0+CiAgY29kZSA9PgogIChvZmZzZXQgPSAwKSA9PgogIChyZWQsIGdyZWVuLCBibHVlKSA9PgogIGdldEFuc2lTdHlsZXMoKQogIHZhbHVlOiAocmVkLCBncmVlbiwgYmx1ZSkgPT4KICBjID0+CiAgdmFsdWU6IGhleCA9PgogIGNoYXJhY3RlciA9PgogIHZhbHVlOiBoZXggPT4KICB2YWx1ZTogY29kZSA9PgogIHZhbHVlOiAocmVkLCBncmVlbiwgYmx1ZSkgPT4KICB2YWx1ZTogaGV4ID0+CiAgcmFuZEludCguLi5hcmdzKQogIHJhbmRGbG9hdChtaW4sIG1heCwgcm5nID0gTWF0aC5yYW5kb20pCiAgcmFuZFN0cihuLCBzZXQgPSAnXzAxMjM0NTY3ODlBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6Jywgcm5nID0gTWF0aC5yYW5kb20pCiAgdG9CaWdJbnQoYXJnKQogIGxhenlQcm9wZXJ0eShvYmosIG5hbWUsIGdldHRlciwgb3B0cyA9IHt9KQogIGZ1bmN0aW9uKCkKICBmdW5jdGlvbigpCiAgdiA9PgogIHJlcGxhY2VQcm9wZXJ0eSh2YWx1ZSkKICBsYXp5UHJvcGVydGllcyhvYmosIGdldHRlcnNPYmosIG9wdHMgPSB7fSkKICBnZXRPcHQob3B0aW9ucyA9IHt9LCBhcmdzKQogIGZpbmRPcHQgPSBhcmcgPT4KKFtvcHRuYW1lLCBvcHRpb25dKSA9PgogIG9wdCA9PgogIHRvVW5peFRpbWUoZGF0ZU9iaiwgdXRjID0gZmFsc2UpCiAgdW5peFRpbWUodXRjID0gZmFsc2UpCiAgZnJvbVVuaXhUaW1lKGVwb2NoLCB1dGMgPSBmYWxzZSkKICByYW5nZSguLi5hcmdzKQogICh2LCBrKSA9PgogIG4gPT4KICByZXBlYXRlcihuLCB3aGF0KQooKQooKQogIHJlcGVhdChuLCB3aGF0KQogIGNodW5rQXJyYXkoYXJyLCBzaXplKQogIGZuID0gKGEsIHYsIGkpID0+CiAgY2FtZWxpemUoc3RyLCBkZWxpbSA9ICcnKQogIChtYXRjaCwgcDEsIHAyLCBvZmZzZXQpID0+CiAgZGVjYW1lbGl6ZShzdHIsIGRlbGltID0gJy0nKQpMb2NhdGlvbihsaW5lLCBjb2x1bW4sIHBvcywgZmlsZSwgZnJlZXplID0gdHJ1ZSkKTG9jYXRpb24KICBmb3JtYXQoLi4uYXJncykKICBmb3JtYXRXaXRoT3B0aW9ucyhvcHRzLCAuLi5hcmdzKQogIGZvcm1hdFdpdGhPcHRpb25zSW50ZXJuYWwobywgdikKICBpc051bWVyaWModmFsdWUpCiAgdiA9PgogIGZ1bmN0aW9uTmFtZShmbikKICBjbGFzc05hbWUob2JqKQogIGlzQXJyb3dGdW5jdGlvbiA9IGZuID0+CiAgaW1tdXRhYmxlQ2xhc3MgKG9yaWcsIC4uLnByb3RvKQogIHAgPT4KICBjdG9yID0+CiAgY3RvcgogIGltbSA9IGJhc2UgPT4KICBjb25zdHJ1Y3RvciguLi5hcmdzKQogIGlzQXJyYXkgPSBhID0+CiAgYXJyYXlGYWNhZGUocHJvdG8sIGl0ZW1GbiA9IChjb250YWluZXIsIGkpID0+IGNvbnRhaW5lci4KKGkpKQoqa2V5cygpCiplbnRyaWVzKCkKKnZhbHVlcygpCiAgZm9yRWFjaChjYWxsYmFjaywgdGhpc0FyZykKICByZWR1Y2UoY2FsbGJhY2ssIGFjY3UsIHRoaXNBcmcpCkxvY2F0aW9uLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKGZyZWV6ZSA9IGZhbHNlLCB3aXRoRmlsZW5hbWUgPSB0cnVlKQpMb2NhdGlvbgpMb2NhdGlvbgooKQpMb2NhdGlvbi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbihvcHRzID0ge30pCkxvY2F0aW9uLnByb3RvdHlwZS52YWx1ZU9mID0gZnVuY3Rpb24oKQpMb2NhdGlvbgogIGZ1bmN0aW9uKGhpbnQpCkxvY2F0aW9uCiAgZnVuY3Rpb24obiwgb3B0cykKTG9jYXRpb24KICBnZXQgb2Zmc2V0KCkAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					116,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/misc.js",
						"symkeys":
						[
							[
								100,
								120
							],
							[
								340,
								356
							],
							[
								410,
								429
							],
							[
								464,
								480
							],
							[
								540,
								556
							],
							[
								577,
								581
							],
							[
								619,
								653
							],
							[
								676,
								708
							],
							[
								731,
								774
							],
							[
								2603,
								2622
							],
							[
								2720,
								2736
							],
							[
								2798,
								2816
							],
							[
								2880,
								2899
							],
							[
								2964,
								2973
							],
							[
								3028,
								3045
							],
							[
								3108,
								3125
							],
							[
								3188,
								3202
							],
							[
								3262,
								3277
							],
							[
								3338,
								3353
							],
							[
								3414,
								3422
							],
							[
								3476,
								3488
							],
							[
								3546,
								3556
							],
							[
								3612,
								3623
							],
							[
								3680,
								3688
							],
							[
								3742,
								3764
							],
							[
								3832,
								3847
							],
							[
								3908,
								3930
							],
							[
								3998,
								4014
							],
							[
								4076,
								4092
							],
							[
								4154,
								4166
							],
							[
								4224,
								4236
							],
							[
								4294,
								4307
							],
							[
								4366,
								4384
							],
							[
								4442,
								4460
							],
							[
								4524,
								4546
							],
							[
								4614,
								4641
							],
							[
								4714,
								4731
							],
							[
								4788,
								4805
							],
							[
								4862,
								4879
							],
							[
								4926,
								4942
							],
							[
								5025,
								5041
							],
							[
								5113,
								5129
							],
							[
								5201,
								5218
							],
							[
								5275,
								5295
							],
							[
								5354,
								5374
							],
							[
								5533,
								5552
							],
							[
								5628,
								5635
							],
							[
								5664,
								5684
							],
							[
								5754,
								5769
							],
							[
								5830,
								5856
							],
							[
								5934,
								5957
							],
							[
								7671,
								7710
							],
							[
								8132,
								8144
							],
							[
								8178,
								8190
							],
							[
								8206,
								8219
							],
							[
								8400,
								8446
							],
							[
								8471,
								8481
							],
							[
								8531,
								8540
							],
							[
								8642,
								8649
							],
							[
								8698,
								8722
							],
							[
								8882,
								8901
							],
							[
								9015,
								9023
							],
							[
								9070,
								9089
							],
							[
								9185,
								9233
							],
							[
								11447,
								11495
							],
							[
								13032,
								13036
							],
							[
								13067,
								13076
							],
							[
								13214,
								13233
							],
							[
								13753,
								13772
							],
							[
								14442,
								14485
							],
							[
								14902,
								14935
							],
							[
								15213,
								15242
							],
							[
								15289,
								15310
							],
							[
								15339,
								15355
							],
							[
								15448,
								15483
							],
							[
								15523,
								15541
							],
							[
								15779,
								15790
							],
							[
								16041,
								16052
							],
							[
								16155,
								16166
							],
							[
								16317,
								16329
							],
							[
								16439,
								16459
							],
							[
								16557,
								16562
							],
							[
								16630,
								16651
							],
							[
								16675,
								16685
							],
							[
								16724,
								16754
							],
							[
								17080,
								17114
							],
							[
								17421,
								17455
							],
							[
								17675,
								17709
							],
							[
								17775,
								17811
							],
							[
								17886,
								17903
							],
							[
								18062,
								18099
							],
							[
								18100,
								18114
							],
							[
								18120,
								18124
							],
							[
								18199,
								18231
							],
							[
								18259,
								18285
							],
							[
								18610,
								18632
							],
							[
								18683,
								18699
							],
							[
								18714,
								18721
							],
							[
								18749,
								18765
							],
							[
								18806,
								18834
							],
							[
								19053,
								19070
							],
							[
								19071,
								19080
							],
							[
								19132,
								19149
							],
							[
								19150,
								19159
							],
							[
								19219,
								19236
							],
							[
								19237,
								19260
							],
							[
								19316,
								19340
							],
							[
								21967,
								21995
							],
							[
								22426,
								22430
							],
							[
								22558,
								22571
							],
							[
								22887,
								22899
							],
							[
								23162,
								23175
							],
							[
								23280,
								23294
							],
							[
								24187,
								24215
							],
							[
								24331,
								24344
							],
							[
								24456,
								24482
							],
							[
								24677,
								24725
							],
							[
								24773,
								24885
							],
							[
								24990,
								25013
							],
							[
								25157,
								25209
							],
							[
								25303,
								25319
							],
							[
								25403,
								25414
							],
							[
								25527,
								25531
							],
							[
								25810,
								25843
							],
							[
								25957,
								26009
							],
							[
								26183,
								26219
							],
							[
								26376,
								26392
							],
							[
								26410,
								26432
							],
							[
								26545,
								26551
							],
							[
								27913,
								27955
							],
							[
								28150,
								28181
							],
							[
								28231,
								28273
							],
							[
								28393,
								28417
							],
							[
								28637,
								28647
							],
							[
								28700,
								28704
							],
							[
								28743,
								28770
							],
							[
								28817,
								28829
							],
							[
								28899,
								28911
							],
							[
								28974,
								28999
							],
							[
								29044,
								29075
							],
							[
								29086,
								29103
							],
							[
								29244,
								29279
							],
							[
								29327,
								29354
							],
							[
								29445,
								29483
							],
							[
								29692,
								29750
							],
							[
								30016,
								30024
							],
							[
								30123,
								30148
							],
							[
								30233,
								30275
							],
							[
								30409,
								30449
							],
							[
								33378,
								33404
							],
							[
								33423,
								33427
							],
							[
								33514,
								33540
							],
							[
								33774,
								33798
							],
							[
								33991,
								34014
							],
							[
								34116,
								34157
							],
							[
								34306,
								34310
							],
							[
								34351,
								34359
							],
							[
								34388,
								34392
							],
							[
								34767,
								34780
							],
							[
								34833,
								34853
							],
							[
								35049,
								35063
							],
							[
								35090,
								35156
							],
							[
								35158,
								35162
							],
							[
								35320,
								35327
							],
							[
								35419,
								35429
							],
							[
								35540,
								35549
							],
							[
								35655,
								35681
							],
							[
								35814,
								35845
							],
							[
								36014,
								36086
							],
							[
								36215,
								36223
							],
							[
								36725,
								36733
							],
							[
								36762,
								36775
							],
							[
								36886,
								36935
							],
							[
								37037,
								37076
							],
							[
								37101,
								37109
							],
							[
								37141,
								37156
							],
							[
								37249,
								37257
							],
							[
								37311,
								37329
							],
							[
								37554,
								37562
							],
							[
								37600,
								37612
							]
						],
						"symlist":
						[
							"slice = (x, s, e) =>",
							"stringify = v =>",
							"formatNumber = n =>",
							"isNative = fn =>",
							" function util()",
							"util",
							"AsyncFunction = async function x()",
							"GeneratorFunction = function* ()",
							"AsyncGeneratorFunction = async function* ()",
							"isAnyArrayBuffer(v)",
							"isArrayBuffer(v)",
							"isBigInt64Array(v)",
							"isBigUint64Array(v)",
							"isDate(v)",
							"isFloat32Array(v)",
							"isFloat64Array(v)",
							"isInt8Array(v)",
							"isInt16Array(v)",
							"isInt32Array(v)",
							"isMap(v)",
							"isPromise(v)",
							"isProxy(v)",
							"isRegExp(v)",
							"isSet(v)",
							"isSharedArrayBuffer(v)",
							"isUint8Array(v)",
							"isUint8ClampedArray(v)",
							"isUint16Array(v)",
							"isUint32Array(v)",
							"isWeakMap(v)",
							"isWeakSet(v)",
							"isDataView(v)",
							"isBooleanObject(v)",
							"isAsyncFunction(v)",
							"isGeneratorFunction(v)",
							"isAsyncGeneratorFunction(v)",
							"isNumberObject(v)",
							"isBigIntObject(v)",
							"isSymbolObject(v)",
							"isNativeError(v)",
							"isMapIterator(v)",
							"isSetIterator(v)",
							"isStringObject(v)",
							"isArrayBufferView(v)",
							"isArgumentsObject(v)",
							"isBoxedPrimitive(v)",
							"ctor =>",
							"isGeneratorObject(v)",
							"isTypedArray(v)",
							"isModuleNamespaceObject(v)",
							" function isObject(arg)",
							" function SyscallError(syscall, errnum)",
							"SyscallError",
							"SyscallError",
							"get message()",
							" function extendArray(proto = Array.prototype)",
							"get last()",
							"at(index)",
							"clear()",
							"findLastIndex(predicate)",
							"findLast(predicate)",
							"unique()",
							"pushUnique(...args)",
							" function toString(arrayBuf, encoding = 'utf-8')",
							" function toArrayBuffer(str, encoding = 'utf-8')",
							"a =>",
							"(c, i) =>",
							" function btoa(bin)",
							" function atob(asc)",
							" function assert(actual, expected, message)",
							" function escape(str, chars = [])",
							" function quote(str, q = '\"')",
							" function memoize(fn)",
							" (n, ...rest) =>",
							" function once(fn, thisArg, memoFn)",
							" function(...args)",
							"callback =>",
							" function()",
							" function()",
							" function(e)",
							" function atexit(fn)",
							"() =>",
							" function waitFor(ms)",
							"resolve =>",
							" function define(obj, ...args)",
							" function weakAssign(obj, ...args)",
							" function getConstructorChain(obj)",
							" function hasPrototype(obj, proto)",
							" function filter(seq, pred, thisArg)",
							"pred = (el, i) =>",
							" (f, arr = [], length = f.length) =>",
							" (...args) =>",
							"a =>",
							" function* split(buf, ...points)",
							"splitAt = (b, pos, len) =>",
							"unique = (arr, cmp) =>",
							" (el, i, arr) =>",
							"item =>",
							" (el, i, arr) =>",
							"getFunctionArguments = fn =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" (red, green, blue) =>",
							"function getAnsiStyles()",
							"value: (red, green, blue) =>",
							"c =>",
							"value: hex =>",
							"character =>",
							"value: hex =>",
							"value: code =>",
							"value: (red, green, blue) =>",
							"value: hex =>",
							" function randInt(...args)",
							" function randFloat(min, max, rng = Math.random)",
							" function randStr(n, set = '_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', rng = Math.random)",
							" function toBigInt(arg)",
							" function lazyProperty(obj, name, getter, opts = {})",
							"async function()",
							" function()",
							"v =>",
							" function replaceProperty(value)",
							" function lazyProperties(obj, gettersObj, opts = {})",
							" function getOpt(options = {}, args)",
							"findOpt = arg =>",
							"([optname, option]) =>",
							"opt =>",
							" function toUnixTime(dateObj, utc = false)",
							" function unixTime(utc = false)",
							" function fromUnixTime(epoch, utc = false)",
							" function range(...args)",
							" (v, k) =>",
							"n =>",
							" function repeater(n, what)",
							"function* ()",
							"function* ()",
							" function repeat(n, what)",
							" function chunkArray(arr, size)",
							"fn = (a, v, i) =>",
							" function camelize(str, delim = '')",
							" (match, p1, p2, offset) =>",
							" function decamelize(str, delim = '-')",
							" function Location(line, column, pos, file, freeze = true)",
							"Location",
							" function format(...args)",
							" function formatWithOptions(opts, ...args)",
							"function formatWithOptionsInternal(o, v)",
							" function isNumeric(value)",
							"v =>",
							" function functionName(fn)",
							" function className(obj)",
							"isArrowFunction = fn =>",
							" function immutableClass (orig, ...proto)",
							"p =>",
							" ctor =>",
							"ctor",
							"imm = base =>",
							"constructor(...args)",
							"isArray = a =>",
							" function arrayFacade(proto, itemFn = (container, i) => container.",
							"(i))",
							"*keys()",
							"*entries()",
							"*values()",
							"forEach(callback, thisArg)",
							"reduce(callback, accu, thisArg)",
							"Location.prototype.clone = function(freeze = false, withFilename = true)",
							"Location",
							"Location",
							" function* ()",
							"Location.prototype.toString = function(opts = {})",
							"Location.prototype.valueOf = function()",
							"Location",
							" function(hint)",
							"Location",
							" function(n, opts)",
							"Location",
							"get offset()"
						]
					},
					"AQAAAAAAAAAAAAAAkA4AAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					117,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/xml2js.js",
						"symkeys":
						[
							[
								552,
								578
							],
							[
								733,
								763
							],
							[
								1323,
								1353
							],
							[
								1388,
								1419
							],
							[
								1454,
								1467
							],
							[
								1490,
								1518
							],
							[
								3774,
								3794
							],
							[
								3829,
								3835
							],
							[
								4034,
								4049
							],
							[
								4404,
								4413
							],
							[
								4687,
								4693
							],
							[
								4737,
								4743
							]
						],
						"symlist":
						[
							"function readXML(filename)",
							"function WriteFile(name, data)",
							"push_back = (arr, ...items) =>",
							"push_front = (arr, ...items) =>",
							"tail = arr =>",
							"async function main(...args)",
							"({ read, write }) =>",
							"err =>",
							" (arg, pred) =>",
							"(n, p) =>",
							"str =>",
							"obj =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACQDgAAICBzbGljZSA9ICh4LCBzLCBlKSA9PgogIHN0cmluZ2lmeSA9IHYgPT4KICBmb3JtYXROdW1iZXIgPSBuID0+CiAgaXNOYXRpdmUgPSBmbiA9PgogIHV0aWwoKQogIHV0aWwKQXN5bmNGdW5jdGlvbiA9IGZ1bmN0aW9uIHgoKQpHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKigpCkFzeW5jR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbiooKQogIGlzQW55QXJyYXlCdWZmZXIodikKICBpc0FycmF5QnVmZmVyKHYpCiAgaXNCaWdJbnQ2NEFycmF5KHYpCiAgaXNCaWdVaW50NjRBcnJheSh2KQogIGlzRGF0ZSh2KQogIGlzRmxvYXQzMkFycmF5KHYpCiAgaXNGbG9hdDY0QXJyYXkodikKICBpc0ludDhBcnJheSh2KQogIGlzSW50MTZBcnJheSh2KQogIGlzSW50MzJBcnJheSh2KQogIGlzTWFwKHYpCiAgaXNQcm9taXNlKHYpCiAgaXNQcm94eSh2KQogIGlzUmVnRXhwKHYpCiAgaXNTZXQodikKICBpc1NoYXJlZEFycmF5QnVmZmVyKHYpCiAgaXNVaW50OEFycmF5KHYpCiAgaXNVaW50OENsYW1wZWRBcnJheSh2KQogIGlzVWludDE2QXJyYXkodikKICBpc1VpbnQzMkFycmF5KHYpCiAgaXNXZWFrTWFwKHYpCiAgaXNXZWFrU2V0KHYpCiAgaXNEYXRhVmlldyh2KQogIGlzQm9vbGVhbk9iamVjdCh2KQogIGlzQXN5bmNGdW5jdGlvbih2KQogIGlzR2VuZXJhdG9yRnVuY3Rpb24odikKICBpc0FzeW5jR2VuZXJhdG9yRnVuY3Rpb24odikKICBpc051bWJlck9iamVjdCh2KQogIGlzQmlnSW50T2JqZWN0KHYpCiAgaXNTeW1ib2xPYmplY3QodikKICBpc05hdGl2ZUVycm9yKHYpCiAgaXNNYXBJdGVyYXRvcih2KQogIGlzU2V0SXRlcmF0b3IodikKICBpc1N0cmluZ09iamVjdCh2KQogIGlzQXJyYXlCdWZmZXJWaWV3KHYpCiAgaXNBcmd1bWVudHNPYmplY3QodikKICBpc0JveGVkUHJpbWl0aXZlKHYpCiAgY3RvciA9PgogIGlzR2VuZXJhdG9yT2JqZWN0KHYpCiAgaXNUeXBlZEFycmF5KHYpCiAgaXNNb2R1bGVOYW1lc3BhY2VPYmplY3QodikKICBpc09iamVjdChhcmcpClN5c2NhbGxFcnJvcihzeXNjYWxsLCBlcnJudW0pClN5c2NhbGxFcnJvcgpTeXNjYWxsRXJyb3IKICBnZXQgbWVzc2FnZSgpCiAgZXh0ZW5kQXJyYXkocHJvdG8gPSBBcnJheS5wcm90b3R5cGUpCiAgZ2V0IGxhc3QoKQogIGF0KGluZGV4KQogIGNsZWFyKCkKICBmaW5kTGFzdEluZGV4KHByZWRpY2F0ZSkKICBmaW5kTGFzdChwcmVkaWNhdGUpCiAgdW5pcXVlKCkKICBwdXNoVW5pcXVlKC4uLmFyZ3MpCiAgdG9TdHJpbmcoYXJyYXlCdWYsIGVuY29kaW5nID0gJ3V0Zi04JykKICB0b0FycmF5QnVmZmVyKHN0ciwgZW5jb2RpbmcgPSAndXRmLTgnKQogIGEgPT4KKGMsIGkpID0+CiAgYnRvYShiaW4pCiAgYXRvYihhc2MpCiAgYXNzZXJ0KGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpCiAgZXNjYXBlKHN0ciwgY2hhcnMgPSBbXSkKICBxdW90ZShzdHIsIHEgPSAnIicpCiAgbWVtb2l6ZShmbikKICAobiwgLi4ucmVzdCkgPT4KICBvbmNlKGZuLCB0aGlzQXJnLCBtZW1vRm4pCiAgZnVuY3Rpb24oLi4uYXJncykKICBjYWxsYmFjayA9PgogIGZ1bmN0aW9uKCkKICBmdW5jdGlvbigpCiAgZnVuY3Rpb24oZSkKICBhdGV4aXQoZm4pCigpID0+CiAgd2FpdEZvcihtcykKICByZXNvbHZlID0+CiAgZGVmaW5lKG9iaiwgLi4uYXJncykKICB3ZWFrQXNzaWduKG9iaiwgLi4uYXJncykKICBnZXRDb25zdHJ1Y3RvckNoYWluKG9iaikKICBoYXNQcm90b3R5cGUob2JqLCBwcm90bykKICBmaWx0ZXIoc2VxLCBwcmVkLCB0aGlzQXJnKQogIHByZWQgPSAoZWwsIGkpID0+CiAgKGYsIGFyciA9IFtdLCBsZW5ndGggPSBmLmxlbmd0aCkgPT4KICAoLi4uYXJncykgPT4KICBhID0+CiAgc3BsaXQoYnVmLCAuLi5wb2ludHMpCiAgc3BsaXRBdCA9IChiLCBwb3MsIGxlbikgPT4KICB1bmlxdWUgPSAoYXJyLCBjbXApID0+CiAgKGVsLCBpLCBhcnIpID0+CiAgaXRlbSA9PgogIChlbCwgaSwgYXJyKSA9PgogIGdldEZ1bmN0aW9uQXJndW1lbnRzID0gZm4gPT4KICAob2Zmc2V0ID0gMCkgPT4KICBjb2RlID0+CiAgKG9mZnNldCA9IDApID0+CiAgY29kZSA9PgogIChvZmZzZXQgPSAwKSA9PgogIChyZWQsIGdyZWVuLCBibHVlKSA9PgogIGdldEFuc2lTdHlsZXMoKQogIHZhbHVlOiAocmVkLCBncmVlbiwgYmx1ZSkgPT4KICBjID0+CiAgdmFsdWU6IGhleCA9PgogIGNoYXJhY3RlciA9PgogIHZhbHVlOiBoZXggPT4KICB2YWx1ZTogY29kZSA9PgogIHZhbHVlOiAocmVkLCBncmVlbiwgYmx1ZSkgPT4KICB2YWx1ZTogaGV4ID0+CiAgcmFuZEludCguLi5hcmdzKQogIHJhbmRGbG9hdChtaW4sIG1heCwgcm5nID0gTWF0aC5yYW5kb20pCiAgcmFuZFN0cihuLCBzZXQgPSAnXzAxMjM0NTY3ODlBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6Jywgcm5nID0gTWF0aC5yYW5kb20pCiAgdG9CaWdJbnQoYXJnKQogIGxhenlQcm9wZXJ0eShvYmosIG5hbWUsIGdldHRlciwgb3B0cyA9IHt9KQogIGZ1bmN0aW9uKCkKICBmdW5jdGlvbigpCiAgdiA9PgogIHJlcGxhY2VQcm9wZXJ0eSh2YWx1ZSkKICBsYXp5UHJvcGVydGllcyhvYmosIGdldHRlcnNPYmosIG9wdHMgPSB7fSkKICBnZXRPcHQob3B0aW9ucyA9IHt9LCBhcmdzKQogIGZpbmRPcHQgPSBhcmcgPT4KKFtvcHRuYW1lLCBvcHRpb25dKSA9PgogIG9wdCA9PgogIHRvVW5peFRpbWUoZGF0ZU9iaiwgdXRjID0gZmFsc2UpCiAgdW5peFRpbWUodXRjID0gZmFsc2UpCiAgZnJvbVVuaXhUaW1lKGVwb2NoLCB1dGMgPSBmYWxzZSkKICByYW5nZSguLi5hcmdzKQogICh2LCBrKSA9PgogIG4gPT4KICByZXBlYXRlcihuLCB3aGF0KQooKQooKQogIHJlcGVhdChuLCB3aGF0KQogIGNodW5rQXJyYXkoYXJyLCBzaXplKQogIGZuID0gKGEsIHYsIGkpID0+CiAgY2FtZWxpemUoc3RyLCBkZWxpbSA9ICcnKQogIChtYXRjaCwgcDEsIHAyLCBvZmZzZXQpID0+CiAgZGVjYW1lbGl6ZShzdHIsIGRlbGltID0gJy0nKQpMb2NhdGlvbihsaW5lLCBjb2x1bW4sIHBvcywgZmlsZSwgZnJlZXplID0gdHJ1ZSkKTG9jYXRpb24KICBmb3JtYXQoLi4uYXJncykKICBmb3JtYXRXaXRoT3B0aW9ucyhvcHRzLCAuLi5hcmdzKQogIGZvcm1hdFdpdGhPcHRpb25zSW50ZXJuYWwobywgdikKICBpc051bWVyaWModmFsdWUpCiAgdiA9PgogIGZ1bmN0aW9uTmFtZShmbikKICBjbGFzc05hbWUob2JqKQogIGlzQXJyb3dGdW5jdGlvbiA9IGZuID0+CiAgaW1tdXRhYmxlQ2xhc3MgKG9yaWcsIC4uLnByb3RvKQogIHAgPT4KICBjdG9yID0+CiAgY3RvcgogIGltbSA9IGJhc2UgPT4KICBjb25zdHJ1Y3RvciguLi5hcmdzKQogIGlzQXJyYXkgPSBhID0+CiAgYXJyYXlGYWNhZGUocHJvdG8sIGl0ZW1GbiA9IChjb250YWluZXIsIGkpID0+IGNvbnRhaW5lci4KKGkpKQoqa2V5cygpCiplbnRyaWVzKCkKKnZhbHVlcygpCiAgZm9yRWFjaChjYWxsYmFjaywgdGhpc0FyZykKICByZWR1Y2UoY2FsbGJhY2ssIGFjY3UsIHRoaXNBcmcpCkxvY2F0aW9uLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKGZyZWV6ZSA9IGZhbHNlLCB3aXRoRmlsZW5hbWUgPSB0cnVlKQpMb2NhdGlvbgpMb2NhdGlvbgooKQpMb2NhdGlvbi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbihvcHRzID0ge30pCkxvY2F0aW9uLnByb3RvdHlwZS52YWx1ZU9mID0gZnVuY3Rpb24oKQpMb2NhdGlvbgogIGZ1bmN0aW9uKGhpbnQpCkxvY2F0aW9uCiAgZnVuY3Rpb24obiwgb3B0cykKTG9jYXRpb24KICBnZXQgb2Zmc2V0KCkAAAAAAAAAANcAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					118,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/misc.js",
						"symkeys":
						[
							[
								100,
								120
							],
							[
								340,
								356
							],
							[
								410,
								429
							],
							[
								464,
								480
							],
							[
								540,
								556
							],
							[
								577,
								581
							],
							[
								619,
								653
							],
							[
								676,
								708
							],
							[
								731,
								774
							],
							[
								2603,
								2622
							],
							[
								2720,
								2736
							],
							[
								2798,
								2816
							],
							[
								2880,
								2899
							],
							[
								2964,
								2973
							],
							[
								3028,
								3045
							],
							[
								3108,
								3125
							],
							[
								3188,
								3202
							],
							[
								3262,
								3277
							],
							[
								3338,
								3353
							],
							[
								3414,
								3422
							],
							[
								3476,
								3488
							],
							[
								3546,
								3556
							],
							[
								3612,
								3623
							],
							[
								3680,
								3688
							],
							[
								3742,
								3764
							],
							[
								3832,
								3847
							],
							[
								3908,
								3930
							],
							[
								3998,
								4014
							],
							[
								4076,
								4092
							],
							[
								4154,
								4166
							],
							[
								4224,
								4236
							],
							[
								4294,
								4307
							],
							[
								4366,
								4384
							],
							[
								4442,
								4460
							],
							[
								4524,
								4546
							],
							[
								4614,
								4641
							],
							[
								4714,
								4731
							],
							[
								4788,
								4805
							],
							[
								4862,
								4879
							],
							[
								4926,
								4942
							],
							[
								5025,
								5041
							],
							[
								5113,
								5129
							],
							[
								5201,
								5218
							],
							[
								5275,
								5295
							],
							[
								5354,
								5374
							],
							[
								5533,
								5552
							],
							[
								5628,
								5635
							],
							[
								5664,
								5684
							],
							[
								5754,
								5769
							],
							[
								5830,
								5856
							],
							[
								5934,
								5957
							],
							[
								7671,
								7710
							],
							[
								8132,
								8144
							],
							[
								8178,
								8190
							],
							[
								8206,
								8219
							],
							[
								8400,
								8446
							],
							[
								8471,
								8481
							],
							[
								8531,
								8540
							],
							[
								8642,
								8649
							],
							[
								8698,
								8722
							],
							[
								8882,
								8901
							],
							[
								9015,
								9023
							],
							[
								9070,
								9089
							],
							[
								9185,
								9233
							],
							[
								11447,
								11495
							],
							[
								13032,
								13036
							],
							[
								13067,
								13076
							],
							[
								13214,
								13233
							],
							[
								13753,
								13772
							],
							[
								14442,
								14485
							],
							[
								14902,
								14935
							],
							[
								15213,
								15242
							],
							[
								15289,
								15310
							],
							[
								15339,
								15355
							],
							[
								15448,
								15483
							],
							[
								15523,
								15541
							],
							[
								15779,
								15790
							],
							[
								16041,
								16052
							],
							[
								16155,
								16166
							],
							[
								16317,
								16329
							],
							[
								16439,
								16459
							],
							[
								16557,
								16562
							],
							[
								16630,
								16651
							],
							[
								16675,
								16685
							],
							[
								16724,
								16754
							],
							[
								17080,
								17114
							],
							[
								17421,
								17455
							],
							[
								17675,
								17709
							],
							[
								17775,
								17811
							],
							[
								17886,
								17903
							],
							[
								18062,
								18099
							],
							[
								18100,
								18114
							],
							[
								18120,
								18124
							],
							[
								18199,
								18231
							],
							[
								18259,
								18285
							],
							[
								18610,
								18632
							],
							[
								18683,
								18699
							],
							[
								18714,
								18721
							],
							[
								18749,
								18765
							],
							[
								18806,
								18834
							],
							[
								19053,
								19070
							],
							[
								19071,
								19080
							],
							[
								19132,
								19149
							],
							[
								19150,
								19159
							],
							[
								19219,
								19236
							],
							[
								19237,
								19260
							],
							[
								19316,
								19340
							],
							[
								21967,
								21995
							],
							[
								22426,
								22430
							],
							[
								22558,
								22571
							],
							[
								22887,
								22899
							],
							[
								23162,
								23175
							],
							[
								23280,
								23294
							],
							[
								24187,
								24215
							],
							[
								24331,
								24344
							],
							[
								24456,
								24482
							],
							[
								24677,
								24725
							],
							[
								24773,
								24885
							],
							[
								24990,
								25013
							],
							[
								25157,
								25209
							],
							[
								25303,
								25319
							],
							[
								25403,
								25414
							],
							[
								25527,
								25531
							],
							[
								25810,
								25843
							],
							[
								25957,
								26009
							],
							[
								26183,
								26219
							],
							[
								26376,
								26392
							],
							[
								26410,
								26432
							],
							[
								26545,
								26551
							],
							[
								27913,
								27955
							],
							[
								28150,
								28181
							],
							[
								28231,
								28273
							],
							[
								28393,
								28417
							],
							[
								28637,
								28647
							],
							[
								28700,
								28704
							],
							[
								28743,
								28770
							],
							[
								28817,
								28829
							],
							[
								28899,
								28911
							],
							[
								28974,
								28999
							],
							[
								29044,
								29075
							],
							[
								29086,
								29103
							],
							[
								29244,
								29279
							],
							[
								29327,
								29354
							],
							[
								29445,
								29483
							],
							[
								29692,
								29750
							],
							[
								30016,
								30024
							],
							[
								30123,
								30148
							],
							[
								30233,
								30275
							],
							[
								30409,
								30449
							],
							[
								33378,
								33404
							],
							[
								33423,
								33427
							],
							[
								33514,
								33540
							],
							[
								33774,
								33798
							],
							[
								33991,
								34014
							],
							[
								34116,
								34157
							],
							[
								34306,
								34310
							],
							[
								34351,
								34359
							],
							[
								34388,
								34392
							],
							[
								34767,
								34780
							],
							[
								34833,
								34853
							],
							[
								35049,
								35063
							],
							[
								35090,
								35156
							],
							[
								35158,
								35162
							],
							[
								35320,
								35327
							],
							[
								35419,
								35429
							],
							[
								35540,
								35549
							],
							[
								35655,
								35681
							],
							[
								35814,
								35845
							],
							[
								36014,
								36086
							],
							[
								36215,
								36223
							],
							[
								36725,
								36733
							],
							[
								36762,
								36775
							],
							[
								36886,
								36935
							],
							[
								37037,
								37076
							],
							[
								37101,
								37109
							],
							[
								37141,
								37156
							],
							[
								37249,
								37257
							],
							[
								37311,
								37329
							],
							[
								37554,
								37562
							],
							[
								37600,
								37612
							]
						],
						"symlist":
						[
							"slice = (x, s, e) =>",
							"stringify = v =>",
							"formatNumber = n =>",
							"isNative = fn =>",
							" function util()",
							"util",
							"AsyncFunction = async function x()",
							"GeneratorFunction = function* ()",
							"AsyncGeneratorFunction = async function* ()",
							"isAnyArrayBuffer(v)",
							"isArrayBuffer(v)",
							"isBigInt64Array(v)",
							"isBigUint64Array(v)",
							"isDate(v)",
							"isFloat32Array(v)",
							"isFloat64Array(v)",
							"isInt8Array(v)",
							"isInt16Array(v)",
							"isInt32Array(v)",
							"isMap(v)",
							"isPromise(v)",
							"isProxy(v)",
							"isRegExp(v)",
							"isSet(v)",
							"isSharedArrayBuffer(v)",
							"isUint8Array(v)",
							"isUint8ClampedArray(v)",
							"isUint16Array(v)",
							"isUint32Array(v)",
							"isWeakMap(v)",
							"isWeakSet(v)",
							"isDataView(v)",
							"isBooleanObject(v)",
							"isAsyncFunction(v)",
							"isGeneratorFunction(v)",
							"isAsyncGeneratorFunction(v)",
							"isNumberObject(v)",
							"isBigIntObject(v)",
							"isSymbolObject(v)",
							"isNativeError(v)",
							"isMapIterator(v)",
							"isSetIterator(v)",
							"isStringObject(v)",
							"isArrayBufferView(v)",
							"isArgumentsObject(v)",
							"isBoxedPrimitive(v)",
							"ctor =>",
							"isGeneratorObject(v)",
							"isTypedArray(v)",
							"isModuleNamespaceObject(v)",
							" function isObject(arg)",
							" function SyscallError(syscall, errnum)",
							"SyscallError",
							"SyscallError",
							"get message()",
							" function extendArray(proto = Array.prototype)",
							"get last()",
							"at(index)",
							"clear()",
							"findLastIndex(predicate)",
							"findLast(predicate)",
							"unique()",
							"pushUnique(...args)",
							" function toString(arrayBuf, encoding = 'utf-8')",
							" function toArrayBuffer(str, encoding = 'utf-8')",
							"a =>",
							"(c, i) =>",
							" function btoa(bin)",
							" function atob(asc)",
							" function assert(actual, expected, message)",
							" function escape(str, chars = [])",
							" function quote(str, q = '\"')",
							" function memoize(fn)",
							" (n, ...rest) =>",
							" function once(fn, thisArg, memoFn)",
							" function(...args)",
							"callback =>",
							" function()",
							" function()",
							" function(e)",
							" function atexit(fn)",
							"() =>",
							" function waitFor(ms)",
							"resolve =>",
							" function define(obj, ...args)",
							" function weakAssign(obj, ...args)",
							" function getConstructorChain(obj)",
							" function hasPrototype(obj, proto)",
							" function filter(seq, pred, thisArg)",
							"pred = (el, i) =>",
							" (f, arr = [], length = f.length) =>",
							" (...args) =>",
							"a =>",
							" function* split(buf, ...points)",
							"splitAt = (b, pos, len) =>",
							"unique = (arr, cmp) =>",
							" (el, i, arr) =>",
							"item =>",
							" (el, i, arr) =>",
							"getFunctionArguments = fn =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" (red, green, blue) =>",
							"function getAnsiStyles()",
							"value: (red, green, blue) =>",
							"c =>",
							"value: hex =>",
							"character =>",
							"value: hex =>",
							"value: code =>",
							"value: (red, green, blue) =>",
							"value: hex =>",
							" function randInt(...args)",
							" function randFloat(min, max, rng = Math.random)",
							" function randStr(n, set = '_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', rng = Math.random)",
							" function toBigInt(arg)",
							" function lazyProperty(obj, name, getter, opts = {})",
							"async function()",
							" function()",
							"v =>",
							" function replaceProperty(value)",
							" function lazyProperties(obj, gettersObj, opts = {})",
							" function getOpt(options = {}, args)",
							"findOpt = arg =>",
							"([optname, option]) =>",
							"opt =>",
							" function toUnixTime(dateObj, utc = false)",
							" function unixTime(utc = false)",
							" function fromUnixTime(epoch, utc = false)",
							" function range(...args)",
							" (v, k) =>",
							"n =>",
							" function repeater(n, what)",
							"function* ()",
							"function* ()",
							" function repeat(n, what)",
							" function chunkArray(arr, size)",
							"fn = (a, v, i) =>",
							" function camelize(str, delim = '')",
							" (match, p1, p2, offset) =>",
							" function decamelize(str, delim = '-')",
							" function Location(line, column, pos, file, freeze = true)",
							"Location",
							" function format(...args)",
							" function formatWithOptions(opts, ...args)",
							"function formatWithOptionsInternal(o, v)",
							" function isNumeric(value)",
							"v =>",
							" function functionName(fn)",
							" function className(obj)",
							"isArrowFunction = fn =>",
							" function immutableClass (orig, ...proto)",
							"p =>",
							" ctor =>",
							"ctor",
							"imm = base =>",
							"constructor(...args)",
							"isArray = a =>",
							" function arrayFacade(proto, itemFn = (container, i) => container.",
							"(i))",
							"*keys()",
							"*entries()",
							"*values()",
							"forEach(callback, thisArg)",
							"reduce(callback, accu, thisArg)",
							"Location.prototype.clone = function(freeze = false, withFilename = true)",
							"Location",
							"Location",
							" function* ()",
							"Location.prototype.toString = function(opts = {})",
							"Location.prototype.valueOf = function()",
							"Location",
							" function(hint)",
							"Location",
							" function(n, opts)",
							"Location",
							"get offset()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADXAAAAICByZWFkWE1MKGZpbGVuYW1lKQpXcml0ZUZpbGUobmFtZSwgZGF0YSkKICBwdXNoX2JhY2sgPSAoYXJyLCAuLi5pdGVtcykgPT4KICBwdXNoX2Zyb250ID0gKGFyciwgLi4uaXRlbXMpID0+CiAgdGFpbCA9IGFyciA9PgogIG1haW4oLi4uYXJncykKKHsgcmVhZCwgd3JpdGUgfSkgPT4KICBlcnIgPT4KICAoYXJnLCBwcmVkKSA9PgoobiwgcCkgPT4KICBzdHIgPT4KICBvYmogPT4AAAAAAAAAAJAOAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					119,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/xml2react.js",
						"symkeys":
						[
							[
								408,
								462
							],
							[
								578,
								602
							],
							[
								653,
								715
							],
							[
								785,
								816
							],
							[
								952,
								968
							],
							[
								1106,
								1118
							],
							[
								1793,
								1815
							]
						],
						"symlist":
						[
							"function* injectSeparator(iter, sep = ', ', pad = ' ')",
							"function* iterateKV(obj)",
							"function* mapIterator(iter, fn = (elem, i, iter) => undefined)",
							"function* xml2h(xml, depth = 0)",
							"separate = it =>",
							" ([k, v]) =>",
							"function main(...args)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACQDgAAICBzbGljZSA9ICh4LCBzLCBlKSA9PgogIHN0cmluZ2lmeSA9IHYgPT4KICBmb3JtYXROdW1iZXIgPSBuID0+CiAgaXNOYXRpdmUgPSBmbiA9PgogIHV0aWwoKQogIHV0aWwKQXN5bmNGdW5jdGlvbiA9IGZ1bmN0aW9uIHgoKQpHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKigpCkFzeW5jR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbiooKQogIGlzQW55QXJyYXlCdWZmZXIodikKICBpc0FycmF5QnVmZmVyKHYpCiAgaXNCaWdJbnQ2NEFycmF5KHYpCiAgaXNCaWdVaW50NjRBcnJheSh2KQogIGlzRGF0ZSh2KQogIGlzRmxvYXQzMkFycmF5KHYpCiAgaXNGbG9hdDY0QXJyYXkodikKICBpc0ludDhBcnJheSh2KQogIGlzSW50MTZBcnJheSh2KQogIGlzSW50MzJBcnJheSh2KQogIGlzTWFwKHYpCiAgaXNQcm9taXNlKHYpCiAgaXNQcm94eSh2KQogIGlzUmVnRXhwKHYpCiAgaXNTZXQodikKICBpc1NoYXJlZEFycmF5QnVmZmVyKHYpCiAgaXNVaW50OEFycmF5KHYpCiAgaXNVaW50OENsYW1wZWRBcnJheSh2KQogIGlzVWludDE2QXJyYXkodikKICBpc1VpbnQzMkFycmF5KHYpCiAgaXNXZWFrTWFwKHYpCiAgaXNXZWFrU2V0KHYpCiAgaXNEYXRhVmlldyh2KQogIGlzQm9vbGVhbk9iamVjdCh2KQogIGlzQXN5bmNGdW5jdGlvbih2KQogIGlzR2VuZXJhdG9yRnVuY3Rpb24odikKICBpc0FzeW5jR2VuZXJhdG9yRnVuY3Rpb24odikKICBpc051bWJlck9iamVjdCh2KQogIGlzQmlnSW50T2JqZWN0KHYpCiAgaXNTeW1ib2xPYmplY3QodikKICBpc05hdGl2ZUVycm9yKHYpCiAgaXNNYXBJdGVyYXRvcih2KQogIGlzU2V0SXRlcmF0b3IodikKICBpc1N0cmluZ09iamVjdCh2KQogIGlzQXJyYXlCdWZmZXJWaWV3KHYpCiAgaXNBcmd1bWVudHNPYmplY3QodikKICBpc0JveGVkUHJpbWl0aXZlKHYpCiAgY3RvciA9PgogIGlzR2VuZXJhdG9yT2JqZWN0KHYpCiAgaXNUeXBlZEFycmF5KHYpCiAgaXNNb2R1bGVOYW1lc3BhY2VPYmplY3QodikKICBpc09iamVjdChhcmcpClN5c2NhbGxFcnJvcihzeXNjYWxsLCBlcnJudW0pClN5c2NhbGxFcnJvcgpTeXNjYWxsRXJyb3IKICBnZXQgbWVzc2FnZSgpCiAgZXh0ZW5kQXJyYXkocHJvdG8gPSBBcnJheS5wcm90b3R5cGUpCiAgZ2V0IGxhc3QoKQogIGF0KGluZGV4KQogIGNsZWFyKCkKICBmaW5kTGFzdEluZGV4KHByZWRpY2F0ZSkKICBmaW5kTGFzdChwcmVkaWNhdGUpCiAgdW5pcXVlKCkKICBwdXNoVW5pcXVlKC4uLmFyZ3MpCiAgdG9TdHJpbmcoYXJyYXlCdWYsIGVuY29kaW5nID0gJ3V0Zi04JykKICB0b0FycmF5QnVmZmVyKHN0ciwgZW5jb2RpbmcgPSAndXRmLTgnKQogIGEgPT4KKGMsIGkpID0+CiAgYnRvYShiaW4pCiAgYXRvYihhc2MpCiAgYXNzZXJ0KGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpCiAgZXNjYXBlKHN0ciwgY2hhcnMgPSBbXSkKICBxdW90ZShzdHIsIHEgPSAnIicpCiAgbWVtb2l6ZShmbikKICAobiwgLi4ucmVzdCkgPT4KICBvbmNlKGZuLCB0aGlzQXJnLCBtZW1vRm4pCiAgZnVuY3Rpb24oLi4uYXJncykKICBjYWxsYmFjayA9PgogIGZ1bmN0aW9uKCkKICBmdW5jdGlvbigpCiAgZnVuY3Rpb24oZSkKICBhdGV4aXQoZm4pCigpID0+CiAgd2FpdEZvcihtcykKICByZXNvbHZlID0+CiAgZGVmaW5lKG9iaiwgLi4uYXJncykKICB3ZWFrQXNzaWduKG9iaiwgLi4uYXJncykKICBnZXRDb25zdHJ1Y3RvckNoYWluKG9iaikKICBoYXNQcm90b3R5cGUob2JqLCBwcm90bykKICBmaWx0ZXIoc2VxLCBwcmVkLCB0aGlzQXJnKQogIHByZWQgPSAoZWwsIGkpID0+CiAgKGYsIGFyciA9IFtdLCBsZW5ndGggPSBmLmxlbmd0aCkgPT4KICAoLi4uYXJncykgPT4KICBhID0+CiAgc3BsaXQoYnVmLCAuLi5wb2ludHMpCiAgc3BsaXRBdCA9IChiLCBwb3MsIGxlbikgPT4KICB1bmlxdWUgPSAoYXJyLCBjbXApID0+CiAgKGVsLCBpLCBhcnIpID0+CiAgaXRlbSA9PgogIChlbCwgaSwgYXJyKSA9PgogIGdldEZ1bmN0aW9uQXJndW1lbnRzID0gZm4gPT4KICAob2Zmc2V0ID0gMCkgPT4KICBjb2RlID0+CiAgKG9mZnNldCA9IDApID0+CiAgY29kZSA9PgogIChvZmZzZXQgPSAwKSA9PgogIChyZWQsIGdyZWVuLCBibHVlKSA9PgogIGdldEFuc2lTdHlsZXMoKQogIHZhbHVlOiAocmVkLCBncmVlbiwgYmx1ZSkgPT4KICBjID0+CiAgdmFsdWU6IGhleCA9PgogIGNoYXJhY3RlciA9PgogIHZhbHVlOiBoZXggPT4KICB2YWx1ZTogY29kZSA9PgogIHZhbHVlOiAocmVkLCBncmVlbiwgYmx1ZSkgPT4KICB2YWx1ZTogaGV4ID0+CiAgcmFuZEludCguLi5hcmdzKQogIHJhbmRGbG9hdChtaW4sIG1heCwgcm5nID0gTWF0aC5yYW5kb20pCiAgcmFuZFN0cihuLCBzZXQgPSAnXzAxMjM0NTY3ODlBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6Jywgcm5nID0gTWF0aC5yYW5kb20pCiAgdG9CaWdJbnQoYXJnKQogIGxhenlQcm9wZXJ0eShvYmosIG5hbWUsIGdldHRlciwgb3B0cyA9IHt9KQogIGZ1bmN0aW9uKCkKICBmdW5jdGlvbigpCiAgdiA9PgogIHJlcGxhY2VQcm9wZXJ0eSh2YWx1ZSkKICBsYXp5UHJvcGVydGllcyhvYmosIGdldHRlcnNPYmosIG9wdHMgPSB7fSkKICBnZXRPcHQob3B0aW9ucyA9IHt9LCBhcmdzKQogIGZpbmRPcHQgPSBhcmcgPT4KKFtvcHRuYW1lLCBvcHRpb25dKSA9PgogIG9wdCA9PgogIHRvVW5peFRpbWUoZGF0ZU9iaiwgdXRjID0gZmFsc2UpCiAgdW5peFRpbWUodXRjID0gZmFsc2UpCiAgZnJvbVVuaXhUaW1lKGVwb2NoLCB1dGMgPSBmYWxzZSkKICByYW5nZSguLi5hcmdzKQogICh2LCBrKSA9PgogIG4gPT4KICByZXBlYXRlcihuLCB3aGF0KQooKQooKQogIHJlcGVhdChuLCB3aGF0KQogIGNodW5rQXJyYXkoYXJyLCBzaXplKQogIGZuID0gKGEsIHYsIGkpID0+CiAgY2FtZWxpemUoc3RyLCBkZWxpbSA9ICcnKQogIChtYXRjaCwgcDEsIHAyLCBvZmZzZXQpID0+CiAgZGVjYW1lbGl6ZShzdHIsIGRlbGltID0gJy0nKQpMb2NhdGlvbihsaW5lLCBjb2x1bW4sIHBvcywgZmlsZSwgZnJlZXplID0gdHJ1ZSkKTG9jYXRpb24KICBmb3JtYXQoLi4uYXJncykKICBmb3JtYXRXaXRoT3B0aW9ucyhvcHRzLCAuLi5hcmdzKQogIGZvcm1hdFdpdGhPcHRpb25zSW50ZXJuYWwobywgdikKICBpc051bWVyaWModmFsdWUpCiAgdiA9PgogIGZ1bmN0aW9uTmFtZShmbikKICBjbGFzc05hbWUob2JqKQogIGlzQXJyb3dGdW5jdGlvbiA9IGZuID0+CiAgaW1tdXRhYmxlQ2xhc3MgKG9yaWcsIC4uLnByb3RvKQogIHAgPT4KICBjdG9yID0+CiAgY3RvcgogIGltbSA9IGJhc2UgPT4KICBjb25zdHJ1Y3RvciguLi5hcmdzKQogIGlzQXJyYXkgPSBhID0+CiAgYXJyYXlGYWNhZGUocHJvdG8sIGl0ZW1GbiA9IChjb250YWluZXIsIGkpID0+IGNvbnRhaW5lci4KKGkpKQoqa2V5cygpCiplbnRyaWVzKCkKKnZhbHVlcygpCiAgZm9yRWFjaChjYWxsYmFjaywgdGhpc0FyZykKICByZWR1Y2UoY2FsbGJhY2ssIGFjY3UsIHRoaXNBcmcpCkxvY2F0aW9uLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKGZyZWV6ZSA9IGZhbHNlLCB3aXRoRmlsZW5hbWUgPSB0cnVlKQpMb2NhdGlvbgpMb2NhdGlvbgooKQpMb2NhdGlvbi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbihvcHRzID0ge30pCkxvY2F0aW9uLnByb3RvdHlwZS52YWx1ZU9mID0gZnVuY3Rpb24oKQpMb2NhdGlvbgogIGZ1bmN0aW9uKGhpbnQpCkxvY2F0aW9uCiAgZnVuY3Rpb24obiwgb3B0cykKTG9jYXRpb24KICBnZXQgb2Zmc2V0KCkAAAAAAAAAAL8AAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					120,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/misc.js",
						"symkeys":
						[
							[
								100,
								120
							],
							[
								340,
								356
							],
							[
								410,
								429
							],
							[
								464,
								480
							],
							[
								540,
								556
							],
							[
								577,
								581
							],
							[
								619,
								653
							],
							[
								676,
								708
							],
							[
								731,
								774
							],
							[
								2603,
								2622
							],
							[
								2720,
								2736
							],
							[
								2798,
								2816
							],
							[
								2880,
								2899
							],
							[
								2964,
								2973
							],
							[
								3028,
								3045
							],
							[
								3108,
								3125
							],
							[
								3188,
								3202
							],
							[
								3262,
								3277
							],
							[
								3338,
								3353
							],
							[
								3414,
								3422
							],
							[
								3476,
								3488
							],
							[
								3546,
								3556
							],
							[
								3612,
								3623
							],
							[
								3680,
								3688
							],
							[
								3742,
								3764
							],
							[
								3832,
								3847
							],
							[
								3908,
								3930
							],
							[
								3998,
								4014
							],
							[
								4076,
								4092
							],
							[
								4154,
								4166
							],
							[
								4224,
								4236
							],
							[
								4294,
								4307
							],
							[
								4366,
								4384
							],
							[
								4442,
								4460
							],
							[
								4524,
								4546
							],
							[
								4614,
								4641
							],
							[
								4714,
								4731
							],
							[
								4788,
								4805
							],
							[
								4862,
								4879
							],
							[
								4926,
								4942
							],
							[
								5025,
								5041
							],
							[
								5113,
								5129
							],
							[
								5201,
								5218
							],
							[
								5275,
								5295
							],
							[
								5354,
								5374
							],
							[
								5533,
								5552
							],
							[
								5628,
								5635
							],
							[
								5664,
								5684
							],
							[
								5754,
								5769
							],
							[
								5830,
								5856
							],
							[
								5934,
								5957
							],
							[
								7671,
								7710
							],
							[
								8132,
								8144
							],
							[
								8178,
								8190
							],
							[
								8206,
								8219
							],
							[
								8400,
								8446
							],
							[
								8471,
								8481
							],
							[
								8531,
								8540
							],
							[
								8642,
								8649
							],
							[
								8698,
								8722
							],
							[
								8882,
								8901
							],
							[
								9015,
								9023
							],
							[
								9070,
								9089
							],
							[
								9185,
								9233
							],
							[
								11447,
								11495
							],
							[
								13032,
								13036
							],
							[
								13067,
								13076
							],
							[
								13214,
								13233
							],
							[
								13753,
								13772
							],
							[
								14442,
								14485
							],
							[
								14902,
								14935
							],
							[
								15213,
								15242
							],
							[
								15289,
								15310
							],
							[
								15339,
								15355
							],
							[
								15448,
								15483
							],
							[
								15523,
								15541
							],
							[
								15779,
								15790
							],
							[
								16041,
								16052
							],
							[
								16155,
								16166
							],
							[
								16317,
								16329
							],
							[
								16439,
								16459
							],
							[
								16557,
								16562
							],
							[
								16630,
								16651
							],
							[
								16675,
								16685
							],
							[
								16724,
								16754
							],
							[
								17080,
								17114
							],
							[
								17421,
								17455
							],
							[
								17675,
								17709
							],
							[
								17775,
								17811
							],
							[
								17886,
								17903
							],
							[
								18062,
								18099
							],
							[
								18100,
								18114
							],
							[
								18120,
								18124
							],
							[
								18199,
								18231
							],
							[
								18259,
								18285
							],
							[
								18610,
								18632
							],
							[
								18683,
								18699
							],
							[
								18714,
								18721
							],
							[
								18749,
								18765
							],
							[
								18806,
								18834
							],
							[
								19053,
								19070
							],
							[
								19071,
								19080
							],
							[
								19132,
								19149
							],
							[
								19150,
								19159
							],
							[
								19219,
								19236
							],
							[
								19237,
								19260
							],
							[
								19316,
								19340
							],
							[
								21967,
								21995
							],
							[
								22426,
								22430
							],
							[
								22558,
								22571
							],
							[
								22887,
								22899
							],
							[
								23162,
								23175
							],
							[
								23280,
								23294
							],
							[
								24187,
								24215
							],
							[
								24331,
								24344
							],
							[
								24456,
								24482
							],
							[
								24677,
								24725
							],
							[
								24773,
								24885
							],
							[
								24990,
								25013
							],
							[
								25157,
								25209
							],
							[
								25303,
								25319
							],
							[
								25403,
								25414
							],
							[
								25527,
								25531
							],
							[
								25810,
								25843
							],
							[
								25957,
								26009
							],
							[
								26183,
								26219
							],
							[
								26376,
								26392
							],
							[
								26410,
								26432
							],
							[
								26545,
								26551
							],
							[
								27913,
								27955
							],
							[
								28150,
								28181
							],
							[
								28231,
								28273
							],
							[
								28393,
								28417
							],
							[
								28637,
								28647
							],
							[
								28700,
								28704
							],
							[
								28743,
								28770
							],
							[
								28817,
								28829
							],
							[
								28899,
								28911
							],
							[
								28974,
								28999
							],
							[
								29044,
								29075
							],
							[
								29086,
								29103
							],
							[
								29244,
								29279
							],
							[
								29327,
								29354
							],
							[
								29445,
								29483
							],
							[
								29692,
								29750
							],
							[
								30016,
								30024
							],
							[
								30123,
								30148
							],
							[
								30233,
								30275
							],
							[
								30409,
								30449
							],
							[
								33378,
								33404
							],
							[
								33423,
								33427
							],
							[
								33514,
								33540
							],
							[
								33774,
								33798
							],
							[
								33991,
								34014
							],
							[
								34116,
								34157
							],
							[
								34306,
								34310
							],
							[
								34351,
								34359
							],
							[
								34388,
								34392
							],
							[
								34767,
								34780
							],
							[
								34833,
								34853
							],
							[
								35049,
								35063
							],
							[
								35090,
								35156
							],
							[
								35158,
								35162
							],
							[
								35320,
								35327
							],
							[
								35419,
								35429
							],
							[
								35540,
								35549
							],
							[
								35655,
								35681
							],
							[
								35814,
								35845
							],
							[
								36014,
								36086
							],
							[
								36215,
								36223
							],
							[
								36725,
								36733
							],
							[
								36762,
								36775
							],
							[
								36886,
								36935
							],
							[
								37037,
								37076
							],
							[
								37101,
								37109
							],
							[
								37141,
								37156
							],
							[
								37249,
								37257
							],
							[
								37311,
								37329
							],
							[
								37554,
								37562
							],
							[
								37600,
								37612
							]
						],
						"symlist":
						[
							"slice = (x, s, e) =>",
							"stringify = v =>",
							"formatNumber = n =>",
							"isNative = fn =>",
							" function util()",
							"util",
							"AsyncFunction = async function x()",
							"GeneratorFunction = function* ()",
							"AsyncGeneratorFunction = async function* ()",
							"isAnyArrayBuffer(v)",
							"isArrayBuffer(v)",
							"isBigInt64Array(v)",
							"isBigUint64Array(v)",
							"isDate(v)",
							"isFloat32Array(v)",
							"isFloat64Array(v)",
							"isInt8Array(v)",
							"isInt16Array(v)",
							"isInt32Array(v)",
							"isMap(v)",
							"isPromise(v)",
							"isProxy(v)",
							"isRegExp(v)",
							"isSet(v)",
							"isSharedArrayBuffer(v)",
							"isUint8Array(v)",
							"isUint8ClampedArray(v)",
							"isUint16Array(v)",
							"isUint32Array(v)",
							"isWeakMap(v)",
							"isWeakSet(v)",
							"isDataView(v)",
							"isBooleanObject(v)",
							"isAsyncFunction(v)",
							"isGeneratorFunction(v)",
							"isAsyncGeneratorFunction(v)",
							"isNumberObject(v)",
							"isBigIntObject(v)",
							"isSymbolObject(v)",
							"isNativeError(v)",
							"isMapIterator(v)",
							"isSetIterator(v)",
							"isStringObject(v)",
							"isArrayBufferView(v)",
							"isArgumentsObject(v)",
							"isBoxedPrimitive(v)",
							"ctor =>",
							"isGeneratorObject(v)",
							"isTypedArray(v)",
							"isModuleNamespaceObject(v)",
							" function isObject(arg)",
							" function SyscallError(syscall, errnum)",
							"SyscallError",
							"SyscallError",
							"get message()",
							" function extendArray(proto = Array.prototype)",
							"get last()",
							"at(index)",
							"clear()",
							"findLastIndex(predicate)",
							"findLast(predicate)",
							"unique()",
							"pushUnique(...args)",
							" function toString(arrayBuf, encoding = 'utf-8')",
							" function toArrayBuffer(str, encoding = 'utf-8')",
							"a =>",
							"(c, i) =>",
							" function btoa(bin)",
							" function atob(asc)",
							" function assert(actual, expected, message)",
							" function escape(str, chars = [])",
							" function quote(str, q = '\"')",
							" function memoize(fn)",
							" (n, ...rest) =>",
							" function once(fn, thisArg, memoFn)",
							" function(...args)",
							"callback =>",
							" function()",
							" function()",
							" function(e)",
							" function atexit(fn)",
							"() =>",
							" function waitFor(ms)",
							"resolve =>",
							" function define(obj, ...args)",
							" function weakAssign(obj, ...args)",
							" function getConstructorChain(obj)",
							" function hasPrototype(obj, proto)",
							" function filter(seq, pred, thisArg)",
							"pred = (el, i) =>",
							" (f, arr = [], length = f.length) =>",
							" (...args) =>",
							"a =>",
							" function* split(buf, ...points)",
							"splitAt = (b, pos, len) =>",
							"unique = (arr, cmp) =>",
							" (el, i, arr) =>",
							"item =>",
							" (el, i, arr) =>",
							"getFunctionArguments = fn =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" (red, green, blue) =>",
							"function getAnsiStyles()",
							"value: (red, green, blue) =>",
							"c =>",
							"value: hex =>",
							"character =>",
							"value: hex =>",
							"value: code =>",
							"value: (red, green, blue) =>",
							"value: hex =>",
							" function randInt(...args)",
							" function randFloat(min, max, rng = Math.random)",
							" function randStr(n, set = '_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', rng = Math.random)",
							" function toBigInt(arg)",
							" function lazyProperty(obj, name, getter, opts = {})",
							"async function()",
							" function()",
							"v =>",
							" function replaceProperty(value)",
							" function lazyProperties(obj, gettersObj, opts = {})",
							" function getOpt(options = {}, args)",
							"findOpt = arg =>",
							"([optname, option]) =>",
							"opt =>",
							" function toUnixTime(dateObj, utc = false)",
							" function unixTime(utc = false)",
							" function fromUnixTime(epoch, utc = false)",
							" function range(...args)",
							" (v, k) =>",
							"n =>",
							" function repeater(n, what)",
							"function* ()",
							"function* ()",
							" function repeat(n, what)",
							" function chunkArray(arr, size)",
							"fn = (a, v, i) =>",
							" function camelize(str, delim = '')",
							" (match, p1, p2, offset) =>",
							" function decamelize(str, delim = '-')",
							" function Location(line, column, pos, file, freeze = true)",
							"Location",
							" function format(...args)",
							" function formatWithOptions(opts, ...args)",
							"function formatWithOptionsInternal(o, v)",
							" function isNumeric(value)",
							"v =>",
							" function functionName(fn)",
							" function className(obj)",
							"isArrowFunction = fn =>",
							" function immutableClass (orig, ...proto)",
							"p =>",
							" ctor =>",
							"ctor",
							"imm = base =>",
							"constructor(...args)",
							"isArray = a =>",
							" function arrayFacade(proto, itemFn = (container, i) => container.",
							"(i))",
							"*keys()",
							"*entries()",
							"*values()",
							"forEach(callback, thisArg)",
							"reduce(callback, accu, thisArg)",
							"Location.prototype.clone = function(freeze = false, withFilename = true)",
							"Location",
							"Location",
							" function* ()",
							"Location.prototype.toString = function(opts = {})",
							"Location.prototype.valueOf = function()",
							"Location",
							" function(hint)",
							"Location",
							" function(n, opts)",
							"Location",
							"get offset()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC/AAAAICBpbmplY3RTZXBhcmF0b3IoaXRlciwgc2VwID0gJywgJywgcGFkID0gJyAnKQogIGl0ZXJhdGVLVihvYmopCiAgbWFwSXRlcmF0b3IoaXRlciwgZm4gPSAoZWxlbSwgaSwgaXRlcikgPT4gdW5kZWZpbmVkKQogIHhtbDJoKHhtbCwgZGVwdGggPSAwKQogIHNlcGFyYXRlID0gaXQgPT4KICAoW2ssIHZdKSA9PgogIG1haW4oLi4uYXJncykAAAAAAAAAAJAOAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					121,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload.html",
						"symkeys":
						[
							[
								444,
								448
							]
						],
						"symlist":
						[
							"file"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACQDgAAICBzbGljZSA9ICh4LCBzLCBlKSA9PgogIHN0cmluZ2lmeSA9IHYgPT4KICBmb3JtYXROdW1iZXIgPSBuID0+CiAgaXNOYXRpdmUgPSBmbiA9PgogIHV0aWwoKQogIHV0aWwKQXN5bmNGdW5jdGlvbiA9IGZ1bmN0aW9uIHgoKQpHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKigpCkFzeW5jR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbiooKQogIGlzQW55QXJyYXlCdWZmZXIodikKICBpc0FycmF5QnVmZmVyKHYpCiAgaXNCaWdJbnQ2NEFycmF5KHYpCiAgaXNCaWdVaW50NjRBcnJheSh2KQogIGlzRGF0ZSh2KQogIGlzRmxvYXQzMkFycmF5KHYpCiAgaXNGbG9hdDY0QXJyYXkodikKICBpc0ludDhBcnJheSh2KQogIGlzSW50MTZBcnJheSh2KQogIGlzSW50MzJBcnJheSh2KQogIGlzTWFwKHYpCiAgaXNQcm9taXNlKHYpCiAgaXNQcm94eSh2KQogIGlzUmVnRXhwKHYpCiAgaXNTZXQodikKICBpc1NoYXJlZEFycmF5QnVmZmVyKHYpCiAgaXNVaW50OEFycmF5KHYpCiAgaXNVaW50OENsYW1wZWRBcnJheSh2KQogIGlzVWludDE2QXJyYXkodikKICBpc1VpbnQzMkFycmF5KHYpCiAgaXNXZWFrTWFwKHYpCiAgaXNXZWFrU2V0KHYpCiAgaXNEYXRhVmlldyh2KQogIGlzQm9vbGVhbk9iamVjdCh2KQogIGlzQXN5bmNGdW5jdGlvbih2KQogIGlzR2VuZXJhdG9yRnVuY3Rpb24odikKICBpc0FzeW5jR2VuZXJhdG9yRnVuY3Rpb24odikKICBpc051bWJlck9iamVjdCh2KQogIGlzQmlnSW50T2JqZWN0KHYpCiAgaXNTeW1ib2xPYmplY3QodikKICBpc05hdGl2ZUVycm9yKHYpCiAgaXNNYXBJdGVyYXRvcih2KQogIGlzU2V0SXRlcmF0b3IodikKICBpc1N0cmluZ09iamVjdCh2KQogIGlzQXJyYXlCdWZmZXJWaWV3KHYpCiAgaXNBcmd1bWVudHNPYmplY3QodikKICBpc0JveGVkUHJpbWl0aXZlKHYpCiAgY3RvciA9PgogIGlzR2VuZXJhdG9yT2JqZWN0KHYpCiAgaXNUeXBlZEFycmF5KHYpCiAgaXNNb2R1bGVOYW1lc3BhY2VPYmplY3QodikKICBpc09iamVjdChhcmcpClN5c2NhbGxFcnJvcihzeXNjYWxsLCBlcnJudW0pClN5c2NhbGxFcnJvcgpTeXNjYWxsRXJyb3IKICBnZXQgbWVzc2FnZSgpCiAgZXh0ZW5kQXJyYXkocHJvdG8gPSBBcnJheS5wcm90b3R5cGUpCiAgZ2V0IGxhc3QoKQogIGF0KGluZGV4KQogIGNsZWFyKCkKICBmaW5kTGFzdEluZGV4KHByZWRpY2F0ZSkKICBmaW5kTGFzdChwcmVkaWNhdGUpCiAgdW5pcXVlKCkKICBwdXNoVW5pcXVlKC4uLmFyZ3MpCiAgdG9TdHJpbmcoYXJyYXlCdWYsIGVuY29kaW5nID0gJ3V0Zi04JykKICB0b0FycmF5QnVmZmVyKHN0ciwgZW5jb2RpbmcgPSAndXRmLTgnKQogIGEgPT4KKGMsIGkpID0+CiAgYnRvYShiaW4pCiAgYXRvYihhc2MpCiAgYXNzZXJ0KGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpCiAgZXNjYXBlKHN0ciwgY2hhcnMgPSBbXSkKICBxdW90ZShzdHIsIHEgPSAnIicpCiAgbWVtb2l6ZShmbikKICAobiwgLi4ucmVzdCkgPT4KICBvbmNlKGZuLCB0aGlzQXJnLCBtZW1vRm4pCiAgZnVuY3Rpb24oLi4uYXJncykKICBjYWxsYmFjayA9PgogIGZ1bmN0aW9uKCkKICBmdW5jdGlvbigpCiAgZnVuY3Rpb24oZSkKICBhdGV4aXQoZm4pCigpID0+CiAgd2FpdEZvcihtcykKICByZXNvbHZlID0+CiAgZGVmaW5lKG9iaiwgLi4uYXJncykKICB3ZWFrQXNzaWduKG9iaiwgLi4uYXJncykKICBnZXRDb25zdHJ1Y3RvckNoYWluKG9iaikKICBoYXNQcm90b3R5cGUob2JqLCBwcm90bykKICBmaWx0ZXIoc2VxLCBwcmVkLCB0aGlzQXJnKQogIHByZWQgPSAoZWwsIGkpID0+CiAgKGYsIGFyciA9IFtdLCBsZW5ndGggPSBmLmxlbmd0aCkgPT4KICAoLi4uYXJncykgPT4KICBhID0+CiAgc3BsaXQoYnVmLCAuLi5wb2ludHMpCiAgc3BsaXRBdCA9IChiLCBwb3MsIGxlbikgPT4KICB1bmlxdWUgPSAoYXJyLCBjbXApID0+CiAgKGVsLCBpLCBhcnIpID0+CiAgaXRlbSA9PgogIChlbCwgaSwgYXJyKSA9PgogIGdldEZ1bmN0aW9uQXJndW1lbnRzID0gZm4gPT4KICAob2Zmc2V0ID0gMCkgPT4KICBjb2RlID0+CiAgKG9mZnNldCA9IDApID0+CiAgY29kZSA9PgogIChvZmZzZXQgPSAwKSA9PgogIChyZWQsIGdyZWVuLCBibHVlKSA9PgogIGdldEFuc2lTdHlsZXMoKQogIHZhbHVlOiAocmVkLCBncmVlbiwgYmx1ZSkgPT4KICBjID0+CiAgdmFsdWU6IGhleCA9PgogIGNoYXJhY3RlciA9PgogIHZhbHVlOiBoZXggPT4KICB2YWx1ZTogY29kZSA9PgogIHZhbHVlOiAocmVkLCBncmVlbiwgYmx1ZSkgPT4KICB2YWx1ZTogaGV4ID0+CiAgcmFuZEludCguLi5hcmdzKQogIHJhbmRGbG9hdChtaW4sIG1heCwgcm5nID0gTWF0aC5yYW5kb20pCiAgcmFuZFN0cihuLCBzZXQgPSAnXzAxMjM0NTY3ODlBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6Jywgcm5nID0gTWF0aC5yYW5kb20pCiAgdG9CaWdJbnQoYXJnKQogIGxhenlQcm9wZXJ0eShvYmosIG5hbWUsIGdldHRlciwgb3B0cyA9IHt9KQogIGZ1bmN0aW9uKCkKICBmdW5jdGlvbigpCiAgdiA9PgogIHJlcGxhY2VQcm9wZXJ0eSh2YWx1ZSkKICBsYXp5UHJvcGVydGllcyhvYmosIGdldHRlcnNPYmosIG9wdHMgPSB7fSkKICBnZXRPcHQob3B0aW9ucyA9IHt9LCBhcmdzKQogIGZpbmRPcHQgPSBhcmcgPT4KKFtvcHRuYW1lLCBvcHRpb25dKSA9PgogIG9wdCA9PgogIHRvVW5peFRpbWUoZGF0ZU9iaiwgdXRjID0gZmFsc2UpCiAgdW5peFRpbWUodXRjID0gZmFsc2UpCiAgZnJvbVVuaXhUaW1lKGVwb2NoLCB1dGMgPSBmYWxzZSkKICByYW5nZSguLi5hcmdzKQogICh2LCBrKSA9PgogIG4gPT4KICByZXBlYXRlcihuLCB3aGF0KQooKQooKQogIHJlcGVhdChuLCB3aGF0KQogIGNodW5rQXJyYXkoYXJyLCBzaXplKQogIGZuID0gKGEsIHYsIGkpID0+CiAgY2FtZWxpemUoc3RyLCBkZWxpbSA9ICcnKQogIChtYXRjaCwgcDEsIHAyLCBvZmZzZXQpID0+CiAgZGVjYW1lbGl6ZShzdHIsIGRlbGltID0gJy0nKQpMb2NhdGlvbihsaW5lLCBjb2x1bW4sIHBvcywgZmlsZSwgZnJlZXplID0gdHJ1ZSkKTG9jYXRpb24KICBmb3JtYXQoLi4uYXJncykKICBmb3JtYXRXaXRoT3B0aW9ucyhvcHRzLCAuLi5hcmdzKQogIGZvcm1hdFdpdGhPcHRpb25zSW50ZXJuYWwobywgdikKICBpc051bWVyaWModmFsdWUpCiAgdiA9PgogIGZ1bmN0aW9uTmFtZShmbikKICBjbGFzc05hbWUob2JqKQogIGlzQXJyb3dGdW5jdGlvbiA9IGZuID0+CiAgaW1tdXRhYmxlQ2xhc3MgKG9yaWcsIC4uLnByb3RvKQogIHAgPT4KICBjdG9yID0+CiAgY3RvcgogIGltbSA9IGJhc2UgPT4KICBjb25zdHJ1Y3RvciguLi5hcmdzKQogIGlzQXJyYXkgPSBhID0+CiAgYXJyYXlGYWNhZGUocHJvdG8sIGl0ZW1GbiA9IChjb250YWluZXIsIGkpID0+IGNvbnRhaW5lci4KKGkpKQoqa2V5cygpCiplbnRyaWVzKCkKKnZhbHVlcygpCiAgZm9yRWFjaChjYWxsYmFjaywgdGhpc0FyZykKICByZWR1Y2UoY2FsbGJhY2ssIGFjY3UsIHRoaXNBcmcpCkxvY2F0aW9uLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKGZyZWV6ZSA9IGZhbHNlLCB3aXRoRmlsZW5hbWUgPSB0cnVlKQpMb2NhdGlvbgpMb2NhdGlvbgooKQpMb2NhdGlvbi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbihvcHRzID0ge30pCkxvY2F0aW9uLnByb3RvdHlwZS52YWx1ZU9mID0gZnVuY3Rpb24oKQpMb2NhdGlvbgogIGZ1bmN0aW9uKGhpbnQpCkxvY2F0aW9uCiAgZnVuY3Rpb24obiwgb3B0cykKTG9jYXRpb24KICBnZXQgb2Zmc2V0KCkAAAAAAAAAAAYAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					122,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/misc.js",
						"symkeys":
						[
							[
								100,
								120
							],
							[
								340,
								356
							],
							[
								410,
								429
							],
							[
								464,
								480
							],
							[
								540,
								556
							],
							[
								577,
								581
							],
							[
								619,
								653
							],
							[
								676,
								708
							],
							[
								731,
								774
							],
							[
								2603,
								2622
							],
							[
								2720,
								2736
							],
							[
								2798,
								2816
							],
							[
								2880,
								2899
							],
							[
								2964,
								2973
							],
							[
								3028,
								3045
							],
							[
								3108,
								3125
							],
							[
								3188,
								3202
							],
							[
								3262,
								3277
							],
							[
								3338,
								3353
							],
							[
								3414,
								3422
							],
							[
								3476,
								3488
							],
							[
								3546,
								3556
							],
							[
								3612,
								3623
							],
							[
								3680,
								3688
							],
							[
								3742,
								3764
							],
							[
								3832,
								3847
							],
							[
								3908,
								3930
							],
							[
								3998,
								4014
							],
							[
								4076,
								4092
							],
							[
								4154,
								4166
							],
							[
								4224,
								4236
							],
							[
								4294,
								4307
							],
							[
								4366,
								4384
							],
							[
								4442,
								4460
							],
							[
								4524,
								4546
							],
							[
								4614,
								4641
							],
							[
								4714,
								4731
							],
							[
								4788,
								4805
							],
							[
								4862,
								4879
							],
							[
								4926,
								4942
							],
							[
								5025,
								5041
							],
							[
								5113,
								5129
							],
							[
								5201,
								5218
							],
							[
								5275,
								5295
							],
							[
								5354,
								5374
							],
							[
								5533,
								5552
							],
							[
								5628,
								5635
							],
							[
								5664,
								5684
							],
							[
								5754,
								5769
							],
							[
								5830,
								5856
							],
							[
								5934,
								5957
							],
							[
								7671,
								7710
							],
							[
								8132,
								8144
							],
							[
								8178,
								8190
							],
							[
								8206,
								8219
							],
							[
								8400,
								8446
							],
							[
								8471,
								8481
							],
							[
								8531,
								8540
							],
							[
								8642,
								8649
							],
							[
								8698,
								8722
							],
							[
								8882,
								8901
							],
							[
								9015,
								9023
							],
							[
								9070,
								9089
							],
							[
								9185,
								9233
							],
							[
								11447,
								11495
							],
							[
								13032,
								13036
							],
							[
								13067,
								13076
							],
							[
								13214,
								13233
							],
							[
								13753,
								13772
							],
							[
								14442,
								14485
							],
							[
								14902,
								14935
							],
							[
								15213,
								15242
							],
							[
								15289,
								15310
							],
							[
								15339,
								15355
							],
							[
								15448,
								15483
							],
							[
								15523,
								15541
							],
							[
								15779,
								15790
							],
							[
								16041,
								16052
							],
							[
								16155,
								16166
							],
							[
								16317,
								16329
							],
							[
								16439,
								16459
							],
							[
								16557,
								16562
							],
							[
								16630,
								16651
							],
							[
								16675,
								16685
							],
							[
								16724,
								16754
							],
							[
								17080,
								17114
							],
							[
								17421,
								17455
							],
							[
								17675,
								17709
							],
							[
								17775,
								17811
							],
							[
								17886,
								17903
							],
							[
								18062,
								18099
							],
							[
								18100,
								18114
							],
							[
								18120,
								18124
							],
							[
								18199,
								18231
							],
							[
								18259,
								18285
							],
							[
								18610,
								18632
							],
							[
								18683,
								18699
							],
							[
								18714,
								18721
							],
							[
								18749,
								18765
							],
							[
								18806,
								18834
							],
							[
								19053,
								19070
							],
							[
								19071,
								19080
							],
							[
								19132,
								19149
							],
							[
								19150,
								19159
							],
							[
								19219,
								19236
							],
							[
								19237,
								19260
							],
							[
								19316,
								19340
							],
							[
								21967,
								21995
							],
							[
								22426,
								22430
							],
							[
								22558,
								22571
							],
							[
								22887,
								22899
							],
							[
								23162,
								23175
							],
							[
								23280,
								23294
							],
							[
								24187,
								24215
							],
							[
								24331,
								24344
							],
							[
								24456,
								24482
							],
							[
								24677,
								24725
							],
							[
								24773,
								24885
							],
							[
								24990,
								25013
							],
							[
								25157,
								25209
							],
							[
								25303,
								25319
							],
							[
								25403,
								25414
							],
							[
								25527,
								25531
							],
							[
								25810,
								25843
							],
							[
								25957,
								26009
							],
							[
								26183,
								26219
							],
							[
								26376,
								26392
							],
							[
								26410,
								26432
							],
							[
								26545,
								26551
							],
							[
								27913,
								27955
							],
							[
								28150,
								28181
							],
							[
								28231,
								28273
							],
							[
								28393,
								28417
							],
							[
								28637,
								28647
							],
							[
								28700,
								28704
							],
							[
								28743,
								28770
							],
							[
								28817,
								28829
							],
							[
								28899,
								28911
							],
							[
								28974,
								28999
							],
							[
								29044,
								29075
							],
							[
								29086,
								29103
							],
							[
								29244,
								29279
							],
							[
								29327,
								29354
							],
							[
								29445,
								29483
							],
							[
								29692,
								29750
							],
							[
								30016,
								30024
							],
							[
								30123,
								30148
							],
							[
								30233,
								30275
							],
							[
								30409,
								30449
							],
							[
								33378,
								33404
							],
							[
								33423,
								33427
							],
							[
								33514,
								33540
							],
							[
								33774,
								33798
							],
							[
								33991,
								34014
							],
							[
								34116,
								34157
							],
							[
								34306,
								34310
							],
							[
								34351,
								34359
							],
							[
								34388,
								34392
							],
							[
								34767,
								34780
							],
							[
								34833,
								34853
							],
							[
								35049,
								35063
							],
							[
								35090,
								35156
							],
							[
								35158,
								35162
							],
							[
								35320,
								35327
							],
							[
								35419,
								35429
							],
							[
								35540,
								35549
							],
							[
								35655,
								35681
							],
							[
								35814,
								35845
							],
							[
								36014,
								36086
							],
							[
								36215,
								36223
							],
							[
								36725,
								36733
							],
							[
								36762,
								36775
							],
							[
								36886,
								36935
							],
							[
								37037,
								37076
							],
							[
								37101,
								37109
							],
							[
								37141,
								37156
							],
							[
								37249,
								37257
							],
							[
								37311,
								37329
							],
							[
								37554,
								37562
							],
							[
								37600,
								37612
							]
						],
						"symlist":
						[
							"slice = (x, s, e) =>",
							"stringify = v =>",
							"formatNumber = n =>",
							"isNative = fn =>",
							" function util()",
							"util",
							"AsyncFunction = async function x()",
							"GeneratorFunction = function* ()",
							"AsyncGeneratorFunction = async function* ()",
							"isAnyArrayBuffer(v)",
							"isArrayBuffer(v)",
							"isBigInt64Array(v)",
							"isBigUint64Array(v)",
							"isDate(v)",
							"isFloat32Array(v)",
							"isFloat64Array(v)",
							"isInt8Array(v)",
							"isInt16Array(v)",
							"isInt32Array(v)",
							"isMap(v)",
							"isPromise(v)",
							"isProxy(v)",
							"isRegExp(v)",
							"isSet(v)",
							"isSharedArrayBuffer(v)",
							"isUint8Array(v)",
							"isUint8ClampedArray(v)",
							"isUint16Array(v)",
							"isUint32Array(v)",
							"isWeakMap(v)",
							"isWeakSet(v)",
							"isDataView(v)",
							"isBooleanObject(v)",
							"isAsyncFunction(v)",
							"isGeneratorFunction(v)",
							"isAsyncGeneratorFunction(v)",
							"isNumberObject(v)",
							"isBigIntObject(v)",
							"isSymbolObject(v)",
							"isNativeError(v)",
							"isMapIterator(v)",
							"isSetIterator(v)",
							"isStringObject(v)",
							"isArrayBufferView(v)",
							"isArgumentsObject(v)",
							"isBoxedPrimitive(v)",
							"ctor =>",
							"isGeneratorObject(v)",
							"isTypedArray(v)",
							"isModuleNamespaceObject(v)",
							" function isObject(arg)",
							" function SyscallError(syscall, errnum)",
							"SyscallError",
							"SyscallError",
							"get message()",
							" function extendArray(proto = Array.prototype)",
							"get last()",
							"at(index)",
							"clear()",
							"findLastIndex(predicate)",
							"findLast(predicate)",
							"unique()",
							"pushUnique(...args)",
							" function toString(arrayBuf, encoding = 'utf-8')",
							" function toArrayBuffer(str, encoding = 'utf-8')",
							"a =>",
							"(c, i) =>",
							" function btoa(bin)",
							" function atob(asc)",
							" function assert(actual, expected, message)",
							" function escape(str, chars = [])",
							" function quote(str, q = '\"')",
							" function memoize(fn)",
							" (n, ...rest) =>",
							" function once(fn, thisArg, memoFn)",
							" function(...args)",
							"callback =>",
							" function()",
							" function()",
							" function(e)",
							" function atexit(fn)",
							"() =>",
							" function waitFor(ms)",
							"resolve =>",
							" function define(obj, ...args)",
							" function weakAssign(obj, ...args)",
							" function getConstructorChain(obj)",
							" function hasPrototype(obj, proto)",
							" function filter(seq, pred, thisArg)",
							"pred = (el, i) =>",
							" (f, arr = [], length = f.length) =>",
							" (...args) =>",
							"a =>",
							" function* split(buf, ...points)",
							"splitAt = (b, pos, len) =>",
							"unique = (arr, cmp) =>",
							" (el, i, arr) =>",
							"item =>",
							" (el, i, arr) =>",
							"getFunctionArguments = fn =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" (red, green, blue) =>",
							"function getAnsiStyles()",
							"value: (red, green, blue) =>",
							"c =>",
							"value: hex =>",
							"character =>",
							"value: hex =>",
							"value: code =>",
							"value: (red, green, blue) =>",
							"value: hex =>",
							" function randInt(...args)",
							" function randFloat(min, max, rng = Math.random)",
							" function randStr(n, set = '_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', rng = Math.random)",
							" function toBigInt(arg)",
							" function lazyProperty(obj, name, getter, opts = {})",
							"async function()",
							" function()",
							"v =>",
							" function replaceProperty(value)",
							" function lazyProperties(obj, gettersObj, opts = {})",
							" function getOpt(options = {}, args)",
							"findOpt = arg =>",
							"([optname, option]) =>",
							"opt =>",
							" function toUnixTime(dateObj, utc = false)",
							" function unixTime(utc = false)",
							" function fromUnixTime(epoch, utc = false)",
							" function range(...args)",
							" (v, k) =>",
							"n =>",
							" function repeater(n, what)",
							"function* ()",
							"function* ()",
							" function repeat(n, what)",
							" function chunkArray(arr, size)",
							"fn = (a, v, i) =>",
							" function camelize(str, delim = '')",
							" (match, p1, p2, offset) =>",
							" function decamelize(str, delim = '-')",
							" function Location(line, column, pos, file, freeze = true)",
							"Location",
							" function format(...args)",
							" function formatWithOptions(opts, ...args)",
							"function formatWithOptionsInternal(o, v)",
							" function isNumeric(value)",
							"v =>",
							" function functionName(fn)",
							" function className(obj)",
							"isArrowFunction = fn =>",
							" function immutableClass (orig, ...proto)",
							"p =>",
							" ctor =>",
							"ctor",
							"imm = base =>",
							"constructor(...args)",
							"isArray = a =>",
							" function arrayFacade(proto, itemFn = (container, i) => container.",
							"(i))",
							"*keys()",
							"*entries()",
							"*values()",
							"forEach(callback, thisArg)",
							"reduce(callback, accu, thisArg)",
							"Location.prototype.clone = function(freeze = false, withFilename = true)",
							"Location",
							"Location",
							" function* ()",
							"Location.prototype.toString = function(opts = {})",
							"Location.prototype.valueOf = function()",
							"Location",
							" function(hint)",
							"Location",
							" function(n, opts)",
							"Location",
							"get offset()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAICBmaWxlAAAAAAAAAACQDgAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					123,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AwAAAAAAAAAAAAAAAAAAAAAAAACQDgAAICBzbGljZSA9ICh4LCBzLCBlKSA9PgogIHN0cmluZ2lmeSA9IHYgPT4KICBmb3JtYXROdW1iZXIgPSBuID0+CiAgaXNOYXRpdmUgPSBmbiA9PgogIHV0aWwoKQogIHV0aWwKQXN5bmNGdW5jdGlvbiA9IGZ1bmN0aW9uIHgoKQpHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKigpCkFzeW5jR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbiooKQogIGlzQW55QXJyYXlCdWZmZXIodikKICBpc0FycmF5QnVmZmVyKHYpCiAgaXNCaWdJbnQ2NEFycmF5KHYpCiAgaXNCaWdVaW50NjRBcnJheSh2KQogIGlzRGF0ZSh2KQogIGlzRmxvYXQzMkFycmF5KHYpCiAgaXNGbG9hdDY0QXJyYXkodikKICBpc0ludDhBcnJheSh2KQogIGlzSW50MTZBcnJheSh2KQogIGlzSW50MzJBcnJheSh2KQogIGlzTWFwKHYpCiAgaXNQcm9taXNlKHYpCiAgaXNQcm94eSh2KQogIGlzUmVnRXhwKHYpCiAgaXNTZXQodikKICBpc1NoYXJlZEFycmF5QnVmZmVyKHYpCiAgaXNVaW50OEFycmF5KHYpCiAgaXNVaW50OENsYW1wZWRBcnJheSh2KQogIGlzVWludDE2QXJyYXkodikKICBpc1VpbnQzMkFycmF5KHYpCiAgaXNXZWFrTWFwKHYpCiAgaXNXZWFrU2V0KHYpCiAgaXNEYXRhVmlldyh2KQogIGlzQm9vbGVhbk9iamVjdCh2KQogIGlzQXN5bmNGdW5jdGlvbih2KQogIGlzR2VuZXJhdG9yRnVuY3Rpb24odikKICBpc0FzeW5jR2VuZXJhdG9yRnVuY3Rpb24odikKICBpc051bWJlck9iamVjdCh2KQogIGlzQmlnSW50T2JqZWN0KHYpCiAgaXNTeW1ib2xPYmplY3QodikKICBpc05hdGl2ZUVycm9yKHYpCiAgaXNNYXBJdGVyYXRvcih2KQogIGlzU2V0SXRlcmF0b3IodikKICBpc1N0cmluZ09iamVjdCh2KQogIGlzQXJyYXlCdWZmZXJWaWV3KHYpCiAgaXNBcmd1bWVudHNPYmplY3QodikKICBpc0JveGVkUHJpbWl0aXZlKHYpCiAgY3RvciA9PgogIGlzR2VuZXJhdG9yT2JqZWN0KHYpCiAgaXNUeXBlZEFycmF5KHYpCiAgaXNNb2R1bGVOYW1lc3BhY2VPYmplY3QodikKICBpc09iamVjdChhcmcpClN5c2NhbGxFcnJvcihzeXNjYWxsLCBlcnJudW0pClN5c2NhbGxFcnJvcgpTeXNjYWxsRXJyb3IKICBnZXQgbWVzc2FnZSgpCiAgZXh0ZW5kQXJyYXkocHJvdG8gPSBBcnJheS5wcm90b3R5cGUpCiAgZ2V0IGxhc3QoKQogIGF0KGluZGV4KQogIGNsZWFyKCkKICBmaW5kTGFzdEluZGV4KHByZWRpY2F0ZSkKICBmaW5kTGFzdChwcmVkaWNhdGUpCiAgdW5pcXVlKCkKICBwdXNoVW5pcXVlKC4uLmFyZ3MpCiAgdG9TdHJpbmcoYXJyYXlCdWYsIGVuY29kaW5nID0gJ3V0Zi04JykKICB0b0FycmF5QnVmZmVyKHN0ciwgZW5jb2RpbmcgPSAndXRmLTgnKQogIGEgPT4KKGMsIGkpID0+CiAgYnRvYShiaW4pCiAgYXRvYihhc2MpCiAgYXNzZXJ0KGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpCiAgZXNjYXBlKHN0ciwgY2hhcnMgPSBbXSkKICBxdW90ZShzdHIsIHEgPSAnIicpCiAgbWVtb2l6ZShmbikKICAobiwgLi4ucmVzdCkgPT4KICBvbmNlKGZuLCB0aGlzQXJnLCBtZW1vRm4pCiAgZnVuY3Rpb24oLi4uYXJncykKICBjYWxsYmFjayA9PgogIGZ1bmN0aW9uKCkKICBmdW5jdGlvbigpCiAgZnVuY3Rpb24oZSkKICBhdGV4aXQoZm4pCigpID0+CiAgd2FpdEZvcihtcykKICByZXNvbHZlID0+CiAgZGVmaW5lKG9iaiwgLi4uYXJncykKICB3ZWFrQXNzaWduKG9iaiwgLi4uYXJncykKICBnZXRDb25zdHJ1Y3RvckNoYWluKG9iaikKICBoYXNQcm90b3R5cGUob2JqLCBwcm90bykKICBmaWx0ZXIoc2VxLCBwcmVkLCB0aGlzQXJnKQogIHByZWQgPSAoZWwsIGkpID0+CiAgKGYsIGFyciA9IFtdLCBsZW5ndGggPSBmLmxlbmd0aCkgPT4KICAoLi4uYXJncykgPT4KICBhID0+CiAgc3BsaXQoYnVmLCAuLi5wb2ludHMpCiAgc3BsaXRBdCA9IChiLCBwb3MsIGxlbikgPT4KICB1bmlxdWUgPSAoYXJyLCBjbXApID0+CiAgKGVsLCBpLCBhcnIpID0+CiAgaXRlbSA9PgogIChlbCwgaSwgYXJyKSA9PgogIGdldEZ1bmN0aW9uQXJndW1lbnRzID0gZm4gPT4KICAob2Zmc2V0ID0gMCkgPT4KICBjb2RlID0+CiAgKG9mZnNldCA9IDApID0+CiAgY29kZSA9PgogIChvZmZzZXQgPSAwKSA9PgogIChyZWQsIGdyZWVuLCBibHVlKSA9PgogIGdldEFuc2lTdHlsZXMoKQogIHZhbHVlOiAocmVkLCBncmVlbiwgYmx1ZSkgPT4KICBjID0+CiAgdmFsdWU6IGhleCA9PgogIGNoYXJhY3RlciA9PgogIHZhbHVlOiBoZXggPT4KICB2YWx1ZTogY29kZSA9PgogIHZhbHVlOiAocmVkLCBncmVlbiwgYmx1ZSkgPT4KICB2YWx1ZTogaGV4ID0+CiAgcmFuZEludCguLi5hcmdzKQogIHJhbmRGbG9hdChtaW4sIG1heCwgcm5nID0gTWF0aC5yYW5kb20pCiAgcmFuZFN0cihuLCBzZXQgPSAnXzAxMjM0NTY3ODlBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6Jywgcm5nID0gTWF0aC5yYW5kb20pCiAgdG9CaWdJbnQoYXJnKQogIGxhenlQcm9wZXJ0eShvYmosIG5hbWUsIGdldHRlciwgb3B0cyA9IHt9KQogIGZ1bmN0aW9uKCkKICBmdW5jdGlvbigpCiAgdiA9PgogIHJlcGxhY2VQcm9wZXJ0eSh2YWx1ZSkKICBsYXp5UHJvcGVydGllcyhvYmosIGdldHRlcnNPYmosIG9wdHMgPSB7fSkKICBnZXRPcHQob3B0aW9ucyA9IHt9LCBhcmdzKQogIGZpbmRPcHQgPSBhcmcgPT4KKFtvcHRuYW1lLCBvcHRpb25dKSA9PgogIG9wdCA9PgogIHRvVW5peFRpbWUoZGF0ZU9iaiwgdXRjID0gZmFsc2UpCiAgdW5peFRpbWUodXRjID0gZmFsc2UpCiAgZnJvbVVuaXhUaW1lKGVwb2NoLCB1dGMgPSBmYWxzZSkKICByYW5nZSguLi5hcmdzKQogICh2LCBrKSA9PgogIG4gPT4KICByZXBlYXRlcihuLCB3aGF0KQooKQooKQogIHJlcGVhdChuLCB3aGF0KQogIGNodW5rQXJyYXkoYXJyLCBzaXplKQogIGZuID0gKGEsIHYsIGkpID0+CiAgY2FtZWxpemUoc3RyLCBkZWxpbSA9ICcnKQogIChtYXRjaCwgcDEsIHAyLCBvZmZzZXQpID0+CiAgZGVjYW1lbGl6ZShzdHIsIGRlbGltID0gJy0nKQpMb2NhdGlvbihsaW5lLCBjb2x1bW4sIHBvcywgZmlsZSwgZnJlZXplID0gdHJ1ZSkKTG9jYXRpb24KICBmb3JtYXQoLi4uYXJncykKICBmb3JtYXRXaXRoT3B0aW9ucyhvcHRzLCAuLi5hcmdzKQogIGZvcm1hdFdpdGhPcHRpb25zSW50ZXJuYWwobywgdikKICBpc051bWVyaWModmFsdWUpCiAgdiA9PgogIGZ1bmN0aW9uTmFtZShmbikKICBjbGFzc05hbWUob2JqKQogIGlzQXJyb3dGdW5jdGlvbiA9IGZuID0+CiAgaW1tdXRhYmxlQ2xhc3MgKG9yaWcsIC4uLnByb3RvKQogIHAgPT4KICBjdG9yID0+CiAgY3RvcgogIGltbSA9IGJhc2UgPT4KICBjb25zdHJ1Y3RvciguLi5hcmdzKQogIGlzQXJyYXkgPSBhID0+CiAgYXJyYXlGYWNhZGUocHJvdG8sIGl0ZW1GbiA9IChjb250YWluZXIsIGkpID0+IGNvbnRhaW5lci4KKGkpKQoqa2V5cygpCiplbnRyaWVzKCkKKnZhbHVlcygpCiAgZm9yRWFjaChjYWxsYmFjaywgdGhpc0FyZykKICByZWR1Y2UoY2FsbGJhY2ssIGFjY3UsIHRoaXNBcmcpCkxvY2F0aW9uLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKGZyZWV6ZSA9IGZhbHNlLCB3aXRoRmlsZW5hbWUgPSB0cnVlKQpMb2NhdGlvbgpMb2NhdGlvbgooKQpMb2NhdGlvbi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbihvcHRzID0ge30pCkxvY2F0aW9uLnByb3RvdHlwZS52YWx1ZU9mID0gZnVuY3Rpb24oKQpMb2NhdGlvbgogIGZ1bmN0aW9uKGhpbnQpCkxvY2F0aW9uCiAgZnVuY3Rpb24obiwgb3B0cykKTG9jYXRpb24KICBnZXQgb2Zmc2V0KCkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					124,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/misc.js",
						"symkeys":
						[
							[
								100,
								120
							],
							[
								340,
								356
							],
							[
								410,
								429
							],
							[
								464,
								480
							],
							[
								540,
								556
							],
							[
								577,
								581
							],
							[
								619,
								653
							],
							[
								676,
								708
							],
							[
								731,
								774
							],
							[
								2603,
								2622
							],
							[
								2720,
								2736
							],
							[
								2798,
								2816
							],
							[
								2880,
								2899
							],
							[
								2964,
								2973
							],
							[
								3028,
								3045
							],
							[
								3108,
								3125
							],
							[
								3188,
								3202
							],
							[
								3262,
								3277
							],
							[
								3338,
								3353
							],
							[
								3414,
								3422
							],
							[
								3476,
								3488
							],
							[
								3546,
								3556
							],
							[
								3612,
								3623
							],
							[
								3680,
								3688
							],
							[
								3742,
								3764
							],
							[
								3832,
								3847
							],
							[
								3908,
								3930
							],
							[
								3998,
								4014
							],
							[
								4076,
								4092
							],
							[
								4154,
								4166
							],
							[
								4224,
								4236
							],
							[
								4294,
								4307
							],
							[
								4366,
								4384
							],
							[
								4442,
								4460
							],
							[
								4524,
								4546
							],
							[
								4614,
								4641
							],
							[
								4714,
								4731
							],
							[
								4788,
								4805
							],
							[
								4862,
								4879
							],
							[
								4926,
								4942
							],
							[
								5025,
								5041
							],
							[
								5113,
								5129
							],
							[
								5201,
								5218
							],
							[
								5275,
								5295
							],
							[
								5354,
								5374
							],
							[
								5533,
								5552
							],
							[
								5628,
								5635
							],
							[
								5664,
								5684
							],
							[
								5754,
								5769
							],
							[
								5830,
								5856
							],
							[
								5934,
								5957
							],
							[
								7671,
								7710
							],
							[
								8132,
								8144
							],
							[
								8178,
								8190
							],
							[
								8206,
								8219
							],
							[
								8400,
								8446
							],
							[
								8471,
								8481
							],
							[
								8531,
								8540
							],
							[
								8642,
								8649
							],
							[
								8698,
								8722
							],
							[
								8882,
								8901
							],
							[
								9015,
								9023
							],
							[
								9070,
								9089
							],
							[
								9185,
								9233
							],
							[
								11447,
								11495
							],
							[
								13032,
								13036
							],
							[
								13067,
								13076
							],
							[
								13214,
								13233
							],
							[
								13753,
								13772
							],
							[
								14442,
								14485
							],
							[
								14902,
								14935
							],
							[
								15213,
								15242
							],
							[
								15289,
								15310
							],
							[
								15339,
								15355
							],
							[
								15448,
								15483
							],
							[
								15523,
								15541
							],
							[
								15779,
								15790
							],
							[
								16041,
								16052
							],
							[
								16155,
								16166
							],
							[
								16317,
								16329
							],
							[
								16439,
								16459
							],
							[
								16557,
								16562
							],
							[
								16630,
								16651
							],
							[
								16675,
								16685
							],
							[
								16724,
								16754
							],
							[
								17080,
								17114
							],
							[
								17421,
								17455
							],
							[
								17675,
								17709
							],
							[
								17775,
								17811
							],
							[
								17886,
								17903
							],
							[
								18062,
								18099
							],
							[
								18100,
								18114
							],
							[
								18120,
								18124
							],
							[
								18199,
								18231
							],
							[
								18259,
								18285
							],
							[
								18610,
								18632
							],
							[
								18683,
								18699
							],
							[
								18714,
								18721
							],
							[
								18749,
								18765
							],
							[
								18806,
								18834
							],
							[
								19053,
								19070
							],
							[
								19071,
								19080
							],
							[
								19132,
								19149
							],
							[
								19150,
								19159
							],
							[
								19219,
								19236
							],
							[
								19237,
								19260
							],
							[
								19316,
								19340
							],
							[
								21967,
								21995
							],
							[
								22426,
								22430
							],
							[
								22558,
								22571
							],
							[
								22887,
								22899
							],
							[
								23162,
								23175
							],
							[
								23280,
								23294
							],
							[
								24187,
								24215
							],
							[
								24331,
								24344
							],
							[
								24456,
								24482
							],
							[
								24677,
								24725
							],
							[
								24773,
								24885
							],
							[
								24990,
								25013
							],
							[
								25157,
								25209
							],
							[
								25303,
								25319
							],
							[
								25403,
								25414
							],
							[
								25527,
								25531
							],
							[
								25810,
								25843
							],
							[
								25957,
								26009
							],
							[
								26183,
								26219
							],
							[
								26376,
								26392
							],
							[
								26410,
								26432
							],
							[
								26545,
								26551
							],
							[
								27913,
								27955
							],
							[
								28150,
								28181
							],
							[
								28231,
								28273
							],
							[
								28393,
								28417
							],
							[
								28637,
								28647
							],
							[
								28700,
								28704
							],
							[
								28743,
								28770
							],
							[
								28817,
								28829
							],
							[
								28899,
								28911
							],
							[
								28974,
								28999
							],
							[
								29044,
								29075
							],
							[
								29086,
								29103
							],
							[
								29244,
								29279
							],
							[
								29327,
								29354
							],
							[
								29445,
								29483
							],
							[
								29692,
								29750
							],
							[
								30016,
								30024
							],
							[
								30123,
								30148
							],
							[
								30233,
								30275
							],
							[
								30409,
								30449
							],
							[
								33378,
								33404
							],
							[
								33423,
								33427
							],
							[
								33514,
								33540
							],
							[
								33774,
								33798
							],
							[
								33991,
								34014
							],
							[
								34116,
								34157
							],
							[
								34306,
								34310
							],
							[
								34351,
								34359
							],
							[
								34388,
								34392
							],
							[
								34767,
								34780
							],
							[
								34833,
								34853
							],
							[
								35049,
								35063
							],
							[
								35090,
								35156
							],
							[
								35158,
								35162
							],
							[
								35320,
								35327
							],
							[
								35419,
								35429
							],
							[
								35540,
								35549
							],
							[
								35655,
								35681
							],
							[
								35814,
								35845
							],
							[
								36014,
								36086
							],
							[
								36215,
								36223
							],
							[
								36725,
								36733
							],
							[
								36762,
								36775
							],
							[
								36886,
								36935
							],
							[
								37037,
								37076
							],
							[
								37101,
								37109
							],
							[
								37141,
								37156
							],
							[
								37249,
								37257
							],
							[
								37311,
								37329
							],
							[
								37554,
								37562
							],
							[
								37600,
								37612
							]
						],
						"symlist":
						[
							"slice = (x, s, e) =>",
							"stringify = v =>",
							"formatNumber = n =>",
							"isNative = fn =>",
							" function util()",
							"util",
							"AsyncFunction = async function x()",
							"GeneratorFunction = function* ()",
							"AsyncGeneratorFunction = async function* ()",
							"isAnyArrayBuffer(v)",
							"isArrayBuffer(v)",
							"isBigInt64Array(v)",
							"isBigUint64Array(v)",
							"isDate(v)",
							"isFloat32Array(v)",
							"isFloat64Array(v)",
							"isInt8Array(v)",
							"isInt16Array(v)",
							"isInt32Array(v)",
							"isMap(v)",
							"isPromise(v)",
							"isProxy(v)",
							"isRegExp(v)",
							"isSet(v)",
							"isSharedArrayBuffer(v)",
							"isUint8Array(v)",
							"isUint8ClampedArray(v)",
							"isUint16Array(v)",
							"isUint32Array(v)",
							"isWeakMap(v)",
							"isWeakSet(v)",
							"isDataView(v)",
							"isBooleanObject(v)",
							"isAsyncFunction(v)",
							"isGeneratorFunction(v)",
							"isAsyncGeneratorFunction(v)",
							"isNumberObject(v)",
							"isBigIntObject(v)",
							"isSymbolObject(v)",
							"isNativeError(v)",
							"isMapIterator(v)",
							"isSetIterator(v)",
							"isStringObject(v)",
							"isArrayBufferView(v)",
							"isArgumentsObject(v)",
							"isBoxedPrimitive(v)",
							"ctor =>",
							"isGeneratorObject(v)",
							"isTypedArray(v)",
							"isModuleNamespaceObject(v)",
							" function isObject(arg)",
							" function SyscallError(syscall, errnum)",
							"SyscallError",
							"SyscallError",
							"get message()",
							" function extendArray(proto = Array.prototype)",
							"get last()",
							"at(index)",
							"clear()",
							"findLastIndex(predicate)",
							"findLast(predicate)",
							"unique()",
							"pushUnique(...args)",
							" function toString(arrayBuf, encoding = 'utf-8')",
							" function toArrayBuffer(str, encoding = 'utf-8')",
							"a =>",
							"(c, i) =>",
							" function btoa(bin)",
							" function atob(asc)",
							" function assert(actual, expected, message)",
							" function escape(str, chars = [])",
							" function quote(str, q = '\"')",
							" function memoize(fn)",
							" (n, ...rest) =>",
							" function once(fn, thisArg, memoFn)",
							" function(...args)",
							"callback =>",
							" function()",
							" function()",
							" function(e)",
							" function atexit(fn)",
							"() =>",
							" function waitFor(ms)",
							"resolve =>",
							" function define(obj, ...args)",
							" function weakAssign(obj, ...args)",
							" function getConstructorChain(obj)",
							" function hasPrototype(obj, proto)",
							" function filter(seq, pred, thisArg)",
							"pred = (el, i) =>",
							" (f, arr = [], length = f.length) =>",
							" (...args) =>",
							"a =>",
							" function* split(buf, ...points)",
							"splitAt = (b, pos, len) =>",
							"unique = (arr, cmp) =>",
							" (el, i, arr) =>",
							"item =>",
							" (el, i, arr) =>",
							"getFunctionArguments = fn =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" (red, green, blue) =>",
							"function getAnsiStyles()",
							"value: (red, green, blue) =>",
							"c =>",
							"value: hex =>",
							"character =>",
							"value: hex =>",
							"value: code =>",
							"value: (red, green, blue) =>",
							"value: hex =>",
							" function randInt(...args)",
							" function randFloat(min, max, rng = Math.random)",
							" function randStr(n, set = '_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', rng = Math.random)",
							" function toBigInt(arg)",
							" function lazyProperty(obj, name, getter, opts = {})",
							"async function()",
							" function()",
							"v =>",
							" function replaceProperty(value)",
							" function lazyProperties(obj, gettersObj, opts = {})",
							" function getOpt(options = {}, args)",
							"findOpt = arg =>",
							"([optname, option]) =>",
							"opt =>",
							" function toUnixTime(dateObj, utc = false)",
							" function unixTime(utc = false)",
							" function fromUnixTime(epoch, utc = false)",
							" function range(...args)",
							" (v, k) =>",
							"n =>",
							" function repeater(n, what)",
							"function* ()",
							"function* ()",
							" function repeat(n, what)",
							" function chunkArray(arr, size)",
							"fn = (a, v, i) =>",
							" function camelize(str, delim = '')",
							" (match, p1, p2, offset) =>",
							" function decamelize(str, delim = '-')",
							" function Location(line, column, pos, file, freeze = true)",
							"Location",
							" function format(...args)",
							" function formatWithOptions(opts, ...args)",
							"function formatWithOptionsInternal(o, v)",
							" function isNumeric(value)",
							"v =>",
							" function functionName(fn)",
							" function className(obj)",
							"isArrowFunction = fn =>",
							" function immutableClass (orig, ...proto)",
							"p =>",
							" ctor =>",
							"ctor",
							"imm = base =>",
							"constructor(...args)",
							"isArray = a =>",
							" function arrayFacade(proto, itemFn = (container, i) => container.",
							"(i))",
							"*keys()",
							"*entries()",
							"*values()",
							"forEach(callback, thisArg)",
							"reduce(callback, accu, thisArg)",
							"Location.prototype.clone = function(freeze = false, withFilename = true)",
							"Location",
							"Location",
							" function* ()",
							"Location.prototype.toString = function(opts = {})",
							"Location.prototype.valueOf = function()",
							"Location",
							" function(hint)",
							"Location",
							" function(n, opts)",
							"Location",
							"get offset()"
						]
					},
					"AQAAAAAAAAAAAAAAkA4AAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					125,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACQDgAAICBzbGljZSA9ICh4LCBzLCBlKSA9PgogIHN0cmluZ2lmeSA9IHYgPT4KICBmb3JtYXROdW1iZXIgPSBuID0+CiAgaXNOYXRpdmUgPSBmbiA9PgogIHV0aWwoKQogIHV0aWwKQXN5bmNGdW5jdGlvbiA9IGZ1bmN0aW9uIHgoKQpHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKigpCkFzeW5jR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbiooKQogIGlzQW55QXJyYXlCdWZmZXIodikKICBpc0FycmF5QnVmZmVyKHYpCiAgaXNCaWdJbnQ2NEFycmF5KHYpCiAgaXNCaWdVaW50NjRBcnJheSh2KQogIGlzRGF0ZSh2KQogIGlzRmxvYXQzMkFycmF5KHYpCiAgaXNGbG9hdDY0QXJyYXkodikKICBpc0ludDhBcnJheSh2KQogIGlzSW50MTZBcnJheSh2KQogIGlzSW50MzJBcnJheSh2KQogIGlzTWFwKHYpCiAgaXNQcm9taXNlKHYpCiAgaXNQcm94eSh2KQogIGlzUmVnRXhwKHYpCiAgaXNTZXQodikKICBpc1NoYXJlZEFycmF5QnVmZmVyKHYpCiAgaXNVaW50OEFycmF5KHYpCiAgaXNVaW50OENsYW1wZWRBcnJheSh2KQogIGlzVWludDE2QXJyYXkodikKICBpc1VpbnQzMkFycmF5KHYpCiAgaXNXZWFrTWFwKHYpCiAgaXNXZWFrU2V0KHYpCiAgaXNEYXRhVmlldyh2KQogIGlzQm9vbGVhbk9iamVjdCh2KQogIGlzQXN5bmNGdW5jdGlvbih2KQogIGlzR2VuZXJhdG9yRnVuY3Rpb24odikKICBpc0FzeW5jR2VuZXJhdG9yRnVuY3Rpb24odikKICBpc051bWJlck9iamVjdCh2KQogIGlzQmlnSW50T2JqZWN0KHYpCiAgaXNTeW1ib2xPYmplY3QodikKICBpc05hdGl2ZUVycm9yKHYpCiAgaXNNYXBJdGVyYXRvcih2KQogIGlzU2V0SXRlcmF0b3IodikKICBpc1N0cmluZ09iamVjdCh2KQogIGlzQXJyYXlCdWZmZXJWaWV3KHYpCiAgaXNBcmd1bWVudHNPYmplY3QodikKICBpc0JveGVkUHJpbWl0aXZlKHYpCiAgY3RvciA9PgogIGlzR2VuZXJhdG9yT2JqZWN0KHYpCiAgaXNUeXBlZEFycmF5KHYpCiAgaXNNb2R1bGVOYW1lc3BhY2VPYmplY3QodikKICBpc09iamVjdChhcmcpClN5c2NhbGxFcnJvcihzeXNjYWxsLCBlcnJudW0pClN5c2NhbGxFcnJvcgpTeXNjYWxsRXJyb3IKICBnZXQgbWVzc2FnZSgpCiAgZXh0ZW5kQXJyYXkocHJvdG8gPSBBcnJheS5wcm90b3R5cGUpCiAgZ2V0IGxhc3QoKQogIGF0KGluZGV4KQogIGNsZWFyKCkKICBmaW5kTGFzdEluZGV4KHByZWRpY2F0ZSkKICBmaW5kTGFzdChwcmVkaWNhdGUpCiAgdW5pcXVlKCkKICBwdXNoVW5pcXVlKC4uLmFyZ3MpCiAgdG9TdHJpbmcoYXJyYXlCdWYsIGVuY29kaW5nID0gJ3V0Zi04JykKICB0b0FycmF5QnVmZmVyKHN0ciwgZW5jb2RpbmcgPSAndXRmLTgnKQogIGEgPT4KKGMsIGkpID0+CiAgYnRvYShiaW4pCiAgYXRvYihhc2MpCiAgYXNzZXJ0KGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpCiAgZXNjYXBlKHN0ciwgY2hhcnMgPSBbXSkKICBxdW90ZShzdHIsIHEgPSAnIicpCiAgbWVtb2l6ZShmbikKICAobiwgLi4ucmVzdCkgPT4KICBvbmNlKGZuLCB0aGlzQXJnLCBtZW1vRm4pCiAgZnVuY3Rpb24oLi4uYXJncykKICBjYWxsYmFjayA9PgogIGZ1bmN0aW9uKCkKICBmdW5jdGlvbigpCiAgZnVuY3Rpb24oZSkKICBhdGV4aXQoZm4pCigpID0+CiAgd2FpdEZvcihtcykKICByZXNvbHZlID0+CiAgZGVmaW5lKG9iaiwgLi4uYXJncykKICB3ZWFrQXNzaWduKG9iaiwgLi4uYXJncykKICBnZXRDb25zdHJ1Y3RvckNoYWluKG9iaikKICBoYXNQcm90b3R5cGUob2JqLCBwcm90bykKICBmaWx0ZXIoc2VxLCBwcmVkLCB0aGlzQXJnKQogIHByZWQgPSAoZWwsIGkpID0+CiAgKGYsIGFyciA9IFtdLCBsZW5ndGggPSBmLmxlbmd0aCkgPT4KICAoLi4uYXJncykgPT4KICBhID0+CiAgc3BsaXQoYnVmLCAuLi5wb2ludHMpCiAgc3BsaXRBdCA9IChiLCBwb3MsIGxlbikgPT4KICB1bmlxdWUgPSAoYXJyLCBjbXApID0+CiAgKGVsLCBpLCBhcnIpID0+CiAgaXRlbSA9PgogIChlbCwgaSwgYXJyKSA9PgogIGdldEZ1bmN0aW9uQXJndW1lbnRzID0gZm4gPT4KICAob2Zmc2V0ID0gMCkgPT4KICBjb2RlID0+CiAgKG9mZnNldCA9IDApID0+CiAgY29kZSA9PgogIChvZmZzZXQgPSAwKSA9PgogIChyZWQsIGdyZWVuLCBibHVlKSA9PgogIGdldEFuc2lTdHlsZXMoKQogIHZhbHVlOiAocmVkLCBncmVlbiwgYmx1ZSkgPT4KICBjID0+CiAgdmFsdWU6IGhleCA9PgogIGNoYXJhY3RlciA9PgogIHZhbHVlOiBoZXggPT4KICB2YWx1ZTogY29kZSA9PgogIHZhbHVlOiAocmVkLCBncmVlbiwgYmx1ZSkgPT4KICB2YWx1ZTogaGV4ID0+CiAgcmFuZEludCguLi5hcmdzKQogIHJhbmRGbG9hdChtaW4sIG1heCwgcm5nID0gTWF0aC5yYW5kb20pCiAgcmFuZFN0cihuLCBzZXQgPSAnXzAxMjM0NTY3ODlBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6Jywgcm5nID0gTWF0aC5yYW5kb20pCiAgdG9CaWdJbnQoYXJnKQogIGxhenlQcm9wZXJ0eShvYmosIG5hbWUsIGdldHRlciwgb3B0cyA9IHt9KQogIGZ1bmN0aW9uKCkKICBmdW5jdGlvbigpCiAgdiA9PgogIHJlcGxhY2VQcm9wZXJ0eSh2YWx1ZSkKICBsYXp5UHJvcGVydGllcyhvYmosIGdldHRlcnNPYmosIG9wdHMgPSB7fSkKICBnZXRPcHQob3B0aW9ucyA9IHt9LCBhcmdzKQogIGZpbmRPcHQgPSBhcmcgPT4KKFtvcHRuYW1lLCBvcHRpb25dKSA9PgogIG9wdCA9PgogIHRvVW5peFRpbWUoZGF0ZU9iaiwgdXRjID0gZmFsc2UpCiAgdW5peFRpbWUodXRjID0gZmFsc2UpCiAgZnJvbVVuaXhUaW1lKGVwb2NoLCB1dGMgPSBmYWxzZSkKICByYW5nZSguLi5hcmdzKQogICh2LCBrKSA9PgogIG4gPT4KICByZXBlYXRlcihuLCB3aGF0KQooKQooKQogIHJlcGVhdChuLCB3aGF0KQogIGNodW5rQXJyYXkoYXJyLCBzaXplKQogIGZuID0gKGEsIHYsIGkpID0+CiAgY2FtZWxpemUoc3RyLCBkZWxpbSA9ICcnKQogIChtYXRjaCwgcDEsIHAyLCBvZmZzZXQpID0+CiAgZGVjYW1lbGl6ZShzdHIsIGRlbGltID0gJy0nKQpMb2NhdGlvbihsaW5lLCBjb2x1bW4sIHBvcywgZmlsZSwgZnJlZXplID0gdHJ1ZSkKTG9jYXRpb24KICBmb3JtYXQoLi4uYXJncykKICBmb3JtYXRXaXRoT3B0aW9ucyhvcHRzLCAuLi5hcmdzKQogIGZvcm1hdFdpdGhPcHRpb25zSW50ZXJuYWwobywgdikKICBpc051bWVyaWModmFsdWUpCiAgdiA9PgogIGZ1bmN0aW9uTmFtZShmbikKICBjbGFzc05hbWUob2JqKQogIGlzQXJyb3dGdW5jdGlvbiA9IGZuID0+CiAgaW1tdXRhYmxlQ2xhc3MgKG9yaWcsIC4uLnByb3RvKQogIHAgPT4KICBjdG9yID0+CiAgY3RvcgogIGltbSA9IGJhc2UgPT4KICBjb25zdHJ1Y3RvciguLi5hcmdzKQogIGlzQXJyYXkgPSBhID0+CiAgYXJyYXlGYWNhZGUocHJvdG8sIGl0ZW1GbiA9IChjb250YWluZXIsIGkpID0+IGNvbnRhaW5lci4KKGkpKQoqa2V5cygpCiplbnRyaWVzKCkKKnZhbHVlcygpCiAgZm9yRWFjaChjYWxsYmFjaywgdGhpc0FyZykKICByZWR1Y2UoY2FsbGJhY2ssIGFjY3UsIHRoaXNBcmcpCkxvY2F0aW9uLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKGZyZWV6ZSA9IGZhbHNlLCB3aXRoRmlsZW5hbWUgPSB0cnVlKQpMb2NhdGlvbgpMb2NhdGlvbgooKQpMb2NhdGlvbi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbihvcHRzID0ge30pCkxvY2F0aW9uLnByb3RvdHlwZS52YWx1ZU9mID0gZnVuY3Rpb24oKQpMb2NhdGlvbgogIGZ1bmN0aW9uKGhpbnQpCkxvY2F0aW9uCiAgZnVuY3Rpb24obiwgb3B0cykKTG9jYXRpb24KICBnZXQgb2Zmc2V0KCkAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					126,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								756,
								789
							],
							[
								811,
								815
							],
							[
								865,
								888
							],
							[
								1235,
								1246
							],
							[
								1336,
								1347
							],
							[
								1411,
								1422
							],
							[
								1476,
								1485
							],
							[
								1523,
								1534
							],
							[
								1622,
								1644
							],
							[
								1941,
								1951
							],
							[
								2195,
								2209
							],
							[
								3136,
								3160
							],
							[
								3286,
								3290
							],
							[
								3382,
								3396
							],
							[
								3496,
								3512
							],
							[
								3845,
								3858
							],
							[
								3876,
								3881
							],
							[
								3963,
								3970
							],
							[
								3998,
								4003
							],
							[
								4154,
								4193
							],
							[
								4266,
								4276
							],
							[
								4396,
								4416
							],
							[
								6223,
								6257
							],
							[
								6318,
								6350
							],
							[
								6621,
								6655
							],
							[
								7463,
								7470
							],
							[
								7722,
								7729
							],
							[
								7805,
								7825
							],
							[
								8349,
								8361
							],
							[
								8454,
								8466
							],
							[
								8656,
								8672
							],
							[
								9144,
								9162
							],
							[
								9298,
								9327
							],
							[
								9747,
								9766
							],
							[
								9863,
								9884
							],
							[
								10677,
								10699
							],
							[
								11107,
								11128
							],
							[
								11392,
								11405
							],
							[
								12036,
								12048
							],
							[
								13687,
								13722
							],
							[
								14317,
								14336
							],
							[
								14444,
								14460
							],
							[
								14595,
								14612
							],
							[
								14657,
								14670
							],
							[
								14706,
								14716
							],
							[
								15130,
								15146
							],
							[
								15235,
								15254
							],
							[
								15265,
								15284
							],
							[
								15310,
								15330
							]
						],
						"symlist":
						[
							"MakeUUID = (rng = Math.random) =>",
							"n =>",
							"function ReadExif(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							".createWS = (url, callbacks, listen) =>",
							"out = s =>",
							" (level, message) =>",
							" function* upload(req, res)",
							" function proxy(req, res)",
							" function* files(req, resp)",
							"name =>",
							"file =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"onConnect(ws, req)",
							".sendCommand = function(data)",
							"onClose(ws, reason)",
							"onHttp(ws, req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name)",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"onFd(fd, rd, wr)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"AQAAAAAAAAAAAAAAXgMAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					127,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								756,
								789
							],
							[
								811,
								815
							],
							[
								865,
								888
							],
							[
								1235,
								1246
							],
							[
								1336,
								1347
							],
							[
								1411,
								1422
							],
							[
								1476,
								1485
							],
							[
								1523,
								1534
							],
							[
								1622,
								1644
							],
							[
								1941,
								1951
							],
							[
								2195,
								2209
							],
							[
								3136,
								3160
							],
							[
								3286,
								3290
							],
							[
								3382,
								3396
							],
							[
								3496,
								3512
							],
							[
								3845,
								3858
							],
							[
								3876,
								3881
							],
							[
								3963,
								3970
							],
							[
								3998,
								4003
							],
							[
								4154,
								4193
							],
							[
								4266,
								4276
							],
							[
								4396,
								4416
							],
							[
								6223,
								6257
							],
							[
								6318,
								6350
							],
							[
								6621,
								6655
							],
							[
								7463,
								7470
							],
							[
								7722,
								7729
							],
							[
								7805,
								7825
							],
							[
								8349,
								8361
							],
							[
								8454,
								8466
							],
							[
								8656,
								8672
							],
							[
								9144,
								9162
							],
							[
								9298,
								9327
							],
							[
								9747,
								9766
							],
							[
								9863,
								9884
							],
							[
								10677,
								10699
							],
							[
								11107,
								11128
							],
							[
								11392,
								11405
							],
							[
								12036,
								12048
							],
							[
								13694,
								13729
							],
							[
								14324,
								14343
							],
							[
								14451,
								14467
							],
							[
								14602,
								14619
							],
							[
								14664,
								14677
							],
							[
								14713,
								14723
							],
							[
								15137,
								15153
							],
							[
								15242,
								15261
							],
							[
								15272,
								15291
							],
							[
								15317,
								15337
							]
						],
						"symlist":
						[
							"MakeUUID = (rng = Math.random) =>",
							"n =>",
							"function ReadExif(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							".createWS = (url, callbacks, listen) =>",
							"out = s =>",
							" (level, message) =>",
							" function* upload(req, res)",
							" function proxy(req, res)",
							" function* files(req, resp)",
							"name =>",
							"file =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"onConnect(ws, req)",
							".sendCommand = function(data)",
							"onClose(ws, reason)",
							"onHttp(ws, req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name)",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"onFd(fd, rd, wr)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAABeAwAATWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+CiAgbiA9PgpSZWFkRXhpZihmaWxlKQooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgooYSwgYikgPT4KKFtrLCB2XSkgPT4KICBtYWluKC4uLmFyZ3MpCiAgKGEsIHYpID0+CiAgKHYsIHB2LCBvKSA9PgogIChtb2R1bGUsIC4uLmFyZ3MpID0+CiAgbSA9PgogIC5zaG93ID0gYXJnID0+CiAgLmNsZWFudXAgPSAoKSA9PgogICguLi5hcmdzKSA9PgooKSA9PgogIHB1dHMocykKKCkgPT4KICAuY3JlYXRlV1MgPSAodXJsLCBjYWxsYmFja3MsIGxpc3RlbikgPT4KICBvdXQgPSBzID0+CiAgKGxldmVsLCBtZXNzYWdlKSA9PgogIHVwbG9hZChyZXEsIHJlcykKICBwcm94eShyZXEsIHJlcykKICBmaWxlcyhyZXEsIHJlc3ApCiAgbmFtZSA9PgogIGZpbGUgPT4KKGFjYywgW2ZpbGUsIHN0XSkgPT4KICBzdHJpbmcoYSwgYikKICBudW1iZXIoYSwgYikKKFtuYW1lLCBvYmpdKSA9PgogIG9uQ29ubmVjdCh3cywgcmVxKQogIC5zZW5kQ29tbWFuZCA9IGZ1bmN0aW9uKGRhdGEpCiAgb25DbG9zZSh3cywgcmVhc29uKQogIG9uSHR0cCh3cywgcmVxLCByZXNwKQogIG9uT3BlbihuYW1lLCBmaWxlbmFtZSkKICBvbkNvbnRlbnQobmFtZSwgZGF0YSkKICBvbkNsb3NlKG5hbWUpCiAgb25GaW5hbGl6ZSgpCiAgKG1hdGNoLCBwMSwgcDAsIHAyLCBwMywgb2Zmc2V0KSA9PgogIG9uTWVzc2FnZSh3cywgZGF0YSkKICBvbkZkKGZkLCByZCwgd3IpCiAgZ2V0IGNvbm5lY3Rpb25zKCkKICBnZXQgYnlfdXVpZCgpCiAgdXVpZChkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIHF1aXQod2h5KQAAAAAAAAAAXgMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAF4DAABNYWtlVVVJRCA9IChybmcgPSBNYXRoLnJhbmRvbSkgPT4KICBuID0+ClJlYWRFeGlmKGZpbGUpCihbaywgdl0pID0+Cihbaywgdl0pID0+Cihbaywgdl0pID0+CihhLCBiKSA9PgooW2ssIHZdKSA9PgogIG1haW4oLi4uYXJncykKICAoYSwgdikgPT4KICAodiwgcHYsIG8pID0+CiAgKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSBhcmcgPT4KICAuY2xlYW51cCA9ICgpID0+CiAgKC4uLmFyZ3MpID0+CigpID0+CiAgcHV0cyhzKQooKSA9PgogIC5jcmVhdGVXUyA9ICh1cmwsIGNhbGxiYWNrcywgbGlzdGVuKSA9PgogIG91dCA9IHMgPT4KICAobGV2ZWwsIG1lc3NhZ2UpID0+CiAgdXBsb2FkKHJlcSwgcmVzKQogIHByb3h5KHJlcSwgcmVzKQogIGZpbGVzKHJlcSwgcmVzcCkKICBuYW1lID0+CiAgZmlsZSA9PgooYWNjLCBbZmlsZSwgc3RdKSA9PgogIHN0cmluZyhhLCBiKQogIG51bWJlcihhLCBiKQooW25hbWUsIG9ial0pID0+CiAgb25Db25uZWN0KHdzLCByZXEpCiAgLnNlbmRDb21tYW5kID0gZnVuY3Rpb24oZGF0YSkKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25IdHRwKHdzLCByZXEsIHJlc3ApCiAgb25PcGVuKG5hbWUsIGZpbGVuYW1lKQogIG9uQ29udGVudChuYW1lLCBkYXRhKQogIG9uQ2xvc2UobmFtZSkKICBvbkZpbmFsaXplKCkKICAobWF0Y2gsIHAxLCBwMCwgcDIsIHAzLCBvZmZzZXQpID0+CiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBnZXQgY29ubmVjdGlvbnMoKQogIGdldCBieV91dWlkKCkKICB1dWlkKGRhdGEpCiAgb25GZChmZCwgcmQsIHdyKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgcXVpdCh3aHkpAAAAAAAAAABeAwAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					128,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/misc.js",
						"symkeys":
						[
							[
								100,
								120
							],
							[
								340,
								356
							],
							[
								410,
								429
							],
							[
								464,
								480
							],
							[
								540,
								556
							],
							[
								577,
								581
							],
							[
								619,
								653
							],
							[
								676,
								708
							],
							[
								731,
								774
							],
							[
								2603,
								2622
							],
							[
								2720,
								2736
							],
							[
								2798,
								2816
							],
							[
								2880,
								2899
							],
							[
								2964,
								2973
							],
							[
								3028,
								3045
							],
							[
								3108,
								3125
							],
							[
								3188,
								3202
							],
							[
								3262,
								3277
							],
							[
								3338,
								3353
							],
							[
								3414,
								3422
							],
							[
								3476,
								3488
							],
							[
								3546,
								3556
							],
							[
								3612,
								3623
							],
							[
								3680,
								3688
							],
							[
								3742,
								3764
							],
							[
								3832,
								3847
							],
							[
								3908,
								3930
							],
							[
								3998,
								4014
							],
							[
								4076,
								4092
							],
							[
								4154,
								4166
							],
							[
								4224,
								4236
							],
							[
								4294,
								4307
							],
							[
								4366,
								4384
							],
							[
								4442,
								4460
							],
							[
								4524,
								4546
							],
							[
								4614,
								4641
							],
							[
								4714,
								4731
							],
							[
								4788,
								4805
							],
							[
								4862,
								4879
							],
							[
								4926,
								4942
							],
							[
								5025,
								5041
							],
							[
								5113,
								5129
							],
							[
								5201,
								5218
							],
							[
								5275,
								5295
							],
							[
								5354,
								5374
							],
							[
								5533,
								5552
							],
							[
								5628,
								5635
							],
							[
								5664,
								5684
							],
							[
								5754,
								5769
							],
							[
								5830,
								5856
							],
							[
								5934,
								5957
							],
							[
								7671,
								7710
							],
							[
								8132,
								8144
							],
							[
								8178,
								8190
							],
							[
								8206,
								8219
							],
							[
								8400,
								8446
							],
							[
								8471,
								8481
							],
							[
								8531,
								8540
							],
							[
								8642,
								8649
							],
							[
								8698,
								8722
							],
							[
								8882,
								8901
							],
							[
								9015,
								9023
							],
							[
								9070,
								9089
							],
							[
								9185,
								9233
							],
							[
								11447,
								11495
							],
							[
								13032,
								13036
							],
							[
								13067,
								13076
							],
							[
								13214,
								13233
							],
							[
								13753,
								13772
							],
							[
								14442,
								14485
							],
							[
								14902,
								14935
							],
							[
								15213,
								15242
							],
							[
								15289,
								15310
							],
							[
								15339,
								15355
							],
							[
								15448,
								15483
							],
							[
								15523,
								15541
							],
							[
								15779,
								15790
							],
							[
								16041,
								16052
							],
							[
								16155,
								16166
							],
							[
								16317,
								16329
							],
							[
								16439,
								16459
							],
							[
								16557,
								16562
							],
							[
								16630,
								16651
							],
							[
								16675,
								16685
							],
							[
								16724,
								16754
							],
							[
								17080,
								17114
							],
							[
								17421,
								17455
							],
							[
								17675,
								17709
							],
							[
								17775,
								17811
							],
							[
								17886,
								17903
							],
							[
								18062,
								18099
							],
							[
								18100,
								18114
							],
							[
								18120,
								18124
							],
							[
								18199,
								18231
							],
							[
								18259,
								18285
							],
							[
								18610,
								18632
							],
							[
								18683,
								18699
							],
							[
								18714,
								18721
							],
							[
								18749,
								18765
							],
							[
								18806,
								18834
							],
							[
								19053,
								19070
							],
							[
								19071,
								19080
							],
							[
								19132,
								19149
							],
							[
								19150,
								19159
							],
							[
								19219,
								19236
							],
							[
								19237,
								19260
							],
							[
								19316,
								19340
							],
							[
								21967,
								21995
							],
							[
								22426,
								22430
							],
							[
								22558,
								22571
							],
							[
								22887,
								22899
							],
							[
								23162,
								23175
							],
							[
								23280,
								23294
							],
							[
								24187,
								24215
							],
							[
								24331,
								24344
							],
							[
								24456,
								24482
							],
							[
								24677,
								24725
							],
							[
								24773,
								24885
							],
							[
								24990,
								25013
							],
							[
								25157,
								25209
							],
							[
								25303,
								25319
							],
							[
								25403,
								25414
							],
							[
								25527,
								25531
							],
							[
								25810,
								25843
							],
							[
								25957,
								26009
							],
							[
								26183,
								26219
							],
							[
								26376,
								26392
							],
							[
								26410,
								26432
							],
							[
								26545,
								26551
							],
							[
								27913,
								27955
							],
							[
								28150,
								28181
							],
							[
								28231,
								28273
							],
							[
								28393,
								28417
							],
							[
								28637,
								28647
							],
							[
								28700,
								28704
							],
							[
								28743,
								28770
							],
							[
								28817,
								28829
							],
							[
								28899,
								28911
							],
							[
								28974,
								28999
							],
							[
								29044,
								29075
							],
							[
								29086,
								29103
							],
							[
								29244,
								29279
							],
							[
								29327,
								29354
							],
							[
								29445,
								29483
							],
							[
								29692,
								29750
							],
							[
								30016,
								30024
							],
							[
								30123,
								30148
							],
							[
								30233,
								30275
							],
							[
								30409,
								30449
							],
							[
								33378,
								33404
							],
							[
								33423,
								33427
							],
							[
								33514,
								33540
							],
							[
								33774,
								33798
							],
							[
								33991,
								34014
							],
							[
								34116,
								34157
							],
							[
								34306,
								34310
							],
							[
								34351,
								34359
							],
							[
								34388,
								34392
							],
							[
								34767,
								34780
							],
							[
								34833,
								34853
							],
							[
								35049,
								35063
							],
							[
								35090,
								35156
							],
							[
								35158,
								35162
							],
							[
								35320,
								35327
							],
							[
								35419,
								35429
							],
							[
								35540,
								35549
							],
							[
								35655,
								35681
							],
							[
								35814,
								35845
							],
							[
								36014,
								36086
							],
							[
								36215,
								36223
							],
							[
								36725,
								36733
							],
							[
								36762,
								36775
							],
							[
								36886,
								36935
							],
							[
								37037,
								37076
							],
							[
								37101,
								37109
							],
							[
								37141,
								37156
							],
							[
								37249,
								37257
							],
							[
								37311,
								37329
							],
							[
								37554,
								37562
							],
							[
								37600,
								37612
							]
						],
						"symlist":
						[
							"slice = (x, s, e) =>",
							"stringify = v =>",
							"formatNumber = n =>",
							"isNative = fn =>",
							" function util()",
							"util",
							"AsyncFunction = async function x()",
							"GeneratorFunction = function* ()",
							"AsyncGeneratorFunction = async function* ()",
							"isAnyArrayBuffer(v)",
							"isArrayBuffer(v)",
							"isBigInt64Array(v)",
							"isBigUint64Array(v)",
							"isDate(v)",
							"isFloat32Array(v)",
							"isFloat64Array(v)",
							"isInt8Array(v)",
							"isInt16Array(v)",
							"isInt32Array(v)",
							"isMap(v)",
							"isPromise(v)",
							"isProxy(v)",
							"isRegExp(v)",
							"isSet(v)",
							"isSharedArrayBuffer(v)",
							"isUint8Array(v)",
							"isUint8ClampedArray(v)",
							"isUint16Array(v)",
							"isUint32Array(v)",
							"isWeakMap(v)",
							"isWeakSet(v)",
							"isDataView(v)",
							"isBooleanObject(v)",
							"isAsyncFunction(v)",
							"isGeneratorFunction(v)",
							"isAsyncGeneratorFunction(v)",
							"isNumberObject(v)",
							"isBigIntObject(v)",
							"isSymbolObject(v)",
							"isNativeError(v)",
							"isMapIterator(v)",
							"isSetIterator(v)",
							"isStringObject(v)",
							"isArrayBufferView(v)",
							"isArgumentsObject(v)",
							"isBoxedPrimitive(v)",
							"ctor =>",
							"isGeneratorObject(v)",
							"isTypedArray(v)",
							"isModuleNamespaceObject(v)",
							" function isObject(arg)",
							" function SyscallError(syscall, errnum)",
							"SyscallError",
							"SyscallError",
							"get message()",
							" function extendArray(proto = Array.prototype)",
							"get last()",
							"at(index)",
							"clear()",
							"findLastIndex(predicate)",
							"findLast(predicate)",
							"unique()",
							"pushUnique(...args)",
							" function toString(arrayBuf, encoding = 'utf-8')",
							" function toArrayBuffer(str, encoding = 'utf-8')",
							"a =>",
							"(c, i) =>",
							" function btoa(bin)",
							" function atob(asc)",
							" function assert(actual, expected, message)",
							" function escape(str, chars = [])",
							" function quote(str, q = '\"')",
							" function memoize(fn)",
							" (n, ...rest) =>",
							" function once(fn, thisArg, memoFn)",
							" function(...args)",
							"callback =>",
							" function()",
							" function()",
							" function(e)",
							" function atexit(fn)",
							"() =>",
							" function waitFor(ms)",
							"resolve =>",
							" function define(obj, ...args)",
							" function weakAssign(obj, ...args)",
							" function getConstructorChain(obj)",
							" function hasPrototype(obj, proto)",
							" function filter(seq, pred, thisArg)",
							"pred = (el, i) =>",
							" (f, arr = [], length = f.length) =>",
							" (...args) =>",
							"a =>",
							" function* split(buf, ...points)",
							"splitAt = (b, pos, len) =>",
							"unique = (arr, cmp) =>",
							" (el, i, arr) =>",
							"item =>",
							" (el, i, arr) =>",
							"getFunctionArguments = fn =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" (red, green, blue) =>",
							"function getAnsiStyles()",
							"value: (red, green, blue) =>",
							"c =>",
							"value: hex =>",
							"character =>",
							"value: hex =>",
							"value: code =>",
							"value: (red, green, blue) =>",
							"value: hex =>",
							" function randInt(...args)",
							" function randFloat(min, max, rng = Math.random)",
							" function randStr(n, set = '_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', rng = Math.random)",
							" function toBigInt(arg)",
							" function lazyProperty(obj, name, getter, opts = {})",
							"async function()",
							" function()",
							"v =>",
							" function replaceProperty(value)",
							" function lazyProperties(obj, gettersObj, opts = {})",
							" function getOpt(options = {}, args)",
							"findOpt = arg =>",
							"([optname, option]) =>",
							"opt =>",
							" function toUnixTime(dateObj, utc = false)",
							" function unixTime(utc = false)",
							" function fromUnixTime(epoch, utc = false)",
							" function range(...args)",
							" (v, k) =>",
							"n =>",
							" function repeater(n, what)",
							"function* ()",
							"function* ()",
							" function repeat(n, what)",
							" function chunkArray(arr, size)",
							"fn = (a, v, i) =>",
							" function camelize(str, delim = '')",
							" (match, p1, p2, offset) =>",
							" function decamelize(str, delim = '-')",
							" function Location(line, column, pos, file, freeze = true)",
							"Location",
							" function format(...args)",
							" function formatWithOptions(opts, ...args)",
							"function formatWithOptionsInternal(o, v)",
							" function isNumeric(value)",
							"v =>",
							" function functionName(fn)",
							" function className(obj)",
							"isArrowFunction = fn =>",
							" function immutableClass (orig, ...proto)",
							"p =>",
							" ctor =>",
							"ctor",
							"imm = base =>",
							"constructor(...args)",
							"isArray = a =>",
							" function arrayFacade(proto, itemFn = (container, i) => container.",
							"(i))",
							"*keys()",
							"*entries()",
							"*values()",
							"forEach(callback, thisArg)",
							"reduce(callback, accu, thisArg)",
							"Location.prototype.clone = function(freeze = false, withFilename = true)",
							"Location",
							"Location",
							" function* ()",
							"Location.prototype.toString = function(opts = {})",
							"Location.prototype.valueOf = function()",
							"Location",
							" function(hint)",
							"Location",
							" function(n, opts)",
							"Location",
							"get offset()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABeAwAATWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+CiAgbiA9PgpSZWFkRXhpZihmaWxlKQooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgooYSwgYikgPT4KKFtrLCB2XSkgPT4KICBtYWluKC4uLmFyZ3MpCiAgKGEsIHYpID0+CiAgKHYsIHB2LCBvKSA9PgogIChtb2R1bGUsIC4uLmFyZ3MpID0+CiAgbSA9PgogIC5zaG93ID0gYXJnID0+CiAgLmNsZWFudXAgPSAoKSA9PgogICguLi5hcmdzKSA9PgooKSA9PgogIHB1dHMocykKKCkgPT4KICAuY3JlYXRlV1MgPSAodXJsLCBjYWxsYmFja3MsIGxpc3RlbikgPT4KICBvdXQgPSBzID0+CiAgKGxldmVsLCBtZXNzYWdlKSA9PgogIHVwbG9hZChyZXEsIHJlcykKICBwcm94eShyZXEsIHJlcykKICBmaWxlcyhyZXEsIHJlc3ApCiAgbmFtZSA9PgogIGZpbGUgPT4KKGFjYywgW2ZpbGUsIHN0XSkgPT4KICBzdHJpbmcoYSwgYikKICBudW1iZXIoYSwgYikKKFtuYW1lLCBvYmpdKSA9PgogIG9uQ29ubmVjdCh3cywgcmVxKQogIC5zZW5kQ29tbWFuZCA9IGZ1bmN0aW9uKGRhdGEpCiAgb25DbG9zZSh3cywgcmVhc29uKQogIG9uSHR0cCh3cywgcmVxLCByZXNwKQogIG9uT3BlbihuYW1lLCBmaWxlbmFtZSkKICBvbkNvbnRlbnQobmFtZSwgZGF0YSkKICBvbkNsb3NlKG5hbWUpCiAgb25GaW5hbGl6ZSgpCiAgKG1hdGNoLCBwMSwgcDAsIHAyLCBwMywgb2Zmc2V0KSA9PgogIG9uTWVzc2FnZSh3cywgZGF0YSkKICBvbkZkKGZkLCByZCwgd3IpCiAgZ2V0IGNvbm5lY3Rpb25zKCkKICBnZXQgYnlfdXVpZCgpCiAgdXVpZChkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIHF1aXQod2h5KQAAAAAAAAAAkA4AAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					129,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/misc.js",
						"symkeys":
						[
							[
								100,
								120
							],
							[
								340,
								356
							],
							[
								410,
								429
							],
							[
								464,
								480
							],
							[
								540,
								556
							],
							[
								577,
								581
							],
							[
								619,
								653
							],
							[
								676,
								708
							],
							[
								731,
								774
							],
							[
								2603,
								2622
							],
							[
								2720,
								2736
							],
							[
								2798,
								2816
							],
							[
								2880,
								2899
							],
							[
								2964,
								2973
							],
							[
								3028,
								3045
							],
							[
								3108,
								3125
							],
							[
								3188,
								3202
							],
							[
								3262,
								3277
							],
							[
								3338,
								3353
							],
							[
								3414,
								3422
							],
							[
								3476,
								3488
							],
							[
								3546,
								3556
							],
							[
								3612,
								3623
							],
							[
								3680,
								3688
							],
							[
								3742,
								3764
							],
							[
								3832,
								3847
							],
							[
								3908,
								3930
							],
							[
								3998,
								4014
							],
							[
								4076,
								4092
							],
							[
								4154,
								4166
							],
							[
								4224,
								4236
							],
							[
								4294,
								4307
							],
							[
								4366,
								4384
							],
							[
								4442,
								4460
							],
							[
								4524,
								4546
							],
							[
								4614,
								4641
							],
							[
								4714,
								4731
							],
							[
								4788,
								4805
							],
							[
								4862,
								4879
							],
							[
								4926,
								4942
							],
							[
								5025,
								5041
							],
							[
								5113,
								5129
							],
							[
								5201,
								5218
							],
							[
								5275,
								5295
							],
							[
								5354,
								5374
							],
							[
								5533,
								5552
							],
							[
								5628,
								5635
							],
							[
								5664,
								5684
							],
							[
								5754,
								5769
							],
							[
								5830,
								5856
							],
							[
								5934,
								5957
							],
							[
								7671,
								7710
							],
							[
								8132,
								8144
							],
							[
								8178,
								8190
							],
							[
								8206,
								8219
							],
							[
								8400,
								8446
							],
							[
								8471,
								8481
							],
							[
								8531,
								8540
							],
							[
								8642,
								8649
							],
							[
								8698,
								8722
							],
							[
								8882,
								8901
							],
							[
								9015,
								9023
							],
							[
								9070,
								9089
							],
							[
								9185,
								9233
							],
							[
								11447,
								11495
							],
							[
								13032,
								13036
							],
							[
								13067,
								13076
							],
							[
								13214,
								13233
							],
							[
								13753,
								13772
							],
							[
								14442,
								14485
							],
							[
								14902,
								14935
							],
							[
								15213,
								15242
							],
							[
								15289,
								15310
							],
							[
								15339,
								15355
							],
							[
								15448,
								15483
							],
							[
								15523,
								15541
							],
							[
								15779,
								15790
							],
							[
								16041,
								16052
							],
							[
								16155,
								16166
							],
							[
								16317,
								16329
							],
							[
								16439,
								16459
							],
							[
								16557,
								16562
							],
							[
								16630,
								16651
							],
							[
								16675,
								16685
							],
							[
								16724,
								16754
							],
							[
								17080,
								17114
							],
							[
								17421,
								17455
							],
							[
								17675,
								17709
							],
							[
								17775,
								17811
							],
							[
								17886,
								17903
							],
							[
								18062,
								18099
							],
							[
								18100,
								18114
							],
							[
								18120,
								18124
							],
							[
								18199,
								18231
							],
							[
								18259,
								18285
							],
							[
								18610,
								18632
							],
							[
								18683,
								18699
							],
							[
								18714,
								18721
							],
							[
								18749,
								18765
							],
							[
								18806,
								18834
							],
							[
								19053,
								19070
							],
							[
								19071,
								19080
							],
							[
								19132,
								19149
							],
							[
								19150,
								19159
							],
							[
								19219,
								19236
							],
							[
								19237,
								19260
							],
							[
								19316,
								19340
							],
							[
								21967,
								21995
							],
							[
								22426,
								22430
							],
							[
								22558,
								22571
							],
							[
								22887,
								22899
							],
							[
								23162,
								23175
							],
							[
								23280,
								23294
							],
							[
								24187,
								24215
							],
							[
								24331,
								24344
							],
							[
								24456,
								24482
							],
							[
								24677,
								24725
							],
							[
								24773,
								24885
							],
							[
								24990,
								25013
							],
							[
								25157,
								25209
							],
							[
								25303,
								25319
							],
							[
								25403,
								25414
							],
							[
								25527,
								25531
							],
							[
								25810,
								25843
							],
							[
								25957,
								26009
							],
							[
								26183,
								26219
							],
							[
								26376,
								26392
							],
							[
								26410,
								26432
							],
							[
								26545,
								26551
							],
							[
								27913,
								27955
							],
							[
								28150,
								28181
							],
							[
								28231,
								28273
							],
							[
								28393,
								28417
							],
							[
								28637,
								28647
							],
							[
								28700,
								28704
							],
							[
								28743,
								28770
							],
							[
								28817,
								28829
							],
							[
								28899,
								28911
							],
							[
								28974,
								28999
							],
							[
								29044,
								29075
							],
							[
								29086,
								29103
							],
							[
								29244,
								29279
							],
							[
								29327,
								29354
							],
							[
								29445,
								29483
							],
							[
								29692,
								29750
							],
							[
								30016,
								30024
							],
							[
								30123,
								30148
							],
							[
								30233,
								30275
							],
							[
								30409,
								30449
							],
							[
								33378,
								33404
							],
							[
								33423,
								33427
							],
							[
								33514,
								33540
							],
							[
								33774,
								33798
							],
							[
								33991,
								34014
							],
							[
								34116,
								34157
							],
							[
								34306,
								34310
							],
							[
								34351,
								34359
							],
							[
								34388,
								34392
							],
							[
								34767,
								34780
							],
							[
								34833,
								34853
							],
							[
								35049,
								35063
							],
							[
								35090,
								35156
							],
							[
								35158,
								35162
							],
							[
								35320,
								35327
							],
							[
								35419,
								35429
							],
							[
								35540,
								35549
							],
							[
								35655,
								35681
							],
							[
								35814,
								35845
							],
							[
								36020,
								36042
							],
							[
								36302,
								36374
							],
							[
								36503,
								36511
							],
							[
								37013,
								37021
							],
							[
								37050,
								37063
							],
							[
								37174,
								37223
							],
							[
								37325,
								37364
							],
							[
								37389,
								37397
							],
							[
								37429,
								37444
							],
							[
								37537,
								37545
							],
							[
								37599,
								37617
							],
							[
								37842,
								37850
							],
							[
								37888,
								37900
							]
						],
						"symlist":
						[
							"slice = (x, s, e) =>",
							"stringify = v =>",
							"formatNumber = n =>",
							"isNative = fn =>",
							" function util()",
							"util",
							"AsyncFunction = async function x()",
							"GeneratorFunction = function* ()",
							"AsyncGeneratorFunction = async function* ()",
							"isAnyArrayBuffer(v)",
							"isArrayBuffer(v)",
							"isBigInt64Array(v)",
							"isBigUint64Array(v)",
							"isDate(v)",
							"isFloat32Array(v)",
							"isFloat64Array(v)",
							"isInt8Array(v)",
							"isInt16Array(v)",
							"isInt32Array(v)",
							"isMap(v)",
							"isPromise(v)",
							"isProxy(v)",
							"isRegExp(v)",
							"isSet(v)",
							"isSharedArrayBuffer(v)",
							"isUint8Array(v)",
							"isUint8ClampedArray(v)",
							"isUint16Array(v)",
							"isUint32Array(v)",
							"isWeakMap(v)",
							"isWeakSet(v)",
							"isDataView(v)",
							"isBooleanObject(v)",
							"isAsyncFunction(v)",
							"isGeneratorFunction(v)",
							"isAsyncGeneratorFunction(v)",
							"isNumberObject(v)",
							"isBigIntObject(v)",
							"isSymbolObject(v)",
							"isNativeError(v)",
							"isMapIterator(v)",
							"isSetIterator(v)",
							"isStringObject(v)",
							"isArrayBufferView(v)",
							"isArgumentsObject(v)",
							"isBoxedPrimitive(v)",
							"ctor =>",
							"isGeneratorObject(v)",
							"isTypedArray(v)",
							"isModuleNamespaceObject(v)",
							" function isObject(arg)",
							" function SyscallError(syscall, errnum)",
							"SyscallError",
							"SyscallError",
							"get message()",
							" function extendArray(proto = Array.prototype)",
							"get last()",
							"at(index)",
							"clear()",
							"findLastIndex(predicate)",
							"findLast(predicate)",
							"unique()",
							"pushUnique(...args)",
							" function toString(arrayBuf, encoding = 'utf-8')",
							" function toArrayBuffer(str, encoding = 'utf-8')",
							"a =>",
							"(c, i) =>",
							" function btoa(bin)",
							" function atob(asc)",
							" function assert(actual, expected, message)",
							" function escape(str, chars = [])",
							" function quote(str, q = '\"')",
							" function memoize(fn)",
							" (n, ...rest) =>",
							" function once(fn, thisArg, memoFn)",
							" function(...args)",
							"callback =>",
							" function()",
							" function()",
							" function(e)",
							" function atexit(fn)",
							"() =>",
							" function waitFor(ms)",
							"resolve =>",
							" function define(obj, ...args)",
							" function weakAssign(obj, ...args)",
							" function getConstructorChain(obj)",
							" function hasPrototype(obj, proto)",
							" function filter(seq, pred, thisArg)",
							"pred = (el, i) =>",
							" (f, arr = [], length = f.length) =>",
							" (...args) =>",
							"a =>",
							" function* split(buf, ...points)",
							"splitAt = (b, pos, len) =>",
							"unique = (arr, cmp) =>",
							" (el, i, arr) =>",
							"item =>",
							" (el, i, arr) =>",
							"getFunctionArguments = fn =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" (red, green, blue) =>",
							"function getAnsiStyles()",
							"value: (red, green, blue) =>",
							"c =>",
							"value: hex =>",
							"character =>",
							"value: hex =>",
							"value: code =>",
							"value: (red, green, blue) =>",
							"value: hex =>",
							" function randInt(...args)",
							" function randFloat(min, max, rng = Math.random)",
							" function randStr(n, set = '_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', rng = Math.random)",
							" function toBigInt(arg)",
							" function lazyProperty(obj, name, getter, opts = {})",
							"async function()",
							" function()",
							"v =>",
							" function replaceProperty(value)",
							" function lazyProperties(obj, gettersObj, opts = {})",
							" function getOpt(options = {}, args)",
							"findOpt = arg =>",
							"([optname, option]) =>",
							"opt =>",
							" function toUnixTime(dateObj, utc = false)",
							" function unixTime(utc = false)",
							" function fromUnixTime(epoch, utc = false)",
							" function range(...args)",
							" (v, k) =>",
							"n =>",
							" function repeater(n, what)",
							"function* ()",
							"function* ()",
							" function repeat(n, what)",
							" function chunkArray(arr, size)",
							"fn = (a, v, i) =>",
							" function camelize(str, delim = '')",
							" (match, p1, p2, offset) =>",
							" function decamelize(str, delim = '-')",
							" function Location(line, column, pos, file, freeze = true)",
							"Location",
							" function format(...args)",
							" function formatWithOptions(opts, ...args)",
							"function formatWithOptionsInternal(o, v)",
							" function isNumeric(value)",
							"v =>",
							" function functionName(fn)",
							" function className(obj)",
							"isArrowFunction = fn =>",
							" function immutableClass (orig, ...proto)",
							"p =>",
							" ctor =>",
							"ctor",
							"imm = base =>",
							"constructor(...args)",
							"isArray = a =>",
							" function arrayFacade(proto, itemFn = (container, i) => container.",
							"(i))",
							"*keys()",
							"*entries()",
							"*values()",
							"forEach(callback, thisArg)",
							"reduce(callback, accu, thisArg)",
							" function bits(buffer)",
							"Location.prototype.clone = function(freeze = false, withFilename = true)",
							"Location",
							"Location",
							" function* ()",
							"Location.prototype.toString = function(opts = {})",
							"Location.prototype.valueOf = function()",
							"Location",
							" function(hint)",
							"Location",
							" function(n, opts)",
							"Location",
							"get offset()"
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "lib/misc.js",
			"settings":
			{
				"buffer_size": 37938,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAOKCAAAAAAAA44IAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4oIAAAAAAADiggAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"paste",
					null,
					"AQAAAOOCAAAAAAAAuYQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA44IAAAAAAADjggAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"paste",
					null,
					"AgAAALmEAAAAAAAA24gAAAAAAAAAAAAA24gAAAAAAADbiAAAAAAAAAEAAAAK",
					"AQAAAAAAAAABAAAAuoQAAAAAAAC5hAAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "\nexport"
					},
					"BwAAANuIAAAAAAAA3IgAAAAAAAAAAAAA3IgAAAAAAADdiAAAAAAAAAAAAADdiAAAAAAAAN6IAAAAAAAAAAAAAN6IAAAAAAAA34gAAAAAAAAAAAAA34gAAAAAAADgiAAAAAAAAAAAAADgiAAAAAAAAOGIAAAAAAAAAAAAAOGIAAAAAAAA4ogAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA24gAAAAAAADbiAAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": " c"
					},
					"AgAAAOKIAAAAAAAA44gAAAAAAAAAAAAA44gAAAAAAADkiAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4ogAAAAAAADiiAAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "ont"
					},
					"AwAAAOSIAAAAAAAA5YgAAAAAAAAAAAAA5YgAAAAAAADmiAAAAAAAAAAAAADmiAAAAAAAAOeIAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5IgAAAAAAADkiAAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOeIAAAAAAAA6IgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA54gAAAAAAADniAAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					2,
					"left_delete",
					null,
					"AgAAAOeIAAAAAAAA54gAAAAAAAABAAAAIOaIAAAAAAAA5ogAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAA6IgAAAAAAADoiAAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": "st"
					},
					"AgAAAOaIAAAAAAAA54gAAAAAAAAAAAAA54gAAAAAAADoiAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5ogAAAAAAADmiAAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": " isArray"
					},
					"CAAAAOiIAAAAAAAA6YgAAAAAAAAAAAAA6YgAAAAAAADqiAAAAAAAAAAAAADqiAAAAAAAAOuIAAAAAAAAAAAAAOuIAAAAAAAA7IgAAAAAAAAAAAAA7IgAAAAAAADtiAAAAAAAAAAAAADtiAAAAAAAAO6IAAAAAAAAAAAAAO6IAAAAAAAA74gAAAAAAAAAAAAA74gAAAAAAADwiAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6IgAAAAAAADoiAAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAPCIAAAAAAAA8YgAAAAAAAAAAAAA8YgAAAAAAADyiAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8IgAAAAAAADwiAAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPKIAAAAAAAA84gAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8ogAAAAAAADyiAAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAAPOIAAAAAAAA9IgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA84gAAAAAAADziAAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": " =>"
					},
					"AwAAAPSIAAAAAAAA9YgAAAAAAAAAAAAA9YgAAAAAAAD2iAAAAAAAAAAAAAD2iAAAAAAAAPeIAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9IgAAAAAAAD0iAAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": " Array.isAr"
					},
					"CwAAAPeIAAAAAAAA+IgAAAAAAAAAAAAA+IgAAAAAAAD5iAAAAAAAAAAAAAD5iAAAAAAAAPqIAAAAAAAAAAAAAPqIAAAAAAAA+4gAAAAAAAAAAAAA+4gAAAAAAAD8iAAAAAAAAAAAAAD8iAAAAAAAAP2IAAAAAAAAAAAAAP2IAAAAAAAA/ogAAAAAAAAAAAAA/ogAAAAAAAD/iAAAAAAAAAAAAAD/iAAAAAAAAACJAAAAAAAAAAAAAACJAAAAAAAAAYkAAAAAAAAAAAAAAYkAAAAAAAACiQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA94gAAAAAAAD3iAAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "ray"
					},
					"AwAAAAKJAAAAAAAAA4kAAAAAAAAAAAAAA4kAAAAAAAAEiQAAAAAAAAAAAAAEiQAAAAAAAAWJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAokAAAAAAAACiQAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAAWJAAAAAAAAB4kAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABYkAAAAAAAAFiQAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAAAaJAAAAAAAAB4kAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABokAAAAAAAAGiQAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAAiJAAAAAAAACYkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACIkAAAAAAAAIiQAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAAqJAAAAAAAAC4kAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACokAAAAAAAAKiQAAAAAAAAAAAAAAAAAA"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAAqJAAAAAAAAC4kAAAAAAAAAAAAAC4kAAAAAAAAMiQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACokAAAAAAAAKiQAAAAAAAAAAAAAAAAAA"
				],
				[
					44,
					1,
					"paste",
					null,
					"AQAAAAuJAAAAAAAArIwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAC4kAAAAAAAALiQAAAAAAAAAAAAAAAAAA"
				],
				[
					55,
					1,
					"paste",
					null,
					"AQAAAK2MAAAAAAAAzI0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArYwAAAAAAACtjAAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAMyNAAAAAAAAzY0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzI0AAAAAAADMjQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "upload-server.js",
			"settings":
			{
				"buffer_size": 15672,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAAFoxAAAAAAAAWzEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWjEAAAAAAABaMQAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": "|util)"
					},
					"BgAAAF4xAAAAAAAAXzEAAAAAAAAAAAAAXzEAAAAAAABgMQAAAAAAAAAAAABgMQAAAAAAAGExAAAAAAAAAAAAAGExAAAAAAAAYjEAAAAAAAAAAAAAYjEAAAAAAABjMQAAAAAAAAAAAABjMQAAAAAAAGQxAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXjEAAAAAAABeMQAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"js",
				"Pretty JSON: Format JSON"
			],
			[
				"deb",
				"Preferences: Debugger Settings"
			],
			[
				"pretti",
				"JsPrettier: Format Code"
			],
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"install ",
				"Package Control: Install Package"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"prett",
				"JsPrettier: Format Code"
			],
			[
				"prettier",
				"JsPrettier: Format Code"
			],
			[
				"isntall",
				"Package Control: Install Package"
			],
			[
				"fo",
				"Format CSS: Expanded"
			],
			[
				"forma",
				"Format CSS: Expanded"
			],
			[
				"css",
				"Format CSS: Expanded"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"tidy",
				"Tidy CSS"
			],
			[
				"edut ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"build",
				"Build With: prettier ${file_path}"
			],
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"",
				"Bookmarks: Select Previous"
			],
			[
				"schem",
				"Schemr: Random scheme"
			],
			[
				"extra",
				"Extract Sublime Package: Extract all packages"
			],
			[
				"Package Control: ",
				"Package Control: List Packages"
			],
			[
				"extrac",
				"Extract Sublime Package: Extract all packages"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"packa",
				"Install Package Control"
			],
			[
				"edit",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"schemeed",
				"SchemeEditor: Edit Scheme (file picker)"
			],
			[
				"scheme",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"repo",
				"Package Control: Remove Repository"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"upgra",
				"Package Control: Upgrade Package"
			],
			[
				"adv",
				"Package Control: Advanced Install Package"
			],
			[
				"ad",
				"Package Control: Advanced Install Package"
			],
			[
				"adva",
				"Package Control: Advanced Install Package"
			],
			[
				"edi",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"edit ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"remove pac",
				"Package Control: Remove Package"
			],
			[
				"outl",
				"Browse Mode: Outline (Right)"
			],
			[
				"debugger",
				"Debugger: Add or Select Configuration"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 442.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv",
		"/home/roman/Projects/plot-cv/leafletjs.com",
		"/home/roman/Projects/plot-cv/lib",
		"/home/roman/Projects/plot-cv/lib/xml"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/upload.html",
		"/home/roman/Projects/plot-cv/xml2react.js",
		"/home/roman/Projects/plot-cv/xml2js.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-hash.c",
		"/home/roman/Projects/plot-cv/lib/dom/preactComponent.js",
		"/home/roman/Projects/plot-cv/upload.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/xpath.js",
		"/home/roman/Projects/plot-cv/lib/eagle/node.js",
		"/home/roman/Projects/plot-cv/lib/eagle/document.js",
		"/home/roman/Projects/plot-cv/test-eagle.js",
		"/home/roman/Projects/plot-cv/lib/util.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/lib/eagle/ref.js",
		"/home/roman/Projects/plot-cv/lib/eagle/nodeMap.js",
		"/home/roman/Projects/plot-cv/lib/eagle/nodeList.js",
		"/home/roman/Projects/plot-cv/lib/eagle/element.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-xml.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fs.js",
		"/home/roman/Projects/plot-cv/resolve-imports.js",
		"/home/roman/Projects/plot-cv/package.json",
		"/home/roman/Projects/plot-cv/lib/eagle/svgRenderer.js",
		"/home/roman/Projects/plot-cv/lib/eagle/boardRenderer.js",
		"/home/roman/Projects/plot-cv/lib/mmap.js",
		"/home/roman/Projects/plot-cv/upload-server.js",
		"/home/roman/Projects/plot-cv/eagle-shell.js",
		"/home/roman/Projects/plot-cv/lib/json/path.js",
		"/home/roman/Projects/plot-cv/lib/pointer.js",
		"/home/roman/Projects/plot-cv/eagle-query.js",
		"/home/roman/Projects/plot-cv/cli-helpers.js",
		"/home/roman/Projects/plot-cv/ast-shell.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/LCCV/include/lccv.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_raspi_cam.cpp",
		"/home/roman/Projects/plot-cv/takephoto.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/extendArray.js",
		"/home/roman/Projects/plot-cv/lib/xml.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/path.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/path.c",
		"/home/roman/Projects/plot-cv/clang-ast.js",
		"/home/roman/Projects/plot-cv/lib/misc.js",
		"/home/roman/Projects/plot-cv/lib/xml/xpath.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/utils.h",
		"/home/roman/Projects/plot-cv/lib/eagle/common.js",
		"/home/roman/Projects/plot-cv/lib/eagle/schematicRenderer.js",
		"/home/roman/Projects/plot-cv/CMakeLists.txt",
		"/usr/local/include/ffi.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/qjsm.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-ffi/ffi.c",
		"/home/roman/Projects/plot-cv/index.html",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-server-http.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_libcamera_app.cpp",
		"/usr/include/postgresql/libpq-fe.h",
		"/home/roman/Projects/plot-cv/psql.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/element.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/wire.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/text.js",
		"/home/roman/Projects/plot-cv/test-psql.js",
		"/home/roman/Projects/plot-cv/lib/eagle/renderer.js",
		"/home/roman/Projects/plot-cv/eagle2svg.js",
		"/home/roman/Projects/plot-cv/test-rpc.js",
		"/home/roman/Projects/plot-cv/lib/eagle/project.js",
		"/home/roman/Projects/plot-cv/lib/preact-render-to-string.js",
		"/home/roman/Projects/plot-cv/io-helpers.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/symbol.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/instance.js",
		"/home/roman/Projects/plot-cv/lib/repeater/react-hooks.js",
		"/home/roman/Projects/plot-cv/lib/functional.js",
		"/home/roman/Projects/plot-cv/main.js",
		"/home/roman/Projects/plot-cv/list.html",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/repl.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/drawing.js",
		"/home/roman/Projects/plot-cv/lib/hooks/useTrkl.js",
		"/home/roman/Projects/plot-cv/lib/json/pathMapper.js",
		"/home/janos/Sources/plot-cv/upload.html",
		"/home/janos/Sources/plot-cv/.cmds",
		"/home/janos/Sources/plot-cv/.cmake-format",
		"/home/janos/Sources/plot-cv/.cproject",
		"/home/janos/Sources/plot-cv/test-rpc.js",
		"/home/janos/Sources/plot-cv/test-video.js",
		"/home/janos/Sources/plot-cv/imagePipeline.js",
		"/home/janos/Sources/plot-cv/test-image.js",
		"/home/janos/Sources/plot-cv/midi-tcp.js",
		"/home/janos/Sources/plot-cv/list-proxies.js",
		"/home/janos/Sources/plot-cv/libraries.js",
		"/home/janos/Sources/plot-cv/grammar-geda-netlist.js",
		"/home/janos/Sources/plot-cv/test-membrane.js",
		"/home/janos/Sources/plot-cv/eagle-server.js",
		"/home/janos/Sources/plot-cv/eagle-query.js",
		"/home/janos/Sources/plot-cv/eagle-commands.js",
		"/home/janos/Sources/plot-cv/check-discogs.js",
		"/home/janos/Sources/plot-cv/debugger-server.js",
		"/home/janos/Sources/plot-cv/adsb-server.js",
		"/home/janos/Sources/plot-cv/adsb-client.js",
		"/home/janos/Sources/plot-cv/worker.js",
		"/home/janos/Sources/plot-cv/time-helpers.js",
		"/home/janos/Sources/plot-cv/test-umat.js",
		"/home/janos/Sources/plot-cv/test-quickjs.js",
		"/home/janos/Sources/plot-cv/ws-worker.js",
		"/home/janos/Sources/plot-cv/wscli.js",
		"/home/janos/Sources/plot-cv/test-worker.js",
		"/home/janos/Sources/plot-cv/test-sockets.js",
		"/home/janos/Sources/plot-cv/quickjs/qjs-modules/src/utils.c",
		"/home/janos/Sources/plot-cv/quickjs/qjs-net/jsutils.c",
		"/home/janos/Sources/plot-cv/quickjs/qjs-net/jsutils.h",
		"/home/janos/Sources/plot-cv/test-net.js",
		"/home/janos/Sources/plot-cv/test-nanovg.js",
		"/home/janos/Sources/plot-cv/test.js",
		"/home/janos/Sources/plot-cv/test-imread.js",
		"/home/janos/Sources/plot-cv/test-glfw.js",
		"/home/janos/Sources/plot-cv/test-features2d.js",
		"/home/janos/Sources/plot-cv/test-diagram.js",
		"/home/janos/Sources/plot-cv/test-cv.js",
		"/home/janos/Sources/plot-cv/test-cli.js",
		"/home/janos/Sources/plot-cv/test-minnet.js",
		"/home/janos/Sources/plot-cv/test-midi.js",
		"/home/janos/Sources/plot-cv/search-engine.js",
		"/home/janos/Sources/plot-cv/plot-cv.js",
		"/home/janos/Sources/plot-cv/param.js",
		"/home/janos/Sources/plot-cv/myworker.js",
		"/home/janos/Sources/plot-cv/make-bitmap.js",
		"/home/janos/Sources/plot-cv/draw-utils.js",
		"/home/janos/Sources/plot-cv/doc-scanner.js",
		"/home/janos/Sources/plot-cv/diagram.js",
		"/home/janos/Sources/plot-cv/cv-shell.js",
		"/home/janos/Sources/plot-cv/ast-shell.js",
		"/home/janos/Sources/plot-cv/test-eagle.js",
		"/home/janos/Sources/plot-cv/eagle-worker.js"
	],
	"find":
	{
		"height": 45.0
	},
	"find_in_files":
	{
		"height": 185.0,
		"where_history":
		[
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,,-*/libwebsockets/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/build-*,-*/txiki*/*,-*/qnode*/*,-*/opencv/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,,-*/libwebsockets/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/build-*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,,-*/libwebsockets/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/build-*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/build-*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,-*/indexex*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/indexex*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/indexex/*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnoed*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/qjs-cache*/*,-*/txiki*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,*/quickjs-2*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs/*,-*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,*.cmake,-*/node_modules/*,-*/quickjs/*,-*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs/*,-*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp",
			"/home/roman/Projects/plot-cv,*.js,*.cpp,*.hpp,-*/node_modules/*,-*/quickjs/*,-*/acorn/*",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs/*,-*/acorn/*",
			"/home/roman/Projects/plot-cv,/home/roman/Projects/plot-cv/lib,*.js,-*/node_modules/*,-*/quickjs/*,-*/acorn/*",
			"/home/roman/Projects/plot-cv,/home/roman/Projects/plot-cv/lib,*.js,-*/node_modules/*,-*/quickjs/*",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs/*",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*",
			"/home/roman/Projects/plot-cv,*.js",
			"/home/roman/Projects/plot-cv/quickjs,*.c,*.h",
			"/home/roman/Projects/plot-cv/src,*.cpp,*.hpp",
			"/home/roman/Projects/plot-cv/quickjs,*.c,*.h"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"rrayFacade",
			"rrayFacadew",
			"isArrowFunct",
			"immutableClass",
			"  }catch(e) { \n",
			"toStringTag",
			"'xpath'",
			"'xpath'0",
			"data-path",
			"lookup",
			"new EaglePath",
			"new EagleReference",
			"'raw2elem",
			"raw2elem",
			"createWS",
			"lws_genhash_init",
			"GetParts",
			"GetPart",
			"ShowPar",
			"ShowPart",
			"elements'",
			"'packages'",
			"'sheets'",
			"lookup",
			"ShowPar",
			"sheets",
			"Pointer",
			"lazyProper",
			"lazyInit",
			"^(\\s*)(console.log)",
			"^\\s*console.log",
			"down\\(",
			"walk",
			"lookup",
			"ref",
			"deref",
			"\\.apply",
			"lookup",
			"depth",
			"className",
			"defineGetter",
			"Util\\.",
			"isNumeric",
			"isNumber",
			"function is",
			"isNumber",
			"Util\\.",
			"lookup",
			"sheets",
			"LocationString",
			"Table",
			"jsm_stack_load",
			"JS_GetEx",
			"finalizer",
			"js_libcamera_app_finalizer",
			"JS_Throw",
			"new RGBA\\((.*)\\)",
			"palette",
			"stack_load",
			"JS_NewString",
			"setPalette",
			"call_func",
			"call_function",
			"rtype",
			"ffi_type_s",
			"function_s",
			"ffi_type_pointer",
			"call_function",
			"ffi_type_pointer",
			"PQerrorMessage",
			"PQerror",
			"PGresult \\*",
			"PQresult",
			"PQconnect",
			"getOpt",
			"isString",
			"Type",
			"end-of",
			"proj",
			"cv::",
			"MakeFFI",
			"newProject",
			"input",
			"Util\\.getArgv",
			"Util\\.",
			"className",
			" }",
			"Util\\.",
			"memoize",
			"Util\\.",
			"extendArray",
			"FindProjects",
			"extendArray",
			"path",
			"POST body",
			"'ws'",
			"files",
			"rpc",
			"test-rpc",
			"rpc",
			"server",
			"net\\.",
			"toString\\(data",
			"toString",
			"next",
			"'Fixed'",
			"font-family",
			"render",
			"data-value",
			"WriteFile",
			"data-value",
			"fromXML",
			"\"'\"",
			"this.doc.lay",
			"WriteFile",
			"console.log\\([^, '\"`]*tagName",
			"console.log\\([^, ]*tagName",
			"console.log\\(.*tagName",
			"console.log(.*tagName",
			"console.*'element'",
			"'element'",
			"EagleElement.getBounds",
			"\\('element'",
			"'element'",
			"^(\\s*)console.log",
			");\n",
			"this.layers",
			"signals"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"\\1//\\2",
			"",
			"[\\1]",
			"doc",
			"cv.",
			"upload-server",
			"",
			".getLibrary(\\1)",
			"\\1//\\2",
			"uint32",
			"lstat",
			"ordersGetList",
			"getCacheValue",
			"tlsv",
			"\\1",
			"http",
			"fs.",
			",\\n    '-H', ",
			"Size.getOther(",
			"matrix",
			" cv::CV_",
			"CV_RGB(0, 0, 0)",
			"",
			"point",
			"\\\\D",
			"\\\\d",
			"\\.deref",
			"is_alphanumeric_char",
			"is_whitespace_char",
			"length",
			"{ const",
			"{ return",
			"const  {flags}=this;\\nreturn flags",
			"defines",
			"",
			"fs.\\1Sync",
			"define",
			",",
			"file",
			"target_compile_definitions",
			"msg",
			"PmDeviceInfo",
			"export function",
			"libportmidi",
			"\\1//\\2",
			"text",
			"\\1",
			"export function",
			"export &",
			"fs.",
			"array",
			"fs",
			"black",
			"white",
			"input.",
			"'save'",
			"globalThis.",
			"fsPromises",
			"\\n\\n",
			"}\\n",
			"vector",
			"std::vector<",
			"log.info",
			"waitFor",
			"'",
			"'\\\\x\\1'",
			"'\\x\\1'",
			"200",
			"120",
			"out += ",
			"",
			"mask",
			"mas",
			"",
			"['.",
			"currentFile",
			"/* prettier-ignore */ import",
			"ShowSource",
			"/* prettier-ignore */ Object.assign(globalThis",
			"component",
			"",
			"token.id",
			"loc",
			"lexeme",
			"body",
			"toArrayBuffer",
			"toString",
			"waitRead",
			"dbg",
			"toString",
			"this.#events",
			"%2i",
			"-9s",
			"proc",
			"fs.",
			"jsm_module_record",
			"stepMode",
			"this.",
			"= require('\\1')",
			"const ",
			"fs",
			"ReadImport",
			"1000",
			"1000l",
			"SockAddr",
			"writeFileSync(",
			"...args",
			"iconProps",
			"js_module_get",
			"js_module_find",
			"jsm_load_module",
			"js_\\1",
			"js_load_\\1",
			"js_eval_binary",
			"ifndef NDEBUG",
			"lex->start",
			"lex->byte_length",
			"lex->pos",
			"lex->token_id",
			"lex->byte_length",
			"lex->pos",
			"tokens",
			"this.columns",
			"terminal.flush()",
			"f.flush()",
			"f.puts(",
			"500",
			"\\1this.\\2"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3743,
						"regions":
						{
							"col_0000FFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										2072,
										2076
									],
									[
										2121,
										2125
									],
									[
										2223,
										2227
									]
								],
								"scope": "col_0000FFFF"
							},
							"col_0000FFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_0000FFFF_circle.png",
								"regions":
								[
									[
										2057,
										2057
									],
									[
										2099,
										2099
									],
									[
										2201,
										2201
									]
								],
								"scope": "col_gutter"
							},
							"col_008000FF":
							{
								"flags": 16,
								"regions":
								[
									[
										2065,
										2070
									],
									[
										2114,
										2119
									],
									[
										2216,
										2221
									]
								],
								"scope": "col_008000FF"
							},
							"col_008000FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_008000FF_circle.png",
								"regions":
								[
									[
										2057,
										2057
									],
									[
										2099,
										2099
									],
									[
										2201,
										2201
									]
								],
								"scope": "col_gutter"
							},
							"col_FF0000FF":
							{
								"flags": 16,
								"regions":
								[
									[
										2060,
										2063
									],
									[
										2109,
										2112
									],
									[
										2211,
										2214
									]
								],
								"scope": "col_FF0000FF"
							},
							"col_FF0000FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FF0000FF_circle.png",
								"regions":
								[
									[
										2057,
										2057
									],
									[
										2099,
										2099
									],
									[
										2201,
										2201
									]
								],
								"scope": "col_gutter"
							}
						},
						"selection":
						[
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": "/home/roman/Projects/plot-cv/lib/misc.js",
							"function_name_status_row": 0,
							"outline_rename_mode": false,
							"symkeys":
							[
								[
									100,
									120
								],
								[
									340,
									356
								],
								[
									410,
									429
								],
								[
									464,
									480
								],
								[
									540,
									556
								],
								[
									577,
									581
								],
								[
									619,
									653
								],
								[
									676,
									708
								],
								[
									731,
									774
								],
								[
									2603,
									2622
								],
								[
									2720,
									2736
								],
								[
									2798,
									2816
								],
								[
									2880,
									2899
								],
								[
									2964,
									2973
								],
								[
									3028,
									3045
								],
								[
									3108,
									3125
								],
								[
									3188,
									3202
								],
								[
									3262,
									3277
								],
								[
									3338,
									3353
								],
								[
									3414,
									3422
								],
								[
									3476,
									3488
								],
								[
									3546,
									3556
								],
								[
									3612,
									3623
								],
								[
									3680,
									3688
								],
								[
									3742,
									3764
								],
								[
									3832,
									3847
								],
								[
									3908,
									3930
								],
								[
									3998,
									4014
								],
								[
									4076,
									4092
								],
								[
									4154,
									4166
								],
								[
									4224,
									4236
								],
								[
									4294,
									4307
								],
								[
									4366,
									4384
								],
								[
									4442,
									4460
								],
								[
									4524,
									4546
								],
								[
									4614,
									4641
								],
								[
									4714,
									4731
								],
								[
									4788,
									4805
								],
								[
									4862,
									4879
								],
								[
									4926,
									4942
								],
								[
									5025,
									5041
								],
								[
									5113,
									5129
								],
								[
									5201,
									5218
								],
								[
									5275,
									5295
								],
								[
									5354,
									5374
								],
								[
									5533,
									5552
								],
								[
									5628,
									5635
								],
								[
									5664,
									5684
								],
								[
									5754,
									5769
								],
								[
									5830,
									5856
								],
								[
									5934,
									5957
								],
								[
									7671,
									7710
								],
								[
									8132,
									8144
								],
								[
									8178,
									8190
								],
								[
									8206,
									8219
								],
								[
									8400,
									8446
								],
								[
									8471,
									8481
								],
								[
									8531,
									8540
								],
								[
									8642,
									8649
								],
								[
									8698,
									8722
								],
								[
									8882,
									8901
								],
								[
									9015,
									9023
								],
								[
									9070,
									9089
								],
								[
									9185,
									9233
								],
								[
									11447,
									11495
								],
								[
									13032,
									13036
								],
								[
									13067,
									13076
								],
								[
									13214,
									13233
								],
								[
									13753,
									13772
								],
								[
									14442,
									14485
								],
								[
									14902,
									14935
								],
								[
									15213,
									15242
								],
								[
									15289,
									15310
								],
								[
									15339,
									15355
								],
								[
									15448,
									15483
								],
								[
									15523,
									15541
								],
								[
									15779,
									15790
								],
								[
									16041,
									16052
								],
								[
									16155,
									16166
								],
								[
									16317,
									16329
								],
								[
									16439,
									16459
								],
								[
									16557,
									16562
								],
								[
									16630,
									16651
								],
								[
									16675,
									16685
								],
								[
									16724,
									16754
								],
								[
									17080,
									17114
								],
								[
									17421,
									17455
								],
								[
									17675,
									17709
								],
								[
									17775,
									17811
								],
								[
									17886,
									17903
								],
								[
									18062,
									18099
								],
								[
									18100,
									18114
								],
								[
									18120,
									18124
								],
								[
									18199,
									18231
								],
								[
									18259,
									18285
								],
								[
									18610,
									18632
								],
								[
									18683,
									18699
								],
								[
									18714,
									18721
								],
								[
									18749,
									18765
								],
								[
									18806,
									18834
								],
								[
									19053,
									19070
								],
								[
									19071,
									19080
								],
								[
									19132,
									19149
								],
								[
									19150,
									19159
								],
								[
									19219,
									19236
								],
								[
									19237,
									19260
								],
								[
									19316,
									19340
								],
								[
									21967,
									21995
								],
								[
									22426,
									22430
								],
								[
									22558,
									22571
								],
								[
									22887,
									22899
								],
								[
									23162,
									23175
								],
								[
									23280,
									23294
								],
								[
									24187,
									24215
								],
								[
									24331,
									24344
								],
								[
									24456,
									24482
								],
								[
									24677,
									24725
								],
								[
									24773,
									24885
								],
								[
									24990,
									25013
								],
								[
									25157,
									25209
								],
								[
									25303,
									25319
								],
								[
									25403,
									25414
								],
								[
									25527,
									25531
								],
								[
									25810,
									25843
								],
								[
									25957,
									26009
								],
								[
									26183,
									26219
								],
								[
									26376,
									26392
								],
								[
									26410,
									26432
								],
								[
									26545,
									26551
								],
								[
									27913,
									27955
								],
								[
									28150,
									28181
								],
								[
									28231,
									28273
								],
								[
									28393,
									28417
								],
								[
									28637,
									28647
								],
								[
									28700,
									28704
								],
								[
									28743,
									28770
								],
								[
									28817,
									28829
								],
								[
									28899,
									28911
								],
								[
									28974,
									28999
								],
								[
									29044,
									29075
								],
								[
									29086,
									29103
								],
								[
									29244,
									29279
								],
								[
									29327,
									29354
								],
								[
									29445,
									29483
								],
								[
									29692,
									29750
								],
								[
									30016,
									30024
								],
								[
									30123,
									30148
								],
								[
									30233,
									30275
								],
								[
									30409,
									30449
								],
								[
									33378,
									33404
								],
								[
									33423,
									33427
								],
								[
									33514,
									33540
								],
								[
									33774,
									33798
								],
								[
									33991,
									34014
								],
								[
									34116,
									34157
								],
								[
									34306,
									34310
								],
								[
									34351,
									34359
								],
								[
									34388,
									34392
								],
								[
									34767,
									34780
								],
								[
									34833,
									34853
								],
								[
									35049,
									35063
								],
								[
									35090,
									35156
								],
								[
									35158,
									35162
								],
								[
									35320,
									35327
								],
								[
									35419,
									35429
								],
								[
									35540,
									35549
								],
								[
									35655,
									35681
								],
								[
									35814,
									35845
								],
								[
									36020,
									36042
								],
								[
									36302,
									36374
								],
								[
									36503,
									36511
								],
								[
									37013,
									37021
								],
								[
									37050,
									37063
								],
								[
									37174,
									37223
								],
								[
									37325,
									37364
								],
								[
									37389,
									37397
								],
								[
									37429,
									37444
								],
								[
									37537,
									37545
								],
								[
									37599,
									37617
								],
								[
									37842,
									37850
								],
								[
									37888,
									37900
								]
							],
							"symlist":
							[
								"  slice = (x, s, e) =>",
								"  stringify = v =>",
								"  formatNumber = n =>",
								"  isNative = fn =>",
								"  util()",
								"  util",
								"AsyncFunction = function x()",
								"GeneratorFunction = function*()",
								"AsyncGeneratorFunction = function*()",
								"  isAnyArrayBuffer(v)",
								"  isArrayBuffer(v)",
								"  isBigInt64Array(v)",
								"  isBigUint64Array(v)",
								"  isDate(v)",
								"  isFloat32Array(v)",
								"  isFloat64Array(v)",
								"  isInt8Array(v)",
								"  isInt16Array(v)",
								"  isInt32Array(v)",
								"  isMap(v)",
								"  isPromise(v)",
								"  isProxy(v)",
								"  isRegExp(v)",
								"  isSet(v)",
								"  isSharedArrayBuffer(v)",
								"  isUint8Array(v)",
								"  isUint8ClampedArray(v)",
								"  isUint16Array(v)",
								"  isUint32Array(v)",
								"  isWeakMap(v)",
								"  isWeakSet(v)",
								"  isDataView(v)",
								"  isBooleanObject(v)",
								"  isAsyncFunction(v)",
								"  isGeneratorFunction(v)",
								"  isAsyncGeneratorFunction(v)",
								"  isNumberObject(v)",
								"  isBigIntObject(v)",
								"  isSymbolObject(v)",
								"  isNativeError(v)",
								"  isMapIterator(v)",
								"  isSetIterator(v)",
								"  isStringObject(v)",
								"  isArrayBufferView(v)",
								"  isArgumentsObject(v)",
								"  isBoxedPrimitive(v)",
								"  ctor =>",
								"  isGeneratorObject(v)",
								"  isTypedArray(v)",
								"  isModuleNamespaceObject(v)",
								"  isObject(arg)",
								"SyscallError(syscall, errnum)",
								"SyscallError",
								"SyscallError",
								"  get message()",
								"  extendArray(proto = Array.prototype)",
								"  get last()",
								"  at(index)",
								"  clear()",
								"  findLastIndex(predicate)",
								"  findLast(predicate)",
								"  unique()",
								"  pushUnique(...args)",
								"  toString(arrayBuf, encoding = 'utf-8')",
								"  toArrayBuffer(str, encoding = 'utf-8')",
								"  a =>",
								"(c, i) =>",
								"  btoa(bin)",
								"  atob(asc)",
								"  assert(actual, expected, message)",
								"  escape(str, chars = [])",
								"  quote(str, q = '\"')",
								"  memoize(fn)",
								"\t(n, ...rest) =>",
								"  once(fn, thisArg, memoFn)",
								"\tfunction(...args)",
								"  callback =>",
								"\tfunction()",
								"\tfunction()",
								"\tfunction(e)",
								"  atexit(fn)",
								"() =>",
								"  waitFor(ms)",
								"  resolve =>",
								"  define(obj, ...args)",
								"  weakAssign(obj, ...args)",
								"  getConstructorChain(obj)",
								"  hasPrototype(obj, proto)",
								"  filter(seq, pred, thisArg)",
								"  pred = (el, i) =>",
								"\t(f, arr = [], length = f.length) =>",
								"\t(...args) =>",
								"  a =>",
								"  split(buf, ...points)",
								"  splitAt = (b, pos, len) =>",
								"  unique = (arr, cmp) =>",
								"\t(el, i, arr) =>",
								"  item =>",
								"\t(el, i, arr) =>",
								"  getFunctionArguments = fn =>",
								"\t(offset = 0) =>",
								"\tcode =>",
								"\t(offset = 0) =>",
								"\tcode =>",
								"\t(offset = 0) =>",
								"\t(red, green, blue) =>",
								"  getAnsiStyles()",
								"  value: (red, green, blue) =>",
								"  c =>",
								"  value: hex =>",
								"  character =>",
								"  value: hex =>",
								"  value: code =>",
								"  value: (red, green, blue) =>",
								"  value: hex =>",
								"  randInt(...args)",
								"  randFloat(min, max, rng = Math.random)",
								"  randStr(n, set = '_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', rng = Math.random)",
								"  toBigInt(arg)",
								"  lazyProperty(obj, name, getter, opts = {})",
								"  function()",
								"\tfunction()",
								"  v =>",
								"  replaceProperty(value)",
								"  lazyProperties(obj, gettersObj, opts = {})",
								"  getOpt(options = {}, args)",
								"  findOpt = arg =>",
								"([optname, option]) =>",
								"  opt =>",
								"  toUnixTime(dateObj, utc = false)",
								"  unixTime(utc = false)",
								"  fromUnixTime(epoch, utc = false)",
								"  range(...args)",
								"\t(v, k) =>",
								"  n =>",
								"  repeater(n, what)",
								"()",
								"()",
								"  repeat(n, what)",
								"  chunkArray(arr, size)",
								"  fn = (a, v, i) =>",
								"  camelize(str, delim = '')",
								"\t(match, p1, p2, offset) =>",
								"  decamelize(str, delim = '-')",
								"Location(line, column, pos, file, freeze = true)",
								"Location",
								"  format(...args)",
								"  formatWithOptions(opts, ...args)",
								"  formatWithOptionsInternal(o, v)",
								"  isNumeric(value)",
								"  v =>",
								"  functionName(fn)",
								"  className(obj)",
								"  isArrowFunction = fn =>",
								"  immutableClass (orig, ...proto)",
								"  p =>",
								"\tctor =>",
								"  ctor",
								"  imm = base =>",
								"  constructor(...args)",
								"  isArray = a =>",
								"  arrayFacade(proto, itemFn = (container, i) => container.",
								"(i))",
								"*keys()",
								"*entries()",
								"*values()",
								"  forEach(callback, thisArg)",
								"  reduce(callback, accu, thisArg)",
								"  bits(buffer)",
								"Location.prototype.clone = function(freeze = false, withFilename = true)",
								"Location",
								"Location",
								"()",
								"Location.prototype.toString = function(opts = {})",
								"Location.prototype.valueOf = function()",
								"Location",
								"\tfunction(hint)",
								"Location",
								"\tfunction(n, opts)",
								"Location",
								"  get offset()"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1661114233.63,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "lib/misc.js",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 37938,
						"regions":
						{
							"col_0000FFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										19252,
										19256
									],
									[
										19306,
										19310
									],
									[
										19797,
										19801
									],
									[
										21987,
										21991
									],
									[
										22185,
										22189
									],
									[
										22416,
										22420
									],
									[
										23476,
										23480
									],
									[
										23589,
										23593
									],
									[
										23787,
										23791
									],
									[
										23871,
										23875
									],
									[
										23980,
										23984
									],
									[
										24207,
										24211
									],
									[
										24269,
										24273
									]
								],
								"scope": "col_0000FFFF"
							},
							"col_0000FFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_0000FFFF_circle.png",
								"regions":
								[
									[
										19237,
										19237
									],
									[
										19261,
										19261
									],
									[
										19791,
										19791
									],
									[
										21961,
										21961
									],
									[
										22147,
										22147
									],
									[
										22385,
										22385
									],
									[
										23464,
										23464
									],
									[
										23579,
										23579
									],
									[
										23777,
										23777
									],
									[
										23828,
										23828
									],
									[
										23941,
										23941
									],
									[
										24181,
										24181
									]
								],
								"scope": "col_gutter"
							},
							"col_00200001":
							{
								"flags": 16,
								"regions":
								[
									[
										6109,
										6119
									],
									[
										12265,
										12275
									]
								],
								"scope": "col_00200001"
							},
							"col_00200001_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_00200001_circle.png",
								"regions":
								[
									[
										6066,
										6066
									],
									[
										12248,
										12248
									]
								],
								"scope": "col_gutter"
							},
							"col_008000FF":
							{
								"flags": 16,
								"regions":
								[
									[
										19245,
										19250
									],
									[
										19297,
										19302
									],
									[
										19750,
										19755
									],
									[
										21980,
										21985
									],
									[
										22166,
										22171
									],
									[
										22175,
										22180
									],
									[
										22409,
										22414
									],
									[
										23457,
										23462
									],
									[
										23566,
										23571
									],
									[
										23736,
										23741
									],
									[
										23864,
										23869
									],
									[
										24006,
										24011
									],
									[
										24200,
										24205
									],
									[
										24262,
										24267
									]
								],
								"scope": "col_008000FF"
							},
							"col_008000FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_008000FF_circle.png",
								"regions":
								[
									[
										19237,
										19237
									],
									[
										19261,
										19261
									],
									[
										19744,
										19744
									],
									[
										21961,
										21961
									],
									[
										22147,
										22147
									],
									[
										22385,
										22385
									],
									[
										23445,
										23445
									],
									[
										23556,
										23556
									],
									[
										23726,
										23726
									],
									[
										23828,
										23828
									],
									[
										23941,
										23941
									],
									[
										24181,
										24181
									]
								],
								"scope": "col_gutter"
							},
							"col_00FFFFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										19844,
										19848
									]
								],
								"scope": "col_00FFFFFF"
							},
							"col_00FFFFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_00FFFFFF_circle.png",
								"regions":
								[
									[
										19838,
										19838
									]
								],
								"scope": "col_gutter"
							},
							"col_010101FF":
							{
								"flags": 16,
								"regions":
								[
									[
										19706,
										19711
									],
									[
										20664,
										20669
									],
									[
										22086,
										22091
									]
								],
								"scope": "col_010101FF"
							},
							"col_010101FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_010101FF_circle.png",
								"regions":
								[
									[
										19700,
										19700
									],
									[
										20646,
										20646
									],
									[
										22075,
										22075
									]
								],
								"scope": "col_gutter"
							},
							"col_04000001":
							{
								"flags": 16,
								"regions":
								[
									[
										6121,
										6131
									],
									[
										12355,
										12365
									]
								],
								"scope": "col_04000001"
							},
							"col_04000001_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_04000001_circle.png",
								"regions":
								[
									[
										6066,
										6066
									],
									[
										12336,
										12336
									]
								],
								"scope": "col_gutter"
							},
							"col_80000001":
							{
								"flags": 16,
								"regions":
								[
									[
										12435,
										12445
									]
								],
								"scope": "col_80000001"
							},
							"col_80000001_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_80000001_circle.png",
								"regions":
								[
									[
										12409,
										12409
									]
								],
								"scope": "col_gutter"
							},
							"col_808080FF":
							{
								"flags": 16,
								"regions":
								[
									[
										20673,
										20677
									],
									[
										20683,
										20687
									]
								],
								"scope": "col_808080FF"
							},
							"col_808080FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_808080FF_circle.png",
								"regions":
								[
									[
										20646,
										20646
									]
								],
								"scope": "col_gutter"
							},
							"col_FF0000FF":
							{
								"flags": 16,
								"regions":
								[
									[
										19240,
										19243
									],
									[
										19290,
										19293
									],
									[
										19729,
										19732
									],
									[
										21975,
										21978
									],
									[
										22158,
										22161
									],
									[
										22206,
										22209
									],
									[
										22266,
										22269
									],
									[
										22346,
										22349
									],
									[
										22404,
										22407
									],
									[
										23440,
										23443
									],
									[
										23519,
										23522
									],
									[
										23574,
										23577
									],
									[
										23596,
										23599
									],
									[
										23691,
										23694
									],
									[
										23859,
										23862
									],
									[
										24032,
										24035
									],
									[
										24195,
										24198
									],
									[
										24257,
										24260
									]
								],
								"scope": "col_FF0000FF"
							},
							"col_FF0000FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FF0000FF_circle.png",
								"regions":
								[
									[
										19237,
										19237
									],
									[
										19261,
										19261
									],
									[
										19723,
										19723
									],
									[
										21961,
										21961
									],
									[
										22147,
										22147
									],
									[
										22193,
										22193
									],
									[
										22253,
										22253
									],
									[
										22316,
										22316
									],
									[
										22385,
										22385
									],
									[
										23428,
										23428
									],
									[
										23509,
										23509
									],
									[
										23556,
										23556
									],
									[
										23579,
										23579
									],
									[
										23681,
										23681
									],
									[
										23828,
										23828
									],
									[
										23941,
										23941
									],
									[
										24181,
										24181
									]
								],
								"scope": "col_gutter"
							},
							"col_FF00FFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										19819,
										19826
									]
								],
								"scope": "col_FF00FFFF"
							},
							"col_FF00FFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FF00FFFF_circle.png",
								"regions":
								[
									[
										19813,
										19813
									]
								],
								"scope": "col_gutter"
							},
							"col_FFFF00FF":
							{
								"flags": 16,
								"regions":
								[
									[
										19773,
										19779
									]
								],
								"scope": "col_FFFF00FF"
							},
							"col_FFFF00FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FFFF00FF_circle.png",
								"regions":
								[
									[
										19767,
										19767
									]
								],
								"scope": "col_gutter"
							},
							"col_FFFFFFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										19866,
										19871
									]
								],
								"scope": "col_FFFFFFFF"
							},
							"col_FFFFFFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FFFFFFFF_circle.png",
								"regions":
								[
									[
										19860,
										19860
									]
								],
								"scope": "col_gutter"
							}
						},
						"selection":
						[
							[
								36301,
								36301
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 1286,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1661118336.66,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 30131.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "upload-server.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15672,
						"regions":
						{
						},
						"selection":
						[
							[
								12644,
								12644
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 369,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1661115114.98,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8471.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 33.0
	},
	"input":
	{
		"height": 55.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.797470272289,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 139.0
	},
	"output.Debugger Console":
	{
		"height": 0.0
	},
	"output.Debugger: Console":
	{
		"height": 0.0
	},
	"output.Debugger: Protocol":
	{
		"height": 0.0
	},
	"output.Protocol":
	{
		"height": 0.0
	},
	"output.Protocol(139700989367200)":
	{
		"height": 0.0
	},
	"output.Protocol(139713492737424)":
	{
		"height": 0.0
	},
	"output.Protocol(140020110213280)":
	{
		"height": 0.0
	},
	"output.Protocol(140125752054832)":
	{
		"height": 0.0
	},
	"output.Protocol(140156680251040)":
	{
		"height": 0.0
	},
	"output.Protocol(140190209186352)":
	{
		"height": 0.0
	},
	"output.Protocol(140264240155856)":
	{
		"height": 0.0
	},
	"output.Protocol(140490298408144)":
	{
		"height": 0.0
	},
	"output.Protocol(140502873410144)":
	{
		"height": 0.0
	},
	"output.Protocol(140627243657680)":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 259.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "make",
	"project": "plot-cv.sublime-project",
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"upload",
				"upload-server.js"
			],
			[
				"misc.js",
				"lib/misc.js"
			],
			[
				"util.js",
				"lib/util.js"
			],
			[
				"misc.j",
				"lib/misc.js"
			],
			[
				"xpath.js",
				"quickjs/qjs-modules/lib/xpath.js"
			],
			[
				"fs.js",
				"quickjs/qjs-modules/lib/fs.js"
			],
			[
				"imports.js",
				"resolve-imports.js"
			],
			[
				"pack",
				"package.json"
			],
			[
				"quickjs-xml",
				"quickjs/qjs-modules/quickjs-xml.c"
			],
			[
				"xpath",
				"quickjs/qjs-modules/lib/xpath.js"
			],
			[
				"svgren",
				"lib/eagle/svgRenderer.js"
			],
			[
				"board",
				"lib/eagle/boardRenderer.js"
			],
			[
				"upload.js",
				"upload.js"
			],
			[
				"preactCom",
				"lib/dom/preactComponent.js"
			],
			[
				"upload-ser",
				"upload-server.js"
			],
			[
				"node",
				"lib/eagle/node.js"
			],
			[
				"elem",
				"lib/eagle/element.js"
			],
			[
				"quer",
				"eagle-query.js"
			],
			[
				"eleme",
				"lib/eagle/element.js"
			],
			[
				"elemen",
				"lib/eagle/element.js"
			],
			[
				"ref.js",
				"lib/eagle/ref.js"
			],
			[
				"path.js",
				"lib/json/path.js"
			],
			[
				"pointer.js",
				"lib/pointer.js"
			],
			[
				"node.js",
				"lib/eagle/node.js"
			],
			[
				"eagle-she",
				"eagle-shell.js"
			],
			[
				"xml.js",
				"lib/xml.js"
			],
			[
				"ast-she",
				"ast-shell.js"
			],
			[
				"js_ras",
				"qjs-opencv/js_raspi_cam.cpp"
			],
			[
				"qjsm.c",
				"quickjs/qjs-modules/src/qjsm.c"
			],
			[
				"js_libca",
				"qjs-opencv/js_libcamera_app.cpp"
			],
			[
				"takeph",
				"takephoto.js"
			],
			[
				"ffi.c",
				"quickjs/qjs-ffi/ffi.c"
			],
			[
				"psql",
				"psql.js"
			],
			[
				"eagle-shel",
				"eagle-shell.js"
			],
			[
				"schematic",
				"lib/eagle/schematicRenderer.js"
			],
			[
				"clang-as",
				"clang-ast.js"
			],
			[
				"path.h",
				"quickjs/qjs-modules/include/path.h"
			],
			[
				"path.c",
				"quickjs/qjs-modules/src/path.c"
			],
			[
				"xml.c",
				"quickjs/qjs-modules/quickjs-xml.c"
			],
			[
				"boardre",
				"lib/eagle/boardRenderer.js"
			],
			[
				"quickjs.h",
				"quickjs/quickjs.h"
			],
			[
				"ast-shell",
				"ast-shell.js"
			],
			[
				"extend",
				"quickjs/qjs-modules/lib/extendArray.js"
			],
			[
				"eagle-shell",
				"eagle-shell.js"
			],
			[
				"test-rpc",
				"test-rpc.js"
			],
			[
				"upload.html",
				"upload.html"
			],
			[
				"index.ht",
				"index.html"
			],
			[
				"io-help",
				"io-helpers.js"
			],
			[
				"render-to-s",
				"lib/preact-render-to-string.js"
			],
			[
				"doc",
				"lib/eagle/document.js"
			],
			[
				"boardRe",
				"lib/eagle/boardRenderer.js"
			],
			[
				"docu",
				"lib/eagle/document.js"
			],
			[
				"boardRen",
				"lib/eagle/boardRenderer.js"
			],
			[
				"repl",
				"quickjs/qjs-modules/lib/repl.js"
			],
			[
				"element",
				"lib/eagle/element.js"
			],
			[
				"docum",
				"lib/eagle/document.js"
			],
			[
				"project.js",
				"lib/eagle/project.js"
			],
			[
				"react-hook",
				"lib/repeater/react-hooks.js"
			],
			[
				"element.js",
				"lib/eagle/element.js"
			],
			[
				"instance",
				"lib/eagle/components/instance.js"
			],
			[
				"useTrkl",
				"lib/hooks/useTrkl.js"
			],
			[
				"drawing",
				"lib/eagle/components/drawing.js"
			],
			[
				"main",
				"main.js"
			],
			[
				"schema",
				"lib/eagle/schematicRenderer.js"
			],
			[
				"documen",
				"lib/eagle/document.js"
			],
			[
				"svgRe",
				"lib/eagle/svgRenderer.js"
			],
			[
				"svgRend",
				"lib/eagle/svgRenderer.js"
			],
			[
				"document",
				"lib/eagle/document.js"
			],
			[
				"pathMapper",
				"lib/json/pathMapper.js"
			],
			[
				"functional",
				"lib/functional.js"
			],
			[
				"svgrend",
				"lib/eagle/svgRenderer.js"
			],
			[
				"schemat",
				"lib/eagle/schematicRenderer.js"
			],
			[
				"list.html",
				"list.html"
			],
			[
				"",
				".cmake-format"
			],
			[
				"imagepip",
				"imagePipeline.js"
			],
			[
				"test-vid",
				"test-video.js"
			],
			[
				"test-image",
				"test-image.js"
			],
			[
				"test-video",
				"test-video.js"
			],
			[
				"test-opencv",
				"test-opencv.js"
			],
			[
				"test-ima",
				"test-image.js"
			],
			[
				"jsutils.h",
				"quickjs/qjs-net/jsutils.h"
			],
			[
				"jsut",
				"quickjs/qjs-net/jsutils.c"
			],
			[
				"cv-she",
				"cv-shell.js"
			],
			[
				"svgre",
				"lib/eagle/svgRenderer.js"
			],
			[
				"eagle",
				"test-eagle.js"
			],
			[
				"termina",
				"terminal.js"
			],
			[
				"cvPipe",
				"qjs-opencv/js/cvPipeline.js"
			],
			[
				"imagePip",
				"imagePipeline.js"
			],
			[
				"gui.js",
				"qjs-opencv/js/cvHighGUI.js"
			],
			[
				"make-bi",
				"make-bitmap.js"
			],
			[
				"commands",
				"commands.js"
			],
			[
				"main.js",
				"main.js"
			],
			[
				"virtfs",
				"virtfs.js"
			],
			[
				"server.js",
				"server.js"
			],
			[
				"quickjs-deep",
				"quickjs/qjs-modules/quickjs-deep.c"
			],
			[
				"eagle-ser",
				"eagle-server.js"
			],
			[
				"debugger-server",
				"debugger-server.js"
			],
			[
				"style.css",
				"style.css"
			],
			[
				"index.html",
				"index.html"
			],
			[
				"css",
				"lib/grammars/css3.g4"
			],
			[
				"console",
				"quickjs/qjs-modules/lib/console.js"
			],
			[
				"io-he",
				"io-helpers.js"
			],
			[
				"libs.js",
				"libs.js"
			],
			[
				"lscac",
				"lib/lscache.js"
			],
			[
				"lib/util.js",
				"lib/util.js"
			],
			[
				"disco",
				"discogs.js"
			],
			[
				"spawn.",
				"lib/spawn.js"
			],
			[
				"helpers",
				"io-helpers.js.orig"
			],
			[
				"child-",
				"quickjs/qjs-modules/child-process.c"
			],
			[
				"package.j",
				"package.json"
			],
			[
				"config.js",
				"config.js"
			],
			[
				"test-imrea",
				"test-imread.js"
			],
			[
				"cvHi",
				"qjs-opencv/js/cvHighGUI.js"
			],
			[
				"cvpipe",
				"qjs-opencv/js/cvPipeline.js"
			],
			[
				"events.js",
				"quickjs/qjs-modules/lib/events.js"
			],
			[
				"test-vi",
				"test-video.js"
			],
			[
				"test-cv",
				"test-cv.js"
			],
			[
				"point.js",
				"lib/geom/point.js"
			],
			[
				"size.js",
				"lib/geom/size.js"
			],
			[
				"server",
				"server.js"
			],
			[
				"test-wor",
				"test-worker.js"
			],
			[
				"ws-work",
				"ws-worker.js"
			],
			[
				"cvVi",
				"qjs-opencv/js/cvVideo.js"
			],
			[
				"ideoSou",
				"videoSource.js"
			],
			[
				"console.js",
				"quickjs/qjs-modules/lib/console.js"
			],
			[
				"dia",
				"diagram.js"
			],
			[
				"diagra",
				"diagram.js"
			],
			[
				"diag",
				"diagram.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/quickjs/modules/modules.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 309.0,
		"last_filter": "N",
		"selected_items":
		[
			[
				"N",
				"nb"
			],
			[
				"",
				"$"
			]
		],
		"width": 592.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 220.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
