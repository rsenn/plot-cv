{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"MIDI",
				"MIDIMessageRead"
			],
			[
				"i",
				"is_dir"
			],
			[
				"getText",
				"getTextArray"
			],
			[
				"Lin",
				"LinearTransform"
			],
			[
				"CURL_LIB",
				"CURL_LIBRARY_DEBUG"
			],
			[
				"Circ",
				"CircuitJS"
			],
			[
				"dep",
				"dependency"
			],
			[
				"opt",
				"optimization"
			],
			[
				"OPENCV_LIB",
				"OPENCV_LIBRARIES"
			],
			[
				"getOwn",
				"getOwnPropertyNames(...)"
			],
			[
				"relat",
				"relativeTo"
			],
			[
				"max",
				"maxLineGap"
			],
			[
				"Pm_Op",
				"Pm_OpenInput"
			],
			[
				"Pm_Get",
				"Pm_GetDeviceInfo"
			],
			[
				"getOwnProp",
				"getOwnPropertyDescriptors(...)"
			],
			[
				"getMem",
				"getMemberEntries"
			],
			[
				"break",
				"breakLength"
			],
			[
				"from",
				"fromCodePoint(...)"
			],
			[
				"Res",
				"ResizeHandler"
			],
			[
				"COLOR",
				"COLOR_BGR2Lab"
			],
			[
				"JS_SetP",
				"JS_SetPropertyFunctionList"
			],
			[
				"inspe",
				"inspectOptions"
			],
			[
				"Sin",
				"SingleLineComment"
			],
			[
				"use",
				"useAsyncIterator_1"
			],
			[
				"high",
				"highlight"
			],
			[
				"hig",
				"highlight"
			],
			[
				"useDe",
				"useDebouncedCallback"
			],
			[
				"preac",
				"preactComponent"
			],
			[
				"modul",
				"module_loader_func"
			],
			[
				"mod",
				"module_loader_func"
			],
			[
				"jsm_mo",
				"jsm_module_record"
			],
			[
				"jsm_mod",
				"jsm_module_record"
			],
			[
				"jsm_com",
				"jsm_compiled_modules"
			],
			[
				"QUICKJS_IN",
				"QUICKJS_INCLUDE_DIR"
			],
			[
				"QUICKJS_SOU",
				"QUICKJS_SOURCES_ROOT"
			],
			[
				"Po",
				"PortableFileSystem"
			],
			[
				"JS_EVAL",
				"JS_EVAL_TYPE_MODULE"
			],
			[
				"CPACK",
				"CPACK_PACKAGE_VERSION_MAJOR"
			],
			[
				"CPACK_PACK",
				"CPACK_PACKAGE_VERSION"
			],
			[
				"align_",
				"align_value_attr"
			],
			[
				"histo",
				"historySearch"
			],
			[
				"mouse",
				"mousetrackingDisable"
			],
			[
				"library",
				"libraryNames"
			],
			[
				"setMax",
				"setMaxListeners"
			],
			[
				"cons",
				"constructor"
			],
			[
				"Portable",
				"PortableFileSystem"
			],
			[
				"Get",
				"GetRange"
			],
			[
				"Minn",
				"MinnetHttpRequest"
			],
			[
				"Des",
				"DeserializeEntries"
			],
			[
				"define",
				"defineProperties(...)"
			],
			[
				"Deseria",
				"DeserializeEntries"
			],
			[
				"De",
				"DeserializeEntries"
			],
			[
				"Eve",
				"EventEmitter"
			],
			[
				"PATH_",
				"PATH_FNM_NOMATCH"
			],
			[
				"PATH_FNM_NO",
				"PATH_FNM_NOESCAPE"
			],
			[
				"asyn",
				"asyncIterator"
			],
			[
				"RPC",
				"RPCClientConnection"
			],
			[
				"Const",
				"Constants"
			],
			[
				"Impo",
				"ImportSpecifier"
			],
			[
				"Export",
				"ExportNamedDeclaration"
			],
			[
				"Imm",
				"ImmutableTranslation"
			],
			[
				"elem",
				"elementTransform"
			],
			[
				"minn",
				"minnet_ws_class_id"
			],
			[
				"JS_Get",
				"JS_GetOpaque"
			],
			[
				"getOw",
				"getOwnPropertySymbols(...)"
			],
			[
				"Minnet",
				"MinnetWebsocket"
			],
			[
				"Message",
				"MessageTransceiver"
			],
			[
				"corr",
				"CorrelateSchematicAndBoard"
			],
			[
				"Sys",
				"SyscallError"
			],
			[
				"getProp",
				"getPropertyDescriptors"
			],
			[
				"getO",
				"getOwnPropertyDescriptors(...)"
			],
			[
				"get",
				"getOwnPropertyDescriptors(...)"
			],
			[
				"toArra",
				"toArrayBuffer"
			],
			[
				"codePo",
				"codePointAt"
			],
			[
				"print",
				"print_status"
			],
			[
				"tty",
				"ttySetRaw"
			],
			[
				"variable",
				"variablesReference"
			],
			[
				"variables",
				"variablesReference"
			],
			[
				"JSIn",
				"JSInputArray"
			],
			[
				"keypoin",
				"keypoint_proto"
			],
			[
				"lws_call",
				"lws_callback_http_dummy"
			],
			[
				"utf",
				"utf8_first_code_mask"
			],
			[
				"length",
				"history_length"
			],
			[
				"Array",
				"ArrayBufferToString"
			],
			[
				"JSMo",
				"JSModuleLoaderFunc"
			],
			[
				"JS",
				"JSVideoWriterData"
			],
			[
				"D",
				"DebuggerProtocol"
			],
			[
				"Debu",
				"DebuggerProtocol"
			],
			[
				"descripto",
				"descriptor_channels"
			],
			[
				"descript",
				"descriptorExtractor"
			],
			[
				"pattern",
				"patternScale"
			],
			[
				"n",
				"nOctaves"
			],
			[
				"nO",
				"nOctaves"
			],
			[
				"quali",
				"quality_level"
			],
			[
				"JS_P",
				"JS_PROP_ENUMERABLE"
			],
			[
				"Feat",
				"Feature2D"
			],
			[
				"PROP_DESCRIPTOR_",
				"PROP_DESCRIPTOR_TYPE"
			],
			[
				"js_feat",
				"js_feature2d_data"
			],
			[
				"js_key",
				"js_keypoint_export"
			],
			[
				"x",
				"xfeatures2d"
			],
			[
				"JSInput",
				"JSInputOutputArray"
			],
			[
				"JS_NewArray",
				"JS_NewArrayBufferCopy"
			],
			[
				"Rota",
				"RotatedRect"
			],
			[
				"js_rotated",
				"js_rotated_rect_new"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"getOwnP",
				"getOwnPropertyNames"
			],
			[
				"PROP_Y",
				"PROP_YINTERCEPT"
			],
			[
				"PROP_X",
				"PROP_XINTERCEPT"
			],
			[
				"RE",
				"RETURN_PATH"
			],
			[
				"insp",
				"inspectSymbol"
			],
			[
				"contour",
				"contour_proto"
			],
			[
				"dst",
				"dst_pts"
			],
			[
				"CXX_",
				"CXX_STANDARD_VALUE"
			],
			[
				"process",
				"processor_or_index"
			],
			[
				"proces",
				"processor_or_index"
			],
			[
				"w",
				"width"
			],
			[
				"FUNC_TO",
				"FUNC_TOARRAY"
			],
			[
				"JSInpu",
				"JSInputOutputArray"
			],
			[
				"JS_Throw",
				"JS_ThrowInternalError"
			],
			[
				"typed",
				"typedarray_ctor"
			],
			[
				"JS_GetP",
				"JS_GetPropertyStr"
			],
			[
				"depe",
				"dependent_scope_decl_ref_expr"
			],
			[
				"com",
				"compound_stmt"
			],
			[
				"CXXConstruc",
				"CXXConstructorDecl"
			],
			[
				"refere",
				"referencedDecl"
			],
			[
				"Acc",
				"AccessSpecDecl"
			],
			[
				"value",
				"valueCategory"
			],
			[
				"ini",
				"initializers"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix",
				"name": "ùåÜ Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					699,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				],
				[
					700,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					701,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/util.js",
						"symkeys":
						[
							[
								771,
								788
							],
							[
								1023,
								1072
							],
							[
								1967,
								1971
							],
							[
								2797,
								2804
							],
							[
								3326,
								3340
							],
							[
								3612,
								3618
							],
							[
								3733,
								3760
							],
							[
								3808,
								3839
							],
							[
								3995,
								4005
							],
							[
								4044,
								4068
							],
							[
								4135,
								4151
							],
							[
								4196,
								4213
							],
							[
								4261,
								4281
							],
							[
								4332,
								4355
							],
							[
								4403,
								4429
							],
							[
								4848,
								4853
							],
							[
								4912,
								4936
							],
							[
								4959,
								4975
							],
							[
								4990,
								5001
							],
							[
								5041,
								5057
							],
							[
								5072,
								5084
							],
							[
								5125,
								5141
							],
							[
								5156,
								5171
							],
							[
								5215,
								5231
							],
							[
								5246,
								5264
							],
							[
								5311,
								5327
							],
							[
								5342,
								5363
							],
							[
								5413,
								5429
							],
							[
								5444,
								5468
							],
							[
								5594,
								5617
							],
							[
								5700,
								5720
							],
							[
								5975,
								5987
							],
							[
								6037,
								6049
							],
							[
								6169,
								6192
							],
							[
								6265,
								6291
							],
							[
								6526,
								6547
							],
							[
								6602,
								6623
							],
							[
								6752,
								6776
							],
							[
								6872,
								6879
							],
							[
								6906,
								6913
							],
							[
								6945,
								6967
							],
							[
								7060,
								7067
							],
							[
								7091,
								7098
							],
							[
								7125,
								7147
							],
							[
								7197,
								7204
							],
							[
								7258,
								7265
							],
							[
								7297,
								7326
							],
							[
								7672,
								7697
							],
							[
								7824,
								7843
							],
							[
								7925,
								7944
							],
							[
								8131,
								8150
							],
							[
								8228,
								8247
							],
							[
								8320,
								8339
							],
							[
								8435,
								8475
							],
							[
								8617,
								8630
							],
							[
								8656,
								8689
							],
							[
								8938,
								8952
							],
							[
								9113,
								9120
							],
							[
								9353,
								9359
							],
							[
								9773,
								9797
							],
							[
								10176,
								10212
							],
							[
								10254,
								10272
							],
							[
								10455,
								10492
							],
							[
								10573,
								10591
							],
							[
								10609,
								10620
							],
							[
								10686,
								10720
							],
							[
								10747,
								10765
							],
							[
								11040,
								11085
							],
							[
								11285,
								11303
							],
							[
								11554,
								11580
							],
							[
								11839,
								11858
							],
							[
								11937,
								11956
							],
							[
								12106,
								12154
							],
							[
								12335,
								12350
							],
							[
								12376,
								12386
							],
							[
								12473,
								12478
							],
							[
								13245,
								13251
							],
							[
								13327,
								13332
							],
							[
								13341,
								13346
							],
							[
								13375,
								13384
							],
							[
								13408,
								13418
							],
							[
								13440,
								13453
							],
							[
								13481,
								13495
							],
							[
								13521,
								13538
							],
							[
								13566,
								13584
							],
							[
								13685,
								13690
							],
							[
								13898,
								13921
							],
							[
								14372,
								14376
							],
							[
								14418,
								14422
							],
							[
								14529,
								14541
							],
							[
								15130,
								15140
							],
							[
								15228,
								15256
							],
							[
								15290,
								15296
							],
							[
								15358,
								15382
							],
							[
								15412,
								15453
							],
							[
								15729,
								15741
							],
							[
								15774,
								15806
							],
							[
								15848,
								15888
							],
							[
								16042,
								16062
							],
							[
								17348,
								17378
							],
							[
								17438,
								17475
							],
							[
								17660,
								17666
							],
							[
								17881,
								17911
							],
							[
								17991,
								18023
							],
							[
								18251,
								18281
							],
							[
								18418,
								18421
							],
							[
								18558,
								18592
							],
							[
								18749,
								18781
							],
							[
								19071,
								19099
							],
							[
								19177,
								19206
							],
							[
								19281,
								19318
							],
							[
								19368,
								19403
							],
							[
								19584,
								19619
							],
							[
								19919,
								19942
							],
							[
								19973,
								19997
							],
							[
								20061,
								20088
							],
							[
								20121,
								20161
							],
							[
								20279,
								20322
							],
							[
								20625,
								20654
							],
							[
								20711,
								20725
							],
							[
								20774,
								20803
							],
							[
								20845,
								20872
							],
							[
								20982,
								20989
							],
							[
								21009,
								21037
							],
							[
								21127,
								21154
							],
							[
								21193,
								21220
							],
							[
								21270,
								21294
							],
							[
								21369,
								21404
							],
							[
								21506,
								21538
							],
							[
								21623,
								21657
							],
							[
								21742,
								21772
							],
							[
								21992,
								22002
							],
							[
								22055,
								22059
							],
							[
								22127,
								22164
							],
							[
								22201,
								22218
							],
							[
								22241,
								22258
							],
							[
								22318,
								22335
							],
							[
								22421,
								22430
							],
							[
								22502,
								22516
							],
							[
								22584,
								22589
							],
							[
								23341,
								23379
							],
							[
								23530,
								23565
							],
							[
								23649,
								23667
							],
							[
								23725,
								23769
							],
							[
								23783,
								23792
							],
							[
								23824,
								23852
							],
							[
								23866,
								23875
							],
							[
								23944,
								23987
							],
							[
								24107,
								24140
							],
							[
								24167,
								24174
							],
							[
								24303,
								24308
							],
							[
								24324,
								24358
							],
							[
								24435,
								24461
							],
							[
								24559,
								24593
							],
							[
								24616,
								24630
							],
							[
								24665,
								24715
							],
							[
								24853,
								24899
							],
							[
								24960,
								25022
							],
							[
								25033,
								25049
							],
							[
								25184,
								25221
							],
							[
								25260,
								25317
							],
							[
								25688,
								25722
							],
							[
								25862,
								25901
							],
							[
								25981,
								26018
							],
							[
								26135,
								26166
							],
							[
								26921,
								26964
							],
							[
								27095,
								27100
							],
							[
								27256,
								27290
							],
							[
								27498,
								27534
							],
							[
								27596,
								27622
							],
							[
								28430,
								28455
							],
							[
								28523,
								28551
							],
							[
								29144,
								29163
							],
							[
								29259,
								29280
							],
							[
								29421,
								29446
							],
							[
								29746,
								29803
							],
							[
								29926,
								29991
							],
							[
								30101,
								30153
							],
							[
								30274,
								30324
							],
							[
								30440,
								30455
							],
							[
								30526,
								30537
							],
							[
								30625,
								30636
							],
							[
								30662,
								30677
							],
							[
								30755,
								30769
							],
							[
								30809,
								30828
							],
							[
								31051,
								31147
							],
							[
								31150,
								31252
							],
							[
								31308,
								31320
							],
							[
								31385,
								31399
							],
							[
								31431,
								31437
							],
							[
								31480,
								31488
							],
							[
								31534,
								31542
							],
							[
								31598,
								31613
							],
							[
								31666,
								31673
							],
							[
								31784,
								31794
							],
							[
								31936,
								31946
							],
							[
								32009,
								32016
							],
							[
								32101,
								32128
							],
							[
								32152,
								32161
							],
							[
								32187,
								32195
							],
							[
								32212,
								32221
							],
							[
								32260,
								32268
							],
							[
								32279,
								32292
							],
							[
								32303,
								32318
							],
							[
								32347,
								32365
							],
							[
								32445,
								32469
							],
							[
								32890,
								32924
							],
							[
								32955,
								32966
							],
							[
								32971,
								32981
							],
							[
								32995,
								33006
							],
							[
								33027,
								33063
							],
							[
								33567,
								33597
							],
							[
								33641,
								33672
							],
							[
								33947,
								33969
							],
							[
								34029,
								34055
							],
							[
								34171,
								34182
							],
							[
								34294,
								34325
							],
							[
								34529,
								34554
							],
							[
								34621,
								34673
							],
							[
								34785,
								34807
							],
							[
								34813,
								34834
							],
							[
								34851,
								34883
							],
							[
								35003,
								35038
							],
							[
								35103,
								35136
							],
							[
								35183,
								35195
							],
							[
								35265,
								35277
							],
							[
								35334,
								35365
							],
							[
								35409,
								35451
							],
							[
								35627,
								35655
							],
							[
								35766,
								35796
							],
							[
								35808,
								35825
							],
							[
								35949,
								35985
							],
							[
								36062,
								36088
							],
							[
								36130,
								36169
							],
							[
								36281,
								36285
							],
							[
								36312,
								36316
							],
							[
								36355,
								36359
							],
							[
								36387,
								36391
							],
							[
								36414,
								36450
							],
							[
								36488,
								36520
							],
							[
								36638,
								36679
							],
							[
								36772,
								36796
							],
							[
								36819,
								36830
							],
							[
								36848,
								36865
							],
							[
								36951,
								36975
							],
							[
								36998,
								37024
							],
							[
								37480,
								37512
							],
							[
								37766,
								37775
							],
							[
								37806,
								37815
							],
							[
								37846,
								37855
							],
							[
								37886,
								37895
							],
							[
								37926,
								37935
							],
							[
								37965,
								37974
							],
							[
								38005,
								38014
							],
							[
								38023,
								38043
							],
							[
								38087,
								38092
							],
							[
								38135,
								38144
							],
							[
								38312,
								38345
							],
							[
								38719,
								38745
							],
							[
								38971,
								39014
							],
							[
								39056,
								39068
							],
							[
								39146,
								39191
							],
							[
								39312,
								39332
							],
							[
								39453,
								39460
							],
							[
								39479,
								39486
							],
							[
								39666,
								39695
							],
							[
								39824,
								39869
							],
							[
								39997,
								40029
							],
							[
								40108,
								40129
							],
							[
								40398,
								40416
							],
							[
								40604,
								40623
							],
							[
								40756,
								40804
							],
							[
								40817,
								40826
							],
							[
								40864,
								40874
							],
							[
								40921,
								40955
							],
							[
								41232,
								41274
							],
							[
								41328,
								41366
							],
							[
								41528,
								41547
							],
							[
								41747,
								41786
							],
							[
								41920,
								41937
							],
							[
								42477,
								42497
							],
							[
								42595,
								42614
							],
							[
								42661,
								42680
							],
							[
								44533,
								44540
							],
							[
								44555,
								44562
							],
							[
								46199,
								46232
							],
							[
								46380,
								46389
							],
							[
								46409,
								46417
							],
							[
								46421,
								46430
							],
							[
								46571,
								46599
							],
							[
								46713,
								46741
							],
							[
								46855,
								46873
							],
							[
								47252,
								47287
							],
							[
								47327,
								47354
							],
							[
								47435,
								47483
							],
							[
								47694,
								47781
							],
							[
								47792,
								47808
							],
							[
								47917,
								47957
							],
							[
								47985,
								47989
							],
							[
								48006,
								48011
							],
							[
								48030,
								48035
							],
							[
								48053,
								48090
							],
							[
								48118,
								48122
							],
							[
								48128,
								48134
							],
							[
								48149,
								48155
							],
							[
								48163,
								48169
							],
							[
								48185,
								48222
							],
							[
								48250,
								48254
							],
							[
								48268,
								48274
							],
							[
								48282,
								48288
							],
							[
								48295,
								48301
							],
							[
								48318,
								48371
							],
							[
								48372,
								48389
							],
							[
								48494,
								48513
							],
							[
								48560,
								48598
							],
							[
								48623,
								48636
							],
							[
								49265,
								49309
							],
							[
								49381,
								49399
							],
							[
								49653,
								49671
							],
							[
								49998,
								50025
							],
							[
								50034,
								50049
							],
							[
								50125,
								50152
							],
							[
								50279,
								50283
							],
							[
								50361,
								50374
							],
							[
								50571,
								50600
							],
							[
								50708,
								50734
							],
							[
								50802,
								50829
							],
							[
								51101,
								51122
							],
							[
								51192,
								51217
							],
							[
								51237,
								51259
							],
							[
								51323,
								51348
							],
							[
								51481,
								51505
							],
							[
								51729,
								51745
							],
							[
								51746,
								51765
							],
							[
								51798,
								51818
							],
							[
								51907,
								51935
							],
							[
								52035,
								52060
							],
							[
								52110,
								52137
							],
							[
								52140,
								52159
							],
							[
								52464,
								52494
							],
							[
								52537,
								52552
							],
							[
								52620,
								52643
							],
							[
								52682,
								52686
							],
							[
								52726,
								52730
							],
							[
								52768,
								52792
							],
							[
								52859,
								52895
							],
							[
								52960,
								52967
							],
							[
								53005,
								53044
							],
							[
								53202,
								53235
							],
							[
								53438,
								53449
							],
							[
								53557,
								53588
							],
							[
								53647,
								53703
							],
							[
								54067,
								54108
							],
							[
								54474,
								54514
							],
							[
								54742,
								54790
							],
							[
								54822,
								54831
							],
							[
								55114,
								55153
							],
							[
								55164,
								55173
							],
							[
								55212,
								55223
							],
							[
								55628,
								55669
							],
							[
								55715,
								55748
							],
							[
								55825,
								55860
							],
							[
								55960,
								56003
							],
							[
								56183,
								56219
							],
							[
								56536,
								56575
							],
							[
								56711,
								56759
							],
							[
								56927,
								56941
							],
							[
								57113,
								57120
							],
							[
								57236,
								57243
							],
							[
								57578,
								57602
							],
							[
								57632,
								57649
							],
							[
								57706,
								57728
							],
							[
								57757,
								57774
							],
							[
								57880,
								57911
							],
							[
								57985,
								58005
							],
							[
								58139,
								58173
							],
							[
								58203,
								58212
							],
							[
								58232,
								58240
							],
							[
								58244,
								58253
							],
							[
								58346,
								58380
							],
							[
								58681,
								58714
							],
							[
								59076,
								59110
							],
							[
								59480,
								59514
							],
							[
								59797,
								59841
							],
							[
								60466,
								60505
							],
							[
								60633,
								60715
							],
							[
								61841,
								61854
							],
							[
								61872,
								61881
							],
							[
								61899,
								61908
							],
							[
								61959,
								61970
							],
							[
								61994,
								62006
							],
							[
								62013,
								62024
							],
							[
								62061,
								62066
							],
							[
								62179,
								62184
							],
							[
								62360,
								62365
							],
							[
								62408,
								62413
							],
							[
								62458,
								62463
							],
							[
								62668,
								62673
							],
							[
								62877,
								62910
							],
							[
								62923,
								62924
							],
							[
								63333,
								63366
							],
							[
								63530,
								63567
							],
							[
								63575,
								63576
							],
							[
								64052,
								64059
							],
							[
								64198,
								64209
							],
							[
								64295,
								64306
							],
							[
								64593,
								64607
							],
							[
								65200,
								65232
							],
							[
								65742,
								65780
							],
							[
								66079,
								66102
							],
							[
								66115,
								66135
							],
							[
								66198,
								66212
							],
							[
								66216,
								66230
							],
							[
								66307,
								66322
							],
							[
								66396,
								66410
							],
							[
								66453,
								66476
							],
							[
								66668,
								66686
							],
							[
								66892,
								66906
							],
							[
								66910,
								66924
							],
							[
								67095,
								67117
							],
							[
								67661,
								67666
							],
							[
								67708,
								67714
							],
							[
								67757,
								67764
							],
							[
								67793,
								67832
							],
							[
								67861,
								67871
							],
							[
								67877,
								67886
							],
							[
								67904,
								67931
							],
							[
								67971,
								67980
							],
							[
								67989,
								67997
							],
							[
								68045,
								68054
							],
							[
								68080,
								68089
							],
							[
								68100,
								68108
							],
							[
								68180,
								68189
							],
							[
								68280,
								68324
							],
							[
								68386,
								68447
							],
							[
								68755,
								68781
							],
							[
								68809,
								68814
							],
							[
								68838,
								68851
							],
							[
								68959,
								69024
							],
							[
								69130,
								69156
							],
							[
								69190,
								69216
							],
							[
								69237,
								69270
							],
							[
								69303,
								69319
							],
							[
								69334,
								69341
							],
							[
								69367,
								69383
							],
							[
								69407,
								69434
							],
							[
								69491,
								69506
							],
							[
								69528,
								69540
							],
							[
								69557,
								69572
							],
							[
								69582,
								69591
							],
							[
								69631,
								69640
							],
							[
								69647,
								69653
							],
							[
								69665,
								69694
							],
							[
								69780,
								69790
							],
							[
								69831,
								69846
							],
							[
								69865,
								69878
							],
							[
								70303,
								70313
							],
							[
								70452,
								70464
							],
							[
								70744,
								70765
							],
							[
								70951,
								70962
							],
							[
								70999,
								71008
							],
							[
								71088,
								71121
							],
							[
								71426,
								71455
							],
							[
								71499,
								71521
							],
							[
								71555,
								71594
							],
							[
								71628,
								71634
							],
							[
								71707,
								71732
							],
							[
								71743,
								71755
							],
							[
								71947,
								71957
							],
							[
								72009,
								72059
							],
							[
								72467,
								72497
							],
							[
								72583,
								72613
							],
							[
								72686,
								72717
							],
							[
								72885,
								72909
							],
							[
								72964,
								72988
							],
							[
								73116,
								73122
							],
							[
								73203,
								73228
							],
							[
								73316,
								73339
							],
							[
								73371,
								73377
							],
							[
								73520,
								73521
							],
							[
								73612,
								73616
							],
							[
								73750,
								73781
							],
							[
								74032,
								74044
							],
							[
								74160,
								74174
							],
							[
								74320,
								74352
							],
							[
								74556,
								74582
							],
							[
								74583,
								74600
							],
							[
								74649,
								74672
							],
							[
								74705,
								74715
							],
							[
								74764,
								74776
							],
							[
								75091,
								75101
							],
							[
								75293,
								75305
							],
							[
								75980,
								76013
							],
							[
								76041,
								76055
							],
							[
								76149,
								76174
							],
							[
								76337,
								76365
							],
							[
								76499,
								76528
							],
							[
								76828,
								76876
							],
							[
								77065,
								77102
							],
							[
								77151,
								77199
							],
							[
								77313,
								77347
							],
							[
								77355,
								77379
							],
							[
								77893,
								77923
							],
							[
								78049,
								78076
							],
							[
								78553,
								78604
							],
							[
								78646,
								78673
							],
							[
								78843,
								78891
							],
							[
								79103,
								79138
							],
							[
								79345,
								79378
							],
							[
								79650,
								79681
							],
							[
								79927,
								79971
							],
							[
								80107,
								80123
							],
							[
								80283,
								80333
							],
							[
								80727,
								80732
							],
							[
								80813,
								80826
							],
							[
								80875,
								80885
							],
							[
								80889,
								80902
							],
							[
								80977,
								80992
							],
							[
								81041,
								81051
							],
							[
								81055,
								81070
							],
							[
								81137,
								81170
							],
							[
								81280,
								81287
							],
							[
								81571,
								81586
							],
							[
								81911,
								81936
							],
							[
								81997,
								82025
							],
							[
								82114,
								82123
							],
							[
								83090,
								83121
							],
							[
								83293,
								83307
							],
							[
								83930,
								83964
							],
							[
								84149,
								84171
							],
							[
								84207,
								84231
							],
							[
								84234,
								84254
							],
							[
								84498,
								84524
							],
							[
								84619,
								84657
							],
							[
								85059,
								85102
							],
							[
								85184,
								85212
							],
							[
								85243,
								85279
							],
							[
								85447,
								85555
							],
							[
								85793,
								85844
							],
							[
								85922,
								85956
							],
							[
								86044,
								86072
							],
							[
								86106,
								86141
							],
							[
								86215,
								86240
							],
							[
								86262,
								86279
							],
							[
								86321,
								86370
							],
							[
								86443,
								86456
							],
							[
								86527,
								86540
							],
							[
								86716,
								86754
							],
							[
								86765,
								86784
							],
							[
								86838,
								86879
							],
							[
								86890,
								86909
							],
							[
								86967,
								86992
							],
							[
								87039,
								87078
							],
							[
								87173,
								87186
							],
							[
								87237,
								87247
							],
							[
								87313,
								87320
							],
							[
								87351,
								87357
							],
							[
								87399,
								87412
							],
							[
								87432,
								87468
							],
							[
								87563,
								87576
							],
							[
								87627,
								87637
							],
							[
								87676,
								87683
							],
							[
								87789,
								87822
							],
							[
								87902,
								87937
							],
							[
								87977,
								87987
							],
							[
								88102,
								88130
							],
							[
								88292,
								88304
							],
							[
								88409,
								88434
							],
							[
								88549,
								88562
							],
							[
								88661,
								88688
							],
							[
								88807,
								88820
							],
							[
								88923,
								88956
							],
							[
								89179,
								89198
							],
							[
								89277,
								89305
							],
							[
								89324,
								89343
							],
							[
								89361,
								89396
							],
							[
								89739,
								89770
							],
							[
								89829,
								89842
							],
							[
								89926,
								89958
							],
							[
								90139,
								90189
							],
							[
								90232,
								90259
							],
							[
								90461,
								90494
							],
							[
								90545,
								90580
							],
							[
								90595,
								90609
							],
							[
								90676,
								90738
							],
							[
								90937,
								90953
							],
							[
								91186,
								91196
							],
							[
								91246,
								91256
							],
							[
								91282,
								91292
							],
							[
								91320,
								91345
							],
							[
								91471,
								91496
							],
							[
								91770,
								91797
							],
							[
								92029,
								92041
							],
							[
								93694,
								93729
							],
							[
								93748,
								93756
							],
							[
								93804,
								93819
							],
							[
								93967,
								93980
							],
							[
								94173,
								94189
							],
							[
								94396,
								94421
							],
							[
								94436,
								94458
							],
							[
								94674,
								94678
							],
							[
								94892,
								94914
							],
							[
								94936,
								94946
							],
							[
								94964,
								94977
							],
							[
								95136,
								95158
							],
							[
								95180,
								95190
							],
							[
								95208,
								95221
							],
							[
								95350,
								95372
							],
							[
								95398,
								95408
							],
							[
								95426,
								95439
							],
							[
								95475,
								95497
							],
							[
								95518,
								95528
							],
							[
								95546,
								95559
							],
							[
								95579,
								95620
							],
							[
								95927,
								95950
							],
							[
								96031,
								96053
							],
							[
								96127,
								96147
							],
							[
								96274,
								96285
							],
							[
								96318,
								96335
							],
							[
								96511,
								96530
							],
							[
								96565,
								96587
							],
							[
								96719,
								96740
							],
							[
								96878,
								96898
							],
							[
								96965,
								96988
							],
							[
								97064,
								97086
							],
							[
								97204,
								97228
							],
							[
								97290,
								97302
							],
							[
								97473,
								97491
							],
							[
								97553,
								97565
							],
							[
								97717,
								97740
							],
							[
								97881,
								97897
							],
							[
								97953,
								97966
							],
							[
								97998,
								98066
							],
							[
								98107,
								98129
							],
							[
								98158,
								98168
							],
							[
								98184,
								98197
							],
							[
								98257,
								98270
							],
							[
								98346,
								98369
							],
							[
								98497,
								98519
							],
							[
								98616,
								98629
							],
							[
								98691,
								98707
							],
							[
								98745,
								98749
							],
							[
								99008,
								99051
							],
							[
								99066,
								99091
							],
							[
								99234,
								99242
							],
							[
								99256,
								99263
							],
							[
								99272,
								99277
							],
							[
								99295,
								99336
							],
							[
								99349,
								99356
							],
							[
								99433,
								99472
							],
							[
								99629,
								99640
							],
							[
								99675,
								99696
							],
							[
								99774,
								99781
							],
							[
								99813,
								99838
							],
							[
								99896,
								99905
							],
							[
								99922,
								99929
							],
							[
								99947,
								99973
							],
							[
								100031,
								100040
							],
							[
								100058,
								100065
							],
							[
								100084,
								100179
							],
							[
								100811,
								100831
							],
							[
								100832,
								100846
							],
							[
								100868,
								100875
							],
							[
								100902,
								100922
							],
							[
								100923,
								100937
							],
							[
								100958,
								100965
							],
							[
								101009,
								101023
							],
							[
								101095,
								101144
							],
							[
								101157,
								101173
							],
							[
								101207,
								101223
							],
							[
								101315,
								101347
							],
							[
								101378,
								101417
							],
							[
								101798,
								101839
							],
							[
								101878,
								101885
							],
							[
								101941,
								101961
							],
							[
								101999,
								102018
							],
							[
								102092,
								102109
							],
							[
								102128,
								102148
							],
							[
								102152,
								102169
							],
							[
								102219,
								102242
							],
							[
								102343,
								102366
							],
							[
								102410,
								102429
							],
							[
								102472,
								102500
							],
							[
								102596,
								102617
							],
							[
								102693,
								102719
							],
							[
								102837,
								102855
							],
							[
								102909,
								102914
							],
							[
								102917,
								102923
							],
							[
								102939,
								102985
							],
							[
								103074,
								103087
							],
							[
								103465,
								103478
							],
							[
								103541,
								103590
							],
							[
								103603,
								103619
							],
							[
								103641,
								103654
							],
							[
								103682,
								103694
							],
							[
								103698,
								103711
							],
							[
								103773,
								103825
							],
							[
								104014,
								104027
							],
							[
								104090,
								104129
							],
							[
								104273,
								104308
							],
							[
								104380,
								104384
							],
							[
								104411,
								104420
							],
							[
								104671,
								104706
							],
							[
								104782,
								104803
							],
							[
								104818,
								104826
							],
							[
								104839,
								104848
							],
							[
								104870,
								104874
							],
							[
								104913,
								104917
							],
							[
								105064,
								105106
							],
							[
								105438,
								105466
							],
							[
								105526,
								105577
							],
							[
								105828,
								105871
							],
							[
								105924,
								105967
							],
							[
								106003,
								106008
							],
							[
								106085,
								106099
							],
							[
								106134,
								106144
							],
							[
								106157,
								106192
							],
							[
								106236,
								106244
							],
							[
								106791,
								106835
							],
							[
								107370,
								107393
							],
							[
								107801,
								107843
							],
							[
								108649,
								108672
							],
							[
								109044,
								109049
							],
							[
								109603,
								109616
							],
							[
								109652,
								109667
							],
							[
								109705,
								109722
							],
							[
								109764,
								109808
							],
							[
								110007,
								110014
							],
							[
								110725,
								110738
							],
							[
								110780,
								110789
							],
							[
								110853,
								110872
							],
							[
								110978,
								110991
							],
							[
								111166,
								111181
							],
							[
								111225,
								111242
							],
							[
								111288,
								111301
							],
							[
								111343,
								111356
							],
							[
								111398,
								111413
							],
							[
								111457,
								111474
							],
							[
								111602,
								111607
							],
							[
								111756,
								111782
							],
							[
								111959,
								111973
							],
							[
								111996,
								112001
							],
							[
								112643,
								112647
							],
							[
								112705,
								112709
							],
							[
								112952,
								112961
							],
							[
								113086,
								113099
							],
							[
								113173,
								113187
							],
							[
								113438,
								113461
							],
							[
								113479,
								113488
							],
							[
								113505,
								113516
							],
							[
								113526,
								113535
							],
							[
								113555,
								113583
							],
							[
								113691,
								113724
							],
							[
								113891,
								113913
							],
							[
								113931,
								113940
							],
							[
								113960,
								113973
							],
							[
								114031,
								114040
							],
							[
								114060,
								114102
							],
							[
								114575,
								114583
							],
							[
								114618,
								114629
							],
							[
								114706,
								114744
							],
							[
								115095,
								115116
							],
							[
								115201,
								115235
							],
							[
								115388,
								115427
							],
							[
								115482,
								115494
							],
							[
								115953,
								115961
							],
							[
								116093,
								116100
							],
							[
								116159,
								116167
							],
							[
								116280,
								116297
							],
							[
								116376,
								116380
							],
							[
								116434,
								116451
							],
							[
								116581,
								116629
							],
							[
								116915,
								117010
							],
							[
								117145,
								117157
							],
							[
								117167,
								117179
							],
							[
								117184,
								117197
							],
							[
								117303,
								117315
							],
							[
								117325,
								117337
							],
							[
								117342,
								117355
							],
							[
								117463,
								117471
							],
							[
								117682,
								117690
							],
							[
								118065,
								118075
							],
							[
								118155,
								118165
							],
							[
								118246,
								118254
							],
							[
								118385,
								118404
							],
							[
								118953,
								118957
							],
							[
								119026,
								119043
							],
							[
								119083,
								119098
							],
							[
								119136,
								119149
							],
							[
								119185,
								119200
							],
							[
								119310,
								119315
							],
							[
								119386,
								119403
							],
							[
								119434,
								119444
							],
							[
								119566,
								119631
							],
							[
								119994,
								120028
							],
							[
								120112,
								120155
							],
							[
								120371,
								120418
							],
							[
								120609,
								120660
							],
							[
								120880,
								120932
							],
							[
								121280,
								121323
							],
							[
								121695,
								121699
							],
							[
								121814,
								121889
							],
							[
								122263,
								122267
							],
							[
								122500,
								122542
							],
							[
								122606,
								122614
							],
							[
								122775,
								122816
							],
							[
								122863,
								122895
							],
							[
								122976,
								123009
							],
							[
								123068,
								123132
							],
							[
								123372,
								123413
							],
							[
								123451,
								123469
							],
							[
								123518,
								123525
							],
							[
								123723,
								123787
							],
							[
								123967,
								124032
							],
							[
								124045,
								124057
							],
							[
								124074,
								124085
							],
							[
								124109,
								124124
							],
							[
								124507,
								124537
							],
							[
								124714,
								124734
							],
							[
								124754,
								124808
							],
							[
								125031,
								125037
							],
							[
								125089,
								125094
							],
							[
								125150,
								125156
							],
							[
								125233,
								125238
							],
							[
								125281,
								125340
							],
							[
								127389,
								127402
							],
							[
								127550,
								127564
							],
							[
								127724,
								127737
							],
							[
								127819,
								127838
							],
							[
								128081,
								128118
							],
							[
								128466,
								128536
							],
							[
								128892,
								128934
							],
							[
								128985,
								128994
							],
							[
								129160,
								129195
							],
							[
								129322,
								129326
							],
							[
								129348,
								129359
							],
							[
								129469,
								129492
							],
							[
								129636,
								129660
							],
							[
								129761,
								129765
							],
							[
								129788,
								129792
							],
							[
								129804,
								129836
							],
							[
								129884,
								129924
							],
							[
								130153,
								130172
							],
							[
								130204,
								130268
							],
							[
								130322,
								130327
							],
							[
								130360,
								130390
							],
							[
								130477,
								130512
							],
							[
								130536,
								130562
							],
							[
								130676,
								130709
							],
							[
								130848,
								130906
							],
							[
								130931,
								130957
							],
							[
								131000,
								131035
							],
							[
								131078,
								131099
							],
							[
								131248,
								131274
							],
							[
								131432,
								131451
							],
							[
								131773,
								131822
							],
							[
								131847,
								131868
							],
							[
								131910,
								131926
							],
							[
								131980,
								132003
							],
							[
								132066,
								132094
							],
							[
								132156,
								132177
							],
							[
								132201,
								132206
							],
							[
								132779,
								132810
							],
							[
								132813,
								132831
							],
							[
								132883,
								132884
							],
							[
								132897,
								132908
							],
							[
								133463,
								133508
							],
							[
								133610,
								133634
							],
							[
								133912,
								133922
							],
							[
								133970,
								133991
							],
							[
								134039,
								134060
							],
							[
								134147,
								134188
							],
							[
								134336,
								134340
							],
							[
								134386,
								134394
							],
							[
								134423,
								134427
							],
							[
								134802,
								134815
							],
							[
								134868,
								134888
							],
							[
								135214,
								135271
							],
							[
								135378,
								135389
							],
							[
								135729,
								135749
							],
							[
								135789,
								135825
							],
							[
								135854,
								135867
							],
							[
								135910,
								135920
							],
							[
								135965,
								135980
							],
							[
								136953,
								136966
							],
							[
								137537,
								137557
							],
							[
								137632,
								137647
							],
							[
								138024,
								138037
							],
							[
								138108,
								138128
							],
							[
								138210,
								138225
							],
							[
								138291,
								138320
							],
							[
								138394,
								138427
							],
							[
								138539,
								138553
							],
							[
								138593,
								138608
							],
							[
								138630,
								138658
							],
							[
								139187,
								139210
							],
							[
								139417,
								139445
							],
							[
								139552,
								139594
							],
							[
								139921,
								139977
							],
							[
								140211,
								140252
							],
							[
								140338,
								140349
							],
							[
								140498,
								140511
							],
							[
								140832,
								140848
							],
							[
								140877,
								140929
							],
							[
								140998,
								141005
							],
							[
								141093,
								141107
							],
							[
								141195,
								141210
							],
							[
								141316,
								141320
							],
							[
								141352,
								141372
							],
							[
								141433,
								141446
							],
							[
								141506,
								141518
							],
							[
								141812,
								141827
							],
							[
								142148,
								142158
							],
							[
								142213,
								142223
							],
							[
								142307,
								142318
							],
							[
								142375,
								142382
							],
							[
								142985,
								142995
							],
							[
								143061,
								143072
							],
							[
								143140,
								143152
							],
							[
								143187,
								143200
							],
							[
								143245,
								143260
							],
							[
								143279,
								143306
							],
							[
								143492,
								143535
							],
							[
								143696,
								143756
							],
							[
								143842,
								143867
							],
							[
								143916,
								143959
							],
							[
								143970,
								143980
							],
							[
								143989,
								144018
							],
							[
								144274,
								144290
							],
							[
								144312,
								144323
							],
							[
								144373,
								144403
							],
							[
								144472,
								144477
							],
							[
								144506,
								144511
							],
							[
								144806,
								144819
							],
							[
								144870,
								144901
							],
							[
								144922,
								144935
							],
							[
								144936,
								144956
							],
							[
								145046,
								145082
							],
							[
								145155,
								145170
							],
							[
								145251,
								145263
							],
							[
								145738,
								145743
							],
							[
								146466,
								146493
							],
							[
								146518,
								146523
							],
							[
								146574,
								146603
							],
							[
								146691,
								146696
							],
							[
								146777,
								146790
							],
							[
								146843,
								146854
							],
							[
								146894,
								146915
							],
							[
								147039,
								147056
							],
							[
								147186,
								147206
							],
							[
								147402,
								147428
							],
							[
								147533,
								147539
							],
							[
								147577,
								147582
							],
							[
								147670,
								147703
							],
							[
								147861,
								147866
							],
							[
								147917,
								147930
							],
							[
								147954,
								147960
							],
							[
								148043,
								148067
							],
							[
								148161,
								148172
							],
							[
								148228,
								148241
							],
							[
								148303,
								148314
							],
							[
								148413,
								148423
							],
							[
								148521,
								148534
							],
							[
								148647,
								148656
							],
							[
								148714,
								148726
							],
							[
								148809,
								148817
							],
							[
								148917,
								148924
							],
							[
								149026,
								149046
							],
							[
								149234,
								149255
							],
							[
								149514,
								149531
							],
							[
								149684,
								149696
							],
							[
								149825,
								149839
							],
							[
								150010,
								150023
							],
							[
								150040,
								150060
							],
							[
								150319,
								150349
							],
							[
								150355,
								150381
							],
							[
								150400,
								150426
							],
							[
								150455,
								150473
							],
							[
								150539,
								150573
							],
							[
								150687,
								150741
							],
							[
								150768,
								150788
							],
							[
								150878,
								150895
							],
							[
								150991,
								151013
							],
							[
								151120,
								151144
							],
							[
								151252,
								151282
							],
							[
								151313,
								151322
							],
							[
								151365,
								151384
							],
							[
								151533,
								151553
							],
							[
								151670,
								151689
							],
							[
								151803,
								151819
							],
							[
								151927,
								151937
							],
							[
								152015,
								152022
							],
							[
								152088,
								152097
							],
							[
								152442,
								152463
							],
							[
								152472,
								152500
							],
							[
								152510,
								152555
							],
							[
								152610,
								152621
							],
							[
								152643,
								152653
							],
							[
								152666,
								152677
							],
							[
								152705,
								152738
							],
							[
								152899,
								152931
							],
							[
								152999,
								153021
							],
							[
								153193,
								153229
							],
							[
								153391,
								153407
							],
							[
								153468,
								153504
							],
							[
								153580,
								153591
							],
							[
								153656,
								153660
							],
							[
								153699,
								153712
							],
							[
								153826,
								153862
							],
							[
								154039,
								154044
							],
							[
								154085,
								154138
							],
							[
								155084,
								155113
							],
							[
								155267,
								155304
							],
							[
								155315,
								155328
							],
							[
								155341,
								155350
							],
							[
								155397,
								155417
							],
							[
								155451,
								155467
							],
							[
								155689,
								155710
							],
							[
								155838,
								155870
							],
							[
								155897,
								155906
							],
							[
								155918,
								155931
							],
							[
								156009,
								156033
							],
							[
								156100,
								156109
							],
							[
								156125,
								156135
							],
							[
								156152,
								156169
							],
							[
								156197,
								156206
							],
							[
								156207,
								156230
							],
							[
								156276,
								156300
							],
							[
								156448,
								156453
							],
							[
								156471,
								156480
							],
							[
								156580,
								156588
							],
							[
								156592,
								156601
							],
							[
								156623,
								156636
							],
							[
								156653,
								156666
							],
							[
								156673,
								156686
							],
							[
								156712,
								156729
							],
							[
								156742,
								156758
							],
							[
								156828,
								156833
							],
							[
								156851,
								156860
							],
							[
								156960,
								156968
							],
							[
								156981,
								156990
							],
							[
								157005,
								157010
							],
							[
								157098,
								157135
							],
							[
								157292,
								157308
							],
							[
								157326,
								157348
							],
							[
								157461,
								157467
							],
							[
								158515,
								158530
							],
							[
								158580,
								158594
							],
							[
								158608,
								158623
							],
							[
								159153,
								159170
							],
							[
								159220,
								159236
							],
							[
								159520,
								159550
							],
							[
								159568,
								159577
							],
							[
								159595,
								159605
							],
							[
								159618,
								159627
							],
							[
								159776,
								159805
							],
							[
								159823,
								159832
							],
							[
								159850,
								159860
							],
							[
								159864,
								159873
							],
							[
								161154,
								161206
							],
							[
								161272,
								161295
							],
							[
								161367,
								161385
							],
							[
								161734,
								161744
							],
							[
								161748,
								161762
							],
							[
								161964,
								161996
							],
							[
								162023,
								162058
							],
							[
								162098,
								162121
							],
							[
								162282,
								162298
							],
							[
								162483,
								162492
							],
							[
								162518,
								162538
							],
							[
								162565,
								162574
							],
							[
								162589,
								162613
							],
							[
								162753,
								162798
							],
							[
								162830,
								162848
							],
							[
								162994,
								163006
							],
							[
								163151,
								163156
							],
							[
								163470,
								163477
							],
							[
								163614,
								163633
							],
							[
								163651,
								163673
							],
							[
								164029,
								164071
							],
							[
								164088,
								164125
							],
							[
								164373,
								164392
							],
							[
								164762,
								164802
							],
							[
								164845,
								164859
							],
							[
								164929,
								164959
							],
							[
								165008,
								165038
							],
							[
								165105,
								165183
							],
							[
								165633,
								165661
							],
							[
								165713,
								165777
							],
							[
								165795,
								165819
							],
							[
								166090,
								166109
							],
							[
								166224,
								166260
							],
							[
								166985,
								167023
							],
							[
								167040,
								167078
							],
							[
								168367,
								168374
							],
							[
								168430,
								168448
							],
							[
								168660,
								168667
							],
							[
								168715,
								168719
							],
							[
								168851,
								168859
							],
							[
								168926,
								168938
							],
							[
								169980,
								170046
							],
							[
								170047,
								170064
							],
							[
								170302,
								170313
							],
							[
								170330,
								170349
							],
							[
								170463,
								170527
							],
							[
								170543,
								170552
							],
							[
								170564,
								170572
							],
							[
								170625,
								170640
							],
							[
								170656,
								170662
							],
							[
								170686,
								170699
							],
							[
								170894,
								170911
							],
							[
								170956,
								170981
							],
							[
								171080,
								171086
							],
							[
								171206,
								171238
							],
							[
								171315,
								171319
							],
							[
								171460,
								171481
							],
							[
								171525,
								171546
							],
							[
								171641,
								171666
							],
							[
								171837,
								171870
							],
							[
								172103,
								172130
							],
							[
								172222,
								172226
							],
							[
								172333,
								172338
							],
							[
								172602,
								172648
							],
							[
								173238,
								173247
							],
							[
								173483,
								173536
							],
							[
								173547,
								173573
							],
							[
								173876,
								173892
							],
							[
								173976,
								173987
							],
							[
								174233,
								174237
							],
							[
								174521,
								174574
							],
							[
								174802,
								174815
							],
							[
								174826,
								174842
							],
							[
								175017,
								175026
							],
							[
								175068,
								175077
							],
							[
								175117,
								175122
							],
							[
								175158,
								175176
							],
							[
								175197,
								175228
							],
							[
								175335,
								175354
							],
							[
								175647,
								175660
							],
							[
								175749,
								175767
							],
							[
								175862,
								175879
							],
							[
								176012,
								176019
							],
							[
								176138,
								176144
							],
							[
								176294,
								176302
							],
							[
								176421,
								176431
							],
							[
								176660,
								176669
							],
							[
								177162,
								177202
							],
							[
								177511,
								177546
							],
							[
								177877,
								177883
							],
							[
								177919,
								177937
							],
							[
								177981,
								177991
							],
							[
								178074,
								178084
							],
							[
								178133,
								178165
							],
							[
								178412,
								178431
							],
							[
								179055,
								179077
							],
							[
								179376,
								179436
							],
							[
								180146,
								180171
							],
							[
								180200,
								180216
							],
							[
								180225,
								180236
							],
							[
								180328,
								180334
							],
							[
								180343,
								180354
							],
							[
								180414,
								180438
							],
							[
								180456,
								180465
							],
							[
								180489,
								180498
							],
							[
								180526,
								180537
							],
							[
								180564,
								180575
							],
							[
								180608,
								180621
							],
							[
								180640,
								180653
							],
							[
								180665,
								180678
							],
							[
								180829,
								180840
							],
							[
								180942,
								180967
							],
							[
								180988,
								181018
							],
							[
								181116,
								181150
							],
							[
								181422,
								181443
							],
							[
								181508,
								181526
							],
							[
								181694,
								181730
							],
							[
								182184,
								182204
							],
							[
								182407,
								182422
							],
							[
								182698,
								182721
							],
							[
								182930,
								182948
							],
							[
								183166,
								183178
							],
							[
								183208,
								183223
							],
							[
								183268,
								183274
							],
							[
								183334,
								183348
							],
							[
								183496,
								183514
							],
							[
								183710,
								183742
							],
							[
								183808,
								183824
							],
							[
								184160,
								184176
							],
							[
								184623,
								184626
							],
							[
								184639,
								184640
							],
							[
								184670,
								184706
							],
							[
								185147,
								185186
							],
							[
								185275,
								185301
							],
							[
								185349,
								185410
							],
							[
								185845,
								185873
							],
							[
								185980,
								185998
							],
							[
								186293,
								186331
							],
							[
								186386,
								186391
							]
						],
						"symlist":
						[
							" function Util(g)",
							"Util.formatAnnotatedObject = function(subject, o)",
							"i =>",
							"item =>",
							"padding = x =>",
							"arr =>",
							"Util.curry = (fn, arity) =>",
							"ret = function curried(...args)",
							" (v, i) =>",
							"Curried = function(...a)",
							" function()",
							" function(a)",
							" function(a, b)",
							" function(a, b, c)",
							" function(a, b, c, d)",
							"get()",
							"Util.arityN = (fn, n) =>",
							" function(fn)",
							" function()",
							" function(fn)",
							" function(a)",
							" function(fn)",
							" function(a, b)",
							" function(fn)",
							" function(a, b, c)",
							" function(fn)",
							" function(a, b, c, d)",
							" function(fn)",
							" function(a, b, c, d, e)",
							"Util.getter = target =>",
							"self = function(key)",
							".fn = key =>",
							".fn = key =>",
							"Util.setter = target =>",
							"set = function(key, value)",
							".fn = (key, value) =>",
							".fn = (key, value) =>",
							"Util.remover = target =>",
							" key =>",
							" key =>",
							"Util.hasFn = target =>",
							" key =>",
							" key =>",
							"Util.adder = target =>",
							" arg =>",
							" arg =>",
							"self = function(obj, arg = 1)",
							" function ChooseFn(a, o)",
							".fn = (obj, arg) =>",
							".fn = (obj, arg) =>",
							".fn = (obj, arg) =>",
							".fn = (num, arg) =>",
							".fn = (obj, arg) =>",
							"Util.updater = (target, get, set, fn) =>",
							" (k, f, i) =>",
							" function doUpdate(key, func, i)",
							"create = () =>",
							" key =>",
							" () =>",
							"self = function(...args)",
							"Util.once = (fn, thisArg, memoFn) =>",
							" function(...args)",
							"Util.delay = (func, wait, thisObj) =>",
							" function(...args)",
							"function ()",
							"Util.throttle = (f, t, thisObj) =>",
							" function(...args)",
							"Util.debounce = (func, wait, options = {}) =>",
							" function later()",
							" function debounced(...a)",
							".clear = function()",
							".flush = function()",
							"Util.debounceAsync = (fn, wait, options = {}) =>",
							" function(...a)",
							"resolve =>",
							"() =>",
							"arg =>",
							" g =>",
							" g =>",
							" () =>",
							" err =>",
							" () =>",
							" err =>",
							" () =>",
							" err =>",
							"() =>",
							"Util.log = (...args) =>",
							"f =>",
							"f =>",
							"(a, p, i) =>",
							"get: () =>",
							".setFilters = function(args)",
							"arg =>",
							".getFilters = function()",
							"Util.msg = (strings, ...substitutions) =>",
							"(base, n) =>",
							"Util.generalLog = function(n, x)",
							"Util.toSource = function(arg, opts = {})",
							"print = (...args) =>",
							"Util.debug = function(message)",
							"removeCircular = function(key, value)",
							"arg =>",
							"Util.type = function({ type })",
							"Util.functionName = function(fn)",
							"Util.className = function(obj)",
							"obj",
							"Util.unwrapComponent = function(c)",
							"Util.componentName = function(c)",
							"Util.count = function(s, ch)",
							"Util.parseNum = function(str)",
							"Util.minmax = function(num, min, max)",
							"Util.getExponential = function(num)",
							"Util.getNumberParts = function(num)",
							"Util.pow2 = function(n)",
							"Util.pow10 = function(n)",
							"Util.bitValue = function(n)",
							"Util.bitMask = function(bits, start = 0)",
							"Util.bitGroups = function(num, bpp, minLen)",
							"Util.bitStuff = (arr, bpp) =>",
							"([b, f], n) =>",
							"Util.toBinary = function(num)",
							"Util.toBits = function(num)",
							" bit =>",
							"Util.getBit = function(v, n)",
							"Util.isSet = function(v, n)",
							"Util.bitCount = function(n)",
							"Util.bitNo = function(n)",
							"Util.toggleBit = function(num, bit)",
							"Util.setBit = function(num, bit)",
							"Util.clearBit = function(num, bit)",
							"Util.range = function(...args)",
							" (v, k) =>",
							"n =>",
							"Util.set = function(obj, prop, value)",
							" (prop, value) =>",
							" (prop, value) =>",
							" (prop, value) =>",
							" value =>",
							"(obj, prop) =>",
							"() =>",
							"Util.bitArrayToNumbers = function(arr)",
							"Util.bitsToNumbers = function(bits)",
							"(val, key, arr) =>",
							"Util.shuffle = function(arr, rnd = Util.rng)",
							"(a, b) =>",
							"Util.sortNum = function(arr)",
							"(a, b) =>",
							"Util.draw = (arr, n = 1, rnd = Util.rng) =>",
							"Util.is = function(what, ...pred)",
							"type =>",
							"fn =>",
							"Util.instanceOf = (value, ctor) =>",
							"Util.onoff = function(val)",
							"Util.numbersToBits = function(arr)",
							"(bits, num) =>",
							"Util.randomNumbers = function([start, end], draws)",
							"Util.randomBits = function(r = [1, 50], n = 5)",
							"Util.padFn = function(len, char = ' ', fn = (str, pad) => pad)",
							" (s, n = len) =>",
							"Util.pad = function(s, n, char = ' ')",
							"Util.abbreviate = function(str, max = 40, suffix = '...')",
							"Util.trim = function(str, charset)",
							"Util.trimRight = function(str, charset)",
							"Util.indent = (text, space = ' ') =>",
							"Util.define = (obj, ...args) =>",
							"Util.memoizedProperties = (obj, methods) =>",
							"get()",
							"Util.copyWhole = (dst, ...args) =>",
							"Util.copyEntries = (obj, entries) =>",
							"Util.extend = (...args) =>",
							"Util.isCloneable = obj =>",
							"Util.isUnextendable = val =>",
							"pred = (k, v, f) =>",
							" (key, depth) =>",
							"value = function(...args)",
							"Util.defineGetter = (obj, key, fn, enumerable = false) =>",
							"Util.defineGetterSetter = (obj, key, g, s, enumerable = false) =>",
							"Util.defineGettersSetters = (obj, gettersSetters) =>",
							"Util.extendArray = function(arr = Array.prototype)",
							" function(pred)",
							" function()",
							" function()",
							"(item, i, a) =>",
							" function()",
							" function(value)",
							"Util.adapter = function( obj, getLength = obj => obj.length, getKey = (obj, index) => obj.",
							"(index), getItem = (obj, key) => obj[key], setItem = (obj, index, value) => (obj[index] = value) )",
							"get length()",
							"get instance()",
							"key(i)",
							"get(key)",
							"has(key)",
							"set(key, value)",
							"*keys()",
							"*entries()",
							"toObject()",
							"toMap()",
							".localStorage = function(s)",
							" () =>",
							" w =>",
							" () =>",
							" l =>",
							" (l, i) =>",
							" (l, key) =>",
							" (l, key, v) =>",
							"Util.array = function(a)",
							"Util.arrayFromEntries = entries =>",
							"([k, v]) =>",
							" key =>",
							"([k, v]) =>",
							"Util.toMap = function(hash = {}, fn)",
							"Util.extendMap = function(map)",
							".entries = function* iterator()",
							".toObject = function()",
							".match = function(...args)",
							" entries =>",
							"Util.objectFrom = function(any)",
							"Util.tail = function(arr)",
							"Util.splice = function(str, index, delcount, insert)",
							"Util.identity = arg =>",
							"Util.reverse = arr =>",
							"Util.keyOf = function(obj, prop)",
							"Util.rotateRight = function(arr, n)",
							"Util.repeater = function(n, what)",
							"function* ()",
							"function* ()",
							"Util.repeat = function(n, what)",
							"Util.arrayDim = function(dimensions, init)",
							"Util.flatten = function(arr)",
							"Util.chunkArray = (a, size) =>",
							"(acc, item, i) =>",
							"Util.partition = function* (a, size)",
							"Util.intersect = (a, b) =>",
							"Util.difference = (a, b, incicludes) =>",
							"x =>",
							"x =>",
							"x =>",
							"x =>",
							"Util.symmetricDifference = (a, b) =>",
							"Util.union = (a, b, equality) =>",
							"Util.chances = function(numbers, matches)",
							"Util.sum = function(arr)",
							"(acc, n) =>",
							"Util.expr = fn =>",
							" function expr(...args)",
							" function addArgs(args)",
							"ret = function returnFn(...args)",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"Util.mod = (a, b) =>",
							" n =>",
							"(a, b) =>",
							"Util.fnName = function(f, parent)",
							"Util.objName = function(o)",
							"Util.findKey = function(obj, pred, thisVal)",
							"value : v =>",
							"Util.find = function(arr, value, prop = 'id')",
							"pred = function(obj)",
							" obj =>",
							" obj =>",
							"pred = ([key, value], arr) =>",
							"Util.findIndex = function(obj, pred, thisArg)",
							"Util.match = function(arg, pred)",
							"match = (val, key) =>",
							"(acc, val, key) =>",
							" (acc, key) =>",
							"Util.toHash = function(map, keyTransform = k => ",
							"('' + k))",
							" (v, k) =>",
							"Util.indexOf = function(obj, prop)",
							"Util.greatestCommonDenominator = (a, b) =>",
							"Util.leastCommonMultiple = (n1, n2) =>",
							"function* (re, str)",
							"Util.inspect = function(obj, opts = {})",
							"stringFn = str =>",
							"print = (...args) =>",
							" (space = false) =>",
							" (space = false) =>",
							" key =>",
							" key =>",
							"Util.dump = function(name, props)",
							" () =>",
							" w =>",
							" () =>",
							"Util.ucfirst = function(str)",
							"Util.lcfirst = function(str)",
							"Util.typeOf = v =>",
							"Util.camelize = (text, sep = '') =>",
							" (match, p1, p2, offset) =>",
							"Util.decamelize = function(str, separator = '-')",
							"Util.ifThenElse = function(pred = value => !!value, _then = () => {}, _else = () => {})",
							" function(value)",
							"Util.if = (value, _then, _else, pred) =>",
							"v =>",
							"() =>",
							"() =>",
							"Util.ifElse = (value, _else, pred) =>",
							"v =>",
							" () =>",
							" () =>",
							" () =>",
							"Util.ifThen = (value, _then, pred) =>",
							"v =>",
							" () =>",
							" () =>",
							" () =>",
							"Util.switch = ({ default: defaultCase, ...cases }) =>",
							" function(value)",
							"function* (fn, arr)",
							"Util.colorDump = (iterable, textFn) =>",
							"(color, n) =>",
							"Util.bucketInserter = (map, ...extraArgs) =>",
							" function(...args)",
							" function(...args)",
							"Util.fifo = function fifo()",
							"resolve = () =>",
							"async function* generator()",
							"r =>",
							"push(...args)",
							"process: async function run()",
							"Util.isEmail = function(v)",
							"Util.isString = function(v)",
							"Util.isNumeric = v =>",
							"Util.isUndefined = arg =>",
							"Util.isObject = obj =>",
							"Util.isPrimitive = obj =>",
							"Util.isFunction = arg =>",
							"Util.not = fn =>",
							" function(...args)",
							"Util.isAsync = fn =>",
							"Util.isArrowFunction = fn =>",
							"Util.isEmptyString = v =>",
							"Util.isEmpty = (...args) =>",
							" function empty(v)",
							"Util.isNonEmpty = (...args) =>",
							"nonEmpty = v =>",
							"Util.isIpAddress = v =>",
							"i =>",
							"i =>",
							"Util.isPortNumber = v =>",
							"Util.hasProps = function(obj, props)",
							"prop =>",
							"Util.validatePassword = function(value)",
							"Util.clone = function(obj, proto)",
							"constructor",
							"Util.deepClone = function(data)",
							"Util.findVal = function(object, propName, maxDepth = 10)",
							"Util.deepCloneObservable = function(data)",
							"Util.toArray = function(observableArray)",
							"Util.arryToTree = function(data, id, pId, appId)",
							"(e, i) =>",
							"Util.to3wei = function(a, old, id, pId)",
							"(e, i) =>",
							"(se, si) =>",
							"Util.arrExchangePos = function(arr, i, j)",
							"Util.arrRemove = function(arr, i)",
							"Util.move = function(src, dst = [])",
							"Util.moveIf = function(src, pred, dst = [])",
							"Util.logOutClearStorage = function()",
							"Util.getCookie = function(cookie, name)",
							"Util.parseCookie = function(c = document.cookie)",
							"pred = char =>",
							"char =>",
							"char =>",
							"Util.encodeCookie = c =>",
							"([key, value]) =>",
							"Util.setCookies = c =>",
							"([key, value]) =>",
							"Util.clearCookies = function(c)",
							" (acc, name) =>",
							"Util.deleteCookie = function(name)",
							" () =>",
							" w =>",
							" () =>",
							"Util.accAdd = function(arg1, arg2)",
							"Util.Subtr = function(arg1, arg2)",
							"Util.accDiv = function(arg1, arg2)",
							"Util.accMul = function(arg1, arg2)",
							"Util.dateFormatter = function(date, formate)",
							"Util.numberFormatter = function(numStr)",
							"Util.searchObject = function(object, matchCallback, currentPath, result, searched)",
							"(req = {}) =>",
							" () =>",
							" () =>",
							" () =>",
							" url =>",
							" () =>",
							"() =>",
							"() =>",
							"() =>",
							"() =>",
							"() =>",
							"() =>",
							"Util.parseQuery = function(url = ",
							")",
							"Util.encodeQuery = function(data)",
							"Util.parseURL = function(href = this.",
							")",
							"part =>",
							"([k, v]) =>",
							"(acc, m) =>",
							"href(override)",
							"Util.makeURL = function(...args)",
							"Util.numberFromURL = function(url, fn)",
							"Util.tryPromise = fn =>",
							"(resolve, reject) =>",
							"resolve = a =>",
							"reject = () =>",
							"resolve = () =>",
							"reject = () =>",
							"async function(...args)",
							" function(...args)",
							"resolve = a =>",
							"reject = () =>",
							"Util.putError = err =>",
							"() =>",
							" fn =>",
							" ret =>",
							"Util.tryPredicate = (fn, defaultRet) =>",
							" ret =>",
							" () =>",
							"Util.isBrowser = function()",
							" () =>",
							" w =>",
							" () =>",
							" () =>",
							" d =>",
							" () =>",
							"Util.waitFor = async function waitFor(msecs)",
							"({ setTimeout, clearTimeout, setInterval, clearInterval }) =>",
							"async (resolve, reject) =>",
							"() =>",
							"clear = () =>",
							"Util.timeout = async (msecs, promises, promiseClass = Promise) =>",
							"Util.isServer = function()",
							"Util.isMobile = function()",
							"Util.uniquePred = (cmp = null) =>",
							" (el, i, arr) =>",
							"item =>",
							" (el, i, arr) =>",
							"Util.unique = (arr, cmp) =>",
							"cmp = (a, b) =>",
							"(e, i, a) =>",
							"Util.zip = a =>",
							"(a, b) =>",
							"(_, i) =>",
							"arr =>",
							"Util.histogram = (...args) =>",
							" (k, v) =>",
							"initVal = () =>",
							"setVal = v =>",
							"(it, i) =>",
							"(item, i) =>",
							" (entry, idx, key) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"Util.concat = function* (...args)",
							"Util.distinct = function(arr)",
							" (value, index, me) =>",
							"Util.rangeMinMax = function(arr, field)",
							"obj =>",
							"Util.remap = (...args) =>",
							"getR = () =>",
							"r = val =>",
							"Util.mergeLists = function(arr1, arr2, key = 'id')",
							"Util.foreach = function(o, fn)",
							"Util.all = function(obj, pred)",
							"Util.isGenerator = function(fn)",
							"Util.isIterator = obj =>",
							"Util.isIterable = obj =>",
							" x =>",
							"Util.isConstructor = x =>",
							"construct(target, args)",
							"target",
							"x",
							"m =>",
							"Util.filter = function(a, pred)",
							"function* ()",
							"fn = (k, v) =>",
							"Util.reduce = (obj, fn, accu) =>",
							"Util.mapFunctional = fn =>",
							" function* (arg)",
							"Util.map = (...args) =>",
							"ret = a =>",
							"function* ()",
							"ret = a =>",
							"function* ()",
							"Util.entriesToObj = function(arr)",
							"(acc, item) =>",
							"Util.isDate = function(d)",
							"Util.parseDate = function(d)",
							"Util.isoDate = function(date)",
							"Util.toUnixTime = function(dateObj, utc = false)",
							"Util.unixTime = function(utc = false)",
							"Util.fromUnixTime = function(epoch, utc = false)",
							"Util.formatTime = function(date = ",
							"(), format = 'HH:MM:SS')",
							"Util.leapYear = function(year)",
							"Util.timeSpan = function(s)",
							"Util.randFloat = function(min, max, rnd = Util.rng)",
							"Util.randInt = (...args) =>",
							"Util.randStr = (len, charset, rnd = Util.rng) =>",
							"Util.hex = function(num, numDigits)",
							"Util.numberParts = (num, base) =>",
							"Util.roundDigits = precision =>",
							"Util.roundFunction = (prec, digits, type) =>",
							" function(value)",
							"Util.roundTo = function(value, prec, digits, type)",
							"() =>",
							" utf8 =>",
							" v =>",
							" utf8 =>",
							" base64 =>",
							" v =>",
							" string =>",
							"Util.formatRecord = function(obj)",
							"item =>",
							" function(obj)",
							"Util.isArrayLike = obj =>",
							"Util.equals = function(a, b)",
							"(e, i) =>",
							"Util.versionCompare = (a, b) =>",
							"isdigit = c =>",
							"Util.isGetter = (obj, propName) =>",
							"Util.isBool = value =>",
							"Util.size = (...args) =>",
							" function size(obj)",
							"Util.isMap = function(obj)",
							"Util.effectiveDeviceWidth = function()",
							"Util.getFormFields = function(initialState)",
							" (acc, { elements }) =>",
							" (acc2, { name, value }) =>",
							"Util.mergeObjects = function(objArr, predicate = (dst, src, key) => (src[key] == '' ? undefined : src[key]))",
							"Util.getUserAgent = function(headers = req.headers)",
							"Util.factor = function(start, end)",
							"Util.factorial = function(n)",
							"Util.increment = function(obj, key)",
							"Util.counter = function()",
							"self = function()",
							"Util.filterKeys = function(obj, pred = k => true)",
							"pred = str =>",
							"pred = str =>",
							"Util.filterMembers = function(obj, fn)",
							"pred = (k, v, o) =>",
							"Util.filterOutMembers = function(obj, fn)",
							"pred = (v, k, o) =>",
							"Util.dumpMembers = obj =>",
							"Util.filterOutKeys = function(obj, arr)",
							" (v, k, o) =>",
							" (k, v) =>",
							" key =>",
							" () =>",
							" (v, k, o) =>",
							"Util.removeKeys = function(obj, arr)",
							" (v, k, o) =>",
							" (k, v) =>",
							" key =>",
							"Util.getKeys = function(obj, arr)",
							"Util.numbersConvert = function(str)",
							"(ch, i) =>",
							"Util.entries = function(arg)",
							"function* ()",
							"Util.keys = function(arg)",
							" function* ()",
							"Util.values = function(arg)",
							" function* ()",
							"Util.removeEqual = function(a, b)",
							"Util.clear = obj =>",
							"Util.remove = (arr, item) =>",
							" (other, i, arr) =>",
							"Util.removeIf = function(arr, pred)",
							"Util.traverse = function(o, fn)",
							" (v, k, a) =>",
							" function* walker(o, depth = 0)",
							"Util.traverseWithPath = function(o, rootPath = [])",
							" function* walker(o, path)",
							"Util.indexByPath = function(o, p)",
							"Util.pushUnique = (arr, ...args) =>",
							"(acc, item) =>",
							"Util.insertSorted = function(arr, item, cmp = (a, b) => b - a)",
							"next = (k, v) =>",
							" (k, v) =>",
							" (k, v) =>",
							" (k, v) =>",
							"fn = function(key, value)",
							"Util.keyIterator = obj =>",
							"Util.entryIterator = obj =>",
							"function* ()",
							"Util.mapAdapter = getSetFunction =>",
							"get(key)",
							"set(key, value)",
							".keys = () =>",
							".entries = () =>",
							"Util.mapFunction = map =>",
							"fn = function(...args)",
							"m =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".update = function(key, fn = (k, v) => v)",
							".entries = function* ()",
							".values = function* ()",
							".keys = function* ()",
							" function()",
							"([key, value]) =>",
							".keys = async () =>",
							".entries = async () =>",
							".values = async () =>",
							".keys = function* ()",
							".entries = function* ()",
							".values = function* ()",
							".filter = function(pred)",
							"function* ()",
							".map = function(t)",
							"function* ()",
							".forEach = function(fn)",
							".delete = key =>",
							".has = key =>",
							"Util.mapWrapper = (map, toKey = key => key, fromKey = key => key) =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".keys = () =>",
							".entries = function* ()",
							".values = function* ()",
							".has = key =>",
							".delete = key =>",
							"m =>",
							"Util.mapCombinator = (forward, backward) =>",
							"fn = function(key, value)",
							"(a,m) =>",
							" key =>",
							" a =>",
							" function makeGetter(map, next = a => a)",
							" key =>",
							"Util.predicate = (fn_or_regex, pred) =>",
							"fn = arg =>",
							".valueOf = function()",
							" arg =>",
							"Util.some = predicates =>",
							" value =>",
							"pred =>",
							"Util.every = predicates =>",
							" value =>",
							"pred =>",
							"Util.iterateMembers = function* (obj, predicate = (name, depth, obj, proto) => true, depth = 0)",
							" (...predicates) =>",
							" (...args) =>",
							"pred =>",
							" (...predicates) =>",
							" (...args) =>",
							"pred =>",
							"(pred, obj) =>",
							"Util.memberNameFilter = (depth = 1, start = 0) =>",
							" (m, l, o) =>",
							" (m, l, o) =>",
							" (name, depth, obj, proto) =>",
							"Util.getMemberNames = (obj, ...args) =>",
							"Util.getMemberEntries = (obj, ...args) =>",
							"name =>",
							"accFn = (a, m, o) =>",
							" (obj, ...args) =>",
							" (a, m) =>",
							" (r, a, m) =>",
							" (r, a) =>",
							"incFn = (c, n, self) =>",
							"incFn = (c, n, self) =>",
							"inc = (i, n = 1) =>",
							"self = function Count(n = 1)",
							".valueOf = function()",
							"filterFn = (key, value) =>",
							"(acc, mem, idx) =>",
							" r =>",
							" () =>",
							"fn = function ReduceIntoMap(arg, acc = mapObj)",
							"(acc, arg) =>",
							" (a, m, o) =>",
							"Util.methodNameFilter = (depth = 1, start = 0) =>",
							" (m, l, o) =>",
							" () =>",
							" b =>",
							" () =>",
							"Util.getMethodNames = (obj, depth = 1, start = 0) =>",
							" (a, m, o) =>",
							"Util.inherit = (dst, src, depth = 1) =>",
							" function inherits(ctor, superCtor)",
							"ctor",
							"superCtor",
							" function inherits(ctor, superCtor)",
							"TempCtor = function()",
							"TempCtor",
							"superCtor",
							"ctor",
							"ctor",
							"Util.bindMethods = (obj, methods, dest) =>",
							"Util.getConstructor = obj =>",
							"Util.getPrototypeChain = function(obj, fn = p => p)",
							"Util.getObjectChain = (obj, fn = p => p) =>",
							"Util.getPropertyDescriptors = function(obj)",
							" p =>",
							"fn = (c, p) =>",
							" (p, o) =>",
							"Util.weakAssign = function(...args)",
							"other =>",
							"Util.exception = function Exception(...args)",
							"toString(color = false)",
							"Util.location = function Location(...args)",
							"toString(color = false)",
							" t =>",
							"getFileName()",
							"getLineNumber()",
							"getColumnNumber()",
							"Util.stackFrame = function StackFrame(frame)",
							"prop =>",
							"propertyMap()",
							"method =>",
							"([method, func]) =>",
							"getFunction()",
							"getMethodName()",
							"getFunctionName()",
							"getTypeName()",
							"getFileName()",
							"getLineNumber()",
							"getColumnNumber()",
							"get()",
							"toString(color, opts = {})",
							" (t, color) =>",
							" t =>",
							"p =>",
							"p =>",
							"(f, i) =>",
							"getLocation()",
							"get location()",
							"Util.scriptName = () =>",
							" () =>",
							" args =>",
							" () =>",
							"Util.getFunctionName = () =>",
							"Util.getFunctionArguments = fn =>",
							"Util.scriptDir = () =>",
							" () =>",
							" script =>",
							" () =>",
							"Util.stack = function Stack(stack, offset)",
							"frame =>",
							"([m, p]) =>",
							" (acc, [method, property]) =>",
							" function getStack()",
							".prepareStackTrace = (_, stack) =>",
							" function stackToString(st, start = 0)",
							"function* ()",
							"frame =>",
							"part =>",
							"frame =>",
							"([func, file]) =>",
							"n =>",
							"([func, file]) =>",
							"([func, [columnNumber, lineNumber, ...file]]) =>",
							"({ methodName, functionName: func, fileName: file, columnNumber: column, lineNumber: line }) =>",
							" s =>",
							" s =>",
							" () =>",
							" s =>",
							" s =>",
							" () =>",
							"frame =>",
							"frame =>",
							"get: () =>",
							"get: () =>",
							"*value()",
							"toString(opts = {})",
							"f =>",
							"getFunctionName()",
							"getMethodName()",
							"getFileName()",
							"getLineNumber()",
							"get()",
							" (a, f) =>",
							"(fn, i) =>",
							"Util.getCallerStack = function(position = 2, limit = 1000, stack)",
							".prepareStackTrace = (_, stack) =>",
							"Util.getCallerFile = function(position = 2)",
							"Util.getCallerFunction = function(position = 2)",
							"Util.getCallerFunctionName = function(position = 2)",
							"Util.getCallerFunctionNames = function(position = 2)",
							"Util.getCaller = function(index = 1, stack)",
							"f =>",
							"Util.getCallers = function(index = 1, num = Number.MAX_SAFE_INTEGER, stack)",
							"f =>",
							"Util.getStackFrames = function(offset = 2)",
							"frame =>",
							"Util.getStackFrame = function(offset = 2)",
							"Util.rotateLeft = function(x, n)",
							"Util.rotateRight = function(x, n)",
							"Util.hashString = function(string, bits = 32, mask = 0xffffffff)",
							"Util.flatTree = function(tree, addOutput)",
							"addOutput = arg =>",
							" key =>",
							"Util.traverseTree = function(tree, fn, depth = 0, parent = null)",
							"Util.walkTree = function(node, pred, t, depth = 0, parent = null)",
							"function* ()",
							"pred = i =>",
							"t = function(i)",
							"Util.isPromise = function(obj)",
							"setImmediate = fn =>",
							"Util.next = function(iter, observer, prev = undefined)",
							"val =>",
							"() =>",
							"err =>",
							"() =>",
							"Util.getImageAverageColor = function(imageElement, options)",
							"toStringRgb()",
							"toStringRgba()",
							"toStringHex()",
							"toHex = function(d)",
							"Util.jsonToObject = function(jsonStr)",
							"Util.splitLines = function(str, max_linelen = Number.MAX_SAFE_INTEGER)",
							"Util.splitAt = function* (str, ...indexes)",
							"(a, b) =>",
							"Util.decodeEscapes = function(text)",
							"m =>",
							"([s, t]) =>",
							"Util.stripXML = text =>",
							"Util.stripHTML = html =>",
							"p =>",
							"p =>",
							"Util.stripNonPrintable = text =>",
							"Util.decodeHTMLEntities = function(text)",
							" (match, entity) =>",
							"Util.encodeHTMLEntities = (str, charset = '\\u00A0-\\u9999<>&') =>",
							" i =>",
							"Util.stripAnsi = function(str)",
							"Util.proxy = (obj = {}, handler) =>",
							"get(target, key, receiver)",
							"set(target, key, value, receiver)",
							"Util.propertyLookup = (obj = {}, handler = key => null) =>",
							"get(target, key, receiver)",
							"Util.traceProxy = (obj, handler) =>",
							" function(name, args)",
							"get(target, key, receiver)",
							"member = function()",
							"Util.proxyTree = function proxyTree(...callbacks)",
							"applyCallback = () =>",
							"get(target, key)",
							"set(target, key, value)",
							"apply(target, thisArg, args)",
							" function node(path)",
							"() =>",
							"Util.construct = constructor =>",
							" function F(args)",
							"F",
							"constructor",
							"Util.constructApply = (constructor, array) =>",
							"Util.immutable = args =>",
							"set: () =>",
							"deleteProperty: () =>",
							"defineProperty: () =>",
							"Util.immutableClass = (orig, ...proto) =>",
							"p =>",
							" ctor =>",
							"ctor",
							"imm = base =>",
							"constructor(...args)",
							"Util.partial = function partial(fn /*, arg1, arg2 etc */)",
							" function()",
							"(min, max, value) =>",
							"Util.coloring = (useColor = true) =>",
							"code(...args)",
							"text(text)",
							"concat(...args)",
							"code(...args)",
							"text(text, ...color)",
							"concat(...args)",
							"code(...args)",
							"text(text, ...color)",
							"concat(...args)",
							"Util.colorText = (...args) =>",
							"Util.decodeAnsi = (str, index) =>",
							"isDigit = c =>",
							"notDigit = c =>",
							"findIndex = (pred, start) =>",
							"Util.stripAnsi = str =>",
							"Util.ansiCode = (...args) =>",
							"Util.wordWrap = (str, width, delimiter) =>",
							"Util.multiParagraphWordWrap = (str, width, delimiter) =>",
							"Util.defineInspect = (proto, ...props) =>",
							" function()",
							"(acc, key) =>",
							"(a, b, value) =>",
							"Util.bindProperties = (proxy, target, props, gen) =>",
							"name =>",
							"(acc, name) =>",
							"gen = p => v =>",
							"k =>",
							" (a, [k, v]) =>",
							" (...args) =>",
							"(...args) =>",
							" (a, k) =>",
							"get: () =>",
							"get: () =>",
							"function ()",
							" obj =>",
							"on: val =>",
							"off: val =>",
							"true: val =>",
							"false: val =>",
							"AssertionFailed",
							"constructor(message, stack)",
							"Util.assert = function assert(val, message)",
							"Util.assertEqual = function assertEqual(val1, val2, message)",
							"Util.assignGlobal = () =>",
							"Util.weakMapper = function(createFn, map = ",
							"(), hitFn)",
							"self = function(obj, ...args)",
							".set = (k, v) =>",
							".get = k =>",
							"Util.merge = function(...args)",
							" a =>",
							" a =>",
							"(acc, arg) =>",
							"Util.transformer = (a, ...l) =>",
							" (c, f) =>",
							" function(...v)",
							"Util.copyTextToClipboard = (i, t) =>",
							"async module =>",
							"(a, b, c) =>",
							"() =>",
							"Util.toPlainObject = obj =>",
							" v =>",
							"Util.toBuiltinObject = obj =>",
							" v =>",
							"t = (v, n) =>",
							"(acc, k) =>",
							"Util.timer = msecs =>",
							"remaining = () =>",
							"finish = callback =>",
							"log = (method, ...args) =>",
							"obj =>",
							" v =>",
							"timeout = (msecs, tmr = timer) =>",
							"() =>",
							" (...args) =>",
							" () =>",
							"add = (arr, ...items) =>",
							"get delay()",
							"get created()",
							"get start()",
							"get stop()",
							"get elapsed()",
							"get end()",
							"get remain()",
							"cancel()",
							"pause()",
							".resume = function()",
							".restart = function()",
							"callback(...args)",
							"subscribe(f)",
							"unsubscribe(f)",
							"start = () =>",
							"(resolve, reject) =>",
							"Util.thenableReject = error =>",
							"then: (resolve, reject) =>",
							"Util.wrapGenerator = fn =>",
							" function(...args)",
							"Util.wrapGeneratorMethods = obj =>",
							"Util.decorateIterable = (proto, generators = false) =>",
							"forEach(fn, thisArg)",
							"*map(fn, thisArg)",
							"*filter(pred, thisArg)",
							"findIndex(pred, thisArg)",
							"indexOf(item, startIndex = -1)",
							"(e, i) =>",
							"find(pred, thisArg)",
							"every(pred, thisArg)",
							"some(pred, thisArg)",
							"reduce(fn, accu)",
							"*entries()",
							"*keys()",
							"*values()",
							"Util.swap = (a, b) =>",
							"Util.swapArray = ([a, b]) =>",
							"Util.cacheAdapter = (st, defaultOpts = {}) =>",
							" () =>",
							"async c =>",
							" () =>",
							"async getItem(request, opts = {})",
							"async setItem(request, response)",
							"async addItem(request)",
							"async removeItem(request, opts = {})",
							"async key(index)",
							"async keys(urls = false, t = a => a)",
							"response =>",
							"r =>",
							"async clear()",
							"Util.cachedFetch = (allOpts = {}) =>",
							"() =>",
							"self = async function CachedFetch(request, opts = {})",
							"(returnValue, fn, ...args) =>",
							"Util.proxyObject = (root, handler) =>",
							"ptr = path =>",
							"(a, i) =>",
							" (value, path) =>",
							"get(target, key)",
							" function node(path)",
							"Util.parseXML = function(xmlStr)",
							" () =>",
							" parser =>",
							"fn = (value, ...args) =>",
							" () =>",
							" map =>",
							"(obj, ...args) =>",
							" () =>",
							" (obj, ...args) =>",
							"self = (obj, ...args) =>",
							"() =>",
							" () =>",
							" a =>",
							" () =>",
							" () =>",
							" fn =>",
							" () =>",
							" () =>",
							" a =>",
							"() =>",
							" () =>",
							" a =>",
							" () =>",
							"() =>",
							"Util.getOpt = (options = {}, args) =>",
							"findOpt = arg =>",
							"([optname, option]) =>",
							"opt =>",
							" () =>",
							" v =>",
							" () =>",
							" () =>",
							" v =>",
							"Util.getEnv = async varName =>",
							" () =>",
							"async e =>",
							" () =>",
							"Util.getEnvVars = async () =>",
							" () =>",
							"async e =>",
							" () =>",
							"Util.safeFunction = (fn, trapExceptions, thisObj) =>",
							"async function(...args)",
							" function(...args)",
							" a =>",
							" error =>",
							"Util.safeCall = (fn, ...args) =>",
							"Util.safeApply = (fn, args = []) =>",
							"Util.exit = exitCode =>",
							"stdExit = std =>",
							" () =>",
							" ([obj, exit]) =>",
							" () =>",
							"Util.atexit = handler =>",
							"Util.callMain = async (fn, trapExceptions) =>",
							"async (...args) =>",
							"async ret =>",
							"() =>",
							" err =>",
							" () =>",
							" argv1 =>",
							"Util.printReturnValue = (fn, opts = {}) =>",
							"print = (returnValue, fn, ...args) =>",
							"self = (...args) =>",
							"Util.replaceAll = (needles, haystack) =>",
							"([re, str]) =>",
							"(acc, [match, replacement]) =>",
							"Util.quote = (str, q = '\"') =>",
							"Util.escape = (str, pred = codePoint => codePoint < 32 || codePoint > 0xff) =>",
							"Util.escapeRegex = string =>",
							"Util.consolePrinter = function ConsolePrinter(log = console.log)",
							"self = function(...args)",
							".log = (...args) =>",
							"Util.consoleJoin = function(...args)",
							"Util.consoleConcat = function(...args)",
							"self = function ConsoleConcat(...args)",
							"clear()",
							"log = (...args) =>",
							"print()",
							"i =>",
							"output()",
							"add(...args)",
							"Util.booleanAdapter = (getSetFn, trueValue = 1, falseValue = 0) =>",
							" function(value)",
							"set = () =>",
							" function(...args)",
							"Util.deriveGetSet = (fn, get = v => v, set = v => v, thisObj) =>",
							" () =>",
							" v =>",
							"handler = () =>",
							"ExFunc",
							"constructor()",
							"__call__(...args)",
							"Util.isatty = async fd =>",
							"mod =>",
							"Util.ttyGetWinSize = (fd = 1) =>",
							"m =>",
							" (resolve, reject) =>",
							" (resolve, reject) =>",
							" (fd = 0, mode = true) =>",
							"Util.stdio = (fd, mode = true) =>",
							"Util.signal = (num, act) =>",
							"m =>",
							"() =>",
							"Util.timeit = (fn, args = [], options = {}) =>",
							"(p, c) =>",
							"Util.lazyProperty = (obj, name, getter, opts = {}) =>",
							"replaceProperty = value =>",
							"async function()",
							" function()",
							"v =>",
							"Util.lazyProperties = (obj, gettersObj, opts = {}) =>",
							"f = (a, b) =>",
							" function(a, b)",
							"(a, b) =>",
							"(a, b) =>",
							"() =>",
							"HighResolutionTime",
							"constructor(secs = 0, nano = 0)",
							"static create(s, n)",
							"get seconds()",
							"get milliseconds()",
							"get nanoseconds()",
							"diff(o)",
							"sum(o)",
							"since(o)",
							"toString()",
							"inspect()",
							"async function hrtime(previousTimestamp)",
							" function hrtime(previousTimestamp)",
							" () =>",
							" (minDelay = 0) =>",
							"resolve =>",
							"resolve =>",
							" function animationFrame(t)",
							"Util.getNow = () =>",
							"performanceNow = () =>",
							"performanceNow = async function(clock = CLOCK_MONOTONIC_RAW)",
							"Util.formatColumns = a =>",
							"(acc, row, i) =>",
							"(col, j) =>",
							"row =>",
							"(col, j) =>",
							"Util.getPlatform = () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							"async () =>",
							"Util.colIndexes = line =>",
							" ([prev, cols], char, i) =>",
							"Util.colSplit = (line, indexes) =>",
							"map = (name, flag) =>",
							" function* (value)",
							"log = (duration, name, args, ret) =>",
							"async (args, ret) =>",
							" (args, ret) =>",
							"async function(...args)",
							" function(...args)",
							"both = () =>",
							"(name, args) =>",
							"arg =>",
							"(name, ret) =>",
							" function(...args)",
							"Util.bind = function(f, ...args)",
							"ret = function()",
							"ret = function()",
							"ret",
							"f",
							"Util.bytesToUTF8 = function* (bytes)",
							"Util.codePointsToString = codePoints =>",
							"Util.bufferToString = b =>",
							"Util.levenshteinDistance = function levenshteinDistance(a, b)",
							"Util.padTrunc = (...args) =>",
							" (s, pad = ' ') =>",
							"Util.setReadHandler = (fd, handler) =>",
							"os =>"
						]
					},
					"AQAAAAAAAAAAAAAAR2gAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					702,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/.cmake-format",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				],
				[
					703,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/.project",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "/home/roman/.config/sublime-text/Packages/User/Themes/ES6 Next.tmTheme",
			"settings":
			{
				"buffer_size": 382002,
				"line_ending": "Unix"
			}
		},
		{
			"file": "ast-shell.js",
			"settings":
			{
				"buffer_size": 37376,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					2035,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAALOOAAAAAAAAtI4AAAAAAAAAAAAAtI4AAAAAAAC1jgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAs44AAAAAAACzjgAAAAAAAAAAAAAAAPC/"
				],
				[
					2037,
					1,
					"insert",
					{
						"characters": "globalThis"
					},
					"CgAAALSOAAAAAAAAtY4AAAAAAAAAAAAAtY4AAAAAAAC2jgAAAAAAAAAAAAC2jgAAAAAAALeOAAAAAAAAAAAAALeOAAAAAAAAuI4AAAAAAAAAAAAAuI4AAAAAAAC5jgAAAAAAAAAAAAC5jgAAAAAAALqOAAAAAAAAAAAAALqOAAAAAAAAu44AAAAAAAAAAAAAu44AAAAAAAC8jgAAAAAAAAAAAAC8jgAAAAAAAL2OAAAAAAAAAAAAAL2OAAAAAAAAvo4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtI4AAAAAAAC0jgAAAAAAAAAAAAAAAAAA"
				],
				[
					2038,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAL6OAAAAAAAAwI4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvo4AAAAAAAC+jgAAAAAAAAAAAAAAAPC/"
				],
				[
					2039,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAL+OAAAAAAAAwY4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAv44AAAAAAAC/jgAAAAAAAAAAAAAAAPC/"
				],
				[
					2040,
					1,
					"insert",
					{
						"characters": "_]"
					},
					"AgAAAMCOAAAAAAAAwY4AAAAAAAAAAAAAwY4AAAAAAADCjgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwI4AAAAAAADAjgAAAAAAAAAAAAAAAPC/"
				],
				[
					2041,
					1,
					"left_delete",
					null,
					"AQAAAMGOAAAAAAAAwY4AAAAAAAABAAAAXQ",
					"AQAAAAAAAAABAAAAwo4AAAAAAADCjgAAAAAAAAAAAAAAAPC/"
				],
				[
					2043,
					1,
					"insert",
					{
						"characters": "=items;"
					},
					"BwAAAMOOAAAAAAAAxI4AAAAAAAAAAAAAxI4AAAAAAADFjgAAAAAAAAAAAADFjgAAAAAAAMaOAAAAAAAAAAAAAMaOAAAAAAAAx44AAAAAAAAAAAAAx44AAAAAAADIjgAAAAAAAAAAAADIjgAAAAAAAMmOAAAAAAAAAAAAAMmOAAAAAAAAyo4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAw44AAAAAAADDjgAAAAAAAAAAAAAAAPC/"
				],
				[
					2059,
					1,
					"paste",
					null,
					"AQAAACGPAAAAAAAAOI8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIY8AAAAAAAAhjwAAAAAAAAAAAAAAAPC/"
				],
				[
					2068,
					1,
					"insert",
					{
						"characters": "$"
					},
					"AgAAAC2PAAAAAAAALo8AAAAAAAAAAAAALo8AAAAAAAAujwAAAAAAAAEAAABf",
					"AQAAAAAAAAABAAAALY8AAAAAAAAujwAAAAAAAAAAAAAAAPC/"
				],
				[
					2071,
					1,
					"left_delete",
					null,
					"AQAAADWPAAAAAAAANY8AAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAANo8AAAAAAAA2jwAAAAAAAAAAAAAAAPC/"
				],
				[
					2076,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAANY8AAAAAAAA1jwAAAAAAAAAAAAAAAPC/"
				],
				[
					2121,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAKkgAAaW1wb3J0IFBvcnRhYmxlU3Bhd24gZnJvbSAnLi9saWIvc3Bhd24uanMnOwppbXBvcnQgVXRpbCBmcm9tICcuL2xpYi91dGlsLmpzJzsKaW1wb3J0IHBhdGggZnJvbSAnLi9saWIvcGF0aC5qcyc7CmltcG9ydCAqIGFzIGRlZXAgZnJvbSAnLi9saWIvZGVlcC5qcyc7CmltcG9ydCB7IENvbnNvbGUgfSBmcm9tICdjb25zb2xlJzsKaW1wb3J0IFJFUEwgZnJvbSAnLi9xdWlja2pzL3Fqcy1tb2R1bGVzL2xpYi9yZXBsLmpzJzsKaW1wb3J0IHsgU0laRU9GX1BPSU5URVIsIE5vZGUsIFR5cGUsIFJlY29yZERlY2wsIEVudW1EZWNsLCBUeXBlZGVmRGVjbCwgVmFyRGVjbCwgRnVuY3Rpb25EZWNsLCBMb2NhdGlvbiwgVHlwZUZhY3RvcnksIFNwYXduQ29tcGlsZXIsIEFzdER1bXAsIEZpbmRUeXBlLCBIaWVyLCBQYXRoT2YsIE5vZGVUeXBlLCBOb2RlTmFtZSwgR2V0TG9jLCBHZXRUeXBlLCBHZXRUeXBlU3RyLCBOb2RlUHJpbnRlciwgaXNOb2RlLCBTb3VyY2VEZXBlbmRlbmNpZXMsIEdldFR5cGVOb2RlLCBHZXRGaWVsZHMsIFBhdGhSZW1vdmVMb2MsIFByaW50QXN0LCBHZXRQYXJhbXMsIExpc3QgfSBmcm9tICcuL2NsYW5nLWFzdC5qcyc7CmltcG9ydCBUcmVlIGZyb20gJy4vbGliL3RyZWUuanMnOwppbXBvcnQgeyBQb2ludGVyIH0gZnJvbSAnLi9saWIvcG9pbnRlci5qcyc7CmltcG9ydCAqIGFzIFRlcm1pbmFsIGZyb20gJy4vdGVybWluYWwuanMnOwppbXBvcnQgKiBhcyBFQ01BU2NyaXB0IGZyb20gJy4vbGliL2VjbWFzY3JpcHQuanMnOwppbXBvcnQgeyBFQ01BU2NyaXB0UGFyc2VyIH0gZnJvbSAnLi9saWIvZWNtYXNjcmlwdC5qcyc7CmltcG9ydCAqIGFzIGZzIGZyb20gJy4vbGliL2ZpbGVzeXN0ZW0uanMnOwppbXBvcnQgeyBpc09iamVjdCwgZXh0ZW5kQXJyYXksIHRvU3RyaW5nLCB0b0FycmF5QnVmZmVyIH0gZnJvbSAnLi9saWIvbWlzYy5qcyc7CmltcG9ydCB7IFJlYWRGaWxlLCBMb2FkSGlzdG9yeSwgUmVhZEpTT04sIE1hcEZpbGUsIFJlYWRCSlNPTiwgV3JpdGVGaWxlLCBXcml0ZUpTT04sIFdyaXRlQkpTT04sIERpckl0ZXJhdG9yLCBSZWN1cnNpdmVEaXJJdGVyYXRvciB9IGZyb20gJy4vaW8taGVscGVycy5qcyc7CgpleHRlbmRBcnJheShBcnJheS5wcm90b3R5cGUpOwoKZ2xvYmFsVGhpcy5mcyA9IGZzOwoKbGV0IHBhcmFtczsKbGV0IGZpbGVzOwpsZXQgc3Bhd24sIGJhc2UsIGNtZGhpc3QsIGNvbmZpZzsKbGV0IGRlZnMsIGluY2x1ZGVzLCBsaWJzLCBzb3VyY2VzOwpsZXQgbGliZGlycyA9IFsKICAnL2xpYicsCiAgJy9saWIvaTM4Ni1saW51eC1nbnUnLAogICcvbGliL3g4Nl82NC1saW51eC1nbnUnLAogICcvbGliMzInLAogICcvbGlieDMyJywKICAnL3Vzci9saWInLAogICcvdXNyL2xpYi9pMzg2LWxpbnV4LWdudScsCiAgJy91c3IvbGliL2kzODYtbGludXgtZ251L2k2ODYvc3NlMicsCiAgJy91c3IvbGliL2kzODYtbGludXgtZ251L3NzZTInLAogICcvdXNyL2xpYi94ODZfNjQtbGludXgtZ251JywKICAnL3Vzci9saWIveDg2XzY0LWxpbnV4LWdudS9saWJmYWtlcm9vdCcsCiAgJy91c3IvbGliMzInLAogICcvdXNyL2xpYngzMicsCiAgJy91c3IvbG9jYWwvbGliJywKICAnL3Vzci9sb2NhbC9saWIvaTM4Ni1saW51eC1nbnUnLAogICcvdXNyL2xvY2FsL2xpYi94ODZfNjQtbGludXgtZ251JwpdOwpsZXQgbGliZGlyczMyID0gbGliZGlycy5maWx0ZXIoZCA9PiAvKDMyJHxpWzAtOV04NikvLnRlc3QoZCkpOwpsZXQgbGliZGlyczY0ID0gbGliZGlycy5maWx0ZXIoZCA9PiAhLygzMiR8aVswLTldODYpLy50ZXN0KGQpKTsKCmFzeW5jIGZ1bmN0aW9uIEltcG9ydE1vZHVsZShtb2R1bGVQYXRoLCAuLi5hcmdzKSB7CiAgbGV0IGRvbmUgPSBmYWxzZTsKICBsZXQgbW9kdWxlTmFtZSA9IHBhdGguYmFzZW5hbWUobW9kdWxlUGF0aCwgJy5qcycpOwogIHJldHVybiBhd2FpdCBpbXBvcnQobW9kdWxlUGF0aCkudGhlbihtb2R1bGUgPT4gewogICAgZG9uZSA9IHRydWU7CiAgICBtb2R1bGUgPSBPYmplY3QuY3JlYXRlKAogICAgICBudWxsLAogICAgICBVdGlsLmdldE1lbWJlck5hbWVzKG1vZHVsZSwgSW5maW5pdHksIDApLnJlZHVjZSgKICAgICAgICAoYWNjLCBpdGVtKSA9PiAoewogICAgICAgICAgLi4uYWNjLAogICAgICAgICAgW2l0ZW1dOiB7IHZhbHVlOiBtb2R1bGVbaXRlbV0sIGVudW1lcmFibGU6IHRydWUgfQogICAgICAgIH0pLAogICAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG1vZHVsZSkKICAgICAgKQogICAgKTsKCiAgICBpZighZ2xvYmFsVGhpcy5tb2R1bGVzKSBnbG9iYWxUaGlzLm1vZHVsZXMgPSB7fTsKICAgIGdsb2JhbFRoaXMubW9kdWxlc1ttb2R1bGVOYW1lXSA9IG1vZHVsZTsKCiAgICBPYmplY3QuYXNzaWduKGdsb2JhbFRoaXMsIG1vZHVsZSk7CiAgICByZXR1cm4geyBtb2R1bGVOYW1lLCBtb2R1bGVQYXRoLCBtb2R1bGUgfTsKICB9KTsKICAvKi5jYXRjaChlID0+IHsKICAgICAgZG9uZSA9IHRydWU7CiAgICAgIHJldHVybiB7IG1vZHVsZU5hbWUsIG1vZHVsZVBhdGgsIG1vZHVsZTogZS5tZXNzYWdlIH07CiAgICB9KSovCn0KCmZ1bmN0aW9uIENvbW1hbmRMaW5lKCkgewogIGxldCBsb2cgPSBjb25zb2xlLnJlYWxsb2c7CiAgLy8gbGV0IG91dHB1dExvZyA9IGZzLm9wZW5TeW5jKCdvdXRwdXQubG9nJywgJ3crJyk7CgogIGxldCByZXBsOwogIHJlcGwgPSBnbG9iYWxUaGlzLnJlcGwgPSBuZXcgUkVQTCgnQVNUJywgZmFsc2UpOwogIC8vY29uc29sZS5sb2coJ3JlcGwnLCByZXBsKTsKCiAgbGV0IGNmZyA9IFJlYWRKU09OKGNvbmZpZyk7CgogIGlmKGNmZykgT2JqZWN0LmFzc2lnbihjb25zb2xlLm9wdGlvbnMsIGNmZy5pbnNwZWN0T3B0aW9ucyk7CgogIHJlcGwuaW1wb3J0TW9kdWxlID0gSW1wb3J0TW9kdWxlOwogIHJlcGwuaGlzdG9yeSA9IExvYWRIaXN0b3J5KGNtZGhpc3QpOwogIHJlcGwuZGlyZWN0aXZlcyA9IHsKICAgIGMoLi4uYXJncykgewogICAgICBDb21waWxlKC4uLmFyZ3MpOwogICAgICByZXR1cm4gZmFsc2U7CiAgICB9LAogICAgbCguLi5hcmdzKSB7CiAgICAgIFByb2Nlc3NGaWxlKC4uLmFyZ3MpOwogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgfTsKICByZXBsLnNob3cgPSB2YWx1ZSA9PiB7CiAgICBsZXQgZmlyc3QsIHN0cjsKICAgIGlmKGlzT2JqZWN0KHZhbHVlKSAmJiAoZmlyc3QgPSB2YWx1ZS5maXJzdCA/PyB2YWx1ZVswXSkgJiYgaXNPYmplY3QoZmlyc3QpICYmICgnaWQnIGluIGZpcnN0IHx8ICdraW5kJyBpbiBmaXJzdCkpCiAgICAgIHN0ciA9IFRhYmxlKHZhbHVlKTsKICAgIGVsc2UgaWYodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnKSBzdHIgPSB2YWx1ZTsKICAgIGVsc2Ugc3RyID0gaW5zcGVjdCh2YWx1ZSwgeyAuLi5jb25zb2xlLm9wdGlvbnMsIGRlcHRoOiAxLCBoaWRlS2V5czogWydsb2MnLCAncmFuZ2UnXSwgLi4uY2ZnLmluc3BlY3RPcHRpb25zIH0pOwogICAgc3RkLm91dC5wdXRzKHN0ciArICdcbicpOwogIH07CgogIGxldCBkZWJ1Z0xvZyA9IGZzLm9wZW5TeW5jKCdkZWJ1Zy5sb2cnLCAnYScpOwogIHJlcGwuZGVidWdMb2cgPSBkZWJ1Z0xvZzsKCiAgZ2xvYmFsVGhpcy5wcmludE5vZGUgPSBhcmcgPT4gewogICAgY29uc29sZS5sb2coTm9kZVByaW50ZXIoJC5kYXRhKS5wcmludChhcmcpKTsKICB9OwoKICByZXBsLmRlYnVnID0gKC4uLmFyZ3MpID0+IHsKICAgIGxldCBzID0gJyc7CiAgICBmb3IobGV0IGFyZyBvZiBhcmdzKSB7CiAgICAgIGlmKHMpIHMgKz0gJyAnOwogICAgICBpZih0eXBlb2YgYXJnICE9ICdzdHJwaW5nJyB8fCBhcmcuaW5kZXhPZignXHgxYicpID09IC0xKQogICAgICAgIHMgKz0gaW5zcGVjdChhcmcsIHsgZGVwdGg6IEluZmluaXR5LCBkZXB0aDogNiwgY29tcGFjdDogZmFsc2UgfSk7CiAgICAgIGVsc2UgcyArPSBhcmc7CiAgICB9CiAgICBmcy53cml0ZVN5bmMoZGVidWdMb2csIHMgKyAnXG4nKTsKICAgIGlmKGRlYnVnTG9nLmZsdXNoKSBkZWJ1Z0xvZy5mbHVzaCgpOwogIH07CgogIHJlcGwuYWRkQ2xlYW51cEhhbmRsZXIoKCkgPT4gewogICAgVGVybWluYWwubW91c2V0cmFja2luZ0Rpc2FibGUoKTsKICAgIGxldCBoaXN0ID0gcmVwbC5oaXN0b3J5LmZpbHRlcigoaXRlbSwgaSwgYSkgPT4gYS5sYXN0SW5kZXhPZihpdGVtKSA9PSBpKTsKICAgIGZzLndyaXRlRmlsZVN5bmMoCiAgICAgIGNtZGhpc3QsCiAgICAgIGhpc3QKICAgICAgICAuZmlsdGVyKGVudHJ5ID0+IChlbnRyeSArICcnKS50cmltKCkgIT0gJycpCiAgICAgICAgLm1hcChlbnRyeSA9PiBlbnRyeS5yZXBsYWNlKC9cbi9nLCAnXFxuJykgKyAnXG4nKQogICAgICAgIC5qb2luKCcnKQogICAgKTsKCiAgICBsZXQgY2ZnID0geyBpbnNwZWN0T3B0aW9uczogY29uc29sZS5vcHRpb25zIH07CiAgICBXcml0ZUpTT04oY29uZmlnLCBjZmcpOwoKICAgIGNvbnNvbGUubG9nKGBFWElUICh3cm90ZSAke2hpc3QubGVuZ3RofSBoaXN0b3J5IGVudHJpZXMpYCk7CiAgICBzdGQuZXhpdCgwKTsKICB9KTsKCiAgVXRpbC5hdGV4aXQoKCkgPT4gcmVwbC5jbGVhbnVwKCkpOwoKICByZXBsID0gVXRpbC50cmFjZVByb3h5KHJlcGwpOwoKICBpZihwYXJhbXMuZXhlYykgcmVwbC5ldmFsQW5kUHJpbnQocGFyYW1zLmV4ZWMpOwogIGVsc2UgcmVwbC5ydW4oZmFsc2UpOwp9CgpmdW5jdGlvbiogSW5jbHVkZUFsbChkaXIsIG1heERlcHRoID0gSW5maW5pdHksIHByZWQgPSBlbnRyeSA9PiAvXC5bY2hdJC8udGVzdChlbnRyeSkpIHsKICBmb3IobGV0IGVudHJ5IG9mIFJlY3Vyc2l2ZURpckl0ZXJhdG9yKGRpciwgbWF4RGVwdGgsIHByZWQpKSB5aWVsZCBgI2luY2x1ZGUgIiR7ZW50cnl9ImA7Cn0KCmZ1bmN0aW9uIFNlbGVjdExvY2F0aW9ucyhub2RlKSB7CiAgbGV0IHJlc3VsdCA9IGRlZXAuc2VsZWN0KG5vZGUsIG4gPT4gWydvZmZzZXQnLCAnbGluZScsICdmaWxlJ10uc29tZShwcm9wID0+IG5bcHJvcF0gIT09IHVuZGVmaW5lZCkpOwogIC8vY29uc29sZS5sb2coJ3Jlc3VsdDonLCBjb25zb2xlLmNvbmZpZyh7IGRlcHRoOiAxIH0pLCByZXN1bHQpOwogIHJldHVybiByZXN1bHQ7Cn0KCmZ1bmN0aW9uIExvY2F0aW9uU3RyaW5nKGxvYykgewogIGlmKHR5cGVvZiBsb2MgPT0gJ29iamVjdCcgJiYgbG9jICE9IG51bGwpIHsKICAgIGxldCBmaWxlID0gbG9jLmZpbGUgPz8gKGxvYy5pbmNsdWRlZEZyb20gJiYgbG9jLmluY2x1ZGVkRnJvbS5maWxlKTsKICAgIC8vaWYoZmlsZSkgZmlsZSA9IHBhdGgucmVsYXRpdmUoZmlsZSwgcHJvY2Vzcy5jd2QoKSk7CiAgICBpZih0eXBlb2YgbG9jLmxpbmUgPT0gJ251bWJlcicpCiAgICAgIHJldHVybiBgJHtmaWxlID8gZmlsZSArICc6JyA6ICcnfSR7bG9jLmxpbmV9JHt0eXBlb2YgbG9jLmNvbCA9PSAnbnVtYmVyJyA/ICc6JyArIGxvYy5jb2wgOiAnJ31gOwogICAgcmV0dXJuIGAke2ZpbGUgPyBmaWxlIDogJyd9QCR7bG9jLm9mZnNldH1gOwogIH0KfQoKY29uc3QgVHlwZU1hcCA9IFV0aWwud2Vha01hcHBlcihub2RlID0+IG5ldyBUeXBlKG5vZGUpKTsKCmZ1bmN0aW9uIFN0cnVjdHMobm9kZXMpIHsKICByZXR1cm4gbm9kZXMKICAgIC5maWx0ZXIobm9kZSA9PiBub2RlLmlubmVyICYmIG5vZGUuaW5uZXIuc29tZShmaWVsZCA9PiBmaWVsZC5raW5kID09ICdGaWVsZERlY2wnKSkKICAgIC5tYXAobm9kZSA9PiBbCiAgICAgIC8vZGVlcC5maW5kKG5vZGUsIG4gPT4gdHlwZW9mIG4ubGluZSA9PSAnbnVtYmVyJyksCiAgICAgIG5ldyBMb2NhdGlvbihHZXRMb2Mobm9kZSkpLAogICAgICAoKG5vZGUudGFnVXNlZCA/IG5vZGUudGFnVXNlZCArICcgJyA6ICcnKSArIChub2RlLm5hbWUgPz8gJycpKS50cmltKCksCiAgICAgIG5ldyBNYXAoCiAgICAgICAgbm9kZS5pbm5lci5tYXAoKGZpZWxkLCBpKSA9PgogICAgICAgICAgL0F0dHIvLnRlc3QoZmllbGQua2luZCkKICAgICAgICAgICAgPyBbU3ltYm9sKGZpZWxkLmtpbmQpLCBmaWVsZC5pZF0KICAgICAgICAgICAgOiBbZmllbGQubmFtZSB8fCBpLCAoZmllbGQudHlwZSAmJiBUeXBlRmFjdG9yeShmaWVsZC50eXBlKSkgfHwgZmllbGQua2luZF0KICAgICAgICApCiAgICAgICkKICAgIF0pOwogIC8qLm1hcChub2RlID0+IHR5cGVzKG5vZGUpKSovCn0KCmZ1bmN0aW9uIFRhYmxlKGxpc3QsIHByZWQgPSAobiwgbCkgPT4gdHJ1ZSkgewogIGxldCBlbnRyaWVzID0gWy4uLmxpc3RdLm1hcCgobiwgaSkgPT4gKG4gPyBbaSwgTG9jYXRpb25TdHJpbmcoR2V0TG9jKG4pKSwgbl0gOiB1bmRlZmluZWQpKS5maWx0ZXIoZSA9PiBlKTsKICBsZXQga2V5cyA9IFsnaWQnLCAna2luZCcsICduYW1lJ10uZmlsdGVyKGsgPT4gISFrKTsKICBsZXQgaXRlbXMgPSBlbnRyaWVzLmZpbHRlcigoW2ksIGwsIG5dKSA9PiBwcmVkKG4sIGwpKTsKICBjb25zdCBmaXJzdCA9IGl0ZW1zWzBdWzJdOwogIGlmKC9GdW5jdGlvbi8udGVzdChmaXJzdC5raW5kKSkgewogICAga2V5cyA9IFsKICAgICAgLi4ua2V5cywKICAgICAgZnVuY3Rpb24gcmV0dXJuVHlwZShuKSB7CiAgICAgICAgaWYobi50eXBlKSB7CiAgICAgICAgICBjb25zdCB7IHF1YWxUeXBlIH0gPSBuLnR5cGU7CiAgICAgICAgICByZXR1cm4gcXVhbFR5cGUucmVwbGFjZSgvXHMqXCguKiQvZywgJycpOwogICAgICAgIH0KICAgICAgfSwKICAgICAgZnVuY3Rpb24gbnVtQXJncyhuKSB7CiAgICAgICAgbGV0IHBhcmFtcyA9IEdldFBhcmFtcyhuKTsKICAgICAgICByZXR1cm4gcGFyYW1zID8gcGFyYW1zLmxlbmd0aCA6IHVuZGVmaW5lZDsKICAgICAgfSwKICAgICAgZnVuY3Rpb24gUGFyYW1zKG4pIHsKICAgICAgICBsZXQgcGFyYW1zID0gR2V0UGFyYW1zKG4pOwogICAgICAgIHJldHVybiBwYXJhbXMgPyBwYXJhbXMubWFwKHAgPT4gUHJpbnRBc3QocCkpLmpvaW4oJywnKSA6IHVuZGVmaW5lZDsKICAgICAgfQogICAgXTsKICB9CiAga2V5cyA9IFsnbicsIC4uLmtleXMsICdsb2NhdGlvbiddOwogIGNvbnN0IG5hbWVzID0ga2V5cy5tYXAoayA9PiAodHlwZW9mIGsgPT0gJ2Z1bmN0aW9uJyA/IGsubmFtZSA6IGspKTsKICBsZXQgcm93cyA9IGl0ZW1zLm1hcCgoW2ksIGwsIG5dKSA9PgogICAgT2JqZWN0LmZyb21FbnRyaWVzKFsKICAgICAgWyduJywgaV0sCiAgICAgIC4uLmtleXMuc2xpY2UoMSwgLTEpLm1hcCgoaywgaikgPT4gW25hbWVzW2ogKyAxXSwgdHlwZW9mIGsgPT0gJ3N0cmluZycgPyBuW2tdIDogayhuKSA/PyAnJ10pLAogICAgICBbJ2xvY2F0aW9uJywgbF0KICAgIF0pCiAgKTsKICBsZXQgc2l6ZXMgPSB7fTsKICBmb3IobGV0IHJvdyBvZiByb3dzKSB7CiAgICBmb3IobGV0IFtqLCBpXSBvZiBuYW1lcy5lbnRyaWVzKCkpIHsKICAgICAgY29uc3QgY29sID0gcm93W2ldICsgJyc7CiAgICAgIGlmKChzaXplc1tpXSA/PyAwKSA8IGNvbC5sZW5ndGgpIHNpemVzW2ldID0gY29sLmxlbmd0aDsKICAgIH0KICB9CiAgbGV0IHdpZHRoID0gbmFtZXMucmVkdWNlKChhY2MsIG5hbWUpID0+IChhY2MgPyBhY2MgKyAzICsgc2l6ZXNbbmFtZV0gOiBzaXplc1tuYW1lXSksIDApOwogIGlmKHdpZHRoID4gcmVwbC50ZXJtV2lkdGgpIHNpemVzWydQYXJhbXMnXSAtPSB3aWR0aCAtIHJlcGwudGVybVdpZHRoOwoKICBjb25zdCB0cnVuYyA9IG5hbWVzLm1hcCgobmFtZSwgaSkgPT4gVXRpbC5wYWRUcnVuYygoaSA9PSAwID8gLTEgOiAxKSAqIHNpemVzW25hbWVdKSk7CiAgY29uc3QgcGFkID0gKGNvbHMsIHBhZCwgc2VwKSA9PiB7CiAgICBpZighQXJyYXkuaXNBcnJheShjb2xzKSkgY29scyA9IG5hbWVzLm1hcCgoa2V5LCBpKSA9PiBjb2xzW2tleV0pOwogICAgcmV0dXJuIGNvbHMKICAgICAgLm1hcCgocywgY29sKSA9PiB0cnVuY1tjb2xdKHMsIHBhZCkpCiAgICAgIC5qb2luKHNlcCA/PyAnIOKUgiAnKQogICAgICAudHJpbUVuZCgpOwogIH07CiAgcmV0dXJuICgKICAgIHBhZChuYW1lcykgKwogICAgJ1xuJyArCiAgICBwYWQoCiAgICAgIG5hbWVzLnJlZHVjZSgoYWNjLCBuKSA9PiAoeyAuLi5hY2MsIFtuXTogJycgfSksIHt9KSwKICAgICAgJ+KUgCcsCiAgICAgICfilIDilLzilIAnCiAgICApICsKICAgICdcbicgKwogICAgcm93cy5yZWR1Y2UoKGFjYywgcm93KSA9PiB7CiAgICAgIHJldHVybiBhY2MgKyBwYWQocm93KS5zbGljZSgwLCByZXBsLmNvbHVtbnMpICsgJ1xuJzsKICAgIH0sICcnKQogICk7Cn0KCmZ1bmN0aW9uIFByaW50UmFuZ2UocmFuZ2UpIHsKICBpZigncmFuZ2UnIGluIHJhbmdlKSByYW5nZSA9IHJhbmdlLnJhbmdlOwoKICBjb25zdCB7IGJlZ2luLCBlbmQgfSA9IHJhbmdlOwoKICBsZXQgZGF0YSA9IGZzLnJlYWRGaWxlU3luYyhiZWdpbi5maWxlLCAndXRmLTgnKTsKICByZXR1cm4gZGF0YSA/IGRhdGEuc2xpY2UoYmVnaW4ub2Zmc2V0LCBlbmQub2Zmc2V0ICsgKGVuZC50b2tMZW4gfCAwKSkgOiBudWxsOwp9CgpmdW5jdGlvbiBPdmVybGFwUmFuZ2UocjEsIHIyKSB7CiAgY29uc3QgR2V0UmFuZ2UgPSByID0+IFtyLmJlZ2luLm9mZnNldCwgci5lbmQub2Zmc2V0ICsgKHIuZW5kLnRva0xlbiB8IDApXTsKICBjb25zdCBJblJhbmdlID0gKGksIHIpID0+IGkgPj0gclswXSAmJiBpIDwgclsxXTsKCiAgcjEgPSBHZXRSYW5nZShyMSk7CiAgcjIgPSBHZXRSYW5nZShyMik7CgogIGlmKEluUmFuZ2UocjFbMF0sIHIyKSB8fCBJblJhbmdlKHIxWzFdLCByMikpIHJldHVybiB0cnVlOwogIGlmKEluUmFuZ2UocjJbMF0sIHIxKSB8fCBJblJhbmdlKHIyWzFdLCByMSkpIHJldHVybiB0cnVlOwoKICByZXR1cm4gZmFsc2U7Cn0KCmZ1bmN0aW9uIFRlcm1pbmF0ZShleGl0Q29kZSkgewogIGNvbnNvbGUubG9nKCdUZXJtaW5hdGUnLCBleGl0Q29kZSk7CgogIFV0aWwuZXhpdChleGl0Q29kZSk7Cn0KCmZ1bmN0aW9uKiBHZW5lcmF0ZUluc3BlY3RTdHJ1Y3QoZGVjbCwgaW5jbHVkZXMpIHsKICBsZXQgeyBuYW1lLCBtZW1iZXJzIH0gPSBkZWNsOwoKICBpbmNsdWRlcyA/Pz0gW2RlY2wubG9jLmZpbGUucmVwbGFjZSgvXlwvdXNyXC9pbmNsdWRlXC8vLCAnJyldOwoKICAvL2NvbnNvbGUubG9nKCdHZW5lcmF0ZUluc3BlY3RTdHJ1Y3QnLCB7IG5hbWUsIG1lbWJlcnMsIGluY2x1ZGVzIH0pOwoKICB5aWVsZCAnI2luY2x1ZGUgPHN0ZGlvLmg+JzsKICB5aWVsZCAnI2luY2x1ZGUgPHN0ZGRlZi5oPic7CgogIGlmKE1lbWJlck5hbWVzKG1lbWJlcnMpLnNvbWUobmFtZSA9PiAvOi8udGVzdChuYW1lKSkpCiAgICB5aWVsZCBgCnNpemVfdApieXRlX2ZpcnN0bm90KGNvbnN0IHZvaWQqIHAsIHNpemVfdCBsZW4sIHVuc2lnbmVkIGNoYXIgdikgewogIGNvbnN0IHVuc2lnbmVkIGNoYXIqIHg7CiAgZm9yKHggPSBwOyBsZW47IGxlbi0tLCB4KyspCiAgICBpZigqeCAhPSB2KSBicmVhazsKICByZXR1cm4geCAtIChjb25zdCB1bnNpZ25lZCBjaGFyKilwOwp9CnNpemVfdApieXRlX2xhc3Rub3QoY29uc3Qgdm9pZCogcCwgc2l6ZV90IGxlbiwgdW5zaWduZWQgY2hhciB2KSB7CiAgY29uc3QgdW5zaWduZWQgY2hhciogeDsKICBmb3IoeCA9IChjb25zdCB1bnNpZ25lZCBjaGFyKilwICsgbGVuIC0gMTsgbGVuOyBsZW4tLSwgeC0tKQogICAgaWYoKnggIT0gdikgYnJlYWs7CiAgcmV0dXJuIHggLSAoY29uc3QgdW5zaWduZWQgY2hhciopcDsKfQpzaXplX3QKYml0X2ZpcnN0bm90KHVuc2lnbmVkIGNoYXIgdiwgdW5zaWduZWQgY2hhciBiKSB7CiAgaW50IGk7CiAgZm9yKGkgPSAwOyBpIDwgODsgaSsrLCB2ID4+PSAxKSAKICAgIGlmKCh2ICYgMSkgPT0gIWIpIGJyZWFrOwogIHJldHVybiBpOwp9CnNpemVfdApiaXRfbGFzdG5vdCh1bnNpZ25lZCBjaGFyIHYsIHVuc2lnbmVkIGNoYXIgYikgewogIGludCBpOwogIGZvcihpID0gNzsgaSA+PSAwOyBpLS0pIAogICAgaWYoISEodiAmICgxIDw8IGkpKSA9PSAhYikgYnJlYWs7CiAgcmV0dXJuIGkgPj0gMCA/IGkgOiA4Owp9CnNpemVfdApmaXJzdG5vdChjb25zdCB2b2lkKiBwLCBzaXplX3QgbGVuLCB1bnNpZ25lZCBjaGFyIHYpIHsKIGNvbnN0IGNoYXIqIHggPSBwOwogc2l6ZV90IGkgPSBieXRlX2ZpcnN0bm90KHAsIGxlbiwgdik7CiByZXR1cm4gaSAqIDggKyBiaXRfZmlyc3Rub3QoeFtpXSwgdik7Cn0Kc2l6ZV90Cmxhc3Rub3QoY29uc3Qgdm9pZCogcCwgc2l6ZV90IGxlbiwgdW5zaWduZWQgY2hhciB2KSB7CiBjb25zdCB1bnNpZ25lZCBjaGFyKiB4ID0gcDsKIHNpemVfdCBpID0gYnl0ZV9sYXN0bm90KHAsIGxlbiwgdik7CiByZXR1cm4gaSAqIDggKyBiaXRfbGFzdG5vdCh4W2ldLCB2KTsKfQpzaXplX3QKYml0c2l6ZShjb25zdCB2b2lkKiBwLCBzaXplX3QgbGVuKSB7CiByZXR1cm4gbGFzdG5vdChwLCBsZW4sIDB4ZmYpICsgMSAtIGZpcnN0bm90KHAsIGxlbiwgMHhmZik7Cn0KYDsKCiAgZm9yKGxldCBpbmNsdWRlIG9mIGluY2x1ZGVzKSB5aWVsZCBgI2luY2x1ZGUgIiR7aW5jbHVkZX0iYDsKICB5aWVsZCBgJHtuYW1lfSBzdmFyO2A7CiAgeWllbGQgYGludCBtYWluKCkge2A7CiAgeWllbGQgYCAgcHJpbnRmKCIke25hbWV9ICV6dVxcbiIsIHNpemVvZihzdmFyKSAqIDgpO2A7CgogIGZvcihsZXQgbWVtYmVyIG9mIE1lbWJlck5hbWVzKG1lbWJlcnMpKSB7CiAgICBpZih0cnVlIC8qKHR5cGUgPT0gbnVsbCB8fCB0eXBlb2YgdHlwZS5zaXplID09ICdudW1iZXInKSAmJiBtZW1iZXIgIT0gdW5kZWZpbmVkKi8pIHsKICAgICAgbGV0IGZpZWxkID0gbWVtYmVyLnJlcGxhY2UoLzouKi8sICcnKTsKICAgICAgaWYoLzovLnRlc3QobWVtYmVyKSkgewogICAgICAgIHlpZWxkIGAKICBtZW1zZXQoJnN2YXIsIDB4ZmYsIHNpemVvZihzdmFyKSk7CiAgc3Zhci4ke2ZpZWxkfSA9IDA7CiAgcHJpbnRmKCIuJHtmaWVsZH0gJXp1ICV6aVxcbiIsIGZpcnN0bm90KCZzdmFyLCBzaXplb2Yoc3ZhciksIDB4ZmYpLCBiaXRzaXplKCZzdmFyLCBzaXplb2Yoc3ZhcikpKTtgOwogICAgICB9IGVsc2UgewogICAgICAgIHlpZWxkIGAgIHByaW50ZigiLiR7ZmllbGR9ICV6dSAlenVcXG4iLCBvZmZzZXRvZigke25hbWV9LCAke2ZpZWxkfSkgKiA4LCBzaXplb2Yoc3Zhci4ke2ZpZWxkfSkgKiA4KTtgOwogICAgICB9CiAgICB9CiAgfQoKICB5aWVsZCBgICByZXR1cm4gMDtgOwogIHlpZWxkIGB9YDsKfQoKZnVuY3Rpb24gSW5zcGVjdFN0cnVjdChkZWNsLCBpbmNsdWRlcywgY29tcGlsZXIgPSAnY2xhbmcnKSB7CiAgaWYodHlwZW9mIGRlY2wgPT0gJ3N0cmluZycpIHsKICAgIGxldCBuYW1lID0gKGRlY2wuaW5kZXhPZignICcpICE9IC0xID8gJycgOiAnc3RydWN0ICcpICsgZGVjbDsKICAgIGRlY2wgPSBUeXBlLmdldChuYW1lLCAkLmRhdGEpOwogICAgZGVjbCA/Pz0gJC5nZXRUeXBlKG5hbWUpOwogICAgZGVjbC5uYW1lID0gbmFtZTsKICB9CiAgY29uc29sZS5sb2coJ0luc3BlY3RTdHJ1Y3QnLCBkZWNsKTsKCiAgY29uc3QgY29kZSA9IFsuLi5HZW5lcmF0ZUluc3BlY3RTdHJ1Y3QoZGVjbCwgaW5jbHVkZXMpXS5qb2luKCdcbicpOwogIGNvbnN0IHByb2dyYW0gPSBgL3RtcC9pbnNwZWN0LSR7ZGVjbC5uYW1lLnJlcGxhY2UoLyAvZywgJ18nKX1gOwogIFdyaXRlRmlsZShwcm9ncmFtICsgJy5jJywgY29kZSk7CgogIGxldCBjb21tYW5kID0gW2NvbXBpbGVyLCAnLU8yJywgJy1nJywgJy13JywgJy1vJywgcHJvZ3JhbSwgcHJvZ3JhbSArICcuYycsIC4uLmZsYWdzXTsKICBjb25zb2xlLmxvZygnSW5zcGVjdFN0cnVjdCcsIHsgY29tbWFuZDogY29tbWFuZC5qb2luKCcgJykgfSk7CgogIGxldCByZXN1bHQgPSBvcy5leGVjKGNvbW1hbmQpOwoKICBpZihyZXN1bHQgPT0gMCkgewogICAgbGV0IFtmZCwgc3Rkb3V0XSA9IG9zLnBpcGUoKTsKCiAgICBvcy5leGVjKFsocHJvZ3JhbS5zdGFydHNXaXRoKCcvJykgPyAnJyA6IGAuL2ApICsgcHJvZ3JhbV0sIHsgc3Rkb3V0IH0pOwogICAgbGV0IG91dHB1dCA9IGZzLnJlYWRBbGwoZmQpOwoKICAgIGxldCBsaW5lcyA9IG91dHB1dC50cmltKCkuc3BsaXQoJ1xuJyk7CiAgICBsZXQgZmlyc3RMaW5lID0gbGluZXMuc2hpZnQoKTsKCiAgICBsZXQgW25hbWUsIHNpemVdID0gWy4uLlV0aWwuc3BsaXRBdChmaXJzdExpbmUsIFsuLi5maXJzdExpbmVdLmxhc3RJbmRleE9mKCcgJykpXTsKCiAgICBuYW1lID0gbmFtZS5yZXBsYWNlKC9eKHN0cnVjdHx1bmlvbnxlbnVtKVwgLywgJycpOwoKICAgIC8vY29uc29sZS5sb2coImxpbmVzOiIsIGxpbmVzKTsKICAgIHJlc3VsdCA9IGxpbmVzCiAgICAgIC5tYXAobGluZSA9PiAodHlwZW9mIGxpbmUgPT0gJ3N0cmluZycgPyBsaW5lLnNwbGl0KCcgJykgOiBsaW5lKSkKICAgICAgLm1hcChsaW5lID0+IGxpbmUubWFwKChjb2wsIGkpID0+IChpc05hTigrY29sKSA/IGNvbCA6ICtjb2wpKSkKICAgICAgLm1hcCgoW2ZpZWxkLCBvZmZzZXQsIHNpemVdKSA9PiBbZmllbGQucmVwbGFjZSgvOi4qLywgJycpLnJlcGxhY2UoL15cLi8sIG5hbWUgKyAnLicpLCBvZmZzZXQsIHNpemVdKTsKCiAgICBsZXQgZW5kID0gMDsKICAgIHJlc3VsdCA9IHJlc3VsdC5yZWR1Y2UoKGFjYywgbGluZSkgPT4gewogICAgICBpZihhY2MubGVuZ3RoKSB7CiAgICAgICAgaWYoZW5kIDwgYWNjLmxhc3RbMV0gKyBhY2MubGFzdFsyXSkgZW5kID0gYWNjLmxhc3RbMV0gKyBhY2MubGFzdFsyXTsKCiAgICAgICAgaWYoZW5kIDwgbGluZVsxXSkgYWNjLnB1c2goW251bGwsIGVuZCwgbGluZVsxXSAtIGVuZF0pOwogICAgICB9CiAgICAgIGFjYy5wdXNoKGxpbmUpOwogICAgICByZXR1cm4gYWNjOwogICAgfSwgW10pOwoKICAgIHJlc3VsdC51bnNoaWZ0KFtuYW1lLCAnLScsICtzaXplXSk7CgogICAgVXRpbC5kZWZpbmUocmVzdWx0LCB7CiAgICAgIHRvU3RyaW5nKHNlcCA9ICcgJykgewogICAgICAgIHJldHVybiB0aGlzLm1hcChsaW5lID0+IGxpbmUuam9pbihzZXApLnJlcGxhY2UoJy4nLCAnICcpKS5qb2luKCdcbicpOwogICAgICB9CiAgICB9KTsKICB9CgogIHJldHVybiByZXN1bHQ7Cn0KCmZ1bmN0aW9uIFJvdW5kVG8odmFsdWUsIGFsaWduKSB7CiAgcmV0dXJuIE1hdGguZmxvb3IoKHZhbHVlICsgKGFsaWduIC0gMSkpIC8gYWxpZ24pICogYWxpZ247Cn0KCmZ1bmN0aW9uIE1ha2VTdHJ1Y3RDbGFzcyhkZWNsLCBmaWxlbmFtZSkgewogIGxldCBjb2RlID0gWy4uLkdlbmVyYXRlU3RydWN0Q2xhc3MoZGVjbCldLmpvaW4oJ1xuJyk7CgogIFdyaXRlRmlsZSgoZmlsZW5hbWUgPz8gZGVjbC5uYW1lLnJlcGxhY2UoL1teQS1aYS16MC05X10vZywgJy0nKSkgKyAnLmpzJywgY29kZSk7CgogIGlmKCFmaWxlbmFtZSkgcmV0dXJuIGNvZGU7Cn0KCmZ1bmN0aW9uKiBHZW5lcmF0ZVN0cnVjdENsYXNzKGRlY2wsIGZmaVByZWZpeCA9ICcnKSB7CiAgbGV0IG5hbWU7CiAgaWYoZGVjbCBpbnN0YW5jZW9mIFR5cGVkZWZEZWNsKSB7CiAgICBuYW1lID0gZGVjbC5uYW1lOwogICAgZGVjbCA9IGRlY2wudHlwZTsKICB9CgogIGxldCB7IHNpemUsIG1lbWJlcnMgfSA9IGRlY2w7CiAgbmFtZSA/Pz0gZGVjbC5uYW1lOwoKICBsZXQgY2xhc3NOYW1lID0gbmFtZS5yZXBsYWNlKC9zdHJ1Y3RccyovLCAnJyk7CiAgeWllbGQgYGNsYXNzICR7Y2xhc3NOYW1lfSBleHRlbmRzIEFycmF5QnVmZmVyIHtgOwogIHlpZWxkIGAgIGNvbnN0cnVjdG9yKG9iaiA9IHt9KSB7XG4gICAgc3VwZXIoJHtzaXplfSk7XG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBvYmopO1xuICB9YDsKICB5aWVsZCBgICBnZXQgW1N5bWJvbC50b1N0cmluZ1RhZ10oKSB7IHJldHVybiBcYFske25hbWV9IEAgXCR7dGhpc30gXVxgOyB9YDsKICBsZXQgZmllbGRzID0gW107CiAgbGV0IG9mZnNldCA9IDA7CgogIGNvbnNvbGUubG9nKCdHZW5lcmF0ZVN0cnVjdENsYXNzJywgZGVjbCk7CiAgZm9yKGxldCBbbmFtZSwgdHlwZV0gb2YgbWVtYmVycykgewogICAgaWYoL3Jlc2VydmVkLy50ZXN0KG5hbWUpKSBjb250aW51ZTsKCiAgICBpZih0eXBlLnNpemUgPT0gOCkgb2Zmc2V0ID0gUm91bmRUbyhvZmZzZXQsIDgpOwogICAgbGV0IGRlc3VnYXJlZCA9IHR5cGUuZGVzdWdhcmVkICYmIHR5cGUuZGVzdWdhcmVkICE9IHR5cGUgPyBgICgke3R5cGUuZGVzdWdhcmVkfSlgIDogJyc7CiAgICBsZXQgcG9pbnRlciA9IHR5cGUucG9pbnRlcjsKCiAgICB5aWVsZCAnJzsKICAgIGxldCBzdWJzY3JpcHQgPSB0eXBlLnN1YnNjcmlwdCA/PyAnJzsKICAgIHlpZWxkIGAgIC8qICR7b2Zmc2V0fTogJHt0eXBlfSR7ZGVzdWdhcmVkfSAke25hbWV9JHtzdWJzY3JpcHR9ICovYDsKICAgIHRyeSB7CiAgICAgIHlpZWxkKiBHZW5lcmF0ZUdldFNldChuYW1lLCBvZmZzZXQsIHR5cGUsIGZmaVByZWZpeCkubWFwKGxpbmUgPT4gYCAgJHtsaW5lfWApOwogICAgfSBjYXRjaChlKSB7fQogICAgZmllbGRzLnB1c2gobmFtZSk7CgogICAgb2Zmc2V0ICs9IFJvdW5kVG8odHlwZS5zaXplLCA0KTsKICB9CiAgeWllbGQgJyc7CiAgeWllbGQgYCAgc3RhdGljIGZyb20oYWRkcmVzcykge1xuICAgIGxldCByZXQgPSAke2ZmaVByZWZpeH10b0FycmF5QnVmZmVyKGFkZHJlc3MsICR7b2Zmc2V0fSk7XG4gICAgcmV0dXJuIE9iamVjdC5zZXRQcm90b3R5cGVPZihyZXQsICR7Y2xhc3NOYW1lfS5wcm90b3R5cGUpO1xuICB9YDsKICB5aWVsZCAnJzsKCiAgeWllbGQgYCAgdG9TdHJpbmcoKSB7XG4gICAgY29uc3QgeyAke2ZpZWxkcy5qb2luKCcsICcpfSB9ID0gdGhpcztcbiAgICByZXR1cm4gXGAke25hbWV9IHske1suLi5tZW1iZXJzXQogICAgLm1hcCgKICAgICAgKFtmaWVsZCwgbWVtYmVyXSkgPT4KICAgICAgICAnXFxuXFx0LicgKwogICAgICAgIGZpZWxkICsKICAgICAgICAnID0gJyArCiAgICAgICAgKG1lbWJlci5pc1BvaW50ZXIoKSA/ICcweCcgOiAnJykgKwogICAgICAgICckeycgKwogICAgICAgIGZpZWxkICsKICAgICAgICAobWVtYmVyLmlzUG9pbnRlcigpID8gJy50b1N0cmluZygxNiknIDogJycpICsKICAgICAgICAnfScKICAgICkKICAgIC5qb2luKCcsJyl9XFxufVxgO1xuICB9YDsKICB5aWVsZCAnfSc7Cn0KCmZ1bmN0aW9uIEdlbmVyYXRlR2V0U2V0KG5hbWUsIG9mZnNldCwgdHlwZSwgZmZpUHJlZml4KSB7CiAgY29uc3QgeyBzaXplLCBzaWduZWQgfSA9IHR5cGU7CiAgY29uc3QgZmxvYXRpbmcgPSB0eXBlLmlzRmxvYXRpbmdQb2ludCgpOwogIGNvbnN0IHBvaW50ZXIgPSB0eXBlLmdldFBvaW50ZXIoJC5kYXRhKTsKICBsZXQgY3RvciA9IEJ5dGVMZW5ndGgyVHlwZWRBcnJheShzaXplLCBzaWduZWQsIGZsb2F0aW5nKTsKICBsZXQgdG9IZXggPSB2ID0+IHY7CiAgaWYodHlwZS5pc1BvaW50ZXIoKSkgdG9IZXggPSB2ID0+IGAnMHgnKyR7dn0udG9TdHJpbmcoMTYpYDsKCiAgbGV0IGEgPSBbXTsKCiAgaWYocG9pbnRlcikgewogICAgbGV0IHsgbmFtZSwgc2l6ZSwgc2lnbmVkLCBkZXN1Z2FyZWQgfSA9IHBvaW50ZXI7CiAgICBhLnVuc2hpZnQoYC8qICR7bmFtZX0ke2Rlc3VnYXJlZCA/IGAgKCR7ZGVzdWdhcmVkfSlgIDogJyd9ICR7c2l6ZX0gJHtzaWduZWR9ICovYCk7CiAgICBjb25zb2xlLmxvZygnR2VuZXJhdGVTdHJ1Y3RDbGFzcycsIHsgcG9pbnRlciB9KTsKICB9CiAgcmV0dXJuIFsKICAgIC4uLmEsCiAgICBgc2V0ICR7bmFtZX0odmFsdWUpIHsgaWYodHlwZW9mIHZhbHVlID09ICdvYmplY3QnICYmIHZhbHVlICE9IG51bGwgJiYgdmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgdmFsdWUgPSAke2ZmaVByZWZpeH10b1BvaW50ZXIodmFsdWUpOyBuZXcgJHtjdG9yfSh0aGlzLCAke29mZnNldH0pWzBdID0gJHtCeXRlTGVuZ3RoMlZhbHVlKAogICAgICBzaXplLAogICAgICBzaWduZWQsCiAgICAgIGZsb2F0aW5nCiAgICApfTsgfWAsCiAgICBgZ2V0ICR7bmFtZX0oKSB7IHJldHVybiAke3RvSGV4KGBuZXcgJHtjdG9yfSh0aGlzLCAke29mZnNldH0pWzBdYCl9OyB9YAogIF07Cn0KCmZ1bmN0aW9uIEJ5dGVMZW5ndGgyVHlwZWRBcnJheShieXRlTGVuZ3RoLCBzaWduZWQsIGZsb2F0aW5nKSB7CiAgaWYoZmxvYXRpbmcpIHsKICAgIHN3aXRjaCAoYnl0ZUxlbmd0aCkgewogICAgICBjYXNlIDQ6CiAgICAgICAgcmV0dXJuICdGbG9hdDMyQXJyYXknOwogICAgICBjYXNlIDg6CiAgICAgICAgcmV0dXJuICdGbG9hdDY0QXJyYXknOwogICAgICBkZWZhdWx0OgogICAgICAgIHRocm93IG5ldyBFcnJvcihgRmxvYXRpbmcgcG9pbnQsIGJ1dCAke2J5dGVMZW5ndGh9IHNpemVgKTsKICAgIH0KICB9CiAgc3dpdGNoIChieXRlTGVuZ3RoKSB7CiAgICBjYXNlIDE6CiAgICAgIHJldHVybiBzaWduZWQgPyAnSW50OEFycmF5JyA6ICdVaW50OEFycmF5JzsKICAgIGNhc2UgMjoKICAgICAgcmV0dXJuIHNpZ25lZCA/ICdJbnQxNkFycmF5JyA6ICdVaW50MTZBcnJheSc7CiAgICBjYXNlIDQ6CiAgICAgIHJldHVybiBzaWduZWQgPyAnSW50MzJBcnJheScgOiAnVWludDMyQXJyYXknOwogICAgY2FzZSA4OgogICAgICByZXR1cm4gc2lnbmVkID8gJ0JpZ0ludDY0QXJyYXknIDogJ0JpZ1VpbnQ2NEFycmF5JzsKICAgIGRlZmF1bHQ6CiAgICAgIHJldHVybiBzaWduZWQgPyAnSW50OEFycmF5JyA6ICdVaW50OEFycmF5JzsKICB9Cn0KCmZ1bmN0aW9uIEJ5dGVMZW5ndGgyVmFsdWUoYnl0ZUxlbmd0aCwgc2lnbmVkLCBmbG9hdGluZykgewogIGlmKGJ5dGVMZW5ndGggPT0gOCAmJiAhZmxvYXRpbmcpIHJldHVybiAnQmlnSW50KHZhbHVlKSc7CiAgcmV0dXJuICd2YWx1ZSc7Cn0KCmV4cG9ydCBjbGFzcyBGRklfRnVuY3Rpb24gewogIGNvbnN0cnVjdG9yKG5vZGUsIHByZWZpeCA9ICcnKSB7CiAgICBjb25zdCB7IG5hbWUsIHJldHVyblR5cGUgPSAndm9pZCcsIHBhcmFtZXRlcnMgPSBbXSB9ID0gbm9kZTsKICAgIGNvbnNvbGUubG9nKCdGRklfRnVuY3Rpb24uY29uc3RydWN0b3InLCBub2RlLCB7IG5hbWUsIHBhcmFtZXRlcnMgfSk7CiAgICB0aGlzLm5hbWUgPSBuYW1lOwogICAgdGhpcy5wcmVmaXggPSBwcmVmaXg7CiAgICB0aGlzLnJldHVyblR5cGUgPSByZXR1cm5UeXBlLmZmaTsKICAgIHRoaXMucGFyYW1ldGVycyA9IFsuLi4ocGFyYW1ldGVycyB8fCBbXSldLm1hcCgoW25hbWUsIHR5cGVdLCBpZHgpID0+IFtuYW1lID8/IGBhcmcke2lkeCArIDF9YCwgdHlwZS5mZmldKTsKICB9CgogIGdlbmVyYXRlRGVmaW5lKGZwLCBsaWIpIHsKICAgIGNvbnN0IHsgcHJlZml4LCBuYW1lLCByZXR1cm5UeXBlLCBwYXJhbWV0ZXJzIH0gPSB0aGlzOwogICAgZnAgPz89IChuYW1lLCBsaWIpID0+IGAke3ByZWZpeH1kbHN5bSgke2xpYiA/PyAnUlRMRF9ERUZBVUxUJ30sICcke25hbWV9JylgOwogICAgbGV0IGNvZGUgPSBgJyR7bmFtZX0nLCAke2ZwKG5hbWUsIGxpYil9LCBudWxsLCAnJHtyZXR1cm5UeXBlfSdgOwogICAgY29uc29sZS5sb2coJ2Z1bmN0aW9uJywgVXRpbC5jb2xvclRleHQobmFtZSwgMSwgMzMpLCAncmV0dXJuVHlwZTonLCBVdGlsLmNvbG9yVGV4dChyZXR1cm5UeXBlLCAxLCAzMSkpOwogICAgbGV0IHBhcmFtSW5kZXggPSAwOwogICAgZm9yKGxldCBbcGFyYW1OYW1lLCB0eXBlXSBvZiBwYXJhbWV0ZXJzKSB7CiAgICAgICsrcGFyYW1JbmRleDsKICAgICAgLy9jb25zb2xlLmxvZyhgcGFyYW0gIyR7cGFyYW1JbmRleH1gLCAuLi4ocGFyYW1OYW1lID8gWyduYW1lOicsIHBhcmFtTmFtZV0gOiBbXSksICd0eXBlOicsIHR5cGUpOwogICAgICBjb2RlICs9ICcsICc7CiAgICAgIGNvZGUgKz0gYCcke3R5cGV9J2A7CiAgICB9CiAgICByZXR1cm4gYCR7cHJlZml4fWRlZmluZSgke2NvZGV9KTtgOwogIH0KCiAgZ2VuZXJhdGVEb2MoKSB7CiAgICBjb25zdCB7IHByZWZpeCwgbmFtZSwgcmV0dXJuVHlwZSwgcGFyYW1ldGVycyB9ID0gdGhpczsKICAgIGNvbnN0IGxpbmVzID0gW107CiAgICBjb25zdCBjb2x1bW5zID0gWzEwLCAxNl07CiAgICBjb25zdCBwdXNoID0gKC4uLmFyZ3MpID0+CiAgICAgIGxpbmVzLnB1c2goCiAgICAgICAgWy4uLmFyZ3NdCiAgICAgICAgICAubWFwKGZpZWxkID0+ICh0eXBlb2YgZmllbGQgIT0gJ3N0cmluZycgPyAnJyA6IGZpZWxkKSkKICAgICAgICAgIC5tYXAoKGZpZWxkLCBjb2wpID0+IGZpZWxkLnBhZEVuZChjb2x1bW5zW2NvbF0gPz8gMCkpCiAgICAgICAgICAuam9pbignJykKICAgICAgKTsKICAgIHB1c2goJy8qKicpOwoKICAgIHB1c2goYEBmdW5jdGlvbmAsIGAke25hbWV9YCk7CiAgICBpZihwYXJhbWV0ZXJzLmxlbmd0aCkgcHVzaCgpOwoKICAgIGxldCBqcyA9IHR5cGUgPT4gewogICAgICBsZXQgdHlwZU9iaiA9IFR5cGUuZGVjbGFyYXRpb25zLmdldCh0eXBlKTsKICAgICAgcmV0dXJuIHR5cGVPYmogPyB0eXBlT2JqLnRvSlMoKSA6IHR5cGU7CiAgICB9OwoKICAgIGZvcihsZXQgW3BhcmFtTmFtZSwgdHlwZV0gb2YgcGFyYW1ldGVycykgewogICAgICAvL2NvbnNvbGUubG9nKGNvbnNvbGUuY29uZmlnKHsgYnJlYWtMZW5ndGg6IEluZmluaXR5IH0pLCB7IHBhcmFtTmFtZSwgdHlwZSB9KTsKCiAgICAgIHB1c2goYEBwYXJhbWAsIGB7JHtqcyh0eXBlKX19YCwgcGFyYW1OYW1lKTsKICAgIH0KICAgIGlmKHJldHVyblR5cGUgIT0gJ3ZvaWQnKSB7CiAgICAgIHB1c2goKTsKICAgICAgcHVzaChgQHJldHVybmAsIGB7JHtqcyhyZXR1cm5UeXBlKX19YCk7CiAgICB9CiAgICByZXR1cm4gbGluZXMuam9pbignXG4gKiAnKSArICdcbiAqL1xuJzsKICB9CgogIGdlbmVyYXRlQ2FsbCgpIHsKICAgIGNvbnN0IHsgcHJlZml4LCBuYW1lLCByZXR1cm5UeXBlLCBwYXJhbWV0ZXJzIH0gPSB0aGlzOwogICAgY29uc3QgcGFyYW1OYW1lcyA9IHBhcmFtZXRlcnMubWFwKChbbmFtZSwgdHlwZV0pID0+IG5hbWUpOwogICAgbGV0IGNvZGUgPSBgZnVuY3Rpb24gJHtuYW1lfSgke3BhcmFtTmFtZXMuam9pbignLCAnKX0pIHtcbmA7CiAgICBjb2RlICs9IGAgICR7cmV0dXJuVHlwZSAhPSAndm9pZCcgPyAncmV0dXJuICcgOiAnJ30ke3ByZWZpeH1jYWxsKCcke25hbWV9JywgJHtwYXJhbU5hbWVzLmpvaW4oJywgJyl9KTtcbmA7CiAgICBjb2RlICs9IGB9YDsKICAgIHJldHVybiBjb2RlOwogIH0KCiAgZ2VuZXJhdGUoZnAsIGxpYiwgZXhwKSB7CiAgICByZXR1cm4gW3RoaXMuZ2VuZXJhdGVEZWZpbmUoZnAsIGxpYiksICdcbicsIGV4cCA/ICdleHBvcnQgJyA6ICcnLCB0aGlzLmdlbmVyYXRlQ2FsbCgpLCAnXG4nXS5qb2luKCcnKTsKICB9CgogIGdlbmVyYXRlRnVuY3Rpb24oZnAsIGxpYikgewogICAgY29uc3QgeyBwcmVmaXgsIG5hbWUsIHJldHVyblR5cGUsIHBhcmFtZXRlcnMgfSA9IHRoaXM7CiAgICBjb25zdCBwYXJhbU5hbWVzID0gcGFyYW1ldGVycy5tYXAoKFtuYW1lLCB0eXBlXSkgPT4gbmFtZSk7CiAgICBsZXQgY29kZSA9IGBuZXcgRnVuY3Rpb24oJHtwYXJhbU5hbWVzLm1hcChwID0+IGAnJHtwfSdgKS5qb2luKCcsICcpfSwgYDsKCiAgICBjb2RlICs9IGAncmV0dXJuICR7cHJlZml4fWNhbGwoIiR7bmFtZX0iJHtwYXJhbU5hbWVzLm1hcChwID0+IGAsICR7cH1gKS5qb2luKCcnKX0pJyk7YDsKICAgIHJldHVybiBjb2RlOwogIH0KCiAgY29tcGlsZUZ1bmN0aW9uKGZwLCBsaWIpIHsKICAgIGxldCBjb2RlID0gdGhpcy5nZW5lcmF0ZUNhbGwoZnAsIGxpYik7CiAgICBsZXQgZm4gPSBuZXcgRnVuY3Rpb24oYHJldHVybiAke2NvZGV9YCk7CiAgICByZXR1cm4gZm4oKTsKICB9Cn0KCmZ1bmN0aW9uIEZkUmVhZGVyKGZkLCBidWZmZXJTaXplID0gMTAyNCkgewogIGxldCBidWYgPSBmcy5idWZmZXIoYnVmZmVyU2l6ZSk7CiAgcmV0dXJuIG5ldyBSZXBlYXRlcihhc3luYyAocHVzaCwgc3RvcCkgPT4gewogICAgbGV0IHJldDsKICAgIGRvIHsKICAgICAgbGV0IHIgPSBhd2FpdCBmcy53YWl0UmVhZChmZCk7CiAgICAgIHJldCA9IGZzLnJlYWQoZmQsIGJ1Zik7CiAgICAgIGlmKHJldCA+IDApIHsKICAgICAgICBsZXQgZGF0YSA9IGJ1Zi5zbGljZSgwLCByZXQpOwogICAgICAgIGF3YWl0IHB1c2goZnMuYnVmZmVyVG9TdHJpbmcoZGF0YSkpOwogICAgICB9CiAgICB9IHdoaWxlKHJldCA9PSBidWZmZXJTaXplKTsKICAgIHN0b3AoKTsKICAgIGZzLmNsb3NlKGZkKTsKICB9KTsKfQoKZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIENvbW1hbmRSZWFkKGFyZ3MpIHsKICBsZXQgY2hpbGQgPSBzcGF3bihhcmdzLCB7CiAgICBibG9jazogZmFsc2UsCiAgICBzdGRpbzogWydpbmhlcml0JywgJ3BpcGUnLCAnaW5oZXJpdCddCiAgfSk7CiAgbGV0IG91dHB1dCA9ICcnOwogIGxldCBkb25lID0gZmFsc2U7CiAgbGV0IGJ1ZiA9IG5ldyBBcnJheUJ1ZmZlcigxMDI0KTsKICBpZihVdGlsLnBsYXRmb3JtID09ICdxdWlja2pzJykgewogICAgbGV0IHsgZmQgfSA9IGNoaWxkLnN0ZG91dDsKICAgIC8vcmV0dXJuIGF3YWl0IChhc3luYyBmdW5jdGlvbigpIHsKICAgIGZvcig7OykgewogICAgICAxOwogICAgICBsZXQgcjsKICAgICAgYXdhaXQgZnMud2FpdFJlYWQoZmQpOwogICAgICByID0gUmVhZE91dHB1dChmZCk7CiAgICAgIGlmKHIgPiAwICYmIHIgPCBidWYuYnl0ZUxlbmd0aCkgYnJlYWs7CiAgICB9CiAgICBsZXQgcmVzdWx0ID0gYXdhaXQgY2hpbGQud2FpdCgpOwogICAgLy9jb25zb2xlLmxvZygnY2hpbGQud2FpdCgpOicsIHJlc3VsdCk7CiAgICByZXR1cm4gb3V0cHV0LnRyaW1FbmQoKTsKICAgIC8vfSkoKTsKICB9IGVsc2UgewogICAgQWNxdWlyZVJlYWRlcihjaGlsZC5zdGRvdXQsIGFzeW5jIHJlYWRlciA9PiB7CiAgICAgIGxldCByOwogICAgICB3aGlsZSgociA9IGF3YWl0IHJlYWRlci5yZWFkKCkpKSB7CiAgICAgICAgaWYoIXIuZG9uZSkgZXJyb3JzICs9IHIudmFsdWUudG9TdHJpbmcoKTsKICAgICAgfQogICAgfSk7CiAgfQogIGZ1bmN0aW9uIFJlYWRPdXRwdXQoZmQpIHsKICAgIGxldCBidWYgPSBuZXcgQXJyYXlCdWZmZXIoMTAyNCk7CiAgICBsZXQgciA9IG9zLnJlYWQoZmQsIGJ1ZiwgMCwgYnVmLmJ5dGVMZW5ndGgpOwogICAgb3V0cHV0ICs9IGZzLmJ1ZmZlclRvU3RyaW5nKGJ1Zi5zbGljZSgwLCByKSk7CiAgICAvL2lmKHIgPiAwKSBjb25zb2xlLmxvZygncjonLCByLCAnb3V0cHV0OicsIG91dHB1dC5zbGljZSgtMTAwKSk7CiAgICByZXR1cm4gcjsKICB9Cn0KCmV4cG9ydCBhc3luYyBmdW5jdGlvbiBMaWJyYXJ5RXhwb3J0cyhmaWxlKSB7CiAgY29uc29sZS5sb2coYExpYnJhcnlFeHBvcnRzOmAsIGZpbGUpOwoKICBsZXQgb3V0cHV0ID0gYXdhaXQgQ29tbWFuZFJlYWQoWycvb3B0L2RpZXQvYmluL29iamR1bXAnLCAnLVQnLCBmaWxlXSk7CiAgb3V0cHV0ID0gb3V0cHV0LnJlcGxhY2UoLy4qRFlOQU1JQyBTWU1CT0wgVEFCTEU6XHMvbSwgJycpOwogIGxldCBsaW5lcyA9IG91dHB1dC5zcGxpdCgvXG4vZykuZmlsdGVyKGxpbmUgPT4gL1xzQmFzZVxzLy50ZXN0KGxpbmUpKTsKICBsZXQgY29sdW1ucyA9IFV0aWwuY29sSW5kZXhlcyhsaW5lc1swXSk7CgogIGxldCBlbnRyaWVzID0gbGluZXMubWFwKGxpbmUgPT4gVXRpbC5jb2xTcGxpdChsaW5lLCBjb2x1bW5zKS5tYXAoY29sdW1uID0+IGNvbHVtbi50cmltRW5kKCkpKTsKICBlbnRyaWVzLnNvcnQoKGEsIGIpID0+IGFbMF0ubG9jYWxlQ29tcGFyZShiWzBdKSk7CgogIHJldHVybiBlbnRyaWVzLm1hcChlbnRyeSA9PiBlbnRyeVtlbnRyeS5sZW5ndGggLSAxXS50cmltU3RhcnQoKSk7Cn0KCmZ1bmN0aW9uIFNhdmVMaWJyYXJpZXMoKSB7CiAgY29uc3QgbGF5ZXJzID0gT2JqZWN0LnZhbHVlcygKICAgIFsuLi5wcm9qZWN0LnNjaGVtYXRpYy5sYXllcnMsIC4uLnByb2plY3QuYm9hcmQubGF5ZXJzXS5yZWR1Y2UoKGFjYywgW24sIGVdKSA9PiAoeyAuLi5hY2MsIFtuXTogZS5yYXcgfSksIHt9KQogICk7Cn0KCmZ1bmN0aW9uIFByb2Nlc3NGaWxlKGZpbGUsIGRlYnVnID0gdHJ1ZSkgewogIGNvbnN0IGV4dCA9IHBhdGguZXh0bmFtZShmaWxlKTsKICBsZXQgcmV0ID0gbnVsbDsKICBzd2l0Y2ggKGV4dCkgewogICAgY2FzZSAnLmpzJzoKICAgICAgcmV0ID0gUGFyc2VFQ01BU2NyaXB0KGZpbGUsIGRlYnVnKTsKICAgICAgYnJlYWs7CiAgICBjYXNlICcuY3BwJzoKICAgIGNhc2UgJy5jeHgnOgogICAgY2FzZSAnLmNjJzoKICAgIGNhc2UgJy5jJzoKICAgIGNhc2UgJy5oJzoKICAgICAgcmV0ID0gQ29tcGlsZShmaWxlIC8qLCBkZWJ1ZyovKTsKICAgICAgYnJlYWs7CiAgfQogIHJldHVybiByZXQ7Cn0KCmZ1bmN0aW9uIFBhcnNlRUNNQVNjcmlwdChmaWxlLCBwYXJhbXMgPSB7fSkgewogIGxldCBkYXRhLCBiLCByZXQ7CiAgY29uc3QgeyBkZWJ1ZyB9ID0gcGFyYW1zOwogIGlmKGZpbGUgPT0gJy0nKSBmaWxlID0gJy9kZXYvc3RkaW4nOwogIGlmKGZpbGUgJiYgZnMuZXhpc3RzU3luYyhmaWxlKSkgewogICAgZGF0YSA9IGZzLnJlYWRGaWxlU3luYyhmaWxlLCAndXRmOCcpOwogICAgY29uc29sZS5sb2coJ29wZW5lZDonLCBmaWxlKTsKICB9IGVsc2UgewogICAgZmlsZSA9ICdzdGRpbic7CiAgICBkYXRhID0gc291cmNlOwogIH0KICBjb25zb2xlLmxvZygnT0ssIGRhdGE6ICcsIFV0aWwuYWJicmV2aWF0ZShVdGlsLmVzY2FwZShkYXRhKSkpOwogIGlmKGRlYnVnKSBFQ01BU2NyaXB0UGFyc2VyLmluc3RydW1lbnRhdGUoKTsKICBjb25zb2xlLmxvZygnRUNNQVNjcmlwdFBhcnNlcjonLCBFQ01BU2NyaXB0UGFyc2VyKTsKCiAgbGV0IHBhcnNlciwgYXN0LCBlcnJvcjsKICBnbG9iYWxUaGlzLnBhcnNlciA9IHBhcnNlciA9IG51bGw7CiAgZ2xvYmFsVGhpcy5wYXJzZXIgPSBwYXJzZXIgPSBuZXcgRUNNQVNjcmlwdFBhcnNlcihkYXRhID8gZGF0YS50b1N0cmluZygpIDogZGF0YSwgZmlsZSwgZGVidWcpOwoKICB0cnkgewogICAgYXN0ID0gcGFyc2VyLnBhcnNlUHJvZ3JhbSgpOwogIH0gY2F0Y2goZXJyKSB7CiAgICBjb25zdCB0b2tlbnMgPSBbLi4ucGFyc2VyLnByb2Nlc3NlZCwgLi4ucGFyc2VyLnRva2Vuc107CiAgICBjb25zdCB0b2tlbiA9IHRva2Vuc1t0b2tlbnMubGVuZ3RoIC0gMV07CgogICAgY29uc29sZS5sb2coJ3BhcnNlUHJvZ3JhbSB0b2tlbicsIHRva2VuKTsKCiAgICBpZihlcnIgIT09IG51bGwpIHsKICAgICAgY29uc29sZS5sb2coJ3BhcnNlUHJvZ3JhbSBFUlJPUiBtZXNzYWdlOicsIGVycj8ubWVzc2FnZSk7CiAgICAgIGNvbnNvbGUubG9nKAogICAgICAgICdwYXJzZVByb2dyYW0gRVJST1Igc3RhY2s6XG4gICcgKwogICAgICAgICAgbmV3IFN0YWNrKGVycj8uc3RhY2ssIChmciwgaSkgPT4gZnIuZnVuY3Rpb25OYW1lICE9ICdlc2ZhY3RvcnknICYmIGkgPCA1KS50b1N0cmluZygpLnJlcGxhY2UoL1xuL2csICdcbiAgJykKICAgICAgKTsKCiAgICAgIHRocm93IGVycjsKICAgIH0gZWxzZSB7CiAgICAgIGNvbnNvbGUubG9nKCdwYXJzZVByb2dyYW0gRVJST1I6JywgZXJyKTsKICAgICAgdGhyb3cgbmV3IEVycm9yKCdwYXJzZVByb2dyYW0nKTsKICAgIH0KICB9CgogIHBhcnNlci5hZGRDb21tZW50c1RvTm9kZXMoYXN0KTsKICByZXR1cm4gYXN0Owp9CgovKmZ1bmN0aW9uIFBhcnNlRUNNQVNjcmlwdChmaWxlLCBkZWJ1ZyA9IGZhbHNlKSB7CiAgY29uc29sZS5sb2coYFBhcnNpbmcgJyR7ZmlsZX0nLi4uYCk7CiAgbGV0IGRhdGEgPSBmcy5yZWFkRmlsZVN5bmMoZmlsZSwgJ3V0Zi04Jyk7CiAgbGV0IGFzdCwgZXJyb3I7CiAgbGV0IHBhcnNlcjsKICBjb25zb2xlLmxvZygnZGF0YScsIGRhdGEpOwogIGdsb2JhbFRoaXMucGFyc2VyID0gcGFyc2VyID0gbmV3IEVDTUFTY3JpcHRQYXJzZXIoZGF0YT8udG9TdHJpbmcgPyBkYXRhLnRvU3RyaW5nKCkgOiBkYXRhLCBmaWxlLCBkZWJ1Zyk7CgogIGdsb2JhbFRoaXMuYXN0ID0gYXN0ID0gcGFyc2VyLnBhcnNlUHJvZ3JhbSgpOwogIHBhcnNlci5hZGRDb21tZW50c1RvTm9kZXMoYXN0KTsKCiAgZ2xvYmFsVGhpcy5maWxlc1tmaWxlXSA9IGFzdDsKCiAgcmV0dXJuIHsKICAgIGFzdCwKICAgIGdldCBkYXRhKCkgewogICAgICByZXR1cm4gdGhpcy5hc3Q7CiAgICB9CiAgfTsKfSovCgpmdW5jdGlvbiBQcmludEVDTUFTY3JpcHQoYXN0LCBjb21tZW50cywgcHJpbnRlciA9IG5ldyBFQ01BU2NyaXB0LlByaW50ZXIoeyBpbmRlbnQ6IDQgfSwgY29tbWVudHMpKSB7CiAgcmV0dXJuIHByaW50ZXIucHJpbnQoYXN0KTsKfQoKZnVuY3Rpb24gUHJpbnRDQXJyYXkoc3RyaW5ncykgewogIGxldCBvID0gJyc7CgogIGZvcihsZXQgc3RyIG9mIHN0cmluZ3MpIHsKICAgIGlmKG8gIT0gJycpIG8gKz0gJywgJzsKCiAgICBpZih0eXBlb2Ygc3RyID09ICdzdHJpbmcnKSBvICs9ICciJyArIHN0ciArICciJzsKICAgIGVsc2UgbyArPSAnMCc7CiAgfQoKICAvKiAgICAgKwogICAgc3RyaW5ncy5tYXAoc3RyID0+ICh0eXBlb2Ygc3RyID09ICdzdHJpbmcnICYmIHN0ciA/ICciJyArIHN0ciArICciJyA6ICciIicpKS5tYXAoc3RyID0+IHN0ciAhPSAnJyA/IHN0ciA6ICciIicpLmpvaW4oJyxcbicpICsqLwoKICBvICs9IGAgfSk7YDsKICByZXR1cm4gYCgoY29uc3QgY2hhcipjb25zdCBbXSl7IGAgKyBvOwp9CgpmdW5jdGlvbiBOYW1lc3BhY2VzKG5vZGVQYXRoLCBhc3QgPSAkLmRhdGEpIHsKICBsZXQgcHRyID0gbmV3IFBvaW50ZXIobm9kZVBhdGgpOwogIGxldCBwdHJzID0gcHRyLmNoYWluKDIpOwogIGxldCBnZXQgPSBkZWVwLmdldChhc3QpOwoKICBsZXQgbnMgPSBwdHJzLm1hcChwID0+IGdldChwKSkuZmlsdGVyKG4gPT4gbi5raW5kID09ICdOYW1lc3BhY2VEZWNsJyk7CiAgcmV0dXJuIG5zOwp9CgpmdW5jdGlvbiogQ29uc3RhbnRzKG5vZGUsIHQgPSAobmFtZSwgdmFsdWUpID0+IFtuYW1lLCAhaXNOYU4oK3ZhbHVlKSA/ICt2YWx1ZSA6IHZhbHVlXSkgewogIGZvcihsZXQgaW5uZXIgb2Ygbm9kZS5pbm5lcikgewogICAgeWllbGQgdCguLi5QcmludEFzdChpbm5lcikuc3BsaXQoLyA9IC9nKSk7CiAgfQp9CgpNZW1iZXJOYW1lcy5VUFBFUiA9IDE7Ck1lbWJlck5hbWVzLk1FVEhPRFMgPSAyOwpNZW1iZXJOYW1lcy5QUk9QRVJUSUVTID0gNDsKCmZ1bmN0aW9uIEdldEltcG9ydHMoYXN0ID0gJC5kYXRhKSB7CiAgY29uc3QgciA9IFtdOwogIGZvcihsZXQgW24sIHBdIG9mIGRlZXAuc2VsZWN0KCQuZGF0YSwgbiA9PiAobi50eXBlID8/IG4ua2luZCkuc3RhcnRzV2l0aCgnSW1wb3J0JykpKSB7CiAgICByLnB1c2gobik7CiAgfQogIHJldHVybiByOwp9CmZ1bmN0aW9uIEdldElkZW50aWZpZXJzKG5vZGVzLCBrZXkgPSBudWxsKSB7CiAgY29uc3QgciA9IFtdOwogIGZvcihsZXQgbm9kZSBvZiBub2RlcykgewogICAgZm9yKGxldCBuIG9mIGRlZXAuc2VsZWN0KAogICAgICBub2RlLAogICAgICAobiwgaykgPT4gKG4udHlwZSA/PyBuLmtpbmQpID09ICdJZGVudGlmaWVyJyAmJiAoa2V5ID09PSBudWxsIHx8IGsgPT0ga2V5KSwKICAgICAgZGVlcC5SRVRVUk5fVkFMVUUKICAgICkpCiAgICAgIHIucHVzaChuLm5hbWUpOwogIH0KICByZXR1cm4gcjsKfQoKZnVuY3Rpb24gTWVtYmVyTmFtZXMobWVtYmVycywgZmxhZ3MgPSAwKSB7CiAgbGV0IHJldCA9IFtdOwogIGlmKG1lbWJlcnMubWVtYmVycykgbWVtYmVycyA9IG1lbWJlcnMubWVtYmVyczsKICBpZighQXJyYXkuaXNBcnJheShtZW1iZXJzKSkgewogICAgZm9yKGxldCBwdHIgb2YgZGVlcAogICAgICAuc2VsZWN0KG1lbWJlcnMsIG4gPT4gbi5raW5kLmVuZHNXaXRoKCdEZWNsJykgJiYgbi5uYW1lLCBkZWVwLlJFVFVSTl9QQVRIKQogICAgICAubWFwKHBhdGggPT4gbmV3IFBvaW50ZXIocGF0aCkpKSB7CiAgICAgIGxldCBwdHJzID0gcHRyLmNoYWluKDIpOwogICAgICBjb25zb2xlLmxvZygncHRyczonLCBwdHJzKTsKICAgICAgbGV0IG5hbWVzID0gcHRycy5tYXAocCA9PiBkZWVwLmdldChtZW1iZXJzLCBbLi4ucCwgJ25hbWUnXSwgZGVlcC5OT19USFJPVykpOwogICAgICBsZXQga2luZHMgPSBwdHJzLm1hcChwID0+IGRlZXAuZ2V0KG1lbWJlcnMsIFsuLi5wLCAna2luZCddLCBkZWVwLk5PX1RIUk9XKSk7CiAgICAgIGNvbnNvbGUubG9nKCdraW5kczonLCBraW5kcyk7CiAgICAgIGNvbnNvbGUubG9nKCduYW1lczonLCBuYW1lcyk7CiAgICAgIHJldC5wdXNoKG5hbWVzLmZpbHRlcihuYW1lID0+IG5hbWUpLmpvaW4oJy4nKSk7CiAgICB9CiAgfSBlbHNlIHsKICAgIGNvbnN0IG1lbWJlck5hbWVQb2ludGVycyA9IGRlZXAKICAgICAgLnNlbGVjdCgKICAgICAgICBtZW1iZXJzLAogICAgICAgIG4gPT4gQXJyYXkuaXNBcnJheShuKSAmJiBuLmxlbmd0aCA9PSAyICYmIHR5cGVvZiBuWzBdID09ICdzdHJpbmcnICYmIG5bMV0gIT09IG51bGwsCiAgICAgICAgZGVlcC5SRVRVUk5fVkFMVUVfUEFUSAogICAgICApCiAgICAgIC5tYXAoKFtub2RlLCBwdHJdKSA9PiBwdHIpOwogICAgLy8gIGNvbnNvbGUubG9nKCdtZW1iZXJOYW1lUG9pbnRlcnMnLCBtZW1iZXJOYW1lUG9pbnRlcnMpOwoKICAgIGZvcihsZXQgcHRyIG9mIG1lbWJlck5hbWVQb2ludGVycy5tYXAocGF0aCA9PiBuZXcgUG9pbnRlcihwYXRoKSkpIHsKICAgICAgbGV0IHB0cnMgPSBwdHIuY2hhaW4oMyk7CiAgICAgIGxldCBuYW1lcyA9IHB0cnMubWFwKHAgPT4gZGVlcC5nZXQobWVtYmVycywgWy4uLnAsIDBdKSk7CiAgICAgIHJldC5wdXNoKG5hbWVzLmZpbHRlcihuYW1lID0+IG5hbWUpLmpvaW4oJy4nKSk7CiAgICB9CiAgfQogIGlmKGZsYWdzICYgTWVtYmVyTmFtZXMuVVBQRVIpIHsKICAgIHJldCA9IHJldC5tYXAobmFtZSA9PiBVdGlsLmRlY2FtZWxpemUobmFtZSwgJ18nKS50b1VwcGVyQ2FzZSgpKTsKICB9CiAgcmV0dXJuIHJldDsKfQoKZnVuY3Rpb24gVW5zZXRMb2Mobm9kZSwgcHJlZCA9ICh2LCBwKSA9PiB0cnVlKSB7CiAgZm9yKGxldCBbdiwgcF0gb2YgZGVlcC5zZWxlY3Qobm9kZSwgKHYsIGspID0+IGsgPT0gJ2xvYycgfHwgayA9PSAncmFuZ2UnLCBkZWVwLlJFVFVSTl9WQUxVRV9QQVRIKSkgewogICAgY29uc29sZS5sb2coJ1Vuc2V0TG9jJywgeyB2LCBwIH0pOwogICAgaWYocHJlZChkZWVwLmdldChub2RlLCBbLi4ucF0uc2xpY2UoMCwgLTEpKSwgWy4uLnBdLmxhc3QpKSBkZWVwLnVuc2V0KG5vZGUsIHApOwogIH0KICByZXR1cm4gbm9kZTsKfQoKZnVuY3Rpb24gTWFrZUZGSShub2RlLCBsaWIsIGV4cCwgZnApIHsKICBpZihBcnJheS5pc0FycmF5KG5vZGUpKSB7CiAgICByZXR1cm4gKGZ1bmN0aW9uKiAoKSB7CiAgICAgIGxldCBpID0gMDsKCiAgICAgIGlmKCFmcCkgeWllbGQgYGltcG9ydCB7IGRsb3BlbiwgZGVmaW5lLCBkbGVycm9yLCBkbGNsb3NlLCBkbHN5bSwgY2FsbCwgZXJybm8sIFJUTERfTk9XIH0gZnJvbSAnZmZpJztcbmA7CgogICAgICBpZihsaWIpIHsKICAgICAgICBsZXQgbGlidmFyID0gbGliLnJlcGxhY2UoL1wuc28oJHxcLi4qKS9nLCAnJykucmVwbGFjZSgvW15BLVphLXowLTlfXS9nLCAnXycpOwogICAgICAgIHlpZWxkIGBjb25zdCAke2xpYnZhcn0gPSBkbG9wZW4oJyR7bGlifScsIFJUTERfTk9XKTtcbmA7CiAgICAgICAgbGliID0gbGlidmFyOwogICAgICB9CiAgICAgIGZvcihsZXQgaXRlbSBvZiBub2RlKSB7CiAgICAgICAgbGV0IG91dCA9ICcnOwogICAgICAgIGNvbnNvbGUubG9nKGBNYWtlRkZJIGl0ZW0gIyR7aSArIDF9LyR7bm9kZS5sZW5ndGh9YCk7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIGxldCByZXQgPSBNYWtlRkZJKGl0ZW0sIGxpYiwgZXhwLCBmcCk7CiAgICAgICAgICBpZih0eXBlb2YgcmV0ID09ICdzdHJpbmcnICYmIHJldC5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgIGlmKG91dCkgb3V0ICs9ICdcbic7CiAgICAgICAgICAgIG91dCArPSByZXQ7CiAgICAgICAgICB9CiAgICAgICAgfSBjYXRjaChlcnJvcikgewogICAgICAgICAgY29uc29sZS5sb2coYEVSUk9SIGl0ZW0gWyR7aX1dOmAsIGVycm9yLm1lc3NhZ2UgKyAnXG4nICsgZXJyb3Iuc3RhY2spOwogICAgICAgIH0KICAgICAgICBpKys7CiAgICAgICAgeWllbGQgb3V0OwogICAgICB9CiAgICB9KSgpOwogIH0KICBpZighKG5vZGUgaW5zdGFuY2VvZiBOb2RlKSkgbm9kZSA9IFR5cGVGYWN0b3J5KG5vZGUsICQuZGF0YSk7CgogIGlmKHR5cGVvZiBub2RlID09ICdvYmplY3QnICYmIG5vZGUgJiYgbm9kZS5raW5kID09ICdGdW5jdGlvbkRlY2wnKSBub2RlID0gbmV3IEZ1bmN0aW9uRGVjbChub2RlKTsKCiAgaWYobm9kZSBpbnN0YW5jZW9mIEZ1bmN0aW9uRGVjbCkgewogICAgY29uc29sZS5sb2coJ25vZGUnLCAoZ2xvYmFsVGhpcy5ub2RlID0gbm9kZSkpOwoKICAgIGxldCBmZmkgPSBuZXcgRkZJX0Z1bmN0aW9uKG5vZGUpOwoKICAgIGxldCBwcm90b1N0ciA9IFByaW50QXN0KG5vZGUuYXN0LCAkLmRhdGEpCiAgICAgIC5yZXBsYWNlKC9eKFteXG5cKF0qKVxuLywgJyQxICcpCiAgICAgIC5zcGxpdCgvXG4vZylbMF0KICAgICAgLnJlcGxhY2UoL1wgeyQvLCAnOycpOwoKICAgIHByb3RvU3RyID0gcHJvdG9TdHIucmVwbGFjZSgvXlxzKmV4dGVyblxzKy8sICcnKTsKICAgIHJldHVybiAoZmZpLmdlbmVyYXRlRG9jKGZwLCBsaWIsIGV4cCkgPz8gYC8qICR7cHJvdG9TdHJ9ICovXG5gKSArIGZmaS5nZW5lcmF0ZShmcCwgbGliLCBleHApOwogIH0gZWxzZSBpZihub2RlIGluc3RhbmNlb2YgUmVjb3JkRGVjbCB8fCBub2RlIGluc3RhbmNlb2YgVHlwZWRlZkRlY2wpIHsKICAgIGxldCBjb2RlID0gWy4uLkdlbmVyYXRlU3RydWN0Q2xhc3Mobm9kZSldLmpvaW4oJ1xuJyk7CiAgICByZXR1cm4gY29kZTsKICB9Cn0KCmFzeW5jIGZ1bmN0aW9uIEFTVFNoZWxsKC4uLmFyZ3MpIHsKICBsZXQgaW5zcGVjdE9wdGlvbnMgPSB7CiAgICAvKmJyZWFrTGVuZ3RoOiAyNDAsICovIGN1c3RvbUluc3BlY3Q6IHRydWUsCiAgICBjb21wYWN0OiBmYWxzZSwKICAgIGRlcHRoOiBJbmZpbml0eSwKICAgIG1heEFycmF5TGVuZ3RoOiBJbmZpbml0eSwKICAgIGhpZGVLZXlzOiBbJ2xvYycsICdyYW5nZSddCiAgfTsKICBnbG9iYWxUaGlzLmNvbnNvbGUgPSBuZXcgQ29uc29sZSh7IHN0ZG91dDogcHJvY2Vzcy5zdGRvdXQsIGluc3BlY3RPcHRpb25zIH0pOwogIGF3YWl0IFBvcnRhYmxlU3Bhd24oZm4gPT4gKHNwYXduID0gZm4pKTsKCiAgLyogIGF3YWl0IGltcG9ydCgnYmpzb24nKS50aGVuKG1vZHVsZSA9PiB7CiAgICBjb25zdCB7IHJlYWQsIHdyaXRlIH0gPSBtb2R1bGU7CiAgICBnbG9iYWxUaGlzLmJqc29uID0geyByZWFkLCB3cml0ZSB9OwogIH0pOwogIGNvbnNvbGUubG9nKCdianNvbjonLCBnbG9iYWxUaGlzLmJqc29uKTsqLwogIC8qYXdhaXQgaW1wb3J0KCdtbWFwJykudGhlbihtb2R1bGUgPT4ge2NvbnN0IHttbWFwLCBtdW5tYXAsIHRvU3RyaW5nLCBQUk9UX1JFQUQsIFBST1RfV1JJVEUsIFBST1RfRVhFQywgUFJPVF9TRU0sIFBST1RfTk9ORSwgUFJPVF9HUk9XU0RPV04sIFBST1RfR1JPV1NVUCwgTUFQX1NIQVJFRCwgTUFQX1BSSVZBVEUsIE1BUF9UWVBFLCBNQVBfRklYRUQsIE1BUF9BTk9OWU1PVVMsIE1BUF9HUk9XU0RPV04sIE1BUF9ERU5ZV1JJVEUsIE1BUF9FWEVDVVRBQkxFLCBNQVBfTE9DS0VELCBNQVBfTk9SRVNFUlZFLCBNQVBfUE9QVUxBVEUsIE1BUF9OT05CTE9DSywgTUFQX1NUQUNLIH0gPSBtb2R1bGU7IGdsb2JhbFRoaXMubW1hcCA9IHttbWFwLCBtdW5tYXAsIHRvU3RyaW5nLCBQUk9UX1JFQUQsIFBST1RfV1JJVEUsIFBST1RfRVhFQywgUFJPVF9TRU0sIFBST1RfTk9ORSwgUFJPVF9HUk9XU0RPV04sIFBST1RfR1JPV1NVUCwgTUFQX1NIQVJFRCwgTUFQX1BSSVZBVEUsIE1BUF9UWVBFLCBNQVBfRklYRUQsIE1BUF9BTk9OWU1PVVMsIE1BUF9HUk9XU0RPV04sIE1BUF9ERU5ZV1JJVEUsIE1BUF9FWEVDVVRBQkxFLCBNQVBfTE9DS0VELCBNQVBfTk9SRVNFUlZFLCBNQVBfUE9QVUxBVEUsIE1BUF9OT05CTE9DSywgTUFQX1NUQUNLIH07IH0pOwogIGNvbnNvbGUubG9nKCdtbWFwOicsIGdsb2JhbFRoaXMubW1hcCk7CiovCiAgLyogIGNvbnNvbGUub3B0aW9ucyA9IGNvbnNvbGVPcHRpb25zOwogIGNvbnNvbGUub3B0aW9ucy5jb21wYWN0ID0gMTsKICBjb25zb2xlLm9wdGlvbnMuaGlkZUtleXMgPSBbJ2xvYycsICdyYW5nZSddOyovCiAgLypjb25zb2xlLm9wdGlvbnMuZGVwdGggPSAyOwogIGNvbnNvbGUub3B0aW9ucy5jb21wYWN0ID0gMTsqLwoKICBnbG9iYWxUaGlzLmZpbGVzID0gZmlsZXMgPSB7fTsKCiAgY29uc3QgcGxhdGZvcm0gPSBVdGlsLmdldFBsYXRmb3JtKCk7CiAgaWYocGxhdGZvcm0gPT0gJ3F1aWNranMnKSBhd2FpdCBpbXBvcnQoJ3N0ZCcpLnRoZW4obW9kdWxlID0+IChnbG9iYWxUaGlzLnN0ZCA9IG1vZHVsZSkpOwoKICBpZihwbGF0Zm9ybSA9PSAnbm9kZScpIGF3YWl0IGltcG9ydCgnLi9saWIvbWlzYy5qcycpLnRoZW4obW9kdWxlID0+IChnbG9iYWxUaGlzLmluc3BlY3QgPSBtb2R1bGUuaW5zcGVjdCkpOwoKICAoYXdhaXQgVXRpbC5nZXRQbGF0Zm9ybSgpKSA9PSAncXVpY2tqcycKICAgID8gaW1wb3J0KCdkZWVwLnNvJykudGhlbihtb2R1bGUgPT4gKGdsb2JhbFRoaXMuZGVlcCA9IG1vZHVsZSkpCiAgICA6IGltcG9ydCgnLi9saWIvZGVlcC5qcycpLnRoZW4obW9kdWxlID0+IChnbG9iYWxUaGlzLmRlZXAgPSBtb2R1bGVbJ2RlZmF1bHQnXSkpOwoKICBiYXNlID0gcGF0aC5iYXNlbmFtZShVdGlsLmdldEFyZ3YoKVsxXSwgJy5qcycpLnJlcGxhY2UoL1wuW2Etel0qJC8sICcnKTsKICBjbWRoaXN0ID0gYC4ke2Jhc2V9LWNtZGhpc3RvcnlgOwogIGNvbmZpZyA9IGAuJHtiYXNlfS1jb25maWdgOwoKICBwYXJhbXMgPSBnbG9iYWxUaGlzLnBhcmFtcyA9IFV0aWwuZ2V0T3B0KAogICAgewogICAgICBpbmNsdWRlOiBbdHJ1ZSwgKGEsIHApID0+IChwIHx8IFtdKS5jb25jYXQoW2FdKSwgJ0knXSwKICAgICAgZGVmaW5lOiBbdHJ1ZSwgKGEsIHApID0+IChwIHx8IFtdKS5jb25jYXQoW2FdKSwgJ0QnXSwKICAgICAgbGliczogW3RydWUsIChhLCBwKSA9PiAocCB8fCBbXSkuY29uY2F0KFthXSksICdsJ10sCiAgICAgIGRlYnVnOiBbZmFsc2UsIG51bGwsICd4J10sCiAgICAgIGZvcmNlOiBbZmFsc2UsIG51bGwsICdmJ10sCiAgICAgIGV4ZWM6IFt0cnVlLCBudWxsLCAnZSddLAogICAgICAnc3lzdGVtLWluY2x1ZGVzJzogW2ZhbHNlLCBudWxsLCAncyddLAogICAgICAnbm8tcmVtb3ZlLWVtcHR5JzogW2ZhbHNlLCBudWxsLCAnRSddLAogICAgICAnb3V0cHV0LWRpcic6IFt0cnVlLCBudWxsLCAnZCddLAogICAgICBjb21waWxlcjogWydjbGFuZycsIG51bGwsICdjJ10sCiAgICAgICdAJzogJ2lucHV0JwogICAgfSwKICAgIGFyZ3MKICApOwoKICAvL2NvbnNvbGUubG9nKCdwYXJhbXMnLCBwYXJhbXMpOwoKICBkZWZzID0gcGFyYW1zLmRlZmluZSB8fCBbXTsKICBpbmNsdWRlcyA9IHBhcmFtcy5pbmNsdWRlIHx8IFtdOwogIGxpYnMgPSBwYXJhbXMubGlicyB8fCBbXTsKICBzb3VyY2VzID0gcGFyYW1zWydAJ10gfHwgW107CgogIFV0aWwuZGVmaW5lKGdsb2JhbFRoaXMsIHsKICAgIGRlZnMsCiAgICBpbmNsdWRlcywKICAgIGxpYnMsCiAgICAvKiBwcmV0dGllci1pZ25vcmUgKi8gZ2V0IGZsYWdzKCkgewogICAgICByZXR1cm4gWy4uLmluY2x1ZGVzLmZpbHRlcih2ID0+IHR5cGVvZiB2ID09ICdzdHJpbmcnKS5tYXAodiA9PiBgLUkke3Z9YCksIC4uLmRlZnMubWFwKGQgPT4gYC1EJHtkfWApLCAuLi5saWJzLm1hcChsID0+IGAtbCR7bH1gKV07CiAgICB9CiAgfSk7CgogIGFzeW5jIGZ1bmN0aW9uIENvbXBpbGUoZmlsZSwgLi4uYXJncykgewogICAgLy9jb25zb2xlLmxvZygnYXJncycsIGFyZ3MpOwogICAgbGV0IHIgPSBhd2FpdCBBc3REdW1wKHBhcmFtcy5jb21waWxlciwgZmlsZSwgWy4uLmdsb2JhbFRoaXMuZmxhZ3MsIC4uLmFyZ3NdLCBwYXJhbXMuZm9yY2UpOwogICAgci5zb3VyY2UgPSBmaWxlOwoKICAgIGdsb2JhbFRoaXMuZmlsZXNbZmlsZV0gPSByOwoKICAgIGZ1bmN0aW9uIG5hbWVPcklkUHJlZChuYW1lX29yX2lkLCBwcmVkID0gbiA9PiB0cnVlKSB7CiAgICAgIGlmKHR5cGVvZiBuYW1lX29yX2lkID09ICdudW1iZXInKSBuYW1lX29yX2lkID0gJzB4JyArIG5hbWVfb3JfaWQudG9TdHJpbmcoMTYpOwogICAgICByZXR1cm4gbmFtZV9vcl9pZCBpbnN0YW5jZW9mIFJlZ0V4cAogICAgICAgID8gbm9kZSA9PiBuYW1lX29yX2lkLnRlc3Qobm9kZS5uYW1lKSAmJiBwcmVkKG5vZGUpCiAgICAgICAgOiBuYW1lX29yX2lkLnN0YXJ0c1dpdGgoJzB4JykKICAgICAgICA/IG5vZGUgPT4gbm9kZS5pZCA9PSBuYW1lX29yX2lkICYmIHByZWQobm9kZSkKICAgICAgICA6IG5vZGUgPT4gbm9kZS5uYW1lID09IG5hbWVfb3JfaWQgJiYgcHJlZChub2RlKTsKICAgIH0KCiAgICBVdGlsLmJpbmRNZXRob2RzKHIsIHsKICAgICAgc2VsZWN0KG5hbWVfb3JfaWQsIHByZWQgPSBuID0+IHRydWUpIHsKICAgICAgICByZXR1cm4gdGhpcy5kYXRhLmlubmVyLmZpbHRlcihuYW1lT3JJZFByZWQobmFtZV9vcl9pZCwgcHJlZCkpOwogICAgICB9LAogICAgICBnZXRCeUlkT3JOYW1lKG5hbWVfb3JfaWQsIHByZWQgPSBuID0+IHRydWUpIHsKICAgICAgICBsZXQgbm9kZSA9IHRoaXMuZGF0YS5pbm5lci5maW5kTGFzdChuYW1lT3JJZFByZWQobmFtZV9vcl9pZCwgcHJlZCkpOwoKICAgICAgICBub2RlID8/PSB0aGlzLmNsYXNzZXMuZmluZExhc3QobmFtZU9ySWRQcmVkKG5hbWVfb3JfaWQsIHByZWQpKTsKICAgICAgICBub2RlID8/PSBkZWVwLmZpbmQodGhpcy5kYXRhLCBuID0+IG4ubmFtZSA9PSBuYW1lX29yX2lkIHx8IG4uaWQgPT0gbmFtZV9vcl9pZCwgZGVlcC5SRVRVUk5fVkFMVUUpOwogICAgICAgIHJldHVybiBub2RlOwogICAgICB9LAogICAgICBnZXRUeXBlKG5hbWVfb3JfaWQpIHsKICAgICAgICBsZXQgcmVzdWx0ID0KICAgICAgICAgIHRoaXMuZ2V0QnlJZE9yTmFtZShuYW1lX29yX2lkLCBuID0+ICEvKEZ1bmN0aW9uRGVjbCkvLnRlc3Qobi5raW5kKSAmJiAvRGVjbC8udGVzdChuLmtpbmQpKSA/PwogICAgICAgICAgR2V0VHlwZShuYW1lX29yX2lkLCB0aGlzLmRhdGEpOwoKICAgICAgICBpZihyZXN1bHQpIHsKICAgICAgICAgIGxldCB0eXBlID0gVHlwZUZhY3RvcnkocmVzdWx0LCB0aGlzLmRhdGEpOwogICAgICAgICAgaWYodHlwZSkgcmVzdWx0ID0gdHlwZTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfSwKCiAgICAgIGdldEZ1bmN0aW9uKG5hbWVfb3JfaWQpIHsKICAgICAgICBsZXQgcmVzdWx0ID0gaXNOb2RlKG5hbWVfb3JfaWQpCiAgICAgICAgICA/IG5hbWVfb3JfaWQKICAgICAgICAgIDogdGhpcy5nZXRCeUlkT3JOYW1lKG5hbWVfb3JfaWQsIG4gPT4gLyhGdW5jdGlvbkRlY2wpLy50ZXN0KG4ua2luZCkpOwoKICAgICAgICBpZihyZXN1bHQpIHJldHVybiBuZXcgRnVuY3Rpb25EZWNsKHJlc3VsdCwgdGhpcy5kYXRhKTsKICAgICAgfSwKICAgICAgZ2V0VmFyaWFibGUobmFtZV9vcl9pZCkgewogICAgICAgIGxldCByZXN1bHQgPSBpc05vZGUobmFtZV9vcl9pZCkgPyBuYW1lX29yX2lkIDogdGhpcy5nZXRCeUlkT3JOYW1lKG5hbWVfb3JfaWQsIG4gPT4gLyhWYXJEZWNsKS8udGVzdChuLmtpbmQpKTsKCiAgICAgICAgaWYocmVzdWx0KSByZXR1cm4gbmV3IFZhckRlY2wocmVzdWx0LCB0aGlzLmRhdGEpOwogICAgICB9LAogICAgICBnZXRMb2Mobm9kZSkgewogICAgICAgIGxldCBsb2M7CiAgICAgICAgaWYoaXNPYmplY3Qobm9kZSkpIHsKICAgICAgICAgIGlmKCdsb2MnIGluIG5vZGUpIGxvYyA9IG5vZGUubG9jOwogICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIGlmKCdhc3QnIGluIG5vZGUpIG5vZGUgPSBub2RlLmFzdDsKICAgICAgICAgICAgaWYoJ2xvYycgaW4gbm9kZSkgbG9jID0gbm9kZS5sb2M7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZihsb2MpIHsKICAgICAgICAgIGlmKCEobG9jIGluc3RhbmNlb2YgTG9jYXRpb24pKSBsb2MgPSBuZXcgTG9jYXRpb24obG9jKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGxvYzsKICAgICAgfQogICAgfSk7CiAgICBVdGlsLmRlZmluZUdldHRlcigKICAgICAgciwKICAgICAgJ3RyZWUnLAogICAgICBVdGlsLm1lbW9pemUoKCkgPT4gbmV3IFRyZWUoci5kYXRhKSkKICAgICk7CiAgICByZXR1cm4gVXRpbC5kZWZpbmUociwgewogICAgICBwYXRoT2YobmVlZGxlLCBtYXhEZXB0aCA9IDEwKSB7CiAgICAgICAgaWYoJ2FzdCcgaW4gbmVlZGxlKSBuZWVkbGUgPSBuZWVkbGUuYXN0OwoKICAgICAgICBmb3IobGV0IFtub2RlLCBwYXRoXSBvZiBkZWVwLml0ZXJhdGUoCiAgICAgICAgICByLmRhdGEsCiAgICAgICAgICBuID0+IHR5cGVvZiBuID09ICdvYmplY3QnICYmIG4gIT0gbnVsbCwKICAgICAgICAgIGRlZXAuUkVUVVJOX1ZBTFVFX1BBVEgsCiAgICAgICAgICBtYXhEZXB0aAogICAgICAgICkpIHsKICAgICAgICAgIC8vY29uc29sZS5sb2coInBhdGhPZiIsY29uc29sZS5jb25maWcoe2RlcHRoOjF9KSx7bm9kZSxwYXRofSk7CiAgICAgICAgICBpZihub2RlID09PSBuZWVkbGUpIHJldHVybiBuZXcgUG9pbnRlcihwYXRoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0pOwogIH0KCiAgT2JqZWN0LmFzc2lnbihnbG9iYWxUaGlzLCB7CiAgICBTSVpFT0ZfUE9JTlRFUiwKICAgIFR5cGUsCiAgICBBc3REdW1wLAogICAgU291cmNlRGVwZW5kZW5jaWVzLAogICAgTm9kZVByaW50ZXIsCiAgICBOb2RlVHlwZSwKICAgIE5vZGVOYW1lLAogICAgR2V0TG9jLAogICAgR2V0VHlwZVN0ciwKICAgIFJlYWRGaWxlLAogICAgTWFwRmlsZSwKICAgIFJlYWRKU09OLAogICAgUmVhZEJKU09OLAogICAgV3JpdGVGaWxlLAogICAgV3JpdGVKU09OLAogICAgV3JpdGVCSlNPTiwKICAgIFByaW50UmFuZ2UsCiAgICBPdmVybGFwUmFuZ2UsCiAgICBHZW5lcmF0ZUluc3BlY3RTdHJ1Y3QsCiAgICBHZW5lcmF0ZVN0cnVjdENsYXNzLAogICAgSW5zcGVjdFN0cnVjdCwKICAgIE1ha2VTdHJ1Y3RDbGFzcywKICAgIERpckl0ZXJhdG9yLAogICAgUmVjdXJzaXZlRGlySXRlcmF0b3IsCiAgICBJbmNsdWRlQWxsLAogICAgVGVybWluYWwsCiAgICBQcmludEFzdCwKICAgIE1ha2VGRkksCiAgICBQYXJzZUVDTUFTY3JpcHQsCiAgICBQcmludEVDTUFTY3JpcHQsCiAgICBQcm9jZXNzRmlsZSwKICAgIHRvQXJyYXlCdWZmZXIsCiAgICB0b1N0cmluZywKICAgIENvbnN0YW50cywKICAgIFByaW50Q0FycmF5LAogICAgR2V0UGFyYW1zLAogICAgTGlzdAogIH0pOwoKICBQb2ludGVyLnByb3RvdHlwZS5jaGFpbiA9IGZ1bmN0aW9uKHN0ZXAsIGxpbWl0ID0gSW5maW5pdHkpIHsKICAgIGxldCBwdHIgPSB0aGlzOwogICAgbGV0IHJldCA9IFtdOwogICAgbGV0IGxlbiA9IHB0ci5sZW5ndGg7CiAgICBmb3IoOzspIHsKICAgICAgaWYocmV0Lmxlbmd0aCA+PSBsaW1pdCkgYnJlYWs7CiAgICAgIHJldC51bnNoaWZ0KHB0cik7CiAgICAgIGxlbiAtPSBzdGVwOwogICAgICBpZihsZW4gPD0gMCkgYnJlYWs7CiAgICAgIHB0ciA9IHB0ci5zbGljZSgwLCAtc3RlcCk7CiAgICB9CiAgICByZXR1cm4gcmV0OwogIH07CgogIE9iamVjdC5hc3NpZ24oZ2xvYmFsVGhpcywgewogICAgUG9pbnRlciwKICAgIFRyZWUsCiAgICBkZWVwLAogICAgcGF0aCwKICAgIENvbXBpbGUsCiAgICBTZWxlY3RMb2NhdGlvbnMsCiAgICBMb2NhdGlvblN0cmluZywKICAgIFRhYmxlLAogICAgU3RydWN0cywKICAgIE5vZGUsCiAgICBUeXBlLAogICAgUmVjb3JkRGVjbCwKICAgIEVudW1EZWNsLAogICAgVHlwZWRlZkRlY2wsCiAgICBWYXJEZWNsLAogICAgRmluZFR5cGUsCiAgICBIaWVyLAogICAgUGF0aE9mLAogICAgRnVuY3Rpb25EZWNsLAogICAgTG9jYXRpb24sCiAgICBUeXBlRmFjdG9yeSwKICAgIFNwYXduQ29tcGlsZXIsCiAgICBBc3REdW1wLAogICAgTm9kZVR5cGUsCiAgICBOb2RlTmFtZSwKICAgIEdldExvYywKICAgIEdldFR5cGUsCiAgICBHZXRUeXBlU3RyLAogICAgR2V0VHlwZU5vZGUsCiAgICBHZXRGaWVsZHMsCiAgICBQYXRoUmVtb3ZlTG9jLAogICAgRkZJX0Z1bmN0aW9uLAogICAgbGliZGlycywKICAgIGxpYmRpcnMzMiwKICAgIGxpYmRpcnM2NCwKICAgIExpYnJhcnlFeHBvcnRzLAogICAgTWVtYmVyTmFtZXMsCiAgICBHZXRJbXBvcnRzLAogICAgR2V0SWRlbnRpZmllcnMsCiAgICBOYW1lc3BhY2VzLAogICAgVW5zZXRMb2MKICB9KTsKICBnbG9iYWxUaGlzLnV0aWwgPSBVdGlsOwogIGdsb2JhbFRoaXMuRiA9IGFyZyA9PiAkLmdldEZ1bmN0aW9uKGFyZyk7CiAgZ2xvYmFsVGhpcy5UID0gYXJnID0+ICQuZ2V0VHlwZShhcmcpOwoKICBVdGlsLmxhenlQcm9wZXJ0eShnbG9iYWxUaGlzLCAnUCcsICgpID0+IHsKICAgIGxldCBwcmludGVyID0gTm9kZVByaW50ZXIoJC5kYXRhKTsKCiAgICByZXR1cm4gbm9kZSA9PiB7CiAgICAgIGlmKCdhc3QnIGluIG5vZGUpIG5vZGUgPSBub2RlLmFzdDsKICAgICAgcHJpbnRlci5jbGVhcigpOwogICAgICByZXR1cm4gcHJpbnRlci5wcmludChub2RlKTsKICAgIH07CiAgfSk7CgogIGNvbnN0IHVuaXRoaXN0ID0gYC4ke2Jhc2V9LXVuaXRoaXN0b3J5YDsKICBsZXQgaXRlbXMgPSBbXTsKICBsZXQgaGlzdCA9IFJlYWRKU09OKHVuaXRoaXN0KSB8fCBbXTsKCiAgY29uc3QgcHVzaFVuaXF1ZSA9IChhcnIsIGl0ZW0pID0+IHsKICAgIGlmKFV0aWwuZmluZEluZGV4KGFyciwgZWxlbSA9PiBkZWVwLmVxdWFscyhlbGVtLCBpdGVtKSkgPT09IC0xKSB7CiAgICAgIGFyci5wdXNoKGl0ZW0pOwogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICB9OwoKICBjb25zb2xlLmxvZygnTG9hZGluZyBzb3VyY2VzOicgKyBzb3VyY2VzLm1hcChzID0+ICcgJyArIHMpLmpvaW4oJywnKSk7CgogIGdsb2JhbFRoaXNbJ18nXSA9IGl0ZW1zOwoKICBmb3IobGV0IHNvdXJjZSBvZiBzb3VyY2VzKSB7CiAgICBsZXQgaXRlbTsKICAgIGl0ZW0gPSBhd2FpdCBQcm9jZXNzRmlsZShzb3VyY2UpOwogICAgZ2xvYmFsVGhpc1snJCddID0gaXRlbTsKICAgIC8qICAgIGlmKC9cLmpzJC8udGVzdChzb3VyY2UpKSBpdGVtID0gUGFyc2VFQ01BU2NyaXB0KHNvdXJjZSk7CiAgICBlbHNlIGl0ZW0gPSBhd2FpdCBDb21waWxlKHNvdXJjZSk7Ki8KICAgIGlmKGl0ZW0pIHsKICAgICAgcHVzaFVuaXF1ZShoaXN0LCBbLi4uZmxhZ3MsIHNvdXJjZV0pOwogICAgICBpdGVtcy5wdXNoKGl0ZW0pOwogICAgfQogIH0KCiAgV3JpdGVGaWxlKHVuaXRoaXN0LCBKU09OLnN0cmluZ2lmeShoaXN0LCBudWxsLCAyKSk7CgogIC8vIGdsb2JhbFRoaXMuJCA9IGl0ZW1zLmxlbmd0aCA9PSAxID8gaXRlbXNbMF0gOiBpdGVtczsKICBhd2FpdCBDb21tYW5kTGluZSgpOwp9CgpsZXQgZXJyb3I7CnRyeSB7CiAgY29uc3QgYXJndiA9IFsuLi4ocHJvY2Vzcz8uYXJndiA/PyBzY3JpcHRBcmdzKV0uc2xpY2UoMik7CiAgQVNUU2hlbGwoLi4uYXJndik7Cn0gY2F0Y2goZSkgewogIGVycm9yID0gZTsKfSBmaW5hbGx5IHsKICBpZihlcnJvcikgewogICAgY29uc29sZS5sb2coCiAgICAgICdGQUlMOiAnICsgZXJyb3IubWVzc2FnZSwKICAgICAgJ1xuICAnICsgbmV3IFN0YWNrKGVycm9yLnN0YWNrLCBmciA9PiBmci5mdW5jdGlvbk5hbWUgIT0gJ2VzZmFjdG9yeScpLnRvU3RyaW5nKCkucmVwbGFjZSgvXG4vZywgJ1xuICAnKQogICAgKTsKICAgIGNvbnNvbGUubG9nKCdGQUlMJyk7CiAgICBzdGQuZXhpdCgxKTsKICB9Cn0KAAAAAAAAAAAAkgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAx3oAAAAAAADPegAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/util.js",
			"redo_stack":
			[
			],
			"settings":
			{
				"buffer_size": 186474,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": ".project",
			"settings":
			{
				"buffer_size": 1748,
				"line_ending": "Unix"
			}
		},
		{
			"file": "clang-list.js",
			"settings":
			{
				"buffer_size": 9299,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					17,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAACohAAAAAAAALCEAAAAAAAAAAAAAUyAAAAAAAABVIAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKiEAAAAAAABTIAAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"paste",
					null,
					"AQAAAO8BAAAAAAAAVgMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7wEAAAAAAADvAQAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					2,
					"left_delete",
					null,
					"AgAAADsDAAAAAAAAOwMAAAAAAAAaAAAACmlvLWhlbHBlcnMuanM6IHRvb2sgMzc2bXM6AwAAAAAAADoDAAAAAAAAAQAAACc",
					"AQAAAAAAAAABAAAAOwMAAAAAAABVAwAAAAAAAP///////+9/"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": "';"
					},
					"AgAAADoDAAAAAAAAOwMAAAAAAAAAAAAAOwMAAAAAAAA8AwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOgMAAAAAAAA6AwAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAPgMAAAAAAAA+AwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "debugger-server.js",
			"settings":
			{
				"buffer_size": 12872,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					12,
					1,
					"paste",
					null,
					"AQAAACEDAAAAAAAAbgQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIQMAAAAAAAAhAwAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAF0FAAAAAAAAXgUAAAAAAAAAAAAAXgUAAAAAAABeBQAAAAAAAIADAAAKZnVuY3Rpb24gUmVhZEpTT04oZmlsZW5hbWUpIHsKICBsZXQgZGF0YSA9IGZzLnJlYWRGaWxlU3luYyhmaWxlbmFtZSwgJ3V0Zi04Jyk7CgogIGlmKGRhdGEpIGNvbnNvbGUuZGVidWcoYCR7ZGF0YS5sZW5ndGh9IGJ5dGVzIHJlYWQgZnJvbSAnJHtmaWxlbmFtZX0nYCk7CiAgcmV0dXJuIGRhdGEgPyBKU09OLnBhcnNlKGRhdGEpIDogbnVsbDsKfQoKZnVuY3Rpb24gV3JpdGVGaWxlKG5hbWUsIGRhdGEsIHZlcmJvc2UgPSB0cnVlKSB7CiAgaWYoVXRpbC5pc0dlbmVyYXRvcihkYXRhKSkgewogICAgbGV0IGZkID0gZnMub3BlblN5bmMobmFtZSwgb3MuT19XUk9OTFkgfCBvcy5PX1RSVU5DIHwgb3MuT19DUkVBVCwgMHgxYTQpOwogICAgbGV0IHIgPSAwOwogICAgZm9yKGxldCBpdGVtIG9mIGRhdGEpIHsKICAgICAgciArPSBmcy53cml0ZVN5bmMoZmQsIHRvQXJyYXlCdWZmZXIoaXRlbSArICcnKSk7CiAgICB9CiAgICBmcy5jbG9zZVN5bmMoZmQpOwogICAgbGV0IHN0YXQgPSBmcy5zdGF0U3luYyhuYW1lKTsKICAgIHJldHVybiBzdGF0Py5zaXplOwogIH0KICBpZihVdGlsLmlzSXRlcmF0b3IoZGF0YSkpIGRhdGEgPSBbLi4uZGF0YV07CiAgaWYoVXRpbC5pc0FycmF5KGRhdGEpKSBkYXRhID0gZGF0YS5qb2luKCdcbicpOwoKICBpZih0eXBlb2YgZGF0YSA9PSAnc3RyaW5nJyAmJiAhZGF0YS5lbmRzV2l0aCgnXG4nKSkgZGF0YSArPSAnXG4nOwogIGxldCByZXQgPSBmcy53cml0ZUZpbGVTeW5jKG5hbWUsIGRhdGEpOwoKICBpZih2ZXJib3NlKSBjb25zb2xlLmxvZyhgV3JvdGUgJHtuYW1lfTogJHtyZXR9IGJ5dGVzYCk7Cn0KCmZ1bmN0aW9uIFdyaXRlSlNPTihuYW1lLCBkYXRhKSB7CiAgV3JpdGVGaWxlKG5hbWUsIEpTT04uc3RyaW5naWZ5KGRhdGEsIG51bGwsIDIpKTsKfQ",
					"AQAAAAAAAAABAAAAXQUAAAAAAADdCAAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"paste",
					null,
					"AgAAAF8FAAAAAAAAIQgAAAAAAAAAAAAAIQgAAAAAAAAhCAAAAAAAANkDAAAKZnVuY3Rpb24gU3RhcnRSRVBMKHByZWZpeCA9IHNjcmlwdE5hbWUoKSwgc3VmZml4ID0gJycpIHsKICBsZXQgcmVwbCA9IG5ldyBSRVBMKGBceDFiWzM4OzU7MTY1bSR7cHJlZml4fSBceDFiWzM4OzU7MzltJHtzdWZmaXh9XHgxYlswbWAsIGZhbHNlKTsKCiAgcmVwbC5oaXN0b3J5TG9hZChudWxsLCBmcyk7CiAgcmVwbC5pbnNwZWN0T3B0aW9ucyA9IHsgLi4uY29uc29sZS5vcHRpb25zLCBjb21wYWN0OiAyIH07CgogIGxldCB7IGxvZyB9ID0gY29uc29sZTsKICAvL3JlcGwuc2hvdyA9IGFyZyA9PiBzdGQucHV0cyhhcmcpOwoKICAvKiByZXBsLmNsZWFudXAgPSAoKSA9PiB7CiAgICByZXBsLnJlYWRsaW5lUmVtb3ZlUHJvbXB0KCk7CiAgICBUZXJtaW5hbC5tb3VzZXRyYWNraW5nRGlzYWJsZSgpOwogICAgbGV0IG51bUxpbmVzID0gcmVwbC5oaXN0b3J5U2F2ZSgpOwoKICAgIHJlcGwucHJpbnRTdGF0dXMoYEVYSVQgKHdyb3RlICR7bnVtTGluZXN9IGhpc3RvcnkgZW50cmllcylgLCBmYWxzZSk7CgogICAgc3RkLmV4aXQoMCk7CiAgfTsqLwogIHJlcGwuZGlyZWN0aXZlcy5pID0gWwogICAgbmFtZSA9PgogICAgICBpbXBvcnQobmFtZSkKICAgICAgICAudGhlbihtID0+IChnbG9iYWxUaGlzW25hbWUucmVwbGFjZSgvKC4qXC98XC5bXlwvLl0rJCkvZywgJycpXSA9IG0pKQogICAgICAgIC5jYXRjaCgoKSA9PiByZXBsLnByaW50U3RhdHVzKGBFUlJPUjogbW9kdWxlICcke25hbWV9JyBub3QgZm91bmRgKSksCiAgICAnaW1wb3J0IGEgbW9kdWxlJwogIF07CiAgcmVwbC5kaXJlY3RpdmVzLmQgPSBbKCkgPT4gZ2xvYmFsVGhpcy5kYWVtb24oKSwgJ2RldGFjaCddOwoKICBjb25zb2xlLmxvZyA9IHJlcGwucHJpbnRGdW5jdGlvbigoLi4uYXJncykgPT4gewogICAgbG9nKCdMT0cnLCBjb25zb2xlLmNvbmZpZyhyZXBsLmluc3BlY3RPcHRpb25zKSwgLi4uYXJncyk7CiAgfSk7CgogIHJlcGwucnVuKCk7CiAgcmV0dXJuIHJlcGw7Cn0K",
					"AQAAAAAAAAABAAAAOAkAAAAAAABfBQAAAAAAAAAAAAAAAPC/"
				],
				[
					84,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAG8EAAAAAAAAcAQAAAAAAAAAAAAAcAQAAAAAAABwBAAAAAAAABQAAABnbG9iYWxUaGlzLmZzID0gZnM7Cg",
					"AQAAAAAAAAABAAAAbwQAAAAAAACDBAAAAAAAAAAAAAAAAPC/"
				],
				[
					87,
					1,
					"insert",
					{
						"characters": "Array.prototype"
					},
					"DwAAAH0EAAAAAAAAfgQAAAAAAAAAAAAAfgQAAAAAAAB/BAAAAAAAAAAAAAB/BAAAAAAAAIAEAAAAAAAAAAAAAIAEAAAAAAAAgQQAAAAAAAAAAAAAgQQAAAAAAACCBAAAAAAAAAAAAACCBAAAAAAAAIMEAAAAAAAAAAAAAIMEAAAAAAAAhAQAAAAAAAAAAAAAhAQAAAAAAACFBAAAAAAAAAAAAACFBAAAAAAAAIYEAAAAAAAAAAAAAIYEAAAAAAAAhwQAAAAAAAAAAAAAhwQAAAAAAACIBAAAAAAAAAAAAACIBAAAAAAAAIkEAAAAAAAAAAAAAIkEAAAAAAAAigQAAAAAAAAAAAAAigQAAAAAAACLBAAAAAAAAAAAAACLBAAAAAAAAIwEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfQQAAAAAAAB9BAAAAAAAAAAAAAAAAPC/"
				],
				[
					89,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAI4EAAAAAAAAjwQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjgQAAAAAAACOBAAAAAAAAAAAAAAAAPC/"
				],
				[
					120,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAAKkEAAAAAAAAqgQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqQQAAAAAAACpBAAAAAAAAAAAAAAAAPC/"
				],
				[
					121,
					1,
					"left_delete",
					null,
					"AQAAAKkEAAAAAAAAqQQAAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAAqgQAAAAAAACqBAAAAAAAAAAAAAAAAPC/"
				],
				[
					122,
					1,
					"insert",
					{
						"characters": "path.basename("
					},
					"DgAAAKkEAAAAAAAAqgQAAAAAAAAAAAAAqgQAAAAAAACrBAAAAAAAAAAAAACrBAAAAAAAAKwEAAAAAAAAAAAAAKwEAAAAAAAArQQAAAAAAAAAAAAArQQAAAAAAACuBAAAAAAAAAAAAACuBAAAAAAAAK8EAAAAAAAAAAAAAK8EAAAAAAAAsAQAAAAAAAAAAAAAsAQAAAAAAACxBAAAAAAAAAAAAACxBAAAAAAAALIEAAAAAAAAAAAAALIEAAAAAAAAswQAAAAAAAAAAAAAswQAAAAAAAC0BAAAAAAAAAAAAAC0BAAAAAAAALUEAAAAAAAAAAAAALUEAAAAAAAAtgQAAAAAAAAAAAAAtgQAAAAAAAC3BAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqQQAAAAAAACpBAAAAAAAAAAAAAAAAPC/"
				],
				[
					123,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAALcEAAAAAAAAuAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtwQAAAAAAAC3BAAAAAAAAAAAAAAAAPC/"
				],
				[
					124,
					1,
					"left_delete",
					null,
					"AQAAALcEAAAAAAAAtwQAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAuAQAAAAAAAC4BAAAAAAAAAAAAAAAAPC/"
				],
				[
					127,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAMQEAAAAAAAAxQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxAQAAAAAAADEBAAAAAAAAAAAAAAAAPC/"
				],
				[
					128,
					1,
					"insert",
					{
						"characters": " path.extname("
					},
					"DgAAAMUEAAAAAAAAxgQAAAAAAAAAAAAAxgQAAAAAAADHBAAAAAAAAAAAAADHBAAAAAAAAMgEAAAAAAAAAAAAAMgEAAAAAAAAyQQAAAAAAAAAAAAAyQQAAAAAAADKBAAAAAAAAAAAAADKBAAAAAAAAMsEAAAAAAAAAAAAAMsEAAAAAAAAzAQAAAAAAAAAAAAAzAQAAAAAAADNBAAAAAAAAAAAAADNBAAAAAAAAM4EAAAAAAAAAAAAAM4EAAAAAAAAzwQAAAAAAAAAAAAAzwQAAAAAAADQBAAAAAAAAAAAAADQBAAAAAAAANEEAAAAAAAAAAAAANEEAAAAAAAA0gQAAAAAAAAAAAAA0gQAAAAAAADTBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxQQAAAAAAADFBAAAAAAAAAAAAAAAAPC/"
				],
				[
					129,
					1,
					"left_delete",
					null,
					"AQAAANIEAAAAAAAA0gQAAAAAAAABAAAAKA",
					"AQAAAAAAAAABAAAA0wQAAAAAAADTBAAAAAAAAAAAAAAAAPC/"
				],
				[
					130,
					1,
					"insert",
					{
						"characters": "(scriptArgs"
					},
					"CwAAANIEAAAAAAAA0wQAAAAAAAAAAAAA0wQAAAAAAADUBAAAAAAAAAAAAADUBAAAAAAAANUEAAAAAAAAAAAAANUEAAAAAAAA1gQAAAAAAAAAAAAA1gQAAAAAAADXBAAAAAAAAAAAAADXBAAAAAAAANgEAAAAAAAAAAAAANgEAAAAAAAA2QQAAAAAAAAAAAAA2QQAAAAAAADaBAAAAAAAAAAAAADaBAAAAAAAANsEAAAAAAAAAAAAANsEAAAAAAAA3AQAAAAAAAAAAAAA3AQAAAAAAADdBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0gQAAAAAAADSBAAAAAAAAAAAAAAAAPC/"
				],
				[
					131,
					1,
					"insert",
					{
						"characters": "[0]))"
					},
					"BQAAAN0EAAAAAAAA3gQAAAAAAAAAAAAA3gQAAAAAAADfBAAAAAAAAAAAAADfBAAAAAAAAOAEAAAAAAAAAAAAAOAEAAAAAAAA4QQAAAAAAAAAAAAA4QQAAAAAAADiBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3QQAAAAAAADdBAAAAAAAAAAAAAAAAPC/"
				],
				[
					133,
					1,
					"cut",
					null,
					"AQAAAOIEAAAAAAAA4gQAAAAAAAArAAAALnJlcGxhY2UoLy4qXC8vZywgJycpLnJlcGxhY2UoL1wuanMkLywgJycpOw",
					"AQAAAAAAAAABAAAA4gQAAAAAAAANBQAAAAAAAP///////+9/"
				],
				[
					141,
					1,
					"insert",
					{
						"characters": "...scriptArgs"
					},
					"DQAAAKQEAAAAAAAApQQAAAAAAAAAAAAApQQAAAAAAACmBAAAAAAAAAAAAACmBAAAAAAAAKcEAAAAAAAAAAAAAKcEAAAAAAAAqAQAAAAAAAAAAAAAqAQAAAAAAACpBAAAAAAAAAAAAACpBAAAAAAAAKoEAAAAAAAAAAAAAKoEAAAAAAAAqwQAAAAAAAAAAAAAqwQAAAAAAACsBAAAAAAAAAAAAACsBAAAAAAAAK0EAAAAAAAAAAAAAK0EAAAAAAAArgQAAAAAAAAAAAAArgQAAAAAAACvBAAAAAAAAAAAAACvBAAAAAAAALAEAAAAAAAAAAAAALAEAAAAAAAAsQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApAQAAAAAAACkBAAAAAAAAAAAAAAAAPC/"
				],
				[
					150,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AgAAAKcEAAAAAAAAqAQAAAAAAAAAAAAAqAQAAAAAAACoBAAAAAAAAAoAAABzY3JpcHRBcmdz",
					"AQAAAAAAAAABAAAApwQAAAAAAACxBAAAAAAAAAAAAAAAAPC/"
				],
				[
					161,
					1,
					"insert",
					{
						"characters": "arg"
					},
					"BAAAAKQEAAAAAAAApQQAAAAAAAAAAAAApQQAAAAAAAClBAAAAAAAAAQAAAAuLi5hpQQAAAAAAACmBAAAAAAAAAAAAACmBAAAAAAAAKcEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApAQAAAAAAACoBAAAAAAAAAAAAAAAAPC/"
				],
				[
					166,
					1,
					"insert",
					{
						"characters": "arg"
					},
					"BAAAALoEAAAAAAAAuwQAAAAAAAAAAAAAuwQAAAAAAAC7BAAAAAAAAA0AAABzY3JpcHRBcmdzWzBduwQAAAAAAAC8BAAAAAAAAAAAAAC8BAAAAAAAAL0EAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAugQAAAAAAADHBAAAAAAAAAAAAAAAAPC/"
				],
				[
					171,
					1,
					"insert",
					{
						"characters": "arg"
					},
					"BAAAAMwEAAAAAAAAzQQAAAAAAAAAAAAAzQQAAAAAAADNBAAAAAAAAA0AAABzY3JpcHRBcmdzWzBdzQQAAAAAAADOBAAAAAAAAAAAAADOBAAAAAAAAM8EAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzAQAAAAAAADZBAAAAAAAAAAAAAAAAPC/"
				],
				[
					176,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAKcEAAAAAAAAqAQAAAAAAAAAAAAAqAQAAAAAAACpBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApwQAAAAAAACnBAAAAAAAAAAAAAAAAPC/"
				],
				[
					177,
					1,
					"insert",
					{
						"characters": " scirpt"
					},
					"BwAAAKkEAAAAAAAAqgQAAAAAAAAAAAAAqgQAAAAAAACrBAAAAAAAAAAAAACrBAAAAAAAAKwEAAAAAAAAAAAAAKwEAAAAAAAArQQAAAAAAAAAAAAArQQAAAAAAACuBAAAAAAAAAAAAACuBAAAAAAAAK8EAAAAAAAAAAAAAK8EAAAAAAAAsAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqQQAAAAAAACpBAAAAAAAAAAAAAAAAPC/"
				],
				[
					178,
					4,
					"left_delete",
					null,
					"BAAAAK8EAAAAAAAArwQAAAAAAAABAAAAdK4EAAAAAAAArgQAAAAAAAABAAAAcK0EAAAAAAAArQQAAAAAAAABAAAAcqwEAAAAAAAArAQAAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAAsAQAAAAAAACwBAAAAAAAAAAAAAAAAPC/"
				],
				[
					179,
					1,
					"insert",
					{
						"characters": "reipt"
					},
					"BQAAAKwEAAAAAAAArQQAAAAAAAAAAAAArQQAAAAAAACuBAAAAAAAAAAAAACuBAAAAAAAAK8EAAAAAAAAAAAAAK8EAAAAAAAAsAQAAAAAAAAAAAAAsAQAAAAAAACxBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArAQAAAAAAACsBAAAAAAAAAAAAAAAAPC/"
				],
				[
					180,
					4,
					"left_delete",
					null,
					"BAAAALAEAAAAAAAAsAQAAAAAAAABAAAAdK8EAAAAAAAArwQAAAAAAAABAAAAcK4EAAAAAAAArgQAAAAAAAABAAAAaa0EAAAAAAAArQQAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAsQQAAAAAAACxBAAAAAAAAAAAAAAAAPC/"
				],
				[
					181,
					1,
					"insert",
					{
						"characters": "iptArgs"
					},
					"BwAAAK0EAAAAAAAArgQAAAAAAAAAAAAArgQAAAAAAACvBAAAAAAAAAAAAACvBAAAAAAAALAEAAAAAAAAAAAAALAEAAAAAAAAsQQAAAAAAAAAAAAAsQQAAAAAAACyBAAAAAAAAAAAAACyBAAAAAAAALMEAAAAAAAAAAAAALMEAAAAAAAAtAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArQQAAAAAAACtBAAAAAAAAAAAAAAAAPC/"
				],
				[
					182,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAALQEAAAAAAAAtgQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtAQAAAAAAAC0BAAAAAAAAAAAAAAAAPC/"
				],
				[
					183,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAALUEAAAAAAAAtgQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtQQAAAAAAAC1BAAAAAAAAAAAAAAAAPC/"
				],
				[
					194,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAOEEAAAAAAAA4gQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4QQAAAAAAADhBAAAAAAAAP///////+9/"
				],
				[
					217,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAOMOAAAAAAAA5A4AAAAAAAAAAAAA5A4AAAAAAADlDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4w4AAAAAAADjDgAAAAAAAAAAAAAAAPC/"
				],
				[
					226,
					1,
					"insert",
					{
						"characters": "10"
					},
					"AwAAAAQRAAAAAAAABREAAAAAAAAAAAAABREAAAAAAAAFEQAAAAAAAAEAAAA4BREAAAAAAAAGEQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABBEAAAAAAAAFEQAAAAAAAAAAAAAAAPC/"
				],
				[
					237,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAAYRAAAAAAAABxEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABhEAAAAAAAAGEQAAAAAAAAAAAAAAkHJA"
				],
				[
					238,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAcRAAAAAAAACBEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABxEAAAAAAAAHEQAAAAAAAAAAAAAAAPC/"
				],
				[
					239,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAAgRAAAAAAAAChEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACBEAAAAAAAAIEQAAAAAAAAAAAAAAAPC/"
				],
				[
					240,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAAkRAAAAAAAAChEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACREAAAAAAAAJEQAAAAAAAAAAAAAAAPC/"
				],
				[
					246,
					1,
					"insert",
					{
						"characters": "str"
					},
					"BAAAAMoOAAAAAAAAyw4AAAAAAAAAAAAAyw4AAAAAAADLDgAAAAAAAAcAAAAuLi5hcmdzyw4AAAAAAADMDgAAAAAAAAAAAADMDgAAAAAAAM0OAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyg4AAAAAAADRDgAAAAAAAAAAAAAAAPC/"
				],
				[
					253,
					1,
					"insert",
					{
						"characters": "str"
					},
					"BAAAABoRAAAAAAAAGxEAAAAAAAAAAAAAGxEAAAAAAAAbEQAAAAAAAAcAAAAuLi5hcmdzGxEAAAAAAAAcEQAAAAAAAAAAAAAcEQAAAAAAAB0RAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGhEAAAAAAAAhEQAAAAAAAAAAAAAAAPC/"
				],
				[
					256,
					1,
					"insert",
					{
						"characters": ".trim"
					},
					"BQAAAB0RAAAAAAAAHhEAAAAAAAAAAAAAHhEAAAAAAAAfEQAAAAAAAAAAAAAfEQAAAAAAACARAAAAAAAAAAAAACARAAAAAAAAIREAAAAAAAAAAAAAIREAAAAAAAAiEQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHREAAAAAAAAdEQAAAAAAAAAAAAAAAPC/"
				],
				[
					257,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAACIRAAAAAAAAJBEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIhEAAAAAAAAiEQAAAAAAAAAAAAAAAPC/"
				],
				[
					265,
					1,
					"insert_snippet",
					{
						"contents": "\n${TM_CURRENT_LINE/^\\s*((?:#|\\/\\/[\\/!]?)\\s*).*/$1/}"
					},
					"AQAAAPcOAAAAAAAABg8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9w4AAAAAAAD3DgAAAAAAAAAAAAAAAPC/"
				],
				[
					266,
					3,
					"left_delete",
					null,
					"AwAAAAUPAAAAAAAABQ8AAAAAAAABAAAAIAQPAAAAAAAABA8AAAAAAAABAAAALwMPAAAAAAAAAw8AAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAABg8AAAAAAAAGDwAAAAAAAAAAAAAAAPC/"
				],
				[
					267,
					1,
					"insert",
					{
						"characters": "√Øf"
					},
					"AgAAAAMPAAAAAAAABA8AAAAAAAAAAAAABA8AAAAAAAAFDwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAw8AAAAAAAADDwAAAAAAAAAAAAAAAPC/"
				],
				[
					268,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAAUPAAAAAAAABw8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABQ8AAAAAAAAFDwAAAAAAAAAAAAAAAPC/"
				],
				[
					269,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAAUPAAAAAAAABQ8AAAAAAAABAAAAKAUPAAAAAAAABQ8AAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAABg8AAAAAAAAGDwAAAAAAAAAAAAAAAPC/"
				],
				[
					270,
					2,
					"left_delete",
					null,
					"AgAAAAQPAAAAAAAABA8AAAAAAAABAAAAZgMPAAAAAAAAAw8AAAAAAAACAAAAw68",
					"AQAAAAAAAAABAAAABQ8AAAAAAAAFDwAAAAAAAAAAAAAAAPC/"
				],
				[
					271,
					1,
					"insert",
					{
						"characters": "if/"
					},
					"AwAAAAMPAAAAAAAABA8AAAAAAAAAAAAABA8AAAAAAAAFDwAAAAAAAAAAAAAFDwAAAAAAAAYPAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAw8AAAAAAAADDwAAAAAAAAAAAAAAAPC/"
				],
				[
					272,
					1,
					"left_delete",
					null,
					"AQAAAAUPAAAAAAAABQ8AAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAABg8AAAAAAAAGDwAAAAAAAAAAAAAAAPC/"
				],
				[
					273,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAAUPAAAAAAAABw8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABQ8AAAAAAAAFDwAAAAAAAAAAAAAAAPC/"
				],
				[
					274,
					1,
					"insert",
					{
						"characters": "&/"
					},
					"AgAAAAYPAAAAAAAABw8AAAAAAAAAAAAABw8AAAAAAAAIDwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABg8AAAAAAAAGDwAAAAAAAAAAAAAAAPC/"
				],
				[
					275,
					2,
					"left_delete",
					null,
					"AgAAAAcPAAAAAAAABw8AAAAAAAABAAAALwYPAAAAAAAABg8AAAAAAAABAAAAJg",
					"AQAAAAAAAAABAAAACA8AAAAAAAAIDwAAAAAAAAAAAAAAAPC/"
				],
				[
					276,
					1,
					"insert",
					{
						"characters": "/lws_/.teswt"
					},
					"DAAAAAYPAAAAAAAABw8AAAAAAAAAAAAABw8AAAAAAAAIDwAAAAAAAAAAAAAIDwAAAAAAAAkPAAAAAAAAAAAAAAkPAAAAAAAACg8AAAAAAAAAAAAACg8AAAAAAAALDwAAAAAAAAAAAAALDwAAAAAAAAwPAAAAAAAAAAAAAAwPAAAAAAAADQ8AAAAAAAAAAAAADQ8AAAAAAAAODwAAAAAAAAAAAAAODwAAAAAAAA8PAAAAAAAAAAAAAA8PAAAAAAAAEA8AAAAAAAAAAAAAEA8AAAAAAAARDwAAAAAAAAAAAAARDwAAAAAAABIPAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABg8AAAAAAAAGDwAAAAAAAAAAAAAAAPC/"
				],
				[
					277,
					2,
					"left_delete",
					null,
					"AgAAABEPAAAAAAAAEQ8AAAAAAAABAAAAdBAPAAAAAAAAEA8AAAAAAAABAAAAdw",
					"AQAAAAAAAAABAAAAEg8AAAAAAAASDwAAAAAAAAAAAAAAAPC/"
				],
				[
					278,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAABAPAAAAAAAAEQ8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEA8AAAAAAAAQDwAAAAAAAAAAAAAAAPC/"
				],
				[
					279,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAABEPAAAAAAAAEw8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEQ8AAAAAAAARDwAAAAAAAAAAAAAAAPC/"
				],
				[
					280,
					1,
					"insert",
					{
						"characters": "str"
					},
					"AwAAABIPAAAAAAAAEw8AAAAAAAAAAAAAEw8AAAAAAAAUDwAAAAAAAAAAAAAUDwAAAAAAABUPAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEg8AAAAAAAASDwAAAAAAAAAAAAAAAPC/"
				],
				[
					282,
					1,
					"insert",
					{
						"characters": " return;"
					},
					"CAAAABcPAAAAAAAAGA8AAAAAAAAAAAAAGA8AAAAAAAAZDwAAAAAAAAAAAAAZDwAAAAAAABoPAAAAAAAAAAAAABoPAAAAAAAAGw8AAAAAAAAAAAAAGw8AAAAAAAAcDwAAAAAAAAAAAAAcDwAAAAAAAB0PAAAAAAAAAAAAAB0PAAAAAAAAHg8AAAAAAAAAAAAAHg8AAAAAAAAfDwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFw8AAAAAAAAXDwAAAAAAAAAAAAAAAPC/"
				],
				[
					288,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAACoRAAAAAAAAKxEAAAAAAAAAAAAAKxEAAAAAAAArEQAAAAAAAAUAAAAsICcuJw",
					"AQAAAAAAAAABAAAAKhEAAAAAAAAvEQAAAAAAAAAAAAAAAPC/"
				],
				[
					289,
					1,
					"left_delete",
					null,
					"AQAAACoRAAAAAAAAKhEAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAKxEAAAAAAAArEQAAAAAAAAAAAAAAAPC/"
				],
				[
					300,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAKAuAAAAAAAAoS4AAAAAAAAAAAAAoS4AAAAAAACiLgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoC4AAAAAAACgLgAAAAAAAAAAAAAAAPC/"
				],
				[
					307,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAAAcPAAAAAAAACA8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABw8AAAAAAAAHDwAAAAAAAAAAAAAAAPC/"
				],
				[
					309,
					1,
					"insert",
					{
						"characters": "|^+"
					},
					"AwAAAAwPAAAAAAAADQ8AAAAAAAAAAAAADQ8AAAAAAAAODwAAAAAAAAAAAAAODwAAAAAAAA8PAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADA8AAAAAAAAMDwAAAAAAAAAAAAAAAPC/"
				],
				[
					310,
					1,
					"left_delete",
					null,
					"AQAAAA4PAAAAAAAADg8AAAAAAAABAAAAKw",
					"AQAAAAAAAAABAAAADw8AAAAAAAAPDwAAAAAAAAAAAAAAAPC/"
				],
				[
					311,
					1,
					"insert",
					{
						"characters": "\\+\\+)"
					},
					"BQAAAA4PAAAAAAAADw8AAAAAAAAAAAAADw8AAAAAAAAQDwAAAAAAAAAAAAAQDwAAAAAAABEPAAAAAAAAAAAAABEPAAAAAAAAEg8AAAAAAAAAAAAAEg8AAAAAAAATDwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADg8AAAAAAAAODwAAAAAAAAAAAAAAAPC/"
				],
				[
					325,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAE8RAAAAAAAAUREAAAAAAAAAAAAASBEAAAAAAABKEQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASBEAAAAAAABPEQAAAAAAAAAAAAAAAPC/"
				],
				[
					332,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAA4PAAAAAAAADw8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADg8AAAAAAAAODwAAAAAAAAAAAAAAAPC/"
				],
				[
					333,
					1,
					"left_delete",
					null,
					"AQAAAA4PAAAAAAAADg8AAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAADw8AAAAAAAAPDwAAAAAAAAAAAAAAAPC/"
				],
				[
					334,
					1,
					"insert",
					{
						"characters": "\\s"
					},
					"AgAAAA4PAAAAAAAADw8AAAAAAAAAAAAADw8AAAAAAAAQDwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADg8AAAAAAAAODwAAAAAAAAAAAAAAAPC/"
				],
				[
					342,
					1,
					"insert",
					{
						"characters": "|^\\√ü"
					},
					"BAAAABQPAAAAAAAAFQ8AAAAAAAAAAAAAFQ8AAAAAAAAWDwAAAAAAAAAAAAAWDwAAAAAAABcPAAAAAAAAAAAAABcPAAAAAAAAGA8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFA8AAAAAAAAUDwAAAAAAAAAAAAAAAPC/"
				],
				[
					343,
					1,
					"left_delete",
					null,
					"AQAAABcPAAAAAAAAFw8AAAAAAAACAAAAw58",
					"AQAAAAAAAAABAAAAGA8AAAAAAAAYDwAAAAAAAAAAAAAAAPC/"
				],
				[
					344,
					1,
					"insert",
					{
						"characters": "s+"
					},
					"AgAAABcPAAAAAAAAGA8AAAAAAAAAAAAAGA8AAAAAAAAZDwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFw8AAAAAAAAXDwAAAAAAAAAAAAAAAPC/"
				],
				[
					345,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAABkPAAAAAAAAGw8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGQ8AAAAAAAAZDwAAAAAAAAAAAAAAAPC/"
				],
				[
					346,
					1,
					"insert",
					{
						"characters": "a-z0-9_"
					},
					"BwAAABoPAAAAAAAAGw8AAAAAAAAAAAAAGw8AAAAAAAAcDwAAAAAAAAAAAAAcDwAAAAAAAB0PAAAAAAAAAAAAAB0PAAAAAAAAHg8AAAAAAAAAAAAAHg8AAAAAAAAfDwAAAAAAAAAAAAAfDwAAAAAAACAPAAAAAAAAAAAAACAPAAAAAAAAIQ8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGg8AAAAAAAAaDwAAAAAAAAAAAAAAAPC/"
				],
				[
					348,
					1,
					"insert",
					{
						"characters": "+\\s"
					},
					"AwAAACIPAAAAAAAAIw8AAAAAAAAAAAAAIw8AAAAAAAAkDwAAAAAAAAAAAAAkDwAAAAAAACUPAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIg8AAAAAAAAiDwAAAAAAAAAAAAAAAPC/"
				],
				[
					349,
					1,
					"insert",
					{
						"characters": "=\\s"
					},
					"AwAAACUPAAAAAAAAJg8AAAAAAAAAAAAAJg8AAAAAAAAnDwAAAAAAAAAAAAAnDwAAAAAAACgPAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJQ8AAAAAAAAlDwAAAAAAAAAAAAAAAPC/"
				],
				[
					356,
					1,
					"insert",
					{
						"characters": "[:"
					},
					"AgAAACUPAAAAAAAAJg8AAAAAAAAAAAAAJg8AAAAAAAAnDwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJQ8AAAAAAAAlDwAAAAAAAAAAAAAAAPC/"
				],
				[
					358,
					1,
					"insert",
					{
						"characters": "]"
					},
					"AQAAACgPAAAAAAAAKQ8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKA8AAAAAAAAoDwAAAAAAAAAAAAAAAPC/"
				],
				[
					373,
					1,
					"insert",
					{
						"characters": "()"
					},
					"AgAAACMPAAAAAAAAJA8AAAAAAAAAAAAAJA8AAAAAAAAlDwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIw8AAAAAAAAjDwAAAAAAAAAAAAAAAPC/"
				],
				[
					374,
					2,
					"left_delete",
					null,
					"AgAAACQPAAAAAAAAJA8AAAAAAAABAAAAKSMPAAAAAAAAIw8AAAAAAAABAAAAKA",
					"AQAAAAAAAAABAAAAJQ8AAAAAAAAlDwAAAAAAAAAAAAAAAPC/"
				],
				[
					375,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAACMPAAAAAAAAJA8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIw8AAAAAAAAjDwAAAAAAAAAAAAAAAPC/"
				],
				[
					376,
					1,
					"left_delete",
					null,
					"AQAAACMPAAAAAAAAIw8AAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAJA8AAAAAAAAkDwAAAAAAAAAAAAAAAPC/"
				],
				[
					377,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAACMPAAAAAAAAJA8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIw8AAAAAAAAjDwAAAAAAAAAAAAAAAPC/"
				],
				[
					379,
					2,
					"right_delete",
					null,
					"AgAAACYPAAAAAAAAJg8AAAAAAAABAAAAWyYPAAAAAAAAJg8AAAAAAAABAAAAOg",
					"AQAAAAAAAAABAAAAJg8AAAAAAAAmDwAAAAAAAAAAAAAAAPC/"
				],
				[
					381,
					1,
					"left_delete",
					null,
					"AQAAACcPAAAAAAAAJw8AAAAAAAABAAAAXQ",
					"AQAAAAAAAAABAAAAKA8AAAAAAAAoDwAAAAAAAAAAAAAAAPC/"
				],
				[
					382,
					1,
					"insert",
					{
						"characters": "|:)"
					},
					"AwAAACcPAAAAAAAAKA8AAAAAAAAAAAAAKA8AAAAAAAApDwAAAAAAAAAAAAApDwAAAAAAACoPAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJw8AAAAAAAAnDwAAAAAAAAAAAAAAAPC/"
				],
				[
					396,
					1,
					"left_delete",
					null,
					"AQAAACMPAAAAAAAAIw8AAAAAAAABAAAAKA",
					"AQAAAAAAAAABAAAAJA8AAAAAAAAkDwAAAAAAAAAAAAAAAPC/"
				],
				[
					402,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAABYPAAAAAAAAFw8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFg8AAAAAAAAWDwAAAAAAAAAAAAAAAPC/"
				],
				[
					407,
					1,
					"cut",
					null,
					"AQAAABoPAAAAAAAAGg8AAAAAAAAKAAAAW2EtejAtOV9dKw",
					"AQAAAAAAAAABAAAAGg8AAAAAAAAkDwAAAAAAAAAAAAAAAPC/"
				],
				[
					408,
					1,
					"paste",
					null,
					"AQAAABoPAAAAAAAAJA8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGg8AAAAAAAAaDwAAAAAAAAAAAAAAAPC/"
				],
				[
					410,
					1,
					"paste",
					null,
					"AQAAACgPAAAAAAAAMg8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKA8AAAAAAAAoDwAAAAAAAAAAAAAAAPC/"
				],
				[
					420,
					1,
					"insert",
					{
						"characters": "\\s*"
					},
					"AwAAACgPAAAAAAAAKQ8AAAAAAAAAAAAAKQ8AAAAAAAAqDwAAAAAAAAAAAAAqDwAAAAAAACsPAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKA8AAAAAAAAoDwAAAAAAAAAAAAAAAPC/"
				],
				[
					424,
					2,
					"left_delete",
					null,
					"AgAAAHkRAAAAAAAAeREAAAAAAAABAAAAL3gRAAAAAAAAeBEAAAAAAAABAAAAKg",
					"AQAAAAAAAAABAAAAehEAAAAAAAB6EQAAAAAAAAAAAAAAiIFA"
				],
				[
					426,
					2,
					"left_delete",
					null,
					"AgAAAHARAAAAAAAAcBEAAAAAAAABAAAAKm8RAAAAAAAAbxEAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAAcREAAAAAAABxEQAAAAAAAAAAAAAAAPC/"
				],
				[
					448,
					1,
					"insert",
					{
						"characters": "str.nidex"
					},
					"CQAAAAYPAAAAAAAABw8AAAAAAAAAAAAABw8AAAAAAAAIDwAAAAAAAAAAAAAIDwAAAAAAAAkPAAAAAAAAAAAAAAkPAAAAAAAACg8AAAAAAAAAAAAACg8AAAAAAAALDwAAAAAAAAAAAAALDwAAAAAAAAwPAAAAAAAAAAAAAAwPAAAAAAAADQ8AAAAAAAAAAAAADQ8AAAAAAAAODwAAAAAAAAAAAAAODwAAAAAAAA8PAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABg8AAAAAAAAGDwAAAAAAAAAAAAAAAPC/"
				],
				[
					449,
					5,
					"left_delete",
					null,
					"BQAAAA4PAAAAAAAADg8AAAAAAAABAAAAeA0PAAAAAAAADQ8AAAAAAAABAAAAZQwPAAAAAAAADA8AAAAAAAABAAAAZAsPAAAAAAAACw8AAAAAAAABAAAAaQoPAAAAAAAACg8AAAAAAAABAAAAbg",
					"AQAAAAAAAAABAAAADw8AAAAAAAAPDwAAAAAAAAAAAAAAAPC/"
				],
				[
					450,
					1,
					"insert",
					{
						"characters": "indexOf('\\"
					},
					"CgAAAAoPAAAAAAAACw8AAAAAAAAAAAAACw8AAAAAAAAMDwAAAAAAAAAAAAAMDwAAAAAAAA0PAAAAAAAAAAAAAA0PAAAAAAAADg8AAAAAAAAAAAAADg8AAAAAAAAPDwAAAAAAAAAAAAAPDwAAAAAAABAPAAAAAAAAAAAAABAPAAAAAAAAEQ8AAAAAAAAAAAAAEQ8AAAAAAAASDwAAAAAAAAAAAAASDwAAAAAAABMPAAAAAAAAAAAAABMPAAAAAAAAFA8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACg8AAAAAAAAKDwAAAAAAAAAAAAAAAPC/"
				],
				[
					451,
					1,
					"insert",
					{
						"characters": "x1b')"
					},
					"BQAAABQPAAAAAAAAFQ8AAAAAAAAAAAAAFQ8AAAAAAAAWDwAAAAAAAAAAAAAWDwAAAAAAABcPAAAAAAAAAAAAABcPAAAAAAAAGA8AAAAAAAAAAAAAGA8AAAAAAAAZDwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFA8AAAAAAAAUDwAAAAAAAAAAAAAAAPC/"
				],
				[
					452,
					1,
					"insert",
					{
						"characters": " =="
					},
					"AwAAABkPAAAAAAAAGg8AAAAAAAAAAAAAGg8AAAAAAAAbDwAAAAAAAAAAAAAbDwAAAAAAABwPAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGQ8AAAAAAAAZDwAAAAAAAAAAAAAAAPC/"
				],
				[
					453,
					1,
					"insert",
					{
						"characters": " -1"
					},
					"AwAAABwPAAAAAAAAHQ8AAAAAAAAAAAAAHQ8AAAAAAAAeDwAAAAAAAAAAAAAeDwAAAAAAAB8PAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHA8AAAAAAAAcDwAAAAAAAAAAAAAAAPC/"
				],
				[
					454,
					1,
					"insert",
					{
						"characters": " &"
					},
					"AgAAAB8PAAAAAAAAIA8AAAAAAAAAAAAAIA8AAAAAAAAhDwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHw8AAAAAAAAfDwAAAAAAAAAAAAAAAPC/"
				],
				[
					455,
					1,
					"insert",
					{
						"characters": " &"
					},
					"AgAAACEPAAAAAAAAIg8AAAAAAAAAAAAAIg8AAAAAAAAjDwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIQ8AAAAAAAAhDwAAAAAAAAAAAAAAAPC/"
				],
				[
					458,
					3,
					"left_delete",
					null,
					"AwAAACIPAAAAAAAAIg8AAAAAAAABAAAAJiEPAAAAAAAAIQ8AAAAAAAABAAAAICAPAAAAAAAAIA8AAAAAAAABAAAAJg",
					"AQAAAAAAAAABAAAAIw8AAAAAAAAjDwAAAAAAAAAAAAAAAPC/"
				],
				[
					459,
					1,
					"insert",
					{
						"characters": "%%"
					},
					"AgAAACAPAAAAAAAAIQ8AAAAAAAAAAAAAIQ8AAAAAAAAiDwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIA8AAAAAAAAgDwAAAAAAAAAAAAAAAPC/"
				],
				[
					460,
					2,
					"left_delete",
					null,
					"AgAAACEPAAAAAAAAIQ8AAAAAAAABAAAAJSAPAAAAAAAAIA8AAAAAAAABAAAAJQ",
					"AQAAAAAAAAABAAAAIg8AAAAAAAAiDwAAAAAAAAAAAAAAAPC/"
				],
				[
					461,
					1,
					"insert",
					{
						"characters": "&&"
					},
					"AgAAACAPAAAAAAAAIQ8AAAAAAAAAAAAAIQ8AAAAAAAAiDwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIA8AAAAAAAAgDwAAAAAAAAAAAAAAAPC/"
				],
				[
					462,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACIPAAAAAAAAIw8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIg8AAAAAAAAiDwAAAAAAAAAAAAAAAPC/"
				],
				[
					470,
					1,
					"insert",
					{
						"characters": "level"
					},
					"BQAAAAYPAAAAAAAABw8AAAAAAAAAAAAABw8AAAAAAAAIDwAAAAAAAAAAAAAIDwAAAAAAAAkPAAAAAAAAAAAAAAkPAAAAAAAACg8AAAAAAAAAAAAACg8AAAAAAAALDwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABg8AAAAAAAAGDwAAAAAAAAAAAAAAAPC/"
				],
				[
					471,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAsPAAAAAAAADA8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACw8AAAAAAAALDwAAAAAAAAAAAAAAAPC/"
				],
				[
					472,
					6,
					"left_delete",
					null,
					"BgAAAAsPAAAAAAAACw8AAAAAAAABAAAAIAoPAAAAAAAACg8AAAAAAAABAAAAbAkPAAAAAAAACQ8AAAAAAAABAAAAZQgPAAAAAAAACA8AAAAAAAABAAAAdgcPAAAAAAAABw8AAAAAAAABAAAAZQYPAAAAAAAABg8AAAAAAAABAAAAbA",
					"AQAAAAAAAAABAAAADA8AAAAAAAAMDwAAAAAAAAAAAAAAAPC/"
				],
				[
					475,
					1,
					"cut",
					null,
					"AQAAAMgPAAAAAAAAyA8AAAAAAACSAQAAWwogICAgICAgICAgICAgICAgICAgICdFUlInLAogICAgICAgICAgICAgICAgICAgICdXQVJOJywKICAgICAgICAgICAgICAgICAgICAnTk9USUNFJywKICAgICAgICAgICAgICAgICAgICAnSU5GTycsCiAgICAgICAgICAgICAgICAgICAgJ0RFQlVHJywKICAgICAgICAgICAgICAgICAgICAnUEFSU0VSJywKICAgICAgICAgICAgICAgICAgICAnSEVBREVSJywKICAgICAgICAgICAgICAgICAgICAnRVhUJywKICAgICAgICAgICAgICAgICAgICAnQ0xJRU5UJywKICAgICAgICAgICAgICAgICAgICAnTEFURU5DWScsCiAgICAgICAgICAgICAgICAgICAgJ01JTk5FVCcsCiAgICAgICAgICAgICAgICAgICAgJ1RIUkVBRCcKICAgICAgICAgICAgICAgICAgXVtNYXRoLmxvZzIobGV2ZWwpXSA/PyBsZXZlbCArICcn",
					"AQAAAAAAAAABAAAAyA8AAAAAAABaEQAAAAAAAAAAAAAAAPC/"
				],
				[
					478,
					1,
					"insert",
					{
						"characters": "\nlevel"
					},
					"CAAAANMOAAAAAAAA1A4AAAAAAAAAAAAA1A4AAAAAAADcDgAAAAAAAAAAAADcDgAAAAAAAN4OAAAAAAAAAAAAAN4OAAAAAAAA3w4AAAAAAAAAAAAA3w4AAAAAAADgDgAAAAAAAAAAAADgDgAAAAAAAOEOAAAAAAAAAAAAAOEOAAAAAAAA4g4AAAAAAAAAAAAA4g4AAAAAAADjDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0w4AAAAAAADTDgAAAAAAAAAAAAAAAPC/"
				],
				[
					479,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAOMOAAAAAAAA5A4AAAAAAAAAAAAA5A4AAAAAAADlDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4w4AAAAAAADjDgAAAAAAAAAAAAAAAPC/"
				],
				[
					480,
					1,
					"paste",
					null,
					"AQAAAOUOAAAAAAAAdxAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5Q4AAAAAAADlDgAAAAAAAAAAAAAAAPC/"
				],
				[
					481,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAHcQAAAAAAAAeBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdxAAAAAAAAB3EAAAAAAAAAAAAAAAAPC/"
				],
				[
					495,
					1,
					"insert",
					{
						"characters": "leve!"
					},
					"BQAAAKsQAAAAAAAArBAAAAAAAAAAAAAArBAAAAAAAACtEAAAAAAAAAAAAACtEAAAAAAAAK4QAAAAAAAAAAAAAK4QAAAAAAAArxAAAAAAAAAAAAAArxAAAAAAAACwEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqxAAAAAAAACrEAAAAAAAAAAAAAAAAPC/"
				],
				[
					496,
					1,
					"left_delete",
					null,
					"AQAAAK8QAAAAAAAArxAAAAAAAAABAAAAIQ",
					"AQAAAAAAAAABAAAAsBAAAAAAAACwEAAAAAAAAAAAAAAAAPC/"
				],
				[
					497,
					1,
					"insert",
					{
						"characters": "l!='"
					},
					"BAAAAK8QAAAAAAAAsBAAAAAAAAAAAAAAsBAAAAAAAACxEAAAAAAAAAAAAACxEAAAAAAAALIQAAAAAAAAAAAAALIQAAAAAAAAsxAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArxAAAAAAAACvEAAAAAAAAAAAAAAAAPC/"
				],
				[
					498,
					1,
					"paste",
					null,
					"AQAAALMQAAAAAAAAuRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsxAAAAAAAACzEAAAAAAAAAAAAAAAAPC/"
				],
				[
					499,
					1,
					"insert",
					{
						"characters": "'"
					},
					"AQAAALkQAAAAAAAAuhAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuRAAAAAAAAC5EAAAAAAAAAAAAAAAAPC/"
				],
				[
					500,
					1,
					"insert",
					{
						"characters": " &&"
					},
					"AwAAALoQAAAAAAAAuxAAAAAAAAAAAAAAuxAAAAAAAAC8EAAAAAAAAAAAAAC8EAAAAAAAAL0QAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuhAAAAAAAAC6EAAAAAAAAAAAAAAAAPC/"
				],
				[
					501,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAL0QAAAAAAAAvhAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvRAAAAAAAAC9EAAAAAAAAAAAAAAAAPC/"
				],
				[
					515,
					1,
					"left_delete",
					null,
					"AQAAAGwRAAAAAAAAbBEAAAAAAAABAAAAKA",
					"AQAAAAAAAAABAAAAbREAAAAAAABtEQAAAAAAAAAAAAAAAPC/"
				],
				[
					516,
					1,
					"insert",
					{
						"characters": "level"
					},
					"BQAAAGwRAAAAAAAAbREAAAAAAAAAAAAAbREAAAAAAABuEQAAAAAAAAAAAABuEQAAAAAAAG8RAAAAAAAAAAAAAG8RAAAAAAAAcBEAAAAAAAAAAAAAcBEAAAAAAABxEQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbBEAAAAAAABsEQAAAAAAAAAAAAAAAPC/"
				],
				[
					517,
					6,
					"right_delete",
					null,
					"BgAAAHERAAAAAAAAcREAAAAAAAABAAAACnERAAAAAAAAcREAAAAAAAABAAAAIHERAAAAAAAAcREAAAAAAAABAAAAIHERAAAAAAAAcREAAAAAAAABAAAAIHERAAAAAAAAcREAAAAAAAABAAAAIHERAAAAAAAAcREAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAcREAAAAAAABxEQAAAAAAAAAAAAAAAPC/"
				],
				[
					518,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHERAAAAAAAAchEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcREAAAAAAABxEQAAAAAAAAAAAAAAAPC/"
				],
				[
					521,
					3,
					"right_delete",
					null,
					"AwAAAHIRAAAAAAAAchEAAAAAAAABAAAAIHIRAAAAAAAAchEAAAAAAAABAAAAIHIRAAAAAAAAchEAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAchEAAAAAAAByEQAAAAAAAAAAAAAAAPC/"
				],
				[
					525,
					1,
					"left_delete",
					null,
					"AQAAAHIRAAAAAAAAchEAAAAAAAAcAAAAICAgICAgICAgIAogICAgICAgICAgICAgICAgKQ",
					"AQAAAAAAAAABAAAAchEAAAAAAACOEQAAAAAAAAAAAAAAAPC/"
				],
				[
					548,
					2,
					"join_lines",
					null,
					"BQAAAFsRAAAAAAAAWxEAAAAAAAABAAAAClsRAAAAAAAAWxEAAAAAAAAQAAAAICAgICAgICAgICAgICAgIG0RAAAAAAAAbREAAAAAAAABAAAACm0RAAAAAAAAbREAAAAAAAAQAAAAICAgICAgICAgICAgICAgIG0RAAAAAAAAbhEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWxEAAAAAAABbEQAAAAAAAAAAAAAAAPC/"
				],
				[
					551,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADAMwAAaW1wb3J0ICogYXMgc3RkIGZyb20gJ3N0ZCc7CmltcG9ydCAqIGFzIG9zIGZyb20gJ29zJzsKaW1wb3J0ICogYXMgZGVlcCBmcm9tICcuL2xpYi9kZWVwLmpzJzsKaW1wb3J0ICogYXMgcGF0aCBmcm9tICcuL2xpYi9wYXRoLmpzJzsKaW1wb3J0IFV0aWwgZnJvbSAnLi9saWIvdXRpbC5qcyc7CmltcG9ydCB7IGRhZW1vbiwgYXRleGl0LCBnZXRwaWQsIHRvQXJyYXlCdWZmZXIsIHRvU3RyaW5nLCBlc2NhcGUsIHF1b3RlLCBkZWZpbmUsIGV4dGVuZEFycmF5LCBnZXRPcHQgfSBmcm9tICd1dGlsJzsKaW1wb3J0IHsgQ29uc29sZSB9IGZyb20gJy4vcXVpY2tqcy9xanMtbW9kdWxlcy9saWIvY29uc29sZS5qcyc7CmltcG9ydCBSRVBMIGZyb20gJy4vcXVpY2tqcy9xanMtbW9kdWxlcy9saWIvcmVwbC5qcyc7CmltcG9ydCBpbnNwZWN0IGZyb20gJy4vbGliL29iamVjdEluc3BlY3QuanMnOwppbXBvcnQgKiBhcyBUZXJtaW5hbCBmcm9tICcuL3Rlcm1pbmFsLmpzJzsKaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnOwppbXBvcnQgeyBzZXRMb2csIExMTF9VU0VSLCBMTExfTk9USUNFLCBMTExfV0FSTiwgY2xpZW50LCBzZXJ2ZXIgfSBmcm9tICduZXQnOwppbXBvcnQgeyBEZWJ1Z2dlclByb3RvY29sIH0gZnJvbSAnLi9kZWJ1Z2dlcnByb3RvY29sLmpzJzsKaW1wb3J0IHsgU3RhcnREZWJ1Z2dlciwgQ29ubmVjdERlYnVnZ2VyIH0gZnJvbSAnLi9kZWJ1Z2dlci5qcyc7CmltcG9ydCB7IGZjbnRsLCBGX0dFVEZMLCBGX1NFVEZMLCBPX05PTkJMT0NLIH0gZnJvbSAnLi9xdWlja2pzL3Fqcy1mZmkvbGliL2ZjbnRsLmpzJzsKaW1wb3J0IHsgSWZEZWJ1ZywgTG9nSWZEZWJ1ZywgUmVhZEZpbGUsIExvYWRIaXN0b3J5LCBSZWFkSlNPTiwgUmVhZFhNTCwgTWFwRmlsZSwgV3JpdGVGaWxlLCBXcml0ZUpTT04sIFdyaXRlWE1MLCBSZWFkQkpTT04sIFdyaXRlQkpTT04sIERpckl0ZXJhdG9yLCBSZWN1cnNpdmVEaXJJdGVyYXRvciwgUmVhZERpclJlY3Vyc2l2ZSwgCkZpbHRlciwgRmlsdGVySW1hZ2VzLCBTb3J0RmlsZXMsIFN0YXRGaWxlcywgUmVhZEZkLCBGZFJlYWRlciwgQ29weVRvQ2xpcGJvYXJkLCBSZWFkQ2FsbGJhY2ssIExvZ0NhbGwsIFNwYXduLCBGZXRjaFVSTCB9IGZyb20gJy4vaW8taGVscGVycy5qcycKCiAKZXh0ZW5kQXJyYXkoQXJyYXkucHJvdG90eXBlKTsKCmNvbnN0IHNjcmlwdE5hbWUgPSAoYXJnID0gc2NyaXB0QXJnc1swXSkgPT4gcGF0aC5iYXNlbmFtZShhcmcsIHBhdGguZXh0bmFtZShhcmcpKTsKCmF0ZXhpdCgoKSA9PiB7CiAgY29uc29sZS5sb2coJ2F0ZXhpdCcsIGF0ZXhpdCk7CiAgbGV0IHN0YWNrID0gbmV3IEVycm9yKCcnKS5zdGFjazsKICBjb25zb2xlLmxvZygnc3RhY2s6Jywgc3RhY2spOwp9KTsKIApmdW5jdGlvbiBTdGFydFJFUEwocHJlZml4ID0gc2NyaXB0TmFtZSgpLCBzdWZmaXggPSAnJykgewogIGxldCByZXBsID0gbmV3IFJFUEwoYFx4MWJbMzg7NTsxNjVtJHtwcmVmaXh9IFx4MWJbMzg7NTszOW0ke3N1ZmZpeH1ceDFiWzBtYCwgZmFsc2UpOwogIHJlcGwuaGlzdG9yeUxvYWQobnVsbCwgZnMpOwogIHJlcGwuaW5zcGVjdE9wdGlvbnMgPSB7IC4uLmNvbnNvbGUub3B0aW9ucywgY29tcGFjdDogMiB9OwogIGxldCB7IGxvZyB9ID0gY29uc29sZTsKCiAgcmVwbC5kaXJlY3RpdmVzLmkgPSBbCiAgICBuYW1lID0+CiAgICAgIGltcG9ydChuYW1lKQogICAgICAgIC50aGVuKG0gPT4gKGdsb2JhbFRoaXNbbmFtZS5yZXBsYWNlKC8oLipcL3xcLlteXC8uXSskKS9nLCAnJyldID0gbSkpCiAgICAgICAgLmNhdGNoKCgpID0+IHJlcGwucHJpbnRTdGF0dXMoYEVSUk9SOiBtb2R1bGUgJyR7bmFtZX0nIG5vdCBmb3VuZGApKSwKICAgICdpbXBvcnQgYSBtb2R1bGUnCiAgXTsKICByZXBsLmRpcmVjdGl2ZXMuZCA9IFsoKSA9PiBnbG9iYWxUaGlzLmRhZW1vbigpLCAnZGV0YWNoJ107CiAgY29uc29sZS5sb2cgPSByZXBsLnByaW50RnVuY3Rpb24oKC4uLmFyZ3MpID0+IHsKICAgIGxvZygnTE9HJywgY29uc29sZS5jb25maWcocmVwbC5pbnNwZWN0T3B0aW9ucyksIC4uLmFyZ3MpOwogIH0pOwogIHJlcGwucnVuKCk7CiAgcmV0dXJuIHJlcGw7Cn0KCmZ1bmN0aW9uIG1haW4oLi4uYXJncykgewogIGNvbnN0IGJhc2UgPSBzY3JpcHROYW1lKCkucmVwbGFjZSgvXC5bYS16XSokLywgJycpOwoKICBjb25zdCBjb25maWcgPSBSZWFkSlNPTihgLiR7YmFzZX0tY29uZmlnYCkgPz8ge307CiAgZ2xvYmFsVGhpcy5jb25zb2xlID0gbmV3IENvbnNvbGUoc3RkLmVyciwgewogICAgaW5zcGVjdE9wdGlvbnM6IHsgY29tcGFjdDogMiwgY3VzdG9tSW5zcGVjdDogdHJ1ZSB9CiAgfSk7CiAgbGV0IHBhcmFtcyA9IGdldE9wdCgKICAgIHsKICAgICAgdmVyYm9zZTogW2ZhbHNlLCAoYSwgdikgPT4gKHYgfCAwKSArIDEsICd2J10sCiAgICAgIGxpc3RlbjogW2ZhbHNlLCBudWxsLCAnbCddLAogICAgICBjb25uZWN0OiBbZmFsc2UsIG51bGwsICdjJ10sCiAgICAgIGNsaWVudDogW2ZhbHNlLCBudWxsLCAnQyddLAogICAgICBzZXJ2ZXI6IFtmYWxzZSwgbnVsbCwgJ1MnXSwKICAgICAgZGVidWc6IFtmYWxzZSwgbnVsbCwgJ3gnXSwKICAgICAgdGxzOiBbZmFsc2UsIG51bGwsICd0J10sCiAgICAgICduby10bHMnOiBbZmFsc2UsICh2LCBwdiwgbykgPT4gKChvLnRscyA9IGZhbHNlKSwgdHJ1ZSksICdUJ10sCiAgICAgIGFkZHJlc3M6IFt0cnVlLCBudWxsLCAnYSddLAogICAgICBwb3J0OiBbdHJ1ZSwgbnVsbCwgJ3AnXSwKICAgICAgcXVpZXQ6IFtmYWxzZSwgbnVsbCwgJ3EnXSwKICAgICAgJ3NzbC1jZXJ0JzogW3RydWUsIG51bGxdLAogICAgICAnc3NsLXByaXZhdGUta2V5JzogW3RydWUsIG51bGxdLAogICAgICAnQCc6ICdhZGRyZXNzLHBvcnQnCiAgICB9LAogICAgYXJncwogICk7CiAgaWYocGFyYW1zWyduby10bHMnXSA9PT0gdHJ1ZSkgcGFyYW1zLnRscyA9IGZhbHNlOwogIGNvbnN0IHsKICAgIGFkZHJlc3MgPSAnMC4wLjAuMCcsCiAgICBwb3J0ID0gODk5OSwKICAgICdzc2wtY2VydCc6IHNzbENlcnQgPSAnbG9jYWxob3N0LmNydCcsCiAgICAnc3NsLXByaXZhdGUta2V5Jzogc3NsUHJpdmF0ZUtleSA9ICdsb2NhbGhvc3Qua2V5JwogIH0gPSBwYXJhbXM7CiAgY29uc3QgbGlzdGVuID0gcGFyYW1zLmNvbm5lY3QgJiYgIXBhcmFtcy5saXN0ZW4gPyBmYWxzZSA6IHRydWU7CiAgLy9jb25zdCBzZXJ2ZXIgPSAhcGFyYW1zLmNsaWVudCB8fCBwYXJhbXMuc2VydmVyOwogIGxldCBuYW1lID0gVXRpbC5nZXRBcmdzKClbMF07CiAgbmFtZSA9IG5hbWUKICAgIC5yZXBsYWNlKC8uKlwvLywgJycpCiAgICAucmVwbGFjZSgvLS9nLCAnICcpCiAgICAucmVwbGFjZSgvXC5bXlwvLl0qJC8sICcnKTsKCiAgbGV0IFtwcmVmaXgsIHN1ZmZpeF0gPSBuYW1lLnNwbGl0KCcgJyk7CgogIGxldCBwcm90b2NvbCA9IG5ldyBXZWFrTWFwKCk7CgogIGxldCBzb2NrZXRzID0gKGdsb2JhbFRoaXMuc29ja2V0cyA/Pz0gbmV3IFNldCgpKTsKCiAgY29uc3QgY3JlYXRlV1MgPSAoZ2xvYmFsVGhpcy5jcmVhdGVXUyA9ICh1cmwsIGNhbGxiYWNrcywgbGlzdGVuKSA9PiB7CiAgICBjb25zb2xlLmxvZygnY3JlYXRlV1MnLCB7IHVybCwgY2FsbGJhY2tzLCBsaXN0ZW4gfSk7CgogICAgc2V0TG9nKAogICAgICBwYXJhbXMucXVpZXQgPyAwIDogKHBhcmFtcy5kZWJ1ZyA/IExMTF9VU0VSIDogMCkgfCAoKChwYXJhbXMuZGVidWcgPyBMTExfTk9USUNFIDogTExMX1dBUk4pIDw8IDEpIC0gMSksCiAgICAgIHBhcmFtcy5xdWlldAogICAgICAgID8gKCkgPT4ge30KICAgICAgICA6IChsZXZlbCwgc3RyKSA9PiB7CiAgICAgICAgICBsZXZlbCA9WwogICAgICAgICAgICAgICAgICAgICdFUlInLAogICAgICAgICAgICAgICAgICAgICdXQVJOJywKICAgICAgICAgICAgICAgICAgICAnTk9USUNFJywKICAgICAgICAgICAgICAgICAgICAnSU5GTycsCiAgICAgICAgICAgICAgICAgICAgJ0RFQlVHJywKICAgICAgICAgICAgICAgICAgICAnUEFSU0VSJywKICAgICAgICAgICAgICAgICAgICAnSEVBREVSJywKICAgICAgICAgICAgICAgICAgICAnRVhUJywKICAgICAgICAgICAgICAgICAgICAnQ0xJRU5UJywKICAgICAgICAgICAgICAgICAgICAnTEFURU5DWScsCiAgICAgICAgICAgICAgICAgICAgJ01JTk5FVCcsCiAgICAgICAgICAgICAgICAgICAgJ1RIUkVBRCcKICAgICAgICAgICAgICAgICAgXVtNYXRoLmxvZzIobGV2ZWwpXSA/PyBsZXZlbCArICcnOwogICAgICAgICAgIC8vIGNvbnNvbGUubG9nKC4uLmFyZ3MpOwogICAgICAgICAgIGlmKGxldmVsIT0nTUlOTkVUJyAmJiBzdHIuaW5kZXhPZignXHgxYicpID09IC0xICYmIC8obHdzX3xeXHNcK1wrfF4oXHMrW2EtejAtOV9dK1xzPXxccypbYS16MC05X10rOilccykvLnRlc3Qoc3RyKSkgcmV0dXJuOwogICAgICAgICAgICBpZihwYXJhbXMuZGVidWcpCiAgICAgICAgICAgICAgY29uc29sZS5sb2cobGV2ZWwgLnBhZEVuZCgxMCksIHN0ci50cmltKCkKICAgICAgICAgICAgICApOwogICAgICAgICAgfQogICAgKTsKCiAgICBsZXQgb3B0aW9uczsKICAgIGxldCBjaGlsZCwgZGJnOwogICAgbGV0IG5ldGZuID0gW2NsaWVudCwgc2VydmVyXVsrbGlzdGVuXTsKICAgIGNvbnNvbGUubG9nKCdjcmVhdGVXUycsIHsgdXJsLCBuZXRmbiB9KTsKICAgIHJldHVybiBuZXRmbigKICAgICAgdXJsLAogICAgICAob3B0aW9ucyA9IHsKICAgICAgICB0bHM6IHBhcmFtcy50bHMsCiAgICAgICAgc3NsQ2VydCwKICAgICAgICBzc2xQcml2YXRlS2V5LAogICAgICAgIG1pbWV0eXBlczogWwogICAgICAgICAgWycuc3ZneicsICdhcHBsaWNhdGlvbi9nemlwJ10sCiAgICAgICAgICBbJy5tanMnLCAnYXBwbGljYXRpb24vamF2YXNjcmlwdCddLAogICAgICAgICAgWycuZXMnLCAnYXBwbGljYXRpb24vamF2YXNjcmlwdCddLAogICAgICAgICAgWycud2FzbScsICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nXSwKICAgICAgICAgIFsnLmVvdCcsICdhcHBsaWNhdGlvbi92bmQubXMtZm9udG9iamVjdCddLAogICAgICAgICAgWycubGliJywgJ2FwcGxpY2F0aW9uL3gtYXJjaGl2ZSddLAogICAgICAgICAgWycuYnoyJywgJ2FwcGxpY2F0aW9uL3gtYnppcDInXSwKICAgICAgICAgIFsnLmdpdGlnbm9yZScsICd0ZXh0L3BsYWluJ10sCiAgICAgICAgICBbJy5jbWFrZScsICd0ZXh0L3BsYWluJ10sCiAgICAgICAgICBbJy5oZXgnLCAndGV4dC9wbGFpbiddLAogICAgICAgICAgWycubWQnLCAndGV4dC9wbGFpbiddLAogICAgICAgICAgWycucGJ4cHJvaicsICd0ZXh0L3BsYWluJ10sCiAgICAgICAgICBbJy53YXQnLCAndGV4dC9wbGFpbiddLAogICAgICAgICAgWycuYycsICd0ZXh0L3gtYyddLAogICAgICAgICAgWycuaCcsICd0ZXh0L3gtYyddLAogICAgICAgICAgWycuY3BwJywgJ3RleHQveC1jKysnXSwKICAgICAgICAgIFsnLmhwcCcsICd0ZXh0L3gtYysrJ10sCiAgICAgICAgICBbJy5maWx0ZXJzJywgJ3RleHQveG1sJ10sCiAgICAgICAgICBbJy5wbGlzdCcsICd0ZXh0L3htbCddLAogICAgICAgICAgWycuc3Rvcnlib2FyZCcsICd0ZXh0L3htbCddLAogICAgICAgICAgWycudmN4cHJvaicsICd0ZXh0L3htbCddLAogICAgICAgICAgWycuYmF0JywgJ3RleHQveC1tc2Rvcy1iYXRjaCddLAogICAgICAgICAgWycubW0nLCAndGV4dC94LW9iamVjdGl2ZS1jJ10sCiAgICAgICAgICBbJy5tJywgJ3RleHQveC1vYmplY3RpdmUtYyddLAogICAgICAgICAgWycuc2gnLCAndGV4dC94LXNoZWxsc2NyaXB0J10KICAgICAgICBdLAogICAgICAgIG1vdW50czogW1snLycsICcuJywgJ2RlYnVnZ2VyLmh0bWwnXV0sCiAgICAgICAgLi4udXJsLAoKICAgICAgICAuLi5jYWxsYmFja3MsCiAgICAgICAgb25Db25uZWN0KHdzLCByZXEpIHsKICAgICAgICAgIGNvbnNvbGUubG9nKCdkZWJ1Z2dlci1zZXJ2ZXInLCB7IHdzLCByZXEgfSk7CgogICAgICAgICAgd3Muc2VuZE1lc3NhZ2UgPSBmdW5jdGlvbihtc2cpIHsKICAgICAgICAgICAgbGV0IHJldCA9IHRoaXMuc2VuZChKU09OLnN0cmluZ2lmeShtc2cpKTsKICAgICAgICAgICAgY29uc29sZS5sb2coYHdzLnNlbmRNZXNzYWdlKGAsIG1zZywgYCkgPSAke3JldH1gKTsKICAgICAgICAgICAgcmV0dXJuIHJldDsKICAgICAgICAgIH07CgogICAgICAgICAgc29ja2V0cy5hZGQod3MpOwogICAgICAgIH0sCiAgICAgICAgb25DbG9zZSh3cykgewogICAgICAgICAgY29uc29sZS5sb2coJ29uQ2xvc2UnLCB3cyk7CiAgICAgICAgICBkYmcuY2xvc2UoKTsKCiAgICAgICAgICBwcm90b2NvbC5kZWxldGUod3MpOwogICAgICAgICAgc29ja2V0cy5kZWxldGUod3MpOwogICAgICAgIH0sCiAgICAgICAgb25FcnJvcih3cykgewogICAgICAgICAgY29uc29sZS5sb2coJ29uRXJyb3InLCB3cyk7CiAgICAgICAgfSwKICAgICAgICBvbkh0dHAocmVxLCByc3ApIHsKICAgICAgICAgIGNvbnN0IHsgdXJsLCBtZXRob2QsIGhlYWRlcnMgfSA9IHJlcTsKICAgICAgICAgIGNvbnNvbGUubG9nKCdceDFiWzM4OzU7MzNtb25IdHRwXHgxYlswbSBbXG4gICcsIHJlcSwgJyxcbiAgJywgcnNwLCAnXG5dJyk7CiAgICAgICAgICByZXR1cm4gcnNwOwogICAgICAgIH0sCiAgICAgICAgb25NZXNzYWdlKHdzLCBkYXRhKSB7CiAgICAgICAgICBjb25zb2xlLmxvZygnb25NZXNzYWdlJywgd3MsIGRhdGEpOwoKICAgICAgICAgIGhhbmRsZUNvbW1hbmQod3MsIGRhdGEpOwoKICAgICAgICAgIGZ1bmN0aW9uIGhhbmRsZUNvbW1hbmQod3MsIGRhdGEpIHsKICAgICAgICAgICAgbGV0IG9iaiA9IEpTT04ucGFyc2UoZGF0YSk7CgogICAgICAgICAgICBjb25zdCB7IGNvbW1hbmQsIC4uLnJlc3QgfSA9IG9iajsKICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ29uTWVzc2FnZScsIGNvbW1hbmQsIHJlc3QpOwogICAgICAgICAgICBjb25zdCB7CiAgICAgICAgICAgICAgY29ubmVjdCA9IHRydWUsCiAgICAgICAgICAgICAgYWRkcmVzcyA9ICcxMjcuMC4wLjE6JyArIE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqICg2NTUzNSAtIDEwMjQpKSArIDEwMjQsCiAgICAgICAgICAgICAgYXJncyA9IFtdCiAgICAgICAgICAgIH0gPSByZXN0OwoKICAgICAgICAgICAgc3dpdGNoIChjb21tYW5kKSB7CiAgICAgICAgICAgICAgY2FzZSAnc3RhcnQnOiB7CiAgICAgICAgICAgICAgICBjaGlsZCA9IHdzLmNoaWxkID0gU3RhcnREZWJ1Z2dlcihhcmdzLCBjb25uZWN0LCBhZGRyZXNzKTsKICAgICAgICAgICAgICAgIGNvbnN0IFssIHN0ZG91dCwgc3RkZXJyXSA9IGNoaWxkLnN0ZGlvOwogICAgICAgICAgICAgICAgZm9yKGxldCBmZCBvZiBbc3Rkb3V0LCBzdGRlcnJdKSB7CiAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coYGZjbnRsKCR7ZmR9LCBGX0dFVEZMKWApOwogICAgICAgICAgICAgICAgICBsZXQgZmxhZ3MgPSBmY250bChmZCwgRl9HRVRGTCk7CiAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coYGZjbnRsKCR7ZmR9LCBGX1NFVEZMLCAweCR7ZmxhZ3MudG9TdHJpbmcoMTYpfSlgKTsKICAgICAgICAgICAgICAgICAgZmxhZ3MgfD0gT19OT05CTE9DSzsKICAgICAgICAgICAgICAgICAgZmNudGwoZmQsIEZfU0VURkwsIGZsYWdzKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGZvcihsZXQgaSA9IDE7IGkgPD0gMjsgaSsrKSB7CiAgICAgICAgICAgICAgICAgIGxldCBmZCA9IGNoaWxkLnN0ZGlvW2ldOwogICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnb3Muc2V0UmVhZEhhbmRsZXInLCBmZCk7CiAgICAgICAgICAgICAgICAgIG9zLnNldFJlYWRIYW5kbGVyKGZkLCAoKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgbGV0IGJ1ZiA9IG5ldyBBcnJheUJ1ZmZlcigxMDI0KTsKICAgICAgICAgICAgICAgICAgICBsZXQgciA9IG9zLnJlYWQoZmQsIGJ1ZiwgMCwgYnVmLmJ5dGVMZW5ndGgpOwoKICAgICAgICAgICAgICAgICAgICBpZihyID4gMCkgewogICAgICAgICAgICAgICAgICAgICAgbGV0IGRhdGEgPSB0b1N0cmluZyhidWYuc2xpY2UoMCwgcikpOwogICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYHJlYWQoJHtmZH0sIGJ1ZikgPSAke3J9ICgke3F1b3RlKGRhdGEsICInIil9KWApOwoKICAgICAgICAgICAgICAgICAgICAgIHdzLnNlbmRNZXNzYWdlKHsKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ291dHB1dCcsCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5uZWw6IFsnc3Rkb3V0JywgJ3N0ZGVyciddW2kgLSAxXSwKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YQogICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdjaGlsZCcsIGNoaWxkLnBpZCk7CgogICAgICAgICAgICAgICAgb3Muc2xlZXAoMTAwMCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGNhc2UgJ2Nvbm5lY3QnOiB7CiAgICAgICAgICAgICAgICBkYmcgPSB3cy5kYmcgPSBDb25uZWN0RGVidWdnZXIoYWRkcmVzcywgKGRiZywgc29jaykgPT4gewogICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnd2FpdCgpID0nLCBjaGlsZC53YWl0KCkpOwogICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnY2hpbGQnLCBjaGlsZCk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIG9zLnNldFdyaXRlSGFuZGxlcigrZGJnLCBhc3luYyAoKSA9PiB7CiAgICAgICAgICAgICAgICAgIG9zLnNldFdyaXRlSGFuZGxlcigrZGJnLCBudWxsKTsKICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYGNvbm5lY3RlZCB0byAke2FkZHJlc3N9YCwgZGJnKTsKCiAgICAgICAgICAgICAgICAgIHNvY2tldHMuYWRkKGRiZyk7CgogICAgICAgICAgICAgICAgICBjb25zdCBjd2QgPSBwcm9jZXNzLmN3ZCgpOwogICAgICAgICAgICAgICAgICB3cy5zZW5kTWVzc2FnZSh7CiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3Jlc3BvbnNlJywKICAgICAgICAgICAgICAgICAgICByZXNwb25zZTogewogICAgICAgICAgICAgICAgICAgICAgY29tbWFuZDogJ3N0YXJ0JywKICAgICAgICAgICAgICAgICAgICAgIGFyZ3MsCiAgICAgICAgICAgICAgICAgICAgICBjd2QsCiAgICAgICAgICAgICAgICAgICAgICBhZGRyZXNzCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgIGxldCBtc2c7CgogICAgICAgICAgICAgICAgICB3aGlsZShkYmcub3BlbikgewogICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICBtc2cgPSBhd2FpdCBEZWJ1Z2dlclByb3RvY29sLnJlYWQoZGJnKTsKICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdEZWJ1Z2dlclByb3RvY29sLnJlYWQoKSA9JywgZXNjYXBlKG1zZykpOwogICAgICAgICAgICAgICAgICAgICAgaWYodHlwZW9mIG1zZyA9PSAnc3RyaW5nJykgewogICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmV0OwogICAgICAgICAgICAgICAgICAgICAgICByZXQgPSB3cy5zZW5kKG1zZyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGB3cy5zZW5kKCR7cXVvdGUobXNnLCAiJyIpfSkgPSAke3JldH1gKTsKICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdjbG9zZWQgc29ja2V0JywgZGJnKTsKICAgICAgICAgICAgICAgICAgICAgICAgc29ja2V0cy5kZWxldGUoZGJnKTsKICAgICAgICAgICAgICAgICAgICAgICAgd3Muc2VuZE1lc3NhZ2UoewogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdlbmQnLAogICAgICAgICAgICAgICAgICAgICAgICAgIHJlYXNvbjogJ2Nsb3NlZCcKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaChlcnJvcikgewogICAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBtZXNzYWdlLCBzdGFjayB9ID0gZXJyb3I7CiAgICAgICAgICAgICAgICAgICAgICB3cy5zZW5kTWVzc2FnZSh7CiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdlcnJvcicsCiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiB7IG1lc3NhZ2UsIHN0YWNrIH0KICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgZGJnLmNsb3NlKCk7CiAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYobXNnID09PSBudWxsKSBicmVhazsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZGJnJywgZGJnKTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBjYXNlICdmaWxlJzogewogICAgICAgICAgICAgICAgY29uc3QgeyBwYXRoIH0gPSByZXN0OwogICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IGZzLnJlYWRGaWxlU3luYyhwYXRoLCAndXRmLTgnKTsKICAgICAgICAgICAgICAgIC8vd3Muc2VuZChKU09OLnN0cmluZ2lmeSh7IHR5cGU6ICdyZXNwb25zZScsIHJlc3BvbnNlOiB7IGNvbW1hbmQ6ICdmaWxlJywgcGF0aCwgZGF0YSB9IH0pKTsKCiAgICAgICAgICAgICAgICBjb25zdCBsZXhlciA9IG5ldyBMZXhlcihkYXRhLCBwYXRoKTsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdsZXhlcicsIGxleGVyKTsKICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVzID0gW107CgogICAgICAgICAgICAgICAgZm9yKDs7KSB7CiAgICAgICAgICAgICAgICAgIGNvbnN0IHsgcG9zLCBzaXplIH0gPSBsZXhlcjsKICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2xleGVyJywgeyBwb3MsIHNpemUgfSk7CiAgICAgICAgICAgICAgICAgIGxldCByZXN1bHQgPSBsZXhlci5uZXh0KCk7CiAgICAgICAgICAgICAgICAgIGlmKHJlc3VsdC5kb25lKSBicmVhazsKICAgICAgICAgICAgICAgICAgY29uc3QgdG9rZW4gPSByZXN1bHQudmFsdWU7CiAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCd0b2tlbicsIHsKICAgICAgICAgICAgICAgICAgICBsZXhlbWU6IHRva2VuLmxleGVtZSwKICAgICAgICAgICAgICAgICAgICBpZDogdG9rZW4uaWQsCiAgICAgICAgICAgICAgICAgICAgbG9jOiB0b2tlbi5sb2MgKyAnJwogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgY29uc3QgeyB0eXBlLCBpZCwgbGV4ZW1lLCBsb2MgfSA9IHRva2VuOwogICAgICAgICAgICAgICAgICBjb25zdCB7IGxpbmUsIGNvbHVtbiwgZmlsZSB9ID0gbG9jOwogICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCd0b2tlbicsIHtsZXhlbWUsaWQsbGluZX0pOwoKICAgICAgICAgICAgICAgICAgaWYoIWxpbmVzW2xpbmUgLSAxXSkgbGluZXMucHVzaChbXSk7CiAgICAgICAgICAgICAgICAgIGxldCBhID0gbGluZXNbbGluZSAtIDFdOwogICAgICAgICAgICAgICAgICBhLnB1c2goW2xleGVtZSwgaWRdKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdsaW5lcycsIGxpbmVzKTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBkZWZhdWx0OiB7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnc2VuZCB0byBkZWJ1Z2dlcicsIGRhdGEpOwogICAgICAgICAgICAgICAgRGVidWdnZXJQcm90b2NvbC5zZW5kKGRiZywgZGF0YSk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIC8qbGV0IHAgPSBuZXcgRGVidWdnZXJQcm90b2NvbCgpOwogICAgICAgIHByb3RvY29sLnNldCh3cywgcCk7Ki8KICAgICAgICB9LAogICAgICAgIG9uRmQoZmQsIHJkLCB3cikgewogICAgICAgICAgLy9jb25zb2xlLmxvZygnb25GZCcsIHsgZmQsIHJkLCB3ciB9KTsKICAgICAgICAgIG9zLnNldFJlYWRIYW5kbGVyKGZkLCByZCk7CiAgICAgICAgICBvcy5zZXRXcml0ZUhhbmRsZXIoZmQsIHdyKTsKICAgICAgICB9LAogICAgICAgIC4uLih1cmwgJiYgdXJsLmhvc3QgPyB1cmwgOiB7fSkKICAgICAgfSkKICAgICk7CiAgfSk7CiAgY29uc29sZS5sb2coJ1hYJyk7CgogIC8qICBkZWZpbmUoZ2xvYmFsVGhpcywgewogICAgZ2V0IGNvbm5lY3Rpb25zKCkgewogICAgICByZXR1cm4gWy4uLmdsb2JhbFRoaXMuc29ja2V0c107CiAgICB9LAogICAgZ2V0IHNvY2tsaXN0KCkgewogICAgICByZXR1cm4gWy4uLmdsb2JhbFRoaXMuc29ja2V0c107CiAgICB9LAogICAgbmV0OiB7IHNldExvZywgTExMX1VTRVIsIExMTF9OT1RJQ0UsIExMTF9XQVJOLCBjbGllbnQsIHNlcnZlciB9LAogICAgU3RhcnREZWJ1Z2dlciwKICAgIENvbm5lY3REZWJ1Z2dlciwKICAgIERlYnVnZ2VyUHJvdG9jb2wsCiAgICByZXBsOiBTdGFydFJFUEwoKSwKICAgIGRhZW1vbigpIHsKICAgICAgcmVwbC5zdG9wKCk7CiAgICAgIHN0ZC5wdXRzKCdcbmRldGFjaGluZy4uLicpOwogICAgICBkYWVtb24oMSwgMCk7CiAgICAgIHN0ZC5wdXRzKCcgUElEICcgKyBnZXRwaWQoKSArICdcbicpOwogICAgfQogIH0pOwoqLwogIGRlbGV0ZSBnbG9iYWxUaGlzLkRFQlVHOwoKICBnbG9iYWxUaGlzLndzID0gY3JlYXRlV1MoYHdzczovLyR7YWRkcmVzc306OTAwMC93c2AsIHt9LCB0cnVlKTsKICAvLyAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGdsb2JhbFRoaXMsICdERUJVRycsIHsgZ2V0OiBEZWJ1Z0ZsYWdzIH0pOwoKICAvKiBpZihsaXN0ZW4pIGNsaS5saXN0ZW4oY3JlYXRlV1MsIG9zKTsKICBlbHNlIGNsaS5jb25uZWN0KGNyZWF0ZVdTLCBvcyk7CiovCiAgZnVuY3Rpb24gcXVpdCh3aHkpIHsKICAgIGNvbnNvbGUubG9nKGBxdWl0KCcke3doeX0nKWApOwoKICAgIGxldCBjZmcgPSB7IGluc3BlY3RPcHRpb25zOiBjb25zb2xlLm9wdGlvbnMgfTsKICAgIFdyaXRlSlNPTihgLiR7YmFzZX0tY29uZmlnYCwgY2ZnKTsKICAgIC8vIHJlcGwuY2xlYW51cCh3aHkpOwogIH0KfQoKdHJ5IHsKICBtYWluKC4uLnNjcmlwdEFyZ3Muc2xpY2UoMSkpOwp9IGNhdGNoKGVycm9yKSB7CiAgY29uc29sZS5sb2coYEZBSUw6ICR7ZXJyb3I/Lm1lc3NhZ2UgPz8gZXJyb3J9XG4ke2Vycm9yPy5zdGFja31gKTsKfSBmaW5hbGx5IHsKICAvL2NvbnNvbGUubG9nKCdTVUNDRVNTJyk7Cn0KAAAAAAAAAADGMwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbhEAAAAAAABuEQAAAAAAAAAAAAAAAPC/"
				],
				[
					608,
					1,
					"insert",
					{
						"characters": "logLevels,"
					},
					"CgAAABQCAAAAAAAAFQIAAAAAAAAAAAAAFQIAAAAAAAAWAgAAAAAAAAAAAAAWAgAAAAAAABcCAAAAAAAAAAAAABcCAAAAAAAAGAIAAAAAAAAAAAAAGAIAAAAAAAAZAgAAAAAAAAAAAAAZAgAAAAAAABoCAAAAAAAAAAAAABoCAAAAAAAAGwIAAAAAAAAAAAAAGwIAAAAAAAAcAgAAAAAAAAAAAAAcAgAAAAAAAB0CAAAAAAAAAAAAAB0CAAAAAAAAHgIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFAIAAAAAAAAUAgAAAAAAAAAAAAAAAPC/"
				],
				[
					609,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAB4CAAAAAAAAHwIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHgIAAAAAAAAeAgAAAAAAAAAAAAAAAPC/"
				],
				[
					622,
					1,
					"insert",
					{
						"characters": "logLeev"
					},
					"CAAAAP4OAAAAAAAA/w4AAAAAAAAAAAAA/w4AAAAAAAD/DgAAAAAAAD4BAABbCiAgICAgICAgICAgICAgICAnRVJSJywKICAgICAgICAgICAgICAgICdXQVJOJywKICAgICAgICAgICAgICAgICdOT1RJQ0UnLAogICAgICAgICAgICAgICAgJ0lORk8nLAogICAgICAgICAgICAgICAgJ0RFQlVHJywKICAgICAgICAgICAgICAgICdQQVJTRVInLAogICAgICAgICAgICAgICAgJ0hFQURFUicsCiAgICAgICAgICAgICAgICAnRVhUJywKICAgICAgICAgICAgICAgICdDTElFTlQnLAogICAgICAgICAgICAgICAgJ0xBVEVOQ1knLAogICAgICAgICAgICAgICAgJ01JTk5FVCcsCiAgICAgICAgICAgICAgICAnVEhSRUFEJwogICAgICAgICAgICAgIF3/DgAAAAAAAAAPAAAAAAAAAAAAAAAPAAAAAAAAAQ8AAAAAAAAAAAAAAQ8AAAAAAAACDwAAAAAAAAAAAAACDwAAAAAAAAMPAAAAAAAAAAAAAAMPAAAAAAAABA8AAAAAAAAAAAAABA8AAAAAAAAFDwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/g4AAAAAAAA8EAAAAAAAAAAAAAAAAPC/"
				],
				[
					623,
					2,
					"left_delete",
					null,
					"AgAAAAQPAAAAAAAABA8AAAAAAAABAAAAdgMPAAAAAAAAAw8AAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAABQ8AAAAAAAAFDwAAAAAAAAAAAAAAAPC/"
				],
				[
					624,
					1,
					"insert",
					{
						"characters": "vels"
					},
					"BAAAAAMPAAAAAAAABA8AAAAAAAAAAAAABA8AAAAAAAAFDwAAAAAAAAAAAAAFDwAAAAAAAAYPAAAAAAAAAAAAAAYPAAAAAAAABw8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAw8AAAAAAAADDwAAAAAAAAAAAAAAAPC/"
				],
				[
					636,
					1,
					"right_delete",
					null,
					"AQAAAAgPAAAAAAAACA8AAAAAAAAKAAAATWF0aC5sb2cyKA",
					"AQAAAAAAAAABAAAACA8AAAAAAAASDwAAAAAAAAAAAAAAAPC/"
				],
				[
					638,
					1,
					"right_delete",
					null,
					"AQAAAA0PAAAAAAAADQ8AAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAADQ8AAAAAAAANDwAAAAAAAAAAAAAAAPC/"
				],
				[
					647,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAADQ8AAAAAAAANDwAAAAAAAAAAAAAAAPC/"
				],
				[
					654,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAABAPAAAAAAAAEQ8AAAAAAAAAAAAAEQ8AAAAAAAARDwAAAAAAACUAAAAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyguLi5hcmdzKTsK",
					"AQAAAAAAAAABAAAAEA8AAAAAAAA1DwAAAAAAAAAAAAAAAPC/"
				],
				[
					702,
					1,
					"cut",
					null,
					"AQAAAPAOAAAAAAAA8A4AAAAAAAAQAAAAbG9nTGV2ZWxzW2xldmVsXQ",
					"AQAAAAAAAAABAAAA8A4AAAAAAAAADwAAAAAAAAAAAAAAAPC/"
				],
				[
					707,
					1,
					"paste",
					null,
					"AgAAAPoPAAAAAAAAChAAAAAAAAAAAAAAChAAAAAAAAAKEAAAAAAAAAUAAABsZXZlbA",
					"AQAAAAAAAAABAAAA+g8AAAAAAAD/DwAAAAAAAAAAAAAAAPC/"
				],
				[
					716,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAANwOAAAAAAAA3Q4AAAAAAAAAAAAA3Q4AAAAAAADdDgAAAAAAACQAAAAgICAgICAgICAgICBsZXZlbCA9ICA/PyBsZXZlbCArICcnOwo",
					"AQAAAAAAAAABAAAA3A4AAAAAAAAADwAAAAAAAAAAAAAAAPC/"
				],
				[
					738,
					1,
					"insert",
					{
						"characters": "LLL_USER"
					},
					"CQAAAAUPAAAAAAAABg8AAAAAAAAAAAAABg8AAAAAAAAGDwAAAAAAAAkAAAAnTUlOTkVUJyAGDwAAAAAAAAcPAAAAAAAAAAAAAAcPAAAAAAAACA8AAAAAAAAAAAAACA8AAAAAAAAJDwAAAAAAAAAAAAAJDwAAAAAAAAoPAAAAAAAAAAAAAAoPAAAAAAAACw8AAAAAAAAAAAAACw8AAAAAAAAMDwAAAAAAAAAAAAAMDwAAAAAAAA0PAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABQ8AAAAAAAAODwAAAAAAAAAAAAAAAPC/"
				],
				[
					739,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAA0PAAAAAAAADg8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADQ8AAAAAAAANDwAAAAAAAAAAAAAAAPC/"
				],
				[
					744,
					3,
					"join_lines",
					null,
					"CQAAABAPAAAAAAAAEA8AAAAAAAABAAAAChAPAAAAAAAAEA8AAAAAAAAOAAAAICAgICAgICAgICAgICAQDwAAAAAAABEPAAAAAAAAAAAAAC0PAAAAAAAALQ8AAAAAAAABAAAACi0PAAAAAAAALQ8AAAAAAAAOAAAAICAgICAgICAgICAgICAtDwAAAAAAAC4PAAAAAAAAAAAAAG0PAAAAAAAAbQ8AAAAAAAABAAAACm0PAAAAAAAAbQ8AAAAAAAAMAAAAICAgICAgICAgICAgbQ8AAAAAAABuDwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADg8AAAAAAAAODwAAAAAAAAAAAAAAAPC/"
				],
				[
					746,
					1,
					"join_lines",
					null,
					"AgAAAO0OAAAAAAAA7Q4AAAAAAAABAAAACu0OAAAAAAAA7Q4AAAAAAAAOAAAAICAgICAgICAgICAgICA",
					"AQAAAAAAAAABAAAA7Q4AAAAAAADtDgAAAAAAAAAAAAAAAJZA"
				],
				[
					775,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAABgMAAAAAAAAGQwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGAwAAAAAAAAYDAAAAAAAAAAAAAAAAPC/"
				],
				[
					776,
					1,
					"insert",
					{
						"characters": "\nquiet=fals"
					},
					"DAAAABkMAAAAAAAAGgwAAAAAAAAAAAAAGgwAAAAAAAAeDAAAAAAAAAAAAAAeDAAAAAAAAB8MAAAAAAAAAAAAAB8MAAAAAAAAIAwAAAAAAAAAAAAAIAwAAAAAAAAhDAAAAAAAAAAAAAAhDAAAAAAAACIMAAAAAAAAAAAAACIMAAAAAAAAIwwAAAAAAAAAAAAAIwwAAAAAAAAkDAAAAAAAAAAAAAAkDAAAAAAAACUMAAAAAAAAAAAAACUMAAAAAAAAJgwAAAAAAAAAAAAAJgwAAAAAAAAnDAAAAAAAAAAAAAAnDAAAAAAAACgMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGQwAAAAAAAAZDAAAAAAAAAAAAAAAAPC/"
				],
				[
					777,
					1,
					"insert",
					{
						"characters": "e,"
					},
					"AgAAACgMAAAAAAAAKQwAAAAAAAAAAAAAKQwAAAAAAAAqDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKAwAAAAAAAAoDAAAAAAAAAAAAAAAAPC/"
				],
				[
					778,
					1,
					"insert",
					{
						"characters": "\ndebgu=f"
					},
					"CQAAACoMAAAAAAAAKwwAAAAAAAAAAAAAKwwAAAAAAAAvDAAAAAAAAAAAAAAvDAAAAAAAADAMAAAAAAAAAAAAADAMAAAAAAAAMQwAAAAAAAAAAAAAMQwAAAAAAAAyDAAAAAAAAAAAAAAyDAAAAAAAADMMAAAAAAAAAAAAADMMAAAAAAAANAwAAAAAAAAAAAAANAwAAAAAAAA1DAAAAAAAAAAAAAA1DAAAAAAAADYMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKgwAAAAAAAAqDAAAAAAAAAAAAAAAAPC/"
				],
				[
					779,
					4,
					"left_delete",
					null,
					"BAAAADUMAAAAAAAANQwAAAAAAAABAAAAZjQMAAAAAAAANAwAAAAAAAABAAAAPTMMAAAAAAAAMwwAAAAAAAABAAAAdTIMAAAAAAAAMgwAAAAAAAABAAAAZw",
					"AQAAAAAAAAABAAAANgwAAAAAAAA2DAAAAAAAAAAAAAAAAPC/"
				],
				[
					780,
					1,
					"insert",
					{
						"characters": "ug=false,"
					},
					"CQAAADIMAAAAAAAAMwwAAAAAAAAAAAAAMwwAAAAAAAA0DAAAAAAAAAAAAAA0DAAAAAAAADUMAAAAAAAAAAAAADUMAAAAAAAANgwAAAAAAAAAAAAANgwAAAAAAAA3DAAAAAAAAAAAAAA3DAAAAAAAADgMAAAAAAAAAAAAADgMAAAAAAAAOQwAAAAAAAAAAAAAOQwAAAAAAAA6DAAAAAAAAAAAAAA6DAAAAAAAADsMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMgwAAAAAAAAyDAAAAAAAAAAAAAAAAPC/"
				],
				[
					791,
					1,
					"",
					null,
					"AQAAAFUOAAAAAAAAVQ4AAAAAAAAHAAAAcGFyYW1zLg",
					"AQAAAAAAAAABAAAAVQ4AAAAAAABcDgAAAAAAAAAAAAAAAPC/"
				],
				[
					792,
					1,
					"",
					null,
					"AQAAAGIOAAAAAAAAYg4AAAAAAAAHAAAAcGFyYW1zLg",
					"AQAAAAAAAAABAAAAYg4AAAAAAABpDgAAAAAAAAAAAAAAAPC/"
				],
				[
					793,
					1,
					"",
					null,
					"AQAAAH0OAAAAAAAAfQ4AAAAAAAAHAAAAcGFyYW1zLg",
					"AQAAAAAAAAABAAAAfQ4AAAAAAACEDgAAAAAAAAAAAAAAAPC/"
				],
				[
					794,
					1,
					"",
					null,
					"AQAAAK4OAAAAAAAArg4AAAAAAAAHAAAAcGFyYW1zLg",
					"AQAAAAAAAAABAAAArg4AAAAAAAC1DgAAAAAAAAAAAAAAAPC/"
				],
				[
					795,
					1,
					"",
					null,
					"AQAAAI0PAAAAAAAAjQ8AAAAAAAAHAAAAcGFyYW1zLg",
					"AQAAAAAAAAABAAAAjQ8AAAAAAACUDwAAAAAAAAAAAAAAAPC/"
				],
				[
					808,
					1,
					"cut",
					null,
					"AQAAACsMAAAAAAAAKwwAAAAAAAARAAAAICAgIGRlYnVnPWZhbHNlLAo",
					"AQAAAAAAAAABAAAAKwwAAAAAAAA8DAAAAAAAAAAAAAAAAPC/"
				],
				[
					809,
					2,
					"paste",
					null,
					"AgAAACsMAAAAAAAAPAwAAAAAAAAAAAAAPAwAAAAAAABNDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKwwAAAAAAAArDAAAAAAAAAAAAAAAAPC/"
				],
				[
					816,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AgAAAEAMAAAAAAAAQQwAAAAAAAAAAAAAQQwAAAAAAABBDAAAAAAAAAUAAABkZWJ1Zw",
					"AQAAAAAAAAABAAAAQAwAAAAAAABFDAAAAAAAAAAAAAAAAPC/"
				],
				[
					817,
					2,
					"left_delete",
					null,
					"AgAAAEAMAAAAAAAAQAwAAAAAAAABAAAAdD4MAAAAAAAAPgwAAAAAAAACAAAAICA",
					"AQAAAAAAAAABAAAAQQwAAAAAAABBDAAAAAAAAAAAAAAAAPC/"
				],
				[
					822,
					1,
					"left_delete",
					null,
					"AQAAADsMAAAAAAAAOwwAAAAAAAAKAAAACiAgPWZhbHNlLA",
					"AQAAAAAAAAABAAAAOwwAAAAAAABFDAAAAAAAAAAAAAAAoGRA"
				],
				[
					833,
					1,
					"cut",
					null,
					"AQAAACsMAAAAAAAAKwwAAAAAAAARAAAAICAgIGRlYnVnPWZhbHNlLAo",
					"AQAAAAAAAAABAAAAKwwAAAAAAAA8DAAAAAAAAAAAAAAAAPC/"
				],
				[
					834,
					2,
					"paste",
					null,
					"AgAAACsMAAAAAAAAPAwAAAAAAAAAAAAAPAwAAAAAAABNDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKwwAAAAAAAArDAAAAAAAAAAAAAAAAPC/"
				],
				[
					839,
					1,
					"insert",
					{
						"characters": "tls"
					},
					"BAAAAEAMAAAAAAAAQQwAAAAAAAAAAAAAQQwAAAAAAABBDAAAAAAAAAUAAABkZWJ1Z0EMAAAAAAAAQgwAAAAAAAAAAAAAQgwAAAAAAABDDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQAwAAAAAAABFDAAAAAAAAAAAAAAAAPC/"
				],
				[
					844,
					1,
					"insert",
					{
						"characters": "true"
					},
					"BQAAAEQMAAAAAAAARQwAAAAAAAAAAAAARQwAAAAAAABFDAAAAAAAAAUAAABmYWxzZUUMAAAAAAAARgwAAAAAAAAAAAAARgwAAAAAAABHDAAAAAAAAAAAAABHDAAAAAAAAEgMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARAwAAAAAAABJDAAAAAAAAAAAAAAAAPC/"
				],
				[
					854,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAOMgAAaW1wb3J0ICogYXMgc3RkIGZyb20gJ3N0ZCc7CmltcG9ydCAqIGFzIG9zIGZyb20gJ29zJzsKaW1wb3J0ICogYXMgZGVlcCBmcm9tICcuL2xpYi9kZWVwLmpzJzsKaW1wb3J0ICogYXMgcGF0aCBmcm9tICcuL2xpYi9wYXRoLmpzJzsKaW1wb3J0IFV0aWwgZnJvbSAnLi9saWIvdXRpbC5qcyc7CmltcG9ydCB7IGRhZW1vbiwgYXRleGl0LCBnZXRwaWQsIHRvQXJyYXlCdWZmZXIsIHRvU3RyaW5nLCBlc2NhcGUsIHF1b3RlLCBkZWZpbmUsIGV4dGVuZEFycmF5LCBnZXRPcHQgfSBmcm9tICd1dGlsJzsKaW1wb3J0IHsgQ29uc29sZSB9IGZyb20gJy4vcXVpY2tqcy9xanMtbW9kdWxlcy9saWIvY29uc29sZS5qcyc7CmltcG9ydCBSRVBMIGZyb20gJy4vcXVpY2tqcy9xanMtbW9kdWxlcy9saWIvcmVwbC5qcyc7CmltcG9ydCBpbnNwZWN0IGZyb20gJy4vbGliL29iamVjdEluc3BlY3QuanMnOwppbXBvcnQgKiBhcyBUZXJtaW5hbCBmcm9tICcuL3Rlcm1pbmFsLmpzJzsKaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnOwppbXBvcnQgeyBzZXRMb2csIGxvZ0xldmVscywgTExMX1VTRVIsIExMTF9OT1RJQ0UsIExMTF9XQVJOLCBjbGllbnQsIHNlcnZlciB9IGZyb20gJ25ldCc7CmltcG9ydCB7IERlYnVnZ2VyUHJvdG9jb2wgfSBmcm9tICcuL2RlYnVnZ2VycHJvdG9jb2wuanMnOwppbXBvcnQgeyBTdGFydERlYnVnZ2VyLCBDb25uZWN0RGVidWdnZXIgfSBmcm9tICcuL2RlYnVnZ2VyLmpzJzsKaW1wb3J0IHsgZmNudGwsIEZfR0VURkwsIEZfU0VURkwsIE9fTk9OQkxPQ0sgfSBmcm9tICcuL3F1aWNranMvcWpzLWZmaS9saWIvZmNudGwuanMnOwppbXBvcnQgeyBJZkRlYnVnLCBMb2dJZkRlYnVnLCBSZWFkRmlsZSwgTG9hZEhpc3RvcnksIFJlYWRKU09OLCBSZWFkWE1MLCBNYXBGaWxlLCBXcml0ZUZpbGUsIFdyaXRlSlNPTiwgV3JpdGVYTUwsIFJlYWRCSlNPTiwgV3JpdGVCSlNPTiwgRGlySXRlcmF0b3IsIFJlY3Vyc2l2ZURpckl0ZXJhdG9yLCBSZWFkRGlyUmVjdXJzaXZlLCBGaWx0ZXIsIEZpbHRlckltYWdlcywgU29ydEZpbGVzLCBTdGF0RmlsZXMsIFJlYWRGZCwgRmRSZWFkZXIsIENvcHlUb0NsaXBib2FyZCwgUmVhZENhbGxiYWNrLCBMb2dDYWxsLCBTcGF3biwgRmV0Y2hVUkwgfSBmcm9tICcuL2lvLWhlbHBlcnMuanMnOwoKZXh0ZW5kQXJyYXkoQXJyYXkucHJvdG90eXBlKTsKCmNvbnN0IHNjcmlwdE5hbWUgPSAoYXJnID0gc2NyaXB0QXJnc1swXSkgPT4gcGF0aC5iYXNlbmFtZShhcmcsIHBhdGguZXh0bmFtZShhcmcpKTsKCmF0ZXhpdCgoKSA9PiB7CiAgY29uc29sZS5sb2coJ2F0ZXhpdCcsIGF0ZXhpdCk7CiAgbGV0IHN0YWNrID0gbmV3IEVycm9yKCcnKS5zdGFjazsKICBjb25zb2xlLmxvZygnc3RhY2s6Jywgc3RhY2spOwp9KTsKCmZ1bmN0aW9uIFN0YXJ0UkVQTChwcmVmaXggPSBzY3JpcHROYW1lKCksIHN1ZmZpeCA9ICcnKSB7CiAgbGV0IHJlcGwgPSBuZXcgUkVQTChgXHgxYlszODs1OzE2NW0ke3ByZWZpeH0gXHgxYlszODs1OzM5bSR7c3VmZml4fVx4MWJbMG1gLCBmYWxzZSk7CiAgcmVwbC5oaXN0b3J5TG9hZChudWxsLCBmcyk7CiAgcmVwbC5pbnNwZWN0T3B0aW9ucyA9IHsgLi4uY29uc29sZS5vcHRpb25zLCBjb21wYWN0OiAyIH07CiAgbGV0IHsgbG9nIH0gPSBjb25zb2xlOwoKICByZXBsLmRpcmVjdGl2ZXMuaSA9IFsKICAgIG5hbWUgPT4KICAgICAgaW1wb3J0KG5hbWUpCiAgICAgICAgLnRoZW4obSA9PiAoZ2xvYmFsVGhpc1tuYW1lLnJlcGxhY2UoLyguKlwvfFwuW15cLy5dKyQpL2csICcnKV0gPSBtKSkKICAgICAgICAuY2F0Y2goKCkgPT4gcmVwbC5wcmludFN0YXR1cyhgRVJST1I6IG1vZHVsZSAnJHtuYW1lfScgbm90IGZvdW5kYCkpLAogICAgJ2ltcG9ydCBhIG1vZHVsZScKICBdOwogIHJlcGwuZGlyZWN0aXZlcy5kID0gWygpID0+IGdsb2JhbFRoaXMuZGFlbW9uKCksICdkZXRhY2gnXTsKICBjb25zb2xlLmxvZyA9IHJlcGwucHJpbnRGdW5jdGlvbigoLi4uYXJncykgPT4gewogICAgbG9nKCdMT0cnLCBjb25zb2xlLmNvbmZpZyhyZXBsLmluc3BlY3RPcHRpb25zKSwgLi4uYXJncyk7CiAgfSk7CiAgcmVwbC5ydW4oKTsKICByZXR1cm4gcmVwbDsKfQoKZnVuY3Rpb24gbWFpbiguLi5hcmdzKSB7CiAgY29uc3QgYmFzZSA9IHNjcmlwdE5hbWUoKS5yZXBsYWNlKC9cLlthLXpdKiQvLCAnJyk7CgogIGNvbnN0IGNvbmZpZyA9IFJlYWRKU09OKGAuJHtiYXNlfS1jb25maWdgKSA/PyB7fTsKICBnbG9iYWxUaGlzLmNvbnNvbGUgPSBuZXcgQ29uc29sZShzdGQuZXJyLCB7CiAgICBpbnNwZWN0T3B0aW9uczogeyBjb21wYWN0OiAyLCBjdXN0b21JbnNwZWN0OiB0cnVlIH0KICB9KTsKICBsZXQgcGFyYW1zID0gZ2V0T3B0KAogICAgewogICAgICB2ZXJib3NlOiBbZmFsc2UsIChhLCB2KSA9PiAodiB8IDApICsgMSwgJ3YnXSwKICAgICAgbGlzdGVuOiBbZmFsc2UsIG51bGwsICdsJ10sCiAgICAgIGNvbm5lY3Q6IFtmYWxzZSwgbnVsbCwgJ2MnXSwKICAgICAgY2xpZW50OiBbZmFsc2UsIG51bGwsICdDJ10sCiAgICAgIHNlcnZlcjogW2ZhbHNlLCBudWxsLCAnUyddLAogICAgICBkZWJ1ZzogW2ZhbHNlLCBudWxsLCAneCddLAogICAgICB0bHM6IFtmYWxzZSwgbnVsbCwgJ3QnXSwKICAgICAgJ25vLXRscyc6IFtmYWxzZSwgKHYsIHB2LCBvKSA9PiAoKG8udGxzID0gZmFsc2UpLCB0cnVlKSwgJ1QnXSwKICAgICAgYWRkcmVzczogW3RydWUsIG51bGwsICdhJ10sCiAgICAgIHBvcnQ6IFt0cnVlLCBudWxsLCAncCddLAogICAgICBxdWlldDogW2ZhbHNlLCBudWxsLCAncSddLAogICAgICAnc3NsLWNlcnQnOiBbdHJ1ZSwgbnVsbF0sCiAgICAgICdzc2wtcHJpdmF0ZS1rZXknOiBbdHJ1ZSwgbnVsbF0sCiAgICAgICdAJzogJ2FkZHJlc3MscG9ydCcKICAgIH0sCiAgICBhcmdzCiAgKTsKICBpZihwYXJhbXNbJ25vLXRscyddID09PSB0cnVlKSBwYXJhbXMudGxzID0gZmFsc2U7CiAgY29uc3QgewogICAgYWRkcmVzcyA9ICcwLjAuMC4wJywKICAgIHBvcnQgPSA4OTk5LAogICAgJ3NzbC1jZXJ0Jzogc3NsQ2VydCA9ICdsb2NhbGhvc3QuY3J0JywKICAgICdzc2wtcHJpdmF0ZS1rZXknOiBzc2xQcml2YXRlS2V5ID0gJ2xvY2FsaG9zdC5rZXknLAogICAgcXVpZXQ9ZmFsc2UsCiAgICBkZWJ1Zz1mYWxzZSwKICAgIHRscz10cnVlLAogIH0gPSBwYXJhbXM7CiAgY29uc3QgbGlzdGVuID0gcGFyYW1zLmNvbm5lY3QgJiYgIXBhcmFtcy5saXN0ZW4gPyBmYWxzZSA6IHRydWU7CiAgLy9jb25zdCBzZXJ2ZXIgPSAhcGFyYW1zLmNsaWVudCB8fCBwYXJhbXMuc2VydmVyOwogIGxldCBuYW1lID0gVXRpbC5nZXRBcmdzKClbMF07CiAgbmFtZSA9IG5hbWUKICAgIC5yZXBsYWNlKC8uKlwvLywgJycpCiAgICAucmVwbGFjZSgvLS9nLCAnICcpCiAgICAucmVwbGFjZSgvXC5bXlwvLl0qJC8sICcnKTsKCiAgbGV0IFtwcmVmaXgsIHN1ZmZpeF0gPSBuYW1lLnNwbGl0KCcgJyk7CgogIGxldCBwcm90b2NvbCA9IG5ldyBXZWFrTWFwKCk7CgogIGxldCBzb2NrZXRzID0gKGdsb2JhbFRoaXMuc29ja2V0cyA/Pz0gbmV3IFNldCgpKTsKCiAgY29uc3QgY3JlYXRlV1MgPSAoZ2xvYmFsVGhpcy5jcmVhdGVXUyA9ICh1cmwsIGNhbGxiYWNrcywgbGlzdGVuKSA9PiB7CiAgICBjb25zb2xlLmxvZygnY3JlYXRlV1MnLCB7IHVybCwgY2FsbGJhY2tzLCBsaXN0ZW4gfSk7CgogICAgc2V0TG9nKAogICAgICBxdWlldCA/IDAgOiAoZGVidWcgPyBMTExfVVNFUiA6IDApIHwgKCgoZGVidWcgPyBMTExfTk9USUNFIDogTExMX1dBUk4pIDw8IDEpIC0gMSksCiAgICAgIHF1aWV0CiAgICAgICAgPyAoKSA9PiB7fQogICAgICAgIDogKGxldmVsLCBzdHIpID0+IHsKICAgICAgICAgICAgICBpZihsZXZlbCAhPSBMTExfVVNFUiAmJiBzdHIuaW5kZXhPZignXHgxYicpID09IC0xICYmIC8obHdzX3xeXHNcK1wrfF4oXHMrW2EtejAtOV9dK1xzPXxccypbYS16MC05X10rOilccykvLnRlc3Qoc3RyKSApCiAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICBpZihkZWJ1ZykgY29uc29sZS5sb2cobG9nTGV2ZWxzW2xldmVsXS5wYWRFbmQoMTApLCBzdHIudHJpbSgpKTsKICAgICAgICAgIH0KICAgICk7CgogICAgbGV0IG9wdGlvbnM7CiAgICBsZXQgY2hpbGQsIGRiZzsKICAgIGxldCBuZXRmbiA9IFtjbGllbnQsIHNlcnZlcl1bK2xpc3Rlbl07CiAgICBjb25zb2xlLmxvZygnY3JlYXRlV1MnLCB7IHVybCwgbmV0Zm4gfSk7CiAgICByZXR1cm4gbmV0Zm4oCiAgICAgIHVybCwKICAgICAgKG9wdGlvbnMgPSB7CiAgICAgICAgdGxzOiBwYXJhbXMudGxzLAogICAgICAgIHNzbENlcnQsCiAgICAgICAgc3NsUHJpdmF0ZUtleSwKICAgICAgICBtaW1ldHlwZXM6IFsKICAgICAgICAgIFsnLnN2Z3onLCAnYXBwbGljYXRpb24vZ3ppcCddLAogICAgICAgICAgWycubWpzJywgJ2FwcGxpY2F0aW9uL2phdmFzY3JpcHQnXSwKICAgICAgICAgIFsnLmVzJywgJ2FwcGxpY2F0aW9uL2phdmFzY3JpcHQnXSwKICAgICAgICAgIFsnLndhc20nLCAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJ10sCiAgICAgICAgICBbJy5lb3QnLCAnYXBwbGljYXRpb24vdm5kLm1zLWZvbnRvYmplY3QnXSwKICAgICAgICAgIFsnLmxpYicsICdhcHBsaWNhdGlvbi94LWFyY2hpdmUnXSwKICAgICAgICAgIFsnLmJ6MicsICdhcHBsaWNhdGlvbi94LWJ6aXAyJ10sCiAgICAgICAgICBbJy5naXRpZ25vcmUnLCAndGV4dC9wbGFpbiddLAogICAgICAgICAgWycuY21ha2UnLCAndGV4dC9wbGFpbiddLAogICAgICAgICAgWycuaGV4JywgJ3RleHQvcGxhaW4nXSwKICAgICAgICAgIFsnLm1kJywgJ3RleHQvcGxhaW4nXSwKICAgICAgICAgIFsnLnBieHByb2onLCAndGV4dC9wbGFpbiddLAogICAgICAgICAgWycud2F0JywgJ3RleHQvcGxhaW4nXSwKICAgICAgICAgIFsnLmMnLCAndGV4dC94LWMnXSwKICAgICAgICAgIFsnLmgnLCAndGV4dC94LWMnXSwKICAgICAgICAgIFsnLmNwcCcsICd0ZXh0L3gtYysrJ10sCiAgICAgICAgICBbJy5ocHAnLCAndGV4dC94LWMrKyddLAogICAgICAgICAgWycuZmlsdGVycycsICd0ZXh0L3htbCddLAogICAgICAgICAgWycucGxpc3QnLCAndGV4dC94bWwnXSwKICAgICAgICAgIFsnLnN0b3J5Ym9hcmQnLCAndGV4dC94bWwnXSwKICAgICAgICAgIFsnLnZjeHByb2onLCAndGV4dC94bWwnXSwKICAgICAgICAgIFsnLmJhdCcsICd0ZXh0L3gtbXNkb3MtYmF0Y2gnXSwKICAgICAgICAgIFsnLm1tJywgJ3RleHQveC1vYmplY3RpdmUtYyddLAogICAgICAgICAgWycubScsICd0ZXh0L3gtb2JqZWN0aXZlLWMnXSwKICAgICAgICAgIFsnLnNoJywgJ3RleHQveC1zaGVsbHNjcmlwdCddCiAgICAgICAgXSwKICAgICAgICBtb3VudHM6IFtbJy8nLCAnLicsICdkZWJ1Z2dlci5odG1sJ11dLAogICAgICAgIC4uLnVybCwKCiAgICAgICAgLi4uY2FsbGJhY2tzLAogICAgICAgIG9uQ29ubmVjdCh3cywgcmVxKSB7CiAgICAgICAgICBjb25zb2xlLmxvZygnZGVidWdnZXItc2VydmVyJywgeyB3cywgcmVxIH0pOwoKICAgICAgICAgIHdzLnNlbmRNZXNzYWdlID0gZnVuY3Rpb24obXNnKSB7CiAgICAgICAgICAgIGxldCByZXQgPSB0aGlzLnNlbmQoSlNPTi5zdHJpbmdpZnkobXNnKSk7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKGB3cy5zZW5kTWVzc2FnZShgLCBtc2csIGApID0gJHtyZXR9YCk7CiAgICAgICAgICAgIHJldHVybiByZXQ7CiAgICAgICAgICB9OwoKICAgICAgICAgIHNvY2tldHMuYWRkKHdzKTsKICAgICAgICB9LAogICAgICAgIG9uQ2xvc2Uod3MpIHsKICAgICAgICAgIGNvbnNvbGUubG9nKCdvbkNsb3NlJywgd3MpOwogICAgICAgICAgZGJnLmNsb3NlKCk7CgogICAgICAgICAgcHJvdG9jb2wuZGVsZXRlKHdzKTsKICAgICAgICAgIHNvY2tldHMuZGVsZXRlKHdzKTsKICAgICAgICB9LAogICAgICAgIG9uRXJyb3Iod3MpIHsKICAgICAgICAgIGNvbnNvbGUubG9nKCdvbkVycm9yJywgd3MpOwogICAgICAgIH0sCiAgICAgICAgb25IdHRwKHJlcSwgcnNwKSB7CiAgICAgICAgICBjb25zdCB7IHVybCwgbWV0aG9kLCBoZWFkZXJzIH0gPSByZXE7CiAgICAgICAgICBjb25zb2xlLmxvZygnXHgxYlszODs1OzMzbW9uSHR0cFx4MWJbMG0gW1xuICAnLCByZXEsICcsXG4gICcsIHJzcCwgJ1xuXScpOwogICAgICAgICAgcmV0dXJuIHJzcDsKICAgICAgICB9LAogICAgICAgIG9uTWVzc2FnZSh3cywgZGF0YSkgewogICAgICAgICAgY29uc29sZS5sb2coJ29uTWVzc2FnZScsIHdzLCBkYXRhKTsKCiAgICAgICAgICBoYW5kbGVDb21tYW5kKHdzLCBkYXRhKTsKCiAgICAgICAgICBmdW5jdGlvbiBoYW5kbGVDb21tYW5kKHdzLCBkYXRhKSB7CiAgICAgICAgICAgIGxldCBvYmogPSBKU09OLnBhcnNlKGRhdGEpOwoKICAgICAgICAgICAgY29uc3QgeyBjb21tYW5kLCAuLi5yZXN0IH0gPSBvYmo7CiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdvbk1lc3NhZ2UnLCBjb21tYW5kLCByZXN0KTsKICAgICAgICAgICAgY29uc3QgewogICAgICAgICAgICAgIGNvbm5lY3QgPSB0cnVlLAogICAgICAgICAgICAgIGFkZHJlc3MgPSAnMTI3LjAuMC4xOicgKyBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAoNjU1MzUgLSAxMDI0KSkgKyAxMDI0LAogICAgICAgICAgICAgIGFyZ3MgPSBbXQogICAgICAgICAgICB9ID0gcmVzdDsKCiAgICAgICAgICAgIHN3aXRjaCAoY29tbWFuZCkgewogICAgICAgICAgICAgIGNhc2UgJ3N0YXJ0JzogewogICAgICAgICAgICAgICAgY2hpbGQgPSB3cy5jaGlsZCA9IFN0YXJ0RGVidWdnZXIoYXJncywgY29ubmVjdCwgYWRkcmVzcyk7CiAgICAgICAgICAgICAgICBjb25zdCBbLCBzdGRvdXQsIHN0ZGVycl0gPSBjaGlsZC5zdGRpbzsKICAgICAgICAgICAgICAgIGZvcihsZXQgZmQgb2YgW3N0ZG91dCwgc3RkZXJyXSkgewogICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKGBmY250bCgke2ZkfSwgRl9HRVRGTClgKTsKICAgICAgICAgICAgICAgICAgbGV0IGZsYWdzID0gZmNudGwoZmQsIEZfR0VURkwpOwogICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKGBmY250bCgke2ZkfSwgRl9TRVRGTCwgMHgke2ZsYWdzLnRvU3RyaW5nKDE2KX0pYCk7CiAgICAgICAgICAgICAgICAgIGZsYWdzIHw9IE9fTk9OQkxPQ0s7CiAgICAgICAgICAgICAgICAgIGZjbnRsKGZkLCBGX1NFVEZMLCBmbGFncyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBmb3IobGV0IGkgPSAxOyBpIDw9IDI7IGkrKykgewogICAgICAgICAgICAgICAgICBsZXQgZmQgPSBjaGlsZC5zdGRpb1tpXTsKICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ29zLnNldFJlYWRIYW5kbGVyJywgZmQpOwogICAgICAgICAgICAgICAgICBvcy5zZXRSZWFkSGFuZGxlcihmZCwgKCkgPT4gewogICAgICAgICAgICAgICAgICAgIGxldCBidWYgPSBuZXcgQXJyYXlCdWZmZXIoMTAyNCk7CiAgICAgICAgICAgICAgICAgICAgbGV0IHIgPSBvcy5yZWFkKGZkLCBidWYsIDAsIGJ1Zi5ieXRlTGVuZ3RoKTsKCiAgICAgICAgICAgICAgICAgICAgaWYociA+IDApIHsKICAgICAgICAgICAgICAgICAgICAgIGxldCBkYXRhID0gdG9TdHJpbmcoYnVmLnNsaWNlKDAsIHIpKTsKICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGByZWFkKCR7ZmR9LCBidWYpID0gJHtyfSAoJHtxdW90ZShkYXRhLCAiJyIpfSlgKTsKCiAgICAgICAgICAgICAgICAgICAgICB3cy5zZW5kTWVzc2FnZSh7CiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdvdXRwdXQnLAogICAgICAgICAgICAgICAgICAgICAgICBjaGFubmVsOiBbJ3N0ZG91dCcsICdzdGRlcnInXVtpIC0gMV0sCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEKICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnY2hpbGQnLCBjaGlsZC5waWQpOwoKICAgICAgICAgICAgICAgIG9zLnNsZWVwKDEwMDApOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBjYXNlICdjb25uZWN0JzogewogICAgICAgICAgICAgICAgZGJnID0gd3MuZGJnID0gQ29ubmVjdERlYnVnZ2VyKGFkZHJlc3MsIChkYmcsIHNvY2spID0+IHsKICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3dhaXQoKSA9JywgY2hpbGQud2FpdCgpKTsKICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2NoaWxkJywgY2hpbGQpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBvcy5zZXRXcml0ZUhhbmRsZXIoK2RiZywgYXN5bmMgKCkgPT4gewogICAgICAgICAgICAgICAgICBvcy5zZXRXcml0ZUhhbmRsZXIoK2RiZywgbnVsbCk7CiAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBjb25uZWN0ZWQgdG8gJHthZGRyZXNzfWAsIGRiZyk7CgogICAgICAgICAgICAgICAgICBzb2NrZXRzLmFkZChkYmcpOwoKICAgICAgICAgICAgICAgICAgY29uc3QgY3dkID0gcHJvY2Vzcy5jd2QoKTsKICAgICAgICAgICAgICAgICAgd3Muc2VuZE1lc3NhZ2UoewogICAgICAgICAgICAgICAgICAgIHR5cGU6ICdyZXNwb25zZScsCiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2U6IHsKICAgICAgICAgICAgICAgICAgICAgIGNvbW1hbmQ6ICdzdGFydCcsCiAgICAgICAgICAgICAgICAgICAgICBhcmdzLAogICAgICAgICAgICAgICAgICAgICAgY3dkLAogICAgICAgICAgICAgICAgICAgICAgYWRkcmVzcwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICBsZXQgbXNnOwoKICAgICAgICAgICAgICAgICAgd2hpbGUoZGJnLm9wZW4pIHsKICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgbXNnID0gYXdhaXQgRGVidWdnZXJQcm90b2NvbC5yZWFkKGRiZyk7CiAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRGVidWdnZXJQcm90b2NvbC5yZWFkKCkgPScsIGVzY2FwZShtc2cpKTsKICAgICAgICAgICAgICAgICAgICAgIGlmKHR5cGVvZiBtc2cgPT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJldDsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0ID0gd3Muc2VuZChtc2cpOwogICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgd3Muc2VuZCgke3F1b3RlKG1zZywgIiciKX0pID0gJHtyZXR9YCk7CiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnY2xvc2VkIHNvY2tldCcsIGRiZyk7CiAgICAgICAgICAgICAgICAgICAgICAgIHNvY2tldHMuZGVsZXRlKGRiZyk7CiAgICAgICAgICAgICAgICAgICAgICAgIHdzLnNlbmRNZXNzYWdlKHsKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZW5kJywKICAgICAgICAgICAgICAgICAgICAgICAgICByZWFzb246ICdjbG9zZWQnCiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0gY2F0Y2goZXJyb3IpIHsKICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgbWVzc2FnZSwgc3RhY2sgfSA9IGVycm9yOwogICAgICAgICAgICAgICAgICAgICAgd3Muc2VuZE1lc3NhZ2UoewogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZXJyb3InLAogICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogeyBtZXNzYWdlLCBzdGFjayB9CiAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgIGRiZy5jbG9zZSgpOwogICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmKG1zZyA9PT0gbnVsbCkgYnJlYWs7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2RiZycsIGRiZyk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgY2FzZSAnZmlsZSc6IHsKICAgICAgICAgICAgICAgIGNvbnN0IHsgcGF0aCB9ID0gcmVzdDsKICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBmcy5yZWFkRmlsZVN5bmMocGF0aCwgJ3V0Zi04Jyk7CiAgICAgICAgICAgICAgICAvL3dzLnNlbmQoSlNPTi5zdHJpbmdpZnkoeyB0eXBlOiAncmVzcG9uc2UnLCByZXNwb25zZTogeyBjb21tYW5kOiAnZmlsZScsIHBhdGgsIGRhdGEgfSB9KSk7CgogICAgICAgICAgICAgICAgY29uc3QgbGV4ZXIgPSBuZXcgTGV4ZXIoZGF0YSwgcGF0aCk7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnbGV4ZXInLCBsZXhlcik7CiAgICAgICAgICAgICAgICBjb25zdCBsaW5lcyA9IFtdOwoKICAgICAgICAgICAgICAgIGZvcig7OykgewogICAgICAgICAgICAgICAgICBjb25zdCB7IHBvcywgc2l6ZSB9ID0gbGV4ZXI7CiAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdsZXhlcicsIHsgcG9zLCBzaXplIH0pOwogICAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gbGV4ZXIubmV4dCgpOwogICAgICAgICAgICAgICAgICBpZihyZXN1bHQuZG9uZSkgYnJlYWs7CiAgICAgICAgICAgICAgICAgIGNvbnN0IHRva2VuID0gcmVzdWx0LnZhbHVlOwogICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygndG9rZW4nLCB7CiAgICAgICAgICAgICAgICAgICAgbGV4ZW1lOiB0b2tlbi5sZXhlbWUsCiAgICAgICAgICAgICAgICAgICAgaWQ6IHRva2VuLmlkLAogICAgICAgICAgICAgICAgICAgIGxvYzogdG9rZW4ubG9jICsgJycKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgIGNvbnN0IHsgdHlwZSwgaWQsIGxleGVtZSwgbG9jIH0gPSB0b2tlbjsKICAgICAgICAgICAgICAgICAgY29uc3QgeyBsaW5lLCBjb2x1bW4sIGZpbGUgfSA9IGxvYzsKICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygndG9rZW4nLCB7bGV4ZW1lLGlkLGxpbmV9KTsKCiAgICAgICAgICAgICAgICAgIGlmKCFsaW5lc1tsaW5lIC0gMV0pIGxpbmVzLnB1c2goW10pOwogICAgICAgICAgICAgICAgICBsZXQgYSA9IGxpbmVzW2xpbmUgLSAxXTsKICAgICAgICAgICAgICAgICAgYS5wdXNoKFtsZXhlbWUsIGlkXSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnbGluZXMnLCBsaW5lcyk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgZGVmYXVsdDogewogICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3NlbmQgdG8gZGVidWdnZXInLCBkYXRhKTsKICAgICAgICAgICAgICAgIERlYnVnZ2VyUHJvdG9jb2wuc2VuZChkYmcsIGRhdGEpOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICAvKmxldCBwID0gbmV3IERlYnVnZ2VyUHJvdG9jb2woKTsKICAgICAgICBwcm90b2NvbC5zZXQod3MsIHApOyovCiAgICAgICAgfSwKICAgICAgICBvbkZkKGZkLCByZCwgd3IpIHsKICAgICAgICAgIC8vY29uc29sZS5sb2coJ29uRmQnLCB7IGZkLCByZCwgd3IgfSk7CiAgICAgICAgICBvcy5zZXRSZWFkSGFuZGxlcihmZCwgcmQpOwogICAgICAgICAgb3Muc2V0V3JpdGVIYW5kbGVyKGZkLCB3cik7CiAgICAgICAgfSwKICAgICAgICAuLi4odXJsICYmIHVybC5ob3N0ID8gdXJsIDoge30pCiAgICAgIH0pCiAgICApOwogIH0pOwogIGNvbnNvbGUubG9nKCdYWCcpOwoKICAvKiAgZGVmaW5lKGdsb2JhbFRoaXMsIHsKICAgIGdldCBjb25uZWN0aW9ucygpIHsKICAgICAgcmV0dXJuIFsuLi5nbG9iYWxUaGlzLnNvY2tldHNdOwogICAgfSwKICAgIGdldCBzb2NrbGlzdCgpIHsKICAgICAgcmV0dXJuIFsuLi5nbG9iYWxUaGlzLnNvY2tldHNdOwogICAgfSwKICAgIG5ldDogeyBzZXRMb2csIExMTF9VU0VSLCBMTExfTk9USUNFLCBMTExfV0FSTiwgY2xpZW50LCBzZXJ2ZXIgfSwKICAgIFN0YXJ0RGVidWdnZXIsCiAgICBDb25uZWN0RGVidWdnZXIsCiAgICBEZWJ1Z2dlclByb3RvY29sLAogICAgcmVwbDogU3RhcnRSRVBMKCksCiAgICBkYWVtb24oKSB7CiAgICAgIHJlcGwuc3RvcCgpOwogICAgICBzdGQucHV0cygnXG5kZXRhY2hpbmcuLi4nKTsKICAgICAgZGFlbW9uKDEsIDApOwogICAgICBzdGQucHV0cygnIFBJRCAnICsgZ2V0cGlkKCkgKyAnXG4nKTsKICAgIH0KICB9KTsKKi8KICBkZWxldGUgZ2xvYmFsVGhpcy5ERUJVRzsKCiAgZ2xvYmFsVGhpcy53cyA9IGNyZWF0ZVdTKGB3c3M6Ly8ke2FkZHJlc3N9OjkwMDAvd3NgLCB7fSwgdHJ1ZSk7CiAgLy8gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShnbG9iYWxUaGlzLCAnREVCVUcnLCB7IGdldDogRGVidWdGbGFncyB9KTsKCiAgLyogaWYobGlzdGVuKSBjbGkubGlzdGVuKGNyZWF0ZVdTLCBvcyk7CiAgZWxzZSBjbGkuY29ubmVjdChjcmVhdGVXUywgb3MpOwoqLwogIGZ1bmN0aW9uIHF1aXQod2h5KSB7CiAgICBjb25zb2xlLmxvZyhgcXVpdCgnJHt3aHl9JylgKTsKCiAgICBsZXQgY2ZnID0geyBpbnNwZWN0T3B0aW9uczogY29uc29sZS5vcHRpb25zIH07CiAgICBXcml0ZUpTT04oYC4ke2Jhc2V9LWNvbmZpZ2AsIGNmZyk7CiAgICAvLyByZXBsLmNsZWFudXAod2h5KTsKICB9Cn0KCnRyeSB7CiAgbWFpbiguLi5zY3JpcHRBcmdzLnNsaWNlKDEpKTsKfSBjYXRjaChlcnJvcikgewogIGNvbnNvbGUubG9nKGBGQUlMOiAke2Vycm9yPy5tZXNzYWdlID8/IGVycm9yfVxuJHtlcnJvcj8uc3RhY2t9YCk7Cn0gZmluYWxseSB7CiAgLy9jb25zb2xlLmxvZygnU1VDQ0VTUycpOwp9CgAAAAAAAAAASDIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoRAAAAAAAACkEAAAAAAAAAAAAAAAAPC/"
				],
				[
					855,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABIMgAAaW1wb3J0ICogYXMgc3RkIGZyb20gJ3N0ZCc7CmltcG9ydCAqIGFzIG9zIGZyb20gJ29zJzsKaW1wb3J0ICogYXMgZGVlcCBmcm9tICcuL2xpYi9kZWVwLmpzJzsKaW1wb3J0ICogYXMgcGF0aCBmcm9tICcuL2xpYi9wYXRoLmpzJzsKaW1wb3J0IFV0aWwgZnJvbSAnLi9saWIvdXRpbC5qcyc7CmltcG9ydCB7IGRhZW1vbiwgYXRleGl0LCBnZXRwaWQsIHRvQXJyYXlCdWZmZXIsIHRvU3RyaW5nLCBlc2NhcGUsIHF1b3RlLCBkZWZpbmUsIGV4dGVuZEFycmF5LCBnZXRPcHQgfSBmcm9tICd1dGlsJzsKaW1wb3J0IHsgQ29uc29sZSB9IGZyb20gJy4vcXVpY2tqcy9xanMtbW9kdWxlcy9saWIvY29uc29sZS5qcyc7CmltcG9ydCBSRVBMIGZyb20gJy4vcXVpY2tqcy9xanMtbW9kdWxlcy9saWIvcmVwbC5qcyc7CmltcG9ydCBpbnNwZWN0IGZyb20gJy4vbGliL29iamVjdEluc3BlY3QuanMnOwppbXBvcnQgKiBhcyBUZXJtaW5hbCBmcm9tICcuL3Rlcm1pbmFsLmpzJzsKaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnOwppbXBvcnQgeyBzZXRMb2csIGxvZ0xldmVscywgTExMX1VTRVIsIExMTF9OT1RJQ0UsIExMTF9XQVJOLCBjbGllbnQsIHNlcnZlciB9IGZyb20gJ25ldCc7CmltcG9ydCB7IERlYnVnZ2VyUHJvdG9jb2wgfSBmcm9tICcuL2RlYnVnZ2VycHJvdG9jb2wuanMnOwppbXBvcnQgeyBTdGFydERlYnVnZ2VyLCBDb25uZWN0RGVidWdnZXIgfSBmcm9tICcuL2RlYnVnZ2VyLmpzJzsKaW1wb3J0IHsgZmNudGwsIEZfR0VURkwsIEZfU0VURkwsIE9fTk9OQkxPQ0sgfSBmcm9tICcuL3F1aWNranMvcWpzLWZmaS9saWIvZmNudGwuanMnOwppbXBvcnQgeyBJZkRlYnVnLCBMb2dJZkRlYnVnLCBSZWFkRmlsZSwgTG9hZEhpc3RvcnksIFJlYWRKU09OLCBSZWFkWE1MLCBNYXBGaWxlLCBXcml0ZUZpbGUsIFdyaXRlSlNPTiwgV3JpdGVYTUwsIFJlYWRCSlNPTiwgV3JpdGVCSlNPTiwgRGlySXRlcmF0b3IsIFJlY3Vyc2l2ZURpckl0ZXJhdG9yLCBSZWFkRGlyUmVjdXJzaXZlLCBGaWx0ZXIsIEZpbHRlckltYWdlcywgU29ydEZpbGVzLCBTdGF0RmlsZXMsIFJlYWRGZCwgRmRSZWFkZXIsIENvcHlUb0NsaXBib2FyZCwgUmVhZENhbGxiYWNrLCBMb2dDYWxsLCBTcGF3biwgRmV0Y2hVUkwgfSBmcm9tICcuL2lvLWhlbHBlcnMuanMnOwoKZXh0ZW5kQXJyYXkoQXJyYXkucHJvdG90eXBlKTsKCmNvbnN0IHNjcmlwdE5hbWUgPSAoYXJnID0gc2NyaXB0QXJnc1swXSkgPT4gcGF0aC5iYXNlbmFtZShhcmcsIHBhdGguZXh0bmFtZShhcmcpKTsKCmF0ZXhpdCgoKSA9PiB7CiAgY29uc29sZS5sb2coJ2F0ZXhpdCcsIGF0ZXhpdCk7CiAgbGV0IHN0YWNrID0gbmV3IEVycm9yKCcnKS5zdGFjazsKICBjb25zb2xlLmxvZygnc3RhY2s6Jywgc3RhY2spOwp9KTsKCmZ1bmN0aW9uIFN0YXJ0UkVQTChwcmVmaXggPSBzY3JpcHROYW1lKCksIHN1ZmZpeCA9ICcnKSB7CiAgbGV0IHJlcGwgPSBuZXcgUkVQTChgXHgxYlszODs1OzE2NW0ke3ByZWZpeH0gXHgxYlszODs1OzM5bSR7c3VmZml4fVx4MWJbMG1gLCBmYWxzZSk7CiAgcmVwbC5oaXN0b3J5TG9hZChudWxsLCBmcyk7CiAgcmVwbC5pbnNwZWN0T3B0aW9ucyA9IHsgLi4uY29uc29sZS5vcHRpb25zLCBjb21wYWN0OiAyIH07CiAgbGV0IHsgbG9nIH0gPSBjb25zb2xlOwoKICByZXBsLmRpcmVjdGl2ZXMuaSA9IFsKICAgIG5hbWUgPT4KICAgICAgaW1wb3J0KG5hbWUpCiAgICAgICAgLnRoZW4obSA9PiAoZ2xvYmFsVGhpc1tuYW1lLnJlcGxhY2UoLyguKlwvfFwuW15cLy5dKyQpL2csICcnKV0gPSBtKSkKICAgICAgICAuY2F0Y2goKCkgPT4gcmVwbC5wcmludFN0YXR1cyhgRVJST1I6IG1vZHVsZSAnJHtuYW1lfScgbm90IGZvdW5kYCkpLAogICAgJ2ltcG9ydCBhIG1vZHVsZScKICBdOwogIHJlcGwuZGlyZWN0aXZlcy5kID0gWygpID0+IGdsb2JhbFRoaXMuZGFlbW9uKCksICdkZXRhY2gnXTsKICBjb25zb2xlLmxvZyA9IHJlcGwucHJpbnRGdW5jdGlvbigoLi4uYXJncykgPT4gewogICAgbG9nKCdMT0cnLCBjb25zb2xlLmNvbmZpZyhyZXBsLmluc3BlY3RPcHRpb25zKSwgLi4uYXJncyk7CiAgfSk7CiAgcmVwbC5ydW4oKTsKICByZXR1cm4gcmVwbDsKfQoKZnVuY3Rpb24gbWFpbiguLi5hcmdzKSB7CiAgY29uc3QgYmFzZSA9IHNjcmlwdE5hbWUoKS5yZXBsYWNlKC9cLlthLXpdKiQvLCAnJyk7CgogIGNvbnN0IGNvbmZpZyA9IFJlYWRKU09OKGAuJHtiYXNlfS1jb25maWdgKSA/PyB7fTsKICBnbG9iYWxUaGlzLmNvbnNvbGUgPSBuZXcgQ29uc29sZShzdGQuZXJyLCB7CiAgICBpbnNwZWN0T3B0aW9uczogeyBjb21wYWN0OiAyLCBjdXN0b21JbnNwZWN0OiB0cnVlIH0KICB9KTsKICBsZXQgcGFyYW1zID0gZ2V0T3B0KAogICAgewogICAgICB2ZXJib3NlOiBbZmFsc2UsIChhLCB2KSA9PiAodiB8IDApICsgMSwgJ3YnXSwKICAgICAgbGlzdGVuOiBbZmFsc2UsIG51bGwsICdsJ10sCiAgICAgIGNvbm5lY3Q6IFtmYWxzZSwgbnVsbCwgJ2MnXSwKICAgICAgY2xpZW50OiBbZmFsc2UsIG51bGwsICdDJ10sCiAgICAgIHNlcnZlcjogW2ZhbHNlLCBudWxsLCAnUyddLAogICAgICBkZWJ1ZzogW2ZhbHNlLCBudWxsLCAneCddLAogICAgICB0bHM6IFtmYWxzZSwgbnVsbCwgJ3QnXSwKICAgICAgJ25vLXRscyc6IFtmYWxzZSwgKHYsIHB2LCBvKSA9PiAoKG8udGxzID0gZmFsc2UpLCB0cnVlKSwgJ1QnXSwKICAgICAgYWRkcmVzczogW3RydWUsIG51bGwsICdhJ10sCiAgICAgIHBvcnQ6IFt0cnVlLCBudWxsLCAncCddLAogICAgICBxdWlldDogW2ZhbHNlLCBudWxsLCAncSddLAogICAgICAnc3NsLWNlcnQnOiBbdHJ1ZSwgbnVsbF0sCiAgICAgICdzc2wtcHJpdmF0ZS1rZXknOiBbdHJ1ZSwgbnVsbF0sCiAgICAgICdAJzogJ2FkZHJlc3MscG9ydCcKICAgIH0sCiAgICBhcmdzCiAgKTsKICBpZihwYXJhbXNbJ25vLXRscyddID09PSB0cnVlKSBwYXJhbXMudGxzID0gZmFsc2U7CiAgY29uc3QgewogICAgYWRkcmVzcyA9ICcwLjAuMC4wJywKICAgIHBvcnQgPSA4OTk5LAogICAgJ3NzbC1jZXJ0Jzogc3NsQ2VydCA9ICdsb2NhbGhvc3QuY3J0JywKICAgICdzc2wtcHJpdmF0ZS1rZXknOiBzc2xQcml2YXRlS2V5ID0gJ2xvY2FsaG9zdC5rZXknLAogICAgcXVpZXQgPSBmYWxzZSwKICAgIGRlYnVnID0gZmFsc2UsCiAgICB0bHMgPSB0cnVlCiAgfSA9IHBhcmFtczsKICBjb25zdCBsaXN0ZW4gPSBwYXJhbXMuY29ubmVjdCAmJiAhcGFyYW1zLmxpc3RlbiA/IGZhbHNlIDogdHJ1ZTsKICAvL2NvbnN0IHNlcnZlciA9ICFwYXJhbXMuY2xpZW50IHx8IHBhcmFtcy5zZXJ2ZXI7CiAgbGV0IG5hbWUgPSBVdGlsLmdldEFyZ3MoKVswXTsKICBuYW1lID0gbmFtZQogICAgLnJlcGxhY2UoLy4qXC8vLCAnJykKICAgIC5yZXBsYWNlKC8tL2csICcgJykKICAgIC5yZXBsYWNlKC9cLlteXC8uXSokLywgJycpOwoKICBsZXQgW3ByZWZpeCwgc3VmZml4XSA9IG5hbWUuc3BsaXQoJyAnKTsKCiAgbGV0IHByb3RvY29sID0gbmV3IFdlYWtNYXAoKTsKCiAgbGV0IHNvY2tldHMgPSAoZ2xvYmFsVGhpcy5zb2NrZXRzID8/PSBuZXcgU2V0KCkpOwoKICBjb25zdCBjcmVhdGVXUyA9IChnbG9iYWxUaGlzLmNyZWF0ZVdTID0gKHVybCwgY2FsbGJhY2tzLCBsaXN0ZW4pID0+IHsKICAgIGNvbnNvbGUubG9nKCdjcmVhdGVXUycsIHsgdXJsLCBjYWxsYmFja3MsIGxpc3RlbiB9KTsKCiAgICBzZXRMb2coCiAgICAgIHF1aWV0ID8gMCA6IChkZWJ1ZyA/IExMTF9VU0VSIDogMCkgfCAoKChkZWJ1ZyA/IExMTF9OT1RJQ0UgOiBMTExfV0FSTikgPDwgMSkgLSAxKSwKICAgICAgcXVpZXQKICAgICAgICA/ICgpID0+IHt9CiAgICAgICAgOiAobGV2ZWwsIHN0cikgPT4gewogICAgICAgICAgICBpZigKICAgICAgICAgICAgICBsZXZlbCAhPSBMTExfVVNFUiAmJgogICAgICAgICAgICAgIHN0ci5pbmRleE9mKCdceDFiJykgPT0gLTEgJiYKICAgICAgICAgICAgICAvKGx3c198XlxzXCtcK3xeKFxzK1thLXowLTlfXStccz18XHMqW2EtejAtOV9dKzopXHMpLy50ZXN0KHN0cikKICAgICAgICAgICAgKQogICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgaWYoZGVidWcpIGNvbnNvbGUubG9nKGxvZ0xldmVsc1tsZXZlbF0ucGFkRW5kKDEwKSwgc3RyLnRyaW0oKSk7CiAgICAgICAgICB9CiAgICApOwoKICAgIGxldCBvcHRpb25zOwogICAgbGV0IGNoaWxkLCBkYmc7CiAgICBsZXQgbmV0Zm4gPSBbY2xpZW50LCBzZXJ2ZXJdWytsaXN0ZW5dOwogICAgY29uc29sZS5sb2coJ2NyZWF0ZVdTJywgeyB1cmwsIG5ldGZuIH0pOwogICAgcmV0dXJuIG5ldGZuKAogICAgICB1cmwsCiAgICAgIChvcHRpb25zID0gewogICAgICAgIHRsczogcGFyYW1zLnRscywKICAgICAgICBzc2xDZXJ0LAogICAgICAgIHNzbFByaXZhdGVLZXksCiAgICAgICAgbWltZXR5cGVzOiBbCiAgICAgICAgICBbJy5zdmd6JywgJ2FwcGxpY2F0aW9uL2d6aXAnXSwKICAgICAgICAgIFsnLm1qcycsICdhcHBsaWNhdGlvbi9qYXZhc2NyaXB0J10sCiAgICAgICAgICBbJy5lcycsICdhcHBsaWNhdGlvbi9qYXZhc2NyaXB0J10sCiAgICAgICAgICBbJy53YXNtJywgJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbSddLAogICAgICAgICAgWycuZW90JywgJ2FwcGxpY2F0aW9uL3ZuZC5tcy1mb250b2JqZWN0J10sCiAgICAgICAgICBbJy5saWInLCAnYXBwbGljYXRpb24veC1hcmNoaXZlJ10sCiAgICAgICAgICBbJy5iejInLCAnYXBwbGljYXRpb24veC1iemlwMiddLAogICAgICAgICAgWycuZ2l0aWdub3JlJywgJ3RleHQvcGxhaW4nXSwKICAgICAgICAgIFsnLmNtYWtlJywgJ3RleHQvcGxhaW4nXSwKICAgICAgICAgIFsnLmhleCcsICd0ZXh0L3BsYWluJ10sCiAgICAgICAgICBbJy5tZCcsICd0ZXh0L3BsYWluJ10sCiAgICAgICAgICBbJy5wYnhwcm9qJywgJ3RleHQvcGxhaW4nXSwKICAgICAgICAgIFsnLndhdCcsICd0ZXh0L3BsYWluJ10sCiAgICAgICAgICBbJy5jJywgJ3RleHQveC1jJ10sCiAgICAgICAgICBbJy5oJywgJ3RleHQveC1jJ10sCiAgICAgICAgICBbJy5jcHAnLCAndGV4dC94LWMrKyddLAogICAgICAgICAgWycuaHBwJywgJ3RleHQveC1jKysnXSwKICAgICAgICAgIFsnLmZpbHRlcnMnLCAndGV4dC94bWwnXSwKICAgICAgICAgIFsnLnBsaXN0JywgJ3RleHQveG1sJ10sCiAgICAgICAgICBbJy5zdG9yeWJvYXJkJywgJ3RleHQveG1sJ10sCiAgICAgICAgICBbJy52Y3hwcm9qJywgJ3RleHQveG1sJ10sCiAgICAgICAgICBbJy5iYXQnLCAndGV4dC94LW1zZG9zLWJhdGNoJ10sCiAgICAgICAgICBbJy5tbScsICd0ZXh0L3gtb2JqZWN0aXZlLWMnXSwKICAgICAgICAgIFsnLm0nLCAndGV4dC94LW9iamVjdGl2ZS1jJ10sCiAgICAgICAgICBbJy5zaCcsICd0ZXh0L3gtc2hlbGxzY3JpcHQnXQogICAgICAgIF0sCiAgICAgICAgbW91bnRzOiBbWycvJywgJy4nLCAnZGVidWdnZXIuaHRtbCddXSwKICAgICAgICAuLi51cmwsCgogICAgICAgIC4uLmNhbGxiYWNrcywKICAgICAgICBvbkNvbm5lY3Qod3MsIHJlcSkgewogICAgICAgICAgY29uc29sZS5sb2coJ2RlYnVnZ2VyLXNlcnZlcicsIHsgd3MsIHJlcSB9KTsKCiAgICAgICAgICB3cy5zZW5kTWVzc2FnZSA9IGZ1bmN0aW9uKG1zZykgewogICAgICAgICAgICBsZXQgcmV0ID0gdGhpcy5zZW5kKEpTT04uc3RyaW5naWZ5KG1zZykpOwogICAgICAgICAgICBjb25zb2xlLmxvZyhgd3Muc2VuZE1lc3NhZ2UoYCwgbXNnLCBgKSA9ICR7cmV0fWApOwogICAgICAgICAgICByZXR1cm4gcmV0OwogICAgICAgICAgfTsKCiAgICAgICAgICBzb2NrZXRzLmFkZCh3cyk7CiAgICAgICAgfSwKICAgICAgICBvbkNsb3NlKHdzKSB7CiAgICAgICAgICBjb25zb2xlLmxvZygnb25DbG9zZScsIHdzKTsKICAgICAgICAgIGRiZy5jbG9zZSgpOwoKICAgICAgICAgIHByb3RvY29sLmRlbGV0ZSh3cyk7CiAgICAgICAgICBzb2NrZXRzLmRlbGV0ZSh3cyk7CiAgICAgICAgfSwKICAgICAgICBvbkVycm9yKHdzKSB7CiAgICAgICAgICBjb25zb2xlLmxvZygnb25FcnJvcicsIHdzKTsKICAgICAgICB9LAogICAgICAgIG9uSHR0cChyZXEsIHJzcCkgewogICAgICAgICAgY29uc3QgeyB1cmwsIG1ldGhvZCwgaGVhZGVycyB9ID0gcmVxOwogICAgICAgICAgY29uc29sZS5sb2coJ1x4MWJbMzg7NTszM21vbkh0dHBceDFiWzBtIFtcbiAgJywgcmVxLCAnLFxuICAnLCByc3AsICdcbl0nKTsKICAgICAgICAgIHJldHVybiByc3A7CiAgICAgICAgfSwKICAgICAgICBvbk1lc3NhZ2Uod3MsIGRhdGEpIHsKICAgICAgICAgIGNvbnNvbGUubG9nKCdvbk1lc3NhZ2UnLCB3cywgZGF0YSk7CgogICAgICAgICAgaGFuZGxlQ29tbWFuZCh3cywgZGF0YSk7CgogICAgICAgICAgZnVuY3Rpb24gaGFuZGxlQ29tbWFuZCh3cywgZGF0YSkgewogICAgICAgICAgICBsZXQgb2JqID0gSlNPTi5wYXJzZShkYXRhKTsKCiAgICAgICAgICAgIGNvbnN0IHsgY29tbWFuZCwgLi4ucmVzdCB9ID0gb2JqOwogICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnb25NZXNzYWdlJywgY29tbWFuZCwgcmVzdCk7CiAgICAgICAgICAgIGNvbnN0IHsKICAgICAgICAgICAgICBjb25uZWN0ID0gdHJ1ZSwKICAgICAgICAgICAgICBhZGRyZXNzID0gJzEyNy4wLjAuMTonICsgTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogKDY1NTM1IC0gMTAyNCkpICsgMTAyNCwKICAgICAgICAgICAgICBhcmdzID0gW10KICAgICAgICAgICAgfSA9IHJlc3Q7CgogICAgICAgICAgICBzd2l0Y2ggKGNvbW1hbmQpIHsKICAgICAgICAgICAgICBjYXNlICdzdGFydCc6IHsKICAgICAgICAgICAgICAgIGNoaWxkID0gd3MuY2hpbGQgPSBTdGFydERlYnVnZ2VyKGFyZ3MsIGNvbm5lY3QsIGFkZHJlc3MpOwogICAgICAgICAgICAgICAgY29uc3QgWywgc3Rkb3V0LCBzdGRlcnJdID0gY2hpbGQuc3RkaW87CiAgICAgICAgICAgICAgICBmb3IobGV0IGZkIG9mIFtzdGRvdXQsIHN0ZGVycl0pIHsKICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhgZmNudGwoJHtmZH0sIEZfR0VURkwpYCk7CiAgICAgICAgICAgICAgICAgIGxldCBmbGFncyA9IGZjbnRsKGZkLCBGX0dFVEZMKTsKICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhgZmNudGwoJHtmZH0sIEZfU0VURkwsIDB4JHtmbGFncy50b1N0cmluZygxNil9KWApOwogICAgICAgICAgICAgICAgICBmbGFncyB8PSBPX05PTkJMT0NLOwogICAgICAgICAgICAgICAgICBmY250bChmZCwgRl9TRVRGTCwgZmxhZ3MpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZm9yKGxldCBpID0gMTsgaSA8PSAyOyBpKyspIHsKICAgICAgICAgICAgICAgICAgbGV0IGZkID0gY2hpbGQuc3RkaW9baV07CiAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdvcy5zZXRSZWFkSGFuZGxlcicsIGZkKTsKICAgICAgICAgICAgICAgICAgb3Muc2V0UmVhZEhhbmRsZXIoZmQsICgpID0+IHsKICAgICAgICAgICAgICAgICAgICBsZXQgYnVmID0gbmV3IEFycmF5QnVmZmVyKDEwMjQpOwogICAgICAgICAgICAgICAgICAgIGxldCByID0gb3MucmVhZChmZCwgYnVmLCAwLCBidWYuYnl0ZUxlbmd0aCk7CgogICAgICAgICAgICAgICAgICAgIGlmKHIgPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgICBsZXQgZGF0YSA9IHRvU3RyaW5nKGJ1Zi5zbGljZSgwLCByKSk7CiAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgcmVhZCgke2ZkfSwgYnVmKSA9ICR7cn0gKCR7cXVvdGUoZGF0YSwgIiciKX0pYCk7CgogICAgICAgICAgICAgICAgICAgICAgd3Muc2VuZE1lc3NhZ2UoewogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnb3V0cHV0JywKICAgICAgICAgICAgICAgICAgICAgICAgY2hhbm5lbDogWydzdGRvdXQnLCAnc3RkZXJyJ11baSAtIDFdLAogICAgICAgICAgICAgICAgICAgICAgICBkYXRhCiAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2NoaWxkJywgY2hpbGQucGlkKTsKCiAgICAgICAgICAgICAgICBvcy5zbGVlcCgxMDAwKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgY2FzZSAnY29ubmVjdCc6IHsKICAgICAgICAgICAgICAgIGRiZyA9IHdzLmRiZyA9IENvbm5lY3REZWJ1Z2dlcihhZGRyZXNzLCAoZGJnLCBzb2NrKSA9PiB7CiAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCd3YWl0KCkgPScsIGNoaWxkLndhaXQoKSk7CiAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdjaGlsZCcsIGNoaWxkKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgb3Muc2V0V3JpdGVIYW5kbGVyKCtkYmcsIGFzeW5jICgpID0+IHsKICAgICAgICAgICAgICAgICAgb3Muc2V0V3JpdGVIYW5kbGVyKCtkYmcsIG51bGwpOwogICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgY29ubmVjdGVkIHRvICR7YWRkcmVzc31gLCBkYmcpOwoKICAgICAgICAgICAgICAgICAgc29ja2V0cy5hZGQoZGJnKTsKCiAgICAgICAgICAgICAgICAgIGNvbnN0IGN3ZCA9IHByb2Nlc3MuY3dkKCk7CiAgICAgICAgICAgICAgICAgIHdzLnNlbmRNZXNzYWdlKHsKICAgICAgICAgICAgICAgICAgICB0eXBlOiAncmVzcG9uc2UnLAogICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlOiB7CiAgICAgICAgICAgICAgICAgICAgICBjb21tYW5kOiAnc3RhcnQnLAogICAgICAgICAgICAgICAgICAgICAgYXJncywKICAgICAgICAgICAgICAgICAgICAgIGN3ZCwKICAgICAgICAgICAgICAgICAgICAgIGFkZHJlc3MKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgbGV0IG1zZzsKCiAgICAgICAgICAgICAgICAgIHdoaWxlKGRiZy5vcGVuKSB7CiAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgIG1zZyA9IGF3YWl0IERlYnVnZ2VyUHJvdG9jb2wucmVhZChkYmcpOwogICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0RlYnVnZ2VyUHJvdG9jb2wucmVhZCgpID0nLCBlc2NhcGUobXNnKSk7CiAgICAgICAgICAgICAgICAgICAgICBpZih0eXBlb2YgbXNnID09ICdzdHJpbmcnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZXQ7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldCA9IHdzLnNlbmQobXNnKTsKICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYHdzLnNlbmQoJHtxdW90ZShtc2csICInIil9KSA9ICR7cmV0fWApOwogICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2Nsb3NlZCBzb2NrZXQnLCBkYmcpOwogICAgICAgICAgICAgICAgICAgICAgICBzb2NrZXRzLmRlbGV0ZShkYmcpOwogICAgICAgICAgICAgICAgICAgICAgICB3cy5zZW5kTWVzc2FnZSh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2VuZCcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhc29uOiAnY2xvc2VkJwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9IGNhdGNoKGVycm9yKSB7CiAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7IG1lc3NhZ2UsIHN0YWNrIH0gPSBlcnJvcjsKICAgICAgICAgICAgICAgICAgICAgIHdzLnNlbmRNZXNzYWdlKHsKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Vycm9yJywKICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IHsgbWVzc2FnZSwgc3RhY2sgfQogICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICBkYmcuY2xvc2UoKTsKICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZihtc2cgPT09IG51bGwpIGJyZWFrOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdkYmcnLCBkYmcpOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGNhc2UgJ2ZpbGUnOiB7CiAgICAgICAgICAgICAgICBjb25zdCB7IHBhdGggfSA9IHJlc3Q7CiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gZnMucmVhZEZpbGVTeW5jKHBhdGgsICd1dGYtOCcpOwogICAgICAgICAgICAgICAgLy93cy5zZW5kKEpTT04uc3RyaW5naWZ5KHsgdHlwZTogJ3Jlc3BvbnNlJywgcmVzcG9uc2U6IHsgY29tbWFuZDogJ2ZpbGUnLCBwYXRoLCBkYXRhIH0gfSkpOwoKICAgICAgICAgICAgICAgIGNvbnN0IGxleGVyID0gbmV3IExleGVyKGRhdGEsIHBhdGgpOwogICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2xleGVyJywgbGV4ZXIpOwogICAgICAgICAgICAgICAgY29uc3QgbGluZXMgPSBbXTsKCiAgICAgICAgICAgICAgICBmb3IoOzspIHsKICAgICAgICAgICAgICAgICAgY29uc3QgeyBwb3MsIHNpemUgfSA9IGxleGVyOwogICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnbGV4ZXInLCB7IHBvcywgc2l6ZSB9KTsKICAgICAgICAgICAgICAgICAgbGV0IHJlc3VsdCA9IGxleGVyLm5leHQoKTsKICAgICAgICAgICAgICAgICAgaWYocmVzdWx0LmRvbmUpIGJyZWFrOwogICAgICAgICAgICAgICAgICBjb25zdCB0b2tlbiA9IHJlc3VsdC52YWx1ZTsKICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3Rva2VuJywgewogICAgICAgICAgICAgICAgICAgIGxleGVtZTogdG9rZW4ubGV4ZW1lLAogICAgICAgICAgICAgICAgICAgIGlkOiB0b2tlbi5pZCwKICAgICAgICAgICAgICAgICAgICBsb2M6IHRva2VuLmxvYyArICcnCiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICBjb25zdCB7IHR5cGUsIGlkLCBsZXhlbWUsIGxvYyB9ID0gdG9rZW47CiAgICAgICAgICAgICAgICAgIGNvbnN0IHsgbGluZSwgY29sdW1uLCBmaWxlIH0gPSBsb2M7CiAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ3Rva2VuJywge2xleGVtZSxpZCxsaW5lfSk7CgogICAgICAgICAgICAgICAgICBpZighbGluZXNbbGluZSAtIDFdKSBsaW5lcy5wdXNoKFtdKTsKICAgICAgICAgICAgICAgICAgbGV0IGEgPSBsaW5lc1tsaW5lIC0gMV07CiAgICAgICAgICAgICAgICAgIGEucHVzaChbbGV4ZW1lLCBpZF0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2xpbmVzJywgbGluZXMpOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGRlZmF1bHQ6IHsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdzZW5kIHRvIGRlYnVnZ2VyJywgZGF0YSk7CiAgICAgICAgICAgICAgICBEZWJ1Z2dlclByb3RvY29sLnNlbmQoZGJnLCBkYXRhKTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgLypsZXQgcCA9IG5ldyBEZWJ1Z2dlclByb3RvY29sKCk7CiAgICAgICAgcHJvdG9jb2wuc2V0KHdzLCBwKTsqLwogICAgICAgIH0sCiAgICAgICAgb25GZChmZCwgcmQsIHdyKSB7CiAgICAgICAgICAvL2NvbnNvbGUubG9nKCdvbkZkJywgeyBmZCwgcmQsIHdyIH0pOwogICAgICAgICAgb3Muc2V0UmVhZEhhbmRsZXIoZmQsIHJkKTsKICAgICAgICAgIG9zLnNldFdyaXRlSGFuZGxlcihmZCwgd3IpOwogICAgICAgIH0sCiAgICAgICAgLi4uKHVybCAmJiB1cmwuaG9zdCA/IHVybCA6IHt9KQogICAgICB9KQogICAgKTsKICB9KTsKICBjb25zb2xlLmxvZygnWFgnKTsKCiAgLyogIGRlZmluZShnbG9iYWxUaGlzLCB7CiAgICBnZXQgY29ubmVjdGlvbnMoKSB7CiAgICAgIHJldHVybiBbLi4uZ2xvYmFsVGhpcy5zb2NrZXRzXTsKICAgIH0sCiAgICBnZXQgc29ja2xpc3QoKSB7CiAgICAgIHJldHVybiBbLi4uZ2xvYmFsVGhpcy5zb2NrZXRzXTsKICAgIH0sCiAgICBuZXQ6IHsgc2V0TG9nLCBMTExfVVNFUiwgTExMX05PVElDRSwgTExMX1dBUk4sIGNsaWVudCwgc2VydmVyIH0sCiAgICBTdGFydERlYnVnZ2VyLAogICAgQ29ubmVjdERlYnVnZ2VyLAogICAgRGVidWdnZXJQcm90b2NvbCwKICAgIHJlcGw6IFN0YXJ0UkVQTCgpLAogICAgZGFlbW9uKCkgewogICAgICByZXBsLnN0b3AoKTsKICAgICAgc3RkLnB1dHMoJ1xuZGV0YWNoaW5nLi4uJyk7CiAgICAgIGRhZW1vbigxLCAwKTsKICAgICAgc3RkLnB1dHMoJyBQSUQgJyArIGdldHBpZCgpICsgJ1xuJyk7CiAgICB9CiAgfSk7CiovCiAgZGVsZXRlIGdsb2JhbFRoaXMuREVCVUc7CgogIGdsb2JhbFRoaXMud3MgPSBjcmVhdGVXUyhgd3NzOi8vJHthZGRyZXNzfTo5MDAwL3dzYCwge30sIHRydWUpOwogIC8vICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZ2xvYmFsVGhpcywgJ0RFQlVHJywgeyBnZXQ6IERlYnVnRmxhZ3MgfSk7CgogIC8qIGlmKGxpc3RlbikgY2xpLmxpc3RlbihjcmVhdGVXUywgb3MpOwogIGVsc2UgY2xpLmNvbm5lY3QoY3JlYXRlV1MsIG9zKTsKKi8KICBmdW5jdGlvbiBxdWl0KHdoeSkgewogICAgY29uc29sZS5sb2coYHF1aXQoJyR7d2h5fScpYCk7CgogICAgbGV0IGNmZyA9IHsgaW5zcGVjdE9wdGlvbnM6IGNvbnNvbGUub3B0aW9ucyB9OwogICAgV3JpdGVKU09OKGAuJHtiYXNlfS1jb25maWdgLCBjZmcpOwogICAgLy8gcmVwbC5jbGVhbnVwKHdoeSk7CiAgfQp9Cgp0cnkgewogIG1haW4oLi4uc2NyaXB0QXJncy5zbGljZSgxKSk7Cn0gY2F0Y2goZXJyb3IpIHsKICBjb25zb2xlLmxvZyhgRkFJTDogJHtlcnJvcj8ubWVzc2FnZSA/PyBlcnJvcn1cbiR7ZXJyb3I/LnN0YWNrfWApOwp9IGZpbmFsbHkgewogIC8vY29uc29sZS5sb2coJ1NVQ0NFU1MnKTsKfQoAAAAAAAAAAEgyAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoRAAAAAAAACkEAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "clang-ast.js",
			"settings":
			{
				"buffer_size": 74267,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					35,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAdIEAAAAAAAB7gQAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"edit ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"shfo",
				"Pretty Shell: Format"
			],
			[
				"format",
				"Formatter: Beautify With Prettier"
			],
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"install ",
				"Package Control: Install Package"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"prett",
				"JsPrettier: Format Code"
			],
			[
				"prettier",
				"JsPrettier: Format Code"
			],
			[
				"isntall",
				"Package Control: Install Package"
			],
			[
				"fo",
				"Format CSS: Expanded"
			],
			[
				"forma",
				"Format CSS: Expanded"
			],
			[
				"css",
				"Format CSS: Expanded"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"tidy",
				"Tidy CSS"
			],
			[
				"edut ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"build",
				"Build With: prettier ${file_path}"
			],
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"",
				"Bookmarks: Select Previous"
			],
			[
				"schem",
				"Schemr: Random scheme"
			],
			[
				"extra",
				"Extract Sublime Package: Extract all packages"
			],
			[
				"Package Control: ",
				"Package Control: List Packages"
			],
			[
				"extrac",
				"Extract Sublime Package: Extract all packages"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"packa",
				"Install Package Control"
			],
			[
				"edit",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"schemeed",
				"SchemeEditor: Edit Scheme (file picker)"
			],
			[
				"scheme",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"repo",
				"Package Control: Remove Repository"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"upgra",
				"Package Control: Upgrade Package"
			],
			[
				"adv",
				"Package Control: Advanced Install Package"
			],
			[
				"ad",
				"Package Control: Advanced Install Package"
			],
			[
				"adva",
				"Package Control: Advanced Install Package"
			],
			[
				"edi",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"remove pac",
				"Package Control: Remove Package"
			],
			[
				"outl",
				"Browse Mode: Outline (Right)"
			],
			[
				"debugger",
				"Debugger: Add or Select Configuration"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 442.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/draw-utils.js",
		"/home/roman/Projects/plot-cv/lib/midi/MIDIControlEvent.js",
		"/home/roman/Projects/plot-cv/lib/midi/MIDIStream.js",
		"/home/roman/Projects/plot-cv/io-helpers.js",
		"/home/roman/Projects/plot-cv/clang-ast.js",
		"/home/roman/Projects/plot-cv/clang-list.js",
		"/home/roman/Projects/plot-cv/lib/midi/MIDIEvent.js",
		"/home/roman/Projects/plot-cv/lib/midi.js",
		"/home/roman/Projects/plot-cv/midi-client.js",
		"/home/roman/Projects/plot-cv/dom.es",
		"/home/roman/Projects/plot-cv/lib/color/convert.js",
		"/home/roman/Projects/plot-cv/test-ecmascript2.js",
		"/home/roman/Projects/plot-cv/lib/util.js",
		"/home/roman/Projects/plot-cv/debugger.js",
		"/home/roman/Projects/plot-cv/debugger-client.js",
		"/home/roman/Projects/plot-cv/debuggerprotocol.js",
		"/home/roman/Projects/plot-cv/test-debuggerprotocol.js",
		"/home/roman/Projects/plot-cv/debugger-server.js",
		"/home/roman/Projects/plot-cv/midi-tcp.js",
		"/home/roman/Projects/plot-cv/test-midi.js",
		"/home/roman/Projects/plot-cv/param.js",
		"/home/roman/Projects/plot-cv/test-video.js",
		"/home/roman/Projects/plot-cv/test-image.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/js/cvVideo.js",
		"/home/roman/Schreibtisch/Reichelt - PIC Prozessoren 2.js",
		"/home/roman/Projects/plot-cv/lib/midi/MIDISysExEvent.js",
		"/home/roman/Projects/plot-cv/lib/midi/MIDIInstrument.js",
		"/home/roman/Projects/plot-cv/lib/midi/MIDIFile.js",
		"/home/roman/Projects/plot-cv/lib/midi/MIDIMetaEvent.js",
		"/home/roman/Projects/plot-cv/lib/midi/MIDITrack.js",
		"/home/roman/Projects/plot-cv/lib/misc.js",
		"/home/roman/Projects/plot-cv/lib/midi/MIDI.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/js/cvHighGUI.js",
		"/home/roman/Projects/plot-cv/glfw.sh",
		"/home/roman/Projects/plot-cv/qjs-opencv/js/cvPipeline.js",
		"/home/roman/Projects/plot-cv/test-nanovg.js",
		"/home/roman/Projects/plot-cv/midi.html",
		"/home/roman/Projects/plot-cv/lib/grammars/css3.g4",
		"/home/roman/Projects/plot-cv/lib/grammars/xpath.g4",
		"/home/roman/Projects/plot-cv/lib/spawn.js",
		"/home/roman/Projects/plot-cv/trkl.es",
		"/home/roman/Projects/plot-cv/deep.es",
		"/home/roman/Projects/plot-cv/preact.es",
		"/home/roman/Projects/plot-cv/preact.js",
		"/home/roman/Projects/plot-cv/main.js",
		"/home/roman/Projects/plot-cv/discogs.js",
		"/home/roman/Projects/plot-cv/lscache.es",
		"/home/roman/Projects/plot-cv/lib/lscache.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-nanovg/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-nanovg/nanovg-qjs.h",
		"/home/roman/Projects/plot-cv/tmp/discogs/8369022-104",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/console.js",
		"/home/roman/Projects/plot-cv/check-discogs.js",
		"/home/roman/Projects/plot-cv/libs.js",
		"/home/roman/Projects/plot-cv/tmp/discogs/8369022-102",
		"/home/roman/Projects/plot-cv/discogs.es",
		"/home/roman/Projects/plot-cv/date-helpers.js",
		"/home/roman/Projects/plot-cv/io-helpers.js.orig",
		"/home/roman/Projects/plot-cv/test-imread.js",
		"/home/roman/Projects/plot-cv/childProcess.js",
		"/home/roman/Projects/plot-cv/package.json",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-libc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/child-process.c",
		"/home/roman/Projects/plot-cv/config.js",
		"/home/roman/Projects/plot-cv/make-bitmap.js",
		"/home/roman/Projects/plot-cv/diagram.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/jsbindings.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_line_iterator.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/a.out",
		"/home/roman/Projects/plot-cv/test-autoplacer.js",
		"/home/roman/Projects/plot-cv/lib/geom/point.js",
		"/home/roman/Projects/plot-cv/test-cv.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/events.js",
		"/home/roman/Projects/plot-cv/lib/geom/size.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/size.js",
		"/home/roman/Projects/plot-cv/test-rpc.js",
		"/home/roman/Projects/plot-cv/server.js",
		"/home/roman/Projects/plot-cv/ws-worker.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fs.js",
		"/home/roman/Projects/plot-cv/test-worker.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/workerScript.js",
		"/home/roman/Projects/plot-cv/videoSource.js",
		"/home/roman/Projects/plot-cv/lib/eagle/document.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_array.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_clahe.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_cv.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_draw.cpp",
		"/home/roman/Projects/plot-cv/test-diagram.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_rect.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_cv.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_umat.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_mat.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_mat.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_contour.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_point.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_point_iterator.cpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/util.hpp",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_contour.hpp",
		"/home/roman/Projects/plot-cv/lib/eagle/node.js",
		"/home/roman/Sources/opencv/modules/videoio/src/cap_ffmpeg_impl.hpp",
		"/home/roman/Sources/opencv/modules/videoio/src/cap_ffmpeg.cpp",
		"/home/roman/Projects/ffmpeg-audio/orange-ffmpeg/ffmpeg-libs/static/ffmpeg/share/ffmpeg/examples/demuxing_decoding.c",
		"/home/roman/Projects/plot-cv/opencv-video.c",
		"/home/roman/Projects/plot-cv/simplest_ffmpeg_audio_decoder.cpp",
		"/home/roman/Projects/plot-cv/lib/filesystem.js",
		"/home/roman/Projects/plot-cv/fetch-post-prices.js",
		"/home/roman/Projects/plot-cv/lib/ecmascript/printer.js",
		"/home/roman/Projects/plot-cv/jack-session-client.c",
		"/home/roman/Projects/plot-cv/plot-cv.sublime-project",
		"/home/roman/Projects/plot-cv/lib/mics.js",
		"/home/roman/Projects/plot-cv/create-tamper.js",
		"/home/roman/Projects/plot-cv/eagle-shell.js",
		"/home/roman/Projects/plot-cv/lib/ecmascript/parser2.js",
		"/home/roman/Projects/plot-cv/time-helpers.js",
		"/home/roman/Projects/plot-cv/lib/eagle/element.js",
		"/home/roman/Projects/plot-cv/imagePipeline.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/repl.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_point_iterator.hpp",
		"/home/roman/Projects/plot-cv/test-opencv.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/tests/test_freetype.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/cmake/JSBindings.cmake",
		"/home/roman/Projects/plot-cv/qjs-opencv/cmake/Functions.cmake",
		"/home/roman/Projects/plot-cv/qjs-opencv/js_point.cpp",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/qjsm.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-server-http.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-server.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet.c"
	],
	"find":
	{
		"height": 45.0
	},
	"find_in_files":
	{
		"height": 185.0,
		"where_history":
		[
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,,-*/libwebsockets/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/build-*,-*/txiki*/*,-*/qnode*/*,-*/opencv/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,,-*/libwebsockets/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/build-*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,,-*/libwebsockets/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/build-*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/build-*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,-*/indexex*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/indexex*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/indexex/*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnoed*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/qjs-cache*/*,-*/txiki*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,*/quickjs-2*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs/*,-*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,*.cmake,-*/node_modules/*,-*/quickjs/*,-*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs/*,-*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp",
			"/home/roman/Projects/plot-cv,*.js,*.cpp,*.hpp,-*/node_modules/*,-*/quickjs/*,-*/acorn/*",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs/*,-*/acorn/*",
			"/home/roman/Projects/plot-cv,/home/roman/Projects/plot-cv/lib,*.js,-*/node_modules/*,-*/quickjs/*,-*/acorn/*",
			"/home/roman/Projects/plot-cv,/home/roman/Projects/plot-cv/lib,*.js,-*/node_modules/*,-*/quickjs/*",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs/*",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*",
			"/home/roman/Projects/plot-cv,*.js",
			"/home/roman/Projects/plot-cv/quickjs,*.c,*.h",
			"/home/roman/Projects/plot-cv/src,*.cpp,*.hpp",
			"/home/roman/Projects/plot-cv/quickjs,*.c,*.h"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"bindMethods =",
			"Compile\\(",
			"AstDump",
			"WriteFile",
			"WriteJSON",
			"params\\.",
			"LLL_USER",
			"setLog",
			"scriptName",
			"WriteJSON",
			"pushUnique",
			"pushUnique =",
			"Util\\.[^ ]*rototype",
			"getMethodNames =",
			"getMethodNames",
			"bindMethods",
			"Compile\\(",
			"CommandLine",
			"globalThis\\.fs",
			"fs",
			"Util\\.",
			"Util.assertEqual",
			"Util\\.",
			"lazyProperties",
			"lazyProperty",
			"result",
			"Compile\\(",
			"ProcessFile",
			"Compile\\(",
			"Compile(",
			"Compile\\(",
			"SpawnCompiler",
			"SourceDependencies",
			"AstDump\\(",
			"Compile\\(",
			"ParseECM",
			"ProcessFile",
			"Loading cac",
			"globalThis\\.",
			"show =",
			"cfg.inspec",
			"options",
			"new REPL",
			"ProcessFile",
			"Util\\.(getOpt|memoize|lazyProperty)",
			"Util\\.",
			"Util.exit",
			"Util\\.",
			"globalThis",
			"ProcessFile",
			"ParseEC",
			"Util\\.define",
			"ParseECMAScript",
			"ProcessFile",
			"sources",
			"'@'",
			"files",
			"files ",
			"JSON",
			"JSON\\.",
			"JSON",
			"Write",
			"Loading cached",
			"loading cached",
			"cached",
			"Util\\.",
			"Compile\\(",
			"Compile",
			"WriteJSON",
			"WriteBJSON",
			"WriteB*JSON",
			"WriteBJS",
			"Writ",
			"outfile",
			"ast.*json",
			"toJSON",
			"JSON",
			"WriteJSON",
			"JSON",
			"getOpt",
			"setLog",
			"client",
			"server",
			"sockets",
			"main",
			"createWS",
			"server",
			"REPL",
			"setLog",
			"onFd",
			"debug.read",
			"^\\s*console",
			"'t",
			"this.show",
			"show",
			"show =",
			"new REPL",
			"Util\\.",
			"Util.isObject",
			"Util\\.",
			"std\\.",
			"new REPL",
			"getFunc",
			"REPL done",
			"SUCCESS'",
			"'SpawnCompiler'",
			"outputLog",
			"REPL",
			"onError",
			"daemon",
			"quit",
			"^(im|ex)port",
			"import",
			"ParamNav",
			"controlNumb",
			"TCP",
			"delta",
			"byteLength",
			"out of bound",
			"out of",
			"MIDIEvent",
			"GLFW",
			"COLOR_BGR2RGBA",
			"new Window",
			"opts\\.",
			"opts",
			"$",
			"main"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"",
			"assert",
			"\\1",
			"std.exit",
			"g",
			"define",
			"isObject",
			"",
			"window",
			"",
			"options",
			" }\\)",
			"{},",
			"Position",
			"export function",
			"\\1//console",
			"globalThis.",
			"child_process",
			"globalThis.process\\.",
			" ",
			"\\1",
			"static ",
			"\\1 ",
			"static ",
			"\\1",
			"MIDI",
			"export",
			"export { default as \\1 } ",
			"MIDI",
			"",
			"const ",
			"0x",
			"",
			"ordersGetList",
			"getCacheValue",
			"tlsv",
			"\\1",
			"http",
			"fs.",
			",\\n    '-H', ",
			"Size.getOther(",
			"matrix",
			" cv::CV_",
			"CV_RGB(0, 0, 0)",
			"",
			"point",
			"\\\\D",
			"\\\\d",
			"\\.deref",
			"is_alphanumeric_char",
			"is_whitespace_char",
			"length",
			"{ const",
			"{ return",
			"const  {flags}=this;\\nreturn flags",
			"defines",
			"",
			"fs.\\1Sync",
			"define",
			",",
			"file",
			"target_compile_definitions",
			"msg",
			"PmDeviceInfo",
			"export function",
			"libportmidi",
			"\\1//\\2",
			"text",
			"\\1",
			"export function",
			"export &",
			"fs.",
			"array",
			"fs",
			"black",
			"white",
			"input.",
			"'save'",
			"globalThis.",
			"fsPromises",
			"\\n\\n",
			"}\\n",
			"vector",
			"std::vector<",
			"log.info",
			"waitFor",
			"'",
			"'\\\\x\\1'",
			"'\\x\\1'",
			"200",
			"120",
			"out += ",
			"",
			"mask",
			"mas",
			"",
			"['.",
			"currentFile",
			"/* prettier-ignore */ import",
			"ShowSource",
			"/* prettier-ignore */ Object.assign(globalThis",
			"component",
			"",
			"token.id",
			"loc",
			"lexeme",
			"body",
			"toArrayBuffer",
			"toString",
			"waitRead",
			"dbg",
			"toString",
			"this.#events",
			"%2i",
			"-9s",
			"proc",
			"fs.",
			"jsm_module_record",
			"stepMode",
			"this.",
			"= require('\\1')",
			"const ",
			"fs",
			"ReadImport",
			"1000",
			"1000l",
			"SockAddr",
			"writeFileSync("
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": "/home/roman/Projects/plot-cv/.project",
							"function_name_status_row": -1,
							"outline_rename_mode": false,
							"symkeys":
							[
							],
							"symlist":
							[
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1646698653.14,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/home/roman/.config/sublime-text/Packages/User/Themes/ES6 Next.tmTheme",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 382002,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1646701727.35,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 2,
					"file": "ast-shell.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 37376,
						"regions":
						{
						},
						"selection":
						[
							[
								31431,
								31439
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 1025,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1646702065.85,
							"tabs_extra_last_activated_sheet_index": 0,
							"tabs_extra_moving":
							[
								2,
								1
							],
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 21742.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "lib/util.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 186474,
						"regions":
						{
						},
						"selection":
						[
							[
								81554,
								81554
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 2834,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1646703203.65,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 59080.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": ".project",
					"selected": true,
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 1748,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/XML/XML.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1647049114.07,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "clang-list.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9299,
						"regions":
						{
						},
						"selection":
						[
							[
								830,
								830
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 13,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1646702022.32,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "debugger-server.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12872,
						"regions":
						{
						},
						"selection":
						[
							[
								4257,
								4260
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 83,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1646701924.01,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2086.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "clang-ast.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 74267,
						"regions":
						{
						},
						"selection":
						[
							[
								33140,
								33147
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 1151,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1646702024.92,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 24136.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 33.0
	},
	"input":
	{
		"height": 55.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.846927086596,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 139.0
	},
	"output.Debugger: Console":
	{
		"height": 0.0
	},
	"output.Debugger: Protocol":
	{
		"height": 0.0
	},
	"output.Protocol":
	{
		"height": 0.0
	},
	"output.Protocol(139700989367200)":
	{
		"height": 0.0
	},
	"output.Protocol(139713492737424)":
	{
		"height": 0.0
	},
	"output.Protocol(140020110213280)":
	{
		"height": 0.0
	},
	"output.Protocol(140125752054832)":
	{
		"height": 0.0
	},
	"output.Protocol(140156680251040)":
	{
		"height": 0.0
	},
	"output.Protocol(140190209186352)":
	{
		"height": 0.0
	},
	"output.Protocol(140264240155856)":
	{
		"height": 0.0
	},
	"output.Protocol(140329702042448)":
	{
		"height": 0.0
	},
	"output.Protocol(140405754929104)":
	{
		"height": 0.0
	},
	"output.Protocol(140490298408144)":
	{
		"height": 0.0
	},
	"output.Protocol(140502873410144)":
	{
		"height": 0.0
	},
	"output.Protocol(140569677500528)":
	{
		"height": 0.0
	},
	"output.Protocol(140614610778000)":
	{
		"height": 0.0
	},
	"output.Protocol(140627243657680)":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 259.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "make",
	"project": "plot-cv.sublime-project",
	"replace":
	{
		"height": 82.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"util.js",
				"lib/util.js"
			],
			[
				"clang-list",
				"clang-list.js"
			],
			[
				"ast-shell",
				"ast-shell.js"
			],
			[
				"clang-as",
				"clang-ast.js"
			],
			[
				"debugger-ser",
				"debugger-server.js"
			],
			[
				"lib/util.js",
				"lib/util.js"
			],
			[
				"debuggerpro",
				"debuggerprotocol.js"
			],
			[
				"convert.",
				"lib/color/convert.js"
			],
			[
				"ast",
				"ast-shell.js"
			],
			[
				"debugger-",
				"debugger-server.js"
			],
			[
				"param",
				"param.js"
			],
			[
				"midi",
				"midi-client.js"
			],
			[
				"MIDIEV",
				"lib/midi/MIDIEvent.js"
			],
			[
				"test-midi",
				"test-midi.js"
			],
			[
				"draw",
				"draw-utils.js"
			],
			[
				"draw-u",
				"draw-utils.js"
			],
			[
				"cvPip",
				"qjs-opencv/js/cvPipeline.js"
			],
			[
				"test-vid",
				"test-video.js"
			],
			[
				"test-nan",
				"test-nanovg.js"
			],
			[
				"glfw.s",
				"glfw.sh"
			],
			[
				"draw-ut",
				"draw-utils.js"
			],
			[
				"cvHigh",
				"qjs-opencv/js/cvHighGUI.js"
			],
			[
				"util",
				"lib/util.js"
			],
			[
				"test-im",
				"test-image.js"
			],
			[
				"io-he",
				"io-helpers.js"
			],
			[
				"misc.js",
				"lib/misc.js"
			],
			[
				"test-mid",
				"test-midi.js"
			],
			[
				"midi.js",
				"lib/midi.js"
			],
			[
				"midi-clie",
				"midi-client.js"
			],
			[
				"midi.html",
				"midi.html"
			],
			[
				"css",
				"lib/grammars/css3.g4"
			],
			[
				"xpath",
				"lib/grammars/xpath.g4"
			],
			[
				"console",
				"quickjs/qjs-modules/lib/console.js"
			],
			[
				"libs.js",
				"libs.js"
			],
			[
				"lscac",
				"lib/lscache.js"
			],
			[
				"main.js",
				"main.js"
			],
			[
				"disco",
				"discogs.js"
			],
			[
				"spawn.",
				"lib/spawn.js"
			],
			[
				"helpers",
				"io-helpers.js.orig"
			],
			[
				"io-help",
				"io-helpers.js"
			],
			[
				"child-",
				"quickjs/qjs-modules/child-process.c"
			],
			[
				"package.j",
				"package.json"
			],
			[
				"config.js",
				"config.js"
			],
			[
				"test-imrea",
				"test-imread.js"
			],
			[
				"cvHi",
				"qjs-opencv/js/cvHighGUI.js"
			],
			[
				"cvpipe",
				"qjs-opencv/js/cvPipeline.js"
			],
			[
				"events.js",
				"quickjs/qjs-modules/lib/events.js"
			],
			[
				"test-vi",
				"test-video.js"
			],
			[
				"test-cv",
				"test-cv.js"
			],
			[
				"point.js",
				"lib/geom/point.js"
			],
			[
				"size.js",
				"lib/geom/size.js"
			],
			[
				"test-rpc",
				"test-rpc.js"
			],
			[
				"server",
				"server.js"
			],
			[
				"test-wor",
				"test-worker.js"
			],
			[
				"ws-work",
				"ws-worker.js"
			],
			[
				"fs.js",
				"quickjs/qjs-modules/lib/fs.js"
			],
			[
				"cvVi",
				"qjs-opencv/js/cvVideo.js"
			],
			[
				"ideoSou",
				"videoSource.js"
			],
			[
				"console.js",
				"quickjs/qjs-modules/lib/console.js"
			],
			[
				"documen",
				"lib/eagle/document.js"
			],
			[
				"cvPipe",
				"qjs-opencv/js/cvPipeline.js"
			],
			[
				"test-video",
				"test-video.js"
			],
			[
				"dia",
				"diagram.js"
			],
			[
				"diagra",
				"diagram.js"
			],
			[
				"diag",
				"diagram.js"
			],
			[
				"opencv-vi",
				"opencv-video.c"
			],
			[
				"opencv-vide",
				"opencv-video.c"
			],
			[
				"simplest",
				"simplest_ffmpeg_audio_decoder.cpp"
			],
			[
				"util.",
				"lib/util.js"
			],
			[
				"js",
				"jack-session-client.c"
			],
			[
				"package.js",
				"package.json"
			],
			[
				"printer",
				"lib/ecmascript/printer.js"
			],
			[
				"parser2.",
				"lib/ecmascript/parser2.js"
			],
			[
				"eagle-she",
				"eagle-shell.js"
			],
			[
				"diagram",
				"diagram.js"
			],
			[
				"point.hpp",
				"qjs-opencv/js_point.hpp"
			],
			[
				"jsbind",
				"qjs-opencv/jsbindings.hpp"
			],
			[
				"test_free",
				"qjs-opencv/tests/test_freetype.js"
			],
			[
				"repl.js",
				"quickjs/qjs-modules/lib/repl.js"
			],
			[
				"help",
				"time-helpers.js"
			],
			[
				"elemen",
				"lib/eagle/element.js"
			],
			[
				"server.",
				"server.js"
			],
			[
				"image",
				"imagePipeline.js"
			],
			[
				"imagePip",
				"imagePipeline.js"
			],
			[
				"test-image",
				"test-image.js"
			],
			[
				"qjsm.c",
				"quickjs/qjs-modules/qjsm.c"
			],
			[
				"minnet-http",
				"quickjs/qjs-net/minnet-server-http.c"
			],
			[
				"minnet-server",
				"quickjs/qjs-net/minnet-server.c"
			],
			[
				"minnet.c",
				"quickjs/qjs-net/minnet.c"
			],
			[
				"time-help",
				"time-helpers.js"
			],
			[
				"io-helpers",
				"io-helpers.js"
			],
			[
				"test-bjson",
				"test-bjson.js"
			],
			[
				"deep.js",
				"lib/deep.js"
			],
			[
				"commands.j",
				"commands.js"
			],
			[
				"render",
				"lib/eagle/renderer.js"
			],
			[
				"main.j",
				"main.js"
			],
			[
				"diff.js",
				"lib/json/diff.js"
			],
			[
				"server.js",
				"server.js"
			],
			[
				"repl",
				"quickjs/qjs-modules/lib/repl.js"
			],
			[
				"circuit",
				"lib/eda/circuitjs.js"
			],
			[
				"ast-she",
				"ast-shell.js"
			],
			[
				"-shell.js",
				"cv-shell.js"
			],
			[
				"list.h",
				"quickjs/list.h"
			],
			[
				"queue.h",
				"quickjs/qjs-modules/queue.h"
			],
			[
				"queue.c",
				"quickjs/qjs-modules/queue.c"
			],
			[
				"char-utils",
				"quickjs/qjs-modules/char-utils.h"
			],
			[
				"quickjs-misc.",
				"quickjs/qjs-modules/quickjs-misc.c"
			],
			[
				"predicate.c",
				"quickjs/qjs-modules/predicate.c"
			],
			[
				"debugger-tran",
				"quickjs/quickjs-debugger-transport-win.c"
			],
			[
				"quickjs-debugg",
				"quickjs/quickjs-debugger-transport-unix.c"
			],
			[
				"defs",
				"quickjs/defs.cmake"
			],
			[
				"quickjs/CMakeLi",
				"quickjs/CMakeLists.txt"
			],
			[
				"quickjs.c",
				"quickjs/quickjs.c"
			],
			[
				"quickjs-pred",
				"quickjs/qjs-modules/quickjs-predicate.c"
			],
			[
				"package",
				"package.json"
			],
			[
				"xpath.js",
				"lib/dom/xpath.js"
			],
			[
				"compileComm",
				"lib/build/compileCommand.js"
			],
			[
				"compile_com",
				"compile_commands.js"
			],
			[
				"quickjs-pat",
				"quickjs/qjs-modules/quickjs-path.c"
			],
			[
				"test-child",
				"test-childprocess.js"
			],
			[
				"test-ini",
				"test-ini.js"
			],
			[
				"fn.js",
				"lib/parse/fn.js"
			],
			[
				"test-css",
				"test-css3.js"
			],
			[
				"list-ex",
				"list-exports.js"
			],
			[
				"grammar-css3",
				"grammar-css3.js"
			],
			[
				"css3",
				"lib/grammars/css3.g4"
			],
			[
				"grammar.js",
				"lib/parse/grammar.js"
			],
			[
				"test-parse",
				"test-parse.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/quickjs/modules/modules.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 309.0,
		"last_filter": "N",
		"selected_items":
		[
			[
				"N",
				"nb"
			],
			[
				"",
				"$"
			]
		],
		"width": 592.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 286.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
