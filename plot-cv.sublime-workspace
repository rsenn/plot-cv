{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Argu",
				"ArgumentType"
			],
			[
				"define",
				"defineProperty"
			],
			[
				"exists",
				"existsAndNotEmpty"
			],
			[
				"RETURN_",
				"RETURN_VALUE_PATH"
			],
			[
				"constr",
				"constructor"
			],
			[
				"RE",
				"deep.RETURN_VALUE_PATH"
			],
			[
				"CXXRec",
				"CXXRecordDecl"
			],
			[
				"CXXReco",
				"CXXRecordDecl"
			],
			[
				"des",
				"desugared"
			],
			[
				"con",
				"constructor"
			],
			[
				"jsm_start_",
				"jsm_start_interactive3"
			],
			[
				"by",
				"byobRequest"
			],
			[
				"Read",
				"ReadableStreamBYOBRequest"
			],
			[
				"js_by",
				"js_readable_byob_request"
			],
			[
				"BY",
				"BYOB_REQUEST_METHOD_RESPONDWITHNEWVIEW"
			],
			[
				"JS_",
				"JS_NewObjectProtoClass"
			],
			[
				"JS_Get",
				"JS_GetPropertyUint32"
			],
			[
				"is_",
				"is_exception"
			],
			[
				"JS_T",
				"JS_ThrowInternalError"
			],
			[
				"Repe",
				"RepeaterItem"
			],
			[
				"WRITER_PROP",
				"WRITER_PROP_READY"
			],
			[
				"JS_Throw",
				"JS_ThrowInternalError"
			],
			[
				"to",
				"toStringTag"
			],
			[
				"Der",
				"DereferenceError"
			],
			[
				"Dere",
				"DereferenceError"
			],
			[
				"Is",
				"IsPunctuator"
			],
			[
				"js_magic_fun",
				"js_magic_function"
			],
			[
				"js_queue_iter",
				"js_queue_iterator_class_id"
			],
			[
				"js_queue_itreat",
				"js_queue_iterator_class_id"
			],
			[
				"js_",
				"js_archive_mode"
			],
			[
				"JS_GetP",
				"JS_GetPropertyStr"
			],
			[
				"JS_Set",
				"JS_SetPropertyUint32"
			],
			[
				"ENTRY_IS",
				"ENTRY_ISDATAENCRYPTED"
			],
			[
				"js_archivema",
				"js_archivematch_class_id"
			],
			[
				"JS_NewObjec",
				"JS_NewObjectProtoClass"
			],
			[
				"Module",
				"ModuleLoaderContext"
			],
			[
				"JS_Th",
				"JS_ThrowTypeError"
			],
			[
				"ModuleLo",
				"ModuleLoaderContext"
			],
			[
				"escape",
				"escape_noquote_tab"
			],
			[
				"max",
				"max_array_length"
			],
			[
				"tty",
				"tty_set_raw"
			],
			[
				"getOwnPrope",
				"getOwnPropertyDescriptor"
			],
			[
				"PATH_SKIP",
				"PATH_SKIP_SEPARATOR"
			],
			[
				"ListIterat",
				"ListIteratorKind"
			],
			[
				"_f",
				"_wfindnext64"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"JS_PROP_",
				"JS_PROP_CONFIGURABLE"
			],
			[
				"JS_GetPr",
				"JS_GetPropertyStr"
			],
			[
				"js_sock",
				"js_sockaddr_data"
			],
			[
				"SET_",
				"SET_CONSOLE_MODE"
			],
			[
				"ERA",
				"ERASE_IN_LINE"
			],
			[
				"js_misc_set",
				"js_misc_settextattr"
			],
			[
				"dw",
				"dwCursorPosition"
			],
			[
				"prop",
				"property_recursion_top"
			],
			[
				"property_enumer",
				"property_enumeration_index"
			],
			[
				"INT",
				"INSPECT_INT32T_INRANGE"
			],
			[
				"js_inspect_print_arra",
				"js_inspect_print_arraybuffer2"
			],
			[
				"is_a",
				"is_arraybuffer"
			],
			[
				"fmt",
				"fmt_ulong"
			],
			[
				"inspec",
				"inspect_newline2"
			],
			[
				"property_",
				"property_recursion_top"
			],
			[
				"js_inspec",
				"js_inspect_print_value"
			],
			[
				"JS_Atom",
				"JS_AtomToValue"
			],
			[
				"mysql_op",
				"mysql_optionsv"
			],
			[
				"MY",
				"MYSQLConnectParameters"
			],
			[
				"js_connect",
				"js_connectparams_class_id"
			],
			[
				"js_conn",
				"js_connectparams_from"
			],
			[
				"MYSQL",
				"MYSQLConnectParameters"
			],
			[
				"mysql_get",
				"mysql_get_socket"
			],
			[
				"async",
				"asyncclosure_resolve"
			],
			[
				"res",
				"resolving_funcs"
			],
			[
				"HAVE_LIB",
				"HAVE_LIBMARIADBCLIENT"
			],
			[
				"js_is_null",
				"js_is_null_or_undefined"
			],
			[
				"FileDesc",
				"FileDescriptorHandlers"
			],
			[
				"js_generat",
				"js_generator_prototype"
			],
			[
				"tab_",
				"tab_atom_len"
			],
			[
				"proper",
				"property_recursion_pop"
			],
			[
				"property_rec",
				"property_recursion_top"
			],
			[
				"property",
				"property_recursion_top"
			],
			[
				"RETURN",
				"deep.RETURN_VALUE_PATH"
			],
			[
				"LIBS",
				"LIBSERIALPORT_LIBRARY_DIR"
			],
			[
				"js_misc_atexit_",
				"js_misc_atexit_called"
			],
			[
				"getO",
				"getOwnPropertyNames(...)"
			],
			[
				"Res",
				"ResolveAlias"
			],
			[
				"relati",
				"relativePath"
			],
			[
				"js_syscla",
				"js_syscallerror_defines"
			],
			[
				"get",
				"getOwnPropertyDescriptor(...)"
			],
			[
				"resol",
				"resolving_funcs"
			],
			[
				"set",
				"set_handler"
			],
			[
				"Async",
				"AsyncSocketClosure"
			],
			[
				"Asy",
				"AsyncSocketClosure"
			],
			[
				"js_socket_async_",
				"js_socket_async_resolver"
			],
			[
				"js_socket_asyc",
				"js_socket_async_closure_free"
			],
			[
				"JS_EV",
				"JS_EVAL_FLAG_COMPILE_ONLY"
			],
			[
				"check_",
				"check_function_and_include"
			],
			[
				"PGCon",
				"PGConnectParameters"
			],
			[
				"PGC",
				"PGConnectParameters"
			],
			[
				"connect",
				"connectparams_parse"
			],
			[
				"Nam",
				"FieldNameFunc"
			],
			[
				"PG",
				"PGSQLResult"
			],
			[
				"js",
				"js_pgresult_class_id"
			],
			[
				"PGSQ",
				"PGSQResultIterator"
			],
			[
				"js_misc_getopa",
				"js_misc_getopaque"
			],
			[
				"js_pgrequ",
				"js_pgresult_opaque"
			],
			[
				"PGRES_PO",
				"PGRES_POLLING_READING"
			],
			[
				"PROP_PRO",
				"PROP_PROTOCOL_VERSION"
			],
			[
				"B",
				"BOOL"
			],
			[
				"Asyn",
				"AsyncIterator"
			],
			[
				"ret",
				"return_flag"
			],
			[
				"ImportID",
				"ImportIdMap"
			],
			[
				"Num",
				"NumericRange"
			],
			[
				"dbuf_",
				"dbuf_init2"
			],
			[
				"getOwn",
				"getOwnPropertyNames(...)"
			],
			[
				"has_",
				"has_dot_or_slash"
			],
			[
				"My",
				"MySQLResult"
			],
			[
				"JS_ToCS",
				"JS_ToCStringLen"
			],
			[
				"CF",
				"CFunctionClosureRecord"
			],
			[
				"extendA",
				"extendAsyncGenerator"
			],
			[
				"JS_SetPr",
				"JS_SetPropertyStr"
			],
			[
				"MYSQL_TYPE_NEW",
				"MYSQL_TYPE_NEWDECIMAL"
			],
			[
				"JS_CF",
				"JS_CFUNC_MAGIC_DEF"
			],
			[
				"js_mysqlresult_fun",
				"js_mysqlresult_functions"
			],
			[
				"JS_ToCSt",
				"JS_ToCStringLen"
			],
			[
				"js_mysql_f",
				"js_mysql_functions"
			],
			[
				"MARIA",
				"MARIADBCLIENT_LIBRARY"
			],
			[
				"depe",
				"dependencyMap"
			],
			[
				"depden",
				"dependencyTree"
			],
			[
				"add_",
				"add_dependencies"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix",
				"name": "ùåÜ Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					3,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/fire.js",
						"symkeys":
						[
							[
								1758,
								1764
							],
							[
								1791,
								1807
							],
							[
								1956,
								1966
							],
							[
								1988,
								1998
							],
							[
								2002,
								2013
							],
							[
								2026,
								2034
							],
							[
								2317,
								2338
							],
							[
								2437,
								2458
							],
							[
								2492,
								2520
							],
							[
								2565,
								2590
							],
							[
								2735,
								2759
							],
							[
								3219,
								3243
							],
							[
								3544,
								3571
							],
							[
								3908,
								3912
							],
							[
								3923,
								3929
							],
							[
								3947,
								3952
							],
							[
								3979,
								3983
							],
							[
								4187,
								4195
							],
							[
								4219,
								4232
							],
							[
								4255,
								4267
							],
							[
								4304,
								4310
							],
							[
								4869,
								4875
							],
							[
								5232,
								5258
							],
							[
								5400,
								5433
							],
							[
								5536,
								5573
							],
							[
								5796,
								5836
							],
							[
								6016,
								6050
							],
							[
								6146,
								6172
							],
							[
								6403,
								6440
							],
							[
								6509,
								6513
							],
							[
								6566,
								6570
							],
							[
								6619,
								6632
							],
							[
								6740,
								6773
							],
							[
								6785,
								6802
							],
							[
								7151,
								7200
							],
							[
								7614,
								7650
							],
							[
								7662,
								7679
							],
							[
								7763,
								7770
							],
							[
								7831,
								7860
							],
							[
								7901,
								7950
							],
							[
								7961,
								7970
							],
							[
								8087,
								8121
							],
							[
								8377,
								8413
							],
							[
								8512,
								8535
							],
							[
								8547,
								8569
							],
							[
								8627,
								8655
							],
							[
								9327,
								9360
							],
							[
								9518,
								9559
							],
							[
								9878,
								9887
							],
							[
								10393,
								10436
							],
							[
								10841,
								10856
							],
							[
								11116,
								11126
							],
							[
								11197,
								11214
							],
							[
								11249,
								11267
							],
							[
								11559,
								11597
							],
							[
								11617,
								11631
							],
							[
								12089,
								12098
							],
							[
								12385,
								12419
							],
							[
								12463,
								12473
							],
							[
								12568,
								12578
							],
							[
								12627,
								12659
							],
							[
								12779,
								12800
							],
							[
								12843,
								12861
							],
							[
								12942,
								12961
							],
							[
								12987,
								13008
							],
							[
								13163,
								13180
							],
							[
								14339,
								14348
							],
							[
								14429,
								14452
							],
							[
								14844,
								14885
							],
							[
								14890,
								14891
							],
							[
								14943,
								14980
							],
							[
								15354,
								15379
							],
							[
								15520,
								15548
							],
							[
								15791,
								15820
							],
							[
								16136,
								16144
							],
							[
								16364,
								16390
							],
							[
								16551,
								16562
							],
							[
								16905,
								16934
							],
							[
								16958,
								16963
							],
							[
								17041,
								17054
							],
							[
								18045,
								18092
							],
							[
								18476,
								18485
							],
							[
								18494,
								18503
							],
							[
								18510,
								18522
							],
							[
								18626,
								18641
							],
							[
								18768,
								18788
							],
							[
								18821,
								18838
							],
							[
								18887,
								18905
							],
							[
								18940,
								18954
							],
							[
								19076,
								19093
							],
							[
								19155,
								19172
							],
							[
								19228,
								19244
							],
							[
								19294,
								19309
							],
							[
								19347,
								19364
							],
							[
								19440,
								19445
							],
							[
								19521,
								19530
							],
							[
								19893,
								19932
							],
							[
								19968,
								19973
							],
							[
								20026,
								20074
							],
							[
								21186,
								21202
							],
							[
								21434,
								21458
							],
							[
								21774,
								21795
							],
							[
								21952,
								21999
							],
							[
								22004,
								22010
							],
							[
								22617,
								22641
							],
							[
								22813,
								22821
							],
							[
								22865,
								22881
							],
							[
								23976,
								24012
							],
							[
								24045,
								24049
							],
							[
								24101,
								24141
							],
							[
								24170,
								24174
							],
							[
								24289,
								24343
							],
							[
								24574,
								24597
							],
							[
								24710,
								24732
							],
							[
								24799,
								24818
							],
							[
								25156,
								25176
							],
							[
								25397,
								25432
							],
							[
								25443,
								25456
							],
							[
								25546,
								25567
							]
						],
						"symlist":
						[
							"key =>",
							" (key, value) =>",
							" v =>",
							" v =>",
							" () =>",
							" o =>",
							"function RandomByte()",
							"function Modulo(n, m)",
							"function isNativeObject(obj)",
							"function Object2JSON(obj)",
							"function CopyObject(obj)",
							"function CreatePalette()",
							"function CreatePaletteHSL()",
							"v =>",
							" () =>",
							" v =>",
							"b =>",
							"DrawList",
							"constructor()",
							"insert(item)",
							" it =>",
							" it =>",
							"function* AllParents(elem)",
							"function getTransformationList(e)",
							"function DecomposeTransformList(elem)",
							"function drawRect(rect, stroke = '#0f0')",
							"function GetElementMatrix(element)",
							"function SetCrosshair(pos)",
							"function EventPositions(eventOrTouch)",
							"n =>",
							"n =>",
							"(acc, key) =>",
							"function PositionMatrix(canvas = ",
							"('canvas'), rect)",
							"function PositionMatrix2(element = canvasElement)",
							"function PositionProcessor(canvas = ",
							"('canvas'), rect)",
							" pos =>",
							"function ProcessPosition(pos)",
							"function TouchTransformer(tfn = (x, y) => [x, y])",
							" touch =>",
							"async function* TouchPrinter(iter)",
							"async function* GenericPrinter(iter)",
							"function Transformer(t)",
							"async function* (iter)",
							"function MouseToTouch(event)",
							"async function* CatchIterator(it)",
							"async function* TouchIterator(element, t)",
							"(x, y) =>",
							"async function* MoveIterator(eventIterator)",
							"function main()",
							"cid: () =>",
							"currentURL: () =>",
							"currentFile: () =>",
							" function Reparent(canvas = document.",
							"('canvas')[0])",
							"(v, i) =>",
							"animationFrame = (minDelay = 0) =>",
							"resolve =>",
							"resolve =>",
							" function animationFrame(t)",
							"async function Loop()",
							"log = (t, name) =>",
							"fire = (...args) =>",
							"redraw = (...args) =>",
							" function Fire()",
							"(a, p) =>",
							"async function Redraw()",
							" function Draw(x, y, time = performance.",
							")",
							" function* Bresenham(x0, y0, x1, y1)",
							" function Blaze(x, y, r)",
							" function PutArray(x, y, a)",
							" function PutArray2(x, y, a)",
							"onOpen()",
							" function KeyHandler(key)",
							"async () =>",
							"async function InputHandler()",
							"() =>",
							" () =>",
							" function SendTrail(start = timegen.start)",
							" () =>",
							" () =>",
							" error =>",
							"function Init()",
							"canvasElement: () =>",
							"divElement: () =>",
							"htmlElement: () =>",
							"gfxRect: () =>",
							"windowRect: () =>",
							"windowSize: () =>",
							"scrollPos: () =>",
							"bodyRect: () =>",
							"canvasRect: () =>",
							"() =>",
							" value =>",
							"SVGPolyline = ({ points, ...props }) =>",
							"pt =>",
							"SVGComponent = ({ circle, points, ...props }) =>",
							"async function()",
							"function ResizeHandler()",
							"function ParseJSON(s)",
							"function ReplayTrail(trail, time = performance.",
							" + 20)",
							"function NewWS(handlers)",
							"get ws()",
							"async function()",
							"function MakeUUID(rng = Math.random)",
							"n =>",
							"function MakeClientID(rng = Math.random)",
							"n =>",
							"async function LoadWASM(file = 'fire/build/fire.wasm')",
							"function ElementName(e)",
							"function TargetName(e)",
							"function GetRects()",
							"function SendWS(msg)",
							"function ToggleClass(element, name)",
							" (...args) =>",
							"function syncHeight()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAICBib2R5LCBodG1sCiAgaHRtbCwgYm9keSwgI3BhZ2UKICBib2R5CiAgYm9keQogIGNhbnZhcywgI2NhbnZhcywgLm92ZXJsYXksIHN2ZwogIC5vdmVybGF5LCBzdmcKICAuY2VudGVyCiAgLm92ZXJsYXkKI2Nyb3NzaGFpcgogIC5vdmVybGF5CiAgY2FudmFzCiAgY2FudmFzLnByZXNzZWQKICBodG1sLmlzLWxvY2tlZCwgaHRtbC5pcy1sb2NrZWQgYm9keQogIGNhbnZhcwogIC5jZW50ZXIKICBjYW52YXMKICAuY2VudGVyCiNjcm9zc2hhaXIKICBjYW52YXMKICBjcm9zc2hhaXIAAAAAAAAAAMMHAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					4,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/util.js",
						"symkeys":
						[
							[
								738,
								755
							],
							[
								1019,
								1068
							],
							[
								1956,
								1960
							],
							[
								2776,
								2783
							],
							[
								3305,
								3319
							],
							[
								3579,
								3585
							],
							[
								3688,
								3715
							],
							[
								3763,
								3794
							],
							[
								3950,
								3960
							],
							[
								3999,
								4023
							],
							[
								4090,
								4106
							],
							[
								4151,
								4168
							],
							[
								4216,
								4236
							],
							[
								4287,
								4310
							],
							[
								4358,
								4384
							],
							[
								4787,
								4792
							],
							[
								4853,
								4877
							],
							[
								4900,
								4916
							],
							[
								4931,
								4942
							],
							[
								4982,
								4998
							],
							[
								5013,
								5025
							],
							[
								5066,
								5082
							],
							[
								5097,
								5112
							],
							[
								5156,
								5172
							],
							[
								5187,
								5205
							],
							[
								5252,
								5268
							],
							[
								5283,
								5304
							],
							[
								5354,
								5370
							],
							[
								5385,
								5409
							],
							[
								5536,
								5559
							],
							[
								5642,
								5662
							],
							[
								5917,
								5929
							],
							[
								5979,
								5991
							],
							[
								6111,
								6134
							],
							[
								6207,
								6233
							],
							[
								6468,
								6489
							],
							[
								6544,
								6565
							],
							[
								6694,
								6718
							],
							[
								6804,
								6811
							],
							[
								6832,
								6839
							],
							[
								6869,
								6891
							],
							[
								6974,
								6981
							],
							[
								6999,
								7006
							],
							[
								7031,
								7053
							],
							[
								7103,
								7110
							],
							[
								7164,
								7171
							],
							[
								7203,
								7232
							],
							[
								7578,
								7603
							],
							[
								7730,
								7749
							],
							[
								7831,
								7850
							],
							[
								8037,
								8056
							],
							[
								8134,
								8153
							],
							[
								8218,
								8237
							],
							[
								8333,
								8373
							],
							[
								8515,
								8528
							],
							[
								8554,
								8587
							],
							[
								8836,
								8850
							],
							[
								9011,
								9018
							],
							[
								9235,
								9241
							],
							[
								9647,
								9671
							],
							[
								10050,
								10086
							],
							[
								10128,
								10146
							],
							[
								10329,
								10366
							],
							[
								10447,
								10465
							],
							[
								10483,
								10494
							],
							[
								10560,
								10594
							],
							[
								10621,
								10639
							],
							[
								10914,
								10959
							],
							[
								11159,
								11177
							],
							[
								11428,
								11454
							],
							[
								11713,
								11732
							],
							[
								11811,
								11830
							],
							[
								11980,
								12028
							],
							[
								12209,
								12224
							],
							[
								12250,
								12260
							],
							[
								12347,
								12352
							],
							[
								13119,
								13125
							],
							[
								13201,
								13206
							],
							[
								13215,
								13220
							],
							[
								13249,
								13258
							],
							[
								13282,
								13292
							],
							[
								13314,
								13327
							],
							[
								13355,
								13369
							],
							[
								13395,
								13412
							],
							[
								13440,
								13458
							],
							[
								13562,
								13567
							],
							[
								13775,
								13798
							],
							[
								14254,
								14258
							],
							[
								14300,
								14304
							],
							[
								14411,
								14423
							],
							[
								15017,
								15027
							],
							[
								15116,
								15144
							],
							[
								15178,
								15184
							],
							[
								15246,
								15270
							],
							[
								15300,
								15341
							],
							[
								15617,
								15629
							],
							[
								15662,
								15694
							],
							[
								15736,
								15776
							],
							[
								15930,
								15950
							],
							[
								17237,
								17267
							],
							[
								17327,
								17364
							],
							[
								17549,
								17555
							],
							[
								17770,
								17800
							],
							[
								17880,
								17912
							],
							[
								18140,
								18170
							],
							[
								18307,
								18310
							],
							[
								18447,
								18481
							],
							[
								18638,
								18670
							],
							[
								18960,
								18988
							],
							[
								19066,
								19095
							],
							[
								19170,
								19207
							],
							[
								19257,
								19292
							],
							[
								19473,
								19508
							],
							[
								19809,
								19832
							],
							[
								19863,
								19887
							],
							[
								19951,
								19978
							],
							[
								20011,
								20051
							],
							[
								20169,
								20212
							],
							[
								20515,
								20544
							],
							[
								20601,
								20615
							],
							[
								20664,
								20693
							],
							[
								20735,
								20762
							],
							[
								20872,
								20879
							],
							[
								20899,
								20927
							],
							[
								21017,
								21044
							],
							[
								21083,
								21110
							],
							[
								21160,
								21184
							],
							[
								21259,
								21294
							],
							[
								21396,
								21428
							],
							[
								21513,
								21547
							],
							[
								21632,
								21662
							],
							[
								21882,
								21892
							],
							[
								21945,
								21949
							],
							[
								22017,
								22054
							],
							[
								22091,
								22108
							],
							[
								22131,
								22148
							],
							[
								22208,
								22225
							],
							[
								22311,
								22320
							],
							[
								22392,
								22406
							],
							[
								22474,
								22479
							],
							[
								23183,
								23221
							],
							[
								23372,
								23407
							],
							[
								23491,
								23509
							],
							[
								23567,
								23611
							],
							[
								23625,
								23634
							],
							[
								23666,
								23694
							],
							[
								23708,
								23717
							],
							[
								23786,
								23829
							],
							[
								23949,
								23982
							],
							[
								24009,
								24016
							],
							[
								24145,
								24150
							],
							[
								24166,
								24200
							],
							[
								24277,
								24303
							],
							[
								24401,
								24435
							],
							[
								24458,
								24472
							],
							[
								24507,
								24557
							],
							[
								24695,
								24741
							],
							[
								24802,
								24864
							],
							[
								24875,
								24891
							],
							[
								25026,
								25063
							],
							[
								25102,
								25159
							],
							[
								25531,
								25565
							],
							[
								25705,
								25744
							],
							[
								25824,
								25861
							],
							[
								25978,
								26009
							],
							[
								26766,
								26809
							],
							[
								26940,
								26945
							],
							[
								27102,
								27136
							],
							[
								27344,
								27380
							],
							[
								27442,
								27468
							],
							[
								28228,
								28253
							],
							[
								28321,
								28349
							],
							[
								28942,
								28961
							],
							[
								29056,
								29071
							],
							[
								29200,
								29225
							],
							[
								29525,
								29582
							],
							[
								29706,
								29771
							],
							[
								29882,
								29934
							],
							[
								30055,
								30105
							],
							[
								30221,
								30236
							],
							[
								30307,
								30318
							],
							[
								30406,
								30417
							],
							[
								30443,
								30458
							],
							[
								30536,
								30550
							],
							[
								30590,
								30609
							],
							[
								30828,
								30917
							],
							[
								30920,
								31017
							],
							[
								31073,
								31085
							],
							[
								31150,
								31164
							],
							[
								31196,
								31202
							],
							[
								31245,
								31253
							],
							[
								31299,
								31307
							],
							[
								31363,
								31378
							],
							[
								31431,
								31438
							],
							[
								31549,
								31559
							],
							[
								31701,
								31711
							],
							[
								31774,
								31781
							],
							[
								31867,
								31894
							],
							[
								31918,
								31927
							],
							[
								31953,
								31961
							],
							[
								31978,
								31987
							],
							[
								32027,
								32035
							],
							[
								32046,
								32059
							],
							[
								32070,
								32085
							],
							[
								32114,
								32132
							],
							[
								32213,
								32237
							],
							[
								32658,
								32692
							],
							[
								32723,
								32734
							],
							[
								32739,
								32749
							],
							[
								32763,
								32774
							],
							[
								32796,
								32832
							],
							[
								33336,
								33366
							],
							[
								33410,
								33441
							],
							[
								33676,
								33698
							],
							[
								33758,
								33784
							],
							[
								33900,
								33911
							],
							[
								34023,
								34054
							],
							[
								34259,
								34284
							],
							[
								34351,
								34403
							],
							[
								34515,
								34537
							],
							[
								34543,
								34564
							],
							[
								34581,
								34613
							],
							[
								34733,
								34768
							],
							[
								34833,
								34866
							],
							[
								34913,
								34925
							],
							[
								34995,
								35007
							],
							[
								35064,
								35095
							],
							[
								35139,
								35181
							],
							[
								35357,
								35385
							],
							[
								35496,
								35526
							],
							[
								35538,
								35555
							],
							[
								35679,
								35715
							],
							[
								35792,
								35831
							],
							[
								35943,
								35947
							],
							[
								35974,
								35978
							],
							[
								36017,
								36021
							],
							[
								36049,
								36053
							],
							[
								36076,
								36102
							],
							[
								36144,
								36180
							],
							[
								36218,
								36250
							],
							[
								36589,
								36626
							],
							[
								36870,
								36911
							],
							[
								37004,
								37021
							],
							[
								37033,
								37044
							],
							[
								37059,
								37076
							],
							[
								37162,
								37186
							],
							[
								37209,
								37235
							],
							[
								37691,
								37723
							],
							[
								37977,
								37986
							],
							[
								38017,
								38026
							],
							[
								38057,
								38066
							],
							[
								38097,
								38106
							],
							[
								38137,
								38146
							],
							[
								38176,
								38185
							],
							[
								38216,
								38225
							],
							[
								38234,
								38254
							],
							[
								38298,
								38303
							],
							[
								38346,
								38355
							],
							[
								38523,
								38556
							],
							[
								38930,
								38956
							],
							[
								39182,
								39225
							],
							[
								39267,
								39279
							],
							[
								39357,
								39402
							],
							[
								39523,
								39543
							],
							[
								39664,
								39671
							],
							[
								39690,
								39697
							],
							[
								39877,
								39906
							],
							[
								40035,
								40080
							],
							[
								40208,
								40240
							],
							[
								40319,
								40340
							],
							[
								40592,
								40610
							],
							[
								40797,
								40810
							],
							[
								40927,
								40975
							],
							[
								40988,
								40997
							],
							[
								41035,
								41045
							],
							[
								41092,
								41126
							],
							[
								41403,
								41445
							],
							[
								41499,
								41537
							],
							[
								41699,
								41718
							],
							[
								41919,
								41958
							],
							[
								42092,
								42109
							],
							[
								42651,
								42671
							],
							[
								42759,
								42778
							],
							[
								42819,
								42838
							],
							[
								44687,
								44694
							],
							[
								44709,
								44716
							],
							[
								46336,
								46369
							],
							[
								46517,
								46526
							],
							[
								46546,
								46554
							],
							[
								46558,
								46567
							],
							[
								46709,
								46737
							],
							[
								46851,
								46879
							],
							[
								46993,
								47011
							],
							[
								47390,
								47425
							],
							[
								47465,
								47492
							],
							[
								47573,
								47621
							],
							[
								47832,
								47919
							],
							[
								47930,
								47946
							],
							[
								48055,
								48095
							],
							[
								48121,
								48125
							],
							[
								48142,
								48147
							],
							[
								48166,
								48171
							],
							[
								48189,
								48226
							],
							[
								48252,
								48256
							],
							[
								48262,
								48268
							],
							[
								48283,
								48289
							],
							[
								48297,
								48303
							],
							[
								48319,
								48356
							],
							[
								48382,
								48386
							],
							[
								48400,
								48406
							],
							[
								48414,
								48420
							],
							[
								48427,
								48433
							],
							[
								48450,
								48503
							],
							[
								48504,
								48521
							],
							[
								48626,
								48645
							],
							[
								48692,
								48730
							],
							[
								48755,
								48768
							],
							[
								49395,
								49439
							],
							[
								49511,
								49529
							],
							[
								49783,
								49801
							],
							[
								50128,
								50155
							],
							[
								50164,
								50179
							],
							[
								50255,
								50282
							],
							[
								50409,
								50413
							],
							[
								50491,
								50504
							],
							[
								50701,
								50730
							],
							[
								50839,
								50865
							],
							[
								50933,
								50960
							],
							[
								51232,
								51253
							],
							[
								51323,
								51348
							],
							[
								51368,
								51390
							],
							[
								51454,
								51479
							],
							[
								51604,
								51628
							],
							[
								51852,
								51868
							],
							[
								51869,
								51888
							],
							[
								51921,
								51941
							],
							[
								52030,
								52058
							],
							[
								52156,
								52181
							],
							[
								52231,
								52258
							],
							[
								52261,
								52280
							],
							[
								52585,
								52615
							],
							[
								52658,
								52673
							],
							[
								52741,
								52764
							],
							[
								52803,
								52807
							],
							[
								52847,
								52851
							],
							[
								52889,
								52913
							],
							[
								52980,
								53016
							],
							[
								53081,
								53088
							],
							[
								53126,
								53165
							],
							[
								53305,
								53338
							],
							[
								53531,
								53542
							],
							[
								53639,
								53670
							],
							[
								53729,
								53785
							],
							[
								54149,
								54190
							],
							[
								54556,
								54596
							],
							[
								54824,
								54872
							],
							[
								54904,
								54913
							],
							[
								55196,
								55235
							],
							[
								55246,
								55255
							],
							[
								55294,
								55305
							],
							[
								55710,
								55751
							],
							[
								55797,
								55830
							],
							[
								55907,
								55942
							],
							[
								56042,
								56085
							],
							[
								56265,
								56301
							],
							[
								56618,
								56657
							],
							[
								56793,
								56841
							],
							[
								57009,
								57023
							],
							[
								57195,
								57202
							],
							[
								57318,
								57325
							],
							[
								57660,
								57684
							],
							[
								57714,
								57731
							],
							[
								57788,
								57810
							],
							[
								57839,
								57856
							],
							[
								57962,
								57993
							],
							[
								58067,
								58087
							],
							[
								58224,
								58258
							],
							[
								58288,
								58297
							],
							[
								58317,
								58325
							],
							[
								58329,
								58338
							],
							[
								58432,
								58466
							],
							[
								58767,
								58800
							],
							[
								59162,
								59196
							],
							[
								59566,
								59600
							],
							[
								59883,
								59927
							],
							[
								60552,
								60591
							],
							[
								60719,
								60801
							],
							[
								61927,
								61940
							],
							[
								61958,
								61967
							],
							[
								61985,
								61994
							],
							[
								62045,
								62056
							],
							[
								62080,
								62092
							],
							[
								62099,
								62110
							],
							[
								62147,
								62152
							],
							[
								62255,
								62260
							],
							[
								62405,
								62410
							],
							[
								62443,
								62448
							],
							[
								62483,
								62488
							],
							[
								62683,
								62688
							],
							[
								62895,
								62928
							],
							[
								62941,
								62942
							],
							[
								63351,
								63384
							],
							[
								63548,
								63585
							],
							[
								63593,
								63594
							],
							[
								64070,
								64077
							],
							[
								64216,
								64227
							],
							[
								64313,
								64324
							],
							[
								64612,
								64626
							],
							[
								65170,
								65202
							],
							[
								65531,
								65569
							],
							[
								65868,
								65891
							],
							[
								65904,
								65924
							],
							[
								65987,
								66001
							],
							[
								66005,
								66019
							],
							[
								66096,
								66111
							],
							[
								66185,
								66199
							],
							[
								66242,
								66265
							],
							[
								66457,
								66475
							],
							[
								66681,
								66695
							],
							[
								66699,
								66713
							],
							[
								66885,
								66907
							],
							[
								67451,
								67456
							],
							[
								67498,
								67504
							],
							[
								67547,
								67554
							],
							[
								67583,
								67622
							],
							[
								67651,
								67661
							],
							[
								67667,
								67676
							],
							[
								67695,
								67722
							],
							[
								67762,
								67771
							],
							[
								67780,
								67788
							],
							[
								67836,
								67845
							],
							[
								67872,
								67881
							],
							[
								67892,
								67900
							],
							[
								67972,
								67981
							],
							[
								68073,
								68117
							],
							[
								68179,
								68240
							],
							[
								68549,
								68575
							],
							[
								68603,
								68608
							],
							[
								68632,
								68645
							],
							[
								68753,
								68818
							],
							[
								68923,
								68949
							],
							[
								68983,
								69009
							],
							[
								69030,
								69063
							],
							[
								69091,
								69107
							],
							[
								69122,
								69129
							],
							[
								69151,
								69167
							],
							[
								69192,
								69219
							],
							[
								69276,
								69291
							],
							[
								69313,
								69325
							],
							[
								69342,
								69357
							],
							[
								69367,
								69376
							],
							[
								69416,
								69425
							],
							[
								69432,
								69438
							],
							[
								69450,
								69479
							],
							[
								69565,
								69575
							],
							[
								69616,
								69631
							],
							[
								69650,
								69663
							],
							[
								70088,
								70098
							],
							[
								70237,
								70249
							],
							[
								70530,
								70551
							],
							[
								70738,
								70749
							],
							[
								70786,
								70795
							],
							[
								70875,
								70908
							],
							[
								71214,
								71243
							],
							[
								71287,
								71309
							],
							[
								71343,
								71382
							],
							[
								71416,
								71422
							],
							[
								71495,
								71520
							],
							[
								71531,
								71543
							],
							[
								71736,
								71746
							],
							[
								71798,
								71848
							],
							[
								72256,
								72286
							],
							[
								72372,
								72402
							],
							[
								72475,
								72506
							],
							[
								72660,
								72684
							],
							[
								72739,
								72763
							],
							[
								72890,
								72894
							],
							[
								72974,
								72999
							],
							[
								73087,
								73110
							],
							[
								73142,
								73148
							],
							[
								73292,
								73293
							],
							[
								73384,
								73388
							],
							[
								73522,
								73553
							],
							[
								73805,
								73817
							],
							[
								73934,
								73948
							],
							[
								74094,
								74126
							],
							[
								74330,
								74356
							],
							[
								74357,
								74374
							],
							[
								74423,
								74446
							],
							[
								74479,
								74489
							],
							[
								74538,
								74550
							],
							[
								74865,
								74875
							],
							[
								75067,
								75079
							],
							[
								75755,
								75788
							],
							[
								75816,
								75830
							],
							[
								75924,
								75949
							],
							[
								76098,
								76126
							],
							[
								76260,
								76289
							],
							[
								76589,
								76637
							],
							[
								76826,
								76863
							],
							[
								76912,
								76960
							],
							[
								77074,
								77108
							],
							[
								77116,
								77140
							],
							[
								77654,
								77684
							],
							[
								77810,
								77837
							],
							[
								78314,
								78365
							],
							[
								78407,
								78434
							],
							[
								78604,
								78652
							],
							[
								78864,
								78899
							],
							[
								79106,
								79139
							],
							[
								79411,
								79442
							],
							[
								79755,
								79799
							],
							[
								79935,
								79951
							],
							[
								80112,
								80162
							],
							[
								80558,
								80563
							],
							[
								80644,
								80657
							],
							[
								80706,
								80716
							],
							[
								80720,
								80733
							],
							[
								80809,
								80824
							],
							[
								80873,
								80883
							],
							[
								80887,
								80902
							],
							[
								80971,
								81004
							],
							[
								81114,
								81121
							],
							[
								81406,
								81421
							],
							[
								81697,
								81718
							],
							[
								81779,
								81807
							],
							[
								81898,
								81907
							],
							[
								82874,
								82905
							],
							[
								83077,
								83091
							],
							[
								83714,
								83748
							],
							[
								83933,
								83955
							],
							[
								83991,
								84015
							],
							[
								84018,
								84038
							],
							[
								84282,
								84308
							],
							[
								84403,
								84441
							],
							[
								84843,
								84886
							],
							[
								84968,
								84996
							],
							[
								85018,
								85044
							],
							[
								85185,
								85293
							],
							[
								85531,
								85582
							],
							[
								85660,
								85694
							],
							[
								85782,
								85810
							],
							[
								85844,
								85879
							],
							[
								85953,
								85978
							],
							[
								86000,
								86017
							],
							[
								86059,
								86108
							],
							[
								86181,
								86194
							],
							[
								86266,
								86279
							],
							[
								86455,
								86493
							],
							[
								86504,
								86523
							],
							[
								86577,
								86618
							],
							[
								86629,
								86648
							],
							[
								86706,
								86731
							],
							[
								86778,
								86817
							],
							[
								86906,
								86919
							],
							[
								86958,
								86968
							],
							[
								87022,
								87029
							],
							[
								87054,
								87060
							],
							[
								87102,
								87115
							],
							[
								87135,
								87171
							],
							[
								87256,
								87269
							],
							[
								87308,
								87318
							],
							[
								87351,
								87358
							],
							[
								87464,
								87497
							],
							[
								87577,
								87612
							],
							[
								87652,
								87662
							],
							[
								87777,
								87805
							],
							[
								87968,
								87980
							],
							[
								88085,
								88110
							],
							[
								88225,
								88238
							],
							[
								88337,
								88364
							],
							[
								88483,
								88496
							],
							[
								88599,
								88632
							],
							[
								88855,
								88874
							],
							[
								88953,
								88981
							],
							[
								89000,
								89019
							],
							[
								89037,
								89072
							],
							[
								89415,
								89446
							],
							[
								89505,
								89518
							],
							[
								89602,
								89634
							],
							[
								89815,
								89865
							],
							[
								89908,
								89935
							],
							[
								90137,
								90170
							],
							[
								90221,
								90256
							],
							[
								90269,
								90283
							],
							[
								90350,
								90412
							],
							[
								90611,
								90627
							],
							[
								90854,
								90864
							],
							[
								90903,
								90913
							],
							[
								90933,
								90943
							],
							[
								90971,
								90996
							],
							[
								91122,
								91147
							],
							[
								91422,
								91449
							],
							[
								91682,
								91694
							],
							[
								93347,
								93382
							],
							[
								93401,
								93409
							],
							[
								93457,
								93472
							],
							[
								93621,
								93634
							],
							[
								93827,
								93843
							],
							[
								94050,
								94075
							],
							[
								94090,
								94112
							],
							[
								94328,
								94332
							],
							[
								94546,
								94568
							],
							[
								94590,
								94600
							],
							[
								94618,
								94631
							],
							[
								94778,
								94800
							],
							[
								94822,
								94832
							],
							[
								94850,
								94863
							],
							[
								94992,
								95014
							],
							[
								95040,
								95050
							],
							[
								95068,
								95081
							],
							[
								95117,
								95139
							],
							[
								95160,
								95170
							],
							[
								95188,
								95201
							],
							[
								95221,
								95262
							],
							[
								95569,
								95592
							],
							[
								95673,
								95695
							],
							[
								95769,
								95789
							],
							[
								95921,
								95932
							],
							[
								95965,
								95982
							],
							[
								96159,
								96178
							],
							[
								96213,
								96235
							],
							[
								96367,
								96388
							],
							[
								96526,
								96546
							],
							[
								96613,
								96636
							],
							[
								96712,
								96734
							],
							[
								96852,
								96876
							],
							[
								96938,
								96950
							],
							[
								97123,
								97141
							],
							[
								97203,
								97215
							],
							[
								97369,
								97392
							],
							[
								97533,
								97549
							],
							[
								97605,
								97618
							],
							[
								97650,
								97718
							],
							[
								97759,
								97781
							],
							[
								97810,
								97820
							],
							[
								97836,
								97849
							],
							[
								97909,
								97922
							],
							[
								97998,
								98021
							],
							[
								98149,
								98171
							],
							[
								98268,
								98281
							],
							[
								98343,
								98359
							],
							[
								98397,
								98401
							],
							[
								98660,
								98703
							],
							[
								98718,
								98743
							],
							[
								98886,
								98894
							],
							[
								98908,
								98915
							],
							[
								98924,
								98929
							],
							[
								98947,
								98988
							],
							[
								99001,
								99008
							],
							[
								99085,
								99124
							],
							[
								99281,
								99292
							],
							[
								99327,
								99348
							],
							[
								99426,
								99433
							],
							[
								99465,
								99490
							],
							[
								99548,
								99557
							],
							[
								99574,
								99581
							],
							[
								99599,
								99625
							],
							[
								99683,
								99692
							],
							[
								99710,
								99717
							],
							[
								99736,
								99831
							],
							[
								100463,
								100483
							],
							[
								100484,
								100498
							],
							[
								100520,
								100527
							],
							[
								100554,
								100574
							],
							[
								100575,
								100589
							],
							[
								100610,
								100617
							],
							[
								100661,
								100675
							],
							[
								100747,
								100796
							],
							[
								100809,
								100825
							],
							[
								100859,
								100875
							],
							[
								100967,
								100999
							],
							[
								101031,
								101070
							],
							[
								101451,
								101492
							],
							[
								101531,
								101538
							],
							[
								101594,
								101614
							],
							[
								101652,
								101671
							],
							[
								101745,
								101762
							],
							[
								101781,
								101801
							],
							[
								101805,
								101822
							],
							[
								101874,
								101897
							],
							[
								101998,
								102021
							],
							[
								102065,
								102084
							],
							[
								102127,
								102155
							],
							[
								102251,
								102272
							],
							[
								102348,
								102374
							],
							[
								102487,
								102505
							],
							[
								102559,
								102564
							],
							[
								102567,
								102573
							],
							[
								102586,
								102632
							],
							[
								102715,
								102728
							],
							[
								103107,
								103120
							],
							[
								103184,
								103233
							],
							[
								103246,
								103262
							],
							[
								103284,
								103297
							],
							[
								103325,
								103337
							],
							[
								103341,
								103354
							],
							[
								103418,
								103470
							],
							[
								103659,
								103672
							],
							[
								103736,
								103775
							],
							[
								103919,
								103954
							],
							[
								104026,
								104030
							],
							[
								104057,
								104066
							],
							[
								104319,
								104354
							],
							[
								104430,
								104451
							],
							[
								104466,
								104474
							],
							[
								104487,
								104496
							],
							[
								104518,
								104522
							],
							[
								104561,
								104565
							],
							[
								104712,
								104754
							],
							[
								105087,
								105115
							],
							[
								105175,
								105226
							],
							[
								105477,
								105520
							],
							[
								105573,
								105616
							],
							[
								105652,
								105657
							],
							[
								105734,
								105748
							],
							[
								105783,
								105793
							],
							[
								105806,
								105841
							],
							[
								105885,
								105893
							],
							[
								106440,
								106484
							],
							[
								107019,
								107042
							],
							[
								107457,
								107499
							],
							[
								108305,
								108328
							],
							[
								108701,
								108706
							],
							[
								109265,
								109278
							],
							[
								109314,
								109329
							],
							[
								109367,
								109384
							],
							[
								109427,
								109471
							],
							[
								109670,
								109677
							],
							[
								110390,
								110403
							],
							[
								110438,
								110447
							],
							[
								110504,
								110523
							],
							[
								110630,
								110643
							],
							[
								110818,
								110833
							],
							[
								110877,
								110894
							],
							[
								110940,
								110953
							],
							[
								110995,
								111008
							],
							[
								111050,
								111065
							],
							[
								111109,
								111126
							],
							[
								111256,
								111261
							],
							[
								111410,
								111436
							],
							[
								111613,
								111627
							],
							[
								111650,
								111655
							],
							[
								112290,
								112294
							],
							[
								112352,
								112356
							],
							[
								112599,
								112608
							],
							[
								112733,
								112746
							],
							[
								112820,
								112834
							],
							[
								113092,
								113115
							],
							[
								113133,
								113142
							],
							[
								113155,
								113166
							],
							[
								113176,
								113185
							],
							[
								113206,
								113234
							],
							[
								113342,
								113375
							],
							[
								113542,
								113564
							],
							[
								113582,
								113591
							],
							[
								113611,
								113624
							],
							[
								113682,
								113691
							],
							[
								113712,
								113754
							],
							[
								114227,
								114235
							],
							[
								114270,
								114281
							],
							[
								114358,
								114396
							],
							[
								114750,
								114771
							],
							[
								114856,
								114890
							],
							[
								115043,
								115082
							],
							[
								115138,
								115150
							],
							[
								115610,
								115618
							],
							[
								115750,
								115757
							],
							[
								115817,
								115825
							],
							[
								115939,
								115956
							],
							[
								116035,
								116039
							],
							[
								116094,
								116111
							],
							[
								116223,
								116271
							],
							[
								116553,
								116648
							],
							[
								116783,
								116795
							],
							[
								116805,
								116817
							],
							[
								116822,
								116835
							],
							[
								116942,
								116954
							],
							[
								116964,
								116976
							],
							[
								116981,
								116994
							],
							[
								117104,
								117112
							],
							[
								117323,
								117331
							],
							[
								117706,
								117716
							],
							[
								117796,
								117806
							],
							[
								117888,
								117896
							],
							[
								118028,
								118047
							],
							[
								118603,
								118607
							],
							[
								118676,
								118693
							],
							[
								118733,
								118748
							],
							[
								118786,
								118799
							],
							[
								118835,
								118850
							],
							[
								118961,
								118966
							],
							[
								119036,
								119045
							],
							[
								119066,
								119076
							],
							[
								119185,
								119250
							],
							[
								119601,
								119635
							],
							[
								119719,
								119762
							],
							[
								119978,
								120025
							],
							[
								120216,
								120267
							],
							[
								120487,
								120539
							],
							[
								120887,
								120930
							],
							[
								121303,
								121307
							],
							[
								121422,
								121497
							],
							[
								121872,
								121876
							],
							[
								122109,
								122151
							],
							[
								122215,
								122223
							],
							[
								122384,
								122425
							],
							[
								122472,
								122504
							],
							[
								122585,
								122618
							],
							[
								122677,
								122741
							],
							[
								122981,
								123022
							],
							[
								123060,
								123078
							],
							[
								123127,
								123134
							],
							[
								123328,
								123392
							],
							[
								123568,
								123633
							],
							[
								123646,
								123658
							],
							[
								123675,
								123686
							],
							[
								123710,
								123725
							],
							[
								124108,
								124138
							],
							[
								124315,
								124335
							],
							[
								124355,
								124409
							],
							[
								124632,
								124638
							],
							[
								124690,
								124695
							],
							[
								124751,
								124757
							],
							[
								124834,
								124839
							],
							[
								124882,
								124941
							],
							[
								126995,
								127008
							],
							[
								127156,
								127170
							],
							[
								127330,
								127343
							],
							[
								127425,
								127444
							],
							[
								127688,
								127725
							],
							[
								128073,
								128143
							],
							[
								128499,
								128541
							],
							[
								128592,
								128601
							],
							[
								128767,
								128802
							],
							[
								128929,
								128933
							],
							[
								128955,
								128966
							],
							[
								129076,
								129099
							],
							[
								129243,
								129267
							],
							[
								129368,
								129372
							],
							[
								129395,
								129399
							],
							[
								129411,
								129443
							],
							[
								129491,
								129531
							],
							[
								129761,
								129780
							],
							[
								129812,
								129876
							],
							[
								129928,
								129933
							],
							[
								129966,
								129996
							],
							[
								130083,
								130118
							],
							[
								130142,
								130168
							],
							[
								130282,
								130315
							],
							[
								130455,
								130513
							],
							[
								130538,
								130564
							],
							[
								130608,
								130643
							],
							[
								130686,
								130707
							],
							[
								130856,
								130882
							],
							[
								131040,
								131059
							],
							[
								131382,
								131431
							],
							[
								131456,
								131477
							],
							[
								131519,
								131535
							],
							[
								131589,
								131612
							],
							[
								131675,
								131703
							],
							[
								131766,
								131787
							],
							[
								131811,
								131816
							],
							[
								132389,
								132420
							],
							[
								132423,
								132441
							],
							[
								132493,
								132494
							],
							[
								132507,
								132518
							],
							[
								133073,
								133118
							],
							[
								133220,
								133244
							],
							[
								133507,
								133517
							],
							[
								133565,
								133586
							],
							[
								133634,
								133655
							],
							[
								133743,
								133784
							],
							[
								133932,
								133936
							],
							[
								133982,
								133990
							],
							[
								134019,
								134023
							],
							[
								134399,
								134412
							],
							[
								134465,
								134485
							],
							[
								134811,
								134868
							],
							[
								134975,
								134986
							],
							[
								135326,
								135346
							],
							[
								135386,
								135422
							],
							[
								135451,
								135464
							],
							[
								135507,
								135517
							],
							[
								135562,
								135577
							],
							[
								136553,
								136566
							],
							[
								137137,
								137157
							],
							[
								137232,
								137247
							],
							[
								137626,
								137639
							],
							[
								137710,
								137730
							],
							[
								137812,
								137827
							],
							[
								137894,
								137923
							],
							[
								137997,
								138030
							],
							[
								138142,
								138156
							],
							[
								138196,
								138211
							],
							[
								138233,
								138261
							],
							[
								138790,
								138813
							],
							[
								139020,
								139048
							],
							[
								139155,
								139197
							],
							[
								139524,
								139580
							],
							[
								139814,
								139855
							],
							[
								139946,
								139957
							],
							[
								140101,
								140114
							],
							[
								140437,
								140453
							],
							[
								140482,
								140534
							],
							[
								140603,
								140610
							],
							[
								140695,
								140709
							],
							[
								140791,
								140801
							],
							[
								140907,
								140911
							],
							[
								140943,
								140963
							],
							[
								141014,
								141027
							],
							[
								141077,
								141089
							],
							[
								141385,
								141400
							],
							[
								141723,
								141733
							],
							[
								141788,
								141798
							],
							[
								141885,
								141896
							],
							[
								141953,
								141960
							],
							[
								142564,
								142574
							],
							[
								142640,
								142651
							],
							[
								142719,
								142731
							],
							[
								142766,
								142779
							],
							[
								142825,
								142840
							],
							[
								142859,
								142886
							],
							[
								143072,
								143115
							],
							[
								143276,
								143336
							],
							[
								143422,
								143447
							],
							[
								143496,
								143539
							],
							[
								143550,
								143560
							],
							[
								143569,
								143598
							],
							[
								143854,
								143870
							],
							[
								143892,
								143903
							],
							[
								143953,
								143983
							],
							[
								144052,
								144057
							],
							[
								144086,
								144091
							],
							[
								144386,
								144399
							],
							[
								144450,
								144481
							],
							[
								144502,
								144515
							],
							[
								144516,
								144536
							],
							[
								144626,
								144662
							],
							[
								144735,
								144750
							],
							[
								144831,
								144843
							],
							[
								145319,
								145324
							],
							[
								146047,
								146074
							],
							[
								146099,
								146104
							],
							[
								146155,
								146184
							],
							[
								146263,
								146268
							],
							[
								146350,
								146363
							],
							[
								146414,
								146425
							],
							[
								146465,
								146486
							],
							[
								146610,
								146627
							],
							[
								146757,
								146777
							],
							[
								146973,
								146999
							],
							[
								147091,
								147097
							],
							[
								147127,
								147132
							],
							[
								147208,
								147241
							],
							[
								147399,
								147404
							],
							[
								147455,
								147468
							],
							[
								147492,
								147498
							],
							[
								147581,
								147605
							],
							[
								147699,
								147710
							],
							[
								147766,
								147779
							],
							[
								147841,
								147852
							],
							[
								147951,
								147961
							],
							[
								148059,
								148072
							],
							[
								148185,
								148194
							],
							[
								148252,
								148264
							],
							[
								148347,
								148355
							],
							[
								148455,
								148462
							],
							[
								148564,
								148584
							],
							[
								148772,
								148793
							],
							[
								149052,
								149069
							],
							[
								149222,
								149234
							],
							[
								149363,
								149377
							],
							[
								149549,
								149562
							],
							[
								149579,
								149599
							],
							[
								149858,
								149888
							],
							[
								149894,
								149920
							],
							[
								149940,
								149966
							],
							[
								149995,
								150013
							],
							[
								150079,
								150113
							],
							[
								150227,
								150281
							],
							[
								150308,
								150328
							],
							[
								150418,
								150435
							],
							[
								150531,
								150553
							],
							[
								150660,
								150684
							],
							[
								150792,
								150822
							],
							[
								150853,
								150862
							],
							[
								150905,
								150924
							],
							[
								151073,
								151093
							],
							[
								151210,
								151229
							],
							[
								151343,
								151359
							],
							[
								151467,
								151477
							],
							[
								151555,
								151562
							],
							[
								151628,
								151637
							],
							[
								151983,
								152004
							],
							[
								152013,
								152041
							],
							[
								152051,
								152096
							],
							[
								152151,
								152162
							],
							[
								152184,
								152194
							],
							[
								152207,
								152218
							],
							[
								152247,
								152280
							],
							[
								152441,
								152473
							],
							[
								152541,
								152563
							],
							[
								152735,
								152771
							],
							[
								152933,
								152949
							],
							[
								153010,
								153046
							],
							[
								153122,
								153133
							],
							[
								153198,
								153202
							],
							[
								153241,
								153254
							],
							[
								153369,
								153405
							],
							[
								153582,
								153587
							],
							[
								153628,
								153681
							],
							[
								154621,
								154650
							],
							[
								154805,
								154842
							],
							[
								154853,
								154866
							],
							[
								154879,
								154888
							],
							[
								154935,
								154955
							],
							[
								154989,
								155005
							],
							[
								155230,
								155251
							],
							[
								155379,
								155411
							],
							[
								155438,
								155447
							],
							[
								155459,
								155472
							],
							[
								155551,
								155575
							],
							[
								155642,
								155651
							],
							[
								155667,
								155677
							],
							[
								155694,
								155711
							],
							[
								155739,
								155748
							],
							[
								155749,
								155772
							],
							[
								155819,
								155843
							],
							[
								155991,
								155996
							],
							[
								156014,
								156023
							],
							[
								156124,
								156132
							],
							[
								156136,
								156145
							],
							[
								156167,
								156180
							],
							[
								156197,
								156210
							],
							[
								156217,
								156230
							],
							[
								156256,
								156273
							],
							[
								156286,
								156302
							],
							[
								156376,
								156381
							],
							[
								156399,
								156408
							],
							[
								156509,
								156517
							],
							[
								156530,
								156539
							],
							[
								156554,
								156559
							],
							[
								156649,
								156686
							],
							[
								156843,
								156859
							],
							[
								156873,
								156895
							],
							[
								157008,
								157014
							],
							[
								158062,
								158077
							],
							[
								158127,
								158141
							],
							[
								158155,
								158170
							],
							[
								158701,
								158718
							],
							[
								158768,
								158784
							],
							[
								159069,
								159099
							],
							[
								159117,
								159126
							],
							[
								159144,
								159154
							],
							[
								159167,
								159176
							],
							[
								159320,
								159349
							],
							[
								159367,
								159376
							],
							[
								159394,
								159404
							],
							[
								159408,
								159417
							],
							[
								160699,
								160751
							],
							[
								160817,
								160840
							],
							[
								160912,
								160930
							],
							[
								161279,
								161289
							],
							[
								161293,
								161307
							],
							[
								161510,
								161542
							],
							[
								161569,
								161604
							],
							[
								161644,
								161667
							],
							[
								161828,
								161844
							],
							[
								162029,
								162038
							],
							[
								162064,
								162084
							],
							[
								162111,
								162120
							],
							[
								162136,
								162160
							],
							[
								162300,
								162345
							],
							[
								162377,
								162395
							],
							[
								162541,
								162553
							],
							[
								162698,
								162703
							],
							[
								163017,
								163024
							],
							[
								163161,
								163180
							],
							[
								163198,
								163220
							],
							[
								163502,
								163544
							],
							[
								163561,
								163598
							],
							[
								163843,
								163862
							],
							[
								164232,
								164272
							],
							[
								164315,
								164329
							],
							[
								164399,
								164429
							],
							[
								164478,
								164508
							],
							[
								164575,
								164653
							],
							[
								165103,
								165131
							],
							[
								165183,
								165247
							],
							[
								165265,
								165289
							],
							[
								165548,
								165567
							],
							[
								165682,
								165718
							],
							[
								166443,
								166481
							],
							[
								166498,
								166536
							],
							[
								167831,
								167838
							],
							[
								167894,
								167912
							],
							[
								168125,
								168132
							],
							[
								168180,
								168184
							],
							[
								168311,
								168319
							],
							[
								168386,
								168398
							],
							[
								169376,
								169442
							],
							[
								169443,
								169460
							],
							[
								169698,
								169709
							],
							[
								169726,
								169745
							],
							[
								169859,
								169923
							],
							[
								169939,
								169948
							],
							[
								169960,
								169968
							],
							[
								170022,
								170037
							],
							[
								170053,
								170059
							],
							[
								170083,
								170096
							],
							[
								170291,
								170308
							],
							[
								170353,
								170378
							],
							[
								170477,
								170483
							],
							[
								170603,
								170635
							],
							[
								170712,
								170716
							],
							[
								170846,
								170867
							],
							[
								170905,
								170926
							],
							[
								170967,
								171000
							],
							[
								171233,
								171260
							],
							[
								171352,
								171356
							],
							[
								171463,
								171468
							],
							[
								171732,
								171778
							],
							[
								172368,
								172377
							],
							[
								172613,
								172666
							],
							[
								172677,
								172703
							],
							[
								173006,
								173022
							],
							[
								173106,
								173117
							],
							[
								173363,
								173367
							],
							[
								173652,
								173705
							],
							[
								173933,
								173946
							],
							[
								173957,
								173973
							],
							[
								174148,
								174157
							],
							[
								174199,
								174208
							],
							[
								174248,
								174253
							],
							[
								174289,
								174307
							],
							[
								174328,
								174359
							],
							[
								174466,
								174485
							],
							[
								174778,
								174791
							],
							[
								174880,
								174898
							],
							[
								174993,
								175010
							],
							[
								175143,
								175150
							],
							[
								175269,
								175275
							],
							[
								175425,
								175433
							],
							[
								175552,
								175562
							],
							[
								175791,
								175800
							],
							[
								176298,
								176338
							],
							[
								176647,
								176682
							],
							[
								177013,
								177019
							],
							[
								177055,
								177073
							],
							[
								177117,
								177127
							],
							[
								177210,
								177220
							],
							[
								177269,
								177301
							],
							[
								177548,
								177567
							],
							[
								178185,
								178207
							],
							[
								178506,
								178566
							],
							[
								178832,
								178857
							],
							[
								179259,
								179284
							],
							[
								179313,
								179329
							],
							[
								179338,
								179349
							],
							[
								179441,
								179447
							],
							[
								179456,
								179467
							],
							[
								179527,
								179551
							],
							[
								179569,
								179578
							],
							[
								179602,
								179611
							],
							[
								179639,
								179650
							],
							[
								179677,
								179688
							],
							[
								179721,
								179734
							],
							[
								179753,
								179766
							],
							[
								179778,
								179791
							],
							[
								179945,
								179956
							],
							[
								180059,
								180084
							],
							[
								180102,
								180128
							],
							[
								180219,
								180253
							],
							[
								180525,
								180546
							],
							[
								180611,
								180629
							],
							[
								180797,
								180833
							],
							[
								181256,
								181276
							],
							[
								181479,
								181494
							],
							[
								181770,
								181793
							],
							[
								182002,
								182020
							],
							[
								182238,
								182250
							],
							[
								182280,
								182295
							],
							[
								182340,
								182346
							],
							[
								182398,
								182412
							],
							[
								182554,
								182572
							],
							[
								182768,
								182800
							],
							[
								182866,
								182882
							],
							[
								183218,
								183234
							],
							[
								183681,
								183684
							],
							[
								183697,
								183698
							],
							[
								183728,
								183764
							],
							[
								184205,
								184244
							],
							[
								184333,
								184359
							],
							[
								184407,
								184468
							],
							[
								184875,
								184903
							],
							[
								185010,
								185028
							],
							[
								185323,
								185361
							],
							[
								185415,
								185420
							],
							[
								186048,
								186114
							],
							[
								186461,
								186491
							],
							[
								186861,
								186885
							],
							[
								186944,
								186948
							],
							[
								186987,
								187008
							],
							[
								187050,
								187073
							],
							[
								187117,
								187138
							],
							[
								187434,
								187473
							],
							[
								187550,
								187567
							],
							[
								187690,
								187704
							],
							[
								187866,
								187883
							],
							[
								188024,
								188041
							],
							[
								188072,
								188089
							],
							[
								188189,
								188206
							],
							[
								188500,
								188514
							]
						],
						"symlist":
						[
							" function Util(g)",
							"Util.formatAnnotatedObject = function(subject, o)",
							"i =>",
							"item =>",
							"padding = x =>",
							"arr =>",
							"Util.curry = (fn, arity) =>",
							"ret = function curried(...args)",
							" (v, i) =>",
							"Curried = function(...a)",
							" function()",
							" function(a)",
							" function(a, b)",
							" function(a, b, c)",
							" function(a, b, c, d)",
							"get()",
							"Util.arityN = (fn, n) =>",
							" function(fn)",
							" function()",
							" function(fn)",
							" function(a)",
							" function(fn)",
							" function(a, b)",
							" function(fn)",
							" function(a, b, c)",
							" function(fn)",
							" function(a, b, c, d)",
							" function(fn)",
							" function(a, b, c, d, e)",
							"Util.getter = target =>",
							"self = function(key)",
							".fn = key =>",
							".fn = key =>",
							"Util.setter = target =>",
							"set = function(key, value)",
							".fn = (key, value) =>",
							".fn = (key, value) =>",
							"Util.remover = target =>",
							" key =>",
							" key =>",
							"Util.hasFn = target =>",
							" key =>",
							" key =>",
							"Util.adder = target =>",
							" arg =>",
							" arg =>",
							"self = function(obj, arg = 1)",
							" function ChooseFn(a, o)",
							".fn = (obj, arg) =>",
							".fn = (obj, arg) =>",
							".fn = (obj, arg) =>",
							".fn = (num, arg) =>",
							".fn = (obj, arg) =>",
							"Util.updater = (target, get, set, fn) =>",
							" (k, f, i) =>",
							" function doUpdate(key, func, i)",
							"create = () =>",
							" key =>",
							" () =>",
							"self = function(...args)",
							"Util.once = (fn, thisArg, memoFn) =>",
							" function(...args)",
							"Util.delay = (func, wait, thisObj) =>",
							" function(...args)",
							"function ()",
							"Util.throttle = (f, t, thisObj) =>",
							" function(...args)",
							"Util.debounce = (func, wait, options = {}) =>",
							" function later()",
							" function debounced(...a)",
							".clear = function()",
							".flush = function()",
							"Util.debounceAsync = (fn, wait, options = {}) =>",
							" function(...a)",
							"resolve =>",
							"() =>",
							"arg =>",
							" g =>",
							" g =>",
							" () =>",
							" err =>",
							" () =>",
							" err =>",
							" () =>",
							" err =>",
							"() =>",
							"Util.log = (...args) =>",
							"f =>",
							"f =>",
							"(a, p, i) =>",
							"get: () =>",
							".setFilters = function(args)",
							"arg =>",
							".getFilters = function()",
							"Util.msg = (strings, ...substitutions) =>",
							"(base, n) =>",
							"Util.generalLog = function(n, x)",
							"Util.toSource = function(arg, opts = {})",
							"print = (...args) =>",
							"Util.debug = function(message)",
							"removeCircular = function(key, value)",
							"arg =>",
							"Util.type = function({ type })",
							"Util.functionName = function(fn)",
							"Util.className = function(obj)",
							"obj",
							"Util.unwrapComponent = function(c)",
							"Util.componentName = function(c)",
							"Util.count = function(s, ch)",
							"Util.parseNum = function(str)",
							"Util.minmax = function(num, min, max)",
							"Util.getExponential = function(num)",
							"Util.getNumberParts = function(num)",
							"Util.pow2 = function(n)",
							"Util.pow10 = function(n)",
							"Util.bitValue = function(n)",
							"Util.bitMask = function(bits, start = 0)",
							"Util.bitGroups = function(num, bpp, minLen)",
							"Util.bitStuff = (arr, bpp) =>",
							"([b, f], n) =>",
							"Util.toBinary = function(num)",
							"Util.toBits = function(num)",
							" bit =>",
							"Util.getBit = function(v, n)",
							"Util.isSet = function(v, n)",
							"Util.bitCount = function(n)",
							"Util.bitNo = function(n)",
							"Util.toggleBit = function(num, bit)",
							"Util.setBit = function(num, bit)",
							"Util.clearBit = function(num, bit)",
							"Util.range = function(...args)",
							" (v, k) =>",
							"n =>",
							"Util.set = function(obj, prop, value)",
							" (prop, value) =>",
							" (prop, value) =>",
							" (prop, value) =>",
							" value =>",
							"(obj, prop) =>",
							"() =>",
							"Util.bitArrayToNumbers = function(arr)",
							"Util.bitsToNumbers = function(bits)",
							"(val, key, arr) =>",
							"Util.shuffle = function(arr, rnd = Util.rng)",
							"(a, b) =>",
							"Util.sortNum = function(arr)",
							"(a, b) =>",
							"Util.draw = (arr, n = 1, rnd = Util.rng) =>",
							"Util.is = function(what, ...pred)",
							"type =>",
							"fn =>",
							"Util.instanceOf = (value, ctor) =>",
							"Util.onoff = function(val)",
							"Util.numbersToBits = function(arr)",
							"(bits, num) =>",
							"Util.randomNumbers = function([start, end], draws)",
							"Util.randomBits = function(r = [1, 50], n = 5)",
							"Util.padFn = function(len, char = ' ', fn = (str, pad) => pad)",
							" (s, n = len) =>",
							"Util.pad = function(s, n, char = ' ')",
							"Util.abbreviate = function(str, max = 40, suffix = '...')",
							"Util.trim = function(str, charset)",
							"Util.trimRight = function(str, charset)",
							"Util.indent = (text, space = ' ') =>",
							"Util.define = (obj, ...args) =>",
							"Util.memoizedProperties = (obj, methods) =>",
							"get()",
							"Util.copyWhole = (dst, ...args) =>",
							"Util.copyEntries = (obj, entries) =>",
							"Util.extend = (...args) =>",
							"Util.isCloneable = obj =>",
							"Util.isUnextendable = val =>",
							"pred = (k, v, f) =>",
							"(key, depth) =>",
							"value = function(...args)",
							"Util.defineGetter = (obj, key, fn, enumerable = false) =>",
							"Util.defineGetterSetter = (obj, key, g, s, enumerable = false) =>",
							"Util.defineGettersSetters = (obj, gettersSetters) =>",
							"Util.extendArray = function(arr = Array.prototype)",
							" function(pred)",
							" function()",
							" function()",
							"(item, i, a) =>",
							" function()",
							" function(value)",
							"Util.adapter = function(obj, getLength = obj => obj.length, getKey = (obj, index) => obj.",
							"(index), getItem = (obj, key) => obj[key], setItem = (obj, index, value) => (obj[index] = value))",
							"get length()",
							"get instance()",
							"key(i)",
							"get(key)",
							"has(key)",
							"set(key, value)",
							"*keys()",
							"*entries()",
							"toObject()",
							"toMap()",
							".localStorage = function(s)",
							" () =>",
							" w =>",
							" () =>",
							" l =>",
							" (l, i) =>",
							" (l, key) =>",
							" (l, key, v) =>",
							"Util.array = function(a)",
							"Util.arrayFromEntries = entries =>",
							"([k, v]) =>",
							" key =>",
							"([k, v]) =>",
							"Util.toMap = function(hash = {}, fn)",
							"Util.extendMap = function(map)",
							".entries = function* iterator()",
							".toObject = function()",
							".match = function(...args)",
							" entries =>",
							"Util.objectFrom = function(any)",
							"Util.tail = function(arr)",
							"Util.splice = function(str, index, delcount, insert)",
							"Util.identity = arg =>",
							"Util.reverse = arr =>",
							"Util.keyOf = function(obj, prop)",
							"Util.rotateRight = function(arr, n)",
							"Util.repeater = function(n, what)",
							"function* ()",
							"function* ()",
							"Util.repeat = function(n, what)",
							"Util.arrayDim = function(dimensions, init)",
							"Util.flatten = function(arr)",
							"Util.chunkArray = (a, size) =>",
							"(acc, item, i) =>",
							"Util.partition = function* (a, size)",
							"Util.difference = (a, b, incicludes) =>",
							"x =>",
							"x =>",
							"x =>",
							"x =>",
							"Util.intersect = (a, b) =>",
							"Util.symmetricDifference = (a, b) =>",
							"Util.union = (a, b, equality) =>",
							"Util.partition = (array, callback) =>",
							"Util.chances = function(numbers, matches)",
							"Util.sum = arr =>",
							"(acc, n) =>",
							"Util.expr = fn =>",
							" function expr(...args)",
							" function addArgs(args)",
							"ret = function returnFn(...args)",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"(a, b) =>",
							"Util.mod = (a, b) =>",
							" n =>",
							"(a, b) =>",
							"Util.fnName = function(f, parent)",
							"Util.objName = function(o)",
							"Util.findKey = function(obj, pred, thisVal)",
							"value : v =>",
							"Util.find = function(arr, value, prop = 'id')",
							"pred = function(obj)",
							" obj =>",
							" obj =>",
							"pred = ([key, value], arr) =>",
							"Util.findIndex = function(obj, pred, thisArg)",
							"Util.match = function(arg, pred)",
							"match = (val, key) =>",
							"(acc, val, key) =>",
							"(acc, key) =>",
							"Util.toHash = function(map, keyTransform = k => ",
							"('' + k))",
							" (v, k) =>",
							"Util.indexOf = function(obj, prop)",
							"Util.greatestCommonDenominator = (a, b) =>",
							"Util.leastCommonMultiple = (n1, n2) =>",
							"function* (re, str)",
							"Util.inspect = function(obj, opts = {})",
							"stringFn = str =>",
							"print = (...args) =>",
							" (space = false) =>",
							" (space = false) =>",
							" key =>",
							" key =>",
							"Util.dump = function(name, props)",
							" () =>",
							" w =>",
							" () =>",
							"Util.ucfirst = function(str)",
							"Util.lcfirst = function(str)",
							"Util.typeOf = v =>",
							"Util.camelize = (text, sep = '') =>",
							" (match, p1, p2, offset) =>",
							"Util.decamelize = function(str, separator = '-')",
							"Util.ifThenElse = function(pred = value => !!value, _then = () => {}, _else = () => {})",
							" function(value)",
							"Util.if = (value, _then, _else, pred) =>",
							"v =>",
							"() =>",
							"() =>",
							"Util.ifElse = (value, _else, pred) =>",
							"v =>",
							" () =>",
							" () =>",
							" () =>",
							"Util.ifThen = (value, _then, pred) =>",
							"v =>",
							" () =>",
							" () =>",
							" () =>",
							"Util.switch = ({ default: defaultCase, ...cases }) =>",
							" function(value)",
							"function* (fn, arr)",
							"Util.colorDump = (iterable, textFn) =>",
							"(color, n) =>",
							"Util.bucketInserter = (map, ...extraArgs) =>",
							" function(...args)",
							" function(...args)",
							"Util.fifo = function fifo()",
							"resolve = () =>",
							"async function* generator()",
							"r =>",
							"push(...args)",
							"process: async function run()",
							"Util.isEmail = function(v)",
							"Util.isString = function(v)",
							"Util.isNumeric = v =>",
							"Util.isUndefined = arg =>",
							"Util.isObject = obj =>",
							"Util.isPrimitive = obj =>",
							"Util.isFunction = arg =>",
							"Util.not = fn =>",
							" function(...args)",
							"Util.isAsync = fn =>",
							"Util.isArrowFunction = fn =>",
							"Util.isEmptyString = v =>",
							"Util.isEmpty = (...args) =>",
							" function empty(v)",
							"Util.isNonEmpty = (...args) =>",
							"nonEmpty = v =>",
							"Util.isIpAddress = v =>",
							"i =>",
							"i =>",
							"Util.isPortNumber = v =>",
							"Util.hasProps = function(obj, props)",
							"prop =>",
							"Util.validatePassword = function(value)",
							"Util.clone = function(obj, proto)",
							"constructor",
							"Util.deepClone = function(data)",
							"Util.findVal = function(object, propName, maxDepth = 10)",
							"Util.deepCloneObservable = function(data)",
							"Util.toArray = function(observableArray)",
							"Util.arryToTree = function(data, id, pId, appId)",
							"(e, i) =>",
							"Util.to3wei = function(a, old, id, pId)",
							"(e, i) =>",
							"(se, si) =>",
							"Util.arrExchangePos = function(arr, i, j)",
							"Util.arrRemove = function(arr, i)",
							"Util.move = function(src, dst = [])",
							"Util.moveIf = function(src, pred, dst = [])",
							"Util.logOutClearStorage = function()",
							"Util.getCookie = function(cookie, name)",
							"Util.parseCookie = function(c = document.cookie)",
							"pred = char =>",
							"char =>",
							"char =>",
							"Util.encodeCookie = c =>",
							"([key, value]) =>",
							"Util.setCookies = c =>",
							"([key, value]) =>",
							"Util.clearCookies = function(c)",
							" (acc, name) =>",
							"Util.deleteCookie = function(name)",
							" () =>",
							" w =>",
							" () =>",
							"Util.accAdd = function(arg1, arg2)",
							"Util.Subtr = function(arg1, arg2)",
							"Util.accDiv = function(arg1, arg2)",
							"Util.accMul = function(arg1, arg2)",
							"Util.dateFormatter = function(date, formate)",
							"Util.numberFormatter = function(numStr)",
							"Util.searchObject = function(object, matchCallback, currentPath, result, searched)",
							"(req = {}) =>",
							" () =>",
							" () =>",
							" () =>",
							" url =>",
							" () =>",
							"() =>",
							"() =>",
							"() =>",
							"() =>",
							"() =>",
							"() =>",
							"Util.parseQuery = function(url = ",
							")",
							"Util.encodeQuery = function(data)",
							"Util.parseURL = function(href = this.",
							")",
							"part =>",
							"([k, v]) =>",
							"(acc, m) =>",
							"href(override)",
							"Util.makeURL = function(...args)",
							"Util.numberFromURL = function(url, fn)",
							"Util.tryPromise = fn =>",
							"(resolve, reject) =>",
							"resolve = a =>",
							"reject = () =>",
							"resolve = () =>",
							"reject = () =>",
							"async function(...args)",
							" function(...args)",
							"resolve = a =>",
							"reject = () =>",
							"Util.putError = err =>",
							"() =>",
							" fn =>",
							" ret =>",
							"Util.tryPredicate = (fn, defaultRet) =>",
							" ret =>",
							" () =>",
							"Util.isBrowser = function()",
							" () =>",
							" w =>",
							" () =>",
							" () =>",
							" d =>",
							" () =>",
							"Util.waitFor = async function waitFor(msecs)",
							"({ setTimeout, clearTimeout, setInterval, clearInterval }) =>",
							"async (resolve, reject) =>",
							"() =>",
							"clear = () =>",
							"Util.timeout = async (msecs, promises, promiseClass = Promise) =>",
							"Util.isServer = function()",
							"Util.isMobile = function()",
							"Util.uniquePred = (cmp = null) =>",
							" (el, i, arr) =>",
							"item =>",
							" (el, i, arr) =>",
							"Util.unique = (arr, cmp) =>",
							"cmp = (a, b) =>",
							"(e, i, a) =>",
							"Util.zip = a =>",
							"(a, b) =>",
							"(_, i) =>",
							"arr =>",
							"Util.histogram = (...args) =>",
							" (k, v) =>",
							"initVal = () =>",
							"setVal = v =>",
							"(it, i) =>",
							"(item, i) =>",
							" (entry, idx, key) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"Util.concat = function* (...args)",
							"Util.distinct = function(arr)",
							" (value, index, me) =>",
							"Util.rangeMinMax = function(arr, field)",
							"obj =>",
							"Util.remap = (...args) =>",
							"getR = () =>",
							"r = val =>",
							"Util.mergeLists = function(arr1, arr2, key = 'id')",
							"Util.foreach = function(o, fn)",
							"Util.all = function(obj, pred)",
							"Util.isGenerator = function(fn)",
							"Util.isIterator = obj =>",
							"Util.isIterable = obj =>",
							"x =>",
							"Util.isConstructor = x =>",
							"construct(target, args)",
							"target",
							"x",
							"m =>",
							"Util.filter = function(a, pred)",
							"function* ()",
							"fn = (k, v) =>",
							"Util.reduce = (obj, fn, accu) =>",
							"Util.mapFunctional = fn =>",
							" function* (arg)",
							"Util.map = (...args) =>",
							"ret = a =>",
							"function* ()",
							"ret = a =>",
							"function* ()",
							"Util.entriesToObj = function(arr)",
							"(acc, item) =>",
							"Util.isDate = function(d)",
							"Util.parseDate = function(d)",
							"Util.isoDate = function(date)",
							"Util.toUnixTime = function(dateObj, utc = false)",
							"Util.unixTime = function(utc = false)",
							"Util.fromUnixTime = function(epoch, utc = false)",
							"Util.formatTime = function(date = ",
							"(), format = 'HH:MM:SS')",
							"Util.leapYear = function(year)",
							"Util.timeSpan = function(s)",
							"Util.randFloat = function(min, max, rnd = Util.rng)",
							"Util.randInt = (...args) =>",
							"Util.randStr = (len, charset, rnd = Util.rng) =>",
							"Util.hex = function(num, numDigits)",
							"Util.numberParts = (num, base) =>",
							"Util.roundDigits = precision =>",
							"Util.roundFunction = (prec, digits, type) =>",
							" function(value)",
							"Util.roundTo = function(value, prec, digits, type)",
							"() =>",
							" utf8 =>",
							" v =>",
							" utf8 =>",
							" base64 =>",
							" v =>",
							" string =>",
							"Util.formatRecord = function(obj)",
							"item =>",
							" function(obj)",
							".isArrayLike = obj =>",
							"Util.equals = function(a, b)",
							"(e, i) =>",
							"Util.versionCompare = (a, b) =>",
							"isdigit = c =>",
							"Util.isGetter = (obj, propName) =>",
							"Util.isBool = value =>",
							"Util.size = (...args) =>",
							" function size(obj)",
							"Util.isMap = function(obj)",
							"Util.effectiveDeviceWidth = function()",
							"Util.getFormFields = function(initialState)",
							" (acc, { elements }) =>",
							"(acc2, { name, value }) =>",
							"Util.mergeObjects = function(objArr, predicate = (dst, src, key) => (src[key] == '' ? undefined : src[key]))",
							"Util.getUserAgent = function(headers = req.headers)",
							"Util.factor = function(start, end)",
							"Util.factorial = function(n)",
							"Util.increment = function(obj, key)",
							"Util.counter = function()",
							"self = function()",
							"Util.filterKeys = function(obj, pred = k => true)",
							"pred = str =>",
							"pred = str =>",
							"Util.filterMembers = function(obj, fn)",
							"pred = (k, v, o) =>",
							"Util.filterOutMembers = function(obj, fn)",
							"pred = (v, k, o) =>",
							"Util.dumpMembers = obj =>",
							"Util.filterOutKeys = function(obj, arr)",
							" (v, k, o) =>",
							" (k, v) =>",
							" key =>",
							" () =>",
							" (v, k, o) =>",
							"Util.removeKeys = function(obj, arr)",
							" (v, k, o) =>",
							" (k, v) =>",
							" key =>",
							"Util.getKeys = function(obj, arr)",
							"Util.numbersConvert = function(str)",
							"(ch, i) =>",
							"Util.entries = function(arg)",
							"function* ()",
							"Util.keys = function(arg)",
							" function* ()",
							"Util.values = function(arg)",
							" function* ()",
							"Util.removeEqual = function(a, b)",
							"Util.clear = obj =>",
							"Util.remove = (arr, item) =>",
							" (other, i, arr) =>",
							"Util.removeIf = function(arr, pred)",
							"Util.traverse = function(o, fn)",
							" (v, k, a) =>",
							" function* walker(o, depth = 0)",
							"Util.traverseWithPath = function(o, rootPath = [])",
							" function* walker(o, path)",
							"Util.indexByPath = function(o, p)",
							"Util.pushUnique = (arr, ...args) =>",
							"(acc, item) =>",
							"Util.insertSorted = function(arr, item, cmp = (a, b) => b - a)",
							"next = (k, v) =>",
							" (k, v) =>",
							" (k, v) =>",
							" (k, v) =>",
							"fn = function(key, value)",
							"Util.keyIterator = obj =>",
							"Util.entryIterator = obj =>",
							"function* ()",
							"Util.mapAdapter = getSetFunction =>",
							"get(key)",
							"set(key, value)",
							".keys = () =>",
							".entries = () =>",
							"Util.mapFunction = map =>",
							"fn = function(...args)",
							"m =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".update = function(key, fn = (k, v) => v)",
							".entries = function* ()",
							".values = function* ()",
							".keys = function* ()",
							" function()",
							"([key, value]) =>",
							".keys = async () =>",
							".entries = async () =>",
							".values = async () =>",
							".keys = function* ()",
							".entries = function* ()",
							".values = function* ()",
							".filter = function(pred)",
							"function* ()",
							".map = function(t)",
							"function* ()",
							".forEach = function(fn)",
							".delete = key =>",
							".has = key =>",
							"Util.mapWrapper = (map, toKey = key => key, fromKey = key => key) =>",
							".set = (key, value) =>",
							" (k, v) =>",
							".get = key =>",
							".keys = () =>",
							".entries = function* ()",
							".values = function* ()",
							".has = key =>",
							".delete = key =>",
							"m =>",
							"Util.mapCombinator = (forward, backward) =>",
							"fn = function(key, value)",
							"(a,m) =>",
							" key =>",
							" a =>",
							" function makeGetter(map, next = a => a)",
							" key =>",
							"Util.predicate = (fn_or_regex, pred) =>",
							"fn = arg =>",
							".valueOf = function()",
							" arg =>",
							"Util.some = predicates =>",
							" value =>",
							"pred =>",
							"Util.every = predicates =>",
							" value =>",
							"pred =>",
							"Util.iterateMembers = function* (obj, predicate = (name, depth, obj, proto) => true, depth = 0)",
							" (...predicates) =>",
							" (...args) =>",
							"pred =>",
							" (...predicates) =>",
							" (...args) =>",
							"pred =>",
							"(pred, obj) =>",
							"Util.memberNameFilter = (depth = 1, start = 0) =>",
							" (m, l, o) =>",
							" (m, l, o) =>",
							" (name, depth, obj, proto) =>",
							"Util.getMemberNames = (obj, ...args) =>",
							"Util.getMemberEntries = (obj, ...args) =>",
							"name =>",
							"accFn = (a, m, o) =>",
							" (obj, ...args) =>",
							" (a, m) =>",
							" (r, a, m) =>",
							" (r, a) =>",
							"incFn = (c, n, self) =>",
							"incFn = (c, n, self) =>",
							"inc = (i, n = 1) =>",
							"self = function Count(n = 1)",
							".valueOf = function()",
							"filterFn = (key, value) =>",
							"(acc, mem, idx) =>",
							" r =>",
							" () =>",
							"fn = function ReduceIntoMap(arg, acc = mapObj)",
							"(acc, arg) =>",
							" (a, m, o) =>",
							"Util.methodNameFilter = (depth = 1, start = 0) =>",
							" (m, l, o) =>",
							" () =>",
							" b =>",
							" () =>",
							"Util.getMethodNames = (obj, depth = 1, start = 0) =>",
							" (a, m, o) =>",
							"Util.inherit = (dst, src, depth = 1) =>",
							" function inherits(ctor, superCtor)",
							"ctor",
							"superCtor",
							" function inherits(ctor, superCtor)",
							"TempCtor = function()",
							"TempCtor",
							"superCtor",
							"ctor",
							"ctor",
							"Util.bindMethods = (obj, methods, dest) =>",
							"Util.getConstructor = obj =>",
							"Util.getPrototypeChain = function(obj, fn = p => p)",
							"Util.getObjectChain = (obj, fn = p => p) =>",
							"Util.getPropertyDescriptors = function(obj)",
							" p =>",
							"fn = (c, p) =>",
							" (p, o) =>",
							"Util.weakDefine = function(...args)",
							"other =>",
							"Util.exception = function Exception(...args)",
							"toString(color = false)",
							"Util.location = function Location(...args)",
							"toString(color = false)",
							" t =>",
							"getFileName()",
							"getLineNumber()",
							"getColumnNumber()",
							"Util.stackFrame = function StackFrame(frame)",
							"prop =>",
							"propertyMap()",
							"method =>",
							"([method, func]) =>",
							"getFunction()",
							"getMethodName()",
							"getFunctionName()",
							"getTypeName()",
							"getFileName()",
							"getLineNumber()",
							"getColumnNumber()",
							"get()",
							"toString(color, opts = {})",
							" (t, color) =>",
							" t =>",
							"p =>",
							"p =>",
							"(f, i) =>",
							"getLocation()",
							"get location()",
							"Util.scriptName = () =>",
							" () =>",
							" args =>",
							" () =>",
							"Util.getFunctionName = () =>",
							"Util.getFunctionArguments = fn =>",
							"Util.scriptDir = () =>",
							" () =>",
							" script =>",
							" () =>",
							"Util.stack = function Stack(stack, offset)",
							"frame =>",
							"([m, p]) =>",
							" (acc, [method, property]) =>",
							" function getStack()",
							".prepareStackTrace = (_, stack) =>",
							" function stackToString(st, start = 0)",
							"function* ()",
							"frame =>",
							"part =>",
							"frame =>",
							"([func, file]) =>",
							"n =>",
							"([func, file]) =>",
							"([func, [columnNumber, lineNumber, ...file]]) =>",
							"({ methodName, functionName: func, fileName: file, columnNumber: column, lineNumber: line }) =>",
							" s =>",
							" s =>",
							" () =>",
							" s =>",
							" s =>",
							" () =>",
							"frame =>",
							"frame =>",
							"get: () =>",
							"get: () =>",
							"*value()",
							"toString(opts = {})",
							"f =>",
							"getFunctionName()",
							"getMethodName()",
							"getFileName()",
							"getLineNumber()",
							"get()",
							"(a, f) =>",
							"(fn, i) =>",
							"Util.getCallerStack = function(position = 2, limit = 1000, stack)",
							".prepareStackTrace = (_, stack) =>",
							"Util.getCallerFile = function(position = 2)",
							"Util.getCallerFunction = function(position = 2)",
							"Util.getCallerFunctionName = function(position = 2)",
							"Util.getCallerFunctionNames = function(position = 2)",
							"Util.getCaller = function(index = 1, stack)",
							"f =>",
							"Util.getCallers = function(index = 1, num = Number.MAX_SAFE_INTEGER, stack)",
							"f =>",
							"Util.getStackFrames = function(offset = 2)",
							"frame =>",
							"Util.getStackFrame = function(offset = 2)",
							"Util.rotateLeft = function(x, n)",
							"Util.rotateRight = function(x, n)",
							"Util.hashString = function(string, bits = 32, mask = 0xffffffff)",
							"Util.flatTree = function(tree, addOutput)",
							"addOutput = arg =>",
							" key =>",
							"Util.traverseTree = function(tree, fn, depth = 0, parent = null)",
							"Util.walkTree = function(node, pred, t, depth = 0, parent = null)",
							"function* ()",
							"pred = i =>",
							"t = function(i)",
							"Util.isPromise = function(obj)",
							"setImmediate = fn =>",
							"Util.next = function(iter, observer, prev = undefined)",
							"val =>",
							"() =>",
							"err =>",
							"() =>",
							"Util.getImageAverageColor = function(imageElement, options)",
							"toStringRgb()",
							"toStringRgba()",
							"toStringHex()",
							"toHex = function(d)",
							"Util.jsonToObject = function(jsonStr)",
							"Util.splitLines = function(str, max_linelen = Number.MAX_SAFE_INTEGER)",
							"Util.splitAt = function* (str, ...indexes)",
							"(a, b) =>",
							"Util.decodeEscapes = function(text)",
							"m =>",
							"([s, t]) =>",
							"Util.stripXML = text =>",
							"Util.stripHTML = html =>",
							"p =>",
							"p =>",
							"Util.stripNonPrintable = text =>",
							"Util.decodeHTMLEntities = function(text)",
							" (match, entity) =>",
							"Util.encodeHTMLEntities = (str, charset = '\\u00A0-\\u9999<>&') =>",
							" i =>",
							"Util.stripAnsi = function(str)",
							"Util.proxy = (obj = {}, handler) =>",
							"get(target, key, receiver)",
							"set(target, key, value, receiver)",
							"Util.propertyLookup = (obj = {}, handler = key => null) =>",
							"get(target, key, receiver)",
							"Util.traceProxy = (obj, handler) =>",
							" function(name, args)",
							"get(target, key, receiver)",
							"member = function()",
							"Util.proxyTree = function proxyTree(...callbacks)",
							"applyCallback = () =>",
							"get(target, key)",
							"set(target, key, value)",
							"apply(target, thisArg, args)",
							" function node(path)",
							"() =>",
							"Util.construct = constructor =>",
							" function F(args)",
							"F",
							"constructor",
							"Util.constructApply = (constructor, array) =>",
							"Util.immutable = args =>",
							"set: () =>",
							"deleteProperty: () =>",
							"defineProperty: () =>",
							"Util.immutableClass = (orig, ...proto) =>",
							"p =>",
							" ctor =>",
							"ctor",
							"imm = base =>",
							"constructor(...args)",
							"Util.partial = function partial(fn /*, arg1, arg2 etc */)",
							" function()",
							"(min, max, value) =>",
							"Util.coloring = (useColor = true) =>",
							"code(...args)",
							"text(text)",
							"concat(...args)",
							"code(...args)",
							"text(text, ...color)",
							"concat(...args)",
							"code(...args)",
							"text(text, ...color)",
							"concat(...args)",
							"Util.colorText = (...args) =>",
							"Util.decodeAnsi = (str, index) =>",
							"isDigit = c =>",
							"notDigit = c =>",
							"findIndex = (pred, start) =>",
							"Util.stripAnsi = str =>",
							"Util.ansiCode = (...args) =>",
							"Util.wordWrap = (str, width, delimiter) =>",
							"Util.multiParagraphWordWrap = (str, width, delimiter) =>",
							"Util.defineInspect = (proto, ...props) =>",
							" function()",
							"(acc, key) =>",
							"(a, b, value) =>",
							"Util.bindProperties = (proxy, target, props, gen) =>",
							"name =>",
							"(acc, name) =>",
							" p => v =>",
							"k =>",
							" (a, [k, v]) =>",
							" (...args) =>",
							"(...args) =>",
							" (a, k) =>",
							"get: () =>",
							"get: () =>",
							"function ()",
							" obj =>",
							"on: val =>",
							"off: val =>",
							"true: val =>",
							"false: val =>",
							"AssertionFailed",
							"constructor(message, stack)",
							"Util.assert = function assert(val, message)",
							"Util.assertEqual = function assertEqual(val1, val2, message)",
							"Util.assignGlobal = () =>",
							"Util.weakMapper = function(createFn, map = ",
							"(), hitFn)",
							"self = function(obj, ...args)",
							".set = (k, v) =>",
							".get = k =>",
							"Util.merge = function(...args)",
							" a =>",
							" a =>",
							"(acc, arg) =>",
							"Util.transformer = (a, ...l) =>",
							" (c, f) =>",
							" function(...v)",
							"Util.copyTextToClipboard = (i, t) =>",
							"async module =>",
							"(a, b, c) =>",
							"() =>",
							"Util.toPlainObject = obj =>",
							" v =>",
							"Util.toBuiltinObject = obj =>",
							" v =>",
							"t = (v, n) =>",
							"(acc, k) =>",
							"Util.timer = msecs =>",
							"remaining = () =>",
							"finish = callback =>",
							"log = (method, ...args) =>",
							"obj =>",
							" v =>",
							"timeout = (msecs, tmr = timer) =>",
							"() =>",
							" (...args) =>",
							" () =>",
							"add = (arr, ...items) =>",
							"get delay()",
							"get created()",
							"get start()",
							"get stop()",
							"get elapsed()",
							"get end()",
							"get remain()",
							"cancel()",
							"pause()",
							".resume = function()",
							".restart = function()",
							"callback(...args)",
							"subscribe(f)",
							"unsubscribe(f)",
							"start = () =>",
							"(resolve, reject) =>",
							"Util.thenableReject = error =>",
							"then: (resolve, reject) =>",
							"Util.wrapGenerator = fn =>",
							" function(...args)",
							"Util.wrapGeneratorMethods = obj =>",
							"Util.decorateIterable = (proto, generators = false) =>",
							"forEach(fn, thisArg)",
							"*map(fn, thisArg)",
							"*filter(pred, thisArg)",
							"findIndex(pred, thisArg)",
							"indexOf(item, startIndex = -1)",
							"(e, i) =>",
							"find(pred, thisArg)",
							"every(pred, thisArg)",
							"some(pred, thisArg)",
							"reduce(fn, accu)",
							"*entries()",
							"*keys()",
							"*values()",
							"Util.swap = (a, b) =>",
							"Util.swapArray = ([a, b]) =>",
							"Util.cacheAdapter = (st, defaultOpts = {}) =>",
							" () =>",
							"async c =>",
							" () =>",
							"async getItem(request, opts = {})",
							"async setItem(request, response)",
							"async addItem(request)",
							"async removeItem(request, opts = {})",
							"async key(index)",
							"async keys(urls = false, t = a => a)",
							"response =>",
							"r =>",
							"async clear()",
							"Util.cachedFetch = (allOpts = {}) =>",
							"() =>",
							"self = async function CachedFetch(request, opts = {})",
							"(returnValue, fn, ...args) =>",
							"Util.proxyObject = (root, handler) =>",
							"ptr = path =>",
							"(a, i) =>",
							" (value, path) =>",
							"get(target, key)",
							" function node(path)",
							"Util.parseXML = function(xmlStr)",
							" () =>",
							" parser =>",
							"fn = (value, ...args) =>",
							" () =>",
							" map =>",
							"(obj, ...args) =>",
							" () =>",
							" (obj, ...args) =>",
							"self = (obj, ...args) =>",
							"() =>",
							" () =>",
							" a =>",
							" () =>",
							" () =>",
							" fn =>",
							" () =>",
							" () =>",
							" a =>",
							"() =>",
							" () =>",
							" a =>",
							" () =>",
							"() =>",
							"Util.getOpt = (options = {}, args) =>",
							"findOpt = arg =>",
							"([optname, option]) =>",
							"opt =>",
							" () =>",
							" v =>",
							" () =>",
							" () =>",
							" v =>",
							"Util.getEnv = async varName =>",
							" () =>",
							"async e =>",
							" () =>",
							"Util.getEnvVars = async () =>",
							" () =>",
							"async e =>",
							" () =>",
							"Util.safeFunction = (fn, trapExceptions, thisObj) =>",
							"async function(...args)",
							" function(...args)",
							" a =>",
							" error =>",
							"Util.safeCall = (fn, ...args) =>",
							"Util.safeApply = (fn, args = []) =>",
							"Util.exit = exitCode =>",
							"stdExit = std =>",
							" () =>",
							" ([obj, exit]) =>",
							" () =>",
							"Util.atexit = handler =>",
							"Util.callMain = async (fn, trapExceptions) =>",
							"async (...args) =>",
							"async ret =>",
							"() =>",
							" err =>",
							" () =>",
							" argv1 =>",
							"Util.printReturnValue = (fn, opts = {}) =>",
							"print = (returnValue, fn, ...args) =>",
							"self = (...args) =>",
							"Util.replaceAll = (needles, haystack) =>",
							"([re, str]) =>",
							"(acc, [match, replacement]) =>",
							"Util.quote = (str, q = '\"') =>",
							"Util.escape = (str, pred = codePoint => codePoint < 32 || codePoint > 0xff) =>",
							"Util.escapeRegex = string =>",
							"Util.consolePrinter = function ConsolePrinter(log = console.log)",
							"self = function(...args)",
							".log = (...args) =>",
							"Util.consoleJoin = function(...args)",
							"Util.consoleConcat = function(...args)",
							"self = function ConsoleConcat(...args)",
							"clear()",
							"log = (...args) =>",
							"print()",
							"i =>",
							"output()",
							"add(...args)",
							"Util.booleanAdapter = (getSetFn, trueValue = 1, falseValue = 0) =>",
							" function(value)",
							"set = () =>",
							" function(...args)",
							"Util.deriveGetSet = (fn, get = v => v, set = v => v, thisObj) =>",
							" () =>",
							" v =>",
							"handler = () =>",
							"ExFunc",
							"constructor()",
							"__call__(...args)",
							"Util.isatty = async fd =>",
							"mod =>",
							"Util.ttyGetWinSize = (fd = 1) =>",
							"m =>",
							" (resolve, reject) =>",
							" (resolve, reject) =>",
							"Util.stdio = (fd, mode = true) =>",
							"Util.signal = (num, act) =>",
							"m =>",
							"() =>",
							"Util.timeit = (fn, args = [], options = {}) =>",
							"(p, c) =>",
							"Util.lazyProperty = (obj, name, getter, opts = {}) =>",
							"replaceProperty = value =>",
							"async function()",
							" function()",
							"v =>",
							"Util.lazyProperties = (obj, gettersObj, opts = {}) =>",
							"f = (a, b) =>",
							" function(a, b)",
							"(a, b) =>",
							"(a, b) =>",
							"() =>",
							"HighResolutionTime",
							"constructor(secs = 0, nano = 0)",
							"static create(s, n)",
							"get seconds()",
							"get milliseconds()",
							"get nanoseconds()",
							"diff(o)",
							"sum(o)",
							"since(o)",
							"toString()",
							"inspect()",
							"async function hrtime(previousTimestamp)",
							" function hrtime(previousTimestamp)",
							" () =>",
							" (minDelay = 0) =>",
							"resolve =>",
							"resolve =>",
							" function animationFrame(t)",
							"Util.getNow = () =>",
							"performanceNow = () =>",
							"performanceNow = async function(clock = CLOCK_MONOTONIC_RAW)",
							"gettime = (clk_id, tp) =>",
							"Util.formatColumns = a =>",
							"(acc, row, i) =>",
							"(col, j) =>",
							"row =>",
							"(col, j) =>",
							"Util.getPlatform = () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							"async () =>",
							"Util.colIndexes = line =>",
							"([prev, cols], char, i) =>",
							"Util.colSplit = (line, indexes) =>",
							"map = (name, flag) =>",
							" function* (value)",
							"log = (duration, name, args, ret) =>",
							"async (args, ret) =>",
							" (args, ret) =>",
							"async function(...args)",
							" function(...args)",
							"both = () =>",
							"(name, args) =>",
							"arg =>",
							"(name, ret) =>",
							" function(...args)",
							"Util.bind = function(f, ...args)",
							"ret = function()",
							"ret = function()",
							"ret",
							"f",
							"Util.bytesToUTF8 = function* (bytes)",
							"Util.codePointsToString = codePoints =>",
							"Util.bufferToString = b =>",
							"Util.levenshteinDistance = function levenshteinDistance(a, b)",
							"Util.padTrunc = (...args) =>",
							" (s, pad = ' ') =>",
							"Util.setReadHandler = (fd, handler) =>",
							"os =>",
							" function glob(pattern, flags, errfunc = (path, errno) => {}, arr)",
							" function define(obj, ...args)",
							" function hasGetSet(obj)",
							"m =>",
							" function isObject(v)",
							" function isFunction(v)",
							" function isNumber(v)",
							" function gettersetter(target, ...args)",
							"fn = (...args) =>",
							" (...args2) =>",
							"fn = (...args) =>",
							"fn = (...args) =>",
							"fn = (...args) =>",
							"fn = (...args) =>",
							" (...args2) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADDBwAAICBrZXkgPT4KKGtleSwgdmFsdWUpID0+CnYgPT4KdiA9PgooKSA9PgpvID0+ClJhbmRvbUJ5dGUoKQpNb2R1bG8obiwgbSkKICBpc05hdGl2ZU9iamVjdChvYmopCk9iamVjdDJKU09OKG9iaikKQ29weU9iamVjdChvYmopCkNyZWF0ZVBhbGV0dGUoKQpDcmVhdGVQYWxldHRlSFNMKCkKICB2ID0+CigpID0+CnYgPT4KICBiID0+CkRyYXdMaXN0CiAgY29uc3RydWN0b3IoKQogIGluc2VydChpdGVtKQppdCA9PgppdCA9PgpBbGxQYXJlbnRzKGVsZW0pCiAgZ2V0VHJhbnNmb3JtYXRpb25MaXN0KGUpCkRlY29tcG9zZVRyYW5zZm9ybUxpc3QoZWxlbSkKICBkcmF3UmVjdChyZWN0LCBzdHJva2UgPSAnIzBmMCcpCkdldEVsZW1lbnRNYXRyaXgoZWxlbWVudCkKU2V0Q3Jvc3NoYWlyKHBvcykKRXZlbnRQb3NpdGlvbnMoZXZlbnRPclRvdWNoKQogIG4gPT4KICBuID0+CihhY2MsIGtleSkgPT4KUG9zaXRpb25NYXRyaXgoY2FudmFzID0gCignY2FudmFzJyksIHJlY3QpClBvc2l0aW9uTWF0cml4MihlbGVtZW50ID0gY2FudmFzRWxlbWVudCkKUG9zaXRpb25Qcm9jZXNzb3IoY2FudmFzID0gCignY2FudmFzJyksIHJlY3QpCnBvcyA9PgpQcm9jZXNzUG9zaXRpb24ocG9zKQpUb3VjaFRyYW5zZm9ybWVyKHRmbiA9ICh4LCB5KSA9PiBbeCwgeV0pCnRvdWNoID0+ClRvdWNoUHJpbnRlcihpdGVyKQpHZW5lcmljUHJpbnRlcihpdGVyKQpUcmFuc2Zvcm1lcih0KQooaXRlcikKTW91c2VUb1RvdWNoKGV2ZW50KQpDYXRjaEl0ZXJhdG9yKGl0KQpUb3VjaEl0ZXJhdG9yKGVsZW1lbnQsIHQpCih4LCB5KSA9PgpNb3ZlSXRlcmF0b3IoZXZlbnRJdGVyYXRvcikKICBtYWluKCkKICBjaWQ6ICgpID0+CiAgY3VycmVudFVSTDogKCkgPT4KICBjdXJyZW50RmlsZTogKCkgPT4KUmVwYXJlbnQoY2FudmFzID0gZG9jdW1lbnQuCignY2FudmFzJylbMF0pCih2LCBpKSA9PgogIGFuaW1hdGlvbkZyYW1lID0gKG1pbkRlbGF5ID0gMCkgPT4KICByZXNvbHZlID0+CiAgcmVzb2x2ZSA9PgogIGFuaW1hdGlvbkZyYW1lKHQpCkxvb3AoKQogIGxvZyA9ICh0LCBuYW1lKSA9PgogIGZpcmUgPSAoLi4uYXJncykgPT4KICByZWRyYXcgPSAoLi4uYXJncykgPT4KRmlyZSgpCihhLCBwKSA9PgpSZWRyYXcoKQpEcmF3KHgsIHksIHRpbWUgPSBwZXJmb3JtYW5jZS4KKQpCcmVzZW5oYW0oeDAsIHkwLCB4MSwgeTEpCkJsYXplKHgsIHksIHIpClB1dEFycmF5KHgsIHksIGEpClB1dEFycmF5Mih4LCB5LCBhKQogIG9uT3BlbigpCktleUhhbmRsZXIoa2V5KQooKSA9PgpJbnB1dEhhbmRsZXIoKQooKSA9PgooKSA9PgpTZW5kVHJhaWwoc3RhcnQgPSB0aW1lZ2VuLnN0YXJ0KQooKSA9PgooKSA9PgplcnJvciA9PgpJbml0KCkKICBjYW52YXNFbGVtZW50OiAoKSA9PgogIGRpdkVsZW1lbnQ6ICgpID0+CiAgaHRtbEVsZW1lbnQ6ICgpID0+CiAgZ2Z4UmVjdDogKCkgPT4KICB3aW5kb3dSZWN0OiAoKSA9PgogIHdpbmRvd1NpemU6ICgpID0+CiAgc2Nyb2xsUG9zOiAoKSA9PgogIGJvZHlSZWN0OiAoKSA9PgogIGNhbnZhc1JlY3Q6ICgpID0+CigpID0+CnZhbHVlID0+ClNWR1BvbHlsaW5lID0gKHsgcG9pbnRzLCAuLi5wcm9wcyB9KSA9PgogIHB0ID0+ClNWR0NvbXBvbmVudCA9ICh7IGNpcmNsZSwgcG9pbnRzLCAuLi5wcm9wcyB9KSA9PgogIGZ1bmN0aW9uKCkKUmVzaXplSGFuZGxlcigpClBhcnNlSlNPTihzKQpSZXBsYXlUcmFpbCh0cmFpbCwgdGltZSA9IHBlcmZvcm1hbmNlLgorIDIwKQpOZXdXUyhoYW5kbGVycykKICBnZXQgd3MoKQogIGZ1bmN0aW9uKCkKTWFrZVVVSUQocm5nID0gTWF0aC5yYW5kb20pCiAgbiA9PgpNYWtlQ2xpZW50SUQocm5nID0gTWF0aC5yYW5kb20pCiAgbiA9PgpMb2FkV0FTTShmaWxlID0gJ2ZpcmUvYnVpbGQvZmlyZS53YXNtJykKRWxlbWVudE5hbWUoZSkKVGFyZ2V0TmFtZShlKQpHZXRSZWN0cygpClNlbmRXUyhtc2cpClRvZ2dsZUNsYXNzKGVsZW1lbnQsIG5hbWUpCiguLi5hcmdzKSA9PgogIHN5bmNIZWlnaHQoKQAAAAAAAAAAgWcAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					5,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/xml/util.js",
						"symkeys":
						[
							[
								167,
								199
							],
							[
								269,
								280
							],
							[
								372,
								388
							],
							[
								520,
								531
							],
							[
								560,
								580
							],
							[
								650,
								698
							],
							[
								1016,
								1028
							],
							[
								1100,
								1106
							],
							[
								1261,
								1278
							],
							[
								1520,
								1551
							],
							[
								1610,
								1650
							],
							[
								1840,
								1846
							],
							[
								1915,
								1948
							],
							[
								2057,
								2066
							],
							[
								2089,
								2135
							],
							[
								2261,
								2274
							],
							[
								2424,
								2447
							],
							[
								2491,
								2507
							],
							[
								2565,
								2583
							],
							[
								2682,
								2707
							],
							[
								2823,
								2833
							],
							[
								3252,
								3261
							],
							[
								3316,
								3325
							],
							[
								3394,
								3403
							]
						],
						"symlist":
						[
							"Object2Array = (xmlObj, flat) =>",
							"([k, v]) =>",
							"(acc, [k, v]) =>",
							"XMLIterator",
							"constructor(...args)",
							"static *iterate(node, f = null, path = [], root)",
							"XMLAttribute",
							"obj =>",
							"(acc, name, i) =>",
							"static getByName(name, element)",
							"static getOrCreate(name, element, value)",
							" () =>",
							"constructor(name, element, value)",
							"XMLObject",
							"constructor({ attributes, children, tagName })",
							"(acc, key) =>",
							"static toArray(...args)",
							"get attributes()",
							"getAttribute(name)",
							"setAttribute(name, value)",
							"toObject()",
							"XMLObject",
							"XMLObject",
							"XMLObject"
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				],
				[
					6,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/ol-map.js",
						"symkeys":
						[
							[
								2521,
								2550
							],
							[
								2649,
								2690
							],
							[
								2895,
								2924
							],
							[
								3309,
								3330
							],
							[
								3398,
								3418
							],
							[
								3804,
								3808
							],
							[
								4444,
								4456
							],
							[
								4830,
								4851
							],
							[
								5542,
								5547
							],
							[
								5596,
								5606
							],
							[
								5844,
								5858
							],
							[
								6546,
								6563
							],
							[
								6648,
								6652
							],
							[
								6686,
								6690
							]
						],
						"symlist":
						[
							"function SetFenceColor(color)",
							"function FlyTo(location, done = () => {})",
							" function callback(complete)",
							"function Get(feature)",
							"function CreateMap()",
							"a =>",
							" function(e)",
							"([name, geometry]) =>",
							"get()",
							"set(value)",
							" function(evt)",
							"async response =>",
							"u =>",
							"u =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAEAgAAT2JqZWN0MkFycmF5ID0gKHhtbE9iaiwgZmxhdCkgPT4KKFtrLCB2XSkgPT4KKGFjYywgW2ssIHZdKSA9PgpYTUxJdGVyYXRvcgogIGNvbnN0cnVjdG9yKC4uLmFyZ3MpCiAgc3RhdGljICppdGVyYXRlKG5vZGUsIGYgPSBudWxsLCBwYXRoID0gW10sIHJvb3QpClhNTEF0dHJpYnV0ZQogIG9iaiA9PgooYWNjLCBuYW1lLCBpKSA9PgogIHN0YXRpYyBnZXRCeU5hbWUobmFtZSwgZWxlbWVudCkKICBzdGF0aWMgZ2V0T3JDcmVhdGUobmFtZSwgZWxlbWVudCwgdmFsdWUpCigpID0+CiAgY29uc3RydWN0b3IobmFtZSwgZWxlbWVudCwgdmFsdWUpClhNTE9iamVjdAogIGNvbnN0cnVjdG9yKHsgYXR0cmlidXRlcywgY2hpbGRyZW4sIHRhZ05hbWUgfSkKKGFjYywga2V5KSA9PgogIHN0YXRpYyB0b0FycmF5KC4uLmFyZ3MpCiAgZ2V0IGF0dHJpYnV0ZXMoKQogIGdldEF0dHJpYnV0ZShuYW1lKQogIHNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSkKICB0b09iamVjdCgpClhNTE9iamVjdApYTUxPYmplY3QKWE1MT2JqZWN0AAAAAAAAAADLAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					7,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/ol-helpers.js",
						"symkeys":
						[
							[
								570,
								609
							],
							[
								792,
								807
							],
							[
								946,
								950
							],
							[
								966,
								997
							],
							[
								1169,
								1179
							],
							[
								1218,
								1234
							],
							[
								1750,
								1777
							],
							[
								2001,
								2013
							],
							[
								2037,
								2056
							],
							[
								2131,
								2148
							],
							[
								2461,
								2471
							],
							[
								2518,
								2528
							],
							[
								2577,
								2586
							],
							[
								2629,
								2639
							],
							[
								2670,
								2680
							],
							[
								2736,
								2739
							],
							[
								2772,
								2784
							],
							[
								2803,
								2806
							],
							[
								2822,
								2844
							],
							[
								3259,
								3272
							],
							[
								3316,
								3330
							],
							[
								3407,
								3426
							],
							[
								3544,
								3551
							],
							[
								3604,
								3616
							],
							[
								3642,
								3649
							],
							[
								3680,
								3698
							],
							[
								3863,
								3870
							],
							[
								3971,
								4003
							],
							[
								4309,
								4316
							],
							[
								4454,
								4466
							],
							[
								4545,
								4558
							],
							[
								4797,
								4813
							],
							[
								4974,
								4979
							],
							[
								5012,
								5024
							],
							[
								5045,
								5050
							],
							[
								5066,
								5146
							],
							[
								5764,
								5777
							],
							[
								5823,
								5837
							],
							[
								5911,
								5925
							],
							[
								6013,
								6026
							],
							[
								6136,
								6168
							]
						],
						"symlist":
						[
							" function TransformCoordinates(...args)",
							"(acc, coord) =>",
							"n =>",
							" function ParseCoordinates(str)",
							"Coordinate",
							"static from(arg)",
							"constructor(lon, lat, type)",
							"get length()",
							"convertTo(destType)",
							"distanceTo(other)",
							"toString()",
							"toLonLat()",
							"toPoint()",
							"Coordinate",
							"Coordinate",
							"Pin",
							"(...args) =>",
							"Pin",
							"static create(...args)",
							"get feature()",
							"get position()",
							"set position(value)",
							"Markers",
							"(...args) =>",
							"Markers",
							"static create(map)",
							"Markers",
							"get: (target, prop, receiver) =>",
							"at(pos)",
							"get length()",
							"add(...items)",
							"remove(...items)",
							"Popup",
							"(...args) =>",
							"Popup",
							"static create(content, offset = [0, 0], position, positioning = 'center-center')",
							"get overlay()",
							"get position()",
							"get position()",
							"OpenlayersMap",
							"static create(target = 'mapdiv')"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADLAAAAU2V0RmVuY2VDb2xvcihjb2xvcikKRmx5VG8obG9jYXRpb24sIGRvbmUgPSAoKSA9PiB7fSkKICBjYWxsYmFjayhjb21wbGV0ZSkKR2V0KGZlYXR1cmUpCkNyZWF0ZU1hcCgpCiAgYSA9PgpmdW5jdGlvbihlKQooW25hbWUsIGdlb21ldHJ5XSkgPT4KICBnZXQoKQogIHNldCh2YWx1ZSkKZnVuY3Rpb24oZXZ0KQogIHJlc3BvbnNlID0+CiAgdSA9PgogIHUgPT4AAAAAAAAAAMgCAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					8,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/ol.js",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADIAgAAVHJhbnNmb3JtQ29vcmRpbmF0ZXMoLi4uYXJncykKKGFjYywgY29vcmQpID0+CiAgbiA9PgpQYXJzZUNvb3JkaW5hdGVzKHN0cikKQ29vcmRpbmF0ZQogIHN0YXRpYyBmcm9tKGFyZykKICBjb25zdHJ1Y3Rvcihsb24sIGxhdCwgdHlwZSkKICBnZXQgbGVuZ3RoKCkKICBjb252ZXJ0VG8oZGVzdFR5cGUpCiAgZGlzdGFuY2VUbyhvdGhlcikKICB0b1N0cmluZygpCiAgdG9Mb25MYXQoKQogIHRvUG9pbnQoKQpDb29yZGluYXRlCkNvb3JkaW5hdGUKUGluCiguLi5hcmdzKSA9PgpQaW4KICBzdGF0aWMgY3JlYXRlKC4uLmFyZ3MpCiAgZ2V0IGZlYXR1cmUoKQogIGdldCBwb3NpdGlvbigpCiAgc2V0IHBvc2l0aW9uKHZhbHVlKQpNYXJrZXJzCiguLi5hcmdzKSA9PgpNYXJrZXJzCiAgc3RhdGljIGNyZWF0ZShtYXApCk1hcmtlcnMKICBnZXQ6ICh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSA9PgogIGF0KHBvcykKICBnZXQgbGVuZ3RoKCkKICBhZGQoLi4uaXRlbXMpCiAgcmVtb3ZlKC4uLml0ZW1zKQpQb3B1cAooLi4uYXJncykgPT4KUG9wdXAKICBzdGF0aWMgY3JlYXRlKGNvbnRlbnQsIG9mZnNldCA9IFswLCAwXSwgcG9zaXRpb24sIHBvc2l0aW9uaW5nID0gJ2NlbnRlci1jZW50ZXInKQogIGdldCBvdmVybGF5KCkKICBnZXQgcG9zaXRpb24oKQogIGdldCBwb3NpdGlvbigpCk9wZW5sYXllcnNNYXAKICBzdGF0aWMgY3JlYXRlKHRhcmdldCA9ICdtYXBkaXYnKQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					9,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/ol-helpers.js",
						"symkeys":
						[
							[
								570,
								609
							],
							[
								792,
								807
							],
							[
								946,
								950
							],
							[
								966,
								997
							],
							[
								1169,
								1179
							],
							[
								1218,
								1234
							],
							[
								1750,
								1777
							],
							[
								2001,
								2013
							],
							[
								2037,
								2056
							],
							[
								2131,
								2148
							],
							[
								2461,
								2471
							],
							[
								2518,
								2528
							],
							[
								2577,
								2586
							],
							[
								2629,
								2639
							],
							[
								2670,
								2680
							],
							[
								2736,
								2739
							],
							[
								2772,
								2784
							],
							[
								2803,
								2806
							],
							[
								2822,
								2844
							],
							[
								3259,
								3272
							],
							[
								3316,
								3330
							],
							[
								3407,
								3426
							],
							[
								3544,
								3551
							],
							[
								3604,
								3616
							],
							[
								3642,
								3649
							],
							[
								3680,
								3698
							],
							[
								3863,
								3870
							],
							[
								3971,
								4003
							],
							[
								4309,
								4316
							],
							[
								4454,
								4466
							],
							[
								4545,
								4558
							],
							[
								4797,
								4813
							],
							[
								4974,
								4979
							],
							[
								5012,
								5024
							],
							[
								5045,
								5050
							],
							[
								5066,
								5146
							],
							[
								5764,
								5777
							],
							[
								5823,
								5837
							],
							[
								5911,
								5925
							],
							[
								6013,
								6026
							],
							[
								6136,
								6168
							]
						],
						"symlist":
						[
							" function TransformCoordinates(...args)",
							"(acc, coord) =>",
							"n =>",
							" function ParseCoordinates(str)",
							"Coordinate",
							"static from(arg)",
							"constructor(lon, lat, type)",
							"get length()",
							"convertTo(destType)",
							"distanceTo(other)",
							"toString()",
							"toLonLat()",
							"toPoint()",
							"Coordinate",
							"Coordinate",
							"Pin",
							"(...args) =>",
							"Pin",
							"static create(...args)",
							"get feature()",
							"get position()",
							"set position(value)",
							"Markers",
							"(...args) =>",
							"Markers",
							"static create(map)",
							"Markers",
							"get: (target, prop, receiver) =>",
							"at(pos)",
							"get length()",
							"add(...items)",
							"remove(...items)",
							"Popup",
							"(...args) =>",
							"Popup",
							"static create(content, offset = [0, 0], position, positioning = 'center-center')",
							"get overlay()",
							"get position()",
							"get position()",
							"OpenlayersMap",
							"static create(target = 'mapdiv')"
						]
					},
					"AQAAAAAAAAAAAAAAyAIAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					10,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/dom-old.js",
						"symkeys":
						[
							[
								1296,
								1311
							],
							[
								1368,
								1394
							],
							[
								1446,
								1458
							],
							[
								1740,
								1746
							],
							[
								2104,
								2119
							],
							[
								2168,
								2187
							],
							[
								2258,
								2272
							],
							[
								2403,
								2426
							],
							[
								2437,
								2467
							],
							[
								2519,
								2548
							],
							[
								2622,
								2632
							],
							[
								2811,
								2843
							],
							[
								2892,
								2904
							],
							[
								2953,
								2966
							],
							[
								3045,
								3060
							],
							[
								3112,
								3132
							],
							[
								3232,
								3243
							],
							[
								3291,
								3306
							],
							[
								3409,
								3431
							],
							[
								3597,
								3607
							],
							[
								3680,
								3726
							],
							[
								3846,
								3859
							],
							[
								3927,
								3941
							],
							[
								3960,
								3973
							],
							[
								4027,
								4033
							],
							[
								4058,
								4076
							],
							[
								4099,
								4112
							],
							[
								4139,
								4148
							],
							[
								4461,
								4480
							],
							[
								6546,
								6566
							],
							[
								6577,
								6647
							],
							[
								6978,
								7004
							],
							[
								7016,
								7017
							],
							[
								7058,
								7089
							],
							[
								7233,
								7251
							],
							[
								7358,
								7384
							],
							[
								7555,
								7582
							],
							[
								7726,
								7735
							],
							[
								7909,
								7926
							],
							[
								7957,
								7976
							],
							[
								8062,
								8069
							],
							[
								8139,
								8146
							],
							[
								8200,
								8212
							],
							[
								8532,
								8555
							],
							[
								8610,
								8616
							],
							[
								8621,
								8641
							],
							[
								8711,
								8737
							],
							[
								9237,
								9256
							],
							[
								9399,
								9409
							],
							[
								9414,
								9437
							]
						],
						"symlist":
						[
							" function dom()",
							"extend = (e, functions) =>",
							" key =>",
							"arg =>",
							"isNumber = a =>",
							" function Unit(str)",
							"format(number)",
							" function ScalarValue()",
							"ifdef = (value, def, nodef) =>",
							"ElementTransformation = () =>",
							"toString()",
							"CSSTransformSetters = element =>",
							"get rotate()",
							"set rotate(a)",
							"get translate()",
							"set translate(point)",
							"get scale()",
							"set scale(size)",
							"updateTransformation()",
							"Transition",
							"constructor(property, delay, duration, timing)",
							"static list()",
							"TransitionList",
							"constructor()",
							"arg =>",
							"propertyList(name)",
							"transition =>",
							"get css()",
							"RandomColor = () =>",
							" function Document()",
							" function Prototypes( constructors = { Node, Element, }, )",
							" function Factory(types = ",
							")",
							"result = function Factory(type)",
							"(acc, proto, i) =>",
							"types = (type, ...args) =>",
							".cache = (type, ...args) =>",
							"(...a) =>",
							"new: (...args) =>",
							"cache: (...args) =>",
							"Factory",
							"Factory",
							"for: node =>",
							"set: (node, factory) =>",
							"Parser",
							"constructor(factory)",
							"parseFromString(str, file)",
							"parseFromFile(file)",
							"Serializer",
							"serializeToString(node)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADIAgAAVHJhbnNmb3JtQ29vcmRpbmF0ZXMoLi4uYXJncykKKGFjYywgY29vcmQpID0+CiAgbiA9PgpQYXJzZUNvb3JkaW5hdGVzKHN0cikKQ29vcmRpbmF0ZQogIHN0YXRpYyBmcm9tKGFyZykKICBjb25zdHJ1Y3Rvcihsb24sIGxhdCwgdHlwZSkKICBnZXQgbGVuZ3RoKCkKICBjb252ZXJ0VG8oZGVzdFR5cGUpCiAgZGlzdGFuY2VUbyhvdGhlcikKICB0b1N0cmluZygpCiAgdG9Mb25MYXQoKQogIHRvUG9pbnQoKQpDb29yZGluYXRlCkNvb3JkaW5hdGUKUGluCiguLi5hcmdzKSA9PgpQaW4KICBzdGF0aWMgY3JlYXRlKC4uLmFyZ3MpCiAgZ2V0IGZlYXR1cmUoKQogIGdldCBwb3NpdGlvbigpCiAgc2V0IHBvc2l0aW9uKHZhbHVlKQpNYXJrZXJzCiguLi5hcmdzKSA9PgpNYXJrZXJzCiAgc3RhdGljIGNyZWF0ZShtYXApCk1hcmtlcnMKICBnZXQ6ICh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSA9PgogIGF0KHBvcykKICBnZXQgbGVuZ3RoKCkKICBhZGQoLi4uaXRlbXMpCiAgcmVtb3ZlKC4uLml0ZW1zKQpQb3B1cAooLi4uYXJncykgPT4KUG9wdXAKICBzdGF0aWMgY3JlYXRlKGNvbnRlbnQsIG9mZnNldCA9IFswLCAwXSwgcG9zaXRpb24sIHBvc2l0aW9uaW5nID0gJ2NlbnRlci1jZW50ZXInKQogIGdldCBvdmVybGF5KCkKICBnZXQgcG9zaXRpb24oKQogIGdldCBwb3NpdGlvbigpCk9wZW5sYXllcnNNYXAKICBzdGF0aWMgY3JlYXRlKHRhcmdldCA9ICdtYXBkaXYnKQAAAAAAAAAAuAMAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					11,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/ol-helpers.js",
						"symkeys":
						[
							[
								570,
								609
							],
							[
								792,
								807
							],
							[
								946,
								950
							],
							[
								966,
								997
							],
							[
								1169,
								1179
							],
							[
								1218,
								1234
							],
							[
								1750,
								1777
							],
							[
								2001,
								2013
							],
							[
								2037,
								2056
							],
							[
								2131,
								2148
							],
							[
								2461,
								2471
							],
							[
								2518,
								2528
							],
							[
								2577,
								2586
							],
							[
								2629,
								2639
							],
							[
								2670,
								2680
							],
							[
								2736,
								2739
							],
							[
								2772,
								2784
							],
							[
								2803,
								2806
							],
							[
								2822,
								2844
							],
							[
								3259,
								3272
							],
							[
								3316,
								3330
							],
							[
								3407,
								3426
							],
							[
								3544,
								3551
							],
							[
								3604,
								3616
							],
							[
								3642,
								3649
							],
							[
								3680,
								3698
							],
							[
								3863,
								3870
							],
							[
								3971,
								4003
							],
							[
								4309,
								4316
							],
							[
								4454,
								4466
							],
							[
								4545,
								4558
							],
							[
								4797,
								4813
							],
							[
								4974,
								4979
							],
							[
								5012,
								5024
							],
							[
								5045,
								5050
							],
							[
								5066,
								5146
							],
							[
								5764,
								5777
							],
							[
								5823,
								5837
							],
							[
								5911,
								5925
							],
							[
								6013,
								6026
							],
							[
								6136,
								6168
							]
						],
						"symlist":
						[
							" function TransformCoordinates(...args)",
							"(acc, coord) =>",
							"n =>",
							" function ParseCoordinates(str)",
							"Coordinate",
							"static from(arg)",
							"constructor(lon, lat, type)",
							"get length()",
							"convertTo(destType)",
							"distanceTo(other)",
							"toString()",
							"toLonLat()",
							"toPoint()",
							"Coordinate",
							"Coordinate",
							"Pin",
							"(...args) =>",
							"Pin",
							"static create(...args)",
							"get feature()",
							"get position()",
							"set position(value)",
							"Markers",
							"(...args) =>",
							"Markers",
							"static create(map)",
							"Markers",
							"get: (target, prop, receiver) =>",
							"at(pos)",
							"get length()",
							"add(...items)",
							"remove(...items)",
							"Popup",
							"(...args) =>",
							"Popup",
							"static create(content, offset = [0, 0], position, positioning = 'center-center')",
							"get overlay()",
							"get position()",
							"get position()",
							"OpenlayersMap",
							"static create(target = 'mapdiv')"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC4AwAAICBkb20oKQogIGV4dGVuZCA9IChlLCBmdW5jdGlvbnMpID0+CmtleSA9PgogIGFyZyA9PgogIGlzTnVtYmVyID0gYSA9PgpVbml0KHN0cikKICBmb3JtYXQobnVtYmVyKQpTY2FsYXJWYWx1ZSgpCiAgaWZkZWYgPSAodmFsdWUsIGRlZiwgbm9kZWYpID0+CkVsZW1lbnRUcmFuc2Zvcm1hdGlvbiA9ICgpID0+CiAgdG9TdHJpbmcoKQpDU1NUcmFuc2Zvcm1TZXR0ZXJzID0gZWxlbWVudCA9PgogIGdldCByb3RhdGUoKQogIHNldCByb3RhdGUoYSkKICBnZXQgdHJhbnNsYXRlKCkKICBzZXQgdHJhbnNsYXRlKHBvaW50KQogIGdldCBzY2FsZSgpCiAgc2V0IHNjYWxlKHNpemUpCiAgdXBkYXRlVHJhbnNmb3JtYXRpb24oKQpUcmFuc2l0aW9uCiAgY29uc3RydWN0b3IocHJvcGVydHksIGRlbGF5LCBkdXJhdGlvbiwgdGltaW5nKQogIHN0YXRpYyBsaXN0KCkKVHJhbnNpdGlvbkxpc3QKICBjb25zdHJ1Y3RvcigpCiAgYXJnID0+CiAgcHJvcGVydHlMaXN0KG5hbWUpCiAgdHJhbnNpdGlvbiA9PgogIGdldCBjc3MoKQpSYW5kb21Db2xvciA9ICgpID0+CkRvY3VtZW50KCkKUHJvdG90eXBlcyggY29uc3RydWN0b3JzID0geyBOb2RlLCBFbGVtZW50LCB9LCApCkZhY3RvcnkodHlwZXMgPSAKKQogIHJlc3VsdCA9IGZ1bmN0aW9uIEZhY3RvcnkodHlwZSkKKGFjYywgcHJvdG8sIGkpID0+CiAgdHlwZXMgPSAodHlwZSwgLi4uYXJncykgPT4KICAuY2FjaGUgPSAodHlwZSwgLi4uYXJncykgPT4KKC4uLmEpID0+CiAgbmV3OiAoLi4uYXJncykgPT4KICBjYWNoZTogKC4uLmFyZ3MpID0+CkZhY3RvcnkKRmFjdG9yeQogIGZvcjogbm9kZSA9PgogIHNldDogKG5vZGUsIGZhY3RvcnkpID0+ClBhcnNlcgogIGNvbnN0cnVjdG9yKGZhY3RvcnkpCiAgcGFyc2VGcm9tU3RyaW5nKHN0ciwgZmlsZSkKICBwYXJzZUZyb21GaWxlKGZpbGUpClNlcmlhbGl6ZXIKICBzZXJpYWxpemVUb1N0cmluZyhub2RlKQAAAAAAAAAAyAIAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					12,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/xml-old.js",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADIAgAAVHJhbnNmb3JtQ29vcmRpbmF0ZXMoLi4uYXJncykKKGFjYywgY29vcmQpID0+CiAgbiA9PgpQYXJzZUNvb3JkaW5hdGVzKHN0cikKQ29vcmRpbmF0ZQogIHN0YXRpYyBmcm9tKGFyZykKICBjb25zdHJ1Y3Rvcihsb24sIGxhdCwgdHlwZSkKICBnZXQgbGVuZ3RoKCkKICBjb252ZXJ0VG8oZGVzdFR5cGUpCiAgZGlzdGFuY2VUbyhvdGhlcikKICB0b1N0cmluZygpCiAgdG9Mb25MYXQoKQogIHRvUG9pbnQoKQpDb29yZGluYXRlCkNvb3JkaW5hdGUKUGluCiguLi5hcmdzKSA9PgpQaW4KICBzdGF0aWMgY3JlYXRlKC4uLmFyZ3MpCiAgZ2V0IGZlYXR1cmUoKQogIGdldCBwb3NpdGlvbigpCiAgc2V0IHBvc2l0aW9uKHZhbHVlKQpNYXJrZXJzCiguLi5hcmdzKSA9PgpNYXJrZXJzCiAgc3RhdGljIGNyZWF0ZShtYXApCk1hcmtlcnMKICBnZXQ6ICh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSA9PgogIGF0KHBvcykKICBnZXQgbGVuZ3RoKCkKICBhZGQoLi4uaXRlbXMpCiAgcmVtb3ZlKC4uLml0ZW1zKQpQb3B1cAooLi4uYXJncykgPT4KUG9wdXAKICBzdGF0aWMgY3JlYXRlKGNvbnRlbnQsIG9mZnNldCA9IFswLCAwXSwgcG9zaXRpb24sIHBvc2l0aW9uaW5nID0gJ2NlbnRlci1jZW50ZXInKQogIGdldCBvdmVybGF5KCkKICBnZXQgcG9zaXRpb24oKQogIGdldCBwb3NpdGlvbigpCk9wZW5sYXllcnNNYXAKICBzdGF0aWMgY3JlYXRlKHRhcmdldCA9ICdtYXBkaXYnKQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					13,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/ol-helpers.js",
						"symkeys":
						[
							[
								570,
								609
							],
							[
								792,
								807
							],
							[
								946,
								950
							],
							[
								966,
								997
							],
							[
								1169,
								1179
							],
							[
								1218,
								1234
							],
							[
								1750,
								1777
							],
							[
								2001,
								2013
							],
							[
								2037,
								2056
							],
							[
								2131,
								2148
							],
							[
								2461,
								2471
							],
							[
								2518,
								2528
							],
							[
								2577,
								2586
							],
							[
								2629,
								2639
							],
							[
								2670,
								2680
							],
							[
								2736,
								2739
							],
							[
								2772,
								2784
							],
							[
								2803,
								2806
							],
							[
								2822,
								2844
							],
							[
								3259,
								3272
							],
							[
								3316,
								3330
							],
							[
								3407,
								3426
							],
							[
								3544,
								3551
							],
							[
								3604,
								3616
							],
							[
								3642,
								3649
							],
							[
								3680,
								3698
							],
							[
								3863,
								3870
							],
							[
								3971,
								4003
							],
							[
								4309,
								4316
							],
							[
								4454,
								4466
							],
							[
								4545,
								4558
							],
							[
								4797,
								4813
							],
							[
								4974,
								4979
							],
							[
								5012,
								5024
							],
							[
								5045,
								5050
							],
							[
								5066,
								5146
							],
							[
								5764,
								5777
							],
							[
								5823,
								5837
							],
							[
								5911,
								5925
							],
							[
								6013,
								6026
							],
							[
								6136,
								6168
							]
						],
						"symlist":
						[
							" function TransformCoordinates(...args)",
							"(acc, coord) =>",
							"n =>",
							" function ParseCoordinates(str)",
							"Coordinate",
							"static from(arg)",
							"constructor(lon, lat, type)",
							"get length()",
							"convertTo(destType)",
							"distanceTo(other)",
							"toString()",
							"toLonLat()",
							"toPoint()",
							"Coordinate",
							"Coordinate",
							"Pin",
							"(...args) =>",
							"Pin",
							"static create(...args)",
							"get feature()",
							"get position()",
							"set position(value)",
							"Markers",
							"(...args) =>",
							"Markers",
							"static create(map)",
							"Markers",
							"get: (target, prop, receiver) =>",
							"at(pos)",
							"get length()",
							"add(...items)",
							"remove(...items)",
							"Popup",
							"(...args) =>",
							"Popup",
							"static create(content, offset = [0, 0], position, positioning = 'center-center')",
							"get overlay()",
							"get position()",
							"get position()",
							"OpenlayersMap",
							"static create(target = 'mapdiv')"
						]
					},
					"AQAAAAAAAAAAAAAAyAIAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					14,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/xml.js",
						"symkeys":
						[
							[
								0,
								22
							],
							[
								937,
								955
							],
							[
								1223,
								1228
							],
							[
								1247,
								1252
							],
							[
								1297,
								1307
							],
							[
								1327,
								1337
							],
							[
								1364,
								1373
							],
							[
								1416,
								1434
							],
							[
								1549,
								1565
							],
							[
								1612,
								1626
							],
							[
								1703,
								1717
							],
							[
								2127,
								2131
							],
							[
								2375,
								2379
							],
							[
								3360,
								3377
							],
							[
								3638,
								3643
							],
							[
								3662,
								3667
							],
							[
								3744,
								3762
							],
							[
								3876,
								3892
							],
							[
								3966,
								3971
							],
							[
								3985,
								3990
							],
							[
								4013,
								4025
							],
							[
								4122,
								4138
							],
							[
								4187,
								4192
							],
							[
								4215,
								4229
							],
							[
								4445,
								4459
							],
							[
								4545,
								4549
							],
							[
								4947,
								4951
							],
							[
								5778,
								5782
							],
							[
								6118,
								6122
							],
							[
								6890,
								6921
							]
						],
						"symlist":
						[
							"function isIterator(v)",
							" function parse(s)",
							" i =>",
							" i =>",
							" (i, j) =>",
							" (i, j) =>",
							"(a, c) =>",
							"start = tagName =>",
							"end = tagName =>",
							"skip = pred =>",
							"skipws = () =>",
							"c =>",
							"c =>",
							" function read(g)",
							" i =>",
							" i =>",
							"start = tagName =>",
							"end = tagName =>",
							" c =>",
							" c =>",
							"next = () =>",
							"is = (ch, cl) =>",
							" s =>",
							"skip = pred =>",
							"skipws = () =>",
							"c =>",
							"c =>",
							"c =>",
							"c =>",
							" function write(obj, level = 0)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADIAgAAVHJhbnNmb3JtQ29vcmRpbmF0ZXMoLi4uYXJncykKKGFjYywgY29vcmQpID0+CiAgbiA9PgpQYXJzZUNvb3JkaW5hdGVzKHN0cikKQ29vcmRpbmF0ZQogIHN0YXRpYyBmcm9tKGFyZykKICBjb25zdHJ1Y3Rvcihsb24sIGxhdCwgdHlwZSkKICBnZXQgbGVuZ3RoKCkKICBjb252ZXJ0VG8oZGVzdFR5cGUpCiAgZGlzdGFuY2VUbyhvdGhlcikKICB0b1N0cmluZygpCiAgdG9Mb25MYXQoKQogIHRvUG9pbnQoKQpDb29yZGluYXRlCkNvb3JkaW5hdGUKUGluCiguLi5hcmdzKSA9PgpQaW4KICBzdGF0aWMgY3JlYXRlKC4uLmFyZ3MpCiAgZ2V0IGZlYXR1cmUoKQogIGdldCBwb3NpdGlvbigpCiAgc2V0IHBvc2l0aW9uKHZhbHVlKQpNYXJrZXJzCiguLi5hcmdzKSA9PgpNYXJrZXJzCiAgc3RhdGljIGNyZWF0ZShtYXApCk1hcmtlcnMKICBnZXQ6ICh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSA9PgogIGF0KHBvcykKICBnZXQgbGVuZ3RoKCkKICBhZGQoLi4uaXRlbXMpCiAgcmVtb3ZlKC4uLml0ZW1zKQpQb3B1cAooLi4uYXJncykgPT4KUG9wdXAKICBzdGF0aWMgY3JlYXRlKGNvbnRlbnQsIG9mZnNldCA9IFswLCAwXSwgcG9zaXRpb24sIHBvc2l0aW9uaW5nID0gJ2NlbnRlci1jZW50ZXInKQogIGdldCBvdmVybGF5KCkKICBnZXQgcG9zaXRpb24oKQogIGdldCBwb3NpdGlvbigpCk9wZW5sYXllcnNNYXAKICBzdGF0aWMgY3JlYXRlKHRhcmdldCA9ICdtYXBkaXYnKQAAAAAAAAAAXQEAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					15,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/ol-helpers.js",
						"symkeys":
						[
							[
								570,
								609
							],
							[
								792,
								807
							],
							[
								946,
								950
							],
							[
								966,
								997
							],
							[
								1169,
								1179
							],
							[
								1218,
								1234
							],
							[
								1750,
								1777
							],
							[
								2001,
								2013
							],
							[
								2037,
								2056
							],
							[
								2131,
								2148
							],
							[
								2461,
								2471
							],
							[
								2518,
								2528
							],
							[
								2577,
								2586
							],
							[
								2629,
								2639
							],
							[
								2670,
								2680
							],
							[
								2736,
								2739
							],
							[
								2772,
								2784
							],
							[
								2803,
								2806
							],
							[
								2822,
								2844
							],
							[
								3259,
								3272
							],
							[
								3316,
								3330
							],
							[
								3407,
								3426
							],
							[
								3544,
								3551
							],
							[
								3604,
								3616
							],
							[
								3642,
								3649
							],
							[
								3680,
								3698
							],
							[
								3863,
								3870
							],
							[
								3971,
								4003
							],
							[
								4309,
								4316
							],
							[
								4454,
								4466
							],
							[
								4545,
								4558
							],
							[
								4797,
								4813
							],
							[
								4974,
								4979
							],
							[
								5012,
								5024
							],
							[
								5045,
								5050
							],
							[
								5066,
								5146
							],
							[
								5764,
								5777
							],
							[
								5823,
								5837
							],
							[
								5911,
								5925
							],
							[
								6013,
								6026
							],
							[
								6136,
								6168
							]
						],
						"symlist":
						[
							" function TransformCoordinates(...args)",
							"(acc, coord) =>",
							"n =>",
							" function ParseCoordinates(str)",
							"Coordinate",
							"static from(arg)",
							"constructor(lon, lat, type)",
							"get length()",
							"convertTo(destType)",
							"distanceTo(other)",
							"toString()",
							"toLonLat()",
							"toPoint()",
							"Coordinate",
							"Coordinate",
							"Pin",
							"(...args) =>",
							"Pin",
							"static create(...args)",
							"get feature()",
							"get position()",
							"set position(value)",
							"Markers",
							"(...args) =>",
							"Markers",
							"static create(map)",
							"Markers",
							"get: (target, prop, receiver) =>",
							"at(pos)",
							"get length()",
							"add(...items)",
							"remove(...items)",
							"Popup",
							"(...args) =>",
							"Popup",
							"static create(content, offset = [0, 0], position, positioning = 'center-center')",
							"get overlay()",
							"get position()",
							"get position()",
							"OpenlayersMap",
							"static create(target = 'mapdiv')"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABdAQAAICBpc0l0ZXJhdG9yKHYpCiAgcGFyc2UocykKaSA9PgppID0+CihpLCBqKSA9PgooaSwgaikgPT4KKGEsIGMpID0+CiAgc3RhcnQgPSB0YWdOYW1lID0+CiAgZW5kID0gdGFnTmFtZSA9PgogIHNraXAgPSBwcmVkID0+CiAgc2tpcHdzID0gKCkgPT4KICBjID0+CiAgYyA9PgogIHJlYWQoZykKaSA9PgppID0+CiAgc3RhcnQgPSB0YWdOYW1lID0+CiAgZW5kID0gdGFnTmFtZSA9PgpjID0+CmMgPT4KICBuZXh0ID0gKCkgPT4KICBpcyA9IChjaCwgY2wpID0+CnMgPT4KICBza2lwID0gcHJlZCA9PgogIHNraXB3cyA9ICgpID0+CiAgYyA9PgogIGMgPT4KICBjID0+CiAgYyA9PgogIHdyaXRlKG9iaiwgbGV2ZWwgPSAwKQAAAAAAAAAAyAIAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					24,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADIAgAAVHJhbnNmb3JtQ29vcmRpbmF0ZXMoLi4uYXJncykKKGFjYywgY29vcmQpID0+CiAgbiA9PgpQYXJzZUNvb3JkaW5hdGVzKHN0cikKQ29vcmRpbmF0ZQogIHN0YXRpYyBmcm9tKGFyZykKICBjb25zdHJ1Y3Rvcihsb24sIGxhdCwgdHlwZSkKICBnZXQgbGVuZ3RoKCkKICBjb252ZXJ0VG8oZGVzdFR5cGUpCiAgZGlzdGFuY2VUbyhvdGhlcikKICB0b1N0cmluZygpCiAgdG9Mb25MYXQoKQogIHRvUG9pbnQoKQpDb29yZGluYXRlCkNvb3JkaW5hdGUKUGluCiguLi5hcmdzKSA9PgpQaW4KICBzdGF0aWMgY3JlYXRlKC4uLmFyZ3MpCiAgZ2V0IGZlYXR1cmUoKQogIGdldCBwb3NpdGlvbigpCiAgc2V0IHBvc2l0aW9uKHZhbHVlKQpNYXJrZXJzCiguLi5hcmdzKSA9PgpNYXJrZXJzCiAgc3RhdGljIGNyZWF0ZShtYXApCk1hcmtlcnMKICBnZXQ6ICh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSA9PgogIGF0KHBvcykKICBnZXQgbGVuZ3RoKCkKICBhZGQoLi4uaXRlbXMpCiAgcmVtb3ZlKC4uLml0ZW1zKQpQb3B1cAooLi4uYXJncykgPT4KUG9wdXAKICBzdGF0aWMgY3JlYXRlKGNvbnRlbnQsIG9mZnNldCA9IFswLCAwXSwgcG9zaXRpb24sIHBvc2l0aW9uaW5nID0gJ2NlbnRlci1jZW50ZXInKQogIGdldCBvdmVybGF5KCkKICBnZXQgcG9zaXRpb24oKQogIGdldCBwb3NpdGlvbigpCk9wZW5sYXllcnNNYXAKICBzdGF0aWMgY3JlYXRlKHRhcmdldCA9ICdtYXBkaXYnKQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQQAAAAAAAABBAAAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/ol-map.js",
						"symkeys":
						[
							[
								2521,
								2550
							],
							[
								2649,
								2690
							],
							[
								2895,
								2924
							],
							[
								3309,
								3330
							],
							[
								3398,
								3418
							],
							[
								3804,
								3808
							],
							[
								4444,
								4456
							],
							[
								4830,
								4851
							],
							[
								5542,
								5547
							],
							[
								5596,
								5606
							],
							[
								5844,
								5858
							],
							[
								6546,
								6563
							],
							[
								6648,
								6652
							],
							[
								6686,
								6690
							]
						],
						"symlist":
						[
							"function SetFenceColor(color)",
							"function FlyTo(location, done = () => {})",
							" function callback(complete)",
							"function Get(feature)",
							"function CreateMap()",
							"a =>",
							" function(e)",
							"([name, geometry]) =>",
							"get()",
							"set(value)",
							" function(evt)",
							"async response =>",
							"u =>",
							"u =>"
						]
					},
					"AQAAAAAAAAAAAAAAywAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					26,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADLAAAAU2V0RmVuY2VDb2xvcihjb2xvcikKRmx5VG8obG9jYXRpb24sIGRvbmUgPSAoKSA9PiB7fSkKICBjYWxsYmFjayhjb21wbGV0ZSkKR2V0KGZlYXR1cmUpCkNyZWF0ZU1hcCgpCiAgYSA9PgpmdW5jdGlvbihlKQooW25hbWUsIGdlb21ldHJ5XSkgPT4KICBnZXQoKQogIHNldCh2YWx1ZSkKZnVuY3Rpb24oZXZ0KQogIHJlc3BvbnNlID0+CiAgdSA9PgogIHUgPT4AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					27,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					28,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					29,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					30,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/ol-map.js",
						"symkeys":
						[
							[
								2521,
								2550
							],
							[
								2649,
								2690
							],
							[
								2895,
								2924
							],
							[
								3309,
								3330
							],
							[
								3398,
								3418
							],
							[
								3804,
								3808
							],
							[
								4444,
								4456
							],
							[
								4830,
								4851
							],
							[
								5542,
								5547
							],
							[
								5596,
								5606
							],
							[
								5844,
								5858
							],
							[
								6546,
								6563
							],
							[
								6648,
								6652
							],
							[
								6686,
								6690
							]
						],
						"symlist":
						[
							"function SetFenceColor(color)",
							"function FlyTo(location, done = () => {})",
							" function callback(complete)",
							"function Get(feature)",
							"function CreateMap()",
							"a =>",
							" function(e)",
							"([name, geometry]) =>",
							"get()",
							"set(value)",
							" function(evt)",
							"async response =>",
							"u =>",
							"u =>"
						]
					},
					"AQAAAAAAAAAAAAAAywAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					31,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AwAAAAAAAAAAAAAAAAAAAAAAAADLAAAAU2V0RmVuY2VDb2xvcihjb2xvcikKRmx5VG8obG9jYXRpb24sIGRvbmUgPSAoKSA9PiB7fSkKICBjYWxsYmFjayhjb21wbGV0ZSkKR2V0KGZlYXR1cmUpCkNyZWF0ZU1hcCgpCiAgYSA9PgpmdW5jdGlvbihlKQooW25hbWUsIGdlb21ldHJ5XSkgPT4KICBnZXQoKQogIHNldCh2YWx1ZSkKZnVuY3Rpb24oZXZ0KQogIHJlc3BvbnNlID0+CiAgdSA9PgogIHUgPT4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					32,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/ol-map.js",
						"symkeys":
						[
							[
								2521,
								2550
							],
							[
								2649,
								2690
							],
							[
								2895,
								2924
							],
							[
								3309,
								3330
							],
							[
								3398,
								3418
							],
							[
								3804,
								3808
							],
							[
								4444,
								4456
							],
							[
								4830,
								4851
							],
							[
								5542,
								5547
							],
							[
								5596,
								5606
							],
							[
								5844,
								5858
							],
							[
								6546,
								6563
							],
							[
								6648,
								6652
							],
							[
								6686,
								6690
							]
						],
						"symlist":
						[
							"function SetFenceColor(color)",
							"function FlyTo(location, done = () => {})",
							" function callback(complete)",
							"function Get(feature)",
							"function CreateMap()",
							"a =>",
							" function(e)",
							"([name, geometry]) =>",
							"get()",
							"set(value)",
							" function(evt)",
							"async response =>",
							"u =>",
							"u =>"
						]
					},
					"AQAAAAAAAAAAAAAAywAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					33,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADLAAAAU2V0RmVuY2VDb2xvcihjb2xvcikKRmx5VG8obG9jYXRpb24sIGRvbmUgPSAoKSA9PiB7fSkKICBjYWxsYmFjayhjb21wbGV0ZSkKR2V0KGZlYXR1cmUpCkNyZWF0ZU1hcCgpCiAgYSA9PgpmdW5jdGlvbihlKQooW25hbWUsIGdlb21ldHJ5XSkgPT4KICBnZXQoKQogIHNldCh2YWx1ZSkKZnVuY3Rpb24oZXZ0KQogIHJlc3BvbnNlID0+CiAgdSA9PgogIHUgPT4AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					34,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/ol-map.js",
						"symkeys":
						[
							[
								2521,
								2550
							],
							[
								2649,
								2690
							],
							[
								2895,
								2924
							],
							[
								3309,
								3330
							],
							[
								3398,
								3418
							],
							[
								3804,
								3808
							],
							[
								4444,
								4456
							],
							[
								4830,
								4851
							],
							[
								5542,
								5547
							],
							[
								5596,
								5606
							],
							[
								5844,
								5858
							],
							[
								6546,
								6563
							],
							[
								6648,
								6652
							],
							[
								6686,
								6690
							]
						],
						"symlist":
						[
							"function SetFenceColor(color)",
							"function FlyTo(location, done = () => {})",
							" function callback(complete)",
							"function Get(feature)",
							"function CreateMap()",
							"a =>",
							" function(e)",
							"([name, geometry]) =>",
							"get()",
							"set(value)",
							" function(evt)",
							"async response =>",
							"u =>",
							"u =>"
						]
					},
					"AQAAAAAAAAAAAAAAywAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					35,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADLAAAAU2V0RmVuY2VDb2xvcihjb2xvcikKRmx5VG8obG9jYXRpb24sIGRvbmUgPSAoKSA9PiB7fSkKICBjYWxsYmFjayhjb21wbGV0ZSkKR2V0KGZlYXR1cmUpCkNyZWF0ZU1hcCgpCiAgYSA9PgpmdW5jdGlvbihlKQooW25hbWUsIGdlb21ldHJ5XSkgPT4KICBnZXQoKQogIHNldCh2YWx1ZSkKZnVuY3Rpb24oZXZ0KQogIHJlc3BvbnNlID0+CiAgdSA9PgogIHUgPT4AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					36,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					37,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/ol-map.js",
						"symkeys":
						[
							[
								2521,
								2550
							],
							[
								2649,
								2690
							],
							[
								2895,
								2924
							],
							[
								3309,
								3330
							],
							[
								3398,
								3418
							],
							[
								3804,
								3808
							],
							[
								4444,
								4456
							],
							[
								4830,
								4851
							],
							[
								5542,
								5547
							],
							[
								5596,
								5606
							],
							[
								5844,
								5858
							],
							[
								6546,
								6563
							],
							[
								6648,
								6652
							],
							[
								6686,
								6690
							]
						],
						"symlist":
						[
							"function SetFenceColor(color)",
							"function FlyTo(location, done = () => {})",
							" function callback(complete)",
							"function Get(feature)",
							"function CreateMap()",
							"a =>",
							" function(e)",
							"([name, geometry]) =>",
							"get()",
							"set(value)",
							" function(evt)",
							"async response =>",
							"u =>",
							"u =>"
						]
					},
					"AQAAAAAAAAAAAAAAywAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					38,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADLAAAAU2V0RmVuY2VDb2xvcihjb2xvcikKRmx5VG8obG9jYXRpb24sIGRvbmUgPSAoKSA9PiB7fSkKICBjYWxsYmFjayhjb21wbGV0ZSkKR2V0KGZlYXR1cmUpCkNyZWF0ZU1hcCgpCiAgYSA9PgpmdW5jdGlvbihlKQooW25hbWUsIGdlb21ldHJ5XSkgPT4KICBnZXQoKQogIHNldCh2YWx1ZSkKZnVuY3Rpb24oZXZ0KQogIHJlc3BvbnNlID0+CiAgdSA9PgogIHUgPT4AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					39,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/ol-map.js",
						"symkeys":
						[
							[
								2521,
								2550
							],
							[
								2649,
								2690
							],
							[
								2895,
								2924
							],
							[
								3309,
								3330
							],
							[
								3398,
								3418
							],
							[
								3804,
								3808
							],
							[
								4444,
								4456
							],
							[
								4830,
								4851
							],
							[
								5542,
								5547
							],
							[
								5596,
								5606
							],
							[
								5844,
								5858
							],
							[
								6546,
								6563
							],
							[
								6648,
								6652
							],
							[
								6686,
								6690
							]
						],
						"symlist":
						[
							"function SetFenceColor(color)",
							"function FlyTo(location, done = () => {})",
							" function callback(complete)",
							"function Get(feature)",
							"function CreateMap()",
							"a =>",
							" function(e)",
							"([name, geometry]) =>",
							"get()",
							"set(value)",
							" function(evt)",
							"async response =>",
							"u =>",
							"u =>"
						]
					},
					"AQAAAAAAAAAAAAAAywAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					40,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADLAAAAU2V0RmVuY2VDb2xvcihjb2xvcikKRmx5VG8obG9jYXRpb24sIGRvbmUgPSAoKSA9PiB7fSkKICBjYWxsYmFjayhjb21wbGV0ZSkKR2V0KGZlYXR1cmUpCkNyZWF0ZU1hcCgpCiAgYSA9PgpmdW5jdGlvbihlKQooW25hbWUsIGdlb21ldHJ5XSkgPT4KICBnZXQoKQogIHNldCh2YWx1ZSkKZnVuY3Rpb24oZXZ0KQogIHJlc3BvbnNlID0+CiAgdSA9PgogIHUgPT4AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					41,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/ol.js",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					42,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					43,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/ol.js",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					44,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/ol-map.js",
						"symkeys":
						[
							[
								2521,
								2550
							],
							[
								2649,
								2690
							],
							[
								2895,
								2924
							],
							[
								3309,
								3330
							],
							[
								3398,
								3418
							],
							[
								3804,
								3808
							],
							[
								4444,
								4456
							],
							[
								4830,
								4851
							],
							[
								5542,
								5547
							],
							[
								5596,
								5606
							],
							[
								5844,
								5858
							],
							[
								6546,
								6563
							],
							[
								6648,
								6652
							],
							[
								6686,
								6690
							]
						],
						"symlist":
						[
							"function SetFenceColor(color)",
							"function FlyTo(location, done = () => {})",
							" function callback(complete)",
							"function Get(feature)",
							"function CreateMap()",
							"a =>",
							" function(e)",
							"([name, geometry]) =>",
							"get()",
							"set(value)",
							" function(evt)",
							"async response =>",
							"u =>",
							"u =>"
						]
					},
					"AQAAAAAAAAAAAAAAywAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					45,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADLAAAAU2V0RmVuY2VDb2xvcihjb2xvcikKRmx5VG8obG9jYXRpb24sIGRvbmUgPSAoKSA9PiB7fSkKICBjYWxsYmFjayhjb21wbGV0ZSkKR2V0KGZlYXR1cmUpCkNyZWF0ZU1hcCgpCiAgYSA9PgpmdW5jdGlvbihlKQooW25hbWUsIGdlb21ldHJ5XSkgPT4KICBnZXQoKQogIHNldCh2YWx1ZSkKZnVuY3Rpb24oZXZ0KQogIHJlc3BvbnNlID0+CiAgdSA9PgogIHUgPT4AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					46,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					47,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					48,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/ol-map.js",
						"symkeys":
						[
							[
								2521,
								2550
							],
							[
								2649,
								2690
							],
							[
								2895,
								2924
							],
							[
								3309,
								3330
							],
							[
								3398,
								3418
							],
							[
								3804,
								3808
							],
							[
								4444,
								4456
							],
							[
								4830,
								4851
							],
							[
								5542,
								5547
							],
							[
								5596,
								5606
							],
							[
								5844,
								5858
							],
							[
								6546,
								6563
							],
							[
								6648,
								6652
							],
							[
								6686,
								6690
							]
						],
						"symlist":
						[
							"function SetFenceColor(color)",
							"function FlyTo(location, done = () => {})",
							" function callback(complete)",
							"function Get(feature)",
							"function CreateMap()",
							"a =>",
							" function(e)",
							"([name, geometry]) =>",
							"get()",
							"set(value)",
							" function(evt)",
							"async response =>",
							"u =>",
							"u =>"
						]
					},
					"AQAAAAAAAAAAAAAAywAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					49,
					3,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAADLAAAAU2V0RmVuY2VDb2xvcihjb2xvcikKRmx5VG8obG9jYXRpb24sIGRvbmUgPSAoKSA9PiB7fSkKICBjYWxsYmFjayhjb21wbGV0ZSkKR2V0KGZlYXR1cmUpCkNyZWF0ZU1hcCgpCiAgYSA9PgpmdW5jdGlvbihlKQooW25hbWUsIGdlb21ldHJ5XSkgPT4KICBnZXQoKQogIHNldCh2YWx1ZSkKZnVuY3Rpb24oZXZ0KQogIHJlc3BvbnNlID0+CiAgdSA9PgogIHUgPT4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					50,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/ol-map.js",
						"symkeys":
						[
							[
								2521,
								2550
							],
							[
								2649,
								2690
							],
							[
								2895,
								2924
							],
							[
								3309,
								3330
							],
							[
								3398,
								3418
							],
							[
								3804,
								3808
							],
							[
								4444,
								4456
							],
							[
								4830,
								4851
							],
							[
								5542,
								5547
							],
							[
								5596,
								5606
							],
							[
								5844,
								5858
							],
							[
								6546,
								6563
							],
							[
								6648,
								6652
							],
							[
								6686,
								6690
							]
						],
						"symlist":
						[
							"function SetFenceColor(color)",
							"function FlyTo(location, done = () => {})",
							" function callback(complete)",
							"function Get(feature)",
							"function CreateMap()",
							"a =>",
							" function(e)",
							"([name, geometry]) =>",
							"get()",
							"set(value)",
							" function(evt)",
							"async response =>",
							"u =>",
							"u =>"
						]
					},
					"AwAAAAAAAAAAAAAAywAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMsAAABTZXRGZW5jZUNvbG9yKGNvbG9yKQpGbHlUbyhsb2NhdGlvbiwgZG9uZSA9ICgpID0+IHt9KQogIGNhbGxiYWNrKGNvbXBsZXRlKQpHZXQoZmVhdHVyZSkKQ3JlYXRlTWFwKCkKICBhID0+CmZ1bmN0aW9uKGUpCihbbmFtZSwgZ2VvbWV0cnldKSA9PgogIGdldCgpCiAgc2V0KHZhbHVlKQpmdW5jdGlvbihldnQpCiAgcmVzcG9uc2UgPT4KICB1ID0+CiAgdSA9PgAAAAAAAAAAywAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					51,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADLAAAAU2V0RmVuY2VDb2xvcihjb2xvcikKRmx5VG8obG9jYXRpb24sIGRvbmUgPSAoKSA9PiB7fSkKICBjYWxsYmFjayhjb21wbGV0ZSkKR2V0KGZlYXR1cmUpCkNyZWF0ZU1hcCgpCiAgYSA9PgpmdW5jdGlvbihlKQooW25hbWUsIGdlb21ldHJ5XSkgPT4KICBnZXQoKQogIHNldCh2YWx1ZSkKZnVuY3Rpb24oZXZ0KQogIHJlc3BvbnNlID0+CiAgdSA9PgogIHUgPT4AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					52,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					53,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/ol-map.js",
						"symkeys":
						[
							[
								2521,
								2550
							],
							[
								2649,
								2690
							],
							[
								2895,
								2924
							],
							[
								3309,
								3330
							],
							[
								3398,
								3418
							],
							[
								3804,
								3808
							],
							[
								4444,
								4456
							],
							[
								4830,
								4851
							],
							[
								5542,
								5547
							],
							[
								5596,
								5606
							],
							[
								5844,
								5858
							],
							[
								6546,
								6563
							],
							[
								6648,
								6652
							],
							[
								6686,
								6690
							]
						],
						"symlist":
						[
							"function SetFenceColor(color)",
							"function FlyTo(location, done = () => {})",
							" function callback(complete)",
							"function Get(feature)",
							"function CreateMap()",
							"a =>",
							" function(e)",
							"([name, geometry]) =>",
							"get()",
							"set(value)",
							" function(evt)",
							"async response =>",
							"u =>",
							"u =>"
						]
					},
					"AQAAAAAAAAAAAAAAywAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					54,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/ol-helpers.js",
						"symkeys":
						[
							[
								570,
								609
							],
							[
								792,
								807
							],
							[
								946,
								950
							],
							[
								966,
								997
							],
							[
								1169,
								1179
							],
							[
								1218,
								1234
							],
							[
								1750,
								1777
							],
							[
								2001,
								2013
							],
							[
								2037,
								2056
							],
							[
								2131,
								2148
							],
							[
								2461,
								2471
							],
							[
								2518,
								2528
							],
							[
								2577,
								2586
							],
							[
								2629,
								2639
							],
							[
								2670,
								2680
							],
							[
								2736,
								2739
							],
							[
								2772,
								2784
							],
							[
								2803,
								2806
							],
							[
								2822,
								2844
							],
							[
								3259,
								3272
							],
							[
								3316,
								3330
							],
							[
								3407,
								3426
							],
							[
								3544,
								3551
							],
							[
								3604,
								3616
							],
							[
								3642,
								3649
							],
							[
								3680,
								3698
							],
							[
								3863,
								3870
							],
							[
								3971,
								4003
							],
							[
								4309,
								4316
							],
							[
								4454,
								4466
							],
							[
								4545,
								4558
							],
							[
								4797,
								4813
							],
							[
								4974,
								4979
							],
							[
								5012,
								5024
							],
							[
								5045,
								5050
							],
							[
								5066,
								5146
							],
							[
								5764,
								5777
							],
							[
								5823,
								5837
							],
							[
								5911,
								5925
							],
							[
								6013,
								6026
							],
							[
								6136,
								6168
							]
						],
						"symlist":
						[
							" function TransformCoordinates(...args)",
							"(acc, coord) =>",
							"n =>",
							" function ParseCoordinates(str)",
							"Coordinate",
							"static from(arg)",
							"constructor(lon, lat, type)",
							"get length()",
							"convertTo(destType)",
							"distanceTo(other)",
							"toString()",
							"toLonLat()",
							"toPoint()",
							"Coordinate",
							"Coordinate",
							"Pin",
							"(...args) =>",
							"Pin",
							"static create(...args)",
							"get feature()",
							"get position()",
							"set position(value)",
							"Markers",
							"(...args) =>",
							"Markers",
							"static create(map)",
							"Markers",
							"get: (target, prop, receiver) =>",
							"at(pos)",
							"get length()",
							"add(...items)",
							"remove(...items)",
							"Popup",
							"(...args) =>",
							"Popup",
							"static create(content, offset = [0, 0], position, positioning = 'center-center')",
							"get overlay()",
							"get position()",
							"get position()",
							"OpenlayersMap",
							"static create(target = 'mapdiv')"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADLAAAAU2V0RmVuY2VDb2xvcihjb2xvcikKRmx5VG8obG9jYXRpb24sIGRvbmUgPSAoKSA9PiB7fSkKICBjYWxsYmFjayhjb21wbGV0ZSkKR2V0KGZlYXR1cmUpCkNyZWF0ZU1hcCgpCiAgYSA9PgpmdW5jdGlvbihlKQooW25hbWUsIGdlb21ldHJ5XSkgPT4KICBnZXQoKQogIHNldCh2YWx1ZSkKZnVuY3Rpb24oZXZ0KQogIHJlc3BvbnNlID0+CiAgdSA9PgogIHUgPT4AAAAAAAAAAMgCAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					55,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/ol.js",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADIAgAAVHJhbnNmb3JtQ29vcmRpbmF0ZXMoLi4uYXJncykKKGFjYywgY29vcmQpID0+CiAgbiA9PgpQYXJzZUNvb3JkaW5hdGVzKHN0cikKQ29vcmRpbmF0ZQogIHN0YXRpYyBmcm9tKGFyZykKICBjb25zdHJ1Y3Rvcihsb24sIGxhdCwgdHlwZSkKICBnZXQgbGVuZ3RoKCkKICBjb252ZXJ0VG8oZGVzdFR5cGUpCiAgZGlzdGFuY2VUbyhvdGhlcikKICB0b1N0cmluZygpCiAgdG9Mb25MYXQoKQogIHRvUG9pbnQoKQpDb29yZGluYXRlCkNvb3JkaW5hdGUKUGluCiguLi5hcmdzKSA9PgpQaW4KICBzdGF0aWMgY3JlYXRlKC4uLmFyZ3MpCiAgZ2V0IGZlYXR1cmUoKQogIGdldCBwb3NpdGlvbigpCiAgc2V0IHBvc2l0aW9uKHZhbHVlKQpNYXJrZXJzCiguLi5hcmdzKSA9PgpNYXJrZXJzCiAgc3RhdGljIGNyZWF0ZShtYXApCk1hcmtlcnMKICBnZXQ6ICh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSA9PgogIGF0KHBvcykKICBnZXQgbGVuZ3RoKCkKICBhZGQoLi4uaXRlbXMpCiAgcmVtb3ZlKC4uLml0ZW1zKQpQb3B1cAooLi4uYXJncykgPT4KUG9wdXAKICBzdGF0aWMgY3JlYXRlKGNvbnRlbnQsIG9mZnNldCA9IFswLCAwXSwgcG9zaXRpb24sIHBvc2l0aW9uaW5nID0gJ2NlbnRlci1jZW50ZXInKQogIGdldCBvdmVybGF5KCkKICBnZXQgcG9zaXRpb24oKQogIGdldCBwb3NpdGlvbigpCk9wZW5sYXllcnNNYXAKICBzdGF0aWMgY3JlYXRlKHRhcmdldCA9ICdtYXBkaXYnKQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					56,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/ol-map.js",
						"symkeys":
						[
							[
								2521,
								2550
							],
							[
								2649,
								2690
							],
							[
								2895,
								2924
							],
							[
								3309,
								3330
							],
							[
								3398,
								3418
							],
							[
								3804,
								3808
							],
							[
								4444,
								4456
							],
							[
								4830,
								4851
							],
							[
								5542,
								5547
							],
							[
								5596,
								5606
							],
							[
								5844,
								5858
							],
							[
								6546,
								6563
							],
							[
								6648,
								6652
							],
							[
								6686,
								6690
							]
						],
						"symlist":
						[
							"function SetFenceColor(color)",
							"function FlyTo(location, done = () => {})",
							" function callback(complete)",
							"function Get(feature)",
							"function CreateMap()",
							"a =>",
							" function(e)",
							"([name, geometry]) =>",
							"get()",
							"set(value)",
							" function(evt)",
							"async response =>",
							"u =>",
							"u =>"
						]
					},
					"AQAAAAAAAAAAAAAAywAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					57,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADLAAAAU2V0RmVuY2VDb2xvcihjb2xvcikKRmx5VG8obG9jYXRpb24sIGRvbmUgPSAoKSA9PiB7fSkKICBjYWxsYmFjayhjb21wbGV0ZSkKR2V0KGZlYXR1cmUpCkNyZWF0ZU1hcCgpCiAgYSA9PgpmdW5jdGlvbihlKQooW25hbWUsIGdlb21ldHJ5XSkgPT4KICBnZXQoKQogIHNldCh2YWx1ZSkKZnVuY3Rpb24oZXZ0KQogIHJlc3BvbnNlID0+CiAgdSA9PgogIHUgPT4AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					58,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					59,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "ol-helpers.js",
			"settings":
			{
				"buffer_size": 8145,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "ol-map.js",
			"settings":
			{
				"buffer_size": 7878,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "lib/ol.js",
			"settings":
			{
				"buffer_size": 2057,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 9202 files for \"\\bPin\\b\" (regex)\n\n~/Projects/plot-cv/eagle-shell.js:\n 1374  \n 1375    o += `# Packages\n 1376: # <package name> <pin coordinates relative to pin 0>\n 1377  \n 1378  `;\n ....\n 1382  \n 1383    o += `# Components\n 1384: # <component name> <package name> <absolute position of component pin 0>\n 1385  `;\n 1386    for(let element of doc.elements.list) o += Element2Circuit(element);\n ....\n 1388    o += `\n 1389  # Connections\n 1390: # <from component name>.<pin index> <to component name>.<pin index>\n 1391  `;\n 1392    for(let signal of doc.signals.list) o += Signal2Circuit(signal);\n\n~/Projects/plot-cv/ol-map.js:\n    4  import { addCoordinateTransforms, addProjection, CircleStyle, composeCssTransform, Feature, Fill, fr... <skipped 169 characters> ... Style, TileLayer, transform, VectorLayer, VectorSource, View, XYZ, ZoomSlider } from './lib/ol.js';\n    5  import { BiDirMap, ObjectWrapper } from './object-helpers.js';\n    6: import { Coordinate, Markers, OpenlayersMap, ParseCoordinates, Pin, Popup, TransformCoordinates } from './ol-helpers.js';\n    7  import { add, scale, toStringHDMS, wrapX } from './openlayers/src/ol/coordinate.js';\n    8  import { toLonLat } from './openlayers/src/ol/proj.js';\n    .\n  170        anchorXUnits: 'fraction',\n  171        anchorYUnits: 'fraction',\n  172:       src: 'static/svg/map-pin.svg',\n  173        scale: 1\n  174      })\n  175    });\n  176:   globalThis.pins = Object.entries(cities).map(([name, geometry]) => Pin.create(name, mapPinStyle, geometry));\n  177  \n  178    //markers.add(...pins);\n  179  \n  180:   const hereMarker = Pin.create(\n  181      'You are here',\n  182      new Style({\n  ...\n  256        .map(u => {\n  257          u.position = ParseCoordinates(u.exif.GPSPosition);\n  258:         u.pin = Pin.create(u.filename, mapPinStyle, u.position);\n  259  \n  260          //if(u.filename != '') u.popup =Popup.create(u.filename??'<no filename>', [0,0], u.position);\n  261  \n  262:         markers.add(u.pin);\n  263  \n  264          return u;\n  ...\n  313    BiDirMap,\n  314    Markers,\n  315:   Pin,\n  316    Popup,\n  317    assert,\n\n~/Projects/plot-cv/upload.js:\n   58    TransformCoordinates,\n   59    Coordinate,\n   60:   Pin,\n   61    Markers,\n   62    OpenlayersMap,*/\n\n~/Projects/plot-cv/ol-helpers.js:\n   92  Coordinate.prototype.slice = Array.prototype.slice;\n   93  \n   94: export class Pin {\n   95:   static from = ObjectWrapper((...args) => new Pin(...args), Pin.prototype);\n   96  \n   97    static create(...args) {\n   ..\n  105        feature.setStyle(style);\n  106      }\n  107:     return Pin.from(feature);\n  108    }\n  109  \n  110    get feature() {\n  111:     return Pin.from.unwrap(this);\n  112    }\n  113  \n  ...\n  151      const { source } = this;\n  152      const feature = source.getFeatures()[pos];\n  153:     return feature ? Pin.from(feature) : undefined;\n  154    }\n  155  \n  ...\n  163  \n  164      for(let item of items) {\n  165:       let pin = Pin.from(item);\n  166:       /* console.log('Markers.add', { pin });\n  167:       console.log('pin.feature', pin.feature);*/\n  168:       source.addFeature(pin.feature);\n  169      }\n  170    }\n  ...\n  173  \n  174      for(let item of items) {\n  175:       let pin = Pin.from(item);\n  176:       source.removeFeature(pin.feature);\n  177      }\n  178    }\n\n~/Projects/plot-cv/circuit.js:\n  292      for(let v of this.circuit.packageToPosMap.get(packageName)) {\n  293        if(p.x + v.x < 0 || p.x + v.x >= this.circuit.board.width || p.y + v.y < 0 || p.y + v.y >= this.circuit.board.height)\n  294:         throw new Error(`Component pin outside of board: ${componentName}.${i + 1}`);\n  295  \n  296        ++i;\n  ...\n  321  \n  322        if(dontCarePinIdx < 1 || dontCarePinIdx > packagePosVec.length)\n  323:         throw new Error(`Invalid \"Don't Care\" pin number for ${componentName}: ${dontCarePinIdx}. Must be between 1 and ${packagePosVec.length} (including)`);\n  324        component.dontCarePinIdxSet.add(--dontCarePinIdx);\n  325      }\n  ...\n  357      let pinIdx1Base = connectionPoint.pinIdx + 1;\n  358      if(pinIdx1Base < 1 || pinIdx1Base > packagePosVec.length)\n  359:       throw new Error(`Invalid pin number for ${connectionPoint.componentName}.${pinIdx1Base}. Must be between 1 and ${packagePosVec.length} (including)`);\n  360:     if(component.dontCarePinIdxSet.has(connectionPoint.pinIdx)) throw new Error(`Invalid pin number for {connectionPoint.componentName}.{pinIdx1Base}. Pin has been set as \"Don't Care\"`);\n  361    }\n  362  }\n\n~/Projects/plot-cv/test-gpio.js:\n   22    gpio.initPin(1, GPIO.INPUT);\n   23    const value = gpio.getPin(1);\n   24:   console.log('Pin #1 value:', value);\n   25  \n   26    const u32 = new Uint32Array(gpio.buffer);\n\n~/Projects/plot-cv/quickjs/qjs-modules/web-platform-tests/tools/third_party/pdf_js/pdf.js:\n 20218      key: \"_show\",\n 20219      value: function _show() {\n 20220:       var pin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n 20221  \n 20222:       if (pin) {\n 20223          this.pinned = true;\n 20224        }\n\n~/Projects/plot-cv/lib/eagle/components.js:\n   15  import { Package } from './components/package.js';\n   16  import { Pad } from './components/pad.js';\n   17: import { Pin } from './components/pin.js';\n   18  import { Polygon } from './components/polygon.js';\n   19  import { Rectangle } from './components/rectangle.js';\n   ..\n   36      Wire,\n   37      Rectangle,\n   38:     Pin,\n   39      Circle,\n   40      Cross,\n   ..\n   87  export { Package } from './components/package.js';\n   88  export { Pad } from './components/pad.js';\n   89: export { Pin } from './components/pin.js';\n   90  export { Polygon } from './components/polygon.js';\n   91  export { Rectangle } from './components/rectangle.js';\n\n~/Projects/plot-cv/lib/eagle/element.js:\n  303                  hfn = () => this.gate.symbol;\n  304                  break;\n  305:               case 'pin':\n  306:                 hfn = () => this.gate.symbol.pins[attributes.pin];\n  307                  break;\n  308              }\n  ...\n  382      }\n  383  \n  384:     if(['attribute', 'element', 'instance', 'label', 'moduleinst', 'pad', 'pin', 'probe', 'rectangle', 'smd', 'text'].indexOf(tagName) != -1) {\n  385      }\n  386  \n  ...\n  468      if(tagName == 'symbol') {\n  469        lazyProperty(this, 'pins', () => {\n  470:         let list = EagleNodeList.create(this, this.path.concat(['children']), e => e.tagName == 'pin');\n  471          return EagleNodeMap.create(list, 'name');\n  472        });\n  ...\n  719      }\n  720  \n  721:     if(this.tagName == 'pin') {\n  722        const { rot, length, func, x, y } = this;\n  723  \n  ...\n  882  \n  883    static isRelation(name) {\n  884:     const relationNames = ['class', 'element', 'gate', 'layer', 'library', 'package', 'pad', 'part', 'pin', 'symbol', 'deviceset', 'device'];\n  885  \n  886      return relationNames.indexOf(name) != -1;\n  ...\n 1037      class: ['number', 'name', 'width', 'drill'],\n 1038      clearance: ['class', 'value'],\n 1039:     connect: ['gate', 'pin', 'pad', 'route'],\n 1040      contactref: ['element', 'pad', 'route', 'routetag'],\n 1041      description: ['language'],\n ....\n 1064      part: ['name', 'library', 'deviceset', 'device', 'value', 'technology'],\n 1065      pass: ['name', 'refer', 'active'],\n 1066:     pin: ['name', 'x', 'y', 'visible', 'length', 'direction', 'function', 'rot', 'swaplevel'],\n 1067:     pinref: ['part', 'gate', 'pin'],\n 1068      polygon: ['width', 'layer', 'isolate', 'orphans', 'thermals'],\n 1069      port: ['name', 'side', 'coord', 'direction'],\n\n~/Projects/plot-cv/lib/eagle/schematicRenderer.js:\n   79        }\n   80  \n   81:       case 'pin': {\n   82          const { length, rot, name, visible } = item;\n   83          const { x, y } = coordFn(item);\n   ..\n   97              'circle',\n   98              {\n   99:               class: 'pin',\n  100                stroke: '#a54b4b',\n  101                fill: 'none',\n  ...\n  112            'line',\n  113            {\n  114:             class: 'pin',\n  115              stroke: '#a54b4b',\n  116              ...l.toObject(),\n  ...\n  123              'text',\n  124              {\n  125:               class: 'pin',\n  126                stroke: 'none',\n  127                fill: SchematicRenderer.palette[6],\n\n~/Projects/plot-cv/lib/eagle/components/pin.js:\n    5  import { Alignment, AlignmentAttrs, ElementToClass, HORIZONTAL, log, MakeCoordTransformer, MakeRotation, PinSizes, VERTICAL } from '../renderUtils.js';\n    6  \n    7: export const Pin = ({ data, opts = {}, ...props }) => {\n    8    data = data || props.item;\n    9  \n   10:   log('Pin.render(0)', { data, opts });\n   11  \n   12    let { transform = new TransformationList() } = opts;\n   ..\n   20  \n   21    let [rotation] = MakeRotation(rot);\n   22:   log(`Pin.render(${name})`, { rotation });\n   23    let angle = rotation ? Math.round(rotation.angle) : 0;\n   24  \n   ..\n   37      children.push(\n   38        h('circle', {\n   39:         class: 'pin',\n   40          stroke: '#a54b4b',\n   41          fill: 'none',\n   ..\n   46        })\n   47      );\n   48:     log('Pin.render(2)', { pp });\n   49    }\n   50  \n   ..\n   52      children.push(\n   53        h('line', {\n   54:         class: 'pin',\n   55          stroke: '#a54b4b',\n   56          ...l.toObject(),\n   ..\n   58        })\n   59      );\n   60:     log('Pin.render(3)', { l });\n   61    }\n   62    if(name != '' && visible != 'off') {\n   63      const align = Alignment(angle >= 180 ? 'center-right' : 'center-left', 0);\n   64      //  const rotation=MakeRotation(rot);\n   65:     log(`Pin.render(${name})`, { align, angle, rotation });\n   66      /* children.push(\n   67        h(Text, {\n   ..\n  110      /*children.push(\n  111        h('circle', {\n  112:         class: 'pin-x',\n  113          stroke: '#ff00ff',\n  114          fill: 'none',\n  ...\n  121      children.push(\n  122        h('circle', {\n  123:         class: 'pin-y',\n  124          stroke: '#4219ff',\n  125          opacity: 0.8,\n  ...\n  132      );*/\n  133  \n  134:     log('Pin.render(5)', { name, tp, transformation, rot });\n  135    }\n  136  \n  137:   return h('g', { 'data-type': 'pin', 'data-name': name }, children);\n  138    return h(Fragment, {}, children);\n  139  };\n\n~/Projects/plot-cv/lib/eagle/components/symbol.js:\n    2  import { log, useTransform } from '../renderUtils.js';\n    3  import { Circle } from './circle.js';\n    4: import { Pin } from './pin.js';\n    5  import { Polygon } from './polygon.js';\n    6  import { Rectangle } from './rectangle.js';\n    .\n    9  \n   10  const componentIndex = {\n   11:   pin: Pin,\n   12    text: TextElement,\n   13    wire: Wire,\n\n71 matches across 12 files\n\n\nSearching 9202 files for \"\\bPin\\b\" (regex, case sensitive)\n\n~/Projects/plot-cv/ol-map.js:\n    4  import { addCoordinateTransforms, addProjection, CircleStyle, composeCssTransform, Feature, Fill, fr... <skipped 169 characters> ... Style, TileLayer, transform, VectorLayer, VectorSource, View, XYZ, ZoomSlider } from './lib/ol.js';\n    5  import { BiDirMap, ObjectWrapper } from './object-helpers.js';\n    6: import { Coordinate, Markers, OpenlayersMap, ParseCoordinates, Pin, Popup, TransformCoordinates } from './ol-helpers.js';\n    7  import { add, scale, toStringHDMS, wrapX } from './openlayers/src/ol/coordinate.js';\n    8  import { toLonLat } from './openlayers/src/ol/proj.js';\n    .\n  174      })\n  175    });\n  176:   globalThis.pins = Object.entries(cities).map(([name, geometry]) => Pin.create(name, mapPinStyle, geometry));\n  177  \n  178    //markers.add(...pins);\n  179  \n  180:   const hereMarker = Pin.create(\n  181      'You are here',\n  182      new Style({\n  ...\n  256        .map(u => {\n  257          u.position = ParseCoordinates(u.exif.GPSPosition);\n  258:         u.pin = Pin.create(u.filename, mapPinStyle, u.position);\n  259  \n  260          //if(u.filename != '') u.popup =Popup.create(u.filename??'<no filename>', [0,0], u.position);\n  ...\n  313    BiDirMap,\n  314    Markers,\n  315:   Pin,\n  316    Popup,\n  317    assert,\n\n~/Projects/plot-cv/upload.js:\n   58    TransformCoordinates,\n   59    Coordinate,\n   60:   Pin,\n   61    Markers,\n   62    OpenlayersMap,*/\n\n~/Projects/plot-cv/ol-helpers.js:\n   92  Coordinate.prototype.slice = Array.prototype.slice;\n   93  \n   94: export class Pin {\n   95:   static from = ObjectWrapper((...args) => new Pin(...args), Pin.prototype);\n   96  \n   97    static create(...args) {\n   ..\n  105        feature.setStyle(style);\n  106      }\n  107:     return Pin.from(feature);\n  108    }\n  109  \n  110    get feature() {\n  111:     return Pin.from.unwrap(this);\n  112    }\n  113  \n  ...\n  151      const { source } = this;\n  152      const feature = source.getFeatures()[pos];\n  153:     return feature ? Pin.from(feature) : undefined;\n  154    }\n  155  \n  ...\n  163  \n  164      for(let item of items) {\n  165:       let pin = Pin.from(item);\n  166        /* console.log('Markers.add', { pin });\n  167        console.log('pin.feature', pin.feature);*/\n  ...\n  173  \n  174      for(let item of items) {\n  175:       let pin = Pin.from(item);\n  176        source.removeFeature(pin.feature);\n  177      }\n\n~/Projects/plot-cv/circuit.js:\n  358      if(pinIdx1Base < 1 || pinIdx1Base > packagePosVec.length)\n  359        throw new Error(`Invalid pin number for ${connectionPoint.componentName}.${pinIdx1Base}. Must be between 1 and ${packagePosVec.length} (including)`);\n  360: <skipped 51 characters> ...int.pinIdx)) throw new Error(`Invalid pin number for {connectionPoint.componentName}.{pinIdx1Base}. Pin has been set as \"Don't Care\"`);\n  361    }\n  362  }\n\n~/Projects/plot-cv/test-gpio.js:\n   22    gpio.initPin(1, GPIO.INPUT);\n   23    const value = gpio.getPin(1);\n   24:   console.log('Pin #1 value:', value);\n   25  \n   26    const u32 = new Uint32Array(gpio.buffer);\n\n~/Projects/plot-cv/lib/eagle/components.js:\n   15  import { Package } from './components/package.js';\n   16  import { Pad } from './components/pad.js';\n   17: import { Pin } from './components/pin.js';\n   18  import { Polygon } from './components/polygon.js';\n   19  import { Rectangle } from './components/rectangle.js';\n   ..\n   36      Wire,\n   37      Rectangle,\n   38:     Pin,\n   39      Circle,\n   40      Cross,\n   ..\n   87  export { Package } from './components/package.js';\n   88  export { Pad } from './components/pad.js';\n   89: export { Pin } from './components/pin.js';\n   90  export { Polygon } from './components/polygon.js';\n   91  export { Rectangle } from './components/rectangle.js';\n\n~/Projects/plot-cv/lib/eagle/components/pin.js:\n    5  import { Alignment, AlignmentAttrs, ElementToClass, HORIZONTAL, log, MakeCoordTransformer, MakeRotation, PinSizes, VERTICAL } from '../renderUtils.js';\n    6  \n    7: export const Pin = ({ data, opts = {}, ...props }) => {\n    8    data = data || props.item;\n    9  \n   10:   log('Pin.render(0)', { data, opts });\n   11  \n   12    let { transform = new TransformationList() } = opts;\n   ..\n   20  \n   21    let [rotation] = MakeRotation(rot);\n   22:   log(`Pin.render(${name})`, { rotation });\n   23    let angle = rotation ? Math.round(rotation.angle) : 0;\n   24  \n   ..\n   46        })\n   47      );\n   48:     log('Pin.render(2)', { pp });\n   49    }\n   50  \n   ..\n   58        })\n   59      );\n   60:     log('Pin.render(3)', { l });\n   61    }\n   62    if(name != '' && visible != 'off') {\n   63      const align = Alignment(angle >= 180 ? 'center-right' : 'center-left', 0);\n   64      //  const rotation=MakeRotation(rot);\n   65:     log(`Pin.render(${name})`, { align, angle, rotation });\n   66      /* children.push(\n   67        h(Text, {\n   ..\n  132      );*/\n  133  \n  134:     log('Pin.render(5)', { name, tp, transformation, rot });\n  135    }\n  136  \n\n~/Projects/plot-cv/lib/eagle/components/symbol.js:\n    2  import { log, useTransform } from '../renderUtils.js';\n    3  import { Circle } from './circle.js';\n    4: import { Pin } from './pin.js';\n    5  import { Polygon } from './polygon.js';\n    6  import { Rectangle } from './rectangle.js';\n    .\n    9  \n   10  const componentIndex = {\n   11:   pin: Pin,\n   12    text: TextElement,\n   13    wire: Wire,\n\n28 matches across 8 files\n",
			"settings":
			{
				"buffer_size": 16204,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			},
			"undo_stack":
			[
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"doxy",
				"DoxyDoxygen: Comment All"
			],
			[
				"",
				":$ - EOF"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"format",
				"JsPrettier: Format Code"
			],
			[
				"prett",
				"JsPrettier: Format Code"
			],
			[
				"ou",
				"Browse Mode: Outline (Right)"
			],
			[
				"instga",
				"Package Control: Install Package"
			],
			[
				"prettier",
				"JsPrettier: Format Code"
			],
			[
				"json",
				"Pretty JSON: Minify JSON"
			],
			[
				"jspr",
				"JsPrettier: Format Code"
			],
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"color",
				"Color Highlight: Reset"
			],
			[
				"scheme",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"edit cu",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"install pac",
				"Package Control: Install Package"
			],
			[
				"list pack",
				"Package Control: List Packages"
			],
			[
				"edit ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"edit",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"outli",
				"Browse Mode: Outline (Right)"
			],
			[
				"debugger",
				"Preferences: Debugger Settings"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"INSTALL",
				"Package Control: Install Package"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"adap",
				"Debugger: Install Adapters"
			],
			[
				"install ada",
				"Debugger: Install Adapters"
			],
			[
				"adapter",
				"Debugger: Install Adapters"
			],
			[
				"debug",
				"Debugger: Install Adapters"
			],
			[
				"Package Control: remove",
				"Package Control: Remove Package"
			],
			[
				"debu",
				"Debugger: Install Adapters"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 289.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/lib/xml.js",
		"/home/roman/Projects/plot-cv/lib/xml-old.js",
		"/home/roman/Projects/plot-cv/lib/dom-old.js",
		"/home/roman/Projects/plot-cv/lib/ol.js",
		"/home/roman/Projects/plot-cv/ol-map.js",
		"/home/roman/Projects/plot-cv/lib/xml/util.js",
		"/home/roman/Projects/plot-cv/lib/util.js",
		"/home/roman/Projects/plot-cv/fire.js",
		"/home/roman/Projects/plot-cv/fire.html",
		"/home/roman/Projects/plot-cv/os-helpers.js",
		"/home/roman/Projects/plot-cv/lib/dom.js",
		"/home/roman/Projects/plot-cv/map.html",
		"/home/roman/Projects/plot-cv/string-helpers.js",
		"/home/roman/Projects/plot-cv/ol-helpers.js",
		"/home/roman/Projects/geoadmin/Maps of Switzerland - Swiss Confederation - map.geo.admin.ch",
		"/home/roman/Projects/plot-cv/clang-list.js",
		"/home/roman/Projects/plot-cv/mozdev.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/cmake/BuildBrotli.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/lib/compileCommand.js",
		"/home/roman/Projects/plot-cv/ast-shell.js",
		"/home/roman/Projects/plot-cv/cli-helpers.js",
		"/home/roman/Projects/plot-cv/clang-ast.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lws.c",
		"/home/roman/Projects/plot-cv/lws.c",
		"/home/roman/Projects/plot-cv/compile_commands.js",
		"/home/roman/Projects/plot-cv/quickjs/cmake/QuickJSModule.cmake",
		"/home/roman/Projects/plot-cv/io-helpers.js",
		"/home/roman/Projects/plot-cv/lib/net/webSocketStream.js",
		"/home/roman/Projects/plot-cv/lib/container/weakStackFrame.js",
		"/home/roman/Projects/plot-cv/quickjs2/cmake/functions.cmake",
		"/home/roman/Projects/plot-cv/soundcloud-tracks.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/console.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fs.js",
		"/home/roman/Projects/plot-cv/lib/deep.js",
		"/home/janos/Projects/plot-cv/out.gz",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-context-vhost.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/test.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lws-context.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/events.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/web-platform-tests-streams/shared-storage/resources/util.sub.js",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-repeater.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/property-enumeration.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/buffer-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/qjsm.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/io.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/js-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/stream-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/queue.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-mysql.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-blob.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/async-closure.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/misc.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/xpath.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/xml.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-textcode.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/ringbuffer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/inotify.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/extendObject.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/ringbuffer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/js-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/streams.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake/functions.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/defines.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/async-closure.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/buffer-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fsPromises.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-syscallerror.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-syscallerror.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/web-platform-tests-streams/editing/crashtests/make-editable-div-inline-and-set-contenteditable-of-input-to-false.html",
		"/home/roman/Projects/plot-cv/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/process.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-magic.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_repeater.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-child-process.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/virtual-properties.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/child-process.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-predicate.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-pointer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-pgsql.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-path.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-mmap.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-location.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-list.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-internal.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-gpio.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/list-exports.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-serial.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-tree-walker.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-directory.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-deep.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/char-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-bjson.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-blob.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-queue.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-xml.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/path.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-archive.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/vector.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/predicate.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/inet_pton.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/path.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/xml-shell.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/testharnessreport.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/web-platform-tests-streams/streams/readable-streams/async-iterator.any.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_streams.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_stream.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/testharness.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/strverscmp.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/queue.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/mmap-win32.c"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 138.0,
		"where_history":
		[
			"/home/roman/Projects/plot-cv,*.js,*.cmake,CMakeLists.txt,-*/inst/*",
			"/home/roman/Projects/plot-cv,*.jsx,*.cmake,CMakeLists.txt,-*/inst/*",
			"/home/roman/Projects/plot-cv,*.js,*.cmake,CMakeLists.txt,-*/inst/*",
			"/home/roman/Projects/plot-cv,*.js,-*/inst/*",
			"/home/roman/Projects/plot-cv,*.js",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"\\bIcon\\b",
			"new Icon",
			"CircleStyle",
			"\\bStyle\\b",
			"mapPinStyle",
			"\\bPin\\b",
			"deep.js",
			"util.j",
			"util.js",
			"fs\\.js",
			"\\bfs\\b",
			"Pin.create",
			"cities",
			"LWS_WRITE_",
			"\\bsources\\b",
			"sources =",
			"Loading sources",
			"sources =",
			"Loading sources",
			"Table\\b",
			"CaseStmt",
			"SwitchStmt",
			"Switch",
			"MemberExpr",
			"'Member",
			"slice",
			"ArgumentOpt",
			"ArgumentOPt",
			"}}});\n",
			"transformPath",
			"assign",
			"PathTransformer",
			"pathTransformer",
			"relative",
			"pathTransformer",
			"absolute\\b",
			"absolute",
			"flags",
			"sources",
			"sources =",
			"sources",
			"ArgumentLen",
			"wrapNumericArgument",
			"argumentType\\(",
			"ArgumentOpt",
			"isystem",
			"absolute\\b",
			"default\\(",
			"ArgumentType",
			"argumentType",
			"ArgumentIs",
			"includes",
			"get sources",
			"sources",
			"\\babsolute\\b",
			"absolute\\b",
			"relative",
			"basename",
			"inspec",
			"inspect",
			"abbrevia",
			"inspect",
			"add_library.*imported",
			"\\bget[A-Za-z_]*_property",
			"_property",
			"ExternalProject_",
			"ExternalProject_Get_Property",
			"IntegerLiteral\\(",
			"IntegerLiteral",
			"deep\\.",
			"try_run",
			"run\\b",
			"GetClass",
			"ast2np",
			"NamespaceOf",
			"GetClass",
			"DeepSelect",
			"nameOrIdPred",
			"GetByName",
			"nameOrIdPred",
			"DeepFind",
			"members",
			"\\bmembers\\b",
			"get members",
			"getType",
			"\\bimport\\b[^\\n]*\\bTree(Iterator|Walker)\\b[^\\n]*\\bfrom\\b",
			"\\bTree(Iterator|Walker)\\b.*\\bfrom\\b",
			"Tree(Iterator|Walker)",
			"isMap",
			"}\n",
			"WriteJS",
			"ReadJSON",
			"WriteJS",
			"ReadJSON",
			"class Location",
			"Location",
			"Location\\b",
			"TYPE_BIG_INT",
			"fs\\.",
			"fs'",
			"Symbol.for",
			"Newer",
			"remove",
			"fs\\.",
			"Writing",
			"base =",
			"unithist",
			"'FunctionDecl",
			"No such",
			"'Type.cons",
			"GetClass",
			"getClass",
			"nameOrIdPred",
			"Deep(Find|Select)\\(",
			"Deep(Find|Select).*name ==",
			"DeepFind.*name ==",
			"DeepFind",
			"decl\\(",
			"\n        ",
			"EnumDecl",
			"class EnumDecl",
			"EnumDecl",
			"ions.get",
			"ions.set",
			"GetClass",
			"getClass",
			"'Type.cons",
			"completeDef"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"Table",
			"DeepGet",
			"DeepPathOf",
			"export function \\1(\\3) {",
			"DeepFind",
			"= globalThis['\\$'].data",
			"= globalThis['$'].data",
			"namespaceOf"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": null,
							"function_name_status_row": 3,
							"outline_rename_mode": false,
							"symkeys":
							[
							],
							"symlist":
							[
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1753627764.0,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "ol-helpers.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8145,
						"regions":
						{
						},
						"selection":
						[
							[
								2965,
								2965
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 101,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1753628020.81,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1261.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "ol-map.js",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7878,
						"regions":
						{
							"col_010101FF":
							{
								"flags": 16,
								"regions":
								[
									[
										1688,
										1693
									]
								],
								"scope": "col_010101FF"
							},
							"col_010101FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_010101FF_circle.png",
								"regions":
								[
									[
										1657,
										1657
									]
								],
								"scope": "col_gutter"
							},
							"col_3399CCFF":
							{
								"flags": 16,
								"regions":
								[
									[
										3599,
										3606
									],
									[
										5084,
										5091
									]
								],
								"scope": "col_3399CCFF"
							},
							"col_3399CCFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_3399CCFF_circle.png",
								"regions":
								[
									[
										3581,
										3581
									],
									[
										5066,
										5066
									]
								],
								"scope": "col_gutter"
							},
							"col_FFD705FF":
							{
								"flags": 16,
								"regions":
								[
									[
										4132,
										4139
									]
								],
								"scope": "col_FFD705FF"
							},
							"col_FFD705FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FFD705FF_circle.png",
								"regions":
								[
									[
										4116,
										4116
									]
								],
								"scope": "col_gutter"
							},
							"col_FFFFFFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										1649,
										1654
									],
									[
										3667,
										3671
									],
									[
										5152,
										5156
									]
								],
								"scope": "col_FFFFFFFF"
							},
							"col_FFFFFFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FFFFFFFF_circle.png",
								"regions":
								[
									[
										1624,
										1624
									],
									[
										3649,
										3649
									],
									[
										5134,
										5134
									]
								],
								"scope": "col_gutter"
							}
						},
						"selection":
						[
							[
								4625,
								4629
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 167,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1753628440.53,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2411.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "lib/ol.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2057,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tabs_extra_last_activated": 1753628021.25,
							"tabs_extra_last_activated_sheet_index": 2
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16204,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										138,
										141
									],
									[
										166,
										169
									],
									[
										306,
										309
									],
									[
										476,
										479
									],
									[
										508,
										511
									],
									[
										1014,
										1017
									],
									[
										1346,
										1349
									],
									[
										1481,
										1484
									],
									[
										1600,
										1603
									],
									[
										1776,
										1779
									],
									[
										1782,
										1785
									],
									[
										1985,
										1988
									],
									[
										2076,
										2079
									],
									[
										2206,
										2209
									],
									[
										2377,
										2380
									],
									[
										2437,
										2440
									],
									[
										2451,
										2454
									],
									[
										2584,
										2587
									],
									[
										2665,
										2668
									],
									[
										2831,
										2834
									],
									[
										2948,
										2951
									],
									[
										2954,
										2957
									],
									[
										3015,
										3018
									],
									[
										3049,
										3052
									],
									[
										3063,
										3066
									],
									[
										3110,
										3113
									],
									[
										3215,
										3218
									],
									[
										3221,
										3224
									],
									[
										3271,
										3274
									],
									[
										3587,
										3590
									],
									[
										3808,
										3811
									],
									[
										4168,
										4171
									],
									[
										4389,
										4392
									],
									[
										4451,
										4454
									],
									[
										4640,
										4643
									],
									[
										4897,
										4900
									],
									[
										5005,
										5008
									],
									[
										5233,
										5236
									],
									[
										5258,
										5261
									],
									[
										5443,
										5446
									],
									[
										5615,
										5618
									],
									[
										5640,
										5643
									],
									[
										5921,
										5924
									],
									[
										5995,
										5998
									],
									[
										6161,
										6164
									],
									[
										6446,
										6449
									],
									[
										6585,
										6588
									],
									[
										6814,
										6817
									],
									[
										7049,
										7052
									],
									[
										7321,
										7324
									],
									[
										7449,
										7452
									],
									[
										7681,
										7684
									],
									[
										7881,
										7884
									],
									[
										8039,
										8042
									],
									[
										8202,
										8205
									],
									[
										8538,
										8541
									],
									[
										8639,
										8642
									],
									[
										8815,
										8818
									],
									[
										9006,
										9009
									],
									[
										9127,
										9130
									],
									[
										9251,
										9254
									],
									[
										9375,
										9378
									],
									[
										9607,
										9610
									],
									[
										9794,
										9797
									],
									[
										9947,
										9950
									],
									[
										10064,
										10067
									],
									[
										10174,
										10177
									],
									[
										10440,
										10443
									],
									[
										10454,
										10457
									],
									[
										10616,
										10619
									],
									[
										10621,
										10624
									],
									[
										11175,
										11178
									],
									[
										11498,
										11501
									],
									[
										11617,
										11620
									],
									[
										11799,
										11802
									],
									[
										12017,
										12020
									],
									[
										12147,
										12150
									],
									[
										12318,
										12321
									],
									[
										12378,
										12381
									],
									[
										12392,
										12395
									],
									[
										12525,
										12528
									],
									[
										12606,
										12609
									],
									[
										12772,
										12775
									],
									[
										12895,
										12898
									],
									[
										13093,
										13096
									],
									[
										13568,
										13571
									],
									[
										13757,
										13760
									],
									[
										14009,
										14012
									],
									[
										14219,
										14222
									],
									[
										14391,
										14394
									],
									[
										14781,
										14784
									],
									[
										14882,
										14885
									],
									[
										15058,
										15061
									],
									[
										15219,
										15222
									],
									[
										15315,
										15318
									],
									[
										15547,
										15550
									],
									[
										15696,
										15699
									],
									[
										15942,
										15945
									],
									[
										16123,
										16126
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								11623,
								11623
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"detect_indentation": false,
							"function_name_status_row": 327,
							"line_numbers": false,
							"output_tag": 2,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage",
							"tabs_extra_last_activated": 1753627817.2,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 5136.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.764828128058,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.coffeecompile_output":
	{
		"height": 150.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "plot-cv.sublime-project",
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"ol.js",
				"lib/ol.js"
			],
			[
				"map.js",
				"ol-map.js"
			],
			[
				"lib/ol.js",
				"lib/ol.js"
			],
			[
				"ol-help",
				"ol-helpers.js"
			],
			[
				"os-helper",
				"os-helpers.js"
			],
			[
				"xml/util",
				"lib/xml/util.js"
			],
			[
				"util.js",
				"lib/util.js"
			],
			[
				"xml-old",
				"lib/xml-old.js"
			],
			[
				"xml.js",
				"lib/xml.js"
			],
			[
				"dom-old",
				"lib/dom-old.js"
			],
			[
				"dom.js",
				"lib/dom.js"
			],
			[
				"fire.js",
				"fire.js"
			],
			[
				"fire.html",
				"fire.html"
			],
			[
				"string-help",
				"string-helpers.js"
			],
			[
				"ol-map",
				"ol-map.js"
			],
			[
				"map.html",
				"map.html"
			],
			[
				"lws.c",
				"quickjs/qjs-lws/lws.c"
			],
			[
				"cli-help",
				"cli-helpers.js"
			],
			[
				"clang-",
				"clang-list.js"
			],
			[
				"quickj",
				"quickjs/cmake/QuickJSModule.cmake"
			],
			[
				"compileC",
				"lib/compileCommand.js"
			],
			[
				"compil",
				"compile_commands.js"
			],
			[
				"clang-as",
				"clang-ast.js"
			],
			[
				"mozdev",
				"mozdev.js"
			],
			[
				"clang-list",
				"clang-list.js"
			],
			[
				"clang-ast",
				"clang-ast.js"
			],
			[
				"",
				"compile_commands.js"
			],
			[
				"compileCommand",
				"lib/compileCommand.js"
			],
			[
				"command",
				"compile_commands.js"
			],
			[
				"lib/util.js",
				"quickjs/qjs-modules/lib/util.js"
			],
			[
				"io-he",
				"io-helpers.js"
			],
			[
				"console.js",
				"quickjs/qjs-modules/lib/console.js"
			],
			[
				"fs.js",
				"quickjs/qjs-modules/lib/fs.js"
			],
			[
				"deep.js",
				"lib/deep.js"
			],
			[
				"lib/deep",
				"lib/deep.js"
			],
			[
				"ast-shel",
				"ast-shell.js"
			],
			[
				"os-help",
				"os-helpers.js"
			],
			[
				"ast-she",
				"ast-shell.js"
			],
			[
				"sound",
				"soundcloud-tracks.js"
			],
			[
				"out",
				"out.gz"
			],
			[
				"lws-context-v",
				"libwebsockets/include/libwebsockets/lws-context-vhost.h"
			],
			[
				"buffer-ut",
				"src/buffer-utils.c"
			],
			[
				"repl",
				"lib/repl.js"
			],
			[
				"utils.c",
				"src/utils.c"
			],
			[
				"qjsm.c",
				"src/qjsm.c"
			],
			[
				"utils.h",
				"include/utils.h"
			],
			[
				"quickjs-inspec",
				"quickjs-inspect.c"
			],
			[
				"io.js",
				"lib/io.js"
			],
			[
				"repl.js",
				"lib/repl.js"
			],
			[
				"util.sj",
				"web-platform-tests-streams/shared-storage/resources/util.sub.js"
			],
			[
				"quickjs.c",
				"~/Projects/plot-cv/quickjs/quickjs.c"
			],
			[
				"quickjs.h",
				"~/Projects/plot-cv/quickjs/quickjs.h"
			],
			[
				"js-utils.c",
				"src/js-utils.c"
			],
			[
				"quickjs-strea",
				"quickjs-stream.h"
			],
			[
				"quickjs-st",
				"quickjs-stream.c"
			],
			[
				"quickjs-stream.h",
				"quickjs-stream.h"
			],
			[
				"quickjs-ins",
				"quickjs-inspect.c"
			],
			[
				"ringbuffer.c",
				"src/ringbuffer.c"
			],
			[
				"ringbuf",
				"include/ringbuffer.h"
			],
			[
				"ringbuffer.h",
				"include/ringbuffer.h"
			],
			[
				"textcode.c",
				"quickjs-textcode.c"
			],
			[
				"quickjs-text",
				"quickjs-textcode.c"
			],
			[
				"stream.c",
				"quickjs-stream.c"
			],
			[
				"quickjs-stre",
				"quickjs-stream.c"
			],
			[
				"textcode",
				"quickjs-textcode.c"
			],
			[
				"quickjs-misc",
				"quickjs-misc.c"
			],
			[
				"function",
				"cmake/functions.cmake"
			],
			[
				"CMakeLIsts",
				"CMakeLists.txt"
			],
			[
				"quickjs-mis",
				"quickjs-misc.c"
			],
			[
				"fsProm",
				"lib/fsPromises.js"
			],
			[
				"CMake",
				"CMakeLists.txt"
			],
			[
				"cmakeli",
				"CMakeLists.txt"
			],
			[
				"cmakelists",
				"CMakeLists.txt"
			],
			[
				"CMakeLists",
				"CMakeLists.txt"
			],
			[
				"cmakelsits",
				"web-platform-tests-streams/editing/crashtests/make-editable-div-inline-and-set-contenteditable-of-input-to-false.html"
			],
			[
				"cmakeLists",
				"CMakeLists.txt"
			],
			[
				"js-util",
				"src/js-utils.c"
			],
			[
				"js-ut",
				"include/js-utils.h"
			],
			[
				"buffer-",
				"include/buffer-utils.h"
			],
			[
				"js-utils",
				"include/js-utils.h"
			],
			[
				"quickjs-sys",
				"quickjs-syscallerror.c"
			],
			[
				"js-u",
				"include/js-utils.h"
			],
			[
				"quickjs-socket",
				"quickjs-sockets.c"
			],
			[
				"async-cl",
				"src/async-closure.c"
			],
			[
				"utilsc",
				"src/utils.c"
			],
			[
				"quickjs-sock",
				"quickjs-sockets.h"
			],
			[
				"child",
				"src/child-process.c"
			],
			[
				"quickjs-child",
				"quickjs-child-process.c"
			],
			[
				"cmake",
				"CMakeLists.txt"
			],
			[
				"process.js",
				"lib/process.js"
			],
			[
				"quickjs-repea",
				"quickjs-repeater.c"
			],
			[
				"quickjs-repe",
				"quickjs-repeater.c"
			],
			[
				"quickjs-repeater",
				"quickjs-repeater.c"
			],
			[
				"test_repe",
				"tests/test_repeater.js"
			],
			[
				"quickjs-mysq",
				"quickjs-mysql.c"
			],
			[
				"quickjs-ser",
				"quickjs-serial.c"
			],
			[
				"quickjs-stream",
				"quickjs-stream.h"
			],
			[
				"quickjs-lex",
				"quickjs-lexer.c"
			],
			[
				"quickjs-list",
				"quickjs-list.c"
			],
			[
				"quickjs-list.c",
				"quickjs-list.c"
			],
			[
				"testhar",
				"lib/testharness.js"
			],
			[
				"qjsm",
				"src/qjsm.c"
			],
			[
				"test_repea",
				"tests/test_repeater.js"
			],
			[
				"test_socket",
				"tests/test_sockets.js"
			],
			[
				"test_sock",
				"tests/test_sockets.js"
			],
			[
				"textcod",
				"quickjs-textcode.c"
			],
			[
				"test_text",
				"tests/test_textcode.js"
			],
			[
				"stack.js",
				"lib/stack.js"
			],
			[
				"ebnf",
				"lib/parser/ebnf.js"
			],
			[
				"arser.",
				"lib/parser.js"
			],
			[
				"bnf.",
				"lib/lexer/bnf.js"
			],
			[
				"quickjs-my",
				"quickjs-mysql.c"
			],
			[
				"quickjs-blob",
				"quickjs-blob.c"
			],
			[
				"quickjs-bl",
				"quickjs-blob.c"
			],
			[
				"queue.c",
				"src/queue.c"
			],
			[
				"queue.h",
				"include/queue.h"
			],
			[
				"mysql",
				"tests/test_mysql.js"
			],
			[
				"child-",
				"src/child-process.c"
			],
			[
				"quickjs-chil",
				"quickjs-child-process.c"
			],
			[
				"xpath",
				"lib/xpath.js"
			],
			[
				"xpath.js",
				"lib/xpath.js"
			],
			[
				"pointer",
				"lib/pointer.js"
			],
			[
				"predicate.c",
				"src/predicate.c"
			],
			[
				"quickjs-pre",
				"quickjs-predicate.c"
			],
			[
				"misc.js",
				"lib/misc.js"
			],
			[
				"char-ut",
				"include/char-utils.h"
			],
			[
				"quickjs-in",
				"quickjs-inspect.c"
			],
			[
				"css3",
				"lib/css3-selectors.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/plot-cv.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 309.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"WS"
			]
		],
		"width": 1059.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 253.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
