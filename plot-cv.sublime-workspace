{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"onRe",
				"onReceiveClientHttpRead"
			],
			[
				"JS_Set",
				"JS_SetPropertyUint32"
			],
			[
				"JS_GetP",
				"JS_GetPropertyUint32"
			],
			[
				"lws_pr",
				"lws_process_html_args"
			],
			[
				"ioha",
				"iohandler_functions"
			],
			[
				"JS_Sert",
				"JS_SetPropertyUint32"
			],
			[
				"lwsjs",
				"lwsjs_loglevel"
			],
			[
				"lwsjs_clear",
				"lwsjs_clear_all_handlers"
			],
			[
				"js_is",
				"js_is_null_or_undefined"
			],
			[
				"lws_",
				"lws_context_class_id"
			],
			[
				"callba",
				"callback_names"
			],
			[
				"JS_Get",
				"JS_GetPropertyStr"
			],
			[
				"call",
				"callback_names"
			],
			[
				"FUNCTION_GET_",
				"FUNCTION_GET_CALLBACK_NUMBER"
			],
			[
				"PROP_PE",
				"PROP_PEER_WRITE_ALLOWANCE"
			],
			[
				"PROP_PEE",
				"PROP_PEER_WRITE_ALLOWANCE"
			],
			[
				"lws_callback",
				"lws_callback_names"
			],
			[
				"jsm_start_",
				"jsm_start_interactive3"
			],
			[
				"by",
				"byobRequest"
			],
			[
				"Read",
				"ReadableStreamBYOBRequest"
			],
			[
				"js_by",
				"js_readable_byob_request"
			],
			[
				"BY",
				"BYOB_REQUEST_METHOD_RESPONDWITHNEWVIEW"
			],
			[
				"JS_",
				"JS_NewObjectProtoClass"
			],
			[
				"define",
				"defineProperty(...)"
			],
			[
				"is_",
				"is_exception"
			],
			[
				"JS_T",
				"JS_ThrowInternalError"
			],
			[
				"Repe",
				"RepeaterItem"
			],
			[
				"WRITER_PROP",
				"WRITER_PROP_READY"
			],
			[
				"JS_Throw",
				"JS_ThrowInternalError"
			],
			[
				"to",
				"toStringTag"
			],
			[
				"Der",
				"DereferenceError"
			],
			[
				"Dere",
				"DereferenceError"
			],
			[
				"Is",
				"IsPunctuator"
			],
			[
				"js_magic_fun",
				"js_magic_function"
			],
			[
				"js_queue_iter",
				"js_queue_iterator_class_id"
			],
			[
				"js_queue_itreat",
				"js_queue_iterator_class_id"
			],
			[
				"js_",
				"js_archive_mode"
			],
			[
				"ENTRY_IS",
				"ENTRY_ISDATAENCRYPTED"
			],
			[
				"js_archivema",
				"js_archivematch_class_id"
			],
			[
				"JS_NewObjec",
				"JS_NewObjectProtoClass"
			],
			[
				"Module",
				"ModuleLoaderContext"
			],
			[
				"JS_Th",
				"JS_ThrowTypeError"
			],
			[
				"ModuleLo",
				"ModuleLoaderContext"
			],
			[
				"escape",
				"escape_noquote_tab"
			],
			[
				"max",
				"max_array_length"
			],
			[
				"tty",
				"tty_set_raw"
			],
			[
				"getOwnPrope",
				"getOwnPropertyDescriptor"
			],
			[
				"PATH_SKIP",
				"PATH_SKIP_SEPARATOR"
			],
			[
				"ListIterat",
				"ListIteratorKind"
			],
			[
				"_f",
				"_wfindnext64"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"JS_PROP_",
				"JS_PROP_CONFIGURABLE"
			],
			[
				"JS_GetPr",
				"JS_GetPropertyStr"
			],
			[
				"js_sock",
				"js_sockaddr_data"
			],
			[
				"SET_",
				"SET_CONSOLE_MODE"
			],
			[
				"ERA",
				"ERASE_IN_LINE"
			],
			[
				"js_misc_set",
				"js_misc_settextattr"
			],
			[
				"dw",
				"dwCursorPosition"
			],
			[
				"prop",
				"property_recursion_top"
			],
			[
				"property_enumer",
				"property_enumeration_index"
			],
			[
				"INT",
				"INSPECT_INT32T_INRANGE"
			],
			[
				"js_inspect_print_arra",
				"js_inspect_print_arraybuffer2"
			],
			[
				"is_a",
				"is_arraybuffer"
			],
			[
				"fmt",
				"fmt_ulong"
			],
			[
				"inspec",
				"inspect_newline2"
			],
			[
				"property_",
				"property_recursion_top"
			],
			[
				"js_inspec",
				"js_inspect_print_value"
			],
			[
				"JS_Atom",
				"JS_AtomToValue"
			],
			[
				"mysql_op",
				"mysql_optionsv"
			],
			[
				"MY",
				"MYSQLConnectParameters"
			],
			[
				"js_connect",
				"js_connectparams_class_id"
			],
			[
				"js_conn",
				"js_connectparams_from"
			],
			[
				"MYSQL",
				"MYSQLConnectParameters"
			],
			[
				"mysql_get",
				"mysql_get_socket"
			],
			[
				"async",
				"asyncclosure_resolve"
			],
			[
				"res",
				"resolving_funcs"
			],
			[
				"HAVE_LIB",
				"HAVE_LIBMARIADBCLIENT"
			],
			[
				"js_is_null",
				"js_is_null_or_undefined"
			],
			[
				"FileDesc",
				"FileDescriptorHandlers"
			],
			[
				"js_generat",
				"js_generator_prototype"
			],
			[
				"tab_",
				"tab_atom_len"
			],
			[
				"proper",
				"property_recursion_pop"
			],
			[
				"property_rec",
				"property_recursion_top"
			],
			[
				"property",
				"property_recursion_top"
			],
			[
				"RETURN",
				"deep.RETURN_VALUE_PATH"
			],
			[
				"LIBS",
				"LIBSERIALPORT_LIBRARY_DIR"
			],
			[
				"js_misc_atexit_",
				"js_misc_atexit_called"
			],
			[
				"getO",
				"getOwnPropertyNames(...)"
			],
			[
				"Res",
				"ResolveAlias"
			],
			[
				"relati",
				"relativePath"
			],
			[
				"js_syscla",
				"js_syscallerror_defines"
			],
			[
				"get",
				"getOwnPropertyDescriptor(...)"
			],
			[
				"resol",
				"resolving_funcs"
			],
			[
				"set",
				"set_handler"
			],
			[
				"Async",
				"AsyncSocketClosure"
			],
			[
				"Asy",
				"AsyncSocketClosure"
			],
			[
				"js_socket_async_",
				"js_socket_async_resolver"
			],
			[
				"js_socket_asyc",
				"js_socket_async_closure_free"
			],
			[
				"JS_EV",
				"JS_EVAL_FLAG_COMPILE_ONLY"
			],
			[
				"check_",
				"check_function_and_include"
			],
			[
				"PGCon",
				"PGConnectParameters"
			],
			[
				"PGC",
				"PGConnectParameters"
			],
			[
				"connect",
				"connectparams_parse"
			],
			[
				"Nam",
				"FieldNameFunc"
			],
			[
				"PG",
				"PGSQLResult"
			],
			[
				"js",
				"js_pgresult_class_id"
			],
			[
				"PGSQ",
				"PGSQResultIterator"
			],
			[
				"js_misc_getopa",
				"js_misc_getopaque"
			],
			[
				"js_pgrequ",
				"js_pgresult_opaque"
			],
			[
				"PGRES_PO",
				"PGRES_POLLING_READING"
			],
			[
				"PROP_PRO",
				"PROP_PROTOCOL_VERSION"
			],
			[
				"B",
				"BOOL"
			],
			[
				"Asyn",
				"AsyncIterator"
			],
			[
				"ret",
				"return_flag"
			],
			[
				"ImportID",
				"ImportIdMap"
			],
			[
				"Num",
				"NumericRange"
			],
			[
				"dbuf_",
				"dbuf_init2"
			],
			[
				"getOwn",
				"getOwnPropertyNames(...)"
			],
			[
				"has_",
				"has_dot_or_slash"
			],
			[
				"My",
				"MySQLResult"
			],
			[
				"JS_ToCS",
				"JS_ToCStringLen"
			],
			[
				"CF",
				"CFunctionClosureRecord"
			],
			[
				"extendA",
				"extendAsyncGenerator"
			],
			[
				"JS_SetPr",
				"JS_SetPropertyStr"
			],
			[
				"MYSQL_TYPE_NEW",
				"MYSQL_TYPE_NEWDECIMAL"
			],
			[
				"JS_CF",
				"JS_CFUNC_MAGIC_DEF"
			],
			[
				"js_mysqlresult_fun",
				"js_mysqlresult_functions"
			],
			[
				"JS_ToCSt",
				"JS_ToCStringLen"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "  isin = (other, p) =>\nMatch\n  constructor(pattern)\n  apply()\n  name =>\n  value =>\n(level, message) =>\nAsyncCollect(iter)\nGetMime(file)\nMatcher(pattern, t = arg => arg)\n(...args) =>\nKeyOrValueMatcher(pattern)\n([key, value]) =>\nGetRootDirectories(pattern = '*')\nMakeUUID = (rng = Math.random) =>\n  n =>\n  dd =>\n  d =>\n  d =>\n  d =>\nGetDir(dir)\n  n =>\nDirName(name)\n  it =>\nDateStr(date)\nModeStr(mode)\nHTMLPage = ({ title, style, scripts = [], children, ...props }) =>\n  script =>\nFilterForm = ({ ...props }) =>\nHTMLTable = ({ rows, ...props }) =>\nHTMLTableRow = ({ columns, ...props }) =>\nHTMLTableColumn = ({ columns, children, tag = 'td', ...props }) =>\nFileLink = ({ file, ...props }) =>\nFileObject = ({ file, stat = {}, ...props }) =>\nFileTable = ({ files, ...props }) =>\n(a, b) =>\n  field =>\n  file =>\nReadExiv2(file)\n([k, v]) =>\n([k, v]) =>\n([k, v]) =>\n(a, b) =>\n([k, v]) =>\nReadExiftool(file)\n  l =>\n  line =>\n([line, idx]) =>\nHeifConvert(src, dst, quality = 100)\nMagickResize(src, dst, rotate = 0, width, height)\n  main(...args)\n(a, v) =>\n(v, pv, o) =>\n(module, ...args) =>\n  m =>\n  .show = arg =>\n  .cleanup = () =>\n(...args) =>\n() =>\n  puts(s)\n() =>\nParseBody(gen)\n  .createWS = (url, callbacks) =>\n  .out = s =>\n  test(req, resp)\n  proxy(req, resp)\n  config(req, resp)\n  file(req, resp)\n  dir =>\n  x =>\n  file =>\n  files(req, resp)\n  n =>\n  files2(req, resp)\nn =>\n  n =>\n  n =>\n(a, b) =>\n  name =>\n  file =>\n  file =>\n([file, rel]) =>\n(acc, [file, st]) =>\n  string(a, b)\n  number(a, b)\n([name, obj]) =>\n({ name }) =>\n  onConnect(ws, req)\n  sendCommand(data)\n  onClose(ws, code, reason)\n  onRequest(req, resp)\n  onOpen(name, filename)\n  onContent(name, data)\n  onClose(name, file)\n  f = x =>\n  result =>\n  onFinalize()\n(match, p1, p0, p2, p3, offset) =>\n  onMessage(ws, data)\n  get connections()\n  get by_uuid()\n  uuid(data)\n  onFd(fd, rd, wr)\n  onClose(ws, reason)\n  onMessage(ws, data)\n  quit(why)",
			"settings":
			{
				"buffer_size": 1908,
				"line_ending": "Unix",
				"name": "ùåÜ Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					3,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1813,
								1833
							],
							[
								2063,
								2068
							],
							[
								2073,
								2093
							],
							[
								2131,
								2138
							],
							[
								2175,
								2182
							],
							[
								2505,
								2513
							],
							[
								2531,
								2551
							],
							[
								2891,
								2924
							],
							[
								3014,
								3036
							],
							[
								3250,
								3291
							],
							[
								3302,
								3315
							],
							[
								3382,
								3417
							],
							[
								3462,
								3480
							],
							[
								3516,
								3558
							],
							[
								3624,
								3657
							],
							[
								3679,
								3683
							],
							[
								4072,
								4077
							],
							[
								4127,
								4131
							],
							[
								4158,
								4162
							],
							[
								4190,
								4194
							],
							[
								4217,
								4237
							],
							[
								4316,
								4320
							],
							[
								4390,
								4412
							],
							[
								4527,
								4532
							],
							[
								4565,
								4587
							],
							[
								4781,
								4803
							],
							[
								5226,
								5292
							],
							[
								5638,
								5647
							],
							[
								5752,
								5782
							],
							[
								6143,
								6178
							],
							[
								6210,
								6251
							],
							[
								6283,
								6349
							],
							[
								6382,
								6416
							],
							[
								6482,
								6529
							],
							[
								7065,
								7101
							],
							[
								7214,
								7223
							],
							[
								7459,
								7467
							],
							[
								7573,
								7580
							],
							[
								7630,
								7654
							],
							[
								7926,
								7937
							],
							[
								8027,
								8038
							],
							[
								8102,
								8113
							],
							[
								8167,
								8176
							],
							[
								8214,
								8225
							],
							[
								8313,
								8340
							],
							[
								8472,
								8476
							],
							[
								8500,
								8507
							],
							[
								8540,
								8556
							],
							[
								8685,
								8730
							],
							[
								8969,
								9027
							],
							[
								9356,
								9378
							],
							[
								9751,
								9761
							],
							[
								10005,
								10019
							],
							[
								10954,
								10978
							],
							[
								11104,
								11108
							],
							[
								11200,
								11214
							],
							[
								11304,
								11320
							],
							[
								11752,
								11765
							],
							[
								11783,
								11788
							],
							[
								11870,
								11877
							],
							[
								11905,
								11910
							],
							[
								12055,
								12080
							],
							[
								12255,
								12286
							],
							[
								12363,
								12374
							],
							[
								13959,
								13990
							],
							[
								14520,
								14553
							],
							[
								14825,
								14860
							],
							[
								14945,
								14978
							],
							[
								15909,
								15915
							],
							[
								17030,
								17034
							],
							[
								17930,
								17937
							],
							[
								19236,
								19268
							],
							[
								19649,
								19653
							],
							[
								20332,
								20367
							],
							[
								21129,
								21134
							],
							[
								21861,
								21865
							],
							[
								21959,
								21963
							],
							[
								22083,
								22092
							],
							[
								22222,
								22229
							],
							[
								22510,
								22517
							],
							[
								22598,
								22605
							],
							[
								22669,
								22685
							],
							[
								22750,
								22770
							],
							[
								23469,
								23481
							],
							[
								23580,
								23592
							],
							[
								23794,
								23810
							],
							[
								23904,
								23917
							],
							[
								24328,
								24346
							],
							[
								24528,
								24545
							],
							[
								24971,
								24990
							],
							[
								25088,
								25108
							],
							[
								26326,
								26348
							],
							[
								26821,
								26842
							],
							[
								27393,
								27412
							],
							[
								27846,
								27854
							],
							[
								28293,
								28302
							],
							[
								30769,
								30781
							],
							[
								32693,
								32728
							],
							[
								33226,
								33245
							],
							[
								33439,
								33456
							],
							[
								33501,
								33514
							],
							[
								33550,
								33560
							],
							[
								35031,
								35047
							],
							[
								35179,
								35198
							],
							[
								35209,
								35228
							],
							[
								35634,
								35654
							]
						],
						"symlist":
						[
							"isin = (other, p) =>",
							"Match",
							"constructor(pattern)",
							"apply()",
							"name =>",
							"value =>",
							" (level, message) =>",
							"async function AsyncCollect(iter)",
							"function GetMime(file)",
							"function Matcher(pattern, t = arg => arg)",
							" (...args) =>",
							"function KeyOrValueMatcher(pattern)",
							" ([key, value]) =>",
							"function GetRootDirectories(pattern = '*')",
							"MakeUUID = (rng = Math.random) =>",
							"n =>",
							"dd =>",
							"d =>",
							"d =>",
							"d =>",
							"function GetDir(dir)",
							"n =>",
							"function DirName(name)",
							"it =>",
							"function DateStr(date)",
							"function ModeStr(mode)",
							"HTMLPage = ({ title, style, scripts = [], children, ...props }) =>",
							"script =>",
							"FilterForm = ({ ...props }) =>",
							"HTMLTable = ({ rows, ...props }) =>",
							"HTMLTableRow = ({ columns, ...props }) =>",
							"HTMLTableColumn = ({ columns, children, tag = 'td', ...props }) =>",
							"FileLink = ({ file, ...props }) =>",
							"FileObject = ({ file, stat = {}, ...props }) =>",
							"FileTable = ({ files, ...props }) =>",
							"(a, b) =>",
							"field =>",
							"file =>",
							"function ReadExiv2(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function ReadExiftool(file)",
							"l =>",
							"line =>",
							"([line, idx]) =>",
							"function HeifConvert(src, dst, quality = 100)",
							"function MagickResize(src, dst, rotate = 0, width, height)",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							" function ParseBody(gen)",
							".createWS = (url, callbacks) =>",
							".out = s =>",
							"async function* test(req, resp)",
							" function proxy(req, resp)",
							" function* config(req, resp)",
							" function* file(req, resp)",
							"dir =>",
							"x =>",
							"file =>",
							"async function* files(req, resp)",
							"n =>",
							" function* files2(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file, rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"({ name }) =>",
							"onConnect(ws, req)",
							"sendCommand(data)",
							"onClose(ws, reason)",
							"onRequest(req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name, file)",
							"f = x =>",
							"result =>",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"AQAAAAAAAAAAAAAAbgcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					4,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABuBwAAICBpc2luID0gKG90aGVyLCBwKSA9PgpNYXRjaAogIGNvbnN0cnVjdG9yKHBhdHRlcm4pCiAgYXBwbHkoKQogIG5hbWUgPT4KICB2YWx1ZSA9PgoobGV2ZWwsIG1lc3NhZ2UpID0+CkFzeW5jQ29sbGVjdChpdGVyKQpHZXRNaW1lKGZpbGUpCk1hdGNoZXIocGF0dGVybiwgdCA9IGFyZyA9PiBhcmcpCiguLi5hcmdzKSA9PgpLZXlPclZhbHVlTWF0Y2hlcihwYXR0ZXJuKQooW2tleSwgdmFsdWVdKSA9PgpHZXRSb290RGlyZWN0b3JpZXMocGF0dGVybiA9ICcqJykKTWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+CiAgbiA9PgogIGRkID0+CiAgZCA9PgogIGQgPT4KICBkID0+CkdldERpcihkaXIpCiAgbiA9PgpEaXJOYW1lKG5hbWUpCiAgaXQgPT4KRGF0ZVN0cihkYXRlKQpNb2RlU3RyKG1vZGUpCkhUTUxQYWdlID0gKHsgdGl0bGUsIHN0eWxlLCBzY3JpcHRzID0gW10sIGNoaWxkcmVuLCAuLi5wcm9wcyB9KSA9PgogIHNjcmlwdCA9PgpGaWx0ZXJGb3JtID0gKHsgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlID0gKHsgcm93cywgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlUm93ID0gKHsgY29sdW1ucywgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlQ29sdW1uID0gKHsgY29sdW1ucywgY2hpbGRyZW4sIHRhZyA9ICd0ZCcsIC4uLnByb3BzIH0pID0+CkZpbGVMaW5rID0gKHsgZmlsZSwgLi4ucHJvcHMgfSkgPT4KRmlsZU9iamVjdCA9ICh7IGZpbGUsIHN0YXQgPSB7fSwgLi4ucHJvcHMgfSkgPT4KRmlsZVRhYmxlID0gKHsgZmlsZXMsIC4uLnByb3BzIH0pID0+CihhLCBiKSA9PgogIGZpZWxkID0+CiAgZmlsZSA9PgpSZWFkRXhpdjIoZmlsZSkKKFtrLCB2XSkgPT4KKFtrLCB2XSkgPT4KKFtrLCB2XSkgPT4KKGEsIGIpID0+Cihbaywgdl0pID0+ClJlYWRFeGlmdG9vbChmaWxlKQogIGwgPT4KICBsaW5lID0+CihbbGluZSwgaWR4XSkgPT4KSGVpZkNvbnZlcnQoc3JjLCBkc3QsIHF1YWxpdHkgPSAxMDApCk1hZ2lja1Jlc2l6ZShzcmMsIGRzdCwgcm90YXRlID0gMCwgd2lkdGgsIGhlaWdodCkKICBtYWluKC4uLmFyZ3MpCihhLCB2KSA9PgoodiwgcHYsIG8pID0+Cihtb2R1bGUsIC4uLmFyZ3MpID0+CiAgbSA9PgogIC5zaG93ID0gYXJnID0+CiAgLmNsZWFudXAgPSAoKSA9PgooLi4uYXJncykgPT4KKCkgPT4KICBwdXRzKHMpCigpID0+ClBhcnNlQm9keShnZW4pCiAgLmNyZWF0ZVdTID0gKHVybCwgY2FsbGJhY2tzKSA9PgogIC5vdXQgPSBzID0+CiAgdGVzdChyZXEsIHJlc3ApCiAgcHJveHkocmVxLCByZXNwKQogIGNvbmZpZyhyZXEsIHJlc3ApCiAgZmlsZShyZXEsIHJlc3ApCiAgZGlyID0+CiAgeCA9PgogIGZpbGUgPT4KICBmaWxlcyhyZXEsIHJlc3ApCiAgbiA9PgogIGZpbGVzMihyZXEsIHJlc3ApCm4gPT4KICBuID0+CiAgbiA9PgooYSwgYikgPT4KICBuYW1lID0+CiAgZmlsZSA9PgogIGZpbGUgPT4KKFtmaWxlLCByZWxdKSA9PgooYWNjLCBbZmlsZSwgc3RdKSA9PgogIHN0cmluZyhhLCBiKQogIG51bWJlcihhLCBiKQooW25hbWUsIG9ial0pID0+Cih7IG5hbWUgfSkgPT4KICBvbkNvbm5lY3Qod3MsIHJlcSkKICBzZW5kQ29tbWFuZChkYXRhKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvblJlcXVlc3QocmVxLCByZXNwKQogIG9uT3BlbihuYW1lLCBmaWxlbmFtZSkKICBvbkNvbnRlbnQobmFtZSwgZGF0YSkKICBvbkNsb3NlKG5hbWUsIGZpbGUpCiAgZiA9IHggPT4KICByZXN1bHQgPT4KICBvbkZpbmFsaXplKCkKKG1hdGNoLCBwMSwgcDAsIHAyLCBwMywgb2Zmc2V0KSA9PgogIG9uTWVzc2FnZSh3cywgZGF0YSkKICBnZXQgY29ubmVjdGlvbnMoKQogIGdldCBieV91dWlkKCkKICB1dWlkKGRhdGEpCiAgb25GZChmZCwgcmQsIHdyKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgcXVpdCh3aHkpAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					5,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					1,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					2,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					3,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1813,
								1833
							],
							[
								2063,
								2068
							],
							[
								2073,
								2093
							],
							[
								2131,
								2138
							],
							[
								2175,
								2182
							],
							[
								2505,
								2513
							],
							[
								2531,
								2551
							],
							[
								2891,
								2924
							],
							[
								3014,
								3036
							],
							[
								3250,
								3291
							],
							[
								3302,
								3315
							],
							[
								3382,
								3417
							],
							[
								3462,
								3480
							],
							[
								3516,
								3558
							],
							[
								3624,
								3657
							],
							[
								3679,
								3683
							],
							[
								4072,
								4077
							],
							[
								4127,
								4131
							],
							[
								4158,
								4162
							],
							[
								4190,
								4194
							],
							[
								4217,
								4237
							],
							[
								4316,
								4320
							],
							[
								4390,
								4412
							],
							[
								4527,
								4532
							],
							[
								4565,
								4587
							],
							[
								4781,
								4803
							],
							[
								5226,
								5292
							],
							[
								5638,
								5647
							],
							[
								5752,
								5782
							],
							[
								6143,
								6178
							],
							[
								6210,
								6251
							],
							[
								6283,
								6349
							],
							[
								6382,
								6416
							],
							[
								6482,
								6529
							],
							[
								7065,
								7101
							],
							[
								7214,
								7223
							],
							[
								7459,
								7467
							],
							[
								7573,
								7580
							],
							[
								7630,
								7654
							],
							[
								7926,
								7937
							],
							[
								8027,
								8038
							],
							[
								8102,
								8113
							],
							[
								8167,
								8176
							],
							[
								8214,
								8225
							],
							[
								8313,
								8340
							],
							[
								8472,
								8476
							],
							[
								8500,
								8507
							],
							[
								8540,
								8556
							],
							[
								8685,
								8730
							],
							[
								8969,
								9027
							],
							[
								9356,
								9378
							],
							[
								9751,
								9761
							],
							[
								10005,
								10019
							],
							[
								10954,
								10978
							],
							[
								11104,
								11108
							],
							[
								11200,
								11214
							],
							[
								11304,
								11320
							],
							[
								11752,
								11765
							],
							[
								11783,
								11788
							],
							[
								11870,
								11877
							],
							[
								11905,
								11910
							],
							[
								12055,
								12080
							],
							[
								12255,
								12286
							],
							[
								12363,
								12374
							],
							[
								13959,
								13990
							],
							[
								14520,
								14553
							],
							[
								14825,
								14860
							],
							[
								14945,
								14978
							],
							[
								15909,
								15915
							],
							[
								17030,
								17034
							],
							[
								17930,
								17937
							],
							[
								19236,
								19268
							],
							[
								19649,
								19653
							],
							[
								20332,
								20367
							],
							[
								21129,
								21134
							],
							[
								21861,
								21865
							],
							[
								21959,
								21963
							],
							[
								22083,
								22092
							],
							[
								22222,
								22229
							],
							[
								22510,
								22517
							],
							[
								22598,
								22605
							],
							[
								22669,
								22685
							],
							[
								22750,
								22770
							],
							[
								23469,
								23481
							],
							[
								23580,
								23592
							],
							[
								23794,
								23810
							],
							[
								23904,
								23917
							],
							[
								24328,
								24346
							],
							[
								24528,
								24545
							],
							[
								24971,
								24990
							],
							[
								25088,
								25108
							],
							[
								26326,
								26348
							],
							[
								26821,
								26842
							],
							[
								27393,
								27412
							],
							[
								27846,
								27854
							],
							[
								28293,
								28302
							],
							[
								30769,
								30781
							],
							[
								32693,
								32728
							],
							[
								33226,
								33245
							],
							[
								33439,
								33456
							],
							[
								33501,
								33514
							],
							[
								33550,
								33560
							],
							[
								35031,
								35047
							],
							[
								35179,
								35198
							],
							[
								35209,
								35228
							],
							[
								35634,
								35654
							]
						],
						"symlist":
						[
							"isin = (other, p) =>",
							"Match",
							"constructor(pattern)",
							"apply()",
							"name =>",
							"value =>",
							" (level, message) =>",
							"async function AsyncCollect(iter)",
							"function GetMime(file)",
							"function Matcher(pattern, t = arg => arg)",
							" (...args) =>",
							"function KeyOrValueMatcher(pattern)",
							" ([key, value]) =>",
							"function GetRootDirectories(pattern = '*')",
							"MakeUUID = (rng = Math.random) =>",
							"n =>",
							"dd =>",
							"d =>",
							"d =>",
							"d =>",
							"function GetDir(dir)",
							"n =>",
							"function DirName(name)",
							"it =>",
							"function DateStr(date)",
							"function ModeStr(mode)",
							"HTMLPage = ({ title, style, scripts = [], children, ...props }) =>",
							"script =>",
							"FilterForm = ({ ...props }) =>",
							"HTMLTable = ({ rows, ...props }) =>",
							"HTMLTableRow = ({ columns, ...props }) =>",
							"HTMLTableColumn = ({ columns, children, tag = 'td', ...props }) =>",
							"FileLink = ({ file, ...props }) =>",
							"FileObject = ({ file, stat = {}, ...props }) =>",
							"FileTable = ({ files, ...props }) =>",
							"(a, b) =>",
							"field =>",
							"file =>",
							"function ReadExiv2(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function ReadExiftool(file)",
							"l =>",
							"line =>",
							"([line, idx]) =>",
							"function HeifConvert(src, dst, quality = 100)",
							"function MagickResize(src, dst, rotate = 0, width, height)",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							" function ParseBody(gen)",
							".createWS = (url, callbacks) =>",
							".out = s =>",
							"async function* test(req, resp)",
							" function proxy(req, resp)",
							" function* config(req, resp)",
							" function* file(req, resp)",
							"dir =>",
							"x =>",
							"file =>",
							"async function* files(req, resp)",
							"n =>",
							" function* files2(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file, rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"({ name }) =>",
							"onConnect(ws, req)",
							"sendCommand(data)",
							"onClose(ws, reason)",
							"onRequest(req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name, file)",
							"f = x =>",
							"result =>",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"AQAAAAAAAAAAAAAAbgcAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					4,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABuBwAAICBpc2luID0gKG90aGVyLCBwKSA9PgpNYXRjaAogIGNvbnN0cnVjdG9yKHBhdHRlcm4pCiAgYXBwbHkoKQogIG5hbWUgPT4KICB2YWx1ZSA9PgoobGV2ZWwsIG1lc3NhZ2UpID0+CkFzeW5jQ29sbGVjdChpdGVyKQpHZXRNaW1lKGZpbGUpCk1hdGNoZXIocGF0dGVybiwgdCA9IGFyZyA9PiBhcmcpCiguLi5hcmdzKSA9PgpLZXlPclZhbHVlTWF0Y2hlcihwYXR0ZXJuKQooW2tleSwgdmFsdWVdKSA9PgpHZXRSb290RGlyZWN0b3JpZXMocGF0dGVybiA9ICcqJykKTWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+CiAgbiA9PgogIGRkID0+CiAgZCA9PgogIGQgPT4KICBkID0+CkdldERpcihkaXIpCiAgbiA9PgpEaXJOYW1lKG5hbWUpCiAgaXQgPT4KRGF0ZVN0cihkYXRlKQpNb2RlU3RyKG1vZGUpCkhUTUxQYWdlID0gKHsgdGl0bGUsIHN0eWxlLCBzY3JpcHRzID0gW10sIGNoaWxkcmVuLCAuLi5wcm9wcyB9KSA9PgogIHNjcmlwdCA9PgpGaWx0ZXJGb3JtID0gKHsgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlID0gKHsgcm93cywgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlUm93ID0gKHsgY29sdW1ucywgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlQ29sdW1uID0gKHsgY29sdW1ucywgY2hpbGRyZW4sIHRhZyA9ICd0ZCcsIC4uLnByb3BzIH0pID0+CkZpbGVMaW5rID0gKHsgZmlsZSwgLi4ucHJvcHMgfSkgPT4KRmlsZU9iamVjdCA9ICh7IGZpbGUsIHN0YXQgPSB7fSwgLi4ucHJvcHMgfSkgPT4KRmlsZVRhYmxlID0gKHsgZmlsZXMsIC4uLnByb3BzIH0pID0+CihhLCBiKSA9PgogIGZpZWxkID0+CiAgZmlsZSA9PgpSZWFkRXhpdjIoZmlsZSkKKFtrLCB2XSkgPT4KKFtrLCB2XSkgPT4KKFtrLCB2XSkgPT4KKGEsIGIpID0+Cihbaywgdl0pID0+ClJlYWRFeGlmdG9vbChmaWxlKQogIGwgPT4KICBsaW5lID0+CihbbGluZSwgaWR4XSkgPT4KSGVpZkNvbnZlcnQoc3JjLCBkc3QsIHF1YWxpdHkgPSAxMDApCk1hZ2lja1Jlc2l6ZShzcmMsIGRzdCwgcm90YXRlID0gMCwgd2lkdGgsIGhlaWdodCkKICBtYWluKC4uLmFyZ3MpCihhLCB2KSA9PgoodiwgcHYsIG8pID0+Cihtb2R1bGUsIC4uLmFyZ3MpID0+CiAgbSA9PgogIC5zaG93ID0gYXJnID0+CiAgLmNsZWFudXAgPSAoKSA9PgooLi4uYXJncykgPT4KKCkgPT4KICBwdXRzKHMpCigpID0+ClBhcnNlQm9keShnZW4pCiAgLmNyZWF0ZVdTID0gKHVybCwgY2FsbGJhY2tzKSA9PgogIC5vdXQgPSBzID0+CiAgdGVzdChyZXEsIHJlc3ApCiAgcHJveHkocmVxLCByZXNwKQogIGNvbmZpZyhyZXEsIHJlc3ApCiAgZmlsZShyZXEsIHJlc3ApCiAgZGlyID0+CiAgeCA9PgogIGZpbGUgPT4KICBmaWxlcyhyZXEsIHJlc3ApCiAgbiA9PgogIGZpbGVzMihyZXEsIHJlc3ApCm4gPT4KICBuID0+CiAgbiA9PgooYSwgYikgPT4KICBuYW1lID0+CiAgZmlsZSA9PgogIGZpbGUgPT4KKFtmaWxlLCByZWxdKSA9PgooYWNjLCBbZmlsZSwgc3RdKSA9PgogIHN0cmluZyhhLCBiKQogIG51bWJlcihhLCBiKQooW25hbWUsIG9ial0pID0+Cih7IG5hbWUgfSkgPT4KICBvbkNvbm5lY3Qod3MsIHJlcSkKICBzZW5kQ29tbWFuZChkYXRhKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvblJlcXVlc3QocmVxLCByZXNwKQogIG9uT3BlbihuYW1lLCBmaWxlbmFtZSkKICBvbkNvbnRlbnQobmFtZSwgZGF0YSkKICBvbkNsb3NlKG5hbWUsIGZpbGUpCiAgZiA9IHggPT4KICByZXN1bHQgPT4KICBvbkZpbmFsaXplKCkKKG1hdGNoLCBwMSwgcDAsIHAyLCBwMywgb2Zmc2V0KSA9PgogIG9uTWVzc2FnZSh3cywgZGF0YSkKICBnZXQgY29ubmVjdGlvbnMoKQogIGdldCBieV91dWlkKCkKICB1dWlkKGRhdGEpCiAgb25GZChmZCwgcmQsIHdyKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgcXVpdCh3aHkpAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					5,
					3,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1813,
								1833
							],
							[
								2063,
								2068
							],
							[
								2073,
								2093
							],
							[
								2131,
								2138
							],
							[
								2175,
								2182
							],
							[
								2505,
								2513
							],
							[
								2531,
								2551
							],
							[
								2891,
								2924
							],
							[
								3014,
								3036
							],
							[
								3250,
								3291
							],
							[
								3302,
								3315
							],
							[
								3382,
								3417
							],
							[
								3462,
								3480
							],
							[
								3516,
								3558
							],
							[
								3624,
								3657
							],
							[
								3679,
								3683
							],
							[
								4072,
								4077
							],
							[
								4127,
								4131
							],
							[
								4158,
								4162
							],
							[
								4190,
								4194
							],
							[
								4217,
								4237
							],
							[
								4316,
								4320
							],
							[
								4390,
								4412
							],
							[
								4527,
								4532
							],
							[
								4565,
								4587
							],
							[
								4781,
								4803
							],
							[
								5226,
								5292
							],
							[
								5638,
								5647
							],
							[
								5752,
								5782
							],
							[
								6143,
								6178
							],
							[
								6210,
								6251
							],
							[
								6283,
								6349
							],
							[
								6382,
								6416
							],
							[
								6482,
								6529
							],
							[
								7065,
								7101
							],
							[
								7214,
								7223
							],
							[
								7459,
								7467
							],
							[
								7573,
								7580
							],
							[
								7630,
								7654
							],
							[
								7926,
								7937
							],
							[
								8027,
								8038
							],
							[
								8102,
								8113
							],
							[
								8167,
								8176
							],
							[
								8214,
								8225
							],
							[
								8313,
								8340
							],
							[
								8472,
								8476
							],
							[
								8500,
								8507
							],
							[
								8540,
								8556
							],
							[
								8685,
								8730
							],
							[
								8969,
								9027
							],
							[
								9356,
								9378
							],
							[
								9751,
								9761
							],
							[
								10005,
								10019
							],
							[
								10954,
								10978
							],
							[
								11104,
								11108
							],
							[
								11200,
								11214
							],
							[
								11304,
								11320
							],
							[
								11752,
								11765
							],
							[
								11783,
								11788
							],
							[
								11870,
								11877
							],
							[
								11905,
								11910
							],
							[
								12055,
								12080
							],
							[
								12255,
								12286
							],
							[
								12363,
								12374
							],
							[
								13959,
								13990
							],
							[
								14520,
								14553
							],
							[
								14825,
								14860
							],
							[
								14945,
								14978
							],
							[
								15909,
								15915
							],
							[
								17030,
								17034
							],
							[
								17930,
								17937
							],
							[
								19236,
								19268
							],
							[
								19649,
								19653
							],
							[
								20332,
								20367
							],
							[
								21129,
								21134
							],
							[
								21861,
								21865
							],
							[
								21959,
								21963
							],
							[
								22083,
								22092
							],
							[
								22222,
								22229
							],
							[
								22510,
								22517
							],
							[
								22598,
								22605
							],
							[
								22669,
								22685
							],
							[
								22750,
								22770
							],
							[
								23469,
								23481
							],
							[
								23580,
								23592
							],
							[
								23794,
								23810
							],
							[
								23904,
								23917
							],
							[
								24328,
								24346
							],
							[
								24528,
								24545
							],
							[
								24971,
								24990
							],
							[
								25088,
								25108
							],
							[
								26326,
								26348
							],
							[
								26821,
								26842
							],
							[
								27393,
								27412
							],
							[
								27846,
								27854
							],
							[
								28293,
								28302
							],
							[
								30769,
								30781
							],
							[
								32693,
								32728
							],
							[
								33226,
								33245
							],
							[
								33439,
								33456
							],
							[
								33501,
								33514
							],
							[
								33550,
								33560
							],
							[
								35031,
								35047
							],
							[
								35179,
								35198
							],
							[
								35209,
								35228
							],
							[
								35634,
								35654
							]
						],
						"symlist":
						[
							"isin = (other, p) =>",
							"Match",
							"constructor(pattern)",
							"apply()",
							"name =>",
							"value =>",
							" (level, message) =>",
							"async function AsyncCollect(iter)",
							"function GetMime(file)",
							"function Matcher(pattern, t = arg => arg)",
							" (...args) =>",
							"function KeyOrValueMatcher(pattern)",
							" ([key, value]) =>",
							"function GetRootDirectories(pattern = '*')",
							"MakeUUID = (rng = Math.random) =>",
							"n =>",
							"dd =>",
							"d =>",
							"d =>",
							"d =>",
							"function GetDir(dir)",
							"n =>",
							"function DirName(name)",
							"it =>",
							"function DateStr(date)",
							"function ModeStr(mode)",
							"HTMLPage = ({ title, style, scripts = [], children, ...props }) =>",
							"script =>",
							"FilterForm = ({ ...props }) =>",
							"HTMLTable = ({ rows, ...props }) =>",
							"HTMLTableRow = ({ columns, ...props }) =>",
							"HTMLTableColumn = ({ columns, children, tag = 'td', ...props }) =>",
							"FileLink = ({ file, ...props }) =>",
							"FileObject = ({ file, stat = {}, ...props }) =>",
							"FileTable = ({ files, ...props }) =>",
							"(a, b) =>",
							"field =>",
							"file =>",
							"function ReadExiv2(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function ReadExiftool(file)",
							"l =>",
							"line =>",
							"([line, idx]) =>",
							"function HeifConvert(src, dst, quality = 100)",
							"function MagickResize(src, dst, rotate = 0, width, height)",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							" function ParseBody(gen)",
							".createWS = (url, callbacks) =>",
							".out = s =>",
							"async function* test(req, resp)",
							" function proxy(req, resp)",
							" function* config(req, resp)",
							" function* file(req, resp)",
							"dir =>",
							"x =>",
							"file =>",
							"async function* files(req, resp)",
							"n =>",
							" function* files2(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file, rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"({ name }) =>",
							"onConnect(ws, req)",
							"sendCommand(data)",
							"onClose(ws, reason)",
							"onRequest(req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name, file)",
							"f = x =>",
							"result =>",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"BQAAAAAAAAAAAAAAbgcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG4HAAAgIGlzaW4gPSAob3RoZXIsIHApID0+Ck1hdGNoCiAgY29uc3RydWN0b3IocGF0dGVybikKICBhcHBseSgpCiAgbmFtZSA9PgogIHZhbHVlID0+CihsZXZlbCwgbWVzc2FnZSkgPT4KQXN5bmNDb2xsZWN0KGl0ZXIpCkdldE1pbWUoZmlsZSkKTWF0Y2hlcihwYXR0ZXJuLCB0ID0gYXJnID0+IGFyZykKKC4uLmFyZ3MpID0+CktleU9yVmFsdWVNYXRjaGVyKHBhdHRlcm4pCihba2V5LCB2YWx1ZV0pID0+CkdldFJvb3REaXJlY3RvcmllcyhwYXR0ZXJuID0gJyonKQpNYWtlVVVJRCA9IChybmcgPSBNYXRoLnJhbmRvbSkgPT4KICBuID0+CiAgZGQgPT4KICBkID0+CiAgZCA9PgogIGQgPT4KR2V0RGlyKGRpcikKICBuID0+CkRpck5hbWUobmFtZSkKICBpdCA9PgpEYXRlU3RyKGRhdGUpCk1vZGVTdHIobW9kZSkKSFRNTFBhZ2UgPSAoeyB0aXRsZSwgc3R5bGUsIHNjcmlwdHMgPSBbXSwgY2hpbGRyZW4sIC4uLnByb3BzIH0pID0+CiAgc2NyaXB0ID0+CkZpbHRlckZvcm0gPSAoeyAuLi5wcm9wcyB9KSA9PgpIVE1MVGFibGUgPSAoeyByb3dzLCAuLi5wcm9wcyB9KSA9PgpIVE1MVGFibGVSb3cgPSAoeyBjb2x1bW5zLCAuLi5wcm9wcyB9KSA9PgpIVE1MVGFibGVDb2x1bW4gPSAoeyBjb2x1bW5zLCBjaGlsZHJlbiwgdGFnID0gJ3RkJywgLi4ucHJvcHMgfSkgPT4KRmlsZUxpbmsgPSAoeyBmaWxlLCAuLi5wcm9wcyB9KSA9PgpGaWxlT2JqZWN0ID0gKHsgZmlsZSwgc3RhdCA9IHt9LCAuLi5wcm9wcyB9KSA9PgpGaWxlVGFibGUgPSAoeyBmaWxlcywgLi4ucHJvcHMgfSkgPT4KKGEsIGIpID0+CiAgZmllbGQgPT4KICBmaWxlID0+ClJlYWRFeGl2MihmaWxlKQooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgooYSwgYikgPT4KKFtrLCB2XSkgPT4KUmVhZEV4aWZ0b29sKGZpbGUpCiAgbCA9PgogIGxpbmUgPT4KKFtsaW5lLCBpZHhdKSA9PgpIZWlmQ29udmVydChzcmMsIGRzdCwgcXVhbGl0eSA9IDEwMCkKTWFnaWNrUmVzaXplKHNyYywgZHN0LCByb3RhdGUgPSAwLCB3aWR0aCwgaGVpZ2h0KQogIG1haW4oLi4uYXJncykKKGEsIHYpID0+Cih2LCBwdiwgbykgPT4KKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSBhcmcgPT4KICAuY2xlYW51cCA9ICgpID0+CiguLi5hcmdzKSA9PgooKSA9PgogIHB1dHMocykKKCkgPT4KUGFyc2VCb2R5KGdlbikKICAuY3JlYXRlV1MgPSAodXJsLCBjYWxsYmFja3MpID0+CiAgLm91dCA9IHMgPT4KICB0ZXN0KHJlcSwgcmVzcCkKICBwcm94eShyZXEsIHJlc3ApCiAgY29uZmlnKHJlcSwgcmVzcCkKICBmaWxlKHJlcSwgcmVzcCkKICBkaXIgPT4KICB4ID0+CiAgZmlsZSA9PgogIGZpbGVzKHJlcSwgcmVzcCkKICBuID0+CiAgZmlsZXMyKHJlcSwgcmVzcCkKbiA9PgogIG4gPT4KICBuID0+CihhLCBiKSA9PgogIG5hbWUgPT4KICBmaWxlID0+CiAgZmlsZSA9PgooW2ZpbGUsIHJlbF0pID0+CihhY2MsIFtmaWxlLCBzdF0pID0+CiAgc3RyaW5nKGEsIGIpCiAgbnVtYmVyKGEsIGIpCihbbmFtZSwgb2JqXSkgPT4KKHsgbmFtZSB9KSA9PgogIG9uQ29ubmVjdCh3cywgcmVxKQogIHNlbmRDb21tYW5kKGRhdGEpCiAgb25DbG9zZSh3cywgcmVhc29uKQogIG9uUmVxdWVzdChyZXEsIHJlc3ApCiAgb25PcGVuKG5hbWUsIGZpbGVuYW1lKQogIG9uQ29udGVudChuYW1lLCBkYXRhKQogIG9uQ2xvc2UobmFtZSwgZmlsZSkKICBmID0geCA9PgogIHJlc3VsdCA9PgogIG9uRmluYWxpemUoKQoobWF0Y2gsIHAxLCBwMCwgcDIsIHAzLCBvZmZzZXQpID0+CiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIGdldCBjb25uZWN0aW9ucygpCiAgZ2V0IGJ5X3V1aWQoKQogIHV1aWQoZGF0YSkKICBvbkZkKGZkLCByZCwgd3IpCiAgb25DbG9zZSh3cywgcmVhc29uKQogIG9uTWVzc2FnZSh3cywgZGF0YSkKICBxdWl0KHdoeSkAAAAAAAAAAG4HAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABuBwAAICBpc2luID0gKG90aGVyLCBwKSA9PgpNYXRjaAogIGNvbnN0cnVjdG9yKHBhdHRlcm4pCiAgYXBwbHkoKQogIG5hbWUgPT4KICB2YWx1ZSA9PgoobGV2ZWwsIG1lc3NhZ2UpID0+CkFzeW5jQ29sbGVjdChpdGVyKQpHZXRNaW1lKGZpbGUpCk1hdGNoZXIocGF0dGVybiwgdCA9IGFyZyA9PiBhcmcpCiguLi5hcmdzKSA9PgpLZXlPclZhbHVlTWF0Y2hlcihwYXR0ZXJuKQooW2tleSwgdmFsdWVdKSA9PgpHZXRSb290RGlyZWN0b3JpZXMocGF0dGVybiA9ICcqJykKTWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+CiAgbiA9PgogIGRkID0+CiAgZCA9PgogIGQgPT4KICBkID0+CkdldERpcihkaXIpCiAgbiA9PgpEaXJOYW1lKG5hbWUpCiAgaXQgPT4KRGF0ZVN0cihkYXRlKQpNb2RlU3RyKG1vZGUpCkhUTUxQYWdlID0gKHsgdGl0bGUsIHN0eWxlLCBzY3JpcHRzID0gW10sIGNoaWxkcmVuLCAuLi5wcm9wcyB9KSA9PgogIHNjcmlwdCA9PgpGaWx0ZXJGb3JtID0gKHsgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlID0gKHsgcm93cywgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlUm93ID0gKHsgY29sdW1ucywgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlQ29sdW1uID0gKHsgY29sdW1ucywgY2hpbGRyZW4sIHRhZyA9ICd0ZCcsIC4uLnByb3BzIH0pID0+CkZpbGVMaW5rID0gKHsgZmlsZSwgLi4ucHJvcHMgfSkgPT4KRmlsZU9iamVjdCA9ICh7IGZpbGUsIHN0YXQgPSB7fSwgLi4ucHJvcHMgfSkgPT4KRmlsZVRhYmxlID0gKHsgZmlsZXMsIC4uLnByb3BzIH0pID0+CihhLCBiKSA9PgogIGZpZWxkID0+CiAgZmlsZSA9PgpSZWFkRXhpdjIoZmlsZSkKKFtrLCB2XSkgPT4KKFtrLCB2XSkgPT4KKFtrLCB2XSkgPT4KKGEsIGIpID0+Cihbaywgdl0pID0+ClJlYWRFeGlmdG9vbChmaWxlKQogIGwgPT4KICBsaW5lID0+CihbbGluZSwgaWR4XSkgPT4KSGVpZkNvbnZlcnQoc3JjLCBkc3QsIHF1YWxpdHkgPSAxMDApCk1hZ2lja1Jlc2l6ZShzcmMsIGRzdCwgcm90YXRlID0gMCwgd2lkdGgsIGhlaWdodCkKICBtYWluKC4uLmFyZ3MpCihhLCB2KSA9PgoodiwgcHYsIG8pID0+Cihtb2R1bGUsIC4uLmFyZ3MpID0+CiAgbSA9PgogIC5zaG93ID0gYXJnID0+CiAgLmNsZWFudXAgPSAoKSA9PgooLi4uYXJncykgPT4KKCkgPT4KICBwdXRzKHMpCigpID0+ClBhcnNlQm9keShnZW4pCiAgLmNyZWF0ZVdTID0gKHVybCwgY2FsbGJhY2tzKSA9PgogIC5vdXQgPSBzID0+CiAgdGVzdChyZXEsIHJlc3ApCiAgcHJveHkocmVxLCByZXNwKQogIGNvbmZpZyhyZXEsIHJlc3ApCiAgZmlsZShyZXEsIHJlc3ApCiAgZGlyID0+CiAgeCA9PgogIGZpbGUgPT4KICBmaWxlcyhyZXEsIHJlc3ApCiAgbiA9PgogIGZpbGVzMihyZXEsIHJlc3ApCm4gPT4KICBuID0+CiAgbiA9PgooYSwgYikgPT4KICBuYW1lID0+CiAgZmlsZSA9PgogIGZpbGUgPT4KKFtmaWxlLCByZWxdKSA9PgooYWNjLCBbZmlsZSwgc3RdKSA9PgogIHN0cmluZyhhLCBiKQogIG51bWJlcihhLCBiKQooW25hbWUsIG9ial0pID0+Cih7IG5hbWUgfSkgPT4KICBvbkNvbm5lY3Qod3MsIHJlcSkKICBzZW5kQ29tbWFuZChkYXRhKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvblJlcXVlc3QocmVxLCByZXNwKQogIG9uT3BlbihuYW1lLCBmaWxlbmFtZSkKICBvbkNvbnRlbnQobmFtZSwgZGF0YSkKICBvbkNsb3NlKG5hbWUsIGZpbGUpCiAgZiA9IHggPT4KICByZXN1bHQgPT4KICBvbkZpbmFsaXplKCkKKG1hdGNoLCBwMSwgcDAsIHAyLCBwMywgb2Zmc2V0KSA9PgogIG9uTWVzc2FnZSh3cywgZGF0YSkKICBnZXQgY29ubmVjdGlvbnMoKQogIGdldCBieV91dWlkKCkKICB1dWlkKGRhdGEpCiAgb25GZChmZCwgcmQsIHdyKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgcXVpdCh3aHkpAAAAAAAAAABuBwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					6,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1813,
								1833
							],
							[
								2063,
								2068
							],
							[
								2073,
								2093
							],
							[
								2131,
								2138
							],
							[
								2175,
								2182
							],
							[
								2505,
								2513
							],
							[
								2531,
								2551
							],
							[
								2891,
								2924
							],
							[
								3014,
								3036
							],
							[
								3250,
								3291
							],
							[
								3302,
								3315
							],
							[
								3382,
								3417
							],
							[
								3462,
								3480
							],
							[
								3516,
								3558
							],
							[
								3624,
								3657
							],
							[
								3679,
								3683
							],
							[
								4072,
								4077
							],
							[
								4127,
								4131
							],
							[
								4158,
								4162
							],
							[
								4190,
								4194
							],
							[
								4217,
								4237
							],
							[
								4316,
								4320
							],
							[
								4390,
								4412
							],
							[
								4527,
								4532
							],
							[
								4565,
								4587
							],
							[
								4781,
								4803
							],
							[
								5226,
								5292
							],
							[
								5638,
								5647
							],
							[
								5752,
								5782
							],
							[
								6143,
								6178
							],
							[
								6210,
								6251
							],
							[
								6283,
								6349
							],
							[
								6382,
								6416
							],
							[
								6482,
								6529
							],
							[
								7065,
								7101
							],
							[
								7214,
								7223
							],
							[
								7459,
								7467
							],
							[
								7573,
								7580
							],
							[
								7630,
								7654
							],
							[
								7926,
								7937
							],
							[
								8027,
								8038
							],
							[
								8102,
								8113
							],
							[
								8167,
								8176
							],
							[
								8214,
								8225
							],
							[
								8313,
								8340
							],
							[
								8472,
								8476
							],
							[
								8500,
								8507
							],
							[
								8540,
								8556
							],
							[
								8685,
								8730
							],
							[
								8969,
								9027
							],
							[
								9356,
								9378
							],
							[
								9751,
								9761
							],
							[
								10005,
								10019
							],
							[
								10954,
								10978
							],
							[
								11104,
								11108
							],
							[
								11200,
								11214
							],
							[
								11304,
								11320
							],
							[
								11752,
								11765
							],
							[
								11783,
								11788
							],
							[
								11870,
								11877
							],
							[
								11905,
								11910
							],
							[
								12055,
								12080
							],
							[
								12255,
								12286
							],
							[
								12363,
								12374
							],
							[
								13959,
								13990
							],
							[
								14520,
								14553
							],
							[
								14825,
								14860
							],
							[
								14945,
								14978
							],
							[
								15909,
								15915
							],
							[
								17030,
								17034
							],
							[
								17930,
								17937
							],
							[
								19236,
								19268
							],
							[
								19649,
								19653
							],
							[
								20332,
								20367
							],
							[
								21129,
								21134
							],
							[
								21861,
								21865
							],
							[
								21959,
								21963
							],
							[
								22083,
								22092
							],
							[
								22222,
								22229
							],
							[
								22510,
								22517
							],
							[
								22598,
								22605
							],
							[
								22669,
								22685
							],
							[
								22750,
								22770
							],
							[
								23469,
								23481
							],
							[
								23580,
								23592
							],
							[
								23794,
								23810
							],
							[
								23904,
								23917
							],
							[
								24328,
								24346
							],
							[
								24528,
								24545
							],
							[
								24971,
								24990
							],
							[
								25088,
								25108
							],
							[
								26326,
								26348
							],
							[
								26821,
								26842
							],
							[
								27393,
								27412
							],
							[
								27846,
								27854
							],
							[
								28293,
								28302
							],
							[
								30769,
								30781
							],
							[
								32693,
								32728
							],
							[
								33226,
								33245
							],
							[
								33507,
								33524
							],
							[
								33569,
								33582
							],
							[
								33618,
								33628
							],
							[
								35099,
								35115
							],
							[
								35247,
								35266
							],
							[
								35277,
								35296
							],
							[
								35702,
								35722
							]
						],
						"symlist":
						[
							"isin = (other, p) =>",
							"Match",
							"constructor(pattern)",
							"apply()",
							"name =>",
							"value =>",
							" (level, message) =>",
							"async function AsyncCollect(iter)",
							"function GetMime(file)",
							"function Matcher(pattern, t = arg => arg)",
							" (...args) =>",
							"function KeyOrValueMatcher(pattern)",
							" ([key, value]) =>",
							"function GetRootDirectories(pattern = '*')",
							"MakeUUID = (rng = Math.random) =>",
							"n =>",
							"dd =>",
							"d =>",
							"d =>",
							"d =>",
							"function GetDir(dir)",
							"n =>",
							"function DirName(name)",
							"it =>",
							"function DateStr(date)",
							"function ModeStr(mode)",
							"HTMLPage = ({ title, style, scripts = [], children, ...props }) =>",
							"script =>",
							"FilterForm = ({ ...props }) =>",
							"HTMLTable = ({ rows, ...props }) =>",
							"HTMLTableRow = ({ columns, ...props }) =>",
							"HTMLTableColumn = ({ columns, children, tag = 'td', ...props }) =>",
							"FileLink = ({ file, ...props }) =>",
							"FileObject = ({ file, stat = {}, ...props }) =>",
							"FileTable = ({ files, ...props }) =>",
							"(a, b) =>",
							"field =>",
							"file =>",
							"function ReadExiv2(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function ReadExiftool(file)",
							"l =>",
							"line =>",
							"([line, idx]) =>",
							"function HeifConvert(src, dst, quality = 100)",
							"function MagickResize(src, dst, rotate = 0, width, height)",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							" function ParseBody(gen)",
							".createWS = (url, callbacks) =>",
							".out = s =>",
							"async function* test(req, resp)",
							" function proxy(req, resp)",
							" function* config(req, resp)",
							" function* file(req, resp)",
							"dir =>",
							"x =>",
							"file =>",
							"async function* files(req, resp)",
							"n =>",
							" function* files2(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file, rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"({ name }) =>",
							"onConnect(ws, req)",
							"sendCommand(data)",
							"onClose(ws, reason)",
							"onRequest(req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name, file)",
							"f = x =>",
							"result =>",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABuBwAAICBpc2luID0gKG90aGVyLCBwKSA9PgpNYXRjaAogIGNvbnN0cnVjdG9yKHBhdHRlcm4pCiAgYXBwbHkoKQogIG5hbWUgPT4KICB2YWx1ZSA9PgoobGV2ZWwsIG1lc3NhZ2UpID0+CkFzeW5jQ29sbGVjdChpdGVyKQpHZXRNaW1lKGZpbGUpCk1hdGNoZXIocGF0dGVybiwgdCA9IGFyZyA9PiBhcmcpCiguLi5hcmdzKSA9PgpLZXlPclZhbHVlTWF0Y2hlcihwYXR0ZXJuKQooW2tleSwgdmFsdWVdKSA9PgpHZXRSb290RGlyZWN0b3JpZXMocGF0dGVybiA9ICcqJykKTWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+CiAgbiA9PgogIGRkID0+CiAgZCA9PgogIGQgPT4KICBkID0+CkdldERpcihkaXIpCiAgbiA9PgpEaXJOYW1lKG5hbWUpCiAgaXQgPT4KRGF0ZVN0cihkYXRlKQpNb2RlU3RyKG1vZGUpCkhUTUxQYWdlID0gKHsgdGl0bGUsIHN0eWxlLCBzY3JpcHRzID0gW10sIGNoaWxkcmVuLCAuLi5wcm9wcyB9KSA9PgogIHNjcmlwdCA9PgpGaWx0ZXJGb3JtID0gKHsgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlID0gKHsgcm93cywgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlUm93ID0gKHsgY29sdW1ucywgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlQ29sdW1uID0gKHsgY29sdW1ucywgY2hpbGRyZW4sIHRhZyA9ICd0ZCcsIC4uLnByb3BzIH0pID0+CkZpbGVMaW5rID0gKHsgZmlsZSwgLi4ucHJvcHMgfSkgPT4KRmlsZU9iamVjdCA9ICh7IGZpbGUsIHN0YXQgPSB7fSwgLi4ucHJvcHMgfSkgPT4KRmlsZVRhYmxlID0gKHsgZmlsZXMsIC4uLnByb3BzIH0pID0+CihhLCBiKSA9PgogIGZpZWxkID0+CiAgZmlsZSA9PgpSZWFkRXhpdjIoZmlsZSkKKFtrLCB2XSkgPT4KKFtrLCB2XSkgPT4KKFtrLCB2XSkgPT4KKGEsIGIpID0+Cihbaywgdl0pID0+ClJlYWRFeGlmdG9vbChmaWxlKQogIGwgPT4KICBsaW5lID0+CihbbGluZSwgaWR4XSkgPT4KSGVpZkNvbnZlcnQoc3JjLCBkc3QsIHF1YWxpdHkgPSAxMDApCk1hZ2lja1Jlc2l6ZShzcmMsIGRzdCwgcm90YXRlID0gMCwgd2lkdGgsIGhlaWdodCkKICBtYWluKC4uLmFyZ3MpCihhLCB2KSA9PgoodiwgcHYsIG8pID0+Cihtb2R1bGUsIC4uLmFyZ3MpID0+CiAgbSA9PgogIC5zaG93ID0gYXJnID0+CiAgLmNsZWFudXAgPSAoKSA9PgooLi4uYXJncykgPT4KKCkgPT4KICBwdXRzKHMpCigpID0+ClBhcnNlQm9keShnZW4pCiAgLmNyZWF0ZVdTID0gKHVybCwgY2FsbGJhY2tzKSA9PgogIC5vdXQgPSBzID0+CiAgdGVzdChyZXEsIHJlc3ApCiAgcHJveHkocmVxLCByZXNwKQogIGNvbmZpZyhyZXEsIHJlc3ApCiAgZmlsZShyZXEsIHJlc3ApCiAgZGlyID0+CiAgeCA9PgogIGZpbGUgPT4KICBmaWxlcyhyZXEsIHJlc3ApCiAgbiA9PgogIGZpbGVzMihyZXEsIHJlc3ApCm4gPT4KICBuID0+CiAgbiA9PgooYSwgYikgPT4KICBuYW1lID0+CiAgZmlsZSA9PgogIGZpbGUgPT4KKFtmaWxlLCByZWxdKSA9PgooYWNjLCBbZmlsZSwgc3RdKSA9PgogIHN0cmluZyhhLCBiKQogIG51bWJlcihhLCBiKQooW25hbWUsIG9ial0pID0+Cih7IG5hbWUgfSkgPT4KICBvbkNvbm5lY3Qod3MsIHJlcSkKICBzZW5kQ29tbWFuZChkYXRhKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvblJlcXVlc3QocmVxLCByZXNwKQogIG9uT3BlbihuYW1lLCBmaWxlbmFtZSkKICBvbkNvbnRlbnQobmFtZSwgZGF0YSkKICBvbkNsb3NlKG5hbWUsIGZpbGUpCiAgZiA9IHggPT4KICByZXN1bHQgPT4KICBvbkZpbmFsaXplKCkKKG1hdGNoLCBwMSwgcDAsIHAyLCBwMywgb2Zmc2V0KSA9PgogIG9uTWVzc2FnZSh3cywgZGF0YSkKICBnZXQgY29ubmVjdGlvbnMoKQogIGdldCBieV91dWlkKCkKICB1dWlkKGRhdGEpCiAgb25GZChmZCwgcmQsIHdyKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgcXVpdCh3aHkpAAAAAAAAAABuBwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					7,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1813,
								1833
							],
							[
								2063,
								2068
							],
							[
								2073,
								2093
							],
							[
								2131,
								2138
							],
							[
								2175,
								2182
							],
							[
								2505,
								2513
							],
							[
								2531,
								2551
							],
							[
								2891,
								2924
							],
							[
								3014,
								3036
							],
							[
								3250,
								3291
							],
							[
								3302,
								3315
							],
							[
								3382,
								3417
							],
							[
								3462,
								3480
							],
							[
								3516,
								3558
							],
							[
								3624,
								3657
							],
							[
								3679,
								3683
							],
							[
								4072,
								4077
							],
							[
								4127,
								4131
							],
							[
								4158,
								4162
							],
							[
								4190,
								4194
							],
							[
								4217,
								4237
							],
							[
								4316,
								4320
							],
							[
								4390,
								4412
							],
							[
								4527,
								4532
							],
							[
								4565,
								4587
							],
							[
								4781,
								4803
							],
							[
								5226,
								5292
							],
							[
								5638,
								5647
							],
							[
								5752,
								5782
							],
							[
								6143,
								6178
							],
							[
								6210,
								6251
							],
							[
								6283,
								6349
							],
							[
								6382,
								6416
							],
							[
								6482,
								6529
							],
							[
								7065,
								7101
							],
							[
								7214,
								7223
							],
							[
								7459,
								7467
							],
							[
								7573,
								7580
							],
							[
								7630,
								7654
							],
							[
								7926,
								7937
							],
							[
								8027,
								8038
							],
							[
								8102,
								8113
							],
							[
								8167,
								8176
							],
							[
								8214,
								8225
							],
							[
								8313,
								8340
							],
							[
								8472,
								8476
							],
							[
								8500,
								8507
							],
							[
								8540,
								8556
							],
							[
								8685,
								8730
							],
							[
								8969,
								9027
							],
							[
								9356,
								9378
							],
							[
								9751,
								9761
							],
							[
								10005,
								10019
							],
							[
								10954,
								10978
							],
							[
								11104,
								11108
							],
							[
								11200,
								11214
							],
							[
								11304,
								11320
							],
							[
								11752,
								11765
							],
							[
								11783,
								11788
							],
							[
								11870,
								11877
							],
							[
								11905,
								11910
							],
							[
								12055,
								12080
							],
							[
								12255,
								12286
							],
							[
								12363,
								12374
							],
							[
								13959,
								13990
							],
							[
								14520,
								14553
							],
							[
								14825,
								14860
							],
							[
								14945,
								14978
							],
							[
								15909,
								15915
							],
							[
								17030,
								17034
							],
							[
								17930,
								17937
							],
							[
								19236,
								19268
							],
							[
								19649,
								19653
							],
							[
								20332,
								20367
							],
							[
								21129,
								21134
							],
							[
								21861,
								21865
							],
							[
								21959,
								21963
							],
							[
								22083,
								22092
							],
							[
								22222,
								22229
							],
							[
								22510,
								22517
							],
							[
								22598,
								22605
							],
							[
								22669,
								22685
							],
							[
								22750,
								22770
							],
							[
								23469,
								23481
							],
							[
								23580,
								23592
							],
							[
								23794,
								23810
							],
							[
								23904,
								23917
							],
							[
								24328,
								24346
							],
							[
								24528,
								24545
							],
							[
								24971,
								24990
							],
							[
								25088,
								25108
							],
							[
								26326,
								26348
							],
							[
								26821,
								26842
							],
							[
								27393,
								27412
							],
							[
								27846,
								27854
							],
							[
								28293,
								28302
							],
							[
								30769,
								30781
							],
							[
								32693,
								32728
							],
							[
								33226,
								33245
							],
							[
								33499,
								33516
							],
							[
								33561,
								33574
							],
							[
								33610,
								33620
							],
							[
								35091,
								35107
							],
							[
								35239,
								35258
							],
							[
								35269,
								35288
							],
							[
								35694,
								35714
							]
						],
						"symlist":
						[
							"isin = (other, p) =>",
							"Match",
							"constructor(pattern)",
							"apply()",
							"name =>",
							"value =>",
							" (level, message) =>",
							"async function AsyncCollect(iter)",
							"function GetMime(file)",
							"function Matcher(pattern, t = arg => arg)",
							" (...args) =>",
							"function KeyOrValueMatcher(pattern)",
							" ([key, value]) =>",
							"function GetRootDirectories(pattern = '*')",
							"MakeUUID = (rng = Math.random) =>",
							"n =>",
							"dd =>",
							"d =>",
							"d =>",
							"d =>",
							"function GetDir(dir)",
							"n =>",
							"function DirName(name)",
							"it =>",
							"function DateStr(date)",
							"function ModeStr(mode)",
							"HTMLPage = ({ title, style, scripts = [], children, ...props }) =>",
							"script =>",
							"FilterForm = ({ ...props }) =>",
							"HTMLTable = ({ rows, ...props }) =>",
							"HTMLTableRow = ({ columns, ...props }) =>",
							"HTMLTableColumn = ({ columns, children, tag = 'td', ...props }) =>",
							"FileLink = ({ file, ...props }) =>",
							"FileObject = ({ file, stat = {}, ...props }) =>",
							"FileTable = ({ files, ...props }) =>",
							"(a, b) =>",
							"field =>",
							"file =>",
							"function ReadExiv2(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function ReadExiftool(file)",
							"l =>",
							"line =>",
							"([line, idx]) =>",
							"function HeifConvert(src, dst, quality = 100)",
							"function MagickResize(src, dst, rotate = 0, width, height)",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							" function ParseBody(gen)",
							".createWS = (url, callbacks) =>",
							".out = s =>",
							"async function* test(req, resp)",
							" function proxy(req, resp)",
							" function* config(req, resp)",
							" function* file(req, resp)",
							"dir =>",
							"x =>",
							"file =>",
							"async function* files(req, resp)",
							"n =>",
							" function* files2(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file, rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"({ name }) =>",
							"onConnect(ws, req)",
							"sendCommand(data)",
							"onClose(ws, reason)",
							"onRequest(req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name, file)",
							"f = x =>",
							"result =>",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAABuBwAAICBpc2luID0gKG90aGVyLCBwKSA9PgpNYXRjaAogIGNvbnN0cnVjdG9yKHBhdHRlcm4pCiAgYXBwbHkoKQogIG5hbWUgPT4KICB2YWx1ZSA9PgoobGV2ZWwsIG1lc3NhZ2UpID0+CkFzeW5jQ29sbGVjdChpdGVyKQpHZXRNaW1lKGZpbGUpCk1hdGNoZXIocGF0dGVybiwgdCA9IGFyZyA9PiBhcmcpCiguLi5hcmdzKSA9PgpLZXlPclZhbHVlTWF0Y2hlcihwYXR0ZXJuKQooW2tleSwgdmFsdWVdKSA9PgpHZXRSb290RGlyZWN0b3JpZXMocGF0dGVybiA9ICcqJykKTWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+CiAgbiA9PgogIGRkID0+CiAgZCA9PgogIGQgPT4KICBkID0+CkdldERpcihkaXIpCiAgbiA9PgpEaXJOYW1lKG5hbWUpCiAgaXQgPT4KRGF0ZVN0cihkYXRlKQpNb2RlU3RyKG1vZGUpCkhUTUxQYWdlID0gKHsgdGl0bGUsIHN0eWxlLCBzY3JpcHRzID0gW10sIGNoaWxkcmVuLCAuLi5wcm9wcyB9KSA9PgogIHNjcmlwdCA9PgpGaWx0ZXJGb3JtID0gKHsgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlID0gKHsgcm93cywgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlUm93ID0gKHsgY29sdW1ucywgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlQ29sdW1uID0gKHsgY29sdW1ucywgY2hpbGRyZW4sIHRhZyA9ICd0ZCcsIC4uLnByb3BzIH0pID0+CkZpbGVMaW5rID0gKHsgZmlsZSwgLi4ucHJvcHMgfSkgPT4KRmlsZU9iamVjdCA9ICh7IGZpbGUsIHN0YXQgPSB7fSwgLi4ucHJvcHMgfSkgPT4KRmlsZVRhYmxlID0gKHsgZmlsZXMsIC4uLnByb3BzIH0pID0+CihhLCBiKSA9PgogIGZpZWxkID0+CiAgZmlsZSA9PgpSZWFkRXhpdjIoZmlsZSkKKFtrLCB2XSkgPT4KKFtrLCB2XSkgPT4KKFtrLCB2XSkgPT4KKGEsIGIpID0+Cihbaywgdl0pID0+ClJlYWRFeGlmdG9vbChmaWxlKQogIGwgPT4KICBsaW5lID0+CihbbGluZSwgaWR4XSkgPT4KSGVpZkNvbnZlcnQoc3JjLCBkc3QsIHF1YWxpdHkgPSAxMDApCk1hZ2lja1Jlc2l6ZShzcmMsIGRzdCwgcm90YXRlID0gMCwgd2lkdGgsIGhlaWdodCkKICBtYWluKC4uLmFyZ3MpCihhLCB2KSA9PgoodiwgcHYsIG8pID0+Cihtb2R1bGUsIC4uLmFyZ3MpID0+CiAgbSA9PgogIC5zaG93ID0gYXJnID0+CiAgLmNsZWFudXAgPSAoKSA9PgooLi4uYXJncykgPT4KKCkgPT4KICBwdXRzKHMpCigpID0+ClBhcnNlQm9keShnZW4pCiAgLmNyZWF0ZVdTID0gKHVybCwgY2FsbGJhY2tzKSA9PgogIC5vdXQgPSBzID0+CiAgdGVzdChyZXEsIHJlc3ApCiAgcHJveHkocmVxLCByZXNwKQogIGNvbmZpZyhyZXEsIHJlc3ApCiAgZmlsZShyZXEsIHJlc3ApCiAgZGlyID0+CiAgeCA9PgogIGZpbGUgPT4KICBmaWxlcyhyZXEsIHJlc3ApCiAgbiA9PgogIGZpbGVzMihyZXEsIHJlc3ApCm4gPT4KICBuID0+CiAgbiA9PgooYSwgYikgPT4KICBuYW1lID0+CiAgZmlsZSA9PgogIGZpbGUgPT4KKFtmaWxlLCByZWxdKSA9PgooYWNjLCBbZmlsZSwgc3RdKSA9PgogIHN0cmluZyhhLCBiKQogIG51bWJlcihhLCBiKQooW25hbWUsIG9ial0pID0+Cih7IG5hbWUgfSkgPT4KICBvbkNvbm5lY3Qod3MsIHJlcSkKICBzZW5kQ29tbWFuZChkYXRhKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvblJlcXVlc3QocmVxLCByZXNwKQogIG9uT3BlbihuYW1lLCBmaWxlbmFtZSkKICBvbkNvbnRlbnQobmFtZSwgZGF0YSkKICBvbkNsb3NlKG5hbWUsIGZpbGUpCiAgZiA9IHggPT4KICByZXN1bHQgPT4KICBvbkZpbmFsaXplKCkKKG1hdGNoLCBwMSwgcDAsIHAyLCBwMywgb2Zmc2V0KSA9PgogIG9uTWVzc2FnZSh3cywgZGF0YSkKICBnZXQgY29ubmVjdGlvbnMoKQogIGdldCBieV91dWlkKCkKICB1dWlkKGRhdGEpCiAgb25GZChmZCwgcmQsIHdyKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgcXVpdCh3aHkpAAAAAAAAAABuBwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbgcAACAgaXNpbiA9IChvdGhlciwgcCkgPT4KTWF0Y2gKICBjb25zdHJ1Y3RvcihwYXR0ZXJuKQogIGFwcGx5KCkKICBuYW1lID0+CiAgdmFsdWUgPT4KKGxldmVsLCBtZXNzYWdlKSA9PgpBc3luY0NvbGxlY3QoaXRlcikKR2V0TWltZShmaWxlKQpNYXRjaGVyKHBhdHRlcm4sIHQgPSBhcmcgPT4gYXJnKQooLi4uYXJncykgPT4KS2V5T3JWYWx1ZU1hdGNoZXIocGF0dGVybikKKFtrZXksIHZhbHVlXSkgPT4KR2V0Um9vdERpcmVjdG9yaWVzKHBhdHRlcm4gPSAnKicpCk1ha2VVVUlEID0gKHJuZyA9IE1hdGgucmFuZG9tKSA9PgogIG4gPT4KICBkZCA9PgogIGQgPT4KICBkID0+CiAgZCA9PgpHZXREaXIoZGlyKQogIG4gPT4KRGlyTmFtZShuYW1lKQogIGl0ID0+CkRhdGVTdHIoZGF0ZSkKTW9kZVN0cihtb2RlKQpIVE1MUGFnZSA9ICh7IHRpdGxlLCBzdHlsZSwgc2NyaXB0cyA9IFtdLCBjaGlsZHJlbiwgLi4ucHJvcHMgfSkgPT4KICBzY3JpcHQgPT4KRmlsdGVyRm9ybSA9ICh7IC4uLnByb3BzIH0pID0+CkhUTUxUYWJsZSA9ICh7IHJvd3MsIC4uLnByb3BzIH0pID0+CkhUTUxUYWJsZVJvdyA9ICh7IGNvbHVtbnMsIC4uLnByb3BzIH0pID0+CkhUTUxUYWJsZUNvbHVtbiA9ICh7IGNvbHVtbnMsIGNoaWxkcmVuLCB0YWcgPSAndGQnLCAuLi5wcm9wcyB9KSA9PgpGaWxlTGluayA9ICh7IGZpbGUsIC4uLnByb3BzIH0pID0+CkZpbGVPYmplY3QgPSAoeyBmaWxlLCBzdGF0ID0ge30sIC4uLnByb3BzIH0pID0+CkZpbGVUYWJsZSA9ICh7IGZpbGVzLCAuLi5wcm9wcyB9KSA9PgooYSwgYikgPT4KICBmaWVsZCA9PgogIGZpbGUgPT4KUmVhZEV4aXYyKGZpbGUpCihbaywgdl0pID0+Cihbaywgdl0pID0+Cihbaywgdl0pID0+CihhLCBiKSA9PgooW2ssIHZdKSA9PgpSZWFkRXhpZnRvb2woZmlsZSkKICBsID0+CiAgbGluZSA9PgooW2xpbmUsIGlkeF0pID0+CkhlaWZDb252ZXJ0KHNyYywgZHN0LCBxdWFsaXR5ID0gMTAwKQpNYWdpY2tSZXNpemUoc3JjLCBkc3QsIHJvdGF0ZSA9IDAsIHdpZHRoLCBoZWlnaHQpCiAgbWFpbiguLi5hcmdzKQooYSwgdikgPT4KKHYsIHB2LCBvKSA9PgoobW9kdWxlLCAuLi5hcmdzKSA9PgogIG0gPT4KICAuc2hvdyA9IGFyZyA9PgogIC5jbGVhbnVwID0gKCkgPT4KKC4uLmFyZ3MpID0+CigpID0+CiAgcHV0cyhzKQooKSA9PgpQYXJzZUJvZHkoZ2VuKQogIC5jcmVhdGVXUyA9ICh1cmwsIGNhbGxiYWNrcykgPT4KICAub3V0ID0gcyA9PgogIHRlc3QocmVxLCByZXNwKQogIHByb3h5KHJlcSwgcmVzcCkKICBjb25maWcocmVxLCByZXNwKQogIGZpbGUocmVxLCByZXNwKQogIGRpciA9PgogIHggPT4KICBmaWxlID0+CiAgZmlsZXMocmVxLCByZXNwKQogIG4gPT4KICBmaWxlczIocmVxLCByZXNwKQpuID0+CiAgbiA9PgogIG4gPT4KKGEsIGIpID0+CiAgbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CihbZmlsZSwgcmVsXSkgPT4KKGFjYywgW2ZpbGUsIHN0XSkgPT4KICBzdHJpbmcoYSwgYikKICBudW1iZXIoYSwgYikKKFtuYW1lLCBvYmpdKSA9PgooeyBuYW1lIH0pID0+CiAgb25Db25uZWN0KHdzLCByZXEpCiAgc2VuZENvbW1hbmQoZGF0YSkKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25SZXF1ZXN0KHJlcSwgcmVzcCkKICBvbk9wZW4obmFtZSwgZmlsZW5hbWUpCiAgb25Db250ZW50KG5hbWUsIGRhdGEpCiAgb25DbG9zZShuYW1lLCBmaWxlKQogIGYgPSB4ID0+CiAgcmVzdWx0ID0+CiAgb25GaW5hbGl6ZSgpCihtYXRjaCwgcDEsIHAwLCBwMiwgcDMsIG9mZnNldCkgPT4KICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgZ2V0IGNvbm5lY3Rpb25zKCkKICBnZXQgYnlfdXVpZCgpCiAgdXVpZChkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIHF1aXQod2h5KQAAAAAAAAAAbgcAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					8,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1813,
								1833
							],
							[
								2063,
								2068
							],
							[
								2073,
								2093
							],
							[
								2131,
								2138
							],
							[
								2175,
								2182
							],
							[
								2505,
								2513
							],
							[
								2531,
								2551
							],
							[
								2891,
								2924
							],
							[
								3014,
								3036
							],
							[
								3250,
								3291
							],
							[
								3302,
								3315
							],
							[
								3382,
								3417
							],
							[
								3462,
								3480
							],
							[
								3516,
								3558
							],
							[
								3624,
								3657
							],
							[
								3679,
								3683
							],
							[
								4072,
								4077
							],
							[
								4127,
								4131
							],
							[
								4158,
								4162
							],
							[
								4190,
								4194
							],
							[
								4217,
								4237
							],
							[
								4316,
								4320
							],
							[
								4390,
								4412
							],
							[
								4527,
								4532
							],
							[
								4565,
								4587
							],
							[
								4781,
								4803
							],
							[
								5226,
								5292
							],
							[
								5638,
								5647
							],
							[
								5752,
								5782
							],
							[
								6143,
								6178
							],
							[
								6210,
								6251
							],
							[
								6283,
								6349
							],
							[
								6382,
								6416
							],
							[
								6482,
								6529
							],
							[
								7065,
								7101
							],
							[
								7214,
								7223
							],
							[
								7459,
								7467
							],
							[
								7573,
								7580
							],
							[
								7630,
								7654
							],
							[
								7926,
								7937
							],
							[
								8027,
								8038
							],
							[
								8102,
								8113
							],
							[
								8167,
								8176
							],
							[
								8214,
								8225
							],
							[
								8313,
								8340
							],
							[
								8472,
								8476
							],
							[
								8500,
								8507
							],
							[
								8540,
								8556
							],
							[
								8685,
								8730
							],
							[
								8969,
								9027
							],
							[
								9356,
								9378
							],
							[
								9751,
								9761
							],
							[
								10005,
								10019
							],
							[
								10954,
								10978
							],
							[
								11104,
								11108
							],
							[
								11200,
								11214
							],
							[
								11304,
								11320
							],
							[
								11752,
								11765
							],
							[
								11783,
								11788
							],
							[
								11870,
								11877
							],
							[
								11905,
								11910
							],
							[
								12055,
								12080
							],
							[
								12255,
								12286
							],
							[
								12363,
								12374
							],
							[
								13959,
								13990
							],
							[
								14520,
								14553
							],
							[
								14825,
								14860
							],
							[
								14945,
								14978
							],
							[
								15909,
								15915
							],
							[
								17030,
								17034
							],
							[
								17930,
								17937
							],
							[
								19236,
								19268
							],
							[
								19649,
								19653
							],
							[
								20332,
								20367
							],
							[
								21129,
								21134
							],
							[
								21861,
								21865
							],
							[
								21959,
								21963
							],
							[
								22083,
								22092
							],
							[
								22222,
								22229
							],
							[
								22510,
								22517
							],
							[
								22598,
								22605
							],
							[
								22669,
								22685
							],
							[
								22750,
								22770
							],
							[
								23469,
								23481
							],
							[
								23580,
								23592
							],
							[
								23794,
								23810
							],
							[
								23904,
								23917
							],
							[
								24328,
								24346
							],
							[
								24528,
								24545
							],
							[
								24971,
								24990
							],
							[
								25088,
								25108
							],
							[
								26326,
								26348
							],
							[
								26821,
								26842
							],
							[
								27393,
								27412
							],
							[
								27846,
								27854
							],
							[
								28293,
								28302
							],
							[
								30769,
								30781
							],
							[
								32693,
								32728
							],
							[
								33226,
								33245
							],
							[
								33499,
								33516
							],
							[
								33561,
								33574
							],
							[
								33610,
								33620
							],
							[
								35091,
								35107
							],
							[
								35239,
								35258
							],
							[
								35269,
								35288
							],
							[
								35694,
								35714
							]
						],
						"symlist":
						[
							"isin = (other, p) =>",
							"Match",
							"constructor(pattern)",
							"apply()",
							"name =>",
							"value =>",
							" (level, message) =>",
							"async function AsyncCollect(iter)",
							"function GetMime(file)",
							"function Matcher(pattern, t = arg => arg)",
							" (...args) =>",
							"function KeyOrValueMatcher(pattern)",
							" ([key, value]) =>",
							"function GetRootDirectories(pattern = '*')",
							"MakeUUID = (rng = Math.random) =>",
							"n =>",
							"dd =>",
							"d =>",
							"d =>",
							"d =>",
							"function GetDir(dir)",
							"n =>",
							"function DirName(name)",
							"it =>",
							"function DateStr(date)",
							"function ModeStr(mode)",
							"HTMLPage = ({ title, style, scripts = [], children, ...props }) =>",
							"script =>",
							"FilterForm = ({ ...props }) =>",
							"HTMLTable = ({ rows, ...props }) =>",
							"HTMLTableRow = ({ columns, ...props }) =>",
							"HTMLTableColumn = ({ columns, children, tag = 'td', ...props }) =>",
							"FileLink = ({ file, ...props }) =>",
							"FileObject = ({ file, stat = {}, ...props }) =>",
							"FileTable = ({ files, ...props }) =>",
							"(a, b) =>",
							"field =>",
							"file =>",
							"function ReadExiv2(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function ReadExiftool(file)",
							"l =>",
							"line =>",
							"([line, idx]) =>",
							"function HeifConvert(src, dst, quality = 100)",
							"function MagickResize(src, dst, rotate = 0, width, height)",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							" function ParseBody(gen)",
							".createWS = (url, callbacks) =>",
							".out = s =>",
							"async function* test(req, resp)",
							" function proxy(req, resp)",
							" function* config(req, resp)",
							" function* file(req, resp)",
							"dir =>",
							"x =>",
							"file =>",
							"async function* files(req, resp)",
							"n =>",
							" function* files2(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file, rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"({ name }) =>",
							"onConnect(ws, req)",
							"sendCommand(data)",
							"onClose(ws, reason)",
							"onRequest(req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name, file)",
							"f = x =>",
							"result =>",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABuBwAAICBpc2luID0gKG90aGVyLCBwKSA9PgpNYXRjaAogIGNvbnN0cnVjdG9yKHBhdHRlcm4pCiAgYXBwbHkoKQogIG5hbWUgPT4KICB2YWx1ZSA9PgoobGV2ZWwsIG1lc3NhZ2UpID0+CkFzeW5jQ29sbGVjdChpdGVyKQpHZXRNaW1lKGZpbGUpCk1hdGNoZXIocGF0dGVybiwgdCA9IGFyZyA9PiBhcmcpCiguLi5hcmdzKSA9PgpLZXlPclZhbHVlTWF0Y2hlcihwYXR0ZXJuKQooW2tleSwgdmFsdWVdKSA9PgpHZXRSb290RGlyZWN0b3JpZXMocGF0dGVybiA9ICcqJykKTWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+CiAgbiA9PgogIGRkID0+CiAgZCA9PgogIGQgPT4KICBkID0+CkdldERpcihkaXIpCiAgbiA9PgpEaXJOYW1lKG5hbWUpCiAgaXQgPT4KRGF0ZVN0cihkYXRlKQpNb2RlU3RyKG1vZGUpCkhUTUxQYWdlID0gKHsgdGl0bGUsIHN0eWxlLCBzY3JpcHRzID0gW10sIGNoaWxkcmVuLCAuLi5wcm9wcyB9KSA9PgogIHNjcmlwdCA9PgpGaWx0ZXJGb3JtID0gKHsgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlID0gKHsgcm93cywgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlUm93ID0gKHsgY29sdW1ucywgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlQ29sdW1uID0gKHsgY29sdW1ucywgY2hpbGRyZW4sIHRhZyA9ICd0ZCcsIC4uLnByb3BzIH0pID0+CkZpbGVMaW5rID0gKHsgZmlsZSwgLi4ucHJvcHMgfSkgPT4KRmlsZU9iamVjdCA9ICh7IGZpbGUsIHN0YXQgPSB7fSwgLi4ucHJvcHMgfSkgPT4KRmlsZVRhYmxlID0gKHsgZmlsZXMsIC4uLnByb3BzIH0pID0+CihhLCBiKSA9PgogIGZpZWxkID0+CiAgZmlsZSA9PgpSZWFkRXhpdjIoZmlsZSkKKFtrLCB2XSkgPT4KKFtrLCB2XSkgPT4KKFtrLCB2XSkgPT4KKGEsIGIpID0+Cihbaywgdl0pID0+ClJlYWRFeGlmdG9vbChmaWxlKQogIGwgPT4KICBsaW5lID0+CihbbGluZSwgaWR4XSkgPT4KSGVpZkNvbnZlcnQoc3JjLCBkc3QsIHF1YWxpdHkgPSAxMDApCk1hZ2lja1Jlc2l6ZShzcmMsIGRzdCwgcm90YXRlID0gMCwgd2lkdGgsIGhlaWdodCkKICBtYWluKC4uLmFyZ3MpCihhLCB2KSA9PgoodiwgcHYsIG8pID0+Cihtb2R1bGUsIC4uLmFyZ3MpID0+CiAgbSA9PgogIC5zaG93ID0gYXJnID0+CiAgLmNsZWFudXAgPSAoKSA9PgooLi4uYXJncykgPT4KKCkgPT4KICBwdXRzKHMpCigpID0+ClBhcnNlQm9keShnZW4pCiAgLmNyZWF0ZVdTID0gKHVybCwgY2FsbGJhY2tzKSA9PgogIC5vdXQgPSBzID0+CiAgdGVzdChyZXEsIHJlc3ApCiAgcHJveHkocmVxLCByZXNwKQogIGNvbmZpZyhyZXEsIHJlc3ApCiAgZmlsZShyZXEsIHJlc3ApCiAgZGlyID0+CiAgeCA9PgogIGZpbGUgPT4KICBmaWxlcyhyZXEsIHJlc3ApCiAgbiA9PgogIGZpbGVzMihyZXEsIHJlc3ApCm4gPT4KICBuID0+CiAgbiA9PgooYSwgYikgPT4KICBuYW1lID0+CiAgZmlsZSA9PgogIGZpbGUgPT4KKFtmaWxlLCByZWxdKSA9PgooYWNjLCBbZmlsZSwgc3RdKSA9PgogIHN0cmluZyhhLCBiKQogIG51bWJlcihhLCBiKQooW25hbWUsIG9ial0pID0+Cih7IG5hbWUgfSkgPT4KICBvbkNvbm5lY3Qod3MsIHJlcSkKICBzZW5kQ29tbWFuZChkYXRhKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvblJlcXVlc3QocmVxLCByZXNwKQogIG9uT3BlbihuYW1lLCBmaWxlbmFtZSkKICBvbkNvbnRlbnQobmFtZSwgZGF0YSkKICBvbkNsb3NlKG5hbWUsIGZpbGUpCiAgZiA9IHggPT4KICByZXN1bHQgPT4KICBvbkZpbmFsaXplKCkKKG1hdGNoLCBwMSwgcDAsIHAyLCBwMywgb2Zmc2V0KSA9PgogIG9uTWVzc2FnZSh3cywgZGF0YSkKICBnZXQgY29ubmVjdGlvbnMoKQogIGdldCBieV91dWlkKCkKICB1dWlkKGRhdGEpCiAgb25GZChmZCwgcmQsIHdyKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgcXVpdCh3aHkpAAAAAAAAAABuBwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					1,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABuBwAAICBpc2luID0gKG90aGVyLCBwKSA9PgpNYXRjaAogIGNvbnN0cnVjdG9yKHBhdHRlcm4pCiAgYXBwbHkoKQogIG5hbWUgPT4KICB2YWx1ZSA9PgoobGV2ZWwsIG1lc3NhZ2UpID0+CkFzeW5jQ29sbGVjdChpdGVyKQpHZXRNaW1lKGZpbGUpCk1hdGNoZXIocGF0dGVybiwgdCA9IGFyZyA9PiBhcmcpCiguLi5hcmdzKSA9PgpLZXlPclZhbHVlTWF0Y2hlcihwYXR0ZXJuKQooW2tleSwgdmFsdWVdKSA9PgpHZXRSb290RGlyZWN0b3JpZXMocGF0dGVybiA9ICcqJykKTWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+CiAgbiA9PgogIGRkID0+CiAgZCA9PgogIGQgPT4KICBkID0+CkdldERpcihkaXIpCiAgbiA9PgpEaXJOYW1lKG5hbWUpCiAgaXQgPT4KRGF0ZVN0cihkYXRlKQpNb2RlU3RyKG1vZGUpCkhUTUxQYWdlID0gKHsgdGl0bGUsIHN0eWxlLCBzY3JpcHRzID0gW10sIGNoaWxkcmVuLCAuLi5wcm9wcyB9KSA9PgogIHNjcmlwdCA9PgpGaWx0ZXJGb3JtID0gKHsgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlID0gKHsgcm93cywgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlUm93ID0gKHsgY29sdW1ucywgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlQ29sdW1uID0gKHsgY29sdW1ucywgY2hpbGRyZW4sIHRhZyA9ICd0ZCcsIC4uLnByb3BzIH0pID0+CkZpbGVMaW5rID0gKHsgZmlsZSwgLi4ucHJvcHMgfSkgPT4KRmlsZU9iamVjdCA9ICh7IGZpbGUsIHN0YXQgPSB7fSwgLi4ucHJvcHMgfSkgPT4KRmlsZVRhYmxlID0gKHsgZmlsZXMsIC4uLnByb3BzIH0pID0+CihhLCBiKSA9PgogIGZpZWxkID0+CiAgZmlsZSA9PgpSZWFkRXhpdjIoZmlsZSkKKFtrLCB2XSkgPT4KKFtrLCB2XSkgPT4KKFtrLCB2XSkgPT4KKGEsIGIpID0+Cihbaywgdl0pID0+ClJlYWRFeGlmdG9vbChmaWxlKQogIGwgPT4KICBsaW5lID0+CihbbGluZSwgaWR4XSkgPT4KSGVpZkNvbnZlcnQoc3JjLCBkc3QsIHF1YWxpdHkgPSAxMDApCk1hZ2lja1Jlc2l6ZShzcmMsIGRzdCwgcm90YXRlID0gMCwgd2lkdGgsIGhlaWdodCkKICBtYWluKC4uLmFyZ3MpCihhLCB2KSA9PgoodiwgcHYsIG8pID0+Cihtb2R1bGUsIC4uLmFyZ3MpID0+CiAgbSA9PgogIC5zaG93ID0gYXJnID0+CiAgLmNsZWFudXAgPSAoKSA9PgooLi4uYXJncykgPT4KKCkgPT4KICBwdXRzKHMpCigpID0+ClBhcnNlQm9keShnZW4pCiAgLmNyZWF0ZVdTID0gKHVybCwgY2FsbGJhY2tzKSA9PgogIC5vdXQgPSBzID0+CiAgdGVzdChyZXEsIHJlc3ApCiAgcHJveHkocmVxLCByZXNwKQogIGNvbmZpZyhyZXEsIHJlc3ApCiAgZmlsZShyZXEsIHJlc3ApCiAgZGlyID0+CiAgeCA9PgogIGZpbGUgPT4KICBmaWxlcyhyZXEsIHJlc3ApCiAgbiA9PgogIGZpbGVzMihyZXEsIHJlc3ApCm4gPT4KICBuID0+CiAgbiA9PgooYSwgYikgPT4KICBuYW1lID0+CiAgZmlsZSA9PgogIGZpbGUgPT4KKFtmaWxlLCByZWxdKSA9PgooYWNjLCBbZmlsZSwgc3RdKSA9PgogIHN0cmluZyhhLCBiKQogIG51bWJlcihhLCBiKQooW25hbWUsIG9ial0pID0+Cih7IG5hbWUgfSkgPT4KICBvbkNvbm5lY3Qod3MsIHJlcSkKICBzZW5kQ29tbWFuZChkYXRhKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvblJlcXVlc3QocmVxLCByZXNwKQogIG9uT3BlbihuYW1lLCBmaWxlbmFtZSkKICBvbkNvbnRlbnQobmFtZSwgZGF0YSkKICBvbkNsb3NlKG5hbWUsIGZpbGUpCiAgZiA9IHggPT4KICByZXN1bHQgPT4KICBvbkZpbmFsaXplKCkKKG1hdGNoLCBwMSwgcDAsIHAyLCBwMywgb2Zmc2V0KSA9PgogIG9uTWVzc2FnZSh3cywgZGF0YSkKICBnZXQgY29ubmVjdGlvbnMoKQogIGdldCBieV91dWlkKCkKICB1dWlkKGRhdGEpCiAgb25GZChmZCwgcmQsIHdyKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgcXVpdCh3aHkpAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					2,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1813,
								1833
							],
							[
								2063,
								2068
							],
							[
								2073,
								2093
							],
							[
								2131,
								2138
							],
							[
								2175,
								2182
							],
							[
								2505,
								2513
							],
							[
								2531,
								2551
							],
							[
								2891,
								2924
							],
							[
								3014,
								3036
							],
							[
								3250,
								3291
							],
							[
								3302,
								3315
							],
							[
								3382,
								3417
							],
							[
								3462,
								3480
							],
							[
								3516,
								3558
							],
							[
								3624,
								3657
							],
							[
								3679,
								3683
							],
							[
								4072,
								4077
							],
							[
								4127,
								4131
							],
							[
								4158,
								4162
							],
							[
								4190,
								4194
							],
							[
								4217,
								4237
							],
							[
								4316,
								4320
							],
							[
								4390,
								4412
							],
							[
								4527,
								4532
							],
							[
								4565,
								4587
							],
							[
								4781,
								4803
							],
							[
								5226,
								5292
							],
							[
								5638,
								5647
							],
							[
								5752,
								5782
							],
							[
								6143,
								6178
							],
							[
								6210,
								6251
							],
							[
								6283,
								6349
							],
							[
								6382,
								6416
							],
							[
								6482,
								6529
							],
							[
								7065,
								7101
							],
							[
								7214,
								7223
							],
							[
								7459,
								7467
							],
							[
								7573,
								7580
							],
							[
								7630,
								7654
							],
							[
								7926,
								7937
							],
							[
								8027,
								8038
							],
							[
								8102,
								8113
							],
							[
								8167,
								8176
							],
							[
								8214,
								8225
							],
							[
								8313,
								8340
							],
							[
								8472,
								8476
							],
							[
								8500,
								8507
							],
							[
								8540,
								8556
							],
							[
								8685,
								8730
							],
							[
								8969,
								9027
							],
							[
								9356,
								9378
							],
							[
								9751,
								9761
							],
							[
								10005,
								10019
							],
							[
								10954,
								10978
							],
							[
								11104,
								11108
							],
							[
								11200,
								11214
							],
							[
								11304,
								11320
							],
							[
								11752,
								11765
							],
							[
								11783,
								11788
							],
							[
								11870,
								11877
							],
							[
								11905,
								11910
							],
							[
								12055,
								12080
							],
							[
								12255,
								12286
							],
							[
								12363,
								12374
							],
							[
								13959,
								13990
							],
							[
								14520,
								14553
							],
							[
								14825,
								14860
							],
							[
								14945,
								14978
							],
							[
								15909,
								15915
							],
							[
								17030,
								17034
							],
							[
								17930,
								17937
							],
							[
								19236,
								19268
							],
							[
								19649,
								19653
							],
							[
								20332,
								20367
							],
							[
								21129,
								21134
							],
							[
								21861,
								21865
							],
							[
								21959,
								21963
							],
							[
								22083,
								22092
							],
							[
								22222,
								22229
							],
							[
								22510,
								22517
							],
							[
								22598,
								22605
							],
							[
								22669,
								22685
							],
							[
								22750,
								22770
							],
							[
								23469,
								23481
							],
							[
								23580,
								23592
							],
							[
								23794,
								23810
							],
							[
								23904,
								23917
							],
							[
								24328,
								24346
							],
							[
								24528,
								24545
							],
							[
								24971,
								24990
							],
							[
								25088,
								25108
							],
							[
								26326,
								26348
							],
							[
								26821,
								26842
							],
							[
								27393,
								27412
							],
							[
								27846,
								27854
							],
							[
								28293,
								28302
							],
							[
								30769,
								30781
							],
							[
								32693,
								32728
							],
							[
								33226,
								33245
							],
							[
								33499,
								33516
							],
							[
								33561,
								33574
							],
							[
								33610,
								33620
							],
							[
								35091,
								35107
							],
							[
								35239,
								35258
							],
							[
								35269,
								35288
							],
							[
								35694,
								35714
							]
						],
						"symlist":
						[
							"isin = (other, p) =>",
							"Match",
							"constructor(pattern)",
							"apply()",
							"name =>",
							"value =>",
							" (level, message) =>",
							"async function AsyncCollect(iter)",
							"function GetMime(file)",
							"function Matcher(pattern, t = arg => arg)",
							" (...args) =>",
							"function KeyOrValueMatcher(pattern)",
							" ([key, value]) =>",
							"function GetRootDirectories(pattern = '*')",
							"MakeUUID = (rng = Math.random) =>",
							"n =>",
							"dd =>",
							"d =>",
							"d =>",
							"d =>",
							"function GetDir(dir)",
							"n =>",
							"function DirName(name)",
							"it =>",
							"function DateStr(date)",
							"function ModeStr(mode)",
							"HTMLPage = ({ title, style, scripts = [], children, ...props }) =>",
							"script =>",
							"FilterForm = ({ ...props }) =>",
							"HTMLTable = ({ rows, ...props }) =>",
							"HTMLTableRow = ({ columns, ...props }) =>",
							"HTMLTableColumn = ({ columns, children, tag = 'td', ...props }) =>",
							"FileLink = ({ file, ...props }) =>",
							"FileObject = ({ file, stat = {}, ...props }) =>",
							"FileTable = ({ files, ...props }) =>",
							"(a, b) =>",
							"field =>",
							"file =>",
							"function ReadExiv2(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function ReadExiftool(file)",
							"l =>",
							"line =>",
							"([line, idx]) =>",
							"function HeifConvert(src, dst, quality = 100)",
							"function MagickResize(src, dst, rotate = 0, width, height)",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							" function ParseBody(gen)",
							".createWS = (url, callbacks) =>",
							".out = s =>",
							"async function* test(req, resp)",
							" function proxy(req, resp)",
							" function* config(req, resp)",
							" function* file(req, resp)",
							"dir =>",
							"x =>",
							"file =>",
							"async function* files(req, resp)",
							"n =>",
							" function* files2(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file, rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"({ name }) =>",
							"onConnect(ws, req)",
							"sendCommand(data)",
							"onClose(ws, reason)",
							"onRequest(req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name, file)",
							"f = x =>",
							"result =>",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"AQAAAAAAAAAAAAAAbgcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					3,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABuBwAAICBpc2luID0gKG90aGVyLCBwKSA9PgpNYXRjaAogIGNvbnN0cnVjdG9yKHBhdHRlcm4pCiAgYXBwbHkoKQogIG5hbWUgPT4KICB2YWx1ZSA9PgoobGV2ZWwsIG1lc3NhZ2UpID0+CkFzeW5jQ29sbGVjdChpdGVyKQpHZXRNaW1lKGZpbGUpCk1hdGNoZXIocGF0dGVybiwgdCA9IGFyZyA9PiBhcmcpCiguLi5hcmdzKSA9PgpLZXlPclZhbHVlTWF0Y2hlcihwYXR0ZXJuKQooW2tleSwgdmFsdWVdKSA9PgpHZXRSb290RGlyZWN0b3JpZXMocGF0dGVybiA9ICcqJykKTWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+CiAgbiA9PgogIGRkID0+CiAgZCA9PgogIGQgPT4KICBkID0+CkdldERpcihkaXIpCiAgbiA9PgpEaXJOYW1lKG5hbWUpCiAgaXQgPT4KRGF0ZVN0cihkYXRlKQpNb2RlU3RyKG1vZGUpCkhUTUxQYWdlID0gKHsgdGl0bGUsIHN0eWxlLCBzY3JpcHRzID0gW10sIGNoaWxkcmVuLCAuLi5wcm9wcyB9KSA9PgogIHNjcmlwdCA9PgpGaWx0ZXJGb3JtID0gKHsgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlID0gKHsgcm93cywgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlUm93ID0gKHsgY29sdW1ucywgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlQ29sdW1uID0gKHsgY29sdW1ucywgY2hpbGRyZW4sIHRhZyA9ICd0ZCcsIC4uLnByb3BzIH0pID0+CkZpbGVMaW5rID0gKHsgZmlsZSwgLi4ucHJvcHMgfSkgPT4KRmlsZU9iamVjdCA9ICh7IGZpbGUsIHN0YXQgPSB7fSwgLi4ucHJvcHMgfSkgPT4KRmlsZVRhYmxlID0gKHsgZmlsZXMsIC4uLnByb3BzIH0pID0+CihhLCBiKSA9PgogIGZpZWxkID0+CiAgZmlsZSA9PgpSZWFkRXhpdjIoZmlsZSkKKFtrLCB2XSkgPT4KKFtrLCB2XSkgPT4KKFtrLCB2XSkgPT4KKGEsIGIpID0+Cihbaywgdl0pID0+ClJlYWRFeGlmdG9vbChmaWxlKQogIGwgPT4KICBsaW5lID0+CihbbGluZSwgaWR4XSkgPT4KSGVpZkNvbnZlcnQoc3JjLCBkc3QsIHF1YWxpdHkgPSAxMDApCk1hZ2lja1Jlc2l6ZShzcmMsIGRzdCwgcm90YXRlID0gMCwgd2lkdGgsIGhlaWdodCkKICBtYWluKC4uLmFyZ3MpCihhLCB2KSA9PgoodiwgcHYsIG8pID0+Cihtb2R1bGUsIC4uLmFyZ3MpID0+CiAgbSA9PgogIC5zaG93ID0gYXJnID0+CiAgLmNsZWFudXAgPSAoKSA9PgooLi4uYXJncykgPT4KKCkgPT4KICBwdXRzKHMpCigpID0+ClBhcnNlQm9keShnZW4pCiAgLmNyZWF0ZVdTID0gKHVybCwgY2FsbGJhY2tzKSA9PgogIC5vdXQgPSBzID0+CiAgdGVzdChyZXEsIHJlc3ApCiAgcHJveHkocmVxLCByZXNwKQogIGNvbmZpZyhyZXEsIHJlc3ApCiAgZmlsZShyZXEsIHJlc3ApCiAgZGlyID0+CiAgeCA9PgogIGZpbGUgPT4KICBmaWxlcyhyZXEsIHJlc3ApCiAgbiA9PgogIGZpbGVzMihyZXEsIHJlc3ApCm4gPT4KICBuID0+CiAgbiA9PgooYSwgYikgPT4KICBuYW1lID0+CiAgZmlsZSA9PgogIGZpbGUgPT4KKFtmaWxlLCByZWxdKSA9PgooYWNjLCBbZmlsZSwgc3RdKSA9PgogIHN0cmluZyhhLCBiKQogIG51bWJlcihhLCBiKQooW25hbWUsIG9ial0pID0+Cih7IG5hbWUgfSkgPT4KICBvbkNvbm5lY3Qod3MsIHJlcSkKICBzZW5kQ29tbWFuZChkYXRhKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvblJlcXVlc3QocmVxLCByZXNwKQogIG9uT3BlbihuYW1lLCBmaWxlbmFtZSkKICBvbkNvbnRlbnQobmFtZSwgZGF0YSkKICBvbkNsb3NlKG5hbWUsIGZpbGUpCiAgZiA9IHggPT4KICByZXN1bHQgPT4KICBvbkZpbmFsaXplKCkKKG1hdGNoLCBwMSwgcDAsIHAyLCBwMywgb2Zmc2V0KSA9PgogIG9uTWVzc2FnZSh3cywgZGF0YSkKICBnZXQgY29ubmVjdGlvbnMoKQogIGdldCBieV91dWlkKCkKICB1dWlkKGRhdGEpCiAgb25GZChmZCwgcmQsIHdyKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgcXVpdCh3aHkpAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					4,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					5,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					6,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					7,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1813,
								1833
							],
							[
								2063,
								2068
							],
							[
								2073,
								2093
							],
							[
								2131,
								2138
							],
							[
								2175,
								2182
							],
							[
								2505,
								2513
							],
							[
								2531,
								2551
							],
							[
								2891,
								2924
							],
							[
								3014,
								3036
							],
							[
								3250,
								3291
							],
							[
								3302,
								3315
							],
							[
								3382,
								3417
							],
							[
								3462,
								3480
							],
							[
								3516,
								3558
							],
							[
								3624,
								3657
							],
							[
								3679,
								3683
							],
							[
								4072,
								4077
							],
							[
								4127,
								4131
							],
							[
								4158,
								4162
							],
							[
								4190,
								4194
							],
							[
								4217,
								4237
							],
							[
								4316,
								4320
							],
							[
								4390,
								4412
							],
							[
								4527,
								4532
							],
							[
								4565,
								4587
							],
							[
								4781,
								4803
							],
							[
								5226,
								5292
							],
							[
								5638,
								5647
							],
							[
								5752,
								5782
							],
							[
								6143,
								6178
							],
							[
								6210,
								6251
							],
							[
								6283,
								6349
							],
							[
								6382,
								6416
							],
							[
								6482,
								6529
							],
							[
								7065,
								7101
							],
							[
								7214,
								7223
							],
							[
								7459,
								7467
							],
							[
								7573,
								7580
							],
							[
								7630,
								7654
							],
							[
								7926,
								7937
							],
							[
								8027,
								8038
							],
							[
								8102,
								8113
							],
							[
								8167,
								8176
							],
							[
								8214,
								8225
							],
							[
								8313,
								8340
							],
							[
								8472,
								8476
							],
							[
								8500,
								8507
							],
							[
								8540,
								8556
							],
							[
								8685,
								8730
							],
							[
								8969,
								9027
							],
							[
								9356,
								9378
							],
							[
								9751,
								9761
							],
							[
								10005,
								10019
							],
							[
								10954,
								10978
							],
							[
								11104,
								11108
							],
							[
								11200,
								11214
							],
							[
								11304,
								11320
							],
							[
								11752,
								11765
							],
							[
								11783,
								11788
							],
							[
								11870,
								11877
							],
							[
								11905,
								11910
							],
							[
								12055,
								12080
							],
							[
								12255,
								12286
							],
							[
								12363,
								12374
							],
							[
								13959,
								13990
							],
							[
								14520,
								14553
							],
							[
								14825,
								14860
							],
							[
								14945,
								14978
							],
							[
								15909,
								15915
							],
							[
								17030,
								17034
							],
							[
								17930,
								17937
							],
							[
								19236,
								19268
							],
							[
								19649,
								19653
							],
							[
								20332,
								20367
							],
							[
								21129,
								21134
							],
							[
								21861,
								21865
							],
							[
								21959,
								21963
							],
							[
								22083,
								22092
							],
							[
								22222,
								22229
							],
							[
								22510,
								22517
							],
							[
								22598,
								22605
							],
							[
								22669,
								22685
							],
							[
								22750,
								22770
							],
							[
								23469,
								23481
							],
							[
								23580,
								23592
							],
							[
								23794,
								23810
							],
							[
								23904,
								23917
							],
							[
								24328,
								24346
							],
							[
								24528,
								24545
							],
							[
								24971,
								24990
							],
							[
								25088,
								25108
							],
							[
								26326,
								26348
							],
							[
								26821,
								26842
							],
							[
								27393,
								27412
							],
							[
								27846,
								27854
							],
							[
								28293,
								28302
							],
							[
								30769,
								30781
							],
							[
								32693,
								32728
							],
							[
								33226,
								33245
							],
							[
								33499,
								33516
							],
							[
								33561,
								33574
							],
							[
								33610,
								33620
							],
							[
								35091,
								35107
							],
							[
								35239,
								35258
							],
							[
								35269,
								35288
							],
							[
								35694,
								35714
							]
						],
						"symlist":
						[
							"isin = (other, p) =>",
							"Match",
							"constructor(pattern)",
							"apply()",
							"name =>",
							"value =>",
							" (level, message) =>",
							"async function AsyncCollect(iter)",
							"function GetMime(file)",
							"function Matcher(pattern, t = arg => arg)",
							" (...args) =>",
							"function KeyOrValueMatcher(pattern)",
							" ([key, value]) =>",
							"function GetRootDirectories(pattern = '*')",
							"MakeUUID = (rng = Math.random) =>",
							"n =>",
							"dd =>",
							"d =>",
							"d =>",
							"d =>",
							"function GetDir(dir)",
							"n =>",
							"function DirName(name)",
							"it =>",
							"function DateStr(date)",
							"function ModeStr(mode)",
							"HTMLPage = ({ title, style, scripts = [], children, ...props }) =>",
							"script =>",
							"FilterForm = ({ ...props }) =>",
							"HTMLTable = ({ rows, ...props }) =>",
							"HTMLTableRow = ({ columns, ...props }) =>",
							"HTMLTableColumn = ({ columns, children, tag = 'td', ...props }) =>",
							"FileLink = ({ file, ...props }) =>",
							"FileObject = ({ file, stat = {}, ...props }) =>",
							"FileTable = ({ files, ...props }) =>",
							"(a, b) =>",
							"field =>",
							"file =>",
							"function ReadExiv2(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function ReadExiftool(file)",
							"l =>",
							"line =>",
							"([line, idx]) =>",
							"function HeifConvert(src, dst, quality = 100)",
							"function MagickResize(src, dst, rotate = 0, width, height)",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							" function ParseBody(gen)",
							".createWS = (url, callbacks) =>",
							".out = s =>",
							"async function* test(req, resp)",
							" function proxy(req, resp)",
							" function* config(req, resp)",
							" function* file(req, resp)",
							"dir =>",
							"x =>",
							"file =>",
							"async function* files(req, resp)",
							"n =>",
							" function* files2(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file, rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"({ name }) =>",
							"onConnect(ws, req)",
							"sendCommand(data)",
							"onClose(ws, reason)",
							"onRequest(req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name, file)",
							"f = x =>",
							"result =>",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"AQAAAAAAAAAAAAAAbgcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					8,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1813,
								1833
							],
							[
								2063,
								2068
							],
							[
								2073,
								2093
							],
							[
								2131,
								2138
							],
							[
								2175,
								2182
							],
							[
								2505,
								2513
							],
							[
								2531,
								2551
							],
							[
								2891,
								2924
							],
							[
								3014,
								3036
							],
							[
								3250,
								3291
							],
							[
								3302,
								3315
							],
							[
								3382,
								3417
							],
							[
								3462,
								3480
							],
							[
								3516,
								3558
							],
							[
								3624,
								3657
							],
							[
								3679,
								3683
							],
							[
								4072,
								4077
							],
							[
								4127,
								4131
							],
							[
								4158,
								4162
							],
							[
								4190,
								4194
							],
							[
								4217,
								4237
							],
							[
								4316,
								4320
							],
							[
								4390,
								4412
							],
							[
								4527,
								4532
							],
							[
								4565,
								4587
							],
							[
								4781,
								4803
							],
							[
								5226,
								5292
							],
							[
								5638,
								5647
							],
							[
								5752,
								5782
							],
							[
								6143,
								6178
							],
							[
								6210,
								6251
							],
							[
								6283,
								6349
							],
							[
								6382,
								6416
							],
							[
								6482,
								6529
							],
							[
								7065,
								7101
							],
							[
								7214,
								7223
							],
							[
								7459,
								7467
							],
							[
								7573,
								7580
							],
							[
								7630,
								7654
							],
							[
								7926,
								7937
							],
							[
								8027,
								8038
							],
							[
								8102,
								8113
							],
							[
								8167,
								8176
							],
							[
								8214,
								8225
							],
							[
								8313,
								8340
							],
							[
								8472,
								8476
							],
							[
								8500,
								8507
							],
							[
								8540,
								8556
							],
							[
								8685,
								8730
							],
							[
								8969,
								9027
							],
							[
								9356,
								9378
							],
							[
								9751,
								9761
							],
							[
								10005,
								10019
							],
							[
								10954,
								10978
							],
							[
								11104,
								11108
							],
							[
								11200,
								11214
							],
							[
								11304,
								11320
							],
							[
								11752,
								11765
							],
							[
								11783,
								11788
							],
							[
								11870,
								11877
							],
							[
								11905,
								11910
							],
							[
								12055,
								12080
							],
							[
								12255,
								12286
							],
							[
								12363,
								12374
							],
							[
								13959,
								13990
							],
							[
								14520,
								14553
							],
							[
								14825,
								14860
							],
							[
								14945,
								14978
							],
							[
								15909,
								15915
							],
							[
								17030,
								17034
							],
							[
								17930,
								17937
							],
							[
								19236,
								19268
							],
							[
								19649,
								19653
							],
							[
								20332,
								20367
							],
							[
								21129,
								21134
							],
							[
								21861,
								21865
							],
							[
								21959,
								21963
							],
							[
								22083,
								22092
							],
							[
								22222,
								22229
							],
							[
								22510,
								22517
							],
							[
								22598,
								22605
							],
							[
								22669,
								22685
							],
							[
								22750,
								22770
							],
							[
								23469,
								23481
							],
							[
								23580,
								23592
							],
							[
								23794,
								23810
							],
							[
								23904,
								23917
							],
							[
								24328,
								24346
							],
							[
								24528,
								24545
							],
							[
								24971,
								24990
							],
							[
								25171,
								25191
							],
							[
								26409,
								26431
							],
							[
								26904,
								26925
							],
							[
								27476,
								27495
							],
							[
								27929,
								27937
							],
							[
								28376,
								28385
							],
							[
								30852,
								30864
							],
							[
								32776,
								32811
							],
							[
								33309,
								33328
							],
							[
								33582,
								33599
							],
							[
								33644,
								33657
							],
							[
								33693,
								33703
							],
							[
								35174,
								35190
							],
							[
								35322,
								35341
							],
							[
								35352,
								35371
							],
							[
								35777,
								35797
							]
						],
						"symlist":
						[
							"isin = (other, p) =>",
							"Match",
							"constructor(pattern)",
							"apply()",
							"name =>",
							"value =>",
							" (level, message) =>",
							"async function AsyncCollect(iter)",
							"function GetMime(file)",
							"function Matcher(pattern, t = arg => arg)",
							" (...args) =>",
							"function KeyOrValueMatcher(pattern)",
							" ([key, value]) =>",
							"function GetRootDirectories(pattern = '*')",
							"MakeUUID = (rng = Math.random) =>",
							"n =>",
							"dd =>",
							"d =>",
							"d =>",
							"d =>",
							"function GetDir(dir)",
							"n =>",
							"function DirName(name)",
							"it =>",
							"function DateStr(date)",
							"function ModeStr(mode)",
							"HTMLPage = ({ title, style, scripts = [], children, ...props }) =>",
							"script =>",
							"FilterForm = ({ ...props }) =>",
							"HTMLTable = ({ rows, ...props }) =>",
							"HTMLTableRow = ({ columns, ...props }) =>",
							"HTMLTableColumn = ({ columns, children, tag = 'td', ...props }) =>",
							"FileLink = ({ file, ...props }) =>",
							"FileObject = ({ file, stat = {}, ...props }) =>",
							"FileTable = ({ files, ...props }) =>",
							"(a, b) =>",
							"field =>",
							"file =>",
							"function ReadExiv2(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function ReadExiftool(file)",
							"l =>",
							"line =>",
							"([line, idx]) =>",
							"function HeifConvert(src, dst, quality = 100)",
							"function MagickResize(src, dst, rotate = 0, width, height)",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							" function ParseBody(gen)",
							".createWS = (url, callbacks) =>",
							".out = s =>",
							"async function* test(req, resp)",
							" function proxy(req, resp)",
							" function* config(req, resp)",
							" function* file(req, resp)",
							"dir =>",
							"x =>",
							"file =>",
							"async function* files(req, resp)",
							"n =>",
							" function* files2(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file, rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"({ name }) =>",
							"onConnect(ws, req)",
							"sendCommand(data)",
							"onClose(ws, reason)",
							"onRequest(req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name, file)",
							"f = x =>",
							"result =>",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAABuBwAAICBpc2luID0gKG90aGVyLCBwKSA9PgpNYXRjaAogIGNvbnN0cnVjdG9yKHBhdHRlcm4pCiAgYXBwbHkoKQogIG5hbWUgPT4KICB2YWx1ZSA9PgoobGV2ZWwsIG1lc3NhZ2UpID0+CkFzeW5jQ29sbGVjdChpdGVyKQpHZXRNaW1lKGZpbGUpCk1hdGNoZXIocGF0dGVybiwgdCA9IGFyZyA9PiBhcmcpCiguLi5hcmdzKSA9PgpLZXlPclZhbHVlTWF0Y2hlcihwYXR0ZXJuKQooW2tleSwgdmFsdWVdKSA9PgpHZXRSb290RGlyZWN0b3JpZXMocGF0dGVybiA9ICcqJykKTWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+CiAgbiA9PgogIGRkID0+CiAgZCA9PgogIGQgPT4KICBkID0+CkdldERpcihkaXIpCiAgbiA9PgpEaXJOYW1lKG5hbWUpCiAgaXQgPT4KRGF0ZVN0cihkYXRlKQpNb2RlU3RyKG1vZGUpCkhUTUxQYWdlID0gKHsgdGl0bGUsIHN0eWxlLCBzY3JpcHRzID0gW10sIGNoaWxkcmVuLCAuLi5wcm9wcyB9KSA9PgogIHNjcmlwdCA9PgpGaWx0ZXJGb3JtID0gKHsgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlID0gKHsgcm93cywgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlUm93ID0gKHsgY29sdW1ucywgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlQ29sdW1uID0gKHsgY29sdW1ucywgY2hpbGRyZW4sIHRhZyA9ICd0ZCcsIC4uLnByb3BzIH0pID0+CkZpbGVMaW5rID0gKHsgZmlsZSwgLi4ucHJvcHMgfSkgPT4KRmlsZU9iamVjdCA9ICh7IGZpbGUsIHN0YXQgPSB7fSwgLi4ucHJvcHMgfSkgPT4KRmlsZVRhYmxlID0gKHsgZmlsZXMsIC4uLnByb3BzIH0pID0+CihhLCBiKSA9PgogIGZpZWxkID0+CiAgZmlsZSA9PgpSZWFkRXhpdjIoZmlsZSkKKFtrLCB2XSkgPT4KKFtrLCB2XSkgPT4KKFtrLCB2XSkgPT4KKGEsIGIpID0+Cihbaywgdl0pID0+ClJlYWRFeGlmdG9vbChmaWxlKQogIGwgPT4KICBsaW5lID0+CihbbGluZSwgaWR4XSkgPT4KSGVpZkNvbnZlcnQoc3JjLCBkc3QsIHF1YWxpdHkgPSAxMDApCk1hZ2lja1Jlc2l6ZShzcmMsIGRzdCwgcm90YXRlID0gMCwgd2lkdGgsIGhlaWdodCkKICBtYWluKC4uLmFyZ3MpCihhLCB2KSA9PgoodiwgcHYsIG8pID0+Cihtb2R1bGUsIC4uLmFyZ3MpID0+CiAgbSA9PgogIC5zaG93ID0gYXJnID0+CiAgLmNsZWFudXAgPSAoKSA9PgooLi4uYXJncykgPT4KKCkgPT4KICBwdXRzKHMpCigpID0+ClBhcnNlQm9keShnZW4pCiAgLmNyZWF0ZVdTID0gKHVybCwgY2FsbGJhY2tzKSA9PgogIC5vdXQgPSBzID0+CiAgdGVzdChyZXEsIHJlc3ApCiAgcHJveHkocmVxLCByZXNwKQogIGNvbmZpZyhyZXEsIHJlc3ApCiAgZmlsZShyZXEsIHJlc3ApCiAgZGlyID0+CiAgeCA9PgogIGZpbGUgPT4KICBmaWxlcyhyZXEsIHJlc3ApCiAgbiA9PgogIGZpbGVzMihyZXEsIHJlc3ApCm4gPT4KICBuID0+CiAgbiA9PgooYSwgYikgPT4KICBuYW1lID0+CiAgZmlsZSA9PgogIGZpbGUgPT4KKFtmaWxlLCByZWxdKSA9PgooYWNjLCBbZmlsZSwgc3RdKSA9PgogIHN0cmluZyhhLCBiKQogIG51bWJlcihhLCBiKQooW25hbWUsIG9ial0pID0+Cih7IG5hbWUgfSkgPT4KICBvbkNvbm5lY3Qod3MsIHJlcSkKICBzZW5kQ29tbWFuZChkYXRhKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvblJlcXVlc3QocmVxLCByZXNwKQogIG9uT3BlbihuYW1lLCBmaWxlbmFtZSkKICBvbkNvbnRlbnQobmFtZSwgZGF0YSkKICBvbkNsb3NlKG5hbWUsIGZpbGUpCiAgZiA9IHggPT4KICByZXN1bHQgPT4KICBvbkZpbmFsaXplKCkKKG1hdGNoLCBwMSwgcDAsIHAyLCBwMywgb2Zmc2V0KSA9PgogIG9uTWVzc2FnZSh3cywgZGF0YSkKICBnZXQgY29ubmVjdGlvbnMoKQogIGdldCBieV91dWlkKCkKICB1dWlkKGRhdGEpCiAgb25GZChmZCwgcmQsIHdyKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgcXVpdCh3aHkpAAAAAAAAAABuBwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbgcAACAgaXNpbiA9IChvdGhlciwgcCkgPT4KTWF0Y2gKICBjb25zdHJ1Y3RvcihwYXR0ZXJuKQogIGFwcGx5KCkKICBuYW1lID0+CiAgdmFsdWUgPT4KKGxldmVsLCBtZXNzYWdlKSA9PgpBc3luY0NvbGxlY3QoaXRlcikKR2V0TWltZShmaWxlKQpNYXRjaGVyKHBhdHRlcm4sIHQgPSBhcmcgPT4gYXJnKQooLi4uYXJncykgPT4KS2V5T3JWYWx1ZU1hdGNoZXIocGF0dGVybikKKFtrZXksIHZhbHVlXSkgPT4KR2V0Um9vdERpcmVjdG9yaWVzKHBhdHRlcm4gPSAnKicpCk1ha2VVVUlEID0gKHJuZyA9IE1hdGgucmFuZG9tKSA9PgogIG4gPT4KICBkZCA9PgogIGQgPT4KICBkID0+CiAgZCA9PgpHZXREaXIoZGlyKQogIG4gPT4KRGlyTmFtZShuYW1lKQogIGl0ID0+CkRhdGVTdHIoZGF0ZSkKTW9kZVN0cihtb2RlKQpIVE1MUGFnZSA9ICh7IHRpdGxlLCBzdHlsZSwgc2NyaXB0cyA9IFtdLCBjaGlsZHJlbiwgLi4ucHJvcHMgfSkgPT4KICBzY3JpcHQgPT4KRmlsdGVyRm9ybSA9ICh7IC4uLnByb3BzIH0pID0+CkhUTUxUYWJsZSA9ICh7IHJvd3MsIC4uLnByb3BzIH0pID0+CkhUTUxUYWJsZVJvdyA9ICh7IGNvbHVtbnMsIC4uLnByb3BzIH0pID0+CkhUTUxUYWJsZUNvbHVtbiA9ICh7IGNvbHVtbnMsIGNoaWxkcmVuLCB0YWcgPSAndGQnLCAuLi5wcm9wcyB9KSA9PgpGaWxlTGluayA9ICh7IGZpbGUsIC4uLnByb3BzIH0pID0+CkZpbGVPYmplY3QgPSAoeyBmaWxlLCBzdGF0ID0ge30sIC4uLnByb3BzIH0pID0+CkZpbGVUYWJsZSA9ICh7IGZpbGVzLCAuLi5wcm9wcyB9KSA9PgooYSwgYikgPT4KICBmaWVsZCA9PgogIGZpbGUgPT4KUmVhZEV4aXYyKGZpbGUpCihbaywgdl0pID0+Cihbaywgdl0pID0+Cihbaywgdl0pID0+CihhLCBiKSA9PgooW2ssIHZdKSA9PgpSZWFkRXhpZnRvb2woZmlsZSkKICBsID0+CiAgbGluZSA9PgooW2xpbmUsIGlkeF0pID0+CkhlaWZDb252ZXJ0KHNyYywgZHN0LCBxdWFsaXR5ID0gMTAwKQpNYWdpY2tSZXNpemUoc3JjLCBkc3QsIHJvdGF0ZSA9IDAsIHdpZHRoLCBoZWlnaHQpCiAgbWFpbiguLi5hcmdzKQooYSwgdikgPT4KKHYsIHB2LCBvKSA9PgoobW9kdWxlLCAuLi5hcmdzKSA9PgogIG0gPT4KICAuc2hvdyA9IGFyZyA9PgogIC5jbGVhbnVwID0gKCkgPT4KKC4uLmFyZ3MpID0+CigpID0+CiAgcHV0cyhzKQooKSA9PgpQYXJzZUJvZHkoZ2VuKQogIC5jcmVhdGVXUyA9ICh1cmwsIGNhbGxiYWNrcykgPT4KICAub3V0ID0gcyA9PgogIHRlc3QocmVxLCByZXNwKQogIHByb3h5KHJlcSwgcmVzcCkKICBjb25maWcocmVxLCByZXNwKQogIGZpbGUocmVxLCByZXNwKQogIGRpciA9PgogIHggPT4KICBmaWxlID0+CiAgZmlsZXMocmVxLCByZXNwKQogIG4gPT4KICBmaWxlczIocmVxLCByZXNwKQpuID0+CiAgbiA9PgogIG4gPT4KKGEsIGIpID0+CiAgbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CihbZmlsZSwgcmVsXSkgPT4KKGFjYywgW2ZpbGUsIHN0XSkgPT4KICBzdHJpbmcoYSwgYikKICBudW1iZXIoYSwgYikKKFtuYW1lLCBvYmpdKSA9PgooeyBuYW1lIH0pID0+CiAgb25Db25uZWN0KHdzLCByZXEpCiAgc2VuZENvbW1hbmQoZGF0YSkKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25SZXF1ZXN0KHJlcSwgcmVzcCkKICBvbk9wZW4obmFtZSwgZmlsZW5hbWUpCiAgb25Db250ZW50KG5hbWUsIGRhdGEpCiAgb25DbG9zZShuYW1lLCBmaWxlKQogIGYgPSB4ID0+CiAgcmVzdWx0ID0+CiAgb25GaW5hbGl6ZSgpCihtYXRjaCwgcDEsIHAwLCBwMiwgcDMsIG9mZnNldCkgPT4KICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgZ2V0IGNvbm5lY3Rpb25zKCkKICBnZXQgYnlfdXVpZCgpCiAgdXVpZChkYXRhKQogIG9uRmQoZmQsIHJkLCB3cikKICBvbkNsb3NlKHdzLCByZWFzb24pCiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIHF1aXQod2h5KQAAAAAAAAAAbgcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					9,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1813,
								1833
							],
							[
								2063,
								2068
							],
							[
								2073,
								2093
							],
							[
								2131,
								2138
							],
							[
								2175,
								2182
							],
							[
								2505,
								2513
							],
							[
								2531,
								2551
							],
							[
								2891,
								2924
							],
							[
								3014,
								3036
							],
							[
								3250,
								3291
							],
							[
								3302,
								3315
							],
							[
								3382,
								3417
							],
							[
								3462,
								3480
							],
							[
								3516,
								3558
							],
							[
								3624,
								3657
							],
							[
								3679,
								3683
							],
							[
								4072,
								4077
							],
							[
								4127,
								4131
							],
							[
								4158,
								4162
							],
							[
								4190,
								4194
							],
							[
								4217,
								4237
							],
							[
								4316,
								4320
							],
							[
								4390,
								4412
							],
							[
								4527,
								4532
							],
							[
								4565,
								4587
							],
							[
								4781,
								4803
							],
							[
								5226,
								5292
							],
							[
								5638,
								5647
							],
							[
								5752,
								5782
							],
							[
								6143,
								6178
							],
							[
								6210,
								6251
							],
							[
								6283,
								6349
							],
							[
								6382,
								6416
							],
							[
								6482,
								6529
							],
							[
								7065,
								7101
							],
							[
								7214,
								7223
							],
							[
								7459,
								7467
							],
							[
								7573,
								7580
							],
							[
								7630,
								7654
							],
							[
								7926,
								7937
							],
							[
								8027,
								8038
							],
							[
								8102,
								8113
							],
							[
								8167,
								8176
							],
							[
								8214,
								8225
							],
							[
								8313,
								8340
							],
							[
								8472,
								8476
							],
							[
								8500,
								8507
							],
							[
								8540,
								8556
							],
							[
								8685,
								8730
							],
							[
								8969,
								9027
							],
							[
								9356,
								9378
							],
							[
								9751,
								9761
							],
							[
								10005,
								10019
							],
							[
								10954,
								10978
							],
							[
								11104,
								11108
							],
							[
								11200,
								11214
							],
							[
								11304,
								11320
							],
							[
								11752,
								11765
							],
							[
								11783,
								11788
							],
							[
								11870,
								11877
							],
							[
								11905,
								11910
							],
							[
								12055,
								12080
							],
							[
								12255,
								12286
							],
							[
								12363,
								12374
							],
							[
								13959,
								13990
							],
							[
								14520,
								14553
							],
							[
								14825,
								14860
							],
							[
								14945,
								14978
							],
							[
								15909,
								15915
							],
							[
								17030,
								17034
							],
							[
								17930,
								17937
							],
							[
								19236,
								19268
							],
							[
								19649,
								19653
							],
							[
								20332,
								20367
							],
							[
								21129,
								21134
							],
							[
								21861,
								21865
							],
							[
								21959,
								21963
							],
							[
								22083,
								22092
							],
							[
								22222,
								22229
							],
							[
								22510,
								22517
							],
							[
								22598,
								22605
							],
							[
								22669,
								22685
							],
							[
								22750,
								22770
							],
							[
								23469,
								23481
							],
							[
								23580,
								23592
							],
							[
								23794,
								23810
							],
							[
								23904,
								23917
							],
							[
								24328,
								24346
							],
							[
								24528,
								24545
							],
							[
								24971,
								24995
							],
							[
								25158,
								25178
							],
							[
								26396,
								26418
							],
							[
								26891,
								26912
							],
							[
								27463,
								27482
							],
							[
								27916,
								27924
							],
							[
								28363,
								28372
							],
							[
								30839,
								30851
							],
							[
								32763,
								32798
							],
							[
								33296,
								33315
							],
							[
								33569,
								33586
							],
							[
								33631,
								33644
							],
							[
								33680,
								33690
							],
							[
								35161,
								35177
							],
							[
								35309,
								35328
							],
							[
								35339,
								35358
							],
							[
								35764,
								35784
							]
						],
						"symlist":
						[
							"isin = (other, p) =>",
							"Match",
							"constructor(pattern)",
							"apply()",
							"name =>",
							"value =>",
							" (level, message) =>",
							"async function AsyncCollect(iter)",
							"function GetMime(file)",
							"function Matcher(pattern, t = arg => arg)",
							" (...args) =>",
							"function KeyOrValueMatcher(pattern)",
							" ([key, value]) =>",
							"function GetRootDirectories(pattern = '*')",
							"MakeUUID = (rng = Math.random) =>",
							"n =>",
							"dd =>",
							"d =>",
							"d =>",
							"d =>",
							"function GetDir(dir)",
							"n =>",
							"function DirName(name)",
							"it =>",
							"function DateStr(date)",
							"function ModeStr(mode)",
							"HTMLPage = ({ title, style, scripts = [], children, ...props }) =>",
							"script =>",
							"FilterForm = ({ ...props }) =>",
							"HTMLTable = ({ rows, ...props }) =>",
							"HTMLTableRow = ({ columns, ...props }) =>",
							"HTMLTableColumn = ({ columns, children, tag = 'td', ...props }) =>",
							"FileLink = ({ file, ...props }) =>",
							"FileObject = ({ file, stat = {}, ...props }) =>",
							"FileTable = ({ files, ...props }) =>",
							"(a, b) =>",
							"field =>",
							"file =>",
							"function ReadExiv2(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function ReadExiftool(file)",
							"l =>",
							"line =>",
							"([line, idx]) =>",
							"function HeifConvert(src, dst, quality = 100)",
							"function MagickResize(src, dst, rotate = 0, width, height)",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							" function ParseBody(gen)",
							".createWS = (url, callbacks) =>",
							".out = s =>",
							"async function* test(req, resp)",
							" function proxy(req, resp)",
							" function* config(req, resp)",
							" function* file(req, resp)",
							"dir =>",
							"x =>",
							"file =>",
							"async function* files(req, resp)",
							"n =>",
							" function* files2(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file, rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"({ name }) =>",
							"onConnect(ws, req)",
							"sendCommand(data)",
							"onClose(ws,code, reason)",
							"onRequest(req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name, file)",
							"f = x =>",
							"result =>",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAABuBwAAICBpc2luID0gKG90aGVyLCBwKSA9PgpNYXRjaAogIGNvbnN0cnVjdG9yKHBhdHRlcm4pCiAgYXBwbHkoKQogIG5hbWUgPT4KICB2YWx1ZSA9PgoobGV2ZWwsIG1lc3NhZ2UpID0+CkFzeW5jQ29sbGVjdChpdGVyKQpHZXRNaW1lKGZpbGUpCk1hdGNoZXIocGF0dGVybiwgdCA9IGFyZyA9PiBhcmcpCiguLi5hcmdzKSA9PgpLZXlPclZhbHVlTWF0Y2hlcihwYXR0ZXJuKQooW2tleSwgdmFsdWVdKSA9PgpHZXRSb290RGlyZWN0b3JpZXMocGF0dGVybiA9ICcqJykKTWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+CiAgbiA9PgogIGRkID0+CiAgZCA9PgogIGQgPT4KICBkID0+CkdldERpcihkaXIpCiAgbiA9PgpEaXJOYW1lKG5hbWUpCiAgaXQgPT4KRGF0ZVN0cihkYXRlKQpNb2RlU3RyKG1vZGUpCkhUTUxQYWdlID0gKHsgdGl0bGUsIHN0eWxlLCBzY3JpcHRzID0gW10sIGNoaWxkcmVuLCAuLi5wcm9wcyB9KSA9PgogIHNjcmlwdCA9PgpGaWx0ZXJGb3JtID0gKHsgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlID0gKHsgcm93cywgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlUm93ID0gKHsgY29sdW1ucywgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlQ29sdW1uID0gKHsgY29sdW1ucywgY2hpbGRyZW4sIHRhZyA9ICd0ZCcsIC4uLnByb3BzIH0pID0+CkZpbGVMaW5rID0gKHsgZmlsZSwgLi4ucHJvcHMgfSkgPT4KRmlsZU9iamVjdCA9ICh7IGZpbGUsIHN0YXQgPSB7fSwgLi4ucHJvcHMgfSkgPT4KRmlsZVRhYmxlID0gKHsgZmlsZXMsIC4uLnByb3BzIH0pID0+CihhLCBiKSA9PgogIGZpZWxkID0+CiAgZmlsZSA9PgpSZWFkRXhpdjIoZmlsZSkKKFtrLCB2XSkgPT4KKFtrLCB2XSkgPT4KKFtrLCB2XSkgPT4KKGEsIGIpID0+Cihbaywgdl0pID0+ClJlYWRFeGlmdG9vbChmaWxlKQogIGwgPT4KICBsaW5lID0+CihbbGluZSwgaWR4XSkgPT4KSGVpZkNvbnZlcnQoc3JjLCBkc3QsIHF1YWxpdHkgPSAxMDApCk1hZ2lja1Jlc2l6ZShzcmMsIGRzdCwgcm90YXRlID0gMCwgd2lkdGgsIGhlaWdodCkKICBtYWluKC4uLmFyZ3MpCihhLCB2KSA9PgoodiwgcHYsIG8pID0+Cihtb2R1bGUsIC4uLmFyZ3MpID0+CiAgbSA9PgogIC5zaG93ID0gYXJnID0+CiAgLmNsZWFudXAgPSAoKSA9PgooLi4uYXJncykgPT4KKCkgPT4KICBwdXRzKHMpCigpID0+ClBhcnNlQm9keShnZW4pCiAgLmNyZWF0ZVdTID0gKHVybCwgY2FsbGJhY2tzKSA9PgogIC5vdXQgPSBzID0+CiAgdGVzdChyZXEsIHJlc3ApCiAgcHJveHkocmVxLCByZXNwKQogIGNvbmZpZyhyZXEsIHJlc3ApCiAgZmlsZShyZXEsIHJlc3ApCiAgZGlyID0+CiAgeCA9PgogIGZpbGUgPT4KICBmaWxlcyhyZXEsIHJlc3ApCiAgbiA9PgogIGZpbGVzMihyZXEsIHJlc3ApCm4gPT4KICBuID0+CiAgbiA9PgooYSwgYikgPT4KICBuYW1lID0+CiAgZmlsZSA9PgogIGZpbGUgPT4KKFtmaWxlLCByZWxdKSA9PgooYWNjLCBbZmlsZSwgc3RdKSA9PgogIHN0cmluZyhhLCBiKQogIG51bWJlcihhLCBiKQooW25hbWUsIG9ial0pID0+Cih7IG5hbWUgfSkgPT4KICBvbkNvbm5lY3Qod3MsIHJlcSkKICBzZW5kQ29tbWFuZChkYXRhKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvblJlcXVlc3QocmVxLCByZXNwKQogIG9uT3BlbihuYW1lLCBmaWxlbmFtZSkKICBvbkNvbnRlbnQobmFtZSwgZGF0YSkKICBvbkNsb3NlKG5hbWUsIGZpbGUpCiAgZiA9IHggPT4KICByZXN1bHQgPT4KICBvbkZpbmFsaXplKCkKKG1hdGNoLCBwMSwgcDAsIHAyLCBwMywgb2Zmc2V0KSA9PgogIG9uTWVzc2FnZSh3cywgZGF0YSkKICBnZXQgY29ubmVjdGlvbnMoKQogIGdldCBieV91dWlkKCkKICB1dWlkKGRhdGEpCiAgb25GZChmZCwgcmQsIHdyKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgcXVpdCh3aHkpAAAAAAAAAABzBwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcwcAACAgaXNpbiA9IChvdGhlciwgcCkgPT4KTWF0Y2gKICBjb25zdHJ1Y3RvcihwYXR0ZXJuKQogIGFwcGx5KCkKICBuYW1lID0+CiAgdmFsdWUgPT4KKGxldmVsLCBtZXNzYWdlKSA9PgpBc3luY0NvbGxlY3QoaXRlcikKR2V0TWltZShmaWxlKQpNYXRjaGVyKHBhdHRlcm4sIHQgPSBhcmcgPT4gYXJnKQooLi4uYXJncykgPT4KS2V5T3JWYWx1ZU1hdGNoZXIocGF0dGVybikKKFtrZXksIHZhbHVlXSkgPT4KR2V0Um9vdERpcmVjdG9yaWVzKHBhdHRlcm4gPSAnKicpCk1ha2VVVUlEID0gKHJuZyA9IE1hdGgucmFuZG9tKSA9PgogIG4gPT4KICBkZCA9PgogIGQgPT4KICBkID0+CiAgZCA9PgpHZXREaXIoZGlyKQogIG4gPT4KRGlyTmFtZShuYW1lKQogIGl0ID0+CkRhdGVTdHIoZGF0ZSkKTW9kZVN0cihtb2RlKQpIVE1MUGFnZSA9ICh7IHRpdGxlLCBzdHlsZSwgc2NyaXB0cyA9IFtdLCBjaGlsZHJlbiwgLi4ucHJvcHMgfSkgPT4KICBzY3JpcHQgPT4KRmlsdGVyRm9ybSA9ICh7IC4uLnByb3BzIH0pID0+CkhUTUxUYWJsZSA9ICh7IHJvd3MsIC4uLnByb3BzIH0pID0+CkhUTUxUYWJsZVJvdyA9ICh7IGNvbHVtbnMsIC4uLnByb3BzIH0pID0+CkhUTUxUYWJsZUNvbHVtbiA9ICh7IGNvbHVtbnMsIGNoaWxkcmVuLCB0YWcgPSAndGQnLCAuLi5wcm9wcyB9KSA9PgpGaWxlTGluayA9ICh7IGZpbGUsIC4uLnByb3BzIH0pID0+CkZpbGVPYmplY3QgPSAoeyBmaWxlLCBzdGF0ID0ge30sIC4uLnByb3BzIH0pID0+CkZpbGVUYWJsZSA9ICh7IGZpbGVzLCAuLi5wcm9wcyB9KSA9PgooYSwgYikgPT4KICBmaWVsZCA9PgogIGZpbGUgPT4KUmVhZEV4aXYyKGZpbGUpCihbaywgdl0pID0+Cihbaywgdl0pID0+Cihbaywgdl0pID0+CihhLCBiKSA9PgooW2ssIHZdKSA9PgpSZWFkRXhpZnRvb2woZmlsZSkKICBsID0+CiAgbGluZSA9PgooW2xpbmUsIGlkeF0pID0+CkhlaWZDb252ZXJ0KHNyYywgZHN0LCBxdWFsaXR5ID0gMTAwKQpNYWdpY2tSZXNpemUoc3JjLCBkc3QsIHJvdGF0ZSA9IDAsIHdpZHRoLCBoZWlnaHQpCiAgbWFpbiguLi5hcmdzKQooYSwgdikgPT4KKHYsIHB2LCBvKSA9PgoobW9kdWxlLCAuLi5hcmdzKSA9PgogIG0gPT4KICAuc2hvdyA9IGFyZyA9PgogIC5jbGVhbnVwID0gKCkgPT4KKC4uLmFyZ3MpID0+CigpID0+CiAgcHV0cyhzKQooKSA9PgpQYXJzZUJvZHkoZ2VuKQogIC5jcmVhdGVXUyA9ICh1cmwsIGNhbGxiYWNrcykgPT4KICAub3V0ID0gcyA9PgogIHRlc3QocmVxLCByZXNwKQogIHByb3h5KHJlcSwgcmVzcCkKICBjb25maWcocmVxLCByZXNwKQogIGZpbGUocmVxLCByZXNwKQogIGRpciA9PgogIHggPT4KICBmaWxlID0+CiAgZmlsZXMocmVxLCByZXNwKQogIG4gPT4KICBmaWxlczIocmVxLCByZXNwKQpuID0+CiAgbiA9PgogIG4gPT4KKGEsIGIpID0+CiAgbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CihbZmlsZSwgcmVsXSkgPT4KKGFjYywgW2ZpbGUsIHN0XSkgPT4KICBzdHJpbmcoYSwgYikKICBudW1iZXIoYSwgYikKKFtuYW1lLCBvYmpdKSA9PgooeyBuYW1lIH0pID0+CiAgb25Db25uZWN0KHdzLCByZXEpCiAgc2VuZENvbW1hbmQoZGF0YSkKICBvbkNsb3NlKHdzLGNvZGUsIHJlYXNvbikKICBvblJlcXVlc3QocmVxLCByZXNwKQogIG9uT3BlbihuYW1lLCBmaWxlbmFtZSkKICBvbkNvbnRlbnQobmFtZSwgZGF0YSkKICBvbkNsb3NlKG5hbWUsIGZpbGUpCiAgZiA9IHggPT4KICByZXN1bHQgPT4KICBvbkZpbmFsaXplKCkKKG1hdGNoLCBwMSwgcDAsIHAyLCBwMywgb2Zmc2V0KSA9PgogIG9uTWVzc2FnZSh3cywgZGF0YSkKICBnZXQgY29ubmVjdGlvbnMoKQogIGdldCBieV91dWlkKCkKICB1dWlkKGRhdGEpCiAgb25GZChmZCwgcmQsIHdyKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgcXVpdCh3aHkpAAAAAAAAAABzBwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					10,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1813,
								1833
							],
							[
								2063,
								2068
							],
							[
								2073,
								2093
							],
							[
								2131,
								2138
							],
							[
								2175,
								2182
							],
							[
								2505,
								2513
							],
							[
								2531,
								2551
							],
							[
								2891,
								2924
							],
							[
								3014,
								3036
							],
							[
								3250,
								3291
							],
							[
								3302,
								3315
							],
							[
								3382,
								3417
							],
							[
								3462,
								3480
							],
							[
								3516,
								3558
							],
							[
								3624,
								3657
							],
							[
								3679,
								3683
							],
							[
								4072,
								4077
							],
							[
								4127,
								4131
							],
							[
								4158,
								4162
							],
							[
								4190,
								4194
							],
							[
								4217,
								4237
							],
							[
								4316,
								4320
							],
							[
								4390,
								4412
							],
							[
								4527,
								4532
							],
							[
								4565,
								4587
							],
							[
								4781,
								4803
							],
							[
								5226,
								5292
							],
							[
								5638,
								5647
							],
							[
								5752,
								5782
							],
							[
								6143,
								6178
							],
							[
								6210,
								6251
							],
							[
								6283,
								6349
							],
							[
								6382,
								6416
							],
							[
								6482,
								6529
							],
							[
								7065,
								7101
							],
							[
								7214,
								7223
							],
							[
								7459,
								7467
							],
							[
								7573,
								7580
							],
							[
								7630,
								7654
							],
							[
								7926,
								7937
							],
							[
								8027,
								8038
							],
							[
								8102,
								8113
							],
							[
								8167,
								8176
							],
							[
								8214,
								8225
							],
							[
								8313,
								8340
							],
							[
								8472,
								8476
							],
							[
								8500,
								8507
							],
							[
								8540,
								8556
							],
							[
								8685,
								8730
							],
							[
								8969,
								9027
							],
							[
								9356,
								9378
							],
							[
								9751,
								9761
							],
							[
								10005,
								10019
							],
							[
								10954,
								10978
							],
							[
								11104,
								11108
							],
							[
								11200,
								11214
							],
							[
								11304,
								11320
							],
							[
								11752,
								11765
							],
							[
								11783,
								11788
							],
							[
								11870,
								11877
							],
							[
								11905,
								11910
							],
							[
								12055,
								12080
							],
							[
								12255,
								12286
							],
							[
								12363,
								12374
							],
							[
								13959,
								13990
							],
							[
								14520,
								14553
							],
							[
								14825,
								14860
							],
							[
								14945,
								14978
							],
							[
								15909,
								15915
							],
							[
								17030,
								17034
							],
							[
								17930,
								17937
							],
							[
								19236,
								19268
							],
							[
								19649,
								19653
							],
							[
								20332,
								20367
							],
							[
								21129,
								21134
							],
							[
								21861,
								21865
							],
							[
								21959,
								21963
							],
							[
								22083,
								22092
							],
							[
								22222,
								22229
							],
							[
								22510,
								22517
							],
							[
								22598,
								22605
							],
							[
								22669,
								22685
							],
							[
								22750,
								22770
							],
							[
								23469,
								23481
							],
							[
								23580,
								23592
							],
							[
								23794,
								23810
							],
							[
								23904,
								23917
							],
							[
								24328,
								24346
							],
							[
								24528,
								24545
							],
							[
								24971,
								24995
							],
							[
								25171,
								25191
							],
							[
								26409,
								26431
							],
							[
								26904,
								26925
							],
							[
								27476,
								27495
							],
							[
								27929,
								27937
							],
							[
								28376,
								28385
							],
							[
								30852,
								30864
							],
							[
								32776,
								32811
							],
							[
								33309,
								33328
							],
							[
								33582,
								33599
							],
							[
								33644,
								33657
							],
							[
								33693,
								33703
							],
							[
								35174,
								35190
							],
							[
								35322,
								35341
							],
							[
								35352,
								35371
							],
							[
								35777,
								35797
							]
						],
						"symlist":
						[
							"isin = (other, p) =>",
							"Match",
							"constructor(pattern)",
							"apply()",
							"name =>",
							"value =>",
							" (level, message) =>",
							"async function AsyncCollect(iter)",
							"function GetMime(file)",
							"function Matcher(pattern, t = arg => arg)",
							" (...args) =>",
							"function KeyOrValueMatcher(pattern)",
							" ([key, value]) =>",
							"function GetRootDirectories(pattern = '*')",
							"MakeUUID = (rng = Math.random) =>",
							"n =>",
							"dd =>",
							"d =>",
							"d =>",
							"d =>",
							"function GetDir(dir)",
							"n =>",
							"function DirName(name)",
							"it =>",
							"function DateStr(date)",
							"function ModeStr(mode)",
							"HTMLPage = ({ title, style, scripts = [], children, ...props }) =>",
							"script =>",
							"FilterForm = ({ ...props }) =>",
							"HTMLTable = ({ rows, ...props }) =>",
							"HTMLTableRow = ({ columns, ...props }) =>",
							"HTMLTableColumn = ({ columns, children, tag = 'td', ...props }) =>",
							"FileLink = ({ file, ...props }) =>",
							"FileObject = ({ file, stat = {}, ...props }) =>",
							"FileTable = ({ files, ...props }) =>",
							"(a, b) =>",
							"field =>",
							"file =>",
							"function ReadExiv2(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function ReadExiftool(file)",
							"l =>",
							"line =>",
							"([line, idx]) =>",
							"function HeifConvert(src, dst, quality = 100)",
							"function MagickResize(src, dst, rotate = 0, width, height)",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							" function ParseBody(gen)",
							".createWS = (url, callbacks) =>",
							".out = s =>",
							"async function* test(req, resp)",
							" function proxy(req, resp)",
							" function* config(req, resp)",
							" function* file(req, resp)",
							"dir =>",
							"x =>",
							"file =>",
							"async function* files(req, resp)",
							"n =>",
							" function* files2(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file, rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"({ name }) =>",
							"onConnect(ws, req)",
							"sendCommand(data)",
							"onClose(ws,code, reason)",
							"onRequest(req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name, file)",
							"f = x =>",
							"result =>",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAABzBwAAICBpc2luID0gKG90aGVyLCBwKSA9PgpNYXRjaAogIGNvbnN0cnVjdG9yKHBhdHRlcm4pCiAgYXBwbHkoKQogIG5hbWUgPT4KICB2YWx1ZSA9PgoobGV2ZWwsIG1lc3NhZ2UpID0+CkFzeW5jQ29sbGVjdChpdGVyKQpHZXRNaW1lKGZpbGUpCk1hdGNoZXIocGF0dGVybiwgdCA9IGFyZyA9PiBhcmcpCiguLi5hcmdzKSA9PgpLZXlPclZhbHVlTWF0Y2hlcihwYXR0ZXJuKQooW2tleSwgdmFsdWVdKSA9PgpHZXRSb290RGlyZWN0b3JpZXMocGF0dGVybiA9ICcqJykKTWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+CiAgbiA9PgogIGRkID0+CiAgZCA9PgogIGQgPT4KICBkID0+CkdldERpcihkaXIpCiAgbiA9PgpEaXJOYW1lKG5hbWUpCiAgaXQgPT4KRGF0ZVN0cihkYXRlKQpNb2RlU3RyKG1vZGUpCkhUTUxQYWdlID0gKHsgdGl0bGUsIHN0eWxlLCBzY3JpcHRzID0gW10sIGNoaWxkcmVuLCAuLi5wcm9wcyB9KSA9PgogIHNjcmlwdCA9PgpGaWx0ZXJGb3JtID0gKHsgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlID0gKHsgcm93cywgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlUm93ID0gKHsgY29sdW1ucywgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlQ29sdW1uID0gKHsgY29sdW1ucywgY2hpbGRyZW4sIHRhZyA9ICd0ZCcsIC4uLnByb3BzIH0pID0+CkZpbGVMaW5rID0gKHsgZmlsZSwgLi4ucHJvcHMgfSkgPT4KRmlsZU9iamVjdCA9ICh7IGZpbGUsIHN0YXQgPSB7fSwgLi4ucHJvcHMgfSkgPT4KRmlsZVRhYmxlID0gKHsgZmlsZXMsIC4uLnByb3BzIH0pID0+CihhLCBiKSA9PgogIGZpZWxkID0+CiAgZmlsZSA9PgpSZWFkRXhpdjIoZmlsZSkKKFtrLCB2XSkgPT4KKFtrLCB2XSkgPT4KKFtrLCB2XSkgPT4KKGEsIGIpID0+Cihbaywgdl0pID0+ClJlYWRFeGlmdG9vbChmaWxlKQogIGwgPT4KICBsaW5lID0+CihbbGluZSwgaWR4XSkgPT4KSGVpZkNvbnZlcnQoc3JjLCBkc3QsIHF1YWxpdHkgPSAxMDApCk1hZ2lja1Jlc2l6ZShzcmMsIGRzdCwgcm90YXRlID0gMCwgd2lkdGgsIGhlaWdodCkKICBtYWluKC4uLmFyZ3MpCihhLCB2KSA9PgoodiwgcHYsIG8pID0+Cihtb2R1bGUsIC4uLmFyZ3MpID0+CiAgbSA9PgogIC5zaG93ID0gYXJnID0+CiAgLmNsZWFudXAgPSAoKSA9PgooLi4uYXJncykgPT4KKCkgPT4KICBwdXRzKHMpCigpID0+ClBhcnNlQm9keShnZW4pCiAgLmNyZWF0ZVdTID0gKHVybCwgY2FsbGJhY2tzKSA9PgogIC5vdXQgPSBzID0+CiAgdGVzdChyZXEsIHJlc3ApCiAgcHJveHkocmVxLCByZXNwKQogIGNvbmZpZyhyZXEsIHJlc3ApCiAgZmlsZShyZXEsIHJlc3ApCiAgZGlyID0+CiAgeCA9PgogIGZpbGUgPT4KICBmaWxlcyhyZXEsIHJlc3ApCiAgbiA9PgogIGZpbGVzMihyZXEsIHJlc3ApCm4gPT4KICBuID0+CiAgbiA9PgooYSwgYikgPT4KICBuYW1lID0+CiAgZmlsZSA9PgogIGZpbGUgPT4KKFtmaWxlLCByZWxdKSA9PgooYWNjLCBbZmlsZSwgc3RdKSA9PgogIHN0cmluZyhhLCBiKQogIG51bWJlcihhLCBiKQooW25hbWUsIG9ial0pID0+Cih7IG5hbWUgfSkgPT4KICBvbkNvbm5lY3Qod3MsIHJlcSkKICBzZW5kQ29tbWFuZChkYXRhKQogIG9uQ2xvc2Uod3MsY29kZSwgcmVhc29uKQogIG9uUmVxdWVzdChyZXEsIHJlc3ApCiAgb25PcGVuKG5hbWUsIGZpbGVuYW1lKQogIG9uQ29udGVudChuYW1lLCBkYXRhKQogIG9uQ2xvc2UobmFtZSwgZmlsZSkKICBmID0geCA9PgogIHJlc3VsdCA9PgogIG9uRmluYWxpemUoKQoobWF0Y2gsIHAxLCBwMCwgcDIsIHAzLCBvZmZzZXQpID0+CiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIGdldCBjb25uZWN0aW9ucygpCiAgZ2V0IGJ5X3V1aWQoKQogIHV1aWQoZGF0YSkKICBvbkZkKGZkLCByZCwgd3IpCiAgb25DbG9zZSh3cywgcmVhc29uKQogIG9uTWVzc2FnZSh3cywgZGF0YSkKICBxdWl0KHdoeSkAAAAAAAAAAHMHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABzBwAAICBpc2luID0gKG90aGVyLCBwKSA9PgpNYXRjaAogIGNvbnN0cnVjdG9yKHBhdHRlcm4pCiAgYXBwbHkoKQogIG5hbWUgPT4KICB2YWx1ZSA9PgoobGV2ZWwsIG1lc3NhZ2UpID0+CkFzeW5jQ29sbGVjdChpdGVyKQpHZXRNaW1lKGZpbGUpCk1hdGNoZXIocGF0dGVybiwgdCA9IGFyZyA9PiBhcmcpCiguLi5hcmdzKSA9PgpLZXlPclZhbHVlTWF0Y2hlcihwYXR0ZXJuKQooW2tleSwgdmFsdWVdKSA9PgpHZXRSb290RGlyZWN0b3JpZXMocGF0dGVybiA9ICcqJykKTWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+CiAgbiA9PgogIGRkID0+CiAgZCA9PgogIGQgPT4KICBkID0+CkdldERpcihkaXIpCiAgbiA9PgpEaXJOYW1lKG5hbWUpCiAgaXQgPT4KRGF0ZVN0cihkYXRlKQpNb2RlU3RyKG1vZGUpCkhUTUxQYWdlID0gKHsgdGl0bGUsIHN0eWxlLCBzY3JpcHRzID0gW10sIGNoaWxkcmVuLCAuLi5wcm9wcyB9KSA9PgogIHNjcmlwdCA9PgpGaWx0ZXJGb3JtID0gKHsgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlID0gKHsgcm93cywgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlUm93ID0gKHsgY29sdW1ucywgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlQ29sdW1uID0gKHsgY29sdW1ucywgY2hpbGRyZW4sIHRhZyA9ICd0ZCcsIC4uLnByb3BzIH0pID0+CkZpbGVMaW5rID0gKHsgZmlsZSwgLi4ucHJvcHMgfSkgPT4KRmlsZU9iamVjdCA9ICh7IGZpbGUsIHN0YXQgPSB7fSwgLi4ucHJvcHMgfSkgPT4KRmlsZVRhYmxlID0gKHsgZmlsZXMsIC4uLnByb3BzIH0pID0+CihhLCBiKSA9PgogIGZpZWxkID0+CiAgZmlsZSA9PgpSZWFkRXhpdjIoZmlsZSkKKFtrLCB2XSkgPT4KKFtrLCB2XSkgPT4KKFtrLCB2XSkgPT4KKGEsIGIpID0+Cihbaywgdl0pID0+ClJlYWRFeGlmdG9vbChmaWxlKQogIGwgPT4KICBsaW5lID0+CihbbGluZSwgaWR4XSkgPT4KSGVpZkNvbnZlcnQoc3JjLCBkc3QsIHF1YWxpdHkgPSAxMDApCk1hZ2lja1Jlc2l6ZShzcmMsIGRzdCwgcm90YXRlID0gMCwgd2lkdGgsIGhlaWdodCkKICBtYWluKC4uLmFyZ3MpCihhLCB2KSA9PgoodiwgcHYsIG8pID0+Cihtb2R1bGUsIC4uLmFyZ3MpID0+CiAgbSA9PgogIC5zaG93ID0gYXJnID0+CiAgLmNsZWFudXAgPSAoKSA9PgooLi4uYXJncykgPT4KKCkgPT4KICBwdXRzKHMpCigpID0+ClBhcnNlQm9keShnZW4pCiAgLmNyZWF0ZVdTID0gKHVybCwgY2FsbGJhY2tzKSA9PgogIC5vdXQgPSBzID0+CiAgdGVzdChyZXEsIHJlc3ApCiAgcHJveHkocmVxLCByZXNwKQogIGNvbmZpZyhyZXEsIHJlc3ApCiAgZmlsZShyZXEsIHJlc3ApCiAgZGlyID0+CiAgeCA9PgogIGZpbGUgPT4KICBmaWxlcyhyZXEsIHJlc3ApCiAgbiA9PgogIGZpbGVzMihyZXEsIHJlc3ApCm4gPT4KICBuID0+CiAgbiA9PgooYSwgYikgPT4KICBuYW1lID0+CiAgZmlsZSA9PgogIGZpbGUgPT4KKFtmaWxlLCByZWxdKSA9PgooYWNjLCBbZmlsZSwgc3RdKSA9PgogIHN0cmluZyhhLCBiKQogIG51bWJlcihhLCBiKQooW25hbWUsIG9ial0pID0+Cih7IG5hbWUgfSkgPT4KICBvbkNvbm5lY3Qod3MsIHJlcSkKICBzZW5kQ29tbWFuZChkYXRhKQogIG9uQ2xvc2Uod3MsY29kZSwgcmVhc29uKQogIG9uUmVxdWVzdChyZXEsIHJlc3ApCiAgb25PcGVuKG5hbWUsIGZpbGVuYW1lKQogIG9uQ29udGVudChuYW1lLCBkYXRhKQogIG9uQ2xvc2UobmFtZSwgZmlsZSkKICBmID0geCA9PgogIHJlc3VsdCA9PgogIG9uRmluYWxpemUoKQoobWF0Y2gsIHAxLCBwMCwgcDIsIHAzLCBvZmZzZXQpID0+CiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIGdldCBjb25uZWN0aW9ucygpCiAgZ2V0IGJ5X3V1aWQoKQogIHV1aWQoZGF0YSkKICBvbkZkKGZkLCByZCwgd3IpCiAgb25DbG9zZSh3cywgcmVhc29uKQogIG9uTWVzc2FnZSh3cywgZGF0YSkKICBxdWl0KHdoeSkAAAAAAAAAAHMHAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					1,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABzBwAAICBpc2luID0gKG90aGVyLCBwKSA9PgpNYXRjaAogIGNvbnN0cnVjdG9yKHBhdHRlcm4pCiAgYXBwbHkoKQogIG5hbWUgPT4KICB2YWx1ZSA9PgoobGV2ZWwsIG1lc3NhZ2UpID0+CkFzeW5jQ29sbGVjdChpdGVyKQpHZXRNaW1lKGZpbGUpCk1hdGNoZXIocGF0dGVybiwgdCA9IGFyZyA9PiBhcmcpCiguLi5hcmdzKSA9PgpLZXlPclZhbHVlTWF0Y2hlcihwYXR0ZXJuKQooW2tleSwgdmFsdWVdKSA9PgpHZXRSb290RGlyZWN0b3JpZXMocGF0dGVybiA9ICcqJykKTWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+CiAgbiA9PgogIGRkID0+CiAgZCA9PgogIGQgPT4KICBkID0+CkdldERpcihkaXIpCiAgbiA9PgpEaXJOYW1lKG5hbWUpCiAgaXQgPT4KRGF0ZVN0cihkYXRlKQpNb2RlU3RyKG1vZGUpCkhUTUxQYWdlID0gKHsgdGl0bGUsIHN0eWxlLCBzY3JpcHRzID0gW10sIGNoaWxkcmVuLCAuLi5wcm9wcyB9KSA9PgogIHNjcmlwdCA9PgpGaWx0ZXJGb3JtID0gKHsgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlID0gKHsgcm93cywgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlUm93ID0gKHsgY29sdW1ucywgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlQ29sdW1uID0gKHsgY29sdW1ucywgY2hpbGRyZW4sIHRhZyA9ICd0ZCcsIC4uLnByb3BzIH0pID0+CkZpbGVMaW5rID0gKHsgZmlsZSwgLi4ucHJvcHMgfSkgPT4KRmlsZU9iamVjdCA9ICh7IGZpbGUsIHN0YXQgPSB7fSwgLi4ucHJvcHMgfSkgPT4KRmlsZVRhYmxlID0gKHsgZmlsZXMsIC4uLnByb3BzIH0pID0+CihhLCBiKSA9PgogIGZpZWxkID0+CiAgZmlsZSA9PgpSZWFkRXhpdjIoZmlsZSkKKFtrLCB2XSkgPT4KKFtrLCB2XSkgPT4KKFtrLCB2XSkgPT4KKGEsIGIpID0+Cihbaywgdl0pID0+ClJlYWRFeGlmdG9vbChmaWxlKQogIGwgPT4KICBsaW5lID0+CihbbGluZSwgaWR4XSkgPT4KSGVpZkNvbnZlcnQoc3JjLCBkc3QsIHF1YWxpdHkgPSAxMDApCk1hZ2lja1Jlc2l6ZShzcmMsIGRzdCwgcm90YXRlID0gMCwgd2lkdGgsIGhlaWdodCkKICBtYWluKC4uLmFyZ3MpCihhLCB2KSA9PgoodiwgcHYsIG8pID0+Cihtb2R1bGUsIC4uLmFyZ3MpID0+CiAgbSA9PgogIC5zaG93ID0gYXJnID0+CiAgLmNsZWFudXAgPSAoKSA9PgooLi4uYXJncykgPT4KKCkgPT4KICBwdXRzKHMpCigpID0+ClBhcnNlQm9keShnZW4pCiAgLmNyZWF0ZVdTID0gKHVybCwgY2FsbGJhY2tzKSA9PgogIC5vdXQgPSBzID0+CiAgdGVzdChyZXEsIHJlc3ApCiAgcHJveHkocmVxLCByZXNwKQogIGNvbmZpZyhyZXEsIHJlc3ApCiAgZmlsZShyZXEsIHJlc3ApCiAgZGlyID0+CiAgeCA9PgogIGZpbGUgPT4KICBmaWxlcyhyZXEsIHJlc3ApCiAgbiA9PgogIGZpbGVzMihyZXEsIHJlc3ApCm4gPT4KICBuID0+CiAgbiA9PgooYSwgYikgPT4KICBuYW1lID0+CiAgZmlsZSA9PgogIGZpbGUgPT4KKFtmaWxlLCByZWxdKSA9PgooYWNjLCBbZmlsZSwgc3RdKSA9PgogIHN0cmluZyhhLCBiKQogIG51bWJlcihhLCBiKQooW25hbWUsIG9ial0pID0+Cih7IG5hbWUgfSkgPT4KICBvbkNvbm5lY3Qod3MsIHJlcSkKICBzZW5kQ29tbWFuZChkYXRhKQogIG9uQ2xvc2Uod3MsY29kZSwgcmVhc29uKQogIG9uUmVxdWVzdChyZXEsIHJlc3ApCiAgb25PcGVuKG5hbWUsIGZpbGVuYW1lKQogIG9uQ29udGVudChuYW1lLCBkYXRhKQogIG9uQ2xvc2UobmFtZSwgZmlsZSkKICBmID0geCA9PgogIHJlc3VsdCA9PgogIG9uRmluYWxpemUoKQoobWF0Y2gsIHAxLCBwMCwgcDIsIHAzLCBvZmZzZXQpID0+CiAgb25NZXNzYWdlKHdzLCBkYXRhKQogIGdldCBjb25uZWN0aW9ucygpCiAgZ2V0IGJ5X3V1aWQoKQogIHV1aWQoZGF0YSkKICBvbkZkKGZkLCByZCwgd3IpCiAgb25DbG9zZSh3cywgcmVhc29uKQogIG9uTWVzc2FnZSh3cywgZGF0YSkKICBxdWl0KHdoeSkAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					2,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					3,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1814,
								1834
							],
							[
								2064,
								2069
							],
							[
								2074,
								2094
							],
							[
								2132,
								2139
							],
							[
								2176,
								2183
							],
							[
								2506,
								2514
							],
							[
								2532,
								2552
							],
							[
								2892,
								2925
							],
							[
								3015,
								3037
							],
							[
								3251,
								3292
							],
							[
								3303,
								3316
							],
							[
								3383,
								3418
							],
							[
								3463,
								3481
							],
							[
								3517,
								3559
							],
							[
								3625,
								3658
							],
							[
								3680,
								3684
							],
							[
								4074,
								4079
							],
							[
								4129,
								4133
							],
							[
								4160,
								4164
							],
							[
								4192,
								4196
							],
							[
								4220,
								4240
							],
							[
								4319,
								4323
							],
							[
								4393,
								4415
							],
							[
								4530,
								4535
							],
							[
								4569,
								4591
							],
							[
								4785,
								4807
							],
							[
								5230,
								5296
							],
							[
								5645,
								5654
							],
							[
								5761,
								5791
							],
							[
								6155,
								6190
							],
							[
								6222,
								6263
							],
							[
								6295,
								6361
							],
							[
								6394,
								6428
							],
							[
								6494,
								6541
							],
							[
								7079,
								7115
							],
							[
								7228,
								7237
							],
							[
								7473,
								7481
							],
							[
								7590,
								7597
							],
							[
								7649,
								7673
							],
							[
								7945,
								7956
							],
							[
								8046,
								8057
							],
							[
								8121,
								8132
							],
							[
								8186,
								8195
							],
							[
								8233,
								8244
							],
							[
								8333,
								8360
							],
							[
								8492,
								8496
							],
							[
								8520,
								8527
							],
							[
								8560,
								8576
							],
							[
								8705,
								8750
							],
							[
								8990,
								9048
							],
							[
								9378,
								9400
							],
							[
								9775,
								9785
							],
							[
								10029,
								10043
							],
							[
								10980,
								11004
							],
							[
								11130,
								11134
							],
							[
								11227,
								11241
							],
							[
								11331,
								11347
							],
							[
								11781,
								11794
							],
							[
								11812,
								11817
							],
							[
								11899,
								11906
							],
							[
								11934,
								11939
							],
							[
								12085,
								12110
							],
							[
								12285,
								12316
							],
							[
								12393,
								12404
							],
							[
								13990,
								14021
							],
							[
								14551,
								14584
							],
							[
								14856,
								14891
							],
							[
								14976,
								15009
							],
							[
								15942,
								15948
							],
							[
								17063,
								17067
							],
							[
								17964,
								17971
							],
							[
								19274,
								19306
							],
							[
								19687,
								19691
							],
							[
								20370,
								20405
							],
							[
								21167,
								21172
							],
							[
								21899,
								21903
							],
							[
								21997,
								22001
							],
							[
								22121,
								22130
							],
							[
								22260,
								22267
							],
							[
								22548,
								22555
							],
							[
								22636,
								22643
							],
							[
								22707,
								22723
							],
							[
								22788,
								22808
							],
							[
								23511,
								23523
							],
							[
								23622,
								23634
							],
							[
								23837,
								23853
							],
							[
								23947,
								23960
							],
							[
								24372,
								24390
							],
							[
								24572,
								24589
							],
							[
								25016,
								25041
							],
							[
								25207,
								25227
							],
							[
								26445,
								26467
							],
							[
								26940,
								26961
							],
							[
								27513,
								27532
							],
							[
								27966,
								27974
							],
							[
								28413,
								28422
							],
							[
								30889,
								30901
							],
							[
								32814,
								32849
							],
							[
								33347,
								33366
							],
							[
								33621,
								33638
							],
							[
								33683,
								33696
							],
							[
								33732,
								33742
							],
							[
								35219,
								35235
							],
							[
								35367,
								35386
							],
							[
								35397,
								35416
							],
							[
								35824,
								35844
							]
						],
						"symlist":
						[
							"isin = (other, p) =>",
							"Match",
							"constructor(pattern)",
							"apply()",
							"name =>",
							"value =>",
							" (level, message) =>",
							"async function AsyncCollect(iter)",
							"function GetMime(file)",
							"function Matcher(pattern, t = arg => arg)",
							" (...args) =>",
							"function KeyOrValueMatcher(pattern)",
							" ([key, value]) =>",
							"function GetRootDirectories(pattern = '*')",
							"MakeUUID = (rng = Math.random) =>",
							"n =>",
							"dd =>",
							"d =>",
							"d =>",
							"d =>",
							"function GetDir(dir)",
							"n =>",
							"function DirName(name)",
							"it =>",
							"function DateStr(date)",
							"function ModeStr(mode)",
							"HTMLPage = ({ title, style, scripts = [], children, ...props }) =>",
							"script =>",
							"FilterForm = ({ ...props }) =>",
							"HTMLTable = ({ rows, ...props }) =>",
							"HTMLTableRow = ({ columns, ...props }) =>",
							"HTMLTableColumn = ({ columns, children, tag = 'td', ...props }) =>",
							"FileLink = ({ file, ...props }) =>",
							"FileObject = ({ file, stat = {}, ...props }) =>",
							"FileTable = ({ files, ...props }) =>",
							"(a, b) =>",
							"field =>",
							"file =>",
							"function ReadExiv2(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function ReadExiftool(file)",
							"l =>",
							"line =>",
							"([line, idx]) =>",
							"function HeifConvert(src, dst, quality = 100)",
							"function MagickResize(src, dst, rotate = 0, width, height)",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							" function ParseBody(gen)",
							".createWS = (url, callbacks) =>",
							".out = s =>",
							"async function* test(req, resp)",
							" function proxy(req, resp)",
							" function* config(req, resp)",
							" function* file(req, resp)",
							"dir =>",
							"x =>",
							"file =>",
							"async function* files(req, resp)",
							"n =>",
							" function* files2(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file, rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"({ name }) =>",
							"onConnect(ws, req)",
							"sendCommand(data)",
							"onClose(ws, code, reason)",
							"onRequest(req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name, file)",
							"f = x =>",
							"result =>",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"AQAAAAAAAAAAAAAAdAcAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					4,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB0BwAAICBpc2luID0gKG90aGVyLCBwKSA9PgpNYXRjaAogIGNvbnN0cnVjdG9yKHBhdHRlcm4pCiAgYXBwbHkoKQogIG5hbWUgPT4KICB2YWx1ZSA9PgoobGV2ZWwsIG1lc3NhZ2UpID0+CkFzeW5jQ29sbGVjdChpdGVyKQpHZXRNaW1lKGZpbGUpCk1hdGNoZXIocGF0dGVybiwgdCA9IGFyZyA9PiBhcmcpCiguLi5hcmdzKSA9PgpLZXlPclZhbHVlTWF0Y2hlcihwYXR0ZXJuKQooW2tleSwgdmFsdWVdKSA9PgpHZXRSb290RGlyZWN0b3JpZXMocGF0dGVybiA9ICcqJykKTWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+CiAgbiA9PgogIGRkID0+CiAgZCA9PgogIGQgPT4KICBkID0+CkdldERpcihkaXIpCiAgbiA9PgpEaXJOYW1lKG5hbWUpCiAgaXQgPT4KRGF0ZVN0cihkYXRlKQpNb2RlU3RyKG1vZGUpCkhUTUxQYWdlID0gKHsgdGl0bGUsIHN0eWxlLCBzY3JpcHRzID0gW10sIGNoaWxkcmVuLCAuLi5wcm9wcyB9KSA9PgogIHNjcmlwdCA9PgpGaWx0ZXJGb3JtID0gKHsgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlID0gKHsgcm93cywgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlUm93ID0gKHsgY29sdW1ucywgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlQ29sdW1uID0gKHsgY29sdW1ucywgY2hpbGRyZW4sIHRhZyA9ICd0ZCcsIC4uLnByb3BzIH0pID0+CkZpbGVMaW5rID0gKHsgZmlsZSwgLi4ucHJvcHMgfSkgPT4KRmlsZU9iamVjdCA9ICh7IGZpbGUsIHN0YXQgPSB7fSwgLi4ucHJvcHMgfSkgPT4KRmlsZVRhYmxlID0gKHsgZmlsZXMsIC4uLnByb3BzIH0pID0+CihhLCBiKSA9PgogIGZpZWxkID0+CiAgZmlsZSA9PgpSZWFkRXhpdjIoZmlsZSkKKFtrLCB2XSkgPT4KKFtrLCB2XSkgPT4KKFtrLCB2XSkgPT4KKGEsIGIpID0+Cihbaywgdl0pID0+ClJlYWRFeGlmdG9vbChmaWxlKQogIGwgPT4KICBsaW5lID0+CihbbGluZSwgaWR4XSkgPT4KSGVpZkNvbnZlcnQoc3JjLCBkc3QsIHF1YWxpdHkgPSAxMDApCk1hZ2lja1Jlc2l6ZShzcmMsIGRzdCwgcm90YXRlID0gMCwgd2lkdGgsIGhlaWdodCkKICBtYWluKC4uLmFyZ3MpCihhLCB2KSA9PgoodiwgcHYsIG8pID0+Cihtb2R1bGUsIC4uLmFyZ3MpID0+CiAgbSA9PgogIC5zaG93ID0gYXJnID0+CiAgLmNsZWFudXAgPSAoKSA9PgooLi4uYXJncykgPT4KKCkgPT4KICBwdXRzKHMpCigpID0+ClBhcnNlQm9keShnZW4pCiAgLmNyZWF0ZVdTID0gKHVybCwgY2FsbGJhY2tzKSA9PgogIC5vdXQgPSBzID0+CiAgdGVzdChyZXEsIHJlc3ApCiAgcHJveHkocmVxLCByZXNwKQogIGNvbmZpZyhyZXEsIHJlc3ApCiAgZmlsZShyZXEsIHJlc3ApCiAgZGlyID0+CiAgeCA9PgogIGZpbGUgPT4KICBmaWxlcyhyZXEsIHJlc3ApCiAgbiA9PgogIGZpbGVzMihyZXEsIHJlc3ApCm4gPT4KICBuID0+CiAgbiA9PgooYSwgYikgPT4KICBuYW1lID0+CiAgZmlsZSA9PgogIGZpbGUgPT4KKFtmaWxlLCByZWxdKSA9PgooYWNjLCBbZmlsZSwgc3RdKSA9PgogIHN0cmluZyhhLCBiKQogIG51bWJlcihhLCBiKQooW25hbWUsIG9ial0pID0+Cih7IG5hbWUgfSkgPT4KICBvbkNvbm5lY3Qod3MsIHJlcSkKICBzZW5kQ29tbWFuZChkYXRhKQogIG9uQ2xvc2Uod3MsIGNvZGUsIHJlYXNvbikKICBvblJlcXVlc3QocmVxLCByZXNwKQogIG9uT3BlbihuYW1lLCBmaWxlbmFtZSkKICBvbkNvbnRlbnQobmFtZSwgZGF0YSkKICBvbkNsb3NlKG5hbWUsIGZpbGUpCiAgZiA9IHggPT4KICByZXN1bHQgPT4KICBvbkZpbmFsaXplKCkKKG1hdGNoLCBwMSwgcDAsIHAyLCBwMywgb2Zmc2V0KSA9PgogIG9uTWVzc2FnZSh3cywgZGF0YSkKICBnZXQgY29ubmVjdGlvbnMoKQogIGdldCBieV91dWlkKCkKICB1dWlkKGRhdGEpCiAgb25GZChmZCwgcmQsIHdyKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgcXVpdCh3aHkpAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					5,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1814,
								1834
							],
							[
								2064,
								2069
							],
							[
								2074,
								2094
							],
							[
								2132,
								2139
							],
							[
								2176,
								2183
							],
							[
								2506,
								2514
							],
							[
								2532,
								2552
							],
							[
								2892,
								2925
							],
							[
								3015,
								3037
							],
							[
								3251,
								3292
							],
							[
								3303,
								3316
							],
							[
								3383,
								3418
							],
							[
								3463,
								3481
							],
							[
								3517,
								3559
							],
							[
								3625,
								3658
							],
							[
								3680,
								3684
							],
							[
								4074,
								4079
							],
							[
								4129,
								4133
							],
							[
								4160,
								4164
							],
							[
								4192,
								4196
							],
							[
								4220,
								4240
							],
							[
								4319,
								4323
							],
							[
								4393,
								4415
							],
							[
								4530,
								4535
							],
							[
								4569,
								4591
							],
							[
								4785,
								4807
							],
							[
								5230,
								5296
							],
							[
								5645,
								5654
							],
							[
								5761,
								5791
							],
							[
								6155,
								6190
							],
							[
								6222,
								6263
							],
							[
								6295,
								6361
							],
							[
								6394,
								6428
							],
							[
								6494,
								6541
							],
							[
								7079,
								7115
							],
							[
								7228,
								7237
							],
							[
								7473,
								7481
							],
							[
								7590,
								7597
							],
							[
								7649,
								7673
							],
							[
								7945,
								7956
							],
							[
								8046,
								8057
							],
							[
								8121,
								8132
							],
							[
								8186,
								8195
							],
							[
								8233,
								8244
							],
							[
								8333,
								8360
							],
							[
								8492,
								8496
							],
							[
								8520,
								8527
							],
							[
								8560,
								8576
							],
							[
								8705,
								8750
							],
							[
								8990,
								9048
							],
							[
								9378,
								9400
							],
							[
								9775,
								9785
							],
							[
								10029,
								10043
							],
							[
								10980,
								11004
							],
							[
								11130,
								11134
							],
							[
								11227,
								11241
							],
							[
								11331,
								11347
							],
							[
								11781,
								11794
							],
							[
								11812,
								11817
							],
							[
								11899,
								11906
							],
							[
								11934,
								11939
							],
							[
								12085,
								12110
							],
							[
								12285,
								12316
							],
							[
								12393,
								12404
							],
							[
								13990,
								14021
							],
							[
								14551,
								14584
							],
							[
								14856,
								14891
							],
							[
								14976,
								15009
							],
							[
								15942,
								15948
							],
							[
								17063,
								17067
							],
							[
								17964,
								17971
							],
							[
								19274,
								19306
							],
							[
								19687,
								19691
							],
							[
								20370,
								20405
							],
							[
								21167,
								21172
							],
							[
								21899,
								21903
							],
							[
								21997,
								22001
							],
							[
								22121,
								22130
							],
							[
								22260,
								22267
							],
							[
								22548,
								22555
							],
							[
								22636,
								22643
							],
							[
								22707,
								22723
							],
							[
								22788,
								22808
							],
							[
								23511,
								23523
							],
							[
								23622,
								23634
							],
							[
								23837,
								23853
							],
							[
								23947,
								23960
							],
							[
								24372,
								24390
							],
							[
								24572,
								24589
							],
							[
								25016,
								25041
							],
							[
								25207,
								25227
							],
							[
								26445,
								26467
							],
							[
								26940,
								26961
							],
							[
								27513,
								27532
							],
							[
								27966,
								27974
							],
							[
								28413,
								28422
							],
							[
								30889,
								30901
							],
							[
								32814,
								32849
							],
							[
								33347,
								33366
							],
							[
								33621,
								33638
							],
							[
								33683,
								33696
							],
							[
								33732,
								33742
							],
							[
								35219,
								35235
							],
							[
								35367,
								35386
							],
							[
								35397,
								35416
							],
							[
								35824,
								35844
							]
						],
						"symlist":
						[
							"isin = (other, p) =>",
							"Match",
							"constructor(pattern)",
							"apply()",
							"name =>",
							"value =>",
							" (level, message) =>",
							"async function AsyncCollect(iter)",
							"function GetMime(file)",
							"function Matcher(pattern, t = arg => arg)",
							" (...args) =>",
							"function KeyOrValueMatcher(pattern)",
							" ([key, value]) =>",
							"function GetRootDirectories(pattern = '*')",
							"MakeUUID = (rng = Math.random) =>",
							"n =>",
							"dd =>",
							"d =>",
							"d =>",
							"d =>",
							"function GetDir(dir)",
							"n =>",
							"function DirName(name)",
							"it =>",
							"function DateStr(date)",
							"function ModeStr(mode)",
							"HTMLPage = ({ title, style, scripts = [], children, ...props }) =>",
							"script =>",
							"FilterForm = ({ ...props }) =>",
							"HTMLTable = ({ rows, ...props }) =>",
							"HTMLTableRow = ({ columns, ...props }) =>",
							"HTMLTableColumn = ({ columns, children, tag = 'td', ...props }) =>",
							"FileLink = ({ file, ...props }) =>",
							"FileObject = ({ file, stat = {}, ...props }) =>",
							"FileTable = ({ files, ...props }) =>",
							"(a, b) =>",
							"field =>",
							"file =>",
							"function ReadExiv2(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function ReadExiftool(file)",
							"l =>",
							"line =>",
							"([line, idx]) =>",
							"function HeifConvert(src, dst, quality = 100)",
							"function MagickResize(src, dst, rotate = 0, width, height)",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							" function ParseBody(gen)",
							".createWS = (url, callbacks) =>",
							".out = s =>",
							"async function* test(req, resp)",
							" function proxy(req, resp)",
							" function* config(req, resp)",
							" function* file(req, resp)",
							"dir =>",
							"x =>",
							"file =>",
							"async function* files(req, resp)",
							"n =>",
							" function* files2(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file, rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"({ name }) =>",
							"onConnect(ws, req)",
							"sendCommand(data)",
							"onClose(ws, code, reason)",
							"onRequest(req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name, file)",
							"f = x =>",
							"result =>",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"AQAAAAAAAAAAAAAAdAcAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					6,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB0BwAAICBpc2luID0gKG90aGVyLCBwKSA9PgpNYXRjaAogIGNvbnN0cnVjdG9yKHBhdHRlcm4pCiAgYXBwbHkoKQogIG5hbWUgPT4KICB2YWx1ZSA9PgoobGV2ZWwsIG1lc3NhZ2UpID0+CkFzeW5jQ29sbGVjdChpdGVyKQpHZXRNaW1lKGZpbGUpCk1hdGNoZXIocGF0dGVybiwgdCA9IGFyZyA9PiBhcmcpCiguLi5hcmdzKSA9PgpLZXlPclZhbHVlTWF0Y2hlcihwYXR0ZXJuKQooW2tleSwgdmFsdWVdKSA9PgpHZXRSb290RGlyZWN0b3JpZXMocGF0dGVybiA9ICcqJykKTWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+CiAgbiA9PgogIGRkID0+CiAgZCA9PgogIGQgPT4KICBkID0+CkdldERpcihkaXIpCiAgbiA9PgpEaXJOYW1lKG5hbWUpCiAgaXQgPT4KRGF0ZVN0cihkYXRlKQpNb2RlU3RyKG1vZGUpCkhUTUxQYWdlID0gKHsgdGl0bGUsIHN0eWxlLCBzY3JpcHRzID0gW10sIGNoaWxkcmVuLCAuLi5wcm9wcyB9KSA9PgogIHNjcmlwdCA9PgpGaWx0ZXJGb3JtID0gKHsgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlID0gKHsgcm93cywgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlUm93ID0gKHsgY29sdW1ucywgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlQ29sdW1uID0gKHsgY29sdW1ucywgY2hpbGRyZW4sIHRhZyA9ICd0ZCcsIC4uLnByb3BzIH0pID0+CkZpbGVMaW5rID0gKHsgZmlsZSwgLi4ucHJvcHMgfSkgPT4KRmlsZU9iamVjdCA9ICh7IGZpbGUsIHN0YXQgPSB7fSwgLi4ucHJvcHMgfSkgPT4KRmlsZVRhYmxlID0gKHsgZmlsZXMsIC4uLnByb3BzIH0pID0+CihhLCBiKSA9PgogIGZpZWxkID0+CiAgZmlsZSA9PgpSZWFkRXhpdjIoZmlsZSkKKFtrLCB2XSkgPT4KKFtrLCB2XSkgPT4KKFtrLCB2XSkgPT4KKGEsIGIpID0+Cihbaywgdl0pID0+ClJlYWRFeGlmdG9vbChmaWxlKQogIGwgPT4KICBsaW5lID0+CihbbGluZSwgaWR4XSkgPT4KSGVpZkNvbnZlcnQoc3JjLCBkc3QsIHF1YWxpdHkgPSAxMDApCk1hZ2lja1Jlc2l6ZShzcmMsIGRzdCwgcm90YXRlID0gMCwgd2lkdGgsIGhlaWdodCkKICBtYWluKC4uLmFyZ3MpCihhLCB2KSA9PgoodiwgcHYsIG8pID0+Cihtb2R1bGUsIC4uLmFyZ3MpID0+CiAgbSA9PgogIC5zaG93ID0gYXJnID0+CiAgLmNsZWFudXAgPSAoKSA9PgooLi4uYXJncykgPT4KKCkgPT4KICBwdXRzKHMpCigpID0+ClBhcnNlQm9keShnZW4pCiAgLmNyZWF0ZVdTID0gKHVybCwgY2FsbGJhY2tzKSA9PgogIC5vdXQgPSBzID0+CiAgdGVzdChyZXEsIHJlc3ApCiAgcHJveHkocmVxLCByZXNwKQogIGNvbmZpZyhyZXEsIHJlc3ApCiAgZmlsZShyZXEsIHJlc3ApCiAgZGlyID0+CiAgeCA9PgogIGZpbGUgPT4KICBmaWxlcyhyZXEsIHJlc3ApCiAgbiA9PgogIGZpbGVzMihyZXEsIHJlc3ApCm4gPT4KICBuID0+CiAgbiA9PgooYSwgYikgPT4KICBuYW1lID0+CiAgZmlsZSA9PgogIGZpbGUgPT4KKFtmaWxlLCByZWxdKSA9PgooYWNjLCBbZmlsZSwgc3RdKSA9PgogIHN0cmluZyhhLCBiKQogIG51bWJlcihhLCBiKQooW25hbWUsIG9ial0pID0+Cih7IG5hbWUgfSkgPT4KICBvbkNvbm5lY3Qod3MsIHJlcSkKICBzZW5kQ29tbWFuZChkYXRhKQogIG9uQ2xvc2Uod3MsIGNvZGUsIHJlYXNvbikKICBvblJlcXVlc3QocmVxLCByZXNwKQogIG9uT3BlbihuYW1lLCBmaWxlbmFtZSkKICBvbkNvbnRlbnQobmFtZSwgZGF0YSkKICBvbkNsb3NlKG5hbWUsIGZpbGUpCiAgZiA9IHggPT4KICByZXN1bHQgPT4KICBvbkZpbmFsaXplKCkKKG1hdGNoLCBwMSwgcDAsIHAyLCBwMywgb2Zmc2V0KSA9PgogIG9uTWVzc2FnZSh3cywgZGF0YSkKICBnZXQgY29ubmVjdGlvbnMoKQogIGdldCBieV91dWlkKCkKICB1dWlkKGRhdGEpCiAgb25GZChmZCwgcmQsIHdyKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgcXVpdCh3aHkpAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					7,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1814,
								1834
							],
							[
								2064,
								2069
							],
							[
								2074,
								2094
							],
							[
								2132,
								2139
							],
							[
								2176,
								2183
							],
							[
								2506,
								2514
							],
							[
								2532,
								2552
							],
							[
								2892,
								2925
							],
							[
								3015,
								3037
							],
							[
								3251,
								3292
							],
							[
								3303,
								3316
							],
							[
								3383,
								3418
							],
							[
								3463,
								3481
							],
							[
								3517,
								3559
							],
							[
								3625,
								3658
							],
							[
								3680,
								3684
							],
							[
								4074,
								4079
							],
							[
								4129,
								4133
							],
							[
								4160,
								4164
							],
							[
								4192,
								4196
							],
							[
								4220,
								4240
							],
							[
								4319,
								4323
							],
							[
								4393,
								4415
							],
							[
								4530,
								4535
							],
							[
								4569,
								4591
							],
							[
								4785,
								4807
							],
							[
								5230,
								5296
							],
							[
								5645,
								5654
							],
							[
								5761,
								5791
							],
							[
								6155,
								6190
							],
							[
								6222,
								6263
							],
							[
								6295,
								6361
							],
							[
								6394,
								6428
							],
							[
								6494,
								6541
							],
							[
								7079,
								7115
							],
							[
								7228,
								7237
							],
							[
								7473,
								7481
							],
							[
								7590,
								7597
							],
							[
								7649,
								7673
							],
							[
								7945,
								7956
							],
							[
								8046,
								8057
							],
							[
								8121,
								8132
							],
							[
								8186,
								8195
							],
							[
								8233,
								8244
							],
							[
								8333,
								8360
							],
							[
								8492,
								8496
							],
							[
								8520,
								8527
							],
							[
								8560,
								8576
							],
							[
								8705,
								8750
							],
							[
								8990,
								9048
							],
							[
								9378,
								9400
							],
							[
								9775,
								9785
							],
							[
								10029,
								10043
							],
							[
								10980,
								11004
							],
							[
								11130,
								11134
							],
							[
								11227,
								11241
							],
							[
								11331,
								11347
							],
							[
								11781,
								11794
							],
							[
								11812,
								11817
							],
							[
								11899,
								11906
							],
							[
								11934,
								11939
							],
							[
								12085,
								12110
							],
							[
								12285,
								12316
							],
							[
								12393,
								12404
							],
							[
								13990,
								14021
							],
							[
								14551,
								14584
							],
							[
								14856,
								14891
							],
							[
								14976,
								15009
							],
							[
								15942,
								15948
							],
							[
								17063,
								17067
							],
							[
								17964,
								17971
							],
							[
								19274,
								19306
							],
							[
								19687,
								19691
							],
							[
								20370,
								20405
							],
							[
								21167,
								21172
							],
							[
								21899,
								21903
							],
							[
								21997,
								22001
							],
							[
								22121,
								22130
							],
							[
								22260,
								22267
							],
							[
								22548,
								22555
							],
							[
								22636,
								22643
							],
							[
								22707,
								22723
							],
							[
								22788,
								22808
							],
							[
								23511,
								23523
							],
							[
								23622,
								23634
							],
							[
								23837,
								23853
							],
							[
								23947,
								23960
							],
							[
								24372,
								24390
							],
							[
								24572,
								24589
							],
							[
								25016,
								25041
							],
							[
								25207,
								25227
							],
							[
								26445,
								26467
							],
							[
								26940,
								26961
							],
							[
								27513,
								27532
							],
							[
								27966,
								27974
							],
							[
								28413,
								28422
							],
							[
								30889,
								30901
							],
							[
								32814,
								32849
							],
							[
								33347,
								33366
							],
							[
								33621,
								33638
							],
							[
								33683,
								33696
							],
							[
								33732,
								33742
							],
							[
								35219,
								35235
							],
							[
								35367,
								35386
							],
							[
								35397,
								35416
							],
							[
								35824,
								35844
							]
						],
						"symlist":
						[
							"isin = (other, p) =>",
							"Match",
							"constructor(pattern)",
							"apply()",
							"name =>",
							"value =>",
							" (level, message) =>",
							"async function AsyncCollect(iter)",
							"function GetMime(file)",
							"function Matcher(pattern, t = arg => arg)",
							" (...args) =>",
							"function KeyOrValueMatcher(pattern)",
							" ([key, value]) =>",
							"function GetRootDirectories(pattern = '*')",
							"MakeUUID = (rng = Math.random) =>",
							"n =>",
							"dd =>",
							"d =>",
							"d =>",
							"d =>",
							"function GetDir(dir)",
							"n =>",
							"function DirName(name)",
							"it =>",
							"function DateStr(date)",
							"function ModeStr(mode)",
							"HTMLPage = ({ title, style, scripts = [], children, ...props }) =>",
							"script =>",
							"FilterForm = ({ ...props }) =>",
							"HTMLTable = ({ rows, ...props }) =>",
							"HTMLTableRow = ({ columns, ...props }) =>",
							"HTMLTableColumn = ({ columns, children, tag = 'td', ...props }) =>",
							"FileLink = ({ file, ...props }) =>",
							"FileObject = ({ file, stat = {}, ...props }) =>",
							"FileTable = ({ files, ...props }) =>",
							"(a, b) =>",
							"field =>",
							"file =>",
							"function ReadExiv2(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function ReadExiftool(file)",
							"l =>",
							"line =>",
							"([line, idx]) =>",
							"function HeifConvert(src, dst, quality = 100)",
							"function MagickResize(src, dst, rotate = 0, width, height)",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							" function ParseBody(gen)",
							".createWS = (url, callbacks) =>",
							".out = s =>",
							"async function* test(req, resp)",
							" function proxy(req, resp)",
							" function* config(req, resp)",
							" function* file(req, resp)",
							"dir =>",
							"x =>",
							"file =>",
							"async function* files(req, resp)",
							"n =>",
							" function* files2(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file, rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"({ name }) =>",
							"onConnect(ws, req)",
							"sendCommand(data)",
							"onClose(ws, code, reason)",
							"onRequest(req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name, file)",
							"f = x =>",
							"result =>",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"AQAAAAAAAAAAAAAAdAcAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					8,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1814,
								1834
							],
							[
								2064,
								2069
							],
							[
								2074,
								2094
							],
							[
								2132,
								2139
							],
							[
								2176,
								2183
							],
							[
								2506,
								2514
							],
							[
								2532,
								2552
							],
							[
								2892,
								2925
							],
							[
								3015,
								3037
							],
							[
								3251,
								3292
							],
							[
								3303,
								3316
							],
							[
								3383,
								3418
							],
							[
								3463,
								3481
							],
							[
								3517,
								3559
							],
							[
								3625,
								3658
							],
							[
								3680,
								3684
							],
							[
								4074,
								4079
							],
							[
								4129,
								4133
							],
							[
								4160,
								4164
							],
							[
								4192,
								4196
							],
							[
								4220,
								4240
							],
							[
								4319,
								4323
							],
							[
								4393,
								4415
							],
							[
								4530,
								4535
							],
							[
								4569,
								4591
							],
							[
								4785,
								4807
							],
							[
								5230,
								5296
							],
							[
								5645,
								5654
							],
							[
								5761,
								5791
							],
							[
								6155,
								6190
							],
							[
								6222,
								6263
							],
							[
								6295,
								6361
							],
							[
								6394,
								6428
							],
							[
								6494,
								6541
							],
							[
								7079,
								7115
							],
							[
								7228,
								7237
							],
							[
								7473,
								7481
							],
							[
								7590,
								7597
							],
							[
								7649,
								7673
							],
							[
								7945,
								7956
							],
							[
								8046,
								8057
							],
							[
								8121,
								8132
							],
							[
								8186,
								8195
							],
							[
								8233,
								8244
							],
							[
								8333,
								8360
							],
							[
								8492,
								8496
							],
							[
								8520,
								8527
							],
							[
								8560,
								8576
							],
							[
								8705,
								8750
							],
							[
								8990,
								9048
							],
							[
								9378,
								9400
							],
							[
								9775,
								9785
							],
							[
								10029,
								10043
							],
							[
								10980,
								11004
							],
							[
								11130,
								11134
							],
							[
								11227,
								11241
							],
							[
								11331,
								11347
							],
							[
								11781,
								11794
							],
							[
								11812,
								11817
							],
							[
								11899,
								11906
							],
							[
								11934,
								11939
							],
							[
								12085,
								12110
							],
							[
								12285,
								12316
							],
							[
								12393,
								12404
							],
							[
								13990,
								14021
							],
							[
								14551,
								14584
							],
							[
								14856,
								14891
							],
							[
								14976,
								15009
							],
							[
								15942,
								15948
							],
							[
								17063,
								17067
							],
							[
								17964,
								17971
							],
							[
								19274,
								19306
							],
							[
								19687,
								19691
							],
							[
								20370,
								20405
							],
							[
								21167,
								21172
							],
							[
								21899,
								21903
							],
							[
								21997,
								22001
							],
							[
								22121,
								22130
							],
							[
								22260,
								22267
							],
							[
								22548,
								22555
							],
							[
								22636,
								22643
							],
							[
								22707,
								22723
							],
							[
								22788,
								22808
							],
							[
								23511,
								23523
							],
							[
								23622,
								23634
							],
							[
								23837,
								23853
							],
							[
								23947,
								23960
							],
							[
								24372,
								24390
							],
							[
								24572,
								24589
							],
							[
								25016,
								25041
							],
							[
								25207,
								25227
							],
							[
								26445,
								26467
							],
							[
								26940,
								26961
							],
							[
								27513,
								27532
							],
							[
								27966,
								27974
							],
							[
								28413,
								28422
							],
							[
								30889,
								30901
							],
							[
								32814,
								32849
							],
							[
								33347,
								33366
							],
							[
								33621,
								33638
							],
							[
								33683,
								33696
							],
							[
								33732,
								33742
							],
							[
								35219,
								35235
							],
							[
								35367,
								35386
							],
							[
								35397,
								35416
							],
							[
								35824,
								35844
							]
						],
						"symlist":
						[
							"isin = (other, p) =>",
							"Match",
							"constructor(pattern)",
							"apply()",
							"name =>",
							"value =>",
							" (level, message) =>",
							"async function AsyncCollect(iter)",
							"function GetMime(file)",
							"function Matcher(pattern, t = arg => arg)",
							" (...args) =>",
							"function KeyOrValueMatcher(pattern)",
							" ([key, value]) =>",
							"function GetRootDirectories(pattern = '*')",
							"MakeUUID = (rng = Math.random) =>",
							"n =>",
							"dd =>",
							"d =>",
							"d =>",
							"d =>",
							"function GetDir(dir)",
							"n =>",
							"function DirName(name)",
							"it =>",
							"function DateStr(date)",
							"function ModeStr(mode)",
							"HTMLPage = ({ title, style, scripts = [], children, ...props }) =>",
							"script =>",
							"FilterForm = ({ ...props }) =>",
							"HTMLTable = ({ rows, ...props }) =>",
							"HTMLTableRow = ({ columns, ...props }) =>",
							"HTMLTableColumn = ({ columns, children, tag = 'td', ...props }) =>",
							"FileLink = ({ file, ...props }) =>",
							"FileObject = ({ file, stat = {}, ...props }) =>",
							"FileTable = ({ files, ...props }) =>",
							"(a, b) =>",
							"field =>",
							"file =>",
							"function ReadExiv2(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function ReadExiftool(file)",
							"l =>",
							"line =>",
							"([line, idx]) =>",
							"function HeifConvert(src, dst, quality = 100)",
							"function MagickResize(src, dst, rotate = 0, width, height)",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							" function ParseBody(gen)",
							".createWS = (url, callbacks) =>",
							".out = s =>",
							"async function* test(req, resp)",
							" function proxy(req, resp)",
							" function* config(req, resp)",
							" function* file(req, resp)",
							"dir =>",
							"x =>",
							"file =>",
							"async function* files(req, resp)",
							"n =>",
							" function* files2(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file, rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"({ name }) =>",
							"onConnect(ws, req)",
							"sendCommand(data)",
							"onClose(ws, code, reason)",
							"onRequest(req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name, file)",
							"f = x =>",
							"result =>",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB0BwAAICBpc2luID0gKG90aGVyLCBwKSA9PgpNYXRjaAogIGNvbnN0cnVjdG9yKHBhdHRlcm4pCiAgYXBwbHkoKQogIG5hbWUgPT4KICB2YWx1ZSA9PgoobGV2ZWwsIG1lc3NhZ2UpID0+CkFzeW5jQ29sbGVjdChpdGVyKQpHZXRNaW1lKGZpbGUpCk1hdGNoZXIocGF0dGVybiwgdCA9IGFyZyA9PiBhcmcpCiguLi5hcmdzKSA9PgpLZXlPclZhbHVlTWF0Y2hlcihwYXR0ZXJuKQooW2tleSwgdmFsdWVdKSA9PgpHZXRSb290RGlyZWN0b3JpZXMocGF0dGVybiA9ICcqJykKTWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+CiAgbiA9PgogIGRkID0+CiAgZCA9PgogIGQgPT4KICBkID0+CkdldERpcihkaXIpCiAgbiA9PgpEaXJOYW1lKG5hbWUpCiAgaXQgPT4KRGF0ZVN0cihkYXRlKQpNb2RlU3RyKG1vZGUpCkhUTUxQYWdlID0gKHsgdGl0bGUsIHN0eWxlLCBzY3JpcHRzID0gW10sIGNoaWxkcmVuLCAuLi5wcm9wcyB9KSA9PgogIHNjcmlwdCA9PgpGaWx0ZXJGb3JtID0gKHsgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlID0gKHsgcm93cywgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlUm93ID0gKHsgY29sdW1ucywgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlQ29sdW1uID0gKHsgY29sdW1ucywgY2hpbGRyZW4sIHRhZyA9ICd0ZCcsIC4uLnByb3BzIH0pID0+CkZpbGVMaW5rID0gKHsgZmlsZSwgLi4ucHJvcHMgfSkgPT4KRmlsZU9iamVjdCA9ICh7IGZpbGUsIHN0YXQgPSB7fSwgLi4ucHJvcHMgfSkgPT4KRmlsZVRhYmxlID0gKHsgZmlsZXMsIC4uLnByb3BzIH0pID0+CihhLCBiKSA9PgogIGZpZWxkID0+CiAgZmlsZSA9PgpSZWFkRXhpdjIoZmlsZSkKKFtrLCB2XSkgPT4KKFtrLCB2XSkgPT4KKFtrLCB2XSkgPT4KKGEsIGIpID0+Cihbaywgdl0pID0+ClJlYWRFeGlmdG9vbChmaWxlKQogIGwgPT4KICBsaW5lID0+CihbbGluZSwgaWR4XSkgPT4KSGVpZkNvbnZlcnQoc3JjLCBkc3QsIHF1YWxpdHkgPSAxMDApCk1hZ2lja1Jlc2l6ZShzcmMsIGRzdCwgcm90YXRlID0gMCwgd2lkdGgsIGhlaWdodCkKICBtYWluKC4uLmFyZ3MpCihhLCB2KSA9PgoodiwgcHYsIG8pID0+Cihtb2R1bGUsIC4uLmFyZ3MpID0+CiAgbSA9PgogIC5zaG93ID0gYXJnID0+CiAgLmNsZWFudXAgPSAoKSA9PgooLi4uYXJncykgPT4KKCkgPT4KICBwdXRzKHMpCigpID0+ClBhcnNlQm9keShnZW4pCiAgLmNyZWF0ZVdTID0gKHVybCwgY2FsbGJhY2tzKSA9PgogIC5vdXQgPSBzID0+CiAgdGVzdChyZXEsIHJlc3ApCiAgcHJveHkocmVxLCByZXNwKQogIGNvbmZpZyhyZXEsIHJlc3ApCiAgZmlsZShyZXEsIHJlc3ApCiAgZGlyID0+CiAgeCA9PgogIGZpbGUgPT4KICBmaWxlcyhyZXEsIHJlc3ApCiAgbiA9PgogIGZpbGVzMihyZXEsIHJlc3ApCm4gPT4KICBuID0+CiAgbiA9PgooYSwgYikgPT4KICBuYW1lID0+CiAgZmlsZSA9PgogIGZpbGUgPT4KKFtmaWxlLCByZWxdKSA9PgooYWNjLCBbZmlsZSwgc3RdKSA9PgogIHN0cmluZyhhLCBiKQogIG51bWJlcihhLCBiKQooW25hbWUsIG9ial0pID0+Cih7IG5hbWUgfSkgPT4KICBvbkNvbm5lY3Qod3MsIHJlcSkKICBzZW5kQ29tbWFuZChkYXRhKQogIG9uQ2xvc2Uod3MsIGNvZGUsIHJlYXNvbikKICBvblJlcXVlc3QocmVxLCByZXNwKQogIG9uT3BlbihuYW1lLCBmaWxlbmFtZSkKICBvbkNvbnRlbnQobmFtZSwgZGF0YSkKICBvbkNsb3NlKG5hbWUsIGZpbGUpCiAgZiA9IHggPT4KICByZXN1bHQgPT4KICBvbkZpbmFsaXplKCkKKG1hdGNoLCBwMSwgcDAsIHAyLCBwMywgb2Zmc2V0KSA9PgogIG9uTWVzc2FnZSh3cywgZGF0YSkKICBnZXQgY29ubmVjdGlvbnMoKQogIGdldCBieV91dWlkKCkKICB1dWlkKGRhdGEpCiAgb25GZChmZCwgcmQsIHdyKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgcXVpdCh3aHkpAAAAAAAAAAB0BwAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					9,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1814,
								1834
							],
							[
								2064,
								2069
							],
							[
								2074,
								2094
							],
							[
								2132,
								2139
							],
							[
								2176,
								2183
							],
							[
								2506,
								2514
							],
							[
								2532,
								2552
							],
							[
								2892,
								2925
							],
							[
								3015,
								3037
							],
							[
								3251,
								3292
							],
							[
								3303,
								3316
							],
							[
								3383,
								3418
							],
							[
								3463,
								3481
							],
							[
								3517,
								3559
							],
							[
								3625,
								3658
							],
							[
								3680,
								3684
							],
							[
								4074,
								4079
							],
							[
								4129,
								4133
							],
							[
								4160,
								4164
							],
							[
								4192,
								4196
							],
							[
								4220,
								4240
							],
							[
								4319,
								4323
							],
							[
								4393,
								4415
							],
							[
								4530,
								4535
							],
							[
								4569,
								4591
							],
							[
								4785,
								4807
							],
							[
								5230,
								5296
							],
							[
								5645,
								5654
							],
							[
								5761,
								5791
							],
							[
								6155,
								6190
							],
							[
								6222,
								6263
							],
							[
								6295,
								6361
							],
							[
								6394,
								6428
							],
							[
								6494,
								6541
							],
							[
								7079,
								7115
							],
							[
								7228,
								7237
							],
							[
								7473,
								7481
							],
							[
								7590,
								7597
							],
							[
								7649,
								7673
							],
							[
								7945,
								7956
							],
							[
								8046,
								8057
							],
							[
								8121,
								8132
							],
							[
								8186,
								8195
							],
							[
								8233,
								8244
							],
							[
								8333,
								8360
							],
							[
								8492,
								8496
							],
							[
								8520,
								8527
							],
							[
								8560,
								8576
							],
							[
								8705,
								8750
							],
							[
								8990,
								9048
							],
							[
								9378,
								9400
							],
							[
								9775,
								9785
							],
							[
								10029,
								10043
							],
							[
								10980,
								11004
							],
							[
								11130,
								11134
							],
							[
								11227,
								11241
							],
							[
								11331,
								11347
							],
							[
								11781,
								11794
							],
							[
								11812,
								11817
							],
							[
								11899,
								11906
							],
							[
								11934,
								11939
							],
							[
								12085,
								12110
							],
							[
								12285,
								12316
							],
							[
								12393,
								12404
							],
							[
								13990,
								14021
							],
							[
								14551,
								14584
							],
							[
								14856,
								14891
							],
							[
								14976,
								15009
							],
							[
								15942,
								15948
							],
							[
								17063,
								17067
							],
							[
								17964,
								17971
							],
							[
								19274,
								19306
							],
							[
								19687,
								19691
							],
							[
								20370,
								20405
							],
							[
								21167,
								21172
							],
							[
								21899,
								21903
							],
							[
								21997,
								22001
							],
							[
								22121,
								22130
							],
							[
								22260,
								22267
							],
							[
								22548,
								22555
							],
							[
								22636,
								22643
							],
							[
								22707,
								22723
							],
							[
								22788,
								22808
							],
							[
								23511,
								23523
							],
							[
								23622,
								23634
							],
							[
								23837,
								23853
							],
							[
								23947,
								23960
							],
							[
								24372,
								24390
							],
							[
								24572,
								24589
							],
							[
								25016,
								25041
							],
							[
								25207,
								25227
							],
							[
								26445,
								26467
							],
							[
								26940,
								26961
							],
							[
								27513,
								27532
							],
							[
								27966,
								27974
							],
							[
								28413,
								28422
							],
							[
								30889,
								30901
							],
							[
								32814,
								32849
							],
							[
								33347,
								33366
							],
							[
								33621,
								33638
							],
							[
								33683,
								33696
							],
							[
								33732,
								33742
							],
							[
								35219,
								35235
							],
							[
								35367,
								35386
							],
							[
								35397,
								35416
							],
							[
								35824,
								35844
							]
						],
						"symlist":
						[
							"isin = (other, p) =>",
							"Match",
							"constructor(pattern)",
							"apply()",
							"name =>",
							"value =>",
							" (level, message) =>",
							"async function AsyncCollect(iter)",
							"function GetMime(file)",
							"function Matcher(pattern, t = arg => arg)",
							" (...args) =>",
							"function KeyOrValueMatcher(pattern)",
							" ([key, value]) =>",
							"function GetRootDirectories(pattern = '*')",
							"MakeUUID = (rng = Math.random) =>",
							"n =>",
							"dd =>",
							"d =>",
							"d =>",
							"d =>",
							"function GetDir(dir)",
							"n =>",
							"function DirName(name)",
							"it =>",
							"function DateStr(date)",
							"function ModeStr(mode)",
							"HTMLPage = ({ title, style, scripts = [], children, ...props }) =>",
							"script =>",
							"FilterForm = ({ ...props }) =>",
							"HTMLTable = ({ rows, ...props }) =>",
							"HTMLTableRow = ({ columns, ...props }) =>",
							"HTMLTableColumn = ({ columns, children, tag = 'td', ...props }) =>",
							"FileLink = ({ file, ...props }) =>",
							"FileObject = ({ file, stat = {}, ...props }) =>",
							"FileTable = ({ files, ...props }) =>",
							"(a, b) =>",
							"field =>",
							"file =>",
							"function ReadExiv2(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function ReadExiftool(file)",
							"l =>",
							"line =>",
							"([line, idx]) =>",
							"function HeifConvert(src, dst, quality = 100)",
							"function MagickResize(src, dst, rotate = 0, width, height)",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							" function ParseBody(gen)",
							".createWS = (url, callbacks) =>",
							".out = s =>",
							"async function* test(req, resp)",
							" function proxy(req, resp)",
							" function* config(req, resp)",
							" function* file(req, resp)",
							"dir =>",
							"x =>",
							"file =>",
							"async function* files(req, resp)",
							"n =>",
							" function* files2(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file, rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"({ name }) =>",
							"onConnect(ws, req)",
							"sendCommand(data)",
							"onClose(ws, code, reason)",
							"onRequest(req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name, file)",
							"f = x =>",
							"result =>",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB0BwAAICBpc2luID0gKG90aGVyLCBwKSA9PgpNYXRjaAogIGNvbnN0cnVjdG9yKHBhdHRlcm4pCiAgYXBwbHkoKQogIG5hbWUgPT4KICB2YWx1ZSA9PgoobGV2ZWwsIG1lc3NhZ2UpID0+CkFzeW5jQ29sbGVjdChpdGVyKQpHZXRNaW1lKGZpbGUpCk1hdGNoZXIocGF0dGVybiwgdCA9IGFyZyA9PiBhcmcpCiguLi5hcmdzKSA9PgpLZXlPclZhbHVlTWF0Y2hlcihwYXR0ZXJuKQooW2tleSwgdmFsdWVdKSA9PgpHZXRSb290RGlyZWN0b3JpZXMocGF0dGVybiA9ICcqJykKTWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+CiAgbiA9PgogIGRkID0+CiAgZCA9PgogIGQgPT4KICBkID0+CkdldERpcihkaXIpCiAgbiA9PgpEaXJOYW1lKG5hbWUpCiAgaXQgPT4KRGF0ZVN0cihkYXRlKQpNb2RlU3RyKG1vZGUpCkhUTUxQYWdlID0gKHsgdGl0bGUsIHN0eWxlLCBzY3JpcHRzID0gW10sIGNoaWxkcmVuLCAuLi5wcm9wcyB9KSA9PgogIHNjcmlwdCA9PgpGaWx0ZXJGb3JtID0gKHsgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlID0gKHsgcm93cywgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlUm93ID0gKHsgY29sdW1ucywgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlQ29sdW1uID0gKHsgY29sdW1ucywgY2hpbGRyZW4sIHRhZyA9ICd0ZCcsIC4uLnByb3BzIH0pID0+CkZpbGVMaW5rID0gKHsgZmlsZSwgLi4ucHJvcHMgfSkgPT4KRmlsZU9iamVjdCA9ICh7IGZpbGUsIHN0YXQgPSB7fSwgLi4ucHJvcHMgfSkgPT4KRmlsZVRhYmxlID0gKHsgZmlsZXMsIC4uLnByb3BzIH0pID0+CihhLCBiKSA9PgogIGZpZWxkID0+CiAgZmlsZSA9PgpSZWFkRXhpdjIoZmlsZSkKKFtrLCB2XSkgPT4KKFtrLCB2XSkgPT4KKFtrLCB2XSkgPT4KKGEsIGIpID0+Cihbaywgdl0pID0+ClJlYWRFeGlmdG9vbChmaWxlKQogIGwgPT4KICBsaW5lID0+CihbbGluZSwgaWR4XSkgPT4KSGVpZkNvbnZlcnQoc3JjLCBkc3QsIHF1YWxpdHkgPSAxMDApCk1hZ2lja1Jlc2l6ZShzcmMsIGRzdCwgcm90YXRlID0gMCwgd2lkdGgsIGhlaWdodCkKICBtYWluKC4uLmFyZ3MpCihhLCB2KSA9PgoodiwgcHYsIG8pID0+Cihtb2R1bGUsIC4uLmFyZ3MpID0+CiAgbSA9PgogIC5zaG93ID0gYXJnID0+CiAgLmNsZWFudXAgPSAoKSA9PgooLi4uYXJncykgPT4KKCkgPT4KICBwdXRzKHMpCigpID0+ClBhcnNlQm9keShnZW4pCiAgLmNyZWF0ZVdTID0gKHVybCwgY2FsbGJhY2tzKSA9PgogIC5vdXQgPSBzID0+CiAgdGVzdChyZXEsIHJlc3ApCiAgcHJveHkocmVxLCByZXNwKQogIGNvbmZpZyhyZXEsIHJlc3ApCiAgZmlsZShyZXEsIHJlc3ApCiAgZGlyID0+CiAgeCA9PgogIGZpbGUgPT4KICBmaWxlcyhyZXEsIHJlc3ApCiAgbiA9PgogIGZpbGVzMihyZXEsIHJlc3ApCm4gPT4KICBuID0+CiAgbiA9PgooYSwgYikgPT4KICBuYW1lID0+CiAgZmlsZSA9PgogIGZpbGUgPT4KKFtmaWxlLCByZWxdKSA9PgooYWNjLCBbZmlsZSwgc3RdKSA9PgogIHN0cmluZyhhLCBiKQogIG51bWJlcihhLCBiKQooW25hbWUsIG9ial0pID0+Cih7IG5hbWUgfSkgPT4KICBvbkNvbm5lY3Qod3MsIHJlcSkKICBzZW5kQ29tbWFuZChkYXRhKQogIG9uQ2xvc2Uod3MsIGNvZGUsIHJlYXNvbikKICBvblJlcXVlc3QocmVxLCByZXNwKQogIG9uT3BlbihuYW1lLCBmaWxlbmFtZSkKICBvbkNvbnRlbnQobmFtZSwgZGF0YSkKICBvbkNsb3NlKG5hbWUsIGZpbGUpCiAgZiA9IHggPT4KICByZXN1bHQgPT4KICBvbkZpbmFsaXplKCkKKG1hdGNoLCBwMSwgcDAsIHAyLCBwMywgb2Zmc2V0KSA9PgogIG9uTWVzc2FnZSh3cywgZGF0YSkKICBnZXQgY29ubmVjdGlvbnMoKQogIGdldCBieV91dWlkKCkKICB1dWlkKGRhdGEpCiAgb25GZChmZCwgcmQsIHdyKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgcXVpdCh3aHkpAAAAAAAAAAB0BwAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					12,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/upload-server.js",
						"symkeys":
						[
							[
								1814,
								1834
							],
							[
								2064,
								2069
							],
							[
								2074,
								2094
							],
							[
								2132,
								2139
							],
							[
								2176,
								2183
							],
							[
								2506,
								2514
							],
							[
								2532,
								2552
							],
							[
								2892,
								2925
							],
							[
								3015,
								3037
							],
							[
								3251,
								3292
							],
							[
								3303,
								3316
							],
							[
								3383,
								3418
							],
							[
								3463,
								3481
							],
							[
								3517,
								3559
							],
							[
								3625,
								3658
							],
							[
								3680,
								3684
							],
							[
								4074,
								4079
							],
							[
								4129,
								4133
							],
							[
								4160,
								4164
							],
							[
								4192,
								4196
							],
							[
								4220,
								4240
							],
							[
								4319,
								4323
							],
							[
								4393,
								4415
							],
							[
								4530,
								4535
							],
							[
								4569,
								4591
							],
							[
								4785,
								4807
							],
							[
								5230,
								5296
							],
							[
								5645,
								5654
							],
							[
								5761,
								5791
							],
							[
								6155,
								6190
							],
							[
								6222,
								6263
							],
							[
								6295,
								6361
							],
							[
								6394,
								6428
							],
							[
								6494,
								6541
							],
							[
								7079,
								7115
							],
							[
								7228,
								7237
							],
							[
								7473,
								7481
							],
							[
								7590,
								7597
							],
							[
								7649,
								7673
							],
							[
								7945,
								7956
							],
							[
								8046,
								8057
							],
							[
								8121,
								8132
							],
							[
								8186,
								8195
							],
							[
								8233,
								8244
							],
							[
								8333,
								8360
							],
							[
								8492,
								8496
							],
							[
								8520,
								8527
							],
							[
								8560,
								8576
							],
							[
								8705,
								8750
							],
							[
								8990,
								9048
							],
							[
								9378,
								9400
							],
							[
								9775,
								9785
							],
							[
								10029,
								10043
							],
							[
								10980,
								11004
							],
							[
								11130,
								11134
							],
							[
								11227,
								11241
							],
							[
								11331,
								11347
							],
							[
								11781,
								11794
							],
							[
								11812,
								11817
							],
							[
								11899,
								11906
							],
							[
								11934,
								11939
							],
							[
								12085,
								12110
							],
							[
								12285,
								12316
							],
							[
								12393,
								12404
							],
							[
								13990,
								14021
							],
							[
								14551,
								14584
							],
							[
								14856,
								14891
							],
							[
								14976,
								15009
							],
							[
								15942,
								15948
							],
							[
								17063,
								17067
							],
							[
								17964,
								17971
							],
							[
								19274,
								19306
							],
							[
								19687,
								19691
							],
							[
								20370,
								20405
							],
							[
								21167,
								21172
							],
							[
								21899,
								21903
							],
							[
								21997,
								22001
							],
							[
								22121,
								22130
							],
							[
								22260,
								22267
							],
							[
								22548,
								22555
							],
							[
								22636,
								22643
							],
							[
								22707,
								22723
							],
							[
								22788,
								22808
							],
							[
								23511,
								23523
							],
							[
								23622,
								23634
							],
							[
								23837,
								23853
							],
							[
								23947,
								23960
							],
							[
								24372,
								24390
							],
							[
								24572,
								24589
							],
							[
								25016,
								25041
							],
							[
								25207,
								25227
							],
							[
								26445,
								26467
							],
							[
								26940,
								26961
							],
							[
								27513,
								27532
							],
							[
								27966,
								27974
							],
							[
								28413,
								28422
							],
							[
								30889,
								30901
							],
							[
								32814,
								32849
							],
							[
								33347,
								33366
							],
							[
								33621,
								33638
							],
							[
								33683,
								33696
							],
							[
								33732,
								33742
							],
							[
								35219,
								35235
							],
							[
								35367,
								35386
							],
							[
								35397,
								35416
							],
							[
								35824,
								35844
							]
						],
						"symlist":
						[
							"isin = (other, p) =>",
							"Match",
							"constructor(pattern)",
							"apply()",
							"name =>",
							"value =>",
							" (level, message) =>",
							"async function AsyncCollect(iter)",
							"function GetMime(file)",
							"function Matcher(pattern, t = arg => arg)",
							" (...args) =>",
							"function KeyOrValueMatcher(pattern)",
							" ([key, value]) =>",
							"function GetRootDirectories(pattern = '*')",
							"MakeUUID = (rng = Math.random) =>",
							"n =>",
							"dd =>",
							"d =>",
							"d =>",
							"d =>",
							"function GetDir(dir)",
							"n =>",
							"function DirName(name)",
							"it =>",
							"function DateStr(date)",
							"function ModeStr(mode)",
							"HTMLPage = ({ title, style, scripts = [], children, ...props }) =>",
							"script =>",
							"FilterForm = ({ ...props }) =>",
							"HTMLTable = ({ rows, ...props }) =>",
							"HTMLTableRow = ({ columns, ...props }) =>",
							"HTMLTableColumn = ({ columns, children, tag = 'td', ...props }) =>",
							"FileLink = ({ file, ...props }) =>",
							"FileObject = ({ file, stat = {}, ...props }) =>",
							"FileTable = ({ files, ...props }) =>",
							"(a, b) =>",
							"field =>",
							"file =>",
							"function ReadExiv2(file)",
							"([k, v]) =>",
							"([k, v]) =>",
							"([k, v]) =>",
							"(a, b) =>",
							"([k, v]) =>",
							"function ReadExiftool(file)",
							"l =>",
							"line =>",
							"([line, idx]) =>",
							"function HeifConvert(src, dst, quality = 100)",
							"function MagickResize(src, dst, rotate = 0, width, height)",
							"function main(...args)",
							" (a, v) =>",
							" (v, pv, o) =>",
							" (module, ...args) =>",
							"m =>",
							".show = arg =>",
							".cleanup = () =>",
							" (...args) =>",
							"() =>",
							"puts(s)",
							"() =>",
							" function ParseBody(gen)",
							".createWS = (url, callbacks) =>",
							".out = s =>",
							"async function* test(req, resp)",
							" function proxy(req, resp)",
							" function* config(req, resp)",
							" function* file(req, resp)",
							"dir =>",
							"x =>",
							"file =>",
							"async function* files(req, resp)",
							"n =>",
							" function* files2(req, resp)",
							" n =>",
							"n =>",
							"n =>",
							"(a, b) =>",
							"name =>",
							"file =>",
							"file =>",
							"([file, rel]) =>",
							"(acc, [file, st]) =>",
							"string(a, b)",
							"number(a, b)",
							"([name, obj]) =>",
							"({ name }) =>",
							"onConnect(ws, req)",
							"sendCommand(data)",
							"onClose(ws, code, reason)",
							"onRequest(req, resp)",
							"onOpen(name, filename)",
							"onContent(name, data)",
							"onClose(name, file)",
							"f = x =>",
							"result =>",
							"onFinalize()",
							" (match, p1, p0, p2, p3, offset) =>",
							"onMessage(ws, data)",
							"get connections()",
							"get by_uuid()",
							"uuid(data)",
							"onFd(fd, rd, wr)",
							"onClose(ws, reason)",
							"onMessage(ws, data)",
							" function quit(why)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB0BwAAICBpc2luID0gKG90aGVyLCBwKSA9PgpNYXRjaAogIGNvbnN0cnVjdG9yKHBhdHRlcm4pCiAgYXBwbHkoKQogIG5hbWUgPT4KICB2YWx1ZSA9PgoobGV2ZWwsIG1lc3NhZ2UpID0+CkFzeW5jQ29sbGVjdChpdGVyKQpHZXRNaW1lKGZpbGUpCk1hdGNoZXIocGF0dGVybiwgdCA9IGFyZyA9PiBhcmcpCiguLi5hcmdzKSA9PgpLZXlPclZhbHVlTWF0Y2hlcihwYXR0ZXJuKQooW2tleSwgdmFsdWVdKSA9PgpHZXRSb290RGlyZWN0b3JpZXMocGF0dGVybiA9ICcqJykKTWFrZVVVSUQgPSAocm5nID0gTWF0aC5yYW5kb20pID0+CiAgbiA9PgogIGRkID0+CiAgZCA9PgogIGQgPT4KICBkID0+CkdldERpcihkaXIpCiAgbiA9PgpEaXJOYW1lKG5hbWUpCiAgaXQgPT4KRGF0ZVN0cihkYXRlKQpNb2RlU3RyKG1vZGUpCkhUTUxQYWdlID0gKHsgdGl0bGUsIHN0eWxlLCBzY3JpcHRzID0gW10sIGNoaWxkcmVuLCAuLi5wcm9wcyB9KSA9PgogIHNjcmlwdCA9PgpGaWx0ZXJGb3JtID0gKHsgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlID0gKHsgcm93cywgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlUm93ID0gKHsgY29sdW1ucywgLi4ucHJvcHMgfSkgPT4KSFRNTFRhYmxlQ29sdW1uID0gKHsgY29sdW1ucywgY2hpbGRyZW4sIHRhZyA9ICd0ZCcsIC4uLnByb3BzIH0pID0+CkZpbGVMaW5rID0gKHsgZmlsZSwgLi4ucHJvcHMgfSkgPT4KRmlsZU9iamVjdCA9ICh7IGZpbGUsIHN0YXQgPSB7fSwgLi4ucHJvcHMgfSkgPT4KRmlsZVRhYmxlID0gKHsgZmlsZXMsIC4uLnByb3BzIH0pID0+CihhLCBiKSA9PgogIGZpZWxkID0+CiAgZmlsZSA9PgpSZWFkRXhpdjIoZmlsZSkKKFtrLCB2XSkgPT4KKFtrLCB2XSkgPT4KKFtrLCB2XSkgPT4KKGEsIGIpID0+Cihbaywgdl0pID0+ClJlYWRFeGlmdG9vbChmaWxlKQogIGwgPT4KICBsaW5lID0+CihbbGluZSwgaWR4XSkgPT4KSGVpZkNvbnZlcnQoc3JjLCBkc3QsIHF1YWxpdHkgPSAxMDApCk1hZ2lja1Jlc2l6ZShzcmMsIGRzdCwgcm90YXRlID0gMCwgd2lkdGgsIGhlaWdodCkKICBtYWluKC4uLmFyZ3MpCihhLCB2KSA9PgoodiwgcHYsIG8pID0+Cihtb2R1bGUsIC4uLmFyZ3MpID0+CiAgbSA9PgogIC5zaG93ID0gYXJnID0+CiAgLmNsZWFudXAgPSAoKSA9PgooLi4uYXJncykgPT4KKCkgPT4KICBwdXRzKHMpCigpID0+ClBhcnNlQm9keShnZW4pCiAgLmNyZWF0ZVdTID0gKHVybCwgY2FsbGJhY2tzKSA9PgogIC5vdXQgPSBzID0+CiAgdGVzdChyZXEsIHJlc3ApCiAgcHJveHkocmVxLCByZXNwKQogIGNvbmZpZyhyZXEsIHJlc3ApCiAgZmlsZShyZXEsIHJlc3ApCiAgZGlyID0+CiAgeCA9PgogIGZpbGUgPT4KICBmaWxlcyhyZXEsIHJlc3ApCiAgbiA9PgogIGZpbGVzMihyZXEsIHJlc3ApCm4gPT4KICBuID0+CiAgbiA9PgooYSwgYikgPT4KICBuYW1lID0+CiAgZmlsZSA9PgogIGZpbGUgPT4KKFtmaWxlLCByZWxdKSA9PgooYWNjLCBbZmlsZSwgc3RdKSA9PgogIHN0cmluZyhhLCBiKQogIG51bWJlcihhLCBiKQooW25hbWUsIG9ial0pID0+Cih7IG5hbWUgfSkgPT4KICBvbkNvbm5lY3Qod3MsIHJlcSkKICBzZW5kQ29tbWFuZChkYXRhKQogIG9uQ2xvc2Uod3MsIGNvZGUsIHJlYXNvbikKICBvblJlcXVlc3QocmVxLCByZXNwKQogIG9uT3BlbihuYW1lLCBmaWxlbmFtZSkKICBvbkNvbnRlbnQobmFtZSwgZGF0YSkKICBvbkNsb3NlKG5hbWUsIGZpbGUpCiAgZiA9IHggPT4KICByZXN1bHQgPT4KICBvbkZpbmFsaXplKCkKKG1hdGNoLCBwMSwgcDAsIHAyLCBwMywgb2Zmc2V0KSA9PgogIG9uTWVzc2FnZSh3cywgZGF0YSkKICBnZXQgY29ubmVjdGlvbnMoKQogIGdldCBieV91dWlkKCkKICB1dWlkKGRhdGEpCiAgb25GZChmZCwgcmQsIHdyKQogIG9uQ2xvc2Uod3MsIHJlYXNvbikKICBvbk1lc3NhZ2Uod3MsIGRhdGEpCiAgcXVpdCh3aHkpAAAAAAAAAAB0BwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMwEAAAAAAAAzAQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "upload-server.js",
			"settings":
			{
				"buffer_size": 36171,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					26,
					1,
					"insert",
					{
						"characters": "\nif"
					},
					"BQAAAN+BAAAAAAAA4IEAAAAAAAAAAAAA4IEAAAAAAADmgQAAAAAAAAAAAADmgQAAAAAAAOiBAAAAAAAAAAAAAOiBAAAAAAAA6YEAAAAAAAAAAAAA6YEAAAAAAADqgQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN+BAAAAAAAA34EAAAAAAAAAAAAAAADwvw"
				],
				[
					27,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAOqBAAAAAAAA7IEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOqBAAAAAAAA6oEAAAAAAAAAAAAAAADwvw"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": "typeof"
					},
					"BgAAAOuBAAAAAAAA7IEAAAAAAAAAAAAA7IEAAAAAAADtgQAAAAAAAAAAAADtgQAAAAAAAO6BAAAAAAAAAAAAAO6BAAAAAAAA74EAAAAAAAAAAAAA74EAAAAAAADwgQAAAAAAAAAAAADwgQAAAAAAAPGBAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOuBAAAAAAAA64EAAAAAAAAAAAAAAADwvw"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": " data"
					},
					"BQAAAPGBAAAAAAAA8oEAAAAAAAAAAAAA8oEAAAAAAADzgQAAAAAAAAAAAADzgQAAAAAAAPSBAAAAAAAAAAAAAPSBAAAAAAAA9YEAAAAAAAAAAAAA9YEAAAAAAAD2gQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPGBAAAAAAAA8YEAAAAAAAAAAAAAAADwvw"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": " !="
					},
					"AwAAAPaBAAAAAAAA94EAAAAAAAAAAAAA94EAAAAAAAD4gQAAAAAAAAAAAAD4gQAAAAAAAPmBAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPaBAAAAAAAA9oEAAAAAAAAAAAAAAADwvw"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPmBAAAAAAAA+oEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPmBAAAAAAAA+YEAAAAAAAAAAAAAAADwvw"
				],
				[
					32,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAPqBAAAAAAAA/IEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPqBAAAAAAAA+oEAAAAAAAAAAAAAAADwvw"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": "strien"
					},
					"BgAAAPuBAAAAAAAA/IEAAAAAAAAAAAAA/IEAAAAAAAD9gQAAAAAAAAAAAAD9gQAAAAAAAP6BAAAAAAAAAAAAAP6BAAAAAAAA/4EAAAAAAAAAAAAA/4EAAAAAAAAAggAAAAAAAAAAAAAAggAAAAAAAAGCAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPuBAAAAAAAA+4EAAAAAAAAAAAAAAADwvw"
				],
				[
					34,
					2,
					"left_delete",
					null,
					"AgAAAACCAAAAAAAAAIIAAAAAAAABAAAAbv+BAAAAAAAA/4EAAAAAAAABAAAAZQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAGCAAAAAAAAAYIAAAAAAAAAAAAAAADwvw"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "ng"
					},
					"AgAAAP+BAAAAAAAAAIIAAAAAAAAAAAAAAIIAAAAAAAABggAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP+BAAAAAAAA/4EAAAAAAAAAAAAAAADwvw"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": "\ntoString"
					},
					"DAAAAAOCAAAAAAAABIIAAAAAAAAAAAAABIIAAAAAAAAMggAAAAAAAAAAAAAEggAAAAAAAASCAAAAAAAACAAAACAgICAgICAgBIIAAAAAAAAOggAAAAAAAAAAAAAOggAAAAAAAA+CAAAAAAAAAAAAAA+CAAAAAAAAEIIAAAAAAAAAAAAAEIIAAAAAAAARggAAAAAAAAAAAAARggAAAAAAABKCAAAAAAAAAAAAABKCAAAAAAAAE4IAAAAAAAAAAAAAE4IAAAAAAAAUggAAAAAAAAAAAAAUggAAAAAAABWCAAAAAAAAAAAAABWCAAAAAAAAFoIAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAOCAAAAAAAAA4IAAAAAAAAAAAAAAADwvw"
				],
				[
					38,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAABaCAAAAAAAAGIIAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABaCAAAAAAAAFoIAAAAAAAAAAAAAAADwvw"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": "data"
					},
					"BAAAABeCAAAAAAAAGIIAAAAAAAAAAAAAGIIAAAAAAAAZggAAAAAAAAAAAAAZggAAAAAAABqCAAAAAAAAAAAAABqCAAAAAAAAG4IAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABeCAAAAAAAAF4IAAAAAAAAAAAAAAADwvw"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAByCAAAAAAAAHYIAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAByCAAAAAAAAHIIAAAAAAAAAAAAAAADwvw"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": "data="
					},
					"BQAAAA6CAAAAAAAAD4IAAAAAAAAAAAAAD4IAAAAAAAAQggAAAAAAAAAAAAAQggAAAAAAABGCAAAAAAAAAAAAABGCAAAAAAAAEoIAAAAAAAAAAAAAEoIAAAAAAAATggAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA6CAAAAAAAADoIAAAAAAAAAAAAAAIBWQA"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAACKCAAAAAAAAI4IAAAAAAAAAAAAAI4IAAAAAAAAtggAAAAAAAAAAAAAjggAAAAAAACOCAAAAAAAACgAAACAgICAgICAgICAjggAAAAAAACuCAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACKCAAAAAAAAIoIAAAAAAAD////////vfw"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAABKCAAAAAAAAE4IAAAAAAAAAAAAAJIIAAAAAAAAkggAAAAAAAAgAAAAgICAgICAgIA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABKCAAAAAAAAEoIAAAAAAAAAAAAAAADwvw"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABSCAAAAAAAAFYIAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABSCAAAAAAAAFIIAAAAAAAAAAAAAAADwvw"
				],
				[
					56,
					1,
					"insert_snippet",
					{
						"contents": "`$0`"
					},
					"AQAAAFKCAAAAAAAAVIIAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFKCAAAAAAAAUoIAAAAAAAAAAAAAAADwvw"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAFOCAAAAAAAAVIIAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFOCAAAAAAAAU4IAAAAAAAAAAAAAAADwvw"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": " data"
					},
					"BQAAAFSCAAAAAAAAVYIAAAAAAAAAAAAAVYIAAAAAAABWggAAAAAAAAAAAABWggAAAAAAAFeCAAAAAAAAAAAAAFeCAAAAAAAAWIIAAAAAAAAAAAAAWIIAAAAAAABZggAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFSCAAAAAAAAVIIAAAAAAAAAAAAAAADwvw"
				],
				[
					61,
					1,
					"left_delete",
					null,
					"AQAAAFmCAAAAAAAAWYIAAAAAAAAKAAAAYCAke2RhdGF9YA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFmCAAAAAAAAY4IAAAAAAAAAAAAAAADwvw"
				],
				[
					65,
					12,
					"right_delete",
					null,
					"DAAAAAOCAAAAAAAAA4IAAAAAAAABAAAACgOCAAAAAAAAA4IAAAAAAAABAAAAIAOCAAAAAAAAA4IAAAAAAAABAAAAIAOCAAAAAAAAA4IAAAAAAAABAAAAIAOCAAAAAAAAA4IAAAAAAAABAAAAIAOCAAAAAAAAA4IAAAAAAAABAAAAIAOCAAAAAAAAA4IAAAAAAAABAAAAIAOCAAAAAAAAA4IAAAAAAAABAAAAIAOCAAAAAAAAA4IAAAAAAAABAAAAIAOCAAAAAAAAA4IAAAAAAAABAAAAIAOCAAAAAAAAA4IAAAAAAAABAAAAIAOCAAAAAAAAA4IAAAAAAAABAAAAZA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAOCAAAAAAAAA4IAAAAAAAAAAAAAALB8QA"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": " d"
					},
					"AgAAAAOCAAAAAAAABIIAAAAAAAAAAAAABIIAAAAAAAAFggAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAOCAAAAAAAAA4IAAAAAAAAAAAAAAADwvw"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAOiBAAAAAAAA6YEAAAAAAAAAAAAA6YEAAAAAAADqgQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOiBAAAAAAAA6IEAAAAAAAAAAAAAAABSQA"
				],
				[
					86,
					1,
					"paste",
					null,
					"AQAAAKVhAAAAAAAA/WEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAClYQAAAAAAAKVhAAAAAAAAAAAAAAAA8L8"
				],
				[
					91,
					1,
					"insert",
					{
						"characters": "Close"
					},
					"BgAAAMlhAAAAAAAAymEAAAAAAAAAAAAAymEAAAAAAADKYQAAAAAAAAcAAABDb25uZWN0ymEAAAAAAADLYQAAAAAAAAAAAADLYQAAAAAAAMxhAAAAAAAAAAAAAMxhAAAAAAAAzWEAAAAAAAAAAAAAzWEAAAAAAADOYQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADJYQAAAAAAANBhAAAAAAAAAAAAAAAA8L8"
				],
				[
					93,
					5,
					"left_delete",
					null,
					"BQAAAMRhAAAAAAAAxGEAAAAAAAABAAAAM8NhAAAAAAAAw2EAAAAAAAABAAAAO8JhAAAAAAAAwmEAAAAAAAABAAAANcFhAAAAAAAAwWEAAAAAAAABAAAAO8BhAAAAAAAAwGEAAAAAAAABAAAAOA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADFYQAAAAAAAMVhAAAAAAAAAAAAAAAA8L8"
				],
				[
					94,
					1,
					"insert",
					{
						"characters": "1;"
					},
					"AgAAAMBhAAAAAAAAwWEAAAAAAAAAAAAAwWEAAAAAAADCYQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADAYQAAAAAAAMBhAAAAAAAAAAAAAAAA8L8"
				],
				[
					95,
					1,
					"left_delete",
					null,
					"AQAAAMFhAAAAAAAAwWEAAAAAAAABAAAAOw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADCYQAAAAAAAMJhAAAAAAAAAAAAAAAA8L8"
				],
				[
					96,
					1,
					"right_delete",
					null,
					"AQAAAMFhAAAAAAAAwWEAAAAAAAABAAAAMw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADBYQAAAAAAAMFhAAAAAAAAAAAAAAAA8L8"
				],
				[
					98,
					1,
					"insert",
					{
						"characters": "1M;"
					},
					"AwAAAL9hAAAAAAAAwGEAAAAAAAAAAAAAwGEAAAAAAADBYQAAAAAAAAAAAADBYQAAAAAAAMJhAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC/YQAAAAAAAL9hAAAAAAAAAAAAAAAA8L8"
				],
				[
					99,
					2,
					"left_delete",
					null,
					"AgAAAMFhAAAAAAAAwWEAAAAAAAABAAAAO8BhAAAAAAAAwGEAAAAAAAABAAAATQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADCYQAAAAAAAMJhAAAAAAAAAAAAAAAA8L8"
				],
				[
					100,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAMBhAAAAAAAAwWEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADAYQAAAAAAAMBhAAAAAAAAAAAAAAAA8L8"
				],
				[
					109,
					1,
					"insert",
					{
						"characters": "code,reason"
					},
					"DAAAANdhAAAAAAAA2GEAAAAAAAAAAAAA2GEAAAAAAADYYQAAAAAAAB0AAABhZGRyZXNzLCBwb3J0LCBwcm90b2NvbCwgdGxzINhhAAAAAAAA2WEAAAAAAAAAAAAA2WEAAAAAAADaYQAAAAAAAAAAAADaYQAAAAAAANthAAAAAAAAAAAAANthAAAAAAAA3GEAAAAAAAAAAAAA3GEAAAAAAADdYQAAAAAAAAAAAADdYQAAAAAAAN5hAAAAAAAAAAAAAN5hAAAAAAAA32EAAAAAAAAAAAAA32EAAAAAAADgYQAAAAAAAAAAAADgYQAAAAAAAOFhAAAAAAAAAAAAAOFhAAAAAAAA4mEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADXYQAAAAAAAPRhAAAAAAAAAAAAAAAA8L8"
				],
				[
					112,
					1,
					"insert",
					{
						"characters": "code,"
					},
					"BQAAAJZhAAAAAAAAl2EAAAAAAAAAAAAAl2EAAAAAAACYYQAAAAAAAAAAAACYYQAAAAAAAJlhAAAAAAAAAAAAAJlhAAAAAAAAmmEAAAAAAAAAAAAAmmEAAAAAAACbYQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACWYQAAAAAAAJZhAAAAAAAAAAAAAAAA8L8"
				],
				[
					120,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAOphAAAAAAAA62EAAAAAAAAAAAAA62EAAAAAAAD3YQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADqYQAAAAAAAOphAAAAAAAA////////738"
				],
				[
					125,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD3YQAAAAAAAPdhAAAAAAAAAAAAAAAA8L8"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"camel",
				"Convert Case: camelCase"
			],
			[
				"came",
				"Convert Case: camelCase"
			],
			[
				"case ",
				"Convert Case: camelCase"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"doxy",
				"DoxyDoxygen: Comment All"
			],
			[
				"",
				":$ - EOF"
			],
			[
				"format",
				"JsPrettier: Format Code"
			],
			[
				"prett",
				"JsPrettier: Format Code"
			],
			[
				"ou",
				"Browse Mode: Outline (Right)"
			],
			[
				"instga",
				"Package Control: Install Package"
			],
			[
				"prettier",
				"JsPrettier: Format Code"
			],
			[
				"json",
				"Pretty JSON: Minify JSON"
			],
			[
				"jspr",
				"JsPrettier: Format Code"
			],
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"color",
				"Color Highlight: Reset"
			],
			[
				"scheme",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"edit cu",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"install pac",
				"Package Control: Install Package"
			],
			[
				"list pack",
				"Package Control: List Packages"
			],
			[
				"edit ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"edit",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"outli",
				"Browse Mode: Outline (Right)"
			],
			[
				"debugger",
				"Preferences: Debugger Settings"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"INSTALL",
				"Package Control: Install Package"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"adap",
				"Debugger: Install Adapters"
			],
			[
				"install ada",
				"Debugger: Install Adapters"
			],
			[
				"adapter",
				"Debugger: Install Adapters"
			],
			[
				"debug",
				"Debugger: Install Adapters"
			],
			[
				"Package Control: remove",
				"Package Control: Remove Package"
			],
			[
				"debu",
				"Debugger: Install Adapters"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 289.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/qjs-lws.sublime-project",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-x509.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-purify.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-writeable.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-ws-state.h",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lws.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lws-socket.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lws-socket.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/test.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lws-context.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-client.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-http.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/core/context.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/roles/http/server/server.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-callbacks.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-misc.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lws.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/test-client.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lws-context.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-html.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/roles/ws/server-ws.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/README.md",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-logs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/lws-spa.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/list.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-lwsac.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/roles/http/server/lws-spa.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-spa.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-context-vhost.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/system/async-dns/async-dns.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/misc/base64-decode.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/minimal-examples-lowlevel/ws-server/minimal-ws-raw-proxy/minimal-ws-raw-proxy.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/minimal-examples-lowlevel/http-client/minimal-http-client/minimal-http-client.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/plugins/acme-client/protocol_lws_acme_client.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/tls/openssl/openssl-client.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/tls/private-network.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/tls/tls-client.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/core-net/vhost.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/minimal-examples-lowlevel/http-client/minimal-http-client-post/minimal-http-client-post.c",
		"/home/roman/Projects/plot-cv/quickjs/list.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/localhost.key",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/minimal-examples-lowlevel/ws-server/minimal-ws-server-threadpool/minimal-ws-server-threadpool.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/minimal-examples-lowlevel/http-client/minimal-http-client-h2-rxflow/minimal-http-client.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/core-net/private-lib-core-net.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/roles/http/client/client-http.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/minimal-examples-lowlevel/raw/minimal-raw-fallback-http-server/localhost-100y.key",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/minimal-examples-lowlevel/raw/minimal-raw-fallback-http-server/README.md",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/minimal-examples-lowlevel/raw/minimal-raw-fallback-http-server/minimal-raw-fallback-http-server.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/minimal-examples-lowlevel/http-client/minimal-http-client-certinfo/README.md",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/minimal-examples-lowlevel/http-client/minimal-http-client/README.md",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/minimal-examples-lowlevel/crypto/minimal-crypto-jws/README.md",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/minimal-examples-lowlevel/client-server/README.md",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/minimal-examples-lowlevel/raw/minimal-raw-file/README.md",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-libc.cx",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-state.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/minimal-examples-lowlevel/http-client/minimal-http-client-captive-portal/minimal-http-client-captive-portal.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/roles/ws/ops-ws.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-write.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-protocols-plugins.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/secure-streams/protocols/ss-h1.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/roles/h1/ops-h1.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-ws-close.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-eventlib-exports.h",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-libc.c",
		"/home/roman/main.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-network-helper.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/core-net/wsi.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/gmon.out",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/minimal-examples-lowlevel/http-server/minimal-http-server-form-post-file/minimal-http-server-form-post-file.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/minimal-examples-lowlevel/http-server/minimal-http-server-dynamic/minimal-http-server-dynamic.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/plugins/deaddrop/protocol_lws_deaddrop.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-adopt.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-async-dns.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/lib/roles/ws/private-lib-roles-ws.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/minimal-examples-lowlevel/http-server/minimal-http-server-sse-ring/minimal-http-server-sse-ring.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-netdev.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-lws/libwebsockets/include/libwebsockets/lws-system.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/events.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/web-platform-tests-streams/shared-storage/resources/util.sub.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/console.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-repeater.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/property-enumeration.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/buffer-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/qjsm.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/io.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/js-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/stream-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/queue.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-mysql.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-blob.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fs.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/async-closure.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/misc.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/xpath.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/xml.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-textcode.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/ringbuffer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/inotify.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/extendObject.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/ringbuffer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/js-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/streams.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake/functions.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/defines.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/async-closure.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/buffer-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fsPromises.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-syscallerror.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-syscallerror.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/web-platform-tests-streams/editing/crashtests/make-editable-div-inline-and-set-contenteditable-of-input-to-false.html",
		"/home/roman/Projects/plot-cv/quickjs.h"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 138.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"peer, add",
			"onConnect",
			"[`'\"]onMessage",
			"'onMessage",
			"onMessage",
			"onConnect",
			"onClose",
			"onMessage",
			"rpc"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1908,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": "/home/roman/Projects/plot-cv/upload-server.js",
							"function_name_status_row": 16,
							"outline_rename_mode": false,
							"symkeys":
							[
								[
									1814,
									1834
								],
								[
									2064,
									2069
								],
								[
									2074,
									2094
								],
								[
									2132,
									2139
								],
								[
									2176,
									2183
								],
								[
									2506,
									2514
								],
								[
									2532,
									2552
								],
								[
									2892,
									2925
								],
								[
									3015,
									3037
								],
								[
									3251,
									3292
								],
								[
									3303,
									3316
								],
								[
									3383,
									3418
								],
								[
									3463,
									3481
								],
								[
									3517,
									3559
								],
								[
									3625,
									3658
								],
								[
									3680,
									3684
								],
								[
									4074,
									4079
								],
								[
									4129,
									4133
								],
								[
									4160,
									4164
								],
								[
									4192,
									4196
								],
								[
									4220,
									4240
								],
								[
									4319,
									4323
								],
								[
									4393,
									4415
								],
								[
									4530,
									4535
								],
								[
									4569,
									4591
								],
								[
									4785,
									4807
								],
								[
									5230,
									5296
								],
								[
									5645,
									5654
								],
								[
									5761,
									5791
								],
								[
									6155,
									6190
								],
								[
									6222,
									6263
								],
								[
									6295,
									6361
								],
								[
									6394,
									6428
								],
								[
									6494,
									6541
								],
								[
									7079,
									7115
								],
								[
									7228,
									7237
								],
								[
									7473,
									7481
								],
								[
									7590,
									7597
								],
								[
									7649,
									7673
								],
								[
									7945,
									7956
								],
								[
									8046,
									8057
								],
								[
									8121,
									8132
								],
								[
									8186,
									8195
								],
								[
									8233,
									8244
								],
								[
									8333,
									8360
								],
								[
									8492,
									8496
								],
								[
									8520,
									8527
								],
								[
									8560,
									8576
								],
								[
									8705,
									8750
								],
								[
									8990,
									9048
								],
								[
									9378,
									9400
								],
								[
									9775,
									9785
								],
								[
									10029,
									10043
								],
								[
									10980,
									11004
								],
								[
									11130,
									11134
								],
								[
									11227,
									11241
								],
								[
									11331,
									11347
								],
								[
									11781,
									11794
								],
								[
									11812,
									11817
								],
								[
									11899,
									11906
								],
								[
									11934,
									11939
								],
								[
									12085,
									12110
								],
								[
									12285,
									12316
								],
								[
									12393,
									12404
								],
								[
									13990,
									14021
								],
								[
									14551,
									14584
								],
								[
									14856,
									14891
								],
								[
									14976,
									15009
								],
								[
									15942,
									15948
								],
								[
									17063,
									17067
								],
								[
									17964,
									17971
								],
								[
									19274,
									19306
								],
								[
									19687,
									19691
								],
								[
									20370,
									20405
								],
								[
									21167,
									21172
								],
								[
									21899,
									21903
								],
								[
									21997,
									22001
								],
								[
									22121,
									22130
								],
								[
									22260,
									22267
								],
								[
									22548,
									22555
								],
								[
									22636,
									22643
								],
								[
									22707,
									22723
								],
								[
									22788,
									22808
								],
								[
									23511,
									23523
								],
								[
									23622,
									23634
								],
								[
									23837,
									23853
								],
								[
									23947,
									23960
								],
								[
									24372,
									24390
								],
								[
									24572,
									24589
								],
								[
									25016,
									25041
								],
								[
									25207,
									25227
								],
								[
									26445,
									26467
								],
								[
									26940,
									26961
								],
								[
									27513,
									27532
								],
								[
									27966,
									27974
								],
								[
									28413,
									28422
								],
								[
									30889,
									30901
								],
								[
									32814,
									32849
								],
								[
									33347,
									33366
								],
								[
									33621,
									33638
								],
								[
									33683,
									33696
								],
								[
									33732,
									33742
								],
								[
									35219,
									35235
								],
								[
									35367,
									35386
								],
								[
									35397,
									35416
								],
								[
									35824,
									35844
								]
							],
							"symlist":
							[
								"  isin = (other, p) =>",
								"Match",
								"  constructor(pattern)",
								"  apply()",
								"  name =>",
								"  value =>",
								"(level, message) =>",
								"AsyncCollect(iter)",
								"GetMime(file)",
								"Matcher(pattern, t = arg => arg)",
								"(...args) =>",
								"KeyOrValueMatcher(pattern)",
								"([key, value]) =>",
								"GetRootDirectories(pattern = '*')",
								"MakeUUID = (rng = Math.random) =>",
								"  n =>",
								"  dd =>",
								"  d =>",
								"  d =>",
								"  d =>",
								"GetDir(dir)",
								"  n =>",
								"DirName(name)",
								"  it =>",
								"DateStr(date)",
								"ModeStr(mode)",
								"HTMLPage = ({ title, style, scripts = [], children, ...props }) =>",
								"  script =>",
								"FilterForm = ({ ...props }) =>",
								"HTMLTable = ({ rows, ...props }) =>",
								"HTMLTableRow = ({ columns, ...props }) =>",
								"HTMLTableColumn = ({ columns, children, tag = 'td', ...props }) =>",
								"FileLink = ({ file, ...props }) =>",
								"FileObject = ({ file, stat = {}, ...props }) =>",
								"FileTable = ({ files, ...props }) =>",
								"(a, b) =>",
								"  field =>",
								"  file =>",
								"ReadExiv2(file)",
								"([k, v]) =>",
								"([k, v]) =>",
								"([k, v]) =>",
								"(a, b) =>",
								"([k, v]) =>",
								"ReadExiftool(file)",
								"  l =>",
								"  line =>",
								"([line, idx]) =>",
								"HeifConvert(src, dst, quality = 100)",
								"MagickResize(src, dst, rotate = 0, width, height)",
								"  main(...args)",
								"(a, v) =>",
								"(v, pv, o) =>",
								"(module, ...args) =>",
								"  m =>",
								"  .show = arg =>",
								"  .cleanup = () =>",
								"(...args) =>",
								"() =>",
								"  puts(s)",
								"() =>",
								"ParseBody(gen)",
								"  .createWS = (url, callbacks) =>",
								"  .out = s =>",
								"  test(req, resp)",
								"  proxy(req, resp)",
								"  config(req, resp)",
								"  file(req, resp)",
								"  dir =>",
								"  x =>",
								"  file =>",
								"  files(req, resp)",
								"  n =>",
								"  files2(req, resp)",
								"n =>",
								"  n =>",
								"  n =>",
								"(a, b) =>",
								"  name =>",
								"  file =>",
								"  file =>",
								"([file, rel]) =>",
								"(acc, [file, st]) =>",
								"  string(a, b)",
								"  number(a, b)",
								"([name, obj]) =>",
								"({ name }) =>",
								"  onConnect(ws, req)",
								"  sendCommand(data)",
								"  onClose(ws, code, reason)",
								"  onRequest(req, resp)",
								"  onOpen(name, filename)",
								"  onContent(name, data)",
								"  onClose(name, file)",
								"  f = x =>",
								"  result =>",
								"  onFinalize()",
								"(match, p1, p0, p2, p3, offset) =>",
								"  onMessage(ws, data)",
								"  get connections()",
								"  get by_uuid()",
								"  uuid(data)",
								"  onFd(fd, rd, wr)",
								"  onClose(ws, reason)",
								"  onMessage(ws, data)",
								"  quit(why)"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1754205264.16,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "upload-server.js",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 36171,
						"regions":
						{
							"col_0087FFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										24474,
										24487
									],
									[
										32570,
										32583
									]
								],
								"scope": "col_0087FFFF"
							},
							"col_0087FFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_0087FFFF_circle.png",
								"regions":
								[
									[
										24453,
										24453
									],
									[
										32543,
										32543
									]
								],
								"scope": "col_gutter"
							},
							"col_00AFFFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										10808,
										10821
									]
								],
								"scope": "col_00AFFFFF"
							},
							"col_00AFFFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_00AFFFFF_circle.png",
								"regions":
								[
									[
										10761,
										10761
									]
								],
								"scope": "col_gutter"
							},
							"col_D700FFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										10784,
										10798
									]
								],
								"scope": "col_D700FFFF"
							},
							"col_D700FFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_D700FFFF_circle.png",
								"regions":
								[
									[
										10761,
										10761
									]
								],
								"scope": "col_gutter"
							},
							"col_DD0000FF":
							{
								"flags": 16,
								"regions":
								[
									[
										25065,
										25075
									]
								],
								"scope": "col_DD0000FF"
							},
							"col_DD0000FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_DD0000FF_circle.png",
								"regions":
								[
									[
										25044,
										25044
									]
								],
								"scope": "col_gutter"
							},
							"col_FFAF00FF":
							{
								"flags": 16,
								"regions":
								[
									[
										32357,
										32371
									]
								],
								"scope": "col_FFAF00FF"
							},
							"col_FFAF00FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FFAF00FF_circle.png",
								"regions":
								[
									[
										32326,
										32326
									]
								],
								"scope": "col_gutter"
							}
						},
						"selection":
						[
							[
								3781,
								3781
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 93,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1754205289.61,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 888.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 43.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.8,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "plot-cv.sublime-project",
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"upload-ser",
				"upload-server.js"
			],
			[
				"mirror",
				"libwebsockets/plugins/protocol_lws_mirror.c"
			],
			[
				"otocol_lws_raw_proxy.c",
				"libwebsockets/plugins/raw-proxy/protocol_lws_raw_proxy.c"
			],
			[
				"test-cli",
				"test-client.js"
			],
			[
				"lws-con",
				"lws-context.c"
			],
			[
				"test.js",
				"test.js"
			],
			[
				"lws-call",
				"libwebsockets/include/libwebsockets/lws-callbacks.h"
			],
			[
				"lws-sock",
				"lws-socket.c"
			],
			[
				"lws-ca",
				"libwebsockets/include/libwebsockets/lws-callbacks.h"
			],
			[
				"test-clie",
				"test-client.js"
			],
			[
				"lws-misc",
				"libwebsockets/include/libwebsockets/lws-misc.h"
			],
			[
				"lws-html",
				"libwebsockets/include/libwebsockets/lws-html.h"
			],
			[
				"lws-c",
				"libwebsockets/include/libwebsockets/lws-callbacks.h"
			],
			[
				"lws-soc",
				"lws-socket.c"
			],
			[
				"lws.h",
				"lws.h"
			],
			[
				"context.c",
				"libwebsockets/lib/core/context.c"
			],
			[
				"lws-conte",
				"lws-context.c"
			],
			[
				"lws-spa",
				"libwebsockets/lib/roles/http/server/lws-spa.c"
			],
			[
				"lws-sp",
				"libwebsockets/lib/roles/http/server/lws-spa.c"
			],
			[
				"lws.c",
				"lws.c"
			],
			[
				"quickj",
				"~/Projects/plot-cv/quickjs/quickjs.h"
			],
			[
				"lws-http",
				"libwebsockets/include/libwebsockets/lws-http.h"
			],
			[
				"spa.c",
				"lws-spa.c"
			],
			[
				"lws-so",
				"lws-socket.c"
			],
			[
				"lws-htt",
				"libwebsockets/include/libwebsockets/lws-http.h"
			],
			[
				"lws-client",
				"libwebsockets/include/libwebsockets/lws-client.h"
			],
			[
				"wsi-http",
				"libwebsockets/include/libwebsockets/lws-http.h"
			],
			[
				"quickjs.h",
				"~/Projects/plot-cv/quickjs/quickjs.h"
			],
			[
				"context",
				"libwebsockets/lib/core/context.c"
			],
			[
				"vhost",
				"libwebsockets/lib/core-net/vhost.c"
			],
			[
				"tls-clie",
				"libwebsockets/lib/tls/tls-client.c"
			],
			[
				"conte",
				"libwebsockets/lib/core/context.c"
			],
			[
				"context.",
				"libwebsockets/lib/core/context.c"
			],
			[
				"raw-fall",
				"libwebsockets/minimal-examples-lowlevel/raw/minimal-raw-fallback-http-server/minimal-raw-fallback-http-server.c"
			],
			[
				"lws-clie",
				"libwebsockets/include/libwebsockets/lws-client.h"
			],
			[
				"test-cl",
				"test-client.js"
			],
			[
				"lws-",
				"libwebsockets/include/libwebsockets/lws-state.h"
			],
			[
				"socket.h",
				"lws-socket.h"
			],
			[
				"lws-log",
				"libwebsockets/include/libwebsockets/lws-logs.h"
			],
			[
				"spa.h",
				"libwebsockets/include/libwebsockets/lws-spa.h"
			],
			[
				"server.c",
				"libwebsockets/lib/roles/http/server/server.c"
			],
			[
				"wsi.c",
				"libwebsockets/lib/core-net/wsi.c"
			],
			[
				"lws-vho",
				"libwebsockets/include/libwebsockets/lws-context-vhost.h"
			],
			[
				"lws-context-v",
				"libwebsockets/include/libwebsockets/lws-context-vhost.h"
			],
			[
				"util.js",
				"lib/util.js"
			],
			[
				"buffer-ut",
				"src/buffer-utils.c"
			],
			[
				"repl",
				"lib/repl.js"
			],
			[
				"utils.c",
				"src/utils.c"
			],
			[
				"console.js",
				"lib/console.js"
			],
			[
				"qjsm.c",
				"src/qjsm.c"
			],
			[
				"",
				"include/utils.h"
			],
			[
				"utils.h",
				"include/utils.h"
			],
			[
				"quickjs-inspec",
				"quickjs-inspect.c"
			],
			[
				"io.js",
				"lib/io.js"
			],
			[
				"repl.js",
				"lib/repl.js"
			],
			[
				"util.sj",
				"web-platform-tests-streams/shared-storage/resources/util.sub.js"
			],
			[
				"quickjs.c",
				"~/Projects/plot-cv/quickjs/quickjs.c"
			],
			[
				"js-utils.c",
				"src/js-utils.c"
			],
			[
				"quickjs-strea",
				"quickjs-stream.h"
			],
			[
				"quickjs-st",
				"quickjs-stream.c"
			],
			[
				"quickjs-stream.h",
				"quickjs-stream.h"
			],
			[
				"quickjs-ins",
				"quickjs-inspect.c"
			],
			[
				"fs.js",
				"lib/fs.js"
			],
			[
				"ringbuffer.c",
				"src/ringbuffer.c"
			],
			[
				"ringbuf",
				"include/ringbuffer.h"
			],
			[
				"ringbuffer.h",
				"include/ringbuffer.h"
			],
			[
				"textcode.c",
				"quickjs-textcode.c"
			],
			[
				"quickjs-text",
				"quickjs-textcode.c"
			],
			[
				"stream.c",
				"quickjs-stream.c"
			],
			[
				"quickjs-stre",
				"quickjs-stream.c"
			],
			[
				"textcode",
				"quickjs-textcode.c"
			],
			[
				"quickjs-misc",
				"quickjs-misc.c"
			],
			[
				"function",
				"cmake/functions.cmake"
			],
			[
				"CMakeLIsts",
				"CMakeLists.txt"
			],
			[
				"quickjs-mis",
				"quickjs-misc.c"
			],
			[
				"fsProm",
				"lib/fsPromises.js"
			],
			[
				"CMake",
				"CMakeLists.txt"
			],
			[
				"cmakeli",
				"CMakeLists.txt"
			],
			[
				"cmakelists",
				"CMakeLists.txt"
			],
			[
				"CMakeLists",
				"CMakeLists.txt"
			],
			[
				"cmakelsits",
				"web-platform-tests-streams/editing/crashtests/make-editable-div-inline-and-set-contenteditable-of-input-to-false.html"
			],
			[
				"cmakeLists",
				"CMakeLists.txt"
			],
			[
				"js-util",
				"src/js-utils.c"
			],
			[
				"js-ut",
				"include/js-utils.h"
			],
			[
				"buffer-",
				"include/buffer-utils.h"
			],
			[
				"js-utils",
				"include/js-utils.h"
			],
			[
				"quickjs-sys",
				"quickjs-syscallerror.c"
			],
			[
				"js-u",
				"include/js-utils.h"
			],
			[
				"quickjs-socket",
				"quickjs-sockets.c"
			],
			[
				"async-cl",
				"src/async-closure.c"
			],
			[
				"utilsc",
				"src/utils.c"
			],
			[
				"quickjs-sock",
				"quickjs-sockets.h"
			],
			[
				"child",
				"src/child-process.c"
			],
			[
				"quickjs-child",
				"quickjs-child-process.c"
			],
			[
				"cmake",
				"CMakeLists.txt"
			],
			[
				"process.js",
				"lib/process.js"
			],
			[
				"quickjs-repea",
				"quickjs-repeater.c"
			],
			[
				"quickjs-repe",
				"quickjs-repeater.c"
			],
			[
				"quickjs-repeater",
				"quickjs-repeater.c"
			],
			[
				"test_repe",
				"tests/test_repeater.js"
			],
			[
				"quickjs-mysq",
				"quickjs-mysql.c"
			],
			[
				"quickjs-ser",
				"quickjs-serial.c"
			],
			[
				"quickjs-stream",
				"quickjs-stream.h"
			],
			[
				"quickjs-lex",
				"quickjs-lexer.c"
			],
			[
				"quickjs-list",
				"quickjs-list.c"
			],
			[
				"quickjs-list.c",
				"quickjs-list.c"
			],
			[
				"testhar",
				"lib/testharness.js"
			],
			[
				"qjsm",
				"src/qjsm.c"
			],
			[
				"test_repea",
				"tests/test_repeater.js"
			],
			[
				"test_socket",
				"tests/test_sockets.js"
			],
			[
				"test_sock",
				"tests/test_sockets.js"
			],
			[
				"textcod",
				"quickjs-textcode.c"
			],
			[
				"test_text",
				"tests/test_textcode.js"
			],
			[
				"stack.js",
				"lib/stack.js"
			],
			[
				"ebnf",
				"lib/parser/ebnf.js"
			],
			[
				"arser.",
				"lib/parser.js"
			],
			[
				"bnf.",
				"lib/lexer/bnf.js"
			],
			[
				"quickjs-my",
				"quickjs-mysql.c"
			],
			[
				"quickjs-blob",
				"quickjs-blob.c"
			],
			[
				"quickjs-bl",
				"quickjs-blob.c"
			],
			[
				"queue.c",
				"src/queue.c"
			],
			[
				"queue.h",
				"include/queue.h"
			],
			[
				"mysql",
				"tests/test_mysql.js"
			],
			[
				"child-",
				"src/child-process.c"
			],
			[
				"quickjs-chil",
				"quickjs-child-process.c"
			],
			[
				"xpath",
				"lib/xpath.js"
			],
			[
				"xpath.js",
				"lib/xpath.js"
			],
			[
				"pointer",
				"lib/pointer.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/plot-cv.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 309.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"WS"
			]
		],
		"width": 1059.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 353.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
