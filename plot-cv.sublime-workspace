{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Draw",
				"DrawCircle"
			],
			[
				"exi",
				"existsSync"
			],
			[
				"text",
				"text-decoration"
			],
			[
				"crea",
				"createTextNode"
			],
			[
				"Transform",
				"TransformationList"
			],
			[
				"trans",
				"transformation"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "Element\narg =>\nelement =>\nelement =>\nelement =>\n  static wrap(e)\n(acc, name) =>\nfunction(...args)\n  static create(...args)\n  obj =>\n  static walkUp(elem, pred = e => true)\n  pred = (e, d) =>\nv =>\nstop =>\n  fn = (e, next) =>\n  emit = n =>\n  static walk(elem, fn, accu = {})\n()\n  predicate = (e, d, r) =>\n  getProp = (obj, prop) =>\n  getProp = (obj, prop) =>\n()\n  static *childIterator(elem, element = true)\n  static fromObject(obj, parent)\n  static toObject(elem, opts = {})\n(l, c) =>\n  static toCommand(elem, opts = {})\n  k =>\n  e =>\n  static find(arg, parent, globalObj = globalThis)\n  static findAll(arg, parent)\n  static attr(e, attrs_or_name)\n(acc, name) =>\n  static getRect(elem)\n  static rect(...args)\n  static setRect(element, rect, opts = {})\n  static position(element, edges = ['left', 'top'])\n  e =>\n  static move(element, point, pos, edges = ['left', 'top'])\n  getValue = prop =>\n  static moveRelative(element, to, edges = ['left', 'top'], callback)\n([k, v]) =>\n  move(x, y)\n  .cancel = () =>\n  .jump = () =>\n  static resize(element, ...dimensions)\n  static resizeRelative(element, to, f = 1, callback)\n  resize(width, height, rel = true)\n  .cancel = () =>\n  .jump = () =>\n  static getEdgesXYWH({ x, y, w, h })\n  static getEdge({ x, y, w, h }, which)\n  static getPointsXYWH({ x, y, w, h })\n  static cumulativeOffset(element, relative_to = null)\n  static getTRBL(element, prefix = '')\n  pos =>\n() =>\n() =>\n  prop =>\n([prop, value]) =>\n  static setTRBL(element, trbl, prefix = 'margin')\n(acc, pos) =>\n  static setCSS(element, prop, value)\n  .subscribe = newval =>\n  static getCSS(element, property = undefined, receiver = null)\n() =>\n() =>\n(acc, k) =>\n  k =>\n  receiver = result =>\n  get()\n([k, v]) =>\n(ret, key) =>\n  static xpath(elt, relative_to = null)\n(e, next) =>\n  static selector(elt, opts = {})\n  static depth(elem, relative_to = document.body)\n  static dump(elem)\n  dumpElem(child, accu, root, depth)\n  attr =>\n  name =>\n(e, a, r, d) =>\n  pred = (a, b) =>\nfunction(elem)\n  static prevSibling(sib)\n  static nextSibling(sib)\n  static idx(elt)\n  static name(elem)\n  static unique(elem, opts = {})\n  static factory(delegate = {}, parent = null)\n  .append_to = function(elem, parent)\n  .create = tag =>\n  .setattr = (elem, attr, value) =>\n  .setcss = (elem, css) =>\n  .bound_factory = (tag, attr = {}, parent = null) =>\n  static remove(element)\n  static isat(e, x, y, options)\n  static at(x, y, options)\ne =>\n(e, depth) =>\n(resolve, reject) =>\n(e, accu, root, depth) =>\n  static transition(element, css, time, easing = 'linear', callback = null)\n(resolve, reject) =>\n  trun = function(e)\n  tend = function(e)\n  cancel = () =>\n  static toString(e, opts = {})\n([name, value]) =>\n  e =>\ntext =>\n(resolve, reject) =>\n() =>\n  err =>\n  static *children(elem, tfn = e => e)\n  static *recurse(elem, tfn = e => e)\n()\n  isElement(e)",
			"settings":
			{
				"buffer_size": 2835,
				"line_ending": "Unix",
				"name": "ùåÜ Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					21,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-shell.js",
						"symkeys":
						[
							[
								3224,
								3267
							],
							[
								4053,
								4060
							],
							[
								4160,
								4165
							],
							[
								4251,
								4290
							],
							[
								4375,
								4396
							],
							[
								4463,
								4485
							],
							[
								4563,
								4596
							],
							[
								4703,
								4708
							],
							[
								4771,
								4777
							],
							[
								4879,
								4898
							],
							[
								4920,
								4925
							],
							[
								5028,
								5059
							],
							[
								5110,
								5153
							],
							[
								5198,
								5205
							],
							[
								5306,
								5391
							],
							[
								5543,
								5548
							],
							[
								5593,
								5611
							],
							[
								5650,
								5657
							],
							[
								5706,
								5713
							],
							[
								5752,
								5769
							],
							[
								5816,
								5823
							],
							[
								5860,
								5878
							],
							[
								5901,
								5910
							],
							[
								5933,
								5951
							],
							[
								5962,
								6023
							],
							[
								6143,
								6152
							],
							[
								6189,
								6200
							],
							[
								6211,
								6235
							],
							[
								6316,
								6324
							],
							[
								6507,
								6561
							],
							[
								6780,
								6810
							],
							[
								7462,
								7508
							],
							[
								7548,
								7552
							],
							[
								7579,
								7586
							],
							[
								7672,
								7711
							],
							[
								7796,
								7841
							],
							[
								7879,
								7883
							],
							[
								7907,
								7950
							],
							[
								8029,
								8074
							],
							[
								8119,
								8123
							],
							[
								8173,
								8177
							],
							[
								8184,
								8188
							],
							[
								8220,
								8253
							],
							[
								8285,
								8328
							],
							[
								8403,
								8407
							],
							[
								8446,
								8485
							],
							[
								8531,
								8574
							],
							[
								8619,
								8658
							],
							[
								8754,
								8787
							],
							[
								8819,
								8839
							],
							[
								9086,
								9108
							],
							[
								11400,
								11411
							],
							[
								12625,
								12638
							],
							[
								13018,
								13052
							],
							[
								13556,
								13600
							],
							[
								13719,
								13739
							],
							[
								14054,
								14064
							],
							[
								14092,
								14102
							],
							[
								14138,
								14151
							],
							[
								14401,
								14415
							],
							[
								15307,
								15316
							],
							[
								15557,
								15576
							],
							[
								16118,
								16131
							],
							[
								16149,
								16154
							],
							[
								16205,
								16218
							],
							[
								16269,
								16290
							],
							[
								16687,
								16703
							],
							[
								17091,
								17096
							],
							[
								17134,
								17149
							],
							[
								17296,
								17304
							],
							[
								17345,
								17353
							],
							[
								17630,
								17658
							],
							[
								17725,
								17759
							],
							[
								17793,
								17798
							],
							[
								17820,
								17850
							],
							[
								18092,
								18100
							],
							[
								18167,
								18171
							],
							[
								18261,
								18268
							],
							[
								18608,
								18632
							],
							[
								18877,
								18882
							],
							[
								20612,
								20656
							],
							[
								21103,
								21129
							],
							[
								21831,
								21854
							],
							[
								21974,
								21996
							],
							[
								22247,
								22251
							],
							[
								22739,
								22743
							],
							[
								23360,
								23389
							],
							[
								23414,
								23418
							],
							[
								23494,
								23517
							],
							[
								23561,
								23567
							],
							[
								23595,
								23599
							],
							[
								23615,
								23652
							],
							[
								23674,
								23690
							],
							[
								23710,
								23717
							],
							[
								23774,
								23802
							],
							[
								23856,
								23867
							],
							[
								23950,
								23958
							],
							[
								24054,
								24058
							],
							[
								24208,
								24212
							],
							[
								24310,
								24315
							],
							[
								24375,
								24386
							],
							[
								24458,
								24469
							],
							[
								24556,
								24561
							],
							[
								24611,
								24617
							],
							[
								24714,
								24722
							],
							[
								24897,
								24926
							],
							[
								25019,
								25072
							],
							[
								25225,
								25229
							],
							[
								25283,
								25287
							],
							[
								25563,
								25570
							],
							[
								25592,
								25598
							],
							[
								25627,
								25658
							],
							[
								25792,
								25816
							],
							[
								25942,
								25953
							],
							[
								25971,
								25987
							],
							[
								26146,
								26151
							],
							[
								26175,
								26179
							],
							[
								26227,
								26236
							],
							[
								26304,
								26309
							],
							[
								26447,
								26452
							],
							[
								26574,
								26585
							],
							[
								26674,
								26681
							],
							[
								27327,
								27343
							],
							[
								29397,
								29463
							],
							[
								29710,
								29749
							],
							[
								29791,
								29805
							],
							[
								30054,
								30088
							],
							[
								30427,
								30441
							],
							[
								30536,
								30540
							],
							[
								30562,
								30576
							],
							[
								30607,
								30611
							],
							[
								31911,
								31927
							],
							[
								31977,
								31992
							],
							[
								32051,
								32070
							],
							[
								32093,
								32105
							],
							[
								32194,
								32198
							],
							[
								32297,
								32301
							],
							[
								32520,
								32526
							],
							[
								32616,
								32630
							],
							[
								32659,
								32677
							],
							[
								32814,
								32826
							],
							[
								32856,
								32921
							],
							[
								32950,
								32955
							],
							[
								33094,
								33132
							],
							[
								33157,
								33177
							],
							[
								33206,
								33255
							],
							[
								33302,
								33312
							],
							[
								33485,
								33495
							],
							[
								33568,
								33578
							],
							[
								33649,
								33659
							],
							[
								34186,
								34267
							],
							[
								34278,
								34301
							],
							[
								34519,
								34524
							],
							[
								34607,
								34616
							],
							[
								34646,
								34652
							],
							[
								34668,
								34697
							],
							[
								34733,
								34746
							],
							[
								34977,
								34983
							],
							[
								34992,
								35003
							],
							[
								35071,
								35093
							],
							[
								35310,
								35333
							],
							[
								35745,
								35774
							],
							[
								36096,
								36123
							],
							[
								36157,
								36170
							],
							[
								36197,
								36202
							],
							[
								36226,
								36231
							],
							[
								36276,
								36286
							],
							[
								36316,
								36326
							],
							[
								36412,
								36417
							],
							[
								36537,
								36542
							],
							[
								36556,
								36564
							],
							[
								36786,
								36790
							],
							[
								36843,
								36847
							],
							[
								36935,
								36948
							],
							[
								37049,
								37062
							],
							[
								37323,
								37356
							],
							[
								37410,
								37414
							],
							[
								37528,
								37554
							],
							[
								37897,
								37930
							],
							[
								38277,
								38322
							],
							[
								38368,
								38372
							],
							[
								38389,
								38418
							],
							[
								38454,
								38460
							],
							[
								38844,
								38914
							],
							[
								39514,
								39586
							],
							[
								39819,
								39824
							],
							[
								40546,
								40550
							],
							[
								40771,
								40844
							],
							[
								41844,
								41868
							]
						],
						"symlist":
						[
							"function Window(width = 1280, height = 900)",
							"begin()",
							"end()",
							"handleMouseButton(button, action, mods)",
							"handleCursorPos(x, y)",
							"handleCursorEnter(cur)",
							".handleCharMods = (char, mods) =>",
							"() =>",
							" () =>",
							"function toXML(obj)",
							" a =>",
							"function renderToXML(component)",
							"function GetFiletime(file, field = 'mtime')",
							"file =>",
							"function FindProjects(dirPtn = '../*/eagle', sortDirection = -1, sortField = 'mtime')",
							"fn =>",
							"minIndex = name =>",
							"file =>",
							"file =>",
							"hasBoth = name =>",
							"name =>",
							"([name, index]) =>",
							"(a, b) =>",
							"([name, index]) =>",
							"function SortFiles(files, direction = 1, statField = 'mtime')",
							"(a, b) =>",
							"([file]) =>",
							"function pick(it, n = 1)",
							"n = i =>",
							"function append(tag, attrs, children, parent, element)",
							"function render(doc, filename)",
							"function CollectParts(doc = project.schematic)",
							"e =>",
							"attr =>",
							"({ name, deviceset, device, value }) =>",
							"function CollectElements(doc = project.board)",
							"e =>",
							"({ name, library, package: pkg, value }) =>",
							"function CollectPartsElements(proj = project)",
							"e =>",
							"a =>",
							"e =>",
							"([{ x, y, ...element }, part]) =>",
							"function ListParts(doc = project.schematic)",
							"p =>",
							"({ name, deviceset, device, value }) =>",
							"function ShowParts(doc = project.schematic)",
							"({ name, deviceset, device, value }) =>",
							"function EaglePrint(file, output)",
							" (dir, base, ext) =>",
							"function main(...args)",
							"toNumber(n)",
							"wire(...args)",
							"coil({ rect, n, diameter, width })",
							"load(filename, project = globalThis.project)",
							"newProject(filename)",
							"sch: () =>",
							"brd: () =>",
							"nextProject()",
							"projectNames()",
							"quit(arg)",
							"renderToString(arg)",
							" (...args) =>",
							"() =>",
							".exit = () =>",
							".debug = (...args) =>",
							".show = value =>",
							"() =>",
							"(item, i, a) =>",
							"entry =>",
							"entry =>",
							"function Terminate(exitCode)",
							"function xml(strings, expressions)",
							" e =>",
							"function UpdateMeasures(board)",
							"lines =>",
							"e =>",
							"line =>",
							"function AlignItem(item)",
							"tr =>",
							"function AlignAll(doc = globalThis.document)",
							"function fixValue(element)",
							"function fixValues(doc)",
							"function coordMap(doc)",
							"p =>",
							"t =>",
							"function GetPolygons(d = doc)",
							"e =>",
							"function FindPolygons()",
							"doc =>",
							"e =>",
							"function RemovePolygons(p = polygons)",
							"([doc, list]) =>",
							"path =>",
							"function GetNames(doc, pred)",
							"pred = e =>",
							"sheet =>",
							"e =>",
							"e =>",
							" e =>",
							"([v, p]) =>",
							"([v, p]) =>",
							"() =>",
							"doc =>",
							"sheet =>",
							"function GetByName(doc, name)",
							"function CorrelateSchematicAndBoard(schematic, board)",
							"d =>",
							"n =>",
							"name =>",
							"doc =>",
							"function GetSheets(doc_or_proj)",
							"function SaveLibraries()",
							"([n, e]) =>",
							"(acc, [n, e]) =>",
							" e =>",
							"e =>",
							"(a, b) =>",
							"id =>",
							"id =>",
							"([n, e]) =>",
							"name =>",
							"(acc, [n, e]) =>",
							"function BoardFromSchematic(doc = project.schematic, f = 1, r=0.5)",
							"function InitBoard(doc = project.board)",
							"([name, e]) =>",
							"async function testEagle(filename)",
							"([name, e]) =>",
							"e =>",
							"([name, i]) =>",
							"p =>",
							"(child, i, a) =>",
							"(child2, i2) =>",
							"([index, equal]) =>",
							"([index]) =>",
							"i =>",
							"i =>",
							"doc =>",
							"([file, e]) =>",
							"([file, xpath]) =>",
							" ([k, v]) =>",
							"function ModifyPath(p, fn = (dir, base, ext) => [dir, base, ext])",
							"() =>",
							"function AppendToFilename(p, str = '')",
							" (dir, base, ext) =>",
							"function SetSVGBackground(xml, color = '#ffffff')",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							"FileFunction = (fn, rfn = ReadFile, wfn = WriteFile, namefn = n => n, ...args) =>",
							" (filename, ...args) =>",
							" n =>",
							" data =>",
							" n =>",
							"function PutRowsColumns(rows)",
							"(acc, row) =>",
							"row =>",
							"(col, i) =>",
							"function GetLibrary(e)",
							"function ElementName(e)",
							"function GetRotation(element)",
							"function Package2Circuit(p)",
							"({ x, y }) =>",
							"pt =>",
							"pt =>",
							"({ x }) =>",
							"({ y }) =>",
							"pt =>",
							"pt =>",
							"coord =>",
							"x =>",
							"y =>",
							"({ x, y }) =>",
							"({ x, y }) =>",
							"function Contactref2Circuit(cref)",
							"e =>",
							"function Signal2Circuit(s)",
							"function Element2Circuit(element)",
							"function GetUsedPackages(doc = project.board)",
							"e =>",
							"function GetPackagePitch(pkg)",
							"pad =>",
							"function Eagle2Circuit(doc = project.board, width = 100, height = 100)",
							"function Eagle2CircuitJS(doc = project.schematic, scale = 50, sheet = 0)",
							" n =>",
							"e =>",
							"function MakeGraph(board = project.board, ignore = /^(GND|[-+][0-9]+V)$/)",
							"function DrawGraph(g, w)"
						]
					},
					"AQAAAAAAAAAAAAAAcw0AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					22,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-shell.js",
						"symkeys":
						[
							[
								3224,
								3267
							],
							[
								4053,
								4060
							],
							[
								4160,
								4165
							],
							[
								4251,
								4290
							],
							[
								4375,
								4396
							],
							[
								4463,
								4485
							],
							[
								4563,
								4596
							],
							[
								4703,
								4708
							],
							[
								4771,
								4777
							],
							[
								4879,
								4898
							],
							[
								4920,
								4925
							],
							[
								5028,
								5059
							],
							[
								5110,
								5153
							],
							[
								5198,
								5205
							],
							[
								5306,
								5391
							],
							[
								5543,
								5548
							],
							[
								5593,
								5611
							],
							[
								5650,
								5657
							],
							[
								5706,
								5713
							],
							[
								5752,
								5769
							],
							[
								5816,
								5823
							],
							[
								5860,
								5878
							],
							[
								5901,
								5910
							],
							[
								5933,
								5951
							],
							[
								5962,
								6023
							],
							[
								6143,
								6152
							],
							[
								6189,
								6200
							],
							[
								6211,
								6235
							],
							[
								6316,
								6324
							],
							[
								6507,
								6561
							],
							[
								6780,
								6810
							],
							[
								7462,
								7508
							],
							[
								7548,
								7552
							],
							[
								7579,
								7586
							],
							[
								7672,
								7711
							],
							[
								7796,
								7841
							],
							[
								7879,
								7883
							],
							[
								7907,
								7950
							],
							[
								8029,
								8074
							],
							[
								8119,
								8123
							],
							[
								8173,
								8177
							],
							[
								8184,
								8188
							],
							[
								8220,
								8253
							],
							[
								8285,
								8328
							],
							[
								8403,
								8407
							],
							[
								8446,
								8485
							],
							[
								8531,
								8574
							],
							[
								8619,
								8658
							],
							[
								8754,
								8787
							],
							[
								8819,
								8839
							],
							[
								9086,
								9108
							],
							[
								11400,
								11411
							],
							[
								12625,
								12638
							],
							[
								13018,
								13052
							],
							[
								13556,
								13600
							],
							[
								13719,
								13739
							],
							[
								14054,
								14064
							],
							[
								14092,
								14102
							],
							[
								14138,
								14151
							],
							[
								14401,
								14415
							],
							[
								15307,
								15316
							],
							[
								15557,
								15576
							],
							[
								16118,
								16131
							],
							[
								16149,
								16154
							],
							[
								16205,
								16218
							],
							[
								16269,
								16290
							],
							[
								16687,
								16703
							],
							[
								17091,
								17096
							],
							[
								17134,
								17149
							],
							[
								17296,
								17304
							],
							[
								17345,
								17353
							],
							[
								17630,
								17658
							],
							[
								17725,
								17759
							],
							[
								17793,
								17798
							],
							[
								17820,
								17850
							],
							[
								18092,
								18100
							],
							[
								18167,
								18171
							],
							[
								18261,
								18268
							],
							[
								18608,
								18632
							],
							[
								18877,
								18882
							],
							[
								20612,
								20656
							],
							[
								21103,
								21129
							],
							[
								21831,
								21854
							],
							[
								21974,
								21996
							],
							[
								22247,
								22251
							],
							[
								22739,
								22743
							],
							[
								23360,
								23389
							],
							[
								23414,
								23418
							],
							[
								23494,
								23517
							],
							[
								23561,
								23567
							],
							[
								23595,
								23599
							],
							[
								23615,
								23652
							],
							[
								23674,
								23690
							],
							[
								23710,
								23717
							],
							[
								23774,
								23802
							],
							[
								23856,
								23867
							],
							[
								23950,
								23958
							],
							[
								24054,
								24058
							],
							[
								24208,
								24212
							],
							[
								24310,
								24315
							],
							[
								24375,
								24386
							],
							[
								24458,
								24469
							],
							[
								24556,
								24561
							],
							[
								24611,
								24617
							],
							[
								24714,
								24722
							],
							[
								24897,
								24926
							],
							[
								25019,
								25072
							],
							[
								25225,
								25229
							],
							[
								25283,
								25287
							],
							[
								25563,
								25570
							],
							[
								25592,
								25598
							],
							[
								25627,
								25658
							],
							[
								25792,
								25816
							],
							[
								25942,
								25953
							],
							[
								25971,
								25987
							],
							[
								26146,
								26151
							],
							[
								26175,
								26179
							],
							[
								26227,
								26236
							],
							[
								26304,
								26309
							],
							[
								26447,
								26452
							],
							[
								26574,
								26585
							],
							[
								26674,
								26681
							],
							[
								27327,
								27343
							],
							[
								29397,
								29463
							],
							[
								29710,
								29749
							],
							[
								29791,
								29805
							],
							[
								30054,
								30088
							],
							[
								30427,
								30441
							],
							[
								30536,
								30540
							],
							[
								30562,
								30576
							],
							[
								30607,
								30611
							],
							[
								31911,
								31927
							],
							[
								31977,
								31992
							],
							[
								32051,
								32070
							],
							[
								32093,
								32105
							],
							[
								32194,
								32198
							],
							[
								32297,
								32301
							],
							[
								32520,
								32526
							],
							[
								32616,
								32630
							],
							[
								32659,
								32677
							],
							[
								32814,
								32826
							],
							[
								32856,
								32921
							],
							[
								32950,
								32955
							],
							[
								33094,
								33132
							],
							[
								33157,
								33177
							],
							[
								33206,
								33255
							],
							[
								33302,
								33312
							],
							[
								33485,
								33495
							],
							[
								33568,
								33578
							],
							[
								33649,
								33659
							],
							[
								34186,
								34267
							],
							[
								34278,
								34301
							],
							[
								34519,
								34524
							],
							[
								34607,
								34616
							],
							[
								34646,
								34652
							],
							[
								34668,
								34697
							],
							[
								34733,
								34746
							],
							[
								34977,
								34983
							],
							[
								34992,
								35003
							],
							[
								35071,
								35093
							],
							[
								35310,
								35333
							],
							[
								35745,
								35774
							],
							[
								36096,
								36123
							],
							[
								36167,
								36180
							],
							[
								36207,
								36212
							],
							[
								36236,
								36241
							],
							[
								36286,
								36296
							],
							[
								36326,
								36336
							],
							[
								36422,
								36427
							],
							[
								36547,
								36552
							],
							[
								36566,
								36574
							],
							[
								36796,
								36800
							],
							[
								36853,
								36857
							],
							[
								36945,
								36958
							],
							[
								37059,
								37072
							],
							[
								37333,
								37366
							],
							[
								37420,
								37424
							],
							[
								37538,
								37564
							],
							[
								37907,
								37940
							],
							[
								38287,
								38332
							],
							[
								38378,
								38382
							],
							[
								38399,
								38428
							],
							[
								38464,
								38470
							],
							[
								38854,
								38924
							],
							[
								39524,
								39596
							],
							[
								39829,
								39834
							],
							[
								40556,
								40560
							],
							[
								40781,
								40854
							],
							[
								41854,
								41878
							]
						],
						"symlist":
						[
							"function Window(width = 1280, height = 900)",
							"begin()",
							"end()",
							"handleMouseButton(button, action, mods)",
							"handleCursorPos(x, y)",
							"handleCursorEnter(cur)",
							".handleCharMods = (char, mods) =>",
							"() =>",
							" () =>",
							"function toXML(obj)",
							" a =>",
							"function renderToXML(component)",
							"function GetFiletime(file, field = 'mtime')",
							"file =>",
							"function FindProjects(dirPtn = '../*/eagle', sortDirection = -1, sortField = 'mtime')",
							"fn =>",
							"minIndex = name =>",
							"file =>",
							"file =>",
							"hasBoth = name =>",
							"name =>",
							"([name, index]) =>",
							"(a, b) =>",
							"([name, index]) =>",
							"function SortFiles(files, direction = 1, statField = 'mtime')",
							"(a, b) =>",
							"([file]) =>",
							"function pick(it, n = 1)",
							"n = i =>",
							"function append(tag, attrs, children, parent, element)",
							"function render(doc, filename)",
							"function CollectParts(doc = project.schematic)",
							"e =>",
							"attr =>",
							"({ name, deviceset, device, value }) =>",
							"function CollectElements(doc = project.board)",
							"e =>",
							"({ name, library, package: pkg, value }) =>",
							"function CollectPartsElements(proj = project)",
							"e =>",
							"a =>",
							"e =>",
							"([{ x, y, ...element }, part]) =>",
							"function ListParts(doc = project.schematic)",
							"p =>",
							"({ name, deviceset, device, value }) =>",
							"function ShowParts(doc = project.schematic)",
							"({ name, deviceset, device, value }) =>",
							"function EaglePrint(file, output)",
							" (dir, base, ext) =>",
							"function main(...args)",
							"toNumber(n)",
							"wire(...args)",
							"coil({ rect, n, diameter, width })",
							"load(filename, project = globalThis.project)",
							"newProject(filename)",
							"sch: () =>",
							"brd: () =>",
							"nextProject()",
							"projectNames()",
							"quit(arg)",
							"renderToString(arg)",
							" (...args) =>",
							"() =>",
							".exit = () =>",
							".debug = (...args) =>",
							".show = value =>",
							"() =>",
							"(item, i, a) =>",
							"entry =>",
							"entry =>",
							"function Terminate(exitCode)",
							"function xml(strings, expressions)",
							" e =>",
							"function UpdateMeasures(board)",
							"lines =>",
							"e =>",
							"line =>",
							"function AlignItem(item)",
							"tr =>",
							"function AlignAll(doc = globalThis.document)",
							"function fixValue(element)",
							"function fixValues(doc)",
							"function coordMap(doc)",
							"p =>",
							"t =>",
							"function GetPolygons(d = doc)",
							"e =>",
							"function FindPolygons()",
							"doc =>",
							"e =>",
							"function RemovePolygons(p = polygons)",
							"([doc, list]) =>",
							"path =>",
							"function GetNames(doc, pred)",
							"pred = e =>",
							"sheet =>",
							"e =>",
							"e =>",
							" e =>",
							"([v, p]) =>",
							"([v, p]) =>",
							"() =>",
							"doc =>",
							"sheet =>",
							"function GetByName(doc, name)",
							"function CorrelateSchematicAndBoard(schematic, board)",
							"d =>",
							"n =>",
							"name =>",
							"doc =>",
							"function GetSheets(doc_or_proj)",
							"function SaveLibraries()",
							"([n, e]) =>",
							"(acc, [n, e]) =>",
							" e =>",
							"e =>",
							"(a, b) =>",
							"id =>",
							"id =>",
							"([n, e]) =>",
							"name =>",
							"(acc, [n, e]) =>",
							"function BoardFromSchematic(doc = project.schematic, f = 1, r=0.5)",
							"function InitBoard(doc = project.board)",
							"([name, e]) =>",
							"async function testEagle(filename)",
							"([name, e]) =>",
							"e =>",
							"([name, i]) =>",
							"p =>",
							"(child, i, a) =>",
							"(child2, i2) =>",
							"([index, equal]) =>",
							"([index]) =>",
							"i =>",
							"i =>",
							"doc =>",
							"([file, e]) =>",
							"([file, xpath]) =>",
							" ([k, v]) =>",
							"function ModifyPath(p, fn = (dir, base, ext) => [dir, base, ext])",
							"() =>",
							"function AppendToFilename(p, str = '')",
							" (dir, base, ext) =>",
							"function SetSVGBackground(xml, color = '#ffffff')",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							"FileFunction = (fn, rfn = ReadFile, wfn = WriteFile, namefn = n => n, ...args) =>",
							" (filename, ...args) =>",
							" n =>",
							" data =>",
							" n =>",
							"function PutRowsColumns(rows)",
							"(acc, row) =>",
							"row =>",
							"(col, i) =>",
							"function GetLibrary(e)",
							"function ElementName(e)",
							"function GetRotation(element)",
							"function Package2Circuit(p)",
							"({ x, y }) =>",
							"pt =>",
							"pt =>",
							"({ x }) =>",
							"({ y }) =>",
							"pt =>",
							"pt =>",
							"coord =>",
							"x =>",
							"y =>",
							"({ x, y }) =>",
							"({ x, y }) =>",
							"function Contactref2Circuit(cref)",
							"e =>",
							"function Signal2Circuit(s)",
							"function Element2Circuit(element)",
							"function GetUsedPackages(doc = project.board)",
							"e =>",
							"function GetPackagePitch(pkg)",
							"pad =>",
							"function Eagle2Circuit(doc = project.board, width = 100, height = 100)",
							"function Eagle2CircuitJS(doc = project.schematic, scale = 50, sheet = 0)",
							" n =>",
							"e =>",
							"function MakeGraph(board = project.board, ignore = /^(GND|[-+][0-9]+V)$/)",
							"function DrawGraph(g, w)"
						]
					},
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					23,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABzDQAAV2luZG93KHdpZHRoID0gMTI4MCwgaGVpZ2h0ID0gOTAwKQogIGJlZ2luKCkKICBlbmQoKQogIGhhbmRsZU1vdXNlQnV0dG9uKGJ1dHRvbiwgYWN0aW9uLCBtb2RzKQogIGhhbmRsZUN1cnNvclBvcyh4LCB5KQogIGhhbmRsZUN1cnNvckVudGVyKGN1cikKICAuaGFuZGxlQ2hhck1vZHMgPSAoY2hhciwgbW9kcykgPT4KKCkgPT4KKCkgPT4KICB0b1hNTChvYmopCmEgPT4KICByZW5kZXJUb1hNTChjb21wb25lbnQpCkdldEZpbGV0aW1lKGZpbGUsIGZpZWxkID0gJ210aW1lJykKICBmaWxlID0+CkZpbmRQcm9qZWN0cyhkaXJQdG4gPSAnLi4vKi9lYWdsZScsIHNvcnREaXJlY3Rpb24gPSAtMSwgc29ydEZpZWxkID0gJ210aW1lJykKICBmbiA9PgogIG1pbkluZGV4ID0gbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CiAgaGFzQm90aCA9IG5hbWUgPT4KICBuYW1lID0+CihbbmFtZSwgaW5kZXhdKSA9PgooYSwgYikgPT4KKFtuYW1lLCBpbmRleF0pID0+ClNvcnRGaWxlcyhmaWxlcywgZGlyZWN0aW9uID0gMSwgc3RhdEZpZWxkID0gJ210aW1lJykKKGEsIGIpID0+CihbZmlsZV0pID0+CiAgcGljayhpdCwgbiA9IDEpCiAgbiA9IGkgPT4KICBhcHBlbmQodGFnLCBhdHRycywgY2hpbGRyZW4sIHBhcmVudCwgZWxlbWVudCkKICByZW5kZXIoZG9jLCBmaWxlbmFtZSkKQ29sbGVjdFBhcnRzKGRvYyA9IHByb2plY3Quc2NoZW1hdGljKQogIGUgPT4KICBhdHRyID0+Cih7IG5hbWUsIGRldmljZXNldCwgZGV2aWNlLCB2YWx1ZSB9KSA9PgpDb2xsZWN0RWxlbWVudHMoZG9jID0gcHJvamVjdC5ib2FyZCkKICBlID0+Cih7IG5hbWUsIGxpYnJhcnksIHBhY2thZ2U6IHBrZywgdmFsdWUgfSkgPT4KQ29sbGVjdFBhcnRzRWxlbWVudHMocHJvaiA9IHByb2plY3QpCiAgZSA9PgogIGEgPT4KICBlID0+CihbeyB4LCB5LCAuLi5lbGVtZW50IH0sIHBhcnRdKSA9PgpMaXN0UGFydHMoZG9jID0gcHJvamVjdC5zY2hlbWF0aWMpCiAgcCA9PgooeyBuYW1lLCBkZXZpY2VzZXQsIGRldmljZSwgdmFsdWUgfSkgPT4KU2hvd1BhcnRzKGRvYyA9IHByb2plY3Quc2NoZW1hdGljKQooeyBuYW1lLCBkZXZpY2VzZXQsIGRldmljZSwgdmFsdWUgfSkgPT4KRWFnbGVQcmludChmaWxlLCBvdXRwdXQpCihkaXIsIGJhc2UsIGV4dCkgPT4KICBtYWluKC4uLmFyZ3MpCiAgdG9OdW1iZXIobikKICB3aXJlKC4uLmFyZ3MpCiAgY29pbCh7IHJlY3QsIG4sIGRpYW1ldGVyLCB3aWR0aCB9KQogIGxvYWQoZmlsZW5hbWUsIHByb2plY3QgPSBnbG9iYWxUaGlzLnByb2plY3QpCiAgbmV3UHJvamVjdChmaWxlbmFtZSkKICBzY2g6ICgpID0+CiAgYnJkOiAoKSA9PgogIG5leHRQcm9qZWN0KCkKICBwcm9qZWN0TmFtZXMoKQogIHF1aXQoYXJnKQogIHJlbmRlclRvU3RyaW5nKGFyZykKKC4uLmFyZ3MpID0+CigpID0+CiAgLmV4aXQgPSAoKSA9PgogIC5kZWJ1ZyA9ICguLi5hcmdzKSA9PgogIC5zaG93ID0gdmFsdWUgPT4KKCkgPT4KKGl0ZW0sIGksIGEpID0+CiAgZW50cnkgPT4KICBlbnRyeSA9PgpUZXJtaW5hdGUoZXhpdENvZGUpCiAgeG1sKHN0cmluZ3MsIGV4cHJlc3Npb25zKQplID0+ClVwZGF0ZU1lYXN1cmVzKGJvYXJkKQogIGxpbmVzID0+CiAgZSA9PgogIGxpbmUgPT4KQWxpZ25JdGVtKGl0ZW0pCiAgdHIgPT4KQWxpZ25BbGwoZG9jID0gZ2xvYmFsVGhpcy5kb2N1bWVudCkKICBmaXhWYWx1ZShlbGVtZW50KQogIGZpeFZhbHVlcyhkb2MpCiAgY29vcmRNYXAoZG9jKQogIHAgPT4KICB0ID0+CkdldFBvbHlnb25zKGQgPSBkb2MpCiAgZSA9PgpGaW5kUG9seWdvbnMoKQogIGRvYyA9PgogIGUgPT4KUmVtb3ZlUG9seWdvbnMocCA9IHBvbHlnb25zKQooW2RvYywgbGlzdF0pID0+CiAgcGF0aCA9PgpHZXROYW1lcyhkb2MsIHByZWQpCiAgcHJlZCA9IGUgPT4KICBzaGVldCA9PgogIGUgPT4KICBlID0+CmUgPT4KKFt2LCBwXSkgPT4KKFt2LCBwXSkgPT4KKCkgPT4KICBkb2MgPT4KICBzaGVldCA9PgpHZXRCeU5hbWUoZG9jLCBuYW1lKQpDb3JyZWxhdGVTY2hlbWF0aWNBbmRCb2FyZChzY2hlbWF0aWMsIGJvYXJkKQogIGQgPT4KICBuID0+CiAgbmFtZSA9PgogIGRvYyA9PgpHZXRTaGVldHMoZG9jX29yX3Byb2opClNhdmVMaWJyYXJpZXMoKQooW24sIGVdKSA9PgooYWNjLCBbbiwgZV0pID0+CmUgPT4KICBlID0+CihhLCBiKSA9PgogIGlkID0+CiAgaWQgPT4KKFtuLCBlXSkgPT4KICBuYW1lID0+CihhY2MsIFtuLCBlXSkgPT4KQm9hcmRGcm9tU2NoZW1hdGljKGRvYyA9IHByb2plY3Quc2NoZW1hdGljLCBmID0gMSwgcj0wLjUpCkluaXRCb2FyZChkb2MgPSBwcm9qZWN0LmJvYXJkKQooW25hbWUsIGVdKSA9PgogIHRlc3RFYWdsZShmaWxlbmFtZSkKKFtuYW1lLCBlXSkgPT4KICBlID0+CihbbmFtZSwgaV0pID0+CiAgcCA9PgooY2hpbGQsIGksIGEpID0+CihjaGlsZDIsIGkyKSA9PgooW2luZGV4LCBlcXVhbF0pID0+CihbaW5kZXhdKSA9PgogIGkgPT4KICBpID0+CiAgZG9jID0+CihbZmlsZSwgZV0pID0+CihbZmlsZSwgeHBhdGhdKSA9PgooW2ssIHZdKSA9PgpNb2RpZnlQYXRoKHAsIGZuID0gKGRpciwgYmFzZSwgZXh0KSA9PiBbZGlyLCBiYXNlLCBleHRdKQooKSA9PgpBcHBlbmRUb0ZpbGVuYW1lKHAsIHN0ciA9ICcnKQooZGlyLCBiYXNlLCBleHQpID0+ClNldFNWR0JhY2tncm91bmQoeG1sLCBjb2xvciA9ICcjZmZmZmZmJykKKGUsIG4pID0+CihlLCBuKSA9PgooZSwgbikgPT4KKGUsIG4pID0+CkZpbGVGdW5jdGlvbiA9IChmbiwgcmZuID0gUmVhZEZpbGUsIHdmbiA9IFdyaXRlRmlsZSwgbmFtZWZuID0gbiA9PiBuLCAuLi5hcmdzKSA9PgooZmlsZW5hbWUsIC4uLmFyZ3MpID0+Cm4gPT4KZGF0YSA9PgpuID0+ClB1dFJvd3NDb2x1bW5zKHJvd3MpCihhY2MsIHJvdykgPT4KICByb3cgPT4KKGNvbCwgaSkgPT4KR2V0TGlicmFyeShlKQpFbGVtZW50TmFtZShlKQpHZXRSb3RhdGlvbihlbGVtZW50KQpQYWNrYWdlMkNpcmN1aXQocCkKKHsgeCwgeSB9KSA9PgogIHB0ID0+CiAgcHQgPT4KKHsgeCB9KSA9PgooeyB5IH0pID0+CiAgcHQgPT4KICBwdCA9PgogIGNvb3JkID0+CiAgeCA9PgogIHkgPT4KKHsgeCwgeSB9KSA9PgooeyB4LCB5IH0pID0+CkNvbnRhY3RyZWYyQ2lyY3VpdChjcmVmKQogIGUgPT4KU2lnbmFsMkNpcmN1aXQocykKRWxlbWVudDJDaXJjdWl0KGVsZW1lbnQpCkdldFVzZWRQYWNrYWdlcyhkb2MgPSBwcm9qZWN0LmJvYXJkKQogIGUgPT4KR2V0UGFja2FnZVBpdGNoKHBrZykKICBwYWQgPT4KRWFnbGUyQ2lyY3VpdChkb2MgPSBwcm9qZWN0LmJvYXJkLCB3aWR0aCA9IDEwMCwgaGVpZ2h0ID0gMTAwKQpFYWdsZTJDaXJjdWl0SlMoZG9jID0gcHJvamVjdC5zY2hlbWF0aWMsIHNjYWxlID0gNTAsIHNoZWV0ID0gMCkKbiA9PgogIGUgPT4KTWFrZUdyYXBoKGJvYXJkID0gcHJvamVjdC5ib2FyZCwgaWdub3JlID0gL14oR05EfFstK11bMC05XStWKSQvKQpEcmF3R3JhcGgoZywgdykAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					24,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					25,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/noise-source.circuit",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					26,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/noise-source.circuit",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					27,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					28,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					29,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/noise-source.circuit",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					30,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					31,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/noise-source.circuit",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					32,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					33,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					34,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-shell.js",
						"symkeys":
						[
							[
								3224,
								3267
							],
							[
								4053,
								4060
							],
							[
								4160,
								4165
							],
							[
								4251,
								4290
							],
							[
								4375,
								4396
							],
							[
								4463,
								4485
							],
							[
								4563,
								4596
							],
							[
								4703,
								4708
							],
							[
								4771,
								4777
							],
							[
								4879,
								4898
							],
							[
								4920,
								4925
							],
							[
								5028,
								5059
							],
							[
								5110,
								5153
							],
							[
								5198,
								5205
							],
							[
								5306,
								5391
							],
							[
								5543,
								5548
							],
							[
								5593,
								5611
							],
							[
								5650,
								5657
							],
							[
								5706,
								5713
							],
							[
								5752,
								5769
							],
							[
								5816,
								5823
							],
							[
								5860,
								5878
							],
							[
								5901,
								5910
							],
							[
								5933,
								5951
							],
							[
								5962,
								6023
							],
							[
								6143,
								6152
							],
							[
								6189,
								6200
							],
							[
								6211,
								6235
							],
							[
								6316,
								6324
							],
							[
								6507,
								6561
							],
							[
								6780,
								6810
							],
							[
								7462,
								7508
							],
							[
								7548,
								7552
							],
							[
								7579,
								7586
							],
							[
								7672,
								7711
							],
							[
								7796,
								7841
							],
							[
								7879,
								7883
							],
							[
								7907,
								7950
							],
							[
								8029,
								8074
							],
							[
								8119,
								8123
							],
							[
								8173,
								8177
							],
							[
								8184,
								8188
							],
							[
								8220,
								8253
							],
							[
								8285,
								8328
							],
							[
								8403,
								8407
							],
							[
								8446,
								8485
							],
							[
								8531,
								8574
							],
							[
								8619,
								8658
							],
							[
								8754,
								8787
							],
							[
								8819,
								8839
							],
							[
								9086,
								9108
							],
							[
								11400,
								11411
							],
							[
								12625,
								12638
							],
							[
								13018,
								13052
							],
							[
								13556,
								13600
							],
							[
								13719,
								13739
							],
							[
								14054,
								14064
							],
							[
								14092,
								14102
							],
							[
								14138,
								14151
							],
							[
								14401,
								14415
							],
							[
								15307,
								15316
							],
							[
								15557,
								15576
							],
							[
								16118,
								16131
							],
							[
								16149,
								16154
							],
							[
								16205,
								16218
							],
							[
								16269,
								16290
							],
							[
								16687,
								16703
							],
							[
								17091,
								17096
							],
							[
								17134,
								17149
							],
							[
								17296,
								17304
							],
							[
								17345,
								17353
							],
							[
								17630,
								17658
							],
							[
								17725,
								17759
							],
							[
								17793,
								17798
							],
							[
								17820,
								17850
							],
							[
								18092,
								18100
							],
							[
								18167,
								18171
							],
							[
								18261,
								18268
							],
							[
								18608,
								18632
							],
							[
								18877,
								18882
							],
							[
								20612,
								20656
							],
							[
								21103,
								21129
							],
							[
								21831,
								21854
							],
							[
								21974,
								21996
							],
							[
								22247,
								22251
							],
							[
								22739,
								22743
							],
							[
								23360,
								23389
							],
							[
								23414,
								23418
							],
							[
								23494,
								23517
							],
							[
								23561,
								23567
							],
							[
								23595,
								23599
							],
							[
								23615,
								23652
							],
							[
								23674,
								23690
							],
							[
								23710,
								23717
							],
							[
								23774,
								23802
							],
							[
								23856,
								23867
							],
							[
								23950,
								23958
							],
							[
								24054,
								24058
							],
							[
								24208,
								24212
							],
							[
								24310,
								24315
							],
							[
								24375,
								24386
							],
							[
								24458,
								24469
							],
							[
								24556,
								24561
							],
							[
								24611,
								24617
							],
							[
								24714,
								24722
							],
							[
								24897,
								24926
							],
							[
								25019,
								25072
							],
							[
								25225,
								25229
							],
							[
								25283,
								25287
							],
							[
								25563,
								25570
							],
							[
								25592,
								25598
							],
							[
								25627,
								25658
							],
							[
								25792,
								25816
							],
							[
								25942,
								25953
							],
							[
								25971,
								25987
							],
							[
								26146,
								26151
							],
							[
								26175,
								26179
							],
							[
								26227,
								26236
							],
							[
								26304,
								26309
							],
							[
								26447,
								26452
							],
							[
								26574,
								26585
							],
							[
								26674,
								26681
							],
							[
								27327,
								27343
							],
							[
								29397,
								29463
							],
							[
								29710,
								29749
							],
							[
								29791,
								29805
							],
							[
								30054,
								30088
							],
							[
								30427,
								30441
							],
							[
								30536,
								30540
							],
							[
								30562,
								30576
							],
							[
								30607,
								30611
							],
							[
								31911,
								31927
							],
							[
								31977,
								31992
							],
							[
								32051,
								32070
							],
							[
								32093,
								32105
							],
							[
								32194,
								32198
							],
							[
								32297,
								32301
							],
							[
								32520,
								32526
							],
							[
								32616,
								32630
							],
							[
								32659,
								32677
							],
							[
								32814,
								32826
							],
							[
								32856,
								32921
							],
							[
								32950,
								32955
							],
							[
								33094,
								33132
							],
							[
								33157,
								33177
							],
							[
								33206,
								33255
							],
							[
								33302,
								33312
							],
							[
								33485,
								33495
							],
							[
								33568,
								33578
							],
							[
								33649,
								33659
							],
							[
								34186,
								34267
							],
							[
								34278,
								34301
							],
							[
								34519,
								34524
							],
							[
								34607,
								34616
							],
							[
								34646,
								34652
							],
							[
								34668,
								34697
							],
							[
								34733,
								34746
							],
							[
								34977,
								34983
							],
							[
								34992,
								35003
							],
							[
								35071,
								35093
							],
							[
								35310,
								35333
							],
							[
								35745,
								35774
							],
							[
								36096,
								36123
							],
							[
								36167,
								36180
							],
							[
								36207,
								36212
							],
							[
								36236,
								36241
							],
							[
								36286,
								36296
							],
							[
								36326,
								36336
							],
							[
								36422,
								36427
							],
							[
								36547,
								36552
							],
							[
								36566,
								36574
							],
							[
								36796,
								36800
							],
							[
								36853,
								36857
							],
							[
								36945,
								36958
							],
							[
								37059,
								37072
							],
							[
								37333,
								37366
							],
							[
								37420,
								37424
							],
							[
								37538,
								37564
							],
							[
								37907,
								37940
							],
							[
								38287,
								38332
							],
							[
								38378,
								38382
							],
							[
								38399,
								38428
							],
							[
								38464,
								38470
							],
							[
								38854,
								38924
							],
							[
								39524,
								39596
							],
							[
								39829,
								39834
							],
							[
								40556,
								40560
							],
							[
								40781,
								40854
							],
							[
								41854,
								41878
							]
						],
						"symlist":
						[
							"function Window(width = 1280, height = 900)",
							"begin()",
							"end()",
							"handleMouseButton(button, action, mods)",
							"handleCursorPos(x, y)",
							"handleCursorEnter(cur)",
							".handleCharMods = (char, mods) =>",
							"() =>",
							" () =>",
							"function toXML(obj)",
							" a =>",
							"function renderToXML(component)",
							"function GetFiletime(file, field = 'mtime')",
							"file =>",
							"function FindProjects(dirPtn = '../*/eagle', sortDirection = -1, sortField = 'mtime')",
							"fn =>",
							"minIndex = name =>",
							"file =>",
							"file =>",
							"hasBoth = name =>",
							"name =>",
							"([name, index]) =>",
							"(a, b) =>",
							"([name, index]) =>",
							"function SortFiles(files, direction = 1, statField = 'mtime')",
							"(a, b) =>",
							"([file]) =>",
							"function pick(it, n = 1)",
							"n = i =>",
							"function append(tag, attrs, children, parent, element)",
							"function render(doc, filename)",
							"function CollectParts(doc = project.schematic)",
							"e =>",
							"attr =>",
							"({ name, deviceset, device, value }) =>",
							"function CollectElements(doc = project.board)",
							"e =>",
							"({ name, library, package: pkg, value }) =>",
							"function CollectPartsElements(proj = project)",
							"e =>",
							"a =>",
							"e =>",
							"([{ x, y, ...element }, part]) =>",
							"function ListParts(doc = project.schematic)",
							"p =>",
							"({ name, deviceset, device, value }) =>",
							"function ShowParts(doc = project.schematic)",
							"({ name, deviceset, device, value }) =>",
							"function EaglePrint(file, output)",
							" (dir, base, ext) =>",
							"function main(...args)",
							"toNumber(n)",
							"wire(...args)",
							"coil({ rect, n, diameter, width })",
							"load(filename, project = globalThis.project)",
							"newProject(filename)",
							"sch: () =>",
							"brd: () =>",
							"nextProject()",
							"projectNames()",
							"quit(arg)",
							"renderToString(arg)",
							" (...args) =>",
							"() =>",
							".exit = () =>",
							".debug = (...args) =>",
							".show = value =>",
							"() =>",
							"(item, i, a) =>",
							"entry =>",
							"entry =>",
							"function Terminate(exitCode)",
							"function xml(strings, expressions)",
							" e =>",
							"function UpdateMeasures(board)",
							"lines =>",
							"e =>",
							"line =>",
							"function AlignItem(item)",
							"tr =>",
							"function AlignAll(doc = globalThis.document)",
							"function fixValue(element)",
							"function fixValues(doc)",
							"function coordMap(doc)",
							"p =>",
							"t =>",
							"function GetPolygons(d = doc)",
							"e =>",
							"function FindPolygons()",
							"doc =>",
							"e =>",
							"function RemovePolygons(p = polygons)",
							"([doc, list]) =>",
							"path =>",
							"function GetNames(doc, pred)",
							"pred = e =>",
							"sheet =>",
							"e =>",
							"e =>",
							" e =>",
							"([v, p]) =>",
							"([v, p]) =>",
							"() =>",
							"doc =>",
							"sheet =>",
							"function GetByName(doc, name)",
							"function CorrelateSchematicAndBoard(schematic, board)",
							"d =>",
							"n =>",
							"name =>",
							"doc =>",
							"function GetSheets(doc_or_proj)",
							"function SaveLibraries()",
							"([n, e]) =>",
							"(acc, [n, e]) =>",
							" e =>",
							"e =>",
							"(a, b) =>",
							"id =>",
							"id =>",
							"([n, e]) =>",
							"name =>",
							"(acc, [n, e]) =>",
							"function BoardFromSchematic(doc = project.schematic, f = 1, r=0.5)",
							"function InitBoard(doc = project.board)",
							"([name, e]) =>",
							"async function testEagle(filename)",
							"([name, e]) =>",
							"e =>",
							"([name, i]) =>",
							"p =>",
							"(child, i, a) =>",
							"(child2, i2) =>",
							"([index, equal]) =>",
							"([index]) =>",
							"i =>",
							"i =>",
							"doc =>",
							"([file, e]) =>",
							"([file, xpath]) =>",
							" ([k, v]) =>",
							"function ModifyPath(p, fn = (dir, base, ext) => [dir, base, ext])",
							"() =>",
							"function AppendToFilename(p, str = '')",
							" (dir, base, ext) =>",
							"function SetSVGBackground(xml, color = '#ffffff')",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							"FileFunction = (fn, rfn = ReadFile, wfn = WriteFile, namefn = n => n, ...args) =>",
							" (filename, ...args) =>",
							" n =>",
							" data =>",
							" n =>",
							"function PutRowsColumns(rows)",
							"(acc, row) =>",
							"row =>",
							"(col, i) =>",
							"function GetLibrary(e)",
							"function ElementName(e)",
							"function GetRotation(element)",
							"function Package2Circuit(p)",
							"({ x, y }) =>",
							"pt =>",
							"pt =>",
							"({ x }) =>",
							"({ y }) =>",
							"pt =>",
							"pt =>",
							"coord =>",
							"x =>",
							"y =>",
							"({ x, y }) =>",
							"({ x, y }) =>",
							"function Contactref2Circuit(cref)",
							"e =>",
							"function Signal2Circuit(s)",
							"function Element2Circuit(element)",
							"function GetUsedPackages(doc = project.board)",
							"e =>",
							"function GetPackagePitch(pkg)",
							"pad =>",
							"function Eagle2Circuit(doc = project.board, width = 100, height = 100)",
							"function Eagle2CircuitJS(doc = project.schematic, scale = 50, sheet = 0)",
							" n =>",
							"e =>",
							"function MakeGraph(board = project.board, ignore = /^(GND|[-+][0-9]+V)$/)",
							"function DrawGraph(g, w)"
						]
					},
					"AQAAAAAAAAAAAAAAcw0AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					35,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABzDQAAV2luZG93KHdpZHRoID0gMTI4MCwgaGVpZ2h0ID0gOTAwKQogIGJlZ2luKCkKICBlbmQoKQogIGhhbmRsZU1vdXNlQnV0dG9uKGJ1dHRvbiwgYWN0aW9uLCBtb2RzKQogIGhhbmRsZUN1cnNvclBvcyh4LCB5KQogIGhhbmRsZUN1cnNvckVudGVyKGN1cikKICAuaGFuZGxlQ2hhck1vZHMgPSAoY2hhciwgbW9kcykgPT4KKCkgPT4KKCkgPT4KICB0b1hNTChvYmopCmEgPT4KICByZW5kZXJUb1hNTChjb21wb25lbnQpCkdldEZpbGV0aW1lKGZpbGUsIGZpZWxkID0gJ210aW1lJykKICBmaWxlID0+CkZpbmRQcm9qZWN0cyhkaXJQdG4gPSAnLi4vKi9lYWdsZScsIHNvcnREaXJlY3Rpb24gPSAtMSwgc29ydEZpZWxkID0gJ210aW1lJykKICBmbiA9PgogIG1pbkluZGV4ID0gbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CiAgaGFzQm90aCA9IG5hbWUgPT4KICBuYW1lID0+CihbbmFtZSwgaW5kZXhdKSA9PgooYSwgYikgPT4KKFtuYW1lLCBpbmRleF0pID0+ClNvcnRGaWxlcyhmaWxlcywgZGlyZWN0aW9uID0gMSwgc3RhdEZpZWxkID0gJ210aW1lJykKKGEsIGIpID0+CihbZmlsZV0pID0+CiAgcGljayhpdCwgbiA9IDEpCiAgbiA9IGkgPT4KICBhcHBlbmQodGFnLCBhdHRycywgY2hpbGRyZW4sIHBhcmVudCwgZWxlbWVudCkKICByZW5kZXIoZG9jLCBmaWxlbmFtZSkKQ29sbGVjdFBhcnRzKGRvYyA9IHByb2plY3Quc2NoZW1hdGljKQogIGUgPT4KICBhdHRyID0+Cih7IG5hbWUsIGRldmljZXNldCwgZGV2aWNlLCB2YWx1ZSB9KSA9PgpDb2xsZWN0RWxlbWVudHMoZG9jID0gcHJvamVjdC5ib2FyZCkKICBlID0+Cih7IG5hbWUsIGxpYnJhcnksIHBhY2thZ2U6IHBrZywgdmFsdWUgfSkgPT4KQ29sbGVjdFBhcnRzRWxlbWVudHMocHJvaiA9IHByb2plY3QpCiAgZSA9PgogIGEgPT4KICBlID0+CihbeyB4LCB5LCAuLi5lbGVtZW50IH0sIHBhcnRdKSA9PgpMaXN0UGFydHMoZG9jID0gcHJvamVjdC5zY2hlbWF0aWMpCiAgcCA9PgooeyBuYW1lLCBkZXZpY2VzZXQsIGRldmljZSwgdmFsdWUgfSkgPT4KU2hvd1BhcnRzKGRvYyA9IHByb2plY3Quc2NoZW1hdGljKQooeyBuYW1lLCBkZXZpY2VzZXQsIGRldmljZSwgdmFsdWUgfSkgPT4KRWFnbGVQcmludChmaWxlLCBvdXRwdXQpCihkaXIsIGJhc2UsIGV4dCkgPT4KICBtYWluKC4uLmFyZ3MpCiAgdG9OdW1iZXIobikKICB3aXJlKC4uLmFyZ3MpCiAgY29pbCh7IHJlY3QsIG4sIGRpYW1ldGVyLCB3aWR0aCB9KQogIGxvYWQoZmlsZW5hbWUsIHByb2plY3QgPSBnbG9iYWxUaGlzLnByb2plY3QpCiAgbmV3UHJvamVjdChmaWxlbmFtZSkKICBzY2g6ICgpID0+CiAgYnJkOiAoKSA9PgogIG5leHRQcm9qZWN0KCkKICBwcm9qZWN0TmFtZXMoKQogIHF1aXQoYXJnKQogIHJlbmRlclRvU3RyaW5nKGFyZykKKC4uLmFyZ3MpID0+CigpID0+CiAgLmV4aXQgPSAoKSA9PgogIC5kZWJ1ZyA9ICguLi5hcmdzKSA9PgogIC5zaG93ID0gdmFsdWUgPT4KKCkgPT4KKGl0ZW0sIGksIGEpID0+CiAgZW50cnkgPT4KICBlbnRyeSA9PgpUZXJtaW5hdGUoZXhpdENvZGUpCiAgeG1sKHN0cmluZ3MsIGV4cHJlc3Npb25zKQplID0+ClVwZGF0ZU1lYXN1cmVzKGJvYXJkKQogIGxpbmVzID0+CiAgZSA9PgogIGxpbmUgPT4KQWxpZ25JdGVtKGl0ZW0pCiAgdHIgPT4KQWxpZ25BbGwoZG9jID0gZ2xvYmFsVGhpcy5kb2N1bWVudCkKICBmaXhWYWx1ZShlbGVtZW50KQogIGZpeFZhbHVlcyhkb2MpCiAgY29vcmRNYXAoZG9jKQogIHAgPT4KICB0ID0+CkdldFBvbHlnb25zKGQgPSBkb2MpCiAgZSA9PgpGaW5kUG9seWdvbnMoKQogIGRvYyA9PgogIGUgPT4KUmVtb3ZlUG9seWdvbnMocCA9IHBvbHlnb25zKQooW2RvYywgbGlzdF0pID0+CiAgcGF0aCA9PgpHZXROYW1lcyhkb2MsIHByZWQpCiAgcHJlZCA9IGUgPT4KICBzaGVldCA9PgogIGUgPT4KICBlID0+CmUgPT4KKFt2LCBwXSkgPT4KKFt2LCBwXSkgPT4KKCkgPT4KICBkb2MgPT4KICBzaGVldCA9PgpHZXRCeU5hbWUoZG9jLCBuYW1lKQpDb3JyZWxhdGVTY2hlbWF0aWNBbmRCb2FyZChzY2hlbWF0aWMsIGJvYXJkKQogIGQgPT4KICBuID0+CiAgbmFtZSA9PgogIGRvYyA9PgpHZXRTaGVldHMoZG9jX29yX3Byb2opClNhdmVMaWJyYXJpZXMoKQooW24sIGVdKSA9PgooYWNjLCBbbiwgZV0pID0+CmUgPT4KICBlID0+CihhLCBiKSA9PgogIGlkID0+CiAgaWQgPT4KKFtuLCBlXSkgPT4KICBuYW1lID0+CihhY2MsIFtuLCBlXSkgPT4KQm9hcmRGcm9tU2NoZW1hdGljKGRvYyA9IHByb2plY3Quc2NoZW1hdGljLCBmID0gMSwgcj0wLjUpCkluaXRCb2FyZChkb2MgPSBwcm9qZWN0LmJvYXJkKQooW25hbWUsIGVdKSA9PgogIHRlc3RFYWdsZShmaWxlbmFtZSkKKFtuYW1lLCBlXSkgPT4KICBlID0+CihbbmFtZSwgaV0pID0+CiAgcCA9PgooY2hpbGQsIGksIGEpID0+CihjaGlsZDIsIGkyKSA9PgooW2luZGV4LCBlcXVhbF0pID0+CihbaW5kZXhdKSA9PgogIGkgPT4KICBpID0+CiAgZG9jID0+CihbZmlsZSwgZV0pID0+CihbZmlsZSwgeHBhdGhdKSA9PgooW2ssIHZdKSA9PgpNb2RpZnlQYXRoKHAsIGZuID0gKGRpciwgYmFzZSwgZXh0KSA9PiBbZGlyLCBiYXNlLCBleHRdKQooKSA9PgpBcHBlbmRUb0ZpbGVuYW1lKHAsIHN0ciA9ICcnKQooZGlyLCBiYXNlLCBleHQpID0+ClNldFNWR0JhY2tncm91bmQoeG1sLCBjb2xvciA9ICcjZmZmZmZmJykKKGUsIG4pID0+CihlLCBuKSA9PgooZSwgbikgPT4KKGUsIG4pID0+CkZpbGVGdW5jdGlvbiA9IChmbiwgcmZuID0gUmVhZEZpbGUsIHdmbiA9IFdyaXRlRmlsZSwgbmFtZWZuID0gbiA9PiBuLCAuLi5hcmdzKSA9PgooZmlsZW5hbWUsIC4uLmFyZ3MpID0+Cm4gPT4KZGF0YSA9PgpuID0+ClB1dFJvd3NDb2x1bW5zKHJvd3MpCihhY2MsIHJvdykgPT4KICByb3cgPT4KKGNvbCwgaSkgPT4KR2V0TGlicmFyeShlKQpFbGVtZW50TmFtZShlKQpHZXRSb3RhdGlvbihlbGVtZW50KQpQYWNrYWdlMkNpcmN1aXQocCkKKHsgeCwgeSB9KSA9PgogIHB0ID0+CiAgcHQgPT4KKHsgeCB9KSA9PgooeyB5IH0pID0+CiAgcHQgPT4KICBwdCA9PgogIGNvb3JkID0+CiAgeCA9PgogIHkgPT4KKHsgeCwgeSB9KSA9PgooeyB4LCB5IH0pID0+CkNvbnRhY3RyZWYyQ2lyY3VpdChjcmVmKQogIGUgPT4KU2lnbmFsMkNpcmN1aXQocykKRWxlbWVudDJDaXJjdWl0KGVsZW1lbnQpCkdldFVzZWRQYWNrYWdlcyhkb2MgPSBwcm9qZWN0LmJvYXJkKQogIGUgPT4KR2V0UGFja2FnZVBpdGNoKHBrZykKICBwYWQgPT4KRWFnbGUyQ2lyY3VpdChkb2MgPSBwcm9qZWN0LmJvYXJkLCB3aWR0aCA9IDEwMCwgaGVpZ2h0ID0gMTAwKQpFYWdsZTJDaXJjdWl0SlMoZG9jID0gcHJvamVjdC5zY2hlbWF0aWMsIHNjYWxlID0gNTAsIHNoZWV0ID0gMCkKbiA9PgogIGUgPT4KTWFrZUdyYXBoKGJvYXJkID0gcHJvamVjdC5ib2FyZCwgaWdub3JlID0gL14oR05EfFstK11bMC05XStWKSQvKQpEcmF3R3JhcGgoZywgdykAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					36,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-shell.js",
						"symkeys":
						[
							[
								3224,
								3267
							],
							[
								4053,
								4060
							],
							[
								4160,
								4165
							],
							[
								4251,
								4290
							],
							[
								4375,
								4396
							],
							[
								4463,
								4485
							],
							[
								4563,
								4596
							],
							[
								4703,
								4708
							],
							[
								4771,
								4777
							],
							[
								4879,
								4898
							],
							[
								4920,
								4925
							],
							[
								5028,
								5059
							],
							[
								5110,
								5153
							],
							[
								5198,
								5205
							],
							[
								5306,
								5391
							],
							[
								5543,
								5548
							],
							[
								5593,
								5611
							],
							[
								5650,
								5657
							],
							[
								5706,
								5713
							],
							[
								5752,
								5769
							],
							[
								5816,
								5823
							],
							[
								5860,
								5878
							],
							[
								5901,
								5910
							],
							[
								5933,
								5951
							],
							[
								5962,
								6023
							],
							[
								6143,
								6152
							],
							[
								6189,
								6200
							],
							[
								6211,
								6235
							],
							[
								6316,
								6324
							],
							[
								6507,
								6561
							],
							[
								6780,
								6810
							],
							[
								7462,
								7508
							],
							[
								7548,
								7552
							],
							[
								7579,
								7586
							],
							[
								7672,
								7711
							],
							[
								7796,
								7841
							],
							[
								7879,
								7883
							],
							[
								7907,
								7950
							],
							[
								8029,
								8074
							],
							[
								8119,
								8123
							],
							[
								8173,
								8177
							],
							[
								8184,
								8188
							],
							[
								8220,
								8253
							],
							[
								8285,
								8328
							],
							[
								8403,
								8407
							],
							[
								8446,
								8485
							],
							[
								8531,
								8574
							],
							[
								8619,
								8658
							],
							[
								8754,
								8787
							],
							[
								8819,
								8839
							],
							[
								9086,
								9108
							],
							[
								11400,
								11411
							],
							[
								12625,
								12638
							],
							[
								13018,
								13052
							],
							[
								13556,
								13600
							],
							[
								13719,
								13739
							],
							[
								14054,
								14064
							],
							[
								14092,
								14102
							],
							[
								14138,
								14151
							],
							[
								14401,
								14415
							],
							[
								15307,
								15316
							],
							[
								15557,
								15576
							],
							[
								16118,
								16131
							],
							[
								16149,
								16154
							],
							[
								16205,
								16218
							],
							[
								16269,
								16290
							],
							[
								16687,
								16703
							],
							[
								17091,
								17096
							],
							[
								17134,
								17149
							],
							[
								17296,
								17304
							],
							[
								17345,
								17353
							],
							[
								17630,
								17658
							],
							[
								17725,
								17759
							],
							[
								17793,
								17798
							],
							[
								17820,
								17850
							],
							[
								18092,
								18100
							],
							[
								18167,
								18171
							],
							[
								18261,
								18268
							],
							[
								18608,
								18632
							],
							[
								18877,
								18882
							],
							[
								20612,
								20656
							],
							[
								21103,
								21129
							],
							[
								21831,
								21854
							],
							[
								21974,
								21996
							],
							[
								22247,
								22251
							],
							[
								22739,
								22743
							],
							[
								23360,
								23389
							],
							[
								23414,
								23418
							],
							[
								23494,
								23517
							],
							[
								23561,
								23567
							],
							[
								23595,
								23599
							],
							[
								23615,
								23652
							],
							[
								23674,
								23690
							],
							[
								23710,
								23717
							],
							[
								23774,
								23802
							],
							[
								23856,
								23867
							],
							[
								23950,
								23958
							],
							[
								24054,
								24058
							],
							[
								24208,
								24212
							],
							[
								24310,
								24315
							],
							[
								24375,
								24386
							],
							[
								24458,
								24469
							],
							[
								24556,
								24561
							],
							[
								24611,
								24617
							],
							[
								24714,
								24722
							],
							[
								24897,
								24926
							],
							[
								25019,
								25072
							],
							[
								25225,
								25229
							],
							[
								25283,
								25287
							],
							[
								25563,
								25570
							],
							[
								25592,
								25598
							],
							[
								25627,
								25658
							],
							[
								25792,
								25816
							],
							[
								25942,
								25953
							],
							[
								25971,
								25987
							],
							[
								26146,
								26151
							],
							[
								26175,
								26179
							],
							[
								26227,
								26236
							],
							[
								26304,
								26309
							],
							[
								26447,
								26452
							],
							[
								26574,
								26585
							],
							[
								26674,
								26681
							],
							[
								27327,
								27343
							],
							[
								29397,
								29463
							],
							[
								29710,
								29749
							],
							[
								29791,
								29805
							],
							[
								30054,
								30088
							],
							[
								30427,
								30441
							],
							[
								30536,
								30540
							],
							[
								30562,
								30576
							],
							[
								30607,
								30611
							],
							[
								31911,
								31927
							],
							[
								31977,
								31992
							],
							[
								32051,
								32070
							],
							[
								32093,
								32105
							],
							[
								32194,
								32198
							],
							[
								32297,
								32301
							],
							[
								32520,
								32526
							],
							[
								32616,
								32630
							],
							[
								32659,
								32677
							],
							[
								32814,
								32826
							],
							[
								32856,
								32921
							],
							[
								32950,
								32955
							],
							[
								33094,
								33132
							],
							[
								33157,
								33177
							],
							[
								33206,
								33255
							],
							[
								33302,
								33312
							],
							[
								33485,
								33495
							],
							[
								33568,
								33578
							],
							[
								33649,
								33659
							],
							[
								34186,
								34267
							],
							[
								34278,
								34301
							],
							[
								34519,
								34524
							],
							[
								34607,
								34616
							],
							[
								34646,
								34652
							],
							[
								34668,
								34697
							],
							[
								34733,
								34746
							],
							[
								34977,
								34983
							],
							[
								34992,
								35003
							],
							[
								35071,
								35093
							],
							[
								35310,
								35333
							],
							[
								35745,
								35774
							],
							[
								36096,
								36123
							],
							[
								36167,
								36180
							],
							[
								36207,
								36212
							],
							[
								36236,
								36241
							],
							[
								36286,
								36296
							],
							[
								36326,
								36336
							],
							[
								36422,
								36427
							],
							[
								36547,
								36552
							],
							[
								36566,
								36574
							],
							[
								36796,
								36800
							],
							[
								36853,
								36857
							],
							[
								36945,
								36958
							],
							[
								37059,
								37072
							],
							[
								37333,
								37366
							],
							[
								37420,
								37424
							],
							[
								37538,
								37564
							],
							[
								37907,
								37940
							],
							[
								38287,
								38332
							],
							[
								38378,
								38382
							],
							[
								38399,
								38428
							],
							[
								38464,
								38470
							],
							[
								38854,
								38924
							],
							[
								39524,
								39596
							],
							[
								39829,
								39834
							],
							[
								40556,
								40560
							],
							[
								40781,
								40854
							],
							[
								41854,
								41878
							]
						],
						"symlist":
						[
							"function Window(width = 1280, height = 900)",
							"begin()",
							"end()",
							"handleMouseButton(button, action, mods)",
							"handleCursorPos(x, y)",
							"handleCursorEnter(cur)",
							".handleCharMods = (char, mods) =>",
							"() =>",
							" () =>",
							"function toXML(obj)",
							" a =>",
							"function renderToXML(component)",
							"function GetFiletime(file, field = 'mtime')",
							"file =>",
							"function FindProjects(dirPtn = '../*/eagle', sortDirection = -1, sortField = 'mtime')",
							"fn =>",
							"minIndex = name =>",
							"file =>",
							"file =>",
							"hasBoth = name =>",
							"name =>",
							"([name, index]) =>",
							"(a, b) =>",
							"([name, index]) =>",
							"function SortFiles(files, direction = 1, statField = 'mtime')",
							"(a, b) =>",
							"([file]) =>",
							"function pick(it, n = 1)",
							"n = i =>",
							"function append(tag, attrs, children, parent, element)",
							"function render(doc, filename)",
							"function CollectParts(doc = project.schematic)",
							"e =>",
							"attr =>",
							"({ name, deviceset, device, value }) =>",
							"function CollectElements(doc = project.board)",
							"e =>",
							"({ name, library, package: pkg, value }) =>",
							"function CollectPartsElements(proj = project)",
							"e =>",
							"a =>",
							"e =>",
							"([{ x, y, ...element }, part]) =>",
							"function ListParts(doc = project.schematic)",
							"p =>",
							"({ name, deviceset, device, value }) =>",
							"function ShowParts(doc = project.schematic)",
							"({ name, deviceset, device, value }) =>",
							"function EaglePrint(file, output)",
							" (dir, base, ext) =>",
							"function main(...args)",
							"toNumber(n)",
							"wire(...args)",
							"coil({ rect, n, diameter, width })",
							"load(filename, project = globalThis.project)",
							"newProject(filename)",
							"sch: () =>",
							"brd: () =>",
							"nextProject()",
							"projectNames()",
							"quit(arg)",
							"renderToString(arg)",
							" (...args) =>",
							"() =>",
							".exit = () =>",
							".debug = (...args) =>",
							".show = value =>",
							"() =>",
							"(item, i, a) =>",
							"entry =>",
							"entry =>",
							"function Terminate(exitCode)",
							"function xml(strings, expressions)",
							" e =>",
							"function UpdateMeasures(board)",
							"lines =>",
							"e =>",
							"line =>",
							"function AlignItem(item)",
							"tr =>",
							"function AlignAll(doc = globalThis.document)",
							"function fixValue(element)",
							"function fixValues(doc)",
							"function coordMap(doc)",
							"p =>",
							"t =>",
							"function GetPolygons(d = doc)",
							"e =>",
							"function FindPolygons()",
							"doc =>",
							"e =>",
							"function RemovePolygons(p = polygons)",
							"([doc, list]) =>",
							"path =>",
							"function GetNames(doc, pred)",
							"pred = e =>",
							"sheet =>",
							"e =>",
							"e =>",
							" e =>",
							"([v, p]) =>",
							"([v, p]) =>",
							"() =>",
							"doc =>",
							"sheet =>",
							"function GetByName(doc, name)",
							"function CorrelateSchematicAndBoard(schematic, board)",
							"d =>",
							"n =>",
							"name =>",
							"doc =>",
							"function GetSheets(doc_or_proj)",
							"function SaveLibraries()",
							"([n, e]) =>",
							"(acc, [n, e]) =>",
							" e =>",
							"e =>",
							"(a, b) =>",
							"id =>",
							"id =>",
							"([n, e]) =>",
							"name =>",
							"(acc, [n, e]) =>",
							"function BoardFromSchematic(doc = project.schematic, f = 1, r=0.5)",
							"function InitBoard(doc = project.board)",
							"([name, e]) =>",
							"async function testEagle(filename)",
							"([name, e]) =>",
							"e =>",
							"([name, i]) =>",
							"p =>",
							"(child, i, a) =>",
							"(child2, i2) =>",
							"([index, equal]) =>",
							"([index]) =>",
							"i =>",
							"i =>",
							"doc =>",
							"([file, e]) =>",
							"([file, xpath]) =>",
							" ([k, v]) =>",
							"function ModifyPath(p, fn = (dir, base, ext) => [dir, base, ext])",
							"() =>",
							"function AppendToFilename(p, str = '')",
							" (dir, base, ext) =>",
							"function SetSVGBackground(xml, color = '#ffffff')",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							"FileFunction = (fn, rfn = ReadFile, wfn = WriteFile, namefn = n => n, ...args) =>",
							" (filename, ...args) =>",
							" n =>",
							" data =>",
							" n =>",
							"function PutRowsColumns(rows)",
							"(acc, row) =>",
							"row =>",
							"(col, i) =>",
							"function GetLibrary(e)",
							"function ElementName(e)",
							"function GetRotation(element)",
							"function Package2Circuit(p)",
							"({ x, y }) =>",
							"pt =>",
							"pt =>",
							"({ x }) =>",
							"({ y }) =>",
							"pt =>",
							"pt =>",
							"coord =>",
							"x =>",
							"y =>",
							"({ x, y }) =>",
							"({ x, y }) =>",
							"function Contactref2Circuit(cref)",
							"e =>",
							"function Signal2Circuit(s)",
							"function Element2Circuit(element)",
							"function GetUsedPackages(doc = project.board)",
							"e =>",
							"function GetPackagePitch(pkg)",
							"pad =>",
							"function Eagle2Circuit(doc = project.board, width = 100, height = 100)",
							"function Eagle2CircuitJS(doc = project.schematic, scale = 50, sheet = 0)",
							" n =>",
							"e =>",
							"function MakeGraph(board = project.board, ignore = /^(GND|[-+][0-9]+V)$/)",
							"function DrawGraph(g, w)"
						]
					},
					"AQAAAAAAAAAAAAAAcw0AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					37,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABzDQAAV2luZG93KHdpZHRoID0gMTI4MCwgaGVpZ2h0ID0gOTAwKQogIGJlZ2luKCkKICBlbmQoKQogIGhhbmRsZU1vdXNlQnV0dG9uKGJ1dHRvbiwgYWN0aW9uLCBtb2RzKQogIGhhbmRsZUN1cnNvclBvcyh4LCB5KQogIGhhbmRsZUN1cnNvckVudGVyKGN1cikKICAuaGFuZGxlQ2hhck1vZHMgPSAoY2hhciwgbW9kcykgPT4KKCkgPT4KKCkgPT4KICB0b1hNTChvYmopCmEgPT4KICByZW5kZXJUb1hNTChjb21wb25lbnQpCkdldEZpbGV0aW1lKGZpbGUsIGZpZWxkID0gJ210aW1lJykKICBmaWxlID0+CkZpbmRQcm9qZWN0cyhkaXJQdG4gPSAnLi4vKi9lYWdsZScsIHNvcnREaXJlY3Rpb24gPSAtMSwgc29ydEZpZWxkID0gJ210aW1lJykKICBmbiA9PgogIG1pbkluZGV4ID0gbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CiAgaGFzQm90aCA9IG5hbWUgPT4KICBuYW1lID0+CihbbmFtZSwgaW5kZXhdKSA9PgooYSwgYikgPT4KKFtuYW1lLCBpbmRleF0pID0+ClNvcnRGaWxlcyhmaWxlcywgZGlyZWN0aW9uID0gMSwgc3RhdEZpZWxkID0gJ210aW1lJykKKGEsIGIpID0+CihbZmlsZV0pID0+CiAgcGljayhpdCwgbiA9IDEpCiAgbiA9IGkgPT4KICBhcHBlbmQodGFnLCBhdHRycywgY2hpbGRyZW4sIHBhcmVudCwgZWxlbWVudCkKICByZW5kZXIoZG9jLCBmaWxlbmFtZSkKQ29sbGVjdFBhcnRzKGRvYyA9IHByb2plY3Quc2NoZW1hdGljKQogIGUgPT4KICBhdHRyID0+Cih7IG5hbWUsIGRldmljZXNldCwgZGV2aWNlLCB2YWx1ZSB9KSA9PgpDb2xsZWN0RWxlbWVudHMoZG9jID0gcHJvamVjdC5ib2FyZCkKICBlID0+Cih7IG5hbWUsIGxpYnJhcnksIHBhY2thZ2U6IHBrZywgdmFsdWUgfSkgPT4KQ29sbGVjdFBhcnRzRWxlbWVudHMocHJvaiA9IHByb2plY3QpCiAgZSA9PgogIGEgPT4KICBlID0+CihbeyB4LCB5LCAuLi5lbGVtZW50IH0sIHBhcnRdKSA9PgpMaXN0UGFydHMoZG9jID0gcHJvamVjdC5zY2hlbWF0aWMpCiAgcCA9PgooeyBuYW1lLCBkZXZpY2VzZXQsIGRldmljZSwgdmFsdWUgfSkgPT4KU2hvd1BhcnRzKGRvYyA9IHByb2plY3Quc2NoZW1hdGljKQooeyBuYW1lLCBkZXZpY2VzZXQsIGRldmljZSwgdmFsdWUgfSkgPT4KRWFnbGVQcmludChmaWxlLCBvdXRwdXQpCihkaXIsIGJhc2UsIGV4dCkgPT4KICBtYWluKC4uLmFyZ3MpCiAgdG9OdW1iZXIobikKICB3aXJlKC4uLmFyZ3MpCiAgY29pbCh7IHJlY3QsIG4sIGRpYW1ldGVyLCB3aWR0aCB9KQogIGxvYWQoZmlsZW5hbWUsIHByb2plY3QgPSBnbG9iYWxUaGlzLnByb2plY3QpCiAgbmV3UHJvamVjdChmaWxlbmFtZSkKICBzY2g6ICgpID0+CiAgYnJkOiAoKSA9PgogIG5leHRQcm9qZWN0KCkKICBwcm9qZWN0TmFtZXMoKQogIHF1aXQoYXJnKQogIHJlbmRlclRvU3RyaW5nKGFyZykKKC4uLmFyZ3MpID0+CigpID0+CiAgLmV4aXQgPSAoKSA9PgogIC5kZWJ1ZyA9ICguLi5hcmdzKSA9PgogIC5zaG93ID0gdmFsdWUgPT4KKCkgPT4KKGl0ZW0sIGksIGEpID0+CiAgZW50cnkgPT4KICBlbnRyeSA9PgpUZXJtaW5hdGUoZXhpdENvZGUpCiAgeG1sKHN0cmluZ3MsIGV4cHJlc3Npb25zKQplID0+ClVwZGF0ZU1lYXN1cmVzKGJvYXJkKQogIGxpbmVzID0+CiAgZSA9PgogIGxpbmUgPT4KQWxpZ25JdGVtKGl0ZW0pCiAgdHIgPT4KQWxpZ25BbGwoZG9jID0gZ2xvYmFsVGhpcy5kb2N1bWVudCkKICBmaXhWYWx1ZShlbGVtZW50KQogIGZpeFZhbHVlcyhkb2MpCiAgY29vcmRNYXAoZG9jKQogIHAgPT4KICB0ID0+CkdldFBvbHlnb25zKGQgPSBkb2MpCiAgZSA9PgpGaW5kUG9seWdvbnMoKQogIGRvYyA9PgogIGUgPT4KUmVtb3ZlUG9seWdvbnMocCA9IHBvbHlnb25zKQooW2RvYywgbGlzdF0pID0+CiAgcGF0aCA9PgpHZXROYW1lcyhkb2MsIHByZWQpCiAgcHJlZCA9IGUgPT4KICBzaGVldCA9PgogIGUgPT4KICBlID0+CmUgPT4KKFt2LCBwXSkgPT4KKFt2LCBwXSkgPT4KKCkgPT4KICBkb2MgPT4KICBzaGVldCA9PgpHZXRCeU5hbWUoZG9jLCBuYW1lKQpDb3JyZWxhdGVTY2hlbWF0aWNBbmRCb2FyZChzY2hlbWF0aWMsIGJvYXJkKQogIGQgPT4KICBuID0+CiAgbmFtZSA9PgogIGRvYyA9PgpHZXRTaGVldHMoZG9jX29yX3Byb2opClNhdmVMaWJyYXJpZXMoKQooW24sIGVdKSA9PgooYWNjLCBbbiwgZV0pID0+CmUgPT4KICBlID0+CihhLCBiKSA9PgogIGlkID0+CiAgaWQgPT4KKFtuLCBlXSkgPT4KICBuYW1lID0+CihhY2MsIFtuLCBlXSkgPT4KQm9hcmRGcm9tU2NoZW1hdGljKGRvYyA9IHByb2plY3Quc2NoZW1hdGljLCBmID0gMSwgcj0wLjUpCkluaXRCb2FyZChkb2MgPSBwcm9qZWN0LmJvYXJkKQooW25hbWUsIGVdKSA9PgogIHRlc3RFYWdsZShmaWxlbmFtZSkKKFtuYW1lLCBlXSkgPT4KICBlID0+CihbbmFtZSwgaV0pID0+CiAgcCA9PgooY2hpbGQsIGksIGEpID0+CihjaGlsZDIsIGkyKSA9PgooW2luZGV4LCBlcXVhbF0pID0+CihbaW5kZXhdKSA9PgogIGkgPT4KICBpID0+CiAgZG9jID0+CihbZmlsZSwgZV0pID0+CihbZmlsZSwgeHBhdGhdKSA9PgooW2ssIHZdKSA9PgpNb2RpZnlQYXRoKHAsIGZuID0gKGRpciwgYmFzZSwgZXh0KSA9PiBbZGlyLCBiYXNlLCBleHRdKQooKSA9PgpBcHBlbmRUb0ZpbGVuYW1lKHAsIHN0ciA9ICcnKQooZGlyLCBiYXNlLCBleHQpID0+ClNldFNWR0JhY2tncm91bmQoeG1sLCBjb2xvciA9ICcjZmZmZmZmJykKKGUsIG4pID0+CihlLCBuKSA9PgooZSwgbikgPT4KKGUsIG4pID0+CkZpbGVGdW5jdGlvbiA9IChmbiwgcmZuID0gUmVhZEZpbGUsIHdmbiA9IFdyaXRlRmlsZSwgbmFtZWZuID0gbiA9PiBuLCAuLi5hcmdzKSA9PgooZmlsZW5hbWUsIC4uLmFyZ3MpID0+Cm4gPT4KZGF0YSA9PgpuID0+ClB1dFJvd3NDb2x1bW5zKHJvd3MpCihhY2MsIHJvdykgPT4KICByb3cgPT4KKGNvbCwgaSkgPT4KR2V0TGlicmFyeShlKQpFbGVtZW50TmFtZShlKQpHZXRSb3RhdGlvbihlbGVtZW50KQpQYWNrYWdlMkNpcmN1aXQocCkKKHsgeCwgeSB9KSA9PgogIHB0ID0+CiAgcHQgPT4KKHsgeCB9KSA9PgooeyB5IH0pID0+CiAgcHQgPT4KICBwdCA9PgogIGNvb3JkID0+CiAgeCA9PgogIHkgPT4KKHsgeCwgeSB9KSA9PgooeyB4LCB5IH0pID0+CkNvbnRhY3RyZWYyQ2lyY3VpdChjcmVmKQogIGUgPT4KU2lnbmFsMkNpcmN1aXQocykKRWxlbWVudDJDaXJjdWl0KGVsZW1lbnQpCkdldFVzZWRQYWNrYWdlcyhkb2MgPSBwcm9qZWN0LmJvYXJkKQogIGUgPT4KR2V0UGFja2FnZVBpdGNoKHBrZykKICBwYWQgPT4KRWFnbGUyQ2lyY3VpdChkb2MgPSBwcm9qZWN0LmJvYXJkLCB3aWR0aCA9IDEwMCwgaGVpZ2h0ID0gMTAwKQpFYWdsZTJDaXJjdWl0SlMoZG9jID0gcHJvamVjdC5zY2hlbWF0aWMsIHNjYWxlID0gNTAsIHNoZWV0ID0gMCkKbiA9PgogIGUgPT4KTWFrZUdyYXBoKGJvYXJkID0gcHJvamVjdC5ib2FyZCwgaWdub3JlID0gL14oR05EfFstK11bMC05XStWKSQvKQpEcmF3R3JhcGgoZywgdykAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					38,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					39,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					40,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-shell.js",
						"symkeys":
						[
							[
								3224,
								3267
							],
							[
								4053,
								4060
							],
							[
								4160,
								4165
							],
							[
								4251,
								4290
							],
							[
								4375,
								4396
							],
							[
								4463,
								4485
							],
							[
								4563,
								4596
							],
							[
								4703,
								4708
							],
							[
								4771,
								4777
							],
							[
								4879,
								4898
							],
							[
								4920,
								4925
							],
							[
								5028,
								5059
							],
							[
								5110,
								5153
							],
							[
								5198,
								5205
							],
							[
								5306,
								5391
							],
							[
								5543,
								5548
							],
							[
								5593,
								5611
							],
							[
								5650,
								5657
							],
							[
								5706,
								5713
							],
							[
								5752,
								5769
							],
							[
								5816,
								5823
							],
							[
								5860,
								5878
							],
							[
								5901,
								5910
							],
							[
								5933,
								5951
							],
							[
								5962,
								6023
							],
							[
								6143,
								6152
							],
							[
								6189,
								6200
							],
							[
								6211,
								6235
							],
							[
								6316,
								6324
							],
							[
								6507,
								6561
							],
							[
								6780,
								6810
							],
							[
								7462,
								7508
							],
							[
								7548,
								7552
							],
							[
								7579,
								7586
							],
							[
								7672,
								7711
							],
							[
								7796,
								7841
							],
							[
								7879,
								7883
							],
							[
								7907,
								7950
							],
							[
								8029,
								8074
							],
							[
								8119,
								8123
							],
							[
								8173,
								8177
							],
							[
								8184,
								8188
							],
							[
								8220,
								8253
							],
							[
								8285,
								8328
							],
							[
								8403,
								8407
							],
							[
								8446,
								8485
							],
							[
								8531,
								8574
							],
							[
								8619,
								8658
							],
							[
								8754,
								8787
							],
							[
								8819,
								8839
							],
							[
								9086,
								9108
							],
							[
								11400,
								11411
							],
							[
								12625,
								12638
							],
							[
								13018,
								13052
							],
							[
								13556,
								13600
							],
							[
								13719,
								13739
							],
							[
								14054,
								14064
							],
							[
								14092,
								14102
							],
							[
								14138,
								14151
							],
							[
								14401,
								14415
							],
							[
								15307,
								15316
							],
							[
								15557,
								15576
							],
							[
								16118,
								16131
							],
							[
								16149,
								16154
							],
							[
								16205,
								16218
							],
							[
								16269,
								16290
							],
							[
								16687,
								16703
							],
							[
								17091,
								17096
							],
							[
								17134,
								17149
							],
							[
								17296,
								17304
							],
							[
								17345,
								17353
							],
							[
								17630,
								17658
							],
							[
								17725,
								17759
							],
							[
								17793,
								17798
							],
							[
								17820,
								17850
							],
							[
								18092,
								18100
							],
							[
								18167,
								18171
							],
							[
								18261,
								18268
							],
							[
								18608,
								18632
							],
							[
								18877,
								18882
							],
							[
								20612,
								20656
							],
							[
								21103,
								21129
							],
							[
								21831,
								21854
							],
							[
								21974,
								21996
							],
							[
								22247,
								22251
							],
							[
								22739,
								22743
							],
							[
								23360,
								23389
							],
							[
								23414,
								23418
							],
							[
								23494,
								23517
							],
							[
								23561,
								23567
							],
							[
								23595,
								23599
							],
							[
								23615,
								23652
							],
							[
								23674,
								23690
							],
							[
								23710,
								23717
							],
							[
								23774,
								23802
							],
							[
								23856,
								23867
							],
							[
								23950,
								23958
							],
							[
								24054,
								24058
							],
							[
								24208,
								24212
							],
							[
								24310,
								24315
							],
							[
								24375,
								24386
							],
							[
								24458,
								24469
							],
							[
								24556,
								24561
							],
							[
								24611,
								24617
							],
							[
								24714,
								24722
							],
							[
								24897,
								24926
							],
							[
								25019,
								25072
							],
							[
								25225,
								25229
							],
							[
								25283,
								25287
							],
							[
								25563,
								25570
							],
							[
								25592,
								25598
							],
							[
								25627,
								25658
							],
							[
								25792,
								25816
							],
							[
								25942,
								25953
							],
							[
								25971,
								25987
							],
							[
								26146,
								26151
							],
							[
								26175,
								26179
							],
							[
								26227,
								26236
							],
							[
								26304,
								26309
							],
							[
								26447,
								26452
							],
							[
								26574,
								26585
							],
							[
								26674,
								26681
							],
							[
								27327,
								27343
							],
							[
								29397,
								29463
							],
							[
								29710,
								29749
							],
							[
								29791,
								29805
							],
							[
								30054,
								30088
							],
							[
								30427,
								30441
							],
							[
								30536,
								30540
							],
							[
								30562,
								30576
							],
							[
								30607,
								30611
							],
							[
								31911,
								31927
							],
							[
								31977,
								31992
							],
							[
								32051,
								32070
							],
							[
								32093,
								32105
							],
							[
								32194,
								32198
							],
							[
								32297,
								32301
							],
							[
								32520,
								32526
							],
							[
								32616,
								32630
							],
							[
								32659,
								32677
							],
							[
								32814,
								32826
							],
							[
								32856,
								32921
							],
							[
								32950,
								32955
							],
							[
								33094,
								33132
							],
							[
								33157,
								33177
							],
							[
								33206,
								33255
							],
							[
								33302,
								33312
							],
							[
								33485,
								33495
							],
							[
								33568,
								33578
							],
							[
								33649,
								33659
							],
							[
								34186,
								34267
							],
							[
								34278,
								34301
							],
							[
								34519,
								34524
							],
							[
								34607,
								34616
							],
							[
								34646,
								34652
							],
							[
								34668,
								34697
							],
							[
								34733,
								34746
							],
							[
								34977,
								34983
							],
							[
								34992,
								35003
							],
							[
								35071,
								35093
							],
							[
								35310,
								35333
							],
							[
								35745,
								35774
							],
							[
								36096,
								36123
							],
							[
								36167,
								36180
							],
							[
								36207,
								36212
							],
							[
								36236,
								36241
							],
							[
								36286,
								36296
							],
							[
								36326,
								36336
							],
							[
								36422,
								36427
							],
							[
								36547,
								36552
							],
							[
								36566,
								36574
							],
							[
								36796,
								36800
							],
							[
								36853,
								36857
							],
							[
								36945,
								36958
							],
							[
								37059,
								37072
							],
							[
								37333,
								37366
							],
							[
								37420,
								37424
							],
							[
								37538,
								37564
							],
							[
								37907,
								37940
							],
							[
								38287,
								38332
							],
							[
								38378,
								38382
							],
							[
								38399,
								38428
							],
							[
								38464,
								38470
							],
							[
								38854,
								38924
							],
							[
								39524,
								39596
							],
							[
								39829,
								39834
							],
							[
								40556,
								40560
							],
							[
								40781,
								40854
							],
							[
								41854,
								41878
							]
						],
						"symlist":
						[
							"function Window(width = 1280, height = 900)",
							"begin()",
							"end()",
							"handleMouseButton(button, action, mods)",
							"handleCursorPos(x, y)",
							"handleCursorEnter(cur)",
							".handleCharMods = (char, mods) =>",
							"() =>",
							" () =>",
							"function toXML(obj)",
							" a =>",
							"function renderToXML(component)",
							"function GetFiletime(file, field = 'mtime')",
							"file =>",
							"function FindProjects(dirPtn = '../*/eagle', sortDirection = -1, sortField = 'mtime')",
							"fn =>",
							"minIndex = name =>",
							"file =>",
							"file =>",
							"hasBoth = name =>",
							"name =>",
							"([name, index]) =>",
							"(a, b) =>",
							"([name, index]) =>",
							"function SortFiles(files, direction = 1, statField = 'mtime')",
							"(a, b) =>",
							"([file]) =>",
							"function pick(it, n = 1)",
							"n = i =>",
							"function append(tag, attrs, children, parent, element)",
							"function render(doc, filename)",
							"function CollectParts(doc = project.schematic)",
							"e =>",
							"attr =>",
							"({ name, deviceset, device, value }) =>",
							"function CollectElements(doc = project.board)",
							"e =>",
							"({ name, library, package: pkg, value }) =>",
							"function CollectPartsElements(proj = project)",
							"e =>",
							"a =>",
							"e =>",
							"([{ x, y, ...element }, part]) =>",
							"function ListParts(doc = project.schematic)",
							"p =>",
							"({ name, deviceset, device, value }) =>",
							"function ShowParts(doc = project.schematic)",
							"({ name, deviceset, device, value }) =>",
							"function EaglePrint(file, output)",
							" (dir, base, ext) =>",
							"function main(...args)",
							"toNumber(n)",
							"wire(...args)",
							"coil({ rect, n, diameter, width })",
							"load(filename, project = globalThis.project)",
							"newProject(filename)",
							"sch: () =>",
							"brd: () =>",
							"nextProject()",
							"projectNames()",
							"quit(arg)",
							"renderToString(arg)",
							" (...args) =>",
							"() =>",
							".exit = () =>",
							".debug = (...args) =>",
							".show = value =>",
							"() =>",
							"(item, i, a) =>",
							"entry =>",
							"entry =>",
							"function Terminate(exitCode)",
							"function xml(strings, expressions)",
							" e =>",
							"function UpdateMeasures(board)",
							"lines =>",
							"e =>",
							"line =>",
							"function AlignItem(item)",
							"tr =>",
							"function AlignAll(doc = globalThis.document)",
							"function fixValue(element)",
							"function fixValues(doc)",
							"function coordMap(doc)",
							"p =>",
							"t =>",
							"function GetPolygons(d = doc)",
							"e =>",
							"function FindPolygons()",
							"doc =>",
							"e =>",
							"function RemovePolygons(p = polygons)",
							"([doc, list]) =>",
							"path =>",
							"function GetNames(doc, pred)",
							"pred = e =>",
							"sheet =>",
							"e =>",
							"e =>",
							" e =>",
							"([v, p]) =>",
							"([v, p]) =>",
							"() =>",
							"doc =>",
							"sheet =>",
							"function GetByName(doc, name)",
							"function CorrelateSchematicAndBoard(schematic, board)",
							"d =>",
							"n =>",
							"name =>",
							"doc =>",
							"function GetSheets(doc_or_proj)",
							"function SaveLibraries()",
							"([n, e]) =>",
							"(acc, [n, e]) =>",
							" e =>",
							"e =>",
							"(a, b) =>",
							"id =>",
							"id =>",
							"([n, e]) =>",
							"name =>",
							"(acc, [n, e]) =>",
							"function BoardFromSchematic(doc = project.schematic, f = 1, r=0.5)",
							"function InitBoard(doc = project.board)",
							"([name, e]) =>",
							"async function testEagle(filename)",
							"([name, e]) =>",
							"e =>",
							"([name, i]) =>",
							"p =>",
							"(child, i, a) =>",
							"(child2, i2) =>",
							"([index, equal]) =>",
							"([index]) =>",
							"i =>",
							"i =>",
							"doc =>",
							"([file, e]) =>",
							"([file, xpath]) =>",
							" ([k, v]) =>",
							"function ModifyPath(p, fn = (dir, base, ext) => [dir, base, ext])",
							"() =>",
							"function AppendToFilename(p, str = '')",
							" (dir, base, ext) =>",
							"function SetSVGBackground(xml, color = '#ffffff')",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							"FileFunction = (fn, rfn = ReadFile, wfn = WriteFile, namefn = n => n, ...args) =>",
							" (filename, ...args) =>",
							" n =>",
							" data =>",
							" n =>",
							"function PutRowsColumns(rows)",
							"(acc, row) =>",
							"row =>",
							"(col, i) =>",
							"function GetLibrary(e)",
							"function ElementName(e)",
							"function GetRotation(element)",
							"function Package2Circuit(p)",
							"({ x, y }) =>",
							"pt =>",
							"pt =>",
							"({ x }) =>",
							"({ y }) =>",
							"pt =>",
							"pt =>",
							"coord =>",
							"x =>",
							"y =>",
							"({ x, y }) =>",
							"({ x, y }) =>",
							"function Contactref2Circuit(cref)",
							"e =>",
							"function Signal2Circuit(s)",
							"function Element2Circuit(element)",
							"function GetUsedPackages(doc = project.board)",
							"e =>",
							"function GetPackagePitch(pkg)",
							"pad =>",
							"function Eagle2Circuit(doc = project.board, width = 100, height = 100)",
							"function Eagle2CircuitJS(doc = project.schematic, scale = 50, sheet = 0)",
							" n =>",
							"e =>",
							"function MakeGraph(board = project.board, ignore = /^(GND|[-+][0-9]+V)$/)",
							"function DrawGraph(g, w)"
						]
					},
					"AQAAAAAAAAAAAAAAcw0AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					41,
					3,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-shell.js",
						"symkeys":
						[
							[
								3224,
								3267
							],
							[
								4053,
								4060
							],
							[
								4160,
								4165
							],
							[
								4251,
								4290
							],
							[
								4375,
								4396
							],
							[
								4463,
								4485
							],
							[
								4563,
								4596
							],
							[
								4703,
								4708
							],
							[
								4771,
								4777
							],
							[
								4879,
								4898
							],
							[
								4920,
								4925
							],
							[
								5028,
								5059
							],
							[
								5110,
								5153
							],
							[
								5198,
								5205
							],
							[
								5306,
								5391
							],
							[
								5543,
								5548
							],
							[
								5593,
								5611
							],
							[
								5650,
								5657
							],
							[
								5706,
								5713
							],
							[
								5752,
								5769
							],
							[
								5816,
								5823
							],
							[
								5860,
								5878
							],
							[
								5901,
								5910
							],
							[
								5933,
								5951
							],
							[
								5962,
								6023
							],
							[
								6143,
								6152
							],
							[
								6189,
								6200
							],
							[
								6211,
								6235
							],
							[
								6316,
								6324
							],
							[
								6507,
								6561
							],
							[
								6780,
								6810
							],
							[
								7462,
								7508
							],
							[
								7548,
								7552
							],
							[
								7579,
								7586
							],
							[
								7672,
								7711
							],
							[
								7796,
								7841
							],
							[
								7879,
								7883
							],
							[
								7907,
								7950
							],
							[
								8029,
								8074
							],
							[
								8119,
								8123
							],
							[
								8173,
								8177
							],
							[
								8184,
								8188
							],
							[
								8220,
								8253
							],
							[
								8285,
								8328
							],
							[
								8403,
								8407
							],
							[
								8446,
								8485
							],
							[
								8531,
								8574
							],
							[
								8619,
								8658
							],
							[
								8754,
								8787
							],
							[
								8819,
								8839
							],
							[
								9086,
								9108
							],
							[
								11400,
								11411
							],
							[
								12625,
								12638
							],
							[
								13018,
								13052
							],
							[
								13556,
								13600
							],
							[
								13719,
								13739
							],
							[
								14054,
								14064
							],
							[
								14092,
								14102
							],
							[
								14138,
								14151
							],
							[
								14401,
								14415
							],
							[
								15307,
								15316
							],
							[
								15557,
								15576
							],
							[
								16118,
								16131
							],
							[
								16149,
								16154
							],
							[
								16205,
								16218
							],
							[
								16269,
								16290
							],
							[
								16687,
								16703
							],
							[
								17091,
								17096
							],
							[
								17134,
								17149
							],
							[
								17296,
								17304
							],
							[
								17345,
								17353
							],
							[
								17630,
								17658
							],
							[
								17725,
								17759
							],
							[
								17793,
								17798
							],
							[
								17820,
								17850
							],
							[
								18092,
								18100
							],
							[
								18167,
								18171
							],
							[
								18261,
								18268
							],
							[
								18608,
								18632
							],
							[
								18877,
								18882
							],
							[
								20612,
								20656
							],
							[
								21103,
								21129
							],
							[
								21831,
								21854
							],
							[
								21974,
								21996
							],
							[
								22247,
								22251
							],
							[
								22739,
								22743
							],
							[
								23360,
								23389
							],
							[
								23414,
								23418
							],
							[
								23494,
								23517
							],
							[
								23561,
								23567
							],
							[
								23595,
								23599
							],
							[
								23615,
								23652
							],
							[
								23674,
								23690
							],
							[
								23710,
								23717
							],
							[
								23774,
								23802
							],
							[
								23856,
								23867
							],
							[
								23950,
								23958
							],
							[
								24054,
								24058
							],
							[
								24208,
								24212
							],
							[
								24310,
								24315
							],
							[
								24375,
								24386
							],
							[
								24458,
								24469
							],
							[
								24556,
								24561
							],
							[
								24611,
								24617
							],
							[
								24714,
								24722
							],
							[
								24897,
								24926
							],
							[
								25019,
								25072
							],
							[
								25225,
								25229
							],
							[
								25283,
								25287
							],
							[
								25563,
								25570
							],
							[
								25592,
								25598
							],
							[
								25627,
								25658
							],
							[
								25792,
								25816
							],
							[
								25942,
								25953
							],
							[
								25971,
								25987
							],
							[
								26146,
								26151
							],
							[
								26175,
								26179
							],
							[
								26227,
								26236
							],
							[
								26304,
								26309
							],
							[
								26447,
								26452
							],
							[
								26574,
								26585
							],
							[
								26674,
								26681
							],
							[
								27327,
								27343
							],
							[
								29397,
								29463
							],
							[
								29710,
								29749
							],
							[
								29791,
								29805
							],
							[
								30054,
								30088
							],
							[
								30427,
								30441
							],
							[
								30536,
								30540
							],
							[
								30562,
								30576
							],
							[
								30607,
								30611
							],
							[
								31911,
								31927
							],
							[
								31977,
								31992
							],
							[
								32051,
								32070
							],
							[
								32093,
								32105
							],
							[
								32194,
								32198
							],
							[
								32297,
								32301
							],
							[
								32520,
								32526
							],
							[
								32616,
								32630
							],
							[
								32659,
								32677
							],
							[
								32814,
								32826
							],
							[
								32856,
								32921
							],
							[
								32950,
								32955
							],
							[
								33094,
								33132
							],
							[
								33157,
								33177
							],
							[
								33206,
								33255
							],
							[
								33302,
								33312
							],
							[
								33485,
								33495
							],
							[
								33568,
								33578
							],
							[
								33649,
								33659
							],
							[
								34186,
								34267
							],
							[
								34278,
								34301
							],
							[
								34519,
								34524
							],
							[
								34607,
								34616
							],
							[
								34646,
								34652
							],
							[
								34668,
								34697
							],
							[
								34733,
								34746
							],
							[
								34977,
								34983
							],
							[
								34992,
								35003
							],
							[
								35071,
								35093
							],
							[
								35310,
								35333
							],
							[
								35745,
								35774
							],
							[
								36096,
								36123
							],
							[
								36167,
								36180
							],
							[
								36207,
								36212
							],
							[
								36236,
								36241
							],
							[
								36264,
								36269
							],
							[
								36314,
								36324
							],
							[
								36354,
								36364
							],
							[
								36450,
								36455
							],
							[
								36575,
								36580
							],
							[
								36594,
								36602
							],
							[
								36824,
								36828
							],
							[
								36881,
								36885
							],
							[
								36973,
								36986
							],
							[
								37087,
								37100
							],
							[
								37361,
								37394
							],
							[
								37448,
								37452
							],
							[
								37566,
								37592
							],
							[
								37935,
								37968
							],
							[
								38315,
								38360
							],
							[
								38406,
								38410
							],
							[
								38427,
								38456
							],
							[
								38492,
								38498
							],
							[
								38882,
								38952
							],
							[
								39552,
								39624
							],
							[
								39857,
								39862
							],
							[
								40584,
								40588
							],
							[
								40809,
								40882
							],
							[
								41882,
								41906
							]
						],
						"symlist":
						[
							"function Window(width = 1280, height = 900)",
							"begin()",
							"end()",
							"handleMouseButton(button, action, mods)",
							"handleCursorPos(x, y)",
							"handleCursorEnter(cur)",
							".handleCharMods = (char, mods) =>",
							"() =>",
							" () =>",
							"function toXML(obj)",
							" a =>",
							"function renderToXML(component)",
							"function GetFiletime(file, field = 'mtime')",
							"file =>",
							"function FindProjects(dirPtn = '../*/eagle', sortDirection = -1, sortField = 'mtime')",
							"fn =>",
							"minIndex = name =>",
							"file =>",
							"file =>",
							"hasBoth = name =>",
							"name =>",
							"([name, index]) =>",
							"(a, b) =>",
							"([name, index]) =>",
							"function SortFiles(files, direction = 1, statField = 'mtime')",
							"(a, b) =>",
							"([file]) =>",
							"function pick(it, n = 1)",
							"n = i =>",
							"function append(tag, attrs, children, parent, element)",
							"function render(doc, filename)",
							"function CollectParts(doc = project.schematic)",
							"e =>",
							"attr =>",
							"({ name, deviceset, device, value }) =>",
							"function CollectElements(doc = project.board)",
							"e =>",
							"({ name, library, package: pkg, value }) =>",
							"function CollectPartsElements(proj = project)",
							"e =>",
							"a =>",
							"e =>",
							"([{ x, y, ...element }, part]) =>",
							"function ListParts(doc = project.schematic)",
							"p =>",
							"({ name, deviceset, device, value }) =>",
							"function ShowParts(doc = project.schematic)",
							"({ name, deviceset, device, value }) =>",
							"function EaglePrint(file, output)",
							" (dir, base, ext) =>",
							"function main(...args)",
							"toNumber(n)",
							"wire(...args)",
							"coil({ rect, n, diameter, width })",
							"load(filename, project = globalThis.project)",
							"newProject(filename)",
							"sch: () =>",
							"brd: () =>",
							"nextProject()",
							"projectNames()",
							"quit(arg)",
							"renderToString(arg)",
							" (...args) =>",
							"() =>",
							".exit = () =>",
							".debug = (...args) =>",
							".show = value =>",
							"() =>",
							"(item, i, a) =>",
							"entry =>",
							"entry =>",
							"function Terminate(exitCode)",
							"function xml(strings, expressions)",
							" e =>",
							"function UpdateMeasures(board)",
							"lines =>",
							"e =>",
							"line =>",
							"function AlignItem(item)",
							"tr =>",
							"function AlignAll(doc = globalThis.document)",
							"function fixValue(element)",
							"function fixValues(doc)",
							"function coordMap(doc)",
							"p =>",
							"t =>",
							"function GetPolygons(d = doc)",
							"e =>",
							"function FindPolygons()",
							"doc =>",
							"e =>",
							"function RemovePolygons(p = polygons)",
							"([doc, list]) =>",
							"path =>",
							"function GetNames(doc, pred)",
							"pred = e =>",
							"sheet =>",
							"e =>",
							"e =>",
							" e =>",
							"([v, p]) =>",
							"([v, p]) =>",
							"() =>",
							"doc =>",
							"sheet =>",
							"function GetByName(doc, name)",
							"function CorrelateSchematicAndBoard(schematic, board)",
							"d =>",
							"n =>",
							"name =>",
							"doc =>",
							"function GetSheets(doc_or_proj)",
							"function SaveLibraries()",
							"([n, e]) =>",
							"(acc, [n, e]) =>",
							" e =>",
							"e =>",
							"(a, b) =>",
							"id =>",
							"id =>",
							"([n, e]) =>",
							"name =>",
							"(acc, [n, e]) =>",
							"function BoardFromSchematic(doc = project.schematic, f = 1, r=0.5)",
							"function InitBoard(doc = project.board)",
							"([name, e]) =>",
							"async function testEagle(filename)",
							"([name, e]) =>",
							"e =>",
							"([name, i]) =>",
							"p =>",
							"(child, i, a) =>",
							"(child2, i2) =>",
							"([index, equal]) =>",
							"([index]) =>",
							"i =>",
							"i =>",
							"doc =>",
							"([file, e]) =>",
							"([file, xpath]) =>",
							" ([k, v]) =>",
							"function ModifyPath(p, fn = (dir, base, ext) => [dir, base, ext])",
							"() =>",
							"function AppendToFilename(p, str = '')",
							" (dir, base, ext) =>",
							"function SetSVGBackground(xml, color = '#ffffff')",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							"FileFunction = (fn, rfn = ReadFile, wfn = WriteFile, namefn = n => n, ...args) =>",
							" (filename, ...args) =>",
							" n =>",
							" data =>",
							" n =>",
							"function PutRowsColumns(rows)",
							"(acc, row) =>",
							"row =>",
							"(col, i) =>",
							"function GetLibrary(e)",
							"function ElementName(e)",
							"function GetRotation(element)",
							"function Package2Circuit(p)",
							"({ x, y }) =>",
							"pt =>",
							"pt =>",
							"pt =>",
							"({ x }) =>",
							"({ y }) =>",
							"pt =>",
							"pt =>",
							"coord =>",
							"x =>",
							"y =>",
							"({ x, y }) =>",
							"({ x, y }) =>",
							"function Contactref2Circuit(cref)",
							"e =>",
							"function Signal2Circuit(s)",
							"function Element2Circuit(element)",
							"function GetUsedPackages(doc = project.board)",
							"e =>",
							"function GetPackagePitch(pkg)",
							"pad =>",
							"function Eagle2Circuit(doc = project.board, width = 100, height = 100)",
							"function Eagle2CircuitJS(doc = project.schematic, scale = 50, sheet = 0)",
							" n =>",
							"e =>",
							"function MakeGraph(board = project.board, ignore = /^(GND|[-+][0-9]+V)$/)",
							"function DrawGraph(g, w)"
						]
					},
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					42,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-shell.js",
						"symkeys":
						[
							[
								3224,
								3267
							],
							[
								4053,
								4060
							],
							[
								4160,
								4165
							],
							[
								4251,
								4290
							],
							[
								4375,
								4396
							],
							[
								4463,
								4485
							],
							[
								4563,
								4596
							],
							[
								4703,
								4708
							],
							[
								4771,
								4777
							],
							[
								4879,
								4898
							],
							[
								4920,
								4925
							],
							[
								5028,
								5059
							],
							[
								5110,
								5153
							],
							[
								5198,
								5205
							],
							[
								5306,
								5391
							],
							[
								5543,
								5548
							],
							[
								5593,
								5611
							],
							[
								5650,
								5657
							],
							[
								5706,
								5713
							],
							[
								5752,
								5769
							],
							[
								5816,
								5823
							],
							[
								5860,
								5878
							],
							[
								5901,
								5910
							],
							[
								5933,
								5951
							],
							[
								5962,
								6023
							],
							[
								6143,
								6152
							],
							[
								6189,
								6200
							],
							[
								6211,
								6235
							],
							[
								6316,
								6324
							],
							[
								6507,
								6561
							],
							[
								6780,
								6810
							],
							[
								7462,
								7508
							],
							[
								7548,
								7552
							],
							[
								7579,
								7586
							],
							[
								7672,
								7711
							],
							[
								7796,
								7841
							],
							[
								7879,
								7883
							],
							[
								7907,
								7950
							],
							[
								8029,
								8074
							],
							[
								8119,
								8123
							],
							[
								8173,
								8177
							],
							[
								8184,
								8188
							],
							[
								8220,
								8253
							],
							[
								8285,
								8328
							],
							[
								8403,
								8407
							],
							[
								8446,
								8485
							],
							[
								8531,
								8574
							],
							[
								8619,
								8658
							],
							[
								8754,
								8787
							],
							[
								8819,
								8839
							],
							[
								9086,
								9108
							],
							[
								11400,
								11411
							],
							[
								12625,
								12638
							],
							[
								13018,
								13052
							],
							[
								13556,
								13600
							],
							[
								13719,
								13739
							],
							[
								14054,
								14064
							],
							[
								14092,
								14102
							],
							[
								14138,
								14151
							],
							[
								14401,
								14415
							],
							[
								15307,
								15316
							],
							[
								15557,
								15576
							],
							[
								16118,
								16131
							],
							[
								16149,
								16154
							],
							[
								16205,
								16218
							],
							[
								16269,
								16290
							],
							[
								16687,
								16703
							],
							[
								17091,
								17096
							],
							[
								17134,
								17149
							],
							[
								17296,
								17304
							],
							[
								17345,
								17353
							],
							[
								17630,
								17658
							],
							[
								17725,
								17759
							],
							[
								17793,
								17798
							],
							[
								17820,
								17850
							],
							[
								18092,
								18100
							],
							[
								18167,
								18171
							],
							[
								18261,
								18268
							],
							[
								18608,
								18632
							],
							[
								18877,
								18882
							],
							[
								20612,
								20656
							],
							[
								21103,
								21129
							],
							[
								21831,
								21854
							],
							[
								21974,
								21996
							],
							[
								22247,
								22251
							],
							[
								22739,
								22743
							],
							[
								23360,
								23389
							],
							[
								23414,
								23418
							],
							[
								23494,
								23517
							],
							[
								23561,
								23567
							],
							[
								23595,
								23599
							],
							[
								23615,
								23652
							],
							[
								23674,
								23690
							],
							[
								23710,
								23717
							],
							[
								23774,
								23802
							],
							[
								23856,
								23867
							],
							[
								23950,
								23958
							],
							[
								24054,
								24058
							],
							[
								24208,
								24212
							],
							[
								24310,
								24315
							],
							[
								24375,
								24386
							],
							[
								24458,
								24469
							],
							[
								24556,
								24561
							],
							[
								24611,
								24617
							],
							[
								24714,
								24722
							],
							[
								24897,
								24926
							],
							[
								25019,
								25072
							],
							[
								25225,
								25229
							],
							[
								25283,
								25287
							],
							[
								25563,
								25570
							],
							[
								25592,
								25598
							],
							[
								25627,
								25658
							],
							[
								25792,
								25816
							],
							[
								25942,
								25953
							],
							[
								25971,
								25987
							],
							[
								26146,
								26151
							],
							[
								26175,
								26179
							],
							[
								26227,
								26236
							],
							[
								26304,
								26309
							],
							[
								26447,
								26452
							],
							[
								26574,
								26585
							],
							[
								26674,
								26681
							],
							[
								27327,
								27343
							],
							[
								29397,
								29463
							],
							[
								29710,
								29749
							],
							[
								29791,
								29805
							],
							[
								30054,
								30088
							],
							[
								30427,
								30441
							],
							[
								30536,
								30540
							],
							[
								30562,
								30576
							],
							[
								30607,
								30611
							],
							[
								31911,
								31927
							],
							[
								31977,
								31992
							],
							[
								32051,
								32070
							],
							[
								32093,
								32105
							],
							[
								32194,
								32198
							],
							[
								32297,
								32301
							],
							[
								32520,
								32526
							],
							[
								32616,
								32630
							],
							[
								32659,
								32677
							],
							[
								32814,
								32826
							],
							[
								32856,
								32921
							],
							[
								32950,
								32955
							],
							[
								33094,
								33132
							],
							[
								33157,
								33177
							],
							[
								33206,
								33255
							],
							[
								33302,
								33312
							],
							[
								33485,
								33495
							],
							[
								33568,
								33578
							],
							[
								33649,
								33659
							],
							[
								34186,
								34267
							],
							[
								34278,
								34301
							],
							[
								34519,
								34524
							],
							[
								34607,
								34616
							],
							[
								34646,
								34652
							],
							[
								34668,
								34697
							],
							[
								34733,
								34746
							],
							[
								34977,
								34983
							],
							[
								34992,
								35003
							],
							[
								35071,
								35093
							],
							[
								35310,
								35333
							],
							[
								35745,
								35774
							],
							[
								36096,
								36123
							],
							[
								36167,
								36180
							],
							[
								36207,
								36212
							],
							[
								36236,
								36241
							],
							[
								36264,
								36269
							],
							[
								36314,
								36324
							],
							[
								36354,
								36364
							],
							[
								36450,
								36455
							],
							[
								36575,
								36580
							],
							[
								36594,
								36602
							],
							[
								36824,
								36828
							],
							[
								36881,
								36885
							],
							[
								36973,
								36986
							],
							[
								37087,
								37100
							],
							[
								37361,
								37394
							],
							[
								37448,
								37452
							],
							[
								37566,
								37592
							],
							[
								37935,
								37968
							],
							[
								38315,
								38360
							],
							[
								38406,
								38410
							],
							[
								38427,
								38456
							],
							[
								38492,
								38498
							],
							[
								38882,
								38952
							],
							[
								39552,
								39624
							],
							[
								39857,
								39862
							],
							[
								40584,
								40588
							],
							[
								40809,
								40882
							],
							[
								41882,
								41906
							]
						],
						"symlist":
						[
							"function Window(width = 1280, height = 900)",
							"begin()",
							"end()",
							"handleMouseButton(button, action, mods)",
							"handleCursorPos(x, y)",
							"handleCursorEnter(cur)",
							".handleCharMods = (char, mods) =>",
							"() =>",
							" () =>",
							"function toXML(obj)",
							" a =>",
							"function renderToXML(component)",
							"function GetFiletime(file, field = 'mtime')",
							"file =>",
							"function FindProjects(dirPtn = '../*/eagle', sortDirection = -1, sortField = 'mtime')",
							"fn =>",
							"minIndex = name =>",
							"file =>",
							"file =>",
							"hasBoth = name =>",
							"name =>",
							"([name, index]) =>",
							"(a, b) =>",
							"([name, index]) =>",
							"function SortFiles(files, direction = 1, statField = 'mtime')",
							"(a, b) =>",
							"([file]) =>",
							"function pick(it, n = 1)",
							"n = i =>",
							"function append(tag, attrs, children, parent, element)",
							"function render(doc, filename)",
							"function CollectParts(doc = project.schematic)",
							"e =>",
							"attr =>",
							"({ name, deviceset, device, value }) =>",
							"function CollectElements(doc = project.board)",
							"e =>",
							"({ name, library, package: pkg, value }) =>",
							"function CollectPartsElements(proj = project)",
							"e =>",
							"a =>",
							"e =>",
							"([{ x, y, ...element }, part]) =>",
							"function ListParts(doc = project.schematic)",
							"p =>",
							"({ name, deviceset, device, value }) =>",
							"function ShowParts(doc = project.schematic)",
							"({ name, deviceset, device, value }) =>",
							"function EaglePrint(file, output)",
							" (dir, base, ext) =>",
							"function main(...args)",
							"toNumber(n)",
							"wire(...args)",
							"coil({ rect, n, diameter, width })",
							"load(filename, project = globalThis.project)",
							"newProject(filename)",
							"sch: () =>",
							"brd: () =>",
							"nextProject()",
							"projectNames()",
							"quit(arg)",
							"renderToString(arg)",
							" (...args) =>",
							"() =>",
							".exit = () =>",
							".debug = (...args) =>",
							".show = value =>",
							"() =>",
							"(item, i, a) =>",
							"entry =>",
							"entry =>",
							"function Terminate(exitCode)",
							"function xml(strings, expressions)",
							" e =>",
							"function UpdateMeasures(board)",
							"lines =>",
							"e =>",
							"line =>",
							"function AlignItem(item)",
							"tr =>",
							"function AlignAll(doc = globalThis.document)",
							"function fixValue(element)",
							"function fixValues(doc)",
							"function coordMap(doc)",
							"p =>",
							"t =>",
							"function GetPolygons(d = doc)",
							"e =>",
							"function FindPolygons()",
							"doc =>",
							"e =>",
							"function RemovePolygons(p = polygons)",
							"([doc, list]) =>",
							"path =>",
							"function GetNames(doc, pred)",
							"pred = e =>",
							"sheet =>",
							"e =>",
							"e =>",
							" e =>",
							"([v, p]) =>",
							"([v, p]) =>",
							"() =>",
							"doc =>",
							"sheet =>",
							"function GetByName(doc, name)",
							"function CorrelateSchematicAndBoard(schematic, board)",
							"d =>",
							"n =>",
							"name =>",
							"doc =>",
							"function GetSheets(doc_or_proj)",
							"function SaveLibraries()",
							"([n, e]) =>",
							"(acc, [n, e]) =>",
							" e =>",
							"e =>",
							"(a, b) =>",
							"id =>",
							"id =>",
							"([n, e]) =>",
							"name =>",
							"(acc, [n, e]) =>",
							"function BoardFromSchematic(doc = project.schematic, f = 1, r=0.5)",
							"function InitBoard(doc = project.board)",
							"([name, e]) =>",
							"async function testEagle(filename)",
							"([name, e]) =>",
							"e =>",
							"([name, i]) =>",
							"p =>",
							"(child, i, a) =>",
							"(child2, i2) =>",
							"([index, equal]) =>",
							"([index]) =>",
							"i =>",
							"i =>",
							"doc =>",
							"([file, e]) =>",
							"([file, xpath]) =>",
							" ([k, v]) =>",
							"function ModifyPath(p, fn = (dir, base, ext) => [dir, base, ext])",
							"() =>",
							"function AppendToFilename(p, str = '')",
							" (dir, base, ext) =>",
							"function SetSVGBackground(xml, color = '#ffffff')",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							"FileFunction = (fn, rfn = ReadFile, wfn = WriteFile, namefn = n => n, ...args) =>",
							" (filename, ...args) =>",
							" n =>",
							" data =>",
							" n =>",
							"function PutRowsColumns(rows)",
							"(acc, row) =>",
							"row =>",
							"(col, i) =>",
							"function GetLibrary(e)",
							"function ElementName(e)",
							"function GetRotation(element)",
							"function Package2Circuit(p)",
							"({ x, y }) =>",
							"pt =>",
							"pt =>",
							"pt =>",
							"({ x }) =>",
							"({ y }) =>",
							"pt =>",
							"pt =>",
							"coord =>",
							"x =>",
							"y =>",
							"({ x, y }) =>",
							"({ x, y }) =>",
							"function Contactref2Circuit(cref)",
							"e =>",
							"function Signal2Circuit(s)",
							"function Element2Circuit(element)",
							"function GetUsedPackages(doc = project.board)",
							"e =>",
							"function GetPackagePitch(pkg)",
							"pad =>",
							"function Eagle2Circuit(doc = project.board, width = 100, height = 100)",
							"function Eagle2CircuitJS(doc = project.schematic, scale = 50, sheet = 0)",
							" n =>",
							"e =>",
							"function MakeGraph(board = project.board, ignore = /^(GND|[-+][0-9]+V)$/)",
							"function DrawGraph(g, w)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB7DQAAV2luZG93KHdpZHRoID0gMTI4MCwgaGVpZ2h0ID0gOTAwKQogIGJlZ2luKCkKICBlbmQoKQogIGhhbmRsZU1vdXNlQnV0dG9uKGJ1dHRvbiwgYWN0aW9uLCBtb2RzKQogIGhhbmRsZUN1cnNvclBvcyh4LCB5KQogIGhhbmRsZUN1cnNvckVudGVyKGN1cikKICAuaGFuZGxlQ2hhck1vZHMgPSAoY2hhciwgbW9kcykgPT4KKCkgPT4KKCkgPT4KICB0b1hNTChvYmopCmEgPT4KICByZW5kZXJUb1hNTChjb21wb25lbnQpCkdldEZpbGV0aW1lKGZpbGUsIGZpZWxkID0gJ210aW1lJykKICBmaWxlID0+CkZpbmRQcm9qZWN0cyhkaXJQdG4gPSAnLi4vKi9lYWdsZScsIHNvcnREaXJlY3Rpb24gPSAtMSwgc29ydEZpZWxkID0gJ210aW1lJykKICBmbiA9PgogIG1pbkluZGV4ID0gbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CiAgaGFzQm90aCA9IG5hbWUgPT4KICBuYW1lID0+CihbbmFtZSwgaW5kZXhdKSA9PgooYSwgYikgPT4KKFtuYW1lLCBpbmRleF0pID0+ClNvcnRGaWxlcyhmaWxlcywgZGlyZWN0aW9uID0gMSwgc3RhdEZpZWxkID0gJ210aW1lJykKKGEsIGIpID0+CihbZmlsZV0pID0+CiAgcGljayhpdCwgbiA9IDEpCiAgbiA9IGkgPT4KICBhcHBlbmQodGFnLCBhdHRycywgY2hpbGRyZW4sIHBhcmVudCwgZWxlbWVudCkKICByZW5kZXIoZG9jLCBmaWxlbmFtZSkKQ29sbGVjdFBhcnRzKGRvYyA9IHByb2plY3Quc2NoZW1hdGljKQogIGUgPT4KICBhdHRyID0+Cih7IG5hbWUsIGRldmljZXNldCwgZGV2aWNlLCB2YWx1ZSB9KSA9PgpDb2xsZWN0RWxlbWVudHMoZG9jID0gcHJvamVjdC5ib2FyZCkKICBlID0+Cih7IG5hbWUsIGxpYnJhcnksIHBhY2thZ2U6IHBrZywgdmFsdWUgfSkgPT4KQ29sbGVjdFBhcnRzRWxlbWVudHMocHJvaiA9IHByb2plY3QpCiAgZSA9PgogIGEgPT4KICBlID0+CihbeyB4LCB5LCAuLi5lbGVtZW50IH0sIHBhcnRdKSA9PgpMaXN0UGFydHMoZG9jID0gcHJvamVjdC5zY2hlbWF0aWMpCiAgcCA9PgooeyBuYW1lLCBkZXZpY2VzZXQsIGRldmljZSwgdmFsdWUgfSkgPT4KU2hvd1BhcnRzKGRvYyA9IHByb2plY3Quc2NoZW1hdGljKQooeyBuYW1lLCBkZXZpY2VzZXQsIGRldmljZSwgdmFsdWUgfSkgPT4KRWFnbGVQcmludChmaWxlLCBvdXRwdXQpCihkaXIsIGJhc2UsIGV4dCkgPT4KICBtYWluKC4uLmFyZ3MpCiAgdG9OdW1iZXIobikKICB3aXJlKC4uLmFyZ3MpCiAgY29pbCh7IHJlY3QsIG4sIGRpYW1ldGVyLCB3aWR0aCB9KQogIGxvYWQoZmlsZW5hbWUsIHByb2plY3QgPSBnbG9iYWxUaGlzLnByb2plY3QpCiAgbmV3UHJvamVjdChmaWxlbmFtZSkKICBzY2g6ICgpID0+CiAgYnJkOiAoKSA9PgogIG5leHRQcm9qZWN0KCkKICBwcm9qZWN0TmFtZXMoKQogIHF1aXQoYXJnKQogIHJlbmRlclRvU3RyaW5nKGFyZykKKC4uLmFyZ3MpID0+CigpID0+CiAgLmV4aXQgPSAoKSA9PgogIC5kZWJ1ZyA9ICguLi5hcmdzKSA9PgogIC5zaG93ID0gdmFsdWUgPT4KKCkgPT4KKGl0ZW0sIGksIGEpID0+CiAgZW50cnkgPT4KICBlbnRyeSA9PgpUZXJtaW5hdGUoZXhpdENvZGUpCiAgeG1sKHN0cmluZ3MsIGV4cHJlc3Npb25zKQplID0+ClVwZGF0ZU1lYXN1cmVzKGJvYXJkKQogIGxpbmVzID0+CiAgZSA9PgogIGxpbmUgPT4KQWxpZ25JdGVtKGl0ZW0pCiAgdHIgPT4KQWxpZ25BbGwoZG9jID0gZ2xvYmFsVGhpcy5kb2N1bWVudCkKICBmaXhWYWx1ZShlbGVtZW50KQogIGZpeFZhbHVlcyhkb2MpCiAgY29vcmRNYXAoZG9jKQogIHAgPT4KICB0ID0+CkdldFBvbHlnb25zKGQgPSBkb2MpCiAgZSA9PgpGaW5kUG9seWdvbnMoKQogIGRvYyA9PgogIGUgPT4KUmVtb3ZlUG9seWdvbnMocCA9IHBvbHlnb25zKQooW2RvYywgbGlzdF0pID0+CiAgcGF0aCA9PgpHZXROYW1lcyhkb2MsIHByZWQpCiAgcHJlZCA9IGUgPT4KICBzaGVldCA9PgogIGUgPT4KICBlID0+CmUgPT4KKFt2LCBwXSkgPT4KKFt2LCBwXSkgPT4KKCkgPT4KICBkb2MgPT4KICBzaGVldCA9PgpHZXRCeU5hbWUoZG9jLCBuYW1lKQpDb3JyZWxhdGVTY2hlbWF0aWNBbmRCb2FyZChzY2hlbWF0aWMsIGJvYXJkKQogIGQgPT4KICBuID0+CiAgbmFtZSA9PgogIGRvYyA9PgpHZXRTaGVldHMoZG9jX29yX3Byb2opClNhdmVMaWJyYXJpZXMoKQooW24sIGVdKSA9PgooYWNjLCBbbiwgZV0pID0+CmUgPT4KICBlID0+CihhLCBiKSA9PgogIGlkID0+CiAgaWQgPT4KKFtuLCBlXSkgPT4KICBuYW1lID0+CihhY2MsIFtuLCBlXSkgPT4KQm9hcmRGcm9tU2NoZW1hdGljKGRvYyA9IHByb2plY3Quc2NoZW1hdGljLCBmID0gMSwgcj0wLjUpCkluaXRCb2FyZChkb2MgPSBwcm9qZWN0LmJvYXJkKQooW25hbWUsIGVdKSA9PgogIHRlc3RFYWdsZShmaWxlbmFtZSkKKFtuYW1lLCBlXSkgPT4KICBlID0+CihbbmFtZSwgaV0pID0+CiAgcCA9PgooY2hpbGQsIGksIGEpID0+CihjaGlsZDIsIGkyKSA9PgooW2luZGV4LCBlcXVhbF0pID0+CihbaW5kZXhdKSA9PgogIGkgPT4KICBpID0+CiAgZG9jID0+CihbZmlsZSwgZV0pID0+CihbZmlsZSwgeHBhdGhdKSA9PgooW2ssIHZdKSA9PgpNb2RpZnlQYXRoKHAsIGZuID0gKGRpciwgYmFzZSwgZXh0KSA9PiBbZGlyLCBiYXNlLCBleHRdKQooKSA9PgpBcHBlbmRUb0ZpbGVuYW1lKHAsIHN0ciA9ICcnKQooZGlyLCBiYXNlLCBleHQpID0+ClNldFNWR0JhY2tncm91bmQoeG1sLCBjb2xvciA9ICcjZmZmZmZmJykKKGUsIG4pID0+CihlLCBuKSA9PgooZSwgbikgPT4KKGUsIG4pID0+CkZpbGVGdW5jdGlvbiA9IChmbiwgcmZuID0gUmVhZEZpbGUsIHdmbiA9IFdyaXRlRmlsZSwgbmFtZWZuID0gbiA9PiBuLCAuLi5hcmdzKSA9PgooZmlsZW5hbWUsIC4uLmFyZ3MpID0+Cm4gPT4KZGF0YSA9PgpuID0+ClB1dFJvd3NDb2x1bW5zKHJvd3MpCihhY2MsIHJvdykgPT4KICByb3cgPT4KKGNvbCwgaSkgPT4KR2V0TGlicmFyeShlKQpFbGVtZW50TmFtZShlKQpHZXRSb3RhdGlvbihlbGVtZW50KQpQYWNrYWdlMkNpcmN1aXQocCkKKHsgeCwgeSB9KSA9PgogIHB0ID0+CiAgcHQgPT4KICBwdCA9PgooeyB4IH0pID0+Cih7IHkgfSkgPT4KICBwdCA9PgogIHB0ID0+CiAgY29vcmQgPT4KICB4ID0+CiAgeSA9PgooeyB4LCB5IH0pID0+Cih7IHgsIHkgfSkgPT4KQ29udGFjdHJlZjJDaXJjdWl0KGNyZWYpCiAgZSA9PgpTaWduYWwyQ2lyY3VpdChzKQpFbGVtZW50MkNpcmN1aXQoZWxlbWVudCkKR2V0VXNlZFBhY2thZ2VzKGRvYyA9IHByb2plY3QuYm9hcmQpCiAgZSA9PgpHZXRQYWNrYWdlUGl0Y2gocGtnKQogIHBhZCA9PgpFYWdsZTJDaXJjdWl0KGRvYyA9IHByb2plY3QuYm9hcmQsIHdpZHRoID0gMTAwLCBoZWlnaHQgPSAxMDApCkVhZ2xlMkNpcmN1aXRKUyhkb2MgPSBwcm9qZWN0LnNjaGVtYXRpYywgc2NhbGUgPSA1MCwgc2hlZXQgPSAwKQpuID0+CiAgZSA9PgpNYWtlR3JhcGgoYm9hcmQgPSBwcm9qZWN0LmJvYXJkLCBpZ25vcmUgPSAvXihHTkR8Wy0rXVswLTldK1YpJC8pCkRyYXdHcmFwaChnLCB3KQAAAAAAAAAAew0AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					43,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-shell.js",
						"symkeys":
						[
							[
								3224,
								3267
							],
							[
								4053,
								4060
							],
							[
								4160,
								4165
							],
							[
								4251,
								4290
							],
							[
								4375,
								4396
							],
							[
								4463,
								4485
							],
							[
								4563,
								4596
							],
							[
								4703,
								4708
							],
							[
								4771,
								4777
							],
							[
								4879,
								4898
							],
							[
								4920,
								4925
							],
							[
								5028,
								5059
							],
							[
								5110,
								5153
							],
							[
								5198,
								5205
							],
							[
								5306,
								5391
							],
							[
								5543,
								5548
							],
							[
								5593,
								5611
							],
							[
								5650,
								5657
							],
							[
								5706,
								5713
							],
							[
								5752,
								5769
							],
							[
								5816,
								5823
							],
							[
								5860,
								5878
							],
							[
								5901,
								5910
							],
							[
								5933,
								5951
							],
							[
								5962,
								6023
							],
							[
								6143,
								6152
							],
							[
								6189,
								6200
							],
							[
								6211,
								6235
							],
							[
								6316,
								6324
							],
							[
								6507,
								6561
							],
							[
								6780,
								6810
							],
							[
								7462,
								7508
							],
							[
								7548,
								7552
							],
							[
								7579,
								7586
							],
							[
								7672,
								7711
							],
							[
								7796,
								7841
							],
							[
								7879,
								7883
							],
							[
								7907,
								7950
							],
							[
								8029,
								8074
							],
							[
								8119,
								8123
							],
							[
								8173,
								8177
							],
							[
								8184,
								8188
							],
							[
								8220,
								8253
							],
							[
								8285,
								8328
							],
							[
								8403,
								8407
							],
							[
								8446,
								8485
							],
							[
								8531,
								8574
							],
							[
								8619,
								8658
							],
							[
								8754,
								8787
							],
							[
								8819,
								8839
							],
							[
								9086,
								9108
							],
							[
								11400,
								11411
							],
							[
								12625,
								12638
							],
							[
								13018,
								13052
							],
							[
								13556,
								13600
							],
							[
								13719,
								13739
							],
							[
								14054,
								14064
							],
							[
								14092,
								14102
							],
							[
								14138,
								14151
							],
							[
								14401,
								14415
							],
							[
								15307,
								15316
							],
							[
								15557,
								15576
							],
							[
								16118,
								16131
							],
							[
								16149,
								16154
							],
							[
								16205,
								16218
							],
							[
								16269,
								16290
							],
							[
								16687,
								16703
							],
							[
								17091,
								17096
							],
							[
								17134,
								17149
							],
							[
								17296,
								17304
							],
							[
								17345,
								17353
							],
							[
								17630,
								17658
							],
							[
								17725,
								17759
							],
							[
								17793,
								17798
							],
							[
								17820,
								17850
							],
							[
								18092,
								18100
							],
							[
								18167,
								18171
							],
							[
								18261,
								18268
							],
							[
								18608,
								18632
							],
							[
								18877,
								18882
							],
							[
								20612,
								20656
							],
							[
								21103,
								21129
							],
							[
								21831,
								21854
							],
							[
								21974,
								21996
							],
							[
								22247,
								22251
							],
							[
								22739,
								22743
							],
							[
								23360,
								23389
							],
							[
								23414,
								23418
							],
							[
								23494,
								23517
							],
							[
								23561,
								23567
							],
							[
								23595,
								23599
							],
							[
								23615,
								23652
							],
							[
								23674,
								23690
							],
							[
								23710,
								23717
							],
							[
								23774,
								23802
							],
							[
								23856,
								23867
							],
							[
								23950,
								23958
							],
							[
								24054,
								24058
							],
							[
								24208,
								24212
							],
							[
								24310,
								24315
							],
							[
								24375,
								24386
							],
							[
								24458,
								24469
							],
							[
								24556,
								24561
							],
							[
								24611,
								24617
							],
							[
								24714,
								24722
							],
							[
								24897,
								24926
							],
							[
								25019,
								25072
							],
							[
								25225,
								25229
							],
							[
								25283,
								25287
							],
							[
								25563,
								25570
							],
							[
								25592,
								25598
							],
							[
								25627,
								25658
							],
							[
								25792,
								25816
							],
							[
								25942,
								25953
							],
							[
								25971,
								25987
							],
							[
								26146,
								26151
							],
							[
								26175,
								26179
							],
							[
								26227,
								26236
							],
							[
								26304,
								26309
							],
							[
								26447,
								26452
							],
							[
								26574,
								26585
							],
							[
								26674,
								26681
							],
							[
								27327,
								27343
							],
							[
								29397,
								29463
							],
							[
								29710,
								29749
							],
							[
								29791,
								29805
							],
							[
								30054,
								30088
							],
							[
								30427,
								30441
							],
							[
								30536,
								30540
							],
							[
								30562,
								30576
							],
							[
								30607,
								30611
							],
							[
								31911,
								31927
							],
							[
								31977,
								31992
							],
							[
								32051,
								32070
							],
							[
								32093,
								32105
							],
							[
								32194,
								32198
							],
							[
								32297,
								32301
							],
							[
								32520,
								32526
							],
							[
								32616,
								32630
							],
							[
								32659,
								32677
							],
							[
								32814,
								32826
							],
							[
								32856,
								32921
							],
							[
								32950,
								32955
							],
							[
								33094,
								33132
							],
							[
								33157,
								33177
							],
							[
								33206,
								33255
							],
							[
								33302,
								33312
							],
							[
								33485,
								33495
							],
							[
								33568,
								33578
							],
							[
								33649,
								33659
							],
							[
								34186,
								34267
							],
							[
								34278,
								34301
							],
							[
								34519,
								34524
							],
							[
								34607,
								34616
							],
							[
								34646,
								34652
							],
							[
								34668,
								34697
							],
							[
								34733,
								34746
							],
							[
								34977,
								34983
							],
							[
								34992,
								35003
							],
							[
								35071,
								35093
							],
							[
								35310,
								35333
							],
							[
								35745,
								35774
							],
							[
								36096,
								36123
							],
							[
								36167,
								36180
							],
							[
								36207,
								36212
							],
							[
								36236,
								36241
							],
							[
								36321,
								36331
							],
							[
								36361,
								36371
							],
							[
								36457,
								36462
							],
							[
								36582,
								36587
							],
							[
								36601,
								36609
							],
							[
								36831,
								36835
							],
							[
								36888,
								36892
							],
							[
								36980,
								36993
							],
							[
								37094,
								37107
							],
							[
								37368,
								37401
							],
							[
								37455,
								37459
							],
							[
								37573,
								37599
							],
							[
								37942,
								37975
							],
							[
								38322,
								38367
							],
							[
								38413,
								38417
							],
							[
								38434,
								38463
							],
							[
								38499,
								38505
							],
							[
								38889,
								38959
							],
							[
								39559,
								39631
							],
							[
								39864,
								39869
							],
							[
								40591,
								40595
							],
							[
								40816,
								40889
							],
							[
								41889,
								41913
							]
						],
						"symlist":
						[
							"function Window(width = 1280, height = 900)",
							"begin()",
							"end()",
							"handleMouseButton(button, action, mods)",
							"handleCursorPos(x, y)",
							"handleCursorEnter(cur)",
							".handleCharMods = (char, mods) =>",
							"() =>",
							" () =>",
							"function toXML(obj)",
							" a =>",
							"function renderToXML(component)",
							"function GetFiletime(file, field = 'mtime')",
							"file =>",
							"function FindProjects(dirPtn = '../*/eagle', sortDirection = -1, sortField = 'mtime')",
							"fn =>",
							"minIndex = name =>",
							"file =>",
							"file =>",
							"hasBoth = name =>",
							"name =>",
							"([name, index]) =>",
							"(a, b) =>",
							"([name, index]) =>",
							"function SortFiles(files, direction = 1, statField = 'mtime')",
							"(a, b) =>",
							"([file]) =>",
							"function pick(it, n = 1)",
							"n = i =>",
							"function append(tag, attrs, children, parent, element)",
							"function render(doc, filename)",
							"function CollectParts(doc = project.schematic)",
							"e =>",
							"attr =>",
							"({ name, deviceset, device, value }) =>",
							"function CollectElements(doc = project.board)",
							"e =>",
							"({ name, library, package: pkg, value }) =>",
							"function CollectPartsElements(proj = project)",
							"e =>",
							"a =>",
							"e =>",
							"([{ x, y, ...element }, part]) =>",
							"function ListParts(doc = project.schematic)",
							"p =>",
							"({ name, deviceset, device, value }) =>",
							"function ShowParts(doc = project.schematic)",
							"({ name, deviceset, device, value }) =>",
							"function EaglePrint(file, output)",
							" (dir, base, ext) =>",
							"function main(...args)",
							"toNumber(n)",
							"wire(...args)",
							"coil({ rect, n, diameter, width })",
							"load(filename, project = globalThis.project)",
							"newProject(filename)",
							"sch: () =>",
							"brd: () =>",
							"nextProject()",
							"projectNames()",
							"quit(arg)",
							"renderToString(arg)",
							" (...args) =>",
							"() =>",
							".exit = () =>",
							".debug = (...args) =>",
							".show = value =>",
							"() =>",
							"(item, i, a) =>",
							"entry =>",
							"entry =>",
							"function Terminate(exitCode)",
							"function xml(strings, expressions)",
							" e =>",
							"function UpdateMeasures(board)",
							"lines =>",
							"e =>",
							"line =>",
							"function AlignItem(item)",
							"tr =>",
							"function AlignAll(doc = globalThis.document)",
							"function fixValue(element)",
							"function fixValues(doc)",
							"function coordMap(doc)",
							"p =>",
							"t =>",
							"function GetPolygons(d = doc)",
							"e =>",
							"function FindPolygons()",
							"doc =>",
							"e =>",
							"function RemovePolygons(p = polygons)",
							"([doc, list]) =>",
							"path =>",
							"function GetNames(doc, pred)",
							"pred = e =>",
							"sheet =>",
							"e =>",
							"e =>",
							" e =>",
							"([v, p]) =>",
							"([v, p]) =>",
							"() =>",
							"doc =>",
							"sheet =>",
							"function GetByName(doc, name)",
							"function CorrelateSchematicAndBoard(schematic, board)",
							"d =>",
							"n =>",
							"name =>",
							"doc =>",
							"function GetSheets(doc_or_proj)",
							"function SaveLibraries()",
							"([n, e]) =>",
							"(acc, [n, e]) =>",
							" e =>",
							"e =>",
							"(a, b) =>",
							"id =>",
							"id =>",
							"([n, e]) =>",
							"name =>",
							"(acc, [n, e]) =>",
							"function BoardFromSchematic(doc = project.schematic, f = 1, r=0.5)",
							"function InitBoard(doc = project.board)",
							"([name, e]) =>",
							"async function testEagle(filename)",
							"([name, e]) =>",
							"e =>",
							"([name, i]) =>",
							"p =>",
							"(child, i, a) =>",
							"(child2, i2) =>",
							"([index, equal]) =>",
							"([index]) =>",
							"i =>",
							"i =>",
							"doc =>",
							"([file, e]) =>",
							"([file, xpath]) =>",
							" ([k, v]) =>",
							"function ModifyPath(p, fn = (dir, base, ext) => [dir, base, ext])",
							"() =>",
							"function AppendToFilename(p, str = '')",
							" (dir, base, ext) =>",
							"function SetSVGBackground(xml, color = '#ffffff')",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							"FileFunction = (fn, rfn = ReadFile, wfn = WriteFile, namefn = n => n, ...args) =>",
							" (filename, ...args) =>",
							" n =>",
							" data =>",
							" n =>",
							"function PutRowsColumns(rows)",
							"(acc, row) =>",
							"row =>",
							"(col, i) =>",
							"function GetLibrary(e)",
							"function ElementName(e)",
							"function GetRotation(element)",
							"function Package2Circuit(p)",
							"({ x, y }) =>",
							"pt =>",
							"pt =>",
							"({ x }) =>",
							"({ y }) =>",
							"pt =>",
							"pt =>",
							"coord =>",
							"x =>",
							"y =>",
							"({ x, y }) =>",
							"({ x, y }) =>",
							"function Contactref2Circuit(cref)",
							"e =>",
							"function Signal2Circuit(s)",
							"function Element2Circuit(element)",
							"function GetUsedPackages(doc = project.board)",
							"e =>",
							"function GetPackagePitch(pkg)",
							"pad =>",
							"function Eagle2Circuit(doc = project.board, width = 100, height = 100)",
							"function Eagle2CircuitJS(doc = project.schematic, scale = 50, sheet = 0)",
							" n =>",
							"e =>",
							"function MakeGraph(board = project.board, ignore = /^(GND|[-+][0-9]+V)$/)",
							"function DrawGraph(g, w)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB7DQAAV2luZG93KHdpZHRoID0gMTI4MCwgaGVpZ2h0ID0gOTAwKQogIGJlZ2luKCkKICBlbmQoKQogIGhhbmRsZU1vdXNlQnV0dG9uKGJ1dHRvbiwgYWN0aW9uLCBtb2RzKQogIGhhbmRsZUN1cnNvclBvcyh4LCB5KQogIGhhbmRsZUN1cnNvckVudGVyKGN1cikKICAuaGFuZGxlQ2hhck1vZHMgPSAoY2hhciwgbW9kcykgPT4KKCkgPT4KKCkgPT4KICB0b1hNTChvYmopCmEgPT4KICByZW5kZXJUb1hNTChjb21wb25lbnQpCkdldEZpbGV0aW1lKGZpbGUsIGZpZWxkID0gJ210aW1lJykKICBmaWxlID0+CkZpbmRQcm9qZWN0cyhkaXJQdG4gPSAnLi4vKi9lYWdsZScsIHNvcnREaXJlY3Rpb24gPSAtMSwgc29ydEZpZWxkID0gJ210aW1lJykKICBmbiA9PgogIG1pbkluZGV4ID0gbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CiAgaGFzQm90aCA9IG5hbWUgPT4KICBuYW1lID0+CihbbmFtZSwgaW5kZXhdKSA9PgooYSwgYikgPT4KKFtuYW1lLCBpbmRleF0pID0+ClNvcnRGaWxlcyhmaWxlcywgZGlyZWN0aW9uID0gMSwgc3RhdEZpZWxkID0gJ210aW1lJykKKGEsIGIpID0+CihbZmlsZV0pID0+CiAgcGljayhpdCwgbiA9IDEpCiAgbiA9IGkgPT4KICBhcHBlbmQodGFnLCBhdHRycywgY2hpbGRyZW4sIHBhcmVudCwgZWxlbWVudCkKICByZW5kZXIoZG9jLCBmaWxlbmFtZSkKQ29sbGVjdFBhcnRzKGRvYyA9IHByb2plY3Quc2NoZW1hdGljKQogIGUgPT4KICBhdHRyID0+Cih7IG5hbWUsIGRldmljZXNldCwgZGV2aWNlLCB2YWx1ZSB9KSA9PgpDb2xsZWN0RWxlbWVudHMoZG9jID0gcHJvamVjdC5ib2FyZCkKICBlID0+Cih7IG5hbWUsIGxpYnJhcnksIHBhY2thZ2U6IHBrZywgdmFsdWUgfSkgPT4KQ29sbGVjdFBhcnRzRWxlbWVudHMocHJvaiA9IHByb2plY3QpCiAgZSA9PgogIGEgPT4KICBlID0+CihbeyB4LCB5LCAuLi5lbGVtZW50IH0sIHBhcnRdKSA9PgpMaXN0UGFydHMoZG9jID0gcHJvamVjdC5zY2hlbWF0aWMpCiAgcCA9PgooeyBuYW1lLCBkZXZpY2VzZXQsIGRldmljZSwgdmFsdWUgfSkgPT4KU2hvd1BhcnRzKGRvYyA9IHByb2plY3Quc2NoZW1hdGljKQooeyBuYW1lLCBkZXZpY2VzZXQsIGRldmljZSwgdmFsdWUgfSkgPT4KRWFnbGVQcmludChmaWxlLCBvdXRwdXQpCihkaXIsIGJhc2UsIGV4dCkgPT4KICBtYWluKC4uLmFyZ3MpCiAgdG9OdW1iZXIobikKICB3aXJlKC4uLmFyZ3MpCiAgY29pbCh7IHJlY3QsIG4sIGRpYW1ldGVyLCB3aWR0aCB9KQogIGxvYWQoZmlsZW5hbWUsIHByb2plY3QgPSBnbG9iYWxUaGlzLnByb2plY3QpCiAgbmV3UHJvamVjdChmaWxlbmFtZSkKICBzY2g6ICgpID0+CiAgYnJkOiAoKSA9PgogIG5leHRQcm9qZWN0KCkKICBwcm9qZWN0TmFtZXMoKQogIHF1aXQoYXJnKQogIHJlbmRlclRvU3RyaW5nKGFyZykKKC4uLmFyZ3MpID0+CigpID0+CiAgLmV4aXQgPSAoKSA9PgogIC5kZWJ1ZyA9ICguLi5hcmdzKSA9PgogIC5zaG93ID0gdmFsdWUgPT4KKCkgPT4KKGl0ZW0sIGksIGEpID0+CiAgZW50cnkgPT4KICBlbnRyeSA9PgpUZXJtaW5hdGUoZXhpdENvZGUpCiAgeG1sKHN0cmluZ3MsIGV4cHJlc3Npb25zKQplID0+ClVwZGF0ZU1lYXN1cmVzKGJvYXJkKQogIGxpbmVzID0+CiAgZSA9PgogIGxpbmUgPT4KQWxpZ25JdGVtKGl0ZW0pCiAgdHIgPT4KQWxpZ25BbGwoZG9jID0gZ2xvYmFsVGhpcy5kb2N1bWVudCkKICBmaXhWYWx1ZShlbGVtZW50KQogIGZpeFZhbHVlcyhkb2MpCiAgY29vcmRNYXAoZG9jKQogIHAgPT4KICB0ID0+CkdldFBvbHlnb25zKGQgPSBkb2MpCiAgZSA9PgpGaW5kUG9seWdvbnMoKQogIGRvYyA9PgogIGUgPT4KUmVtb3ZlUG9seWdvbnMocCA9IHBvbHlnb25zKQooW2RvYywgbGlzdF0pID0+CiAgcGF0aCA9PgpHZXROYW1lcyhkb2MsIHByZWQpCiAgcHJlZCA9IGUgPT4KICBzaGVldCA9PgogIGUgPT4KICBlID0+CmUgPT4KKFt2LCBwXSkgPT4KKFt2LCBwXSkgPT4KKCkgPT4KICBkb2MgPT4KICBzaGVldCA9PgpHZXRCeU5hbWUoZG9jLCBuYW1lKQpDb3JyZWxhdGVTY2hlbWF0aWNBbmRCb2FyZChzY2hlbWF0aWMsIGJvYXJkKQogIGQgPT4KICBuID0+CiAgbmFtZSA9PgogIGRvYyA9PgpHZXRTaGVldHMoZG9jX29yX3Byb2opClNhdmVMaWJyYXJpZXMoKQooW24sIGVdKSA9PgooYWNjLCBbbiwgZV0pID0+CmUgPT4KICBlID0+CihhLCBiKSA9PgogIGlkID0+CiAgaWQgPT4KKFtuLCBlXSkgPT4KICBuYW1lID0+CihhY2MsIFtuLCBlXSkgPT4KQm9hcmRGcm9tU2NoZW1hdGljKGRvYyA9IHByb2plY3Quc2NoZW1hdGljLCBmID0gMSwgcj0wLjUpCkluaXRCb2FyZChkb2MgPSBwcm9qZWN0LmJvYXJkKQooW25hbWUsIGVdKSA9PgogIHRlc3RFYWdsZShmaWxlbmFtZSkKKFtuYW1lLCBlXSkgPT4KICBlID0+CihbbmFtZSwgaV0pID0+CiAgcCA9PgooY2hpbGQsIGksIGEpID0+CihjaGlsZDIsIGkyKSA9PgooW2luZGV4LCBlcXVhbF0pID0+CihbaW5kZXhdKSA9PgogIGkgPT4KICBpID0+CiAgZG9jID0+CihbZmlsZSwgZV0pID0+CihbZmlsZSwgeHBhdGhdKSA9PgooW2ssIHZdKSA9PgpNb2RpZnlQYXRoKHAsIGZuID0gKGRpciwgYmFzZSwgZXh0KSA9PiBbZGlyLCBiYXNlLCBleHRdKQooKSA9PgpBcHBlbmRUb0ZpbGVuYW1lKHAsIHN0ciA9ICcnKQooZGlyLCBiYXNlLCBleHQpID0+ClNldFNWR0JhY2tncm91bmQoeG1sLCBjb2xvciA9ICcjZmZmZmZmJykKKGUsIG4pID0+CihlLCBuKSA9PgooZSwgbikgPT4KKGUsIG4pID0+CkZpbGVGdW5jdGlvbiA9IChmbiwgcmZuID0gUmVhZEZpbGUsIHdmbiA9IFdyaXRlRmlsZSwgbmFtZWZuID0gbiA9PiBuLCAuLi5hcmdzKSA9PgooZmlsZW5hbWUsIC4uLmFyZ3MpID0+Cm4gPT4KZGF0YSA9PgpuID0+ClB1dFJvd3NDb2x1bW5zKHJvd3MpCihhY2MsIHJvdykgPT4KICByb3cgPT4KKGNvbCwgaSkgPT4KR2V0TGlicmFyeShlKQpFbGVtZW50TmFtZShlKQpHZXRSb3RhdGlvbihlbGVtZW50KQpQYWNrYWdlMkNpcmN1aXQocCkKKHsgeCwgeSB9KSA9PgogIHB0ID0+CiAgcHQgPT4KICBwdCA9PgooeyB4IH0pID0+Cih7IHkgfSkgPT4KICBwdCA9PgogIHB0ID0+CiAgY29vcmQgPT4KICB4ID0+CiAgeSA9PgooeyB4LCB5IH0pID0+Cih7IHgsIHkgfSkgPT4KQ29udGFjdHJlZjJDaXJjdWl0KGNyZWYpCiAgZSA9PgpTaWduYWwyQ2lyY3VpdChzKQpFbGVtZW50MkNpcmN1aXQoZWxlbWVudCkKR2V0VXNlZFBhY2thZ2VzKGRvYyA9IHByb2plY3QuYm9hcmQpCiAgZSA9PgpHZXRQYWNrYWdlUGl0Y2gocGtnKQogIHBhZCA9PgpFYWdsZTJDaXJjdWl0KGRvYyA9IHByb2plY3QuYm9hcmQsIHdpZHRoID0gMTAwLCBoZWlnaHQgPSAxMDApCkVhZ2xlMkNpcmN1aXRKUyhkb2MgPSBwcm9qZWN0LnNjaGVtYXRpYywgc2NhbGUgPSA1MCwgc2hlZXQgPSAwKQpuID0+CiAgZSA9PgpNYWtlR3JhcGgoYm9hcmQgPSBwcm9qZWN0LmJvYXJkLCBpZ25vcmUgPSAvXihHTkR8Wy0rXVswLTldK1YpJC8pCkRyYXdHcmFwaChnLCB3KQAAAAAAAAAAcw0AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					44,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/noise-source.circuit",
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABzDQAAV2luZG93KHdpZHRoID0gMTI4MCwgaGVpZ2h0ID0gOTAwKQogIGJlZ2luKCkKICBlbmQoKQogIGhhbmRsZU1vdXNlQnV0dG9uKGJ1dHRvbiwgYWN0aW9uLCBtb2RzKQogIGhhbmRsZUN1cnNvclBvcyh4LCB5KQogIGhhbmRsZUN1cnNvckVudGVyKGN1cikKICAuaGFuZGxlQ2hhck1vZHMgPSAoY2hhciwgbW9kcykgPT4KKCkgPT4KKCkgPT4KICB0b1hNTChvYmopCmEgPT4KICByZW5kZXJUb1hNTChjb21wb25lbnQpCkdldEZpbGV0aW1lKGZpbGUsIGZpZWxkID0gJ210aW1lJykKICBmaWxlID0+CkZpbmRQcm9qZWN0cyhkaXJQdG4gPSAnLi4vKi9lYWdsZScsIHNvcnREaXJlY3Rpb24gPSAtMSwgc29ydEZpZWxkID0gJ210aW1lJykKICBmbiA9PgogIG1pbkluZGV4ID0gbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CiAgaGFzQm90aCA9IG5hbWUgPT4KICBuYW1lID0+CihbbmFtZSwgaW5kZXhdKSA9PgooYSwgYikgPT4KKFtuYW1lLCBpbmRleF0pID0+ClNvcnRGaWxlcyhmaWxlcywgZGlyZWN0aW9uID0gMSwgc3RhdEZpZWxkID0gJ210aW1lJykKKGEsIGIpID0+CihbZmlsZV0pID0+CiAgcGljayhpdCwgbiA9IDEpCiAgbiA9IGkgPT4KICBhcHBlbmQodGFnLCBhdHRycywgY2hpbGRyZW4sIHBhcmVudCwgZWxlbWVudCkKICByZW5kZXIoZG9jLCBmaWxlbmFtZSkKQ29sbGVjdFBhcnRzKGRvYyA9IHByb2plY3Quc2NoZW1hdGljKQogIGUgPT4KICBhdHRyID0+Cih7IG5hbWUsIGRldmljZXNldCwgZGV2aWNlLCB2YWx1ZSB9KSA9PgpDb2xsZWN0RWxlbWVudHMoZG9jID0gcHJvamVjdC5ib2FyZCkKICBlID0+Cih7IG5hbWUsIGxpYnJhcnksIHBhY2thZ2U6IHBrZywgdmFsdWUgfSkgPT4KQ29sbGVjdFBhcnRzRWxlbWVudHMocHJvaiA9IHByb2plY3QpCiAgZSA9PgogIGEgPT4KICBlID0+CihbeyB4LCB5LCAuLi5lbGVtZW50IH0sIHBhcnRdKSA9PgpMaXN0UGFydHMoZG9jID0gcHJvamVjdC5zY2hlbWF0aWMpCiAgcCA9PgooeyBuYW1lLCBkZXZpY2VzZXQsIGRldmljZSwgdmFsdWUgfSkgPT4KU2hvd1BhcnRzKGRvYyA9IHByb2plY3Quc2NoZW1hdGljKQooeyBuYW1lLCBkZXZpY2VzZXQsIGRldmljZSwgdmFsdWUgfSkgPT4KRWFnbGVQcmludChmaWxlLCBvdXRwdXQpCihkaXIsIGJhc2UsIGV4dCkgPT4KICBtYWluKC4uLmFyZ3MpCiAgdG9OdW1iZXIobikKICB3aXJlKC4uLmFyZ3MpCiAgY29pbCh7IHJlY3QsIG4sIGRpYW1ldGVyLCB3aWR0aCB9KQogIGxvYWQoZmlsZW5hbWUsIHByb2plY3QgPSBnbG9iYWxUaGlzLnByb2plY3QpCiAgbmV3UHJvamVjdChmaWxlbmFtZSkKICBzY2g6ICgpID0+CiAgYnJkOiAoKSA9PgogIG5leHRQcm9qZWN0KCkKICBwcm9qZWN0TmFtZXMoKQogIHF1aXQoYXJnKQogIHJlbmRlclRvU3RyaW5nKGFyZykKKC4uLmFyZ3MpID0+CigpID0+CiAgLmV4aXQgPSAoKSA9PgogIC5kZWJ1ZyA9ICguLi5hcmdzKSA9PgogIC5zaG93ID0gdmFsdWUgPT4KKCkgPT4KKGl0ZW0sIGksIGEpID0+CiAgZW50cnkgPT4KICBlbnRyeSA9PgpUZXJtaW5hdGUoZXhpdENvZGUpCiAgeG1sKHN0cmluZ3MsIGV4cHJlc3Npb25zKQplID0+ClVwZGF0ZU1lYXN1cmVzKGJvYXJkKQogIGxpbmVzID0+CiAgZSA9PgogIGxpbmUgPT4KQWxpZ25JdGVtKGl0ZW0pCiAgdHIgPT4KQWxpZ25BbGwoZG9jID0gZ2xvYmFsVGhpcy5kb2N1bWVudCkKICBmaXhWYWx1ZShlbGVtZW50KQogIGZpeFZhbHVlcyhkb2MpCiAgY29vcmRNYXAoZG9jKQogIHAgPT4KICB0ID0+CkdldFBvbHlnb25zKGQgPSBkb2MpCiAgZSA9PgpGaW5kUG9seWdvbnMoKQogIGRvYyA9PgogIGUgPT4KUmVtb3ZlUG9seWdvbnMocCA9IHBvbHlnb25zKQooW2RvYywgbGlzdF0pID0+CiAgcGF0aCA9PgpHZXROYW1lcyhkb2MsIHByZWQpCiAgcHJlZCA9IGUgPT4KICBzaGVldCA9PgogIGUgPT4KICBlID0+CmUgPT4KKFt2LCBwXSkgPT4KKFt2LCBwXSkgPT4KKCkgPT4KICBkb2MgPT4KICBzaGVldCA9PgpHZXRCeU5hbWUoZG9jLCBuYW1lKQpDb3JyZWxhdGVTY2hlbWF0aWNBbmRCb2FyZChzY2hlbWF0aWMsIGJvYXJkKQogIGQgPT4KICBuID0+CiAgbmFtZSA9PgogIGRvYyA9PgpHZXRTaGVldHMoZG9jX29yX3Byb2opClNhdmVMaWJyYXJpZXMoKQooW24sIGVdKSA9PgooYWNjLCBbbiwgZV0pID0+CmUgPT4KICBlID0+CihhLCBiKSA9PgogIGlkID0+CiAgaWQgPT4KKFtuLCBlXSkgPT4KICBuYW1lID0+CihhY2MsIFtuLCBlXSkgPT4KQm9hcmRGcm9tU2NoZW1hdGljKGRvYyA9IHByb2plY3Quc2NoZW1hdGljLCBmID0gMSwgcj0wLjUpCkluaXRCb2FyZChkb2MgPSBwcm9qZWN0LmJvYXJkKQooW25hbWUsIGVdKSA9PgogIHRlc3RFYWdsZShmaWxlbmFtZSkKKFtuYW1lLCBlXSkgPT4KICBlID0+CihbbmFtZSwgaV0pID0+CiAgcCA9PgooY2hpbGQsIGksIGEpID0+CihjaGlsZDIsIGkyKSA9PgooW2luZGV4LCBlcXVhbF0pID0+CihbaW5kZXhdKSA9PgogIGkgPT4KICBpID0+CiAgZG9jID0+CihbZmlsZSwgZV0pID0+CihbZmlsZSwgeHBhdGhdKSA9PgooW2ssIHZdKSA9PgpNb2RpZnlQYXRoKHAsIGZuID0gKGRpciwgYmFzZSwgZXh0KSA9PiBbZGlyLCBiYXNlLCBleHRdKQooKSA9PgpBcHBlbmRUb0ZpbGVuYW1lKHAsIHN0ciA9ICcnKQooZGlyLCBiYXNlLCBleHQpID0+ClNldFNWR0JhY2tncm91bmQoeG1sLCBjb2xvciA9ICcjZmZmZmZmJykKKGUsIG4pID0+CihlLCBuKSA9PgooZSwgbikgPT4KKGUsIG4pID0+CkZpbGVGdW5jdGlvbiA9IChmbiwgcmZuID0gUmVhZEZpbGUsIHdmbiA9IFdyaXRlRmlsZSwgbmFtZWZuID0gbiA9PiBuLCAuLi5hcmdzKSA9PgooZmlsZW5hbWUsIC4uLmFyZ3MpID0+Cm4gPT4KZGF0YSA9PgpuID0+ClB1dFJvd3NDb2x1bW5zKHJvd3MpCihhY2MsIHJvdykgPT4KICByb3cgPT4KKGNvbCwgaSkgPT4KR2V0TGlicmFyeShlKQpFbGVtZW50TmFtZShlKQpHZXRSb3RhdGlvbihlbGVtZW50KQpQYWNrYWdlMkNpcmN1aXQocCkKKHsgeCwgeSB9KSA9PgogIHB0ID0+CiAgcHQgPT4KKHsgeCB9KSA9PgooeyB5IH0pID0+CiAgcHQgPT4KICBwdCA9PgogIGNvb3JkID0+CiAgeCA9PgogIHkgPT4KKHsgeCwgeSB9KSA9PgooeyB4LCB5IH0pID0+CkNvbnRhY3RyZWYyQ2lyY3VpdChjcmVmKQogIGUgPT4KU2lnbmFsMkNpcmN1aXQocykKRWxlbWVudDJDaXJjdWl0KGVsZW1lbnQpCkdldFVzZWRQYWNrYWdlcyhkb2MgPSBwcm9qZWN0LmJvYXJkKQogIGUgPT4KR2V0UGFja2FnZVBpdGNoKHBrZykKICBwYWQgPT4KRWFnbGUyQ2lyY3VpdChkb2MgPSBwcm9qZWN0LmJvYXJkLCB3aWR0aCA9IDEwMCwgaGVpZ2h0ID0gMTAwKQpFYWdsZTJDaXJjdWl0SlMoZG9jID0gcHJvamVjdC5zY2hlbWF0aWMsIHNjYWxlID0gNTAsIHNoZWV0ID0gMCkKbiA9PgogIGUgPT4KTWFrZUdyYXBoKGJvYXJkID0gcHJvamVjdC5ib2FyZCwgaWdub3JlID0gL14oR05EfFstK11bMC05XStWKSQvKQpEcmF3R3JhcGgoZywgdykAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					45,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-shell.js",
						"symkeys":
						[
							[
								3224,
								3267
							],
							[
								4053,
								4060
							],
							[
								4160,
								4165
							],
							[
								4251,
								4290
							],
							[
								4375,
								4396
							],
							[
								4463,
								4485
							],
							[
								4563,
								4596
							],
							[
								4703,
								4708
							],
							[
								4771,
								4777
							],
							[
								4879,
								4898
							],
							[
								4920,
								4925
							],
							[
								5028,
								5059
							],
							[
								5110,
								5153
							],
							[
								5198,
								5205
							],
							[
								5306,
								5391
							],
							[
								5543,
								5548
							],
							[
								5593,
								5611
							],
							[
								5650,
								5657
							],
							[
								5706,
								5713
							],
							[
								5752,
								5769
							],
							[
								5816,
								5823
							],
							[
								5860,
								5878
							],
							[
								5901,
								5910
							],
							[
								5933,
								5951
							],
							[
								5962,
								6023
							],
							[
								6143,
								6152
							],
							[
								6189,
								6200
							],
							[
								6211,
								6235
							],
							[
								6316,
								6324
							],
							[
								6507,
								6561
							],
							[
								6780,
								6810
							],
							[
								7462,
								7508
							],
							[
								7548,
								7552
							],
							[
								7579,
								7586
							],
							[
								7672,
								7711
							],
							[
								7796,
								7841
							],
							[
								7879,
								7883
							],
							[
								7907,
								7950
							],
							[
								8029,
								8074
							],
							[
								8119,
								8123
							],
							[
								8173,
								8177
							],
							[
								8184,
								8188
							],
							[
								8220,
								8253
							],
							[
								8285,
								8328
							],
							[
								8403,
								8407
							],
							[
								8446,
								8485
							],
							[
								8531,
								8574
							],
							[
								8619,
								8658
							],
							[
								8754,
								8787
							],
							[
								8819,
								8839
							],
							[
								9086,
								9108
							],
							[
								11400,
								11411
							],
							[
								12625,
								12638
							],
							[
								13018,
								13052
							],
							[
								13556,
								13600
							],
							[
								13719,
								13739
							],
							[
								14054,
								14064
							],
							[
								14092,
								14102
							],
							[
								14138,
								14151
							],
							[
								14401,
								14415
							],
							[
								15307,
								15316
							],
							[
								15557,
								15576
							],
							[
								16118,
								16131
							],
							[
								16149,
								16154
							],
							[
								16205,
								16218
							],
							[
								16269,
								16290
							],
							[
								16687,
								16703
							],
							[
								17091,
								17096
							],
							[
								17134,
								17149
							],
							[
								17296,
								17304
							],
							[
								17345,
								17353
							],
							[
								17630,
								17658
							],
							[
								17725,
								17759
							],
							[
								17793,
								17798
							],
							[
								17820,
								17850
							],
							[
								18092,
								18100
							],
							[
								18167,
								18171
							],
							[
								18261,
								18268
							],
							[
								18608,
								18632
							],
							[
								18877,
								18882
							],
							[
								20612,
								20656
							],
							[
								21103,
								21129
							],
							[
								21831,
								21854
							],
							[
								21974,
								21996
							],
							[
								22247,
								22251
							],
							[
								22739,
								22743
							],
							[
								23360,
								23389
							],
							[
								23414,
								23418
							],
							[
								23494,
								23517
							],
							[
								23561,
								23567
							],
							[
								23595,
								23599
							],
							[
								23615,
								23652
							],
							[
								23674,
								23690
							],
							[
								23710,
								23717
							],
							[
								23774,
								23802
							],
							[
								23856,
								23867
							],
							[
								23950,
								23958
							],
							[
								24054,
								24058
							],
							[
								24208,
								24212
							],
							[
								24310,
								24315
							],
							[
								24375,
								24386
							],
							[
								24458,
								24469
							],
							[
								24556,
								24561
							],
							[
								24611,
								24617
							],
							[
								24714,
								24722
							],
							[
								24897,
								24926
							],
							[
								25019,
								25072
							],
							[
								25225,
								25229
							],
							[
								25283,
								25287
							],
							[
								25563,
								25570
							],
							[
								25592,
								25598
							],
							[
								25627,
								25658
							],
							[
								25792,
								25816
							],
							[
								25942,
								25953
							],
							[
								25971,
								25987
							],
							[
								26146,
								26151
							],
							[
								26175,
								26179
							],
							[
								26227,
								26236
							],
							[
								26304,
								26309
							],
							[
								26447,
								26452
							],
							[
								26574,
								26585
							],
							[
								26674,
								26681
							],
							[
								27327,
								27343
							],
							[
								29397,
								29463
							],
							[
								29710,
								29749
							],
							[
								29791,
								29805
							],
							[
								30054,
								30088
							],
							[
								30427,
								30441
							],
							[
								30536,
								30540
							],
							[
								30562,
								30576
							],
							[
								30607,
								30611
							],
							[
								31911,
								31927
							],
							[
								31977,
								31992
							],
							[
								32051,
								32070
							],
							[
								32093,
								32105
							],
							[
								32194,
								32198
							],
							[
								32297,
								32301
							],
							[
								32520,
								32526
							],
							[
								32616,
								32630
							],
							[
								32659,
								32677
							],
							[
								32814,
								32826
							],
							[
								32856,
								32921
							],
							[
								32950,
								32955
							],
							[
								33094,
								33132
							],
							[
								33157,
								33177
							],
							[
								33206,
								33255
							],
							[
								33302,
								33312
							],
							[
								33485,
								33495
							],
							[
								33568,
								33578
							],
							[
								33649,
								33659
							],
							[
								34186,
								34267
							],
							[
								34278,
								34301
							],
							[
								34519,
								34524
							],
							[
								34607,
								34616
							],
							[
								34646,
								34652
							],
							[
								34668,
								34697
							],
							[
								34733,
								34746
							],
							[
								34977,
								34983
							],
							[
								34992,
								35003
							],
							[
								35071,
								35093
							],
							[
								35310,
								35333
							],
							[
								35745,
								35774
							],
							[
								36096,
								36123
							],
							[
								36167,
								36180
							],
							[
								36207,
								36212
							],
							[
								36236,
								36241
							],
							[
								36321,
								36331
							],
							[
								36361,
								36371
							],
							[
								36457,
								36462
							],
							[
								36582,
								36587
							],
							[
								36601,
								36609
							],
							[
								36831,
								36835
							],
							[
								36888,
								36892
							],
							[
								36980,
								36993
							],
							[
								37094,
								37107
							],
							[
								37368,
								37401
							],
							[
								37455,
								37459
							],
							[
								37573,
								37599
							],
							[
								37942,
								37975
							],
							[
								38322,
								38367
							],
							[
								38413,
								38417
							],
							[
								38434,
								38463
							],
							[
								38499,
								38505
							],
							[
								38889,
								38959
							],
							[
								39559,
								39631
							],
							[
								39864,
								39869
							],
							[
								40591,
								40595
							],
							[
								40816,
								40889
							],
							[
								41889,
								41913
							]
						],
						"symlist":
						[
							"function Window(width = 1280, height = 900)",
							"begin()",
							"end()",
							"handleMouseButton(button, action, mods)",
							"handleCursorPos(x, y)",
							"handleCursorEnter(cur)",
							".handleCharMods = (char, mods) =>",
							"() =>",
							" () =>",
							"function toXML(obj)",
							" a =>",
							"function renderToXML(component)",
							"function GetFiletime(file, field = 'mtime')",
							"file =>",
							"function FindProjects(dirPtn = '../*/eagle', sortDirection = -1, sortField = 'mtime')",
							"fn =>",
							"minIndex = name =>",
							"file =>",
							"file =>",
							"hasBoth = name =>",
							"name =>",
							"([name, index]) =>",
							"(a, b) =>",
							"([name, index]) =>",
							"function SortFiles(files, direction = 1, statField = 'mtime')",
							"(a, b) =>",
							"([file]) =>",
							"function pick(it, n = 1)",
							"n = i =>",
							"function append(tag, attrs, children, parent, element)",
							"function render(doc, filename)",
							"function CollectParts(doc = project.schematic)",
							"e =>",
							"attr =>",
							"({ name, deviceset, device, value }) =>",
							"function CollectElements(doc = project.board)",
							"e =>",
							"({ name, library, package: pkg, value }) =>",
							"function CollectPartsElements(proj = project)",
							"e =>",
							"a =>",
							"e =>",
							"([{ x, y, ...element }, part]) =>",
							"function ListParts(doc = project.schematic)",
							"p =>",
							"({ name, deviceset, device, value }) =>",
							"function ShowParts(doc = project.schematic)",
							"({ name, deviceset, device, value }) =>",
							"function EaglePrint(file, output)",
							" (dir, base, ext) =>",
							"function main(...args)",
							"toNumber(n)",
							"wire(...args)",
							"coil({ rect, n, diameter, width })",
							"load(filename, project = globalThis.project)",
							"newProject(filename)",
							"sch: () =>",
							"brd: () =>",
							"nextProject()",
							"projectNames()",
							"quit(arg)",
							"renderToString(arg)",
							" (...args) =>",
							"() =>",
							".exit = () =>",
							".debug = (...args) =>",
							".show = value =>",
							"() =>",
							"(item, i, a) =>",
							"entry =>",
							"entry =>",
							"function Terminate(exitCode)",
							"function xml(strings, expressions)",
							" e =>",
							"function UpdateMeasures(board)",
							"lines =>",
							"e =>",
							"line =>",
							"function AlignItem(item)",
							"tr =>",
							"function AlignAll(doc = globalThis.document)",
							"function fixValue(element)",
							"function fixValues(doc)",
							"function coordMap(doc)",
							"p =>",
							"t =>",
							"function GetPolygons(d = doc)",
							"e =>",
							"function FindPolygons()",
							"doc =>",
							"e =>",
							"function RemovePolygons(p = polygons)",
							"([doc, list]) =>",
							"path =>",
							"function GetNames(doc, pred)",
							"pred = e =>",
							"sheet =>",
							"e =>",
							"e =>",
							" e =>",
							"([v, p]) =>",
							"([v, p]) =>",
							"() =>",
							"doc =>",
							"sheet =>",
							"function GetByName(doc, name)",
							"function CorrelateSchematicAndBoard(schematic, board)",
							"d =>",
							"n =>",
							"name =>",
							"doc =>",
							"function GetSheets(doc_or_proj)",
							"function SaveLibraries()",
							"([n, e]) =>",
							"(acc, [n, e]) =>",
							" e =>",
							"e =>",
							"(a, b) =>",
							"id =>",
							"id =>",
							"([n, e]) =>",
							"name =>",
							"(acc, [n, e]) =>",
							"function BoardFromSchematic(doc = project.schematic, f = 1, r=0.5)",
							"function InitBoard(doc = project.board)",
							"([name, e]) =>",
							"async function testEagle(filename)",
							"([name, e]) =>",
							"e =>",
							"([name, i]) =>",
							"p =>",
							"(child, i, a) =>",
							"(child2, i2) =>",
							"([index, equal]) =>",
							"([index]) =>",
							"i =>",
							"i =>",
							"doc =>",
							"([file, e]) =>",
							"([file, xpath]) =>",
							" ([k, v]) =>",
							"function ModifyPath(p, fn = (dir, base, ext) => [dir, base, ext])",
							"() =>",
							"function AppendToFilename(p, str = '')",
							" (dir, base, ext) =>",
							"function SetSVGBackground(xml, color = '#ffffff')",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							" (e, n) =>",
							"FileFunction = (fn, rfn = ReadFile, wfn = WriteFile, namefn = n => n, ...args) =>",
							" (filename, ...args) =>",
							" n =>",
							" data =>",
							" n =>",
							"function PutRowsColumns(rows)",
							"(acc, row) =>",
							"row =>",
							"(col, i) =>",
							"function GetLibrary(e)",
							"function ElementName(e)",
							"function GetRotation(element)",
							"function Package2Circuit(p)",
							"({ x, y }) =>",
							"pt =>",
							"pt =>",
							"({ x }) =>",
							"({ y }) =>",
							"pt =>",
							"pt =>",
							"coord =>",
							"x =>",
							"y =>",
							"({ x, y }) =>",
							"({ x, y }) =>",
							"function Contactref2Circuit(cref)",
							"e =>",
							"function Signal2Circuit(s)",
							"function Element2Circuit(element)",
							"function GetUsedPackages(doc = project.board)",
							"e =>",
							"function GetPackagePitch(pkg)",
							"pad =>",
							"function Eagle2Circuit(doc = project.board, width = 100, height = 100)",
							"function Eagle2CircuitJS(doc = project.schematic, scale = 50, sheet = 0)",
							" n =>",
							"e =>",
							"function MakeGraph(board = project.board, ignore = /^(GND|[-+][0-9]+V)$/)",
							"function DrawGraph(g, w)"
						]
					},
					"AQAAAAAAAAAAAAAAcw0AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					46,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/dom/element.js",
						"symkeys":
						[
							[
								457,
								464
							],
							[
								681,
								688
							],
							[
								780,
								791
							],
							[
								846,
								857
							],
							[
								912,
								923
							],
							[
								963,
								977
							],
							[
								1128,
								1142
							],
							[
								1251,
								1269
							],
							[
								1491,
								1513
							],
							[
								2742,
								2748
							],
							[
								2929,
								2966
							],
							[
								3107,
								3123
							],
							[
								3302,
								3318
							],
							[
								3332,
								3351
							],
							[
								3658,
								3675
							],
							[
								3813,
								3824
							],
							[
								3909,
								3941
							],
							[
								4293,
								4304
							],
							[
								4592,
								4616
							],
							[
								4660,
								4684
							],
							[
								4765,
								4789
							],
							[
								5151,
								5162
							],
							[
								5446,
								5489
							],
							[
								5811,
								5841
							],
							[
								6258,
								6290
							],
							[
								6556,
								6565
							],
							[
								7192,
								7225
							],
							[
								7539,
								7543
							],
							[
								7755,
								7759
							],
							[
								8090,
								8138
							],
							[
								8482,
								8509
							],
							[
								8926,
								8955
							],
							[
								10181,
								10195
							],
							[
								10523,
								10543
							],
							[
								11242,
								11262
							],
							[
								12580,
								12620
							],
							[
								14555,
								14604
							],
							[
								14859,
								14863
							],
							[
								15015,
								15072
							],
							[
								15419,
								15437
							],
							[
								16290,
								16357
							],
							[
								16542,
								16553
							],
							[
								16759,
								16782
							],
							[
								17249,
								17264
							],
							[
								17296,
								17309
							],
							[
								17398,
								17435
							],
							[
								17692,
								17743
							],
							[
								17935,
								17981
							],
							[
								18398,
								18413
							],
							[
								18438,
								18451
							],
							[
								18509,
								18544
							],
							[
								18665,
								18702
							],
							[
								18968,
								19004
							],
							[
								19079,
								19131
							],
							[
								19408,
								19444
							],
							[
								19573,
								19579
							],
							[
								19703,
								19709
							],
							[
								19725,
								19730
							],
							[
								19786,
								19793
							],
							[
								19958,
								19976
							],
							[
								20123,
								20171
							],
							[
								20234,
								20247
							],
							[
								20486,
								20521
							],
							[
								20964,
								20986
							],
							[
								21487,
								21548
							],
							[
								21982,
								21987
							],
							[
								22168,
								22173
							],
							[
								22469,
								22480
							],
							[
								22660,
								22664
							],
							[
								22921,
								22941
							],
							[
								23069,
								23074
							],
							[
								23144,
								23155
							],
							[
								23496,
								23509
							],
							[
								23900,
								23937
							],
							[
								24077,
								24090
							],
							[
								24294,
								24325
							],
							[
								24716,
								24763
							],
							[
								24878,
								24895
							],
							[
								24916,
								24963
							],
							[
								25152,
								25159
							],
							[
								25325,
								25332
							],
							[
								25570,
								25591
							],
							[
								25749,
								25765
							],
							[
								25802,
								25817
							],
							[
								25949,
								25972
							],
							[
								26020,
								26043
							],
							[
								26088,
								26103
							],
							[
								26295,
								26312
							],
							[
								26510,
								26540
							],
							[
								27276,
								27320
							],
							[
								27733,
								27768
							],
							[
								27940,
								27956
							],
							[
								28028,
								28061
							],
							[
								28205,
								28229
							],
							[
								28304,
								28355
							],
							[
								29822,
								29844
							],
							[
								30066,
								30095
							],
							[
								30320,
								30344
							],
							[
								30559,
								30564
							],
							[
								30643,
								30657
							],
							[
								30799,
								30819
							],
							[
								30874,
								30900
							],
							[
								31119,
								31192
							],
							[
								31917,
								31937
							],
							[
								31950,
								31968
							],
							[
								32098,
								32116
							],
							[
								32562,
								32576
							],
							[
								32806,
								32835
							],
							[
								33226,
								33244
							],
							[
								33377,
								33381
							],
							[
								33579,
								33587
							],
							[
								33604,
								33624
							],
							[
								33737,
								33742
							],
							[
								33775,
								33781
							],
							[
								34588,
								34624
							],
							[
								34776,
								34811
							],
							[
								34994,
								35005
							],
							[
								35273,
								35295
							]
						],
						"symlist":
						[
							"Element",
							" arg =>",
							" element =>",
							" element =>",
							" element =>",
							"static wrap(e)",
							"(acc, name) =>",
							" function(...args)",
							"static create(...args)",
							"obj =>",
							"static walkUp(elem, pred = e => true)",
							"pred = (e, d) =>",
							" v =>",
							" stop =>",
							"fn = (e, next) =>",
							"emit = n =>",
							"static walk(elem, fn, accu = {})",
							"function ()",
							"predicate = (e, d, r) =>",
							"getProp = (obj, prop) =>",
							"getProp = (obj, prop) =>",
							"function ()",
							"static *childIterator(elem, element = true)",
							"static fromObject(obj, parent)",
							"static toObject(elem, opts = {})",
							"(l, c) =>",
							"static toCommand(elem, opts = {})",
							"k =>",
							"e =>",
							"static find(arg, parent, globalObj = globalThis)",
							"static findAll(arg, parent)",
							"static attr(e, attrs_or_name)",
							"(acc, name) =>",
							"static getRect(elem)",
							"static rect(...args)",
							"static setRect(element, rect, opts = {})",
							"static position(element, edges = ['left', 'top'])",
							"e =>",
							"static move(element, point, pos, edges = ['left', 'top'])",
							"getValue = prop =>",
							"static moveRelative(element, to, edges = ['left', 'top'], callback)",
							"([k, v]) =>",
							" function move(x, y)",
							".cancel = () =>",
							".jump = () =>",
							"static resize(element, ...dimensions)",
							"static resizeRelative(element, to, f = 1, callback)",
							" function resize(width, height, rel = true)",
							".cancel = () =>",
							".jump = () =>",
							"static getEdgesXYWH({ x, y, w, h })",
							"static getEdge({ x, y, w, h }, which)",
							"static getPointsXYWH({ x, y, w, h })",
							"static cumulativeOffset(element, relative_to = null)",
							"static getTRBL(element, prefix = '')",
							"pos =>",
							" () =>",
							"() =>",
							"prop =>",
							"([prop, value]) =>",
							"static setTRBL(element, trbl, prefix = 'margin')",
							"(acc, pos) =>",
							"static setCSS(element, prop, value)",
							".subscribe = newval =>",
							"static getCSS(element, property = undefined, receiver = null)",
							"() =>",
							"() =>",
							"(acc, k) =>",
							"k =>",
							"receiver = result =>",
							"get()",
							"([k, v]) =>",
							"(ret, key) =>",
							"static xpath(elt, relative_to = null)",
							" (e, next) =>",
							"static selector(elt, opts = {})",
							"static depth(elem, relative_to = document.body)",
							"static dump(elem)",
							" function dumpElem(child, accu, root, depth)",
							"attr =>",
							"name =>",
							" (e, a, r, d) =>",
							"pred = (a, b) =>",
							" function(elem)",
							"static prevSibling(sib)",
							"static nextSibling(sib)",
							"static idx(elt)",
							"static name(elem)",
							"static unique(elem, opts = {})",
							"static factory(delegate = {}, parent = null)",
							".append_to = function(elem, parent)",
							".create = tag =>",
							".setattr = (elem, attr, value) =>",
							".setcss = (elem, css) =>",
							".bound_factory = (tag, attr = {}, parent = null) =>",
							"static remove(element)",
							"static isat(e, x, y, options)",
							"static at(x, y, options)",
							" e =>",
							" (e, depth) =>",
							"(resolve, reject) =>",
							" (e, accu, root, depth) =>",
							"static transition(element, css, time, easing = 'linear', callback = null)",
							"(resolve, reject) =>",
							"trun = function(e)",
							"tend = function(e)",
							"cancel = () =>",
							"static toString(e, opts = {})",
							"([name, value]) =>",
							"e =>",
							" text =>",
							"(resolve, reject) =>",
							"() =>",
							"err =>",
							"static *children(elem, tfn = e => e)",
							"static *recurse(elem, tfn = e => e)",
							"function ()",
							" function isElement(e)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABzDQAAV2luZG93KHdpZHRoID0gMTI4MCwgaGVpZ2h0ID0gOTAwKQogIGJlZ2luKCkKICBlbmQoKQogIGhhbmRsZU1vdXNlQnV0dG9uKGJ1dHRvbiwgYWN0aW9uLCBtb2RzKQogIGhhbmRsZUN1cnNvclBvcyh4LCB5KQogIGhhbmRsZUN1cnNvckVudGVyKGN1cikKICAuaGFuZGxlQ2hhck1vZHMgPSAoY2hhciwgbW9kcykgPT4KKCkgPT4KKCkgPT4KICB0b1hNTChvYmopCmEgPT4KICByZW5kZXJUb1hNTChjb21wb25lbnQpCkdldEZpbGV0aW1lKGZpbGUsIGZpZWxkID0gJ210aW1lJykKICBmaWxlID0+CkZpbmRQcm9qZWN0cyhkaXJQdG4gPSAnLi4vKi9lYWdsZScsIHNvcnREaXJlY3Rpb24gPSAtMSwgc29ydEZpZWxkID0gJ210aW1lJykKICBmbiA9PgogIG1pbkluZGV4ID0gbmFtZSA9PgogIGZpbGUgPT4KICBmaWxlID0+CiAgaGFzQm90aCA9IG5hbWUgPT4KICBuYW1lID0+CihbbmFtZSwgaW5kZXhdKSA9PgooYSwgYikgPT4KKFtuYW1lLCBpbmRleF0pID0+ClNvcnRGaWxlcyhmaWxlcywgZGlyZWN0aW9uID0gMSwgc3RhdEZpZWxkID0gJ210aW1lJykKKGEsIGIpID0+CihbZmlsZV0pID0+CiAgcGljayhpdCwgbiA9IDEpCiAgbiA9IGkgPT4KICBhcHBlbmQodGFnLCBhdHRycywgY2hpbGRyZW4sIHBhcmVudCwgZWxlbWVudCkKICByZW5kZXIoZG9jLCBmaWxlbmFtZSkKQ29sbGVjdFBhcnRzKGRvYyA9IHByb2plY3Quc2NoZW1hdGljKQogIGUgPT4KICBhdHRyID0+Cih7IG5hbWUsIGRldmljZXNldCwgZGV2aWNlLCB2YWx1ZSB9KSA9PgpDb2xsZWN0RWxlbWVudHMoZG9jID0gcHJvamVjdC5ib2FyZCkKICBlID0+Cih7IG5hbWUsIGxpYnJhcnksIHBhY2thZ2U6IHBrZywgdmFsdWUgfSkgPT4KQ29sbGVjdFBhcnRzRWxlbWVudHMocHJvaiA9IHByb2plY3QpCiAgZSA9PgogIGEgPT4KICBlID0+CihbeyB4LCB5LCAuLi5lbGVtZW50IH0sIHBhcnRdKSA9PgpMaXN0UGFydHMoZG9jID0gcHJvamVjdC5zY2hlbWF0aWMpCiAgcCA9PgooeyBuYW1lLCBkZXZpY2VzZXQsIGRldmljZSwgdmFsdWUgfSkgPT4KU2hvd1BhcnRzKGRvYyA9IHByb2plY3Quc2NoZW1hdGljKQooeyBuYW1lLCBkZXZpY2VzZXQsIGRldmljZSwgdmFsdWUgfSkgPT4KRWFnbGVQcmludChmaWxlLCBvdXRwdXQpCihkaXIsIGJhc2UsIGV4dCkgPT4KICBtYWluKC4uLmFyZ3MpCiAgdG9OdW1iZXIobikKICB3aXJlKC4uLmFyZ3MpCiAgY29pbCh7IHJlY3QsIG4sIGRpYW1ldGVyLCB3aWR0aCB9KQogIGxvYWQoZmlsZW5hbWUsIHByb2plY3QgPSBnbG9iYWxUaGlzLnByb2plY3QpCiAgbmV3UHJvamVjdChmaWxlbmFtZSkKICBzY2g6ICgpID0+CiAgYnJkOiAoKSA9PgogIG5leHRQcm9qZWN0KCkKICBwcm9qZWN0TmFtZXMoKQogIHF1aXQoYXJnKQogIHJlbmRlclRvU3RyaW5nKGFyZykKKC4uLmFyZ3MpID0+CigpID0+CiAgLmV4aXQgPSAoKSA9PgogIC5kZWJ1ZyA9ICguLi5hcmdzKSA9PgogIC5zaG93ID0gdmFsdWUgPT4KKCkgPT4KKGl0ZW0sIGksIGEpID0+CiAgZW50cnkgPT4KICBlbnRyeSA9PgpUZXJtaW5hdGUoZXhpdENvZGUpCiAgeG1sKHN0cmluZ3MsIGV4cHJlc3Npb25zKQplID0+ClVwZGF0ZU1lYXN1cmVzKGJvYXJkKQogIGxpbmVzID0+CiAgZSA9PgogIGxpbmUgPT4KQWxpZ25JdGVtKGl0ZW0pCiAgdHIgPT4KQWxpZ25BbGwoZG9jID0gZ2xvYmFsVGhpcy5kb2N1bWVudCkKICBmaXhWYWx1ZShlbGVtZW50KQogIGZpeFZhbHVlcyhkb2MpCiAgY29vcmRNYXAoZG9jKQogIHAgPT4KICB0ID0+CkdldFBvbHlnb25zKGQgPSBkb2MpCiAgZSA9PgpGaW5kUG9seWdvbnMoKQogIGRvYyA9PgogIGUgPT4KUmVtb3ZlUG9seWdvbnMocCA9IHBvbHlnb25zKQooW2RvYywgbGlzdF0pID0+CiAgcGF0aCA9PgpHZXROYW1lcyhkb2MsIHByZWQpCiAgcHJlZCA9IGUgPT4KICBzaGVldCA9PgogIGUgPT4KICBlID0+CmUgPT4KKFt2LCBwXSkgPT4KKFt2LCBwXSkgPT4KKCkgPT4KICBkb2MgPT4KICBzaGVldCA9PgpHZXRCeU5hbWUoZG9jLCBuYW1lKQpDb3JyZWxhdGVTY2hlbWF0aWNBbmRCb2FyZChzY2hlbWF0aWMsIGJvYXJkKQogIGQgPT4KICBuID0+CiAgbmFtZSA9PgogIGRvYyA9PgpHZXRTaGVldHMoZG9jX29yX3Byb2opClNhdmVMaWJyYXJpZXMoKQooW24sIGVdKSA9PgooYWNjLCBbbiwgZV0pID0+CmUgPT4KICBlID0+CihhLCBiKSA9PgogIGlkID0+CiAgaWQgPT4KKFtuLCBlXSkgPT4KICBuYW1lID0+CihhY2MsIFtuLCBlXSkgPT4KQm9hcmRGcm9tU2NoZW1hdGljKGRvYyA9IHByb2plY3Quc2NoZW1hdGljLCBmID0gMSwgcj0wLjUpCkluaXRCb2FyZChkb2MgPSBwcm9qZWN0LmJvYXJkKQooW25hbWUsIGVdKSA9PgogIHRlc3RFYWdsZShmaWxlbmFtZSkKKFtuYW1lLCBlXSkgPT4KICBlID0+CihbbmFtZSwgaV0pID0+CiAgcCA9PgooY2hpbGQsIGksIGEpID0+CihjaGlsZDIsIGkyKSA9PgooW2luZGV4LCBlcXVhbF0pID0+CihbaW5kZXhdKSA9PgogIGkgPT4KICBpID0+CiAgZG9jID0+CihbZmlsZSwgZV0pID0+CihbZmlsZSwgeHBhdGhdKSA9PgooW2ssIHZdKSA9PgpNb2RpZnlQYXRoKHAsIGZuID0gKGRpciwgYmFzZSwgZXh0KSA9PiBbZGlyLCBiYXNlLCBleHRdKQooKSA9PgpBcHBlbmRUb0ZpbGVuYW1lKHAsIHN0ciA9ICcnKQooZGlyLCBiYXNlLCBleHQpID0+ClNldFNWR0JhY2tncm91bmQoeG1sLCBjb2xvciA9ICcjZmZmZmZmJykKKGUsIG4pID0+CihlLCBuKSA9PgooZSwgbikgPT4KKGUsIG4pID0+CkZpbGVGdW5jdGlvbiA9IChmbiwgcmZuID0gUmVhZEZpbGUsIHdmbiA9IFdyaXRlRmlsZSwgbmFtZWZuID0gbiA9PiBuLCAuLi5hcmdzKSA9PgooZmlsZW5hbWUsIC4uLmFyZ3MpID0+Cm4gPT4KZGF0YSA9PgpuID0+ClB1dFJvd3NDb2x1bW5zKHJvd3MpCihhY2MsIHJvdykgPT4KICByb3cgPT4KKGNvbCwgaSkgPT4KR2V0TGlicmFyeShlKQpFbGVtZW50TmFtZShlKQpHZXRSb3RhdGlvbihlbGVtZW50KQpQYWNrYWdlMkNpcmN1aXQocCkKKHsgeCwgeSB9KSA9PgogIHB0ID0+CiAgcHQgPT4KKHsgeCB9KSA9PgooeyB5IH0pID0+CiAgcHQgPT4KICBwdCA9PgogIGNvb3JkID0+CiAgeCA9PgogIHkgPT4KKHsgeCwgeSB9KSA9PgooeyB4LCB5IH0pID0+CkNvbnRhY3RyZWYyQ2lyY3VpdChjcmVmKQogIGUgPT4KU2lnbmFsMkNpcmN1aXQocykKRWxlbWVudDJDaXJjdWl0KGVsZW1lbnQpCkdldFVzZWRQYWNrYWdlcyhkb2MgPSBwcm9qZWN0LmJvYXJkKQogIGUgPT4KR2V0UGFja2FnZVBpdGNoKHBrZykKICBwYWQgPT4KRWFnbGUyQ2lyY3VpdChkb2MgPSBwcm9qZWN0LmJvYXJkLCB3aWR0aCA9IDEwMCwgaGVpZ2h0ID0gMTAwKQpFYWdsZTJDaXJjdWl0SlMoZG9jID0gcHJvamVjdC5zY2hlbWF0aWMsIHNjYWxlID0gNTAsIHNoZWV0ID0gMCkKbiA9PgogIGUgPT4KTWFrZUdyYXBoKGJvYXJkID0gcHJvamVjdC5ib2FyZCwgaWdub3JlID0gL14oR05EfFstK11bMC05XStWKSQvKQpEcmF3R3JhcGgoZywgdykAAAAAAAAAABMLAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				]
			]
		},
		{
			"file": "upload-server.js",
			"redo_stack":
			[
				[
					1,
					1,
					"insert",
					{
						"characters": "rver"
					},
					"BAAAAAMAAAAAAAAAAwAAAAAAAAABAAAAcgIAAAAAAAAAAgAAAAAAAAABAAAAZQEAAAAAAAAAAQAAAAAAAAABAAAAdgAAAAAAAAAAAAAAAAAAAAABAAAAcg",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAEAAAAAAAAAAQAAAAAAAAAAAAAAAAA8L8"
				]
			],
			"settings":
			{
				"buffer_size": 36357,
				"line_ending": "Unix"
			}
		},
		{
			"file": "server.js",
			"redo_stack":
			[
				[
					3,
					1,
					"unindent",
					null,
					"AQAAAL0PAAAAAAAAvw8AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvw8AAAAAAAC/DwAAAAAAAAAAAAAAAPC/"
				]
			],
			"settings":
			{
				"buffer_size": 29538,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					16,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAABwNAAAAAAAAHQ0AAAAAAAAAAAAAHQ0AAAAAAAAfDQAAAAAAAAAAAAA",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAcDQAAAAAAABwNAAAAAAAAAAAAAAAA8L8"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAPoMAAAAAAAA+wwAAAAAAAAAAAAA+wwAAAAAAAD9DAAAAAAAAAAAAAAgDQAAAAAAACANAAAAAAAAAgAAACAg",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD6DAAAAAAAAPoMAAAAAAAAAAAAAAAA8L8"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAE0MAAAAAAAATgwAAAAAAAAAAAAATgwAAAAAAABSDAAAAAAAAAAAAAAADQAAAAAAAAANAAAAAAAAAgAAACAg",
					"CAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABNDAAAAAAAAE0MAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "draw-utils.js",
			"settings":
			{
				"buffer_size": 5161,
				"line_ending": "Unix"
			}
		},
		{
			"file": "draw.html",
			"settings":
			{
				"buffer_size": 500,
				"line_ending": "Unix"
			}
		},
		{
			"file": "draw.js",
			"settings":
			{
				"buffer_size": 16716,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					12,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAMI8AAAAAAAAwzwAAAAAAAAAAAAAwzwAAAAAAADEPAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwjwAAAAAAADCPAAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": "-mirrored"
					},
					"CQAAACE9AAAAAAAAIj0AAAAAAAAAAAAAIj0AAAAAAAAjPQAAAAAAAAAAAAAjPQAAAAAAACQ9AAAAAAAAAAAAACQ9AAAAAAAAJT0AAAAAAAAAAAAAJT0AAAAAAAAmPQAAAAAAAAAAAAAmPQAAAAAAACc9AAAAAAAAAAAAACc9AAAAAAAAKD0AAAAAAAAAAAAAKD0AAAAAAAApPQAAAAAAAAAAAAApPQAAAAAAACo9AAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIT0AAAAAAAAhPQAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"left_delete",
					null,
					"AQAAACE9AAAAAAAAIT0AAAAAAAAJAAAALW1pcnJvcmVk",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKj0AAAAAAAAhPQAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAPwnAAAAAAAA/ScAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/CcAAAAAAAD8JwAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": " transform:"
					},
					"CwAAAP0nAAAAAAAA/icAAAAAAAAAAAAA/icAAAAAAAD/JwAAAAAAAAAAAAD/JwAAAAAAAAAoAAAAAAAAAAAAAAAoAAAAAAAAASgAAAAAAAAAAAAAASgAAAAAAAACKAAAAAAAAAAAAAACKAAAAAAAAAMoAAAAAAAAAAAAAAMoAAAAAAAABCgAAAAAAAAAAAAABCgAAAAAAAAFKAAAAAAAAAAAAAAFKAAAAAAAAAYoAAAAAAAAAAAAAAYoAAAAAAAABygAAAAAAAAAAAAABygAAAAAAAAIKAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/ScAAAAAAAD9JwAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAgoAAAAAAAACSgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAACCgAAAAAAAAIKAAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAAkoAAAAAAAACygAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAACSgAAAAAAAAJKAAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": "scale(-"
					},
					"BwAAAAooAAAAAAAACygAAAAAAAAAAAAACygAAAAAAAAMKAAAAAAAAAAAAAAMKAAAAAAAAA0oAAAAAAAAAAAAAA0oAAAAAAAADigAAAAAAAAAAAAADigAAAAAAAAPKAAAAAAAAAAAAAAPKAAAAAAAABAoAAAAAAAAAAAAABAoAAAAAAAAESgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAACigAAAAAAAAKKAAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": "1,"
					},
					"AgAAABEoAAAAAAAAEigAAAAAAAAAAAAAEigAAAAAAAATKAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAESgAAAAAAAARKAAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"left_delete",
					null,
					"AQAAABIoAAAAAAAAEigAAAAAAAABAAAALA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEygAAAAAAAATKAAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABIoAAAAAAAAEygAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEigAAAAAAAASKAAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					1,
					"left_delete",
					null,
					"AQAAABIoAAAAAAAAEigAAAAAAAABAAAAIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEygAAAAAAAATKAAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAABIoAAAAAAAAEygAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEigAAAAAAAASKAAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": " 1)"
					},
					"AwAAABMoAAAAAAAAFCgAAAAAAAAAAAAAFCgAAAAAAAAVKAAAAAAAAAAAAAAVKAAAAAAAABYoAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEygAAAAAAAATKAAAAAAAAAAAAAAAAPC/"
				],
				[
					66,
					1,
					"cut",
					null,
					"AQAAALYnAAAAAAAAticAAAAAAABmAAAAICBFbGVtZW50LnNldENTUyhlbGVtLCB7IHBvc2l0aW9uOiAnYWJzb2x1dGUnLCBsZWZ0OiAnMHB4JywgdG9wOiAnMHB4JywgdHJhbnNmb3JtOiAnc2NhbGUoLTEsIDEpJyB9KTsK",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAticAAAAAAAAcKAAAAAAAAAAAAAAAAPC/"
				],
				[
					67,
					2,
					"paste",
					null,
					"AgAAALYnAAAAAAAAHCgAAAAAAAAAAAAAHCgAAAAAAACCKAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAticAAAAAAAC2JwAAAAAAAAAAAAAAAPC/"
				],
				[
					70,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAPwnAAAAAAAA/ScAAAAAAAAAAAAA/ScAAAAAAAD9JwAAAAAAABsAAAAsIHRyYW5zZm9ybTogJ3NjYWxlKC0xLCAxKSc",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/CcAAAAAAAAXKAAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": ".firstElementChild"
					},
					"EgAAABcoAAAAAAAAGCgAAAAAAAAAAAAAGCgAAAAAAAAZKAAAAAAAAAAAAAAZKAAAAAAAABooAAAAAAAAAAAAABooAAAAAAAAGygAAAAAAAAAAAAAGygAAAAAAAAcKAAAAAAAAAAAAAAcKAAAAAAAAB0oAAAAAAAAAAAAAB0oAAAAAAAAHigAAAAAAAAAAAAAHigAAAAAAAAfKAAAAAAAAAAAAAAfKAAAAAAAACAoAAAAAAAAAAAAACAoAAAAAAAAISgAAAAAAAAAAAAAISgAAAAAAAAiKAAAAAAAAAAAAAAiKAAAAAAAACMoAAAAAAAAAAAAACMoAAAAAAAAJCgAAAAAAAAAAAAAJCgAAAAAAAAlKAAAAAAAAAAAAAAlKAAAAAAAACYoAAAAAAAAAAAAACYoAAAAAAAAJygAAAAAAAAAAAAAJygAAAAAAAAoKAAAAAAAAAAAAAAoKAAAAAAAACkoAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFygAAAAAAAAXKAAAAAAAAAAAAAAAAPC/"
				],
				[
					78,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAACwoAAAAAAAALSgAAAAAAAAAAAAALSgAAAAAAAAtKAAAAAAAAC8AAAAgcG9zaXRpb246ICdhYnNvbHV0ZScsIGxlZnQ6ICcwcHgnLCB0b3A6ICcwcHgnLA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALCgAAAAAAABbKAAAAAAAAAAAAAAAAPC/"
				],
				[
					86,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAAQoAAAAAAAABSgAAAAAAAAAAAAABSgAAAAAAAAGKAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABCgAAAAAAAAEKAAAAAAAAAAAAAAAAPC/"
				],
				[
					91,
					2,
					"left_delete",
					null,
					"AgAAAAUoAAAAAAAABSgAAAAAAAABAAAALwQoAAAAAAAABCgAAAAAAAABAAAALw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABigAAAAAAAAGKAAAAAAAAAAAAAAAAPC/"
				],
				[
					94,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAAQoAAAAAAAABSgAAAAAAAAAAAAABSgAAAAAAAAGKAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABCgAAAAAAAAEKAAAAAAAAAAAAAAAAPC/"
				],
				[
					97,
					2,
					"left_delete",
					null,
					"AgAAAAUoAAAAAAAABSgAAAAAAAABAAAALwQoAAAAAAAABCgAAAAAAAABAAAALw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABigAAAAAAAAGKAAAAAAAAAAAAAAAAPC/"
				],
				[
					100,
					1,
					"insert",
					{
						"characters": "lk"
					},
					"AwAAABgoAAAAAAAAGSgAAAAAAAAAAAAAGSgAAAAAAAAZKAAAAAAAAAUAAABmaXJzdBkoAAAAAAAAGigAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGCgAAAAAAAAdKAAAAAAAAAAAAAAAAPC/"
				],
				[
					101,
					1,
					"left_delete",
					null,
					"AQAAABkoAAAAAAAAGSgAAAAAAAABAAAAaw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGigAAAAAAAAaKAAAAAAAAAAAAAAAAPC/"
				],
				[
					102,
					1,
					"insert",
					{
						"characters": "ast"
					},
					"AwAAABkoAAAAAAAAGigAAAAAAAAAAAAAGigAAAAAAAAbKAAAAAAAAAAAAAAbKAAAAAAAABwoAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGSgAAAAAAAAZKAAAAAAAAAAAAAAAAPC/"
				],
				[
					107,
					1,
					"right_delete",
					null,
					"AQAAABwoAAAAAAAAHCgAAAAAAAABAAAARQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHCgAAAAAAAAcKAAAAAAAAAAAAAAAAPC/"
				],
				[
					108,
					1,
					"insert",
					{
						"characters": "√§"
					},
					"AQAAABwoAAAAAAAAHSgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHCgAAAAAAAAcKAAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"revert",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP09AAAAAAAAoj4AAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "eagle-shell.js",
			"settings":
			{
				"buffer_size": 42559,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					13,
					1,
					"insert",
					{
						"characters": "[..."
					},
					"BAAAAMWVAAAAAAAAxpUAAAAAAAAAAAAAxpUAAAAAAADHlQAAAAAAAAAAAADHlQAAAAAAAMiVAAAAAAAAAAAAAMiVAAAAAAAAyZUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADFlQAAAAAAAMWVAAAAAAAAAAAAAAAA8L8"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "]"
					},
					"AQAAANqVAAAAAAAA25UAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADalQAAAAAAANqVAAAAAAAAAAAAAAAA8L8"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": ".list]"
					},
					"BgAAADONAAAAAAAANI0AAAAAAAAAAAAANI0AAAAAAAA1jQAAAAAAAAAAAAA1jQAAAAAAADaNAAAAAAAAAAAAADaNAAAAAAAAN40AAAAAAAAAAAAAN40AAAAAAAA4jQAAAAAAAAAAAAA4jQAAAAAAADmNAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAzjQAAAAAAADONAAAAAAAAAAAAAAAA8L8"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "[..."
					},
					"BAAAAC2NAAAAAAAALo0AAAAAAAAAAAAALo0AAAAAAAAvjQAAAAAAAAAAAAAvjQAAAAAAADCNAAAAAAAAAAAAADCNAAAAAAAAMY0AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAtjQAAAAAAAC2NAAAAAAAAAAAAAAAA8L8"
				],
				[
					75,
					1,
					"cut",
					null,
					"AQAAAGaNAAAAAAAAZo0AAAAAAAAdAAAAICAgIC5tYXAocHQgPT4gcHQuZGl2KDIuNTQpKQo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABmjQAAAAAAAIONAAAAAAAAAAAAAAAA8L8"
				],
				[
					76,
					2,
					"paste",
					null,
					"AgAAAGaNAAAAAAAAg40AAAAAAAAAAAAAg40AAAAAAACgjQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABmjQAAAAAAAGaNAAAAAAAAAAAAAAAA8L8"
				],
				[
					81,
					1,
					"insert",
					{
						"characters": "round"
					},
					"BgAAAJWNAAAAAAAAlo0AAAAAAAAAAAAAlo0AAAAAAACWjQAAAAAAAAMAAABkaXaWjQAAAAAAAJeNAAAAAAAAAAAAAJeNAAAAAAAAmI0AAAAAAAAAAAAAmI0AAAAAAACZjQAAAAAAAAAAAACZjQAAAAAAAJqNAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACVjQAAAAAAAJiNAAAAAAAAAAAAAAAA8L8"
				],
				[
					83,
					4,
					"right_delete",
					null,
					"BAAAAJuNAAAAAAAAm40AAAAAAAABAAAAMpuNAAAAAAAAm40AAAAAAAABAAAALpuNAAAAAAAAm40AAAAAAAABAAAANZuNAAAAAAAAm40AAAAAAAABAAAANA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACbjQAAAAAAAJuNAAAAAAAAAAAAAAAA8L8"
				],
				[
					84,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAAJuNAAAAAAAAnI0AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACbjQAAAAAAAJuNAAAAAAAAAAAAAAAA8L8"
				],
				[
					97,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAALyNAAAAAAAAvY0AAAAAAAAAAAAAvY0AAAAAAADBjQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC8jQAAAAAAALyNAAAAAAAAAAAAAAAA8L8"
				],
				[
					99,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAKONAAAAAAAApI0AAAAAAAAAAAAApI0AAAAAAACljQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACjjQAAAAAAAKONAAAAAAAAAAAAAAAARkA"
				]
			]
		},
		{
			"file": "lib/dom/element.js",
			"settings":
			{
				"buffer_size": 35370,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/eagle/element.js",
			"settings":
			{
				"buffer_size": 36661,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					18,
					1,
					"insert",
					{
						"characters": "owner."
					},
					"BgAAAGRFAAAAAAAAZUUAAAAAAAAAAAAAZUUAAAAAAABmRQAAAAAAAAAAAABmRQAAAAAAAGdFAAAAAAAAAAAAAGdFAAAAAAAAaEUAAAAAAAAAAAAAaEUAAAAAAABpRQAAAAAAAAAAAABpRQAAAAAAAGpFAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABkRQAAAAAAAGRFAAAAAAAAAAAAAAAA8L8"
				],
				[
					24,
					1,
					"paste",
					null,
					"AQAAAD9EAAAAAAAARUQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA/RAAAAAAAAD9EAAAAAAAAAAAAAAAA8L8"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"prettier",
				"JsPrettier: Format Code"
			],
			[
				"prett",
				"JsPrettier: Format Code"
			],
			[
				":q",
				"Coffee: Quick Run Bar"
			],
			[
				"clang",
				"Clang Format: Format Selection"
			],
			[
				"mode",
				"HTML: Encode Special Characters"
			],
			[
				"insert",
				"Snippet: Insert livereload.js script"
			],
			[
				":w",
				":w - Save"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"OUTLIN",
				"Browse Mode: Outline (Right)"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 142.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/noise-source.circuit",
		"/home/roman/Projects/plot-cv/lib/vfs/fs-adapter-memory.js",
		"/home/roman/Projects/plot-cv/lib/htmlentities.js",
		"/home/roman/Projects/plot-cv/webakeit.js",
		"/home/roman/Projects/plot-cv/webakeit-telegram.js",
		"/home/roman/Downloads/Telegram Desktop/ChatExport_2024-04-09/messages.html",
		"/home/roman/Projects/plot-cv/static/css/webakeit.css",
		"/home/roman/Projects/plot-cv/webakeit.tmp",
		"/home/roman/Projects/plot-cv/webakeit.html",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/xml-shell.js",
		"/home/roman/Projects/plot-cv/plot-cv.sublime-project",
		"/home/roman/Projects/plot-cv/eagle-shell.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/xml-shell.es",
		"/home/roman/Projects/plot-cv/lib/geom/splines.js",
		"/home/roman/Projects/plot-cv/fire.html",
		"/home/roman/Projects/plot-cv/numbers2.c",
		"/home/roman/Projects/plot-cv/main.js",
		"/home/roman/Projects/plot-cv/lib/geom/pointList.js",
		"/home/roman/Projects/plot-cv/draw.js",
		"/home/roman/Projects/plot-cv/lib/autoStore.js",
		"/home/roman/Projects/plot-cv/lib/async/events.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
		"/home/roman/Projects/plot-cv/debugger-client.js",
		"/home/roman/Projects/plot-cv/fire.js",
		"/home/roman/Projects/plot-cv/upload-server.js",
		"/home/roman/Projects/plot-cv/lib/geom/point.js",
		"/home/roman/Projects/plot-cv/lib/misc.js",
		"/home/roman/Projects/plot-cv/components.js",
		"/home/roman/Projects/plot-cv/draw.html",
		"/home/roman/Projects/plot-cv/static/css/draw.css",
		"/home/roman/Projects/plot-cv/webSocket.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/point.js",
		"/home/roman/Projects/plot-cv/draw-utils.js",
		"/home/roman/Projects/plot-cv/lib/fd-graph.js",
		"/home/roman/Projects/plot-cv/svg-box.js",
		"/home/roman/Projects/plot-cv/numbers.c",
		"/home/roman/Projects/plot-cv/hex.c",
		"/home/roman/Projects/plot-cv/upload-worker.js",
		"/home/roman/Projects/plot-cv/mailcow-db.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/examples/ssl-client.js",
		"/home/roman/Projects/plot-cv/promise-worker.js",
		"/home/roman/Projects/plot-cv/upload.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-mysql.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/wscli.js",
		"/home/roman/Projects/plot-cv/lib/geom/graph.js",
		"/home/roman/Projects/plot-cv/test-nanovg.js",
		"/home/roman/Projects/plot-cv/lib/eagle/node.js",
		"/home/roman/Projects/plot-cv/lib/eagle/element.js",
		"/home/roman/Projects/plot-cv/workertest.js",
		"/home/roman/Projects/plot-cv/test-worker.js",
		"/home/roman/Projects/plot-cv/static/css/upload.css",
		"/home/roman/Projects/plot-cv/upload.html",
		"/home/roman/Projects/plot-cv/debugger-server.js",
		"/home/roman/Projects/plot-cv/test-opencv.js",
		"/home/roman/Projects/plot-cv/map.html",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/tests/server.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/directory.js",
		"/home/roman/Projects/plot-cv/test-video.js",
		"/home/roman/Projects/plot-cv/cv-shell.js",
		"/home/roman/Projects/plot-cv/directory.html",
		"/home/roman/Projects/plot-cv/coil.html",
		"/home/roman/Projects/plot-cv/filelist.html",
		"/home/roman/Projects/plot-cv/noise.js",
		"/home/roman/Projects/plot-cv/pinkNoise.js",
		"/home/roman/Projects/plot-cv/noise.html",
		"/home/roman/Projects/plot-cv/landing.html",
		"/home/roman/Projects/plot-cv/404.html",
		"/home/roman/Projects/plot-cv/index.html",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/js/rpc.js",
		"/home/roman/Projects/plot-cv/style.css",
		"/home/roman/Projects/plot-cv/lib/lscache.js",
		"/home/roman/Projects/plot-cv/example.html",
		"/home/roman/Projects/plot-cv/clock.html",
		"/home/roman/Projects/plot-cv/eagle2svg.js",
		"/home/roman/Projects/plot-cv/Pink-Noise-Generator-Thomas-Henry.brd",
		"/home/roman/Projects/plot-cv/lib/eagle/schematicRenderer.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/grid.js",
		"/home/roman/Projects/plot-cv/lib/eagle/renderUtils.js",
		"/home/roman/Projects/plot-cv/lib/geom/transformation.js",
		"/home/roman/Projects/plot-cv/lib/eagle/nodeList.js",
		"/home/roman/Projects/plot-cv/lib/eagle/ref.js",
		"/home/roman/Projects/plot-cv/lib/eagle/project.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/polygon.js",
		"/home/roman/Projects/plot-cv/lib/geom/polygon.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/symbol.js",
		"/home/roman/Projects/plot-cv/lib/eagle/boardRenderer.js",
		"/home/roman/Projects/plot-cv/lib/eagle/svgRenderer.js",
		"/home/roman/Projects/plot-cv/lib/eagle/document.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/pad.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/hole.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/smd.js",
		"/home/roman/Projects/plot-cv/lib/ecmascript/parser.js",
		"/home/roman/Projects/plot-cv/github-userscript.js",
		"/home/roman/Projects/an-tronics/eagle/RX-FM-Radio-1.5V-dip.brd",
		"/home/roman/Projects/plot-cv/lib/eagle/components/pin.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/wire.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/3rdparty/denodrivers-postgres/docs/.nojekyll",
		"/home/roman/Projects/plot-cv/lib/eagle/components/via.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/repl.js",
		"/home/roman/Projects/plot-cv/lib/geom/line.js",
		"/home/roman/Projects/plot-cv/lib/geom/rect.js",
		"/home/roman/Projects/an-tronics/eagle/lbr/l.lbr",
		"/home/roman/Projects/an-tronics/eagle/github-userscript.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-internal.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/src/minnet-client.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/lib/core-net/close.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/callback.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/qjsm.c",
		"/home/janos/Projects/plot-cv/test-sourcemap.js",
		"/home/janos/Projects/plot-cv/ws-worker.js",
		"/home/janos/Projects/plot-cv/tokmap.c",
		"/home/janos/Projects/plot-cv/count-neighbours.js",
		"/home/janos/Projects/plot-cv/findsig.c",
		"/home/janos/Projects/plot-cv/getModuleProps.js",
		"/home/janos/Projects/plot-cv/midi-tcp.js",
		"/home/janos/Projects/plot-cv/portal.js",
		"/home/janos/Projects/plot-cv/resolve-imports.js",
		"/home/janos/Projects/plot-cv/palette.css",
		"/home/janos/Projects/plot-cv/get-res.c",
		"/home/janos/Projects/plot-cv/get-msys-packages.js",
		"/home/janos/Projects/plot-cv/gerber2gcode.js",
		"/home/janos/Projects/plot-cv/ftrace.js",
		"/home/janos/Projects/plot-cv/filelist.js",
		"/home/janos/Projects/plot-cv/coil.js",
		"/home/janos/Projects/plot-cv/eagle-server.js",
		"/home/janos/Projects/plot-cv/eagle-query.js"
	],
	"find":
	{
		"height": 32.0
	},
	"find_in_files":
	{
		"height": 107.0,
		"where_history":
		[
			"/home/roman/Projects/plot-cv,*.js",
			"/home/roman/Projects/plot-cv/lib/eagle,*.js",
			"/home/roman/Projects/plot-cv/lib,*.js",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"Package2Circuit",
			"Eagle2C",
			"e2_5_4v",
			"Eagle2C",
			"streamify",
			"LoadSVG",
			"mountDirs",
			"defaultDirs",
			"glob\\b",
			"glob",
			"import { MessageReceiver, MessageTransmitter, MessageTransceiver, codecs, RPCApi, RPCProxy, RPCObject, RPCFactory, Connection, RPC_PARSE_ERROR, RPC_INVALID_REQUEST, RPC_METHOD_NOT_FOUND, RPC_INVALID_PARAMS, RPC_INTERNAL_ERROR, RPC_SERVER_ERROR_BASE, FactoryEndpoint, RPCServer, RPCClient, FactoryClient, RPCSocket, GetProperties, GetKeys, SerializeValue, DeserializeSymbols, DeserializeValue, RPCConnect, RPCListen } from './quickjs/qjs-net/js/rpc.js';\n",
			">\n",
			"^  (.)\\:",
			"Heute",
			"Hippiainen",
			"Hippiainen<",
			"media",
			"media_wrap",
			"√§",
			"√º",
			"√∂",
			"BoardFromSchematic",
			"InitBoar",
			"MOVE",
			"instances",
			"PointList\\.prototype\\.([^ ]*) \\= function",
			"addPoint",
			"PointList\\.prototype\\.([^ ]*) \\= function",
			"\\.add\\b",
			"\\bvar\\b",
			"this\\._points",
			"add =",
			"safe",
			"this\\._points",
			"ySeries",
			"onMessage",
			"\\berror\\b",
			"send",
			"send.*error",
			"AddPoint",
			"error",
			"CreateSocket",
			"'L'",
			"lineCommand",
			"'L'",
			"zoomFactor",
			"ZoomHandler",
			"zoomFactor",
			"zoomPos",
			"ZoomHandler",
			"LoadSVG",
			"RenderPalette",
			"GetSignalNames",
			"TouchEvents",
			"MouseEvents",
			"FindPoint",
			"GetPosition",
			"CreateElement",
			"GetElementsBySignal",
			"SortElementsByPosition",
			"EllipticArc",
			"Tracked",
			"Observable",
			"onMouseWhee",
			"AddPoint",
			"AnchorPoints",
			"anchorPoints",
			"AddPoint",
			"Move",
			"Path",
			"'path'",
			"AnchorPoints",
			"'circle'",
			"TouchEvents",
			"$",
			"data-",
			"MovePoint",
			"AddPoint",
			"TouchEvent",
			"elementsFromPoint",
			"touchstart",
			"Touch \\? 'o",
			"touchstart",
			"FindPoint",
			"points",
			"FindPoint",
			"MovePoint",
			"anchorPoints",
			"useTrkl",
			"anchorPoints",
			"AddPoint",
			"assign",
			"anchorPoints",
			"point-",
			"'Touch'",
			"mousedown",
			"'touchstart",
			"waitOne",
			"streamify",
			"TouchEvents",
			"streamify",
			"TouchEvents",
			"touchstart",
			"streamify",
			"TouchEvents",
			"MoveHandler",
			"TouchEvents",
			"MouseEvents",
			"isObject",
			"BBox",
			"geom.js",
			"Up",
			"querySelector",
			"AnchorPoints",
			"'circle'",
			"nearest",
			"minIndex",
			"minDist",
			"find",
			"sub =",
			"distance",
			"prototype.",
			"\\.at",
			"\\.at =",
			"prototype.find",
			"toStringTag",
			"get points",
			"ls ="
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"  '\\1':",
			"&auml;",
			"&uuml;",
			"&ouml;",
			"\\1",
			"let",
			"this",
			"ret",
			"factor",
			"GetCirclePosition",
			"index",
			"dist",
			"}\\n\\n\\1",
			"}\\n\\1",
			"Log",
			"format_base",
			"\\1u",
			"format",
			"GREEN",
			"c",
			"output",
			"TYPE_MASK",
			" + (obj?.cacheBucket ?? '') + ",
			"\\1//\\2",
			"opts",
			"}\\n\\n",
			"}\\n\\n\\1",
			"",
			"\n      t = 'l';"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2835,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": "/home/roman/Projects/plot-cv/lib/dom/element.js",
							"function_name_status_row": 0,
							"outline_rename_mode": false,
							"show_line_column": "disabled",
							"symkeys":
							[
								[
									457,
									464
								],
								[
									681,
									688
								],
								[
									780,
									791
								],
								[
									846,
									857
								],
								[
									912,
									923
								],
								[
									963,
									977
								],
								[
									1128,
									1142
								],
								[
									1251,
									1269
								],
								[
									1491,
									1513
								],
								[
									2742,
									2748
								],
								[
									2929,
									2966
								],
								[
									3107,
									3123
								],
								[
									3302,
									3318
								],
								[
									3332,
									3351
								],
								[
									3658,
									3675
								],
								[
									3813,
									3824
								],
								[
									3909,
									3941
								],
								[
									4293,
									4304
								],
								[
									4592,
									4616
								],
								[
									4660,
									4684
								],
								[
									4765,
									4789
								],
								[
									5151,
									5162
								],
								[
									5446,
									5489
								],
								[
									5811,
									5841
								],
								[
									6258,
									6290
								],
								[
									6556,
									6565
								],
								[
									7192,
									7225
								],
								[
									7539,
									7543
								],
								[
									7755,
									7759
								],
								[
									8090,
									8138
								],
								[
									8482,
									8509
								],
								[
									8926,
									8955
								],
								[
									10181,
									10195
								],
								[
									10523,
									10543
								],
								[
									11242,
									11262
								],
								[
									12580,
									12620
								],
								[
									14555,
									14604
								],
								[
									14859,
									14863
								],
								[
									15015,
									15072
								],
								[
									15419,
									15437
								],
								[
									16290,
									16357
								],
								[
									16542,
									16553
								],
								[
									16759,
									16782
								],
								[
									17249,
									17264
								],
								[
									17296,
									17309
								],
								[
									17398,
									17435
								],
								[
									17692,
									17743
								],
								[
									17935,
									17981
								],
								[
									18398,
									18413
								],
								[
									18438,
									18451
								],
								[
									18509,
									18544
								],
								[
									18665,
									18702
								],
								[
									18968,
									19004
								],
								[
									19079,
									19131
								],
								[
									19408,
									19444
								],
								[
									19573,
									19579
								],
								[
									19703,
									19709
								],
								[
									19725,
									19730
								],
								[
									19786,
									19793
								],
								[
									19958,
									19976
								],
								[
									20123,
									20171
								],
								[
									20234,
									20247
								],
								[
									20486,
									20521
								],
								[
									20964,
									20986
								],
								[
									21487,
									21548
								],
								[
									21982,
									21987
								],
								[
									22168,
									22173
								],
								[
									22469,
									22480
								],
								[
									22660,
									22664
								],
								[
									22921,
									22941
								],
								[
									23069,
									23074
								],
								[
									23144,
									23155
								],
								[
									23496,
									23509
								],
								[
									23900,
									23937
								],
								[
									24077,
									24090
								],
								[
									24294,
									24325
								],
								[
									24716,
									24763
								],
								[
									24878,
									24895
								],
								[
									24916,
									24963
								],
								[
									25152,
									25159
								],
								[
									25325,
									25332
								],
								[
									25570,
									25591
								],
								[
									25749,
									25765
								],
								[
									25802,
									25817
								],
								[
									25949,
									25972
								],
								[
									26020,
									26043
								],
								[
									26088,
									26103
								],
								[
									26295,
									26312
								],
								[
									26510,
									26540
								],
								[
									27276,
									27320
								],
								[
									27733,
									27768
								],
								[
									27940,
									27956
								],
								[
									28028,
									28061
								],
								[
									28205,
									28229
								],
								[
									28304,
									28355
								],
								[
									29822,
									29844
								],
								[
									30066,
									30095
								],
								[
									30320,
									30344
								],
								[
									30559,
									30564
								],
								[
									30643,
									30657
								],
								[
									30799,
									30819
								],
								[
									30874,
									30900
								],
								[
									31119,
									31192
								],
								[
									31917,
									31937
								],
								[
									31950,
									31968
								],
								[
									32098,
									32116
								],
								[
									32562,
									32576
								],
								[
									32806,
									32835
								],
								[
									33226,
									33244
								],
								[
									33377,
									33381
								],
								[
									33579,
									33587
								],
								[
									33604,
									33624
								],
								[
									33737,
									33742
								],
								[
									33775,
									33781
								],
								[
									34588,
									34624
								],
								[
									34776,
									34811
								],
								[
									34994,
									35005
								],
								[
									35273,
									35295
								]
							],
							"symlist":
							[
								"Element",
								"arg =>",
								"element =>",
								"element =>",
								"element =>",
								"  static wrap(e)",
								"(acc, name) =>",
								"function(...args)",
								"  static create(...args)",
								"  obj =>",
								"  static walkUp(elem, pred = e => true)",
								"  pred = (e, d) =>",
								"v =>",
								"stop =>",
								"  fn = (e, next) =>",
								"  emit = n =>",
								"  static walk(elem, fn, accu = {})",
								"()",
								"  predicate = (e, d, r) =>",
								"  getProp = (obj, prop) =>",
								"  getProp = (obj, prop) =>",
								"()",
								"  static *childIterator(elem, element = true)",
								"  static fromObject(obj, parent)",
								"  static toObject(elem, opts = {})",
								"(l, c) =>",
								"  static toCommand(elem, opts = {})",
								"  k =>",
								"  e =>",
								"  static find(arg, parent, globalObj = globalThis)",
								"  static findAll(arg, parent)",
								"  static attr(e, attrs_or_name)",
								"(acc, name) =>",
								"  static getRect(elem)",
								"  static rect(...args)",
								"  static setRect(element, rect, opts = {})",
								"  static position(element, edges = ['left', 'top'])",
								"  e =>",
								"  static move(element, point, pos, edges = ['left', 'top'])",
								"  getValue = prop =>",
								"  static moveRelative(element, to, edges = ['left', 'top'], callback)",
								"([k, v]) =>",
								"  move(x, y)",
								"  .cancel = () =>",
								"  .jump = () =>",
								"  static resize(element, ...dimensions)",
								"  static resizeRelative(element, to, f = 1, callback)",
								"  resize(width, height, rel = true)",
								"  .cancel = () =>",
								"  .jump = () =>",
								"  static getEdgesXYWH({ x, y, w, h })",
								"  static getEdge({ x, y, w, h }, which)",
								"  static getPointsXYWH({ x, y, w, h })",
								"  static cumulativeOffset(element, relative_to = null)",
								"  static getTRBL(element, prefix = '')",
								"  pos =>",
								"() =>",
								"() =>",
								"  prop =>",
								"([prop, value]) =>",
								"  static setTRBL(element, trbl, prefix = 'margin')",
								"(acc, pos) =>",
								"  static setCSS(element, prop, value)",
								"  .subscribe = newval =>",
								"  static getCSS(element, property = undefined, receiver = null)",
								"() =>",
								"() =>",
								"(acc, k) =>",
								"  k =>",
								"  receiver = result =>",
								"  get()",
								"([k, v]) =>",
								"(ret, key) =>",
								"  static xpath(elt, relative_to = null)",
								"(e, next) =>",
								"  static selector(elt, opts = {})",
								"  static depth(elem, relative_to = document.body)",
								"  static dump(elem)",
								"  dumpElem(child, accu, root, depth)",
								"  attr =>",
								"  name =>",
								"(e, a, r, d) =>",
								"  pred = (a, b) =>",
								"function(elem)",
								"  static prevSibling(sib)",
								"  static nextSibling(sib)",
								"  static idx(elt)",
								"  static name(elem)",
								"  static unique(elem, opts = {})",
								"  static factory(delegate = {}, parent = null)",
								"  .append_to = function(elem, parent)",
								"  .create = tag =>",
								"  .setattr = (elem, attr, value) =>",
								"  .setcss = (elem, css) =>",
								"  .bound_factory = (tag, attr = {}, parent = null) =>",
								"  static remove(element)",
								"  static isat(e, x, y, options)",
								"  static at(x, y, options)",
								"e =>",
								"(e, depth) =>",
								"(resolve, reject) =>",
								"(e, accu, root, depth) =>",
								"  static transition(element, css, time, easing = 'linear', callback = null)",
								"(resolve, reject) =>",
								"  trun = function(e)",
								"  tend = function(e)",
								"  cancel = () =>",
								"  static toString(e, opts = {})",
								"([name, value]) =>",
								"  e =>",
								"text =>",
								"(resolve, reject) =>",
								"() =>",
								"  err =>",
								"  static *children(elem, tfn = e => e)",
								"  static *recurse(elem, tfn = e => e)",
								"()",
								"  isElement(e)"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1715165701.35,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "upload-server.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 36357,
						"regions":
						{
						},
						"selection":
						[
							[
								20872,
								20883
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 651,
							"show_line_column": "disabled",
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1715165697.61,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 12598.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "server.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 29538,
						"regions":
						{
						},
						"selection":
						[
							[
								4033,
								4033
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 140,
							"show_line_column": "disabled",
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1715165697.6,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2190.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "draw-utils.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5161,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1715165697.59,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "draw.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 500,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1715165697.57,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "draw.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16716,
						"regions":
						{
						},
						"selection":
						[
							[
								15869,
								16034
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 599,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1715608231.09,
							"tabs_extra_last_activated_sheet_index": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 13162.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "eagle-shell.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 42559,
						"regions":
						{
						},
						"selection":
						[
							[
								36261,
								36261
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 1279,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1715610923.37,
							"tabs_extra_last_activated_sheet_index": 5,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 29159.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "lib/dom/element.js",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 35370,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1715615290.68,
							"tabs_extra_last_activated_sheet_index": 6,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "lib/eagle/element.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 36661,
						"regions":
						{
						},
						"selection":
						[
							[
								36661,
								36661
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 1026,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1715608460.42,
							"tabs_extra_last_activated_sheet_index": 7,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 23179.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 32.0
	},
	"input":
	{
		"height": 41.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.8,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 300.0
	},
	"output.Debugger Console":
	{
		"height": 300.0
	},
	"output.exec":
	{
		"height": 138.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "plot-cv.sublime-project",
	"replace":
	{
		"height": 60.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"elemen",
				"lib/eagle/element.js"
			],
			[
				"eagle-she",
				"eagle-shell.js"
			],
			[
				"draw.js",
				"draw.js"
			],
			[
				"draw.ht",
				"draw.html"
			],
			[
				"draw",
				"draw-utils.js"
			],
			[
				"server.",
				"server.js"
			],
			[
				"upload-ser",
				"upload-server.js"
			],
			[
				"htmle",
				"lib/htmlentities.js"
			],
			[
				"webka",
				"webakeit-telegram.js"
			],
			[
				"xml-she",
				"quickjs/qjs-modules/xml-shell.js"
			],
			[
				".html",
				"fire.html"
			],
			[
				"numbers2",
				"numbers2.c"
			],
			[
				"main.js",
				"main.js"
			],
			[
				"main",
				"main.js"
			],
			[
				"splines",
				"lib/geom/splines.js"
			],
			[
				"pointList",
				"lib/geom/pointList.js"
			],
			[
				"fire.js",
				"fire.js"
			],
			[
				"compon",
				"components.js"
			],
			[
				"ointlist",
				"lib/geom/pointList.js"
			],
			[
				"events.js",
				"lib/async/events.js"
			],
			[
				"point.js",
				"lib/geom/point.js"
			],
			[
				"misc.js",
				"lib/misc.js"
			],
			[
				"draw.css",
				"static/css/draw.css"
			],
			[
				"upload-server",
				"upload-server.js"
			],
			[
				"websocket",
				"webSocket.js"
			],
			[
				"draw.html",
				"draw.html"
			],
			[
				"autoStore",
				"lib/autoStore.js"
			],
			[
				"resolve-im",
				"quickjs/qjs-modules/resolve-imports.js"
			],
			[
				"svg-box",
				"svg-box.js"
			],
			[
				"fd-graph",
				"lib/fd-graph.js"
			],
			[
				"draw-u",
				"draw-utils.js"
			],
			[
				"draw-util",
				"draw-utils.js"
			],
			[
				"test-nano",
				"test-nanovg.js"
			],
			[
				"fd-gra",
				"lib/fd-graph.js"
			],
			[
				"graph.js",
				"lib/geom/graph.js"
			],
			[
				"eagle-shell",
				"eagle-shell.js"
			],
			[
				"node.js",
				"lib/eagle/node.js"
			],
			[
				"eleme",
				"lib/eagle/element.js"
			],
			[
				"quickjs-mysql.c",
				"quickjs/qjs-modules/quickjs-mysql.c"
			],
			[
				"mailcow-db",
				"mailcow-db.js"
			],
			[
				"wscli.js",
				"quickjs/qjs-net/wscli.js"
			],
			[
				"upload.js",
				"upload.js"
			],
			[
				"workertest",
				"workertest.js"
			],
			[
				"promise-wor",
				"promise-worker.js"
			],
			[
				"test-work",
				"test-worker.js"
			],
			[
				"debugger-ser",
				"debugger-server.js"
			],
			[
				"upload.css",
				"static/css/upload.css"
			],
			[
				"upload.html",
				"upload.html"
			],
			[
				"draw-ut",
				"draw-utils.js"
			],
			[
				"test-nan",
				"test-nanovg.js"
			],
			[
				"cv-shell",
				"cv-shell.js"
			],
			[
				"test-open",
				"test-opencv.js"
			],
			[
				"test-vid",
				"test-video.js"
			],
			[
				"test-opencv",
				"test-opencv.js"
			],
			[
				"noise.js",
				"noise.js"
			],
			[
				"noise",
				"noise.html"
			],
			[
				"dire",
				"directory.html"
			],
			[
				"upload",
				"upload.html"
			],
			[
				"map.ht",
				"map.html"
			],
			[
				"landing",
				"landing.html"
			],
			[
				"fire",
				"fire.html"
			],
			[
				"filelist",
				"filelist.html"
			],
			[
				"coil",
				"coil.html"
			],
			[
				"util.js",
				"quickjs/qjs-modules/lib/util.js"
			],
			[
				"inde",
				"index.html"
			],
			[
				"404.ht",
				"404.html"
			],
			[
				"lscac",
				"lib/lscache.js"
			],
			[
				"style.css",
				"style.css"
			],
			[
				"direcot",
				"directory.html"
			],
			[
				"rpc.js",
				"quickjs/qjs-net/js/rpc.js"
			],
			[
				"direc",
				"directory.html"
			],
			[
				"smd.js",
				"lib/eagle/components/smd.js"
			],
			[
				"smd.jy",
				"quickjs/qjs-modules/3rdparty/denodrivers-postgres/docs/.nojekyll"
			],
			[
				"via.js",
				"lib/eagle/components/via.js"
			],
			[
				"hole.js",
				"lib/eagle/components/hole.js"
			],
			[
				"eagle2sv",
				"eagle2svg.js"
			],
			[
				"svgRe",
				"lib/eagle/svgRenderer.js"
			],
			[
				"boardre",
				"lib/eagle/boardRenderer.js"
			],
			[
				"polygon",
				"lib/eagle/components/polygon.js"
			],
			[
				"polygon.js",
				"lib/geom/polygon.js"
			],
			[
				"symbol",
				"lib/eagle/components/symbol.js"
			],
			[
				"wire.js",
				"lib/eagle/components/wire.js"
			],
			[
				"components/sym",
				"lib/eagle/components/symbol.js"
			],
			[
				"eagle/ele",
				"lib/eagle/element.js"
			],
			[
				"github-user",
				"github-userscript.js"
			],
			[
				"line.js",
				"lib/geom/line.js"
			],
			[
				"rect.",
				"lib/geom/rect.js"
			],
			[
				"repl.js",
				"quickjs/qjs-modules/lib/repl.js"
			],
			[
				"minnet-clie",
				"quickjs/qjs-net/src/minnet-client.c"
			],
			[
				"callbaCK.C",
				"quickjs/qjs-net/lib/callback.c"
			],
			[
				"internal",
				"quickjs/qjs-modules/quickjs-internal.h"
			],
			[
				"utils.c",
				"quickjs/qjs-modules/src/utils.c"
			],
			[
				"qjsm.c",
				"quickjs/qjs-modules/src/qjsm.c"
			],
			[
				"eagle2",
				"eagle2gerber.js"
			],
			[
				"pcb-con",
				"pcb-conversion.js"
			],
			[
				"test_free",
				"qjs-opencv/tests/test_freetype.js"
			],
			[
				"param.js",
				"param.js"
			],
			[
				"make",
				"make-bitmap.js"
			],
			[
				"test_png",
				"qjs-opencv/tests/test_png.js"
			],
			[
				"stream/utils",
				"lib/stream/utils.js"
			],
			[
				"svg-cr",
				"svg-crop-pad.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 330.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
