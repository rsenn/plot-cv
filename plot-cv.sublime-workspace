{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"CURL_LIB",
				"CURL_LIBRARY_DEBUG"
			],
			[
				"Circ",
				"CircuitJS"
			],
			[
				"dep",
				"dependency"
			],
			[
				"opt",
				"optimization"
			],
			[
				"OPENCV_LIB",
				"OPENCV_LIBRARIES"
			],
			[
				"getOwn",
				"getOwnPropertyNames(...)"
			],
			[
				"relat",
				"relativeTo"
			],
			[
				"max",
				"maxLineGap"
			],
			[
				"Pm_Op",
				"Pm_OpenInput"
			],
			[
				"Pm_Get",
				"Pm_GetDeviceInfo"
			],
			[
				"getOwnProp",
				"getOwnPropertyDescriptors(...)"
			],
			[
				"getMem",
				"getMemberEntries"
			],
			[
				"break",
				"breakLength"
			],
			[
				"from",
				"fromCodePoint(...)"
			],
			[
				"Res",
				"ResizeHandler"
			],
			[
				"COLOR",
				"COLOR_BGR2Lab"
			],
			[
				"JS_SetP",
				"JS_SetPropertyFunctionList"
			],
			[
				"inspe",
				"inspectOptions"
			],
			[
				"Sin",
				"SingleLineComment"
			],
			[
				"use",
				"useAsyncIterator_1"
			],
			[
				"high",
				"highlight"
			],
			[
				"hig",
				"highlight"
			],
			[
				"useDe",
				"useDebouncedCallback"
			],
			[
				"preac",
				"preactComponent"
			],
			[
				"modul",
				"module_loader_func"
			],
			[
				"mod",
				"module_loader_func"
			],
			[
				"jsm_mo",
				"jsm_module_record"
			],
			[
				"jsm_mod",
				"jsm_module_record"
			],
			[
				"jsm_com",
				"jsm_compiled_modules"
			],
			[
				"QUICKJS_IN",
				"QUICKJS_INCLUDE_DIR"
			],
			[
				"QUICKJS_SOU",
				"QUICKJS_SOURCES_ROOT"
			],
			[
				"Po",
				"PortableFileSystem"
			],
			[
				"JS_EVAL",
				"JS_EVAL_TYPE_MODULE"
			],
			[
				"CPACK",
				"CPACK_PACKAGE_VERSION_MAJOR"
			],
			[
				"CPACK_PACK",
				"CPACK_PACKAGE_VERSION"
			],
			[
				"align_",
				"align_value_attr"
			],
			[
				"histo",
				"historySearch"
			],
			[
				"mouse",
				"mousetrackingDisable"
			],
			[
				"library",
				"libraryNames"
			],
			[
				"setMax",
				"setMaxListeners"
			],
			[
				"cons",
				"constructor"
			],
			[
				"Portable",
				"PortableFileSystem"
			],
			[
				"Get",
				"GetRange"
			],
			[
				"Minn",
				"MinnetHttpRequest"
			],
			[
				"Des",
				"DeserializeEntries"
			],
			[
				"define",
				"defineProperties(...)"
			],
			[
				"Deseria",
				"DeserializeEntries"
			],
			[
				"De",
				"DeserializeEntries"
			],
			[
				"Eve",
				"EventEmitter"
			],
			[
				"PATH_",
				"PATH_FNM_NOMATCH"
			],
			[
				"PATH_FNM_NO",
				"PATH_FNM_NOESCAPE"
			],
			[
				"asyn",
				"asyncIterator"
			],
			[
				"RPC",
				"RPCClientConnection"
			],
			[
				"Const",
				"Constants"
			],
			[
				"Impo",
				"ImportSpecifier"
			],
			[
				"Export",
				"ExportNamedDeclaration"
			],
			[
				"Imm",
				"ImmutableTranslation"
			],
			[
				"elem",
				"elementTransform"
			],
			[
				"minn",
				"minnet_ws_class_id"
			],
			[
				"JS_Get",
				"JS_GetOpaque"
			],
			[
				"getOw",
				"getOwnPropertySymbols(...)"
			],
			[
				"Minnet",
				"MinnetWebsocket"
			],
			[
				"Message",
				"MessageTransceiver"
			],
			[
				"corr",
				"CorrelateSchematicAndBoard"
			],
			[
				"Sys",
				"SyscallError"
			],
			[
				"getProp",
				"getPropertyDescriptors"
			],
			[
				"getO",
				"getOwnPropertyDescriptors(...)"
			],
			[
				"get",
				"getOwnPropertyDescriptors(...)"
			],
			[
				"toArra",
				"toArrayBuffer"
			],
			[
				"codePo",
				"codePointAt"
			],
			[
				"print",
				"print_status"
			],
			[
				"tty",
				"ttySetRaw"
			],
			[
				"variable",
				"variablesReference"
			],
			[
				"variables",
				"variablesReference"
			],
			[
				"JSIn",
				"JSInputArray"
			],
			[
				"keypoin",
				"keypoint_proto"
			],
			[
				"lws_call",
				"lws_callback_http_dummy"
			],
			[
				"utf",
				"utf8_first_code_mask"
			],
			[
				"length",
				"history_length"
			],
			[
				"Array",
				"ArrayBufferToString"
			],
			[
				"JSMo",
				"JSModuleLoaderFunc"
			],
			[
				"JS",
				"JSVideoWriterData"
			],
			[
				"D",
				"DebuggerProtocol"
			],
			[
				"Debu",
				"DebuggerProtocol"
			],
			[
				"descripto",
				"descriptor_channels"
			],
			[
				"descript",
				"descriptorExtractor"
			],
			[
				"pattern",
				"patternScale"
			],
			[
				"n",
				"nOctaves"
			],
			[
				"nO",
				"nOctaves"
			],
			[
				"quali",
				"quality_level"
			],
			[
				"JS_P",
				"JS_PROP_ENUMERABLE"
			],
			[
				"Feat",
				"Feature2D"
			],
			[
				"PROP_DESCRIPTOR_",
				"PROP_DESCRIPTOR_TYPE"
			],
			[
				"js_feat",
				"js_feature2d_data"
			],
			[
				"js_key",
				"js_keypoint_export"
			],
			[
				"x",
				"xfeatures2d"
			],
			[
				"JSInput",
				"JSInputOutputArray"
			],
			[
				"JS_NewArray",
				"JS_NewArrayBufferCopy"
			],
			[
				"Rota",
				"RotatedRect"
			],
			[
				"js_rotated",
				"js_rotated_rect_new"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"getOwnP",
				"getOwnPropertyNames"
			],
			[
				"PROP_Y",
				"PROP_YINTERCEPT"
			],
			[
				"PROP_X",
				"PROP_XINTERCEPT"
			],
			[
				"RE",
				"RETURN_PATH"
			],
			[
				"insp",
				"inspectSymbol"
			],
			[
				"contour",
				"contour_proto"
			],
			[
				"dst",
				"dst_pts"
			],
			[
				"CXX_",
				"CXX_STANDARD_VALUE"
			],
			[
				"process",
				"processor_or_index"
			],
			[
				"proces",
				"processor_or_index"
			],
			[
				"w",
				"width"
			],
			[
				"FUNC_TO",
				"FUNC_TOARRAY"
			],
			[
				"JSInpu",
				"JSInputOutputArray"
			],
			[
				"JS_Throw",
				"JS_ThrowInternalError"
			],
			[
				"typed",
				"typedarray_ctor"
			],
			[
				"JS_GetP",
				"JS_GetPropertyStr"
			],
			[
				"depe",
				"dependent_scope_decl_ref_expr"
			],
			[
				"com",
				"compound_stmt"
			],
			[
				"CXXConstruc",
				"CXXConstructorDecl"
			],
			[
				"refere",
				"referencedDecl"
			],
			[
				"Acc",
				"AccessSpecDecl"
			],
			[
				"value",
				"valueCategory"
			],
			[
				"ini",
				"initializers"
			],
			[
				"res",
				"RestElement"
			],
			[
				"arg",
				"argc"
			],
			[
				"instru",
				"instrument"
			],
			[
				"defaul",
				"defaultExport"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "  main(...args)\n  () =>\n  value =>\n  toNumber(n)\n  load(filename, project = globalThis.project)\n  newProject(filename)\n  sch: () =>\n  brd: () =>\n  quit(arg)\n  module =>\n  .exit = () =>\n  .debug = (...args) =>\n  .show = value =>\n() =>\n(item, i, a) =>\n  entry =>\n  entry =>\n  findLastIndex(predicate)\n  rotateRight(n)\n  rotateLeft(n)\n  at(index)\n  get head()\n  get tail()\nTerminate(exitCode)\n  xml(strings, expressions)\n  e =>\n  importModule(moduleName, ...args)\n  module =>\n  e =>\nUpdateMeasures(board)\n  lines =>\n  e =>\n  line =>\nAlignItem(item)\n  tr =>\nAlignAll(doc = globalThis.document)\n  fixValue(element)\n  fixValues(doc)\n  coordMap(doc)\n  p =>\n  t =>\nGetPolygons(d = doc)\n  e =>\nFindPolygons()\n  doc =>\n  e =>\nRemovePolygons(p = polygons)\n([doc, list]) =>\nGetNames(doc, pred)\n  pred = e =>\n  sheet =>\n  e =>\n  e =>\n  e =>\n([v, p]) =>\n([v, p]) =>\n() =>\n  doc =>\n  sheet =>\nGetByName(doc, name)\nCorrelateSchematicAndBoard(schematic, board)\n  d =>\n  n =>\n  name =>\n  doc =>\nGetSheets(doc_or_proj)\nSaveLibraries()\n([n, e]) =>\n(acc, [n, e]) =>\n  e =>\n  e =>\n(a, b) =>\n  id =>\n  id =>\n([n, e]) =>\n  name =>\n(acc, [n, e]) =>\n  testEagle(filename)\n([name, e]) =>\n  e =>\n([name, i]) =>\n  p =>\n(child, i, a) =>\n(child2, i2) =>\n([index, equal]) =>\n([index]) =>\n  i =>\n  i =>\n  doc =>\n([file, e]) =>\n([file, xpath]) =>\n  ([k, v]) =>\nEagle2CircuitJS(doc = project.schematic, scale = 50, sheet = 0)\n  n =>\n  e =>",
			"settings":
			{
				"buffer_size": 1404,
				"line_ending": "Unix",
				"name": "ùåÜ Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					19,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABVCAAAICBhZGQgPSAoYXJyLCAuLi5pdGVtcykgPT4KVExpc3QgPSAoY2hpbGQsIGVsZW0pID0+CiAgcm91bmQgPSBuID0+CiAgZ2V0KHRhcmdldCwgcHJvcCkKRWFnbGVFbGVtZW50CiAgc3RhdGljIGdldChvd25lciwgcmVmLCByYXcpCiAgc3RhdGljIGNyZWF0ZSh0YWdOYW1lLCBhdHRyaWJ1dGVzID0ge30sIGNoaWxkcmVuID0gW10pCiAgY29uc3RydWN0b3Iob3duZXIsIHJlZiwgcmF3KQpFYWdsZU5vZGUKICBnZXQoKQogICgpID0+CiAgKCkgPT4KICB2ID0+CiAgdiA9PgogICgpID0+CiAgdiA9PgogICgpID0+CiAgdiA9PgogIHYgPT4KICB2ID0+CiAgKCkgPT4KICB2ID0+CiAgdiA9PgogICgpID0+CiAgdmFsdWUgPT4KICB2YWx1ZSA9PgogIHYgPT4KICBuYW1lID0+CiAgZm4gPSB2ID0+CiAgKCkgPT4KICBmbiA9IHZhbHVlID0+CiAgZSA9PgogIGZuID0gKCkgPT4KICBmbiA9ICgpID0+CiAgZm4gPSAoKSA9PgogIGZuID0gKCkgPT4KICBmbiA9ICgpID0+CiAgZm4gPSAoKSA9PgogIGZuID0gKCkgPT4KICBmbiA9ICgpID0+CiAgZm4gPSAoKSA9PgogIGZuID0gKCkgPT4KICBmbiA9ICgpID0+CiAgKCkgPT4KICAoKSA9PgogICgpID0+CiAgKCkgPT4KICAoKSA9PgogICgpID0+CiAgKCkgPT4KICAoKSA9PgogICgpID0+CiAgKCkgPT4KICAoKSA9PgogICgpID0+CiAgKCkgPT4KICBlID0+CiAgKCkgPT4KICBlID0+CiAgKG8sIHAsIHIpID0+CiAgKCkgPT4KICBjcmVmID0+CiAgKCkgPT4KICBjcmVmID0+CiAgKCkgPT4KICBlID0+CiAgKCkgPT4KICBlID0+CiAgKCkgPT4KICBlID0+CiAgKCkgPT4KICBlID0+CiAgLmdldENvbG9yID0gZnVuY3Rpb24oZWxlbWVudCkKICAuaXNWaXNpYmxlID0gZWxlbWVudCA9PgogIC5zZXRWaXNpYmxlID0gdmFsdWUgPT4KICAuc3Vic2NyaWJlID0gZm4gPT4KICB2YWx1ZSA9PgogIC5zdWJzY3JpYmUgPSBmbiA9PgogIHZhbHVlID0+CiAgLmdldENvbG9yID0gZnVuY3Rpb24oKQogIHZhbHVlID0+CiAgbiA9PgogIGdldCByZXBlYXRlcigpCihwdXNoLCBzdG9wKSA9PgooeyB2YWx1ZSwgZG9uZSB9KSA9PgogIC5wdXNoRXZlbnQgPSBmdW5jdGlvbiguLi5hcmdzKQooZWxlbSkgPT4KICBldmVudChuYW1lKQogIHN1YnNjcmliZShoYW5kbGVyKQogIHVuc3Vic2NyaWJlKGhhbmRsZXIpCiAgaCA9PgogIGdldCB0ZXh0KCkKICBnZXQgYXR0cmlidXRlcygpCiAgZ2V0TGF5ZXIoKQogIGxvb2t1cCh4cGF0aCwgY3JlYXRlKQogIChvLCBwLCB2KSA9PgogIGdldEJvdW5kcyhwcmVkLCBvcHRzID0ge30pCiAgcHJlZCA9IGUgPT4KICBlID0+CiAgZSA9PgogIGUgPT4KICBlID0+CiAgYiA9PgogIHIgPT4KICBlID0+CiAgbiA9PgogIGdldCBib3VuZHMoKQogIHRyYW5zZm9ybWF0aW9uKCkKICBnZXQgZ2VvbWV0cnkoKQogIG1ha2VHZXR0ZXJTZXR0ZXIgPSAoaykgPT4gKHYpID0+CihwKSA9PgoocHJvcCkgPT4KICAoaykgPT4gKHYpID0+Cihwcm9wKSA9PgoocHJvcCkgPT4KKHByb3ApID0+CiAgKCkgPT4KKGcpID0+CiAgcG9zaXRpb24ob2Zmc2V0ID0gbnVsbCkKICBtYWtlR2V0dGVyU2V0dGVyID0gayA9PiB2ID0+CiAgcHJvcCA9PgogIHN0YXRpYyBpc1JlbGF0aW9uKG5hbWUpCiAgdCA9IChvLCBwLCB2KSA9PgogIHIgPSBlID0+CiAgZ2V0IGNoYWluKCkKICBnZXRQYXJlbnQodGFnTmFtZSkKICBnZXQgc2hlZXQoKQogIGdldCBzaGVldE51bWJlcigpCiAgbmFtZXMoKQooYWNjLCBlbnRyeSkgPT4KICBzdGF0aWMga2V5cyhlbnRpdHkpCiAgc3RhdGljIHZhbHVlcyhlbnRpdHkpCiAgc3RhdGljIGVudHJpZXMoZW50aXR5KQogIHN0YXRpYyB0b09iamVjdChlKQogIGNoaWxkID0+CiAgY2hpbGQgPT4KICBzdGF0aWMgdG9BcnJheShlKQogIHRvU3RyaW5nKCkKKmdldEFsbChwcmVkLCB0cmFuc2Zvcm0gPSBhID0+IGEpCiAgKHYsIHAsIG8pID0+CiAgKHIsIHYsIHAsIG8pID0+CiAgKCkgPT4KKHYsIHAsIG8pID0+CiAgZmluZChwcmVkLCB0cmFuc2Zvcm0gPSBhID0+IGEpCiAgKHYsIHAsIG8pID0+CiAgKHIsIHYsIHAsIG8pID0+CiAgKCkgPT4KICBzZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpCiAgcmVtb3ZlQXR0cmlidXRlKG5hbWUpCiAgZ2V0IHBvcygpCiAgbWFrZUVhZ2xlRWxlbWVudCA9IChvd25lciwgcmVmLCByYXcpID0+AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					20,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/element.js",
						"symkeys":
						[
							[
								711,
								735
							],
							[
								771,
								795
							],
							[
								884,
								896
							],
							[
								966,
								983
							],
							[
								1458,
								1470
							],
							[
								1646,
								1673
							],
							[
								2651,
								2705
							],
							[
								2911,
								2939
							],
							[
								3565,
								3574
							],
							[
								3779,
								3784
							],
							[
								4057,
								4063
							],
							[
								4190,
								4196
							],
							[
								4551,
								4567
							],
							[
								4585,
								4601
							],
							[
								4653,
								4670
							],
							[
								4921,
								4937
							],
							[
								4949,
								4966
							],
							[
								4975,
								4991
							],
							[
								5045,
								5061
							],
							[
								5079,
								5095
							],
							[
								5122,
								5139
							],
							[
								5225,
								5241
							],
							[
								5259,
								5275
							],
							[
								5290,
								5307
							],
							[
								5518,
								5526
							],
							[
								5640,
								5648
							],
							[
								5962,
								5967
							],
							[
								5989,
								5996
							],
							[
								6134,
								6143
							],
							[
								6840,
								6846
							],
							[
								7272,
								7285
							],
							[
								7444,
								7448
							],
							[
								7801,
								7811
							],
							[
								7898,
								7908
							],
							[
								8015,
								8025
							],
							[
								8140,
								8150
							],
							[
								8261,
								8271
							],
							[
								8988,
								8998
							],
							[
								9096,
								9106
							],
							[
								9219,
								9229
							],
							[
								9313,
								9323
							],
							[
								9452,
								9462
							],
							[
								9591,
								9601
							],
							[
								10410,
								10416
							],
							[
								10557,
								10563
							],
							[
								10685,
								10691
							],
							[
								10803,
								10809
							],
							[
								10922,
								10928
							],
							[
								11038,
								11044
							],
							[
								11127,
								11133
							],
							[
								11221,
								11227
							],
							[
								11448,
								11454
							],
							[
								11542,
								11548
							],
							[
								11600,
								11606
							],
							[
								11698,
								11704
							],
							[
								12186,
								12192
							],
							[
								12268,
								12273
							],
							[
								12498,
								12504
							],
							[
								12616,
								12632
							],
							[
								12651,
								12675
							],
							[
								12867,
								12873
							],
							[
								13063,
								13070
							],
							[
								13160,
								13166
							],
							[
								13356,
								13363
							],
							[
								13525,
								13531
							],
							[
								13586,
								13591
							],
							[
								13682,
								13688
							],
							[
								13743,
								13748
							],
							[
								13803,
								13809
							],
							[
								13885,
								13890
							],
							[
								14005,
								14011
							],
							[
								14066,
								14071
							],
							[
								14141,
								14170
							],
							[
								14267,
								14290
							],
							[
								14389,
								14411
							],
							[
								14537,
								14555
							],
							[
								14588,
								14596
							],
							[
								14639,
								14657
							],
							[
								14690,
								14698
							],
							[
								14898,
								14920
							],
							[
								15332,
								15341
							],
							[
								15390,
								15394
							],
							[
								15829,
								15843
							],
							[
								15908,
								15929
							],
							[
								16050,
								16070
							],
							[
								16115,
								16145
							],
							[
								16362,
								16371
							],
							[
								16476,
								16487
							],
							[
								16681,
								16699
							],
							[
								16784,
								16804
							],
							[
								16854,
								16858
							],
							[
								16923,
								16933
							],
							[
								17151,
								17167
							],
							[
								17202,
								17212
							],
							[
								17451,
								17472
							],
							[
								17661,
								17674
							],
							[
								17974,
								18000
							],
							[
								18096,
								18107
							],
							[
								18704,
								18708
							],
							[
								20206,
								20210
							],
							[
								20647,
								20651
							],
							[
								20886,
								20890
							],
							[
								20921,
								20925
							],
							[
								20954,
								20958
							],
							[
								21255,
								21259
							],
							[
								22724,
								22728
							],
							[
								22865,
								22877
							],
							[
								22916,
								22932
							],
							[
								23317,
								23331
							],
							[
								23416,
								23448
							],
							[
								23677,
								23683
							],
							[
								23774,
								23783
							],
							[
								23851,
								23865
							],
							[
								24096,
								24105
							],
							[
								24350,
								24359
							],
							[
								24539,
								24548
							],
							[
								24937,
								24943
							],
							[
								25204,
								25210
							],
							[
								25315,
								25338
							],
							[
								25398,
								25426
							],
							[
								25514,
								25521
							],
							[
								25684,
								25707
							],
							[
								25909,
								25925
							],
							[
								25966,
								25974
							],
							[
								26059,
								26070
							],
							[
								26181,
								26199
							],
							[
								26332,
								26343
							],
							[
								26410,
								26427
							],
							[
								26536,
								26543
							],
							[
								26593,
								26608
							],
							[
								26673,
								26692
							],
							[
								26756,
								26777
							],
							[
								26843,
								26865
							],
							[
								26933,
								26951
							],
							[
								27316,
								27324
							],
							[
								27385,
								27393
							],
							[
								27664,
								27681
							],
							[
								27784,
								27794
							],
							[
								27904,
								27937
							],
							[
								27973,
								27991
							],
							[
								28071,
								28092
							],
							[
								28118,
								28129
							],
							[
								28244,
								28256
							],
							[
								28340,
								28370
							],
							[
								28406,
								28424
							],
							[
								28463,
								28484
							],
							[
								28505,
								28516
							],
							[
								28574,
								28599
							],
							[
								28729,
								28750
							],
							[
								28820,
								28829
							],
							[
								31847,
								31886
							]
						],
						"symlist":
						[
							"add = (arr, ...items) =>",
							"TList = (child, elem) =>",
							"round = n =>",
							"get(target, prop)",
							"EagleElement",
							"static get(owner, ref, raw)",
							"static create(tagName, attributes = {}, children = [])",
							"constructor(owner, ref, raw)",
							"EagleNode",
							"get()",
							" () =>",
							" () =>",
							" v =>",
							" v =>",
							" () =>",
							" v =>",
							" () =>",
							" v =>",
							" v =>",
							" v =>",
							" () =>",
							" v =>",
							" v =>",
							" () =>",
							"value =>",
							"value =>",
							" v =>",
							"name =>",
							"fn = v =>",
							" () =>",
							"fn = value =>",
							"e =>",
							"fn = () =>",
							"fn = () =>",
							"fn = () =>",
							"fn = () =>",
							"fn = () =>",
							"fn = () =>",
							"fn = () =>",
							"fn = () =>",
							"fn = () =>",
							"fn = () =>",
							"fn = () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" e =>",
							" () =>",
							" e =>",
							" (o, p, r) =>",
							" () =>",
							"cref =>",
							" () =>",
							"cref =>",
							" () =>",
							" e =>",
							" () =>",
							" e =>",
							" () =>",
							" e =>",
							" () =>",
							" e =>",
							".getColor = function(element)",
							".isVisible = element =>",
							".setVisible = value =>",
							".subscribe = fn =>",
							"value =>",
							".subscribe = fn =>",
							"value =>",
							".getColor = function()",
							" value =>",
							"n =>",
							"get repeater()",
							"async (push, stop) =>",
							"({ value, done }) =>",
							".pushEvent = function(...args)",
							"(elem) =>",
							"event(name)",
							"subscribe(handler)",
							"unsubscribe(handler)",
							"h =>",
							"get text()",
							"get attributes()",
							"getLayer()",
							"lookup(xpath, create)",
							" (o, p, v) =>",
							"getBounds(pred, opts = {})",
							"pred = e =>",
							"e =>",
							"e =>",
							"e =>",
							"e =>",
							"b =>",
							"r =>",
							"e =>",
							"n =>",
							"get bounds()",
							"transformation()",
							"get geometry()",
							"makeGetterSetter = (k) => (v) =>",
							"(p) =>",
							"(prop) =>",
							" (k) => (v) =>",
							"(prop) =>",
							"(prop) =>",
							"(prop) =>",
							" () =>",
							"(g) =>",
							"position(offset = null)",
							"makeGetterSetter = k => v =>",
							"prop =>",
							"static isRelation(name)",
							"t = (o, p, v) =>",
							"r = e =>",
							"get chain()",
							"getParent(tagName)",
							"get sheet()",
							"get sheetNumber()",
							"names()",
							"(acc, entry) =>",
							"static keys(entity)",
							"static values(entity)",
							"static entries(entity)",
							"static toObject(e)",
							"child =>",
							"child =>",
							"static toArray(e)",
							"toString()",
							"*getAll(pred, transform = a => a)",
							" (v, p, o) =>",
							" (r, v, p, o) =>",
							" () =>",
							"(v, p, o) =>",
							"find(pred, transform = a => a)",
							" (v, p, o) =>",
							" (r, v, p, o) =>",
							" () =>",
							"setAttribute(name, value)",
							"removeAttribute(name)",
							"get pos()",
							"makeEagleElement = (owner, ref, raw) =>"
						]
					},
					"AQAAAAAAAAAAAAAAVQgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					21,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/element.js",
						"symkeys":
						[
							[
								711,
								735
							],
							[
								771,
								795
							],
							[
								884,
								896
							],
							[
								966,
								983
							],
							[
								1458,
								1470
							],
							[
								1646,
								1673
							],
							[
								2653,
								2707
							],
							[
								2913,
								2941
							],
							[
								3567,
								3576
							],
							[
								3781,
								3786
							],
							[
								4059,
								4065
							],
							[
								4192,
								4198
							],
							[
								4553,
								4569
							],
							[
								4587,
								4603
							],
							[
								4655,
								4672
							],
							[
								4923,
								4939
							],
							[
								4951,
								4968
							],
							[
								4977,
								4993
							],
							[
								5047,
								5063
							],
							[
								5081,
								5097
							],
							[
								5124,
								5141
							],
							[
								5227,
								5243
							],
							[
								5261,
								5277
							],
							[
								5292,
								5309
							],
							[
								5520,
								5528
							],
							[
								5642,
								5650
							],
							[
								5964,
								5969
							],
							[
								5991,
								5998
							],
							[
								6136,
								6145
							],
							[
								6842,
								6848
							],
							[
								7274,
								7287
							],
							[
								7446,
								7450
							],
							[
								7803,
								7813
							],
							[
								7900,
								7910
							],
							[
								8017,
								8027
							],
							[
								8142,
								8152
							],
							[
								8263,
								8273
							],
							[
								8990,
								9000
							],
							[
								9098,
								9108
							],
							[
								9221,
								9231
							],
							[
								9315,
								9325
							],
							[
								9454,
								9464
							],
							[
								9593,
								9603
							],
							[
								10412,
								10418
							],
							[
								10559,
								10565
							],
							[
								10687,
								10693
							],
							[
								10805,
								10811
							],
							[
								10924,
								10930
							],
							[
								11040,
								11046
							],
							[
								11129,
								11135
							],
							[
								11223,
								11229
							],
							[
								11450,
								11456
							],
							[
								11544,
								11550
							],
							[
								11602,
								11608
							],
							[
								11700,
								11706
							],
							[
								12188,
								12194
							],
							[
								12270,
								12275
							],
							[
								12500,
								12506
							],
							[
								12618,
								12634
							],
							[
								12653,
								12677
							],
							[
								12869,
								12875
							],
							[
								13065,
								13072
							],
							[
								13162,
								13168
							],
							[
								13358,
								13365
							],
							[
								13527,
								13533
							],
							[
								13588,
								13593
							],
							[
								13684,
								13690
							],
							[
								13745,
								13750
							],
							[
								13805,
								13811
							],
							[
								13887,
								13892
							],
							[
								14007,
								14013
							],
							[
								14068,
								14073
							],
							[
								14143,
								14172
							],
							[
								14269,
								14292
							],
							[
								14391,
								14413
							],
							[
								14539,
								14557
							],
							[
								14590,
								14598
							],
							[
								14641,
								14659
							],
							[
								14692,
								14700
							],
							[
								14900,
								14922
							],
							[
								15334,
								15343
							],
							[
								15392,
								15396
							],
							[
								15831,
								15845
							],
							[
								15910,
								15931
							],
							[
								16052,
								16072
							],
							[
								16117,
								16147
							],
							[
								16364,
								16373
							],
							[
								16478,
								16489
							],
							[
								16683,
								16701
							],
							[
								16786,
								16806
							],
							[
								16856,
								16860
							],
							[
								16925,
								16935
							],
							[
								17153,
								17169
							],
							[
								17204,
								17214
							],
							[
								17453,
								17474
							],
							[
								17663,
								17676
							],
							[
								17976,
								18002
							],
							[
								18098,
								18109
							],
							[
								18706,
								18710
							],
							[
								20208,
								20212
							],
							[
								20649,
								20653
							],
							[
								20888,
								20892
							],
							[
								20923,
								20927
							],
							[
								20956,
								20960
							],
							[
								21257,
								21261
							],
							[
								22726,
								22730
							],
							[
								22867,
								22879
							],
							[
								22918,
								22934
							],
							[
								23319,
								23333
							],
							[
								23418,
								23450
							],
							[
								23679,
								23685
							],
							[
								23776,
								23785
							],
							[
								23853,
								23867
							],
							[
								24098,
								24107
							],
							[
								24352,
								24361
							],
							[
								24541,
								24550
							],
							[
								24939,
								24945
							],
							[
								25206,
								25212
							],
							[
								25317,
								25340
							],
							[
								25400,
								25428
							],
							[
								25516,
								25523
							],
							[
								25686,
								25709
							],
							[
								25911,
								25927
							],
							[
								25968,
								25976
							],
							[
								26061,
								26072
							],
							[
								26183,
								26201
							],
							[
								26334,
								26345
							],
							[
								26412,
								26429
							],
							[
								26538,
								26545
							],
							[
								26595,
								26610
							],
							[
								26675,
								26694
							],
							[
								26758,
								26779
							],
							[
								26845,
								26867
							],
							[
								26935,
								26953
							],
							[
								27318,
								27326
							],
							[
								27387,
								27395
							],
							[
								27666,
								27683
							],
							[
								27786,
								27796
							],
							[
								27906,
								27939
							],
							[
								27975,
								27993
							],
							[
								28073,
								28094
							],
							[
								28120,
								28131
							],
							[
								28246,
								28258
							],
							[
								28342,
								28372
							],
							[
								28408,
								28426
							],
							[
								28465,
								28486
							],
							[
								28507,
								28518
							],
							[
								28576,
								28601
							],
							[
								28731,
								28752
							],
							[
								28822,
								28831
							],
							[
								31849,
								31888
							]
						],
						"symlist":
						[
							"add = (arr, ...items) =>",
							"TList = (child, elem) =>",
							"round = n =>",
							"get(target, prop)",
							"EagleElement",
							"static get(owner, ref, raw)",
							"static create(tagName, attributes = {}, children = [])",
							"constructor(owner, ref, raw)",
							"EagleNode",
							"get()",
							" () =>",
							" () =>",
							" v =>",
							" v =>",
							" () =>",
							" v =>",
							" () =>",
							" v =>",
							" v =>",
							" v =>",
							" () =>",
							" v =>",
							" v =>",
							" () =>",
							"value =>",
							"value =>",
							" v =>",
							"name =>",
							"fn = v =>",
							" () =>",
							"fn = value =>",
							"e =>",
							"fn = () =>",
							"fn = () =>",
							"fn = () =>",
							"fn = () =>",
							"fn = () =>",
							"fn = () =>",
							"fn = () =>",
							"fn = () =>",
							"fn = () =>",
							"fn = () =>",
							"fn = () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" e =>",
							" () =>",
							" e =>",
							" (o, p, r) =>",
							" () =>",
							"cref =>",
							" () =>",
							"cref =>",
							" () =>",
							" e =>",
							" () =>",
							" e =>",
							" () =>",
							" e =>",
							" () =>",
							" e =>",
							".getColor = function(element)",
							".isVisible = element =>",
							".setVisible = value =>",
							".subscribe = fn =>",
							"value =>",
							".subscribe = fn =>",
							"value =>",
							".getColor = function()",
							" value =>",
							"n =>",
							"get repeater()",
							"async (push, stop) =>",
							"({ value, done }) =>",
							".pushEvent = function(...args)",
							"(elem) =>",
							"event(name)",
							"subscribe(handler)",
							"unsubscribe(handler)",
							"h =>",
							"get text()",
							"get attributes()",
							"getLayer()",
							"lookup(xpath, create)",
							" (o, p, v) =>",
							"getBounds(pred, opts = {})",
							"pred = e =>",
							"e =>",
							"e =>",
							"e =>",
							"e =>",
							"b =>",
							"r =>",
							"e =>",
							"n =>",
							"get bounds()",
							"transformation()",
							"get geometry()",
							"makeGetterSetter = (k) => (v) =>",
							"(p) =>",
							"(prop) =>",
							" (k) => (v) =>",
							"(prop) =>",
							"(prop) =>",
							"(prop) =>",
							" () =>",
							"(g) =>",
							"position(offset = null)",
							"makeGetterSetter = k => v =>",
							"prop =>",
							"static isRelation(name)",
							"t = (o, p, v) =>",
							"r = e =>",
							"get chain()",
							"getParent(tagName)",
							"get sheet()",
							"get sheetNumber()",
							"names()",
							"(acc, entry) =>",
							"static keys(entity)",
							"static values(entity)",
							"static entries(entity)",
							"static toObject(e)",
							"child =>",
							"child =>",
							"static toArray(e)",
							"toString()",
							"*getAll(pred, transform = a => a)",
							" (v, p, o) =>",
							" (r, v, p, o) =>",
							" () =>",
							"(v, p, o) =>",
							"find(pred, transform = a => a)",
							" (v, p, o) =>",
							" (r, v, p, o) =>",
							" () =>",
							"setAttribute(name, value)",
							"removeAttribute(name)",
							"get pos()",
							"makeEagleElement = (owner, ref, raw) =>"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAABVCAAAICBhZGQgPSAoYXJyLCAuLi5pdGVtcykgPT4KVExpc3QgPSAoY2hpbGQsIGVsZW0pID0+CiAgcm91bmQgPSBuID0+CiAgZ2V0KHRhcmdldCwgcHJvcCkKRWFnbGVFbGVtZW50CiAgc3RhdGljIGdldChvd25lciwgcmVmLCByYXcpCiAgc3RhdGljIGNyZWF0ZSh0YWdOYW1lLCBhdHRyaWJ1dGVzID0ge30sIGNoaWxkcmVuID0gW10pCiAgY29uc3RydWN0b3Iob3duZXIsIHJlZiwgcmF3KQpFYWdsZU5vZGUKICBnZXQoKQogICgpID0+CiAgKCkgPT4KICB2ID0+CiAgdiA9PgogICgpID0+CiAgdiA9PgogICgpID0+CiAgdiA9PgogIHYgPT4KICB2ID0+CiAgKCkgPT4KICB2ID0+CiAgdiA9PgogICgpID0+CiAgdmFsdWUgPT4KICB2YWx1ZSA9PgogIHYgPT4KICBuYW1lID0+CiAgZm4gPSB2ID0+CiAgKCkgPT4KICBmbiA9IHZhbHVlID0+CiAgZSA9PgogIGZuID0gKCkgPT4KICBmbiA9ICgpID0+CiAgZm4gPSAoKSA9PgogIGZuID0gKCkgPT4KICBmbiA9ICgpID0+CiAgZm4gPSAoKSA9PgogIGZuID0gKCkgPT4KICBmbiA9ICgpID0+CiAgZm4gPSAoKSA9PgogIGZuID0gKCkgPT4KICBmbiA9ICgpID0+CiAgKCkgPT4KICAoKSA9PgogICgpID0+CiAgKCkgPT4KICAoKSA9PgogICgpID0+CiAgKCkgPT4KICAoKSA9PgogICgpID0+CiAgKCkgPT4KICAoKSA9PgogICgpID0+CiAgKCkgPT4KICBlID0+CiAgKCkgPT4KICBlID0+CiAgKG8sIHAsIHIpID0+CiAgKCkgPT4KICBjcmVmID0+CiAgKCkgPT4KICBjcmVmID0+CiAgKCkgPT4KICBlID0+CiAgKCkgPT4KICBlID0+CiAgKCkgPT4KICBlID0+CiAgKCkgPT4KICBlID0+CiAgLmdldENvbG9yID0gZnVuY3Rpb24oZWxlbWVudCkKICAuaXNWaXNpYmxlID0gZWxlbWVudCA9PgogIC5zZXRWaXNpYmxlID0gdmFsdWUgPT4KICAuc3Vic2NyaWJlID0gZm4gPT4KICB2YWx1ZSA9PgogIC5zdWJzY3JpYmUgPSBmbiA9PgogIHZhbHVlID0+CiAgLmdldENvbG9yID0gZnVuY3Rpb24oKQogIHZhbHVlID0+CiAgbiA9PgogIGdldCByZXBlYXRlcigpCihwdXNoLCBzdG9wKSA9PgooeyB2YWx1ZSwgZG9uZSB9KSA9PgogIC5wdXNoRXZlbnQgPSBmdW5jdGlvbiguLi5hcmdzKQooZWxlbSkgPT4KICBldmVudChuYW1lKQogIHN1YnNjcmliZShoYW5kbGVyKQogIHVuc3Vic2NyaWJlKGhhbmRsZXIpCiAgaCA9PgogIGdldCB0ZXh0KCkKICBnZXQgYXR0cmlidXRlcygpCiAgZ2V0TGF5ZXIoKQogIGxvb2t1cCh4cGF0aCwgY3JlYXRlKQogIChvLCBwLCB2KSA9PgogIGdldEJvdW5kcyhwcmVkLCBvcHRzID0ge30pCiAgcHJlZCA9IGUgPT4KICBlID0+CiAgZSA9PgogIGUgPT4KICBlID0+CiAgYiA9PgogIHIgPT4KICBlID0+CiAgbiA9PgogIGdldCBib3VuZHMoKQogIHRyYW5zZm9ybWF0aW9uKCkKICBnZXQgZ2VvbWV0cnkoKQogIG1ha2VHZXR0ZXJTZXR0ZXIgPSAoaykgPT4gKHYpID0+CihwKSA9PgoocHJvcCkgPT4KICAoaykgPT4gKHYpID0+Cihwcm9wKSA9PgoocHJvcCkgPT4KKHByb3ApID0+CiAgKCkgPT4KKGcpID0+CiAgcG9zaXRpb24ob2Zmc2V0ID0gbnVsbCkKICBtYWtlR2V0dGVyU2V0dGVyID0gayA9PiB2ID0+CiAgcHJvcCA9PgogIHN0YXRpYyBpc1JlbGF0aW9uKG5hbWUpCiAgdCA9IChvLCBwLCB2KSA9PgogIHIgPSBlID0+CiAgZ2V0IGNoYWluKCkKICBnZXRQYXJlbnQodGFnTmFtZSkKICBnZXQgc2hlZXQoKQogIGdldCBzaGVldE51bWJlcigpCiAgbmFtZXMoKQooYWNjLCBlbnRyeSkgPT4KICBzdGF0aWMga2V5cyhlbnRpdHkpCiAgc3RhdGljIHZhbHVlcyhlbnRpdHkpCiAgc3RhdGljIGVudHJpZXMoZW50aXR5KQogIHN0YXRpYyB0b09iamVjdChlKQogIGNoaWxkID0+CiAgY2hpbGQgPT4KICBzdGF0aWMgdG9BcnJheShlKQogIHRvU3RyaW5nKCkKKmdldEFsbChwcmVkLCB0cmFuc2Zvcm0gPSBhID0+IGEpCiAgKHYsIHAsIG8pID0+CiAgKHIsIHYsIHAsIG8pID0+CiAgKCkgPT4KKHYsIHAsIG8pID0+CiAgZmluZChwcmVkLCB0cmFuc2Zvcm0gPSBhID0+IGEpCiAgKHYsIHAsIG8pID0+CiAgKHIsIHYsIHAsIG8pID0+CiAgKCkgPT4KICBzZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpCiAgcmVtb3ZlQXR0cmlidXRlKG5hbWUpCiAgZ2V0IHBvcygpCiAgbWFrZUVhZ2xlRWxlbWVudCA9IChvd25lciwgcmVmLCByYXcpID0+AAAAAAAAAABVCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVQgAACAgYWRkID0gKGFyciwgLi4uaXRlbXMpID0+ClRMaXN0ID0gKGNoaWxkLCBlbGVtKSA9PgogIHJvdW5kID0gbiA9PgogIGdldCh0YXJnZXQsIHByb3ApCkVhZ2xlRWxlbWVudAogIHN0YXRpYyBnZXQob3duZXIsIHJlZiwgcmF3KQogIHN0YXRpYyBjcmVhdGUodGFnTmFtZSwgYXR0cmlidXRlcyA9IHt9LCBjaGlsZHJlbiA9IFtdKQogIGNvbnN0cnVjdG9yKG93bmVyLCByZWYsIHJhdykKRWFnbGVOb2RlCiAgZ2V0KCkKICAoKSA9PgogICgpID0+CiAgdiA9PgogIHYgPT4KICAoKSA9PgogIHYgPT4KICAoKSA9PgogIHYgPT4KICB2ID0+CiAgdiA9PgogICgpID0+CiAgdiA9PgogIHYgPT4KICAoKSA9PgogIHZhbHVlID0+CiAgdmFsdWUgPT4KICB2ID0+CiAgbmFtZSA9PgogIGZuID0gdiA9PgogICgpID0+CiAgZm4gPSB2YWx1ZSA9PgogIGUgPT4KICBmbiA9ICgpID0+CiAgZm4gPSAoKSA9PgogIGZuID0gKCkgPT4KICBmbiA9ICgpID0+CiAgZm4gPSAoKSA9PgogIGZuID0gKCkgPT4KICBmbiA9ICgpID0+CiAgZm4gPSAoKSA9PgogIGZuID0gKCkgPT4KICBmbiA9ICgpID0+CiAgZm4gPSAoKSA9PgogICgpID0+CiAgKCkgPT4KICAoKSA9PgogICgpID0+CiAgKCkgPT4KICAoKSA9PgogICgpID0+CiAgKCkgPT4KICAoKSA9PgogICgpID0+CiAgKCkgPT4KICAoKSA9PgogICgpID0+CiAgZSA9PgogICgpID0+CiAgZSA9PgogIChvLCBwLCByKSA9PgogICgpID0+CiAgY3JlZiA9PgogICgpID0+CiAgY3JlZiA9PgogICgpID0+CiAgZSA9PgogICgpID0+CiAgZSA9PgogICgpID0+CiAgZSA9PgogICgpID0+CiAgZSA9PgogIC5nZXRDb2xvciA9IGZ1bmN0aW9uKGVsZW1lbnQpCiAgLmlzVmlzaWJsZSA9IGVsZW1lbnQgPT4KICAuc2V0VmlzaWJsZSA9IHZhbHVlID0+CiAgLnN1YnNjcmliZSA9IGZuID0+CiAgdmFsdWUgPT4KICAuc3Vic2NyaWJlID0gZm4gPT4KICB2YWx1ZSA9PgogIC5nZXRDb2xvciA9IGZ1bmN0aW9uKCkKICB2YWx1ZSA9PgogIG4gPT4KICBnZXQgcmVwZWF0ZXIoKQoocHVzaCwgc3RvcCkgPT4KKHsgdmFsdWUsIGRvbmUgfSkgPT4KICAucHVzaEV2ZW50ID0gZnVuY3Rpb24oLi4uYXJncykKKGVsZW0pID0+CiAgZXZlbnQobmFtZSkKICBzdWJzY3JpYmUoaGFuZGxlcikKICB1bnN1YnNjcmliZShoYW5kbGVyKQogIGggPT4KICBnZXQgdGV4dCgpCiAgZ2V0IGF0dHJpYnV0ZXMoKQogIGdldExheWVyKCkKICBsb29rdXAoeHBhdGgsIGNyZWF0ZSkKICAobywgcCwgdikgPT4KICBnZXRCb3VuZHMocHJlZCwgb3B0cyA9IHt9KQogIHByZWQgPSBlID0+CiAgZSA9PgogIGUgPT4KICBlID0+CiAgZSA9PgogIGIgPT4KICByID0+CiAgZSA9PgogIG4gPT4KICBnZXQgYm91bmRzKCkKICB0cmFuc2Zvcm1hdGlvbigpCiAgZ2V0IGdlb21ldHJ5KCkKICBtYWtlR2V0dGVyU2V0dGVyID0gKGspID0+ICh2KSA9PgoocCkgPT4KKHByb3ApID0+CiAgKGspID0+ICh2KSA9PgoocHJvcCkgPT4KKHByb3ApID0+Cihwcm9wKSA9PgogICgpID0+CihnKSA9PgogIHBvc2l0aW9uKG9mZnNldCA9IG51bGwpCiAgbWFrZUdldHRlclNldHRlciA9IGsgPT4gdiA9PgogIHByb3AgPT4KICBzdGF0aWMgaXNSZWxhdGlvbihuYW1lKQogIHQgPSAobywgcCwgdikgPT4KICByID0gZSA9PgogIGdldCBjaGFpbigpCiAgZ2V0UGFyZW50KHRhZ05hbWUpCiAgZ2V0IHNoZWV0KCkKICBnZXQgc2hlZXROdW1iZXIoKQogIG5hbWVzKCkKKGFjYywgZW50cnkpID0+CiAgc3RhdGljIGtleXMoZW50aXR5KQogIHN0YXRpYyB2YWx1ZXMoZW50aXR5KQogIHN0YXRpYyBlbnRyaWVzKGVudGl0eSkKICBzdGF0aWMgdG9PYmplY3QoZSkKICBjaGlsZCA9PgogIGNoaWxkID0+CiAgc3RhdGljIHRvQXJyYXkoZSkKICB0b1N0cmluZygpCipnZXRBbGwocHJlZCwgdHJhbnNmb3JtID0gYSA9PiBhKQogICh2LCBwLCBvKSA9PgogIChyLCB2LCBwLCBvKSA9PgogICgpID0+Cih2LCBwLCBvKSA9PgogIGZpbmQocHJlZCwgdHJhbnNmb3JtID0gYSA9PiBhKQogICh2LCBwLCBvKSA9PgogIChyLCB2LCBwLCBvKSA9PgogICgpID0+CiAgc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKQogIHJlbW92ZUF0dHJpYnV0ZShuYW1lKQogIGdldCBwb3MoKQogIG1ha2VFYWdsZUVsZW1lbnQgPSAob3duZXIsIHJlZiwgcmF3KSA9PgAAAAAAAAAAVQgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					22,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABVCAAAICBhZGQgPSAoYXJyLCAuLi5pdGVtcykgPT4KVExpc3QgPSAoY2hpbGQsIGVsZW0pID0+CiAgcm91bmQgPSBuID0+CiAgZ2V0KHRhcmdldCwgcHJvcCkKRWFnbGVFbGVtZW50CiAgc3RhdGljIGdldChvd25lciwgcmVmLCByYXcpCiAgc3RhdGljIGNyZWF0ZSh0YWdOYW1lLCBhdHRyaWJ1dGVzID0ge30sIGNoaWxkcmVuID0gW10pCiAgY29uc3RydWN0b3Iob3duZXIsIHJlZiwgcmF3KQpFYWdsZU5vZGUKICBnZXQoKQogICgpID0+CiAgKCkgPT4KICB2ID0+CiAgdiA9PgogICgpID0+CiAgdiA9PgogICgpID0+CiAgdiA9PgogIHYgPT4KICB2ID0+CiAgKCkgPT4KICB2ID0+CiAgdiA9PgogICgpID0+CiAgdmFsdWUgPT4KICB2YWx1ZSA9PgogIHYgPT4KICBuYW1lID0+CiAgZm4gPSB2ID0+CiAgKCkgPT4KICBmbiA9IHZhbHVlID0+CiAgZSA9PgogIGZuID0gKCkgPT4KICBmbiA9ICgpID0+CiAgZm4gPSAoKSA9PgogIGZuID0gKCkgPT4KICBmbiA9ICgpID0+CiAgZm4gPSAoKSA9PgogIGZuID0gKCkgPT4KICBmbiA9ICgpID0+CiAgZm4gPSAoKSA9PgogIGZuID0gKCkgPT4KICBmbiA9ICgpID0+CiAgKCkgPT4KICAoKSA9PgogICgpID0+CiAgKCkgPT4KICAoKSA9PgogICgpID0+CiAgKCkgPT4KICAoKSA9PgogICgpID0+CiAgKCkgPT4KICAoKSA9PgogICgpID0+CiAgKCkgPT4KICBlID0+CiAgKCkgPT4KICBlID0+CiAgKG8sIHAsIHIpID0+CiAgKCkgPT4KICBjcmVmID0+CiAgKCkgPT4KICBjcmVmID0+CiAgKCkgPT4KICBlID0+CiAgKCkgPT4KICBlID0+CiAgKCkgPT4KICBlID0+CiAgKCkgPT4KICBlID0+CiAgLmdldENvbG9yID0gZnVuY3Rpb24oZWxlbWVudCkKICAuaXNWaXNpYmxlID0gZWxlbWVudCA9PgogIC5zZXRWaXNpYmxlID0gdmFsdWUgPT4KICAuc3Vic2NyaWJlID0gZm4gPT4KICB2YWx1ZSA9PgogIC5zdWJzY3JpYmUgPSBmbiA9PgogIHZhbHVlID0+CiAgLmdldENvbG9yID0gZnVuY3Rpb24oKQogIHZhbHVlID0+CiAgbiA9PgogIGdldCByZXBlYXRlcigpCihwdXNoLCBzdG9wKSA9PgooeyB2YWx1ZSwgZG9uZSB9KSA9PgogIC5wdXNoRXZlbnQgPSBmdW5jdGlvbiguLi5hcmdzKQooZWxlbSkgPT4KICBldmVudChuYW1lKQogIHN1YnNjcmliZShoYW5kbGVyKQogIHVuc3Vic2NyaWJlKGhhbmRsZXIpCiAgaCA9PgogIGdldCB0ZXh0KCkKICBnZXQgYXR0cmlidXRlcygpCiAgZ2V0TGF5ZXIoKQogIGxvb2t1cCh4cGF0aCwgY3JlYXRlKQogIChvLCBwLCB2KSA9PgogIGdldEJvdW5kcyhwcmVkLCBvcHRzID0ge30pCiAgcHJlZCA9IGUgPT4KICBlID0+CiAgZSA9PgogIGUgPT4KICBlID0+CiAgYiA9PgogIHIgPT4KICBlID0+CiAgbiA9PgogIGdldCBib3VuZHMoKQogIHRyYW5zZm9ybWF0aW9uKCkKICBnZXQgZ2VvbWV0cnkoKQogIG1ha2VHZXR0ZXJTZXR0ZXIgPSAoaykgPT4gKHYpID0+CihwKSA9PgoocHJvcCkgPT4KICAoaykgPT4gKHYpID0+Cihwcm9wKSA9PgoocHJvcCkgPT4KKHByb3ApID0+CiAgKCkgPT4KKGcpID0+CiAgcG9zaXRpb24ob2Zmc2V0ID0gbnVsbCkKICBtYWtlR2V0dGVyU2V0dGVyID0gayA9PiB2ID0+CiAgcHJvcCA9PgogIHN0YXRpYyBpc1JlbGF0aW9uKG5hbWUpCiAgdCA9IChvLCBwLCB2KSA9PgogIHIgPSBlID0+CiAgZ2V0IGNoYWluKCkKICBnZXRQYXJlbnQodGFnTmFtZSkKICBnZXQgc2hlZXQoKQogIGdldCBzaGVldE51bWJlcigpCiAgbmFtZXMoKQooYWNjLCBlbnRyeSkgPT4KICBzdGF0aWMga2V5cyhlbnRpdHkpCiAgc3RhdGljIHZhbHVlcyhlbnRpdHkpCiAgc3RhdGljIGVudHJpZXMoZW50aXR5KQogIHN0YXRpYyB0b09iamVjdChlKQogIGNoaWxkID0+CiAgY2hpbGQgPT4KICBzdGF0aWMgdG9BcnJheShlKQogIHRvU3RyaW5nKCkKKmdldEFsbChwcmVkLCB0cmFuc2Zvcm0gPSBhID0+IGEpCiAgKHYsIHAsIG8pID0+CiAgKHIsIHYsIHAsIG8pID0+CiAgKCkgPT4KKHYsIHAsIG8pID0+CiAgZmluZChwcmVkLCB0cmFuc2Zvcm0gPSBhID0+IGEpCiAgKHYsIHAsIG8pID0+CiAgKHIsIHYsIHAsIG8pID0+CiAgKCkgPT4KICBzZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpCiAgcmVtb3ZlQXR0cmlidXRlKG5hbWUpCiAgZ2V0IHBvcygpCiAgbWFrZUVhZ2xlRWxlbWVudCA9IChvd25lciwgcmVmLCByYXcpID0+AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					23,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/time-helpers.js",
						"symkeys":
						[
							[
								37,
								79
							],
							[
								93,
								105
							],
							[
								123,
								124
							],
							[
								184,
								216
							],
							[
								434,
								447
							],
							[
								530,
								539
							],
							[
								612,
								635
							]
						],
						"symlist":
						[
							" function Profiler(name, ticks = () => cv.",
							", freq = cv.",
							")",
							"self = function(label = `#${i}`)",
							"get elapsed()",
							"get lap()",
							" function printTime(t)"
						]
					},
					"AQAAAAAAAAAAAAAAfQAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					24,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB9AAAAUHJvZmlsZXIobmFtZSwgdGlja3MgPSAoKSA9PiBjdi4KLCBmcmVxID0gY3YuCikKICBzZWxmID0gZnVuY3Rpb24obGFiZWwgPSBgIyR7aX1gKQogIGdldCBlbGFwc2VkKCkKICBnZXQgbGFwKCkKICBwcmludFRpbWUodCkAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					25,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/io-helpers.js",
						"symkeys":
						[
							[
								312,
								336
							],
							[
								476,
								513
							],
							[
								544,
								550
							],
							[
								616,
								629
							],
							[
								660,
								692
							],
							[
								825,
								856
							],
							[
								933,
								946
							],
							[
								1166,
								1174
							],
							[
								1259,
								1287
							],
							[
								1466,
								1493
							],
							[
								1741,
								1788
							],
							[
								2357,
								2388
							],
							[
								3114,
								3145
							],
							[
								3220,
								3226
							],
							[
								3744,
								3833
							],
							[
								3989,
								4024
							],
							[
								4556,
								4609
							],
							[
								5027,
								5063
							],
							[
								5131,
								5158
							],
							[
								5211,
								5252
							],
							[
								5278,
								5287
							],
							[
								5329,
								5354
							],
							[
								5476,
								5486
							],
							[
								5602,
								5607
							],
							[
								5707,
								5717
							],
							[
								5794,
								5809
							],
							[
								5880,
								5894
							],
							[
								6011,
								6052
							],
							[
								6118,
								6139
							],
							[
								6526,
								6557
							]
						],
						"symlist":
						[
							" function IfDebug(token)",
							" function LogIfDebug(token, loggerFn)",
							" () =>",
							" (...args) =>",
							" function ReadFile(name, binary)",
							" function LoadHistory(filename)",
							"parse = () =>",
							"entry =>",
							" function ReadJSON(filename)",
							" function MapFile(filename)",
							" function WriteFile(name, data, verbose = true)",
							" function WriteJSON(name, data)",
							" function* DirIterator(...args)",
							" () =>",
							" function* RecursiveDirIterator(dir, pred = (entry, file, dir, depth) => true, depth = 0)",
							"pred = (entry, file, dir, depth) =>",
							" function* ReadDirRecursive(dir, maxDepth = Infinity)",
							" function* Filter(gen, regEx = /.*/)",
							" function FilterImages(gen)",
							" function SortFiles(arr, field = 'ctime')",
							"(a, b) =>",
							" function* StatFiles(gen)",
							"toString()",
							"() =>",
							"toString()",
							"get landscape()",
							"get portrait()",
							" function FdReader(fd, bufferSize = 1024)",
							"async (push, stop) =>",
							" function CopyToClipboard(text)"
						]
					},
					"AQAAAAAAAAAAAAAAlQIAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					26,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACVAgAASWZEZWJ1Zyh0b2tlbikKTG9nSWZEZWJ1Zyh0b2tlbiwgbG9nZ2VyRm4pCiAgKCkgPT4KICAoLi4uYXJncykgPT4KUmVhZEZpbGUobmFtZSwgYmluYXJ5KQpMb2FkSGlzdG9yeShmaWxlbmFtZSkKICBwYXJzZSA9ICgpID0+CiAgZW50cnkgPT4KUmVhZEpTT04oZmlsZW5hbWUpCk1hcEZpbGUoZmlsZW5hbWUpCldyaXRlRmlsZShuYW1lLCBkYXRhLCB2ZXJib3NlID0gdHJ1ZSkKV3JpdGVKU09OKG5hbWUsIGRhdGEpCkRpckl0ZXJhdG9yKC4uLmFyZ3MpCiAgKCkgPT4KUmVjdXJzaXZlRGlySXRlcmF0b3IoZGlyLCBwcmVkID0gKGVudHJ5LCBmaWxlLCBkaXIsIGRlcHRoKSA9PiB0cnVlLCBkZXB0aCA9IDApCiAgcHJlZCA9IChlbnRyeSwgZmlsZSwgZGlyLCBkZXB0aCkgPT4KUmVhZERpclJlY3Vyc2l2ZShkaXIsIG1heERlcHRoID0gSW5maW5pdHkpCkZpbHRlcihnZW4sIHJlZ0V4ID0gLy4qLykKRmlsdGVySW1hZ2VzKGdlbikKU29ydEZpbGVzKGFyciwgZmllbGQgPSAnY3RpbWUnKQooYSwgYikgPT4KU3RhdEZpbGVzKGdlbikKICB0b1N0cmluZygpCigpID0+CiAgdG9TdHJpbmcoKQogIGdldCBsYW5kc2NhcGUoKQogIGdldCBwb3J0cmFpdCgpCkZkUmVhZGVyKGZkLCBidWZmZXJTaXplID0gMTAyNCkKKHB1c2gsIHN0b3ApID0+CkNvcHlUb0NsaXBib2FyZCh0ZXh0KQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					27,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/io-helpers.js",
						"symkeys":
						[
							[
								312,
								336
							],
							[
								476,
								513
							],
							[
								544,
								550
							],
							[
								616,
								629
							],
							[
								660,
								692
							],
							[
								825,
								856
							],
							[
								933,
								946
							],
							[
								1166,
								1174
							],
							[
								1259,
								1287
							],
							[
								1466,
								1493
							],
							[
								1741,
								1788
							],
							[
								2357,
								2388
							],
							[
								3114,
								3145
							],
							[
								3220,
								3226
							],
							[
								3744,
								3833
							],
							[
								3989,
								4024
							],
							[
								4556,
								4609
							],
							[
								5027,
								5063
							],
							[
								5131,
								5158
							],
							[
								5211,
								5252
							],
							[
								5278,
								5287
							],
							[
								5329,
								5354
							],
							[
								5476,
								5486
							],
							[
								5602,
								5607
							],
							[
								5707,
								5717
							],
							[
								5794,
								5809
							],
							[
								5880,
								5894
							],
							[
								6011,
								6052
							],
							[
								6118,
								6139
							],
							[
								6526,
								6557
							]
						],
						"symlist":
						[
							" function IfDebug(token)",
							" function LogIfDebug(token, loggerFn)",
							" () =>",
							" (...args) =>",
							" function ReadFile(name, binary)",
							" function LoadHistory(filename)",
							"parse = () =>",
							"entry =>",
							" function ReadJSON(filename)",
							" function MapFile(filename)",
							" function WriteFile(name, data, verbose = true)",
							" function WriteJSON(name, data)",
							" function* DirIterator(...args)",
							" () =>",
							" function* RecursiveDirIterator(dir, pred = (entry, file, dir, depth) => true, depth = 0)",
							"pred = (entry, file, dir, depth) =>",
							" function* ReadDirRecursive(dir, maxDepth = Infinity)",
							" function* Filter(gen, regEx = /.*/)",
							" function FilterImages(gen)",
							" function SortFiles(arr, field = 'ctime')",
							"(a, b) =>",
							" function* StatFiles(gen)",
							"toString()",
							"() =>",
							"toString()",
							"get landscape()",
							"get portrait()",
							" function FdReader(fd, bufferSize = 1024)",
							"async (push, stop) =>",
							" function CopyToClipboard(text)"
						]
					},
					"AQAAAAAAAAAAAAAAlQIAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					28,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/io-helpers.js",
						"symkeys":
						[
							[
								312,
								336
							],
							[
								476,
								513
							],
							[
								544,
								550
							],
							[
								616,
								629
							],
							[
								660,
								692
							],
							[
								825,
								856
							],
							[
								933,
								946
							],
							[
								1166,
								1174
							],
							[
								1259,
								1287
							],
							[
								1466,
								1493
							],
							[
								1741,
								1788
							],
							[
								2357,
								2388
							],
							[
								2450,
								2479
							],
							[
								2821,
								2853
							],
							[
								3112,
								3143
							],
							[
								3218,
								3224
							],
							[
								3742,
								3831
							],
							[
								3987,
								4022
							],
							[
								4554,
								4607
							],
							[
								5025,
								5061
							],
							[
								5129,
								5156
							],
							[
								5209,
								5250
							],
							[
								5276,
								5285
							],
							[
								5327,
								5352
							],
							[
								5474,
								5484
							],
							[
								5600,
								5605
							],
							[
								5705,
								5715
							],
							[
								5792,
								5807
							],
							[
								5878,
								5892
							],
							[
								6009,
								6050
							],
							[
								6116,
								6137
							],
							[
								6524,
								6555
							]
						],
						"symlist":
						[
							" function IfDebug(token)",
							" function LogIfDebug(token, loggerFn)",
							" () =>",
							" (...args) =>",
							" function ReadFile(name, binary)",
							" function LoadHistory(filename)",
							"parse = () =>",
							"entry =>",
							" function ReadJSON(filename)",
							" function MapFile(filename)",
							" function WriteFile(name, data, verbose = true)",
							" function WriteJSON(name, data)",
							" function ReadBJSON(filename)",
							" function WriteBJSON(name, data)",
							" function* DirIterator(...args)",
							" () =>",
							" function* RecursiveDirIterator(dir, pred = (entry, file, dir, depth) => true, depth = 0)",
							"pred = (entry, file, dir, depth) =>",
							" function* ReadDirRecursive(dir, maxDepth = Infinity)",
							" function* Filter(gen, regEx = /.*/)",
							" function FilterImages(gen)",
							" function SortFiles(arr, field = 'ctime')",
							"(a, b) =>",
							" function* StatFiles(gen)",
							"toString()",
							"() =>",
							"toString()",
							"get landscape()",
							"get portrait()",
							" function FdReader(fd, bufferSize = 1024)",
							"async (push, stop) =>",
							" function CopyToClipboard(text)"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAACVAgAASWZEZWJ1Zyh0b2tlbikKTG9nSWZEZWJ1Zyh0b2tlbiwgbG9nZ2VyRm4pCiAgKCkgPT4KICAoLi4uYXJncykgPT4KUmVhZEZpbGUobmFtZSwgYmluYXJ5KQpMb2FkSGlzdG9yeShmaWxlbmFtZSkKICBwYXJzZSA9ICgpID0+CiAgZW50cnkgPT4KUmVhZEpTT04oZmlsZW5hbWUpCk1hcEZpbGUoZmlsZW5hbWUpCldyaXRlRmlsZShuYW1lLCBkYXRhLCB2ZXJib3NlID0gdHJ1ZSkKV3JpdGVKU09OKG5hbWUsIGRhdGEpCkRpckl0ZXJhdG9yKC4uLmFyZ3MpCiAgKCkgPT4KUmVjdXJzaXZlRGlySXRlcmF0b3IoZGlyLCBwcmVkID0gKGVudHJ5LCBmaWxlLCBkaXIsIGRlcHRoKSA9PiB0cnVlLCBkZXB0aCA9IDApCiAgcHJlZCA9IChlbnRyeSwgZmlsZSwgZGlyLCBkZXB0aCkgPT4KUmVhZERpclJlY3Vyc2l2ZShkaXIsIG1heERlcHRoID0gSW5maW5pdHkpCkZpbHRlcihnZW4sIHJlZ0V4ID0gLy4qLykKRmlsdGVySW1hZ2VzKGdlbikKU29ydEZpbGVzKGFyciwgZmllbGQgPSAnY3RpbWUnKQooYSwgYikgPT4KU3RhdEZpbGVzKGdlbikKICB0b1N0cmluZygpCigpID0+CiAgdG9TdHJpbmcoKQogIGdldCBsYW5kc2NhcGUoKQogIGdldCBwb3J0cmFpdCgpCkZkUmVhZGVyKGZkLCBidWZmZXJTaXplID0gMTAyNCkKKHB1c2gsIHN0b3ApID0+CkNvcHlUb0NsaXBib2FyZCh0ZXh0KQAAAAAAAAAAwAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMACAABJZkRlYnVnKHRva2VuKQpMb2dJZkRlYnVnKHRva2VuLCBsb2dnZXJGbikKICAoKSA9PgogICguLi5hcmdzKSA9PgpSZWFkRmlsZShuYW1lLCBiaW5hcnkpCkxvYWRIaXN0b3J5KGZpbGVuYW1lKQogIHBhcnNlID0gKCkgPT4KICBlbnRyeSA9PgpSZWFkSlNPTihmaWxlbmFtZSkKTWFwRmlsZShmaWxlbmFtZSkKV3JpdGVGaWxlKG5hbWUsIGRhdGEsIHZlcmJvc2UgPSB0cnVlKQpXcml0ZUpTT04obmFtZSwgZGF0YSkKUmVhZEJKU09OKGZpbGVuYW1lKQpXcml0ZUJKU09OKG5hbWUsIGRhdGEpCkRpckl0ZXJhdG9yKC4uLmFyZ3MpCiAgKCkgPT4KUmVjdXJzaXZlRGlySXRlcmF0b3IoZGlyLCBwcmVkID0gKGVudHJ5LCBmaWxlLCBkaXIsIGRlcHRoKSA9PiB0cnVlLCBkZXB0aCA9IDApCiAgcHJlZCA9IChlbnRyeSwgZmlsZSwgZGlyLCBkZXB0aCkgPT4KUmVhZERpclJlY3Vyc2l2ZShkaXIsIG1heERlcHRoID0gSW5maW5pdHkpCkZpbHRlcihnZW4sIHJlZ0V4ID0gLy4qLykKRmlsdGVySW1hZ2VzKGdlbikKU29ydEZpbGVzKGFyciwgZmllbGQgPSAnY3RpbWUnKQooYSwgYikgPT4KU3RhdEZpbGVzKGdlbikKICB0b1N0cmluZygpCigpID0+CiAgdG9TdHJpbmcoKQogIGdldCBsYW5kc2NhcGUoKQogIGdldCBwb3J0cmFpdCgpCkZkUmVhZGVyKGZkLCBidWZmZXJTaXplID0gMTAyNCkKKHB1c2gsIHN0b3ApID0+CkNvcHlUb0NsaXBib2FyZCh0ZXh0KQAAAAAAAAAAwAIAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					29,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/io-helpers.js",
						"symkeys":
						[
							[
								339,
								343
							],
							[
								361,
								366
							],
							[
								379,
								403
							],
							[
								543,
								580
							],
							[
								611,
								617
							],
							[
								683,
								696
							],
							[
								727,
								759
							],
							[
								892,
								923
							],
							[
								1000,
								1013
							],
							[
								1233,
								1241
							],
							[
								1326,
								1354
							],
							[
								1533,
								1560
							],
							[
								1808,
								1855
							],
							[
								2424,
								2455
							],
							[
								2517,
								2546
							],
							[
								2888,
								2920
							],
							[
								3179,
								3210
							],
							[
								3285,
								3291
							],
							[
								3809,
								3898
							],
							[
								4054,
								4089
							],
							[
								4621,
								4674
							],
							[
								5092,
								5128
							],
							[
								5196,
								5223
							],
							[
								5276,
								5317
							],
							[
								5343,
								5352
							],
							[
								5394,
								5419
							],
							[
								5541,
								5551
							],
							[
								5667,
								5672
							],
							[
								5772,
								5782
							],
							[
								5859,
								5874
							],
							[
								5945,
								5959
							],
							[
								6076,
								6117
							],
							[
								6183,
								6204
							],
							[
								6591,
								6622
							]
						],
						"symlist":
						[
							"m =>",
							"() =>",
							" function IfDebug(token)",
							" function LogIfDebug(token, loggerFn)",
							" () =>",
							" (...args) =>",
							" function ReadFile(name, binary)",
							" function LoadHistory(filename)",
							"parse = () =>",
							"entry =>",
							" function ReadJSON(filename)",
							" function MapFile(filename)",
							" function WriteFile(name, data, verbose = true)",
							" function WriteJSON(name, data)",
							" function ReadBJSON(filename)",
							" function WriteBJSON(name, data)",
							" function* DirIterator(...args)",
							" () =>",
							" function* RecursiveDirIterator(dir, pred = (entry, file, dir, depth) => true, depth = 0)",
							"pred = (entry, file, dir, depth) =>",
							" function* ReadDirRecursive(dir, maxDepth = Infinity)",
							" function* Filter(gen, regEx = /.*/)",
							" function FilterImages(gen)",
							" function SortFiles(arr, field = 'ctime')",
							"(a, b) =>",
							" function* StatFiles(gen)",
							"toString()",
							"() =>",
							"toString()",
							"get landscape()",
							"get portrait()",
							" function FdReader(fd, bufferSize = 1024)",
							"async (push, stop) =>",
							" function CopyToClipboard(text)"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAADAAgAASWZEZWJ1Zyh0b2tlbikKTG9nSWZEZWJ1Zyh0b2tlbiwgbG9nZ2VyRm4pCiAgKCkgPT4KICAoLi4uYXJncykgPT4KUmVhZEZpbGUobmFtZSwgYmluYXJ5KQpMb2FkSGlzdG9yeShmaWxlbmFtZSkKICBwYXJzZSA9ICgpID0+CiAgZW50cnkgPT4KUmVhZEpTT04oZmlsZW5hbWUpCk1hcEZpbGUoZmlsZW5hbWUpCldyaXRlRmlsZShuYW1lLCBkYXRhLCB2ZXJib3NlID0gdHJ1ZSkKV3JpdGVKU09OKG5hbWUsIGRhdGEpClJlYWRCSlNPTihmaWxlbmFtZSkKV3JpdGVCSlNPTihuYW1lLCBkYXRhKQpEaXJJdGVyYXRvciguLi5hcmdzKQogICgpID0+ClJlY3Vyc2l2ZURpckl0ZXJhdG9yKGRpciwgcHJlZCA9IChlbnRyeSwgZmlsZSwgZGlyLCBkZXB0aCkgPT4gdHJ1ZSwgZGVwdGggPSAwKQogIHByZWQgPSAoZW50cnksIGZpbGUsIGRpciwgZGVwdGgpID0+ClJlYWREaXJSZWN1cnNpdmUoZGlyLCBtYXhEZXB0aCA9IEluZmluaXR5KQpGaWx0ZXIoZ2VuLCByZWdFeCA9IC8uKi8pCkZpbHRlckltYWdlcyhnZW4pClNvcnRGaWxlcyhhcnIsIGZpZWxkID0gJ2N0aW1lJykKKGEsIGIpID0+ClN0YXRGaWxlcyhnZW4pCiAgdG9TdHJpbmcoKQooKSA9PgogIHRvU3RyaW5nKCkKICBnZXQgbGFuZHNjYXBlKCkKICBnZXQgcG9ydHJhaXQoKQpGZFJlYWRlcihmZCwgYnVmZmVyU2l6ZSA9IDEwMjQpCihwdXNoLCBzdG9wKSA9PgpDb3B5VG9DbGlwYm9hcmQodGV4dCkAAAAAAAAAAM0CAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADNAgAAICBtID0+CigpID0+CklmRGVidWcodG9rZW4pCkxvZ0lmRGVidWcodG9rZW4sIGxvZ2dlckZuKQogICgpID0+CiAgKC4uLmFyZ3MpID0+ClJlYWRGaWxlKG5hbWUsIGJpbmFyeSkKTG9hZEhpc3RvcnkoZmlsZW5hbWUpCiAgcGFyc2UgPSAoKSA9PgogIGVudHJ5ID0+ClJlYWRKU09OKGZpbGVuYW1lKQpNYXBGaWxlKGZpbGVuYW1lKQpXcml0ZUZpbGUobmFtZSwgZGF0YSwgdmVyYm9zZSA9IHRydWUpCldyaXRlSlNPTihuYW1lLCBkYXRhKQpSZWFkQkpTT04oZmlsZW5hbWUpCldyaXRlQkpTT04obmFtZSwgZGF0YSkKRGlySXRlcmF0b3IoLi4uYXJncykKICAoKSA9PgpSZWN1cnNpdmVEaXJJdGVyYXRvcihkaXIsIHByZWQgPSAoZW50cnksIGZpbGUsIGRpciwgZGVwdGgpID0+IHRydWUsIGRlcHRoID0gMCkKICBwcmVkID0gKGVudHJ5LCBmaWxlLCBkaXIsIGRlcHRoKSA9PgpSZWFkRGlyUmVjdXJzaXZlKGRpciwgbWF4RGVwdGggPSBJbmZpbml0eSkKRmlsdGVyKGdlbiwgcmVnRXggPSAvLiovKQpGaWx0ZXJJbWFnZXMoZ2VuKQpTb3J0RmlsZXMoYXJyLCBmaWVsZCA9ICdjdGltZScpCihhLCBiKSA9PgpTdGF0RmlsZXMoZ2VuKQogIHRvU3RyaW5nKCkKKCkgPT4KICB0b1N0cmluZygpCiAgZ2V0IGxhbmRzY2FwZSgpCiAgZ2V0IHBvcnRyYWl0KCkKRmRSZWFkZXIoZmQsIGJ1ZmZlclNpemUgPSAxMDI0KQoocHVzaCwgc3RvcCkgPT4KQ29weVRvQ2xpcGJvYXJkKHRleHQpAAAAAAAAAADNAgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					30,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/io-helpers.js",
						"symkeys":
						[
							[
								339,
								343
							],
							[
								361,
								366
							],
							[
								379,
								403
							],
							[
								543,
								580
							],
							[
								611,
								617
							],
							[
								683,
								696
							],
							[
								727,
								759
							],
							[
								892,
								923
							],
							[
								1000,
								1013
							],
							[
								1233,
								1241
							],
							[
								1326,
								1354
							],
							[
								1533,
								1560
							],
							[
								1808,
								1855
							],
							[
								2424,
								2455
							],
							[
								2517,
								2546
							],
							[
								2888,
								2920
							],
							[
								3177,
								3208
							],
							[
								3283,
								3289
							],
							[
								3807,
								3896
							],
							[
								4052,
								4087
							],
							[
								4619,
								4672
							],
							[
								5090,
								5126
							],
							[
								5194,
								5221
							],
							[
								5274,
								5315
							],
							[
								5341,
								5350
							],
							[
								5392,
								5417
							],
							[
								5539,
								5549
							],
							[
								5665,
								5670
							],
							[
								5770,
								5780
							],
							[
								5857,
								5872
							],
							[
								5943,
								5957
							],
							[
								6074,
								6115
							],
							[
								6181,
								6202
							],
							[
								6589,
								6620
							]
						],
						"symlist":
						[
							"m =>",
							"() =>",
							" function IfDebug(token)",
							" function LogIfDebug(token, loggerFn)",
							" () =>",
							" (...args) =>",
							" function ReadFile(name, binary)",
							" function LoadHistory(filename)",
							"parse = () =>",
							"entry =>",
							" function ReadJSON(filename)",
							" function MapFile(filename)",
							" function WriteFile(name, data, verbose = true)",
							" function WriteJSON(name, data)",
							" function ReadBJSON(filename)",
							" function WriteBJSON(name, data)",
							" function* DirIterator(...args)",
							" () =>",
							" function* RecursiveDirIterator(dir, pred = (entry, file, dir, depth) => true, depth = 0)",
							"pred = (entry, file, dir, depth) =>",
							" function* ReadDirRecursive(dir, maxDepth = Infinity)",
							" function* Filter(gen, regEx = /.*/)",
							" function FilterImages(gen)",
							" function SortFiles(arr, field = 'ctime')",
							"(a, b) =>",
							" function* StatFiles(gen)",
							"toString()",
							"() =>",
							"toString()",
							"get landscape()",
							"get portrait()",
							" function FdReader(fd, bufferSize = 1024)",
							"async (push, stop) =>",
							" function CopyToClipboard(text)"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAADNAgAAICBtID0+CigpID0+CklmRGVidWcodG9rZW4pCkxvZ0lmRGVidWcodG9rZW4sIGxvZ2dlckZuKQogICgpID0+CiAgKC4uLmFyZ3MpID0+ClJlYWRGaWxlKG5hbWUsIGJpbmFyeSkKTG9hZEhpc3RvcnkoZmlsZW5hbWUpCiAgcGFyc2UgPSAoKSA9PgogIGVudHJ5ID0+ClJlYWRKU09OKGZpbGVuYW1lKQpNYXBGaWxlKGZpbGVuYW1lKQpXcml0ZUZpbGUobmFtZSwgZGF0YSwgdmVyYm9zZSA9IHRydWUpCldyaXRlSlNPTihuYW1lLCBkYXRhKQpSZWFkQkpTT04oZmlsZW5hbWUpCldyaXRlQkpTT04obmFtZSwgZGF0YSkKRGlySXRlcmF0b3IoLi4uYXJncykKICAoKSA9PgpSZWN1cnNpdmVEaXJJdGVyYXRvcihkaXIsIHByZWQgPSAoZW50cnksIGZpbGUsIGRpciwgZGVwdGgpID0+IHRydWUsIGRlcHRoID0gMCkKICBwcmVkID0gKGVudHJ5LCBmaWxlLCBkaXIsIGRlcHRoKSA9PgpSZWFkRGlyUmVjdXJzaXZlKGRpciwgbWF4RGVwdGggPSBJbmZpbml0eSkKRmlsdGVyKGdlbiwgcmVnRXggPSAvLiovKQpGaWx0ZXJJbWFnZXMoZ2VuKQpTb3J0RmlsZXMoYXJyLCBmaWVsZCA9ICdjdGltZScpCihhLCBiKSA9PgpTdGF0RmlsZXMoZ2VuKQogIHRvU3RyaW5nKCkKKCkgPT4KICB0b1N0cmluZygpCiAgZ2V0IGxhbmRzY2FwZSgpCiAgZ2V0IHBvcnRyYWl0KCkKRmRSZWFkZXIoZmQsIGJ1ZmZlclNpemUgPSAxMDI0KQoocHVzaCwgc3RvcCkgPT4KQ29weVRvQ2xpcGJvYXJkKHRleHQpAAAAAAAAAADNAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzQIAACAgbSA9PgooKSA9PgpJZkRlYnVnKHRva2VuKQpMb2dJZkRlYnVnKHRva2VuLCBsb2dnZXJGbikKICAoKSA9PgogICguLi5hcmdzKSA9PgpSZWFkRmlsZShuYW1lLCBiaW5hcnkpCkxvYWRIaXN0b3J5KGZpbGVuYW1lKQogIHBhcnNlID0gKCkgPT4KICBlbnRyeSA9PgpSZWFkSlNPTihmaWxlbmFtZSkKTWFwRmlsZShmaWxlbmFtZSkKV3JpdGVGaWxlKG5hbWUsIGRhdGEsIHZlcmJvc2UgPSB0cnVlKQpXcml0ZUpTT04obmFtZSwgZGF0YSkKUmVhZEJKU09OKGZpbGVuYW1lKQpXcml0ZUJKU09OKG5hbWUsIGRhdGEpCkRpckl0ZXJhdG9yKC4uLmFyZ3MpCiAgKCkgPT4KUmVjdXJzaXZlRGlySXRlcmF0b3IoZGlyLCBwcmVkID0gKGVudHJ5LCBmaWxlLCBkaXIsIGRlcHRoKSA9PiB0cnVlLCBkZXB0aCA9IDApCiAgcHJlZCA9IChlbnRyeSwgZmlsZSwgZGlyLCBkZXB0aCkgPT4KUmVhZERpclJlY3Vyc2l2ZShkaXIsIG1heERlcHRoID0gSW5maW5pdHkpCkZpbHRlcihnZW4sIHJlZ0V4ID0gLy4qLykKRmlsdGVySW1hZ2VzKGdlbikKU29ydEZpbGVzKGFyciwgZmllbGQgPSAnY3RpbWUnKQooYSwgYikgPT4KU3RhdEZpbGVzKGdlbikKICB0b1N0cmluZygpCigpID0+CiAgdG9TdHJpbmcoKQogIGdldCBsYW5kc2NhcGUoKQogIGdldCBwb3J0cmFpdCgpCkZkUmVhZGVyKGZkLCBidWZmZXJTaXplID0gMTAyNCkKKHB1c2gsIHN0b3ApID0+CkNvcHlUb0NsaXBib2FyZCh0ZXh0KQAAAAAAAAAAzQIAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					31,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/io-helpers.js",
						"symkeys":
						[
							[
								349,
								353
							],
							[
								408,
								413
							],
							[
								426,
								450
							],
							[
								590,
								627
							],
							[
								658,
								664
							],
							[
								730,
								743
							],
							[
								774,
								806
							],
							[
								939,
								970
							],
							[
								1047,
								1060
							],
							[
								1280,
								1288
							],
							[
								1373,
								1401
							],
							[
								1580,
								1607
							],
							[
								1855,
								1902
							],
							[
								2471,
								2502
							],
							[
								2564,
								2593
							],
							[
								2935,
								2967
							],
							[
								3224,
								3255
							],
							[
								3330,
								3336
							],
							[
								3854,
								3943
							],
							[
								4099,
								4134
							],
							[
								4666,
								4719
							],
							[
								5137,
								5173
							],
							[
								5241,
								5268
							],
							[
								5321,
								5362
							],
							[
								5388,
								5397
							],
							[
								5439,
								5464
							],
							[
								5586,
								5596
							],
							[
								5712,
								5717
							],
							[
								5817,
								5827
							],
							[
								5904,
								5919
							],
							[
								5990,
								6004
							],
							[
								6121,
								6162
							],
							[
								6228,
								6249
							],
							[
								6636,
								6667
							]
						],
						"symlist":
						[
							"m =>",
							"() =>",
							" function IfDebug(token)",
							" function LogIfDebug(token, loggerFn)",
							" () =>",
							" (...args) =>",
							" function ReadFile(name, binary)",
							" function LoadHistory(filename)",
							"parse = () =>",
							"entry =>",
							" function ReadJSON(filename)",
							" function MapFile(filename)",
							" function WriteFile(name, data, verbose = true)",
							" function WriteJSON(name, data)",
							" function ReadBJSON(filename)",
							" function WriteBJSON(name, data)",
							" function* DirIterator(...args)",
							" () =>",
							" function* RecursiveDirIterator(dir, pred = (entry, file, dir, depth) => true, depth = 0)",
							"pred = (entry, file, dir, depth) =>",
							" function* ReadDirRecursive(dir, maxDepth = Infinity)",
							" function* Filter(gen, regEx = /.*/)",
							" function FilterImages(gen)",
							" function SortFiles(arr, field = 'ctime')",
							"(a, b) =>",
							" function* StatFiles(gen)",
							"toString()",
							"() =>",
							"toString()",
							"get landscape()",
							"get portrait()",
							" function FdReader(fd, bufferSize = 1024)",
							"async (push, stop) =>",
							" function CopyToClipboard(text)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADNAgAAICBtID0+CigpID0+CklmRGVidWcodG9rZW4pCkxvZ0lmRGVidWcodG9rZW4sIGxvZ2dlckZuKQogICgpID0+CiAgKC4uLmFyZ3MpID0+ClJlYWRGaWxlKG5hbWUsIGJpbmFyeSkKTG9hZEhpc3RvcnkoZmlsZW5hbWUpCiAgcGFyc2UgPSAoKSA9PgogIGVudHJ5ID0+ClJlYWRKU09OKGZpbGVuYW1lKQpNYXBGaWxlKGZpbGVuYW1lKQpXcml0ZUZpbGUobmFtZSwgZGF0YSwgdmVyYm9zZSA9IHRydWUpCldyaXRlSlNPTihuYW1lLCBkYXRhKQpSZWFkQkpTT04oZmlsZW5hbWUpCldyaXRlQkpTT04obmFtZSwgZGF0YSkKRGlySXRlcmF0b3IoLi4uYXJncykKICAoKSA9PgpSZWN1cnNpdmVEaXJJdGVyYXRvcihkaXIsIHByZWQgPSAoZW50cnksIGZpbGUsIGRpciwgZGVwdGgpID0+IHRydWUsIGRlcHRoID0gMCkKICBwcmVkID0gKGVudHJ5LCBmaWxlLCBkaXIsIGRlcHRoKSA9PgpSZWFkRGlyUmVjdXJzaXZlKGRpciwgbWF4RGVwdGggPSBJbmZpbml0eSkKRmlsdGVyKGdlbiwgcmVnRXggPSAvLiovKQpGaWx0ZXJJbWFnZXMoZ2VuKQpTb3J0RmlsZXMoYXJyLCBmaWVsZCA9ICdjdGltZScpCihhLCBiKSA9PgpTdGF0RmlsZXMoZ2VuKQogIHRvU3RyaW5nKCkKKCkgPT4KICB0b1N0cmluZygpCiAgZ2V0IGxhbmRzY2FwZSgpCiAgZ2V0IHBvcnRyYWl0KCkKRmRSZWFkZXIoZmQsIGJ1ZmZlclNpemUgPSAxMDI0KQoocHVzaCwgc3RvcCkgPT4KQ29weVRvQ2xpcGJvYXJkKHRleHQpAAAAAAAAAADNAgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					32,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADNAgAAICBtID0+CigpID0+CklmRGVidWcodG9rZW4pCkxvZ0lmRGVidWcodG9rZW4sIGxvZ2dlckZuKQogICgpID0+CiAgKC4uLmFyZ3MpID0+ClJlYWRGaWxlKG5hbWUsIGJpbmFyeSkKTG9hZEhpc3RvcnkoZmlsZW5hbWUpCiAgcGFyc2UgPSAoKSA9PgogIGVudHJ5ID0+ClJlYWRKU09OKGZpbGVuYW1lKQpNYXBGaWxlKGZpbGVuYW1lKQpXcml0ZUZpbGUobmFtZSwgZGF0YSwgdmVyYm9zZSA9IHRydWUpCldyaXRlSlNPTihuYW1lLCBkYXRhKQpSZWFkQkpTT04oZmlsZW5hbWUpCldyaXRlQkpTT04obmFtZSwgZGF0YSkKRGlySXRlcmF0b3IoLi4uYXJncykKICAoKSA9PgpSZWN1cnNpdmVEaXJJdGVyYXRvcihkaXIsIHByZWQgPSAoZW50cnksIGZpbGUsIGRpciwgZGVwdGgpID0+IHRydWUsIGRlcHRoID0gMCkKICBwcmVkID0gKGVudHJ5LCBmaWxlLCBkaXIsIGRlcHRoKSA9PgpSZWFkRGlyUmVjdXJzaXZlKGRpciwgbWF4RGVwdGggPSBJbmZpbml0eSkKRmlsdGVyKGdlbiwgcmVnRXggPSAvLiovKQpGaWx0ZXJJbWFnZXMoZ2VuKQpTb3J0RmlsZXMoYXJyLCBmaWVsZCA9ICdjdGltZScpCihhLCBiKSA9PgpTdGF0RmlsZXMoZ2VuKQogIHRvU3RyaW5nKCkKKCkgPT4KICB0b1N0cmluZygpCiAgZ2V0IGxhbmRzY2FwZSgpCiAgZ2V0IHBvcnRyYWl0KCkKRmRSZWFkZXIoZmQsIGJ1ZmZlclNpemUgPSAxMDI0KQoocHVzaCwgc3RvcCkgPT4KQ29weVRvQ2xpcGJvYXJkKHRleHQpAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					33,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/io-helpers.js",
						"symkeys":
						[
							[
								349,
								353
							],
							[
								408,
								413
							],
							[
								426,
								450
							],
							[
								590,
								627
							],
							[
								658,
								664
							],
							[
								730,
								743
							],
							[
								774,
								806
							],
							[
								939,
								970
							],
							[
								1047,
								1060
							],
							[
								1280,
								1288
							],
							[
								1373,
								1401
							],
							[
								1580,
								1607
							],
							[
								1855,
								1902
							],
							[
								2471,
								2502
							],
							[
								2564,
								2593
							],
							[
								2935,
								2967
							],
							[
								3224,
								3255
							],
							[
								3330,
								3336
							],
							[
								3854,
								3943
							],
							[
								4099,
								4134
							],
							[
								4666,
								4719
							],
							[
								5137,
								5173
							],
							[
								5241,
								5268
							],
							[
								5321,
								5362
							],
							[
								5388,
								5397
							],
							[
								5439,
								5464
							],
							[
								5586,
								5596
							],
							[
								5712,
								5717
							],
							[
								5817,
								5827
							],
							[
								5904,
								5919
							],
							[
								5990,
								6004
							],
							[
								6121,
								6162
							],
							[
								6228,
								6249
							],
							[
								6636,
								6667
							]
						],
						"symlist":
						[
							"m =>",
							"() =>",
							" function IfDebug(token)",
							" function LogIfDebug(token, loggerFn)",
							" () =>",
							" (...args) =>",
							" function ReadFile(name, binary)",
							" function LoadHistory(filename)",
							"parse = () =>",
							"entry =>",
							" function ReadJSON(filename)",
							" function MapFile(filename)",
							" function WriteFile(name, data, verbose = true)",
							" function WriteJSON(name, data)",
							" function ReadBJSON(filename)",
							" function WriteBJSON(name, data)",
							" function* DirIterator(...args)",
							" () =>",
							" function* RecursiveDirIterator(dir, pred = (entry, file, dir, depth) => true, depth = 0)",
							"pred = (entry, file, dir, depth) =>",
							" function* ReadDirRecursive(dir, maxDepth = Infinity)",
							" function* Filter(gen, regEx = /.*/)",
							" function FilterImages(gen)",
							" function SortFiles(arr, field = 'ctime')",
							"(a, b) =>",
							" function* StatFiles(gen)",
							"toString()",
							"() =>",
							"toString()",
							"get landscape()",
							"get portrait()",
							" function FdReader(fd, bufferSize = 1024)",
							"async (push, stop) =>",
							" function CopyToClipboard(text)"
						]
					},
					"AQAAAAAAAAAAAAAAzQIAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					34,
					3,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/io-helpers.js",
						"symkeys":
						[
							[
								349,
								353
							],
							[
								408,
								413
							],
							[
								426,
								450
							],
							[
								590,
								627
							],
							[
								658,
								664
							],
							[
								730,
								743
							],
							[
								774,
								806
							],
							[
								939,
								970
							],
							[
								1047,
								1060
							],
							[
								1280,
								1288
							],
							[
								1373,
								1401
							],
							[
								1580,
								1607
							],
							[
								1855,
								1902
							],
							[
								2471,
								2502
							],
							[
								2564,
								2593
							],
							[
								2935,
								2967
							],
							[
								3224,
								3255
							],
							[
								3330,
								3336
							],
							[
								3854,
								3943
							],
							[
								4099,
								4134
							],
							[
								4666,
								4719
							],
							[
								5137,
								5173
							],
							[
								5241,
								5268
							],
							[
								5321,
								5362
							],
							[
								5388,
								5397
							],
							[
								5439,
								5464
							],
							[
								5586,
								5596
							],
							[
								5712,
								5717
							],
							[
								5817,
								5827
							],
							[
								5904,
								5919
							],
							[
								5990,
								6004
							],
							[
								6121,
								6162
							],
							[
								6228,
								6249
							],
							[
								6636,
								6667
							]
						],
						"symlist":
						[
							"m =>",
							"() =>",
							" function IfDebug(token)",
							" function LogIfDebug(token, loggerFn)",
							" () =>",
							" (...args) =>",
							" function ReadFile(name, binary)",
							" function LoadHistory(filename)",
							"parse = () =>",
							"entry =>",
							" function ReadJSON(filename)",
							" function MapFile(filename)",
							" function WriteFile(name, data, verbose = true)",
							" function WriteJSON(name, data)",
							" function ReadBJSON(filename)",
							" function WriteBJSON(name, data)",
							" function* DirIterator(...args)",
							" () =>",
							" function* RecursiveDirIterator(dir, pred = (entry, file, dir, depth) => true, depth = 0)",
							"pred = (entry, file, dir, depth) =>",
							" function* ReadDirRecursive(dir, maxDepth = Infinity)",
							" function* Filter(gen, regEx = /.*/)",
							" function FilterImages(gen)",
							" function SortFiles(arr, field = 'ctime')",
							"(a, b) =>",
							" function* StatFiles(gen)",
							"toString()",
							"() =>",
							"toString()",
							"get landscape()",
							"get portrait()",
							" function FdReader(fd, bufferSize = 1024)",
							"async (push, stop) =>",
							" function CopyToClipboard(text)"
						]
					},
					"BgAAAAAAAAAAAAAAAAAAAAAAAADNAgAAICBtID0+CigpID0+CklmRGVidWcodG9rZW4pCkxvZ0lmRGVidWcodG9rZW4sIGxvZ2dlckZuKQogICgpID0+CiAgKC4uLmFyZ3MpID0+ClJlYWRGaWxlKG5hbWUsIGJpbmFyeSkKTG9hZEhpc3RvcnkoZmlsZW5hbWUpCiAgcGFyc2UgPSAoKSA9PgogIGVudHJ5ID0+ClJlYWRKU09OKGZpbGVuYW1lKQpNYXBGaWxlKGZpbGVuYW1lKQpXcml0ZUZpbGUobmFtZSwgZGF0YSwgdmVyYm9zZSA9IHRydWUpCldyaXRlSlNPTihuYW1lLCBkYXRhKQpSZWFkQkpTT04oZmlsZW5hbWUpCldyaXRlQkpTT04obmFtZSwgZGF0YSkKRGlySXRlcmF0b3IoLi4uYXJncykKICAoKSA9PgpSZWN1cnNpdmVEaXJJdGVyYXRvcihkaXIsIHByZWQgPSAoZW50cnksIGZpbGUsIGRpciwgZGVwdGgpID0+IHRydWUsIGRlcHRoID0gMCkKICBwcmVkID0gKGVudHJ5LCBmaWxlLCBkaXIsIGRlcHRoKSA9PgpSZWFkRGlyUmVjdXJzaXZlKGRpciwgbWF4RGVwdGggPSBJbmZpbml0eSkKRmlsdGVyKGdlbiwgcmVnRXggPSAvLiovKQpGaWx0ZXJJbWFnZXMoZ2VuKQpTb3J0RmlsZXMoYXJyLCBmaWVsZCA9ICdjdGltZScpCihhLCBiKSA9PgpTdGF0RmlsZXMoZ2VuKQogIHRvU3RyaW5nKCkKKCkgPT4KICB0b1N0cmluZygpCiAgZ2V0IGxhbmRzY2FwZSgpCiAgZ2V0IHBvcnRyYWl0KCkKRmRSZWFkZXIoZmQsIGJ1ZmZlclNpemUgPSAxMDI0KQoocHVzaCwgc3RvcCkgPT4KQ29weVRvQ2xpcGJvYXJkKHRleHQpAAAAAAAAAADNAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzQIAACAgbSA9PgooKSA9PgpJZkRlYnVnKHRva2VuKQpMb2dJZkRlYnVnKHRva2VuLCBsb2dnZXJGbikKICAoKSA9PgogICguLi5hcmdzKSA9PgpSZWFkRmlsZShuYW1lLCBiaW5hcnkpCkxvYWRIaXN0b3J5KGZpbGVuYW1lKQogIHBhcnNlID0gKCkgPT4KICBlbnRyeSA9PgpSZWFkSlNPTihmaWxlbmFtZSkKTWFwRmlsZShmaWxlbmFtZSkKV3JpdGVGaWxlKG5hbWUsIGRhdGEsIHZlcmJvc2UgPSB0cnVlKQpXcml0ZUpTT04obmFtZSwgZGF0YSkKUmVhZEJKU09OKGZpbGVuYW1lKQpXcml0ZUJKU09OKG5hbWUsIGRhdGEpCkRpckl0ZXJhdG9yKC4uLmFyZ3MpCiAgKCkgPT4KUmVjdXJzaXZlRGlySXRlcmF0b3IoZGlyLCBwcmVkID0gKGVudHJ5LCBmaWxlLCBkaXIsIGRlcHRoKSA9PiB0cnVlLCBkZXB0aCA9IDApCiAgcHJlZCA9IChlbnRyeSwgZmlsZSwgZGlyLCBkZXB0aCkgPT4KUmVhZERpclJlY3Vyc2l2ZShkaXIsIG1heERlcHRoID0gSW5maW5pdHkpCkZpbHRlcihnZW4sIHJlZ0V4ID0gLy4qLykKRmlsdGVySW1hZ2VzKGdlbikKU29ydEZpbGVzKGFyciwgZmllbGQgPSAnY3RpbWUnKQooYSwgYikgPT4KU3RhdEZpbGVzKGdlbikKICB0b1N0cmluZygpCigpID0+CiAgdG9TdHJpbmcoKQogIGdldCBsYW5kc2NhcGUoKQogIGdldCBwb3J0cmFpdCgpCkZkUmVhZGVyKGZkLCBidWZmZXJTaXplID0gMTAyNCkKKHB1c2gsIHN0b3ApID0+CkNvcHlUb0NsaXBib2FyZCh0ZXh0KQAAAAAAAAAAzQIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAM0CAAAgIG0gPT4KKCkgPT4KSWZEZWJ1Zyh0b2tlbikKTG9nSWZEZWJ1Zyh0b2tlbiwgbG9nZ2VyRm4pCiAgKCkgPT4KICAoLi4uYXJncykgPT4KUmVhZEZpbGUobmFtZSwgYmluYXJ5KQpMb2FkSGlzdG9yeShmaWxlbmFtZSkKICBwYXJzZSA9ICgpID0+CiAgZW50cnkgPT4KUmVhZEpTT04oZmlsZW5hbWUpCk1hcEZpbGUoZmlsZW5hbWUpCldyaXRlRmlsZShuYW1lLCBkYXRhLCB2ZXJib3NlID0gdHJ1ZSkKV3JpdGVKU09OKG5hbWUsIGRhdGEpClJlYWRCSlNPTihmaWxlbmFtZSkKV3JpdGVCSlNPTihuYW1lLCBkYXRhKQpEaXJJdGVyYXRvciguLi5hcmdzKQogICgpID0+ClJlY3Vyc2l2ZURpckl0ZXJhdG9yKGRpciwgcHJlZCA9IChlbnRyeSwgZmlsZSwgZGlyLCBkZXB0aCkgPT4gdHJ1ZSwgZGVwdGggPSAwKQogIHByZWQgPSAoZW50cnksIGZpbGUsIGRpciwgZGVwdGgpID0+ClJlYWREaXJSZWN1cnNpdmUoZGlyLCBtYXhEZXB0aCA9IEluZmluaXR5KQpGaWx0ZXIoZ2VuLCByZWdFeCA9IC8uKi8pCkZpbHRlckltYWdlcyhnZW4pClNvcnRGaWxlcyhhcnIsIGZpZWxkID0gJ2N0aW1lJykKKGEsIGIpID0+ClN0YXRGaWxlcyhnZW4pCiAgdG9TdHJpbmcoKQooKSA9PgogIHRvU3RyaW5nKCkKICBnZXQgbGFuZHNjYXBlKCkKICBnZXQgcG9ydHJhaXQoKQpGZFJlYWRlcihmZCwgYnVmZmVyU2l6ZSA9IDEwMjQpCihwdXNoLCBzdG9wKSA9PgpDb3B5VG9DbGlwYm9hcmQodGV4dCkAAAAAAAAAAM0CAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					35,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/io-helpers.js",
						"symkeys":
						[
							[
								349,
								353
							],
							[
								408,
								413
							],
							[
								426,
								450
							],
							[
								590,
								627
							],
							[
								658,
								664
							],
							[
								730,
								743
							],
							[
								774,
								806
							],
							[
								939,
								970
							],
							[
								1047,
								1060
							],
							[
								1280,
								1288
							],
							[
								1373,
								1401
							],
							[
								1580,
								1607
							],
							[
								1855,
								1902
							],
							[
								2471,
								2502
							],
							[
								2564,
								2593
							],
							[
								2935,
								2967
							],
							[
								3224,
								3255
							],
							[
								3330,
								3336
							],
							[
								3854,
								3943
							],
							[
								4099,
								4134
							],
							[
								4666,
								4719
							],
							[
								5137,
								5173
							],
							[
								5241,
								5268
							],
							[
								5321,
								5362
							],
							[
								5388,
								5397
							],
							[
								5439,
								5464
							],
							[
								5586,
								5596
							],
							[
								5712,
								5717
							],
							[
								5817,
								5827
							],
							[
								5904,
								5919
							],
							[
								5990,
								6004
							],
							[
								6121,
								6162
							],
							[
								6228,
								6249
							],
							[
								6636,
								6667
							]
						],
						"symlist":
						[
							"m =>",
							"() =>",
							" function IfDebug(token)",
							" function LogIfDebug(token, loggerFn)",
							" () =>",
							" (...args) =>",
							" function ReadFile(name, binary)",
							" function LoadHistory(filename)",
							"parse = () =>",
							"entry =>",
							" function ReadJSON(filename)",
							" function MapFile(filename)",
							" function WriteFile(name, data, verbose = true)",
							" function WriteJSON(name, data)",
							" function ReadBJSON(filename)",
							" function WriteBJSON(name, data)",
							" function* DirIterator(...args)",
							" () =>",
							" function* RecursiveDirIterator(dir, pred = (entry, file, dir, depth) => true, depth = 0)",
							"pred = (entry, file, dir, depth) =>",
							" function* ReadDirRecursive(dir, maxDepth = Infinity)",
							" function* Filter(gen, regEx = /.*/)",
							" function FilterImages(gen)",
							" function SortFiles(arr, field = 'ctime')",
							"(a, b) =>",
							" function* StatFiles(gen)",
							"toString()",
							"() =>",
							"toString()",
							"get landscape()",
							"get portrait()",
							" function FdReader(fd, bufferSize = 1024)",
							"async (push, stop) =>",
							" function CopyToClipboard(text)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADNAgAAICBtID0+CigpID0+CklmRGVidWcodG9rZW4pCkxvZ0lmRGVidWcodG9rZW4sIGxvZ2dlckZuKQogICgpID0+CiAgKC4uLmFyZ3MpID0+ClJlYWRGaWxlKG5hbWUsIGJpbmFyeSkKTG9hZEhpc3RvcnkoZmlsZW5hbWUpCiAgcGFyc2UgPSAoKSA9PgogIGVudHJ5ID0+ClJlYWRKU09OKGZpbGVuYW1lKQpNYXBGaWxlKGZpbGVuYW1lKQpXcml0ZUZpbGUobmFtZSwgZGF0YSwgdmVyYm9zZSA9IHRydWUpCldyaXRlSlNPTihuYW1lLCBkYXRhKQpSZWFkQkpTT04oZmlsZW5hbWUpCldyaXRlQkpTT04obmFtZSwgZGF0YSkKRGlySXRlcmF0b3IoLi4uYXJncykKICAoKSA9PgpSZWN1cnNpdmVEaXJJdGVyYXRvcihkaXIsIHByZWQgPSAoZW50cnksIGZpbGUsIGRpciwgZGVwdGgpID0+IHRydWUsIGRlcHRoID0gMCkKICBwcmVkID0gKGVudHJ5LCBmaWxlLCBkaXIsIGRlcHRoKSA9PgpSZWFkRGlyUmVjdXJzaXZlKGRpciwgbWF4RGVwdGggPSBJbmZpbml0eSkKRmlsdGVyKGdlbiwgcmVnRXggPSAvLiovKQpGaWx0ZXJJbWFnZXMoZ2VuKQpTb3J0RmlsZXMoYXJyLCBmaWVsZCA9ICdjdGltZScpCihhLCBiKSA9PgpTdGF0RmlsZXMoZ2VuKQogIHRvU3RyaW5nKCkKKCkgPT4KICB0b1N0cmluZygpCiAgZ2V0IGxhbmRzY2FwZSgpCiAgZ2V0IHBvcnRyYWl0KCkKRmRSZWFkZXIoZmQsIGJ1ZmZlclNpemUgPSAxMDI0KQoocHVzaCwgc3RvcCkgPT4KQ29weVRvQ2xpcGJvYXJkKHRleHQpAAAAAAAAAADNAgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					36,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/io-helpers.js",
						"symkeys":
						[
							[
								349,
								353
							],
							[
								371,
								376
							],
							[
								420,
								425
							],
							[
								436,
								460
							],
							[
								600,
								637
							],
							[
								668,
								674
							],
							[
								740,
								753
							],
							[
								784,
								816
							],
							[
								949,
								980
							],
							[
								1057,
								1070
							],
							[
								1290,
								1298
							],
							[
								1383,
								1411
							],
							[
								1590,
								1617
							],
							[
								1865,
								1912
							],
							[
								2481,
								2512
							],
							[
								2574,
								2603
							],
							[
								2945,
								2977
							],
							[
								3234,
								3265
							],
							[
								3340,
								3346
							],
							[
								3864,
								3953
							],
							[
								4109,
								4144
							],
							[
								4676,
								4729
							],
							[
								5147,
								5183
							],
							[
								5251,
								5278
							],
							[
								5331,
								5372
							],
							[
								5398,
								5407
							],
							[
								5449,
								5474
							],
							[
								5596,
								5606
							],
							[
								5722,
								5727
							],
							[
								5827,
								5837
							],
							[
								5914,
								5929
							],
							[
								6000,
								6014
							],
							[
								6131,
								6172
							],
							[
								6238,
								6259
							],
							[
								6646,
								6677
							]
						],
						"symlist":
						[
							"m =>",
							"() =>",
							"() =>",
							" function IfDebug(token)",
							" function LogIfDebug(token, loggerFn)",
							" () =>",
							" (...args) =>",
							" function ReadFile(name, binary)",
							" function LoadHistory(filename)",
							"parse = () =>",
							"entry =>",
							" function ReadJSON(filename)",
							" function MapFile(filename)",
							" function WriteFile(name, data, verbose = true)",
							" function WriteJSON(name, data)",
							" function ReadBJSON(filename)",
							" function WriteBJSON(name, data)",
							" function* DirIterator(...args)",
							" () =>",
							" function* RecursiveDirIterator(dir, pred = (entry, file, dir, depth) => true, depth = 0)",
							"pred = (entry, file, dir, depth) =>",
							" function* ReadDirRecursive(dir, maxDepth = Infinity)",
							" function* Filter(gen, regEx = /.*/)",
							" function FilterImages(gen)",
							" function SortFiles(arr, field = 'ctime')",
							"(a, b) =>",
							" function* StatFiles(gen)",
							"toString()",
							"() =>",
							"toString()",
							"get landscape()",
							"get portrait()",
							" function FdReader(fd, bufferSize = 1024)",
							"async (push, stop) =>",
							" function CopyToClipboard(text)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADNAgAAICBtID0+CigpID0+CklmRGVidWcodG9rZW4pCkxvZ0lmRGVidWcodG9rZW4sIGxvZ2dlckZuKQogICgpID0+CiAgKC4uLmFyZ3MpID0+ClJlYWRGaWxlKG5hbWUsIGJpbmFyeSkKTG9hZEhpc3RvcnkoZmlsZW5hbWUpCiAgcGFyc2UgPSAoKSA9PgogIGVudHJ5ID0+ClJlYWRKU09OKGZpbGVuYW1lKQpNYXBGaWxlKGZpbGVuYW1lKQpXcml0ZUZpbGUobmFtZSwgZGF0YSwgdmVyYm9zZSA9IHRydWUpCldyaXRlSlNPTihuYW1lLCBkYXRhKQpSZWFkQkpTT04oZmlsZW5hbWUpCldyaXRlQkpTT04obmFtZSwgZGF0YSkKRGlySXRlcmF0b3IoLi4uYXJncykKICAoKSA9PgpSZWN1cnNpdmVEaXJJdGVyYXRvcihkaXIsIHByZWQgPSAoZW50cnksIGZpbGUsIGRpciwgZGVwdGgpID0+IHRydWUsIGRlcHRoID0gMCkKICBwcmVkID0gKGVudHJ5LCBmaWxlLCBkaXIsIGRlcHRoKSA9PgpSZWFkRGlyUmVjdXJzaXZlKGRpciwgbWF4RGVwdGggPSBJbmZpbml0eSkKRmlsdGVyKGdlbiwgcmVnRXggPSAvLiovKQpGaWx0ZXJJbWFnZXMoZ2VuKQpTb3J0RmlsZXMoYXJyLCBmaWVsZCA9ICdjdGltZScpCihhLCBiKSA9PgpTdGF0RmlsZXMoZ2VuKQogIHRvU3RyaW5nKCkKKCkgPT4KICB0b1N0cmluZygpCiAgZ2V0IGxhbmRzY2FwZSgpCiAgZ2V0IHBvcnRyYWl0KCkKRmRSZWFkZXIoZmQsIGJ1ZmZlclNpemUgPSAxMDI0KQoocHVzaCwgc3RvcCkgPT4KQ29weVRvQ2xpcGJvYXJkKHRleHQpAAAAAAAAAADTAgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					37,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/io-helpers.js",
						"symkeys":
						[
							[
								349,
								353
							],
							[
								371,
								376
							],
							[
								420,
								425
							],
							[
								437,
								461
							],
							[
								601,
								638
							],
							[
								669,
								675
							],
							[
								741,
								754
							],
							[
								785,
								817
							],
							[
								950,
								981
							],
							[
								1058,
								1071
							],
							[
								1291,
								1299
							],
							[
								1384,
								1412
							],
							[
								1591,
								1618
							],
							[
								1866,
								1913
							],
							[
								2482,
								2513
							],
							[
								2575,
								2604
							],
							[
								2946,
								2978
							],
							[
								3235,
								3266
							],
							[
								3341,
								3347
							],
							[
								3865,
								3954
							],
							[
								4110,
								4145
							],
							[
								4677,
								4730
							],
							[
								5148,
								5184
							],
							[
								5252,
								5279
							],
							[
								5332,
								5373
							],
							[
								5399,
								5408
							],
							[
								5450,
								5475
							],
							[
								5597,
								5607
							],
							[
								5723,
								5728
							],
							[
								5828,
								5838
							],
							[
								5915,
								5930
							],
							[
								6001,
								6015
							],
							[
								6132,
								6173
							],
							[
								6239,
								6260
							],
							[
								6647,
								6678
							]
						],
						"symlist":
						[
							"m =>",
							"() =>",
							"() =>",
							" function IfDebug(token)",
							" function LogIfDebug(token, loggerFn)",
							" () =>",
							" (...args) =>",
							" function ReadFile(name, binary)",
							" function LoadHistory(filename)",
							"parse = () =>",
							"entry =>",
							" function ReadJSON(filename)",
							" function MapFile(filename)",
							" function WriteFile(name, data, verbose = true)",
							" function WriteJSON(name, data)",
							" function ReadBJSON(filename)",
							" function WriteBJSON(name, data)",
							" function* DirIterator(...args)",
							" () =>",
							" function* RecursiveDirIterator(dir, pred = (entry, file, dir, depth) => true, depth = 0)",
							"pred = (entry, file, dir, depth) =>",
							" function* ReadDirRecursive(dir, maxDepth = Infinity)",
							" function* Filter(gen, regEx = /.*/)",
							" function FilterImages(gen)",
							" function SortFiles(arr, field = 'ctime')",
							"(a, b) =>",
							" function* StatFiles(gen)",
							"toString()",
							"() =>",
							"toString()",
							"get landscape()",
							"get portrait()",
							" function FdReader(fd, bufferSize = 1024)",
							"async (push, stop) =>",
							" function CopyToClipboard(text)"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAADTAgAAICBtID0+CigpID0+CigpID0+CklmRGVidWcodG9rZW4pCkxvZ0lmRGVidWcodG9rZW4sIGxvZ2dlckZuKQogICgpID0+CiAgKC4uLmFyZ3MpID0+ClJlYWRGaWxlKG5hbWUsIGJpbmFyeSkKTG9hZEhpc3RvcnkoZmlsZW5hbWUpCiAgcGFyc2UgPSAoKSA9PgogIGVudHJ5ID0+ClJlYWRKU09OKGZpbGVuYW1lKQpNYXBGaWxlKGZpbGVuYW1lKQpXcml0ZUZpbGUobmFtZSwgZGF0YSwgdmVyYm9zZSA9IHRydWUpCldyaXRlSlNPTihuYW1lLCBkYXRhKQpSZWFkQkpTT04oZmlsZW5hbWUpCldyaXRlQkpTT04obmFtZSwgZGF0YSkKRGlySXRlcmF0b3IoLi4uYXJncykKICAoKSA9PgpSZWN1cnNpdmVEaXJJdGVyYXRvcihkaXIsIHByZWQgPSAoZW50cnksIGZpbGUsIGRpciwgZGVwdGgpID0+IHRydWUsIGRlcHRoID0gMCkKICBwcmVkID0gKGVudHJ5LCBmaWxlLCBkaXIsIGRlcHRoKSA9PgpSZWFkRGlyUmVjdXJzaXZlKGRpciwgbWF4RGVwdGggPSBJbmZpbml0eSkKRmlsdGVyKGdlbiwgcmVnRXggPSAvLiovKQpGaWx0ZXJJbWFnZXMoZ2VuKQpTb3J0RmlsZXMoYXJyLCBmaWVsZCA9ICdjdGltZScpCihhLCBiKSA9PgpTdGF0RmlsZXMoZ2VuKQogIHRvU3RyaW5nKCkKKCkgPT4KICB0b1N0cmluZygpCiAgZ2V0IGxhbmRzY2FwZSgpCiAgZ2V0IHBvcnRyYWl0KCkKRmRSZWFkZXIoZmQsIGJ1ZmZlclNpemUgPSAxMDI0KQoocHVzaCwgc3RvcCkgPT4KQ29weVRvQ2xpcGJvYXJkKHRleHQpAAAAAAAAAADTAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0wIAACAgbSA9PgooKSA9PgooKSA9PgpJZkRlYnVnKHRva2VuKQpMb2dJZkRlYnVnKHRva2VuLCBsb2dnZXJGbikKICAoKSA9PgogICguLi5hcmdzKSA9PgpSZWFkRmlsZShuYW1lLCBiaW5hcnkpCkxvYWRIaXN0b3J5KGZpbGVuYW1lKQogIHBhcnNlID0gKCkgPT4KICBlbnRyeSA9PgpSZWFkSlNPTihmaWxlbmFtZSkKTWFwRmlsZShmaWxlbmFtZSkKV3JpdGVGaWxlKG5hbWUsIGRhdGEsIHZlcmJvc2UgPSB0cnVlKQpXcml0ZUpTT04obmFtZSwgZGF0YSkKUmVhZEJKU09OKGZpbGVuYW1lKQpXcml0ZUJKU09OKG5hbWUsIGRhdGEpCkRpckl0ZXJhdG9yKC4uLmFyZ3MpCiAgKCkgPT4KUmVjdXJzaXZlRGlySXRlcmF0b3IoZGlyLCBwcmVkID0gKGVudHJ5LCBmaWxlLCBkaXIsIGRlcHRoKSA9PiB0cnVlLCBkZXB0aCA9IDApCiAgcHJlZCA9IChlbnRyeSwgZmlsZSwgZGlyLCBkZXB0aCkgPT4KUmVhZERpclJlY3Vyc2l2ZShkaXIsIG1heERlcHRoID0gSW5maW5pdHkpCkZpbHRlcihnZW4sIHJlZ0V4ID0gLy4qLykKRmlsdGVySW1hZ2VzKGdlbikKU29ydEZpbGVzKGFyciwgZmllbGQgPSAnY3RpbWUnKQooYSwgYikgPT4KU3RhdEZpbGVzKGdlbikKICB0b1N0cmluZygpCigpID0+CiAgdG9TdHJpbmcoKQogIGdldCBsYW5kc2NhcGUoKQogIGdldCBwb3J0cmFpdCgpCkZkUmVhZGVyKGZkLCBidWZmZXJTaXplID0gMTAyNCkKKHB1c2gsIHN0b3ApID0+CkNvcHlUb0NsaXBib2FyZCh0ZXh0KQAAAAAAAAAA0wIAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					38,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADTAgAAICBtID0+CigpID0+CigpID0+CklmRGVidWcodG9rZW4pCkxvZ0lmRGVidWcodG9rZW4sIGxvZ2dlckZuKQogICgpID0+CiAgKC4uLmFyZ3MpID0+ClJlYWRGaWxlKG5hbWUsIGJpbmFyeSkKTG9hZEhpc3RvcnkoZmlsZW5hbWUpCiAgcGFyc2UgPSAoKSA9PgogIGVudHJ5ID0+ClJlYWRKU09OKGZpbGVuYW1lKQpNYXBGaWxlKGZpbGVuYW1lKQpXcml0ZUZpbGUobmFtZSwgZGF0YSwgdmVyYm9zZSA9IHRydWUpCldyaXRlSlNPTihuYW1lLCBkYXRhKQpSZWFkQkpTT04oZmlsZW5hbWUpCldyaXRlQkpTT04obmFtZSwgZGF0YSkKRGlySXRlcmF0b3IoLi4uYXJncykKICAoKSA9PgpSZWN1cnNpdmVEaXJJdGVyYXRvcihkaXIsIHByZWQgPSAoZW50cnksIGZpbGUsIGRpciwgZGVwdGgpID0+IHRydWUsIGRlcHRoID0gMCkKICBwcmVkID0gKGVudHJ5LCBmaWxlLCBkaXIsIGRlcHRoKSA9PgpSZWFkRGlyUmVjdXJzaXZlKGRpciwgbWF4RGVwdGggPSBJbmZpbml0eSkKRmlsdGVyKGdlbiwgcmVnRXggPSAvLiovKQpGaWx0ZXJJbWFnZXMoZ2VuKQpTb3J0RmlsZXMoYXJyLCBmaWVsZCA9ICdjdGltZScpCihhLCBiKSA9PgpTdGF0RmlsZXMoZ2VuKQogIHRvU3RyaW5nKCkKKCkgPT4KICB0b1N0cmluZygpCiAgZ2V0IGxhbmRzY2FwZSgpCiAgZ2V0IHBvcnRyYWl0KCkKRmRSZWFkZXIoZmQsIGJ1ZmZlclNpemUgPSAxMDI0KQoocHVzaCwgc3RvcCkgPT4KQ29weVRvQ2xpcGJvYXJkKHRleHQpAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					39,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/io-helpers.js",
						"symkeys":
						[
							[
								349,
								353
							],
							[
								371,
								376
							],
							[
								420,
								425
							],
							[
								437,
								461
							],
							[
								601,
								638
							],
							[
								669,
								675
							],
							[
								741,
								754
							],
							[
								785,
								817
							],
							[
								950,
								981
							],
							[
								1058,
								1071
							],
							[
								1291,
								1299
							],
							[
								1384,
								1412
							],
							[
								1591,
								1618
							],
							[
								1866,
								1913
							],
							[
								2482,
								2513
							],
							[
								2575,
								2604
							],
							[
								2946,
								2978
							],
							[
								3235,
								3266
							],
							[
								3341,
								3347
							],
							[
								3865,
								3954
							],
							[
								4110,
								4145
							],
							[
								4677,
								4730
							],
							[
								5148,
								5184
							],
							[
								5252,
								5279
							],
							[
								5332,
								5373
							],
							[
								5399,
								5408
							],
							[
								5450,
								5475
							],
							[
								5597,
								5607
							],
							[
								5723,
								5728
							],
							[
								5828,
								5838
							],
							[
								5915,
								5930
							],
							[
								6001,
								6015
							],
							[
								6132,
								6173
							],
							[
								6239,
								6260
							],
							[
								6647,
								6678
							]
						],
						"symlist":
						[
							"m =>",
							"() =>",
							"() =>",
							" function IfDebug(token)",
							" function LogIfDebug(token, loggerFn)",
							" () =>",
							" (...args) =>",
							" function ReadFile(name, binary)",
							" function LoadHistory(filename)",
							"parse = () =>",
							"entry =>",
							" function ReadJSON(filename)",
							" function MapFile(filename)",
							" function WriteFile(name, data, verbose = true)",
							" function WriteJSON(name, data)",
							" function ReadBJSON(filename)",
							" function WriteBJSON(name, data)",
							" function* DirIterator(...args)",
							" () =>",
							" function* RecursiveDirIterator(dir, pred = (entry, file, dir, depth) => true, depth = 0)",
							"pred = (entry, file, dir, depth) =>",
							" function* ReadDirRecursive(dir, maxDepth = Infinity)",
							" function* Filter(gen, regEx = /.*/)",
							" function FilterImages(gen)",
							" function SortFiles(arr, field = 'ctime')",
							"(a, b) =>",
							" function* StatFiles(gen)",
							"toString()",
							"() =>",
							"toString()",
							"get landscape()",
							"get portrait()",
							" function FdReader(fd, bufferSize = 1024)",
							"async (push, stop) =>",
							" function CopyToClipboard(text)"
						]
					},
					"AQAAAAAAAAAAAAAA0wIAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					40,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/io-helpers.js",
						"symkeys":
						[
							[
								349,
								353
							],
							[
								371,
								376
							],
							[
								402,
								406
							],
							[
								421,
								426
							],
							[
								438,
								462
							],
							[
								602,
								639
							],
							[
								670,
								676
							],
							[
								742,
								755
							],
							[
								786,
								818
							],
							[
								951,
								982
							],
							[
								1059,
								1072
							],
							[
								1292,
								1300
							],
							[
								1385,
								1413
							],
							[
								1592,
								1619
							],
							[
								1867,
								1914
							],
							[
								2483,
								2514
							],
							[
								2576,
								2605
							],
							[
								2947,
								2979
							],
							[
								3236,
								3267
							],
							[
								3342,
								3348
							],
							[
								3866,
								3955
							],
							[
								4111,
								4146
							],
							[
								4678,
								4731
							],
							[
								5149,
								5185
							],
							[
								5253,
								5280
							],
							[
								5333,
								5374
							],
							[
								5400,
								5409
							],
							[
								5451,
								5476
							],
							[
								5598,
								5608
							],
							[
								5724,
								5729
							],
							[
								5829,
								5839
							],
							[
								5916,
								5931
							],
							[
								6002,
								6016
							],
							[
								6133,
								6174
							],
							[
								6240,
								6261
							],
							[
								6648,
								6679
							]
						],
						"symlist":
						[
							"m =>",
							"() =>",
							"m =>",
							"() =>",
							" function IfDebug(token)",
							" function LogIfDebug(token, loggerFn)",
							" () =>",
							" (...args) =>",
							" function ReadFile(name, binary)",
							" function LoadHistory(filename)",
							"parse = () =>",
							"entry =>",
							" function ReadJSON(filename)",
							" function MapFile(filename)",
							" function WriteFile(name, data, verbose = true)",
							" function WriteJSON(name, data)",
							" function ReadBJSON(filename)",
							" function WriteBJSON(name, data)",
							" function* DirIterator(...args)",
							" () =>",
							" function* RecursiveDirIterator(dir, pred = (entry, file, dir, depth) => true, depth = 0)",
							"pred = (entry, file, dir, depth) =>",
							" function* ReadDirRecursive(dir, maxDepth = Infinity)",
							" function* Filter(gen, regEx = /.*/)",
							" function FilterImages(gen)",
							" function SortFiles(arr, field = 'ctime')",
							"(a, b) =>",
							" function* StatFiles(gen)",
							"toString()",
							"() =>",
							"toString()",
							"get landscape()",
							"get portrait()",
							" function FdReader(fd, bufferSize = 1024)",
							"async (push, stop) =>",
							" function CopyToClipboard(text)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADTAgAAICBtID0+CigpID0+CigpID0+CklmRGVidWcodG9rZW4pCkxvZ0lmRGVidWcodG9rZW4sIGxvZ2dlckZuKQogICgpID0+CiAgKC4uLmFyZ3MpID0+ClJlYWRGaWxlKG5hbWUsIGJpbmFyeSkKTG9hZEhpc3RvcnkoZmlsZW5hbWUpCiAgcGFyc2UgPSAoKSA9PgogIGVudHJ5ID0+ClJlYWRKU09OKGZpbGVuYW1lKQpNYXBGaWxlKGZpbGVuYW1lKQpXcml0ZUZpbGUobmFtZSwgZGF0YSwgdmVyYm9zZSA9IHRydWUpCldyaXRlSlNPTihuYW1lLCBkYXRhKQpSZWFkQkpTT04oZmlsZW5hbWUpCldyaXRlQkpTT04obmFtZSwgZGF0YSkKRGlySXRlcmF0b3IoLi4uYXJncykKICAoKSA9PgpSZWN1cnNpdmVEaXJJdGVyYXRvcihkaXIsIHByZWQgPSAoZW50cnksIGZpbGUsIGRpciwgZGVwdGgpID0+IHRydWUsIGRlcHRoID0gMCkKICBwcmVkID0gKGVudHJ5LCBmaWxlLCBkaXIsIGRlcHRoKSA9PgpSZWFkRGlyUmVjdXJzaXZlKGRpciwgbWF4RGVwdGggPSBJbmZpbml0eSkKRmlsdGVyKGdlbiwgcmVnRXggPSAvLiovKQpGaWx0ZXJJbWFnZXMoZ2VuKQpTb3J0RmlsZXMoYXJyLCBmaWVsZCA9ICdjdGltZScpCihhLCBiKSA9PgpTdGF0RmlsZXMoZ2VuKQogIHRvU3RyaW5nKCkKKCkgPT4KICB0b1N0cmluZygpCiAgZ2V0IGxhbmRzY2FwZSgpCiAgZ2V0IHBvcnRyYWl0KCkKRmRSZWFkZXIoZmQsIGJ1ZmZlclNpemUgPSAxMDI0KQoocHVzaCwgc3RvcCkgPT4KQ29weVRvQ2xpcGJvYXJkKHRleHQpAAAAAAAAAADaAgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					41,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/io-helpers.js",
						"symkeys":
						[
							[
								225,
								229
							],
							[
								247,
								252
							],
							[
								278,
								282
							],
							[
								297,
								302
							],
							[
								314,
								338
							],
							[
								478,
								515
							],
							[
								546,
								552
							],
							[
								618,
								631
							],
							[
								662,
								694
							],
							[
								827,
								858
							],
							[
								935,
								948
							],
							[
								1168,
								1176
							],
							[
								1261,
								1289
							],
							[
								1468,
								1495
							],
							[
								1743,
								1790
							],
							[
								2359,
								2390
							],
							[
								2452,
								2481
							],
							[
								2823,
								2855
							],
							[
								3112,
								3143
							],
							[
								3218,
								3224
							],
							[
								3742,
								3831
							],
							[
								3987,
								4022
							],
							[
								4554,
								4607
							],
							[
								5025,
								5061
							],
							[
								5129,
								5156
							],
							[
								5209,
								5250
							],
							[
								5276,
								5285
							],
							[
								5327,
								5352
							],
							[
								5474,
								5484
							],
							[
								5600,
								5605
							],
							[
								5705,
								5715
							],
							[
								5792,
								5807
							],
							[
								5878,
								5892
							],
							[
								6009,
								6050
							],
							[
								6116,
								6137
							],
							[
								6524,
								6555
							]
						],
						"symlist":
						[
							"m =>",
							"() =>",
							"m =>",
							"() =>",
							" function IfDebug(token)",
							" function LogIfDebug(token, loggerFn)",
							" () =>",
							" (...args) =>",
							" function ReadFile(name, binary)",
							" function LoadHistory(filename)",
							"parse = () =>",
							"entry =>",
							" function ReadJSON(filename)",
							" function MapFile(filename)",
							" function WriteFile(name, data, verbose = true)",
							" function WriteJSON(name, data)",
							" function ReadBJSON(filename)",
							" function WriteBJSON(name, data)",
							" function* DirIterator(...args)",
							" () =>",
							" function* RecursiveDirIterator(dir, pred = (entry, file, dir, depth) => true, depth = 0)",
							"pred = (entry, file, dir, depth) =>",
							" function* ReadDirRecursive(dir, maxDepth = Infinity)",
							" function* Filter(gen, regEx = /.*/)",
							" function FilterImages(gen)",
							" function SortFiles(arr, field = 'ctime')",
							"(a, b) =>",
							" function* StatFiles(gen)",
							"toString()",
							"() =>",
							"toString()",
							"get landscape()",
							"get portrait()",
							" function FdReader(fd, bufferSize = 1024)",
							"async (push, stop) =>",
							" function CopyToClipboard(text)"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAADaAgAAICBtID0+CigpID0+CiAgbSA9PgooKSA9PgpJZkRlYnVnKHRva2VuKQpMb2dJZkRlYnVnKHRva2VuLCBsb2dnZXJGbikKICAoKSA9PgogICguLi5hcmdzKSA9PgpSZWFkRmlsZShuYW1lLCBiaW5hcnkpCkxvYWRIaXN0b3J5KGZpbGVuYW1lKQogIHBhcnNlID0gKCkgPT4KICBlbnRyeSA9PgpSZWFkSlNPTihmaWxlbmFtZSkKTWFwRmlsZShmaWxlbmFtZSkKV3JpdGVGaWxlKG5hbWUsIGRhdGEsIHZlcmJvc2UgPSB0cnVlKQpXcml0ZUpTT04obmFtZSwgZGF0YSkKUmVhZEJKU09OKGZpbGVuYW1lKQpXcml0ZUJKU09OKG5hbWUsIGRhdGEpCkRpckl0ZXJhdG9yKC4uLmFyZ3MpCiAgKCkgPT4KUmVjdXJzaXZlRGlySXRlcmF0b3IoZGlyLCBwcmVkID0gKGVudHJ5LCBmaWxlLCBkaXIsIGRlcHRoKSA9PiB0cnVlLCBkZXB0aCA9IDApCiAgcHJlZCA9IChlbnRyeSwgZmlsZSwgZGlyLCBkZXB0aCkgPT4KUmVhZERpclJlY3Vyc2l2ZShkaXIsIG1heERlcHRoID0gSW5maW5pdHkpCkZpbHRlcihnZW4sIHJlZ0V4ID0gLy4qLykKRmlsdGVySW1hZ2VzKGdlbikKU29ydEZpbGVzKGFyciwgZmllbGQgPSAnY3RpbWUnKQooYSwgYikgPT4KU3RhdEZpbGVzKGdlbikKICB0b1N0cmluZygpCigpID0+CiAgdG9TdHJpbmcoKQogIGdldCBsYW5kc2NhcGUoKQogIGdldCBwb3J0cmFpdCgpCkZkUmVhZGVyKGZkLCBidWZmZXJTaXplID0gMTAyNCkKKHB1c2gsIHN0b3ApID0+CkNvcHlUb0NsaXBib2FyZCh0ZXh0KQAAAAAAAAAA2gIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANoCAAAgIG0gPT4KKCkgPT4KICBtID0+CigpID0+CklmRGVidWcodG9rZW4pCkxvZ0lmRGVidWcodG9rZW4sIGxvZ2dlckZuKQogICgpID0+CiAgKC4uLmFyZ3MpID0+ClJlYWRGaWxlKG5hbWUsIGJpbmFyeSkKTG9hZEhpc3RvcnkoZmlsZW5hbWUpCiAgcGFyc2UgPSAoKSA9PgogIGVudHJ5ID0+ClJlYWRKU09OKGZpbGVuYW1lKQpNYXBGaWxlKGZpbGVuYW1lKQpXcml0ZUZpbGUobmFtZSwgZGF0YSwgdmVyYm9zZSA9IHRydWUpCldyaXRlSlNPTihuYW1lLCBkYXRhKQpSZWFkQkpTT04oZmlsZW5hbWUpCldyaXRlQkpTT04obmFtZSwgZGF0YSkKRGlySXRlcmF0b3IoLi4uYXJncykKICAoKSA9PgpSZWN1cnNpdmVEaXJJdGVyYXRvcihkaXIsIHByZWQgPSAoZW50cnksIGZpbGUsIGRpciwgZGVwdGgpID0+IHRydWUsIGRlcHRoID0gMCkKICBwcmVkID0gKGVudHJ5LCBmaWxlLCBkaXIsIGRlcHRoKSA9PgpSZWFkRGlyUmVjdXJzaXZlKGRpciwgbWF4RGVwdGggPSBJbmZpbml0eSkKRmlsdGVyKGdlbiwgcmVnRXggPSAvLiovKQpGaWx0ZXJJbWFnZXMoZ2VuKQpTb3J0RmlsZXMoYXJyLCBmaWVsZCA9ICdjdGltZScpCihhLCBiKSA9PgpTdGF0RmlsZXMoZ2VuKQogIHRvU3RyaW5nKCkKKCkgPT4KICB0b1N0cmluZygpCiAgZ2V0IGxhbmRzY2FwZSgpCiAgZ2V0IHBvcnRyYWl0KCkKRmRSZWFkZXIoZmQsIGJ1ZmZlclNpemUgPSAxMDI0KQoocHVzaCwgc3RvcCkgPT4KQ29weVRvQ2xpcGJvYXJkKHRleHQpAAAAAAAAAADaAgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					42,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/time-helpers.js",
						"symkeys":
						[
							[
								37,
								79
							],
							[
								93,
								105
							],
							[
								123,
								124
							],
							[
								184,
								216
							],
							[
								434,
								447
							],
							[
								530,
								539
							],
							[
								612,
								635
							]
						],
						"symlist":
						[
							" function Profiler(name, ticks = () => cv.",
							", freq = cv.",
							")",
							"self = function(label = `#${i}`)",
							"get elapsed()",
							"get lap()",
							" function printTime(t)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADaAgAAICBtID0+CigpID0+CiAgbSA9PgooKSA9PgpJZkRlYnVnKHRva2VuKQpMb2dJZkRlYnVnKHRva2VuLCBsb2dnZXJGbikKICAoKSA9PgogICguLi5hcmdzKSA9PgpSZWFkRmlsZShuYW1lLCBiaW5hcnkpCkxvYWRIaXN0b3J5KGZpbGVuYW1lKQogIHBhcnNlID0gKCkgPT4KICBlbnRyeSA9PgpSZWFkSlNPTihmaWxlbmFtZSkKTWFwRmlsZShmaWxlbmFtZSkKV3JpdGVGaWxlKG5hbWUsIGRhdGEsIHZlcmJvc2UgPSB0cnVlKQpXcml0ZUpTT04obmFtZSwgZGF0YSkKUmVhZEJKU09OKGZpbGVuYW1lKQpXcml0ZUJKU09OKG5hbWUsIGRhdGEpCkRpckl0ZXJhdG9yKC4uLmFyZ3MpCiAgKCkgPT4KUmVjdXJzaXZlRGlySXRlcmF0b3IoZGlyLCBwcmVkID0gKGVudHJ5LCBmaWxlLCBkaXIsIGRlcHRoKSA9PiB0cnVlLCBkZXB0aCA9IDApCiAgcHJlZCA9IChlbnRyeSwgZmlsZSwgZGlyLCBkZXB0aCkgPT4KUmVhZERpclJlY3Vyc2l2ZShkaXIsIG1heERlcHRoID0gSW5maW5pdHkpCkZpbHRlcihnZW4sIHJlZ0V4ID0gLy4qLykKRmlsdGVySW1hZ2VzKGdlbikKU29ydEZpbGVzKGFyciwgZmllbGQgPSAnY3RpbWUnKQooYSwgYikgPT4KU3RhdEZpbGVzKGdlbikKICB0b1N0cmluZygpCigpID0+CiAgdG9TdHJpbmcoKQogIGdldCBsYW5kc2NhcGUoKQogIGdldCBwb3J0cmFpdCgpCkZkUmVhZGVyKGZkLCBidWZmZXJTaXplID0gMTAyNCkKKHB1c2gsIHN0b3ApID0+CkNvcHlUb0NsaXBib2FyZCh0ZXh0KQAAAAAAAAAAfQAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					43,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/element.js",
						"symkeys":
						[
							[
								711,
								735
							],
							[
								771,
								795
							],
							[
								884,
								896
							],
							[
								966,
								983
							],
							[
								1458,
								1470
							],
							[
								1646,
								1673
							],
							[
								2653,
								2707
							],
							[
								2913,
								2941
							],
							[
								3567,
								3576
							],
							[
								3781,
								3786
							],
							[
								4059,
								4065
							],
							[
								4192,
								4198
							],
							[
								4553,
								4569
							],
							[
								4587,
								4603
							],
							[
								4655,
								4672
							],
							[
								4923,
								4939
							],
							[
								4951,
								4968
							],
							[
								4977,
								4993
							],
							[
								5047,
								5063
							],
							[
								5081,
								5097
							],
							[
								5124,
								5141
							],
							[
								5227,
								5243
							],
							[
								5261,
								5277
							],
							[
								5292,
								5309
							],
							[
								5520,
								5528
							],
							[
								5642,
								5650
							],
							[
								5964,
								5969
							],
							[
								5991,
								5998
							],
							[
								6136,
								6145
							],
							[
								6842,
								6848
							],
							[
								7274,
								7287
							],
							[
								7446,
								7450
							],
							[
								7803,
								7813
							],
							[
								7900,
								7910
							],
							[
								8017,
								8027
							],
							[
								8142,
								8152
							],
							[
								8263,
								8273
							],
							[
								8990,
								9000
							],
							[
								9098,
								9108
							],
							[
								9221,
								9231
							],
							[
								9315,
								9325
							],
							[
								9454,
								9464
							],
							[
								9593,
								9603
							],
							[
								10412,
								10418
							],
							[
								10559,
								10565
							],
							[
								10687,
								10693
							],
							[
								10805,
								10811
							],
							[
								10924,
								10930
							],
							[
								11040,
								11046
							],
							[
								11129,
								11135
							],
							[
								11223,
								11229
							],
							[
								11450,
								11456
							],
							[
								11544,
								11550
							],
							[
								11602,
								11608
							],
							[
								11700,
								11706
							],
							[
								12188,
								12194
							],
							[
								12270,
								12275
							],
							[
								12500,
								12506
							],
							[
								12618,
								12634
							],
							[
								12653,
								12677
							],
							[
								12869,
								12875
							],
							[
								13065,
								13072
							],
							[
								13162,
								13168
							],
							[
								13358,
								13365
							],
							[
								13527,
								13533
							],
							[
								13588,
								13593
							],
							[
								13684,
								13690
							],
							[
								13745,
								13750
							],
							[
								13805,
								13811
							],
							[
								13887,
								13892
							],
							[
								14007,
								14013
							],
							[
								14068,
								14073
							],
							[
								14143,
								14172
							],
							[
								14269,
								14292
							],
							[
								14391,
								14413
							],
							[
								14539,
								14557
							],
							[
								14590,
								14598
							],
							[
								14641,
								14659
							],
							[
								14692,
								14700
							],
							[
								14900,
								14922
							],
							[
								15334,
								15343
							],
							[
								15392,
								15396
							],
							[
								15831,
								15845
							],
							[
								15910,
								15931
							],
							[
								16052,
								16072
							],
							[
								16117,
								16147
							],
							[
								16364,
								16373
							],
							[
								16478,
								16489
							],
							[
								16683,
								16701
							],
							[
								16786,
								16806
							],
							[
								16856,
								16860
							],
							[
								16925,
								16935
							],
							[
								17153,
								17169
							],
							[
								17204,
								17214
							],
							[
								17453,
								17474
							],
							[
								17663,
								17676
							],
							[
								17976,
								18002
							],
							[
								18098,
								18109
							],
							[
								18706,
								18710
							],
							[
								20208,
								20212
							],
							[
								20649,
								20653
							],
							[
								20888,
								20892
							],
							[
								20923,
								20927
							],
							[
								20956,
								20960
							],
							[
								21257,
								21261
							],
							[
								22726,
								22730
							],
							[
								22867,
								22879
							],
							[
								22918,
								22934
							],
							[
								23319,
								23333
							],
							[
								23418,
								23450
							],
							[
								23679,
								23685
							],
							[
								23776,
								23785
							],
							[
								23853,
								23867
							],
							[
								24098,
								24107
							],
							[
								24352,
								24361
							],
							[
								24541,
								24550
							],
							[
								24939,
								24945
							],
							[
								25206,
								25212
							],
							[
								25317,
								25340
							],
							[
								25400,
								25428
							],
							[
								25516,
								25523
							],
							[
								25686,
								25709
							],
							[
								25911,
								25927
							],
							[
								25968,
								25976
							],
							[
								26061,
								26072
							],
							[
								26183,
								26201
							],
							[
								26334,
								26345
							],
							[
								26412,
								26429
							],
							[
								26538,
								26545
							],
							[
								26595,
								26610
							],
							[
								26675,
								26694
							],
							[
								26758,
								26779
							],
							[
								26845,
								26867
							],
							[
								26935,
								26953
							],
							[
								27318,
								27326
							],
							[
								27387,
								27395
							],
							[
								27666,
								27683
							],
							[
								27786,
								27796
							],
							[
								27906,
								27939
							],
							[
								27975,
								27993
							],
							[
								28073,
								28094
							],
							[
								28120,
								28131
							],
							[
								28246,
								28258
							],
							[
								28342,
								28372
							],
							[
								28408,
								28426
							],
							[
								28465,
								28486
							],
							[
								28507,
								28518
							],
							[
								28576,
								28601
							],
							[
								28731,
								28752
							],
							[
								28822,
								28831
							],
							[
								31849,
								31888
							]
						],
						"symlist":
						[
							"add = (arr, ...items) =>",
							"TList = (child, elem) =>",
							"round = n =>",
							"get(target, prop)",
							"EagleElement",
							"static get(owner, ref, raw)",
							"static create(tagName, attributes = {}, children = [])",
							"constructor(owner, ref, raw)",
							"EagleNode",
							"get()",
							" () =>",
							" () =>",
							" v =>",
							" v =>",
							" () =>",
							" v =>",
							" () =>",
							" v =>",
							" v =>",
							" v =>",
							" () =>",
							" v =>",
							" v =>",
							" () =>",
							"value =>",
							"value =>",
							" v =>",
							"name =>",
							"fn = v =>",
							" () =>",
							"fn = value =>",
							"e =>",
							"fn = () =>",
							"fn = () =>",
							"fn = () =>",
							"fn = () =>",
							"fn = () =>",
							"fn = () =>",
							"fn = () =>",
							"fn = () =>",
							"fn = () =>",
							"fn = () =>",
							"fn = () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" e =>",
							" () =>",
							" e =>",
							" (o, p, r) =>",
							" () =>",
							"cref =>",
							" () =>",
							"cref =>",
							" () =>",
							" e =>",
							" () =>",
							" e =>",
							" () =>",
							" e =>",
							" () =>",
							" e =>",
							".getColor = function(element)",
							".isVisible = element =>",
							".setVisible = value =>",
							".subscribe = fn =>",
							"value =>",
							".subscribe = fn =>",
							"value =>",
							".getColor = function()",
							" value =>",
							"n =>",
							"get repeater()",
							"async (push, stop) =>",
							"({ value, done }) =>",
							".pushEvent = function(...args)",
							"(elem) =>",
							"event(name)",
							"subscribe(handler)",
							"unsubscribe(handler)",
							"h =>",
							"get text()",
							"get attributes()",
							"getLayer()",
							"lookup(xpath, create)",
							" (o, p, v) =>",
							"getBounds(pred, opts = {})",
							"pred = e =>",
							"e =>",
							"e =>",
							"e =>",
							"e =>",
							"b =>",
							"r =>",
							"e =>",
							"n =>",
							"get bounds()",
							"transformation()",
							"get geometry()",
							"makeGetterSetter = (k) => (v) =>",
							"(p) =>",
							"(prop) =>",
							" (k) => (v) =>",
							"(prop) =>",
							"(prop) =>",
							"(prop) =>",
							" () =>",
							"(g) =>",
							"position(offset = null)",
							"makeGetterSetter = k => v =>",
							"prop =>",
							"static isRelation(name)",
							"t = (o, p, v) =>",
							"r = e =>",
							"get chain()",
							"getParent(tagName)",
							"get sheet()",
							"get sheetNumber()",
							"names()",
							"(acc, entry) =>",
							"static keys(entity)",
							"static values(entity)",
							"static entries(entity)",
							"static toObject(e)",
							"child =>",
							"child =>",
							"static toArray(e)",
							"toString()",
							"*getAll(pred, transform = a => a)",
							" (v, p, o) =>",
							" (r, v, p, o) =>",
							" () =>",
							"(v, p, o) =>",
							"find(pred, transform = a => a)",
							" (v, p, o) =>",
							" (r, v, p, o) =>",
							" () =>",
							"setAttribute(name, value)",
							"removeAttribute(name)",
							"get pos()",
							"makeEagleElement = (owner, ref, raw) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB9AAAAUHJvZmlsZXIobmFtZSwgdGlja3MgPSAoKSA9PiBjdi4KLCBmcmVxID0gY3YuCikKICBzZWxmID0gZnVuY3Rpb24obGFiZWwgPSBgIyR7aX1gKQogIGdldCBlbGFwc2VkKCkKICBnZXQgbGFwKCkKICBwcmludFRpbWUodCkAAAAAAAAAAFUIAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					44,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/server.js",
						"symkeys":
						[
							[
								1817,
								1847
							],
							[
								2021,
								2058
							],
							[
								2372,
								2423
							],
							[
								2485,
								2500
							],
							[
								2532,
								2541
							],
							[
								2857,
								2864
							],
							[
								3009,
								3017
							],
							[
								3237,
								3277
							],
							[
								3618,
								3639
							],
							[
								3928,
								3933
							],
							[
								4334,
								4353
							],
							[
								4889,
								4908
							],
							[
								5267,
								5339
							],
							[
								5703,
								5752
							],
							[
								6119,
								6152
							],
							[
								6945,
								6953
							],
							[
								7002,
								7010
							],
							[
								7545,
								7581
							],
							[
								8057,
								8063
							],
							[
								8512,
								8563
							],
							[
								9569,
								9620
							],
							[
								9758,
								9769
							],
							[
								9861,
								9872
							],
							[
								10477,
								10485
							],
							[
								10536,
								10544
							],
							[
								10597,
								10605
							],
							[
								11051,
								11058
							],
							[
								11201,
								11208
							],
							[
								11247,
								11264
							],
							[
								11914,
								11949
							],
							[
								12102,
								12110
							],
							[
								12327,
								12383
							],
							[
								12757,
								12770
							],
							[
								12836,
								12861
							],
							[
								13132,
								13137
							],
							[
								13179,
								13185
							],
							[
								13352,
								13357
							],
							[
								13396,
								13402
							],
							[
								14068,
								14087
							],
							[
								14092,
								14114
							],
							[
								14733,
								14752
							],
							[
								16092,
								16123
							],
							[
								16376,
								16395
							],
							[
								16786,
								16800
							],
							[
								16983,
								17002
							],
							[
								17172,
								17191
							],
							[
								17326,
								17355
							],
							[
								17543,
								17578
							],
							[
								17697,
								17701
							],
							[
								17806,
								17810
							],
							[
								17834,
								17843
							],
							[
								17998,
								18002
							],
							[
								18031,
								18036
							],
							[
								18066,
								18070
							],
							[
								18319,
								18372
							],
							[
								18527,
								18537
							],
							[
								18786,
								18799
							],
							[
								19414,
								19428
							],
							[
								19955,
								19988
							],
							[
								20277,
								20283
							],
							[
								20357,
								20361
							],
							[
								20371,
								20375
							],
							[
								20396,
								20424
							],
							[
								20689,
								20708
							],
							[
								20783,
								20790
							],
							[
								20847,
								20853
							],
							[
								20899,
								20917
							],
							[
								21177,
								21190
							],
							[
								21371,
								21384
							],
							[
								21635,
								21654
							],
							[
								21799,
								21809
							],
							[
								21830,
								21841
							],
							[
								21846,
								21857
							],
							[
								21893,
								21912
							],
							[
								21993,
								22006
							],
							[
								22040,
								22052
							],
							[
								22235,
								22248
							],
							[
								22305,
								22318
							],
							[
								22336,
								22348
							],
							[
								22352,
								22365
							],
							[
								22514,
								22533
							],
							[
								22910,
								22929
							],
							[
								22961,
								22972
							],
							[
								23146,
								23150
							],
							[
								24338,
								24345
							],
							[
								24379,
								24392
							],
							[
								24464,
								24483
							],
							[
								24764,
								24773
							],
							[
								24795,
								24802
							],
							[
								24841,
								24849
							],
							[
								24905,
								24924
							],
							[
								24990,
								25009
							],
							[
								25094,
								25113
							],
							[
								25435,
								25442
							],
							[
								25762,
								25781
							],
							[
								26046,
								26071
							],
							[
								27405,
								27410
							],
							[
								27456,
								27464
							],
							[
								27846,
								27860
							],
							[
								27932,
								27938
							]
						],
						"symlist":
						[
							"async function waitChild(proc)",
							"async function runMount(dirsIterator)",
							"async function readData(output, callback = d => {})",
							"(push, stop) =>",
							" chunk =>",
							"line =>",
							" data =>",
							"async function RequestContours(req, res)",
							"async function main()",
							"cp =>",
							"(req, res, next) =>",
							"(req, res, next) =>",
							" function SendRaw(res, file, data, type = 'application/octet-stream')",
							"convertToGerber = async (boardFile, opts = {}) =>",
							"formatToExt = (layers, format) =>",
							" data =>",
							" data =>",
							"gerberEndpoint = async (req, res) =>",
							"res =>",
							"gerberToGcode = async (gerberFile, allOpts = {}) =>",
							" function makePath(ext, side, base = basename)",
							"([k, v]) =>",
							"([k, v]) =>",
							" data =>",
							" data =>",
							"error =>",
							"side =>",
							"side =>",
							"([side, file]) =>",
							"gcodeEndpoint = async (req, res) =>",
							"error =>",
							"GithubListContents = async (owner, repo, dir, filter) =>",
							"({ name }) =>",
							"async (req, res, next) =>",
							"st =>",
							"err =>",
							"() =>",
							"err =>",
							" () =>",
							" value =>",
							"(req, res, next) =>",
							" function FindFile(relative)",
							"async (req, res) =>",
							" (req, res) =>",
							"async (req, res) =>",
							"async (req, res) =>",
							" function GetVFSPath(file)",
							"async function getDescription(file)",
							"r =>",
							"m =>",
							"(a, b) =>",
							"s =>",
							"re =>",
							"m =>",
							"async function GetFilesList(dir = './tmp', opts = {})",
							"f = ent =>",
							"(acc, dir) =>",
							"(acc, file) =>",
							"({ ctime, mtime, mode, size }) =>",
							"err =>",
							"a =>",
							"i =>",
							" function FilesURLs(list)",
							"async (req, res) =>",
							"port =>",
							"key =>",
							"async (ws, req) =>",
							"async data =>",
							"async data =>",
							"async (req, res) =>",
							" f =>",
							" st =>",
							" () =>",
							"async (req, res) =>",
							" () =>",
							" c =>",
							" () =>",
							" () =>",
							" o =>",
							" () =>",
							"async (req, res) =>",
							"async (req, res) =>",
							"async () =>",
							"p =>",
							"file =>",
							" () =>",
							"async (req, res) =>",
							"result =>",
							"file =>",
							"error =>",
							"async (req, res) =>",
							"async (req, res) =>",
							"async (req, res) =>",
							"name =>",
							"async (req, res) =>",
							"async (req, res, next) =>",
							"() =>",
							"error =>",
							" (req, res) =>",
							" () =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABVCAAAICBhZGQgPSAoYXJyLCAuLi5pdGVtcykgPT4KVExpc3QgPSAoY2hpbGQsIGVsZW0pID0+CiAgcm91bmQgPSBuID0+CiAgZ2V0KHRhcmdldCwgcHJvcCkKRWFnbGVFbGVtZW50CiAgc3RhdGljIGdldChvd25lciwgcmVmLCByYXcpCiAgc3RhdGljIGNyZWF0ZSh0YWdOYW1lLCBhdHRyaWJ1dGVzID0ge30sIGNoaWxkcmVuID0gW10pCiAgY29uc3RydWN0b3Iob3duZXIsIHJlZiwgcmF3KQpFYWdsZU5vZGUKICBnZXQoKQogICgpID0+CiAgKCkgPT4KICB2ID0+CiAgdiA9PgogICgpID0+CiAgdiA9PgogICgpID0+CiAgdiA9PgogIHYgPT4KICB2ID0+CiAgKCkgPT4KICB2ID0+CiAgdiA9PgogICgpID0+CiAgdmFsdWUgPT4KICB2YWx1ZSA9PgogIHYgPT4KICBuYW1lID0+CiAgZm4gPSB2ID0+CiAgKCkgPT4KICBmbiA9IHZhbHVlID0+CiAgZSA9PgogIGZuID0gKCkgPT4KICBmbiA9ICgpID0+CiAgZm4gPSAoKSA9PgogIGZuID0gKCkgPT4KICBmbiA9ICgpID0+CiAgZm4gPSAoKSA9PgogIGZuID0gKCkgPT4KICBmbiA9ICgpID0+CiAgZm4gPSAoKSA9PgogIGZuID0gKCkgPT4KICBmbiA9ICgpID0+CiAgKCkgPT4KICAoKSA9PgogICgpID0+CiAgKCkgPT4KICAoKSA9PgogICgpID0+CiAgKCkgPT4KICAoKSA9PgogICgpID0+CiAgKCkgPT4KICAoKSA9PgogICgpID0+CiAgKCkgPT4KICBlID0+CiAgKCkgPT4KICBlID0+CiAgKG8sIHAsIHIpID0+CiAgKCkgPT4KICBjcmVmID0+CiAgKCkgPT4KICBjcmVmID0+CiAgKCkgPT4KICBlID0+CiAgKCkgPT4KICBlID0+CiAgKCkgPT4KICBlID0+CiAgKCkgPT4KICBlID0+CiAgLmdldENvbG9yID0gZnVuY3Rpb24oZWxlbWVudCkKICAuaXNWaXNpYmxlID0gZWxlbWVudCA9PgogIC5zZXRWaXNpYmxlID0gdmFsdWUgPT4KICAuc3Vic2NyaWJlID0gZm4gPT4KICB2YWx1ZSA9PgogIC5zdWJzY3JpYmUgPSBmbiA9PgogIHZhbHVlID0+CiAgLmdldENvbG9yID0gZnVuY3Rpb24oKQogIHZhbHVlID0+CiAgbiA9PgogIGdldCByZXBlYXRlcigpCihwdXNoLCBzdG9wKSA9PgooeyB2YWx1ZSwgZG9uZSB9KSA9PgogIC5wdXNoRXZlbnQgPSBmdW5jdGlvbiguLi5hcmdzKQooZWxlbSkgPT4KICBldmVudChuYW1lKQogIHN1YnNjcmliZShoYW5kbGVyKQogIHVuc3Vic2NyaWJlKGhhbmRsZXIpCiAgaCA9PgogIGdldCB0ZXh0KCkKICBnZXQgYXR0cmlidXRlcygpCiAgZ2V0TGF5ZXIoKQogIGxvb2t1cCh4cGF0aCwgY3JlYXRlKQogIChvLCBwLCB2KSA9PgogIGdldEJvdW5kcyhwcmVkLCBvcHRzID0ge30pCiAgcHJlZCA9IGUgPT4KICBlID0+CiAgZSA9PgogIGUgPT4KICBlID0+CiAgYiA9PgogIHIgPT4KICBlID0+CiAgbiA9PgogIGdldCBib3VuZHMoKQogIHRyYW5zZm9ybWF0aW9uKCkKICBnZXQgZ2VvbWV0cnkoKQogIG1ha2VHZXR0ZXJTZXR0ZXIgPSAoaykgPT4gKHYpID0+CihwKSA9PgoocHJvcCkgPT4KICAoaykgPT4gKHYpID0+Cihwcm9wKSA9PgoocHJvcCkgPT4KKHByb3ApID0+CiAgKCkgPT4KKGcpID0+CiAgcG9zaXRpb24ob2Zmc2V0ID0gbnVsbCkKICBtYWtlR2V0dGVyU2V0dGVyID0gayA9PiB2ID0+CiAgcHJvcCA9PgogIHN0YXRpYyBpc1JlbGF0aW9uKG5hbWUpCiAgdCA9IChvLCBwLCB2KSA9PgogIHIgPSBlID0+CiAgZ2V0IGNoYWluKCkKICBnZXRQYXJlbnQodGFnTmFtZSkKICBnZXQgc2hlZXQoKQogIGdldCBzaGVldE51bWJlcigpCiAgbmFtZXMoKQooYWNjLCBlbnRyeSkgPT4KICBzdGF0aWMga2V5cyhlbnRpdHkpCiAgc3RhdGljIHZhbHVlcyhlbnRpdHkpCiAgc3RhdGljIGVudHJpZXMoZW50aXR5KQogIHN0YXRpYyB0b09iamVjdChlKQogIGNoaWxkID0+CiAgY2hpbGQgPT4KICBzdGF0aWMgdG9BcnJheShlKQogIHRvU3RyaW5nKCkKKmdldEFsbChwcmVkLCB0cmFuc2Zvcm0gPSBhID0+IGEpCiAgKHYsIHAsIG8pID0+CiAgKHIsIHYsIHAsIG8pID0+CiAgKCkgPT4KKHYsIHAsIG8pID0+CiAgZmluZChwcmVkLCB0cmFuc2Zvcm0gPSBhID0+IGEpCiAgKHYsIHAsIG8pID0+CiAgKHIsIHYsIHAsIG8pID0+CiAgKCkgPT4KICBzZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpCiAgcmVtb3ZlQXR0cmlidXRlKG5hbWUpCiAgZ2V0IHBvcygpCiAgbWFrZUVhZ2xlRWxlbWVudCA9IChvd25lciwgcmVmLCByYXcpID0+AAAAAAAAAADjBQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					45,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/imagePipeline.js",
						"symkeys":
						[
							[
								947,
								989
							],
							[
								3637,
								3665
							],
							[
								3836,
								3859
							],
							[
								3919,
								3942
							],
							[
								4065,
								4094
							],
							[
								4311,
								4335
							],
							[
								4536,
								4563
							],
							[
								4611,
								4616
							],
							[
								4894,
								4923
							],
							[
								5398,
								5416
							]
						],
						"symlist":
						[
							" function ImagePipeline(/*input,*/ config)",
							"function Grayscale(src, dst)",
							"function Norm(src, dst)",
							"function Blur(src, dst)",
							"function EdgeDetect(src, dst)",
							"function Morph(src, dst)",
							"function Contours(src, dst)",
							" h =>",
							"function HoughLines(src, dst)",
							" function(i, n)"
						]
					},
					"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"
				],
				[
					46,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/test-image.js",
						"symkeys":
						[
							[
								1331,
								1346
							],
							[
								1372,
								1393
							],
							[
								1426,
								1454
							],
							[
								1494,
								1514
							],
							[
								1544,
								1556
							],
							[
								1579,
								1589
							],
							[
								1610,
								1631
							],
							[
								1663,
								1688
							],
							[
								1733,
								1754
							],
							[
								1830,
								1851
							],
							[
								1951,
								1960
							],
							[
								1978,
								1988
							],
							[
								2050,
								2059
							],
							[
								2120,
								2128
							],
							[
								2188,
								2196
							],
							[
								3955,
								3977
							],
							[
								4301,
								4305
							],
							[
								4584,
								4597
							],
							[
								4754,
								4773
							],
							[
								4838,
								4881
							],
							[
								5694,
								5716
							],
							[
								5779,
								5785
							],
							[
								5821,
								5825
							],
							[
								6006,
								6027
							],
							[
								6189,
								6218
							]
						],
						"symlist":
						[
							"NTH_POINT: c =>",
							"RADIAL_DISTANCE: c =>",
							"PERPENDICULAR_DISTANCE: c =>",
							"REUMANN_WITKAM: c =>",
							"OPHEIM: c =>",
							"LANG: c =>",
							"DOUGLAS_PEUCKER: c =>",
							"function Hierarchy(array)",
							".index = function(id)",
							".index = function(id)",
							"Hierarchy",
							"parent(id)",
							"child(id)",
							"next(id)",
							"prev(id)",
							"function main(...args)",
							"n =>",
							" () =>",
							" (file, current) =>",
							" (arg, current, options, results) =>",
							"makeRainbow = steps =>",
							"hue =>",
							"h =>",
							"printFlags = flags =>",
							"function (event, x, y, flags)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC3AAAASW1hZ2VQaXBlbGluZSgvKmlucHV0LCovIGNvbmZpZykKR3JheXNjYWxlKHNyYywgZHN0KQpOb3JtKHNyYywgZHN0KQpCbHVyKHNyYywgZHN0KQpFZGdlRGV0ZWN0KHNyYywgZHN0KQpNb3JwaChzcmMsIGRzdCkKQ29udG91cnMoc3JjLCBkc3QpCiAgaCA9PgpIb3VnaExpbmVzKHNyYywgZHN0KQogIGZ1bmN0aW9uKGksIG4pAAAAAAAAAACvAQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					47,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACvAQAATlRIX1BPSU5UOiBjID0+ClJBRElBTF9ESVNUQU5DRTogYyA9PgpQRVJQRU5ESUNVTEFSX0RJU1RBTkNFOiBjID0+ClJFVU1BTk5fV0lUS0FNOiBjID0+Ck9QSEVJTTogYyA9PgpMQU5HOiBjID0+CkRPVUdMQVNfUEVVQ0tFUjogYyA9PgpIaWVyYXJjaHkoYXJyYXkpCiAgLmluZGV4ID0gZnVuY3Rpb24oaWQpCiAgLmluZGV4ID0gZnVuY3Rpb24oaWQpCkhpZXJhcmNoeQogIHBhcmVudChpZCkKICBjaGlsZChpZCkKICBuZXh0KGlkKQogIHByZXYoaWQpCiAgbWFpbiguLi5hcmdzKQogIG4gPT4KICAoKSA9PgogIChmaWxlLCBjdXJyZW50KSA9PgogIChhcmcsIGN1cnJlbnQsIG9wdGlvbnMsIHJlc3VsdHMpID0+CiAgbWFrZVJhaW5ib3cgPSBzdGVwcyA9PgogIGh1ZSA9PgogIGggPT4KICBwcmludEZsYWdzID0gZmxhZ3MgPT4KKGV2ZW50LCB4LCB5LCBmbGFncykAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					48,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-shell.js",
						"symkeys":
						[
							[
								2744,
								2766
							],
							[
								3311,
								3320
							],
							[
								3346,
								3358
							],
							[
								5051,
								5062
							],
							[
								5724,
								5768
							],
							[
								5894,
								5914
							],
							[
								6076,
								6086
							],
							[
								6114,
								6124
							],
							[
								6977,
								6986
							],
							[
								7518,
								7527
							],
							[
								7598,
								7611
							],
							[
								7698,
								7719
							],
							[
								8070,
								8086
							],
							[
								8329,
								8334
							],
							[
								8372,
								8387
							],
							[
								8548,
								8556
							],
							[
								8597,
								8605
							],
							[
								8813,
								8837
							],
							[
								9001,
								9015
							],
							[
								9096,
								9109
							],
							[
								9173,
								9182
							],
							[
								9261,
								9271
							],
							[
								9335,
								9345
							],
							[
								9389,
								9417
							],
							[
								9484,
								9518
							],
							[
								9552,
								9557
							],
							[
								10194,
								10242
							],
							[
								10360,
								10369
							],
							[
								10532,
								10536
							],
							[
								10644,
								10674
							],
							[
								10916,
								10924
							],
							[
								10991,
								10995
							],
							[
								11085,
								11092
							],
							[
								11394,
								11418
							],
							[
								11663,
								11668
							],
							[
								13403,
								13447
							],
							[
								13894,
								13920
							],
							[
								14622,
								14645
							],
							[
								14765,
								14787
							],
							[
								15038,
								15042
							],
							[
								15530,
								15534
							],
							[
								16151,
								16180
							],
							[
								16205,
								16209
							],
							[
								16285,
								16308
							],
							[
								16352,
								16358
							],
							[
								16386,
								16390
							],
							[
								16406,
								16443
							],
							[
								16465,
								16481
							],
							[
								16565,
								16593
							],
							[
								16647,
								16658
							],
							[
								16741,
								16749
							],
							[
								16845,
								16849
							],
							[
								16999,
								17003
							],
							[
								17101,
								17106
							],
							[
								17166,
								17177
							],
							[
								17249,
								17260
							],
							[
								17352,
								17357
							],
							[
								17412,
								17418
							],
							[
								17515,
								17523
							],
							[
								17698,
								17727
							],
							[
								17820,
								17873
							],
							[
								18026,
								18030
							],
							[
								18084,
								18088
							],
							[
								18369,
								18376
							],
							[
								18398,
								18404
							],
							[
								18433,
								18464
							],
							[
								18607,
								18631
							],
							[
								18757,
								18768
							],
							[
								18786,
								18802
							],
							[
								18961,
								18966
							],
							[
								18990,
								18994
							],
							[
								19047,
								19056
							],
							[
								19129,
								19134
							],
							[
								19272,
								19277
							],
							[
								19404,
								19415
							],
							[
								19504,
								19511
							],
							[
								20101,
								20117
							],
							[
								21983,
								22017
							],
							[
								22356,
								22370
							],
							[
								22465,
								22469
							],
							[
								22491,
								22505
							],
							[
								22536,
								22540
							],
							[
								23845,
								23861
							],
							[
								23911,
								23926
							],
							[
								23995,
								24014
							],
							[
								24037,
								24049
							],
							[
								24138,
								24142
							],
							[
								24241,
								24245
							],
							[
								24464,
								24470
							],
							[
								24560,
								24574
							],
							[
								24603,
								24621
							],
							[
								24763,
								24775
							],
							[
								24805,
								24877
							],
							[
								25110,
								25115
							],
							[
								25821,
								25825
							]
						],
						"symlist":
						[
							"function main(...args)",
							" () =>",
							" value =>",
							"toNumber(n)",
							"load(filename, project = globalThis.project)",
							"newProject(filename)",
							"sch: () =>",
							"brd: () =>",
							"quit(arg)",
							"module =>",
							".exit = () =>",
							".debug = (...args) =>",
							".show = value =>",
							"() =>",
							"(item, i, a) =>",
							"entry =>",
							"entry =>",
							"findLastIndex(predicate)",
							"rotateRight(n)",
							"rotateLeft(n)",
							"at(index)",
							"get head()",
							"get tail()",
							"function Terminate(exitCode)",
							"function xml(strings, expressions)",
							" e =>",
							"async function importModule(moduleName, ...args)",
							"module =>",
							"e =>",
							"function UpdateMeasures(board)",
							"lines =>",
							"e =>",
							"line =>",
							"function AlignItem(item)",
							"tr =>",
							"function AlignAll(doc = globalThis.document)",
							"function fixValue(element)",
							"function fixValues(doc)",
							"function coordMap(doc)",
							"p =>",
							"t =>",
							"function GetPolygons(d = doc)",
							"e =>",
							"function FindPolygons()",
							"doc =>",
							"e =>",
							"function RemovePolygons(p = polygons)",
							"([doc, list]) =>",
							"function GetNames(doc, pred)",
							"pred = e =>",
							"sheet =>",
							"e =>",
							"e =>",
							" e =>",
							"([v, p]) =>",
							"([v, p]) =>",
							"() =>",
							"doc =>",
							"sheet =>",
							"function GetByName(doc, name)",
							"function CorrelateSchematicAndBoard(schematic, board)",
							"d =>",
							"n =>",
							"name =>",
							"doc =>",
							"function GetSheets(doc_or_proj)",
							"function SaveLibraries()",
							"([n, e]) =>",
							"(acc, [n, e]) =>",
							" e =>",
							"e =>",
							"(a, b) =>",
							"id =>",
							"id =>",
							"([n, e]) =>",
							"name =>",
							"(acc, [n, e]) =>",
							"async function testEagle(filename)",
							"([name, e]) =>",
							"e =>",
							"([name, i]) =>",
							"p =>",
							"(child, i, a) =>",
							"(child2, i2) =>",
							"([index, equal]) =>",
							"([index]) =>",
							"i =>",
							"i =>",
							"doc =>",
							"([file, e]) =>",
							"([file, xpath]) =>",
							" ([k, v]) =>",
							"function Eagle2CircuitJS(doc = project.schematic, scale = 50, sheet = 0)",
							" n =>",
							"e =>"
						]
					},
					"AQAAAAAAAAAAAAAAfAUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					49,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"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"
				],
				[
					50,
					3,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-shell.js",
						"symkeys":
						[
							[
								2744,
								2766
							],
							[
								3311,
								3320
							],
							[
								3346,
								3358
							],
							[
								5051,
								5062
							],
							[
								5724,
								5768
							],
							[
								5894,
								5914
							],
							[
								6076,
								6086
							],
							[
								6114,
								6124
							],
							[
								6977,
								6986
							],
							[
								7518,
								7527
							],
							[
								7598,
								7611
							],
							[
								7698,
								7719
							],
							[
								8070,
								8086
							],
							[
								8329,
								8334
							],
							[
								8372,
								8387
							],
							[
								8548,
								8556
							],
							[
								8597,
								8605
							],
							[
								8813,
								8837
							],
							[
								9001,
								9015
							],
							[
								9096,
								9109
							],
							[
								9173,
								9182
							],
							[
								9261,
								9271
							],
							[
								9335,
								9345
							],
							[
								9389,
								9417
							],
							[
								9484,
								9518
							],
							[
								9552,
								9557
							],
							[
								10194,
								10242
							],
							[
								10360,
								10369
							],
							[
								10532,
								10536
							],
							[
								10644,
								10674
							],
							[
								10916,
								10924
							],
							[
								10991,
								10995
							],
							[
								11085,
								11092
							],
							[
								11394,
								11418
							],
							[
								11663,
								11668
							],
							[
								13403,
								13447
							],
							[
								13894,
								13920
							],
							[
								14622,
								14645
							],
							[
								14765,
								14787
							],
							[
								15038,
								15042
							],
							[
								15530,
								15534
							],
							[
								16151,
								16180
							],
							[
								16205,
								16209
							],
							[
								16285,
								16308
							],
							[
								16352,
								16358
							],
							[
								16386,
								16390
							],
							[
								16406,
								16443
							],
							[
								16465,
								16481
							],
							[
								16565,
								16593
							],
							[
								16647,
								16658
							],
							[
								16741,
								16749
							],
							[
								16845,
								16849
							],
							[
								16999,
								17003
							],
							[
								17101,
								17106
							],
							[
								17166,
								17177
							],
							[
								17249,
								17260
							],
							[
								17352,
								17357
							],
							[
								17412,
								17418
							],
							[
								17515,
								17523
							],
							[
								17698,
								17727
							],
							[
								17820,
								17873
							],
							[
								18026,
								18030
							],
							[
								18084,
								18088
							],
							[
								18369,
								18376
							],
							[
								18398,
								18404
							],
							[
								18433,
								18464
							],
							[
								18607,
								18631
							],
							[
								18757,
								18768
							],
							[
								18786,
								18802
							],
							[
								18961,
								18966
							],
							[
								18990,
								18994
							],
							[
								19047,
								19056
							],
							[
								19129,
								19134
							],
							[
								19272,
								19277
							],
							[
								19404,
								19415
							],
							[
								19504,
								19511
							],
							[
								20101,
								20117
							],
							[
								21983,
								22017
							],
							[
								22356,
								22370
							],
							[
								22465,
								22469
							],
							[
								22491,
								22505
							],
							[
								22536,
								22540
							],
							[
								23845,
								23861
							],
							[
								23911,
								23926
							],
							[
								23995,
								24014
							],
							[
								24037,
								24049
							],
							[
								24138,
								24142
							],
							[
								24241,
								24245
							],
							[
								24464,
								24470
							],
							[
								24560,
								24574
							],
							[
								24603,
								24621
							],
							[
								24763,
								24775
							],
							[
								24805,
								24877
							],
							[
								25110,
								25115
							],
							[
								25821,
								25825
							]
						],
						"symlist":
						[
							"function main(...args)",
							" () =>",
							" value =>",
							"toNumber(n)",
							"load(filename, project = globalThis.project)",
							"newProject(filename)",
							"sch: () =>",
							"brd: () =>",
							"quit(arg)",
							"module =>",
							".exit = () =>",
							".debug = (...args) =>",
							".show = value =>",
							"() =>",
							"(item, i, a) =>",
							"entry =>",
							"entry =>",
							"findLastIndex(predicate)",
							"rotateRight(n)",
							"rotateLeft(n)",
							"at(index)",
							"get head()",
							"get tail()",
							"function Terminate(exitCode)",
							"function xml(strings, expressions)",
							" e =>",
							"async function importModule(moduleName, ...args)",
							"module =>",
							"e =>",
							"function UpdateMeasures(board)",
							"lines =>",
							"e =>",
							"line =>",
							"function AlignItem(item)",
							"tr =>",
							"function AlignAll(doc = globalThis.document)",
							"function fixValue(element)",
							"function fixValues(doc)",
							"function coordMap(doc)",
							"p =>",
							"t =>",
							"function GetPolygons(d = doc)",
							"e =>",
							"function FindPolygons()",
							"doc =>",
							"e =>",
							"function RemovePolygons(p = polygons)",
							"([doc, list]) =>",
							"function GetNames(doc, pred)",
							"pred = e =>",
							"sheet =>",
							"e =>",
							"e =>",
							" e =>",
							"([v, p]) =>",
							"([v, p]) =>",
							"() =>",
							"doc =>",
							"sheet =>",
							"function GetByName(doc, name)",
							"function CorrelateSchematicAndBoard(schematic, board)",
							"d =>",
							"n =>",
							"name =>",
							"doc =>",
							"function GetSheets(doc_or_proj)",
							"function SaveLibraries()",
							"([n, e]) =>",
							"(acc, [n, e]) =>",
							" e =>",
							"e =>",
							"(a, b) =>",
							"id =>",
							"id =>",
							"([n, e]) =>",
							"name =>",
							"(acc, [n, e]) =>",
							"async function testEagle(filename)",
							"([name, e]) =>",
							"e =>",
							"([name, i]) =>",
							"p =>",
							"(child, i, a) =>",
							"(child2, i2) =>",
							"([index, equal]) =>",
							"([index]) =>",
							"i =>",
							"i =>",
							"doc =>",
							"([file, e]) =>",
							"([file, xpath]) =>",
							" ([k, v]) =>",
							"function Eagle2CircuitJS(doc = project.schematic, scale = 50, sheet = 0)",
							" n =>",
							"e =>"
						]
					},
					"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KG4pCiAgcm90YXRlTGVmdChuKQogIGF0KGluZGV4KQogIGdldCBoZWFkKCkKICBnZXQgdGFpbCgpClRlcm1pbmF0ZShleGl0Q29kZSkKICB4bWwoc3RyaW5ncywgZXhwcmVzc2lvbnMpCiAgZSA9PgogIGltcG9ydE1vZHVsZShtb2R1bGVOYW1lLCAuLi5hcmdzKQogIG1vZHVsZSA9PgogIGUgPT4KVXBkYXRlTWVhc3VyZXMoYm9hcmQpCiAgbGluZXMgPT4KICBlID0+CiAgbGluZSA9PgpBbGlnbkl0ZW0oaXRlbSkKICB0ciA9PgpBbGlnbkFsbChkb2MgPSBnbG9iYWxUaGlzLmRvY3VtZW50KQogIGZpeFZhbHVlKGVsZW1lbnQpCiAgZml4VmFsdWVzKGRvYykKICBjb29yZE1hcChkb2MpCiAgcCA9PgogIHQgPT4KR2V0UG9seWdvbnMoZCA9IGRvYykKICBlID0+CkZpbmRQb2x5Z29ucygpCiAgZG9jID0+CiAgZSA9PgpSZW1vdmVQb2x5Z29ucyhwID0gcG9seWdvbnMpCihbZG9jLCBsaXN0XSkgPT4KR2V0TmFtZXMoZG9jLCBwcmVkKQogIHByZWQgPSBlID0+CiAgc2hlZXQgPT4KICBlID0+CiAgZSA9PgogIGUgPT4KKFt2LCBwXSkgPT4KKFt2LCBwXSkgPT4KKCkgPT4KICBkb2MgPT4KICBzaGVldCA9PgpHZXRCeU5hbWUoZG9jLCBuYW1lKQpDb3JyZWxhdGVTY2hlbWF0aWNBbmRCb2FyZChzY2hlbWF0aWMsIGJvYXJkKQogIGQgPT4KICBuID0+CiAgbmFtZSA9PgogIGRvYyA9PgpHZXRTaGVldHMoZG9jX29yX3Byb2opClNhdmVMaWJyYXJpZXMoKQooW24sIGVdKSA9PgooYWNjLCBbbiwgZV0pID0+CiAgZSA9PgogIGUgPT4KKGEsIGIpID0+CiAgaWQgPT4KICBpZCA9PgooW24sIGVdKSA9PgogIG5hbWUgPT4KKGFjYywgW24sIGVdKSA9PgogIHRlc3RFYWdsZShmaWxlbmFtZSkKKFtuYW1lLCBlXSkgPT4KICBlID0+CihbbmFtZSwgaV0pID0+CiAgcCA9PgooY2hpbGQsIGksIGEpID0+CihjaGlsZDIsIGkyKSA9PgooW2luZGV4LCBlcXVhbF0pID0+CihbaW5kZXhdKSA9PgogIGkgPT4KICBpID0+CiAgZG9jID0+CihbZmlsZSwgZV0pID0+CihbZmlsZSwgeHBhdGhdKSA9PgogIChbaywgdl0pID0+CkVhZ2xlMkNpcmN1aXRKUyhkb2MgPSBwcm9qZWN0LnNjaGVtYXRpYywgc2NhbGUgPSA1MCwgc2hlZXQgPSAwKQogIG4gPT4KICBlID0+AAAAAAAAAAB8BQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					51,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"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"
				],
				[
					52,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-shell.js",
						"symkeys":
						[
							[
								2753,
								2775
							],
							[
								3320,
								3329
							],
							[
								3355,
								3367
							],
							[
								5060,
								5071
							],
							[
								5733,
								5777
							],
							[
								5903,
								5923
							],
							[
								6085,
								6095
							],
							[
								6123,
								6133
							],
							[
								6986,
								6995
							],
							[
								7527,
								7536
							],
							[
								7607,
								7620
							],
							[
								7707,
								7728
							],
							[
								8079,
								8095
							],
							[
								8338,
								8343
							],
							[
								8381,
								8396
							],
							[
								8557,
								8565
							],
							[
								8606,
								8614
							],
							[
								8822,
								8846
							],
							[
								9010,
								9024
							],
							[
								9105,
								9118
							],
							[
								9182,
								9191
							],
							[
								9270,
								9280
							],
							[
								9344,
								9354
							],
							[
								9398,
								9426
							],
							[
								9493,
								9527
							],
							[
								9561,
								9566
							],
							[
								10203,
								10251
							],
							[
								10369,
								10378
							],
							[
								10541,
								10545
							],
							[
								10653,
								10683
							],
							[
								10925,
								10933
							],
							[
								11000,
								11004
							],
							[
								11094,
								11101
							],
							[
								11403,
								11427
							],
							[
								11672,
								11677
							],
							[
								13412,
								13456
							],
							[
								13903,
								13929
							],
							[
								14631,
								14654
							],
							[
								14774,
								14796
							],
							[
								15047,
								15051
							],
							[
								15539,
								15543
							],
							[
								16160,
								16189
							],
							[
								16214,
								16218
							],
							[
								16294,
								16317
							],
							[
								16361,
								16367
							],
							[
								16395,
								16399
							],
							[
								16415,
								16452
							],
							[
								16474,
								16490
							],
							[
								16574,
								16602
							],
							[
								16656,
								16667
							],
							[
								16750,
								16758
							],
							[
								16854,
								16858
							],
							[
								17008,
								17012
							],
							[
								17110,
								17115
							],
							[
								17175,
								17186
							],
							[
								17258,
								17269
							],
							[
								17361,
								17366
							],
							[
								17421,
								17427
							],
							[
								17524,
								17532
							],
							[
								17707,
								17736
							],
							[
								17829,
								17882
							],
							[
								18035,
								18039
							],
							[
								18093,
								18097
							],
							[
								18378,
								18385
							],
							[
								18407,
								18413
							],
							[
								18442,
								18473
							],
							[
								18616,
								18640
							],
							[
								18766,
								18777
							],
							[
								18795,
								18811
							],
							[
								18970,
								18975
							],
							[
								18999,
								19003
							],
							[
								19056,
								19065
							],
							[
								19138,
								19143
							],
							[
								19281,
								19286
							],
							[
								19413,
								19424
							],
							[
								19513,
								19520
							],
							[
								20110,
								20126
							],
							[
								21992,
								22026
							],
							[
								22365,
								22379
							],
							[
								22474,
								22478
							],
							[
								22500,
								22514
							],
							[
								22545,
								22549
							],
							[
								23854,
								23870
							],
							[
								23920,
								23935
							],
							[
								24004,
								24023
							],
							[
								24046,
								24058
							],
							[
								24147,
								24151
							],
							[
								24250,
								24254
							],
							[
								24473,
								24479
							],
							[
								24569,
								24583
							],
							[
								24612,
								24630
							],
							[
								24772,
								24784
							],
							[
								24814,
								24886
							],
							[
								25119,
								25124
							],
							[
								25830,
								25834
							]
						],
						"symlist":
						[
							"function main(...args)",
							" () =>",
							" value =>",
							"toNumber(n)",
							"load(filename, project = globalThis.project)",
							"newProject(filename)",
							"sch: () =>",
							"brd: () =>",
							"quit(arg)",
							"module =>",
							".exit = () =>",
							".debug = (...args) =>",
							".show = value =>",
							"() =>",
							"(item, i, a) =>",
							"entry =>",
							"entry =>",
							"findLastIndex(predicate)",
							"rotateRight(n)",
							"rotateLeft(n)",
							"at(index)",
							"get head()",
							"get tail()",
							"function Terminate(exitCode)",
							"function xml(strings, expressions)",
							" e =>",
							"async function importModule(moduleName, ...args)",
							"module =>",
							"e =>",
							"function UpdateMeasures(board)",
							"lines =>",
							"e =>",
							"line =>",
							"function AlignItem(item)",
							"tr =>",
							"function AlignAll(doc = globalThis.document)",
							"function fixValue(element)",
							"function fixValues(doc)",
							"function coordMap(doc)",
							"p =>",
							"t =>",
							"function GetPolygons(d = doc)",
							"e =>",
							"function FindPolygons()",
							"doc =>",
							"e =>",
							"function RemovePolygons(p = polygons)",
							"([doc, list]) =>",
							"function GetNames(doc, pred)",
							"pred = e =>",
							"sheet =>",
							"e =>",
							"e =>",
							" e =>",
							"([v, p]) =>",
							"([v, p]) =>",
							"() =>",
							"doc =>",
							"sheet =>",
							"function GetByName(doc, name)",
							"function CorrelateSchematicAndBoard(schematic, board)",
							"d =>",
							"n =>",
							"name =>",
							"doc =>",
							"function GetSheets(doc_or_proj)",
							"function SaveLibraries()",
							"([n, e]) =>",
							"(acc, [n, e]) =>",
							" e =>",
							"e =>",
							"(a, b) =>",
							"id =>",
							"id =>",
							"([n, e]) =>",
							"name =>",
							"(acc, [n, e]) =>",
							"async function testEagle(filename)",
							"([name, e]) =>",
							"e =>",
							"([name, i]) =>",
							"p =>",
							"(child, i, a) =>",
							"(child2, i2) =>",
							"([index, equal]) =>",
							"([index]) =>",
							"i =>",
							"i =>",
							"doc =>",
							"([file, e]) =>",
							"([file, xpath]) =>",
							" ([k, v]) =>",
							"function Eagle2CircuitJS(doc = project.schematic, scale = 50, sheet = 0)",
							" n =>",
							"e =>"
						]
					},
					"AQAAAAAAAAAAAAAAfAUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					53,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-shell.js",
						"symkeys":
						[
							[
								2753,
								2775
							],
							[
								3320,
								3329
							],
							[
								3355,
								3367
							],
							[
								5085,
								5096
							],
							[
								5758,
								5802
							],
							[
								5928,
								5948
							],
							[
								6110,
								6120
							],
							[
								6148,
								6158
							],
							[
								7011,
								7020
							],
							[
								7552,
								7561
							],
							[
								7632,
								7645
							],
							[
								7732,
								7753
							],
							[
								8104,
								8120
							],
							[
								8363,
								8368
							],
							[
								8406,
								8421
							],
							[
								8582,
								8590
							],
							[
								8631,
								8639
							],
							[
								8847,
								8871
							],
							[
								9035,
								9049
							],
							[
								9130,
								9143
							],
							[
								9207,
								9216
							],
							[
								9295,
								9305
							],
							[
								9369,
								9379
							],
							[
								9423,
								9451
							],
							[
								9518,
								9552
							],
							[
								9586,
								9591
							],
							[
								10228,
								10276
							],
							[
								10394,
								10403
							],
							[
								10566,
								10570
							],
							[
								10678,
								10708
							],
							[
								10950,
								10958
							],
							[
								11025,
								11029
							],
							[
								11119,
								11126
							],
							[
								11428,
								11452
							],
							[
								11697,
								11702
							],
							[
								13437,
								13481
							],
							[
								13928,
								13954
							],
							[
								14656,
								14679
							],
							[
								14799,
								14821
							],
							[
								15072,
								15076
							],
							[
								15564,
								15568
							],
							[
								16185,
								16214
							],
							[
								16239,
								16243
							],
							[
								16319,
								16342
							],
							[
								16386,
								16392
							],
							[
								16420,
								16424
							],
							[
								16440,
								16477
							],
							[
								16499,
								16515
							],
							[
								16599,
								16627
							],
							[
								16681,
								16692
							],
							[
								16775,
								16783
							],
							[
								16879,
								16883
							],
							[
								17033,
								17037
							],
							[
								17135,
								17140
							],
							[
								17200,
								17211
							],
							[
								17283,
								17294
							],
							[
								17386,
								17391
							],
							[
								17446,
								17452
							],
							[
								17549,
								17557
							],
							[
								17732,
								17761
							],
							[
								17854,
								17907
							],
							[
								18060,
								18064
							],
							[
								18118,
								18122
							],
							[
								18403,
								18410
							],
							[
								18432,
								18438
							],
							[
								18467,
								18498
							],
							[
								18641,
								18665
							],
							[
								18791,
								18802
							],
							[
								18820,
								18836
							],
							[
								18995,
								19000
							],
							[
								19024,
								19028
							],
							[
								19081,
								19090
							],
							[
								19163,
								19168
							],
							[
								19306,
								19311
							],
							[
								19438,
								19449
							],
							[
								19538,
								19545
							],
							[
								20135,
								20151
							],
							[
								22017,
								22051
							],
							[
								22390,
								22404
							],
							[
								22499,
								22503
							],
							[
								22525,
								22539
							],
							[
								22570,
								22574
							],
							[
								23879,
								23895
							],
							[
								23945,
								23960
							],
							[
								24029,
								24048
							],
							[
								24071,
								24083
							],
							[
								24172,
								24176
							],
							[
								24275,
								24279
							],
							[
								24498,
								24504
							],
							[
								24594,
								24608
							],
							[
								24637,
								24655
							],
							[
								24797,
								24809
							],
							[
								24839,
								24911
							],
							[
								25144,
								25149
							],
							[
								25855,
								25859
							]
						],
						"symlist":
						[
							"function main(...args)",
							" () =>",
							" value =>",
							"toNumber(n)",
							"load(filename, project = globalThis.project)",
							"newProject(filename)",
							"sch: () =>",
							"brd: () =>",
							"quit(arg)",
							"module =>",
							".exit = () =>",
							".debug = (...args) =>",
							".show = value =>",
							"() =>",
							"(item, i, a) =>",
							"entry =>",
							"entry =>",
							"findLastIndex(predicate)",
							"rotateRight(n)",
							"rotateLeft(n)",
							"at(index)",
							"get head()",
							"get tail()",
							"function Terminate(exitCode)",
							"function xml(strings, expressions)",
							" e =>",
							"async function importModule(moduleName, ...args)",
							"module =>",
							"e =>",
							"function UpdateMeasures(board)",
							"lines =>",
							"e =>",
							"line =>",
							"function AlignItem(item)",
							"tr =>",
							"function AlignAll(doc = globalThis.document)",
							"function fixValue(element)",
							"function fixValues(doc)",
							"function coordMap(doc)",
							"p =>",
							"t =>",
							"function GetPolygons(d = doc)",
							"e =>",
							"function FindPolygons()",
							"doc =>",
							"e =>",
							"function RemovePolygons(p = polygons)",
							"([doc, list]) =>",
							"function GetNames(doc, pred)",
							"pred = e =>",
							"sheet =>",
							"e =>",
							"e =>",
							" e =>",
							"([v, p]) =>",
							"([v, p]) =>",
							"() =>",
							"doc =>",
							"sheet =>",
							"function GetByName(doc, name)",
							"function CorrelateSchematicAndBoard(schematic, board)",
							"d =>",
							"n =>",
							"name =>",
							"doc =>",
							"function GetSheets(doc_or_proj)",
							"function SaveLibraries()",
							"([n, e]) =>",
							"(acc, [n, e]) =>",
							" e =>",
							"e =>",
							"(a, b) =>",
							"id =>",
							"id =>",
							"([n, e]) =>",
							"name =>",
							"(acc, [n, e]) =>",
							"async function testEagle(filename)",
							"([name, e]) =>",
							"e =>",
							"([name, i]) =>",
							"p =>",
							"(child, i, a) =>",
							"(child2, i2) =>",
							"([index, equal]) =>",
							"([index]) =>",
							"i =>",
							"i =>",
							"doc =>",
							"([file, e]) =>",
							"([file, xpath]) =>",
							" ([k, v]) =>",
							"function Eagle2CircuitJS(doc = project.schematic, scale = 50, sheet = 0)",
							" n =>",
							"e =>"
						]
					},
					"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"
				],
				[
					54,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"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"
				],
				[
					55,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-shell.js",
						"symkeys":
						[
							[
								2753,
								2775
							],
							[
								3320,
								3329
							],
							[
								3355,
								3367
							],
							[
								5085,
								5096
							],
							[
								5758,
								5802
							],
							[
								5928,
								5948
							],
							[
								6110,
								6120
							],
							[
								6148,
								6158
							],
							[
								7011,
								7020
							],
							[
								7552,
								7561
							],
							[
								7632,
								7645
							],
							[
								7732,
								7753
							],
							[
								8104,
								8120
							],
							[
								8363,
								8368
							],
							[
								8406,
								8421
							],
							[
								8582,
								8590
							],
							[
								8631,
								8639
							],
							[
								8847,
								8871
							],
							[
								9035,
								9049
							],
							[
								9130,
								9143
							],
							[
								9207,
								9216
							],
							[
								9295,
								9305
							],
							[
								9369,
								9379
							],
							[
								9423,
								9451
							],
							[
								9518,
								9552
							],
							[
								9586,
								9591
							],
							[
								10228,
								10276
							],
							[
								10394,
								10403
							],
							[
								10566,
								10570
							],
							[
								10678,
								10708
							],
							[
								10950,
								10958
							],
							[
								11025,
								11029
							],
							[
								11119,
								11126
							],
							[
								11428,
								11452
							],
							[
								11697,
								11702
							],
							[
								13437,
								13481
							],
							[
								13928,
								13954
							],
							[
								14656,
								14679
							],
							[
								14799,
								14821
							],
							[
								15072,
								15076
							],
							[
								15564,
								15568
							],
							[
								16185,
								16214
							],
							[
								16239,
								16243
							],
							[
								16319,
								16342
							],
							[
								16386,
								16392
							],
							[
								16420,
								16424
							],
							[
								16440,
								16477
							],
							[
								16499,
								16515
							],
							[
								16599,
								16627
							],
							[
								16681,
								16692
							],
							[
								16775,
								16783
							],
							[
								16879,
								16883
							],
							[
								17033,
								17037
							],
							[
								17135,
								17140
							],
							[
								17200,
								17211
							],
							[
								17283,
								17294
							],
							[
								17386,
								17391
							],
							[
								17446,
								17452
							],
							[
								17549,
								17557
							],
							[
								17732,
								17761
							],
							[
								17854,
								17907
							],
							[
								18060,
								18064
							],
							[
								18118,
								18122
							],
							[
								18403,
								18410
							],
							[
								18432,
								18438
							],
							[
								18467,
								18498
							],
							[
								18641,
								18665
							],
							[
								18791,
								18802
							],
							[
								18820,
								18836
							],
							[
								18995,
								19000
							],
							[
								19024,
								19028
							],
							[
								19081,
								19090
							],
							[
								19163,
								19168
							],
							[
								19306,
								19311
							],
							[
								19438,
								19449
							],
							[
								19538,
								19545
							],
							[
								20135,
								20151
							],
							[
								22017,
								22051
							],
							[
								22390,
								22404
							],
							[
								22499,
								22503
							],
							[
								22525,
								22539
							],
							[
								22570,
								22574
							],
							[
								23879,
								23895
							],
							[
								23945,
								23960
							],
							[
								24029,
								24048
							],
							[
								24071,
								24083
							],
							[
								24172,
								24176
							],
							[
								24275,
								24279
							],
							[
								24498,
								24504
							],
							[
								24594,
								24608
							],
							[
								24637,
								24655
							],
							[
								24797,
								24809
							],
							[
								24839,
								24911
							],
							[
								25144,
								25149
							],
							[
								25855,
								25859
							]
						],
						"symlist":
						[
							"function main(...args)",
							" () =>",
							" value =>",
							"toNumber(n)",
							"load(filename, project = globalThis.project)",
							"newProject(filename)",
							"sch: () =>",
							"brd: () =>",
							"quit(arg)",
							"module =>",
							".exit = () =>",
							".debug = (...args) =>",
							".show = value =>",
							"() =>",
							"(item, i, a) =>",
							"entry =>",
							"entry =>",
							"findLastIndex(predicate)",
							"rotateRight(n)",
							"rotateLeft(n)",
							"at(index)",
							"get head()",
							"get tail()",
							"function Terminate(exitCode)",
							"function xml(strings, expressions)",
							" e =>",
							"async function importModule(moduleName, ...args)",
							"module =>",
							"e =>",
							"function UpdateMeasures(board)",
							"lines =>",
							"e =>",
							"line =>",
							"function AlignItem(item)",
							"tr =>",
							"function AlignAll(doc = globalThis.document)",
							"function fixValue(element)",
							"function fixValues(doc)",
							"function coordMap(doc)",
							"p =>",
							"t =>",
							"function GetPolygons(d = doc)",
							"e =>",
							"function FindPolygons()",
							"doc =>",
							"e =>",
							"function RemovePolygons(p = polygons)",
							"([doc, list]) =>",
							"function GetNames(doc, pred)",
							"pred = e =>",
							"sheet =>",
							"e =>",
							"e =>",
							" e =>",
							"([v, p]) =>",
							"([v, p]) =>",
							"() =>",
							"doc =>",
							"sheet =>",
							"function GetByName(doc, name)",
							"function CorrelateSchematicAndBoard(schematic, board)",
							"d =>",
							"n =>",
							"name =>",
							"doc =>",
							"function GetSheets(doc_or_proj)",
							"function SaveLibraries()",
							"([n, e]) =>",
							"(acc, [n, e]) =>",
							" e =>",
							"e =>",
							"(a, b) =>",
							"id =>",
							"id =>",
							"([n, e]) =>",
							"name =>",
							"(acc, [n, e]) =>",
							"async function testEagle(filename)",
							"([name, e]) =>",
							"e =>",
							"([name, i]) =>",
							"p =>",
							"(child, i, a) =>",
							"(child2, i2) =>",
							"([index, equal]) =>",
							"([index]) =>",
							"i =>",
							"i =>",
							"doc =>",
							"([file, e]) =>",
							"([file, xpath]) =>",
							" ([k, v]) =>",
							"function Eagle2CircuitJS(doc = project.schematic, scale = 50, sheet = 0)",
							" n =>",
							"e =>"
						]
					},
					"AQAAAAAAAAAAAAAAfAUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					56,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"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"
				],
				[
					57,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-shell.js",
						"symkeys":
						[
							[
								2753,
								2775
							],
							[
								3320,
								3329
							],
							[
								3355,
								3367
							],
							[
								5085,
								5096
							],
							[
								5758,
								5802
							],
							[
								5928,
								5948
							],
							[
								6110,
								6120
							],
							[
								6148,
								6158
							],
							[
								7011,
								7020
							],
							[
								7552,
								7561
							],
							[
								7632,
								7645
							],
							[
								7732,
								7753
							],
							[
								8104,
								8120
							],
							[
								8363,
								8368
							],
							[
								8406,
								8421
							],
							[
								8582,
								8590
							],
							[
								8631,
								8639
							],
							[
								8847,
								8871
							],
							[
								9035,
								9049
							],
							[
								9130,
								9143
							],
							[
								9207,
								9216
							],
							[
								9295,
								9305
							],
							[
								9369,
								9379
							],
							[
								9423,
								9451
							],
							[
								9518,
								9552
							],
							[
								9586,
								9591
							],
							[
								10228,
								10276
							],
							[
								10394,
								10403
							],
							[
								10566,
								10570
							],
							[
								10678,
								10708
							],
							[
								10950,
								10958
							],
							[
								11025,
								11029
							],
							[
								11119,
								11126
							],
							[
								11428,
								11452
							],
							[
								11697,
								11702
							],
							[
								13437,
								13481
							],
							[
								13928,
								13954
							],
							[
								14656,
								14679
							],
							[
								14799,
								14821
							],
							[
								15072,
								15076
							],
							[
								15564,
								15568
							],
							[
								16185,
								16214
							],
							[
								16239,
								16243
							],
							[
								16319,
								16342
							],
							[
								16386,
								16392
							],
							[
								16420,
								16424
							],
							[
								16440,
								16477
							],
							[
								16499,
								16515
							],
							[
								16599,
								16627
							],
							[
								16681,
								16692
							],
							[
								16775,
								16783
							],
							[
								16879,
								16883
							],
							[
								17033,
								17037
							],
							[
								17135,
								17140
							],
							[
								17200,
								17211
							],
							[
								17283,
								17294
							],
							[
								17386,
								17391
							],
							[
								17446,
								17452
							],
							[
								17549,
								17557
							],
							[
								17732,
								17761
							],
							[
								17854,
								17907
							],
							[
								18060,
								18064
							],
							[
								18118,
								18122
							],
							[
								18403,
								18410
							],
							[
								18432,
								18438
							],
							[
								18467,
								18498
							],
							[
								18641,
								18665
							],
							[
								18791,
								18802
							],
							[
								18820,
								18836
							],
							[
								18995,
								19000
							],
							[
								19024,
								19028
							],
							[
								19081,
								19090
							],
							[
								19163,
								19168
							],
							[
								19306,
								19311
							],
							[
								19438,
								19449
							],
							[
								19538,
								19545
							],
							[
								20135,
								20151
							],
							[
								22017,
								22051
							],
							[
								22390,
								22404
							],
							[
								22499,
								22503
							],
							[
								22525,
								22539
							],
							[
								22570,
								22574
							],
							[
								23879,
								23895
							],
							[
								23945,
								23960
							],
							[
								24029,
								24048
							],
							[
								24071,
								24083
							],
							[
								24172,
								24176
							],
							[
								24275,
								24279
							],
							[
								24498,
								24504
							],
							[
								24594,
								24608
							],
							[
								24637,
								24655
							],
							[
								24797,
								24809
							],
							[
								24839,
								24911
							],
							[
								25144,
								25149
							],
							[
								25855,
								25859
							]
						],
						"symlist":
						[
							"function main(...args)",
							" () =>",
							" value =>",
							"toNumber(n)",
							"load(filename, project = globalThis.project)",
							"newProject(filename)",
							"sch: () =>",
							"brd: () =>",
							"quit(arg)",
							"module =>",
							".exit = () =>",
							".debug = (...args) =>",
							".show = value =>",
							"() =>",
							"(item, i, a) =>",
							"entry =>",
							"entry =>",
							"findLastIndex(predicate)",
							"rotateRight(n)",
							"rotateLeft(n)",
							"at(index)",
							"get head()",
							"get tail()",
							"function Terminate(exitCode)",
							"function xml(strings, expressions)",
							" e =>",
							"async function importModule(moduleName, ...args)",
							"module =>",
							"e =>",
							"function UpdateMeasures(board)",
							"lines =>",
							"e =>",
							"line =>",
							"function AlignItem(item)",
							"tr =>",
							"function AlignAll(doc = globalThis.document)",
							"function fixValue(element)",
							"function fixValues(doc)",
							"function coordMap(doc)",
							"p =>",
							"t =>",
							"function GetPolygons(d = doc)",
							"e =>",
							"function FindPolygons()",
							"doc =>",
							"e =>",
							"function RemovePolygons(p = polygons)",
							"([doc, list]) =>",
							"function GetNames(doc, pred)",
							"pred = e =>",
							"sheet =>",
							"e =>",
							"e =>",
							" e =>",
							"([v, p]) =>",
							"([v, p]) =>",
							"() =>",
							"doc =>",
							"sheet =>",
							"function GetByName(doc, name)",
							"function CorrelateSchematicAndBoard(schematic, board)",
							"d =>",
							"n =>",
							"name =>",
							"doc =>",
							"function GetSheets(doc_or_proj)",
							"function SaveLibraries()",
							"([n, e]) =>",
							"(acc, [n, e]) =>",
							" e =>",
							"e =>",
							"(a, b) =>",
							"id =>",
							"id =>",
							"([n, e]) =>",
							"name =>",
							"(acc, [n, e]) =>",
							"async function testEagle(filename)",
							"([name, e]) =>",
							"e =>",
							"([name, i]) =>",
							"p =>",
							"(child, i, a) =>",
							"(child2, i2) =>",
							"([index, equal]) =>",
							"([index]) =>",
							"i =>",
							"i =>",
							"doc =>",
							"([file, e]) =>",
							"([file, xpath]) =>",
							" ([k, v]) =>",
							"function Eagle2CircuitJS(doc = project.schematic, scale = 50, sheet = 0)",
							" n =>",
							"e =>"
						]
					},
					"AQAAAAAAAAAAAAAAfAUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					58,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/eagle-shell.js",
						"symkeys":
						[
							[
								2762,
								2784
							],
							[
								3329,
								3338
							],
							[
								3364,
								3376
							],
							[
								5094,
								5105
							],
							[
								5767,
								5811
							],
							[
								5937,
								5957
							],
							[
								6119,
								6129
							],
							[
								6157,
								6167
							],
							[
								7020,
								7029
							],
							[
								7561,
								7570
							],
							[
								7641,
								7654
							],
							[
								7741,
								7762
							],
							[
								8113,
								8129
							],
							[
								8372,
								8377
							],
							[
								8415,
								8430
							],
							[
								8591,
								8599
							],
							[
								8640,
								8648
							],
							[
								8856,
								8880
							],
							[
								9044,
								9058
							],
							[
								9139,
								9152
							],
							[
								9216,
								9225
							],
							[
								9304,
								9314
							],
							[
								9378,
								9388
							],
							[
								9432,
								9460
							],
							[
								9527,
								9561
							],
							[
								9595,
								9600
							],
							[
								10237,
								10285
							],
							[
								10403,
								10412
							],
							[
								10575,
								10579
							],
							[
								10687,
								10717
							],
							[
								10959,
								10967
							],
							[
								11034,
								11038
							],
							[
								11128,
								11135
							],
							[
								11437,
								11461
							],
							[
								11706,
								11711
							],
							[
								13446,
								13490
							],
							[
								13937,
								13963
							],
							[
								14665,
								14688
							],
							[
								14808,
								14830
							],
							[
								15081,
								15085
							],
							[
								15573,
								15577
							],
							[
								16194,
								16223
							],
							[
								16248,
								16252
							],
							[
								16328,
								16351
							],
							[
								16395,
								16401
							],
							[
								16429,
								16433
							],
							[
								16449,
								16486
							],
							[
								16508,
								16524
							],
							[
								16608,
								16636
							],
							[
								16690,
								16701
							],
							[
								16784,
								16792
							],
							[
								16888,
								16892
							],
							[
								17042,
								17046
							],
							[
								17144,
								17149
							],
							[
								17209,
								17220
							],
							[
								17292,
								17303
							],
							[
								17395,
								17400
							],
							[
								17455,
								17461
							],
							[
								17558,
								17566
							],
							[
								17741,
								17770
							],
							[
								17863,
								17916
							],
							[
								18069,
								18073
							],
							[
								18127,
								18131
							],
							[
								18412,
								18419
							],
							[
								18441,
								18447
							],
							[
								18476,
								18507
							],
							[
								18650,
								18674
							],
							[
								18800,
								18811
							],
							[
								18829,
								18845
							],
							[
								19004,
								19009
							],
							[
								19033,
								19037
							],
							[
								19090,
								19099
							],
							[
								19172,
								19177
							],
							[
								19315,
								19320
							],
							[
								19447,
								19458
							],
							[
								19547,
								19554
							],
							[
								20144,
								20160
							],
							[
								22026,
								22060
							],
							[
								22399,
								22413
							],
							[
								22508,
								22512
							],
							[
								22534,
								22548
							],
							[
								22579,
								22583
							],
							[
								23888,
								23904
							],
							[
								23954,
								23969
							],
							[
								24038,
								24057
							],
							[
								24080,
								24092
							],
							[
								24181,
								24185
							],
							[
								24284,
								24288
							],
							[
								24507,
								24513
							],
							[
								24603,
								24617
							],
							[
								24646,
								24664
							],
							[
								24806,
								24818
							],
							[
								24848,
								24920
							],
							[
								25153,
								25158
							],
							[
								25864,
								25868
							]
						],
						"symlist":
						[
							"function main(...args)",
							" () =>",
							" value =>",
							"toNumber(n)",
							"load(filename, project = globalThis.project)",
							"newProject(filename)",
							"sch: () =>",
							"brd: () =>",
							"quit(arg)",
							"module =>",
							".exit = () =>",
							".debug = (...args) =>",
							".show = value =>",
							"() =>",
							"(item, i, a) =>",
							"entry =>",
							"entry =>",
							"findLastIndex(predicate)",
							"rotateRight(n)",
							"rotateLeft(n)",
							"at(index)",
							"get head()",
							"get tail()",
							"function Terminate(exitCode)",
							"function xml(strings, expressions)",
							" e =>",
							"async function importModule(moduleName, ...args)",
							"module =>",
							"e =>",
							"function UpdateMeasures(board)",
							"lines =>",
							"e =>",
							"line =>",
							"function AlignItem(item)",
							"tr =>",
							"function AlignAll(doc = globalThis.document)",
							"function fixValue(element)",
							"function fixValues(doc)",
							"function coordMap(doc)",
							"p =>",
							"t =>",
							"function GetPolygons(d = doc)",
							"e =>",
							"function FindPolygons()",
							"doc =>",
							"e =>",
							"function RemovePolygons(p = polygons)",
							"([doc, list]) =>",
							"function GetNames(doc, pred)",
							"pred = e =>",
							"sheet =>",
							"e =>",
							"e =>",
							" e =>",
							"([v, p]) =>",
							"([v, p]) =>",
							"() =>",
							"doc =>",
							"sheet =>",
							"function GetByName(doc, name)",
							"function CorrelateSchematicAndBoard(schematic, board)",
							"d =>",
							"n =>",
							"name =>",
							"doc =>",
							"function GetSheets(doc_or_proj)",
							"function SaveLibraries()",
							"([n, e]) =>",
							"(acc, [n, e]) =>",
							" e =>",
							"e =>",
							"(a, b) =>",
							"id =>",
							"id =>",
							"([n, e]) =>",
							"name =>",
							"(acc, [n, e]) =>",
							"async function testEagle(filename)",
							"([name, e]) =>",
							"e =>",
							"([name, i]) =>",
							"p =>",
							"(child, i, a) =>",
							"(child2, i2) =>",
							"([index, equal]) =>",
							"([index]) =>",
							"i =>",
							"i =>",
							"doc =>",
							"([file, e]) =>",
							"([file, xpath]) =>",
							" ([k, v]) =>",
							"function Eagle2CircuitJS(doc = project.schematic, scale = 50, sheet = 0)",
							" n =>",
							"e =>"
						]
					},
					"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ICBhdChpbmRleCkKICBnZXQgaGVhZCgpCiAgZ2V0IHRhaWwoKQpUZXJtaW5hdGUoZXhpdENvZGUpCiAgeG1sKHN0cmluZ3MsIGV4cHJlc3Npb25zKQogIGUgPT4KICBpbXBvcnRNb2R1bGUobW9kdWxlTmFtZSwgLi4uYXJncykKICBtb2R1bGUgPT4KICBlID0+ClVwZGF0ZU1lYXN1cmVzKGJvYXJkKQogIGxpbmVzID0+CiAgZSA9PgogIGxpbmUgPT4KQWxpZ25JdGVtKGl0ZW0pCiAgdHIgPT4KQWxpZ25BbGwoZG9jID0gZ2xvYmFsVGhpcy5kb2N1bWVudCkKICBmaXhWYWx1ZShlbGVtZW50KQogIGZpeFZhbHVlcyhkb2MpCiAgY29vcmRNYXAoZG9jKQogIHAgPT4KICB0ID0+CkdldFBvbHlnb25zKGQgPSBkb2MpCiAgZSA9PgpGaW5kUG9seWdvbnMoKQogIGRvYyA9PgogIGUgPT4KUmVtb3ZlUG9seWdvbnMocCA9IHBvbHlnb25zKQooW2RvYywgbGlzdF0pID0+CkdldE5hbWVzKGRvYywgcHJlZCkKICBwcmVkID0gZSA9PgogIHNoZWV0ID0+CiAgZSA9PgogIGUgPT4KICBlID0+CihbdiwgcF0pID0+CihbdiwgcF0pID0+CigpID0+CiAgZG9jID0+CiAgc2hlZXQgPT4KR2V0QnlOYW1lKGRvYywgbmFtZSkKQ29ycmVsYXRlU2NoZW1hdGljQW5kQm9hcmQoc2NoZW1hdGljLCBib2FyZCkKICBkID0+CiAgbiA9PgogIG5hbWUgPT4KICBkb2MgPT4KR2V0U2hlZXRzKGRvY19vcl9wcm9qKQpTYXZlTGlicmFyaWVzKCkKKFtuLCBlXSkgPT4KKGFjYywgW24sIGVdKSA9PgogIGUgPT4KICBlID0+CihhLCBiKSA9PgogIGlkID0+CiAgaWQgPT4KKFtuLCBlXSkgPT4KICBuYW1lID0+CihhY2MsIFtuLCBlXSkgPT4KICB0ZXN0RWFnbGUoZmlsZW5hbWUpCihbbmFtZSwgZV0pID0+CiAgZSA9PgooW25hbWUsIGldKSA9PgogIHAgPT4KKGNoaWxkLCBpLCBhKSA9PgooY2hpbGQyLCBpMikgPT4KKFtpbmRleCwgZXF1YWxdKSA9PgooW2luZGV4XSkgPT4KICBpID0+CiAgaSA9PgogIGRvYyA9PgooW2ZpbGUsIGVdKSA9PgooW2ZpbGUsIHhwYXRoXSkgPT4KICAoW2ssIHZdKSA9PgpFYWdsZTJDaXJjdWl0SlMoZG9jID0gcHJvamVjdC5zY2hlbWF0aWMsIHNjYWxlID0gNTAsIHNoZWV0ID0gMCkKICBuID0+CiAgZSA9PgAAAAAAAAAAfAUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				]
			]
		},
		{
			"contents": "import { Point, Size, Contour, Rect, Line, TickMeter, Mat, CLAHE, Draw } from 'opencv';\nimport * as cv from 'opencv';\nimport { HSLA } from './lib/color.js';\nimport { NumericParam, EnumParam, ParamNavigator } from './param.js';\nimport fs from 'fs';\nimport { format, once, memoize } from './lib/misc.js';\nimport * as xml from 'xml';\nimport Console from 'console';\nimport SvgPath from './lib/svg/path.js';\nimport { IfDebug, LogIfDebug, ReadFile, LoadHistory, ReadJSON, MapFile, ReadBJSON, WriteFile, WriteJSON, WriteBJSON, DirIterator, RecursiveDirIterator } from './io-helpers.js';\nimport { MakeSVG, SaveSVG } from './image-helpers.js';\nimport { Profiler } from './time-helpers.js';\nimport { SaveConfig, LoadConfig } from './config.js';\nimport { VideoSource, ImageSequence } from './qjs-opencv/js/cvVideo.js';\nimport { Window, Screen, MouseFlags, MouseEvents, Mouse, TextStyle } from './qjs-opencv/js/cvHighGUI.js';\nimport { Pipeline, Processor } from './qjs-opencv/js/cvPipeline.js';\nimport { WeakMapper, Modulo, WeakAssign, BindMethods, BitsToNames, FindKey, Define, Once, GetOpt, RoundTo, Range } from './qjs-opencv/js/cvUtils.js';\nimport { ImagePipeline } from './imagePipeline.js';\n\n/*let rainbow;\nlet zoom = 1;\nlet debug = false;\nlet basename = memoize(() => process.argv[1].replace(/\\.js$/, ''));*/\n\nlet simplifyMethods = {\n  NTH_POINT: c => c.simplifyNthPoint(2),\n  RADIAL_DISTANCE: c => c.simplifyRadialDistance(10),\n  PERPENDICULAR_DISTANCE: c => c.simplifyPerpendicularDistance(20),\n  REUMANN_WITKAM: c => c.simplifyReumannWitkam(),\n  OPHEIM: c => c.simplifyOpheim(),\n  LANG: c => c.simplifyLang(),\n  DOUGLAS_PEUCKER: c => c.simplifyDouglasPeucker()\n};\n\nfunction Hierarchy(array) {\n  if(array instanceof Int32Array)\n    this.index = function(id) {\n      return this.array.slice(id * 4, id * 4 + 4);\n    };\n  else\n    this.index = function(id) {\n      return this.array[id];\n    };\n  this.array = array;\n}\n\n/* prettier-ignore */\nObject.assign(Hierarchy.prototype, {\n    parent(id) { const a = this.index(id); return a[cv.HIER_PARENT]; },\n    child(id) { const a = this.index(id); return a[cv.HIER_CHILD]; },\n    next(id) { const a = this.index(id); return a[cv.HIER_NEXT]; },\n    prev(id) { const a = this.index(id); return a[cv.HIER_PREV]; }\n  });\n/*\nfunction getConstants(names) {\n  return Object.fromEntries(names.map(name => [name, '0x' + cv[name].toString(16)]));\n}\n\nfunction findConstant(value, keyCond = k => /^CV/.test(k)) {\n  return FindKey(cv, (v, k) => v == value && keyCond(k));\n}\n\nfunction findType(value) {\n  return findConstant(value, k => /^CV_[0-9]+[A-Z]+C[0-9]/.test(k));\n}\n\nfunction getBitDepth(mat) {\n  switch (mat.depth) {\n    case cv.CV_8U:\n    case cv.CV_8S:\n      return 8;\n    case cv.CV_16U:\n    case cv.CV_16S:\n      return 16;\n    case cv.CV_32F:\n      return 32;\n    case cv.CV_64F:\n      return 64;\n  }\n}\n\nconst MakeMatFor = WeakMapper((...args) => new Mat(...args));\n\nfunction minMax(mat) {\n  const ret = cv.minMaxLoc(mat);\n  return [ret.minVal, ret.maxVal];\n}\n\nfunction modifierMap(keyCode) {\n  return [\n    ['shift', 0x10000],\n    ['alt', 0x80000],\n    ['ctrl', 0x40000]\n  ].map(([modifier, flag]) => [modifier, keyCode & flag ? 1 : 0]);\n}\n\nfunction drawContour(mat, contour, color, thickness = 1, lineType = cv.LINE_AA) {\n  cv.drawContours(mat, [contour], 0, color, thickness, lineType);\n}\n\nfunction* getParents(hier, id) {\n  while(id != -1) {\n    yield id;\n\n    id = hier.parent(id);\n  }\n}\nfunction getContourDepth(hier, id) {\n  return [...getParents(hier, id)].length;\n}\nfunction findRoot(hier) {\n  return hier.findIndex(h => h[cv.HIER_PREV] == -1 && h[cv.HIER_PARENT] == -1);\n}\nfunction* getToplevel(hier) {\n  for(let [i, h] of hier.entries()) if(h[cv.HIER_PARENT] == -1) yield i;\n}\nfunction* walkContours(hier, id) {\n  id = id || findRoot(hier);\n  let h;\n\n  while((h = hier[id])) {\n    yield id;\n\n    if(h[cv.HIER_CHILD] != -1) yield* walkContours(hier, h[cv.HIER_CHILD]);\n\n    id = h[cv.HIER_NEXT];\n  }\n}*/\n\nfunction main(...args) {\n  let start;\n  let running = true;\n  let paused = false;\n\n  globalThis.console = new Console({\n    colors: true,\n    depth: 3,\n    maxArrayLength: 30,\n    compact: 3\n  });\n  const { DISPLAY } = process.env;\n  console.log('DISPLAY', DISPLAY);\n  console.log(\n    'cv.ALIGN_RIGHT',\n    Object.getOwnPropertyNames(cv).filter(n => /ALIGN/.test(n))\n  );\n  let r1 = new Rect(0, 0, 1200, 600),\n    r2 = new Size(400, 200);\n\n  let r3 = r2.align(r1, cv.ALIGN_RIGHT | cv.ALIGN_BOTTOM);\n  console.log('r3', r3);\n  console.log('Screen.size()', Screen.size());\n\n  let opts = GetOpt(\n    {\n      help: [\n        false,\n        () => {\n          console.log(`Usage: ${Util.getArgv()[0]} [OPTIONS] <video|device>`);\n          Util.exit(0);\n        },\n        'h'\n      ],\n      input: [true, (file, current) => [...(current || []), file], 'i'],\n      driver: [\n        true,\n        (arg, current, options, results) => {\n          let driverId = arg in VideoSource.backends ? arg : current;\n          console.log('driver', { arg, current, driverId });\n          if(driverId === undefined) {\n            const input = results['input'];\n            let args = [arg];\n            if(input) {\n              args = results['input'].concat(args);\n              results['input'] = undefined;\n            }\n            results['@'] = results['@'].concat(args);\n          }\n          return driverId;\n        },\n        'd'\n      ],\n      size: [true, null, 's'],\n      trackbars: [false, null, 't'],\n      'no-trackbars': [false, null, 'T'],\n      '@': 'input,driver'\n    },\n    args\n  );\n\n  console.log('cv.getScreenResolution():', cv.getScreenResolution());\n  console.log('opts:', opts);\n  console.log('opts.size:', opts.size);\n\n  const makeRainbow = steps =>\n    Range(0, 360, 360 / steps)\n      .slice(0, -1)\n      .map(hue => new HSLA(hue, 100, 50))\n      .map(h => h.toRGBA());\n\n  let win = new Window('gray', cv.WINDOW_NORMAL | cv.WINDOW_AUTOSIZE /* | cv.WINDOW_KEEPRATIO*/);\n  //console.debug('Mouse :', { MouseEvents, MouseFlags });\n\n  const printFlags = flags => [...BitsToNames(MouseFlags)];\n  /*console.log('printFlags:', printFlags + '');\n  console.log('tickFrequency:', cv.getTickFrequency());*/\n\n  win.setMouseCallback(function (event, x, y, flags) {\n    event = Mouse.printEvent(event);\n    flags = Mouse.printFlags(flags);\n\n    console.debug('Mouse event:', console.inspect({ event, x, y, flags }, { multiline: false }));\n  });\n\n  let contours, hier;\n  let contoursDepth;\n  let lines, circles;\n  let outputMat, outputName;\n\n  const images = opts['input'] ? [opts['input']] : opts['@'];\n\n  let pipeline = new ImagePipeline({});\n\n  for(let image of images) {\n    console.log('image', image);\n    let mat = cv.imread(image);\n\n    let out = pipeline(mat);\n\n    console.log('mat', mat);\n    //let [w, h] = [...mat.size];\n    //console.log('mat.size', { w, h });\n\n    //win.move(0, 0);\n    win.resize(...mat.size);\n    win.align(0);\n\n    win.show(out);\n    let k;\n    while((k = cv.waitKey(-1  ))) {\n      if(['\\n', '\\r', 13, 10].indexOf(k) != -1) break;\n    }\n  }\n  std.exit(0);\n\n  /*   \n  let paramNav = new ParamNavigator(params, config.currentParam);\n  let dummyArray = [0, 1, 2, 3, 4, 5, 6, 7];\n  console.log('win.imageRect (1)', win.imageRect);\n\n  if(opts['trackbars']) {\n    params.apertureSize.createTrackbar('apertureSize', win);\n    params.thresh1.createTrackbar('thresh1', win);\n    params.thresh2.createTrackbar('thresh2', win);\n    console.log('win.imageRect (2)', win.imageRect);\n  }\n \n  rainbow = makeRainbow(256);\n\n  let structuringElement = cv.getStructuringElement(cv.MORPH_CROSS, new Size(3, 3));\n\n  let dst0Size, firstSize, videoSize;\n  let clahe = new CLAHE(4, new Size(8, 8));\n  let framePos;\n\n  let pipeline = new Pipeline(\n    [\n      Processor(function AcquireFrame(src, dst) {\n        const dstEmpty = dst.empty;\n        if(dst.empty) dst0Size = dst.size;\n        console.log('video', video);\n        framePos = video.get('pos_frames');\n        video.read(dst);\n        console.log('dst', dst);\n        win.show(dst);\n        if(videoSize === undefined || videoSize.empty) videoSize = video.size.area ? video.size : dst.size;\n        if(dstEmpty) firstSize = new Size(...videoSize);\n        if(dst.size && !videoSize.equals(dst.size))\n          throw new Error(`AcquireFrame videoSize = ${videoSize} firstSize=${firstSize} dst.size = ${dst.size}`);\n      }),\n      Processor(function Grayscale(src, dst) {\n        let channels = [];\n        cv.cvtColor(src, dst, cv.COLOR_BGR2Lab);\n        cv.split(dst, channels);\n        channels[0].copyTo(dst);\n      }),\n      Processor(function Norm(src, dst) {\n        clahe.apply(src, dst);\n      }),\n      Processor(function Blur(src, dst) {\n        cv.GaussianBlur(src, dst, [+params.ksize, +params.ksize], 0, 0, cv.BORDER_REPLICATE);\n      }),\n      Processor(function EdgeDetect(src, dst) {\n        cv.Canny(src, dst, +params.thresh1, +params.thresh2, +params.apertureSize, +params.L2gradient);\n       }),\n      Processor(function Morph(src, dst) {\n        cv.dilate(src, dst, structuringElement, new Point(-1, -1), +params.dilations);\n        cv.erode(dst, dst, structuringElement, new Point(-1, -1), +params.erosions);\n      }),\n      Processor(function Contours(src, dst) {\n        cv.findContours(src, (contours = []), h => (hier = h), cv[params.mode], cv[params.method]);\n        cv.cvtColor(src, dst, cv.COLOR_GRAY2BGR);\n\n        if(+params.maskColor) {\n          let edge = [dst.toString(), pipeline.images[0].toString()];\n          dst.and(pipeline.images[0]);\n        }\n      }),\n      Processor(function HoughLines(src, dst) {\n        let edges = pipeline.outputOf('EdgeDetect');\n        let mat = new Mat(0, 0, cv.CV_32SC4);\n\n        cv.HoughLinesP(\n          edges,\n          mat,\n          2,\n          (+params.angleResolution * Math.PI) / 180,\n          +params.threshc,\n          +params.minLineLength,\n          +params.maxLineGap\n        );\n        lines = [...mat]; //.array;\n        // console.log('mat', mat);\n        //  console.log('lines', lines.slice(0, 10));\n        // console.log('lines.length', lines.length);\n        src.copyTo(dst);\n      })\n    ],\n    (i, n) => {\n      if(frameShow == i) {\n        let mat = pipeline.getImage(i);\n\n        outputName = pipeline.processors[frameShow].name;\n        outputMat = mat;\n      }\n    }\n  );*/\n\n  //std.gc();\n}\n\ntry {\n  main(...scriptArgs.slice(1));\n} catch(error) {\n  console.log('FAIL: ', error && error.message, error && error.stack ? '\\n' + error.stack : '');\n  std.exit(1);\n}\n\nconsole.log('SUCCESS');\n",
			"file": "test-image.js",
			"file_size": 10514,
			"file_write_time": 132867438709801098,
			"settings":
			{
				"buffer_size": 10516,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					142,
					1,
					"insert",
					{
						"characters": "\n\nlet"
					},
					"CAAAAJ0ZAAAAAAAAnhkAAAAAAAAAAAAAnhkAAAAAAACgGQAAAAAAAAAAAACgGQAAAAAAAKEZAAAAAAAAAAAAAKEZAAAAAAAAoxkAAAAAAAAAAAAAnhkAAAAAAACeGQAAAAAAAAIAAAAgIKEZAAAAAAAAohkAAAAAAAAAAAAAohkAAAAAAACjGQAAAAAAAAAAAACjGQAAAAAAAKQZAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACdGQAAAAAAAJ0ZAAAAAAAAAAAAAAAA8L8"
				],
				[
					143,
					1,
					"insert",
					{
						"characters": " pipeline"
					},
					"CQAAAKQZAAAAAAAApRkAAAAAAAAAAAAApRkAAAAAAACmGQAAAAAAAAAAAACmGQAAAAAAAKcZAAAAAAAAAAAAAKcZAAAAAAAAqBkAAAAAAAAAAAAAqBkAAAAAAACpGQAAAAAAAAAAAACpGQAAAAAAAKoZAAAAAAAAAAAAAKoZAAAAAAAAqxkAAAAAAAAAAAAAqxkAAAAAAACsGQAAAAAAAAAAAACsGQAAAAAAAK0ZAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACkGQAAAAAAAKQZAAAAAAAAAAAAAAAA8L8"
				],
				[
					144,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAK0ZAAAAAAAArhkAAAAAAAAAAAAArhkAAAAAAACvGQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACtGQAAAAAAAK0ZAAAAAAAAAAAAAAAA8L8"
				],
				[
					145,
					1,
					"insert",
					{
						"characters": " new"
					},
					"BAAAAK8ZAAAAAAAAsBkAAAAAAAAAAAAAsBkAAAAAAACxGQAAAAAAAAAAAACxGQAAAAAAALIZAAAAAAAAAAAAALIZAAAAAAAAsxkAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACvGQAAAAAAAK8ZAAAAAAAAAAAAAAAA8L8"
				],
				[
					146,
					1,
					"insert",
					{
						"characters": " Imagfe"
					},
					"BwAAALMZAAAAAAAAtBkAAAAAAAAAAAAAtBkAAAAAAAC1GQAAAAAAAAAAAAC1GQAAAAAAALYZAAAAAAAAAAAAALYZAAAAAAAAtxkAAAAAAAAAAAAAtxkAAAAAAAC4GQAAAAAAAAAAAAC4GQAAAAAAALkZAAAAAAAAAAAAALkZAAAAAAAAuhkAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACzGQAAAAAAALMZAAAAAAAAAAAAAAAA8L8"
				],
				[
					147,
					3,
					"left_delete",
					null,
					"AwAAALkZAAAAAAAAuRkAAAAAAAABAAAAZbgZAAAAAAAAuBkAAAAAAAABAAAAZrcZAAAAAAAAtxkAAAAAAAABAAAAZw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC6GQAAAAAAALoZAAAAAAAAAAAAAAAA8L8"
				],
				[
					148,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAALcZAAAAAAAAuBkAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC3GQAAAAAAALcZAAAAAAAAAAAAAAAA8L8"
				],
				[
					149,
					1,
					"left_delete",
					null,
					"AQAAALcZAAAAAAAAtxkAAAAAAAABAAAAZQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC4GQAAAAAAALgZAAAAAAAAAAAAAAAA8L8"
				],
				[
					150,
					1,
					"insert",
					{
						"characters": "geP"
					},
					"AwAAALcZAAAAAAAAuBkAAAAAAAAAAAAAuBkAAAAAAAC5GQAAAAAAAAAAAAC5GQAAAAAAALoZAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC3GQAAAAAAALcZAAAAAAAAAAAAAAAA8L8"
				],
				[
					151,
					1,
					"insert_completion",
					{
						"completion": "ImagePipeline",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "ImagePipeline"
					},
					"AgAAALQZAAAAAAAAtBkAAAAAAAAGAAAASW1hZ2VQtBkAAAAAAADBGQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC6GQAAAAAAALoZAAAAAAAAAAAAAAAA8L8"
				],
				[
					152,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAMEZAAAAAAAAwxkAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADBGQAAAAAAAMEZAAAAAAAAAAAAAAAA8L8"
				],
				[
					153,
					1,
					"insert",
					{
						"characters": "}"
					},
					"AQAAAMIZAAAAAAAAwxkAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADCGQAAAAAAAMIZAAAAAAAAAAAAAAAA8L8"
				],
				[
					155,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAMQZAAAAAAAAxRkAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADEGQAAAAAAAMQZAAAAAAAAAAAAAAAA8L8"
				],
				[
					156,
					3,
					"left_delete",
					null,
					"AwAAAMQZAAAAAAAAxBkAAAAAAAABAAAAO8MZAAAAAAAAwxkAAAAAAAABAAAAKcIZAAAAAAAAwhkAAAAAAAABAAAAfQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADFGQAAAAAAAMUZAAAAAAAAAAAAAAAA8L8"
				],
				[
					157,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAMIZAAAAAAAAxBkAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADCGQAAAAAAAMIZAAAAAAAAAAAAAAAA8L8"
				],
				[
					159,
					1,
					"insert",
					{
						"characters": ");"
					},
					"AgAAAMQZAAAAAAAAxRkAAAAAAAAAAAAAxRkAAAAAAADGGQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADEGQAAAAAAAMQZAAAAAAAAAAAAAAAA8L8"
				],
				[
					169,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAACYaAAAAAAAAJxoAAAAAAAAAAAAAJxoAAAAAAAAoGgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAmGgAAAAAAACYaAAAAAAAAAAAAAAAA8L8"
				],
				[
					171,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAACcaAAAAAAAAKBoAAAAAAAAAAAAAKBoAAAAAAAApGgAAAAAAAAAAAAApGgAAAAAAACoaAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAnGgAAAAAAACcaAAAAAAAAAAAAAAAAAAA"
				],
				[
					172,
					1,
					"insert",
					{
						"characters": " out"
					},
					"BAAAACoaAAAAAAAAKxoAAAAAAAAAAAAAKxoAAAAAAAAsGgAAAAAAAAAAAAAsGgAAAAAAAC0aAAAAAAAAAAAAAC0aAAAAAAAALhoAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAqGgAAAAAAACoaAAAAAAAAAAAAAAAA8L8"
				],
				[
					173,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAC4aAAAAAAAALxoAAAAAAAAAAAAALxoAAAAAAAAwGgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAuGgAAAAAAAC4aAAAAAAAAAAAAAAAA8L8"
				],
				[
					174,
					1,
					"insert",
					{
						"characters": " pipeline"
					},
					"CQAAADAaAAAAAAAAMRoAAAAAAAAAAAAAMRoAAAAAAAAyGgAAAAAAAAAAAAAyGgAAAAAAADMaAAAAAAAAAAAAADMaAAAAAAAANBoAAAAAAAAAAAAANBoAAAAAAAA1GgAAAAAAAAAAAAA1GgAAAAAAADYaAAAAAAAAAAAAADYaAAAAAAAANxoAAAAAAAAAAAAANxoAAAAAAAA4GgAAAAAAAAAAAAA4GgAAAAAAADkaAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAwGgAAAAAAADAaAAAAAAAAAAAAAAAA8L8"
				],
				[
					175,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADkaAAAAAAAAOxoAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA5GgAAAAAAADkaAAAAAAAAAAAAAAAA8L8"
				],
				[
					176,
					1,
					"insert",
					{
						"characters": "mat"
					},
					"AwAAADoaAAAAAAAAOxoAAAAAAAAAAAAAOxoAAAAAAAA8GgAAAAAAAAAAAAA8GgAAAAAAAD0aAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA6GgAAAAAAADoaAAAAAAAAAAAAAAAA8L8"
				],
				[
					178,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAD4aAAAAAAAAPxoAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA+GgAAAAAAAD4aAAAAAAAAAAAAAAAA8L8"
				],
				[
					192,
					1,
					"insert",
					{
						"characters": "out"
					},
					"BAAAAP0aAAAAAAAA/hoAAAAAAAAAAAAA/hoAAAAAAAD+GgAAAAAAAAMAAABtYXT+GgAAAAAAAP8aAAAAAAAAAAAAAP8aAAAAAAAAABsAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD9GgAAAAAAAAAbAAAAAAAAAAAAAAAA8L8"
				],
				[
					197,
					1,
					"revert",
					null,
					"",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAGwAAAAAAAAAbAAAAAAAAAAAAAAAA8L8"
				],
				[
					1,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAC4bAAAAAAAAMBsAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALhsAAAAAAAAuGwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "eagle-shell.js",
			"settings":
			{
				"buffer_size": 26258,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					22,
					1,
					"insert",
					{
						"characters": "ReadJSON,"
					},
					"CQAAAMkGAAAAAAAAygYAAAAAAAAAAAAAygYAAAAAAADLBgAAAAAAAAAAAADLBgAAAAAAAMwGAAAAAAAAAAAAAMwGAAAAAAAAzQYAAAAAAAAAAAAAzQYAAAAAAADOBgAAAAAAAAAAAADOBgAAAAAAAM8GAAAAAAAAAAAAAM8GAAAAAAAA0AYAAAAAAAAAAAAA0AYAAAAAAADRBgAAAAAAAAAAAADRBgAAAAAAANIGAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMkGAAAAAAAAyQYAAAAAAAAAAAAAAADwvw"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAPMSAAAAAAAA9BIAAAAAAAAAAAAA9BIAAAAAAAD1EgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPMSAAAAAAAA8xIAAAAAAAAAAAAAAAAkQA"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "ReawdJ"
					},
					"BgAAAPMSAAAAAAAA9BIAAAAAAAAAAAAA9BIAAAAAAAD1EgAAAAAAAAAAAAD1EgAAAAAAAPYSAAAAAAAAAAAAAPYSAAAAAAAA9xIAAAAAAAAAAAAA9xIAAAAAAAD4EgAAAAAAAAAAAAD4EgAAAAAAAPkSAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPMSAAAAAAAA8xIAAAAAAAAAAAAAAAAkQA"
				],
				[
					37,
					3,
					"left_delete",
					null,
					"AwAAAPgSAAAAAAAA+BIAAAAAAAABAAAASvcSAAAAAAAA9xIAAAAAAAABAAAAZPYSAAAAAAAA9hIAAAAAAAABAAAAdw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPkSAAAAAAAA+RIAAAAAAAAAAAAAAADwvw"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": "dJSON,"
					},
					"BgAAAPYSAAAAAAAA9xIAAAAAAAAAAAAA9xIAAAAAAAD4EgAAAAAAAAAAAAD4EgAAAAAAAPkSAAAAAAAAAAAAAPkSAAAAAAAA+hIAAAAAAAAAAAAA+hIAAAAAAAD7EgAAAAAAAAAAAAD7EgAAAAAAAPwSAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPYSAAAAAAAA9hIAAAAAAAAAAAAAAADwvw"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": "\nReadFile,"
					},
					"CwAAAPESAAAAAAAA8hIAAAAAAAAAAAAA8hIAAAAAAAD2EgAAAAAAAAAAAAD2EgAAAAAAAPcSAAAAAAAAAAAAAPcSAAAAAAAA+BIAAAAAAAAAAAAA+BIAAAAAAAD5EgAAAAAAAAAAAAD5EgAAAAAAAPoSAAAAAAAAAAAAAPoSAAAAAAAA+xIAAAAAAAAAAAAA+xIAAAAAAAD8EgAAAAAAAAAAAAD8EgAAAAAAAP0SAAAAAAAAAAAAAP0SAAAAAAAA/hIAAAAAAAAAAAAA/hIAAAAAAAD/EgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPESAAAAAAAA8RIAAAAAAAD////////vfw"
				],
				[
					59,
					1,
					"insert",
					{
						"characters": "R"
					},
					"AQAAAKIHAAAAAAAAowcAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKIHAAAAAAAAogcAAAAAAAAAAAAAAECAQA"
				],
				[
					60,
					1,
					"left_delete",
					null,
					"AQAAAKIHAAAAAAAAogcAAAAAAAABAAAAUg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKMHAAAAAAAAowcAAAAAAAAAAAAAAADwvw"
				],
				[
					63,
					1,
					"insert",
					{
						"characters": "ReadFile,"
					},
					"CQAAAMkGAAAAAAAAygYAAAAAAAAAAAAAygYAAAAAAADLBgAAAAAAAAAAAADLBgAAAAAAAMwGAAAAAAAAAAAAAMwGAAAAAAAAzQYAAAAAAAAAAAAAzQYAAAAAAADOBgAAAAAAAAAAAADOBgAAAAAAAM8GAAAAAAAAAAAAAM8GAAAAAAAA0AYAAAAAAAAAAAAA0AYAAAAAAADRBgAAAAAAAAAAAADRBgAAAAAAANIGAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMkGAAAAAAAAyQYAAAAAAAAAAAAAAADwvw"
				],
				[
					68,
					1,
					"revert",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANIGAAAAAAAA0gYAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "imagePipeline.js",
			"settings":
			{
				"buffer_size": 5637,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					22,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAANEDAAAAAAAA0wMAAAAAAAAAAAAAywMAAAAAAADNAwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADLAwAAAAAAANEDAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "io-helpers.js",
			"settings":
			{
				"buffer_size": 6916,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					2,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAFQAAAAAAAAAVQAAAAAAAAAAAAAAVQAAAAAAAABWAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFQAAAAAAAAAVAAAAAAAAAAAAAAAAAAAAA"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAJ0KAAAAAAAAngoAAAAAAAAAAAAAngoAAAAAAACfCgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ0KAAAAAAAAnQoAAAAAAAAAAAAAAAAiQA"
				],
				[
					41,
					1,
					"cut",
					null,
					"AQAAAMQGAAAAAAAAxAYAAAAAAABzAQAACmV4cG9ydCBmdW5jdGlvbiBSZWFkQkpTT04oZmlsZW5hbWUpIHsKICBsZXQgZmQgPSBvcy5vcGVuKGZpbGVuYW1lLCBvcy5PX1JET05MWSk7CiAgbGV0IHsgc2l6ZSB9ID0gb3Muc3RhdChmaWxlbmFtZSlbMF07CiAgZGVidWcoYFJlYWRCSlNPTmAsIHsgZmlsZW5hbWUsIGZkLCBzaXplIH0pOwogIGxldCBkYXRhID0gbW1hcC5tbWFwKDAsIHNpemUgKyAxMCwgbW1hcC5QUk9UX1JFQUQsIG1tYXAuTUFQX1BSSVZBVEUsIGZkLCAwKTsKICBkZWJ1ZyhgUmVhZEJKU09OYCwgeyBkYXRhIH0pOwogIGxldCByZXQgPSBianNvbi5yZWFkKGRhdGEsIDAsIHNpemUpOwoKICBtbWFwLm11bm1hcChkYXRhKTsKICBvcy5jbG9zZShmZCk7CiAgcmV0dXJuIHJldDsKfQo",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMQGAAAAAAAANwgAAAAAAAAAAAAAAADwvw"
				],
				[
					46,
					1,
					"paste",
					null,
					"AQAAAIkJAAAAAAAA/AoAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIkJAAAAAAAAiQkAAAAAAAAAAAAAAADwvw"
				],
				[
					51,
					1,
					"cut",
					null,
					"AQAAAIkJAAAAAAAAiQkAAAAAAACUAgAACmV4cG9ydCBmdW5jdGlvbiBSZWFkQkpTT04oZmlsZW5hbWUpIHsKICBsZXQgZmQgPSBvcy5vcGVuKGZpbGVuYW1lLCBvcy5PX1JET05MWSk7CiAgbGV0IHsgc2l6ZSB9ID0gb3Muc3RhdChmaWxlbmFtZSlbMF07CiAgZGVidWcoYFJlYWRCSlNPTmAsIHsgZmlsZW5hbWUsIGZkLCBzaXplIH0pOwogIGxldCBkYXRhID0gbW1hcC5tbWFwKDAsIHNpemUgKyAxMCwgbW1hcC5QUk9UX1JFQUQsIG1tYXAuTUFQX1BSSVZBVEUsIGZkLCAwKTsKICBkZWJ1ZyhgUmVhZEJKU09OYCwgeyBkYXRhIH0pOwogIGxldCByZXQgPSBianNvbi5yZWFkKGRhdGEsIDAsIHNpemUpOwoKICBtbWFwLm11bm1hcChkYXRhKTsKICBvcy5jbG9zZShmZCk7CiAgcmV0dXJuIHJldDsKfQoKZXhwb3J0IGZ1bmN0aW9uIFdyaXRlQkpTT04obmFtZSwgZGF0YSkgewogIGxldCBidWYgPSBianNvbi53cml0ZShkYXRhKTsKICBsZXQgc2l6ZSA9IGJ1Zi5ieXRlTGVuZ3RoOwogIGxldCBmZCA9IG9zLm9wZW4obmFtZSwgb3MuT19XUk9OTFkgfCBvcy5PX0NSRUFUIHwgb3MuT19UUlVOQyk7CgogIGxldCByZXQgPSBvcy53cml0ZShmZCwgYnVmLCAwLCBzaXplKTsKICBkZWJ1ZygnV3JpdGVCSlNPTicsIHsgbmFtZSwgZmQsIHNpemUsIHJldCB9KTsKICBvcy5jbG9zZShmZCk7CgogIHJldHVybiByZXQ7Cn0K",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIkJAAAAAAAAHQwAAAAAAAAAAAAAAADwvw"
				],
				[
					52,
					1,
					"paste",
					null,
					"AQAAAIkJAAAAAAAAHQwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIkJAAAAAAAAiQkAAAAAAAAAAAAAAADwvw"
				],
				[
					55,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAB0MAAAAAAAAHwwAAAAAAAAAAAAAiQkAAAAAAACLCQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB0MAAAAAAAAiQkAAAAAAAAAAAAAAADwvw"
				],
				[
					63,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAHYAAAAAAAAAdwAAAAAAAAAAAAAAdwAAAAAAAAB4AAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHYAAAAAAAAAdgAAAAAAAAAAAAAAAADwvw"
				],
				[
					86,
					1,
					"doxy_enter",
					null,
					"AgAAAIsJAAAAAAAAjAkAAAAAAAAAAAAAjAkAAAAAAACMCQAAAAAAAAMAAAAvKgo",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIsJAAAAAAAAjgkAAAAAAAAAAAAAAADwvw"
				],
				[
					87,
					1,
					"insert",
					{
						"characters": "\n\n\n\n\n\n\n"
					},
					"BwAAAIwJAAAAAAAAjQkAAAAAAAAAAAAAjQkAAAAAAACOCQAAAAAAAAAAAACOCQAAAAAAAI8JAAAAAAAAAAAAAI8JAAAAAAAAkAkAAAAAAAAAAAAAkAkAAAAAAACRCQAAAAAAAAAAAACRCQAAAAAAAJIJAAAAAAAAAAAAAJIJAAAAAAAAkwkAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIwJAAAAAAAAjAkAAAAAAAAAAAAAAADwvw"
				],
				[
					88,
					8,
					"left_delete",
					null,
					"CAAAAJIJAAAAAAAAkgkAAAAAAAABAAAACpEJAAAAAAAAkQkAAAAAAAABAAAACpAJAAAAAAAAkAkAAAAAAAABAAAACo8JAAAAAAAAjwkAAAAAAAABAAAACo4JAAAAAAAAjgkAAAAAAAABAAAACo0JAAAAAAAAjQkAAAAAAAABAAAACowJAAAAAAAAjAkAAAAAAAABAAAACosJAAAAAAAAiwkAAAAAAAABAAAACg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJMJAAAAAAAAkwkAAAAAAAAAAAAAAADwvw"
				],
				[
					89,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAIsJAAAAAAAAjAkAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIsJAAAAAAAAiwkAAAAAAAAAAAAAAADwvw"
				],
				[
					104,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAADEBAAAAAAAAMgEAAAAAAAAAAAAAMgEAAAAAAAAzAQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADEBAAAAAAAAMQEAAAAAAAAAAAAAAAAAAA"
				],
				[
					106,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAADIBAAAAAAAAMwEAAAAAAAAAAAAAMwEAAAAAAAA0AQAAAAAAAAAAAAA0AQAAAAAAADUBAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADIBAAAAAAAAMgEAAAAAAAAAAAAAAAAAAA"
				],
				[
					107,
					1,
					"insert",
					{
						"characters": " bjson;"
					},
					"BwAAADUBAAAAAAAANgEAAAAAAAAAAAAANgEAAAAAAAA3AQAAAAAAAAAAAAA3AQAAAAAAADgBAAAAAAAAAAAAADgBAAAAAAAAOQEAAAAAAAAAAAAAOQEAAAAAAAA6AQAAAAAAAAAAAAA6AQAAAAAAADsBAAAAAAAAAAAAADsBAAAAAAAAPAEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADUBAAAAAAAANQEAAAAAAAAAAAAAAADwvw"
				],
				[
					108,
					1,
					"insert",
					{
						"characters": "\n\nimport"
					},
					"CAAAADwBAAAAAAAAPQEAAAAAAAAAAAAAPQEAAAAAAAA+AQAAAAAAAAAAAAA+AQAAAAAAAD8BAAAAAAAAAAAAAD8BAAAAAAAAQAEAAAAAAAAAAAAAQAEAAAAAAABBAQAAAAAAAAAAAABBAQAAAAAAAEIBAAAAAAAAAAAAAEIBAAAAAAAAQwEAAAAAAAAAAAAAQwEAAAAAAABEAQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADwBAAAAAAAAPAEAAAAAAAAAAAAAAADwvw"
				],
				[
					109,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAEQBAAAAAAAARgEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEQBAAAAAAAARAEAAAAAAAAAAAAAAADwvw"
				],
				[
					110,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAEUBAAAAAAAARwEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEUBAAAAAAAARQEAAAAAAAAAAAAAAADwvw"
				],
				[
					111,
					1,
					"insert",
					{
						"characters": "bjson"
					},
					"BQAAAEYBAAAAAAAARwEAAAAAAAAAAAAARwEAAAAAAABIAQAAAAAAAAAAAABIAQAAAAAAAEkBAAAAAAAAAAAAAEkBAAAAAAAASgEAAAAAAAAAAAAASgEAAAAAAABLAQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEYBAAAAAAAARgEAAAAAAAAAAAAAAADwvw"
				],
				[
					113,
					1,
					"insert",
					{
						"characters": ".he"
					},
					"AwAAAE0BAAAAAAAATgEAAAAAAAAAAAAATgEAAAAAAABPAQAAAAAAAAAAAABPAQAAAAAAAFABAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAE0BAAAAAAAATQEAAAAAAAAAAAAAAADwvw"
				],
				[
					114,
					2,
					"left_delete",
					null,
					"AgAAAE8BAAAAAAAATwEAAAAAAAABAAAAZU4BAAAAAAAATgEAAAAAAAABAAAAaA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFABAAAAAAAAUAEAAAAAAAAAAAAAAADwvw"
				],
				[
					115,
					1,
					"insert",
					{
						"characters": "then"
					},
					"BAAAAE4BAAAAAAAATwEAAAAAAAAAAAAATwEAAAAAAABQAQAAAAAAAAAAAABQAQAAAAAAAFEBAAAAAAAAAAAAAFEBAAAAAAAAUgEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAE4BAAAAAAAATgEAAAAAAAAAAAAAAADwvw"
				],
				[
					116,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAFIBAAAAAAAAVAEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFIBAAAAAAAAUgEAAAAAAAAAAAAAAADwvw"
				],
				[
					117,
					1,
					"insert",
					{
						"characters": "m"
					},
					"AQAAAFMBAAAAAAAAVAEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFMBAAAAAAAAUwEAAAAAAAAAAAAAAADwvw"
				],
				[
					118,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAFQBAAAAAAAAVQEAAAAAAAAAAAAAVQEAAAAAAABWAQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFQBAAAAAAAAVAEAAAAAAAAAAAAAAADwvw"
				],
				[
					119,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFYBAAAAAAAAVwEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFYBAAAAAAAAVgEAAAAAAAAAAAAAAADwvw"
				],
				[
					120,
					1,
					"left_delete",
					null,
					"AQAAAFYBAAAAAAAAVgEAAAAAAAABAAAAIA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFcBAAAAAAAAVwEAAAAAAAAAAAAAAADwvw"
				],
				[
					121,
					1,
					"insert",
					{
						"characters": ">"
					},
					"AQAAAFYBAAAAAAAAVwEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFYBAAAAAAAAVgEAAAAAAAAAAAAAAADwvw"
				],
				[
					122,
					1,
					"insert",
					{
						"characters": " bjson"
					},
					"BgAAAFcBAAAAAAAAWAEAAAAAAAAAAAAAWAEAAAAAAABZAQAAAAAAAAAAAABZAQAAAAAAAFoBAAAAAAAAAAAAAFoBAAAAAAAAWwEAAAAAAAAAAAAAWwEAAAAAAABcAQAAAAAAAAAAAABcAQAAAAAAAF0BAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFcBAAAAAAAAVwEAAAAAAAAAAAAAAADwvw"
				],
				[
					123,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAF0BAAAAAAAAXgEAAAAAAAAAAAAAXgEAAAAAAABfAQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF0BAAAAAAAAXQEAAAAAAAAAAAAAAADwvw"
				],
				[
					124,
					1,
					"insert",
					{
						"characters": " m;"
					},
					"AwAAAF8BAAAAAAAAYAEAAAAAAAAAAAAAYAEAAAAAAABhAQAAAAAAAAAAAABhAQAAAAAAAGIBAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF8BAAAAAAAAXwEAAAAAAAAAAAAAAADwvw"
				],
				[
					125,
					1,
					"left_delete",
					null,
					"AQAAAGEBAAAAAAAAYQEAAAAAAAABAAAAOw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGIBAAAAAAAAYgEAAAAAAAAAAAAAAADwvw"
				],
				[
					127,
					1,
					"insert",
					{
						"characters": ".cfat"
					},
					"BQAAAGIBAAAAAAAAYwEAAAAAAAAAAAAAYwEAAAAAAABkAQAAAAAAAAAAAABkAQAAAAAAAGUBAAAAAAAAAAAAAGUBAAAAAAAAZgEAAAAAAAAAAAAAZgEAAAAAAABnAQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGIBAAAAAAAAYgEAAAAAAAAAAAAAAADwvw"
				],
				[
					128,
					3,
					"left_delete",
					null,
					"AwAAAGYBAAAAAAAAZgEAAAAAAAABAAAAdGUBAAAAAAAAZQEAAAAAAAABAAAAYWQBAAAAAAAAZAEAAAAAAAABAAAAZg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGcBAAAAAAAAZwEAAAAAAAAAAAAAAADwvw"
				],
				[
					129,
					1,
					"insert",
					{
						"characters": "atch"
					},
					"BAAAAGQBAAAAAAAAZQEAAAAAAAAAAAAAZQEAAAAAAABmAQAAAAAAAAAAAABmAQAAAAAAAGcBAAAAAAAAAAAAAGcBAAAAAAAAaAEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGQBAAAAAAAAZAEAAAAAAAAAAAAAAADwvw"
				],
				[
					130,
					2,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AgAAAGgBAAAAAAAAagEAAAAAAAAAAAAAaQEAAAAAAABrAQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGgBAAAAAAAAaAEAAAAAAAAAAAAAAADwvw"
				],
				[
					132,
					1,
					"insert",
					{
						"characters": " =>"
					},
					"AwAAAGsBAAAAAAAAbAEAAAAAAAAAAAAAbAEAAAAAAABtAQAAAAAAAAAAAABtAQAAAAAAAG4BAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGsBAAAAAAAAawEAAAAAAAAAAAAAAADwvw"
				],
				[
					133,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAG4BAAAAAAAAbwEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG4BAAAAAAAAbgEAAAAAAAAAAAAAAADwvw"
				],
				[
					134,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAG8BAAAAAAAAcQEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG8BAAAAAAAAbwEAAAAAAAAAAAAAAADwvw"
				],
				[
					136,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAHIBAAAAAAAAcwEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHIBAAAAAAAAcgEAAAAAAAAAAAAAAADwvw"
				],
				[
					145,
					2,
					"left_delete",
					null,
					"AgAAAGMMAAAAAAAAYwwAAAAAAAABAAAAL2IMAAAAAAAAYgwAAAAAAAABAAAAKg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGQMAAAAAAAAZAwAAAAAAAAAAAAAAAB+QA"
				],
				[
					153,
					1,
					"insert",
					{
						"characters": "\nlet"
					},
					"BAAAADwBAAAAAAAAPQEAAAAAAAAAAAAAPQEAAAAAAAA+AQAAAAAAAAAAAAA+AQAAAAAAAD8BAAAAAAAAAAAAAD8BAAAAAAAAQAEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADwBAAAAAAAAPAEAAAAAAAAAAAAAAADwvw"
				],
				[
					154,
					1,
					"insert",
					{
						"characters": " mmap;"
					},
					"BgAAAEABAAAAAAAAQQEAAAAAAAAAAAAAQQEAAAAAAABCAQAAAAAAAAAAAABCAQAAAAAAAEMBAAAAAAAAAAAAAEMBAAAAAAAARAEAAAAAAAAAAAAARAEAAAAAAABFAQAAAAAAAAAAAABFAQAAAAAAAEYBAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEABAAAAAAAAQAEAAAAAAAAAAAAAAADwvw"
				],
				[
					162,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAAGIBAAAAAAAAYwEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGIBAAAAAAAAYgEAAAAAAAAAAAAAAADwvw"
				],
				[
					165,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAGwBAAAAAAAAbQEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGwBAAAAAAAAbAEAAAAAAAAAAAAAAADwvw"
				],
				[
					166,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAG0BAAAAAAAAbgEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG0BAAAAAAAAbQEAAAAAAAAAAAAAAADwvw"
				],
				[
					168,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAGwBAAAAAAAAbQEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGwBAAAAAAAAbAEAAAAAAAAAAAAAAADwvw"
				],
				[
					170,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAAGMBAAAAAAAAZAEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGMBAAAAAAAAYwEAAAAAAAAAAAAAAADwvw"
				],
				[
					172,
					1,
					"insert",
					{
						"characters": "im"
					},
					"AgAAAHABAAAAAAAAcQEAAAAAAAAAAAAAcQEAAAAAAAByAQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHABAAAAAAAAcAEAAAAAAAAAAAAAAADwvw"
				],
				[
					173,
					2,
					"left_delete",
					null,
					"AgAAAHEBAAAAAAAAcQEAAAAAAAABAAAAbXABAAAAAAAAcAEAAAAAAAABAAAAaQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHIBAAAAAAAAcgEAAAAAAAAAAAAAAADwvw"
				],
				[
					175,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAHEBAAAAAAAAcgEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHEBAAAAAAAAcQEAAAAAAAAAAAAAAADwvw"
				],
				[
					176,
					1,
					"left_delete",
					null,
					"AQAAAHEBAAAAAAAAcQEAAAAAAAABAAAAPQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHIBAAAAAAAAcgEAAAAAAAAAAAAAAADwvw"
				],
				[
					179,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAHEBAAAAAAAAcgEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHEBAAAAAAAAcQEAAAAAAAAAAAAAAADwvw"
				],
				[
					181,
					1,
					"insert",
					{
						"characters": "import"
					},
					"BgAAAHABAAAAAAAAcQEAAAAAAAAAAAAAcQEAAAAAAAByAQAAAAAAAAAAAAByAQAAAAAAAHMBAAAAAAAAAAAAAHMBAAAAAAAAdAEAAAAAAAAAAAAAdAEAAAAAAAB1AQAAAAAAAAAAAAB1AQAAAAAAAHYBAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHABAAAAAAAAcAEAAAAAAAAAAAAAAADwvw"
				],
				[
					182,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAHYBAAAAAAAAeAEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHYBAAAAAAAAdgEAAAAAAAAAAAAAAADwvw"
				],
				[
					183,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAHcBAAAAAAAAeQEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHcBAAAAAAAAdwEAAAAAAAAAAAAAAADwvw"
				],
				[
					184,
					1,
					"insert",
					{
						"characters": "mmap"
					},
					"BAAAAHgBAAAAAAAAeQEAAAAAAAAAAAAAeQEAAAAAAAB6AQAAAAAAAAAAAAB6AQAAAAAAAHsBAAAAAAAAAAAAAHsBAAAAAAAAfAEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHgBAAAAAAAAeAEAAAAAAAAAAAAAAADwvw"
				],
				[
					186,
					1,
					"insert",
					{
						"characters": ".then"
					},
					"BQAAAH4BAAAAAAAAfwEAAAAAAAAAAAAAfwEAAAAAAACAAQAAAAAAAAAAAACAAQAAAAAAAIEBAAAAAAAAAAAAAIEBAAAAAAAAggEAAAAAAAAAAAAAggEAAAAAAACDAQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH4BAAAAAAAAfgEAAAAAAAAAAAAAAADwvw"
				],
				[
					187,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAIMBAAAAAAAAhQEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIMBAAAAAAAAgwEAAAAAAAAAAAAAAADwvw"
				],
				[
					188,
					1,
					"insert",
					{
						"characters": "m"
					},
					"AQAAAIQBAAAAAAAAhQEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIQBAAAAAAAAhAEAAAAAAAAAAAAAAADwvw"
				],
				[
					189,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAIUBAAAAAAAAhgEAAAAAAAAAAAAAhgEAAAAAAACHAQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIUBAAAAAAAAhQEAAAAAAAAAAAAAAADwvw"
				],
				[
					190,
					1,
					"insert",
					{
						"characters": " mmap=m"
					},
					"BwAAAIcBAAAAAAAAiAEAAAAAAAAAAAAAiAEAAAAAAACJAQAAAAAAAAAAAACJAQAAAAAAAIoBAAAAAAAAAAAAAIoBAAAAAAAAiwEAAAAAAAAAAAAAiwEAAAAAAACMAQAAAAAAAAAAAACMAQAAAAAAAI0BAAAAAAAAAAAAAI0BAAAAAAAAjgEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIcBAAAAAAAAhwEAAAAAAAAAAAAAAADwvw"
				],
				[
					216,
					1,
					"cut",
					null,
					"AQAAAHABAAAAAAAAcAEAAAAAAAAfAAAAaW1wb3J0KCdtbWFwJykudGhlbihtID0gbW1hcD1tKQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHABAAAAAAAAjwEAAAAAAAAAAAAAAADwvw"
				],
				[
					217,
					2,
					"left_delete",
					null,
					"AgAAAG8BAAAAAAAAbwEAAAAAAAABAAAAIG4BAAAAAAAAbgEAAAAAAAABAAAALA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHABAAAAAAAAcAEAAAAAAAAAAAAAAADwvw"
				],
				[
					220,
					1,
					"paste",
					null,
					"AQAAAIIBAAAAAAAAoQEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIIBAAAAAAAAggEAAAAAAAAAAAAAAGB4QA"
				],
				[
					221,
					1,
					"insert",
					{
						"characters": ".catch"
					},
					"BgAAAKEBAAAAAAAAogEAAAAAAAAAAAAAogEAAAAAAACjAQAAAAAAAAAAAACjAQAAAAAAAKQBAAAAAAAAAAAAAKQBAAAAAAAApQEAAAAAAAAAAAAApQEAAAAAAACmAQAAAAAAAAAAAACmAQAAAAAAAKcBAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKEBAAAAAAAAoQEAAAAAAAAAAAAAAADwvw"
				],
				[
					222,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAKcBAAAAAAAAqQEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKcBAAAAAAAApwEAAAAAAAAAAAAAAADwvw"
				],
				[
					225,
					2,
					"right_delete",
					null,
					"AgAAAG0BAAAAAAAAbQEAAAAAAAABAAAAKW0BAAAAAAAAbQEAAAAAAAABAAAAKQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG0BAAAAAAAAbQEAAAAAAAAAAAAAACB3QA"
				],
				[
					227,
					2,
					"left_delete",
					null,
					"AgAAAGMBAAAAAAAAYwEAAAAAAAABAAAAKGIBAAAAAAAAYgEAAAAAAAABAAAAKA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGQBAAAAAAAAZAEAAAAAAAAAAAAAAADwvw"
				],
				[
					232,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAKQBAAAAAAAApgEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKQBAAAAAAAApAEAAAAAAAAAAAAAAADwvw"
				],
				[
					234,
					1,
					"insert",
					{
						"characters": " =>"
					},
					"AwAAAKYBAAAAAAAApwEAAAAAAAAAAAAApwEAAAAAAACoAQAAAAAAAAAAAACoAQAAAAAAAKkBAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKYBAAAAAAAApgEAAAAAAAAAAAAAAADwvw"
				],
				[
					235,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKkBAAAAAAAAqgEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKkBAAAAAAAAqQEAAAAAAAAAAAAAAADwvw"
				],
				[
					236,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAKoBAAAAAAAArAEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKoBAAAAAAAAqgEAAAAAAAAAAAAAAADwvw"
				],
				[
					241,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAK0BAAAAAAAArgEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK0BAAAAAAAArQEAAAAAAAD////////vfw"
				],
				[
					253,
					1,
					"insert",
					{
						"characters": ">"
					},
					"AQAAAJUBAAAAAAAAlgEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJUBAAAAAAAAlQEAAAAAAAAAAAAAAADwvw"
				],
				[
					267,
					1,
					"left_delete",
					null,
					"AQAAABoAAAAAAAAAGgAAAAAAAAB8AAAALy9pbXBvcnQgKiBhcyBvcyBmcm9tICdvcyc7Ci8vaW1wb3J0ICogYXMgc3RkIGZyb20gJ3N0ZCc7Ci8vaW1wb3J0ICogYXMgYmpzb24gZnJvbSAnYmpzb24nOwovL2ltcG9ydCAqIGFzIG1tYXAgZnJvbSAnbW1hcCc7Cg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABoAAAAAAAAAlgAAAAAAAAAAAAAAAAAAAA"
				],
				[
					272,
					1,
					"revert",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABoAAAAAAAAAGgAAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"contents": "  import express from 'express';\n  import * as path from 'path';\n  import * as util from 'util';\n  import Util from './lib/util.js';\n  import bodyParser from 'body-parser';\n  import expressWs from 'express-ws';\n  import { Alea } from './lib/alea.js';\n  import crypto from 'crypto';\n  import fetch from 'isomorphic-fetch';\n  import { exec } from 'promisify-child-process';\n  import * as fs from 'fs';\n  import { promises as fsPromises } from 'fs';\n  import { IfDebug, LogIfDebug, ReadFile, LoadHistory, ReadJSON, MapFile,  WriteFile, WriteJSON,  DirIterator, RecursiveDirIterator, ReadDirRecursive, Filter, FilterImages, SortFiles, StatFiles } from './io-helpers.js';\n  import { Console } from 'console';\n  import SerialPort from 'serialport';\n  import SerialStream from '@serialport/stream';\n  //import SerialBinding from '@serialport/bindings';\n  import Socket from './webSocket.js';\n  import WebSocket from 'ws';\n  import PortableFileSystem from './lib/filesystem.js';\n  import PortableChildProcess, { SIGTERM, SIGKILL, SIGSTOP, SIGCONT } from './lib/childProcess.js';\n  import { Repeater } from './lib/repeater/repeater.js';\n  import { Message } from './message.js';\n\n  //SerialStream.Binding = SerialBinding;\n  let names = [],\n    dirs = {};\n\n  let filesystem, childProcess;\n  const port = process.env.PORT || 3000;\n\n  const files = new Set();\n  const hash = crypto.createHash('sha1');\n\n  const prng = new Alea();\n  prng.seed(Date.now());\n  console.log('random:', prng.uint32());\n  console.log('randStr:', Util.randStr(8, null, prng));\n\n  let app = express();\n  expressWs(app, null, { perMessageDeflate: false });\n  const p = path.join(path.dirname(process.argv[1]), '.');\n\n  let mountDirs = ['data', '../an-tronics/eagle', '../insider/eagle', '../lc-meter/eagle', '../pictest/eagle'];\n  let tmpDir = './tmp';\n\n  async function waitChild(proc) {\n    const { pid, stdout, stderr, wait } = proc;\n    console.log('Process ID =', pid);\n    let ret = await wait();\n    console.log('wait() =', ret);\n    return ret;\n  }\n\n  async function runMount(dirsIterator) {\n    for await(let dirs of await dirsIterator) {\n      console.log(`runMount`, dirs);\n      console.debug(`Mount ${dirs} to tmp/`);\n\n      let proc = childProcess('./mount-tmp.sh', ['-f', ...Util.unique(dirs || [])], {\n        env: { OPTS: 'auto_unmount,atomic_o_trunc,big_writes,kernel_cache' }\n      });\n      async function readData(output, callback = d => {}) {\n        try {\n          for await(let data of new Repeater((push, stop) => {\n            output.on('data', chunk => push(chunk.toString()));\n            proc.on('exit', stop);\n            //          output.on('close', () => push(null));\n          })) {\n            if(data === null) {\n              console.log('output EOF');\n              //return;\n            }\n            if(typeof data == 'string') data.split(/\\n/g).forEach(line => callback(line));\n          }\n        } catch(e) {\n          return e;\n        }\n      }\n      readData(proc.stdout);\n      readData(proc.stderr, data => console.log('stderr data:', Util.abbreviate(Util.escape(data), Util.getEnv('COLUMNS') || 120)));\n      let exitCode = await waitChild(proc);\n      console.log('exitCode:', exitCode);\n      return exitCode;\n    }\n  }\n\n  async function RequestContours(req, res) {\n    const { body } = req;\n    const { contours, frame, width, height } = body;\n    console.log(`${req.url}`, { contours, frame, width, height });\n\n    res.status(200).send('OK');\n\n    Socket.sendAll({ type: 'CONTOURS', origin: '*', recipient: '*', body });\n\n    //  res.json({ status: 'OK' });\n  }\n\n  //console.log('Serving from', p);\n\n  async function main() {\n    const { stdout, stderr } = process;\n    globalThis.console = new Console({\n      stdout,\n      stderr,\n      inspectOptions: {\n        breakLength: 120,\n        maxStringLength: Infinity,\n        maxArrayLength: 30,\n        compact: 2\n      }\n    });\n    await PortableChildProcess(cp => (childProcess = cp));\n\n    Socket.timeoutCycler();\n\n    /*  let mounter = runMount(\n      new Repeater(async (push, stop) => {\n        while(true) await push(mountDirs);\n      })\n    ).then(exitCode => {\n      console.log('runMount', { exitCode });\n      if(exitCode == 127) {\n        Util.exit(127);\n      }\n      return exitCode;\n    });*/\n    console.log('mountDirs', { mountDirs });\n\n    app.use((req, res, next) => {\n      //    console.log(\"req\", req.url, req.method);\n      next();\n    });\n    app.use(express.text({ type: 'application/xml', limit: '16384kb' }));\n\n    app.use(bodyParser.json({ limit: '200mb' }));\n    app.use(bodyParser.raw({ type: 'text/plain;charset=UTF-8', limit: '524288kb' }));\n    app.use(bodyParser.raw({ type: 'text/plain', limit: '524288kb' }));\n    app.use(bodyParser.raw({ type: 'application/octet-stream', limit: '524288kb' }));\n    app.use(bodyParser.raw({ type: 'multipart/mixed', limit: '16384kb' }));\n\n    app.use((req, res, next) => {\n      res.append('Access-Control-Allow-Origin', `https://api.github.com, http://127.0.0.1:${port}`);\n      res.append('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS');\n      res.append('Access-Control-Allow-Headers', 'Content-Type, Accept, Authorization');\n      res.append('Access-Control-Allow-Credentials', 'true');\n      next();\n    });\n\n    function SendRaw(res, file, data, type = 'application/octet-stream') {\n      res.setHeader('Content-Disposition', `attachment; filename=\"${path.basename(file)}\"`);\n\n      if(type) res.setHeader('Content-Type', type);\n      if(data) return res.send(data);\n      else if(file && typeof file == 'string') {\n        console.log('sendFile', { file });\n        return res.sendFile(file, { root: process.cwd() });\n      }\n    }\n\n    const convertToGerber = async (boardFile, opts = {}) => {\n      console.log('convertToGerber', { boardFile, opts });\n      let { layers = opts.side == 'outline' ? ['Measures'] : opts.drill ? ['Drills', 'Holes'] : [opts.front ? 'Top' : 'Bottom', 'Pads', 'Vias'], format = opts.drill ? 'EXCELLON' : 'GERBER_RS274X', data, fetch = false, front, back } = opts;\n      const base = path.basename(boardFile, '.brd');\n      const formatToExt = (layers, format) => {\n        if(opts.drill || format.startsWith('EXCELLON') || layers.indexOf('Drills') != -1 || layers.indexOf('Holes') != -1) return 'TXT';\n        if(layers.indexOf('Bottom') != -1 || format.startsWith('GERBER')) return opts.side == 'outline' ? 'GKO' : front ? 'GTL' : 'GBL';\n\n        return 'rs274x';\n      };\n      const gerberFile = `./tmp/${base}.${formatToExt(layers, format)}`;\n      const cmd = `eagle -X -d ${format} -o \"${gerberFile}\" \"${boardFile}\" ${layers.join(' ')}`;\n      console.log(`executing '${cmd}'`);\n      const child = exec(`${cmd} 2>&1 0</dev/null`, {});\n      // do whatever you want with `child` here - it's a ChildProcess instance just\n      // with promise-friendly `.then()` & `.catch()` functions added to it!\n      let output = '';\n      child.stdout.on('data', data => (output += data));\n      child.stderr.on('data', data => (output += data));\n      const { stdout, stderr, code, signal } = await child;\n      console.log(`code: ${code}`);\n      //  console.log(`output: ${output}`);\n      if(code !== 0) throw new Error(output);\n      if(output) output = output.replace(/\\s*\\r*\\n/g, '\\n');\n      let result = { code, output };\n      if(opts.fetch) result.data = await (await fsPromises.readFile(GetVFSPath(gerberFile))).toString();\n      result.file = gerberFile;\n      console.log('convertToGerber result =', result);\n      return result;\n    };\n\n    const gerberEndpoint = async (req, res) => {\n      const { body } = req;\n      let { board, save, file: filename, raw, ...opts } = body;\n      let result;\n      console.log('Request /gerber', { board, save, opts });\n      try {\n        result = await convertToGerber(board, opts);\n        if(save) {\n          filename = filename || typeof save == 'string' ? save : null;\n          filename = `tmp/` + filename.replace(/.*\\/([^\\/])*\\.[^\\/.]*$/g, '$1');\n          await fsPromises.writeFile(filename, result.data).then(res => console.log('Wrote file:', res));\n        }\n      } catch(error) {\n        result = { error };\n      }\n      console.log('Response /gerber', Util.filterOutKeys(result, /(output|data)/));\n\n      if(/get/i.test(req.method) || raw) {\n        const { file } = result;\n        return SendRaw(res, file, result.data);\n      }\n      res.json(result);\n    };\n\n    app.get(/^\\/gerber/, gerberEndpoint);\n    app.post(/^\\/gerber/, gerberEndpoint);\n\n    const gerberToGcode = async (gerberFile, allOpts = {}) => {\n      const basename = gerberFile.replace(/.*\\//g, '').replace(/\\.[^.]*$/, '');\n      let { fetch, data, raw, ...opts } = allOpts;\n      opts = {\n        basename,\n        zsafe: '1mm',\n        zchange: '2mm',\n        zwork: '-1mm',\n        zdrill: '-2mm',\n        zcut: '-2mm',\n        'cutter-diameter': '1mm',\n        'drill-feed': 1000,\n        'drill-speed': 10000,\n        'mill-feed': 600,\n        'mill-speed': 16000,\n        'cut-feed': 200,\n        'cut-speed': 10000,\n        'cut-infeed': '1mm',\n\n        'output-dir': './tmp/',\n        ...opts\n      };\n      if(opts.front == undefined && opts.back == undefined && opts.drill == undefined) opts.back = gerberFile;\n      let sides = [];\n\n      for(let side of ['front', 'back', 'drill', 'outline'])\n        if(side in opts) {\n          if(typeof opts[side] != 'string') opts[side] = gerberFile;\n          sides.push(side);\n        }\n\n      if(opts.voronoi && !opts.vectorial) opts.vectorial = 1;\n\n      console.debug(`gerberToGcode`, opts);\n      function makePath(ext, side, base = basename) {\n        return path.join(opts['output-dir'], `${base}_${side}.${ext}`);\n      }\n\n      const params = [...Object.entries(opts)].filter(([k, v]) => typeof v == 'string' || typeof v == 'number' || (typeof v == 'boolean' && v === true)).map(([k, v]) => `--${k}${typeof v != 'boolean' && v != '' ? '=' + v : ''}`);\n      console.log('Request /gcode', { gerberFile, fetch, raw });\n      //console.warn(`gerberToGcode`, Util.abbreviate(gerberFile), { gcodeFile, opts });\n\n      let wait;\n      try {\n        const cmd = `pcb2gcode ${params.join(' ')} 2>&1`;\n        console.warn(`executing '${cmd}'`);\n        const child = exec(cmd, {});\n        // do whatever you want with `child` here - it's a ChildProcess instance just\n        // with promise-friendly `.then()` & `.catch()` functions added to it!\n        let output = '';\n        child.stdout.on('data', data => (output += data));\n        child.stderr.on('data', data => (output += data));\n        wait = await child.catch(error => ({ code: -1, error }));\n\n        const { stdout, stderr, code, signal } = wait;\n        if(output) output = Util.abbreviate(output.replace(/\\s*\\r*\\n/g, '\\n'), 200);\n        console.log('Response /gcode', { stdout, output, sides });\n\n        //   if(code !== 0) throw new Error(output);\n\n        const gcodeFile = makePath('ngc', sides[0]);\n        const svgFile = makePath('svg', sides[0], 'processed');\n\n        for(let [file, to] of sides.map(side => [makePath('svg', side, 'processed'), makePath('svg', side)])) if(fs.existsSync(file)) fs.renameSync(file, to);\n\n        let files = sides.map(side => [side, makePath('ngc', side)]).filter(([side, file]) => fs.existsSync(file));\n        console.log('Response /gcode', { files });\n\n        let result = { code, output, cmd };\n        if(fetch) {\n          for(let [side, file] of files) result[side] = await (await fsPromises.readFile(GetVFSPath(file))).toString();\n        }\n        if(/*/get/i.test(req.method) || */ raw) {\n          const { file } = result;\n          return SendRaw(res, file, result.data);\n        }\n        result.files = Object.fromEntries(files);\n        console.log('Response /gcode', Util.filterOutKeys(result, /(Xoutput|data)/));\n        return result;\n      } catch(error) {\n        Util.putError(error);\n      }\n    };\n\n    let gcodeEndpoint = async (req, res) => {\n      const { body } = req;\n      let { file, ...opts } = body;\n      let result;\n\n      try {\n        result = await gerberToGcode(file, opts).catch(error => ({ error }));\n      } catch(error) {\n        result = { error };\n      } finally {\n        res.json(result);\n      }\n    };\n    app.post(/^\\/gcode/, gcodeEndpoint);\n    app.get(/^\\/gcode/, gcodeEndpoint);\n\n    const GithubListContents = async (owner, repo, dir, filter) => {\n      const url = `https://api.github.com/repos/${owner}/${repo}/contents/${dir}`;\n      console.log(`GITHUB list`, { owner, repo, dir, filter });\n      let response = await fetch(url);\n      let result = JSON.parse(await response.text());\n      console.log('result', result);\n      if(filter) {\n        const re = new RegExp(filter, 'g');\n        result = result.filter(({ name }) => re.test(name));\n      }\n      return result;\n    };\n\n    app.use(async (req, res, next) => {\n      if(!/overrides\\//.test(req.path)) {\n        let relativePath = path.join('.', req.path);\n        let overridePath = path.join('overrides', req.path);\n        let isFile = false;\n\n        await fsPromises\n          .stat(GetVFSPath(relativePath))\n          .then(st => (isFile = st.isFile()))\n          .catch(err => {});\n\n        let override = false;\n\n        if(isFile)\n          await fsPromises\n            .access(GetVFSPath(overridePath), fs.constants.F_OK)\n            .then(() => (override = true))\n            .catch(err => {});\n\n        if(override) {\n          console.log('Static request:', { overridePath, override, res });\n\n          return res.redirect('/' + overridePath);\n        }\n      }\n      if(/lib\\/preact.js/.test(req.url)) req.url = '/lib/preact.mjs';\n\n      if(!/lib\\//.test(req.url)) {\n        const { path, url, method, headers, query, body } = req;\n        false &&\n          console.log(\n            'Static request:',\n            { path, url, method, headers, query, body } /* Object.keys(req), */,\n            ...Util.if(\n              Util.filterOutKeys(req.headers, /(^sec|^accept|^cache|^dnt|-length|^host$|^if-|^connect|^user-agent|-type$|^origin$|^referer$)/),\n              () => [],\n              value => ['headers: ', value],\n              Util.isEmpty\n            )\n          );\n      }\n\n      next();\n    });\n\n    /*  app.use((req, res, next) => {\n      let file = req.url.replace(/^\\/?/, '');\n\n      if(/(data|tmp)/.test(req.url)) {\n        console.log(`Data file '${file}'`);\n        file = file.replace(/^\\/?(data\\/|tmp\\/|)/, '');\n        let dir = dirs[file];\n        if(dir) {\n          console.log('Data file ' + file + ' was requested.');\n        }\n      }\n      next();\n    });*/\n\n    /* app.use((req, res, next) => {\n      console.log('Request', req.url);\n      next();\n    });*/\n\n    let logfile;\n\n    app.use((req, res, next) => {\n      let file = req.url.replace(/^\\/?/, '');\n\n      logfile ??= fs.openSync('server.log', 'a+', 0o644);\n      let str;\n      let now = new Date();\n      str = `${now.toISOString().slice(0, 10).replace(/-/g, '')} ${now.toTimeString().slice(0, 8)} ${req.method.padEnd(4)} ${file}\\n`;\n\n      let written = fs.writeSync(logfile, str, 0, str.length);\n\n      console.log('Request: ' + file, `(${written} bytes written)`);\n\n      if(fs.existsSync(file)) {\n        const re = /[^\\n]*'util'[^\\n]*/g;\n        /*let m,\n          data = fs.readFileSync(file, 'utf-8');\n        if((m = re.exec(data))) {\n          console.log('The file ' + file + ` was requested. (${data.length})`, `match @ ${m.index}: ${m[0]}`);\n        }*/\n\n        files.add(file);\n      }\n      next();\n    });\n    app.use('/static', express.static(path.join(p, 'static')));\n    app.use('/modules', express.static(path.join(p, 'node_modules')));\n    app.use('/htm', express.static(path.join(p, 'htm')));\n    app.use('/node_modules', express.static(path.join(p, 'node_modules')));\n    app.use('/overrides', express.static(path.join(p, 'overrides')));\n    app.use('/components', express.static(path.join(p, 'components')));\n    app.use('/lib', express.static(path.join(p, 'lib')));\n    app.use('/tmp', express.static(path.join(p, 'tmp')));\n\n    app.use('/', express.static(p));\n\n    function FindFile(relative) {\n      for(let mnt of mountDirs) {\n        let file = path.join(mnt, relative);\n        const exists = fs.existsSync(file);\n        //console.log('FILE', file,exists);\n\n        if(exists) return mnt;\n      }\n    }\n\n    app.get(/^\\/?(data|tmp|vfs)\\//, async (req, res) => {\n      const file = req.url.replace(/^\\/?(data|tmp|vfs)\\//, '');\n      const dir = dirs[file] ?? FindFile(file);\n      const p = path.resolve(dir, file);\n      console.log('DATA', file, dir, p);\n      let data = await fsPromises.readFile(p, 'utf-8');\n      return res.type('application/json').status(200).send(data);\n\n      //   return res.sendFile(p);\n    });\n\n    app.get('/favicon.ico', (req, res) =>\n      res.sendFile(path.join(p, 'lib/eagle/icon/eagleicon.ico'), {\n        headers: {\n          'Content-Type': 'image/x-icon'\n        }\n      })\n    );\n    app.get(/\\/[^\\/]*\\.js$/, async (req, res) => res.sendFile(path.join(p, req.path)));\n\n    //app.get('/components.js', async (req, res) => res.sendFile(path.join(p, 'components.js')));\n\n    app.get(/\\/[^\\/]*\\.css$/, async (req, res) =>\n      res.sendFile(path.join(p, 'style.css'), {\n        headers: { 'Content-Type': 'text/css', cacheControl: false }\n      })\n    );\n\n    function GetVFSPath(file) {\n      let dir = dirs[file];\n      let ret = file;\n      if(dir) ret = path.join(dir, file);\n\n      // if(ret != file) console.log('GetVFSPath', dir, file);\n      return ret;\n    }\n\n    async function getDescription(file) {\n      // console.log('getDescription()', { file});\n      let str = await fsPromises.readFile(GetVFSPath(file)).then(r => r.toString());\n      let r = [...Util.matchAll('<(/)?(board|schematic|library)[ >]', str)]\n        .map(m => m.index)\n        .sort((a, b) => a - b)\n        .slice(0, 2);\n      let chunk = str.substring(...r);\n      let a = ['<description>', '</description>'];\n      let indexes = a\n        .map(s => new RegExp(s))\n        .map(re => re.exec(chunk))\n        .map(m => m && m.index);\n      let d = chunk.substring(...indexes);\n      if(d.startsWith('<description')) return Util.decodeHTMLEntities(d.substring(a[0].length));\n      return '';\n    }\n\n    const descMap = Util.weakMapper(getDescription, new Map());\n\n    async function GetFilesList(dir = './tmp', opts = {}) {\n      let { filter = '.*\\\\.(brd|sch|lbr|GBL|GTL|GKO|ngc)$', descriptions = false, names } = opts;\n      const re = new RegExp(filter, 'i');\n      const f = ent => re.test(ent);\n\n      console.log('GetFilesList()', { filter, descriptions }, ...(names ? [names.length] : []));\n\n      let dirmap = {};\n\n      //    if(!names) names = [...(await fsPromises.readdir(dir))].filter(f);\n      dirmap = mountDirs.reduce((acc, dir) => {\n        console.log('ReadDirRecursive', dir);\n        for(let entry of ReadDirRecursive(dir)) {\n          if(entry.endsWith('/')) continue;\n          if(!f(entry)) continue;\n          let relative = entry.startsWith(dir + '/') ? entry.slice(dir.length + 1) : entry;\n          acc[relative] = dir;\n          dirs[relative] = dir;\n        }\n        return acc;\n      }, {});\n\n      //   console.log('dirmap', dirmap);\n      if(!names) names = Object.keys(dirmap);\n      console.log('names', names.length);\n      return Promise.all(\n        names\n          //.map(entry => dirs[entry] +'/'+entry)\n          .reduce((acc, file) => {\n            let dir = dirs[file];\n            let abs = dir + '/' + file;\n            let description = descriptions ? descMap(file) : descMap.get(file);\n            //   console.log('descMap:', util.inspect(descMap, { depth: 1 }));\n            let obj = {\n              name: file,\n              //file,\n              dir: dirs[file]\n            };\n            if(typeof description == 'string') obj.description = description;\n            acc.push(\n              fsPromises\n                .stat(abs)\n                .then(({ ctime, mtime, mode, size }) =>\n                  Object.assign(obj, {\n                    mtime: Util.toUnixTime(mtime),\n                    time: Util.toUnixTime(ctime),\n                    mode: `0${(mode & 0x09ff).toString(8)}`,\n                    size\n                  })\n                )\n                .catch(err => {})\n            );\n            return acc;\n          }, [])\n      ).then(a => a.filter(i => i != null));\n    }\n\n    function FilesURLs(list) {\n      const base_url = list[0].replace(/\\/[^\\/]*$/, '');\n      const files = list.map(url => url.replace(/.*\\//g, ''));\n      return { base_url, files };\n    }\n    //app.use(\"/serialport\", remoteSerialPort.http({ verbose: true }));\n\n    app.get(/\\/list-serial/, async (req, res) => {\n      const list = await SerialPort.list();\n\n      res.json(list.filter(port => ['manufacturer', 'pnpId', 'vendorId', 'productId'].some(key => port[key])));\n    });\n\n    app.ws('/serial', async (ws, req) => {\n      const { port } = req.body;\n      console.debug('Object.keys(req)', Object.keys(req));\n\n      const duplex = WebSocket.createWebSocketStream(ws, { encoding: 'utf8' });\n\n      let serial = new SerialStream(port || '/dev/tnt1');\n\n      duplex.on('data', async data => {\n        data = data + '' + '\\r\\n';\n\n        console.debug('ws -> serial:', escape(data));\n\n        serial.write(data);\n        serial.flush();\n      });\n\n      serial.on('data', async data => {\n        data = (data + '').replace(/\\r?\\n?$/, '');\n\n        console.debug('serial -> ws:', escape(data));\n        duplex.write(data);\n      });\n\n      console.debug('websocket:', Util.getMethods(ws, Infinity, 0));\n    });\n\n    app.post(/\\/serial/, async (req, res) => {\n      const { body } = req;\n      const { port } = body;\n    });\n    const configFile = 'config.json';\n    const safeStat = Util.tryFunction(\n      f => filesystem.stat(f),\n      st => st,\n      () => {}\n    );\n\n    app.get(/\\/config/, async (req, res) => {\n      let str = '',\n        data = {},\n        time = 0;\n      Util.tryCatch(\n        () => filesystem.readFile(configFile),\n        c => {\n          str = c;\n          let stat = safeStat(configFile);\n          console.log('stat:', stat);\n          if(Util.isObject(stat.mtime)) time = stat.mtime.getTime();\n        },\n        () => (str = '{}')\n      );\n      let config = Util.tryCatch(\n        () => JSON.parse(str),\n        o => o,\n        () => ({})\n      );\n      console.log('config:', config);\n\n      res.json({ config, time, hash: Util.hashString(str) });\n    });\n    app.post(/\\/config/, async (req, res) => {\n      const { body } = req;\n      let text = body.toString();\n      console.log('text:', text);\n      let ret = filesystem.writeFile(configFile, text);\n      console.log('ret:', ret);\n      let stat = safeStat(configFile);\n      res.json({\n        size: ret,\n        time: stat.mtime.getTime(),\n        hash: Util.hashString(text)\n      });\n    });\n\n    app.get(/\\/github/, async (req, res) => {\n      Util.tryCatch(\n        async () => {\n          const { body } = req;\n          const url = Util.parseURL(req.url);\n          const { location, query } = url;\n          let args = location.split(/\\//g).filter(p => !/(^github$|^$)/.test(p));\n          let options = { ...query, ...body };\n\n          if(args.length > 0) {\n            const [owner, repo, dir, filter] = args;\n            Util.weakAssign(options, { owner, repo, dir, filter });\n          }\n\n          console.log(`GET ${location}`, { args, query, options });\n\n          let result;\n          const { owner, repo, dir, filter, tab, after } = options;\n\n          if(owner && repo && dir) result = await GithubListContents(owner, repo, dir, filter && new RegExp(filter, 'g'));\n          /*if(owner && (tab || after))*/ else {\n            let proxyUrl = Util.makeURL({\n              ...url,\n              protocol: 'https',\n              host: 'github.com',\n              location: ['', ...args].join('/')\n            });\n            console.log(`PROXY ${proxyUrl}`);\n\n            let response = await fetch(proxyUrl);\n            let type = response.headers['content-type'];\n\n            console.log(`RESPONSE`, response.url, type);\n            let data = await response.text();\n            res.send(data);\n            //, 200, { headers: { 'content-type': type }});\n            return;\n          }\n\n          res.json(FilesURLs(result.map(file => file.download_url)));\n        },\n        () => {},\n        Util.putError\n      );\n    });\n\n    app.post(/\\/github.*/, async (req, res) => {\n      const { body } = req;\n      let result;\n      const { owner, repo, dir, filter } = body;\n      console.log('POST github', { owner, repo, dir, filter });\n\n      res.json(\n        await GithubListContents(owner, repo, dir, filter && new RegExp(filter, 'g'))\n          .then(result => FilesURLs(result.map(file => file.download_url)))\n          .catch(error => ({ error }))\n      );\n    });\n\n    app.get(/^\\/!urls/, async (req, res) => res.json({ files: [...files].sort() }));\n    app.get(/^\\/files/, async (req, res) => res.json({ files: await GetFilesList() }));\n    app.post(/^\\/(files|list)(.html|)/, async (req, res) => {\n      const { body } = req;\n      let { filter = '.*', descriptions, names } = body;\n      let opts = { filter };\n      if(descriptions) opts.descriptions = descriptions;\n\n      if(names !== undefined) {\n        if(typeof names == 'string') names = names.split(/\\n/g);\n        if(Util.isArray(names)) names = names.map(name => name.replace(/.*\\//g, ''));\n        opts.names = names;\n      }\n      let files = await GetFilesList('tmp', opts);\n      console.log('POST files', util.inspect(files, { breakLength: Infinity, colors: true, maxArrayLength: 10, compact: 1 }));\n      res.json({\n        files\n      });\n    });\n\n    app.get('/index.html', async (req, res) => {\n      let data = await fsPromises.readFile(path.join(p, 'index.html'));\n      res.send(data.toString().replace(/<TS>/g, Util.unixTime() + ''));\n    });\n    app.get('/contours', RequestContours);\n    app.post('/contours', RequestContours);\n\n    app.post('/save', async (req, res, next) => {\n      //   const filename = (req.headers['content-disposition']||'').replace(new RegExp('.*\"([^\"]*)\".*','g'), '$1') || 'output.svg';\n      /*    const filename = path.join(process.cwd(), 'tmp', 'upload-' + Util.toUnixTime(Date.now()) + '.txt');\n      let output = fs.createWriteStream(filename, { autoClose: true, emitClose: true });\n      let s = req.pipe(output);\n      console.log('s', Util.className(s));\n      let data;\n      s.on('close', () => Util.waitFor(1000).then(() => end()));\n\n      //  req.on('end', () => Util.waitFor(500).then(() => end()));\n\n      function end() {\n        data = fs.readFileSync(filename).toString();\n        console.log('req end', { data });\n        res.end(data + '\\n\\nUpload complete');\n        next();\n      }\n  */\n\n      const { body } = req;\n      console.log('req.headers:', req.headers);\n      console.log('body:', Util.abbreviate(body), Util.className(body), Util.inspect(body));\n      console.log('save body:', typeof body == 'string' ? Util.abbreviate(body, 100) : body);\n      let st,\n        err,\n        filename = (req.headers['content-disposition'] || '').replace(new RegExp('.*\"([^\"]*)\".*', 'g'), '$1') || 'output.svg';\n      filename = 'tmp/' + filename.replace(/^tmp\\//, '');\n      await fsPromises\n        .writeFile(filename, body, { mode: 0x0180, flag: 'w' })\n        .then(() => (st = fs.statSync(filename)))\n        .catch(error => (err = error));\n\n      if(err) {\n        console.log('save error:', err);\n        res.json(err);\n      } else {\n        console.log('saved:', filename, `${st.size} bytes`);\n        res.json({ size: st.size, filename });\n      }\n    });\n\n    app.ws('/ws', Socket.endpoint);\n    app.ws('/.websocket', Socket.endpoint);\n    app.ws('/ws/.websocket', Socket.endpoint);\n\n    app.get('/', (req, res) => {\n      res.redirect(302, '/index.html');\n    });\n\n    app.listen(port, () => {\n      console.log(`Ready at http://127.0.0.1:${port}`);\n    });\n  }\n  /*\n  try {\n    await main();\n  } catch(err) {\n    Util.putError(err);\n  }*/\n  Util.callMain(main, true);\n",
			"file": "server.js",
			"file_size": 26762,
			"file_write_time": 132867795003786168,
			"settings":
			{
				"buffer_size": 28116,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					25,
					2,
					"right_delete",
					null,
					"AgAAAO8BAAAAAAAA7wEAAAAAAAAJAAAAUmVhZEJKU09O7wEAAAAAAADvAQAAAAAAAAEAAAAs",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO8BAAAAAAAA+AEAAAAAAAAAAAAAAADwvw"
				],
				[
					30,
					2,
					"right_delete",
					null,
					"AgAAAAYCAAAAAAAABgIAAAAAAAAKAAAAV3JpdGVCSlNPTgYCAAAAAAAABgIAAAAAAAABAAAALA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAYCAAAAAAAAEAIAAAAAAAAAAAAAAADwvw"
				],
				[
					37,
					1,
					"indent",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAimgAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "lib/eagle/element.js",
			"settings":
			{
				"buffer_size": 31924,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAMoHAAAAAAAAywcAAAAAAAAAAAAAywcAAAAAAADMBwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMoHAAAAAAAAygcAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "time-helpers.js",
			"settings":
			{
				"buffer_size": 1068,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"install ",
				"Package Control: Install Package"
			],
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"prett",
				"JsPrettier: Format Code"
			],
			[
				"prettier",
				"JsPrettier: Format Code"
			],
			[
				"isntall",
				"Package Control: Install Package"
			],
			[
				"fo",
				"Format CSS: Expanded"
			],
			[
				"forma",
				"Format CSS: Expanded"
			],
			[
				"css",
				"Format CSS: Expanded"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"tidy",
				"Tidy CSS"
			],
			[
				"edut ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"build",
				"Build With: prettier ${file_path}"
			],
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"",
				"Bookmarks: Select Previous"
			],
			[
				"schem",
				"Schemr: Random scheme"
			],
			[
				"extra",
				"Extract Sublime Package: Extract all packages"
			],
			[
				"Package Control: ",
				"Package Control: List Packages"
			],
			[
				"extrac",
				"Extract Sublime Package: Extract all packages"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"packa",
				"Install Package Control"
			],
			[
				"edit",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"schemeed",
				"SchemeEditor: Edit Scheme (file picker)"
			],
			[
				"scheme",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"repo",
				"Package Control: Remove Repository"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"upgra",
				"Package Control: Upgrade Package"
			],
			[
				"adv",
				"Package Control: Advanced Install Package"
			],
			[
				"ad",
				"Package Control: Advanced Install Package"
			],
			[
				"adva",
				"Package Control: Advanced Install Package"
			],
			[
				"edi",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"edit ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"remove pac",
				"Package Control: Remove Package"
			],
			[
				"outl",
				"Browse Mode: Outline (Right)"
			],
			[
				"debugger",
				"Debugger: Add or Select Configuration"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 442.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv",
		"/home/roman/Projects/plot-cv/CMakeFiles"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/qjsm.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-server-http.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet-server.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/minnet.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/imagePipeline.js",
		"/home/roman/Projects/plot-cv/test-rpc.js",
		"/home/roman/Projects/plot-cv/ast-shell.js",
		"/home/roman/Projects/plot-cv/clang-ast.js",
		"/home/roman/Projects/plot-cv/date-helpers.js",
		"/home/roman/Projects/plot-cv/scripts/collapse-imports.sh",
		"/home/roman/Projects/plot-cv/plot-cv.sublime-project",
		"/home/roman/Projects/plot-cv/cv-shell.js",
		"/home/roman/Projects/plot-cv/lib/util.js",
		"/home/roman/Projects/plot-cv/time-helpers.js",
		"/home/roman/Projects/plot-cv/io-helpers.js",
		"/home/roman/Projects/plot-cv/lib/eda/circuitjs.js",
		"/home/roman/Projects/plot-cv/lib/eda/values.js",
		"/home/roman/Projects/plot-cv/lib/eda/colorCoding.js",
		"/home/roman/Projects/an-tronics/eagle/Headphone-Amplifier-ClassAB-alt.sch",
		"/home/roman/Projects/plot-cv/lib/json/path.js",
		"/home/roman/Projects/plot-cv/commands.js",
		"/home/roman/Projects/plot-cv/lib/eagle/ref.js",
		"/home/roman/Projects/plot-cv/lib/deep.js",
		"/home/roman/Projects/plot-cv/lib/eagle/node.js",
		"/home/roman/Projects/plot-cv/package.json",
		"/home/roman/Projects/plot-cv/lib/json/diff.js",
		"/home/roman/Projects/plot-cv/lib/eagle/renderer.js",
		"/home/roman/Projects/plot-cv/server.js",
		"/home/roman/Projects/plot-cv/lib/eagle/document.js",
		"/home/roman/Projects/plot-cv/test-bjson.js",
		"/home/roman/Projects/plot-cv/lib/grammars/CSV.g4",
		"/home/roman/Projects/plot-cv/lib/eagle/element.js",
		"/home/roman/Projects/plot-cv/main.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/test-rpc.js",
		"/home/roman/Projects/plot-cv/eagle-shell.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-predicate.c",
		"/home/roman/Projects/plot-cv/quickjs/defs.cmake",
		"/home/roman/Projects/plot-cv/quickjs/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-debugger.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-debugger-transport-win.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/char-utils.h",
		"/home/roman/Projects/plot-cv/contours-802.json",
		"/home/roman/Projects/plot-cv/quickjs/list.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/queue.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/queue.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/predicate.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-debugger-transport-unix.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.c",
		"/home/roman/Projects/plot-cv/lib/build/compileCommand.js",
		"/home/roman/Projects/plot-cv/compile_commands.js",
		"/home/roman/Projects/plot-cv/contours-801.json",
		"/home/roman/Projects/plot-cv/lib/dom/xpath.js",
		"/home/roman/Projects/plot-cv/lib/compileCommand.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-path.c",
		"/home/roman/Projects/plot-cv/test-css3.js",
		"/home/roman/Projects/plot-cv/lib/parse/grammar.js",
		"/home/roman/Projects/plot-cv/list-exports.js",
		"/home/roman/Projects/plot-cv/test-parse.js",
		"/home/roman/Projects/plot-cv/lib/grammars/xpath.g4",
		"/home/roman/Projects/plot-cv/lib/grammars/css3.g4",
		"/home/roman/Projects/plot-cv/ini-grammar.js",
		"/home/roman/Projects/plot-cv/test-ini.js",
		"/home/roman/Projects/plot-cv/lib/parse/fn.js",
		"/home/roman/Projects/plot-cv/grammar-css3.js",
		"/home/roman/Projects/plot-cv/test-childprocess.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test-css3.js",
		"/home/roman/Projects/plot-cv/lib/xml/parse.js",
		"/home/roman/Projects/plot-cv/lib/xml/util.js",
		"/home/roman/Projects/plot-cv/lib/fd-graph.js",
		"/home/roman/Projects/plot-cv/lib/geom/graph.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/js/cvVideo.js",
		"/home/roman/Projects/plot-cv/cmake/imgui-viewer.cmake",
		"/home/roman/Projects/plot-cv/cmake/highgui-viewer.cmake",
		"/home/roman/Projects/plot-cv/test-ecmascript2.js",
		"/home/roman/Projects/plot-cv/lib/ecmascript.js",
		"/home/roman/Projects/plot-cv/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/lib/parse/lexer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-deep.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-xml.c",
		"/home/roman/Projects/plot-cv/fontsample.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_xml.js",
		"/home/roman/Projects/plot-cv/cmake/OpenCV.cmake",
		"/home/roman/Projects/plot-cv/lib/misc.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/lib/geom/line.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/list-exports.js",
		"/home/roman/Projects/plot-cv/image-helpers.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/line.js",
		"/home/roman/Projects/plot-cv/test-line.js",
		"/home/roman/Projects/plot-cv/lib/geom/rect.js",
		"/home/roman/Projects/plot-cv/lib/dom/element.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/location.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/location.h",
		"/home/roman/Projects/plot-cv/lib/pointer.js",
		"/home/roman/Projects/plot-cv/lib/preact.m.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/jslexer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/path.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.c",
		"/home/roman/Projects/circuitjs1-1.2.2/modified_files/CirSim.java",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/extendArray.js",
		"/home/roman/Projects/plot-cv/lib/eagle/project.js",
		"/home/roman/Projects/plot-cv/test-video.js",
		"/home/roman/Projects/plot-cv/config.js",
		"/home/roman/Projects/plot-cv/lib/iterator/helpers.js",
		"/home/roman/Projects/plot-cv/lib/iterable.js",
		"/home/roman/Projects/plot-cv/lib/iterator.js",
		"/home/roman/Projects/plot-cv/test-mmap.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lexer.h",
		"/home/roman/Projects/plot-cv/lib/geom/point.js",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-libc.c",
		"/home/roman/Projects/plot-cv/eagle-commands.js",
		"/home/roman/Projects/plot-cv/clang-list.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/cmake/FindMbedTLS.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/cmake/UseMultiArch.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/cmake/BuildMbedTLS.cmake",
		"/home/roman/Projects/plot-cv/cmake/FindQuickJS.cmake",
		"/home/roman/Projects/plot-cv/quickjs/cmake/CheckFlags.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-ffi/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-ffi/cmake/UseMultiArch.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-glfw/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/portmidi-testio.c",
		"/home/roman/Projects/plot-cv/qjs-opencv/tests/test_freetype.js",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-opcode.h"
	],
	"find":
	{
		"height": 28.0
	},
	"find_in_files":
	{
		"height": 185.0,
		"where_history":
		[
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,,-*/libwebsockets/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/build-*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,,-*/libwebsockets/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/build-*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/build-*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/build/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,-*/indexed*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*.min.js,-*/quickjs-2*/*,-*/indexex*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/indexex*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/indexex/*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake,<open files>",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/quickjs-k*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnode*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/qjs-cache*/*,-*/txiki*/*,-*/qnoed*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,-*/qjs-cache*/*,-*/txiki*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs-2*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,*/quickjs-2*/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,*.c,*.h,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs/*,-*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp,/home/roman/Projects/plot-cv/cmake,*.cmake",
			"/home/roman/Projects/plot-cv,*.js,*.cmake,-*/node_modules/*,-*/quickjs/*,-*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs/*,-*/acorn/*,/home/roman/Projects/plot-cv/src,*.cpp,*.hpp",
			"/home/roman/Projects/plot-cv,*.js,*.cpp,*.hpp,-*/node_modules/*,-*/quickjs/*,-*/acorn/*",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs/*,-*/acorn/*",
			"/home/roman/Projects/plot-cv,/home/roman/Projects/plot-cv/lib,*.js,-*/node_modules/*,-*/quickjs/*,-*/acorn/*",
			"/home/roman/Projects/plot-cv,/home/roman/Projects/plot-cv/lib,*.js,-*/node_modules/*,-*/quickjs/*",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*,-*/quickjs/*",
			"/home/roman/Projects/plot-cv,*.js,-*/node_modules/*",
			"/home/roman/Projects/plot-cv,*.js",
			"/home/roman/Projects/plot-cv/quickjs,*.c,*.h",
			"/home/roman/Projects/plot-cv/src,*.cpp,*.hpp",
			"/home/roman/Projects/plot-cv/quickjs,*.c,*.h"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"ReadBJ",
			"io-help",
			"BJSON",
			"import express from 'express';\nimport * as path from 'path';\nimport * as util from 'util';\nimport Util from './lib/util.js';\nimport bodyParser from 'body-parser';\nimport expressWs from 'express-ws';\nimport { Alea } from './lib/alea.js';\nimport crypto from 'crypto';\nimport fetch from 'isomorphic-fetch';\nimport { exec } from 'promisify-child-process';\nimport * as fs from 'fs';\nimport { promises as fsPromises } from 'fs';\nimport { IfDebug, LogIfDebug, ReadFile, LoadHistory, ReadJSON, MapFile,  WriteFile, WriteJSON,  DirIterator, RecursiveDirIterator, ReadDirRecursive, Filter, FilterImages, SortFiles, StatFiles } from './io-helpers.js';\nimport { Console } from 'console';\nimport SerialPort from 'serialport';\nimport SerialStream from '@serialport/stream';\n//import SerialBinding from '@serialport/bindings';\nimport Socket from './webSocket.js';\nimport WebSocket from 'ws';\nimport PortableFileSystem from './lib/filesystem.js';\nimport PortableChildProcess, { SIGTERM, SIGKILL, SIGSTOP, SIGCONT } from './lib/childProcess.js';\nimport { Repeater } from './lib/repeater/repeater.js';\nimport { Message } from './message.js';\n\n//SerialStream.Binding = SerialBinding;\nlet names = [],\n  dirs = {};\n\nlet filesystem, childProcess;\nconst port = process.env.PORT || 3000;\n\nconst files = new Set();\nconst hash = crypto.createHash('sha1');\n\nconst prng = new Alea();\nprng.seed(Date.now());\nconsole.log('random:', prng.uint32());\nconsole.log('randStr:', Util.randStr(8, null, prng));\n\nlet app = express();\nexpressWs(app, null, { perMessageDeflate: false });\nconst p = path.join(path.dirname(process.argv[1]), '.');\n\nlet mountDirs = ['data', '../an-tronics/eagle', '../insider/eagle', '../lc-meter/eagle', '../pictest/eagle'];\nlet tmpDir = './tmp';\n\nasync function waitChild(proc) {\n  const { pid, stdout, stderr, wait } = proc;\n  console.log('Process ID =', pid);\n  let ret = await wait();\n  console.log('wait() =', ret);\n  return ret;\n}\n\nasync function runMount(dirsIterator) {\n  for await(let dirs of await dirsIterator) {\n    console.log(`runMount`, dirs);\n    console.debug(`Mount ${dirs} to tmp/`);\n\n    let proc = childProcess('./mount-tmp.sh', ['-f', ...Util.unique(dirs || [])], {\n      env: { OPTS: 'auto_unmount,atomic_o_trunc,big_writes,kernel_cache' }\n    });\n    async function readData(output, callback = d => {}) {\n      try {\n        for await(let data of new Repeater((push, stop) => {\n          output.on('data', chunk => push(chunk.toString()));\n          proc.on('exit', stop);\n          //          output.on('close', () => push(null));\n        })) {\n          if(data === null) {\n            console.log('output EOF');\n            //return;\n          }\n          if(typeof data == 'string') data.split(/\\n/g).forEach(line => callback(line));\n        }\n      } catch(e) {\n        return e;\n      }\n    }\n    readData(proc.stdout);\n    readData(proc.stderr, data => console.log('stderr data:', Util.abbreviate(Util.escape(data), Util.getEnv('COLUMNS') || 120)));\n    let exitCode = await waitChild(proc);\n    console.log('exitCode:', exitCode);\n    return exitCode;\n  }\n}\n\nasync function RequestContours(req, res) {\n  const { body } = req;\n  const { contours, frame, width, height } = body;\n  console.log(`${req.url}`, { contours, frame, width, height });\n\n  res.status(200).send('OK');\n\n  Socket.sendAll({ type: 'CONTOURS', origin: '*', recipient: '*', body });\n\n  //  res.json({ status: 'OK' });\n}\n\n//console.log('Serving from', p);\n\nasync function main() {\n  const { stdout, stderr } = process;\n  globalThis.console = new Console({\n    stdout,\n    stderr,\n    inspectOptions: {\n      breakLength: 120,\n      maxStringLength: Infinity,\n      maxArrayLength: 30,\n      compact: 2\n    }\n  });\n  await PortableChildProcess(cp => (childProcess = cp));\n\n  Socket.timeoutCycler();\n\n  /*  let mounter = runMount(\n    new Repeater(async (push, stop) => {\n      while(true) await push(mountDirs);\n    })\n  ).then(exitCode => {\n    console.log('runMount', { exitCode });\n    if(exitCode == 127) {\n      Util.exit(127);\n    }\n    return exitCode;\n  });*/\n  console.log('mountDirs', { mountDirs });\n\n  app.use((req, res, next) => {\n    //    console.log(\"req\", req.url, req.method);\n    next();\n  });\n  app.use(express.text({ type: 'application/xml', limit: '16384kb' }));\n\n  app.use(bodyParser.json({ limit: '200mb' }));\n  app.use(bodyParser.raw({ type: 'text/plain;charset=UTF-8', limit: '524288kb' }));\n  app.use(bodyParser.raw({ type: 'text/plain', limit: '524288kb' }));\n  app.use(bodyParser.raw({ type: 'application/octet-stream', limit: '524288kb' }));\n  app.use(bodyParser.raw({ type: 'multipart/mixed', limit: '16384kb' }));\n\n  app.use((req, res, next) => {\n    res.append('Access-Control-Allow-Origin', `https://api.github.com, http://127.0.0.1:${port}`);\n    res.append('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS');\n    res.append('Access-Control-Allow-Headers', 'Content-Type, Accept, Authorization');\n    res.append('Access-Control-Allow-Credentials', 'true');\n    next();\n  });\n\n  function SendRaw(res, file, data, type = 'application/octet-stream') {\n    res.setHeader('Content-Disposition', `attachment; filename=\"${path.basename(file)}\"`);\n\n    if(type) res.setHeader('Content-Type', type);\n    if(data) return res.send(data);\n    else if(file && typeof file == 'string') {\n      console.log('sendFile', { file });\n      return res.sendFile(file, { root: process.cwd() });\n    }\n  }\n\n  const convertToGerber = async (boardFile, opts = {}) => {\n    console.log('convertToGerber', { boardFile, opts });\n    let { layers = opts.side == 'outline' ? ['Measures'] : opts.drill ? ['Drills', 'Holes'] : [opts.front ? 'Top' : 'Bottom', 'Pads', 'Vias'], format = opts.drill ? 'EXCELLON' : 'GERBER_RS274X', data, fetch = false, front, back } = opts;\n    const base = path.basename(boardFile, '.brd');\n    const formatToExt = (layers, format) => {\n      if(opts.drill || format.startsWith('EXCELLON') || layers.indexOf('Drills') != -1 || layers.indexOf('Holes') != -1) return 'TXT';\n      if(layers.indexOf('Bottom') != -1 || format.startsWith('GERBER')) return opts.side == 'outline' ? 'GKO' : front ? 'GTL' : 'GBL';\n\n      return 'rs274x';\n    };\n    const gerberFile = `./tmp/${base}.${formatToExt(layers, format)}`;\n    const cmd = `eagle -X -d ${format} -o \"${gerberFile}\" \"${boardFile}\" ${layers.join(' ')}`;\n    console.log(`executing '${cmd}'`);\n    const child = exec(`${cmd} 2>&1 0</dev/null`, {});\n    // do whatever you want with `child` here - it's a ChildProcess instance just\n    // with promise-friendly `.then()` & `.catch()` functions added to it!\n    let output = '';\n    child.stdout.on('data', data => (output += data));\n    child.stderr.on('data', data => (output += data));\n    const { stdout, stderr, code, signal } = await child;\n    console.log(`code: ${code}`);\n    //  console.log(`output: ${output}`);\n    if(code !== 0) throw new Error(output);\n    if(output) output = output.replace(/\\s*\\r*\\n/g, '\\n');\n    let result = { code, output };\n    if(opts.fetch) result.data = await (await fsPromises.readFile(GetVFSPath(gerberFile))).toString();\n    result.file = gerberFile;\n    console.log('convertToGerber result =', result);\n    return result;\n  };\n\n  const gerberEndpoint = async (req, res) => {\n    const { body } = req;\n    let { board, save, file: filename, raw, ...opts } = body;\n    let result;\n    console.log('Request /gerber', { board, save, opts });\n    try {\n      result = await convertToGerber(board, opts);\n      if(save) {\n        filename = filename || typeof save == 'string' ? save : null;\n        filename = `tmp/` + filename.replace(/.*\\/([^\\/])*\\.[^\\/.]*$/g, '$1');\n        await fsPromises.writeFile(filename, result.data).then(res => console.log('Wrote file:', res));\n      }\n    } catch(error) {\n      result = { error };\n    }\n    console.log('Response /gerber', Util.filterOutKeys(result, /(output|data)/));\n\n    if(/get/i.test(req.method) || raw) {\n      const { file } = result;\n      return SendRaw(res, file, result.data);\n    }\n    res.json(result);\n  };\n\n  app.get(/^\\/gerber/, gerberEndpoint);\n  app.post(/^\\/gerber/, gerberEndpoint);\n\n  const gerberToGcode = async (gerberFile, allOpts = {}) => {\n    const basename = gerberFile.replace(/.*\\//g, '').replace(/\\.[^.]*$/, '');\n    let { fetch, data, raw, ...opts } = allOpts;\n    opts = {\n      basename,\n      zsafe: '1mm',\n      zchange: '2mm',\n      zwork: '-1mm',\n      zdrill: '-2mm',\n      zcut: '-2mm',\n      'cutter-diameter': '1mm',\n      'drill-feed': 1000,\n      'drill-speed': 10000,\n      'mill-feed': 600,\n      'mill-speed': 16000,\n      'cut-feed': 200,\n      'cut-speed': 10000,\n      'cut-infeed': '1mm',\n\n      'output-dir': './tmp/',\n      ...opts\n    };\n    if(opts.front == undefined && opts.back == undefined && opts.drill == undefined) opts.back = gerberFile;\n    let sides = [];\n\n    for(let side of ['front', 'back', 'drill', 'outline'])\n      if(side in opts) {\n        if(typeof opts[side] != 'string') opts[side] = gerberFile;\n        sides.push(side);\n      }\n\n    if(opts.voronoi && !opts.vectorial) opts.vectorial = 1;\n\n    console.debug(`gerberToGcode`, opts);\n    function makePath(ext, side, base = basename) {\n      return path.join(opts['output-dir'], `${base}_${side}.${ext}`);\n    }\n\n    const params = [...Object.entries(opts)].filter(([k, v]) => typeof v == 'string' || typeof v == 'number' || (typeof v == 'boolean' && v === true)).map(([k, v]) => `--${k}${typeof v != 'boolean' && v != '' ? '=' + v : ''}`);\n    console.log('Request /gcode', { gerberFile, fetch, raw });\n    //console.warn(`gerberToGcode`, Util.abbreviate(gerberFile), { gcodeFile, opts });\n\n    let wait;\n    try {\n      const cmd = `pcb2gcode ${params.join(' ')} 2>&1`;\n      console.warn(`executing '${cmd}'`);\n      const child = exec(cmd, {});\n      // do whatever you want with `child` here - it's a ChildProcess instance just\n      // with promise-friendly `.then()` & `.catch()` functions added to it!\n      let output = '';\n      child.stdout.on('data', data => (output += data));\n      child.stderr.on('data', data => (output += data));\n      wait = await child.catch(error => ({ code: -1, error }));\n\n      const { stdout, stderr, code, signal } = wait;\n      if(output) output = Util.abbreviate(output.replace(/\\s*\\r*\\n/g, '\\n'), 200);\n      console.log('Response /gcode', { stdout, output, sides });\n\n      //   if(code !== 0) throw new Error(output);\n\n      const gcodeFile = makePath('ngc', sides[0]);\n      const svgFile = makePath('svg', sides[0], 'processed');\n\n      for(let [file, to] of sides.map(side => [makePath('svg', side, 'processed'), makePath('svg', side)])) if(fs.existsSync(file)) fs.renameSync(file, to);\n\n      let files = sides.map(side => [side, makePath('ngc', side)]).filter(([side, file]) => fs.existsSync(file));\n      console.log('Response /gcode', { files });\n\n      let result = { code, output, cmd };\n      if(fetch) {\n        for(let [side, file] of files) result[side] = await (await fsPromises.readFile(GetVFSPath(file))).toString();\n      }\n      if(/*/get/i.test(req.method) || */ raw) {\n        const { file } = result;\n        return SendRaw(res, file, result.data);\n      }\n      result.files = Object.fromEntries(files);\n      console.log('Response /gcode', Util.filterOutKeys(result, /(Xoutput|data)/));\n      return result;\n    } catch(error) {\n      Util.putError(error);\n    }\n  };\n\n  let gcodeEndpoint = async (req, res) => {\n    const { body } = req;\n    let { file, ...opts } = body;\n    let result;\n\n    try {\n      result = await gerberToGcode(file, opts).catch(error => ({ error }));\n    } catch(error) {\n      result = { error };\n    } finally {\n      res.json(result);\n    }\n  };\n  app.post(/^\\/gcode/, gcodeEndpoint);\n  app.get(/^\\/gcode/, gcodeEndpoint);\n\n  const GithubListContents = async (owner, repo, dir, filter) => {\n    const url = `https://api.github.com/repos/${owner}/${repo}/contents/${dir}`;\n    console.log(`GITHUB list`, { owner, repo, dir, filter });\n    let response = await fetch(url);\n    let result = JSON.parse(await response.text());\n    console.log('result', result);\n    if(filter) {\n      const re = new RegExp(filter, 'g');\n      result = result.filter(({ name }) => re.test(name));\n    }\n    return result;\n  };\n\n  app.use(async (req, res, next) => {\n    if(!/overrides\\//.test(req.path)) {\n      let relativePath = path.join('.', req.path);\n      let overridePath = path.join('overrides', req.path);\n      let isFile = false;\n\n      await fsPromises\n        .stat(GetVFSPath(relativePath))\n        .then(st => (isFile = st.isFile()))\n        .catch(err => {});\n\n      let override = false;\n\n      if(isFile)\n        await fsPromises\n          .access(GetVFSPath(overridePath), fs.constants.F_OK)\n          .then(() => (override = true))\n          .catch(err => {});\n\n      if(override) {\n        console.log('Static request:', { overridePath, override, res });\n\n        return res.redirect('/' + overridePath);\n      }\n    }\n    if(/lib\\/preact.js/.test(req.url)) req.url = '/lib/preact.mjs';\n\n    if(!/lib\\//.test(req.url)) {\n      const { path, url, method, headers, query, body } = req;\n      false &&\n        console.log(\n          'Static request:',\n          { path, url, method, headers, query, body } /* Object.keys(req), */,\n          ...Util.if(\n            Util.filterOutKeys(req.headers, /(^sec|^accept|^cache|^dnt|-length|^host$|^if-|^connect|^user-agent|-type$|^origin$|^referer$)/),\n            () => [],\n            value => ['headers: ', value],\n            Util.isEmpty\n          )\n        );\n    }\n\n    next();\n  });\n\n  /*  app.use((req, res, next) => {\n    let file = req.url.replace(/^\\/?/, '');\n\n    if(/(data|tmp)/.test(req.url)) {\n      console.log(`Data file '${file}'`);\n      file = file.replace(/^\\/?(data\\/|tmp\\/|)/, '');\n      let dir = dirs[file];\n      if(dir) {\n        console.log('Data file ' + file + ' was requested.');\n      }\n    }\n    next();\n  });*/\n\n  /* app.use((req, res, next) => {\n    console.log('Request', req.url);\n    next();\n  });*/\n\n  let logfile;\n\n  app.use((req, res, next) => {\n    let file = req.url.replace(/^\\/?/, '');\n\n    logfile ??= fs.openSync('server.log', 'a+', 0o644);\n    let str;\n    let now = new Date();\n    str = `${now.toISOString().slice(0, 10).replace(/-/g, '')} ${now.toTimeString().slice(0, 8)} ${req.method.padEnd(4)} ${file}\\n`;\n\n    let written = fs.writeSync(logfile, str, 0, str.length);\n\n    console.log('Request: ' + file, `(${written} bytes written)`);\n\n    if(fs.existsSync(file)) {\n      const re = /[^\\n]*'util'[^\\n]*/g;\n      /*let m,\n        data = fs.readFileSync(file, 'utf-8');\n      if((m = re.exec(data))) {\n        console.log('The file ' + file + ` was requested. (${data.length})`, `match @ ${m.index}: ${m[0]}`);\n      }*/\n\n      files.add(file);\n    }\n    next();\n  });\n  app.use('/static', express.static(path.join(p, 'static')));\n  app.use('/modules', express.static(path.join(p, 'node_modules')));\n  app.use('/htm', express.static(path.join(p, 'htm')));\n  app.use('/node_modules', express.static(path.join(p, 'node_modules')));\n  app.use('/overrides', express.static(path.join(p, 'overrides')));\n  app.use('/components', express.static(path.join(p, 'components')));\n  app.use('/lib', express.static(path.join(p, 'lib')));\n  app.use('/tmp', express.static(path.join(p, 'tmp')));\n\n  app.use('/', express.static(p));\n\n  function FindFile(relative) {\n    for(let mnt of mountDirs) {\n      let file = path.join(mnt, relative);\n      const exists = fs.existsSync(file);\n      //console.log('FILE', file,exists);\n\n      if(exists) return mnt;\n    }\n  }\n\n  app.get(/^\\/?(data|tmp|vfs)\\//, async (req, res) => {\n    const file = req.url.replace(/^\\/?(data|tmp|vfs)\\//, '');\n    const dir = dirs[file] ?? FindFile(file);\n    const p = path.resolve(dir, file);\n    console.log('DATA', file, dir, p);\n    let data = await fsPromises.readFile(p, 'utf-8');\n    return res.type('application/json').status(200).send(data);\n\n    //   return res.sendFile(p);\n  });\n\n  app.get('/favicon.ico', (req, res) =>\n    res.sendFile(path.join(p, 'lib/eagle/icon/eagleicon.ico'), {\n      headers: {\n        'Content-Type': 'image/x-icon'\n      }\n    })\n  );\n  app.get(/\\/[^\\/]*\\.js$/, async (req, res) => res.sendFile(path.join(p, req.path)));\n\n  //app.get('/components.js', async (req, res) => res.sendFile(path.join(p, 'components.js')));\n\n  app.get(/\\/[^\\/]*\\.css$/, async (req, res) =>\n    res.sendFile(path.join(p, 'style.css'), {\n      headers: { 'Content-Type': 'text/css', cacheControl: false }\n    })\n  );\n\n  function GetVFSPath(file) {\n    let dir = dirs[file];\n    let ret = file;\n    if(dir) ret = path.join(dir, file);\n\n    // if(ret != file) console.log('GetVFSPath', dir, file);\n    return ret;\n  }\n\n  async function getDescription(file) {\n    // console.log('getDescription()', { file});\n    let str = await fsPromises.readFile(GetVFSPath(file)).then(r => r.toString());\n    let r = [...Util.matchAll('<(/)?(board|schematic|library)[ >]', str)]\n      .map(m => m.index)\n      .sort((a, b) => a - b)\n      .slice(0, 2);\n    let chunk = str.substring(...r);\n    let a = ['<description>', '</description>'];\n    let indexes = a\n      .map(s => new RegExp(s))\n      .map(re => re.exec(chunk))\n      .map(m => m && m.index);\n    let d = chunk.substring(...indexes);\n    if(d.startsWith('<description')) return Util.decodeHTMLEntities(d.substring(a[0].length));\n    return '';\n  }\n\n  const descMap = Util.weakMapper(getDescription, new Map());\n\n  async function GetFilesList(dir = './tmp', opts = {}) {\n    let { filter = '.*\\\\.(brd|sch|lbr|GBL|GTL|GKO|ngc)$', descriptions = false, names } = opts;\n    const re = new RegExp(filter, 'i');\n    const f = ent => re.test(ent);\n\n    console.log('GetFilesList()', { filter, descriptions }, ...(names ? [names.length] : []));\n\n    let dirmap = {};\n\n    //    if(!names) names = [...(await fsPromises.readdir(dir))].filter(f);\n    dirmap = mountDirs.reduce((acc, dir) => {\n      console.log('ReadDirRecursive', dir);\n      for(let entry of ReadDirRecursive(dir)) {\n        if(entry.endsWith('/')) continue;\n        if(!f(entry)) continue;\n        let relative = entry.startsWith(dir + '/') ? entry.slice(dir.length + 1) : entry;\n        acc[relative] = dir;\n        dirs[relative] = dir;\n      }\n      return acc;\n    }, {});\n\n    //   console.log('dirmap', dirmap);\n    if(!names) names = Object.keys(dirmap);\n    console.log('names', names.length);\n    return Promise.all(\n      names\n        //.map(entry => dirs[entry] +'/'+entry)\n        .reduce((acc, file) => {\n          let dir = dirs[file];\n          let abs = dir + '/' + file;\n          let description = descriptions ? descMap(file) : descMap.get(file);\n          //   console.log('descMap:', util.inspect(descMap, { depth: 1 }));\n          let obj = {\n            name: file,\n            //file,\n            dir: dirs[file]\n          };\n          if(typeof description == 'string') obj.description = description;\n          acc.push(\n            fsPromises\n              .stat(abs)\n              .then(({ ctime, mtime, mode, size }) =>\n                Object.assign(obj, {\n                  mtime: Util.toUnixTime(mtime),\n                  time: Util.toUnixTime(ctime),\n                  mode: `0${(mode & 0x09ff).toString(8)}`,\n                  size\n                })\n              )\n              .catch(err => {})\n          );\n          return acc;\n        }, [])\n    ).then(a => a.filter(i => i != null));\n  }\n\n  function FilesURLs(list) {\n    const base_url = list[0].replace(/\\/[^\\/]*$/, '');\n    const files = list.map(url => url.replace(/.*\\//g, ''));\n    return { base_url, files };\n  }\n  //app.use(\"/serialport\", remoteSerialPort.http({ verbose: true }));\n\n  app.get(/\\/list-serial/, async (req, res) => {\n    const list = await SerialPort.list();\n\n    res.json(list.filter(port => ['manufacturer', 'pnpId', 'vendorId', 'productId'].some(key => port[key])));\n  });\n\n  app.ws('/serial', async (ws, req) => {\n    const { port } = req.body;\n    console.debug('Object.keys(req)', Object.keys(req));\n\n    const duplex = WebSocket.createWebSocketStream(ws, { encoding: 'utf8' });\n\n    let serial = new SerialStream(port || '/dev/tnt1');\n\n    duplex.on('data', async data => {\n      data = data + '' + '\\r\\n';\n\n      console.debug('ws -> serial:', escape(data));\n\n      serial.write(data);\n      serial.flush();\n    });\n\n    serial.on('data', async data => {\n      data = (data + '').replace(/\\r?\\n?$/, '');\n\n      console.debug('serial -> ws:', escape(data));\n      duplex.write(data);\n    });\n\n    console.debug('websocket:', Util.getMethods(ws, Infinity, 0));\n  });\n\n  app.post(/\\/serial/, async (req, res) => {\n    const { body } = req;\n    const { port } = body;\n  });\n  const configFile = 'config.json';\n  const safeStat = Util.tryFunction(\n    f => filesystem.stat(f),\n    st => st,\n    () => {}\n  );\n\n  app.get(/\\/config/, async (req, res) => {\n    let str = '',\n      data = {},\n      time = 0;\n    Util.tryCatch(\n      () => filesystem.readFile(configFile),\n      c => {\n        str = c;\n        let stat = safeStat(configFile);\n        console.log('stat:', stat);\n        if(Util.isObject(stat.mtime)) time = stat.mtime.getTime();\n      },\n      () => (str = '{}')\n    );\n    let config = Util.tryCatch(\n      () => JSON.parse(str),\n      o => o,\n      () => ({})\n    );\n    console.log('config:', config);\n\n    res.json({ config, time, hash: Util.hashString(str) });\n  });\n  app.post(/\\/config/, async (req, res) => {\n    const { body } = req;\n    let text = body.toString();\n    console.log('text:', text);\n    let ret = filesystem.writeFile(configFile, text);\n    console.log('ret:', ret);\n    let stat = safeStat(configFile);\n    res.json({\n      size: ret,\n      time: stat.mtime.getTime(),\n      hash: Util.hashString(text)\n    });\n  });\n\n  app.get(/\\/github/, async (req, res) => {\n    Util.tryCatch(\n      async () => {\n        const { body } = req;\n        const url = Util.parseURL(req.url);\n        const { location, query } = url;\n        let args = location.split(/\\//g).filter(p => !/(^github$|^$)/.test(p));\n        let options = { ...query, ...body };\n\n        if(args.length > 0) {\n          const [owner, repo, dir, filter] = args;\n          Util.weakAssign(options, { owner, repo, dir, filter });\n        }\n\n        console.log(`GET ${location}`, { args, query, options });\n\n        let result;\n        const { owner, repo, dir, filter, tab, after } = options;\n\n        if(owner && repo && dir) result = await GithubListContents(owner, repo, dir, filter && new RegExp(filter, 'g'));\n        /*if(owner && (tab || after))*/ else {\n          let proxyUrl = Util.makeURL({\n            ...url,\n            protocol: 'https',\n            host: 'github.com',\n            location: ['', ...args].join('/')\n          });\n          console.log(`PROXY ${proxyUrl}`);\n\n          let response = await fetch(proxyUrl);\n          let type = response.headers['content-type'];\n\n          console.log(`RESPONSE`, response.url, type);\n          let data = await response.text();\n          res.send(data);\n          //, 200, { headers: { 'content-type': type }});\n          return;\n        }\n\n        res.json(FilesURLs(result.map(file => file.download_url)));\n      },\n      () => {},\n      Util.putError\n    );\n  });\n\n  app.post(/\\/github.*/, async (req, res) => {\n    const { body } = req;\n    let result;\n    const { owner, repo, dir, filter } = body;\n    console.log('POST github', { owner, repo, dir, filter });\n\n    res.json(\n      await GithubListContents(owner, repo, dir, filter && new RegExp(filter, 'g'))\n        .then(result => FilesURLs(result.map(file => file.download_url)))\n        .catch(error => ({ error }))\n    );\n  });\n\n  app.get(/^\\/!urls/, async (req, res) => res.json({ files: [...files].sort() }));\n  app.get(/^\\/files/, async (req, res) => res.json({ files: await GetFilesList() }));\n  app.post(/^\\/(files|list)(.html|)/, async (req, res) => {\n    const { body } = req;\n    let { filter = '.*', descriptions, names } = body;\n    let opts = { filter };\n    if(descriptions) opts.descriptions = descriptions;\n\n    if(names !== undefined) {\n      if(typeof names == 'string') names = names.split(/\\n/g);\n      if(Util.isArray(names)) names = names.map(name => name.replace(/.*\\//g, ''));\n      opts.names = names;\n    }\n    let files = await GetFilesList('tmp', opts);\n    console.log('POST files', util.inspect(files, { breakLength: Infinity, colors: true, maxArrayLength: 10, compact: 1 }));\n    res.json({\n      files\n    });\n  });\n\n  app.get('/index.html', async (req, res) => {\n    let data = await fsPromises.readFile(path.join(p, 'index.html'));\n    res.send(data.toString().replace(/<TS>/g, Util.unixTime() + ''));\n  });\n  app.get('/contours', RequestContours);\n  app.post('/contours', RequestContours);\n\n  app.post('/save', async (req, res, next) => {\n    //   const filename = (req.headers['content-disposition']||'').replace(new RegExp('.*\"([^\"]*)\".*','g'), '$1') || 'output.svg';\n    /*    const filename = path.join(process.cwd(), 'tmp', 'upload-' + Util.toUnixTime(Date.now()) + '.txt');\n    let output = fs.createWriteStream(filename, { autoClose: true, emitClose: true });\n    let s = req.pipe(output);\n    console.log('s', Util.className(s));\n    let data;\n    s.on('close', () => Util.waitFor(1000).then(() => end()));\n\n    //  req.on('end', () => Util.waitFor(500).then(() => end()));\n\n    function end() {\n      data = fs.readFileSync(filename).toString();\n      console.log('req end', { data });\n      res.end(data + '\\n\\nUpload complete');\n      next();\n    }\n*/\n\n    const { body } = req;\n    console.log('req.headers:', req.headers);\n    console.log('body:', Util.abbreviate(body), Util.className(body), Util.inspect(body));\n    console.log('save body:', typeof body == 'string' ? Util.abbreviate(body, 100) : body);\n    let st,\n      err,\n      filename = (req.headers['content-disposition'] || '').replace(new RegExp('.*\"([^\"]*)\".*', 'g'), '$1') || 'output.svg';\n    filename = 'tmp/' + filename.replace(/^tmp\\//, '');\n    await fsPromises\n      .writeFile(filename, body, { mode: 0x0180, flag: 'w' })\n      .then(() => (st = fs.statSync(filename)))\n      .catch(error => (err = error));\n\n    if(err) {\n      console.log('save error:', err);\n      res.json(err);\n    } else {\n      console.log('saved:', filename, `${st.size} bytes`);\n      res.json({ size: st.size, filename });\n    }\n  });\n\n  app.ws('/ws', Socket.endpoint);\n  app.ws('/.websocket', Socket.endpoint);\n  app.ws('/ws/.websocket', Socket.endpoint);\n\n  app.get('/', (req, res) => {\n    res.redirect(302, '/index.html');\n  });\n\n  app.listen(port, () => {\n    console.log(`Ready at http://127.0.0.1:${port}`);\n  });\n}\n/*\ntry {\n  await main();\n} catch(err) {\n  Util.putError(err);\n}*/\nUtil.callMain(main, true);\n",
			"input",
			"ImagePipeline",
			"\"jsm_module_loader",
			"getDirect",
			"directives",
			"\"jsm_mo",
			"\\\\h",
			"historySave",
			"RPATH",
			"RPATH ",
			"pkgcfg_lib_CURL_curl",
			"CURL",
			"link_dir",
			"cmdStart",
			"new REPL",
			"Not an",
			"history",
			"\\[\\^0-9\\]",
			"\\[0-9\\]",
			"isPointer",
			"zlib\\.",
			"\\.log",
			"console.*equest",
			"equest",
			"ListFiles",
			"files[^a-z]",
			"files",
			"inspect\\(",
			"main",
			"DebugFlag",
			"require\\(",
			"app\\.",
			"EagleElement.get",
			"getAll",
			" getAll",
			"getAll",
			"<instance",
			"EagleReference",
			"\\.apply",
			"class extends base",
			"Util\\.",
			" apply",
			"'instances'",
			"'sheet'",
			"GetSheets",
			"getRaw",
			"newProj",
			"lazyProp",
			"newProject",
			"printStatus",
			"printStat",
			"new REPL",
			"Loading",
			"ValueToNumber",
			"await",
			"main",
			"handleKey",
			"WriteJSON",
			"IfDebug",
			"getContextObject",
			"CircuitJS",
			"Wire",
			"Wire\n",
			"CircuitJS",
			"isalnum",
			"isspace",
			"js_debugger_check\\(",
			"js_debugger_check",
			"p_end",
			"js_debugger_",
			"=> ",
			"\"property\"",
			"assign",
			"relative",
			"path.relative",
			"pushUnique",
			"arg",
			"\"relative",
			"idx",
			"lenghth",
			"{const",
			"{return",
			"inspect",
			"inspect\\(",
			"inspect",
			"return this.flags",
			"FdRead",
			"includes",
			"selector",
			"match =",
			"selector",
			"join\\(', '",
			"join",
			"match",
			"debug",
			"wrap",
			"typeSelector",
			"simpleSelectorSequence",
			"regex",
			"Selector",
			"function",
			"export ",
			"selector",
			"addRule",
			"^function",
			"Var",
			"lexer",
			"filesystem\\.([^(]*)",
			"REPL",
			"params",
			"main",
			"CommandLine",
			"class ",
			"fromImages",
			"VideoSource",
			"ImageSequence",
			"\\(cli ",
			"opencv.a",
			"thermist",
			"gate'",
			"tags",
			"\"js_xml",
			"\"select",
			"result\\["
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"\\\\D",
			"\\\\d",
			"\\.deref",
			"is_alphanumeric_char",
			"is_whitespace_char",
			"length",
			"{ const",
			"{ return",
			"const  {flags}=this;\\nreturn flags",
			"defines",
			"",
			"fs.\\1Sync",
			"define",
			",",
			"file",
			"target_compile_definitions",
			"msg",
			"PmDeviceInfo",
			"export function",
			"libportmidi",
			"\\1//\\2",
			"text",
			"\\1",
			"export function",
			"export &",
			"fs.",
			"array",
			"fs",
			"black",
			"white",
			"input.",
			"'save'",
			"globalThis.",
			"fsPromises",
			"\\n\\n",
			"}\\n",
			"vector",
			"std::vector<",
			"log.info",
			"waitFor",
			"'",
			"'\\\\x\\1'",
			"'\\x\\1'",
			"200",
			"120",
			"out += ",
			"",
			"mask",
			"mas",
			"",
			"['.",
			"currentFile",
			"/* prettier-ignore */ import",
			"ShowSource",
			"/* prettier-ignore */ Object.assign(globalThis",
			"component",
			"",
			"token.id",
			"loc",
			"lexeme",
			"body",
			"toArrayBuffer",
			"toString",
			"waitRead",
			"dbg",
			"toString",
			"this.#events",
			"%2i",
			"-9s",
			"proc",
			"fs.",
			"jsm_module_record",
			"stepMode",
			"this.",
			"= require('\\1')",
			"const ",
			"fs",
			"ReadImport",
			"1000",
			"1000l",
			"SockAddr",
			"writeFileSync(",
			"...args",
			"iconProps",
			"js_module_get",
			"js_module_find",
			"jsm_load_module",
			"js_\\1",
			"js_load_\\1",
			"js_eval_binary",
			"ifndef NDEBUG",
			"lex->start",
			"lex->byte_length",
			"lex->pos",
			"lex->token_id",
			"lex->byte_length",
			"lex->pos",
			"tokens",
			"this.columns",
			"terminal.flush()",
			"f.flush()",
			"f.puts(",
			"500",
			"\\1this.\\2",
			"debug",
			"ucsLength",
			"this.",
			"this.out.flush",
			"history",
			"\\1//console.log",
			"puts",
			"export function",
			"type",
			"header.",
			"#000000",
			"a",
			"MakeListCommand",
			"si",
			"pi",
			"plen",
			"slen",
			"pattern[0]",
			"string[0]",
			"string.length",
			"pattern.length",
			"string.length",
			"export const",
			"this"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1404,
						"regions":
						{
						},
						"selection":
						[
							[
								633,
								636
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": "/home/roman/Projects/plot-cv/eagle-shell.js",
							"function_name_status_row": 38,
							"outline_rename_mode": false,
							"symkeys":
							[
								[
									2762,
									2784
								],
								[
									3329,
									3338
								],
								[
									3364,
									3376
								],
								[
									5094,
									5105
								],
								[
									5767,
									5811
								],
								[
									5937,
									5957
								],
								[
									6119,
									6129
								],
								[
									6157,
									6167
								],
								[
									7020,
									7029
								],
								[
									7561,
									7570
								],
								[
									7641,
									7654
								],
								[
									7741,
									7762
								],
								[
									8113,
									8129
								],
								[
									8372,
									8377
								],
								[
									8415,
									8430
								],
								[
									8591,
									8599
								],
								[
									8640,
									8648
								],
								[
									8856,
									8880
								],
								[
									9044,
									9058
								],
								[
									9139,
									9152
								],
								[
									9216,
									9225
								],
								[
									9304,
									9314
								],
								[
									9378,
									9388
								],
								[
									9432,
									9460
								],
								[
									9527,
									9561
								],
								[
									9595,
									9600
								],
								[
									10237,
									10285
								],
								[
									10403,
									10412
								],
								[
									10575,
									10579
								],
								[
									10687,
									10717
								],
								[
									10959,
									10967
								],
								[
									11034,
									11038
								],
								[
									11128,
									11135
								],
								[
									11437,
									11461
								],
								[
									11706,
									11711
								],
								[
									13446,
									13490
								],
								[
									13937,
									13963
								],
								[
									14665,
									14688
								],
								[
									14808,
									14830
								],
								[
									15081,
									15085
								],
								[
									15573,
									15577
								],
								[
									16194,
									16223
								],
								[
									16248,
									16252
								],
								[
									16328,
									16351
								],
								[
									16395,
									16401
								],
								[
									16429,
									16433
								],
								[
									16449,
									16486
								],
								[
									16508,
									16524
								],
								[
									16608,
									16636
								],
								[
									16690,
									16701
								],
								[
									16784,
									16792
								],
								[
									16888,
									16892
								],
								[
									17042,
									17046
								],
								[
									17144,
									17149
								],
								[
									17209,
									17220
								],
								[
									17292,
									17303
								],
								[
									17395,
									17400
								],
								[
									17455,
									17461
								],
								[
									17558,
									17566
								],
								[
									17741,
									17770
								],
								[
									17863,
									17916
								],
								[
									18069,
									18073
								],
								[
									18127,
									18131
								],
								[
									18412,
									18419
								],
								[
									18441,
									18447
								],
								[
									18476,
									18507
								],
								[
									18650,
									18674
								],
								[
									18800,
									18811
								],
								[
									18829,
									18845
								],
								[
									19004,
									19009
								],
								[
									19033,
									19037
								],
								[
									19090,
									19099
								],
								[
									19172,
									19177
								],
								[
									19315,
									19320
								],
								[
									19447,
									19458
								],
								[
									19547,
									19554
								],
								[
									20144,
									20160
								],
								[
									22026,
									22060
								],
								[
									22399,
									22413
								],
								[
									22508,
									22512
								],
								[
									22534,
									22548
								],
								[
									22579,
									22583
								],
								[
									23888,
									23904
								],
								[
									23954,
									23969
								],
								[
									24038,
									24057
								],
								[
									24080,
									24092
								],
								[
									24181,
									24185
								],
								[
									24284,
									24288
								],
								[
									24507,
									24513
								],
								[
									24603,
									24617
								],
								[
									24646,
									24664
								],
								[
									24806,
									24818
								],
								[
									24848,
									24920
								],
								[
									25153,
									25158
								],
								[
									25864,
									25868
								]
							],
							"symlist":
							[
								"  main(...args)",
								"\t() =>",
								"\tvalue =>",
								"  toNumber(n)",
								"  load(filename, project = globalThis.project)",
								"  newProject(filename)",
								"  sch: () =>",
								"  brd: () =>",
								"  quit(arg)",
								"  module =>",
								"  .exit = () =>",
								"  .debug = (...args) =>",
								"  .show = value =>",
								"() =>",
								"(item, i, a) =>",
								"  entry =>",
								"  entry =>",
								"  findLastIndex(predicate)",
								"  rotateRight(n)",
								"  rotateLeft(n)",
								"  at(index)",
								"  get head()",
								"  get tail()",
								"Terminate(exitCode)",
								"  xml(strings, expressions)",
								"\te =>",
								"  importModule(moduleName, ...args)",
								"  module =>",
								"  e =>",
								"UpdateMeasures(board)",
								"  lines =>",
								"  e =>",
								"  line =>",
								"AlignItem(item)",
								"  tr =>",
								"AlignAll(doc = globalThis.document)",
								"  fixValue(element)",
								"  fixValues(doc)",
								"  coordMap(doc)",
								"  p =>",
								"  t =>",
								"GetPolygons(d = doc)",
								"  e =>",
								"FindPolygons()",
								"  doc =>",
								"  e =>",
								"RemovePolygons(p = polygons)",
								"([doc, list]) =>",
								"GetNames(doc, pred)",
								"  pred = e =>",
								"  sheet =>",
								"  e =>",
								"  e =>",
								"\te =>",
								"([v, p]) =>",
								"([v, p]) =>",
								"() =>",
								"  doc =>",
								"  sheet =>",
								"GetByName(doc, name)",
								"CorrelateSchematicAndBoard(schematic, board)",
								"  d =>",
								"  n =>",
								"  name =>",
								"  doc =>",
								"GetSheets(doc_or_proj)",
								"SaveLibraries()",
								"([n, e]) =>",
								"(acc, [n, e]) =>",
								"\te =>",
								"  e =>",
								"(a, b) =>",
								"  id =>",
								"  id =>",
								"([n, e]) =>",
								"  name =>",
								"(acc, [n, e]) =>",
								"  testEagle(filename)",
								"([name, e]) =>",
								"  e =>",
								"([name, i]) =>",
								"  p =>",
								"(child, i, a) =>",
								"(child2, i2) =>",
								"([index, equal]) =>",
								"([index]) =>",
								"  i =>",
								"  i =>",
								"  doc =>",
								"([file, e]) =>",
								"([file, xpath]) =>",
								"\t([k, v]) =>",
								"Eagle2CircuitJS(doc = project.schematic, scale = 50, sheet = 0)",
								"\tn =>",
								"  e =>"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1642254606.26,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "test-image.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10516,
						"regions":
						{
						},
						"selection":
						[
							[
								6960,
								6960
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 239,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1642321799.69,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3583.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "eagle-shell.js",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 26258,
						"regions":
						{
						},
						"selection":
						[
							[
								14808,
								14830
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 517,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1642462874.74,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 9464.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "imagePipeline.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5637,
						"regions":
						{
						},
						"selection":
						[
							[
								763,
								763
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 13,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1642321732.18,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 247.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "io-helpers.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6916,
						"regions":
						{
						},
						"selection":
						[
							[
								26,
								26
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 1,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1642321729.56,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "server.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 28116,
						"regions":
						{
						},
						"selection":
						[
							[
								2,
								28116
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1642321731.54,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 13178.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "lib/eagle/element.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 31924,
						"regions":
						{
						},
						"selection":
						[
							[
								1996,
								1996
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 55,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1642321730.62,
							"tabs_extra_last_activated_sheet_index": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 556.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "time-helpers.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1068,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1642321730.09,
							"tabs_extra_last_activated_sheet_index": 5,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 28.0
	},
	"input":
	{
		"height": 55.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.798319483226,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 139.0
	},
	"output.Debugger: Console":
	{
		"height": 0.0
	},
	"output.Debugger: Protocol":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 259.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "make",
	"project": "plot-cv.sublime-project",
	"replace":
	{
		"height": 52.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"eagle-she",
				"eagle-shell.js"
			],
			[
				"io-help",
				"io-helpers.js"
			],
			[
				"help",
				"time-helpers.js"
			],
			[
				"elemen",
				"lib/eagle/element.js"
			],
			[
				"server.",
				"server.js"
			],
			[
				"image",
				"imagePipeline.js"
			],
			[
				"imagePip",
				"imagePipeline.js"
			],
			[
				"test-image",
				"test-image.js"
			],
			[
				"qjsm.c",
				"quickjs/qjs-modules/qjsm.c"
			],
			[
				"test-rpc",
				"test-rpc.js"
			],
			[
				"minnet-http",
				"quickjs/qjs-net/minnet-server-http.c"
			],
			[
				"minnet-server",
				"quickjs/qjs-net/minnet-server.c"
			],
			[
				"minnet.c",
				"quickjs/qjs-net/minnet.c"
			],
			[
				"ast-shell",
				"ast-shell.js"
			],
			[
				"clang-as",
				"clang-ast.js"
			],
			[
				"repl.js",
				"quickjs/qjs-modules/lib/repl.js"
			],
			[
				"time-help",
				"time-helpers.js"
			],
			[
				"io-helpers",
				"io-helpers.js"
			],
			[
				"test-bjson",
				"test-bjson.js"
			],
			[
				"deep.js",
				"lib/deep.js"
			],
			[
				"commands.j",
				"commands.js"
			],
			[
				"render",
				"lib/eagle/renderer.js"
			],
			[
				"main.j",
				"main.js"
			],
			[
				"diff.js",
				"lib/json/diff.js"
			],
			[
				"package.js",
				"package.json"
			],
			[
				"server.js",
				"server.js"
			],
			[
				"util.js",
				"lib/util.js"
			],
			[
				"repl",
				"quickjs/qjs-modules/lib/repl.js"
			],
			[
				"circuit",
				"lib/eda/circuitjs.js"
			],
			[
				"ast-she",
				"ast-shell.js"
			],
			[
				"-shell.js",
				"cv-shell.js"
			],
			[
				"list.h",
				"quickjs/list.h"
			],
			[
				"queue.h",
				"quickjs/qjs-modules/queue.h"
			],
			[
				"queue.c",
				"quickjs/qjs-modules/queue.c"
			],
			[
				"char-utils",
				"quickjs/qjs-modules/char-utils.h"
			],
			[
				"quickjs-misc.",
				"quickjs/qjs-modules/quickjs-misc.c"
			],
			[
				"predicate.c",
				"quickjs/qjs-modules/predicate.c"
			],
			[
				"debugger-tran",
				"quickjs/quickjs-debugger-transport-win.c"
			],
			[
				"quickjs-debugg",
				"quickjs/quickjs-debugger-transport-unix.c"
			],
			[
				"defs",
				"quickjs/defs.cmake"
			],
			[
				"quickjs/CMakeLi",
				"quickjs/CMakeLists.txt"
			],
			[
				"quickjs.c",
				"quickjs/quickjs.c"
			],
			[
				"quickjs-pred",
				"quickjs/qjs-modules/quickjs-predicate.c"
			],
			[
				"package",
				"package.json"
			],
			[
				"xpath.js",
				"lib/dom/xpath.js"
			],
			[
				"compileComm",
				"lib/build/compileCommand.js"
			],
			[
				"lib/util.js",
				"lib/util.js"
			],
			[
				"compile_com",
				"compile_commands.js"
			],
			[
				"quickjs-pat",
				"quickjs/qjs-modules/quickjs-path.c"
			],
			[
				"test-child",
				"test-childprocess.js"
			],
			[
				"io-he",
				"io-helpers.js"
			],
			[
				"test-ini",
				"test-ini.js"
			],
			[
				"fn.js",
				"lib/parse/fn.js"
			],
			[
				"test-css",
				"test-css3.js"
			],
			[
				"list-ex",
				"list-exports.js"
			],
			[
				"grammar-css3",
				"grammar-css3.js"
			],
			[
				"css3",
				"lib/grammars/css3.g4"
			],
			[
				"grammar.js",
				"lib/parse/grammar.js"
			],
			[
				"test-parse",
				"test-parse.js"
			],
			[
				"eagle-shell",
				"eagle-shell.js"
			],
			[
				"test-ec",
				"test-ecmascript2.js"
			],
			[
				"lexer",
				"lib/parse/lexer.js"
			],
			[
				"ecmascript.js",
				"lib/ecmascript.js"
			],
			[
				"cv-shell",
				"cv-shell.js"
			],
			[
				"cvVide",
				"qjs-opencv/js/cvVideo.js"
			],
			[
				"imgui",
				"cmake/imgui-viewer.cmake"
			],
			[
				"high",
				"cmake/highgui-viewer.cmake"
			],
			[
				"cmakelis",
				"CMakeLists.txt"
			],
			[
				"line.js",
				"lib/geom/line.js"
			],
			[
				"circui",
				"lib/eda/circuitjs.js"
			],
			[
				"cmakelist",
				"CMakeLists.txt"
			],
			[
				"quickjs-xml",
				"quickjs/qjs-modules/quickjs-xml.c"
			],
			[
				"deep.c",
				"quickjs/qjs-modules/quickjs-deep.c"
			],
			[
				"test_xml",
				"quickjs/qjs-modules/tests/test_xml.js"
			],
			[
				"cmakelists",
				"CMakeLists.txt"
			],
			[
				"highgui",
				"cmake/highgui-viewer.cmake"
			],
			[
				"list-exp",
				"list-exports.js"
			],
			[
				"misc.js",
				"lib/misc.js"
			],
			[
				"projec",
				"lib/eagle/project.js"
			],
			[
				"agle-she",
				"eagle-shell.js"
			],
			[
				"point",
				"lib/geom/point.js"
			],
			[
				"path.c",
				"quickjs/qjs-modules/path.c"
			],
			[
				"element.",
				"lib/dom/element.js"
			],
			[
				"quickjs-pa",
				"quickjs/qjs-modules/quickjs-path.c"
			],
			[
				"lib/u til",
				"lib/util.js"
			],
			[
				"jslex",
				"quickjs/qjs-modules/lib/jslexer.js"
			],
			[
				"preact.m.",
				"lib/preact.m.js"
			],
			[
				"location.c",
				"quickjs/qjs-modules/location.c"
			],
			[
				"location.h",
				"quickjs/qjs-modules/location.h"
			],
			[
				"lexer.h",
				"quickjs/qjs-modules/lexer.h"
			],
			[
				"lexer.c",
				"quickjs/qjs-modules/lexer.c"
			],
			[
				"quickjs-lexe",
				"quickjs/qjs-modules/quickjs-lexer.c"
			],
			[
				" circui",
				"lib/eda/circuitjs.js"
			],
			[
				"extend",
				"quickjs/qjs-modules/lib/extendArray.js"
			],
			[
				"eagle-s",
				"eagle-shell.js"
			],
			[
				"Rect",
				"lib/geom/rect.js"
			],
			[
				"-xml",
				"quickjs/qjs-modules/quickjs-xml.c"
			],
			[
				"image-he",
				"image-helpers.js"
			],
			[
				"test-video",
				"test-video.js"
			],
			[
				"config.js",
				"config.js"
			],
			[
				"test-mma",
				"test-mmap.js"
			],
			[
				"CMake",
				"CMakeLists.txt"
			],
			[
				"test_free",
				"qjs-opencv/tests/test_freetype.js"
			],
			[
				"portmi",
				"portmidi-testio.c"
			],
			[
				"portmidi-",
				"portmidi-testio.c"
			],
			[
				"clang-ast",
				"clang-ast.js"
			],
			[
				"clang-list",
				"clang-list.js"
			],
			[
				"test_mmap",
				"quickjs/qjs-modules/tests/test_mmap.js"
			],
			[
				"quickjs-op",
				"quickjs/quickjs-opcode.h"
			],
			[
				"eagle-comm",
				"eagle-commands.js"
			],
			[
				"quickjs-libc",
				"quickjs/quickjs-libc.c"
			],
			[
				"utils.h",
				"utils.h"
			],
			[
				"eagle-",
				"eagle-commands.js"
			],
			[
				"debugger-ser",
				"debugger-server.js"
			],
			[
				"clang-li",
				"clang-list.js"
			],
			[
				"util",
				"lib/util.js"
			],
			[
				"main",
				"main.js"
			],
			[
				"eagle-com",
				"eagle-commands.js"
			],
			[
				"ser",
				"server.js"
			],
			[
				"node.js",
				"lib/eagle/node.js"
			],
			[
				"main.js",
				"main.js"
			],
			[
				"io-h",
				"io-helpers.js"
			],
			[
				"colorCo",
				"lib/eda/colorCoding.js"
			],
			[
				"quickjs-mi",
				"quickjs/qjs-modules/quickjs-misc.c"
			],
			[
				"util.j",
				"quickjs/qjs-modules/lib/util.js"
			],
			[
				"fs.js",
				"quickjs/qjs-modules/lib/fs.js"
			],
			[
				"packa",
				"package.json"
			],
			[
				"xml.js",
				"lib/xml.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/quickjs/modules/modules.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 309.0,
		"last_filter": "N",
		"selected_items":
		[
			[
				"N",
				"nb"
			],
			[
				"",
				"$"
			]
		],
		"width": 592.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 245.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
