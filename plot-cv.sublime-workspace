{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"PaStream",
				"PaStreamParameters"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"PaE",
				"PaHostErrorInfo"
			],
			[
				"hostApi",
				"hostApiSpecificStreamInfo"
			],
			[
				"host",
				"hostApiType"
			],
			[
				"defaultHi",
				"defaultHighOutputLatency"
			],
			[
				"Draw",
				"DrawCircle"
			],
			[
				"exi",
				"existsSync"
			],
			[
				"text",
				"text-decoration"
			],
			[
				"crea",
				"createTextNode"
			],
			[
				"Transform",
				"TransformationList"
			],
			[
				"trans",
				"transformation"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "PORT_MIDI_H\n  int32_t\n  uint32_t\nINT32_DEFINED\nPMEXPORT\n  __declspec\nPMEXPORT\nFALSE\nTRUE\nPM_DEFAULT_SYSEX_BUFFER_SIZE\nPm_Initialize\nPm_Terminate\nPortMidiStream\nPmStream\nPm_HasHostError\nPm_GetErrorText\nPm_GetHostErrorText\nHDRLENGTH\nPM_HOST_ERROR_MSG_LEN\nPmDeviceID\n  pmNoDevice\nPm_CountDevices\nPm_GetDefaultInputDeviceID\nPm_GetDefaultOutputDeviceID\nPmTimestamp\nPmTimestamp\nPmBefore\nPm_GetDeviceInfo\nPm_OpenInput\nPm_OpenOutput\nPM_FILT_ACTIVE\nPM_FILT_SYSEX\nPM_FILT_CLOCK\nPM_FILT_PLAY\nPM_FILT_TICK\nPM_FILT_FD\nPM_FILT_UNDEFINED\nPM_FILT_RESET\nPM_FILT_REALTIME\nPM_FILT_NOTE\nPM_FILT_CHANNEL_AFTERTOUCH\nPM_FILT_POLY_AFTERTOUCH\nPM_FILT_AFTERTOUCH\nPM_FILT_PROGRAM\nPM_FILT_CONTROL\nPM_FILT_PITCHBEND\nPM_FILT_MTC\nPM_FILT_SONG_POSITION\nPM_FILT_SONG_SELECT\nPM_FILT_TUNE\nPM_FILT_SYSTEMCOMMON\nPm_SetFilter\nPm_Channel\nPm_SetChannelMask\nPm_Abort\nPm_Close\nPm_Synchronize\nPm_Message\nPm_MessageStatus\nPm_MessageData1\nPm_MessageData2\nPmMessage\nPm_Read\nPm_Poll\nPm_Write\nPm_WriteShort\nPm_WriteSysEx",
			"settings":
			{
				"buffer_size": 972,
				"line_ending": "Unix",
				"name": "ùåÜ Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					1129,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/portmidi.js",
						"symkeys":
						[
							[
								279,
								303
							],
							[
								472,
								495
							],
							[
								721,
								753
							],
							[
								990,
								1022
							],
							[
								1293,
								1331
							],
							[
								1518,
								1544
							],
							[
								1757,
								1794
							],
							[
								2021,
								2059
							],
							[
								2299,
								2328
							],
							[
								2808,
								2901
							],
							[
								3487,
								3592
							],
							[
								3937,
								3975
							],
							[
								4265,
								4305
							],
							[
								4529,
								4554
							],
							[
								4763,
								4788
							],
							[
								5015,
								5046
							],
							[
								5347,
								5387
							],
							[
								5608,
								5632
							],
							[
								5929,
								5970
							],
							[
								6291,
								6332
							],
							[
								6656,
								6697
							],
							[
								6993,
								7041
							],
							[
								7293,
								7324
							],
							[
								7587,
								7618
							],
							[
								7881,
								7912
							],
							[
								8138,
								8166
							],
							[
								8392,
								8421
							],
							[
								8648,
								8676
							],
							[
								8905,
								8935
							],
							[
								9246,
								9295
							],
							[
								9476,
								9494
							],
							[
								9651,
								9672
							]
						],
						"symlist":
						[
							"function Pm_Initialize()",
							"function Pm_Terminate()",
							"function Pm_HasHostError(stream)",
							"function Pm_GetErrorText(errnum)",
							"function Pm_GetHostErrorText(msg, len)",
							"function Pm_CountDevices()",
							"function Pm_GetDefaultInputDeviceID()",
							"function Pm_GetDefaultOutputDeviceID()",
							"function Pm_GetDeviceInfo(id)",
							"function Pm_OpenInput(stream, inputDevice, inputDriverInfo, bufferSize, time_proc, time_info)",
							"function Pm_OpenOutput(stream, outputDevice, outputDriverInfo, bufferSize, time_proc, time_info, latency)",
							"function Pm_SetFilter(stream, filters)",
							"function Pm_SetChannelMask(stream, mask)",
							"function Pm_Abort(stream)",
							"function Pm_Close(stream)",
							"function Pm_Synchronize(stream)",
							"function Pm_Read(stream, buffer, length)",
							"function Pm_Poll(stream)",
							"function Pm_Write(stream, buffer, length)",
							"function Pm_WriteShort(stream, when, msg)",
							"function Pm_WriteSysEx(stream, when, msg)",
							"function Pm_QueueCreate(num_msgs, bytes_per_msg)",
							"function Pm_QueueDestroy(queue)",
							"function Pm_Dequeue(queue, msg)",
							"function Pm_Enqueue(queue, msg)",
							"function Pm_QueueFull(queue)",
							"function Pm_QueueEmpty(queue)",
							"function Pm_QueuePeek(queue)",
							"function Pm_SetOverflow(queue)",
							"function Pt_Start(resolution, callback, userData)",
							"function Pt_Stop()",
							"function Pt_Started()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADMAwAAUE9SVF9NSURJX0gKICBpbnQzMl90CiAgdWludDMyX3QKSU5UMzJfREVGSU5FRApQTUVYUE9SVAogIF9fZGVjbHNwZWMKUE1FWFBPUlQKRkFMU0UKVFJVRQpQTV9ERUZBVUxUX1NZU0VYX0JVRkZFUl9TSVpFClBtX0luaXRpYWxpemUKUG1fVGVybWluYXRlClBvcnRNaWRpU3RyZWFtClBtU3RyZWFtClBtX0hhc0hvc3RFcnJvcgpQbV9HZXRFcnJvclRleHQKUG1fR2V0SG9zdEVycm9yVGV4dApIRFJMRU5HVEgKUE1fSE9TVF9FUlJPUl9NU0dfTEVOClBtRGV2aWNlSUQKICBwbU5vRGV2aWNlClBtX0NvdW50RGV2aWNlcwpQbV9HZXREZWZhdWx0SW5wdXREZXZpY2VJRApQbV9HZXREZWZhdWx0T3V0cHV0RGV2aWNlSUQKUG1UaW1lc3RhbXAKUG1UaW1lc3RhbXAKUG1CZWZvcmUKUG1fR2V0RGV2aWNlSW5mbwpQbV9PcGVuSW5wdXQKUG1fT3Blbk91dHB1dApQTV9GSUxUX0FDVElWRQpQTV9GSUxUX1NZU0VYClBNX0ZJTFRfQ0xPQ0sKUE1fRklMVF9QTEFZClBNX0ZJTFRfVElDSwpQTV9GSUxUX0ZEClBNX0ZJTFRfVU5ERUZJTkVEClBNX0ZJTFRfUkVTRVQKUE1fRklMVF9SRUFMVElNRQpQTV9GSUxUX05PVEUKUE1fRklMVF9DSEFOTkVMX0FGVEVSVE9VQ0gKUE1fRklMVF9QT0xZX0FGVEVSVE9VQ0gKUE1fRklMVF9BRlRFUlRPVUNIClBNX0ZJTFRfUFJPR1JBTQpQTV9GSUxUX0NPTlRST0wKUE1fRklMVF9QSVRDSEJFTkQKUE1fRklMVF9NVEMKUE1fRklMVF9TT05HX1BPU0lUSU9OClBNX0ZJTFRfU09OR19TRUxFQ1QKUE1fRklMVF9UVU5FClBNX0ZJTFRfU1lTVEVNQ09NTU9OClBtX1NldEZpbHRlcgpQbV9DaGFubmVsClBtX1NldENoYW5uZWxNYXNrClBtX0Fib3J0ClBtX0Nsb3NlClBtX1N5bmNocm9uaXplClBtX01lc3NhZ2UKUG1fTWVzc2FnZVN0YXR1cwpQbV9NZXNzYWdlRGF0YTEKUG1fTWVzc2FnZURhdGEyClBtTWVzc2FnZQpQbV9SZWFkClBtX1BvbGwKUG1fV3JpdGUKUG1fV3JpdGVTaG9ydApQbV9Xcml0ZVN5c0V4AAAAAAAAAACOAwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					1130,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/portmidi.js",
						"symkeys":
						[
							[
								279,
								303
							],
							[
								472,
								495
							],
							[
								721,
								753
							],
							[
								990,
								1022
							],
							[
								1293,
								1331
							],
							[
								1518,
								1544
							],
							[
								1757,
								1794
							],
							[
								2021,
								2059
							],
							[
								2299,
								2328
							],
							[
								2813,
								2906
							],
							[
								3492,
								3597
							],
							[
								3942,
								3980
							],
							[
								4270,
								4310
							],
							[
								4534,
								4559
							],
							[
								4768,
								4793
							],
							[
								5020,
								5051
							],
							[
								5352,
								5392
							],
							[
								5613,
								5637
							],
							[
								5934,
								5975
							],
							[
								6296,
								6337
							],
							[
								6661,
								6702
							],
							[
								6998,
								7046
							],
							[
								7298,
								7329
							],
							[
								7592,
								7623
							],
							[
								7886,
								7917
							],
							[
								8143,
								8171
							],
							[
								8397,
								8426
							],
							[
								8653,
								8681
							],
							[
								8910,
								8940
							],
							[
								9251,
								9300
							],
							[
								9481,
								9499
							],
							[
								9656,
								9677
							]
						],
						"symlist":
						[
							"function Pm_Initialize()",
							"function Pm_Terminate()",
							"function Pm_HasHostError(stream)",
							"function Pm_GetErrorText(errnum)",
							"function Pm_GetHostErrorText(msg, len)",
							"function Pm_CountDevices()",
							"function Pm_GetDefaultInputDeviceID()",
							"function Pm_GetDefaultOutputDeviceID()",
							"function Pm_GetDeviceInfo(id)",
							"function Pm_OpenInput(stream, inputDevice, inputDriverInfo, bufferSize, time_proc, time_info)",
							"function Pm_OpenOutput(stream, outputDevice, outputDriverInfo, bufferSize, time_proc, time_info, latency)",
							"function Pm_SetFilter(stream, filters)",
							"function Pm_SetChannelMask(stream, mask)",
							"function Pm_Abort(stream)",
							"function Pm_Close(stream)",
							"function Pm_Synchronize(stream)",
							"function Pm_Read(stream, buffer, length)",
							"function Pm_Poll(stream)",
							"function Pm_Write(stream, buffer, length)",
							"function Pm_WriteShort(stream, when, msg)",
							"function Pm_WriteSysEx(stream, when, msg)",
							"function Pm_QueueCreate(num_msgs, bytes_per_msg)",
							"function Pm_QueueDestroy(queue)",
							"function Pm_Dequeue(queue, msg)",
							"function Pm_Enqueue(queue, msg)",
							"function Pm_QueueFull(queue)",
							"function Pm_QueueEmpty(queue)",
							"function Pm_QueuePeek(queue)",
							"function Pm_SetOverflow(queue)",
							"function Pt_Start(resolution, callback, userData)",
							"function Pt_Stop()",
							"function Pt_Started()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACOAwAAUG1fSW5pdGlhbGl6ZSgpClBtX1Rlcm1pbmF0ZSgpClBtX0hhc0hvc3RFcnJvcihzdHJlYW0pClBtX0dldEVycm9yVGV4dChlcnJudW0pClBtX0dldEhvc3RFcnJvclRleHQobXNnLCBsZW4pClBtX0NvdW50RGV2aWNlcygpClBtX0dldERlZmF1bHRJbnB1dERldmljZUlEKCkKUG1fR2V0RGVmYXVsdE91dHB1dERldmljZUlEKCkKUG1fR2V0RGV2aWNlSW5mbyhpZCkKUG1fT3BlbklucHV0KHN0cmVhbSwgaW5wdXREZXZpY2UsIGlucHV0RHJpdmVySW5mbywgYnVmZmVyU2l6ZSwgdGltZV9wcm9jLCB0aW1lX2luZm8pClBtX09wZW5PdXRwdXQoc3RyZWFtLCBvdXRwdXREZXZpY2UsIG91dHB1dERyaXZlckluZm8sIGJ1ZmZlclNpemUsIHRpbWVfcHJvYywgdGltZV9pbmZvLCBsYXRlbmN5KQpQbV9TZXRGaWx0ZXIoc3RyZWFtLCBmaWx0ZXJzKQpQbV9TZXRDaGFubmVsTWFzayhzdHJlYW0sIG1hc2spClBtX0Fib3J0KHN0cmVhbSkKUG1fQ2xvc2Uoc3RyZWFtKQpQbV9TeW5jaHJvbml6ZShzdHJlYW0pClBtX1JlYWQoc3RyZWFtLCBidWZmZXIsIGxlbmd0aCkKUG1fUG9sbChzdHJlYW0pClBtX1dyaXRlKHN0cmVhbSwgYnVmZmVyLCBsZW5ndGgpClBtX1dyaXRlU2hvcnQoc3RyZWFtLCB3aGVuLCBtc2cpClBtX1dyaXRlU3lzRXgoc3RyZWFtLCB3aGVuLCBtc2cpClBtX1F1ZXVlQ3JlYXRlKG51bV9tc2dzLCBieXRlc19wZXJfbXNnKQpQbV9RdWV1ZURlc3Ryb3kocXVldWUpClBtX0RlcXVldWUocXVldWUsIG1zZykKUG1fRW5xdWV1ZShxdWV1ZSwgbXNnKQpQbV9RdWV1ZUZ1bGwocXVldWUpClBtX1F1ZXVlRW1wdHkocXVldWUpClBtX1F1ZXVlUGVlayhxdWV1ZSkKUG1fU2V0T3ZlcmZsb3cocXVldWUpClB0X1N0YXJ0KHJlc29sdXRpb24sIGNhbGxiYWNrLCB1c2VyRGF0YSkKUHRfU3RvcCgpClB0X1N0YXJ0ZWQoKQAAAAAAAAAAjgMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					1131,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/portmidi.js",
						"symkeys":
						[
							[
								279,
								303
							],
							[
								472,
								495
							],
							[
								721,
								753
							],
							[
								990,
								1022
							],
							[
								1293,
								1331
							],
							[
								1518,
								1544
							],
							[
								1757,
								1794
							],
							[
								2021,
								2059
							],
							[
								2299,
								2328
							],
							[
								2813,
								2906
							],
							[
								3492,
								3597
							],
							[
								3942,
								3980
							],
							[
								4270,
								4310
							],
							[
								4534,
								4559
							],
							[
								4768,
								4793
							],
							[
								5020,
								5051
							],
							[
								5352,
								5392
							],
							[
								5613,
								5637
							],
							[
								5934,
								5975
							],
							[
								6296,
								6337
							],
							[
								6661,
								6702
							],
							[
								6998,
								7046
							],
							[
								7298,
								7329
							],
							[
								7592,
								7623
							],
							[
								7886,
								7917
							],
							[
								8143,
								8171
							],
							[
								8397,
								8426
							],
							[
								8653,
								8681
							],
							[
								8910,
								8940
							],
							[
								9251,
								9300
							],
							[
								9481,
								9499
							],
							[
								9656,
								9677
							]
						],
						"symlist":
						[
							"function Pm_Initialize()",
							"function Pm_Terminate()",
							"function Pm_HasHostError(stream)",
							"function Pm_GetErrorText(errnum)",
							"function Pm_GetHostErrorText(msg, len)",
							"function Pm_CountDevices()",
							"function Pm_GetDefaultInputDeviceID()",
							"function Pm_GetDefaultOutputDeviceID()",
							"function Pm_GetDeviceInfo(id)",
							"function Pm_OpenInput(stream, inputDevice, inputDriverInfo, bufferSize, time_proc, time_info)",
							"function Pm_OpenOutput(stream, outputDevice, outputDriverInfo, bufferSize, time_proc, time_info, latency)",
							"function Pm_SetFilter(stream, filters)",
							"function Pm_SetChannelMask(stream, mask)",
							"function Pm_Abort(stream)",
							"function Pm_Close(stream)",
							"function Pm_Synchronize(stream)",
							"function Pm_Read(stream, buffer, length)",
							"function Pm_Poll(stream)",
							"function Pm_Write(stream, buffer, length)",
							"function Pm_WriteShort(stream, when, msg)",
							"function Pm_WriteSysEx(stream, when, msg)",
							"function Pm_QueueCreate(num_msgs, bytes_per_msg)",
							"function Pm_QueueDestroy(queue)",
							"function Pm_Dequeue(queue, msg)",
							"function Pm_Enqueue(queue, msg)",
							"function Pm_QueueFull(queue)",
							"function Pm_QueueEmpty(queue)",
							"function Pm_QueuePeek(queue)",
							"function Pm_SetOverflow(queue)",
							"function Pt_Start(resolution, callback, userData)",
							"function Pt_Stop()",
							"function Pt_Started()"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAACOAwAAUG1fSW5pdGlhbGl6ZSgpClBtX1Rlcm1pbmF0ZSgpClBtX0hhc0hvc3RFcnJvcihzdHJlYW0pClBtX0dldEVycm9yVGV4dChlcnJudW0pClBtX0dldEhvc3RFcnJvclRleHQobXNnLCBsZW4pClBtX0NvdW50RGV2aWNlcygpClBtX0dldERlZmF1bHRJbnB1dERldmljZUlEKCkKUG1fR2V0RGVmYXVsdE91dHB1dERldmljZUlEKCkKUG1fR2V0RGV2aWNlSW5mbyhpZCkKUG1fT3BlbklucHV0KHN0cmVhbSwgaW5wdXREZXZpY2UsIGlucHV0RHJpdmVySW5mbywgYnVmZmVyU2l6ZSwgdGltZV9wcm9jLCB0aW1lX2luZm8pClBtX09wZW5PdXRwdXQoc3RyZWFtLCBvdXRwdXREZXZpY2UsIG91dHB1dERyaXZlckluZm8sIGJ1ZmZlclNpemUsIHRpbWVfcHJvYywgdGltZV9pbmZvLCBsYXRlbmN5KQpQbV9TZXRGaWx0ZXIoc3RyZWFtLCBmaWx0ZXJzKQpQbV9TZXRDaGFubmVsTWFzayhzdHJlYW0sIG1hc2spClBtX0Fib3J0KHN0cmVhbSkKUG1fQ2xvc2Uoc3RyZWFtKQpQbV9TeW5jaHJvbml6ZShzdHJlYW0pClBtX1JlYWQoc3RyZWFtLCBidWZmZXIsIGxlbmd0aCkKUG1fUG9sbChzdHJlYW0pClBtX1dyaXRlKHN0cmVhbSwgYnVmZmVyLCBsZW5ndGgpClBtX1dyaXRlU2hvcnQoc3RyZWFtLCB3aGVuLCBtc2cpClBtX1dyaXRlU3lzRXgoc3RyZWFtLCB3aGVuLCBtc2cpClBtX1F1ZXVlQ3JlYXRlKG51bV9tc2dzLCBieXRlc19wZXJfbXNnKQpQbV9RdWV1ZURlc3Ryb3kocXVldWUpClBtX0RlcXVldWUocXVldWUsIG1zZykKUG1fRW5xdWV1ZShxdWV1ZSwgbXNnKQpQbV9RdWV1ZUZ1bGwocXVldWUpClBtX1F1ZXVlRW1wdHkocXVldWUpClBtX1F1ZXVlUGVlayhxdWV1ZSkKUG1fU2V0T3ZlcmZsb3cocXVldWUpClB0X1N0YXJ0KHJlc29sdXRpb24sIGNhbGxiYWNrLCB1c2VyRGF0YSkKUHRfU3RvcCgpClB0X1N0YXJ0ZWQoKQAAAAAAAAAAjgMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAI4DAABQbV9Jbml0aWFsaXplKCkKUG1fVGVybWluYXRlKCkKUG1fSGFzSG9zdEVycm9yKHN0cmVhbSkKUG1fR2V0RXJyb3JUZXh0KGVycm51bSkKUG1fR2V0SG9zdEVycm9yVGV4dChtc2csIGxlbikKUG1fQ291bnREZXZpY2VzKCkKUG1fR2V0RGVmYXVsdElucHV0RGV2aWNlSUQoKQpQbV9HZXREZWZhdWx0T3V0cHV0RGV2aWNlSUQoKQpQbV9HZXREZXZpY2VJbmZvKGlkKQpQbV9PcGVuSW5wdXQoc3RyZWFtLCBpbnB1dERldmljZSwgaW5wdXREcml2ZXJJbmZvLCBidWZmZXJTaXplLCB0aW1lX3Byb2MsIHRpbWVfaW5mbykKUG1fT3Blbk91dHB1dChzdHJlYW0sIG91dHB1dERldmljZSwgb3V0cHV0RHJpdmVySW5mbywgYnVmZmVyU2l6ZSwgdGltZV9wcm9jLCB0aW1lX2luZm8sIGxhdGVuY3kpClBtX1NldEZpbHRlcihzdHJlYW0sIGZpbHRlcnMpClBtX1NldENoYW5uZWxNYXNrKHN0cmVhbSwgbWFzaykKUG1fQWJvcnQoc3RyZWFtKQpQbV9DbG9zZShzdHJlYW0pClBtX1N5bmNocm9uaXplKHN0cmVhbSkKUG1fUmVhZChzdHJlYW0sIGJ1ZmZlciwgbGVuZ3RoKQpQbV9Qb2xsKHN0cmVhbSkKUG1fV3JpdGUoc3RyZWFtLCBidWZmZXIsIGxlbmd0aCkKUG1fV3JpdGVTaG9ydChzdHJlYW0sIHdoZW4sIG1zZykKUG1fV3JpdGVTeXNFeChzdHJlYW0sIHdoZW4sIG1zZykKUG1fUXVldWVDcmVhdGUobnVtX21zZ3MsIGJ5dGVzX3Blcl9tc2cpClBtX1F1ZXVlRGVzdHJveShxdWV1ZSkKUG1fRGVxdWV1ZShxdWV1ZSwgbXNnKQpQbV9FbnF1ZXVlKHF1ZXVlLCBtc2cpClBtX1F1ZXVlRnVsbChxdWV1ZSkKUG1fUXVldWVFbXB0eShxdWV1ZSkKUG1fUXVldWVQZWVrKHF1ZXVlKQpQbV9TZXRPdmVyZmxvdyhxdWV1ZSkKUHRfU3RhcnQocmVzb2x1dGlvbiwgY2FsbGJhY2ssIHVzZXJEYXRhKQpQdF9TdG9wKCkKUHRfU3RhcnRlZCgpAAAAAAAAAACOAwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					1132,
					1,
					"outline_refresh",
					{
						"path": "/usr/include/portmidi.h",
						"symkeys":
						[
							[
								28,
								39
							],
							[
								4855,
								4862
							],
							[
								4885,
								4893
							],
							[
								4903,
								4916
							],
							[
								4955,
								4963
							],
							[
								4964,
								4974
							],
							[
								5000,
								5008
							],
							[
								5044,
								5049
							],
							[
								5084,
								5088
							],
							[
								5161,
								5189
							],
							[
								6356,
								6369
							],
							[
								6500,
								6512
							],
							[
								6609,
								6623
							],
							[
								6633,
								6641
							],
							[
								7556,
								7571
							],
							[
								7793,
								7808
							],
							[
								8050,
								8069
							],
							[
								8110,
								8119
							],
							[
								8131,
								8152
							],
							[
								8378,
								8388
							],
							[
								8398,
								8408
							],
							[
								8930,
								8945
							],
							[
								11050,
								11076
							],
							[
								11157,
								11184
							],
							[
								11360,
								11371
							],
							[
								11381,
								11392
							],
							[
								11465,
								11473
							],
							[
								11973,
								11989
							],
							[
								15382,
								15394
							],
							[
								15630,
								15643
							],
							[
								16808,
								16822
							],
							[
								16891,
								16904
							],
							[
								16965,
								16978
							],
							[
								17066,
								17078
							],
							[
								17164,
								17176
							],
							[
								17233,
								17243
							],
							[
								17307,
								17324
							],
							[
								17380,
								17393
							],
							[
								17451,
								17467
							],
							[
								17657,
								17669
							],
							[
								17783,
								17809
							],
							[
								17869,
								17892
							],
							[
								17960,
								17978
							],
							[
								18077,
								18092
							],
							[
								18154,
								18169
							],
							[
								18220,
								18237
							],
							[
								18286,
								18297
							],
							[
								18346,
								18367
							],
							[
								18413,
								18432
							],
							[
								18481,
								18493
							],
							[
								18596,
								18616
							],
							[
								18711,
								18723
							],
							[
								18777,
								18787
							],
							[
								19461,
								19478
							],
							[
								19863,
								19871
							],
							[
								20123,
								20131
							],
							[
								21395,
								21409
							],
							[
								21687,
								21697
							],
							[
								21842,
								21858
							],
							[
								21887,
								21902
							],
							[
								21938,
								21953
							],
							[
								21999,
								22008
							],
							[
								27086,
								27093
							],
							[
								27274,
								27281
							],
							[
								27753,
								27761
							],
							[
								28092,
								28105
							],
							[
								28260,
								28273
							]
						],
						"symlist":
						[
							"PORT_MIDI_H",
							"int32_t",
							"uint32_t",
							"INT32_DEFINED",
							"PMEXPORT",
							"__declspec",
							"PMEXPORT",
							"FALSE",
							"TRUE",
							"PM_DEFAULT_SYSEX_BUFFER_SIZE",
							"Pm_Initialize",
							"Pm_Terminate",
							"PortMidiStream",
							"PmStream",
							"Pm_HasHostError",
							"Pm_GetErrorText",
							"Pm_GetHostErrorText",
							"HDRLENGTH",
							"PM_HOST_ERROR_MSG_LEN",
							"PmDeviceID",
							"pmNoDevice",
							"Pm_CountDevices",
							"Pm_GetDefaultInputDeviceID",
							"Pm_GetDefaultOutputDeviceID",
							"PmTimestamp",
							"PmTimestamp",
							"PmBefore",
							"Pm_GetDeviceInfo",
							"Pm_OpenInput",
							"Pm_OpenOutput",
							"PM_FILT_ACTIVE",
							"PM_FILT_SYSEX",
							"PM_FILT_CLOCK",
							"PM_FILT_PLAY",
							"PM_FILT_TICK",
							"PM_FILT_FD",
							"PM_FILT_UNDEFINED",
							"PM_FILT_RESET",
							"PM_FILT_REALTIME",
							"PM_FILT_NOTE",
							"PM_FILT_CHANNEL_AFTERTOUCH",
							"PM_FILT_POLY_AFTERTOUCH",
							"PM_FILT_AFTERTOUCH",
							"PM_FILT_PROGRAM",
							"PM_FILT_CONTROL",
							"PM_FILT_PITCHBEND",
							"PM_FILT_MTC",
							"PM_FILT_SONG_POSITION",
							"PM_FILT_SONG_SELECT",
							"PM_FILT_TUNE",
							"PM_FILT_SYSTEMCOMMON",
							"Pm_SetFilter",
							"Pm_Channel",
							"Pm_SetChannelMask",
							"Pm_Abort",
							"Pm_Close",
							"Pm_Synchronize",
							"Pm_Message",
							"Pm_MessageStatus",
							"Pm_MessageData1",
							"Pm_MessageData2",
							"PmMessage",
							"Pm_Read",
							"Pm_Poll",
							"Pm_Write",
							"Pm_WriteShort",
							"Pm_WriteSysEx"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACOAwAAUG1fSW5pdGlhbGl6ZSgpClBtX1Rlcm1pbmF0ZSgpClBtX0hhc0hvc3RFcnJvcihzdHJlYW0pClBtX0dldEVycm9yVGV4dChlcnJudW0pClBtX0dldEhvc3RFcnJvclRleHQobXNnLCBsZW4pClBtX0NvdW50RGV2aWNlcygpClBtX0dldERlZmF1bHRJbnB1dERldmljZUlEKCkKUG1fR2V0RGVmYXVsdE91dHB1dERldmljZUlEKCkKUG1fR2V0RGV2aWNlSW5mbyhpZCkKUG1fT3BlbklucHV0KHN0cmVhbSwgaW5wdXREZXZpY2UsIGlucHV0RHJpdmVySW5mbywgYnVmZmVyU2l6ZSwgdGltZV9wcm9jLCB0aW1lX2luZm8pClBtX09wZW5PdXRwdXQoc3RyZWFtLCBvdXRwdXREZXZpY2UsIG91dHB1dERyaXZlckluZm8sIGJ1ZmZlclNpemUsIHRpbWVfcHJvYywgdGltZV9pbmZvLCBsYXRlbmN5KQpQbV9TZXRGaWx0ZXIoc3RyZWFtLCBmaWx0ZXJzKQpQbV9TZXRDaGFubmVsTWFzayhzdHJlYW0sIG1hc2spClBtX0Fib3J0KHN0cmVhbSkKUG1fQ2xvc2Uoc3RyZWFtKQpQbV9TeW5jaHJvbml6ZShzdHJlYW0pClBtX1JlYWQoc3RyZWFtLCBidWZmZXIsIGxlbmd0aCkKUG1fUG9sbChzdHJlYW0pClBtX1dyaXRlKHN0cmVhbSwgYnVmZmVyLCBsZW5ndGgpClBtX1dyaXRlU2hvcnQoc3RyZWFtLCB3aGVuLCBtc2cpClBtX1dyaXRlU3lzRXgoc3RyZWFtLCB3aGVuLCBtc2cpClBtX1F1ZXVlQ3JlYXRlKG51bV9tc2dzLCBieXRlc19wZXJfbXNnKQpQbV9RdWV1ZURlc3Ryb3kocXVldWUpClBtX0RlcXVldWUocXVldWUsIG1zZykKUG1fRW5xdWV1ZShxdWV1ZSwgbXNnKQpQbV9RdWV1ZUZ1bGwocXVldWUpClBtX1F1ZXVlRW1wdHkocXVldWUpClBtX1F1ZXVlUGVlayhxdWV1ZSkKUG1fU2V0T3ZlcmZsb3cocXVldWUpClB0X1N0YXJ0KHJlc29sdXRpb24sIGNhbGxiYWNrLCB1c2VyRGF0YSkKUHRfU3RvcCgpClB0X1N0YXJ0ZWQoKQAAAAAAAAAAzAMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					1133,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/portmidi.js",
						"symkeys":
						[
							[
								279,
								303
							],
							[
								472,
								495
							],
							[
								721,
								753
							],
							[
								990,
								1022
							],
							[
								1293,
								1331
							],
							[
								1518,
								1544
							],
							[
								1757,
								1794
							],
							[
								2021,
								2059
							],
							[
								2299,
								2328
							],
							[
								2813,
								2906
							],
							[
								3492,
								3597
							],
							[
								3942,
								3980
							],
							[
								4270,
								4310
							],
							[
								4534,
								4559
							],
							[
								4768,
								4793
							],
							[
								5020,
								5051
							],
							[
								5352,
								5392
							],
							[
								5613,
								5637
							],
							[
								5934,
								5975
							],
							[
								6296,
								6337
							],
							[
								6661,
								6702
							],
							[
								6998,
								7046
							],
							[
								7298,
								7329
							],
							[
								7592,
								7623
							],
							[
								7886,
								7917
							],
							[
								8143,
								8171
							],
							[
								8397,
								8426
							],
							[
								8653,
								8681
							],
							[
								8910,
								8940
							],
							[
								9251,
								9300
							],
							[
								9481,
								9499
							],
							[
								9656,
								9677
							]
						],
						"symlist":
						[
							"function Pm_Initialize()",
							"function Pm_Terminate()",
							"function Pm_HasHostError(stream)",
							"function Pm_GetErrorText(errnum)",
							"function Pm_GetHostErrorText(msg, len)",
							"function Pm_CountDevices()",
							"function Pm_GetDefaultInputDeviceID()",
							"function Pm_GetDefaultOutputDeviceID()",
							"function Pm_GetDeviceInfo(id)",
							"function Pm_OpenInput(stream, inputDevice, inputDriverInfo, bufferSize, time_proc, time_info)",
							"function Pm_OpenOutput(stream, outputDevice, outputDriverInfo, bufferSize, time_proc, time_info, latency)",
							"function Pm_SetFilter(stream, filters)",
							"function Pm_SetChannelMask(stream, mask)",
							"function Pm_Abort(stream)",
							"function Pm_Close(stream)",
							"function Pm_Synchronize(stream)",
							"function Pm_Read(stream, buffer, length)",
							"function Pm_Poll(stream)",
							"function Pm_Write(stream, buffer, length)",
							"function Pm_WriteShort(stream, when, msg)",
							"function Pm_WriteSysEx(stream, when, msg)",
							"function Pm_QueueCreate(num_msgs, bytes_per_msg)",
							"function Pm_QueueDestroy(queue)",
							"function Pm_Dequeue(queue, msg)",
							"function Pm_Enqueue(queue, msg)",
							"function Pm_QueueFull(queue)",
							"function Pm_QueueEmpty(queue)",
							"function Pm_QueuePeek(queue)",
							"function Pm_SetOverflow(queue)",
							"function Pt_Start(resolution, callback, userData)",
							"function Pt_Stop()",
							"function Pt_Started()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADMAwAAUE9SVF9NSURJX0gKICBpbnQzMl90CiAgdWludDMyX3QKSU5UMzJfREVGSU5FRApQTUVYUE9SVAogIF9fZGVjbHNwZWMKUE1FWFBPUlQKRkFMU0UKVFJVRQpQTV9ERUZBVUxUX1NZU0VYX0JVRkZFUl9TSVpFClBtX0luaXRpYWxpemUKUG1fVGVybWluYXRlClBvcnRNaWRpU3RyZWFtClBtU3RyZWFtClBtX0hhc0hvc3RFcnJvcgpQbV9HZXRFcnJvclRleHQKUG1fR2V0SG9zdEVycm9yVGV4dApIRFJMRU5HVEgKUE1fSE9TVF9FUlJPUl9NU0dfTEVOClBtRGV2aWNlSUQKICBwbU5vRGV2aWNlClBtX0NvdW50RGV2aWNlcwpQbV9HZXREZWZhdWx0SW5wdXREZXZpY2VJRApQbV9HZXREZWZhdWx0T3V0cHV0RGV2aWNlSUQKUG1UaW1lc3RhbXAKUG1UaW1lc3RhbXAKUG1CZWZvcmUKUG1fR2V0RGV2aWNlSW5mbwpQbV9PcGVuSW5wdXQKUG1fT3Blbk91dHB1dApQTV9GSUxUX0FDVElWRQpQTV9GSUxUX1NZU0VYClBNX0ZJTFRfQ0xPQ0sKUE1fRklMVF9QTEFZClBNX0ZJTFRfVElDSwpQTV9GSUxUX0ZEClBNX0ZJTFRfVU5ERUZJTkVEClBNX0ZJTFRfUkVTRVQKUE1fRklMVF9SRUFMVElNRQpQTV9GSUxUX05PVEUKUE1fRklMVF9DSEFOTkVMX0FGVEVSVE9VQ0gKUE1fRklMVF9QT0xZX0FGVEVSVE9VQ0gKUE1fRklMVF9BRlRFUlRPVUNIClBNX0ZJTFRfUFJPR1JBTQpQTV9GSUxUX0NPTlRST0wKUE1fRklMVF9QSVRDSEJFTkQKUE1fRklMVF9NVEMKUE1fRklMVF9TT05HX1BPU0lUSU9OClBNX0ZJTFRfU09OR19TRUxFQ1QKUE1fRklMVF9UVU5FClBNX0ZJTFRfU1lTVEVNQ09NTU9OClBtX1NldEZpbHRlcgpQbV9DaGFubmVsClBtX1NldENoYW5uZWxNYXNrClBtX0Fib3J0ClBtX0Nsb3NlClBtX1N5bmNocm9uaXplClBtX01lc3NhZ2UKUG1fTWVzc2FnZVN0YXR1cwpQbV9NZXNzYWdlRGF0YTEKUG1fTWVzc2FnZURhdGEyClBtTWVzc2FnZQpQbV9SZWFkClBtX1BvbGwKUG1fV3JpdGUKUG1fV3JpdGVTaG9ydApQbV9Xcml0ZVN5c0V4AAAAAAAAAACOAwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					1134,
					1,
					"outline_refresh",
					{
						"path": "/usr/include/portmidi.h",
						"symkeys":
						[
							[
								28,
								39
							],
							[
								4855,
								4862
							],
							[
								4885,
								4893
							],
							[
								4903,
								4916
							],
							[
								4955,
								4963
							],
							[
								4964,
								4974
							],
							[
								5000,
								5008
							],
							[
								5044,
								5049
							],
							[
								5084,
								5088
							],
							[
								5161,
								5189
							],
							[
								6356,
								6369
							],
							[
								6500,
								6512
							],
							[
								6609,
								6623
							],
							[
								6633,
								6641
							],
							[
								7556,
								7571
							],
							[
								7793,
								7808
							],
							[
								8050,
								8069
							],
							[
								8110,
								8119
							],
							[
								8131,
								8152
							],
							[
								8378,
								8388
							],
							[
								8398,
								8408
							],
							[
								8930,
								8945
							],
							[
								11050,
								11076
							],
							[
								11157,
								11184
							],
							[
								11360,
								11371
							],
							[
								11381,
								11392
							],
							[
								11465,
								11473
							],
							[
								11973,
								11989
							],
							[
								15382,
								15394
							],
							[
								15630,
								15643
							],
							[
								16808,
								16822
							],
							[
								16891,
								16904
							],
							[
								16965,
								16978
							],
							[
								17066,
								17078
							],
							[
								17164,
								17176
							],
							[
								17233,
								17243
							],
							[
								17307,
								17324
							],
							[
								17380,
								17393
							],
							[
								17451,
								17467
							],
							[
								17657,
								17669
							],
							[
								17783,
								17809
							],
							[
								17869,
								17892
							],
							[
								17960,
								17978
							],
							[
								18077,
								18092
							],
							[
								18154,
								18169
							],
							[
								18220,
								18237
							],
							[
								18286,
								18297
							],
							[
								18346,
								18367
							],
							[
								18413,
								18432
							],
							[
								18481,
								18493
							],
							[
								18596,
								18616
							],
							[
								18711,
								18723
							],
							[
								18777,
								18787
							],
							[
								19461,
								19478
							],
							[
								19863,
								19871
							],
							[
								20123,
								20131
							],
							[
								21395,
								21409
							],
							[
								21687,
								21697
							],
							[
								21842,
								21858
							],
							[
								21887,
								21902
							],
							[
								21938,
								21953
							],
							[
								21999,
								22008
							],
							[
								27086,
								27093
							],
							[
								27274,
								27281
							],
							[
								27753,
								27761
							],
							[
								28092,
								28105
							],
							[
								28260,
								28273
							]
						],
						"symlist":
						[
							"PORT_MIDI_H",
							"int32_t",
							"uint32_t",
							"INT32_DEFINED",
							"PMEXPORT",
							"__declspec",
							"PMEXPORT",
							"FALSE",
							"TRUE",
							"PM_DEFAULT_SYSEX_BUFFER_SIZE",
							"Pm_Initialize",
							"Pm_Terminate",
							"PortMidiStream",
							"PmStream",
							"Pm_HasHostError",
							"Pm_GetErrorText",
							"Pm_GetHostErrorText",
							"HDRLENGTH",
							"PM_HOST_ERROR_MSG_LEN",
							"PmDeviceID",
							"pmNoDevice",
							"Pm_CountDevices",
							"Pm_GetDefaultInputDeviceID",
							"Pm_GetDefaultOutputDeviceID",
							"PmTimestamp",
							"PmTimestamp",
							"PmBefore",
							"Pm_GetDeviceInfo",
							"Pm_OpenInput",
							"Pm_OpenOutput",
							"PM_FILT_ACTIVE",
							"PM_FILT_SYSEX",
							"PM_FILT_CLOCK",
							"PM_FILT_PLAY",
							"PM_FILT_TICK",
							"PM_FILT_FD",
							"PM_FILT_UNDEFINED",
							"PM_FILT_RESET",
							"PM_FILT_REALTIME",
							"PM_FILT_NOTE",
							"PM_FILT_CHANNEL_AFTERTOUCH",
							"PM_FILT_POLY_AFTERTOUCH",
							"PM_FILT_AFTERTOUCH",
							"PM_FILT_PROGRAM",
							"PM_FILT_CONTROL",
							"PM_FILT_PITCHBEND",
							"PM_FILT_MTC",
							"PM_FILT_SONG_POSITION",
							"PM_FILT_SONG_SELECT",
							"PM_FILT_TUNE",
							"PM_FILT_SYSTEMCOMMON",
							"Pm_SetFilter",
							"Pm_Channel",
							"Pm_SetChannelMask",
							"Pm_Abort",
							"Pm_Close",
							"Pm_Synchronize",
							"Pm_Message",
							"Pm_MessageStatus",
							"Pm_MessageData1",
							"Pm_MessageData2",
							"PmMessage",
							"Pm_Read",
							"Pm_Poll",
							"Pm_Write",
							"Pm_WriteShort",
							"Pm_WriteSysEx"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACOAwAAUG1fSW5pdGlhbGl6ZSgpClBtX1Rlcm1pbmF0ZSgpClBtX0hhc0hvc3RFcnJvcihzdHJlYW0pClBtX0dldEVycm9yVGV4dChlcnJudW0pClBtX0dldEhvc3RFcnJvclRleHQobXNnLCBsZW4pClBtX0NvdW50RGV2aWNlcygpClBtX0dldERlZmF1bHRJbnB1dERldmljZUlEKCkKUG1fR2V0RGVmYXVsdE91dHB1dERldmljZUlEKCkKUG1fR2V0RGV2aWNlSW5mbyhpZCkKUG1fT3BlbklucHV0KHN0cmVhbSwgaW5wdXREZXZpY2UsIGlucHV0RHJpdmVySW5mbywgYnVmZmVyU2l6ZSwgdGltZV9wcm9jLCB0aW1lX2luZm8pClBtX09wZW5PdXRwdXQoc3RyZWFtLCBvdXRwdXREZXZpY2UsIG91dHB1dERyaXZlckluZm8sIGJ1ZmZlclNpemUsIHRpbWVfcHJvYywgdGltZV9pbmZvLCBsYXRlbmN5KQpQbV9TZXRGaWx0ZXIoc3RyZWFtLCBmaWx0ZXJzKQpQbV9TZXRDaGFubmVsTWFzayhzdHJlYW0sIG1hc2spClBtX0Fib3J0KHN0cmVhbSkKUG1fQ2xvc2Uoc3RyZWFtKQpQbV9TeW5jaHJvbml6ZShzdHJlYW0pClBtX1JlYWQoc3RyZWFtLCBidWZmZXIsIGxlbmd0aCkKUG1fUG9sbChzdHJlYW0pClBtX1dyaXRlKHN0cmVhbSwgYnVmZmVyLCBsZW5ndGgpClBtX1dyaXRlU2hvcnQoc3RyZWFtLCB3aGVuLCBtc2cpClBtX1dyaXRlU3lzRXgoc3RyZWFtLCB3aGVuLCBtc2cpClBtX1F1ZXVlQ3JlYXRlKG51bV9tc2dzLCBieXRlc19wZXJfbXNnKQpQbV9RdWV1ZURlc3Ryb3kocXVldWUpClBtX0RlcXVldWUocXVldWUsIG1zZykKUG1fRW5xdWV1ZShxdWV1ZSwgbXNnKQpQbV9RdWV1ZUZ1bGwocXVldWUpClBtX1F1ZXVlRW1wdHkocXVldWUpClBtX1F1ZXVlUGVlayhxdWV1ZSkKUG1fU2V0T3ZlcmZsb3cocXVldWUpClB0X1N0YXJ0KHJlc29sdXRpb24sIGNhbGxiYWNrLCB1c2VyRGF0YSkKUHRfU3RvcCgpClB0X1N0YXJ0ZWQoKQAAAAAAAAAAzAMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					1135,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/portmidi.js",
						"symkeys":
						[
							[
								279,
								303
							],
							[
								472,
								495
							],
							[
								721,
								753
							],
							[
								990,
								1022
							],
							[
								1293,
								1331
							],
							[
								1518,
								1544
							],
							[
								1757,
								1794
							],
							[
								2021,
								2059
							],
							[
								2299,
								2328
							],
							[
								2813,
								2906
							],
							[
								3492,
								3597
							],
							[
								3942,
								3980
							],
							[
								4270,
								4310
							],
							[
								4534,
								4559
							],
							[
								4768,
								4793
							],
							[
								5020,
								5051
							],
							[
								5352,
								5392
							],
							[
								5613,
								5637
							],
							[
								5934,
								5975
							],
							[
								6296,
								6337
							],
							[
								6661,
								6702
							],
							[
								6998,
								7046
							],
							[
								7298,
								7329
							],
							[
								7592,
								7623
							],
							[
								7886,
								7917
							],
							[
								8143,
								8171
							],
							[
								8397,
								8426
							],
							[
								8653,
								8681
							],
							[
								8910,
								8940
							],
							[
								9251,
								9300
							],
							[
								9481,
								9499
							],
							[
								9656,
								9677
							]
						],
						"symlist":
						[
							"function Pm_Initialize()",
							"function Pm_Terminate()",
							"function Pm_HasHostError(stream)",
							"function Pm_GetErrorText(errnum)",
							"function Pm_GetHostErrorText(msg, len)",
							"function Pm_CountDevices()",
							"function Pm_GetDefaultInputDeviceID()",
							"function Pm_GetDefaultOutputDeviceID()",
							"function Pm_GetDeviceInfo(id)",
							"function Pm_OpenInput(stream, inputDevice, inputDriverInfo, bufferSize, time_proc, time_info)",
							"function Pm_OpenOutput(stream, outputDevice, outputDriverInfo, bufferSize, time_proc, time_info, latency)",
							"function Pm_SetFilter(stream, filters)",
							"function Pm_SetChannelMask(stream, mask)",
							"function Pm_Abort(stream)",
							"function Pm_Close(stream)",
							"function Pm_Synchronize(stream)",
							"function Pm_Read(stream, buffer, length)",
							"function Pm_Poll(stream)",
							"function Pm_Write(stream, buffer, length)",
							"function Pm_WriteShort(stream, when, msg)",
							"function Pm_WriteSysEx(stream, when, msg)",
							"function Pm_QueueCreate(num_msgs, bytes_per_msg)",
							"function Pm_QueueDestroy(queue)",
							"function Pm_Dequeue(queue, msg)",
							"function Pm_Enqueue(queue, msg)",
							"function Pm_QueueFull(queue)",
							"function Pm_QueueEmpty(queue)",
							"function Pm_QueuePeek(queue)",
							"function Pm_SetOverflow(queue)",
							"function Pt_Start(resolution, callback, userData)",
							"function Pt_Stop()",
							"function Pt_Started()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADMAwAAUE9SVF9NSURJX0gKICBpbnQzMl90CiAgdWludDMyX3QKSU5UMzJfREVGSU5FRApQTUVYUE9SVAogIF9fZGVjbHNwZWMKUE1FWFBPUlQKRkFMU0UKVFJVRQpQTV9ERUZBVUxUX1NZU0VYX0JVRkZFUl9TSVpFClBtX0luaXRpYWxpemUKUG1fVGVybWluYXRlClBvcnRNaWRpU3RyZWFtClBtU3RyZWFtClBtX0hhc0hvc3RFcnJvcgpQbV9HZXRFcnJvclRleHQKUG1fR2V0SG9zdEVycm9yVGV4dApIRFJMRU5HVEgKUE1fSE9TVF9FUlJPUl9NU0dfTEVOClBtRGV2aWNlSUQKICBwbU5vRGV2aWNlClBtX0NvdW50RGV2aWNlcwpQbV9HZXREZWZhdWx0SW5wdXREZXZpY2VJRApQbV9HZXREZWZhdWx0T3V0cHV0RGV2aWNlSUQKUG1UaW1lc3RhbXAKUG1UaW1lc3RhbXAKUG1CZWZvcmUKUG1fR2V0RGV2aWNlSW5mbwpQbV9PcGVuSW5wdXQKUG1fT3Blbk91dHB1dApQTV9GSUxUX0FDVElWRQpQTV9GSUxUX1NZU0VYClBNX0ZJTFRfQ0xPQ0sKUE1fRklMVF9QTEFZClBNX0ZJTFRfVElDSwpQTV9GSUxUX0ZEClBNX0ZJTFRfVU5ERUZJTkVEClBNX0ZJTFRfUkVTRVQKUE1fRklMVF9SRUFMVElNRQpQTV9GSUxUX05PVEUKUE1fRklMVF9DSEFOTkVMX0FGVEVSVE9VQ0gKUE1fRklMVF9QT0xZX0FGVEVSVE9VQ0gKUE1fRklMVF9BRlRFUlRPVUNIClBNX0ZJTFRfUFJPR1JBTQpQTV9GSUxUX0NPTlRST0wKUE1fRklMVF9QSVRDSEJFTkQKUE1fRklMVF9NVEMKUE1fRklMVF9TT05HX1BPU0lUSU9OClBNX0ZJTFRfU09OR19TRUxFQ1QKUE1fRklMVF9UVU5FClBNX0ZJTFRfU1lTVEVNQ09NTU9OClBtX1NldEZpbHRlcgpQbV9DaGFubmVsClBtX1NldENoYW5uZWxNYXNrClBtX0Fib3J0ClBtX0Nsb3NlClBtX1N5bmNocm9uaXplClBtX01lc3NhZ2UKUG1fTWVzc2FnZVN0YXR1cwpQbV9NZXNzYWdlRGF0YTEKUG1fTWVzc2FnZURhdGEyClBtTWVzc2FnZQpQbV9SZWFkClBtX1BvbGwKUG1fV3JpdGUKUG1fV3JpdGVTaG9ydApQbV9Xcml0ZVN5c0V4AAAAAAAAAACOAwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					1136,
					3,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/portmidi.js",
						"symkeys":
						[
							[
								279,
								303
							],
							[
								472,
								495
							],
							[
								721,
								753
							],
							[
								990,
								1022
							],
							[
								1293,
								1331
							],
							[
								1518,
								1544
							],
							[
								1757,
								1794
							],
							[
								2021,
								2059
							],
							[
								2299,
								2328
							],
							[
								2818,
								2911
							],
							[
								3497,
								3602
							],
							[
								3947,
								3985
							],
							[
								4275,
								4315
							],
							[
								4539,
								4564
							],
							[
								4773,
								4798
							],
							[
								5025,
								5056
							],
							[
								5357,
								5397
							],
							[
								5618,
								5642
							],
							[
								5939,
								5980
							],
							[
								6301,
								6342
							],
							[
								6666,
								6707
							],
							[
								7003,
								7051
							],
							[
								7303,
								7334
							],
							[
								7597,
								7628
							],
							[
								7891,
								7922
							],
							[
								8148,
								8176
							],
							[
								8402,
								8431
							],
							[
								8658,
								8686
							],
							[
								8915,
								8945
							],
							[
								9256,
								9305
							],
							[
								9486,
								9504
							],
							[
								9661,
								9682
							]
						],
						"symlist":
						[
							"function Pm_Initialize()",
							"function Pm_Terminate()",
							"function Pm_HasHostError(stream)",
							"function Pm_GetErrorText(errnum)",
							"function Pm_GetHostErrorText(msg, len)",
							"function Pm_CountDevices()",
							"function Pm_GetDefaultInputDeviceID()",
							"function Pm_GetDefaultOutputDeviceID()",
							"function Pm_GetDeviceInfo(id)",
							"function Pm_OpenInput(stream, inputDevice, inputDriverInfo, bufferSize, time_proc, time_info)",
							"function Pm_OpenOutput(stream, outputDevice, outputDriverInfo, bufferSize, time_proc, time_info, latency)",
							"function Pm_SetFilter(stream, filters)",
							"function Pm_SetChannelMask(stream, mask)",
							"function Pm_Abort(stream)",
							"function Pm_Close(stream)",
							"function Pm_Synchronize(stream)",
							"function Pm_Read(stream, buffer, length)",
							"function Pm_Poll(stream)",
							"function Pm_Write(stream, buffer, length)",
							"function Pm_WriteShort(stream, when, msg)",
							"function Pm_WriteSysEx(stream, when, msg)",
							"function Pm_QueueCreate(num_msgs, bytes_per_msg)",
							"function Pm_QueueDestroy(queue)",
							"function Pm_Dequeue(queue, msg)",
							"function Pm_Enqueue(queue, msg)",
							"function Pm_QueueFull(queue)",
							"function Pm_QueueEmpty(queue)",
							"function Pm_QueuePeek(queue)",
							"function Pm_SetOverflow(queue)",
							"function Pt_Start(resolution, callback, userData)",
							"function Pt_Stop()",
							"function Pt_Started()"
						]
					},
					"BgAAAAAAAAAAAAAAAAAAAAAAAACOAwAAUG1fSW5pdGlhbGl6ZSgpClBtX1Rlcm1pbmF0ZSgpClBtX0hhc0hvc3RFcnJvcihzdHJlYW0pClBtX0dldEVycm9yVGV4dChlcnJudW0pClBtX0dldEhvc3RFcnJvclRleHQobXNnLCBsZW4pClBtX0NvdW50RGV2aWNlcygpClBtX0dldERlZmF1bHRJbnB1dERldmljZUlEKCkKUG1fR2V0RGVmYXVsdE91dHB1dERldmljZUlEKCkKUG1fR2V0RGV2aWNlSW5mbyhpZCkKUG1fT3BlbklucHV0KHN0cmVhbSwgaW5wdXREZXZpY2UsIGlucHV0RHJpdmVySW5mbywgYnVmZmVyU2l6ZSwgdGltZV9wcm9jLCB0aW1lX2luZm8pClBtX09wZW5PdXRwdXQoc3RyZWFtLCBvdXRwdXREZXZpY2UsIG91dHB1dERyaXZlckluZm8sIGJ1ZmZlclNpemUsIHRpbWVfcHJvYywgdGltZV9pbmZvLCBsYXRlbmN5KQpQbV9TZXRGaWx0ZXIoc3RyZWFtLCBmaWx0ZXJzKQpQbV9TZXRDaGFubmVsTWFzayhzdHJlYW0sIG1hc2spClBtX0Fib3J0KHN0cmVhbSkKUG1fQ2xvc2Uoc3RyZWFtKQpQbV9TeW5jaHJvbml6ZShzdHJlYW0pClBtX1JlYWQoc3RyZWFtLCBidWZmZXIsIGxlbmd0aCkKUG1fUG9sbChzdHJlYW0pClBtX1dyaXRlKHN0cmVhbSwgYnVmZmVyLCBsZW5ndGgpClBtX1dyaXRlU2hvcnQoc3RyZWFtLCB3aGVuLCBtc2cpClBtX1dyaXRlU3lzRXgoc3RyZWFtLCB3aGVuLCBtc2cpClBtX1F1ZXVlQ3JlYXRlKG51bV9tc2dzLCBieXRlc19wZXJfbXNnKQpQbV9RdWV1ZURlc3Ryb3kocXVldWUpClBtX0RlcXVldWUocXVldWUsIG1zZykKUG1fRW5xdWV1ZShxdWV1ZSwgbXNnKQpQbV9RdWV1ZUZ1bGwocXVldWUpClBtX1F1ZXVlRW1wdHkocXVldWUpClBtX1F1ZXVlUGVlayhxdWV1ZSkKUG1fU2V0T3ZlcmZsb3cocXVldWUpClB0X1N0YXJ0KHJlc29sdXRpb24sIGNhbGxiYWNrLCB1c2VyRGF0YSkKUHRfU3RvcCgpClB0X1N0YXJ0ZWQoKQAAAAAAAAAAjgMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAI4DAABQbV9Jbml0aWFsaXplKCkKUG1fVGVybWluYXRlKCkKUG1fSGFzSG9zdEVycm9yKHN0cmVhbSkKUG1fR2V0RXJyb3JUZXh0KGVycm51bSkKUG1fR2V0SG9zdEVycm9yVGV4dChtc2csIGxlbikKUG1fQ291bnREZXZpY2VzKCkKUG1fR2V0RGVmYXVsdElucHV0RGV2aWNlSUQoKQpQbV9HZXREZWZhdWx0T3V0cHV0RGV2aWNlSUQoKQpQbV9HZXREZXZpY2VJbmZvKGlkKQpQbV9PcGVuSW5wdXQoc3RyZWFtLCBpbnB1dERldmljZSwgaW5wdXREcml2ZXJJbmZvLCBidWZmZXJTaXplLCB0aW1lX3Byb2MsIHRpbWVfaW5mbykKUG1fT3Blbk91dHB1dChzdHJlYW0sIG91dHB1dERldmljZSwgb3V0cHV0RHJpdmVySW5mbywgYnVmZmVyU2l6ZSwgdGltZV9wcm9jLCB0aW1lX2luZm8sIGxhdGVuY3kpClBtX1NldEZpbHRlcihzdHJlYW0sIGZpbHRlcnMpClBtX1NldENoYW5uZWxNYXNrKHN0cmVhbSwgbWFzaykKUG1fQWJvcnQoc3RyZWFtKQpQbV9DbG9zZShzdHJlYW0pClBtX1N5bmNocm9uaXplKHN0cmVhbSkKUG1fUmVhZChzdHJlYW0sIGJ1ZmZlciwgbGVuZ3RoKQpQbV9Qb2xsKHN0cmVhbSkKUG1fV3JpdGUoc3RyZWFtLCBidWZmZXIsIGxlbmd0aCkKUG1fV3JpdGVTaG9ydChzdHJlYW0sIHdoZW4sIG1zZykKUG1fV3JpdGVTeXNFeChzdHJlYW0sIHdoZW4sIG1zZykKUG1fUXVldWVDcmVhdGUobnVtX21zZ3MsIGJ5dGVzX3Blcl9tc2cpClBtX1F1ZXVlRGVzdHJveShxdWV1ZSkKUG1fRGVxdWV1ZShxdWV1ZSwgbXNnKQpQbV9FbnF1ZXVlKHF1ZXVlLCBtc2cpClBtX1F1ZXVlRnVsbChxdWV1ZSkKUG1fUXVldWVFbXB0eShxdWV1ZSkKUG1fUXVldWVQZWVrKHF1ZXVlKQpQbV9TZXRPdmVyZmxvdyhxdWV1ZSkKUHRfU3RhcnQocmVzb2x1dGlvbiwgY2FsbGJhY2ssIHVzZXJEYXRhKQpQdF9TdG9wKCkKUHRfU3RhcnRlZCgpAAAAAAAAAACOAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjgMAAFBtX0luaXRpYWxpemUoKQpQbV9UZXJtaW5hdGUoKQpQbV9IYXNIb3N0RXJyb3Ioc3RyZWFtKQpQbV9HZXRFcnJvclRleHQoZXJybnVtKQpQbV9HZXRIb3N0RXJyb3JUZXh0KG1zZywgbGVuKQpQbV9Db3VudERldmljZXMoKQpQbV9HZXREZWZhdWx0SW5wdXREZXZpY2VJRCgpClBtX0dldERlZmF1bHRPdXRwdXREZXZpY2VJRCgpClBtX0dldERldmljZUluZm8oaWQpClBtX09wZW5JbnB1dChzdHJlYW0sIGlucHV0RGV2aWNlLCBpbnB1dERyaXZlckluZm8sIGJ1ZmZlclNpemUsIHRpbWVfcHJvYywgdGltZV9pbmZvKQpQbV9PcGVuT3V0cHV0KHN0cmVhbSwgb3V0cHV0RGV2aWNlLCBvdXRwdXREcml2ZXJJbmZvLCBidWZmZXJTaXplLCB0aW1lX3Byb2MsIHRpbWVfaW5mbywgbGF0ZW5jeSkKUG1fU2V0RmlsdGVyKHN0cmVhbSwgZmlsdGVycykKUG1fU2V0Q2hhbm5lbE1hc2soc3RyZWFtLCBtYXNrKQpQbV9BYm9ydChzdHJlYW0pClBtX0Nsb3NlKHN0cmVhbSkKUG1fU3luY2hyb25pemUoc3RyZWFtKQpQbV9SZWFkKHN0cmVhbSwgYnVmZmVyLCBsZW5ndGgpClBtX1BvbGwoc3RyZWFtKQpQbV9Xcml0ZShzdHJlYW0sIGJ1ZmZlciwgbGVuZ3RoKQpQbV9Xcml0ZVNob3J0KHN0cmVhbSwgd2hlbiwgbXNnKQpQbV9Xcml0ZVN5c0V4KHN0cmVhbSwgd2hlbiwgbXNnKQpQbV9RdWV1ZUNyZWF0ZShudW1fbXNncywgYnl0ZXNfcGVyX21zZykKUG1fUXVldWVEZXN0cm95KHF1ZXVlKQpQbV9EZXF1ZXVlKHF1ZXVlLCBtc2cpClBtX0VucXVldWUocXVldWUsIG1zZykKUG1fUXVldWVGdWxsKHF1ZXVlKQpQbV9RdWV1ZUVtcHR5KHF1ZXVlKQpQbV9RdWV1ZVBlZWsocXVldWUpClBtX1NldE92ZXJmbG93KHF1ZXVlKQpQdF9TdGFydChyZXNvbHV0aW9uLCBjYWxsYmFjaywgdXNlckRhdGEpClB0X1N0b3AoKQpQdF9TdGFydGVkKCkAAAAAAAAAAI4DAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					1137,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AwAAAAAAAAAAAAAAAAAAAAAAAACOAwAAUG1fSW5pdGlhbGl6ZSgpClBtX1Rlcm1pbmF0ZSgpClBtX0hhc0hvc3RFcnJvcihzdHJlYW0pClBtX0dldEVycm9yVGV4dChlcnJudW0pClBtX0dldEhvc3RFcnJvclRleHQobXNnLCBsZW4pClBtX0NvdW50RGV2aWNlcygpClBtX0dldERlZmF1bHRJbnB1dERldmljZUlEKCkKUG1fR2V0RGVmYXVsdE91dHB1dERldmljZUlEKCkKUG1fR2V0RGV2aWNlSW5mbyhpZCkKUG1fT3BlbklucHV0KHN0cmVhbSwgaW5wdXREZXZpY2UsIGlucHV0RHJpdmVySW5mbywgYnVmZmVyU2l6ZSwgdGltZV9wcm9jLCB0aW1lX2luZm8pClBtX09wZW5PdXRwdXQoc3RyZWFtLCBvdXRwdXREZXZpY2UsIG91dHB1dERyaXZlckluZm8sIGJ1ZmZlclNpemUsIHRpbWVfcHJvYywgdGltZV9pbmZvLCBsYXRlbmN5KQpQbV9TZXRGaWx0ZXIoc3RyZWFtLCBmaWx0ZXJzKQpQbV9TZXRDaGFubmVsTWFzayhzdHJlYW0sIG1hc2spClBtX0Fib3J0KHN0cmVhbSkKUG1fQ2xvc2Uoc3RyZWFtKQpQbV9TeW5jaHJvbml6ZShzdHJlYW0pClBtX1JlYWQoc3RyZWFtLCBidWZmZXIsIGxlbmd0aCkKUG1fUG9sbChzdHJlYW0pClBtX1dyaXRlKHN0cmVhbSwgYnVmZmVyLCBsZW5ndGgpClBtX1dyaXRlU2hvcnQoc3RyZWFtLCB3aGVuLCBtc2cpClBtX1dyaXRlU3lzRXgoc3RyZWFtLCB3aGVuLCBtc2cpClBtX1F1ZXVlQ3JlYXRlKG51bV9tc2dzLCBieXRlc19wZXJfbXNnKQpQbV9RdWV1ZURlc3Ryb3kocXVldWUpClBtX0RlcXVldWUocXVldWUsIG1zZykKUG1fRW5xdWV1ZShxdWV1ZSwgbXNnKQpQbV9RdWV1ZUZ1bGwocXVldWUpClBtX1F1ZXVlRW1wdHkocXVldWUpClBtX1F1ZXVlUGVlayhxdWV1ZSkKUG1fU2V0T3ZlcmZsb3cocXVldWUpClB0X1N0YXJ0KHJlc29sdXRpb24sIGNhbGxiYWNrLCB1c2VyRGF0YSkKUHRfU3RvcCgpClB0X1N0YXJ0ZWQoKQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					1138,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/portmidi.js",
						"symkeys":
						[
							[
								279,
								303
							],
							[
								472,
								495
							],
							[
								721,
								753
							],
							[
								990,
								1022
							],
							[
								1293,
								1331
							],
							[
								1518,
								1544
							],
							[
								1757,
								1794
							],
							[
								2021,
								2059
							],
							[
								2299,
								2328
							],
							[
								2801,
								2894
							],
							[
								3480,
								3585
							],
							[
								3930,
								3968
							],
							[
								4258,
								4298
							],
							[
								4522,
								4547
							],
							[
								4756,
								4781
							],
							[
								5008,
								5039
							],
							[
								5340,
								5380
							],
							[
								5601,
								5625
							],
							[
								5922,
								5963
							],
							[
								6284,
								6325
							],
							[
								6649,
								6690
							],
							[
								6986,
								7034
							],
							[
								7286,
								7317
							],
							[
								7580,
								7611
							],
							[
								7874,
								7905
							],
							[
								8131,
								8159
							],
							[
								8385,
								8414
							],
							[
								8641,
								8669
							],
							[
								8898,
								8928
							],
							[
								9239,
								9288
							],
							[
								9469,
								9487
							],
							[
								9644,
								9665
							]
						],
						"symlist":
						[
							"function Pm_Initialize()",
							"function Pm_Terminate()",
							"function Pm_HasHostError(stream)",
							"function Pm_GetErrorText(errnum)",
							"function Pm_GetHostErrorText(msg, len)",
							"function Pm_CountDevices()",
							"function Pm_GetDefaultInputDeviceID()",
							"function Pm_GetDefaultOutputDeviceID()",
							"function Pm_GetDeviceInfo(id)",
							"function Pm_OpenInput(stream, inputDevice, inputDriverInfo, bufferSize, time_proc, time_info)",
							"function Pm_OpenOutput(stream, outputDevice, outputDriverInfo, bufferSize, time_proc, time_info, latency)",
							"function Pm_SetFilter(stream, filters)",
							"function Pm_SetChannelMask(stream, mask)",
							"function Pm_Abort(stream)",
							"function Pm_Close(stream)",
							"function Pm_Synchronize(stream)",
							"function Pm_Read(stream, buffer, length)",
							"function Pm_Poll(stream)",
							"function Pm_Write(stream, buffer, length)",
							"function Pm_WriteShort(stream, when, msg)",
							"function Pm_WriteSysEx(stream, when, msg)",
							"function Pm_QueueCreate(num_msgs, bytes_per_msg)",
							"function Pm_QueueDestroy(queue)",
							"function Pm_Dequeue(queue, msg)",
							"function Pm_Enqueue(queue, msg)",
							"function Pm_QueueFull(queue)",
							"function Pm_QueueEmpty(queue)",
							"function Pm_QueuePeek(queue)",
							"function Pm_SetOverflow(queue)",
							"function Pt_Start(resolution, callback, userData)",
							"function Pt_Stop()",
							"function Pt_Started()"
						]
					},
					"AQAAAAAAAAAAAAAAjgMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					1139,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACOAwAAUG1fSW5pdGlhbGl6ZSgpClBtX1Rlcm1pbmF0ZSgpClBtX0hhc0hvc3RFcnJvcihzdHJlYW0pClBtX0dldEVycm9yVGV4dChlcnJudW0pClBtX0dldEhvc3RFcnJvclRleHQobXNnLCBsZW4pClBtX0NvdW50RGV2aWNlcygpClBtX0dldERlZmF1bHRJbnB1dERldmljZUlEKCkKUG1fR2V0RGVmYXVsdE91dHB1dERldmljZUlEKCkKUG1fR2V0RGV2aWNlSW5mbyhpZCkKUG1fT3BlbklucHV0KHN0cmVhbSwgaW5wdXREZXZpY2UsIGlucHV0RHJpdmVySW5mbywgYnVmZmVyU2l6ZSwgdGltZV9wcm9jLCB0aW1lX2luZm8pClBtX09wZW5PdXRwdXQoc3RyZWFtLCBvdXRwdXREZXZpY2UsIG91dHB1dERyaXZlckluZm8sIGJ1ZmZlclNpemUsIHRpbWVfcHJvYywgdGltZV9pbmZvLCBsYXRlbmN5KQpQbV9TZXRGaWx0ZXIoc3RyZWFtLCBmaWx0ZXJzKQpQbV9TZXRDaGFubmVsTWFzayhzdHJlYW0sIG1hc2spClBtX0Fib3J0KHN0cmVhbSkKUG1fQ2xvc2Uoc3RyZWFtKQpQbV9TeW5jaHJvbml6ZShzdHJlYW0pClBtX1JlYWQoc3RyZWFtLCBidWZmZXIsIGxlbmd0aCkKUG1fUG9sbChzdHJlYW0pClBtX1dyaXRlKHN0cmVhbSwgYnVmZmVyLCBsZW5ndGgpClBtX1dyaXRlU2hvcnQoc3RyZWFtLCB3aGVuLCBtc2cpClBtX1dyaXRlU3lzRXgoc3RyZWFtLCB3aGVuLCBtc2cpClBtX1F1ZXVlQ3JlYXRlKG51bV9tc2dzLCBieXRlc19wZXJfbXNnKQpQbV9RdWV1ZURlc3Ryb3kocXVldWUpClBtX0RlcXVldWUocXVldWUsIG1zZykKUG1fRW5xdWV1ZShxdWV1ZSwgbXNnKQpQbV9RdWV1ZUZ1bGwocXVldWUpClBtX1F1ZXVlRW1wdHkocXVldWUpClBtX1F1ZXVlUGVlayhxdWV1ZSkKUG1fU2V0T3ZlcmZsb3cocXVldWUpClB0X1N0YXJ0KHJlc29sdXRpb24sIGNhbGxiYWNrLCB1c2VyRGF0YSkKUHRfU3RvcCgpClB0X1N0YXJ0ZWQoKQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					1140,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					1141,
					3,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/portmidi.js",
						"symkeys":
						[
							[
								279,
								303
							],
							[
								472,
								495
							],
							[
								721,
								753
							],
							[
								990,
								1022
							],
							[
								1293,
								1331
							],
							[
								1518,
								1544
							],
							[
								1757,
								1794
							],
							[
								2021,
								2059
							],
							[
								2299,
								2328
							],
							[
								2801,
								2894
							],
							[
								3480,
								3585
							],
							[
								3930,
								3968
							],
							[
								4258,
								4298
							],
							[
								4522,
								4547
							],
							[
								4756,
								4781
							],
							[
								5008,
								5039
							],
							[
								5340,
								5380
							],
							[
								5601,
								5625
							],
							[
								5922,
								5963
							],
							[
								6284,
								6325
							],
							[
								6649,
								6690
							],
							[
								6986,
								7034
							],
							[
								7286,
								7317
							],
							[
								7580,
								7611
							],
							[
								7874,
								7905
							],
							[
								8131,
								8159
							],
							[
								8385,
								8414
							],
							[
								8641,
								8669
							],
							[
								8898,
								8928
							],
							[
								9239,
								9288
							],
							[
								9469,
								9487
							],
							[
								9644,
								9665
							]
						],
						"symlist":
						[
							"function Pm_Initialize()",
							"function Pm_Terminate()",
							"function Pm_HasHostError(stream)",
							"function Pm_GetErrorText(errnum)",
							"function Pm_GetHostErrorText(msg, len)",
							"function Pm_CountDevices()",
							"function Pm_GetDefaultInputDeviceID()",
							"function Pm_GetDefaultOutputDeviceID()",
							"function Pm_GetDeviceInfo(id)",
							"function Pm_OpenInput(stream, inputDevice, inputDriverInfo, bufferSize, time_proc, time_info)",
							"function Pm_OpenOutput(stream, outputDevice, outputDriverInfo, bufferSize, time_proc, time_info, latency)",
							"function Pm_SetFilter(stream, filters)",
							"function Pm_SetChannelMask(stream, mask)",
							"function Pm_Abort(stream)",
							"function Pm_Close(stream)",
							"function Pm_Synchronize(stream)",
							"function Pm_Read(stream, buffer, length)",
							"function Pm_Poll(stream)",
							"function Pm_Write(stream, buffer, length)",
							"function Pm_WriteShort(stream, when, msg)",
							"function Pm_WriteSysEx(stream, when, msg)",
							"function Pm_QueueCreate(num_msgs, bytes_per_msg)",
							"function Pm_QueueDestroy(queue)",
							"function Pm_Dequeue(queue, msg)",
							"function Pm_Enqueue(queue, msg)",
							"function Pm_QueueFull(queue)",
							"function Pm_QueueEmpty(queue)",
							"function Pm_QueuePeek(queue)",
							"function Pm_SetOverflow(queue)",
							"function Pt_Start(resolution, callback, userData)",
							"function Pt_Stop()",
							"function Pt_Started()"
						]
					},
					"BQAAAAAAAAAAAAAAjgMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAI4DAABQbV9Jbml0aWFsaXplKCkKUG1fVGVybWluYXRlKCkKUG1fSGFzSG9zdEVycm9yKHN0cmVhbSkKUG1fR2V0RXJyb3JUZXh0KGVycm51bSkKUG1fR2V0SG9zdEVycm9yVGV4dChtc2csIGxlbikKUG1fQ291bnREZXZpY2VzKCkKUG1fR2V0RGVmYXVsdElucHV0RGV2aWNlSUQoKQpQbV9HZXREZWZhdWx0T3V0cHV0RGV2aWNlSUQoKQpQbV9HZXREZXZpY2VJbmZvKGlkKQpQbV9PcGVuSW5wdXQoc3RyZWFtLCBpbnB1dERldmljZSwgaW5wdXREcml2ZXJJbmZvLCBidWZmZXJTaXplLCB0aW1lX3Byb2MsIHRpbWVfaW5mbykKUG1fT3Blbk91dHB1dChzdHJlYW0sIG91dHB1dERldmljZSwgb3V0cHV0RHJpdmVySW5mbywgYnVmZmVyU2l6ZSwgdGltZV9wcm9jLCB0aW1lX2luZm8sIGxhdGVuY3kpClBtX1NldEZpbHRlcihzdHJlYW0sIGZpbHRlcnMpClBtX1NldENoYW5uZWxNYXNrKHN0cmVhbSwgbWFzaykKUG1fQWJvcnQoc3RyZWFtKQpQbV9DbG9zZShzdHJlYW0pClBtX1N5bmNocm9uaXplKHN0cmVhbSkKUG1fUmVhZChzdHJlYW0sIGJ1ZmZlciwgbGVuZ3RoKQpQbV9Qb2xsKHN0cmVhbSkKUG1fV3JpdGUoc3RyZWFtLCBidWZmZXIsIGxlbmd0aCkKUG1fV3JpdGVTaG9ydChzdHJlYW0sIHdoZW4sIG1zZykKUG1fV3JpdGVTeXNFeChzdHJlYW0sIHdoZW4sIG1zZykKUG1fUXVldWVDcmVhdGUobnVtX21zZ3MsIGJ5dGVzX3Blcl9tc2cpClBtX1F1ZXVlRGVzdHJveShxdWV1ZSkKUG1fRGVxdWV1ZShxdWV1ZSwgbXNnKQpQbV9FbnF1ZXVlKHF1ZXVlLCBtc2cpClBtX1F1ZXVlRnVsbChxdWV1ZSkKUG1fUXVldWVFbXB0eShxdWV1ZSkKUG1fUXVldWVQZWVrKHF1ZXVlKQpQbV9TZXRPdmVyZmxvdyhxdWV1ZSkKUHRfU3RhcnQocmVzb2x1dGlvbiwgY2FsbGJhY2ssIHVzZXJEYXRhKQpQdF9TdG9wKCkKUHRfU3RhcnRlZCgpAAAAAAAAAACOAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjgMAAFBtX0luaXRpYWxpemUoKQpQbV9UZXJtaW5hdGUoKQpQbV9IYXNIb3N0RXJyb3Ioc3RyZWFtKQpQbV9HZXRFcnJvclRleHQoZXJybnVtKQpQbV9HZXRIb3N0RXJyb3JUZXh0KG1zZywgbGVuKQpQbV9Db3VudERldmljZXMoKQpQbV9HZXREZWZhdWx0SW5wdXREZXZpY2VJRCgpClBtX0dldERlZmF1bHRPdXRwdXREZXZpY2VJRCgpClBtX0dldERldmljZUluZm8oaWQpClBtX09wZW5JbnB1dChzdHJlYW0sIGlucHV0RGV2aWNlLCBpbnB1dERyaXZlckluZm8sIGJ1ZmZlclNpemUsIHRpbWVfcHJvYywgdGltZV9pbmZvKQpQbV9PcGVuT3V0cHV0KHN0cmVhbSwgb3V0cHV0RGV2aWNlLCBvdXRwdXREcml2ZXJJbmZvLCBidWZmZXJTaXplLCB0aW1lX3Byb2MsIHRpbWVfaW5mbywgbGF0ZW5jeSkKUG1fU2V0RmlsdGVyKHN0cmVhbSwgZmlsdGVycykKUG1fU2V0Q2hhbm5lbE1hc2soc3RyZWFtLCBtYXNrKQpQbV9BYm9ydChzdHJlYW0pClBtX0Nsb3NlKHN0cmVhbSkKUG1fU3luY2hyb25pemUoc3RyZWFtKQpQbV9SZWFkKHN0cmVhbSwgYnVmZmVyLCBsZW5ndGgpClBtX1BvbGwoc3RyZWFtKQpQbV9Xcml0ZShzdHJlYW0sIGJ1ZmZlciwgbGVuZ3RoKQpQbV9Xcml0ZVNob3J0KHN0cmVhbSwgd2hlbiwgbXNnKQpQbV9Xcml0ZVN5c0V4KHN0cmVhbSwgd2hlbiwgbXNnKQpQbV9RdWV1ZUNyZWF0ZShudW1fbXNncywgYnl0ZXNfcGVyX21zZykKUG1fUXVldWVEZXN0cm95KHF1ZXVlKQpQbV9EZXF1ZXVlKHF1ZXVlLCBtc2cpClBtX0VucXVldWUocXVldWUsIG1zZykKUG1fUXVldWVGdWxsKHF1ZXVlKQpQbV9RdWV1ZUVtcHR5KHF1ZXVlKQpQbV9RdWV1ZVBlZWsocXVldWUpClBtX1NldE92ZXJmbG93KHF1ZXVlKQpQdF9TdGFydChyZXNvbHV0aW9uLCBjYWxsYmFjaywgdXNlckRhdGEpClB0X1N0b3AoKQpQdF9TdGFydGVkKCkAAAAAAAAAAI4DAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					1142,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACOAwAAUG1fSW5pdGlhbGl6ZSgpClBtX1Rlcm1pbmF0ZSgpClBtX0hhc0hvc3RFcnJvcihzdHJlYW0pClBtX0dldEVycm9yVGV4dChlcnJudW0pClBtX0dldEhvc3RFcnJvclRleHQobXNnLCBsZW4pClBtX0NvdW50RGV2aWNlcygpClBtX0dldERlZmF1bHRJbnB1dERldmljZUlEKCkKUG1fR2V0RGVmYXVsdE91dHB1dERldmljZUlEKCkKUG1fR2V0RGV2aWNlSW5mbyhpZCkKUG1fT3BlbklucHV0KHN0cmVhbSwgaW5wdXREZXZpY2UsIGlucHV0RHJpdmVySW5mbywgYnVmZmVyU2l6ZSwgdGltZV9wcm9jLCB0aW1lX2luZm8pClBtX09wZW5PdXRwdXQoc3RyZWFtLCBvdXRwdXREZXZpY2UsIG91dHB1dERyaXZlckluZm8sIGJ1ZmZlclNpemUsIHRpbWVfcHJvYywgdGltZV9pbmZvLCBsYXRlbmN5KQpQbV9TZXRGaWx0ZXIoc3RyZWFtLCBmaWx0ZXJzKQpQbV9TZXRDaGFubmVsTWFzayhzdHJlYW0sIG1hc2spClBtX0Fib3J0KHN0cmVhbSkKUG1fQ2xvc2Uoc3RyZWFtKQpQbV9TeW5jaHJvbml6ZShzdHJlYW0pClBtX1JlYWQoc3RyZWFtLCBidWZmZXIsIGxlbmd0aCkKUG1fUG9sbChzdHJlYW0pClBtX1dyaXRlKHN0cmVhbSwgYnVmZmVyLCBsZW5ndGgpClBtX1dyaXRlU2hvcnQoc3RyZWFtLCB3aGVuLCBtc2cpClBtX1dyaXRlU3lzRXgoc3RyZWFtLCB3aGVuLCBtc2cpClBtX1F1ZXVlQ3JlYXRlKG51bV9tc2dzLCBieXRlc19wZXJfbXNnKQpQbV9RdWV1ZURlc3Ryb3kocXVldWUpClBtX0RlcXVldWUocXVldWUsIG1zZykKUG1fRW5xdWV1ZShxdWV1ZSwgbXNnKQpQbV9RdWV1ZUZ1bGwocXVldWUpClBtX1F1ZXVlRW1wdHkocXVldWUpClBtX1F1ZXVlUGVlayhxdWV1ZSkKUG1fU2V0T3ZlcmZsb3cocXVldWUpClB0X1N0YXJ0KHJlc29sdXRpb24sIGNhbGxiYWNrLCB1c2VyRGF0YSkKUHRfU3RvcCgpClB0X1N0YXJ0ZWQoKQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					1143,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/portmidi.js",
						"symkeys":
						[
							[
								279,
								303
							],
							[
								472,
								495
							],
							[
								721,
								753
							],
							[
								990,
								1022
							],
							[
								1293,
								1331
							],
							[
								1518,
								1544
							],
							[
								1757,
								1794
							],
							[
								2021,
								2059
							],
							[
								2299,
								2328
							],
							[
								2801,
								2894
							],
							[
								3480,
								3585
							],
							[
								3930,
								3968
							],
							[
								4258,
								4298
							],
							[
								4522,
								4547
							],
							[
								4756,
								4781
							],
							[
								5008,
								5039
							],
							[
								5340,
								5380
							],
							[
								5601,
								5625
							],
							[
								5922,
								5963
							],
							[
								6284,
								6325
							],
							[
								6649,
								6690
							],
							[
								6986,
								7034
							],
							[
								7286,
								7317
							],
							[
								7580,
								7611
							],
							[
								7874,
								7905
							],
							[
								8131,
								8159
							],
							[
								8385,
								8414
							],
							[
								8641,
								8669
							],
							[
								8898,
								8928
							],
							[
								9239,
								9288
							],
							[
								9469,
								9487
							],
							[
								9644,
								9665
							]
						],
						"symlist":
						[
							"function Pm_Initialize()",
							"function Pm_Terminate()",
							"function Pm_HasHostError(stream)",
							"function Pm_GetErrorText(errnum)",
							"function Pm_GetHostErrorText(msg, len)",
							"function Pm_CountDevices()",
							"function Pm_GetDefaultInputDeviceID()",
							"function Pm_GetDefaultOutputDeviceID()",
							"function Pm_GetDeviceInfo(id)",
							"function Pm_OpenInput(stream, inputDevice, inputDriverInfo, bufferSize, time_proc, time_info)",
							"function Pm_OpenOutput(stream, outputDevice, outputDriverInfo, bufferSize, time_proc, time_info, latency)",
							"function Pm_SetFilter(stream, filters)",
							"function Pm_SetChannelMask(stream, mask)",
							"function Pm_Abort(stream)",
							"function Pm_Close(stream)",
							"function Pm_Synchronize(stream)",
							"function Pm_Read(stream, buffer, length)",
							"function Pm_Poll(stream)",
							"function Pm_Write(stream, buffer, length)",
							"function Pm_WriteShort(stream, when, msg)",
							"function Pm_WriteSysEx(stream, when, msg)",
							"function Pm_QueueCreate(num_msgs, bytes_per_msg)",
							"function Pm_QueueDestroy(queue)",
							"function Pm_Dequeue(queue, msg)",
							"function Pm_Enqueue(queue, msg)",
							"function Pm_QueueFull(queue)",
							"function Pm_QueueEmpty(queue)",
							"function Pm_QueuePeek(queue)",
							"function Pm_SetOverflow(queue)",
							"function Pt_Start(resolution, callback, userData)",
							"function Pt_Stop()",
							"function Pt_Started()"
						]
					},
					"AQAAAAAAAAAAAAAAjgMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					1144,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACOAwAAUG1fSW5pdGlhbGl6ZSgpClBtX1Rlcm1pbmF0ZSgpClBtX0hhc0hvc3RFcnJvcihzdHJlYW0pClBtX0dldEVycm9yVGV4dChlcnJudW0pClBtX0dldEhvc3RFcnJvclRleHQobXNnLCBsZW4pClBtX0NvdW50RGV2aWNlcygpClBtX0dldERlZmF1bHRJbnB1dERldmljZUlEKCkKUG1fR2V0RGVmYXVsdE91dHB1dERldmljZUlEKCkKUG1fR2V0RGV2aWNlSW5mbyhpZCkKUG1fT3BlbklucHV0KHN0cmVhbSwgaW5wdXREZXZpY2UsIGlucHV0RHJpdmVySW5mbywgYnVmZmVyU2l6ZSwgdGltZV9wcm9jLCB0aW1lX2luZm8pClBtX09wZW5PdXRwdXQoc3RyZWFtLCBvdXRwdXREZXZpY2UsIG91dHB1dERyaXZlckluZm8sIGJ1ZmZlclNpemUsIHRpbWVfcHJvYywgdGltZV9pbmZvLCBsYXRlbmN5KQpQbV9TZXRGaWx0ZXIoc3RyZWFtLCBmaWx0ZXJzKQpQbV9TZXRDaGFubmVsTWFzayhzdHJlYW0sIG1hc2spClBtX0Fib3J0KHN0cmVhbSkKUG1fQ2xvc2Uoc3RyZWFtKQpQbV9TeW5jaHJvbml6ZShzdHJlYW0pClBtX1JlYWQoc3RyZWFtLCBidWZmZXIsIGxlbmd0aCkKUG1fUG9sbChzdHJlYW0pClBtX1dyaXRlKHN0cmVhbSwgYnVmZmVyLCBsZW5ndGgpClBtX1dyaXRlU2hvcnQoc3RyZWFtLCB3aGVuLCBtc2cpClBtX1dyaXRlU3lzRXgoc3RyZWFtLCB3aGVuLCBtc2cpClBtX1F1ZXVlQ3JlYXRlKG51bV9tc2dzLCBieXRlc19wZXJfbXNnKQpQbV9RdWV1ZURlc3Ryb3kocXVldWUpClBtX0RlcXVldWUocXVldWUsIG1zZykKUG1fRW5xdWV1ZShxdWV1ZSwgbXNnKQpQbV9RdWV1ZUZ1bGwocXVldWUpClBtX1F1ZXVlRW1wdHkocXVldWUpClBtX1F1ZXVlUGVlayhxdWV1ZSkKUG1fU2V0T3ZlcmZsb3cocXVldWUpClB0X1N0YXJ0KHJlc29sdXRpb24sIGNhbGxiYWNrLCB1c2VyRGF0YSkKUHRfU3RvcCgpClB0X1N0YXJ0ZWQoKQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					1145,
					3,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/portmidi.js",
						"symkeys":
						[
							[
								279,
								303
							],
							[
								472,
								495
							],
							[
								721,
								753
							],
							[
								990,
								1022
							],
							[
								1293,
								1331
							],
							[
								1518,
								1544
							],
							[
								1757,
								1794
							],
							[
								2021,
								2059
							],
							[
								2299,
								2328
							],
							[
								2801,
								2894
							],
							[
								3480,
								3585
							],
							[
								3930,
								3968
							],
							[
								4258,
								4298
							],
							[
								4522,
								4547
							],
							[
								4756,
								4781
							],
							[
								5008,
								5039
							],
							[
								5340,
								5380
							],
							[
								5601,
								5625
							],
							[
								5922,
								5963
							],
							[
								6284,
								6325
							],
							[
								6649,
								6690
							],
							[
								6986,
								7034
							],
							[
								7286,
								7317
							],
							[
								7580,
								7611
							],
							[
								7874,
								7905
							],
							[
								8131,
								8159
							],
							[
								8385,
								8414
							],
							[
								8641,
								8669
							],
							[
								8898,
								8928
							],
							[
								9239,
								9288
							],
							[
								9469,
								9487
							],
							[
								9644,
								9665
							]
						],
						"symlist":
						[
							"function Pm_Initialize()",
							"function Pm_Terminate()",
							"function Pm_HasHostError(stream)",
							"function Pm_GetErrorText(errnum)",
							"function Pm_GetHostErrorText(msg, len)",
							"function Pm_CountDevices()",
							"function Pm_GetDefaultInputDeviceID()",
							"function Pm_GetDefaultOutputDeviceID()",
							"function Pm_GetDeviceInfo(id)",
							"function Pm_OpenInput(stream, inputDevice, inputDriverInfo, bufferSize, time_proc, time_info)",
							"function Pm_OpenOutput(stream, outputDevice, outputDriverInfo, bufferSize, time_proc, time_info, latency)",
							"function Pm_SetFilter(stream, filters)",
							"function Pm_SetChannelMask(stream, mask)",
							"function Pm_Abort(stream)",
							"function Pm_Close(stream)",
							"function Pm_Synchronize(stream)",
							"function Pm_Read(stream, buffer, length)",
							"function Pm_Poll(stream)",
							"function Pm_Write(stream, buffer, length)",
							"function Pm_WriteShort(stream, when, msg)",
							"function Pm_WriteSysEx(stream, when, msg)",
							"function Pm_QueueCreate(num_msgs, bytes_per_msg)",
							"function Pm_QueueDestroy(queue)",
							"function Pm_Dequeue(queue, msg)",
							"function Pm_Enqueue(queue, msg)",
							"function Pm_QueueFull(queue)",
							"function Pm_QueueEmpty(queue)",
							"function Pm_QueuePeek(queue)",
							"function Pm_SetOverflow(queue)",
							"function Pt_Start(resolution, callback, userData)",
							"function Pt_Stop()",
							"function Pt_Started()"
						]
					},
					"BQAAAAAAAAAAAAAAjgMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAI4DAABQbV9Jbml0aWFsaXplKCkKUG1fVGVybWluYXRlKCkKUG1fSGFzSG9zdEVycm9yKHN0cmVhbSkKUG1fR2V0RXJyb3JUZXh0KGVycm51bSkKUG1fR2V0SG9zdEVycm9yVGV4dChtc2csIGxlbikKUG1fQ291bnREZXZpY2VzKCkKUG1fR2V0RGVmYXVsdElucHV0RGV2aWNlSUQoKQpQbV9HZXREZWZhdWx0T3V0cHV0RGV2aWNlSUQoKQpQbV9HZXREZXZpY2VJbmZvKGlkKQpQbV9PcGVuSW5wdXQoc3RyZWFtLCBpbnB1dERldmljZSwgaW5wdXREcml2ZXJJbmZvLCBidWZmZXJTaXplLCB0aW1lX3Byb2MsIHRpbWVfaW5mbykKUG1fT3Blbk91dHB1dChzdHJlYW0sIG91dHB1dERldmljZSwgb3V0cHV0RHJpdmVySW5mbywgYnVmZmVyU2l6ZSwgdGltZV9wcm9jLCB0aW1lX2luZm8sIGxhdGVuY3kpClBtX1NldEZpbHRlcihzdHJlYW0sIGZpbHRlcnMpClBtX1NldENoYW5uZWxNYXNrKHN0cmVhbSwgbWFzaykKUG1fQWJvcnQoc3RyZWFtKQpQbV9DbG9zZShzdHJlYW0pClBtX1N5bmNocm9uaXplKHN0cmVhbSkKUG1fUmVhZChzdHJlYW0sIGJ1ZmZlciwgbGVuZ3RoKQpQbV9Qb2xsKHN0cmVhbSkKUG1fV3JpdGUoc3RyZWFtLCBidWZmZXIsIGxlbmd0aCkKUG1fV3JpdGVTaG9ydChzdHJlYW0sIHdoZW4sIG1zZykKUG1fV3JpdGVTeXNFeChzdHJlYW0sIHdoZW4sIG1zZykKUG1fUXVldWVDcmVhdGUobnVtX21zZ3MsIGJ5dGVzX3Blcl9tc2cpClBtX1F1ZXVlRGVzdHJveShxdWV1ZSkKUG1fRGVxdWV1ZShxdWV1ZSwgbXNnKQpQbV9FbnF1ZXVlKHF1ZXVlLCBtc2cpClBtX1F1ZXVlRnVsbChxdWV1ZSkKUG1fUXVldWVFbXB0eShxdWV1ZSkKUG1fUXVldWVQZWVrKHF1ZXVlKQpQbV9TZXRPdmVyZmxvdyhxdWV1ZSkKUHRfU3RhcnQocmVzb2x1dGlvbiwgY2FsbGJhY2ssIHVzZXJEYXRhKQpQdF9TdG9wKCkKUHRfU3RhcnRlZCgpAAAAAAAAAACOAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjgMAAFBtX0luaXRpYWxpemUoKQpQbV9UZXJtaW5hdGUoKQpQbV9IYXNIb3N0RXJyb3Ioc3RyZWFtKQpQbV9HZXRFcnJvclRleHQoZXJybnVtKQpQbV9HZXRIb3N0RXJyb3JUZXh0KG1zZywgbGVuKQpQbV9Db3VudERldmljZXMoKQpQbV9HZXREZWZhdWx0SW5wdXREZXZpY2VJRCgpClBtX0dldERlZmF1bHRPdXRwdXREZXZpY2VJRCgpClBtX0dldERldmljZUluZm8oaWQpClBtX09wZW5JbnB1dChzdHJlYW0sIGlucHV0RGV2aWNlLCBpbnB1dERyaXZlckluZm8sIGJ1ZmZlclNpemUsIHRpbWVfcHJvYywgdGltZV9pbmZvKQpQbV9PcGVuT3V0cHV0KHN0cmVhbSwgb3V0cHV0RGV2aWNlLCBvdXRwdXREcml2ZXJJbmZvLCBidWZmZXJTaXplLCB0aW1lX3Byb2MsIHRpbWVfaW5mbywgbGF0ZW5jeSkKUG1fU2V0RmlsdGVyKHN0cmVhbSwgZmlsdGVycykKUG1fU2V0Q2hhbm5lbE1hc2soc3RyZWFtLCBtYXNrKQpQbV9BYm9ydChzdHJlYW0pClBtX0Nsb3NlKHN0cmVhbSkKUG1fU3luY2hyb25pemUoc3RyZWFtKQpQbV9SZWFkKHN0cmVhbSwgYnVmZmVyLCBsZW5ndGgpClBtX1BvbGwoc3RyZWFtKQpQbV9Xcml0ZShzdHJlYW0sIGJ1ZmZlciwgbGVuZ3RoKQpQbV9Xcml0ZVNob3J0KHN0cmVhbSwgd2hlbiwgbXNnKQpQbV9Xcml0ZVN5c0V4KHN0cmVhbSwgd2hlbiwgbXNnKQpQbV9RdWV1ZUNyZWF0ZShudW1fbXNncywgYnl0ZXNfcGVyX21zZykKUG1fUXVldWVEZXN0cm95KHF1ZXVlKQpQbV9EZXF1ZXVlKHF1ZXVlLCBtc2cpClBtX0VucXVldWUocXVldWUsIG1zZykKUG1fUXVldWVGdWxsKHF1ZXVlKQpQbV9RdWV1ZUVtcHR5KHF1ZXVlKQpQbV9RdWV1ZVBlZWsocXVldWUpClBtX1NldE92ZXJmbG93KHF1ZXVlKQpQdF9TdGFydChyZXNvbHV0aW9uLCBjYWxsYmFjaywgdXNlckRhdGEpClB0X1N0b3AoKQpQdF9TdGFydGVkKCkAAAAAAAAAAI4DAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					1146,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACOAwAAUG1fSW5pdGlhbGl6ZSgpClBtX1Rlcm1pbmF0ZSgpClBtX0hhc0hvc3RFcnJvcihzdHJlYW0pClBtX0dldEVycm9yVGV4dChlcnJudW0pClBtX0dldEhvc3RFcnJvclRleHQobXNnLCBsZW4pClBtX0NvdW50RGV2aWNlcygpClBtX0dldERlZmF1bHRJbnB1dERldmljZUlEKCkKUG1fR2V0RGVmYXVsdE91dHB1dERldmljZUlEKCkKUG1fR2V0RGV2aWNlSW5mbyhpZCkKUG1fT3BlbklucHV0KHN0cmVhbSwgaW5wdXREZXZpY2UsIGlucHV0RHJpdmVySW5mbywgYnVmZmVyU2l6ZSwgdGltZV9wcm9jLCB0aW1lX2luZm8pClBtX09wZW5PdXRwdXQoc3RyZWFtLCBvdXRwdXREZXZpY2UsIG91dHB1dERyaXZlckluZm8sIGJ1ZmZlclNpemUsIHRpbWVfcHJvYywgdGltZV9pbmZvLCBsYXRlbmN5KQpQbV9TZXRGaWx0ZXIoc3RyZWFtLCBmaWx0ZXJzKQpQbV9TZXRDaGFubmVsTWFzayhzdHJlYW0sIG1hc2spClBtX0Fib3J0KHN0cmVhbSkKUG1fQ2xvc2Uoc3RyZWFtKQpQbV9TeW5jaHJvbml6ZShzdHJlYW0pClBtX1JlYWQoc3RyZWFtLCBidWZmZXIsIGxlbmd0aCkKUG1fUG9sbChzdHJlYW0pClBtX1dyaXRlKHN0cmVhbSwgYnVmZmVyLCBsZW5ndGgpClBtX1dyaXRlU2hvcnQoc3RyZWFtLCB3aGVuLCBtc2cpClBtX1dyaXRlU3lzRXgoc3RyZWFtLCB3aGVuLCBtc2cpClBtX1F1ZXVlQ3JlYXRlKG51bV9tc2dzLCBieXRlc19wZXJfbXNnKQpQbV9RdWV1ZURlc3Ryb3kocXVldWUpClBtX0RlcXVldWUocXVldWUsIG1zZykKUG1fRW5xdWV1ZShxdWV1ZSwgbXNnKQpQbV9RdWV1ZUZ1bGwocXVldWUpClBtX1F1ZXVlRW1wdHkocXVldWUpClBtX1F1ZXVlUGVlayhxdWV1ZSkKUG1fU2V0T3ZlcmZsb3cocXVldWUpClB0X1N0YXJ0KHJlc29sdXRpb24sIGNhbGxiYWNrLCB1c2VyRGF0YSkKUHRfU3RvcCgpClB0X1N0YXJ0ZWQoKQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					1147,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					1148,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/portmidi.js",
						"symkeys":
						[
							[
								279,
								303
							],
							[
								472,
								495
							],
							[
								721,
								753
							],
							[
								990,
								1022
							],
							[
								1293,
								1331
							],
							[
								1518,
								1544
							],
							[
								1757,
								1794
							],
							[
								2021,
								2059
							],
							[
								2299,
								2328
							],
							[
								2804,
								2897
							],
							[
								3483,
								3588
							],
							[
								3933,
								3971
							],
							[
								4261,
								4301
							],
							[
								4525,
								4550
							],
							[
								4759,
								4784
							],
							[
								5011,
								5042
							],
							[
								5343,
								5383
							],
							[
								5604,
								5628
							],
							[
								5928,
								5969
							],
							[
								6290,
								6331
							],
							[
								6655,
								6696
							],
							[
								6992,
								7040
							],
							[
								7292,
								7323
							],
							[
								7586,
								7617
							],
							[
								7880,
								7911
							],
							[
								8137,
								8165
							],
							[
								8391,
								8420
							],
							[
								8647,
								8675
							],
							[
								8904,
								8934
							],
							[
								9245,
								9294
							],
							[
								9475,
								9493
							],
							[
								9650,
								9671
							]
						],
						"symlist":
						[
							"function Pm_Initialize()",
							"function Pm_Terminate()",
							"function Pm_HasHostError(stream)",
							"function Pm_GetErrorText(errnum)",
							"function Pm_GetHostErrorText(msg, len)",
							"function Pm_CountDevices()",
							"function Pm_GetDefaultInputDeviceID()",
							"function Pm_GetDefaultOutputDeviceID()",
							"function Pm_GetDeviceInfo(id)",
							"function Pm_OpenInput(stream, inputDevice, inputDriverInfo, bufferSize, time_proc, time_info)",
							"function Pm_OpenOutput(stream, outputDevice, outputDriverInfo, bufferSize, time_proc, time_info, latency)",
							"function Pm_SetFilter(stream, filters)",
							"function Pm_SetChannelMask(stream, mask)",
							"function Pm_Abort(stream)",
							"function Pm_Close(stream)",
							"function Pm_Synchronize(stream)",
							"function Pm_Read(stream, buffer, length)",
							"function Pm_Poll(stream)",
							"function Pm_Write(stream, buffer, length)",
							"function Pm_WriteShort(stream, when, msg)",
							"function Pm_WriteSysEx(stream, when, msg)",
							"function Pm_QueueCreate(num_msgs, bytes_per_msg)",
							"function Pm_QueueDestroy(queue)",
							"function Pm_Dequeue(queue, msg)",
							"function Pm_Enqueue(queue, msg)",
							"function Pm_QueueFull(queue)",
							"function Pm_QueueEmpty(queue)",
							"function Pm_QueuePeek(queue)",
							"function Pm_SetOverflow(queue)",
							"function Pt_Start(resolution, callback, userData)",
							"function Pt_Stop()",
							"function Pt_Started()"
						]
					},
					"AQAAAAAAAAAAAAAAjgMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					1149,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACOAwAAUG1fSW5pdGlhbGl6ZSgpClBtX1Rlcm1pbmF0ZSgpClBtX0hhc0hvc3RFcnJvcihzdHJlYW0pClBtX0dldEVycm9yVGV4dChlcnJudW0pClBtX0dldEhvc3RFcnJvclRleHQobXNnLCBsZW4pClBtX0NvdW50RGV2aWNlcygpClBtX0dldERlZmF1bHRJbnB1dERldmljZUlEKCkKUG1fR2V0RGVmYXVsdE91dHB1dERldmljZUlEKCkKUG1fR2V0RGV2aWNlSW5mbyhpZCkKUG1fT3BlbklucHV0KHN0cmVhbSwgaW5wdXREZXZpY2UsIGlucHV0RHJpdmVySW5mbywgYnVmZmVyU2l6ZSwgdGltZV9wcm9jLCB0aW1lX2luZm8pClBtX09wZW5PdXRwdXQoc3RyZWFtLCBvdXRwdXREZXZpY2UsIG91dHB1dERyaXZlckluZm8sIGJ1ZmZlclNpemUsIHRpbWVfcHJvYywgdGltZV9pbmZvLCBsYXRlbmN5KQpQbV9TZXRGaWx0ZXIoc3RyZWFtLCBmaWx0ZXJzKQpQbV9TZXRDaGFubmVsTWFzayhzdHJlYW0sIG1hc2spClBtX0Fib3J0KHN0cmVhbSkKUG1fQ2xvc2Uoc3RyZWFtKQpQbV9TeW5jaHJvbml6ZShzdHJlYW0pClBtX1JlYWQoc3RyZWFtLCBidWZmZXIsIGxlbmd0aCkKUG1fUG9sbChzdHJlYW0pClBtX1dyaXRlKHN0cmVhbSwgYnVmZmVyLCBsZW5ndGgpClBtX1dyaXRlU2hvcnQoc3RyZWFtLCB3aGVuLCBtc2cpClBtX1dyaXRlU3lzRXgoc3RyZWFtLCB3aGVuLCBtc2cpClBtX1F1ZXVlQ3JlYXRlKG51bV9tc2dzLCBieXRlc19wZXJfbXNnKQpQbV9RdWV1ZURlc3Ryb3kocXVldWUpClBtX0RlcXVldWUocXVldWUsIG1zZykKUG1fRW5xdWV1ZShxdWV1ZSwgbXNnKQpQbV9RdWV1ZUZ1bGwocXVldWUpClBtX1F1ZXVlRW1wdHkocXVldWUpClBtX1F1ZXVlUGVlayhxdWV1ZSkKUG1fU2V0T3ZlcmZsb3cocXVldWUpClB0X1N0YXJ0KHJlc29sdXRpb24sIGNhbGxiYWNrLCB1c2VyRGF0YSkKUHRfU3RvcCgpClB0X1N0YXJ0ZWQoKQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					1150,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/portmidi.js",
						"symkeys":
						[
							[
								279,
								303
							],
							[
								472,
								495
							],
							[
								721,
								753
							],
							[
								990,
								1022
							],
							[
								1293,
								1331
							],
							[
								1518,
								1544
							],
							[
								1757,
								1794
							],
							[
								2021,
								2059
							],
							[
								2299,
								2328
							],
							[
								2801,
								2894
							],
							[
								3480,
								3585
							],
							[
								3930,
								3968
							],
							[
								4258,
								4298
							],
							[
								4522,
								4547
							],
							[
								4756,
								4781
							],
							[
								5008,
								5039
							],
							[
								5343,
								5383
							],
							[
								5604,
								5628
							],
							[
								5928,
								5969
							],
							[
								6290,
								6331
							],
							[
								6655,
								6696
							],
							[
								6992,
								7040
							],
							[
								7292,
								7323
							],
							[
								7586,
								7617
							],
							[
								7880,
								7911
							],
							[
								8137,
								8165
							],
							[
								8391,
								8420
							],
							[
								8647,
								8675
							],
							[
								8904,
								8934
							],
							[
								9245,
								9294
							],
							[
								9475,
								9493
							],
							[
								9650,
								9671
							]
						],
						"symlist":
						[
							"function Pm_Initialize()",
							"function Pm_Terminate()",
							"function Pm_HasHostError(stream)",
							"function Pm_GetErrorText(errnum)",
							"function Pm_GetHostErrorText(msg, len)",
							"function Pm_CountDevices()",
							"function Pm_GetDefaultInputDeviceID()",
							"function Pm_GetDefaultOutputDeviceID()",
							"function Pm_GetDeviceInfo(id)",
							"function Pm_OpenInput(stream, inputDevice, inputDriverInfo, bufferSize, time_proc, time_info)",
							"function Pm_OpenOutput(stream, outputDevice, outputDriverInfo, bufferSize, time_proc, time_info, latency)",
							"function Pm_SetFilter(stream, filters)",
							"function Pm_SetChannelMask(stream, mask)",
							"function Pm_Abort(stream)",
							"function Pm_Close(stream)",
							"function Pm_Synchronize(stream)",
							"function Pm_Read(stream, buffer, length)",
							"function Pm_Poll(stream)",
							"function Pm_Write(stream, buffer, length)",
							"function Pm_WriteShort(stream, when, msg)",
							"function Pm_WriteSysEx(stream, when, msg)",
							"function Pm_QueueCreate(num_msgs, bytes_per_msg)",
							"function Pm_QueueDestroy(queue)",
							"function Pm_Dequeue(queue, msg)",
							"function Pm_Enqueue(queue, msg)",
							"function Pm_QueueFull(queue)",
							"function Pm_QueueEmpty(queue)",
							"function Pm_QueuePeek(queue)",
							"function Pm_SetOverflow(queue)",
							"function Pt_Start(resolution, callback, userData)",
							"function Pt_Stop()",
							"function Pt_Started()"
						]
					},
					"AQAAAAAAAAAAAAAAjgMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					1151,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACOAwAAUG1fSW5pdGlhbGl6ZSgpClBtX1Rlcm1pbmF0ZSgpClBtX0hhc0hvc3RFcnJvcihzdHJlYW0pClBtX0dldEVycm9yVGV4dChlcnJudW0pClBtX0dldEhvc3RFcnJvclRleHQobXNnLCBsZW4pClBtX0NvdW50RGV2aWNlcygpClBtX0dldERlZmF1bHRJbnB1dERldmljZUlEKCkKUG1fR2V0RGVmYXVsdE91dHB1dERldmljZUlEKCkKUG1fR2V0RGV2aWNlSW5mbyhpZCkKUG1fT3BlbklucHV0KHN0cmVhbSwgaW5wdXREZXZpY2UsIGlucHV0RHJpdmVySW5mbywgYnVmZmVyU2l6ZSwgdGltZV9wcm9jLCB0aW1lX2luZm8pClBtX09wZW5PdXRwdXQoc3RyZWFtLCBvdXRwdXREZXZpY2UsIG91dHB1dERyaXZlckluZm8sIGJ1ZmZlclNpemUsIHRpbWVfcHJvYywgdGltZV9pbmZvLCBsYXRlbmN5KQpQbV9TZXRGaWx0ZXIoc3RyZWFtLCBmaWx0ZXJzKQpQbV9TZXRDaGFubmVsTWFzayhzdHJlYW0sIG1hc2spClBtX0Fib3J0KHN0cmVhbSkKUG1fQ2xvc2Uoc3RyZWFtKQpQbV9TeW5jaHJvbml6ZShzdHJlYW0pClBtX1JlYWQoc3RyZWFtLCBidWZmZXIsIGxlbmd0aCkKUG1fUG9sbChzdHJlYW0pClBtX1dyaXRlKHN0cmVhbSwgYnVmZmVyLCBsZW5ndGgpClBtX1dyaXRlU2hvcnQoc3RyZWFtLCB3aGVuLCBtc2cpClBtX1dyaXRlU3lzRXgoc3RyZWFtLCB3aGVuLCBtc2cpClBtX1F1ZXVlQ3JlYXRlKG51bV9tc2dzLCBieXRlc19wZXJfbXNnKQpQbV9RdWV1ZURlc3Ryb3kocXVldWUpClBtX0RlcXVldWUocXVldWUsIG1zZykKUG1fRW5xdWV1ZShxdWV1ZSwgbXNnKQpQbV9RdWV1ZUZ1bGwocXVldWUpClBtX1F1ZXVlRW1wdHkocXVldWUpClBtX1F1ZXVlUGVlayhxdWV1ZSkKUG1fU2V0T3ZlcmZsb3cocXVldWUpClB0X1N0YXJ0KHJlc29sdXRpb24sIGNhbGxiYWNrLCB1c2VyRGF0YSkKUHRfU3RvcCgpClB0X1N0YXJ0ZWQoKQAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					1152,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/portmidi.js",
						"symkeys":
						[
							[
								279,
								303
							],
							[
								472,
								495
							],
							[
								721,
								753
							],
							[
								990,
								1022
							],
							[
								1293,
								1331
							],
							[
								1518,
								1544
							],
							[
								1757,
								1794
							],
							[
								2021,
								2059
							],
							[
								2299,
								2328
							],
							[
								2801,
								2894
							],
							[
								3480,
								3585
							],
							[
								3930,
								3968
							],
							[
								4258,
								4298
							],
							[
								4522,
								4547
							],
							[
								4756,
								4781
							],
							[
								5008,
								5039
							],
							[
								5340,
								5380
							],
							[
								5601,
								5625
							],
							[
								5925,
								5966
							],
							[
								6287,
								6328
							],
							[
								6652,
								6693
							],
							[
								6989,
								7037
							],
							[
								7289,
								7320
							],
							[
								7583,
								7614
							],
							[
								7877,
								7908
							],
							[
								8134,
								8162
							],
							[
								8388,
								8417
							],
							[
								8644,
								8672
							],
							[
								8901,
								8931
							],
							[
								9242,
								9291
							],
							[
								9472,
								9490
							],
							[
								9647,
								9668
							]
						],
						"symlist":
						[
							"function Pm_Initialize()",
							"function Pm_Terminate()",
							"function Pm_HasHostError(stream)",
							"function Pm_GetErrorText(errnum)",
							"function Pm_GetHostErrorText(msg, len)",
							"function Pm_CountDevices()",
							"function Pm_GetDefaultInputDeviceID()",
							"function Pm_GetDefaultOutputDeviceID()",
							"function Pm_GetDeviceInfo(id)",
							"function Pm_OpenInput(stream, inputDevice, inputDriverInfo, bufferSize, time_proc, time_info)",
							"function Pm_OpenOutput(stream, outputDevice, outputDriverInfo, bufferSize, time_proc, time_info, latency)",
							"function Pm_SetFilter(stream, filters)",
							"function Pm_SetChannelMask(stream, mask)",
							"function Pm_Abort(stream)",
							"function Pm_Close(stream)",
							"function Pm_Synchronize(stream)",
							"function Pm_Read(stream, buffer, length)",
							"function Pm_Poll(stream)",
							"function Pm_Write(stream, buffer, length)",
							"function Pm_WriteShort(stream, when, msg)",
							"function Pm_WriteSysEx(stream, when, msg)",
							"function Pm_QueueCreate(num_msgs, bytes_per_msg)",
							"function Pm_QueueDestroy(queue)",
							"function Pm_Dequeue(queue, msg)",
							"function Pm_Enqueue(queue, msg)",
							"function Pm_QueueFull(queue)",
							"function Pm_QueueEmpty(queue)",
							"function Pm_QueuePeek(queue)",
							"function Pm_SetOverflow(queue)",
							"function Pt_Start(resolution, callback, userData)",
							"function Pt_Stop()",
							"function Pt_Started()"
						]
					},
					"AwAAAAAAAAAAAAAAjgMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAI4DAABQbV9Jbml0aWFsaXplKCkKUG1fVGVybWluYXRlKCkKUG1fSGFzSG9zdEVycm9yKHN0cmVhbSkKUG1fR2V0RXJyb3JUZXh0KGVycm51bSkKUG1fR2V0SG9zdEVycm9yVGV4dChtc2csIGxlbikKUG1fQ291bnREZXZpY2VzKCkKUG1fR2V0RGVmYXVsdElucHV0RGV2aWNlSUQoKQpQbV9HZXREZWZhdWx0T3V0cHV0RGV2aWNlSUQoKQpQbV9HZXREZXZpY2VJbmZvKGlkKQpQbV9PcGVuSW5wdXQoc3RyZWFtLCBpbnB1dERldmljZSwgaW5wdXREcml2ZXJJbmZvLCBidWZmZXJTaXplLCB0aW1lX3Byb2MsIHRpbWVfaW5mbykKUG1fT3Blbk91dHB1dChzdHJlYW0sIG91dHB1dERldmljZSwgb3V0cHV0RHJpdmVySW5mbywgYnVmZmVyU2l6ZSwgdGltZV9wcm9jLCB0aW1lX2luZm8sIGxhdGVuY3kpClBtX1NldEZpbHRlcihzdHJlYW0sIGZpbHRlcnMpClBtX1NldENoYW5uZWxNYXNrKHN0cmVhbSwgbWFzaykKUG1fQWJvcnQoc3RyZWFtKQpQbV9DbG9zZShzdHJlYW0pClBtX1N5bmNocm9uaXplKHN0cmVhbSkKUG1fUmVhZChzdHJlYW0sIGJ1ZmZlciwgbGVuZ3RoKQpQbV9Qb2xsKHN0cmVhbSkKUG1fV3JpdGUoc3RyZWFtLCBidWZmZXIsIGxlbmd0aCkKUG1fV3JpdGVTaG9ydChzdHJlYW0sIHdoZW4sIG1zZykKUG1fV3JpdGVTeXNFeChzdHJlYW0sIHdoZW4sIG1zZykKUG1fUXVldWVDcmVhdGUobnVtX21zZ3MsIGJ5dGVzX3Blcl9tc2cpClBtX1F1ZXVlRGVzdHJveShxdWV1ZSkKUG1fRGVxdWV1ZShxdWV1ZSwgbXNnKQpQbV9FbnF1ZXVlKHF1ZXVlLCBtc2cpClBtX1F1ZXVlRnVsbChxdWV1ZSkKUG1fUXVldWVFbXB0eShxdWV1ZSkKUG1fUXVldWVQZWVrKHF1ZXVlKQpQbV9TZXRPdmVyZmxvdyhxdWV1ZSkKUHRfU3RhcnQocmVzb2x1dGlvbiwgY2FsbGJhY2ssIHVzZXJEYXRhKQpQdF9TdG9wKCkKUHRfU3RhcnRlZCgpAAAAAAAAAACOAwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					1153,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/portmidi.js",
						"symkeys":
						[
							[
								279,
								303
							],
							[
								472,
								495
							],
							[
								721,
								753
							],
							[
								990,
								1022
							],
							[
								1293,
								1331
							],
							[
								1518,
								1544
							],
							[
								1757,
								1794
							],
							[
								2021,
								2059
							],
							[
								2299,
								2328
							],
							[
								2801,
								2894
							],
							[
								3480,
								3585
							],
							[
								3930,
								3968
							],
							[
								4258,
								4298
							],
							[
								4522,
								4547
							],
							[
								4756,
								4781
							],
							[
								5008,
								5039
							],
							[
								5340,
								5380
							],
							[
								5601,
								5625
							],
							[
								5922,
								5963
							],
							[
								6284,
								6325
							],
							[
								6649,
								6690
							],
							[
								6986,
								7034
							],
							[
								7286,
								7317
							],
							[
								7580,
								7611
							],
							[
								7874,
								7905
							],
							[
								8131,
								8159
							],
							[
								8385,
								8414
							],
							[
								8641,
								8669
							],
							[
								8898,
								8928
							],
							[
								9239,
								9288
							],
							[
								9469,
								9487
							],
							[
								9644,
								9665
							]
						],
						"symlist":
						[
							"function Pm_Initialize()",
							"function Pm_Terminate()",
							"function Pm_HasHostError(stream)",
							"function Pm_GetErrorText(errnum)",
							"function Pm_GetHostErrorText(msg, len)",
							"function Pm_CountDevices()",
							"function Pm_GetDefaultInputDeviceID()",
							"function Pm_GetDefaultOutputDeviceID()",
							"function Pm_GetDeviceInfo(id)",
							"function Pm_OpenInput(stream, inputDevice, inputDriverInfo, bufferSize, time_proc, time_info)",
							"function Pm_OpenOutput(stream, outputDevice, outputDriverInfo, bufferSize, time_proc, time_info, latency)",
							"function Pm_SetFilter(stream, filters)",
							"function Pm_SetChannelMask(stream, mask)",
							"function Pm_Abort(stream)",
							"function Pm_Close(stream)",
							"function Pm_Synchronize(stream)",
							"function Pm_Read(stream, buffer, length)",
							"function Pm_Poll(stream)",
							"function Pm_Write(stream, buffer, length)",
							"function Pm_WriteShort(stream, when, msg)",
							"function Pm_WriteSysEx(stream, when, msg)",
							"function Pm_QueueCreate(num_msgs, bytes_per_msg)",
							"function Pm_QueueDestroy(queue)",
							"function Pm_Dequeue(queue, msg)",
							"function Pm_Enqueue(queue, msg)",
							"function Pm_QueueFull(queue)",
							"function Pm_QueueEmpty(queue)",
							"function Pm_QueuePeek(queue)",
							"function Pm_SetOverflow(queue)",
							"function Pt_Start(resolution, callback, userData)",
							"function Pt_Stop()",
							"function Pt_Started()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACOAwAAUG1fSW5pdGlhbGl6ZSgpClBtX1Rlcm1pbmF0ZSgpClBtX0hhc0hvc3RFcnJvcihzdHJlYW0pClBtX0dldEVycm9yVGV4dChlcnJudW0pClBtX0dldEhvc3RFcnJvclRleHQobXNnLCBsZW4pClBtX0NvdW50RGV2aWNlcygpClBtX0dldERlZmF1bHRJbnB1dERldmljZUlEKCkKUG1fR2V0RGVmYXVsdE91dHB1dERldmljZUlEKCkKUG1fR2V0RGV2aWNlSW5mbyhpZCkKUG1fT3BlbklucHV0KHN0cmVhbSwgaW5wdXREZXZpY2UsIGlucHV0RHJpdmVySW5mbywgYnVmZmVyU2l6ZSwgdGltZV9wcm9jLCB0aW1lX2luZm8pClBtX09wZW5PdXRwdXQoc3RyZWFtLCBvdXRwdXREZXZpY2UsIG91dHB1dERyaXZlckluZm8sIGJ1ZmZlclNpemUsIHRpbWVfcHJvYywgdGltZV9pbmZvLCBsYXRlbmN5KQpQbV9TZXRGaWx0ZXIoc3RyZWFtLCBmaWx0ZXJzKQpQbV9TZXRDaGFubmVsTWFzayhzdHJlYW0sIG1hc2spClBtX0Fib3J0KHN0cmVhbSkKUG1fQ2xvc2Uoc3RyZWFtKQpQbV9TeW5jaHJvbml6ZShzdHJlYW0pClBtX1JlYWQoc3RyZWFtLCBidWZmZXIsIGxlbmd0aCkKUG1fUG9sbChzdHJlYW0pClBtX1dyaXRlKHN0cmVhbSwgYnVmZmVyLCBsZW5ndGgpClBtX1dyaXRlU2hvcnQoc3RyZWFtLCB3aGVuLCBtc2cpClBtX1dyaXRlU3lzRXgoc3RyZWFtLCB3aGVuLCBtc2cpClBtX1F1ZXVlQ3JlYXRlKG51bV9tc2dzLCBieXRlc19wZXJfbXNnKQpQbV9RdWV1ZURlc3Ryb3kocXVldWUpClBtX0RlcXVldWUocXVldWUsIG1zZykKUG1fRW5xdWV1ZShxdWV1ZSwgbXNnKQpQbV9RdWV1ZUZ1bGwocXVldWUpClBtX1F1ZXVlRW1wdHkocXVldWUpClBtX1F1ZXVlUGVlayhxdWV1ZSkKUG1fU2V0T3ZlcmZsb3cocXVldWUpClB0X1N0YXJ0KHJlc29sdXRpb24sIGNhbGxiYWNrLCB1c2VyRGF0YSkKUHRfU3RvcCgpClB0X1N0YXJ0ZWQoKQAAAAAAAAAAjgMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					1154,
					1,
					"outline_refresh",
					{
						"path": "/usr/include/portmidi.h",
						"symkeys":
						[
							[
								28,
								39
							],
							[
								4855,
								4862
							],
							[
								4885,
								4893
							],
							[
								4903,
								4916
							],
							[
								4955,
								4963
							],
							[
								4964,
								4974
							],
							[
								5000,
								5008
							],
							[
								5044,
								5049
							],
							[
								5084,
								5088
							],
							[
								5161,
								5189
							],
							[
								6356,
								6369
							],
							[
								6500,
								6512
							],
							[
								6609,
								6623
							],
							[
								6633,
								6641
							],
							[
								7556,
								7571
							],
							[
								7793,
								7808
							],
							[
								8050,
								8069
							],
							[
								8110,
								8119
							],
							[
								8131,
								8152
							],
							[
								8378,
								8388
							],
							[
								8398,
								8408
							],
							[
								8930,
								8945
							],
							[
								11050,
								11076
							],
							[
								11157,
								11184
							],
							[
								11360,
								11371
							],
							[
								11381,
								11392
							],
							[
								11465,
								11473
							],
							[
								11973,
								11989
							],
							[
								15382,
								15394
							],
							[
								15630,
								15643
							],
							[
								16808,
								16822
							],
							[
								16891,
								16904
							],
							[
								16965,
								16978
							],
							[
								17066,
								17078
							],
							[
								17164,
								17176
							],
							[
								17233,
								17243
							],
							[
								17307,
								17324
							],
							[
								17380,
								17393
							],
							[
								17451,
								17467
							],
							[
								17657,
								17669
							],
							[
								17783,
								17809
							],
							[
								17869,
								17892
							],
							[
								17960,
								17978
							],
							[
								18077,
								18092
							],
							[
								18154,
								18169
							],
							[
								18220,
								18237
							],
							[
								18286,
								18297
							],
							[
								18346,
								18367
							],
							[
								18413,
								18432
							],
							[
								18481,
								18493
							],
							[
								18596,
								18616
							],
							[
								18711,
								18723
							],
							[
								18777,
								18787
							],
							[
								19461,
								19478
							],
							[
								19863,
								19871
							],
							[
								20123,
								20131
							],
							[
								21395,
								21409
							],
							[
								21687,
								21697
							],
							[
								21842,
								21858
							],
							[
								21887,
								21902
							],
							[
								21938,
								21953
							],
							[
								21999,
								22008
							],
							[
								27086,
								27093
							],
							[
								27274,
								27281
							],
							[
								27753,
								27761
							],
							[
								28092,
								28105
							],
							[
								28260,
								28273
							]
						],
						"symlist":
						[
							"PORT_MIDI_H",
							"int32_t",
							"uint32_t",
							"INT32_DEFINED",
							"PMEXPORT",
							"__declspec",
							"PMEXPORT",
							"FALSE",
							"TRUE",
							"PM_DEFAULT_SYSEX_BUFFER_SIZE",
							"Pm_Initialize",
							"Pm_Terminate",
							"PortMidiStream",
							"PmStream",
							"Pm_HasHostError",
							"Pm_GetErrorText",
							"Pm_GetHostErrorText",
							"HDRLENGTH",
							"PM_HOST_ERROR_MSG_LEN",
							"PmDeviceID",
							"pmNoDevice",
							"Pm_CountDevices",
							"Pm_GetDefaultInputDeviceID",
							"Pm_GetDefaultOutputDeviceID",
							"PmTimestamp",
							"PmTimestamp",
							"PmBefore",
							"Pm_GetDeviceInfo",
							"Pm_OpenInput",
							"Pm_OpenOutput",
							"PM_FILT_ACTIVE",
							"PM_FILT_SYSEX",
							"PM_FILT_CLOCK",
							"PM_FILT_PLAY",
							"PM_FILT_TICK",
							"PM_FILT_FD",
							"PM_FILT_UNDEFINED",
							"PM_FILT_RESET",
							"PM_FILT_REALTIME",
							"PM_FILT_NOTE",
							"PM_FILT_CHANNEL_AFTERTOUCH",
							"PM_FILT_POLY_AFTERTOUCH",
							"PM_FILT_AFTERTOUCH",
							"PM_FILT_PROGRAM",
							"PM_FILT_CONTROL",
							"PM_FILT_PITCHBEND",
							"PM_FILT_MTC",
							"PM_FILT_SONG_POSITION",
							"PM_FILT_SONG_SELECT",
							"PM_FILT_TUNE",
							"PM_FILT_SYSTEMCOMMON",
							"Pm_SetFilter",
							"Pm_Channel",
							"Pm_SetChannelMask",
							"Pm_Abort",
							"Pm_Close",
							"Pm_Synchronize",
							"Pm_Message",
							"Pm_MessageStatus",
							"Pm_MessageData1",
							"Pm_MessageData2",
							"PmMessage",
							"Pm_Read",
							"Pm_Poll",
							"Pm_Write",
							"Pm_WriteShort",
							"Pm_WriteSysEx"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACOAwAAUG1fSW5pdGlhbGl6ZSgpClBtX1Rlcm1pbmF0ZSgpClBtX0hhc0hvc3RFcnJvcihzdHJlYW0pClBtX0dldEVycm9yVGV4dChlcnJudW0pClBtX0dldEhvc3RFcnJvclRleHQobXNnLCBsZW4pClBtX0NvdW50RGV2aWNlcygpClBtX0dldERlZmF1bHRJbnB1dERldmljZUlEKCkKUG1fR2V0RGVmYXVsdE91dHB1dERldmljZUlEKCkKUG1fR2V0RGV2aWNlSW5mbyhpZCkKUG1fT3BlbklucHV0KHN0cmVhbSwgaW5wdXREZXZpY2UsIGlucHV0RHJpdmVySW5mbywgYnVmZmVyU2l6ZSwgdGltZV9wcm9jLCB0aW1lX2luZm8pClBtX09wZW5PdXRwdXQoc3RyZWFtLCBvdXRwdXREZXZpY2UsIG91dHB1dERyaXZlckluZm8sIGJ1ZmZlclNpemUsIHRpbWVfcHJvYywgdGltZV9pbmZvLCBsYXRlbmN5KQpQbV9TZXRGaWx0ZXIoc3RyZWFtLCBmaWx0ZXJzKQpQbV9TZXRDaGFubmVsTWFzayhzdHJlYW0sIG1hc2spClBtX0Fib3J0KHN0cmVhbSkKUG1fQ2xvc2Uoc3RyZWFtKQpQbV9TeW5jaHJvbml6ZShzdHJlYW0pClBtX1JlYWQoc3RyZWFtLCBidWZmZXIsIGxlbmd0aCkKUG1fUG9sbChzdHJlYW0pClBtX1dyaXRlKHN0cmVhbSwgYnVmZmVyLCBsZW5ndGgpClBtX1dyaXRlU2hvcnQoc3RyZWFtLCB3aGVuLCBtc2cpClBtX1dyaXRlU3lzRXgoc3RyZWFtLCB3aGVuLCBtc2cpClBtX1F1ZXVlQ3JlYXRlKG51bV9tc2dzLCBieXRlc19wZXJfbXNnKQpQbV9RdWV1ZURlc3Ryb3kocXVldWUpClBtX0RlcXVldWUocXVldWUsIG1zZykKUG1fRW5xdWV1ZShxdWV1ZSwgbXNnKQpQbV9RdWV1ZUZ1bGwocXVldWUpClBtX1F1ZXVlRW1wdHkocXVldWUpClBtX1F1ZXVlUGVlayhxdWV1ZSkKUG1fU2V0T3ZlcmZsb3cocXVldWUpClB0X1N0YXJ0KHJlc29sdXRpb24sIGNhbGxiYWNrLCB1c2VyRGF0YSkKUHRfU3RvcCgpClB0X1N0YXJ0ZWQoKQAAAAAAAAAAzAMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					1155,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADMAwAAUE9SVF9NSURJX0gKICBpbnQzMl90CiAgdWludDMyX3QKSU5UMzJfREVGSU5FRApQTUVYUE9SVAogIF9fZGVjbHNwZWMKUE1FWFBPUlQKRkFMU0UKVFJVRQpQTV9ERUZBVUxUX1NZU0VYX0JVRkZFUl9TSVpFClBtX0luaXRpYWxpemUKUG1fVGVybWluYXRlClBvcnRNaWRpU3RyZWFtClBtU3RyZWFtClBtX0hhc0hvc3RFcnJvcgpQbV9HZXRFcnJvclRleHQKUG1fR2V0SG9zdEVycm9yVGV4dApIRFJMRU5HVEgKUE1fSE9TVF9FUlJPUl9NU0dfTEVOClBtRGV2aWNlSUQKICBwbU5vRGV2aWNlClBtX0NvdW50RGV2aWNlcwpQbV9HZXREZWZhdWx0SW5wdXREZXZpY2VJRApQbV9HZXREZWZhdWx0T3V0cHV0RGV2aWNlSUQKUG1UaW1lc3RhbXAKUG1UaW1lc3RhbXAKUG1CZWZvcmUKUG1fR2V0RGV2aWNlSW5mbwpQbV9PcGVuSW5wdXQKUG1fT3Blbk91dHB1dApQTV9GSUxUX0FDVElWRQpQTV9GSUxUX1NZU0VYClBNX0ZJTFRfQ0xPQ0sKUE1fRklMVF9QTEFZClBNX0ZJTFRfVElDSwpQTV9GSUxUX0ZEClBNX0ZJTFRfVU5ERUZJTkVEClBNX0ZJTFRfUkVTRVQKUE1fRklMVF9SRUFMVElNRQpQTV9GSUxUX05PVEUKUE1fRklMVF9DSEFOTkVMX0FGVEVSVE9VQ0gKUE1fRklMVF9QT0xZX0FGVEVSVE9VQ0gKUE1fRklMVF9BRlRFUlRPVUNIClBNX0ZJTFRfUFJPR1JBTQpQTV9GSUxUX0NPTlRST0wKUE1fRklMVF9QSVRDSEJFTkQKUE1fRklMVF9NVEMKUE1fRklMVF9TT05HX1BPU0lUSU9OClBNX0ZJTFRfU09OR19TRUxFQ1QKUE1fRklMVF9UVU5FClBNX0ZJTFRfU1lTVEVNQ09NTU9OClBtX1NldEZpbHRlcgpQbV9DaGFubmVsClBtX1NldENoYW5uZWxNYXNrClBtX0Fib3J0ClBtX0Nsb3NlClBtX1N5bmNocm9uaXplClBtX01lc3NhZ2UKUG1fTWVzc2FnZVN0YXR1cwpQbV9NZXNzYWdlRGF0YTEKUG1fTWVzc2FnZURhdGEyClBtTWVzc2FnZQpQbV9SZWFkClBtX1BvbGwKUG1fV3JpdGUKUG1fV3JpdGVTaG9ydApQbV9Xcml0ZVN5c0V4AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					1156,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/portmidi.js",
						"symkeys":
						[
							[
								279,
								303
							],
							[
								472,
								495
							],
							[
								721,
								753
							],
							[
								990,
								1022
							],
							[
								1293,
								1331
							],
							[
								1518,
								1544
							],
							[
								1757,
								1794
							],
							[
								2021,
								2059
							],
							[
								2299,
								2328
							],
							[
								2801,
								2894
							],
							[
								3480,
								3585
							],
							[
								3930,
								3968
							],
							[
								4258,
								4298
							],
							[
								4522,
								4547
							],
							[
								4756,
								4781
							],
							[
								5008,
								5039
							],
							[
								5340,
								5380
							],
							[
								5601,
								5625
							],
							[
								5922,
								5963
							],
							[
								6284,
								6325
							],
							[
								6649,
								6690
							],
							[
								6986,
								7034
							],
							[
								7286,
								7317
							],
							[
								7580,
								7611
							],
							[
								7874,
								7905
							],
							[
								8131,
								8159
							],
							[
								8385,
								8414
							],
							[
								8641,
								8669
							],
							[
								8898,
								8928
							],
							[
								9239,
								9288
							],
							[
								9469,
								9487
							],
							[
								9644,
								9665
							]
						],
						"symlist":
						[
							"function Pm_Initialize()",
							"function Pm_Terminate()",
							"function Pm_HasHostError(stream)",
							"function Pm_GetErrorText(errnum)",
							"function Pm_GetHostErrorText(msg, len)",
							"function Pm_CountDevices()",
							"function Pm_GetDefaultInputDeviceID()",
							"function Pm_GetDefaultOutputDeviceID()",
							"function Pm_GetDeviceInfo(id)",
							"function Pm_OpenInput(stream, inputDevice, inputDriverInfo, bufferSize, time_proc, time_info)",
							"function Pm_OpenOutput(stream, outputDevice, outputDriverInfo, bufferSize, time_proc, time_info, latency)",
							"function Pm_SetFilter(stream, filters)",
							"function Pm_SetChannelMask(stream, mask)",
							"function Pm_Abort(stream)",
							"function Pm_Close(stream)",
							"function Pm_Synchronize(stream)",
							"function Pm_Read(stream, buffer, length)",
							"function Pm_Poll(stream)",
							"function Pm_Write(stream, buffer, length)",
							"function Pm_WriteShort(stream, when, msg)",
							"function Pm_WriteSysEx(stream, when, msg)",
							"function Pm_QueueCreate(num_msgs, bytes_per_msg)",
							"function Pm_QueueDestroy(queue)",
							"function Pm_Dequeue(queue, msg)",
							"function Pm_Enqueue(queue, msg)",
							"function Pm_QueueFull(queue)",
							"function Pm_QueueEmpty(queue)",
							"function Pm_QueuePeek(queue)",
							"function Pm_SetOverflow(queue)",
							"function Pt_Start(resolution, callback, userData)",
							"function Pt_Stop()",
							"function Pt_Started()"
						]
					},
					"AQAAAAAAAAAAAAAAjgMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					1157,
					1,
					"outline_refresh",
					{
						"path": "/usr/include/portmidi.h",
						"symkeys":
						[
							[
								28,
								39
							],
							[
								4855,
								4862
							],
							[
								4885,
								4893
							],
							[
								4903,
								4916
							],
							[
								4955,
								4963
							],
							[
								4964,
								4974
							],
							[
								5000,
								5008
							],
							[
								5044,
								5049
							],
							[
								5084,
								5088
							],
							[
								5161,
								5189
							],
							[
								6356,
								6369
							],
							[
								6500,
								6512
							],
							[
								6609,
								6623
							],
							[
								6633,
								6641
							],
							[
								7556,
								7571
							],
							[
								7793,
								7808
							],
							[
								8050,
								8069
							],
							[
								8110,
								8119
							],
							[
								8131,
								8152
							],
							[
								8378,
								8388
							],
							[
								8398,
								8408
							],
							[
								8930,
								8945
							],
							[
								11050,
								11076
							],
							[
								11157,
								11184
							],
							[
								11360,
								11371
							],
							[
								11381,
								11392
							],
							[
								11465,
								11473
							],
							[
								11973,
								11989
							],
							[
								15382,
								15394
							],
							[
								15630,
								15643
							],
							[
								16808,
								16822
							],
							[
								16891,
								16904
							],
							[
								16965,
								16978
							],
							[
								17066,
								17078
							],
							[
								17164,
								17176
							],
							[
								17233,
								17243
							],
							[
								17307,
								17324
							],
							[
								17380,
								17393
							],
							[
								17451,
								17467
							],
							[
								17657,
								17669
							],
							[
								17783,
								17809
							],
							[
								17869,
								17892
							],
							[
								17960,
								17978
							],
							[
								18077,
								18092
							],
							[
								18154,
								18169
							],
							[
								18220,
								18237
							],
							[
								18286,
								18297
							],
							[
								18346,
								18367
							],
							[
								18413,
								18432
							],
							[
								18481,
								18493
							],
							[
								18596,
								18616
							],
							[
								18711,
								18723
							],
							[
								18777,
								18787
							],
							[
								19461,
								19478
							],
							[
								19863,
								19871
							],
							[
								20123,
								20131
							],
							[
								21395,
								21409
							],
							[
								21687,
								21697
							],
							[
								21842,
								21858
							],
							[
								21887,
								21902
							],
							[
								21938,
								21953
							],
							[
								21999,
								22008
							],
							[
								27086,
								27093
							],
							[
								27274,
								27281
							],
							[
								27753,
								27761
							],
							[
								28092,
								28105
							],
							[
								28260,
								28273
							]
						],
						"symlist":
						[
							"PORT_MIDI_H",
							"int32_t",
							"uint32_t",
							"INT32_DEFINED",
							"PMEXPORT",
							"__declspec",
							"PMEXPORT",
							"FALSE",
							"TRUE",
							"PM_DEFAULT_SYSEX_BUFFER_SIZE",
							"Pm_Initialize",
							"Pm_Terminate",
							"PortMidiStream",
							"PmStream",
							"Pm_HasHostError",
							"Pm_GetErrorText",
							"Pm_GetHostErrorText",
							"HDRLENGTH",
							"PM_HOST_ERROR_MSG_LEN",
							"PmDeviceID",
							"pmNoDevice",
							"Pm_CountDevices",
							"Pm_GetDefaultInputDeviceID",
							"Pm_GetDefaultOutputDeviceID",
							"PmTimestamp",
							"PmTimestamp",
							"PmBefore",
							"Pm_GetDeviceInfo",
							"Pm_OpenInput",
							"Pm_OpenOutput",
							"PM_FILT_ACTIVE",
							"PM_FILT_SYSEX",
							"PM_FILT_CLOCK",
							"PM_FILT_PLAY",
							"PM_FILT_TICK",
							"PM_FILT_FD",
							"PM_FILT_UNDEFINED",
							"PM_FILT_RESET",
							"PM_FILT_REALTIME",
							"PM_FILT_NOTE",
							"PM_FILT_CHANNEL_AFTERTOUCH",
							"PM_FILT_POLY_AFTERTOUCH",
							"PM_FILT_AFTERTOUCH",
							"PM_FILT_PROGRAM",
							"PM_FILT_CONTROL",
							"PM_FILT_PITCHBEND",
							"PM_FILT_MTC",
							"PM_FILT_SONG_POSITION",
							"PM_FILT_SONG_SELECT",
							"PM_FILT_TUNE",
							"PM_FILT_SYSTEMCOMMON",
							"Pm_SetFilter",
							"Pm_Channel",
							"Pm_SetChannelMask",
							"Pm_Abort",
							"Pm_Close",
							"Pm_Synchronize",
							"Pm_Message",
							"Pm_MessageStatus",
							"Pm_MessageData1",
							"Pm_MessageData2",
							"PmMessage",
							"Pm_Read",
							"Pm_Poll",
							"Pm_Write",
							"Pm_WriteShort",
							"Pm_WriteSysEx"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACOAwAAUG1fSW5pdGlhbGl6ZSgpClBtX1Rlcm1pbmF0ZSgpClBtX0hhc0hvc3RFcnJvcihzdHJlYW0pClBtX0dldEVycm9yVGV4dChlcnJudW0pClBtX0dldEhvc3RFcnJvclRleHQobXNnLCBsZW4pClBtX0NvdW50RGV2aWNlcygpClBtX0dldERlZmF1bHRJbnB1dERldmljZUlEKCkKUG1fR2V0RGVmYXVsdE91dHB1dERldmljZUlEKCkKUG1fR2V0RGV2aWNlSW5mbyhpZCkKUG1fT3BlbklucHV0KHN0cmVhbSwgaW5wdXREZXZpY2UsIGlucHV0RHJpdmVySW5mbywgYnVmZmVyU2l6ZSwgdGltZV9wcm9jLCB0aW1lX2luZm8pClBtX09wZW5PdXRwdXQoc3RyZWFtLCBvdXRwdXREZXZpY2UsIG91dHB1dERyaXZlckluZm8sIGJ1ZmZlclNpemUsIHRpbWVfcHJvYywgdGltZV9pbmZvLCBsYXRlbmN5KQpQbV9TZXRGaWx0ZXIoc3RyZWFtLCBmaWx0ZXJzKQpQbV9TZXRDaGFubmVsTWFzayhzdHJlYW0sIG1hc2spClBtX0Fib3J0KHN0cmVhbSkKUG1fQ2xvc2Uoc3RyZWFtKQpQbV9TeW5jaHJvbml6ZShzdHJlYW0pClBtX1JlYWQoc3RyZWFtLCBidWZmZXIsIGxlbmd0aCkKUG1fUG9sbChzdHJlYW0pClBtX1dyaXRlKHN0cmVhbSwgYnVmZmVyLCBsZW5ndGgpClBtX1dyaXRlU2hvcnQoc3RyZWFtLCB3aGVuLCBtc2cpClBtX1dyaXRlU3lzRXgoc3RyZWFtLCB3aGVuLCBtc2cpClBtX1F1ZXVlQ3JlYXRlKG51bV9tc2dzLCBieXRlc19wZXJfbXNnKQpQbV9RdWV1ZURlc3Ryb3kocXVldWUpClBtX0RlcXVldWUocXVldWUsIG1zZykKUG1fRW5xdWV1ZShxdWV1ZSwgbXNnKQpQbV9RdWV1ZUZ1bGwocXVldWUpClBtX1F1ZXVlRW1wdHkocXVldWUpClBtX1F1ZXVlUGVlayhxdWV1ZSkKUG1fU2V0T3ZlcmZsb3cocXVldWUpClB0X1N0YXJ0KHJlc29sdXRpb24sIGNhbGxiYWNrLCB1c2VyRGF0YSkKUHRfU3RvcCgpClB0X1N0YXJ0ZWQoKQAAAAAAAAAAzAMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					1158,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/portmidi.js",
						"symkeys":
						[
							[
								279,
								303
							],
							[
								472,
								495
							],
							[
								721,
								753
							],
							[
								990,
								1022
							],
							[
								1293,
								1331
							],
							[
								1518,
								1544
							],
							[
								1757,
								1794
							],
							[
								2021,
								2059
							],
							[
								2299,
								2328
							],
							[
								2801,
								2894
							],
							[
								3480,
								3585
							],
							[
								3930,
								3968
							],
							[
								4258,
								4298
							],
							[
								4522,
								4547
							],
							[
								4756,
								4781
							],
							[
								5008,
								5039
							],
							[
								5340,
								5380
							],
							[
								5601,
								5625
							],
							[
								5922,
								5963
							],
							[
								6284,
								6325
							],
							[
								6649,
								6690
							],
							[
								6986,
								7034
							],
							[
								7286,
								7317
							],
							[
								7580,
								7611
							],
							[
								7874,
								7905
							],
							[
								8131,
								8159
							],
							[
								8385,
								8414
							],
							[
								8641,
								8669
							],
							[
								8898,
								8928
							],
							[
								9239,
								9288
							],
							[
								9469,
								9487
							],
							[
								9644,
								9665
							]
						],
						"symlist":
						[
							"function Pm_Initialize()",
							"function Pm_Terminate()",
							"function Pm_HasHostError(stream)",
							"function Pm_GetErrorText(errnum)",
							"function Pm_GetHostErrorText(msg, len)",
							"function Pm_CountDevices()",
							"function Pm_GetDefaultInputDeviceID()",
							"function Pm_GetDefaultOutputDeviceID()",
							"function Pm_GetDeviceInfo(id)",
							"function Pm_OpenInput(stream, inputDevice, inputDriverInfo, bufferSize, time_proc, time_info)",
							"function Pm_OpenOutput(stream, outputDevice, outputDriverInfo, bufferSize, time_proc, time_info, latency)",
							"function Pm_SetFilter(stream, filters)",
							"function Pm_SetChannelMask(stream, mask)",
							"function Pm_Abort(stream)",
							"function Pm_Close(stream)",
							"function Pm_Synchronize(stream)",
							"function Pm_Read(stream, buffer, length)",
							"function Pm_Poll(stream)",
							"function Pm_Write(stream, buffer, length)",
							"function Pm_WriteShort(stream, when, msg)",
							"function Pm_WriteSysEx(stream, when, msg)",
							"function Pm_QueueCreate(num_msgs, bytes_per_msg)",
							"function Pm_QueueDestroy(queue)",
							"function Pm_Dequeue(queue, msg)",
							"function Pm_Enqueue(queue, msg)",
							"function Pm_QueueFull(queue)",
							"function Pm_QueueEmpty(queue)",
							"function Pm_QueuePeek(queue)",
							"function Pm_SetOverflow(queue)",
							"function Pt_Start(resolution, callback, userData)",
							"function Pt_Stop()",
							"function Pt_Started()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADMAwAAUE9SVF9NSURJX0gKICBpbnQzMl90CiAgdWludDMyX3QKSU5UMzJfREVGSU5FRApQTUVYUE9SVAogIF9fZGVjbHNwZWMKUE1FWFBPUlQKRkFMU0UKVFJVRQpQTV9ERUZBVUxUX1NZU0VYX0JVRkZFUl9TSVpFClBtX0luaXRpYWxpemUKUG1fVGVybWluYXRlClBvcnRNaWRpU3RyZWFtClBtU3RyZWFtClBtX0hhc0hvc3RFcnJvcgpQbV9HZXRFcnJvclRleHQKUG1fR2V0SG9zdEVycm9yVGV4dApIRFJMRU5HVEgKUE1fSE9TVF9FUlJPUl9NU0dfTEVOClBtRGV2aWNlSUQKICBwbU5vRGV2aWNlClBtX0NvdW50RGV2aWNlcwpQbV9HZXREZWZhdWx0SW5wdXREZXZpY2VJRApQbV9HZXREZWZhdWx0T3V0cHV0RGV2aWNlSUQKUG1UaW1lc3RhbXAKUG1UaW1lc3RhbXAKUG1CZWZvcmUKUG1fR2V0RGV2aWNlSW5mbwpQbV9PcGVuSW5wdXQKUG1fT3Blbk91dHB1dApQTV9GSUxUX0FDVElWRQpQTV9GSUxUX1NZU0VYClBNX0ZJTFRfQ0xPQ0sKUE1fRklMVF9QTEFZClBNX0ZJTFRfVElDSwpQTV9GSUxUX0ZEClBNX0ZJTFRfVU5ERUZJTkVEClBNX0ZJTFRfUkVTRVQKUE1fRklMVF9SRUFMVElNRQpQTV9GSUxUX05PVEUKUE1fRklMVF9DSEFOTkVMX0FGVEVSVE9VQ0gKUE1fRklMVF9QT0xZX0FGVEVSVE9VQ0gKUE1fRklMVF9BRlRFUlRPVUNIClBNX0ZJTFRfUFJPR1JBTQpQTV9GSUxUX0NPTlRST0wKUE1fRklMVF9QSVRDSEJFTkQKUE1fRklMVF9NVEMKUE1fRklMVF9TT05HX1BPU0lUSU9OClBNX0ZJTFRfU09OR19TRUxFQ1QKUE1fRklMVF9UVU5FClBNX0ZJTFRfU1lTVEVNQ09NTU9OClBtX1NldEZpbHRlcgpQbV9DaGFubmVsClBtX1NldENoYW5uZWxNYXNrClBtX0Fib3J0ClBtX0Nsb3NlClBtX1N5bmNocm9uaXplClBtX01lc3NhZ2UKUG1fTWVzc2FnZVN0YXR1cwpQbV9NZXNzYWdlRGF0YTEKUG1fTWVzc2FnZURhdGEyClBtTWVzc2FnZQpQbV9SZWFkClBtX1BvbGwKUG1fV3JpdGUKUG1fV3JpdGVTaG9ydApQbV9Xcml0ZVN5c0V4AAAAAAAAAACOAwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					1159,
					1,
					"outline_refresh",
					{
						"path": "/usr/include/portmidi.h",
						"symkeys":
						[
							[
								28,
								39
							],
							[
								4855,
								4862
							],
							[
								4885,
								4893
							],
							[
								4903,
								4916
							],
							[
								4955,
								4963
							],
							[
								4964,
								4974
							],
							[
								5000,
								5008
							],
							[
								5044,
								5049
							],
							[
								5084,
								5088
							],
							[
								5161,
								5189
							],
							[
								6356,
								6369
							],
							[
								6500,
								6512
							],
							[
								6609,
								6623
							],
							[
								6633,
								6641
							],
							[
								7556,
								7571
							],
							[
								7793,
								7808
							],
							[
								8050,
								8069
							],
							[
								8110,
								8119
							],
							[
								8131,
								8152
							],
							[
								8378,
								8388
							],
							[
								8398,
								8408
							],
							[
								8930,
								8945
							],
							[
								11050,
								11076
							],
							[
								11157,
								11184
							],
							[
								11360,
								11371
							],
							[
								11381,
								11392
							],
							[
								11465,
								11473
							],
							[
								11973,
								11989
							],
							[
								15382,
								15394
							],
							[
								15630,
								15643
							],
							[
								16808,
								16822
							],
							[
								16891,
								16904
							],
							[
								16965,
								16978
							],
							[
								17066,
								17078
							],
							[
								17164,
								17176
							],
							[
								17233,
								17243
							],
							[
								17307,
								17324
							],
							[
								17380,
								17393
							],
							[
								17451,
								17467
							],
							[
								17657,
								17669
							],
							[
								17783,
								17809
							],
							[
								17869,
								17892
							],
							[
								17960,
								17978
							],
							[
								18077,
								18092
							],
							[
								18154,
								18169
							],
							[
								18220,
								18237
							],
							[
								18286,
								18297
							],
							[
								18346,
								18367
							],
							[
								18413,
								18432
							],
							[
								18481,
								18493
							],
							[
								18596,
								18616
							],
							[
								18711,
								18723
							],
							[
								18777,
								18787
							],
							[
								19461,
								19478
							],
							[
								19863,
								19871
							],
							[
								20123,
								20131
							],
							[
								21395,
								21409
							],
							[
								21687,
								21697
							],
							[
								21842,
								21858
							],
							[
								21887,
								21902
							],
							[
								21938,
								21953
							],
							[
								21999,
								22008
							],
							[
								27086,
								27093
							],
							[
								27274,
								27281
							],
							[
								27753,
								27761
							],
							[
								28092,
								28105
							],
							[
								28260,
								28273
							]
						],
						"symlist":
						[
							"PORT_MIDI_H",
							"int32_t",
							"uint32_t",
							"INT32_DEFINED",
							"PMEXPORT",
							"__declspec",
							"PMEXPORT",
							"FALSE",
							"TRUE",
							"PM_DEFAULT_SYSEX_BUFFER_SIZE",
							"Pm_Initialize",
							"Pm_Terminate",
							"PortMidiStream",
							"PmStream",
							"Pm_HasHostError",
							"Pm_GetErrorText",
							"Pm_GetHostErrorText",
							"HDRLENGTH",
							"PM_HOST_ERROR_MSG_LEN",
							"PmDeviceID",
							"pmNoDevice",
							"Pm_CountDevices",
							"Pm_GetDefaultInputDeviceID",
							"Pm_GetDefaultOutputDeviceID",
							"PmTimestamp",
							"PmTimestamp",
							"PmBefore",
							"Pm_GetDeviceInfo",
							"Pm_OpenInput",
							"Pm_OpenOutput",
							"PM_FILT_ACTIVE",
							"PM_FILT_SYSEX",
							"PM_FILT_CLOCK",
							"PM_FILT_PLAY",
							"PM_FILT_TICK",
							"PM_FILT_FD",
							"PM_FILT_UNDEFINED",
							"PM_FILT_RESET",
							"PM_FILT_REALTIME",
							"PM_FILT_NOTE",
							"PM_FILT_CHANNEL_AFTERTOUCH",
							"PM_FILT_POLY_AFTERTOUCH",
							"PM_FILT_AFTERTOUCH",
							"PM_FILT_PROGRAM",
							"PM_FILT_CONTROL",
							"PM_FILT_PITCHBEND",
							"PM_FILT_MTC",
							"PM_FILT_SONG_POSITION",
							"PM_FILT_SONG_SELECT",
							"PM_FILT_TUNE",
							"PM_FILT_SYSTEMCOMMON",
							"Pm_SetFilter",
							"Pm_Channel",
							"Pm_SetChannelMask",
							"Pm_Abort",
							"Pm_Close",
							"Pm_Synchronize",
							"Pm_Message",
							"Pm_MessageStatus",
							"Pm_MessageData1",
							"Pm_MessageData2",
							"PmMessage",
							"Pm_Read",
							"Pm_Poll",
							"Pm_Write",
							"Pm_WriteShort",
							"Pm_WriteSysEx"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACOAwAAUG1fSW5pdGlhbGl6ZSgpClBtX1Rlcm1pbmF0ZSgpClBtX0hhc0hvc3RFcnJvcihzdHJlYW0pClBtX0dldEVycm9yVGV4dChlcnJudW0pClBtX0dldEhvc3RFcnJvclRleHQobXNnLCBsZW4pClBtX0NvdW50RGV2aWNlcygpClBtX0dldERlZmF1bHRJbnB1dERldmljZUlEKCkKUG1fR2V0RGVmYXVsdE91dHB1dERldmljZUlEKCkKUG1fR2V0RGV2aWNlSW5mbyhpZCkKUG1fT3BlbklucHV0KHN0cmVhbSwgaW5wdXREZXZpY2UsIGlucHV0RHJpdmVySW5mbywgYnVmZmVyU2l6ZSwgdGltZV9wcm9jLCB0aW1lX2luZm8pClBtX09wZW5PdXRwdXQoc3RyZWFtLCBvdXRwdXREZXZpY2UsIG91dHB1dERyaXZlckluZm8sIGJ1ZmZlclNpemUsIHRpbWVfcHJvYywgdGltZV9pbmZvLCBsYXRlbmN5KQpQbV9TZXRGaWx0ZXIoc3RyZWFtLCBmaWx0ZXJzKQpQbV9TZXRDaGFubmVsTWFzayhzdHJlYW0sIG1hc2spClBtX0Fib3J0KHN0cmVhbSkKUG1fQ2xvc2Uoc3RyZWFtKQpQbV9TeW5jaHJvbml6ZShzdHJlYW0pClBtX1JlYWQoc3RyZWFtLCBidWZmZXIsIGxlbmd0aCkKUG1fUG9sbChzdHJlYW0pClBtX1dyaXRlKHN0cmVhbSwgYnVmZmVyLCBsZW5ndGgpClBtX1dyaXRlU2hvcnQoc3RyZWFtLCB3aGVuLCBtc2cpClBtX1dyaXRlU3lzRXgoc3RyZWFtLCB3aGVuLCBtc2cpClBtX1F1ZXVlQ3JlYXRlKG51bV9tc2dzLCBieXRlc19wZXJfbXNnKQpQbV9RdWV1ZURlc3Ryb3kocXVldWUpClBtX0RlcXVldWUocXVldWUsIG1zZykKUG1fRW5xdWV1ZShxdWV1ZSwgbXNnKQpQbV9RdWV1ZUZ1bGwocXVldWUpClBtX1F1ZXVlRW1wdHkocXVldWUpClBtX1F1ZXVlUGVlayhxdWV1ZSkKUG1fU2V0T3ZlcmZsb3cocXVldWUpClB0X1N0YXJ0KHJlc29sdXRpb24sIGNhbGxiYWNrLCB1c2VyRGF0YSkKUHRfU3RvcCgpClB0X1N0YXJ0ZWQoKQAAAAAAAAAAzAMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					1160,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADMAwAAUE9SVF9NSURJX0gKICBpbnQzMl90CiAgdWludDMyX3QKSU5UMzJfREVGSU5FRApQTUVYUE9SVAogIF9fZGVjbHNwZWMKUE1FWFBPUlQKRkFMU0UKVFJVRQpQTV9ERUZBVUxUX1NZU0VYX0JVRkZFUl9TSVpFClBtX0luaXRpYWxpemUKUG1fVGVybWluYXRlClBvcnRNaWRpU3RyZWFtClBtU3RyZWFtClBtX0hhc0hvc3RFcnJvcgpQbV9HZXRFcnJvclRleHQKUG1fR2V0SG9zdEVycm9yVGV4dApIRFJMRU5HVEgKUE1fSE9TVF9FUlJPUl9NU0dfTEVOClBtRGV2aWNlSUQKICBwbU5vRGV2aWNlClBtX0NvdW50RGV2aWNlcwpQbV9HZXREZWZhdWx0SW5wdXREZXZpY2VJRApQbV9HZXREZWZhdWx0T3V0cHV0RGV2aWNlSUQKUG1UaW1lc3RhbXAKUG1UaW1lc3RhbXAKUG1CZWZvcmUKUG1fR2V0RGV2aWNlSW5mbwpQbV9PcGVuSW5wdXQKUG1fT3Blbk91dHB1dApQTV9GSUxUX0FDVElWRQpQTV9GSUxUX1NZU0VYClBNX0ZJTFRfQ0xPQ0sKUE1fRklMVF9QTEFZClBNX0ZJTFRfVElDSwpQTV9GSUxUX0ZEClBNX0ZJTFRfVU5ERUZJTkVEClBNX0ZJTFRfUkVTRVQKUE1fRklMVF9SRUFMVElNRQpQTV9GSUxUX05PVEUKUE1fRklMVF9DSEFOTkVMX0FGVEVSVE9VQ0gKUE1fRklMVF9QT0xZX0FGVEVSVE9VQ0gKUE1fRklMVF9BRlRFUlRPVUNIClBNX0ZJTFRfUFJPR1JBTQpQTV9GSUxUX0NPTlRST0wKUE1fRklMVF9QSVRDSEJFTkQKUE1fRklMVF9NVEMKUE1fRklMVF9TT05HX1BPU0lUSU9OClBNX0ZJTFRfU09OR19TRUxFQ1QKUE1fRklMVF9UVU5FClBNX0ZJTFRfU1lTVEVNQ09NTU9OClBtX1NldEZpbHRlcgpQbV9DaGFubmVsClBtX1NldENoYW5uZWxNYXNrClBtX0Fib3J0ClBtX0Nsb3NlClBtX1N5bmNocm9uaXplClBtX01lc3NhZ2UKUG1fTWVzc2FnZVN0YXR1cwpQbV9NZXNzYWdlRGF0YTEKUG1fTWVzc2FnZURhdGEyClBtTWVzc2FnZQpQbV9SZWFkClBtX1BvbGwKUG1fV3JpdGUKUG1fV3JpdGVTaG9ydApQbV9Xcml0ZVN5c0V4AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					1161,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/portmidi.js",
						"symkeys":
						[
							[
								279,
								303
							],
							[
								472,
								495
							],
							[
								721,
								753
							],
							[
								990,
								1022
							],
							[
								1293,
								1331
							],
							[
								1518,
								1544
							],
							[
								1757,
								1794
							],
							[
								2021,
								2059
							],
							[
								2299,
								2328
							],
							[
								2801,
								2894
							],
							[
								3480,
								3585
							],
							[
								3930,
								3968
							],
							[
								4258,
								4298
							],
							[
								4522,
								4547
							],
							[
								4756,
								4781
							],
							[
								5008,
								5039
							],
							[
								5340,
								5380
							],
							[
								5601,
								5625
							],
							[
								5922,
								5963
							],
							[
								6284,
								6325
							],
							[
								6649,
								6690
							],
							[
								6986,
								7034
							],
							[
								7286,
								7317
							],
							[
								7580,
								7611
							],
							[
								7874,
								7905
							],
							[
								8131,
								8159
							],
							[
								8385,
								8414
							],
							[
								8641,
								8669
							],
							[
								8898,
								8928
							],
							[
								9239,
								9288
							],
							[
								9469,
								9487
							],
							[
								9644,
								9665
							]
						],
						"symlist":
						[
							"function Pm_Initialize()",
							"function Pm_Terminate()",
							"function Pm_HasHostError(stream)",
							"function Pm_GetErrorText(errnum)",
							"function Pm_GetHostErrorText(msg, len)",
							"function Pm_CountDevices()",
							"function Pm_GetDefaultInputDeviceID()",
							"function Pm_GetDefaultOutputDeviceID()",
							"function Pm_GetDeviceInfo(id)",
							"function Pm_OpenInput(stream, inputDevice, inputDriverInfo, bufferSize, time_proc, time_info)",
							"function Pm_OpenOutput(stream, outputDevice, outputDriverInfo, bufferSize, time_proc, time_info, latency)",
							"function Pm_SetFilter(stream, filters)",
							"function Pm_SetChannelMask(stream, mask)",
							"function Pm_Abort(stream)",
							"function Pm_Close(stream)",
							"function Pm_Synchronize(stream)",
							"function Pm_Read(stream, buffer, length)",
							"function Pm_Poll(stream)",
							"function Pm_Write(stream, buffer, length)",
							"function Pm_WriteShort(stream, when, msg)",
							"function Pm_WriteSysEx(stream, when, msg)",
							"function Pm_QueueCreate(num_msgs, bytes_per_msg)",
							"function Pm_QueueDestroy(queue)",
							"function Pm_Dequeue(queue, msg)",
							"function Pm_Enqueue(queue, msg)",
							"function Pm_QueueFull(queue)",
							"function Pm_QueueEmpty(queue)",
							"function Pm_QueuePeek(queue)",
							"function Pm_SetOverflow(queue)",
							"function Pt_Start(resolution, callback, userData)",
							"function Pt_Stop()",
							"function Pt_Started()"
						]
					},
					"AQAAAAAAAAAAAAAAjgMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					1162,
					1,
					"outline_refresh",
					{
						"path": "/usr/include/portmidi.h",
						"symkeys":
						[
							[
								28,
								39
							],
							[
								4855,
								4862
							],
							[
								4885,
								4893
							],
							[
								4903,
								4916
							],
							[
								4955,
								4963
							],
							[
								4964,
								4974
							],
							[
								5000,
								5008
							],
							[
								5044,
								5049
							],
							[
								5084,
								5088
							],
							[
								5161,
								5189
							],
							[
								6356,
								6369
							],
							[
								6500,
								6512
							],
							[
								6609,
								6623
							],
							[
								6633,
								6641
							],
							[
								7556,
								7571
							],
							[
								7793,
								7808
							],
							[
								8050,
								8069
							],
							[
								8110,
								8119
							],
							[
								8131,
								8152
							],
							[
								8378,
								8388
							],
							[
								8398,
								8408
							],
							[
								8930,
								8945
							],
							[
								11050,
								11076
							],
							[
								11157,
								11184
							],
							[
								11360,
								11371
							],
							[
								11381,
								11392
							],
							[
								11465,
								11473
							],
							[
								11973,
								11989
							],
							[
								15382,
								15394
							],
							[
								15630,
								15643
							],
							[
								16808,
								16822
							],
							[
								16891,
								16904
							],
							[
								16965,
								16978
							],
							[
								17066,
								17078
							],
							[
								17164,
								17176
							],
							[
								17233,
								17243
							],
							[
								17307,
								17324
							],
							[
								17380,
								17393
							],
							[
								17451,
								17467
							],
							[
								17657,
								17669
							],
							[
								17783,
								17809
							],
							[
								17869,
								17892
							],
							[
								17960,
								17978
							],
							[
								18077,
								18092
							],
							[
								18154,
								18169
							],
							[
								18220,
								18237
							],
							[
								18286,
								18297
							],
							[
								18346,
								18367
							],
							[
								18413,
								18432
							],
							[
								18481,
								18493
							],
							[
								18596,
								18616
							],
							[
								18711,
								18723
							],
							[
								18777,
								18787
							],
							[
								19461,
								19478
							],
							[
								19863,
								19871
							],
							[
								20123,
								20131
							],
							[
								21395,
								21409
							],
							[
								21687,
								21697
							],
							[
								21842,
								21858
							],
							[
								21887,
								21902
							],
							[
								21938,
								21953
							],
							[
								21999,
								22008
							],
							[
								27086,
								27093
							],
							[
								27274,
								27281
							],
							[
								27753,
								27761
							],
							[
								28092,
								28105
							],
							[
								28260,
								28273
							]
						],
						"symlist":
						[
							"PORT_MIDI_H",
							"int32_t",
							"uint32_t",
							"INT32_DEFINED",
							"PMEXPORT",
							"__declspec",
							"PMEXPORT",
							"FALSE",
							"TRUE",
							"PM_DEFAULT_SYSEX_BUFFER_SIZE",
							"Pm_Initialize",
							"Pm_Terminate",
							"PortMidiStream",
							"PmStream",
							"Pm_HasHostError",
							"Pm_GetErrorText",
							"Pm_GetHostErrorText",
							"HDRLENGTH",
							"PM_HOST_ERROR_MSG_LEN",
							"PmDeviceID",
							"pmNoDevice",
							"Pm_CountDevices",
							"Pm_GetDefaultInputDeviceID",
							"Pm_GetDefaultOutputDeviceID",
							"PmTimestamp",
							"PmTimestamp",
							"PmBefore",
							"Pm_GetDeviceInfo",
							"Pm_OpenInput",
							"Pm_OpenOutput",
							"PM_FILT_ACTIVE",
							"PM_FILT_SYSEX",
							"PM_FILT_CLOCK",
							"PM_FILT_PLAY",
							"PM_FILT_TICK",
							"PM_FILT_FD",
							"PM_FILT_UNDEFINED",
							"PM_FILT_RESET",
							"PM_FILT_REALTIME",
							"PM_FILT_NOTE",
							"PM_FILT_CHANNEL_AFTERTOUCH",
							"PM_FILT_POLY_AFTERTOUCH",
							"PM_FILT_AFTERTOUCH",
							"PM_FILT_PROGRAM",
							"PM_FILT_CONTROL",
							"PM_FILT_PITCHBEND",
							"PM_FILT_MTC",
							"PM_FILT_SONG_POSITION",
							"PM_FILT_SONG_SELECT",
							"PM_FILT_TUNE",
							"PM_FILT_SYSTEMCOMMON",
							"Pm_SetFilter",
							"Pm_Channel",
							"Pm_SetChannelMask",
							"Pm_Abort",
							"Pm_Close",
							"Pm_Synchronize",
							"Pm_Message",
							"Pm_MessageStatus",
							"Pm_MessageData1",
							"Pm_MessageData2",
							"PmMessage",
							"Pm_Read",
							"Pm_Poll",
							"Pm_Write",
							"Pm_WriteShort",
							"Pm_WriteSysEx"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACOAwAAUG1fSW5pdGlhbGl6ZSgpClBtX1Rlcm1pbmF0ZSgpClBtX0hhc0hvc3RFcnJvcihzdHJlYW0pClBtX0dldEVycm9yVGV4dChlcnJudW0pClBtX0dldEhvc3RFcnJvclRleHQobXNnLCBsZW4pClBtX0NvdW50RGV2aWNlcygpClBtX0dldERlZmF1bHRJbnB1dERldmljZUlEKCkKUG1fR2V0RGVmYXVsdE91dHB1dERldmljZUlEKCkKUG1fR2V0RGV2aWNlSW5mbyhpZCkKUG1fT3BlbklucHV0KHN0cmVhbSwgaW5wdXREZXZpY2UsIGlucHV0RHJpdmVySW5mbywgYnVmZmVyU2l6ZSwgdGltZV9wcm9jLCB0aW1lX2luZm8pClBtX09wZW5PdXRwdXQoc3RyZWFtLCBvdXRwdXREZXZpY2UsIG91dHB1dERyaXZlckluZm8sIGJ1ZmZlclNpemUsIHRpbWVfcHJvYywgdGltZV9pbmZvLCBsYXRlbmN5KQpQbV9TZXRGaWx0ZXIoc3RyZWFtLCBmaWx0ZXJzKQpQbV9TZXRDaGFubmVsTWFzayhzdHJlYW0sIG1hc2spClBtX0Fib3J0KHN0cmVhbSkKUG1fQ2xvc2Uoc3RyZWFtKQpQbV9TeW5jaHJvbml6ZShzdHJlYW0pClBtX1JlYWQoc3RyZWFtLCBidWZmZXIsIGxlbmd0aCkKUG1fUG9sbChzdHJlYW0pClBtX1dyaXRlKHN0cmVhbSwgYnVmZmVyLCBsZW5ndGgpClBtX1dyaXRlU2hvcnQoc3RyZWFtLCB3aGVuLCBtc2cpClBtX1dyaXRlU3lzRXgoc3RyZWFtLCB3aGVuLCBtc2cpClBtX1F1ZXVlQ3JlYXRlKG51bV9tc2dzLCBieXRlc19wZXJfbXNnKQpQbV9RdWV1ZURlc3Ryb3kocXVldWUpClBtX0RlcXVldWUocXVldWUsIG1zZykKUG1fRW5xdWV1ZShxdWV1ZSwgbXNnKQpQbV9RdWV1ZUZ1bGwocXVldWUpClBtX1F1ZXVlRW1wdHkocXVldWUpClBtX1F1ZXVlUGVlayhxdWV1ZSkKUG1fU2V0T3ZlcmZsb3cocXVldWUpClB0X1N0YXJ0KHJlc29sdXRpb24sIGNhbGxiYWNrLCB1c2VyRGF0YSkKUHRfU3RvcCgpClB0X1N0YXJ0ZWQoKQAAAAAAAAAAzAMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					1163,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADMAwAAUE9SVF9NSURJX0gKICBpbnQzMl90CiAgdWludDMyX3QKSU5UMzJfREVGSU5FRApQTUVYUE9SVAogIF9fZGVjbHNwZWMKUE1FWFBPUlQKRkFMU0UKVFJVRQpQTV9ERUZBVUxUX1NZU0VYX0JVRkZFUl9TSVpFClBtX0luaXRpYWxpemUKUG1fVGVybWluYXRlClBvcnRNaWRpU3RyZWFtClBtU3RyZWFtClBtX0hhc0hvc3RFcnJvcgpQbV9HZXRFcnJvclRleHQKUG1fR2V0SG9zdEVycm9yVGV4dApIRFJMRU5HVEgKUE1fSE9TVF9FUlJPUl9NU0dfTEVOClBtRGV2aWNlSUQKICBwbU5vRGV2aWNlClBtX0NvdW50RGV2aWNlcwpQbV9HZXREZWZhdWx0SW5wdXREZXZpY2VJRApQbV9HZXREZWZhdWx0T3V0cHV0RGV2aWNlSUQKUG1UaW1lc3RhbXAKUG1UaW1lc3RhbXAKUG1CZWZvcmUKUG1fR2V0RGV2aWNlSW5mbwpQbV9PcGVuSW5wdXQKUG1fT3Blbk91dHB1dApQTV9GSUxUX0FDVElWRQpQTV9GSUxUX1NZU0VYClBNX0ZJTFRfQ0xPQ0sKUE1fRklMVF9QTEFZClBNX0ZJTFRfVElDSwpQTV9GSUxUX0ZEClBNX0ZJTFRfVU5ERUZJTkVEClBNX0ZJTFRfUkVTRVQKUE1fRklMVF9SRUFMVElNRQpQTV9GSUxUX05PVEUKUE1fRklMVF9DSEFOTkVMX0FGVEVSVE9VQ0gKUE1fRklMVF9QT0xZX0FGVEVSVE9VQ0gKUE1fRklMVF9BRlRFUlRPVUNIClBNX0ZJTFRfUFJPR1JBTQpQTV9GSUxUX0NPTlRST0wKUE1fRklMVF9QSVRDSEJFTkQKUE1fRklMVF9NVEMKUE1fRklMVF9TT05HX1BPU0lUSU9OClBNX0ZJTFRfU09OR19TRUxFQ1QKUE1fRklMVF9UVU5FClBNX0ZJTFRfU1lTVEVNQ09NTU9OClBtX1NldEZpbHRlcgpQbV9DaGFubmVsClBtX1NldENoYW5uZWxNYXNrClBtX0Fib3J0ClBtX0Nsb3NlClBtX1N5bmNocm9uaXplClBtX01lc3NhZ2UKUG1fTWVzc2FnZVN0YXR1cwpQbV9NZXNzYWdlRGF0YTEKUG1fTWVzc2FnZURhdGEyClBtTWVzc2FnZQpQbV9SZWFkClBtX1BvbGwKUG1fV3JpdGUKUG1fV3JpdGVTaG9ydApQbV9Xcml0ZVN5c0V4AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					1164,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/ast-shell.js",
						"symkeys":
						[
							[
								1871,
								1875
							],
							[
								1934,
								1938
							],
							[
								1974,
								2002
							],
							[
								2292,
								2300
							],
							[
								2301,
								2315
							],
							[
								2397,
								2407
							],
							[
								2469,
								2517
							],
							[
								2631,
								2640
							],
							[
								2750,
								2772
							],
							[
								3231,
								3253
							],
							[
								3648,
								3666
							],
							[
								3765,
								3783
							],
							[
								3888,
								3914
							],
							[
								4050,
								4054
							],
							[
								4172,
								4188
							],
							[
								4680,
								4699
							],
							[
								4763,
								4784
							],
							[
								5118,
								5123
							],
							[
								5198,
								5213
							],
							[
								5298,
								5306
							],
							[
								5347,
								5355
							],
							[
								5726,
								5799
							],
							[
								5803,
								5811
							],
							[
								5908,
								5938
							],
							[
								5967,
								5972
							],
							[
								6005,
								6012
							],
							[
								6041,
								6069
							],
							[
								6406,
								6413
							],
							[
								6432,
								6455
							],
							[
								6485,
								6492
							],
							[
								6523,
								6531
							],
							[
								6569,
								6576
							],
							[
								6776,
								6789
							],
							[
								6969,
								7012
							],
							[
								7045,
								7054
							],
							[
								7115,
								7119
							],
							[
								7221,
								7225
							],
							[
								7261,
								7275
							],
							[
								7387,
								7415
							],
							[
								7620,
								7645
							],
							[
								7743,
								7767
							],
							[
								7840,
								7844
							],
							[
								7962,
								7966
							],
							[
								8030,
								8044
							],
							[
								8100,
								8109
							],
							[
								8407,
								8421
							],
							[
								8544,
								8579
							],
							[
								8668,
								8673
							],
							[
								8796,
								8808
							],
							[
								8861,
								8886
							],
							[
								8935,
								8946
							],
							[
								8986,
								8997
							],
							[
								9135,
								9146
							],
							[
								9233,
								9246
							],
							[
								9327,
								9359
							],
							[
								9597,
								9626
							],
							[
								9637,
								9652
							],
							[
								9714,
								9733
							],
							[
								9941,
								9980
							],
							[
								10045,
								10085
							],
							[
								10168,
								10212
							],
							[
								10294,
								10333
							],
							[
								10395,
								10433
							],
							[
								10519,
								10547
							],
							[
								10610,
								10637
							],
							[
								11188,
								11214
							],
							[
								11481,
								11488
							],
							[
								13404,
								13462
							],
							[
								14505,
								14512
							],
							[
								14576,
								14583
							],
							[
								14593,
								14604
							],
							[
								14645,
								14671
							],
							[
								14787,
								14801
							],
							[
								15098,
								15117
							],
							[
								15144,
								15151
							],
							[
								15239,
								15269
							],
							[
								15335,
								15375
							],
							[
								15551,
								15602
							],
							[
								16591,
								16598
							],
							[
								17005,
								17025
							],
							[
								17201,
								17255
							],
							[
								17444,
								17456
							],
							[
								17484,
								17496
							],
							[
								18111,
								18171
							],
							[
								18782,
								18837
							],
							[
								18933,
								18945
							],
							[
								18950,
								18980
							],
							[
								19261,
								19283
							],
							[
								19329,
								19352
							],
							[
								19424,
								19439
							],
							[
								19574,
								19590
							],
							[
								19994,
								20007
							],
							[
								20132,
								20151
							],
							[
								20203,
								20211
							],
							[
								20268,
								20283
							],
							[
								20442,
								20454
							],
							[
								20799,
								20813
							],
							[
								20913,
								20930
							],
							[
								21157,
								21179
							],
							[
								21296,
								21321
							],
							[
								21421,
								21438
							],
							[
								21493,
								21497
							],
							[
								21585,
								21589
							],
							[
								21641,
								21665
							],
							[
								21781,
								21821
							],
							[
								21882,
								21903
							],
							[
								22187,
								22219
							],
							[
								22703,
								22718
							],
							[
								22829,
								22854
							],
							[
								23023,
								23058
							],
							[
								23278,
								23285
							],
							[
								23374,
								23381
							],
							[
								23410,
								23419
							],
							[
								23456,
								23465
							],
							[
								23515,
								23523
							],
							[
								23565,
								23589
							],
							[
								23685,
								23701
							],
							[
								23737,
								23777
							],
							[
								24075,
								24118
							],
							[
								25061,
								25072
							],
							[
								25817,
								25867
							],
							[
								25889,
								25915
							],
							[
								25950,
								25979
							],
							[
								26323,
								26366
							],
							[
								26479,
								26483
							],
							[
								26499,
								26503
							],
							[
								26548,
								26635
							],
							[
								26802,
								26835
							],
							[
								26894,
								26899
							],
							[
								26969,
								27011
							],
							[
								27087,
								27097
							],
							[
								27216,
								27256
							],
							[
								27397,
								27402
							],
							[
								27460,
								27467
							],
							[
								27584,
								27588
							],
							[
								27667,
								27671
							],
							[
								27825,
								27832
							],
							[
								27919,
								27924
							],
							[
								28032,
								28048
							],
							[
								28159,
								28166
							],
							[
								28245,
								28249
							],
							[
								28310,
								28317
							],
							[
								28393,
								28400
							],
							[
								28457,
								28503
							],
							[
								28543,
								28553
							],
							[
								28706,
								28742
							],
							[
								28783,
								28795
							],
							[
								30438,
								30470
							],
							[
								30966,
								30976
							],
							[
								31026,
								31036
							],
							[
								31084,
								31094
							],
							[
								31670,
								31681
							],
							[
								31775,
								31779
							],
							[
								31806,
								31810
							],
							[
								31834,
								31838
							],
							[
								31862,
								31866
							],
							[
								31894,
								31931
							],
							[
								32332,
								32387
							],
							[
								32594,
								32602
							],
							[
								32791,
								32799
							],
							[
								32888,
								32896
							],
							[
								32942,
								32950
							],
							[
								33020,
								33056
							],
							[
								33151,
								33194
							],
							[
								33485,
								33504
							],
							[
								33560,
								33565
							],
							[
								33829,
								33852
							],
							[
								33942,
								33947
							],
							[
								34065,
								34088
							],
							[
								34178,
								34183
							],
							[
								34291,
								34303
							],
							[
								34421,
								34426
							],
							[
								34481,
								34510
							],
							[
								34615,
								34620
							],
							[
								35567,
								35625
							],
							[
								36560,
								36571
							],
							[
								36604,
								36615
							],
							[
								36664,
								36670
							],
							[
								36723,
								36731
							],
							[
								37027,
								37031
							],
							[
								37747,
								37753
							]
						],
						"symlist":
						[
							"d =>",
							"d =>",
							"ConcatIterator = iterator =>",
							" gen =>",
							" (...args) =>",
							"toString()",
							"async function ImportModule(modulePath, ...args)",
							"module =>",
							" (acc, item) =>",
							"function CommandLine()",
							" (...args) =>",
							" (...args) =>",
							" (module, ...args) =>",
							"m =>",
							".show = value =>",
							".printNode = arg =>",
							".debug = (...args) =>",
							"() =>",
							"(item, i, a) =>",
							"entry =>",
							"entry =>",
							"function* IncludeAll(dir, maxDepth = Infinity, pred = entry => /\\.[ch]$/.",
							"(entry))",
							"function SelectLocations(node)",
							" n =>",
							"prop =>",
							"function LocationString(loc)",
							"node =>",
							"function Structs(nodes)",
							"node =>",
							"field =>",
							"node =>",
							"(field, i) =>",
							"function Table(list, pred = (n, l) => true)",
							"(n, i) =>",
							"e =>",
							"k =>",
							"([i, l, n]) =>",
							" function returnType(n)",
							" function numArgs(n)",
							" function Params(n)",
							"p =>",
							"k =>",
							"([i, l, n]) =>",
							"(k, j) =>",
							"(acc, name) =>",
							" function padTrunc(len, pad = ' ')",
							" s =>",
							"(name, i) =>",
							"pad = (cols, pad, sep) =>",
							"(key, i) =>",
							"(s, col) =>",
							"(acc, n) =>",
							"(acc, row) =>",
							"function PrintRange(range, file)",
							"function OverlapRange(r1, r2)",
							"GetRange = r =>",
							"InRange = (i, r) =>",
							"function ParentNode(node, ast = $.data)",
							"function NextSibling(node, ast = $.data)",
							"function PreviousSibling(node, ast = $.data)",
							"function FirstChild(node, ast = $.data)",
							"function LastChild(node, ast = $.data)",
							"function Terminate(exitCode)",
							"function ParseStructs(text)",
							"function* (decl, includes)",
							"name =>",
							"function InspectStruct(decl, includes, compiler = 'clang')",
							"line =>",
							"line =>",
							"(col, i) =>",
							"([field, offset, size]) =>",
							"(acc, line) =>",
							"toString(sep = ' ')",
							"line =>",
							"function RoundTo(value, align)",
							"function MakeStructClass(decl, filename)",
							"function* GenerateStructClass(decl, ffiPrefix = '')",
							"line =>",
							"([field, member]) =>",
							"function GenerateGetSet(name, offset, type, ffiPrefix)",
							"toHex = v =>",
							"toHex = v =>",
							"function ByteLength2TypedArray(byteLength, signed, floating)",
							"function ByteLength2Value(byteLength, signed, floating)",
							"FFI_Function",
							"constructor(node, prefix = '')",
							"([name, type], idx) =>",
							"generateDefine(fp, lib)",
							" (name, lib) =>",
							"colorText = x =>",
							"generateDoc()",
							"push = (...args) =>",
							"field =>",
							"(field, col) =>",
							"js = type =>",
							"generateCall()",
							"([name, type]) =>",
							"generate(fp, lib, exp)",
							"generateFunction(fp, lib)",
							"([name, type]) =>",
							"p =>",
							"p =>",
							"compileFunction(fp, lib)",
							"function FdReader(fd, bufferSize = 1024)",
							"async (push, stop) =>",
							"async function CommandRead(args)",
							"async reader =>",
							" function ReadOutput(fd)",
							"async function LibraryExports(file)",
							"line =>",
							"line =>",
							"column =>",
							"(a, b) =>",
							"entry =>",
							"function SaveLibraries()",
							"(acc, [n, e]) =>",
							"function ProcessFile(file, debug = true)",
							"function ParseECMAScript(file, params = {})",
							" (fr, i) =>",
							"function PrintECMAScript(ast, comments, printer = ",
							"({ indent: 4 }, comments))",
							"function PrintCArray(strings)",
							"function Namespaces(nodePath, ast = $.data)",
							"p =>",
							"n =>",
							"function* Constants(node, t = (name, value) => [name, !isNaN(+value) ? +value : value])",
							"function GetImports(ast = $.data)",
							" n =>",
							"function GetIdentifiers(nodes, key = null)",
							" (n, k) =>",
							"function MemberNames(members, flags = 0)",
							" n =>",
							"path =>",
							"p =>",
							"p =>",
							"name =>",
							" n =>",
							"([node, ptr]) =>",
							"path =>",
							"p =>",
							"name =>",
							"name =>",
							"function UnsetLoc(node, pred = (v, p) => true)",
							" (v, k) =>",
							"function MakeFFI(node, lib, exp, fp)",
							"function* ()",
							"async function ASTShell(...args)",
							" (a, p) =>",
							" (a, p) =>",
							" (a, p) =>",
							"get flags()",
							"v =>",
							"v =>",
							"d =>",
							"l =>",
							"async function Compile(file, ...args)",
							" function nameOrIdPred(name_or_id, pred = n => true)",
							" node =>",
							" node =>",
							" node =>",
							" node =>",
							"select(name_or_id, pred = n => true)",
							"getByIdOrName(name_or_id, pred = n => true)",
							"getType(name_or_id)",
							" n =>",
							"getFunction(name_or_id)",
							" n =>",
							"getVariable(name_or_id)",
							" n =>",
							"getLoc(node)",
							"() =>",
							"pathOf(needle, maxDepth = 10)",
							" n =>",
							"Pointer.prototype.chain = function(step, limit = Infinity)",
							".F = arg =>",
							".T = arg =>",
							" () =>",
							" node =>",
							"s =>",
							" fr =>"
						]
					},
					"AQAAAAAAAAAAAAAApgwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					1165,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACmDAAAICBkID0+CiAgZCA9PgpDb25jYXRJdGVyYXRvciA9IGl0ZXJhdG9yID0+CmdlbiA9PgooLi4uYXJncykgPT4KICB0b1N0cmluZygpCkltcG9ydE1vZHVsZShtb2R1bGVQYXRoLCAuLi5hcmdzKQogIG1vZHVsZSA9PgooYWNjLCBpdGVtKSA9PgpDb21tYW5kTGluZSgpCiguLi5hcmdzKSA9PgooLi4uYXJncykgPT4KKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSB2YWx1ZSA9PgogIC5wcmludE5vZGUgPSBhcmcgPT4KICAuZGVidWcgPSAoLi4uYXJncykgPT4KKCkgPT4KKGl0ZW0sIGksIGEpID0+CiAgZW50cnkgPT4KICBlbnRyeSA9PgpJbmNsdWRlQWxsKGRpciwgbWF4RGVwdGggPSBJbmZpbml0eSwgcHJlZCA9IGVudHJ5ID0+IC9cLltjaF0kLy4KKGVudHJ5KSkKU2VsZWN0TG9jYXRpb25zKG5vZGUpCm4gPT4KICBwcm9wID0+CkxvY2F0aW9uU3RyaW5nKGxvYykKICBub2RlID0+ClN0cnVjdHMobm9kZXMpCiAgbm9kZSA9PgogIGZpZWxkID0+CiAgbm9kZSA9PgooZmllbGQsIGkpID0+ClRhYmxlKGxpc3QsIHByZWQgPSAobiwgbCkgPT4gdHJ1ZSkKKG4sIGkpID0+CiAgZSA9PgogIGsgPT4KKFtpLCBsLCBuXSkgPT4KICByZXR1cm5UeXBlKG4pCiAgbnVtQXJncyhuKQpQYXJhbXMobikKICBwID0+CiAgayA9PgooW2ksIGwsIG5dKSA9PgooaywgaikgPT4KKGFjYywgbmFtZSkgPT4KICBwYWRUcnVuYyhsZW4sIHBhZCA9ICcgJykKcyA9PgoobmFtZSwgaSkgPT4KICBwYWQgPSAoY29scywgcGFkLCBzZXApID0+CihrZXksIGkpID0+CihzLCBjb2wpID0+CihhY2MsIG4pID0+CihhY2MsIHJvdykgPT4KUHJpbnRSYW5nZShyYW5nZSwgZmlsZSkKT3ZlcmxhcFJhbmdlKHIxLCByMikKR2V0UmFuZ2UgPSByID0+CkluUmFuZ2UgPSAoaSwgcikgPT4KUGFyZW50Tm9kZShub2RlLCBhc3QgPSAkLmRhdGEpCk5leHRTaWJsaW5nKG5vZGUsIGFzdCA9ICQuZGF0YSkKUHJldmlvdXNTaWJsaW5nKG5vZGUsIGFzdCA9ICQuZGF0YSkKRmlyc3RDaGlsZChub2RlLCBhc3QgPSAkLmRhdGEpCkxhc3RDaGlsZChub2RlLCBhc3QgPSAkLmRhdGEpClRlcm1pbmF0ZShleGl0Q29kZSkKUGFyc2VTdHJ1Y3RzKHRleHQpCihkZWNsLCBpbmNsdWRlcykKICBuYW1lID0+Ckluc3BlY3RTdHJ1Y3QoZGVjbCwgaW5jbHVkZXMsIGNvbXBpbGVyID0gJ2NsYW5nJykKICBsaW5lID0+CiAgbGluZSA9PgooY29sLCBpKSA9PgooW2ZpZWxkLCBvZmZzZXQsIHNpemVdKSA9PgooYWNjLCBsaW5lKSA9PgogIHRvU3RyaW5nKHNlcCA9ICcgJykKICBsaW5lID0+ClJvdW5kVG8odmFsdWUsIGFsaWduKQpNYWtlU3RydWN0Q2xhc3MoZGVjbCwgZmlsZW5hbWUpCkdlbmVyYXRlU3RydWN0Q2xhc3MoZGVjbCwgZmZpUHJlZml4ID0gJycpCiAgbGluZSA9PgooW2ZpZWxkLCBtZW1iZXJdKSA9PgpHZW5lcmF0ZUdldFNldChuYW1lLCBvZmZzZXQsIHR5cGUsIGZmaVByZWZpeCkKICB0b0hleCA9IHYgPT4KICB0b0hleCA9IHYgPT4KQnl0ZUxlbmd0aDJUeXBlZEFycmF5KGJ5dGVMZW5ndGgsIHNpZ25lZCwgZmxvYXRpbmcpCkJ5dGVMZW5ndGgyVmFsdWUoYnl0ZUxlbmd0aCwgc2lnbmVkLCBmbG9hdGluZykKRkZJX0Z1bmN0aW9uCiAgY29uc3RydWN0b3Iobm9kZSwgcHJlZml4ID0gJycpCihbbmFtZSwgdHlwZV0sIGlkeCkgPT4KICBnZW5lcmF0ZURlZmluZShmcCwgbGliKQoobmFtZSwgbGliKSA9PgogIGNvbG9yVGV4dCA9IHggPT4KICBnZW5lcmF0ZURvYygpCiAgcHVzaCA9ICguLi5hcmdzKSA9PgogIGZpZWxkID0+CihmaWVsZCwgY29sKSA9PgogIGpzID0gdHlwZSA9PgogIGdlbmVyYXRlQ2FsbCgpCihbbmFtZSwgdHlwZV0pID0+CiAgZ2VuZXJhdGUoZnAsIGxpYiwgZXhwKQogIGdlbmVyYXRlRnVuY3Rpb24oZnAsIGxpYikKKFtuYW1lLCB0eXBlXSkgPT4KICBwID0+CiAgcCA9PgogIGNvbXBpbGVGdW5jdGlvbihmcCwgbGliKQpGZFJlYWRlcihmZCwgYnVmZmVyU2l6ZSA9IDEwMjQpCihwdXNoLCBzdG9wKSA9PgpDb21tYW5kUmVhZChhcmdzKQogIHJlYWRlciA9PgpSZWFkT3V0cHV0KGZkKQpMaWJyYXJ5RXhwb3J0cyhmaWxlKQogIGxpbmUgPT4KICBsaW5lID0+CiAgY29sdW1uID0+CihhLCBiKSA9PgogIGVudHJ5ID0+ClNhdmVMaWJyYXJpZXMoKQooYWNjLCBbbiwgZV0pID0+ClByb2Nlc3NGaWxlKGZpbGUsIGRlYnVnID0gdHJ1ZSkKUGFyc2VFQ01BU2NyaXB0KGZpbGUsIHBhcmFtcyA9IHt9KQooZnIsIGkpID0+ClByaW50RUNNQVNjcmlwdChhc3QsIGNvbW1lbnRzLCBwcmludGVyID0gCih7IGluZGVudDogNCB9LCBjb21tZW50cykpClByaW50Q0FycmF5KHN0cmluZ3MpCk5hbWVzcGFjZXMobm9kZVBhdGgsIGFzdCA9ICQuZGF0YSkKICBwID0+CiAgbiA9PgpDb25zdGFudHMobm9kZSwgdCA9IChuYW1lLCB2YWx1ZSkgPT4gW25hbWUsICFpc05hTigrdmFsdWUpID8gK3ZhbHVlIDogdmFsdWVdKQpHZXRJbXBvcnRzKGFzdCA9ICQuZGF0YSkKbiA9PgpHZXRJZGVudGlmaWVycyhub2Rlcywga2V5ID0gbnVsbCkKKG4sIGspID0+Ck1lbWJlck5hbWVzKG1lbWJlcnMsIGZsYWdzID0gMCkKbiA9PgogIHBhdGggPT4KICBwID0+CiAgcCA9PgogIG5hbWUgPT4KbiA9PgooW25vZGUsIHB0cl0pID0+CiAgcGF0aCA9PgogIHAgPT4KICBuYW1lID0+CiAgbmFtZSA9PgpVbnNldExvYyhub2RlLCBwcmVkID0gKHYsIHApID0+IHRydWUpCih2LCBrKSA9PgpNYWtlRkZJKG5vZGUsIGxpYiwgZXhwLCBmcCkKKCkKQVNUU2hlbGwoLi4uYXJncykKKGEsIHApID0+CihhLCBwKSA9PgooYSwgcCkgPT4KICBnZXQgZmxhZ3MoKQogIHYgPT4KICB2ID0+CiAgZCA9PgogIGwgPT4KQ29tcGlsZShmaWxlLCAuLi5hcmdzKQogIG5hbWVPcklkUHJlZChuYW1lX29yX2lkLCBwcmVkID0gbiA9PiB0cnVlKQpub2RlID0+Cm5vZGUgPT4Kbm9kZSA9Pgpub2RlID0+CiAgc2VsZWN0KG5hbWVfb3JfaWQsIHByZWQgPSBuID0+IHRydWUpCiAgZ2V0QnlJZE9yTmFtZShuYW1lX29yX2lkLCBwcmVkID0gbiA9PiB0cnVlKQogIGdldFR5cGUobmFtZV9vcl9pZCkKbiA9PgogIGdldEZ1bmN0aW9uKG5hbWVfb3JfaWQpCm4gPT4KICBnZXRWYXJpYWJsZShuYW1lX29yX2lkKQpuID0+CiAgZ2V0TG9jKG5vZGUpCigpID0+CiAgcGF0aE9mKG5lZWRsZSwgbWF4RGVwdGggPSAxMCkKbiA9PgpQb2ludGVyLnByb3RvdHlwZS5jaGFpbiA9IGZ1bmN0aW9uKHN0ZXAsIGxpbWl0ID0gSW5maW5pdHkpCiAgLkYgPSBhcmcgPT4KICAuVCA9IGFyZyA9PgooKSA9Pgpub2RlID0+CiAgcyA9PgpmciA9PgAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					1166,
					1,
					"outline_refresh",
					{
						"path": "/usr/include/portmidi.h",
						"symkeys":
						[
							[
								28,
								39
							],
							[
								4855,
								4862
							],
							[
								4885,
								4893
							],
							[
								4903,
								4916
							],
							[
								4955,
								4963
							],
							[
								4964,
								4974
							],
							[
								5000,
								5008
							],
							[
								5044,
								5049
							],
							[
								5084,
								5088
							],
							[
								5161,
								5189
							],
							[
								6356,
								6369
							],
							[
								6500,
								6512
							],
							[
								6609,
								6623
							],
							[
								6633,
								6641
							],
							[
								7556,
								7571
							],
							[
								7793,
								7808
							],
							[
								8050,
								8069
							],
							[
								8110,
								8119
							],
							[
								8131,
								8152
							],
							[
								8378,
								8388
							],
							[
								8398,
								8408
							],
							[
								8930,
								8945
							],
							[
								11050,
								11076
							],
							[
								11157,
								11184
							],
							[
								11360,
								11371
							],
							[
								11381,
								11392
							],
							[
								11465,
								11473
							],
							[
								11973,
								11989
							],
							[
								15382,
								15394
							],
							[
								15630,
								15643
							],
							[
								16808,
								16822
							],
							[
								16891,
								16904
							],
							[
								16965,
								16978
							],
							[
								17066,
								17078
							],
							[
								17164,
								17176
							],
							[
								17233,
								17243
							],
							[
								17307,
								17324
							],
							[
								17380,
								17393
							],
							[
								17451,
								17467
							],
							[
								17657,
								17669
							],
							[
								17783,
								17809
							],
							[
								17869,
								17892
							],
							[
								17960,
								17978
							],
							[
								18077,
								18092
							],
							[
								18154,
								18169
							],
							[
								18220,
								18237
							],
							[
								18286,
								18297
							],
							[
								18346,
								18367
							],
							[
								18413,
								18432
							],
							[
								18481,
								18493
							],
							[
								18596,
								18616
							],
							[
								18711,
								18723
							],
							[
								18777,
								18787
							],
							[
								19461,
								19478
							],
							[
								19863,
								19871
							],
							[
								20123,
								20131
							],
							[
								21395,
								21409
							],
							[
								21687,
								21697
							],
							[
								21842,
								21858
							],
							[
								21887,
								21902
							],
							[
								21938,
								21953
							],
							[
								21999,
								22008
							],
							[
								27086,
								27093
							],
							[
								27274,
								27281
							],
							[
								27753,
								27761
							],
							[
								28092,
								28105
							],
							[
								28260,
								28273
							]
						],
						"symlist":
						[
							"PORT_MIDI_H",
							"int32_t",
							"uint32_t",
							"INT32_DEFINED",
							"PMEXPORT",
							"__declspec",
							"PMEXPORT",
							"FALSE",
							"TRUE",
							"PM_DEFAULT_SYSEX_BUFFER_SIZE",
							"Pm_Initialize",
							"Pm_Terminate",
							"PortMidiStream",
							"PmStream",
							"Pm_HasHostError",
							"Pm_GetErrorText",
							"Pm_GetHostErrorText",
							"HDRLENGTH",
							"PM_HOST_ERROR_MSG_LEN",
							"PmDeviceID",
							"pmNoDevice",
							"Pm_CountDevices",
							"Pm_GetDefaultInputDeviceID",
							"Pm_GetDefaultOutputDeviceID",
							"PmTimestamp",
							"PmTimestamp",
							"PmBefore",
							"Pm_GetDeviceInfo",
							"Pm_OpenInput",
							"Pm_OpenOutput",
							"PM_FILT_ACTIVE",
							"PM_FILT_SYSEX",
							"PM_FILT_CLOCK",
							"PM_FILT_PLAY",
							"PM_FILT_TICK",
							"PM_FILT_FD",
							"PM_FILT_UNDEFINED",
							"PM_FILT_RESET",
							"PM_FILT_REALTIME",
							"PM_FILT_NOTE",
							"PM_FILT_CHANNEL_AFTERTOUCH",
							"PM_FILT_POLY_AFTERTOUCH",
							"PM_FILT_AFTERTOUCH",
							"PM_FILT_PROGRAM",
							"PM_FILT_CONTROL",
							"PM_FILT_PITCHBEND",
							"PM_FILT_MTC",
							"PM_FILT_SONG_POSITION",
							"PM_FILT_SONG_SELECT",
							"PM_FILT_TUNE",
							"PM_FILT_SYSTEMCOMMON",
							"Pm_SetFilter",
							"Pm_Channel",
							"Pm_SetChannelMask",
							"Pm_Abort",
							"Pm_Close",
							"Pm_Synchronize",
							"Pm_Message",
							"Pm_MessageStatus",
							"Pm_MessageData1",
							"Pm_MessageData2",
							"PmMessage",
							"Pm_Read",
							"Pm_Poll",
							"Pm_Write",
							"Pm_WriteShort",
							"Pm_WriteSysEx"
						]
					},
					"AQAAAAAAAAAAAAAAzAMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					1167,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/ast-shell.js",
						"symkeys":
						[
							[
								1871,
								1875
							],
							[
								1934,
								1938
							],
							[
								1974,
								2002
							],
							[
								2292,
								2300
							],
							[
								2301,
								2315
							],
							[
								2397,
								2407
							],
							[
								2469,
								2517
							],
							[
								2631,
								2640
							],
							[
								2750,
								2772
							],
							[
								3231,
								3253
							],
							[
								3648,
								3666
							],
							[
								3765,
								3783
							],
							[
								3888,
								3914
							],
							[
								4050,
								4054
							],
							[
								4172,
								4188
							],
							[
								4680,
								4699
							],
							[
								4763,
								4784
							],
							[
								5118,
								5123
							],
							[
								5198,
								5213
							],
							[
								5298,
								5306
							],
							[
								5347,
								5355
							],
							[
								5726,
								5799
							],
							[
								5803,
								5811
							],
							[
								5908,
								5938
							],
							[
								5967,
								5972
							],
							[
								6005,
								6012
							],
							[
								6041,
								6069
							],
							[
								6406,
								6413
							],
							[
								6432,
								6455
							],
							[
								6485,
								6492
							],
							[
								6523,
								6531
							],
							[
								6569,
								6576
							],
							[
								6776,
								6789
							],
							[
								6969,
								7012
							],
							[
								7045,
								7054
							],
							[
								7115,
								7119
							],
							[
								7221,
								7225
							],
							[
								7261,
								7275
							],
							[
								7387,
								7415
							],
							[
								7620,
								7645
							],
							[
								7743,
								7767
							],
							[
								7840,
								7844
							],
							[
								7962,
								7966
							],
							[
								8030,
								8044
							],
							[
								8100,
								8109
							],
							[
								8407,
								8421
							],
							[
								8544,
								8579
							],
							[
								8668,
								8673
							],
							[
								8796,
								8808
							],
							[
								8861,
								8886
							],
							[
								8935,
								8946
							],
							[
								8986,
								8997
							],
							[
								9135,
								9146
							],
							[
								9233,
								9246
							],
							[
								9327,
								9359
							],
							[
								9597,
								9626
							],
							[
								9637,
								9652
							],
							[
								9714,
								9733
							],
							[
								9941,
								9980
							],
							[
								10045,
								10085
							],
							[
								10168,
								10212
							],
							[
								10294,
								10333
							],
							[
								10395,
								10433
							],
							[
								10519,
								10547
							],
							[
								10610,
								10637
							],
							[
								11188,
								11214
							],
							[
								11481,
								11488
							],
							[
								13404,
								13462
							],
							[
								14505,
								14512
							],
							[
								14576,
								14583
							],
							[
								14593,
								14604
							],
							[
								14645,
								14671
							],
							[
								14787,
								14801
							],
							[
								15098,
								15117
							],
							[
								15144,
								15151
							],
							[
								15239,
								15269
							],
							[
								15335,
								15375
							],
							[
								15551,
								15602
							],
							[
								16591,
								16598
							],
							[
								17005,
								17025
							],
							[
								17201,
								17255
							],
							[
								17444,
								17456
							],
							[
								17484,
								17496
							],
							[
								18111,
								18171
							],
							[
								18782,
								18837
							],
							[
								18933,
								18945
							],
							[
								18950,
								18980
							],
							[
								19261,
								19283
							],
							[
								19329,
								19352
							],
							[
								19424,
								19439
							],
							[
								19574,
								19590
							],
							[
								19994,
								20007
							],
							[
								20132,
								20151
							],
							[
								20203,
								20211
							],
							[
								20268,
								20283
							],
							[
								20442,
								20454
							],
							[
								20799,
								20813
							],
							[
								20913,
								20930
							],
							[
								21157,
								21179
							],
							[
								21296,
								21321
							],
							[
								21421,
								21438
							],
							[
								21493,
								21497
							],
							[
								21585,
								21589
							],
							[
								21641,
								21665
							],
							[
								21781,
								21821
							],
							[
								21882,
								21903
							],
							[
								22187,
								22219
							],
							[
								22703,
								22718
							],
							[
								22829,
								22854
							],
							[
								23023,
								23058
							],
							[
								23278,
								23285
							],
							[
								23374,
								23381
							],
							[
								23410,
								23419
							],
							[
								23456,
								23465
							],
							[
								23515,
								23523
							],
							[
								23565,
								23589
							],
							[
								23685,
								23701
							],
							[
								23737,
								23777
							],
							[
								24075,
								24118
							],
							[
								25061,
								25072
							],
							[
								25817,
								25867
							],
							[
								25889,
								25915
							],
							[
								25950,
								25979
							],
							[
								26323,
								26366
							],
							[
								26479,
								26483
							],
							[
								26499,
								26503
							],
							[
								26548,
								26635
							],
							[
								26802,
								26835
							],
							[
								26894,
								26899
							],
							[
								26969,
								27011
							],
							[
								27087,
								27097
							],
							[
								27216,
								27256
							],
							[
								27397,
								27402
							],
							[
								27460,
								27467
							],
							[
								27584,
								27588
							],
							[
								27667,
								27671
							],
							[
								27825,
								27832
							],
							[
								27919,
								27924
							],
							[
								28032,
								28048
							],
							[
								28159,
								28166
							],
							[
								28245,
								28249
							],
							[
								28310,
								28317
							],
							[
								28393,
								28400
							],
							[
								28457,
								28503
							],
							[
								28543,
								28553
							],
							[
								28706,
								28742
							],
							[
								28783,
								28795
							],
							[
								30438,
								30470
							],
							[
								30966,
								30976
							],
							[
								31026,
								31036
							],
							[
								31084,
								31094
							],
							[
								31670,
								31681
							],
							[
								31775,
								31779
							],
							[
								31806,
								31810
							],
							[
								31834,
								31838
							],
							[
								31862,
								31866
							],
							[
								31894,
								31931
							],
							[
								32332,
								32387
							],
							[
								32594,
								32602
							],
							[
								32791,
								32799
							],
							[
								32888,
								32896
							],
							[
								32942,
								32950
							],
							[
								33020,
								33056
							],
							[
								33151,
								33194
							],
							[
								33485,
								33504
							],
							[
								33560,
								33565
							],
							[
								33829,
								33852
							],
							[
								33942,
								33947
							],
							[
								34065,
								34088
							],
							[
								34178,
								34183
							],
							[
								34291,
								34303
							],
							[
								34421,
								34426
							],
							[
								34481,
								34510
							],
							[
								34615,
								34620
							],
							[
								35567,
								35625
							],
							[
								36560,
								36571
							],
							[
								36604,
								36615
							],
							[
								36664,
								36670
							],
							[
								36723,
								36731
							],
							[
								37027,
								37031
							],
							[
								37747,
								37753
							]
						],
						"symlist":
						[
							"d =>",
							"d =>",
							"ConcatIterator = iterator =>",
							" gen =>",
							" (...args) =>",
							"toString()",
							"async function ImportModule(modulePath, ...args)",
							"module =>",
							" (acc, item) =>",
							"function CommandLine()",
							" (...args) =>",
							" (...args) =>",
							" (module, ...args) =>",
							"m =>",
							".show = value =>",
							".printNode = arg =>",
							".debug = (...args) =>",
							"() =>",
							"(item, i, a) =>",
							"entry =>",
							"entry =>",
							"function* IncludeAll(dir, maxDepth = Infinity, pred = entry => /\\.[ch]$/.",
							"(entry))",
							"function SelectLocations(node)",
							" n =>",
							"prop =>",
							"function LocationString(loc)",
							"node =>",
							"function Structs(nodes)",
							"node =>",
							"field =>",
							"node =>",
							"(field, i) =>",
							"function Table(list, pred = (n, l) => true)",
							"(n, i) =>",
							"e =>",
							"k =>",
							"([i, l, n]) =>",
							" function returnType(n)",
							" function numArgs(n)",
							" function Params(n)",
							"p =>",
							"k =>",
							"([i, l, n]) =>",
							"(k, j) =>",
							"(acc, name) =>",
							" function padTrunc(len, pad = ' ')",
							" s =>",
							"(name, i) =>",
							"pad = (cols, pad, sep) =>",
							"(key, i) =>",
							"(s, col) =>",
							"(acc, n) =>",
							"(acc, row) =>",
							"function PrintRange(range, file)",
							"function OverlapRange(r1, r2)",
							"GetRange = r =>",
							"InRange = (i, r) =>",
							"function ParentNode(node, ast = $.data)",
							"function NextSibling(node, ast = $.data)",
							"function PreviousSibling(node, ast = $.data)",
							"function FirstChild(node, ast = $.data)",
							"function LastChild(node, ast = $.data)",
							"function Terminate(exitCode)",
							"function ParseStructs(text)",
							"function* (decl, includes)",
							"name =>",
							"function InspectStruct(decl, includes, compiler = 'clang')",
							"line =>",
							"line =>",
							"(col, i) =>",
							"([field, offset, size]) =>",
							"(acc, line) =>",
							"toString(sep = ' ')",
							"line =>",
							"function RoundTo(value, align)",
							"function MakeStructClass(decl, filename)",
							"function* GenerateStructClass(decl, ffiPrefix = '')",
							"line =>",
							"([field, member]) =>",
							"function GenerateGetSet(name, offset, type, ffiPrefix)",
							"toHex = v =>",
							"toHex = v =>",
							"function ByteLength2TypedArray(byteLength, signed, floating)",
							"function ByteLength2Value(byteLength, signed, floating)",
							"FFI_Function",
							"constructor(node, prefix = '')",
							"([name, type], idx) =>",
							"generateDefine(fp, lib)",
							" (name, lib) =>",
							"colorText = x =>",
							"generateDoc()",
							"push = (...args) =>",
							"field =>",
							"(field, col) =>",
							"js = type =>",
							"generateCall()",
							"([name, type]) =>",
							"generate(fp, lib, exp)",
							"generateFunction(fp, lib)",
							"([name, type]) =>",
							"p =>",
							"p =>",
							"compileFunction(fp, lib)",
							"function FdReader(fd, bufferSize = 1024)",
							"async (push, stop) =>",
							"async function CommandRead(args)",
							"async reader =>",
							" function ReadOutput(fd)",
							"async function LibraryExports(file)",
							"line =>",
							"line =>",
							"column =>",
							"(a, b) =>",
							"entry =>",
							"function SaveLibraries()",
							"(acc, [n, e]) =>",
							"function ProcessFile(file, debug = true)",
							"function ParseECMAScript(file, params = {})",
							" (fr, i) =>",
							"function PrintECMAScript(ast, comments, printer = ",
							"({ indent: 4 }, comments))",
							"function PrintCArray(strings)",
							"function Namespaces(nodePath, ast = $.data)",
							"p =>",
							"n =>",
							"function* Constants(node, t = (name, value) => [name, !isNaN(+value) ? +value : value])",
							"function GetImports(ast = $.data)",
							" n =>",
							"function GetIdentifiers(nodes, key = null)",
							" (n, k) =>",
							"function MemberNames(members, flags = 0)",
							" n =>",
							"path =>",
							"p =>",
							"p =>",
							"name =>",
							" n =>",
							"([node, ptr]) =>",
							"path =>",
							"p =>",
							"name =>",
							"name =>",
							"function UnsetLoc(node, pred = (v, p) => true)",
							" (v, k) =>",
							"function MakeFFI(node, lib, exp, fp)",
							"function* ()",
							"async function ASTShell(...args)",
							" (a, p) =>",
							" (a, p) =>",
							" (a, p) =>",
							"get flags()",
							"v =>",
							"v =>",
							"d =>",
							"l =>",
							"async function Compile(file, ...args)",
							" function nameOrIdPred(name_or_id, pred = n => true)",
							" node =>",
							" node =>",
							" node =>",
							" node =>",
							"select(name_or_id, pred = n => true)",
							"getByIdOrName(name_or_id, pred = n => true)",
							"getType(name_or_id)",
							" n =>",
							"getFunction(name_or_id)",
							" n =>",
							"getVariable(name_or_id)",
							" n =>",
							"getLoc(node)",
							"() =>",
							"pathOf(needle, maxDepth = 10)",
							" n =>",
							"Pointer.prototype.chain = function(step, limit = Infinity)",
							".F = arg =>",
							".T = arg =>",
							" () =>",
							" node =>",
							"s =>",
							" fr =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADMAwAAUE9SVF9NSURJX0gKICBpbnQzMl90CiAgdWludDMyX3QKSU5UMzJfREVGSU5FRApQTUVYUE9SVAogIF9fZGVjbHNwZWMKUE1FWFBPUlQKRkFMU0UKVFJVRQpQTV9ERUZBVUxUX1NZU0VYX0JVRkZFUl9TSVpFClBtX0luaXRpYWxpemUKUG1fVGVybWluYXRlClBvcnRNaWRpU3RyZWFtClBtU3RyZWFtClBtX0hhc0hvc3RFcnJvcgpQbV9HZXRFcnJvclRleHQKUG1fR2V0SG9zdEVycm9yVGV4dApIRFJMRU5HVEgKUE1fSE9TVF9FUlJPUl9NU0dfTEVOClBtRGV2aWNlSUQKICBwbU5vRGV2aWNlClBtX0NvdW50RGV2aWNlcwpQbV9HZXREZWZhdWx0SW5wdXREZXZpY2VJRApQbV9HZXREZWZhdWx0T3V0cHV0RGV2aWNlSUQKUG1UaW1lc3RhbXAKUG1UaW1lc3RhbXAKUG1CZWZvcmUKUG1fR2V0RGV2aWNlSW5mbwpQbV9PcGVuSW5wdXQKUG1fT3Blbk91dHB1dApQTV9GSUxUX0FDVElWRQpQTV9GSUxUX1NZU0VYClBNX0ZJTFRfQ0xPQ0sKUE1fRklMVF9QTEFZClBNX0ZJTFRfVElDSwpQTV9GSUxUX0ZEClBNX0ZJTFRfVU5ERUZJTkVEClBNX0ZJTFRfUkVTRVQKUE1fRklMVF9SRUFMVElNRQpQTV9GSUxUX05PVEUKUE1fRklMVF9DSEFOTkVMX0FGVEVSVE9VQ0gKUE1fRklMVF9QT0xZX0FGVEVSVE9VQ0gKUE1fRklMVF9BRlRFUlRPVUNIClBNX0ZJTFRfUFJPR1JBTQpQTV9GSUxUX0NPTlRST0wKUE1fRklMVF9QSVRDSEJFTkQKUE1fRklMVF9NVEMKUE1fRklMVF9TT05HX1BPU0lUSU9OClBNX0ZJTFRfU09OR19TRUxFQ1QKUE1fRklMVF9UVU5FClBNX0ZJTFRfU1lTVEVNQ09NTU9OClBtX1NldEZpbHRlcgpQbV9DaGFubmVsClBtX1NldENoYW5uZWxNYXNrClBtX0Fib3J0ClBtX0Nsb3NlClBtX1N5bmNocm9uaXplClBtX01lc3NhZ2UKUG1fTWVzc2FnZVN0YXR1cwpQbV9NZXNzYWdlRGF0YTEKUG1fTWVzc2FnZURhdGEyClBtTWVzc2FnZQpQbV9SZWFkClBtX1BvbGwKUG1fV3JpdGUKUG1fV3JpdGVTaG9ydApQbV9Xcml0ZVN5c0V4AAAAAAAAAACmDAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					1168,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/portmidi.js",
						"symkeys":
						[
							[
								279,
								303
							],
							[
								472,
								495
							],
							[
								721,
								753
							],
							[
								990,
								1022
							],
							[
								1293,
								1331
							],
							[
								1518,
								1544
							],
							[
								1757,
								1794
							],
							[
								2021,
								2059
							],
							[
								2299,
								2328
							],
							[
								2801,
								2894
							],
							[
								3480,
								3585
							],
							[
								3930,
								3968
							],
							[
								4258,
								4298
							],
							[
								4522,
								4547
							],
							[
								4756,
								4781
							],
							[
								5008,
								5039
							],
							[
								5340,
								5380
							],
							[
								5601,
								5625
							],
							[
								5922,
								5963
							],
							[
								6284,
								6325
							],
							[
								6649,
								6690
							],
							[
								6986,
								7034
							],
							[
								7286,
								7317
							],
							[
								7580,
								7611
							],
							[
								7874,
								7905
							],
							[
								8131,
								8159
							],
							[
								8385,
								8414
							],
							[
								8641,
								8669
							],
							[
								8898,
								8928
							],
							[
								9239,
								9288
							],
							[
								9469,
								9487
							],
							[
								9644,
								9665
							]
						],
						"symlist":
						[
							"function Pm_Initialize()",
							"function Pm_Terminate()",
							"function Pm_HasHostError(stream)",
							"function Pm_GetErrorText(errnum)",
							"function Pm_GetHostErrorText(msg, len)",
							"function Pm_CountDevices()",
							"function Pm_GetDefaultInputDeviceID()",
							"function Pm_GetDefaultOutputDeviceID()",
							"function Pm_GetDeviceInfo(id)",
							"function Pm_OpenInput(stream, inputDevice, inputDriverInfo, bufferSize, time_proc, time_info)",
							"function Pm_OpenOutput(stream, outputDevice, outputDriverInfo, bufferSize, time_proc, time_info, latency)",
							"function Pm_SetFilter(stream, filters)",
							"function Pm_SetChannelMask(stream, mask)",
							"function Pm_Abort(stream)",
							"function Pm_Close(stream)",
							"function Pm_Synchronize(stream)",
							"function Pm_Read(stream, buffer, length)",
							"function Pm_Poll(stream)",
							"function Pm_Write(stream, buffer, length)",
							"function Pm_WriteShort(stream, when, msg)",
							"function Pm_WriteSysEx(stream, when, msg)",
							"function Pm_QueueCreate(num_msgs, bytes_per_msg)",
							"function Pm_QueueDestroy(queue)",
							"function Pm_Dequeue(queue, msg)",
							"function Pm_Enqueue(queue, msg)",
							"function Pm_QueueFull(queue)",
							"function Pm_QueueEmpty(queue)",
							"function Pm_QueuePeek(queue)",
							"function Pm_SetOverflow(queue)",
							"function Pt_Start(resolution, callback, userData)",
							"function Pt_Stop()",
							"function Pt_Started()"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACmDAAAICBkID0+CiAgZCA9PgpDb25jYXRJdGVyYXRvciA9IGl0ZXJhdG9yID0+CmdlbiA9PgooLi4uYXJncykgPT4KICB0b1N0cmluZygpCkltcG9ydE1vZHVsZShtb2R1bGVQYXRoLCAuLi5hcmdzKQogIG1vZHVsZSA9PgooYWNjLCBpdGVtKSA9PgpDb21tYW5kTGluZSgpCiguLi5hcmdzKSA9PgooLi4uYXJncykgPT4KKG1vZHVsZSwgLi4uYXJncykgPT4KICBtID0+CiAgLnNob3cgPSB2YWx1ZSA9PgogIC5wcmludE5vZGUgPSBhcmcgPT4KICAuZGVidWcgPSAoLi4uYXJncykgPT4KKCkgPT4KKGl0ZW0sIGksIGEpID0+CiAgZW50cnkgPT4KICBlbnRyeSA9PgpJbmNsdWRlQWxsKGRpciwgbWF4RGVwdGggPSBJbmZpbml0eSwgcHJlZCA9IGVudHJ5ID0+IC9cLltjaF0kLy4KKGVudHJ5KSkKU2VsZWN0TG9jYXRpb25zKG5vZGUpCm4gPT4KICBwcm9wID0+CkxvY2F0aW9uU3RyaW5nKGxvYykKICBub2RlID0+ClN0cnVjdHMobm9kZXMpCiAgbm9kZSA9PgogIGZpZWxkID0+CiAgbm9kZSA9PgooZmllbGQsIGkpID0+ClRhYmxlKGxpc3QsIHByZWQgPSAobiwgbCkgPT4gdHJ1ZSkKKG4sIGkpID0+CiAgZSA9PgogIGsgPT4KKFtpLCBsLCBuXSkgPT4KICByZXR1cm5UeXBlKG4pCiAgbnVtQXJncyhuKQpQYXJhbXMobikKICBwID0+CiAgayA9PgooW2ksIGwsIG5dKSA9PgooaywgaikgPT4KKGFjYywgbmFtZSkgPT4KICBwYWRUcnVuYyhsZW4sIHBhZCA9ICcgJykKcyA9PgoobmFtZSwgaSkgPT4KICBwYWQgPSAoY29scywgcGFkLCBzZXApID0+CihrZXksIGkpID0+CihzLCBjb2wpID0+CihhY2MsIG4pID0+CihhY2MsIHJvdykgPT4KUHJpbnRSYW5nZShyYW5nZSwgZmlsZSkKT3ZlcmxhcFJhbmdlKHIxLCByMikKR2V0UmFuZ2UgPSByID0+CkluUmFuZ2UgPSAoaSwgcikgPT4KUGFyZW50Tm9kZShub2RlLCBhc3QgPSAkLmRhdGEpCk5leHRTaWJsaW5nKG5vZGUsIGFzdCA9ICQuZGF0YSkKUHJldmlvdXNTaWJsaW5nKG5vZGUsIGFzdCA9ICQuZGF0YSkKRmlyc3RDaGlsZChub2RlLCBhc3QgPSAkLmRhdGEpCkxhc3RDaGlsZChub2RlLCBhc3QgPSAkLmRhdGEpClRlcm1pbmF0ZShleGl0Q29kZSkKUGFyc2VTdHJ1Y3RzKHRleHQpCihkZWNsLCBpbmNsdWRlcykKICBuYW1lID0+Ckluc3BlY3RTdHJ1Y3QoZGVjbCwgaW5jbHVkZXMsIGNvbXBpbGVyID0gJ2NsYW5nJykKICBsaW5lID0+CiAgbGluZSA9PgooY29sLCBpKSA9PgooW2ZpZWxkLCBvZmZzZXQsIHNpemVdKSA9PgooYWNjLCBsaW5lKSA9PgogIHRvU3RyaW5nKHNlcCA9ICcgJykKICBsaW5lID0+ClJvdW5kVG8odmFsdWUsIGFsaWduKQpNYWtlU3RydWN0Q2xhc3MoZGVjbCwgZmlsZW5hbWUpCkdlbmVyYXRlU3RydWN0Q2xhc3MoZGVjbCwgZmZpUHJlZml4ID0gJycpCiAgbGluZSA9PgooW2ZpZWxkLCBtZW1iZXJdKSA9PgpHZW5lcmF0ZUdldFNldChuYW1lLCBvZmZzZXQsIHR5cGUsIGZmaVByZWZpeCkKICB0b0hleCA9IHYgPT4KICB0b0hleCA9IHYgPT4KQnl0ZUxlbmd0aDJUeXBlZEFycmF5KGJ5dGVMZW5ndGgsIHNpZ25lZCwgZmxvYXRpbmcpCkJ5dGVMZW5ndGgyVmFsdWUoYnl0ZUxlbmd0aCwgc2lnbmVkLCBmbG9hdGluZykKRkZJX0Z1bmN0aW9uCiAgY29uc3RydWN0b3Iobm9kZSwgcHJlZml4ID0gJycpCihbbmFtZSwgdHlwZV0sIGlkeCkgPT4KICBnZW5lcmF0ZURlZmluZShmcCwgbGliKQoobmFtZSwgbGliKSA9PgogIGNvbG9yVGV4dCA9IHggPT4KICBnZW5lcmF0ZURvYygpCiAgcHVzaCA9ICguLi5hcmdzKSA9PgogIGZpZWxkID0+CihmaWVsZCwgY29sKSA9PgogIGpzID0gdHlwZSA9PgogIGdlbmVyYXRlQ2FsbCgpCihbbmFtZSwgdHlwZV0pID0+CiAgZ2VuZXJhdGUoZnAsIGxpYiwgZXhwKQogIGdlbmVyYXRlRnVuY3Rpb24oZnAsIGxpYikKKFtuYW1lLCB0eXBlXSkgPT4KICBwID0+CiAgcCA9PgogIGNvbXBpbGVGdW5jdGlvbihmcCwgbGliKQpGZFJlYWRlcihmZCwgYnVmZmVyU2l6ZSA9IDEwMjQpCihwdXNoLCBzdG9wKSA9PgpDb21tYW5kUmVhZChhcmdzKQogIHJlYWRlciA9PgpSZWFkT3V0cHV0KGZkKQpMaWJyYXJ5RXhwb3J0cyhmaWxlKQogIGxpbmUgPT4KICBsaW5lID0+CiAgY29sdW1uID0+CihhLCBiKSA9PgogIGVudHJ5ID0+ClNhdmVMaWJyYXJpZXMoKQooYWNjLCBbbiwgZV0pID0+ClByb2Nlc3NGaWxlKGZpbGUsIGRlYnVnID0gdHJ1ZSkKUGFyc2VFQ01BU2NyaXB0KGZpbGUsIHBhcmFtcyA9IHt9KQooZnIsIGkpID0+ClByaW50RUNNQVNjcmlwdChhc3QsIGNvbW1lbnRzLCBwcmludGVyID0gCih7IGluZGVudDogNCB9LCBjb21tZW50cykpClByaW50Q0FycmF5KHN0cmluZ3MpCk5hbWVzcGFjZXMobm9kZVBhdGgsIGFzdCA9ICQuZGF0YSkKICBwID0+CiAgbiA9PgpDb25zdGFudHMobm9kZSwgdCA9IChuYW1lLCB2YWx1ZSkgPT4gW25hbWUsICFpc05hTigrdmFsdWUpID8gK3ZhbHVlIDogdmFsdWVdKQpHZXRJbXBvcnRzKGFzdCA9ICQuZGF0YSkKbiA9PgpHZXRJZGVudGlmaWVycyhub2Rlcywga2V5ID0gbnVsbCkKKG4sIGspID0+Ck1lbWJlck5hbWVzKG1lbWJlcnMsIGZsYWdzID0gMCkKbiA9PgogIHBhdGggPT4KICBwID0+CiAgcCA9PgogIG5hbWUgPT4KbiA9PgooW25vZGUsIHB0cl0pID0+CiAgcGF0aCA9PgogIHAgPT4KICBuYW1lID0+CiAgbmFtZSA9PgpVbnNldExvYyhub2RlLCBwcmVkID0gKHYsIHApID0+IHRydWUpCih2LCBrKSA9PgpNYWtlRkZJKG5vZGUsIGxpYiwgZXhwLCBmcCkKKCkKQVNUU2hlbGwoLi4uYXJncykKKGEsIHApID0+CihhLCBwKSA9PgooYSwgcCkgPT4KICBnZXQgZmxhZ3MoKQogIHYgPT4KICB2ID0+CiAgZCA9PgogIGwgPT4KQ29tcGlsZShmaWxlLCAuLi5hcmdzKQogIG5hbWVPcklkUHJlZChuYW1lX29yX2lkLCBwcmVkID0gbiA9PiB0cnVlKQpub2RlID0+Cm5vZGUgPT4Kbm9kZSA9Pgpub2RlID0+CiAgc2VsZWN0KG5hbWVfb3JfaWQsIHByZWQgPSBuID0+IHRydWUpCiAgZ2V0QnlJZE9yTmFtZShuYW1lX29yX2lkLCBwcmVkID0gbiA9PiB0cnVlKQogIGdldFR5cGUobmFtZV9vcl9pZCkKbiA9PgogIGdldEZ1bmN0aW9uKG5hbWVfb3JfaWQpCm4gPT4KICBnZXRWYXJpYWJsZShuYW1lX29yX2lkKQpuID0+CiAgZ2V0TG9jKG5vZGUpCigpID0+CiAgcGF0aE9mKG5lZWRsZSwgbWF4RGVwdGggPSAxMCkKbiA9PgpQb2ludGVyLnByb3RvdHlwZS5jaGFpbiA9IGZ1bmN0aW9uKHN0ZXAsIGxpbWl0ID0gSW5maW5pdHkpCiAgLkYgPSBhcmcgPT4KICAuVCA9IGFyZyA9PgooKSA9Pgpub2RlID0+CiAgcyA9PgpmciA9PgAAAAAAAAAAjgMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					1169,
					1,
					"outline_refresh",
					{
						"path": "/usr/include/portmidi.h",
						"symkeys":
						[
							[
								28,
								39
							],
							[
								4855,
								4862
							],
							[
								4885,
								4893
							],
							[
								4903,
								4916
							],
							[
								4955,
								4963
							],
							[
								4964,
								4974
							],
							[
								5000,
								5008
							],
							[
								5044,
								5049
							],
							[
								5084,
								5088
							],
							[
								5161,
								5189
							],
							[
								6356,
								6369
							],
							[
								6500,
								6512
							],
							[
								6609,
								6623
							],
							[
								6633,
								6641
							],
							[
								7556,
								7571
							],
							[
								7793,
								7808
							],
							[
								8050,
								8069
							],
							[
								8110,
								8119
							],
							[
								8131,
								8152
							],
							[
								8378,
								8388
							],
							[
								8398,
								8408
							],
							[
								8930,
								8945
							],
							[
								11050,
								11076
							],
							[
								11157,
								11184
							],
							[
								11360,
								11371
							],
							[
								11381,
								11392
							],
							[
								11465,
								11473
							],
							[
								11973,
								11989
							],
							[
								15382,
								15394
							],
							[
								15630,
								15643
							],
							[
								16808,
								16822
							],
							[
								16891,
								16904
							],
							[
								16965,
								16978
							],
							[
								17066,
								17078
							],
							[
								17164,
								17176
							],
							[
								17233,
								17243
							],
							[
								17307,
								17324
							],
							[
								17380,
								17393
							],
							[
								17451,
								17467
							],
							[
								17657,
								17669
							],
							[
								17783,
								17809
							],
							[
								17869,
								17892
							],
							[
								17960,
								17978
							],
							[
								18077,
								18092
							],
							[
								18154,
								18169
							],
							[
								18220,
								18237
							],
							[
								18286,
								18297
							],
							[
								18346,
								18367
							],
							[
								18413,
								18432
							],
							[
								18481,
								18493
							],
							[
								18596,
								18616
							],
							[
								18711,
								18723
							],
							[
								18777,
								18787
							],
							[
								19461,
								19478
							],
							[
								19863,
								19871
							],
							[
								20123,
								20131
							],
							[
								21395,
								21409
							],
							[
								21687,
								21697
							],
							[
								21842,
								21858
							],
							[
								21887,
								21902
							],
							[
								21938,
								21953
							],
							[
								21999,
								22008
							],
							[
								27086,
								27093
							],
							[
								27274,
								27281
							],
							[
								27753,
								27761
							],
							[
								28092,
								28105
							],
							[
								28260,
								28273
							]
						],
						"symlist":
						[
							"PORT_MIDI_H",
							"int32_t",
							"uint32_t",
							"INT32_DEFINED",
							"PMEXPORT",
							"__declspec",
							"PMEXPORT",
							"FALSE",
							"TRUE",
							"PM_DEFAULT_SYSEX_BUFFER_SIZE",
							"Pm_Initialize",
							"Pm_Terminate",
							"PortMidiStream",
							"PmStream",
							"Pm_HasHostError",
							"Pm_GetErrorText",
							"Pm_GetHostErrorText",
							"HDRLENGTH",
							"PM_HOST_ERROR_MSG_LEN",
							"PmDeviceID",
							"pmNoDevice",
							"Pm_CountDevices",
							"Pm_GetDefaultInputDeviceID",
							"Pm_GetDefaultOutputDeviceID",
							"PmTimestamp",
							"PmTimestamp",
							"PmBefore",
							"Pm_GetDeviceInfo",
							"Pm_OpenInput",
							"Pm_OpenOutput",
							"PM_FILT_ACTIVE",
							"PM_FILT_SYSEX",
							"PM_FILT_CLOCK",
							"PM_FILT_PLAY",
							"PM_FILT_TICK",
							"PM_FILT_FD",
							"PM_FILT_UNDEFINED",
							"PM_FILT_RESET",
							"PM_FILT_REALTIME",
							"PM_FILT_NOTE",
							"PM_FILT_CHANNEL_AFTERTOUCH",
							"PM_FILT_POLY_AFTERTOUCH",
							"PM_FILT_AFTERTOUCH",
							"PM_FILT_PROGRAM",
							"PM_FILT_CONTROL",
							"PM_FILT_PITCHBEND",
							"PM_FILT_MTC",
							"PM_FILT_SONG_POSITION",
							"PM_FILT_SONG_SELECT",
							"PM_FILT_TUNE",
							"PM_FILT_SYSTEMCOMMON",
							"Pm_SetFilter",
							"Pm_Channel",
							"Pm_SetChannelMask",
							"Pm_Abort",
							"Pm_Close",
							"Pm_Synchronize",
							"Pm_Message",
							"Pm_MessageStatus",
							"Pm_MessageData1",
							"Pm_MessageData2",
							"PmMessage",
							"Pm_Read",
							"Pm_Poll",
							"Pm_Write",
							"Pm_WriteShort",
							"Pm_WriteSysEx"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACOAwAAUG1fSW5pdGlhbGl6ZSgpClBtX1Rlcm1pbmF0ZSgpClBtX0hhc0hvc3RFcnJvcihzdHJlYW0pClBtX0dldEVycm9yVGV4dChlcnJudW0pClBtX0dldEhvc3RFcnJvclRleHQobXNnLCBsZW4pClBtX0NvdW50RGV2aWNlcygpClBtX0dldERlZmF1bHRJbnB1dERldmljZUlEKCkKUG1fR2V0RGVmYXVsdE91dHB1dERldmljZUlEKCkKUG1fR2V0RGV2aWNlSW5mbyhpZCkKUG1fT3BlbklucHV0KHN0cmVhbSwgaW5wdXREZXZpY2UsIGlucHV0RHJpdmVySW5mbywgYnVmZmVyU2l6ZSwgdGltZV9wcm9jLCB0aW1lX2luZm8pClBtX09wZW5PdXRwdXQoc3RyZWFtLCBvdXRwdXREZXZpY2UsIG91dHB1dERyaXZlckluZm8sIGJ1ZmZlclNpemUsIHRpbWVfcHJvYywgdGltZV9pbmZvLCBsYXRlbmN5KQpQbV9TZXRGaWx0ZXIoc3RyZWFtLCBmaWx0ZXJzKQpQbV9TZXRDaGFubmVsTWFzayhzdHJlYW0sIG1hc2spClBtX0Fib3J0KHN0cmVhbSkKUG1fQ2xvc2Uoc3RyZWFtKQpQbV9TeW5jaHJvbml6ZShzdHJlYW0pClBtX1JlYWQoc3RyZWFtLCBidWZmZXIsIGxlbmd0aCkKUG1fUG9sbChzdHJlYW0pClBtX1dyaXRlKHN0cmVhbSwgYnVmZmVyLCBsZW5ndGgpClBtX1dyaXRlU2hvcnQoc3RyZWFtLCB3aGVuLCBtc2cpClBtX1dyaXRlU3lzRXgoc3RyZWFtLCB3aGVuLCBtc2cpClBtX1F1ZXVlQ3JlYXRlKG51bV9tc2dzLCBieXRlc19wZXJfbXNnKQpQbV9RdWV1ZURlc3Ryb3kocXVldWUpClBtX0RlcXVldWUocXVldWUsIG1zZykKUG1fRW5xdWV1ZShxdWV1ZSwgbXNnKQpQbV9RdWV1ZUZ1bGwocXVldWUpClBtX1F1ZXVlRW1wdHkocXVldWUpClBtX1F1ZXVlUGVlayhxdWV1ZSkKUG1fU2V0T3ZlcmZsb3cocXVldWUpClB0X1N0YXJ0KHJlc29sdXRpb24sIGNhbGxiYWNrLCB1c2VyRGF0YSkKUHRfU3RvcCgpClB0X1N0YXJ0ZWQoKQAAAAAAAAAAzAMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					1170,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADMAwAAUE9SVF9NSURJX0gKICBpbnQzMl90CiAgdWludDMyX3QKSU5UMzJfREVGSU5FRApQTUVYUE9SVAogIF9fZGVjbHNwZWMKUE1FWFBPUlQKRkFMU0UKVFJVRQpQTV9ERUZBVUxUX1NZU0VYX0JVRkZFUl9TSVpFClBtX0luaXRpYWxpemUKUG1fVGVybWluYXRlClBvcnRNaWRpU3RyZWFtClBtU3RyZWFtClBtX0hhc0hvc3RFcnJvcgpQbV9HZXRFcnJvclRleHQKUG1fR2V0SG9zdEVycm9yVGV4dApIRFJMRU5HVEgKUE1fSE9TVF9FUlJPUl9NU0dfTEVOClBtRGV2aWNlSUQKICBwbU5vRGV2aWNlClBtX0NvdW50RGV2aWNlcwpQbV9HZXREZWZhdWx0SW5wdXREZXZpY2VJRApQbV9HZXREZWZhdWx0T3V0cHV0RGV2aWNlSUQKUG1UaW1lc3RhbXAKUG1UaW1lc3RhbXAKUG1CZWZvcmUKUG1fR2V0RGV2aWNlSW5mbwpQbV9PcGVuSW5wdXQKUG1fT3Blbk91dHB1dApQTV9GSUxUX0FDVElWRQpQTV9GSUxUX1NZU0VYClBNX0ZJTFRfQ0xPQ0sKUE1fRklMVF9QTEFZClBNX0ZJTFRfVElDSwpQTV9GSUxUX0ZEClBNX0ZJTFRfVU5ERUZJTkVEClBNX0ZJTFRfUkVTRVQKUE1fRklMVF9SRUFMVElNRQpQTV9GSUxUX05PVEUKUE1fRklMVF9DSEFOTkVMX0FGVEVSVE9VQ0gKUE1fRklMVF9QT0xZX0FGVEVSVE9VQ0gKUE1fRklMVF9BRlRFUlRPVUNIClBNX0ZJTFRfUFJPR1JBTQpQTV9GSUxUX0NPTlRST0wKUE1fRklMVF9QSVRDSEJFTkQKUE1fRklMVF9NVEMKUE1fRklMVF9TT05HX1BPU0lUSU9OClBNX0ZJTFRfU09OR19TRUxFQ1QKUE1fRklMVF9UVU5FClBNX0ZJTFRfU1lTVEVNQ09NTU9OClBtX1NldEZpbHRlcgpQbV9DaGFubmVsClBtX1NldENoYW5uZWxNYXNrClBtX0Fib3J0ClBtX0Nsb3NlClBtX1N5bmNocm9uaXplClBtX01lc3NhZ2UKUG1fTWVzc2FnZVN0YXR1cwpQbV9NZXNzYWdlRGF0YTEKUG1fTWVzc2FnZURhdGEyClBtTWVzc2FnZQpQbV9SZWFkClBtX1BvbGwKUG1fV3JpdGUKUG1fV3JpdGVTaG9ydApQbV9Xcml0ZVN5c0V4AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					1171,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					1172,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					1173,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					1174,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					1175,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				],
				[
					1176,
					1,
					"outline_refresh",
					{
						"path": "/usr/include/portmidi.h",
						"symkeys":
						[
							[
								28,
								39
							],
							[
								4855,
								4862
							],
							[
								4885,
								4893
							],
							[
								4903,
								4916
							],
							[
								4955,
								4963
							],
							[
								4964,
								4974
							],
							[
								5000,
								5008
							],
							[
								5044,
								5049
							],
							[
								5084,
								5088
							],
							[
								5161,
								5189
							],
							[
								6356,
								6369
							],
							[
								6500,
								6512
							],
							[
								6609,
								6623
							],
							[
								6633,
								6641
							],
							[
								7556,
								7571
							],
							[
								7793,
								7808
							],
							[
								8050,
								8069
							],
							[
								8110,
								8119
							],
							[
								8131,
								8152
							],
							[
								8378,
								8388
							],
							[
								8398,
								8408
							],
							[
								8930,
								8945
							],
							[
								11050,
								11076
							],
							[
								11157,
								11184
							],
							[
								11360,
								11371
							],
							[
								11381,
								11392
							],
							[
								11465,
								11473
							],
							[
								11973,
								11989
							],
							[
								15382,
								15394
							],
							[
								15630,
								15643
							],
							[
								16808,
								16822
							],
							[
								16891,
								16904
							],
							[
								16965,
								16978
							],
							[
								17066,
								17078
							],
							[
								17164,
								17176
							],
							[
								17233,
								17243
							],
							[
								17307,
								17324
							],
							[
								17380,
								17393
							],
							[
								17451,
								17467
							],
							[
								17657,
								17669
							],
							[
								17783,
								17809
							],
							[
								17869,
								17892
							],
							[
								17960,
								17978
							],
							[
								18077,
								18092
							],
							[
								18154,
								18169
							],
							[
								18220,
								18237
							],
							[
								18286,
								18297
							],
							[
								18346,
								18367
							],
							[
								18413,
								18432
							],
							[
								18481,
								18493
							],
							[
								18596,
								18616
							],
							[
								18711,
								18723
							],
							[
								18777,
								18787
							],
							[
								19461,
								19478
							],
							[
								19863,
								19871
							],
							[
								20123,
								20131
							],
							[
								21395,
								21409
							],
							[
								21687,
								21697
							],
							[
								21842,
								21858
							],
							[
								21887,
								21902
							],
							[
								21938,
								21953
							],
							[
								21999,
								22008
							],
							[
								27086,
								27093
							],
							[
								27274,
								27281
							],
							[
								27753,
								27761
							],
							[
								28092,
								28105
							],
							[
								28260,
								28273
							]
						],
						"symlist":
						[
							"PORT_MIDI_H",
							"int32_t",
							"uint32_t",
							"INT32_DEFINED",
							"PMEXPORT",
							"__declspec",
							"PMEXPORT",
							"FALSE",
							"TRUE",
							"PM_DEFAULT_SYSEX_BUFFER_SIZE",
							"Pm_Initialize",
							"Pm_Terminate",
							"PortMidiStream",
							"PmStream",
							"Pm_HasHostError",
							"Pm_GetErrorText",
							"Pm_GetHostErrorText",
							"HDRLENGTH",
							"PM_HOST_ERROR_MSG_LEN",
							"PmDeviceID",
							"pmNoDevice",
							"Pm_CountDevices",
							"Pm_GetDefaultInputDeviceID",
							"Pm_GetDefaultOutputDeviceID",
							"PmTimestamp",
							"PmTimestamp",
							"PmBefore",
							"Pm_GetDeviceInfo",
							"Pm_OpenInput",
							"Pm_OpenOutput",
							"PM_FILT_ACTIVE",
							"PM_FILT_SYSEX",
							"PM_FILT_CLOCK",
							"PM_FILT_PLAY",
							"PM_FILT_TICK",
							"PM_FILT_FD",
							"PM_FILT_UNDEFINED",
							"PM_FILT_RESET",
							"PM_FILT_REALTIME",
							"PM_FILT_NOTE",
							"PM_FILT_CHANNEL_AFTERTOUCH",
							"PM_FILT_POLY_AFTERTOUCH",
							"PM_FILT_AFTERTOUCH",
							"PM_FILT_PROGRAM",
							"PM_FILT_CONTROL",
							"PM_FILT_PITCHBEND",
							"PM_FILT_MTC",
							"PM_FILT_SONG_POSITION",
							"PM_FILT_SONG_SELECT",
							"PM_FILT_TUNE",
							"PM_FILT_SYSTEMCOMMON",
							"Pm_SetFilter",
							"Pm_Channel",
							"Pm_SetChannelMask",
							"Pm_Abort",
							"Pm_Close",
							"Pm_Synchronize",
							"Pm_Message",
							"Pm_MessageStatus",
							"Pm_MessageData1",
							"Pm_MessageData2",
							"PmMessage",
							"Pm_Read",
							"Pm_Poll",
							"Pm_Write",
							"Pm_WriteShort",
							"Pm_WriteSysEx"
						]
					},
					"AQAAAAAAAAAAAAAAzAMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAAAAAA"
				]
			]
		},
		{
			"file": "eagle-shell.js",
			"settings":
			{
				"buffer_size": 42556,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					45,
					1,
					"insert",
					{
						"characters": "let"
					},
					"BAAAAHpzAAAAAAAAe3MAAAAAAAAAAAAAe3MAAAAAAAB7cwAAAAAAAAUAAABjb25zdHtzAAAAAAAAfHMAAAAAAAAAAAAAfHMAAAAAAAB9cwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHpzAAAAAAAAf3MAAAAAAAAAAAAAAADwvw"
				],
				[
					54,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAA9zAAAAAAAAEHMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA9zAAAAAAAAD3MAAAAAAAAAAAAAAADwvw"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": " r=.01"
					},
					"BgAAABBzAAAAAAAAEXMAAAAAAAAAAAAAEXMAAAAAAAAScwAAAAAAAAAAAAAScwAAAAAAABNzAAAAAAAAAAAAABNzAAAAAAAAFHMAAAAAAAAAAAAAFHMAAAAAAAAVcwAAAAAAAAAAAAAVcwAAAAAAABZzAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABBzAAAAAAAAEHMAAAAAAAAAAAAAAADwvw"
				],
				[
					56,
					3,
					"left_delete",
					null,
					"AwAAABVzAAAAAAAAFXMAAAAAAAABAAAAMRRzAAAAAAAAFHMAAAAAAAABAAAAMBNzAAAAAAAAE3MAAAAAAAABAAAALg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABZzAAAAAAAAFnMAAAAAAAAAAAAAAADwvw"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": "0."
					},
					"AgAAABNzAAAAAAAAFHMAAAAAAAAAAAAAFHMAAAAAAAAVcwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABNzAAAAAAAAE3MAAAAAAAAAAAAAAADwvw"
				],
				[
					58,
					2,
					"left_delete",
					null,
					"AgAAABRzAAAAAAAAFHMAAAAAAAABAAAALhNzAAAAAAAAE3MAAAAAAAABAAAAMA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABVzAAAAAAAAFXMAAAAAAAAAAAAAAADwvw"
				],
				[
					59,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAABNzAAAAAAAAFHMAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABNzAAAAAAAAE3MAAAAAAAAAAAAAAADwvw"
				],
				[
					62,
					3,
					"left_delete",
					null,
					"AwAAALBzAAAAAAAAsHMAAAAAAAABAAAAMa9zAAAAAAAAr3MAAAAAAAABAAAALq5zAAAAAAAArnMAAAAAAAABAAAAMA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALFzAAAAAAAAsXMAAAAAAAAAAAAAAADwvw"
				],
				[
					63,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAK5zAAAAAAAAr3MAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK5zAAAAAAAArnMAAAAAAAAAAAAAAADwvw"
				],
				[
					68,
					1,
					"right_delete",
					null,
					"AQAAABNzAAAAAAAAE3MAAAAAAAABAAAAMQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABNzAAAAAAAAE3MAAAAAAAAAAAAAAADwvw"
				],
				[
					69,
					1,
					"insert",
					{
						"characters": "0.5"
					},
					"AwAAABNzAAAAAAAAFHMAAAAAAAAAAAAAFHMAAAAAAAAVcwAAAAAAAAAAAAAVcwAAAAAAABZzAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABNzAAAAAAAAE3MAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "list.html",
			"settings":
			{
				"buffer_size": 442,
				"line_ending": "Unix"
			}
		},
		{
			"file": "debugger-server.js",
			"settings":
			{
				"buffer_size": 29603,
				"line_ending": "Unix"
			}
		},
		{
			"file": "ast-shell.js",
			"settings":
			{
				"buffer_size": 37870,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1197,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAFppAAAAAAAAW2kAAAAAAAAAAAAAW2kAAAAAAABdaQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWmkAAAAAAABaaQAAAAAAAAAAAAAAAPC/"
				],
				[
					1202,
					1,
					"left_delete",
					null,
					"AgAAAMhpAAAAAAAAyGkAAAAAAAABAAAAfVtpAAAAAAAAW2kAAAAAAAACAAAAICA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAyWkAAAAAAADJaQAAAAAAAAAAAAAAAPC/"
				],
				[
					1205,
					1,
					"left_delete",
					null,
					"AQAAALNpAAAAAAAAs2kAAAAAAAABAAAAew",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtGkAAAAAAAC0aQAAAAAAAAAAAAAAAPC/"
				],
				[
					1208,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAD1rAAAAAAAAPmsAAAAAAAAAAAAAPmsAAAAAAABAawAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPWsAAAAAAAA9awAAAAAAAAAAAAAAAPC/"
				],
				[
					1211,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAAxrAAAAAAAADWsAAAAAAAAAAAAADWsAAAAAAAAPawAAAAAAAAAAAABBawAAAAAAAEFrAAAAAAAAAgAAACAg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADGsAAAAAAAAMawAAAAAAAAAAAAAAAPC/"
				],
				[
					1214,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAARsAAAAAAAABWwAAAAAAAAAAAAABWwAAAAAAAALbAAAAAAAAAAAAAANawAAAAAAAA1rAAAAAAAAAgAAACAg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABGwAAAAAAAAEbAAAAAAAAAAAAAAAAPC/"
				],
				[
					1217,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAACtsAAAAAAAALGwAAAAAAAAAAAAALGwAAAAAAAAybAAAAAAAAAAAAAADbAAAAAAAAANsAAAAAAAABgAAACAgICAgIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAK2wAAAAAAAArbAAAAAAAAAAAAAAAAPC/"
				],
				[
					1220,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAANZsAAAAAAAA12wAAAAAAAAAAAAA12wAAAAAAADabAAAAAAAAAAAAAAmbAAAAAAAACZsAAAAAAAABgAAACAgICAgIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1mwAAAAAAADWbAAAAAAAAAAAAAAAAPC/"
				],
				[
					1223,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAABhtAAAAAAAAGW0AAAAAAAAAAAAAGW0AAAAAAAAfbQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGG0AAAAAAAAYbQAAAAAAAAAAAAAAAPC/"
				],
				[
					1226,
					1,
					"left_delete",
					null,
					"AgAAAChuAAAAAAAAKG4AAAAAAAACAAAAICAZbQAAAAAAABltAAAAAAAABgAAACAgICAgIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKm4AAAAAAAAobgAAAAAAAAAAAAAAAPC/"
				],
				[
					1229,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAAVvAAAAAAAABm8AAAAAAAAAAAAABm8AAAAAAAALbwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABW8AAAAAAAAFbwAAAAAAAAAAAAAAAPC/"
				],
				[
					1232,
					1,
					"insert",
					{
						"characters": ","
					},
					"AgAAAL9uAAAAAAAAwG4AAAAAAAAAAAAAwG4AAAAAAADAbgAAAAAAAAsAAAA7CiAgICAgIGxldA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAym4AAAAAAAC/bgAAAAAAAAAAAAAAAPC/"
				],
				[
					1235,
					1,
					"left_delete",
					null,
					"AQAAAKBvAAAAAAAAoG8AAAAAAAABAAAAfQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAoW8AAAAAAAChbwAAAAAAAAAAAAAAAPC/"
				],
				[
					1240,
					1,
					"left_delete",
					null,
					"AQAAAFxvAAAAAAAAXG8AAAAAAAABAAAAew",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXW8AAAAAAABdbwAAAAAAAAAAAAAAAPC/"
				],
				[
					1243,
					1,
					"left_delete",
					null,
					"AQAAADpvAAAAAAAAOm8AAAAAAAABAAAAfQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAO28AAAAAAAA7bwAAAAAAAAAAAAAAAPC/"
				],
				[
					1244,
					1,
					"insert",
					{
						"characters": " }"
					},
					"AgAAADpvAAAAAAAAO28AAAAAAAAAAAAAO28AAAAAAAA8bwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOm8AAAAAAAA6bwAAAAAAAAAAAAAAAPC/"
				],
				[
					1245,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAADxvAAAAAAAAPW8AAAAAAAAAAAAAPW8AAAAAAABAbwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPG8AAAAAAAA8bwAAAAAAAAAAAAAAAPC/"
				],
				[
					1248,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAM5wAAAAAAAAz3AAAAAAAAAAAAAAz3AAAAAAAADQcAAAAAAAAAAAAAA9bwAAAAAAAD1vAAAAAAAAAwAAACAgIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAznAAAAAAAADOcAAAAAAAAAAAAAAAAPC/"
				],
				[
					1257,
					1,
					"left_delete",
					null,
					"AQAAAEtwAAAAAAAAS3AAAAAAAAAnAAAAICAgIGNvbnNvbGUubG9nKCdVbnNldExvYycsIHsgdiwgcCB9KTsK",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAS3AAAAAAAABycAAAAAAAAAAAAAAAAPC/"
				],
				[
					1262,
					1,
					"left_delete",
					null,
					"AQAAAElwAAAAAAAASXAAAAAAAAABAAAAew",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASnAAAAAAAABKcAAAAAAAAAAAAAAAAPC/"
				],
				[
					1267,
					3,
					"left_delete",
					null,
					"AwAAAKJwAAAAAAAAonAAAAAAAAABAAAAIKFwAAAAAAAAoXAAAAAAAAABAAAACqBwAAAAAAAAoHAAAAAAAAABAAAAfQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAo3AAAAAAAACjcAAAAAAAAAAAAAAAAPC/"
				],
				[
					1270,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAKVzAAAAAAAApnMAAAAAAAAAAAAApnMAAAAAAACwcwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApXMAAAAAAAClcwAAAAAAAAAAAAAAAPC/"
				],
				[
					1273,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAADh0AAAAAAAAOXQAAAAAAAAAAAAAOXQAAAAAAABBdAAAAAAAAAAAAACmcwAAAAAAAKZzAAAAAAAACgAAACAgICAgICAgICA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOHQAAAAAAAA4dAAAAAAAAAAAAAAAAPC/"
				],
				[
					1278,
					1,
					"left_delete",
					null,
					"AgAAANh4AAAAAAAA2HgAAAAAAAACAAAAICAvdAAAAAAAAC90AAAAAAAACAAAACAgICAgICAg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2HgAAAAAAADaeAAAAAAAAAAAAAAAAPC/"
				],
				[
					1281,
					1,
					"left_delete",
					null,
					"AQAAAMt4AAAAAAAAy3gAAAAAAAB9AAAACiAgLyphd2FpdCBpbXBvcnQoJ2Jqc29uJykudGhlbihtb2R1bGUgPT4gewogICAgY29uc3QgeyByZWFkLCB3cml0ZSB9ID0gbW9kdWxlOwogICAgZ2xvYmFsVGhpcy5ianNvbiA9IHsgcmVhZCwgd3JpdGUgfTsKICB9KTs",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAy3gAAAAAAABIeQAAAAAAAAAAAAAAAPC/"
				],
				[
					1284,
					1,
					"left_delete",
					null,
					"AQAAAPl4AAAAAAAA+XgAAAAAAABsAwAAICAvKmF3YWl0IGltcG9ydCgnbW1hcCcpLnRoZW4obW9kdWxlID0+IHtjb25zdCB7bW1hcCwgbXVubWFwLCB0b1N0cmluZywgUFJPVF9SRUFELCBQUk9UX1dSSVRFLCBQUk9UX0VYRUMsIFBST1RfU0VNLCBQUk9UX05PTkUsIFBST1RfR1JPV1NET1dOLCBQUk9UX0dST1dTVVAsIE1BUF9TSEFSRUQsIE1BUF9QUklWQVRFLCBNQVBfVFlQRSwgTUFQX0ZJWEVELCBNQVBfQU5PTllNT1VTLCBNQVBfR1JPV1NET1dOLCBNQVBfREVOWVdSSVRFLCBNQVBfRVhFQ1VUQUJMRSwgTUFQX0xPQ0tFRCwgTUFQX05PUkVTRVJWRSwgTUFQX1BPUFVMQVRFLCBNQVBfTk9OQkxPQ0ssIE1BUF9TVEFDSyB9ID0gbW9kdWxlOyBnbG9iYWxUaGlzLm1tYXAgPSB7bW1hcCwgbXVubWFwLCB0b1N0cmluZywgUFJPVF9SRUFELCBQUk9UX1dSSVRFLCBQUk9UX0VYRUMsIFBST1RfU0VNLCBQUk9UX05PTkUsIFBST1RfR1JPV1NET1dOLCBQUk9UX0dST1dTVVAsIE1BUF9TSEFSRUQsIE1BUF9QUklWQVRFLCBNQVBfVFlQRSwgTUFQX0ZJWEVELCBNQVBfQU5PTllNT1VTLCBNQVBfR1JPV1NET1dOLCBNQVBfREVOWVdSSVRFLCBNQVBfRVhFQ1VUQUJMRSwgTUFQX0xPQ0tFRCwgTUFQX05PUkVTRVJWRSwgTUFQX1BPUFVMQVRFLCBNQVBfTk9OQkxPQ0ssIE1BUF9TVEFDSyB9OyB9KTsKICBjb25zb2xlLmxvZygnbW1hcDonLCBnbG9iYWxUaGlzLm1tYXApOwoqLwogIC8qICBjb25zb2xlLm9wdGlvbnMgPSBjb25zb2xlT3B0aW9uczsKICBjb25zb2xlLm9wdGlvbnMuY29tcGFjdCA9IDE7CiAgY29uc29sZS5vcHRpb25zLmhpZGVLZXlzID0gWydsb2MnLCAncmFuZ2UnXTsqLwogIC8qY29uc29sZS5vcHRpb25zLmRlcHRoID0gMjsKICBjb25zb2xlLm9wdGlvbnMuY29tcGFjdCA9IDE7Ki8K",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+XgAAAAAAABlfAAAAAAAAAAAAAAAAPC/"
				],
				[
					1291,
					1,
					"left_delete",
					null,
					"AQAAAJ54AAAAAAAAnngAAAAAAAAtAAAAICAvL2F3YWl0IFBvcnRhYmxlU3Bhd24oZm4gPT4gKHNwYXduID0gZm4pKTsK",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnngAAAAAAADLeAAAAAAAAAAAAAAAAPC/"
				],
				[
					1294,
					1,
					"left_delete",
					null,
					"AQAAAPB4AAAAAAAA8HgAAAAAAACoAQAAIC8qICBjb25zdCBwbGF0Zm9ybSA9IGdldFBsYXRmb3JtKCk7CiAgaWYocGxhdGZvcm0gPT0gJ3F1aWNranMnKSBhd2FpdCBpbXBvcnQoJ3N0ZCcpLnRoZW4obW9kdWxlID0+IChnbG9iYWxUaGlzLnN0ZCA9IG1vZHVsZSkpOwoKICBpZihwbGF0Zm9ybSA9PSAnbm9kZScpIGF3YWl0IGltcG9ydCgnLi9saWIvbWlzYy5qcycpLnRoZW4obW9kdWxlID0+IChnbG9iYWxUaGlzLmluc3BlY3QgPSBtb2R1bGUuaW5zcGVjdCkpOwoKICAoYXdhaXQgZ2V0UGxhdGZvcm0oKSkgPT0gJ3F1aWNranMnID8gaW1wb3J0KCdkZWVwLnNvJykudGhlbihtb2R1bGUgPT4gKGdsb2JhbFRoaXMuZGVlcCA9IG1vZHVsZSkpIDogaW1wb3J0KCcuL2xpYi9kZWVwLmpzJykudGhlbihtb2R1bGUgPT4gKGdsb2JhbFRoaXMuZGVlcCA9IG1vZHVsZVsnZGVmYXVsdCddKSk7CiovCg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA8HgAAAAAAACYegAAAAAAAAAAAAAAAPC/"
				],
				[
					1304,
					1,
					"left_delete",
					null,
					"AQAAAKR7AAAAAAAApHsAAAAAAAAkAAAACiAgLy9jb25zb2xlLmxvZygncGFyYW1zJywgcGFyYW1zKTsK",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApHsAAAAAAADIewAAAAAAAAAAAAAAAPC/"
				],
				[
					1311,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAEuAAAAAAAAATIAAAAAAAAAAAAAATIAAAAAAAABSgAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAS4AAAAAAAABLgAAAAAAAAAAAAAAAAPC/"
				],
				[
					1314,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAKqAAAAAAAAAq4AAAAAAAAAAAAAAq4AAAAAAAACtgAAAAAAAAAAAAABMgAAAAAAAAEyAAAAAAAAABgAAACAgICAgIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAqoAAAAAAAACqgAAAAAAAAAAAAAAAAPC/"
				],
				[
					1317,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAALeEAAAAAAAAuIQAAAAAAAAAAAAAuIQAAAAAAADChAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAt4QAAAAAAAC3hAAAAAAAAAAAAAAAAPC/"
				],
				[
					1330,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAFCIAAAAAAAAUYgAAAAAAAAAAAAAUYgAAAAAAABRiAAAAAAAAEkAAAAgICAgICAgICAgLy9jb25zb2xlLmxvZygicGF0aE9mIixjb25zb2xlLmNvbmZpZyh7ZGVwdGg6MX0pLHtub2RlLHBhdGh9KTsKuIQAAAAAAAC4hAAAAAAAAAoAAAAgICAgICAgICAg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUIgAAAAAAACZiAAAAAAAAAAAAAAAAPC/"
				],
				[
					1331,
					1,
					"left_delete",
					null,
					"AQAAAEaIAAAAAAAARogAAAAAAAABAAAACg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAR4gAAAAAAABHiAAAAAAAAAAAAAAAAPC/"
				],
				[
					1336,
					1,
					"left_delete",
					null,
					"AQAAAIaIAAAAAAAAhogAAAAAAAABAAAAfQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAh4gAAAAAAACHiAAAAAAAAAAAAAAAAPC/"
				],
				[
					1343,
					1,
					"left_delete",
					null,
					"AQAAAESIAAAAAAAARIgAAAAAAAABAAAAew",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARYgAAAAAAABFiAAAAAAAAP///////+9/"
				],
				[
					1349,
					5,
					"left_delete",
					null,
					"BQAAAIOIAAAAAAAAg4gAAAAAAAACAAAAICCBiAAAAAAAAIGIAAAAAAAAAgAAACAgf4gAAAAAAAB/iAAAAAAAAAIAAAAgIH2IAAAAAAAAfYgAAAAAAAACAAAAICB8iAAAAAAAAHyIAAAAAAAAAQAAAAo",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAhYgAAAAAAACFiAAAAAAAAAAAAAAAAPC/"
				],
				[
					1352,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAADeMAAAAAAAAOIwAAAAAAAAAAAAAOIwAAAAAAAA8jAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAN4wAAAAAAAA3jAAAAAAAAAAAAAAAAPC/"
				],
				[
					1355,
					1,
					"insert",
					{
						"characters": ","
					},
					"AwAAAAqMAAAAAAAAC4wAAAAAAAAAAAAAC4wAAAAAAAALjAAAAAAAAAoAAAA7CiAgICBsZXQgL4wAAAAAAAAvjAAAAAAAAAQAAAAgICAg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFIwAAAAAAAAKjAAAAAAAAAAAAAAAAPC/"
				],
				[
					1360,
					1,
					"insert",
					{
						"characters": ","
					},
					"AgAAABOMAAAAAAAAFIwAAAAAAAAAAAAAFIwAAAAAAAAUjAAAAAAAAAkAAAA7CiAgICBsZXQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHIwAAAAAAAATjAAAAAAAAAAAAAAAAPC/"
				],
				[
					1363,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAHKMAAAAAAAAc4wAAAAAAAAAAAAAc4wAAAAAAAB5jAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAcowAAAAAAAByjAAAAAAAAAAAAAAAAPC/"
				],
				[
					1366,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAM2MAAAAAAAAzowAAAAAAAAAAAAAzowAAAAAAADSjAAAAAAAAAAAAABzjAAAAAAAAHOMAAAAAAAABgAAACAgICAgIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAzYwAAAAAAADNjAAAAAAAAAAAAAAAAPC/"
				],
				[
					1369,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAK+QAAAAAAAAsJAAAAAAAAAAAAAAsJAAAAAAAACykAAAAAAAAAAAAADIjAAAAAAAAMiMAAAAAAAABAAAACAgICA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAr5AAAAAAAACvkAAAAAAAAAAAAAAAAPC/"
				],
				[
					1372,
					2,
					"left_delete",
					null,
					"AwAAAA6RAAAAAAAADpEAAAAAAAAGAAAACiAgbGV0rJAAAAAAAACskAAAAAAAAAIAAAAgIAuRAAAAAAAAC5EAAAAAAAABAAAAOw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFJEAAAAAAAAOkQAAAAAAAAAAAAAAAPC/"
				],
				[
					1373,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAAuRAAAAAAAADJEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAC5EAAAAAAAALkQAAAAAAAAAAAAAAAPC/"
				],
				[
					1378,
					1,
					"left_delete",
					null,
					"AQAAAMCRAAAAAAAAwJEAAAAAAAABAAAAOw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwZEAAAAAAADBkQAAAAAAAAAAAAAAAGJA"
				],
				[
					1379,
					9,
					"right_delete",
					null,
					"CQAAAMCRAAAAAAAAwJEAAAAAAAABAAAACsCRAAAAAAAAwJEAAAAAAAABAAAAIMCRAAAAAAAAwJEAAAAAAAABAAAAIMCRAAAAAAAAwJEAAAAAAAABAAAAIMCRAAAAAAAAwJEAAAAAAAABAAAAIMCRAAAAAAAAwJEAAAAAAAABAAAAacCRAAAAAAAAwJEAAAAAAAABAAAAdMCRAAAAAAAAwJEAAAAAAAABAAAAZcCRAAAAAAAAwJEAAAAAAAABAAAAbQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwJEAAAAAAADAkQAAAAAAAAAAAAAAAPC/"
				],
				[
					1381,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAN2RAAAAAAAA3pEAAAAAAAAAAAAA3pEAAAAAAADikQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3ZEAAAAAAADdkQAAAAAAAP///////+9/"
				],
				[
					1384,
					4,
					"right_delete",
					null,
					"BQAAAAWSAAAAAAAABZIAAAAAAAABAAAAIN6RAAAAAAAA3pEAAAAAAAAEAAAAICAgIAGSAAAAAAAAAZIAAAAAAAABAAAAIAGSAAAAAAAAAZIAAAAAAAABAAAAIAGSAAAAAAAAAZIAAAAAAAABAAAAIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABZIAAAAAAAAFkgAAAAAAAAAAAAAAAPC/"
				],
				[
					1386,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAP6RAAAAAAAA/5EAAAAAAAAAAAAA/5EAAAAAAAACkgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/pEAAAAAAAD+kQAAAAAAAAAAAAAAAPC/"
				],
				[
					1388,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAGqSAAAAAAAAa5IAAAAAAAAAAAAAa5IAAAAAAABukgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAapIAAAAAAABqkgAAAAAAAAAAAAAAADhA"
				],
				[
					1396,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAF+TAAAAAAAAYJMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAX5MAAAAAAABfkwAAAAAAAAAAAAAAAAAA"
				],
				[
					1403,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAACEKAAAAAAAAIgoAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIQoAAAAAAAAhCgAAAAAAAAAAAAAAAAAA"
				],
				[
					1405,
					2,
					"left_delete",
					null,
					"AgAAAOsJAAAAAAAA6wkAAAAAAAABAAAACuoJAAAAAAAA6gkAAAAAAAABAAAAOw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA7AkAAAAAAADsCQAAAAAAAAAAAAAAAAAA"
				],
				[
					1406,
					5,
					"right_delete",
					null,
					"BQAAAOoJAAAAAAAA6gkAAAAAAAABAAAAIOoJAAAAAAAA6gkAAAAAAAABAAAAIOoJAAAAAAAA6gkAAAAAAAABAAAAbOoJAAAAAAAA6gkAAAAAAAABAAAAZeoJAAAAAAAA6gkAAAAAAAABAAAAdA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6gkAAAAAAADqCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1407,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAOoJAAAAAAAA6wkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6gkAAAAAAADqCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1416,
					1,
					"right_delete",
					null,
					"AQAAAJgXAAAAAAAAmBcAAAAAAABCAAAAICAvL2NvbnNvbGUubG9nKCdyZXN1bHQ6JywgY29uc29sZS5jb25maWcoeyBkZXB0aDogMSB9KSwgcmVzdWx0KTsK",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmBcAAAAAAADaFwAAAAAAAAAAAAAAAAAA"
				],
				[
					1417,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAJgXAAAAAAAAmRcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmBcAAAAAAACYFwAAAAAAAAAAAAAAAPC/"
				],
				[
					1422,
					1,
					"insert",
					{
						"characters": "return"
					},
					"BwAAADIXAAAAAAAAMxcAAAAAAAAAAAAAMxcAAAAAAAAzFwAAAAAAAA0AAAAgbGV0IHJlc3VsdCA9MxcAAAAAAAA0FwAAAAAAAAAAAAA0FwAAAAAAADUXAAAAAAAAAAAAADUXAAAAAAAANhcAAAAAAAAAAAAANhcAAAAAAAA3FwAAAAAAAAAAAAA3FwAAAAAAADgXAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMhcAAAAAAAA/FwAAAAAAAAAAAAAAAPC/"
				],
				[
					1428,
					1,
					"cut",
					null,
					"AQAAAJEXAAAAAAAAkRcAAAAAAAASAAAACiAgcmV0dXJuIHJlc3VsdDsK",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAkRcAAAAAAACjFwAAAAAAAAAAAAAAAAAA"
				],
				[
					1431,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAACkYAAAAAAAAKhgAAAAAAAAAAAAAKhgAAAAAAAAqGAAAAAAAADoAAAAgICAgLy9pZihmaWxlKSBmaWxlID0gcGF0aC5yZWxhdGl2ZShmaWxlLCBwcm9jZXNzLmN3ZCgpKTsK",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKRgAAAAAAABjGAAAAAAAAAAAAAAAAAAA"
				],
				[
					1437,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAJEcAAAAAAAAkhwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAkRwAAAAAAACRHAAAAAAAAAAAAAAAAAAA"
				],
				[
					1442,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAAwgAAAAAAAADSAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADCAAAAAAAAAMIAAAAAAAAAAAAAAAAAAA"
				],
				[
					1444,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAALYgAAAAAAAAtyAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtiAAAAAAAAC2IAAAAAAAAAAAAAAAAAAA"
				],
				[
					1449,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAGYjAAAAAAAAZyMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZiMAAAAAAABmIwAAAAAAAAAAAAAAAAAA"
				],
				[
					1453,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAIsqAAAAAAAAjCoAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAiyoAAAAAAACLKgAAAAAAAAAAAAAAAAAA"
				],
				[
					1455,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAHEqAAAAAAAAcioAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAcSoAAAAAAABxKgAAAAAAAAAAAAAAAAAA"
				],
				[
					1458,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAGIrAAAAAAAAYysAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAYisAAAAAAABiKwAAAAAAAAAAAAAAAAAA"
				],
				[
					1474,
					2,
					"left_delete",
					null,
					"AgAAAA54AAAAAAAADngAAAAAAAAuAAAAICBjb25zb2xlLmxvZygnYmpzb246JywgZ2xvYmFsVGhpcy5ianNvbik7Ki8KCg14AAAAAAAADXgAAAAAAAABAAAACg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADngAAAAAAAA8eAAAAAAAAAAAAAAAAAAA"
				],
				[
					1476,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAALx3AAAAAAAAvXcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvHcAAAAAAAC8dwAAAAAAAAAAAAAAAAAA"
				],
				[
					1480,
					1,
					"revert",
					null,
					"",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvXcAAAAAAAC9dwAAAAAAAAAAAAAAAPC/"
				],
				[
					1511,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAPA+AAAAAAAA8T4AAAAAAAAAAAAA8T4AAAAAAADzPgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA8D4AAAAAAADwPgAAAAAAAAAAAAAAAPC/"
				],
				[
					1560,
					1,
					"insert",
					{
						"characters": "{"
					},
					"AgAAAOo+AAAAAAAA6z4AAAAAAAAAAAAA8j4AAAAAAADyPgAAAAAAAAIAAAAgIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6j4AAAAAAADqPgAAAAAAAAAAAAAAAPC/"
				],
				[
					1562,
					1,
					"insert",
					{
						"characters": ",em"
					},
					"AwAAAO8+AAAAAAAA8D4AAAAAAAAAAAAA8D4AAAAAAADxPgAAAAAAAAAAAADxPgAAAAAAAPI+AAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA7z4AAAAAAADvPgAAAAAAAAAAAAAAAPC/"
				],
				[
					1563,
					2,
					"left_delete",
					null,
					"AgAAAPE+AAAAAAAA8T4AAAAAAAABAAAAbfA+AAAAAAAA8D4AAAAAAAABAAAAZQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA8j4AAAAAAADyPgAAAAAAAAAAAAAAAPC/"
				],
				[
					1564,
					1,
					"insert",
					{
						"characters": "members}"
					},
					"CAAAAPA+AAAAAAAA8T4AAAAAAAAAAAAA8T4AAAAAAADyPgAAAAAAAAAAAADyPgAAAAAAAPM+AAAAAAAAAAAAAPM+AAAAAAAA9D4AAAAAAAAAAAAA9D4AAAAAAAD1PgAAAAAAAAAAAAD1PgAAAAAAAPY+AAAAAAAAAAAAAPY+AAAAAAAA9z4AAAAAAAAAAAAA9z4AAAAAAAD4PgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA8D4AAAAAAADwPgAAAAAAAAAAAAAAAPC/"
				],
				[
					1597,
					1,
					"cut",
					null,
					"AQAAAHl2AAAAAAAAeXYAAAAAAAA2AAAAICAgIHJldHVybiBbLi4uR2VuZXJhdGVTdHJ1Y3RDbGFzcyhub2RlKV0uam9pbignXG4nKTsK",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAeXYAAAAAAACvdgAAAAAAAAAAAAAAAAAA"
				],
				[
					1598,
					2,
					"paste",
					null,
					"AgAAAHl2AAAAAAAAr3YAAAAAAAAAAAAAr3YAAAAAAADldgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAeXYAAAAAAAB5dgAAAAAAAAAAAAAAAPC/"
				],
				[
					1601,
					3,
					"right_delete",
					null,
					"AwAAAIV2AAAAAAAAhXYAAAAAAAABAAAALoV2AAAAAAAAhXYAAAAAAAABAAAALoV2AAAAAAAAhXYAAAAAAAABAAAALg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAhXYAAAAAAACFdgAAAAAAAAAAAAAAAPC/"
				],
				[
					1602,
					1,
					"left_delete",
					null,
					"AQAAAIR2AAAAAAAAhHYAAAAAAAABAAAAWw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAhXYAAAAAAACFdgAAAAAAAAAAAAAAAPC/"
				],
				[
					1604,
					13,
					"left_delete",
					null,
					"DQAAAKl2AAAAAAAAqXYAAAAAAAABAAAAO6h2AAAAAAAAqHYAAAAAAAABAAAAKad2AAAAAAAAp3YAAAAAAAABAAAAJ6Z2AAAAAAAApnYAAAAAAAABAAAAbqV2AAAAAAAApXYAAAAAAAABAAAAXKR2AAAAAAAApHYAAAAAAAABAAAAJ6N2AAAAAAAAo3YAAAAAAAABAAAAKKJ2AAAAAAAAonYAAAAAAAABAAAAbqF2AAAAAAAAoXYAAAAAAAABAAAAaaB2AAAAAAAAoHYAAAAAAAABAAAAb592AAAAAAAAn3YAAAAAAAABAAAAap52AAAAAAAAnnYAAAAAAAABAAAALp12AAAAAAAAnXYAAAAAAAABAAAAXQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAqnYAAAAAAACqdgAAAAAAAP///////+9/"
				],
				[
					1605,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAJ12AAAAAAAAnnYAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnXYAAAAAAACddgAAAAAAAAAAAAAAAPC/"
				],
				[
					1607,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAKN2AAAAAAAApHYAAAAAAAAAAAAApHYAAAAAAACldgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAo3YAAAAAAACjdgAAAAAAAAAAAAAAAPC/"
				],
				[
					1628,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAABY/AAAAAAAAFz8AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFj8AAAAAAAAWPwAAAAAAAAAAAAAAAPC/"
				],
				[
					1632,
					1,
					"insert",
					{
						"characters": " ??"
					},
					"AwAAAB4/AAAAAAAAHz8AAAAAAAAAAAAAHz8AAAAAAAAgPwAAAAAAAAAAAAAgPwAAAAAAACE/AAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHj8AAAAAAAAePwAAAAAAAAAAAAAAAPC/"
				],
				[
					1633,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACE/AAAAAAAAIj8AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIT8AAAAAAAAhPwAAAAAAAAAAAAAAAPC/"
				],
				[
					1634,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAACI/AAAAAAAAJD8AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIj8AAAAAAAAiPwAAAAAAAAAAAAAAAPC/"
				],
				[
					1636,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAACU/AAAAAAAAJj8AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJT8AAAAAAAAlPwAAAAAAAAAAAAAAAPC/"
				],
				[
					1637,
					1,
					"left_delete",
					null,
					"AQAAACU/AAAAAAAAJT8AAAAAAAABAAAAKQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJj8AAAAAAAAmPwAAAAAAAAAAAAAAAPC/"
				],
				[
					1638,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAACU/AAAAAAAAJj8AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJT8AAAAAAAAlPwAAAAAAAAAAAAAAAPC/"
				],
				[
					1646,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAGw9AAAAAAAAbT0AAAAAAAAAAAAAbT0AAAAAAABuPQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbD0AAAAAAABsPQAAAAAAAAAAAAAAAPC/"
				],
				[
					1647,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAG49AAAAAAAAbz0AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbj0AAAAAAABuPQAAAAAAAAAAAAAAAPC/"
				],
				[
					1648,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAG89AAAAAAAAcT0AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbz0AAAAAAABvPQAAAAAAAAAAAAAAAPC/"
				],
				[
					1653,
					3,
					"right_delete",
					null,
					"AwAAACY/AAAAAAAAJj8AAAAAAAABAAAAICY/AAAAAAAAJj8AAAAAAAABAAAAWyY/AAAAAAAAJj8AAAAAAAABAAAAXQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJj8AAAAAAAAmPwAAAAAAAAAAAAAAAPC/"
				],
				[
					1654,
					2,
					"left_delete",
					null,
					"AgAAACU/AAAAAAAAJT8AAAAAAAABAAAAPyQ/AAAAAAAAJD8AAAAAAAABAAAAPw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJj8AAAAAAAAmPwAAAAAAAAAAAAAAAPC/"
				],
				[
					1655,
					1,
					"right_delete",
					null,
					"AQAAACQ/AAAAAAAAJD8AAAAAAAABAAAAKQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJD8AAAAAAAAkPwAAAAAAAAAAAAAAAPC/"
				],
				[
					1657,
					1,
					"left_delete",
					null,
					"AQAAABs/AAAAAAAAGz8AAAAAAAABAAAAKA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHD8AAAAAAAAcPwAAAAAAAAAAAAAAAPC/"
				],
				[
					1662,
					1,
					"revert",
					null,
					"",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGz8AAAAAAAAbPwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "portmidi.js",
			"settings":
			{
				"buffer_size": 9699,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					7,
					1,
					"revert",
					null,
					"",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPAkAAAAAAAA/CQAAAAAAAAAAAAAAAPC/"
				],
				[
					87,
					1,
					"insert",
					{
						"characters": "Function|null"
					},
					"DgAAABUKAAAAAAAAFgoAAAAAAAAAAAAAFgoAAAAAAAAWCgAAAAAAAAYAAABOdW1iZXIWCgAAAAAAABcKAAAAAAAAAAAAABcKAAAAAAAAGAoAAAAAAAAAAAAAGAoAAAAAAAAZCgAAAAAAAAAAAAAZCgAAAAAAABoKAAAAAAAAAAAAABoKAAAAAAAAGwoAAAAAAAAAAAAAGwoAAAAAAAAcCgAAAAAAAAAAAAAcCgAAAAAAAB0KAAAAAAAAAAAAAB0KAAAAAAAAHgoAAAAAAAAAAAAAHgoAAAAAAAAfCgAAAAAAAAAAAAAfCgAAAAAAACAKAAAAAAAAAAAAACAKAAAAAAAAIQoAAAAAAAAAAAAAIQoAAAAAAAAiCgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFQoAAAAAAAAbCgAAAAAAAAAAAAAAAPC/"
				],
				[
					102,
					1,
					"insert",
					{
						"characters": "OI"
					},
					"AwAAAMAJAAAAAAAAwQkAAAAAAAAAAAAAwQkAAAAAAADBCQAAAAAAAAYAAABOdW1iZXLBCQAAAAAAAMIJAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwAkAAAAAAADGCQAAAAAAAAAAAAAAAPC/"
				],
				[
					103,
					2,
					"left_delete",
					null,
					"AgAAAMEJAAAAAAAAwQkAAAAAAAABAAAAScAJAAAAAAAAwAkAAAAAAAABAAAATw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwgkAAAAAAADCCQAAAAAAAAAAAAAAAPC/"
				],
				[
					104,
					1,
					"insert",
					{
						"characters": "object|null"
					},
					"CwAAAMAJAAAAAAAAwQkAAAAAAAAAAAAAwQkAAAAAAADCCQAAAAAAAAAAAADCCQAAAAAAAMMJAAAAAAAAAAAAAMMJAAAAAAAAxAkAAAAAAAAAAAAAxAkAAAAAAADFCQAAAAAAAAAAAADFCQAAAAAAAMYJAAAAAAAAAAAAAMYJAAAAAAAAxwkAAAAAAAAAAAAAxwkAAAAAAADICQAAAAAAAAAAAADICQAAAAAAAMkJAAAAAAAAAAAAAMkJAAAAAAAAygkAAAAAAAAAAAAAygkAAAAAAADLCQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwAkAAAAAAADACQAAAAAAAAAAAAAAAPC/"
				],
				[
					113,
					1,
					"left_delete",
					null,
					"AQAAAMAJAAAAAAAAwAkAAAAAAAABAAAAbw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwQkAAAAAAADBCQAAAAAAAAAAAAAAAPC/"
				],
				[
					114,
					1,
					"insert",
					{
						"characters": "O"
					},
					"AQAAAMAJAAAAAAAAwQkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwAkAAAAAAADACQAAAAAAAAAAAAAAAPC/"
				],
				[
					123,
					1,
					"insert",
					{
						"characters": "ArrayH"
					},
					"BwAAAHMJAAAAAAAAdAkAAAAAAAAAAAAAdAkAAAAAAAB0CQAAAAAAAAYAAABOdW1iZXJ0CQAAAAAAAHUJAAAAAAAAAAAAAHUJAAAAAAAAdgkAAAAAAAAAAAAAdgkAAAAAAAB3CQAAAAAAAAAAAAB3CQAAAAAAAHgJAAAAAAAAAAAAAHgJAAAAAAAAeQkAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAcwkAAAAAAAB5CQAAAAAAAAAAAAAAAPC/"
				],
				[
					124,
					1,
					"left_delete",
					null,
					"AQAAAHgJAAAAAAAAeAkAAAAAAAABAAAASA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAeQkAAAAAAAB5CQAAAAAAAAAAAAAAAPC/"
				],
				[
					125,
					1,
					"insert",
					{
						"characters": "Buffer"
					},
					"BgAAAHgJAAAAAAAAeQkAAAAAAAAAAAAAeQkAAAAAAAB6CQAAAAAAAAAAAAB6CQAAAAAAAHsJAAAAAAAAAAAAAHsJAAAAAAAAfAkAAAAAAAAAAAAAfAkAAAAAAAB9CQAAAAAAAAAAAAB9CQAAAAAAAH4JAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAeAkAAAAAAAB4CQAAAAAAAAAAAAAAAPC/"
				],
				[
					136,
					5,
					"right_delete",
					null,
					"BQAAAIEJAAAAAAAAgQkAAAAAAAABAAAAIIEJAAAAAAAAgQkAAAAAAAABAAAAIIEJAAAAAAAAgQkAAAAAAAABAAAAIIEJAAAAAAAAgQkAAAAAAAABAAAAIIEJAAAAAAAAgQkAAAAAAAABAAAAIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgQkAAAAAAACBCQAAAAAAAAAAAAAAAPC/"
				],
				[
					138,
					5,
					"right_delete",
					null,
					"BQAAAM4JAAAAAAAAzgkAAAAAAAABAAAAIM4JAAAAAAAAzgkAAAAAAAABAAAAIM4JAAAAAAAAzgkAAAAAAAABAAAAIM4JAAAAAAAAzgkAAAAAAAABAAAAIM4JAAAAAAAAzgkAAAAAAAABAAAAIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAzgkAAAAAAADOCQAAAAAAAAAAAAAAAGxA"
				],
				[
					141,
					7,
					"right_delete",
					null,
					"BwAAACMKAAAAAAAAIwoAAAAAAAABAAAAICMKAAAAAAAAIwoAAAAAAAABAAAAICMKAAAAAAAAIwoAAAAAAAABAAAAICMKAAAAAAAAIwoAAAAAAAABAAAAICMKAAAAAAAAIwoAAAAAAAABAAAAICMKAAAAAAAAIwoAAAAAAAABAAAAICMKAAAAAAAAIwoAAAAAAAABAAAAIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIwoAAAAAAAAjCgAAAAAAAAAAAAAAAGxA"
				],
				[
					148,
					1,
					"",
					null,
					"AQAAAKcOAAAAAAAAvQ4AAAAAAAAWAAAAe051bWJlcn0gICAgICAgIHN0cmVhbQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApw4AAAAAAAC9DgAAAAAAAAAAAAAAAPC/"
				],
				[
					149,
					1,
					"",
					null,
					"AQAAAOgPAAAAAAAA/g8AAAAAAAAWAAAAe051bWJlcn0gICAgICAgIHN0cmVhbQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6A8AAAAAAAD+DwAAAAAAAAAAAAAAAPC/"
				],
				[
					150,
					1,
					"",
					null,
					"AQAAACsRAAAAAAAAQREAAAAAAAAWAAAAe051bWJlcn0gICAgICAgIHN0cmVhbQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKxEAAAAAAABBEQAAAAAAAAAAAAAAAPC/"
				],
				[
					151,
					1,
					"",
					null,
					"AQAAABUSAAAAAAAAKxIAAAAAAAAWAAAAe051bWJlcn0gICAgICAgIHN0cmVhbQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFRIAAAAAAAArEgAAAAAAAAAAAAAAAPC/"
				],
				[
					152,
					1,
					"",
					null,
					"AQAAAAUTAAAAAAAAGxMAAAAAAAAWAAAAe051bWJlcn0gICAgICAgIHN0cmVhbQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABRMAAAAAAAAbEwAAAAAAAAAAAAAAAPC/"
				],
				[
					153,
					1,
					"",
					null,
					"AQAAAAYUAAAAAAAAHBQAAAAAAAAWAAAAe051bWJlcn0gICAgICAgIHN0cmVhbQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABhQAAAAAAAAcFAAAAAAAAAAAAAAAAPC/"
				],
				[
					154,
					1,
					"",
					null,
					"AQAAAGQVAAAAAAAAehUAAAAAAAAWAAAAe051bWJlcn0gICAgICAgIHN0cmVhbQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZBUAAAAAAAB6FQAAAAAAAAAAAAAAAPC/"
				],
				[
					155,
					1,
					"",
					null,
					"AQAAAEoWAAAAAAAAYBYAAAAAAAAWAAAAe051bWJlcn0gICAgICAgIHN0cmVhbQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAShYAAAAAAABgFgAAAAAAAAAAAAAAAPC/"
				],
				[
					156,
					1,
					"",
					null,
					"AQAAALIXAAAAAAAAyBcAAAAAAAAWAAAAe051bWJlcn0gICAgICAgIHN0cmVhbQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAshcAAAAAAADIFwAAAAAAAAAAAAAAAPC/"
				],
				[
					157,
					1,
					"",
					null,
					"AQAAABwZAAAAAAAAMhkAAAAAAAAWAAAAe051bWJlcn0gICAgICAgIHN0cmVhbQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHBkAAAAAAAAyGQAAAAAAAAAAAAAAAPC/"
				],
				[
					158,
					1,
					"",
					null,
					"AQAAAEQCAAAAAAAAWgIAAAAAAAAWAAAAe051bWJlcn0gICAgICAgIHN0cmVhbQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARAIAAAAAAABaAgAAAAAAAAAAAAAAAPC/"
				],
				[
					159,
					1,
					"",
					null,
					"AQAAAOkLAAAAAAAA/wsAAAAAAAAWAAAAe051bWJlcn0gICAgICAgIHN0cmVhbQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6QsAAAAAAAD/CwAAAAAAAAAAAAAAAPC/"
				],
				[
					188,
					1,
					"",
					null,
					"AQAAADcMAAAAAAAAVwwAAAAAAAAgAAAAe051bWJlcn0gICAgICAgIG91dHB1dERyaXZlckluZm8",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANwwAAAAAAABXDAAAAAAAAAAAAAAAAPC/"
				],
				[
					205,
					1,
					"",
					null,
					"AQAAAG4WAAAAAAAAhxYAAAAAAAAWAAAAe051bWJlcn0gICAgICAgIGJ1ZmZlcg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbhYAAAAAAACEFgAAAAAAAAAAAAAAAPC/"
				],
				[
					215,
					1,
					"",
					null,
					"AQAAACoUAAAAAAAAQBQAAAAAAAAWAAAAe051bWJlcn0gICAgICAgIGJ1ZmZlcg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKhQAAAAAAABAFAAAAAAAAAAAAAAAAPC/"
				],
				[
					227,
					3,
					"left_delete",
					null,
					"AwAAAH8WAAAAAAAAfxYAAAAAAAABAAAAIH4WAAAAAAAAfhYAAAAAAAABAAAAIH0WAAAAAAAAfRYAAAAAAAABAAAAIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgBYAAAAAAACAFgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "/usr/include/portmidi.h",
			"settings":
			{
				"buffer_size": 28421,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "io-helpers.js",
			"redo_stack":
			[
				[
					35,
					1,
					"insert",
					{
						"characters": "er"
					},
					"AwAAAMALAAAAAAAAwAsAAAAAAAABAAAAcsALAAAAAAAAxQsAAAAAAAAAAAAAvwsAAAAAAAC/CwAAAAAAAAEAAABl",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwQsAAAAAAADBCwAAAAAAAAAAAAAAAPC/"
				]
			],
			"settings":
			{
				"buffer_size": 6606,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "os-helpers.js",
			"settings":
			{
				"buffer_size": 2665,
				"line_ending": "Unix"
			}
		},
		{
			"file": "quickjs/qjs-modules/quickjs-misc.c",
			"settings":
			{
				"buffer_size": 96111,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					335,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAEY2AAAAAAAASDYAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARjYAAAAAAABGNgAAAAAAAAAAAAAAAPC/"
				],
				[
					336,
					1,
					"insert",
					{
						"characters": "argv"
					},
					"BAAAAEc2AAAAAAAASDYAAAAAAAAAAAAASDYAAAAAAABJNgAAAAAAAAAAAABJNgAAAAAAAEo2AAAAAAAAAAAAAEo2AAAAAAAASzYAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARzYAAAAAAABHNgAAAAAAAAAAAAAAAPC/"
				],
				[
					337,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAEs2AAAAAAAATTYAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASzYAAAAAAABLNgAAAAAAAAAAAAAAAPC/"
				],
				[
					338,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAEw2AAAAAAAATTYAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATDYAAAAAAABMNgAAAAAAAAAAAAAAAPC/"
				],
				[
					346,
					1,
					"right_delete",
					null,
					"AQAAAB03AAAAAAAAHTcAAAAAAAAmAAAAfQoKZWxzZSBpZihKU19Jc051bWJlcihhcmd2WzBdKSkgewoKfQo",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHTcAAAAAAABDNwAAAAAAAAAAAAAAAAAA"
				],
				[
					347,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAB03AAAAAAAAHjcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHTcAAAAAAAAdNwAAAAAAAAAAAAAAAPC/"
				],
				[
					362,
					1,
					"revert",
					null,
					"",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3zYAAAAAAADfNgAAAAAAAAAAAAAAAAAA"
				],
				[
					366,
					1,
					"insert",
					{
						"characters": "block.,"
					},
					"BwAAAJk3AAAAAAAAmjcAAAAAAAAAAAAAmjcAAAAAAACbNwAAAAAAAAAAAACbNwAAAAAAAJw3AAAAAAAAAAAAAJw3AAAAAAAAnTcAAAAAAAAAAAAAnTcAAAAAAACeNwAAAAAAAAAAAACeNwAAAAAAAJ83AAAAAAAAAAAAAJ83AAAAAAAAoDcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmTcAAAAAAACZNwAAAAAAAAAAAAAAAPC/"
				],
				[
					367,
					2,
					"left_delete",
					null,
					"AgAAAJ83AAAAAAAAnzcAAAAAAAABAAAALJ43AAAAAAAAnjcAAAAAAAABAAAALg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAoDcAAAAAAACgNwAAAAAAAAAAAAAAAPC/"
				],
				[
					368,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAJ43AAAAAAAAnzcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnjcAAAAAAACeNwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "portaudio.js",
			"settings":
			{
				"buffer_size": 29378,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					668,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAGw1AAAAAAAAbTUAAAAAAAAAAAAAbTUAAAAAAABtNQAAAAAAABkAAAAgIC8qIHVuZGVmaW5lZCAwIHRydWUgKi8K",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbDUAAAAAAACFNQAAAAAAAAAAAAAAAPC/"
				],
				[
					765,
					1,
					"insert",
					{
						"characters": "\n\n\nexport"
					},
					"CQAAAG1vAAAAAAAAbm8AAAAAAAAAAAAAbm8AAAAAAABvbwAAAAAAAAAAAABvbwAAAAAAAHBvAAAAAAAAAAAAAHBvAAAAAAAAcW8AAAAAAAAAAAAAcW8AAAAAAABybwAAAAAAAAAAAABybwAAAAAAAHNvAAAAAAAAAAAAAHNvAAAAAAAAdG8AAAAAAAAAAAAAdG8AAAAAAAB1bwAAAAAAAAAAAAB1bwAAAAAAAHZvAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbW8AAAAAAABtbwAAAAAAAAAAAAAAAPC/"
				],
				[
					766,
					1,
					"insert",
					{
						"characters": " function"
					},
					"CQAAAHZvAAAAAAAAd28AAAAAAAAAAAAAd28AAAAAAAB4bwAAAAAAAAAAAAB4bwAAAAAAAHlvAAAAAAAAAAAAAHlvAAAAAAAAem8AAAAAAAAAAAAAem8AAAAAAAB7bwAAAAAAAAAAAAB7bwAAAAAAAHxvAAAAAAAAAAAAAHxvAAAAAAAAfW8AAAAAAAAAAAAAfW8AAAAAAAB+bwAAAAAAAAAAAAB+bwAAAAAAAH9vAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAdm8AAAAAAAB2bwAAAAAAAAAAAAAAAPC/"
				],
				[
					767,
					1,
					"insert",
					{
						"characters": " P"
					},
					"AgAAAH9vAAAAAAAAgG8AAAAAAAAAAAAAgG8AAAAAAACBbwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAf28AAAAAAAB/bwAAAAAAAAAAAAAAAPC/"
				],
				[
					768,
					1,
					"left_delete",
					null,
					"AQAAAIBvAAAAAAAAgG8AAAAAAAABAAAAUA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgW8AAAAAAACBbwAAAAAAAAAAAAAAAPC/"
				],
				[
					769,
					1,
					"insert",
					{
						"characters": "GetDevicxes"
					},
					"CwAAAIBvAAAAAAAAgW8AAAAAAAAAAAAAgW8AAAAAAACCbwAAAAAAAAAAAACCbwAAAAAAAINvAAAAAAAAAAAAAINvAAAAAAAAhG8AAAAAAAAAAAAAhG8AAAAAAACFbwAAAAAAAAAAAACFbwAAAAAAAIZvAAAAAAAAAAAAAIZvAAAAAAAAh28AAAAAAAAAAAAAh28AAAAAAACIbwAAAAAAAAAAAACIbwAAAAAAAIlvAAAAAAAAAAAAAIlvAAAAAAAAim8AAAAAAAAAAAAAim8AAAAAAACLbwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgG8AAAAAAACAbwAAAAAAAAAAAAAAAPC/"
				],
				[
					770,
					3,
					"left_delete",
					null,
					"AwAAAIpvAAAAAAAAim8AAAAAAAABAAAAc4lvAAAAAAAAiW8AAAAAAAABAAAAZYhvAAAAAAAAiG8AAAAAAAABAAAAeA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAi28AAAAAAACLbwAAAAAAAAAAAAAAAPC/"
				],
				[
					771,
					1,
					"insert",
					{
						"characters": "es"
					},
					"AgAAAIhvAAAAAAAAiW8AAAAAAAAAAAAAiW8AAAAAAACKbwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAiG8AAAAAAACIbwAAAAAAAAAAAAAAAPC/"
				],
				[
					772,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAIpvAAAAAAAAjG8AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAim8AAAAAAACKbwAAAAAAAAAAAAAAAPC/"
				],
				[
					774,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIxvAAAAAAAAjW8AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjG8AAAAAAACMbwAAAAAAAAAAAAAAAPC/"
				],
				[
					775,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAI1vAAAAAAAAj28AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjW8AAAAAAACNbwAAAAAAAAAAAAAAAPC/"
				],
				[
					776,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAAI5vAAAAAAAAj28AAAAAAAAAAAAAj28AAAAAAACQbwAAAAAAAAAAAACPbwAAAAAAAJFvAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjm8AAAAAAACObwAAAAAAAAAAAAAAAPC/"
				],
				[
					778,
					1,
					"",
					null,
					"AQAAAJFvAAAAAAAA8W8AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAkW8AAAAAAACRbwAAAAAAAAAAAAAAAPC/"
				],
				[
					780,
					1,
					"insert",
					{
						"characters": "return"
					},
					"BgAAAI9vAAAAAAAAkG8AAAAAAAAAAAAAkG8AAAAAAACRbwAAAAAAAAAAAACRbwAAAAAAAJJvAAAAAAAAAAAAAJJvAAAAAAAAk28AAAAAAAAAAAAAk28AAAAAAACUbwAAAAAAAAAAAACUbwAAAAAAAJVvAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAj28AAAAAAACPbwAAAAAAAAAAAAAAAAAA"
				],
				[
					781,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJVvAAAAAAAAlm8AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAlW8AAAAAAACVbwAAAAAAAAAAAAAAAPC/"
				],
				[
					786,
					2,
					"right_delete",
					null,
					"AgAAAKxvAAAAAAAArG8AAAAAAAAJAAAAcG9ydGF1ZGlvrG8AAAAAAACsbwAAAAAAAAEAAAAu",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAArG8AAAAAAAC1bwAAAAAAAAAAAAAAAPC/"
				],
				[
					791,
					2,
					"right_delete",
					null,
					"AgAAAM9vAAAAAAAAz28AAAAAAAAJAAAAcG9ydGF1ZGlvz28AAAAAAADPbwAAAAAAAAEAAAAu",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAz28AAAAAAADYbwAAAAAAAAAAAAAAAPC/"
				],
				[
					794,
					1,
					"left_delete",
					null,
					"AQAAAONvAAAAAAAA428AAAAAAAABAAAACg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5G8AAAAAAADkbwAAAAAAAAAAAAAAAPC/"
				],
				[
					797,
					1,
					"left_delete",
					null,
					"AQAAAG1vAAAAAAAAbW8AAAAAAAABAAAACg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbm8AAAAAAABubwAAAAAAAAAAAAAAAPC/"
				],
				[
					798,
					1,
					"ensure_newline_at_eof",
					null,
					"AQAAAORvAAAAAAAA5W8AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbW8AAAAAAABtbwAAAAAAAAAAAAAAAPC/"
				],
				[
					800,
					1,
					"revert",
					null,
					"",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbW8AAAAAAABtbwAAAAAAAAAAAAAAAPC/"
				],
				[
					803,
					1,
					"insert",
					{
						"characters": "P√®a"
					},
					"AwAAAH1vAAAAAAAAfm8AAAAAAAAAAAAAfm8AAAAAAAB/bwAAAAAAAAAAAAB/bwAAAAAAAIBvAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAfW8AAAAAAAB9bwAAAAAAAAAAAAAAAPC/"
				],
				[
					804,
					2,
					"left_delete",
					null,
					"AgAAAH9vAAAAAAAAf28AAAAAAAABAAAAYX5vAAAAAAAAfm8AAAAAAAACAAAAw6g",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgG8AAAAAAACAbwAAAAAAAAAAAAAAAPC/"
				],
				[
					805,
					1,
					"insert",
					{
						"characters": "a_"
					},
					"AgAAAH5vAAAAAAAAf28AAAAAAAAAAAAAf28AAAAAAACAbwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAfm8AAAAAAAB+bwAAAAAAAAAAAAAAAPC/"
				],
				[
					847,
					1,
					"insert",
					{
						"characters": "long"
					},
					"BQAAAPZsAAAAAAAA92wAAAAAAAAAAAAA92wAAAAAAAD3bAAAAAAAAAkAAAB1bmRlZmluZWT3bAAAAAAAAPhsAAAAAAAAAAAAAPhsAAAAAAAA+WwAAAAAAAAAAAAA+WwAAAAAAAD6bAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9mwAAAAAAAD/bAAAAAAAAAAAAAAAAPC/"
				],
				[
					1081,
					1,
					"insert",
					{
						"characters": "NM"
					},
					"AgAAAFU0AAAAAAAAVjQAAAAAAAAAAAAAVjQAAAAAAABXNAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVTQAAAAAAABVNAAAAAAAAAAAAAAAAPC/"
				],
				[
					1082,
					2,
					"left_delete",
					null,
					"AgAAAFY0AAAAAAAAVjQAAAAAAAABAAAATVU0AAAAAAAAVTQAAAAAAAABAAAATg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVzQAAAAAAABXNAAAAAAAAAAAAAAAAPC/"
				],
				[
					1083,
					1,
					"insert",
					{
						"characters": "Mi,ber"
					},
					"BgAAAFU0AAAAAAAAVjQAAAAAAAAAAAAAVjQAAAAAAABXNAAAAAAAAAAAAABXNAAAAAAAAFg0AAAAAAAAAAAAAFg0AAAAAAAAWTQAAAAAAAAAAAAAWTQAAAAAAABaNAAAAAAAAAAAAABaNAAAAAAAAFs0AAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVTQAAAAAAABVNAAAAAAAAAAAAAAAAPC/"
				],
				[
					1084,
					6,
					"left_delete",
					null,
					"BgAAAFo0AAAAAAAAWjQAAAAAAAABAAAAclk0AAAAAAAAWTQAAAAAAAABAAAAZVg0AAAAAAAAWDQAAAAAAAABAAAAYlc0AAAAAAAAVzQAAAAAAAABAAAALFY0AAAAAAAAVjQAAAAAAAABAAAAaVU0AAAAAAAAVTQAAAAAAAABAAAATQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWzQAAAAAAABbNAAAAAAAAAAAAAAAAPC/"
				],
				[
					1085,
					1,
					"insert",
					{
						"characters": "Number("
					},
					"BwAAAFU0AAAAAAAAVjQAAAAAAAAAAAAAVjQAAAAAAABXNAAAAAAAAAAAAABXNAAAAAAAAFg0AAAAAAAAAAAAAFg0AAAAAAAAWTQAAAAAAAAAAAAAWTQAAAAAAABaNAAAAAAAAAAAAABaNAAAAAAAAFs0AAAAAAAAAAAAAFs0AAAAAAAAXDQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVTQAAAAAAABVNAAAAAAAAAAAAAAAAPC/"
				],
				[
					1088,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAHk0AAAAAAAAejQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAeTQAAAAAAAB5NAAAAAAAAAAAAAAAAPC/"
				],
				[
					1089,
					1,
					"left_delete",
					null,
					"AQAAAHk0AAAAAAAAeTQAAAAAAAABAAAAPQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAejQAAAAAAAB6NAAAAAAAAAAAAAAAAPC/"
				],
				[
					1090,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAHk0AAAAAAAAejQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAeTQAAAAAAAB5NAAAAAAAAAAAAAAAAPC/"
				],
				[
					1134,
					1,
					"insert",
					{
						"characters": "J"
					},
					"AQAAAPsfAAAAAAAA/B8AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+x8AAAAAAAD7HwAAAAAAAAAAAAAAAPC/"
				],
				[
					1135,
					1,
					"left_delete",
					null,
					"AQAAAPsfAAAAAAAA+x8AAAAAAAABAAAASg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/B8AAAAAAAD8HwAAAAAAAAAAAAAAAPC/"
				],
				[
					1136,
					1,
					"insert",
					{
						"characters": "Number("
					},
					"BwAAAPsfAAAAAAAA/B8AAAAAAAAAAAAA/B8AAAAAAAD9HwAAAAAAAAAAAAD9HwAAAAAAAP4fAAAAAAAAAAAAAP4fAAAAAAAA/x8AAAAAAAAAAAAA/x8AAAAAAAAAIAAAAAAAAAAAAAAAIAAAAAAAAAEgAAAAAAAAAAAAAAEgAAAAAAAAAiAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+x8AAAAAAAD7HwAAAAAAAAAAAAAAAPC/"
				],
				[
					1139,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAB8gAAAAAAAAICAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHyAAAAAAAAAfIAAAAAAAAAAAAAAAAPC/"
				],
				[
					1157,
					1,
					"left_delete",
					null,
					"AQAAACUZAAAAAAAAJRkAAAAAAAABAAAACg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJhkAAAAAAAAmGQAAAAAAAAAAAAAAAPC/"
				],
				[
					1171,
					1,
					"insert",
					{
						"characters": "          "
					},
					"CgAAACNDAAAAAAAAJEMAAAAAAAAAAAAAJEMAAAAAAAAlQwAAAAAAAAAAAAAlQwAAAAAAACZDAAAAAAAAAAAAACZDAAAAAAAAJ0MAAAAAAAAAAAAAJ0MAAAAAAAAoQwAAAAAAAAAAAAAoQwAAAAAAAClDAAAAAAAAAAAAAClDAAAAAAAAKkMAAAAAAAAAAAAAKkMAAAAAAAArQwAAAAAAAAAAAAArQwAAAAAAACxDAAAAAAAAAAAAACxDAAAAAAAALUMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAI0MAAAAAAAAjQwAAAAAAAAAAAAAAAPC/"
				],
				[
					1172,
					1,
					"paste",
					null,
					"AQAAAC1DAAAAAAAANEMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALUMAAAAAAAAtQwAAAAAAAAAAAAAAAPC/"
				],
				[
					1178,
					1,
					"paste",
					null,
					"AQAAAABEAAAAAAAAEUQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAEQAAAAAAAAARAAAAAAAAAAAAAAAAPC/"
				],
				[
					1189,
					1,
					"insert",
					{
						"characters": "         Number"
					},
					"DwAAAN9EAAAAAAAA4EQAAAAAAAAAAAAA4EQAAAAAAADhRAAAAAAAAAAAAADhRAAAAAAAAOJEAAAAAAAAAAAAAOJEAAAAAAAA40QAAAAAAAAAAAAA40QAAAAAAADkRAAAAAAAAAAAAADkRAAAAAAAAOVEAAAAAAAAAAAAAOVEAAAAAAAA5kQAAAAAAAAAAAAA5kQAAAAAAADnRAAAAAAAAAAAAADnRAAAAAAAAOhEAAAAAAAAAAAAAOhEAAAAAAAA6UQAAAAAAAAAAAAA6UQAAAAAAADqRAAAAAAAAAAAAADqRAAAAAAAAOtEAAAAAAAAAAAAAOtEAAAAAAAA7EQAAAAAAAAAAAAA7EQAAAAAAADtRAAAAAAAAAAAAADtRAAAAAAAAO5EAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA30QAAAAAAADfRAAAAAAAAAAAAAAAAPC/"
				],
				[
					1190,
					1,
					"insert",
					{
						"characters": " of"
					},
					"AwAAAO5EAAAAAAAA70QAAAAAAAAAAAAA70QAAAAAAADwRAAAAAAAAAAAAADwRAAAAAAAAPFEAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA7kQAAAAAAADuRAAAAAAAAAAAAAAAAPC/"
				],
				[
					1191,
					1,
					"insert",
					{
						"characters": " host"
					},
					"BQAAAPFEAAAAAAAA8kQAAAAAAAAAAAAA8kQAAAAAAADzRAAAAAAAAAAAAADzRAAAAAAAAPREAAAAAAAAAAAAAPREAAAAAAAA9UQAAAAAAAAAAAAA9UQAAAAAAAD2RAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA8UQAAAAAAADxRAAAAAAAAAAAAAAAAPC/"
				],
				[
					1192,
					1,
					"insert",
					{
						"characters": " APIs"
					},
					"BQAAAPZEAAAAAAAA90QAAAAAAAAAAAAA90QAAAAAAAD4RAAAAAAAAAAAAAD4RAAAAAAAAPlEAAAAAAAAAAAAAPlEAAAAAAAA+kQAAAAAAAAAAAAA+kQAAAAAAAD7RAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9kQAAAAAAAD2RAAAAAAAAAAAAAAAAPC/"
				],
				[
					1197,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACRCAAAAAAAAJUIAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJEIAAAAAAAAkQgAAAAAAAAAAAAAAAPC/"
				],
				[
					1209,
					1,
					"insert",
					{
						"characters": "       t"
					},
					"CAAAACVCAAAAAAAAJkIAAAAAAAAAAAAAJkIAAAAAAAAnQgAAAAAAAAAAAAAnQgAAAAAAAChCAAAAAAAAAAAAAChCAAAAAAAAKUIAAAAAAAAAAAAAKUIAAAAAAAAqQgAAAAAAAAAAAAAqQgAAAAAAACtCAAAAAAAAAAAAACtCAAAAAAAALEIAAAAAAAAAAAAALEIAAAAAAAAtQgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJUIAAAAAAAAlQgAAAAAAAAAAAAAAAPC/"
				],
				[
					1210,
					1,
					"left_delete",
					null,
					"AQAAACxCAAAAAAAALEIAAAAAAAABAAAAdA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALUIAAAAAAAAtQgAAAAAAAAAAAAAAAPC/"
				],
				[
					1211,
					1,
					"insert",
					{
						"characters": "The"
					},
					"AwAAACxCAAAAAAAALUIAAAAAAAAAAAAALUIAAAAAAAAuQgAAAAAAAAAAAAAuQgAAAAAAAC9CAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALEIAAAAAAAAsQgAAAAAAAAAAAAAAAPC/"
				],
				[
					1212,
					1,
					"insert",
					{
						"characters": " error"
					},
					"BgAAAC9CAAAAAAAAMEIAAAAAAAAAAAAAMEIAAAAAAAAxQgAAAAAAAAAAAAAxQgAAAAAAADJCAAAAAAAAAAAAADJCAAAAAAAAM0IAAAAAAAAAAAAAM0IAAAAAAAA0QgAAAAAAAAAAAAA0QgAAAAAAADVCAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAL0IAAAAAAAAvQgAAAAAAAAAAAAAAAPC/"
				],
				[
					1213,
					1,
					"insert",
					{
						"characters": " text"
					},
					"BQAAADVCAAAAAAAANkIAAAAAAAAAAAAANkIAAAAAAAA3QgAAAAAAAAAAAAA3QgAAAAAAADhCAAAAAAAAAAAAADhCAAAAAAAAOUIAAAAAAAAAAAAAOUIAAAAAAAA6QgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANUIAAAAAAAA1QgAAAAAAAAAAAAAAAPC/"
				],
				[
					1229,
					1,
					"insert",
					{
						"characters": "          "
					},
					"CgAAAPlFAAAAAAAA+kUAAAAAAAAAAAAA+kUAAAAAAAD7RQAAAAAAAAAAAAD7RQAAAAAAAPxFAAAAAAAAAAAAAPxFAAAAAAAA/UUAAAAAAAAAAAAA/UUAAAAAAAD+RQAAAAAAAAAAAAD+RQAAAAAAAP9FAAAAAAAAAAAAAP9FAAAAAAAAAEYAAAAAAAAAAAAAAEYAAAAAAAABRgAAAAAAAAAAAAABRgAAAAAAAAJGAAAAAAAAAAAAAAJGAAAAAAAAA0YAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+UUAAAAAAAD5RQAAAAAAAAAAAAAAAPC/"
				],
				[
					1230,
					1,
					"left_delete",
					null,
					"AQAAAAJGAAAAAAAAAkYAAAAAAAABAAAAIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAA0YAAAAAAAADRgAAAAAAAAAAAAAAAPC/"
				],
				[
					1231,
					1,
					"insert",
					{
						"characters": "I"
					},
					"AQAAAAJGAAAAAAAAA0YAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAkYAAAAAAAACRgAAAAAAAAAAAAAAAPC/"
				],
				[
					1232,
					1,
					"left_delete",
					null,
					"AQAAAAJGAAAAAAAAAkYAAAAAAAABAAAASQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAA0YAAAAAAAADRgAAAAAAAAAAAAAAAPC/"
				],
				[
					1233,
					1,
					"insert",
					{
						"characters": "Index"
					},
					"BQAAAAJGAAAAAAAAA0YAAAAAAAAAAAAAA0YAAAAAAAAERgAAAAAAAAAAAAAERgAAAAAAAAVGAAAAAAAAAAAAAAVGAAAAAAAABkYAAAAAAAAAAAAABkYAAAAAAAAHRgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAkYAAAAAAAACRgAAAAAAAAAAAAAAAPC/"
				],
				[
					1234,
					1,
					"insert",
					{
						"characters": " of"
					},
					"AwAAAAdGAAAAAAAACEYAAAAAAAAAAAAACEYAAAAAAAAJRgAAAAAAAAAAAAAJRgAAAAAAAApGAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAB0YAAAAAAAAHRgAAAAAAAAAAAAAAAPC/"
				],
				[
					1235,
					1,
					"insert",
					{
						"characters": " the"
					},
					"BAAAAApGAAAAAAAAC0YAAAAAAAAAAAAAC0YAAAAAAAAMRgAAAAAAAAAAAAAMRgAAAAAAAA1GAAAAAAAAAAAAAA1GAAAAAAAADkYAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAACkYAAAAAAAAKRgAAAAAAAAAAAAAAAPC/"
				],
				[
					1236,
					1,
					"insert",
					{
						"characters": " default"
					},
					"CAAAAA5GAAAAAAAAD0YAAAAAAAAAAAAAD0YAAAAAAAAQRgAAAAAAAAAAAAAQRgAAAAAAABFGAAAAAAAAAAAAABFGAAAAAAAAEkYAAAAAAAAAAAAAEkYAAAAAAAATRgAAAAAAAAAAAAATRgAAAAAAABRGAAAAAAAAAAAAABRGAAAAAAAAFUYAAAAAAAAAAAAAFUYAAAAAAAAWRgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADkYAAAAAAAAORgAAAAAAAAAAAAAAAPC/"
				],
				[
					1237,
					1,
					"insert",
					{
						"characters": " ho9st"
					},
					"BgAAABZGAAAAAAAAF0YAAAAAAAAAAAAAF0YAAAAAAAAYRgAAAAAAAAAAAAAYRgAAAAAAABlGAAAAAAAAAAAAABlGAAAAAAAAGkYAAAAAAAAAAAAAGkYAAAAAAAAbRgAAAAAAAAAAAAAbRgAAAAAAABxGAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFkYAAAAAAAAWRgAAAAAAAAAAAAAAAPC/"
				],
				[
					1238,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABxGAAAAAAAAHUYAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHEYAAAAAAAAcRgAAAAAAAAAAAAAAAPC/"
				],
				[
					1239,
					4,
					"left_delete",
					null,
					"BAAAABxGAAAAAAAAHEYAAAAAAAABAAAAIBtGAAAAAAAAG0YAAAAAAAABAAAAdBpGAAAAAAAAGkYAAAAAAAABAAAAcxlGAAAAAAAAGUYAAAAAAAABAAAAOQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHUYAAAAAAAAdRgAAAAAAAAAAAAAAAPC/"
				],
				[
					1240,
					1,
					"insert",
					{
						"characters": "st"
					},
					"AgAAABlGAAAAAAAAGkYAAAAAAAAAAAAAGkYAAAAAAAAbRgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGUYAAAAAAAAZRgAAAAAAAAAAAAAAAPC/"
				],
				[
					1241,
					1,
					"insert",
					{
						"characters": " API"
					},
					"BAAAABtGAAAAAAAAHEYAAAAAAAAAAAAAHEYAAAAAAAAdRgAAAAAAAAAAAAAdRgAAAAAAAB5GAAAAAAAAAAAAAB5GAAAAAAAAH0YAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAG0YAAAAAAAAbRgAAAAAAAAAAAAAAAPC/"
				],
				[
					1256,
					1,
					"insert",
					{
						"characters": "object|N"
					},
					"CQAAAC1HAAAAAAAALkcAAAAAAAAAAAAALkcAAAAAAAAuRwAAAAAAAAYAAABOdW1iZXIuRwAAAAAAAC9HAAAAAAAAAAAAAC9HAAAAAAAAMEcAAAAAAAAAAAAAMEcAAAAAAAAxRwAAAAAAAAAAAAAxRwAAAAAAADJHAAAAAAAAAAAAADJHAAAAAAAAM0cAAAAAAAAAAAAAM0cAAAAAAAA0RwAAAAAAAAAAAAA0RwAAAAAAADVHAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALUcAAAAAAAAzRwAAAAAAAAAAAAAAAPC/"
				],
				[
					1257,
					1,
					"left_delete",
					null,
					"AQAAADRHAAAAAAAANEcAAAAAAAABAAAATg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANUcAAAAAAAA1RwAAAAAAAAAAAAAAAPC/"
				],
				[
					1258,
					1,
					"insert",
					{
						"characters": "n7ul"
					},
					"BAAAADRHAAAAAAAANUcAAAAAAAAAAAAANUcAAAAAAAA2RwAAAAAAAAAAAAA2RwAAAAAAADdHAAAAAAAAAAAAADdHAAAAAAAAOEcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANEcAAAAAAAA0RwAAAAAAAAAAAAAAAPC/"
				],
				[
					1259,
					3,
					"left_delete",
					null,
					"AwAAADdHAAAAAAAAN0cAAAAAAAABAAAAbDZHAAAAAAAANkcAAAAAAAABAAAAdTVHAAAAAAAANUcAAAAAAAABAAAANw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOEcAAAAAAAA4RwAAAAAAAAAAAAAAAPC/"
				],
				[
					1260,
					1,
					"insert",
					{
						"characters": "ull"
					},
					"AwAAADVHAAAAAAAANkcAAAAAAAAAAAAANkcAAAAAAAA3RwAAAAAAAAAAAAA3RwAAAAAAADhHAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANUcAAAAAAAA1RwAAAAAAAAAAAAAAAPC/"
				],
				[
					1262,
					1,
					"insert",
					{
						"characters": "   "
					},
					"AwAAADlHAAAAAAAAOkcAAAAAAAAAAAAAOkcAAAAAAAA7RwAAAAAAAAAAAAA7RwAAAAAAADxHAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOUcAAAAAAAA5RwAAAAAAAP///////+9/"
				],
				[
					1269,
					1,
					"left_delete",
					null,
					"AQAAAC1HAAAAAAAALUcAAAAAAAAGAAAAb2JqZWN0",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALUcAAAAAAAAzRwAAAAAAAAAAAAAAAPC/"
				],
				[
					1277,
					1,
					"paste",
					null,
					"AQAAAC1HAAAAAAAAOkcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALUcAAAAAAAAtRwAAAAAAAAAAAAAAAPC/"
				],
				[
					1302,
					1,
					"insert",
					{
						"characters": "         "
					},
					"CQAAAK1IAAAAAAAArkgAAAAAAAAAAAAArkgAAAAAAACvSAAAAAAAAAAAAACvSAAAAAAAALBIAAAAAAAAAAAAALBIAAAAAAAAsUgAAAAAAAAAAAAAsUgAAAAAAACySAAAAAAAAAAAAACySAAAAAAAALNIAAAAAAAAAAAAALNIAAAAAAAAtEgAAAAAAAAAAAAAtEgAAAAAAAC1SAAAAAAAAAAAAAC1SAAAAAAAALZIAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAArUgAAAAAAACtSAAAAAAAAAAAAAAAAPC/"
				],
				[
					1307,
					1,
					"insert",
					{
						"characters": "J"
					},
					"AQAAALZIAAAAAAAAt0gAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtkgAAAAAAAC2SAAAAAAAAAAAAAAAAG5A"
				],
				[
					1308,
					1,
					"left_delete",
					null,
					"AQAAALZIAAAAAAAAtkgAAAAAAAABAAAASg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAt0gAAAAAAAC3SAAAAAAAAAAAAAAAAPC/"
				],
				[
					1309,
					1,
					"insert",
					{
						"characters": "Host"
					},
					"BAAAALZIAAAAAAAAt0gAAAAAAAAAAAAAt0gAAAAAAAC4SAAAAAAAAAAAAAC4SAAAAAAAALlIAAAAAAAAAAAAALlIAAAAAAAAukgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtkgAAAAAAAC2SAAAAAAAAAAAAAAAAPC/"
				],
				[
					1310,
					1,
					"insert",
					{
						"characters": " api"
					},
					"BAAAALpIAAAAAAAAu0gAAAAAAAAAAAAAu0gAAAAAAAC8SAAAAAAAAAAAAAC8SAAAAAAAAL1IAAAAAAAAAAAAAL1IAAAAAAAAvkgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAukgAAAAAAAC6SAAAAAAAAAAAAAAAAPC/"
				],
				[
					1311,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAL5IAAAAAAAAv0gAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvkgAAAAAAAC+SAAAAAAAAAAAAAAAAPC/"
				],
				[
					1312,
					4,
					"left_delete",
					null,
					"BAAAAL5IAAAAAAAAvkgAAAAAAAABAAAAIL1IAAAAAAAAvUgAAAAAAAABAAAAabxIAAAAAAAAvEgAAAAAAAABAAAAcLtIAAAAAAAAu0gAAAAAAAABAAAAYQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAv0gAAAAAAAC/SAAAAAAAAAAAAAAAAPC/"
				],
				[
					1313,
					1,
					"insert",
					{
						"characters": "API"
					},
					"AwAAALtIAAAAAAAAvEgAAAAAAAAAAAAAvEgAAAAAAAC9SAAAAAAAAAAAAAC9SAAAAAAAAL5IAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAu0gAAAAAAAC7SAAAAAAAAAAAAAAAAPC/"
				],
				[
					1314,
					1,
					"insert",
					{
						"characters": " ijn"
					},
					"BAAAAL5IAAAAAAAAv0gAAAAAAAAAAAAAv0gAAAAAAADASAAAAAAAAAAAAADASAAAAAAAAMFIAAAAAAAAAAAAAMFIAAAAAAAAwkgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvkgAAAAAAAC+SAAAAAAAAAAAAAAAAPC/"
				],
				[
					1315,
					3,
					"left_delete",
					null,
					"AwAAAMFIAAAAAAAAwUgAAAAAAAABAAAAbsBIAAAAAAAAwEgAAAAAAAABAAAAar9IAAAAAAAAv0gAAAAAAAABAAAAaQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwkgAAAAAAADCSAAAAAAAAAAAAAAAAPC/"
				],
				[
					1316,
					1,
					"insert",
					{
						"characters": "uin"
					},
					"AwAAAL9IAAAAAAAAwEgAAAAAAAAAAAAAwEgAAAAAAADBSAAAAAAAAAAAAADBSAAAAAAAAMJIAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAv0gAAAAAAAC/SAAAAAAAAAAAAAAAAPC/"
				],
				[
					1317,
					3,
					"left_delete",
					null,
					"AwAAAMFIAAAAAAAAwUgAAAAAAAABAAAAbsBIAAAAAAAAwEgAAAAAAAABAAAAab9IAAAAAAAAv0gAAAAAAAABAAAAdQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwkgAAAAAAADCSAAAAAAAAAAAAAAAAPC/"
				],
				[
					1318,
					1,
					"insert",
					{
						"characters": " i"
					},
					"AgAAAL9IAAAAAAAAwEgAAAAAAAAAAAAAwEgAAAAAAADBSAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAv0gAAAAAAAC/SAAAAAAAAAAAAAAAAPC/"
				],
				[
					1319,
					2,
					"left_delete",
					null,
					"AgAAAMBIAAAAAAAAwEgAAAAAAAABAAAAab9IAAAAAAAAv0gAAAAAAAABAAAAIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwUgAAAAAAADBSAAAAAAAAAAAAAAAAPC/"
				],
				[
					1320,
					1,
					"insert",
					{
						"characters": "index"
					},
					"BQAAAL9IAAAAAAAAwEgAAAAAAAAAAAAAwEgAAAAAAADBSAAAAAAAAAAAAADBSAAAAAAAAMJIAAAAAAAAAAAAAMJIAAAAAAAAw0gAAAAAAAAAAAAAw0gAAAAAAADESAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAv0gAAAAAAAC/SAAAAAAAAAAAAAAAAPC/"
				],
				[
					1339,
					1,
					"insert",
					{
						"characters": "        "
					},
					"CAAAAFNKAAAAAAAAVEoAAAAAAAAAAAAAVEoAAAAAAABVSgAAAAAAAAAAAABVSgAAAAAAAFZKAAAAAAAAAAAAAFZKAAAAAAAAV0oAAAAAAAAAAAAAV0oAAAAAAABYSgAAAAAAAAAAAABYSgAAAAAAAFlKAAAAAAAAAAAAAFlKAAAAAAAAWkoAAAAAAAAAAAAAWkoAAAAAAABbSgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAU0oAAAAAAABTSgAAAAAAAAAAAAAAAPC/"
				],
				[
					1340,
					1,
					"paste",
					null,
					"AQAAAFtKAAAAAAAAckoAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAW0oAAAAAAABbSgAAAAAAAAAAAAAAAPC/"
				],
				[
					1345,
					1,
					"paste",
					null,
					"AgAAAChKAAAAAAAAR0oAAAAAAAAAAAAAR0oAAAAAAABHSgAAAAAAABIAAABob3N0QXBpRGV2aWNlSW5kZXg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKEoAAAAAAAA6SgAAAAAAAAAAAAAAAPC/"
				],
				[
					1359,
					1,
					"paste",
					null,
					"AgAAAANKAAAAAAAAEUoAAAAAAAAAAAAAEUoAAAAAAAARSgAAAAAAAAcAAABob3N0QXBp",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAA0oAAAAAAAAKSgAAAAAAAAAAAAAAAPC/"
				],
				[
					1389,
					1,
					"paste",
					null,
					"AgAAAG9KAAAAAAAAIUsAAAAAAAAAAAAAIUsAAAAAAAAhSwAAAAAAABcAAABQb3J0QXVkaW8gZGV2aWNlIGluZGV4Lg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAb0oAAAAAAACGSgAAAAAAAAAAAAAAAPC/"
				],
				[
					1394,
					1,
					"paste",
					null,
					"AgAAALVIAAAAAAAAYkkAAAAAAAAAAAAAYkkAAAAAAABiSQAAAAAAAA8AAAAgSG9zdCBBUEkgaW5kZXg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtUgAAAAAAADESAAAAAAAAAAAAAAAAPC/"
				],
				[
					1403,
					2,
					"join_lines",
					null,
					"AgAAAPpIAAAAAAAA+0gAAAAAAAACAAAACiBESQAAAAAAAEVJAAAAAAAAAgAAAAog",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmEgAAAAAAACYSAAAAAAAAAAAAAAAAPC/"
				],
				[
					1407,
					2,
					"join_lines",
					null,
					"AgAAAFFLAAAAAAAAUksAAAAAAAACAAAACiCfSwAAAAAAAKBLAAAAAAAAAgAAAAog",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA7koAAAAAAADuSgAAAAAAAAAAAAAAAAAA"
				],
				[
					1421,
					1,
					"insert",
					{
						"characters": "     "
					},
					"BQAAAJRIAAAAAAAAlUgAAAAAAAAAAAAAlUgAAAAAAACWSAAAAAAAAAAAAACWSAAAAAAAAJdIAAAAAAAAAAAAAJdIAAAAAAAAmEgAAAAAAAAAAAAAmEgAAAAAAACZSAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAlEgAAAAAAACUSAAAAAAAAAAAAAAAAPC/"
				],
				[
					1422,
					1,
					"paste",
					null,
					"AQAAAJlIAAAAAAAA5UgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmUgAAAAAAACZSAAAAAAAAAAAAAAAAPC/"
				],
				[
					1436,
					1,
					"paste",
					null,
					"AQAAAO1KAAAAAAAA9EoAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA7UoAAAAAAADtSgAAAAAAAAAAAAAAAPC/"
				],
				[
					1446,
					1,
					"paste",
					null,
					"AQAAACBLAAAAAAAAMksAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIEsAAAAAAAAgSwAAAAAAAAAAAAAAAPC/"
				],
				[
					1451,
					1,
					"insert",
					{
						"characters": "           "
					},
					"CwAAAPZKAAAAAAAA90oAAAAAAAAAAAAA90oAAAAAAAD4SgAAAAAAAAAAAAD4SgAAAAAAAPlKAAAAAAAAAAAAAPlKAAAAAAAA+koAAAAAAAAAAAAA+koAAAAAAAD7SgAAAAAAAAAAAAD7SgAAAAAAAPxKAAAAAAAAAAAAAPxKAAAAAAAA/UoAAAAAAAAAAAAA/UoAAAAAAAD+SgAAAAAAAAAAAAD+SgAAAAAAAP9KAAAAAAAAAAAAAP9KAAAAAAAAAEsAAAAAAAAAAAAAAEsAAAAAAAABSwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9koAAAAAAAD2SgAAAAAAAAAAAAAAAPC/"
				],
				[
					1464,
					1,
					"paste",
					null,
					"AgAAABRHAAAAAAAAVUcAAAAAAAAAAAAAVUcAAAAAAABVRwAAAAAAAAcAAABob3N0QXBp",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFEcAAAAAAAAbRwAAAAAAAAAAAAAAAPC/"
				],
				[
					1471,
					1,
					"paste",
					null,
					"AQAAAH1HAAAAAAAAMEgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAfUcAAAAAAAB9RwAAAAAAAAAAAAAAAPC/"
				],
				[
					1475,
					2,
					"join_lines",
					null,
					"AgAAALlHAAAAAAAAukcAAAAAAAACAAAACiADSAAAAAAAAARIAAAAAAAAAgAAAAog",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXEcAAAAAAABcRwAAAAAAAAAAAAAAADhA"
				],
				[
					1520,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAABYYAAAAAAAAFxgAAAAAAAAAAAAAFxgAAAAAAAAXGAAAAAAAABwAAAAgIC8qIDg6IGNvbnN0IGNoYXIqIG5hbWUgKi8K",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFhgAAAAAAAAyGAAAAAAAAAAAAAAAAPC/"
				],
				[
					1525,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAM0YAAAAAAAAzxgAAAAAAAAAAAAAGRgAAAAAAAAbGAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAzRgAAAAAAAAZGAAAAAAAAAAAAAAAADhA"
				],
				[
					1536,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAA8gAAAAAAAAECAAAAAAAAAAAAAAECAAAAAAAAAQIAAAAAAAACIAAAAgIC8qIDE2OiBjb25zdCBjaGFyKiBlcnJvclRleHQgKi8K",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADyAAAAAAAAAxIAAAAAAAAAAAAAAAAPC/"
				],
				[
					1540,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAMwgAAAAAAAAziAAAAAAAAAAAAAAEiAAAAAAAAAUIAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEiAAAAAAAADMIAAAAAAAAAAAAAAAAPC/"
				],
				[
					1549,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAACsmAAAAAAAALCYAAAAAAAAAAAAALCYAAAAAAAAsJgAAAAAAABwAAAAgIC8qIDg6IGNvbnN0IGNoYXIqIG5hbWUgKi8K",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKyYAAAAAAABHJgAAAAAAAAAAAAAAAPC/"
				],
				[
					1552,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAOImAAAAAAAA5CYAAAAAAAAAAAAALiYAAAAAAAAwJgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALiYAAAAAAADiJgAAAAAAAAAAAAAAAPC/"
				],
				[
					1574,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAN0RAAAAAAAA3hEAAAAAAAAAAAAA3hEAAAAAAADeEQAAAAAAACQAAAAgIC8qIDI0OiBjb25zdCBjaGFyKiB2ZXJzaW9uVGV4dCAqLwo",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3REAAAAAAAABEgAAAAAAAAAAAAAAAPC/"
				],
				[
					1577,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAJwSAAAAAAAAnhIAAAAAAAAAAAAA4BEAAAAAAADiEQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4BEAAAAAAACcEgAAAAAAAAAAAAAAAPC/"
				],
				[
					1596,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAADwQAAAAAAAAPRAAAAAAAAAAAAAAPRAAAAAAAAA9EAAAAAAAAC8AAAAgIC8qIDE2OiBjb25zdCBjaGFyKiB2ZXJzaW9uQ29udHJvbFJldmlzaW9uICovCg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPBAAAAAAAABrEAAAAAAAAAAAAAAAAPC/"
				],
				[
					1604,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAAYRAAAAAAAACBEAAAAAAAAAAAAAPxAAAAAAAABBEAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPxAAAAAAAAAGEQAAAAAAAAAAAAAAADhA"
				],
				[
					1629,
					1,
					"revert",
					null,
					"BQAAAAAAAAAAAAAAAAAAAAAAAADIcgAAaW1wb3J0IHsgZGxvcGVuLCBkZWZpbmUsIGRsZXJyb3IsIGRsY2xvc2UsIGRsc3ltLCBjYWxsLCBlcnJubywgUlRMRF9OT1csIHRvU3RyaW5nIH0gZnJvbSAnZmZpJzsKaW1wb3J0IHsgdG9Qb2ludGVyLCB0b0FycmF5QnVmZmVyLCBpc0FycmF5QnVmZmVyLCBpc09iamVjdCwgZGVmaW5lIGFzIGRlZmluZU9iaiB9IGZyb20gJ3V0aWwnOwoKY29uc3QgbGlicG9ydGF1ZGlvID0gZGxvcGVuKCdsaWJwb3J0YXVkaW8uc28uMicsIFJUTERfTk9XKTsKCmV4cG9ydCBjb25zdCBwYUZsb2F0MzIgPSAweDAwMDAwMDAxOyAvKio8IEBzZWUgUGFTYW1wbGVGb3JtYXQgKi8KZXhwb3J0IGNvbnN0IHBhSW50MzIgPSAweDAwMDAwMDAyOyAvKio8IEBzZWUgUGFTYW1wbGVGb3JtYXQgKi8KZXhwb3J0IGNvbnN0IHBhSW50MjQgPSAweDAwMDAwMDA0OyAvKio8IFBhY2tlZCAyNCBiaXQgZm9ybWF0LiBAc2VlIFBhU2FtcGxlRm9ybWF0ICovCmV4cG9ydCBjb25zdCBwYUludDE2ID0gMHgwMDAwMDAwODsgLyoqPCBAc2VlIFBhU2FtcGxlRm9ybWF0ICovCmV4cG9ydCBjb25zdCBwYUludDggPSAweDAwMDAwMDEwOyAvKio8IEBzZWUgUGFTYW1wbGVGb3JtYXQgKi8KZXhwb3J0IGNvbnN0IHBhVUludDggPSAweDAwMDAwMDIwOyAvKio8IEBzZWUgUGFTYW1wbGVGb3JtYXQgKi8KZXhwb3J0IGNvbnN0IHBhQ3VzdG9tRm9ybWF0ID0gMHgwMDAxMDAwMDsgLyoqPCBAc2VlIFBhU2FtcGxlRm9ybWF0ICovCmV4cG9ydCBjb25zdCBwYU5vbkludGVybGVhdmVkID0gMHg4MDAwMDAwMDsgLyoqPCBAc2VlIFBhU2FtcGxlRm9ybWF0ICovCgpleHBvcnQgY29uc3QgcGFJbkRldmVsb3BtZW50ID0gMCAvKiB1c2Ugd2hpbGUgZGV2ZWxvcGluZyBzdXBwb3J0IGZvciBhIG5ldyBob3N0IEFQSSAqLywKICBwYURpcmVjdFNvdW5kID0gMSwKICBwYU1NRSA9IDIsCiAgcGFBU0lPID0gMywKICBwYVNvdW5kTWFuYWdlciA9IDQsCiAgcGFDb3JlQXVkaW8gPSA1LAogIHBhT1NTID0gNywKICBwYUFMU0EgPSA4LAogIHBhQUwgPSA5LAogIHBhQmVPUyA9IDEwLAogIHBhV0RNS1MgPSAxMSwKICBwYUpBQ0sgPSAxMiwKICBwYVdBU0FQSSA9IDEzLAogIHBhQXVkaW9TY2llbmNlSFBJID0gMTQ7CgpleHBvcnQgY29uc3QgcGFDb250aW51ZSA9IDAgLyoqPCBTaWduYWwgdGhhdCB0aGUgc3RyZWFtIHNob3VsZCBjb250aW51ZSBpbnZva2luZyB0aGUgY2FsbGJhY2sgYW5kIHByb2Nlc3NpbmcgYXVkaW8uICovLAogIHBhQ29tcGxldGUgPSAxIC8qKjwgU2lnbmFsIHRoYXQgdGhlIHN0cmVhbSBzaG91bGQgc3RvcCBpbnZva2luZyB0aGUgY2FsbGJhY2sgYW5kIGZpbmlzaCBvbmNlIGFsbCBvdXRwdXQgc2FtcGxlcyBoYXZlIHBsYXllZC4gKi8sCiAgcGFBYm9ydCA9IDI7IC8qKjwgU2lnbmFsIHRoYXQgdGhlIHN0cmVhbSBzaG91bGQgc3RvcCBpbnZva2luZyB0aGUgY2FsbGJhY2sgYW5kIGZpbmlzaCBhcyBzb29uIGFzIHBvc3NpYmxlLiAqLwoKZXhwb3J0IGNvbnN0IHBhTm9FcnJvciA9IDAsCiAgcGFOb3RJbml0aWFsaXplZCA9IC0xMDAwMCwKICBwYVVuYW50aWNpcGF0ZWRIb3N0RXJyb3IgPSAtOTk5OSwKICBwYUludmFsaWRDaGFubmVsQ291bnQgPSAtOTk5OCwKICBwYUludmFsaWRTYW1wbGVSYXRlID0gLTk5OTcsCiAgcGFJbnZhbGlkRGV2aWNlID0gLTk5OTYsCiAgcGFJbnZhbGlkRmxhZyA9IC05OTk1LAogIHBhU2FtcGxlRm9ybWF0Tm90U3VwcG9ydGVkID0gLTk5OTQsCiAgcGFCYWRJT0RldmljZUNvbWJpbmF0aW9uID0gLTk5OTMsCiAgcGFJbnN1ZmZpY2llbnRNZW1vcnkgPSAtOTk5MiwKICBwYUJ1ZmZlclRvb0JpZyA9IC05OTkxLAogIHBhQnVmZmVyVG9vU21hbGwgPSAtOTk5MCwKICBwYU51bGxDYWxsYmFjayA9IC05OTg5LAogIHBhQmFkU3RyZWFtUHRyID0gLTk5ODgsCiAgcGFUaW1lZE91dCA9IC05OTg3LAogIHBhSW50ZXJuYWxFcnJvciA9IC05OTg2LAogIHBhRGV2aWNlVW5hdmFpbGFibGUgPSAtOTk4NSwKICBwYUluY29tcGF0aWJsZUhvc3RBcGlTcGVjaWZpY1N0cmVhbUluZm8gPSAtOTk4NCwKICBwYVN0cmVhbUlzU3RvcHBlZCA9IC05OTgzLAogIHBhU3RyZWFtSXNOb3RTdG9wcGVkID0gLTk5ODIsCiAgcGFJbnB1dE92ZXJmbG93ZWQgPSAtOTk4MSwKICBwYU91dHB1dFVuZGVyZmxvd2VkID0gLTk5ODAsCiAgcGFIb3N0QXBpTm90Rm91bmQgPSAtOTk3OSwKICBwYUludmFsaWRIb3N0QXBpID0gLTk5NzgsCiAgcGFDYW5Ob3RSZWFkRnJvbUFDYWxsYmFja1N0cmVhbSA9IC05OTc3LAogIHBhQ2FuTm90V3JpdGVUb0FDYWxsYmFja1N0cmVhbSA9IC05OTc2LAogIHBhQ2FuTm90UmVhZEZyb21Bbk91dHB1dE9ubHlTdHJlYW0gPSAtOTk3NSwKICBwYUNhbk5vdFdyaXRlVG9BbklucHV0T25seVN0cmVhbSA9IC05OTc0LAogIHBhSW5jb21wYXRpYmxlU3RyZWFtSG9zdEFwaSA9IC05OTczLAogIHBhQmFkQnVmZmVyUHRyID0gLTk5NzI7CgpleHBvcnQgbGV0IFBhX1Jlc3VsdDsKCmNvbnN0IG5hbWVLZXkgPSAvKiduYW1lJyA/PyovIFN5bWJvbC50b1N0cmluZ1RhZzsKY29uc3QgaW5zcGVjdEtleSA9IFN5bWJvbC5pbnNwZWN0OwoKZXhwb3J0IGZ1bmN0aW9uIEhleFN0cmluZyhudW0pIHsKICByZXR1cm4gJzB4JyArIG51bS50b1N0cmluZygxNik7Cn0KCmV4cG9ydCBmdW5jdGlvbiBEZXJlZmVyZW5jZVBvaW50ZXIocHRyKSB7CiAgcmV0dXJuIG5ldyBCaWdJbnQ2NEFycmF5KHB0cilbMF07Cn0KCmV4cG9ydCBmdW5jdGlvbiBHZXRTdHJlYW0oc3RyZWFtX3B0cikgewogIHJldHVybiB0b0FycmF5QnVmZmVyKHR5cGVvZiBzdHJlYW1fcHRyID09ICdzdHJpbmcnID8gc3RyZWFtX3B0ciA6IEhleFN0cmluZyhEZXJlZmVyZW5jZVBvaW50ZXIoc3RyZWFtX3B0cikpLCAxNik7Cn0KCmV4cG9ydCBmdW5jdGlvbiBQYXNzUG9pbnRlcihhcmcpIHsKICBpZighYXJnKSBhcmcgPSBudWxsOwoKICBpZihhcmcpIHsKICAgIGlmKHR5cGVvZiBhcmcgPT0gJ3N0cmluZycpIGFyZyA9IHRvQXJyYXlCdWZmZXIoJzB4JyArIEJpZ0ludChhcmcpLnRvU3RyaW5nKDE2KSwgMTYpOwogICAgaWYodHlwZW9mIGFyZyA9PSAnb2JqZWN0JyAmJiAhKGFyZyBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSkgYXJnID0gYXJnLmJ1ZmZlcjsKCiAgICBpZighaXNBcnJheUJ1ZmZlcihhcmcpKSB0aHJvdyBuZXcgRXJyb3IoYFBhc3NQb2ludGVyKCkgYXJndW1lbnQgaXMgbm90IGFycmF5IGJ1ZmZlcjogJHthcmd9YCk7CiAgfQoKICBjb25zb2xlLmxvZygnUGFzc1BvaW50ZXIoKScsIGBhcmc9YCwgaXNBcnJheUJ1ZmZlcihhcmcpID8gdG9Qb2ludGVyKGFyZykgOiBhcmcpOwoKICByZXR1cm4gYXJnOwp9CgpleHBvcnQgY2xhc3MgUGFWZXJzaW9uSW5mbyBleHRlbmRzIEFycmF5QnVmZmVyIHsKICBjb25zdHJ1Y3RvcihvYmopIHsKICAgIHN1cGVyKDMyKTsKCiAgICBpZihpc09iamVjdChvYmopKSB7CiAgICAgIGNvbnN0IHsgdmVyc2lvbk1ham9yLCB2ZXJzaW9uTWlub3IsIHZlcnNpb25TdWJNaW5vciwgdmVyc2lvbkNvbnRyb2xSZXZpc2lvbiwgdmVyc2lvblRleHQgfSA9IG9iajsKICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCB7IHZlcnNpb25NYWpvciwgdmVyc2lvbk1pbm9yLCB2ZXJzaW9uU3ViTWlub3IsIHZlcnNpb25Db250cm9sUmV2aXNpb24sIHZlcnNpb25UZXh0IH0pOwogICAgfQogIH0KCiAgLyogMDogaW50IHZlcnNpb25NYWpvciAqLwogIHNldCB2ZXJzaW9uTWFqb3IodmFsdWUpIHsKICAgIG5ldyBJbnQzMkFycmF5KHRoaXMsIDApWzBdID0gdmFsdWU7CiAgfQoKICBnZXQgdmVyc2lvbk1ham9yKCkgewogICAgcmV0dXJuIG5ldyBJbnQzMkFycmF5KHRoaXMsIDApWzBdOwogIH0KCiAgLyogNDogaW50IHZlcnNpb25NaW5vciAqLwogIHNldCB2ZXJzaW9uTWlub3IodmFsdWUpIHsKICAgIG5ldyBJbnQzMkFycmF5KHRoaXMsIDQpWzBdID0gdmFsdWU7CiAgfQoKICBnZXQgdmVyc2lvbk1pbm9yKCkgewogICAgcmV0dXJuIG5ldyBJbnQzMkFycmF5KHRoaXMsIDQpWzBdOwogIH0KCiAgLyogODogaW50IHZlcnNpb25TdWJNaW5vciAqLwogIHNldCB2ZXJzaW9uU3ViTWlub3IodmFsdWUpIHsKICAgIG5ldyBJbnQzMkFycmF5KHRoaXMsIDgpWzBdID0gdmFsdWU7CiAgfQoKICBnZXQgdmVyc2lvblN1Yk1pbm9yKCkgewogICAgcmV0dXJuIG5ldyBJbnQzMkFycmF5KHRoaXMsIDgpWzBdOwogIH0KCiAgIC8qc2V0IHZlcnNpb25Db250cm9sUmV2aXNpb24odmFsdWUpIHsKICAgIGlmKHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0JyAmJiB2YWx1ZSAhPSBudWxsICYmIHZhbHVlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHZhbHVlID0gdG9Qb2ludGVyKHZhbHVlKTsKICAgIG5ldyBCaWdJbnQ2NEFycmF5KHRoaXMsIDE2KVswXSA9IEJpZ0ludCh2YWx1ZSk7CiAgfSovCgogIGdldCB2ZXJzaW9uQ29udHJvbFJldmlzaW9uKCkgewogICAgY29uc3QgYSA9IG5ldyBCaWdJbnQ2NEFycmF5KHRoaXMsIDE2KTsKICAgIGlmKGFbMF0gPT0gQmlnSW50KDApKSByZXR1cm4gbnVsbDsKICAgIHJldHVybiB0b1N0cmluZygnMHgnICsgYVswXS50b1N0cmluZygxNikpOwogIH0KCiAgIC8qc2V0IHZlcnNpb25UZXh0KHZhbHVlKSB7CiAgICBpZih0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcgJiYgdmFsdWUgIT0gbnVsbCAmJiB2YWx1ZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB2YWx1ZSA9IHRvUG9pbnRlcih2YWx1ZSk7CiAgICBuZXcgQmlnSW50NjRBcnJheSh0aGlzLCAyNClbMF0gPSBCaWdJbnQodmFsdWUpOwogIH0qLwoKICBnZXQgdmVyc2lvblRleHQoKSB7CiAgICBjb25zdCBhID0gbmV3IEJpZ0ludDY0QXJyYXkodGhpcywgMjQpOwogICAgaWYoYVswXSA9PSBCaWdJbnQoMCkpIHJldHVybiBudWxsOwogICAgcmV0dXJuIHRvU3RyaW5nKCcweCcgKyBhWzBdLnRvU3RyaW5nKDE2KSk7CiAgfQoKICBzdGF0aWMgZnJvbShhZGRyZXNzKSB7CiAgICBsZXQgcmV0ID0gdG9BcnJheUJ1ZmZlcihpc0FycmF5QnVmZmVyKGFkZHJlc3MpID8gdG9Qb2ludGVyKGFkZHJlc3MpIDogYWRkcmVzcywgMzIpOwogICAgcmV0dXJuIE9iamVjdC5zZXRQcm90b3R5cGVPZihyZXQsIFBhVmVyc2lvbkluZm8ucHJvdG90eXBlKTsKICB9CgogIFtpbnNwZWN0S2V5XSgpIHsKICAgIGNvbnN0IHsgdmVyc2lvbk1ham9yLCB2ZXJzaW9uTWlub3IsIHZlcnNpb25TdWJNaW5vciwgdmVyc2lvbkNvbnRyb2xSZXZpc2lvbiwgdmVyc2lvblRleHQgfSA9IHRoaXM7CiAgICByZXR1cm4gYFx4MWJbMTszMW1QYVZlcnNpb25JbmZvXHgxYlswbSBgICsgaW5zcGVjdCh7IHZlcnNpb25NYWpvciwgdmVyc2lvbk1pbm9yLCB2ZXJzaW9uU3ViTWlub3IsIHZlcnNpb25Db250cm9sUmV2aXNpb24sIHZlcnNpb25UZXh0IH0sIHsgY29sb3JzOiB0cnVlIH0pOwogIH0KfQoKZGVmaW5lT2JqKFBhVmVyc2lvbkluZm8ucHJvdG90eXBlLCB7IFtuYW1lS2V5XTogJ1BhVmVyc2lvbkluZm8nIH0pOwoKZXhwb3J0IGNsYXNzIFBhSG9zdEFwaUluZm8gZXh0ZW5kcyBBcnJheUJ1ZmZlciB7CiAgY29uc3RydWN0b3Iob2JqKSB7CiAgICBzdXBlcigzMik7CgogICAgaWYoaXNPYmplY3Qob2JqKSkgewogICAgICBjb25zdCB7IHN0cnVjdFZlcnNpb24sIHR5cGUsIG5hbWUsIGRldmljZUNvdW50LCBkZWZhdWx0SW5wdXREZXZpY2UsIGRlZmF1bHRPdXRwdXREZXZpY2UgfSA9IG9iajsKICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCB7IHN0cnVjdFZlcnNpb24sIHR5cGUsIG5hbWUsIGRldmljZUNvdW50LCBkZWZhdWx0SW5wdXREZXZpY2UsIGRlZmF1bHRPdXRwdXREZXZpY2UgfSk7CiAgICB9CiAgfQoKICAvKiAwOiBpbnQgc3RydWN0VmVyc2lvbiAqLwogIHNldCBzdHJ1Y3RWZXJzaW9uKHZhbHVlKSB7CiAgICBuZXcgSW50MzJBcnJheSh0aGlzLCAwKVswXSA9IHZhbHVlOwogIH0KCiAgZ2V0IHN0cnVjdFZlcnNpb24oKSB7CiAgICByZXR1cm4gbmV3IEludDMyQXJyYXkodGhpcywgMClbMF07CiAgfQoKICAvKiA0OiBQYUhvc3RBcGlUeXBlSWQgKGludCkgdHlwZSAqLwogIHNldCB0eXBlKHZhbHVlKSB7CiAgICBuZXcgSW50MzJBcnJheSh0aGlzLCA0KVswXSA9IHZhbHVlOwogIH0KCiAgZ2V0IHR5cGUoKSB7CiAgICByZXR1cm4gbmV3IEludDMyQXJyYXkodGhpcywgNClbMF07CiAgfQoKICAgLypzZXQgbmFtZSh2YWx1ZSkgewogICAgaWYodHlwZW9mIHZhbHVlID09ICdvYmplY3QnICYmIHZhbHVlICE9IG51bGwgJiYgdmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgdmFsdWUgPSB0b1BvaW50ZXIodmFsdWUpOwogICAgbmV3IEJpZ0ludDY0QXJyYXkodGhpcywgOClbMF0gPSBCaWdJbnQodmFsdWUpOwogIH0qLwoKICBnZXQgbmFtZSgpIHsKICAgIGNvbnN0IGEgPSBuZXcgQmlnSW50NjRBcnJheSh0aGlzLCA4LCAxKTsKICAgIGlmKGFbMF0gPT0gQmlnSW50KDApKSByZXR1cm4gbnVsbDsKICAgIHJldHVybiB0b1N0cmluZygnMHgnICsgYVswXS50b1N0cmluZygxNikpOwogIH0KCiAgLyogMTY6IGludCBkZXZpY2VDb3VudCAqLwogIHNldCBkZXZpY2VDb3VudCh2YWx1ZSkgewogICAgbmV3IEludDMyQXJyYXkodGhpcywgMTYpWzBdID0gdmFsdWU7CiAgfQoKICBnZXQgZGV2aWNlQ291bnQoKSB7CiAgICByZXR1cm4gbmV3IEludDMyQXJyYXkodGhpcywgMTYpWzBdOwogIH0KCiAgLyogMjA6IFBhRGV2aWNlSW5kZXggKGludCkgZGVmYXVsdElucHV0RGV2aWNlICovCiAgc2V0IGRlZmF1bHRJbnB1dERldmljZSh2YWx1ZSkgewogICAgbmV3IEludDMyQXJyYXkodGhpcywgMjApWzBdID0gdmFsdWU7CiAgfQoKICBnZXQgZGVmYXVsdElucHV0RGV2aWNlKCkgewogICAgcmV0dXJuIG5ldyBJbnQzMkFycmF5KHRoaXMsIDIwKVswXTsKICB9CgogIC8qIDI0OiBQYURldmljZUluZGV4IChpbnQpIGRlZmF1bHRPdXRwdXREZXZpY2UgKi8KICBzZXQgZGVmYXVsdE91dHB1dERldmljZSh2YWx1ZSkgewogICAgbmV3IEludDMyQXJyYXkodGhpcywgMjQpWzBdID0gdmFsdWU7CiAgfQoKICBnZXQgZGVmYXVsdE91dHB1dERldmljZSgpIHsKICAgIHJldHVybiBuZXcgSW50MzJBcnJheSh0aGlzLCAyNClbMF07CiAgfQoKICBzdGF0aWMgZnJvbShhZGRyZXNzKSB7CiAgICBsZXQgcmV0ID0gdG9BcnJheUJ1ZmZlcihpc0FycmF5QnVmZmVyKGFkZHJlc3MpID8gdG9Qb2ludGVyKGFkZHJlc3MpIDogYWRkcmVzcywgMjgpOwogICAgcmV0dXJuIE9iamVjdC5zZXRQcm90b3R5cGVPZihyZXQsIFBhSG9zdEFwaUluZm8ucHJvdG90eXBlKTsKICB9CgogIFtpbnNwZWN0S2V5XSgpIHsKICAgIGNvbnN0IHsgdHlwZSwgbmFtZSwgZGV2aWNlQ291bnQsIGRlZmF1bHRJbnB1dERldmljZSwgZGVmYXVsdE91dHB1dERldmljZSB9ID0gdGhpczsKCiAgICByZXR1cm4gYFx4MWJbMTszMW1QYUhvc3RBcGlJbmZvXHgxYlswbSBgICsgaW5zcGVjdCh7IHR5cGUsIG5hbWUsIGRldmljZUNvdW50LCBkZWZhdWx0SW5wdXREZXZpY2UsIGRlZmF1bHRPdXRwdXREZXZpY2UgfSwgeyBjb2xvcnM6IHRydWUgfSk7CiAgfQp9CgpkZWZpbmVPYmooUGFIb3N0QXBpSW5mby5wcm90b3R5cGUsIHsgW25hbWVLZXldOiAnUGFIb3N0QXBpSW5mbycgfSk7CgpleHBvcnQgY2xhc3MgUGFIb3N0RXJyb3JJbmZvIGV4dGVuZHMgQXJyYXlCdWZmZXIgewogIGNvbnN0cnVjdG9yKG9iaikgewogICAgc3VwZXIoMjQpOwoKICAgIGlmKGlzT2JqZWN0KG9iaikpIHsKICAgICAgY29uc3QgeyBob3N0QXBpVHlwZSwgZXJyb3JDb2RlLCBlcnJvclRleHQgfSA9IG9iajsKICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCB7IGhvc3RBcGlUeXBlLCBlcnJvckNvZGUsIGVycm9yVGV4dCB9KTsKICAgIH0KICB9CgogIC8qIDA6IFBhSG9zdEFwaVR5cGVJZCAoaW50KSBob3N0QXBpVHlwZSAqLwogIHNldCBob3N0QXBpVHlwZSh2YWx1ZSkgewogICAgbmV3IEludDMyQXJyYXkodGhpcywgMClbMF0gPSB2YWx1ZTsKICB9CgogIGdldCBob3N0QXBpVHlwZSgpIHsKICAgIHJldHVybiBuZXcgSW50MzJBcnJheSh0aGlzLCAwKVswXTsKICB9CgogIC8qIDg6IGxvbmcgZXJyb3JDb2RlICovCiAgc2V0IGVycm9yQ29kZSh2YWx1ZSkgewogICAgbmV3IEJpZ0ludDY0QXJyYXkodGhpcywgOClbMF0gPSBCaWdJbnQodmFsdWUpOwogIH0KCiAgZ2V0IGVycm9yQ29kZSgpIHsKICAgIHJldHVybiBOdW1iZXIobmV3IEJpZ0ludDY0QXJyYXkodGhpcywgOClbMF0pOwogIH0KCiAgIC8qc2V0IGVycm9yVGV4dCh2YWx1ZSkgewogICAgaWYodHlwZW9mIHZhbHVlID09ICdvYmplY3QnICYmIHZhbHVlICE9IG51bGwgJiYgdmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgdmFsdWUgPSB0b1BvaW50ZXIodmFsdWUpOwogICAgbmV3IEJpZ0ludDY0QXJyYXkodGhpcywgMTYpWzBdID0gQmlnSW50KHZhbHVlKTsKICB9Ki8KCiAgZ2V0IGVycm9yVGV4dCgpIHsKICAgIGNvbnN0IGEgPSBuZXcgQmlnSW50NjRBcnJheSh0aGlzLCAxNik7CiAgICBpZihhWzBdID09IEJpZ0ludCgwKSkgcmV0dXJuIG51bGw7CiAgICByZXR1cm4gdG9TdHJpbmcoJzB4JyArIGFbMF0udG9TdHJpbmcoMTYpKTsKICB9CgogIHN0YXRpYyBmcm9tKGFkZHJlc3MpIHsKICAgIGxldCByZXQgPSB0b0FycmF5QnVmZmVyKGlzQXJyYXlCdWZmZXIoYWRkcmVzcykgPyB0b1BvaW50ZXIoYWRkcmVzcykgOiBhZGRyZXNzLCAyNCk7CiAgICByZXR1cm4gT2JqZWN0LnNldFByb3RvdHlwZU9mKHJldCwgUGFIb3N0RXJyb3JJbmZvLnByb3RvdHlwZSk7CiAgfQoKICBbaW5zcGVjdEtleV0oKSB7CiAgICBjb25zdCB7IGhvc3RBcGlUeXBlLCBlcnJvckNvZGUsIGVycm9yVGV4dCB9ID0gdGhpczsKCiAgICByZXR1cm4gYFx4MWJbMTszMW1QYUhvc3RFcnJvckluZm9ceDFiWzBtIGAgKyBpbnNwZWN0KHsgaG9zdEFwaVR5cGUsIGVycm9yQ29kZSwgZXJyb3JUZXh0IH0sIHsgY29sb3JzOiB0cnVlIH0pOwogIH0KfQoKZGVmaW5lT2JqKFBhSG9zdEVycm9ySW5mby5wcm90b3R5cGUsIHsgW25hbWVLZXldOiAnUGFIb3N0RXJyb3JJbmZvJyB9KTsKCmV4cG9ydCBjbGFzcyBQYURldmljZUluZm8gZXh0ZW5kcyBBcnJheUJ1ZmZlciB7CiAgY29uc3RydWN0b3Iob2JqKSB7CiAgICBzdXBlcig3Mik7CgogICAgaWYoaXNPYmplY3Qob2JqKSkgewogICAgICAvKiBwcmV0dGllci1pZ25vcmUgKi8gY29uc3QgeyBzdHJ1Y3RWZXJzaW9uLCBuYW1lLCBob3N0QXBpLCBtYXhJbnB1dENoYW5uZWxzLCBtYXhPdXRwdXRDaGFubmVscywgZGVmYXVsdExvd0lucHV0TGF0ZW5jeSwgZGVmYXVsdExvd091dHB1dExhdGVuY3ksIGRlZmF1bHRIaWdoSW5wdXRMYXRlbmN5LCBkZWZhdWx0SGlnaE91dHB1dExhdGVuY3ksIGRlZmF1bHRTYW1wbGVSYXRlIH0gPSBvYmo7CiAgICAgIC8qIHByZXR0aWVyLWlnbm9yZSAqLyBPYmplY3QuYXNzaWduKHRoaXMsIHsgc3RydWN0VmVyc2lvbiwgbmFtZSwgaG9zdEFwaSwgbWF4SW5wdXRDaGFubmVscywgbWF4T3V0cHV0Q2hhbm5lbHMsIGRlZmF1bHRMb3dJbnB1dExhdGVuY3ksIGRlZmF1bHRMb3dPdXRwdXRMYXRlbmN5LCBkZWZhdWx0SGlnaElucHV0TGF0ZW5jeSwgZGVmYXVsdEhpZ2hPdXRwdXRMYXRlbmN5LCBkZWZhdWx0U2FtcGxlUmF0ZSB9KTsKICAgIH0KICB9CgogIC8qIDA6IGludCBzdHJ1Y3RWZXJzaW9uICovCiAgc2V0IHN0cnVjdFZlcnNpb24odmFsdWUpIHsKICAgIG5ldyBJbnQzMkFycmF5KHRoaXMsIDApWzBdID0gdmFsdWU7CiAgfQoKICBnZXQgc3RydWN0VmVyc2lvbigpIHsKICAgIHJldHVybiBuZXcgSW50MzJBcnJheSh0aGlzLCAwKVswXTsKICB9CgogICAvKnNldCBuYW1lKHZhbHVlKSB7CiAgICBpZih0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcgJiYgdmFsdWUgIT0gbnVsbCAmJiB2YWx1ZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB2YWx1ZSA9IHRvUG9pbnRlcih2YWx1ZSk7CiAgICBuZXcgQmlnSW50NjRBcnJheSh0aGlzLCA4KVswXSA9IEJpZ0ludCh2YWx1ZSk7CiAgfSovCgogIGdldCBuYW1lKCkgewogICAgY29uc3QgYSA9IG5ldyBCaWdJbnQ2NEFycmF5KHRoaXMsIDgpOwogICAgaWYoYVswXSA9PSBCaWdJbnQoMCkpIHJldHVybiBudWxsOwogICAgcmV0dXJuIHRvU3RyaW5nKCcweCcgKyBhWzBdLnRvU3RyaW5nKDE2KSk7CiAgfQoKICAvKiAxNjogUGFIb3N0QXBpSW5kZXggKGludCkgaG9zdEFwaSAqLwogIHNldCBob3N0QXBpKHZhbHVlKSB7CiAgICBuZXcgSW50MzJBcnJheSh0aGlzLCAxNilbMF0gPSB2YWx1ZTsKICB9CgogIGdldCBob3N0QXBpKCkgewogICAgcmV0dXJuIG5ldyBJbnQzMkFycmF5KHRoaXMsIDE2KVswXTsKICB9CgogIC8qIDIwOiBpbnQgbWF4SW5wdXRDaGFubmVscyAqLwogIHNldCBtYXhJbnB1dENoYW5uZWxzKHZhbHVlKSB7CiAgICBuZXcgSW50MzJBcnJheSh0aGlzLCAyMClbMF0gPSB2YWx1ZTsKICB9CgogIGdldCBtYXhJbnB1dENoYW5uZWxzKCkgewogICAgcmV0dXJuIG5ldyBJbnQzMkFycmF5KHRoaXMsIDIwKVswXTsKICB9CgogIC8qIDI0OiBpbnQgbWF4T3V0cHV0Q2hhbm5lbHMgKi8KICBzZXQgbWF4T3V0cHV0Q2hhbm5lbHModmFsdWUpIHsKICAgIG5ldyBJbnQzMkFycmF5KHRoaXMsIDI0KVswXSA9IHZhbHVlOwogIH0KCiAgZ2V0IG1heE91dHB1dENoYW5uZWxzKCkgewogICAgcmV0dXJuIG5ldyBJbnQzMkFycmF5KHRoaXMsIDI0KVswXTsKICB9CgogIC8qIDMyOiBQYVRpbWUgKGRvdWJsZSkgZGVmYXVsdExvd0lucHV0TGF0ZW5jeSAqLwogIHNldCBkZWZhdWx0TG93SW5wdXRMYXRlbmN5KHZhbHVlKSB7CiAgICBuZXcgRmxvYXQ2NEFycmF5KHRoaXMsIDMyKVswXSA9IHZhbHVlOwogIH0KCiAgZ2V0IGRlZmF1bHRMb3dJbnB1dExhdGVuY3koKSB7CiAgICByZXR1cm4gbmV3IEZsb2F0NjRBcnJheSh0aGlzLCAzMilbMF07CiAgfQoKICAvKiA0MDogUGFUaW1lIChkb3VibGUpIGRlZmF1bHRMb3dPdXRwdXRMYXRlbmN5ICovCiAgc2V0IGRlZmF1bHRMb3dPdXRwdXRMYXRlbmN5KHZhbHVlKSB7CiAgICBuZXcgRmxvYXQ2NEFycmF5KHRoaXMsIDQwKVswXSA9IHZhbHVlOwogIH0KCiAgZ2V0IGRlZmF1bHRMb3dPdXRwdXRMYXRlbmN5KCkgewogICAgcmV0dXJuIG5ldyBGbG9hdDY0QXJyYXkodGhpcywgNDApWzBdOwogIH0KCiAgLyogNDg6IFBhVGltZSAoZG91YmxlKSBkZWZhdWx0SGlnaElucHV0TGF0ZW5jeSAqLwogIHNldCBkZWZhdWx0SGlnaElucHV0TGF0ZW5jeSh2YWx1ZSkgewogICAgbmV3IEZsb2F0NjRBcnJheSh0aGlzLCA0OClbMF0gPSB2YWx1ZTsKICB9CgogIGdldCBkZWZhdWx0SGlnaElucHV0TGF0ZW5jeSgpIHsKICAgIHJldHVybiBuZXcgRmxvYXQ2NEFycmF5KHRoaXMsIDQ4KVswXTsKICB9CgogIC8qIDU2OiBQYVRpbWUgKGRvdWJsZSkgZGVmYXVsdEhpZ2hPdXRwdXRMYXRlbmN5ICovCiAgc2V0IGRlZmF1bHRIaWdoT3V0cHV0TGF0ZW5jeSh2YWx1ZSkgewogICAgbmV3IEZsb2F0NjRBcnJheSh0aGlzLCA1NilbMF0gPSB2YWx1ZTsKICB9CgogIGdldCBkZWZhdWx0SGlnaE91dHB1dExhdGVuY3koKSB7CiAgICByZXR1cm4gbmV3IEZsb2F0NjRBcnJheSh0aGlzLCA1NilbMF07CiAgfQoKICAvKiA2NDogZG91YmxlIGRlZmF1bHRTYW1wbGVSYXRlICovCiAgc2V0IGRlZmF1bHRTYW1wbGVSYXRlKHZhbHVlKSB7CiAgICBuZXcgRmxvYXQ2NEFycmF5KHRoaXMsIDY0KVswXSA9IHZhbHVlOwogIH0KCiAgZ2V0IGRlZmF1bHRTYW1wbGVSYXRlKCkgewogICAgcmV0dXJuIG5ldyBGbG9hdDY0QXJyYXkodGhpcywgNjQpWzBdOwogIH0KCiAgc3RhdGljIGZyb20oYWRkcmVzcykgewogICAgbGV0IHJldCA9IHRvQXJyYXlCdWZmZXIoaXNBcnJheUJ1ZmZlcihhZGRyZXNzKSA/IHRvUG9pbnRlcihhZGRyZXNzKSA6IGFkZHJlc3MsIDcyKTsKICAgIHJldHVybiBPYmplY3Quc2V0UHJvdG90eXBlT2YocmV0LCBQYURldmljZUluZm8ucHJvdG90eXBlKTsKICB9CgogIFtpbnNwZWN0S2V5XSgpIHsKICAgIGNvbnN0IHsgbmFtZSwgaG9zdEFwaSwgbWF4SW5wdXRDaGFubmVscywgbWF4T3V0cHV0Q2hhbm5lbHMsIGRlZmF1bHRMb3dJbnB1dExhdGVuY3ksIGRlZmF1bHRMb3dPdXRwdXRMYXRlbmN5LCBkZWZhdWx0SGlnaElucHV0TGF0ZW5jeSwgZGVmYXVsdEhpZ2hPdXRwdXRMYXRlbmN5LCBkZWZhdWx0U2FtcGxlUmF0ZSB9ID0gdGhpczsKICAgIHJldHVybiAoCiAgICAgIGBceDFiWzE7MzFtUGFEZXZpY2VJbmZvXHgxYlswbSBgICsKICAgICAgaW5zcGVjdCgKICAgICAgICB7IG5hbWUsIGhvc3RBcGksIG1heElucHV0Q2hhbm5lbHMsIG1heE91dHB1dENoYW5uZWxzLCBkZWZhdWx0TG93SW5wdXRMYXRlbmN5LCBkZWZhdWx0TG93T3V0cHV0TGF0ZW5jeSwgZGVmYXVsdEhpZ2hJbnB1dExhdGVuY3ksIGRlZmF1bHRIaWdoT3V0cHV0TGF0ZW5jeSwgZGVmYXVsdFNhbXBsZVJhdGUgfSwKICAgICAgICB7IGNvbG9yczogdHJ1ZSB9CiAgICAgICkKICAgICk7CiAgfQp9CgpkZWZpbmVPYmooUGFEZXZpY2VJbmZvLnByb3RvdHlwZSwgeyBbbmFtZUtleV06ICdQYURldmljZUluZm8nIH0pOwoKZXhwb3J0IGNsYXNzIFBhU3RyZWFtUGFyYW1ldGVycyBleHRlbmRzIEFycmF5QnVmZmVyIHsKICBjb25zdHJ1Y3RvcihvYmopIHsKICAgIHN1cGVyKDMyKTsKCiAgICBpZihpc09iamVjdChvYmopKSB7CiAgICAgIGNvbnN0IHsgZGV2aWNlLCBjaGFubmVsQ291bnQsIHNhbXBsZUZvcm1hdCwgc3VnZ2VzdGVkTGF0ZW5jeSwgaG9zdEFwaVNwZWNpZmljU3RyZWFtSW5mbyB9ID0gb2JqOwogICAgICBPYmplY3QuYXNzaWduKHRoaXMsIHsgZGV2aWNlLCBjaGFubmVsQ291bnQsIHNhbXBsZUZvcm1hdCwgc3VnZ2VzdGVkTGF0ZW5jeSwgaG9zdEFwaVNwZWNpZmljU3RyZWFtSW5mbyB9KTsKICAgIH0KICB9CgogIC8qIDA6IFBhRGV2aWNlSW5kZXggKGludCkgZGV2aWNlICovCiAgc2V0IGRldmljZSh2YWx1ZSkgewogICAgbmV3IEludDMyQXJyYXkodGhpcywgMClbMF0gPSB2YWx1ZTsKICB9CgogIGdldCBkZXZpY2UoKSB7CiAgICByZXR1cm4gbmV3IEludDMyQXJyYXkodGhpcywgMClbMF07CiAgfQoKICAvKiA0OiBpbnQgY2hhbm5lbENvdW50ICovCiAgc2V0IGNoYW5uZWxDb3VudCh2YWx1ZSkgewogICAgbmV3IEludDMyQXJyYXkodGhpcywgNClbMF0gPSB2YWx1ZTsKICB9CgogIGdldCBjaGFubmVsQ291bnQoKSB7CiAgICByZXR1cm4gbmV3IEludDMyQXJyYXkodGhpcywgNClbMF07CiAgfQoKICAvKiA4OiBQYVNhbXBsZUZvcm1hdCAodW5zaWduZWQgbG9uZykgc2FtcGxlRm9ybWF0ICovCiAgc2V0IHNhbXBsZUZvcm1hdCh2YWx1ZSkgewogICAgbmV3IEJpZ0ludDY0QXJyYXkodGhpcywgOClbMF0gPSBCaWdJbnQodmFsdWUpOwogIH0KCiAgZ2V0IHNhbXBsZUZvcm1hdCgpIHsKICAgIHJldHVybiBOdW1iZXIobmV3IEJpZ0ludDY0QXJyYXkodGhpcywgOClbMF0pOwogIH0KCiAgLyogMTY6IFBhVGltZSAoZG91YmxlKSBzdWdnZXN0ZWRMYXRlbmN5ICovCiAgc2V0IHN1Z2dlc3RlZExhdGVuY3kodmFsdWUpIHsKICAgIG5ldyBGbG9hdDY0QXJyYXkodGhpcywgMTYpWzBdID0gdmFsdWU7CiAgfQoKICBnZXQgc3VnZ2VzdGVkTGF0ZW5jeSgpIHsKICAgIHJldHVybiBuZXcgRmxvYXQ2NEFycmF5KHRoaXMsIDE2KVswXTsKICB9CgogIC8qIDI0OiB2b2lkKiBob3N0QXBpU3BlY2lmaWNTdHJlYW1JbmZvICovCiAgc2V0IGhvc3RBcGlTcGVjaWZpY1N0cmVhbUluZm8odmFsdWUpIHsKICAgIGlmKHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0JyAmJiB2YWx1ZSAhPSBudWxsICYmIHZhbHVlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHZhbHVlID0gdG9Qb2ludGVyKHZhbHVlKTsKICAgIHRyeSB7CiAgICAgIG5ldyBCaWdJbnQ2NEFycmF5KHRoaXMsIDI0KVswXSA9IEJpZ0ludCh2YWx1ZSk7CiAgICB9IGNhdGNoKGUpIHsKICAgICAgY29uc29sZS5sb2coJ3NldCBob3N0QXBpU3BlY2lmaWNTdHJlYW1JbmZvJywgdmFsdWUpOwogICAgfQogIH0KCiAgZ2V0IGhvc3RBcGlTcGVjaWZpY1N0cmVhbUluZm8oKSB7CiAgICByZXR1cm4gJzB4JyArIG5ldyBCaWdJbnQ2NEFycmF5KHRoaXMsIDI0KVswXS50b1N0cmluZygxNik7CiAgfQoKICBzdGF0aWMgZnJvbShhZGRyZXNzKSB7CiAgICBsZXQgcmV0ID0gdG9BcnJheUJ1ZmZlcihpc0FycmF5QnVmZmVyKGFkZHJlc3MpID8gdG9Qb2ludGVyKGFkZHJlc3MpIDogYWRkcmVzcywgMzIpOwogICAgcmV0dXJuIE9iamVjdC5zZXRQcm90b3R5cGVPZihyZXQsIFBhU3RyZWFtUGFyYW1ldGVycy5wcm90b3R5cGUpOwogIH0KCiAgW2luc3BlY3RLZXldKCkgewogICAgY29uc3QgeyBkZXZpY2UsIGNoYW5uZWxDb3VudCwgc2FtcGxlRm9ybWF0LCBzdWdnZXN0ZWRMYXRlbmN5LCBob3N0QXBpU3BlY2lmaWNTdHJlYW1JbmZvIH0gPSB0aGlzOwogICAgcmV0dXJuIGBceDFiWzE7MzFtUGFTdHJlYW1QYXJhbWV0ZXJzXHgxYlswbSBgICsgaW5zcGVjdCh7IGRldmljZSwgY2hhbm5lbENvdW50LCBzYW1wbGVGb3JtYXQsIHN1Z2dlc3RlZExhdGVuY3ksIGhvc3RBcGlTcGVjaWZpY1N0cmVhbUluZm8gfSwgeyBjb2xvcnM6IHRydWUgfSk7CiAgfQp9CgpkZWZpbmVPYmooUGFTdHJlYW1QYXJhbWV0ZXJzLnByb3RvdHlwZSwgeyBbbmFtZUtleV06ICdQYVN0cmVhbVBhcmFtZXRlcnMnIH0pOwoKZXhwb3J0IGNsYXNzIFBhU3RyZWFtSW5mbyBleHRlbmRzIEFycmF5QnVmZmVyIHsKICBjb25zdHJ1Y3RvcihvYmopIHsKICAgIHN1cGVyKDMyKTsKCiAgICBpZihpc09iamVjdChvYmopKSB7CiAgICAgIGNvbnN0IHsgc3RydWN0VmVyc2lvbiwgaW5wdXRMYXRlbmN5LCBvdXRwdXRMYXRlbmN5LCBzYW1wbGVSYXRlIH0gPSBvYmo7CgogICAgICBPYmplY3QuYXNzaWduKHRoaXMsIHsgc3RydWN0VmVyc2lvbiwgaW5wdXRMYXRlbmN5LCBvdXRwdXRMYXRlbmN5LCBzYW1wbGVSYXRlIH0pOwogICAgfQogIH0KCiAgLyogMDogaW50IHN0cnVjdFZlcnNpb24gKi8KICBzZXQgc3RydWN0VmVyc2lvbih2YWx1ZSkgewogICAgbmV3IEludDMyQXJyYXkodGhpcywgMClbMF0gPSB2YWx1ZTsKICB9CgogIGdldCBzdHJ1Y3RWZXJzaW9uKCkgewogICAgcmV0dXJuIG5ldyBJbnQzMkFycmF5KHRoaXMsIDApWzBdOwogIH0KCiAgLyogODogUGFUaW1lIChkb3VibGUpIGlucHV0TGF0ZW5jeSAqLwogIHNldCBpbnB1dExhdGVuY3kodmFsdWUpIHsKICAgIG5ldyBGbG9hdDY0QXJyYXkodGhpcywgOClbMF0gPSB2YWx1ZTsKICB9CgogIGdldCBpbnB1dExhdGVuY3koKSB7CiAgICByZXR1cm4gbmV3IEZsb2F0NjRBcnJheSh0aGlzLCA4KVswXTsKICB9CgogIC8qIDE2OiBQYVRpbWUgKGRvdWJsZSkgb3V0cHV0TGF0ZW5jeSAqLwogIHNldCBvdXRwdXRMYXRlbmN5KHZhbHVlKSB7CiAgICBuZXcgRmxvYXQ2NEFycmF5KHRoaXMsIDE2KVswXSA9IHZhbHVlOwogIH0KCiAgZ2V0IG91dHB1dExhdGVuY3koKSB7CiAgICByZXR1cm4gbmV3IEZsb2F0NjRBcnJheSh0aGlzLCAxNilbMF07CiAgfQoKICAvKiAyNDogZG91YmxlIHNhbXBsZVJhdGUgKi8KICBzZXQgc2FtcGxlUmF0ZSh2YWx1ZSkgewogICAgbmV3IEZsb2F0NjRBcnJheSh0aGlzLCAyNClbMF0gPSB2YWx1ZTsKICB9CgogIGdldCBzYW1wbGVSYXRlKCkgewogICAgcmV0dXJuIG5ldyBGbG9hdDY0QXJyYXkodGhpcywgMjQpWzBdOwogIH0KCiAgc3RhdGljIGZyb20oYWRkcmVzcykgewogICAgbGV0IHJldCA9IHRvQXJyYXlCdWZmZXIoaXNBcnJheUJ1ZmZlcihhZGRyZXNzKSA/IHRvUG9pbnRlcihhZGRyZXNzKSA6IGFkZHJlc3MsIDMyKTsKICAgIHJldHVybiBPYmplY3Quc2V0UHJvdG90eXBlT2YocmV0LCBQYVN0cmVhbUluZm8ucHJvdG90eXBlKTsKICB9CgogIFtpbnNwZWN0S2V5XSgpIHsKICAgIGNvbnN0IHsgaW5wdXRMYXRlbmN5LCBvdXRwdXRMYXRlbmN5LCBzYW1wbGVSYXRlIH0gPSB0aGlzOwogICAgcmV0dXJuIGBceDFiWzE7MzFtUGFTdHJlYW1JbmZvXHgxYlswbSBgICsgaW5zcGVjdCh7IGlucHV0TGF0ZW5jeSwgb3V0cHV0TGF0ZW5jeSwgc2FtcGxlUmF0ZSB9LCB7IGNvbG9yczogdHJ1ZSB9KTsKICB9Cn0KCmRlZmluZU9iaihQYVN0cmVhbUluZm8ucHJvdG90eXBlLCB7IFtuYW1lS2V5XTogJ1BhU3RyZWFtSW5mbycgfSk7CgovKioKICogQGZ1bmN0aW9uIFBhX0dldFZlcnNpb24KICoKICogQHJldHVybiAgIHtOdW1iZXJ9CiAqLwpkZWZpbmUoJ1BhX0dldFZlcnNpb24nLCBkbHN5bShsaWJwb3J0YXVkaW8sICdQYV9HZXRWZXJzaW9uJyksIG51bGwsICdpbnQnKTsKZXhwb3J0IGZ1bmN0aW9uIFBhX0dldFZlcnNpb24oKSB7CiAgcmV0dXJuIGNhbGwoJ1BhX0dldFZlcnNpb24nKTsKfQoKLyoqCiAqIEBmdW5jdGlvbiBQYV9HZXRWZXJzaW9uVGV4dAogKgogKiBAcmV0dXJuICAge1N0cmluZ30KICovCmRlZmluZSgnUGFfR2V0VmVyc2lvblRleHQnLCBkbHN5bShsaWJwb3J0YXVkaW8sICdQYV9HZXRWZXJzaW9uVGV4dCcpLCBudWxsLCAnY2hhciAqJyk7CmV4cG9ydCBmdW5jdGlvbiBQYV9HZXRWZXJzaW9uVGV4dCgpIHsKICByZXR1cm4gY2FsbCgnUGFfR2V0VmVyc2lvblRleHQnKTsKfQoKLyoqCiAqIEBmdW5jdGlvbiBQYV9HZXRWZXJzaW9uSW5mbwogKgogKiBAcmV0dXJuICAge051bWJlcn0KICovCmRlZmluZSgnUGFfR2V0VmVyc2lvbkluZm8nLCBkbHN5bShsaWJwb3J0YXVkaW8sICdQYV9HZXRWZXJzaW9uSW5mbycpLCBudWxsLCAndm9pZCAqJyk7CmV4cG9ydCBmdW5jdGlvbiBQYV9HZXRWZXJzaW9uSW5mbygpIHsKICBjb25zdCByZXN1bHQgPSBjYWxsKCdQYV9HZXRWZXJzaW9uSW5mbycpOwoKICByZXR1cm4gcmVzdWx0ID8gUGFWZXJzaW9uSW5mby5mcm9tKHJlc3VsdCkgOiBudWxsOwp9CgovKioKICogQGZ1bmN0aW9uIFBhX0dldEVycm9yVGV4dAogKgogKiBAcGFyYW0gICAge051bWJlcn0gICAgICAgIGVycm9yQ29kZQogKgogKiBAcmV0dXJuICAge1N0cmluZ30gICAgICAgIFRoZSBlcnJvciB0ZXh0CiAqLwpkZWZpbmUoJ1BhX0dldEVycm9yVGV4dCcsIGRsc3ltKGxpYnBvcnRhdWRpbywgJ1BhX0dldEVycm9yVGV4dCcpLCBudWxsLCAnY2hhciAqJywgJ2ludCcpOwpleHBvcnQgZnVuY3Rpb24gUGFfR2V0RXJyb3JUZXh0KGVycm9yQ29kZSA9IFBhX1Jlc3VsdCkgewogIHJldHVybiBjYWxsKCdQYV9HZXRFcnJvclRleHQnLCBlcnJvckNvZGUpOwp9CgovKioKICogQGZ1bmN0aW9uIFBhX0luaXRpYWxpemUKICoKICogQHJldHVybiAgIHtOdW1iZXJ9ICAgICAgICAgIFBhRXJyb3IKICovCmRlZmluZSgnUGFfSW5pdGlhbGl6ZScsIGRsc3ltKGxpYnBvcnRhdWRpbywgJ1BhX0luaXRpYWxpemUnKSwgbnVsbCwgJ2ludCcpOwpleHBvcnQgZnVuY3Rpb24gUGFfSW5pdGlhbGl6ZSgpIHsKICByZXR1cm4gY2FsbCgnUGFfSW5pdGlhbGl6ZScpOwp9CgovKioKICogQGZ1bmN0aW9uIFBhX1Rlcm1pbmF0ZQogKgogKiBAcmV0dXJuICAge051bWJlcn0gICAgICAgICAgUGFFcnJvcgogKi8KZGVmaW5lKCdQYV9UZXJtaW5hdGUnLCBkbHN5bShsaWJwb3J0YXVkaW8sICdQYV9UZXJtaW5hdGUnKSwgbnVsbCwgJ2ludCcpOwpleHBvcnQgZnVuY3Rpb24gUGFfVGVybWluYXRlKCkgewogIHJldHVybiBjYWxsKCdQYV9UZXJtaW5hdGUnKTsKfQoKLyoqCiAqIEBmdW5jdGlvbiBQYV9HZXRIb3N0QXBpQ291bnQKICoKICogQHJldHVybiAgIHtOdW1iZXJ9ICAgICAgICAgTnVtYmVyIG9mIGhvc3QgQVBJcwogKi8KZGVmaW5lKCdQYV9HZXRIb3N0QXBpQ291bnQnLCBkbHN5bShsaWJwb3J0YXVkaW8sICdQYV9HZXRIb3N0QXBpQ291bnQnKSwgbnVsbCwgJ2ludCcpOwpleHBvcnQgZnVuY3Rpb24gUGFfR2V0SG9zdEFwaUNvdW50KCkgewogIHJldHVybiBjYWxsKCdQYV9HZXRIb3N0QXBpQ291bnQnKTsKfQoKLyoqCiAqIEBmdW5jdGlvbiBQYV9HZXREZWZhdWx0SG9zdEFwaQogKgogKiBAcmV0dXJuICAge051bWJlcn0gICAgICAgICBJbmRleCBvZiB0aGUgZGVmYXVsdCBob3N0IEFQSQogKi8KZGVmaW5lKCdQYV9HZXREZWZhdWx0SG9zdEFwaScsIGRsc3ltKGxpYnBvcnRhdWRpbywgJ1BhX0dldERlZmF1bHRIb3N0QXBpJyksIG51bGwsICdpbnQnKTsKZXhwb3J0IGZ1bmN0aW9uIFBhX0dldERlZmF1bHRIb3N0QXBpKCkgewogIHJldHVybiBjYWxsKCdQYV9HZXREZWZhdWx0SG9zdEFwaScpOwp9CgovKioKICogQGZ1bmN0aW9uIFBhX0dldEhvc3RBcGlJbmZvCiAqCiAqIEBwYXJhbSAgICB7TnVtYmVyfSAgICAgICAgQSB2YWxpZCBob3N0IEFQSSBpbmRleCByYW5naW5nIGZyb20gMCB0byAoUGFfR2V0SG9zdEFwaUNvdW50KCktMSkKICoKICogQHJldHVybiAgIHtQYUhvc3RBcGlJbmZvfG51bGx9ICAgQSBwb2ludGVyIHRvIGFuIGltbXV0YWJsZSBQYUhvc3RBcGlJbmZvIHN0cnVjdHVyZSBkZXNjcmliaW5nIGEgc3BlY2lmaWMgaG9zdCBBUEkuIElmIHRoZSBob3N0QXBpIHBhcmFtZXRlciBpcyBvdXQgb2YgcmFuZ2Ugb3IgYW4gZXJyb3IgaXMgZW5jb3VudGVyZWQsIHRoZSBmdW5jdGlvbiByZXR1cm5zIE5VTEwuCiAqLwpkZWZpbmUoJ1BhX0dldEhvc3RBcGlJbmZvJywgZGxzeW0obGlicG9ydGF1ZGlvLCAnUGFfR2V0SG9zdEFwaUluZm8nKSwgbnVsbCwgJ3ZvaWQgKicsICdpbnQnKTsKZXhwb3J0IGZ1bmN0aW9uIFBhX0dldEhvc3RBcGlJbmZvKGhvc3RBcGkpIHsKICBjb25zdCByZXN1bHQgPSBjYWxsKCdQYV9HZXRIb3N0QXBpSW5mbycsIGhvc3RBcGkpOwogIHJldHVybiByZXN1bHQgPyBQYUhvc3RBcGlJbmZvLmZyb20ocmVzdWx0KSA6IG51bGw7Cn0KCi8qKgogKiBAZnVuY3Rpb24gUGFfSG9zdEFwaVR5cGVJZFRvSG9zdEFwaUluZGV4CiAqCiAqIEBwYXJhbSAgICB7TnVtYmVyfSAgICAgICAgdHlwZSAgICAgQSB1bmlxdWUgaG9zdCBBUEkgaWRlbnRpZmllciBiZWxvbmdpbmcgdG8gdGhlIFBhSG9zdEFwaVR5cGVJZAogZW51bWVyYXRpb24uCgogKgogKiBAcmV0dXJuICAge051bWJlcn0gICAgICAgIEEgdmFsaWQgUGFIb3N0QXBpSW5kZXggcmFuZ2luZyBmcm9tIDAgdG8gKFBhX0dldEhvc3RBcGlDb3VudCgpLTEpIG9yLCBhIFBhRXJyb3JDb2RlICh3aGljaCBhcmUgYWx3YXlzIG5lZ2F0aXZlKSBpZiBQb3J0QXVkaW8gaXMgbm90IGluaXRpYWxpemVkIG9yIGFuIGVycm9yIGlzIGVuY291bnRlcmVkLgogKi8KZGVmaW5lKCdQYV9Ib3N0QXBpVHlwZUlkVG9Ib3N0QXBpSW5kZXgnLCBkbHN5bShsaWJwb3J0YXVkaW8sICdQYV9Ib3N0QXBpVHlwZUlkVG9Ib3N0QXBpSW5kZXgnKSwgbnVsbCwgJ2ludCcsICdpbnQnKTsKZXhwb3J0IGZ1bmN0aW9uIFBhX0hvc3RBcGlUeXBlSWRUb0hvc3RBcGlJbmRleCh0eXBlKSB7CiAgcmV0dXJuIGNhbGwoJ1BhX0hvc3RBcGlUeXBlSWRUb0hvc3RBcGlJbmRleCcsIHR5cGUpOwp9CgovKioKICogQGZ1bmN0aW9uIFBhX0hvc3RBcGlEZXZpY2VJbmRleFRvRGV2aWNlSW5kZXgKICoKICogQHBhcmFtICAgIHtOdW1iZXJ9ICAgICBob3N0QXBpICAgICAgICAgICAgICBIb3N0IEFQSSBpbmRleAogKiBAcGFyYW0gICAge051bWJlcn0gICAgIGhvc3RBcGlEZXZpY2VJbmRleCAgIGhvc3QtQVBJLXNwZWNpZmljIGRldmljZSBpbmRleCAKICoKICogQHJldHVybiAgIHtOdW1iZXJ9ICAgICAgICBBIG5vbi1uZWdhdGl2ZSBQYURldmljZUluZGV4IHJhbmdpbmcgZnJvbSAwIHRvIChQYV9HZXREZXZpY2VDb3VudCgpLTEpIG9yLCBhIFBhRXJyb3JDb2RlICh3aGljaCBhcmUgYWx3YXlzIG5lZ2F0aXZlKSBpZiBQb3J0QXVkaW8gaXMgbm90IGluaXRpYWxpemVkIG9yIGFuIGVycm9yIGlzIGVuY291bnRlcmVkLgogKi8KZGVmaW5lKCdQYV9Ib3N0QXBpRGV2aWNlSW5kZXhUb0RldmljZUluZGV4JywgZGxzeW0obGlicG9ydGF1ZGlvLCAnUGFfSG9zdEFwaURldmljZUluZGV4VG9EZXZpY2VJbmRleCcpLCBudWxsLCAnaW50JywgJ2ludCcsICdpbnQnKTsKZXhwb3J0IGZ1bmN0aW9uIFBhX0hvc3RBcGlEZXZpY2VJbmRleFRvRGV2aWNlSW5kZXgoaG9zdEFwaSwgaG9zdEFwaURldmljZUluZGV4KSB7CiAgcmV0dXJuIGNhbGwoJ1BhX0hvc3RBcGlEZXZpY2VJbmRleFRvRGV2aWNlSW5kZXgnLCBob3N0QXBpLCBob3N0QXBpRGV2aWNlSW5kZXgpOwp9CgovKioKICogQGZ1bmN0aW9uIFBhX0dldExhc3RIb3N0RXJyb3JJbmZvCiAqCiAqIEByZXR1cm4gICB7TnVtYmVyfQogKi8KZGVmaW5lKCdQYV9HZXRMYXN0SG9zdEVycm9ySW5mbycsIGRsc3ltKGxpYnBvcnRhdWRpbywgJ1BhX0dldExhc3RIb3N0RXJyb3JJbmZvJyksIG51bGwsICd2b2lkIConKTsKZXhwb3J0IGZ1bmN0aW9uIFBhX0dldExhc3RIb3N0RXJyb3JJbmZvKCkgewogIGNvbnN0IHJlc3VsdCA9IGNhbGwoJ1BhX0dldExhc3RIb3N0RXJyb3JJbmZvJyk7CiAgcmV0dXJuIHJlc3VsdCA/IFBhSG9zdEVycm9ySW5mby5mcm9tKHJlc3VsdCkgOiBudWxsOwp9CgovKioKICogQGZ1bmN0aW9uIFBhX0dldERldmljZUNvdW50CiAqCiAqIEByZXR1cm4gICB7TnVtYmVyfQogKi8KZGVmaW5lKCdQYV9HZXREZXZpY2VDb3VudCcsIGRsc3ltKGxpYnBvcnRhdWRpbywgJ1BhX0dldERldmljZUNvdW50JyksIG51bGwsICdpbnQnKTsKZXhwb3J0IGZ1bmN0aW9uIFBhX0dldERldmljZUNvdW50KCkgewogIHJldHVybiBjYWxsKCdQYV9HZXREZXZpY2VDb3VudCcpOwp9CgovKioKICogQGZ1bmN0aW9uIFBhX0dldERlZmF1bHRJbnB1dERldmljZQogKgogKiBAcmV0dXJuICAge051bWJlcn0KICovCmRlZmluZSgnUGFfR2V0RGVmYXVsdElucHV0RGV2aWNlJywgZGxzeW0obGlicG9ydGF1ZGlvLCAnUGFfR2V0RGVmYXVsdElucHV0RGV2aWNlJyksIG51bGwsICdpbnQnKTsKZXhwb3J0IGZ1bmN0aW9uIFBhX0dldERlZmF1bHRJbnB1dERldmljZSgpIHsKICByZXR1cm4gY2FsbCgnUGFfR2V0RGVmYXVsdElucHV0RGV2aWNlJyk7Cn0KCi8qKgogKiBAZnVuY3Rpb24gUGFfR2V0RGVmYXVsdE91dHB1dERldmljZQogKgogKiBAcmV0dXJuICAge051bWJlcn0KICovCmRlZmluZSgnUGFfR2V0RGVmYXVsdE91dHB1dERldmljZScsIGRsc3ltKGxpYnBvcnRhdWRpbywgJ1BhX0dldERlZmF1bHRPdXRwdXREZXZpY2UnKSwgbnVsbCwgJ2ludCcpOwpleHBvcnQgZnVuY3Rpb24gUGFfR2V0RGVmYXVsdE91dHB1dERldmljZSgpIHsKICByZXR1cm4gY2FsbCgnUGFfR2V0RGVmYXVsdE91dHB1dERldmljZScpOwp9CgovKioKICogQGZ1bmN0aW9uIFBhX0dldERldmljZUluZm8KICoKICogQHBhcmFtICAgIHtOdW1iZXJ9ICAgICAgICBkZXZpY2UKICoKICogQHJldHVybiAgIHtOdW1iZXJ9CiAqLwpkZWZpbmUoJ1BhX0dldERldmljZUluZm8nLCBkbHN5bShsaWJwb3J0YXVkaW8sICdQYV9HZXREZXZpY2VJbmZvJyksIG51bGwsICd2b2lkIConLCAnaW50Jyk7CmV4cG9ydCBmdW5jdGlvbiBQYV9HZXREZXZpY2VJbmZvKGRldmljZSkgewogIGNvbnN0IHJlc3VsdCA9IGNhbGwoJ1BhX0dldERldmljZUluZm8nLCBkZXZpY2UpOwogIHJldHVybiByZXN1bHQgPyBQYURldmljZUluZm8uZnJvbShyZXN1bHQpIDogbnVsbDsKfQoKLyoqCiAqIEBmdW5jdGlvbiBQYV9Jc0Zvcm1hdFN1cHBvcnRlZAogKgogKiBAcGFyYW0gICAge051bWJlcn0gICAgICAgIGlucHV0UGFyYW1ldGVycwogKiBAcGFyYW0gICAge051bWJlcn0gICAgICAgIG91dHB1dFBhcmFtZXRlcnMKICogQHBhcmFtICAgIHtOdW1iZXJ9ICAgICAgICBzYW1wbGVSYXRlCiAqCiAqIEByZXR1cm4gICB7TnVtYmVyfQogKi8KZGVmaW5lKCdQYV9Jc0Zvcm1hdFN1cHBvcnRlZCcsIGRsc3ltKGxpYnBvcnRhdWRpbywgJ1BhX0lzRm9ybWF0U3VwcG9ydGVkJyksIG51bGwsICdpbnQnLCAndm9pZCAqJywgJ3ZvaWQgKicsICdkb3VibGUnKTsKZXhwb3J0IGZ1bmN0aW9uIFBhX0lzRm9ybWF0U3VwcG9ydGVkKGlucHV0UGFyYW1ldGVycywgb3V0cHV0UGFyYW1ldGVycywgc2FtcGxlUmF0ZSkgewogIHJldHVybiBjYWxsKCdQYV9Jc0Zvcm1hdFN1cHBvcnRlZCcsIGlucHV0UGFyYW1ldGVycywgb3V0cHV0UGFyYW1ldGVycywgc2FtcGxlUmF0ZSk7Cn0KCi8qKgogKiBAZnVuY3Rpb24gUGFfT3BlblN0cmVhbQogKgogKiBAcGFyYW0gICAge051bWJlcn0gICAgICAgIHN0cmVhbQogKiBAcGFyYW0gICAge051bWJlcn0gICAgICAgIGlucHV0UGFyYW1ldGVycwogKiBAcGFyYW0gICAge051bWJlcn0gICAgICAgIG91dHB1dFBhcmFtZXRlcnMKICogQHBhcmFtICAgIHtOdW1iZXJ9ICAgICAgICBzYW1wbGVSYXRlCiAqIEBwYXJhbSAgICB7TnVtYmVyfSAgICAgICAgZnJhbWVzUGVyQnVmZmVyCiAqIEBwYXJhbSAgICB7TnVtYmVyfSAgICAgICAgc3RyZWFtRmxhZ3MKICogQHBhcmFtICAgIHtOdW1iZXJ9ICAgICAgICBzdHJlYW1DYWxsYmFjawogKiBAcGFyYW0gICAge051bWJlcn0gICAgICAgIHVzZXJEYXRhCiAqCiAqIEByZXR1cm4gICB7TnVtYmVyfQogKi8KZGVmaW5lKCdQYV9PcGVuU3RyZWFtJywgZGxzeW0obGlicG9ydGF1ZGlvLCAnUGFfT3BlblN0cmVhbScpLCBudWxsLCAnaW50JywgJ3ZvaWQgKicsICd2b2lkIConLCAndm9pZCAqJywgJ2RvdWJsZScsICd1bnNpZ25lZCBsb25nJywgJ3Vuc2lnbmVkIGxvbmcnLCAndm9pZCAqJywgJ3ZvaWQgKicpOwpleHBvcnQgZnVuY3Rpb24gUGFfT3BlblN0cmVhbShzdHJlYW0sIGlucHV0UGFyYW1ldGVycywgb3V0cHV0UGFyYW1ldGVycywgc2FtcGxlUmF0ZSwgZnJhbWVzUGVyQnVmZmVyLCBzdHJlYW1GbGFncywgc3RyZWFtQ2FsbGJhY2ssIHVzZXJEYXRhKSB7CiAgbGV0IGNiOwoKICB0eXBlb2Ygc3RyZWFtID09ICdmdW5jdGlvbicgJiYgKChjYiA9IHN0cmVhbSksIChzdHJlYW0gPSBuZXcgQXJyYXlCdWZmZXIoMTYpKSk7CgogIFBhX1Jlc3VsdCA9IGNhbGwoJ1BhX09wZW5TdHJlYW0nLCBzdHJlYW0sIGlucHV0UGFyYW1ldGVycywgb3V0cHV0UGFyYW1ldGVycywgc2FtcGxlUmF0ZSwgZnJhbWVzUGVyQnVmZmVyLCBzdHJlYW1GbGFncywgc3RyZWFtQ2FsbGJhY2ssIHVzZXJEYXRhKTsKCiAgY2IgJiYgY2IoR2V0U3RyZWFtKCkpOwoKICByZXR1cm4gUGFfUmVzdWx0Owp9CgovKioKICogQGZ1bmN0aW9uIFBhX09wZW5EZWZhdWx0U3RyZWFtCiAqCiAqIEBwYXJhbSAgICB7TnVtYmVyfSAgICAgICAgc3RyZWFtCiAqIEBwYXJhbSAgICB7TnVtYmVyfSAgICAgICAgbnVtSW5wdXRDaGFubmVscwogKiBAcGFyYW0gICAge051bWJlcn0gICAgICAgIG51bU91dHB1dENoYW5uZWxzCiAqIEBwYXJhbSAgICB7TnVtYmVyfSAgICAgICAgc2FtcGxlRm9ybWF0CiAqIEBwYXJhbSAgICB7TnVtYmVyfSAgICAgICAgc2FtcGxlUmF0ZQogKiBAcGFyYW0gICAge051bWJlcn0gICAgICAgIGZyYW1lc1BlckJ1ZmZlcgogKiBAcGFyYW0gICAge051bWJlcn0gICAgICAgIHN0cmVhbUNhbGxiYWNrCiAqIEBwYXJhbSAgICB7TnVtYmVyfSAgICAgICAgdXNlckRhdGEKICoKICogQHJldHVybiAgIHtOdW1iZXJ9CiAqLwpkZWZpbmUoJ1BhX09wZW5EZWZhdWx0U3RyZWFtJywgZGxzeW0obGlicG9ydGF1ZGlvLCAnUGFfT3BlbkRlZmF1bHRTdHJlYW0nKSwgbnVsbCwgJ2ludCcsICd2b2lkIConLCAnaW50JywgJ2ludCcsICd1bnNpZ25lZCBsb25nJywgJ2RvdWJsZScsICd1bnNpZ25lZCBsb25nJywgJ3ZvaWQgKicsICd2b2lkIConKTsKZXhwb3J0IGZ1bmN0aW9uIFBhX09wZW5EZWZhdWx0U3RyZWFtKHN0cmVhbSwgbnVtSW5wdXRDaGFubmVscywgbnVtT3V0cHV0Q2hhbm5lbHMsIHNhbXBsZUZvcm1hdCwgc2FtcGxlUmF0ZSwgZnJhbWVzUGVyQnVmZmVyLCBzdHJlYW1DYWxsYmFjaywgdXNlckRhdGEpIHsKICByZXR1cm4gY2FsbCgnUGFfT3BlbkRlZmF1bHRTdHJlYW0nLCBzdHJlYW0sIG51bUlucHV0Q2hhbm5lbHMsIG51bU91dHB1dENoYW5uZWxzLCBzYW1wbGVGb3JtYXQsIHNhbXBsZVJhdGUsIGZyYW1lc1BlckJ1ZmZlciwgc3RyZWFtQ2FsbGJhY2ssIHVzZXJEYXRhKTsKfQoKLyoqCiAqIEBmdW5jdGlvbiBQYV9DbG9zZVN0cmVhbQogKgogKiBAcGFyYW0gICAge051bWJlcn0gICAgICAgIHN0cmVhbQogKgogKiBAcmV0dXJuICAge051bWJlcn0KICovCmRlZmluZSgnUGFfQ2xvc2VTdHJlYW0nLCBkbHN5bShsaWJwb3J0YXVkaW8sICdQYV9DbG9zZVN0cmVhbScpLCBudWxsLCAnaW50JywgJ3ZvaWQgKicpOwpleHBvcnQgZnVuY3Rpb24gUGFfQ2xvc2VTdHJlYW0oc3RyZWFtKSB7CiAgcmV0dXJuIGNhbGwoJ1BhX0Nsb3NlU3RyZWFtJywgR2V0U3RyZWFtKHN0cmVhbSkpOwp9CgovKioKICogQGZ1bmN0aW9uIFBhX1NldFN0cmVhbUZpbmlzaGVkQ2FsbGJhY2sKICoKICogQHBhcmFtICAgIHtOdW1iZXJ9ICAgICAgICBzdHJlYW0KICogQHBhcmFtICAgIHtOdW1iZXJ9ICAgICAgICBzdHJlYW1GaW5pc2hlZENhbGxiYWNrCiAqCiAqIEByZXR1cm4gICB7TnVtYmVyfQogKi8KZGVmaW5lKCdQYV9TZXRTdHJlYW1GaW5pc2hlZENhbGxiYWNrJywgZGxzeW0obGlicG9ydGF1ZGlvLCAnUGFfU2V0U3RyZWFtRmluaXNoZWRDYWxsYmFjaycpLCBudWxsLCAnaW50JywgJ3ZvaWQgKicsICd2b2lkIConKTsKZXhwb3J0IGZ1bmN0aW9uIFBhX1NldFN0cmVhbUZpbmlzaGVkQ2FsbGJhY2soc3RyZWFtLCBzdHJlYW1GaW5pc2hlZENhbGxiYWNrKSB7CiAgcmV0dXJuIGNhbGwoJ1BhX1NldFN0cmVhbUZpbmlzaGVkQ2FsbGJhY2snLCBHZXRTdHJlYW0oc3RyZWFtKSwgc3RyZWFtRmluaXNoZWRDYWxsYmFjayk7Cn0KCi8qKgogKiBAZnVuY3Rpb24gUGFfU3RhcnRTdHJlYW0KICoKICogQHBhcmFtICAgIHtOdW1iZXJ9ICAgICAgICBzdHJlYW0KICoKICogQHJldHVybiAgIHtOdW1iZXJ9CiAqLwpkZWZpbmUoJ1BhX1N0YXJ0U3RyZWFtJywgZGxzeW0obGlicG9ydGF1ZGlvLCAnUGFfU3RhcnRTdHJlYW0nKSwgbnVsbCwgJ2ludCcsICd2b2lkIConKTsKZXhwb3J0IGZ1bmN0aW9uIFBhX1N0YXJ0U3RyZWFtKHN0cmVhbSkgewogIHJldHVybiBjYWxsKCdQYV9TdGFydFN0cmVhbScsIEdldFN0cmVhbShzdHJlYW0pKTsKfQoKLyoqCiAqIEBmdW5jdGlvbiBQYV9TdG9wU3RyZWFtCiAqCiAqIEBwYXJhbSAgICB7TnVtYmVyfSAgICAgICAgc3RyZWFtCiAqCiAqIEByZXR1cm4gICB7TnVtYmVyfQogKi8KZGVmaW5lKCdQYV9TdG9wU3RyZWFtJywgZGxzeW0obGlicG9ydGF1ZGlvLCAnUGFfU3RvcFN0cmVhbScpLCBudWxsLCAnaW50JywgJ3ZvaWQgKicpOwpleHBvcnQgZnVuY3Rpb24gUGFfU3RvcFN0cmVhbShzdHJlYW0pIHsKICByZXR1cm4gY2FsbCgnUGFfU3RvcFN0cmVhbScsIEdldFN0cmVhbShzdHJlYW0pKTsKfQoKLyoqCiAqIEBmdW5jdGlvbiBQYV9BYm9ydFN0cmVhbQogKgogKiBAcGFyYW0gICAge051bWJlcn0gICAgICAgIHN0cmVhbQogKgogKiBAcmV0dXJuICAge051bWJlcn0KICovCmRlZmluZSgnUGFfQWJvcnRTdHJlYW0nLCBkbHN5bShsaWJwb3J0YXVkaW8sICdQYV9BYm9ydFN0cmVhbScpLCBudWxsLCAnaW50JywgJ3ZvaWQgKicpOwpleHBvcnQgZnVuY3Rpb24gUGFfQWJvcnRTdHJlYW0oc3RyZWFtKSB7CiAgcmV0dXJuIGNhbGwoJ1BhX0Fib3J0U3RyZWFtJywgR2V0U3RyZWFtKHN0cmVhbSkpOwp9CgovKioKICogQGZ1bmN0aW9uIFBhX0lzU3RyZWFtU3RvcHBlZAogKgogKiBAcGFyYW0gICAge051bWJlcn0gICAgICAgIHN0cmVhbQogKgogKiBAcmV0dXJuICAge051bWJlcn0KICovCmRlZmluZSgnUGFfSXNTdHJlYW1TdG9wcGVkJywgZGxzeW0obGlicG9ydGF1ZGlvLCAnUGFfSXNTdHJlYW1TdG9wcGVkJyksIG51bGwsICdpbnQnLCAndm9pZCAqJyk7CmV4cG9ydCBmdW5jdGlvbiBQYV9Jc1N0cmVhbVN0b3BwZWQoc3RyZWFtKSB7CiAgcmV0dXJuIGNhbGwoJ1BhX0lzU3RyZWFtU3RvcHBlZCcsIEdldFN0cmVhbShzdHJlYW0pKTsKfQoKLyoqCiAqIEBmdW5jdGlvbiBQYV9Jc1N0cmVhbUFjdGl2ZQogKgogKiBAcGFyYW0gICAge051bWJlcn0gICAgICAgIHN0cmVhbQogKgogKiBAcmV0dXJuICAge051bWJlcn0KICovCmRlZmluZSgnUGFfSXNTdHJlYW1BY3RpdmUnLCBkbHN5bShsaWJwb3J0YXVkaW8sICdQYV9Jc1N0cmVhbUFjdGl2ZScpLCBudWxsLCAnaW50JywgJ3ZvaWQgKicpOwpleHBvcnQgZnVuY3Rpb24gUGFfSXNTdHJlYW1BY3RpdmUoc3RyZWFtKSB7CiAgcmV0dXJuIGNhbGwoJ1BhX0lzU3RyZWFtQWN0aXZlJywgR2V0U3RyZWFtKHN0cmVhbSkpOwp9CgovKioKICogQGZ1bmN0aW9uIFBhX0dldFN0cmVhbUluZm8KICoKICogQHBhcmFtICAgIHtOdW1iZXJ9ICAgICAgICBzdHJlYW0KICoKICogQHJldHVybiAgIHtOdW1iZXJ9CiAqLwpkZWZpbmUoJ1BhX0dldFN0cmVhbUluZm8nLCBkbHN5bShsaWJwb3J0YXVkaW8sICdQYV9HZXRTdHJlYW1JbmZvJyksIG51bGwsICd2b2lkIConLCAndm9pZCAqJyk7CmV4cG9ydCBmdW5jdGlvbiBQYV9HZXRTdHJlYW1JbmZvKHN0cmVhbSkgewogIGNvbnN0IHJlc3VsdCA9IGNhbGwoJ1BhX0dldFN0cmVhbUluZm8nLCBHZXRTdHJlYW0oc3RyZWFtKSk7CgogIHJldHVybiByZXN1bHQgPyBQYVN0cmVhbUluZm8uZnJvbShyZXN1bHQpIDogbnVsbDsKfQoKLyoqCiAqIEBmdW5jdGlvbiBQYV9HZXRTdHJlYW1UaW1lCiAqCiAqIEBwYXJhbSAgICB7TnVtYmVyfSAgICAgICAgc3RyZWFtCiAqCiAqIEByZXR1cm4gICB7TnVtYmVyfQogKi8KZGVmaW5lKCdQYV9HZXRTdHJlYW1UaW1lJywgZGxzeW0obGlicG9ydGF1ZGlvLCAnUGFfR2V0U3RyZWFtVGltZScpLCBudWxsLCAnZG91YmxlJywgJ3ZvaWQgKicpOwpleHBvcnQgZnVuY3Rpb24gUGFfR2V0U3RyZWFtVGltZShzdHJlYW0pIHsKICByZXR1cm4gY2FsbCgnUGFfR2V0U3RyZWFtVGltZScsIEdldFN0cmVhbShzdHJlYW0pKTsKfQoKLyoqCiAqIEBmdW5jdGlvbiBQYV9HZXRTdHJlYW1DcHVMb2FkCiAqCiAqIEBwYXJhbSAgICB7TnVtYmVyfSAgICAgICAgc3RyZWFtCiAqCiAqIEByZXR1cm4gICB7TnVtYmVyfQogKi8KZGVmaW5lKCdQYV9HZXRTdHJlYW1DcHVMb2FkJywgZGxzeW0obGlicG9ydGF1ZGlvLCAnUGFfR2V0U3RyZWFtQ3B1TG9hZCcpLCBudWxsLCAnZG91YmxlJywgJ3ZvaWQgKicpOwpleHBvcnQgZnVuY3Rpb24gUGFfR2V0U3RyZWFtQ3B1TG9hZChzdHJlYW0pIHsKICByZXR1cm4gY2FsbCgnUGFfR2V0U3RyZWFtQ3B1TG9hZCcsIEdldFN0cmVhbShzdHJlYW0pKTsKfQoKLyoqCiAqIEBmdW5jdGlvbiBQYV9SZWFkU3RyZWFtCiAqCiAqIEBwYXJhbSAgICB7TnVtYmVyfSAgICAgICAgc3RyZWFtCiAqIEBwYXJhbSAgICB7TnVtYmVyfSAgICAgICAgYnVmZmVyCiAqIEBwYXJhbSAgICB7TnVtYmVyfSAgICAgICAgZnJhbWVzCiAqCiAqIEByZXR1cm4gICB7TnVtYmVyfQogKi8KZGVmaW5lKCdQYV9SZWFkU3RyZWFtJywgZGxzeW0obGlicG9ydGF1ZGlvLCAnUGFfUmVhZFN0cmVhbScpLCBudWxsLCAnaW50JywgJ3ZvaWQgKicsICd2b2lkIConLCAndW5zaWduZWQgbG9uZycpOwpleHBvcnQgZnVuY3Rpb24gUGFfUmVhZFN0cmVhbShzdHJlYW0sIGJ1ZmZlciwgZnJhbWVzKSB7CiAgcmV0dXJuIChQYV9SZXN1bHQgPSBjYWxsKCdQYV9SZWFkU3RyZWFtJywgR2V0U3RyZWFtKHN0cmVhbSksIFBhc3NQb2ludGVyKGJ1ZmZlciksIGZyYW1lcykpOwp9CgovKioKICogQGZ1bmN0aW9uIFBhX1dyaXRlU3RyZWFtCiAqCiAqIEBwYXJhbSAgICB7TnVtYmVyfSAgICAgICAgc3RyZWFtCiAqIEBwYXJhbSAgICB7TnVtYmVyfSAgICAgICAgYnVmZmVyCiAqIEBwYXJhbSAgICB7TnVtYmVyfSAgICAgICAgZnJhbWVzCiAqCiAqIEByZXR1cm4gICB7TnVtYmVyfQogKi8KZGVmaW5lKCdQYV9Xcml0ZVN0cmVhbScsIGRsc3ltKGxpYnBvcnRhdWRpbywgJ1BhX1dyaXRlU3RyZWFtJyksIG51bGwsICdpbnQnLCAndm9pZCAqJywgJ3ZvaWQgKicsICd1bnNpZ25lZCBsb25nJyk7CmV4cG9ydCBmdW5jdGlvbiBQYV9Xcml0ZVN0cmVhbShzdHJlYW0sIGJ1ZmZlciwgZnJhbWVzKSB7CiAgcmV0dXJuIChQYV9SZXN1bHQgPSBjYWxsKCdQYV9Xcml0ZVN0cmVhbScsIEdldFN0cmVhbShzdHJlYW0pLCBQYXNzUG9pbnRlcihidWZmZXIpLCBmcmFtZXMpKTsKfQoKLyoqCiAqIEBmdW5jdGlvbiBQYV9HZXRTdHJlYW1SZWFkQXZhaWxhYmxlCiAqCiAqIEBwYXJhbSAgICB7TnVtYmVyfSAgICAgICAgc3RyZWFtCiAqCiAqIEByZXR1cm4gICB7TnVtYmVyfQogKi8KZGVmaW5lKCdQYV9HZXRTdHJlYW1SZWFkQXZhaWxhYmxlJywgZGxzeW0obGlicG9ydGF1ZGlvLCAnUGFfR2V0U3RyZWFtUmVhZEF2YWlsYWJsZScpLCBudWxsLCAnbG9uZycsICd2b2lkIConKTsKZXhwb3J0IGZ1bmN0aW9uIFBhX0dldFN0cmVhbVJlYWRBdmFpbGFibGUoc3RyZWFtKSB7CiAgcmV0dXJuIGNhbGwoJ1BhX0dldFN0cmVhbVJlYWRBdmFpbGFibGUnLCBHZXRTdHJlYW0oc3RyZWFtKSk7Cn0KCi8qKgogKiBAZnVuY3Rpb24gUGFfR2V0U3RyZWFtV3JpdGVBdmFpbGFibGUKICoKICogQHBhcmFtICAgIHtOdW1iZXJ9ICAgICAgICBzdHJlYW0KICoKICogQHJldHVybiAgIHtOdW1iZXJ9CiAqLwpkZWZpbmUoJ1BhX0dldFN0cmVhbVdyaXRlQXZhaWxhYmxlJywgZGxzeW0obGlicG9ydGF1ZGlvLCAnUGFfR2V0U3RyZWFtV3JpdGVBdmFpbGFibGUnKSwgbnVsbCwgJ2xvbmcnLCAndm9pZCAqJyk7CmV4cG9ydCBmdW5jdGlvbiBQYV9HZXRTdHJlYW1Xcml0ZUF2YWlsYWJsZShzdHJlYW0pIHsKICByZXR1cm4gY2FsbCgnUGFfR2V0U3RyZWFtV3JpdGVBdmFpbGFibGUnLCBHZXRTdHJlYW0oc3RyZWFtKSk7Cn0KCi8qKgogKiBAZnVuY3Rpb24gUGFfR2V0U3RyZWFtSG9zdEFwaVR5cGUKICoKICogQHBhcmFtICAgIHtOdW1iZXJ9ICAgICAgICBzdHJlYW0KICoKICogQHJldHVybiAgIHt1bmRlZmluZWR9CiAqLwpkZWZpbmUoJ1BhX0dldFN0cmVhbUhvc3RBcGlUeXBlJywgZGxzeW0obGlicG9ydGF1ZGlvLCAnUGFfR2V0U3RyZWFtSG9zdEFwaVR5cGUnKSwgbnVsbCwgJ2xvbmcnLCAndm9pZCAqJyk7CmV4cG9ydCBmdW5jdGlvbiBQYV9HZXRTdHJlYW1Ib3N0QXBpVHlwZShzdHJlYW0pIHsKICByZXR1cm4gY2FsbCgnUGFfR2V0U3RyZWFtSG9zdEFwaVR5cGUnLCBHZXRTdHJlYW0oc3RyZWFtKSk7Cn0KCi8qKgogKiBAZnVuY3Rpb24gUGFfR2V0U2FtcGxlU2l6ZQogKgogKiBAcGFyYW0gICAge051bWJlcn0gICAgICAgIGZvcm1hdAogKgogKiBAcmV0dXJuICAge051bWJlcn0KICovCmRlZmluZSgnUGFfR2V0U2FtcGxlU2l6ZScsIGRsc3ltKGxpYnBvcnRhdWRpbywgJ1BhX0dldFNhbXBsZVNpemUnKSwgbnVsbCwgJ2ludCcsICd1bnNpZ25lZCBsb25nJyk7CmV4cG9ydCBmdW5jdGlvbiBQYV9HZXRTYW1wbGVTaXplKGZvcm1hdCkgewogIHJldHVybiBjYWxsKCdQYV9HZXRTYW1wbGVTaXplJywgZm9ybWF0KTsKfQoKLyoqCiAqIEBmdW5jdGlvbiBQYV9TbGVlcAogKgogKiBAcGFyYW0gICAge051bWJlcn0gICAgICAgIG1zZWMKICovCmRlZmluZSgnUGFfU2xlZXAnLCBkbHN5bShsaWJwb3J0YXVkaW8sICdQYV9TbGVlcCcpLCBudWxsLCAndm9pZCcsICdsb25nJyk7CmV4cG9ydCBmdW5jdGlvbiBQYV9TbGVlcChtc2VjKSB7CiAgY2FsbCgnUGFfU2xlZXAnLCBtc2VjKTsKfQoKZXhwb3J0IGZ1bmN0aW9uIFBhX0dldERldmljZXMoKSB7CiAgcmV0dXJuIEFycmF5LmZyb20oeyBsZW5ndGg6IFBhX0dldERldmljZUNvdW50KCkgfSkubWFwKChkLCBpKSA9PiBQYV9HZXREZXZpY2VJbmZvKGkpKTsKfQoAAAAAAAAAAMJyAAAAAAAAAAAAAAAAAAAAAAAAwnIAAAAAAAAAAAAAAAAAAAAAAADCcgAAAAAAAAAAAAAAAAAAAAAAAMJyAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgzEAAAAAAACDMQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "quickjs/quickjs.h",
			"settings":
			{
				"buffer_size": 40037,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#ifndef PORTAUDIO_H\n#define PORTAUDIO_H\n/*\n * $Id$\n * PortAudio Portable Real-Time Audio Library\n * PortAudio API Header File\n * Latest version available at: http://www.portaudio.com/\n *\n * Copyright (c) 1999-2002 Ross Bencina and Phil Burk\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files\n * (the \"Software\"), to deal in the Software without restriction,\n * including without limitation the rights to use, copy, modify, merge,\n * publish, distribute, sublicense, and/or sell copies of the Software,\n * and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR\n * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF\n * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/*\n * The text above constitutes the entire PortAudio license; however, \n * the PortAudio community also makes the following non-binding requests:\n *\n * Any person wishing to distribute modifications to the Software is\n * requested to send the modifications to the original developer so that\n * they can be incorporated into the canonical version. It is also \n * requested that these non-binding requests be included along with the \n * license above.\n */\n\n/** @file\n @ingroup public_header\n @brief The portable PortAudio API.\n*/\n\n\n#ifdef __cplusplus\nextern \"C\"\n{\n#endif /* __cplusplus */\n\n/** Retrieve the release number of the currently running PortAudio build.\n For example, for version \"19.5.1\" this will return 0x00130501.\n\n @see paMakeVersionNumber\n*/\nint Pa_GetVersion( void );\n\n/** Retrieve a textual description of the current PortAudio build,\n e.g. \"PortAudio V19.5.0-devel, revision 1952M\".\n The format of the text may change in the future. Do not try to parse the\n returned string.\n\n @deprecated As of 19.5.0, use Pa_GetVersionInfo()->versionText instead.\n*/\nconst char* Pa_GetVersionText( void );\n\n/**\n Generate a packed integer version number in the same format used\n by Pa_GetVersion(). Use this to compare a specified version number with\n the currently running version. For example:\n\n @code\n     if( Pa_GetVersion() < paMakeVersionNumber(19,5,1) ) {}\n @endcode\n\n @see Pa_GetVersion, Pa_GetVersionInfo\n @version Available as of 19.5.0.\n*/\n#define paMakeVersionNumber(major, minor, subminor) \\\n    (((major)&0xFF)<<16 | ((minor)&0xFF)<<8 | ((subminor)&0xFF))\n\n\n/**\n A structure containing PortAudio API version information.\n @see Pa_GetVersionInfo, paMakeVersionNumber\n @version Available as of 19.5.0.\n*/\ntypedef struct PaVersionInfo {\n    int versionMajor;\n    int versionMinor;\n    int versionSubMinor;\n    /**\n     This is currently the Git revision hash but may change in the future.\n     The versionControlRevision is updated by running a script before compiling the library.\n     If the update does not occur, this value may refer to an earlier revision.\n    */\n    const char *versionControlRevision;\n    /** Version as a string, for example \"PortAudio V19.5.0-devel, revision 1952M\" */\n    const char *versionText;\n} PaVersionInfo;\n    \n/** Retrieve version information for the currently running PortAudio build.\n @return A pointer to an immutable PaVersionInfo structure.\n\n @note This function can be called at any time. It does not require PortAudio\n to be initialized. The structure pointed to is statically allocated. Do not\n attempt to free it or modify it.\n\n @see PaVersionInfo, paMakeVersionNumber\n @version Available as of 19.5.0.\n*/\nconst PaVersionInfo* Pa_GetVersionInfo();\n\n\n/** Error codes returned by PortAudio functions.\n Note that with the exception of paNoError, all PaErrorCodes are negative.\n*/\n\ntypedef int PaError;\ntypedef enum PaErrorCode\n{\n    paNoError = 0,\n\n    paNotInitialized = -10000,\n    paUnanticipatedHostError,\n    paInvalidChannelCount,\n    paInvalidSampleRate,\n    paInvalidDevice,\n    paInvalidFlag,\n    paSampleFormatNotSupported,\n    paBadIODeviceCombination,\n    paInsufficientMemory,\n    paBufferTooBig,\n    paBufferTooSmall,\n    paNullCallback,\n    paBadStreamPtr,\n    paTimedOut,\n    paInternalError,\n    paDeviceUnavailable,\n    paIncompatibleHostApiSpecificStreamInfo,\n    paStreamIsStopped,\n    paStreamIsNotStopped,\n    paInputOverflowed,\n    paOutputUnderflowed,\n    paHostApiNotFound,\n    paInvalidHostApi,\n    paCanNotReadFromACallbackStream,\n    paCanNotWriteToACallbackStream,\n    paCanNotReadFromAnOutputOnlyStream,\n    paCanNotWriteToAnInputOnlyStream,\n    paIncompatibleStreamHostApi,\n    paBadBufferPtr\n} PaErrorCode;\n\n\n/** Translate the supplied PortAudio error code into a human readable\n message.\n*/\nconst char *Pa_GetErrorText( PaError errorCode );\n\n\n/** Library initialization function - call this before using PortAudio.\n This function initializes internal data structures and prepares underlying\n host APIs for use.  With the exception of Pa_GetVersion(), Pa_GetVersionText(),\n and Pa_GetErrorText(), this function MUST be called before using any other\n PortAudio API functions.\n\n If Pa_Initialize() is called multiple times, each successful \n call must be matched with a corresponding call to Pa_Terminate(). \n Pairs of calls to Pa_Initialize()/Pa_Terminate() may overlap, and are not \n required to be fully nested.\n\n Note that if Pa_Initialize() returns an error code, Pa_Terminate() should\n NOT be called.\n\n @return paNoError if successful, otherwise an error code indicating the cause\n of failure.\n\n @see Pa_Terminate\n*/\nPaError Pa_Initialize( void );\n\n\n/** Library termination function - call this when finished using PortAudio.\n This function deallocates all resources allocated by PortAudio since it was\n initialized by a call to Pa_Initialize(). In cases where Pa_Initialise() has\n been called multiple times, each call must be matched with a corresponding call\n to Pa_Terminate(). The final matching call to Pa_Terminate() will automatically\n close any PortAudio streams that are still open.\n\n Pa_Terminate() MUST be called before exiting a program which uses PortAudio.\n Failure to do so may result in serious resource leaks, such as audio devices\n not being available until the next reboot.\n\n @return paNoError if successful, otherwise an error code indicating the cause\n of failure.\n \n @see Pa_Initialize\n*/\nPaError Pa_Terminate( void );\n\n\n\n/** The type used to refer to audio devices. Values of this type usually\n range from 0 to (Pa_GetDeviceCount()-1), and may also take on the PaNoDevice\n and paUseHostApiSpecificDeviceSpecification values.\n\n @see Pa_GetDeviceCount, paNoDevice, paUseHostApiSpecificDeviceSpecification\n*/\ntypedef int PaDeviceIndex;\n\n\n/** A special PaDeviceIndex value indicating that no device is available,\n or should be used.\n\n @see PaDeviceIndex\n*/\n#define paNoDevice ((PaDeviceIndex)-1)\n\n\n/** A special PaDeviceIndex value indicating that the device(s) to be used\n are specified in the host api specific stream info structure.\n\n @see PaDeviceIndex\n*/\n#define paUseHostApiSpecificDeviceSpecification ((PaDeviceIndex)-2)\n\n\n/* Host API enumeration mechanism */\n\n/** The type used to enumerate to host APIs at runtime. Values of this type\n range from 0 to (Pa_GetHostApiCount()-1).\n\n @see Pa_GetHostApiCount\n*/\ntypedef int PaHostApiIndex;\n\n\n/** Retrieve the number of available host APIs. Even if a host API is\n available it may have no devices available.\n\n @return A non-negative value indicating the number of available host APIs\n or, a PaErrorCode (which are always negative) if PortAudio is not initialized\n or an error is encountered.\n\n @see PaHostApiIndex\n*/\nPaHostApiIndex Pa_GetHostApiCount( void );\n\n\n/** Retrieve the index of the default host API. The default host API will be\n the lowest common denominator host API on the current platform and is\n unlikely to provide the best performance.\n\n @return A non-negative value ranging from 0 to (Pa_GetHostApiCount()-1)\n indicating the default host API index or, a PaErrorCode (which are always\n negative) if PortAudio is not initialized or an error is encountered.\n*/\nPaHostApiIndex Pa_GetDefaultHostApi( void );\n\n\n/** Unchanging unique identifiers for each supported host API. This type\n is used in the PaHostApiInfo structure. The values are guaranteed to be\n unique and to never change, thus allowing code to be written that\n conditionally uses host API specific extensions.\n\n New type ids will be allocated when support for a host API reaches\n \"public alpha\" status, prior to that developers should use the\n paInDevelopment type id.\n\n @see PaHostApiInfo\n*/\ntypedef enum PaHostApiTypeId\n{\n    paInDevelopment=0, /* use while developing support for a new host API */\n    paDirectSound=1,\n    paMME=2,\n    paASIO=3,\n    paSoundManager=4,\n    paCoreAudio=5,\n    paOSS=7,\n    paALSA=8,\n    paAL=9,\n    paBeOS=10,\n    paWDMKS=11,\n    paJACK=12,\n    paWASAPI=13,\n    paAudioScienceHPI=14\n} PaHostApiTypeId;\n\n\n/** A structure containing information about a particular host API. */\n\ntypedef struct PaHostApiInfo\n{\n    /** this is struct version 1 */\n    int structVersion;\n    /** The well known unique identifier of this host API @see PaHostApiTypeId */\n    PaHostApiTypeId type;\n    /** A textual description of the host API for display on user interfaces. */\n    const char *name;\n\n    /**  The number of devices belonging to this host API. This field may be\n     used in conjunction with Pa_HostApiDeviceIndexToDeviceIndex() to enumerate\n     all devices for this host API.\n     @see Pa_HostApiDeviceIndexToDeviceIndex\n    */\n    int deviceCount;\n\n    /** The default input device for this host API. The value will be a\n     device index ranging from 0 to (Pa_GetDeviceCount()-1), or paNoDevice\n     if no default input device is available.\n    */\n    PaDeviceIndex defaultInputDevice;\n\n    /** The default output device for this host API. The value will be a\n     device index ranging from 0 to (Pa_GetDeviceCount()-1), or paNoDevice\n     if no default output device is available.\n    */\n    PaDeviceIndex defaultOutputDevice;\n    \n} PaHostApiInfo;\n\n\n/** Retrieve a pointer to a structure containing information about a specific\n host Api.\n\n @param hostApi A valid host API index ranging from 0 to (Pa_GetHostApiCount()-1)\n\n @return A pointer to an immutable PaHostApiInfo structure describing\n a specific host API. If the hostApi parameter is out of range or an error\n is encountered, the function returns NULL.\n\n The returned structure is owned by the PortAudio implementation and must not\n be manipulated or freed. The pointer is only guaranteed to be valid between\n calls to Pa_Initialize() and Pa_Terminate().\n*/\nconst PaHostApiInfo * Pa_GetHostApiInfo( PaHostApiIndex hostApi );\n\n\n/** Convert a static host API unique identifier, into a runtime\n host API index.\n\n @param type A unique host API identifier belonging to the PaHostApiTypeId\n enumeration.\n\n @return A valid PaHostApiIndex ranging from 0 to (Pa_GetHostApiCount()-1) or,\n a PaErrorCode (which are always negative) if PortAudio is not initialized\n or an error is encountered.\n \n The paHostApiNotFound error code indicates that the host API specified by the\n type parameter is not available.\n\n @see PaHostApiTypeId\n*/\nPaHostApiIndex Pa_HostApiTypeIdToHostApiIndex( PaHostApiTypeId type );\n\n\n/** Convert a host-API-specific device index to standard PortAudio device index.\n This function may be used in conjunction with the deviceCount field of\n PaHostApiInfo to enumerate all devices for the specified host API.\n\n @param hostApi A valid host API index ranging from 0 to (Pa_GetHostApiCount()-1)\n\n @param hostApiDeviceIndex A valid per-host device index in the range\n 0 to (Pa_GetHostApiInfo(hostApi)->deviceCount-1)\n\n @return A non-negative PaDeviceIndex ranging from 0 to (Pa_GetDeviceCount()-1)\n or, a PaErrorCode (which are always negative) if PortAudio is not initialized\n or an error is encountered.\n\n A paInvalidHostApi error code indicates that the host API index specified by\n the hostApi parameter is out of range.\n\n A paInvalidDevice error code indicates that the hostApiDeviceIndex parameter\n is out of range.\n \n @see PaHostApiInfo\n*/\nPaDeviceIndex Pa_HostApiDeviceIndexToDeviceIndex( PaHostApiIndex hostApi,\n        int hostApiDeviceIndex );\n\n\n\n/** Structure used to return information about a host error condition.\n*/\ntypedef struct PaHostErrorInfo{\n    PaHostApiTypeId hostApiType;    /**< the host API which returned the error code */\n    long errorCode;                 /**< the error code returned */\n    const char *errorText;          /**< a textual description of the error if available, otherwise a zero-length string */\n}PaHostErrorInfo;\n\n\n/** Return information about the last host error encountered. The error\n information returned by Pa_GetLastHostErrorInfo() will never be modified\n asynchronously by errors occurring in other PortAudio owned threads\n (such as the thread that manages the stream callback.)\n\n This function is provided as a last resort, primarily to enhance debugging\n by providing clients with access to all available error information.\n\n @return A pointer to an immutable structure constraining information about\n the host error. The values in this structure will only be valid if a\n PortAudio function has previously returned the paUnanticipatedHostError\n error code.\n*/\nconst PaHostErrorInfo* Pa_GetLastHostErrorInfo( void );\n\n\n\n/* Device enumeration and capabilities */\n\n/** Retrieve the number of available devices. The number of available devices\n may be zero.\n\n @return A non-negative value indicating the number of available devices or,\n a PaErrorCode (which are always negative) if PortAudio is not initialized\n or an error is encountered.\n*/\nPaDeviceIndex Pa_GetDeviceCount( void );\n\n\n/** Retrieve the index of the default input device. The result can be\n used in the inputDevice parameter to Pa_OpenStream().\n\n @return The default input device index for the default host API, or paNoDevice\n if no default input device is available or an error was encountered.\n*/\nPaDeviceIndex Pa_GetDefaultPaStreamInfo\\bDevice( void );\n\n\n/** Retrieve the index of the default output device. The result can be\n used in the outputDevice parameter to Pa_OpenStream().\n\n @return The default output device index for the default host API, or paNoDevice\n if no default output device is available or an error was encountered.\n\n @note\n On the PC, the user can specify a default device by\n setting an environment variable. For example, to use device #1.\n<pre>\n set PA_RECOMMENDED_OUTPUT_DEVICE=1\n</pre>\n The user should first determine the available device ids by using\n the supplied application \"pa_devs\".\n*/\nPaDeviceIndex Pa_GetDefaultOutputDevice( void );\n\n\n/** The type used to represent monotonic time in seconds. PaTime is \n used for the fields of the PaStreamCallbackTimeInfo argument to the \n PaStreamCallback and as the result of Pa_GetStreamTime().\n\n PaTime values have unspecified origin.\n     \n @see PaStreamCallback, PaStreamCallbackTimeInfo, Pa_GetStreamTime\n*/\ntypedef double PaTime;\n\n\n/** A type used to specify one or more sample formats. Each value indicates\n a possible format for sound data passed to and from the stream callback,\n Pa_ReadStream and Pa_WriteStream.\n\n The standard formats paFloat32, paInt16, paInt32, paInt24, paInt8\n and aUInt8 are usually implemented by all implementations.\n\n The floating point representation (paFloat32) uses +1.0 and -1.0 as the\n maximum and minimum respectively.\n\n paUInt8 is an unsigned 8 bit format where 128 is considered \"ground\"\n\n The paNonInterleaved flag indicates that audio data is passed as an array \n of pointers to separate buffers, one buffer for each channel. Usually,\n when this flag is not used, audio data is passed as a single buffer with\n all channels interleaved.\n\n @see Pa_OpenStream, Pa_OpenDefaultStream, PaDeviceInfo\n @see paFloat32, paInt16, paInt32, paInt24, paInt8\n @see paUInt8, paCustomFormat, paNonInterleaved\n*/\ntypedef unsigned long PaSampleFormat;\n\n\n#define paFloat32        ((PaSampleFormat) 0x00000001) /**< @see PaSampleFormat */\n#define paInt32          ((PaSampleFormat) 0x00000002) /**< @see PaSampleFormat */\n#define paInt24          ((PaSampleFormat) 0x00000004) /**< Packed 24 bit format. @see PaSampleFormat */\n#define paInt16          ((PaSampleFormat) 0x00000008) /**< @see PaSampleFormat */\n#define paInt8           ((PaSampleFormat) 0x00000010) /**< @see PaSampleFormat */\n#define paUInt8          ((PaSampleFormat) 0x00000020) /**< @see PaSampleFormat */\n#define paCustomFormat   ((PaSampleFormat) 0x00010000) /**< @see PaSampleFormat */\n\n#define paNonInterleaved ((PaSampleFormat) 0x80000000) /**< @see PaSampleFormat */\n\n/** A structure providing information and capabilities of PortAudio devices.\n Devices may support input, output or both input and output.\n*/\ntypedef struct PaDeviceInfo\n{\n    int structVersion;  /* this is struct version 2 */\n    const char *name;\n    PaHostApiIndex hostApi; /**< note this is a host API index, not a type id*/\n    \n    int maxInputChannels;\n    int maxOutputChannels;\n\n    /** Default latency values for interactive performance. */\n    PaTime defaultLowInputLatency;\n    PaTime defaultLowOutputLatency;\n    /** Default latency values for robust non-interactive applications (eg. playing sound files). */\n    PaTime defaultHighInputLatency;\n    PaTime defaultHighOutputLatency;\n\n    double defaultSampleRate;\n} PaDeviceInfo;\n\n\n/** Retrieve a pointer to a PaDeviceInfo structure containing information\n about the specified device.\n @return A pointer to an immutable PaDeviceInfo structure. If the device\n parameter is out of range the function returns NULL.\n\n @param device A valid device index in the range 0 to (Pa_GetDeviceCount()-1)\n\n @note PortAudio manages the memory referenced by the returned pointer,\n the client must not manipulate or free the memory. The pointer is only\n guaranteed to be valid between calls to Pa_Initialize() and Pa_Terminate().\n\n @see PaDeviceInfo, PaDeviceIndex\n*/\nconst PaDeviceInfo* Pa_GetDeviceInfo( PaDeviceIndex device );\n\n\n/** Parameters for one direction (input or output) of a stream.\n*/\ntypedef struct PaStreamParameters\n{\n    /** A valid device index in the range 0 to (Pa_GetDeviceCount()-1)\n     specifying the device to be used or the special constant\n     paUseHostApiSpecificDeviceSpecification which indicates that the actual\n     device(s) to use are specified in hostApiSpecificStreamInfo.\n     This field must not be set to paNoDevice.\n    */\n    PaDeviceIndex device;\n    \n    /** The number of channels of sound to be delivered to the\n     stream callback or accessed by Pa_ReadStream() or Pa_WriteStream().\n     It can range from 1 to the value of maxInputChannels in the\n     PaDeviceInfo record for the device specified by the device parameter.\n    */\n    int channelCount;\n\n    /** The sample format of the buffer provided to the stream callback,\n     a_ReadStream() or Pa_WriteStream(). It may be any of the formats described\n     by the PaSampleFormat enumeration.\n    */\n    PaSampleFormat sampleFormat;\n\n    /** The desired latency in seconds. Where practical, implementations should\n     configure their latency based on these parameters, otherwise they may\n     choose the closest viable latency instead. Unless the suggested latency\n     is greater than the absolute upper limit for the device implementations\n     should round the suggestedLatency up to the next practical value - ie to\n     provide an equal or higher latency than suggestedLatency wherever possible.\n     Actual latency values for an open stream may be retrieved using the\n     inputLatency and outputLatency fields of the PaStreamInfo structure\n     returned by Pa_GetStreamInfo().\n     @see default*Latency in PaDeviceInfo, *Latency in PaStreamInfo\n    */\n    PaTime suggestedLatency;\n\n    /** An optional pointer to a host api specific data structure\n     containing additional information for device setup and/or stream processing.\n     hostApiSpecificStreamInfo is never required for correct operation,\n     if not used it should be set to NULL.\n    */\n    void *hostApiSpecificStreamInfo;\n\n} PaStreamParameters;\n\n\n/** Return code for Pa_IsFormatSupported indicating success. */\n#define paFormatIsSupported (0)\n\n/** Determine whether it would be possible to open a stream with the specified\n parameters.\n\n @param inputParameters A structure that describes the input parameters used to\n open a stream. The suggestedLatency field is ignored. See PaStreamParameters\n for a description of these parameters. inputParameters must be NULL for\n output-only streams.\n\n @param outputParameters A structure that describes the output parameters used\n to open a stream. The suggestedLatency field is ignored. See PaStreamParameters\n for a description of these parameters. outputParameters must be NULL for\n input-only streams.\n\n @param sampleRate The required sampleRate. For full-duplex streams it is the\n sample rate for both input and output\n\n @return Returns 0 if the format is supported, and an error code indicating why\n the format is not supported otherwise. The constant paFormatIsSupported is\n provided to compare with the return value for success.\n\n @see paFormatIsSupported, PaStreamParameters\n*/\nPaError Pa_IsFormatSupported( const PaStreamParameters *inputParameters,\n                              const PaStreamParameters *outputParameters,\n                              double sampleRate );\n\n\n\n/* Streaming types and functions */\n\n\n/**\n A single PaStream can provide multiple channels of real-time\n streaming audio input and output to a client application. A stream\n provides access to audio hardware represented by one or more\n PaDevices. Depending on the underlying Host API, it may be possible \n to open multiple streams using the same device, however this behavior \n is implementation defined. Portable applications should assume that \n a PaDevice may be simultaneously used by at most one PaStream.\n\n Pointers to PaStream objects are passed between PortAudio functions that\n operate on streams.\n\n @see Pa_OpenStream, Pa_OpenDefaultStream, Pa_OpenDefaultStream, Pa_CloseStream,\n Pa_StartStream, Pa_StopStream, Pa_AbortStream, Pa_IsStreamActive,\n Pa_GetStreamTime, Pa_GetStreamCpuLoad\n\n*/\ntypedef void PaStream;\n\n\n/** Can be passed as the framesPerBuffer parameter to Pa_OpenStream()\n or Pa_OpenDefaultStream() to indicate that the stream callback will\n accept buffers of any size.\n*/\n#define paFramesPerBufferUnspecified  (0)\n\n\n/** Flags used to control the behavior of a stream. They are passed as\n parameters to Pa_OpenStream or Pa_OpenDefaultStream. Multiple flags may be\n ORed together.\n\n @see Pa_OpenStream, Pa_OpenDefaultStream\n @see paNoFlag, paClipOff, paDitherOff, paNeverDropInput,\n  paPrimeOutputBuffersUsingStreamCallback, paPlatformSpecificFlags\n*/\ntypedef unsigned long PaStreamFlags;\n\n/** @see PaStreamFlags */\n#define   paNoFlag          ((PaStreamFlags) 0)\n\n/** Disable default clipping of out of range samples.\n @see PaStreamFlags\n*/\n#define   paClipOff         ((PaStreamFlags) 0x00000001)\n\n/** Disable default dithering.\n @see PaStreamFlags\n*/\n#define   paDitherOff       ((PaStreamFlags) 0x00000002)\n\n/** Flag requests that where possible a full duplex stream will not discard\n overflowed input samples without calling the stream callback. This flag is\n only valid for full duplex callback streams and only when used in combination\n with the paFramesPerBufferUnspecified (0) framesPerBuffer parameter. Using\n this flag incorrectly results in a paInvalidFlag error being returned from\n Pa_OpenStream and Pa_OpenDefaultStream.\n\n @see PaStreamFlags, paFramesPerBufferUnspecified\n*/\n#define   paNeverDropInput  ((PaStreamFlags) 0x00000004)\n\n/** Call the stream callback to fill initial output buffers, rather than the\n default behavior of priming the buffers with zeros (silence). This flag has\n no effect for input-only and blocking read/write streams.\n \n @see PaStreamFlags\n*/\n#define   paPrimeOutputBuffersUsingStreamCallback ((PaStreamFlags) 0x00000008)\n\n/** A mask specifying the platform specific bits.\n @see PaStreamFlags\n*/\n#define   paPlatformSpecificFlags ((PaStreamFlags)0xFFFF0000)\n\n/**\n Timing information for the buffers passed to the stream callback.\n\n Time values are expressed in seconds and are synchronised with the time base used by Pa_GetStreamTime() for the associated stream.\n \n @see PaStreamCallback, Pa_GetStreamTime\n*/\ntypedef struct PaStreamCallbackTimeInfo{\n    PaTime inputBufferAdcTime;  /**< The time when the first sample of the input buffer was captured at the ADC input */\n    PaTime currentTime;         /**< The time when the stream callback was invoked */\n    PaTime outputBufferDacTime; /**< The time when the first sample of the output buffer will output the DAC */\n} PaStreamCallbackTimeInfo;\n\n\n/**\n Flag bit constants for the statusFlags to PaStreamCallback.\n\n @see paInputUnderflow, paInputOverflow, paOutputUnderflow, paOutputOverflow,\n paPrimingOutput\n*/\ntypedef unsigned long PaStreamCallbackFlags;\n\n/** In a stream opened with paFramesPerBufferUnspecified, indicates that\n input data is all silence (zeros) because no real data is available. In a\n stream opened without paFramesPerBufferUnspecified, it indicates that one or\n more zero samples have been inserted into the input buffer to compensate\n for an input underflow.\n @see PaStreamCallbackFlags\n*/\n#define paInputUnderflow   ((PaStreamCallbackFlags) 0x00000001)\n\n/** In a stream opened with paFramesPerBufferUnspecified, indicates that data\n prior to the first sample of the input buffer was discarded due to an\n overflow, possibly because the stream callback is using too much CPU time.\n Otherwise indicates that data prior to one or more samples in the\n input buffer was discarded.\n @see PaStreamCallbackFlags\n*/\n#define paInputOverflow    ((PaStreamCallbackFlags) 0x00000002)\n\n/** Indicates that output data (or a gap) was inserted, possibly because the\n stream callback is using too much CPU time.\n @see PaStreamCallbackFlags\n*/\n#define paOutputUnderflow  ((PaStreamCallbackFlags) 0x00000004)\n\n/** Indicates that output data will be discarded because no room is available.\n @see PaStreamCallbackFlags\n*/\n#define paOutputOverflow   ((PaStreamCallbackFlags) 0x00000008)\n\n/** Some of all of the output data will be used to prime the stream, input\n data may be zero.\n @see PaStreamCallbackFlags\n*/\n#define paPrimingOutput    ((PaStreamCallbackFlags) 0x00000010)\n\n/**\n Allowable return values for the PaStreamCallback.\n @see PaStreamCallback\n*/\ntypedef enum PaStreamCallbackResult\n{\n    paContinue=0,   /**< Signal that the stream should continue invoking the callback and processing audio. */\n    paComplete=1,   /**< Signal that the stream should stop invoking the callback and finish once all output samples have played. */\n    paAbort=2       /**< Signal that the stream should stop invoking the callback and finish as soon as possible. */\n} PaStreamCallbackResult;\n\n\n/**\n Functions of type PaStreamCallback are implemented by PortAudio clients.\n They consume, process or generate audio in response to requests from an\n active PortAudio stream.\n\n When a stream is running, PortAudio calls the stream callback periodically.\n The callback function is responsible for processing buffers of audio samples \n passed via the input and output parameters.\n\n The PortAudio stream callback runs at very high or real-time priority.\n It is required to consistently meet its time deadlines. Do not allocate \n memory, access the file system, call library functions or call other functions \n from the stream callback that may block or take an unpredictable amount of\n time to complete.\n\n In order for a stream to maintain glitch-free operation the callback\n must consume and return audio data faster than it is recorded and/or\n played. PortAudio anticipates that each callback invocation may execute for \n a duration approaching the duration of frameCount audio frames at the stream \n sample rate. It is reasonable to expect to be able to utilise 70% or more of\n the available CPU time in the PortAudio callback. However, due to buffer size \n adaption and other factors, not all host APIs are able to guarantee audio \n stability under heavy CPU load with arbitrary fixed callback buffer sizes. \n When high callback CPU utilisation is required the most robust behavior \n can be achieved by using paFramesPerBufferUnspecified as the \n Pa_OpenStream() framesPerBuffer parameter.\n     \n @param input and @param output are either arrays of interleaved samples or;\n if non-interleaved samples were requested using the paNonInterleaved sample \n format flag, an array of buffer pointers, one non-interleaved buffer for \n each channel.\n\n The format, packing and number of channels used by the buffers are\n determined by parameters to Pa_OpenStream().\n     \n @param frameCount The number of sample frames to be processed by\n the stream callback.\n\n @param timeInfo Timestamps indicating the ADC capture time of the first sample\n in the input buffer, the DAC output time of the first sample in the output buffer\n and the time the callback was invoked. \n See PaStreamCallbackTimeInfo and Pa_GetStreamTime()\n\n @param statusFlags Flags indicating whether input and/or output buffers\n have been inserted or will be dropped to overcome underflow or overflow\n conditions.\n\n @param userData The value of a user supplied pointer passed to\n Pa_OpenStream() intended for storing synthesis data etc.\n\n @return\n The stream callback should return one of the values in the\n ::PaStreamCallbackResult enumeration. To ensure that the callback continues\n to be called, it should return paContinue (0). Either paComplete or paAbort\n can be returned to finish stream processing, after either of these values is\n returned the callback will not be called again. If paAbort is returned the\n stream will finish as soon as possible. If paComplete is returned, the stream\n will continue until all buffers generated by the callback have been played.\n This may be useful in applications such as soundfile players where a specific\n duration of output is required. However, it is not necessary to utilize this\n mechanism as Pa_StopStream(), Pa_AbortStream() or Pa_CloseStream() can also\n be used to stop the stream. The callback must always fill the entire output\n buffer irrespective of its return value.\n\n @see Pa_OpenStream, Pa_OpenDefaultStream\n\n @note With the exception of Pa_GetStreamCpuLoad() it is not permissible to call\n PortAudio API functions from within the stream callback.\n*/\ntypedef int PaStreamCallback(\n    const void *input, void *output,\n    unsigned long frameCount,\n    const PaStreamCallbackTimeInfo* timeInfo,\n    PaStreamCallbackFlags statusFlags,\n    void *userData );\n\n\n/** Opens a stream for either input, output or both.\n     \n @param stream The address of a PaStream pointer which will receive\n a pointer to the newly opened stream.\n     \n @param inputParameters A structure that describes the input parameters used by\n the opened stream. See PaStreamParameters for a description of these parameters.\n inputParameters must be NULL for output-only streams.\n\n @param outputParameters A structure that describes the output parameters used by\n the opened stream. See PaStreamParameters for a description of these parameters.\n outputParameters must be NULL for input-only streams.\n \n @param sampleRate The desired sampleRate. For full-duplex streams it is the\n sample rate for both input and output\n     \n @param framesPerBuffer The number of frames passed to the stream callback\n function, or the preferred block granularity for a blocking read/write stream.\n The special value paFramesPerBufferUnspecified (0) may be used to request that\n the stream callback will receive an optimal (and possibly varying) number of\n frames based on host requirements and the requested latency settings.\n Note: With some host APIs, the use of non-zero framesPerBuffer for a callback\n stream may introduce an additional layer of buffering which could introduce\n additional latency. PortAudio guarantees that the additional latency\n will be kept to the theoretical minimum however, it is strongly recommended\n that a non-zero framesPerBuffer value only be used when your algorithm\n requires a fixed number of frames per stream callback.\n \n @param streamFlags Flags which modify the behavior of the streaming process.\n This parameter may contain a combination of flags ORed together. Some flags may\n only be relevant to certain buffer formats.\n     \n @param streamCallback A pointer to a client supplied function that is responsible\n for processing and filling input and output buffers. If this parameter is NULL\n the stream will be opened in 'blocking read/write' mode. In blocking mode,\n the client can receive sample data using Pa_ReadStream and write sample data\n using Pa_WriteStream, the number of samples that may be read or written\n without blocking is returned by Pa_GetStreamReadAvailable and\n Pa_GetStreamWriteAvailable respectively.\n\n @param userData A client supplied pointer which is passed to the stream callback\n function. It could for example, contain a pointer to instance data necessary\n for processing the audio buffers. This parameter is ignored if streamCallback\n is NULL.\n     \n @return\n Upon success Pa_OpenStream() returns paNoError and places a pointer to a\n valid PaStream in the stream argument. The stream is inactive (stopped).\n If a call to Pa_OpenStream() fails, a non-zero error code is returned (see\n PaError for possible error codes) and the value of stream is invalid.\n\n @see PaStreamParameters, PaStreamCallback, Pa_ReadStream, Pa_WriteStream,\n Pa_GetStreamReadAvailable, Pa_GetStreamWriteAvailable\n*/\nPaError Pa_OpenStream( PaStream** stream,\n                       const PaStreamParameters *inputParameters,\n                       const PaStreamParameters *outputParameters,\n                       double sampleRate,\n                       unsigned long framesPerBuffer,\n                       PaStreamFlags streamFlags,\n                       PaStreamCallback *streamCallback,\n                       void *userData );\n\n\n/** A simplified version of Pa_OpenStream() that opens the default input\n and/or output devices.\n\n @param stream The address of a PaStream pointer which will receive\n a pointer to the newly opened stream.\n \n @param numInputChannels  The number of channels of sound that will be supplied\n to the stream callback or returned by Pa_ReadStream. It can range from 1 to\n the value of maxInputChannels in the PaDeviceInfo record for the default input\n device. If 0 the stream is opened as an output-only stream.\n\n @param numOutputChannels The number of channels of sound to be delivered to the\n stream callback or passed to Pa_WriteStream. It can range from 1 to the value\n of maxOutputChannels in the PaDeviceInfo record for the default output device.\n If 0 the stream is opened as an output-only stream.\n\n @param sampleFormat The sample format of both the input and output buffers\n provided to the callback or passed to and from Pa_ReadStream and Pa_WriteStream.\n sampleFormat may be any of the formats described by the PaSampleFormat\n enumeration.\n \n @param sampleRate Same as Pa_OpenStream parameter of the same name.\n @param framesPerBuffer Same as Pa_OpenStream parameter of the same name.\n @param streamCallback Same as Pa_OpenStream parameter of the same name.\n @param userData Same as Pa_OpenStream parameter of the same name.\n\n @return As for Pa_OpenStream\n\n @see Pa_OpenStream, PaStreamCallback\n*/\nPaError Pa_OpenDefaultStream( PaStream** stream,\n                              int numInputChannels,\n                              int numOutputChannels,\n                              PaSampleFormat sampleFormat,\n                              double sampleRate,\n                              unsigned long framesPerBuffer,\n                              PaStreamCallback *streamCallback,\n                              void *userData );\n\n\n/** Closes an audio stream. If the audio stream is active it\n discards any pending buffers as if Pa_AbortStream() had been called.\n*/\nPaError Pa_CloseStream( PaStream *stream );\n\n\n/** Functions of type PaStreamFinishedCallback are implemented by PortAudio \n clients. They can be registered with a stream using the Pa_SetStreamFinishedCallback\n function. Once registered they are called when the stream becomes inactive\n (ie once a call to Pa_StopStream() will not block).\n A stream will become inactive after the stream callback returns non-zero,\n or when Pa_StopStream or Pa_AbortStream is called. For a stream providing audio\n output, if the stream callback returns paComplete, or Pa_StopStream() is called,\n the stream finished callback will not be called until all generated sample data\n has been played.\n \n @param userData The userData parameter supplied to Pa_OpenStream()\n\n @see Pa_SetStreamFinishedCallback\n*/\ntypedef void PaStreamFinishedCallback( void *userData );\n\n\n/** Register a stream finished callback function which will be called when the \n stream becomes inactive. See the description of PaStreamFinishedCallback for \n further details about when the callback will be called.\n\n @param stream a pointer to a PaStream that is in the stopped state - if the\n stream is not stopped, the stream's finished callback will remain unchanged \n and an error code will be returned.\n\n @param streamFinishedCallback a pointer to a function with the same signature\n as PaStreamFinishedCallback, that will be called when the stream becomes\n inactive. Passing NULL for this parameter will un-register a previously\n registered stream finished callback function.\n\n @return on success returns paNoError, otherwise an error code indicating the cause\n of the error.\n\n @see PaStreamFinishedCallback\n*/\nPaError Pa_SetStreamFinishedCallback( PaStream *stream, PaStreamFinishedCallback* streamFinishedCallback ); \n\n\n/** Commences audio processing.\n*/\nPaError Pa_StartStream( PaStream *stream );\n\n\n/** Terminates audio processing. It waits until all pending\n audio buffers have been played before it returns.\n*/\nPaError Pa_StopStream( PaStream *stream );\n\n\n/** Terminates audio processing immediately without waiting for pending\n buffers to complete.\n*/\nPaError Pa_AbortStream( PaStream *stream );\n\n\n/** Determine whether the stream is stopped.\n A stream is considered to be stopped prior to a successful call to\n Pa_StartStream and after a successful call to Pa_StopStream or Pa_AbortStream.\n If a stream callback returns a value other than paContinue the stream is NOT\n considered to be stopped.\n\n @return Returns one (1) when the stream is stopped, zero (0) when\n the stream is running or, a PaErrorCode (which are always negative) if\n PortAudio is not initialized or an error is encountered.\n\n @see Pa_StopStream, Pa_AbortStream, Pa_IsStreamActive\n*/\nPaError Pa_IsStreamStopped( PaStream *stream );\n\n\n/** Determine whether the stream is active.\n A stream is active after a successful call to Pa_StartStream(), until it\n becomes inactive either as a result of a call to Pa_StopStream() or\n Pa_AbortStream(), or as a result of a return value other than paContinue from\n the stream callback. In the latter case, the stream is considered inactive\n after the last buffer has finished playing.\n\n @return Returns one (1) when the stream is active (ie playing or recording\n audio), zero (0) when not playing or, a PaErrorCode (which are always negative)\n if PortAudio is not initialized or an error is encountered.\n\n @see Pa_StopStream, Pa_AbortStream, Pa_IsStreamStopped\n*/\nPaError Pa_IsStreamActive( PaStream *stream );\n\n\n\n/** A structure containing unchanging information about an open stream.\n @see Pa_GetStreamInfo\n*/\n\ntypedef struct PaStreamInfo\n{\n    /** this is struct version 1 */\n    int structVersion;\n\n    /** The input latency of the stream in seconds. This value provides the most\n     accurate estimate of input latency available to the implementation. It may\n     differ significantly from the suggestedLatency value passed to Pa_OpenStream().\n     The value of this field will be zero (0.) for output-only streams.\n     @see PaTime\n    */\n    PaTime inputLatency;\n\n    /** The output latency of the stream in seconds. This value provides the most\n     accurate estimate of output latency available to the implementation. It may\n     differ significantly from the suggestedLatency value passed to Pa_OpenStream().\n     The value of this field will be zero (0.) for input-only streams.\n     @see PaTime\n    */\n    PaTime outputLatency;\n\n    /** The sample rate of the stream in Hertz (samples per second). In cases\n     where the hardware sample rate is inaccurate and PortAudio is aware of it,\n     the value of this field may be different from the sampleRate parameter\n     passed to Pa_OpenStream(). If information about the actual hardware sample\n     rate is not available, this field will have the same value as the sampleRate\n     parameter passed to Pa_OpenStream().\n    */\n    double sampleRate;\n    \n} PaStreamInfo;\n\n\n/** Retrieve a pointer to a PaStreamInfo structure containing information\n about the specified stream.\n @return A pointer to an immutable PaStreamInfo structure. If the stream\n parameter is invalid, or an error is encountered, the function returns NULL.\n\n @param stream A pointer to an open stream previously created with Pa_OpenStream.\n\n @note PortAudio manages the memory referenced by the returned pointer,\n the client must not manipulate or free the memory. The pointer is only\n guaranteed to be valid until the specified stream is closed.\n\n @see PaStreamInfo\n*/\nconst PaStreamInfo* Pa_GetStreamInfo( PaStream *stream );\n\n\n/** Returns the current time in seconds for a stream according to the same clock used\n to generate callback PaStreamCallbackTimeInfo timestamps. The time values are\n monotonically increasing and have unspecified origin. \n \n Pa_GetStreamTime returns valid time values for the entire life of the stream,\n from when the stream is opened until it is closed. Starting and stopping the stream\n does not affect the passage of time returned by Pa_GetStreamTime.\n\n This time may be used for synchronizing other events to the audio stream, for \n example synchronizing audio to MIDI.\n                                        \n @return The stream's current time in seconds, or 0 if an error occurred.\n\n @see PaTime, PaStreamCallback, PaStreamCallbackTimeInfo\n*/\nPaTime Pa_GetStreamTime( PaStream *stream );\n\n\n/** Retrieve CPU usage information for the specified stream.\n The \"CPU Load\" is a fraction of total CPU time consumed by a callback stream's\n audio processing routines including, but not limited to the client supplied\n stream callback. This function does not work with blocking read/write streams.\n\n This function may be called from the stream callback function or the\n application.\n     \n @return\n A floating point value, typically between 0.0 and 1.0, where 1.0 indicates\n that the stream callback is consuming the maximum number of CPU cycles possible\n to maintain real-time operation. A value of 0.5 would imply that PortAudio and\n the stream callback was consuming roughly 50% of the available CPU time. The\n return value may exceed 1.0. A value of 0.0 will always be returned for a\n blocking read/write stream, or if an error occurs.\n*/\ndouble Pa_GetStreamCpuLoad( PaStream* stream );\n\n\n/** Read samples from an input stream. The function doesn't return until\n the entire buffer has been filled - this may involve waiting for the operating\n system to supply the data.\n\n @param stream A pointer to an open stream previously created with Pa_OpenStream.\n \n @param buffer A pointer to a buffer of sample frames. The buffer contains\n samples in the format specified by the inputParameters->sampleFormat field\n used to open the stream, and the number of channels specified by\n inputParameters->numChannels. If non-interleaved samples were requested using\n the paNonInterleaved sample format flag, buffer is a pointer to the first element \n of an array of buffer pointers, one non-interleaved buffer for each channel.\n\n @param frames The number of frames to be read into buffer. This parameter\n is not constrained to a specific range, however high performance applications\n will want to match this parameter to the framesPerBuffer parameter used\n when opening the stream.\n\n @return On success PaNoError will be returned, or PaInputOverflowed if input\n data was discarded by PortAudio after the previous call and before this call.\n*/\nPaError Pa_ReadStream( PaStream* stream,\n                       void *buffer,\n                       unsigned long frames );\n\n\n/** Write samples to an output stream. This function doesn't return until the\n entire buffer has been written - this may involve waiting for the operating\n system to consume the data.\n\n @param stream A pointer to an open stream previously created with Pa_OpenStream.\n\n @param buffer A pointer to a buffer of sample frames. The buffer contains\n samples in the format specified by the outputParameters->sampleFormat field\n used to open the stream, and the number of channels specified by\n outputParameters->numChannels. If non-interleaved samples were requested using\n the paNonInterleaved sample format flag, buffer is a pointer to the first element \n of an array of buffer pointers, one non-interleaved buffer for each channel.\n\n @param frames The number of frames to be written from buffer. This parameter\n is not constrained to a specific range, however high performance applications\n will want to match this parameter to the framesPerBuffer parameter used\n when opening the stream.\n\n @return On success PaNoError will be returned, or paOutputUnderflowed if\n additional output data was inserted after the previous call and before this\n call.\n*/\nPaError Pa_WriteStream( PaStream* stream,\n                        const void *buffer,\n                        unsigned long frames );\n\n\n/** Retrieve the number of frames that can be read from the stream without\n waiting.\n\n @return Returns a non-negative value representing the maximum number of frames\n that can be read from the stream without blocking or busy waiting or, a\n PaErrorCode (which are always negative) if PortAudio is not initialized or an\n error is encountered.\n*/\nsigned long Pa_GetStreamReadAvailable( PaStream* stream );\n\n\n/** Retrieve the number of frames that can be written to the stream without\n waiting.\n\n @return Returns a non-negative value representing the maximum number of frames\n that can be written to the stream without blocking or busy waiting or, a\n PaErrorCode (which are always negative) if PortAudio is not initialized or an\n error is encountered.\n*/\nsigned long Pa_GetStreamWriteAvailable( PaStream* stream );\n\n\n/** Retrieve the host type handling an open stream.\n\n @return Returns a non-negative value representing the host API type\n handling an open stream or, a PaErrorCode (which are always negative)\n if PortAudio is not initialized or an error is encountered.\n*/\nPaHostApiTypeId Pa_GetStreamHostApiType( PaStream* stream );\n\n\n/* Miscellaneous utilities */\n\n\n/** Retrieve the size of a given sample format in bytes.\n\n @return The size in bytes of a single sample in the specified format,\n or paSampleFormatNotSupported if the format is not supported.\n*/\nPaError Pa_GetSampleSize( PaSampleFormat format );\n\n\n/** Put the caller to sleep for at least 'msec' milliseconds. This function is\n provided only as a convenience for authors of portable code (such as the tests\n and examples in the PortAudio distribution.)\n\n The function may sleep longer than requested so don't rely on this for accurate\n musical timing.\n*/\nvoid Pa_Sleep( long msec );\n\n\n\n#ifdef __cplusplus\n}\n#endif /* __cplusplus */\n#endif /* PORTAUDIO_H */\n",
			"file": "/usr/include/portaudio.h",
			"file_size": 47958,
			"file_write_time": 132295325640000000,
			"settings":
			{
				"buffer_size": 47967,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					857,
					1,
					"paste",
					null,
					"AgAAAEU4AAAAAAAAUzgAAAAAAAAAAAAAUzgAAAAAAABTOAAAAAAAAAUAAABJbnB1dA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARTgAAAAAAABKOAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "portaudio2.js",
			"settings":
			{
				"buffer_size": 2379,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					13,
					1,
					"revert",
					null,
					"BQAAAAAAAAAAAAAAAAAAAAAAAADnCAAAaW1wb3J0IHsgZGxvcGVuLCBkZWZpbmUsIGRsZXJyb3IsIGRsY2xvc2UsIGRsc3ltLCBjYWxsLCBlcnJubywgUlRMRF9OT1cgfSBmcm9tICdmZmknOwoKY2xhc3MgUGFTdHJlYW1QYXJhbWV0ZXJzIGV4dGVuZHMgQXJyYXlCdWZmZXIgewogIGNvbnN0cnVjdG9yKG9iaiA9IHt9KSB7CiAgICBzdXBlcigzMik7CiAgICBPYmplY3QuYXNzaWduKHRoaXMsIG9iaik7CiAgfQogIGdldCBbU3ltYm9sLnRvU3RyaW5nVGFnXSgpIHsgcmV0dXJuIGBbUGFTdHJlYW1QYXJhbWV0ZXJzIEAgJHt0aGlzfSBdYDsgfQoKICAvKiAwOiBQYURldmljZUluZGV4IChpbnQpIGRldmljZSAqLwogIHNldCBkZXZpY2UodmFsdWUpIHsgaWYodHlwZW9mIHZhbHVlID09ICdvYmplY3QnICYmIHZhbHVlICE9IG51bGwgJiYgdmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgdmFsdWUgPSB0b1BvaW50ZXIodmFsdWUpOyBuZXcgSW50MzJBcnJheSh0aGlzLCAwKVswXSA9IHZhbHVlOyB9CiAgZ2V0IGRldmljZSgpIHsgcmV0dXJuIG5ldyBJbnQzMkFycmF5KHRoaXMsIDApWzBdOyB9CgogIC8qIDQ6IGludCBjaGFubmVsQ291bnQgKi8KICBzZXQgY2hhbm5lbENvdW50KHZhbHVlKSB7IGlmKHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0JyAmJiB2YWx1ZSAhPSBudWxsICYmIHZhbHVlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHZhbHVlID0gdG9Qb2ludGVyKHZhbHVlKTsgbmV3IEludDMyQXJyYXkodGhpcywgNClbMF0gPSB2YWx1ZTsgfQogIGdldCBjaGFubmVsQ291bnQoKSB7IHJldHVybiBuZXcgSW50MzJBcnJheSh0aGlzLCA0KVswXTsgfQoKICAvKiA4OiBQYVNhbXBsZUZvcm1hdCAodW5zaWduZWQgbG9uZykgc2FtcGxlRm9ybWF0ICovCiAgc2V0IHNhbXBsZUZvcm1hdCh2YWx1ZSkgeyBpZih0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcgJiYgdmFsdWUgIT0gbnVsbCAmJiB2YWx1ZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB2YWx1ZSA9IHRvUG9pbnRlcih2YWx1ZSk7IG5ldyBCaWdJbnQ2NEFycmF5KHRoaXMsIDgpWzBdID0gQmlnSW50KHZhbHVlKTsgfQogIGdldCBzYW1wbGVGb3JtYXQoKSB7IHJldHVybiBuZXcgQmlnSW50NjRBcnJheSh0aGlzLCA4KVswXTsgfQoKICAvKiAxNjogUGFUaW1lIChkb3VibGUpIHN1Z2dlc3RlZExhdGVuY3kgKi8KICBzZXQgc3VnZ2VzdGVkTGF0ZW5jeSh2YWx1ZSkgeyBpZih0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcgJiYgdmFsdWUgIT0gbnVsbCAmJiB2YWx1ZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB2YWx1ZSA9IHRvUG9pbnRlcih2YWx1ZSk7IG5ldyBCaWdJbnQ2NEFycmF5KHRoaXMsIDE2KVswXSA9IEJpZ0ludCh2YWx1ZSk7IH0KICBnZXQgc3VnZ2VzdGVkTGF0ZW5jeSgpIHsgcmV0dXJuIG5ldyBCaWdJbnQ2NEFycmF5KHRoaXMsIDE2KVswXTsgfQoKICAvKiAyNDogdm9pZCogaG9zdEFwaVNwZWNpZmljU3RyZWFtSW5mbyAqLwogIC8qIHVuZGVmaW5lZCAwIHRydWUgKi8KICBzZXQgaG9zdEFwaVNwZWNpZmljU3RyZWFtSW5mbyh2YWx1ZSkgeyBpZih0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcgJiYgdmFsdWUgIT0gbnVsbCAmJiB2YWx1ZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB2YWx1ZSA9IHRvUG9pbnRlcih2YWx1ZSk7IG5ldyBCaWdJbnQ2NEFycmF5KHRoaXMsIDI0KVswXSA9IEJpZ0ludCh2YWx1ZSk7IH0KICBnZXQgaG9zdEFwaVNwZWNpZmljU3RyZWFtSW5mbygpIHsgcmV0dXJuICcweCcrbmV3IEJpZ0ludDY0QXJyYXkodGhpcywgMjQpWzBdLnRvU3RyaW5nKDE2KTsgfQoKICBzdGF0aWMgZnJvbShhZGRyZXNzKSB7CiAgICBsZXQgcmV0ID0gdG9BcnJheUJ1ZmZlcihhZGRyZXNzLCAzMik7CiAgICByZXR1cm4gT2JqZWN0LnNldFByb3RvdHlwZU9mKHJldCwgUGFTdHJlYW1QYXJhbWV0ZXJzLnByb3RvdHlwZSk7CiAgfQoKICB0b1N0cmluZygpIHsKICAgIGNvbnN0IHsgZGV2aWNlLCBjaGFubmVsQ291bnQsIHNhbXBsZUZvcm1hdCwgc3VnZ2VzdGVkTGF0ZW5jeSwgaG9zdEFwaVNwZWNpZmljU3RyZWFtSW5mbyB9ID0gdGhpczsKICAgIHJldHVybiBgUGFTdHJlYW1QYXJhbWV0ZXJzIHtcblx0LmRldmljZSA9ICR7ZGV2aWNlfSxcblx0LmNoYW5uZWxDb3VudCA9ICR7Y2hhbm5lbENvdW50fSxcblx0LnNhbXBsZUZvcm1hdCA9ICR7c2FtcGxlRm9ybWF0fSxcblx0LnN1Z2dlc3RlZExhdGVuY3kgPSAke3N1Z2dlc3RlZExhdGVuY3l9LFxuXHQuaG9zdEFwaVNwZWNpZmljU3RyZWFtSW5mbyA9IDB4JHtob3N0QXBpU3BlY2lmaWNTdHJlYW1JbmZvLnRvU3RyaW5nKDE2KX1cbn1gOwogIH0KfQoAAAAAAAAAAEsJAAAAAAAAAAAAAAAAAAAAAAAASwkAAAAAAAAAAAAAAAAAAAAAAABLCQAAAAAAAAAAAAAAAAAAAAAAAEsJAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEwQAAAAAAAAfBAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "clang-ast.js",
			"settings":
			{
				"buffer_size": 78524,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					11,
					1,
					"cut",
					null,
					"AQAAAO8BAAAAAAAA7wEAAAAAAAA2AAAAaW1wb3J0IHsgY291bnRTdWJzdHJpbmcgfSBmcm9tICcuL3N0cmluZy1oZWxwZXJzLmpzJzsK",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA7wEAAAAAAAAlAgAAAAAAAAAAAAAAAAAA"
				],
				[
					12,
					2,
					"paste",
					null,
					"AgAAAO8BAAAAAAAAJQIAAAAAAAAAAAAAJQIAAAAAAABbAgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA7wEAAAAAAADvAQAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					5,
					"left_delete",
					null,
					"BQAAADICAAAAAAAAMgIAAAAAAAABAAAAdDECAAAAAAAAMQIAAAAAAAABAAAAbjACAAAAAAAAMAIAAAAAAAABAAAAdS8CAAAAAAAALwIAAAAAAAABAAAAby4CAAAAAAAALgIAAAAAAAABAAAAYw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMwIAAAAAAAAzAgAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "inspect"
					},
					"BwAAAC4CAAAAAAAALwIAAAAAAAAAAAAALwIAAAAAAAAwAgAAAAAAAAAAAAAwAgAAAAAAADECAAAAAAAAAAAAADECAAAAAAAAMgIAAAAAAAAAAAAAMgIAAAAAAAAzAgAAAAAAAAAAAAAzAgAAAAAAADQCAAAAAAAAAAAAADQCAAAAAAAANQIAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALgIAAAAAAAAuAgAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					9,
					"right_delete",
					null,
					"CQAAADUCAAAAAAAANQIAAAAAAAABAAAAUzUCAAAAAAAANQIAAAAAAAABAAAAdTUCAAAAAAAANQIAAAAAAAABAAAAYjUCAAAAAAAANQIAAAAAAAABAAAAczUCAAAAAAAANQIAAAAAAAABAAAAdDUCAAAAAAAANQIAAAAAAAABAAAAcjUCAAAAAAAANQIAAAAAAAABAAAAaTUCAAAAAAAANQIAAAAAAAABAAAAbjUCAAAAAAAANQIAAAAAAAABAAAAZw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANQIAAAAAAAA1AgAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": "inspect"
					},
					"CAAAAD4CAAAAAAAAPwIAAAAAAAAAAAAAPwIAAAAAAAA/AgAAAAAAABMAAAAuL3N0cmluZy1oZWxwZXJzLmpzPwIAAAAAAABAAgAAAAAAAAAAAABAAgAAAAAAAEECAAAAAAAAAAAAAEECAAAAAAAAQgIAAAAAAAAAAAAAQgIAAAAAAABDAgAAAAAAAAAAAABDAgAAAAAAAEQCAAAAAAAAAAAAAEQCAAAAAAAARQIAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPgIAAAAAAABRAgAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": "??"
					},
					"AgAAAFF5AAAAAAAAUnkAAAAAAAAAAAAAUnkAAAAAAABTeQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUXkAAAAAAABReQAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"left_delete",
					null,
					"AQAAAFJ5AAAAAAAAUnkAAAAAAAABAAAAPw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAU3kAAAAAAABTeQAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAG0eAAAAAAAAbh4AAAAAAAAAAAAAbh4AAAAAAABvHgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbR4AAAAAAABtHgAAAAAAAAAAAAAAAPC/"
				],
				[
					98,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAADMeAAAAAAAANB4AAAAAAAAAAAAANB4AAAAAAAA0HgAAAAAAAAgAAAAgICAgICAvLw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOx4AAAAAAAAzHgAAAAAAAAAAAAAAAPC/"
				],
				[
					112,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAGAeAAAAAAAAYR4AAAAAAAAAAAAAYR4AAAAAAABhHgAAAAAAABQAAAAgICAgICAvL3B1dFN0YWNrKCk7Cg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAdB4AAAAAAABgHgAAAAAAAAAAAAAAAPC/"
				],
				[
					113,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAGEeAAAAAAAAYh4AAAAAAAAAAAAAYh4AAAAAAABjHgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAYR4AAAAAAABhHgAAAAAAAAAAAAAAAPC/"
				],
				[
					124,
					1,
					"insert",
					{
						"characters": "\nretr"
					},
					"BwAAADIeAAAAAAAAMx4AAAAAAAAAAAAAMx4AAAAAAAA3HgAAAAAAAAAAAAA3HgAAAAAAADkeAAAAAAAAAAAAADkeAAAAAAAAOh4AAAAAAAAAAAAAOh4AAAAAAAA7HgAAAAAAAAAAAAA7HgAAAAAAADweAAAAAAAAAAAAADweAAAAAAAAPR4AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMh4AAAAAAAAyHgAAAAAAAAAAAAAAAPC/"
				],
				[
					125,
					1,
					"left_delete",
					null,
					"AQAAADweAAAAAAAAPB4AAAAAAAABAAAAcg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPR4AAAAAAAA9HgAAAAAAAAAAAAAAAPC/"
				],
				[
					126,
					1,
					"insert",
					{
						"characters": "uir"
					},
					"AwAAADweAAAAAAAAPR4AAAAAAAAAAAAAPR4AAAAAAAA+HgAAAAAAAAAAAAA+HgAAAAAAAD8eAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPB4AAAAAAAA8HgAAAAAAAAAAAAAAAPC/"
				],
				[
					127,
					2,
					"left_delete",
					null,
					"AgAAAD4eAAAAAAAAPh4AAAAAAAABAAAAcj0eAAAAAAAAPR4AAAAAAAABAAAAaQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPx4AAAAAAAA/HgAAAAAAAAAAAAAAAPC/"
				],
				[
					128,
					1,
					"insert",
					{
						"characters": "rn"
					},
					"AgAAAD0eAAAAAAAAPh4AAAAAAAAAAAAAPh4AAAAAAAA/HgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPR4AAAAAAAA9HgAAAAAAAAAAAAAAAPC/"
				],
				[
					129,
					1,
					"insert",
					{
						"characters": " node;"
					},
					"BgAAAD8eAAAAAAAAQB4AAAAAAAAAAAAAQB4AAAAAAABBHgAAAAAAAAAAAABBHgAAAAAAAEIeAAAAAAAAAAAAAEIeAAAAAAAAQx4AAAAAAAAAAAAAQx4AAAAAAABEHgAAAAAAAAAAAABEHgAAAAAAAEUeAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPx4AAAAAAAA/HgAAAAAAAAAAAAAAAPC/"
				],
				[
					134,
					1,
					"revert",
					null,
					"",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARR4AAAAAAABFHgAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"right",
				"Browse Mode: Outline (Right)"
			],
			[
				"prettier",
				"JsPrettier: Format Code"
			],
			[
				"prett",
				"JsPrettier: Format Code"
			],
			[
				":q",
				"Coffee: Quick Run Bar"
			],
			[
				"clang",
				"Clang Format: Format Selection"
			],
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"mode",
				"HTML: Encode Special Characters"
			],
			[
				"insert",
				"Snippet: Insert livereload.js script"
			],
			[
				":w",
				":w - Save"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"OUTLIN",
				"Browse Mode: Outline (Right)"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 142.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/portaudio.js",
		"/home/roman/Projects/plot-cv/out.tmp",
		"/home/roman/Projects/plot-cv/webakeit.js",
		"/home/roman/Projects/plot-cv/webakeit-telegram.js",
		"/home/roman/Downloads/Telegram Desktop/ChatExport_2024-04-09/messages.html",
		"/home/roman/Projects/plot-cv/static/css/webakeit.css",
		"/home/roman/Projects/plot-cv/webakeit.tmp",
		"/home/roman/Projects/plot-cv/webakeit.html",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/xml-shell.js",
		"/home/roman/Projects/plot-cv/plot-cv.sublime-project",
		"/home/roman/Projects/plot-cv/eagle-shell.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/xml-shell.es",
		"/home/roman/Projects/plot-cv/lib/geom/splines.js",
		"/home/roman/Projects/plot-cv/fire.html",
		"/home/roman/Projects/plot-cv/numbers2.c",
		"/home/roman/Projects/plot-cv/main.js",
		"/home/roman/Projects/plot-cv/lib/geom/pointList.js",
		"/home/roman/Projects/plot-cv/draw.js",
		"/home/roman/Projects/plot-cv/lib/autoStore.js",
		"/home/roman/Projects/plot-cv/lib/async/events.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
		"/home/roman/Projects/plot-cv/debugger-client.js",
		"/home/roman/Projects/plot-cv/fire.js",
		"/home/roman/Projects/plot-cv/upload-server.js",
		"/home/roman/Projects/plot-cv/lib/geom/point.js",
		"/home/roman/Projects/plot-cv/lib/misc.js",
		"/home/roman/Projects/plot-cv/components.js",
		"/home/roman/Projects/plot-cv/draw.html",
		"/home/roman/Projects/plot-cv/static/css/draw.css",
		"/home/roman/Projects/plot-cv/webSocket.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/point.js",
		"/home/roman/Projects/plot-cv/draw-utils.js",
		"/home/roman/Projects/plot-cv/lib/fd-graph.js",
		"/home/roman/Projects/plot-cv/svg-box.js",
		"/home/roman/Projects/plot-cv/numbers.c",
		"/home/roman/Projects/plot-cv/hex.c",
		"/home/roman/Projects/plot-cv/upload-worker.js",
		"/home/roman/Projects/plot-cv/mailcow-db.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/examples/ssl-client.js",
		"/home/roman/Projects/plot-cv/promise-worker.js",
		"/home/roman/Projects/plot-cv/upload.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-mysql.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/wscli.js",
		"/home/roman/Projects/plot-cv/lib/geom/graph.js",
		"/home/roman/Projects/plot-cv/test-nanovg.js",
		"/home/roman/Projects/plot-cv/lib/eagle/node.js",
		"/home/roman/Projects/plot-cv/lib/eagle/element.js",
		"/home/roman/Projects/plot-cv/workertest.js",
		"/home/roman/Projects/plot-cv/test-worker.js",
		"/home/roman/Projects/plot-cv/static/css/upload.css",
		"/home/roman/Projects/plot-cv/upload.html",
		"/home/roman/Projects/plot-cv/debugger-server.js",
		"/home/roman/Projects/plot-cv/test-opencv.js",
		"/home/roman/Projects/plot-cv/map.html",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/tests/server.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/directory.js",
		"/home/roman/Projects/plot-cv/test-video.js",
		"/home/roman/Projects/plot-cv/cv-shell.js",
		"/home/roman/Projects/plot-cv/directory.html",
		"/home/roman/Projects/plot-cv/coil.html",
		"/home/roman/Projects/plot-cv/filelist.html",
		"/home/roman/Projects/plot-cv/noise.js",
		"/home/roman/Projects/plot-cv/pinkNoise.js",
		"/home/roman/Projects/plot-cv/noise.html",
		"/home/roman/Projects/plot-cv/landing.html",
		"/home/roman/Projects/plot-cv/404.html",
		"/home/roman/Projects/plot-cv/index.html",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/js/rpc.js",
		"/home/roman/Projects/plot-cv/style.css",
		"/home/roman/Projects/plot-cv/lib/lscache.js",
		"/home/roman/Projects/plot-cv/example.html",
		"/home/roman/Projects/plot-cv/clock.html",
		"/home/roman/Projects/plot-cv/eagle2svg.js",
		"/home/roman/Projects/plot-cv/Pink-Noise-Generator-Thomas-Henry.brd",
		"/home/roman/Projects/plot-cv/lib/eagle/schematicRenderer.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/grid.js",
		"/home/roman/Projects/plot-cv/lib/eagle/renderUtils.js",
		"/home/roman/Projects/plot-cv/lib/geom/transformation.js",
		"/home/roman/Projects/plot-cv/lib/eagle/nodeList.js",
		"/home/roman/Projects/plot-cv/lib/eagle/ref.js",
		"/home/roman/Projects/plot-cv/lib/eagle/project.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/polygon.js",
		"/home/roman/Projects/plot-cv/lib/geom/polygon.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/symbol.js",
		"/home/roman/Projects/plot-cv/lib/eagle/boardRenderer.js",
		"/home/roman/Projects/plot-cv/lib/eagle/svgRenderer.js",
		"/home/roman/Projects/plot-cv/lib/eagle/document.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/pad.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/hole.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/smd.js",
		"/home/roman/Projects/plot-cv/lib/ecmascript/parser.js",
		"/home/roman/Projects/plot-cv/github-userscript.js",
		"/home/roman/Projects/an-tronics/eagle/RX-FM-Radio-1.5V-dip.brd",
		"/home/roman/Projects/plot-cv/lib/eagle/components/pin.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/wire.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/3rdparty/denodrivers-postgres/docs/.nojekyll",
		"/home/roman/Projects/plot-cv/lib/eagle/components/via.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/repl.js",
		"/home/roman/Projects/plot-cv/lib/geom/line.js",
		"/home/roman/Projects/plot-cv/lib/geom/rect.js",
		"/home/roman/Projects/an-tronics/eagle/lbr/l.lbr",
		"/home/roman/Projects/an-tronics/eagle/github-userscript.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-internal.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/src/minnet-client.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/libwebsockets/lib/core-net/close.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-net/lib/callback.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/qjsm.c",
		"/home/janos/Projects/plot-cv/test-sourcemap.js",
		"/home/janos/Projects/plot-cv/ws-worker.js",
		"/home/janos/Projects/plot-cv/tokmap.c",
		"/home/janos/Projects/plot-cv/count-neighbours.js",
		"/home/janos/Projects/plot-cv/findsig.c",
		"/home/janos/Projects/plot-cv/getModuleProps.js",
		"/home/janos/Projects/plot-cv/midi-tcp.js",
		"/home/janos/Projects/plot-cv/portal.js",
		"/home/janos/Projects/plot-cv/resolve-imports.js",
		"/home/janos/Projects/plot-cv/palette.css",
		"/home/janos/Projects/plot-cv/get-res.c",
		"/home/janos/Projects/plot-cv/get-msys-packages.js",
		"/home/janos/Projects/plot-cv/gerber2gcode.js",
		"/home/janos/Projects/plot-cv/ftrace.js",
		"/home/janos/Projects/plot-cv/filelist.js",
		"/home/janos/Projects/plot-cv/coil.js",
		"/home/janos/Projects/plot-cv/eagle-server.js",
		"/home/janos/Projects/plot-cv/eagle-query.js",
		"/home/janos/Projects/plot-cv/dump-structs.js"
	],
	"find":
	{
		"height": 26.0
	},
	"find_in_files":
	{
		"height": 107.0,
		"where_history":
		[
			"/home/roman/Projects/plot-cv,*.js",
			"/home/roman/Projects/plot-cv/lib/eagle,*.js",
			"/home/roman/Projects/plot-cv/lib,*.js",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"Pm_Open",
			"PmTimestamp",
			"\\{Number\\}        buffer\\b",
			"\\{Number\\}        buffer",
			"{Number}        outputDriverInfo",
			"{Number}        stream",
			"Pm_OpenInput",
			"\\bPmEvent\\b",
			"\\bPortMidiStream\\b",
			"Pm_Open(In|Out)put\\b",
			"Pm_OpenInput\\b",
			"Pm_OpenInpu8t",
			"Pm_Open",
			"PmMessage",
			"\\bstruct\\b",
			"^typedef",
			"members",
			"putStack",
			"PmDeviceInfo",
			"PortMidiStream",
			"Pm_OpenOutput",
			"Pm_Open",
			"GenerateStructClass",
			"generateDoc",
			"MakeFFI\\b",
			"writeFileSync",
			"WriteFile\\b",
			"ConcatIterator",
			"StringGenerator",
			"s \\+= ",
			"MakeFFI",
			"hostApiSpecificStreamInfo",
			"class PaHostApiInfo",
			"PaHostApiInfo",
			"Pa_HostApiDeviceIndexToDeviceIndex",
			"Pa_Initialize",
			"new BigInt64Array",
			"sampleFormat\\b",
			"PaSampleFormat",
			"PaStreamInfo\\b",
			"Input",
			"Input\\b",
			"Input",
			"Read",
			"Pa_IsStream",
			"Pa_GetStreamReadAva",
			"Pa_GetStreamHostApiType",
			"'\\)\\, null\\, ",
			"'\\)\\, null\\, 'undefined'\\,",
			"Pa_GetStreamHostApiType",
			"GetSampleSize",
			"PaSampleFormat",
			"GetSampleSize",
			"\\.from",
			"\\.from\\b",
			"Pa_Terminate\\b",
			"GetStreamInfo\\b",
			"a\\[0\\]",
			"GetHostApiCount",
			"a = Big",
			"a = b ig",
			"get name\\b",
			"get name",
			"\n",
			";\nexport const ",
			"inspectKey",
			"\\{ structVersion\\, ",
			"structVersio",
			"^typedef",
			"enum ",
			"^const ",
			"enum ",
			"PaHostApiTypeId",
			"HostApiType\\b",
			"HostApiType",
			"PaStreamCallback\\b",
			"PaStreamCallback",
			"OpenStream\\(",
			"inspectKey",
			"HostApiInfo",
			"\\[inspectKey\\]\\(\\)",
			"Symbol.toStringTag",
			"GetHostApiInfo",
			"^define",
			"toStringTag",
			"ttoStringTag",
			" get \\[Symbol.toStringTag\\]",
			"static from\\b",
			"JS_TAG_",
			"toArrayBuffer",
			"toArray",
			"toarrayb",
			"array buffer",
			"GetVersionInifo",
			"\\bPa_[^ ]*\\(",
			"Pa_[^ ]*\\(",
			"Pa_GetStreamInfo",
			"isObject",
			"Object.assign",
			"PaStreamInfo",
			"Pa_Terminate",
			"\\, PassPointer\\(stream\\)",
			"WriteStream",
			"OpenStream\\b",
			"StartStream",
			", stream\\b",
			"StartStrea",
			"Stopped",
			"DereferenceStream",
			"StreamAddress",
			"PassPoinetr",
			"WriteStream",
			"Pa_Write",
			"WriteStream",
			"PaStream\\b",
			"OpenStream",
			"GetStreamPtr\\b",
			"GetStreamPtr",
			"GetStreamAddress",
			"toArrayBuffer",
			"^export export ",
			"class ",
			"^class ",
			"toPointer\\(",
			"BigInt64Array",
			"hostApiSpecificStreamInfo",
			"}\n  get ",
			"ByteLength2TypedArray"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"{ArrayBuffer}   buffer",
			"{ArrayBuffer}      buffer",
			"{Object|null}   outputDriverInfo",
			"{ArrayBuffer}   stream",
			", ",
			"m",
			"{ ",
			"export const ",
			"nameKey",
			", GetStream(stream)",
			"GetStream",
			"DereferenceStream",
			"export ",
			"export class ",
			"export class",
			"}\\n\n  get ",
			"); /**",
			"",
			"export const \\1 = ",
			"export function ",
			"&auml;",
			"&uuml;",
			"&ouml;",
			"\\1",
			"let",
			"this",
			"ret",
			"factor",
			"GetCirclePosition",
			"index",
			"dist",
			"}\\n\\n\\1",
			"}\\n\\1",
			"Log",
			"format_base",
			"\\1u",
			"format",
			"GREEN",
			"c",
			"output",
			"TYPE_MASK",
			" + (obj?.cacheBucket ?? '') + ",
			"\\1//\\2",
			"opts",
			"}\\n\\n",
			"}\\n\\n\\1",
			"",
			"\n      t = 'l';"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 972,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": "/usr/include/portmidi.h",
							"function_name_status_row": 27,
							"outline_rename_mode": false,
							"symkeys":
							[
								[
									28,
									39
								],
								[
									4855,
									4862
								],
								[
									4885,
									4893
								],
								[
									4903,
									4916
								],
								[
									4955,
									4963
								],
								[
									4964,
									4974
								],
								[
									5000,
									5008
								],
								[
									5044,
									5049
								],
								[
									5084,
									5088
								],
								[
									5161,
									5189
								],
								[
									6356,
									6369
								],
								[
									6500,
									6512
								],
								[
									6609,
									6623
								],
								[
									6633,
									6641
								],
								[
									7556,
									7571
								],
								[
									7793,
									7808
								],
								[
									8050,
									8069
								],
								[
									8110,
									8119
								],
								[
									8131,
									8152
								],
								[
									8378,
									8388
								],
								[
									8398,
									8408
								],
								[
									8930,
									8945
								],
								[
									11050,
									11076
								],
								[
									11157,
									11184
								],
								[
									11360,
									11371
								],
								[
									11381,
									11392
								],
								[
									11465,
									11473
								],
								[
									11973,
									11989
								],
								[
									15382,
									15394
								],
								[
									15630,
									15643
								],
								[
									16808,
									16822
								],
								[
									16891,
									16904
								],
								[
									16965,
									16978
								],
								[
									17066,
									17078
								],
								[
									17164,
									17176
								],
								[
									17233,
									17243
								],
								[
									17307,
									17324
								],
								[
									17380,
									17393
								],
								[
									17451,
									17467
								],
								[
									17657,
									17669
								],
								[
									17783,
									17809
								],
								[
									17869,
									17892
								],
								[
									17960,
									17978
								],
								[
									18077,
									18092
								],
								[
									18154,
									18169
								],
								[
									18220,
									18237
								],
								[
									18286,
									18297
								],
								[
									18346,
									18367
								],
								[
									18413,
									18432
								],
								[
									18481,
									18493
								],
								[
									18596,
									18616
								],
								[
									18711,
									18723
								],
								[
									18777,
									18787
								],
								[
									19461,
									19478
								],
								[
									19863,
									19871
								],
								[
									20123,
									20131
								],
								[
									21395,
									21409
								],
								[
									21687,
									21697
								],
								[
									21842,
									21858
								],
								[
									21887,
									21902
								],
								[
									21938,
									21953
								],
								[
									21999,
									22008
								],
								[
									27086,
									27093
								],
								[
									27274,
									27281
								],
								[
									27753,
									27761
								],
								[
									28092,
									28105
								],
								[
									28260,
									28273
								]
							],
							"symlist":
							[
								"PORT_MIDI_H",
								"  int32_t",
								"  uint32_t",
								"INT32_DEFINED",
								"PMEXPORT",
								"  __declspec",
								"PMEXPORT",
								"FALSE",
								"TRUE",
								"PM_DEFAULT_SYSEX_BUFFER_SIZE",
								"Pm_Initialize",
								"Pm_Terminate",
								"PortMidiStream",
								"PmStream",
								"Pm_HasHostError",
								"Pm_GetErrorText",
								"Pm_GetHostErrorText",
								"HDRLENGTH",
								"PM_HOST_ERROR_MSG_LEN",
								"PmDeviceID",
								"  pmNoDevice",
								"Pm_CountDevices",
								"Pm_GetDefaultInputDeviceID",
								"Pm_GetDefaultOutputDeviceID",
								"PmTimestamp",
								"PmTimestamp",
								"PmBefore",
								"Pm_GetDeviceInfo",
								"Pm_OpenInput",
								"Pm_OpenOutput",
								"PM_FILT_ACTIVE",
								"PM_FILT_SYSEX",
								"PM_FILT_CLOCK",
								"PM_FILT_PLAY",
								"PM_FILT_TICK",
								"PM_FILT_FD",
								"PM_FILT_UNDEFINED",
								"PM_FILT_RESET",
								"PM_FILT_REALTIME",
								"PM_FILT_NOTE",
								"PM_FILT_CHANNEL_AFTERTOUCH",
								"PM_FILT_POLY_AFTERTOUCH",
								"PM_FILT_AFTERTOUCH",
								"PM_FILT_PROGRAM",
								"PM_FILT_CONTROL",
								"PM_FILT_PITCHBEND",
								"PM_FILT_MTC",
								"PM_FILT_SONG_POSITION",
								"PM_FILT_SONG_SELECT",
								"PM_FILT_TUNE",
								"PM_FILT_SYSTEMCOMMON",
								"Pm_SetFilter",
								"Pm_Channel",
								"Pm_SetChannelMask",
								"Pm_Abort",
								"Pm_Close",
								"Pm_Synchronize",
								"Pm_Message",
								"Pm_MessageStatus",
								"Pm_MessageData1",
								"Pm_MessageData2",
								"PmMessage",
								"Pm_Read",
								"Pm_Poll",
								"Pm_Write",
								"Pm_WriteShort",
								"Pm_WriteSysEx"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1733629535.48,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "eagle-shell.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 42556,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1733627378.63,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 13216.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "list.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 442,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1733627377.9,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "debugger-server.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 29603,
						"regions":
						{
						},
						"selection":
						[
							[
								15688,
								15688
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 533,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1733628857.28,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7981.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "ast-shell.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 37870,
						"regions":
						{
						},
						"selection":
						[
							[
								16155,
								16155
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 575,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1733630859.8,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8830.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "portmidi.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9699,
						"regions":
						{
						},
						"selection":
						[
							[
								6180,
								6180
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 224,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1733630862.14,
							"tabs_extra_last_activated_sheet_index": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1821.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/usr/include/portmidi.h",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 28421,
						"regions":
						{
						},
						"selection":
						[
							[
								20156,
								20159
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 468,
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 4,
							"tabs_extra_last_activated": 1735599540.1,
							"tabs_extra_last_activated_sheet_index": 5,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7198.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "io-helpers.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6606,
						"regions":
						{
						},
						"selection":
						[
							[
								2886,
								2886
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 113,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1733628857.27,
							"tabs_extra_last_activated_sheet_index": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1566.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "os-helpers.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2665,
						"regions":
						{
						},
						"selection":
						[
							[
								2353,
								2353
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 92,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1733628795.23,
							"tabs_extra_last_activated_sheet_index": 5,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1054.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "quickjs/qjs-modules/quickjs-misc.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 96111,
						"regions":
						{
						},
						"selection":
						[
							[
								13821,
								13821
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 592,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1733628562.36,
							"tabs_extra_last_activated_sheet_index": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 12487.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "portaudio.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 29378,
						"regions":
						{
						},
						"selection":
						[
							[
								284,
								284
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 5,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1733628095.55,
							"tabs_extra_last_activated_sheet_index": 5,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "quickjs/quickjs.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 40037,
						"regions":
						{
						},
						"selection":
						[
							[
								2030,
								2030
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 59,
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1733627376.69,
							"tabs_extra_last_activated_sheet_index": 6,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 944.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "/usr/include/portaudio.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 47967,
						"regions":
						{
						},
						"selection":
						[
							[
								20310,
								20335
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 575,
							"syntax": "Packages/C++11/C++11.tmLanguage",
							"tab_size": 4,
							"tabs_extra_last_activated": 1733627777.56,
							"tabs_extra_last_activated_sheet_index": 7,
							"tabs_extra_moving":
							[
								5,
								1
							],
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8727.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "portaudio2.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2379,
						"regions":
						{
						},
						"selection":
						[
							[
								46,
								46
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1733628099.34,
							"tabs_extra_last_activated_sheet_index": 8,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "clang-ast.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 78524,
						"regions":
						{
						},
						"selection":
						[
							[
								7749,
								7749
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 284,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1733630319.35,
							"tabs_extra_last_activated_sheet_index": 13,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4110.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 41.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.8,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 300.0
	},
	"output.Debugger Console":
	{
		"height": 300.0
	},
	"output.exec":
	{
		"height": 138.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "plot-cv.sublime-project",
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"portmidi",
				"/usr/include/portmidi.h"
			],
			[
				"portmidi.js",
				"portmidi.js"
			],
			[
				"portmidi.h",
				"/usr/include/portmidi.h"
			],
			[
				"clang-as",
				"clang-ast.js"
			],
			[
				"ast-she",
				"ast-shell.js"
			],
			[
				"-helpers",
				"os-helpers.js"
			],
			[
				"io-helper",
				"io-helpers.js"
			],
			[
				"portaudio.h",
				"/usr/include/portaudio.h"
			],
			[
				"portaudio",
				"portaudio.js"
			],
			[
				"quickjs.h",
				"quickjs/quickjs.h"
			],
			[
				"quickjs-misc",
				"quickjs/qjs-modules/quickjs-misc.c"
			],
			[
				"portaudio.js",
				"portaudio.js"
			],
			[
				"portaudio2.js",
				"portaudio2.js"
			],
			[
				"debugger-ser",
				"debugger-server.js"
			],
			[
				"list.ht",
				"list.html"
			],
			[
				"eagle-she",
				"eagle-shell.js"
			],
			[
				"webka",
				"webakeit-telegram.js"
			],
			[
				"xml-she",
				"quickjs/qjs-modules/xml-shell.js"
			],
			[
				".html",
				"fire.html"
			],
			[
				"numbers2",
				"numbers2.c"
			],
			[
				"main.js",
				"main.js"
			],
			[
				"main",
				"main.js"
			],
			[
				"splines",
				"lib/geom/splines.js"
			],
			[
				"pointList",
				"lib/geom/pointList.js"
			],
			[
				"draw.js",
				"draw.js"
			],
			[
				"fire.js",
				"fire.js"
			],
			[
				"upload-ser",
				"upload-server.js"
			],
			[
				"compon",
				"components.js"
			],
			[
				"ointlist",
				"lib/geom/pointList.js"
			],
			[
				"events.js",
				"lib/async/events.js"
			],
			[
				"point.js",
				"lib/geom/point.js"
			],
			[
				"misc.js",
				"lib/misc.js"
			],
			[
				"draw.css",
				"static/css/draw.css"
			],
			[
				"upload-server",
				"upload-server.js"
			],
			[
				"websocket",
				"webSocket.js"
			],
			[
				"draw.html",
				"draw.html"
			],
			[
				"autoStore",
				"lib/autoStore.js"
			],
			[
				"resolve-im",
				"quickjs/qjs-modules/resolve-imports.js"
			],
			[
				"svg-box",
				"svg-box.js"
			],
			[
				"fd-graph",
				"lib/fd-graph.js"
			],
			[
				"draw-u",
				"draw-utils.js"
			],
			[
				"draw-util",
				"draw-utils.js"
			],
			[
				"test-nano",
				"test-nanovg.js"
			],
			[
				"fd-gra",
				"lib/fd-graph.js"
			],
			[
				"graph.js",
				"lib/geom/graph.js"
			],
			[
				"eagle-shell",
				"eagle-shell.js"
			],
			[
				"node.js",
				"lib/eagle/node.js"
			],
			[
				"eleme",
				"lib/eagle/element.js"
			],
			[
				"quickjs-mysql.c",
				"quickjs/qjs-modules/quickjs-mysql.c"
			],
			[
				"mailcow-db",
				"mailcow-db.js"
			],
			[
				"wscli.js",
				"quickjs/qjs-net/wscli.js"
			],
			[
				"upload.js",
				"upload.js"
			],
			[
				"workertest",
				"workertest.js"
			],
			[
				"promise-wor",
				"promise-worker.js"
			],
			[
				"test-work",
				"test-worker.js"
			],
			[
				"upload.css",
				"static/css/upload.css"
			],
			[
				"upload.html",
				"upload.html"
			],
			[
				"draw-ut",
				"draw-utils.js"
			],
			[
				"test-nan",
				"test-nanovg.js"
			],
			[
				"cv-shell",
				"cv-shell.js"
			],
			[
				"test-open",
				"test-opencv.js"
			],
			[
				"test-vid",
				"test-video.js"
			],
			[
				"test-opencv",
				"test-opencv.js"
			],
			[
				"noise.js",
				"noise.js"
			],
			[
				"noise",
				"noise.html"
			],
			[
				"dire",
				"directory.html"
			],
			[
				"upload",
				"upload.html"
			],
			[
				"map.ht",
				"map.html"
			],
			[
				"landing",
				"landing.html"
			],
			[
				"fire",
				"fire.html"
			],
			[
				"filelist",
				"filelist.html"
			],
			[
				"coil",
				"coil.html"
			],
			[
				"util.js",
				"quickjs/qjs-modules/lib/util.js"
			],
			[
				"inde",
				"index.html"
			],
			[
				"404.ht",
				"404.html"
			],
			[
				"lscac",
				"lib/lscache.js"
			],
			[
				"style.css",
				"style.css"
			],
			[
				"direcot",
				"directory.html"
			],
			[
				"rpc.js",
				"quickjs/qjs-net/js/rpc.js"
			],
			[
				"direc",
				"directory.html"
			],
			[
				"smd.js",
				"lib/eagle/components/smd.js"
			],
			[
				"smd.jy",
				"quickjs/qjs-modules/3rdparty/denodrivers-postgres/docs/.nojekyll"
			],
			[
				"via.js",
				"lib/eagle/components/via.js"
			],
			[
				"hole.js",
				"lib/eagle/components/hole.js"
			],
			[
				"eagle2sv",
				"eagle2svg.js"
			],
			[
				"svgRe",
				"lib/eagle/svgRenderer.js"
			],
			[
				"boardre",
				"lib/eagle/boardRenderer.js"
			],
			[
				"polygon",
				"lib/eagle/components/polygon.js"
			],
			[
				"polygon.js",
				"lib/geom/polygon.js"
			],
			[
				"symbol",
				"lib/eagle/components/symbol.js"
			],
			[
				"wire.js",
				"lib/eagle/components/wire.js"
			],
			[
				"components/sym",
				"lib/eagle/components/symbol.js"
			],
			[
				"eagle/ele",
				"lib/eagle/element.js"
			],
			[
				"github-user",
				"github-userscript.js"
			],
			[
				"line.js",
				"lib/geom/line.js"
			],
			[
				"rect.",
				"lib/geom/rect.js"
			],
			[
				"repl.js",
				"quickjs/qjs-modules/lib/repl.js"
			],
			[
				"minnet-clie",
				"quickjs/qjs-net/src/minnet-client.c"
			],
			[
				"callbaCK.C",
				"quickjs/qjs-net/lib/callback.c"
			],
			[
				"internal",
				"quickjs/qjs-modules/quickjs-internal.h"
			],
			[
				"utils.c",
				"quickjs/qjs-modules/src/utils.c"
			],
			[
				"qjsm.c",
				"quickjs/qjs-modules/src/qjsm.c"
			],
			[
				"eagle2",
				"eagle2gerber.js"
			],
			[
				"pcb-con",
				"pcb-conversion.js"
			],
			[
				"test_free",
				"qjs-opencv/tests/test_freetype.js"
			],
			[
				"param.js",
				"param.js"
			],
			[
				"make",
				"make-bitmap.js"
			],
			[
				"test_png",
				"qjs-opencv/tests/test_png.js"
			],
			[
				"stream/utils",
				"lib/stream/utils.js"
			],
			[
				"svg-cr",
				"svg-crop-pad.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 330.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
