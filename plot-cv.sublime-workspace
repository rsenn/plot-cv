{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Trans",
				"TransformationList"
			],
			[
				"getOwn",
				"getOwnPropertyDescriptors"
			],
			[
				"BoardRe",
				"BoardRenderer.renderCollection"
			],
			[
				"lazy",
				"lazyProperties"
			],
			[
				"getM",
				"getMeasures"
			],
			[
				"eventP",
				"eventProxyCapture"
			],
			[
				"strok",
				"strokeParams"
			],
			[
				"skel",
				"skeletonization"
			],
			[
				"Debugger",
				"DebuggerDispatcher"
			],
			[
				"JSInput",
				"JSInputOutputArray"
			],
			[
				"B",
				"BOOL"
			],
			[
				"JS_Set",
				"JS_SetPropertyUint32"
			],
			[
				"Asyn",
				"AsyncIterator"
			],
			[
				"ret",
				"return_flag"
			],
			[
				"ImportID",
				"ImportIdMap"
			],
			[
				"Num",
				"NumericRange"
			],
			[
				"define",
				"defineProperty(...)"
			],
			[
				"dbuf_",
				"dbuf_init2"
			],
			[
				"has_",
				"has_dot_or_slash"
			],
			[
				"My",
				"MySQLResult"
			],
			[
				"JS_ToCS",
				"JS_ToCStringLen"
			],
			[
				"CF",
				"CFunctionClosureRecord"
			],
			[
				"js_",
				"js_mysqlresult_class_id"
			],
			[
				"extendA",
				"extendAsyncGenerator"
			],
			[
				"JS_SetPr",
				"JS_SetPropertyStr"
			],
			[
				"MYSQL_TYPE_NEW",
				"MYSQL_TYPE_NEWDECIMAL"
			],
			[
				"JS_CF",
				"JS_CFUNC_MAGIC_DEF"
			],
			[
				"js_mysqlresult_fun",
				"js_mysqlresult_functions"
			],
			[
				"JS_ToCSt",
				"JS_ToCStringLen"
			],
			[
				"js_mysql_f",
				"js_mysql_functions"
			],
			[
				"MARIA",
				"MARIADBCLIENT_LIBRARY"
			],
			[
				"depe",
				"dependencyMap"
			],
			[
				"depden",
				"dependencyTree"
			],
			[
				"add_",
				"add_dependencies"
			],
			[
				"ch",
				"chunks_written"
			],
			[
				"defineP",
				"defineProperties(...)"
			],
			[
				"CMAKE_CURR",
				"CMAKE_CURRENT_BINARY_DIR"
			],
			[
				"gener",
				"generate_module_header"
			],
			[
				"RINGBUFFER_C",
				"RINGBUFFER_CONSUMERANGE"
			],
			[
				"RINGBUFFER_CONSU",
				"RINGBUFFER_CONSUMERANGE"
			],
			[
				"JS_NewArra",
				"JS_NewArrayBufferCopy"
			],
			[
				"RINGBU",
				"RINGBUFFER_INSERT"
			],
			[
				"hea",
				"headers_sent"
			],
			[
				"PR",
				"PRIi64"
			],
			[
				"db",
				"dbuf_init2"
			],
			[
				"JS_Get",
				"JS_GetProperty"
			],
			[
				"Ret",
				"ReturnValuePathFunction"
			],
			[
				"cFunc",
				"cFuncListObjects"
			],
			[
				"isC",
				"isCFuncCall"
			],
			[
				"En",
				"EntityNames"
			],
			[
				"parseFrom",
				"parseFromString"
			],
			[
				"pseu",
				"pseudoClassArg"
			],
			[
				"pseudoC",
				"pseudoClassName"
			],
			[
				"Key",
				"KeyboardEvent"
			],
			[
				"getOp",
				"getOptionEntries"
			],
			[
				"setProp",
				"setPropertyValue"
			],
			[
				"parse",
				"parseSelectors"
			],
			[
				"jsm_buil",
				"jsm_builtin_init"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"JS_New",
				"JS_NewObject"
			],
			[
				"ide",
				"importIdentifiers"
			],
			[
				"iden",
				"importIdentifiers"
			],
			[
				"import",
				"importIdentifiers"
			],
			[
				"ident",
				"identifierSets"
			],
			[
				"path_is",
				"path_is_absolute"
			],
			[
				"js_is_",
				"js_is_null_or_undefined"
			],
			[
				"path_skip_se",
				"path_skip_separator_s"
			],
			[
				"WRITABLE_METHO",
				"WRITABLE_METHOD_CLOSE"
			],
			[
				"list_fo",
				"list_for_each_prev"
			],
			[
				"JS_Th",
				"JS_ThrowOutOfMemory"
			],
			[
				"JS_",
				"JS_ThrowOutOfMemory"
			],
			[
				"underly",
				"underlying_source"
			],
			[
				"Tok",
				"TokenSequence"
			],
			[
				"JS_GetPr",
				"JS_GetPropertyStr"
			],
			[
				"JS_Thro",
				"JS_ThrowOutOfMemory"
			],
			[
				"getAt",
				"getAttributeNames"
			],
			[
				"self",
				"self_closing_tags"
			],
			[
				"self_",
				"self_closing_tags"
			],
			[
				"JS_PROP",
				"JS_PROP_ENUMERABLE"
			],
			[
				"de",
				"dependencyMap"
			],
			[
				"dep",
				"dependencyMap"
			],
			[
				"js_is_null",
				"js_is_null_or_undefined"
			],
			[
				"JS_P",
				"JS_PROP_ENUMERABLE"
			],
			[
				"JS_SetP",
				"JS_SetPropertyUint32"
			],
			[
				"spec",
				"specifiers"
			],
			[
				"token_r",
				"token_release_rt"
			],
			[
				"JS_Thr",
				"JS_ThrowTypeError"
			],
			[
				"debug_js_mall",
				"debug_js_malloc_usable_size"
			],
			[
				"repl",
				"replaceRange"
			],
			[
				"js_malloc_u",
				"js_malloc_usable_size_rt"
			],
			[
				"malloc",
				"malloc_usable_size"
			],
			[
				"all",
				"alloc_block_list"
			],
			[
				"alloc",
				"alloc_block_list"
			],
			[
				"path_skip",
				"path_skip_component"
			],
			[
				"jsm_mo",
				"jsm_module_loader"
			],
			[
				"JS_Throw",
				"JS_ThrowInternalError"
			],
			[
				"JS_AtomTo",
				"JS_AtomToValue"
			],
			[
				"inspect",
				"inspectSymbol"
			],
			[
				"at",
				"attributes"
			],
			[
				"parent",
				"parentElement"
			],
			[
				"owner",
				"ownerElement"
			],
			[
				"get",
				"getPrototypeOf"
			],
			[
				"child",
				"childElementCount"
			],
			[
				"getO",
				"getOwnPropertyNames"
			],
			[
				"js_misc_im",
				"js_misc_immutable_constructor"
			],
			[
				"obj",
				"object_tostring"
			],
			[
				"js_misc_immu",
				"js_misc_immutable_free"
			],
			[
				"js_misc_imm",
				"js_misc_immutable_constructor"
			],
			[
				"CMAKE_IMPORT",
				"CMAKE_IMPORT_LIBRARY_SUFFIX"
			],
			[
				"CMAKE_CUR",
				"CMAKE_CURRENT_BINARY_DIR"
			],
			[
				"js_is",
				"js_is_null_or_undefined"
			],
			[
				"js_asy",
				"js_async_socket_class_id"
			],
			[
				"JS_NewObj",
				"JS_NewObjectProtoClass"
			],
			[
				"async_",
				"async_socket_proto"
			],
			[
				"js_socket_class",
				"js_socket_class_id"
			],
			[
				"g",
				"getOwnPropertyNames(...)"
			],
			[
				"js_sockaddr_cl",
				"js_sockaddr_class_id"
			],
			[
				"js_so",
				"js_sockaddr_constructor"
			],
			[
				"js_sys",
				"js_syscallerror_class_id"
			],
			[
				"js_string",
				"js_stringdecoder_class_id"
			],
			[
				"js_pred",
				"js_predicate_class_id"
			],
			[
				"js_syn",
				"js_syntaxerror_class"
			],
			[
				"js_child",
				"js_child_process_class_id"
			],
			[
				"js_b",
				"js_blob_class_id"
			],
			[
				"js_loca",
				"js_location_class_id"
			],
			[
				"js_token_in",
				"js_token_inspect_funcs"
			],
			[
				"set",
				"setReadHandler"
			],
			[
				"js_get_",
				"js_get_propertystr_bool"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix",
				"name": "𝌆 Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					4295,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/lib/eagle/svgRenderer.js",
						"symkeys":
						[
							[
								734,
								755
							],
							[
								831,
								847
							],
							[
								1100,
								1125
							],
							[
								1328,
								1341
							],
							[
								1411,
								1423
							],
							[
								1557,
								1567
							],
							[
								1654,
								1711
							],
							[
								1915,
								1919
							],
							[
								1930,
								1934
							],
							[
								2111,
								2122
							],
							[
								3060,
								3064
							],
							[
								3093,
								3103
							],
							[
								3456,
								3483
							],
							[
								3593,
								3612
							],
							[
								3641,
								3654
							],
							[
								3667,
								3683
							],
							[
								3761,
								3779
							],
							[
								4182,
								4189
							],
							[
								4878,
								4893
							],
							[
								5040,
								5056
							],
							[
								5428,
								5448
							],
							[
								5630,
								5639
							],
							[
								6468,
								6503
							],
							[
								6664,
								6693
							],
							[
								6834,
								6848
							],
							[
								8173,
								8220
							],
							[
								8975,
								9038
							],
							[
								9626,
								9664
							]
						],
						"symlist":
						[
							"transformXPath = p =>",
							"EagleSVGRenderer",
							"constructor(doc, factory)",
							" path =>",
							" key =>",
							" (k, v) =>",
							".create = function(tag, attrs, children, parent, element)",
							"m =>",
							"n =>",
							"(acc, p) =>",
							"n =>",
							"get maps()",
							"static create(doc, factory)",
							"setPalette(palette)",
							"(color, i) =>",
							".valueOf = () =>",
							"(acc, color, i) =>",
							"Palette",
							"getColor(color)",
							"layerOf(element)",
							"renderLayers(parent)",
							"(a, b) =>",
							"renderItem(item, parent, opts = {})",
							"svg = (elem, attr, parent) =>",
							"coordFn = i =>",
							"static alignment(align, def = [-1, 1], rot = 0)",
							"static alignmentAttrs(align, hv = HORIZONTAL_VERTICAL, rot = 0)",
							"render(obj, props = {}, children = [])"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACUFgAAKCkgPT4KICByZXMgPT4KKCkgPT4KICByID0+CiAgciA9PgogIGVudHJpZXMoKQpHZXRQcm9qZWN0ID0gYXJnID0+CiAgcCA9PgooKSA9Pgp2YWx1ZSA9PgogIGFkZCA9IChhcnIsIC4uLml0ZW1zKSA9PgogIHVzZVNsb3QgPSAoYXJyLCBpKSA9PgooKSA9Pgp2ID0+CiAgdHJrbEdldFNldCA9IChnZXQsIHNldCkgPT4gdmFsdWUgPT4KKCkgPT4KKHBhcmVudCwgZGVsZWdhdGUpID0+CiAgYXBwZW5kX3RvKGVsZW0sIHApCkRyYXdTVkcoLi4uYXJncykKICBhcHBlbmRfdG8oZWxlbSwgcCkKICBhZGp1c3RWaWV3Qm94KGUpCiAgY2FsY1ZpZXdCb3goYm94KQogIHNldFZpZXdCb3goc3ZnT3duZXIsIGJveCkKRWxlbWVudFRvWE1MID0gKGUsIHByZWRpY2F0ZSkgPT4KKHYsIGspID0+Cih2LCBrKSA9PgoodiwgaykgPT4KICByZWFkRmlsZShmaWxlbmFtZSkKICB3cml0ZUZpbGUoZmlsZW5hbWUsIGRhdGEsIG92ZXJ3cml0ZSA9IHRydWUpCiAgZXhpc3RzKGZpbGVuYW1lKQogIHJlYWxwYXRoKGZpbGVuYW1lKQpMb2FkRmlsZShmaWxlKQpTYXZlRmlsZShmaWxlbmFtZSwgZGF0YSwgY29udGVudFR5cGUpCiAgcyA9PgooKSA9PgpTYXZlU1ZHKGZpbGVuYW1lLCBsYXllcnMgPSBbMSwgMTYsIDIwLCAyMSwgMjIsIDIzLCAyNSwgMjcsIDQ3LCA0OCwgNTFdKQogIHByZWRpY2F0ZSA9IGVsZW1lbnQgPT4KTG9hZFNWRyhmaWxlbmFtZSkKTG9hZEltYWdlKGZpbGVuYW1lKQooKSA9PgpSZW5kZXJDb21wb25lbnQoY29tcG9uZW50KQpNb2RpZnlDb2xvcnMgPSBmbiA9PiBlID0+CkZpbmRMYXllciA9IG5hbWVfb3JfaWQgPT4KICBuID0+CiAgbCA9PgooaWQgPSAnI2dlb20nKSA9PgoocHJvcHMgPSB7fSkgPT4KICBtYXhaSW5kZXggPSAoKSA9PgogIGUgPT4KICB6ID0+CiAgeiA9PgooKSA9PgogIHJhbmRvbUNvbG9yID0gKCkgPT4KRHJhd0FyYyhzdGFydCwgZW5kLCBhbmdsZSkKICBwcm9wcyA9PgogIHAgPT4KICBhID0+CiAgbSA9PgogIGhleCA9PgogIHAgPT4KICBwID0+CiAgcCA9PgooeyB4LCB5IH0pID0+CiAgYSA9PgooeyB4LCB5IH0sIGkpID0+CmUgPT4KKGwsIGkpID0+CihwLCBpKSA9PgoocCwgaSkgPT4KICBhZGQgPSAobGV2ZWwsIGl0ZW0pID0+ClJlY3Vyc2VCaW5hcnlOb2RlKG5vZGUsIHBhcmVudCA9IG51bGwsIGRlcHRoID0gMCkKKG5vZGVzLCBpLCBsZXZlbCkgPT4KICBmeCA9IGogPT4KKG5vZGUsIGopID0+CiAgaXRlbSA9PgpEcmF3Tm9kZSh4LCB5LCBub2RlKQpEcmF3RWRnZShpdGVtLCBwYXJlbnQpCkdldFBhdGhzKHF1ZXJ5LCBwYXJlbnQgPSBwcm9qZWN0LnN2Z0VsZW1lbnQpCihhLCBlKSA9PgpQYXRoVG9Qb2x5bGluZXMocGF0aCwgc3RlcCA9IDAuMDEpCiAgcCA9PgogIHBvbHkgPT4KICBwb2x5ID0+CihwLCBkLCBzZXQsIHN0b3ApID0+ClBhdGhUb1BvbHlsaW5lKHBhdGgsIHN0ZXAgPSAwLjAxKQoocCwgZCwgc2V0LCBzdG9wKSA9PgpQYXRoc1RvUG9seWxpbmVzKHBhdGhzLCBzdGVwID0gMC4wMSkKICBwYXRoID0+Ck91dHNldFBhdGgocGF0aCwgb2Zmc2V0LCBtaXRlckxpbWl0ID0gMiwgYXJjVG9sZXJhbmNlID0gMC4wMSkKICAudG9Qb2x5bGluZXMgPSBmdW5jdGlvbigpCiAgcCA9PgooeyBYLCBZIH0pID0+Ck91dHNldFBhdGhzKHBhdGhzLCBvZmZzZXQsIG1pdGVyTGltaXQgPSAyLCBhcmNUb2xlcmFuY2UgPSAwLjI1KQogIHBhdGggPT4KKGEsIHApID0+CkNsaXBQYXRoKHBhdGgsIGNsaXAsIG1vZGUgPSBDbGlwcGVyTGliLkNsaXBUeXBlLmN0VW5pb24pCiAgYWRkID0gKHAsIGNsaXAgPSBmYWxzZSkgPT4KICAudG9Qb2x5bGluZXMgPSBmdW5jdGlvbigpCiAgcCA9PgooeyBYLCBZIH0pID0+CiAgc2F2ZUl0ZW1TdGF0ZXMoaXRlbUxpc3QsIGdldCA9IGl0ZW0gPT4gaXMuCihpdGVtLgopKQogIGl0ZW0gPT4KICByZXN0b3JlSXRlbVN0YXRlcyhpdGVtU3RhdGVzLCAvKnByZXR0aWVyLWlnbm9yZSAqLyBzZXQgPSAoaXRlbSwgdmFsdWUpID0+IGl0ZW0uCih2YWx1ZSA/ICd5ZXMnIDogJ25vJykpCkVhZ2xlTWFwcyhwcm9qZWN0KQogIHRyYW5zZm9ybVBhdGggPSBwID0+CiAgZSA9PgogIGRvbTJlYWdsZSA9IG5vZGUgPT4KICBlYWdsZTJkb20gPSBlbGVtID0+CiAgcGF0aDJkb20gPSBwID0+CihrZXksIHZhbHVlKSA9Pgooa2V5LCB2YWx1ZSkgPT4KUGFja2FnZU5hbWVzKGRvYyA9IHByb2plY3QuZG9jKQogIGUgPT4KKFtlLCBiXSkgPT4KKFtlLCB3LCBoLCBtLCB2XSkgPT4KKHsgaW5kZXgsIC4uLm1hdGNoIH0pID0+Cih7IHMsIHYsIGluZGV4ZXMgfSwgbWF0Y2gsIGkpID0+CihbdG9rZW4sIGluZGV4XSkgPT4KKFt0b2tlbiwgaW5kZXhdKSA9PgpOZXh0RG9jdW1lbnQobiA9IDEpCihpZHgsIGkpID0+CihpZHgsIGkpID0+CkxvYWREb2N1bWVudChwcm9qZWN0LCBwYXJlbnRFbGVtKQogIGVyciA9PgooKSA9PgplbnQgPT4KKCkgPT4KZW50ID0+CiAgcmVuYW1lUGFja2FnZXMoKQogIGEgPT4KICB2YWx1ZSA9PgooKSA9PgogIGxheWVyID0+CigpID0+CiAgZm4gPSBmdW5jdGlvbih2KQooKSA9PgogIC5tYWtlR3JvdXAgPSBmdW5jdGlvbih7IHRyYW5zZm9ybSwgLi4ucHJvcHMgfSA9IHt9KQogIGlkID0+CigpID0+CiAgeHgoKQooKSA9PgoodHJhbnNmb3JtKQoodGFnLCBhdHRyLCBjaGlsZHJlbiA9IFtdKSA9PgogIHZhbHVlID0+CiAgc2V0UmVjdCA9IHJlY3QgPT4KICBrID0+CiAgZWxlbSA9PgogIGdldCB4KCkKICBzZXQgeCh2YWx1ZSkKICBnZXQgeSgpCiAgc2V0IHkodmFsdWUpCiAgZ2V0IHgxKCkKICBzZXQgeDEodmFsdWUpCiAgZ2V0IHkxKCkKICBzZXQgeTEodmFsdWUpCiAgZ2V0IHgyKCkKICBzZXQgeDIodmFsdWUpCiAgZ2V0IHkyKCkKICBzZXQgeTIodmFsdWUpCiAgZ2V0IHdpZHRoKCkKICBzZXQgd2lkdGgodmFsdWUpCiAgZ2V0IGhlaWdodCgpCiAgc2V0IGhlaWdodCh2YWx1ZSkKKCkgPT4KUmVjdAphID0+CmVyciA9PgpDaG9vc2VEb2N1bWVudChwcm9qZWN0LCBpKQpHZW5lcmF0ZVZvcm9ub2kgPSAoKSA9PgpSZWN0CiAgcCA9PgogIGUgPT4KKHsgbFNpdGUsIHJTaXRlLCAuLi5lZGdlIH0pID0+CiAgZSA9PgooeyBsU2l0ZSwgclNpdGUsIC4uLmVkZ2UgfSkgPT4KICBlID0+Cih7IHZhLCB2YiwgLi4uZWRnZSB9KSA9PgogIHYgPT4KICBhZGQgPSAoYXJyLCAuLi5pdGVtcykgPT4KICBsID0+CiAgdCA9PgogIGwgPT4KICB0ID0+CiAgcCA9PgooYWNjLCB7IHNpdGUsIGhhbGZlZGdlcyB9KSA9PgooeyBzaXRlIH0pID0+ClBhY2thZ2VDaGlsZHJlbihlbGVtZW50LCBsYXllcikKKGMsIGkpID0+CihbaSwgcF0pID0+CihbaSwgZV0pID0+CkVsZW1lbnRDaGlsZHJlbihsYXllciA9ICd0UGxhY2UnLCByZm4gPSBlbnQgPT4gCihlbnQpKQooW25hbWUsIGVsZW1lbnRdKSA9PgpFbGVtZW50R2VvbWV0cmllcyhsYXllciA9ICd0UGxhY2UnLCByZm4gPSBlbnQgPT4gCihlbnQpKQplbnQgPT4KKFtuYW1lLCBjaGlsZHJlbl0pID0+CihbaSwgZV0pID0+CihbbmFtZSwgbGluZXNdKSA9PgogIHB0cyA9PgooW25hbWUsIGxpbmVzLCBwb2x5Z29uc10pID0+Ck5ld1BhdGgocGF0aCkKTWFrZUZpdEFjdGlvbiA9IGluZGV4ID0+CiAgZXZlbnQgPT4KWm9vbUZhY3Rvcih2YWwgPSBjb25maWcuCikKWm9vbUxvZyhmYWN0b3IpCkFkanVzdFpvb20obCA9IGNvbmZpZy4KKQpDcmVhdGVHcmJsU29ja2V0ID0gKHBvcnQgPSAndG50MScpID0+CkhhbmRsZU1lc3NhZ2UobXNnKQogIHBvaW50U3RyID0+CiAgc29ja2V0Rm4gPSAoKSA9PgogIC5zZW5kID0gKC4uLmFyZ3MpID0+CkF1dGhvcml6YXRpb25EaWFsb2cgPSAoeyBvbkF1dGgsIC4uLnByb3BzIH0pID0+CiAgb25TdWJtaXQ6ICgpID0+CiAgb25JbnB1dDogZSA9PgogIG9uSW5wdXQ6IGUgPT4KICBvbkNsaWNrOiBlID0+CiAgYXJnID0+CiAgLm9ubG9hZCA9ICgpID0+CiAgcmVzcG9uc2UgPT4KICBlID0+CnYgPT4KVGVzdEFyYzogKCkgPT4KKCkgPT4KKHB1c2gsIHN0b3ApID0+CigpID0+CihwdXNoLCBzdG9wKSA9Pgp0YXJnZXQgPT4KKGtleSwgbW9kaWZpZXJzID0gMCkgPT4KICAuZm9jdXNTZWFyY2ggPSBzdGF0ZSA9PgogIGNoaWxkcmVuOiAoKSA9PgogIGdlb21ldHJpZXM6ICgpID0+CiAgdmFsdWUgPT4KKCkgPT4KICB0ZXN0Q29tcG9uZW50ID0gcHJvcHMgPT4KICByZXNwID0+CiAganNvbiA9PgpGaWxlKG9iaiwgaSkKRmlsZQpGaWxlLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkKKGEsIGIpID0+CihvYmosIGkpID0+CihhY2MsIGZpbGUpID0+CiAgaSA9PgogIHZhbHVlID0+CiAgdmFsdWUgPT4KICB2YWx1ZSA9PgogIHZhbHVlID0+CiAgdmFsdWUgPT4KICB2YWx1ZSA9PgogIHVwZGF0ZUlmQ2hhbmdlZCA9ICh0cmtsLCBuZXdWYWx1ZSwgY2FsbGJhY2spID0+CihlbGVtLCBpKSA9PgogIGNoYW5nZUlucHV0ID0gZSA9PgogIHAgPT4KYXJnID0+CkNvbnN1bWVyID0gcHJvcHMgPT4KKCkKICBsb2codHlwZSwgdGltZSwgbXNnKQpMb2dnZXIgPSBwcm9wcyA9PgooKQooW3R5cGUsIGQsIHQsIG1dLCBpKSA9PgpEdW1wZXIgPSBwcm9wcyA9PgogIHZhbHVlID0+Cihbaywgdl0sIGkpID0+CkNvbW1hbmRlciA9ICh7IG9uQ29tbWFuZCwgLi4ucHJvcHMgfSkgPT4KICBoYW5kbGVyID0gZSA9PgogIHRvZ2dsZSA9IHRya2wgPT4KTGF5ZXIgPSAoeyB0aXRsZSwgbmFtZSwgbGFiZWwsIGksIGNvbG9yLCBlbGVtZW50LCBjbGFzc05hbWUsIC4uLnByb3BzIH0pID0+CiAgc2V0VmlzaWJsZSA9IHZhbHVlID0+CiAgZSA9PgplID0+CiAgbCA9PgogIGwgPT4KKGl0ZW0sIHZhbHVlKSA9PgppdGVtID0+CiAgbCA9PgooW2wsIHN0YXRlXSkgPT4KICBlID0+CiAgb25Nb3VzZU1vdmU6IGUgPT4KICBvbk1vdXNlVXA6IGUgPT4KRG9jdW1lbnRMaXN0CiAgY29uc3RydWN0b3IoKQoocHVzaCwgc3RvcCkgPT4KICBhZGQobmFtZSwgY29tcG9uZW50KQogIGFkZEVudHJ5KFtuYW1lLCBjb21wb25lbnRdKQogIHJlbW92ZShuYW1lKQogIHVwZGF0ZSgpCiAgZm46IGUgPT4KICBmbjogKCkgPT4KICBvcGVuID0+CnByb3BzID0+CnByb3BzID0+CiAgZSA9PgogIGkgPT4KICBpID0+Cih7IGNvb3JkIH0pID0+CiAgc2lkZSA9PgogIGNyZWF0ZTogKHByb2plY3QsIHByb3BzID0ge30pID0+CiAgYSA9PgogIGUgPT4KICBlID0+CiAgbmFtZSA9PgogIGUgPT4KICBtYWtlTGF5ZXJOYW1lKG5hbWUsIHNpZGUpCiAgZm46ICgpID0+CiAgb25DaGFuZ2UoZXZlbnQpCnByb3BzID0+CnByb3BzID0+CnByb3BzID0+CihlLCBwLCBpKSA9PgogIG1ha2VTb3J0Q29tcGFyZToga2V5ID0+CmZ1bmN0aW9uKGEsIGIpCmZ1bmN0aW9uKGEsIGIpCiAgb25Db21tYW5kOiBjbWRTdHIgPT4KICBoYW5kbGVDaGFuZ2U6IGUgPT4KZXZlbnQgPT4KICBlID0+Ck1vdmVFdmVudChldmVudCwgcHJldkV2ZW50KQpXYWxrVXAoZSkKZSA9Pgp6ID0+CiAgcCA9PgogIGUgPT4KZSA9PgogIGUgPT4KdiA9PgpsID0+CiAgZSA9PgooKSA9PgooZSwgZGVwdGgpID0+CmNsYXNzZXMgPT4KZSA9PgplID0+CihhLCBiKSA9PgooYSwgYikgPT4KTm9kZQogIGUgPT4KKHAsIGQsIHNldCwgc3RvcCkgPT4KICBlID0+CiAgZSA9PgpUb3VjaEV2ZW50KGV2ZW50KQogIGUgPT4KKHAsIGkpID0+CihhLCBiKSA9PgpzaXplID0+CiAgYm9yZGVyID0+CiAgciA9PgogIG1vZChuLCBtKQooKSA9PgoocG9zLCBsYXN0LCBmaXJzdCkgPT4KICBjYW5jZWwoKQogIC5vbmNvbnRleHRtZW51ID0gZnVuY3Rpb24oZSkKICAucHJvY2Vzc0V2ZW50cyA9IGZ1bmN0aW9uIGV2ZW50TG9vcCgpCmV2ZW50ID0+CiAgZSA9PgogIG9uUnVudGltZUluaXRpYWxpemVkOiAoKSA9PgogIHByaW50OiB0eHQgPT4AAAAAAAAAAHECAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					4296,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/main.js",
						"symkeys":
						[
							[
								9067,
								9072
							],
							[
								9254,
								9260
							],
							[
								9313,
								9318
							],
							[
								9371,
								9375
							],
							[
								9449,
								9453
							],
							[
								9475,
								9484
							],
							[
								10143,
								10162
							],
							[
								10261,
								10265
							],
							[
								10437,
								10444
							],
							[
								10475,
								10485
							],
							[
								10742,
								10766
							],
							[
								10807,
								10828
							],
							[
								10830,
								10835
							],
							[
								10843,
								10848
							],
							[
								10870,
								10905
							],
							[
								11106,
								11111
							],
							[
								11298,
								11319
							],
							[
								11452,
								11470
							],
							[
								12149,
								12174
							],
							[
								12220,
								12238
							],
							[
								13215,
								13242
							],
							[
								13597,
								13622
							],
							[
								13997,
								14031
							],
							[
								14548,
								14580
							],
							[
								14755,
								14765
							],
							[
								14898,
								14908
							],
							[
								15027,
								15037
							],
							[
								15204,
								15228
							],
							[
								15287,
								15336
							],
							[
								15577,
								15599
							],
							[
								15606,
								15630
							],
							[
								15638,
								15667
							],
							[
								16482,
								16534
							],
							[
								16987,
								16991
							],
							[
								17018,
								17023
							],
							[
								17458,
								17544
							],
							[
								17742,
								17764
							],
							[
								18277,
								18309
							],
							[
								18637,
								18671
							],
							[
								18786,
								18791
							],
							[
								18816,
								18852
							],
							[
								19041,
								19066
							],
							[
								19257,
								19282
							],
							[
								19337,
								19341
							],
							[
								19396,
								19400
							],
							[
								19842,
								19859
							],
							[
								20048,
								20063
							],
							[
								20186,
								20203
							],
							[
								20255,
								20259
							],
							[
								20304,
								20308
							],
							[
								20339,
								20343
							],
							[
								20381,
								20386
							],
							[
								20473,
								20492
							],
							[
								20665,
								20700
							],
							[
								20738,
								20746
							],
							[
								20815,
								20819
							],
							[
								21382,
								21386
							],
							[
								21445,
								21449
							],
							[
								22018,
								22024
							],
							[
								22199,
								22203
							],
							[
								22224,
								22228
							],
							[
								22263,
								22267
							],
							[
								22527,
								22540
							],
							[
								22663,
								22667
							],
							[
								22861,
								22877
							],
							[
								23143,
								23148
							],
							[
								23261,
								23270
							],
							[
								23342,
								23351
							],
							[
								23428,
								23437
							],
							[
								24077,
								24099
							],
							[
								24276,
								24336
							],
							[
								24585,
								24605
							],
							[
								24616,
								24625
							],
							[
								24680,
								24692
							],
							[
								24737,
								24744
							],
							[
								24830,
								24861
							],
							[
								25183,
								25216
							],
							[
								26255,
								26308
							],
							[
								26358,
								26367
							],
							[
								26442,
								26485
							],
							[
								26564,
								26568
							],
							[
								26697,
								26704
							],
							[
								26731,
								26738
							],
							[
								26816,
								26837
							],
							[
								27092,
								27134
							],
							[
								27257,
								27278
							],
							[
								27513,
								27558
							],
							[
								27703,
								27710
							],
							[
								27752,
								27822
							],
							[
								28259,
								28284
							],
							[
								28307,
								28311
							],
							[
								28331,
								28344
							],
							[
								28460,
								28532
							],
							[
								28751,
								28758
							],
							[
								28841,
								28850
							],
							[
								29282,
								29347
							],
							[
								29434,
								29460
							],
							[
								29673,
								29698
							],
							[
								29721,
								29725
							],
							[
								29745,
								29758
							],
							[
								29812,
								29863
							],
							[
								29865,
								29871
							],
							[
								29880,
								29882
							],
							[
								29907,
								29914
							],
							[
								29938,
								30027
							],
							[
								30034,
								30057
							],
							[
								30120,
								30147
							],
							[
								30156,
								30176
							],
							[
								30311,
								30315
							],
							[
								30485,
								30504
							],
							[
								30588,
								30607
							],
							[
								30700,
								30715
							],
							[
								31575,
								31590
							],
							[
								31676,
								31691
							],
							[
								32348,
								32389
							],
							[
								32589,
								32593
							],
							[
								32623,
								32634
							],
							[
								32717,
								32737
							],
							[
								32942,
								32966
							],
							[
								33024,
								33064
							],
							[
								33436,
								33455
							],
							[
								33506,
								33525
							],
							[
								34387,
								34415
							],
							[
								34615,
								34627
							],
							[
								34658,
								34670
							],
							[
								35181,
								35229
							],
							[
								35457,
								35463
							],
							[
								35608,
								35613
							],
							[
								35639,
								35646
							],
							[
								35704,
								35709
							],
							[
								35737,
								35744
							],
							[
								36177,
								36193
							],
							[
								36279,
								36283
							],
							[
								36576,
								36584
							],
							[
								36935,
								36940
							],
							[
								36981,
								36989
							],
							[
								37129,
								37134
							],
							[
								37221,
								37237
							],
							[
								38468,
								38473
							],
							[
								38932,
								38983
							],
							[
								39384,
								39389
							],
							[
								39408,
								39413
							],
							[
								39719,
								39736
							],
							[
								39895,
								39901
							],
							[
								40014,
								40034
							],
							[
								40110,
								40140
							],
							[
								40316,
								40324
							],
							[
								40560,
								40577
							],
							[
								40673,
								40677
							],
							[
								40694,
								40701
							],
							[
								40801,
								40808
							],
							[
								40858,
								40870
							],
							[
								40939,
								40946
							],
							[
								40996,
								41008
							],
							[
								41077,
								41085
							],
							[
								41136,
								41149
							],
							[
								41219,
								41227
							],
							[
								41278,
								41291
							],
							[
								41361,
								41369
							],
							[
								41420,
								41433
							],
							[
								41503,
								41511
							],
							[
								41562,
								41575
							],
							[
								41645,
								41656
							],
							[
								41710,
								41726
							],
							[
								41799,
								41811
							],
							[
								41866,
								41883
							],
							[
								41949,
								41958
							],
							[
								42080,
								42084
							],
							[
								42563,
								42571
							],
							[
								42575,
								42585
							],
							[
								42668,
								42709
							],
							[
								43332,
								43355
							],
							[
								43944,
								43948
							],
							[
								44092,
								44096
							],
							[
								44608,
								44612
							],
							[
								44627,
								44657
							],
							[
								44705,
								44709
							],
							[
								44723,
								44753
							],
							[
								44807,
								44811
							],
							[
								44830,
								44854
							],
							[
								44919,
								44923
							],
							[
								44963,
								44987
							],
							[
								45105,
								45109
							],
							[
								45135,
								45139
							],
							[
								45209,
								45213
							],
							[
								45239,
								45243
							],
							[
								45336,
								45340
							],
							[
								45698,
								45733
							],
							[
								45844,
								45857
							],
							[
								46298,
								46338
							],
							[
								46384,
								46393
							],
							[
								46409,
								46420
							],
							[
								46512,
								46523
							],
							[
								46569,
								46625
							],
							[
								46632,
								46638
							],
							[
								46720,
								46740
							],
							[
								46787,
								46845
							],
							[
								46852,
								46858
							],
							[
								46901,
								46908
							],
							[
								46925,
								46946
							],
							[
								47008,
								47019
							],
							[
								47249,
								47267
							],
							[
								47307,
								47313
							],
							[
								47346,
								47374
							],
							[
								47412,
								47434
							],
							[
								47519,
								47543
							],
							[
								47544,
								47558
							],
							[
								48721,
								48754
							],
							[
								48763,
								48764
							],
							[
								48816,
								48840
							],
							[
								48881,
								48912
							],
							[
								48921,
								48922
							],
							[
								49167,
								49210
							],
							[
								49524,
								49551
							],
							[
								49844,
								49855
							],
							[
								50061,
								50077
							],
							[
								50391,
								50411
							],
							[
								51296,
								51343
							],
							[
								51726,
								51741
							],
							[
								51958,
								51971
							],
							[
								52248,
								52261
							],
							[
								52467,
								52480
							],
							[
								52699,
								52705
							],
							[
								52755,
								52776
							],
							[
								56571,
								56582
							],
							[
								57418,
								57422
							],
							[
								57836,
								57841
							],
							[
								57990,
								58004
							],
							[
								58022,
								58027
							],
							[
								58140,
								58161
							],
							[
								58219,
								58224
							],
							[
								58332,
								58353
							],
							[
								58578,
								58591
							],
							[
								58592,
								58619
							],
							[
								58736,
								58759
							],
							[
								59041,
								59056
							],
							[
								59081,
								59098
							],
							[
								59165,
								59173
							],
							[
								59246,
								59251
							],
							[
								59357,
								59381
							],
							[
								60142,
								60149
							],
							[
								60179,
								60186
							],
							[
								60508,
								60535
							],
							[
								60631,
								60635
							],
							[
								61000,
								61036
							],
							[
								61130,
								61139
							],
							[
								61174,
								61185
							],
							[
								61237,
								61251
							],
							[
								61765,
								61769
							],
							[
								62444,
								62452
							],
							[
								62568,
								62576
							],
							[
								62696,
								62704
							],
							[
								62819,
								62827
							],
							[
								62884,
								62892
							],
							[
								63364,
								63372
							],
							[
								63557,
								63604
							],
							[
								63750,
								63763
							],
							[
								63926,
								63944
							],
							[
								64112,
								64116
							],
							[
								64188,
								64195
							],
							[
								64443,
								64462
							],
							[
								64494,
								64512
							],
							[
								65038,
								65058
							],
							[
								65308,
								65325
							],
							[
								65533,
								65551
							],
							[
								65828,
								65851
							],
							[
								66302,
								66319
							],
							[
								66411,
								66419
							],
							[
								66638,
								66652
							],
							[
								66790,
								66830
							],
							[
								66895,
								66909
							],
							[
								67484,
								67500
							],
							[
								67538,
								67613
							],
							[
								67848,
								67869
							],
							[
								67973,
								67977
							],
							[
								68456,
								68470
							],
							[
								68760,
								68764
							],
							[
								68831,
								68835
							],
							[
								69112,
								69129
							],
							[
								69297,
								69305
							],
							[
								69498,
								69502
							],
							[
								69598,
								69613
							],
							[
								69859,
								69863
							],
							[
								70070,
								70087
							],
							[
								70179,
								70194
							],
							[
								70987,
								70999
							],
							[
								71006,
								71019
							],
							[
								71057,
								71072
							],
							[
								71176,
								71196
							],
							[
								71376,
								71403
							],
							[
								71457,
								71469
							],
							[
								71587,
								71595
							],
							[
								72044,
								72052
							],
							[
								72874,
								72883
							],
							[
								73118,
								73125
							],
							[
								73224,
								73244
							],
							[
								73431,
								73451
							],
							[
								73812,
								73822
							],
							[
								74625,
								74629
							],
							[
								74704,
								74708
							],
							[
								74722,
								74736
							],
							[
								74993,
								75000
							],
							[
								77343,
								77375
							],
							[
								77772,
								77776
							],
							[
								77982,
								77986
							],
							[
								78054,
								78058
							],
							[
								78142,
								78149
							],
							[
								78228,
								78232
							],
							[
								79337,
								79383
							],
							[
								79813,
								79822
							],
							[
								80924,
								80939
							],
							[
								81153,
								81169
							],
							[
								81330,
								81346
							],
							[
								81521,
								81537
							],
							[
								82560,
								82578
							],
							[
								82776,
								82799
							],
							[
								82841,
								82856
							],
							[
								83212,
								83227
							],
							[
								83640,
								83660
							],
							[
								84113,
								84131
							],
							[
								84842,
								84851
							],
							[
								84894,
								84898
							],
							[
								85110,
								85148
							],
							[
								85323,
								85346
							],
							[
								85480,
								85485
							],
							[
								85524,
								85534
							],
							[
								85693,
								85697
							],
							[
								85834,
								85838
							],
							[
								85877,
								85882
							],
							[
								86287,
								86291
							],
							[
								86325,
								86339
							],
							[
								86343,
								86357
							],
							[
								86364,
								86368
							],
							[
								86389,
								86404
							],
							[
								86435,
								86449
							],
							[
								86556,
								86567
							],
							[
								86612,
								86617
							],
							[
								86672,
								86677
							],
							[
								87127,
								87137
							],
							[
								87228,
								87238
							],
							[
								87251,
								87255
							],
							[
								87429,
								87433
							],
							[
								87594,
								87615
							],
							[
								88685,
								88689
							],
							[
								88796,
								88800
							],
							[
								89089,
								89117
							],
							[
								89568,
								89572
							],
							[
								90028,
								90037
							],
							[
								90121,
								90130
							],
							[
								90235,
								90243
							],
							[
								90750,
								90759
							],
							[
								90908,
								90912
							],
							[
								90977,
								91003
							],
							[
								91643,
								91648
							],
							[
								91923,
								91945
							],
							[
								92951,
								92972
							],
							[
								93177,
								93205
							],
							[
								93572,
								93615
							],
							[
								94940,
								94949
							],
							[
								95729,
								95733
							],
							[
								96468,
								96495
							],
							[
								96618,
								96631
							]
						],
						"symlist":
						[
							"() =>",
							"res =>",
							"() =>",
							"r =>",
							"r =>",
							"entries()",
							"GetProject = arg =>",
							"p =>",
							" () =>",
							" value =>",
							"add = (arr, ...items) =>",
							"useSlot = (arr, i) =>",
							"() =>",
							" v =>",
							"trklGetSet = (get, set) => value =>",
							"() =>",
							"(parent, delegate) =>",
							"append_to(elem, p)",
							"function DrawSVG(...args)",
							"append_to(elem, p)",
							" function adjustViewBox(e)",
							"function calcViewBox(box)",
							"function setViewBox(svgOwner, box)",
							"ElementToXML = (e, predicate) =>",
							" (v, k) =>",
							" (v, k) =>",
							" (v, k) =>",
							"async readFile(filename)",
							"async writeFile(filename, data, overwrite = true)",
							"async exists(filename)",
							"async realpath(filename)",
							"async function LoadFile(file)",
							"async function SaveFile(filename, data, contentType)",
							"s =>",
							"() =>",
							"async function SaveSVG(filename, layers = [1, 16, 20, 21, 22, 23, 25, 27, 47, 48, 51])",
							"predicate = element =>",
							"async function LoadSVG(filename)",
							"async function LoadImage(filename)",
							"() =>",
							" function RenderComponent(component)",
							"ModifyColors = fn => e =>",
							"FindLayer = name_or_id =>",
							"n =>",
							"l =>",
							"(id = '#geom') =>",
							"(props = {}) =>",
							"maxZIndex = () =>",
							"e =>",
							"z =>",
							"z =>",
							"() =>",
							"randomColor = () =>",
							"function DrawArc(start, end, angle)",
							"props =>",
							"p =>",
							"a =>",
							"m =>",
							"hex =>",
							"p =>",
							"p =>",
							"p =>",
							"({ x, y }) =>",
							"a =>",
							"({ x, y }, i) =>",
							" e =>",
							"(l, i) =>",
							"(p, i) =>",
							"(p, i) =>",
							"add = (level, item) =>",
							" function RecurseBinaryNode(node, parent = null, depth = 0)",
							"(nodes, i, level) =>",
							"fx = j =>",
							"(node, j) =>",
							"item =>",
							" function DrawNode(x, y, node)",
							" function DrawEdge(item, parent)",
							"function GetPaths(query, parent = project.svgElement)",
							"(a, e) =>",
							"function PathToPolylines(path, step = 0.01)",
							"p =>",
							"poly =>",
							"poly =>",
							" (p, d, set, stop) =>",
							"function PathToPolyline(path, step = 0.01)",
							" (p, d, set, stop) =>",
							"function PathsToPolylines(paths, step = 0.01)",
							"path =>",
							"function OutsetPath(path, offset, miterLimit = 2, arcTolerance = 0.01)",
							".toPolylines = function()",
							"p =>",
							"({ X, Y }) =>",
							"function OutsetPaths(paths, offset, miterLimit = 2, arcTolerance = 0.25)",
							"path =>",
							"(a, p) =>",
							"function ClipPath(path, clip, mode = ClipperLib.ClipType.ctUnion)",
							"add = (p, clip = false) =>",
							".toPolylines = function()",
							"p =>",
							"({ X, Y }) =>",
							"function saveItemStates(itemList, get = item => is.",
							"(item.",
							"))",
							"item =>",
							"function restoreItemStates(itemStates, /* prettier-ignore */ set = (item, value) => item.",
							"(value ? 'yes' : 'no'))",
							"function EagleMaps(project)",
							"transformPath = p =>",
							"e =>",
							"dom2eagle = node =>",
							"eagle2dom = elem =>",
							"path2dom = p =>",
							"(key, value) =>",
							"(key, value) =>",
							"function* PackageNames(doc = project.doc)",
							"e =>",
							"([e, b]) =>",
							"([e, w, h, m, v]) =>",
							"({ index, ...match }) =>",
							" ({ s, v, indexes }, match, i) =>",
							"([token, index]) =>",
							"([token, index]) =>",
							"function NextDocument(n = 1)",
							" (idx, i) =>",
							" (idx, i) =>",
							"async function LoadDocument(project, parentElem)",
							"err =>",
							"() =>",
							" ent =>",
							"() =>",
							" ent =>",
							"renamePackages()",
							"a =>",
							"value =>",
							"() =>",
							"layer =>",
							"() =>",
							"fn = function(v)",
							"() =>",
							".makeGroup = function({ transform, ...props } = {})",
							"id =>",
							"() =>",
							" function xx()",
							" () =>",
							"function (transform)",
							" (tag, attr, children = []) =>",
							"value =>",
							"setRect = rect =>",
							"k =>",
							"elem =>",
							"get x()",
							"set x(value)",
							"get y()",
							"set y(value)",
							"get x1()",
							"set x1(value)",
							"get y1()",
							"set y1(value)",
							"get x2()",
							"set x2(value)",
							"get y2()",
							"set y2(value)",
							"get width()",
							"set width(value)",
							"get height()",
							"set height(value)",
							" () =>",
							"Rect",
							" a =>",
							" err =>",
							"async function ChooseDocument(project, i)",
							"GenerateVoronoi = () =>",
							"Rect",
							"p =>",
							"e =>",
							"({ lSite, rSite, ...edge }) =>",
							"e =>",
							"({ lSite, rSite, ...edge }) =>",
							"e =>",
							"({ va, vb, ...edge }) =>",
							"v =>",
							"add = (arr, ...items) =>",
							"l =>",
							"t =>",
							"l =>",
							"t =>",
							"p =>",
							" (acc, { site, halfedges }) =>",
							"({ site }) =>",
							"function PackageChildren(element, layer)",
							"(c, i) =>",
							"([i, p]) =>",
							"([i, e]) =>",
							"function ElementChildren(layer = 'tPlace', rfn = ent => ",
							"(ent))",
							"([name, element]) =>",
							"function ElementGeometries(layer = 'tPlace', rfn = ent => ",
							"(ent))",
							" ent =>",
							"([name, children]) =>",
							"([i, e]) =>",
							"([name, lines]) =>",
							"pts =>",
							"([name, lines, polygons]) =>",
							"function NewPath(path)",
							"MakeFitAction = index =>",
							"async event =>",
							"function ZoomFactor(val = config.",
							")",
							"function ZoomLog(factor)",
							"function AdjustZoom(l = config.",
							")",
							"CreateGrblSocket = async (port = 'tnt1') =>",
							"function HandleMessage(msg)",
							"pointStr =>",
							"socketFn = () =>",
							".send = (...args) =>",
							"AuthorizationDialog = ({ onAuth, ...props }) =>",
							"onSubmit: () =>",
							"onInput: e =>",
							"onInput: e =>",
							"onClick: e =>",
							"arg =>",
							".onload = async () =>",
							"response =>",
							"e =>",
							" v =>",
							"TestArc: () =>",
							"() =>",
							"async (push, stop) =>",
							"() =>",
							"async (push, stop) =>",
							" target =>",
							" (key, modifiers = 0) =>",
							".focusSearch = state =>",
							"children: () =>",
							"geometries: () =>",
							"value =>",
							"() =>",
							"testComponent = props =>",
							"resp =>",
							"json =>",
							" function File(obj, i)",
							"File",
							"File.prototype.toString = function()",
							"(a, b) =>",
							"(obj, i) =>",
							"(acc, file) =>",
							"i =>",
							"value =>",
							"value =>",
							"value =>",
							"value =>",
							"value =>",
							"value =>",
							"updateIfChanged = (trkl, newValue, callback) =>",
							" (elem, i) =>",
							"changeInput = e =>",
							"p =>",
							" arg =>",
							"Consumer = props =>",
							"async function* ()",
							"log(type, time, msg)",
							"Logger = props =>",
							"async function* ()",
							"([type, d, t, m], i) =>",
							"Dumper = props =>",
							"value =>",
							"([k, v], i) =>",
							"Commander = ({ onCommand, ...props }) =>",
							"handler = e =>",
							"toggle = trkl =>",
							"Layer = ({ title, name, label, i, color, element, className, ...props }) =>",
							"setVisible = value =>",
							"e =>",
							" e =>",
							"l =>",
							"l =>",
							" (item, value) =>",
							" item =>",
							"l =>",
							"([l, state]) =>",
							"e =>",
							"onMouseMove: e =>",
							"onMouseUp: e =>",
							"DocumentList",
							"constructor()",
							"(push, stop) =>",
							"add(name, component)",
							"addEntry([name, component])",
							"remove(name)",
							"update()",
							"fn: e =>",
							"fn: () =>",
							"open =>",
							" props =>",
							" props =>",
							"async e =>",
							"i =>",
							"i =>",
							"({ coord }) =>",
							"side =>",
							"create: (project, props = {}) =>",
							"a =>",
							"e =>",
							"e =>",
							"name =>",
							"e =>",
							" function makeLayerName(name, side)",
							"fn: () =>",
							"onChange(event)",
							" props =>",
							" props =>",
							" props =>",
							"async (e, p, i) =>",
							"makeSortCompare: key =>",
							" function(a, b)",
							" function(a, b)",
							"onCommand: cmdStr =>",
							"handleChange: e =>",
							" event =>",
							"e =>",
							" function MoveEvent(event, prevEvent)",
							" function* WalkUp(e)",
							" e =>",
							" z =>",
							"p =>",
							"e =>",
							" e =>",
							"e =>",
							" v =>",
							" l =>",
							"e =>",
							" () =>",
							" (e, depth) =>",
							" classes =>",
							" e =>",
							" e =>",
							" (a, b) =>",
							" (a, b) =>",
							"Node",
							"e =>",
							" (p, d, set, stop) =>",
							"e =>",
							"e =>",
							" function TouchEvent(event)",
							"e =>",
							"(p, i) =>",
							"(a, b) =>",
							" size =>",
							"border =>",
							"r =>",
							" function mod(n, m)",
							"() =>",
							" (pos, last, first) =>",
							" function cancel()",
							".oncontextmenu = function(e)",
							".processEvents = async function eventLoop()",
							" event =>",
							"e =>",
							"onRuntimeInitialized: () =>",
							"print: txt =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABxAgAAICB0cmFuc2Zvcm1YUGF0aCA9IHAgPT4KRWFnbGVTVkdSZW5kZXJlcgogIGNvbnN0cnVjdG9yKGRvYywgZmFjdG9yeSkKcGF0aCA9PgprZXkgPT4KKGssIHYpID0+CiAgLmNyZWF0ZSA9IGZ1bmN0aW9uKHRhZywgYXR0cnMsIGNoaWxkcmVuLCBwYXJlbnQsIGVsZW1lbnQpCiAgbSA9PgogIG4gPT4KKGFjYywgcCkgPT4KICBuID0+CiAgZ2V0IG1hcHMoKQogIHN0YXRpYyBjcmVhdGUoZG9jLCBmYWN0b3J5KQogIHNldFBhbGV0dGUocGFsZXR0ZSkKKGNvbG9yLCBpKSA9PgogIC52YWx1ZU9mID0gKCkgPT4KKGFjYywgY29sb3IsIGkpID0+ClBhbGV0dGUKICBnZXRDb2xvcihjb2xvcikKICBsYXllck9mKGVsZW1lbnQpCiAgcmVuZGVyTGF5ZXJzKHBhcmVudCkKKGEsIGIpID0+CiAgcmVuZGVySXRlbShpdGVtLCBwYXJlbnQsIG9wdHMgPSB7fSkKICBzdmcgPSAoZWxlbSwgYXR0ciwgcGFyZW50KSA9PgogIGNvb3JkRm4gPSBpID0+CiAgc3RhdGljIGFsaWdubWVudChhbGlnbiwgZGVmID0gWy0xLCAxXSwgcm90ID0gMCkKICBzdGF0aWMgYWxpZ25tZW50QXR0cnMoYWxpZ24sIGh2ID0gSE9SSVpPTlRBTF9WRVJUSUNBTCwgcm90ID0gMCkKICByZW5kZXIob2JqLCBwcm9wcyA9IHt9LCBjaGlsZHJlbiA9IFtdKQAAAAAAAAAAlBYAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					4297,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/test-opencv.js",
						"symkeys":
						[
							[
								786,
								808
							],
							[
								1593,
								1623
							],
							[
								1713,
								1743
							],
							[
								1809,
								1820
							],
							[
								2074,
								2095
							],
							[
								2269,
								2280
							],
							[
								2304,
								2315
							],
							[
								2425,
								2449
							],
							[
								2565,
								2587
							],
							[
								2681,
								2711
							],
							[
								2745,
								2773
							],
							[
								2933,
								2942
							],
							[
								2991,
								2999
							],
							[
								3047,
								3053
							],
							[
								3184,
								3191
							],
							[
								3269,
								3297
							],
							[
								5779,
								5803
							],
							[
								6171,
								6209
							],
							[
								6363,
								6403
							],
							[
								6553,
								6591
							],
							[
								6687,
								6712
							],
							[
								7492,
								7499
							],
							[
								9234,
								9271
							],
							[
								9343,
								9377
							],
							[
								9585,
								9614
							],
							[
								9718,
								9752
							],
							[
								9830,
								9865
							],
							[
								10158,
								10198
							],
							[
								10293,
								10333
							],
							[
								11297,
								11301
							],
							[
								11363,
								11374
							],
							[
								11461,
								11475
							],
							[
								11532,
								11536
							],
							[
								11836,
								11880
							],
							[
								13459,
								13501
							],
							[
								13952,
								13988
							],
							[
								14945,
								14949
							],
							[
								14998,
								15013
							],
							[
								15087,
								15091
							],
							[
								15160,
								15169
							],
							[
								15322,
								15341
							],
							[
								15402,
								15418
							],
							[
								15485,
								15489
							],
							[
								15523,
								15527
							],
							[
								15560,
								15569
							],
							[
								15602,
								15610
							],
							[
								15656,
								15660
							],
							[
								15693,
								15697
							],
							[
								15730,
								15739
							],
							[
								15772,
								15780
							],
							[
								15903,
								15921
							],
							[
								16972,
								17009
							],
							[
								17958,
								17966
							],
							[
								18604,
								18629
							],
							[
								19198,
								19212
							],
							[
								19598,
								19626
							],
							[
								19944,
								19969
							],
							[
								20191,
								20210
							],
							[
								20665,
								20681
							],
							[
								20782,
								20794
							],
							[
								20833,
								20848
							],
							[
								20950,
								20964
							],
							[
								21177,
								21205
							]
						],
						"symlist":
						[
							"function GLFW(...args)",
							"function WriteImage(name, mat)",
							"function SaveConfig(configObj)",
							"([k, v]) =>",
							"function LoadConfig()",
							"([k, v]) =>",
							"([k, v]) =>",
							"function InspectMat(mat)",
							"function ToHex(number)",
							"function Accumulator(callback)",
							"self = function(name, value)",
							"entries()",
							"values()",
							"keys()",
							"clear()",
							"async function main(...args)",
							" (event, x, y, flags) =>",
							" function TransformSize(matrix, size)",
							" function TransformPoint(matrix, point)",
							" function TransformRect(matrix, rect)",
							" function Dragging(drag)",
							"file =>",
							" function AcquireFrame(src, dst)",
							" function Grayscale(src, dst)",
							" function Blur(src, dst)",
							" function Threshold(src, dst)",
							" function Morphology(src, dst)",
							" function Skeletonization(src, dst)",
							" function SkeletonTracing(src, dst)",
							"n =>",
							"([n, m]) =>",
							"([h, s, l]) =>",
							"c =>",
							" function LineSegmentDetector(src, dst)",
							" function PixelNeighborhood(src, dst)",
							" function HoughLinesP(src, dst)",
							"l =>",
							"GetAngle = l =>",
							"l =>",
							"(a, b) =>",
							"isHorizontal = l =>",
							"firstLast = a =>",
							"l =>",
							"l =>",
							"(a, b) =>",
							"([l]) =>",
							"l =>",
							"l =>",
							"(a, b) =>",
							"([l]) =>",
							"angle2Color = a =>",
							" function HoughCircles(src, dst)",
							" i =>",
							" function RedrawStatus()",
							"(name, idx) =>",
							" function Scale(mat, f = 1)",
							" function RedrawWindow()",
							" function Recalc()",
							"(name, param) =>",
							"processor =>",
							".before = () =>",
							".after = () =>",
							" function keyhandler(event)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACUFgAAKCkgPT4KICByZXMgPT4KKCkgPT4KICByID0+CiAgciA9PgogIGVudHJpZXMoKQpHZXRQcm9qZWN0ID0gYXJnID0+CiAgcCA9PgooKSA9Pgp2YWx1ZSA9PgogIGFkZCA9IChhcnIsIC4uLml0ZW1zKSA9PgogIHVzZVNsb3QgPSAoYXJyLCBpKSA9PgooKSA9Pgp2ID0+CiAgdHJrbEdldFNldCA9IChnZXQsIHNldCkgPT4gdmFsdWUgPT4KKCkgPT4KKHBhcmVudCwgZGVsZWdhdGUpID0+CiAgYXBwZW5kX3RvKGVsZW0sIHApCkRyYXdTVkcoLi4uYXJncykKICBhcHBlbmRfdG8oZWxlbSwgcCkKICBhZGp1c3RWaWV3Qm94KGUpCiAgY2FsY1ZpZXdCb3goYm94KQogIHNldFZpZXdCb3goc3ZnT3duZXIsIGJveCkKRWxlbWVudFRvWE1MID0gKGUsIHByZWRpY2F0ZSkgPT4KKHYsIGspID0+Cih2LCBrKSA9PgoodiwgaykgPT4KICByZWFkRmlsZShmaWxlbmFtZSkKICB3cml0ZUZpbGUoZmlsZW5hbWUsIGRhdGEsIG92ZXJ3cml0ZSA9IHRydWUpCiAgZXhpc3RzKGZpbGVuYW1lKQogIHJlYWxwYXRoKGZpbGVuYW1lKQpMb2FkRmlsZShmaWxlKQpTYXZlRmlsZShmaWxlbmFtZSwgZGF0YSwgY29udGVudFR5cGUpCiAgcyA9PgooKSA9PgpTYXZlU1ZHKGZpbGVuYW1lLCBsYXllcnMgPSBbMSwgMTYsIDIwLCAyMSwgMjIsIDIzLCAyNSwgMjcsIDQ3LCA0OCwgNTFdKQogIHByZWRpY2F0ZSA9IGVsZW1lbnQgPT4KTG9hZFNWRyhmaWxlbmFtZSkKTG9hZEltYWdlKGZpbGVuYW1lKQooKSA9PgpSZW5kZXJDb21wb25lbnQoY29tcG9uZW50KQpNb2RpZnlDb2xvcnMgPSBmbiA9PiBlID0+CkZpbmRMYXllciA9IG5hbWVfb3JfaWQgPT4KICBuID0+CiAgbCA9PgooaWQgPSAnI2dlb20nKSA9PgoocHJvcHMgPSB7fSkgPT4KICBtYXhaSW5kZXggPSAoKSA9PgogIGUgPT4KICB6ID0+CiAgeiA9PgooKSA9PgogIHJhbmRvbUNvbG9yID0gKCkgPT4KRHJhd0FyYyhzdGFydCwgZW5kLCBhbmdsZSkKICBwcm9wcyA9PgogIHAgPT4KICBhID0+CiAgbSA9PgogIGhleCA9PgogIHAgPT4KICBwID0+CiAgcCA9PgooeyB4LCB5IH0pID0+CiAgYSA9PgooeyB4LCB5IH0sIGkpID0+CmUgPT4KKGwsIGkpID0+CihwLCBpKSA9PgoocCwgaSkgPT4KICBhZGQgPSAobGV2ZWwsIGl0ZW0pID0+ClJlY3Vyc2VCaW5hcnlOb2RlKG5vZGUsIHBhcmVudCA9IG51bGwsIGRlcHRoID0gMCkKKG5vZGVzLCBpLCBsZXZlbCkgPT4KICBmeCA9IGogPT4KKG5vZGUsIGopID0+CiAgaXRlbSA9PgpEcmF3Tm9kZSh4LCB5LCBub2RlKQpEcmF3RWRnZShpdGVtLCBwYXJlbnQpCkdldFBhdGhzKHF1ZXJ5LCBwYXJlbnQgPSBwcm9qZWN0LnN2Z0VsZW1lbnQpCihhLCBlKSA9PgpQYXRoVG9Qb2x5bGluZXMocGF0aCwgc3RlcCA9IDAuMDEpCiAgcCA9PgogIHBvbHkgPT4KICBwb2x5ID0+CihwLCBkLCBzZXQsIHN0b3ApID0+ClBhdGhUb1BvbHlsaW5lKHBhdGgsIHN0ZXAgPSAwLjAxKQoocCwgZCwgc2V0LCBzdG9wKSA9PgpQYXRoc1RvUG9seWxpbmVzKHBhdGhzLCBzdGVwID0gMC4wMSkKICBwYXRoID0+Ck91dHNldFBhdGgocGF0aCwgb2Zmc2V0LCBtaXRlckxpbWl0ID0gMiwgYXJjVG9sZXJhbmNlID0gMC4wMSkKICAudG9Qb2x5bGluZXMgPSBmdW5jdGlvbigpCiAgcCA9PgooeyBYLCBZIH0pID0+Ck91dHNldFBhdGhzKHBhdGhzLCBvZmZzZXQsIG1pdGVyTGltaXQgPSAyLCBhcmNUb2xlcmFuY2UgPSAwLjI1KQogIHBhdGggPT4KKGEsIHApID0+CkNsaXBQYXRoKHBhdGgsIGNsaXAsIG1vZGUgPSBDbGlwcGVyTGliLkNsaXBUeXBlLmN0VW5pb24pCiAgYWRkID0gKHAsIGNsaXAgPSBmYWxzZSkgPT4KICAudG9Qb2x5bGluZXMgPSBmdW5jdGlvbigpCiAgcCA9PgooeyBYLCBZIH0pID0+CiAgc2F2ZUl0ZW1TdGF0ZXMoaXRlbUxpc3QsIGdldCA9IGl0ZW0gPT4gaXMuCihpdGVtLgopKQogIGl0ZW0gPT4KICByZXN0b3JlSXRlbVN0YXRlcyhpdGVtU3RhdGVzLCAvKnByZXR0aWVyLWlnbm9yZSAqLyBzZXQgPSAoaXRlbSwgdmFsdWUpID0+IGl0ZW0uCih2YWx1ZSA/ICd5ZXMnIDogJ25vJykpCkVhZ2xlTWFwcyhwcm9qZWN0KQogIHRyYW5zZm9ybVBhdGggPSBwID0+CiAgZSA9PgogIGRvbTJlYWdsZSA9IG5vZGUgPT4KICBlYWdsZTJkb20gPSBlbGVtID0+CiAgcGF0aDJkb20gPSBwID0+CihrZXksIHZhbHVlKSA9Pgooa2V5LCB2YWx1ZSkgPT4KUGFja2FnZU5hbWVzKGRvYyA9IHByb2plY3QuZG9jKQogIGUgPT4KKFtlLCBiXSkgPT4KKFtlLCB3LCBoLCBtLCB2XSkgPT4KKHsgaW5kZXgsIC4uLm1hdGNoIH0pID0+Cih7IHMsIHYsIGluZGV4ZXMgfSwgbWF0Y2gsIGkpID0+CihbdG9rZW4sIGluZGV4XSkgPT4KKFt0b2tlbiwgaW5kZXhdKSA9PgpOZXh0RG9jdW1lbnQobiA9IDEpCihpZHgsIGkpID0+CihpZHgsIGkpID0+CkxvYWREb2N1bWVudChwcm9qZWN0LCBwYXJlbnRFbGVtKQogIGVyciA9PgooKSA9PgplbnQgPT4KKCkgPT4KZW50ID0+CiAgcmVuYW1lUGFja2FnZXMoKQogIGEgPT4KICB2YWx1ZSA9PgooKSA9PgogIGxheWVyID0+CigpID0+CiAgZm4gPSBmdW5jdGlvbih2KQooKSA9PgogIC5tYWtlR3JvdXAgPSBmdW5jdGlvbih7IHRyYW5zZm9ybSwgLi4ucHJvcHMgfSA9IHt9KQogIGlkID0+CigpID0+CiAgeHgoKQooKSA9PgoodHJhbnNmb3JtKQoodGFnLCBhdHRyLCBjaGlsZHJlbiA9IFtdKSA9PgogIHZhbHVlID0+CiAgc2V0UmVjdCA9IHJlY3QgPT4KICBrID0+CiAgZWxlbSA9PgogIGdldCB4KCkKICBzZXQgeCh2YWx1ZSkKICBnZXQgeSgpCiAgc2V0IHkodmFsdWUpCiAgZ2V0IHgxKCkKICBzZXQgeDEodmFsdWUpCiAgZ2V0IHkxKCkKICBzZXQgeTEodmFsdWUpCiAgZ2V0IHgyKCkKICBzZXQgeDIodmFsdWUpCiAgZ2V0IHkyKCkKICBzZXQgeTIodmFsdWUpCiAgZ2V0IHdpZHRoKCkKICBzZXQgd2lkdGgodmFsdWUpCiAgZ2V0IGhlaWdodCgpCiAgc2V0IGhlaWdodCh2YWx1ZSkKKCkgPT4KUmVjdAphID0+CmVyciA9PgpDaG9vc2VEb2N1bWVudChwcm9qZWN0LCBpKQpHZW5lcmF0ZVZvcm9ub2kgPSAoKSA9PgpSZWN0CiAgcCA9PgogIGUgPT4KKHsgbFNpdGUsIHJTaXRlLCAuLi5lZGdlIH0pID0+CiAgZSA9PgooeyBsU2l0ZSwgclNpdGUsIC4uLmVkZ2UgfSkgPT4KICBlID0+Cih7IHZhLCB2YiwgLi4uZWRnZSB9KSA9PgogIHYgPT4KICBhZGQgPSAoYXJyLCAuLi5pdGVtcykgPT4KICBsID0+CiAgdCA9PgogIGwgPT4KICB0ID0+CiAgcCA9PgooYWNjLCB7IHNpdGUsIGhhbGZlZGdlcyB9KSA9PgooeyBzaXRlIH0pID0+ClBhY2thZ2VDaGlsZHJlbihlbGVtZW50LCBsYXllcikKKGMsIGkpID0+CihbaSwgcF0pID0+CihbaSwgZV0pID0+CkVsZW1lbnRDaGlsZHJlbihsYXllciA9ICd0UGxhY2UnLCByZm4gPSBlbnQgPT4gCihlbnQpKQooW25hbWUsIGVsZW1lbnRdKSA9PgpFbGVtZW50R2VvbWV0cmllcyhsYXllciA9ICd0UGxhY2UnLCByZm4gPSBlbnQgPT4gCihlbnQpKQplbnQgPT4KKFtuYW1lLCBjaGlsZHJlbl0pID0+CihbaSwgZV0pID0+CihbbmFtZSwgbGluZXNdKSA9PgogIHB0cyA9PgooW25hbWUsIGxpbmVzLCBwb2x5Z29uc10pID0+Ck5ld1BhdGgocGF0aCkKTWFrZUZpdEFjdGlvbiA9IGluZGV4ID0+CiAgZXZlbnQgPT4KWm9vbUZhY3Rvcih2YWwgPSBjb25maWcuCikKWm9vbUxvZyhmYWN0b3IpCkFkanVzdFpvb20obCA9IGNvbmZpZy4KKQpDcmVhdGVHcmJsU29ja2V0ID0gKHBvcnQgPSAndG50MScpID0+CkhhbmRsZU1lc3NhZ2UobXNnKQogIHBvaW50U3RyID0+CiAgc29ja2V0Rm4gPSAoKSA9PgogIC5zZW5kID0gKC4uLmFyZ3MpID0+CkF1dGhvcml6YXRpb25EaWFsb2cgPSAoeyBvbkF1dGgsIC4uLnByb3BzIH0pID0+CiAgb25TdWJtaXQ6ICgpID0+CiAgb25JbnB1dDogZSA9PgogIG9uSW5wdXQ6IGUgPT4KICBvbkNsaWNrOiBlID0+CiAgYXJnID0+CiAgLm9ubG9hZCA9ICgpID0+CiAgcmVzcG9uc2UgPT4KICBlID0+CnYgPT4KVGVzdEFyYzogKCkgPT4KKCkgPT4KKHB1c2gsIHN0b3ApID0+CigpID0+CihwdXNoLCBzdG9wKSA9Pgp0YXJnZXQgPT4KKGtleSwgbW9kaWZpZXJzID0gMCkgPT4KICAuZm9jdXNTZWFyY2ggPSBzdGF0ZSA9PgogIGNoaWxkcmVuOiAoKSA9PgogIGdlb21ldHJpZXM6ICgpID0+CiAgdmFsdWUgPT4KKCkgPT4KICB0ZXN0Q29tcG9uZW50ID0gcHJvcHMgPT4KICByZXNwID0+CiAganNvbiA9PgpGaWxlKG9iaiwgaSkKRmlsZQpGaWxlLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkKKGEsIGIpID0+CihvYmosIGkpID0+CihhY2MsIGZpbGUpID0+CiAgaSA9PgogIHZhbHVlID0+CiAgdmFsdWUgPT4KICB2YWx1ZSA9PgogIHZhbHVlID0+CiAgdmFsdWUgPT4KICB2YWx1ZSA9PgogIHVwZGF0ZUlmQ2hhbmdlZCA9ICh0cmtsLCBuZXdWYWx1ZSwgY2FsbGJhY2spID0+CihlbGVtLCBpKSA9PgogIGNoYW5nZUlucHV0ID0gZSA9PgogIHAgPT4KYXJnID0+CkNvbnN1bWVyID0gcHJvcHMgPT4KKCkKICBsb2codHlwZSwgdGltZSwgbXNnKQpMb2dnZXIgPSBwcm9wcyA9PgooKQooW3R5cGUsIGQsIHQsIG1dLCBpKSA9PgpEdW1wZXIgPSBwcm9wcyA9PgogIHZhbHVlID0+Cihbaywgdl0sIGkpID0+CkNvbW1hbmRlciA9ICh7IG9uQ29tbWFuZCwgLi4ucHJvcHMgfSkgPT4KICBoYW5kbGVyID0gZSA9PgogIHRvZ2dsZSA9IHRya2wgPT4KTGF5ZXIgPSAoeyB0aXRsZSwgbmFtZSwgbGFiZWwsIGksIGNvbG9yLCBlbGVtZW50LCBjbGFzc05hbWUsIC4uLnByb3BzIH0pID0+CiAgc2V0VmlzaWJsZSA9IHZhbHVlID0+CiAgZSA9PgplID0+CiAgbCA9PgogIGwgPT4KKGl0ZW0sIHZhbHVlKSA9PgppdGVtID0+CiAgbCA9PgooW2wsIHN0YXRlXSkgPT4KICBlID0+CiAgb25Nb3VzZU1vdmU6IGUgPT4KICBvbk1vdXNlVXA6IGUgPT4KRG9jdW1lbnRMaXN0CiAgY29uc3RydWN0b3IoKQoocHVzaCwgc3RvcCkgPT4KICBhZGQobmFtZSwgY29tcG9uZW50KQogIGFkZEVudHJ5KFtuYW1lLCBjb21wb25lbnRdKQogIHJlbW92ZShuYW1lKQogIHVwZGF0ZSgpCiAgZm46IGUgPT4KICBmbjogKCkgPT4KICBvcGVuID0+CnByb3BzID0+CnByb3BzID0+CiAgZSA9PgogIGkgPT4KICBpID0+Cih7IGNvb3JkIH0pID0+CiAgc2lkZSA9PgogIGNyZWF0ZTogKHByb2plY3QsIHByb3BzID0ge30pID0+CiAgYSA9PgogIGUgPT4KICBlID0+CiAgbmFtZSA9PgogIGUgPT4KICBtYWtlTGF5ZXJOYW1lKG5hbWUsIHNpZGUpCiAgZm46ICgpID0+CiAgb25DaGFuZ2UoZXZlbnQpCnByb3BzID0+CnByb3BzID0+CnByb3BzID0+CihlLCBwLCBpKSA9PgogIG1ha2VTb3J0Q29tcGFyZToga2V5ID0+CmZ1bmN0aW9uKGEsIGIpCmZ1bmN0aW9uKGEsIGIpCiAgb25Db21tYW5kOiBjbWRTdHIgPT4KICBoYW5kbGVDaGFuZ2U6IGUgPT4KZXZlbnQgPT4KICBlID0+Ck1vdmVFdmVudChldmVudCwgcHJldkV2ZW50KQpXYWxrVXAoZSkKZSA9Pgp6ID0+CiAgcCA9PgogIGUgPT4KZSA9PgogIGUgPT4KdiA9PgpsID0+CiAgZSA9PgooKSA9PgooZSwgZGVwdGgpID0+CmNsYXNzZXMgPT4KZSA9PgplID0+CihhLCBiKSA9PgooYSwgYikgPT4KTm9kZQogIGUgPT4KKHAsIGQsIHNldCwgc3RvcCkgPT4KICBlID0+CiAgZSA9PgpUb3VjaEV2ZW50KGV2ZW50KQogIGUgPT4KKHAsIGkpID0+CihhLCBiKSA9PgpzaXplID0+CiAgYm9yZGVyID0+CiAgciA9PgogIG1vZChuLCBtKQooKSA9PgoocG9zLCBsYXN0LCBmaXJzdCkgPT4KICBjYW5jZWwoKQogIC5vbmNvbnRleHRtZW51ID0gZnVuY3Rpb24oZSkKICAucHJvY2Vzc0V2ZW50cyA9IGZ1bmN0aW9uIGV2ZW50TG9vcCgpCmV2ZW50ID0+CiAgZSA9PgogIG9uUnVudGltZUluaXRpYWxpemVkOiAoKSA9PgogIHByaW50OiB0eHQgPT4AAAAAAAAAAPEDAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					4298,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/main.js",
						"symkeys":
						[
							[
								9067,
								9072
							],
							[
								9254,
								9260
							],
							[
								9313,
								9318
							],
							[
								9371,
								9375
							],
							[
								9449,
								9453
							],
							[
								9475,
								9484
							],
							[
								10143,
								10162
							],
							[
								10261,
								10265
							],
							[
								10437,
								10444
							],
							[
								10475,
								10485
							],
							[
								10742,
								10766
							],
							[
								10807,
								10828
							],
							[
								10830,
								10835
							],
							[
								10843,
								10848
							],
							[
								10870,
								10905
							],
							[
								11106,
								11111
							],
							[
								11298,
								11319
							],
							[
								11452,
								11470
							],
							[
								12149,
								12174
							],
							[
								12220,
								12238
							],
							[
								13215,
								13242
							],
							[
								13597,
								13622
							],
							[
								13997,
								14031
							],
							[
								14548,
								14580
							],
							[
								14755,
								14765
							],
							[
								14898,
								14908
							],
							[
								15027,
								15037
							],
							[
								15204,
								15228
							],
							[
								15287,
								15336
							],
							[
								15577,
								15599
							],
							[
								15606,
								15630
							],
							[
								15638,
								15667
							],
							[
								16482,
								16534
							],
							[
								16987,
								16991
							],
							[
								17018,
								17023
							],
							[
								17458,
								17544
							],
							[
								17742,
								17764
							],
							[
								18277,
								18309
							],
							[
								18637,
								18671
							],
							[
								18786,
								18791
							],
							[
								18816,
								18852
							],
							[
								19041,
								19066
							],
							[
								19257,
								19282
							],
							[
								19337,
								19341
							],
							[
								19396,
								19400
							],
							[
								19842,
								19859
							],
							[
								20048,
								20063
							],
							[
								20186,
								20203
							],
							[
								20255,
								20259
							],
							[
								20304,
								20308
							],
							[
								20339,
								20343
							],
							[
								20381,
								20386
							],
							[
								20473,
								20492
							],
							[
								20665,
								20700
							],
							[
								20738,
								20746
							],
							[
								20815,
								20819
							],
							[
								21382,
								21386
							],
							[
								21445,
								21449
							],
							[
								22018,
								22024
							],
							[
								22199,
								22203
							],
							[
								22224,
								22228
							],
							[
								22263,
								22267
							],
							[
								22527,
								22540
							],
							[
								22663,
								22667
							],
							[
								22861,
								22877
							],
							[
								23143,
								23148
							],
							[
								23261,
								23270
							],
							[
								23342,
								23351
							],
							[
								23428,
								23437
							],
							[
								24077,
								24099
							],
							[
								24276,
								24336
							],
							[
								24585,
								24605
							],
							[
								24616,
								24625
							],
							[
								24680,
								24692
							],
							[
								24737,
								24744
							],
							[
								24830,
								24861
							],
							[
								25183,
								25216
							],
							[
								26255,
								26308
							],
							[
								26358,
								26367
							],
							[
								26442,
								26485
							],
							[
								26564,
								26568
							],
							[
								26697,
								26704
							],
							[
								26731,
								26738
							],
							[
								26816,
								26837
							],
							[
								27092,
								27134
							],
							[
								27257,
								27278
							],
							[
								27513,
								27558
							],
							[
								27703,
								27710
							],
							[
								27752,
								27822
							],
							[
								28259,
								28284
							],
							[
								28307,
								28311
							],
							[
								28331,
								28344
							],
							[
								28460,
								28532
							],
							[
								28751,
								28758
							],
							[
								28841,
								28850
							],
							[
								29282,
								29347
							],
							[
								29434,
								29460
							],
							[
								29673,
								29698
							],
							[
								29721,
								29725
							],
							[
								29745,
								29758
							],
							[
								29812,
								29863
							],
							[
								29865,
								29871
							],
							[
								29880,
								29882
							],
							[
								29907,
								29914
							],
							[
								29938,
								30027
							],
							[
								30034,
								30057
							],
							[
								30120,
								30147
							],
							[
								30156,
								30176
							],
							[
								30311,
								30315
							],
							[
								30485,
								30504
							],
							[
								30588,
								30607
							],
							[
								30700,
								30715
							],
							[
								31575,
								31590
							],
							[
								31676,
								31691
							],
							[
								32348,
								32389
							],
							[
								32589,
								32593
							],
							[
								32623,
								32634
							],
							[
								32717,
								32737
							],
							[
								32942,
								32966
							],
							[
								33024,
								33064
							],
							[
								33436,
								33455
							],
							[
								33506,
								33525
							],
							[
								34387,
								34415
							],
							[
								34615,
								34627
							],
							[
								34658,
								34670
							],
							[
								35181,
								35229
							],
							[
								35457,
								35463
							],
							[
								35608,
								35613
							],
							[
								35639,
								35646
							],
							[
								35704,
								35709
							],
							[
								35737,
								35744
							],
							[
								36177,
								36193
							],
							[
								36279,
								36283
							],
							[
								36576,
								36584
							],
							[
								36935,
								36940
							],
							[
								36981,
								36989
							],
							[
								37129,
								37134
							],
							[
								37221,
								37237
							],
							[
								38468,
								38473
							],
							[
								38932,
								38983
							],
							[
								39384,
								39389
							],
							[
								39408,
								39413
							],
							[
								39719,
								39736
							],
							[
								39895,
								39901
							],
							[
								40014,
								40034
							],
							[
								40110,
								40140
							],
							[
								40316,
								40324
							],
							[
								40560,
								40577
							],
							[
								40673,
								40677
							],
							[
								40694,
								40701
							],
							[
								40801,
								40808
							],
							[
								40858,
								40870
							],
							[
								40939,
								40946
							],
							[
								40996,
								41008
							],
							[
								41077,
								41085
							],
							[
								41136,
								41149
							],
							[
								41219,
								41227
							],
							[
								41278,
								41291
							],
							[
								41361,
								41369
							],
							[
								41420,
								41433
							],
							[
								41503,
								41511
							],
							[
								41562,
								41575
							],
							[
								41645,
								41656
							],
							[
								41710,
								41726
							],
							[
								41799,
								41811
							],
							[
								41866,
								41883
							],
							[
								41949,
								41958
							],
							[
								42080,
								42084
							],
							[
								42563,
								42571
							],
							[
								42575,
								42585
							],
							[
								42668,
								42709
							],
							[
								43332,
								43355
							],
							[
								43944,
								43948
							],
							[
								44092,
								44096
							],
							[
								44608,
								44612
							],
							[
								44627,
								44657
							],
							[
								44705,
								44709
							],
							[
								44723,
								44753
							],
							[
								44807,
								44811
							],
							[
								44830,
								44854
							],
							[
								44919,
								44923
							],
							[
								44963,
								44987
							],
							[
								45105,
								45109
							],
							[
								45135,
								45139
							],
							[
								45209,
								45213
							],
							[
								45239,
								45243
							],
							[
								45336,
								45340
							],
							[
								45698,
								45733
							],
							[
								45844,
								45857
							],
							[
								46298,
								46338
							],
							[
								46384,
								46393
							],
							[
								46409,
								46420
							],
							[
								46512,
								46523
							],
							[
								46569,
								46625
							],
							[
								46632,
								46638
							],
							[
								46720,
								46740
							],
							[
								46787,
								46845
							],
							[
								46852,
								46858
							],
							[
								46901,
								46908
							],
							[
								46925,
								46946
							],
							[
								47008,
								47019
							],
							[
								47249,
								47267
							],
							[
								47307,
								47313
							],
							[
								47346,
								47374
							],
							[
								47412,
								47434
							],
							[
								47519,
								47543
							],
							[
								47544,
								47558
							],
							[
								48721,
								48754
							],
							[
								48763,
								48764
							],
							[
								48816,
								48840
							],
							[
								48881,
								48912
							],
							[
								48921,
								48922
							],
							[
								49167,
								49210
							],
							[
								49524,
								49551
							],
							[
								49844,
								49855
							],
							[
								50061,
								50077
							],
							[
								50391,
								50411
							],
							[
								51296,
								51343
							],
							[
								51726,
								51741
							],
							[
								51958,
								51971
							],
							[
								52248,
								52261
							],
							[
								52467,
								52480
							],
							[
								52699,
								52705
							],
							[
								52755,
								52776
							],
							[
								56571,
								56582
							],
							[
								57418,
								57422
							],
							[
								57836,
								57841
							],
							[
								57990,
								58004
							],
							[
								58022,
								58027
							],
							[
								58140,
								58161
							],
							[
								58219,
								58224
							],
							[
								58332,
								58353
							],
							[
								58578,
								58591
							],
							[
								58592,
								58619
							],
							[
								58736,
								58759
							],
							[
								59041,
								59056
							],
							[
								59081,
								59098
							],
							[
								59165,
								59173
							],
							[
								59246,
								59251
							],
							[
								59357,
								59381
							],
							[
								60142,
								60149
							],
							[
								60179,
								60186
							],
							[
								60508,
								60535
							],
							[
								60631,
								60635
							],
							[
								61000,
								61036
							],
							[
								61130,
								61139
							],
							[
								61174,
								61185
							],
							[
								61237,
								61251
							],
							[
								61765,
								61769
							],
							[
								62444,
								62452
							],
							[
								62568,
								62576
							],
							[
								62696,
								62704
							],
							[
								62819,
								62827
							],
							[
								62884,
								62892
							],
							[
								63364,
								63372
							],
							[
								63557,
								63604
							],
							[
								63750,
								63763
							],
							[
								63926,
								63944
							],
							[
								64112,
								64116
							],
							[
								64188,
								64195
							],
							[
								64443,
								64462
							],
							[
								64494,
								64512
							],
							[
								65038,
								65058
							],
							[
								65308,
								65325
							],
							[
								65533,
								65551
							],
							[
								65828,
								65851
							],
							[
								66302,
								66319
							],
							[
								66411,
								66419
							],
							[
								66638,
								66652
							],
							[
								66790,
								66830
							],
							[
								66895,
								66909
							],
							[
								67484,
								67500
							],
							[
								67538,
								67613
							],
							[
								67848,
								67869
							],
							[
								67973,
								67977
							],
							[
								68456,
								68470
							],
							[
								68760,
								68764
							],
							[
								68831,
								68835
							],
							[
								69112,
								69129
							],
							[
								69297,
								69305
							],
							[
								69498,
								69502
							],
							[
								69598,
								69613
							],
							[
								69859,
								69863
							],
							[
								70070,
								70087
							],
							[
								70179,
								70194
							],
							[
								70987,
								70999
							],
							[
								71006,
								71019
							],
							[
								71057,
								71072
							],
							[
								71176,
								71196
							],
							[
								71376,
								71403
							],
							[
								71457,
								71469
							],
							[
								71587,
								71595
							],
							[
								72044,
								72052
							],
							[
								72874,
								72883
							],
							[
								73118,
								73125
							],
							[
								73224,
								73244
							],
							[
								73431,
								73451
							],
							[
								73812,
								73822
							],
							[
								74625,
								74629
							],
							[
								74704,
								74708
							],
							[
								74722,
								74736
							],
							[
								74993,
								75000
							],
							[
								77343,
								77375
							],
							[
								77772,
								77776
							],
							[
								77982,
								77986
							],
							[
								78054,
								78058
							],
							[
								78142,
								78149
							],
							[
								78228,
								78232
							],
							[
								79337,
								79383
							],
							[
								79813,
								79822
							],
							[
								80924,
								80939
							],
							[
								81153,
								81169
							],
							[
								81330,
								81346
							],
							[
								81521,
								81537
							],
							[
								82560,
								82578
							],
							[
								82776,
								82799
							],
							[
								82841,
								82856
							],
							[
								83212,
								83227
							],
							[
								83640,
								83660
							],
							[
								84113,
								84131
							],
							[
								84842,
								84851
							],
							[
								84894,
								84898
							],
							[
								85110,
								85148
							],
							[
								85323,
								85346
							],
							[
								85480,
								85485
							],
							[
								85524,
								85534
							],
							[
								85693,
								85697
							],
							[
								85834,
								85838
							],
							[
								85877,
								85882
							],
							[
								86287,
								86291
							],
							[
								86325,
								86339
							],
							[
								86343,
								86357
							],
							[
								86364,
								86368
							],
							[
								86389,
								86404
							],
							[
								86435,
								86449
							],
							[
								86556,
								86567
							],
							[
								86612,
								86617
							],
							[
								86672,
								86677
							],
							[
								87127,
								87137
							],
							[
								87228,
								87238
							],
							[
								87251,
								87255
							],
							[
								87429,
								87433
							],
							[
								87594,
								87615
							],
							[
								88685,
								88689
							],
							[
								88796,
								88800
							],
							[
								89089,
								89117
							],
							[
								89568,
								89572
							],
							[
								90028,
								90037
							],
							[
								90121,
								90130
							],
							[
								90235,
								90243
							],
							[
								90750,
								90759
							],
							[
								90908,
								90912
							],
							[
								90977,
								91003
							],
							[
								91643,
								91648
							],
							[
								91923,
								91945
							],
							[
								92951,
								92972
							],
							[
								93177,
								93205
							],
							[
								93572,
								93615
							],
							[
								94940,
								94949
							],
							[
								95729,
								95733
							],
							[
								96468,
								96495
							],
							[
								96618,
								96631
							]
						],
						"symlist":
						[
							"() =>",
							"res =>",
							"() =>",
							"r =>",
							"r =>",
							"entries()",
							"GetProject = arg =>",
							"p =>",
							" () =>",
							" value =>",
							"add = (arr, ...items) =>",
							"useSlot = (arr, i) =>",
							"() =>",
							" v =>",
							"trklGetSet = (get, set) => value =>",
							"() =>",
							"(parent, delegate) =>",
							"append_to(elem, p)",
							"function DrawSVG(...args)",
							"append_to(elem, p)",
							" function adjustViewBox(e)",
							"function calcViewBox(box)",
							"function setViewBox(svgOwner, box)",
							"ElementToXML = (e, predicate) =>",
							" (v, k) =>",
							" (v, k) =>",
							" (v, k) =>",
							"async readFile(filename)",
							"async writeFile(filename, data, overwrite = true)",
							"async exists(filename)",
							"async realpath(filename)",
							"async function LoadFile(file)",
							"async function SaveFile(filename, data, contentType)",
							"s =>",
							"() =>",
							"async function SaveSVG(filename, layers = [1, 16, 20, 21, 22, 23, 25, 27, 47, 48, 51])",
							"predicate = element =>",
							"async function LoadSVG(filename)",
							"async function LoadImage(filename)",
							"() =>",
							" function RenderComponent(component)",
							"ModifyColors = fn => e =>",
							"FindLayer = name_or_id =>",
							"n =>",
							"l =>",
							"(id = '#geom') =>",
							"(props = {}) =>",
							"maxZIndex = () =>",
							"e =>",
							"z =>",
							"z =>",
							"() =>",
							"randomColor = () =>",
							"function DrawArc(start, end, angle)",
							"props =>",
							"p =>",
							"a =>",
							"m =>",
							"hex =>",
							"p =>",
							"p =>",
							"p =>",
							"({ x, y }) =>",
							"a =>",
							"({ x, y }, i) =>",
							" e =>",
							"(l, i) =>",
							"(p, i) =>",
							"(p, i) =>",
							"add = (level, item) =>",
							" function RecurseBinaryNode(node, parent = null, depth = 0)",
							"(nodes, i, level) =>",
							"fx = j =>",
							"(node, j) =>",
							"item =>",
							" function DrawNode(x, y, node)",
							" function DrawEdge(item, parent)",
							"function GetPaths(query, parent = project.svgElement)",
							"(a, e) =>",
							"function PathToPolylines(path, step = 0.01)",
							"p =>",
							"poly =>",
							"poly =>",
							" (p, d, set, stop) =>",
							"function PathToPolyline(path, step = 0.01)",
							" (p, d, set, stop) =>",
							"function PathsToPolylines(paths, step = 0.01)",
							"path =>",
							"function OutsetPath(path, offset, miterLimit = 2, arcTolerance = 0.01)",
							".toPolylines = function()",
							"p =>",
							"({ X, Y }) =>",
							"function OutsetPaths(paths, offset, miterLimit = 2, arcTolerance = 0.25)",
							"path =>",
							"(a, p) =>",
							"function ClipPath(path, clip, mode = ClipperLib.ClipType.ctUnion)",
							"add = (p, clip = false) =>",
							".toPolylines = function()",
							"p =>",
							"({ X, Y }) =>",
							"function saveItemStates(itemList, get = item => is.",
							"(item.",
							"))",
							"item =>",
							"function restoreItemStates(itemStates, /* prettier-ignore */ set = (item, value) => item.",
							"(value ? 'yes' : 'no'))",
							"function EagleMaps(project)",
							"transformPath = p =>",
							"e =>",
							"dom2eagle = node =>",
							"eagle2dom = elem =>",
							"path2dom = p =>",
							"(key, value) =>",
							"(key, value) =>",
							"function* PackageNames(doc = project.doc)",
							"e =>",
							"([e, b]) =>",
							"([e, w, h, m, v]) =>",
							"({ index, ...match }) =>",
							" ({ s, v, indexes }, match, i) =>",
							"([token, index]) =>",
							"([token, index]) =>",
							"function NextDocument(n = 1)",
							" (idx, i) =>",
							" (idx, i) =>",
							"async function LoadDocument(project, parentElem)",
							"err =>",
							"() =>",
							" ent =>",
							"() =>",
							" ent =>",
							"renamePackages()",
							"a =>",
							"value =>",
							"() =>",
							"layer =>",
							"() =>",
							"fn = function(v)",
							"() =>",
							".makeGroup = function({ transform, ...props } = {})",
							"id =>",
							"() =>",
							" function xx()",
							" () =>",
							"function (transform)",
							" (tag, attr, children = []) =>",
							"value =>",
							"setRect = rect =>",
							"k =>",
							"elem =>",
							"get x()",
							"set x(value)",
							"get y()",
							"set y(value)",
							"get x1()",
							"set x1(value)",
							"get y1()",
							"set y1(value)",
							"get x2()",
							"set x2(value)",
							"get y2()",
							"set y2(value)",
							"get width()",
							"set width(value)",
							"get height()",
							"set height(value)",
							" () =>",
							"Rect",
							" a =>",
							" err =>",
							"async function ChooseDocument(project, i)",
							"GenerateVoronoi = () =>",
							"Rect",
							"p =>",
							"e =>",
							"({ lSite, rSite, ...edge }) =>",
							"e =>",
							"({ lSite, rSite, ...edge }) =>",
							"e =>",
							"({ va, vb, ...edge }) =>",
							"v =>",
							"add = (arr, ...items) =>",
							"l =>",
							"t =>",
							"l =>",
							"t =>",
							"p =>",
							" (acc, { site, halfedges }) =>",
							"({ site }) =>",
							"function PackageChildren(element, layer)",
							"(c, i) =>",
							"([i, p]) =>",
							"([i, e]) =>",
							"function ElementChildren(layer = 'tPlace', rfn = ent => ",
							"(ent))",
							"([name, element]) =>",
							"function ElementGeometries(layer = 'tPlace', rfn = ent => ",
							"(ent))",
							" ent =>",
							"([name, children]) =>",
							"([i, e]) =>",
							"([name, lines]) =>",
							"pts =>",
							"([name, lines, polygons]) =>",
							"function NewPath(path)",
							"MakeFitAction = index =>",
							"async event =>",
							"function ZoomFactor(val = config.",
							")",
							"function ZoomLog(factor)",
							"function AdjustZoom(l = config.",
							")",
							"CreateGrblSocket = async (port = 'tnt1') =>",
							"function HandleMessage(msg)",
							"pointStr =>",
							"socketFn = () =>",
							".send = (...args) =>",
							"AuthorizationDialog = ({ onAuth, ...props }) =>",
							"onSubmit: () =>",
							"onInput: e =>",
							"onInput: e =>",
							"onClick: e =>",
							"arg =>",
							".onload = async () =>",
							"response =>",
							"e =>",
							" v =>",
							"TestArc: () =>",
							"() =>",
							"async (push, stop) =>",
							"() =>",
							"async (push, stop) =>",
							" target =>",
							" (key, modifiers = 0) =>",
							".focusSearch = state =>",
							"children: () =>",
							"geometries: () =>",
							"value =>",
							"() =>",
							"testComponent = props =>",
							"resp =>",
							"json =>",
							" function File(obj, i)",
							"File",
							"File.prototype.toString = function()",
							"(a, b) =>",
							"(obj, i) =>",
							"(acc, file) =>",
							"i =>",
							"value =>",
							"value =>",
							"value =>",
							"value =>",
							"value =>",
							"value =>",
							"updateIfChanged = (trkl, newValue, callback) =>",
							" (elem, i) =>",
							"changeInput = e =>",
							"p =>",
							" arg =>",
							"Consumer = props =>",
							"async function* ()",
							"log(type, time, msg)",
							"Logger = props =>",
							"async function* ()",
							"([type, d, t, m], i) =>",
							"Dumper = props =>",
							"value =>",
							"([k, v], i) =>",
							"Commander = ({ onCommand, ...props }) =>",
							"handler = e =>",
							"toggle = trkl =>",
							"Layer = ({ title, name, label, i, color, element, className, ...props }) =>",
							"setVisible = value =>",
							"e =>",
							" e =>",
							"l =>",
							"l =>",
							" (item, value) =>",
							" item =>",
							"l =>",
							"([l, state]) =>",
							"e =>",
							"onMouseMove: e =>",
							"onMouseUp: e =>",
							"DocumentList",
							"constructor()",
							"(push, stop) =>",
							"add(name, component)",
							"addEntry([name, component])",
							"remove(name)",
							"update()",
							"fn: e =>",
							"fn: () =>",
							"open =>",
							" props =>",
							" props =>",
							"async e =>",
							"i =>",
							"i =>",
							"({ coord }) =>",
							"side =>",
							"create: (project, props = {}) =>",
							"a =>",
							"e =>",
							"e =>",
							"name =>",
							"e =>",
							" function makeLayerName(name, side)",
							"fn: () =>",
							"onChange(event)",
							" props =>",
							" props =>",
							" props =>",
							"async (e, p, i) =>",
							"makeSortCompare: key =>",
							" function(a, b)",
							" function(a, b)",
							"onCommand: cmdStr =>",
							"handleChange: e =>",
							" event =>",
							"e =>",
							" function MoveEvent(event, prevEvent)",
							" function* WalkUp(e)",
							" e =>",
							" z =>",
							"p =>",
							"e =>",
							" e =>",
							"e =>",
							" v =>",
							" l =>",
							"e =>",
							" () =>",
							" (e, depth) =>",
							" classes =>",
							" e =>",
							" e =>",
							" (a, b) =>",
							" (a, b) =>",
							"Node",
							"e =>",
							" (p, d, set, stop) =>",
							"e =>",
							"e =>",
							" function TouchEvent(event)",
							"e =>",
							"(p, i) =>",
							"(a, b) =>",
							" size =>",
							"border =>",
							"r =>",
							" function mod(n, m)",
							"() =>",
							" (pos, last, first) =>",
							" function cancel()",
							".oncontextmenu = function(e)",
							".processEvents = async function eventLoop()",
							" event =>",
							"e =>",
							"onRuntimeInitialized: () =>",
							"print: txt =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADxAwAAR0xGVyguLi5hcmdzKQpXcml0ZUltYWdlKG5hbWUsIG1hdCkKU2F2ZUNvbmZpZyhjb25maWdPYmopCihbaywgdl0pID0+CkxvYWRDb25maWcoKQooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgpJbnNwZWN0TWF0KG1hdCkKVG9IZXgobnVtYmVyKQpBY2N1bXVsYXRvcihjYWxsYmFjaykKICBzZWxmID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpCiAgZW50cmllcygpCiAgdmFsdWVzKCkKICBrZXlzKCkKICBjbGVhcigpCiAgbWFpbiguLi5hcmdzKQooZXZlbnQsIHgsIHksIGZsYWdzKSA9PgpUcmFuc2Zvcm1TaXplKG1hdHJpeCwgc2l6ZSkKVHJhbnNmb3JtUG9pbnQobWF0cml4LCBwb2ludCkKVHJhbnNmb3JtUmVjdChtYXRyaXgsIHJlY3QpCkRyYWdnaW5nKGRyYWcpCiAgZmlsZSA9PgpBY3F1aXJlRnJhbWUoc3JjLCBkc3QpCkdyYXlzY2FsZShzcmMsIGRzdCkKQmx1cihzcmMsIGRzdCkKVGhyZXNob2xkKHNyYywgZHN0KQpNb3JwaG9sb2d5KHNyYywgZHN0KQpTa2VsZXRvbml6YXRpb24oc3JjLCBkc3QpClNrZWxldG9uVHJhY2luZyhzcmMsIGRzdCkKICBuID0+CihbbiwgbV0pID0+CihbaCwgcywgbF0pID0+CiAgYyA9PgpMaW5lU2VnbWVudERldGVjdG9yKHNyYywgZHN0KQpQaXhlbE5laWdoYm9yaG9vZChzcmMsIGRzdCkKSG91Z2hMaW5lc1Aoc3JjLCBkc3QpCiAgbCA9PgpHZXRBbmdsZSA9IGwgPT4KICBsID0+CihhLCBiKSA9PgogIGlzSG9yaXpvbnRhbCA9IGwgPT4KICBmaXJzdExhc3QgPSBhID0+CiAgbCA9PgogIGwgPT4KKGEsIGIpID0+CihbbF0pID0+CiAgbCA9PgogIGwgPT4KKGEsIGIpID0+CihbbF0pID0+CiAgYW5nbGUyQ29sb3IgPSBhID0+CkhvdWdoQ2lyY2xlcyhzcmMsIGRzdCkKaSA9PgpSZWRyYXdTdGF0dXMoKQoobmFtZSwgaWR4KSA9PgpTY2FsZShtYXQsIGYgPSAxKQpSZWRyYXdXaW5kb3coKQpSZWNhbGMoKQoobmFtZSwgcGFyYW0pID0+CiAgcHJvY2Vzc29yID0+CiAgLmJlZm9yZSA9ICgpID0+CiAgLmFmdGVyID0gKCkgPT4KICBrZXloYW5kbGVyKGV2ZW50KQAAAAAAAAAAlBYAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					4299,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/qjs-opencv/js/cvHighGUI.js",
						"symkeys":
						[
							[
								1173,
								1178
							],
							[
								1191,
								1200
							],
							[
								1266,
								1271
							],
							[
								1314,
								1322
							],
							[
								1368,
								1377
							],
							[
								1420,
								1426
							],
							[
								1431,
								1444
							],
							[
								1501,
								1507
							],
							[
								1512,
								1552
							],
							[
								1639,
								1663
							],
							[
								1768,
								1787
							],
							[
								2011,
								2031
							],
							[
								2325,
								2338
							],
							[
								2443,
								2458
							],
							[
								2622,
								2634
							],
							[
								2838,
								2853
							],
							[
								2905,
								2916
							],
							[
								2974,
								2992
							],
							[
								3071,
								3086
							],
							[
								3178,
								3198
							],
							[
								3280,
								3304
							],
							[
								3440,
								3449
							],
							[
								3531,
								3538
							],
							[
								3654,
								3663
							],
							[
								3695,
								3751
							],
							[
								3844,
								3927
							],
							[
								4006,
								4015
							],
							[
								4031,
								4055
							],
							[
								4204,
								4209
							],
							[
								4287,
								4381
							],
							[
								4717,
								4778
							],
							[
								5018,
								5022
							],
							[
								5071,
								5076
							],
							[
								5439,
								5443
							]
						],
						"symlist":
						[
							"() =>",
							" event =>",
							"() =>",
							" name =>",
							" flags =>",
							"Screen",
							"static size()",
							"Window",
							"constructor(name, flags = WINDOW_NORMAL)",
							"create(name = 'default')",
							"handleKey(scancode)",
							"update(waitFor = 10)",
							"move(...args)",
							"resize(...args)",
							"align(n = 0)",
							"get imageRect()",
							"get(propId)",
							"set(propId, value)",
							"setTitle(title)",
							"setMouseCallback(fn)",
							" (event, x, y, flags) =>",
							"show(mat)",
							"close()",
							"valueOf()",
							"selectROI(mat, showCrosshair = true, fromCenter = false)",
							" function TextStyle(fontFace = FONT_HERSHEY_PLAIN, fontScale = 1.0, thickness = -1)",
							"TextStyle",
							"size(text, fn = y => {})",
							" y =>",
							"draw(mat, text, pos, color = [255, 255, 255, 255], lineThickness = FILLED, lineType = LINE_AA)",
							" function DrawText(dst, text, color, fontFace, fontSize = 13)",
							"m =>",
							" y =>",
							"m =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACUFgAAKCkgPT4KICByZXMgPT4KKCkgPT4KICByID0+CiAgciA9PgogIGVudHJpZXMoKQpHZXRQcm9qZWN0ID0gYXJnID0+CiAgcCA9PgooKSA9Pgp2YWx1ZSA9PgogIGFkZCA9IChhcnIsIC4uLml0ZW1zKSA9PgogIHVzZVNsb3QgPSAoYXJyLCBpKSA9PgooKSA9Pgp2ID0+CiAgdHJrbEdldFNldCA9IChnZXQsIHNldCkgPT4gdmFsdWUgPT4KKCkgPT4KKHBhcmVudCwgZGVsZWdhdGUpID0+CiAgYXBwZW5kX3RvKGVsZW0sIHApCkRyYXdTVkcoLi4uYXJncykKICBhcHBlbmRfdG8oZWxlbSwgcCkKICBhZGp1c3RWaWV3Qm94KGUpCiAgY2FsY1ZpZXdCb3goYm94KQogIHNldFZpZXdCb3goc3ZnT3duZXIsIGJveCkKRWxlbWVudFRvWE1MID0gKGUsIHByZWRpY2F0ZSkgPT4KKHYsIGspID0+Cih2LCBrKSA9PgoodiwgaykgPT4KICByZWFkRmlsZShmaWxlbmFtZSkKICB3cml0ZUZpbGUoZmlsZW5hbWUsIGRhdGEsIG92ZXJ3cml0ZSA9IHRydWUpCiAgZXhpc3RzKGZpbGVuYW1lKQogIHJlYWxwYXRoKGZpbGVuYW1lKQpMb2FkRmlsZShmaWxlKQpTYXZlRmlsZShmaWxlbmFtZSwgZGF0YSwgY29udGVudFR5cGUpCiAgcyA9PgooKSA9PgpTYXZlU1ZHKGZpbGVuYW1lLCBsYXllcnMgPSBbMSwgMTYsIDIwLCAyMSwgMjIsIDIzLCAyNSwgMjcsIDQ3LCA0OCwgNTFdKQogIHByZWRpY2F0ZSA9IGVsZW1lbnQgPT4KTG9hZFNWRyhmaWxlbmFtZSkKTG9hZEltYWdlKGZpbGVuYW1lKQooKSA9PgpSZW5kZXJDb21wb25lbnQoY29tcG9uZW50KQpNb2RpZnlDb2xvcnMgPSBmbiA9PiBlID0+CkZpbmRMYXllciA9IG5hbWVfb3JfaWQgPT4KICBuID0+CiAgbCA9PgooaWQgPSAnI2dlb20nKSA9PgoocHJvcHMgPSB7fSkgPT4KICBtYXhaSW5kZXggPSAoKSA9PgogIGUgPT4KICB6ID0+CiAgeiA9PgooKSA9PgogIHJhbmRvbUNvbG9yID0gKCkgPT4KRHJhd0FyYyhzdGFydCwgZW5kLCBhbmdsZSkKICBwcm9wcyA9PgogIHAgPT4KICBhID0+CiAgbSA9PgogIGhleCA9PgogIHAgPT4KICBwID0+CiAgcCA9PgooeyB4LCB5IH0pID0+CiAgYSA9PgooeyB4LCB5IH0sIGkpID0+CmUgPT4KKGwsIGkpID0+CihwLCBpKSA9PgoocCwgaSkgPT4KICBhZGQgPSAobGV2ZWwsIGl0ZW0pID0+ClJlY3Vyc2VCaW5hcnlOb2RlKG5vZGUsIHBhcmVudCA9IG51bGwsIGRlcHRoID0gMCkKKG5vZGVzLCBpLCBsZXZlbCkgPT4KICBmeCA9IGogPT4KKG5vZGUsIGopID0+CiAgaXRlbSA9PgpEcmF3Tm9kZSh4LCB5LCBub2RlKQpEcmF3RWRnZShpdGVtLCBwYXJlbnQpCkdldFBhdGhzKHF1ZXJ5LCBwYXJlbnQgPSBwcm9qZWN0LnN2Z0VsZW1lbnQpCihhLCBlKSA9PgpQYXRoVG9Qb2x5bGluZXMocGF0aCwgc3RlcCA9IDAuMDEpCiAgcCA9PgogIHBvbHkgPT4KICBwb2x5ID0+CihwLCBkLCBzZXQsIHN0b3ApID0+ClBhdGhUb1BvbHlsaW5lKHBhdGgsIHN0ZXAgPSAwLjAxKQoocCwgZCwgc2V0LCBzdG9wKSA9PgpQYXRoc1RvUG9seWxpbmVzKHBhdGhzLCBzdGVwID0gMC4wMSkKICBwYXRoID0+Ck91dHNldFBhdGgocGF0aCwgb2Zmc2V0LCBtaXRlckxpbWl0ID0gMiwgYXJjVG9sZXJhbmNlID0gMC4wMSkKICAudG9Qb2x5bGluZXMgPSBmdW5jdGlvbigpCiAgcCA9PgooeyBYLCBZIH0pID0+Ck91dHNldFBhdGhzKHBhdGhzLCBvZmZzZXQsIG1pdGVyTGltaXQgPSAyLCBhcmNUb2xlcmFuY2UgPSAwLjI1KQogIHBhdGggPT4KKGEsIHApID0+CkNsaXBQYXRoKHBhdGgsIGNsaXAsIG1vZGUgPSBDbGlwcGVyTGliLkNsaXBUeXBlLmN0VW5pb24pCiAgYWRkID0gKHAsIGNsaXAgPSBmYWxzZSkgPT4KICAudG9Qb2x5bGluZXMgPSBmdW5jdGlvbigpCiAgcCA9PgooeyBYLCBZIH0pID0+CiAgc2F2ZUl0ZW1TdGF0ZXMoaXRlbUxpc3QsIGdldCA9IGl0ZW0gPT4gaXMuCihpdGVtLgopKQogIGl0ZW0gPT4KICByZXN0b3JlSXRlbVN0YXRlcyhpdGVtU3RhdGVzLCAvKnByZXR0aWVyLWlnbm9yZSAqLyBzZXQgPSAoaXRlbSwgdmFsdWUpID0+IGl0ZW0uCih2YWx1ZSA/ICd5ZXMnIDogJ25vJykpCkVhZ2xlTWFwcyhwcm9qZWN0KQogIHRyYW5zZm9ybVBhdGggPSBwID0+CiAgZSA9PgogIGRvbTJlYWdsZSA9IG5vZGUgPT4KICBlYWdsZTJkb20gPSBlbGVtID0+CiAgcGF0aDJkb20gPSBwID0+CihrZXksIHZhbHVlKSA9Pgooa2V5LCB2YWx1ZSkgPT4KUGFja2FnZU5hbWVzKGRvYyA9IHByb2plY3QuZG9jKQogIGUgPT4KKFtlLCBiXSkgPT4KKFtlLCB3LCBoLCBtLCB2XSkgPT4KKHsgaW5kZXgsIC4uLm1hdGNoIH0pID0+Cih7IHMsIHYsIGluZGV4ZXMgfSwgbWF0Y2gsIGkpID0+CihbdG9rZW4sIGluZGV4XSkgPT4KKFt0b2tlbiwgaW5kZXhdKSA9PgpOZXh0RG9jdW1lbnQobiA9IDEpCihpZHgsIGkpID0+CihpZHgsIGkpID0+CkxvYWREb2N1bWVudChwcm9qZWN0LCBwYXJlbnRFbGVtKQogIGVyciA9PgooKSA9PgplbnQgPT4KKCkgPT4KZW50ID0+CiAgcmVuYW1lUGFja2FnZXMoKQogIGEgPT4KICB2YWx1ZSA9PgooKSA9PgogIGxheWVyID0+CigpID0+CiAgZm4gPSBmdW5jdGlvbih2KQooKSA9PgogIC5tYWtlR3JvdXAgPSBmdW5jdGlvbih7IHRyYW5zZm9ybSwgLi4ucHJvcHMgfSA9IHt9KQogIGlkID0+CigpID0+CiAgeHgoKQooKSA9PgoodHJhbnNmb3JtKQoodGFnLCBhdHRyLCBjaGlsZHJlbiA9IFtdKSA9PgogIHZhbHVlID0+CiAgc2V0UmVjdCA9IHJlY3QgPT4KICBrID0+CiAgZWxlbSA9PgogIGdldCB4KCkKICBzZXQgeCh2YWx1ZSkKICBnZXQgeSgpCiAgc2V0IHkodmFsdWUpCiAgZ2V0IHgxKCkKICBzZXQgeDEodmFsdWUpCiAgZ2V0IHkxKCkKICBzZXQgeTEodmFsdWUpCiAgZ2V0IHgyKCkKICBzZXQgeDIodmFsdWUpCiAgZ2V0IHkyKCkKICBzZXQgeTIodmFsdWUpCiAgZ2V0IHdpZHRoKCkKICBzZXQgd2lkdGgodmFsdWUpCiAgZ2V0IGhlaWdodCgpCiAgc2V0IGhlaWdodCh2YWx1ZSkKKCkgPT4KUmVjdAphID0+CmVyciA9PgpDaG9vc2VEb2N1bWVudChwcm9qZWN0LCBpKQpHZW5lcmF0ZVZvcm9ub2kgPSAoKSA9PgpSZWN0CiAgcCA9PgogIGUgPT4KKHsgbFNpdGUsIHJTaXRlLCAuLi5lZGdlIH0pID0+CiAgZSA9PgooeyBsU2l0ZSwgclNpdGUsIC4uLmVkZ2UgfSkgPT4KICBlID0+Cih7IHZhLCB2YiwgLi4uZWRnZSB9KSA9PgogIHYgPT4KICBhZGQgPSAoYXJyLCAuLi5pdGVtcykgPT4KICBsID0+CiAgdCA9PgogIGwgPT4KICB0ID0+CiAgcCA9PgooYWNjLCB7IHNpdGUsIGhhbGZlZGdlcyB9KSA9PgooeyBzaXRlIH0pID0+ClBhY2thZ2VDaGlsZHJlbihlbGVtZW50LCBsYXllcikKKGMsIGkpID0+CihbaSwgcF0pID0+CihbaSwgZV0pID0+CkVsZW1lbnRDaGlsZHJlbihsYXllciA9ICd0UGxhY2UnLCByZm4gPSBlbnQgPT4gCihlbnQpKQooW25hbWUsIGVsZW1lbnRdKSA9PgpFbGVtZW50R2VvbWV0cmllcyhsYXllciA9ICd0UGxhY2UnLCByZm4gPSBlbnQgPT4gCihlbnQpKQplbnQgPT4KKFtuYW1lLCBjaGlsZHJlbl0pID0+CihbaSwgZV0pID0+CihbbmFtZSwgbGluZXNdKSA9PgogIHB0cyA9PgooW25hbWUsIGxpbmVzLCBwb2x5Z29uc10pID0+Ck5ld1BhdGgocGF0aCkKTWFrZUZpdEFjdGlvbiA9IGluZGV4ID0+CiAgZXZlbnQgPT4KWm9vbUZhY3Rvcih2YWwgPSBjb25maWcuCikKWm9vbUxvZyhmYWN0b3IpCkFkanVzdFpvb20obCA9IGNvbmZpZy4KKQpDcmVhdGVHcmJsU29ja2V0ID0gKHBvcnQgPSAndG50MScpID0+CkhhbmRsZU1lc3NhZ2UobXNnKQogIHBvaW50U3RyID0+CiAgc29ja2V0Rm4gPSAoKSA9PgogIC5zZW5kID0gKC4uLmFyZ3MpID0+CkF1dGhvcml6YXRpb25EaWFsb2cgPSAoeyBvbkF1dGgsIC4uLnByb3BzIH0pID0+CiAgb25TdWJtaXQ6ICgpID0+CiAgb25JbnB1dDogZSA9PgogIG9uSW5wdXQ6IGUgPT4KICBvbkNsaWNrOiBlID0+CiAgYXJnID0+CiAgLm9ubG9hZCA9ICgpID0+CiAgcmVzcG9uc2UgPT4KICBlID0+CnYgPT4KVGVzdEFyYzogKCkgPT4KKCkgPT4KKHB1c2gsIHN0b3ApID0+CigpID0+CihwdXNoLCBzdG9wKSA9Pgp0YXJnZXQgPT4KKGtleSwgbW9kaWZpZXJzID0gMCkgPT4KICAuZm9jdXNTZWFyY2ggPSBzdGF0ZSA9PgogIGNoaWxkcmVuOiAoKSA9PgogIGdlb21ldHJpZXM6ICgpID0+CiAgdmFsdWUgPT4KKCkgPT4KICB0ZXN0Q29tcG9uZW50ID0gcHJvcHMgPT4KICByZXNwID0+CiAganNvbiA9PgpGaWxlKG9iaiwgaSkKRmlsZQpGaWxlLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkKKGEsIGIpID0+CihvYmosIGkpID0+CihhY2MsIGZpbGUpID0+CiAgaSA9PgogIHZhbHVlID0+CiAgdmFsdWUgPT4KICB2YWx1ZSA9PgogIHZhbHVlID0+CiAgdmFsdWUgPT4KICB2YWx1ZSA9PgogIHVwZGF0ZUlmQ2hhbmdlZCA9ICh0cmtsLCBuZXdWYWx1ZSwgY2FsbGJhY2spID0+CihlbGVtLCBpKSA9PgogIGNoYW5nZUlucHV0ID0gZSA9PgogIHAgPT4KYXJnID0+CkNvbnN1bWVyID0gcHJvcHMgPT4KKCkKICBsb2codHlwZSwgdGltZSwgbXNnKQpMb2dnZXIgPSBwcm9wcyA9PgooKQooW3R5cGUsIGQsIHQsIG1dLCBpKSA9PgpEdW1wZXIgPSBwcm9wcyA9PgogIHZhbHVlID0+Cihbaywgdl0sIGkpID0+CkNvbW1hbmRlciA9ICh7IG9uQ29tbWFuZCwgLi4ucHJvcHMgfSkgPT4KICBoYW5kbGVyID0gZSA9PgogIHRvZ2dsZSA9IHRya2wgPT4KTGF5ZXIgPSAoeyB0aXRsZSwgbmFtZSwgbGFiZWwsIGksIGNvbG9yLCBlbGVtZW50LCBjbGFzc05hbWUsIC4uLnByb3BzIH0pID0+CiAgc2V0VmlzaWJsZSA9IHZhbHVlID0+CiAgZSA9PgplID0+CiAgbCA9PgogIGwgPT4KKGl0ZW0sIHZhbHVlKSA9PgppdGVtID0+CiAgbCA9PgooW2wsIHN0YXRlXSkgPT4KICBlID0+CiAgb25Nb3VzZU1vdmU6IGUgPT4KICBvbk1vdXNlVXA6IGUgPT4KRG9jdW1lbnRMaXN0CiAgY29uc3RydWN0b3IoKQoocHVzaCwgc3RvcCkgPT4KICBhZGQobmFtZSwgY29tcG9uZW50KQogIGFkZEVudHJ5KFtuYW1lLCBjb21wb25lbnRdKQogIHJlbW92ZShuYW1lKQogIHVwZGF0ZSgpCiAgZm46IGUgPT4KICBmbjogKCkgPT4KICBvcGVuID0+CnByb3BzID0+CnByb3BzID0+CiAgZSA9PgogIGkgPT4KICBpID0+Cih7IGNvb3JkIH0pID0+CiAgc2lkZSA9PgogIGNyZWF0ZTogKHByb2plY3QsIHByb3BzID0ge30pID0+CiAgYSA9PgogIGUgPT4KICBlID0+CiAgbmFtZSA9PgogIGUgPT4KICBtYWtlTGF5ZXJOYW1lKG5hbWUsIHNpZGUpCiAgZm46ICgpID0+CiAgb25DaGFuZ2UoZXZlbnQpCnByb3BzID0+CnByb3BzID0+CnByb3BzID0+CihlLCBwLCBpKSA9PgogIG1ha2VTb3J0Q29tcGFyZToga2V5ID0+CmZ1bmN0aW9uKGEsIGIpCmZ1bmN0aW9uKGEsIGIpCiAgb25Db21tYW5kOiBjbWRTdHIgPT4KICBoYW5kbGVDaGFuZ2U6IGUgPT4KZXZlbnQgPT4KICBlID0+Ck1vdmVFdmVudChldmVudCwgcHJldkV2ZW50KQpXYWxrVXAoZSkKZSA9Pgp6ID0+CiAgcCA9PgogIGUgPT4KZSA9PgogIGUgPT4KdiA9PgpsID0+CiAgZSA9PgooKSA9PgooZSwgZGVwdGgpID0+CmNsYXNzZXMgPT4KZSA9PgplID0+CihhLCBiKSA9PgooYSwgYikgPT4KTm9kZQogIGUgPT4KKHAsIGQsIHNldCwgc3RvcCkgPT4KICBlID0+CiAgZSA9PgpUb3VjaEV2ZW50KGV2ZW50KQogIGUgPT4KKHAsIGkpID0+CihhLCBiKSA9PgpzaXplID0+CiAgYm9yZGVyID0+CiAgciA9PgogIG1vZChuLCBtKQooKSA9PgoocG9zLCBsYXN0LCBmaXJzdCkgPT4KICBjYW5jZWwoKQogIC5vbmNvbnRleHRtZW51ID0gZnVuY3Rpb24oZSkKICAucHJvY2Vzc0V2ZW50cyA9IGZ1bmN0aW9uIGV2ZW50TG9vcCgpCmV2ZW50ID0+CiAgZSA9PgogIG9uUnVudGltZUluaXRpYWxpemVkOiAoKSA9PgogIHByaW50OiB0eHQgPT4AAAAAAAAAANYCAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					4300,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/main.js",
						"symkeys":
						[
							[
								9067,
								9072
							],
							[
								9254,
								9260
							],
							[
								9313,
								9318
							],
							[
								9371,
								9375
							],
							[
								9449,
								9453
							],
							[
								9475,
								9484
							],
							[
								10143,
								10162
							],
							[
								10261,
								10265
							],
							[
								10437,
								10444
							],
							[
								10475,
								10485
							],
							[
								10742,
								10766
							],
							[
								10807,
								10828
							],
							[
								10830,
								10835
							],
							[
								10843,
								10848
							],
							[
								10870,
								10905
							],
							[
								11106,
								11111
							],
							[
								11298,
								11319
							],
							[
								11452,
								11470
							],
							[
								12149,
								12174
							],
							[
								12220,
								12238
							],
							[
								13215,
								13242
							],
							[
								13597,
								13622
							],
							[
								13997,
								14031
							],
							[
								14548,
								14580
							],
							[
								14755,
								14765
							],
							[
								14898,
								14908
							],
							[
								15027,
								15037
							],
							[
								15204,
								15228
							],
							[
								15287,
								15336
							],
							[
								15577,
								15599
							],
							[
								15606,
								15630
							],
							[
								15638,
								15667
							],
							[
								16482,
								16534
							],
							[
								16987,
								16991
							],
							[
								17018,
								17023
							],
							[
								17458,
								17544
							],
							[
								17742,
								17764
							],
							[
								18277,
								18309
							],
							[
								18637,
								18671
							],
							[
								18786,
								18791
							],
							[
								18816,
								18852
							],
							[
								19041,
								19066
							],
							[
								19257,
								19282
							],
							[
								19337,
								19341
							],
							[
								19396,
								19400
							],
							[
								19842,
								19859
							],
							[
								20048,
								20063
							],
							[
								20186,
								20203
							],
							[
								20255,
								20259
							],
							[
								20304,
								20308
							],
							[
								20339,
								20343
							],
							[
								20381,
								20386
							],
							[
								20473,
								20492
							],
							[
								20665,
								20700
							],
							[
								20738,
								20746
							],
							[
								20815,
								20819
							],
							[
								21382,
								21386
							],
							[
								21445,
								21449
							],
							[
								22018,
								22024
							],
							[
								22199,
								22203
							],
							[
								22224,
								22228
							],
							[
								22263,
								22267
							],
							[
								22527,
								22540
							],
							[
								22663,
								22667
							],
							[
								22861,
								22877
							],
							[
								23143,
								23148
							],
							[
								23261,
								23270
							],
							[
								23342,
								23351
							],
							[
								23428,
								23437
							],
							[
								24077,
								24099
							],
							[
								24276,
								24336
							],
							[
								24585,
								24605
							],
							[
								24616,
								24625
							],
							[
								24680,
								24692
							],
							[
								24737,
								24744
							],
							[
								24830,
								24861
							],
							[
								25183,
								25216
							],
							[
								26255,
								26308
							],
							[
								26358,
								26367
							],
							[
								26442,
								26485
							],
							[
								26564,
								26568
							],
							[
								26697,
								26704
							],
							[
								26731,
								26738
							],
							[
								26816,
								26837
							],
							[
								27092,
								27134
							],
							[
								27257,
								27278
							],
							[
								27513,
								27558
							],
							[
								27703,
								27710
							],
							[
								27752,
								27822
							],
							[
								28259,
								28284
							],
							[
								28307,
								28311
							],
							[
								28331,
								28344
							],
							[
								28460,
								28532
							],
							[
								28751,
								28758
							],
							[
								28841,
								28850
							],
							[
								29282,
								29347
							],
							[
								29434,
								29460
							],
							[
								29673,
								29698
							],
							[
								29721,
								29725
							],
							[
								29745,
								29758
							],
							[
								29812,
								29863
							],
							[
								29865,
								29871
							],
							[
								29880,
								29882
							],
							[
								29907,
								29914
							],
							[
								29938,
								30027
							],
							[
								30034,
								30057
							],
							[
								30120,
								30147
							],
							[
								30156,
								30176
							],
							[
								30311,
								30315
							],
							[
								30485,
								30504
							],
							[
								30588,
								30607
							],
							[
								30700,
								30715
							],
							[
								31575,
								31590
							],
							[
								31676,
								31691
							],
							[
								32348,
								32389
							],
							[
								32589,
								32593
							],
							[
								32623,
								32634
							],
							[
								32717,
								32737
							],
							[
								32942,
								32966
							],
							[
								33024,
								33064
							],
							[
								33436,
								33455
							],
							[
								33506,
								33525
							],
							[
								34387,
								34415
							],
							[
								34615,
								34627
							],
							[
								34658,
								34670
							],
							[
								35181,
								35229
							],
							[
								35457,
								35463
							],
							[
								35608,
								35613
							],
							[
								35639,
								35646
							],
							[
								35704,
								35709
							],
							[
								35737,
								35744
							],
							[
								36177,
								36193
							],
							[
								36279,
								36283
							],
							[
								36576,
								36584
							],
							[
								36935,
								36940
							],
							[
								36981,
								36989
							],
							[
								37129,
								37134
							],
							[
								37221,
								37237
							],
							[
								38468,
								38473
							],
							[
								38932,
								38983
							],
							[
								39384,
								39389
							],
							[
								39408,
								39413
							],
							[
								39719,
								39736
							],
							[
								39895,
								39901
							],
							[
								40014,
								40034
							],
							[
								40110,
								40140
							],
							[
								40316,
								40324
							],
							[
								40560,
								40577
							],
							[
								40673,
								40677
							],
							[
								40694,
								40701
							],
							[
								40801,
								40808
							],
							[
								40858,
								40870
							],
							[
								40939,
								40946
							],
							[
								40996,
								41008
							],
							[
								41077,
								41085
							],
							[
								41136,
								41149
							],
							[
								41219,
								41227
							],
							[
								41278,
								41291
							],
							[
								41361,
								41369
							],
							[
								41420,
								41433
							],
							[
								41503,
								41511
							],
							[
								41562,
								41575
							],
							[
								41645,
								41656
							],
							[
								41710,
								41726
							],
							[
								41799,
								41811
							],
							[
								41866,
								41883
							],
							[
								41949,
								41958
							],
							[
								42080,
								42084
							],
							[
								42563,
								42571
							],
							[
								42575,
								42585
							],
							[
								42668,
								42709
							],
							[
								43332,
								43355
							],
							[
								43944,
								43948
							],
							[
								44092,
								44096
							],
							[
								44608,
								44612
							],
							[
								44627,
								44657
							],
							[
								44705,
								44709
							],
							[
								44723,
								44753
							],
							[
								44807,
								44811
							],
							[
								44830,
								44854
							],
							[
								44919,
								44923
							],
							[
								44963,
								44987
							],
							[
								45105,
								45109
							],
							[
								45135,
								45139
							],
							[
								45209,
								45213
							],
							[
								45239,
								45243
							],
							[
								45336,
								45340
							],
							[
								45698,
								45733
							],
							[
								45844,
								45857
							],
							[
								46298,
								46338
							],
							[
								46384,
								46393
							],
							[
								46409,
								46420
							],
							[
								46512,
								46523
							],
							[
								46569,
								46625
							],
							[
								46632,
								46638
							],
							[
								46720,
								46740
							],
							[
								46787,
								46845
							],
							[
								46852,
								46858
							],
							[
								46901,
								46908
							],
							[
								46925,
								46946
							],
							[
								47008,
								47019
							],
							[
								47249,
								47267
							],
							[
								47307,
								47313
							],
							[
								47346,
								47374
							],
							[
								47412,
								47434
							],
							[
								47519,
								47543
							],
							[
								47544,
								47558
							],
							[
								48721,
								48754
							],
							[
								48763,
								48764
							],
							[
								48816,
								48840
							],
							[
								48881,
								48912
							],
							[
								48921,
								48922
							],
							[
								49167,
								49210
							],
							[
								49524,
								49551
							],
							[
								49844,
								49855
							],
							[
								50061,
								50077
							],
							[
								50391,
								50411
							],
							[
								51296,
								51343
							],
							[
								51726,
								51741
							],
							[
								51958,
								51971
							],
							[
								52248,
								52261
							],
							[
								52467,
								52480
							],
							[
								52699,
								52705
							],
							[
								52755,
								52776
							],
							[
								56571,
								56582
							],
							[
								57418,
								57422
							],
							[
								57836,
								57841
							],
							[
								57990,
								58004
							],
							[
								58022,
								58027
							],
							[
								58140,
								58161
							],
							[
								58219,
								58224
							],
							[
								58332,
								58353
							],
							[
								58578,
								58591
							],
							[
								58592,
								58619
							],
							[
								58736,
								58759
							],
							[
								59041,
								59056
							],
							[
								59081,
								59098
							],
							[
								59165,
								59173
							],
							[
								59246,
								59251
							],
							[
								59357,
								59381
							],
							[
								60142,
								60149
							],
							[
								60179,
								60186
							],
							[
								60508,
								60535
							],
							[
								60631,
								60635
							],
							[
								61000,
								61036
							],
							[
								61130,
								61139
							],
							[
								61174,
								61185
							],
							[
								61237,
								61251
							],
							[
								61765,
								61769
							],
							[
								62444,
								62452
							],
							[
								62568,
								62576
							],
							[
								62696,
								62704
							],
							[
								62819,
								62827
							],
							[
								62884,
								62892
							],
							[
								63364,
								63372
							],
							[
								63557,
								63604
							],
							[
								63750,
								63763
							],
							[
								63926,
								63944
							],
							[
								64112,
								64116
							],
							[
								64188,
								64195
							],
							[
								64443,
								64462
							],
							[
								64494,
								64512
							],
							[
								65038,
								65058
							],
							[
								65308,
								65325
							],
							[
								65533,
								65551
							],
							[
								65828,
								65851
							],
							[
								66302,
								66319
							],
							[
								66411,
								66419
							],
							[
								66638,
								66652
							],
							[
								66790,
								66830
							],
							[
								66895,
								66909
							],
							[
								67484,
								67500
							],
							[
								67538,
								67613
							],
							[
								67848,
								67869
							],
							[
								67973,
								67977
							],
							[
								68456,
								68470
							],
							[
								68760,
								68764
							],
							[
								68831,
								68835
							],
							[
								69112,
								69129
							],
							[
								69297,
								69305
							],
							[
								69498,
								69502
							],
							[
								69598,
								69613
							],
							[
								69859,
								69863
							],
							[
								70070,
								70087
							],
							[
								70179,
								70194
							],
							[
								70987,
								70999
							],
							[
								71006,
								71019
							],
							[
								71057,
								71072
							],
							[
								71176,
								71196
							],
							[
								71376,
								71403
							],
							[
								71457,
								71469
							],
							[
								71587,
								71595
							],
							[
								72044,
								72052
							],
							[
								72874,
								72883
							],
							[
								73118,
								73125
							],
							[
								73224,
								73244
							],
							[
								73431,
								73451
							],
							[
								73812,
								73822
							],
							[
								74625,
								74629
							],
							[
								74704,
								74708
							],
							[
								74722,
								74736
							],
							[
								74993,
								75000
							],
							[
								77343,
								77375
							],
							[
								77772,
								77776
							],
							[
								77982,
								77986
							],
							[
								78054,
								78058
							],
							[
								78142,
								78149
							],
							[
								78228,
								78232
							],
							[
								79337,
								79383
							],
							[
								79813,
								79822
							],
							[
								80924,
								80939
							],
							[
								81153,
								81169
							],
							[
								81330,
								81346
							],
							[
								81521,
								81537
							],
							[
								82560,
								82578
							],
							[
								82776,
								82799
							],
							[
								82841,
								82856
							],
							[
								83212,
								83227
							],
							[
								83640,
								83660
							],
							[
								84113,
								84131
							],
							[
								84842,
								84851
							],
							[
								84894,
								84898
							],
							[
								85110,
								85148
							],
							[
								85323,
								85346
							],
							[
								85480,
								85485
							],
							[
								85524,
								85534
							],
							[
								85693,
								85697
							],
							[
								85834,
								85838
							],
							[
								85877,
								85882
							],
							[
								86287,
								86291
							],
							[
								86325,
								86339
							],
							[
								86343,
								86357
							],
							[
								86364,
								86368
							],
							[
								86389,
								86404
							],
							[
								86435,
								86449
							],
							[
								86556,
								86567
							],
							[
								86612,
								86617
							],
							[
								86672,
								86677
							],
							[
								87127,
								87137
							],
							[
								87228,
								87238
							],
							[
								87251,
								87255
							],
							[
								87429,
								87433
							],
							[
								87594,
								87615
							],
							[
								88685,
								88689
							],
							[
								88796,
								88800
							],
							[
								89089,
								89117
							],
							[
								89568,
								89572
							],
							[
								90028,
								90037
							],
							[
								90121,
								90130
							],
							[
								90235,
								90243
							],
							[
								90750,
								90759
							],
							[
								90908,
								90912
							],
							[
								90977,
								91003
							],
							[
								91643,
								91648
							],
							[
								91923,
								91945
							],
							[
								92951,
								92972
							],
							[
								93177,
								93205
							],
							[
								93572,
								93615
							],
							[
								94940,
								94949
							],
							[
								95729,
								95733
							],
							[
								96468,
								96495
							],
							[
								96618,
								96631
							]
						],
						"symlist":
						[
							"() =>",
							"res =>",
							"() =>",
							"r =>",
							"r =>",
							"entries()",
							"GetProject = arg =>",
							"p =>",
							" () =>",
							" value =>",
							"add = (arr, ...items) =>",
							"useSlot = (arr, i) =>",
							"() =>",
							" v =>",
							"trklGetSet = (get, set) => value =>",
							"() =>",
							"(parent, delegate) =>",
							"append_to(elem, p)",
							"function DrawSVG(...args)",
							"append_to(elem, p)",
							" function adjustViewBox(e)",
							"function calcViewBox(box)",
							"function setViewBox(svgOwner, box)",
							"ElementToXML = (e, predicate) =>",
							" (v, k) =>",
							" (v, k) =>",
							" (v, k) =>",
							"async readFile(filename)",
							"async writeFile(filename, data, overwrite = true)",
							"async exists(filename)",
							"async realpath(filename)",
							"async function LoadFile(file)",
							"async function SaveFile(filename, data, contentType)",
							"s =>",
							"() =>",
							"async function SaveSVG(filename, layers = [1, 16, 20, 21, 22, 23, 25, 27, 47, 48, 51])",
							"predicate = element =>",
							"async function LoadSVG(filename)",
							"async function LoadImage(filename)",
							"() =>",
							" function RenderComponent(component)",
							"ModifyColors = fn => e =>",
							"FindLayer = name_or_id =>",
							"n =>",
							"l =>",
							"(id = '#geom') =>",
							"(props = {}) =>",
							"maxZIndex = () =>",
							"e =>",
							"z =>",
							"z =>",
							"() =>",
							"randomColor = () =>",
							"function DrawArc(start, end, angle)",
							"props =>",
							"p =>",
							"a =>",
							"m =>",
							"hex =>",
							"p =>",
							"p =>",
							"p =>",
							"({ x, y }) =>",
							"a =>",
							"({ x, y }, i) =>",
							" e =>",
							"(l, i) =>",
							"(p, i) =>",
							"(p, i) =>",
							"add = (level, item) =>",
							" function RecurseBinaryNode(node, parent = null, depth = 0)",
							"(nodes, i, level) =>",
							"fx = j =>",
							"(node, j) =>",
							"item =>",
							" function DrawNode(x, y, node)",
							" function DrawEdge(item, parent)",
							"function GetPaths(query, parent = project.svgElement)",
							"(a, e) =>",
							"function PathToPolylines(path, step = 0.01)",
							"p =>",
							"poly =>",
							"poly =>",
							" (p, d, set, stop) =>",
							"function PathToPolyline(path, step = 0.01)",
							" (p, d, set, stop) =>",
							"function PathsToPolylines(paths, step = 0.01)",
							"path =>",
							"function OutsetPath(path, offset, miterLimit = 2, arcTolerance = 0.01)",
							".toPolylines = function()",
							"p =>",
							"({ X, Y }) =>",
							"function OutsetPaths(paths, offset, miterLimit = 2, arcTolerance = 0.25)",
							"path =>",
							"(a, p) =>",
							"function ClipPath(path, clip, mode = ClipperLib.ClipType.ctUnion)",
							"add = (p, clip = false) =>",
							".toPolylines = function()",
							"p =>",
							"({ X, Y }) =>",
							"function saveItemStates(itemList, get = item => is.",
							"(item.",
							"))",
							"item =>",
							"function restoreItemStates(itemStates, /* prettier-ignore */ set = (item, value) => item.",
							"(value ? 'yes' : 'no'))",
							"function EagleMaps(project)",
							"transformPath = p =>",
							"e =>",
							"dom2eagle = node =>",
							"eagle2dom = elem =>",
							"path2dom = p =>",
							"(key, value) =>",
							"(key, value) =>",
							"function* PackageNames(doc = project.doc)",
							"e =>",
							"([e, b]) =>",
							"([e, w, h, m, v]) =>",
							"({ index, ...match }) =>",
							" ({ s, v, indexes }, match, i) =>",
							"([token, index]) =>",
							"([token, index]) =>",
							"function NextDocument(n = 1)",
							" (idx, i) =>",
							" (idx, i) =>",
							"async function LoadDocument(project, parentElem)",
							"err =>",
							"() =>",
							" ent =>",
							"() =>",
							" ent =>",
							"renamePackages()",
							"a =>",
							"value =>",
							"() =>",
							"layer =>",
							"() =>",
							"fn = function(v)",
							"() =>",
							".makeGroup = function({ transform, ...props } = {})",
							"id =>",
							"() =>",
							" function xx()",
							" () =>",
							"function (transform)",
							" (tag, attr, children = []) =>",
							"value =>",
							"setRect = rect =>",
							"k =>",
							"elem =>",
							"get x()",
							"set x(value)",
							"get y()",
							"set y(value)",
							"get x1()",
							"set x1(value)",
							"get y1()",
							"set y1(value)",
							"get x2()",
							"set x2(value)",
							"get y2()",
							"set y2(value)",
							"get width()",
							"set width(value)",
							"get height()",
							"set height(value)",
							" () =>",
							"Rect",
							" a =>",
							" err =>",
							"async function ChooseDocument(project, i)",
							"GenerateVoronoi = () =>",
							"Rect",
							"p =>",
							"e =>",
							"({ lSite, rSite, ...edge }) =>",
							"e =>",
							"({ lSite, rSite, ...edge }) =>",
							"e =>",
							"({ va, vb, ...edge }) =>",
							"v =>",
							"add = (arr, ...items) =>",
							"l =>",
							"t =>",
							"l =>",
							"t =>",
							"p =>",
							" (acc, { site, halfedges }) =>",
							"({ site }) =>",
							"function PackageChildren(element, layer)",
							"(c, i) =>",
							"([i, p]) =>",
							"([i, e]) =>",
							"function ElementChildren(layer = 'tPlace', rfn = ent => ",
							"(ent))",
							"([name, element]) =>",
							"function ElementGeometries(layer = 'tPlace', rfn = ent => ",
							"(ent))",
							" ent =>",
							"([name, children]) =>",
							"([i, e]) =>",
							"([name, lines]) =>",
							"pts =>",
							"([name, lines, polygons]) =>",
							"function NewPath(path)",
							"MakeFitAction = index =>",
							"async event =>",
							"function ZoomFactor(val = config.",
							")",
							"function ZoomLog(factor)",
							"function AdjustZoom(l = config.",
							")",
							"CreateGrblSocket = async (port = 'tnt1') =>",
							"function HandleMessage(msg)",
							"pointStr =>",
							"socketFn = () =>",
							".send = (...args) =>",
							"AuthorizationDialog = ({ onAuth, ...props }) =>",
							"onSubmit: () =>",
							"onInput: e =>",
							"onInput: e =>",
							"onClick: e =>",
							"arg =>",
							".onload = async () =>",
							"response =>",
							"e =>",
							" v =>",
							"TestArc: () =>",
							"() =>",
							"async (push, stop) =>",
							"() =>",
							"async (push, stop) =>",
							" target =>",
							" (key, modifiers = 0) =>",
							".focusSearch = state =>",
							"children: () =>",
							"geometries: () =>",
							"value =>",
							"() =>",
							"testComponent = props =>",
							"resp =>",
							"json =>",
							" function File(obj, i)",
							"File",
							"File.prototype.toString = function()",
							"(a, b) =>",
							"(obj, i) =>",
							"(acc, file) =>",
							"i =>",
							"value =>",
							"value =>",
							"value =>",
							"value =>",
							"value =>",
							"value =>",
							"updateIfChanged = (trkl, newValue, callback) =>",
							" (elem, i) =>",
							"changeInput = e =>",
							"p =>",
							" arg =>",
							"Consumer = props =>",
							"async function* ()",
							"log(type, time, msg)",
							"Logger = props =>",
							"async function* ()",
							"([type, d, t, m], i) =>",
							"Dumper = props =>",
							"value =>",
							"([k, v], i) =>",
							"Commander = ({ onCommand, ...props }) =>",
							"handler = e =>",
							"toggle = trkl =>",
							"Layer = ({ title, name, label, i, color, element, className, ...props }) =>",
							"setVisible = value =>",
							"e =>",
							" e =>",
							"l =>",
							"l =>",
							" (item, value) =>",
							" item =>",
							"l =>",
							"([l, state]) =>",
							"e =>",
							"onMouseMove: e =>",
							"onMouseUp: e =>",
							"DocumentList",
							"constructor()",
							"(push, stop) =>",
							"add(name, component)",
							"addEntry([name, component])",
							"remove(name)",
							"update()",
							"fn: e =>",
							"fn: () =>",
							"open =>",
							" props =>",
							" props =>",
							"async e =>",
							"i =>",
							"i =>",
							"({ coord }) =>",
							"side =>",
							"create: (project, props = {}) =>",
							"a =>",
							"e =>",
							"e =>",
							"name =>",
							"e =>",
							" function makeLayerName(name, side)",
							"fn: () =>",
							"onChange(event)",
							" props =>",
							" props =>",
							" props =>",
							"async (e, p, i) =>",
							"makeSortCompare: key =>",
							" function(a, b)",
							" function(a, b)",
							"onCommand: cmdStr =>",
							"handleChange: e =>",
							" event =>",
							"e =>",
							" function MoveEvent(event, prevEvent)",
							" function* WalkUp(e)",
							" e =>",
							" z =>",
							"p =>",
							"e =>",
							" e =>",
							"e =>",
							" v =>",
							" l =>",
							"e =>",
							" () =>",
							" (e, depth) =>",
							" classes =>",
							" e =>",
							" e =>",
							" (a, b) =>",
							" (a, b) =>",
							"Node",
							"e =>",
							" (p, d, set, stop) =>",
							"e =>",
							"e =>",
							" function TouchEvent(event)",
							"e =>",
							"(p, i) =>",
							"(a, b) =>",
							" size =>",
							"border =>",
							"r =>",
							" function mod(n, m)",
							"() =>",
							" (pos, last, first) =>",
							" function cancel()",
							".oncontextmenu = function(e)",
							".processEvents = async function eventLoop()",
							" event =>",
							"e =>",
							"onRuntimeInitialized: () =>",
							"print: txt =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADWAgAAKCkgPT4KZXZlbnQgPT4KKCkgPT4KbmFtZSA9PgpmbGFncyA9PgpTY3JlZW4KICBzdGF0aWMgc2l6ZSgpCldpbmRvdwogIGNvbnN0cnVjdG9yKG5hbWUsIGZsYWdzID0gV0lORE9XX05PUk1BTCkKICBjcmVhdGUobmFtZSA9ICdkZWZhdWx0JykKICBoYW5kbGVLZXkoc2NhbmNvZGUpCiAgdXBkYXRlKHdhaXRGb3IgPSAxMCkKICBtb3ZlKC4uLmFyZ3MpCiAgcmVzaXplKC4uLmFyZ3MpCiAgYWxpZ24obiA9IDApCiAgZ2V0IGltYWdlUmVjdCgpCiAgZ2V0KHByb3BJZCkKICBzZXQocHJvcElkLCB2YWx1ZSkKICBzZXRUaXRsZSh0aXRsZSkKICBzZXRNb3VzZUNhbGxiYWNrKGZuKQooZXZlbnQsIHgsIHksIGZsYWdzKSA9PgogIHNob3cobWF0KQogIGNsb3NlKCkKICB2YWx1ZU9mKCkKICBzZWxlY3RST0kobWF0LCBzaG93Q3Jvc3NoYWlyID0gdHJ1ZSwgZnJvbUNlbnRlciA9IGZhbHNlKQpUZXh0U3R5bGUoZm9udEZhY2UgPSBGT05UX0hFUlNIRVlfUExBSU4sIGZvbnRTY2FsZSA9IDEuMCwgdGhpY2tuZXNzID0gLTEpClRleHRTdHlsZQogIHNpemUodGV4dCwgZm4gPSB5ID0+IHt9KQp5ID0+CiAgZHJhdyhtYXQsIHRleHQsIHBvcywgY29sb3IgPSBbMjU1LCAyNTUsIDI1NSwgMjU1XSwgbGluZVRoaWNrbmVzcyA9IEZJTExFRCwgbGluZVR5cGUgPSBMSU5FX0FBKQpEcmF3VGV4dChkc3QsIHRleHQsIGNvbG9yLCBmb250RmFjZSwgZm9udFNpemUgPSAxMykKICBtID0+CnkgPT4KICBtID0+AAAAAAAAAACUFgAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					4301,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/dir-helpers.js",
						"symkeys":
						[
							[
								149,
								180
							],
							[
								250,
								256
							],
							[
								772,
								861
							],
							[
								1017,
								1052
							],
							[
								1582,
								1635
							],
							[
								2067,
								2071
							],
							[
								2095,
								2111
							],
							[
								2203,
								2214
							],
							[
								2265,
								2276
							],
							[
								2352,
								2363
							],
							[
								2415,
								2422
							],
							[
								2479,
								2495
							],
							[
								2569,
								2594
							],
							[
								2676,
								2697
							],
							[
								2787,
								2801
							],
							[
								2851,
								2861
							],
							[
								2983,
								2998
							],
							[
								3047,
								3058
							],
							[
								3130,
								3142
							],
							[
								3227,
								3243
							],
							[
								3294,
								3310
							],
							[
								3362,
								3376
							],
							[
								3448,
								3462
							],
							[
								4357,
								4361
							],
							[
								4539,
								4580
							],
							[
								5386,
								5390
							],
							[
								5410,
								5424
							],
							[
								5466,
								5481
							],
							[
								5499,
								5514
							],
							[
								5538,
								5552
							],
							[
								5575,
								5590
							],
							[
								5608,
								5614
							]
						],
						"symlist":
						[
							" function* DirIterator(...args)",
							" () =>",
							" function* RecursiveDirIterator(dir, pred = (entry, file, dir, depth) => true, depth = 0)",
							"pred = (entry, file, dir, depth) =>",
							" function* ReadDirRecursive(dir, maxDepth = Infinity)",
							"Path",
							"constructor(str)",
							"assign(str)",
							"append(str)",
							"concat(str)",
							"clear()",
							"removeFilename()",
							"replaceFilename(filename)",
							"replaceExtension(ext)",
							"get filename()",
							"get stem()",
							"get extension()",
							"get empty()",
							"get parent()",
							"get isAbsolute()",
							"get isRelative()",
							"relativeTo(to)",
							"compare(other)",
							"Path",
							"function operators_set(proto, ...op_list)",
							"Path",
							"'/': (a, b) =>",
							"'/=': (a, b) =>",
							"'==': (a, b) =>",
							"'<': (a, b) =>",
							"'+=': (a, b) =>",
							"pos(a)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACUFgAAKCkgPT4KICByZXMgPT4KKCkgPT4KICByID0+CiAgciA9PgogIGVudHJpZXMoKQpHZXRQcm9qZWN0ID0gYXJnID0+CiAgcCA9PgooKSA9Pgp2YWx1ZSA9PgogIGFkZCA9IChhcnIsIC4uLml0ZW1zKSA9PgogIHVzZVNsb3QgPSAoYXJyLCBpKSA9PgooKSA9Pgp2ID0+CiAgdHJrbEdldFNldCA9IChnZXQsIHNldCkgPT4gdmFsdWUgPT4KKCkgPT4KKHBhcmVudCwgZGVsZWdhdGUpID0+CiAgYXBwZW5kX3RvKGVsZW0sIHApCkRyYXdTVkcoLi4uYXJncykKICBhcHBlbmRfdG8oZWxlbSwgcCkKICBhZGp1c3RWaWV3Qm94KGUpCiAgY2FsY1ZpZXdCb3goYm94KQogIHNldFZpZXdCb3goc3ZnT3duZXIsIGJveCkKRWxlbWVudFRvWE1MID0gKGUsIHByZWRpY2F0ZSkgPT4KKHYsIGspID0+Cih2LCBrKSA9PgoodiwgaykgPT4KICByZWFkRmlsZShmaWxlbmFtZSkKICB3cml0ZUZpbGUoZmlsZW5hbWUsIGRhdGEsIG92ZXJ3cml0ZSA9IHRydWUpCiAgZXhpc3RzKGZpbGVuYW1lKQogIHJlYWxwYXRoKGZpbGVuYW1lKQpMb2FkRmlsZShmaWxlKQpTYXZlRmlsZShmaWxlbmFtZSwgZGF0YSwgY29udGVudFR5cGUpCiAgcyA9PgooKSA9PgpTYXZlU1ZHKGZpbGVuYW1lLCBsYXllcnMgPSBbMSwgMTYsIDIwLCAyMSwgMjIsIDIzLCAyNSwgMjcsIDQ3LCA0OCwgNTFdKQogIHByZWRpY2F0ZSA9IGVsZW1lbnQgPT4KTG9hZFNWRyhmaWxlbmFtZSkKTG9hZEltYWdlKGZpbGVuYW1lKQooKSA9PgpSZW5kZXJDb21wb25lbnQoY29tcG9uZW50KQpNb2RpZnlDb2xvcnMgPSBmbiA9PiBlID0+CkZpbmRMYXllciA9IG5hbWVfb3JfaWQgPT4KICBuID0+CiAgbCA9PgooaWQgPSAnI2dlb20nKSA9PgoocHJvcHMgPSB7fSkgPT4KICBtYXhaSW5kZXggPSAoKSA9PgogIGUgPT4KICB6ID0+CiAgeiA9PgooKSA9PgogIHJhbmRvbUNvbG9yID0gKCkgPT4KRHJhd0FyYyhzdGFydCwgZW5kLCBhbmdsZSkKICBwcm9wcyA9PgogIHAgPT4KICBhID0+CiAgbSA9PgogIGhleCA9PgogIHAgPT4KICBwID0+CiAgcCA9PgooeyB4LCB5IH0pID0+CiAgYSA9PgooeyB4LCB5IH0sIGkpID0+CmUgPT4KKGwsIGkpID0+CihwLCBpKSA9PgoocCwgaSkgPT4KICBhZGQgPSAobGV2ZWwsIGl0ZW0pID0+ClJlY3Vyc2VCaW5hcnlOb2RlKG5vZGUsIHBhcmVudCA9IG51bGwsIGRlcHRoID0gMCkKKG5vZGVzLCBpLCBsZXZlbCkgPT4KICBmeCA9IGogPT4KKG5vZGUsIGopID0+CiAgaXRlbSA9PgpEcmF3Tm9kZSh4LCB5LCBub2RlKQpEcmF3RWRnZShpdGVtLCBwYXJlbnQpCkdldFBhdGhzKHF1ZXJ5LCBwYXJlbnQgPSBwcm9qZWN0LnN2Z0VsZW1lbnQpCihhLCBlKSA9PgpQYXRoVG9Qb2x5bGluZXMocGF0aCwgc3RlcCA9IDAuMDEpCiAgcCA9PgogIHBvbHkgPT4KICBwb2x5ID0+CihwLCBkLCBzZXQsIHN0b3ApID0+ClBhdGhUb1BvbHlsaW5lKHBhdGgsIHN0ZXAgPSAwLjAxKQoocCwgZCwgc2V0LCBzdG9wKSA9PgpQYXRoc1RvUG9seWxpbmVzKHBhdGhzLCBzdGVwID0gMC4wMSkKICBwYXRoID0+Ck91dHNldFBhdGgocGF0aCwgb2Zmc2V0LCBtaXRlckxpbWl0ID0gMiwgYXJjVG9sZXJhbmNlID0gMC4wMSkKICAudG9Qb2x5bGluZXMgPSBmdW5jdGlvbigpCiAgcCA9PgooeyBYLCBZIH0pID0+Ck91dHNldFBhdGhzKHBhdGhzLCBvZmZzZXQsIG1pdGVyTGltaXQgPSAyLCBhcmNUb2xlcmFuY2UgPSAwLjI1KQogIHBhdGggPT4KKGEsIHApID0+CkNsaXBQYXRoKHBhdGgsIGNsaXAsIG1vZGUgPSBDbGlwcGVyTGliLkNsaXBUeXBlLmN0VW5pb24pCiAgYWRkID0gKHAsIGNsaXAgPSBmYWxzZSkgPT4KICAudG9Qb2x5bGluZXMgPSBmdW5jdGlvbigpCiAgcCA9PgooeyBYLCBZIH0pID0+CiAgc2F2ZUl0ZW1TdGF0ZXMoaXRlbUxpc3QsIGdldCA9IGl0ZW0gPT4gaXMuCihpdGVtLgopKQogIGl0ZW0gPT4KICByZXN0b3JlSXRlbVN0YXRlcyhpdGVtU3RhdGVzLCAvKnByZXR0aWVyLWlnbm9yZSAqLyBzZXQgPSAoaXRlbSwgdmFsdWUpID0+IGl0ZW0uCih2YWx1ZSA/ICd5ZXMnIDogJ25vJykpCkVhZ2xlTWFwcyhwcm9qZWN0KQogIHRyYW5zZm9ybVBhdGggPSBwID0+CiAgZSA9PgogIGRvbTJlYWdsZSA9IG5vZGUgPT4KICBlYWdsZTJkb20gPSBlbGVtID0+CiAgcGF0aDJkb20gPSBwID0+CihrZXksIHZhbHVlKSA9Pgooa2V5LCB2YWx1ZSkgPT4KUGFja2FnZU5hbWVzKGRvYyA9IHByb2plY3QuZG9jKQogIGUgPT4KKFtlLCBiXSkgPT4KKFtlLCB3LCBoLCBtLCB2XSkgPT4KKHsgaW5kZXgsIC4uLm1hdGNoIH0pID0+Cih7IHMsIHYsIGluZGV4ZXMgfSwgbWF0Y2gsIGkpID0+CihbdG9rZW4sIGluZGV4XSkgPT4KKFt0b2tlbiwgaW5kZXhdKSA9PgpOZXh0RG9jdW1lbnQobiA9IDEpCihpZHgsIGkpID0+CihpZHgsIGkpID0+CkxvYWREb2N1bWVudChwcm9qZWN0LCBwYXJlbnRFbGVtKQogIGVyciA9PgooKSA9PgplbnQgPT4KKCkgPT4KZW50ID0+CiAgcmVuYW1lUGFja2FnZXMoKQogIGEgPT4KICB2YWx1ZSA9PgooKSA9PgogIGxheWVyID0+CigpID0+CiAgZm4gPSBmdW5jdGlvbih2KQooKSA9PgogIC5tYWtlR3JvdXAgPSBmdW5jdGlvbih7IHRyYW5zZm9ybSwgLi4ucHJvcHMgfSA9IHt9KQogIGlkID0+CigpID0+CiAgeHgoKQooKSA9PgoodHJhbnNmb3JtKQoodGFnLCBhdHRyLCBjaGlsZHJlbiA9IFtdKSA9PgogIHZhbHVlID0+CiAgc2V0UmVjdCA9IHJlY3QgPT4KICBrID0+CiAgZWxlbSA9PgogIGdldCB4KCkKICBzZXQgeCh2YWx1ZSkKICBnZXQgeSgpCiAgc2V0IHkodmFsdWUpCiAgZ2V0IHgxKCkKICBzZXQgeDEodmFsdWUpCiAgZ2V0IHkxKCkKICBzZXQgeTEodmFsdWUpCiAgZ2V0IHgyKCkKICBzZXQgeDIodmFsdWUpCiAgZ2V0IHkyKCkKICBzZXQgeTIodmFsdWUpCiAgZ2V0IHdpZHRoKCkKICBzZXQgd2lkdGgodmFsdWUpCiAgZ2V0IGhlaWdodCgpCiAgc2V0IGhlaWdodCh2YWx1ZSkKKCkgPT4KUmVjdAphID0+CmVyciA9PgpDaG9vc2VEb2N1bWVudChwcm9qZWN0LCBpKQpHZW5lcmF0ZVZvcm9ub2kgPSAoKSA9PgpSZWN0CiAgcCA9PgogIGUgPT4KKHsgbFNpdGUsIHJTaXRlLCAuLi5lZGdlIH0pID0+CiAgZSA9PgooeyBsU2l0ZSwgclNpdGUsIC4uLmVkZ2UgfSkgPT4KICBlID0+Cih7IHZhLCB2YiwgLi4uZWRnZSB9KSA9PgogIHYgPT4KICBhZGQgPSAoYXJyLCAuLi5pdGVtcykgPT4KICBsID0+CiAgdCA9PgogIGwgPT4KICB0ID0+CiAgcCA9PgooYWNjLCB7IHNpdGUsIGhhbGZlZGdlcyB9KSA9PgooeyBzaXRlIH0pID0+ClBhY2thZ2VDaGlsZHJlbihlbGVtZW50LCBsYXllcikKKGMsIGkpID0+CihbaSwgcF0pID0+CihbaSwgZV0pID0+CkVsZW1lbnRDaGlsZHJlbihsYXllciA9ICd0UGxhY2UnLCByZm4gPSBlbnQgPT4gCihlbnQpKQooW25hbWUsIGVsZW1lbnRdKSA9PgpFbGVtZW50R2VvbWV0cmllcyhsYXllciA9ICd0UGxhY2UnLCByZm4gPSBlbnQgPT4gCihlbnQpKQplbnQgPT4KKFtuYW1lLCBjaGlsZHJlbl0pID0+CihbaSwgZV0pID0+CihbbmFtZSwgbGluZXNdKSA9PgogIHB0cyA9PgooW25hbWUsIGxpbmVzLCBwb2x5Z29uc10pID0+Ck5ld1BhdGgocGF0aCkKTWFrZUZpdEFjdGlvbiA9IGluZGV4ID0+CiAgZXZlbnQgPT4KWm9vbUZhY3Rvcih2YWwgPSBjb25maWcuCikKWm9vbUxvZyhmYWN0b3IpCkFkanVzdFpvb20obCA9IGNvbmZpZy4KKQpDcmVhdGVHcmJsU29ja2V0ID0gKHBvcnQgPSAndG50MScpID0+CkhhbmRsZU1lc3NhZ2UobXNnKQogIHBvaW50U3RyID0+CiAgc29ja2V0Rm4gPSAoKSA9PgogIC5zZW5kID0gKC4uLmFyZ3MpID0+CkF1dGhvcml6YXRpb25EaWFsb2cgPSAoeyBvbkF1dGgsIC4uLnByb3BzIH0pID0+CiAgb25TdWJtaXQ6ICgpID0+CiAgb25JbnB1dDogZSA9PgogIG9uSW5wdXQ6IGUgPT4KICBvbkNsaWNrOiBlID0+CiAgYXJnID0+CiAgLm9ubG9hZCA9ICgpID0+CiAgcmVzcG9uc2UgPT4KICBlID0+CnYgPT4KVGVzdEFyYzogKCkgPT4KKCkgPT4KKHB1c2gsIHN0b3ApID0+CigpID0+CihwdXNoLCBzdG9wKSA9Pgp0YXJnZXQgPT4KKGtleSwgbW9kaWZpZXJzID0gMCkgPT4KICAuZm9jdXNTZWFyY2ggPSBzdGF0ZSA9PgogIGNoaWxkcmVuOiAoKSA9PgogIGdlb21ldHJpZXM6ICgpID0+CiAgdmFsdWUgPT4KKCkgPT4KICB0ZXN0Q29tcG9uZW50ID0gcHJvcHMgPT4KICByZXNwID0+CiAganNvbiA9PgpGaWxlKG9iaiwgaSkKRmlsZQpGaWxlLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkKKGEsIGIpID0+CihvYmosIGkpID0+CihhY2MsIGZpbGUpID0+CiAgaSA9PgogIHZhbHVlID0+CiAgdmFsdWUgPT4KICB2YWx1ZSA9PgogIHZhbHVlID0+CiAgdmFsdWUgPT4KICB2YWx1ZSA9PgogIHVwZGF0ZUlmQ2hhbmdlZCA9ICh0cmtsLCBuZXdWYWx1ZSwgY2FsbGJhY2spID0+CihlbGVtLCBpKSA9PgogIGNoYW5nZUlucHV0ID0gZSA9PgogIHAgPT4KYXJnID0+CkNvbnN1bWVyID0gcHJvcHMgPT4KKCkKICBsb2codHlwZSwgdGltZSwgbXNnKQpMb2dnZXIgPSBwcm9wcyA9PgooKQooW3R5cGUsIGQsIHQsIG1dLCBpKSA9PgpEdW1wZXIgPSBwcm9wcyA9PgogIHZhbHVlID0+Cihbaywgdl0sIGkpID0+CkNvbW1hbmRlciA9ICh7IG9uQ29tbWFuZCwgLi4ucHJvcHMgfSkgPT4KICBoYW5kbGVyID0gZSA9PgogIHRvZ2dsZSA9IHRya2wgPT4KTGF5ZXIgPSAoeyB0aXRsZSwgbmFtZSwgbGFiZWwsIGksIGNvbG9yLCBlbGVtZW50LCBjbGFzc05hbWUsIC4uLnByb3BzIH0pID0+CiAgc2V0VmlzaWJsZSA9IHZhbHVlID0+CiAgZSA9PgplID0+CiAgbCA9PgogIGwgPT4KKGl0ZW0sIHZhbHVlKSA9PgppdGVtID0+CiAgbCA9PgooW2wsIHN0YXRlXSkgPT4KICBlID0+CiAgb25Nb3VzZU1vdmU6IGUgPT4KICBvbk1vdXNlVXA6IGUgPT4KRG9jdW1lbnRMaXN0CiAgY29uc3RydWN0b3IoKQoocHVzaCwgc3RvcCkgPT4KICBhZGQobmFtZSwgY29tcG9uZW50KQogIGFkZEVudHJ5KFtuYW1lLCBjb21wb25lbnRdKQogIHJlbW92ZShuYW1lKQogIHVwZGF0ZSgpCiAgZm46IGUgPT4KICBmbjogKCkgPT4KICBvcGVuID0+CnByb3BzID0+CnByb3BzID0+CiAgZSA9PgogIGkgPT4KICBpID0+Cih7IGNvb3JkIH0pID0+CiAgc2lkZSA9PgogIGNyZWF0ZTogKHByb2plY3QsIHByb3BzID0ge30pID0+CiAgYSA9PgogIGUgPT4KICBlID0+CiAgbmFtZSA9PgogIGUgPT4KICBtYWtlTGF5ZXJOYW1lKG5hbWUsIHNpZGUpCiAgZm46ICgpID0+CiAgb25DaGFuZ2UoZXZlbnQpCnByb3BzID0+CnByb3BzID0+CnByb3BzID0+CihlLCBwLCBpKSA9PgogIG1ha2VTb3J0Q29tcGFyZToga2V5ID0+CmZ1bmN0aW9uKGEsIGIpCmZ1bmN0aW9uKGEsIGIpCiAgb25Db21tYW5kOiBjbWRTdHIgPT4KICBoYW5kbGVDaGFuZ2U6IGUgPT4KZXZlbnQgPT4KICBlID0+Ck1vdmVFdmVudChldmVudCwgcHJldkV2ZW50KQpXYWxrVXAoZSkKZSA9Pgp6ID0+CiAgcCA9PgogIGUgPT4KZSA9PgogIGUgPT4KdiA9PgpsID0+CiAgZSA9PgooKSA9PgooZSwgZGVwdGgpID0+CmNsYXNzZXMgPT4KZSA9PgplID0+CihhLCBiKSA9PgooYSwgYikgPT4KTm9kZQogIGUgPT4KKHAsIGQsIHNldCwgc3RvcCkgPT4KICBlID0+CiAgZSA9PgpUb3VjaEV2ZW50KGV2ZW50KQogIGUgPT4KKHAsIGkpID0+CihhLCBiKSA9PgpzaXplID0+CiAgYm9yZGVyID0+CiAgciA9PgogIG1vZChuLCBtKQooKSA9PgoocG9zLCBsYXN0LCBmaXJzdCkgPT4KICBjYW5jZWwoKQogIC5vbmNvbnRleHRtZW51ID0gZnVuY3Rpb24oZSkKICAucHJvY2Vzc0V2ZW50cyA9IGZ1bmN0aW9uIGV2ZW50TG9vcCgpCmV2ZW50ID0+CiAgZSA9PgogIG9uUnVudGltZUluaXRpYWxpemVkOiAoKSA9PgogIHByaW50OiB0eHQgPT4AAAAAAAAAAGYCAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					4302,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/main.js",
						"symkeys":
						[
							[
								9067,
								9072
							],
							[
								9254,
								9260
							],
							[
								9313,
								9318
							],
							[
								9371,
								9375
							],
							[
								9449,
								9453
							],
							[
								9475,
								9484
							],
							[
								10143,
								10162
							],
							[
								10261,
								10265
							],
							[
								10437,
								10444
							],
							[
								10475,
								10485
							],
							[
								10742,
								10766
							],
							[
								10807,
								10828
							],
							[
								10830,
								10835
							],
							[
								10843,
								10848
							],
							[
								10870,
								10905
							],
							[
								11106,
								11111
							],
							[
								11298,
								11319
							],
							[
								11452,
								11470
							],
							[
								12149,
								12174
							],
							[
								12220,
								12238
							],
							[
								13215,
								13242
							],
							[
								13597,
								13622
							],
							[
								13997,
								14031
							],
							[
								14548,
								14580
							],
							[
								14755,
								14765
							],
							[
								14898,
								14908
							],
							[
								15027,
								15037
							],
							[
								15204,
								15228
							],
							[
								15287,
								15336
							],
							[
								15577,
								15599
							],
							[
								15606,
								15630
							],
							[
								15638,
								15667
							],
							[
								16482,
								16534
							],
							[
								16987,
								16991
							],
							[
								17018,
								17023
							],
							[
								17458,
								17544
							],
							[
								17742,
								17764
							],
							[
								18277,
								18309
							],
							[
								18637,
								18671
							],
							[
								18786,
								18791
							],
							[
								18816,
								18852
							],
							[
								19041,
								19066
							],
							[
								19257,
								19282
							],
							[
								19337,
								19341
							],
							[
								19396,
								19400
							],
							[
								19842,
								19859
							],
							[
								20048,
								20063
							],
							[
								20186,
								20203
							],
							[
								20255,
								20259
							],
							[
								20304,
								20308
							],
							[
								20339,
								20343
							],
							[
								20381,
								20386
							],
							[
								20473,
								20492
							],
							[
								20665,
								20700
							],
							[
								20738,
								20746
							],
							[
								20815,
								20819
							],
							[
								21382,
								21386
							],
							[
								21445,
								21449
							],
							[
								22018,
								22024
							],
							[
								22199,
								22203
							],
							[
								22224,
								22228
							],
							[
								22263,
								22267
							],
							[
								22527,
								22540
							],
							[
								22663,
								22667
							],
							[
								22861,
								22877
							],
							[
								23143,
								23148
							],
							[
								23261,
								23270
							],
							[
								23342,
								23351
							],
							[
								23428,
								23437
							],
							[
								24077,
								24099
							],
							[
								24276,
								24336
							],
							[
								24585,
								24605
							],
							[
								24616,
								24625
							],
							[
								24680,
								24692
							],
							[
								24737,
								24744
							],
							[
								24830,
								24861
							],
							[
								25183,
								25216
							],
							[
								26255,
								26308
							],
							[
								26358,
								26367
							],
							[
								26442,
								26485
							],
							[
								26564,
								26568
							],
							[
								26697,
								26704
							],
							[
								26731,
								26738
							],
							[
								26816,
								26837
							],
							[
								27092,
								27134
							],
							[
								27257,
								27278
							],
							[
								27513,
								27558
							],
							[
								27703,
								27710
							],
							[
								27752,
								27822
							],
							[
								28259,
								28284
							],
							[
								28307,
								28311
							],
							[
								28331,
								28344
							],
							[
								28460,
								28532
							],
							[
								28751,
								28758
							],
							[
								28841,
								28850
							],
							[
								29282,
								29347
							],
							[
								29434,
								29460
							],
							[
								29673,
								29698
							],
							[
								29721,
								29725
							],
							[
								29745,
								29758
							],
							[
								29812,
								29863
							],
							[
								29865,
								29871
							],
							[
								29880,
								29882
							],
							[
								29907,
								29914
							],
							[
								29938,
								30027
							],
							[
								30034,
								30057
							],
							[
								30120,
								30147
							],
							[
								30156,
								30176
							],
							[
								30311,
								30315
							],
							[
								30485,
								30504
							],
							[
								30588,
								30607
							],
							[
								30700,
								30715
							],
							[
								31575,
								31590
							],
							[
								31676,
								31691
							],
							[
								32348,
								32389
							],
							[
								32589,
								32593
							],
							[
								32623,
								32634
							],
							[
								32717,
								32737
							],
							[
								32942,
								32966
							],
							[
								33024,
								33064
							],
							[
								33436,
								33455
							],
							[
								33506,
								33525
							],
							[
								34387,
								34415
							],
							[
								34615,
								34627
							],
							[
								34658,
								34670
							],
							[
								35181,
								35229
							],
							[
								35457,
								35463
							],
							[
								35608,
								35613
							],
							[
								35639,
								35646
							],
							[
								35704,
								35709
							],
							[
								35737,
								35744
							],
							[
								36177,
								36193
							],
							[
								36279,
								36283
							],
							[
								36576,
								36584
							],
							[
								36935,
								36940
							],
							[
								36981,
								36989
							],
							[
								37129,
								37134
							],
							[
								37221,
								37237
							],
							[
								38468,
								38473
							],
							[
								38932,
								38983
							],
							[
								39384,
								39389
							],
							[
								39408,
								39413
							],
							[
								39719,
								39736
							],
							[
								39895,
								39901
							],
							[
								40014,
								40034
							],
							[
								40110,
								40140
							],
							[
								40316,
								40324
							],
							[
								40560,
								40577
							],
							[
								40673,
								40677
							],
							[
								40694,
								40701
							],
							[
								40801,
								40808
							],
							[
								40858,
								40870
							],
							[
								40939,
								40946
							],
							[
								40996,
								41008
							],
							[
								41077,
								41085
							],
							[
								41136,
								41149
							],
							[
								41219,
								41227
							],
							[
								41278,
								41291
							],
							[
								41361,
								41369
							],
							[
								41420,
								41433
							],
							[
								41503,
								41511
							],
							[
								41562,
								41575
							],
							[
								41645,
								41656
							],
							[
								41710,
								41726
							],
							[
								41799,
								41811
							],
							[
								41866,
								41883
							],
							[
								41949,
								41958
							],
							[
								42080,
								42084
							],
							[
								42563,
								42571
							],
							[
								42575,
								42585
							],
							[
								42668,
								42709
							],
							[
								43332,
								43355
							],
							[
								43944,
								43948
							],
							[
								44092,
								44096
							],
							[
								44608,
								44612
							],
							[
								44627,
								44657
							],
							[
								44705,
								44709
							],
							[
								44723,
								44753
							],
							[
								44807,
								44811
							],
							[
								44830,
								44854
							],
							[
								44919,
								44923
							],
							[
								44963,
								44987
							],
							[
								45105,
								45109
							],
							[
								45135,
								45139
							],
							[
								45209,
								45213
							],
							[
								45239,
								45243
							],
							[
								45336,
								45340
							],
							[
								45698,
								45733
							],
							[
								45844,
								45857
							],
							[
								46298,
								46338
							],
							[
								46384,
								46393
							],
							[
								46409,
								46420
							],
							[
								46512,
								46523
							],
							[
								46569,
								46625
							],
							[
								46632,
								46638
							],
							[
								46720,
								46740
							],
							[
								46787,
								46845
							],
							[
								46852,
								46858
							],
							[
								46901,
								46908
							],
							[
								46925,
								46946
							],
							[
								47008,
								47019
							],
							[
								47249,
								47267
							],
							[
								47307,
								47313
							],
							[
								47346,
								47374
							],
							[
								47412,
								47434
							],
							[
								47519,
								47543
							],
							[
								47544,
								47558
							],
							[
								48721,
								48754
							],
							[
								48763,
								48764
							],
							[
								48816,
								48840
							],
							[
								48881,
								48912
							],
							[
								48921,
								48922
							],
							[
								49167,
								49210
							],
							[
								49524,
								49551
							],
							[
								49844,
								49855
							],
							[
								50061,
								50077
							],
							[
								50391,
								50411
							],
							[
								51296,
								51343
							],
							[
								51726,
								51741
							],
							[
								51958,
								51971
							],
							[
								52248,
								52261
							],
							[
								52467,
								52480
							],
							[
								52699,
								52705
							],
							[
								52755,
								52776
							],
							[
								56571,
								56582
							],
							[
								57418,
								57422
							],
							[
								57836,
								57841
							],
							[
								57990,
								58004
							],
							[
								58022,
								58027
							],
							[
								58140,
								58161
							],
							[
								58219,
								58224
							],
							[
								58332,
								58353
							],
							[
								58578,
								58591
							],
							[
								58592,
								58619
							],
							[
								58736,
								58759
							],
							[
								59041,
								59056
							],
							[
								59081,
								59098
							],
							[
								59165,
								59173
							],
							[
								59246,
								59251
							],
							[
								59357,
								59381
							],
							[
								60142,
								60149
							],
							[
								60179,
								60186
							],
							[
								60508,
								60535
							],
							[
								60631,
								60635
							],
							[
								61000,
								61036
							],
							[
								61130,
								61139
							],
							[
								61174,
								61185
							],
							[
								61237,
								61251
							],
							[
								61765,
								61769
							],
							[
								62444,
								62452
							],
							[
								62568,
								62576
							],
							[
								62696,
								62704
							],
							[
								62819,
								62827
							],
							[
								62884,
								62892
							],
							[
								63364,
								63372
							],
							[
								63557,
								63604
							],
							[
								63750,
								63763
							],
							[
								63926,
								63944
							],
							[
								64112,
								64116
							],
							[
								64188,
								64195
							],
							[
								64443,
								64462
							],
							[
								64494,
								64512
							],
							[
								65038,
								65058
							],
							[
								65308,
								65325
							],
							[
								65533,
								65551
							],
							[
								65828,
								65851
							],
							[
								66302,
								66319
							],
							[
								66411,
								66419
							],
							[
								66638,
								66652
							],
							[
								66790,
								66830
							],
							[
								66895,
								66909
							],
							[
								67484,
								67500
							],
							[
								67538,
								67613
							],
							[
								67848,
								67869
							],
							[
								67973,
								67977
							],
							[
								68456,
								68470
							],
							[
								68760,
								68764
							],
							[
								68831,
								68835
							],
							[
								69112,
								69129
							],
							[
								69297,
								69305
							],
							[
								69498,
								69502
							],
							[
								69598,
								69613
							],
							[
								69859,
								69863
							],
							[
								70070,
								70087
							],
							[
								70179,
								70194
							],
							[
								70987,
								70999
							],
							[
								71006,
								71019
							],
							[
								71057,
								71072
							],
							[
								71176,
								71196
							],
							[
								71376,
								71403
							],
							[
								71457,
								71469
							],
							[
								71587,
								71595
							],
							[
								72044,
								72052
							],
							[
								72874,
								72883
							],
							[
								73118,
								73125
							],
							[
								73224,
								73244
							],
							[
								73431,
								73451
							],
							[
								73812,
								73822
							],
							[
								74625,
								74629
							],
							[
								74704,
								74708
							],
							[
								74722,
								74736
							],
							[
								74993,
								75000
							],
							[
								77343,
								77375
							],
							[
								77772,
								77776
							],
							[
								77982,
								77986
							],
							[
								78054,
								78058
							],
							[
								78142,
								78149
							],
							[
								78228,
								78232
							],
							[
								79337,
								79383
							],
							[
								79813,
								79822
							],
							[
								80924,
								80939
							],
							[
								81153,
								81169
							],
							[
								81330,
								81346
							],
							[
								81521,
								81537
							],
							[
								82560,
								82578
							],
							[
								82776,
								82799
							],
							[
								82841,
								82856
							],
							[
								83212,
								83227
							],
							[
								83640,
								83660
							],
							[
								84113,
								84131
							],
							[
								84842,
								84851
							],
							[
								84894,
								84898
							],
							[
								85110,
								85148
							],
							[
								85323,
								85346
							],
							[
								85480,
								85485
							],
							[
								85524,
								85534
							],
							[
								85693,
								85697
							],
							[
								85834,
								85838
							],
							[
								85877,
								85882
							],
							[
								86287,
								86291
							],
							[
								86325,
								86339
							],
							[
								86343,
								86357
							],
							[
								86364,
								86368
							],
							[
								86389,
								86404
							],
							[
								86435,
								86449
							],
							[
								86556,
								86567
							],
							[
								86612,
								86617
							],
							[
								86672,
								86677
							],
							[
								87127,
								87137
							],
							[
								87228,
								87238
							],
							[
								87251,
								87255
							],
							[
								87429,
								87433
							],
							[
								87594,
								87615
							],
							[
								88685,
								88689
							],
							[
								88796,
								88800
							],
							[
								89089,
								89117
							],
							[
								89568,
								89572
							],
							[
								90028,
								90037
							],
							[
								90121,
								90130
							],
							[
								90235,
								90243
							],
							[
								90750,
								90759
							],
							[
								90908,
								90912
							],
							[
								90977,
								91003
							],
							[
								91643,
								91648
							],
							[
								91923,
								91945
							],
							[
								92951,
								92972
							],
							[
								93177,
								93205
							],
							[
								93572,
								93615
							],
							[
								94940,
								94949
							],
							[
								95729,
								95733
							],
							[
								96468,
								96495
							],
							[
								96618,
								96631
							]
						],
						"symlist":
						[
							"() =>",
							"res =>",
							"() =>",
							"r =>",
							"r =>",
							"entries()",
							"GetProject = arg =>",
							"p =>",
							" () =>",
							" value =>",
							"add = (arr, ...items) =>",
							"useSlot = (arr, i) =>",
							"() =>",
							" v =>",
							"trklGetSet = (get, set) => value =>",
							"() =>",
							"(parent, delegate) =>",
							"append_to(elem, p)",
							"function DrawSVG(...args)",
							"append_to(elem, p)",
							" function adjustViewBox(e)",
							"function calcViewBox(box)",
							"function setViewBox(svgOwner, box)",
							"ElementToXML = (e, predicate) =>",
							" (v, k) =>",
							" (v, k) =>",
							" (v, k) =>",
							"async readFile(filename)",
							"async writeFile(filename, data, overwrite = true)",
							"async exists(filename)",
							"async realpath(filename)",
							"async function LoadFile(file)",
							"async function SaveFile(filename, data, contentType)",
							"s =>",
							"() =>",
							"async function SaveSVG(filename, layers = [1, 16, 20, 21, 22, 23, 25, 27, 47, 48, 51])",
							"predicate = element =>",
							"async function LoadSVG(filename)",
							"async function LoadImage(filename)",
							"() =>",
							" function RenderComponent(component)",
							"ModifyColors = fn => e =>",
							"FindLayer = name_or_id =>",
							"n =>",
							"l =>",
							"(id = '#geom') =>",
							"(props = {}) =>",
							"maxZIndex = () =>",
							"e =>",
							"z =>",
							"z =>",
							"() =>",
							"randomColor = () =>",
							"function DrawArc(start, end, angle)",
							"props =>",
							"p =>",
							"a =>",
							"m =>",
							"hex =>",
							"p =>",
							"p =>",
							"p =>",
							"({ x, y }) =>",
							"a =>",
							"({ x, y }, i) =>",
							" e =>",
							"(l, i) =>",
							"(p, i) =>",
							"(p, i) =>",
							"add = (level, item) =>",
							" function RecurseBinaryNode(node, parent = null, depth = 0)",
							"(nodes, i, level) =>",
							"fx = j =>",
							"(node, j) =>",
							"item =>",
							" function DrawNode(x, y, node)",
							" function DrawEdge(item, parent)",
							"function GetPaths(query, parent = project.svgElement)",
							"(a, e) =>",
							"function PathToPolylines(path, step = 0.01)",
							"p =>",
							"poly =>",
							"poly =>",
							" (p, d, set, stop) =>",
							"function PathToPolyline(path, step = 0.01)",
							" (p, d, set, stop) =>",
							"function PathsToPolylines(paths, step = 0.01)",
							"path =>",
							"function OutsetPath(path, offset, miterLimit = 2, arcTolerance = 0.01)",
							".toPolylines = function()",
							"p =>",
							"({ X, Y }) =>",
							"function OutsetPaths(paths, offset, miterLimit = 2, arcTolerance = 0.25)",
							"path =>",
							"(a, p) =>",
							"function ClipPath(path, clip, mode = ClipperLib.ClipType.ctUnion)",
							"add = (p, clip = false) =>",
							".toPolylines = function()",
							"p =>",
							"({ X, Y }) =>",
							"function saveItemStates(itemList, get = item => is.",
							"(item.",
							"))",
							"item =>",
							"function restoreItemStates(itemStates, /* prettier-ignore */ set = (item, value) => item.",
							"(value ? 'yes' : 'no'))",
							"function EagleMaps(project)",
							"transformPath = p =>",
							"e =>",
							"dom2eagle = node =>",
							"eagle2dom = elem =>",
							"path2dom = p =>",
							"(key, value) =>",
							"(key, value) =>",
							"function* PackageNames(doc = project.doc)",
							"e =>",
							"([e, b]) =>",
							"([e, w, h, m, v]) =>",
							"({ index, ...match }) =>",
							" ({ s, v, indexes }, match, i) =>",
							"([token, index]) =>",
							"([token, index]) =>",
							"function NextDocument(n = 1)",
							" (idx, i) =>",
							" (idx, i) =>",
							"async function LoadDocument(project, parentElem)",
							"err =>",
							"() =>",
							" ent =>",
							"() =>",
							" ent =>",
							"renamePackages()",
							"a =>",
							"value =>",
							"() =>",
							"layer =>",
							"() =>",
							"fn = function(v)",
							"() =>",
							".makeGroup = function({ transform, ...props } = {})",
							"id =>",
							"() =>",
							" function xx()",
							" () =>",
							"function (transform)",
							" (tag, attr, children = []) =>",
							"value =>",
							"setRect = rect =>",
							"k =>",
							"elem =>",
							"get x()",
							"set x(value)",
							"get y()",
							"set y(value)",
							"get x1()",
							"set x1(value)",
							"get y1()",
							"set y1(value)",
							"get x2()",
							"set x2(value)",
							"get y2()",
							"set y2(value)",
							"get width()",
							"set width(value)",
							"get height()",
							"set height(value)",
							" () =>",
							"Rect",
							" a =>",
							" err =>",
							"async function ChooseDocument(project, i)",
							"GenerateVoronoi = () =>",
							"Rect",
							"p =>",
							"e =>",
							"({ lSite, rSite, ...edge }) =>",
							"e =>",
							"({ lSite, rSite, ...edge }) =>",
							"e =>",
							"({ va, vb, ...edge }) =>",
							"v =>",
							"add = (arr, ...items) =>",
							"l =>",
							"t =>",
							"l =>",
							"t =>",
							"p =>",
							" (acc, { site, halfedges }) =>",
							"({ site }) =>",
							"function PackageChildren(element, layer)",
							"(c, i) =>",
							"([i, p]) =>",
							"([i, e]) =>",
							"function ElementChildren(layer = 'tPlace', rfn = ent => ",
							"(ent))",
							"([name, element]) =>",
							"function ElementGeometries(layer = 'tPlace', rfn = ent => ",
							"(ent))",
							" ent =>",
							"([name, children]) =>",
							"([i, e]) =>",
							"([name, lines]) =>",
							"pts =>",
							"([name, lines, polygons]) =>",
							"function NewPath(path)",
							"MakeFitAction = index =>",
							"async event =>",
							"function ZoomFactor(val = config.",
							")",
							"function ZoomLog(factor)",
							"function AdjustZoom(l = config.",
							")",
							"CreateGrblSocket = async (port = 'tnt1') =>",
							"function HandleMessage(msg)",
							"pointStr =>",
							"socketFn = () =>",
							".send = (...args) =>",
							"AuthorizationDialog = ({ onAuth, ...props }) =>",
							"onSubmit: () =>",
							"onInput: e =>",
							"onInput: e =>",
							"onClick: e =>",
							"arg =>",
							".onload = async () =>",
							"response =>",
							"e =>",
							" v =>",
							"TestArc: () =>",
							"() =>",
							"async (push, stop) =>",
							"() =>",
							"async (push, stop) =>",
							" target =>",
							" (key, modifiers = 0) =>",
							".focusSearch = state =>",
							"children: () =>",
							"geometries: () =>",
							"value =>",
							"() =>",
							"testComponent = props =>",
							"resp =>",
							"json =>",
							" function File(obj, i)",
							"File",
							"File.prototype.toString = function()",
							"(a, b) =>",
							"(obj, i) =>",
							"(acc, file) =>",
							"i =>",
							"value =>",
							"value =>",
							"value =>",
							"value =>",
							"value =>",
							"value =>",
							"updateIfChanged = (trkl, newValue, callback) =>",
							" (elem, i) =>",
							"changeInput = e =>",
							"p =>",
							" arg =>",
							"Consumer = props =>",
							"async function* ()",
							"log(type, time, msg)",
							"Logger = props =>",
							"async function* ()",
							"([type, d, t, m], i) =>",
							"Dumper = props =>",
							"value =>",
							"([k, v], i) =>",
							"Commander = ({ onCommand, ...props }) =>",
							"handler = e =>",
							"toggle = trkl =>",
							"Layer = ({ title, name, label, i, color, element, className, ...props }) =>",
							"setVisible = value =>",
							"e =>",
							" e =>",
							"l =>",
							"l =>",
							" (item, value) =>",
							" item =>",
							"l =>",
							"([l, state]) =>",
							"e =>",
							"onMouseMove: e =>",
							"onMouseUp: e =>",
							"DocumentList",
							"constructor()",
							"(push, stop) =>",
							"add(name, component)",
							"addEntry([name, component])",
							"remove(name)",
							"update()",
							"fn: e =>",
							"fn: () =>",
							"open =>",
							" props =>",
							" props =>",
							"async e =>",
							"i =>",
							"i =>",
							"({ coord }) =>",
							"side =>",
							"create: (project, props = {}) =>",
							"a =>",
							"e =>",
							"e =>",
							"name =>",
							"e =>",
							" function makeLayerName(name, side)",
							"fn: () =>",
							"onChange(event)",
							" props =>",
							" props =>",
							" props =>",
							"async (e, p, i) =>",
							"makeSortCompare: key =>",
							" function(a, b)",
							" function(a, b)",
							"onCommand: cmdStr =>",
							"handleChange: e =>",
							" event =>",
							"e =>",
							" function MoveEvent(event, prevEvent)",
							" function* WalkUp(e)",
							" e =>",
							" z =>",
							"p =>",
							"e =>",
							" e =>",
							"e =>",
							" v =>",
							" l =>",
							"e =>",
							" () =>",
							" (e, depth) =>",
							" classes =>",
							" e =>",
							" e =>",
							" (a, b) =>",
							" (a, b) =>",
							"Node",
							"e =>",
							" (p, d, set, stop) =>",
							"e =>",
							"e =>",
							" function TouchEvent(event)",
							"e =>",
							"(p, i) =>",
							"(a, b) =>",
							" size =>",
							"border =>",
							"r =>",
							" function mod(n, m)",
							"() =>",
							" (pos, last, first) =>",
							" function cancel()",
							".oncontextmenu = function(e)",
							".processEvents = async function eventLoop()",
							" event =>",
							"e =>",
							"onRuntimeInitialized: () =>",
							"print: txt =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABmAgAARGlySXRlcmF0b3IoLi4uYXJncykKKCkgPT4KUmVjdXJzaXZlRGlySXRlcmF0b3IoZGlyLCBwcmVkID0gKGVudHJ5LCBmaWxlLCBkaXIsIGRlcHRoKSA9PiB0cnVlLCBkZXB0aCA9IDApCiAgcHJlZCA9IChlbnRyeSwgZmlsZSwgZGlyLCBkZXB0aCkgPT4KUmVhZERpclJlY3Vyc2l2ZShkaXIsIG1heERlcHRoID0gSW5maW5pdHkpClBhdGgKICBjb25zdHJ1Y3RvcihzdHIpCiAgYXNzaWduKHN0cikKICBhcHBlbmQoc3RyKQogIGNvbmNhdChzdHIpCiAgY2xlYXIoKQogIHJlbW92ZUZpbGVuYW1lKCkKICByZXBsYWNlRmlsZW5hbWUoZmlsZW5hbWUpCiAgcmVwbGFjZUV4dGVuc2lvbihleHQpCiAgZ2V0IGZpbGVuYW1lKCkKICBnZXQgc3RlbSgpCiAgZ2V0IGV4dGVuc2lvbigpCiAgZ2V0IGVtcHR5KCkKICBnZXQgcGFyZW50KCkKICBnZXQgaXNBYnNvbHV0ZSgpCiAgZ2V0IGlzUmVsYXRpdmUoKQogIHJlbGF0aXZlVG8odG8pCiAgY29tcGFyZShvdGhlcikKUGF0aAogIG9wZXJhdG9yc19zZXQocHJvdG8sIC4uLm9wX2xpc3QpClBhdGgKJy8nOiAoYSwgYikgPT4KJy89JzogKGEsIGIpID0+Cic9PSc6IChhLCBiKSA9PgonPCc6IChhLCBiKSA9PgonKz0nOiAoYSwgYikgPT4KICBwb3MoYSkAAAAAAAAAAJQWAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					4303,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACUFgAAKCkgPT4KICByZXMgPT4KKCkgPT4KICByID0+CiAgciA9PgogIGVudHJpZXMoKQpHZXRQcm9qZWN0ID0gYXJnID0+CiAgcCA9PgooKSA9Pgp2YWx1ZSA9PgogIGFkZCA9IChhcnIsIC4uLml0ZW1zKSA9PgogIHVzZVNsb3QgPSAoYXJyLCBpKSA9PgooKSA9Pgp2ID0+CiAgdHJrbEdldFNldCA9IChnZXQsIHNldCkgPT4gdmFsdWUgPT4KKCkgPT4KKHBhcmVudCwgZGVsZWdhdGUpID0+CiAgYXBwZW5kX3RvKGVsZW0sIHApCkRyYXdTVkcoLi4uYXJncykKICBhcHBlbmRfdG8oZWxlbSwgcCkKICBhZGp1c3RWaWV3Qm94KGUpCiAgY2FsY1ZpZXdCb3goYm94KQogIHNldFZpZXdCb3goc3ZnT3duZXIsIGJveCkKRWxlbWVudFRvWE1MID0gKGUsIHByZWRpY2F0ZSkgPT4KKHYsIGspID0+Cih2LCBrKSA9PgoodiwgaykgPT4KICByZWFkRmlsZShmaWxlbmFtZSkKICB3cml0ZUZpbGUoZmlsZW5hbWUsIGRhdGEsIG92ZXJ3cml0ZSA9IHRydWUpCiAgZXhpc3RzKGZpbGVuYW1lKQogIHJlYWxwYXRoKGZpbGVuYW1lKQpMb2FkRmlsZShmaWxlKQpTYXZlRmlsZShmaWxlbmFtZSwgZGF0YSwgY29udGVudFR5cGUpCiAgcyA9PgooKSA9PgpTYXZlU1ZHKGZpbGVuYW1lLCBsYXllcnMgPSBbMSwgMTYsIDIwLCAyMSwgMjIsIDIzLCAyNSwgMjcsIDQ3LCA0OCwgNTFdKQogIHByZWRpY2F0ZSA9IGVsZW1lbnQgPT4KTG9hZFNWRyhmaWxlbmFtZSkKTG9hZEltYWdlKGZpbGVuYW1lKQooKSA9PgpSZW5kZXJDb21wb25lbnQoY29tcG9uZW50KQpNb2RpZnlDb2xvcnMgPSBmbiA9PiBlID0+CkZpbmRMYXllciA9IG5hbWVfb3JfaWQgPT4KICBuID0+CiAgbCA9PgooaWQgPSAnI2dlb20nKSA9PgoocHJvcHMgPSB7fSkgPT4KICBtYXhaSW5kZXggPSAoKSA9PgogIGUgPT4KICB6ID0+CiAgeiA9PgooKSA9PgogIHJhbmRvbUNvbG9yID0gKCkgPT4KRHJhd0FyYyhzdGFydCwgZW5kLCBhbmdsZSkKICBwcm9wcyA9PgogIHAgPT4KICBhID0+CiAgbSA9PgogIGhleCA9PgogIHAgPT4KICBwID0+CiAgcCA9PgooeyB4LCB5IH0pID0+CiAgYSA9PgooeyB4LCB5IH0sIGkpID0+CmUgPT4KKGwsIGkpID0+CihwLCBpKSA9PgoocCwgaSkgPT4KICBhZGQgPSAobGV2ZWwsIGl0ZW0pID0+ClJlY3Vyc2VCaW5hcnlOb2RlKG5vZGUsIHBhcmVudCA9IG51bGwsIGRlcHRoID0gMCkKKG5vZGVzLCBpLCBsZXZlbCkgPT4KICBmeCA9IGogPT4KKG5vZGUsIGopID0+CiAgaXRlbSA9PgpEcmF3Tm9kZSh4LCB5LCBub2RlKQpEcmF3RWRnZShpdGVtLCBwYXJlbnQpCkdldFBhdGhzKHF1ZXJ5LCBwYXJlbnQgPSBwcm9qZWN0LnN2Z0VsZW1lbnQpCihhLCBlKSA9PgpQYXRoVG9Qb2x5bGluZXMocGF0aCwgc3RlcCA9IDAuMDEpCiAgcCA9PgogIHBvbHkgPT4KICBwb2x5ID0+CihwLCBkLCBzZXQsIHN0b3ApID0+ClBhdGhUb1BvbHlsaW5lKHBhdGgsIHN0ZXAgPSAwLjAxKQoocCwgZCwgc2V0LCBzdG9wKSA9PgpQYXRoc1RvUG9seWxpbmVzKHBhdGhzLCBzdGVwID0gMC4wMSkKICBwYXRoID0+Ck91dHNldFBhdGgocGF0aCwgb2Zmc2V0LCBtaXRlckxpbWl0ID0gMiwgYXJjVG9sZXJhbmNlID0gMC4wMSkKICAudG9Qb2x5bGluZXMgPSBmdW5jdGlvbigpCiAgcCA9PgooeyBYLCBZIH0pID0+Ck91dHNldFBhdGhzKHBhdGhzLCBvZmZzZXQsIG1pdGVyTGltaXQgPSAyLCBhcmNUb2xlcmFuY2UgPSAwLjI1KQogIHBhdGggPT4KKGEsIHApID0+CkNsaXBQYXRoKHBhdGgsIGNsaXAsIG1vZGUgPSBDbGlwcGVyTGliLkNsaXBUeXBlLmN0VW5pb24pCiAgYWRkID0gKHAsIGNsaXAgPSBmYWxzZSkgPT4KICAudG9Qb2x5bGluZXMgPSBmdW5jdGlvbigpCiAgcCA9PgooeyBYLCBZIH0pID0+CiAgc2F2ZUl0ZW1TdGF0ZXMoaXRlbUxpc3QsIGdldCA9IGl0ZW0gPT4gaXMuCihpdGVtLgopKQogIGl0ZW0gPT4KICByZXN0b3JlSXRlbVN0YXRlcyhpdGVtU3RhdGVzLCAvKnByZXR0aWVyLWlnbm9yZSAqLyBzZXQgPSAoaXRlbSwgdmFsdWUpID0+IGl0ZW0uCih2YWx1ZSA/ICd5ZXMnIDogJ25vJykpCkVhZ2xlTWFwcyhwcm9qZWN0KQogIHRyYW5zZm9ybVBhdGggPSBwID0+CiAgZSA9PgogIGRvbTJlYWdsZSA9IG5vZGUgPT4KICBlYWdsZTJkb20gPSBlbGVtID0+CiAgcGF0aDJkb20gPSBwID0+CihrZXksIHZhbHVlKSA9Pgooa2V5LCB2YWx1ZSkgPT4KUGFja2FnZU5hbWVzKGRvYyA9IHByb2plY3QuZG9jKQogIGUgPT4KKFtlLCBiXSkgPT4KKFtlLCB3LCBoLCBtLCB2XSkgPT4KKHsgaW5kZXgsIC4uLm1hdGNoIH0pID0+Cih7IHMsIHYsIGluZGV4ZXMgfSwgbWF0Y2gsIGkpID0+CihbdG9rZW4sIGluZGV4XSkgPT4KKFt0b2tlbiwgaW5kZXhdKSA9PgpOZXh0RG9jdW1lbnQobiA9IDEpCihpZHgsIGkpID0+CihpZHgsIGkpID0+CkxvYWREb2N1bWVudChwcm9qZWN0LCBwYXJlbnRFbGVtKQogIGVyciA9PgooKSA9PgplbnQgPT4KKCkgPT4KZW50ID0+CiAgcmVuYW1lUGFja2FnZXMoKQogIGEgPT4KICB2YWx1ZSA9PgooKSA9PgogIGxheWVyID0+CigpID0+CiAgZm4gPSBmdW5jdGlvbih2KQooKSA9PgogIC5tYWtlR3JvdXAgPSBmdW5jdGlvbih7IHRyYW5zZm9ybSwgLi4ucHJvcHMgfSA9IHt9KQogIGlkID0+CigpID0+CiAgeHgoKQooKSA9PgoodHJhbnNmb3JtKQoodGFnLCBhdHRyLCBjaGlsZHJlbiA9IFtdKSA9PgogIHZhbHVlID0+CiAgc2V0UmVjdCA9IHJlY3QgPT4KICBrID0+CiAgZWxlbSA9PgogIGdldCB4KCkKICBzZXQgeCh2YWx1ZSkKICBnZXQgeSgpCiAgc2V0IHkodmFsdWUpCiAgZ2V0IHgxKCkKICBzZXQgeDEodmFsdWUpCiAgZ2V0IHkxKCkKICBzZXQgeTEodmFsdWUpCiAgZ2V0IHgyKCkKICBzZXQgeDIodmFsdWUpCiAgZ2V0IHkyKCkKICBzZXQgeTIodmFsdWUpCiAgZ2V0IHdpZHRoKCkKICBzZXQgd2lkdGgodmFsdWUpCiAgZ2V0IGhlaWdodCgpCiAgc2V0IGhlaWdodCh2YWx1ZSkKKCkgPT4KUmVjdAphID0+CmVyciA9PgpDaG9vc2VEb2N1bWVudChwcm9qZWN0LCBpKQpHZW5lcmF0ZVZvcm9ub2kgPSAoKSA9PgpSZWN0CiAgcCA9PgogIGUgPT4KKHsgbFNpdGUsIHJTaXRlLCAuLi5lZGdlIH0pID0+CiAgZSA9PgooeyBsU2l0ZSwgclNpdGUsIC4uLmVkZ2UgfSkgPT4KICBlID0+Cih7IHZhLCB2YiwgLi4uZWRnZSB9KSA9PgogIHYgPT4KICBhZGQgPSAoYXJyLCAuLi5pdGVtcykgPT4KICBsID0+CiAgdCA9PgogIGwgPT4KICB0ID0+CiAgcCA9PgooYWNjLCB7IHNpdGUsIGhhbGZlZGdlcyB9KSA9PgooeyBzaXRlIH0pID0+ClBhY2thZ2VDaGlsZHJlbihlbGVtZW50LCBsYXllcikKKGMsIGkpID0+CihbaSwgcF0pID0+CihbaSwgZV0pID0+CkVsZW1lbnRDaGlsZHJlbihsYXllciA9ICd0UGxhY2UnLCByZm4gPSBlbnQgPT4gCihlbnQpKQooW25hbWUsIGVsZW1lbnRdKSA9PgpFbGVtZW50R2VvbWV0cmllcyhsYXllciA9ICd0UGxhY2UnLCByZm4gPSBlbnQgPT4gCihlbnQpKQplbnQgPT4KKFtuYW1lLCBjaGlsZHJlbl0pID0+CihbaSwgZV0pID0+CihbbmFtZSwgbGluZXNdKSA9PgogIHB0cyA9PgooW25hbWUsIGxpbmVzLCBwb2x5Z29uc10pID0+Ck5ld1BhdGgocGF0aCkKTWFrZUZpdEFjdGlvbiA9IGluZGV4ID0+CiAgZXZlbnQgPT4KWm9vbUZhY3Rvcih2YWwgPSBjb25maWcuCikKWm9vbUxvZyhmYWN0b3IpCkFkanVzdFpvb20obCA9IGNvbmZpZy4KKQpDcmVhdGVHcmJsU29ja2V0ID0gKHBvcnQgPSAndG50MScpID0+CkhhbmRsZU1lc3NhZ2UobXNnKQogIHBvaW50U3RyID0+CiAgc29ja2V0Rm4gPSAoKSA9PgogIC5zZW5kID0gKC4uLmFyZ3MpID0+CkF1dGhvcml6YXRpb25EaWFsb2cgPSAoeyBvbkF1dGgsIC4uLnByb3BzIH0pID0+CiAgb25TdWJtaXQ6ICgpID0+CiAgb25JbnB1dDogZSA9PgogIG9uSW5wdXQ6IGUgPT4KICBvbkNsaWNrOiBlID0+CiAgYXJnID0+CiAgLm9ubG9hZCA9ICgpID0+CiAgcmVzcG9uc2UgPT4KICBlID0+CnYgPT4KVGVzdEFyYzogKCkgPT4KKCkgPT4KKHB1c2gsIHN0b3ApID0+CigpID0+CihwdXNoLCBzdG9wKSA9Pgp0YXJnZXQgPT4KKGtleSwgbW9kaWZpZXJzID0gMCkgPT4KICAuZm9jdXNTZWFyY2ggPSBzdGF0ZSA9PgogIGNoaWxkcmVuOiAoKSA9PgogIGdlb21ldHJpZXM6ICgpID0+CiAgdmFsdWUgPT4KKCkgPT4KICB0ZXN0Q29tcG9uZW50ID0gcHJvcHMgPT4KICByZXNwID0+CiAganNvbiA9PgpGaWxlKG9iaiwgaSkKRmlsZQpGaWxlLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkKKGEsIGIpID0+CihvYmosIGkpID0+CihhY2MsIGZpbGUpID0+CiAgaSA9PgogIHZhbHVlID0+CiAgdmFsdWUgPT4KICB2YWx1ZSA9PgogIHZhbHVlID0+CiAgdmFsdWUgPT4KICB2YWx1ZSA9PgogIHVwZGF0ZUlmQ2hhbmdlZCA9ICh0cmtsLCBuZXdWYWx1ZSwgY2FsbGJhY2spID0+CihlbGVtLCBpKSA9PgogIGNoYW5nZUlucHV0ID0gZSA9PgogIHAgPT4KYXJnID0+CkNvbnN1bWVyID0gcHJvcHMgPT4KKCkKICBsb2codHlwZSwgdGltZSwgbXNnKQpMb2dnZXIgPSBwcm9wcyA9PgooKQooW3R5cGUsIGQsIHQsIG1dLCBpKSA9PgpEdW1wZXIgPSBwcm9wcyA9PgogIHZhbHVlID0+Cihbaywgdl0sIGkpID0+CkNvbW1hbmRlciA9ICh7IG9uQ29tbWFuZCwgLi4ucHJvcHMgfSkgPT4KICBoYW5kbGVyID0gZSA9PgogIHRvZ2dsZSA9IHRya2wgPT4KTGF5ZXIgPSAoeyB0aXRsZSwgbmFtZSwgbGFiZWwsIGksIGNvbG9yLCBlbGVtZW50LCBjbGFzc05hbWUsIC4uLnByb3BzIH0pID0+CiAgc2V0VmlzaWJsZSA9IHZhbHVlID0+CiAgZSA9PgplID0+CiAgbCA9PgogIGwgPT4KKGl0ZW0sIHZhbHVlKSA9PgppdGVtID0+CiAgbCA9PgooW2wsIHN0YXRlXSkgPT4KICBlID0+CiAgb25Nb3VzZU1vdmU6IGUgPT4KICBvbk1vdXNlVXA6IGUgPT4KRG9jdW1lbnRMaXN0CiAgY29uc3RydWN0b3IoKQoocHVzaCwgc3RvcCkgPT4KICBhZGQobmFtZSwgY29tcG9uZW50KQogIGFkZEVudHJ5KFtuYW1lLCBjb21wb25lbnRdKQogIHJlbW92ZShuYW1lKQogIHVwZGF0ZSgpCiAgZm46IGUgPT4KICBmbjogKCkgPT4KICBvcGVuID0+CnByb3BzID0+CnByb3BzID0+CiAgZSA9PgogIGkgPT4KICBpID0+Cih7IGNvb3JkIH0pID0+CiAgc2lkZSA9PgogIGNyZWF0ZTogKHByb2plY3QsIHByb3BzID0ge30pID0+CiAgYSA9PgogIGUgPT4KICBlID0+CiAgbmFtZSA9PgogIGUgPT4KICBtYWtlTGF5ZXJOYW1lKG5hbWUsIHNpZGUpCiAgZm46ICgpID0+CiAgb25DaGFuZ2UoZXZlbnQpCnByb3BzID0+CnByb3BzID0+CnByb3BzID0+CihlLCBwLCBpKSA9PgogIG1ha2VTb3J0Q29tcGFyZToga2V5ID0+CmZ1bmN0aW9uKGEsIGIpCmZ1bmN0aW9uKGEsIGIpCiAgb25Db21tYW5kOiBjbWRTdHIgPT4KICBoYW5kbGVDaGFuZ2U6IGUgPT4KZXZlbnQgPT4KICBlID0+Ck1vdmVFdmVudChldmVudCwgcHJldkV2ZW50KQpXYWxrVXAoZSkKZSA9Pgp6ID0+CiAgcCA9PgogIGUgPT4KZSA9PgogIGUgPT4KdiA9PgpsID0+CiAgZSA9PgooKSA9PgooZSwgZGVwdGgpID0+CmNsYXNzZXMgPT4KZSA9PgplID0+CihhLCBiKSA9PgooYSwgYikgPT4KTm9kZQogIGUgPT4KKHAsIGQsIHNldCwgc3RvcCkgPT4KICBlID0+CiAgZSA9PgpUb3VjaEV2ZW50KGV2ZW50KQogIGUgPT4KKHAsIGkpID0+CihhLCBiKSA9PgpzaXplID0+CiAgYm9yZGVyID0+CiAgciA9PgogIG1vZChuLCBtKQooKSA9PgoocG9zLCBsYXN0LCBmaXJzdCkgPT4KICBjYW5jZWwoKQogIC5vbmNvbnRleHRtZW51ID0gZnVuY3Rpb24oZSkKICAucHJvY2Vzc0V2ZW50cyA9IGZ1bmN0aW9uIGV2ZW50TG9vcCgpCmV2ZW50ID0+CiAgZSA9PgogIG9uUnVudGltZUluaXRpYWxpemVkOiAoKSA9PgogIHByaW50OiB0eHQgPT4AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					4304,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/server.js",
						"symkeys":
						[
							[
								1422,
								1444
							],
							[
								1568,
								1594
							],
							[
								1764,
								1821
							],
							[
								2677,
								2759
							],
							[
								3065,
								3078
							],
							[
								3158,
								3171
							],
							[
								3446,
								3476
							],
							[
								3636,
								3673
							],
							[
								3968,
								4019
							],
							[
								4077,
								4092
							],
							[
								4122,
								4131
							],
							[
								4431,
								4438
							],
							[
								4569,
								4577
							],
							[
								4775,
								4815
							],
							[
								5138,
								5159
							],
							[
								5446,
								5451
							],
							[
								5827,
								5846
							],
							[
								6362,
								6381
							],
							[
								6728,
								6798
							],
							[
								7144,
								7193
							],
							[
								7592,
								7625
							],
							[
								8394,
								8402
							],
							[
								8449,
								8457
							],
							[
								8968,
								9004
							],
							[
								9460,
								9466
							],
							[
								9629,
								9634
							],
							[
								9911,
								9962
							],
							[
								10910,
								10959
							],
							[
								11098,
								11109
							],
							[
								11208,
								11219
							],
							[
								11797,
								11805
							],
							[
								11854,
								11862
							],
							[
								11913,
								11921
							],
							[
								12348,
								12355
							],
							[
								12496,
								12503
							],
							[
								12542,
								12559
							],
							[
								13075,
								13080
							],
							[
								13256,
								13291
							],
							[
								13434,
								13442
							],
							[
								13641,
								13697
							],
							[
								14060,
								14073
							],
							[
								14131,
								14156
							],
							[
								14413,
								14418
							],
							[
								14458,
								14464
							],
							[
								14621,
								14626
							],
							[
								14663,
								14669
							],
							[
								15179,
								15184
							],
							[
								15802,
								15821
							],
							[
								17323,
								17342
							],
							[
								18184,
								18213
							],
							[
								18450,
								18469
							],
							[
								18842,
								18856
							],
							[
								19213,
								19232
							],
							[
								19359,
								19386
							],
							[
								19560,
								19595
							],
							[
								19710,
								19714
							],
							[
								19810,
								19814
							],
							[
								19836,
								19845
							],
							[
								19990,
								19994
							],
							[
								20021,
								20026
							],
							[
								20054,
								20058
							],
							[
								20290,
								20343
							],
							[
								20704,
								20708
							],
							[
								20861,
								20875
							],
							[
								21255,
								21288
							],
							[
								21535,
								21541
							],
							[
								21601,
								21605
							],
							[
								21615,
								21619
							],
							[
								21638,
								21664
							],
							[
								21788,
								21794
							],
							[
								21956,
								21975
							],
							[
								22046,
								22053
							],
							[
								22110,
								22116
							],
							[
								22158,
								22176
							],
							[
								22426,
								22439
							],
							[
								22608,
								22621
							],
							[
								22853,
								22872
							],
							[
								23002,
								23010
							],
							[
								23031,
								23040
							],
							[
								23045,
								23054
							],
							[
								23086,
								23105
							],
							[
								23173,
								23184
							],
							[
								23222,
								23232
							],
							[
								23400,
								23411
							],
							[
								23459,
								23470
							],
							[
								23488,
								23498
							],
							[
								23502,
								23513
							],
							[
								23648,
								23667
							],
							[
								24013,
								24032
							],
							[
								24055,
								24066
							],
							[
								24375,
								24379
							],
							[
								25567,
								25574
							],
							[
								25606,
								25617
							],
							[
								25622,
								25636
							],
							[
								25738,
								25757
							],
							[
								26024,
								26033
							],
							[
								26055,
								26062
							],
							[
								26099,
								26107
							],
							[
								26157,
								26176
							],
							[
								26240,
								26259
							],
							[
								26342,
								26361
							],
							[
								26677,
								26684
							],
							[
								26970,
								26989
							],
							[
								27237,
								27262
							],
							[
								28501,
								28506
							],
							[
								28550,
								28558
							],
							[
								28916,
								28930
							],
							[
								28996,
								29002
							]
						],
						"symlist":
						[
							"rotateLeft = n => x =>",
							"function GetMimeType(file)",
							"function hashString(string, bits = 32, mask = 0xffffffff)",
							"function GetDirMap(dirs = mountDirs, pred = '.*\\\\.(brd|sch|lbr|GBL|GTL|GKO|ngc)$')",
							"pred = ent =>",
							"(acc, dir) =>",
							"async function waitChild(proc)",
							"async function runMount(dirsIterator)",
							"async function readData(output, callback = d => {})",
							"(push, stop) =>",
							" chunk =>",
							"line =>",
							" data =>",
							"async function RequestContours(req, res)",
							"async function main()",
							"cp =>",
							"(req, res, next) =>",
							"(req, res, next) =>",
							" function SendRaw(res, file, data, type = 'application/octet-stream')",
							"convertToGerber = async (boardFile, opts = {}) =>",
							"formatToExt = (layers, format) =>",
							" data =>",
							" data =>",
							"gerberEndpoint = async (req, res) =>",
							"res =>",
							" k =>",
							"gerberToGcode = async (gerberFile, allOpts = {}) =>",
							" function makePath(ext, side, base = basename)",
							"([k, v]) =>",
							"([k, v]) =>",
							" data =>",
							" data =>",
							"error =>",
							"side =>",
							"side =>",
							"([side, file]) =>",
							" k =>",
							"gcodeEndpoint = async (req, res) =>",
							"error =>",
							"GithubListContents = async (owner, repo, dir, filter) =>",
							"({ name }) =>",
							"async (req, res, next) =>",
							"st =>",
							"err =>",
							"() =>",
							"err =>",
							" k =>",
							"(req, res, next) =>",
							"async (req, res) =>",
							" function FindFile(relative)",
							"async (req, res) =>",
							" (req, res) =>",
							"async (req, res) =>",
							" function GetVFSPath(file)",
							"async function getDescription(file)",
							"r =>",
							"m =>",
							"(a, b) =>",
							"s =>",
							"re =>",
							"m =>",
							"async function GetFilesList(dir = './tmp', opts = {})",
							"n =>",
							"(acc, file) =>",
							"({ ctime, mtime, mode, size }) =>",
							"err =>",
							"a =>",
							"i =>",
							" function FilesURLs(list)",
							"url =>",
							"async (req, res) =>",
							"port =>",
							"key =>",
							"async (ws, req) =>",
							"async data =>",
							"async data =>",
							"async (req, res) =>",
							" f =>",
							" st =>",
							" () =>",
							"async (req, res) =>",
							" () =>",
							" c =>",
							" () =>",
							" () =>",
							" o =>",
							" () =>",
							"async (req, res) =>",
							"async (req, res) =>",
							"async () =>",
							"p =>",
							"file =>",
							" () =>",
							" error =>",
							"async (req, res) =>",
							"result =>",
							"file =>",
							"error =>",
							"async (req, res) =>",
							"async (req, res) =>",
							"async (req, res) =>",
							"name =>",
							"async (req, res) =>",
							"async (req, res, next) =>",
							"() =>",
							"error =>",
							" (req, res) =>",
							" () =>"
						]
					},
					"AQAAAAAAAAAAAAAAfQYAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					4305,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB9BgAAICByb3RhdGVMZWZ0ID0gbiA9PiB4ID0+CkdldE1pbWVUeXBlKGZpbGUpCiAgaGFzaFN0cmluZyhzdHJpbmcsIGJpdHMgPSAzMiwgbWFzayA9IDB4ZmZmZmZmZmYpCkdldERpck1hcChkaXJzID0gbW91bnREaXJzLCBwcmVkID0gJy4qXFwuKGJyZHxzY2h8bGJyfEdCTHxHVEx8R0tPfG5nYykkJykKICBwcmVkID0gZW50ID0+CihhY2MsIGRpcikgPT4KICB3YWl0Q2hpbGQocHJvYykKICBydW5Nb3VudChkaXJzSXRlcmF0b3IpCiAgcmVhZERhdGEob3V0cHV0LCBjYWxsYmFjayA9IGQgPT4ge30pCihwdXNoLCBzdG9wKSA9PgpjaHVuayA9PgogIGxpbmUgPT4KZGF0YSA9PgpSZXF1ZXN0Q29udG91cnMocmVxLCByZXMpCiAgbWFpbigpCiAgY3AgPT4KKHJlcSwgcmVzLCBuZXh0KSA9PgoocmVxLCByZXMsIG5leHQpID0+ClNlbmRSYXcocmVzLCBmaWxlLCBkYXRhLCB0eXBlID0gJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScpCiAgY29udmVydFRvR2VyYmVyID0gKGJvYXJkRmlsZSwgb3B0cyA9IHt9KSA9PgogIGZvcm1hdFRvRXh0ID0gKGxheWVycywgZm9ybWF0KSA9PgpkYXRhID0+CmRhdGEgPT4KICBnZXJiZXJFbmRwb2ludCA9IChyZXEsIHJlcykgPT4KICByZXMgPT4KayA9PgogIGdlcmJlclRvR2NvZGUgPSAoZ2VyYmVyRmlsZSwgYWxsT3B0cyA9IHt9KSA9PgogIG1ha2VQYXRoKGV4dCwgc2lkZSwgYmFzZSA9IGJhc2VuYW1lKQooW2ssIHZdKSA9PgooW2ssIHZdKSA9PgpkYXRhID0+CmRhdGEgPT4KICBlcnJvciA9PgogIHNpZGUgPT4KICBzaWRlID0+Cihbc2lkZSwgZmlsZV0pID0+CmsgPT4KICBnY29kZUVuZHBvaW50ID0gKHJlcSwgcmVzKSA9PgogIGVycm9yID0+CkdpdGh1Ykxpc3RDb250ZW50cyA9IChvd25lciwgcmVwbywgZGlyLCBmaWx0ZXIpID0+Cih7IG5hbWUgfSkgPT4KKHJlcSwgcmVzLCBuZXh0KSA9PgogIHN0ID0+CiAgZXJyID0+CigpID0+CiAgZXJyID0+CmsgPT4KKHJlcSwgcmVzLCBuZXh0KSA9PgoocmVxLCByZXMpID0+CkZpbmRGaWxlKHJlbGF0aXZlKQoocmVxLCByZXMpID0+CihyZXEsIHJlcykgPT4KKHJlcSwgcmVzKSA9PgpHZXRWRlNQYXRoKGZpbGUpCiAgZ2V0RGVzY3JpcHRpb24oZmlsZSkKICByID0+CiAgbSA9PgooYSwgYikgPT4KICBzID0+CiAgcmUgPT4KICBtID0+CkdldEZpbGVzTGlzdChkaXIgPSAnLi90bXAnLCBvcHRzID0ge30pCiAgbiA9PgooYWNjLCBmaWxlKSA9PgooeyBjdGltZSwgbXRpbWUsIG1vZGUsIHNpemUgfSkgPT4KICBlcnIgPT4KICBhID0+CiAgaSA9PgpGaWxlc1VSTHMobGlzdCkKICB1cmwgPT4KKHJlcSwgcmVzKSA9PgogIHBvcnQgPT4KICBrZXkgPT4KKHdzLCByZXEpID0+CiAgZGF0YSA9PgogIGRhdGEgPT4KKHJlcSwgcmVzKSA9PgpmID0+CnN0ID0+CigpID0+CihyZXEsIHJlcykgPT4KKCkgPT4KYyA9PgooKSA9PgooKSA9PgpvID0+CigpID0+CihyZXEsIHJlcykgPT4KKHJlcSwgcmVzKSA9PgooKSA9PgogIHAgPT4KICBmaWxlID0+CigpID0+CmVycm9yID0+CihyZXEsIHJlcykgPT4KICByZXN1bHQgPT4KICBmaWxlID0+CiAgZXJyb3IgPT4KKHJlcSwgcmVzKSA9PgoocmVxLCByZXMpID0+CihyZXEsIHJlcykgPT4KICBuYW1lID0+CihyZXEsIHJlcykgPT4KKHJlcSwgcmVzLCBuZXh0KSA9PgooKSA9PgogIGVycm9yID0+CihyZXEsIHJlcykgPT4KKCkgPT4AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "main.js",
			"settings":
			{
				"buffer_size": 96668,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					2251,
					1,
					"",
					null,
					"AgAAAEWfAAAAAAAAyKMAAAAAAAAAAAAAyKMAAAAAAADIowAAAAAAAPEDAAAgIGdldCB4KCkgewogICAgICByZXR1cm4gdmlld0JveC54OwogICAgfSwKICAgIHNldCB4KHZhbHVlKSB7CiAgICAgIHZpZXdCb3gueCA9IHZhbHVlOwogICAgICBzZXRSZWN0KHZpZXdCb3gpOwogICAgfSwKICAgIGdldCB5KCkgewogICAgICByZXR1cm4gdmlld0JveC55OwogICAgfSwKICAgIHNldCB5KHZhbHVlKSB7CiAgICAgIHZpZXdCb3gueSA9IHZhbHVlOwogICAgICBzZXRSZWN0KHZpZXdCb3gpOwogICAgfSwKICAgIGdldCB4MSgpIHsKICAgICAgcmV0dXJuIHZpZXdCb3gueDE7CiAgICB9LAogICAgc2V0IHgxKHZhbHVlKSB7CiAgICAgIHZpZXdCb3gueDEgPSB2YWx1ZTsKICAgICAgc2V0UmVjdCh2aWV3Qm94KTsKICAgIH0sCiAgICBnZXQgeTEoKSB7CiAgICAgIHJldHVybiB2aWV3Qm94LnkxOwogICAgfSwKICAgIHNldCB5MSh2YWx1ZSkgewogICAgICB2aWV3Qm94LnkxID0gdmFsdWU7CiAgICAgIHNldFJlY3Qodmlld0JveCk7CiAgICB9LAogICAgZ2V0IHgyKCkgewogICAgICByZXR1cm4gdmlld0JveC54MjsKICAgIH0sCiAgICBzZXQgeDIodmFsdWUpIHsKICAgICAgdmlld0JveC54MiA9IHZhbHVlOwogICAgICBzZXRSZWN0KHZpZXdCb3gpOwogICAgfSwKICAgIGdldCB5MigpIHsKICAgICAgcmV0dXJuIHZpZXdCb3gueTI7CiAgICB9LAogICAgc2V0IHkyKHZhbHVlKSB7CiAgICAgIHZpZXdCb3gueTIgPSB2YWx1ZTsKICAgICAgc2V0UmVjdCh2aWV3Qm94KTsKICAgIH0sCiAgICBnZXQgd2lkdGgoKSB7CiAgICAgIHJldHVybiB2aWV3Qm94LndpZHRoOwogICAgfSwKICAgIHNldCB3aWR0aCh2YWx1ZSkgewogICAgICB2aWV3Qm94LndpZHRoID0gdmFsdWU7CiAgICAgIHNldFJlY3Qodmlld0JveCk7CiAgICB9LAogICAgZ2V0IGhlaWdodCgpIHsKICAgICAgcmV0dXJuIHZpZXdCb3guaGVpZ2h0OwogICAgfSwKICAgIHNldCBoZWlnaHQodmFsdWUpIHsKICAgICAgdmlld0JveC5oZWlnaHQgPSB2YWx1ZTsKICAgICAgc2V0UmVjdCh2aWV3Qm94KTsKICAgIH0K",
					"AQAAAAAAAAABAAAARZ8AAAAAAAA2owAAAAAAAAAAAAAAAPC/"
				],
				[
					2258,
					1,
					"unindent",
					null,
					"AQAAAEOfAAAAAAAAQ58AAAAAAAACAAAAICA",
					"AQAAAAAAAAABAAAASZ8AAAAAAABJnwAAAAAAAAAAAAAAAPC/"
				],
				[
					2285,
					1,
					"insert",
					{
						"characters": "\nconsole.log"
					},
					"DQAAAFy7AAAAAAAAXbsAAAAAAAAAAAAAXbsAAAAAAABfuwAAAAAAAAAAAABfuwAAAAAAAGC7AAAAAAAAAAAAAGC7AAAAAAAAYbsAAAAAAAAAAAAAYbsAAAAAAABiuwAAAAAAAAAAAABiuwAAAAAAAGO7AAAAAAAAAAAAAGO7AAAAAAAAZLsAAAAAAAAAAAAAZLsAAAAAAABluwAAAAAAAAAAAABluwAAAAAAAGa7AAAAAAAAAAAAAGa7AAAAAAAAZ7sAAAAAAAAAAAAAZ7sAAAAAAABouwAAAAAAAAAAAABouwAAAAAAAGm7AAAAAAAAAAAAAGm7AAAAAAAAarsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXLsAAAAAAABcuwAAAAAAAP///////+9/"
				],
				[
					2286,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAGq7AAAAAAAAbLsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAarsAAAAAAABquwAAAAAAAAAAAAAAAPC/"
				],
				[
					2287,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAGu7AAAAAAAAbbsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAa7sAAAAAAABruwAAAAAAAAAAAAAAAPC/"
				],
				[
					2288,
					1,
					"insert",
					{
						"characters": "MakeFitAction"
					},
					"DQAAAGy7AAAAAAAAbbsAAAAAAAAAAAAAbbsAAAAAAABuuwAAAAAAAAAAAABuuwAAAAAAAG+7AAAAAAAAAAAAAG+7AAAAAAAAcLsAAAAAAAAAAAAAcLsAAAAAAABxuwAAAAAAAAAAAABxuwAAAAAAAHK7AAAAAAAAAAAAAHK7AAAAAAAAc7sAAAAAAAAAAAAAc7sAAAAAAAB0uwAAAAAAAAAAAAB0uwAAAAAAAHW7AAAAAAAAAAAAAHW7AAAAAAAAdrsAAAAAAAAAAAAAdrsAAAAAAAB3uwAAAAAAAAAAAAB3uwAAAAAAAHi7AAAAAAAAAAAAAHi7AAAAAAAAebsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbLsAAAAAAABsuwAAAAAAAAAAAAAAAPC/"
				],
				[
					2290,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAHq7AAAAAAAAe7sAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAersAAAAAAAB6uwAAAAAAAAAAAAAAAPC/"
				],
				[
					2291,
					1,
					"insert",
					{
						"characters": " clientArea"
					},
					"CwAAAHu7AAAAAAAAfLsAAAAAAAAAAAAAfLsAAAAAAAB9uwAAAAAAAAAAAAB9uwAAAAAAAH67AAAAAAAAAAAAAH67AAAAAAAAf7sAAAAAAAAAAAAAf7sAAAAAAACAuwAAAAAAAAAAAACAuwAAAAAAAIG7AAAAAAAAAAAAAIG7AAAAAAAAgrsAAAAAAAAAAAAAgrsAAAAAAACDuwAAAAAAAAAAAACDuwAAAAAAAIS7AAAAAAAAAAAAAIS7AAAAAAAAhbsAAAAAAAAAAAAAhbsAAAAAAACGuwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAe7sAAAAAAAB7uwAAAAAAAAAAAAAAAPC/"
				],
				[
					2507,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAACeQAAAAAAAAKZAAAAAAAAAAAAAA/o8AAAAAAAAAkAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/o8AAAAAAAAnkAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "server.js",
			"settings":
			{
				"buffer_size": 29166,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"prettier",
				"JsPrettier: Format Code"
			],
			[
				"",
				"Arithmetic"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"prett",
				"JsPrettier: Format Code"
			],
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"book",
				"Bookmarks: Toggle"
			],
			[
				"json",
				"Pretty JSON: Minify JSON"
			],
			[
				"jspr",
				"JsPrettier: Format Code"
			],
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"color",
				"Color Highlight: Reset"
			],
			[
				"scheme",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"edit cu",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"install pac",
				"Package Control: Install Package"
			],
			[
				"list pack",
				"Package Control: List Packages"
			],
			[
				"edit ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"edit",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"outli",
				"Browse Mode: Outline (Right)"
			],
			[
				"debugger",
				"Preferences: Debugger Settings"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"INSTALL",
				"Package Control: Install Package"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"adap",
				"Debugger: Install Adapters"
			],
			[
				"install ada",
				"Debugger: Install Adapters"
			],
			[
				"adapter",
				"Debugger: Install Adapters"
			],
			[
				"debug",
				"Debugger: Install Adapters"
			],
			[
				"Package Control: remove",
				"Package Control: Remove Package"
			],
			[
				"debu",
				"Debugger: Install Adapters"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 289.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv",
		"/home/roman/Projects/plot-cv/lib",
		"/home/roman/Projects/plot-cv/lib/eagle",
		"/home/roman/Projects/plot-cv/lib/eagle/components",
		"/home/roman/Projects/plot-cv/lib/ecmascript"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/dir-helpers.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/js/cvHighGUI.js",
		"/home/roman/Projects/plot-cv/test-opencv.js",
		"/home/roman/Projects/plot-cv/lib/eagle/svgRenderer.js",
		"/home/roman/Projects/plot-cv/lib/misc.js",
		"/home/roman/Projects/plot-cv/lib/geom/bbox.js",
		"/home/roman/Projects/plot-cv/lib/eagle/document.js",
		"/home/roman/Projects/plot-cv/lib/eagle/element.js",
		"/home/roman/Projects/plot-cv/lib/eagle/common.js",
		"/home/roman/Projects/plot-cv/lib/geom/matrix.js",
		"/home/roman/Projects/plot-cv/upload-server.js",
		"/home/roman/Projects/plot-cv/lib/eagle/ref.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/symbol.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/instance.js",
		"/home/roman/Projects/plot-cv/server.js",
		"/home/roman/Projects/plot-cv/commands.js",
		"/home/roman/Projects/plot-cv/lib/dom/layer.js",
		"/home/roman/Projects/plot-cv/test-ini.js",
		"/home/roman/Projects/plot-cv/lib/geom/rect.js",
		"/home/roman/Projects/plot-cv/lib/geom/size.js",
		"/home/roman/Projects/plot-cv/lib/eagle/boardRenderer.js",
		"/home/roman/Projects/plot-cv/lib/eagle/schematicRenderer.js",
		"/home/roman/Projects/plot-cv/lib/fetch.js",
		"/home/roman/Projects/plot-cv/lib/eagle/renderUtils.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/pin.js",
		"/home/roman/Projects/plot-cv/lib/geom/transformation.js",
		"/home/roman/Projects/an-tronics/eagle/VCF-LM324-Stereo-LFO-POT2x3.sch",
		"/home/roman/Projects/plot-cv/lib/eagle/components/textElement.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/text.js",
		"/home/roman/Projects/plot-cv/lib/dom/element.js",
		"/home/roman/Projects/plot-cv/lib/dom/svg.js",
		"/home/roman/Projects/plot-cv/ruler-draggable.js",
		"/home/roman/Projects/plot-cv/os-helpers.js",
		"/home/roman/Projects/plot-cv/lib/util.js",
		"/home/roman/Projects/plot-cv/lib/eagle/libraryRenderer.js",
		"/home/roman/Projects/plot-cv/lib/eagle/nodeList.js",
		"/home/roman/Projects/plot-cv/lib/eagle/nodeMap.js",
		"/home/roman/Projects/plot-cv/lib/eagle/renderer.js",
		"/home/roman/Projects/plot-cv/lib/eagle/elementProxy.js",
		"/home/roman/Projects/plot-cv/eagle-shell.js",
		"/home/roman/Projects/an-tronics/eagle/VCF-LM324-Stereo-LFO-Alt.brd",
		"/home/roman/Projects/plot-cv/lib/eagle/components.js",
		"/home/roman/Projects/plot-cv/lib/eagle/node.js",
		"/home/roman/Projects/plot-cv/lib/eagle/project.js",
		"/home/roman/Projects/plot-cv/lib/dom/preactComponent.js",
		"/home/roman/Projects/plot-cv/main.js",
		"/home/roman/Projects/plot-cv/package.json",
		"/home/roman/Projects/plot-cv/eagle2svg.js",
		"/home/roman/Projects/plot-cv/lib/dom/event.js",
		"/home/roman/Projects/plot-cv/preact.js",
		"/home/roman/Projects/plot-cv/lib/preact.mjs",
		"/home/roman/Projects/plot-cv/lib/preact.module.js",
		"/home/roman/Projects/pictest/eagle/OpenProg-18F2550-new.sch",
		"/home/roman/Projects/plot-cv/importReplacer.js",
		"/home/roman/Projects/plot-cv/io-helpers.js",
		"/home/roman/Projects/plot-cv/lib/compileCommand.js",
		"/home/roman/Projects/plot-cv/test-sockets.js",
		"/home/roman/Projects/plot-cv/test-ffi.js",
		"/home/roman/Projects/plot-cv/plot-cv.sublime-project",
		"/home/roman/Projects/plot-cv/lib/preact.standalone.js",
		"/home/roman/Projects/plot-cv/preact.mjs",
		"/home/roman/Projects/plot-cv/lib/iterator/event.js",
		"/home/roman/Projects/sdcc/pictest/eagle/OpenProg-18F2550-new.sch",
		"/home/roman/Projects/plot-cv/lib/svg/path.js",
		"/home/roman/Projects/plot-cv/lib/geom/arc.js",
		"/home/roman/Projects/plot-cv/debugger.js",
		"/home/roman/Projects/plot-cv/debugger-server.js",
		"/home/roman/Projects/plot-cv/lib/gl-matrix/vec3.js",
		"/home/roman/Projects/plot-cv/lib/gl-matrix/vec4.js",
		"/home/roman/Projects/plot-cv/draw.js",
		"/home/roman/Projects/plot-cv/svg-box.js",
		"/home/roman/Projects/plot-cv/tmp/discogs/8369022-359.html",
		"/home/roman/Projects/plot-cv/measure-unit.js",
		"/home/roman/Projects/plot-cv/lib/geom/polyline.js",
		"/home/roman/Projects/plot-cv/lib/geom/line.js",
		"/home/roman/Projects/plot-cv/output.svg",
		"/home/roman/Projects/plot-cv/lib/geom/point.js",
		"/home/roman/Projects/plot-cv/lib/geom/align.js",
		"/home/roman/Projects/plot-cv/svg-crop-pad.js",
		"/home/roman/Projects/pictest/eagle/OpenProg-18F2550-new.brd",
		"/home/roman/Projects/plot-cv/lib/preact/is-component.js",
		"/home/roman/Projects/plot-cv/lib/preact/append.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/polygon.js",
		"/home/roman/Projects/plot-cv/test-inspect.js",
		"/home/roman/Projects/plot-cv/lib/eagle/components/rectangle.js",
		"/home/roman/Projects/plot-cv/lib/dom.js",
		"/home/roman/Projects/plot-cv/lib/renderToString.js",
		"/home/roman/Projects/plot-cv/test-preact.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
		"/home/roman/Projects/plot-cv/lib/repeater/react-hooks.js",
		"/home/roman/Projects/plot-cv/lib/dom/elementRect.js",
		"/home/roman/Projects/plot-cv/lib/xml/util.js",
		"/home/roman/Projects/plot-cv/test-timeout.js",
		"/home/roman/Projects/plot-cv/lib/preact.esm.js",
		"/home/roman/Projects/plot-cv/lib/preact.m.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/ol-map.js",
		"/home/roman/Projects/plot-cv/map.html",
		"/home/roman/Projects/plot-cv/debugger-client.js",
		"/home/roman/Projects/plot-cv/debugger.html",
		"/home/roman/Projects/plot-cv/assemblyscript/util/node.js",
		"/home/roman/Projects/plot-cv/tmp/discogs/8369022-237.html",
		"/home/roman/Projects/plot-cv/adsb-server.js",
		"/home/roman/Projects/plot-cv/readfile.js",
		"/home/roman/Projects/plot-cv/test-debug.js",
		"/home/roman/Projects/plot-cv/test-debuggerprotocol.js",
		"/home/roman/Projects/plot-cv/test-css3.js",
		"/home/roman/Projects/plot-cv/grammar-css3.js",
		"/home/roman/Projects/plot-cv/test-cparse.js",
		"/home/roman/Projects/plot-cv/test-coverage.js",
		"/home/roman/Projects/plot-cv/test-color.js",
		"/home/roman/Projects/plot-cv/test-clipper.js",
		"/home/roman/Projects/plot-cv/test-cli.js",
		"/home/roman/Projects/plot-cv/lib/meriyah.js",
		"/home/roman/Projects/plot-cv/lib/async/helpers.js",
		"/home/roman/Projects/plot-cv/test-spawn.js",
		"/home/roman/Projects/plot-cv/test-readfile.js",
		"/home/roman/Projects/plot-cv/quickjs/cutils.h",
		"/usr/include/mariadb/mysql.h",
		"/home/roman/Projects/plot-cv/msys2-runtime/msys2/newlib/libc/include/sys/signal.h",
		"/home/roman/Projects/plot-cv/test-nanovg.js",
		"/home/roman/Projects/plot-cv/qjs-opencv/js/cvUtils.js",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.c",
		"/home/roman/Projects/plot-cv/quickjs/libregexp.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/ringbuffer.c",
		"/home/roman/Projects/plot-cv/ast-shell.js",
		"/home/roman/Projects/plot-cv/clang-ast.js",
		"/home/roman/Projects/plot-cv/compile_commands.js"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 146.0,
		"where_history":
		[
			"/home/roman/Projects/plot-cv,*.c,*.h,*.js,-*/libwebsockets/*,-*/node_modules/*,-*/doc/html/*,-*/openlayers/*",
			"/home/roman/Projects/plot-cv,*.c,*.h,*.js,-*/libwebsockets/*,-*/node_modules/*,-*/doc/html/*",
			"/home/roman/Projects/plot-cv,*.c,*.h,*.js,-*/libwebsockets/*,-*/node_modules/*",
			"/home/roman/Projects/plot-cv,*.c,*.h,*.jsx,-*/libwebsockets/*,-*/node_modules/*",
			"/home/roman/Projects/plot-cv,*.c,*.h,*.js,-*/libwebsockets/*,-*/node_modules/*",
			"/home/roman/Projects/plot-cv,*.c,*.h,*.js",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"ImmutablePath\\b",
			"body:",
			"layerList",
			"layersDropDown",
			"lazyProperty",
			"setRect\\(bgRect\\, viewBox\\);",
			"}$",
			"Rect.bind",
			"new Renderer",
			"viewBox",
			"bind\\b",
			"bind",
			"new Render",
			"calcViewBox",
			"getMeasure",
			"ne Rende",
			"\\bRenderer\\(",
			"\\bRenderer\\b",
			"updateList",
			"Symbol.iterator",
			"GetFilesList",
			"ListProjects",
			"FetchURL",
			"FileList",
			"ListFiles",
			"GetFilesList",
			"files",
			"toUnixTime",
			"GetFilesList",
			"GetDirMap",
			"GetFilesList",
			"font\\.draw",
			"font",
			"DrawText",
			"$",
			"#\\${",
			"Text\\(",
			"GetDirMap",
			"ReadDirRecursive",
			"maxArrayLen",
			"GetDirMap",
			"dirmap",
			"ReadDir",
			"mountDirs",
			"console.log",
			"resizeRelat",
			"\\blog\\b",
			"align=",
			"alignment",
			"Text",
			"align",
			"alignment",
			"<text ",
			"alignment",
			"imName",
			"immutableClass",
			"ImmutableTrans",
			"accumulate",
			"roundTo",
			"ion define\\(",
			"define",
			"define,",
			"define, ",
			"ion properties",
			"PackageNames",
			"tryCatch",
			"tryCatc",
			"tryFunction",
			"putError",
			"putErr",
			"putError",
			"mapAdapter",
			"misc.js",
			"xpath",
			"ImmutableXPath",
			"renderCollection",
			"debug = ",
			"debug =",
			"this.debug",
			"debug\\(",
			"debug",
			"prettier-ignore",
			"/\\* prettier\\-ignore \\*/\\n",
			"prettier-ignore",
			"/\\* prettier\\-ignore \\*/ ",
			"\\bkey\\b",
			"'layers'",
			"'board'",
			"'element'",
			"cacheFields",
			"plain",
			"'plain'",
			"history entries",
			"SchematicSymbol",
			"Loading",
			"Opened project",
			"deep\\.",
			"inspect",
			"'board'",
			"text",
			"lookup\\('/",
			"deep.clone\\(",
			"clone\\(",
			"deep.clone",
			"deep",
			"\\bplain\\b",
			"'plain'",
			"get plain",
			"'plain'",
			"\\b(getMainElement|mainElement)\\b",
			"(getMainElement|mainElement)",
			"\\b(getMainElement|mainElement)\\b",
			"(getMainElement|mainElement)",
			"mainElement",
			"getMainElement",
			"memoizedProperties",
			"util\\.",
			"GetFilesList",
			"unique",
			"GetDirMap",
			"console",
			"GetFilesList",
			"$",
			"file'",
			"child_process",
			"exec\\(",
			"'file'",
			"mime"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"Pointer",
			"setRect(viewBox);",
			"},",
			"",
			"lookup('",
			"",
			"doRender",
			"doRender(",
			"unmount(",
			"diffElementNodes(",
			"commitRoot(",
			"diff(",
			"reorderChildren(",
			"eventProxyCapture(",
			"eventProxy(",
			"setProperty(",
			"setStyle(",
			"applyRef(",
			"diffProps(",
			"placeChild(",
			"diffChildren(",
			"enqueueRender(",
			"process",
			"process(",
			"updateParentDomPointers(",
			"getDomSibling(",
			"createVNode(",
			"createElement(",
			"createElement",
			"removeNode(",
			"assign(",
			"invokeOrReturn",
			"argsChanged",
			"invokeEffect",
			"invokeCleanup",
			"HAS_RAF",
			"flushAfterPaintEffects",
			"oldBeforeUnmount",
			"oldCommit",
			"oldAfterDiff",
			"oldBeforeRender",
			"afterPaintEffects",
			"currentHook",
			"currentIndex",
			"currentComponent",
			"diff(",
			"",
			"^",
			" \\\\\\n\\t--",
			"",
			"strokeStyle",
			"export function",
			"",
			"\\n\\n",
			"\\1//console.log",
			"\\1console.log",
			"",
			"spawn",
			"}\\n\\n\\1\\2",
			"}\\n\\n  \\1",
			"buf",
			"\\1",
			"debug(`\\1 ${\\2}`)",
			"fs.readFileSync",
			", ",
			"strOrRegex",
			"argumentsOfType",
			"valuePointer",
			"file",
			"arrayOrString",
			"",
			"\\1//console.",
			"obj[name]"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": null,
							"function_name_status_row": 1,
							"outline_rename_mode": false,
							"symkeys":
							[
							],
							"symlist":
							[
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1688722210.31,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "main.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 96668,
						"regions":
						{
						},
						"selection":
						[
							[
								9254,
								9260
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 155,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1688725810.83,
							"tabs_extra_last_activated_sheet_index": 0,
							"tabs_extra_moving":
							[
								4,
								1
							],
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2182.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "server.js",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 29166,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1688727696.8,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.8,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 0.0
	},
	"output.Debugger Console":
	{
		"height": 0.0
	},
	"output.coffeecompile_output":
	{
		"height": 162.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "plot-cv.sublime-project",
	"replace":
	{
		"height": 68.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"server",
				"server.js"
			],
			[
				"",
				"lib/eagle/document.js"
			],
			[
				"docum",
				"lib/eagle/document.js"
			],
			[
				"ref.js",
				"lib/eagle/ref.js"
			],
			[
				"size.js",
				"lib/geom/size.js"
			],
			[
				"rect.js",
				"lib/geom/rect.js"
			],
			[
				"bbox",
				"lib/geom/bbox.js"
			],
			[
				"misc.js",
				"lib/misc.js"
			],
			[
				"matrix.js",
				"lib/geom/matrix.js"
			],
			[
				"upload-ser",
				"upload-server.js"
			],
			[
				"command",
				"commands.js"
			],
			[
				"cvHigh",
				"qjs-opencv/js/cvHighGUI.js"
			],
			[
				"test-opencv",
				"test-opencv.js"
			],
			[
				"svgre",
				"lib/eagle/svgRenderer.js"
			],
			[
				"dir-help",
				"dir-helpers.js"
			],
			[
				"server.js",
				"server.js"
			],
			[
				"ruler-dra",
				"ruler-draggable.js"
			],
			[
				"lib/fetch",
				"lib/fetch.js"
			],
			[
				"svgRe",
				"lib/eagle/svgRenderer.js"
			],
			[
				"svg.js",
				"lib/dom/svg.js"
			],
			[
				"dom/ele",
				"lib/dom/element.js"
			],
			[
				"symbol.js",
				"lib/eagle/components/symbol.js"
			],
			[
				"text.js",
				"lib/eagle/components/text.js"
			],
			[
				"textEle",
				"lib/eagle/components/textElement.js"
			],
			[
				"transform",
				"lib/geom/transformation.js"
			],
			[
				"renderUt",
				"lib/eagle/renderUtils.js"
			],
			[
				"transformation",
				"lib/geom/transformation.js"
			],
			[
				"renderer",
				"lib/eagle/renderer.js"
			],
			[
				"board",
				"lib/eagle/boardRenderer.js"
			],
			[
				"element.js",
				"lib/eagle/element.js"
			],
			[
				"document",
				"lib/eagle/document.js"
			],
			[
				"symbol",
				"lib/eagle/components/symbol.js"
			],
			[
				"eagle-she",
				"eagle-shell.js"
			],
			[
				"nodeList",
				"lib/eagle/nodeList.js"
			],
			[
				"node.js",
				"lib/eagle/node.js"
			],
			[
				"common.js",
				"lib/eagle/common.js"
			],
			[
				"svgren",
				"lib/eagle/svgRenderer.js"
			],
			[
				"components.js",
				"lib/eagle/components.js"
			],
			[
				"main.js",
				"main.js"
			],
			[
				"os-help",
				"os-helpers.js"
			],
			[
				"util.js",
				"lib/util.js"
			],
			[
				"commands",
				"commands.js"
			],
			[
				"preact.js",
				"preact.js"
			],
			[
				"preact.mjs",
				"lib/preact.mjs"
			],
			[
				"react.mod",
				"lib/preact.module.js"
			],
			[
				"eagle2sv",
				"eagle2svg.js"
			],
			[
				"preact.module",
				"lib/preact.module.js"
			],
			[
				"preactCom",
				"lib/dom/preactComponent.js"
			],
			[
				"event.js",
				"lib/iterator/event.js"
			],
			[
				"preact.stand",
				"lib/preact.standalone.js"
			],
			[
				"importRe",
				"importReplacer.js"
			],
			[
				"package.json",
				"package.json"
			],
			[
				"importrepl",
				"importReplacer.js"
			],
			[
				"io-help",
				"io-helpers.js"
			],
			[
				"compile",
				"lib/compileCommand.js"
			],
			[
				"testsock",
				"test-sockets.js"
			],
			[
				"test-socke",
				"test-sockets.js"
			],
			[
				"test-ffi",
				"test-ffi.js"
			],
			[
				"vec3",
				"lib/gl-matrix/vec3.js"
			],
			[
				"gl-matrix/vec",
				"lib/gl-matrix/vec4.js"
			],
			[
				"draw.js",
				"draw.js"
			],
			[
				"debugger.js",
				"debugger.js"
			],
			[
				"359",
				"tmp/discogs/8369022-359.html"
			],
			[
				"debugger-ser",
				"debugger-server.js"
			],
			[
				"bbox.",
				"lib/geom/bbox.js"
			],
			[
				"align.js",
				"lib/geom/align.js"
			],
			[
				"point.js",
				"lib/geom/point.js"
			],
			[
				"line.js",
				"lib/geom/line.js"
			],
			[
				"svg-box",
				"svg-box.js"
			],
			[
				"svg-crop",
				"svg-crop-pad.js"
			],
			[
				"append.j",
				"lib/preact/append.js"
			],
			[
				"preact.ms",
				"preact.mjs"
			],
			[
				"append",
				"lib/preact/append.js"
			],
			[
				"preact.mod",
				"lib/preact.module.js"
			],
			[
				"reactCom",
				"lib/dom/preactComponent.js"
			],
			[
				"eagle2svg",
				"eagle2svg.js"
			],
			[
				"pin.js",
				"lib/eagle/components/pin.js"
			],
			[
				"quickjs-inspec",
				"quickjs/qjs-modules/quickjs-inspect.c"
			],
			[
				"test-inspect",
				"test-inspect.js"
			],
			[
				"renderTo",
				"lib/renderToString.js"
			],
			[
				"preact.sta",
				"lib/preact.standalone.js"
			],
			[
				"test-prea",
				"test-preact.js"
			],
			[
				"preact.mo",
				"lib/preact.module.js"
			],
			[
				"test-preact",
				"test-preact.js"
			],
			[
				"polylin",
				"lib/geom/polyline.js"
			],
			[
				"rectangle",
				"lib/eagle/components/rectangle.js"
			],
			[
				"polyline",
				"lib/geom/polyline.js"
			],
			[
				"dom.js",
				"lib/dom.js"
			],
			[
				"dom/svg",
				"lib/dom/svg.js"
			],
			[
				"xml/util",
				"lib/xml/util.js"
			],
			[
				"eagle/ele",
				"lib/eagle/element.js"
			],
			[
				"eagle2s",
				"eagle2svg.js"
			],
			[
				"polygon.js",
				"lib/eagle/components/polygon.js"
			],
			[
				"renderU",
				"lib/eagle/renderUtils.js"
			],
			[
				"nodeMap",
				"lib/eagle/nodeMap.js"
			],
			[
				"element",
				"lib/eagle/element.js"
			],
			[
				"node",
				"lib/eagle/node.js"
			],
			[
				"ele",
				"lib/eagle/element.js"
			],
			[
				"237",
				"tmp/discogs/8369022-237.html"
			],
			[
				"elemen",
				"lib/eagle/element.js"
			],
			[
				"docu",
				"lib/eagle/document.js"
			],
			[
				"boardRen",
				"lib/eagle/boardRenderer.js"
			],
			[
				"lib/misc",
				"lib/misc.js"
			],
			[
				"documen",
				"lib/eagle/document.js"
			],
			[
				"lib/util",
				"quickjs/qjs-modules/lib/util.js"
			],
			[
				"project.",
				"lib/eagle/project.js"
			],
			[
				"svgRendr",
				"lib/eagle/svgRenderer.js"
			],
			[
				"eagle-shell",
				"eagle-shell.js"
			],
			[
				"docume",
				"lib/eagle/document.js"
			],
			[
				"adsb-ser",
				"adsb-server.js"
			],
			[
				"ol-map",
				"ol-map.js"
			],
			[
				"map.ht",
				"map.html"
			],
			[
				"debugger-clie",
				"debugger-client.js"
			],
			[
				"debugger.html",
				"debugger.html"
			],
			[
				"debugger-server",
				"debugger-server.js"
			],
			[
				"project.js",
				"lib/eagle/project.js"
			],
			[
				"upload-server",
				"upload-server.js"
			],
			[
				"test-debug.js",
				"test-debug.js"
			],
			[
				"test-debuggerpr",
				"test-debuggerprotocol.js"
			],
			[
				"test-css",
				"test-css3.js"
			],
			[
				"grammar-css",
				"grammar-css3.js"
			],
			[
				"test-cpa",
				"test-cparse.js"
			],
			[
				"test-cove",
				"test-coverage.js"
			],
			[
				"test-color",
				"test-color.js"
			],
			[
				"test-clipp",
				"test-clipper.js"
			],
			[
				"test-cli.js",
				"test-cli.js"
			],
			[
				"readfile.js",
				"readfile.js"
			],
			[
				"test-spa",
				"test-spawn.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/plot-cv.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 271.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"WS"
			]
		],
		"width": 1017.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 293.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
